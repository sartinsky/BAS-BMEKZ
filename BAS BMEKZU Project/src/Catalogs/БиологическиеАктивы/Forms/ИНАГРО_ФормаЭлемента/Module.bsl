#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды 
		
    ФормироватьНаименованиеПолноеАвтоматически = УстановитьФлагФормироватьНаименованиеПолноеАвтоматически(Объект.НаименованиеПолное,Объект.Наименование);
	
	СчетаУчетаОрганизация = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация");
	СчетаУчетаСклад = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновнойСклад");
	
	// Обработчик подсистемы "Свойства"
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Объект", Объект);
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	
	УправлениеФормой(ЭтаФорма);
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// Обработчик подсистемы "Свойства"
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтаФорма, ТекущийОбъект);

КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// Подсистема "Свойства"
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтаФорма, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтаФорма, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура НаименованиеПриИзменении(Элемент)
	
	Если ФормироватьНаименованиеПолноеАвтоматически Тогда
		Объект.НаименованиеПолное = Объект.Наименование;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеПолноеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;

	Список = Новый СписокЗначений();
	Список.Добавить(Объект.Наименование);

	// Выбор из списка и обработка выбора.
	Оповещение = Новый ОписаниеОповещения("НаименованиеПолноеНачалоВыбораЗавершение", ЭтотОбъект);
	ПоказатьВыборИзСписка(Оповещение, Список, Элементы.НаименованиеПолное);
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеПолноеНачалоВыбораЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		Объект.НаименованиеПолное = Результат.Значение;
		Модифицированность = Истина;
		ФормироватьНаименованиеПолноеАвтоматически = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеПолноеПриИзменении(Элемент)
    
    ФормироватьНаименованиеПолноеАвтоматически = УстановитьФлагФормироватьНаименованиеПолноеАвтоматически(Элементы.НаименованиеПолное,Элементы.Наименование);

КонецПроцедуры

&НаКлиенте
Процедура ВидБиологическогоАктиваПриИзменении(Элемент)
	
	Объект.НачислятьАмортизацию = Ложь;
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

#Область ОбработчикиСобытийЭлементовОсновные

&НаКлиенте
Процедура НоменклатураГТДНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ВариантыВыбора = Новый СписокЗначений();
	ВариантыВыбора.Добавить(Ложь,   НСтр("ru='Выбрать из кодов номенклатуры';uk='Вибрати з кодів номенклатури'"));
	ВариантыВыбора.Добавить(Истина, НСтр("ru='Выбрать из классификатора';uk='Вибрати із класифікатора'"));
	
	Оповещение = Новый ОписаниеОповещения("НоменклатураГТДНачалоВыбораЗавершение", ЭтотОбъект, Элемент);
	ПоказатьВыборИзСписка(Оповещение, ВариантыВыбора, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура НоменклатураГТДНачалоВыбораЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если РезультатВыбора.Значение = Истина Тогда
		ПараметрыОткрытия = Новый Структура("ТекущаяСтрока");
		Если ЗначениеЗаполнено(Объект.НоменклатураГТД) И ТипЗнч(Объект.НоменклатураГТД) = Тип("СправочникСсылка.КлассификаторУКТВЭД") Тогда
			ПараметрыОткрытия.Вставить("ТекущаяСтрока", Объект.НоменклатураГТД);	
		КонецЕсли; 
		ОткрытьФорму("Справочник.КлассификаторУКТВЭД.Форма.ФормаВыбора", ПараметрыОткрытия, ДополнительныеПараметры);
	Иначе
		ПараметрыОткрытия = Новый Структура("Отбор, ТекущаяСтрока", Новый Структура("Владелец", Объект.Ссылка));
		Если ЗначениеЗаполнено(Объект.НоменклатураГТД) И ТипЗнч(Объект.НоменклатураГТД) = Тип("СправочникСсылка.НоменклатураГТД") Тогда
			ПараметрыОткрытия.Вставить("ТекущаяСтрока", Объект.НоменклатураГТД);	
		КонецЕсли;
		ОткрытьФорму("Справочник.НоменклатураГТД.Форма.ФормаВыбора", ПараметрыОткрытия, ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтавкаНДСПриИзменении(Элемент)
	
	Если Объект.СтавкаНДС <> ПредопределенноеЗначение("Перечисление.СтавкиНДС.БезНДС") 
	   И Объект.СтавкаНДС <> ПредопределенноеЗначение("Перечисление.СтавкиНДС.НеНДС") Тогда 
		Объект.ЛьготаНДС = "";
		Объект.КодЛьготы = "";
	КонецЕсли;
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти 

#Область ОбработчикиСобытийЭлементовТаблицыФормыЕдиницыИзмерения

&НаКлиенте
Процедура ЕдиницыИзмеренияПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Если Копирование Тогда
		Отказ = Истина;	               
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЕдиницыИзмеренияПередУдалением(Элемент, Отказ)
	
	ТекущиеДанные = Элементы.ЕдиницыИзмерения.ТекущиеДанные;
	
	Если НЕ ТекущиеДанные = Неопределено Тогда
		Если ТекущиеДанные.ЕдиницаИзмерения = Объект.БазоваяЕдиницаИзмерения Тогда
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЕдиницыИзмеренияПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
 	ТекущиеДанные = Элементы.ЕдиницыИзмерения.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ОтменаРедактирования Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если ТекущиеДанные.ЕдиницаИзмерения.Пустая() Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Не указана единица измерения!';uk='Не зазначена одиниця виміру!'"), , "ЕдиницыИзмерения", , Отказ);
		Возврат;
	КонецЕсли;	
	
	Если ТекущиеДанные.Коэффициент = 0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Не указан коэффициент!';uk='Не зазначений коефіцієнт!'"), , "ЕдиницыИзмерения", , Отказ);
		Возврат;
	КонецЕсли;	
	
	Если Объект.ЕдиницыИзмерения.НайтиСтроки(Новый Структура("ЕдиницаИзмерения", ТекущиеДанные.ЕдиницаИзмерения)).Количество() > 1 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Данная единица измерения уже зарегистрирована для номенклатуры!';uk='Дана одиниця виміру вже зареєстрована для номенклатури!'"), , "ЕдиницыИзмерения", , Отказ);
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти 

#Область СлужебныеПроцедурыИФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
    Элементы = Форма.Элементы;
	Объект   = Форма.Объект;
			
	Если Объект.СтавкаНДС = ПредопределенноеЗначение("Перечисление.СтавкиНДС.БезНДС") 
		ИЛИ Объект.СтавкаНДС = ПредопределенноеЗначение("Перечисление.СтавкиНДС.НеНДС") 
		Тогда
		Элементы.ЛьготаНДС.Доступность = Истина;
		Элементы.КодЛьготы.Доступность = Истина;
	Иначе
		Элементы.ЛьготаНДС.Доступность = Ложь;
		Элементы.КодЛьготы.Доступность = Ложь;
	КонецЕсли;

	ЭтоЖивотное = Ложь;	
		
	Если ИНАГРО_ОбщийВызовСервераПовтИсп.ЕстьБСПУ() Тогда
		
		#Если Клиент Тогда
			МодульИНАГРО_БиологическиеАктивы = ОбщегоНазначенияКлиент.ОбщийМодуль("ИНАГРО_БиологическиеАктивы");			
		#ИначеЕсли Сервер Тогда			
			МодульИНАГРО_БиологическиеАктивы = ОбщегоНазначения.ОбщийМодуль("ИНАГРО_БиологическиеАктивы");
		#КонецЕсли
		
		ЭтоЖивотное   = МодульИНАГРО_БиологическиеАктивы.ЭтоЖивотное(Объект.Ссылка);		 				
		АмортизацияБА = ПолучитьКонстантуИНАГРО_НачислятьАмортизациюБА();
				
		ДолгосрочныеБАРастениеводства = Объект.ВидБиологическогоАктива = ПредопределенноеЗначение("Перечисление.ИНАГРО_ВидыБА.ДолгосрочныеБиологическиеАктивыРастениеводства");
		ДолгосрочныеБАЖивотноводства  = Объект.ВидБиологическогоАктива = ПредопределенноеЗначение("Перечисление.ИНАГРО_ВидыБА.ДолгосрочныеБиологическиеАктивыЖивотноводства"); 
		
		Элементы.ВидЖивотного.Видимость          = ЭтоЖивотное;
		Элементы.ВидДеятельности.Видимость       = ЭтоЖивотное;
		Элементы.ИнвентарныйНомер.Видимость      = ДолгосрочныеБАЖивотноводства ИЛИ ДолгосрочныеБАРастениеводства;
		Элементы.КоефПереводаВЖивойВес.Видимость = ЭтоЖивотное;
		Элементы.Подразделение.Видимость         = ЭтоЖивотное;
			
		Элементы.НачислятьАмортизацию.Видимость  = АмортизацияБА И (ДолгосрочныеБАЖивотноводства ИЛИ ДолгосрочныеБАРастениеводства);
		Элементы.ДекорацияПробел.Видимость       = АмортизацияБА И (ДолгосрочныеБАЖивотноводства ИЛИ ДолгосрочныеБАРастениеводства);
		
	КонецЕсли;
	
КонецПроцедуры 

&НаСервереБезКонтекста
Функция ПолучитьКонстантуИНАГРО_НачислятьАмортизациюБА()
	
	Возврат Константы.ИНАГРО_НачислятьАмортизациюБА.Получить();
	
КонецФункции

// Присваивает соответствующее значение переменной ФормироватьНаименованиеПолноеАвтоматически.
//
// Параметры:
//  Нет.
//
&НаКлиентеНаСервереБезКонтекста
Функция УстановитьФлагФормироватьНаименованиеПолноеАвтоматически(НаименованиеПолное,Наименование)
   
   Возврат (ПустаяСтрока(НаименованиеПолное) ИЛИ НаименованиеПолное = Наименование);
   
КонецФункции

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтаФорма, РеквизитФормыВЗначение("Объект"));

КонецПроцедуры

#Область ПроцедурыИФункцииДляОтображенияСчетовУчета

&НаСервере
Процедура ОбновитьСчетаУчета() 
	
	МодульИНАГРО_БиологическиеАктивы = ОбщегоНазначения.ОбщийМодуль("ИНАГРО_БиологическиеАктивы");
	
	СчетаУчета = МодульИНАГРО_БиологическиеАктивы.ПолучитьСчетаБиологическихАктивов(СчетаУчетаОрганизация, Объект.Ссылка, СчетаУчетаСклад);
	
	СчетУчетаБУ 				= СчетаУчета.СчетУчетаБУ;
	СубконтоБУ1 				= СчетаУчета.СубконтоБУ1;
	СубконтоБУ2 				= СчетаУчета.СубконтоБУ2;
	СубконтоБУ3 				= СчетаУчета.СубконтоБУ3;
	СчетУчетаПередачиБУ 		= СчетаУчета.СчетПередачиБУ;
	СчетУчетаЗабалансовыйБУ 	= СчетаУчета.СчетУчетаДоп;
	СчетУчетаПередачиЗабалансовыйБУ = СчетаУчета.СчетПередачиЗабБУ;
	СхемаРеализации 			= СчетаУчета.СхемаРеализации;
	НалоговоеНазначение 		= СчетаУчета.НалоговоеНазначение;
	НалоговоеНазначениеДоходовИЗатрат 		= СчетаУчета.НалоговоеНазначениеДоходовИЗатрат;
	
	ТекстИнфо = НСтр("ru='для';uk='для'");
	Если ЗначениеЗаполнено(СчетаУчета.Номенклатура) Тогда
		Если НЕ СчетаУчета.Номенклатура = Объект.Ссылка Тогда
			ТекстИнфо = ТекстИнфо + НСтр("ru=' группы номенклатуры ""';uk=' групи номенклатури ""'")+СчетаУчета.Номенклатура+""",";
		Иначе
			ТекстИнфо = ТекстИнфо + НСтр("ru=' данной номенклатуры,';uk=' даної номенклатури,'");
		КонецЕсли;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(СчетаУчета.Склад) Тогда
		Если НЕ ЗначениеЗаполнено(СчетаУчета.ТипСклада) Тогда
			ТекстИнфо = ТекстИнфо + НСтр("ru=' всех складов';uk=' всіх складів'")
		Иначе
			ТекстИнфо = ТекстИнфо + НСтр("ru=' типа складов ""';uk=' типу складів ""'")+СчетаУчета.ТипСклада+"""";
		КонецЕсли;
	Иначе
		Если СчетаУчета.Склад.ЭтоГруппа Тогда
			ТекстИнфо = ТекстИнфо + НСтр("ru=' группы складов ""';uk=' групи складів ""'")+СчетаУчета.Склад+"""";
		Иначе
			ТекстИнфо = ТекстИнфо + НСтр("ru=' склада ""';uk=' складу ""'")+СчетаУчета.Склад+"""";
		КонецЕсли;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(СчетаУчета.Организация) Тогда
		ТекстИнфо = ТекстИнфо + НСтр("ru=', всех организаций';uk=', всіх організацій'");
	Иначе
		ТекстИнфо = ТекстИнфо + НСтр("ru=', организации ""';uk=', організації ""'")+СчетаУчета.Организация+"""";
	КонецЕсли;
	
	Элементы.НадписьУстановленоДля.Заголовок = НСтр("ru='Настроены ';uk='Настроєні '")+ТекстИнфо;

	// Настроим действия для кнопки
	Если НЕ (СчетаУчетаОрганизация=СчетаУчета.Организация И СчетаУчетаСклад=СчетаУчета.Склад И Объект.Ссылка=СчетаУчета.Номенклатура) Тогда
		
		ТекстТекущий  = НСтр("ru='для данной номенклатуры,';uk='для даної номенклатури,'");
		Если НЕ ЗначениеЗаполнено(СчетаУчетаСклад) Тогда
			ТекстТекущий = ТекстТекущий + НСтр("ru=' всех складов';uk=' всіх складів'")
		Иначе
			ТекстТекущий = ТекстТекущий + НСтр("ru=' склада ""';uk=' складу ""'")+СчетаУчетаСклад+"""";
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(СчетаУчетаОрганизация) Тогда
			ТекстТекущий = ТекстТекущий + НСтр("ru=', всех организаций';uk=', всіх організацій'");
		Иначе
			ТекстТекущий = ТекстТекущий + НСтр("ru=', организации ""';uk=', організації ""'")+СчетаУчетаОрганизация+"""";
		КонецЕсли;
	
		Элементы.НастроитьСчетаУчетаПоФильтру.Заголовок = ТекстТекущий;
		Элементы.НастроитьСчетаУчетаПоФильтру.Видимость = Истина;
		
	Иначе
		
		Элементы.НастроитьСчетаУчетаПоФильтру.Видимость = Ложь;
		
	КонецЕсли; 

	Элементы.НастроитьСчетаУчетаДляИспользуемых.Заголовок = ТекстИнфо;
			
КонецПроцедуры

&НаКлиенте
Процедура СчетаУчетаОрганизацияПриИзменении(Элемент)
	
	ОбновитьСчетаУчета();
	
КонецПроцедуры

&НаКлиенте
Процедура СчетаУчетаСкладПриИзменении(Элемент)
	
	ОбновитьСчетаУчета();

КонецПроцедуры

&НаКлиенте
Процедура СчетаУчетаОбновить(Команда)
	
	ОбновитьСчетаУчета();

КонецПроцедуры

&НаКлиенте
Процедура ГруппаСтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	Если ТекущаяСтраница = Элементы.СтраницаСчетаУчета Тогда
		ОбновитьСчетаУчета();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьСчетаУчетаПоФильтру(Команда)
	
	ЗначенияЗаполнения = Новый Структура;
	ЗначенияЗаполнения.Вставить("Организация", СчетаУчетаОрганизация);
	ЗначенияЗаполнения.Вставить("Склад", СчетаУчетаСклад);
	ЗначенияЗаполнения.Вставить("Номенклатура", Объект.Ссылка);
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
	
	ОткрытьФорму("РегистрСведений.ИНАГРО_СчетаУчетаБиологическихАктивов.ФормаЗаписи", ПараметрыОткрытия, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьСчетаУчетаДляИспользуемых(Команда)
	
	Если ЕстьЗаписьСчетаУчетаНоменклатуры(СчетаУчета) Тогда
		
		СтруктураКлючаЗаписи = Новый Структура;
		СтруктураКлючаЗаписи.Вставить("Организация", СчетаУчета.Организация);
		СтруктураКлючаЗаписи.Вставить("Склад", СчетаУчета.Склад);
		СтруктураКлючаЗаписи.Вставить("ТипСклада", СчетаУчета.ТипСклада);
		СтруктураКлючаЗаписи.Вставить("Номенклатура", СчетаУчета.Номенклатура);
		
		КлючЗаписи = ПолучитьКлючЗаписиСчетаУчетаНоменклатуры(СтруктураКлючаЗаписи);
		ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить("Ключ", КлючЗаписи);
		
		ОткрытьФорму("РегистрСведений.ИНАГРО_СчетаУчетаБиологическихАктивов.ФормаЗаписи", ПараметрыОткрытия, ЭтаФорма);
			
	Иначе
		
		ЗначенияЗаполнения = Новый Структура;
		ЗначенияЗаполнения.Вставить("Организация", СчетаУчета.Организация);
		ЗначенияЗаполнения.Вставить("Склад", СчетаУчета.Склад);
		ЗначенияЗаполнения.Вставить("Номенклатура", СчетаУчета.Номенклатура);
		
		ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
		
		ОткрытьФорму("РегистрСведений.ИНАГРО_СчетаУчетаБиологическихАктивов.ФормаЗаписи", ПараметрыОткрытия, ЭтаФорма);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЕстьЗаписьСчетаУчетаНоменклатуры(СтруктураИзмерений)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", СтруктураИзмерений.Организация);
	Запрос.УстановитьПараметр("Склад", СтруктураИзмерений.Склад);
	Запрос.УстановитьПараметр("ТипСклада", СтруктураИзмерений.ТипСклада);
	Запрос.УстановитьПараметр("Номенклатура", СтруктураИзмерений.Номенклатура);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ИСТИНА КАК Запись
	|ИЗ
	|	РегистрСведений.ИНАГРО_СчетаУчетаБиологическихАктивов КАК СчетаУчетаБиологическихАктивов
	|ГДЕ
	|	СчетаУчетаБиологическихАктивов.Организация = &Организация
	|	И СчетаУчетаБиологическихАктивов.Номенклатура = &Номенклатура
	|	И СчетаУчетаБиологическихАктивов.Склад = &Склад
	|	И СчетаУчетаБиологическихАктивов.ТипСклада = &ТипСклада";
	
	Возврат НЕ Запрос.Выполнить().Пустой();
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьКлючЗаписиСчетаУчетаНоменклатуры(СтруктураКлючаЗаписи)
	
	Возврат РегистрыСведений.ИНАГРО_СчетаУчетаБиологическихАктивов.СоздатьКлючЗаписи(СтруктураКлючаЗаписи);
	
КонецФункции

#КонецОбласти 

#КонецОбласти 

#Область СлужебныеПроцедурыИФункцииБСП

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти
