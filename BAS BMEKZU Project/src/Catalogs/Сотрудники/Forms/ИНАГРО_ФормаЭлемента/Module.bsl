&НаКлиенте
Перем ОткрытыеФормы Экспорт; // Хранит данные об открытых формах владельцев.

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	СотрудникиФормы.СотрудникиПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

	Если ЭтаФорма.СозданиеНового И НЕ ПолучитьФункциональнуюОпцию("ИспользоватьКадровыйУчет") Тогда
		УстановитьКатегориюЕСВПоУмолчанию(ЭтаФорма);
	КонецЕсли;
	
	УстановитьДоступностьЭлементов(ЭтаФорма);
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ЗавершениеРаботы И Модифицированность Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ЗаписатьИЗакрытьНаКлиенте", ЭтотОбъект);
	ОбщегоНазначенияКлиент.ПоказатьПодтверждениеЗакрытияФормы(Оповещение, Отказ, ЗавершениеРаботы, ТекстПредупреждения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	
	СотрудникиКлиент.СотрудникиПриЗакрытии(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)

	СотрудникиКлиент.СотрудникиОбработкаОповещения(ЭтаФорма, ИмяСобытия, Параметр, Источник);

КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	СотрудникиФормы.СотрудникиПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	УстановитьДоступностьЭлементов(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)

	Если Не ПараметрыЗаписи.Свойство("ПроверкаПередЗаписьюВыполнена") Тогда 
		Отказ = Истина;
		ЗаписатьНаКлиенте(Ложь);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)

	СотрудникиФормы.СотрудникиПередЗаписьюНаСервере(ЭтаФорма, Отказ, ТекущийОбъект, ПараметрыЗаписи);

КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)

	СотрудникиФормы.СотрудникиПриЗаписиНаСервере(ЭтаФорма, Отказ, ТекущийОбъект, ПараметрыЗаписи);

КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	СотрудникиФормы.СотрудникиПослеЗаписиНаСервере(ЭтаФорма, ТекущийОбъект, ПараметрыЗаписи);

КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)

	СотрудникиКлиент.СотрудникиПослеЗаписи(ЭтаФорма, ПараметрыЗаписи);

КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)

	СотрудникиФормы.СотрудникиОбработкаПроверкиЗаполненияНаСервере(ЭтаФорма, Отказ, ПроверяемыеРеквизиты);

КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДатаПриемаПриИзменении(Элемент)

	СотрудникиКлиентСервер.УстановитьИнфоНадпись(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ФизлицоДРФОПриИзменении(Элемент)

	СотрудникиКлиент.СотрудникиДРФОПриИзменении(ЭтаФорма, Элемент);

КонецПроцедуры

&НаКлиенте
Процедура ФизическоеЛицоДРФОНадписьНажатие(Элемент, СтандартнаяОбработка)

	СотрудникиКлиент.ПояснениеНажатие(Элемент, СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура ДатаУвольненияПриИзменении(Элемент)

	СотрудникиКлиентСервер.УстановитьИнфоНадпись(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ТекущаяОрганизацияПриИзменении(Элемент)

	ТекущаяОрганизацияПриИзмененииНаСервере();

КонецПроцедуры

&НаКлиенте
Процедура ВАрхивеПриИзменении(Элемент)

	СотрудникиКлиентСервер.УстановитьИнфоНадпись(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ДополнитьПредставлениеПриИзменении(Элемент)

	СотрудникиКлиент.ДополнитьПредставлениеСотрудникаПриИзменении(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура УточнениеНаименованияПриИзменении(Элемент)

	СотрудникиКлиент.СформироватьНаименованиеСотрудника(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ФизлицоПолПриИзменении(Элемент)

	СотрудникиКлиент.ЗаблокироватьФизическоеЛицоПриРедактировании(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ФизлицоДатаРожденияПриИзменении(Элемент)

	СотрудникиКлиент.ЗаблокироватьФизическоеЛицоПриРедактировании(ЭтаФорма);
	СотрудникиКлиентСервер.УстановитьПодсказкуКДатеРождения(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппаДоступаПриИзменении(Элемент)

	СотрудникиКлиент.ЗаблокироватьФизическоеЛицоПриРедактировании(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ФИОПриИзменении(Элемент)

	СотрудникиКлиент.ПриИзмененииФИОСотрудника(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ИНАГРО_ВидЗанятостиПриИзменении(Элемент)
	
	Если Сотрудник.ИНАГРО_ВидЗанятости = ПредопределенноеЗначение("Перечисление.ВидыЗанятости.ВнутреннееСовместительство") Тогда
		ДополнятьПредставление = Истина;
	    Сотрудник.УточнениеНаименования = НСтр("ru='(вн.совм)';uk='(вн.сум)'")
	ИначеЕсли Сотрудник.ИНАГРО_ВидЗанятости = ПредопределенноеЗначение("Перечисление.ВидыЗанятости.Совместительство") Тогда
		ДополнятьПредставление = Истина;
	    Сотрудник.УточнениеНаименования = НСтр("ru='(совм)';uk='(сум)'");
		Сотрудник.ОсновноеНазначение = ПредопределенноеЗначение("Справочник.Сотрудники.ПустаяСсылка");
	ИначеЕсли Сотрудник.ИНАГРО_ВидЗанятости = ПредопределенноеЗначение("Перечисление.ВидыЗанятости.ОсновноеМестоРаботы") Тогда
		ДополнятьПредставление = Истина;
	    Сотрудник.УточнениеНаименования = "";
		Сотрудник.ОсновноеНазначение = ПредопределенноеЗначение("Справочник.Сотрудники.ПустаяСсылка");
	КонецЕсли;
	СотрудникиКлиент.СформироватьНаименованиеСотрудника(ЭтаФорма);
	УстановитьДоступностьЭлементов(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ИНАГРО_ДоговорПодрядаПриИзменении(Элемент)
	
	Если Сотрудник.ИНАГРО_ДоговорПодряда Тогда
		Сотрудник.ИНАГРО_ВидЗанятости = ПредопределенноеЗначение("Перечисление.ВидыЗанятости.ПустаяСсылка");
		Сотрудник.ИНАГРО_ГруппаВзносов = ПредопределенноеЗначение("Справочник.ИНАГРО_ГруппыВзносовВФонды.Договорники");
		ДополнятьПредставление = Истина;
	    Сотрудник.УточнениеНаименования = НСтр("ru='(гпх)';uk='(цпх)'");
	Иначе
		Сотрудник.ИНАГРО_ВидЗанятости = ПредопределенноеЗначение("Перечисление.ВидыЗанятости.ОсновноеМестоРаботы");	 
		Сотрудник.ИНАГРО_ГруппаВзносов = ПредопределенноеЗначение("Справочник.ИНАГРО_ГруппыВзносовВФонды.ОсновнойСостав"); 
		ДополнятьПредставление = Ложь;
	    Сотрудник.УточнениеНаименования = "";
	КонецЕсли;
	СотрудникиКлиент.СформироватьНаименованиеСотрудника(ЭтаФорма);
	УстановитьДоступностьЭлементов(ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиКоманд

&НаКлиенте
Процедура Подключаемый_ОткрытьФормуСотрудника(Команда)

	СотрудникиКлиент.ОткрытьФормуСотрудника(ЭтаФорма, Команда);

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ДругиеМестаРаботы(Команда)

	СотрудникиКлиент.ОткрытьФормуСпискаМестРаботыФизическогоЛица(ФизическоеЛицоСсылка, ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура КомандаЗаписать(Команда)
	
	ЗаписатьНаКлиенте(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ОформитьПриемНаРаботу(Команда)

	ИНАГРО_ЗарплатаКадрыРасширенныйКлиент.ОформитьНаОсновании(ЭтаФорма, СотрудникСсылка, "Документы.ИНАГРО_ПриемНаРаботуВОрганизацию");

КонецПроцедуры

&НаКлиенте
Процедура ОформитьКадровыйПеревод(Команда)

	ИНАГРО_ЗарплатаКадрыРасширенныйКлиент.ОформитьНаОсновании(ЭтаФорма, СотрудникСсылка, "Документы.ИНАГРО_КадровоеПеремещениеОрганизаций");

КонецПроцедуры

&НаКлиенте
Процедура ОформитьУвольнение(Команда)

	ИНАГРО_ЗарплатаКадрыРасширенныйКлиент.ОформитьНаОсновании(ЭтаФорма, СотрудникСсылка, "Документы.ИНАГРО_УвольнениеИзОрганизаций");

КонецПроцедуры

&НаКлиенте
Процедура ОформитьДоговорГПХ(Команда)

	ИНАГРО_ЗарплатаКадрыРасширенныйКлиент.ОформитьНаОсновании(ЭтаФорма, СотрудникСсылка, "Документы.ИНАГРО_ДоговорНаВыполнениеРаботСФизЛицом");

КонецПроцедуры

&НаКлиенте
Процедура СотрудникИзменилФИОНажатие(Элемент)

	СотрудникиКлиент.СотрудникИзменилФИОНажатие(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ФИОФизическихЛицИстория(Команда)

	СотрудникиКлиент.СотрудникиОткрытьФормуРедактированияИстории("ФИОФизическихЛиц", ЭтаФорма);

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ЗаписьЭлемента

&НаКлиенте
Процедура КомандаЗаписатьИЗакрыть(Команда)
	
	ЗаписатьНаКлиенте(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИЗакрытьНаКлиенте(Результат, ДополнительныеПараметры) Экспорт 
	
	ЗаписатьНаКлиенте(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьНаКлиенте(ЗакрытьПослеЗаписи, ОповещениеЗавершения = Неопределено) Экспорт 

	ПараметрыЗаписи = Новый Структура;
	СотрудникиКлиент.СотрудникиПередЗаписью(ЭтаФорма, Ложь, ПараметрыЗаписи, ОповещениеЗавершения, ЗакрытьПослеЗаписи);
	
КонецПроцедуры

#КонецОбласти

&НаСервере
Процедура ПрочитатьДанныеСвязанныеСФизлицом() Экспорт

	СотрудникиФормы.ПрочитатьДанныеСвязанныеССотрудником(ЭтаФорма);

КонецПроцедуры

&НаСервере
Процедура ОбработкаИзмененияДанныхОРабочемМестеНаСервере(ПараметрСотрудник) Экспорт

	СотрудникиФормы.ОбработкаИзмененияДанныхОРабочемМесте(ЭтаФорма, ПараметрСотрудник, "ДругиеРабочиеМеста");

КонецПроцедуры

&НаСервере
Процедура ТекущаяОрганизацияПриИзмененииНаСервере() 

	СотрудникиФормы.ПриИзмененииОрганизации(ЭтаФорма);

КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеФизическогоЛицаНаСервере() Экспорт

	СотрудникиФормы.ОбновитьДанныеФизическогоЛица(ЭтаФорма);

КонецПроцедуры

&НаСервере
Процедура ПрочитатьНаборЗаписейПериодическихСведений(ИмяРегистра, ВедущийОбъект) Экспорт
	
	РедактированиеПериодическихСведений.ПрочитатьНаборЗаписей(ЭтаФорма, ИмяРегистра, ВедущийОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов() Экспорт

	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтаФорма, РеквизитФормыВЗначение("Сотрудник"));
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УстановитьКатегориюЕСВПоУмолчанию(Форма)
	
	Форма.ТекущаяКатегорияЕСВ = КадровыйУчет.КатегорияЕСВПоУмолчанию(Форма.ТекущаяОрганизация);
		
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьЭлементов(Форма)
	
	Элементы = Форма.Элементы;
	Объект   = Форма.Сотрудник;
	Элементы.ИНАГРО_ДоговорПодряда.Доступность = НЕ ЕстьНачисленияПоСотруднику(Объект);
	Элементы.ИНАГРО_ВидЗанятости.ТолькоПросмотр = Объект.ИНАГРО_ДоговорПодряда;
	Элементы.ОсновноеНазначение.Видимость = Объект.ИНАГРО_ВидЗанятости = ПредопределенноеЗначение("Перечисление.ВидыЗанятости.ВнутреннееСовместительство") ИЛИ Объект.ИНАГРО_ДоговорПодряда;
	                                                                                                  
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЕстьНачисленияПоСотруднику(Объект) 
 
	// Проверим по наличию записей в регистре РаботникиОрганизаций
	Запрос = Новый Запрос;
	ТекстЗапроса = 
	    "ВЫБРАТЬ
	 |	ИНАГРО_ПлановыеНачисленияРаботниковОрганизаций.Сотрудник
	 |ИЗ
	 |	РегистрСведений.ИНАГРО_ПлановыеНачисленияРаботниковОрганизаций КАК ИНАГРО_ПлановыеНачисленияРаботниковОрганизаций
	 |ГДЕ
	 |	ИНАГРО_ПлановыеНачисленияРаботниковОрганизаций.Сотрудник = &ПарамСотрудник";
	
	Запрос.УстановитьПараметр("ПарамСотрудник", Объект.Ссылка);
	Запрос.Текст = ТекстЗапроса;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Истина;	
	Иначе
		Возврат Ложь;
	КонецЕсли; 
	
КонецФункции

#КонецОбласти 

#Область СлужебныеПроцедурыИФункцииБСП
// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Сотрудник);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Сотрудник, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Сотрудник);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ПОДСИСТЕМЫ "КОНТАКТНАЯ ИНФОРМАЦИЯ"

&НаКлиенте
Процедура Подключаемый_ПояснениеНажатие(Элемент, СтандартнаяОбработка = Ложь)

	СотрудникиКлиент.ПояснениеНажатие(Элемент, СтандартнаяОбработка);

КонецПроцедуры

#КонецОбласти 




