#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

////////////////////////////////////////////////////////////////////////////////
// Групповое изменение объектов

// Возвращает список реквизитов, которые не нужно редактировать
// с помощью обработки группового изменения объектов
//
Функция РеквизитыНеРедактируемыеВГрупповойОбработке() Экспорт
	
	МассивРеквизитов = Новый Массив();
	Возврат МассивРеквизитов;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Использование нескольких организаций

// Возвращает организацию по умолчанию.
// Если в ИБ есть только одна организация, которая не помечена на удаление и не является предопределенной,
// то будет возвращена ссылка на нее, иначе будет возвращена пустая ссылка.
//
// Возвращаемое значение:
//     СправочникСсылка.Организации - ссылка на организацию
//
Функция ОрганизацияПоУмолчанию(Пользователь = Неопределено) Экспорт
	
	ЗначениеПоУмолчанию = Справочники.Организации.ПустаяСсылка();
	
	Если ИспользуетсяНесколькоОрганизаций() Тогда
		
		// В информационной базе ведется учет по нескольким организациям.
		// По умолчанию берем основную организация пользователя.
		
		ОсновнаяОрганизация = ХранилищеОбщихНастроек.Загрузить("ОсновнаяОрганизация",,, Пользователь);
		
		Если ТипЗнч(ОсновнаяОрганизация) = Тип("СправочникСсылка.Организации") Тогда
			// Проверка наличия ссылки и прав доступа
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("ОсновнаяОрганизация", ОсновнаяОрганизация);
			Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
			|	Организации.Ссылка КАК Организация
			|ИЗ
			|	Справочник.Организации КАК Организации
			|ГДЕ
			|	Организации.Ссылка = &ОсновнаяОрганизация";
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				ЗначениеПоУмолчанию = Выборка.Организация;
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		
		// Ведется учет по единственной организации
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 2
		|	Организации.Ссылка КАК Организация
		|ИЗ
		|	Справочник.Организации КАК Организации";
		
		Результат = Запрос.Выполнить();
		
		Если НЕ Результат.Пустой() Тогда
			
			Выборка = Результат.Выбрать();
			Если Выборка.Количество() = 1 Тогда
				
				Если Выборка.Следующий() Тогда
					ЗначениеПоУмолчанию = Выборка.Организация;
				КонецЕсли;
				
			Иначе
				
				// Значение функциональной опции не соответствует состоянию ИБ
				ЗаписьЖурналаРегистрации(НСтр("ru='Заполнение организации по умолчанию';uk='Заповнення організації по умовчанню'"), УровеньЖурналаРегистрации.Ошибка,
					Метаданные.Константы.ИспользоватьНесколькоОрганизаций,,
					НСтр("ru='Исправлено некорректное значение константы ""Использовать несколько организаций""';uk='Виправлене некоректне значення константи ""Використовувати кілька організацій""'"));
				
				УстановитьПривилегированныйРежим(Истина);
				Константы.ИспользоватьНесколькоОрганизаций.Установить(Истина);
				УстановитьПривилегированныйРежим(Ложь);
				
			КонецЕсли;
			
		ИначеЕсли ПолучитьФункциональнуюОпцию("ОграничиватьДоступНаУровнеЗаписей") И КоличествоОрганизаций() > 0 Тогда
			
			// Пользователю недоступна единственная организация.
			ВызватьИсключение НСтр("ru='Доступ к данным по организации ограничен. Обратитесь к администратору.';uk='Доступ до даних по організації обмежений. Зверніться до адміністратора.'");
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ЗначениеПоУмолчанию;
	
КонецФункции

// Возвращает количество элементов справочника Организации.
// Не учитывает предопределенные и помеченные на удаление элементы.
//
// Возвращаемое значение:
//     Число - количество организаций
//
Функция КоличествоОрганизаций() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Количество = 0;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КОЛИЧЕСТВО(*) КАК Количество
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	НЕ Организации.Предопределенный";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Количество = Выборка.Количество;
	КонецЕсли;
	
	Возврат Количество;
	
КонецФункции

// Проверяет наличие хотя бы одной организации при ведении однофирменного учета.
//
Процедура ПроверитьНаличиеОрганизацииПриОднофирменномУчете(Организация) Экспорт
	
	Если ИспользуетсяНесколькоОрганизаций() Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		
		ТекстСообщения = НСтр("ru='Заполните реквизиты организации';uk='Заповніть реквізити організації'") + Символы.ПС;
		
		ПутьКРазделу = НСтр("ru='(раздел Главное - Организации)';uk='(розділ Головне - Організації)'");
		
		ТекстСообщения = ТекстСообщения + ПутьКРазделу;
		
		ВызватьИсключение ТекстСообщения;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ИспользуетсяНесколькоОрганизаций() Экспорт
	
	Возврат ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоОрганизацийБухгалтерскийУчет");
	
КонецФункции

Процедура ДополнитьДанныеЗаполненияПриОднофирменномУчете(ДанныеЗаполнения, ИмяРеквизитаОрганизация = "Организация") Экспорт
	
	Если ИспользуетсяНесколькоОрганизаций() Тогда
		Возврат;
	КонецЕсли;
	
	Если ДанныеЗаполнения = Неопределено Тогда
		ДанныеЗаполнения = Новый Структура;
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ДанныеЗаполнения.Свойство(ИмяРеквизитаОрганизация) Тогда
		ОрганизацияПоУмолчанию = ОрганизацияПоУмолчанию();
		ПроверитьНаличиеОрганизацииПриОднофирменномУчете(ОрганизацияПоУмолчанию);
		ДанныеЗаполнения.Вставить(ИмяРеквизитаОрганизация, ОрганизацияПоУмолчанию);
	КонецЕсли;
	
КонецПроцедуры

// Возвращает двоичные данные картинки присоединенного файла к организации
//
// Параметры:
//  Организация - Ссылка на организацию, к которой присоединена картинка
//  ИмяРеквизита - Имя реквизита, который ссылается на нужную картинку
Функция ДвоичныеДанныеКартинкиОрганизации(Организация, ИмяРеквизита) Экспорт
	
	ДвоичныеДанныеКартинки = Неопределено;
	
	Если ЗначениеЗаполнено(Организация) Тогда
		
		ПрисоединенныйФайл = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, ИмяРеквизита);
		Если ЗначениеЗаполнено(ПрисоединенныйФайл) Тогда
			ДанныеКартинки = РаботаСФайлами.ДанныеФайла(ПрисоединенныйФайл);
			ДвоичныеДанныеКартинки = ПолучитьИзВременногоХранилища(ДанныеКартинки.СсылкаНаДвоичныеДанныеФайла);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ДвоичныеДанныеКартинки;
	
КонецФункции

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
	
	Ограничение.Текст =
	"ПрисоединитьДополнительныеТаблицы
	|ЭтотСписок КАК ЭтотСписок
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации КАК ОбособленныеПодразделения 
	|	ПО ОбособленныеПодразделения.ГоловнаяОрганизация = ЭтотСписок.ГоловнаяОрганизация
	|;
	|РазрешитьЧтение
	|ГДЕ
	|	ЗначениеРазрешено(ОбособленныеПодразделения.Ссылка)
	|
	|;
	|РазрешитьИзменениеЕслиРазрешеноЧтение
	|ГДЕ
	| ЗначениеРазрешено(ЭтотСписок.Ссылка)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти
		
#Область ПроцедурыИФункцииПечати

// Процедура формирования макета печати
//
Функция СформироватьПомощникРаботыФаксимильнойПечати(Организация, ОбъектыПечати, ИмяМакета)
	
	ТабличныйДокумент	= Новый ТабличныйДокумент;
	Макет				= УправлениеПечатью.МакетПечатнойФормы("Справочник.Организации." + ИмяМакета);
	
	ТабличныйДокумент.Вывести(Макет.ПолучитьОбласть("Подписи"));

	Если Локализация.КодЯзыкаИнтерфейса() = "uk" Тогда
		ТабличныйДокумент.Вывести(Макет.ПолучитьОбласть("СхемаУкр"));	
	Иначе
		ТабличныйДокумент.Вывести(Макет.ПолучитьОбласть("Схема"));
	КонецЕсли; 
	
	УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, 1, ОбъектыПечати, Организация);
	
	ТабличныйДокумент.АвтоМасштаб = Истина;
	
	Возврат ТабличныйДокумент;

КонецФункции // СформироватьПомощникРаботыФаксимильнойПечати()

// Сформировать печатные формы объектов
//
// ВХОДЯЩИЕ:
//   ИменаМакетов    - Строка    - Имена макетов, перечисленные через запятую
//   МассивОбъектов  - Массив    - Массив ссылок на объекты которые нужно распечатать
//   ПараметрыПечати - Структура - Структура дополнительных параметров печати
//
// ИСХОДЯЩИЕ:
//   КоллекцияПечатныхФорм - Таблица значений - Сформированные табличные документы
//   ПараметрыВывода       - Структура        - Параметры сформированных табличных документов
//
Процедура Печать(МассивОбъектов,
				 ПараметрыПечати,
				 КоллекцияПечатныхФорм,
				 ОбъектыПечати,
				 ПараметрыВывода) Экспорт
	
	ПараметрыВывода.ДоступнаПечатьПоКомплектно = Истина;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "НапечататьПомощникРаботыФаксимильнойПечати") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм, 
			"НапечататьПомощникРаботыФаксимильнойПечати", 
			НСтр("ru='Как быстро и просто создать факсимильную подпись и печать?';uk='Як швидко і просто створити факсимільний підпис та печатку?'"), 
			СформироватьПомощникРаботыФаксимильнойПечати(МассивОбъектов, ОбъектыПечати, "ПомощникРаботыФаксимильнойПечати")
		);
		
	КонецЕсли;
	
КонецПроцедуры //Печать()

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиОбновления

Процедура ПерезаполнитьКонстантуИспользоватьНесколькоОрганизаций() Экспорт
	
	Если ПланыОбмена.ГлавныйУзел() <> Неопределено Тогда // В подчиненных узлах РИБ не выполняется
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Константы.ИспользоватьНесколькоОрганизаций.Установить(КоличествоОрганизаций() > 1);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Вызывается при переходе на версию БСП 2.2.1.12
//
Процедура ЗаполнитьКонстантуИспользоватьНесколькоОрганизаций() Экспорт
	
	
КонецПроцедуры

Процедура ПеренестиФайлыОрганизацииВПрисоединенныеФайлы() Экспорт
	
	Запрос = Новый Запрос();
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Файлы.ВладелецФайла КАК ВладелецФайла
	|ИЗ
	|	Справочник.Файлы КАК Файлы
	|ГДЕ
	|	Файлы.ВладелецФайла ССЫЛКА Справочник.Организации
	|	И Файлы.ПометкаУдаления = ЛОЖЬ";
	
	ВыборкаОрганизации = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаОрганизации.Следующий() Цикл
		НачатьТранзакцию();
		
		СконвертированныеФайлы = РаботаСФайлами.СконвертироватьФайлыВПрисоединенные(ВыборкаОрганизации.ВладелецФайла);
		
		НеобходимоЗаписыватьОрганизацию = Ложь;
		
		ОрганизацияОбъект = ВыборкаОрганизации.ВладелецФайла.ПолучитьОбъект();
		
		Если СконвертированныеФайлы <> Неопределено Тогда
			
			Если ЗначениеЗаполнено(ОрганизацияОбъект.УдалитьФайлЛоготип)
				И СконвертированныеФайлы.Получить(ОрганизацияОбъект.УдалитьФайлЛоготип) <> Неопределено Тогда
				ОрганизацияОбъект.ФайлЛоготип = СконвертированныеФайлы.Получить(ОрганизацияОбъект.УдалитьФайлЛоготип);
				ОрганизацияОбъект.УдалитьФайлЛоготип = Неопределено;
				НеобходимоЗаписыватьОрганизацию = Истина;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ОрганизацияОбъект.УдалитьФайлФаксимильнаяПечать)
				И СконвертированныеФайлы.Получить(ОрганизацияОбъект.УдалитьФайлФаксимильнаяПечать) <> Неопределено Тогда
				ОрганизацияОбъект.ФайлФаксимильнаяПечать = СконвертированныеФайлы.Получить(ОрганизацияОбъект.УдалитьФайлФаксимильнаяПечать);
				ОрганизацияОбъект.УдалитьФайлФаксимильнаяПечать = Неопределено;
				НеобходимоЗаписыватьОрганизацию = Истина;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ОрганизацияОбъект.УдалитьФайлФаксимильнаяПодпись)
				И СконвертированныеФайлы.Получить(ОрганизацияОбъект.УдалитьФайлФаксимильнаяПодпись) <> Неопределено Тогда
				ОрганизацияОбъект.ФайлФаксимильнаяПодпись = СконвертированныеФайлы.Получить(ОрганизацияОбъект.УдалитьФайлФаксимильнаяПодпись);
				ОрганизацияОбъект.УдалитьФайлФаксимильнаяПодпись = Неопределено;
				НеобходимоЗаписыватьОрганизацию = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
		Если НеобходимоЗаписыватьОрганизацию Тогда
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ОрганизацияОбъект, Истина);
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли

