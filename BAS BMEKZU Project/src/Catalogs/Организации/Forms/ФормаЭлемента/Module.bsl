&НаКлиенте
// Имя картинки, которую пользователь выбирает. Например "Логотип", "ФаксимильнаяПодпись" или "ФаксимильнаяПечать".
Перем ВыбираемаяКартинка;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.КонтактнаяИнформация
	УправлениеКонтактнойИнформацией.ПриЧтенииНаСервере(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЭтоПолноправныйПользователь = Пользователи.ЭтоПолноправныйПользователь();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	
	// Обработчик подсистемы "ВерсионированиеОбъектов"
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);

	// Установка списка выбора головных организаций
	Элементы.ГоловнаяОрганизация.СписокВыбора.ЗагрузитьЗначения(ПолучитьСписокГоловныхОрганизацийОбособленногоПодразделения().ВыгрузитьЗначения());
	
	// Исключим редактируемую организацию из списка головных
	Если Параметры.Ключ.Пустая() Тогда
		ЭлементТекущаяОрганизация	= Элементы.ГоловнаяОрганизация.СписокВыбора.НайтиПоЗначению(Объект.Ссылка);
		Если ЭлементТекущаяОрганизация <> Неопределено Тогда
			Элементы.ГоловнаяОрганизация.СписокВыбора.Удалить(ЭлементТекущаяОрганизация);
		КонецЕсли;
	КонецЕсли;
	
	
	ЭтоЮрЛицо	= Объект.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо;
	ЭтоФизЛицо	= Объект.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо;
	ЭтоОбособленноеПодразделение	= Объект.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо
		И Объект.ОбособленноеПодразделение;

	ПрочитатьКодыОрганизации();
	
	ПараметрыУчета = ОбщегоНазначенияБПВызовСервера.ОпределитьПараметрыУчета();
	
	ИспользоватьРазделениеПоОбластямДанных = ПолучитьФункциональнуюОпцию("РаботаВМоделиСервиса");
	
	
	ФИОФизическогоЛица	= ПолучитьФИОФизическогоЛица(Объект.ИндивидуальныйПредприниматель);
	
	ФИОИндивидуальногоПредпринимателя	= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("%1 %2 %3",
		ФИОФизическогоЛица.Фамилия, ФИОФизическогоЛица.Имя, ФИОФизическогоЛица.Отчество);
		
	Наименование	= Объект.Наименование;
	НаименованиеПолное		= Объект.НаименованиеПолное;
		
	УчетЗарплатыИКадровВоВнешнейПрограмме	= Константы.УчетЗарплатыИКадровВоВнешнейПрограмме.Получить();
	
	Если ЭтоОбособленноеПодразделение Тогда
		ВидОрганизации = "ОбособленноеПодразделение";
	ИначеЕсли ЭтоФизЛицо Тогда
		ВидОрганизации = "ИндивидуальныйПредприниматель";
	Иначе
		ВидОрганизации = "ЮридическоеЛицо";
	КонецЕсли;
	
	УстановитьЗаголовкиПоВидуОрганизации(ЭтаФорма);
	
	СоздатьБанковскийСчет = НСтр("ru='Создать';uk='Створити'");
	
	КоличествоБанковскихСчетов = Справочники.БанковскиеСчета.ПолучитьКоличествоПодчиненныхЭлементовПоВладельцу(Объект.Ссылка);
	Элементы.ГруппаОсновнойБанковскийСчет.ТекущаяСтраница = ?(КоличествоБанковскихСчетов = 0,
		Элементы.ГруппаСоздатьБанковскийСчет,
		Элементы.ГруппаБанковскийСчет);
		
	ОбновитьИнформациюОбОтветственныхЛицах();
	
	
	РазместитьКонтактнуюИнформацию();
	
	// Обработчик подсистемы "Свойства"
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Объект", Объект);
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	
	// Установка доступности ссылок в зависимости от доступности данных формы для изменения
	Элементы.СоздатьБанковскийСчет.Доступность = НЕ ТолькоПросмотр;
	Элементы.ВсеОтветственныеЛица.Доступность = НЕ ТолькоПросмотр;
	Элементы.Руководитель.Доступность = НЕ ТолькоПросмотр;
	Элементы.ГлавныйБухгалтер.Доступность = НЕ ТолькоПросмотр;
	Элементы.Кассир.Доступность = НЕ ТолькоПросмотр;
	
	МожноРедактироватьФайлы = ПравоДоступа("Редактирование", Метаданные.Справочники.ОрганизацииПрисоединенныеФайлы);
	
	МассивИменКартинок = Новый Массив;
	МассивИменКартинок.Добавить("Логотип");
	МассивИменКартинок.Добавить("ФаксимильнаяПечать");
	МассивИменКартинок.Добавить("ФаксимильнаяПодпись");
	
	МассивИменЭлементов = Новый Массив;
	МассивИменЭлементов.Добавить("ЗагрузитьОчистить");
	МассивИменЭлементов.Добавить("ЗагрузитьКартинку");
	МассивИменЭлементов.Добавить("ВыбратьИзПрисоединенныхФайлов");
	МассивИменЭлементов.Добавить("Очистить");
	
	Для Каждого ИмяКартинки Из МассивИменКартинок Цикл
		ИмяФайла          = "Файл" + ИмяКартинки;
		ИмяАдресаКартинки = "Адрес" + ИмяКартинки;
		
		ТекущийФайл = Объект[ИмяФайла];
		Если НЕ ТекущийФайл.Пустая() Тогда
			Попытка
				ЭтотОбъект[ИмяАдресаКартинки] = РаботаСФайлами.ДанныеФайла(ТекущийФайл, УникальныйИдентификатор).СсылкаНаДвоичныеДанныеФайла;
			Исключение
				ИнформацияОбОшибке = ИнформацияОбОшибке();
				ЗаписьЖурналаРегистрации(НСтр("ru='Организация';uk='Організація'"), УровеньЖурналаРегистрации.Ошибка,
					Метаданные.Справочники.Организации, Объект.Ссылка,
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Ошибка получения картинки для ""%1"". Подробности в журнале регистрации.';uk='Помилка отримання картинки для ""%1"". Подробиці в журналі реєстрації.'"),
						ЗаголовокРеквизитаКартинки(ИмяАдресаКартинки)),
					Объект.Ссылка);
				Элементы[ИмяАдресаКартинки].ТекстНевыбраннойКартинки = НСтр("ru='Ошибка получения файла';uk='Помилка отримання файлу'");
			КонецПопытки;
		Конецесли;
		Для Каждого ИмяЭлемента Из МассивИменЭлементов Цикл
			Элементы[ИмяЭлемента + ИмяКартинки].Доступность = МожноРедактироватьФайлы;
		КонецЦикла;
	КонецЦикла;
	
	Элементы.ФормаРегистрацияОрганизации.Видимость = НЕ Параметры.Ключ.Пустая() И НачалоРаботы.ДоступностьРегистрацииВОрганизации();
	
	УправлениеФормой(ЭтаФорма);

	ЗаполнитьОписанияПараметров();
	УправлениеФормойЗиК();	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если Параметры.Ключ.Пустая() Тогда
		
		
	КонецЕсли;
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// Подсистема "Свойства"
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтаФорма, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	
	Если Источник = ЭтаФорма Тогда
		Возврат;
	КонецЕсли;
	
	Если ИмяСобытия = "ИзмененБанковскийСчет" Тогда
		
		Если Параметр.Владелец = Объект.Ссылка Тогда
			
			Если НЕ ТолькоПросмотр Тогда
			
				Если НЕ ЗначениеЗаполнено(Объект.ОсновнойБанковскийСчет) Тогда
					
					Объект.ОсновнойБанковскийСчет = Параметр.Ссылка;
					Элементы.ГруппаОсновнойБанковскийСчет.ТекущаяСтраница = Элементы.ГруппаБанковскийСчет;
					Модифицированность = Истина;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "ИзменениеДанныхФизическогоЛица" Тогда
		
		Если НЕ ТолькоПросмотр
			И Объект.ИндивидуальныйПредприниматель = Источник
			И Параметр.Свойство("КодПоДРФО") Тогда
		
			Если Объект.КодПоЕДРПОУ <> Параметр.КодПоДРФО Тогда
				
				Объект.КодПоЕДРПОУ	= Параметр.КодПоДРФО;
				
				Модифицированность	= Истина;
				
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "ИзменениеОтветственныхЛиц" Тогда
		
		ОбновитьИнформациюОбответственныхЛицах();
	
	ИначеЕсли ИмяСобытия = "Запись_Файл" Тогда
		
		Если ТипЗнч(Параметр) = Тип("Структура")
			И Параметр.Свойство("ВладелецФайла")
			И Параметр.ВладелецФайла = Объект.Ссылка
			И ЗначениеЗаполнено(ВыбираемаяКартинка) Тогда
			
			Модифицированность = Истина;
			
			ФайлКартинки = ?(ТипЗнч(Источник) = Тип("Массив"), Источник[0], Источник);
			УстановитьКартинкуВЭлементе(ФайлКартинки, ВыбираемаяКартинка);
			
			ВыбираемаяКартинка = Неопределено;
			
		КонецЕсли;
	
	КонецЕсли;
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	ИмяОбработкиВводаКонтактнойИнформации = "Обработка.ВводКонтактнойИнформации";
	
	Если ТипЗнч(ИсточникВыбора) = Тип("УправляемаяФорма")
		И Лев(ИсточникВыбора.ИмяФормы, СтрДлина(ИмяОбработкиВводаКонтактнойИнформации)) = ИмяОбработкиВводаКонтактнойИнформации Тогда
		
		Возврат;
		
	ИначеЕсли ВРег(ИсточникВыбора.ИмяФормы) = ВРег("ОбщаяФорма.РедактированиеИсторииКонтактнойИнформации") Тогда
		
		УправлениеКонтактнойИнформациейКлиентБП.УстановитьАдресПослеРедактированияИстории(
			ЭтотОбъект,
			ВыбранноеЗначение.ИсторияИзмененийАдреса,
			Элементы.КонтактнаяИнформацияПолеЮрАдресОрганизации);
		
		ПриИзмененииЮрАдресаОрганизации(ЭтотОбъект);
		
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		
		Модифицированность	= Истина;
		
		ЗаполнитьЗначенияСвойств(ЭтаФорма, ВыбранноеЗначение);
		ЗаполнитьЗначенияСвойств(Объект, ВыбранноеЗначение);	
			
	КонецЕсли;
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.КонтактнаяИнформация
    УправлениеКонтактнойИнформацией.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект, Отказ);
    // Конец СтандартныеПодсистемы.КонтактнаяИнформация 
	
	// Обработчик подсистемы "Свойства"
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтаФорма, ТекущийОбъект);
	
	ПараметрыЗаписи.Вставить("ОсновнаяОрганизацияПередЗаписью", БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация"));
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	

	ЗаписатьКодыОрганизации();
	
	ЗаписатьДанныеФизическогоЛица(ТекущийОбъект, Отказ);
	

КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ПараметрыЗаписи.Вставить("ОсновнаяОрганизацияПослеЗаписи", БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация"));

КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Оповестить("Запись_Организации", , Объект.Ссылка);
	
	Если НЕ ПараметрыЗаписи.Свойство("ОсновнаяОрганизацияПередЗаписью")	И НЕ ПараметрыЗаписи.Свойство("ОсновнаяОрганизацияПослеЗаписи") Тогда
		Возврат;
	КонецЕсли;
		
	Если ПараметрыЗаписи.ОсновнаяОрганизацияПередЗаписью <> ПараметрыЗаписи.ОсновнаяОрганизацияПослеЗаписи Тогда
		ПоказатьОповещениеПользователя(НСтр("ru='Установлена основная организация:';uk='Установлена основна організація:'"),
			ПолучитьНавигационнуюСсылку(ПараметрыЗаписи.ОсновнаяОрганизацияПослеЗаписи), 
			ПараметрыЗаписи.ОсновнаяОрганизацияПослеЗаписи);
		Оповестить("ИзменениеОсновнойОрганизации", ПолучитьОрганизациюПоУмолчанию());
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)

	ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени("СохранениеИзмененийВОрганизации");
	
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтаФорма, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.КонтактнаяИнформация
	УправлениеКонтактнойИнформацией.ОбработкаПроверкиЗаполненияНаСервере(ЭтаФорма, Объект, Отказ);
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы
 
&НаКлиенте
Процедура ВидОрганизацииПриИзменении(Элемент)
	
	ЮридическоеФизическоеЛицоДо = Объект.ЮридическоеФизическоеЛицо;
	Если ВидОрганизации = "ЮридическоеЛицо" Тогда
		Объект.ЮридическоеФизическоеЛицо = ПредопределенноеЗначение("Перечисление.ЮридическоеФизическоеЛицо.ЮридическоеЛицо");
		Объект.ОбособленноеПодразделение = Ложь;
		Если Объект.ГоловнаяОрганизация <> Объект.Ссылка Тогда
			Объект.ГоловнаяОрганизация	= Объект.Ссылка;
		КонецЕсли;
	ИначеЕсли ВидОрганизации = "ОбособленноеПодразделение" Тогда
		Объект.ЮридическоеФизическоеЛицо =  ПредопределенноеЗначение("Перечисление.ЮридическоеФизическоеЛицо.ЮридическоеЛицо");
		Объект.ОбособленноеПодразделение = Истина;
		Если Объект.ГоловнаяОрганизация = Объект.Ссылка Тогда
			Объект.ГоловнаяОрганизация	= Неопределено;
		КонецЕсли;
	ИначеЕсли ВидОрганизации = "ИндивидуальныйПредприниматель" Тогда
		Объект.ЮридическоеФизическоеЛицо = ПредопределенноеЗначение("Перечисление.ЮридическоеФизическоеЛицо.ФизическоеЛицо");
		Объект.ОбособленноеПодразделение = Ложь;
		Если Объект.ГоловнаяОрганизация <> Объект.Ссылка Тогда
			Объект.ГоловнаяОрганизация	= Объект.Ссылка;
		КонецЕсли;
	КонецЕсли;
	Если Объект.ЮридическоеФизическоеЛицо <> ЮридическоеФизическоеЛицоДо Тогда
		Модифицированность = Истина;
	КонецЕсли;
	
	УстановитьЗаголовкиПоВидуОрганизации(ЭтаФорма);
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ИндивидуальныйПредпринимательПриИзменении(Элемент)
	
	ОбновитьДанныеИндивидуальногоПредпринимателя();
	Объект.НаименованиеПолное	= "";	// Полное наименование сгенерируем новое
	НаименованиеПриИзменении(Элементы.Наименование);
	
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура НаименованиеПриИзменении(Элемент)
	
	СтруктураНаименования	= РазложитьСтрокуНаименования(Объект.Наименование);
	
	Если ПустаяСтрока(Объект.НаименованиеПолное) Тогда
		Объект.НаименованиеПолное	= СформироватьНаименованиеПолное(СтруктураНаименования);
	Иначе
		
		АвтоНаименованиеПрежнее	= СформироватьНаименованиеПолное(РазложитьСтрокуНаименования(Наименование));
		
		Если СокрЛП(Объект.НаименованиеПолное) = СокрЛП(АвтоНаименованиеПрежнее) Тогда
			Объект.НаименованиеПолное	= СформироватьНаименованиеПолное(СтруктураНаименования);
		КонецЕсли;
		
	КонецЕсли;
	
	
	Наименование	= Объект.Наименование;
	НаименованиеПолное		= Объект.НаименованиеПолное;
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеПолноеПриИзменении(Элемент)
	
	
	НаименованиеПолное	= Объект.НаименованиеПолное;

КонецПроцедуры

&НаКлиенте
Процедура ГоловнаяОрганизацияПриИзменении(Элемент)
	
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры


&НаКлиенте
Процедура СоздатьБанковскийСчетНажатие(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	
	Если Объект.Ссылка.Пустая() И НЕ Записать() Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура("ЗначенияЗаполнения", Новый Структура("Владелец", Объект.Ссылка));

	ОткрытьФорму("Справочник.БанковскиеСчета.ФормаОбъекта", СтруктураПараметров, ЭтаФорма,,,, Новый ОписаниеОповещения("СоздатьБанковскийСчетНажатиеЗавершение", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьБанковскийСчетНажатиеЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура РегистрацияВНалоговомОрганеОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ЮрАдресОрганизацииНажатие(Элемент, СтандартнаяОбработка)
	
	УправлениеКонтактнойИнформациейКлиент.НачалоВыбора(ЭтотОбъект, Элемент, Модифицированность, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ФактАдресОрганизацииНажатие(Элемент, СтандартнаяОбработка)
	
	УправлениеКонтактнойИнформациейКлиент.НачалоВыбора(ЭтотОбъект, Элемент, Модифицированность, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПочтовыйАдресОрганизацииНажатие(Элемент, СтандартнаяОбработка)
	
	УправлениеКонтактнойИнформациейКлиент.НачалоВыбора(ЭтотОбъект, Элемент, Модифицированность, СтандартнаяОбработка); 
	
КонецПроцедуры

&НаКлиенте
Процедура ТелефонОрганизацииНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	УправлениеКонтактнойИнформациейКлиент.НачалоВыбора(ЭтотОбъект, Элемент, Модифицированность, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ТелефонОрганизацииПриИзменении(Элемент)
	
	Подключаемый_КонтактнаяИнформацияПриИзменении(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ФаксОрганизацииНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	УправлениеКонтактнойИнформациейКлиент.НачалоВыбора(ЭтотОбъект, Элемент, Модифицированность, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ФаксОрганизацииПриИзменении(Элемент)
	
	Подключаемый_КонтактнаяИнформацияПриИзменении(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура EmailОрганизацииНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	УправлениеКонтактнойИнформациейКлиент.НачалоВыбора(ЭтотОбъект, Элемент, Модифицированность, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура EmailОрганизацииПриИзменении(Элемент)
	
	Подключаемый_КонтактнаяИнформацияПриИзменении(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ЮрФактАдресаСовпадаютПриИзменении(Элемент)
	
	Если ЮрФактАдресаСовпадают Тогда
		СкопироватьПолеКонтактнойИнформации(ЭтотОбъект, "КонтактнаяИнформацияПолеФактАдресОрганизации", "КонтактнаяИнформацияПолеЮрАдресОрганизации");
	КонецЕсли;
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ЮрПочтовыйАдресаСовпадаютПриИзменении(Элемент)
	
	Если ЮрПочтовыйАдресаСовпадают Тогда
		СкопироватьПолеКонтактнойИнформации(ЭтотОбъект, "КонтактнаяИнформацияПолеПочтовыйАдресОрганизации", "КонтактнаяИнформацияПолеЮрАдресОрганизации");
	КонецЕсли;
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеРуководителяНажатие(Элемент, СтандартнаяОбработка)
	Перем ОтветственноеЛицо;
	
	СтандартнаяОбработка = Ложь;
	
	Если Объект.Ссылка.Пустая() Тогда
		Если НЕ Записать() Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ОтветственноеЛицо	= ПредопределенноеЗначение("Перечисление.ОтветственныеЛицаОрганизаций.Руководитель");
	
	ЗначенияЗаполнения	= Новый Структура("СтруктурнаяЕдиница,ОтветственноеЛицо",
		Объект.Ссылка,
		ОтветственноеЛицо);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Ключ",					РуководительКлючЗаписи);
	ПараметрыФормы.Вставить("ЗначенияЗаполнения",	ЗначенияЗаполнения);
	
	ОткрытьФорму("РегистрСведений.ОтветственныеЛицаОрганизаций.ФормаЗаписи", ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеГлавногоБухгалтераНажатие(Элемент, СтандартнаяОбработка)
	Перем ОтветственноеЛицо;
	
	СтандартнаяОбработка = Ложь;
	
	Если Объект.Ссылка.Пустая() Тогда
		Если НЕ Записать() Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ОтветственноеЛицо	= ПредопределенноеЗначение("Перечисление.ОтветственныеЛицаОрганизаций.ГлавныйБухгалтер");
	
	ЗначенияЗаполнения	= Новый Структура("СтруктурнаяЕдиница,ОтветственноеЛицо",
		Объект.Ссылка,
		ОтветственноеЛицо);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Ключ",					ГлавныйБухгалтерКлючЗаписи);
	ПараметрыФормы.Вставить("ЗначенияЗаполнения",	ЗначенияЗаполнения);
	
	ОткрытьФорму("РегистрСведений.ОтветственныеЛицаОрганизаций.ФормаЗаписи", ПараметрыФормы);

КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеКассираНажатие(Элемент, СтандартнаяОбработка)
	Перем ОтветственноеЛицо;
	
	СтандартнаяОбработка = Ложь;
	
	Если Объект.Ссылка.Пустая() Тогда
		Если НЕ Записать() Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ОтветственноеЛицо	= ПредопределенноеЗначение("Перечисление.ОтветственныеЛицаОрганизаций.Кассир");
	
	ЗначенияЗаполнения	= Новый Структура("СтруктурнаяЕдиница,ОтветственноеЛицо",
		Объект.Ссылка,
		ОтветственноеЛицо);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Ключ",					КассирКлючЗаписи);
	ПараметрыФормы.Вставить("ЗначенияЗаполнения",	ЗначенияЗаполнения);
	
	ОткрытьФорму("РегистрСведений.ОтветственныеЛицаОрганизаций.ФормаЗаписи", ПараметрыФормы);

КонецПроцедуры

&НаКлиенте
Процедура КодыОрганизацийПериодПриИзменении(Элемент)
	
	ТекЗначение = КодыОрганизации.Период;
	ПрочитатьКодыОрганизации();
	КодыОрганизации.Период = ТекЗначение;
	
КонецПроцедуры

&НаКлиенте
Процедура НачалоВыбораИзКлассификаторКОАТУУ()
	
	СтандартнаяОбработка = Ложь;

	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ОбработкаВыбораИзКлассификаторКОАТУУ", ЭтотОбъект);
		
	ОткрытьФорму("Справочник.КлассификаторКОАТУУ.Форма.ФормаВыбора", ,ЭтотОбъект,,,, ОповещениеОЗакрытии);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораИзКлассификаторКОАТУУ(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	СтандартнаяОбработка = Ложь;

	Если ЗначениеЗаполнено(РезультатЗакрытия) Тогда
		СтруктураРеквизитовКОАТУУ = ОбщегоНазначенияБПВызовСервера.ЗначенияРеквизитовОбъекта(
			РезультатЗакрытия, "Наименование,Код,НалоговаяИнспекция");
		ЭтотОбъект.КодыОрганизации.Территория = СтруктураРеквизитовКОАТУУ.Наименование;
    	ЭтотОбъект.КодыОрганизации.КодКОАТУУ = СтруктураРеквизитовКОАТУУ.Код;
		Если НЕ ЗначениеЗаполнено(ЭтотОбъект.КодыОрганизации.НалоговаяИнспекция) Тогда
			ЭтотОбъект.КодыОрганизации.НалоговаяИнспекция = СтруктураРеквизитовКОАТУУ.НалоговаяИнспекция;
		КонецЕсли;
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура КодыОрганизацийКодКОАТУУНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	НачалоВыбораИзКлассификаторКОАТУУ();
	
КонецПроцедуры

&НаКлиенте
Процедура КодыОрганизацийТерриторияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	НачалоВыбораИзКлассификаторКОАТУУ()
	
КонецПроцедуры

&НаКлиенте
Процедура ИсторияЮрАдресаНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	УправлениеКонтактнойИнформациейКлиентБП.ИсторияИзмененийАдресаНажатие(
		ЭтотОбъект,
		ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ЮрАдресОрганизации"));
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьОчиститьЛоготипНажатие(Элемент, СтандартнаяОбработка)
	
	ЗагрузитьОчиститьКартинку("Логотип", СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьОчиститьФаксимильнаяПечатьНажатие(Элемент, СтандартнаяОбработка)
	
	ЗагрузитьОчиститьКартинку("ФаксимильнаяПечать", СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьОчиститьФаксимильнаяПодписьНажатие(Элемент, СтандартнаяОбработка)
	
	ЗагрузитьОчиститьКартинку("ФаксимильнаяПодпись", СтандартнаяОбработка);
	
КонецПроцедуры

&НаСервере
Процедура ПослеИзмененияКонтактнойИнформации(ИмяРеквизита) Экспорт
	
	Если ИмяРеквизита = "КонтактнаяИнформацияПолеЮрАдресОрганизации" Тогда	
	
		ПриИзмененииЮрАдресаОрганизации(ЭтотОбъект);
		УправлениеФормой(ЭтотОбъект);
		
	ИначеЕсли ИмяРеквизита = "КонтактнаяИнформацияПолеФактАдресОрганизации" Тогда
		
		ПриИзмененииФактАдресаОрганизации(ЭтотОбъект);
		УправлениеФормой(ЭтотОбъект);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура АдресЛоготипаНажатие(Элемент, СтандартнаяОбработка)
	ОбработатьНажатиеКартинки(СтандартнаяОбработка, "Логотип");
КонецПроцедуры

&НаКлиенте
Процедура АдресФаксимильнойПодписиНажатие(Элемент, СтандартнаяОбработка)
	ОбработатьНажатиеКартинки(СтандартнаяОбработка, "ФаксимильнаяПодпись");
КонецПроцедуры

&НаКлиенте
Процедура АдресФаксимильнойПечатиНажатие(Элемент, СтандартнаяОбработка)
	ОбработатьНажатиеКартинки(СтандартнаяОбработка, "ФаксимильнаяПечать");
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ВсеБанковскиеСчета(Команда)
	
	Если Объект.Ссылка.Пустая() И НЕ Записать() Тогда
		Возврат;
	КонецЕсли;
	
	Отбор			= Новый Структура("Владелец", Объект.Ссылка);
	ПараметрыФормы	= Новый Структура("Отбор", Отбор);
	ОткрытьФорму("Справочник.БанковскиеСчета.ФормаСписка", ПараметрыФормы, ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ВсеОтветственныеЛица(Команда)
	
	Если Объект.Ссылка.Пустая() И НЕ Записать() Тогда
		Возврат;
	КонецЕсли;
		
	Отбор			= Новый Структура("СтруктурнаяЕдиница", Объект.Ссылка);
	ПараметрыФормы	= Новый Структура("Отбор", Отбор);
	ОткрытьФорму("РегистрСведений.ОтветственныеЛицаОрганизаций.ФормаСписка", ПараметрыФормы);

КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьКартинкуЛоготип(Команда)
	
	ЗагрузитьКартинку("Логотип");
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьИзПрисоединенныхФайловЛоготип(Команда)
	
	ВыбратьКартинкуИзПрисоединенныхФайлов("Логотип");
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьЛоготип(Команда)
	
	ОчиститьКартинку("Логотип");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьКартинкуФаксимильнаяПечать(Команда)
	
	ЗагрузитьКартинку("ФаксимильнаяПечать");
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьИзПрисоединенныхФайловФаксимильнаяПечать(Команда)
	
	ВыбратьКартинкуИзПрисоединенныхФайлов("ФаксимильнаяПечать");
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьФаксимильнаяПечать(Команда)
	
	ОчиститьКартинку("ФаксимильнаяПечать");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьКартинкуФаксимильнаяПодпись(Команда)
	
	ЗагрузитьКартинку("ФаксимильнаяПодпись");
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьИзПрисоединенныхФайловФаксимильнаяПодпись(Команда)
	
	ВыбратьКартинкуИзПрисоединенныхФайлов("ФаксимильнаяПодпись");
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьФаксимильнаяПодпись(Команда)
	
	ОчиститьКартинку("ФаксимильнаяПодпись");
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьЗаголовкиПоВидуОрганизации(Форма)
	
	Объект   = Форма.Объект;
	Элементы = Форма.Элементы;

	Если Форма.ВидОрганизации = "ИндивидуальныйПредприниматель" Тогда
		
		Элементы.НаименованиеПолное.ПодсказкаВвода	 = "Физична особа - підприємець Шевченко Тарас Григорович";
		Элементы.Наименование.ПодсказкаВвода		 = "Шевченко Т.Г. ФОП";
		
		Элементы.КонтактнаяИнформацияПолеЮрАдресОрганизации.Заголовок	     = НСтр("ru='Адрес по прописке';uk='Адреса за пропискою'");
		Элементы.КонтактнаяИнформацияПолеФактАдресОрганизации.Заголовок      = НСтр("ru='Адрес проживания';uk='Адреса проживання'");
		Элементы.ЮрФактАдресаСовпадают.Заголовок     = НСтр("ru='Адрес по прописке совпадает с адресом проживания';uk='Адреса за пропискою збігається з адресою проживання'");
		Элементы.КонтактнаяИнформацияПолеПочтовыйАдресОрганизации.Заголовок  = НСтр("ru='Адрес для информ.';uk='Адреса для інформ.'");
		Элементы.ЮрПочтовыйАдресаСовпадают.Заголовок = НСтр("ru='Адрес для информирования совпадает с адресом по прописке';uk='Адреса для інформування збігається з адресою за пропискою'");
		Элементы.КонтактнаяИнформацияПолеТелефонОрганизации.Заголовок        = НСтр("ru='Телефон домашний';uk='Телефон домашній'");
		
		Элементы.ФактАдресОрганизацииСовпадает.Заголовок = Элементы.КонтактнаяИнформацияПолеФактАдресОрганизации.Заголовок;
		
	Иначе
		
		Элементы.НаименованиеПолное.ПодсказкаВвода	 = "Товариство з обмеженою відповідальністю ""Добро""";
		Элементы.Наименование.ПодсказкаВвода		 = "Добро ТОВ";
		
		Элементы.КонтактнаяИнформацияПолеЮрАдресОрганизации.Заголовок	     = НСтр("ru='Юридический адрес';uk='Юридична адреса'");
		Элементы.КонтактнаяИнформацияПолеФактАдресОрганизации.Заголовок      = НСтр("ru='Фактический адрес';uk='Фактична адреса'");
		Элементы.ЮрФактАдресаСовпадают.Заголовок     = НСтр("ru='Фактический адрес совпадает с юридическим адресом';uk='Фактична адреса співпадає з юридичною адресою'");
		Элементы.КонтактнаяИнформацияПолеПочтовыйАдресОрганизации.Заголовок  = НСтр("ru='Почтовый адрес';uk='Поштова адреса'");
		Элементы.ЮрПочтовыйАдресаСовпадают.Заголовок = НСтр("ru='Почтовый адрес совпадает с юридическим адресом';uk='Поштова адреса збігається з юридичною адресою'");
		Элементы.КонтактнаяИнформацияПолеТелефонОрганизации.Заголовок        = НСтр("ru='Контактный телефон';uk='Контактний телефон'");
		
		Элементы.ФактАдресОрганизацииСовпадает.Заголовок = Элементы.КонтактнаяИнформацияПолеФактАдресОрганизации.Заголовок;
		
	КонецЕсли;
	

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Объект   = Форма.Объект;
	Элементы = Форма.Элементы;
	
	ЭтоЮрЛицо	= Объект.ЮридическоеФизическоеЛицо = ПредопределенноеЗначение("Перечисление.ЮридическоеФизическоеЛицо.ЮридическоеЛицо");
	ЭтоФизЛицо	= Объект.ЮридическоеФизическоеЛицо = ПредопределенноеЗначение("Перечисление.ЮридическоеФизическоеЛицо.ФизическоеЛицо");
	ЭтоОбособленноеПодразделение	= Объект.ЮридическоеФизическоеЛицо = ПредопределенноеЗначение("Перечисление.ЮридическоеФизическоеЛицо.ЮридическоеЛицо")
		И Объект.ОбособленноеПодразделение;

	Элементы.ГруппаГоловнаяОрганизация.Видимость			= ЭтоОбособленноеПодразделение;
	Элементы.ИндивидуальныйПредприниматель.Видимость		= ЭтоФизЛицо;
	Элементы.КодДРФОИндивидуальногоПредпринимателя.Видимость= ЭтоФизЛицо;
	Элементы.ГруппаОсновныеРеквизиты.Видимость = НЕ ЭтоФизЛицо;
	Элементы.КодыОрганизацийНомерСвидетельства.Видимость = ЗначениеЗаполнено(Форма.КодыОрганизации.НомерСвидетельства);
	
	Если ЭтоФизЛицо Тогда
			
		Элементы.КонтактнаяИнформацияПолеЮрАдресОрганизации.Заголовок	     = НСтр("ru='Адрес по прописке';uk='Адреса за пропискою'");
		Элементы.КонтактнаяИнформацияПолеФактАдресОрганизации.Заголовок      = НСтр("ru='Адрес проживания';uk='Адреса проживання'");
		Элементы.ЮрФактАдресаСовпадают.Заголовок     = НСтр("ru='Адрес по прописке совпадает с адресом проживания';uk='Адреса за пропискою збігається з адресою проживання'");
		Элементы.КонтактнаяИнформацияПолеПочтовыйАдресОрганизации.Заголовок  = НСтр("ru='Адрес для информ.:';uk='Адреса для інформ.:'");
		Элементы.ЮрПочтовыйАдресаСовпадают.Заголовок = НСтр("ru='Адрес для информирования совпадает с адресом по прописке';uk='Адреса для інформування збігається з адресою за пропискою'");
		Элементы.КонтактнаяИнформацияПолеТелефонОрганизации.Заголовок        = НСтр("ru='Телефон домашний';uk='Телефон домашній'");
		
		Элементы.ФактАдресОрганизацииСовпадает.Заголовок = Элементы.КонтактнаяИнформацияПолеФактАдресОрганизации.Заголовок;
		
	Иначе
		
		Элементы.КонтактнаяИнформацияПолеЮрАдресОрганизации.Заголовок	     = НСтр("ru='Юридический адрес';uk='Юридична адреса'");
		Элементы.КонтактнаяИнформацияПолеФактАдресОрганизации.Заголовок      = НСтр("ru='Фактический адрес';uk='Фактична адреса'");
		Элементы.ЮрФактАдресаСовпадают.Заголовок     = НСтр("ru='Фактический адрес совпадает с юридическим адресом';uk='Фактична адреса співпадає з юридичною адресою'");
		Элементы.КонтактнаяИнформацияПолеПочтовыйАдресОрганизации.Заголовок  = НСтр("ru='Почтовый адрес:';uk='Поштова адреса:'");
		Элементы.ЮрПочтовыйАдресаСовпадают.Заголовок = НСтр("ru='Почтовый адрес совпадает с юридическим адресом';uk='Поштова адреса збігається з юридичною адресою'");
		Элементы.КонтактнаяИнформацияПолеТелефонОрганизации.Заголовок        = НСтр("ru='Контактный телефон';uk='Контактний телефон'");
		
		Элементы.ФактАдресОрганизацииСовпадает.Заголовок = Элементы.КонтактнаяИнформацияПолеФактАдресОрганизации.Заголовок;

		
	КонецЕсли;
	
	// Закладка Адреса, телефоны
	Элементы.КонтактнаяИнформацияПолеФактАдресОрганизации.Видимость = НЕ Форма.ЮрФактАдресаСовпадают;
	Элементы.ФактАдресОрганизацииСовпадает.Видимость                = Форма.ЮрФактАдресаСовпадают;
	
	Элементы.КонтактнаяИнформацияПолеПочтовыйАдресОрганизации.Видимость = НЕ Форма.ЮрПочтовыйАдресаСовпадают;
	Элементы.ПочтовыйАдресОрганизацииСовпадает.Видимость                = Форма.ЮрПочтовыйАдресаСовпадают;
	
	Если ПустаяСтрока(Форма.КонтактнаяИнформацияПолеФактАдресОрганизации)
		ИЛИ Форма.КонтактнаяИнформацияПолеФактАдресОрганизации = УправлениеКонтактнойИнформациейКлиентСервер.ТекстПустогоАдресаВВидеГиперссылки() Тогда
			Форма.ФактАдресОрганизацииСовпадает = НСтр("ru='<не заполнен>';uk='<не заповнений>'");
	Иначе
		Форма.ФактАдресОрганизацииСовпадает = Форма.КонтактнаяИнформацияПолеФактАдресОрганизации;	
	КонецЕсли;
	
	Если ПустаяСтрока(Форма.КонтактнаяИнформацияПолеПочтовыйАдресОрганизации)
		ИЛИ Форма.КонтактнаяИнформацияПолеПочтовыйАдресОрганизации = УправлениеКонтактнойИнформациейКлиентСервер.ТекстПустогоАдресаВВидеГиперссылки() Тогда
			Форма.ПочтовыйАдресОрганизацииСовпадает = НСтр("ru='<не заполнен>';uk='<не заповнений>'");
	Иначе
		Форма.ПочтовыйАдресОрганизацииСовпадает = Форма.КонтактнаяИнформацияПолеПочтовыйАдресОрганизации;	
	КонецЕсли;
	
	ДоступностьКонтактнойИнформации = НЕ Форма.ТолькоПросмотр;
	
	Форма.Элементы.КонтактнаяИнформацияПолеЮрАдресОрганизации.Доступность = ДоступностьКонтактнойИнформации;
	Форма.Элементы.КонтактнаяИнформацияПолеФактАдресОрганизации.Доступность = ДоступностьКонтактнойИнформации;
	Форма.Элементы.ФактАдресОрганизацииСовпадает.Доступность = ДоступностьКонтактнойИнформации;
	Форма.Элементы.ЮрФактАдресаСовпадают.Доступность = ДоступностьКонтактнойИнформации;
	Форма.Элементы.КонтактнаяИнформацияПолеПочтовыйАдресОрганизации.Доступность = ДоступностьКонтактнойИнформации;
	Форма.Элементы.ПочтовыйАдресОрганизацииСовпадает.Доступность = ДоступностьКонтактнойИнформации;
	Форма.Элементы.ЮрПочтовыйАдресаСовпадают.Доступность = ДоступностьКонтактнойИнформации;
	Форма.Элементы.КонтактнаяИнформацияПолеТелефонОрганизации.Доступность = ДоступностьКонтактнойИнформации;
	Форма.Элементы.КонтактнаяИнформацияПолеФаксОрганизации.Доступность = ДоступностьКонтактнойИнформации;
	Форма.Элементы.КонтактнаяИнформацияПолеEmailОрганизации.Доступность = ДоступностьКонтактнойИнформации;
	Форма.Элементы.КонтактнаяИнформацияПолеДругаяИнформацияОрганизации.Доступность = ДоступностьКонтактнойИнформации;
	
	// Группа Логотип и подпись
	ИменаКартинок = Новый Структура;
	ИменаКартинок.Вставить("Логотип",                   НСтр("ru='логотип';uk='логотип'"));
	ИменаКартинок.Вставить("ФаксимильнаяПечать",        НСтр("ru='факсимильную печать';uk='факсимільна печатка'"));
	ИменаКартинок.Вставить("ФаксимильнаяПодпись",   	НСтр("ru='факсимильную подпись';uk='факсимільний підпис'"));
	Для Каждого КлючИЗначение Из ИменаКартинок Цикл
		ИмяФайла       = "Файл" + КлючИЗначение.Ключ;
		ЭлементФормы   = "ЗагрузитьОчистить" + КлючИЗначение.Ключ;
		ОбъектДействия = КлючИЗначение.Значение;
		Если Объект[ИмяФайла].Пустая() Тогда
			Форма[ЭлементФормы] = СтрШаблон(НСтр("ru='Загрузить %1';uk='Завантажити %1'"), ОбъектДействия); // Например, "Загрузить логотип"
		Иначе
			Форма[ЭлементФормы] = СтрШаблон(НСтр("ru='Очистить %1';uk='Очистити %1'"),  ОбъектДействия); // Например, "Очистить логотип"
		Конецесли;
	КонецЦикла;

КонецПроцедуры

Функция ПолучитьСписокГоловныхОрганизацийОбособленногоПодразделения()

	Запрос = Новый Запрос;
	Запрос.Текст	=
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Организации.Ссылка,
	|	Организации.Наименование КАК Наименование
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	Организации.ГоловнаяОрганизация = Организации.Ссылка
	|	И Организации.ЮридическоеФизическоеЛицо = ЗНАЧЕНИЕ(Перечисление.ЮридическоеФизическоеЛицо.ЮридическоеЛицо)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Наименование";
	
	СписокОрганизаций = Новый СписокЗначений;

	Результат	= Запрос.Выполнить();
	Выборка	= Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		СписокОрганизаций.Добавить(Выборка.Ссылка, Выборка.Наименование);
	КонецЦикла;

	Возврат СписокОрганизаций;

КонецФункции

&НаСервере
Функция ОбновитьДанныеИндивидуальногоПредпринимателя()
	
	Если НЕ ЗначениеЗаполнено(Объект.ИндивидуальныйПредприниматель) Тогда
		Объект.КодПоЕДРПОУ = "";
		Возврат Ложь;
	КонецЕсли;
	
	ФИОФизическогоЛица	= ПолучитьФИОФизическогоЛица(Объект.ИндивидуальныйПредприниматель);
	
	ФИОИндивидуальногоПредпринимателя	= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("%1 %2 %3",
		ФИОФизическогоЛица.Фамилия, ФИОФизическогоЛица.Имя, ФИОФизическогоЛица.Отчество);
		
	Объект.Наименование = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("ФОП %1 %2 %3",
		ФИОФизическогоЛица.Фамилия,
		?(ПустаяСтрока(ФИОФизическогоЛица.Имя), "", Лев(ФИОФизическогоЛица.Имя, 1) + "."),
		?(ПустаяСтрока(ФИОФизическогоЛица.Отчество), "", Лев(ФИОФизическогоЛица.Отчество, 1) + "."));
		
	Объект.КодПоЕДРПОУ	= ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ИндивидуальныйПредприниматель, "КодПоДРФО");
	
	Возврат Истина;

КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьФИОФизическогоЛица(ИндивидуальныйПредприниматель)
	Перем ФИОФизическогоЛица;
	
	ФИОФизическогоЛица	= Новый Структура("Фамилия, Имя, Отчество", Строка(ИндивидуальныйПредприниматель), "", "");
	
	ТаблицаСрезПоследних = РегистрыСведений.ФИОФизическихЛиц.СрезПоследних(, Новый Структура("ФизическоеЛицо", ИндивидуальныйПредприниматель));
	Если ТаблицаСрезПоследних.Количество() > 0 Тогда
		
		СтрокаТаблицы	= ТаблицаСрезПоследних[0];
		Если НЕ ПустаяСтрока(СтрокаТаблицы.Фамилия) Тогда
			ФИОФизическогоЛица.Фамилия	= СокрЛП(СтрокаТаблицы.Фамилия);
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(СтрокаТаблицы.Имя) Тогда
			ФИОФизическогоЛица.Имя	= СокрЛП(СтрокаТаблицы.Имя);
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(СтрокаТаблицы.Отчество) Тогда
			ФИОФизическогоЛица.Отчество	= СокрЛП(СтрокаТаблицы.Отчество);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ФИОФизическогоЛица;
	
КонецФункции

&НаСервере
Процедура РазместитьКонтактнуюИнформацию(ПриСозданииНаСервере = Истина)
	
	ИсторияЮрАдреса = НСтр("ru='История';uk='Історія'");
	
	Если ПриСозданииНаСервере Тогда
		// Добавление непредопределенной контактной информации
		ИсключаемыеВидыКИ	= Новый Массив;
		ИсключаемыеВидыКИ.Добавить(Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации);
		ИсключаемыеВидыКИ.Добавить(Справочники.ВидыКонтактнойИнформации.ФактАдресОрганизации);
		ИсключаемыеВидыКИ.Добавить(Справочники.ВидыКонтактнойИнформации.ПочтовыйАдресОрганизации);
		ИсключаемыеВидыКИ.Добавить(Справочники.ВидыКонтактнойИнформации.ТелефонОрганизации);
		ИсключаемыеВидыКИ.Добавить(Справочники.ВидыКонтактнойИнформации.ФаксОрганизации);
		ИсключаемыеВидыКИ.Добавить(Справочники.ВидыКонтактнойИнформации.EmailОрганизации);
		ИсключаемыеВидыКИ.Добавить(Справочники.ВидыКонтактнойИнформации.ДругаяИнформацияОрганизации);
	КонецЕсли;
		
	ПараметрыРазмещенияКонтактнойИнформации = УправлениеКонтактнойИнформацией.ПараметрыКонтактнойИнформации();
	ПараметрыРазмещенияКонтактнойИнформации.ИмяЭлементаДляРазмещения = "ГруппаКомпоновкиКонтактнойИнформации";
	ПараметрыРазмещенияКонтактнойИнформации.ИсключаемыеВиды = ИсключаемыеВидыКИ;
	
	УправлениеКонтактнойИнформацией.ПриСозданииНаСервере(ЭтотОбъект, Объект, ПараметрыРазмещенияКонтактнойИнформации);
		
	
	ЮрФактАдресаСовпадают		= СокрЛП(КонтактнаяИнформацияПолеЮрАдресОрганизации) = СокрЛП(КонтактнаяИнформацияПолеФактАдресОрганизации);
	ЮрПочтовыйАдресаСовпадают	= СокрЛП(КонтактнаяИнформацияПолеЮрАдресОрганизации) = СокрЛП(КонтактнаяИнформацияПолеПочтовыйАдресОрганизации)
		ИЛИ СокрЛП(?(КонтактнаяИнформацияПолеЮрАдресОрганизации = УправлениеКонтактнойИнформациейКлиентСервер.ТекстПустогоАдресаВВидеГиперссылки(),
		"", КонтактнаяИнформацияПолеЮрАдресОрганизации)) = СокрЛП(КонтактнаяИнформацияПолеПочтовыйАдресОрганизации);

КонецПроцедуры

&НаКлиенте
Функция РазложитьСтрокуНаименования(Знач Наименование)
	
	Результат	= Новый Структура("Наименование,ОрганизационноПравоваяФорма,ОрганизационноПравоваяФормаСокращенно");
	
	Наименование	= СокрЛП(Наименование);
    
 	Если УбратьИзНаименованияОрганизационнуюФорму(Наименование, "ООО") Тогда
		ОрганизационноПравоваяФорма				= "Общество с ограниченной ответственностью";
		ОрганизационноПравоваяФормаСокращенно	= "ООО";
	ИначеЕсли УбратьИзНаименованияОрганизационнуюФорму(Наименование, "ТОВ") Тогда
		ОрганизационноПравоваяФорма				= "Товариство з обмеженою відповідальністю";
		ОрганизационноПравоваяФормаСокращенно	= "ТОВ";
	ИначеЕсли УбратьИзНаименованияОрганизационнуюФорму(Наименование, "ПАО") Тогда
		ОрганизационноПравоваяФорма				= "Публичное акционерное общество";
		ОрганизационноПравоваяФормаСокращенно	= "ПАО";
	ИначеЕсли УбратьИзНаименованияОрганизационнуюФорму(Наименование, "ПАТ") Тогда
		ОрганизационноПравоваяФорма				= "Публічне акціонерне товариство";
		ОрганизационноПравоваяФормаСокращенно	= "ПАТ";
	ИначеЕсли УбратьИзНаименованияОрганизационнуюФорму(Наименование, "ЧАО") Тогда
		ОрганизационноПравоваяФорма				= "Частное акционерное общество";
		ОрганизационноПравоваяФормаСокращенно	= "ЧАО";
	ИначеЕсли УбратьИзНаименованияОрганизационнуюФорму(Наименование, "ПрАТ") Тогда
		ОрганизационноПравоваяФорма				= "Приватне акціонерне товариство";
		ОрганизационноПравоваяФормаСокращенно	= "ПрАТ";
	ИначеЕсли УбратьИзНаименованияОрганизационнуюФорму(Наименование, "ФЛП") Тогда
		ОрганизационноПравоваяФорма				= "Физическое лицо - предприниматель";
		ОрганизационноПравоваяФормаСокращенно	= "ФЛП";
	ИначеЕсли УбратьИзНаименованияОрганизационнуюФорму(Наименование, "ФОП") Тогда
		ОрганизационноПравоваяФорма				= "Фізична особа - підприємець";
		ОрганизационноПравоваяФормаСокращенно	= "ФОП";
	ИначеЕсли УбратьИзНаименованияОрганизационнуюФорму(Наименование, "ЧП") Тогда
		ОрганизационноПравоваяФорма				= "Частное предприятие";
		ОрганизационноПравоваяФормаСокращенно	= "ЧП";
	ИначеЕсли УбратьИзНаименованияОрганизационнуюФорму(Наименование, "ПП") Тогда
		ОрганизационноПравоваяФорма				= "Приватне підприємство";
		ОрганизационноПравоваяФормаСокращенно	= "ПП";
	ИначеЕсли УбратьИзНаименованияОрганизационнуюФорму(Наименование, "ГП") Тогда
		ОрганизационноПравоваяФорма				= "Государственное предприятие";
		ОрганизационноПравоваяФормаСокращенно	= "ГП";
	ИначеЕсли УбратьИзНаименованияОрганизационнуюФорму(Наименование, "ДП") Тогда
		ОрганизационноПравоваяФорма				= "Державне підприємство";
		ОрганизационноПравоваяФормаСокращенно	= "ГП";
	ИначеЕсли УбратьИзНаименованияОрганизационнуюФорму(Наименование, "КП") Тогда
		ОрганизационноПравоваяФорма				= "Комунальне підприємство";
		ОрганизационноПравоваяФормаСокращенно	= "КП";
	ИначеЕсли УбратьИзНаименованияОрганизационнуюФорму(Наименование, "Общество с ограниченной ответственностью") Тогда
		ОрганизационноПравоваяФорма				= "Общество с ограниченной ответственностью";
		ОрганизационноПравоваяФормаСокращенно	= "ООО";
	ИначеЕсли УбратьИзНаименованияОрганизационнуюФорму(Наименование, "Товариство з обмеженою відповідальністю") Тогда
		ОрганизационноПравоваяФорма				= "Товариство з обмеженою відповідальністю";
		ОрганизационноПравоваяФормаСокращенно	= "ТОВ";
	ИначеЕсли УбратьИзНаименованияОрганизационнуюФорму(Наименование, "Публичное акционерное общество") Тогда
		ОрганизационноПравоваяФорма				= "Публичное акционерное общество";
		ОрганизационноПравоваяФормаСокращенно	= "ПАО";
	ИначеЕсли УбратьИзНаименованияОрганизационнуюФорму(Наименование, "Публічне акціонерне товариство") Тогда
		ОрганизационноПравоваяФорма				= "Публічне акціонерне товариство";
		ОрганизационноПравоваяФормаСокращенно	= "ПАТ";
	ИначеЕсли УбратьИзНаименованияОрганизационнуюФорму(Наименование, "Частное акционерное общество") Тогда
		ОрганизационноПравоваяФорма				= "Частное акционерное общество";
		ОрганизационноПравоваяФормаСокращенно	= "ЧАО";
	ИначеЕсли УбратьИзНаименованияОрганизационнуюФорму(Наименование, "Приватне акціонерне товариство") Тогда
		ОрганизационноПравоваяФорма				= "Приватне акціонерне товариство";
		ОрганизационноПравоваяФормаСокращенно	= "ПрАТ";
	ИначеЕсли УбратьИзНаименованияОрганизационнуюФорму(Наименование, "Физическое лицо - предприниматель") Тогда
		ОрганизационноПравоваяФорма				= "Физическое лицо - предприниматель";
		ОрганизационноПравоваяФормаСокращенно	= "ФЛП";
	ИначеЕсли УбратьИзНаименованияОрганизационнуюФорму(Наименование, "Фізична особа - підприємець") Тогда
		ОрганизационноПравоваяФорма				= "Фізична особа - підприємець";
		ОрганизационноПравоваяФормаСокращенно	= "ФОП";
	ИначеЕсли УбратьИзНаименованияОрганизационнуюФорму(Наименование, "Частное предприятие") Тогда
		ОрганизационноПравоваяФорма				= "Частное предприятие";
		ОрганизационноПравоваяФормаСокращенно	= "ЧП";
	ИначеЕсли УбратьИзНаименованияОрганизационнуюФорму(Наименование, "Приватне підприємство") Тогда
		ОрганизационноПравоваяФорма				= "Приватне підприємство";
		ОрганизационноПравоваяФормаСокращенно	= "ПП";
	ИначеЕсли УбратьИзНаименованияОрганизационнуюФорму(Наименование, "Государственное предприятие") Тогда
		ОрганизационноПравоваяФорма				= "Государственное предприятие";
		ОрганизационноПравоваяФормаСокращенно	= "ГП";
	ИначеЕсли УбратьИзНаименованияОрганизационнуюФорму(Наименование, "Державне підприємство") Тогда
		ОрганизационноПравоваяФорма				= "Державне підприємство";
		ОрганизационноПравоваяФормаСокращенно	= "ГП";
	ИначеЕсли УбратьИзНаименованияОрганизационнуюФорму(Наименование, "Комунальне підприємство") Тогда
		ОрганизационноПравоваяФорма				= "Комунальне підприємство";
		ОрганизационноПравоваяФормаСокращенно	= "КП";
	Иначе
		ОрганизационноПравоваяФорма				= "";
		ОрганизационноПравоваяФормаСокращенно	= "";
	КонецЕсли;
	
	Если Объект.ЮридическоеФизическоеЛицо <> ПредопределенноеЗначение("Перечисление.ЮридическоеФизическоеЛицо.ФизическоеЛицо")
	   И НЕ ПустаяСтрока(ОрганизационноПравоваяФорма) Тогда
		КоличествоКавычек	= СтрЧислоВхождений(Наименование, """");
		Если КоличествоКавычек > 1 Тогда
			// Наименование организации внутри внешних кавычек
			ПозицияПервойКавычки	= Найти(Наименование, """");
			ПозицияПоследнейКавычки	= 0;
			
			ВремНаименование	= Наименование;
			
			ПозицияКавычки		= ПозицияПервойКавычки;
			Пока ПозицияКавычки > 0 Цикл
				ПозицияПоследнейКавычки	= ПозицияПоследнейКавычки + ПозицияКавычки;
				ВремНаименование	= Сред(ВремНаименование, ПозицияКавычки + 1);
				ПозицияКавычки		= Найти(ВремНаименование, """");
			КонецЦикла;
			
			Наименование	= Сред(Наименование, ПозицияПервойКавычки + 1, ПозицияПоследнейКавычки - ПозицияПервойКавычки - 1);
			Если НЕ КоличествоКавычек%2 = 0 Тогда
				Наименование	= Наименование + """";
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Результат.Наименование							= СокрЛП(Наименование);
	Результат.ОрганизационноПравоваяФорма			= ОрганизационноПравоваяФорма;
	Результат.ОрганизационноПравоваяФормаСокращенно	= ОрганизационноПравоваяФормаСокращенно;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция УбратьИзНаименованияОрганизационнуюФорму(Наименование, ИмяОрганизационнойФормы)

	Результат	= Ложь;
	
	Наименование	= СокрЛП(Наименование);
	
	ДлинаНаименования			= СтрДлина(Наименование);
	ДлинаОрганизационнойФормы	= СтрДлина(ИмяОрганизационнойФормы);
	
	Если Лев(Наименование, ДлинаОрганизационнойФормы) = ИмяОрганизационнойФормы Тогда
		Наименование	= СокрЛ(Сред(Наименование, ДлинаОрганизационнойФормы + 1));
		Результат		= Истина;
	КонецЕсли;	
	
	Если Прав(Наименование, ДлинаОрганизационнойФормы) = ИмяОрганизационнойФормы Тогда
		Наименование	= СокрП(Лев(Наименование, ДлинаНаименования - ДлинаОрганизационнойФормы - 1));
		Результат		= Истина;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция СформироватьНаименованиеПолное(СтруктураНаименования)
	Перем НаименованиеПолное;
	
	Если Объект.ЮридическоеФизическоеЛицо = ПредопределенноеЗначение("Перечисление.ЮридическоеФизическоеЛицо.ФизическоеЛицо") Тогда
		НаименованиеПолное	= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("%1 %2",
			СтруктураНаименования.ОрганизационноПравоваяФорма, ?(ЗначениеЗаполнено(ФИОИндивидуальногоПредпринимателя),ФИОИндивидуальногоПредпринимателя,СтруктураНаименования.Наименование));
	Иначе
		
		Если НЕ ЗначениеЗаполнено(СтруктураНаименования.ОрганизационноПравоваяФорма) Тогда
			НаименованиеПолное = СтруктураНаименования.Наименование;
		Иначе
			НаименованиеПолное	= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("%1 ""%2""",
				СтруктураНаименования.ОрганизационноПравоваяФорма, СтруктураНаименования.Наименование);
		КонецЕсли;
			
	КонецЕсли;
	
	Возврат	НаименованиеПолное;
	
КонецФункции


&НаСервере
Процедура ОбновитьИнформациюОбОтветственныхЛицах()
	
	Руководитель		= НСтр("ru='Создать';uk='Створити'");
	ГлавныйБухгалтер	= НСтр("ru='Создать';uk='Створити'");
	Кассир				= НСтр("ru='Создать';uk='Створити'");
	
	РуководительКлючЗаписи		= РегистрыСведений.ОтветственныеЛицаОрганизаций.ПустойКлюч();
	ГлавныйБухгалтерКлючЗаписи	= РегистрыСведений.ОтветственныеЛицаОрганизаций.ПустойКлюч();
	КассирКлючЗаписи			= РегистрыСведений.ОтветственныеЛицаОрганизаций.ПустойКлюч();
	
	Если Объект.Ссылка.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	Запрос	= Новый Запрос;
	Запрос.УстановитьПараметр("СтруктурнаяЕдиница",	Объект.Ссылка);
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ОтветственныеЛицаОрганизацийСрезПоследних.Период КАК Период,
	|	ОтветственныеЛицаОрганизацийСрезПоследних.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ОтветственныеЛицаОрганизацийСрезПоследних.ОтветственноеЛицо КАК ОтветственноеЛицо,
	|	ПРЕДСТАВЛЕНИЕ(ОтветственныеЛицаОрганизацийСрезПоследних.ФизическоеЛицо) КАК ФизическоеЛицо,
	|	ПРЕДСТАВЛЕНИЕ(ОтветственныеЛицаОрганизацийСрезПоследних.Должность) КАК Должность,
	|	ВЫБОР
	|		КОГДА ОтветственныеЛицаОрганизацийСрезПоследних.ОтветственноеЛицо = ЗНАЧЕНИЕ(Перечисление.ОтветственныеЛицаОрганизаций.Руководитель)
	|			ТОГДА ""Руководитель""
	|		КОГДА ОтветственныеЛицаОрганизацийСрезПоследних.ОтветственноеЛицо = ЗНАЧЕНИЕ(Перечисление.ОтветственныеЛицаОрганизаций.ГлавныйБухгалтер)
	|			ТОГДА ""ГлавныйБухгалтер""
	|		КОГДА ОтветственныеЛицаОрганизацийСрезПоследних.ОтветственноеЛицо = ЗНАЧЕНИЕ(Перечисление.ОтветственныеЛицаОрганизаций.Кассир)
	|			ТОГДА ""Кассир""
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК ПредставлениеОтветственногоЛица
	|ИЗ
	|	РегистрСведений.ОтветственныеЛицаОрганизаций.СрезПоследних КАК ОтветственныеЛицаОрганизацийСрезПоследних
	|ГДЕ
	|	ОтветственныеЛицаОрганизацийСрезПоследних.СтруктурнаяЕдиница = &СтруктурнаяЕдиница
	|	И (ОтветственныеЛицаОрганизацийСрезПоследних.ОтветственноеЛицо = ЗНАЧЕНИЕ(Перечисление.ОтветственныеЛицаОрганизаций.Руководитель)
	|			ИЛИ ОтветственныеЛицаОрганизацийСрезПоследних.ОтветственноеЛицо = ЗНАЧЕНИЕ(Перечисление.ОтветственныеЛицаОрганизаций.ГлавныйБухгалтер)
	|			ИЛИ ОтветственныеЛицаОрганизацийСрезПоследних.ОтветственноеЛицо = ЗНАЧЕНИЕ(Перечисление.ОтветственныеЛицаОрганизаций.Кассир))";
	
	
	Отбор	= Новый Структура("Период, СтруктурнаяЕдиница, ОтветственноеЛицо");
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если ПустаяСтрока(Выборка.ПредставлениеОтветственногоЛица) Тогда
			Продолжить;
		КонецЕсли;
		
		ЭлементФормы	= ЭтаФорма.Элементы.Найти(Выборка.ПредставлениеОтветственногоЛица);
		Если ЭлементФормы = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ЭтаФорма[Выборка.ПредставлениеОтветственногоЛица]	= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='%1 (%2)';uk='%1 (%2)'"),
			Выборка.ФизическоеЛицо, Выборка.Должность);
		
		ЗаполнитьЗначенияСвойств(Отбор, Выборка);
		ЭтаФорма[Выборка.ПредставлениеОтветственногоЛица + "КлючЗаписи"]	= РегистрыСведений.ОтветственныеЛицаОрганизаций.СоздатьКлючЗаписи(Отбор);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьДанныеФизическогоЛица(ТекущийОбъект, Отказ = Ложь)
	
	Если НЕ ЗначениеЗаполнено(ТекущийОбъект.ИндивидуальныйПредприниматель) Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущийОбъект.КодПоЕДРПОУ)
		И ТекущийОбъект.КодПоЕДРПОУ <> ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ИндивидуальныйПредприниматель, "КодПоДРФО") Тогда
		
		ОбъектФизическоеЛицо	= ТекущийОбъект.ИндивидуальныйПредприниматель.ПолучитьОбъект();
		ОбъектФизическоеЛицо.КодПоДРФО	= ТекущийОбъект.КодПоЕДРПОУ;
		
		Попытка
			ОбъектФизическоеЛицо.Записать();
		Исключение
			
			Отказ	= Истина;
			
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			Если ИнформацияОбОшибке.Причина = Неопределено Тогда
				ОписаниеОшибки = ИнформацияОбОшибке.Описание;
			Иначе
				ОписаниеОшибки = ИнформацияОбОшибке.Причина.Описание;
			КонецЕсли;
			
			ОписаниеОшибки = НСтр("ru='Ошибка при обновлении данных физического лица:';uk='Помилка при оновленні даних фізичної особи:'") + Символы.ПС + ОписаниеОшибки;
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки);
			
		КонецПопытки;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПриИзмененииЮрАдресаОрганизации(Форма)

	Если Форма.ЮрФактАдресаСовпадают ИЛИ ПустаяСтрока(Форма.КонтактнаяИнформацияПолеФактАдресОрганизации) Тогда	
		СкопироватьПолеКонтактнойИнформации(Форма, "КонтактнаяИнформацияПолеФактАдресОрганизации", "КонтактнаяИнформацияПолеЮрАдресОрганизации");
	КонецЕсли;
	
	Если Форма.ЮрПочтовыйАдресаСовпадают ИЛИ ПустаяСтрока(Форма.КонтактнаяИнформацияПолеПочтовыйАдресОрганизации) Тогда	
		СкопироватьПолеКонтактнойИнформации(Форма, "КонтактнаяИнформацияПолеПочтовыйАдресОрганизации", "КонтактнаяИнформацияПолеЮрАдресОрганизации");
	КонецЕсли;
	
	УправлениеФормой(Форма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста 
Процедура ПриИзмененииФактАдресаОрганизации(Форма)

	Форма.ЮрФактАдресаСовпадают = СокрЛП(Форма.КонтактнаяИнформацияПолеЮрАдресОрганизации) = СокрЛП(Форма.КонтактнаяИнформацияПолеФактАдресОрганизации);
	Форма.ЮрПочтовыйАдресаСовпадают = СокрЛП(Форма.КонтактнаяИнформацияПолеЮрАдресОрганизации) = СокрЛП(Форма.КонтактнаяИнформацияПолеПочтовыйАдресОрганизации);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СкопироватьПолеКонтактнойИнформации(Форма, ИмяПриемника, ИмяИсточника)
	
	Форма.Модифицированность = Истина;
	Форма[ИмяПриемника] = Форма[ИмяИсточника];
	
	ИмяОписания	= "КонтактнаяИнформацияОписаниеДополнительныхРеквизитов";
	
	Отбор = Новый Структура("ИмяРеквизита");
	
	Отбор.ИмяРеквизита	= ИмяИсточника;
	ДанныеИсточника	= Форма[ИмяОписания].НайтиСтроки(Отбор);
	Если ДанныеИсточника.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Отбор.ИмяРеквизита	= ИмяПриемника;
	ДанныеПриемника	= Форма[ИмяОписания].НайтиСтроки(Отбор);
	Если ДанныеПриемника.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ДанныеИсточника[0].Тип = ДанныеПриемника[0].Тип Тогда
		Возврат
	КонецЕсли;
	
	ДанныеПриемника[0].Значение = ДанныеИсточника[0].Значение;
	ДанныеПриемника[0].Представление = ДанныеИсточника[0].Представление;
	ДанныеПриемника[0].Комментарий = ДанныеИсточника[0].Комментарий;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьОрганизациюПоУмолчанию()

	Возврат БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация");

КонецФункции

&НаСервереБезКонтекста
Процедура СоздатьУчетнуюПолитику(Ссылка, СистемаНалогообложения)
	
	НаборЗаписей = РегистрыСведений.УчетнаяПолитикаОрганизаций.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Организация.Установить(Ссылка);
	НаборЗаписей.Прочитать();
	
	Если НаборЗаписей.Количество() > 0 Тогда
		Возврат;
	КонецЕсли;
		
	СтрокаНабораЗаписей = НаборЗаписей.Добавить();
	СтрокаНабораЗаписей.Активность = Истина;
	
	ЭтоФизЛицо	= Ссылка.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо;
	
	
	НаборЗаписей.ДополнительныеСвойства.Вставить("ПропуститьПроверкуЗапретаИзменения", Истина);
	НаборЗаписей.Записать();
	
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьКодыОрганизации()
	
	ДатаСреза = ?(КодыОрганизации.Период = '00010101', НачалоМесяца(ТекущаяДата()), КодыОрганизации.Период);
	
	ТаблицаКодыОрганизации = РегистрыСведений.КодыОрганизации.СрезПоследних(ДатаСреза, Новый Структура("Организация", Объект.Ссылка));
	
	Если ТаблицаКодыОрганизации.Количество() > 0 Тогда
	
		ЗаполнитьЗначенияСвойств(КодыОрганизации, ТаблицаКодыОрганизации[0]);	
		
	Иначе	
		
		КодыОрганизации.Период = ДатаСреза;
		
	КонецЕсли;
	
	 
КонецПроцедуры

&НаСервере
Процедура ЗаписатьКодыОрганизации()
	
	Менеджер = РегистрыСведений.КодыОрганизации.СоздатьМенеджерЗаписи();
	
	ЗаполнитьЗначенияСвойств(Менеджер, КодыОрганизации);
	
	Менеджер.Организация = Объект.Ссылка;
	Если НЕ ЗначениеЗаполнено(КодыОрганизации.Период) Тогда
		Менеджер.Период = ТекущаяДата();	
	КонецЕсли;
	
	// проверим изменялся ли реально набор записей
	НаборМодифицирован = Ложь;
	
	ТаблицаКоды = РегистрыСведений.КодыОрганизации.СрезПоследних(Менеджер.Период, Новый Структура("Организация", Объект.Ссылка));
    Если ТаблицаКоды.Количество() > 0 Тогда
	    Для каждого Колонка Из ТаблицаКоды.Колонки Цикл
			
			Если Колонка.Имя = "Период" Тогда
				Продолжить;
			КонецЕсли;
			
			Если Менеджер[Колонка.Имя] <> ТаблицаКоды[0][Колонка.Имя] Тогда
			
				 НаборМодифицирован = Истина;
				 Прервать;
			
			КонецЕсли;
		
		КонецЦикла;
		
	Иначе
		НаборМодифицирован = Истина;
	КонецЕсли;
	
	Если НаборМодифицирован Тогда
		Менеджер.Записать(Истина);	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура отвечает за обработку нажатия на картинки формы (логотип/факсим. печать)
//
Процедура ОбработатьНажатиеКартинки(СтандартнаяОбработка, ИмяЭлементаСКартинкой)
	
	СтандартнаяОбработка = Ложь;
	
	Если ЗначениеЗаполнено(Объект["Файл"+ИмяЭлементаСКартинкой]) Тогда	
		ДанныеФайла = ПолучитьДанныеФайла(Объект["Файл"+ИмяЭлементаСКартинкой], УникальныйИдентификатор);
		РаботаСФайламиКлиент.ОткрытьФайл(ДанныеФайла);
		
	ИначеЕсли МожноРедактироватьФайлы Тогда
		
		ЗагрузитьКартинку(ИмяЭлементаСКартинкой);
		
	КонецЕсли;
	
КонецПроцедуры //ОбработатьНажатиеКартинки()

&НаСервереБезКонтекста
Функция ПолучитьДанныеФайла(ФайлКартинки, УникальныйИдентификатор)
	
	Возврат РаботаСФайлами.ДанныеФайла(ФайлКартинки, УникальныйИдентификатор);
	
КонецФункции

&НаКлиенте
// Процедура отвечает за отображение/обновление соответствующей картинки
//
Процедура УстановитьКартинкуНаФорме(АктивныйАдрес, РеквизитОбъекта)
	
	Если ЗначениеЗаполнено(РеквизитОбъекта) Тогда
		АктивныйАдрес = ПолучитьКартинку(РеквизитОбъекта, УникальныйИдентификатор);
	Иначе
		АктивныйАдрес = "";
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЗаголовокРеквизитаКартинки(ИмяЭлементаСКартинкой)
	ЭлементКартинки = Элементы[ИмяЭлементаСКартинкой];
	Если ЗначениеЗаполнено(ЭлементКартинки.Заголовок) Тогда
		Возврат ЭлементКартинки.Заголовок;
	КонецЕсли;
	
	ПутьКДанным = ЭлементКартинки.ПутьКДанным;
	Реквизиты = ПолучитьРеквизиты();
	Для Каждого Реквизит Из Реквизиты Цикл
		Если Реквизит.Имя = ПутьКДанным Тогда
			Если ЗначениеЗаполнено(Реквизит.Заголовок) Тогда
				Возврат СокрЛП(Реквизит.Заголовок);
			КонецЕсли;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ИмяЭлементаСКартинкой;
КонецФункции

&НаКлиенте
Процедура ЗагрузитьОчиститьКартинку(ИмяКартинки, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	Если Объект["Файл" + ИмяКартинки].Пустая() Тогда
		ЗагрузитьКартинку(ИмяКартинки);
	Иначе
		ОчиститьКартинку(ИмяКартинки);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьКартинку(ИмяЭлементаСКартинкой)
	
	Если Объект.Ссылка.Пустая() Тогда
		Если НЕ Записать() Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ВыбираемаяКартинка = ИмяЭлементаСКартинкой;
	
	Если ИмяЭлементаСКартинкой = "ФаксимильнаяПечать"
		ИЛИ ИмяЭлементаСКартинкой = "ФаксимильнаяПодпись" Тогда
		
		Фильтр = "Формат PNG(*.png*)|*.png";
		
	Иначе
	
		Фильтр = НСтр("ru='Все картинки';uk='Всі картинки'") + " (*.bmp;*.gif;*.png;*.jpeg;*.dib;*.rle;*.tif;*.jpg;*.ico;*.wmf;*.emf)|*.bmp;*.gif;*.png;*.jpeg;*.dib;*.rle;*.tif;*.jpg;*.ico;*.wmf;*.emf"
			+ "| " + НСтр("ru='Все файлы';uk='Всі файли'") + "(*.*)|*.*"	
			+ "|Формат bmp(*.bmp*;*.dib;*.rle)|*.bmp;*.dib;*.rle"
			+ "|Формат GIF(*.gif*)|*.gif"
			+ "|Формат JPEG(*.jpeg;*.jpg)|*.jpeg;*.jpg"
			+ "|Формат PNG(*.png*)|*.png"
			+ "|Формат TIFF(*.tif)|*.tif"
			+ "|Формат icon(*.ico)|*.ico"
			+ "|Формат метафайл(*.wmf;*.emf)|*.wmf;*.emf'";
	
	КонецЕсли;
		
	РаботаСФайламиКлиент.ДобавитьФайлы(Объект.Ссылка, УникальныйИдентификатор, Фильтр);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьКартинкуИзПрисоединенныхФайлов(ИмяЭлементаСКартинкой)
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ВладелецФайла", Объект.Ссылка);
		ПараметрыФормы.Вставить("РежимВыбора", Истина);
		ПараметрыФормы.Вставить("ЗакрыватьПриВыборе", Истина);
		
		ДополнительныеПараметры = Новый Структура("ИмяЭлементаСКартинкой", ИмяЭлементаСКартинкой);
		ОписаниеОповещения = Новый ОписаниеОповещения("ВыбратьКартинкуИзПрисоединенныхФайловЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		
		ОткрытьФорму("Обработка.РаботаСФайлами.Форма.ПрисоединенныеФайлы", ПараметрыФормы, Элементы["Адрес"+ИмяЭлементаСКартинкой], , , , ОписаниеОповещения);
		
	Иначе
		
		ТекстСообщения = НСтр("ru='Элемент справочника еще не записан.';uk='Елемент довідника ще не записаний.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВыбратьКартинкуИзПрисоединенныхФайловЗавершение(ВыбраннаяКартинка, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(ВыбраннаяКартинка) Тогда
		
		УстановитьКартинкуВЭлементе(ВыбраннаяКартинка, ДополнительныеПараметры.ИмяЭлементаСКартинкой);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьКартинку(ИмяЭлементаСКартинкой)

	Модифицированность = Истина;
	ИмяФайла = "Файл" + ИмяЭлементаСКартинкой;
	ИмяАдресаКартинки = "Адрес" + ИмяЭлементаСКартинкой;
	Объект[ИмяФайла] = Неопределено;
	
	УстановитьКартинкуНаФорме(ЭтотОбъект[ИмяАдресаКартинки], Объект[ИмяФайла]);
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура УстановитьКартинкуВЭлементе(ФайлКартинки, ИмяЭлементаСКартинкой)
	
	Модифицированность = Истина;
	ИмяФайла = "Файл" + ИмяЭлементаСКартинкой;
	ИмяАдресаКартинки = "Адрес" + ИмяЭлементаСКартинкой;
	Объект[ИмяФайла] = ФайлКартинки;
	УстановитьКартинкуНаФорме(ЭтотОбъект[ИмяАдресаКартинки], ФайлКартинки);
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаСервереБезКонтекста
// Функция возвращает навигационую ссылку файла
//
Функция ПолучитьКартинку(ФайлКартинки, УникальныйИдентификатор)
	
	ДанныеКартинки = РаботаСФайлами.ДанныеФайла(ФайлКартинки, УникальныйИдентификатор);
	ПроверитьРазмерКартинки(ДанныеКартинки);
	Возврат ДанныеКартинки.СсылкаНаДвоичныеДанныеФайла;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ПроверитьРазмерКартинки(ДанныеКартинки)
	
	ДопустимыйРазмерКартинки = ДанныеКартинки.Размер <= 512000;
	
	Если НЕ ДопустимыйРазмерКартинки Тогда
		
		ТекстОшибки = СтрШаблон(НСтр("ru='Размер картинки ""%1"" слишком велик.
                |Рекомендуется использовать файл формата *.png размером не более 500 Кб.'
                |;uk='Розмір зображення ""%1"" занадто великий.
                |Рекомендується використовувати файл формату *.png розміром не більше 500 Кб.'"),
				ДанныеКартинки.ИмяФайла);
		
		ЗаписьЖурналаРегистрации(НСтр("ru='Организация';uk='Організація'"), УровеньЖурналаРегистрации.Ошибка,
			Метаданные.Справочники.Организации, ДанныеКартинки.Владелец,
			ТекстОшибки);
			
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, ДанныеКартинки.Владелец);
						
	КонецЕсли;
	
КонецПроцедуры

// СтандартныеПодсистемы.КонтактнаяИнформация
&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияПриИзменении(Элемент)
	УправлениеКонтактнойИнформациейКлиент.ПриИзменении(ЭтотОбъект, Элемент);
	УправлениеФормой(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
    УправлениеКонтактнойИнформациейКлиент.НачалоВыбора(ЭтотОбъект, Элемент, , СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияПриНажатии(Элемент, СтандартнаяОбработка)
    УправлениеКонтактнойИнформациейКлиент.НачалоВыбора(ЭтотОбъект, Элемент, , СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияОчистка(Элемент, СтандартнаяОбработка)
    УправлениеКонтактнойИнформациейКлиент.Очистка(ЭтотОбъект, Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияВыполнитьКоманду(Команда)
    УправлениеКонтактнойИнформациейКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда.Имя);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
    УправлениеКонтактнойИнформациейКлиент.АвтоПодбор(Текст, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
    УправлениеКонтактнойИнформациейКлиент.ОбработкаВыбора(ЭтотОбъект, ВыбранноеЗначение, Элемент.Имя, СтандартнаяОбработка);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ОбновитьКонтактнуюИнформацию(Результат)
	
	Если Результат.Свойство("ИмяРеквизита") Тогда
		ПослеИзмененияКонтактнойИнформации(Результат.ИмяРеквизита);
	КонецЕсли;
	
	УправлениеКонтактнойИнформацией.ОбновитьКонтактнуюИнформацию(ЭтотОбъект, Объект, Результат);
КонецПроцедуры
// Конец СтандартныеПодсистемы.КонтактнаяИнформация

// СтандартныеПодсистемы.Свойства
&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

&НаСервере
Процедура УправлениеФормойЗиК()
	
	Если Не ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыРасширеннаяПодсистемы") ИЛИ Не ПолучитьФункциональнуюОпцию("ИспользоватьРасчетЗарплатыРасширенная") Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
				Элементы,
				"ГруппаЗарплатаИКадры",
				"Видимость",
				Ложь);
	КонецЕсли;
	
//++ БУ ЗИК	
//~	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьВоинскийУчет") Тогда
//~		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
//~				Элементы,
//~				"ГруппаВоинскийУчетОтступ",
//~				"Видимость",
//~				Ложь);
//~	КонецЕсли;
//~	
//~	ДоступностьКнопкиОткрытьКадровыйУчетИРасчетЗарплаты = 
//~			ПравоДоступа("Изменение", Метаданные.РегистрыСведений.НастройкиУчетаСтраховыхВзносов)
//~			ИЛИ ПравоДоступа("Изменение", Метаданные.РегистрыСведений.УчетнаяПолитикаОрганизаций)
//~			ИЛИ ПравоДоступа("Изменение", Метаданные.РегистрыСведений.НастройкиЗарплатаКадрыРасширенная)
//~			ИЛИ ПравоДоступа("Изменение", Метаданные.РегистрыСведений.НастройкиУчетаПособийСоциальногоСтрахования)
//~			ИЛИ ПравоДоступа("Изменение", Метаданные.РегистрыСведений.УчетнаяПолитикаПоНДФЛ);
//~			
//~	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ОткрытьКадровыйУчетИРасчетЗарплаты",
//~																	"Доступность", ДоступностьКнопкиОткрытьКадровыйУчетИРасчетЗарплаты);
//~																	
//~	ДоступностьКнопкиОткрытьБухучетИВыплатуЗарплаты = 
//~			ПравоДоступа("Изменение", Метаданные.РегистрыСведений.БухучетЗарплатыОрганизаций)
//~			ИЛИ ПравоДоступа("Изменение", Метаданные.РегистрыСведений.МестаВыплатыЗарплатыОрганизаций)
//~			ИЛИ ПравоДоступа("Изменение", Метаданные.РегистрыСведений.НастройкиЗарплатаКадрыРасширенная);
//~
//~	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ОткрытьБухучетИВыплатуЗарплаты",
//~																	"Доступность", ДоступностьКнопкиОткрытьБухучетИВыплатуЗарплаты);
//~	
//~	ДоступностьКнопкиОткрытьВоинскийУчет = 
//~			ПравоДоступа("Изменение", Метаданные.РегистрыСведений.ВоинскийУчет);
//~	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ОткрытьВоинскийУчет",
//~																	"Доступность", ДоступностьКнопкиОткрытьВоинскийУчет);
//-- БУ ЗИК	
	
КонецПроцедуры	

&НаКлиенте
Процедура ПроверитьЗаписанностьОбъекта(ИмяФормы, ОповещениеПослеЗаписи, ТекстВопроса = Неопределено)
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		Если ТекстВопроса = Неопределено Тогда
			ТекстВопроса = НСтр("ru='Данные еще не записаны.
            |Переход к ""%ИмяФормы%"" возможен только после записи данных.
            |Данные будут записаны.'
            |;uk='Дані ще не записані.
            |Перехід до ""%ИмяФормы%"" можливий тільки після запису даних.
            |Дані будуть записані.'");
			ТекстВопроса = СтрЗаменить(ТекстВопроса, "%ИмяФормы%", ИмяФормы);
		КонецЕсли;
				
		ПоказатьВопрос(Новый ОписаниеОповещения("ПроверитьЗаписанностьОбъектаОбработкаОтвета", ЭтотОбъект, ОповещениеПослеЗаписи), ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
		Возврат;
		
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(ОповещениеПослеЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьЗаписанностьОбъектаОбработкаОтвета(КодОтвета, ДополнительныеПараметры) Экспорт
	
	Если КодОтвета = КодВозвратаДиалога.ОК Тогда 
		
		ЭлементЗаписан = Записать();
		
		Если Не ЭлементЗаписан Тогда
			Возврат;
		КонецЕсли;
		
	    Оповещение = ДополнительныеПараметры;
		
		ВыполнитьОбработкуОповещения(Оповещение);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПараметрыРасчетаЗарплаты(Команда)
	
	ПроверитьЗаписанностьОбъекта(НСтр("ru='График работы';uk='Графік роботи'"), Новый ОписаниеОповещения("ОткрытьПараметрыРасчетаЗарплатыОбъектЗаписан" ,ЭтотОбъект));
			
КонецПроцедуры
											
&НаКлиенте
Процедура ОткрытьПараметрыРасчетаЗарплатыОбъектЗаписан(Результат, ДополнительныеПараметры) Экспорт
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ОрганизацияСсылка",            Объект.Ссылка);
	СтруктураПараметров.Вставить("ВидОрганизации",               ВидОрганизации);
	СтруктураПараметров.Вставить("ГрафикРаботыСотрудников",      Объект.ГрафикРаботыСотрудников);
	
	ОткрытьФорму("Справочник.Организации.Форма.ФормаПараметрыФормированияЗарплаты", 
												СтруктураПараметров, ЭтаФорма,,,, Новый ОписаниеОповещения("ОткрытьПараметрыРасчетаЗарплатыЗавершение", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПараметрыРасчетаЗарплатыЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    СтруктураПараметров = Результат;
    
    Если ЗначениеЗаполнено(СтруктураПараметров) И СтруктураПараметров <> КодВозвратаДиалога.Отмена Тогда
        ЗаполнитьЗначенияСвойств(Объект, СтруктураПараметров);
        ЗаполнитьОписаниеПараметровРасчетаЗарплаты();
        Модифицированность = Истина;	
    КонецЕсли;
    
    Возврат;

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьКадровыйУчетИРасчетЗарплаты(Команда)
	
	ПроверитьЗаписанностьОбъекта(НСтр("ru='Параметры кадрового учета и расчета зарплаты';uk='Параметри кадрового обліку і розрахунку зарплати'"), Новый ОписаниеОповещения("ОткрытьКадровыйУчетИРасчетЗарплатыОбъектЗаписан", ЭтотОбъект));
			
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьКадровыйУчетИРасчетЗарплатыОбъектЗаписан(Результат, ДополнительныеПараметры) Экспорт
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("Заголовок",  НСтр("ru='Параметры кадрового учета и расчет зарплаты';uk='Параметри кадрового обліку і розрахунку зарплати'"));
	ПараметрыОткрытия.Вставить("ОрганизацияСсылка",	Объект.Ссылка);
	
	ОткрытьФорму("ОбщаяФорма.ОрганизацияУчетнаяПолитика",
									ПараметрыОткрытия,
									ЭтаФорма,,,, Новый ОписаниеОповещения("ОткрытьКадровыйУчетИРасчетЗарплатыЗавершение", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьКадровыйУчетИРасчетЗарплатыЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    ЗаполнитьОписаниеКадровогоУчетаИРасчетаЗарплаты();	
    Возврат;

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьБухучетИВыплатуЗарплаты(Команда)
	
	ПроверитьЗаписанностьОбъекта(НСтр("ru='Бухучет и выплата зарплаты';uk='Бухгалтерський облік та виплата зарплати'"), Новый ОписаниеОповещения("ОткрытьБухучетИВыплатуЗарплатыОбъектЗаписан", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьБухучетИВыплатуЗарплатыОбъектЗаписан(Результат, ДополнительныеПараметры) Экспорт
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("Заголовок",			ЭтаФорма.Заголовок);
	ПараметрыОткрытия.Вставить("ОрганизацияСсылка",	Объект.Ссылка);
	
	ОткрытьФорму("ОбщаяФорма.ОрганизацияБухучетИВыплатаЗарплаты",
		ПараметрыОткрытия,
		ЭтаФорма,,,, Новый ОписаниеОповещения("ОткрытьБухучетИВыплатуЗарплатыЗавершение", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьБухучетИВыплатуЗарплатыЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    ЗаполнитьОписаниеБухучетаИВыплатыЗарплат();	
    Возврат;

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьВоинскийУчет(Команда)
	
	ПроверитьЗаписанностьОбъекта(НСтр("ru='Воинский учет';uk='Військовий облік'"), Новый ОписаниеОповещения("ОткрытьВоинскийУчетОбъектЗаписан", ЭтотОбъект));
		
КонецПроцедуры
	
&НаКлиенте
Процедура ОткрытьВоинскийУчетОбъектЗаписан(Результат, ДополнительныеПараметры) Экспорт
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("Заголовок",			ЭтаФорма.Заголовок);
	ПараметрыОткрытия.Вставить("ОрганизацияСсылка",	Объект.Ссылка);
	
	ОткрытьФорму("ОбщаяФорма.ОрганизацияВоинскийУчет",
		ПараметрыОткрытия,
		ЭтаФорма,,,, Новый ОписаниеОповещения("ОткрытьВоинскийУчетЗавершение", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьВоинскийУчетЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    ЗаполнитьОписаниеВоинскогоУчета();	
	
	Возврат;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОписанияПараметров()
	
//++ БУ ЗИК
//~	Если Объект.Ссылка.Пустая() Тогда
//~		Возврат;
//~	КонецЕсли;
//~	ЗаполнитьОписаниеПараметровРасчетаЗарплаты();
//~	ЗаполнитьОписаниеБухучетаИВыплатыЗарплат();
//~	ЗаполнитьОписаниеКадровогоУчетаИРасчетаЗарплаты();
//~	ЗаполнитьОписаниеВоинскогоУчета();
//~	
//~	ЗаполнитьОписаниеСпециальныеРежимыЗарплатаКадры();	
//~	
//-- БУ ЗИК	
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОписаниеПараметровРасчетаЗарплаты()
	
	СтрокаОписания = НСтр("ru='График работы сотрудников: %ГрафикРаботыСотрудников%.';uk='Графік роботи співробітників: %ГрафикРаботыСотрудников%.'");
	
	Если ПравоДоступа("Чтение", Метаданные.Справочники.ГрафикиРаботыСотрудников) Тогда 
		Если ЗначениеЗаполнено(Объект.ГрафикРаботыСотрудников) Тогда 
			СтрокаОписания = СтрЗаменить(СтрокаОписания, "%ГрафикРаботыСотрудников%", Объект.ГрафикРаботыСотрудников);		
		Иначе
			СтрокаОписания = СтрЗаменить(СтрокаОписания, "%ГрафикРаботыСотрудников%", НСтр("ru='не указано';uk='не вказано'"));
		КонецЕсли;	
	Иначе
		СтрокаОписания = СтрЗаменить(СтрокаОписания, "%ГрафикРаботыСотрудников%", НСтр("ru='недостаточно прав на чтение информации';uk='недостатньо прав для читання інформації'"));	
	КонецЕсли;
	
	Элементы.ОписаниеПараметровРасчетаЗарплаты.Заголовок = СтрокаОписания;	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОписаниеКадровогоУчетаИРасчетаЗарплаты()
	
	ИспользоватьНачислениеЗарплаты = ПолучитьФункциональнуюОпцию("ИспользоватьНачислениеЗарплаты");
	ИспользоватьРасчетЗарплатыРасширенная = ПолучитьФункциональнуюОпцию("ИспользоватьРасчетЗарплатыРасширенная");
	
	ПравоЧтенияУчетСтраховыхВзносов 		= ПравоДоступа("Чтение", Метаданные.РегистрыСведений.НастройкиУчетаСтраховыхВзносов);
		
	ПравоЧтенияЗарплатаКадрыРасширенная 	= ПравоДоступа("Чтение", Метаданные.РегистрыСведений.НастройкиЗарплатаКадрыРасширенная);
	
	ПравоЧтенияУчетПособийСоциальногоСтрахования  
											= ПравоДоступа("Чтение", Метаданные.РегистрыСведений.НастройкиУчетаПособийСоциальногоСтрахования);
	ПравоЧтенияУчетнаяПолитикаПоНДФЛ 		= ПравоДоступа("Чтение", Метаданные.РегистрыСведений.УчетнаяПолитикаПоНДФЛ);
	
	Запрос = Новый Запрос;	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ВЫБОР
	|		КОГДА &Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|		ИНАЧЕ &Организация
	|	КОНЕЦ КАК Ссылка
	|ПОМЕСТИТЬ ТаблицаОрганизация
	|ИЗ
	|	Справочник.Организации КАК Организации
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ТаблицаОрганизация.Ссылка = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|		КОГДА Организации.ГоловнаяОрганизация <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА Организации.ГоловнаяОрганизация
	|		ИНАЧЕ Организации.Ссылка
	|	КОНЕЦ КАК Организация
	|ПОМЕСТИТЬ ТаблицаГоловнаяОрганизация
	|ИЗ
	|	ТаблицаОрганизация КАК ТаблицаОрганизация
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
	|		ПО ТаблицаОрганизация.Ссылка = Организации.Ссылка
	|;";
	
	НомерТекущейТаблицыЗапроса = 1;
	
	Если ПравоЧтенияУчетСтраховыхВзносов Тогда
		
		ТекстЗапроса = ТекстЗапроса + 
		"ВЫБРАТЬ
		|	ЕСТЬNULL(НастройкиУчетаСтраховыхВзносов.ИспользуетсяТрудЧленовЛетныхЭкипажей, ЛОЖЬ) КАК ИспользуетсяТрудЧленовЛетныхЭкипажей,
		|	ЕСТЬNULL(НастройкиУчетаСтраховыхВзносов.ИспользуютсяСпециальныеРаботы, ЛОЖЬ) КАК ИспользуютсяСпециальныеРаботы,
		|	ЕСТЬNULL(НастройкиУчетаСтраховыхВзносов.УчетНовыхРабочихМест, ЛОЖЬ) КАК УчетНовыхРабочихМест,
		|	ЕСТЬNULL(НастройкиУчетаСтраховыхВзносов.ОсновнаяКатегорияЗастрахованныхЛиц, ЗНАЧЕНИЕ(Справочник.КатегорииЗастрахованныхЛицЕСВ.ПустаяСсылка)) КАК ОсновнаяКатегорияЗастрахованныхЛиц
		|ИЗ
		|	ТаблицаОрганизация КАК Организации
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиУчетаСтраховыхВзносов КАК НастройкиУчетаСтраховыхВзносов
		|		ПО Организации.Ссылка = НастройкиУчетаСтраховыхВзносов.Организация
		|;";
		
		НомерТекущейТаблицыЗапроса = НомерТекущейТаблицыЗапроса + 1;
		НомерТаблицыУчетСтраховыхВзносов = НомерТекущейТаблицыЗапроса;
		
	КонецЕсли;
	
	Если ИспользоватьРасчетЗарплатыРасширенная И ПравоЧтенияУчетПособийСоциальногоСтрахования Тогда
		
		ТекстЗапроса = ТекстЗапроса + 
		"ВЫБРАТЬ
		|	НастройкиУчетаПособийСоциальногоСтрахования.РазрешенаВыплатаПособийДоОплатыФСС
		|ИЗ
		|	ТаблицаОрганизация КАК Организации
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиУчетаПособийСоциальногоСтрахования КАК НастройкиУчетаПособийСоциальногоСтрахования
		|		ПО Организации.Ссылка = НастройкиУчетаПособийСоциальногоСтрахования.Организация
		|;";
		
		НомерТекущейТаблицыЗапроса = НомерТекущейТаблицыЗапроса + 1;
		НомерТаблицыУчетПособийСоциальногоСтрахования = НомерТекущейТаблицыЗапроса;
		
	КонецЕсли;
	
	Если ПравоЧтенияЗарплатаКадрыРасширенная Тогда
		
		ТекстЗапроса = ТекстЗапроса + 
		"ВЫБРАТЬ
		|	ЛОЖЬ
		|ИЗ
		|	ТаблицаОрганизация КАК Организации
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиЗарплатаКадрыРасширенная КАК НастройкиЗарплатаКадрыРасширенная
		|		ПО Организации.Ссылка = НастройкиЗарплатаКадрыРасширенная.Организация;";
		
		НомерТекущейТаблицыЗапроса = НомерТекущейТаблицыЗапроса + 1;
		НомерТаблицыЗарплатаКадрыРасширенная = НомерТекущейТаблицыЗапроса;
		
	КонецЕсли;
		
	Если ИспользоватьНачислениеЗарплаты И ПравоЧтенияУчетнаяПолитикаПоНДФЛ Тогда
		
		ТекстЗапроса = ТекстЗапроса +
		"ВЫБРАТЬ
		|	УчетнаяПолитикаПоНДФЛ.ГоловнаяОрганизация,
		|	ЕСТЬNULL(УчетнаяПолитикаПоНДФЛ.ИспользоватьОбособленныеПодразделенияДляНДФЛ, ЛОЖЬ) КАК ИспользоватьОбособленныеПодразделенияДляНДФЛ,
		|	ЕСТЬNULL(УчетнаяПолитикаПоНДФЛ.РазрешенаУплатаНалоговДоОплатыФСС, ЛОЖЬ) КАК РазрешенаУплатаНалоговДоОплатыФСС
		|ИЗ
		|	ТаблицаГоловнаяОрганизация КАК ТаблицаГоловнаяОрганизация
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитикаПоНДФЛ КАК УчетнаяПолитикаПоНДФЛ
		|		ПО ТаблицаГоловнаяОрганизация.Организация = УчетнаяПолитикаПоНДФЛ.ГоловнаяОрганизация";
		
		НомерТекущейТаблицыЗапроса = НомерТекущейТаблицыЗапроса + 1;
		НомерТаблицыУчетнаяПолитикаПоНДФЛ = НомерТекущейТаблицыЗапроса;
		
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр("Организация", Объект.Ссылка);
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	МассивРезультатовЗапроса = Запрос.ВыполнитьПакет();
		
	СтрокаОписания = "%ПродолжениеСтроки%";
	
	СтрокаОписания = СтрЗаменить(
				СтрокаОписания, 
				"%ПродолжениеСтроки%",
				"%ОсновнаяКатегорияЗастрахованныхЛиц% %УчетНовыхРабочихМест% %ИспользуетсяТрудЧленовЛетныхЭкипажей% %ИспользуютсяСпециальныеРаботы% %ИспользуетсяТрудШахтеров% 
					|%ПродолжениеСтроки%");;
				
	Если ИспользоватьРасчетЗарплатыРасширенная Тогда
		СтрокаОписания = СтрЗаменить(
				СтрокаОписания, 
				"%ПродолжениеСтроки%",
				"%РазрешенаВыплатаПособийДоОплатыФСС%
					|%ПродолжениеСтроки%");				
	КонецЕсли;
	
	Если ИспользоватьНачислениеЗарплаты Тогда  
		СтрокаОписания = СтрЗаменить(
				СтрокаОписания, 
				"%ПродолжениеСтроки%",
				"%ИспользоватьОбособленныеПодразделенияДляНДФЛ%. %РазрешенаУплатаНалоговДоОплатыФСС%. 
					|%ПродолжениеСтроки%");
		
	КонецЕсли;	
		
	СтрокаОписания = СтрЗаменить(СтрокаОписания, "%ПродолжениеСтроки%", "");
	
	Если ПравоЧтенияУчетСтраховыхВзносов Тогда
		
		Результат = МассивРезультатовЗапроса[НомерТаблицыУчетСтраховыхВзносов].Выбрать();
		Результат.Следующий();
		
		Если Результат.ИспользуетсяТрудЧленовЛетныхЭкипажей Тогда
			СтрокаОписания = СтрЗаменить(СтрокаОписания, "%ИспользуетсяТрудЧленовЛетныхЭкипажей%",
			НСтр("ru='Используется труд летных экипажей.';uk='Використовується праця льотних екіпажів.'"));
		Иначе
			СтрокаОписания = СтрЗаменить(СтрокаОписания, "%ИспользуетсяТрудЧленовЛетныхЭкипажей%", "");
		КонецЕсли;
		
		СтрокаОписания = СтрЗаменить(СтрокаОписания, "%ИспользуетсяТрудШахтеров%", "");

		Если ЗначениеЗаполнено(Результат.ОсновнаяКатегорияЗастрахованныхЛиц) Тогда
			СтрокаОписания = СтрЗаменить(СтрокаОписания, "%ОсновнаяКатегорияЗастрахованныхЛиц%",
			НСтр("ru='Основная категория застрахованных лиц: ';uk='Основна категорія застрахованих осіб: '") + Результат.ОсновнаяКатегорияЗастрахованныхЛиц.Наименование);
		Иначе
			СтрокаОписания = СтрЗаменить(СтрокаОписания, "%ОсновнаяКатегорияЗастрахованныхЛиц%", "");
		КонецЕсли;

		Если Результат.УчетНовыхРабочихМест Тогда
			СтрокаОписания = СтрЗаменить(СтрокаОписания, "%УчетНовыхРабочихМест%",
			НСтр("ru='Ведется учет работников принятых на новые рабочие места.';uk='Ведеться облік прийнятих працівників на нові робочі місця.'"));
		Иначе
			СтрокаОписания = СтрЗаменить(СтрокаОписания, "%УчетНовыхРабочихМест%", "");
		КонецЕсли;
		
		Если Результат.ИспользуютсяСпециальныеРаботы Тогда
			СтрокаОписания = СтрЗаменить(СтрокаОписания, "%ИспользуютсяСпециальныеРаботы%",
			НСтр("ru='Есть работники на специальных работах.';uk='Є працівники на спеціальних роботах.'"));
		Иначе
			СтрокаОписания = СтрЗаменить(СтрокаОписания, "%ИспользуютсяСпециальныеРаботы%", "");
		КонецЕсли;


	Иначе
		
		СтрокаОписания = СтрЗаменить(СтрокаОписания, "%ИспользуетсяТрудЧленовЛетныхЭкипажей%", "");
		СтрокаОписания = СтрЗаменить(СтрокаОписания, "%ИспользуетсяТрудШахтеров%", "");
		СтрокаОписания = СтрЗаменить(СтрокаОписания, "%ОсновнаяКатегорияЗастрахованныхЛиц%", 
													НСтр("ru='Недостаточно прав на чтение информации об учете страховых взносов.';uk='Недостатньо прав для читання інформації про облік страхових внесків.'"));
		СтрокаОписания = СтрЗаменить(СтрокаОписания, "%УчетНовыхРабочихМест%", "");
		СтрокаОписания = СтрЗаменить(СтрокаОписания, "%ИспользуютсяСпециальныеРаботы%", "");
		
	КонецЕсли;
		
	Если ИспользоватьНачислениеЗарплаты И ПравоЧтенияУчетнаяПолитикаПоНДФЛ Тогда
		
		Результат = МассивРезультатовЗапроса[НомерТаблицыУчетнаяПолитикаПоНДФЛ].Выбрать();
		Результат.Следующий();
		
		Если Результат.ИспользоватьОбособленныеПодразделенияДляНДФЛ Тогда
			СтрокаОписания = СтрЗаменить(СтрокаОписания, "%ИспользоватьОбособленныеПодразделенияДляНДФЛ%",НСтр("ru='Ведется учет НДФЛ по обособленным подразделениям';uk='Ведеться облік ПДФО за відокремленими підрозділами'"));
		Иначе
			СтрокаОписания = СтрЗаменить(СтрокаОписания, "%ИспользоватьОбособленныеПодразделенияДляНДФЛ%",НСтр("ru='Не ведется учет НДФЛ по обособленным подразделениям';uk='Не ведеться облік ПДФО за відокремленими підрозділами'"));
		КонецЕсли;
		
		Если Результат.РазрешенаУплатаНалоговДоОплатыФСС Тогда
			СтрокаОписания = СтрЗаменить(СтрокаОписания, "%РазрешенаУплатаНалоговДоОплатыФСС%",НСтр("ru='Разрешена уплата налогов по начислениям ФСС до оплаты фондом';uk='Дозволена сплата податків по нарахуваннях до ФСС фондом оплати'"));
		Иначе
			СтрокаОписания = СтрЗаменить(СтрокаОписания, "%РазрешенаУплатаНалоговДоОплатыФСС%",НСтр("ru='Не разрешена уплата налогов по начислениям ФСС до оплаты фондом';uk='Не дозволяється сплата податків по нарахуваннях до ФСС фондом оплати'"));
		КонецЕсли;
		
	ИначеЕсли ИспользоватьНачислениеЗарплаты Тогда 
		
		СтрокаОписания = СтрЗаменить(СтрокаОписания, "%ОсобенностиИсчисленияНДФЛ%", НСтр("ru='Недостаточно прав на чтение информации о настройках НДФЛ';uk='Недостатньо прав для читання інформації про настройках ПДФО'"));
			
	КонецЕсли;
		
	Если ПравоЧтенияЗарплатаКадрыРасширенная Тогда
		
		
	КонецЕсли;
	
	Если ИспользоватьРасчетЗарплатыРасширенная И ПравоЧтенияУчетПособийСоциальногоСтрахования Тогда
		
		Результат = МассивРезультатовЗапроса[НомерТаблицыУчетПособийСоциальногоСтрахования].Выбрать();
		Результат.Следующий();

        Если НЕ (Результат.РазрешенаВыплатаПособийДоОплатыФСС = NULL) И Результат.РазрешенаВыплатаПособийДоОплатыФСС Тогда
			СтрокаОписания = СтрЗаменить(СтрокаОписания, "%РазрешенаВыплатаПособийДоОплатыФСС%",
			НСтр("ru='Разрешена выплата пособий ФСС до поступления средств от фонда.';uk='Дозволена виплата допомоги ФСС до надходження коштів від фонду.'"));			
		Иначе
			СтрокаОписания = СтрЗаменить(СтрокаОписания, "%РазрешенаВыплатаПособийДоОплатыФСС%",
			НСтр("ru='Пособия ФСС выплачиваются только после поступления средств от фонда.';uk='Допомоги ФСС виплачуються тільки після надходження коштів від фонду.'"));			
		Конецесли;	

	ИначеЕсли ИспользоватьРасчетЗарплатыРасширенная Тогда 
		
		СтрокаОписания = СтрЗаменить(СтрокаОписания, "%РазрешенаВыплатаПособийДоОплатыФСС%", НСтр("ru='недостаточно прав на чтение информации';uk='недостатньо прав для читання інформації'"));
		
	КонецЕсли;
	
	Пока Найти(СтрокаОписания, "  ") > 0 Цикл
		СтрокаОписания = СтрЗаменить(СтрокаОписания, "  ", " ");
	КонецЦикла;
	
	Элементы.ОписаниеКадровыйУчетИРасчетЗарплаты.Заголовок = СокрЛП(СтрокаОписания);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОписаниеБухучетаИВыплатыЗарплат()
	
	ИспользоватьРасчетЗарплатыРасширенная = ПолучитьФункциональнуюОпцию("ИспользоватьРасчетЗарплатыРасширенная");
	ИспользоватьНачислениеЗарплаты		  = ПолучитьФункциональнуюОпцию("ИспользоватьНачислениеЗарплаты");
	
	ПравоЧтенияБухучетЗарплатыОрганизаций 	= ПравоДоступа("Чтение", Метаданные.РегистрыСведений.БухучетЗарплатыОрганизаций);
	ПравоЧтенияМестаВыплатыЗарплатыОрганизаций = 
											  ПравоДоступа("Чтение", Метаданные.РегистрыСведений.МестаВыплатыЗарплатыОрганизаций);
	ПравоЧтенияЗарплатаКадрыРасширенная 	= ПравоДоступа("Чтение", Метаданные.РегистрыСведений.НастройкиЗарплатаКадрыРасширенная);
	
	Запрос = Новый Запрос;	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ВЫБОР
	|		КОГДА &Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|		ИНАЧЕ &Организация
	|	КОНЕЦ КАК Ссылка
	|ПОМЕСТИТЬ ТаблицаОрганизация
	|ИЗ
	|	Справочник.Организации КАК Организации
	|;";
	
	НомерТекущейТаблицыЗапроса = 0;
			
	Если ИспользоватьРасчетЗарплатыРасширенная И ПравоЧтенияМестаВыплатыЗарплатыОрганизаций Тогда
		
		ТекстЗапроса = ТекстЗапроса + 
		"ВЫБРАТЬ
		|	МестаВыплатыЗарплатыОрганизаций.Вид,
		|	МестаВыплатыЗарплатыОрганизаций.МестоВыплаты
		|ИЗ
		|	ТаблицаОрганизация КАК Организации
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МестаВыплатыЗарплатыОрганизаций КАК МестаВыплатыЗарплатыОрганизаций
		|		ПО Организации.Ссылка = МестаВыплатыЗарплатыОрганизаций.Организация
		|;";
		
		НомерТекущейТаблицыЗапроса = НомерТекущейТаблицыЗапроса + 1;
		НомерТаблицыМестаВыплатыЗарплатыОрганизаций = НомерТекущейТаблицыЗапроса;
		
	КонецЕсли;
	
	Если ИспользоватьНачислениеЗарплаты И ПравоЧтенияБухучетЗарплатыОрганизаций Тогда
		
		ТекстЗапроса = ТекстЗапроса + 
		"ВЫБРАТЬ
		|	БухучетЗарплатыОрганизацийСрезПоследних.СпособОтраженияЗарплатыВБухучете,
		|	БухучетЗарплатыОрганизацийСрезПоследних.СтатьяФинансирования
		|ИЗ
		|	ТаблицаОрганизация КАК Организации
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.БухучетЗарплатыОрганизаций.СрезПоследних КАК БухучетЗарплатыОрганизацийСрезПоследних
		|		ПО Организации.Ссылка = БухучетЗарплатыОрганизацийСрезПоследних.Организация
		|;";
		
		НомерТекущейТаблицыЗапроса = НомерТекущейТаблицыЗапроса + 1;
		НомерТаблицыБухучетЗарплатыОрганизаций = НомерТекущейТаблицыЗапроса;
		
	КонецЕсли;

	Если ПравоЧтенияЗарплатаКадрыРасширенная Тогда
		
		ТекстЗапроса = ТекстЗапроса + 
		"ВЫБРАТЬ
		|	НастройкиЗарплатаКадрыРасширенная.ДатаВыплатыАвансаНеПозжеЧем,
		|	НастройкиЗарплатаКадрыРасширенная.ДатаВыплатыЗарплатыНеПозжеЧем
		|ИЗ
		|	ТаблицаОрганизация КАК Организации
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиЗарплатаКадрыРасширенная КАК НастройкиЗарплатаКадрыРасширенная
		|		ПО Организации.Ссылка = НастройкиЗарплатаКадрыРасширенная.Организация;";
		
		НомерТекущейТаблицыЗапроса = НомерТекущейТаблицыЗапроса + 1;
		НомерТаблицыЗарплатаКадрыРасширенная = НомерТекущейТаблицыЗапроса;
		
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр("Организация", Объект.Ссылка);
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	МассивРезультатовЗапроса = Запрос.ВыполнитьПакет();
			
	СтрокаОписания = "%ПродолжениеСтроки%";
	
	Если ИспользоватьНачислениеЗарплаты Тогда
		СтрокаОписания = СтрЗаменить(
			СтрокаОписания, 
			"%ПродолжениеСтроки%", 
			НСтр("ru='Способ отражения зарплаты в бухучете: %СпособОтраженияЗарплатыВБухучете%.
                |%ПродолжениеСтроки%'
                |;uk='Спосіб відображення зарплати в бухобліку: %СпособОтраженияЗарплатыВБухучете%.
                |%ПродолжениеСтроки%'"));	
	КонецЕсли;
	
	Если ИспользоватьРасчетЗарплатыРасширенная Тогда
		СтрокаОписания = СтрЗаменить(
			СтрокаОписания, 
			"%ПродолжениеСтроки%", 
			НСтр("ru='%МестоВыплатыЗарплаты%
                |%ПродолжениеСтроки%'
                |;uk='%МестоВыплатыЗарплаты%
                |%ПродолжениеСтроки%'"));	
	КонецЕсли;
		
	СтрокаОписания = СтрЗаменить(
		СтрокаОписания,
		"%ПродолжениеСтроки%",
		НСтр("ru='Крайний срок выплаты аванса: %ДатаВыплатыАвансаНеПозжеЧем%.
            |Крайний срок выплаты зарплаты: %ДатаВыплатыЗарплатыНеПозжеЧем%.'
            |;uk='Крайній термін виплати авансу: %ДатаВыплатыАвансаНеПозжеЧем%.
            |Крайній термін виплати зарплати: %ДатаВыплатыЗарплатыНеПозжеЧем%.'"));
			
	СтрокаОписания = СтрЗаменить(СтрокаОписания, "%ПродолжениеСтроки%", "");
		
	Если ИспользоватьНачислениеЗарплаты И ПравоЧтенияБухучетЗарплатыОрганизаций Тогда
		
		Результат = МассивРезультатовЗапроса[НомерТаблицыБухучетЗарплатыОрганизаций].Выбрать();
		Результат.Следующий();
		
		Если ЗначениеЗаполнено(Результат.СтатьяФинансирования) Тогда
			СтрокаОписания = СтрЗаменить(СтрокаОписания, "%СтатьяФинансирования%",
				Результат.СтатьяФинансирования);
		Иначе
			СтрокаОписания = СтрЗаменить(СтрокаОписания, "%СтатьяФинансирования%",
				НСтр("ru='не указано';uk='не вказано'"));
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Результат.СпособОтраженияЗарплатыВБухучете) Тогда
			СтрокаОписания = СтрЗаменить(СтрокаОписания, "%СпособОтраженияЗарплатыВБухучете%",
			Результат.СпособОтраженияЗарплатыВБухучете);
		Иначе
			СтрокаОписания = СтрЗаменить(СтрокаОписания, "%СпособОтраженияЗарплатыВБухучете%",
			НСтр("ru='не указано';uk='не вказано'"));
		КонецЕсли;
		
	ИначеЕсли ИспользоватьНачислениеЗарплаты Тогда 
		
		СтрокаОписания = СтрЗаменить(СтрокаОписания, "%СтатьяФинансирования%", НСтр("ru='недостаточно прав на чтение информации';uk='недостатньо прав для читання інформації'"));
		СтрокаОписания = СтрЗаменить(СтрокаОписания, "%СпособОтраженияЗарплатыВБухучете%", НСтр("ru='недостаточно прав на чтение информации';uk='недостатньо прав для читання інформації'"));
		
	КонецЕсли;
			
	Если ИспользоватьРасчетЗарплатыРасширенная И ПравоЧтенияМестаВыплатыЗарплатыОрганизаций Тогда
		
		Результат = МассивРезультатовЗапроса[НомерТаблицыМестаВыплатыЗарплатыОрганизаций].Выбрать();
		Результат.Следующий();
		
		Если ЗначениеЗаполнено(Результат.Вид) Тогда
			Если Результат.Вид = Перечисления.ВидыМестВыплатыЗарплаты.Касса Тогда
				СтрокаОписания = СтрЗаменить(СтрокаОписания, "%МестоВыплатыЗарплаты%", НСтр("ru='Зарплата выдается через кассу: %МестоВыплаты%.';uk='Зарплата видається через касу: %МестоВыплаты%.'"));
			Иначе
				СтрокаОписания = СтрЗаменить(СтрокаОписания, "%МестоВыплатыЗарплаты%", НСтр("ru='Зарплата выдается посредством зачисления на карточку: %МестоВыплаты%.';uk='Зарплата видається за допомогою зарахування на картку: %МестоВыплаты%.'"));
			КонецЕсли;
			МестоВыплаты = ?(ЗначениеЗаполнено(Результат.МестоВыплаты), Результат.МестоВыплаты, НСтр("ru='не указано';uk='не вказано'"));
			СтрокаОписания = СтрЗаменить(СтрокаОписания, "%МестоВыплаты%", МестоВыплаты);
		Иначе
			СтрокаОписания = СтрЗаменить(СтрокаОписания, "%МестоВыплатыЗарплаты%",
			НСтр("ru='Место/способ выплаты зарплаты не указан.';uk='Місце/спосіб виплати зарплати не вказано.'"));
		КонецЕсли;
		
	ИначеЕсли ИспользоватьРасчетЗарплатыРасширенная Тогда 
		
		СтрокаОписания = СтрЗаменить(СтрокаОписания, "%МестоВыплатыЗарплаты%", НСтр("ru='Недостаточно прав на чтение информации о местах выплаты зарплаты.';uk='Недостатньо прав для читання інформації про місця виплати зарплати.'"));		
		
	КонецЕсли;
	
	Если ПравоЧтенияЗарплатаКадрыРасширенная Тогда
		
		Результат = МассивРезультатовЗапроса[НомерТаблицыЗарплатаКадрыРасширенная].Выбрать();
		Результат.Следующий();
		
		Если ЗначениеЗаполнено(Результат.ДатаВыплатыАвансаНеПозжеЧем) Тогда
			СтрокаОписания = СтрЗаменить(СтрокаОписания, "%ДатаВыплатыАвансаНеПозжеЧем%",
			НСтр("ru='%ДатаВыплатыАвансаНеПозжеЧем% число месяца';uk='%ДатаВыплатыАвансаНеПозжеЧем% число місяця'"));
			СтрокаОписания = СтрЗаменить(СтрокаОписания, "%ДатаВыплатыАвансаНеПозжеЧем%",
			Результат.ДатаВыплатыАвансаНеПозжеЧем);
		Иначе
			СтрокаОписания = СтрЗаменить(СтрокаОписания, "%ДатаВыплатыАвансаНеПозжеЧем%",
			НСтр("ru='не указано';uk='не вказано'"));
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Результат.ДатаВыплатыЗарплатыНеПозжеЧем) Тогда
			СтрокаОписания = СтрЗаменить(СтрокаОписания, "%ДатаВыплатыЗарплатыНеПозжеЧем%",
			НСтр("ru='%ДатаВыплатыЗарплатыНеПозжеЧем% число месяца';uk='%ДатаВыплатыЗарплатыНеПозжеЧем% число місяця'"));
			СтрокаОписания = СтрЗаменить(СтрокаОписания, "%ДатаВыплатыЗарплатыНеПозжеЧем%",
			Результат.ДатаВыплатыЗарплатыНеПозжеЧем);
		Иначе
			СтрокаОписания = СтрЗаменить(СтрокаОписания, "%ДатаВыплатыЗарплатыНеПозжеЧем%",
			НСтр("ru='не указано';uk='не вказано'"));
		КонецЕсли;
				
	Иначе
		
		СтрокаОписания = СтрЗаменить(СтрокаОписания, "%ДатаВыплатыАвансаНеПозжеЧем%",
			НСтр("ru='недостаточно прав на чтение информации';uk='недостатньо прав для читання інформації'"));
		СтрокаОписания = СтрЗаменить(СтрокаОписания, "%ДатаВыплатыЗарплатыНеПозжеЧем%",
			НСтр("ru='недостаточно прав на чтение информации';uk='недостатньо прав для читання інформації'"));
	КонецЕсли;
		
	Элементы.ОписаниеБухучетИВыплатаЗарплаты.Заголовок = СокрЛП(СтрокаОписания);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОписаниеВоинскогоУчета()
	
	Элементы.ОписаниеВоинскийУчет.Заголовок = НСтр("ru='Воинский учет';uk='Військовий облік'");
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОписаниеСпециальныеРежимыЗарплатаКадры()
	
	ИспользоватьРасчетЗарплатыРасширенная = ПолучитьФункциональнуюОпцию("ИспользоватьРасчетЗарплатыРасширенная");
	ИспользоватьНачислениеЗарплаты		  = ПолучитьФункциональнуюОпцию("ИспользоватьНачислениеЗарплаты");
	
	ПравоЧтенияСпециальныеРежимыЗарплатаКадры 	= ПравоДоступа("Чтение", Метаданные.РегистрыСведений.СпециальныеРежимыЗарплатаКадры);
	
	Запрос = Новый Запрос;	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ВЫБОР
	|		КОГДА &Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|		ИНАЧЕ &Организация
	|	КОНЕЦ КАК Ссылка
	|ПОМЕСТИТЬ ТаблицаОрганизация
	|ИЗ
	|	Справочник.Организации КАК Организации
	|;";
	
	НомерТекущейТаблицыЗапроса = 0;
			
	
	Если ИспользоватьНачислениеЗарплаты И ПравоЧтенияСпециальныеРежимыЗарплатаКадры Тогда
		
		ТекстЗапроса = ТекстЗапроса + 
		"ВЫБРАТЬ
		|	ЕСТЬNULL(СпециальныеРежимыЗарплатаКадрыСрезПоследних.РезидентДияСити, Ложь) КАК РезидентДияСити
		|ИЗ
		|	ТаблицаОрганизация КАК Организации
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СпециальныеРежимыЗарплатаКадры.СрезПоследних КАК СпециальныеРежимыЗарплатаКадрыСрезПоследних
		|		ПО Организации.Ссылка = СпециальныеРежимыЗарплатаКадрыСрезПоследних.Организация
		|;";
		
		НомерТекущейТаблицыЗапроса = НомерТекущейТаблицыЗапроса + 1;
		НомерТаблицыБухучетЗарплатыОрганизаций = НомерТекущейТаблицыЗапроса;
		
	КонецЕсли;

	
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр("Организация", Объект.Ссылка);
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	МассивРезультатовЗапроса = Запрос.ВыполнитьПакет();
			
	СтрокаОписания = "%ПродолжениеСтроки%";
			
	СтрокаОписания = СтрЗаменить(СтрокаОписания, "%ПродолжениеСтроки%", "");
		
	Если ИспользоватьНачислениеЗарплаты И ПравоЧтенияСпециальныеРежимыЗарплатаКадры Тогда
		
		Результат = МассивРезультатовЗапроса[НомерТаблицыБухучетЗарплатыОрганизаций].Выбрать();
		Результат.Следующий();
		
		СтрокаОписания = НСтр("ru='Нет специальных статусов';uk='Немає спеціальних статусів'");
		Если Результат.РезидентДияСити Тогда
			СтрокаОписания = НСтр("ru='Является резидентом Дія Сіті';uk='Є резидентом Дія Сіті'");
		КонецЕсли;
		
		
	ИначеЕсли ПравоЧтенияСпециальныеРежимыЗарплатаКадры Тогда 
		
		СтрокаОписания = СтрЗаменить(СтрокаОписания, "%РезидентДияСити%", НСтр("ru='недостаточно прав на чтение информации';uk='недостатньо прав для читання інформації'"));
		
	КонецЕсли;


	Элементы.ОписаниеСпециальныеРежимыЗарплатаКадры.Заголовок = СокрЛП(СтрокаОписания);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСпециальныеРежимыЗарплатаКадры(Команда)
	
	ПроверитьЗаписанностьОбъекта(НСтр("ru='Специальные режимы для Зарплаты и кадров';uk='Спеціальні режими для Зарплати та кадрів'"), Новый ОписаниеОповещения("ОткрытьСпециальныеРежимыЗарплатаКадрыЗаписан", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСпециальныеРежимыЗарплатаКадрыЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
	ЗаполнитьОписаниеСпециальныеРежимыЗарплатаКадры();

	Возврат;

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСпециальныеРежимыЗарплатаКадрыЗаписан(Результат, ДополнительныеПараметры) Экспорт
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("Заголовок",			ЭтаФорма.Заголовок);
	ПараметрыОткрытия.Вставить("ОрганизацияСсылка",	Объект.Ссылка);
	
	ОткрытьФорму("ОбщаяФорма.ОрганизацияСпециальныеРежимыЗарплатаКадры",
		ПараметрыОткрытия,
		ЭтаФорма,,,, Новый ОписаниеОповещения("ОткрытьСпециальныеРежимыЗарплатаКадрыЗавершение", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура РегистрацияОрганизации(Команда)
	
	ОткрытьФорму("Обработка.НачалоРаботы.Форма.СведенияОЛицензии");
	
КонецПроцедуры



