&НаКлиенте
Перем мПроверенаУникальностьЕДРПОУ;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	
	Если Объект.Ссылка.Пустая() Тогда
		Объект.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо;
	КонецЕсли;
	
	Элементы.Вид.СписокВыбора.Добавить("ЮридическоеЛицо",
		Строка(Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо));
	Элементы.Вид.СписокВыбора.Добавить("ФизическоеЛицо",
		Строка(Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо));
	Элементы.Вид.СписокВыбора.Добавить("ОбособленноеПодразделение",
		НСтр("ru='Обособленное подразделение';uk='Відокремлений підрозділ'"));
		
	Если Объект.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо Тогда
		Вид	= "ФизическоеЛицо";
	ИначеЕсли Объект.ОбособленноеПодразделение Тогда
		Вид	= "ОбособленноеПодразделение";
	Иначе
		Вид	= "ЮридическоеЛицо";
	КонецЕсли;
	
	ФормироватьНаименованиеПолноеАвтоматически = ПустаяСтрока(Объект.НаименованиеПолное)
		ИЛИ (Объект.НаименованиеПолное = Объект.Наименование);
	
	ОсновнаяОрганизация = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация");
		
	КоличествоБанковскихСчетов = Справочники.БанковскиеСчета.ПолучитьКоличествоПодчиненныхЭлементовПоВладельцу(Объект.Ссылка);
	Элементы.ГруппаОсновнойБанковскийСчет.ТекущаяСтраница = ?(КоличествоБанковскихСчетов = 0,
		Элементы.ГруппаСоздатьБанковскийСчет,
		Элементы.ГруппаБанковскийСчет);

	КоличествоДоговоров = Справочники.ДоговорыКонтрагентов.ПолучитьКоличествоПодчиненныхЭлементовПоВладельцу(Объект.Ссылка);
	Элементы.ГруппаОсновнойДоговорКонтрагента.ТекущаяСтраница = ?(КоличествоДоговоров = 0,
		Элементы.ГруппаСоздатьДоговорКонтрагента,
		Элементы.ГруппаДоговорКонтрагента);
		
	КоличествоКонтактныхЛиц = Справочники.КонтактныеЛица.ПолучитьКоличествоПодчиненныхЭлементовПоВладельцу(Объект.Ссылка);
	Элементы.ГруппаОсновноеКонтактноеЛицо.ТекущаяСтраница = ?(КоличествоКонтактныхЛиц = 0,
		Элементы.ГруппаСоздатьКонтактноеЛицо,
		Элементы.ГруппаКонтактноеЛицо);
		
	
	ОткрытИзПлатежки = Параметры.Свойство("ОткрытИзПлатежки");
	
	ОбновитьИнформациюОбОтветственныхЛицах();
	
	РазместитьКонтактнуюИнформацию();
	
	ОбновитьОписаниеСхемыНалогообложения(ЭтаФорма);
	
	ЕстьПравоНаРедактирование = ПравоНаРедактирование();
	
	УправлениеФормой(ЭтаФорма);

	// Обработчик подсистемы "Свойства"
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Объект", Объект);
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	пТекстЗаполнения=СокрЛП(ЭтотОбъект.Параметры.ТекстЗаполнения);
	Если Не пТекстЗаполнения = "" Тогда
		Если Пактум_Сервер.ВероятноЕДРПОУ(пТекстЗаполнения) Тогда
			Объект.КодПоЕДРПОУ = пТекстЗаполнения;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства

	// СтандартныеПодсистемы.КонтактнаяИнформация
	УправлениеКонтактнойИнформацией.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)

	Если ТекущийОбъект.ОбособленноеПодразделение Тогда
		ТекущийОбъект.ИНН	= ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ГоловнойКонтрагент, "ИНН");
	КонецЕсли;
	
	// СтандартныеПодсистемы.КонтактнаяИнформация
	УправлениеКонтактнойИнформацией.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект, Отказ);
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
	
	// Обработчик подсистемы "Свойства"
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтаФорма, ТекущийОбъект);

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)

	Если ИмяСобытия = "ИзменениеОсновнойОрганизации" Тогда
		
		ОсновнаяОрганизация = Параметр;
		
	ИначеЕсли ИмяСобытия = "Запись_Контрагенты" Тогда
		
		Если Объект.Ссылка = Источник Тогда
			// Собственную запись специально не обрабатываем
			Возврат;
		КонецЕсли;
	
		Если Объект.ГоловнойКонтрагент <> Объект.Ссылка И Источник = Объект.ГоловнойКонтрагент Тогда
			ГоловнойКонтрагентПриИзмененииНаСервере();
			Модифицированность	= Истина;
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "ИзменениеОтветственныхЛицКонтрагентов" Тогда
		
		ОбновитьИнформациюОбответственныхЛицах();
	
	ИначеЕсли  (ИмяСобытия = "ИзмененБанковскийСчет"
			Или ИмяСобытия = "ИзмененДоговорКонтрагента"
			Или ИмяСобытия = "ИзмененоКонтактноеЛицоКонтарагента") 
		И Параметр.Владелец = Объект.Ссылка Тогда
		
		УправлениеТекущимиСтраницамиГруппыИспользуютсяКакОсновные(Параметр.Ссылка);

	КонецЕсли;
	
	// Подсистема "Свойства"
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтаФорма, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаЗаписиНового(НовыйОбъект, Источник, СтандартнаяОбработка)
	
	Если ТипЗнч(НовыйОбъект) = Тип("СправочникСсылка.БанковскиеСчета") Тогда
	
		Если НЕ ЗначениеЗаполнено(Объект.ОсновнойБанковскийСчет) Тогда
			
			Объект.ОсновнойБанковскийСчет = НовыйОбъект;
			Элементы.ГруппаОсновнойБанковскийСчет.ТекущаяСтраница = Элементы.ГруппаБанковскийСчет;
			Модифицированность = Истина;
			
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(НовыйОбъект) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
	
		Если НЕ ЗначениеЗаполнено(Объект.ОсновнойДоговорКонтрагента) Тогда
			
			Объект.ОсновнойДоговорКонтрагента = НовыйОбъект;
			Элементы.ГруппаОсновнойДоговорКонтрагента.ТекущаяСтраница = Элементы.ГруппаДоговорКонтрагента;
			Модифицированность = Истина;
			
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(НовыйОбъект) = Тип("СправочникСсылка.КонтактныеЛица") Тогда
	
		Если НЕ ЗначениеЗаполнено(Объект.ОсновноеКонтактноеЛицо) Тогда
			
			Объект.ОсновноеКонтактноеЛицо = НовыйОбъект;
			Элементы.ГруппаОсновноеКонтактноеЛицо.ТекущаяСтраница = Элементы.ГруппаКонтактноеЛицо;
			Модифицированность = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Оповестить("Запись_Контрагенты", , Объект.Ссылка);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтаФорма, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	

	// СтандартныеПодсистемы.КонтактнаяИнформация
	УправлениеКонтактнойИнформацией.ОбработкаПроверкиЗаполненияНаСервере(ЭтаФорма, Объект, Отказ);
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация

КонецПроцедуры

//&НаСервере
//Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
//	
//	ЗаписатьСхемуНалогообложения(ТекущийОбъект.Ссылка, Отказ);
//	
//КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ЗаполнениеПоЕГРПОУ_УправлениеФормой();
	мПроверенаУникальностьЕДРПОУ = Ложь;  // ИНАГРО
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ВРег(ИсточникВыбора.ИмяФормы) = ВРег("ОбщаяФорма.РедактированиеИсторииКонтактнойИнформации") Тогда
		
		УправлениеКонтактнойИнформациейКлиентБП.УстановитьАдресПослеРедактированияИстории(
			ЭтотОбъект,
			ВыбранноеЗначение.ИсторияИзмененийАдреса,
			Элементы.КонтактнаяИнформацияПолеЮрАдресКонтрагента);
		
		ПриИзмененииЮрАдресаКонтрагента(ЭтотОбъект);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура НаименованиеПриИзменении(Элемент)

	Если ФормироватьНаименованиеПолноеАвтоматически Тогда
		Объект.НаименованиеПолное = Объект.Наименование;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВидПриИзменении(Элемент)
	
	Если Вид = "ФизическоеЛицо" Тогда
		Объект.ЮридическоеФизическоеЛицо	= ПредопределенноеЗначение("Перечисление.ЮридическоеФизическоеЛицо.ФизическоеЛицо");
		Объект.ОбособленноеПодразделение	= Ложь;
		Объект.ДополнятьНаименованиеАдресДаннымиГоловногоКонтрагентаВНН	= Ложь;
		Если Объект.ГоловнойКонтрагент <> Объект.Ссылка Тогда
			Объект.ГоловнойКонтрагент	= Объект.Ссылка;
		КонецЕсли;
	ИначеЕсли Вид = "ОбособленноеПодразделение" Тогда
		Объект.ЮридическоеФизическоеЛицо		= ПредопределенноеЗначение("Перечисление.ЮридическоеФизическоеЛицо.ЮридическоеЛицо");
		Объект.ДокументУдостоверяющийЛичность	= "";
		Объект.ОбособленноеПодразделение		= Истина;
		Если Объект.ГоловнойКонтрагент = Объект.Ссылка Тогда
			Объект.ГоловнойКонтрагент	= Неопределено;
		КонецЕсли;
	Иначе
		Объект.ЮридическоеФизическоеЛицо		= ПредопределенноеЗначение("Перечисление.ЮридическоеФизическоеЛицо.ЮридическоеЛицо");
		Объект.ДокументУдостоверяющийЛичность	= "";
		Объект.ОбособленноеПодразделение		= Ложь;
		Объект.ДополнятьНаименованиеАдресДаннымиГоловногоКонтрагентаВНН	= Ложь;
		Если Объект.ГоловнойКонтрагент <> Объект.Ссылка Тогда
			Объект.ГоловнойКонтрагент	= Объект.Ссылка;
		КонецЕсли;
	КонецЕсли;
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеПолноеПриИзменении(Элемент)

	ФормироватьНаименованиеПолноеАвтоматически = ПустаяСтрока(Объект.НаименованиеПолное)
		ИЛИ (Объект.НаименованиеПолное = Объект.Наименование);

КонецПроцедуры

&НаКлиенте
Процедура НаименованиеПолноеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

	Список = Новый СписокЗначений();
	Список.Добавить(Объект.Наименование);

	Оповещение = Новый ОписаниеОповещения("НаименованиеПолноеНачалоВыбораЗавершение", ЭтотОбъект);
	ПоказатьВыборИзСписка(Оповещение, Список, Элементы.НаименованиеПолное);

КонецПроцедуры

&НаКлиенте
Процедура НаименованиеПолноеНачалоВыбораЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		Объект.НаименованиеПолное = Результат.Значение;
		Модифицированность = Истина;
		ФормироватьНаименованиеПолноеАвтоматически = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ГоловнойКонтрагентПриИзменении(Элемент)
	
	ГоловнойКонтрагентПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ОсновнойДоговорКонтрагентаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	
	ПараметрыОтбора = Новый Структура("Владелец", Объект.Ссылка);
	Если ЗначениеЗаполнено(ОсновнаяОрганизация) Тогда
		ПараметрыОтбора.Вставить("Организация", ОсновнаяОрганизация);
	КонецЕсли;
	ПараметрыФормы = Новый Структура("Отбор, МножественныйВыбор", ПараметрыОтбора, Ложь);
	
	Если ОткрытИзПлатежки Тогда
		ПараметрыФормы.Вставить("ОткрытИзПлатежки");
	КонецЕсли;
	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ОсновнойДоговорКонтрагентаНачалоВыбораЗавершение", ЭтотОбъект);
	ОткрытьФорму("Справочник.ДоговорыКонтрагентов.ФормаВыбора", ПараметрыФормы, Объект.ОсновнойДоговорКонтрагента,,,, ОповещениеОЗакрытии);

КонецПроцедуры

&НаКлиенте
Процедура ОсновнойДоговорКонтрагентаНачалоВыбораЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		Объект.ОсновнойДоговорКонтрагента = Результат;
		ЭтаФорма.Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЮрАдресКонтрагентаНажатие(Элемент, СтандартнаяОбработка)
	
	УправлениеКонтактнойИнформациейКлиент.НачалоВыбора(ЭтотОбъект, Элемент, Модифицированность, СтандартнаяОбработка);	
	
КонецПроцедуры

&НаКлиенте
Процедура ФактАдресКонтрагентаНажатие(Элемент, СтандартнаяОбработка)
	
	УправлениеКонтактнойИнформациейКлиент.НачалоВыбора(ЭтотОбъект, Элемент, Модифицированность, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПочтовыйАдресКонтрагентаНажатие(Элемент, СтандартнаяОбработка)
	
	УправлениеКонтактнойИнформациейКлиент.НачалоВыбора(ЭтотОбъект, Элемент, Модифицированность, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ТелефонКонтрагентаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	УправлениеКонтактнойИнформациейКлиент.НачалоВыбора(ЭтотОбъект, Элемент, Модифицированность, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ТелефонКонтрагентаПриИзменении(Элемент)
	
	Подключаемый_КонтактнаяИнформацияПриИзменении(Элемент);
	
КонецПроцедуры 

&НаКлиенте
Процедура ФаксКонтрагентаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	УправлениеКонтактнойИнформациейКлиент.НачалоВыбора(ЭтотОбъект, Элемент, Модифицированность, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ФаксКонтрагентаПриИзменении(Элемент)
	
	Подключаемый_КонтактнаяИнформацияПриИзменении(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура EmailКонтрагентыПриИзменении(Элемент)
	
	Подключаемый_КонтактнаяИнформацияПриИзменении(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ДругаяИнформацияКонтрагентыПриИзменении(Элемент)
	
	Подключаемый_КонтактнаяИнформацияПриИзменении(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ЮрФактАдресаСовпадаютПриИзменении(Элемент)
	
	Если ЮрФактАдресаСовпадают Тогда
		СкопироватьПолеКонтактнойИнформации(ЭтотОбъект, "КонтактнаяИнформацияПолеФактАдресКонтрагента", "КонтактнаяИнформацияПолеЮрАдресКонтрагента");
	КонецЕсли;
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ЮрПочтовыйАдресаСовпадаютПриИзменении(Элемент)
	
	Если ЮрПочтовыйАдресаСовпадают Тогда
		СкопироватьПолеКонтактнойИнформации(ЭтотОбъект, "КонтактнаяИнформацияПолеПочтовыйАдресКонтрагента", "КонтактнаяИнформацияПолеЮрАдресКонтрагента");
	КонецЕсли;
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ЮрАдресПереходНаКартуНажатие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	УправлениеКонтактнойИнформациейКлиентБП.ПоказатьНаКартеНажатие(ЭтотОбъект, Элемент, КонтактнаяИнформацияПолеЮрАдресКонтрагента);
КонецПроцедуры

&НаКлиенте
Процедура ПочтовыйАдресПереходНаКартуНажатие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	УправлениеКонтактнойИнформациейКлиентБП.ПоказатьНаКартеНажатие(ЭтотОбъект, Элемент, КонтактнаяИнформацияПолеПочтовыйАдресКонтрагента);
КонецПроцедуры

&НаКлиенте
Процедура ФактАдресПереходНаКартуНажатие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	УправлениеКонтактнойИнформациейКлиентБП.ПоказатьНаКартеНажатие(ЭтотОбъект, Элемент, КонтактнаяИнформацияПолеФактАдресКонтрагента);
КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(
		Элемент.ТекстРедактирования,
		ЭтотОбъект,
		"Объект.Комментарий"
	);

КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеРуководителяНажатие(Элемент, СтандартнаяОбработка)
	Перем ОтветственноеЛицо;
	
	СтандартнаяОбработка = Ложь;
	
	Если Объект.Ссылка.Пустая() Тогда
		Если НЕ Записать() Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ОтветственноеЛицо	= ПредопределенноеЗначение("Перечисление.ОтветственныеЛицаОрганизаций.Руководитель");
	
	ЗначенияЗаполнения	= Новый Структура("Контрагент,ОтветственноеЛицо",
		Объект.Ссылка,
		ОтветственноеЛицо);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Ключ",					РуководительКлючЗаписи);
	ПараметрыФормы.Вставить("ЗначенияЗаполнения",	ЗначенияЗаполнения);
	
	ОткрытьФорму("РегистрСведений.ОтветственныеЛицаКонтрагентов.ФормаЗаписи", ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеГлавногоБухгалтераНажатие(Элемент, СтандартнаяОбработка)
	Перем ОтветственноеЛицо;
	
	СтандартнаяОбработка = Ложь;
	
	Если Объект.Ссылка.Пустая() Тогда
		Если НЕ Записать() Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ОтветственноеЛицо	= ПредопределенноеЗначение("Перечисление.ОтветственныеЛицаОрганизаций.ГлавныйБухгалтер");
	
	ЗначенияЗаполнения	= Новый Структура("Контрагент,ОтветственноеЛицо",
		Объект.Ссылка,
		ОтветственноеЛицо);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Ключ",					ГлавныйБухгалтерКлючЗаписи);
	ПараметрыФормы.Вставить("ЗначенияЗаполнения",	ЗначенияЗаполнения);
	
	ОткрытьФорму("РегистрСведений.ОтветственныеЛицаКонтрагентов.ФормаЗаписи", ПараметрыФормы);

КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеКассираНажатие(Элемент, СтандартнаяОбработка)
	Перем ОтветственноеЛицо;
	
	СтандартнаяОбработка = Ложь;
	
	Если Объект.Ссылка.Пустая() Тогда
		Если НЕ Записать() Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ОтветственноеЛицо	= ПредопределенноеЗначение("Перечисление.ОтветственныеЛицаОрганизаций.Кассир");
	
	ЗначенияЗаполнения	= Новый Структура("Контрагент,ОтветственноеЛицо",
		Объект.Ссылка,
		ОтветственноеЛицо);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Ключ",					КассирКлючЗаписи);
	ПараметрыФормы.Вставить("ЗначенияЗаполнения",	ЗначенияЗаполнения);
	
	ОткрытьФорму("РегистрСведений.ОтветственныеЛицаКонтрагентов.ФормаЗаписи", ПараметрыФормы);

КонецПроцедуры

&НаКлиенте
Процедура ИсторияЮрАдресаНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	УправлениеКонтактнойИнформациейКлиентБП.ИсторияИзмененийАдресаНажатие(
		ЭтотОбъект,
		ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ЮрАдресКонтрагента"));
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура СоздатьБанковскийСчет(Команда)
	
	Если Объект.Ссылка.Пустая() И НЕ Записать() Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура("ЗначенияЗаполнения", Новый Структура("Владелец", Объект.Ссылка));
	ОткрытьФорму("Справочник.БанковскиеСчета.ФормаОбъекта", СтруктураПараметров, ЭтаФорма,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьДоговор(Команда)
	
	Если Объект.Ссылка.Пустая() И НЕ Записать() Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура("ЗначенияЗаполнения", Новый Структура("Владелец, Организация", Объект.Ссылка, ОсновнаяОрганизация));
	
	Если ОткрытИзПлатежки Тогда
		СтруктураПараметров.Вставить("ОткрытИзПлатежки");
	КонецЕсли;
	
	ОткрытьФорму("Справочник.ДоговорыКонтрагентов.ФормаОбъекта", СтруктураПараметров, ЭтаФорма,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьКонтактноеЛицо(Команда)
	
	Если Объект.Ссылка.Пустая() И НЕ Записать() Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура("ЗначенияЗаполнения", Новый Структура("ОбъектВладелец", Объект.Ссылка));
	ОткрытьФорму("Справочник.КонтактныеЛица.ФормаОбъекта", СтруктураПараметров, ЭтаФорма,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ВсеБанковскиеСчета(Команда)
	
	Если Объект.Ссылка.Пустая() И НЕ Записать() Тогда
		Возврат;
	КонецЕсли;
	
	Отбор			= Новый Структура("Владелец", Объект.Ссылка);
	ПараметрыФормы	= Новый Структура("Отбор", Отбор);
	ОткрытьФорму("Справочник.БанковскиеСчета.ФормаСписка", ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ВсеДоговоры(Команда)
	
	Если Объект.Ссылка.Пустая() И НЕ Записать() Тогда
		Возврат;
	КонецЕсли;
	
	Отбор = Новый Структура("Владелец", Объект.Ссылка);
	
	Если ЗначениеЗаполнено(ОсновнаяОрганизация) Тогда
		Отбор.Вставить("Организация", ОсновнаяОрганизация);
	КонецЕсли;
	
	ПараметрыФормы	= Новый Структура("Отбор", Отбор);
	
	Если ОткрытИзПлатежки Тогда
		ПараметрыФормы.Вставить("ОткрытИзПлатежки");
	КонецЕсли;
	
	ОткрытьФорму("Справочник.ДоговорыКонтрагентов.ФормаСписка", ПараметрыФормы, ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ВсеКонтактныеЛица(Команда)

	Если Объект.Ссылка.Пустая() И НЕ Записать() Тогда
		Возврат;
	КонецЕсли;
	
	Отбор			= Новый Структура("ОбъектВладелец", Объект.Ссылка);
	ПараметрыФормы	= Новый Структура("Отбор", Отбор);
	ОткрытьФорму("Справочник.КонтактныеЛица.ФормаСписка", ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры

//&НаСервере
//Процедура ПрочитатьСхемуНалогообложения()
//	
//	ТаблицаСхемыНалогообложенияКонтрагентов = РегистрыСведений.СхемыНалогообложенияКонтрагентов.СрезПоследних(ТекущаяДата(), Новый Структура("Контрагент", Объект.Ссылка));
//	Если ТаблицаСхемыНалогообложенияКонтрагентов.Количество()>0 Тогда
//		СхемаНалогообложения = ТаблицаСхемыНалогообложенияКонтрагентов[0].СхемаНалогообложения;
//	КонецЕсли;	

//КонецПроцедуры

//&НаСервере
//// Процедура записывает данные об Ответственном лице.
////
//// Параметры:
////  Отказ - в параметр записывается Истина при неудачной записи.
////
//Процедура ЗаписатьСхемуНалогообложения(СсылкаНаОбъект, Отказ)

//	Отбор = Новый Структура("Контрагент");
//	Отбор.Контрагент = СсылкаНаОбъект;
//	СрезПоследних = РегистрыСведений.СхемыНалогообложенияКонтрагентов.СрезПоследних(ТекущаяДата(), Отбор);

//	НаборЗаписей = РегистрыСведений.СхемыНалогообложенияКонтрагентов.СоздатьНаборЗаписей();
//	
//	Если СрезПоследних.Количество() < 1 Тогда
//		Если НЕ ЗначениеЗаполнено(СхемаНалогообложения) Тогда
//			Возврат;
//		Иначе
//			ПериодЗаписи = '19800101';
//			
//			// Начальное значение записываем на условную "нулевую" дату лежащую в далеком прошлом, поэтому проверка запрета изменений должна быть отключена.
//			НаборЗаписей.ДополнительныеСвойства.Вставить("ПропуститьПроверкуЗапретаИзменения");
//		КонецЕсли;
//	Иначе
//		Если СхемаНалогообложения = СрезПоследних[0].СхемаНалогообложения Тогда
//			Возврат;
//		Иначе
//			ПериодЗаписи = НачалоМесяца(ТекущаяДата());
//		КонецЕсли;
//	КонецЕсли;

//	НаборЗаписей.Отбор.Период.Установить(ПериодЗаписи);
//	НаборЗаписей.Отбор.Контрагент.Установить(СсылкаНаОбъект);
//	
//	Запись = НаборЗаписей.Добавить();
//	Запись.Период 				= ПериодЗаписи;
//	Запись.Контрагент 			= СсылкаНаОбъект;
//	Запись.СхемаНалогообложения = СхемаНалогообложения;

//	Попытка
//		НаборЗаписей.Записать();
//	Исключение
//		ОписаниеОшибки = ИнформацияОбОшибке();
//		ТекстСообщения = НСтр("ru='Не удалось записать данные о схеме налогообложения :';uk='Не вдається записати дані про схему оподаткування :'") + " " + ОписаниеОшибки.Описание;
//		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , , "Объект", Отказ);
//		ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка,,, ОписаниеОшибки.Описание);	
//	КонецПопытки;

//КонецПроцедуры

&НаКлиенте
Процедура ВсеОтветственныеЛица(Команда)
	
	Если Объект.Ссылка.Пустая() И НЕ Записать() Тогда
		Возврат;
	КонецЕсли;
		
	Отбор			= Новый Структура("Контрагент", Объект.Ссылка);
	ПараметрыФормы	= Новый Структура("Отбор", Отбор);
	ОткрытьФорму("РегистрСведений.ОтветственныеЛицаКонтрагентов.ФормаСписка", ПараметрыФормы);

КонецПроцедуры

//&НаКлиенте
//Процедура ИсторияСхемНалогообложения(Команда)
//	
//    Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
//		Вопрос = "Перед просмотром истории необходимо записать элемент. Записать?";
//		Ответ = Неопределено;

//		ПоказатьВопрос(Новый ОписаниеОповещения("ИсторияСхемНалогообложенияЗавершение", ЭтотОбъект), Вопрос, РежимДиалогаВопрос.ОКОтмена);
//        Возврат;
//	КонецЕсли;

//	ИсторияСхемНалогообложенияОткрытьФорму();
//КонецПроцедуры

//&НаКлиенте
//Процедура ИсторияСхемНалогообложенияЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
//    
//    Ответ  = РезультатВопроса;
//    Если Ответ = КодВозвратаДиалога.ОК Тогда
//        Если ЗаписатьЭлементСправочника() Тогда
//		    ИсторияСхемНалогообложенияОткрытьФорму();
//		КонецЕсли;
//    КонецЕсли;

//КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоЕГРПОУ(Команда)
	
	пЕДРПОУ = СокрЛП(Объект.КодПоЕДРПОУ);
	Если пЕДРПОУ="" Тогда
		Сообщить(НСтр("ru='Не заполнен код ЕГРПОУ';uk='Не заповнено код ЕДРПОУ'"));
		Возврат;
	КонецЕсли;
	 
	СписокВыбораЗаполнения = Новый СписокЗначений;
	Если Пактум_Сервер.Пактум_Права(Ложь) Тогда
		СписокВыбораЗаполнения.Добавить("Пактум",НСтр("ru='Заполнить из Пактум.Контрагент';uk='Заповнити з Пактум.Контрагент'"));

	КонецЕсли;         
	
	Если СписокВыбораЗаполнения.Количество() = 1 Тогда
		ЗначениеВыбора = СписокВыбораЗаполнения.Получить(0).Значение;  
		Если ЗначениеВыбора = "Пактум" Тогда
			ЗаполнитьКарточкуКлиентаИзПактум(пЕДРПОУ);	
		КонецЕсли;
	ИначеЕсли СписокВыбораЗаполнения.Количество() = 2 Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ВыполнитьЗаполнениеПослеВыбора",ЭтотОбъект,пЕДРПОУ);
		ПоказатьВыборИзСписка(ОписаниеОповещения,СписокВыбораЗаполнения);
	Иначе
		Сообщить(НСтр("ru='Нет доступных сервисов для заполнения.';uk='Немає доступних сервісів для заповнення.'"));
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросНаОткрытиеКарточки(РезультатВопроса, ДополнительныеПараметры) Экспорт
    Ответ  = РезультатВопроса;
    Если Ответ = НСтр("ru='Открыть';uk='Відкрити'") Тогда
		Для Каждого Эл Из ДополнительныеПараметры.спКонтрагенты Цикл
			Если Эл.Значение=Объект.Ссылка Тогда
				Продолжить;
			КонецЕсли;
    		ОткрытьФорму("Справочник.Контрагенты.ФормаОбъекта", Новый Структура("Ключ", Эл.Значение));
		КонецЦикла;
	ИначеЕсли Ответ = НСтр("ru='Заполнить';uk='Заповнити'") Тогда
		ВыполнитьЗаполнениеКарточки();
	Иначе
		Возврат;
    КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Аутентификация1С_Завершение(Тикет, ДополнительныеПараметры) Экспорт
	Если Тикет <> Неопределено Тогда
		Если Пактум_Токен="" Тогда
			Пактум_Токен=Пактум_Сервер.Авторизация_Пактум().Токен;
		КонецЕсли;
		Если Пактум_Токен="" Тогда 
			Сообщить(НСтр("ru='Авторизация Пактум.Контрагент не пройдена. Для настройки доступа обратитесь к администратору.';uk= 'Авторизація Пактум.Контрагент не пройдена. Для настройки доступу зверніться до адміністратора.'"));
			Возврат;
		КонецЕсли;		
		Стру = Новый Структура;
		Стру.Вставить("ЕДРПОУ", СокрЛП(Объект.КодПоЕДРПОУ));
		Стру.Вставить("Код", Объект.Код);
		Стру.Вставить("КонтрагентСсылка", Объект.Ссылка);
		Стру.Вставить("Конфигурация", "БП2");
		Стру.Вставить("Токен", Пактум_Токен);
		Стру.Вставить("КолЦиклов", 0);
		Стру.Вставить("УИД", Пактум_УИД_ФоновогоЗадания);
		Пактум_Сервер.ЗапускФоновогоЗадания(Стру);
		
		Пактум_КоличествоПроверок_ФоновогоЗадания=0;
		ПодключитьОбработчикОжидания("ПроверкаЗавершенияФоновогоЗадания", 10);
		Пактум_Клиент.ЗаблокироватьФорму(ЭтаФорма, "БП");
	Иначе
		ТекстСообщения = НСтр("ru='Аутентификация не выполнена.
			|Проверьте подключение к Интернету.'
			|;uk= 'Аутентифікація не виконана.
			|Перевірте підключення до Інтернету.'");
		ПоказатьПредупреждение(, ТекстСообщения);
		Пактум_Клиент.РазблокироватьФорму(ЭтаФорма, "БП");
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Объект   = Форма.Объект;
	Элементы = Форма.Элементы;
	
	Если Объект.ЮридическоеФизическоеЛицо = ПредопределенноеЗначение("Перечисление.ЮридическоеФизическоеЛицо.ФизическоеЛицо") Тогда
		Элементы.ГруппаСтраницыЮрФизЛицо.ТекущаяСтраница	= Элементы.ГруппаФизЛицо;
	Иначе
		
		Элементы.ГруппаСтраницыЮрФизЛицо.ТекущаяСтраница	= Элементы.ГруппаЮрЛицо;
		
		Если Объект.ОбособленноеПодразделение Тогда
			Элементы.СтраницыКодПоЕДРПОУГоловнойКонтрагент.ТекущаяСтраница	= Элементы.СтраницаГоловнойКонтрагент;
		Иначе
			Элементы.СтраницыКодПоЕДРПОУГоловнойКонтрагент.ТекущаяСтраница	= Элементы.СтраницаКодПоЕДРПОУ;
		КонецЕсли;
		
	КонецЕсли;
	
	Элементы.ГруппаДополнятьНаименованиеАдресДаннымиГоловногоКонтрагента.Видимость = Объект.ОбособленноеПодразделение;
	Элементы.НомерСвидетельства.Видимость = ЗначениеЗаполнено(Объект.НомерСвидетельства);
	
	// Закладка Адреса, телефоны
	Элементы.КонтактнаяИнформацияПолеФактАдресКонтрагента.Видимость = НЕ Форма.ЮрФактАдресаСовпадают;
	Элементы.ФактАдресКонтрагентаСовпадает.Видимость                = Форма.ЮрФактАдресаСовпадают;
	Элементы.ФактАдресПереходНаКарту.Видимость                      = НЕ Форма.ЮрФактАдресаСовпадают;
	
	Элементы.КонтактнаяИнформацияПолеПочтовыйАдресКонтрагента.Видимость = НЕ Форма.ЮрПочтовыйАдресаСовпадают;
	Элементы.ПочтовыйАдресКонтрагентаСовпадает.Видимость                = Форма.ЮрПочтовыйАдресаСовпадают;
	Элементы.ПочтовыйАдресПереходНаКарту.Видимость                      = НЕ Форма.ЮрПочтовыйАдресаСовпадают;
	
	Если ПустаяСтрока(Форма.КонтактнаяИнформацияПолеФактАдресКонтрагента)
		ИЛИ Форма.КонтактнаяИнформацияПолеФактАдресКонтрагента = УправлениеКонтактнойИнформациейКлиентСерверБП.ПредставлениеПустойГиперссылки() Тогда
			Форма.ФактАдресКонтрагентаСовпадает = НСтр("ru='<не заполнен>';uk='<не заповнений>'");
			Элементы.ФактАдресПереходНаКарту.Доступность = Ложь;
	Иначе
		Форма.ФактАдресКонтрагентаСовпадает = Форма.КонтактнаяИнформацияПолеФактАдресКонтрагента;
		Элементы.ФактАдресПереходНаКарту.Доступность = Истина;
	КонецЕсли;
	
	Если ПустаяСтрока(Форма.КонтактнаяИнформацияПолеПочтовыйАдресКонтрагента)
		ИЛИ Форма.КонтактнаяИнформацияПолеПочтовыйАдресКонтрагента = УправлениеКонтактнойИнформациейКлиентСерверБП.ПредставлениеПустойГиперссылки() Тогда
			Форма.ПочтовыйАдресКонтрагентаСовпадает = НСтр("ru='<не заполнен>';uk='<не заповнений>'");
			Элементы.ПочтовыйАдресПереходНаКарту.Доступность = Ложь;
	Иначе
		Форма.ПочтовыйАдресКонтрагентаСовпадает = Форма.КонтактнаяИнформацияПолеПочтовыйАдресКонтрагента;
		Элементы.ПочтовыйАдресПереходНаКарту.Доступность = Истина;
	КонецЕсли;
	
	Если ПустаяСтрока(Форма.КонтактнаяИнформацияПолеЮрАдресКонтрагента)
		ИЛИ Форма.КонтактнаяИнформацияПолеЮрАдресКонтрагента = УправлениеКонтактнойИнформациейКлиентСервер.ТекстПустогоАдресаВВидеГиперссылки() Тогда
		Элементы.ЮрАдресПереходНаКарту.Доступность = Ложь;
	Иначе
		Элементы.ЮрАдресПереходНаКарту.Доступность = Истина;
	КонецЕсли;
	
	Элементы.СоздатьБанковскийСчет.Доступность 	= Форма.ЕстьПравоНаРедактирование;
	Элементы.СоздатьДоговор.Доступность 		= Форма.ЕстьПравоНаРедактирование;
	Элементы.СоздатьКонтактноеЛицо.Доступность 	= Форма.ЕстьПравоНаРедактирование;
	Элементы.Руководитель.Доступность 			= Форма.ЕстьПравоНаРедактирование;
	Элементы.ГлавныйБухгалтер.Доступность 		= Форма.ЕстьПравоНаРедактирование;
	Элементы.Кассир.Доступность 				= Форма.ЕстьПравоНаРедактирование;
	
КонецПроцедуры

&НаСервере
Процедура ГоловнойКонтрагентПриИзмененииНаСервере()
	
	Объект.КодПоЕДРПОУ	= ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ГоловнойКонтрагент, "КодПоЕДРПОУ");
	
КонецПроцедуры

&НаСервере
Процедура РазместитьКонтактнуюИнформацию()

	ИсторияЮрАдреса = НСтр("ru='История';uk='Історія'");
	
	СсылкаДляПереходаНаКарту = УправлениеКонтактнойИнформациейБП.СтрокаСсылкиПоказатьНаКарте();
	
	// СтандартныеПодсистемы.КонтактнаяИнформация
	ИсключаемыеВиды = Новый Массив;
	ИсключаемыеВиды.Добавить(Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента);
	ИсключаемыеВиды.Добавить(Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента);
	ИсключаемыеВиды.Добавить(Справочники.ВидыКонтактнойИнформации.ПочтовыйАдресКонтрагента);
	ИсключаемыеВиды.Добавить(Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента);
	ИсключаемыеВиды.Добавить(Справочники.ВидыКонтактнойИнформации.ФаксКонтрагенты);
	ИсключаемыеВиды.Добавить(Справочники.ВидыКонтактнойИнформации.EmailКонтрагенты);
	ИсключаемыеВиды.Добавить(Справочники.ВидыКонтактнойИнформации.ДругаяИнформацияКонтрагенты);
	
	ПараметрыРазмещенияКонтактнойИнформации = УправлениеКонтактнойИнформацией.ПараметрыКонтактнойИнформации();
	ПараметрыРазмещенияКонтактнойИнформации.ИмяЭлементаДляРазмещения = "ГруппаКомпоновкиКонтактнойИнформации";
	ПараметрыРазмещенияКонтактнойИнформации.ИсключаемыеВиды = ИсключаемыеВиды;
	
	УправлениеКонтактнойИнформацией.ПриСозданииНаСервере(ЭтотОбъект, Объект, ПараметрыРазмещенияКонтактнойИнформации);
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
	
	ЮрФактАдресаСовпадают		= СокрЛП(КонтактнаяИнформацияПолеЮрАдресКонтрагента) = СокрЛП(КонтактнаяИнформацияПолеФактАдресКонтрагента);
	ЮрПочтовыйАдресаСовпадают	= СокрЛП(КонтактнаяИнформацияПолеЮрАдресКонтрагента) = СокрЛП(КонтактнаяИнформацияПолеПочтовыйАдресКонтрагента)
		ИЛИ СокрЛП(?(КонтактнаяИнформацияПолеЮрАдресКонтрагента = УправлениеКонтактнойИнформациейКлиентСерверБП.ПредставлениеПустойГиперссылки(),
		"", КонтактнаяИнформацияПолеЮрАдресКонтрагента)) = СокрЛП(КонтактнаяИнформацияПолеПочтовыйАдресКонтрагента);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПриИзмененииЮрАдресаКонтрагента(Форма)

	Если Форма.ЮрФактАдресаСовпадают ИЛИ ПустаяСтрока(Форма.КонтактнаяИнформацияПолеФактАдресКонтрагента) Тогда
		СкопироватьПолеКонтактнойИнформации(Форма, "КонтактнаяИнформацияПолеФактАдресКонтрагента", "КонтактнаяИнформацияПолеЮрАдресКонтрагента");
	КонецЕсли;
	
	Если Форма.ЮрПочтовыйАдресаСовпадают ИЛИ ПустаяСтрока(Форма.КонтактнаяИнформацияПолеПочтовыйАдресКонтрагента) Тогда
		СкопироватьПолеКонтактнойИнформации(Форма, "КонтактнаяИнформацияПолеПочтовыйАдресКонтрагента", "КонтактнаяИнформацияПолеЮрАдресКонтрагента");
	КонецЕсли;
	
	УправлениеФормой(Форма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПриИзмененииФактАдресаКонтрагента(Форма)
	
	Форма.ЮрФактАдресаСовпадают = СокрЛП(Форма.КонтактнаяИнформацияПолеЮрАдресКонтрагента) = СокрЛП(Форма.КонтактнаяИнформацияПолеФактАдресКонтрагента);
	Форма.ЮрПочтовыйАдресаСовпадают = СокрЛП(Форма.КонтактнаяИнформацияПолеЮрАдресКонтрагента) = СокрЛП(Форма.КонтактнаяИнформацияПолеПочтовыйАдресКонтрагента);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СкопироватьПолеКонтактнойИнформации(Форма, ИмяПриемника, ИмяИсточника)
	
	Форма.Модифицированность = Истина;
	Форма[ИмяПриемника] = Форма[ИмяИсточника];
	
	ИмяОписания	= "КонтактнаяИнформацияОписаниеДополнительныхРеквизитов";
	
	Отбор = Новый Структура("ИмяРеквизита");
	
	Отбор.ИмяРеквизита	= ИмяИсточника;
	ДанныеИсточника	= Форма[ИмяОписания].НайтиСтроки(Отбор);
	Если ДанныеИсточника.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Отбор.ИмяРеквизита	= ИмяПриемника;
	ДанныеПриемника	= Форма[ИмяОписания].НайтиСтроки(Отбор);
	Если ДанныеПриемника.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ДанныеИсточника[0].Тип = ДанныеПриемника[0].Тип Тогда
		Возврат
	КонецЕсли;
	
	ДанныеПриемника[0].Значение = ДанныеИсточника[0].Значение;
	ДанныеПриемника[0].Представление = ДанныеИсточника[0].Представление;
	ДанныеПриемника[0].Комментарий = ДанныеИсточника[0].Комментарий;
	
КонецПроцедуры

//&НаКлиенте
//Процедура ИсторияСхемНалогообложенияОткрытьФорму()
//    
//    Перем ПараметрыФормы;

//    ПараметрыФормы = Новый Структура("Отбор", Новый Структура("Контрагент", Объект.Ссылка));
//    ОткрытьФорму("РегистрСведений.СхемыНалогообложенияКонтрагентов.ФормаСписка", ПараметрыФормы, ЭтаФорма, Истина, ЭтаФорма.Окно);

//КонецПроцедуры

//&НаСервере
//Функция ЗаписатьЭлементСправочника()
//	
//	Возврат Записать();
//	
//КонецФункции	

&НаСервере
Процедура ПослеИзмененияКонтактнойИнформации(ИмяРеквизита)
	
	Если ИмяРеквизита = "КонтактнаяИнформацияПолеЮрАдресКонтрагента" Тогда
		
		ПриИзмененииЮрАдресаКонтрагента(ЭтотОбъект);
		УправлениеФормой(ЭтотОбъект);
		
	ИначеЕсли ИмяРеквизита = "КонтактнаяИнформацияПолеФактАдресКонтрагента" Тогда
		
		ПриИзмененииФактАдресаКонтрагента(ЭтотОбъект);
		УправлениеФормой(ЭтотОбъект);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УправлениеТекущимиСтраницамиГруппыИспользуютсяКакОсновные(СозданныйОбъект)
	
	Если ТипЗнч(СозданныйОбъект) = Тип("СправочникСсылка.БанковскиеСчета") Тогда
		Элементы.ГруппаОсновнойБанковскийСчет.ТекущаяСтраница = Элементы.ГруппаБанковскийСчет;
		
	ИначеЕсли ТипЗнч(СозданныйОбъект) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
		Элементы.ГруппаОсновнойДоговорКонтрагента.ТекущаяСтраница = Элементы.ГруппаДоговорКонтрагента;
		
	ИначеЕсли ТипЗнч(СозданныйОбъект) = Тип("СправочникСсылка.КонтактныеЛица") Тогда
		Элементы.ГруппаОсновноеКонтактноеЛицо.ТекущаяСтраница = Элементы.ГруппаКонтактноеЛицо;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаЗавершенияФоновогоЗадания()
	Завершить=Пактум_Клиент.ПроверкаЗавершенияФоновогоЗадания(Объект.КодПоЕДРПОУ, Объект.Код, Пактум_УИД_ФоновогоЗадания, Пактум_КоличествоПроверок_ФоновогоЗадания, ЭтаФорма);
	Если Завершить Тогда
		ОтключитьОбработчикОжидания("ПроверкаЗавершенияФоновогоЗадания");
	Иначе
		Пактум_КоличествоПроверок_ФоновогоЗадания=Пактум_КоличествоПроверок_ФоновогоЗадания+1;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЗаполнениеКарточки()
	Попытка
		Если Не ЗначениеЗаполнено(Объект.Наименование) Тогда
			Объект.Наименование=Объект.КодПоЕДРПОУ;
		КонецЕсли;
		Записать();
	Исключение
		Сообщить(ОписаниеОшибки());
		Возврат;
	КонецПопытки;
	
	Стру=Пактум_Сервер.ПолучитьКонтрагента(СокрЛП(Объект.КодПоЕДРПОУ), Объект.Код);
	Пактум_Клиент.Старт(ЭтаФорма);
	ОповещениеОЗавершении = Новый ОписаниеОповещения("Аутентификация1С_Завершение", ЭтотОбъект);
	Пактум_Клиент.НачатьАутентификацию1С(ОповещениеОЗавершении);	
КонецПроцедуры

// СтандартныеПодсистемы.КонтактнаяИнформация
&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияПриИзменении(Элемент)
	УправлениеКонтактнойИнформациейКлиент.ПриИзменении(ЭтотОбъект, Элемент);
	УправлениеФормой(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	УправлениеКонтактнойИнформациейКлиент.НачалоВыбора(ЭтотОбъект, Элемент, , СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияПриНажатии(Элемент, СтандартнаяОбработка)
	УправлениеКонтактнойИнформациейКлиент.НачалоВыбора(ЭтотОбъект, Элемент,, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияОчистка(Элемент, СтандартнаяОбработка)
	УправлениеКонтактнойИнформациейКлиент.Очистка(ЭтотОбъект, Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияВыполнитьКоманду(Команда)
	УправлениеКонтактнойИнформациейКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда.Имя);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ОбновитьКонтактнуюИнформацию(Результат)
	
	Если Результат.Свойство("ИмяРеквизита") Тогда
		ПослеИзмененияКонтактнойИнформации(Результат.ИмяРеквизита);
	КонецЕсли;
	
	УправлениеКонтактнойИнформацией.ОбновитьКонтактнуюИнформацию(ЭтотОбъект, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	УправлениеКонтактнойИнформациейКлиент.АвтоПодбор(Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	УправлениеКонтактнойИнформациейКлиент.ОбработкаВыбора(ЭтотОбъект, ВыбранноеЗначение, Элемент.Имя, СтандартнаяОбработка);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.КонтактнаяИнформация

// СтандартныеПодсистемы.Свойства
&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаСервере
Процедура ОбновитьИнформациюОбОтветственныхЛицах()
	
	Руководитель		= НСтр("ru='Создать';uk='Створити'");
	ГлавныйБухгалтер	= НСтр("ru='Создать';uk='Створити'");
	Кассир				= НСтр("ru='Создать';uk='Створити'");
	
	РуководительКлючЗаписи		= РегистрыСведений.ОтветственныеЛицаКонтрагентов.ПустойКлюч();
	ГлавныйБухгалтерКлючЗаписи	= РегистрыСведений.ОтветственныеЛицаКонтрагентов.ПустойКлюч();
	КассирКлючЗаписи			= РегистрыСведений.ОтветственныеЛицаКонтрагентов.ПустойКлюч();
	
	Если Объект.Ссылка.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	Запрос	= Новый Запрос;
	Запрос.УстановитьПараметр("Контрагент",	Объект.Ссылка);
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ОтветственныеЛицаКонтрагентовСрезПоследних.Период КАК Период,
	|	ОтветственныеЛицаКонтрагентовСрезПоследних.Контрагент КАК Контрагент,
	|	ОтветственныеЛицаКонтрагентовСрезПоследних.ОтветственноеЛицо КАК ОтветственноеЛицо,
	|	ПРЕДСТАВЛЕНИЕ(ОтветственныеЛицаКонтрагентовСрезПоследних.КонтактноеЛицо) КАК КонтактноеЛицо,
	|	ВЫБОР
	|		КОГДА ОтветственныеЛицаКонтрагентовСрезПоследних.ОтветственноеЛицо = ЗНАЧЕНИЕ(Перечисление.ОтветственныеЛицаОрганизаций.Руководитель)
	|			ТОГДА ""Руководитель""
	|		КОГДА ОтветственныеЛицаКонтрагентовСрезПоследних.ОтветственноеЛицо = ЗНАЧЕНИЕ(Перечисление.ОтветственныеЛицаОрганизаций.ГлавныйБухгалтер)
	|			ТОГДА ""ГлавныйБухгалтер""
	|		КОГДА ОтветственныеЛицаКонтрагентовСрезПоследних.ОтветственноеЛицо = ЗНАЧЕНИЕ(Перечисление.ОтветственныеЛицаОрганизаций.Кассир)
	|			ТОГДА ""Кассир""
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК ПредставлениеОтветственногоЛица
	|ИЗ
	|	РегистрСведений.ОтветственныеЛицаКонтрагентов.СрезПоследних КАК ОтветственныеЛицаКонтрагентовСрезПоследних
	|ГДЕ
	|	ОтветственныеЛицаКонтрагентовСрезПоследних.Контрагент = &Контрагент
	|	И (ОтветственныеЛицаКонтрагентовСрезПоследних.ОтветственноеЛицо = ЗНАЧЕНИЕ(Перечисление.ОтветственныеЛицаОрганизаций.Руководитель)
	|			ИЛИ ОтветственныеЛицаКонтрагентовСрезПоследних.ОтветственноеЛицо = ЗНАЧЕНИЕ(Перечисление.ОтветственныеЛицаОрганизаций.ГлавныйБухгалтер)
	|			ИЛИ ОтветственныеЛицаКонтрагентовСрезПоследних.ОтветственноеЛицо = ЗНАЧЕНИЕ(Перечисление.ОтветственныеЛицаОрганизаций.Кассир))";
	
	
	Отбор	= Новый Структура("Период, Контрагент, ОтветственноеЛицо");
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если ПустаяСтрока(Выборка.ПредставлениеОтветственногоЛица) Тогда
			Продолжить;
		КонецЕсли;
		
		ЭлементФормы	= ЭтаФорма.Элементы.Найти(Выборка.ПредставлениеОтветственногоЛица);
		Если ЭлементФормы = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ЭтаФорма[Выборка.ПредставлениеОтветственногоЛица] = Выборка.КонтактноеЛицо;
		
		ЗаполнитьЗначенияСвойств(Отбор, Выборка);
		ЭтаФорма[Выборка.ПредставлениеОтветственногоЛица + "КлючЗаписи"]	= РегистрыСведений.ОтветственныеЛицаКонтрагентов.СоздатьКлючЗаписи(Отбор);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПравоНаРедактирование()
	Возврат ПравоДоступа("Изменение", Метаданные.Справочники.Контрагенты);
КонецФункции


&НаКлиенте
Процедура ПроверитьЕГРПОУ(Отказ) // ИНАГРО  	
		
	Если Объект.ИНАГРО_ПроверятьУникальностьЕГРПОУ И НЕ мПроверенаУникальностьЕДРПОУ Тогда
		
		Если ЕстьДубльЕДРПОУ(Этаформа.Объект.Код, Этаформа.Объект.КодПоЕДРПОУ) Тогда
			Сообщить(НСтр("ru='Внимание!!! Не уникален код по ЕГРПОУ!';uk='Увага!!! Не є унікальним код по ЄДРПОУ!'"));
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЕстьДубльЕДРПОУ(Код, КодПоЕДРПОУ) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Контрагенты.Наименование
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	Контрагенты.КодПоЕДРПОУ = &КодПоЕДРПОУ
	|	И Контрагенты.Код <> &Код";
	
	Запрос.УстановитьПараметр("КодПоЕДРПОУ", КодПоЕДРПОУ);
	Запрос.УстановитьПараметр("Код", Код);
	
	Результат = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = Результат.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Возврат Истина;	
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура КодПоЕДРПОУПриИзменении(Элемент)
	
	мПроверенаУникальностьЕДРПОУ = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	Если НЕ мПроверенаУникальностьЕДРПОУ Тогда
		Если НЕ Объект.ЭтоГруппа  И НЕ Объект.НеЯвляетсяРезидентом Тогда 	
			ПроверитьЕГРПОУ(отказ); 
		КонецЕсли; 
	КонецЕсли;
	
	Если НЕ Объект.ЭтоГруппа  И НЕ Объект.НеЯвляетсяРезидентом Тогда 	
		
		Если НЕ ЗначениеЗаполнено(Этаформа.Объект.КодПоЕДРПОУ) Тогда
			Сообщить(НСтр("ru='Внимание!!! Не заполнен код по ЕГРПОУ!';uk='Увага!!! Не заповнений код по ЄДРПОУ!'"));
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ВыполнитьЗаполнениеПослеВыбора(ЗначениеВыбора,пЕДРПОУ) Экспорт
	
	Если ЗначениеВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеВыбора.Значение = "Пактум" Тогда
		ЗаполнитьКарточкуКлиентаИзПактум(пЕДРПОУ);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнениеПоЕГРПОУ_УправлениеФормой()
	
	Если НЕ Пактум_Сервер.ИспользованиеСервисаВозможно() Тогда
		Элементы.ЗаполнитьПоЕГРПОУ.Доступность = Ложь;
		Элементы.ЗаполнитьПоЕГРПОУ1.Доступность = Ложь;
	КонецЕсли; 
	Элементы.ДекорацияЗаполнитьПоЕГРПОУ.Видимость=Ложь;
	Элементы.ДекорацияЗаполнитьПоЕГРПОУ1.Видимость=Ложь;	
	//КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьКарточкуКлиентаИзПактум(пЕДРПОУ)
	
	СтруПараметры=Пактум_Сервер.ПроверкаКорректностиЕДРПОУ_Пактум(пЕДРПОУ);
	Если Не СтруПараметры.КорректностьЕДРПОУ_Значение Тогда
		Сообщить(СтруПараметры.КорректностьЕДРПОУ_ТекстОшибки);
		Оповестить("Пактум.СозданиеКарточки.Завершено");
		Возврат;
	КонецЕсли;
	Пактум_Токен=?(СтруПараметры.Токен=Неопределено, "", СтруПараметры.Токен);
	
	Стру=Пактум_Сервер.ПолучитьКонтрагента(пЕДРПОУ);
	Если Стру.Кво > 0 Тогда
		ТекстВопроса=НСтр("ru='Контрагент найден в базе. Открыть существующие карточки или заполнить данные в текущей карточке?';uk= 'Контрагента знайдено в базі. Відкрити існуючі картки чи заповнини дані відкритої картки?'");	
		спКнопки=Новый СписокЗначений;
		спКнопки.Добавить(НСтр("ru='Открыть';uk='Відкрити'"));
		спКнопки.Добавить(НСтр("ru='Заполнить';uk='Заповнити'"));
		спКнопки.Добавить(НСтр("ru='Отменить';uk= 'Відмінити'"));
		ПоказатьВопрос(Новый ОписаниеОповещения("ВопросНаОткрытиеКарточки", ЭтотОбъект, Стру), ТекстВопроса, спКнопки);
	Иначе
		ВыполнитьЗаполнениеКарточки();
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьПараметрыНалогообложения(Контрагент);
	
	ПараметрыНалогообложения = Новый Структура("КлючЗаписи, Описание", Неопределено, НСтр("ru='Не указана';uk= 'Не вказана'")); 
	
	Если Не ЗначениеЗаполнено(Контрагент) Тогда
		Возврат ПараметрыНалогообложения;
	КонецЕсли;
	
	Срез = РегистрыСведений.СхемыНалогообложенияКонтрагентов.СрезПоследних(, Новый Структура("Контрагент", Контрагент));
	Если Срез.Количество() Тогда
		
		ДанныеНалогообложения = Срез[0];
		
		ПараметрыКлюча = Новый Структура("Период, Контрагент");
		ЗаполнитьЗначенияСвойств(ПараметрыКлюча, ДанныеНалогообложения);
		ПараметрыНалогообложения.КлючЗаписи = РегистрыСведений.СхемыНалогообложенияКонтрагентов.СоздатьКлючЗаписи(ПараметрыКлюча);
		ПараметрыНалогообложения.Описание = "" + ДанныеНалогообложения.СхемаНалогообложения
			+ ?(ДанныеНалогообложения.ПлательщикЕдиногоНалога, " (" + ДанныеНалогообложения.ГруппаПлательщикаЕдиногоНалога + ")", "") 
			+ " " + НСтр("ru='с';uk= 'з'") + " " + Формат(ДанныеНалогообложения.Период, "ДЛФ=D");
	КонецЕсли;
	
	Возврат ПараметрыНалогообложения;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьОписаниеСхемыНалогообложения(Форма)
	
	Форма.ОписаниеСхемыНалогообложения = ПолучитьПараметрыНалогообложения(Форма.Объект.Ссылка).Описание;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаИзмененияСхемыНалогообложения(Результат, ДополнительныеПараметры) Экспорт
	
	ОбновитьОписаниеСхемыНалогообложения(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОписаниеСхемыНалогообложенияНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Объект.Ссылка.Пустая() И НЕ Записать() Тогда
		Возврат;
	КонецЕсли;
	
	Обработчик = Новый ОписаниеОповещения("ОбработкаИзмененияСхемыНалогообложения", ЭтаФорма);
	
	ПараметрыНалогообложения = ПолучитьПараметрыНалогообложения(Объект.Ссылка);
	Если ПараметрыНалогообложения.КлючЗаписи <> Неопределено Тогда
		ОткрытьФорму("РегистрСведений.СхемыНалогообложенияКонтрагентов.ФормаСписка", Новый Структура("Отбор", Новый Структура("Контрагент", Объект.Ссылка)),,,,,Обработчик);
	Иначе
		ОткрытьФорму("РегистрСведений.СхемыНалогообложенияКонтрагентов.ФормаЗаписи", Новый Структура("ЗначенияЗаполнения", Новый Структура("Контрагент", Объект.Ссылка)),,,,,Обработчик);
	КонецЕсли;
	
КонецПроцедуры
