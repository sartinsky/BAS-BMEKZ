////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

&НаКлиенте
Функция ПолучитьДоступныеЗначенияВидДоговора()

	ВидДоговораДоступныеЗначения = Новый Массив;

	Для каждого ЭлементОтбора Из Список.Отбор.Элементы Цикл

		Если НЕ ЭлементОтбора.Использование Тогда
			Продолжить;
		КонецЕсли;

		Если Строка(ЭлементОтбора.ЛевоеЗначение) <> "ВидДоговора" Тогда
			Продолжить;
		КонецЕсли;

		Если ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно Тогда
			ВидДоговораДоступныеЗначения.Добавить(ЭлементОтбора.ПравоеЗначение);
		КонецЕсли;

		Если ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке Тогда
			Для каждого ЭлементСпискаЗначений Из ЭлементОтбора.ПравоеЗначение Цикл
				ВидДоговораДоступныеЗначения.Добавить(ЭлементСпискаЗначений.Значение);
			КонецЦикла;
		КонецЕсли;

	КонецЦикла;

	Возврат ВидДоговораДоступныеЗначения;

КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	

	Если Параметры.Свойство("ВалютаВзаиморасчетовНеРавно") Тогда
		ОтборыСписковКлиентСервер.УстановитьЭлементОтбораСписка(Список, "ВалютаВзаиморасчетов",
		                                                        Параметры.ВалютаВзаиморасчетовНеРавно,
		                                                        ВидСравненияКомпоновкиДанных.НеРавно);
	КонецЕсли;
	
	ОткрытИзПлатежки = Параметры.Свойство("ОткрытИзПлатежки");
	
	// При отборе по виду договора проверяем на виды, связанные с отключаемыми функциональными опциями
	Если Параметры.Отбор.Свойство("ВидДоговора") Тогда
		ЕстьНедоступные   = Ложь;
		ДоступныеЗначения = Перечисления.ВидыДоговоровКонтрагентов.ПолучитьСписокДоступныхЗначений(
			Параметры.Отбор.ВидДоговора, ЕстьНедоступные);
		Если ЕстьНедоступные Тогда
			Если ДоступныеЗначения.Количество() = 0 Тогда
				ЗначениеОтбора = Неопределено;
			ИначеЕсли ДоступныеЗначения.Количество() = 1 Тогда
				ЗначениеОтбора = ДоступныеЗначения[0].Значение;
			Иначе
				ЗначениеОтбора = Новый ФиксированныйМассив(ДоступныеЗначения.ВыгрузитьЗначения());
			КонецЕсли;
			Параметры.Отбор.ВидДоговора = ЗначениеОтбора;
		КонецЕсли;
	КонецЕсли;
	ЕстьНедоступные      = Ложь;
	ВсеДоступныеЗначения = Перечисления.ВидыДоговоровКонтрагентов.ПолучитьСписокДоступныхЗначений(
		Неопределено, ЕстьНедоступные);
	Если ЕстьНедоступные Тогда
		Список.Параметры.УстановитьЗначениеПараметра("ДоступныеВидыДоговоров", 
			Новый ФиксированныйМассив(ВсеДоступныеЗначения.ВыгрузитьЗначения()));
	КонецЕсли;
	
	ОбщегоНазначенияБПВызовСервера.УстановитьУсловноеОформлениеОсновногоЭлемента(Список,
		ОбщегоНазначенияБПВызовСервера.ПолучитьПараметрыУсловногоОформленияОсновногоЭлемента("Ссылка", "Владелец.ОсновнойДоговорКонтрагента"));

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ "Список"

&НаКлиенте
Процедура СписокПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)

	Если Группа Тогда
		Возврат;
	КонецЕсли;

	Отказ = Истина;

	ПараметрыФормы = Новый Структура;

	ЗначенияЗаполнения = Новый Структура;
	ЗначенияЗаполнения.Вставить("Родитель", Родитель);

	Если Копирование Тогда
		ПараметрыФормы.Вставить("ЗначениеКопирования", Элементы.Список.ТекущиеДанные.Ссылка);
	ИначеЕсли ОткрытИзПлатежки Тогда
		ПараметрыФормы.Вставить("ОткрытИзПлатежки");
	КонецЕсли;

	Для каждого ЭлементОтбора Из Список.Отбор.Элементы Цикл

		Если НЕ ЭлементОтбора.Использование Тогда
			Продолжить;
		КонецЕсли;

		Если ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно Тогда
			ЗначенияЗаполнения.Вставить(Строка(ЭлементОтбора.ЛевоеЗначение), ЭлементОтбора.ПравоеЗначение);
		КонецЕсли;

		Если ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке Тогда
			ЗначенияЗаполнения.Вставить(Строка(ЭлементОтбора.ЛевоеЗначение), ЭлементОтбора.ПравоеЗначение[0].Значение);
		КонецЕсли;

	КонецЦикла;

	ВидДоговораДоступныеЗначения = ПолучитьДоступныеЗначенияВидДоговора();

	Если ВидДоговораДоступныеЗначения.Количество() > 0 Тогда
		ПараметрыФормы.Вставить("ВидДоговораДоступныеЗначения", ВидДоговораДоступныеЗначения)
	КонецЕсли;

	ПараметрыФормы.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);

	ОткрытьФорму("Справочник.ДоговорыКонтрагентов.ФормаОбъекта", ПараметрыФормы, ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура СписокПередНачаломИзменения(Элемент, Отказ)

	Если Элементы.Список.ТекущиеДанные.ЭтоГруппа Тогда
		Возврат;
	КонецЕсли;

	Отказ = Истина;

	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Ключ", Элемент.ТекущаяСтрока);

	ВидДоговораДоступныеЗначения = ПолучитьДоступныеЗначенияВидДоговора();

	Если ВидДоговораДоступныеЗначения.Количество() > 0 Тогда
		ПараметрыФормы.Вставить("ВидДоговораДоступныеЗначения", ВидДоговораДоступныеЗначения)
	КонецЕсли;

	ОткрытьФорму("Справочник.ДоговорыКонтрагентов.ФормаОбъекта", ПараметрыФормы, ЭтаФорма);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ БСП

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Элементы.Список);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Элементы.Список, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Элементы.Список);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписок

&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

#КонецОбласти
