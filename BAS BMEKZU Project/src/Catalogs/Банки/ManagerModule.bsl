#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область ПрограммныйИнтерфейс	

// Функция формирует дерево классификатора из макета хранимого в конфигурации
Функция ПолучитьДеревоКлассификатора() Экспорт
	
	Макет = НСИССервер.ПолучитьМакет("КлассификаторБанков", Справочники.Банки.ПолучитьМакет("КлассификаторБанков"));
	КлассификаторXML = Макет.ПолучитьТекст();

	
	КлассификаторТаблица = ОбщегоНазначения.ПрочитатьXMLВТаблицу(КлассификаторXML).Данные;
	
	Дерево = Новый ДеревоЗначений;
	Дерево.Колонки.Добавить("Уровень",      Новый ОписаниеТипов("Число"));
	Дерево.Колонки.Добавить("МФО",          Новый ОписаниеТипов("Строка"));
	Дерево.Колонки.Добавить("Наименование", Новый ОписаниеТипов("Строка"));
	Дерево.Колонки.Добавить("Город",        Новый ОписаниеТипов("Строка"));
	Дерево.Колонки.Добавить("Адрес",        Новый ОписаниеТипов("Строка"));
	Дерево.Колонки.Добавить("КодПоЕДРПОУ",  Новый ОписаниеТипов("Строка"));
	Дерево.Колонки.Добавить("Телефоны",     Новый ОписаниеТипов("Строка"));
	Дерево.Колонки.Добавить("КоррСчет",     Новый ОписаниеТипов("Строка"));
	Для Каждого КлассификаторЗапись Из КлассификаторТаблица Цикл
		
		Если КлассификаторЗапись.Level = "1" Тогда
			СтрокаУровень1 = Дерево.Строки.Добавить();
			НоваяСтрока = СтрокаУровень1;
		Иначе
			НоваяСтрока = СтрокаУровень1.Строки.Добавить();		
		КонецЕсли;
		
		НоваяСтрока.Уровень      = КлассификаторЗапись.Level;
		НоваяСтрока.МФО          = КлассификаторЗапись.MFO;
		НоваяСтрока.Наименование = КлассификаторЗапись.Name;
		НоваяСтрока.Город        = КлассификаторЗапись.City;
		НоваяСтрока.Адрес        = КлассификаторЗапись.Address;
		НоваяСтрока.КодПоЕДРПОУ  = КлассификаторЗапись.Code;
		НоваяСтрока.Телефоны     = КлассификаторЗапись.Tel;
		НоваяСтрока.КоррСчет     = КлассификаторЗапись.CorrAccount;
	КонецЦикла;
	
	Возврат Дерево;
	
КонецФункции

// Функция получает таблицу ссылок на банки по Коду или корреспондетскому счету.
//
// Параметры:
//	Поле - Строка - Имя поля (Код или КоррСчет)
//	Значение - Строка - Значение Код или Корреспондентского счета
//
// Возвращаемое значение:
//	ТаблицаЗначений - Найденые банки
//
Функция ПолучитьТаблицуБанковПоРеквизитам(Поле, Значение) Экспорт
	
	ТаблицаБанков = Новый ТаблицаЗначений;
	Колонки = ТаблицаБанков.Колонки;
	Колонки.Добавить("Ссылка");
	Колонки.Добавить("Код");
	Колонки.Добавить("КоррСчет");
	
	ЭтоКод = Ложь;
	ЭтоКоррСчет = Ложь;
	Если Найти(Поле, "Код") <> 0 Тогда
		ЭтоКод = Истина;
	ИначеЕсли Найти(Поле, "КоррСчет") <> 0 Тогда
		ЭтоКоррСчет = Истина;
	КонецЕсли;
	
	Если ЭтоКод ИЛИ ЭтоКоррСчет Тогда
		
		Если ЭтоКод Тогда
			СтруктураОтбора = Новый Структура("Код", Значение);
			
		ИначеЕсли ЭтоКоррСчет Тогда
			СтруктураОтбора = Новый Структура("КоррСчет", Значение);
			
		КонецЕсли;
		
		Выборка = Справочники.Банки.Выбрать( , , СтруктураОтбора, "Код Возр");
		Пока Выборка.Следующий() Цикл
			НоваяСтрока = ТаблицаБанков.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		КонецЦикла;
		
		
	КонецЕсли;
	
	Возврат ТаблицаБанков;
	
КонецФункции

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

#КонецОбласти

#КонецОбласти

#КонецЕсли