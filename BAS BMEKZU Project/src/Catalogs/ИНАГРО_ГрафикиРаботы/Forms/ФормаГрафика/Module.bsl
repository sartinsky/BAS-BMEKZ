#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	Если Параметры.Ключ.Пустая() Тогда
		НомерТекущегоГода = Год(ТекущаяДатаСеанса());
		
		Если Объект.ШаблонЗаполнения.Количество() = 0 Тогда
			ГрафикОбъект = РеквизитФормыВЗначение("Объект", Тип("СправочникОбъект.ИНАГРО_ГрафикиРаботы"));
			
			ГрафикОбъект.ЗаполнитьПараметрыГрафикаПоУмолчанию();
			
			ЗначениеВРеквизитФормы(ГрафикОбъект, "Объект");
		КонецЕсли;
		
		СоздатьСтрокиТаблицыДанныхГрафика();
		
		УстановитьИнфоНадписьНастройкиГрафика();
		
		ПрочитатьДанныеПроизводственногоКалендаряВДанныеФормы();
		
		ПриЧтенииДанныхГрафикаВФорму();
	КонецЕсли;
	
	УстановитьУсловноеОформление();
	КоличествоВидовВремени = 3;
	Если Объект.Смены.Итог("ЧасыВечерние") = 0 Тогда
		КоличествоВидовВремени = КоличествоВидовВремени - 1;
	КонецЕсли;
	
	Если Объект.Смены.Итог("ЧасыНочные") = 0 Тогда
		КоличествоВидовВремени = КоличествоВидовВремени - 1;
	КонецЕсли;
	
	УстановитьСвойстваЭлементовВводаВремени(КоличествоВидовВремени);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды 

	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	Если НомерТекущегоГода = 0 Тогда
		НомерТекущегоГода = Год(ТекущаяДатаСеанса());
	КонецЕсли;
	Если ДанныеГрафика.Количество() = 0 Тогда
		СоздатьСтрокиТаблицыДанныхГрафика();
	Иначе
		ИзменитьСоставВидовВремени();
	КонецЕсли;
	
	ПрочитатьДанныеГрафикаВФорму();
	
	ПриЧтенииДанныхГрафикаВФорму();
	
	УстановитьИнфоНадписьНастройкиГрафика();
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ДанныеПроизводственногоКалендаря = РегистрыСведений.ИНАГРО_РегламентированныйПроизводственныйКалендарь.ДанныеПроизводственногоКалендаря(НомерТекущегоГода);
	ИНАГРО_УчетРабочегоВремени.ЗаписатьДанныеГрафика(ТекущийОбъект.Ссылка, ДанныеГрафика, НомерТекущегоГода, ДанныеПроизводственногоКалендаря);
	
	МодифицированностьДанныхГрафика = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	ПроверитьСоответствиеРегистрируемыхЧасовДлинеСуток(Отказ);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура НомерТекущегоГодаРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если МодифицированностьДанныхГрафика Тогда
		ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru = 'Данные графика за %1 год были изменены. Сохранить данные графика?';uk='Дані графіка за %1 рік були змінені. Зберегти дані графіка?'"),
							Формат(НомерТекущегоГода, "ЧГ="));
		Оповещение = Новый ОписаниеОповещения("НомерТекущегоГодаРегулированиеЗавершение", ЭтотОбъект, Направление);					
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);					
	Иначе 
		НомерТекущегоГодаРегулированиеЗавершение(Неопределено, Направление);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НомерТекущегоГодаРегулированиеЗавершение(Ответ, Направление) Экспорт 
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		Записать();
		
		Если МодифицированностьДанныхГрафика Тогда
			Возврат;
		КонецЕсли;	
	КонецЕсли;
	
	МодифицированностьДанныхГрафика = Ложь;
	
	НомерТекущегоГода = НомерТекущегоГода + 1 * Направление;
	ПрочитатьДанныеГрафикаВФорму();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТабличноеПолеГрафика

&НаКлиенте
Процедура ТабличноеПолеГрафикаПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если ОтменаРедактирования Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаГрафика = Элементы.ТабличноеПолеГрафика.ТекущиеДанные; 
	
	ИНАГРО_УчетРабочегоВремениКлиентСервер.ДанныеГрафикаРассчитатьИтогоПоСтроке(СтрокаГрафика);
	
	Для Сч = 1 По 31 Цикл
		ЧасовЗаДень = СтрокаГрафика["День" + Формат(Сч, "ЧГ=")];
		
		СтрокаГрафика["Целое" + Формат(Сч, "ЧГ=")] = ЧасовЗаДень - Цел(ЧасовЗаДень) = 0;
	КонецЦикла;	
	СтрокаГрафика.ИтогЧасыЦелое = СтрокаГрафика.ИтогЧасы - Цел(СтрокаГрафика.ИтогЧасы) = 0;
	
КонецПроцедуры

&НаКлиенте
Процедура ТабличноеПолеГрафикаПриИзменении(Элемент)
	МодифицированностьДанныхГрафика = Истина;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Печать(Команда)
	
	Если Объект.Ссылка.Пустая() Тогда
		Обработчик = Новый ОписаниеОповещения("ПечатьЗавершение", ЭтотОбъект);
		ПоказатьВопрос(Обработчик,НСтр("ru='Данные графика еще не записаны. Печать возможна только после записи данных. Записать?';uk='Дані графіка ще не записані. Друк можливий тільки після запису даних. Записати?'"),
						РежимДиалогаВопрос.ДаНет,
						,
						КодВозвратаДиалога.Да);
		Возврат;
	КонецЕсли;
	
	ПечатьЗавершение(-1);
		
КонецПроцедуры

&НаКлиенте
Процедура Заполнить(Команда)
	
	Если Объект.Смены.Количество() = 0 Тогда
		ТекстВопроса = НСтр("ru = 'Не заполнены настройки графика. Перейти к настройкам?';uk='Не заповнені налаштування графіка. Перейти до налаштувань?'");
		Оповещение = Новый ОписаниеОповещения("ЗаполнитьЗавершение", ЭтотОбъект);					
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	ИначеЕсли Не РегламентированныйКалендарьЗаполнен(НомерТекущегоГода) Тогда
		ОбщегоНазначенияБПКлиентСервер.СообщитьОбОшибке(НСтр("ru = 'Перед формированием графика необходимо заполнить Регламентированный производственный календарь за указанный период';uk='Перед формуванням графіку необхідно заповнити Регламентований виробничий календар за вказаний період'"));
	Иначе
		ЗаполнитьГрафикНаСервере();
		МодифицированностьДанныхГрафика = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЗавершение(Ответ, ДополнительныеПараметры) Экспорт 
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ИзменитьНастройкиЗаполненияГрафика();	
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ПриЧтенииДанныхГрафикаВФорму()
	Для Каждого СтрокаГрафика Из ДанныеГрафика Цикл
		Для Сч = 1 По 31 Цикл
			ЧасовЗаДень = СтрокаГрафика["День" + Формат(Сч, "ЧГ=")];
			
			СтрокаГрафика["Целое" + Формат(Сч, "ЧГ=")] = ЧасовЗаДень - Цел(ЧасовЗаДень) = 0;
		КонецЦикла;	
		СтрокаГрафика.ИтогЧасыЦелое = СтрокаГрафика.ИтогЧасы - Цел(СтрокаГрафика.ИтогЧасы) = 0;
	КонецЦикла;	
КонецПроцедуры	

&НаСервере
Процедура УстановитьСвойстваЭлементовВводаВремени(КоличествоВидовВремени)
	ВысотаЭлемента = ?(КоличествоВидовВремени = 1, 2, 1);
	
	Для НомерДня = 1 По 31 Цикл
		Элементы["ТабличноеПолеГрафикаДень1"].Высота = ВысотаЭлемента;		
	КонецЦикла;	
	
	Элементы.ТабличноеПолеГрафикаВидВремени.Высота = ВысотаЭлемента;
	Элементы.ТабличноеПолеГрафикаМесяц.Высота = ВысотаЭлемента;	
КонецПроцедуры	

&НаСервере
Процедура ПрочитатьДанныеПроизводственногоКалендаряВДанныеФормы()
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Год", НомерТекущегоГода);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДанныеПроизводственногоКалендаря.ДатаКалендаря КАК Дата,
	|	ДанныеПроизводственногоКалендаря.Год,
	|	ДанныеПроизводственногоКалендаря.ВидДня,
	|	НАЧАЛОПЕРИОДА(ДанныеПроизводственногоКалендаря.ДатаКалендаря, МЕСЯЦ) КАК Месяц
	|ИЗ
	|	РегистрСведений.ИНАГРО_РегламентированныйПроизводственныйКалендарь КАК ДанныеПроизводственногоКалендаря
	|ГДЕ
	|	ДанныеПроизводственногоКалендаря.Год = &Год
	|
	|УПОРЯДОЧИТЬ ПО
	|	Месяц,
	|	Дата";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.СледующийПоЗначениюПоля("Месяц") Цикл
		СтрокиГрафика = ДанныеГрафика.НайтиСтроки(Новый Структура("НомерМесяца", Месяц(Выборка.Месяц)));
		
		Пока Выборка.Следующий() Цикл
			НомерДня = День(Выборка.Дата);	
			
			Для Каждого СтрокаДанныхГрафика Из СтрокиГрафика Цикл
				СтрокаДанныхГрафика["ВидДня" + НомерДня] = Выборка.ВидДня;				
			КонецЦикла;	
		КонецЦикла;
	КонецЦикла;	
КонецПроцедуры	

&НаСервере
Процедура УстановитьУсловноеОформление()
	Для НомерДня = 1 По 31 Цикл
		ЭлементФормления = УсловноеОформление.Элементы.Добавить();
		
		ЦветВыходногоДня = ЦветаСтиля.СобытиеОтказ;
		
		ЭлементФормления.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветВыходногоДня);
		
		ОформляемоеПоле = ЭлементФормления.Поля.Элементы.Добавить();
		ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ТабличноеПолеГрафикаДень" + НомерДня);
		
		ГруппаОтбора = ЭлементФормления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
		ГруппаОтбора.Использование = Истина;
		ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
		
		ЭлементОтбора = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.Использование = Истина;
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДанныеГрафика.ВидДня" + НомерДня);
		ЭлементОтбора.ПравоеЗначение = Перечисления.ИНАГРО_ВидыДнейПроизводственногоКалендаря.Суббота;
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		
		ЭлементОтбора = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.Использование = Истина;
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДанныеГрафика.ВидДня" + НомерДня);
		ЭлементОтбора.ПравоеЗначение = Перечисления.ИНАГРО_ВидыДнейПроизводственногоКалендаря.Воскресенье;
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		
		ЭлементОтбора = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.Использование = Истина;
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДанныеГрафика.ВидДня" + НомерДня);
		ЭлементОтбора.ПравоеЗначение = Перечисления.ИНАГРО_ВидыДнейПроизводственногоКалендаря.Праздник;
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		
		ЭлементФормления = УсловноеОформление.Элементы.Добавить();
		
		ЭлементФормления.Оформление.УстановитьЗначениеПараметра("Формат", "ЧДЦ=0");
		
		ОформляемоеПоле = ЭлементФормления.Поля.Элементы.Добавить();
		ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ТабличноеПолеГрафикаДень" + НомерДня);
						
		ЭлементОтбора = ЭлементФормления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.Использование = Истина;
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДанныеГрафика.Целое" + НомерДня);
		ЭлементОтбора.ПравоеЗначение = Истина;
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;

	КонецЦикла;	
		
	ЭлементФормления = УсловноеОформление.Элементы.Добавить();
	
	ЭлементФормления.Оформление.УстановитьЗначениеПараметра("Формат", "ЧДЦ=0");
	
	ОформляемоеПоле = ЭлементФормления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ТабличноеПолеГрафикаИтогЧасы");
					
	ЭлементОтбора = ЭлементФормления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.Использование = Истина;
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДанныеГрафика.ИтогЧасыЦелое");
	ЭлементОтбора.ПравоеЗначение = Истина;
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;

КонецПроцедуры	

&НаСервере
Процедура СоздатьСтрокиТаблицыДанныхГрафика()
	Для НомерМесяца = 1 По 12 Цикл
			ДобавитьСтрокуВТаблицуДанныхГрафика(НомерМесяца, Справочники.ИНАГРО_КлассификаторИспользованияРабочегоВремени.Работа, 1);
			Если Объект.Смены.Итог("ЧасыВечерние") > 0 Тогда
				ДобавитьСтрокуВТаблицуДанныхГрафика(НомерМесяца, Справочники.ИНАГРО_КлассификаторИспользованияРабочегоВремени.Вечерние, 2);
			КонецЕсли;
			Если Объект.Смены.Итог("ЧасыНочные") > 0 Тогда
				ДобавитьСтрокуВТаблицуДанныхГрафика(НомерМесяца, Справочники.ИНАГРО_КлассификаторИспользованияРабочегоВремени.Ночные, 3);
			КонецЕсли;
	КонецЦикла;		
	Элементы.ТабличноеПолеГрафика.ВысотаВСтрокахТаблицы = 12; //* Объект.ВидыВремени.Количество();
КонецПроцедуры	

&НаСервере
Процедура ПрочитатьДанныеГрафикаВФорму()
	Для Каждого ДанныеГрафикаЗаМесяц Из ДанныеГрафика Цикл 
		Для НомерДня = 1 По 31 Цикл 
			ДанныеГрафикаЗаМесяц["День" + НомерДня] = 0; 	
			ДанныеГрафикаЗаМесяц["ВидДня" + НомерДня] = Перечисления.ИНАГРО_ВидыДнейПроизводственногоКалендаря.ПустаяСсылка();
		КонецЦикла;	
		ДанныеГрафикаЗаМесяц.ИтогДни = 0;
		ДанныеГрафикаЗаМесяц.ИтогЧасы = 0;
		ДанныеГрафикаЗаМесяц.КоличествоДнейВМесяце = ИНАГРО_УчетРабочегоВремениКлиентСервер.КоличествоДнейМесяца(Дата(НомерТекущегоГода, ДанныеГрафикаЗаМесяц.НомерМесяца, 1));
	КонецЦикла;	
	
	МассивВидовВремени = Новый Массив;
	МассивВидовВремени.Добавить(Перечисления.ИНАГРО_ВидыУчетаВремени.ПоЧасам);
	МассивВидовВремени.Добавить(Перечисления.ИНАГРО_ВидыУчетаВремени.ПоВечернимЧасам);
	МассивВидовВремени.Добавить(Перечисления.ИНАГРО_ВидыУчетаВремени.ПоНочнымЧасам);
	
	
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ГрафикРаботы", Объект.Ссылка);
	Запрос.УстановитьПараметр("ДатаНачала", Дата(НомерТекущегоГода, 1, 1));
	Запрос.УстановитьПараметр("ДатаОкончания", Дата(НомерТекущегоГода, 12, 31));
	Запрос.УстановитьПараметр("СписокВидовВремени", МассивВидовВремени);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ГрафикиРаботыПоВидамВремени.ГрафикРаботы КАК ГрафикРаботы,
	|	ГрафикиРаботыПоВидамВремени.Дата КАК Дата,
	|	ГрафикиРаботыПоВидамВремени.ВидУчетаВремени КАК ВидУчетаВремени,
	|	НАЧАЛОПЕРИОДА(ГрафикиРаботыПоВидамВремени.Дата, МЕСЯЦ) КАК Месяц,
	|	ГрафикиРаботыПоВидамВремени.ОсновноеЗначение,
	|	ГрафикиРаботыПоВидамВремени.ДополнительноеЗначение
	|ИЗ
	|	РегистрСведений.ИНАГРО_ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботыПоВидамВремени
	|ГДЕ
	|	ГрафикиРаботыПоВидамВремени.ГрафикРаботы = &ГрафикРаботы
	|	И ГрафикиРаботыПоВидамВремени.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
	|	И ГрафикиРаботыПоВидамВремени.ВидУчетаВремени В(&СписокВидовВремени)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Месяц,
	|	ВидУчетаВремени,
	|	Дата";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.СледующийПоЗначениюПоля("Месяц") Цикл
		Пока Выборка.СледующийПоЗначениюПоля("ВидУчетаВремени") Цикл
			Если Выборка.ВидУчетаВремени = Перечисления.ИНАГРО_ВидыУчетаВремени.ПоЧасам Тогда
				ВидВремени = Справочники.ИНАГРО_КлассификаторИспользованияРабочегоВремени.Работа;
			ИначеЕсли Выборка.ВидУчетаВремени = Перечисления.ИНАГРО_ВидыУчетаВремени.ПоВечернимЧасам Тогда
				ВидВремени = Справочники.ИНАГРО_КлассификаторИспользованияРабочегоВремени.Вечерние;
			ИначеЕсли Выборка.ВидУчетаВремени = Перечисления.ИНАГРО_ВидыУчетаВремени.ПоНочнымЧасам Тогда
				ВидВремени = Справочники.ИНАГРО_КлассификаторИспользованияРабочегоВремени.Ночные;
			КонецЕсли;
			
			СтруктураПоиска = Новый Структура("НомерМесяца, ВидВремени", Месяц(Выборка.Месяц), ВидВремени);
			Попытка
				ЗаполняемаяСтрока = ДанныеГрафика.НайтиСтроки(СтруктураПоиска)[0];
				Пока Выборка.Следующий() Цикл
					НомерДня = День(Выборка.Дата);
					ЗаполняемаяСтрока["День" + НомерДня] = Выборка.ОсновноеЗначение;	
				КонецЦикла;
				ИНАГРО_УчетРабочегоВремениКлиентСервер.ДанныеГрафикаРассчитатьИтогоПоСтроке(ЗаполняемаяСтрока);
			Исключение
			КонецПопытки;
		КонецЦикла;
	КонецЦикла;		
	
	ПрочитатьДанныеПроизводственногоКалендаряВДанныеФормы();
	
	ПриЧтенииДанныхГрафикаВФорму()
	
КонецПроцедуры	

&НаСервере
Процедура ИзменитьСоставВидовВремени()
	Для НомерМесяца = 1 По 12 Цикл
		Если Объект.Смены.Итог("ЧасыВечерние") > 0 Тогда
			СтруктураПоиска = Новый Структура("НомерМесяца, ВидВремени", НомерМесяца, ПредопределенноеЗначение("Справочник.ИНАГРО_КлассификаторИспользованияРабочегоВремени.Вечерние"));
			НайденныеСтроки = ДанныеГрафика.НайтиСтроки(СтруктураПоиска);
			Если НайденныеСтроки.Количество() = 0 Тогда
				ДобавитьСтрокуВТаблицуДанныхГрафика(НомерМесяца, ПредопределенноеЗначение("Справочник.ИНАГРО_КлассификаторИспользованияРабочегоВремени.Вечерние"), 2);
			КонецЕсли;
		КонецЕсли;
		Если Объект.Смены.Итог("ЧасыНочные") > 0 Тогда
			СтруктураПоиска = Новый Структура("НомерМесяца, ВидВремени", НомерМесяца, ПредопределенноеЗначение("Справочник.ИНАГРО_КлассификаторИспользованияРабочегоВремени.Ночные"));
			НайденныеСтроки = ДанныеГрафика.НайтиСтроки(СтруктураПоиска);
			Если НайденныеСтроки.Количество() = 0 Тогда
				ДобавитьСтрокуВТаблицуДанныхГрафика(НомерМесяца, ПредопределенноеЗначение("Справочник.ИНАГРО_КлассификаторИспользованияРабочегоВремени.Ночные"), 3);
			КонецЕсли;	
		КонецЕсли;
		
	КонецЦикла;	
	КоличествоВидовВремени = 3;
	УдаляемыеСтроки = Новый Массив;
	Если Объект.Смены.Итог("ЧасыВечерние") = 0 Тогда
		КоличествоВидовВремени = КоличествоВидовВремени - 1;
		Для Каждого СтрокаТаблицыДанныеГрафика Из ДанныеГрафика Цикл
			 Если  СтрокаТаблицыДанныеГрафика.ВидВремени = ПредопределенноеЗначение("Справочник.ИНАГРО_КлассификаторИспользованияРабочегоВремени.Вечерние") Тогда 
				УдаляемыеСтроки.Добавить(СтрокаТаблицыДанныеГрафика);
			КонецЕсли;	
		КонецЦикла;	
	КонецЕсли;
	Если Объект.Смены.Итог("ЧасыНочные") = 0 Тогда
		КоличествоВидовВремени = КоличествоВидовВремени - 1;
		Для Каждого СтрокаТаблицыДанныеГрафика Из ДанныеГрафика Цикл
			 Если  СтрокаТаблицыДанныеГрафика.ВидВремени = ПредопределенноеЗначение("Справочник.ИНАГРО_КлассификаторИспользованияРабочегоВремени.Ночные") Тогда 
				УдаляемыеСтроки.Добавить(СтрокаТаблицыДанныеГрафика);
			КонецЕсли;	
		КонецЦикла;	
	КонецЕсли;
	
	Для Каждого УдаляемаяСтрока Из УдаляемыеСтроки Цикл
		ДанныеГрафика.Удалить(ДанныеГрафика.Индекс(УдаляемаяСтрока));		
	КонецЦикла;	
	
	ДанныеГрафика.Сортировать("НомерМесяца,ПорядокВидаВремени");
	
	УстановитьСвойстваЭлементовВводаВремени(КоличествоВидовВремени);
	
КонецПроцедуры	

&НаСервере
Процедура ДобавитьСтрокуВТаблицуДанныхГрафика(НомерМесяца, ВидВремени, ПорядокВидаВремени)
	СтрокаТаблицы = ДанныеГрафика.Добавить();
	СтрокаТаблицы.НомерМесяца = НомерМесяца;
	СтрокаТаблицы.ВидВремени = ВидВремени;
	СтрокаТаблицы.ПорядокВидаВремени = ПорядокВидаВремени;
	СтрокаТаблицы.МесяцПредставление = Формат(Дата(НомерТекущегоГода, НомерМесяца, 1), "ДФ=ММММ");	
	СтрокаТаблицы.КоличествоДнейВМесяце = ИНАГРО_УчетРабочегоВремениКлиентСервер.КоличествоДнейМесяца(Дата(НомерТекущегоГода, НомерМесяца, 1));
	
КонецПроцедуры	

&НаКлиенте
Процедура ИзменитьНастройкиЗаполненияГрафика()
	
	Оповещение = Новый ОписаниеОповещения("ИзменитьНастройкиЗаполненияГрафикаЗавершение", ЭтотОбъект);
	ПолучитьНастройкиЗаполненияГрафика(Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьНастройкиЗаполненияГрафикаЗавершение(НастройкиЗаполненияГрафика, ДополнительныеПараметры) Экспорт 
	
	Если НастройкиЗаполненияГрафика <> Неопределено Тогда
		ЗаполнитьДанныеОбъектаИзНастроек(НастройкиЗаполненияГрафика);
		Модифицированность = Истина;
		МодифицированностьДанныхГрафика = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьНастройкиЗаполненияГрафика(ОбработкаОповещения) 

	ИспользуемыеВидыВремени = Новый Массив;
		
	ПараметрыОткрываемойФормы = Новый Структура;
	ПараметрыОткрываемойФормы.Вставить("ВидГрафика",                          Объект.ВидГрафика);
	ПараметрыОткрываемойФормы.Вставить("ДлительностьРабочейНедели",           Объект.ДлительностьРабочейНедели);
	ПараметрыОткрываемойФормы.Вставить("ЧасыПоДнямЦикла",                     ИНАГРО_УчетРабочегоВремениКлиентСервер.ДанныеГрафикаЧасыПоДнямЦикла(Объект.ШаблонЗаполнения, Объект.Смены));
	ПараметрыОткрываемойФормы.Вставить("ДатаОтсчета",                         Объект.ДатаОтсчета);
	ПараметрыОткрываемойФормы.Вставить("НеполноеРабочееВремя",                Объект.НеполноеРабочееВремя);
	ПараметрыОткрываемойФормы.Вставить("ГрафикРаботыНормыВремени",            Объект.ГрафикРаботыНормыВремени);
	ПараметрыОткрываемойФормы.Вставить("СуммированныйУчетРабочегоВремени",    Объект.СуммированныйУчетРабочегоВремени);
	ПараметрыОткрываемойФормы.Вставить("УчетНормыВремениПоОтдельномуГрафику", Объект.УчетНормыВремениПоОтдельномуГрафику);
	ПараметрыОткрываемойФормы.Вставить("Ссылка",                              Объект.Ссылка);
	ПараметрыОткрываемойФормы.Вставить("СменыПоДнямЦикла",                    СменыПоДнямЦикла());
	
	ДополнительныеПараметры = Новый Структура("ОбработкаОповещения", ОбработкаОповещения);
	Оповещение = Новый ОписаниеОповещения("ПолучитьНастройкиЗаполненияГрафикаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ОткрытьФорму("Справочник.ИНАГРО_ГрафикиРаботы.Форма.НастройкаНовогоГрафикаРаботы", ПараметрыОткрываемойФормы, , , , ,
		Оповещение, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);	
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьНастройкиЗаполненияГрафикаЗавершение(НастройкиЗаполненияГрафика, ДополнительныеПараметры) Экспорт 
	
	Если ДополнительныеПараметры <> Неопределено И ДополнительныеПараметры.ОбработкаОповещения <> Неопределено Тогда 
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОбработкаОповещения, НастройкиЗаполненияГрафика);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеОбъектаИзНастроек(Настройки)
	
	Объект.ВидГрафика = Настройки.ВидГрафика;
	Объект.ДлительностьРабочейНедели = Настройки.ДлительностьРабочейНедели;
	Объект.ДатаОтсчета = Настройки.ДатаОтсчета;
	Объект.ГрафикРаботыНормыВремени = Настройки.ГрафикРаботыНормыВремени;
	Объект.УчетНормыВремениПоОтдельномуГрафику = Настройки.УчетНормыВремениПоОтдельномуГрафику;
	Объект.СуммированныйУчетРабочегоВремени = Настройки.СуммированныйУчетРабочегоВремени;
	
	Объект.ШаблонЗаполнения.Очистить();
	Объект.Смены.Очистить();
	
	КоличествоДнейЦикла = Настройки.ЧасыПоДнямЦикла.Количество();
	
	Для НомерДня = 1 По КоличествоДнейЦикла Цикл
		СтрокаШаблона = Объект.ШаблонЗаполнения.Добавить();
		
		ВремяЗаДень =  Настройки.ЧасыПоДнямЦикла.Получить(НомерДня);
		СменаДня	= Настройки.СменыПоДнямЦикла.Получить(НомерДня);
		
		СтрокаШаблона.ДеньВключенВГрафик = Ложь;
		
		Если ВремяЗаДень <> Неопределено И ВремяЗаДень.Количество() > 0 Тогда
			СчетчикВидаВремени = 0;
			Пока СчетчикВидаВремени < 3 Цикл 
				СтрокаДанныхОВремени = Объект.Смены.Добавить();
				СтрокаДанныхОВремени.Смена = СменаДня;
				Для Каждого ЧасыПоВидуВремени Из ВремяЗаДень Цикл
					
					СтрокаДанныхОВремени.НомерДня 		= НомерДня;
					Если ЧасыПоВидуВремени.Ключ = ПредопределенноеЗначение("Справочник.ИНАГРО_КлассификаторИспользованияРабочегоВремени.Работа") Тогда
						СтрокаДанныхОВремени.Часы			= ЧасыПоВидуВремени.Значение;
					КонецЕсли;
					
					Если ЧасыПоВидуВремени.Ключ = ПредопределенноеЗначение("Справочник.ИНАГРО_КлассификаторИспользованияРабочегоВремени.Вечерние") Тогда
						СтрокаДанныхОВремени.ЧасыВечерние 	= ЧасыПоВидуВремени.Значение;
					КонецЕсли;
					
					Если ЧасыПоВидуВремени.Ключ = ПредопределенноеЗначение("Справочник.ИНАГРО_КлассификаторИспользованияРабочегоВремени.Ночные") Тогда
						СтрокаДанныхОВремени.ЧасыНочные 	= ЧасыПоВидуВремени.Значение;
					КонецЕсли;
					СчетчикВидаВремени = СчетчикВидаВремени + 1;
				КонецЦикла;
				Если СтрокаДанныхОВремени.Часы > 0 Тогда 
					СтрокаШаблона.ДеньВключенВГрафик = Истина;
				КонецЕсли;	
				
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;	
	
	ИзменитьСоставВидовВремени();
	ПрочитатьДанныеПроизводственногоКалендаряВДанныеФормы();
	УстановитьИнфоНадписьНастройкиГрафика();
	
	ЗаполнитьГрафикНаСервере();
КонецПроцедуры	

&НаСервере
Процедура ЗаполнитьГрафикНаСервере()
	
	Если Объект.ВидГрафика = ПредопределенноеЗначение("Перечисление.ВидыРабочихГрафиков.Сменный")
		И Год(Объект.ДатаОтсчета) > НомерТекущегоГода Тогда
		
		ТекстСообщения = НСтр("ru = 'График не может быть заполнен на период, предшествующий указанной в нем дате отсчета.';uk='Графік не може бути заповнений на період, що передує вказаній в ньому даті відліку'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
		Возврат;
		
	КонецЕсли;	

	ОчиститьДанныеГрафика();
	ГрафикОбъект = РеквизитФормыВЗначение("Объект", Тип("СправочникОбъект.ИНАГРО_ГрафикиРаботы"));
	ГрафикОбъект.ЗаполнитьДанныеГрафика(ДанныеГрафика, НомерТекущегоГода);
	
	ПриЧтенииДанныхГрафикаВФорму();
	
КонецПроцедуры		

&НаСервере
Процедура ОчиститьДанныеГрафика()
	Для Каждого СтрокаДанныхГрафика Из ДанныеГрафика Цикл
		Для НомерДня = 1 По 31 Цикл
			СтрокаДанныхГрафика["День" + НомерДня] = 0;						
		КонецЦикла;	
		СтрокаДанныхГрафика.ИтогДни = 0;
		СтрокаДанныхГрафика.ИтогЧасы = 0;
	КонецЦикла;	
КонецПроцедуры	

&НаСервере
Процедура УстановитьИнфоНадписьНастройкиГрафика()
	ТекстОписанияГрафикаРаботы	= Справочники.ИНАГРО_ГрафикиРаботы.ТекстОписанияГрафикаРаботы(Объект);							  
									  
	ИнфоНадписьНастройкиГрафика = ТекстОписанияГрафикаРаботы;	
КонецПроцедуры	

&НаКлиенте
Процедура ИзменитьСвойстваГрафика(Команда)
	
	ИзменитьНастройкиЗаполненияГрафика();

КонецПроцедуры

&НаСервере
Функция СменыПоДнямЦикла()
	
	СменыПоДнямЦикла = Новый Соответствие;
	Для Каждого ДеньЦикла Из Объект.Смены Цикл
		СменыПоДнямЦикла.Вставить(ДеньЦикла.НомерДня, ДеньЦикла.Смена);
	КонецЦикла;	
		
	Возврат СменыПоДнямЦикла;
	
КонецФункции	

&НаСервере
Процедура ПроверитьСоответствиеРегистрируемыхЧасовДлинеСуток(Отказ)
	ШаблонОшибки = НСтр("ru = 'На %1 запланировано более 24-х часов.';uk='На %1 заплановано більше 24-х годин.'");
	Для НомерМесяца = 1 По 12 Цикл 
		СтрокиДанныхЗМесяц = ДанныеГрафика.НайтиСтроки(Новый Структура("НомерМесяца", НомерМесяца));
		
		КонецОбрабатываемогоМесяца = КонецМесяца(Дата(НомерТекущегоГода, НомерМесяца, 1)); 
		
		КоличествоДнейВМесяце = День(КонецОбрабатываемогоМесяца);
		
		Для НомерДня = 1 По КоличествоДнейВМесяце Цикл
			ЧасовЗаДень = 0;
			ИндексПоследнейСтроки = -1;
			
			Для Каждого СтрокаГрафика Из СтрокиДанныхЗМесяц Цикл
				Если СтрокаГрафика.ВидВремени = Справочники.ИНАГРО_КлассификаторИспользованияРабочегоВремени.Работа Тогда
					ЧасовЗаДень = ЧасовЗаДень + СтрокаГрафика["День" + НомерДня];
					
					Если ДанныеГрафика.Индекс(СтрокаГрафика) > ИндексПоследнейСтроки Тогда
						ИндексПоследнейСтроки = ДанныеГрафика.Индекс(СтрокаГрафика);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;	
			
			Если ЧасовЗаДень > 24 Тогда				
				ТекущаяДатаСтрокой = Формат(Дата(НомерТекущегоГода, НомерМесяца, НомерДня), "ДЛФ=DD");  
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонОшибки, ТекущаяДатаСтрокой);
				
				Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ДанныеГрафика", ИндексПоследнейСтроки + 1, "День" + НомерДня);
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстОшибки,,
					Поле,,
					Отказ);
					
			КонецЕсли;	
			
		КонецЦикла;	
	КонецЦикла;		
КонецПроцедуры	

&НаСервере
Функция РегламентированныйКалендарьЗаполнен(Год)  
		
	Запрос = Новый Запрос();
	
	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ИНАГРО_РегламентированныйПроизводственныйКалендарь.Год
	               |ИЗ
	               |	РегистрСведений.ИНАГРО_РегламентированныйПроизводственныйКалендарь КАК ИНАГРО_РегламентированныйПроизводственныйКалендарь
	               |ГДЕ
	               |	ИНАГРО_РегламентированныйПроизводственныйКалендарь.Год = &Год";
	
	Запрос.Текст = ТекстЗапроса;					   
	Запрос.УстановитьПараметр("Год", Год);
	Выборка = Запрос.Выполнить().Выбрать();
	КалендарьЗаполнен = Ложь;
	Если Выборка.Следующий() Тогда
		КалендарьЗаполнен = Истина;
	КонецЕсли;
	
	Возврат КалендарьЗаполнен;
	
КонецФункции // РегламентированныйКалендарьЗаполнен()

&НаКлиенте
Процедура ПечатьЗавершение(ОтветНаПредложениеЗаписать, ПараметрыВыполнения = Неопределено) Экспорт
	
	Если ОтветНаПредложениеЗаписать <> -1 Тогда
		Если ОтветНаПредложениеЗаписать <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли;
		Записан = Записать();
		Если Не Записан Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыПечати = Новый Структура;
	ПараметрыПечати.Вставить("ГрафикРаботы", Объект.Ссылка);
	ПараметрыПечати.Вставить("НомерГода", НомерТекущегоГода);
	
	ПараметрКоманды = Новый Массив;
	ПараметрКоманды.Добавить(Объект.Ссылка);
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.Печать") Тогда
		МодульУправлениеПечатьюКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеПечатьюКлиент");
		МодульУправлениеПечатьюКлиент.ВыполнитьКомандуПечати("Справочник.ИНАГРО_ГрафикиРаботы", "ГрафикРаботы", 
			ПараметрКоманды, ЭтотОбъект, ПараметрыПечати);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункцииБСП

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти