#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)	
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	ПараметрыВДанныеФормы();
	
	УстановитьНастройкиТаблицыРасписаниеРаботы();
	
	Если  (Параметры.Свойство("ЧасыПоДнямЦикла")  И ЗначениеЗаполнено(Параметры.ЧасыПоДнямЦикла))
		И (Параметры.Свойство("СменыПоДнямЦикла") И ЗначениеЗаполнено(Параметры.СменыПоДнямЦикла)) Тогда
		ЗаполнитьРасписаниеРаботыИзНастроек(Параметры.ЧасыПоДнямЦикла, Параметры.СменыПоДнямЦикла);
	КонецЕсли;	
	
	НастроитьДоступностьЭлементов(ЭтаФорма);
	
	УстановитьЭлементыНастройкиЗаполнения(ЭтотОбъект);	
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ЗавершениеРаботы И Модифицированность Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("СохранитьИЗакрыть", ЭтотОбъект);
	ОбщегоНазначенияКлиент.ПоказатьПодтверждениеЗакрытияФормы(Оповещение, Отказ, ЗавершениеРаботы, ТекстПредупреждения);
		
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ВидГрафикаПриИзменении(Элемент)
	УстановитьЭлементыНастройкиЗаполнения(ЭтотОбъект);
	
	ДлительностьРабочейНедели = 40;
	УстановитьНастройкиТаблицыРасписаниеРаботы(); 	
	//
	ЗаполнитьСтрокиРасписанияКалендаряПоУмолчанию();
	НастроитьДоступностьЭлементов(ЭтаФорма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьЭлементыНастройкиЗаполнения(Форма)
	
	ДоступностьНастройки = Форма.ВидГрафика = ПредопределенноеЗначение("Перечисление.ВидыРабочихГрафиков.Сменный");
	
	Форма.Элементы.ДатаОтсчета.ТолькоПросмотр = Не ДоступностьНастройки;
	
	Форма.Элементы.ДатаОтсчета.АвтоОтметкаНезаполненного = ДоступностьНастройки;
	Форма.Элементы.ДатаОтсчета.ОтметкаНезаполненного = ДоступностьНастройки И Не ЗначениеЗаполнено(Форма.ДатаОтсчета);
	
КонецПроцедуры

&НаКлиенте
Процедура СчитатьНормуПоДругомуГрафикуПриИзменении(Элемент)
	НастроитьДоступностьЭлементов(ЭтаФорма);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыРасписаниеРаботы

&НаКлиенте
Процедура РасписаниеРаботыДеньПриИзменении(Элемент)
	ДанныеТекущейСтроки = Элементы.РасписаниеРаботы.ТекущиеДанные;
	ДанныеТекущейСтроки.НомерДняПредставление = ПредставленияДняЦикла(ДанныеТекущейСтроки.НомерДняЦикла, ВидГрафика);	
КонецПроцедуры

&НаКлиенте
Процедура РасписаниеРаботыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока Тогда
		ДанныеТекущейСтроки = Элементы.РасписаниеРаботы.ТекущиеДанные;
		ДанныеТекущейСтроки.НомерДняЦикла = РасписаниеРаботы.Количество();
		ДанныеТекущейСтроки.НомерДняПредставление = ПредставленияДняЦикла(ДанныеТекущейСтроки.НомерДняЦикла, ВидГрафика)
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура РасписаниеРаботыПриИзменении(Элемент)
	ЭтоНедельныйГрафик = ВидГрафика <> ПредопределенноеЗначение("Перечисление.ВидыРабочихГрафиков.Сменный");
	
	НомерДня = 0;
	
	Если ЭтоНедельныйГрафик Тогда
		ДлительностьРабочейНедели = 0;
	КонецЕсли;	
	
	Для Каждого СтрокаРасписания Из РасписаниеРаботы Цикл
		НомерДня = НомерДня + 1;
		СтрокаРасписания.НомерДняЦикла = НомерДня;
		СтрокаРасписания.НомерДняПредставление = ПредставленияДняЦикла(НомерДня, ВидГрафика);;
		
		Если ЭтоНедельныйГрафик Тогда 
			ДлительностьРабочейНедели = ДлительностьРабочейНедели + СтрокаРасписания.Часы;
		КонецЕсли;	
		
	КонецЦикла;		
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Готово(Команда)
	СохранитьИЗакрыть();	
КонецПроцедуры

&НаКлиенте
Процедура Отмена(Команда)
	Модифицированность = Ложь;
	Закрыть();
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура СохранитьИЗакрыть(Результат = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт 
	Если ВидГрафика = ПредопределенноеЗначение("Перечисление.ВидыРабочихГрафиков.Сменный")
		И Не ЗначениеЗаполнено(ДатаОтсчета) Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не заполнена дата отсчета.';uk='Не заповнена дата відліку.'"),
													,
													"ДатаОтсчета");           	

		Возврат;													
													
	КонецЕсли;	
	
	Если ПроверитьЗаполнение() Тогда
		НастройкиГрафика = ПараметрыЗаполненияГрафика();
		Модифицированность = Ложь;
		Закрыть(НастройкиГрафика);		
	КонецЕсли;	
	
КонецПроцедуры	

&НаКлиентеНаСервереБезКонтекста
Процедура НастроитьДоступностьЭлементов(Форма)
	
	Форма.Элементы.ДатаОтсчета.Доступность = Форма.ВидГрафика = ПредопределенноеЗначение("Перечисление.ВидыРабочихГрафиков.Сменный");
	
КонецПроцедуры	

&НаСервере
Процедура ПараметрыВДанныеФормы()
	
	Параметры.Свойство("ДлительностьРабочейНедели",           ДлительностьРабочейНедели);
	Параметры.Свойство("ГрафикРаботыНормыВремени",            ГрафикРаботыНормыВремени);
	Параметры.Свойство("ДатаОтсчета",                         ДатаОтсчета);
	Параметры.Свойство("СуммированныйУчетРабочегоВремени",    СуммированныйУчетРабочегоВремени);
	Параметры.Свойство("УчетНормыВремениПоОтдельномуГрафику", УчетНормыВремениПоОтдельномуГрафику);
	Если Не Параметры.Свойство("ВидГрафика", ВидГрафика) Тогда 
		СпособЗаполнения = Перечисления.ВидыРабочихГрафиков.Пятидневка;	
	КонецЕсли;	
	Если ДлительностьРабочейНедели = 0 Тогда
		ДлительностьРабочейНедели = 40;
	КонецЕсли;
	
КонецПроцедуры	

&НаСервере
Процедура ЗаполнитьСтрокиРасписанияКалендаряПоУмолчанию()
	РасписаниеРаботы.Очистить();
	Если Не ВидГрафика = Перечисления.ВидыРабочихГрафиков.Сменный Тогда
		Для НомерДня = 1 По 7 Цикл                                    
			СтрокаРасписания = РасписаниеРаботы.Добавить();
			СтрокаРасписания.НомерДняЦикла = НомерДня;	
			СтрокаРасписания.НомерДняПредставление = ПредставленияДняЦикла(НомерДня, ВидГрафика);
			
			Если НомерДня <= 5 Тогда
				СтрокаРасписания.Часы = 8;
			КонецЕсли;	
		КонецЦикла;	
		ДлительностьРабочейНедели = 40;
	КонецЕсли;		
КонецПроцедуры	

&НаСервере
Процедура ЗаполнитьРасписаниеРаботыИзНастроек(ЧасыПоДнямЦикла, СменыПоДнямЦикла)
	
	Если ЧасыПоДнямЦикла.Количество() > 0 Тогда
		
		Для Каждого ВремяЗаДень Из ЧасыПоДнямЦикла Цикл
			
			СтрокаРасписания = РасписаниеРаботы.Добавить();
			СтрокаРасписания.НомерДняЦикла         = ВремяЗаДень.Ключ;
			СтрокаРасписания.НомерДняПредставление = ПредставленияДняЦикла(ВремяЗаДень.Ключ, ВидГрафика);
			
			СменаДня	       = СменыПоДнямЦикла.Получить(ВремяЗаДень.Ключ);
			ЧасыПоВидамВремени = ВремяЗаДень.Значение;
			
			Если ЧасыПоВидамВремени <> Неопределено И ЧасыПоВидамВремени.Количество() > 0 Тогда
				
				СтрокаРасписания.ДеньВключенВГрафик = Истина;
				СтрокаРасписания.Часы         = ЧасыПоВидамВремени.Получить(Справочники.ИНАГРО_КлассификаторИспользованияРабочегоВремени.Работа);
				СтрокаРасписания.ЧасыВечерние = ЧасыПоВидамВремени.Получить(Справочники.ИНАГРО_КлассификаторИспользованияРабочегоВремени.Вечерние);
				СтрокаРасписания.ЧасыНочные   = ЧасыПоВидамВремени.Получить(Справочники.ИНАГРО_КлассификаторИспользованияРабочегоВремени.Ночные);
				СтрокаРасписания.Смена        = СменаДня;

			КонецЕсли;
			
		КонецЦикла;	
		
		РасписаниеРаботы.Сортировать("НомерДняЦикла");
		
	Иначе
		ЗаполнитьСтрокиРасписанияКалендаряПоУмолчанию();
	КонецЕсли;	
		
КонецПроцедуры	

&НаКлиентеНаСервереБезКонтекста
Функция ПредставленияДняЦикла(НомерДня, ВидГрафика)
	Если  Не ВидГрафика = ПредопределенноеЗначение("Перечисление.ВидыРабочихГрафиков.Сменный") Тогда
		Возврат Формат(НачалоНедели('20100101') + (НомерДня - 1) * 86400, "ДФ=ддд");
	Иначе
		Возврат Формат(НомерДня, "ЧГ=");
	КонецЕсли;	
КонецФункции	

&НаСервере
Функция ЧасыПоДнямЦикла()
	ЧасыПоДнямЦикла = Новый Соответствие;
	
	Для Каждого ДеньЦикла Из РасписаниеРаботы Цикл
		ЧасыЗаДень = Новый Соответствие;
		
		ЧасыЗаДень.Вставить(Справочники.ИНАГРО_КлассификаторИспользованияРабочегоВремени.Работа, ДеньЦикла.Часы);				
		ЧасыЗаДень.Вставить(Справочники.ИНАГРО_КлассификаторИспользованияРабочегоВремени.Вечерние, ДеньЦикла.ЧасыВечерние);
		ЧасыЗаДень.Вставить(Справочники.ИНАГРО_КлассификаторИспользованияРабочегоВремени.Ночные, ДеньЦикла.ЧасыНочные);	
		ЧасыПоДнямЦикла.Вставить(ДеньЦикла.НомерДняЦикла, ЧасыЗаДень);
	КонецЦикла;	
		
	Возврат ЧасыПоДнямЦикла;
КонецФункции

&НаСервере
Функция СменыПоДнямЦикла()
	СменыПоДнямЦикла = Новый Соответствие;
	Для Каждого ДеньЦикла Из РасписаниеРаботы Цикл
		СменыПоДнямЦикла.Вставить(ДеньЦикла.НомерДняЦикла, ДеньЦикла.Смена);
	КонецЦикла;	
		
	Возврат СменыПоДнямЦикла;
КонецФункции	

&НаКлиенте
Функция ПараметрыЗаполненияГрафика()
	ИспользуемыеВидыВремени = Новый Массив;
	ИспользуемыеВидыВремени.Добавить(ПредопределенноеЗначение("Справочник.ИНАГРО_КлассификаторИспользованияРабочегоВремени.Работа"));
	Если РасписаниеРаботы.Итог("ЧасыВечерние")> 0 Тогда
		ИспользуемыеВидыВремени.Добавить(ПредопределенноеЗначение("Справочник.ИНАГРО_КлассификаторИспользованияРабочегоВремени.Вечерние"));
	КонецЕсли;
	Если РасписаниеРаботы.Итог("ЧасыНочные")> 0 Тогда
		ИспользуемыеВидыВремени.Добавить(ПредопределенноеЗначение("Справочник.ИНАГРО_КлассификаторИспользованияРабочегоВремени.Ночные"));
	КонецЕсли;
	
	ПараметрыЗаполненияГрафика = Новый Структура;
	ПараметрыЗаполненияГрафика.Вставить("ВидГрафика", ВидГрафика);
	ПараметрыЗаполненияГрафика.Вставить("ДлительностьРабочейНедели", ДлительностьРабочейНедели);
	ПараметрыЗаполненияГрафика.Вставить("ИспользуемыеВидыВремени", ИспользуемыеВидыВремени);
	ПараметрыЗаполненияГрафика.Вставить("ЧасыПоДнямЦикла", ЧасыПоДнямЦикла());
	ПараметрыЗаполненияГрафика.Вставить("ДатаОтсчета", ДатаОтсчета);
	ПараметрыЗаполненияГрафика.Вставить("ГрафикРаботыНормыВремени", ГрафикРаботыНормыВремени);
	ПараметрыЗаполненияГрафика.Вставить("СуммированныйУчетРабочегоВремени", СуммированныйУчетРабочегоВремени);
	ПараметрыЗаполненияГрафика.Вставить("УчетНормыВремениПоОтдельномуГрафику", УчетНормыВремениПоОтдельномуГрафику);
	ПараметрыЗаполненияГрафика.Вставить("Ссылка", Параметры.Ссылка);
	ПараметрыЗаполненияГрафика.Вставить("СменыПоДнямЦикла", СменыПоДнямЦикла());

	Возврат ПараметрыЗаполненияГрафика;
	//
КонецФункции	

&НаСервере
Процедура УстановитьНастройкиТаблицыРасписаниеРаботы()
	Если  Не ВидГрафика = Перечисления.ВидыРабочихГрафиков.Сменный Тогда
		Элементы.РасписаниеРаботыДень.Заголовок = НСтр("ru = 'День недели';uk='День тижня'");          
		Элементы.РасписаниеРаботы.ИзменятьПорядокСтрок = Ложь;
		Элементы.РасписаниеРаботы.ИзменятьСоставСтрок = Ложь;
		Элементы.РасписаниеРаботыДобавить.Видимость = Ложь;
		Элементы.РасписаниеРаботыУдалить.Видимость = Ложь;
		Элементы.РасписаниеРаботыПереместитьВверх.Видимость = Ложь;
		Элементы.РасписаниеРаботыПереместитьВниз.Видимость = Ложь;
		Элементы.ДлительностьРабочейНедели.ТолькоПросмотр = Истина;
		Элементы.РасписаниеРаботыСмена.Видимость = Ложь;
	Иначе
		Элементы.РасписаниеРаботыДень.Заголовок = НСтр("ru = 'Номер дня';uk='Номер дня'");
		Элементы.РасписаниеРаботы.ИзменятьПорядокСтрок = Истина;
		Элементы.РасписаниеРаботы.ИзменятьСоставСтрок = Истина;
		Элементы.РасписаниеРаботыДобавить.Видимость = Истина;
		Элементы.РасписаниеРаботыУдалить.Видимость = Истина;
		Элементы.РасписаниеРаботыПереместитьВверх.Видимость = Истина;
		Элементы.РасписаниеРаботыПереместитьВниз.Видимость = Истина;
		Элементы.ДлительностьРабочейНедели.ТолькоПросмотр = Ложь;
		Элементы.РасписаниеРаботыСмена.Видимость = Истина;
	КонецЕсли;		
КонецПроцедуры	

&НаКлиенте
Процедура РасписаниеРаботыСменаПриИзменении(Элемент)
	ТекущаяСтрока = Элементы.РасписаниеРаботы.ТекущиеДанные;
	Часов = ПолучитьЧасы("Часов", ТекущаяСтрока.Смена);
	ЧасовВечерних = ПолучитьЧасы("ЧасовВечерних", ТекущаяСтрока.Смена);
	ЧасовНочных = ПолучитьЧасы("ЧасовНочных", ТекущаяСтрока.Смена);
	ТекущаяСтрока.Часы = Часов;
	ТекущаяСтрока.ЧасыВечерние = ЧасовВечерних;
	ТекущаяСтрока.ЧасыНочные = ЧасовНочных;
КонецПроцедуры

&НаСервере
Функция ПолучитьЧасы(Параметр, Смена)
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Смена, Параметр);
	
КонецФункции

#КонецОбласти