////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	Если Параметры.Ключ.Пустой() Тогда
		ПодготовитьФормуНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	ПодготовитьФормуНаСервере();

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)

	// Установить текущую страницу
	Если ТипЗнч(ПараметрыОткрытия) = Тип("Структура") Тогда
		АктивныйЭлемент = Неопределено;
		ПараметрыОткрытия.Свойство("АктивныйЭлемент", АктивныйЭлемент);

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ТекущийОбъект, ПараметрыЗаписи)


	Если Запись.СпособОценкиМПЗ = ПредопределенноеЗначение("Перечисление.СпособыОценки.ФИФО") Тогда

		ПараметрыУчета = ОбщегоНазначенияБПВызовСервера.ОпределитьПараметрыУчета();

		Если НЕ ПараметрыУчета.ВестиПартионныйУчет Тогда

			Если НЕ ЭтоПолноправныйПользователь Тогда
				ПоказатьПредупреждение( ,НСтр("ru='Для применения способа оценки МПЗ ""По ФИФО"" необходимо включить аналитический учет по партиям на счетах учета МПЗ.
|Недостаточно прав для изменения разрезов аналитического учета. Учетная политика не может быть записана!';uk='Для застосування способу оцінки МВЗ ""По ФІФО"" необхідно включити аналітичний облік за партіями на рахунках обліку МВЗ.
|Недостатньо прав для зміни розрізів аналітичного обліку. Облікова політика не може бути записана!'"));
				Отказ = Истина;
				Возврат;
			КонецЕсли;

			
			ПоказатьВопрос(Новый ОписаниеОповещения("ВопросВключитьАналитическийУчетПоПартиямЗавершение", ЭтотОбъект, Новый Структура("Отказ, ПараметрыУчета", Отказ, ПараметрыУчета)), НСтр("ru='Для применения способа оценки МПЗ ""По ФИФО"" необходимо включить аналитический учет по партиям на счетах учета МПЗ.
|Включить аналитический учет по партиям?';uk='Для застосування способу оцінки МВЗ ""По ФІФО"" необхідно включити аналітичний облік за партіями на рахунках обліку МВЗ.
|Включити аналітичний облік за партіями?'"),
				РежимДиалогаВопрос.ОКОтмена, , КодВозвратаДиалога.ОК);
			Отказ = Истина;
            Возврат;
		КонецЕсли;

	КонецЕсли;
	
	ПроверитьКлассыСчетовРасходов(Запись.Период, Запись.ИспользуемыеКлассыСчетовРасходов);
	
	Если Не ИзменениеСхемыНалогообложенияПроизошлоВСерединеМесяца Тогда
		Запись.ДатаИзмененияСхемыНалогообложенияВСерединеМесяца = '00010101';
	КонецЕсли;

    ЕстьДвиженияЗаПериодПоОрганизации = Ложь;
    ПредупредитьОНеобходимостиПерепроведенияДокументов = НЕ Отказ И ЭтаФорма.Модифицированность;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросВключитьАналитическийУчетПоПартиямЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    ПараметрыУчета = ДополнительныеПараметры.ПараметрыУчета;
    
    Ответ = РезультатВопроса;
	Отказ = Ложь;
    
    Если Ответ = КодВозвратаДиалога.ОК Тогда
        ИзмененыПараметрыСубконто = Ложь;
        ПараметрыУчета.ВестиПартионныйУчет = Истина;
        ОбщегоНазначенияБПВызовСервера.ПрименитьПараметрыУчета(ПараметрыУчета, ИзмененыПараметрыСубконто, Отказ, Истина);
		
        Если ИзмененыПараметрыСубконто Тогда
            ПоказатьОповещениеПользователя(НСтр("ru='Изменены параметры субконто';uk='Змінені параметри субконто'"),
            "e1cib/app/Обработка.ЖурналРегистрации", "Журнал регистрации");
			
			Записать();
			
		КонецЕсли;
		
    КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)

	ЕстьДвиженияЗаПериодПоОрганизации = Ложь;

	Если ПредупредитьОНеобходимостиПерепроведенияДокументов Тогда
		ДатаНач = НачалоДня(Запись.Период);
		ДатаКон = КонецДня(ДатаОкончанияДействия);
		ЕстьДвиженияЗаПериодПоОрганизации = ЕстьДвиженияЗаПериод(ДатаНач, ДатаКон, Запись.Организация);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)

	Оповестить("ИзменениеУчетнойПолитики");

	Если ЕстьДвиженияЗаПериодПоОрганизации Тогда
		ДатаНач = НачалоДня(Запись.Период);
		ДатаКон = КонецДня(ДатаОкончанияДействия);
		ТекстПредупреждения = НСтр("ru='Изменены параметры учетной политики.
|Рекомендуется перепровести документы организации ""%1"" за период: %2';uk='Змінені параметри облікової політики.
|Рекомендується перепровести документи організації ""%1"" за період: %2'");
		ТекстПредупреждения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ТекстПредупреждения,
			Запись.Организация,
			ПредставлениеПериода(ДатаНач, ДатаКон, "ФП = Истина"));
		ПоказатьПредупреждение(, ТекстПредупреждения);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	ЗаполнитьРеквизитыФормы();

КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)

	Если ИзменениеСхемыНалогообложенияПроизошлоВСерединеМесяца Тогда
		
		Если Запись.ДатаИзмененияСхемыНалогообложенияВСерединеМесяца < ДопустимаяДатаПереходаНачало
			ИЛИ Запись.ДатаИзмененияСхемыНалогообложенияВСерединеМесяца > ДопустимаяДатаПереходаКонец Тогда

			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Недопустимое значение';uk='Неприпустиме значення'"),
				, "ДатаИзмененияСхемыНалогообложенияВСерединеМесяца", "Запись", Отказ);
			
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

// Общие сведения

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)

	ЭтоЮрЛицо = ЭтоЮрЛицо(Запись.Организация);
	Если ЭтоЮрЛицо Тогда
	КонецЕсли;
	
	
	ОрганизацияПриИзмененииНаСервере();
	
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ПериодПриИзменении(Элемент)

	ДатаОкончанияДействия = НайтиДатуОкончанияДействия(Запись.Период, Запись.Организация, Параметры.Ключ);
	
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура СхемаНалогообложенияПриИзмененииНаСервере()
	
	РеквизитыСхемыНалогообложения = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Запись.СхемаНалогообложения, "НалогНаПрибыль, НДС, ЕдиныйНалог"); 
	Запись.ПлательщикНалогаНаПрибыль 	= РеквизитыСхемыНалогообложения.НалогНаПрибыль;
	Запись.ПлательщикНДС				= РеквизитыСхемыНалогообложения.НДС;
	Запись.ПлательщикЕдиногоНалога 		= РеквизитыСхемыНалогообложения.ЕдиныйНалог;

	УстановитьГруппуПлательщикаЕН();
	
КонецПроцедуры

&НаКлиенте
Процедура СхемаНалогообложенияПриИзменении(Элемент)
	
	СхемаНалогообложенияПриИзмененииНаСервере();
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппаПлательщикаЕдиногоНалогаПриИзменении(Элемент)

	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменениеСхемыНалогообложенияПроизошлоВСерединеМесяцаПриИзменении(Элемент)
	УправлениеФормой(ЭтаФорма);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура МетодыРаспределенияОбщепроизводственныхИОбщехозяйственныхРасходов(Команда)
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("Отбор", Новый Структура("Организация", Запись.Организация));
	ОткрытьФорму("РегистрСведений.МетодыРаспределенияКосвенныхРасходовОрганизаций.ФормаСписка", ПараметрыФормы);

КонецПроцедуры

&НаКлиенте
Процедура ВстречныйВыпускПродукцииУслуг(Команда)
	
	Если Запись.СпособРасчетаСебестоимостиПроизводства = ПредопределенноеЗначение("Перечисление.СпособыРасчетаСебестоимостиПродукции.ПоПеределам") Тогда
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Отбор", Новый Структура("Организация", Запись.Организация));
		ОткрытьФорму("РегистрСведений.ВстречныйВыпускПродукцииУслуг.ФормаСписка", ПараметрыФормы);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПорядокПодразделенийДляЗакрытияСчетовЗатрат(Команда)

	Если Запись.СпособРасчетаСебестоимостиПроизводства = ПредопределенноеЗначение("Перечисление.СпособыРасчетаСебестоимостиПродукции.ПоПодразделениям") Тогда
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Отбор", Новый Структура("Организация", Запись.Организация));
		ОткрытьФорму("Документ.УстановкаПорядкаЗакрытияПодразделений.ФормаСписка", ПараметрыФормы);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПараметрыОценкиЗапасовНаДатуБаланса(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Отбор", Новый Структура("Организация", Запись.Организация));
	ОткрытьФорму("РегистрСведений.ПараметрыОценкиЗапасовНаДатуБаланса.ФормаСписка", ПараметрыФормы);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаСервере
Процедура ПроверитьКлассыСчетовРасходов(Период, КлассыСчетовРасходов)
	
	ТекстПредупреждения = НСтр("ru='Использование только 8-го класса счетов запрещено Инструкцией 291.
|Не будет заполнен раздел I Отчета о финансовых результатах!';uk='Використання лише 8-го класу рахунків заборонено Інструкцією 291.
|Не буде заповнений розділ I Звіту про фінансові результати!'");
	Если НачалоДня(Период) >= '20200101' И КлассыСчетовРасходов = Перечисления.КлассыСчетовРасходов.Класс8 Тогда
		Сообщить(ТекстПредупреждения);	
	КонецЕсли;	
КонецПроцедуры

&НаСервере
Процедура ПодготовитьФормуНаСервере()

	
	ЭтоПолноправныйПользователь = Пользователи.ЭтоПолноправныйПользователь();
	
	ЭтоЮрЛицо = ЭтоЮрЛицо(Запись.Организация);
	

	ЗаполнитьРеквизитыФормы();
	
	Параметры.Свойство("ПараметрыОткрытия", ПараметрыОткрытия);
	
	ВедетсяПроизводственнаяДеятельность = ПолучитьФункциональнуюОпцию("ВедетсяПроизводственнаяДеятельность");
	ВедетсяРозничнаяТорговля = ПолучитьФункциональнуюОпцию("ВедетсяРозничнаяТорговля");
	
	УчетДенежныхСредствПоОбособленнымПодразделениям = ПолучитьФункциональнуюОпцию("ИспользоватьУчетДенежныхСредствПоОбособленнымПодразделениям");
	
	ГоловнаяОрганизация = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Запись.Организация, "ГоловнаяОрганизация");
	
	ДатаНачалаРаспределенияОПЗвНУ = НалоговыйУчетПовтИсп.ДатаНачалаРаспределенияОПЗвНУ();
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)

	Элементы = Форма.Элементы;
	Запись = Форма.Запись;
	
	// Применяемая система налогообложения
	
	Элементы.ГруппаНалогНаПрибыль.Видимость = Запись.ПлательщикНалогаНаПрибыль И Форма.ЭтоЮрЛицо;
	        
	Форма.ЭтоПериодДо2015 = (Запись.Период < '2015 01 01');
	Элементы.ГруппаНалогНаПрибыльДо2015.Видимость 	= Форма.ЭтоПериодДо2015;
	Элементы.ГруппаНалогНаПрибыльС2015.Видимость 	= НЕ Форма.ЭтоПериодДо2015;
	Элементы.УвеличиватьСтоимостьОСНаСуммуУлучшенияВПорядкеНКУ.Видимость =  Форма.ЭтоПериодДо2015;
	
	Элементы.ГруппаЕдиныйНалог.Видимость = Запись.ПлательщикЕдиногоНалога;
	УстановитьСписокГруппаПлательщикаЕдиногоНалога(Форма);
	
	Элементы.ГруппаРозничнаяТорговля.Видимость = Форма.ВедетсяРозничнаяТорговля;
	
	// Производство
	НастроитьЗакладкиПроизводства(Форма);
	
	// Обособленные подразделения
	Элементы.ГруппаДенежныеСредства.Видимость = Форма.УчетДенежныхСредствПоОбособленнымПодразделениям;
	
	ВидимостьДатыПерехода = Запись.ГруппаПлательщикаЕдиногоНалога = ПредопределенноеЗначение("Перечисление.ГруппыПлательщиковЕдиногоНалога.ТретьяГруппаОсобая");
	Элементы.ИзменениеСхемыНалогообложенияПроизошлоВСерединеМесяца.Видимость = ВидимостьДатыПерехода;
	Если ВидимостьДатыПерехода Тогда
		Форма.ДопустимаяДатаПереходаКонец = НачалоМесяца(Запись.Период) - 86400;
		Форма.ДопустимаяДатаПереходаНачало = НачалоМесяца(Форма.ДопустимаяДатаПереходаКонец) + 86400; 	
		Элементы.ДатаИзмененияСхемыНалогообложенияВСерединеМесяца.Подсказка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Может быть указана дата в диапазоне %1 - %2';uk='Може бути зазначено дату в діапазоні %1 - %2'"),
			Формат(Форма.ДопустимаяДатаПереходаНачало, "ДЛФ=Д"),
			Формат(Форма.ДопустимаяДатаПереходаКонец, "ДЛФ=Д"));
	Иначе
		Форма.ИзменениеСхемыНалогообложенияПроизошлоВСерединеМесяца = Ложь;
	КонецЕсли;
	Элементы.ДатаИзмененияСхемыНалогообложенияВСерединеМесяца.Видимость = Форма.ИзменениеСхемыНалогообложенияПроизошлоВСерединеМесяца;
	
КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()
	
	ГоловнаяОрганизация = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Запись.Организация, "ГоловнаяОрганизация");
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЭтоЮрЛицо(Организация)
	
	Если ЗначениеЗаполнено(Организация) Тогда
		ЭтоЮрЛицо = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "ЮридическоеФизическоеЛицо")
			= Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо;
	Иначе
		ЭтоЮрЛицо = Истина;
	КонецЕсли;
	
	Возврат ЭтоЮрЛицо;
	
КонецФункции

&НаСервереБезКонтекста
Функция ЕстьДвиженияЗаПериод(Знач ДатаНач, Знач ДатаКон, Знач Организация)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаНач",     ДатаНач);
	Запрос.УстановитьПараметр("ДатаКон",     ДатаКон);
	Запрос.УстановитьПараметр("Организация", Организация);

	Запрос.Текст = "
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ХозрасчетныйОбороты.Счет) КАК Счет
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Обороты(&ДатаНач, &ДатаКон, , , , Организация = &Организация, , ) КАК ХозрасчетныйОбороты";

	Результат = Запрос.Выполнить().Выбрать();
	Результат.Следующий();

	Возврат НЕ Результат.Счет = 0;

КонецФункции

&НаСервереБезКонтекста
Функция НайтиДатуОкончанияДействия(Знач ТекПериод, Знач ТекОрганизация, Знач КлючФормы)

	ДатаОкончания = ТекПериод;

	УчетнаяПолитикаВсехОрганизаций = ОбщегоНазначенияБПВызовСервера.ЗаполнениеУчетнойПолитики();
	
	УчетнаяПолитикаОрганизации = УчетнаяПолитикаВсехОрганизаций.Строки.Найти(ТекОрганизация, "Организация");
	Если УчетнаяПолитикаОрганизации <> Неопределено Тогда
		Для каждого СтрокаУчетнойПолитики Из УчетнаяПолитикаОрганизации.Строки Цикл
			Если СтрокаУчетнойПолитики.Период = КлючФормы.Период Тогда
				Продолжить;
			КонецЕсли;
			Если СтрокаУчетнойПолитики.Период > ДатаОкончания Тогда
				ДатаОкончания = СтрокаУчетнойПолитики.Период - 1;
				Возврат ДатаОкончания;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	ДатаОкончания = ?(ДатаОкончания = ТекПериод, КонецГода(ТекущаяДата()), КонецГода(ДатаОкончания));
	ДатаОкончания = ?(ТекПериод > ТекущаяДата(), КонецГода(ТекПериод), КонецГода(ДатаОкончания));

	Возврат ДатаОкончания;

КонецФункции

&НаСервере
Процедура ЗаполнитьРеквизитыФормы()

	ДатаОкончанияДействия = НайтиДатуОкончанияДействия(Запись.Период, Запись.Организация, Параметры.Ключ);
	
	ИзменениеСхемыНалогообложенияПроизошлоВСерединеМесяца = ЗначениеЗаполнено(Запись.ДатаИзмененияСхемыНалогообложенияВСерединеМесяца);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция НаличиеСписковПрямыхРасходов(Организация, Период)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ПериодДействия", НачалоГода(Период));
	Запрос.УстановитьПараметр("ПрошлыйПериодДействия", НачалоГода(НачалоГода(Период) - 1));
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	МетодыОпределенияПрямыхРасходовПроизводстваВНУ.ПериодДействия,
	|	МетодыОпределенияПрямыхРасходовПроизводстваВНУ.Организация
	|ИЗ
	|	РегистрСведений.МетодыОпределенияПрямыхРасходовПроизводстваВНУ КАК МетодыОпределенияПрямыхРасходовПроизводстваВНУ
	|ГДЕ
	|	МетодыОпределенияПрямыхРасходовПроизводстваВНУ.ПериодДействия = &ПериодДействия
	|	И МетодыОпределенияПрямыхРасходовПроизводстваВНУ.Организация = &Организация
	|
	|;
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	МетодыОпределенияПрямыхРасходовПроизводстваВНУ.ПериодДействия,
	|	МетодыОпределенияПрямыхРасходовПроизводстваВНУ.Организация
	|ИЗ
	|	РегистрСведений.МетодыОпределенияПрямыхРасходовПроизводстваВНУ КАК МетодыОпределенияПрямыхРасходовПроизводстваВНУ
	|ГДЕ
	|	МетодыОпределенияПрямыхРасходовПроизводстваВНУ.ПериодДействия = &ПрошлыйПериодДействия
	|	И МетодыОпределенияПрямыхРасходовПроизводстваВНУ.Организация = &Организация
	|
	|";

	РезультатыЗапроса = Запрос.ВыполнитьПакет();

	НаличиеСписков = Новый Структура();
	НаличиеСписков.Вставить("ЕстьСписокТекущегоПериода", НЕ РезультатыЗапроса[0].Пустой());
	НаличиеСписков.Вставить("ЕстьСписокПрошлогоПериода", НЕ РезультатыЗапроса[1].Пустой());

	Возврат НаличиеСписков;

КонецФункции

// ПРОИЗВОДСТВО

&НаКлиентеНаСервереБезКонтекста
Процедура НастроитьЗакладкиПроизводства(Форма)
	
	// Настроим видимость закладок
	Элементы = Форма.Элементы;
	ЕстьПроизводство = Форма.ВедетсяПроизводственнаяДеятельность;
	Элементы.ГруппаПроизводство.Видимость        = ЕстьПроизводство;
	Элементы.ГруппаОбщепроизводственныеЗатраты.Видимость    = ЕстьПроизводство;
	Элементы.ГруппаЭтапыПроизводства.Видимость   = ЕстьПроизводство;
	
	Если Не ЕстьПроизводство Тогда
		Возврат;
	КонецЕсли;
	
	// Настроим доступность
	НастроитьДоступностьЭтапыПроизводства(Форма);
	НастроитьДоступностьОбщепроизводственныеЗатраты(Форма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьСписокГруппаПлательщикаЕдиногоНалога(Форма)
	
	Если НЕ Форма.Запись.ПлательщикЕдиногоНалога Тогда
	    Возврат;
	КонецЕсли;
	
	ДоступнаТретьяОсобаяГруппа = Форма.Запись.Период >= '20220401';
	
	ДоступныеЗначения = Форма.Элементы.ГруппаПлательщикаЕдиногоНалога.СписокВыбора;
	ДоступныеЗначения.Очистить();
	
	Если Форма.ЭтоЮрЛицо Тогда
		
		Если Форма.ЭтоПериодДо2015 Тогда
			ДоступныеЗначения.Добавить(ПредопределенноеЗначение("Перечисление.ГруппыПлательщиковЕдиногоНалога.ЧетвертаяГруппа"));
			ДоступныеЗначения.Добавить(ПредопределенноеЗначение("Перечисление.ГруппыПлательщиковЕдиногоНалога.ШестаяГруппа"));
		Иначе
			ДоступныеЗначения.Добавить(ПредопределенноеЗначение("Перечисление.ГруппыПлательщиковЕдиногоНалога.ТретьяГруппа"));
			Если ДоступнаТретьяОсобаяГруппа Тогда
				ДоступныеЗначения.Добавить(ПредопределенноеЗначение("Перечисление.ГруппыПлательщиковЕдиногоНалога.ТретьяГруппаОсобая"));
			КонецЕсли;
			ДоступныеЗначения.Добавить(ПредопределенноеЗначение("Перечисление.ГруппыПлательщиковЕдиногоНалога.ЧетвертаяГруппа")); // ИНАГРО
		КонецЕсли;
		
	Иначе
		
		ДоступныеЗначения.Добавить(ПредопределенноеЗначение("Перечисление.ГруппыПлательщиковЕдиногоНалога.ПерваяГруппа"));
		ДоступныеЗначения.Добавить(ПредопределенноеЗначение("Перечисление.ГруппыПлательщиковЕдиногоНалога.ВтораяГруппа"));
		ДоступныеЗначения.Добавить(ПредопределенноеЗначение("Перечисление.ГруппыПлательщиковЕдиногоНалога.ТретьяГруппа"));
		Если ДоступнаТретьяОсобаяГруппа Тогда
			ДоступныеЗначения.Добавить(ПредопределенноеЗначение("Перечисление.ГруппыПлательщиковЕдиногоНалога.ТретьяГруппаОсобая"));
		КонецЕсли;
		ДоступныеЗначения.Добавить(ПредопределенноеЗначение("Перечисление.ГруппыПлательщиковЕдиногоНалога.ЧетвертаяГруппа")); // ИНАГРО
		
		Если Форма.ЭтоПериодДо2015 Тогда
			ДоступныеЗначения.Добавить(ПредопределенноеЗначение("Перечисление.ГруппыПлательщиковЕдиногоНалога.ПятаяГруппа"))
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // УстановитьСписокГруппаПлательщикаЕдиногоНалога()

&НаСервере
Процедура УстановитьГруппуПлательщикаЕН()
	
	Если Запись.ПлательщикЕдиногоНалога Тогда
		
		Если ЭтотОбъект.ЭтоЮрЛицо Тогда
			Если ЭтотОбъект.ЭтоПериодДо2015 Тогда
				Если (Запись.ГруппаПлательщикаЕдиногоНалога <> Перечисления.ГруппыПлательщиковЕдиногоНалога.ЧетвертаяГруппа) И
					 (Запись.ГруппаПлательщикаЕдиногоНалога <> Перечисления.ГруппыПлательщиковЕдиногоНалога.ШестаяГруппа) Тогда
					Запись.ГруппаПлательщикаЕдиногоНалога = Перечисления.ГруппыПлательщиковЕдиногоНалога.ЧетвертаяГруппа;
				КонецЕсли;
			Иначе
				Если (Запись.ГруппаПлательщикаЕдиногоНалога <> Перечисления.ГруппыПлательщиковЕдиногоНалога.ТретьяГруппа) Тогда
					Запись.ГруппаПлательщикаЕдиногоНалога = Перечисления.ГруппыПлательщиковЕдиногоНалога.ТретьяГруппа;
				КонецЕсли;
			КонецЕсли;
		Иначе
			Если (Запись.ГруппаПлательщикаЕдиногоНалога = Перечисления.ГруппыПлательщиковЕдиногоНалога.ЧетвертаяГруппа) ИЛИ
				 (Запись.ГруппаПлательщикаЕдиногоНалога = Перечисления.ГруппыПлательщиковЕдиногоНалога.ШестаяГруппа) Тогда
				Запись.ГруппаПлательщикаЕдиногоНалога = Перечисления.ГруппыПлательщиковЕдиногоНалога.ПустаяСсылка();
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		
		Если ЗначениеЗаполнено(Запись.ГруппаПлательщикаЕдиногоНалога) Тогда
			Запись.ГруппаПлательщикаЕдиногоНалога = Перечисления.ГруппыПлательщиковЕдиногоНалога.ПустаяСсылка();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// ЭтапыПроизводства

&НаКлиентеНаСервереБезКонтекста
Процедура НастроитьДоступностьЭтапыПроизводства(Форма)
	
	Элементы = Форма.Элементы;
	Запись   = Форма.Запись;
	
		
	Элементы.ВстречныйВыпускПродукцииУслуг.Доступность = 
		Запись.СпособРасчетаСебестоимостиПроизводства = ПредопределенноеЗначение("Перечисление.СпособыРасчетаСебестоимостиПродукции.ПоПеределам");
	Элементы.ПорядокПодразделенийДляЗакрытияСчетовЗатрат.Доступность = 
		Запись.СпособРасчетаСебестоимостиПроизводства = ПредопределенноеЗначение("Перечисление.СпособыРасчетаСебестоимостиПродукции.ПоПодразделениям");
		
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура НастроитьДоступностьОбщепроизводственныеЗатраты(Форма)
	
	Элементы = Форма.Элементы;
	Запись   = Форма.Запись;
	
	Если Форма.ЭтоПериодДо2015 Тогда
		Элементы.НеРаспределятьОПЗнаСебестоимостьПродукции.Доступность = НЕ (Запись.Период >= Форма.ДатаНачалаРаспределенияОПЗвНУ);
		Элементы.НеРаспределятьОПЗнаСебестоимостьПродукции.Видимость = Истина;
		Элементы.НалоговоеНазначениеНераспределенныхПостоянныхОПЗ.Видимость = Запись.ПлательщикНалогаНаПрибыль;
	Иначе
		Элементы.НеРаспределятьОПЗнаСебестоимостьПродукции.Видимость = Ложь;
		Элементы.НалоговоеНазначениеНераспределенныхПостоянныхОПЗ.Видимость = Ложь;
	КонецЕсли; 	
		
КонецПроцедуры


&НаКлиенте
Процедура СпособРасчетаСебестоимостиПроизводстваПриИзменении(Элемент)

	НастроитьДоступностьЭтапыПроизводства(ЭтаФорма);

КонецПроцедуры