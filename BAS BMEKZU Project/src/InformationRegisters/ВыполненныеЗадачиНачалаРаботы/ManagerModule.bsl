#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

Процедура ЗаполнитьПервоначально() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ЗадачиОрганизаций", ЗадачиОрганизаций());
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗадачиОрганизаций.Задача КАК Задача,
	|	ЗадачиОрганизаций.ОбособленноеПодразделение КАК ОбособленноеПодразделение
	|ПОМЕСТИТЬ ЗадачиНачалаРаботы
	|ИЗ
	|	&ЗадачиОрганизаций КАК ЗадачиОрганизаций
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Организации.Ссылка КАК Организация,
	|	ВсеЗадачиНачалаРаботы.Задача КАК Задача
	|ПОМЕСТИТЬ ПотребныеЗадачи
	|ИЗ
	|	ЗадачиНачалаРаботы КАК ВсеЗадачиНачалаРаботы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
	|		ПО ВсеЗадачиНачалаРаботы.ОбособленноеПодразделение = Ложь
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	Задача
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПотребныеЗадачи.Организация,
	|	ПотребныеЗадачи.Задача
	|ИЗ
	|	ПотребныеЗадачи КАК ПотребныеЗадачи
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВыполненныеЗадачиНачалаРаботы КАК ВыполненныеЗадачи
	|		ПО ПотребныеЗадачи.Организация = ВыполненныеЗадачи.Организация
	|			И ПотребныеЗадачи.Задача = ВыполненныеЗадачи.Задача
	|ГДЕ
	|	ВыполненныеЗадачи.Организация ЕСТЬ NULL ";
	
	УстановитьПривилегированныйРежим(Истина);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		МенеджерЗаписи = РегистрыСведений.ВыполненныеЗадачиНачалаРаботы.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(МенеджерЗаписи, Выборка);
		МенеджерЗаписи.Записать();
	КонецЦикла;
	
КонецПроцедуры

Функция ЗадачиПоОрганизации(Организация) Экспорт
	
	МетаданныеИзмерений = Метаданные.РегистрыСведений.ВыполненныеЗадачиНачалаРаботы.Измерения;
	
	ЗадачиНачалаРаботы = Новый ТаблицаЗначений;
	ЗадачиНачалаРаботы.Колонки.Добавить("Организация",  МетаданныеИзмерений.Организация.Тип);
	ЗадачиНачалаРаботы.Колонки.Добавить("Задача",       МетаданныеИзмерений.Задача.Тип);
	ЗадачиНачалаРаботы.Колонки.Добавить("Наименование", Новый ОписаниеТипов("Строка"));
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Организации.Ссылка
	|ИЗ
	|	Справочник.Организации КАК Организации";
	УстановитьПривилегированныйРежим(Истина);
	ЗаполнитьРеквизитыОрганизации = Запрос.Выполнить().Пустой();
	УстановитьПривилегированныйРежим(Ложь);
	
	Если ЗаполнитьРеквизитыОрганизации Тогда
		
		НоваяЗадача = ЗадачиНачалаРаботы.Добавить();
		НоваяЗадача.Задача       = Перечисления.ЗадачиНачалаРаботы.РеквизитыОрганизации;
		НоваяЗадача.Наименование = "" + НоваяЗадача.Задача;
		
		Возврат ЗадачиНачалаРаботы;
		
	КонецЕсли;
	
	// Составим список задач
	// Задача ПараметрыУчета в списке должна быть только одна
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ЗадачиОрганизаций", ЗадачиОрганизаций());
	Запрос.УстановитьПараметр("Организация",       Организация);
	Запрос.УстановитьПараметр("УстановленОтбор",   ЗначениеЗаполнено(Организация));
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗадачиОрганизаций.Задача КАК Задача,
	|	ЗадачиОрганизаций.ОбособленноеПодразделение КАК ОбособленноеПодразделение
	|ПОМЕСТИТЬ ЗадачиНачалаРаботы
	|ИЗ
	|	&ЗадачиОрганизаций КАК ЗадачиОрганизаций
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОбособленноеПодразделение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Организации.Ссылка КАК Организация,
	|	Неопределено КАК ОбособленноеПодразделение
	|ПОМЕСТИТЬ Организации
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	(НЕ &УстановленОтбор
	|			ИЛИ Организации.Ссылка = &Организация)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОбособленноеПодразделение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Организации.Организация КАК Организация,
	|	ВсеЗадачиНачалаРаботы.Задача КАК Задача
	|ПОМЕСТИТЬ ПотребныеЗадачи
	|ИЗ
	|	ЗадачиНачалаРаботы КАК ВсеЗадачиНачалаРаботы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Организации КАК Организации
	|		ПО ВсеЗадачиНачалаРаботы.ОбособленноеПодразделение = Ложь
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	Задача
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ВЫБОР
	|		КОГДА ПотребныеЗадачи.Задача = ЗНАЧЕНИЕ(Перечисление.ЗадачиНачалаРаботы.ПараметрыУчета)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|		ИНАЧЕ ПотребныеЗадачи.Организация
	|	КОНЕЦ КАК Организация,
	|	ПотребныеЗадачи.Задача,
	|	ПРЕДСТАВЛЕНИЕ(ПотребныеЗадачи.Задача) КАК Наименование,
	|	ЗначенияУпорядочивания.Порядок КАК Порядок
	|ИЗ
	|	ПотребныеЗадачи КАК ПотребныеЗадачи
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВыполненныеЗадачиНачалаРаботы КАК ВыполненныеЗадачи
	|		ПО ПотребныеЗадачи.Организация = ВыполненныеЗадачи.Организация
	|			И ПотребныеЗадачи.Задача = ВыполненныеЗадачи.Задача
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Перечисление.ЗадачиНачалаРаботы КАК ЗначенияУпорядочивания
	|		ПО ПотребныеЗадачи.Задача = ЗначенияУпорядочивания.Ссылка
	|ГДЕ
	|	ВыполненныеЗадачи.Организация ЕСТЬ NULL 
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(ЗадачиНачалаРаботы.Добавить(), Выборка);
	КонецЦикла;
	Возврат ЗадачиНачалаРаботы;
	
КонецФункции

Функция Добавить(Организация, Задача) Экспорт
	
	ЗначенияКлюча = Новый Структура;
	ЗначенияКлюча.Вставить("Организация", Организация);
	ЗначенияКлюча.Вставить("Задача",      Задача);
	
	Если Задача = Перечисления.ЗадачиНачалаРаботы.ПараметрыУчета Тогда
		ДобавитьДляВсехОрганизаций(Задача);
	Иначе
		МенеджерЗаписи = РегистрыСведений.ВыполненныеЗадачиНачалаРаботы.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(МенеджерЗаписи, ЗначенияКлюча);
		МенеджерЗаписи.Записать();
	КонецЕсли;
	
	Возврат РегистрыСведений.ВыполненныеЗадачиНачалаРаботы.СоздатьКлючЗаписи(ЗначенияКлюча);
	
КонецФункции

Функция ЗадачиОрганизаций()
	
	ЗадачиОрганизаций = Новый ТаблицаЗначений;
	ЗадачиОрганизаций.Колонки.Добавить("Задача",                    Новый ОписаниеТипов("ПеречислениеСсылка.ЗадачиНачалаРаботы"));
	ЗадачиОрганизаций.Колонки.Добавить("ОбособленноеПодразделение", Новый ОписаниеТипов("Булево"));
	
	// Только в головных организациях
	НоваяЗадача = ЗадачиОрганизаций.Добавить();
	НоваяЗадача.Задача                    = Перечисления.ЗадачиНачалаРаботы.ПараметрыУчета;
	НоваяЗадача.ОбособленноеПодразделение = Ложь;
	
	НоваяЗадача = ЗадачиОрганизаций.Добавить();
	НоваяЗадача.Задача                    = Перечисления.ЗадачиНачалаРаботы.УчетнаяПолитика;
	НоваяЗадача.ОбособленноеПодразделение = Ложь;
	
	// Во всех организациях
	НоваяЗадача = ЗадачиОрганизаций.Добавить();
	НоваяЗадача.Задача                    = Перечисления.ЗадачиНачалаРаботы.НачальныеОстатки;
	НоваяЗадача.ОбособленноеПодразделение = Ложь;
	
	НоваяЗадача = ЗадачиОрганизаций.Добавить();
	НоваяЗадача.Задача                    = Перечисления.ЗадачиНачалаРаботы.НачальныеОстатки;
	НоваяЗадача.ОбособленноеПодразделение = Истина;
	
	Возврат ЗадачиОрганизаций;
	
КонецФункции

Процедура ДобавитьДляВсехОрганизаций(ЗадачаНачалаРаботы)
	
	УстановитьПривилегированныйРежим(Истина); // Действует не до конца процедуры
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ВыполненныеЗадачиНачалаРаботы");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.УстановитьЗначение("Задача", ЗадачаНачалаРаботы);
	
	НаборЗаписей = РегистрыСведений.ВыполненныеЗадачиНачалаРаботы.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Задача.Установить(ЗадачаНачалаРаботы);
	
	НачатьТранзакцию();
	
	Блокировка.Заблокировать();
	
	// Распространим выполнение задачи по всем существующим сейчас организациям (кроме филиалов).
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Задача", ЗадачаНачалаРаботы);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВыполненныеЗадачи.Организация КАК Организация
	|ПОМЕСТИТЬ ВыполненныеЗадачи
	|ИЗ
	|	РегистрСведений.ВыполненныеЗадачиНачалаРаботы КАК ВыполненныеЗадачи
	|ГДЕ
	|	ВыполненныеЗадачи.Задача = &Задача
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Организации.Ссылка КАК Организация
	|ИЗ
	|	Справочник.Организации КАК Организации
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВыполненныеЗадачи КАК ВыполненныеЗадачи
	|		ПО Организации.Ссылка = ВыполненныеЗадачи.Организация
	|	";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Запись = НаборЗаписей.Добавить();
		Запись.Организация = Выборка.Организация;
		Запись.Задача      = ЗадачаНачалаРаботы;
	КонецЦикла;
	НаборЗаписей.Записать();
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры

#КонецЕсли
