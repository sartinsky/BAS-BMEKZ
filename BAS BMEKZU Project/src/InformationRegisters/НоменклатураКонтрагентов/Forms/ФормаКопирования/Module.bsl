&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	КопироватьНоменклатуру = Истина;
	Параметры.Свойство("КонтрагентИсточник", КонтрагентИсточник);
	ОбновитьДанныеДляКонтрагента();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеДляКонтрагента()
	ЗаполнитьНаборЗаписейНоменклатуры();
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНаборЗаписейНоменклатуры()
	
	РегистрСведенийНаборЗаписей_ = РегистрыСведений.НоменклатураКонтрагентов.СоздатьНаборЗаписей();
	РегистрСведенийНаборЗаписей_.Отбор.Контрагент.Использование = Истина;
	РегистрСведенийНаборЗаписей_.Отбор.Контрагент.Значение      = КонтрагентИсточник;
	РегистрСведенийНаборЗаписей_.Прочитать();
	
	РегистрСведенийНаборЗаписей.Очистить();
	РегистрСведенийНаборЗаписей.Загрузить(РегистрСведенийНаборЗаписей_.Выгрузить());
	
КонецПроцедуры

//Процедура удаляет записи из набора источника которые есть в результирующем наборе
&НаСервере
Процедура УдалитьЗаписиНоменклатурыИсточника(НаборЗаписейИсточника, ТаблицаПереносимыхЗаписей)
	
	Для Каждого Запись Из НаборЗаписейИсточника Цикл
		
		СтруктураПоиска = Новый Структура("Контрагент,Номенклатура",КонтрагентИсточник, Запись.Номенклатура);
		
		// если такая номенклатура уже есть - ее не переносим
		Если ТаблицаПереносимыхЗаписей.НайтиСтроки(СтруктураПоиска).Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		МенеджерЗаписиИсточника = РегистрыСведений.НоменклатураКонтрагентов.СоздатьМенеджерЗаписи();
		МенеджерЗаписиИсточника.Контрагент = КонтрагентИсточник;
    	МенеджерЗаписиИсточника.Номенклатура = Запись.Номенклатура;
		
		МенеджерЗаписиИсточника.Прочитать();
		МенеджерЗаписиИсточника.Удалить();
				
	КонецЦикла;
	
КонецПроцедуры

// Функция копирует - переносит номенклатуру контрагентов
&НаСервере
Функция КопироватьПеренестиНоменклатуруКонтрагентов()
	
	НаборЗаписей = РегистрыСведений.НоменклатураКонтрагентов.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Контрагент.Использование = Истина;
	НаборЗаписей.Отбор.Контрагент.Значение      = КонтрагентПриемник;
	НаборЗаписей.Прочитать();
	
	ТаблицаНабораЗаписей = НаборЗаписей.Выгрузить();
	
	МетаданныеРегистра = НаборЗаписей.Метаданные();
	СкопированоЗаписейНоменклатуры = 0;
	
	Для каждого Запись из  РегистрСведенийНаборЗаписей Цикл
		
		СтруктураПоиска = Новый Структура("Контрагент,Номенклатура",КонтрагентПриемник,Запись.Номенклатура);
		
		// если такая номенклатура уже есть - ее не переносим
		Если ТаблицаНабораЗаписей.НайтиСтроки(СтруктураПоиска).Количество() > 0 Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяЗапись = НаборЗаписей.Добавить();  
		НоваяЗапись.Контрагент =  КонтрагентПриемник;
		
		// измерения
		Для индекс = 0 по МетаданныеРегистра.Измерения.Количество()-1 Цикл
			Измерение = МетаданныеРегистра.Измерения[индекс].Имя;
			Если Измерение <> "Контрагент" Тогда
				НоваяЗапись[Измерение] =  Запись[Измерение];
			КонецЕсли;
		КонецЦикла;
		
		// ресурсы
		Для индекс = 0 по МетаданныеРегистра.Ресурсы.Количество()-1 Цикл
			Ресурс = МетаданныеРегистра.Ресурсы[индекс].Имя;
			НоваяЗапись[Ресурс] =  Запись[Ресурс];
		КонецЦикла;
		
		СкопированоЗаписейНоменклатуры = СкопированоЗаписейНоменклатуры + 1;
	КонецЦикла;
	
	Попытка
		НаборЗаписей.Записать();
		
		// сколько номенклатурных позиций скопировано
		Если КопироватьНоменклатуру Тогда
			Сообщить("Скопировано " + Строка(СкопированоЗаписейНоменклатуры) + " номенклатурных позиций от " + 
						КонтрагентИсточник.Наименование + " к " + КонтрагентПриемник.Наименование);
		Иначе
			Сообщить("Перенесено " + Строка(СкопированоЗаписейНоменклатуры) + " номенклатурных позиций от " + 
						КонтрагентИсточник.Наименование + " к " + КонтрагентПриемник.Наименование);

	    КонецЕсли;

		// если нужно перенести записи - то очищаем набор
		Если Не КопироватьНоменклатуру Тогда
			
			// по-новому читаем набор записей контрагента источника, так как часть записей может быть удалена
			НаборЗаписейИсточника = РегистрыСведений.НоменклатураКонтрагентов.СоздатьНаборЗаписей();
			НаборЗаписейИсточника.Отбор.Контрагент.Использование = Истина;
			НаборЗаписейИсточника.Отбор.Контрагент.Значение      = КонтрагентИсточник;
			НаборЗаписейИсточника.Прочитать();
            ТаблицаПереноса = РегистрСведенийНаборЗаписей.Выгрузить(); 
			
			УдалитьЗаписиНоменклатурыИсточника(НаборЗаписейИсточника, ТаблицаПереноса);
           
			ЗаполнитьНаборЗаписейНоменклатуры();
			
			// сколько номенклатуры контрагента удалено
			Сообщить("Удалено " + Строка(ТаблицаПереноса.Количество()) + " номенклатурных позиций у контрагента " + 
						КонтрагентИсточник.Наименование);
		КонецЕсли;
		
	Исключение
		ТекстОшибки = ОписаниеОшибки();
		Сообщить(ТекстОшибки);
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;

КонецФункции

&НаСервере
Функция ДействиеВыполнитьНаСервере()
	
	// Перенос номенклатуры контрагентов
	Возврат КопироватьПеренестиНоменклатуруКонтрагентов();
	
КонецФункции

&НаКлиенте
Процедура ДействиеВыполнить(Команда)
	
	Если НЕ ЗначениеЗаполнено(КонтрагентПриемник) Тогда
		ПоказатьПредупреждение(,"Выберите контрагента-приемника для копирования/переноса данных.");
		Возврат;
	КонецЕсли;
	
	Если КонтрагентИсточник = КонтрагентПриемник Тогда
		ПоказатьПредупреждение(,"Контрагент-приемник и контрагент-источник совпадают.");
		Возврат;	
	КонецЕсли;
	
	Если ДействиеВыполнитьНаСервере() Тогда
		Если КопироватьНоменклатуру Тогда
			ПоказатьПредупреждение(,"Копирование данных успешно завершено.",10);
		Иначе
			ПоказатьПредупреждение(,"Перенос данных успешно завершен.",10);
		КонецЕсли;	
	Иначе
		ПоказатьПредупреждение(,"Произошла ошибка при копировании/переносе номенклатуры контрагентов.");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	УстановитьЗаголовокКнопкиКопировать();
КонецПроцедуры

&НаКлиенте
Процедура УстановитьЗаголовокКнопкиКопировать()
	
	Если КопироватьНоменклатуру Тогда
		Элементы.ФормаДействиеВыполнить.Заголовок = НСтр("ru='Копировать';uk= 'Копіювати'");
	Иначе
		Элементы.ФормаДействиеВыполнить.Заголовок = НСтр("ru='Перенести';uk= 'Перенести'");
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПереноситьНоменклатуруПриИзменении(Элемент)
	УстановитьЗаголовокКнопкиКопировать();
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентИсточникПриИзменении(Элемент)
	ОбновитьДанныеДляКонтрагента();
КонецПроцедуры


