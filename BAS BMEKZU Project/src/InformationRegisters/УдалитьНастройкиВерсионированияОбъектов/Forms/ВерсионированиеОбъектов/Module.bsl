

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	ЗаполнитьТипыОбъектовВДеревеЗначений();
	
	СписокВыбораПолный = Новый СписокЗначений;
	СписокВыбораПолный.Добавить(Перечисления.ВариантыВерсионированияОбъектов.ВерсионироватьПриЗаписи);
	СписокВыбораПолный.Добавить(Перечисления.ВариантыВерсионированияОбъектов.ВерсионироватьПриПроведении);
	СписокВыбораПолный.Добавить(Перечисления.ВариантыВерсионированияОбъектов.НеВерсионировать);
	
	СписокВыбораБезПроведения = Новый СписокЗначений;
	СписокВыбораБезПроведения.Добавить(Перечисления.ВариантыВерсионированияОбъектов.ВерсионироватьПриЗаписи);
	СписокВыбораБезПроведения.Добавить(Перечисления.ВариантыВерсионированияОбъектов.НеВерсионировать);
	
	ПоказыватьНастройкиОчисткиУстаревшихВерсий = Не ОбщегоНазначенияПовтИсп.РазделениеВключено();
	Элементы.КоличествоИОбъемХранимыхВерсийОбъектов.Видимость = ПоказыватьНастройкиОчисткиУстаревшихВерсий;
	Элементы.ОчисткаУстаревшихВерсий.Видимость = ПоказыватьНастройкиОчисткиУстаревшихВерсий;
	Элементы.УдалениеВерсийПоРасписанию.Видимость = ПоказыватьНастройкиОчисткиУстаревшихВерсий;
	Элементы.СрокХраненияВерсий.Видимость = ПоказыватьНастройкиОчисткиУстаревшихВерсий;
	Элементы.УстановитьСрокХраненияВерсий.Видимость = ПоказыватьНастройкиОчисткиУстаревшихВерсий;
	Если ПоказыватьНастройкиОчисткиУстаревшихВерсий Тогда
		Элементы.Расписание.Заголовок = ТекущееРасписание();
		АвтоматическиУдалятьУстаревшиеВерсии = РегламентныеЗадания.НайтиПредопределенное(Метаданные.РегламентныеЗадания.ОчисткаУстаревшихВерсийОбъектов).Использование;
		ОбновитьИнформациюОбУстаревшихВерсиях();
	КонецЕсли;
	
	ОбновитьИнформациюОбУстаревшихВерсиях();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ВариантВерсионированияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	СтрокаДерева = Элементы.ДеревоОбъектовМетаданных.ТекущиеДанные;
	СтрокаДерева.ВариантВерсионирования = ВыбранноеЗначение;
	
	ТипОбъекта             = СтрокаДерева.ТипОбъекта;
	ВариантВерсионирования = СтрокаДерева.ВариантВерсионирования;
	
	ЗаписатьНастройкуВерсионирования(ТипОбъекта, ВариантВерсионирования);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДеревоОбъектовМетаданных

&НаКлиенте
Процедура ДеревоОбъектовМетаданныхПередНачаломИзменения(Элемент, Отказ)
	
	Если Элемент.ТекущиеДанные.ПолучитьРодителя() = Неопределено Тогда
		Отказ = Истина;
	КонецЕсли;
	
	Если Элемент.ТекущийЭлемент = Элементы.ВариантВерсионирования Тогда
		ЗаполнитьСписокВыбора(Элементы.ДеревоОбъектовМетаданных.ТекущийЭлемент);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура УстановитьВариантВерсионированияНеВерсионировать(Команда)
	
	УстановитьВариантВерсионированияДляВыделенныхСтрок(
		ПредопределенноеЗначение("Перечисление.ВариантыВерсионированияОбъектов.НеВерсионировать"));	
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьРежимВерсионированияПриЗаписи(Команда)
	
	УстановитьВариантВерсионированияДляВыделенныхСтрок(
		ПредопределенноеЗначение("Перечисление.ВариантыВерсионированияОбъектов.ВерсионироватьПриЗаписи"));	
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВариантВерсионированияПриПроведении(Команда)
	
	Если ВыбранТипДокументовБезВозможностиПроведения() Тогда
		ПоказатьПредупреждение(, НСтр("ru='Документам, которые не могут быть проведены, установлен режим версионирования ""Версионировать при записи"".';uk='Документам, які не можуть бути проведені, установлений режим версіонування ""Версіонувати під час запису"".'"));
	КонецЕсли;
	
	УстановитьВариантВерсионированияДляВыделенныхСтрок(
		ПредопределенноеЗначение("Перечисление.ВариантыВерсионированияОбъектов.ВерсионироватьПриПроведении"));	
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьНастройкиПоУмолчанию(Команда)
	
	УстановитьВариантВерсионированияДляВыделенныхСтрок(Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура Обновить(Команда)
	ЗаполнитьТипыОбъектовВДеревеЗначений();
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ЗаполнитьСписокВыбора(Элемент)
	
	СтрокаДерева = Элементы.ДеревоОбъектовМетаданных.ТекущиеДанные;
	
	Элемент.СписокВыбора.Очистить();
	
	Если СтрокаДерева.КлассОбъекта = "КлассДокументы" И СтрокаДерева.Проводится Тогда
		СписокВыбора = СписокВыбораПолный;
	Иначе
		СписокВыбора = СписокВыбораБезПроведения;
	КонецЕсли;
	
	Для Каждого ЭлементСписка Из СписокВыбора Цикл
		Элемент.СписокВыбора.Добавить(ЭлементСписка.Значение);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТипыОбъектовВДеревеЗначений()
	
	НастройкиВерсионирования = ТекущиеНастройкиВерсионирования();
	
	ДеревоОМ = РеквизитФормыВЗначение("ДеревоОбъектовМетаданных");
	ДеревоОМ.Строки.Очистить();
	
	// Тип параметра команды ИсторияИзменений содержит состав объектов для которых 
	// применяется версионирование
	МассивТипов = Метаданные.ОбщиеКоманды.ИсторияИзменений.ТипПараметраКоманды.Типы();
	
	// ИНАРО++
	ИНАГРО_МассивТипов = Метаданные.ОбщиеКоманды.ИНАГРО_ИсторияИзменений.ТипПараметраКоманды.Типы();	
	Для Каждого Элемент Из ИНАГРО_МассивТипов Цикл
		 МассивТипов.Добавить(Элемент);
	КонецЦикла;	
	// ИНАГРО--
	
	ЕстьСправочники = Ложь;
	ЕстьДокументы = Ложь;
	ВсеСправочники = Справочники.ТипВсеСсылки();
	ВсеДокументы = Документы.ТипВсеСсылки();
	УзелСправочники = Неопределено;
	УзелДокументы = Неопределено;
	УзелБизнесПроцессы = Неопределено;
	
	Для Каждого Тип Из МассивТипов Цикл
		Если ВсеСправочники.СодержитТип(Тип) Тогда
			Если УзелСправочники = НеОпределено Тогда
				УзелСправочники = ДеревоОМ.Строки.Добавить();
				УзелСправочники.СинонимНаименованияОбъекта = НСтр("ru='Справочники';uk='Довідники'");
				УзелСправочники.КлассОбъекта = "01КлассСправочникиКорень";
				УзелСправочники.КодКартинки = 2;
			КонецЕсли;
			НоваяСтрокаТаблицы = УзелСправочники.Строки.Добавить();
			НоваяСтрокаТаблицы.КодКартинки = 19;
			НоваяСтрокаТаблицы.КлассОбъекта = "КлассСправочники";
		ИначеЕсли ВсеДокументы.СодержитТип(Тип) Тогда
			Если УзелДокументы = НеОпределено Тогда
				УзелДокументы = ДеревоОМ.Строки.Добавить();
				УзелДокументы.СинонимНаименованияОбъекта = НСтр("ru='Документы';uk='Документи'");
				УзелДокументы.КлассОбъекта = "02КлассДокументыКорень";
				УзелДокументы.КодКартинки = 3;
			КонецЕсли;
			НоваяСтрокаТаблицы = УзелДокументы.Строки.Добавить();
			НоваяСтрокаТаблицы.КодКартинки = 20;
			НоваяСтрокаТаблицы.КлассОбъекта = "КлассДокументы";
		ИначеЕсли БизнесПроцессы.ТипВсеСсылки().СодержитТип(Тип) Тогда
			Если УзелБизнесПроцессы = Неопределено Тогда
				УзелБизнесПроцессы = ДеревоОМ.Строки.Добавить();
				УзелБизнесПроцессы.СинонимНаименованияОбъекта = НСтр("ru='Бизнес-процессы';uk='Бізнес-процеси'");
				УзелДокументы.КлассОбъекта = "03БизнесПроцессыКорень";
				УзелБизнесПроцессы.ТипОбъекта = "БизнесПроцессы";
			КонецЕсли;
			НоваяСтрокаТаблицы = УзелБизнесПроцессы.Строки.Добавить();
			НоваяСтрокаТаблицы.КлассОбъекта = "КлассБизнесПроцессы";
		КонецЕсли;
		МетаданныеОбъекта = Метаданные.НайтиПоТипу(Тип);
		НоваяСтрокаТаблицы.ТипОбъекта = МетаданныеОбъекта.ПолноеИмя();
		НоваяСтрокаТаблицы.СинонимНаименованияОбъекта = МетаданныеОбъекта.Синоним;
		
		НайденныеНастройки = НастройкиВерсионирования.НайтиСтроки(Новый Структура("ТипОбъекта", НоваяСтрокаТаблицы.ТипОбъекта));
		Если НайденныеНастройки.Количество() > 0 Тогда
			НоваяСтрокаТаблицы.ВариантВерсионирования = НайденныеНастройки[0].ВариантВерсионирования;
			НоваяСтрокаТаблицы.СрокХраненияВерсий = НайденныеНастройки[0].СрокХраненияВерсий;
			Если Не ЗначениеЗаполнено(НайденныеНастройки[0].СрокХраненияВерсий) Тогда
				НоваяСтрокаТаблицы.СрокХраненияВерсий = Перечисления.СрокиХраненияВерсий.Бессрочно;
			КонецЕсли;
		Иначе
			НоваяСтрокаТаблицы.ВариантВерсионирования = Перечисления.ВариантыВерсионированияОбъектов.НеВерсионировать;
			НоваяСтрокаТаблицы.СрокХраненияВерсий = Перечисления.СрокиХраненияВерсий.Бессрочно;
		КонецЕсли;
		
		Если НоваяСтрокаТаблицы.КлассОбъекта = "КлассДокументы" Тогда
			НоваяСтрокаТаблицы.Проводится = ? (МетаданныеОбъекта.Проведение = Метаданные.СвойстваОбъектов.Проведение.Разрешить, Истина, Ложь);
		КонецЕсли;
	КонецЦикла;
	ДеревоОМ.Строки.Сортировать("КлассОбъекта");
	Для Каждого УзелВерхнегоУровня Из ДеревоОМ.Строки Цикл
		УзелВерхнегоУровня.Строки.Сортировать("СинонимНаименованияОбъекта");
	КонецЦикла;
	ЗначениеВРеквизитФормы(ДеревоОМ, "ДеревоОбъектовМетаданных");
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаписатьНастройкуВерсионирования(Знач ТипОбъекта, Знач ВариантВерсионирования)
	
	ВерсионированиеОбъектов.ЗаписатьНастройкуВерсионированияПоОбъекту(ТипОбъекта, ВариантВерсионирования);
	
КонецПроцедуры

&НаКлиенте
Функция ВыбранТипДокументовБезВозможностиПроведения()
	
	Для Каждого ИдентификаторСтроки Из Элементы.ДеревоОбъектовМетаданных.ВыделенныеСтроки Цикл
		ЭлементДерева = ДеревоОбъектовМетаданных.НайтиПоИдентификатору(ИдентификаторСтроки);
		Если ЭлементДерева.КлассОбъекта = "КлассДокументы" И Не ЭлементДерева.Проводится Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

&НаСервере
Процедура УстановитьВариантВерсионированияДляВыделенныхСтрок(Знач ВариантВерсионирования)
	
	Для Каждого ИдентификаторСтроки Из Элементы.ДеревоОбъектовМетаданных.ВыделенныеСтроки Цикл
		ЭлементДерева = ДеревоОбъектовМетаданных.НайтиПоИдентификатору(ИдентификаторСтроки);
		Если ЭлементДерева.ПолучитьРодителя() = Неопределено Тогда 
			Для Каждого ПодчиненныйЭлементДерева Из ЭлементДерева.ПолучитьЭлементы() Цикл
				УстановитьВариантВерсионированияДляЭлементаДерева(ПодчиненныйЭлементДерева, ВариантВерсионирования);
			КонецЦикла;
		Иначе
			УстановитьВариантВерсионированияДляЭлементаДерева(ЭлементДерева, ВариантВерсионирования);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВариантВерсионированияДляЭлементаДерева(ЭлементДерева, Знач ВариантВерсионирования)
	
	Если ВариантВерсионирования = Неопределено Тогда
		Если ЭлементДерева.КлассОбъекта = "КлассДокументы" Тогда
			ВариантВерсионирования = Перечисления.ВариантыВерсионированияОбъектов.ВерсионироватьПриПроведении;
		ИначеЕсли ЭлементДерева.ПолучитьРодителя().ТипОбъекта = "БизнесПроцессы" Тогда
			ВариантВерсионирования = Перечисления.ВариантыВерсионированияОбъектов.ВерсионироватьПриСтарте;
		Иначе
			ВариантВерсионирования = Перечисления.ВариантыВерсионированияОбъектов.НеВерсионировать;
		КонецЕсли;
	КонецЕсли;
	
	Если ВариантВерсионирования = Перечисления.ВариантыВерсионированияОбъектов.ВерсионироватьПриПроведении
		И Не ЭлементДерева.Проводится 
		Или ВариантВерсионирования = Перечисления.ВариантыВерсионированияОбъектов.ВерсионироватьПриСтарте
		И ЭлементДерева.КлассОбъекта <> "КлассБизнесПроцессы" Тогда
			ВариантВерсионирования = Перечисления.ВариантыВерсионированияОбъектов.ВерсионироватьПриЗаписи;
	КонецЕсли;
	
	ЭлементДерева.ВариантВерсионирования = ВариантВерсионирования;
	ВерсионированиеОбъектов.ЗаписатьНастройкуВерсионированияПоОбъекту(ЭлементДерева.ТипОбъекта, ВариантВерсионирования);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСрокХраненияВерсийДляВыбранныхОбъектов(СрокХраненияВерсий)
	
	Для Каждого ИдентификаторСтроки Из Элементы.ДеревоОбъектовМетаданных.ВыделенныеСтроки Цикл
		ЭлементДерева = ДеревоОбъектовМетаданных.НайтиПоИдентификатору(ИдентификаторСтроки);
		Если ЭлементДерева.ПолучитьРодителя() = Неопределено Тогда
			Для Каждого ПодчиненныйЭлементДерева Из ЭлементДерева.ПолучитьЭлементы() Цикл
				УстановитьСрокХраненияВерсийДляВыбранногоОбъекта(ПодчиненныйЭлементДерева, СрокХраненияВерсий);
			КонецЦикла;
		Иначе
			УстановитьСрокХраненияВерсийДляВыбранногоОбъекта(ЭлементДерева, СрокХраненияВерсий);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСрокХраненияВерсийДляВыбранногоОбъекта(ВыбранныйОбъект, СрокХраненияВерсий)
	
	ВыбранныйОбъект.СрокХраненияВерсий = СрокХраненияВерсий;
	ЗаписатьТекущиеНастройкиПоОбъекту(ВыбранныйОбъект.ТипОбъекта, ВыбранныйОбъект.ВариантВерсионирования, СрокХраненияВерсий);
	
КонецПроцедуры

&НаКлиенте
Процедура СрокХраненияВерсийПриИзменении(Элемент)
	ТекущиеДанные = Элементы.ДеревоОбъектовМетаданных.ТекущиеДанные;
	ЗаписатьТекущиеНастройкиПоОбъекту(ТекущиеДанные.ТипОбъекта, ТекущиеДанные.ВариантВерсионирования, ТекущиеДанные.СрокХраненияВерсий);
	ОбновитьИнформациюОбУстаревшихВерсиях();
КонецПроцедуры

&НаСервере
Процедура ЗаписатьТекущиеНастройкиПоОбъекту(ТипОбъекта, ВариантВерсионирования, СрокХраненияВерсий)
	Настройка = РегистрыСведений.НастройкиВерсионированияОбъектов.СоздатьМенеджерЗаписи();
	Настройка.ТипОбъекта = ТипОбъекта;
	Настройка.Вариант = ВариантВерсионирования;
	Настройка.СрокХраненияВерсий = СрокХраненияВерсий;
	Настройка.Записать();
КонецПроцедуры

&НаСервере
Функция ТекущиеНастройкиВерсионирования()
	УстановитьПривилегированныйРежим(Истина);
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	НастройкиВерсионированияОбъектов.ТипОбъекта КАК ТипОбъекта,
	|	НастройкиВерсионированияОбъектов.Вариант КАК ВариантВерсионирования,
	|	НастройкиВерсионированияОбъектов.СрокХраненияВерсий КАК СрокХраненияВерсий
	|ИЗ
	|	РегистрСведений.НастройкиВерсионированияОбъектов КАК НастройкиВерсионированияОбъектов";
	Запрос = Новый Запрос(ТекстЗапроса);
	Возврат Запрос.Выполнить().Выгрузить();
КонецФункции


&НаКлиенте
Процедура ЗаПоследнююНеделю(Команда)
	УстановитьСрокХраненияВерсийДляВыбранныхОбъектов(
		ПредопределенноеЗначение("Перечисление.СрокиХраненияВерсий.ЗаПоследнююНеделю"));
КонецПроцедуры

&НаКлиенте
Процедура ЗаПоследнийМесяц(Команда)
	УстановитьСрокХраненияВерсийДляВыбранныхОбъектов(
		ПредопределенноеЗначение("Перечисление.СрокиХраненияВерсий.ЗаПоследнийМесяц"));
КонецПроцедуры

&НаКлиенте
Процедура ЗаПоследниеТриМесяца(Команда)
	УстановитьСрокХраненияВерсийДляВыбранныхОбъектов(
		ПредопределенноеЗначение("Перечисление.СрокиХраненияВерсий.ЗаПоследниеТриМесяца"));
КонецПроцедуры

&НаКлиенте
Процедура ЗаПоследниеШестьМесяцев(Команда)
	УстановитьСрокХраненияВерсийДляВыбранныхОбъектов(
		ПредопределенноеЗначение("Перечисление.СрокиХраненияВерсий.ЗаПоследниеШестьМесяцев"));
КонецПроцедуры

&НаКлиенте
Процедура ЗаПоследнийГод(Команда)
	УстановитьСрокХраненияВерсийДляВыбранныхОбъектов(
		ПредопределенноеЗначение("Перечисление.СрокиХраненияВерсий.ЗаПоследнийГод"));
КонецПроцедуры

&НаКлиенте
Процедура Бессрочно(Команда)
	УстановитьСрокХраненияВерсийДляВыбранныхОбъектов(
		ПредопределенноеЗначение("Перечисление.СрокиХраненияВерсий.Бессрочно"));
КонецПроцедуры

&НаКлиенте
Процедура ВерсионироватьПриСтарте(Команда)
	УстановитьВариантВерсионированияДляВыделенныхСтрок(
		ПредопределенноеЗначение("Перечисление.ВариантыВерсионированияОбъектов.ВерсионироватьПриСтарте"));
КонецПроцедуры

&НаКлиенте
Процедура НастроитьРасписание(Команда)
	ДиалогРасписания = Новый ДиалогРасписанияРегламентногоЗадания(ТекущееРасписание());
	ОписаниеОповещения = Новый ОписаниеОповещения("НастроитьРасписаниеЗавершение", ЭтотОбъект);
	ДиалогРасписания.Показать(ОписаниеОповещения);
КонецПроцедуры

&НаКлиенте
Процедура НастроитьРасписаниеЗавершение(Расписание, ДополнительныеПараметры) Экспорт
	Если Расписание = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьРасписаниеРегламентногоЗадания(Расписание);
	Элементы.Расписание.Заголовок = Расписание;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьРасписаниеРегламентногоЗадания(Расписание);
	РегламентноеЗадание = РегламентныеЗадания.НайтиПредопределенное(Метаданные.РегламентныеЗадания.ОчисткаУстаревшихВерсийОбъектов);
	РегламентноеЗадание.Расписание = Расписание;
	РегламентноеЗадание.Записать();
КонецПроцедуры

&НаСервере
Функция ТекущееРасписание()
	Возврат РегламентныеЗадания.НайтиПредопределенное(Метаданные.РегламентныеЗадания.ОчисткаУстаревшихВерсийОбъектов).Расписание;
КонецФункции

&НаКлиенте
Процедура АвтоматическиУдалятьУстаревшиеВерсииПриИзменении(Элемент)
	ВключитьОтключитьРегламентноеЗадание();
КонецПроцедуры

&НаСервере
Процедура ВключитьОтключитьРегламентноеЗадание()
	РегламентноеЗадание = РегламентныеЗадания.НайтиПредопределенное(Метаданные.РегламентныеЗадания.ОчисткаУстаревшихВерсийОбъектов);
	РегламентноеЗадание.Использование = Не РегламентноеЗадание.Использование;
	РегламентноеЗадание.Записать();
КонецПроцедуры

&НаКлиенте
Процедура Очистить(Команда)
	ЗапуститьРегламентноеЗадание();
	ПодключитьОбработчикОжидания("ПроверитьВыполнениеФоновогоЗадания", 2, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыполнениеФоновогоЗадания()
	Если Не ЗаданиеВыполнено(ИдентификаторФоновогоЗадания) Тогда
		ПодключитьОбработчикОжидания("ПроверитьВыполнениеФоновогоЗадания", 5, Истина);
	Иначе
		ИдентификаторФоновогоЗадания = "";
		ОбновитьИнформациюОбУстаревшихВерсиях();
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗаданиеВыполнено(ИдентификаторФоновогоЗадания)
	Возврат ДлительныеОперации.ЗаданиеВыполнено(ИдентификаторФоновогоЗадания);
КонецФункции

&НаСервере
Процедура ЗапуститьРегламентноеЗадание()
	
	РегламентноеЗадание = РегламентныеЗадания.НайтиПредопределенное(Метаданные.РегламентныеЗадания.ОчисткаУстаревшихВерсийОбъектов);
	
	Отбор = Новый Структура;
	Отбор.Вставить("РегламентноеЗадание", РегламентноеЗадание);
	Отбор.Вставить("Состояние", СостояниеФоновогоЗадания.Активно);
	ФоновыеЗаданияОчистки = ФоновыеЗадания.ПолучитьФоновыеЗадания(Отбор);
	Если ФоновыеЗаданияОчистки.Количество() > 0 Тогда
		ИдентификаторФоновогоЗадания = ФоновыеЗаданияОчистки[0].УникальныйИдентификатор;
	Иначе
		НаименованиеФоновогоЗадания = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Запуск вручную: %1';uk='Запуск вручну: %1'"), РегламентноеЗадание.Метаданные.Синоним);
		
		ФоновоеЗадание = ФоновыеЗадания.Выполнить(
			РегламентноеЗадание.Метаданные.ИмяМетода,
			РегламентноеЗадание.Параметры,
			Строка(РегламентноеЗадание.УникальныйИдентификатор),
			НаименованиеФоновогоЗадания);
			
		ИдентификаторФоновогоЗадания = ФоновоеЗадание.УникальныйИдентификатор;
	КонецЕсли;
	
	ОбновитьИнформациюОбУстаревшихВерсиях();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьИнформациюОбУстаревшихВерсиях()
	
	Элементы.Очистить.Доступность = Не ЗначениеЗаполнено(ИдентификаторФоновогоЗадания);
	Если ЗначениеЗаполнено(ИдентификаторФоновогоЗадания) Тогда
		Элементы.ИнформацияОбУстаревшихВерсиях.Заголовок = НСтр("ru='Выполняется очистка устаревших версий...';uk='Виконується очищення застарілих версій...'");
		Возврат;
	КонецЕсли;
	
	ИнформацияОбУстаревшихВерсиях = ВерсионированиеОбъектов.ИнформацияОбУстаревшихВерсиях();
	
	Если ИнформацияОбУстаревшихВерсиях.РазмерДанных > 0 Тогда
		Элементы.ИнформацияОбУстаревшихВерсиях.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Всего устаревших версий: %1 (%2)';uk='Всього застарілих версій: %1 (%2)'"),
			ИнформацияОбУстаревшихВерсиях.КоличествоВерсий,
			ВерсионированиеОбъектов.РазмерДанныхСтрокой(ИнформацияОбУстаревшихВерсиях.РазмерДанных));
	Иначе
		Элементы.ИнформацияОбУстаревшихВерсиях.Заголовок = НСтр("ru='Всего устаревших версий: нет';uk='Всього застарілих версій: немає'");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КоличествоИОбъемХранимыхВерсийОбъектов(Команда)
	ОткрытьФорму("Отчет.АнализВерсийОбъектов.ФормаОбъекта");
КонецПроцедуры

#КонецОбласти




