#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Функция получает элемент справочника - ключ аналитики учета культуры.
//
// Параметры:
//	ПараметрыАналитики - Выборка или Структура с полями "Номенклатура, Договор, Контрагент, Склад, УрожайЮ ВидХранения, ВидФасовки, МестоХранения".
//
// Возвращаемое значение:
//	СправочникСсылка.КлючиАналитикиУчетаКультуры - Созданный элемент справочника
//
Функция ЗначениеКлючаАналитики(ПараметрыАналитики) Экспорт

	МенеджерЗаписи = ПолучитьМенеджерЗаписи(ПараметрыАналитики);
	
	Если МенеджерЗаписи <> Неопределено Тогда
		МенеджерЗаписи.Прочитать();
		
		Если МенеджерЗаписи.Выбран()
		 И Не ЗначениеЗаполнено(МенеджерЗаписи.КлючАналитики) Тогда
			МенеджерЗаписи.Удалить();
		КонецЕсли;

		Если МенеджерЗаписи.Выбран() И ЗначениеЗаполнено(МенеджерЗаписи.КлючАналитики) Тогда
			Результат = МенеджерЗаписи.КлючАналитики;
		Иначе
			Результат = СоздатьКлючАналитики(ПараметрыАналитики);
		КонецЕсли;

		Возврат Результат;
	КонецЕсли;

КонецФункции

// Функция получает элемент справочника - ключ аналитики учета.
//
// Параметры:
//	ПараметрыАналитики - Выборка или Структура  с полями "Номенклатура, Договор, Контрагент, Склад, УрожайЮ ВидХранения, ВидФасовки, МестоХранения".
//
// Возвращаемое значение:
//	СправочникСсылка.КлючиАналитикиУчетаКультуры - Созданный элемент справочника
//
Функция СоздатьКлючАналитики(ПараметрыАналитики) Экспорт
	
	Если ЗначениеЗаполнено(ПараметрыАналитики.Номенклатура) Тогда
		МенеджерЗаписи = ПолучитьМенеджерЗаписи(ПараметрыАналитики);
		
		Если МенеджерЗаписи <> Неопределено Тогда

			// Создание нового ключа аналитики.
			СправочникОбъект = Справочники.СМС_КлючиАналитикиУчетаКультуры.СоздатьЭлемент();
			СправочникОбъект.Наименование = ПолучитьПолноеНаименованиеКлючаАналитики(МенеджерЗаписи);
			ЗаполнитьЗначенияСвойств(СправочникОбъект, ПараметрыАналитики, "Номенклатура, Договор, Контрагент, Склад, Урожай, ВидХранения, ВидФасовки, МестоХранения");
			СправочникОбъект.Записать();

			Результат = СправочникОбъект.Ссылка;

			МенеджерЗаписи.КлючАналитики = Результат;
			МенеджерЗаписи.Записать(Ложь);

			Возврат Результат;
			
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

// Заполняет поле АналитикаУчетаКультуры в коллекции, содержащей организацию, номенклатуру, владельца, договор, склад, урожай, вид хранения, вид фасовки, место хранения.
// Места учета и имена полей для мест учета трактуются следующим образом:
//	для ключей, кроме Произвольный:
//		если имя поля указано (есть ключ в структуре) и значение заполнено, то выбирать данные из этого поля коллекции;
//		если имя поля указано, но значение не заполнено ("" или Неопределено), то данные всегда устанавливать из мест учета;
//		если имя поля не указано, то смотрится заполнение ключа Произвольный;
//	для ключа Произвольный:
//		если значение имени поля заполнено, то все типы номенклатуры, которые не упомянуты в других ключах, выбирают
//		данные из этого поля коллекции, если в поле коллекции значение не задано, то данные устанавливаются из мест учета;
//		если значение поля не заполнено, то данные всегда устанавливаются из мест учета;
//
// Параметры:
//
//	Коллекция - Коллекция типа ТабличнаяЧасть
//
//	МестаУчета - Структура - {Произвольный [, Товар, МногооборотнаяТара, Услуга, Работа]}, ключ Произвольный обязателен.
//		задает значения общих места учета по типам номенклатуры и определяет, как заполняется поле Склад в аналитике,
//		если в коллекции нет данных для заполнения (нет полей или поле не заполнено).
//		для примера см. метод МестаУчета(...)
//
//	ИменаПолей - Структура - содержит реальные имена полей коллекции для получения и формирования аналитики.
//		содержит две секции, если значение ключа Неопределено, то имя поля берется из имени ключа.
//		секция идентификации {Номенклатура, Характеристика, АналитикаУчетаКультуры [, СтатусУказанияСерий, Серия]},
//			ключи определения полей серии необязательны, использование серий определяется по полю СтатусУказанияСерий.
//		секция места учета {Произвольный [, Товар, МногооборотнаяТара, Услуга, Работа]}, ключ Произвольный обязателен.
//		по умолчанию заполняется методом ИменаПолейКоллекцииПоУмолчанию(...)
//			("Номенклатура, Характеристика, Серия, АналитикаУчетаКультуры, Произвольный, Работа",
//			"Номенклатура", "Характеристика", "Серия", "АналитикаУчетаКультуры", "", "")
//
// Пример 1:
//	МестаУчета = РегистрыСведений.АналитикаУчетаКультуры.МестаУчета(
//		ЭтотОбъект.ХозяйственнаяОперация, ЭтотОбъект.СкладОтправитель, Неопределено, Неопределено);
//	ИменаПолей = РегистрыСведений.АналитикаУчетаКультуры.ИменаПолейКоллекцииПоУмолчанию();
//	ИменаПолей.СтатусУказанияСерий = "СтатусУказанияСерийОтправитель";
//	РегистрыСведений.АналитикаУчетаКультуры.ЗаполнитьВКоллекции(Товары, МестаУчета, ИменаПолей);
//
// Пример 2:
//	МестаУчета = Новый Структура("Произвольный, Работа", ЭтотОбъект.Партнер, ЭтотОбъект.Подразделение)
//	РегистрыСведений.АналитикаУчетаКультуры.ЗаполнитьВКоллекции(Товары, МестаУчета);
//
Процедура ЗаполнитьВКоллекции(Коллекция, МестаУчета, ИменаПолей = Неопределено) Экспорт
	УстановитьПривилегированныйРежим(Истина);
	
	Если ИменаПолей = Неопределено Тогда
		ИменаПолей = ИменаПолейКоллекцииПоУмолчанию();
	КонецЕсли;

	Запрос = Новый Запрос(ТекстЗначенияКлючейАналитикиВКоллекции(ИменаПолей));
	Запрос.УстановитьПараметр("Коллекция", Коллекция);
	//Запрос.УстановитьПараметр("МестаУчетаТовар", ?(МестаУчета.Свойство("Товар"), МестаУчета.Товар, МестаУчета.Произвольный));
	//Запрос.УстановитьПараметр("МестаУчетаМногооборотнаяТара", ?(МестаУчета.Свойство("МногооборотнаяТара"), МестаУчета.МногооборотнаяТара, МестаУчета.Произвольный));
	//Запрос.УстановитьПараметр("МестаУчетаУслуга", ?(МестаУчета.Свойство("Услуга"), МестаУчета.Услуга, МестаУчета.Произвольный));
	//Запрос.УстановитьПараметр("МестаУчетаРабота", ?(МестаУчета.Свойство("Работа"), МестаУчета.Работа, МестаУчета.Произвольный));

	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Не ЗначениеЗаполнено(Выборка.АналитикаУчетаКультуры) Тогда
			КлючАналитики = ЗначениеКлючаАналитики(Выборка)
		Иначе
			КлючАналитики = Выборка.АналитикаУчетаКультуры;
		КонецЕсли;
		Коллекция[Выборка.Индекс][ИменаПолей.АналитикаУчетаКультуры] = КлючАналитики;
	КонецЦикла;
КонецПроцедуры

// Возвращает структуру полей выбора информации из коллекции для формирования аналитики учета номенклатуры.
//
// Возвращаемое значение:
//	Структура - содержит реальные имена полей коллекции для получения и формирования аналитики.
//		содержит две секции, если значение ключа Неопределено, то имя поля должно браться из имени ключа.
//		секция идентификации {Номенклатура, Характеристика, АналитикаУчетаКультуры, СтатусУказанияСерий, Серия},
//			все ключи заданы.
//		секция места учета {Произвольный, [Товар, ВозвратнаяТара, Услуга, ] Работа}, ключи Произвольный и Работа заданы.
//			реквизиты этой секции должны содержать имена колонок коллекции, откуда надо брать значения для одноименных
//			типов номенклатуры.
//
Функция ИменаПолейКоллекцииПоУмолчанию() Экспорт
	Возврат Новый Структура(
		"Номенклатура, Договор, Контрагент, Склад, Урожай, ВидХранения, ВидФасовки, МестоХранения, АналитикаУчетаКультуры",
		"Номенклатура", "Договор", "Контрагент", "Склад", "Урожай", "ВидХранения", "ВидФасовки", "МестоХранения", "АналитикаУчетаКультуры");
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Прочее

Функция ПолучитьМенеджерЗаписи(ПараметрыАналитики)
	
	// В параметрах аналитики могут быть не все свойства
	СтруктураАналитики = Новый Структура("Номенклатура, Договор, Контрагент, Склад, Урожай, ВидХранения, ВидФасовки, МестоХранения");
	ЗаполнитьЗначенияСвойств(СтруктураАналитики, ПараметрыАналитики);
	Если НЕ ЗначениеЗаполнено(СтруктураАналитики.Номенклатура)
	 И НЕ ЗначениеЗаполнено(СтруктураАналитики.Договор)
	 И НЕ ЗначениеЗаполнено(СтруктураАналитики.Контрагент) 
	 И НЕ ЗначениеЗаполнено(СтруктураАналитики.Склад) Тогда
		Возврат Неопределено
	Иначе 
		МенеджерЗаписи = РегистрыСведений.СМС_АналитикаУчетаКультуры.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(МенеджерЗаписи, ПараметрыАналитики, "Номенклатура, Договор, Контрагент, Склад, Урожай, ВидХранения, ВидФасовки, МестоХранения");
		ПроверитьЗаполнениеПоляСклад(МенеджерЗаписи);
		Возврат МенеджерЗаписи;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьПолноеНаименованиеКлючаАналитики(МенеджерЗаписи)

	Возврат СокрЛП(МенеджерЗаписи.Номенклатура) + "; " 
		+ СокрЛП(МенеджерЗаписи.Договор) + "; " + СокрЛП(МенеджерЗаписи.Контрагент) + "; " + СокрЛП(МенеджерЗаписи.Склад) + "; " 
		+ ?(ЗначениеЗаполнено(МенеджерЗаписи.Урожай), СокрЛП(МенеджерЗаписи.Урожай) + "; ", "")
		+ ?(ЗначениеЗаполнено(МенеджерЗаписи.ВидХранения), СокрЛП(МенеджерЗаписи.ВидХранения) + "; ", "")
		+ ?(ЗначениеЗаполнено(МенеджерЗаписи.ВидФасовки), СокрЛП(МенеджерЗаписи.ВидФасовки) + "; ", "")
		+ ?(ЗначениеЗаполнено(МенеджерЗаписи.МестоХранения), СокрЛП(МенеджерЗаписи.МестоХранения) + "; ", "");

КонецФункции

Процедура ПроверитьЗаполнениеПоляСклад(МенеджерЗаписиАналитикаУчетаКультуры)

	Если МенеджерЗаписиАналитикаУчетаКультуры.Склад = Неопределено Тогда
		ВызватьИсключение НСтр("ru='Ошибочное значение парамера ""Склад""';uk='Помилкове значення параметру ""Склад""'");
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ЗаполнениеКлючейАналитикиВКоллекции

Функция ТекстЗначенияКлючейАналитикиВКоллекции(ИменаПолей)
	ТекстЗапроса = "
		|ВЫБРАТЬ
		|	Коллекция.НомерСтроки - 1 КАК Индекс,
		|	&ПолеАналитика КАК АналитикаУчетаКультуры,
		|	&ПолеНоменклатура КАК Номенклатура,
		|	&ПолеДоговор КАК Договор,
		|	&ПолеКонтрагент КАК Контрагент,
		|	&ПолеСклад КАК Склад,
		|	&ПолеУрожай КАК Урожай,
		|	&ПолеВидХранения КАК ВидХранения,
		|	&ПолеВидФасовки КАК ВидФасовки,
		|	&ПолеМестоХранения КАК МестоХранения
		|
		|ПОМЕСТИТЬ Коллекция
		|ИЗ &Коллекция КАК Коллекция;
		|
		|ВЫБРАТЬ
		|	Коллекция.Индекс,
		|	Аналитика.КлючАналитики КАК АналитикаУчетаКультуры,
		|	Коллекция.Номенклатура,
		|	Коллекция.Договор,
		|	Коллекция.Контрагент,
		|	Коллекция.Склад,
		|	Коллекция.Урожай,
		|	Коллекция.ВидХранения,
		|	Коллекция.ВидФасовки,
		|	Коллекция.МестоХранения
		|ИЗ
		|	Коллекция КАК Коллекция
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СН
		|		ПО СН.Ссылка = Коллекция.Номенклатура
		|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СМС_АналитикаУчетаКультуры КАК Аналитика
		|		ПО Аналитика.Номенклатура = Коллекция.Номенклатура 
		|		И Аналитика.Договор = Коллекция.Договор
		|		И Аналитика.Контрагент = Коллекция.Контрагент 
		|		И Аналитика.Склад = Коллекция.Склад 
		|		И Аналитика.Урожай = Коллекция.Урожай 
		|		И Аналитика.ВидХранения = Коллекция.ВидХранения 
		|		И Аналитика.ВидФасовки = Коллекция.ВидФасовки
		|		И Аналитика.МестоХранения = Коллекция.МестоХранения
		|		
		|ГДЕ
		|	Аналитика.КлючАналитики ЕСТЬ NULL
		|	ИЛИ Аналитика.КлючАналитики <> Коллекция.АналитикаУчетаКультуры
		|	ИЛИ Аналитика.КлючАналитики = ЗНАЧЕНИЕ(Справочник.СМС_КлючиАналитикиУчетаКультуры.ПустаяСсылка)
		|";
	
	// заменим в тексте запроса подставляемые поля из структуры ИменаПолей
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПолеАналитика", "Коллекция." + ИменаПолей.АналитикаУчетаКультуры);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПолеНоменклатура", "Коллекция." + ИменаПолей.Номенклатура);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПолеДоговор", "Коллекция." + ИменаПолей.Договор);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПолеКонтрагент", "Коллекция." + ИменаПолей.Контрагент);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПолеСклад", "Коллекция." + ИменаПолей.Склад);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПолеУрожай", "Коллекция." + ИменаПолей.Урожай);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПолеВидХранения", "Коллекция." + ИменаПолей.ВидХранения);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПолеВидФасовки", "Коллекция." + ИменаПолей.ВидФасовки);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПолеМестоХранения", "Коллекция." + ИменаПолей.МестоХранения);
		
	//// Поля серии могут быть не заданы
	//СерииУказываются = ИменаПолей.Свойство("СтатусУказанияСерий") И ЗначениеЗаполнено(ИменаПолей.СтатусУказанияСерий);
	//ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПолеСерия", ?(СерииУказываются, "Коллекция." + ИменаПолей.Серия, "НЕОПРЕДЕЛЕНО"));
	//ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&СтатусУказанияСерий", ?(СерииУказываются, "Коллекция." + ИменаПолей.СтатусУказанияСерий, "0"));
	//
	//// сформируем имена полей получения склада из коллекции по типам товаров
	//ИмяПоляПроизвольный = ?(ЗначениеЗаполнено(ИменаПолей.Произвольный), "Коллекция." + ИменаПолей.Произвольный, "НЕОПРЕДЕЛЕНО");
	//ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПолеСкладТовар", ИмяПоляМестаУчета(ИменаПолей, "Товар", ИмяПоляПроизвольный));
	//ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПолеСкладМногооборотнаяТара", ИмяПоляМестаУчета(ИменаПолей, "МногооборотнаяТара", ИмяПоляПроизвольный));
	//ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПолеСкладУслуга", ИмяПоляМестаУчета(ИменаПолей, "Услуга", ИмяПоляПроизвольный));
	//ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПолеСкладРабота", ИмяПоляМестаУчета(ИменаПолей, "Работа", ИмяПоляПроизвольный));
	
	Возврат ТекстЗапроса;
КонецФункции

Функция ИмяПоляМестаУчета(ИменаПолей, КлючИмени, ИмяПоляПроизвольный, ИмяКоллекции = "Коллекция")
	Возврат
		?(Не ИменаПолей.Свойство(КлючИмени), ИмяПоляПроизвольный,
		?(ЗначениеЗаполнено(ИменаПолей[КлючИмени]), ИмяКоллекции + "." + ИменаПолей[КлючИмени],
		"НЕОПРЕДЕЛЕНО"));
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли