////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ
//

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
    	
	Форма.Элементы.ГруппаРезервОтпусковИсторияИЗначения.Доступность = Форма.Запись.ИспользованиеРезерваОтпусков;
	Форма.Элементы.ГиперссылкаДолжности.Доступность = Форма.Запись.ИспользуетсяТрудШахтеров;
	
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьНастройки(РеквизитПериод = Неопределено)
	
	Организация = Запись.Организация;
	
	Если УчетЗарплатыИКадровСредствамиБухгалтерии Тогда
		
		Если РеквизитПериод = Неопределено Тогда
			ГрафикРаботы               = Организация.ГрафикРаботы;
			
			МенеджерЗаписи = РегистрыСведений.ОтражениеВРегламентированномУчетеНастройкиОрганизаций.СоздатьМенеджерЗаписи();	
			МенеджерЗаписи.Организация = Организация;
			МенеджерЗаписи.Прочитать();	
			ЭтаФорма.ЗначениеВРеквизитФормы(МенеджерЗаписи, "ОтражениеВРегламентированномУчетеНастройкиОрганизаций");
			
		КонецЕсли;
		
		// alla oop 60170 <<
		Если РеквизитПериод = Неопределено ИЛИ Найти(РеквизитПериод, "СпециальныеРежимыЗарплатаКадры") > 0 Тогда
			Отбор = Новый Структура("Организация", Организация);			
			ЗаписиРегистраСрезПоследних = РегистрыСведений.СпециальныеРежимыЗарплатаКадры.СрезПоследних(?(РеквизитПериод <> Неопределено, ЭтаФорма[РеквизитПериод], Период), Отбор);
			МенеджерЗаписи = РегистрыСведений.СпециальныеРежимыЗарплатаКадры.СоздатьМенеджерЗаписи();	
			МенеджерЗаписи.Организация = Организация;
			Если ЗаписиРегистраСрезПоследних.Количество() <> 0 Тогда
				МенеджерЗаписи.Период = ЗаписиРегистраСрезПоследних[0].Период;
			Иначе
				МенеджерЗаписи.Период = Период;
			КонецЕсли;
			Если РеквизитПериод <> Неопределено Тогда
				СпециальныеРежимыЗарплатаКадрыПериод = ЭтаФорма[РеквизитПериод];
			Иначе
				СпециальныеРежимыЗарплатаКадрыПериод = МенеджерЗаписи.Период;
			КонецЕсли;
			МенеджерЗаписи.Прочитать();	
			ЭтаФорма.ЗначениеВРеквизитФормы(МенеджерЗаписи, "СпециальныеРежимыЗарплатаКадры");			
		КонецЕсли;
		// alla oop 60170 >>
		
		Если РеквизитПериод = Неопределено ИЛИ Найти(РеквизитПериод, "БухучетЗарплатыОрганизаций") > 0 Тогда
			Отбор = Новый Структура("Организация", Организация);			
			ЗаписиРегистраСрезПоследних = РегистрыСведений.БухучетЗарплатыОрганизаций.СрезПоследних(?(РеквизитПериод <> Неопределено, ЭтаФорма[РеквизитПериод], Период), Отбор);
			МенеджерЗаписи = РегистрыСведений.БухучетЗарплатыОрганизаций.СоздатьМенеджерЗаписи();	
			МенеджерЗаписи.Организация = Организация;
			Если ЗаписиРегистраСрезПоследних.Количество() <> 0 Тогда
				МенеджерЗаписи.Период = ЗаписиРегистраСрезПоследних[0].Период;
			Иначе
				МенеджерЗаписи.Период = Период;
			КонецЕсли;
			Если РеквизитПериод <> Неопределено Тогда
				БухучетЗарплатыОрганизацийПериод = ЭтаФорма[РеквизитПериод];
			Иначе
				БухучетЗарплатыОрганизацийПериод = МенеджерЗаписи.Период;
			КонецЕсли;
			МенеджерЗаписи.Прочитать();	
			ЭтаФорма.ЗначениеВРеквизитФормы(МенеджерЗаписи, "БухучетЗарплатыОрганизаций");			
		КонецЕсли;
		
		Если РеквизитПериод = Неопределено ИЛИ Найти(РеквизитПериод, "КоэффициентРезерваОтпусков") > 0 Тогда
			Отбор = Новый Структура("Организация", Организация);			
			ЗаписиРегистраСрезПоследних = РегистрыСведений.КоэффициентРезерваОтпусков.СрезПоследних(?(РеквизитПериод <> Неопределено, ЭтаФорма[РеквизитПериод], Период), Отбор);
			МенеджерЗаписи = РегистрыСведений.КоэффициентРезерваОтпусков.СоздатьМенеджерЗаписи();	
			МенеджерЗаписи.Организация = Организация;
			Если ЗаписиРегистраСрезПоследних.Количество() <> 0 Тогда
				МенеджерЗаписи.Период = ЗаписиРегистраСрезПоследних[0].Период;
			Иначе
				МенеджерЗаписи.Период = Период;
			КонецЕсли;
			Если РеквизитПериод <> Неопределено Тогда
				КоэффициентРезерваОтпусковПериод = ЭтаФорма[РеквизитПериод];
			Иначе
				КоэффициентРезерваОтпусковПериод = МенеджерЗаписи.Период;
			КонецЕсли;
			МенеджерЗаписи.Прочитать();	
			ЭтаФорма.ЗначениеВРеквизитФормы(МенеджерЗаписи, "КоэффициентРезерваОтпусков");			
		КонецЕсли;
		
		Если РеквизитПериод = Неопределено ИЛИ Найти(РеквизитПериод, "ШкалаСтавокНалогов") > 0 Тогда
			Отбор = Новый Структура("Организация, Налог", Организация, ПредопределенноеЗначение("Справочник.Налоги.ЕСВФОТРаботники"));			
			ЗаписиРегистраСрезПоследних = РегистрыСведений.ШкалаСтавокНалогов.СрезПоследних(?(РеквизитПериод <> Неопределено, ЭтаФорма[РеквизитПериод], Период), Отбор);
			Отбор = Новый Структура("Организация, Налог", ПредопределенноеЗначение("Справочник.Организации.ПустаяСсылка"), ПредопределенноеЗначение("Справочник.Налоги.ЕСВФОТРаботники"));			
			ЗаписиРегистраОбщиеСрезПоследних = РегистрыСведений.ШкалаСтавокНалогов.СрезПоследних(?(РеквизитПериод <> Неопределено, ЭтаФорма[РеквизитПериод], Период), Отбор);
			МенеджерЗаписи = РегистрыСведений.ШкалаСтавокНалогов.СоздатьМенеджерЗаписи();	
			ШкалаСтавокНалогов.Организация = Организация;
			ШкалаСтавокНалогов.Налог =  ПредопределенноеЗначение("Справочник.Налоги.ЕСВФОТРаботники");
			Если ЗаписиРегистраСрезПоследних.Количество() <> 0 Тогда
				ЗаполнитьЗначенияСвойств(МенеджерЗаписи,ЗаписиРегистраСрезПоследних[0]);
				МенеджерЗаписи.Период = ЗаписиРегистраСрезПоследних[0].Период;
				МенеджерЗаписи.Прочитать();	
			Иначе
				Если ЗаписиРегистраОбщиеСрезПоследних.Количество() <> 0 Тогда
					ЗаполнитьЗначенияСвойств(МенеджерЗаписи,ЗаписиРегистраОбщиеСрезПоследних[0]);
				КонецЕсли;	
				МенеджерЗаписи.Период = Период;
				МенеджерЗаписи.Ставка = 0;
			КонецЕсли;
			Если ЗаписиРегистраОбщиеСрезПоследних.Количество() <> 0 Тогда
				ЭтаФорма.СтавкаЕСВФОТОбщая = ЗаписиРегистраОбщиеСрезПоследних[0].Ставка;
			КонецЕсли;	
			ЭтаФорма.ЗначениеВРеквизитФормы(МенеджерЗаписи, "ШкалаСтавокНалогов");			
		КонецЕсли;
				
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьПараметры(Отказ)
	
	Если ТолькоПросмотр Тогда
		Отказ = Истина;
		Возврат;		
	КонецЕсли;
	
	ПроверитьНастройкиПараметровУчета(Отказ);
	Если Отказ Тогда
		Возврат;		
	КонецЕсли;
	
	Если УчетЗарплатыИКадровСредствамиБухгалтерии Тогда
		
		Организация = Запись.Организация;
		
		ОрганизацияОбъект = Организация.ПолучитьОбъект();
		Попытка
			ОрганизацияОбъект.Заблокировать();
			ОрганизацияОбъект.ГрафикРаботы                 = ГрафикРаботы;		
			ОрганизацияОбъект.Записать();
		Исключение
			ТекстСообщения = НСтр("ru='Не удалось заблокировать объект: ';uk=""Не вдалося заблокувати об'єкт: """) + ОрганизацияОбъект + Символы.ПС + НСтр("ru='Запись настройки параметров учета зарплаты не выполнена.';uk='Запис настройки параметрів обліку зарплати не виконаний.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);			
			Отказ = Истина;
			Возврат;		
		КонецПопытки;	
		
		МенеджерЗаписи = РегистрыСведений.ОтражениеВРегламентированномУчетеНастройкиОрганизаций.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Организация = Организация;
		МенеджерЗаписи.Прочитать();		
		ЗаполнитьЗначенияСвойств(МенеджерЗаписи, ОтражениеВРегламентированномУчетеНастройкиОрганизаций);	
		МенеджерЗаписи.Организация = Организация;
		МенеджерЗаписи.Записать();
		
		МенеджерЗаписи = РегистрыСведений.СпециальныеРежимыЗарплатаКадры.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Период      = СпециальныеРежимыЗарплатаКадрыПериод;
		МенеджерЗаписи.Организация = Организация;
		МенеджерЗаписи.Прочитать();		
		ЗаполнитьЗначенияСвойств(МенеджерЗаписи, СпециальныеРежимыЗарплатаКадры);
		МенеджерЗаписи.Период      = СпециальныеРежимыЗарплатаКадрыПериод;
		МенеджерЗаписи.Организация = Организация;	
		МенеджерЗаписи.Записать();
		
		МенеджерЗаписи = РегистрыСведений.БухучетЗарплатыОрганизаций.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Период      = БухучетЗарплатыОрганизацийПериод;
		МенеджерЗаписи.Организация = Организация;
		МенеджерЗаписи.Прочитать();		
		ЗаполнитьЗначенияСвойств(МенеджерЗаписи, БухучетЗарплатыОрганизаций);
		МенеджерЗаписи.Период      = БухучетЗарплатыОрганизацийПериод;
		МенеджерЗаписи.Организация = Организация;	
		МенеджерЗаписи.Записать();
		
		МенеджерЗаписи = РегистрыСведений.КоэффициентРезерваОтпусков.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Период      = КоэффициентРезерваОтпусковПериод;
		МенеджерЗаписи.Организация = Организация;
		МенеджерЗаписи.Прочитать();		
		ЗаполнитьЗначенияСвойств(МенеджерЗаписи, КоэффициентРезерваОтпусков);
		МенеджерЗаписи.Период      = КоэффициентРезерваОтпусковПериод;
		МенеджерЗаписи.Организация = Организация;	
		МенеджерЗаписи.Записать();
		
		Если ЗначениеЗаполнено(ШкалаСтавокНалогов.Ставка) Тогда
			МенеджерЗаписи = РегистрыСведений.ШкалаСтавокНалогов.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.Период      = ШкалаСтавокНалогов.Период;
			МенеджерЗаписи.Организация = Организация;
			МенеджерЗаписи.Прочитать();		
			ЗаполнитьЗначенияСвойств(МенеджерЗаписи, ШкалаСтавокНалогов);
			МенеджерЗаписи.Организация = Организация;
			МенеджерЗаписи.Записать();
		КонецЕсли;	
		
	КонецЕсли;
	
	ЭтаФорма.Модифицированность = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьНастройкиПараметровУчета(Отказ)
	
		
КонецПроцедуры	

&НаКлиенте
Процедура ИзменениеПериода(Данные, ПутьРеквизита, ПутьРеквизитаПредставления, Направление = Неопределено)
	
	Если Направление = Неопределено Тогда		
		Значение = Период;		
	Иначе
		Значение = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Данные, ПутьРеквизита);
		Значение = ДобавитьМесяц(Значение, Направление);
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(Данные, ПутьРеквизита, Значение);
	ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(Данные, ПутьРеквизитаПредставления, Формат(Значение, "ДФ='MMMM yyyy'"));
	
КонецПроцедуры

&НаКлиенте
Процедура ИсторияНажатие(ИмяРегистра)
	
	ПараметрыОтбора = Новый Структура("ГоловнаяОрганизация, Организация", Организация, Организация);
	
	РегистрСведенийФорма = ОткрытьФорму("РегистрСведений." + ИмяРегистра + ".ФормаСписка", Новый Структура("Отбор", ПараметрыОтбора));
			
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ
//

&НаКлиенте
Процедура ПериодСтрокаРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	РеквизитПериод = Лев(Элемент.Имя, СтрДлина(Элемент.Имя) - 6);
	ИзменениеПериода(ЭтаФорма, РеквизитПериод, Элемент.Имя, Направление);
	
	ПрочитатьНастройки(РеквизитПериод);
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодСтрокаПриИзменении(Элемент)
	
	РеквизитПериод = Лев(Элемент.Имя, СтрДлина(Элемент.Имя) - 6);	
	ЭтаФорма[Элемент.Имя]= БухгалтерскиеОтчетыКлиентСервер.ПолучитьПредставлениеПериода(НачалоМесяца(ЭтаФорма[РеквизитПериод]), КонецМесяца(ЭтаФорма[РеквизитПериод]), Истина);
	
	ПрочитатьНастройки(РеквизитПериод);

	
КонецПроцедуры

&НаКлиенте
Процедура ПериодСтрокаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	РеквизитПериод = Лев(Элемент.Имя, СтрДлина(Элемент.Имя) - 6);	
	ПараметрыВыбора = Новый Структура("НачалоПериода, КонецПериода", НачалоМесяца(ЭтаФорма[РеквизитПериод]), КонецМесяца(ЭтаФорма[РеквизитПериод]));
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыбратьПериодЗавершение", ЭтотОбъект);
	ОткрытьФорму("ОбщаяФорма.ВыборСтандартногоПериодаМесяц", ПараметрыВыбора, Элементы[Элемент.Имя], , , , ОписаниеОповещения);
					
КонецПроцедуры


&НаКлиенте
Процедура ИсторияЗарплатаНажатие(Элемент)
	
	ИсторияНажатие("БухучетЗарплатыОрганизаций");
	
КонецПроцедуры

// alla oop 60170 <<
&НаКлиенте
Процедура ИсторияСпецРежимыНажатие(Элемент)
	
	ИсторияНажатие("СпециальныеРежимыЗарплатаКадры");
	
КонецПроцедуры
// alla oop 60170 >>

&НаКлиенте
Процедура ИсторияКоэффициентРезерваОтпусковНажатие(Элемент)
	
	ИсторияНажатие("КоэффициентРезерваОтпусков");
	
КонецПроцедуры

&НаКлиенте
Процедура ИсторияСтавкаЕСВФОТНажатие(Элемент)
	
	ПараметрыОтбора = Новый Структура("Организация, Налог", Организация, ПредопределенноеЗначение("Справочник.Налоги.ЕСВФОТРаботники"));
	
	РегистрСведенийФорма = ОткрытьФорму("РегистрСведений.ШкалаСтавокНалогов.ФормаСписка", Новый Структура("Отбор", ПараметрыОтбора));

	
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаДополнительноСтраховыеВзносыНажатие(Элемент)
	
	ПараметрыФормы = Новый Структура("Вид", "СтраховыеВзносы");
	ФормаДополнительныхДанных = ОткрытьФорму("РегистрСведений.НастройкиУчетаЗарплаты.Форма.ФормаДополнительныхДанных", ПараметрыФормы);	

КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаДополнительноНДФЛНажатие(Элемент)
	
	ПараметрыФормы = Новый Структура("Вид", "НДФЛ");
	ФормаДополнительныхДанных = ОткрытьФорму("РегистрСведений.НастройкиУчетаЗарплаты.Форма.ФормаДополнительныхДанных", ПараметрыФормы);	
	
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаДополнительноТерриториальныеУсловияНажатие(Элемент)
	
	ПараметрыФормы = Новый Структура("Вид, Организация", "Подразделения", Организация);
	ФормаДополнительныхДанных = ОткрытьФорму("РегистрСведений.НастройкиУчетаЗарплаты.Форма.ФормаДополнительныхДанных", ПараметрыФормы);	
	
КонецПроцедуры	

&НаКлиенте
Процедура ГиперссылкаСпособыПоПодразделениямНажатие(Элемент)
	
	РегистрСведенийФорма = ПолучитьФорму("РегистрСведений.БухучетЗарплатыПодразделений.ФормаСписка");
    РегистрСведенийФорма.ОтборОрганизация = Организация;
    РегистрСведенийФорма.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаСпособыПоСотрудникамНажатие(Элемент)
	
	РегистрСведенийФорма = ПолучитьФорму("РегистрСведений.БухучетЗарплатыСотрудников.ФормаСписка");
    РегистрСведенийФорма.ОтборОрганизация = Организация;
    РегистрСведенийФорма.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаДолжностиНажатие(Элемент)
	
	ПараметрыДолжностей = Новый Структура("ИспользуетсяТрудШахтеров", Запись.ИспользуетсяТрудШахтеров);
	ПараметрыФормы = Новый Структура("Вид, ПараметрыДолжностей", "Должности", ПараметрыДолжностей);
	ФормаДополнительныхДанных = ОткрытьФорму("РегистрСведений.НастройкиУчетаЗарплаты.Форма.ФормаДополнительныхДанных", ПараметрыФормы);	
	
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаНормативныеВеличиныНажатие(Элемент)
	
	ПараметрыФормы = Новый Структура("Вид", "Нормативные");
	ФормаДополнительныхДанных = ОткрытьФорму("РегистрСведений.НастройкиУчетаЗарплаты.Форма.ФормаДополнительныхДанных", ПараметрыФормы);	
	
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаДополнительноОтражениеНажатие(Элемент)
	
	ПараметрыФормы = Новый Структура("Вид", "Отражение");
	ФормаДополнительныхДанных = ОткрытьФорму("РегистрСведений.НастройкиУчетаЗарплаты.Форма.ФормаДополнительныхДанных", ПараметрыФормы);	
	

КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ
//

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Период = НачалоМесяца(ТекущаяДатаСеанса());
	НадписьГрафикРаботы      = НСтр("ru='Используется для расчета времени в документе ""Начисление зарплаты""';uk='Використовується для розрахунку часу в документі ""Нарахування зарплати""'");	
	НадписьСпособОкругления  = НСтр("ru='Порядок округления при выплате зарплаты по умолчанию';uk='Порядок округлення при виплаті зарплати по умовчанню'");
	НадписьОтражениеВУчете 	 = НСтр("ru='Отражение зарплаты в бухгалтерском учете по умолчанию:';uk='Відображення зарплати в бухгалтерському обліку по умовчанню:'");
    НадписьОсновнаяКатегорияЗастрахованныхЛиц = НСтр("ru='Используется по умолчанию для новых сотрудников';uk='Використовується по умовчанню для нових співробітників'");
	НадписьСтавкаЕСВФОТ      = НСтр("ru='Ставка ЕСВ ФОТ работников организации:';uk='Ставка ЄСВ ФОП працівників організації:'");
	
	
	НадписьСпециальныеТарифы = НСтр("ru='В организации работают:';uk='В організації працюють:'");
	
	НадписьНачисляетсяРКиСН  = НСтр("ru='В организации или ее подразделениях начисляется:';uk='В організації або її підрозділах нараховується:'");
	НадписьПериодСтавкаНСПЗ  = НСтр("ru='Действует с:';uk='Діє з:'");
	
	НадписьСписаниеДепонентов = НСтр("ru='Используется для формирования проводок при проведении документа ""Списание депонированной зарплаты""';uk='Використовується для формування проводок при проведенні документа ""Списання депонованої зарплати""'");
	
	УчетЗарплатыИКадровСредствамиБухгалтерии = ПолучитьФункциональнуюОпцию("УчетЗарплатыИКадровСредствамиБухгалтерии");
	
	ГоловнаяОрганизация = ОбщегоНазначенияБПВызовСервераПовтИсп.ГоловнаяОрганизация(Запись.Организация);
	
	ПрочитатьНастройки();
	
	НадписьСтавкаЕСВФОТПояснение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Если не указана - используется общая ставка (%1)';uk='Якщо не зазначена - використовується загальна ставка (%1)'"), Строка(СтавкаЕСВФОТОбщая));
	
	
	ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(ЭтаФорма, "БухучетЗарплатыОрганизацийПериодСтрока", Формат(БухучетЗарплатыОрганизацийПериод, "ДФ='MMMM yyyy'"));
	ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(ЭтаФорма, "КоэффициентРезерваОтпусковПериодСтрока", Формат(КоэффициентРезерваОтпусковПериод, "ДФ='MMMM yyyy'"));
	ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(ЭтаФорма, "СпециальныеРежимыЗарплатаКадрыПериодСтрока", Формат(СпециальныеРежимыЗарплатаКадрыПериод, "ДФ='MMMM yyyy'"));	
		
	УправлениеФормой(ЭтаФорма);
		
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если НЕ ТолькоПросмотр Тогда
		Отказ = Ложь;
		ЗаписатьПараметры(Отказ);
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	

КонецПроцедуры


&НаКлиенте
Процедура ИспользованиеРезерваОтпусковПриИзменении(Элемент)
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура УчетСтраховыхВзносовНастройкиОрганизацийИспользуетсяТрудШахтеровПриИзменении(Элемент)
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// Описание оповещений

&НаКлиенте
Процедура ВыбратьПериодЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(РеквизитПериод) Тогда
		Возврат;
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(ЭтаФорма, РеквизитПериод, Формат(РезультатВыбора.НачалоПериода, "ДФ='MMMM yyyy'"));
	ЭтаФорма[РеквизитПериод] = РезультатВыбора.НачалоПериода;
	
КонецПроцедуры









