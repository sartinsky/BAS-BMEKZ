#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
    
#Область ПроцедурыИФункцииПечати

Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт

	// ЗХС3
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "Приказ";
	КомандаПечати.Представление = НСтр("ru='Приказ';uk='Наказ'");
   	КомандаПечати.Обработчик    = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечати";
    КомандаПечати.СписокФорм    = "ФормаСписка,ФормаВыбора,ФормаДокументаОбщая";

    //ЗХС4
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "Пропуск";
	КомандаПечати.Представление = НСтр("ru='Пропуск';uk='Перепустка'");
   	КомандаПечати.Обработчик    = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечати";
    КомандаПечати.СписокФорм    = "ФормаСписка,ФормаВыбора,ФормаДокументаОбщая";
    
    //Расчет
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "НакладнаяФ19";
	КомандаПечати.Представление = НСтр("ru='Накладная (ф.19)';uk='Накладна (ф.19)'");
   	КомандаПечати.Обработчик    = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечати";
    КомандаПечати.СписокФорм    = "ФормаСписка,ФормаВыбора,ФормаДокументаОбщая";
    
     //Расчет
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "НакладнаяФ19_2021";
	КомандаПечати.Представление = НСтр("ru='Накладная (ф.19) (2021)';uk='Накладна (ф.19) (2021)'");
   	КомандаПечати.Обработчик    = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечати";
    КомандаПечати.СписокФорм    = "ФормаСписка,ФормаВыбора,ФормаДокументаОбщая";

	// Реестр документов
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "Реестр";
	КомандаПечати.Представление = НСтр("ru='Реестр документов';uk='Реєстр документів'");
	КомандаПечати.ЗаголовокФормы= НСтр("ru='Реестр документов ""Перемещение""';uk='Реєстр документів ""Переміщення""'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечатиРеестраДокументов";
	КомандаПечати.СписокФорм    = "ФормаСписка";
	КомандаПечати.Порядок       = 100;
    
КонецПроцедуры

Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм,ОбъектыПечати, ПараметрыВывода) Экспорт
	
	// Устанавливаем признак доступности печати покомплектно.
	ПараметрыВывода.ДоступнаПечатьПоКомплектно = Истина;
	
    Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "Приказ") Тогда
        
        УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "Приказ", НСтр("ru='Приказ';uk='Наказ'"), 
            ПечатьПриказ(МассивОбъектов, ОбъектыПечати, ПараметрыВывода), , "Документ.ИНАГРО_Перемещение.ПФ_MXL_Приказ", , Истина);
             
    ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "Пропуск") Тогда
        
         УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "Пропуск",НСтр("ru='Пропуск';uk='Перепустка'"), 
            ПечатьПропуск(МассивОбъектов, ОбъектыПечати, ПараметрыВывода), , "Документ.ИНАГРО_Перемещение.ПФ_MXL_Пропуск", , Истина);
            
    ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "НакладнаяФ19") Тогда
        
         УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "НакладнаяФ19",НСтр("ru='Накладная (ф.19)';uk='Накладна (ф.19)'"), 
            ПечатьНакладнаяФ19(МассивОбъектов, ОбъектыПечати, ПараметрыВывода), , "Документ.ИНАГРО_Перемещение.ПФ_MXL_НакладнаяФ19", , Истина);
            
    ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "НакладнаяФ19_2021") Тогда
        
         УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "НакладнаяФ19_2021",НСтр("ru='Накладная (ф.19) (2021)';uk='Накладна (ф.19) (2021)'"), 
            ПечатьНакладнаяФ19_2021(МассивОбъектов, ОбъектыПечати, ПараметрыВывода), , "Документ.ИНАГРО_Перемещение.ПФ_MXL_UK_Накладная_2021", , Истина);
        
    КонецЕсли;	
	
КонецПроцедуры

Функция ПечатьПриказ(МассивОбъектов, ОбъектыПечати, ПараметрыВывода)
	
	УстановитьПривилегированныйРежим(Истина);
	
    ТабДокумент = Новый ТабличныйДокумент;
    ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_Документ.ИНАГРО_Перемещение.ПФ_MXL_Приказ";
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ИНАГРО_Перемещение.ПФ_MXL_Приказ");
    
    ЗапросШапка = Новый Запрос;
    ЗапросШапка.Текст = 
		"ВЫБРАТЬ
		|	ИНАГРО_Перемещение.Ссылка КАК Ссылка,
		|	ИНАГРО_Перемещение.Номер КАК Номер,
		|	ИНАГРО_Перемещение.Дата КАК Дата,
		|	ИНАГРО_Перемещение.Организация.НаименованиеПолное КАК НаименованиеПолное,
		|	ИНАГРО_Перемещение.Склад КАК Склад,
		|	ИНАГРО_Перемещение.НовыйСклад КАК НовыйСклад,
		|	ИНАГРО_Перемещение.Урожай КАК Урожай,
		|	ИНАГРО_Перемещение.Организация КАК Организация,
		|	ИНАГРО_Перемещение.Владелец КАК Владелец
		|ИЗ
		|	Документ.ИНАГРО_Перемещение КАК ИНАГРО_Перемещение
		|ГДЕ
		|	ИНАГРО_Перемещение.Ссылка = &Ссылка";
    
    ЗапросКультуры = Новый Запрос;
    ЗапросКультуры.Текст = 
		"ВЫБРАТЬ
		|	ИНАГРО_ПеремещениеКультуры.НомерСтроки КАК НомерСтроки,
		|	ИНАГРО_ПеремещениеКультуры.Номенклатура КАК Номенклатура,
		|	ИНАГРО_ПеремещениеКультуры.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	ИНАГРО_ПеремещениеКультуры.Фасовка КАК Фасовка,
		|	ИНАГРО_ПеремещениеКультуры.Остаток КАК Остаток,
		|	ИНАГРО_ПеремещениеКультуры.ФизическийВес КАК ФизическийВес,
		|	ИНАГРО_ПеремещениеКультуры.ЛабораторныйАнализ КАК ЛабораторныйАнализ,
		|	ИНАГРО_ПеремещениеКультуры.НомерАнализа КАК НомерАнализа,
		|	ИНАГРО_ПеремещениеКультуры.Влажность КАК Влажность,
		|	ИНАГРО_ПеремещениеКультуры.ЗачетныйВес КАК ЗачетныйВес,
		|	ИНАГРО_ПеремещениеКультуры.ЗерноваяПримесь КАК ЗерноваяПримесь,
		|	ИНАГРО_ПеремещениеКультуры.СорнаяПримесь КАК СорнаяПримесь,
		|	ИНАГРО_ПеремещениеКультуры.Количество КАК Количество,
		|	ИНАГРО_ПеремещениеКультуры.Цена КАК Цена,
		|	ИНАГРО_ПеремещениеКультуры.Сумма КАК Сумма,
		|	ИНАГРО_ПеремещениеКультуры.СчетУчетаБУ КАК СчетУчетаБУ,
		|	ИНАГРО_ПеремещениеКультуры.НовыйСчетУчетаБУ КАК НовыйСчетУчетаБУ,
		|	ИНАГРО_ПеремещениеКультуры.УдалитьСтатьяПриростаУбылиЗапасов КАК СтатьяПриростаУбылиЗапасов,
		|	ИНАГРО_ПеремещениеКультуры.УдалитьСтатьяПриростаУбылиЗапасовНовая КАК СтатьяПриростаУбылиЗапасовНовая,
		|	ИНАГРО_ПеремещениеКультуры.ДокументОприходования КАК ДокументОприходования,
		|	ИНАГРО_ПеремещениеКультуры.НалоговоеНазначение КАК НалоговоеНазначение,
		|	ИНАГРО_ПеремещениеКультуры.НалоговоеНазначениеНовое КАК НалоговоеНазначениеНовое,
		|	ИНАГРО_ПеремещениеКультуры.Масличность КАК Масличность,
		|	ИНАГРО_ПеремещениеКультуры.УдалитьКоэффициент КАК УдалитьКоэффициент
		|ИЗ
		|	Документ.ИНАГРО_Перемещение.Культуры КАК ИНАГРО_ПеремещениеКультуры
		|ГДЕ
		|	ИНАГРО_ПеремещениеКультуры.Ссылка = &Ссылка";    
    
    // печать производится на языке, указанном в настройках пользователя
    КодЯзыкаПечать = ПараметрыВывода.КодЯзыкаДляМногоязычныхПечатныхФорм;
    Макет.КодЯзыкаМакета = КодЯзыкаПечать;
    
    ПервыйДокумент = Истина;
    
    Для каждого Ссылка Из МассивОбъектов Цикл
        
        Если Не ПервыйДокумент Тогда
            ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
        КонецЕсли;
        ПервыйДокумент = Ложь;
        
        // Запомним номер строки, с которой начали выводить текущий документ.
        НомерСтрокиНачало = ТабДокумент.ВысотаТаблицы + 1;
        
        
        ЗапросШапка.УстановитьПараметр("Ссылка",Ссылка);
        ВыборкаЗапросШапка = ЗапросШапка.Выполнить().Выбрать();
        ВыборкаЗапросШапка.Следующий();
        
        ЗапросКультуры.УстановитьПараметр("Ссылка",Ссылка);
        Культуры = ЗапросКультуры.Выполнить().Выгрузить();
        
        Руководители = ИНАГРО_Элеватор.ОтветственныеЛицаОрганизации(ВыборкаЗапросШапка.Организация,ВыборкаЗапросШапка.Дата);
        
        Шапка = Макет.ПолучитьОбласть("Шапка");
        ОблСтр = Макет.ПолучитьОбласть("Строка");
        ОблДно = Макет.ПолучитьОбласть("Дно");
        
        Шапка.Параметры.Фирма = ВыборкаЗапросШапка.НаименованиеПолное;
        Шапка.Параметры.НомерДок = ВыборкаЗапросШапка.Номер;
        Шапка.Параметры.Владелец = ВыборкаЗапросШапка.Владелец;
        ИНАГРО_Элеватор.ПолучитьНаименованияКонтрагента(Шапка.Параметры.Владелец);
        Шапка.Параметры.Склад = ВыборкаЗапросШапка.Склад;
        Шапка.Параметры.НовыйСклад = ВыборкаЗапросШапка.НовыйСклад;
        Шапка.Параметры.ДатаДок = Формат(ВыборкаЗапросШапка.Дата, "ДФ='дд ММММ гггг';Л="+ Локализация.ОпределитьКодЯзыкаДляФормат(КодЯзыкаПечать));
        Шапка.Параметры.Урожай = ВыборкаЗапросШапка.Урожай;
        
        ТабДокумент.Вывести(Шапка);
        
        ИтогВес = 0;
        Для Каждого Стр ИЗ Культуры Цикл
            
            ОблСтр.Параметры.Заполнить(Стр);
            ТабДокумент.Вывести(ОблСтр);
            ИтогВес = ИтогВес + Стр.ФизическийВес;
        КонецЦикла;
        
        
        ОблДно.Параметры.ИтогВес = ИтогВес;
        ОблДно.Параметры.ДолжностьРуководителя = Руководители.ДолжностьРуководителя;
        ТабДокумент.Вывести(ОблДно);
        
        УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабДокумент, 
        НомерСтрокиНачало, ОбъектыПечати, Ссылка);
        
    КонецЦикла;
    
    Возврат ТабДокумент;
	
КонецФункции

Функция ПечатьПропуск(МассивОбъектов, ОбъектыПечати, ПараметрыВывода)
    
    УстановитьПривилегированныйРежим(Истина);
    
    ТабДокумент = Новый ТабличныйДокумент;
    ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_Документ.ИНАГРО_Перемещение.ПФ_MXL_Пропуск";
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ИНАГРО_Перемещение.ПФ_MXL_Пропуск");
    
    ЗапросШапка = Новый Запрос;
    ЗапросШапка.Текст = 
		"ВЫБРАТЬ
		|	ИНАГРО_Перемещение.Ссылка КАК Ссылка,
		|	ИНАГРО_Перемещение.Номер КАК Номер,
		|	ИНАГРО_Перемещение.Дата КАК Дата,
		|	ИНАГРО_Перемещение.Организация.НаименованиеПолное КАК НаименованиеПолное,
		|	ИНАГРО_Перемещение.Склад КАК Склад,
		|	ИНАГРО_Перемещение.НовыйСклад КАК НовыйСклад,
		|	ИНАГРО_Перемещение.Урожай КАК Урожай,
		|	ИНАГРО_Перемещение.Организация КАК Организация,
		|	ИНАГРО_Перемещение.Владелец КАК Владелец
		|ИЗ
		|	Документ.ИНАГРО_Перемещение КАК ИНАГРО_Перемещение
		|ГДЕ
		|	ИНАГРО_Перемещение.Ссылка = &Ссылка";
    
    ЗапросКультуры = Новый Запрос;
    ЗапросКультуры.Текст = 
		"ВЫБРАТЬ
		|	ИНАГРО_ПеремещениеКультуры.НомерСтроки КАК НомерСтроки,
		|	ИНАГРО_ПеремещениеКультуры.Номенклатура КАК Номенклатура,
		|	ИНАГРО_ПеремещениеКультуры.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	ИНАГРО_ПеремещениеКультуры.Фасовка КАК Фасовка,
		|	ИНАГРО_ПеремещениеКультуры.Остаток КАК Остаток,
		|	ИНАГРО_ПеремещениеКультуры.ФизическийВес КАК ФизическийВес,
		|	ИНАГРО_ПеремещениеКультуры.ЛабораторныйАнализ КАК ЛабораторныйАнализ,
		|	ИНАГРО_ПеремещениеКультуры.НомерАнализа КАК НомерАнализа,
		|	ИНАГРО_ПеремещениеКультуры.Влажность КАК Влажность,
		|	ИНАГРО_ПеремещениеКультуры.ЗачетныйВес КАК ЗачетныйВес,
		|	ИНАГРО_ПеремещениеКультуры.ЗерноваяПримесь КАК ЗерноваяПримесь,
		|	ИНАГРО_ПеремещениеКультуры.СорнаяПримесь КАК СорнаяПримесь,
		|	ИНАГРО_ПеремещениеКультуры.Количество КАК Количество,
		|	ИНАГРО_ПеремещениеКультуры.Цена КАК Цена,
		|	ИНАГРО_ПеремещениеКультуры.Сумма КАК Сумма,
		|	ИНАГРО_ПеремещениеКультуры.СчетУчетаБУ КАК СчетУчетаБУ,
		|	ИНАГРО_ПеремещениеКультуры.НовыйСчетУчетаБУ КАК НовыйСчетУчетаБУ,
		|	ИНАГРО_ПеремещениеКультуры.УдалитьСтатьяПриростаУбылиЗапасов КАК СтатьяПриростаУбылиЗапасов,
		|	ИНАГРО_ПеремещениеКультуры.УдалитьСтатьяПриростаУбылиЗапасовНовая КАК СтатьяПриростаУбылиЗапасовНовая,
		|	ИНАГРО_ПеремещениеКультуры.ДокументОприходования КАК ДокументОприходования,
		|	ИНАГРО_ПеремещениеКультуры.НалоговоеНазначение КАК НалоговоеНазначение,
		|	ИНАГРО_ПеремещениеКультуры.НалоговоеНазначениеНовое КАК НалоговоеНазначениеНовое,
		|	ИНАГРО_ПеремещениеКультуры.Масличность КАК Масличность,
		|	ИНАГРО_ПеремещениеКультуры.УдалитьКоэффициент КАК УдалитьКоэффициент
		|ИЗ
		|	Документ.ИНАГРО_Перемещение.Культуры КАК ИНАГРО_ПеремещениеКультуры
		|ГДЕ
		|	ИНАГРО_ПеремещениеКультуры.Ссылка = &Ссылка";
    
    // печать производится на языке, указанном в настройках пользователя
    КодЯзыкаПечать = ПараметрыВывода.КодЯзыкаДляМногоязычныхПечатныхФорм;
    Макет.КодЯзыкаМакета = КодЯзыкаПечать;
    
    ПервыйДокумент = Истина;
    
    Для каждого Ссылка Из МассивОбъектов Цикл
        
        Если Не ПервыйДокумент Тогда
            ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
        КонецЕсли;
        ПервыйДокумент = Ложь;
        
        // Запомним номер строки, с которой начали выводить текущий документ.
        НомерСтрокиНачало = ТабДокумент.ВысотаТаблицы + 1;
        
        ЗапросШапка.УстановитьПараметр("Ссылка",Ссылка);
        ВыборкаЗапросШапка = ЗапросШапка.Выполнить().Выбрать();
        ВыборкаЗапросШапка.Следующий();
        
        ЗапросКультуры.УстановитьПараметр("Ссылка",Ссылка);
        Культуры = ЗапросКультуры.Выполнить().Выгрузить();
        
        Шапка = Макет.ПолучитьОбласть("Шапка");
        ОблСтр = Макет.ПолучитьОбласть("Строка");
        ОблДно = Макет.ПолучитьОбласть("Дно");
        
        Шапка.Параметры.Фирма = ВыборкаЗапросШапка.НаименованиеПолное;
        
        Шапка.Параметры.НомерДок = ВыборкаЗапросШапка.Номер;
        Шапка.Параметры.ДатаДок = Формат(ВыборкаЗапросШапка.Дата, "ДФ='дд ММММ гггг';Л="+ Локализация.ОпределитьКодЯзыкаДляФормат(КодЯзыкаПечать));
        Шапка.Параметры.НовыйВладелец = ВыборкаЗапросШапка.Владелец;
        ИНАГРО_Элеватор.ПолучитьНаименованияКонтрагента(Шапка.Параметры.НовыйВладелец);
        ТабДокумент.Вывести(Шапка);
        
        Для Каждого Стр ИЗ Культуры Цикл
            ОблСтр.Параметры.Заполнить(Стр);
            ТабДокумент.Вывести(ОблСтр);
        КонецЦикла;
        
        ТабДокумент.Вывести(ОблДно);
        
        УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабДокумент, 
        НомерСтрокиНачало, ОбъектыПечати, Ссылка);
        
    КонецЦикла; 
    
    Возврат ТабДокумент;
   
КонецФункции

Функция ПечатьНакладнаяФ19(МассивОбъектов, ОбъектыПечати, ПараметрыВывода)
    
    УстановитьПривилегированныйРежим(Истина);
	
    ТабДокумент = Новый ТабличныйДокумент;
    ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_Документ.ИНАГРО_Перемещение.ПФ_MXL_НакладнаяФ19";
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ИНАГРО_Перемещение.ПФ_MXL_НакладнаяФ19");
    
    ЗапросШапка = Новый Запрос;
    ЗапросШапка.Текст = 
		"ВЫБРАТЬ
		|	ИНАГРО_Перемещение.Ссылка КАК Ссылка,
		|	ИНАГРО_Перемещение.Номер КАК Номер,
		|	ИНАГРО_Перемещение.Дата КАК Дата,
		|	ИНАГРО_Перемещение.Организация.НаименованиеПолное КАК НаименованиеПолное,
		|	ИНАГРО_Перемещение.Склад КАК Склад,
		|	ИНАГРО_Перемещение.НовыйСклад КАК НовыйСклад,
		|	ИНАГРО_Перемещение.Урожай КАК Урожай,
		|	ИНАГРО_Перемещение.Организация КАК Организация,
		|	ИНАГРО_Перемещение.Владелец КАК Владелец
		|ИЗ
		|	Документ.ИНАГРО_Перемещение КАК ИНАГРО_Перемещение
		|ГДЕ
		|	ИНАГРО_Перемещение.Ссылка = &Ссылка";
    
    ЗапросКультуры = Новый Запрос;
    ЗапросКультуры.Текст =
		"ВЫБРАТЬ
		|	ИНАГРО_ПеремещениеКультуры.НомерСтроки КАК НомерСтроки,
		|	ИНАГРО_ПеремещениеКультуры.Номенклатура КАК Номенклатура,
		|	ИНАГРО_ПеремещениеКультуры.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	ИНАГРО_ПеремещениеКультуры.Фасовка КАК Фасовка,
		|	ИНАГРО_ПеремещениеКультуры.Остаток КАК Остаток,
		|	ИНАГРО_ПеремещениеКультуры.ФизическийВес КАК ФизическийВес,
		|	ИНАГРО_ПеремещениеКультуры.ЛабораторныйАнализ КАК ЛабораторныйАнализ,
		|	ИНАГРО_ПеремещениеКультуры.НомерАнализа КАК НомерАнализа,
		|	ИНАГРО_ПеремещениеКультуры.Влажность КАК Влажность,
		|	ИНАГРО_ПеремещениеКультуры.ЗачетныйВес КАК ЗачетныйВес,
		|	ИНАГРО_ПеремещениеКультуры.ЗерноваяПримесь КАК ЗерноваяПримесь,
		|	ИНАГРО_ПеремещениеКультуры.СорнаяПримесь КАК СорнаяПримесь,
		|	ИНАГРО_ПеремещениеКультуры.Количество КАК Количество,
		|	ИНАГРО_ПеремещениеКультуры.Цена КАК Цена,
		|	ИНАГРО_ПеремещениеКультуры.Сумма КАК Сумма,
		|	ИНАГРО_ПеремещениеКультуры.СчетУчетаБУ КАК СчетУчетаБУ,
		|	ИНАГРО_ПеремещениеКультуры.НовыйСчетУчетаБУ КАК НовыйСчетУчетаБУ,
		|	ИНАГРО_ПеремещениеКультуры.УдалитьСтатьяПриростаУбылиЗапасов КАК СтатьяПриростаУбылиЗапасов,
		|	ИНАГРО_ПеремещениеКультуры.УдалитьСтатьяПриростаУбылиЗапасовНовая КАК СтатьяПриростаУбылиЗапасовНовая,
		|	ИНАГРО_ПеремещениеКультуры.ДокументОприходования КАК ДокументОприходования,
		|	ИНАГРО_ПеремещениеКультуры.НалоговоеНазначение КАК НалоговоеНазначение,
		|	ИНАГРО_ПеремещениеКультуры.НалоговоеНазначениеНовое КАК НалоговоеНазначениеНовое,
		|	ИНАГРО_ПеремещениеКультуры.Масличность КАК Масличность,
		|	ИНАГРО_ПеремещениеКультуры.УдалитьКоэффициент КАК УдалитьКоэффициент
		|ИЗ
		|	Документ.ИНАГРО_Перемещение.Культуры КАК ИНАГРО_ПеремещениеКультуры
		|ГДЕ
		|	ИНАГРО_ПеремещениеКультуры.Ссылка = &Ссылка";
    
    // печать производится на языке, указанном в настройках пользователя
    КодЯзыкаПечать = ПараметрыВывода.КодЯзыкаДляМногоязычныхПечатныхФорм;
    Макет.КодЯзыкаМакета = КодЯзыкаПечать;
    
    ПервыйДокумент = Истина;
    
    Для каждого Ссылка Из МассивОбъектов Цикл
        
        Если Не ПервыйДокумент Тогда
            ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
        КонецЕсли;
        ПервыйДокумент = Ложь;
        
        // Запомним номер строки, с которой начали выводить текущий документ.
        НомерСтрокиНачало = ТабДокумент.ВысотаТаблицы + 1;
        
        ЗапросШапка.УстановитьПараметр("Ссылка",Ссылка);
        ВыборкаЗапросШапка = ЗапросШапка.Выполнить().Выбрать();
        ВыборкаЗапросШапка.Следующий();
        
        ЗапросКультуры.УстановитьПараметр("Ссылка",Ссылка);
        Культуры = ЗапросКультуры.Выполнить().Выгрузить();
        
        Руководители = ИНАГРО_Элеватор.ОтветственныеЛицаОрганизации(ВыборкаЗапросШапка.Организация,ВыборкаЗапросШапка.Дата);
        
        Шапка = Макет.ПолучитьОбласть("Шапка");
        ШапкаТаблицы = Макет.ПолучитьОбласть("ШапкаТаблицы");
        ОблСтр = Макет.ПолучитьОбласть("Строка");
        ОблИтог = Макет.ПолучитьОбласть("Итог");
        ОблПодписи = Макет.ПолучитьОбласть("Подписи");
        
        Шапка.Параметры.Фирма = ВыборкаЗапросШапка.НаименованиеПолное;
        
        Шапка.Параметры.Номер = ВыборкаЗапросШапка.Номер;
        Шапка.Параметры.Дата = Формат(ВыборкаЗапросШапка.Дата, "ДФ='дд ММММ гггг';Л="+ Локализация.ОпределитьКодЯзыкаДляФормат(КодЯзыкаПечать));	
        Шапка.Параметры.Склад = ВыборкаЗапросШапка.Склад;
        Шапка.Параметры.НовыйСклад = ВыборкаЗапросШапка.НовыйСклад;
        
        Шапка.Параметры.ЗавСкладом = ИНАГРО_Элеватор.ОтветственныеЛица(ВыборкаЗапросШапка.Организация, ВыборкаЗапросШапка.Дата, ВыборкаЗапросШапка.Склад);
        Шапка.Параметры.НовыйЗавСкладом = ИНАГРО_Элеватор.ОтветственныеЛица(ВыборкаЗапросШапка.Организация, ВыборкаЗапросШапка.Дата, ВыборкаЗапросШапка.НовыйСклад);
        
        ТабДокумент.Вывести(Шапка);
        ТабДокумент.Вывести(ШапкаТаблицы);
        
        Для Каждого Стр ИЗ Культуры Цикл
            ОблСтр.Параметры.Заполнить(Стр);
            ТабДокумент.Вывести(ОблСтр);		
        КонецЦикла;
        
        ОблИтог.Параметры.ФизическийВес = Культуры.Итог("ФизическийВес");
        ОблИтог.Параметры.ЗачетныйВес =Культуры.Итог("ЗачетныйВес");
        ТабДокумент.Вывести(ОблИтог);
        
        ОблПодписи.Параметры.Директор               = Руководители.Руководитель;
        ОблПодписи.Параметры.ДолжностьРуководителя  = Руководители.ДолжностьРуководителя;
        ОблПодписи.Параметры.ГлавныйБухгалтер       = Руководители.ГлавныйБухгалтер;
        ОблПодписи.Параметры.НачальникТХК           = Руководители.НачальникВТЛ;
        ТабДокумент.Вывести(ОблПодписи);
        
        
        УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабДокумент, 
        НомерСтрокиНачало, ОбъектыПечати, Ссылка);
        
    КонецЦикла; 
    
    Возврат ТабДокумент;
    
КонецФункции

Функция ПечатьНакладнаяФ19_2021(МассивОбъектов, ОбъектыПечати, ПараметрыВывода)
    
    УстановитьПривилегированныйРежим(Истина);
    
    ТабДокумент = Новый ТабличныйДокумент;
    ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_Документ.ИНАГРО_Перемещение.ПФ_MXL_UK_Накладная_2021";
    
    Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ИНАГРО_Перемещение.ПФ_MXL_UK_Накладная_2021");
    
    КодЯзыкаПечать = ПараметрыВывода.КодЯзыкаДляМногоязычныхПечатныхФорм;
    Макет.КодЯзыкаМакета = КодЯзыкаПечать;
    
    ПервыйДокумент = Истина;
    
    Запрос = Новый Запрос;
    Запрос.Текст = 
    "ВЫБРАТЬ
    |   ИНАГРО_Перемещение.Ссылка КАК Ссылка,
    |   ИНАГРО_Перемещение.Номер КАК Номер,
    |   ИНАГРО_Перемещение.Дата КАК Дата,
    |   ИНАГРО_Перемещение.Организация.НаименованиеПолное КАК НаименованиеПолное,
    |   ИНАГРО_Перемещение.Склад КАК Склад,
    |   ИНАГРО_Перемещение.НовыйСклад КАК НовыйСклад,
    |   ИНАГРО_Перемещение.Урожай КАК Урожай,
    |   ИНАГРО_Перемещение.Организация КАК Организация,
    |   ИНАГРО_Перемещение.Владелец КАК Владелец,
    |   ИНАГРО_ПеремещениеКультуры.НомерСтроки КАК НомерСтроки,
    |   ИНАГРО_ПеремещениеКультуры.Номенклатура КАК Номенклатура,
    |   ИНАГРО_ПеремещениеКультуры.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
    |   ИНАГРО_ПеремещениеКультуры.Фасовка КАК Фасовка,
    |   ИНАГРО_ПеремещениеКультуры.Остаток КАК Остаток,
    |   ИНАГРО_ПеремещениеКультуры.ФизическийВес КАК ФизическийВес,
    |   ИНАГРО_ПеремещениеКультуры.ЛабораторныйАнализ КАК ЛабораторныйАнализ,
    |   ИНАГРО_ПеремещениеКультуры.НомерАнализа КАК НомерАнализа,
    |   ИНАГРО_ПеремещениеКультуры.Влажность КАК Влажность,
    |   ИНАГРО_ПеремещениеКультуры.ЗачетныйВес КАК ЗачетныйВес,
    |   ИНАГРО_ПеремещениеКультуры.ЗерноваяПримесь КАК ЗерноваяПримесь,
    |   ИНАГРО_ПеремещениеКультуры.СорнаяПримесь КАК СорнаяПримесь,
    |   ИНАГРО_ПеремещениеКультуры.Количество КАК Количество,
    |   ИНАГРО_ПеремещениеКультуры.Цена КАК Цена,
    |   ИНАГРО_ПеремещениеКультуры.Сумма КАК Сумма,
    |   ИНАГРО_ПеремещениеКультуры.СчетУчетаБУ КАК СчетУчетаБУ,
    |   ИНАГРО_ПеремещениеКультуры.НовыйСчетУчетаБУ КАК НовыйСчетУчетаБУ,
    |   ИНАГРО_ПеремещениеКультуры.УдалитьСтатьяПриростаУбылиЗапасов КАК СтатьяПриростаУбылиЗапасов,
    |   ИНАГРО_ПеремещениеКультуры.УдалитьСтатьяПриростаУбылиЗапасовНовая КАК СтатьяПриростаУбылиЗапасовНовая,
    |   ИНАГРО_ПеремещениеКультуры.ДокументОприходования КАК ДокументОприходования,
    |   ИНАГРО_ПеремещениеКультуры.НалоговоеНазначение КАК НалоговоеНазначение,
    |   ИНАГРО_ПеремещениеКультуры.НалоговоеНазначениеНовое КАК НалоговоеНазначениеНовое,
    |   ИНАГРО_ПеремещениеКультуры.Масличность КАК Масличность,
    |   ИНАГРО_ПеремещениеКультуры.УдалитьКоэффициент КАК УдалитьКоэффициент,
    |   ИНАГРО_Перемещение.Организация.КодПоЕДРПОУ КАК ОрганизацияКодПоЕДРПОУ,
    |   ИНАГРО_Перемещение.НовыйСклад.Код КАК НомерСкладКуда
    |ИЗ
    |   Документ.ИНАГРО_Перемещение.Культуры КАК ИНАГРО_ПеремещениеКультуры
    |       ЛЕВОЕ СОЕДИНЕНИЕ Документ.ИНАГРО_Перемещение КАК ИНАГРО_Перемещение
    |       ПО ИНАГРО_ПеремещениеКультуры.Ссылка = ИНАГРО_Перемещение.Ссылка
    |ГДЕ
    |   ИНАГРО_Перемещение.Ссылка В(&МассивОбъектов)
    |ИТОГИ
    |   СУММА(ФизическийВес),
    |   СУММА(ЗачетныйВес)
    |ПО
    |   Ссылка";
    
    
    // печать производится на языке, указанном в настройках пользователя
    Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);  
    Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
    Пока Выборка.Следующий() Цикл
        
        Если Не ПервыйДокумент Тогда
            ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
        КонецЕсли;
        ПервыйДокумент = Ложь;
        
        // Запомним номер строки, с которой начали выводить текущий документ.
        НомерСтрокиНачало = ТабДокумент.ВысотаТаблицы + 1;
        
        Шапка = Макет.ПолучитьОбласть("Шапка");
        
        ОблСтр = Макет.ПолучитьОбласть("Строка");
        ОблПодписи = Макет.ПолучитьОбласть("Дно");
        
        Шапка.Параметры.Организация = Выборка.НаименованиеПолное;
        Шапка.Параметры.КодЕДРПОУ = Выборка.ОрганизацияКодПоЕДРПОУ;
        //Шапка.Параметры.Номер = Выборка.Номер;
        Шапка.Параметры.ДатаДень = Формат(Выборка.Дата, "ДФ=дд");
        Шапка.Параметры.ДатаМесяц = Формат(Выборка.Дата, "ДФ=ММММ");
        Шапка.Параметры.ДатаГод = Формат(Выборка.Дата, "ДФ=гг");
        
        Шапка.Параметры.СкладОткуда = Выборка.Склад;
        Шапка.Параметры.СкладКуда = Выборка.НовыйСклад;
        //Шапка.Параметры.НомерСкладКуда = Выборка.НомерСкладКуда;
        
        Шапка.Параметры.ЗавСкладом = ИНАГРО_Элеватор.ОтветственныеЛицаИмяФамилия(Выборка.Организация, Выборка.Дата, Выборка.Склад);
        Шапка.Параметры.ЗавНовымСкладом = ИНАГРО_Элеватор.ОтветственныеЛицаИмяФамилия(Выборка.Организация, Выборка.Дата, Выборка.НовыйСклад);
        
        ТабДокумент.Вывести(Шапка);
        
        ВыборкаДетальныеЗаписи = Выборка.Выбрать(); 
        Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
            ОблСтр.Параметры.Заполнить(ВыборкаДетальныеЗаписи);
            ОблСтр.Параметры.Код = ВыборкаДетальныеЗаписи.Номенклатура.Код;
            ОблСтр.Параметры.ПринадлежитПереместить = ВыборкаДетальныеЗаписи.ФизическийВес;
            ОблСтр.Параметры.ФактическиПеремещено = ВыборкаДетальныеЗаписи.ЗачетныйВес;
            
            ТабДокумент.Вывести(ОблСтр);		
        КонецЦикла;
        
        
        Руководители = ИНАГРО_Элеватор.ОтветственныеЛицаОрганизацииИмяФамилия(Выборка.Организация,Выборка.Дата);
        ОблПодписи.Параметры.ФИОНачальникаПТЛ = Руководители.НачальникВТЛ;
        ОблПодписи.Параметры.ФИОДиректора = Руководители.Руководитель;
        
        ПечОтпустил = "";
        ФИООтпустил = РегистрыСведений.ФИОФизическихЛиц.СрезПоследних(Выборка.Дата, Новый Структура("ФизическоеЛицо", ОтветственныеЛицаБП.ОтветственноеЛицоНаСкладе(Выборка.Склад, Выборка.Дата)));
        Если ФИООтпустил.Количество() > 0 Тогда
            ПечОтпустил = СокрЛП(ФИООтпустил[0].Имя)
            + " "
            + ВРег(СокрЛП(ФИООтпустил[0].Фамилия)); 
        Иначе
            ПечОтпустил = "";									 
        КонецЕсли;
        ОблПодписи.Параметры.ФИООтпустил = ПечОтпустил;
        
        ПечПолучил = "";
        ФИОПолучил = РегистрыСведений.ФИОФизическихЛиц.СрезПоследних(Выборка.Дата, Новый Структура("ФизическоеЛицо", ОтветственныеЛицаБП.ОтветственноеЛицоНаСкладе(Выборка.НовыйСклад, Выборка.Дата)));
        Если ФИОПолучил.Количество() > 0 Тогда
            ПечПолучил = СокрЛП(ФИОПолучил[0].Имя)
            + " "
            + ВРег(СокрЛП(ФИОПолучил[0].Фамилия)); 
        Иначе
            ПечПолучил = "";									 
        КонецЕсли;
        ОблПодписи.Параметры.ФИОПолучил = ПечПолучил;
        
        
        ТабДокумент.Вывести(ОблПодписи);
        
        
        УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабДокумент, 
        НомерСтрокиНачало, ОбъектыПечати, Выборка.Ссылка);
        
    КонецЦикла; 
    
    Возврат ТабДокумент;
    
КонецФункции   

Функция ПолучитьДополнительныеРеквизитыДляРеестра() Экспорт
	
	Результат = Новый Структура;	
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ПрограммныйИнтерфейс

// Заполняет счета учета номенклатуры в табличной части документа
//
// Параметры:
// Объект - СправочникСсылка - объект контактной информации
// ИмяТабличнойЧасти - имя табличной части
// СобственноеПодразделение - собственное подразделение.
//
Процедура ЗаполнитьСчетаУчетаВТабличнойЧасти(Объект, ИмяТабличнойЧасти, СобственноеПодразделение) Экспорт

	ТабличнаяЧасть = Объект[ИмяТабличнойЧасти];
	
	ДанныеОбъекта  = Новый Структура("Дата, Организация, Владелец, Склад, ОтражатьВБухгалтерскомУчете");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	ДанныеОбъекта.Вставить("СобственноеПодразделение", СобственноеПодразделение);
	
	ИмяНоменклатуры = "Номенклатура";
	
	СоответствиеСчетовУчета = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаУчетаСпискаНоменклатуры(
		ДанныеОбъекта.Организация, ОбщегоНазначения.ВыгрузитьКолонку(ТабличнаяЧасть, ИмяНоменклатуры, Истина), ДанныеОбъекта.Склад, ДанныеОбъекта.Дата);
			
	Для Каждого СтрокаТабличнойЧасти Из ТабличнаяЧасть Цикл
		СчетаУчета      = СоответствиеСчетовУчета.Получить(СтрокаТабличнойЧасти[ИмяНоменклатуры]);
		ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(ДанныеОбъекта, СтрокаТабличнойЧасти, СчетаУчета);
	КонецЦикла;

КонецПроцедуры

// Заполняет счета учета номенклатуры в строке табличной части документа
//
// Параметры:
//  ДанныеОбъекта         - структура данных объекта, используемых при заполнении счетов учета (вид операции,
//                          вид договора контрагента, признак комиссионной торговли и т.п.)
//  СтрокаТабличнойЧасти  - Строка - строка табличной части документа
//  СведенияОНоменклатуре - Структура - структура сведений о номенклатуре, либо структура счетов учета.
//
Процедура ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(ДанныеОбъекта, СтрокаТабличнойЧасти, СведенияОНоменклатуре = Неопределено) Экспорт
	
	СчетаУчета = Неопределено;
	Если СведенияОНоменклатуре <> Неопределено Тогда
		Если СведенияОНоменклатуре.Свойство("СчетаУчета") Тогда
			// СведенияОНоменклатуре - структура сведений номенклатуры
			СчетаУчета = СведенияОНоменклатуре.СчетаУчета;
		ИначеЕсли СведенияОНоменклатуре.Свойство("СчетУчетаБУ") Тогда
			// СведенияОНоменклатуре - структура счетов учета номенклатуры
			СчетаУчета = СведенияОНоменклатуре;
		Иначе
			Возврат;
		КонецЕсли;
				
		Если ЗначениеЗаполнено(СчетаУчета.НалоговоеНазначение) Тогда
			СтрокаТабличнойЧасти.НалоговоеНазначение      = СчетаУчета.НалоговоеНазначение;
			СтрокаТабличнойЧасти.НалоговоеНазначениеНовое = СчетаУчета.НалоговоеНазначение;
		КонецЕсли;
		
	КонецЕсли;	
	
	ЗаполнитьСчетаБУ(ДанныеОбъекта, СтрокаТабличнойЧасти, СчетаУчета);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка)
	
	Если ВидФормы <> "ФормаДокумента"
		И ВидФормы <> "ФормаОбъекта" Тогда
		Возврат;
	КонецЕсли;

	ВидОперации = Неопределено; 

	Если Параметры.Свойство("Ключ") И ЗначениеЗаполнено(Параметры.Ключ) Тогда
		ВидОперации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Параметры.Ключ, "ВидОперации");
	КонецЕсли;

	// Если документ копируется, то вид формы получаем из копируемого документа.
	Если НЕ ЗначениеЗаполнено(ВидОперации) Тогда
		Если Параметры.Свойство("ЗначениеКопирования")
			И ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
			ВидОперации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
				Параметры.ЗначениеКопирования, "ВидОперации");
		КонецЕсли;
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(ВидОперации) Тогда
		Если Параметры.Свойство("ЗначенияЗаполнения") 
			И ТипЗнч(Параметры.ЗначенияЗаполнения) = Тип("Структура") Тогда
			Если Параметры.ЗначенияЗаполнения.Свойство("ВидОперации") Тогда
				ВидОперации = Параметры.ЗначенияЗаполнения.ВидОперации;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ВидОперации) Тогда
		Если Параметры.Свойство("Основание")
			И ЗначениеЗаполнено(Параметры.Основание) Тогда
			ВидОперации = ОпределитьВидОперацииПоДокументуОснованию(Параметры.Основание);
		КонецЕсли;
	КонецЕсли;  
	
	СтандартнаяОбработка = Ложь;
	ФормаИНАГРО_Перемещение = ПолучитьСоответствиеВидовОперацийФормам();
	ВыбраннаяФорма = ФормаИНАГРО_Перемещение[ВидОперации];
	Если ВыбраннаяФорма = Неопределено Тогда
		ВыбраннаяФорма = "ФормаДокумента";
	КонецЕсли;
	
КонецПроцедуры 

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПолучитьСоответствиеВидовОперацийФормам() Экспорт

	ФормаИНАГРО_Перемещение = Новый Соответствие;
	
	ФормаИНАГРО_Перемещение.Вставить(Перечисления.ИНАГРО_ВидыОперацийПеремещения.Перемещение,     "ФормаДокументаОбщая");
	ФормаИНАГРО_Перемещение.Вставить(Перечисления.ИНАГРО_ВидыОперацийПеремещения.Перевзвешивание, "ФормаДокументаОбщая");
	ФормаИНАГРО_Перемещение.Вставить(Перечисления.ИНАГРО_ВидыОперацийПеремещения.СкладскойУчет,   "ФормаДокументаОбщая");
	
	Возврат ФормаИНАГРО_Перемещение;

КонецФункции 

Функция ОпределитьВидОперацииПоДокументуОснованию(Основание) Экспорт

	Результат = Перечисления.ИНАГРО_ВидыОперацийПеремещения.Перемещение;

	Возврат Результат;

КонецФункции

Функция ПолучитьФиксированныйМассивВидовОпераций() Экспорт

	МассивВидовОпераций = Новый Массив;
	СписокВидовОпераций = Новый СписокЗначений;
	
	ЗначенияПеречисления = Метаданные.Перечисления.ИНАГРО_ВидыОперацийПеремещения.ЗначенияПеречисления;
	Для Каждого ЗначениеПеречисления Из ЗначенияПеречисления Цикл
		ТекущийВидОперации = Перечисления.ИНАГРО_ВидыОперацийПеремещения[ЗначениеПеречисления.Имя];
		МассивВидовОпераций.Добавить(ТекущийВидОперации);
	КонецЦикла;
		
	Возврат Новый ФиксированныйМассив(МассивВидовОпераций);

КонецФункции

// Заполняет счета БУ в строке табличной части.
//
Процедура ЗаполнитьСчетаБУ(ДанныеОбъекта, СтрокаТабличнойЧасти, СчетаУчета)

	Если ДанныеОбъекта.ОтражатьВБухгалтерскомУчете Тогда
		
		Если СчетаУчета <> Неопределено Тогда
			
			Если ДанныеОбъекта.СобственноеПодразделение Тогда 			
				СтрокаТабличнойЧасти.СчетУчетаБУ      = СчетаУчета.СчетУчетаБУ;
				СтрокаТабличнойЧасти.НовыйСчетУчетаБУ = СчетаУчета.СчетУчетаБУ;
			Иначе			
				СтрокаТабличнойЧасти.СчетУчетаБУ      = СчетаУчета.СчетУчетаДоп;
				СтрокаТабличнойЧасти.НовыйСчетУчетаБУ = СчетаУчета.СчетУчетаДоп;
				
			КонецЕсли;
			
		КонецЕсли;	
		
	Иначе
		
		СтрокаТабличнойЧасти.СчетУчетаБУ      = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
		СтрокаТабличнойЧасти.НовыйСчетУчетаБУ = ПланыСчетов.Хозрасчетный.ПустаяСсылка();		
				
	КонецЕсли;	 

КонецПроцедуры

#КонецОбласти 	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
#КонецЕсли	