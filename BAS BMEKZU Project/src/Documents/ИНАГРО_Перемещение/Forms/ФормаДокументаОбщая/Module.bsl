#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды 
	
	Если Параметры.Ключ.Пустая() Тогда
		ПодготовитьФормуНаСервере();		
	КонецЕсли;	
	
	// Уведомим о появлении функционала рабочей даты
	ЭтаФорма.НастройкиПредупреждений = ОбщегоНазначенияБП.НастройкиПредупрежденийОбИзменениях("РабочаяДатаИзДокумента");

	// Показываем, если это новый документ и сама рабочая дата еще не установлена.
	ЭтаФорма.НастройкиПредупреждений.РабочаяДатаИзДокумента = ЭтаФорма.НастройкиПредупреждений.РабочаяДатаИзДокумента
	 	И ЭтаФорма.Параметры.Ключ.Пустая()
	  	И НЕ ЗначениеЗаполнено(БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("РабочаяДата"));
	  
	УстановитьПараметрыВыбораВидОперации();
	
	// Если форма вызвана в режиме смена вида операции - модифицируем сразу при открытии, 
	// чтобы можно было подтвердить или отказаться от изменения путем сохранения или 
	// отказа от сохранения документа.
	Если Параметры.Свойство("ИзменитьВидОперации") И Параметры.ИзменитьВидОперации Тогда
		
		// Не кэшируем переменную Объект, т.к. может вызываться Форма.ИзменитьРеквизиты(),
		// которая меняет Объект.
		Объект.ВидОперации = Параметры.ЗначенияЗаполнения.ВидОперации;
		
		УстановитьЗаголовокФормы();		
		
		УправлениеФормой(ЭтаФорма);
		
		Модифицированность = Истина;
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если  ТипЗнч(Параметр) = Тип("Структура") 
		И Параметр.Свойство("ИдентификаторВызывающейФормы")
		И Параметр.ИдентификаторВызывающейФормы = УникальныйИдентификатор Тогда
		
		Если ИмяСобытия = "СозданЛабораторныйАнализ" ИЛИ ИмяСобытия = "ИзмененЛабораторныйАнализ" Тогда
			
			ТекущиеДанные = Элементы.Культуры.ТекущиеДанные;
			
			Если ИНАГРО_Элеватор.ЛабораторныйАнализПроверкаЗаполнения(Параметр.ДокументСсылка, ПолучитьПараметрыДляПроверкиЗаполнения(ТекущиеДанные)) Тогда				
				ТекущиеДанные.ЛабораторныйАнализ = Параметр.ДокументСсылка;
				КультурыЛабораторныйАнализПриИзменении(Неопределено);
				Модифицированность = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		ОбщегоНазначенияБПКлиент.ОбработкаОповещенияФормыДокумента(ЭтаФорма, Объект.Ссылка, ИмяСобытия, Параметр, Источник);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	ПодготовитьФормуНаСервере();	
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	УстановитьЗаголовокФормы();	
		
	УстановитьСостояниеДокумента();	
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	Если НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДатаДокумента) Тогда
		// Изменение времени не влияет на поведение документа.
		ТекущаяДатаДокумента = Объект.Дата;
		Возврат;
	КонецЕсли;		
		
	// Общие проверки условий по датам.
	ТребуетсяВызовСервера = ИНАГРО_ЭлеваторКлиент.ТребуетсяВызовСервераПриИзмененииДатыДокумента(Объект.Дата, ТекущаяДатаДокумента);
		
	// Если определили, что изменение даты может повлиять на какие-либо параметры, 
	// то передаем обработку на сервер.
	Если ТребуетсяВызовСервера Тогда
		ДатаПриИзмененииНаСервере();
	КонецЕсли;
	
	// Запомним новую дату документа.
	ТекущаяДатаДокумента = Объект.Дата;	
	
КонецПроцедуры

&НаСервере
Процедура ДатаПриИзмененииНаСервере()
	
	УстановитьФункциональныеОпцииФормы();
	
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ВидОперацииПриИзменении(Элемент)
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		ОрганизацияПриИзмененииНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()
	
	ЗаполнитьОстаткиВТабличнойЧасти();
	
	УстановитьФункциональныеОпцииФормы();	
	
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ОтражатьВБухгалтерскомУчетеПриИзменении(Элемент)
	
	Если Объект.Культуры.Количество() > 0 Тогда
		
		Если Объект.ОтражатьВБухгалтерскомУчете Тогда		
			ТекстВопроса = НСтр("ru='Установить счета бухгалтерского учета в соответствии со значениями по умолчанию?';uk='Встановити рахунки бухгалтерського обліку відповідно до значень за замовчуванням?'");
		Иначе
			ТекстВопроса = НСтр("ru='Очистить счета бухгалтерского учета?';uk='Очистити рахунки бухгалтерського обліку?'");
		КонецЕсли;
		
		Оповещение = Новый ОписаниеОповещения("ОтражатьВБухгалтерскомУчетеПриИзмененииЗавершение", ЭтотОбъект, Параметры);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);	
		
		Возврат;
		
	КонецЕсли;	
	
	УправлениеФормой(ЭтаФорма); 
	
КонецПроцедуры

&НаКлиенте
Процедура ОтражатьВБухгалтерскомУчетеПриИзмененииЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		УправлениеФормой(ЭтаФорма);
		Возврат;
	КонецЕсли; 	
	
	ОтражатьВБухгалтерскомУчетеПриИзмененииЗавершениеНаСервере();
   
КонецПроцедуры

&НаСервере
Процедура ОтражатьВБухгалтерскомУчетеПриИзмененииЗавершениеНаСервере()
	
	Документы.ИНАГРО_Перемещение.ЗаполнитьСчетаУчетаВТабличнойЧасти(Объект, "Культуры", СобственноеПодразделение);
	
	УправлениеФормой(ЭтаФорма);
   
КонецПроцедуры

&НаКлиенте
Процедура ВладелецПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.Владелец) Тогда
		
		ПараметрыОтбораДоговора = ПолучитьПараметрыДляДоговоров();
		
		ИНАГРО_ЭлеваторЗаполнениеДокументов.ПриИзмененииЗначенияКонтрагента(Объект.Дата, Объект.Организация, Объект.Владелец, Объект.ДоговорКонтрагента, ПараметрыОтбораДоговора);
				
		ВладелецПриИзмененииНаСервере();
		 
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВладелецПриИзмененииНаСервере()
	
	ЗаполнитьОстаткиВТабличнойЧасти();

	УстановитьФункциональныеОпцииФормы();
	
	Если СобственноеПодразделение Тогда
		Объект.ОтражатьВБухгалтерскомУчете = Ложь;
	КонецЕсли;
	
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ДоговорКонтрагентаПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		ЗаполнитьОстаткиВТабличнойЧасти();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СкладПриИзменении(Элемент)

	Если ЗначениеЗаполнено(Объект.Склад) Тогда
		СкладПриИзмененииНаСервере();
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура СкладПриИзмененииНаСервере()
			
	Объект.МестоХранения = Справочники.ИНАГРО_МестаХранения.ПустаяСсылка();

	ЗаполнитьОстаткиВТабличнойЧасти();

	УстановитьФункциональныеОпцииФормы(); 	
	
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура НовыйСкладПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.НовыйСклад) Тогда
		НовыйСкладПриИзмененииНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НовыйСкладПриИзмененииНаСервере()
		
	Объект.НовоеМестоХранения = Справочники.ИНАГРО_МестаХранения.ПустаяСсылка();

	УстановитьФункциональныеОпцииФормы(); 	
	
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ВидХраненияПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.ВидХранения) Тогда
		
		ПараметрыОтбораДоговора = ПолучитьПараметрыДляДоговоров();
		
		ИНАГРО_ЭлеваторЗаполнениеДокументов.ПриИзмененииЗначенияКонтрагента(Объект.Дата, Объект.Организация, Объект.Владелец, Объект.ДоговорКонтрагента, ПараметрыОтбораДоговора);		
		
		ЗаполнитьОстаткиВТабличнойЧасти();
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура УрожайПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.Урожай) Тогда
		
		ПараметрыОтбораДоговора = ПолучитьПараметрыДляДоговоров();
		
		ИНАГРО_ЭлеваторЗаполнениеДокументов.ПриИзмененииЗначенияКонтрагента(Объект.Дата, Объект.Организация, Объект.Владелец, Объект.ДоговорКонтрагента, ПараметрыОтбораДоговора);
		
		ЗаполнитьОстаткиВТабличнойЧасти();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОписаниеДвиженияФормы36НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(
		Элемент.ТекстРедактирования,
		ЭтотОбъект,
		"Объект.ОписаниеДвиженияФормы36",
		НСтр("ru='Описание движения формы 36';uk='Опис руху форми 36'"));
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(
		Элемент.ТекстРедактирования,
		ЭтотОбъект,
		"Объект.Комментарий");
	
КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиСобытийЭлементовТаблицыФормыКультуры

&НаКлиенте
Процедура КультурыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущиеДанные = Элементы.Культуры.ТекущиеДанные;
	
	УстановитьДоступностьПоказателейКачества(ТекущиеДанные);

КонецПроцедуры

&НаКлиенте
Процедура КультурыНоменклатураПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Культуры.ТекущиеДанные;	
	
	ДанныеСтрокиТаблицы = Новый Структура(
		"Номенклатура, ЕдиницаИзмерения, Остаток,
		|СчетУчетаБУ, НовыйСчетУчетаБУ, НалоговоеНазначение,
		|НалоговоеНазначениеНовое");
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, ТекущиеДанные);
	
	
	ДанныеОбъекта = Новый Структура(
		"Организация, Владелец, ДоговорКонтрагента, 
		|Склад, ВидХранения, Урожай,
		|Дата, ОтражатьВБухгалтерскомУчете");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	ДанныеОбъекта.Вставить("СобственноеПодразделение", СобственноеПодразделение);
	
	КультурыНоменклатураПриИзмененииНаСервере(ДанныеСтрокиТаблицы, ДанныеОбъекта);	

	ПараметрыДляРасчетаЗачетногоВеса = ПолучитьПараметрыДляРасчетаЗачетногоВеса(ТекущиеДанные);
	
	ТекущиеДанные.ЗачетныйВес = ИНАГРО_Элеватор.ЗачетныйВесПриПроведении(ПараметрыДляРасчетаЗачетногоВеса);
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтрокиТаблицы);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура КультурыНоменклатураПриИзмененииНаСервере(СтрокаТабличнойЧасти, Знач ДанныеОбъекта)
	
	СведенияОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОНоменклатуре(СтрокаТабличнойЧасти.Номенклатура, ДанныеОбъекта);
	Если СведенияОНоменклатуре = Неопределено Тогда
		Возврат;
	КонецЕсли;

	СтрокаТабличнойЧасти.ЕдиницаИзмерения = СтрокаТабличнойЧасти.Номенклатура.БазоваяЕдиницаИзмерения;			

	Документы.ИНАГРО_Перемещение.ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(ДанныеОбъекта, СтрокаТабличнойЧасти, СведенияОНоменклатуре);

	ЗаполнитьОстаткиВСтрокеТабличнойЧасти(ДанныеОбъекта, СтрокаТабличнойЧасти);
	
КонецПроцедуры

&НаКлиенте
Процедура КультурыФасовкаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Культуры.ТекущиеДанные;
	
	Если ЗначениеЗаполнено(ТекущиеДанные.Фасовка) Тогда
		
		ДанныеСтрокиТаблицы = Новый Структура("Фасовка, Количество, ФизическийВес");
		ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, ТекущиеДанные);		
				
		КультурыФасовкаПриИзмененииНаСервере(ДанныеСтрокиТаблицы);	
		
		ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтрокиТаблицы);	
		
	КонецЕсли;	
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура КультурыФасовкаПриИзмененииНаСервере(СтрокаТабличнойЧасти)
	
	СтрокаТабличнойЧасти.ФизическийВес = СтрокаТабличнойЧасти.Фасовка.Вес * СтрокаТабличнойЧасти.Количество;			
	
КонецПроцедуры

&НаКлиенте
Процедура КультурыКоличествоПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Культуры.ТекущиеДанные;
	
	Если ЗначениеЗаполнено(ТекущиеДанные.Фасовка) Тогда
		
		ДанныеСтрокиТаблицы = Новый Структура("Фасовка, Количество, ФизическийВес");
		ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, ТекущиеДанные);		
				
		КультурыКоличествоПриИзмененииНаСервере(ДанныеСтрокиТаблицы);	
		
		ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтрокиТаблицы);	
		
	КонецЕсли;

	ПараметрыДляРасчетаЗачетногоВеса = ПолучитьПараметрыДляРасчетаЗачетногоВеса(ТекущиеДанные);
	
	ТекущиеДанные.ЗачетныйВес = ИНАГРО_Элеватор.ЗачетныйВесПриПроведении(ПараметрыДляРасчетаЗачетногоВеса);		
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура КультурыКоличествоПриИзмененииНаСервере(СтрокаТабличнойЧасти)
	
	СтрокаТабличнойЧасти.ФизическийВес = СтрокаТабличнойЧасти.Фасовка.Вес * СтрокаТабличнойЧасти.Количество;			
	
КонецПроцедуры

&НаКлиенте
Процедура КультурыЛабораторныйАнализПриИзменении(Элемент)

	ТекущиеДанные = Элементы.Культуры.ТекущиеДанные;	
	
	ДанныеСтрокиТаблицы = Новый Структура(
		"ЛабораторныйАнализ, НомерАнализа, Влажность,
		|СорнаяПримесь, ЗерноваяПримесь, ЗачетныйВес,
		|Масличность");
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, ТекущиеДанные); 
		
	ПараметрыДляРасчетаЗачетногоВеса = ПолучитьПараметрыДляРасчетаЗачетногоВеса(ТекущиеДанные);

	ИНАГРО_Элеватор.ЛабораторныйАнализПриИзмененииНаСервере(ДанныеСтрокиТаблицы, ПараметрыДляРасчетаЗачетногоВеса);
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтрокиТаблицы);
	
	УстановитьДоступностьПоказателейКачества(ТекущиеДанные);

	УправлениеФормой(ЭтаФорма);		
	
КонецПроцедуры

&НаКлиенте
Процедура КультурыЛабораторныйАнализНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыОтбора = Новый Структура;
	
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		ПараметрыОтбора.Вставить("Организация",        Объект.Организация);		
	КонецЕсли;	
	Если ЗначениеЗаполнено(Объект.Владелец) Тогда
		ПараметрыОтбора.Вставить("Владелец",           Объект.Владелец);
	КонецЕсли;	
	Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		ПараметрыОтбора.Вставить("ДоговорКонтрагента", Объект.ДоговорКонтрагента);		
	КонецЕсли;	
	Если ЗначениеЗаполнено(Объект.Склад) Тогда
		ПараметрыОтбора.Вставить("Склад",              Объект.Склад);
	КонецЕсли;	
	Если ЗначениеЗаполнено(Объект.ВидХранения) Тогда
		ПараметрыОтбора.Вставить("ВидХранения",        Объект.ВидХранения);
	КонецЕсли;
	
	ТекущиеДанные = Элементы.Культуры.ТекущиеДанные;
	Если ЗначениеЗаполнено(ТекущиеДанные.Номенклатура) Тогда
		ПараметрыОтбора.Вставить("Номенклатура",       ТекущиеДанные.Номенклатура);
	КонецЕсли;	
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Отбор",  ПараметрыОтбора);
	ПараметрыФормы.Вставить("Ссылка", Объект.Ссылка);
	
	ОткрытьФорму("Документ.ИНАГРО_ЛабораторныйАнализ.Форма.ФормаВыбора", ПараметрыФормы, Элемент, УникальныйИдентификатор, , , , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
КонецПроцедуры

&НаКлиенте
Процедура КультурыФизическийВесПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Культуры.ТекущиеДанные;
	
	ТекущиеДанные.Сумма = ТекущиеДанные.ФизическийВес * ТекущиеДанные.Цена;

	ПараметрыДляРасчетаЗачетногоВеса = ПолучитьПараметрыДляРасчетаЗачетногоВеса(ТекущиеДанные);
	
	ТекущиеДанные.ЗачетныйВес = ИНАГРО_Элеватор.ЗачетныйВесПриПроведении(ПараметрыДляРасчетаЗачетногоВеса);
	
	Если ЗначениеЗаполнено(ТекущиеДанные.Фасовка) Тогда
		
		ДанныеСтрокиТаблицы = Новый Структура("Фасовка, Количество, ФизическийВес");
		ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, ТекущиеДанные);		
				
		КультурыФизическийВесПриИзмененииНаСервере(ДанныеСтрокиТаблицы);	
		
		ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтрокиТаблицы);	
		
	КонецЕсли;	
		
КонецПроцедуры

&НаСервереБезКонтекста
Процедура КультурыФизическийВесПриИзмененииНаСервере(СтрокаТабличнойЧасти)
	
	СтрокаТабличнойЧасти.Количество = Окр(?(СтрокаТабличнойЧасти.Фасовка.Вес = 0, 0, СтрокаТабличнойЧасти.ФизическийВес / СтрокаТабличнойЧасти.Фасовка.Вес));
	
КонецПроцедуры

&НаКлиенте
Процедура КультурыВлажностьПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Культуры.ТекущиеДанные;
	
	ПараметрыДляРасчетаЗачетногоВеса = ПолучитьПараметрыДляРасчетаЗачетногоВеса(ТекущиеДанные);
	
	ТекущиеДанные.ЗачетныйВес = ИНАГРО_Элеватор.ЗачетныйВесПриПроведении(ПараметрыДляРасчетаЗачетногоВеса);
	
КонецПроцедуры

&НаКлиенте
Процедура КультурыСорнаяПримесьПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Культуры.ТекущиеДанные;
	
	ПараметрыДляРасчетаЗачетногоВеса = ПолучитьПараметрыДляРасчетаЗачетногоВеса(ТекущиеДанные);
	
	ТекущиеДанные.ЗачетныйВес = ИНАГРО_Элеватор.ЗачетныйВесПриПроведении(ПараметрыДляРасчетаЗачетногоВеса);

КонецПроцедуры

&НаКлиенте
Процедура КультурыЗерноваяПримесьИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Культуры.ТекущиеДанные;
	
	ПараметрыДляРасчетаЗачетногоВеса = ПолучитьПараметрыДляРасчетаЗачетногоВеса(ТекущиеДанные);
	
	ТекущиеДанные.ЗачетныйВес = ИНАГРО_Элеватор.ЗачетныйВесПриПроведении(ПараметрыДляРасчетаЗачетногоВеса);

КонецПроцедуры

&НаКлиенте
Процедура КультурыЦенаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Культуры.ТекущиеДанные;
	
	ТекущиеДанные.Сумма = ТекущиеДанные.ФизическийВес * ТекущиеДанные.Цена;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура СоздатьЛабораторныйАнализ(Команда)
	
	Если ТекущийЭлемент = Элементы.Культуры Тогда
		
		ТекущиеДанные = Элементы.Культуры.ТекущиеДанные;
		
		Если Объект.Культуры.Количество() = 0 ИЛИ ТекущиеДанные = Неопределено Тогда			
			Возврат;
		Иначе
			
			ЗначенияЗаполнения = Новый Структура;
			ЗначенияЗаполнения.Вставить("Ссылка",             ПредопределенноеЗначение("Документ.ИНАГРО_ЛабораторныйАнализ.ПустаяСсылка"));
			ЗначенияЗаполнения.Вставить("Дата",               Объект.Дата);
			ЗначенияЗаполнения.Вставить("Организация",        Объект.Организация);
			ЗначенияЗаполнения.Вставить("Владелец",           Объект.Владелец);
			ЗначенияЗаполнения.Вставить("ДоговорКонтрагента", Объект.ДоговорКонтрагента);
			ЗначенияЗаполнения.Вставить("Склад",        	  Объект.Склад);
			ЗначенияЗаполнения.Вставить("ВидХранения",        Объект.ВидХранения);
			ЗначенияЗаполнения.Вставить("Урожай",             Объект.Урожай);
			ЗначенияЗаполнения.Вставить("Номенклатура",       ТекущиеДанные.Номенклатура);
			ЗначенияЗаполнения.Вставить("Влажность",          ТекущиеДанные.Влажность);
			ЗначенияЗаполнения.Вставить("СорнаяПримесь",      ТекущиеДанные.СорнаяПримесь);
			ЗначенияЗаполнения.Вставить("ЗерноваяПримесь",    ТекущиеДанные.ЗерноваяПримесь);
			
			ЗначенияЗаполнения.Вставить("МассаПартии",        ТекущиеДанные.ФизическийВес);
			
			ИНАГРО_ЭлеваторКлиент.СоздатьДокументНаОсновании(ЭтаФорма, ЗначенияЗаполнения);
			
		КонецЕсли;
		
	Иначе	
		
		ТекстСообщения = НСтр("ru='Лабораторный анализ можно создать только для строки табличной части!';uk='Лабораторний аналіз можна створити тільки для рядка табличної частини!'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Объект.Культуры");
		ТекущийЭлемент = Элементы.Культуры;
		
		Возврат;	
		
	КонецЕсли;
		
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ПодготовитьФормуНаСервере()

	УстановитьФункциональныеОпцииФормы();
	
	ТекущаяДатаДокумента = Объект.Дата;
	                	
	УстановитьЗаголовокФормы(); 	

	УправлениеФормой(ЭтаФорма);
	
	УстановитьСостояниеДокумента();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьФункциональныеОпцииФормы()

	ОбщегоНазначенияБПКлиентСервер.УстановитьПараметрыФункциональныхОпцийФормыДокумента(ЭтаФорма);	
	
	ЛабораторияРаботаетВСистеме  = ИНАГРО_Элеватор.ПолучитьПараметрУчетаЭлеватора(Объект.Дата, "ЛабораторияРаботаетВСистеме", Истина);
	
	СобственноеПодразделение  	 = ИНАГРО_Элеватор.ПолучитьДополнительныйРеквизитКонтрагента(Объект.Владелец, "СобственноеПодразделение");
	ВидимостьМестаХранения   	 = ИНАГРО_Элеватор.ПолучитьДополнительныйРеквизитСклада(Объект.Склад, "ВестиУчетПоМестамХранения");
	ВидимостьНовогоМестаХранения = ИНАГРО_Элеватор.ПолучитьДополнительныйРеквизитСклада(Объект.НовыйСклад, 	"ВестиУчетПоМестамХранения");
	
	ВидимостьМасличность         = ИНАГРО_Элеватор.ПолучитьВидимостьМасличность(Объект.Дата);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)

	Элементы = Форма.Элементы;
	Объект   = Форма.Объект;
	
	Элементы.МестоХранения.Видимость		 = Форма.ВидимостьМестаХранения;
	Элементы.НовоеМестоХранения.Видимость	 = Форма.ВидимостьНовогоМестаХранения;
	
	Элементы.КультурыЛабораторныйАнализ.Видимость = Форма.ЛабораторияРаботаетВСистеме;

	ОперацияПеревзвешивание  = ?(Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ИНАГРО_ВидыОперацийПеремещения.Перевзвешивание"), 	Истина, Ложь);
	ОперацияПеремещение		 = ?(Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ИНАГРО_ВидыОперацийПеремещения.Перемещение"), 		Истина, Ложь);
	ОперацияСкладскойУчет    = ?(Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ИНАГРО_ВидыОперацийПеремещения.СкладскойУчет"), 	Истина, Ложь);
		
	Элементы.ДатаОкончанияИнвентаризации.Видимость = ОперацияПеревзвешивание;
	
	Элементы.Владелец.Видимость 					= НЕ ОперацияСкладскойУчет;	
	Элементы.ДоговорКонтрагента.Видимость 			= НЕ ОперацияСкладскойУчет;
	Элементы.НовыйДоговорКонтрагента.Видимость 		= НЕ ОперацияСкладскойУчет;	
	Элементы.ВидХранения.Видимость 					= НЕ ОперацияСкладскойУчет;
	Элементы.Урожай.Видимость 						= НЕ ОперацияСкладскойУчет;	
	Элементы.НовыйУрожай.Видимость 					= НЕ ОперацияСкладскойУчет;
	Элементы.ОтражатьВБухгалтерскомУчете.Видимость  = НЕ ОперацияСкладскойУчет;
	
	Если ОперацияСкладскойУчет Тогда
		Объект.ОтражатьВБухгалтерскомУчете = Ложь;
		Элементы.ГруппаДоговорСкладХранение.Заголовок = НСтр("ru = 'Склады'; uk = 'Склади'");
	Иначе
		Элементы.ГруппаДоговорСкладХранение.Заголовок = НСтр("ru = 'Договор, склад, хранение'; uk = 'Договір, склад, зберігання'");
	КонецЕсли;
	
	ОтражатьВБухгалтерскомУчете = Объект.ОтражатьВБухгалтерскомУчете;
	
	Элементы.КультурыСчетУчетаБУ.Видимость              = ОтражатьВБухгалтерскомУчете;
	Элементы.КультурыНалоговоеНазначение.Видимость      = ОтражатьВБухгалтерскомУчете;
	Элементы.КультурыНовыйСчетУчетаБУ.Видимость         = ОтражатьВБухгалтерскомУчете;
	Элементы.КультурыНалоговоеНазначениеНовое.Видимость = ОтражатьВБухгалтерскомУчете;

	// Масличность
	Элементы.КультурыМасличность.Видимость = Форма.ВидимостьМасличность;
		
КонецПроцедуры

&НаСервере
Процедура УстановитьПараметрыВыбораВидОперации()
	
	МассивВидовОпераций = Документы.ИНАГРО_Перемещение.ПолучитьФиксированныйМассивВидовОпераций();
	
	ПараметрМассивВидовОпераций = Новый ПараметрВыбора("Отбор.Ссылка", МассивВидовОпераций);
	
	НовыйМассив = Новый Массив();
	НовыйМассив.Добавить(ПараметрМассивВидовОпераций);
	НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);
	
	Элементы.ВидОперации.ПараметрыВыбора = НовыеПараметры;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗаголовокФормы()
	
	ОбъектФормы = ЭтаФорма.Объект;

	ТекстЗаголовка = НСтр("ru='Перемещение';uk='Переміщення'");
	
	Если ЗначениеЗаполнено(ОбъектФормы.Ссылка) Тогда
		ТекстЗаголовка = ТекстЗаголовка + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru=' %1 от %2';uk=' %1 від %2'"), ОбъектФормы.Номер, ОбъектФормы.Дата);
	Иначе
		ТекстЗаголовка = ТекстЗаголовка + НСтр("ru=' (создание)';uk=' (створення)'");
	КонецЕсли;
	
	ЭтаФорма.Заголовок = ТекстЗаголовка + " (" + Строка(ОбъектФормы.ВидОперации) + ")";

КонецПроцедуры

&НаСервере
Процедура УстановитьСостояниеДокумента()
	
	СостояниеДокумента = ОбщегоНазначенияБП.СостояниеДокумента(Объект);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОстаткиВТабличнойЧасти()
	
	ДанныеОбъекта = Новый Структура(
		"Организация, Владелец, ДоговорКонтрагента, 
		|Склад, ВидХранения, Урожай,
		|Дата");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);	
	
	Для Каждого СтрокаТабличнойЧасти Из Объект.Культуры Цикл
		ЗаполнитьОстаткиВСтрокеТабличнойЧасти(ДанныеОбъекта, СтрокаТабличнойЧасти);
	КонецЦикла;

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьОстаткиВСтрокеТабличнойЧасти(ДанныеОбъекта, СтрокаТабличнойЧасти)
	
	ДанныеОбъекта.Вставить("Номенклатура", СтрокаТабличнойЧасти.Номенклатура);
	
	СтруктураПоОстаткам = ИНАГРО_Элеватор.ПроверкаНаличияЗерна(ДанныеОбъекта);	
	
	СтрокаТабличнойЧасти.Остаток = ?(СтруктураПоОстаткам.ВесОстаток > 0, СтруктураПоОстаткам.ВесОстаток, 0);
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьПараметрыДляДоговоров()

	ПараметрыОтбора = Новый Структура("ВидХранения, Урожай");
	ЗаполнитьЗначенияСвойств(ПараметрыОтбора, Объект);

	Возврат ПараметрыОтбора;

КонецФункции

&НаКлиенте
Функция ПолучитьПараметрыДляПроверкиЗаполнения(СтрокаТабличнойЧасти)
	
	ПараметрыДляПроверкиЗаполнения = Новый Структура("Склад, ВидХранения, Урожай");
	ЗаполнитьЗначенияСвойств(ПараметрыДляПроверкиЗаполнения, Объект);
	ПараметрыДляПроверкиЗаполнения.Вставить("Номенклатура", СтрокаТабличнойЧасти.Номенклатура);

	Возврат ПараметрыДляПроверкиЗаполнения; 

КонецФункции

&НаКлиенте
Функция ПолучитьПараметрыДляРасчетаЗачетногоВеса(СтрокаТабличнойЧасти)
	
	ПараметрыДляРасчетаЗачетногоВеса = Новый Структура(
		"Ссылка, Дата, Организация,
		|Владелец, ДоговорКонтрагента, Номенклатура,
		|Склад, Влажность, СорнаяПримесь,
		|ФизическийВес, ЗачетныйВес");
	ЗаполнитьЗначенияСвойств(ПараметрыДляРасчетаЗачетногоВеса, Объект);
	ЗаполнитьЗначенияСвойств(ПараметрыДляРасчетаЗачетногоВеса, СтрокаТабличнойЧасти);
	
	Возврат ПараметрыДляРасчетаЗачетногоВеса; 

КонецФункции

&НаКлиенте
Процедура УстановитьДоступностьПоказателейКачества(СтрокаТабличнойЧасти)
	
	СписокРеквизитов = Новый Структура("Влажность, СорнаяПримесь, ЗерноваяПримесь");	
	ИНАГРО_ЭлеваторКлиентСервер.УстановитьДоступностьРеквизитовПоНастройке(ЭтаФорма, СписокРеквизитов, ЛабораторияРаботаетВСистеме, ЗначениеЗаполнено(СтрокаТабличнойЧасти.ЛабораторныйАнализ), "Культуры");

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункцииБСП

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти 