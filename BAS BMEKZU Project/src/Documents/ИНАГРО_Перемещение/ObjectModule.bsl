#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда  

#Область ОбработчикиСобытий

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	ТипДанныхЗаполнения = ТипЗнч(ДанныеЗаполнения);
	
	Если ДанныеЗаполнения <> Неопределено И ТипДанныхЗаполнения <> Тип("Структура")
		И Метаданные().ВводитсяНаОсновании.Содержит(ДанныеЗаполнения.Метаданные()) Тогда
		ЗаполнитьПоДокументуОснованию(ДанныеЗаполнения);
	КонецЕсли;
	
	ИНАГРО_ЭлеваторЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект);

	ЗаполнениеДокументов.Заполнить(ЭтотОбъект, ДанныеЗаполнения); 
	
	Если  ТипДанныхЗаполнения = Тип("Структура") И ДанныеЗаполнения.Свойство("ВидОперации") Тогда
		ВидОперации = ДанныеЗаполнения.ВидОперации;
	КонецЕсли;
		
	ОтражатьВБухгалтерскомУчете = Истина;
				
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	МассивНепроверяемыхРеквизитов = Новый Массив; 	
	
	Если ВидОперации = Перечисления.ИНАГРО_ВидыОперацийПеремещения.СкладскойУчет Тогда 		
		МассивНепроверяемыхРеквизитов.Добавить("Владелец, ВидХранения, Урожай");					
	КонецЕсли; 	
	
	Если НЕ ОтражатьВБухгалтерскомУчете Тогда
		
		МассивНепроверяемыхРеквизитов.Добавить("Культуры.СчетУчетаБУ");
		МассивНепроверяемыхРеквизитов.Добавить("Культуры.НовыйСчетУчетаБУ");	
				
	КонецЕсли;
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда	
		Возврат;			
	КонецЕсли;

	Если (НЕ ЗначениеЗаполнено(ДатаОкончанияИнвентаризации)) И (ВидОперации = Перечисления.ИНАГРО_ВидыОперацийПеремещения.Перевзвешивание) Тогда
		ДатаОкончанияИнвентаризации = КонецДня(Дата);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(НовыйУрожай) Тогда
		НовыйУрожай = Урожай;
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(МестоХранения) И МестоХранения.Владелец <> Склад Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Место хранения %2 не принадлежит складу %1!';uk='Місце зберігання %2 не належить складу %1!'"), Склад, МестоХранения);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , , , Отказ);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(НовоеМестоХранения) И НовоеМестоХранения.Владелец <> НовыйСклад Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Место хранения %2 не принадлежит складу %1!';uk='Місце зберігання %2 не належить складу %1!'"), НовыйСклад, НовоеМестоХранения);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , , , Отказ);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	Перем Заголовок, СтруктураШапкиДокумента;
	Перем ТаблицаПоКультурам;
	
	//ИНАГРО_КонтрольПроцессов.КонтрольПоКонтрольномуВесу(Ссылка, Культуры, Отказ);	
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКПроведению(ЭтотОбъект);
		   
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначенияБПВызовСервера.ПредставлениеДокументаПриПроведении(Ссылка);
	
	ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента);	
		
	ПодготовитьПараметрыУчетнойПолитики(СтруктураШапкиДокумента, Отказ, Заголовок);	
	
	ПодготовитьТаблицуПоКультурам(СтруктураШапкиДокумента, ТаблицаПоКультурам, Отказ, Заголовок);
	
	// Движения по документу
	Если Не Отказ Тогда
		ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоКультурам, Отказ, Заголовок);
	КонецЕсли;	
	
	Движения.Хозрасчетный.ВыполнитьДействияПередЗаписьюДвижений();
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКЗаписиДвижений(ЭтотОбъект);	
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКОтменеПроведения(ЭтотОбъект);
	Движения.Записать();
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	Дата = НачалоДня(ОбщегоНазначения.ТекущаяДатаПользователя());
	Ответственный = Пользователи.ТекущийПользователь();	

КонецПроцедуры

#КонецОбласти

#Область Проведение

// Процедура формирует структуру шапки документа и дополнительных полей.
//
Процедура ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента) Экспорт

	// Дерево значений, содержащее имена необходимых полей в запросе по шапке.
	Перем ДеревоПолейЗапросаПоШапке;	
	
	СтруктураШапкиДокумента   = ОбщегоНазначенияРед12.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	
	СтруктураШапкиДокумента.Вставить("Склад",          Склад);
	СтруктураШапкиДокумента.Вставить("КоличествоМест", 0); 
	
	// Заполним по шапке документа дерево параметров, нужных при проведении.
	ДеревоПолейЗапросаПоШапке = ОбщегоНазначенияРед12.СформироватьДеревоПолейЗапросаПоШапке();
	
	ОбщегоНазначенияРед12.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Склад",           "ТипСклада",                                  "ТипСклада");
	ОбщегоНазначенияРед12.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "НовыйСклад",      "ТипСклада",                                  "ТипСклада");
	ОбщегоНазначенияРед12.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "УчетнаяПолитика", "ВестиУчетТоваровОрганизацийВРазрезеСкладов", "ВестиУчетТоваровОрганизацийВРазрезеСкладов");
	ОбщегоНазначенияРед12.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Организации",     "ОтражатьВРегламентированномУчете",           "ОтражатьВРегламентированномУчете");
	
	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа.
	СтруктураШапкиДокумента   = УправлениеЗапасами.СформироватьЗапросПоДеревуПолей(ЭтотОбъект, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, "");
		
КонецПроцедуры

// Процедура определяет параметры учетной политики
//
Процедура ПодготовитьПараметрыУчетнойПолитики(СтруктураШапкиДокумента, Отказ, Заголовок)
	
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда		
		СтруктураШапкиДокумента.Вставить("ЕстьНДС", УчетнаяПолитика.ПлательщикНДС(СтруктураШапкиДокумента.Организация, СтруктураШапкиДокумента.Дата));	
	КонецЕсли;	
	
КонецПроцедуры

// Составляет таблицу по культурам и шапке документа
//
Процедура ПодготовитьТаблицуПоКультурам(СтруктураШапкиДокумента, ТаблицаПоКультурам, Отказ, Заголовок) Экспорт
	
	СтруктураПолей 			= Новый Структура;
	СтруктураПростыхПолей 	= Новый Структура;
	
	СтруктураПолей.Вставить("Организация",                   "Ссылка.Организация");
	СтруктураПолей.Вставить("Номенклатура",                  "Номенклатура");
	СтруктураПолей.Вставить("ЕдиницаИзмерения",              "ЕдиницаИзмерения");	
	СтруктураПолей.Вставить("Услуга",                        "Номенклатура.Услуга");
	СтруктураПолей.Вставить("Количество",                    "ФизическийВес");
	СтруктураПолей.Вставить("ФизическийВес",                 "ФизическийВес");
	СтруктураПолей.Вставить("Цена",                          "Цена");
	СтруктураПолей.Вставить("СчетУчетаБУ",                   "СчетУчетаБУ");
	СтруктураПолей.Вставить("НовыйСчетУчетаБУ",              "НовыйСчетУчетаБУ");
	СтруктураПолей.Вставить("ДоговорКонтрагента",            "Ссылка.ДоговорКонтрагента");	
	СтруктураПолей.Вставить("Склад",                         "Ссылка.Склад");
	СтруктураПолей.Вставить("НовыйСклад",                    "Ссылка.НовыйСклад");
	СтруктураПолей.Вставить("ДокументОприходования",         "ДокументОприходования");
	СтруктураПолей.Вставить("НалоговоеНазначение",           "НалоговоеНазначение");
	СтруктураПолей.Вставить("ВидНалоговойДеятельности",      "НалоговоеНазначение.ВидНалоговойДеятельности");
	СтруктураПолей.Вставить("НалоговоеНазначениеНовое",      "НалоговоеНазначениеНовое");
	СтруктураПолей.Вставить("ВидНалоговойДеятельностиНовое", "НалоговоеНазначениеНовое.ВидНалоговойДеятельности");
	СтруктураПолей.Вставить("КорСчетСписанияБУ",             "НовыйСчетУчетаБУ");
	СтруктураПолей.Вставить("КорСубконтоСписанияБУ1",        "Номенклатура");
	СтруктураПолей.Вставить("КорСубконтоСписанияБУ2",        "Ссылка.НовыйСклад");
		
	РезультатЗапросаПоКультурам = ОбщегоНазначенияРед12.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Культуры", СтруктураПолей, СтруктураПростыхПолей);
	
	ТаблицаПоКультурам = РезультатЗапросаПоКультурам.Выгрузить();
	
КонецПроцедуры

// По результату запроса по шапке документа формируем движения по регистрам.
//
// Параметры: 
//  РежимПроведения           - режим проведения документа (оперативный или неоперативный),
//  СтруктураШапкиДокумента   - выборка из результата запроса по шапке документа,
//  ТаблицаПоТоварам          - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  ТаблицаПоТаре             - таблица значений, содержащая данные для проведения и проверки ТЧ "Возвратная тара",
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, Отказ, Заголовок);
	
	ПровестиПоРегистрамЭлеватора(РежимПроведения, СтруктураШапкиДокумента, Отказ, Заголовок);
	
	ТаблицаПоТоварам.Колонки.Добавить("Регистратор");	
	ТаблицаПоТоварам.ЗаполнитьЗначения(ЭтотОбъект, "Регистратор");
	
	Если ОтражатьВБухгалтерскомУчете Тогда
		Если НЕ (ВидОперации = Перечисления.ИНАГРО_ВидыОперацийПеремещения.Перевзвешивание) Тогда
			СобственноеПодразделение = ИНАГРО_Элеватор.ОпределитьПринадлежностьКонтрагента(Владелец);
			Если СобственноеПодразделение Тогда
				ЕстьНалоговыйУчетПартий = Ложь;
				УправлениеЗапасамиПартионныйУчет.ДвижениеПартийТоваров(ТаблицаПоТоварам, Истина, , НСтр("ru='Перемещение ТМЦ';uk='Переміщення ТМЦ'", Локализация.КодЯзыкаИнформационнойБазы()));
			КонецЕсли;
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры

Процедура ПровестиПоРегистрамЭлеватора(РежимПроведения, СтруктураШапкиДокумента, Отказ, Заголовок)
	
	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("ЛабораторныйАнализ");
	Таблица.Колонки.Добавить("Вес");	
	
	ВестиУчетПоПереработке                  = ИНАГРО_Элеватор.ПолучитьПараметрУчетаЭлеватора(СтруктураШапкиДокумента.Дата, "ВестиУчетПоПереработке", Ложь);  	
	
	// Условия для движений ИНАГРО_Форма36, ИНАГРО_Форма36Сводная, ИНАГРО_Остатки, ИНАГРО_Остатки_Сводная.
	
	ДелатьДвиженияПоОбщескладскомуУчету 	= Ложь;
	ДелатьДвиженияПоОбщескладскомуУчетуФ36 	= Ложь;
	ДелатьДвиженияПоВладельцам 				= Ложь;
	ДелатьДвиженияПоВладельцамФ36 			= Ложь;
	
	Если Склад <> НовыйСклад Тогда
		
		ДелатьДвиженияПоОбщескладскомуУчету 	= Истина;
		ДелатьДвиженияПоОбщескладскомуУчетуФ36 	= Истина;
		
		ДелатьДвиженияПоВладельцам 				= Истина;
		ДелатьДвиженияПоВладельцамФ36 			= Истина;	
		
	ИначеЕсли МестоХранения <> НовоеМестоХранения Тогда
		
		ДелатьДвиженияПоОбщескладскомуУчету 	= Истина;
		ДелатьДвиженияПоОбщескладскомуУчетуФ36 	= Ложь;
		
		ДелатьДвиженияПоВладельцам 				= Ложь;
		ДелатьДвиженияПоВладельцамФ36 			= Ложь;
		
	КонецЕсли;
	
	Для Каждого СтрокаТабличнойЧасти Из Культуры Цикл
		
		СтруктураШапкиДокумента.Склад    = Склад;
		СтруктураШапкиДокумента.Урожай   = Урожай;
	
		СтруктураШапкиДокумента.Вставить("Номенклатура",       СтрокаТабличнойЧасти.Номенклатура);
		СтруктураШапкиДокумента.Вставить("ЗачетныйВес",        СтрокаТабличнойЧасти.ЗачетныйВес);	
		СтруктураШапкиДокумента.Вставить("НомерАнализа",       СтрокаТабличнойЧасти.НомерАнализа);
		СтруктураШапкиДокумента.Вставить("ЛабораторныйАнализ", СтрокаТабличнойЧасти.ЛабораторныйАнализ);
		СтруктураШапкиДокумента.Вставить("Влажность",          СтрокаТабличнойЧасти.Влажность);	
		СтруктураШапкиДокумента.Вставить("СорнаяПримесь",      СтрокаТабличнойЧасти.СорнаяПримесь);	
		СтруктураШапкиДокумента.Вставить("ЗерноваяПримесь",    СтрокаТабличнойЧасти.ЗерноваяПримесь);
		СтруктураШапкиДокумента.Вставить("Количество",         СтрокаТабличнойЧасти.Количество);		
		СтруктураШапкиДокумента.Вставить("ФизическийВес",      СтрокаТабличнойЧасти.ФизическийВес);
		СтруктураШапкиДокумента.Вставить("ВидФасовки",         СтрокаТабличнойЧасти.Фасовка);
		
		СтруктураШапкиДокумента.Вставить("Откуда",             Склад);
		СтруктураШапкиДокумента.Вставить("Владелец",           Владелец);	
		СтруктураШапкиДокумента.Вставить("ДоговорКонтрагента", ДоговорКонтрагента);	
		
		СтруктураШапкиДокумента.Вставить("Поставщик",          Справочники.Контрагенты.ПустаяСсылка());	
		
		Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.ЛабораторныйАнализ) Тогда
			НоваяСтрока = Таблица.Добавить();
			НоваяСтрока.ЛабораторныйАнализ = СтрокаТабличнойЧасти.ЛабораторныйАнализ;
			НоваяСтрока.Вес                = СтрокаТабличнойЧасти.ФизическийВес;
		КонецЕсли;
		
		Если НЕ Отказ Тогда
			
			Если ВидОперации = Перечисления.ИНАГРО_ВидыОперацийПеремещения.Перевзвешивание Тогда
				
				СтруктураШапкиДокумента.Склад              = Склад;
				СтруктураШапкиДокумента.Урожай             = Урожай;                                                       
				СтруктураШапкиДокумента.МестоХранения      = МестоХранения;                                      
				
				ИНАГРО_Элеватор.ДвиженияПоРегиструФорма36СводнаяРасход(Движения, СтруктураШапкиДокумента);
				ИНАГРО_Элеватор.ДвиженияПоРегиструОстаткиСводнаяРасход(Движения, СтруктураШапкиДокумента);  
				
				СтруктураШапкиДокумента.Склад              = НовыйСклад;
				СтруктураШапкиДокумента.Урожай             = НовыйУрожай;
				СтруктураШапкиДокумента.НовоеМестоХранения = НовоеМестоХранения;                          
				
				ИНАГРО_Элеватор.ДвиженияПоРегиструФорма36СводнаяПриход(Движения, СтруктураШапкиДокумента,,,ДатаОкончанияИнвентаризации);
				ИНАГРО_Элеватор.ДвиженияПоРегиструОстаткиСводнаяПриход(Движения, СтруктураШапкиДокумента);  
				
			Иначе	
				
				Если ВестиУчетПоПереработке Тогда 							
					
					Если ВидОперации = Перечисления.ИНАГРО_ВидыОперацийПеремещения.СкладскойУчет Тогда
						
						ИНАГРО_Элеватор.ДвиженияПоРегиструДвиженияПоПереработке(Движения, СтруктураШапкиДокумента, ВидДвиженияНакопления.Приход);			
						ИНАГРО_Элеватор.ДвиженияПоРегиструДвиженияПоПереработке(Движения, СтруктураШапкиДокумента, ВидДвиженияНакопления.Расход);			
						
					Иначе
						
						СтруктураШапкиДокумента.Склад              = Склад;
						СтруктураШапкиДокумента.Урожай             = Урожай;
						СтруктураШапкиДокумента.МестоХранения      = МестоХранения;                                   
						
						ИНАГРО_Элеватор.ДвиженияПоРегиструДвиженияПоПереработке(Движения, СтруктураШапкиДокумента, ВидДвиженияНакопления.Приход);	
						ИНАГРО_Элеватор.ДвиженияПоРегиструДвиженияПоПереработке(Движения, СтруктураШапкиДокумента, ВидДвиженияНакопления.Расход);						
						
						Если ДелатьДвиженияПоВладельцам Тогда
							ИНАГРО_Элеватор.ДвиженияПоРегиструОстаткиРасход(Движения, СтруктураШапкиДокумента);
						КонецЕсли;
						Если ДелатьДвиженияПоВладельцамФ36 Тогда
							ИНАГРО_Элеватор.ДвиженияПоРегиструФорма36Расход(Движения, СтруктураШапкиДокумента);
						КонецЕсли;
						Если ДелатьДвиженияПоОбщескладскомуУчету Тогда
							ИНАГРО_Элеватор.ДвиженияПоРегиструОстаткиСводнаяРасход(Движения, СтруктураШапкиДокумента);
						КонецЕсли;
						Если ДелатьДвиженияПоОбщескладскомуУчетуФ36 Тогда
							ИНАГРО_Элеватор.ДвиженияПоРегиструФорма36СводнаяРасход(Движения, СтруктураШапкиДокумента);
						КонецЕсли;
						
						СтруктураШапкиДокумента.Склад              = НовыйСклад;
						СтруктураШапкиДокумента.Урожай             = НовыйУрожай;
						СтруктураШапкиДокумента.МестоХранения      = НовоеМестоХранения; 
						
						Если ДелатьДвиженияПоВладельцам Тогда
							ИНАГРО_Элеватор.ДвиженияПоРегиструОстаткиПриход(Движения, СтруктураШапкиДокумента);
						КонецЕсли;
						Если ДелатьДвиженияПоВладельцамФ36 Тогда
							ИНАГРО_Элеватор.ДвиженияПоРегиструФорма36Приход(Движения, СтруктураШапкиДокумента);
						КонецЕсли;
						Если ДелатьДвиженияПоОбщескладскомуУчету Тогда
							ИНАГРО_Элеватор.ДвиженияПоРегиструОстаткиСводнаяПриход(Движения, СтруктураШапкиДокумента);
						КонецЕсли;
						Если ДелатьДвиженияПоОбщескладскомуУчетуФ36 Тогда
							ИНАГРО_Элеватор.ДвиженияПоРегиструФорма36СводнаяПриход(Движения, СтруктураШапкиДокумента);
						КонецЕсли;
						
					КонецЕсли;
					
				Иначе
					
					Если ВидОперации <> Перечисления.ИНАГРО_ВидыОперацийПеремещения.СкладскойУчет Тогда
						
						СтруктураШапкиДокумента.Склад              = Склад;
						СтруктураШапкиДокумента.Урожай             = Урожай;
						СтруктураШапкиДокумента.МестоХранения      = МестоХранения;
						
						Если ДелатьДвиженияПоВладельцам Тогда
							ИНАГРО_Элеватор.ДвиженияПоРегиструОстаткиРасход(Движения, СтруктураШапкиДокумента);
						КонецЕсли;
						Если ДелатьДвиженияПоВладельцамФ36 Тогда
							ИНАГРО_Элеватор.ДвиженияПоРегиструФорма36Расход(Движения, СтруктураШапкиДокумента);
						КонецЕсли;
						Если ДелатьДвиженияПоОбщескладскомуУчету Тогда
							ИНАГРО_Элеватор.ДвиженияПоРегиструОстаткиСводнаяРасход(Движения, СтруктураШапкиДокумента);
						КонецЕсли;
						Если ДелатьДвиженияПоОбщескладскомуУчетуФ36 Тогда
							ИНАГРО_Элеватор.ДвиженияПоРегиструФорма36СводнаяРасход(Движения, СтруктураШапкиДокумента);
						КонецЕсли;
						
						СтруктураШапкиДокумента.Склад              = НовыйСклад;
						СтруктураШапкиДокумента.Урожай             = НовыйУрожай;
						СтруктураШапкиДокумента.МестоХранения      = НовоеМестоХранения; 
						
						Если ЗначениеЗаполнено(НовыйДоговорКонтрагента) Тогда
							СтруктураШапкиДокумента.ДоговорКонтрагента = НовыйДоговорКонтрагента;
						КонецЕсли;
						Если ДелатьДвиженияПоВладельцам Тогда
							ИНАГРО_Элеватор.ДвиженияПоРегиструОстаткиПриход(Движения, СтруктураШапкиДокумента);
						КонецЕсли;
						Если ДелатьДвиженияПоВладельцамФ36 Тогда
							ИНАГРО_Элеватор.ДвиженияПоРегиструФорма36Приход(Движения, СтруктураШапкиДокумента);
						КонецЕсли;
						Если ДелатьДвиженияПоОбщескладскомуУчету Тогда
							ИНАГРО_Элеватор.ДвиженияПоРегиструОстаткиСводнаяПриход(Движения, СтруктураШапкиДокумента);
						КонецЕсли;
						Если ДелатьДвиженияПоОбщескладскомуУчетуФ36 Тогда
							ИНАГРО_Элеватор.ДвиженияПоРегиструФорма36СводнаяПриход(Движения, СтруктураШапкиДокумента);
						КонецЕсли;
						
						СтруктураШапкиДокумента.Склад              = Склад;
						СтруктураШапкиДокумента.Урожай             = Урожай;
						СтруктураШапкиДокумента.МестоХранения      = МестоХранения;
						СтруктураШапкиДокумента.ДоговорКонтрагента = ДоговорКонтрагента;
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если НЕ Отказ Тогда
		
		Если ВидОперации <> Перечисления.ИНАГРО_ВидыОперацийПеремещения.Перевзвешивание Тогда			
			
			Если НЕ Таблица.Количество() = 0 Тогда
				Таблица.Свернуть("ЛабораторныйАнализ","Вес");
			КонецЕсли;
			
			Для Каждого СтрокаТаблицы Из Таблица Цикл
				
				СтруктураШапкиДокумента.ФизическийВес = СтрокаТаблицы.Вес;
				СтруктураШапкиДокумента.Вставить("ЛабораторныйАнализ", СтрокаТаблицы.ЛабораторныйАнализ);
				
				ИНАГРО_Элеватор.ДвиженияПоРегиструЖурналЛабораторныхАнализов(Движения, СтруктураШапкиДокумента);	
				ИНАГРО_Элеватор.ДвиженияПоРегиструФорма49(Движения, СтруктураШапкиДокумента);
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции	

Процедура ЗаполнитьПоДокументуОснованию(Основание) Экспорт

	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ИНАГРО_ПриходИзПроизводства") Тогда
		
		Дата						= Основание.Ссылка.Дата;
		Организация 				= Основание.Организация;
		Владелец 					= Основание.Владелец;
		ДоговорКонтрагента 			= Основание.ДоговорКонтрагента;
		Склад 						= Основание.Склад;
		ВидХранения 				= Основание.ВидХранения;
		НовыйВидХранения 			= Основание.ВидХранения;
		Урожай 						= Основание.Урожай;
		НовыйУрожай 				= Основание.Урожай;
		ОтражатьВБухгалтерскомУчете = Основание.ОтражатьВБухгалтерскомУчете;
		
		Для Каждого ТекСтрокаПродукция Из Основание.Продукция Цикл
			
			НоваяСтрока = Культуры.Добавить();
			
			НоваяСтрока.Номенклатура             = ТекСтрокаПродукция.Номенклатура;
			НоваяСтрока.ЕдиницаИзмерения         = ТекСтрокаПродукция.ЕдиницаИзмерения;
			НоваяСтрока.ФизическийВес            = ТекСтрокаПродукция.ФизическийВес;
			НоваяСтрока.ЛабораторныйАнализ       = ТекСтрокаПродукция.ЛабораторныйАнализ;
			НоваяСтрока.НомерАнализа             = ТекСтрокаПродукция.НомерАнализа;
			НоваяСтрока.Влажность                = ТекСтрокаПродукция.Влажность;
			НоваяСтрока.ЗерноваяПримесь          = ТекСтрокаПродукция.ЗерноваяПримесь;
			НоваяСтрока.СорнаяПримесь            = ТекСтрокаПродукция.СорнаяПримесь;
			НоваяСтрока.НалоговоеНазначение      = ТекСтрокаПродукция.НалоговоеНазначение;
			НоваяСтрока.НалоговоеНазначениеНовое = ТекСтрокаПродукция.НалоговоеНазначение;
			НоваяСтрока.СчетУчетаБУ              = ТекСтрокаПродукция.СчетУчетаБУ;
			НоваяСтрока.НовыйСчетУчетаБУ         = ТекСтрокаПродукция.СчетУчетаБУ;
			
		КонецЦикла;
		
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ИНАГРО_АктФасовки") Тогда
		
		Организация 				= Основание.Организация;
		Владелец 					= Основание.Владелец;
		ДоговорКонтрагента 			= Основание.ДоговорКонтрагента;
		Склад 						= Основание.Склад;		
		ВидХранения					= Основание.ВидХранения;
		НовыйВидХранения 			= Основание.НовыйВидХранения;
		Урожай						= Основание.Урожай;
		НовыйУрожай 				= Основание.Урожай;
		ОтражатьВБухгалтерскомУчете = Основание.ОтражатьВБухгалтерскомУчете;
	
		Для Каждого ТекСтрокаПродукция Из Основание.Продукция Цикл
			
			НоваяСтрока = Культуры.Добавить();			
			НоваяСтрока.Номенклатура             = ТекСтрокаПродукция.Номенклатура;
			НоваяСтрока.ЕдиницаИзмерения         = ТекСтрокаПродукция.ЕдиницаИзмерения;
			НоваяСтрока.ФизическийВес            = ТекСтрокаПродукция.ФизическийВес;
			НоваяСтрока.Количество               = ТекСтрокаПродукция.Количество;
			НоваяСтрока.Фасовка                  = ТекСтрокаПродукция.Фасовка;
			НоваяСтрока.ЛабораторныйАнализ       = ТекСтрокаПродукция.ЛабораторныйАнализ;
			НоваяСтрока.НомерАнализа             = ТекСтрокаПродукция.НомерАнализа;
			НоваяСтрока.Влажность                = ТекСтрокаПродукция.Влажность;
			НоваяСтрока.ЗерноваяПримесь          = ТекСтрокаПродукция.ЗерноваяПримесь;
			НоваяСтрока.СорнаяПримесь            = ТекСтрокаПродукция.СорнаяПримесь;
			НоваяСтрока.СчетУчетаБУ              = ТекСтрокаПродукция.СчетУчетаБУ;
			НоваяСтрока.НовыйСчетУчетаБУ         = ТекСтрокаПродукция.СчетУчетаБУ;
			
		КонецЦикла;
		
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ИНАГРО_Переработка") Тогда
		
		Организация                 = Основание.Организация;
		Владелец                    = Основание.Владелец;
		ДоговорКонтрагента          = Основание.ДоговорКонтрагента;
		Склад                       = Основание.Склад;
		ВидХранения                 = Основание.ВидХранения;
		НовыйВидХранения            = Основание.ВидХранения;
		Урожай                      = Основание.Урожай;
		НовыйУрожай                 = Основание.Урожай;
		ОтражатьВБухгалтерскомУчете = Основание.ОтражатьВБухгалтерскомУчете;
	
		Для Каждого ТекСтрокаПродукция Из Основание.Продукция Цикл
			
			НоваяСтрока = Культуры.Добавить();			
			НоваяСтрока.Номенклатура             = ТекСтрокаПродукция.Номенклатура;
			НоваяСтрока.ЕдиницаИзмерения         = ТекСтрокаПродукция.ЕдиницаИзмерения;
			НоваяСтрока.ЗачетныйВес              = ТекСтрокаПродукция.ЗачетныйВес;
			НоваяСтрока.ФизическийВес            = ТекСтрокаПродукция.ФизическийВес;
			НоваяСтрока.Фасовка                  = ТекСтрокаПродукция.Фасовка;
			НоваяСтрока.ЛабораторныйАнализ       = ТекСтрокаПродукция.ЛабораторныйАнализ;
			НоваяСтрока.НомерАнализа             = ТекСтрокаПродукция.НомерАнализа;
			НоваяСтрока.Влажность                = ТекСтрокаПродукция.Влажность;
			НоваяСтрока.ЗерноваяПримесь          = ТекСтрокаПродукция.ЗерноваяПримесь;
			НоваяСтрока.СорнаяПримесь            = ТекСтрокаПродукция.СорнаяПримесь;
			НоваяСтрока.НалоговоеНазначение      = ТекСтрокаПродукция.НалоговоеНазначение;
			НоваяСтрока.НалоговоеНазначениеНовое = ТекСтрокаПродукция.НалоговоеНазначение;
			НоваяСтрока.СчетУчетаБУ              = ТекСтрокаПродукция.СчетУчетаБУ;
			НоваяСтрока.НовыйСчетУчетаБУ         = ТекСтрокаПродукция.СчетУчетаБУ;
			
		КонецЦикла;
		
	КонецЕсли;	
	
КонецПроцедуры	

#КонецОбласти
	
#КонецЕсли