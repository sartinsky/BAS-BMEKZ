#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда  
	
#Область ОбработчикиСобытий

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	ТипДанныхЗаполнения = ТипЗнч(ДанныеЗаполнения);	
	
	ИНАГРО_ЭлеваторЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект); 

	ЗаполнениеДокументов.Заполнить(ЭтотОбъект, ДанныеЗаполнения); 	
			
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;		
	КонецЕсли;
	
	ЕстьЛабораторныйАнализ = Ложь;
	Для Каждого СтрокаТабличнойЧасти Из СписокТТН Цикл
		Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.ЛабораторныйАнализ) Тогда
			ЕстьЛабораторныйАнализ = Истина;
			Прервать;
		КонецЕсли;			
	КонецЦикла;
	
	Если НЕ Отказ Тогда
		
		ПараметрыДляРасчетаЗачетногоВеса = ПолучитьПараметрыДляРасчетаЗачетногоВеса();		
		
		Для Каждого СтрокаТабличнойЧасти Из СписокТТН Цикл
		
			ЗаполнитьЗначенияСвойств(ПараметрыДляРасчетаЗачетногоВеса, СтрокаТабличнойЧасти);

			СтрокаТабличнойЧасти.ЗачетныйВес = ИНАГРО_Элеватор.ЗачетныйВесПриПроведении(ПараметрыДляРасчетаЗачетногоВеса);
			
		КонецЦикла;
		
		ФизическийВес = СписокТТН.Итог("ФизическийВес");
		
	КонецЕсли;
	
	Если (НЕ ЗначениеЗаполнено(ДатаОкончанияИнвентаризации)) И (Перевес) Тогда
		ДатаОкончанияИнвентаризации = КонецДня(Дата);
	КонецЕсли;
			
КонецПроцедуры 

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	Перем Заголовок, СтруктураШапкиДокумента;
	Перем ТаблицаПоКультурам;
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКПроведению(ЭтотОбъект);
		   
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначенияБПВызовСервера.ПредставлениеДокументаПриПроведении(Ссылка);

	Если РежимПроведения = РежимПроведенияДокумента.Неоперативный Тогда		
		Если НЕ ПроверитьЗаполнение() Тогда
			Отказ = Истина;
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(МестоХранения) И МестоХранения.Владелец <> Склад Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Место хранения %2 не принадлежит складу %1!';uk='Місце зберігання %2 не належить складу %1!'"), Склад, МестоХранения);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , , , Отказ);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(НовоеМестоХранения) И НовоеМестоХранения.Владелец <> НовыйСклад Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Место хранения %2 не принадлежит складу %1!';uk='Місце зберігання %2 не належить складу %1!'"), НовыйСклад, НовоеМестоХранения);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , , , Отказ);
	КонецЕсли;	

	ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента);
	
	ПодготовитьТаблицуПоКультурам(СтруктураШапкиДокумента, ТаблицаПоКультурам, Отказ, Заголовок);
		
	// Движения по документу		
	Если НЕ Отказ Тогда 		
		ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоКультурам, Отказ, Заголовок);
	КонецЕсли; 	
	
	Движения.Хозрасчетный.ВыполнитьДействияПередЗаписьюДвижений();

	ПроведениеСервер.ПодготовитьНаборыЗаписейКЗаписиДвижений(ЭтотОбъект); 	

КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКОтменеПроведения(ЭтотОбъект);
	Движения.Записать();
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)

	Дата = НачалоДня(ОбщегоНазначения.ТекущаяДатаПользователя());
	Ответственный = Пользователи.ТекущийПользователь();
		
КонецПроцедуры

#КонецОбласти

#Область Проведение

// Процедура формирует структуру шапки документа и дополнительных полей.
//
Процедура ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента) Экспорт

	// Дерево значений, содержащее имена необходимых полей в запросе по шапке.
	Перем ДеревоПолейЗапросаПоШапке;	
	
	СтруктураШапкиДокумента   = ОбщегоНазначенияРед12.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	
	// Заполним по шапке документа дерево параметров, нужных при проведении.
	ДеревоПолейЗапросаПоШапке = ОбщегоНазначенияРед12.СформироватьДеревоПолейЗапросаПоШапке(); 	
	//ОбщегоНазначенияРед12.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "Организация", "ДоговорОрганизация");

	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа.
	СтруктураШапкиДокумента = УправлениеЗапасами.СформироватьЗапросПоДеревуПолей(ЭтотОбъект, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, ""); 
	
КонецПроцедуры

Процедура ПодготовитьТаблицуПоКультурам(СтруктураШапкиДокумента,ТаблицаПоКультурам,Отказ,Заголовок);
	
	СтруктураПолей = Новый Структура;
	СтруктураПростыхПолей = Новый Структура;
	СтруктураСложныхПолей = Новый Структура;
	
	СтруктураПолей.Вставить("Ссылка",                      "Ссылка");
	СтруктураПолей.Вставить("Дата",                        "Ссылка.Дата");
	СтруктураПолей.Вставить("Организация",                 "Ссылка.Организация");
	СтруктураПолей.Вставить("ОтражатьВБухгалтерскомУчете", "Ссылка.ОтражатьВБухгалтерскомУчете");	
	СтруктураПолей.Вставить("Владелец",                    "Владелец");	
	СтруктураПолей.Вставить("ДоговорКонтрагента",          "ДоговорКонтрагента");
	СтруктураПолей.Вставить("ВидХранения",                 "Ссылка.ВидХранения");	
	СтруктураПолей.Вставить("Склад",                       "Ссылка.Склад");
	СтруктураПолей.Вставить("МестоХранения",               "Ссылка.МестоХранения");
	СтруктураПолей.Вставить("НовыйСклад",                  "Ссылка.НовыйСклад");    
	СтруктураПолей.Вставить("НовоеМестоХранения",          "Ссылка.НовоеМестоХранения");
	СтруктураПолей.Вставить("Номенклатура",                "Ссылка.Номенклатура");
	СтруктураПолей.Вставить("НоваяНоменклатура",           "Ссылка.НоваяНоменклатура");	
	СтруктураПолей.Вставить("Урожай",                      "Ссылка.Урожай");
	СтруктураПолей.Вставить("НовыйУрожай",                 "Ссылка.НовыйУрожай");	
	СтруктураПолей.Вставить("ЛабораторныйАнализ",          "ЛабораторныйАнализ"); 
	СтруктураПолей.Вставить("НомерАнализа",                "НомерАнализа"); 
	СтруктураПолей.Вставить("Влажность",                   "Влажность");          
	СтруктураПолей.Вставить("СорнаяПримесь",               "СорнаяПримесь");          
	СтруктураПолей.Вставить("ЗерноваяПримесь",             "ЗерноваяПримесь");          	
	СтруктураПолей.Вставить("ВесОбразцов",                 "ЛабораторныйАнализ.ВесОбразцов");	
	СтруктураПолей.Вставить("ФизическийВес",               "ФизическийВес");   
	СтруктураПолей.Вставить("Количество",                  "ФизическийВес");
	СтруктураПолей.Вставить("ЗачетныйВес",                 "ЗачетныйВес");	
	СтруктураПолей.Вставить("Откуда",                      "Ссылка.Склад");			                                             
			
	КолонкиГруппировокУПП = "";
	
	РезультатЗапросаПоКультурам = ОбщегоНазначенияРед12.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "СписокТТН", СтруктураПолей, СтруктураПростыхПолей, СтруктураСложныхПолей);
	
	ТаблицаПоКультурам = РезультатЗапросаПоКультурам.Выгрузить();	
	ТаблицаПоКультурам.Колонки.Добавить("ВидФасовки");
	ТаблицаПоКультурам.Колонки.Добавить("Поставщик");
	ТаблицаПоКультурам.Колонки.Добавить("ВидДокумента");	
	ТаблицаПоКультурам.ЗаполнитьЗначения(Справочники.ИНАГРО_ВидыФасовки.ПустаяСсылка(),"ВидФасовки");
	ТаблицаПоКультурам.ЗаполнитьЗначения(Справочники.Контрагенты.ПустаяСсылка(),"Поставщик");
	ТаблицаПоКультурам.ЗаполнитьЗначения(СтруктураШапкиДокумента.ВидДокумента,"ВидДокумента");
	
	ТаблицаПоКультурам.Свернуть(КолонкиГруппировокУПП + "Ссылка, ВидДокумента, Дата, ОтражатьВБухгалтерскомУчете, Организация, Урожай, Склад, ВидХранения, Номенклатура, ВидФасовки, Владелец, ДоговорКонтрагента, Поставщик, Откуда, НоваяНоменклатура, НовыйСклад, НовыйУрожай, ЛабораторныйАнализ, Влажность, СорнаяПримесь, ЗерноваяПримесь, НомерАнализа, МестоХранения, НовоеМестоХранения", "ВесОбразцов, ЗачетныйВес, ФизическийВес, Количество");
	
КонецПроцедуры

// движения по регистрам приход и расход
Процедура ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоКультурам, Отказ, Заголовок)
	
	КопияТаблицыПоКультурам = ТаблицаПоКультурам.Скопировать();
	
	ПровестиПоРегистрамЭлеватора(РежимПроведения, СтруктураШапкиДокумента, КопияТаблицыПоКультурам, Отказ, Заголовок);
	
КонецПроцедуры

// Движения по регистрам Элеватора
//
Процедура ПровестиПоРегистрамЭлеватора(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоКультурам, Отказ, Заголовок)
	
	ТаблицаПоКультурам.Колонки.Добавить("мИспользоватьХарактеристики");
	ТаблицаПоКультурам.Колонки.Добавить("КоличествоМест"); 
	ТаблицаПоКультурам.ЗаполнитьЗначения(Ложь, "мИспользоватьХарактеристики");
	ТаблицаПоКультурам.ЗаполнитьЗначения(0,    "Количество");
	ТаблицаПоКультурам.ЗаполнитьЗначения(0,    "КоличествоМест");
	
	НомерСтроки = 0;
	
	ДелатьДвиженияПоОбщескладскомуУчету    = Ложь;
	ДелатьДвиженияПоОбщескладскомуУчетуФ36 = Ложь;
	ДелатьДвиженияПоВладельцам 			   = Ложь;
	ДелатьДвиженияПоВладельцамФ36 		   = Ложь;
	
	Если Склад <> НовыйСклад Тогда
		ДелатьДвиженияПоОбщескладскомуУчету    = Истина;
		ДелатьДвиженияПоОбщескладскомуУчетуФ36 = Истина;		
		ДелатьДвиженияПоВладельцам 			   = Истина;
		ДелатьДвиженияПоВладельцамФ36 		   = Истина;		
	ИначеЕсли МестоХранения <> НовоеМестоХранения Тогда
		ДелатьДвиженияПоОбщескладскомуУчету    = Истина;
		ДелатьДвиженияПоОбщескладскомуУчетуФ36 = Ложь;		
		ДелатьДвиженияПоВладельцам 			   = Ложь;
		ДелатьДвиженияПоВладельцамФ36 		   = Ложь;
	КонецЕсли;
	
	Для Каждого СтрокаТаблицы Из ТаблицаПоКультурам Цикл		
		
		ПроводитьККУ = ИНАГРО_Элеватор.ПроверкаЗаполненияКачества(Дата, СтрокаТаблицы.ЛабораторныйАнализ,СтрокаТаблицы.Влажность,СтрокаТаблицы.Номенклатура);	
		
		СтруктураШапкиДокумента.Вставить("НомерАнализа", СтрокаТаблицы.НомерАнализа);

		НомерСтроки = НомерСтроки + 1;
		
		Если СтруктураШапкиДокумента.Перевес Тогда
			
			Если ПроводитьККУ Тогда 
				ИНАГРО_Элеватор.ДвиженияПоРегиструФорма36СводнаяРасход(Движения, СтрокаТаблицы);
				ИНАГРО_Элеватор.ДвиженияПоРегиструФорма36СводнаяПриход(Движения, СтрокаТаблицы, , , ДатаОкончанияИнвентаризации);
			КонецЕсли;
			
		Иначе				
			
			// Расход
			
			Если ДелатьДвиженияПоВладельцам Тогда
				ИНАГРО_Элеватор.ДвиженияПоРегиструОстаткиРасход(Движения, СтрокаТаблицы);
			КонецЕсли;
			
			Если ДелатьДвиженияПоОбщескладскомуУчету Тогда
				ИНАГРО_Элеватор.ДвиженияПоРегиструОстаткиСводнаяРасход(Движения, СтрокаТаблицы);
			КонецЕсли;
			
			Если ПроводитьККУ Тогда
				Если ДелатьДвиженияПоВладельцамФ36 Тогда
					ИНАГРО_Элеватор.ДвиженияПоРегиструФорма36Расход(Движения, СтрокаТаблицы);
				КонецЕсли;
				Если СтруктураШапкиДокумента.Склад<>СтруктураШапкиДокумента.НовыйСклад Или СтруктураШапкиДокумента.Номенклатура<>СтруктураШапкиДокумента.НоваяНоменклатура или СтруктураШапкиДокумента.Урожай<>СтруктураШапкиДокумента.НовыйУрожай Тогда
					ИНАГРО_Элеватор.ДвиженияПоРегиструФорма36СводнаяРасход(Движения, СтрокаТаблицы);
				КонецЕсли;			
			КонецЕсли;
			
			СтрокаТаблицы.Склад        = СтрокаТаблицы.НовыйСклад;
			СтрокаТаблицы.Номенклатура = СтрокаТаблицы.НоваяНоменклатура;
			СтрокаТаблицы.Урожай       = СтрокаТаблицы.НовыйУрожай;
			
			// Приход
			
			Если ДелатьДвиженияПоВладельцам Тогда
				ИНАГРО_Элеватор.ДвиженияПоРегиструОстаткиПриход(Движения, СтрокаТаблицы);
			КонецЕсли;
			
			Если ДелатьДвиженияПоОбщескладскомуУчету Тогда
				ИНАГРО_Элеватор.ДвиженияПоРегиструОстаткиСводнаяПриход(Движения, СтрокаТаблицы);
			КонецЕсли;
			
			Если ПроводитьККУ Тогда
				Если ДелатьДвиженияПоВладельцамФ36 Тогда
					ИНАГРО_Элеватор.ДвиженияПоРегиструФорма36Приход(Движения, СтрокаТаблицы);
				КонецЕсли;
				Если    СтруктураШапкиДокумента.Склад        <> СтруктураШапкиДокумента.НовыйСклад
					ИЛИ СтруктураШапкиДокумента.Номенклатура <> СтруктураШапкиДокумента.НоваяНоменклатура
					ИЛИ СтруктураШапкиДокумента.Урожай       <> СтруктураШапкиДокумента.НовыйУрожай Тогда
					ИНАГРО_Элеватор.ДвиженияПоРегиструФорма36СводнаяПриход(Движения, СтрокаТаблицы);
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
		Если НЕ ПроводитьККУ Тогда			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Документ: %1 Не заполнены показатели качества, движения по форме 36 не выполнены!';uk='Документ: %1 Не заповнені показники якості, рухи за формою 36 не виконані!'"), Ссылка);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		//ИНАГРО_Элеватор.ДвиженияПоРегиструФорма49(Движения, СтрокаТаблицы);
	КонецЦикла;
	
	// движения по регистру ИНАГРО_ЖурналЛабораторныхАнализов		
	ТаблицаПоКультурам.Свернуть("ЛабораторныйАнализ, Ссылка", "ФизическийВес");		
	Если ТаблицаПоКультурам.Количество() > 0 Тогда
		Для Каждого СтрокаТаблицы Из ТаблицаПоКультурам Цикл
			ИНАГРО_Элеватор.ДвиженияПоРегиструЖурналЛабораторныхАнализов(Движения, СтрокаТаблицы);	
		КонецЦикла;
	КонецЕсли;		
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПолучитьПараметрыДляРасчетаЗачетногоВеса()
	
	ПараметрыДляРасчетаЗачетногоВеса = Новый Структура(
		"Ссылка, Дата, Организация,
		|Владелец, ДоговорКонтрагента, Номенклатура,
		|Склад, Влажность, СорнаяПримесь,
		|ФизическийВес, ЗачетныйВес     
		|");
	ЗаполнитьЗначенияСвойств(ПараметрыДляРасчетаЗачетногоВеса, ЭтотОбъект);
	
	Возврат ПараметрыДляРасчетаЗачетногоВеса;
	
КонецФункции

#КонецОбласти

#КонецЕсли