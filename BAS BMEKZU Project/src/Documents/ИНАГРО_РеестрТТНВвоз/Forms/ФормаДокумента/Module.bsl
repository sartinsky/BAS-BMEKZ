#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды 
		
	Если Параметры.Ключ.Пустая() Тогда
		ПодготовитьФормуНаСервере();		
	КонецЕсли;
	
	// Уведомим о появлении функционала рабочей даты
	ЭтаФорма.НастройкиПредупреждений = ОбщегоНазначенияБП.НастройкиПредупрежденийОбИзменениях("РабочаяДатаИзДокумента");
	 
	// Показываем, если это новый документ и сама рабочая дата еще не установлена.
	ЭтаФорма.НастройкиПредупреждений.РабочаяДатаИзДокумента = ЭтаФорма.НастройкиПредупреждений.РабочаяДатаИзДокумента
	 	И ЭтаФорма.Параметры.Ключ.Пустая()
	  	И НЕ ЗначениеЗаполнено(БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("РабочаяДата"));
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если  ТипЗнч(Параметр) = Тип("Структура") 
		И Параметр.Свойство("ИдентификаторВызывающейФормы")
		И Параметр.ИдентификаторВызывающейФормы = УникальныйИдентификатор Тогда
		Если ИмяСобытия = "СозданЛабораторныйАнализ" ИЛИ ИмяСобытия = "ИзмененЛабораторныйАнализ" Тогда			
			Если ИНАГРО_Элеватор.ЛабораторныйАнализПроверкаЗаполнения(Параметр.ДокументСсылка, ПолучитьПараметрыДляПроверкиЗаполнения()) Тогда
				Объект.ЛабораторныйАнализ = Параметр.ДокументСсылка;
				ЛабораторныйАнализПриИзмененииНаСервере();
				Модифицированность = Истина;
			КонецЕсли;
		КонецЕсли;
	Иначе
		ОбщегоНазначенияБПКлиент.ОбработкаОповещенияФормыДокумента(ЭтаФорма, Объект.Ссылка, ИмяСобытия, Параметр, Источник);
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	ПодготовитьФормуНаСервере();

КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ЗаполнитьДобавленныеКолонкиТаблицыСписокТТН();
	
	УстановитьСостояниеДокумента();
	
КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)

	Если НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДатаДокумента) Тогда
		// Изменение времени не влияет на поведение документа.
		ТекущаяДатаДокумента = Объект.Дата;
		Возврат;
	КонецЕсли;
	
	// Общие проверки условий по датам.
	ТребуетсяВызовСервера = ИНАГРО_ЭлеваторКлиент.ТребуетсяВызовСервераПриИзмененииДатыДокумента(Объект.Дата, ТекущаяДатаДокумента);
		
	// Если определили, что изменение даты может повлиять на какие-либо параметры, 
	// то передаем обработку на сервер.
	Если ТребуетсяВызовСервера Тогда
		ДатаПриИзмененииНаСервере();
	КонецЕсли;
	
	// Запомним новую дату документа.
	ТекущаяДатаДокумента = Объект.Дата;

КонецПроцедуры

&НаСервере
Процедура ДатаПриИзмененииНаСервере()

	УстановитьФункциональныеОпцииФормы();
	
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)

	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		ОрганизацияПриИзмененииНаСервере();
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()
		
	ИзменитьСчетаУчета();
	
	УстановитьФункциональныеОпцииФормы();	
	
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ОтражатьВБухгалтерскомУчетеПриИзменении(Элемент)
		
	Если Объект.ОтражатьВБухгалтерскомУчете Тогда		
		ТекстВопроса = НСтр("ru='Установить счета бухгалтерского учета в соответствии со значениями по умолчанию?';uk='Встановити рахунки бухгалтерського обліку відповідно до значень за замовчуванням?'");
	Иначе
		ТекстВопроса = НСтр("ru='Очистить счета бухгалтерского учета?';uk='Очистити рахунки бухгалтерського обліку?'");
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ОтражатьВБухгалтерскомУчетеПриИзмененииЗавершение", ЭтотОбъект, Параметры);
	ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);	
			
	УстановитьПринадлежностьКВидамУчета();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтражатьВБухгалтерскомУчетеПриИзмененииЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		УправлениеФормой(ЭтаФорма);
		Возврат;
	КонецЕсли; 	
	
	ИзменитьСчетаУчета();
	
КонецПроцедуры

#Область ОбработчикиСобытийЭлементовПанелиОсновные

&НаКлиенте
Процедура ВладелецПриИзменении(Элемент)	
	
	Если ЗначениеЗаполнено(Объект.Владелец) Тогда		
				
		ПараметрыОтбораДоговора = ПолучитьПараметрыДляДоговоров();
		
		ИНАГРО_ЭлеваторЗаполнениеДокументов.ПриИзмененииЗначенияКонтрагента(Объект.Дата, Объект.Организация, Объект.Владелец, Объект.ДоговорКонтрагента, ПараметрыОтбораДоговора);
				
		ВладелецПриИзмененииНаСервере();
		
		УстановитьПринадлежностьКВидамУчета();
		
	КонецЕсли; 	
		
КонецПроцедуры

&НаСервере
Процедура ВладелецПриИзмененииНаСервере()
	
	УстановитьФункциональныеОпцииФормы();
	
	Объект.ОтражатьПоЗатратам = СобственноеПодразделение;

	УправлениеФормой(ЭтаФорма);	
	
КонецПроцедуры

&НаКлиенте
Процедура ПоставщикПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.Поставщик) Тогда
		
		Объект.Владелец = Объект.Поставщик;
		
		ВладелецПриИзменении(Неопределено)
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СкладПриИзменении(Элемент)

	Если ЗначениеЗаполнено(Объект.Склад) Тогда
		УстановитьПринадлежностьКВидамУчета();
		СкладПриИзмененииНаСервере();
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура СкладПриИзмененииНаСервере()
	
	ИзменитьСчетаУчета();
	
	МестоХранения = Справочники.ИНАГРО_МестаХранения.ПустаяСсылка();

	УстановитьФункциональныеОпцииФормы(); 	
	
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ВидХраненияПриИзменении(Элемент)
	
	ПараметрыОтбораДоговора = ПолучитьПараметрыДляДоговоров();
		
	ИНАГРО_ЭлеваторЗаполнениеДокументов.ПриИзмененииЗначенияКонтрагента(Объект.Дата, Объект.Организация, Объект.Владелец, Объект.ДоговорКонтрагента, ПараметрыОтбораДоговора);
		
КонецПроцедуры

&НаКлиенте
Процедура УрожайПриИзменении(Элемент)
	
	ПараметрыОтбораДоговора = ПолучитьПараметрыДляДоговоров();
		
	ИНАГРО_ЭлеваторЗаполнениеДокументов.ПриИзмененииЗначенияКонтрагента(Объект.Дата, Объект.Организация, Объект.Владелец, Объект.ДоговорКонтрагента, ПараметрыОтбораДоговора);	
	
КонецПроцедуры

&НаКлиенте
Процедура НоменклатураПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.Номенклатура) Тогда				
		НоменклатураПриИзмененииНаСервере();
		//УстановитьЗначенияБазисов();
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура НоменклатураПриИзмененииНаСервере()
	
	ПараметрыДляРасчетаЗачетногоВеса = ПолучитьПараметрыДляРасчетаЗачетногоВеса();
	
	Объект.ЗачетныйВес = ИНАГРО_Элеватор.ЗачетныйВесПриПроведении(ПараметрыДляРасчетаЗачетногоВеса);		
	Объект.СчетУчетаБУ = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаУчетаНоменклатуры(Объект.Организация, Объект.Номенклатура, Объект.Склад).СчетУчетаДавСырья;
		
	Если ОтключитьАвтоматическоеНачислениеУслуг Тогда 
		РассчитатьБезУслуг();		
	Иначе
		РассчитатьСУслугами();		
	КонецЕсли;	
	
	//УстановитьЗначенияБазисов();
		
КонецПроцедуры

&НаКлиенте
Процедура ЛабораторныйАнализПриИзменении(Элемент)
	
	ЛабораторныйАнализПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ЛабораторныйАнализПриИзмененииНаСервере()
	
	Объект.НомерАнализа    = ИНАГРО_Элеватор.ПолучитьНомерЛабАнализаИзЛабАнализа(Объект.ЛабораторныйАнализ);	
	Объект.НомерПробы      = Объект.ЛабораторныйАнализ.НомерАнализа;
	
	Объект.Влажность       = Объект.ЛабораторныйАнализ.Влажность;
	Объект.СорнаяПримесь   = Объект.ЛабораторныйАнализ.СорнаяПримесь;
	Объект.ЗерноваяПримесь = Объект.ЛабораторныйАнализ.ЗерноваяПримесь;
	
	Объект.Сушка           = Объект.ЛабораторныйАнализ.Сушка;
	Объект.Очистка         = Объект.ЛабораторныйАнализ.Очистка;
	Объект.Вентилирование  = Объект.ЛабораторныйАнализ.Вентилирование;
	Объект.ВесОбразцов     = Объект.ЛабораторныйАнализ.ВесОбразцов; 		

	ПараметрыДляРасчетаЗачетногоВеса = ПолучитьПараметрыДляРасчетаЗачетногоВеса();
	
	Объект.ЗачетныйВес     = ИНАГРО_Элеватор.РассчитатьЗачетныйВес(ПараметрыДляРасчетаЗачетногоВеса);
	
	Объект.Масличность     = ИНАГРО_Элеватор.ПолучитьМасличностьИзЛабАнализа(Объект.ЛабораторныйАнализ);
	
	Если ОтключитьАвтоматическоеНачислениеУслуг Тогда 
		РассчитатьБезУслуг();		
	Иначе
		РассчитатьСУслугами();		
	КонецЕсли; 		
	
	УстановитьДоступностьПоказателейКачества(ЭтаФорма);	
	
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ЛабораторныйАнализНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыОтбора = Новый Структура;
	
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		ПараметрыОтбора.Вставить("Организация",        Объект.Организация);		
	КонецЕсли;	
	Если ЗначениеЗаполнено(Объект.Владелец) Тогда
		ПараметрыОтбора.Вставить("Владелец",           Объект.Владелец);
	КонецЕсли;	
	Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		ПараметрыОтбора.Вставить("ДоговорКонтрагента", Объект.ДоговорКонтрагента);		
	КонецЕсли;	
	Если ЗначениеЗаполнено(Объект.Склад) Тогда
		ПараметрыОтбора.Вставить("Склад",              Объект.Склад);
	КонецЕсли;	
	Если ЗначениеЗаполнено(Объект.ВидХранения) Тогда
		ПараметрыОтбора.Вставить("ВидХранения",        Объект.ВидХранения);
	КонецЕсли;	
	Если ЗначениеЗаполнено(Объект.Номенклатура) Тогда
		ПараметрыОтбора.Вставить("Номенклатура",       Объект.Номенклатура);
	КонецЕсли;	
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Отбор",  ПараметрыОтбора);
	ПараметрыФормы.Вставить("Ссылка", Объект.Ссылка);
	
	ОткрытьФорму("Документ.ИНАГРО_ЛабораторныйАнализ.Форма.ФормаВыбора", ПараметрыФормы, Элемент, УникальныйИдентификатор, , , , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры

&НаКлиенте
Процедура ВесОбразцовПриИзменении(Элемент)
	
	ВывестиОбщийФизическийВес();
	
КонецПроцедуры

&НаКлиенте
Процедура ФизическийВесПриИзменении(Элемент)
	
	ПараметрыДляРасчетаЗачетногоВеса = ПолучитьПараметрыДляРасчетаЗачетногоВеса();
	
	Объект.ЗачетныйВес = ИНАГРО_Элеватор.ЗачетныйВесПриПроведении(ПараметрыДляРасчетаЗачетногоВеса);
																  
	ВывестиОбщийФизическийВес();

КонецПроцедуры

&НаКлиенте
Процедура ВлажностьПриИзменении(Элемент)
	
	ПараметрыДляРасчетаЗачетногоВеса = ПолучитьПараметрыДляРасчетаЗачетногоВеса();
	
	Объект.ЗачетныйВес = ИНАГРО_Элеватор.ЗачетныйВесПриПроведении(ПараметрыДляРасчетаЗачетногоВеса);

	Если ОтключитьАвтоматическоеНачислениеУслуг Тогда 
		РассчитатьБезУслуг();		
	Иначе
		РассчитатьСУслугами();		
	КонецЕсли; 		

КонецПроцедуры

&НаКлиенте
Процедура СтепеньЗагрязненияПриИзменении(Элемент)
	
	ПараметрыДляРасчетаЗачетногоВеса = ПолучитьПараметрыДляРасчетаЗачетногоВеса();
	
	Объект.ЗачетныйВес = ИНАГРО_Элеватор.ЗачетныйВесПриПроведении(ПараметрыДляРасчетаЗачетногоВеса);

	Если ОтключитьАвтоматическоеНачислениеУслуг Тогда 
		РассчитатьБезУслуг();		
	Иначе
		РассчитатьСУслугами();		
	КонецЕсли; 		
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовПанелиРасчеты

&НаКлиенте
Процедура БазисыДляРасчетаУслугБратьИзДокументаПриИзменении(Элемент)
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры 

&НаКлиенте
Процедура СушкаПриИзменении(Элемент)
	
	Если НЕ Объект.Сушка Тогда
		Объект.Вентилирование = Ложь;
	КонецЕсли;
	
	ОбнулитьКоличество();

	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ОчисткаПриИзменении(Элемент)
	
	ОбнулитьКоличество();

	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура КоличествоСушкиПриИзменении(Элемент)
	
	Объект.СуммаСушки = Объект.КоличествоСушки * Объект.ЦенаСушки;
	
	РассчитатьОбщуюСуммуУслуг();
	
КонецПроцедуры

&НаКлиенте
Процедура ЦенаСушкиПриИзменении(Элемент)
	
	Объект.СуммаСушки = Объект.КоличествоСушки * Объект.ЦенаСушки;
	
	РассчитатьОбщуюСуммуУслуг();

КонецПроцедуры

&НаКлиенте
Процедура КоличествоОчисткиПриИзменении(Элемент)
	
	Объект.СуммаОчистки = Объект.КоличествоОчистки * Объект.ЦенаОчистки;
	
	РассчитатьОбщуюСуммуУслуг();

КонецПроцедуры

&НаКлиенте
Процедура ЦенаОчисткиПриИзменении(Элемент)
	
	Объект.СуммаОчистки = Объект.КоличествоОчистки * Объект.ЦенаОчистки;
	
	РассчитатьОбщуюСуммуУслуг();

КонецПроцедуры

&НаКлиенте
Процедура КоличествоПриемкиПриИзменении(Элемент)
	
	Объект.СуммаПриемки = Объект.КоличествоПриемки * Объект.ЦенаПриемки;
	
	РассчитатьОбщуюСуммуУслуг();
	
КонецПроцедуры

&НаКлиенте
Процедура ЦенаПриемкиПриИзменении(Элемент)
	
	Объект.СуммаПриемки = Объект.КоличествоПриемки * Объект.ЦенаПриемки;
	
	РассчитатьОбщуюСуммуУслуг();

КонецПроцедуры

&НаКлиенте
Процедура КоличествоДоставкиПриИзменении(Элемент)
	
	Объект.СуммаДоставки = Объект.КоличествоДоставки * Объект.ЦенаДоставки;
	
	РассчитатьОбщуюСуммуУслуг();

КонецПроцедуры

&НаКлиенте
Процедура ЦенаДоставкиПриИзменении(Элемент)
	
	Объект.СуммаДоставки = Объект.КоличествоДоставки * Объект.ЦенаДоставки;
	
	РассчитатьОбщуюСуммуУслуг();

КонецПроцедуры

&НаКлиенте
Процедура КилометражПриИзменении(Элемент)
	
	Объект.КоличествоДоставки = Объект.ФизическийВес / 1000 * Объект.Километраж;
	
	ВидКультурыДляРасчетаСтоимостиУслуги = ПолучитьВидКультурыДляРасчетаСтоимостиУслуги(Объект.Номенклатура);
	
	Если Объект.ЦенаДоставки = 0 И Объект.КоличествоДоставки <> 0 Тогда
		Объект.ЦенаДоставки = ИНАГРО_Элеватор.ПолучитьЦенуУслугиЭлеватора(Объект.Организация, Объект.Дата, Объект.Владелец,
																		  Объект.ДоговорКонтрагента, ВидКультурыДляРасчетаСтоимостиУслуги,
																		  Объект.Урожай, ИНАГРО_Элеватор.ПолучитьПредопределеннуюНоменклатуру("Доставка"));
	КонецЕсли;
																	  
	Объект.СуммаДоставки = Объект.КоличествоДоставки * Объект.ЦенаДоставки;

КонецПроцедуры

&НаКлиенте
Процедура ВентилированиеПриИзменении(Элемент)
	
	Если Объект.Вентилирование И НЕ Объект.Сушка Тогда 
		Объект.Сушка = Истина;
		ОбнулитьКоличество();
		УправлениеФормой(ЭтаФорма);
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ОписаниеДвиженияФормы36НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(
		Элемент.ТекстРедактирования,
		ЭтотОбъект,
		"Объект.ОписаниеДвиженияФормы36",
		НСтр("ru='Описание движения формы 36';uk='Опис руху форми 36'"));

КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(
		Элемент.ТекстРедактирования,
		ЭтотОбъект,
		"Объект.Комментарий");

КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписокТТН

&НаКлиенте
Процедура СписокТТНТТНПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.СписокТТН.ТекущиеДанные;
	
	ДанныеСтрокиТаблицы = Новый Структура("НомерТТН, Вес, ТТН, Влажность, ИндексКартинки");
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, ТекущиеДанные); 

	СписокТТНТТНПриИзмененииНаСервере(ДанныеСтрокиТаблицы);
	
	ЗаполнитьДобавленныеКолонкиСтрокиТаблицыСписокТТН(ДанныеСтрокиТаблицы);
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтрокиТаблицы);	
		
	Объект.ФизическийВес = Объект.СписокТТН.Итог("Вес");
	ФизическийВесПриИзменении(Объект.ФизическийВес);	
	
	Сумма = 0;
	Для Каждого СтрокаТабличнойЧасти Из Объект.СписокТТН Цикл
		Сумма = Сумма + СтрокаТабличнойЧасти.Влажность;
	КонецЦикла;
	
	Объект.ВлажностьТТН = Сумма / Объект.СписокТТН.Количество();

КонецПроцедуры

&НаСервереБезКонтекста
Процедура СписокТТНТТНПриИзмененииНаСервере(СтрокаТабличнойЧасти)
	
	СтрокаТабличнойЧасти.НомерТТН  = ?(СтрокаТабличнойЧасти.ТТН.НомерНакладной = Неопределено,
									   СтрокаТабличнойЧасти.ТТН.Номер,
									   СтрокаТабличнойЧасти.ТТН.НомерНакладной);
	СтрокаТабличнойЧасти.Вес       =   СтрокаТабличнойЧасти.ТТН.Вес;
	СтрокаТабличнойЧасти.Влажность =   СтрокаТабличнойЧасти.ТТН.Влажность;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокТТНВесПриИзменении(Элемент)
	
	Объект.ФизическийВес = Объект.СписокТТН.Итог("Вес");
	
	ФизическийВесПриИзменении(Объект.ФизическийВес);

КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиСобытийЭлементовТаблицыФормыУслуги

&НаКлиенте
Процедура УслугиНоменклатураПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Услуги.ТекущиеДанные;
	
	ТипДоговора = ПолучитьТипДоговораВидаХранения(Объект.ВидХранения);
	
	Если  ТипДоговора = ПредопределенноеЗначение("Справочник.ВидыВзаиморасчетов.ДоговорЗакупки")
		И СобственноеПодразделение Тогда  
		Владелец_П = Объект.Поставщик;
		Договор_П  = Объект.ДоговорПокупателя;
	Иначе
		Владелец_П = Объект.Владелец;
		Договор_П  = Объект.ДоговорКонтрагента;
	КонецЕсли; 	
	
	ВидКультурыДляРасчетаСтоимостиУслуги = ПолучитьВидКультурыДляРасчетаСтоимостиУслуги(ТекущиеДанные.Номенклатура);
	
	ТекущиеДанные.Цена = ИНАГРО_Элеватор.ПолучитьЦенуУслугиЭлеватора(Объект.Организация, Объект.Дата, Владелец_П,
																	 Договор_П, ВидКультурыДляРасчетаСтоимостиУслуги,
																	 Объект.Урожай, ТекущиеДанные.Номенклатура);
	
	УслугиКоличествоЦенаПриИзменении();
	
	РассчитатьОбщуюСуммуУслуг();

КонецПроцедуры

&НаКлиенте
Процедура УслугиКоличествоПриИзменении(Элемент)
	
	УслугиКоличествоЦенаПриИзменении();
	
	РассчитатьОбщуюСуммуУслуг();
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиЦенаПриИзменении(Элемент)
	
	УслугиКоличествоЦенаПриИзменении();
	
	РассчитатьОбщуюСуммуУслуг();

КонецПроцедуры

&НаКлиенте
Процедура УслугиКоличествоЦенаПриИзменении()
	
	ТекущиеДанные = Элементы.Услуги.ТекущиеДанные;
	
	ТекущиеДанные.Сумма = ТекущиеДанные.Количество * ТекущиеДанные.Цена;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура СоздатьЛабораторныйАнализ(Команда)
			
	ЗначенияЗаполнения = Новый Структура;
	ЗначенияЗаполнения.Вставить("Дата",               Объект.Дата);
	ЗначенияЗаполнения.Вставить("Ссылка",             ПредопределенноеЗначение("Документ.ИНАГРО_ЛабораторныйАнализ.ПустаяСсылка"));
	ЗначенияЗаполнения.Вставить("Организация",        Объект.Организация);
	ЗначенияЗаполнения.Вставить("Владелец",           Объект.Владелец);
	ЗначенияЗаполнения.Вставить("ДоговорКонтрагента", Объект.ДоговорКонтрагента);
	ЗначенияЗаполнения.Вставить("Склад",        	  Объект.Склад);
	ЗначенияЗаполнения.Вставить("ВидХранения",        Объект.ВидХранения);
	ЗначенияЗаполнения.Вставить("Номенклатура",       Объект.Номенклатура);	
	ЗначенияЗаполнения.Вставить("Урожай",             Объект.Урожай);
	ЗначенияЗаполнения.Вставить("Влажность",          Объект.Влажность);
	ЗначенияЗаполнения.Вставить("СорнаяПримесь",      Объект.СорнаяПримесь);
	ЗначенияЗаполнения.Вставить("ЗерноваяПримесь",    Объект.ЗерноваяПримесь);
	
	ЗначенияЗаполнения.Вставить("ВесОбразцов",        Объект.ВесОбразцов);
	ЗначенияЗаполнения.Вставить("МассаПартии",        Объект.ОбщийФизическийВес);
	
	ЗначенияЗаполнения.Вставить("Силос",              Объект.Силос);
	ЗначенияЗаполнения.Вставить("НомерПробы",         Объект.НомерПробы);	
	
	ИНАГРО_ЭлеваторКлиент.СоздатьДокументНаОсновании(ЭтаФорма, ЗначенияЗаполнения);

КонецПроцедуры

&НаКлиенте
Процедура Рассчитать(Команда)
	
	РассчитатьСУслугами();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ПодготовитьФормуНаСервере()

	ТекущаяДатаДокумента = Объект.Дата;	

	УстановитьФункциональныеОпцииФормы();
	
	ЗаполнитьДобавленныеКолонкиТаблицыСписокТТН();	
	
	УстановитьЭлементыПолеТокПоПараметрамУчета();
	
	УправлениеФормой(ЭтаФорма);  	
	
	УстановитьСостояниеДокумента();
	
КонецПроцедуры 

&НаСервере
Процедура УстановитьФункциональныеОпцииФормы()

	ОбщегоНазначенияБПКлиентСервер.УстановитьПараметрыФункциональныхОпцийФормыДокумента(ЭтаФорма);	
	
	ТекущийПользователь                                  = Пользователи.ТекущийПользователь();
		
	ПараметрыУчетаЭлеватора                              = ИНАГРО_Элеватор.ПолучитьПараметрыУчетаЭлеватора(Объект.Дата);
	ВестиСправочникПолей                                 = ПараметрыУчетаЭлеватора.ВестиСправочникПолей;
	ВестиУчетПолейТоковПоУслугам                         = ПараметрыУчетаЭлеватора.ВестиУчетПолейТоковПоУслугам;
	ВыставлятьУслугиОчисткиСушкиПоФактическимПоказателям = ПараметрыУчетаЭлеватора.ВыставлятьУслугиОчисткиСушкиПоФактическимПоказателям;
	ЛабораторияРаботаетВСистеме                          = ПараметрыУчетаЭлеватора.ЛабораторияРаботаетВСистеме;
	ОтключитьАвтоматическоеНачислениеУслуг               = ПараметрыУчетаЭлеватора.ОтключитьАвтоматическоеНачислениеУслуг;
	НеУчитыватьВесОбразцов                               = ПараметрыУчетаЭлеватора.НеУчитыватьВесОбразцов;
	
	СобственноеПодразделение                             = ИНАГРО_Элеватор.ПолучитьДополнительныйРеквизитКонтрагента(Объект.Владелец, "СобственноеПодразделение");
	ВидимостьМестаХранения                               = ИНАГРО_Элеватор.ПолучитьДополнительныйРеквизитСклада(Объект.Склад, "ВестиУчетПоМестамХранения");
	
	ЗапретитьВручнуюИзменятьВесТТН                       = ИНАГРО_ЭлеваторУправлениеПользователями.ЗапретитьВручнуюИзменятьВесТТН(ТекущийПользователь);
	ВидимостьМасличность                                 = ИНАГРО_Элеватор.ПолучитьВидимостьМасличность(Объект.Дата);
	
КонецПроцедуры 

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)

	Элементы = Форма.Элементы;
	Объект   = Форма.Объект;
	
	Элементы.ОтражатьВБухгалтерскомУчете.Доступность      = НЕ Форма.СобственноеПодразделение;
	Элементы.ДоговорПоставщика.Видимость                  = Форма.СобственноеПодразделение;
	Элементы.ДоговорПокупателя.Видимость                  = Форма.СобственноеПодразделение;
	Элементы.МестоХранения.Видимость		              = Форма.ВидимостьМестаХранения;
	Элементы.ПолеТок.Видимость                            = Форма.ВестиУчетПолейТоковПоУслугам;	
	Элементы.ЛабораторныйАнализ.Видимость                 = Форма.ЛабораторияРаботаетВСистеме;	
	Элементы.ВлажностьВРасчет.Доступность 	              = Объект.БазисыДляРасчетаУслугБратьИзДокумента;
	Элементы.СорнаяПримесьВРасчет.Доступность 	          = Объект.БазисыДляРасчетаУслугБратьИзДокумента;
	Элементы.СчетУчетаБУ.Видимость                        = НЕ Форма.СобственноеПодразделение И Объект.ОтражатьВБухгалтерскомУчете;
	
	УстановитьДоступностьПоказателейКачества(Форма);	
		
	Сушка   = Объект.Сушка;
	Очистка = Объект.Очистка;
	
	Элементы.ВыставлятьУслугиОчисткиСушки.Видимость       = Форма.ВыставлятьУслугиОчисткиСушкиПоФактическимПоказателям;
	Элементы.КоличествоСушки.Доступность                  = Сушка;
	Элементы.ДекорацияЕдиницаИзмеренияСушка.Доступность   = Сушка;
	Элементы.ЦенаСушки.Доступность                        = Сушка;
	Элементы.СуммаСушки.Доступность                       = Сушка; 	
	Элементы.КоличествоОчистки.Доступность                = Очистка;
	Элементы.ДекорацияЕдиницаИзмеренияОчистка.Доступность = Очистка;
	Элементы.ЦенаОчистки.Доступность                      = Очистка;
	Элементы.СуммаОчистки.Доступность                     = Очистка;	
	
	Элементы.СписокТТНВес.Доступность                     = НЕ Форма.ЗапретитьВручнуюИзменятьВесТТН;
	
	// Масличность
	Элементы.Масличность.Видимость                        = Форма.ВидимостьМасличность;
				
КонецПроцедуры

&НаСервере
Процедура УстановитьСостояниеДокумента()
	
	СостояниеДокумента = ОбщегоНазначенияБП.СостояниеДокумента(Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппаСтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	Если ТекущаяСтраница = Элементы.ГруппаРасчеты И ЗначениеЗаполнено(Объект.Номенклатура) Тогда				
		УстановитьЗначенияБазисов();
	КонецЕсли;	

КонецПроцедуры

&НаСервере
Процедура УстановитьЭлементыПолеТокПоПараметрамУчета()
	
	Если ВестиСправочникПолей Тогда 		
		
		Если НЕ ЗначениеЗаполнено(Объект.ПолеТок) Тогда			
			Элементы.ПолеТок.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.ИНАГРО_Поля");
			Элементы.ПолеТок.ВыбиратьТип = Ложь;
		КонецЕсли; 			
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьПоказателейКачества(Форма)
	
	Элементы = Форма.Элементы;
	Объект   = Форма.Объект;	
	
	СписокРеквизитов = Новый Структура("Влажность, СорнаяПримесь, ЗерноваяПримесь");	
	ИНАГРО_ЭлеваторКлиентСервер.УстановитьДоступностьРеквизитовПоНастройке(Форма, СписокРеквизитов, Форма.ЛабораторияРаботаетВСистеме, ЗначениеЗаполнено(Объект.ЛабораторныйАнализ));

КонецПроцедуры

&НаКлиенте
Процедура УстановитьПринадлежностьКВидамУчета()	
		
	Если СобственноеПодразделение Тогда
		Объект.ОтражатьВБухгалтерскомУчете = Ложь;
		Объект.СчетУчетаБУ = ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.ПустаяСсылка");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьЗначенияБазисов()
	
	ВидКультуры = ИНАГРО_Элеватор.ПолучитьДополнительныйРеквизитНоменклатуры(Объект.Номенклатура, "ВидКультуры");
	
	ЗначенияБазисов = ИНАГРО_Элеватор.ПолучитьБазисныеЗначения(ВидКультуры, Объект.Дата, Объект.Организация, Объект.Владелец, Объект.ДоговорКонтрагента, Объект.Склад);
	БазисВлажность       = ЗначенияБазисов.Влажность;
	БазисСорнаяПримесь   = ЗначенияБазисов.СорнаяПримесь;
	БазисЗерноваяПримесь = ЗначенияБазисов.ЗерноваяПримесь;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДобавленныеКолонкиТаблицыСписокТТН()
	
	Для Каждого СтрокаТабличнойЧасти Из Объект.СписокТТН Цикл			
		ЗаполнитьДобавленныеКолонкиСтрокиТаблицыСписокТТН(СтрокаТабличнойЧасти);		
	КонецЦикла;		
		
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьДобавленныеКолонкиСтрокиТаблицыСписокТТН(СтрокаТабличнойЧасти)
	
	Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.ТТН) Тогда
		Если СтрокаТабличнойЧасти.ТТН.Проведен Тогда
			СтрокаТабличнойЧасти.ИндексКартинки = 1;
		ИначеЕсли СтрокаТабличнойЧасти.ТТН.ПометкаУдаления Тогда
			СтрокаТабличнойЧасти.ИндексКартинки = 2;
		Иначе
			СтрокаТабличнойЧасти.ИндексКартинки = 0;
		КонецЕсли; 
	КонецЕсли; 			
		
КонецПроцедуры

&НаСервере
Процедура ИзменитьСчетаУчета()
	
	Если Объект.ОтражатьВБухгалтерскомУчете Тогда 		
		Объект.СчетУчетаБУ = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаУчетаНоменклатуры(Объект.Организация,Объект.Номенклатура, Объект.Склад).СчетУчетаДавСырья;			
	Иначе		
		Объект.СчетУчетаБУ = ПланыСчетов.Хозрасчетный.ПустаяСсылка(); 			
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьСУслугами()
	
	Документ = РеквизитФормыВЗначение("Объект", Тип("ДокументОбъект.ИНАГРО_РеестрТТНВвоз"));	
	Документ.РассчитатьСУслугами();	
	ЗначениеВРеквизитФормы(Документ, "Объект");
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьБезУслуг()
	
	Документ = РеквизитФормыВЗначение("Объект", Тип("ДокументОбъект.ИНАГРО_РеестрТТНВвоз"));	
	Документ.РассчитатьБезУслуг();	
	ЗначениеВРеквизитФормы(Документ, "Объект");        
		
КонецПроцедуры

&НаКлиенте
Процедура ВывестиОбщийФизическийВес()
	
	Если НеУчитыватьВесОбразцов Тогда
		Объект.ОбщийФизическийВес = Объект.ФизическийВес;
	Иначе	
		Объект.ОбщийФизическийВес = Объект.ФизическийВес + Объект.ВесОбразцов;
	КонецЕсли;	
		
КонецПроцедуры

&НаКлиенте
Процедура ОбнулитьКоличество()
	
	Если НЕ Объект.Сушка Тогда 		
		Объект.КоличествоСушки   = 0;
		Объект.ЦенаСушки         = 0;
		Объект.СуммаСушки        = 0;		
	ИначеЕсли НЕ Объект.Очистка Тогда		
		Объект.КоличествоОчистки = 0;
		Объект.ЦенаОчистки       = 0;
		Объект.СуммаОчистки      = 0;		
	КонецЕсли;
	
	РассчитатьОбщуюСуммуУслуг();

КонецПроцедуры

&НаКлиенте
Процедура РассчитатьОбщуюСуммуУслуг()
	
	Объект.ОбщаяСуммаУслуг = Объект.Услуги.Итог("Сумма");
	Объект.СуммаНДС        = УчетНДСКлиентСервер.РассчитатьСуммуНДС(Объект.ОбщаяСуммаУслуг, Истина, 20);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьПараметрыДляДоговоров()
	
	ПараметрыОтбора = Новый Структура("ВидХранения, Урожай");
	ЗаполнитьЗначенияСвойств(ПараметрыОтбора, Объект);

	Возврат ПараметрыОтбора;

КонецФункции

&НаКлиенте
Функция ПолучитьПараметрыДляПроверкиЗаполнения()
	
	ПараметрыДляПроверкиЗаполнения = Новый Структура(
		"Склад, ВидХранения, Урожай, 
		|Номенклатура");
	ЗаполнитьЗначенияСвойств(ПараметрыДляПроверкиЗаполнения, Объект);

	Возврат ПараметрыДляПроверкиЗаполнения; 

КонецФункции

&НаСервере
Функция ПолучитьПараметрыДляРасчетаЗачетногоВеса()

	ПараметрыДляРасчетаЗачетногоВеса = Новый Структура(
		"Ссылка, Дата, Организация,
		|Владелец, ДоговорКонтрагента, Номенклатура,
		|Склад, Влажность, СорнаяПримесь,
		|ФизическийВес, ЗачетныйВес, БазисыДляРасчетаУслугБратьИзДокумента     
		|");
	ЗаполнитьЗначенияСвойств(ПараметрыДляРасчетаЗачетногоВеса, Объект);
	ПараметрыДляРасчетаЗачетногоВеса.Вставить("Влажность1",     Объект.Влажность1);
	ПараметрыДляРасчетаЗачетногоВеса.Вставить("СорнаяПримесь1", Объект.СорнаяПримесь1);
	ПараметрыДляРасчетаЗачетногоВеса.Вставить("ФизическийВес",  Объект.ОбщийФизическийВес);	
	
	Возврат ПараметрыДляРасчетаЗачетногоВеса;

КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьВидКультурыДляРасчетаСтоимостиУслуги(Знач Номенклатура)
	
	ВидКультуры = ИНАГРО_Элеватор.ПолучитьДополнительныйРеквизитНоменклатуры(Номенклатура, "ВидКультуры");	

	Возврат ВидКультуры.ВидКультурыДляРасчетаСтоимостиУслуги;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьТипДоговораВидаХранения(Знач ВидХранения)

	Возврат ВидХранения.ТипДоговора;
	
КонецФункции

#КонецОбласти  

#Область СлужебныеПроцедурыИФункцииБСП

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	
	Если ТипЗнч(Команда) = Тип("КомандаФормы") Тогда
		
		ИмяКоманды      = Команда.Имя;
		АдресНастроек   = ЭтотОбъект.ПараметрыПодключаемыхКоманд.АдресТаблицыКоманд;
		ОписаниеКоманды = ПодключаемыеКомандыКлиентПовтИсп.ОписаниеКоманды(ИмяКоманды, АдресНастроек);
		
		Если ОписаниеКоманды.Идентификатор = "ЗХС3ПоКультурам" Тогда		
			
			СписокВыбора = Новый СписокЗначений; 
            СписокВыбора.Добавить("Соя",          НСтр("ru='Соя';          uk='Соя'"));
            СписокВыбора.Добавить("Подсолнечник", НСтр("ru='Подсолнечник'; uk='Соняшник'"));
            СписокВыбора.Добавить("Рапс",         НСтр("ru='Рапс';         uk='Ріпак'"));
            СписокВыбора.Добавить("Кукуруза",     НСтр("ru='Кукуруза';     uk='Кукурудза'"));
            СписокВыбора.Добавить("Ячмень",       НСтр("ru='Ячмень';       uk='Ячмінь'"));
            СписокВыбора.Добавить("Пшеница",      НСтр("ru='Пшеница';      uk='Пшениця'"));
            СписокВыбора.Добавить("Горчица",      НСтр("ru='Горчица';      uk='Гірчиця'"));
            СписокВыбора.Добавить("Просо",        НСтр("ru='Просо';        uk='Просо'"));
            СписокВыбора.Добавить("Кориандр",     НСтр("ru='Кориандр';     uk='Коріандр'"));
            СписокВыбора.Добавить("Тмин",         НСтр("ru='Тмин';         uk='Кмин'"));                                         
            СписокВыбора.Добавить("Общий",        НСтр("ru='Общий';        uk='Загальний'"));
			
			ДополнительныеПараметры = Новый Структура;
			ДополнительныеПараметры.Вставить("Команда", Команда);

			Оповещение = Новый ОписаниеОповещения("ВыборПечатнойФормыЗавершение", ЭтотОбъект, ДополнительныеПараметры);			
            СписокВыбора.ПоказатьВыборЭлемента(Оповещение,НСтр("ru='Выберите тип печатной формы.';uk='Виберіть тип друкованої форми.'"));
			
		Иначе
			ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
		КонецЕсли; 
		
	Иначе
		ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте
Процедура ВыборПечатнойФормыЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
    
	Если РезультатЗакрытия <> Неопределено Тогда
		ВыбранныйЭлемент = РезультатЗакрытия.Значение;
		ЗаписатьВыбраннуюПечатнуюФорму(ВыбранныйЭлемент); 
		ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, ДополнительныеПараметры.Команда, Объект);
	КонецЕсли; 	
    
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаписатьВыбраннуюПечатнуюФорму(ВыбранныйЭлемент)
    
    Документы.ИНАГРО_РеестрТТНВвоз.ЗаписатьВыбраннуюПечатнуюФорму(ВыбранныйЭлемент);
    
КонецПроцедуры

#КонецОбласти