#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда  

Перем ПараметрыУчетаЭлеватора;
Перем СобственноеПодразделение;

Перем мВыставленыУслугиСушки;
Перем мВыставленыУслугиОчистки;
	
#Область ОбработчикиСобытий

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	ТипДанныхЗаполнения = ТипЗнч(ДанныеЗаполнения);	
	
	ИНАГРО_ЭлеваторЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект); 

	ЗаполнениеДокументов.Заполнить(ЭтотОбъект, ДанныеЗаполнения); 	
					
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ОбновитьПараметрыУчетаЭлеватора();
	
	Если ЗначениеЗаполнено(МестоХранения) И МестоХранения.Владелец <> Склад Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Место хранения %2 не принадлежит складу %1!';uk='Місце зберігання %2 не належить складу %1!'"), Склад, МестоХранения);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , , , Отказ);
	КонецЕсли;
	
	Если НЕ Отказ Тогда
		
		Если  НЕ ПараметрыУчетаЭлеватора.ОтключитьАвтоматическоеНачислениеУслуг
			И НЕ НеПереформировыватьАвтоматически Тогда
				
				РассчитатьСУслугами();
							
				ПараметрыДляРасчетаЗачетногоВеса = ПолучитьПараметрыДляРасчетаЗачетногоВеса();				
								
				ЗачетныйВес = ИНАГРО_Элеватор.ЗачетныйВесПриПроведении(ПараметрыДляРасчетаЗачетногоВеса);
				
		КонецЕсли;
			
	КонецЕсли;	
	
	УстановитьНомерДокумента(РежимЗаписи);
	
КонецПроцедуры 

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	Перем Заголовок, СтруктураШапкиДокумента;
	Перем ТаблицаПоТоварам, ТаблицаПоТТН;
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКПроведению(ЭтотОбъект);
		   
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначенияБПВызовСервера.ПредставлениеДокументаПриПроведении(Ссылка);

	ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента);	
	
	Если РежимПроведения = РежимПроведенияДокумента.Неоперативный Тогда		
		Если НЕ ПроверитьЗаполнение() Тогда
			Отказ = Истина;
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоТТН, Отказ, Заголовок);
	
	// Движения по документу	
	Если НЕ Отказ Тогда		
		ПроводкиПоРегистрамЭлеватора(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоТТН, Отказ, Заголовок);
	КонецЕсли;

	Движения.Хозрасчетный.ВыполнитьДействияПередЗаписьюДвижений();

	ПроведениеСервер.ПодготовитьНаборыЗаписейКЗаписиДвижений(ЭтотОбъект); 	

КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКОтменеПроведения(ЭтотОбъект);
	Движения.Записать();
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)

	Дата = НачалоДня(ОбщегоНазначения.ТекущаяДатаПользователя());
	Ответственный = Пользователи.ТекущийПользователь();
	СкладскаяКвитанция = Неопределено;
	
КонецПроцедуры

#КонецОбласти

#Область Проведение

// Процедура формирует структуру шапки документа и дополнительных полей.
//
Процедура ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента) Экспорт

	// Дерево значений, содержащее имена необходимых полей в запросе по шапке.
	Перем ДеревоПолейЗапросаПоШапке;	
	
	СтруктураШапкиДокумента   = ОбщегоНазначенияРед12.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	
	// Заполним по шапке документа дерево параметров, нужных при проведении.
	ДеревоПолейЗапросаПоШапке = ОбщегоНазначенияРед12.СформироватьДеревоПолейЗапросаПоШапке(); 	
	ОбщегоНазначенияРед12.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "Организация", "ДоговорОрганизация");

	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа.
	СтруктураШапкиДокумента = УправлениеЗапасами.СформироватьЗапросПоДеревуПолей(ЭтотОбъект, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, "");

	ДополнитьСтруктуруШапкиНужнымиДанными(СтруктураШапкиДокумента);

КонецПроцедуры

// Составляет таблицу по культурам и шапке документа
//
Процедура ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоТТН, Отказ, Заголовок) Экспорт
	
	СтруктураПолей = Новый Структура;
	СтруктураПростыхПолей = Новый Структура;
	СтруктураСложныхПолей = Новый Структура;	
				
	СтруктураПолей.Вставить("Дата",                        "Дата");                                      
	СтруктураПолей.Вставить("Организация",                 "Организация");
	СтруктураПолей.Вставить("ОтражатьВБухгалтерскомУчете", "ОтражатьВБухгалтерскомУчете");	
	СтруктураПолей.Вставить("Владелец",                    "Владелец");	
	СтруктураПолей.Вставить("ДоговорКонтрагента",          "ДоговорКонтрагента");
	СтруктураПолей.Вставить("Склад",                       "Склад");	
	СтруктураПолей.Вставить("ВидХранения",                 "ВидХранения");	
	Если ИНАГРО_Элеватор.ПолучитьДополнительныйРеквизитСклада(Склад, "ВестиУчетПоМестамХранения") Тогда
		СтруктураПолей.Вставить("МестоХранения", "Ссылка.МестоХранения");	
	КонецЕсли;	
	СтруктураПолей.Вставить("Номенклатура",                "Номенклатура");	
	СтруктураПолей.Вставить("СтавкаНДС",                   "Номенклатура.СтавкаНДС");
	СтруктураПолей.Вставить("Услуга",                      "Номенклатура.Услуга");	
	СтруктураПолей.Вставить("Урожай"  ,                    "Урожай");	
	СтруктураПолей.Вставить("Количество",                  "ОбщийФизическийВес");
	СтруктураПолей.Вставить("ФизическийВес",               "ОбщийФизическийВес");  
	СтруктураПолей.Вставить("ЗачетныйВес",                 "ЗачетныйВес");	
	Если НЕ ОтражатьПоЗатратам Тогда		
		СтруктураПолей.Вставить("СчетУчетаБУ",   "СчетУчетаБУ");
		СтруктураПолей.Вставить("Забалансовый",  "СчетУчетаБУ.Забалансовый");		
	КонецЕсли;
	СтруктураПолей.Вставить("Ссылка",                      "Ссылка");
	СтруктураПолей.Вставить("ВлажностьВходящая",           "Ссылка.Влажность");
	СтруктураПолей.Вставить("СорнаяПримесьВходящая",       "Ссылка.СорнаяПримесь");
	СтруктураПолей.Вставить("ЗерноваяПримесьВходящая",     "Ссылка.ЗерноваяПримесь");
	СтруктураПолей.Вставить("ВлажностьТекущая",            "Ссылка.Влажность");
	СтруктураПолей.Вставить("СорнаяПримесьТекущая",        "Ссылка.СорнаяПримесь");
	СтруктураПолей.Вставить("ЗерноваяПримесьТекущая",      "Ссылка.ЗерноваяПримесь");
	СтруктураПолей.Вставить("Сушить",                      "Ссылка.Сушка");
	СтруктураПолей.Вставить("Чистить",                     "Ссылка.Очистка");
	СтруктураПолей.Вставить("ВесНаСушку",                  "Ссылка.ОбщийФизическийВес");
	СтруктураПолей.Вставить("ВесНаОчистку",                "Ссылка.ОбщийФизическийВес");
	СтруктураПолей.Вставить("ФизическийВесТекущий",        "ОбщийФизическийВес");  
	СтруктураПолей.Вставить("Силос",                       "Ссылка.Силос"); 
	
	СтруктураПростыхПолей.Вставить("Влажность",               0);
	СтруктураПростыхПолей.Вставить("СорнаяПримесь",           0);
	СтруктураПростыхПолей.Вставить("ЗерноваяПримесь",         0);
	СтруктураПростыхПолей.Вставить("ВидДокумента",            СтруктураШапкиДокумента.ВидДокумента);
	СтруктураПростыхПолей.Вставить("Сумма",                   0);			
	СтруктураПростыхПолей.Вставить("Цена",                    0);
	СтруктураПростыхПолей.Вставить("СуммаНДС",                0);	
	СтруктураПростыхПолей.Вставить("СуммаБезНДСРегл",         0);
	СтруктураПростыхПолей.Вставить("СуммаНДСРегл",            0);
	СтруктураПростыхПолей.Вставить("СуммаСНДСРегл",           0);	
	СтруктураПростыхПолей.Вставить("СуммаБезНДСВал",          0);
	СтруктураПростыхПолей.Вставить("СуммаНДСВал",             0);
	СтруктураПростыхПолей.Вставить("СуммаСНДСВал",            0);	
	СтруктураПростыхПолей.Вставить("ПроводкиСуммаБезНДСРегл", 0);
	СтруктураПростыхПолей.Вставить("ПроводкиСуммаНДСРегл",    0);
	СтруктураПростыхПолей.Вставить("ПроводкиСуммаСНДСРегл",   0);	
	СтруктураПростыхПолей.Вставить("ПроводкиСуммаБезНДСВал",  0);
	СтруктураПростыхПолей.Вставить("ПроводкиСуммаНДСВал",     0);
	СтруктураПростыхПолей.Вставить("ПроводкиСуммаСНДСВал",    0);
	
	// !!!!!
	РезультатЗапросаПоТоварам = ИНАГРО_Элеватор.СформироватьТаблицуТоваровПоШапкеДокумента(ЭтотОбъект, СтруктураПолей, СтруктураПростыхПолей, СтруктураСложныхПолей);
	//РезультатЗапросаПоТоварам = ОбщегоНазначенияРед12.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, СтруктураПолей, СтруктураПростыхПолей, СтруктураСложныхПолей);

	ТаблицаПоТоварам = РезультатЗапросаПоТоварам.Выгрузить();
	
	// Формирование ТаблицыТТН
	
	СтруктураПолей = Новый Структура;
	СтруктураПростыхПолей = Новый Структура;
	СтруктураСложныхПолей = Новый Структура;
	
	СтруктураПолей.Вставить("Ссылка",                      "Ссылка");	
	СтруктураПолей.Вставить("Дата",                        "Ссылка.Дата");	
	Если НЕ ОтражатьПоЗатратам Тогда
		СтруктураПолей.Вставить("СчетУчетаБУ",  "Ссылка.СчетУчетаБУ");
		СтруктураПолей.Вставить("Забалансовый", "Ссылка.СчетУчетаБУ.Забалансовый");
	КонецЕсли;
	СтруктураПолей.Вставить("Организация",                 "Ссылка.Организация");
	СтруктураПолей.Вставить("ОтражатьВБухгалтерскомУчете", "Ссылка.ОтражатьВБухгалтерскомУчете");
	СтруктураПолей.Вставить("Контрагент",                  "Ссылка.Владелец");
	СтруктураПолей.Вставить("Владелец",                    "Ссылка.Владелец");
	СтруктураПолей.Вставить("ДоговорКонтрагента",          "Ссылка.ДоговорКонтрагента");
	СтруктураПолей.Вставить("Склад",                       "Ссылка.Склад");
	СтруктураПолей.Вставить("ВидХранения",                 "Ссылка.ВидХранения");
	СтруктураПолей.Вставить("МестоХранения",               "Ссылка.Силос");
	СтруктураПолей.Вставить("Силос",                       "Ссылка.Силос");
	СтруктураПолей.Вставить("Номенклатура",                "Ссылка.Номенклатура");	
	СтруктураПолей.Вставить("Услуга",                      "Ссылка.Номенклатура.Услуга");
	СтруктураПолей.Вставить("СтавкаНДС",                   "Ссылка.Номенклатура.СтавкаНДС");	
	//СтруктураПолей.Вставить("СкладОтправитель",            "Ссылка.Откуда");
	СтруктураПолей.Вставить("Урожай",                      "Ссылка.Урожай");		
	СтруктураПолей.Вставить("ЛабораторныйАнализ",          "Ссылка.ЛабораторныйАнализ");
	СтруктураПолей.Вставить("НомерАнализа",                "Ссылка.НомерАнализа");
	СтруктураПолей.Вставить("Влажность",                   "Ссылка.Влажность");
	СтруктураПолей.Вставить("СорнаяПримесь",               "Ссылка.СорнаяПримесь");
	СтруктураПолей.Вставить("ЗерноваяПримесь",             "Ссылка.ЗерноваяПримесь");
	СтруктураПолей.Вставить("ВлажностьВходящая",           "Ссылка.Влажность");
	СтруктураПолей.Вставить("СорнаяПримесьВходящая",       "Ссылка.СорнаяПримесь");
	СтруктураПолей.Вставить("ЗерноваяПримесьВходящая",     "Ссылка.ЗерноваяПримесь");
	СтруктураПолей.Вставить("ВлажностьТекущая",            "Ссылка.Влажность");
	СтруктураПолей.Вставить("СорнаяПримесьТекущая",        "Ссылка.СорнаяПримесь");
	СтруктураПолей.Вставить("ЗерноваяПримесьТекущая",      "Ссылка.ЗерноваяПримесь");
	СтруктураПолей.Вставить("Сушить",                      "Ссылка.Сушка");
	СтруктураПолей.Вставить("Чистить",                     "Ссылка.Очистка");
	СтруктураПолей.Вставить("ВесНаСушку",                  "Ссылка.ОбщийФизическийВес");
	СтруктураПолей.Вставить("ВесНаОчистку",                "Ссылка.ОбщийФизическийВес");
	СтруктураПолей.Вставить("ФизическийВесТекущий",        "Вес");  
	СтруктураПолей.Вставить("Вес",                         "Вес");
	СтруктураПолей.Вставить("Количество",                  "Вес");
	СтруктураПолей.Вставить("ФизическийВес",               "Вес");	
	СтруктураПолей.Вставить("ПоставщикПолучатель",         "Ссылка.Поставщик");
	СтруктураПолей.Вставить("ДокументОприходования",       "ТТН");
	
	СтруктураПростыхПолей.Вставить("мИспользоватьХарактеристики",                 Истина);
	СтруктураПростыхПолей.Вставить("ВидДокумента",                                СтруктураШапкиДокумента.ВидДокумента);
	СтруктураПростыхПолей.Вставить("КоличествоМест",                              0);
	СтруктураПростыхПолей.Вставить("Сумма",                                       0);
	СтруктураПростыхПолей.Вставить("СтоимостьНУ",                                 0);
	СтруктураПростыхПолей.Вставить("Цена",                                        0);
	СтруктураПростыхПолей.Вставить("СуммаНДС",                                    0);	
	СтруктураПростыхПолей.Вставить("СуммаБезНДСРегл",                             0);
	СтруктураПростыхПолей.Вставить("СуммаНДСРегл",                                0);
	СтруктураПростыхПолей.Вставить("СуммаСНДСРегл",                               0);	
	СтруктураПростыхПолей.Вставить("СуммаБезНДСВал",                              0);
	СтруктураПростыхПолей.Вставить("СуммаНДСВал",                                 0);
	СтруктураПростыхПолей.Вставить("СуммаСНДСВал",                                0);	
	СтруктураПростыхПолей.Вставить("ПроводкиСуммаБезНДСРегл",                     0);
	СтруктураПростыхПолей.Вставить("ПроводкиСуммаНДСРегл",                        0);
	СтруктураПростыхПолей.Вставить("ПроводкиСуммаСНДСРегл",                       0);	
	СтруктураПростыхПолей.Вставить("ПроводкиСуммаБезНДСВал",                      0);
	СтруктураПростыхПолей.Вставить("ПроводкиСуммаНДСВал",                         0);
	СтруктураПростыхПолей.Вставить("ПроводкиСуммаСНДСВал",                        0);
	СтруктураПростыхПолей.Вставить("НалоговоеНазначение",                         Справочники.НалоговыеНазначенияАктивовИЗатрат.ПустаяСсылка());
	СтруктураПростыхПолей.Вставить("ОбособленныйУчетТоваровПоЗаказамПокупателей", Истина);
	Если СобственноеПодразделение И Владелец <> Поставщик Тогда 
		СтруктураПростыхПолей.Вставить("ВидОперацииВвозаВывозаСобственногоЗерна", Перечисления.ИНАГРО_ВидыОперацийВвозаВывозаСобственногоЗерна.ПоступлениеТоваров);
	КонецЕсли; 	
	
	РезультатЗапросаПоТоварам = ОбщегоНазначенияРед12.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "СписокТТН", СтруктураПолей, СтруктураПростыхПолей, СтруктураСложныхПолей);
	
	ТаблицаПоТТН = РезультатЗапросаПоТоварам.Выгрузить();
		
КонецПроцедуры

Процедура ПроводкиПоРегистрамЭлеватора(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоТТН, Отказ, Заголовок)
	
	Если НЕ Отказ Тогда
		
		ПроводитьККУ = ИНАГРО_Элеватор.ПроверкаЗаполненияКачества(Дата, ЛабораторныйАнализ, Влажность, Номенклатура);	
		
		СтруктураШапкиДокумента.Вставить("НомерАнализа", НомерАнализа);
		
		ИНАГРО_Элеватор.ДвиженияПоРегиструОстаткиПриход(Движения, СтруктураШапкиДокумента);
		ИНАГРО_Элеватор.ДвиженияПоРегиструОстаткиСводнаяПриход(Движения, СтруктураШапкиДокумента);
		
		Если ПроводитьККУ Тогда 						
			ИНАГРО_Элеватор.ДвиженияПоРегиструФорма36Приход(Движения, СтруктураШапкиДокумента);
			ИНАГРО_Элеватор.ДвиженияПоРегиструФорма36СводнаяПриход(Движения, СтруктураШапкиДокумента);
		Иначе			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Документ: %1 Не заполнены показатели качества, движения по форме 36 не выполнены!';uk='Документ: %1 Не заповнені показники якості, рухи за формою 36 не виконані!'"), Ссылка);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;		
		
		Если СобственноеПодразделение И Владелец <> Поставщик И ЗначениеЗаполнено(ДоговорПоставщика) Тогда 
			ИНАГРО_Элеватор.ДвиженияПоРегиструКонтрольВвозаСобственногоЗерна(Движения, СтруктураШапкиДокумента, , ВидДвиженияНакопления.Приход);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтруктураШапкиДокумента.ЛабораторныйАнализ) Тогда			
			ИНАГРО_Элеватор.ДвиженияПоРегиструФорма49(Движения, СтруктураШапкиДокумента);
			ИНАГРО_Элеватор.ДвиженияПоРегиструЖурналЛабораторныхАнализов(Движения, СтруктураШапкиДокумента);
		КонецЕсли;
		
	КонецЕсли;	
	
	Если НЕ Отказ И ПараметрыУчетаЭлеватора.ОтражениеВвозаВывозаСобственногоЗернаВРегламентированномУчете Тогда 
		ДвижениеПоРегиструКонтрольОтраженияВвозаВывозаСобственногоЗернаВРегламентированомУчете(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТТН, Отказ, Заголовок);
	КонецЕсли;
	
	Если НЕ Отказ Тогда 		
				
		ТаблицаУслуг = СформироватьТаблицуУслуг();
		
		Если ТаблицаУслуг.Количество() > 0 Тогда			
			ИНАГРО_Элеватор.ДвиженияПоРегиструРасчетыПоУслугам(Движения, ТаблицаУслуг, "Приход");			
		КонецЕсли;
		
	КонецЕсли;  
	
	// Движения по регистру ДанныеПоКачетсвуПартийЗерна
	Если ПараметрыУчетаЭлеватора <> Неопределено Тогда
		
		Если ПараметрыУчетаЭлеватора.ИспользоватьСистемуКонтроляКачестваПартийЗерна Тогда
			
			НаборДвижений         = Движения.ИНАГРО_ДанныеПоКачествуПартийЗерна;
			ТаблицаДвижений       = НаборДвижений.Выгрузить(); 			
			ТаблицаПоТоварамКопия = ТаблицаПоТоварам.Скопировать();
			ТаблицаПоТоварамКопия.Колонки["Владелец"].Имя = "Контрагент"; 			
			ОбщегоНазначенияБПВызовСервера.ЗагрузитьВТаблицуЗначений(ТаблицаПоТоварамКопия, ТаблицаДвижений);		
			ТаблицаДвижений.ЗаполнитьЗначения(Ссылка,                    "Регистратор");
			ТаблицаДвижений.ЗаполнитьЗначения(Ссылка,                    "ПартияЗерна");
			ТаблицаДвижений.ЗаполнитьЗначения(ЛабораторныйАнализ.Ссылка, "ЛабораторныйАнализ");
			
			// Заполним итоговые значения 
			ВидКультуры     = ИНАГРО_Элеватор.ПолучитьДополнительныйРеквизитНоменклатуры(Номенклатура, "ВидКультуры");
			ЗначенияБазисов = ИНАГРО_Элеватор.ПолучитьБазисныеЗначения(ВидКультуры, Ссылка.Дата, Организация, Владелец, ДоговорКонтрагента, Склад);
			
			ТаблицаДвижений.ЗаполнитьЗначения(ЗачетныйВес, "ФизическийВесИтоговый");
			ТаблицаДвижений.ЗаполнитьЗначения(?(БазисыДляРасчетаУслугБратьИзДокумента, Влажность1, ЗначенияБазисов.Влажность), "ВлажностьИтоговая");
			ТаблицаДвижений.ЗаполнитьЗначения(?(БазисыДляРасчетаУслугБратьИзДокумента, СорнаяПримесь1, ЗначенияБазисов.СорнаяПримесь), "СорнаяПримесьИтоговая");
			ТаблицаДвижений.ЗаполнитьЗначения(ЗначенияБазисов.ЗерноваяПримесь, "ЗерноваяПримесьИтоговая");
			ТаблицаДвижений.ЗаполнитьЗначения(?(ВыставлятьУслугиОчисткиСушки, Истина, мВыставленыУслугиСушки), "ВыставленыУслугиСушки");
			ТаблицаДвижений.ЗаполнитьЗначения(?(ВыставлятьУслугиОчисткиСушки, Истина, мВыставленыУслугиОчистки), "ВыставленыУслугиОчистки");
			
			Если ВыставлятьУслугиОчисткиСушки Тогда
				ТаблицаДвижений.ЗаполнитьЗначения(Влажность1,                      "ВлажностьВыставленныхУслуг");
				ТаблицаДвижений.ЗаполнитьЗначения(СорнаяПримесь1,                  "СорнаяПримесьВыставленныхУслуг");
				ТаблицаДвижений.ЗаполнитьЗначения(ЗначенияБазисов.ЗерноваяПримесь, "ЗерноваяПримесьВыставленныхУслуг");
			Иначе	
				ТаблицаДвижений.ЗаполнитьЗначения(?(мВыставленыУслугиСушки,   ?(БазисыДляРасчетаУслугБратьИзДокумента, Влажность1, ЗначенияБазисов.Влажность), 0) , "ВлажностьВыставленныхУслуг");
				ТаблицаДвижений.ЗаполнитьЗначения(?(мВыставленыУслугиОчистки, ?(БазисыДляРасчетаУслугБратьИзДокумента, СорнаяПримесь1, ЗначенияБазисов.СорнаяПримесь), 0), "СорнаяПримесьВыставленныхУслуг");
				ТаблицаДвижений.ЗаполнитьЗначения(?(мВыставленыУслугиОчистки, ЗначенияБазисов.ЗерноваяПримесь, 0), "ЗерноваяПримесьВыставленныхУслуг");
			КонецЕсли;		
			
			НаборДвижений.мПериод          = Дата;
			НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;
			Если НЕ Отказ Тогда
				Движения.ИНАГРО_ДанныеПоКачествуПартийЗерна.ВыполнитьДвижения();
			КонецЕсли;
			
			// для Акта Очистки Сушки
			НаборДвижений         = Движения.ИНАГРО_ДанныеПоКачествуЗерна;
			ТаблицаДвижений       = НаборДвижений.Выгрузить();
			ТаблицаПоТоварамКопия = ТаблицаПоТоварам.Скопировать();
			ТаблицаПоТоварамКопия.Колонки["Владелец"].Имя = "Контрагент";
			ОбщегоНазначенияБПВызовСервера.ЗагрузитьВТаблицуЗначений(ТаблицаПоТоварамКопия, ТаблицаДвижений);
			ТаблицаДвижений.ЗаполнитьЗначения(Ссылка,                    "Регистратор");
			ТаблицаДвижений.ЗаполнитьЗначения(Ссылка,                    "ПартияЗерна");
			ТаблицаДвижений.ЗаполнитьЗначения(ЛабораторныйАнализ.Ссылка, "ЛабораторныйАнализ");
			
			// Заполним итоговые значения 
			ВидКультуры     = ИНАГРО_Элеватор.ПолучитьДополнительныйРеквизитНоменклатуры(Номенклатура,"ВидКультуры");
			ЗначенияБазисов = ИНАГРО_Элеватор.ПолучитьБазисныеЗначения(ВидКультуры, Ссылка.Дата, Организация, Владелец, ДоговорКонтрагента, Склад);
			
			ТаблицаДвижений.ЗаполнитьЗначения(ЗачетныйВес, "ФизическийВесИтоговый");
			ТаблицаДвижений.ЗаполнитьЗначения(?(БазисыДляРасчетаУслугБратьИзДокумента, Влажность1, ЗначенияБазисов.Влажность), "ВлажностьИтоговая");
			ТаблицаДвижений.ЗаполнитьЗначения(?(БазисыДляРасчетаУслугБратьИзДокумента, СорнаяПримесь1, ЗначенияБазисов.СорнаяПримесь), "СорнаяПримесьИтоговая");
			ТаблицаДвижений.ЗаполнитьЗначения(ЗначенияБазисов.ЗерноваяПримесь, "ЗерноваяПримесьИтоговая");
			ТаблицаДвижений.ЗаполнитьЗначения(?(ВыставлятьУслугиОчисткиСушки, Истина, мВыставленыУслугиСушки), "ВыставленыУслугиСушки");
			ТаблицаДвижений.ЗаполнитьЗначения(?(ВыставлятьУслугиОчисткиСушки, Истина, мВыставленыУслугиОчистки), "ВыставленыУслугиОчистки");
			
			Если ВыставлятьУслугиОчисткиСушки Тогда
				ТаблицаДвижений.ЗаполнитьЗначения(Влажность1, "ВлажностьВыставленныхУслуг");
				ТаблицаДвижений.ЗаполнитьЗначения(СорнаяПримесь1, "СорнаяПримесьВыставленныхУслуг");
				ТаблицаДвижений.ЗаполнитьЗначения(ЗначенияБазисов.ЗерноваяПримесь, "ЗерноваяПримесьВыставленныхУслуг");
			Иначе	
				ТаблицаДвижений.ЗаполнитьЗначения(?(мВыставленыУслугиСушки, ?(БазисыДляРасчетаУслугБратьИзДокумента, Влажность1, ЗначенияБазисов.Влажность), 0), "ВлажностьВыставленныхУслуг");
				ТаблицаДвижений.ЗаполнитьЗначения(?(мВыставленыУслугиОчистки, ?(БазисыДляРасчетаУслугБратьИзДокумента, СорнаяПримесь1, ЗначенияБазисов.СорнаяПримесь), 0), "СорнаяПримесьВыставленныхУслуг");
				ТаблицаДвижений.ЗаполнитьЗначения(?(мВыставленыУслугиОчистки, ЗначенияБазисов.ЗерноваяПримесь, 0), "ЗерноваяПримесьВыставленныхУслуг");
			КонецЕсли;		
			
			НаборДвижений.мПериод          = Дата;
			НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;
			
			Если НЕ Отказ Тогда
				Движения.ИНАГРО_ДанныеПоКачествуЗерна.ВыполнитьДвижения();
				Движения.ИНАГРО_ДанныеПоКачествуЗерна.Записать(); //МАСЛО - для возможности дописать масличность в движение в подписке на событие ИНАГРО_ОбработкаПроведения_ЭлеваторМасло
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДвижениеПоРегиструКонтрольОтраженияВвозаВывозаСобственногоЗернаВРегламентированомУчете(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, Отказ, Заголовок)
	
	ВыполнитьДвижения = Ложь;	
		
	Если СобственноеПодразделение И Владелец <> Поставщик Тогда 
		
		ВыполнитьДвижения = Истина
		
	ИначеЕсли СобственноеПодразделение И Владелец = Поставщик И ЗначениеЗаполнено(УдалитьОткуда) Тогда
		
		Если НЕ Склад = УдалитьОткуда Тогда
			
			ВыполнитьДвижения = Истина
			
		КонецЕсли;
		
	КонецЕсли;	
	
	Если ВыполнитьДвижения Тогда
		
		// Приход
		
		НаборДвижений = Движения.ИНАГРО_КонтрольОтраженияВвозаВывозаСобственногоЗернаВРегламентированномУчете;
		
		СтруктТаблицДокумента = Новый Структура;
		СтруктТаблицДокумента.Вставить("ТаблицаПоТоварам", ТаблицаПоТоварам);
		
		ТаблицыДанныхДокумента = ИНАГРО_Общий.ЗагрузитьТаблицыДокументаВСтруктуру(НаборДвижений, СтруктТаблицДокумента);
		
		ИНАГРО_Общий.ЗаписатьТаблицыДокументаВРегистр(НаборДвижений, ВидДвиженияНакопления.Приход, ТаблицыДанныхДокумента, Дата);		
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ОбновитьПараметрыУчетаЭлеватора()

	ПараметрыУчетаЭлеватора  = ИНАГРО_Элеватор.ПолучитьПараметрыУчетаЭлеватора(Дата);
	СобственноеПодразделение = ИНАГРО_Элеватор.ПолучитьДополнительныйРеквизитКонтрагента(Владелец, "СобственноеПодразделение");
		
КонецПроцедуры

Процедура УстановитьНомерДокумента(РежимЗаписи)
	
	МетаданныеТипа           = Метаданные.НайтиПоТипу(ТипЗнч(Ссылка)).Имя;
	СправочникВидыДокументов = Справочники.ИНАГРО_ВидыДокументов.НайтиПоРеквизиту("ИмяПоМетаданным", МетаданныеТипа);
	ДлинаНомера              = 999999;
	НумерацияПоРеквизиту     = Ложь;
	
	Если ЭтоНовый() Тогда
		
		Если СправочникВидыДокументов <> Справочники.ИНАГРО_ВидыДокументов.ПустаяСсылка() Тогда
			
			Если    СправочникВидыДокументов.СпособНумерацииДокументов = Перечисления.ИНАГРО_СпособыНумерацииДокументов.ПоРеквизитуДокумента
				ИЛИ СправочникВидыДокументов.СпособНумерацииДокументов = Перечисления.ИНАГРО_СпособыНумерацииДокументов.ПоРеквизитуДокументаСПрефиксомВидаУрожая Тогда
				
				НомерИзРеквизита             = 0;
				
				ИмяРеквизитаНомераДокумента_ = СправочникВидыДокументов.ИмяРеквизитаНомераДокумента;
				
				//ИмяРеквизитаНомераДокумента_ = """" + СтрЗаменить(СправочникВидыДокументов.ИмяРеквизитаНомераДокумента, ".", """][""") + """";
				
				//Выполнить(СтрЗаменить("НомерИзРеквизита = ЭтотОбъект[ИмяРеквизитаНомераДокумента_]","ИмяРеквизитаНомераДокумента_",ИмяРеквизитаНомераДокумента_));
				
				НомерИзРеквизита = ЭтотОбъект[ИмяРеквизитаНомераДокумента_];

				//Выполнить(СтрЗаменить("НомерИзРеквизита = ЭтотОбъект[ИмяРеквизитаНомераДокумента_]","ИмяРеквизитаНомераДокумента_",ИмяРеквизитаНомераДокумента_));

				Если ТипЗнч(НомерИзРеквизита) = Тип("Число") Тогда
					Если НомерИзРеквизита = 0 Тогда
						НомерИзРеквизита = "";
					Иначе
						НомерИзРеквизита = СокрЛП(Строка(Формат(НомерИзРеквизита,"ЧГ=")));
					КонецЕсли;				
				ИначеЕсли ТипЗнч(НомерИзРеквизита) = Тип("Строка") Тогда
					НомерИзРеквизита = СокрЛП(НомерИзРеквизита);
				КонецЕсли;
				НумерацияПоРеквизиту = Истина;
				ДлинаНомера = СтрДлина(НомерИзРеквизита);
			КонецЕсли;	
	    КонецЕсли;
	
		ДлинПреф = СтрДлина(ПараметрыУчетаЭлеватора.ПрефиксУдаленныхДокументов)+1;
		
		Если (РежимЗаписи = РежимЗаписиДокумента.Запись Или РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения) 
			И ПометкаУдаления Тогда // Или ДлинаНомера = 0 Тогда
			Если СокрЛП(Лев(Номер,ДлинПреф)) <> СокрЛП(ПараметрыУчетаЭлеватора.ПрефиксУдаленныхДокументов+"_") Тогда
				УстановитьНовыйНомер(СокрЛП(ПараметрыУчетаЭлеватора.ПрефиксУдаленныхДокументов+"_"));
			КонецЕсли;
		ИначеЕсли ЗначениеЗаполнено(Номер) И СокрЛП(Лев(Номер,ДлинПреф)) = СокрЛП(ПараметрыУчетаЭлеватора.ПрефиксУдаленныхДокументов+"_") Тогда	
			УстановитьНовыйНомер();
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры	

Процедура ДополнитьСтруктуруШапкиНужнымиДанными(СтруктураШапкиДокумента)
	
	СтруктураШапкиДокумента.Вставить("Количество",     0);
	СтруктураШапкиДокумента.Вставить("КоличествоМест", 0);
	СтруктураШапкиДокумента.ФизическийВес = ОбщийФизическийВес;	
	
КонецПроцедуры

Процедура РассчитатьСУслугами() Экспорт
	
	ОбновитьПараметрыУчетаЭлеватора();
	
	Если ЗначениеЗаполнено(ЛабораторныйАнализ) Тогда 
		Очистка        = ЛабораторныйАнализ.Очистка;
		Сушка	       = ЛабораторныйАнализ.Сушка;
		Вентилирование = ЛабораторныйАнализ.Вентилирование;
	КонецЕсли;
	
	ИНАГРО_Элеватор.РасчетНатуральныхСкидок(ЭтотОбъект);
	
	РассчитатьРеестрТТНВвоз(); 	
	
	Если НЕ НеПереформировыватьУслуги Тогда
		Если ПараметрыУчетаЭлеватора.ВыставлятьУслугиОчисткиСушкиПоФактическимПоказателям Тогда
			Если    ВидХранения.ТипДоговора = Справочники.ВидыВзаиморасчетов.ДоговорЗакупки
				ИЛИ ВидХранения.ТипДоговора = Справочники.ВидыВзаиморасчетов.ДоговорПереработки Тогда
				Если НЕ ВыставлятьУслугиОчисткиСушки Тогда
					ВыставлятьУслугиОчисткиСушки = Истина;
				КонецЕсли;	
			КонецЕсли;	
		КонецЕсли;
		
		ЗаполнитьУслуги();
		
		ОбщаяСуммаУслуг = Услуги.Итог("Сумма");
		СуммаНДС        = УчетНДСКлиентСервер.РассчитатьСуммуНДС(ОбщаяСуммаУслуг, Истина, 20) ;
		
	КонецЕсли;                                             
	
КонецПроцедуры

Процедура РассчитатьБезУслуг() Экспорт
	
	ОбновитьПараметрыУчетаЭлеватора();
	
	ИНАГРО_Элеватор.РасчетНатуральныхСкидок(ЭтотОбъект);
	
	РассчитатьРеестрТТНВвоз();	
		
	КоличествоОчистки  = 0;
	ЦенаОчистки        = 0;
	СуммаОчистки       = 0;	
	КоличествоСушки    = 0;
	ЦенаСушки          = 0;
	СуммаСушки         = 0;	
	КоличествоПриемки  = 0;
	ЦенаПриемки        = 0;
	СуммаПриемки       = 0;	
	КоличествоДоставки = 0;
	ЦенаДоставки       = 0;
	СуммаДоставки      = 0;	
	ОбщаяСуммаУслуг    = 0; 
	СуммаНДС           = 0;
	
	Если ПараметрыУчетаЭлеватора.ВыставлятьУслугиОчисткиСушкиПоФактическимПоказателям Тогда
		Если    ВидХранения.ТипДоговора = Справочники.ВидыВзаиморасчетов.ДоговорЗакупки
			ИЛИ ВидХранения.ТипДоговора = Справочники.ВидыВзаиморасчетов.ДоговорПереработки Тогда			
			Если НЕ ВыставлятьУслугиОчисткиСушки Тогда
				ВыставлятьУслугиОчисткиСушки = Истина;
			КонецЕсли;	
		КонецЕсли;	
	КонецЕсли;	
	
КонецПроцедуры

Процедура РассчитатьРеестрТТНВвоз()
	
	ВидКультуры     = ИНАГРО_Элеватор.ПолучитьДополнительныйРеквизитНоменклатуры(Номенклатура, "ВидКультуры");	
	ЗначенияБазисов = ИНАГРО_Элеватор.ПолучитьБазисныеЗначения(ВидКультуры, Дата, Организация, Владелец, ДоговорКонтрагента, Склад);
	
	НеУчтВесОбр     = ПараметрыУчетаЭлеватора.НеУчитыватьВесОбразцов;
	
	Если НеУчтВесОбр Тогда
		ОбщийФизическийВес = ФизическийВес;
	Иначе	
		ОбщийФизическийВес = ФизическийВес + ВесОбразцов;
	КонецЕсли;	
	
	Если (ЗначенияБазисов.Влажность = 0) ИЛИ (ЗначенияБазисов.СорнаяПримесь = 0) Тогда
		
		ТекстСообщения = НСтр("ru='В регистре сведений Значения базисов не указаны БАЗИСНЫЕ кондиции. Будет неверно расчитан зачетный вес!';uk='У регістрі відомостей Значення базисів не вказані БАЗИСНІ кондиції. Буде невірно розрахована залікова вага!'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	
		НатСкидкаВлажность     = 0;
		НатСкидкаСорнаяПримесь = 0;
		ЗачетныйВес            = 0;
		
	ИначеЕсли (ЗначенияБазисов.ВлажностьДляРасчетаУслуг = 0) ИЛИ (ЗначенияБазисов.СорнаяПримесьДляРасчетаУслуг = 0) Тогда
		
		ТекстСообщения = НСтр("ru='В регистре сведений Значения базисов не указаны кондиции ДЛЯ РАСЧЕТА УСЛУГ. Будет неверно расчитана стоимость услуг!';uk='У регістрі відомостей Значення базисів не вказані кондиції ДЛЯ РОЗРАХУНКУ ПОСЛУГ. Буде невірно розрахована вартість послуг!'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);

		НатСкидкаВлажность     = 0;
		НатСкидкаСорнаяПримесь = 0;
		ЗачетныйВес            = 0;
		
	Иначе
		
		Если БазисыДляРасчетаУслугБратьИзДокумента Тогда			
			// базисы для расчета услуг устанавливает пользователь
		Иначе			
			Влажность1     = ЗначенияБазисов.ВлажностьДляРасчетаУслуг;
			СорнаяПримесь1 = ЗначенияБазисов.СорнаяПримесьДляРасчетаУслуг;				
		КонецЕсли;
		
		ИНАГРО_Элеватор.РасчетНатуральныхСкидок(ЭтотОбъект);
		
		ПараметрыДляРасчетаЗачетногоВеса = ПолучитьПараметрыДляРасчетаЗачетногоВеса();
		
		ЗачетныйВес = ИНАГРО_Элеватор.РассчитатьЗачетныйВес(ПараметрыДляРасчетаЗачетногоВеса);
		
	КонецЕсли;	

	Вес                                     = ОбщийФизическийВес;
	СпособНачисленияОплатыЗаОчисткуСушку 	= ПараметрыУчетаЭлеватора.СпособНачисленияОплатыЗаОчисткуСушку;
	СпособРасчетаВесаНаОчисткуСушкуДляУслуг = ПараметрыУчетаЭлеватора.СпособРасчетаВесаНаОчисткуСушкуДляУслуг;
	
	// Расчет услуги сушки
	
	КоличествоСушки = 0;
	ЦенаСушки 		= 0;
	СуммаСушки      = 0;	
	
	Если Сушка Тогда
		
		// количество сушки
		Если НЕ ЗначениеЗаполнено(СпособНачисленияОплатыЗаОчисткуСушку)  
			ИЛИ СпособНачисленияОплатыЗаОчисткуСушку = Перечисления.ИНАГРО_СпособыНачисленияОплатыЗаОчисткуСушку.БезУчетаТехнологическогоЦикла
			ИЛИ СпособНачисленияОплатыЗаОчисткуСушку = Перечисления.ИНАГРО_СпособыНачисленияОплатыЗаОчисткуСушку.СначалаСушимПотомЧистим Тогда
			
			КоличествоСушки = НатСкидкаВлажность * Вес / 1000;
						
		ИначеЕсли СпособНачисленияОплатыЗаОчисткуСушку = Перечисления.ИНАГРО_СпособыНачисленияОплатыЗаОчисткуСушку.СначалаЧистимПотомСушим Тогда
			
			УбыльОтОчистки = 0;
			
			Если Очистка Тогда
				Если СпособРасчетаВесаНаОчисткуСушкуДляУслуг = Перечисления.ИНАГРО_СпособРасчетаВесаНаОчисткуСушкуДляУслуг.ПоДювалю Тогда
					УбыльОтОчистки = Вес * Макс(ОКР((СорнаяПримесь - СорнаяПримесь1) / (100-СорнаяПримесь1), 4), 0);
				ИначеЕсли СпособРасчетаВесаНаОчисткуСушкуДляУслуг = Перечисления.ИНАГРО_СпособРасчетаВесаНаОчисткуСушкуДляУслуг.ОтклонениеОтБазиса Тогда
					УбыльОтОчистки = Вес * Макс((СорнаяПримесь - СорнаяПримесь1), 0) / 100;
				ИначеЕсли НЕ (ЗначениеЗаполнено(СпособРасчетаВесаНаОчисткуСушкуДляУслуг)) Тогда
					УбыльОтОчистки = 0;
				КонецЕсли;
			КонецЕсли;
			
			КоличествоСушки = НатСкидкаВлажность * ((Вес - УбыльОтОчистки)) / 1000;
			
		КонецЕсли;
		
		// цена сушки
		Если КоличествоСушки <> 0 Тогда
			Если Вентилирование Тогда
				ЦенаСушки = ИНАГРО_Элеватор.ПолучитьЦенуУслугиЭлеватора(Организация, Дата, Владелец, ДоговорКонтрагента, ВидКультуры.ВидКультурыДляРасчетаСтоимостиУслуги, Урожай, ИНАГРО_Элеватор.ПолучитьПредопределеннуюНоменклатуру("Вентилирование"));
			Иначе
				ЦенаСушки = ИНАГРО_Элеватор.ПолучитьЦенуУслугиЭлеватора(Организация, Дата, Владелец, ДоговорКонтрагента, ВидКультуры.ВидКультурыДляРасчетаСтоимостиУслуги, Урожай, ИНАГРО_Элеватор.ПолучитьПредопределеннуюНоменклатуру("Сушка"));
			КонецЕсли;			
		КонецЕсли;
		
		// стоимость сушки
		СуммаСушки 	= ЦенаСушки * КоличествоСушки;
		
	КонецЕсли;
	
	КоличествоСушки = КоличествоСушки;
	ЦенаСушки 		= ЦенаСушки;
	СуммаСушки 	    = СуммаСушки;		
	
	// Расчет услуги очистки
	
	КоличествоОчистки = 0;
	ЦенаОчистки		  = 0;
	СуммаОчистки      = 0;
	
	Если Очистка Тогда
		
		// количество очистки
		Если НЕ ЗначениеЗаполнено(СпособНачисленияОплатыЗаОчисткуСушку)  
			ИЛИ СпособНачисленияОплатыЗаОчисткуСушку = Перечисления.ИНАГРО_СпособыНачисленияОплатыЗаОчисткуСушку.БезУчетаТехнологическогоЦикла
			ИЛИ СпособНачисленияОплатыЗаОчисткуСушку = Перечисления.ИНАГРО_СпособыНачисленияОплатыЗаОчисткуСушку.СначалаЧистимПотомСушим Тогда
			
			КоличествоОчистки = НаТСкидкаСорнаяПримесь * Вес / 1000;
			
		ИначеЕсли СпособНачисленияОплатыЗаОчисткуСушку = Перечисления.ИНАГРО_СпособыНачисленияОплатыЗаОчисткуСушку.СначалаСушимПотомЧистим Тогда
			
			ВесУсушки = 0;
			
			Если Сушка Тогда
				Если СпособРасчетаВесаНаОчисткуСушкуДляУслуг = Перечисления.ИНАГРО_СпособРасчетаВесаНаОчисткуСушкуДляУслуг.ПоДювалю Тогда
					ВесУсушки = Вес * Макс(Окр((Влажность - Влажность1) / (100 - Влажность1), 4), 0); // ПоДювалю
				ИначеЕсли СпособРасчетаВесаНаОчисткуСушкуДляУслуг = Перечисления.ИНАГРО_СпособРасчетаВесаНаОчисткуСушкуДляУслуг.ОтклонениеОтБазиса Тогда
					ВесУсушки = Вес * Макс((Влажность - Влажность1), 0) / 100;
				ИначеЕсли НЕ (ЗначениеЗаполнено(СпособРасчетаВесаНаОчисткуСушкуДляУслуг)) Тогда				
					ВесУсушки = 0;
				КонецЕсли;
			КонецЕсли;
						
			КоличествоОчистки = НаТСкидкаСорнаяПримесь * (Вес - ВесУсушки) / 1000;
						
		КонецЕсли;
		
		// цена очистки
		Если КоличествоОчистки <> 0 Тогда
			ЦенаОчистки = ИНАГРО_Элеватор.ПолучитьЦенуУслугиЭлеватора(Организация, Дата, Владелец, ДоговорКонтрагента, ВидКультуры.ВидКультурыДляРасчетаСтоимостиУслуги, Урожай, ИНАГРО_Элеватор.ПолучитьПредопределеннуюНоменклатуру("Очистка"));
		КонецЕсли;
		
		// стоимость очистки
		СуммаОчистки = ЦенаОчистки * КоличествоОчистки;
		
	КонецЕсли;
	
	КоличествоОчистки = КоличествоОчистки;
	ЦенаОчистки 	  = ЦенаОчистки;
	СуммаОчистки      = СуммаОчистки;	
	Вес               = ОбщийФизическийВес;          
	КоличествоПриемки = Вес / 1000;
	
	//Если (ЦенаПриемки = 0) И (КоличествоПриемки <> 0) Тогда
	Если КоличествоПриемки <> 0 Тогда
		ЦенаПриемки = ИНАГРО_Элеватор.ПолучитьЦенуУслугиЭлеватора(Организация, Дата, Владелец, ДоговорКонтрагента,ВидКультуры.ВидКультурыДляРасчетаСтоимостиУслуги,Урожай, ИНАГРО_Элеватор.ПолучитьПредопределеннуюНоменклатуру("Приемка"));
	КонецЕсли;
	
	СуммаПриемки      = КоличествоПриемки * ЦенаПриемки;
	
	//Если (ЦенаДоставки = 0) И (КоличествоДоставки <> 0) Тогда
	Если КоличествоДоставки <> 0 Тогда
		ЦенаДоставки = ИНАГРО_Элеватор.ПолучитьЦенуУслугиЭлеватора(Организация, Дата, Владелец, ДоговорКонтрагента,ВидКультуры.ВидКультурыДляРасчетаСтоимостиУслуги, Урожай, ИНАГРО_Элеватор.ПолучитьПредопределеннуюНоменклатуру("Доставка"));
	КонецЕсли;
	
	СуммаДоставки     = КоличествоДоставки * ЦенаДоставки;
	ВидДоговора       = Справочники.ВидыВзаиморасчетов.ПустаяСсылка();
	ЗаФиз             = Ложь;
	Расчет_           = Ложь;
	
	Попытка
		ВидДоговора = ВидХранения.ТипДоговора;
		Если ДоговорПоставщика.ИНАГРО_ВидЗакупки = Перечисления.ИНАГРО_ВидыЗакупки.ФизическийВес Тогда
			ЗаФиз   = Истина;
		КонецЕсли;
		Если ДоговорПоставщика.ИНАГРО_ВидЗакупки = Перечисления.ИНАГРО_ВидыЗакупки.Расчетный Тогда
			Расчет_ = Истина;
		КонецЕсли;
	Исключение	
	КонецПопытки;
	
	Если ВидДоговора = Справочники.ВидыВзаиморасчетов.ДоговорЗакупки Тогда
		
		Если ЗаФиз = Истина Тогда
			КоличествоОчистки = 0;
			ЦенаОчистки       = 0;
			СуммаОчистки      = 0;
			КоличествоСушки   = 0;
			ЦенаСушки         = 0;
		КонецЕсли;
		
		Если Расчет_ = Ложь Тогда
			СуммаСушки        = 0;
			ЦенаДоставки      = 0;
			СуммаДоставки     = 0;
		КонецЕсли;
		
		КоличествоПриемки = 0;
		ЦенаПриемки       = 0;
		СуммаПриемки      = 0;
		
	КонецЕсли;
	
	Если ВидДоговора = Справочники.ВидыВзаиморасчетов.ДоговорПереработки Тогда
		
		КоличествоПриемки = 0;
		ЦенаПриемки       = 0;
		СуммаПриемки      = 0;
		ЦенаДоставки      = 0;
		СуммаДоставки     = 0;
		
	КонецЕсли;	
		
	Если СобственноеПодразделение И Владелец = Поставщик И НЕ ПараметрыУчетаЭлеватора.ВестиУчетПолейТоковПоУслугам Тогда 
		
		КоличествоОчистки  = 0;
		ЦенаОчистки        = 0;
		СуммаОчистки       = 0;
		КоличествоСушки    = 0;
		ЦенаСушки          = 0;
		СуммаСушки         = 0;
		КоличествоПриемки  = 0;
		ЦенаПриемки        = 0;
		СуммаПриемки       = 0;
		КоличествоДоставки = 0;
		ЦенаДоставки       = 0;
		СуммаДоставки      = 0;
		
	КонецЕсли;
	
	ОбщаяСуммаУслуг = СуммаОчистки + СуммаСушки + СуммаПриемки+СуммаДоставки;
	СуммаНДС        = УчетНДСКлиентСервер.РассчитатьСуммуНДС(ОбщаяСуммаУслуг, Истина, 20);
	
КонецПроцедуры 

Процедура ЗаполнитьУслуги()
	
	// Перед расчетом очистим таблицу услуг от всех расчитываемых услуг
	СтруктураОбязательныхУслуг = Новый Структура("Сушка, Вентилирование, Очистка, Приемка, Анализ, АнализПБ, АнализОтдельнойУслугой, Доставка");
	
	Если ПараметрыУчетаЭлеватора.ОдинаковаяДатаФормСкладскойИРеестра Тогда
		СтруктураОбязательныхУслуг.Вставить("СкладскаяКвитанция");
	КонецЕсли;
	
	Для Каждого ОбязательнаяУслуга Из СтруктураОбязательныхУслуг Цикл
		
		ПредопределеннаяУслуга = ИНАГРО_Элеватор.ПолучитьПредопределеннуюНоменклатуру(ОбязательнаяУслуга.Ключ);
		
		Если НЕ ЗначениеЗаполнено(ПредопределеннаяУслуга) Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураОбязательныхУслуг[ОбязательнаяУслуга.Ключ] = ПредопределеннаяУслуга;
		
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("Номенклатура", ПредопределеннаяУслуга);
		
		НайденныеСтроки = Услуги.НайтиСтроки(ПараметрыОтбора);
		
		Для Каждого СтрокаУслуг из НайденныеСтроки Цикл
			Услуги.Удалить(СтрокаУслуг);
		КонецЦикла;
		
	КонецЦикла;	
	
	ВидДоговора = Справочники.ВидыВзаиморасчетов.ПустаяСсылка();
	Попытка
		ВидДоговора = ВидХранения.ТипДоговора;
	Исключение	
	КонецПопытки;
	
	ТаблицаУслуг = Новый ТаблицаЗначений;
	ТаблицаУслуг.Колонки.Добавить("Номенклатура");
	ТаблицаУслуг.Колонки.Добавить("Количество");
	ТаблицаУслуг.Колонки.Добавить("Сумма");	

	Если СобственноеПодразделение И ВидХранения.ТипДоговора = Справочники.ВидыВзаиморасчетов.ДоговорЗакупки Тогда  
		Владелец_П = Поставщик;
		Договор_П  = ДоговорПокупателя;
	Иначе
		Владелец_П = Владелец;
		Договор_П  = ДоговорКонтрагента;
	КонецЕсли;	
	
	// Если заданы параметры учета подсистемы Элеватора, тогда проверяем значение настройки "Выставлять услуги очистки/сушки по фактическим показателям"
	// Если значение "Ложь" или Если параметры учета не заданы - документ РеестрТТНВвоз делает движения по оказанию услуг очистка/сушка.
	Если (СобственноеПодразделение И Владелец <> Поставщик)
		ИЛИ НЕ СобственноеПодразделение
		ИЛИ ПараметрыУчетаЭлеватора.ВестиУчетПолейТоковПоУслугам Тогда
		
		ВидКультурыДляРасчетаСтоимостиУслуги = ИНАГРО_Элеватор.ПолучитьДополнительныйРеквизитНоменклатуры(Номенклатура, "ВидКультуры").ВидКультурыДляРасчетаСтоимостиУслуги;
		СпособРасчета                        = ПараметрыУчетаЭлеватора.СпособНачисленияОплатыЗаУслугуЛабАнализа; 

		Номенклатура_Вентилирование          = ИНАГРО_Элеватор.ПолучитьПредопределеннуюНоменклатуру("Вентилирование");
		Номенклатура_Сушка                   = ИНАГРО_Элеватор.ПолучитьПредопределеннуюНоменклатуру("Сушка");
		Номенклатура_Очистка                 = ИНАГРО_Элеватор.ПолучитьПредопределеннуюНоменклатуру("Очистка");
		Номенклатура_Анализ                  = ИНАГРО_Элеватор.ПолучитьПредопределеннуюНоменклатуру("Анализ");
		Номенклатура_АнализПБ                = ИНАГРО_Элеватор.ПолучитьПредопределеннуюНоменклатуру("АнализПБ");
		Номенклатура_АнализОтдельнойУслугой  = ИНАГРО_Элеватор.ПолучитьПредопределеннуюНоменклатуру("АнализОтдельнойУслугой");
		Номенклатура_СкладскаяКвитанция      = ИНАГРО_Элеватор.ПолучитьПредопределеннуюНоменклатуру("СкладскаяКвитанция");
		Номенклатура_Приемка                 = ИНАГРО_Элеватор.ПолучитьПредопределеннуюНоменклатуру("Приемка");
		Номенклатура_Доставка                = ИНАГРО_Элеватор.ПолучитьПредопределеннуюНоменклатуру("Доставка");
		
		Если   ПараметрыУчетаЭлеватора <> Неопределено
			И (ВидДоговора <> Справочники.ВидыВзаиморасчетов.ДоговорЗакупки) И (ВидДоговора <> Справочники.ВидыВзаиморасчетов.ДоговорПереработки) Тогда
			
			Если НЕ ПараметрыУчетаЭлеватора.ВыставлятьУслугиОчисткиСушкиПоФактическимПоказателям 
				ИЛИ (ПараметрыУчетаЭлеватора.ВыставлятьУслугиОчисткиСушкиПоФактическимПоказателям И ВыставлятьУслугиОчисткиСушки) Тогда
				
				// когда услуги выставляются реестром				
								
				// Сушка или вентилиррование
				
				ТекущаяЦена = 0;
				
				Если Вентилирование И ЗначениеЗаполнено(Номенклатура_Вентилирование) Тогда
					ТекущаяЦена = ?(ЦенаСушки = 0 И КоличествоСушки <> 0,
									ИНАГРО_Элеватор.ПолучитьЦенуУслугиЭлеватора(Организация, Дата, Владелец_П, Договор_П, ВидКультурыДляРасчетаСтоимостиУслуги, Урожай, Номенклатура_Вентилирование),
									ЦенаСушки);	
				ИначеЕсли ЗначениеЗаполнено(Номенклатура_Сушка) Тогда 
					ТекущаяЦена = ?(ЦенаСушки = 0 И КоличествоСушки <> 0,
									ИНАГРО_Элеватор.ПолучитьЦенуУслугиЭлеватора(Организация, Дата, Владелец_П, Договор_П, ВидКультурыДляРасчетаСтоимостиУслуги, Урожай, Номенклатура_Сушка),
									ЦенаСушки);
				КонецЕсли;
				
				Если Вентилирование Тогда
					Номенклатура_П = Номенклатура_Вентилирование;
				Иначе
					Номенклатура_П = Номенклатура_Сушка;
				КонецЕсли;
				
				Если ТекущаяЦена <> 0 И КоличествоСушки <> 0 Тогда 													 
					мВыставленыУслугиСушки   = Истина;
					НоваяСтрока              = ТаблицаУслуг.Добавить();
					НоваяСтрока.Номенклатура = Номенклатура_П;
					НоваяСтрока.Количество   = КоличествоСушки;
					НоваяСтрока.Сумма        = НоваяСтрока.Количество * ТекущаяЦена;
				Иначе
					мВыставленыУслугиСушки   = Ложь;
				КонецЕсли;
				
				// Очистка			
				
				ТекущаяЦена = 0;
				
				Если ЗначениеЗаполнено(Номенклатура_Очистка) Тогда
					ТекущаяЦена = ?(ЦенаОчистки = 0 И КоличествоОчистки <> 0,
									ИНАГРО_Элеватор.ПолучитьЦенуУслугиЭлеватора(Организация, Дата, Владелец_П, Договор_П, ВидКультурыДляРасчетаСтоимостиУслуги, Урожай, Номенклатура_Очистка),
									ЦенаОчистки);
				КонецЕсли;				
				
				Если ТекущаяЦена <> 0 И КоличествоОчистки <> 0 Тогда 													 
					мВыставленыУслугиОчистки = Истина;  
					НоваяСтрока              = ТаблицаУслуг.Добавить();
					НоваяСтрока.Номенклатура = Номенклатура_Очистка;
					НоваяСтрока.Количество   = КоличествоОчистки;
					НоваяСтрока.Сумма        = НоваяСтрока.Количество * ТекущаяЦена;
				Иначе
					мВыставленыУслугиОчистки = Ложь;
				КонецЕсли;
				
				// когда услуги выставляются актом очистки сушки тогда удаляем заполненые строки
				
			Иначе
				мВыставленыУслугиСушки         = ложь;
				мВыставленыУслугиОчистки       = Ложь;
			КонецЕсли;
			
		Иначе // услуги выставляются когда не стоит параметр Выставлять по факт показателям либо на специализированых договорах			
			
			//  Сушка			
						
			ТекущаяЦена = 0;
			
			Если Вентилирование И ЗначениеЗаполнено(Номенклатура_Вентилирование) Тогда
				ТекущаяЦена = ?(ЦенаСушки = 0 И КоличествоСушки <> 0,
								ИНАГРО_Элеватор.ПолучитьЦенуУслугиЭлеватора(Организация, Дата, Владелец_П, Договор_П, ВидКультурыДляРасчетаСтоимостиУслуги, Урожай, Номенклатура_Вентилирование),
								ЦенаСушки);		
			ИначеЕсли ЗначениеЗаполнено(Номенклатура_Сушка) Тогда 
				ТекущаяЦена = ?(ЦенаСушки = 0 И КоличествоСушки <> 0,
								ИНАГРО_Элеватор.ПолучитьЦенуУслугиЭлеватора(Организация, Дата, Владелец_П, Договор_П, ВидКультурыДляРасчетаСтоимостиУслуги, Урожай, Номенклатура_Сушка),
								ЦенаСушки);
			КонецЕсли;
			
			Если Вентилирование Тогда
				Номенклатура_П = Номенклатура_Вентилирование;
			Иначе
				Номенклатура_П = Номенклатура_Сушка;
			КонецЕсли;
			
			Если ТекущаяЦена <> 0 И КоличествоСушки <> 0 Тогда 													 
				мВыставленыУслугиСушки   = Истина;
				НоваяСтрока              = ТаблицаУслуг.Добавить();
				НоваяСтрока.Номенклатура = Номенклатура_П;
				НоваяСтрока.Количество   = КоличествоСушки;
				НоваяСтрока.Сумма        = НоваяСтрока.Количество * ТекущаяЦена;
			Иначе
				мВыставленыУслугиСушки   = Ложь;
			КонецЕсли;
			
			// Очистка			
			
			ТекущаяЦена = 0;
			
			Если ЗначениеЗаполнено(Номенклатура_Очистка) Тогда
				ТекущаяЦена = ?(ЦенаОчистки = 0 И КоличествоОчистки <> 0,
								ИНАГРО_Элеватор.ПолучитьЦенуУслугиЭлеватора(Организация, Дата, Владелец_П, Договор_П, ВидКультурыДляРасчетаСтоимостиУслуги, Урожай, Номенклатура_Очистка),
								ЦенаОчистки);
			КонецЕсли;			
			
			Если ТекущаяЦена <> 0 И КоличествоОчистки <> 0 Тогда 													 
				мВыставленыУслугиОчистки = Истина;  
				НоваяСтрока              = ТаблицаУслуг.Добавить();
				НоваяСтрока.Номенклатура = Номенклатура_Очистка;
				НоваяСтрока.Количество   = КоличествоОчистки;
				НоваяСтрока.Сумма        = НоваяСтрока.Количество * ТекущаяЦена;
			Иначе
				мВыставленыУслугиОчистки = Ложь;
			КонецЕсли;
			
		КонецЕсли;	
		
		// Остальные услуги в зависимости от видов договоров
		
		// Услуга лабанализа
		
		Если  (ВидДоговора <> Справочники.ВидыВзаиморасчетов.ДоговорЗакупки)
			И (ВидДоговора <> Справочники.ВидыВзаиморасчетов.ДоговорПереработки) Тогда			
			
			ТекущаяЦена = 0;
			
			Если ЗначениеЗаполнено(Номенклатура_Анализ) Тогда 
				ТекущаяЦена = ?(ЗачетныйВес <> 0,
								ИНАГРО_Элеватор.ПолучитьЦенуУслугиЭлеватора(Организация, Дата, Владелец_П, Договор_П, ВидКультурыДляРасчетаСтоимостиУслуги, Урожай, Номенклатура_Анализ),
								0);
			КонецЕсли;			
			
			//Если    СпособРасчета = Перечисления.ИНАГРО_СпособыНачисленияОплатыЗаАнализ.ЗаЕдиницу 
			//	ИЛИ СпособРасчета = Перечисления.ИНАГРО_СпособыНачисленияОплатыЗаАнализ.ПустаяСсылка() 
			//	ИЛИ СпособРасчета = Перечисления.ИНАГРО_СпособыНачисленияОплатыЗаАнализ.Нет Тогда 
			//	КоличествоУслуги = 1;
			Если    СпособРасчета = Перечисления.ИНАГРО_СпособыНачисленияОплатыЗаАнализ.Нет Тогда 
				КоличествоУслуги = 0;
			ИначеЕсли    СпособРасчета = Перечисления.ИНАГРО_СпособыНачисленияОплатыЗаАнализ.ЗаЕдиницу  Тогда 
				КоличествоУслуги = 1;
			ИначеЕсли СпособРасчета = Перечисления.ИНАГРО_СпособыНачисленияОплатыЗаАнализ.ЗаТоннуЗачВеса Тогда 
				КоличествоУслуги = ЗачетныйВес / 1000;
			ИначеЕсли СпособРасчета = Перечисления.ИНАГРО_СпособыНачисленияОплатыЗаАнализ.ЗаТоннуФизВеса Тогда
				КоличествоУслуги = ОбщийФизическийВес / 1000;
			КонецЕсли;
			
			Если ТекущаяЦена <> 0 И КоличествоУслуги <> 0 Тогда 													 
				НоваяСтрока              = ТаблицаУслуг.Добавить();
				НоваяСтрока.Номенклатура = Номенклатура_Анализ;
				НоваяСтрока.Количество   = КоличествоУслуги;
				НоваяСтрока.Сумма        = НоваяСтрока.Количество * ТекущаяЦена;							
			КонецЕсли;
			
			// Услуга анализа на ПБ
			
			Если  (ВидДоговора <> Справочники.ВидыВзаиморасчетов.ДоговорЗакупки)
				И (ВидДоговора <> Справочники.ВидыВзаиморасчетов.ДоговорПереработки) Тогда				
								
				ТекущаяЦена = 0;
				
				Если ЗначениеЗаполнено(Номенклатура_АнализПБ) Тогда 
					ТекущаяЦена = ?(ЗачетныйВес <> 0,
									ИНАГРО_Элеватор.ПолучитьЦенуУслугиЭлеватора(Организация, Дата, Владелец_П, Договор_П, ВидКультурыДляРасчетаСтоимостиУслуги, Урожай, Номенклатура_АнализПБ),
									0);
				КонецЕсли;				
				
				//Если    СпособРасчета = Перечисления.ИНАГРО_СпособыНачисленияОплатыЗаАнализ.ЗаЕдиницу 
				//	ИЛИ СпособРасчета = Перечисления.ИНАГРО_СпособыНачисленияОплатыЗаАнализ.ПустаяСсылка() 
				//	ИЛИ СпособРасчета = Перечисления.ИНАГРО_СпособыНачисленияОплатыЗаАнализ.Нет Тогда 
				//	КоличествоУслуги = 1;
				Если    СпособРасчета = Перечисления.ИНАГРО_СпособыНачисленияОплатыЗаАнализ.Нет Тогда 
					КоличествоУслуги = 0;
				ИначеЕсли    СпособРасчета = Перечисления.ИНАГРО_СпособыНачисленияОплатыЗаАнализ.ЗаЕдиницу  Тогда 
					КоличествоУслуги = 1;
				ИначеЕсли СпособРасчета = Перечисления.ИНАГРО_СпособыНачисленияОплатыЗаАнализ.ЗаТоннуЗачВеса Тогда 
					КоличествоУслуги = ЗачетныйВес / 1000;
				ИначеЕсли СпособРасчета = Перечисления.ИНАГРО_СпособыНачисленияОплатыЗаАнализ.ЗаТоннуФизВеса Тогда
					КоличествоУслуги = ОбщийФизическийВес / 1000;
				КонецЕсли;
				
				Если ТекущаяЦена <> 0 И КоличествоУслуги <> 0 Тогда 													 
					НоваяСтрока              = ТаблицаУслуг.Добавить();
					НоваяСтрока.Номенклатура = Номенклатура_АнализПБ;
					НоваяСтрока.Количество   = КоличествоУслуги;
					НоваяСтрока.Сумма        = НоваяСтрока.Количество * ТекущаяЦена;
				КонецЕсли;
				
				// Анализ отдельной услугой
				
				ТекущаяЦена = 0;
				
				Если ЗначениеЗаполнено(Номенклатура_АнализОтдельнойУслугой) Тогда 
					ТекущаяЦена = ?(ЗачетныйВес <> 0,
									ИНАГРО_Элеватор.ПолучитьЦенуУслугиЭлеватора(Организация, Дата, Владелец_П, Договор_П, ВидКультурыДляРасчетаСтоимостиУслуги, Урожай, Номенклатура_АнализОтдельнойУслугой),
									0);
				КонецЕсли;				
								
				
				//Если    СпособРасчета = Перечисления.ИНАГРО_СпособыНачисленияОплатыЗаАнализ.ЗаЕдиницу 
				//	ИЛИ СпособРасчета = Перечисления.ИНАГРО_СпособыНачисленияОплатыЗаАнализ.ПустаяСсылка() 
				//	ИЛИ СпособРасчета = Перечисления.ИНАГРО_СпособыНачисленияОплатыЗаАнализ.Нет Тогда 
				//	КоличествоУслуги = 1;
				Если    СпособРасчета = Перечисления.ИНАГРО_СпособыНачисленияОплатыЗаАнализ.Нет Тогда 
					КоличествоУслуги = 0;
				ИначеЕсли    СпособРасчета = Перечисления.ИНАГРО_СпособыНачисленияОплатыЗаАнализ.ЗаЕдиницу  Тогда 
					КоличествоУслуги = 1;
				ИначеЕсли СпособРасчета = Перечисления.ИНАГРО_СпособыНачисленияОплатыЗаАнализ.ЗаТоннуЗачВеса Тогда 
					КоличествоУслуги = ЗачетныйВес / 1000;
				ИначеЕсли СпособРасчета = Перечисления.ИНАГРО_СпособыНачисленияОплатыЗаАнализ.ЗаТоннуФизВеса Тогда
					КоличествоУслуги = ОбщийФизическийВес / 1000;
				КонецЕсли;
				
				Если ТекущаяЦена <> 0 И КоличествоУслуги <> 0 Тогда 													 
					НоваяСтрока              = ТаблицаУслуг.Добавить();
					НоваяСтрока.Номенклатура = Номенклатура_АнализОтдельнойУслугой;
					НоваяСтрока.Количество   = КоличествоУслуги;
					НоваяСтрока.Сумма        = НоваяСтрока.Количество * ТекущаяЦена;									
				КонецЕсли;
				
				// Складская квитанция
				
				Если ПараметрыУчетаЭлеватора.ОдинаковаяДатаФормСкладскойИРеестра Тогда					
					
					ТекущаяЦена = 0;
					
					Если ЗначениеЗаполнено(Номенклатура_СкладскаяКвитанция) Тогда 
						ТекущаяЦена = ?(ЗачетныйВес <> 0,
										ИНАГРО_Элеватор.ПолучитьЦенуУслугиЭлеватора(Организация, Дата, Владелец_П, Договор_П, ВидКультурыДляРасчетаСтоимостиУслуги, Урожай, Номенклатура_СкладскаяКвитанция),
										0);
					КонецЕсли;					
										
					Если ТекущаяЦена <> 0 И ЗачетныйВес <> 0 Тогда 													 
						НоваяСтрока              = ТаблицаУслуг.Добавить();
						НоваяСтрока.Номенклатура = Номенклатура_СкладскаяКвитанция;
						НоваяСтрока.Количество   = 1;
						НоваяСтрока.Сумма        = НоваяСтрока.Количество * ТекущаяЦена;
					КонецЕсли;
					
				КонецЕсли;
				
				// Приемка
				
				Если КоличествоПриемки <> 0 Тогда
					
					ТекущаяЦена = 0;
					
					Если ЗначениеЗаполнено(Номенклатура_Приемка) Тогда 
						ТекущаяЦена = ?(ЦенаПриемки = 0 И КоличествоПриемки <> 0,
										ИНАГРО_Элеватор.ПолучитьЦенуУслугиЭлеватора(Организация, Дата, Владелец_П, Договор_П, ВидКультурыДляРасчетаСтоимостиУслуги, Урожай, Номенклатура_Приемка),
										ЦенаПриемки);
					КонецЕсли;					
					
					Если ТекущаяЦена <> 0 И КоличествоПриемки <> 0 Тогда 													 
						НоваяСтрока              = ТаблицаУслуг.Добавить();
						НоваяСтрока.Номенклатура = Номенклатура_Приемка;
						НоваяСтрока.Количество   = КоличествоПриемки;
						НоваяСтрока.Сумма        = НоваяСтрока.Количество * ТекущаяЦена;											
					КонецЕсли;
					
				КонецЕсли;
				
				// Доставка
				
				Если КоличествоДоставки <> 0 Тогда
					
					ТекущаяЦена = 0;
					
					Если ЗначениеЗаполнено(Номенклатура_Доставка) Тогда 
						ТекущаяЦена = ?(ЦенаДоставки = 0 И КоличествоДоставки <> 0,
										ИНАГРО_Элеватор.ПолучитьЦенуУслугиЭлеватора(Организация, Дата, Владелец_П, Договор_П, ВидКультурыДляРасчетаСтоимостиУслуги, Урожай, Номенклатура_Доставка),
										ЦенаДоставки);
					КонецЕсли;			
										
					Если ТекущаяЦена <> 0 И КоличествоДоставки <> 0 Тогда 													 
						НоваяСтрока              = ТаблицаУслуг.Добавить();
						НоваяСтрока.Номенклатура = Номенклатура_Доставка;
						НоваяСтрока.Количество   = КоличествоДоставки;
						НоваяСтрока.Сумма        = НоваяСтрока.Количество * ТекущаяЦена;											
					КонецЕсли;
					
				КонецЕсли;
				
			ИначеЕсли ВидДоговора = Справочники.ВидыВзаиморасчетов.ДоговорЗакупки
				И ДоговорПоставщика.ИНАГРО_ВидЗакупки = Перечисления.ИНАГРО_ВидыЗакупки.Расчетный Тогда
				
				// Доставка			
				
				Если КоличествоДоставки <> 0 Тогда 
					
					ТекущаяЦена = ?(ЦенаДоставки = 0 И КоличествоДоставки <> 0,
									ИНАГРО_Элеватор.ПолучитьЦенуУслугиЭлеватора(Организация, Дата, Владелец_П, Договор_П, ВидКультурыДляРасчетаСтоимостиУслуги, Урожай, Номенклатура_Доставка),
									ЦенаДоставки);					
										
					Если ТекущаяЦена <> 0 И КоличествоДоставки <> 0 Тогда 													 
						НоваяСтрока              = ТаблицаУслуг.Добавить();
						НоваяСтрока.Номенклатура = Номенклатура_Доставка;
						НоваяСтрока.Количество   = КоличествоДоставки;
						НоваяСтрока.Сумма        = НоваяСтрока.Количество * ТекущаяЦена;											
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе
			
			мВыставленыУслугиОчистки       = Истина;
			мВыставленыУслугиСушки         = Истина;
			
		КонецЕсли;	  
		
		Если НЕ Очистка Тогда
			мВыставленыУслугиОчистки       = Истина;
		КонецЕсли;
		
		Если НЕ Сушка Тогда
			мВыставленыУслугиСушки         = Истина;
		КонецЕсли;
		
		Если (СобственноеПодразделение И Владелец <> Поставщик)
			ИЛИ НЕ СобственноеПодразделение
			ИЛИ ПараметрыУчетаЭлеватора.ВестиУчетПолейТоковПоУслугам Тогда
			
			Если  ВидДоговора = Справочники.ВидыВзаиморасчетов.ДоговорЗакупки
				И ДоговорПоставщика.ИНАГРО_ВидЗакупки = Перечисления.ИНАГРО_ВидыЗакупки.Расчетный Тогда
				Услуги.Очистить();
			Иначе	
				ТаблицаУслуг.Свернуть("Номенклатура", "Количество, Сумма");
				Для Каждого Строка_Услуг Из ТаблицаУслуг Цикл
					ПараметрыОтбора = Новый Структура;
					ПараметрыОтбора.Вставить("Номенклатура",Строка_Услуг.Номенклатура);
					НайденныеСтроки = Услуги.НайтиСтроки(ПараметрыОтбора);
					Если НайденныеСтроки.Количество() = 0 Тогда
						Если ЗначениеЗаполнено(Строка_Услуг.Номенклатура) Тогда
							НоваяСтрока              = Услуги.Добавить();
							НоваяСтрока.Номенклатура = Строка_Услуг.Номенклатура;
							НоваяСтрока.Количество   = Строка_Услуг.Количество;
							НоваяСтрока.Цена         = Строка_Услуг.Сумма/Строка_Услуг.Количество;
							НоваяСтрока.Сумма        = Строка_Услуг.Сумма;
						КонецЕсли;
					Иначе
						Для Каждого Строк_Усл Из НайденныеСтроки Цикл
							Строк_Усл.Количество = Строка_Услуг.Количество;
							Строк_Усл.Цена       = Строка_Услуг.Сумма/Строка_Услуг.Количество;
							Строк_Усл.Сумма      = Строка_Услуг.Сумма;
							Прервать;
						КонецЦикла;	
					КонецЕсли;	
				КонецЦикла;
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		Услуги.Очистить();
		
	КонецЕсли;
	
КонецПроцедуры	

Функция СформироватьТаблицуУслуг()
	
	ТаблицаУслуг = Новый ТаблицаЗначений;
	ТаблицаУслуг.Колонки.Добавить("ДатаРасчета");
	ТаблицаУслуг.Колонки.Добавить("Ссылка"); 
	ТаблицаУслуг.Колонки.Добавить("Организация");
	ТаблицаУслуг.Колонки.Добавить("Контрагент");
	ТаблицаУслуг.Колонки.Добавить("ДоговорКонтрагента");
	ТаблицаУслуг.Колонки.Добавить("Номенклатура");
	ТаблицаУслуг.Колонки.Добавить("Культура");
	ТаблицаУслуг.Колонки.Добавить("Склад");
	ТаблицаУслуг.Колонки.Добавить("ВидХранения");
	ТаблицаУслуг.Колонки.Добавить("Урожай");
	ТаблицаУслуг.Колонки.Добавить("Количество");
	ТаблицаУслуг.Колонки.Добавить("Стоимость");  
	
	Для Каждого СтрокаТабУслуги Из Услуги Цикл
		
		НоваяСтрока                    = ТаблицаУслуг.Добавить();
		НоваяСтрока.ДатаРасчета        = Дата;
		НоваяСтрока.Ссылка             = Ссылка; 
		НоваяСтрока.Организация        = Организация;
			
		Если  СобственноеПодразделение
			И ВидХранения.ТипДоговора = Справочники.ВидыВзаиморасчетов.ДоговорЗакупки Тогда  
			НоваяСтрока.Контрагент         = Поставщик;
			НоваяСтрока.ДоговорКонтрагента = ДоговорПокупателя;
		Иначе	
			НоваяСтрока.Контрагент         = Владелец;
			НоваяСтрока.ДоговорКонтрагента = ДоговорКонтрагента;
		КонецЕсли;
		
		НоваяСтрока.Номенклатура       = СтрокаТабУслуги.Номенклатура;
		НоваяСтрока.Культура           = Номенклатура;
		НоваяСтрока.Склад              = Склад;
		НоваяСтрока.ВидХранения        = ВидХранения;
		НоваяСтрока.Урожай             = Урожай;
		НоваяСтрока.Количество         = СтрокаТабУслуги.Количество;
		НоваяСтрока.Стоимость          = СтрокаТабУслуги.Сумма;
		
	КонецЦикла;  
	
	Возврат ТаблицаУслуг;
	
КонецФункции		 

Функция ПолучитьПараметрыДляРасчетаЗачетногоВеса()
	
	ПараметрыДляРасчетаЗачетногоВеса = Новый Структура(
		"Ссылка, Дата, Организация,
		|Владелец, ДоговорКонтрагента, Номенклатура,
		|Склад, Влажность, СорнаяПримесь,
		|ФизическийВес, ЗачетныйВес, БазисыДляРасчетаУслугБратьИзДокумента     
		|");
	ЗаполнитьЗначенияСвойств(ПараметрыДляРасчетаЗачетногоВеса, ЭтотОбъект);
	ПараметрыДляРасчетаЗачетногоВеса.Вставить("Влажность1",     Влажность1);
	ПараметрыДляРасчетаЗачетногоВеса.Вставить("СорнаяПримесь1", СорнаяПримесь1);
	ПараметрыДляРасчетаЗачетногоВеса.Вставить("ФизическийВес",  ОбщийФизическийВес);
	
	Возврат ПараметрыДляРасчетаЗачетногоВеса;
	
КонецФункции

#КонецОбласти

мВыставленыУслугиСушки   = Ложь;
мВыставленыУслугиОчистки = Ложь;

#КонецЕсли