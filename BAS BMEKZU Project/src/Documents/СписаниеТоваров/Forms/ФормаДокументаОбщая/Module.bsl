#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	Если Параметры.Ключ.Пустая() Тогда
		ПодготовитьФормуНаСервере();
	КонецЕсли;
	
	// Уведомим о появлении функционала рабочей даты
	ЭтаФорма.НастройкиПредупреждений = ОбщегоНазначенияБП.НастройкиПредупрежденийОбИзменениях("РабочаяДатаИзДокумента");
	 
	// Показываем, если это новый документ и сама рабочая дата еще не установлена.
	ЭтаФорма.НастройкиПредупреждений.РабочаяДатаИзДокумента = ЭтаФорма.НастройкиПредупреждений.РабочаяДатаИзДокумента
	 	И ЭтаФорма.Параметры.Ключ.Пустая()
	  	И НЕ ЗначениеЗаполнено(БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("РабочаяДата"));
	
	УстановитьПараметрыВыбораВидОперации();
	
	// Если форма вызвана в режиме смена вида операции - модифицируем сразу при открытии, 
	// чтобы можно было подтвердить или отказаться от изменения путем сохранения или 
	// отказа от сохранения документа.
	Если Параметры.Свойство("ИзменитьВидОперации")
		И Параметры.ИзменитьВидОперации Тогда
		
		// Не кэшируем переменную Объект, т.к. может вызываться Форма.ИзменитьРеквизиты(),
		// которая меняет Объект.
		Объект.ВидОперации = Параметры.ЗначенияЗаполнения.ВидОперации;
		
		УстановитьЗаголовокФормы();
		ОбновитьИтогиНаСервере();
		УправлениеФормойНаСервере();
		
		Модифицированность = Истина;
		
	КонецЕсли;
	
	// Активизировать первую непустую табличную часть
	СписокТабличныхЧастей = Новый СписокЗначений;
	СписокТабличныхЧастей.Добавить("Товары",         "Товары");
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьВозвратнуюТару") Тогда
		СписокТабличныхЧастей.Добавить("ВозвратнаяТара", "ВозвратнаяТара");
	КонецЕсли;
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеТоваров.БланкиСтрогогоУчета") И ПолучитьФункциональнуюОпцию("ИспользоватьБланкиСтрогогоУчета") Тогда
		СписокТабличныхЧастей.Добавить("БланкиСтрогогоУчета", "БланкиСтрогогоУчета");
	КонецЕсли;	
	
	АктивизироватьТабличнуюЧасть = ОбщегоНазначенияБПВызовСервера.ПолучитьПервуюНепустуюВидимуюТабличнуюЧасть(
		ЭтаФорма, СписокТабличныхЧастей);
		
	ОбщегоНазначенияБПВызовСервера.АктивизироватьЭлементФормы(ЭтаФорма, АктивизироватьТабличнуюЧасть);
	
	УстановитьЭлементыФормыПоВидуОперации();

КонецПроцедуры // ПриСозданииНаСервере

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом

	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	ПодготовитьФормуНаСервере();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры // ПриЧтенииНаСервере

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	УстановитьЗаголовокФормы();
	ЗаполнитьДобавленныеКолонкиТаблиц();
	УстановитьСостояниеДокумента();
	
КонецПроцедуры  // ПослеЗаписиНаСервере

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)

	Если ИсточникВыбора.ИмяФормы = "Обработка.ПодборНоменклатуры.Форма.Форма" Тогда
		ОбработкаВыбораПодборВставкаИзБуфераНаСервере(ВыбранноеЗначение, ИсточникВыбора.ИмяТаблицы);
	ИначеЕсли ИсточникВыбора.ИмяФормы = "РегистрСведений.СоставКомиссий.Форма.ФормаВыбора" Тогда
		ЗаполнитьЗначенияСвойств(Объект, ВыбранноеЗначение);
		Модифицированность = Истина;
	КонецЕсли;

КонецПроцедуры // ОбработкаВыбора

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)

	Если ИмяСобытия = "ОбработанаТабличнаяЧастьТовары" И ТипЗнч(Параметр) = Тип("Структура") 
		И Параметр.Свойство("ИдентификаторВызывающейФормы")
		И Параметр.ИдентификаторВызывающейФормы = УникальныйИдентификатор Тогда
		
		ОбработкаОповещенияОбработкиТабличнойЧастиТоварыНаСервере(Параметр);
		
	ИначеЕсли ИмяСобытия = "ДанныеСкопированыВБуферОбмена" Тогда
		
		УстановитьДоступностьКомандыВставки(ЭтотОбъект, Истина);
		
	Иначе
		ОбщегоНазначенияБПКлиент.ОбработкаОповещенияФормыДокумента(ЭтаФорма, Объект.Ссылка, ИмяСобытия, Параметр, Источник);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)

	Если НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДатаДокумента) Тогда
		// Изменение времени не влияет на поведение документа.
		ТекущаяДатаДокумента = Объект.Дата;
		Возврат;
	КонецЕсли;

	// Общие проверки условий по датам.
	ТребуетсяВызовСервера = ОбщегоНазначенияБПКлиент.ТребуетсяВызовСервераПриИзмененииДатыДокумента(Объект.Дата, 
		ТекущаяДатаДокумента);

	// Если определили, что изменение даты может повлиять на какие-либо параметры, 
	// то передаем обработку на сервер.
	Если ТребуетсяВызовСервера Тогда
		ДатаПриИзмененииНаСервере();
	КонецЕсли;

	// Запомним новую дату документа.
	ТекущаяДатаДокумента = Объект.Дата;

КонецПроцедуры

&НаСервере
Процедура ДатаПриИзмененииНаСервере()

	УстановитьФункциональныеОпцииФормы();
	
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)

	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		ОрганизацияПриИзмененииНаСервере();
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()

	УстановитьФункциональныеОпцииФормы();
	ЗаполнитьСчетаУчетаВТабличнойЧастиНаСервере();
	
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура СкладПриИзменении(Элемент)

	Если ЗначениеЗаполнено(Объект.Склад) Тогда
		СкладПриИзмененииНаСервере();
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура СкладПриИзмененииНаСервере()

	СкладОбработатьИзменение();
	
	УстановитьФункциональныеОпцииФормы();
	
	ЗаполнитьСчетаУчетаВТабличнойЧастиНаСервере();
	
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры // СкладПриИзмененииНаСервере

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования,ЭтотОбъект,"Объект.Комментарий");

КонецПроцедуры

&НаКлиенте
Процедура ВидОперацииПриИзменении(Элемент)
	
	ВидОперацииПриИзмененииНаСервере();
		
КонецПроцедуры

&НаСервере
Процедура ВидОперацииПриИзмененииНаСервере()

	УстановитьЭлементыФормыПоВидуОперации();		
	УстановитьЗаголовокФормы();
	ОбновитьИтогиНаСервере();
	УправлениеФормойНаСервере();
	
	Модифицированность = Истина;

КонецПроцедуры // ВидОперацииПриИзмененииНаСервере

&НаКлиенте
Процедура СчетДтПриИзменении(Элемент)
	
	НастроитьСубконтоПриИзмененииСчета(ЭтаФорма, Элемент.Имя);
	
	УстановитьВидимостьНалоговогоНазначенияДоходовИЗатрат(ЭтаФорма);
	

КонецПроцедуры // СчетДтПриИзменении

&НаКлиенте
Процедура СчетДтСубконтоПриИзменении(Элемент)
	
	НастроитьСубконтоПриИзмененииСубконто(ЭтаФорма, "СчетДт");
	
	УстановитьВидимостьНалоговогоНазначенияДоходовИЗатрат(ЭтаФорма);
	
КонецПроцедуры // СчетДтСубконтоПриИзменении

// ИНАГРО++
&НаКлиенте
Процедура ИНАГРО_УказатьОСПриИзменении(Элемент)
	
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ИНАГРО_ВТабличнойЧастиПриИзменении(Элемент)
	
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры 
// ИНАГРО--

#КонецОбласти 

#Область ОбработчикиСобытийТаблицыФормыТовары

&НаКлиенте
Процедура ТоварыПриИзменении(Элемент)
	ОбновитьИтоги(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	Если НоваяСтрока И ОтменаРедактирования Тогда
		ОбновитьИтоги(ЭтаФорма);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)

	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	ДанныеСтрокиТаблицы	= Новый Структура(
		"Номенклатура, ЕдиницаИзмерения, Коэффициент,
		|Количество, Цена, Сумма, 
		|СтавкаНДСВРознице, 
		|СчетУчетаБУ, СчетУчетаЗабалансовый, НалоговоеНазначение, Всего");
		
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, ТекущиеДанные);
	
	ДанныеОбъекта	= Новый Структура(
		"Дата, Организация, Склад, ТипЦен, НТТ, 
		|ТипСклада, УчетВПродажныхЦенах, РазделениеПоСтавкамВРознице, РассчитыватьСуммаВРознице");
		
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
	ДанныеОбъекта.НТТ				          = НТТ;
	ДанныеОбъекта.ТипСклада				      = ТипСклада;
	ДанныеОбъекта.УчетВПродажныхЦенах	      = УчетВПродажныхЦенах;
	ДанныеОбъекта.РазделениеПоСтавкамВРознице = РазделениеПоСтавкамВРознице;
	ДанныеОбъекта.РассчитыватьСуммаВРознице	  = РассчитыватьСуммаВРознице;
	
	ТоварыНоменклатураПриИзмененииНаСервере(ДанныеСтрокиТаблицы, ДанныеОбъекта);
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтрокиТаблицы);

КонецПроцедуры // ТоварыНоменклатураПриИзменении

&НаСервереБезКонтекста
Процедура ТоварыНоменклатураПриИзмененииНаСервере(СтрокаТабличнойЧасти, Знач ДанныеОбъекта)

	СведенияОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОНоменклатуре(
		СтрокаТабличнойЧасти.Номенклатура, ДанныеОбъекта);
		
	Если СведенияОНоменклатуре = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаТабличнойЧасти.ЕдиницаИзмерения		= СведенияОНоменклатуре.БазоваяЕдиницаИзмерения;
	СтрокаТабличнойЧасти.Коэффициент			= СведенияОНоменклатуре.Коэффициент;
	
	Если ДанныеОбъекта.НТТ Тогда
		СтрокаТабличнойЧасти.Цена = СведенияОНоменклатуре.ЦенаВРознице;
		Если ДанныеОбъекта.РазделениеПоСтавкамВРознице Тогда
			СтрокаТабличнойЧасти.СтавкаНДСВРознице = СведенияОНоменклатуре.СтавкаНДСВРознице;
		КонецЕсли; 
	КонецЕсли;
	
	Документы.СписаниеТоваров.ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(
		ДанныеОбъекта, СтрокаТабличнойЧасти, "Товары", СведенияОНоменклатуре);
	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
	
КонецПроцедуры // ТоварыНоменклатураПриИзмененииНаСервере

&НаКлиенте
Процедура ТоварыЕдиницаИзмеренияПриИзменении(Элемент)

	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	ДанныеСтрокиТаблицы	= Новый Структура(
		"Номенклатура, ЕдиницаИзмерения, Коэффициент,
		|Количество, Цена, Сумма,  
		|СтавкаНДСВРознице,
		|СчетУчетаБУ, СчетУчетаЗабалансовый, НалоговоеНазначение, Всего");
		
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, ТекущиеДанные);
	
	ТоварыЕдиницаИзмеренияПриИзмененииНаСервере(ДанныеСтрокиТаблицы);
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтрокиТаблицы);

КонецПроцедуры // ТоварыЕдиницаИзмеренияПриИзменении

&НаСервереБезКонтекста
Процедура ТоварыЕдиницаИзмеренияПриИзмененииНаСервере(СтрокаТабличнойЧасти)
	
	ОбработкаТабличныхЧастей.ЗаполнитьКоэффициентТабЧасти(СтрокаТабличнойЧасти);
	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
	
	ЗаполнитьДобавленныеКолонкиСтрокиТаблицыТовары(СтрокаТабличнойЧасти, Неопределено);	

КонецПроцедуры // ТоварыЕдиницаИзмеренияПриИзмененииНаСервере

&НаКлиенте
Процедура ТоварыКоличествоПриИзменении(Элемент)

	ОбработкаТабличныхЧастейКлиентСервер.ПриИзмененииКоличествоЦена(ЭтаФорма, "Товары",,Ложь);

КонецПроцедуры // ТоварыКоличествоПриИзменении

&НаКлиенте
Процедура ТоварыЦенаПриИзменении(Элемент)

	ОбработкаТабличныхЧастейКлиентСервер.ПриИзмененииКоличествоЦена(ЭтаФорма, "Товары",,Ложь);

КонецПроцедуры // ТоварыЦенаПриИзменении

&НаКлиенте
Процедура ТоварыСуммаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	ОбработкаТабличныхЧастейКлиентСервер.ПриИзмененииСумма(ЭтаФорма, "Товары",,Ложь);
	ТекущиеДанные.Цена = ТекущиеДанные.Сумма / ?(ТекущиеДанные.Количество = 0, 1, ТекущиеДанные.Количество);
	
КонецПроцедуры // ТоварыСуммаПриИзменении

&НаКлиенте
Процедура ТоварыСчетУчетаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	ТекущиеДанные.СчетУчетаЗабалансовый = ЗначениеЗаполнено(ТекущиеДанные.СчетУчетаБУ)
		И БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(ТекущиеДанные.СчетУчетаБУ).Забалансовый;
		
КонецПроцедуры // ТоварыСчетУчетаПриИзменении

&НаКлиенте
Процедура ТоварыДокументОприходованияПриИзменении(Элемент)

	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	Если НЕ ЗначениеЗаполнено(ТекущиеДанные.ДокументОприходования) Тогда
		ТекущиеДанные.Себестоимость   = 0;
		ТекущиеДанные.СебестоимостьНУ = 0;
	КонецЕсли;

КонецПроцедуры // ТоварыДокументОприходованияПриИзменении

&НаКлиенте
Процедура ТоварыДокументОприходованияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	ПараметрыОбъекта = Новый Структура;
	ПараметрыОбъекта.Вставить("КонецПериода",   Объект.Дата);
	ПараметрыОбъекта.Вставить("Организация",    Объект.Организация);
	ПараметрыОбъекта.Вставить("Номенклатура",   ТекущиеДанные.Номенклатура);
	ПараметрыОбъекта.Вставить("СчетУчета",      ТекущиеДанные.СчетУчетаБУ);
	ПараметрыОбъекта.Вставить("Склад",          Объект.Склад);
	ПараметрыОбъекта.Вставить("ТипыДокументов", "Метаданные.Документы.СписаниеТоваров.ТабличныеЧасти.Товары.Реквизиты.ДокументОприходования.Тип");
	
	ПараметрыФормы = Новый Структура("ПараметрыОбъекта", ПараметрыОбъекта);
	ОткрытьФорму("Документ.Партия.ФормаВыбора", ПараметрыФормы, Элемент);

КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиСобытийТаблицыФормыВозвратнаяТара

&НаКлиенте
Процедура ВозвратнаяТараНоменклатураПриИзменении(Элемент)

	ТекущиеДанные = Элементы.ВозвратнаяТара.ТекущиеДанные;
	
	ДанныеСтрокиТаблицы = Новый Структура(
		"Номенклатура, Количество, СчетУчетаБУ, НалоговоеНазначение");
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, ТекущиеДанные);
	
	ДанныеОбъекта	= Новый Структура(
		"Дата, Организация, Склад");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
	ВозвратнаяТараНоменклатураПриИзмененииНаСервере(ДанныеСтрокиТаблицы, ДанныеОбъекта);
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтрокиТаблицы);

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ВозвратнаяТараНоменклатураПриИзмененииНаСервере(СтрокаТабличнойЧасти, Знач ДанныеОбъекта)

	СведенияОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОНоменклатуре(
		СтрокаТабличнойЧасти.Номенклатура, ДанныеОбъекта);
	Если СведенияОНоменклатуре = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Документы.СписаниеТоваров.ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(
		ДанныеОбъекта, СтрокаТабличнойЧасти, "ВозвратнаяТара", СведенияОНоменклатуре);

КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиСобытийТаблицыФормыБланкиСтрогогоУчета

&НаКлиенте
Процедура БланкиСтрогогоУчетаНоменклатураПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.БланкиСтрогогоУчета.ТекущиеДанные;

	ДанныеСтрокиТаблицы = Новый Структура(
		"Номенклатура, ЕдиницаИзмерения, Коэффициент, Количество,
		|СчетУчетаБУ, НалоговоеНазначение,  
		|СчетУчетаЗабалансовыйБУ");
	
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, ТекущиеДанные);
	
	ДанныеОбъекта = Новый Структура(
		"Дата, Организация, Склад");
	
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
	ЗаполнитьПараметрыОбъектаДляЗаполненияДобавленныхКолонок(ЭтаФорма, ДанныеОбъекта);
		
	БланкиСтрогогоУчетаНоменклатураПриИзмененииНаСервере(
		ДанныеСтрокиТаблицы, ДанныеОбъекта);
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтрокиТаблицы);
	
КонецПроцедуры // БланкиСтрогогоУчетаНоменклатураПриИзменении

&НаСервереБезКонтекста
Процедура БланкиСтрогогоУчетаНоменклатураПриИзмененииНаСервере(СтрокаТабличнойЧасти, Знач ДанныеОбъекта)
	
	СведенияОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОНоменклатуре(
		СтрокаТабличнойЧасти.Номенклатура, ДанныеОбъекта);
		
	Если СведенияОНоменклатуре = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Документы.СписаниеТоваров.ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(
		ДанныеОбъекта, СтрокаТабличнойЧасти, "БланкиСтрогогоУчета", СведенияОНоменклатуре);
	
	СтрокаТабличнойЧасти.ЕдиницаИзмерения		= СведенияОНоменклатуре.БазоваяЕдиницаИзмерения;
	СтрокаТабличнойЧасти.Коэффициент			= СведенияОНоменклатуре.Коэффициент;
	
КонецПроцедуры // БланкиСтрогогоУчетаНоменклатураПриИзмененииНаСервере

&НаКлиенте
Процедура БланкиСтрогогоУчетаЕдиницаИзмеренияПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.БланкиСтрогогоУчета.ТекущиеДанные;
	
	ДанныеСтрокиТаблицы = Новый Структура(
		"Номенклатура, ЕдиницаИзмерения, Коэффициент, Количество,
		|СчетУчетаЗабалансовыйБУ");
	
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, ТекущиеДанные);
	
	БланкиСтрогогоУчетаЕдиницаИзмеренияПриИзмененииНаСервере(ДанныеСтрокиТаблицы);
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтрокиТаблицы);
	
КонецПроцедуры // БланкиСтрогогоУчетаЕдиницаИзмеренияПриИзменении

&НаСервереБезКонтекста
Процедура БланкиСтрогогоУчетаЕдиницаИзмеренияПриИзмененииНаСервере(СтрокаТабличнойЧасти)
	
	ОбработкаТабличныхЧастей.ЗаполнитьКоэффициентТабЧасти(СтрокаТабличнойЧасти);
	
КонецПроцедуры // БланкиСтрогогоУчетаЕдиницаИзмеренияПриИзмененииНаСервере

#КонецОбласти 

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗаполнитьПоИнвентаризации(Команда)

	Если НЕ ЗначениеЗаполнено(Объект.ИнвентаризацияТоваровНаСкладе) Тогда
		ИмяПоля = НСтр("ru='Инвентаризация';uk='Інвентаризація'");
		ТекстСообщения = ОбщегоНазначенияБПКлиентСервер.ПолучитьТекстСообщения(,, ИмяПоля);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "ИнвентаризацияТоваровНаСкладе", "Объект");
		Возврат;
	КонецЕсли;
	
	Если Объект.Товары.Количество() > 0 Тогда
		ТекстВопроса = НСтр("ru='Перед заполнением табличная часть будет очищена. Заполнить?';uk='Перед заповненням таблична частина буде очищена. Заповнити?'");
		ПоказатьВопрос(Новый ОписаниеОповещения("ЗаполнитьПоИнвентаризацииЗавершение", ЭтотОбъект), ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да,
			НСтр("ru='Инвентаризация товаров на складе';uk='Інвентаризація товарів на складі'"));
        Возврат;
	КонецЕсли;
	
	ЗаполнитьПоИнвентаризацииФрагмент();
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоИнвентаризацииЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Ответ = РезультатВопроса;
    Если Ответ <> КодВозвратаДиалога.Да Тогда
        Возврат;
    КонецЕсли;
    Объект.Товары.Очистить();
    
    ЗаполнитьПоИнвентаризацииФрагмент();

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоИнвентаризацииФрагмент()
    
    ЗаполнитьТоварыПоИнвентаризацииТоваровНаСервере();

КонецПроцедуры

&НаКлиенте
Процедура ПодборТовары(Команда)

	ПараметрыПодбора = ПолучитьПараметрыПодбора("Товары");
	Если ПараметрыПодбора <> Неопределено Тогда
		ОткрытьФорму("Обработка.ПодборНоменклатуры.Форма.Форма", ПараметрыПодбора,
			ЭтаФорма, УникальныйИдентификатор);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПодборВозвратнаяТара(Команда)

	ПараметрыПодбора = ПолучитьПараметрыПодбора("ВозвратнаяТара");
	Если ПараметрыПодбора <> Неопределено Тогда
		ОткрытьФорму("Обработка.ПодборНоменклатуры.Форма.Форма", ПараметрыПодбора,
			ЭтаФорма, УникальныйИдентификатор);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ИзменитьТовары(Команда)

	ПараметрыФормы = ПолучитьПараметрыОбработкиТабличнойЧастиТовары();
	
	Если ПараметрыФормы <> Неопределено Тогда
		ОткрытьФорму("Обработка.ИзменениеТаблицыТоваров.Форма.Форма", ПараметрыФормы,
			ЭтаФорма, УникальныйИдентификатор);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПодборБланки(Команда)
	
	ПараметрыПодбора = ПолучитьПараметрыПодбора("БланкиСтрогогоУчета");
	Если ПараметрыПодбора <> Неопределено Тогда
		ОткрытьФорму("Обработка.ПодборНоменклатуры.Форма.Форма", ПараметрыПодбора,
			ЭтаФорма, УникальныйИдентификатор);
	КонецЕсли;
	
КонецПроцедуры // ПодборБланки

&НаКлиенте
Процедура ВыбратьСоставКомиссии(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимВыбора", Истина);

	ПараметрыФормы.Вставить("Отбор", Новый Структура("Организация", Объект.Организация));
	ОткрытьФорму("РегистрСведений.СоставКомиссий.Форма.ФормаВыбора", ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры // ВыбратьСоставКомиссии

&НаКлиенте
Процедура СкопироватьСтроки(Команда)
	
	ИмяТаблицы = ПолучитьИмяТекущейТабличнойЧасти();
	Если ПустаяСтрока(ИмяТаблицы) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	КоличествоСтрок = Элементы[ИмяТаблицы].ВыделенныеСтроки.Количество();
	Если КоличествоСтрок = 0 Тогда
		
		Возврат;
		
	КонецЕсли;
	СкопироватьСтрокиНаСервере(ИмяТаблицы);
	ОбработкаТабличныхЧастейКлиент.ОповеститьОКопированииСтрокВБуферОбмена(ЭтотОбъект, КоличествоСтрок);
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьСтроки(Команда)
	
	ИмяТаблицы = ПолучитьИмяТекущейТабличнойЧасти();
	Если ПустаяСтрока(ИмяТаблицы) Тогда
		
		Возврат;
		
	КонецЕсли;
	КоличествоСтрок = ВставитьСтрокиНаСервере(ИмяТаблицы);
	ОбработкаТабличныхЧастейКлиент.ОповеститьОВставкеСтрокИзБуфераОбмена(ЭтотОбъект, КоличествоСтрок);
	
КонецПроцедуры

#КонецОбласти 

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ПодготовитьФормуНаСервере()

	УстановитьФункциональныеОпцииФормы();

	ТекущаяДатаДокумента	= Объект.Дата;
	
	ВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();

	ПоказыватьВДокументахСчетаУчета = Истина;
	
	РазделениеПоСтавкамВРознице	= БухгалтерскийУчетВызовСервераПовтИсп.ИспользуетсяРазделениеПоСтавкамНДСВНТТ();
	
	СкладОбработатьИзменение();
	
	УстановитьЗаголовокФормы();

	УправлениеФормой(ЭтаФорма);

	УстановитьСостояниеДокумента();
	
	// Проверка буфера обмена на наличие скопированных строк
	УстановитьДоступностьКомандыВставки(ЭтотОбъект, Не ОбщегоНазначения.ПустойБуферОбмена());
	
КонецПроцедуры // ПодготовитьФормуНаСервере

&НаСервере
Процедура УстановитьФункциональныеОпцииФормы()

	ОбщегоНазначенияБПКлиентСервер.УстановитьПараметрыФункциональныхОпцийФормыДокумента(ЭтаФорма);
	
	УчетВПродажныхЦенах	= (УчетнаяПолитика.СпособОценкиТоваровВРознице(Объект.Организация, Объект.Дата)
		= Перечисления.СпособыОценкиТоваровВРознице.ПоПродажнойСтоимости);
	
	ПлательщикНДС               = УчетнаяПолитика.ПлательщикНДС(Объект.Организация, Объект.Дата);
	ПлательщикНалогаНаПрибыльДо2015 = УчетнаяПолитика.ПлательщикНалогаНаПрибыльДо2015(Объект.Организация, Объект.Дата);
	ПлательщикЕН                = УчетнаяПолитика.ПлательщикЕдиногоНалога(Объект.Организация, Объект.Дата);
	
	ТипСклада = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Склад, "ТипСклада");
	Если ТипСклада <> Перечисления.ТипыСкладов.ОптовыйСклад
		И УчетВПродажныхЦенах Тогда
		РассчитыватьСуммаВРознице = Истина;
	Иначе
		РассчитыватьСуммаВРознице = Ложь;
	КонецЕсли;

	НТТ = (ТипСклада = Перечисления.ТипыСкладов.НеавтоматизированнаяТорговаяТочка);
	
	СпособОценкиМПЗ	= УчетнаяПолитика.СпособОценкиМПЗ(Объект.Организация, Объект.Дата);
	СпособОценкиМПЗПоСредней	= (СпособОценкиМПЗ = Перечисления.СпособыОценки.ПоСредней);

КонецПроцедуры // УстановитьФункциональныеОпцииФормы

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)

	Элементы     = Форма.Элементы;
	ОбъектФормы  = Форма.Объект;
	
	ЭтоОборудование = (ОбъектФормы.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеТоваров.Оборудование"));
	
	// Доступность взаимосвязанных полей
	Элементы.ИнвентаризацияТоваровНаСкладе.Доступность = ЗначениеЗаполнено(ОбъектФормы.Организация) 
		И ЗначениеЗаполнено(ОбъектФормы.Склад);
		
	// видимость шапки и страниц формы
	Элементы.ГруппаСчетаУчета.Видимость               = Форма.ПоказыватьВДокументахСчетаУчета;
	
	Если ОбъектФормы.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеТоваров.БланкиСтрогогоУчета") Тогда
		Элементы.ГруппаБланкиСтрогогоУчета.Видимость = Истина;
		Элементы.ГруппаТовары.Видимость              = Ложь;
		Элементы.ГруппаВозвратнаяТара.Видимость      = Ложь;
	Иначе
		Элементы.ГруппаБланкиСтрогогоУчета.Видимость = Ложь;
		Элементы.ГруппаТовары.Видимость              = Истина;
		Элементы.ГруппаВозвратнаяТара.Видимость      = Истина;
	КонецЕсли;
	
	Элементы.ГруппаИтоги.Видимость = Форма.НТТ;
	
	УстановитьВидимостьНалоговогоНазначенияДоходовИЗатрат(Форма);
	
	НастроитьСубконтоПриПодготовкеФормыНаСервере(Форма, "СчетДт");
	
	// видимость Товары
	Элементы.ТоварыСчетУчетаБУ.Видимость         = Форма.ПоказыватьВДокументахСчетаУчета И (НЕ Форма.РассчитыватьСуммаВРознице);
	Элементы.ТоварыНалоговоеНазначение.Видимость = Форма.ПоказыватьВДокументахСчетаУчета И Форма.ПлательщикНДС;
	Элементы.ТоварыСебестоимостьНУ.Видимость     = Форма.ПлательщикНалогаНаПрибыльДо2015;
	
	Элементы.ТоварыЦена.Видимость 		       = Форма.НТТ;
	Элементы.ТоварыСумма.Видимость 	           = Форма.НТТ;
	Элементы.ТоварыСтавкаНДСВРознице.Видимость = Форма.НТТ И Форма.РазделениеПоСтавкамВРознице;
	
	Если Форма.СпособОценкиМПЗПоСредней Тогда
		Элементы.ТоварыДокументОприходования.Видимость = Ложь;
	Иначе
		Элементы.ТоварыДокументОприходования.Видимость = Истина;
	КонецЕсли; 
	
	// видимость ВозвратнаяТара
	Элементы.ВозвратнаяТараСчетУчета.Видимость           = Форма.ПоказыватьВДокументахСчетаУчета;
	Элементы.ВозвратнаяТараНалоговоеНазначение.Видимость = Форма.ПоказыватьВДокументахСчетаУчета И Форма.ПлательщикНДС;
	
	// видимость БланкиСтрогогоУчета
	Элементы.БланкиСтрогогоУчетаНалоговоеНазначение.Видимость = Форма.ПоказыватьВДокументахСчетаУчета И Форма.ПлательщикНДС;
	
	// изменение надписей, заголовков
	Элементы.ГруппаТовары.Заголовок = ?(ЭтоОборудование, 
										 НСтр("ru='Оборудование';uk='Устаткування'"), 
										 НСтр("ru='Товары';uk='Товари'")
									   );
									   
	ПараметрыВыбора = Новый Массив;
	ПараметрыВыбора.Добавить(Новый ПараметрВыбора("Отбор.Услуга", Ложь)); 
	ПараметрыВыбора.Добавить(Новый ПараметрВыбора("Отбор.БланкСтрогогоУчета", Ложь)); 
	ПараметрыВыбора.Добавить(Новый ПараметрВыбора("Заголовок", Элементы.ГруппаТовары.Заголовок)); 
	Элементы.ТоварыНоменклатура.ПараметрыВыбора	= Новый ФиксированныйМассив(ПараметрыВыбора);
	
	// ИНАГРО++
	Элементы.ИНАГРО_ВТабличнойЧасти.Видимость 		    = ОбъектФормы.ИНАГРО_УказатьОС;
	Элементы.ИНАГРО_ОсновноеСредство.Видимость 		    = ОбъектФормы.ИНАГРО_УказатьОС И (НЕ ОбъектФормы.ИНАГРО_ВТабличнойЧасти);
	Элементы.ТоварыИНАГРО_ОсновноеСредство.Видимость = ОбъектФормы.ИНАГРО_УказатьОС И ОбъектФормы.ИНАГРО_ВТабличнойЧасти;
	// ИНАГРО--
	
КонецПроцедуры // УправлениеФормой

&НаСервере
Процедура УправлениеФормойНаСервере() Экспорт
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры // УправлениеФормойНаСервере

&НаСервере
Процедура УстановитьПараметрыВыбораВидОперации()
	
	МассивВидовОпераций = Документы.СписаниеТоваров.ПолучитьФиксированныйМассивВидовОпераций();
	
	ПараметрМассивВидовОпераций = Новый ПараметрВыбора("Отбор.Ссылка", МассивВидовОпераций);
	
	НовыйМассив = Новый Массив();
	НовыйМассив.Добавить(ПараметрМассивВидовОпераций);
	НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);
	
	Элементы.ВидОперации.ПараметрыВыбора = НовыеПараметры;
	
КонецПроцедуры // УстановитьПараметрыВыбораВидОперации

&НаСервере
Процедура УстановитьЭлементыФормыПоВидуОперации()

	// При создании формы сразу устанавливаем свойства элементов,
	// которые зависят от вида операции и которые в дальнейшем менять не требуется.
	
		
	Элементы.ГруппаБланкиСтрогогоУчета.Видимость =
		Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеТоваров.БланкиСтрогогоУчета");
	
КонецПроцедуры // УстановитьЭлементыФормыПоВидуОперации

&НаСервере
Процедура УстановитьЗаголовокФормы() Экспорт
	
	ОбъектФормы = ЭтаФорма.Объект;

	ТекстЗаголовка = НСтр("ru='Списание товаров';uk='Списання товарів'");
	
	Если ЗначениеЗаполнено(ОбъектФормы.Ссылка) Тогда
		ТекстЗаголовка = ТекстЗаголовка + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru=' %1 от %2';uk=' %1 від %2'"), ОбъектФормы.Номер, ОбъектФормы.Дата);
	Иначе
		ТекстЗаголовка = ТекстЗаголовка + НСтр("ru=' (создание)';uk=' (створення)'");
	КонецЕсли;
	
	ЭтаФорма.Заголовок = ТекстЗаголовка + " (" + Строка(ОбъектФормы.ВидОперации) + ")";

КонецПроцедуры // УстановитьЗаголовокФормы

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьПараметрыОбъектаДляЗаполненияДобавленныхКолонок(Знач Форма, ПараметрыОбъекта)

	ОбъектФормы = Форма.Объект;
	
	Если ТипЗнч(ПараметрыОбъекта) <> Тип("Структура") Тогда
		ПараметрыОбъекта = Новый Структура;
	КонецЕсли;
	
	ПараметрыОбъекта.Вставить("ПлательщикНДС", Форма.ПлательщикНДС);
	ПараметрыОбъекта.Вставить("Дата", 		   ОбъектФормы.Дата);
	
КонецПроцедуры // ЗаполнитьПараметрыОбъектаДляЗаполненияДобавленныхКолонок

&НаСервере
Процедура ЗаполнитьДобавленныеКолонкиТаблиц(ИмяТаблицы = "") Экспорт

	ПараметрыОбъекта = Неопределено;
	ЗаполнитьПараметрыОбъектаДляЗаполненияДобавленныхКолонок(ЭтаФорма, ПараметрыОбъекта);

	Если ПустаяСтрока(ИмяТаблицы) ИЛИ ИмяТаблицы = "Товары" Тогда
		Для Каждого СтрокаТаблицы Из Объект.Товары Цикл
			ЗаполнитьДобавленныеКолонкиСтрокиТаблицыТовары(СтрокаТаблицы, ПараметрыОбъекта);
		КонецЦикла;
	КонецЕслИ;
	
КонецПроцедуры // ЗаполнитьДобавленныеКолонкиТаблиц

&НаСервереБезКонтекста
Процедура ЗаполнитьДобавленныеКолонкиСтрокиТаблицыТовары(СтрокаТаблицы, Знач ПараметрыОбъекта)
	
	СтрокаТаблицы.Всего                 = СтрокаТаблицы.Сумма;
	СтрокаТаблицы.СчетУчетаЗабалансовый = ЗначениеЗаполнено(СтрокаТаблицы.СчетУчетаБУ)
		И БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(СтрокаТаблицы.СчетУчетаБУ).Забалансовый;
	
КонецПроцедуры // ЗаполнитьДобавленныеКолонкиСтрокиТаблицыТовары

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьИтоги(Форма)

	ОбъектФормы = Форма.Объект;

	Если ОбъектФормы.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеТоваров.ТоварыПродукция") Тогда
		МассивТабличныхЧастейДляРасчетаИтогов = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок("Товары", ",");
	ИначеЕсли ОбъектФормы.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеТоваров.БланкиСтрогогоУчета") Тогда
		МассивТабличныхЧастейДляРасчетаИтогов = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок("БланкиСтрогогоУчета", ",");
	ИначеЕсли ОбъектФормы.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеТоваров.Оборудование") Тогда
		МассивТабличныхЧастейДляРасчетаИтогов = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок("Товары", ",");
	Иначе
		МассивТабличныхЧастейДляРасчетаИтогов = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок("Товары,БланкиСтрогогоУчета", ",");
	КонецЕсли;

	СуммаИтогов    = 0;

	Для Каждого ТекущаяТабличнаяЧасть Из МассивТабличныхЧастейДляРасчетаИтогов Цикл
		СуммаИтогов    = СуммаИтогов    + ОбъектФормы[ТекущаяТабличнаяЧасть].Итог("Всего");
	КонецЦикла;

	Форма.ИтогиВсего    = СуммаИтогов;

	ЕстьМатериальныеЦенности = ОбъектФормы.Товары.Количество() > 0 ИЛИ ОбъектФормы.ВозвратнаяТара.Количество() > 0 ИЛИ ОбъектФормы.БланкиСтрогогоУчета.Количество() > 0;
	Форма.ОтметкаНезаполненногоСклад = ЕстьМатериальныеЦенности;
	
	Форма.ЕстьСтрокиВТабличныхЧастях = ЕстьМатериальныеЦенности;

КонецПроцедуры // ОбновитьИтоги

&НаСервере
Процедура ОбновитьИтогиНаСервере() Экспорт

	ОбновитьИтоги(ЭтаФорма);

КонецПроцедуры // ОбновитьИтогиНаСервере

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьВидимостьНалоговогоНазначенияДоходовИЗатрат(Форма)
	
	ОбъектФормы = Форма.Объект;
	
	Если (НЕ ЗначениеЗаполнено(ОбъектФормы.СчетДт)) 
			ИЛИ (НЕ БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(ОбъектФормы.СчетДт).НалоговыйУчет) 
			ИЛИ (НЕ Форма.ПлательщикНалогаНаПрибыльДо2015) Тогда
		Форма.Элементы.НалоговоеНазначениеДоходовИЗатрат.Видимость = Ложь;
		Форма.Элементы.ДекорацияЗаголовокНалоговоеНазначениеДоходовИЗатрат.Видимость = Ложь;
		Форма.Элементы.НадписьИнформацияНалоговоеНазначениеДоходовИЗатрат.Видимость = Ложь;
	Иначе
		Форма.Элементы.НалоговоеНазначениеДоходовИЗатрат.Видимость = Истина;		
		Форма.Элементы.ДекорацияЗаголовокНалоговоеНазначениеДоходовИЗатрат.Видимость = Истина;
		Форма.Элементы.НадписьИнформацияНалоговоеНазначениеДоходовИЗатрат.Видимость = Истина;		
	КонецЕсли;
	
	Если Форма.Элементы.НалоговоеНазначениеДоходовИЗатрат.Видимость Тогда
		ХарактерЗатрат = УправлениеПроизводствомВызовСервера.ПолучитьХарактерЗатратПоСчетуЗатрат(ОбъектФормы.СчетДт,,ОбъектФормы.Дата); 
		Форма.Элементы.НалоговоеНазначениеДоходовИЗатрат.Доступность = НЕ (ХарактерЗатрат = "Производство" ИЛИ ХарактерЗатрат = "Строительство" ИЛИ ХарактерЗатрат = "ТЗР" ИЛИ ХарактерЗатрат = "РБП" ИЛИ ХарактерЗатрат = "ОПЗ");
	КонецЕсли;	
	
	Если (Не Форма.Элементы.НалоговоеНазначениеДоходовИЗатрат.Видимость) ИЛИ (Не Форма.Элементы.НалоговоеНазначениеДоходовИЗатрат.Доступность) Тогда
		Если ЗначениеЗаполнено(ОбъектФормы.НалоговоеНазначениеДоходовИЗатрат) Тогда
			ОбъектФормы.НалоговоеНазначениеДоходовИЗатрат = Неопределено;
		КонецЕсли; 
	КонецЕсли; 
	
	Если НЕ Форма.Элементы.НалоговоеНазначениеДоходовИЗатрат.Доступность Тогда
		ХарактерЗатрат = Неопределено;
		НалоговоеНазначениеПроводки = Неопределено;
		НалоговоеНазначениеНДС = НСтр("ru='Из табличной части';uk='З табличної частини'");
		СтруктураСубконто = Новый Структура("Субконто1, Субконто2, Субконто3", 
											ОбъектФормы.СубконтоДт1, ОбъектФормы.СубконтоДт2, ОбъектФормы.СубконтоДт3);
											
		НалоговыйУчет.ОпределениеАналитикиНалоговогоУчетаВПроводкахДляЗатрат(
							СтруктураСубконто, 
							ОбъектФормы.СчетДт, 
							ХарактерЗатрат, 
							НалоговоеНазначениеПроводки,
							,
							НалоговоеНазначениеНДС,
							,
							,
							ОбъектФормы.Дата
							,
							,
							Форма.ПлательщикНДС
				      );
															
		Форма.Элементы.НадписьИнформацияНалоговоеНазначениеДоходовИЗатрат.Заголовок = "<"+Строка(НалоговоеНазначениеПроводки)+">";
		
	Иначе 
		Форма.Элементы.НадписьИнформацияНалоговоеНазначениеДоходовИЗатрат.Заголовок = "";
	КонецЕсли;
	
	
КонецПроцедуры // УстановитьВидимостьНалоговогоНазначенияДоходовИЗатрат

&НаСервере
Процедура СкладОбработатьИзменение()

	ТипСклада = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Склад, "ТипСклада");

КонецПроцедуры // СкладОбработатьИзменение

&НаСервере
Процедура ЗаполнитьСчетаУчетаВТабличнойЧастиНаСервере(ИмяТабличнойЧасти = "")

	Если ПустаяСтрока(ИмяТабличнойЧасти) ИЛИ ИмяТабличнойЧасти = "Товары" Тогда
		Документы.СписаниеТоваров.ЗаполнитьСчетаУчетаВТабличнойЧасти(Объект, "Товары");
	КонецЕсли;
	
	Если ПустаяСтрока(ИмяТабличнойЧасти) ИЛИ ИмяТабличнойЧасти = "ВозвратнаяТара" Тогда
		Документы.СписаниеТоваров.ЗаполнитьСчетаУчетаВТабличнойЧасти(Объект, "ВозвратнаяТара");
	КонецЕсли;
	
	Если ПустаяСтрока(ИмяТабличнойЧасти) ИЛИ ИмяТабличнойЧасти = "БланкиСтрогогоУчета" Тогда
		Документы.СписаниеТоваров.ЗаполнитьСчетаУчетаВТабличнойЧасти(Объект, "БланкиСтрогогоУчета");
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТоварыПоИнвентаризацииТоваровНаСервере()

	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	ДокументОбъект.ЗаполнитьТоварыПоИнвентаризацииТоваров(Объект.ИнвентаризацияТоваровНаСкладе);
	ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");

КонецПроцедуры

&НаКлиенте
Функция ПолучитьПараметрыПодбора(ИмяТаблицы)

	ДатаРасчетов		= ?(НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДата()), Неопределено, Объект.Дата);
	
	ЗаголовокПодбора	= НСтр("ru='Подбор номенклатуры в %1 (%2)';uk='Підбір номенклатури %1 (%2)'");
	Если ИмяТаблицы = "Товары" Тогда
		ПредставлениеТаблицы = НСтр("ru='Товары';uk='Товари'");
	ИначеЕсли ИмяТаблицы = "ВозвратнаяТара" Тогда
		ПредставлениеТаблицы = НСтр("ru='Возвратная тара';uk='Зворотна тара'");
	ИначеЕсли ИмяТаблицы = "БланкиСтрогогоУчета" Тогда
		ПредставлениеТаблицы = НСтр("ru='Бланки строгого учета';uk='Бланки суворого обліку'");	
	КонецЕсли;
	ЗаголовокПодбора = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ЗаголовокПодбора, Объект.Ссылка, ПредставлениеТаблицы);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ДатаРасчетов", ДатаРасчетов);
	ПараметрыФормы.Вставить("Валюта"      , ВалютаРегламентированногоУчета);
	ПараметрыФормы.Вставить("Организация" , Объект.Организация);
	ПараметрыФормы.Вставить("Склад"       , Объект.Склад);
	ПараметрыФормы.Вставить("Заголовок"   , ЗаголовокПодбора);
	ПараметрыФормы.Вставить("ВидПодбора"  , ПолучитьВидПодбора(ИмяТаблицы));
	ПараметрыФормы.Вставить("ИмяТаблицы"  , ИмяТаблицы);
	ПараметрыФормы.Вставить("Услуги"      , ИмяТаблицы = "Услуги");
	ПараметрыФормы.Вставить("ПоказыватьОстатки"  , Истина);
	ПараметрыФормы.Вставить("ПоказыватьСчетУчета", Истина);
	ПараметрыФормы.Вставить("ЕстьКоличество", Истина);
	
	Возврат ПараметрыФормы;

КонецФункции

&НаКлиенте
Функция ПолучитьВидПодбора(ИмяТаблицы)

	ВидПодбора = "";

	Если НТТ Тогда
		
		ВидПодбора = "НТТ";
		
	КонецЕсли;

	Возврат ВидПодбора;

КонецФункции

&НаСервере
Процедура ОбработкаВыбораПодборВставкаИзБуфераНаСервере(ВыбранноеЗначение, ИмяТаблицы)

	ЭтоВставкаИзБуфера = ВыбранноеЗначение.Свойство("ЭтоВставкаИзБуфера");
	СписокСвойств = Неопределено;
	Если ЭтоВставкаИзБуфера Тогда
		
		ТаблицаТоваров = ВыбранноеЗначение.Данные;
		СписокСвойств = ВыбранноеЗначение.СписокСвойств;
		
	Иначе
		
		ТаблицаТоваров = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресПодобраннойНоменклатурыВХранилище);
		
	КонецЕсли;
	
	ДанныеОбъекта = Новый Структура("Дата, ВидОперации, Организация, Склад");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
	СоответствиеСведенийОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОСпискеНоменклатуры(
		ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаТоваров, "Номенклатура", Истина), ДанныеОбъекта);
	
	КоличествоДобавленныхСтрок = 0;
	
	Для каждого СтрокаТовара Из ТаблицаТоваров Цикл
		
		СтрокаТабличнойЧасти = Неопределено;
		Если Не ЭтоВставкаИзБуфера Тогда
		
			СтруктураОтбора = Новый Структура("Номенклатура", СтрокаТовара.Номенклатура);
			Если ИмяТаблицы = "Товары" Тогда
				СтруктураОтбора.Вставить("Цена",СтрокаТовара.Цена);
				СтруктураОтбора.Вставить("ЕдиницаИзмерения",СтрокаТовара.ЕдиницаИзмерения);
			ИначеЕсли ИмяТаблицы = "БланкиСтрогогоУчета" Тогда
				СтруктураОтбора.Вставить("ЕдиницаИзмерения",СтрокаТовара.ЕдиницаИзмерения);
			КонецЕсли; 
			СтрокаТабличнойЧасти = НайтиСтрокуТабличнойЧасти(ИмяТаблицы, СтруктураОтбора);
			
		КонецЕсли;
		
		Если СтрокаТабличнойЧасти <> Неопределено Тогда
			// Нашли - увеличиваем количество.
			СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + СтрокаТовара.Количество;
			Если ИмяТаблицы = "Товары" Тогда
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);	
			КонецЕсли;
			
		Иначе
			
			СведенияОНоменклатуре = СоответствиеСведенийОНоменклатуре.Получить(СтрокаТовара.Номенклатура);
			Если ЭтоВставкаИзБуфера
				И СведенияОНоменклатуре <> Неопределено
				И ЗначениеЗаполнено(СведенияОНоменклатуре.Услуга)
				И СведенияОНоменклатуре.Услуга Тогда
				
				Продолжить;
				
			КонецЕсли;
			СтрокаТабличнойЧасти = Объект[ИмяТаблицы].Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтрокаТовара, СписокСвойств);
			КоличествоДобавленныхСтрок = КоличествоДобавленныхСтрок + 1;
			
			Если СведенияОНоменклатуре = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Если ИмяТаблицы = "Товары" ИЛИ ИмяТаблицы = "БланкиСтрогогоУчета" Тогда	
				
				Документы.СписаниеТоваров.ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(
					ДанныеОбъекта, СтрокаТабличнойЧасти, ИмяТаблицы, СведенияОНоменклатуре);
					
				Если ЭтоВставкаИзБуфера 
					И Найти(СписокСвойств, "СчетУчетаБУ") <> 0 
					И ЗначениеЗаполнено(СтрокаТовара["СчетУчетаБУ"]) Тогда
					СтрокаТабличнойЧасти.СчетУчетаБУ = СтрокаТовара.СчетУчетаБУ;
				КонецЕсли;
					
				Если ИмяТаблицы = "Товары" Тогда
					Если РассчитыватьСуммаВРознице Тогда
						СтрокаТабличнойЧасти.Цена = СведенияОНоменклатуре.ЦенаВРознице;
						Если РазделениеПоСтавкамВРознице Тогда
							СтрокаТабличнойЧасти.СтавкаНДСВРознице = СведенияОНоменклатуре.СтавкаНДСВРознице;
						КонецЕсли; 
					КонецЕсли;
					ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);	
				КонецЕсли;
				
			ИначеЕсли ИмяТаблицы = "ВозвратнаяТара" Тогда
				
				Документы.СписаниеТоваров.ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(
					ДанныеОбъекта, СтрокаТабличнойЧасти, ИмяТаблицы, СведенияОНоменклатуре);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ЗаполнитьДобавленныеКолонкиТаблиц(ИмяТаблицы);
	
	ОбновитьИтоги(ЭтаФорма);
	
	Если ЭтоВставкаИзБуфера Тогда
		ВыбранноеЗначение.КоличествоДобавленныхСтрок = КоличествоДобавленныхСтрок;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция НайтиСтрокуТабличнойЧасти(ИмяТабличнойЧасти, СтруктураОтбора)

	СтрокаТабличнойЧасти = Неопределено;

	МассивНайденныхСтрок = Объект[ИмяТабличнойЧасти].НайтиСтроки(СтруктураОтбора);
	Если МассивНайденныхСтрок.Количество() > 0 Тогда
		// Нашли. Вернем первую найденную строку.
		СтрокаТабличнойЧасти = МассивНайденныхСтрок[0];
	КонецЕсли;

	Возврат СтрокаТабличнойЧасти;

КонецФункции

&НаСервере
Функция ПоместитьТоварыВоВременноеХранилищеНаСервере()

	Возврат ПоместитьВоВременноеХранилище(Объект.Товары.Выгрузить(), УникальныйИдентификатор);

КонецФункции

&НаКлиенте
Функция ПолучитьПараметрыОбработкиТабличнойЧастиТовары()

	ПараметрыОбработки = Новый Структура;
	
	ПараметрыОбработки.Вставить("АдресХранилищаТовары", 		ПоместитьТоварыВоВременноеХранилищеНаСервере());
	ПараметрыОбработки.Вставить("ЗаполнятьЦеныПоПокупке", 		Ложь);
	ПараметрыОбработки.Вставить("ДокументСсылка", 				Объект.Ссылка);
	ПараметрыОбработки.Вставить("ДокументДата", 				Объект.Дата);
	ПараметрыОбработки.Вставить("ДокументОрганизация", 			Объект.Организация);
	ПараметрыОбработки.Вставить("ДокументСклад", 				Объект.Склад);
	
	Возврат ПараметрыОбработки;

КонецФункции 

&НаСервере
Процедура ОбработкаОповещенияОбработкиТабличнойЧастиТоварыНаСервере(Параметры)

	ТаблицаОбработки = ПолучитьИзВременногоХранилища(Параметры.АдресОбработаннойТабличнойЧастиТоварыВХранилище);
	
	Отбор	= Новый Структура("НомерСтрокиДокумента", 0);
	ТаблицаОбработки.Индексы.Добавить("НомерСтрокиДокумента");
	ДобавленныеСтроки	= ТаблицаОбработки.НайтиСтроки(Отбор);
	
	ДанныеОбъекта = Новый Структура("Дата, Организация, Склад");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
	СоответствиеСведенийОНоменклатуре	= БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОСпискеНоменклатуры(
		ОбщегоНазначения.ВыгрузитьКолонку(ДобавленныеСтроки, "Номенклатура", Истина), ДанныеОбъекта);
	
	
	Для Каждого СтрокаТабличнойЧасти ИЗ ДобавленныеСтроки Цикл
		
		
		СведенияОНоменклатуре = СоответствиеСведенийОНоменклатуре.Получить(СтрокаТабличнойЧасти.Номенклатура);
		Если СведенияОНоменклатуре = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если РазделениеПоСтавкамВРознице Тогда
			СтрокаТабличнойЧасти.СтавкаНДСВРознице = СведенияОНоменклатуре.СтавкаНДСВРознице;
		КонецЕсли;
		
		Документы.СписаниеТоваров.ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(
			ДанныеОбъекта, СтрокаТабличнойЧасти, "Товары", СведенияОНоменклатуре);
		
	КонецЦикла;
	
	Объект.Товары.Загрузить(ТаблицаОбработки);
	
	ЗаполнитьДобавленныеКолонкиТаблиц("Товары");
	ОбновитьИтоги(ЭтаФорма);

КонецПроцедуры // ОбработкаОповещенияОбработкиТабличнойЧастиТоварыНаСервере

// Изменение счетов учета и их субконто

&НаКлиентеНаСервереБезКонтекста
Процедура НастроитьСубконтоПриПодготовкеФормыНаСервере(Форма, ИмяСчета)
	
	ИмяПоля = ОпределитьИмяСубконтоПоИмениСчета(ИмяСчета);	
	
	УстановитьЗаголовкиИДоступностьСубконто(Форма, ИмяСчета, ИмяПоля);
	УстановитьПараметрыВыбораСубконто(Форма, ИмяСчета, ИмяПоля);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура НастроитьСубконтоПриИзмененииСчета(Форма, ИмяСчета)
	
	ИмяПоля = ОпределитьИмяСубконтоПоИмениСчета(ИмяСчета);	
	
	УстановитьЗаголовкиИДоступностьСубконто(Форма, ИмяСчета, ИмяПоля);
	УстановитьЗначенияСубконтоПриИзмененииСчета(Форма, ИмяСчета, ИмяПоля);
	УстановитьПараметрыВыбораСубконто(Форма, ИмяСчета, ИмяПоля);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура НастроитьСубконтоПриИзмененииСубконто(Форма, ИмяСчета)
	
	ИмяПоля = ОпределитьИмяСубконтоПоИмениСчета(ИмяСчета);	

	УстановитьПараметрыВыбораСубконто(Форма, ИмяСчета, ИмяПоля);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьЗаголовкиИДоступностьСубконто(Форма, ИмяСчета, ИмяПоля)

	ОбъектФормы = Форма.Объект;
	
	ПоляФормы = Новый Структура("Субконто1, Субконто2, Субконто3",
		ИмяПоля+"1",
		ИмяПоля+"2",
		ИмяПоля+"3");
		
	ЗаголовкиПолей = Новый Структура("Субконто1, Субконто2, Субконто3",
		"Заголовок"+ИмяПоля+"1",
		"Заголовок"+ИмяПоля+"2",
		"Заголовок"+ИмяПоля+"3");
		
	БухгалтерскийУчетКлиентСервер.ПриВыбореСчета(ОбъектФормы[ИмяСчета], Форма, ПоляФормы, ЗаголовкиПолей);

КонецПроцедуры // УстановитьЗаголовкиИДоступностьСубконто

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьПараметрыВыбораСубконто(Форма, ИмяСчета, ИмяПоля)

	ОбъектФормы = Форма.Объект;
	
	ПараметрыДокумента = ПолучитьСписокПараметров(Форма, ИмяПоля+"%Индекс%"); 
	БухгалтерскийУчетКлиентСервер.ИзменитьПараметрыВыбораПолейСубконто(
		Форма,
		ОбъектФормы,
		ИмяПоля+"%Индекс%",
		ИмяПоля+"%Индекс%",
		ПараметрыДокумента);

КонецПроцедуры // УстановитьПараметрыВыбораСубконто

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьЗначенияСубконтоПриИзмененииСчета(Форма, ИмяСчета, ИмяПоля)

	ОбъектФормы = Форма.Объект;
	
	ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3, Организация",
		ИмяПоля+"1",
		ИмяПоля+"2",
		ИмяПоля+"3",
		ОбъектФормы.Организация);
		
	БухгалтерскийУчетКлиентСервер.ПриИзмененииСчета(ОбъектФормы[ИмяСчета], ОбъектФормы, ПоляОбъекта);

КонецПроцедуры // УстановитьЗначенияСубконтоПриИзмененииСчета

&НаКлиентеНаСервереБезКонтекста
Функция ОпределитьИмяСубконтоПоИмениСчета(ИмяСчета)
	
	Если ИмяСчета = "СчетДт" Тогда
		Возврат "СубконтоДт"
	КонецЕсли;
	
	ВызватьИсключение "Неверное обращение к функции ОпределитьИмяСубконтоПоИмениСчета";
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьСписокПараметров(Форма, ШаблонИмяПоляОбъекта)
	
	ОбъектФормы = Форма.Объект;
	
	СписокПараметров = Новый Структура;
	Для Индекс = 1 По 3 Цикл
		ИмяПоля = СтрЗаменить(ШаблонИмяПоляОбъекта, "%Индекс%", Индекс);
		Если ТипЗнч(ОбъектФормы[ИмяПоля]) = Тип("СправочникСсылка.Контрагенты") Тогда
			СписокПараметров.Вставить("Контрагент", ОбъектФормы[ИмяПоля]);
		ИначеЕсли ТипЗнч(ОбъектФормы[ИмяПоля]) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
			СписокПараметров.Вставить("ДоговорКонтрагента", ОбъектФормы[ИмяПоля]);
		ИначеЕсли ТипЗнч(ОбъектФормы[ИмяПоля]) = Тип("СправочникСсылка.Склады") Тогда
			СписокПараметров.Вставить("Склад", ОбъектФормы[ИмяПоля]);
		КонецЕсли;
	КонецЦикла;
	
	СписокПараметров.Вставить("Организация", ОбъектФормы.Организация);

	Возврат СписокПараметров;

КонецФункции // ПолучитьСписокПараметров

&НаСервере
Процедура УстановитьСостояниеДокумента()
	СостояниеДокумента = ОбщегоНазначенияБП.СостояниеДокумента(Объект);
КонецПроцедуры

#Область КопированиеВставкаСтрокЧерезБуферОбмена

&НаСервере
Процедура СкопироватьСтрокиНаСервере(ИмяТаблицы)
	
	ОбщегоНазначения.СкопироватьСтрокиВБуферОбмена(Объект[ИмяТаблицы], 
		Элементы[ИмяТаблицы].ВыделенныеСтроки, Объект.Ссылка.Метаданные().Имя);

КонецПроцедуры

&НаСервере
Функция ВставитьСтрокиНаСервере(ИмяТаблицы)
	
	ПараметрыВставки = ОбработкаТабличныхЧастей.ПолучитьПараметрыВставкиДанныхИзБуфераОбмена(Объект.Ссылка, ИмяТаблицы);
	ОпределитьСписокСвойствДляВставкиИзБуфера(ПараметрыВставки);
	ОбработкаВыбораПодборВставкаИзБуфераНаСервере(ПараметрыВставки, ПараметрыВставки.ИмяТаблицы);
	
	Возврат ПараметрыВставки.КоличествоДобавленныхСтрок;
	
КонецФункции

&НаКлиенте
Функция ПолучитьИмяТекущейТабличнойЧасти()
	
	Возврат "Товары";
	
КонецФункции

&НаСервере
Процедура ОпределитьСписокСвойствДляВставкиИзБуфера(ПараметрыВставки)

	СписокСвойств = Новый Массив;
	СписокСвойств.Добавить("Номенклатура");
	СписокСвойств.Добавить("ЕдиницаИзмерения");
	СписокСвойств.Добавить("Коэффициент");
	СписокСвойств.Добавить("Количество");
	СписокСвойств.Добавить("Цена");
	СписокСвойств.Добавить("СтавкаНДСВРознице");
	Если ПараметрыВставки.ПоказыватьВДокументахСчетаУчета Тогда
		СписокСвойств.Добавить("СчетУчетаБУ");
	КонецЕсли;
	
	ПараметрыВставки.СписокСвойств = ОбработкаТабличныхЧастей.ПолучитьСписокСвойствИмеющихсяВТаблицеДанных(
		ПараметрыВставки.Данные, СписокСвойств);
	
КонецПроцедуры
	
&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьКомандыВставки(Форма, Доступность)

	Доступность = Не Форма.ТолькоПросмотр И Доступность;
	Элементы = Форма.Элементы;
	Элементы.ТоварыВставитьСтроки.Доступность					 = Доступность;
	Элементы.ТоварыКонтекстноеМенюВставитьСтроки.Доступность	 = Доступность;

КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункцииБСП

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ БСП

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти