#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

Перем мВалютаРегламентированногоУчета;
Перем мУчетнаяПолитика;
Перем мИспользоватьОборотнуюНоменклатуру;
Перем мРазделятьПоСтавкамНДС;
Перем мУчетВПродажныхЦенах;

Перем ПартионныйУчетБУ;
Перем РозницаВПродажныхЦенах;

#Область ОбработчикиСобытий

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	МассивНепроверяемыхРеквизитов = Новый Массив();
	
	СтруктураШапкиДокумента		  = Новый Структура;
	
	СтруктураШапкиДокумента.Вставить("Организация",							Организация);
	СтруктураШапкиДокумента.Вставить("Дата",								Дата);
	СтруктураШапкиДокумента.Вставить("ЕстьНДС",								УчетнаяПолитика.ПлательщикНДС(Организация, Дата));
	СтруктураШапкиДокумента.Вставить("ЕстьНалогНаПрибыльДо2015",			УчетнаяПолитика.ПлательщикНалогаНаПрибыльДо2015(Организация, Дата));
	СтруктураШапкиДокумента.Вставить("ВалютаРегламентированногоУчета", 		ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета());
	СтруктураШапкиДокумента.Вставить("РозницаВПродажныхЦенах", 				(УчетнаяПолитика.СпособОценкиТоваровВРознице(Организация, Дата) = Перечисления.СпособыОценкиТоваровВРознице.ПоПродажнойСтоимости));
	СтруктураШапкиДокумента.Вставить("ТипСклада",			 				ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Склад, "ТипСклада"));
	СтруктураШапкиДокумента.Вставить("ТипЦенРозничнойТорговли", 			ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Склад, "ТипЦенРозничнойТорговли"));
	СтруктураШапкиДокумента.Вставить("ВидОперации",			 				ВидОперации);
	СтруктураШапкиДокумента.Вставить("СчетДт",			 				    СчетДт);
	СтруктураШапкиДокумента.Вставить("СчетДтНалоговыйУчет",			 		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СчетДт, "НалоговыйУчет"));
	СтруктураШапкиДокумента.Вставить("СубконтоДт1",			 				СубконтоДт1);
	СтруктураШапкиДокумента.Вставить("СубконтоДт2",			 				СубконтоДт2);
	СтруктураШапкиДокумента.Вставить("СубконтоДт3",			 				СубконтоДт3);
	СтруктураШапкиДокумента.Вставить("НалоговоеНазначениеДоходовИЗатрат",	НалоговоеНазначениеДоходовИЗатрат);
	
	СтруктураШапкиДокумента.Вставить("РазделятьПоСтавкамНДС",               БухгалтерскийУчетВызовСервераПовтИсп.ИспользуетсяРазделениеПоСтавкамНДСВНТТ());
	
	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, МассивНепроверяемыхРеквизитов);
	
	// ИНАГРО++
	Если ИНАГРО_УказатьОС И НЕ ИНАГРО_ВТабличнойЧасти Тогда
		ПроверяемыеРеквизиты.Добавить("ИНАГРО_ОсновноеСредство");
	КонецЕсли;	
	
	Если ИНАГРО_УказатьОС И ИНАГРО_ВТабличнойЧасти Тогда 
		ПроверяемыеРеквизиты.Добавить("Товары.ИНАГРО_ОсновноеСредство");
	КонецЕсли;
	// ИНАГРО--
	
	НеИспользуемыеТабличныеЧасти = Новый Массив;
	
	Если Не ВидОперации = Перечисления.ВидыОперацийОприходованиеТоваров.БланкиСтрогогоУчета Тогда
		ПроверитьЗаполнениеТабличнойЧастиТовары(СтруктураШапкиДокумента, Отказ, МассивНепроверяемыхРеквизитов);
		Если ПолучитьФункциональнуюОпцию("ИспользоватьВозвратнуюТару") Тогда
			ПроверитьЗаполнениеТабличнойЧастиВозвратнаяТара(СтруктураШапкиДокумента, Отказ, МассивНепроверяемыхРеквизитов);
		Иначе
			НеИспользуемыеТабличныеЧасти.Добавить("ВозвратнаяТара");
		КонецЕсли; 
	Иначе
		НеИспользуемыеТабличныеЧасти.Добавить("Товары");
		НеИспользуемыеТабличныеЧасти.Добавить("ВозвратнаяТара");
	КонецЕсли;	
	
	Если ВидОперации = Перечисления.ВидыОперацийОприходованиеТоваров.БланкиСтрогогоУчета И ПолучитьФункциональнуюОпцию("ИспользоватьБланкиСтрогогоУчета") Тогда
		ПроверитьЗаполнениеТабличнойЧастиБланкиСтрогогоУчета(СтруктураШапкиДокумента, Отказ, МассивНепроверяемыхРеквизитов);
	Иначе
		НеИспользуемыеТабличныеЧасти.Добавить("БланкиСтрогогоУчета");
	КонецЕсли;	
	
	ОбщегоНазначенияБП.ИсключитьИзПроверкиНеиспользуемыеТабличныеЧасти(
		ПроверяемыеРеквизиты,
		НеИспользуемыеТабличныеЧасти);
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	
КонецПроцедуры // ОбработкаПроверкиЗаполнения

Процедура ПриКопировании(ОбъектКопирования)
	
	Дата = НачалоДня(ОбщегоНазначенияБП.ПолучитьРабочуюДату());
	Ответственный = Пользователи.ТекущийПользователь();
	
КонецПроцедуры // ПриКопировании

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)

	ТипДанныхЗаполнения = ТипЗнч(ДанныеЗаполнения);
	Если ДанныеЗаполнения <> Неопределено И ТипДанныхЗаполнения <> Тип("Структура")
		И Метаданные().ВводитсяНаОсновании.Содержит(ДанныеЗаполнения.Метаданные()) Тогда
		
		ЗаполнитьПоДокументуОснованию(ДанныеЗаполнения);
		
	КонецЕсли;
	
	ЗаполнениеДокументов.Заполнить(ЭтотОбъект, ДанныеЗаполнения);
	
	Если  ТипДанныхЗаполнения = Тип("Структура")
		И ДанныеЗаполнения.Свойство("ВидОперации") Тогда
		ВидОперации = ДанныеЗаполнения.ВидОперации;
	КонецЕсли;

КонецПроцедуры // ОбработкаЗаполнения()

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)

	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ОбновитьПараметрыУчетнойПолитики();
	
	
	
	Если НЕ мУчетнаяПолитика.ЕстьНДС Тогда
		
		// организация - не плательщик НДС. Установим во всех ТЧ признак соответствующего учета НДС
		НеОБлНДСДеятельность = Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяХозДеятельность;
		
		Для Каждого СтрокаТЧ  Из Товары Цикл
		    СтрокаТЧ.НалоговоеНазначение = НеОБлНДСДеятельность;
		КонецЦикла;
		
		Для Каждого СтрокаТЧ  Из ВозвратнаяТара Цикл
		    СтрокаТЧ.НалоговоеНазначение = НеОБлНДСДеятельность;
		КонецЦикла;
		
		Для Каждого СтрокаТЧ  Из БланкиСтрогогоУчета Цикл
		    СтрокаТЧ.НалоговоеНазначение = НеОБлНДСДеятельность;
		КонецЦикла;
		
	КонецЕсли; 
	
	Если НЕ мУчетнаяПолитика.ЕстьНалогНаПрибыльДо2015 Тогда
	    НалоговоеНазначениеДоходовИЗатрат = Неопределено;
	КонецЕсли; 
	
	Если РозницаВПродажныхЦенах Тогда
		Для Каждого Строка Из Товары Цикл
			Если Склад.ТипСклада = Перечисления.ТипыСкладов.РозничныйМагазин Тогда
				Строка.СчетУчетаБУ = ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахАТТ;
			Иначе
				Строка.СчетУчетаБУ = ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахНТТ;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// Посчитать суммы документа и записать ее в соответствующий реквизит шапки для показа в журналах
	СуммаДокумента = Товары.Итог("Сумма");

КонецПроцедуры // ПередЗаписью

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	Перем Заголовок, СтруктураШапкиДокумента;
	Перем ТаблицаПоТоварам, ТаблицаПоТаре, ТаблицаПоБланкам;


	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКПроведению(ЭтотОбъект);
	Если РучнаяКорректировка Тогда
		Возврат;
	КонецЕсли;

	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначенияБПВызовСервера.ПредставлениеДокументаПриПроведении(Ссылка);
	
    ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента);
	
	// Получим данные учетной политики
	ПодготовитьПараметрыУчетнойПолитики(СтруктураШапкиДокумента, Отказ, Заголовок);


	ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоТаре, ТаблицаПоБланкам, Отказ, Заголовок);
	
	ПроверитьТабличныеЧастиПострочно(СтруктураШапкиДокумента, ТаблицаПоТоварам, Отказ);	

	// Движения по документу
	Если Не Отказ Тогда
		ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоТаре, ТаблицаПоБланкам, Отказ, Заголовок);
	КонецЕсли;
	
	Движения.Хозрасчетный.ВыполнитьДействияПередЗаписьюДвижений();
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКЗаписиДвижений(ЭтотОбъект);

КонецПроцедуры // ОбработкаПроведения()

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКОтменеПроведения(ЭтотОбъект);
	Движения.Записать();
												 
КонецПроцедуры // ОбработкаУдаленияПроведения

#КонецОбласти  

#Область Проведение

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТоварам - результат запроса по табличной части "Товары",
//  СтруктураШапкиДокумента   - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблица значений.
//
Функция ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента)

	ТаблицаТоваров = РезультатЗапросаПоТоварам.Выгрузить();

	ТаблицаТоваров.Колонки.Добавить("Регистратор");
	ТаблицаТоваров.Колонки.Добавить("Склад");
	ТаблицаТоваров.Колонки.Добавить("Организация");
	ТаблицаТоваров.Колонки.Добавить("ДоговорКонтрагента");
	
	ТаблицаТоваров.Колонки.Добавить("КорСчетСписанияБУ");
	ТаблицаТоваров.Колонки.Добавить("КорСубконтоСписанияБУ1");
	ТаблицаТоваров.Колонки.Добавить("КорСубконтоСписанияБУ2");
	ТаблицаТоваров.Колонки.Добавить("КорСубконтоСписанияБУ3");
	
	// ИНАГРО++ 
	ТаблицаТоваров.Колонки.Добавить("Субконто1");
	ТаблицаТоваров.Колонки.Добавить("Субконто2");
	ТаблицаТоваров.Колонки.Добавить("Субконто3");
	ТаблицаТоваров.ЗаполнитьЗначения(СтруктураШапкиДокумента.СубконтоДт1, 	"Субконто1");
	ТаблицаТоваров.ЗаполнитьЗначения(СтруктураШапкиДокумента.СубконтоДт2, 	"Субконто2");
	ТаблицаТоваров.ЗаполнитьЗначения(СтруктураШапкиДокумента.СубконтоДт3, 	"Субконто3");
	// ИНАГРО-- 
	
	ТаблицаТоваров.ЗаполнитьЗначения(СтруктураШапкиДокумента.СчетДт, 		"КорСчетСписанияБУ");
	ТаблицаТоваров.ЗаполнитьЗначения(СтруктураШапкиДокумента.СубконтоДт1, 	"КорСубконтоСписанияБУ1");
	ТаблицаТоваров.ЗаполнитьЗначения(СтруктураШапкиДокумента.СубконтоДт2, 	"КорСубконтоСписанияБУ2");
	ТаблицаТоваров.ЗаполнитьЗначения(СтруктураШапкиДокумента.СубконтоДт3, 	"КорСубконтоСписанияБУ3");
	
	ТаблицаТоваров.ЗаполнитьЗначения(ЭтотОбъект,            					"Регистратор");
	ТаблицаТоваров.ЗаполнитьЗначения(СтруктураШапкиДокумента.Склад,       		"Склад");
	ТаблицаТоваров.ЗаполнитьЗначения(СтруктураШапкиДокумента.Организация, 		"Организация");
	ТаблицаТоваров.ЗаполнитьЗначения(Неопределено,                        		"ДоговорКонтрагента");
	
	ТаблицаТоваров.Колонки.Добавить("НалоговоеНазначениеНовое");
	ТаблицаТоваров.Колонки.Добавить("ХарактерЗатрат");
	ТаблицаТоваров.ЗаполнитьЗначения(СтруктураШапкиДокумента.НалоговоеНазначениеДоходовИЗатрат, 	"НалоговоеНазначениеНовое");
	
	Для Каждого Строка Из ТаблицаТоваров Цикл
		
		// заполним ХарактерЗатрат, НалоговоеНазначениеНовое
		НалоговыйУчет.ОпределениеАналитикиНалоговогоУчетаВПроводкахДляЗатрат(
													Строка, 
													Строка.КорСчетСписанияБУ, 
													Строка.ХарактерЗатрат,
													Строка.НалоговоеНазначениеНовое, 
													,                                                   
													Строка.НалоговоеНазначение, 
													Строка.НалоговоеНазначениеНовое, 
													"КорСубконтоСписанияБУ",
													Дата
													,
													,
													СтруктураШапкиДокумента.ЕстьНДС
												);
		
	КонецЦикла;	
	
	Если (мУчетВПродажныхЦенах) Тогда
		Если СтруктураШапкиДокумента.ТипСклада = Перечисления.ТипыСкладов.РозничныйМагазин Тогда	
			
			ТаблицаТоваров.Колонки.Добавить("РозничнаяЦена");
			ТаблицаТоваров.Колонки.Добавить("УчетнаяЦена");
			
			// Установим параметры запроса
			ПорядокСубконто = Новый Массив();
			ПорядокСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);
			ПорядокСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады);
			
			МассивНоменклатуры = ТаблицаТоваров.ВыгрузитьКолонку("Номенклатура");
			
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("Склад",           СтруктураШапкиДокумента.Склад);
			Запрос.УстановитьПараметр("КонецПериода",    СтруктураШапкиДокумента.Ссылка.МоментВремени());
			Запрос.УстановитьПараметр("Организация",     СтруктураШапкиДокумента.Организация);
			Запрос.УстановитьПараметр("Счет",     		 ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахАТТ);
			Запрос.УстановитьПараметр("ПорядокСубконто", ПорядокСубконто);
			Запрос.УстановитьПараметр("Номенклатура", 	 МассивНоменклатуры);
		
			Запрос.УстановитьПараметр("НалоговыеНазначения", ТаблицаТоваров.ВыгрузитьКолонку("НалоговоеНазначение"));
			
			Запрос.Текст =
			"ВЫБРАТЬ
			|	Остатки.Субконто1 КАК Номенклатура,
			|	Остатки.НалоговоеНазначение КАК НалоговоеНазначение,
			|	СУММА(Остатки.СуммаОстатокДт) КАК СуммаОстаток,
			|	СУММА(Остатки.КоличествоОстатокДт) КАК КоличествоОстаток
			|ИЗ
			|	РегистрБухгалтерии.Хозрасчетный.Остатки(
			|			&КонецПериода, 
			|			Счет = &Счет, 
			|			&ПорядокСубконто, 
			|			НалоговоеНазначение В (&НалоговыеНазначения)
			|				И Организация = &Организация 
			|				И Субконто1 В (&Номенклатура) 
			|				И Субконто2 = &Склад) КАК Остатки
			|
			|ГДЕ
			|	Остатки.КоличествоОстатокДт > 0
			|
			|СГРУППИРОВАТЬ ПО
			|	Остатки.Субконто1,
			|	Остатки.НалоговоеНазначение";
			
			ТаблицаУчетныхЦен = Запрос.Выполнить().Выгрузить();
			ТаблицаУчетныхЦен.Индексы.Добавить("Номенклатура, НалоговоеНазначение");

			Для Каждого Строка из ТаблицаТоваров Цикл
				НайденныеСтроки = ТаблицаУчетныхЦен.НайтиСтроки(Новый Структура("Номенклатура, НалоговоеНазначение", Строка.Номенклатура, Строка.НалоговоеНазначение));
				Если НайденныеСтроки.Количество()> 0 Тогда
					СтрокаТаблицыЦен = НайденныеСтроки[0];
					Строка.УчетнаяЦена = Окр(?(СтрокаТаблицыЦен.КоличествоОстаток = 0, 0, СтрокаТаблицыЦен.СуммаОстаток / СтрокаТаблицыЦен.КоличествоОстаток),2,1);
				Иначе
					Строка.УчетнаяЦена = 0;
				КонецЕсли;
				Строка.РозничнаяЦена = Ценообразование.ПолучитьЦенуНоменклатуры(Строка.Номенклатура, СтруктураШапкиДокумента.ТипЦенРозничнойТорговли, 
																СтруктураШапкиДокумента.Дата, мВалютаРегламентированногоУчета, 1, 1);
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если (мУчетВПродажныхЦенах) И (СтруктураШапкиДокумента.ТипСклада = Перечисления.ТипыСкладов.РозничныйМагазин) Тогда
		ТаблицаТоваров.ЗаполнитьЗначения(ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахАТТ, "СчетУчетаБУ");
	ИначеЕсли (мУчетВПродажныхЦенах) И (СтруктураШапкиДокумента.ТипСклада = Перечисления.ТипыСкладов.НеавтоматизированнаяТорговаяТочка) Тогда
		ТаблицаТоваров.ЗаполнитьЗначения(ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахНТТ, "СчетУчетаБУ");
	КонецЕсли;
	
	Возврат ТаблицаТоваров;

КонецФункции // ПодготовитьТаблицуТоваров()

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТаре    - результат запроса по табличной части "ВозвратнаяТара",
//  СтруктураШапкиДокумента   - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблица значений.
//
Функция ПодготовитьТаблицуТары(РезультатЗапросаПоТаре, СтруктураШапкиДокумента)

	ТаблицаТары = РезультатЗапросаПоТаре.Выгрузить();

	ТаблицаТары.Колонки.Добавить("ДокументОприходования");
	ТаблицаТары.Колонки.Добавить("Регистратор");
	ТаблицаТары.Колонки.Добавить("Склад");
	ТаблицаТары.Колонки.Добавить("Организация");
	ТаблицаТары.Колонки.Добавить("ДоговорКонтрагента");
	
	ТаблицаТары.Колонки.Добавить("КорСчетСписанияБУ");
	ТаблицаТары.Колонки.Добавить("КорСубконтоСписанияБУ1");
	ТаблицаТары.Колонки.Добавить("КорСубконтоСписанияБУ2");
	ТаблицаТары.Колонки.Добавить("КорСубконтоСписанияБУ3");
	
	ТаблицаТары.ЗаполнитьЗначения(ЭтотОбъект,					            "Регистратор");
	ТаблицаТары.ЗаполнитьЗначения(СтруктураШапкиДокумента.Склад,           	"Склад");
	ТаблицаТары.ЗаполнитьЗначения(СтруктураШапкиДокумента.Организация,     	"Организация");
	
	ТаблицаТары.ЗаполнитьЗначения(СтруктураШапкиДокумента.СчетДт, 			"КорСчетСписанияБУ");
	ТаблицаТары.ЗаполнитьЗначения(СтруктураШапкиДокумента.СубконтоДт1, 		"КорСубконтоСписанияБУ1");
	ТаблицаТары.ЗаполнитьЗначения(СтруктураШапкиДокумента.СубконтоДт2, 		"КорСубконтоСписанияБУ2");
	ТаблицаТары.ЗаполнитьЗначения(СтруктураШапкиДокумента.СубконтоДт3, 		"КорСубконтоСписанияБУ3");
	
	ТаблицаТары.Колонки.Добавить("НалоговоеНазначениеНовое");
	ТаблицаТары.Колонки.Добавить("ХарактерЗатрат");
	ТаблицаТары.ЗаполнитьЗначения(СтруктураШапкиДокумента.НалоговоеНазначениеДоходовИЗатрат, 	"НалоговоеНазначениеНовое");
	
	Для Каждого Строка Из ТаблицаТары Цикл
		
		// заполним ХарактерЗатрат, НалоговоеНазначениеНовое
		НалоговыйУчет.ОпределениеАналитикиНалоговогоУчетаВПроводкахДляЗатрат(
													Строка, 
													Строка.КорСчетСписанияБУ, 
													Строка.ХарактерЗатрат,
													Строка.НалоговоеНазначениеНовое,
													,
													Строка.НалоговоеНазначение, 
													Строка.НалоговоеНазначениеНовое, 
													"КорСубконтоСписанияБУ",
													Дата,
													,
													СтруктураШапкиДокумента.ЕстьНДС
												);
		
	КонецЦикла;	
	
	Возврат ТаблицаТары;

КонецФункции // ПодготовитьТаблицуТары()

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоБланкам - результат запроса по табличной части "Товары",
//  СтруктураШапкиДокумента   - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблица значений.
//
Функция ПодготовитьТаблицуБланков(РезультатЗапросаПоБланкам, СтруктураШапкиДокумента)

	ТаблицаБланков = РезультатЗапросаПоБланкам.Выгрузить();

	ТаблицаБланков.Колонки.Добавить("ДокументОприходования");
	ТаблицаБланков.Колонки.Добавить("Регистратор");
	ТаблицаБланков.Колонки.Добавить("Склад");
	ТаблицаБланков.Колонки.Добавить("Организация");
	ТаблицаБланков.Колонки.Добавить("ДоговорКонтрагента");
	
	ТаблицаБланков.Колонки.Добавить("КорСчетСписанияБУ");
	ТаблицаБланков.Колонки.Добавить("КорСубконтоСписанияБУ1");
	ТаблицаБланков.Колонки.Добавить("КорСубконтоСписанияБУ2");
	ТаблицаБланков.Колонки.Добавить("КорСубконтоСписанияБУ3");
	ТаблицаБланков.Колонки.Добавить("СуммаНоминальная");
	ТаблицаБланков.Колонки.Добавить("КоличествоНоминальное");
	
	ТаблицаБланков.ЗаполнитьЗначения(СтруктураШапкиДокумента.СчетДт, 		"КорСчетСписанияБУ");
	ТаблицаБланков.ЗаполнитьЗначения(СтруктураШапкиДокумента.СубконтоДт1, 	"КорСубконтоСписанияБУ1");
	ТаблицаБланков.ЗаполнитьЗначения(СтруктураШапкиДокумента.СубконтоДт2, 	"КорСубконтоСписанияБУ2");
	ТаблицаБланков.ЗаполнитьЗначения(СтруктураШапкиДокумента.СубконтоДт3, 	"КорСубконтоСписанияБУ3");
	
	ТаблицаБланков.ЗаполнитьЗначения(ЭтотОбъект,								"Регистратор");
	ТаблицаБланков.ЗаполнитьЗначения(СтруктураШапкиДокумента.Склад,       		"Склад");
	ТаблицаБланков.ЗаполнитьЗначения(СтруктураШапкиДокумента.Организация, 		"Организация");
	ТаблицаБланков.ЗаполнитьЗначения(Неопределено,                        		"ДоговорКонтрагента");
	
	ТаблицаБланков.Колонки.Добавить("НалоговоеНазначениеНовое");
	ТаблицаБланков.Колонки.Добавить("ХарактерЗатрат");
	ТаблицаБланков.ЗаполнитьЗначения(СтруктураШапкиДокумента.НалоговоеНазначениеДоходовИЗатрат, 	"НалоговоеНазначениеНовое");
	
	Для Каждого Строка Из ТаблицаБланков Цикл
		
		// заполним ХарактерЗатрат, НалоговоеНазначениеНовое
		НалоговыйУчет.ОпределениеАналитикиНалоговогоУчетаВПроводкахДляЗатрат(
													Строка, 
													Строка.КорСчетСписанияБУ, 
													Строка.ХарактерЗатрат,
													Строка.НалоговоеНазначениеНовое,
													,
													Строка.НалоговоеНазначение, 
													Строка.НалоговоеНазначениеНовое, 
													"КорСубконтоСписанияБУ",
													Дата
													,
													,
													СтруктураШапкиДокумента.ЕстьНДС
												);
		
	КонецЦикла;	
	
	// Установим параметры запроса
	ПорядокСубконто = Новый Массив();
	ПорядокСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);
	ПорядокСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады);
			
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Склад",           СтруктураШапкиДокумента.Склад);
	Запрос.УстановитьПараметр("КонецПериода",    СтруктураШапкиДокумента.Ссылка.МоментВремени());	
	Запрос.УстановитьПараметр("Организация",     СтруктураШапкиДокумента.Организация);	
	Запрос.УстановитьПараметр("ПорядокСубконто", ПорядокСубконто);
		
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Остатки.Субконто1 КАК Номенклатура,
		|	СУММА(Остатки.СуммаОстатокДт) КАК СуммаОстаток,
		|	СУММА(Остатки.КоличествоОстатокДт) КАК КоличествоОстаток
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(&КонецПериода, Счет = &Счет, &ПорядокСубконто, Организация = &Организация И Субконто1 В (&Номенклатура) И Субконто2 = &Склад) КАК Остатки
		|
		|ГДЕ
		|	Остатки.КоличествоОстатокДт > 0
		|
		|СГРУППИРОВАТЬ ПО
		|	Остатки.Субконто1
		|";

	Для Каждого Строка из ТаблицаБланков Цикл
				
		Запрос.УстановитьПараметр("Счет",     		 Строка.СчетУчетаЗабалансовыйБУ);
		Запрос.УстановитьПараметр("Номенклатура", 	 Строка.Номенклатура);
	
		ТаблицаЦен = Запрос.Выполнить().Выгрузить();
	
		СтрокаТаблицыЦен = ТаблицаЦен.Найти(Строка.Номенклатура, "Номенклатура");
		Если НЕ СтрокаТаблицыЦен = Неопределено Тогда			
			Строка.СуммаНоминальная = Строка.Количество * Окр(?(СтрокаТаблицыЦен.КоличествоОстаток = 0, 0, СтрокаТаблицыЦен.СуммаОстаток / СтрокаТаблицыЦен.КоличествоОстаток),2,1);
			Строка.КоличествоНоминальное = СтрокаТаблицыЦен.КоличествоОстаток;	
		Иначе
			Строка.СуммаНоминальная = 0;
			Строка.КоличествоНоминальное = 0;
		КонецЕсли;		
	КонецЦикла;
    	
	Возврат ТаблицаБланков;

КонецФункции // ПодготовитьТаблицуБланков()

// Проверяет правильность заполнения шапки документа, формирует МассивНепроверяемыхРеквизитов для стандартной проверки заполнения.
// Если какой-то из реквизитов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении,
//  МассивНепроверяемыхРеквизитов - массив имен реквизитов, которые не будут проверятся стандартной проверкой заполнения.
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, МассивНепроверяемыхРеквизитов)

	Если Товары.Количество() + ВозвратнаяТара.Количество() + БланкиСтрогогоУчета.Количество() = 0 Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Склад");
	КонецЕсли;
	
	МассивНепроверяемыхРеквизитов.Добавить("НалоговоеНазначениеДоходовИЗатрат");
	
	Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыльДо2015 Тогда
	
		ХарактерЗатрат = Неопределено;
		НалоговоеНазначениеПроводки = Неопределено;
		НалоговоеНазначениеНДС = "ИзТабличнойЧасти";
		
		НалоговыйУчет.ОпределениеАналитикиНалоговогоУчетаВПроводкахДляЗатрат(
					СтруктураШапкиДокумента, 
					СчетДт, 
					ХарактерЗатрат,                  
					НалоговоеНазначениеПроводки,
					,  // ПризнакАмортизируется = Ложь
					НалоговоеНазначениеНДС, 
					СтруктураШапкиДокумента.НалоговоеНазначениеДоходовИЗатрат, 
					"СубконтоДт",
					СтруктураШапкиДокумента.Дата,
					,  // ХарактерЗатратРБП = Неопределено
					СтруктураШапкиДокумента.ЕстьНДС
					);
		
		Если НЕ ЗначениеЗаполнено(НалоговоеНазначениеПроводки) И (ЗначениеЗаполнено(СтруктураШапкиДокумента.СчетДт) И СтруктураШапкиДокумента.СчетДтНалоговыйУчет) Тогда 
				
			Если ХарактерЗатрат = "Затраты" Тогда
				СтрокаСообщения = НСтр("ru='Не указано ""Налоговое назначение затрат""!';uk='Не зазначено ""Податкове призначення витрат""!'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения, ЭтотОбъект, "НалоговоеНазначениеДоходовИЗатрат", "Объект", Отказ);
			ИначеЕсли ХарактерЗатрат = "Строительство" Тогда
				СтрокаСообщения = НСтр("ru='Не указано налоговое назначение для объекта строительства или НМА!';uk=""Не зазначено податкове призначення для об'єкта будівництва або НМА!""");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения, ЭтотОбъект, "НалоговоеНазначениеДоходовИЗатрат", "Объект", Отказ);
			ИначеЕсли ХарактерЗатрат = "Производство" Тогда
				СтрокаСообщения = НСтр("ru='Не указано налоговое назначение для номенклатурной группы!';uk='Не зазначено податкове призначення для номенклатурної групи!'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения, ЭтотОбъект, "НалоговоеНазначениеДоходовИЗатрат", "Объект", Отказ);
			ИначеЕсли ХарактерЗатрат = "РБП" Тогда
				СтрокаСообщения = НСтр("ru='Не указано налоговое назначение для расходов будущих периодов!';uk='Не зазначено податкове призначення для витрат майбутніх періодів!'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения, ЭтотОбъект, "НалоговоеНазначениеДоходовИЗатрат", "Объект", Отказ);
			ИначеЕсли ХарактерЗатрат = "ТЗР" Тогда
			Иначе
				СтрокаСообщения = НСтр("ru='Невозможно определить налоговое назначение затрат для указанного счета затрат!';uk='неможливо визначити податкове призначення витрат для вказанного рахунку витрат!'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения, ЭтотОбъект, "НалоговоеНазначениеДоходовИЗатрат", "Объект");
			КонецЕсли;
		КонецЕсли;	
		
	КонецЕсли;

	Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийСписаниеТоваров.Оборудование
	   И СтруктураШапкиДокумента.ТипСклада = Перечисления.ТипыСкладов.НеавтоматизированнаяТорговаяТочка Тогда
		СтрокаСообщения = НСтр("ru='При операции с оборудованием склад не может быть неавтоматизированной торговой точкой.';uk='При операції з устаткуванням склад не може бути неавтоматизованою торгівельною точкою.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения, ЭтотОбъект, "Склад", "Объект", Отказ);
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаполнениеШапки()

Процедура ПроверитьЗаполнениеТЧПриСписанииНаОЗП(ИмяТабличнойЧасти, ИмяТЧ, СтруктураШапкиДокумента, Отказ, МассивНепроверяемыхРеквизитов)

	ХарактерЗатрат = УправлениеПроизводствомВызовСервера.ПолучитьХарактерЗатратПоСчетуЗатрат(СтруктураШапкиДокумента.СчетДт,,Дата);
	
	Если НЕ ХарактерЗатрат = "ОПЗ" Тогда
		Возврат;
	КонецЕсли;
	
	СтрокиНехоз = ЭтотОбъект[ИмяТабличнойЧасти].НайтиСтроки(Новый Структура("НалоговоеНазначение", Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяНеХозДеятельность));
	
	Для Каждого СтрокаНехоз Из СтрокиНехоз Цикл
		
		НомерСтроки = ЭтотОбъект[ИмяТабличнойЧасти].Индекс(СтрокаНехоз) + 1;
		
		ПрефиксПоля = ИмяТабличнойЧасти + "[" + Формат(НомерСтроки - 1, "ЧН=0; ЧГ=") + "].";
		
		СтрокаНачалаСообщенияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='В строке номер ""%1"" табличной части ""%2"": ';uk='У рядку номер ""%1"" табличної частини ""%2"": '"), СокрЛП(НомерСтроки), ИмяТЧ);
		СтрокаСообщения = СтрокаНачалаСообщенияОбОшибке + НСтр("ru=' указано нехозяйственное налоговое назначение. Списание на счет ОПЗ - невозможно!';uk=' зазначене негосподарське податкове призначення. Списання на рахунок ЗВВ - неможливе!'");
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения, ЭтотОбъект, ПрефиксПоля + "НалоговоеНазначение", "Объект", Отказ);
		
	КонецЦикла;

КонецПроцедуры // ПроверитьЗаполнениеТЧПриСписанииНаОЗП

// Проверяет правильность заполнения строк табличной части "Товары", формирует МассивНепроверяемыхРеквизитов для стандартной проверки заполнения.
//
// Параметры: 
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении.
//  МассивНепроверяемыхРеквизитов - массив имен реквизитов, которые не будут проверятся стандартной проверкой заполнения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиТовары(СтруктураШапкиДокумента, Отказ, МассивНепроверяемыхРеквизитов)

	ИмяТабличнойЧасти = "Товары";
	
	НТТ = (СтруктураШапкиДокумента.РозницаВПродажныхЦенах И (СтруктураШапкиДокумента.ТипСклада = Перечисления.ТипыСкладов.НеавтоматизированнаяТорговаяТочка));
	АТТ = (СтруктураШапкиДокумента.РозницаВПродажныхЦенах И (СтруктураШапкиДокумента.ТипСклада = Перечисления.ТипыСкладов.РозничныйМагазин));
	
	Если НЕ НТТ Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Товары.Цена");
		МассивНепроверяемыхРеквизитов.Добавить("Товары.Сумма");
		МассивНепроверяемыхРеквизитов.Добавить("Товары.СтавкаНДСВРознице");
	Иначе
		Если НЕ СтруктураШапкиДокумента.РазделятьПоСтавкамНДС Тогда
			МассивНепроверяемыхРеквизитов.Добавить("СтавкаНДСВРознице");
		КонецЕсли;
		МассивНепроверяемыхРеквизитов.Добавить("Товары.Номенклатура");
		МассивНепроверяемыхРеквизитов.Добавить("Товары.Количество");
		МассивНепроверяемыхРеквизитов.Добавить("Товары.ЕдиницаИзмерения");
	КонецЕсли;
	
	Если НЕ СтруктураШапкиДокумента.ЕстьНДС Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Товары.НалоговоеНазначение");	
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.РозницаВПродажныхЦенах Тогда
		// СчетУчетаБУ для РозницаВПродажныхЦенах будет заполнен в ПередЗаписью
		МассивНепроверяемыхРеквизитов.Добавить("Товары.СчетУчетаБУ");
	КонецЕсли;
	
	
	ПроверитьЗаполнениеТЧПриСписанииНаОЗП(ИмяТабличнойЧасти, НСтр("ru='Товары';uk='Товари'"), СтруктураШапкиДокумента, Отказ, МассивНепроверяемыхРеквизитов);
	
КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиТовары()

Процедура ПроверитьТабличныеЧастиПострочно(СтруктураШапкиДокумента, ТаблицаПоТоварам, Отказ)

	Для Каждого СтрокаТЧ Из ТаблицаПоТоварам Цикл

		СтрокаНачалаСообщенияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='В строке номер ""%1"" табличной части ""Товары"": ';uk='У рядку номер ""%1"" табличної частини ""Товари"": '"), СокрЛП(СтрокаТЧ.НомерСтроки));
		ПрефиксПоля = "Товары[" + Формат(СтрокаТЧ.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].";
		
		
		Если мУчетВПродажныхЦенах Тогда	
			
			Если (СтруктураШапкиДокумента.ТипСклада = Перечисления.ТипыСкладов.РозничныйМагазин) Тогда	
				
				// Допустимое отклонение цены составляет цену минимальной единицы количества (0.001)
				ДопустимоеОтклонение = СтрокаТЧ.УчетнаяЦена * 0.001;
				
				Если СтрокаТЧ.РозничнаяЦена = 0 Тогда
					СтрокаСообщения = СтрокаНачалаСообщенияОбОшибке + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Для товара ""%1"" не установлена розничная цена.';uk='Для товару ""%1"" не встановлена роздрібна ціна.'"), СтрокаТЧ.Номенклатура);
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения, ЭтотОбъект, ПрефиксПоля + "Номенклатура", "Объект", Отказ);
				ИначеЕсли СтрокаТЧ.УчетнаяЦена = 0 Тогда
					// Учетная цена неизвестна.
				ИначеЕсли СтрокаТЧ.РозничнаяЦена - СтрокаТЧ.УчетнаяЦена > ДопустимоеОтклонение
					ИЛИ СтрокаТЧ.РозничнаяЦена - СтрокаТЧ.УчетнаяЦена < - ДопустимоеОтклонение Тогда
					СтрокаСообщения = СтрокаНачалаСообщенияОбОшибке + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Для товара ""%1"" розничная цена (%2) не равна учетной цене(%3).
|измените розничную цену или проведите переоценку.';uk='Для товару ""%1"" роздрібна ціна (%2) не дорівнює обліковій ціні(%3).
|змініть роздрібну ціну або проведіть переоцінку.'"), СтрокаТЧ.Номенклатура, СтрокаТЧ.РозничнаяЦена, СтрокаТЧ.УчетнаяЦена);
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения, ЭтотОбъект, ПрефиксПоля + "Номенклатура", "Объект", Отказ);
				КонецЕсли;
				
			ИначеЕсли СтруктураШапкиДокумента.ТипСклада = Перечисления.ТипыСкладов.НеавтоматизированнаяТорговаяТочка Тогда
					
					Если мРазделятьПоСтавкамНДС
					   И СтруктураШапкиДокумента.ЕстьНДС 
					   И НЕ СтрокаТЧ.СтавкаНДСВРознице.Пустая()
					   И НЕ СтрокаТЧ.НалоговоеНазначение.Пустая()
					   И НЕ СтрокаТЧ.ВидДеятельностиНДС = УчетНДС.ПолучитьВидДеятельностиНДС(СтрокаТЧ.СтавкаНДСВРознице) Тогда
						   
						  СтрокаСообщения = СтрокаНачалаСообщенияОбОшибке + НСтр("ru='Указано некорректное налоговое назначение! Вид деятельности НДС не соответствует ставке НДС, указанной в строке';uk='Вказано некоректне податкове призначення! Вид діяльності ПДВ не відповідає ставці ПДВ, вказаній в рядку'");
						   
						  
						  ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения, ЭтотОбъект, ПрефиксПоля + "НалоговоеНазначение", "Объект", Отказ);
							
					КонецЕсли;						
					
			КонецЕсли;
			
		КонецЕсли;
		
		// нельзя по НДС указывать нехоз. деятельность, а по НП - хоз. деятельность
		Если НЕ Отказ  
			И  СтруктураШапкиДокумента.ЕстьНДС 
			И  СтруктураШапкиДокумента.ЕстьНалогНаПрибыльДо2015 Тогда
			
			НехозДеятельностьНДС = (СтрокаТЧ.НалоговоеНазначение = Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяНеХозДеятельность);
			НехозДеятельностьНКУ = (НалоговоеНазначениеДоходовИЗатрат = Справочники.НалоговыеНазначенияАктивовИЗатрат.НКУ_НеХозДеятельность);
			
			Если НЕ СтрокаТЧ.НалоговоеНазначение = НалоговоеНазначениеДоходовИЗатрат
				И НехозДеятельностьНДС <> НехозДеятельностьНКУ Тогда 
				СтрокаСообщения = СтрокаНачалаСообщенияОбОшибке + НСтр("ru=' ошибочно указано нехозяйственное налоговое назначение (НДС) и одновременно хозяйственную деятельность по затратам (и наоборот)!';uk=' помилково зазначено негосподарське податкове призначення (ПДВ) і одночасно господарську діяльність по витратам (та навпаки)!'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения, ЭтотОбъект, ПрефиксПоля + "НалоговоеНазначение", "Объект");
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиТоварыПоСтрочно

// Проверяет правильность заполнения строк табличной части "Возвратная тара", формирует МассивНепроверяемыхРеквизитов для стандартной проверки заполнения.
//
// Параметры:
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении.
//  МассивНепроверяемыхРеквизитов - массив имен реквизитов, которые не будут проверятся стандартной проверкой заполнения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиВозвратнаяТара(СтруктураШапкиДокумента, Отказ, МассивНепроверяемыхРеквизитов)
	
	ИмяТабличнойЧасти = "ВозвратнаяТара";
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьВозвратнуюТару") Тогда
		МассивНепроверяемыхРеквизитов.Добавить("ВозвратнаяТара.Номенклатура");
		МассивНепроверяемыхРеквизитов.Добавить("ВозвратнаяТара.Количество");
		МассивНепроверяемыхРеквизитов.Добавить("ВозвратнаяТара.СчетУчетаБУ");
		МассивНепроверяемыхРеквизитов.Добавить("ВозвратнаяТара.НалоговоеНазначение");
	КонецЕсли;
	
	Если НЕ СтруктураШапкиДокумента.ЕстьНДС Тогда
		МассивНепроверяемыхРеквизитов.Добавить("ВозвратнаяТара.НалоговоеНазначение");	
	КонецЕсли;

	ПроверитьЗаполнениеТЧПриСписанииНаОЗП(ИмяТабличнойЧасти, "Тара", СтруктураШапкиДокумента, Отказ, МассивНепроверяемыхРеквизитов);
	
КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиТовары()

// Проверяет правильность заполнения строк табличной части "Бланки", формирует МассивНепроверяемыхРеквизитов для стандартной проверки заполнения.
//
// Параметры:
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении.
//  МассивНепроверяемыхРеквизитов - массив имен реквизитов, которые не будут проверятся стандартной проверкой заполнения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиБланкиСтрогогоУчета(СтруктураШапкиДокумента, Отказ, МассивНепроверяемыхРеквизитов)

	ИмяТабличнойЧасти = "БланкиСтрогогоУчета";

	Если НЕ СтруктураШапкиДокумента.ЕстьНДС Тогда
		МассивНепроверяемыхРеквизитов.Добавить("БланкиСтрогогоУчета.НалоговоеНазначение");	
	КонецЕсли;

	ПроверитьЗаполнениеТЧПриСписанииНаОЗП(ИмяТабличнойЧасти, "Бланки", СтруктураШапкиДокумента, Отказ, МассивНепроверяемыхРеквизитов);

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиБланкиСтрогогоУчета()

// По результату запроса по шапке документа формируем движения по регистрам.
//
// Параметры: 
//  РежимПроведения           - режим проведения документа (оперативный или неоперативный),
//  СтруктураШапкиДокумента   - выборка из результата запроса по шапке документа,
//  ТаблицаПоТоварам          - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  ТаблицаПоТаре             - таблица значений, содержащая данные для проведения и проверки ТЧ "Возвратная тара",
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоТаре, ТаблицаПоБланкам, Отказ, Заголовок);

	ПроводкиБУ   = Движения.Хозрасчетный;
	
	НТТ = Ложь;
	
	
	Если мУчетВПродажныхЦенах И (НЕ СтруктураШапкиДокумента.ТипСклада = Перечисления.ТипыСкладов.ОптовыйСклад) Тогда
		
		НТТ = (СтруктураШапкиДокумента.ТипСклада = Перечисления.ТипыСкладов.НеавтоматизированнаяТорговаяТочка);
		АТТ = (СтруктураШапкиДокумента.ТипСклада = Перечисления.ТипыСкладов.РозничныйМагазин);
		
		Если АТТ Тогда
			
			// Спишем торговую наценку
			ТаблицаНаценок = УправлениеЗапасамиПартионныйУчет.ТорговаяНаценкаАТТ(
												Ссылка, 
												Склад, 
												ТаблицаПоТоварам.ВыгрузитьКолонку("Номенклатура"), 
												ТаблицаПоТоварам.ВыгрузитьКолонку("НалоговоеНазначение")
											);

			СчетНаценки = ПланыСчетов.Хозрасчетный.ТорговаяНаценкаАТТ;
			
			УправлениеЗапасамиПартионныйУчет.ДвижениеПартийТоваров(ТаблицаПоТоварам, Отказ);
			
			Для Каждого Строка Из ТаблицаПоТоварам Цикл
				
				ПолучательСчетНаценки = Строка.КорСчетСписанияБУ;
			
				Для Каждого Партия Из Строка.СписанныеПартииБУ Цикл
					
					СтруктураОтбора = Новый Структура;
					СтруктураОтбора.Вставить("НалоговоеНазначение",Строка.НалоговоеНазначение);
					СтруктураОтбора.Вставить("Номенклатура",Строка.Номенклатура);
					СтруктураОтбора.Вставить("Партия",		Партия.Партия);
					
					СтрокаТаблицыНаценок = ТаблицаНаценок.НайтиСтроки(СтруктураОтбора);
					
					Сумма = Строка.РозничнаяЦена * Партия.Количество;
					
					
					Если СтрокаТаблицыНаценок.Количество() = 0 Тогда
						ПокупнаяЦена = Сумма;
					ИначеЕсли НЕ СтрокаТаблицыНаценок[0].ПС = 0 Тогда
						СуммаНаценки = СтрокаТаблицыНаценок[0].ТН * Сумма / (СтрокаТаблицыНаценок[0].ПС);
						ПокупнаяЦена = Сумма - СуммаНаценки;
					Иначе
						ПокупнаяЦена = 0;
					КонецЕсли;
					
					Если НЕ СтруктураШапкиДокумента.ЕстьНалогНаПрибыльДо2015 = Истина Тогда
						ПокупнаяЦенаНУ = 0;
					ИначеЕсли СтрокаТаблицыНаценок.Количество() = 0 Тогда
						ПокупнаяЦенаНУ = Сумма;
					ИначеЕсли НЕ СтрокаТаблицыНаценок[0].ПС_НУ = 0 Тогда
						СуммаНаценкиНУ = СтрокаТаблицыНаценок[0].ТН_НУ * Сумма / (СтрокаТаблицыНаценок[0].ПС_НУ);
						ПокупнаяЦенаНУ = Сумма - СуммаНаценкиНУ;
					Иначе
						ПокупнаяЦенаНУ = 0;
					КонецЕсли;
					
					Если Сумма - ПокупнаяЦена <> 0 Тогда
						
						// спишем сумму наценки сторно в корреспонденции со счетом списания
						Проводка = ПроводкиБУ.Добавить();
						Проводка.Период      = Дата;
						Проводка.Организация = Организация;
						Проводка.Содержание  = НСтр("ru='Торговая наценка';uk='Торгова націнка'",Локализация.КодЯзыкаИнформационнойБазы());
						
						Проводка.СчетДт      = Строка.КорСчетСписанияБУ;
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1,  Строка.КорСубконтоСписанияБУ1);
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2,  Строка.КорСубконтоСписанияБУ2);
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3,  Строка.КорСубконтоСписанияБУ3);
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "НоменклатурныеГруппы", Строка.НоменклатурнаяГруппа);
						
						Проводка.СчетКт      = Строка.СчетУчетаБУ;
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Номенклатура",  Строка.Номенклатура);
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Склады",  СтруктураШапкиДокумента.Склад);
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Партии",  Партия.Партия);
						Проводка.Сумма                     = ПокупнаяЦена - Сумма;
						
						Проводка.НалоговоеНазначениеДт 	= Строка.НалоговоеНазначениеНовое;
						Проводка.НалоговоеНазначениеКт 	= Строка.НалоговоеНазначение;
						Если   СтруктураШапкиДокумента.ЕстьНалогНаПрибыльДо2015
							 И Строка.НалоговоеНазначение <> Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяНеХозДеятельность Тогда
							Проводка.СуммаНУДт				= ПокупнаяЦенаНУ - Сумма;
							Проводка.СуммаНУКт				= Проводка.СуммаНУДт;
							Если Строка.НалоговоеНазначениеНовое = Справочники.НалоговыеНазначенияАктивовИЗатрат.НКУ_НеХозДеятельность Тогда
								Проводка.СуммаНУДт = 0;
							КонецЕсли;
							
						КонецЕсли;	
						
						// покажем списание наценки в корреспонденции со счетом учета
						Проводка = ПроводкиБУ.Добавить();
						Проводка.Период      = Дата;
						Проводка.Организация = Организация;
						Проводка.Содержание  = НСтр("ru='Торговая наценка';uk='Торгова націнка'",Локализация.КодЯзыкаИнформационнойБазы());
						
						Проводка.СчетДт      = СчетНаценки;
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Номенклатура",  Строка.Номенклатура);
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Склады",  СтруктураШапкиДокумента.Склад);
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Партии",  Партия.Партия);
						
						Проводка.СчетКт      = Строка.СчетУчетаБУ;
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Номенклатура",  Строка.Номенклатура);
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Склады",  СтруктураШапкиДокумента.Склад);
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Партии",  Партия.Партия);
						Проводка.Сумма                     = -(ПокупнаяЦена - Сумма);
						
						Проводка.НалоговоеНазначениеДт 	= Строка.НалоговоеНазначение;
						Проводка.НалоговоеНазначениеКт 	= Строка.НалоговоеНазначение;
						Если   СтруктураШапкиДокумента.ЕстьНалогНаПрибыльДо2015
							 И Строка.НалоговоеНазначение <> Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяНеХозДеятельность Тогда
							Проводка.СуммаНУДт				= -(ПокупнаяЦенаНУ - Сумма);
							Проводка.СуммаНУКт				= Проводка.СуммаНУДт;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
			
		Иначе // НТТ
			
			ТаблицаНаценок 	  = УправлениеЗапасамиПартионныйУчет.ТорговаяНаценкаНТТ(
														Ссылка, 
														Склад, 
														ТаблицаПоТоварам.ВыгрузитьКолонку("НалоговоеНазначение"), 
														мРазделятьПоСтавкамНДС
													);

			СчетНаценки 	= ПланыСчетов.Хозрасчетный.ТорговаяНаценкаНТТ;
			
			Для Каждого Строка Из ТаблицаПоТоварам Цикл
								
				ПолучательСчетНаценки = Строка.КорСчетСписанияБУ;
				
				СтруктураОтбора = Новый Структура;
				СтруктураОтбора.Вставить("НалоговоеНазначение",Строка.НалоговоеНазначение);
				Если мРазделятьПоСтавкамНДС Тогда
					СтруктураОтбора.Вставить("СтавкиНДС",Строка.СтавкаНДСВРознице);
				КонецЕсли;
				
				СтрокаТаблицыНаценок = ТаблицаНаценок.НайтиСтроки(СтруктураОтбора);
				
				Сумма = Строка.Сумма;
				
				
				Если СтрокаТаблицыНаценок.Количество() = 0 Тогда
					ПокупнаяЦена = Сумма;
				ИначеЕсли НЕ СтрокаТаблицыНаценок[0].ПС + Сумма = 0 Тогда
					СуммаНаценки = СтрокаТаблицыНаценок[0].ТН * Сумма / (СтрокаТаблицыНаценок[0].ПС);
					ПокупнаяЦена = Сумма - СуммаНаценки;
				Иначе
					ПокупнаяЦена = 0;
				КонецЕсли;
				
				Если НЕ СтруктураШапкиДокумента.ЕстьНалогНаПрибыльДо2015 = Истина Тогда
					ПокупнаяЦенаНУ = 0;
				ИначеЕсли СтрокаТаблицыНаценок.Количество() = 0 Тогда
					ПокупнаяЦенаНУ = Сумма;
				ИначеЕсли НЕ СтрокаТаблицыНаценок[0].ПС_НУ = 0 Тогда
					СуммаНаценкиНУ = СтрокаТаблицыНаценок[0].ТН_НУ * Сумма / (СтрокаТаблицыНаценок[0].ПС_НУ);
					ПокупнаяЦенаНУ = Сумма - СуммаНаценкиНУ;
				Иначе
					ПокупнаяЦенаНУ = 0;
				КонецЕсли;
				
				// Спишем товар из розницы
				Проводка = ПроводкиБУ.Добавить();
				Проводка.Период      = Дата;
				Проводка.Организация = Организация;
				Проводка.Содержание  = НСтр("ru='Возврат товара из розницы';uk='Повернення товару з роздробу'",Локализация.КодЯзыкаИнформационнойБазы());
				
				Проводка.СчетДт      = Строка.КорСчетСписанияБУ;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1,  Строка.КорСубконтоСписанияБУ1);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2,  Строка.КорСубконтоСписанияБУ2);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3,  Строка.КорСубконтоСписанияБУ3);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "НоменклатурныеГруппы", Строка.НоменклатурнаяГруппа);
				
				Проводка.СчетКт      = Строка.СчетУчетаБУ;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Склады",  СтруктураШапкиДокумента.Склад);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Номенклатура",  Строка.Номенклатура);
				Если мРазделятьПоСтавкамНДС Тогда
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "СтавкиНДС",  Строка.СтавкаНДСВРознице);
				КонецЕсли;
				
				Проводка.Сумма        = ПокупнаяЦена;

				Проводка.НалоговоеНазначениеДт 	= Строка.НалоговоеНазначениеНовое;
				Проводка.НалоговоеНазначениеКт 	= Строка.НалоговоеНазначение;
				
				Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыльДо2015 = Истина
						 И Строка.НалоговоеНазначение <> Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяНеХозДеятельность Тогда
					Проводка.СуммаНУДт				= ПокупнаяЦенаНУ;
					Проводка.СуммаНУКт				= Проводка.СуммаНУДт;
				КонецЕсли;
				
				//Спишем торговую наценку
				Если (Сумма - ПокупнаяЦена <> 0) ИЛИ (Сумма - ПокупнаяЦенаНУ <> 0) Тогда
					
					Проводка = ПроводкиБУ.Добавить();
					Проводка.Период      = Дата;
					Проводка.Организация = Организация;
					Проводка.Содержание  = НСтр("ru='Торговая наценка';uk='Торгова націнка'",Локализация.КодЯзыкаИнформационнойБазы());
					
					Проводка.СчетДт      = СчетНаценки;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Номенклатура",  Строка.Номенклатура);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Склады",  	  СтруктураШапкиДокумента.Склад);
					Если мРазделятьПоСтавкамНДС Тогда
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "СтавкиНДС", Строка.СтавкаНДСВРознице);
					КонецЕсли;
					
					Проводка.СчетКт      = Строка.СчетУчетаБУ;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Номенклатура",  Строка.Номенклатура);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Склады",  	  СтруктураШапкиДокумента.Склад);
					Если мРазделятьПоСтавкамНДС Тогда
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "СтавкиНДС", Строка.СтавкаНДСВРознице);
					КонецЕсли;
					
					Проводка.Сумма		= -(ПокупнаяЦена - Сумма);
					
					Проводка.НалоговоеНазначениеДт 	= Строка.НалоговоеНазначение;
					Проводка.НалоговоеНазначениеКт 	= Строка.НалоговоеНазначение;
					Если   СтруктураШапкиДокумента.ЕстьНалогНаПрибыльДо2015
						 И Строка.НалоговоеНазначение <> Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяНеХозДеятельность Тогда
						Проводка.СуммаНУДт				= -(ПокупнаяЦенаНУ - Сумма);
						Проводка.СуммаНУКт				= Проводка.СуммаНУДт;
					КонецЕсли;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	Иначе
		
		УправлениеЗапасамиПартионныйУчет.ДвижениеПартийТоваров(ТаблицаПоТоварам, Отказ);

	КонецЕсли;
		
	УправлениеЗапасамиПартионныйУчет.ДвижениеПартийТоваров(ТаблицаПоТаре, Отказ);
	
	Если ВидОперации = Перечисления.ВидыОперацийСписаниеТоваров.БланкиСтрогогоУчета Тогда
		
		УправлениеЗапасамиПартионныйУчет.ДвижениеПартийТоваров(ТаблицаПоБланкам, Отказ, , НСтр("ru='Списаны БСУ';uk='Списані БСЗ'",Локализация.КодЯзыкаИнформационнойБазы()));
		
		// Проводки по бланкам строгого учета		
		Для Каждого СтрокаТаблицы Из ТаблицаПоБланкам Цикл
			//проводка по счету СчетУчетаЗабалансовыйБУ
			Если СтрокаТаблицы.КоличествоНоминальное < СтрокаТаблицы.Количество Тогда
				Учет = "Бух";
				СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1. учет. Строка :%2
|Не списано %3 %4 товара %5, счет учета %6';uk='%1. облік. Рядок :%2
|Не списано %3 %4 товара %5, рахунок %6'"), Учет, СтрокаТаблицы.НомерСтроки, (СтрокаТаблицы.Количество - СтрокаТаблицы.КоличествоНоминальное), СтрокаТаблицы.Номенклатура.БазоваяЕдиницаИзмерения, СтрокаТаблицы.Номенклатура, СтрокаТаблицы.СчетУчетаЗабалансовыйБУ);
				Поле = "БланкиСтрогогоУчета[" + Формат(СтрокаТаблицы.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].Количество";								
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения,ЭтотОбъект, Поле, "Объект",Отказ);
			Иначе		
				Проводка = ПроводкиБУ.Добавить();
	            Проводка.Период       = Дата;
				Проводка.Организация  = СтруктураШапкиДокумента.Организация;
				Проводка.Содержание   = НСтр("ru='Списаны БСУ';uk='Списані БСЗ'",Локализация.КодЯзыкаИнформационнойБазы());

				Проводка.СчетКТ       = СтрокаТаблицы.СчетУчетаЗабалансовыйБУ;				
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКТ,Проводка.СубконтоКТ,"Номенклатура", СтрокаТаблицы.Номенклатура);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКТ,Проводка.СубконтоКТ,"Склады",       СтруктураШапкиДокумента.Склад);									
				Проводка.КоличествоКТ = СтрокаТаблицы.Количество;		
				
				Проводка.Сумма = СтрокаТаблицы.СуммаНоминальная;
				
			КонецЕсли;
		КонецЦикла; // Проводки по бланкам строгого учета

	КонецЕсли;
	
	ДвиженияРозничныеПродажиПодакцизныхТоваров(СтруктураШапкиДокумента, ТаблицаПоТоварам, Отказ);

	// ИНАГРО++
	ИНАГРО_Общий.ИНАГРО_ДвиженияЗатратыОрганизации_Приход(СтруктураШапкиДокумента, Движения);
	
	Если СтруктураШапкиДокумента.ИНАГРО_УказатьОС Тогда
		ИНАГРО_Транспорт.ИНАГРО_ДвижениеПоМатериаламСписаннымНаТранспорт(Движения, ТаблицаПоТоварам, СтруктураШапкиДокумента);
	КонецЕсли;
	
	Если ИНАГРО_ОбщийВызовСервераПовтИсп.ЕстьБСПУ() Тогда
		КопияТаблицаПоТоварам = ТаблицаПоТоварам.Скопировать();
		КопияТаблицаПоТоварам.Колонки.Добавить("НаправлениеДвижения");
		КопияТаблицаПоТоварам.ЗаполнитьЗначения(Справочники.ИНАГРО_ВидыДвиженийВедомости.Списание, "НаправлениеДвижения");
		ИНАГРО_Общий.ИНАГРО_ВедомостьДвиженийРасход(Движения, КопияТаблицаПоТоварам, СтруктураШапкиДокумента);
	КонецЕсли;	
	// ИНАГРО--
	
КонецПроцедуры // ДвиженияПоРегистрам()

// Процедура определяет параметры учетной политики
Процедура ПодготовитьПараметрыУчетнойПолитики(СтруктураШапкиДокумента, Отказ, Заголовок)
		
	СтруктураШапкиДокумента.Вставить("ЕстьНалогНаПрибыльДо2015", 	мУчетнаяПолитика.ЕстьНалогНаПрибыльДо2015);
	СтруктураШапкиДокумента.Вставить("ЕстьНДС", 			мУчетнаяПолитика.ЕстьНДС);
	
КонецПроцедуры // ПодготовитьПараметрыУчетнойПолитики()

// Процедура формирует структуру шапки документа и дополнительных полей.
Процедура ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента) Экспорт
	
	// Дерево значений, содержащее имена необходимых полей в запросе по шапке.
	Перем ДеревоПолейЗапросаПоШапке;
	
	СтруктураШапкиДокумента = ОбщегоНазначенияРед12.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	
	СтруктураШапкиДокумента.Вставить("ВалютаДокумента"		, СтруктураШапкиДокумента.ВалютаРегламентированногоУчета);
	СтруктураШапкиДокумента.Вставить("КурсДокумента"		, 1);
	СтруктураШапкиДокумента.Вставить("КратностьДокумента"	, 1);
	
	// Заполним по шапке документа дерево параметров, нужных при проведении.
	ДеревоПолейЗапросаПоШапке = ОбщегоНазначенияРед12.СформироватьДеревоПолейЗапросаПоШапке();
	ОбщегоНазначенияРед12.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Склад", "ТипСклада", "ТипСклада");
	ОбщегоНазначенияРед12.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Склад", "ТипЦенРозничнойТорговли", "ТипЦенРозничнойТорговли");

	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа
	СтруктураШапкиДокумента = УправлениеЗапасами.СформироватьЗапросПоДеревуПолей(ЭтотОбъект, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета);
	
КонецПроцедуры // ПодготовитьСтруктуруШапкиДокумента()

// Процедура формирует таблицы документа.
Процедура ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоТаре, ТаблицаПоБланкам, Отказ, Заголовок) Экспорт
	
	// Получим необходимые данные для проведения и проверки заполнения данные по табличной части "Товары".
	СтруктураПолей = Новый Структура();
	СтруктураПростыхПолей = Новый Структура();
	СтруктураПолей.Вставить("Номенклатура"				, "Номенклатура");
	СтруктураПолей.Вставить("Услуга"					, "Номенклатура.Услуга");
	СтруктураПолей.Вставить("БланкСтрогогоУчета"		, "Номенклатура.БланкСтрогогоУчета");
	СтруктураПолей.Вставить("Количество"         		, "Количество * Коэффициент");
	СтруктураПолей.Вставить("Цена"               		, "Цена");
	СтруктураПолей.Вставить("Сумма"              		, "Сумма");
	СтруктураПолей.Вставить("СтавкаНДСВРознице" 		, "СтавкаНДСВРознице");
	СтруктураПолей.Вставить("НомерСтроки"		        , "НомерСтроки");
	СтруктураПолей.Вставить("ДокументОприходования"		, "ДокументОприходования");
	СтруктураПолей.Вставить("Себестоимость"		   		, "Себестоимость");
	СтруктураПолей.Вставить("СебестоимостьНУ"		   	, "СебестоимостьНУ");
	СтруктураПолей.Вставить("СчетУчетаБУ"        		, "СчетУчетаБУ");
	СтруктураПолей.Вставить("НоменклатурнаяГруппа"  	, "Номенклатура.НоменклатурнаяГруппа");	

	СтруктураПолей.Вставить("НалоговоеНазначение"     	, "НалоговоеНазначение");
	СтруктураПолей.Вставить("ВидДеятельностиНДС"     	, "НалоговоеНазначение.ВидДеятельностиНДС");
	
	СтруктураПолей.Вставить("СуммаАкцизногоНалога"     	, "СуммаАкцизногоНалога");

	СтруктураПолей.Вставить("ОсновноеСредство"			, "ИНАГРО_ОсновноеСредство");	//ИНАГРО

	РезультатЗапросаПоТоварам = ОбщегоНазначенияРед12.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураПолей, СтруктураПростыхПолей);

	// Получим необходимые данные для проведения и проверки заполнения данные по табличной части "ВозвратнаяТара".
	СтруктураПолей = Новый Структура();
	СтруктураПростыхПолей = Новый Структура();
	СтруктураПолей.Вставить("Номенклатура"				, "Номенклатура");
	СтруктураПолей.Вставить("Услуга"      				, "Номенклатура.Услуга");
	СтруктураПолей.Вставить("БланкСтрогогоУчета"		, "Номенклатура.БланкСтрогогоУчета");
	СтруктураПолей.Вставить("Количество"  				, "Количество");
	СтруктураПолей.Вставить("НомерСтроки" 				, "НомерСтроки");
	СтруктураПолей.Вставить("СчетУчетаБУ" 				, "СчетУчетаБУ");	
	СтруктураПолей.Вставить("НоменклатурнаяГруппа"  	, "Номенклатура.НоменклатурнаяГруппа");	

	СтруктураПолей.Вставить("НалоговоеНазначение"     	, "НалоговоеНазначение");
	СтруктураПолей.Вставить("ВидДеятельностиНДС"     	, "НалоговоеНазначение.ВидДеятельностиНДС");

	РезультатЗапросаПоТаре = ОбщегоНазначенияРед12.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "ВозвратнаяТара", СтруктураПолей, СтруктураПростыхПолей);
	
	// Получим необходимые данные для проведения и проверки заполнения данные по табличной части "Бланки".
	СтруктураПолей = Новый Структура();
	СтруктураПростыхПолей = Новый Структура();
	СтруктураПолей.Вставить("Номенклатура"				, "Номенклатура");
	СтруктураПолей.Вставить("Услуга"					, "Номенклатура.Услуга");
	СтруктураПолей.Вставить("БланкСтрогогоУчета"		, "Номенклатура.БланкСтрогогоУчета");
	СтруктураПолей.Вставить("Количество"         		, "Количество * Коэффициент");
	СтруктураПолей.Вставить("НомерСтроки"		        , "НомерСтроки");
	СтруктураПолей.Вставить("СчетУчетаБУ"        		, "СчетУчетаБУ");
	СтруктураПолей.Вставить("СчетУчетаЗабалансовыйБУ"   , "СчетУчетаЗабалансовыйБУ");
	СтруктураПолей.Вставить("НоменклатурнаяГруппа"  	, "Номенклатура.НоменклатурнаяГруппа");	

	СтруктураПолей.Вставить("НалоговоеНазначение"     	, "НалоговоеНазначение");
	СтруктураПолей.Вставить("ВидДеятельностиНДС"     	, "НалоговоеНазначение.ВидДеятельностиНДС");
	
	РезультатЗапросаПоБланкам = ОбщегоНазначенияРед12.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "БланкиСтрогогоУчета", СтруктураПолей, СтруктураПростыхПолей);
	
	// Подготовим таблицу товаров для проведения.
	ТаблицаПоТоварам = ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента);
	ТаблицаПоТаре    = ПодготовитьТаблицуТары(РезультатЗапросаПоТаре, СтруктураШапкиДокумента);
	ТаблицаПоБланкам = ПодготовитьТаблицуБланков(РезультатЗапросаПоБланкам, СтруктураШапкиДокумента);
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьВозвратнуюТару") И ТаблицаПоТаре.Количество() > 0 Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru='В настройках параметров учета отключен параметр ""Ведется учет возвратной тары"". Движения по возвратной таре не будут сформированы!';uk='В настройках параметрів обліку вимкнений параметр ""Ведеться облік зворотної тари"". Рухи по зворотній тарі не будуть сформовані!'"
			),	
			ЭтотОбъект, 
			"ВозвратнаяТара", 
			"Объект"
		);
		
		ТаблицаПоТаре.Очистить();
		
	КонецЕсли;
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьБланкиСтрогогоУчета") И ТаблицаПоБланкам.Количество() > 0 Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru='В настройках параметров учета отключен параметр ""Ведется учет бланков строгого учета"". Движения по бланкам строгого учета не будут сформированы!';uk='В настройках параметрів обліку вимкнений параметр ""Ведеться облік бланків суворого обліку"". Рухи бланків суворого обліку не будуть сформовані!'"
			),	
			ЭтотОбъект, 
			"БланкиСтрогогоУчета", 
			"Объект"
		);
		
		ТаблицаПоБланкам.Очистить();
		
	КонецЕсли;
	
	
КонецПроцедуры // ПодготовитьТаблицыДокумента

Процедура ДвиженияРозничныеПродажиПодакцизныхТоваров(СтруктураШапкиДокумента, ТаблицаПоТоварам, Отказ)
	
	Для каждого Строка Из ТаблицаПоТоварам Цикл
		
		Если Строка.СуммаАкцизногоНалога <> 0 Тогда
			
			Проводка = Движения.Хозрасчетный.Добавить();
			Проводка.Период      = Дата;
			Проводка.Организация = Организация;
			Проводка.Содержание   = НСтр("ru='Акцизный налог';uk='Акцизний податок'",Локализация.КодЯзыкаИнформационнойБазы());
			
			Проводка.СчетДт      = Строка.КорСчетСписанияБУ;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1,  Строка.КорСубконтоСписанияБУ1);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2,  Строка.КорСубконтоСписанияБУ2);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3,  Строка.КорСубконтоСписанияБУ3);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "НоменклатурныеГруппы", Строка.НоменклатурнаяГруппа);
			
			Проводка.СчетКт = ПланыСчетов.Хозрасчетный.РасчетыПоАкцизу;

			Проводка.Сумма = Строка.СуммаАкцизногоНалога;
			
			Проводка.НалоговоеНазначениеДт 	= Строка.НалоговоеНазначениеНовое;

			Если   СтруктураШапкиДокумента.ЕстьНалогНаПрибыльДо2015
				И Строка.НалоговоеНазначение <> Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяНеХозДеятельность Тогда
				
				Проводка.СуммаНУДт				= Строка.СуммаАкцизногоНалога;
				Если Строка.НалоговоеНазначениеНовое = Справочники.НалоговыеНазначенияАктивовИЗатрат.НКУ_НеХозДеятельность Тогда
					Проводка.СуммаНУДт = 0;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;	
	
	НаборДвижений = Движения.РозничныеПродажиПодакцизныхТоваров;
	
	ТаблицаДвижений = НаборДвижений.ВыгрузитьКолонки();
	
	СуммаАкцизногоНалога = ТаблицаПоТоварам.Итог("СуммаАкцизногоНалога");
	
	Если СуммаАкцизногоНалога <> 0 Тогда
		
		СтрокаДвижения = ТаблицаДвижений.Добавить();
		СтрокаДвижения.СуммаАкцизногоНалога = СуммаАкцизногоНалога;
		
		СтавкаАкцизногоНалога = УчетАкцизногоНалога.ПолучитьСтавкуАкцизногоНалога(СтруктураШапкиДокумента.СтатьяДекларацииПоАкцизномуНалогу);
		Если СтавкаАкцизногоНалога <> 0 Тогда
			СтрокаДвижения.БазаАкцизногоНалога = СуммаАкцизногоНалога / СтавкаАкцизногоНалога;
		КонецЕсли;
		
	КонецЕсли;
	
	ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.Склад,"Склад");
	ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.Дата, "Период");
	ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.Организация, "Организация");
	ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.СтатьяДекларацииПоАкцизномуНалогу, "СтатьяДекларацииПоАкцизномуНалогу");
	ТаблицаДвижений.ЗаполнитьЗначения(Истина, "Активность");
	
	НаборДвижений.мПериод 			= СтруктураШапкиДокумента.Дата;
	НаборДвижений.мТаблицаДвижений 	= ТаблицаДвижений;
	НаборДвижений.ВыполнитьДвижения();
	
КонецПроцедуры

#КонецОбласти  

#Область СлужебныеПроцедурыИФункции

// Процедура выполняет заполнение табличной части по инвентаризации товаров.
//
// Параметры:
//  ДокументОснование - ссылка на документ основание (инвентаризация товаров).
//
Процедура ЗаполнитьТоварыПоИнвентаризацииТоваров(ДокументОснование) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокументСписания", Ссылка);
	Запрос.УстановитьПараметр("ДокументОснованиеСсылка", ДокументОснование);
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ПредыдущиеСписания.*
	|ПОМЕСТИТЬ ВТ_ПредыдущиеСписания
	|ИЗ
	|(
	|	ВЫБРАТЬ
	|		ДокСписание.Номенклатура,
	|		ДокСписание.СчетУчетаБУ,
	|		ДокСписание.Ссылка.Склад КАК Склад,
	|		ДокСписание.Количество * ДокСписание.Коэффициент КАК Количество, 
	|		ДокСписание.Цена / ДокСписание.Коэффициент КАК Цена
	|	ИЗ
	|		Документ.СписаниеТоваров.Товары КАК ДокСписание
	|	ГДЕ
	|		ДокСписание.Ссылка <> &ТекущийДокументСписания
	|		И ДокСписание.Ссылка.Проведен
	|		И ДокСписание.Ссылка.ИнвентаризацияТоваровНаСкладе = &ДокументОснованиеСсылка
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		ДокОтчетККМ.Номенклатура,
	|		ДокОтчетККМ.СчетУчетаБУ,
	|		ДокОтчетККМ.Ссылка.Склад КАК Склад,
	|		ДокОтчетККМ.Количество * ДокОтчетККМ.Коэффициент КАК Количество, 
	|		ДокОтчетККМ.Цена / ДокОтчетККМ.Коэффициент КАК Цена
	|	ИЗ
	|		Документ.ОтчетОРозничныхПродажах.Товары КАК ДокОтчетККМ
	|	ГДЕ
	|		ДокОтчетККМ.Ссылка.Проведен
	|		И ДокОтчетККМ.Ссылка.ИнвентаризацияТоваровНаСкладе = &ДокументОснованиеСсылка
	|) КАК ПредыдущиеСписания
	|
	|;
	|///////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Док.Номенклатура,
	|	Док.ЕдиницаИзмерения,
	|	Док.Коэффициент,
	|	Док.СчетУчетаБУ,
	|	Док.Ссылка.Склад             КАК Склад,
	|	МАКСИМУМ(Док.КоличествоУчет - Док.Количество) КАК КоличествоОтклонение,
	|	ВЫБОР
	|		КОГДА СУММА(ВТ_ПредыдущиеСписания.Количество) ЕСТЬ NULL ТОГДА
	|			0
	|		ИНАЧЕ
	|			СУММА(ВТ_ПредыдущиеСписания.Количество/Док.Коэффициент)
	|	КОНЕЦ КАК КоличествоСписанное,
	|	Док.ЦенаВРознице КАК Цена
	|ИЗ
	|	Документ.ИнвентаризацияТоваровНаСкладе.Товары КАК Док
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|	ВТ_ПредыдущиеСписания
	|	ПО
	|		Док.Номенклатура   = ВТ_ПредыдущиеСписания.Номенклатура
	|		И Док.СчетУчетаБУ    = ВТ_ПредыдущиеСписания.СчетУчетаБУ
	|		И Док.Ссылка.Склад = ВТ_ПредыдущиеСписания.Склад
	|		И #УсловиеПоЦене#
	|
	|ГДЕ
	|	Док.Ссылка = &ДокументОснованиеСсылка
	|	И Док.КоличествоУчет - Док.Количество > 0
	|
	|СГРУППИРОВАТЬ ПО
	|	Док.Ссылка.Склад,
	|	Док.Номенклатура,
	|	Док.СчетУчетаБУ,
	|	Док.ЕдиницаИзмерения,
	|	Док.Коэффициент,
	|	Док.ЦенаВРознице
	|";
	
	Склад		= ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОснование, "Склад");
	ТипСклада	= ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Склад, "ТипСклада");
	
	Если ТипСклада = Перечисления.ТипыСкладов.НеавтоматизированнаяТорговаяТочка Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "#УсловиеПоЦене#", "Док.Цена / Док.Коэффициент = ВТ_ПредыдущиеСписания.Цена");
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "#УсловиеПоЦене#", "ИСТИНА");
	КонецЕсли;
	
	ТаблицаТоваров = Запрос.Выполнить().Выгрузить();
	
	ДанныеОбъекта = Новый Структура("Дата, Организация, Склад");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, ЭтотОбъект);
	
	СоответствиеСведенийОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОСпискеНоменклатуры(
		ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаТоваров, "Номенклатура", Истина), ДанныеОбъекта);
	
	Для Каждого СтрокаТовара Из ТаблицаТоваров Цикл
		
		КоличествоСписать = СтрокаТовара.КоличествоОтклонение - СтрокаТовара.КоличествоСписанное;
		
		Если КоличествоСписать <= 0 Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаТабличнойЧасти = Товары.Добавить();
		
		СтрокаТабличнойЧасти.Номенклатура	  = СтрокаТовара.Номенклатура;
		СтрокаТабличнойЧасти.Количество		  = КоличествоСписать;
		СтрокаТабличнойЧасти.СчетУчетаБУ	  = СтрокаТовара.СчетУчетаБУ;
		СтрокаТабличнойЧасти.ЕдиницаИзмерения = СтрокаТовара.ЕдиницаИзмерения;
		СтрокаТабличнойЧасти.Коэффициент      = СтрокаТовара.Коэффициент;
		
		Если ТипСклада = Перечисления.ТипыСкладов.НеавтоматизированнаяТорговаяТочка Тогда
			СтрокаТабличнойЧасти.Цена = СтрокаТовара.Цена;
			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
		КонецЕсли;
		
		СведенияОНоменклатуре = СоответствиеСведенийОНоменклатуре.Получить(СтрокаТовара.Номенклатура);
		Если СведенияОНоменклатуре = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		
		
		ЗаполнятьБУ = НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.СчетУчетаБУ);
		ЗаполнятьНУ = НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.НалоговоеНазначение);
		
		Если ЗаполнятьБУ ИЛИ ЗаполнятьНУ Тогда
			Документы.СписаниеТоваров.ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(
				ДанныеОбъекта, СтрокаТабличнойЧасти, "Товары", СведенияОНоменклатуре, ЗаполнятьБУ, ЗаполнятьНУ);
		КонецЕсли;
		
		
	КонецЦикла;
	
	Если Товары.Количество() = 0 Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru='В документе ""%1"" № %2 отсутствуют товары, учетное количество которых превышает фактическое.';uk='В документі ""%1"" № %2 відсутні товари, облікова кількість яких перевищує фактичну.'"), ДокументОснование.Метаданные().Представление(), ДокументОснование.Номер);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, "ИнвентаризацияТоваровНаСкладе", "Объект");
		
	КонецЕсли;

КонецПроцедуры // ЗаполнитьТоварыПоИнвентаризацииТоваров()

Процедура ЗаполнитьПоДокументуОснованию(Основание)

	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ИнвентаризацияТоваровНаСкладе") Тогда

		// Заполним реквизиты из стандартного набора по документу-основанию.
		ЗаполнениеДокументов.ЗаполнитьПоОснованию(ЭтотОбъект, Основание);
        ВидОперации = Перечисления.ВидыОперацийСписаниеТоваров.ТоварыПродукция;

		ИнвентаризацияТоваровНаСкладе = Основание;
		ЗаполнитьТоварыПоИнвентаризацииТоваров(Основание);

		Документы.СписаниеТоваров.ЗаполнитьСчетаУчетаВТабличнойЧасти(ЭтотОбъект, "ВозвратнаяТара");	
		
		// Заполним состав комиссии
		ПервыйЧленКомиссии   = Основание.ПервыйЧленКомиссии;
		ВторойЧленКомиссии   = Основание.ВторойЧленКомиссии;
		ТретийЧленКомиссии   = Основание.ТретийЧленКомиссии;
		ПредседательКомиссии = Основание.ПредседательКомиссии;

	КонецЕсли;
	
КонецПроцедуры	// ЗаполнитьПоДокументуОснованию

Процедура ОбновитьПараметрыУчетнойПолитики() Экспорт

	мУчетнаяПолитика = Новый Структура;
	мУчетнаяПолитика.Вставить("ЕстьНалогНаПрибыльДо2015" , УчетнаяПолитика.ПлательщикНалогаНаПрибыльДо2015(Организация, НачалоМесяца(Дата)));
	мУчетнаяПолитика.Вставить("ЕстьНДС"            , УчетнаяПолитика.ПлательщикНДС(Организация, НачалоМесяца(Дата)));
	мУчетнаяПолитика.Вставить("ЕстьЕдиныйНалог"    , УчетнаяПолитика.ПлательщикЕдиногоНалога(Организация, НачалоМесяца(Дата)));

	мИспользоватьОборотнуюНоменклатуру = БухгалтерскийУчетВызовСервераПовтИсп.ИспользуетсяОборотнаяНоменклатураВНТТ();
	мРазделятьПоСтавкамНДС             = БухгалтерскийУчетВызовСервераПовтИсп.ИспользуетсяРазделениеПоСтавкамНДСВНТТ();

	СпособОценкиТоваровВРознице = УчетнаяПолитика.СпособОценкиТоваровВРознице(Организация, НачалоМесяца(Дата));
	мУчетВПродажныхЦенах = (СпособОценкиТоваровВРознице = Перечисления.СпособыОценкиТоваровВРознице.ПоПродажнойСтоимости);
	
	РозницаВПродажныхЦенах = ((НЕ Склад.ТипСклада = Перечисления.ТипыСкладов.ОптовыйСклад) 
								И мУчетВПродажныхЦенах); 
								
	СпособОценкиМПЗ  = УчетнаяПолитика.СпособОценкиМПЗ(Организация, НачалоМесяца(Дата));
	ПартионныйУчетБУ = (СпособОценкиМПЗ = Перечисления.СпособыОценки.ФИФО ИЛИ СпособОценкиМПЗ = Перечисления.СпособыОценки.ЛИФО);
	
КонецПроцедуры // ОбновитьПараметрыУчетнойПолитики

#КонецОбласти  

мВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();

#КонецЕсли