#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПроцедурыИФункцииПечати

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	// Приходная накладная
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "Ведомость";
	КомандаПечати.Представление = НСтр("ru='Акт списания товаров';uk='Акт списання товарів'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечати";
	КомандаПечати.СписокФорм    = "ФормаСписка,ФормаВыбора,ФормаДокументаОбщая";
	
	// Реестр документов
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "Реестр";
	КомандаПечати.Представление = НСтр("ru='Реестр документов';uk='Реєстр документів'");
	КомандаПечати.ЗаголовокФормы= НСтр("ru='Реестр документов ""Списание товаров""';uk='Реєстр документів ""Списання товарів""'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечатиРеестраДокументов";
	КомандаПечати.СписокФорм    = "ФормаСписка";
	КомандаПечати.Порядок       = 100;
	
	//ИНАГРО ++
	// Лимитно-заборная карта на списание зап.частей
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "СписаниеЗапчастей";
	КомандаПечати.Представление = НСтр("ru='Лимитно-заборная карта на списание зап.частей';uk='Лімітно-забірна карта на списання зап.частин'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечати";
	КомандаПечати.СписокФорм    = "ФормаСписка,ФормаВыбора,ФормаДокументаОбщая";
	//ИНАГРО --

КонецПроцедуры // ДобавитьКомандыПечати

// Функция формирует табличный документ с печатной формой, разработанной методистами
//
// Возвращаемое значение:
//  Табличный документ - печатная форма
//
Функция ПечатьСписаниеТоваров(МассивОбъектов, ОбъектыПечати, ПараметрыВывода)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДопКолонка = Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
	Если ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул Тогда
		ВыводитьКоды = Истина;
		Колонка = "Артикул";
	ИначеЕсли ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Код Тогда
		ВыводитьКоды = Истина;
		Колонка = "Код";
	Иначе
		ВыводитьКоды = Ложь;
	КонецЕсли;
	
	ЗапросДокумент = Новый Запрос;
	
	ЗапросДокумент.Текст = "
	|ВЫБРАТЬ
	|	СписаниеТоваров.Номер,
	|	СписаниеТоваров.Дата,
	|	СписаниеТоваров.Организация,
	|	СписаниеТоваров.СуммаДокумента,
	|	Константы.ВалютаРегламентированногоУчета КАК ВалютаДокумента,
	|	СписаниеТоваров.Склад,		
	|	СписаниеТоваров.Склад.ТипСклада КАК ТипСклада,		
	|	СписаниеТоваров.СчетДт КАК СчетСписания,
	|	СписаниеТоваров.ВидОперации КАК ВидОперации,
	|	СписаниеТоваров.Основание КАК Основание,
	|	СписаниеТоваров.СчетДт КАК СчетДт,
	|	СписаниеТоваров.СубконтоДт1 КАК СубконтоДт1,
	|	СписаниеТоваров.СубконтоДт2 КАК СубконтоДт2,
	|	СписаниеТоваров.СубконтоДт3 КАК СубконтоДт3,
	|	СписаниеТоваров.Товары.(
	|		НомерСтроки КАК НомерСтроки,
	|		Номенклатура,
	|		Номенклатура.Код КАК Код,
	|		Номенклатура.Артикул  КАК Артикул,
	|		Номенклатура.НаименованиеПолное КАК Товар,
	|		Количество,
	|		ЕдиницаИзмерения.Представление КАК ЕдиницаИзмерения,
	|		Коэффициент,
	|		Цена * Коэффициент КАК Цена,
	|		Сумма * Коэффициент КАК Сумма
	|	) КАК Товары,
	|	СписаниеТоваров.ВозвратнаяТара.(
	|		НомерСтроки КАК НомерСтроки,
	|		Номенклатура,
	|		Номенклатура.Код КАК Код,
	|		Номенклатура.Артикул  КАК Артикул,
	|		Номенклатура.НаименованиеПолное КАК Товар,
	|		Количество,
	|		Номенклатура.БазоваяЕдиницаИзмерения.Наименование КАК ЕдиницаИзмерения
	|	) КАК ВозвратнаяТара,
	|	СписаниеТоваров.БланкиСтрогогоУчета.(
	|		НомерСтроки КАК НомерСтроки,
	|		Номенклатура,
	|		Номенклатура.Код КАК Код,
	|		Номенклатура.Артикул  КАК Артикул,
	|		Номенклатура.НаименованиеПолное КАК Товар,
	|		Количество,
	|		ЕдиницаИзмерения.Представление КАК ЕдиницаИзмерения
	|	) КАК БланкиСтрогогоУчета
	|ИЗ
	|	Документ.СписаниеТоваров КАК СписаниеТоваров,
	|	Константы КАК Константы
	|ГДЕ
	|	СписаниеТоваров.Ссылка = &ТекущийДокумент
	|
	|УПОРЯДОЧИТЬ ПО
	|	СписаниеТоваров.Товары.НомерСтроки,
	|	СписаниеТоваров.ВозвратнаяТара.НомерСтроки,
	|	СписаниеТоваров.БланкиСтрогогоУчета.НомерСтроки
	|";
	
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_СписаниеТоваров_Ведомость";

	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.СписаниеТоваров.ПФ_MXL_Накладная");
	
	// печать производится на языке, указанном в настройках пользователя
	КодЯзыкаПечать = ПараметрыВывода.КодЯзыкаДляМногоязычныхПечатныхФорм;
	Макет.КодЯзыкаМакета = КодЯзыкаПечать;

	ПервыйДокумент = Истина;
	
	ОбластьКолонкаТоварШиринаКолонки = Макет.Область("Товар").ШиринаКолонки;
	ОбластьКолонкаКодовШиринаКолонки = Макет.Область("КолонкаКодов").ШиринаКолонки;
	
	Для Каждого Ссылка Из МассивОбъектов Цикл	
		
		Если Не ПервыйДокумент Тогда
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ПервыйДокумент = Ложь;
		
		// Запомним номер строки, с которой начали выводить текущий документ.
		НомерСтрокиНачало = ТабДокумент.ВысотаТаблицы + 1;
		
		ЗапросДокумент.УстановитьПараметр("ТекущийДокумент", Ссылка);
		
		Шапка = ЗапросДокумент.Выполнить().Выбрать();

		Шапка.Следующий();
		
		ВыборкаСтрокТовары = Шапка.Товары.Выбрать();
	    ВыборкаСтрокТара   = Шапка.ВозвратнаяТара.Выбрать();
		ВыборкаСтрокБланки = Шапка.БланкиСтрогогоУчета.Выбрать();
		
		// Выводим шапку накладной

		// шапка акта "УТВЕРЖДАЮ"
		ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
		
		ОбластьМакета.Параметры.Заполнить(Шапка);
		
		СведенияОбОрганизации = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Шапка.Организация, Шапка.Дата,,,КодЯзыкаПечать);
		РуководителиОрганизации = ОтветственныеЛицаБП.ОтветственныеЛица(Шапка.Организация, Шапка.Дата);
		
		ОбластьМакета.Параметры.ДолжностьРуководителяОрганизации = РуководителиОрганизации.РуководительДолжность;
		ОбластьМакета.Параметры.ПредставлениеОрганизации 		 = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОбОрганизации, "ПолноеНаименование,",,КодЯзыкаПечать);
		ОбластьМакета.Параметры.РуководительОрганизации 		 = РуководителиОрганизации.РуководительПредставление;
		
		ТабДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
		ОбластьМакета.Параметры.ТекстЗаголовка = ОбщегоНазначенияБПВызовСервера.СформироватьЗаголовокДокумента(Шапка, НСтр("ru='Акт списания  товаров';uk='Акт списання товарів'", КодЯзыкаПечать), КодЯзыкаПечать);
		ТабДокумент.Вывести(ОбластьМакета);

		ОбластьМакета = Макет.ПолучитьОбласть("Покупатель");
		ОбластьМакета.Параметры.ПредставлениеПолучателя = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОбОрганизации,,,КодЯзыкаПечать);
	 	
		ОбластьМакета.Параметры.Получатель = Шапка.Организация;
		ТабДокумент.Вывести(ОбластьМакета);

		СписокДополнительныхПараметров = "Склад,";
		МассивСтруктурСтрок = ОбщегоНазначенияБПВызовСервера.ДополнительнаяИнформация(Шапка, СписокДополнительныхПараметров, КодЯзыкаПечать);
		ОбластьМакета = Макет.ПолучитьОбласть("ДопИнформация");
	    Для Каждого СтруктураСтроки Из МассивСтруктурСтрок Цикл
			ОбластьМакета.Параметры.Заполнить(СтруктураСтроки); 		
		КонецЦикла;
		
		ОбластьМакета.Параметры.Основание = Шапка.Основание;
		ОбластьМакета.Параметры.СчетДт    = Шапка.СчетДт;
		ОбластьМакета.Параметры.Субконто1 = Шапка.СубконтоДт1;
		ОбластьМакета.Параметры.Субконто2 = Шапка.СубконтоДт2;
		ОбластьМакета.Параметры.Субконто3 = Шапка.СубконтоДт3;
		
		ОбластьМакета.Параметры.ВидСубконто1 = 
		  ?(Шапка.СчетДт.ВидыСубконто.Количество() >= 1, Строка(Шапка.СчетДт.ВидыСубконто[0].ВидСубконто) + ":", "");
		ОбластьМакета.Параметры.ВидСубконто2 = 
		  ?(Шапка.СчетДт.ВидыСубконто.Количество() >= 2, Строка(Шапка.СчетДт.ВидыСубконто[1].ВидСубконто) + ":", "");
		ОбластьМакета.Параметры.ВидСубконто3 = 
		  ?(Шапка.СчетДт.ВидыСубконто.Количество() >= 3, Строка(Шапка.СчетДт.ВидыСубконто[2].ВидСубконто) + ":", "");  	  
		
		ТабДокумент.Вывести(ОбластьМакета); 	
		
		СуммаТовары      = 0;
		КоличествоТовары = 0;
		
		МассивСсылок = Новый Массив;
		МассивСсылок.Добавить(Ссылка);
		ТаблицаСуммСписания = БухгалтерскийУчетПереопределяемый.ПолучитьСуммуСписанияАктивов(МассивСсылок, Шапка.Дата, Шапка.Дата);
		
		Если (ВыборкаСтрокТовары.Количество() + ВыборкаСтрокБланки.Количество())  > 0 Тогда
		
			ОбластьНомера = Макет.ПолучитьОбласть("ШапкаТаблицы|НомерСтроки");
			ОбластьКодов  = Макет.ПолучитьОбласть("ШапкаТаблицы|КолонкаКодов");
			ОбластьДанных = Макет.ПолучитьОбласть("ШапкаТаблицы|Данные");
			
			ОбластьДанных.Параметры.ТоварТара = НСтр("ru='Товар';uk='Товар'", КодЯзыкаПечать);

			ТабДокумент.Вывести(ОбластьНомера);
			Если ВыводитьКоды Тогда
				ОбластьКодов.Параметры.ИмяКолонкиКодов = Колонка;
				ТабДокумент.Присоединить(ОбластьКодов);
			КонецЕсли;
			
			СпособОценкиТоваровВРознице = УчетнаяПолитика.СпособОценкиТоваровВРознице(Шапка.Организация, НачалоМесяца(Шапка.Дата));
			мУчетВПродажныхЦенах = (СпособОценкиТоваровВРознице = Перечисления.СпособыОценкиТоваровВРознице.ПоПродажнойСтоимости);
			
			НТТ = мУчетВПродажныхЦенах И (Шапка.ТипСклада = Перечисления.ТипыСкладов.НеавтоматизированнаяТорговаяТочка); 

			Если НТТ Тогда
				ОбластьДанных.Параметры.Цена = НСтр("ru='Розн. цена';uk='Роздр. ціна'", КодЯзыкаПечать);
			Иначе	
				ОбластьДанных.Параметры.Цена = НСтр("ru='Цена';uk='Ціна'", КодЯзыкаПечать);
			КонецЕсли; 
			
			ТабДокумент.Присоединить(ОбластьДанных);
			
			ОбластьКолонкаТовар = Макет.Область("Товар");

			Если Не ВыводитьКоды Тогда
				ОбластьКолонкаТовар.ШиринаКолонки = ОбластьКолонкаТоварШиринаКолонки + ОбластьКолонкаКодовШиринаКолонки;
			КонецЕсли;

			ОбластьНомера = Макет.ПолучитьОбласть("Строка|НомерСтроки");
			ОбластьКодов  = Макет.ПолучитьОбласть("Строка|КолонкаКодов");
			ОбластьДанных = Макет.ПолучитьОбласть("Строка|Данные");
			
			Пока ВыборкаСтрокТовары.Следующий() Цикл

				Если НЕ ЗначениеЗаполнено(ВыборкаСтрокТовары.Номенклатура) Тогда
					Сообщить(НСтр("ru='В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.';uk='В одному з рядків не заповнене значення номенклатури - рядок під час друку буде пропущений.'"), СтатусСообщения.Важное);
					Продолжить;
				КонецЕсли;

				ОбластьНомера.Параметры.Заполнить(ВыборкаСтрокТовары);
				ТабДокумент.Вывести(ОбластьНомера);

				Если ВыводитьКоды Тогда
					Если Колонка = "Артикул" Тогда
						ОбластьКодов.Параметры.Артикул = ВыборкаСтрокТовары.Артикул;
					Иначе
						ОбластьКодов.Параметры.Артикул = ВыборкаСтрокТовары.Код;
					КонецЕсли;
					ТабДокумент.Присоединить(ОбластьКодов);
				КонецЕсли;

				ОбластьДанных.Параметры.Заполнить(ВыборкаСтрокТовары);
				
				Если НТТ Тогда
					
					 ОбластьДанных.Параметры.Цена  = ВыборкаСтрокТовары.Цена;
					 ОбластьДанных.Параметры.Сумма = ВыборкаСтрокТовары.Цена * ВыборкаСтрокТовары.Количество;
					 
					 СуммаТовары      = СуммаТовары + ВыборкаСтрокТовары.Цена * ВыборкаСтрокТовары.Количество;
					 КоличествоТовары = КоличествоТовары  + ВыборкаСтрокТовары.Количество;
					 
				Иначе	
					
					СтрокаСуммСписания = ТаблицаСуммСписания.Найти(ВыборкаСтрокТовары.Номенклатура, "Номенклатура");
					Если СтрокаСуммСписания = Неопределено Тогда
						
						 ОбластьДанных.Параметры.Цена = 0;
						 ОбластьДанных.Параметры.Сумма = 0
						 
					 Иначе
						 
						 Цена = ?(СтрокаСуммСписания.Количество = 0, 0, СтрокаСуммСписания.Сумма / СтрокаСуммСписания.Количество * ВыборкаСтрокТовары.Коэффициент);
						 
						 ОбластьДанных.Параметры.Цена = Цена;
						 ОбластьДанных.Параметры.Сумма = Цена * ВыборкаСтрокТовары.Количество;
						 
						 СуммаТовары      = СуммаТовары + Цена * ВыборкаСтрокТовары.Количество;
					 	 КоличествоТовары = КоличествоТовары + ВыборкаСтрокТовары.Количество;
						 
					 КонецЕсли;
				КонецЕсли; 	
				
				ТабДокумент.Присоединить(ОбластьДанных);
				
			КонецЦикла;
			
			Если Шапка.ВидОперации = Перечисления.ВидыОперацийСписаниеТоваров.БланкиСтрогогоУчета Тогда
				
				// выводим таблицу бланков
				
				ТаблицаСуммСписанияБланков = БухгалтерскийУчетПереопределяемый.ПолучитьСуммуСписанияАктивов(
												МассивСсылок, 
												Шапка.Дата, 
												Шапка.Дата,
												Истина // БланкиСтрогогоУчета
											 );
				
				Пока ВыборкаСтрокБланки.Следующий() Цикл

					Если НЕ ЗначениеЗаполнено(ВыборкаСтрокБланки.Номенклатура) Тогда
						Сообщить(НСтр("ru='В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.';uk='В одному з рядків не заповнене значення номенклатури - рядок під час друку буде пропущений.'"), СтатусСообщения.Важное);
						Продолжить;
					КонецЕсли;

					ОбластьНомера.Параметры.Заполнить(ВыборкаСтрокБланки);
					ТабДокумент.Вывести(ОбластьНомера);
					
					Если ВыводитьКоды Тогда
						Если Колонка = "Артикул" Тогда
							ОбластьКодов.Параметры.Артикул = ВыборкаСтрокБланки.Артикул;
						Иначе
							ОбластьКодов.Параметры.Артикул = ВыборкаСтрокБланки.Код;
						КонецЕсли;
						ТабДокумент.Присоединить(ОбластьКодов);
					КонецЕсли;
					
					ОбластьДанных.Параметры.Заполнить(ВыборкаСтрокБланки);
					
					СтрокаСуммСписания = Неопределено;
					СтрокаСуммСписания = ТаблицаСуммСписанияБланков.Найти(ВыборкаСтрокБланки.Номенклатура, "Номенклатура");
										
					Если СтрокаСуммСписания = Неопределено Тогда
						ОбластьДанных.Параметры.Цена  = 0;
						ОбластьДанных.Параметры.Сумма = 0;
					Иначе
						Цена = ?(СтрокаСуммСписания.Количество = 0, 0, СтрокаСуммСписания.Сумма / СтрокаСуммСписания.Количество);
						ОбластьДанных.Параметры.Цена  = Цена;
						ОбластьДанных.Параметры.Сумма = Цена * ВыборкаСтрокБланки.Количество;
						
						СуммаТовары      = СуммаТовары + Цена * ВыборкаСтрокБланки.Количество;
					 	КоличествоТовары = КоличествоТовары + ВыборкаСтрокБланки.Количество;
						
					КонецЕсли;		
					 
					ТабДокумент.Присоединить(ОбластьДанных);
					
				КонецЦикла;   	
			КонецЕсли;
			
			// Вывести Итого по товарам и бланкам
			ОбластьНомера = Макет.ПолучитьОбласть("Итого|НомерСтроки");
			ОбластьКодов  = Макет.ПолучитьОбласть("Итого|КолонкаКодов");
			ОбластьДанных = Макет.ПолучитьОбласть("Итого|Данные");
			
			ТабДокумент.Вывести(ОбластьНомера);
			
			Если ВыводитьКоды Тогда
				ТабДокумент.Присоединить(ОбластьКодов);
			КонецЕсли;
			
			ОбластьДанных.Параметры.Всего = ОбщегоНазначенияБПВызовСервера.ФорматСумм(СуммаТовары);
			
			ТабДокумент.Присоединить(ОбластьДанных);
		
		КонецЕсли;

		СуммаТара      = 0;
		КоличествоТара = 0;
		
		// выведем таблицу с возвратной тарой
		Если ВыборкаСтрокТара.Количество() > 0 Тогда
			
			Если (Не ВыводитьКоды) И ((ВыборкаСтрокТовары.Количество() + ВыборкаСтрокБланки.Количество()) = 0) Тогда
				// корректировки ширины колонки Товары еще не было
				ОбластьКолонкаТовар = Макет.Область("Товар");
				ОбластьКолонкаТовар.ШиринаКолонки = ОбластьКолонкаТоварШиринаКолонки + ОбластьКолонкаКодовШиринаКолонки;
			КонецЕсли; 
			
			// сделаем отступ от основной таблицы
			ОбластьПробел = Макет.ПолучитьОбласть("Пробел");
			ТабДокумент.Вывести(ОбластьПробел);
			
			ОбластьНомера = Макет.ПолучитьОбласть("ШапкаТаблицы|НомерСтроки");
			ОбластьКодов  = Макет.ПолучитьОбласть("ШапкаТаблицы|КолонкаКодов");
			ОбластьДанных = Макет.ПолучитьОбласть("ШапкаТаблицы|Данные");
			
			ОбластьДанных.Параметры.ТоварТара = НСтр("ru='Возвратная тара';uk='Зворотна тара'", КодЯзыкаПечать);
			ОбластьДанных.Параметры.Цена      = НСтр("ru='Цена';uk='Ціна'", КодЯзыкаПечать);
			
			ТабДокумент.Вывести(ОбластьНомера);
			Если ВыводитьКоды Тогда
				ОбластьКодов.Параметры.ИмяКолонкиКодов = Колонка;
				ТабДокумент.Присоединить(ОбластьКодов);
			КонецЕсли;
			
			ТабДокумент.Присоединить(ОбластьДанных);
			
			ОбластьНомера = Макет.ПолучитьОбласть("Строка|НомерСтроки");
			ОбластьКодов  = Макет.ПолучитьОбласть("Строка|КолонкаКодов");
			ОбластьДанных = Макет.ПолучитьОбласть("Строка|Данные");
			
			Пока ВыборкаСтрокТара.Следующий() Цикл 
				
				Если НЕ ЗначениеЗаполнено(ВыборкаСтрокТара.Номенклатура) Тогда
					Сообщить(НСтр("ru='В одной из строк не заполнено значение тары - строка при печати пропущена.';uk='В одному з рядків не заповнене значення тари - рядок під час друку буде пропущений.'"), СтатусСообщения.Важное);
					Продолжить;
				КонецЕсли;
				
				ОбластьНомера.Параметры.Заполнить(ВыборкаСтрокТара);
				ТабДокумент.Вывести(ОбластьНомера);
				
				Если ВыводитьКоды Тогда
					Если Колонка = "Артикул" Тогда
						ОбластьКодов.Параметры.Артикул = ВыборкаСтрокТара.Артикул;
					Иначе
						ОбластьКодов.Параметры.Артикул = ВыборкаСтрокТара.Код;
					КонецЕсли;
					ТабДокумент.Присоединить(ОбластьКодов);
				КонецЕсли;
				
				ОбластьДанных.Параметры.Заполнить(ВыборкаСтрокТара);
				ОбластьДанных.Параметры.Товар = СокрП(ВыборкаСтрокТара.Товар);			
				
				СтрокаСуммСписания = ТаблицаСуммСписания.Найти(ВыборкаСтрокТара.Номенклатура, "Номенклатура");
				Если СтрокаСуммСписания = Неопределено Тогда
					 ОбластьДанных.Параметры.Цена  = 0;
					 ОбластьДанных.Параметры.Сумма = 0; 
				 Иначе
					 Цена = ?(СтрокаСуммСписания.Количество = 0, 0, СтрокаСуммСписания.Сумма / СтрокаСуммСписания.Количество);
					 ОбластьДанных.Параметры.Цена  = Цена;
					 ОбластьДанных.Параметры.Сумма = Цена * ВыборкаСтрокТара.Количество;
					 
					 СуммаТара      = СуммаТара + Цена * ВыборкаСтрокТара.Количество;
				 	 КоличествоТара = КоличествоТара + ВыборкаСтрокТара.Количество;
					 
					 СуммаТовары      = СуммаТовары + Цена * ВыборкаСтрокТара.Количество;
				 	 КоличествоТовары = КоличествоТовары + ВыборкаСтрокТара.Количество;
					 
				 КонецЕсли;
				 
				 ТабДокумент.Присоединить(ОбластьДанных);
				
			КонецЦикла;
			
			ОбластьНомера = Макет.ПолучитьОбласть("Итого|НомерСтроки");
			ОбластьКодов  = Макет.ПолучитьОбласть("Итого|КолонкаКодов");
			ОбластьДанных = Макет.ПолучитьОбласть("Итого|Данные");
			
			ТабДокумент.Вывести(ОбластьНомера);
			
			Если ВыводитьКоды Тогда
				ТабДокумент.Присоединить(ОбластьКодов);
			КонецЕсли;
			
			ОбластьДанных.Параметры.Всего = ОбщегоНазначенияБПВызовСервера.ФорматСумм(СуммаТара);
			
			ТабДокумент.Присоединить(ОбластьДанных);
			
			// сделаем отступ 
			ТабДокумент.Вывести(ОбластьПробел);
			
		КонецЕсли;	
		
		// Вывести Сумму прописью
		ОбластьМакета = Макет.ПолучитьОбласть("СуммаПрописью");
		
		Если Шапка.ВидОперации = Перечисления.ВидыОперацийСписаниеТоваров.БланкиСтрогогоУчета Тогда
			
			ОбластьМакета.Параметры.ИтоговаяСтрока =  НСтр("ru='Всего за этим актом списано ';uk='Всього за цим актом списано '", КодЯзыкаПечать) + КоличествоТовары
		                                         +  НСтр("ru='  предметов, на сумму ';uk='  предметів, на суму '", КодЯзыкаПечать) + ОбщегоНазначенияБПВызовСервера.ФорматСумм(СуммаТовары, Шапка.ВалютаДокумента) + ".";
			
		Иначе
			
			ОбластьМакета.Параметры.ИтоговаяСтрока =  НСтр("ru='Всего за этим актом списано ';uk='Всього за цим актом списано '", КодЯзыкаПечать) 
													  + КоличествоТовары
		                                              + НСтр("ru='  предметов, на сумму ';uk='  предметів, на суму '", КодЯзыкаПечать) 
													  + ОбщегоНазначенияБПВызовСервера.ФорматСумм(СуммаТовары, Шапка.ВалютаДокумента)
												      + ?(КоличествоТара = 0, 
												 			"", 
															НСтр("ru='; возвратная тара ';uk='; зворотна тара '", КодЯзыкаПечать) 
															+ КоличествоТара 
															+ НСтр("ru=', на сумму ';uk=', на суму '", КодЯзыкаПечать) 
															+ ОбщегоНазначенияБПВызовСервера.ФорматСумм(СуммаТара, Шапка.ВалютаДокумента)
														 ) 
												 	  + ".";
		КонецЕсли;
		
		ОбластьМакета.Параметры.СуммаПрописью  = ОбщегоНазначенияБПВызовСервера.СформироватьСуммуПрописью(СуммаТовары, Шапка.ВалютаДокумента, КодЯзыкаПечать);
		ТабДокумент.Вывести(ОбластьМакета);

		// Вывести подписи
		ОбластьМакета = Макет.ПолучитьОбласть("Подписи");

		ВыборкаПоКомиссии = ОбщегоНазначенияБПВызовСервера.ПолучитьСведенияОКомиссии(Ссылка);
		ОбластьМакета.Параметры.Заполнить(ВыборкаПоКомиссии);
		
		ТабДокумент.Вывести(ОбластьМакета);
			
		// В табличном документе зададим имя области, в которую был 
		// выведен объект. Нужно для возможности печати покомплектно.
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабДокумент, 
			НомерСтрокиНачало, ОбъектыПечати, Ссылка);
		
	КонецЦикла;
	
	Возврат ТабДокумент;

КонецФункции // ПечатьСписаниеТоваров()
	
// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходимое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	ПараметрыВывода.ДоступнаПечатьПоКомплектно = Истина;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "Ведомость") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "Ведомость", НСтр("ru='Акт списания товаров';uk='Акт списання товарів'"), 
		ПечатьСписаниеТоваров(МассивОбъектов, ОбъектыПечати, ПараметрыВывода),,"Документ.ОприходованиеТоваров.ПФ_MXL_Накладная", , Истина);
	КонецЕсли;
	
	//ИНАГРО ++
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "СписаниеЗапчастей") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "СписаниеЗапчастей", НСтр("ru='Лимитно-заборная карта на списание зап.частей';uk='Лімітно-забірна карта на списання зап.частин'"), 
		ПечатьСписаниеЗапчастей(МассивОбъектов, ОбъектыПечати, ПараметрыВывода),,"Документ.ОприходованиеТоваров.ПФ_MXL_СписаниеЗапчастей", , Истина);
	КонецЕсли;
	//ИНАГРО --

 	
КонецПроцедуры // Печать

Функция ПолучитьДополнительныеРеквизитыДляРеестра() Экспорт
	
	Результат = Новый Структура("Информация", "Склад");
	
	Возврат Результат;
	
КонецФункции

// Функция формирует табличный документ с печатной формой накладной,
// разработанной методистами
//
// Возвращаемое значение:
//  Табличный документ - печатная форма накладной
Функция ПечатьСписаниеЗапчастей(МассивОбъектов, ОбъектыПечати, ПараметрыВывода) // ИНАГРО
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТабДокумент = Новый ТабличныйДокумент;		
	ПервыйДокумент = Истина;
	Для каждого Ссылка Из МассивОбъектов Цикл
		Если Не ПервыйДокумент Тогда
			ТабДокумент.ВывестиВертикальныйРазделительСтраниц();				
		КонецЕсли; 
		ПервыйДокумент = Ложь;	
		
		//запрос по шапке документа
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ТекущийДокумент", Ссылка);
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СписаниеТоваров.Номер КАК Номер,
		|	СписаниеТоваров.Дата КАК Дата,
		|	СписаниеТоваров.Ответственный.ФизическоеЛицо.Наименование КАК Получил,
		|	СписаниеТоваров.Организация КАК Организация,
		|	СписаниеТоваров.Организация КАК Поставщик,
		|	СписаниеТоваров.Склад КАК Склад,
		|	СписаниеТоваров.ИНАГРО_ОсновноеСредство КАК ОсновноеСредство,
		|	СписаниеТоваров.СчетДт КАК Дт,
		|	СписаниеТоваров.Организация.КодПоЕДРПОУ КАК ЕДРПОУ
		|ИЗ
		|	Документ.СписаниеТоваров КАК СписаниеТоваров
		|ГДЕ
		|	СписаниеТоваров.Ссылка = &ТекущийДокумент";
		
		
		Запрос.УстановитьПараметр("Организация",Ссылка.Организация );
		Запрос.УстановитьПараметр("Момент", Ссылка.МоментВремени());
	
		Шапка = Запрос.Выполнить().Выбрать();
		Шапка.Следующий();
		
		//запрос по табличной части документа
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ТекущийДокумент", Ссылка);
		Запрос.УстановитьПараметр("ПустаяЕдиницаИзмерения", Справочники.КлассификаторЕдиницИзмерения.ПустаяСсылка());
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВложенныйЗапросПоТоварам.Номенклатура,
		|	ВЫРАЗИТЬ(ВложенныйЗапросПоТоварам.Номенклатура.НаименованиеПолное КАК СТРОКА(1000)) КАК Товар,
		|	ВложенныйЗапросПоТоварам.Номенклатура.Код КАК Код,
		|	ВложенныйЗапросПоТоварам.Количество,
		|	ВложенныйЗапросПоТоварам.ЕдиницаИзмерения.Наименование КАК ЕдиницаИзмерения,
		|	ВложенныйЗапросПоТоварам.НомерСтроки КАК НомерСтроки,
		|	1 КАК ID,
		|	ВложенныйЗапросПоТоварам.Цена,
		|	ВложенныйЗапросПоТоварам.Сумма,
		|	ВложенныйЗапросПоТоварам.Коэффициент,
		|	ВложенныйЗапросПоТоварам.Дата,
		|	ВложенныйЗапросПоТоварам.Кт
		|ИЗ
		|	(ВЫБРАТЬ
		|		СписаниеТоваровТовары.Номенклатура КАК Номенклатура,
		|		СписаниеТоваровТовары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|		СУММА(СписаниеТоваровТовары.Количество) КАК Количество,
		|		МИНИМУМ(СписаниеТоваровТовары.НомерСтроки) КАК НомерСтроки,
		|		МИНИМУМ(СписаниеТоваровТовары.Цена * СписаниеТоваровТовары.Коэффициент) КАК Цена,
		|		МИНИМУМ(СписаниеТоваровТовары.Сумма * СписаниеТоваровТовары.Коэффициент) КАК Сумма,
		|		МИНИМУМ(СписаниеТоваровТовары.Коэффициент) КАК Коэффициент,
		|		СписаниеТоваровТовары.Ссылка.Дата КАК Дата,
		|		СписаниеТоваровТовары.СчетУчетаБУ КАК Кт
		|	ИЗ
		|		Документ.СписаниеТоваров.Товары КАК СписаниеТоваровТовары
		|	ГДЕ
		|		СписаниеТоваровТовары.Ссылка = &ТекущийДокумент
		|	
		|	СГРУППИРОВАТЬ ПО
		|		СписаниеТоваровТовары.Номенклатура,
		|		СписаниеТоваровТовары.ЕдиницаИзмерения,
		|		СписаниеТоваровТовары.Ссылка.Дата,
		|		СписаниеТоваровТовары.СчетУчетаБУ) КАК ВложенныйЗапросПоТоварам
		|
		|УПОРЯДОЧИТЬ ПО
		|	ID,
		|	НомерСтроки";
		
		ЗапросТовары = Запрос.Выполнить().Выгрузить();
		
		// Вывод заголовка
		Макет = ПолучитьМакет("ПФ_MXL_СписаниеЗапчастей");
		
		// печать производится на языке, указанном в настройках
		КодЯзыкаПечать = ПараметрыВывода.КодЯзыкаДляМногоязычныхПечатныхФорм;
		Макет.КодЯзыкаМакета = КодЯзыкаПечать;
		
		ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
		
		ОбластьМакета.Параметры.Заполнить(Шапка);
		ОбластьМакета.Параметры.Дата=Формат(Ссылка.Дата, "ДФ='дд ММММ гггг';Л="+ Локализация.ОпределитьКодЯзыкаДляФормат(КодЯзыкаПечать)) + НСтр("ru=' г.';uk=' р.'",КодЯзыкаПечать);
		ТабДокумент.Вывести(ОбластьМакета);
		
		// Вывести табличную часть
		ОбластьМакета = Макет.ПолучитьОбласть("СтрокаВыдано");
		ОбластьМакетаПодвал = Макет.ПолучитьОбласть("Подвал");

		ТаблицаСуммСписания = БухгалтерскийУчетПереопределяемый.ПолучитьСуммуСписанияАктивов(МассивОбъектов, Ссылка.Дата, Ссылка.Дата);
		Сумма = 0;
		Для каждого ВыборкаСтрокТовары Из ЗапросТовары Цикл 
			
			Если НЕ ЗначениеЗаполнено(ВыборкаСтрокТовары.Номенклатура) Тогда
				Сообщить(НСтр("ru='В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.';uk='В одному з рядків не заповнене значення номенклатури - рядок під час друку буде пропущений.'"), СтатусСообщения.Важное);
				Продолжить;
			КонецЕсли;
			
			ОбластьМакета.Параметры.Заполнить(ВыборкаСтрокТовары);
			ОбластьМакета.Параметры.Номенклатура 		= СокрЛП(ВыборкаСтрокТовары.Товар);
			СтрокаСуммСписания =  ТаблицаСуммСписания.Найти(ВыборкаСтрокТовары.Номенклатура, "Номенклатура");
			Если СтрокаСуммСписания = Неопределено Тогда
				 ОбластьМакета.Параметры.Цена = 0;
				 ОбластьМакета.Параметры.Сумма = 0
			 Иначе
				 Цена = ?(СтрокаСуммСписания.Количество = 0, 0, СтрокаСуммСписания.Сумма / СтрокаСуммСписания.Количество * ВыборкаСтрокТовары.Коэффициент);
				 ОбластьМакета.Параметры.Цена = Цена;
				 Сумма = Сумма + Цена * ВыборкаСтрокТовары.Количество;
				 ОбластьМакета.Параметры.Сумма = Цена * ВыборкаСтрокТовары.Количество;
			 КонецЕсли;
			ТабДокумент.Вывести(ОбластьМакета);
			
			ОбластьМакетаПодвал.Параметры.Кт = ЗапросТовары[0].Кт;
		КонецЦикла;
		
		// Вывести Итого
		ОбластьМакета = Макет.ПолучитьОбласть("ИтогВыдано");
		ОбластьМакета.Параметры.Сумма = Сумма;
		ТабДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Возвращено");
		ТабДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакетаПодвал.Параметры.Заполнить(Шапка);
		ТабДокумент.Вывести(ОбластьМакетаПодвал);
	КонецЦикла;	
		Возврат ТабДокумент;
		
	КонецФункции 

#КонецОбласти  

#Область ПрограммныйИнтерфейс

// Заполняет счета учета номенклатуры в табличной части документа
Процедура ЗаполнитьСчетаУчетаВТабличнойЧасти(Объект, ИмяТабличнойЧасти) Экспорт

	ТабличнаяЧасть = Объект[ИмяТабличнойЧасти];
	
	ДанныеОбъекта = Новый Структура("Дата, Организация, Склад");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
	СоответствиеСчетовУчета = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаУчетаСпискаНоменклатуры(
		ДанныеОбъекта.Организация, ОбщегоНазначения.ВыгрузитьКолонку(ТабличнаяЧасть, "Номенклатура", Истина), ДанныеОбъекта.Склад, ДанныеОбъекта.Дата);
	
	Для Каждого СтрокаТабличнойЧасти Из ТабличнаяЧасть Цикл
		СчетаУчета = СоответствиеСчетовУчета.Получить(СтрокаТабличнойЧасти.Номенклатура);
		ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(ДанныеОбъекта, СтрокаТабличнойЧасти, ИмяТабличнойЧасти, СчетаУчета);
	КонецЦикла;

КонецПроцедуры // ЗаполнитьСчетаУчетаВТабличнойЧасти

// Заполняет счета учета номенклатуры в строке табличной части документа
//
// Параметры:
//  ДанныеОбъекта         - структура данных объекта, используемых при заполнении счетов учета (вид операции,
//                          вид договора контрагента, признак комиссионной торговли и т.п.)
//  СтрокаТабличнойЧасти  - строка табличной части документа
//  ИмяТабличнойЧасти     - имя табличной части документа
//  СведенияОНоменклатуре - структура сведений о номенклатуре, либо структура счетов учета
//
Процедура ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(ДанныеОбъекта, СтрокаТабличнойЧасти, ИмяТабличнойЧасти = "", СведенияОНоменклатуре, ЗаполнятьБУ = Истина, ЗаполнятьНУ = Истина) Экспорт

	Если СведенияОНоменклатуре = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если СведенияОНоменклатуре.Свойство("СчетаУчета") Тогда
		// СведенияОНоменклатуре - структура сведений номенклатуры
		СчетаУчета = СведенияОНоменклатуре.СчетаУчета;
	ИначеЕсли СведенияОНоменклатуре.Свойство("СчетУчетаБУ") Тогда
		// СведенияОНоменклатуре - структура счетов учета номенклатуры
		СчетаУчета = СведенияОНоменклатуре;
	Иначе
		Возврат;
	КонецЕсли;
	
	Если ЗаполнятьБУ Тогда
		ЗаполнитьСчетаБУ(ДанныеОбъекта, СтрокаТабличнойЧасти, ИмяТабличнойЧасти, СчетаУчета);
	КонецЕсли; 
	Если ЗаполнятьНУ Тогда
		ЗаполнитьСчетаНУ(ДанныеОбъекта, СтрокаТабличнойЧасти, ИмяТабличнойЧасти, СчетаУчета);
	КонецЕсли; 

КонецПроцедуры // ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти

Функция ПолучитьФиксированныйМассивВидовОпераций() Экспорт

	МассивВидовОпераций = Новый Массив;
	СписокВидовОпераций = Новый СписокЗначений;
	
	ЗначенияПеречисления = Метаданные.Перечисления.ВидыОперацийСписаниеТоваров.ЗначенияПеречисления;
	Для Каждого ЗначениеПеречисления Из ЗначенияПеречисления Цикл
		ТекущийВидОперации = Перечисления.ВидыОперацийСписаниеТоваров[ЗначениеПеречисления.Имя];
		МассивВидовОпераций.Добавить(ТекущийВидОперации);
	КонецЦикла;
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьБланкиСтрогогоУчета") Тогда
		ИндексНайденныйЭлемент = МассивВидовОпераций.Найти(Перечисления.ВидыОперацийСписаниеТоваров.БланкиСтрогогоУчета);
		Если ИндексНайденныйЭлемент <> Неопределено Тогда
    		МассивВидовОпераций.Удалить(ИндексНайденныйЭлемент);
		КонецЕсли;	
	КонецЕсли;
	
	Возврат Новый ФиксированныйМассив(МассивВидовОпераций);

КонецФункции // ПолучитьФиксированныйМассивВидовОпераций

Функция ОпределитьВидОперацииПоДокументуОснованию(Основание) Экспорт

	Результат = Перечисления.ВидыОперацийСписаниеТоваров.ТоварыПродукция;

	Возврат Результат;

КонецФункции // ОпределитьВидОперацииПоДокументуОснованию

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти  

#Область СлужебныеПроцедурыИФункции

// Заполняет счета БУ в строке табличной части.
Процедура ЗаполнитьСчетаБУ(Объект, СтрокаТЧ, ИмяТабЧасти, СчетаУчета)

	Если ВРег(ИмяТабЧасти) = ВРег("БланкиСтрогогоУчета") Тогда
		
		СтрокаТЧ.СчетУчетаБУ             = СчетаУчета.СчетУчетаБУ;
		СтрокаТЧ.СчетУчетаЗабалансовыйБУ = СчетаУчета.СчетУчетаДоп;
	
	Иначе
		
		СтрокаТЧ.СчетУчетаБУ = СчетаУчета.СчетУчетаБУ;
			
	КонецЕсли;


КонецПроцедуры // ЗаполнитьСчетаБУ()

// Заполняет счета НУ в строке табличной части.
Процедура ЗаполнитьСчетаНУ(Объект, СтрокаТЧ, ИмяТабЧасти, СчетаУчета)
	
	СтрокаТЧ.НалоговоеНазначение 		= СчетаУчета.НалоговоеНазначение;

КонецПроцедуры // ЗаполнитьСчетаНУ()

Функция ПолучитьСоответствиеВидовОперацийФормам() Экспорт

	ФормыСписаниеТоваров = Новый Соответствие;
	
	ФормыСписаниеТоваров.Вставить(Перечисления.ВидыОперацийСписаниеТоваров.ТоварыПродукция, 	 "ФормаДокументаОбщая");
	ФормыСписаниеТоваров.Вставить(Перечисления.ВидыОперацийСписаниеТоваров.Оборудование, 		 "ФормаДокументаОбщая");
	ФормыСписаниеТоваров.Вставить(Перечисления.ВидыОперацийСписаниеТоваров.БланкиСтрогогоУчета, "ФормаДокументаОбщая");
	
	Возврат ФормыСписаниеТоваров;

КонецФункции // ПолучитьСоответствиеВидовОперацийФормам

#КонецОбласти  

#Область ОбработчикиСобытий

Процедура ОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка)
	
	Если ВидФормы <> "ФормаДокумента"
		И ВидФормы <> "ФормаОбъекта" Тогда
		Возврат;
	КонецЕсли;

	ВидОперации = Неопределено; 

	Если Параметры.Свойство("Ключ") И ЗначениеЗаполнено(Параметры.Ключ) Тогда
		ВидОперации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Параметры.Ключ, "ВидОперации");
	КонецЕсли;

	// Если документ копируется, то вид формы получаем из копируемого документа.
	Если НЕ ЗначениеЗаполнено(ВидОперации) Тогда
		Если Параметры.Свойство("ЗначениеКопирования")
			И ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
			ВидОперации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
				Параметры.ЗначениеКопирования, "ВидОперации");
		КонецЕсли;
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(ВидОперации) Тогда
		Если Параметры.Свойство("ЗначенияЗаполнения") 
			И ТипЗнч(Параметры.ЗначенияЗаполнения) = Тип("Структура") Тогда
			Если Параметры.ЗначенияЗаполнения.Свойство("ВидОперации") Тогда
				ВидОперации = Параметры.ЗначенияЗаполнения.ВидОперации;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ВидОперации) Тогда
		Если Параметры.Свойство("Основание")
			И ЗначениеЗаполнено(Параметры.Основание) Тогда
			ВидОперации = ОпределитьВидОперацииПоДокументуОснованию(Параметры.Основание);
		КонецЕсли;
	КонецЕсли;

	СтандартнаяОбработка = Ложь;
	ФормыСписаниеТоваров = ПолучитьСоответствиеВидовОперацийФормам();
	ВыбраннаяФорма = ФормыСписаниеТоваров[ВидОперации];
	Если ВыбраннаяФорма = Неопределено Тогда
		ВыбраннаяФорма = "ФормаДокумента";
	КонецЕсли;
	
КонецПроцедуры // ОбработкаПолученияФормы

#КонецОбласти  

#КонецЕсли