#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	
	Если Параметры.Ключ.Пустая() Тогда
		ПодготовитьФормуНаСервере();
	КонецЕсли;
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	ПодготовитьФормуНаСервере();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ИсточникВыбора.ИмяФормы = "Обработка.ПодборОсновныхСредств.Форма.Форма" Тогда
		ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ПодготовитьФормуНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	ОбщегоНазначенияБПКлиент.ОбработкаОповещенияФормыДокумента(ЭтаФорма, Объект.Ссылка, ИмяСобытия, Параметр, Источник);
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)

	Если НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДатаДокумента) Тогда
		// Изменение времени не влияет на поведение документа.
		ТекущаяДатаДокумента = Объект.Дата;
		Возврат;
	КонецЕсли;

	// Общие проверки условий по датам.
	ТребуетсяВызовСервера = ОбщегоНазначенияБПКлиент.ТребуетсяВызовСервераПриИзмененииДатыДокумента(Объект.Дата, 
		ТекущаяДатаДокумента);

	// Проверим наличие строк в табличной части.
	Если НЕ ТребуетсяВызовСервера Тогда
		Если Объект.ОС.Количество() > 0 Тогда
			ТребуетсяВызовСервера = НЕ ЗначениеЗаполнено(МаксПериодПервоначальныхСведенийОС) 
				ИЛИ (МаксПериодПервоначальныхСведенийОС >= Объект.Дата);
		КонецЕсли;
	КонецЕсли;
		
	// Если определили, что изменение даты может повлиять на какие-либо параметры, 
	// то передаем обработку на сервер.
	Если ТребуетсяВызовСервера Тогда
		ДатаПриИзмененииНаСервере();
	КонецЕсли;
	
	// Запомним новую дату документа.
	ТекущаяДатаДокумента = Объект.Дата;
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		ЗаполнитьИнвентарныеНомераОС();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОСОсновноеСредствоПриИзменении(Элемент)
	
	СтрокаТЧ = Элементы.ОС.ТекущиеДанные;
	ОсновноеСредство = СтрокаТЧ.ОсновноеСредство;
	Если НЕ ЗначениеЗаполнено(ОсновноеСредство) Тогда
		СтрокаТЧ.ИнвентарныйНомер = "";
	Иначе
		СтруктураСведений 					= СведенияОбИнвентарномНомереОС(ОсновноеСредство, Объект.Организация, Объект.Дата);
		СтрокаТЧ.ИнвентарныйНомер 			= СтруктураСведений.ИнвентарныйНомер;
		МаксПериодПервоначальныхСведенийОС 	= Макс(МаксПериодПервоначальныхСведенийОС, СтруктураСведений.Период);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования,ЭтотОбъект,"Объект.Комментарий");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТабличнойЧастиФормы

&НаКлиенте
Процедура ОССпособНачисленияАмортизацииБУНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Элемент.СписокВыбора.ЗагрузитьЗначения(ПолучитьМассивСпособовАмортизацииБУ());
КонецПроцедуры

&НаКлиенте
Процедура ОССпособНачисленияАмортизацииНУНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтрокаТЧ = Элементы.ОС.ТекущиеДанные;
	Элемент.СписокВыбора.ЗагрузитьЗначения(ПолучитьМассивСпособовАмортизацииНУ(СтрокаТЧ.СпособНачисленияАмортизацииБУ, Объект.Дата));
КонецПроцедуры


&НаКлиенте
Процедура ОССпособНачисленияАмортизацииБУПриИзменении(Элемент)
	
	СтрокаТЧ = Элементы.ОС.ТекущиеДанные;
	
	Если Объект.Дата >= Дата('20200301') Тогда
		СтрокаТЧ.СпособНачисленияАмортизацииНУ = СтрокаТЧ.СпособНачисленияАмортизацииБУ;
	ИначеЕсли СтрокаТЧ.СпособНачисленияАмортизацииБУ <> ПредопределенноеЗначение("Перечисление.СпособыНачисленияАмортизацииОС.Производственный") Тогда
		СтрокаТЧ.СпособНачисленияАмортизацииНУ = СтрокаТЧ.СпособНачисленияАмортизацииБУ;;
	Иначе	
		СтрокаТЧ.СпособНачисленияАмортизацииНУ = ПредопределенноеЗначение("Перечисление.СпособыНачисленияАмортизацииОС.Прямолинейный");
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьМассивСпособовАмортизацииБУ() Экспорт
                                                                                                        
	МассивСпособовАмортизации = Новый Массив;
	
	МассивСпособовАмортизации.Добавить(Перечисления.СпособыНачисленияАмортизацииОС.Прямолинейный);
	МассивСпособовАмортизации.Добавить(Перечисления.СпособыНачисленияАмортизацииОС.Производственный);
	МассивСпособовАмортизации.Добавить(Перечисления.СпособыНачисленияАмортизацииОС.УменьшенияОстатка);
	МассивСпособовАмортизации.Добавить(Перечисления.СпособыНачисленияАмортизацииОС.УскоренногоУменьшенияОстатка);
	МассивСпособовАмортизации.Добавить(Перечисления.СпособыНачисленияАмортизацииОС.Кумулятивный);
	
	Возврат МассивСпособовАмортизации;

КонецФункции // ПолучитьМассивСпособовАмортизацииБУ()

&НаСервереБезКонтекста
Функция ПолучитьМассивСпособовАмортизацииНУ(СпособАмортизацииБУ, ДатаИзменениеПараметров) Экспорт
                                                                                                        
	МассивСпособовАмортизации = Новый Массив;
	
	МассивСпособовАмортизации.Добавить(Перечисления.СпособыНачисленияАмортизацииОС.Прямолинейный);
	МассивСпособовАмортизации.Добавить(Перечисления.СпособыНачисленияАмортизацииОС.УменьшенияОстатка);
	МассивСпособовАмортизации.Добавить(Перечисления.СпособыНачисленияАмортизацииОС.УскоренногоУменьшенияОстатка);
	МассивСпособовАмортизации.Добавить(Перечисления.СпособыНачисленияАмортизацииОС.Кумулятивный);
	
	Если ДатаИзменениеПараметров >= Дата('20200301') 
			И СпособАмортизацииБУ = Перечисления.СпособыНачисленияАмортизацииОС.Производственный Тогда
		МассивСпособовАмортизации.Добавить(Перечисления.СпособыНачисленияАмортизацииОС.Производственный);	
	КонецЕсли;
	
	Возврат МассивСпособовАмортизации;

КонецФункции // ПолучитьМассивСпособовАмортизацииБУ()


#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗаполнитьПоНаименованию(Команда)
	
	ОсновноеСредство = УправлениеВнеоборотнымиАктивамиКлиент.ПолучитьОСДляЗаполнениеПоНаименованию(
		ПараметрыЗаполненияПоНаименованию(ЭтаФорма));
	
	Если ЗначениеЗаполнено(ОсновноеСредство) Тогда
		
		ЗаполнитьПоНаименованиюСервер(ОсновноеСредство);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подбор(Команда)
	
	ПараметрыФормы = Новый Структура;
	Если Объект.ОС.Количество() > 0 Тогда
		ПараметрыФормы.Вставить("АдресОСВХранилище", ПоместитьОСВХранилище());
	КонецЕсли;
	
	ОткрытьФорму("Обработка.ПодборОсновныхСредств.Форма.Форма", ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДляСпискаОС(Команда)
	
	Если Объект.Проведен Тогда
		ПоказатьПредупреждение(Неопределено, НСтр("ru='Заполнение возможно только в непроведенном документе';uk='Заповнення можливе тільки в непроведеному документі'"), 60);
		Возврат;
	КонецЕсли;
	
	ОчиститьСообщения();
	
	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		ТекстСообщения = ОбщегоНазначенияБПКлиентСервер.ПолучитьТекстСообщения(, , НСтр("ru='Организация';uk='Організація'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Объект.Организация");
		Возврат;
	КонецЕсли;
	
	ТекстВопроса = НСтр("ru='При заполнении существующие данные будут пересчитаны!
|Продолжить?';uk='При заповненні існуючі дані будуть перераховані!
|Продовжити?'");
	ПоказатьВопрос(Новый ОписаниеОповещения("ЗаполнитьДляСпискаОСЗавершение", ЭтотОбъект), ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДляСпискаОСЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Ответ = РезультатВопроса;
    Если Ответ = КодВозвратаДиалога.Нет Тогда
        Возврат;
    КонецЕсли;
    
    ЗаполнитьДляСпискаОССервер();

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ПодготовитьФормуНаСервере()
	
	ТекущаяДатаДокумента			= Объект.Дата;

	ЗаполнитьИнвентарныеНомераОС();
	
	УстановитьСостояниеДокумента();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьИнвентарныеНомераОС()
	
	ТаблицаОС = Объект.ОС.Выгрузить();
	
	ТаблицаНомеров = УчетОС.ПолучитьТаблицуИнвентарныхНомеровОС(ТаблицаОС,
		Объект.Организация, Объект.Дата);
		
	ТаблицаОС.ЗагрузитьКолонку(ТаблицаНомеров.ВыгрузитьКолонку("ИнвентарныйНомер"), "ИнвентарныйНомер");
	Объект.ОС.Загрузить(ТаблицаОС);
	
	// Запомним максимальную дату первоначальных сведений ОС
	ТаблицаНомеров.Сортировать("Период");
	Если ТаблицаНомеров.Количество() > 0 Тогда
		МаксПериодПервоначальныхСведенийОС = ТаблицаНомеров[ТаблицаНомеров.Количество() - 1].Период;
	Иначе
		МаксПериодПервоначальныхСведенийОС = '0001-01-01';
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СведенияОбИнвентарномНомереОС(ОсновноеСредство, Организация, Дата)

	Возврат УчетОС.СведенияОбИнвентарномНомереОС(ОсновноеСредство, Организация, Дата);

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПараметрыЗаполненияПоНаименованию(Форма)
	
	Результат = Новый Структура;
	Результат.Вставить("Форма", Форма);
	Результат.Вставить("Объект", Форма.Объект);
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьПоНаименованиюСервер(Знач ОсновноеСредство)
	
	УчетОС.ДозаполнитьТабличнуюЧастьОсновнымиСредствамиПоНаименованию(
		ПараметрыЗаполненияПоНаименованию(ЭтаФорма), ОсновноеСредство);
	
КонецПроцедуры
	
&НаСервере
Процедура ЗаполнитьДляСпискаОССервер()
	
	СписокОС = Объект.ОС.Выгрузить(, "ОсновноеСредство");
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("СписокОС",    СписокОС);
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("Период",      Объект.Дата);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПараметрыАмортизацииБУ.ОсновноеСредство                            КАК ОсновноеСредство,
		|	ПараметрыАмортизацииБУ.СрокПолезногоИспользования                  КАК СрокПолезногоИспользованияБУ,
		|	ПараметрыАмортизацииБУ.ОбъемПродукцииРабот                         КАК ОбъемПродукцииРаботБУ,
		|	ПараметрыАмортизацииБУ.СрокИспользованияДляВычисленияАмортизации   КАК СрокИспользованияДляВычисленияАмортизацииБУ,
		|	ПараметрыАмортизацииБУ.СтоимостьДляВычисленияАмортизации           КАК СтоимостьДляВычисленияАмортизацииБУ,
		|	ПараметрыАмортизацииБУ.ОбъемПродукцииРаботДляВычисленияАмортизации КАК ОбъемПродукцииРаботДляВычисленияАмортизацииБУ,
		|	ПараметрыАмортизацииБУ.ЛиквидационнаяСтоимость                     КАК ЛиквидационнаяСтоимостьБУ,
		|	ПараметрыАмортизацииНУ.СрокПолезногоИспользования                  КАК СрокПолезногоИспользованияНУ,
		|	ПараметрыАмортизацииНУ.СрокИспользованияДляВычисленияАмортизации   КАК СрокИспользованияДляВычисленияАмортизацииНУ,
		|	ПараметрыАмортизацииНУ.СтоимостьДляВычисленияАмортизации           КАК СтоимостьДляВычисленияАмортизацииНУ,
		|	ПервоначальныеСведенияБУ.СпособНачисленияАмортизации КАК СпособНачисленияАмортизацииБУ,
		|	ПервоначальныеСведенияБУ.ПараметрВыработки КАК ПараметрВыработкиБУ,
		|	ПервоначальныеСведенияНУ.СпособНачисленияАмортизации КАК СпособНачисленияАмортизацииНУ
		|ИЗ
		|	РегистрСведений.ПараметрыАмортизацииОСБухгалтерскийУчет.СрезПоследних(
		|		            &Период,
		|		            Организация = &Организация
		|			        И ОсновноеСредство В (&СписокОС)) КАК ПараметрыАмортизацииБУ
		|   ЛЕВОЕ СОЕДИНЕНИЕ
		|	РегистрСведений.ПараметрыАмортизацииОСНалоговыйУчет.СрезПоследних(
		|		            &Период,
		|		            Организация = &Организация
		|			        И ОсновноеСредство В (&СписокОС)) КАК ПараметрыАмортизацииНУ
		|		ПО ПараметрыАмортизацииБУ.ОсновноеСредство = ПараметрыАмортизацииНУ.ОсновноеСредство
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПервоначальныеСведенияОСБухгалтерскийУчет.СрезПоследних(
		|					&Период, 
		|		            Организация = &Организация
		|					И ОсновноеСредство В (&СписокОС)) КАК ПервоначальныеСведенияБУ
		|		ПО ПараметрыАмортизацииБУ.ОсновноеСредство = ПервоначальныеСведенияБУ.ОсновноеСредство
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПервоначальныеСведенияОСНалоговыйУчет.СрезПоследних(
		|		            &Период,
		|		            Организация = &Организация
		|					И ОсновноеСредство В (&СписокОС)) КАК ПервоначальныеСведенияНУ
		|		ПО ПараметрыАмортизацииБУ.ОсновноеСредство = ПервоначальныеСведенияНУ.ОсновноеСредство
		|";
	ТаблицаТекущиеПараметрыАмортизации = Запрос.Выполнить().Выгрузить();
	ТаблицаТекущиеПараметрыАмортизации.Индексы.Добавить("ОсновноеСредство");
	
	Для каждого СтрокаТЧ Из Объект.ОС Цикл
		
		ТекущиеПараметрыАмортизации = ТаблицаТекущиеПараметрыАмортизации.Найти(СтрокаТЧ.ОсновноеСредство,"ОсновноеСредство");

		Если ТекущиеПараметрыАмортизации = Неопределено Тогда
			
			СтрокаТЧ.СрокПолезногоИспользованияБУ                  	= 0;
			СтрокаТЧ.СрокИспользованияДляВычисленияАмортизацииБУ   	= 0;
			СтрокаТЧ.ОбъемПродукцииРаботБУ                         	= 0;
			СтрокаТЧ.ОбъемПродукцииРаботДляВычисленияАмортизацииБУ 	= 0;
			СтрокаТЧ.СтоимостьДляВычисленияАмортизацииБУ           	= 0;
			СтрокаТЧ.ЛиквидационнаяСтоимостьБУ                     	= 0;
			
		Иначе

			СтрокаТЧ.СрокПолезногоИспользованияБУ                  	= ТекущиеПараметрыАмортизации.СрокПолезногоИспользованияБУ;
			СтрокаТЧ.СрокИспользованияДляВычисленияАмортизацииБУ   	= ТекущиеПараметрыАмортизации.СрокИспользованияДляВычисленияАмортизацииБУ;
			СтрокаТЧ.ОбъемПродукцииРаботБУ                         	= ТекущиеПараметрыАмортизации.ОбъемПродукцииРаботБУ;
			СтрокаТЧ.ОбъемПродукцииРаботДляВычисленияАмортизацииБУ 	= ТекущиеПараметрыАмортизации.ОбъемПродукцииРаботДляВычисленияАмортизацииБУ;
			СтрокаТЧ.СтоимостьДляВычисленияАмортизацииБУ           	= ТекущиеПараметрыАмортизации.СтоимостьДляВычисленияАмортизацииБУ;
			СтрокаТЧ.ЛиквидационнаяСтоимостьБУ                     	= ТекущиеПараметрыАмортизации.ЛиквидационнаяСтоимостьБУ;
			СтрокаТЧ.СпособНачисленияАмортизацииБУ                 	= ТекущиеПараметрыАмортизации.СпособНачисленияАмортизацииБУ;
			СтрокаТЧ.ПараметрВыработкиБУ                 			= ТекущиеПараметрыАмортизации.ПараметрВыработкиБУ;
			
			СтрокаТЧ.СрокПолезногоИспользованияНУ                  	= ТекущиеПараметрыАмортизации.СрокПолезногоИспользованияНУ;
			СтрокаТЧ.СрокИспользованияДляВычисленияАмортизацииНУ   	= ТекущиеПараметрыАмортизации.СрокИспользованияДляВычисленияАмортизацииНУ;
			СтрокаТЧ.СтоимостьДляВычисленияАмортизацииНУ           	= ТекущиеПараметрыАмортизации.СтоимостьДляВычисленияАмортизацииНУ;
			
			СтрокаТЧ.СпособНачисленияАмортизацииНУ                 	= ТекущиеПараметрыАмортизации.СпособНачисленияАмортизацииНУ;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПоместитьОСВХранилище()
	
	ТаблицаОС = Объект.ОС.Выгрузить(, "НомерСтроки, ОсновноеСредство");
	Возврат ПоместитьВоВременноеХранилище(ТаблицаОС);
	
КонецФункции

&НаСервере
Процедура ОбработкаВыбораПодборНаСервере(Знач ВыбранноеЗначение)
	
	ДобавленныеСтроки = УчетОС.ОбработатьПодборОсновныхСредств(Объект.ОС, ВыбранноеЗначение);
	
	ЗаполнитьИнвентарныеНомераОС();
	
КонецПроцедуры

&НаСервере
Процедура ДатаПриИзмененииНаСервере()

	ЗаполнитьИнвентарныеНомераОС();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСостояниеДокумента()
	
	СостояниеДокумента = ОбщегоНазначенияБП.СостояниеДокумента(Объект);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ БСП

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры


// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти