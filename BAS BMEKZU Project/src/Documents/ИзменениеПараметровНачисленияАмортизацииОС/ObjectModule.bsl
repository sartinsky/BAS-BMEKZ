#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Проверяет правильность заполнения строк табличной части "ОС".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТоварам        - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  СтруктураШапкиДокумента - структура, содержащая рексвизиты шапки документа и результаты запроса по шапке
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиОС(ТаблицаПоОС, Отказ, Заголовок)

	Для Каждого СтрокаТЧ Из ТаблицаПоОС Цикл
		
		Если ЗначениеЗаполнено(СтрокаТЧ.СпособНачисленияАмортизацииБУ) 
			И (СтрокаТЧ.СпособНачисленияАмортизацииБУ_ДоИзменения = Перечисления.СпособыНачисленияАмортизацииОС._100 
			Или СтрокаТЧ.СпособНачисленияАмортизацииБУ_ДоИзменения = Перечисления.СпособыНачисленияАмортизацииОС._50_50) Тогда
			СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Для основного средства ""%1"" в строке № %2 указан недопустимый для ОС, уже введенного в эксплуатацию, способ начисления амортизации!';uk='Для основного засобу ""%1"" у рядку № %2 зазначений недопустимий для ОЗ, уже введеного в експлуатацію, спосіб нарахування амортизації!'"), СтрокаТЧ.ОсновноеСредство, СтрокаТЧ.НомерСтроки);
			Поле = "ОС[" + Формат(СтрокаТЧ.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].СпособНачисленияАмортизацииБУ";								
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения,ЭтотОбъект, Поле, "Объект",Отказ);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаТЧ.СтоимостьДляВычисленияАмортизацииБУ) Тогда
			
			
			Если ЗначениеЗаполнено(СтрокаТЧ.СпособНачисленияАмортизацииБУ) Тогда 
				 СпособНачисленияАмортизацииБУ_ДляПроверкиПараметров = СтрокаТЧ.СпособНачисленияАмортизацииБУ;
			Иначе
				 СпособНачисленияАмортизацииБУ_ДляПроверкиПараметров = СтрокаТЧ.СпособНачисленияАмортизацииБУ_ДоИзменения;
			КонецЕсли;
			
			Если СпособНачисленияАмортизацииБУ_ДляПроверкиПараметров = Перечисления.СпособыНачисленияАмортизацииОС.Производственный Тогда 
				
				Если НЕ ЗначениеЗаполнено(СтрокаТЧ.ОбъемПродукцииРаботДляВычисленияАмортизацииБУ) Тогда
					
					СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Для основного средства ""%1"" в строке №%2 не заполнен реквизит ""Объем работ для амортизации (БУ)""!';uk='Для основного засобу ""%1"" в рядку №%2 не заповнений реквізит ""Обсяг робіт для амортизації (БО)""!'"), СтрокаТЧ.ОсновноеСредство, СтрокаТЧ.НомерСтроки);
					Поле = "ОС[" + Формат(СтрокаТЧ.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].ОбъемПродукцииРаботДляВычисленияАмортизацииБУ";								
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения,ЭтотОбъект, Поле, "Объект", Отказ);
				КонецЕсли;
				
			Иначе 
				
				Если НЕ ЗначениеЗаполнено(СтрокаТЧ.СрокПолезногоИспользованияБУ) Тогда
					СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Для основного средства ""%1"" в строке №%2 не заполнен реквизит ""Срок использ. (БУ)""!';uk='Для основного засобу ""%1"" в рядку №%2 не заповнений реквізит ""Строк викор. (БО)""!'"), СтрокаТЧ.ОсновноеСредство, СтрокаТЧ.НомерСтроки);
					Поле = "ОС[" + Формат(СтрокаТЧ.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].СрокПолезногоИспользованияБУ";								
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения,ЭтотОбъект, Поле, "Объект", Отказ);
				КонецЕсли;
			
				Если НЕ ЗначениеЗаполнено(СтрокаТЧ.СрокИспользованияДляВычисленияАмортизацииБУ) Тогда
					СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Для основного средства ""%1"" в строке №%2 не заполнен реквизит ""Срок для аморт. (БУ)""!';uk='Для основного засобу ""%1"" в рядку №%2 не заповнений реквізит ""Строк для аморт. (БО)""!'"), СтрокаТЧ.ОсновноеСредство, СтрокаТЧ.НомерСтроки);
					Поле = "ОС[" + Формат(СтрокаТЧ.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].СрокИспользованияДляВычисленияАмортизацииБУ";								
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения,ЭтотОбъект, Поле, "Объект", Отказ);
				КонецЕсли;	

			КонецЕсли;
			
		КонецЕсли;	
	

		Если ЗначениеЗаполнено(СтрокаТЧ.СрокИспользованияДляВычисленияАмортизацииНУ) 
				 ИЛИ ЗначениеЗаполнено(СтрокаТЧ.СтоимостьДляВычисленияАмортизацииНУ) Тогда
				 
			
			Если ЗначениеЗаполнено(СтрокаТЧ.СпособНачисленияАмортизацииБУ) Тогда 
				 СпособНачисленияАмортизацииНУ_ДляПроверкиПараметров = СтрокаТЧ.СпособНачисленияАмортизацииНУ;
			Иначе
				 СпособНачисленияАмортизацииНУ_ДляПроверкиПараметров = СтрокаТЧ.СпособНачисленияАмортизацииНУ_ДоИзменения;
			КонецЕсли;
			
			Если НЕ СпособНачисленияАмортизацииНУ_ДляПроверкиПараметров = Перечисления.СпособыНачисленияАмортизацииОС.Производственный Тогда
				Если НЕ ЗначениеЗаполнено(СтрокаТЧ.СрокПолезногоИспользованияНУ) Тогда
					СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Для основного средства ""%1"" в строке №%2 не заполнен реквизит ""Срок использ. (НУ)""!';uk='Для основного засобу ""%1"" в рядку №%2 не заповнений реквізит ""Строк викор. (ПО)""!'"), СтрокаТЧ.ОсновноеСредство, СтрокаТЧ.НомерСтроки);
					Поле = "ОС[" + Формат(СтрокаТЧ.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].СрокПолезногоИспользованияНУ";								
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения,ЭтотОбъект, Поле, "Объект",Отказ);
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(СтрокаТЧ.СрокИспользованияДляВычисленияАмортизацииНУ) Тогда
					СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Для основного средства ""%1"" в строке №%2 не заполнен реквизит ""Срок для аморт. (НУ)""!';uk='Для основного засобу ""%1"" в рядку №%2 не заповнений реквізит ""Строк для аморт. (ПО)""!'"), СтрокаТЧ.ОсновноеСредство, СтрокаТЧ.НомерСтроки);
					Поле = "ОС[" + Формат(СтрокаТЧ.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].СрокИспользованияДляВычисленияАмортизацииНУ";								
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения,ЭтотОбъект, Поле, "Объект",Отказ);
				КонецЕсли;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(СтрокаТЧ.СтоимостьДляВычисленияАмортизацииНУ) Тогда
				СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Для основного средства ""%1"" в строке №%2 не заполнен реквизит ""Ст-ть для выч. аморт. (НУ)""!';uk='Для основного засобу ""%1"" в рядку №%2 не заповнений реквізит ""Вар-ть для вир. аморт. (ПО)""!'"), СтрокаТЧ.ОсновноеСредство, СтрокаТЧ.НомерСтроки);
				Поле = "ОС[" + Формат(СтрокаТЧ.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].СтоимостьДляВычисленияАмортизацииНУ";								
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения,ЭтотОбъект, Поле, "Объект",Отказ);
			КонецЕсли;
			
			Если СтрокаТЧ.СпособНачисленияАмортизацииНУ = Перечисления.СпособыНачисленияАмортизацииОС.Производственный И Дата < Дата('20200301') Тогда
				СтрокаСообщения =  СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Бух. учет: Для основного средства ""%1"" в строке №%2 указан Производственный способ аморт. в НУ, амотртизация возможна с 01.04.2020!';uk='Бух. облік: Для основного засобу ""%1"" в рядку №%2 вказано Виробничий метод аморт. в ПО, амотртізація можлива з 01.04.2020!'"), СтрокаТЧ.ОсновноеСредство, СтрокаТЧ.НомерСтроки);
				Поле = "ОС[" + Формат(СтрокаТЧ.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].СпособНачисленияАмортизацииНУ";
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения,ЭтотОбъект, Поле, "Объект");
			КонецЕсли;
			
		КонецЕсли;	
		
	КонецЦикла;
	
КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиОС()

// Выполняет движения по регистрам 
//
Процедура ДвиженияПоРегистрам(СтруктураШапкиДокумента, ТаблицаПоОС);

	ДатаДок = СтруктураШапкиДокумента.Дата;

	ПараметрыАмортизацииБУ = Движения.ПараметрыАмортизацииОСБухгалтерскийУчет;
	
	ПараметрыАмортизацииНУ = Движения.ПараметрыАмортизацииОСНалоговыйУчет;
	
	ПервоначальныеСведенияБУ = Движения.ПервоначальныеСведенияОСБухгалтерскийУчет;
	
	ДатаНачалоСледующегоМесяца = КонецМесяца(ДатаДок)+1;
	
	ПервоначальныеСведенияНУ = Движения.ПервоначальныеСведенияОСНалоговыйУчет;
	
	Для Каждого СтрокаТЧ из ТаблицаПоОС Цикл
		
		// ПараметрыАмортизацииОСБухгалтерскийУчет
		Если ЗначениеЗаполнено(СтрокаТЧ.СтоимостьДляВычисленияАмортизацииБУ) Тогда
			СтрокаДвижений = ПараметрыАмортизацииБУ.Добавить();
			
			СтрокаДвижений.Период           = ДатаДок;
			СтрокаДвижений.ОсновноеСредство = СтрокаТЧ.ОсновноеСредство;
			СтрокаДвижений.Организация      = СтруктураШапкиДокумента.Организация;
			
			СтрокаДвижений.СрокПолезногоИспользования                  = СтрокаТЧ.СрокПолезногоИспользованияБУ;
			СтрокаДвижений.ОбъемПродукцииРабот                         = СтрокаТЧ.ОбъемПродукцииРаботБУ;
			СтрокаДвижений.СрокИспользованияДляВычисленияАмортизации   = СтрокаТЧ.СрокИспользованияДляВычисленияАмортизацииБУ;
			СтрокаДвижений.СтоимостьДляВычисленияАмортизации           = СтрокаТЧ.СтоимостьДляВычисленияАмортизацииБУ;
			СтрокаДвижений.ОбъемПродукцииРаботДляВычисленияАмортизации = СтрокаТЧ.ОбъемПродукцииРаботДляВычисленияАмортизацииБУ;
			СтрокаДвижений.ЛиквидационнаяСтоимость                     = СтрокаТЧ.ЛиквидационнаяСтоимостьБУ;
		КонецЕсли;	
		
		// ПараметрыАмортизацииОСНалоговыйУчет
		Если ЗначениеЗаполнено(СтрокаТЧ.СрокИспользованияДляВычисленияАмортизацииНУ) ИЛИ ЗначениеЗаполнено(СтрокаТЧ.СтоимостьДляВычисленияАмортизацииНУ) Тогда
			СтрокаДвижений = ПараметрыАмортизацииНУ.Добавить();
			
			СтрокаДвижений.Период           = ДатаДок;
			СтрокаДвижений.ОсновноеСредство = СтрокаТЧ.ОсновноеСредство;
			СтрокаДвижений.Организация      = СтруктураШапкиДокумента.Организация;
			
			СтрокаДвижений.СрокПолезногоИспользования   			 	= СтрокаТЧ.СрокПолезногоИспользованияНУ;
			СтрокаДвижений.СрокИспользованияДляВычисленияАмортизации 	= СтрокаТЧ.СрокИспользованияДляВычисленияАмортизацииНУ;
			СтрокаДвижений.СтоимостьДляВычисленияАмортизации 			= СтрокаТЧ.СтоимостьДляВычисленияАмортизацииНУ;
		КонецЕсли;	
		
		Если ЗначениеЗаполнено(СтрокаТЧ.СпособНачисленияАмортизацииБУ) Тогда
			Движение = ПервоначальныеСведенияБУ.Добавить();
			Движение.Период            				= ДатаНачалоСледующегоМесяца;
			Движение.ОсновноеСредство  				= СтрокаТЧ.ОсновноеСредство;
			Движение.Организация  					= СтруктураШапкиДокумента.Организация;
			Движение.ИнвентарныйНомер  				= СтрокаТЧ.ИнвентарныйНомер;
			Движение.СпособНачисленияАмортизации 	= СтрокаТЧ.СпособНачисленияАмортизацииБУ;
			Движение.ПервоначальнаяСтоимость 		= СтрокаТЧ.ПервоначальнаяСтоимостьБУ;
			Движение.ПараметрВыработки 				= СтрокаТЧ.ПараметрВыработкиБУ;
		КонецЕсли;	
		
		Если ЗначениеЗаполнено(СтрокаТЧ.СпособНачисленияАмортизацииНУ) Тогда
			Движение = ПервоначальныеСведенияНУ.Добавить();
			Движение.Период            				= ДатаНачалоСледующегоМесяца;
			Движение.ОсновноеСредство  				= СтрокаТЧ.ОсновноеСредство;
			Движение.Организация  					= СтруктураШапкиДокумента.Организация;
			Движение.СпособНачисленияАмортизации 	= СтрокаТЧ.СпособНачисленияАмортизацииНУ;
			Движение.ПервоначальнаяСтоимостьНУ 		= СтрокаТЧ.ПервоначальнаяСтоимостьНУ;
			Движение.НалоговаяГруппаОС		 		= СтрокаТЧ.НалоговаяГруппаОС;
		КонецЕсли;	
		
	КонецЦикла;

	ОперацииОС = Движения.СобытияОСОрганизаций;

	Для Каждого СтрокаТЧ из ТаблицаПоОС Цикл

		СтрокаДвижений = ОперацииОС.Добавить();

		СтрокаДвижений.Период            = ДатаДок;
		СтрокаДвижений.ОсновноеСредство  = СтрокаТЧ.ОсновноеСредство;
		СтрокаДвижений.Организация       = СтруктураШапкиДокумента.Организация;
		СтрокаДвижений.Событие           = СтруктураШапкиДокумента.СобытиеОС;
		СтрокаДвижений.НазваниеДокумента = Строка(СтруктураШапкиДокумента.Ссылка.Метаданные());
		СтрокаДвижений.НомерДокумента    = СтруктураШапкиДокумента.Номер;

	КонецЦикла;

КонецПроцедуры // ДвиженияПоРегистрам

Процедура ДополнитьСтруктуруПолейТабличнойЧастиОСРегл(СтруктураШапкиДокумента, СтруктураПолей)
	
	СтруктураПолей.Вставить("СрокПолезногоИспользованияБУ"                 , "СрокПолезногоИспользованияБУ");
	СтруктураПолей.Вставить("СрокИспользованияДляВычисленияАмортизацииБУ"  , "СрокИспользованияДляВычисленияАмортизацииБУ");
	СтруктураПолей.Вставить("ОбъемПродукцииРаботБУ"                        , "ОбъемПродукцииРаботБУ");
	СтруктураПолей.Вставить("ОбъемПродукцииРаботДляВычисленияАмортизацииБУ", "ОбъемПродукцииРаботДляВычисленияАмортизацииБУ");
	СтруктураПолей.Вставить("СтоимостьДляВычисленияАмортизацииБУ"          , "СтоимостьДляВычисленияАмортизацииБУ");
	СтруктураПолей.Вставить("ЛиквидационнаяСтоимостьБУ"                    , "ЛиквидационнаяСтоимостьБУ");

	СтруктураПолей.Вставить("СрокПолезногоИспользованияНУ"                 , "СрокПолезногоИспользованияНУ");
	СтруктураПолей.Вставить("СрокИспользованияДляВычисленияАмортизацииНУ"  , "СрокИспользованияДляВычисленияАмортизацииНУ");
	СтруктураПолей.Вставить("СтоимостьДляВычисленияАмортизацииНУ"          , "СтоимостьДляВычисленияАмортизацииНУ");
	
	СтруктураПолей.Вставить("СпособНачисленияАмортизацииБУ" 				, "СпособНачисленияАмортизацииБУ");
	СтруктураПолей.Вставить("ПараметрВыработкиБУ"                    		, "ПараметрВыработкиБУ");
	
	СтруктураПолей.Вставить("СпособНачисленияАмортизацииНУ" 				, "СпособНачисленияАмортизацииНУ");
	
КонецПроцедуры

// Процедура формирует структуру шапки документа и дополнительных полей.
//
Процедура ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента) Экспорт

	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента = ОбщегоНазначенияРед12.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	СтруктураШапкиДокумента.Вставить("ВидСобытияОС",СтруктураШапкиДокумента.СобытиеОС.ВидСобытияОС);
	
КонецПроцедуры // ПодготовитьСтруктуруШапкиДокумента()

// Процедура формирует таблицы документа.
//
Процедура ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоОС, Отказ, Заголовок) Экспорт
	
	// Сформируем структуру табличной части
	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("ОсновноеСредство" , "ОсновноеСредство");

	ДополнитьСтруктуруПолейТабличнойЧастиОСРегл(СтруктураШапкиДокумента,СтруктураПолей);

	РезультатЗапросаПоОС = ОбщегоНазначенияРед12.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "ОС", СтруктураПолей);
	ТаблицаПоОС          = РезультатЗапросаПоОС.Выгрузить();
	
	ДополнитьТабличнуюЧастьСведениямиОбПервоначальныхСведенияхОС(МоментВремени(), Организация, ТаблицаПоОС);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ
//

Процедура ЗаполнитьПоДокументуОснованию(Основание)

	// Заполним реквизиты из стандартного набора по документу основанию.
	ЗаполнениеДокументов.ЗаполнитьПоОснованию(ЭтотОбъект, Основание);

	Если ТипЗнч(Основание) = Тип("СправочникСсылка.ОсновныеСредства") Тогда
		Если Основание.ЭтоГруппа Тогда
			ТекстСообщения = НСтр("ru='Ввод изменения состояния ОС на основании группы ОС невозможен!
|Выберите ОС. Для раскрытия группы используйте клавиши Ctrl и стрелку вниз';uk='Введення зміни стану ОЗ на підставі групи ОЗ неможливий!
|Виберіть ОЗ. Для розкриття групи використовуйте клавіші Ctrl і стрілку вниз'");
			ВызватьИсключение(ТекстСообщения);
		КонецЕсли;

		СтрокаТабличнойЧасти = ОС.Добавить();
		СтрокаТабличнойЧасти.ОсновноеСредство = Основание.Ссылка;

	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(СобытиеОС) Тогда
		СобытиеОС = УчетОС.ПолучитьСобытиеПоОСИзСправочника(Перечисления.ВидыСобытийОС.Прочее);
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ
//

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)

	ТипДанныхЗаполнения = ТипЗнч(ДанныеЗаполнения);
	Если ДанныеЗаполнения <> Неопределено И ТипДанныхЗаполнения <> Тип("Структура") 
		И Метаданные().ВводитсяНаОсновании.Содержит(ДанныеЗаполнения.Метаданные()) Тогда
		ЗаполнитьПоДокументуОснованию(ДанныеЗаполнения);
	КонецЕсли;
	ЗаполнениеДокументов.Заполнить(ЭтотОбъект, ДанныеЗаполнения);

КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)

	УправлениеВнеоборотнымиАктивами.ПроверитьОтсутствиеДублейВТабличнойЧасти(ЭтотОбъект, "ОС", Новый Структура("ОсновноеСредство"), Отказ);

КонецПроцедуры

Процедура ОбработкаПроведения(Отказ)

	Перем Заголовок, СтруктураШапкиДокумента;
	Перем ТаблицаПоОС;
	
	Заголовок = "";

	// ПОДГОТОВКА ПРОВЕДЕНИЯ ПО ДАННЫМ ДОКУМЕНТА

	ПроведениеСервер.ПодготовитьНаборыЗаписейКПроведению(ЭтотОбъект);
	
	ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента);
	
	ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоОС, Отказ, Заголовок);
	
	ПроверитьЗаполнениеТабличнойЧастиОС(ТаблицаПоОС, Отказ, Заголовок);
 	
	//проверка, нет ли списанных ОС в табличной части
	УправлениеНеоборотнымиАктивами.ПроверитьНаСписанность(МоментВремени(), Организация, ТаблицаПоОС, Отказ, Заголовок);
	
	Если Не Отказ Тогда
		ДвиженияПоРегистрам(СтруктураШапкиДокумента, ТаблицаПоОС);
	КонецЕсли;

	ПроведениеСервер.ПодготовитьНаборыЗаписейКЗаписиДвижений(ЭтотОбъект);
	
КонецПроцедуры

// Процедура дополняет табличную часть колонками
// ИнвентарныйНомер, ПервоначальнаяСтоимостьУУ, ПервоначальнаяСтоимостьБУ для основных средств. 
//
// Параметры
//  ДатаДока                     – Тип: Дата, МоментВремени, Граница – Дата, на которую получать результаты
//                 
//  ТекОрганизация               – Тип: СправочникСсылка.Организации – Организация
//                 
//  ТаблицаПоОС                  – Тип: ТаблицаЗначений – Таблица, в которую необходимо добавить колонки
//
Процедура ДополнитьТабличнуюЧастьСведениямиОбПервоначальныхСведенияхОС(ДатаДока, ТекОрганизация, ТаблицаПоОС) Экспорт
	
	ТаблицаПоОС.Колонки.Добавить("ПервоначальнаяСтоимостьБУ", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаПоОС.Колонки.Добавить("ИнвентарныйНомер"			, Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(9)));
	
	ТаблицаПоОС.Колонки.Добавить("ПервоначальнаяСтоимостьНУ", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаПоОС.Колонки.Добавить("НалоговаяГруппаОС");
	
	ТаблицаПоОС.Колонки.Добавить("СпособНачисленияАмортизацииБУ_ДоИзменения", Новый ОписаниеТипов("ПеречислениеСсылка.СпособыНачисленияАмортизацииОС"));
	ТаблицаПоОС.Колонки.Добавить("СпособНачисленияАмортизацииНУ_ДоИзменения", Новый ОписаниеТипов("ПеречислениеСсылка.СпособыНачисленияАмортизацииОС"));
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Организация",     ТекОрганизация);
	Запрос.УстановитьПараметр("Период",          Новый Граница(ДатаДока, ВидГраницы.Исключая));
	Запрос.УстановитьПараметр("ВнешнийИсточник", ТаблицаПоОС);
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ВнешнийИсточник.ОсновноеСредство
	|ПОМЕСТИТЬ ОсновныеСредства
	|ИЗ &ВнешнийИсточник КАК ВнешнийИсточник
	|;
	|
	|/////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОсновныеСредства.ОсновноеСредство КАК ОсновноеСредство,
	|	ПервоначальныеСведенияБУ.ПервоначальнаяСтоимость КАК ПервоначальнаяСтоимостьБУ,
	|	ПервоначальныеСведенияБУ.СпособНачисленияАмортизации КАК СпособНачисленияАмортизацииБУ_ДоИзменения,
	|	ПервоначальныеСведенияБУ.ИнвентарныйНомер КАК ИнвентарныйНомер,
	|	ПервоначальныеСведенияНУ.ПервоначальнаяСтоимостьНУ КАК ПервоначальнаяСтоимостьНУ,
	|	ПервоначальныеСведенияНУ.СпособНачисленияАмортизации КАК СпособНачисленияАмортизацииНУ_ДоИзменения,
	|	ПервоначальныеСведенияНУ.НалоговаяГруппаОС КАК НалоговаяГруппаОС
	|ИЗ
	|	ОсновныеСредства
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПервоначальныеСведенияОСБухгалтерскийУчет.СрезПоследних(&Период, ОсновноеСредство В (ВЫБРАТЬ ОсновноеСредство ИЗ ОсновныеСредства)) КАК ПервоначальныеСведенияБУ
	|		ПО ОсновныеСредства.ОсновноеСредство = ПервоначальныеСведенияБУ.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПервоначальныеСведенияОСНалоговыйУчет.СрезПоследних(&Период, ОсновноеСредство В (ВЫБРАТЬ ОсновноеСредство ИЗ ОсновныеСредства)) КАК ПервоначальныеСведенияНУ
	|		ПО ОсновныеСредства.ОсновноеСредство = ПервоначальныеСведенияНУ.ОсновноеСредство
	|";
	
	ТаблицаСведенийОС  = Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрокаТЧ Из ТаблицаПоОС Цикл
		
		ТекОс =  СтрокаТЧ.ОсновноеСредство;
		СтрокаСведений = ТаблицаСведенийОС.Найти(ТекОс, "ОсновноеСредство");	
		
		Если СтрокаСведений <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(СтрокаТЧ, СтрокаСведений, , "ОсновноеСредство");
		КонецЕсли;
		
	КонецЦикла;
	

КонецПроцедуры // ДополнитьТабличнуюЧастьСведениямиОбПервоначальныхСведенияхОС()

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКОтменеПроведения(ЭтотОбъект);
	Движения.Записать();
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)

	Дата = НачалоДня(ОбщегоНазначенияБП.ПолучитьРабочуюДату());
	Ответственный = Пользователи.ТекущийПользователь();

КонецПроцедуры

#КонецЕсли