#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область ПроцедурыИФункцииПечати

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "Акт";
	КомандаПечати.Представление = НСтр("ru='Акт инвентаризации товаров на складе';uk='Акт інвентаризації товарів на складі'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечати";
	КомандаПечати.СписокФорм    = "ФормаСписка,ФормаВыбора,ФормаДокумента";
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "М21";
	КомандаПечати.Представление = НСтр("ru='Инвентаризационная опись (М-21)';uk='Інвентаризаційний опис (М-21)'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечати";
	КомандаПечати.СписокФорм    = "ФормаСписка,ФормаВыбора,ФормаДокумента";
	
	// Реестр документов
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "Реестр";
	КомандаПечати.Представление = НСтр("ru='Реестр документов';uk='Реєстр документів'");
	КомандаПечати.ЗаголовокФормы= НСтр("ru='Реестр документов ""Инвентаризация товаров на складе""';uk='Реєстр документів ""Інвентаризація товарів на складі""'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечатиРеестраДокументов";
	КомандаПечати.СписокФорм    = "ФормаСписка";
	КомандаПечати.Порядок       = 100;
	
	//ИНАГРО ++
	// Сличительная ведомость запасов
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "СличительнаяВедомостьЗапасов";
	КомандаПечати.Представление = НСтр("ru='Сличительная ведомость запасов';uk='Звіряльна відомість запасів'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечати";
	КомандаПечати.СписокФорм    = "ФормаСписка,ФормаВыбора,ФормаДокумента";
	
	// Инвентаризационная опись запасов
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ИнвентаризационнаяОписьЗапасов";
	КомандаПечати.Представление = НСтр("ru='Инвентаризационная опись запасов';uk='Інвентаризаційний опис запасів'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечати";
	КомандаПечати.СписокФорм    = "ФормаСписка,ФормаВыбора,ФормаДокумента";
	
	// Протокол инвентаризации
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ПротоколИнвентаризации";
	КомандаПечати.Представление = НСтр("ru='Протокол инвентаризации';uk='Протокол інвентарізації'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечати";
	КомандаПечати.СписокФорм    = "ФормаСписка,ФормаВыбора,ФормаДокумента";
	// ИНАГРО -- 

КонецПроцедуры // ДобавитьКомандыПечати

// Функция формирует табличный документ с печатной формой, разработанной методистами
//
// Возвращаемое значение:
//  Табличный документ - печатная форма
//
Функция ПечатьИнвентаризацияТоваровНаСкладе(МассивОбъектов, ОбъектыПечати, ПараметрыВывода)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДопКолонка = Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
	Если ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул Тогда
		ВыводитьКоды    = Истина;
		Колонка         = "Артикул";
		ТекстКодАртикул = "Артикул";
	ИначеЕсли ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Код Тогда
		ВыводитьКоды    = Истина;
		Колонка         = "Код";
		ТекстКодАртикул = "Код";
	Иначе
		ВыводитьКоды    = Ложь;
		Колонка         = "";
		ТекстКодАртикул = "Код";
	КонецЕсли;

	Если ВыводитьКоды Тогда
		ОбластьШапки  = "ШапкаСКодом";
		ОбластьСтроки = "СтрокаСКодом";
	Иначе
		ОбластьШапки  = "ШапкаТаблицы";
		ОбластьСтроки = "Строка";
	КонецЕсли;
	
	ВалютаПечати = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	
	ЗапросДокумент = Новый Запрос;
	
	ЗапросДокумент.Текст = "
	|ВЫБРАТЬ
	|	Номер,
	|	Дата,
	|	Организация,
	|	Склад.Представление КАК ПредставлениеСклада,
	|	Организация,
	|	Склад,
	|	Товары.(
	|		НомерСтроки,
	|		Номенклатура,
	|		Номенклатура."+ ТекстКодАртикул + " КАК КодАртикул,
	|		Номенклатура.НаименованиеПолное КАК Товар,
	|		Количество                      КАК Количество,
	|		КоличествоУчет                  КАК КоличествоПоУчету,
	|		ЕдиницаИзмерения.Наименование   КАК ЕдиницаИзмерения,
	|		СчетУчетаБУ КАК СубСчет,
	|		Цена,
	|		Сумма,
	|		СуммаУчет                       КАК СуммаПоУчету
	|	)
	|ИЗ
	|	Документ.ИнвентаризацияТоваровНаСкладе КАК ИнвентаризацияТоваровНаСкладе
	|
	|ГДЕ
	|	ИнвентаризацияТоваровНаСкладе.Ссылка = &ТекущийДокумент
	|
	|УПОРЯДОЧИТЬ ПО
	|	Товары.НомерСтроки
	|
	|";
	
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ИнвентаризацияТоваровНаСкладе_ИнвентаризацияТоваровНаСкладе";

	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ИнвентаризацияТоваровНаСкладе.ПФ_MXL_ИнвентаризацияТоваровНаСкладе");
	
	// печать производится на языке, указанном в настройках пользователя
	КодЯзыкаПечать = ПараметрыВывода.КодЯзыкаДляМногоязычныхПечатныхФорм;
	Макет.КодЯзыкаМакета = КодЯзыкаПечать;

	ПервыйДокумент = Истина;
	
	Для Каждого Ссылка Из МассивОбъектов Цикл	
		
		Если Не ПервыйДокумент Тогда
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ПервыйДокумент = Ложь;
		
		// Запомним номер строки, с которой начали выводить текущий документ.
		НомерСтрокиНачало = ТабДокумент.ВысотаТаблицы + 1;
		
		ЗапросДокумент.УстановитьПараметр("ТекущийДокумент", Ссылка);
		
		Шапка = ЗапросДокумент.Выполнить().Выбрать();

		Шапка.Следующий();
		ВыборкаСтрокТовары = Шапка.Товары.Выбрать();
		
		// Выводим шапку накладной
		ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
		ОбластьМакета.Параметры.ТекстЗаголовка = ОбщегоНазначенияБПВызовСервера.СформироватьЗаголовокДокумента(Шапка, НСтр("ru='Инвентаризация товаров на складе';uk='Інвентаризація товарів на складі'", КодЯзыкаПечать), КодЯзыкаПечать);
		ТабДокумент.Вывести(ОбластьМакета);

		// Выводим данные об организации и складе
		ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");
		ОбластьМакета.Параметры.Заполнить(Шапка);
		СведенияОбОрганизации = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Шапка.Организация, Шапка.Дата,,, КодЯзыкаПечать);
		ОбластьМакета.Параметры.ПредставлениеОрганизации = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОбОрганизации, "ПолноеНаименование,",,КодЯзыкаПечать);
		ОбластьМакета.Параметры.ВалютаНаименование = Строка(ВалютаПечати);
		ОбластьМакета.Параметры.Валюта             = ВалютаПечати;
		ТабДокумент.Вывести(ОбластьМакета);

		// Выводим шапку таблицы
		ОбластьМакета = Макет.ПолучитьОбласть(ОбластьШапки);
		Если ВыводитьКоды Тогда
			ОбластьМакета.Параметры.Колонка = Колонка;
		КонецЕсли;
		ОбластьМакета.Параметры.Заполнить(Шапка);
		ТабДокумент.Вывести(ОбластьМакета);

		ИтогСуммы        = 0;
		ИтогСуммыПоУчету = 0;

		ОбластьМакета = Макет.ПолучитьОбласть(ОбластьСтроки);
		
		Пока ВыборкаСтрокТовары.Следующий() Цикл

			Если НЕ ЗначениеЗаполнено(ВыборкаСтрокТовары.Номенклатура) Тогда
				Сообщить(НСтр("ru='В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.';uk='В одному з рядків не заповнене значення номенклатури - рядок під час друку буде пропущений.'"), СтатусСообщения.Важное);
				Продолжить;
			КонецЕсли;

			ОбластьМакета.Параметры.Заполнить(ВыборкаСтрокТовары);
			ОбластьМакета.Параметры.Товар = ВыборкаСтрокТовары.Товар;

			ИтогСуммы        = ИтогСуммы        + ВыборкаСтрокТовары.Сумма;
			ИтогСуммыПоУчету = ИтогСуммыПоУчету + ВыборкаСтрокТовары.СуммаПоУчету;
			ТабДокумент.Вывести(ОбластьМакета);

		КонецЦикла;

		// Вывести Итого
		ОбластьМакета                        = Макет.ПолучитьОбласть("Итого");
		ОбластьМакета.Параметры.Всего        = ОбщегоНазначенияБПВызовСервера.ФорматСумм(ИтогСуммы);
		ОбластьМакета.Параметры.ВсегоПоУчету = ОбщегоНазначенияБПВызовСервера.ФорматСумм(ИтогСуммыПоУчету);
		ТабДокумент.Вывести(ОбластьМакета);

		// Выводим подписи к документу
		ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
		ТабДокумент.Вывести(ОбластьМакета);
			
		// В табличном документе зададим имя области, в которую был 
		// выведен объект. Нужно для возможности печати покомплектно.
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабДокумент, 
			НомерСтрокиНачало, ОбъектыПечати, Ссылка);
		
	КонецЦикла;
	
	Возврат ТабДокумент;

КонецФункции // ПечатьИнвентаризацияТоваровНаСкладе()

// Функция формирует табличный документ с печатной формой М21
//
// Возвращаемое значение:
//  Табличный документ - печатная форма акта списания
//
Функция ПечатьМ21(МассивОбъектов, ОбъектыПечати, ПараметрыВывода)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЗапросДокумент = Новый Запрос;
	
	ЗапросДокумент.Текст = "
	|ВЫБРАТЬ
	|	Номер,
	|	Дата,
	|	ИнвентаризацияТоваровНаСкладе.Организация,
	|	Склад.Представление 										КАК ПредставлениеСклада,
	|	Склад,
	|   Склад.ТипСклада												КАК ТипСклада,
	//ИНАГРО ++
//	|	&ПустаяСтрока       										КАК МатериальноОтветственный,
//	|	&ПустаяСтрока												КАК ДолжностьМатериальноОтветственного
	|	РаботникиОрганизацийСрезПоследних.Должность 				КАК ДолжностьМатериальноОтветственного,
	|   ИНАГРО_ДокументОснованиеДата    							КАК ДокументОснованиеДата,
	|   ИНАГРО_ДокументОснованиеНомер   							КАК ДокументОснованиеНомер,
	|   ИнвентаризацияТоваровНаСкладе.ОтветственноеЛицо			    КАК МатериальноОтветственный
	|ИЗ
	|Документ.ИнвентаризацияТоваровНаСкладе КАК ИнвентаризацияТоваровНаСкладе
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИНАГРО_РаботникиОрганизаций.СрезПоследних(&Дата, ) КАК РаботникиОрганизацийСрезПоследних
	|	ПО ИнвентаризацияТоваровНаСкладе.Организация = РаботникиОрганизацийСрезПоследних.Организация
	|		И ИнвентаризацияТоваровНаСкладе.ОтветственноеЛицо.Ссылка = РаботникиОрганизацийСрезПоследних.Сотрудник.ФизическоеЛицо
	//ИНАГРО --
	|ГДЕ
	|	ИнвентаризацияТоваровНаСкладе.Ссылка = &ТекущийДокумент
	|";
	
	ЗапросТовары = Новый Запрос;
	
	ЗапросТовары.Текст = "
	|ВЫБРАТЬ
	|	НомерСтроки,
	|	Номенклатура,
	|	Номенклатура.Код				КАК НоменклатурныйНомер,
	|	Номенклатура.НаименованиеПолное КАК Товар,
	|	Количество                      КАК Количество,
	|	ЕдиницаИзмерения.Представление  КАК ЕдиницаИзмерения,
	|	ВЫБОР 
	|		КОГДА Количество = 0 ТОГДА
	|			Сумма
	|		ИНАЧЕ
	|           Сумма/Количество
	|	КОНЕЦ							КАК ЦенаРегл,
	|	ЦенаВРознице					КАК ЦенаВРознице
	|ИЗ
	|	Документ.ИнвентаризацияТоваровНаСкладе.Товары КАК ИнвентаризацияТоваровНаСкладе
	|
	|ГДЕ
	|	ИнвентаризацияТоваровНаСкладе.Ссылка = &ТекущийДокумент
	|
	|УПОРЯДОЧИТЬ ПО
	|   НомерСтроки
	|";
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ИнвентаризацияТоваровНаСкладе_ИнвентаризационнаяОпись_М21";

	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ИнвентаризацияТоваровНаСкладе.ПФ_MXL_UK_ИнвентаризационнаяОпись_М21");
	
	КодЯзыкаПечать = "uk"; // всегда на украинском

	ПервыйДокумент = Истина;
	
	Для Каждого Ссылка Из МассивОбъектов Цикл	
		
		Если Не ПервыйДокумент Тогда
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ПервыйДокумент = Ложь;
		
		// Запомним номер строки, с которой начали выводить текущий документ.
		НомерСтрокиНачало = ТабДокумент.ВысотаТаблицы + 1;
		
		ЗапросДокумент.УстановитьПараметр("ТекущийДокумент", Ссылка);
		//ИНАГРО ++
		//ЗапросДокумент.УстановитьПараметр("ПустаяСтрока",   "                ");
		ЗапросДокумент.УстановитьПараметр("Дата",Ссылка.Дата);
		//ИНАГРО --
		Шапка = ЗапросДокумент.Выполнить().Выбрать();

		Шапка.Следующий();
		
		ЗапросТовары.УстановитьПараметр("ТекущийДокумент", Ссылка);
		ВыборкаСтрокТовары = ЗапросТовары.Выполнить().Выбрать();
		
		// Выводим данные об организации и складе
		ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
		ОбластьМакета.Параметры.Заполнить(Шапка);
		СведенияОбОрганизации = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Шапка.Организация, Шапка.Дата,,, КодЯзыкаПечать);
		ОбластьМакета.Параметры.НазваниеОрганизации 			= ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОбОрганизации, "ПолноеНаименование,",,КодЯзыкаПечать);
		ОбластьМакета.Параметры.ЕДРПОУОрганизации  	 			= БухгалтерскийУчетПереопределяемый.ПолучитьКодОрганизации(СведенияОбОрганизации);
		
		ТабДокумент.Вывести(ОбластьМакета);

		// Выводим шапку таблицы
		ОбластьМакета = Макет.ПолучитьОбласть("ШапкаТаблицы");
		ТабДокумент.Вывести(ОбластьМакета);

		КоличествоНаименований = 0;
		
		ОбластьМакета = Макет.ПолучитьОбласть("Строка");
		Пока ВыборкаСтрокТовары.Следующий() Цикл

			Если НЕ ЗначениеЗаполнено(ВыборкаСтрокТовары.Номенклатура) Тогда
				Сообщить(НСтр("ru='В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.';uk='В одному з рядків не заповнене значення номенклатури - рядок під час друку буде пропущений.'"), СтатусСообщения.Важное);
				Продолжить;
			КонецЕсли;

			ОбластьМакета.Параметры.Заполнить(ВыборкаСтрокТовары);
			ОбластьМакета.Параметры.Товар = СокрП(ВыборкаСтрокТовары.Товар);
	        
			// Для НТТ цену товара покажем равной розничной цене.
			Если Шапка.ТипСклада = Перечисления.ТипыСкладов.НеавтоматизированнаяТорговаяТочка Тогда
				
				ОбластьМакета.Параметры.ЦенаРегл =  ВыборкаСтрокТовары.ЦенаВРознице;
				
			КонецЕсли;
			
			ТабДокумент.Вывести(ОбластьМакета);

			КоличествоНаименований = КоличествоНаименований + 1;
			
		КонецЦикла;

		// Вывести строку Итого и подписи (подвал)
		ОбластьМакета = Макет.ПолучитьОбласть("Подвал");
		ВыборкаПоКомиссии = ОбщегоНазначенияБПВызовСервера.ПолучитьСведенияОКомиссии(Ссылка);
		ОбластьМакета.Параметры.Заполнить(Шапка);
		ОбластьМакета.Параметры.Заполнить(ВыборкаПоКомиссии);
		ОбластьМакета.Параметры.КоличествоНаименований = КоличествоНаименований;
		// число прописью без десятичных знаков
		ОбластьМакета.Параметры.КоличествоНаименованийПрописью = ОбщегоНазначенияБПВызовСервера.КоличествоПрописью(КоличествоНаименований, КодЯзыкаПечать);
		
		ТабДокумент.Вывести(ОбластьМакета);
			
		// В табличном документе зададим имя области, в которую был 
		// выведен объект. Нужно для возможности печати покомплектно.
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабДокумент, 
			НомерСтрокиНачало, ОбъектыПечати, Ссылка);
		
	КонецЦикла;
	
	Возврат ТабДокумент;

КонецФункции // ПечатьМ21()

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходимое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	ПараметрыВывода.ДоступнаПечатьПоКомплектно = Истина;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "Акт") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "Акт", НСтр("ru='Акт инвентаризации товаров на складе';uk='Акт інвентаризації товарів на складі'"), 
			ПечатьИнвентаризацияТоваровНаСкладе(МассивОбъектов, ОбъектыПечати, ПараметрыВывода),,"Документ.ИнвентаризацияТоваровНаСкладе.ПФ_MXL_ИнвентаризацияТоваровНаСкладе", , Истина);
	КонецЕсли;
		
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "М21") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "М21", НСтр("ru='Инвентаризационная опись (М-21)';uk='Інвентаризаційний опис (М-21)'"), 
			ПечатьМ21(МассивОбъектов, ОбъектыПечати, ПараметрыВывода),,"Документ.ИнвентаризацияТоваровНаСкладе.ПФ_MXL_UK_ИнвентаризационнаяОпись_М21", , Истина);
			
	КонецЕсли;
 		
	//ИНАГРО ++
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "СличительнаяВедомостьЗапасов") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "СличительнаяВедомостьЗапасов", НСтр("ru='Сличительная ведомость запасов';uk='Звіряльна відомість запасів'"), 
		ПечатьСличительнаяВедомость(МассивОбъектов, ОбъектыПечати, ПараметрыВывода),,"Документ.ИнвентаризацияТоваровНаСкладе.ПФ_MXL_СличительнаяВедомостьЗапасов2015", , Истина);
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ИнвентаризационнаяОписьЗапасов") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "ИнвентаризационнаяОписьЗапасов", НСтр("ru='Инвентаризационная опись запасов';uk='Інвентаризаційний опис запасів'"), 
		ПечатьИнвентаризационнаяОписьЗапасов(МассивОбъектов, ОбъектыПечати, ПараметрыВывода),,"Документ.ИнвентаризацияТоваровНаСкладе.ПФ_MXL_ИнвентаризационнаяОписьЗапасов2015", , Истина);
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПротоколИнвентаризации") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "ПротоколИнвентаризации", НСтр("ru='Протокол инвентаризации';uk='Протокол інвентарізації'"), 
		ПечатьПротоколИнвентаризации(МассивОбъектов, ОбъектыПечати, ПараметрыВывода),,"Документ.ИнвентаризацияТоваровНаСкладе.ПФ_MXL_ПротоколИнвентаризации2015", , Истина);
	КонецЕсли;
	//ИНАГРО --

КонецПроцедуры // Печать

Функция ПолучитьДополнительныеРеквизитыДляРеестра() Экспорт
	
	Результат = Новый Структура("Информация", "Склад");
	
	Возврат Результат;
	
КонецФункции

// ИНАГРО++
Функция ПечатьСличительнаяВедомость(МассивОбъектов, ОбъектыПечати, ПараметрыВывода)
	
	УстановитьПривилегированныйРежим(Истина);
		
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ИнвентаризацияТоваровНаСкладе_СличительнаяВедомость";
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ИнвентаризацияТоваровНаСкладе.ПФ_MXL_СличительнаяВедомостьЗапасов2015");

	ПервыйДокумент = Истина;
	
	Для Каждого Ссылка Из МассивОбъектов Цикл	
		Если Не ПервыйДокумент Тогда
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
	
		ПервыйДокумент = Ложь;
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ИнвентаризацияТоваровНаСкладе.Номер,
		|	ИнвентаризацияТоваровНаСкладе.Дата,
		|	ИнвентаризацияТоваровНаСкладе.Организация,
		|	ИнвентаризацияТоваровНаСкладе.Склад,
		|	ИнвентаризацияТоваровНаСкладе.Ответственный,
		|	ИнвентаризацияТоваровНаСкладе.ПредседательКомиссии,
		|	ИнвентаризацияТоваровНаСкладе.ПервыйЧленКомиссии,
		|	ИнвентаризацияТоваровНаСкладе.ВторойЧленКомиссии,
		|	ИнвентаризацияТоваровНаСкладе.ТретийЧленКомиссии,
		|	ИнвентаризацияТоваровНаСкладе.КтоПровелКонтрольнуюПроверку,
		|	ИнвентаризацияТоваровНаСкладе.ОтветственноеЛицо,
		|	ИнвентаризацияТоваровНаСкладе.ИНАГРО_СчетУчетаБУ,
		|	ИнвентаризацияТоваровНаСкладе.ИНАГРО_ДокументОснованиеДата,
		|	ИнвентаризацияТоваровНаСкладе.ИНАГРО_ДокументОснованиеНомер,
		|	ИнвентаризацияТоваровНаСкладе.Организация.КодПоЕДРПОУ КАК КодПоЕДРПОУ
		|ИЗ
		|	Документ.ИнвентаризацияТоваровНаСкладе КАК ИнвентаризацияТоваровНаСкладе
		|ГДЕ
		|	ИнвентаризацияТоваровНаСкладе.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("Дата", Ссылка.Дата);
	
	РезультатШапка = Запрос.Выполнить().Выбрать();
	РезультатШапка.Следующий();
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ИнвентаризацияТоваровНаСкладеТовары.НомерСтроки,
		|	ИнвентаризацияТоваровНаСкладеТовары.ЕдиницаИзмерения,
		|	ИнвентаризацияТоваровНаСкладеТовары.Количество,
		|	ИнвентаризацияТоваровНаСкладеТовары.КоличествоУчет,
		|	ИнвентаризацияТоваровНаСкладеТовары.Коэффициент,
		|	ИнвентаризацияТоваровНаСкладеТовары.Номенклатура,
		|	ИнвентаризацияТоваровНаСкладеТовары.Сумма,
		|	ИнвентаризацияТоваровНаСкладеТовары.СуммаУчет,
		|	ИнвентаризацияТоваровНаСкладеТовары.Цена,
		|	ИнвентаризацияТоваровНаСкладеТовары.ЦенаВРознице,
		|	ИнвентаризацияТоваровНаСкладеТовары.СчетУчетаБУ
		|ИЗ
		|	Документ.ИнвентаризацияТоваровНаСкладе.Товары КАК ИнвентаризацияТоваровНаСкладеТовары
		|ГДЕ
		|	ИнвентаризацияТоваровНаСкладеТовары.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	РезультатТабличнаяЧасть = Запрос.Выполнить().Выгрузить();
	РезультатТабличнаяЧасть.Колонки.Добавить("Разница", Новый ОписаниеТипов("Число",,Новый КвалификаторыЧисла(15,2))); 
	
	Сч = 0;
	Для каждого Строка Из РезультатТабличнаяЧасть Цикл
		
		Пока Сч < РезультатТабличнаяЧасть.Количество() Цикл
			СтрокаТаблицы = РезультатТабличнаяЧасть.Получить(Сч);
			Разница = СтрокаТаблицы.Количество - СтрокаТаблицы.КоличествоУчет;
			Если Разница = 0 Тогда
				РезультатТабличнаяЧасть.Удалить(СтрокаТаблицы);
			Иначе
				СтрокаТаблицы.Разница = Разница;
				Сч = Сч + 1;
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
	Макет = ПолучитьМакет("ПФ_MXL_СличительнаяВедомостьЗапасов2015");
	КодЯзыкаПечать = "uk"; // всегда на украинском
	
	МассивОбластей = Новый Массив();
	
	ОбластьМакетаЗаголовок = Макет.ПолучитьОбласть("Заголовок");
	ОбластьМакетаЗаголовок.Параметры.Организация = РезультатШапка.Организация.НаименованиеПолное;
	
	КодЕДРПОУ = СокрЛП(РезультатШапка.КодПоЕДРПОУ);
	Если Не ПустаяСтрока(КодЕДРПОУ) И СтрДлина(КодЕДРПОУ) = 8 Тогда
		ОбластьМакетаЗаголовок.Параметры.КодЕДРПОУ1 = Сред(РезультатШапка.КодПоЕДРПОУ, 1, 1);
		ОбластьМакетаЗаголовок.Параметры.КодЕДРПОУ2 = Сред(РезультатШапка.КодПоЕДРПОУ, 2, 1);
		ОбластьМакетаЗаголовок.Параметры.КодЕДРПОУ3 = Сред(РезультатШапка.КодПоЕДРПОУ, 3, 1);
		ОбластьМакетаЗаголовок.Параметры.КодЕДРПОУ4 = Сред(РезультатШапка.КодПоЕДРПОУ, 4, 1);
		ОбластьМакетаЗаголовок.Параметры.КодЕДРПОУ5 = Сред(РезультатШапка.КодПоЕДРПОУ, 5, 1);
		ОбластьМакетаЗаголовок.Параметры.КодЕДРПОУ6 = Сред(РезультатШапка.КодПоЕДРПОУ, 6, 1);
		ОбластьМакетаЗаголовок.Параметры.КодЕДРПОУ7 = Сред(РезультатШапка.КодПоЕДРПОУ, 7, 1);
		ОбластьМакетаЗаголовок.Параметры.КодЕДРПОУ8 = Сред(РезультатШапка.КодПоЕДРПОУ, 8, 1);
	КонецЕсли;
	
	ОбластьМакетаЗаголовок.Параметры.Дата  = Формат(Ссылка.Дата,"ДФ=dd.MM.yyyy");
	ОбластьМакетаЗаголовок.Параметры.ДатаПриказа = Формат(РезультатШапка.ИНАГРО_ДокументОснованиеДата,"ДФ=dd.MM.yyyy");
	ОбластьМакетаЗаголовок.Параметры.НомерПриказа = РезультатШапка.ИНАГРО_ДокументОснованиеНомер;
	ТабДокумент.Вывести(ОбластьМакетаЗаголовок);
	
	
	ОбластьМакетаШапкаТаблицы = Макет.ПолучитьОбласть("ШапкаТаблицы");
	ОбластьМакетаНумерацияКолонок = Макет.ПолучитьОбласть("НумерацияКолонок");
	ТабДокумент.Вывести(ОбластьМакетаШапкаТаблицы);
	ТабДокумент.Вывести(ОбластьМакетаНумерацияКолонок);
	
	МассивОбластей.Добавить(ОбластьМакетаЗаголовок);
	МассивОбластей.Добавить(ОбластьМакетаШапкаТаблицы);
	МассивОбластей.Добавить(ОбластьМакетаНумерацияКолонок);
	
	НомерСтроки = 1;
	КоличествоИзлишка = 0;
	КоличествоНедостачи = 0;
	СуммаИзлишка = 0;
	СуммаНедостачи = 0;
	Для Каждого СтрокаТч Из РезультатТабличнаяЧасть Цикл
		
		ОбластьМакетаСтрока = Макет.ПолучитьОбласть("Строка");
		ОбластьМакетаСтрока.Параметры.ПорядковыйНомер = НомерСтроки;
		ОбластьМакетаСтрока.Параметры.СчетУчета = СтрокаТч.СчетУчетаБУ;
		ОбластьМакетаСтрока.Параметры.НеоборотныйАктив = СтрокаТч.Номенклатура;
		ОбластьМакетаСтрока.Параметры.НоменклатурныйНомер = СтрокаТч.Номенклатура.Код;
		ОбластьМакетаСтрока.Параметры.ФИО = РезультатШапка.ОтветственноеЛицо;
		ОбластьМакетаСтрока.Параметры.ЕдИзм = СтрокаТч.ЕдиницаИзмерения;
		
		Если СтрокаТч.Разница < 0 Тогда
			РазницаНедостачи = Макс(СтрокаТч.Разница, -СтрокаТч.Разница);
			КоличествоНедостачи = КоличествоНедостачи + РазницаНедостачи;
			ОбластьМакетаСтрока.Параметры.КоличествоНедостачи = РазницаНедостачи;
			РазницаСуммаНедостачи = СтрокаТч.СуммаУчет - СтрокаТч.Сумма;
			СуммаНедостачи = СуммаНедостачи + РазницаСуммаНедостачи;
			ОбластьМакетаСтрока.Параметры.СуммаНедостачи = РазницаСуммаНедостачи;
			ОбластьМакетаСтрока.Параметры.КоличествоИзлишек = 0;
			ОбластьМакетаСтрока.Параметры.СуммаИзлишек = 0;
		ИначеЕсли СтрокаТч.Разница > 0 Тогда
			РазницаИзлишка = СтрокаТч.Разница;
			КоличествоИзлишка = КоличествоИзлишка + РазницаИзлишка;
			ОбластьМакетаСтрока.Параметры.КоличествоИзлишек = РазницаИзлишка;
			РазницаСуммаИзлишка = СтрокаТч.Сумма - СтрокаТч.СуммаУчет;
			СуммаИзлишка = СуммаИзлишка + РазницаСуммаИзлишка;
			ОбластьМакетаСтрока.Параметры.СуммаИзлишек = РазницаСуммаИзлишка;
			ОбластьМакетаСтрока.Параметры.КоличествоНедостачи = 0;
			ОбластьМакетаСтрока.Параметры.СуммаНедостачи = 0;
		КонецЕсли; 
		НомерСтроки = НомерСтроки + 1;
		ТабДокумент.Вывести(ОбластьМакетаСтрока);
				
	КонецЦикла;
	
	ОбластьМакетаИтого = Макет.ПолучитьОбласть("Итого");
	ОбластьМакетаИтого.Параметры.КоличествоИзлишек = КоличествоИзлишка;
	ОбластьМакетаИтого.Параметры.СуммаИзлишек = СуммаИзлишка;
	ОбластьМакетаИтого.Параметры.КоличествоНедостачи = КоличествоНедостачи;
	ОбластьМакетаИтого.Параметры.СуммаНедостачи = СуммаНедостачи;
	ТабДокумент.Вывести(ОбластьМакетаИтого);
	
	ОбластьМакетаБухгалтер = Макет.ПолучитьОбласть("Бухгалтер");
	ОбластьМакетаБухгалтер.Параметры.ФИО_Бухгалтер = РезультатШапка.Ответственный.Наименование;
	ТабДокумент.Вывести(ОбластьМакетаБухгалтер);
	
	ОбластьМакетаГлаваКомиссии = Макет.ПолучитьОбласть("ГлаваКомиссии");
	ОбластьМакетаГлаваКомиссии.Параметры.ФИО_ГлаваКомиссии = РезультатШапка.ПредседательКомиссии.Наименование;
	ТабДокумент.Вывести(ОбластьМакетаГлаваКомиссии);
	
	Если ЗначениеЗаполнено(РезультатШапка.ПервыйЧленКомиссии) Тогда
		
		ОбластьМакетаЧленКомиссии = Макет.ПолучитьОбласть("ЧленКомиссии");
		ОбластьМакетаЧленКомиссии.Параметры.ФИО_ЧленКомиссии = РезультатШапка.ПервыйЧленКомиссии.Наименование;
		ТабДокумент.Вывести(ОбластьМакетаЧленКомиссии);		
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(РезультатШапка.ВторойЧленКомиссии) Тогда
		
		ОбластьМакетаЧленКомиссии = Макет.ПолучитьОбласть("ЧленКомиссии");
		ОбластьМакетаЧленКомиссии.Параметры.ФИО_ЧленКомиссии = РезультатШапка.ВторойЧленКомиссии.Наименование;
		ТабДокумент.Вывести(ОбластьМакетаЧленКомиссии);		
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(РезультатШапка.ТретийЧленКомиссии) Тогда
		ОбластьМакетаЧленКомиссии = Макет.ПолучитьОбласть("ЧленКомиссии");
		ОбластьМакетаЧленКомиссии.Параметры.ФИО_ЧленКомиссии = РезультатШапка.ТретийЧленКомиссии.Наименование;
		ТабДокумент.Вывести(ОбластьМакетаЧленКомиссии);		
	КонецЕсли;
		
		ОбластьМакетаДно = Макет.ПолучитьОбласть("Дно");
		МассивОбластей.Добавить(ОбластьМакетаДно);
		ТабДокумент.Вывести(ОбластьМакетаДно);
		
	КонецЦикла;
	ТабДокумент.АвтоМасштаб = Истина;
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	Возврат ТабДокумент;

	
КонецФункции

Функция ПечатьИнвентаризационнаяОписьЗапасов(МассивОбъектов, ОбъектыПечати, ПараметрыВывода)
		
	УстановитьПривилегированныйРежим(Истина);
		
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ИнвентаризацияТоваровНаСкладе_ИнвентаризационнаяОписьЗапасов";
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ИнвентаризацияТоваровНаСкладе.ПФ_MXL_ИнвентаризационнаяОписьЗапасов2015");

	ПервыйДокумент = Истина;
	
	Для Каждого Ссылка Из МассивОбъектов Цикл	
		Если Не ПервыйДокумент Тогда
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
	
		ПервыйДокумент = Ложь;
		
	// запрос по шапке документа	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ИнвентаризацияТоваровНаСкладе.Номер,
		|	ИнвентаризацияТоваровНаСкладе.Дата,
		|	ИнвентаризацияТоваровНаСкладе.Организация,
		|	ИнвентаризацияТоваровНаСкладе.Склад,
		|	ИнвентаризацияТоваровНаСкладе.Ответственный,
		|	ИнвентаризацияТоваровНаСкладе.ПредседательКомиссии,
		|	ИнвентаризацияТоваровНаСкладе.ПервыйЧленКомиссии,
		|	ИнвентаризацияТоваровНаСкладе.ВторойЧленКомиссии,
		|	ИнвентаризацияТоваровНаСкладе.ТретийЧленКомиссии,
		|	ИнвентаризацияТоваровНаСкладе.КтоПровелКонтрольнуюПроверку,
		|	ИнвентаризацияТоваровНаСкладе.ОтветственноеЛицо,
		|	ИнвентаризацияТоваровНаСкладе.ИНАГРО_СчетУчетаБУ,
		|	ИнвентаризацияТоваровНаСкладе.ИНАГРО_ДокументОснованиеДата,
		|	ИнвентаризацияТоваровНаСкладе.ИНАГРО_ДокументОснованиеНомер,
		|	РаботникиОрганизацийСрезПоследних.Должность КАК Должность,
		|	ИнвентаризацияТоваровНаСкладе.Организация.КодПоЕДРПОУ КАК КодПоЕДРПОУ
		|ИЗ
		|	Документ.ИнвентаризацияТоваровНаСкладе КАК ИнвентаризацияТоваровНаСкладе
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИНАГРО_РаботникиОрганизаций.СрезПоследних(&Дата, ) КАК РаботникиОрганизацийСрезПоследних
		|		ПО ИнвентаризацияТоваровНаСкладе.Организация = РаботникиОрганизацийСрезПоследних.Организация
		|			И ИнвентаризацияТоваровНаСкладе.ОтветственноеЛицо.Ссылка = РаботникиОрганизацийСрезПоследних.Сотрудник.ФизическоеЛицо
		|ГДЕ
		|	ИнвентаризацияТоваровНаСкладе.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Дата", Ссылка.Дата);
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	РезультатШапка = Запрос.Выполнить().Выбрать();
	РезультатШапка.Следующий();
	
	// запрос по табличной части документа		
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ИнвентаризацияТоваровНаСкладеТовары.НомерСтроки,
		|	ИнвентаризацияТоваровНаСкладеТовары.ЕдиницаИзмерения,
		|	ИнвентаризацияТоваровНаСкладеТовары.Количество,
		|	ИнвентаризацияТоваровНаСкладеТовары.КоличествоУчет,
		|	ИнвентаризацияТоваровНаСкладеТовары.Коэффициент,
		|	ИнвентаризацияТоваровНаСкладеТовары.Номенклатура,
		|	ИнвентаризацияТоваровНаСкладеТовары.Сумма,
		|	ИнвентаризацияТоваровНаСкладеТовары.СуммаУчет,
		|	ИнвентаризацияТоваровНаСкладеТовары.Цена,
		|	ИнвентаризацияТоваровНаСкладеТовары.ЦенаВРознице,
		|	ИнвентаризацияТоваровНаСкладеТовары.СчетУчетаБУ
		|ИЗ
		|	Документ.ИнвентаризацияТоваровНаСкладе.Товары КАК ИнвентаризацияТоваровНаСкладеТовары
		|ГДЕ
		|	ИнвентаризацияТоваровНаСкладеТовары.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	РезультатТабличнаяЧасть = Запрос.Выполнить().Выгрузить();
	
	Макет = ПолучитьМакет("ПФ_MXL_ИнвентаризационнаяОписьЗапасов2015");
 	// всегда на украинском	
	КодЯзыкаПечать = "uk";

	МассивОбластей = Новый Массив();
	
	ОбластьМакетаЗаголовок = Макет.ПолучитьОбласть("Заголовок");
	ОбластьМакетаШапкаТаблицы = Макет.ПолучитьОбласть("ШапкаТаблицы");
	ОбластьМакетаНумерацияКолонок = Макет.ПолучитьОбласть("НумерацияКолонок");
	ОбластьМакетаСтрока = Макет.ПолучитьОбласть("Строка");
	ОбластьМакетаИтого = Макет.ПолучитьОбласть("Итого");
	ОбластьМакетаПодвал = Макет.ПолучитьОбласть("Подвал");
	ОбластьМакетаГлаваКомиссии = Макет.ПолучитьОбласть("ГлаваКомиссии");
	ОбластьМакетаЧленКомиссии = Макет.ПолучитьОбласть("ЧленКомиссии");
	ОбластьМакетаДно = Макет.ПолучитьОбласть("Дно");
	ОбластьМакетаСтраница = Макет.ПолучитьОбласть("СтрокаСтраница");
		
	ОбластьМакетаЗаголовок.Параметры.Организация = РезультатШапка.Организация.НаименованиеПолное;
	
	КодЕДРПОУ = СокрЛП(РезультатШапка.КодПоЕДРПОУ);
	Если Не ПустаяСтрока(КодЕДРПОУ) И СтрДлина(КодЕДРПОУ) = 8 Тогда
		ОбластьМакетаЗаголовок.Параметры.КодЕДРПОУ1 = Сред(РезультатШапка.КодПоЕДРПОУ, 1, 1);
		ОбластьМакетаЗаголовок.Параметры.КодЕДРПОУ2 = Сред(РезультатШапка.КодПоЕДРПОУ, 2, 1);
		ОбластьМакетаЗаголовок.Параметры.КодЕДРПОУ3 = Сред(РезультатШапка.КодПоЕДРПОУ, 3, 1);
		ОбластьМакетаЗаголовок.Параметры.КодЕДРПОУ4 = Сред(РезультатШапка.КодПоЕДРПОУ, 4, 1);
		ОбластьМакетаЗаголовок.Параметры.КодЕДРПОУ5 = Сред(РезультатШапка.КодПоЕДРПОУ, 5, 1);
		ОбластьМакетаЗаголовок.Параметры.КодЕДРПОУ6 = Сред(РезультатШапка.КодПоЕДРПОУ, 6, 1);
		ОбластьМакетаЗаголовок.Параметры.КодЕДРПОУ7 = Сред(РезультатШапка.КодПоЕДРПОУ, 7, 1);
		ОбластьМакетаЗаголовок.Параметры.КодЕДРПОУ8 = Сред(РезультатШапка.КодПоЕДРПОУ, 8, 1);
	КонецЕсли;

	ОбластьМакетаЗаголовок.Параметры.ДатаСкладання = Формат(Ссылка.Дата,"ДФ=dd.MM.yyyy");
	ОбластьМакетаЗаголовок.Параметры.ДатаПриказа = Формат(РезультатШапка.ИНАГРО_ДокументОснованиеДата,"ДФ=dd.MM.yyyy");
	ОбластьМакетаЗаголовок.Параметры.НомерПриказа = РезультатШапка.ИНАГРО_ДокументОснованиеНомер;
	
	СписокСчетов      = РезультатТабличнаяЧасть.Скопировать();
	СписокСчетов.Сортировать("СчетУчетаБУ");
	СписокСчетов.Свернуть("СчетУчетаБУ");
	СписокСчетов = СписокСчетов.ВыгрузитьКолонку("СчетУчетаБУ");
	Ключ = 0;
	СтрокаСчетов = "";
	Пока Ключ <= СписокСчетов.Количество() - 1 Цикл
		Если СокрЛП(СписокСчетов[Ключ]) = "" Тогда
			Ключ = Ключ + 1;
			Продолжить;
		КонецЕсли;	
		СтрокаСчетов = СтрокаСчетов + СокрЛП(СписокСчетов[Ключ]) + ", ";
		Ключ = Ключ + 1;
	КонецЦикла;
	СтрокаСчетов = Лев(СтрокаСчетов, СтрДлина(СтрокаСчетов) - 2);
	ОбластьМакетаЗаголовок.Параметры.СписокСчетов = СтрокаСчетов;
	Если ЗначениеЗаполнено(РезультатШапка.Склад) Тогда
		ОбластьМакетаЗаголовок.Параметры.СписокМХ = РезультатШапка.Склад.Наименование;
	КонецЕсли;
	Если ЗначениеЗаполнено(РезультатШапка.Должность) Тогда
		ОбластьМакетаЗаголовок.Параметры.Должность = РезультатШапка.Должность.Наименование;
	КонецЕсли;
	Если ЗначениеЗаполнено(РезультатШапка.ОтветственноеЛицо) Тогда
		ОбластьМакетаЗаголовок.Параметры.ФИО = РезультатШапка.ОтветственноеЛицо.Наименование;
	КонецЕсли;
	ОбластьМакетаЗаголовок.Параметры.Дата = Формат(Ссылка.Дата,"ДЛФ=ДД");
	ОбластьМакетаЗаголовок.Параметры.ДатаНачала = Формат(Ссылка.Дата,"ДЛФ=ДД");
	ОбластьМакетаЗаголовок.Параметры.ДатаОкончания = Формат(Ссылка.Дата,"ДЛФ=ДД");
	
	ТабДокумент.Вывести(ОбластьМакетаЗаголовок);
	МассивОбластей.Добавить(ОбластьМакетаЗаголовок);
	
	
	МассивОбластей.Добавить(ОбластьМакетаШапкаТаблицы);
	МассивОбластей.Добавить(ОбластьМакетаНумерацияКолонок);
	
	Если НЕ ТабДокумент.ПроверитьВывод(МассивОбластей) Тогда
		// Выведем разрыв страницы
		ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
	КонецЕсли;
	
	ТабДокумент.Вывести(ОбластьМакетаШапкаТаблицы);
	ТабДокумент.Вывести(ОбластьМакетаНумерацияКолонок);
	
	КоличествоНаСтранице = 0;
	НомеровНаСтранице = 0;
	
	Для Каждого СтрокаТаблицыЗначений  Из РезультатТабличнаяЧасть Цикл
		
		ОбластьМакетаСтрока = Макет.ПолучитьОбласть("Строка");
		ОбластьМакетаСтрока.Параметры.ПорядковыйНомер       = СтрокаТаблицыЗначений.НомерСтроки;
		ОбластьМакетаСтрока.Параметры.СчетУчета             = СтрокаТаблицыЗначений.СчетУчетаБУ;
		ОбластьМакетаСтрока.Параметры.НеоборотныйАктив      = СтрокаТаблицыЗначений.Номенклатура.Наименование;
		ОбластьМакетаСтрока.Параметры.НоменклатурныйНомер   = СтрокаТаблицыЗначений.Номенклатура.Код;
		ОбластьМакетаСтрока.Параметры.ЕдИзм                 = СтрокаТаблицыЗначений.ЕдиницаИзмерения.Наименование;
		ОбластьМакетаСтрока.Параметры.ФактическоеКоличество = СтрокаТаблицыЗначений.Количество;
		ОбластьМакетаСтрока.Параметры.Цена                  = СтрокаТаблицыЗначений.Цена;
		ОбластьМакетаСтрока.Параметры.ФактическаяСумма      = СтрокаТаблицыЗначений.Сумма;
		ОбластьМакетаСтрока.Параметры.Количество            = СтрокаТаблицыЗначений.КоличествоУчет;
		ОбластьМакетаСтрока.Параметры.Сумма                 = СтрокаТаблицыЗначений.СуммаУчет;		
		
		МассивОбластей.Очистить();
		МассивОбластей.Добавить(ОбластьМакетаСтрока);
		МассивОбластей.Добавить(ОбластьМакетаСтраница);
		МассивОбластей.Добавить(ОбластьМакетаИтого);
		Если НЕ ТабДокумент.ПроверитьВывод(МассивОбластей) Тогда
			ОбластьМакетаСтраница  = Макет.ПолучитьОбласть("СтрокаСтраница");
			ОбластьМакетаСтраница.Параметры.КоличествоНаСтранице = ОбщегоНазначенияБПВызовСервера.КоличествоПрописью(КоличествоНаСтранице,КодЯзыкаПечать);
			ОбластьМакетаСтраница.Параметры.НомеровНаСтранице =  ОбщегоНазначенияБПВызовСервера.КоличествоПрописью(НомеровНаСтранице,КодЯзыкаПечать);
			КоличествоНаСтранице = 0;
			НомеровНаСтранице = 0;
			
			ТабДокумент.Вывести(ОбластьМакетаСтраница);	
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
						
		КонецЕсли;
		
		ТабДокумент.Вывести(ОбластьМакетаСтрока);
		КоличествоНаСтранице = КоличествоНаСтранице + СтрокаТаблицыЗначений.Количество;
		НомеровНаСтранице = НомеровНаСтранице + 1;
		
	КонецЦикла;
	
	ОбластьМакетаИтого = Макет.ПолучитьОбласть("Итого");
	ОбластьМакетаИтого.Параметры.ФактическоеКоличество = РезультатТабличнаяЧасть.Итог("Количество");
	ОбластьМакетаИтого.Параметры.ФактическаяСумма      = РезультатТабличнаяЧасть.Итог("Сумма");
	ОбластьМакетаИтого.Параметры.Количество	           = РезультатТабличнаяЧасть.Итог("КоличествоУчет");                                      
	ОбластьМакетаИтого.Параметры.Сумма                 = РезультатТабличнаяЧасть.Итог("СуммаУчет");
	
	ТабДокумент.Вывести(ОбластьМакетаИтого);
	
	ОбластьМакетаСтраница  = Макет.ПолучитьОбласть("СтрокаСтраница");
	ОбластьМакетаСтраница.Параметры.КоличествоНаСтранице =ОбщегоНазначенияБПВызовСервера.КоличествоПрописью(КоличествоНаСтранице,КодЯзыкаПечать);
	ОбластьМакетаСтраница.Параметры.НомеровНаСтранице =  ОбщегоНазначенияБПВызовСервера.КоличествоПрописью(НомеровНаСтранице,КодЯзыкаПечать);
	ТабДокумент.Вывести(ОбластьМакетаСтраница);
	
	МассивОбластей.Очистить();
	МассивОбластей.Добавить(ОбластьМакетаПодвал);
	Если НЕ ТабДокумент.ПроверитьВывод(МассивОбластей) Тогда
		ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
	КонецЕсли;
	
	ОбластьМакетаПодвал = Макет.ПолучитьОбласть("Подвал");
	КоличествоПозицийПрописью = ОбщегоНазначенияБПВызовСервера.КоличествоПрописью(РезультатТабличнаяЧасть.Количество(),КодЯзыкаПечать);
	ФактическоеКоличествоПрописью = ОбщегоНазначенияБПВызовСервера.КоличествоПрописью(РезультатТабличнаяЧасть.Итог("Количество"),КодЯзыкаПечать);
	ФактическаяСуммаПрописью = ОбщегоНазначенияБПВызовСервера.КоличествоПрописью(РезультатТабличнаяЧасть.Итог("Сумма"),КодЯзыкаПечать); 
	КоличествоПрописью = ОбщегоНазначенияБПВызовСервера.КоличествоПрописью(РезультатТабличнаяЧасть.Итог("КоличествоУчет"),КодЯзыкаПечать);
	СуммаПрописью = ОбщегоНазначенияБПВызовСервера.КоличествоПрописью(РезультатТабличнаяЧасть.Итог("СуммаУчет"), КодЯзыкаПечать);
	
	ОбластьМакетаПодвал.Параметры.КоличествоПозицийПрописью = КоличествоПозицийПрописью;
	ОбластьМакетаПодвал.Параметры.ФактическоеКоличествоПрописью = ФактическоеКоличествоПрописью;
	ОбластьМакетаПодвал.Параметры.ФактическаяСуммаПрописью = ФактическаяСуммаПрописью;
	ОбластьМакетаПодвал.Параметры.КоличествоПрописью = КоличествоПрописью;
	ОбластьМакетаПодвал.Параметры.СуммаПрописью = СуммаПрописью;
	
	ТабДокумент.Вывести(ОбластьМакетаПодвал);
	
	МассивОбластей.Очистить();
	МассивОбластей.Добавить(ОбластьМакетаГлаваКомиссии);
	МассивОбластей.Добавить(ОбластьМакетаЧленКомиссии);
	МассивОбластей.Добавить(ОбластьМакетаЧленКомиссии);
	МассивОбластей.Добавить(ОбластьМакетаЧленКомиссии);
	
	Если НЕ ТабДокумент.ПроверитьВывод(МассивОбластей) Тогда
		ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
	КонецЕсли;
	
	// выводим ФИО и должность членов комиссии
	ВыборкаПоКомиссии = ОбщегоНазначенияБПВызовСервера.ПолучитьСведенияОКомиссии(Ссылка);
	
	ОбластьМакетаГлаваКомиссии = Макет.ПолучитьОбласть("ГлаваКомиссии");
	ОбластьМакетаГлаваКомиссии.Параметры.Должность_ГлаваКомиссии = ВыборкаПоКомиссии.ПредседательКомиссииДолжность;
	ОбластьМакетаГлаваКомиссии.Параметры.ФИО_ГлаваКомиссии = РезультатШапка.ПредседательКомиссии.Наименование;
	ТабДокумент.Вывести(ОбластьМакетаГлаваКомиссии);
	
	Если ЗначениеЗаполнено(РезультатШапка.ПервыйЧленКомиссии) Тогда
		
		ОбластьМакетаЧленКомиссии = Макет.ПолучитьОбласть("ЧленКомиссии");
		ОбластьМакетаЧленКомиссии.Параметры.Должность_ЧленКомиссии = ВыборкаПоКомиссии.ПервыйЧленКомиссииДолжность;
		ОбластьМакетаЧленКомиссии.Параметры.ФИО_ЧленКомиссии = РезультатШапка.ПервыйЧленКомиссии.Наименование;
		ТабДокумент.Вывести(ОбластьМакетаЧленКомиссии);		
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(РезультатШапка.ВторойЧленКомиссии) Тогда
		
		ОбластьМакетаЧленКомиссии = Макет.ПолучитьОбласть("ЧленКомиссии");
		ОбластьМакетаЧленКомиссии.Параметры.Должность_ЧленКомиссии = ВыборкаПоКомиссии.ВторойЧленКомиссииДолжность;
		ОбластьМакетаЧленКомиссии.Параметры.ФИО_ЧленКомиссии = РезультатШапка.ВторойЧленКомиссии.Наименование;
		ТабДокумент.Вывести(ОбластьМакетаЧленКомиссии);		
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(РезультатШапка.ТретийЧленКомиссии) Тогда
		
		ОбластьМакетаЧленКомиссии = Макет.ПолучитьОбласть("ЧленКомиссии");
		ОбластьМакетаЧленКомиссии.Параметры.Должность_ЧленКомиссии = ВыборкаПоКомиссии.ТретийЧленКомиссииДолжность;
		ОбластьМакетаЧленКомиссии.Параметры.ФИО_ЧленКомиссии = РезультатШапка.ТретийЧленКомиссии.Наименование;
		ТабДокумент.Вывести(ОбластьМакетаЧленКомиссии);		
		
	КонецЕсли;
	
	МассивОбластей.Очистить();
	МассивОбластей.Добавить(ОбластьМакетаДно);
	Если НЕ ТабДокумент.ПроверитьВывод(МассивОбластей) Тогда
		ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
	КонецЕсли;
	ОбластьМакетаДно = Макет.ПолучитьОбласть("Дно");
	Если ЗначениеЗаполнено(РезультатШапка.Должность) Тогда
		ОбластьМакетаДно.Параметры.Должность = РезультатШапка.Должность.Наименование;
	КонецЕсли;
	Если ЗначениеЗаполнено(РезультатШапка.ОтветственноеЛицо) Тогда
		ОбластьМакетаДно.Параметры.ФИО = РезультатШапка.ОтветственноеЛицо.Наименование;
	КонецЕсли;
	ОбластьМакетаДно.Параметры.ПорядковыйНомер = НомеровНаСтранице;
	ТабДокумент.Вывести(ОбластьМакетаДно);
КонецЦикла;
	ТабДокумент.АвтоМасштаб = Истина;
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	Возврат ТабДокумент;
	
КонецФункции

Функция ПечатьПротоколИнвентаризации(МассивОбъектов, ОбъектыПечати, ПараметрыВывода)
			
	УстановитьПривилегированныйРежим(Истина);
		
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ИнвентаризацияТоваровНаСкладе_ПротоколИвентаризации";
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ИнвентаризацияТоваровНаСкладе.ПФ_MXL_ПротоколИнвентаризации2015");

	ПервыйДокумент = Истина;
	
	Для Каждого Ссылка Из МассивОбъектов Цикл	
		Если Не ПервыйДокумент Тогда
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
	
		ПервыйДокумент = Ложь;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ИнвентаризацияТоваровНаСкладе.Номер,
		|	ИнвентаризацияТоваровНаСкладе.Дата,
		|	ИнвентаризацияТоваровНаСкладе.Организация,
		|	ИнвентаризацияТоваровНаСкладе.Склад,
		|	ИнвентаризацияТоваровНаСкладе.Ответственный,
		|	ИнвентаризацияТоваровНаСкладе.ПредседательКомиссии,
		|	ИнвентаризацияТоваровНаСкладе.ПервыйЧленКомиссии,
		|	ИнвентаризацияТоваровНаСкладе.ВторойЧленКомиссии,
		|	ИнвентаризацияТоваровНаСкладе.ТретийЧленКомиссии,
		|	ИнвентаризацияТоваровНаСкладе.КтоПровелКонтрольнуюПроверку,
		|	ИнвентаризацияТоваровНаСкладе.ОтветственноеЛицо,
		|	ИнвентаризацияТоваровНаСкладе.ИНАГРО_СчетУчетаБУ,
		|	ИнвентаризацияТоваровНаСкладе.ИНАГРО_ДокументОснованиеДата,
		|	ИнвентаризацияТоваровНаСкладе.ИНАГРО_ДокументОснованиеНомер,
		|	ОтветственныеЛицаОрганизацийСрезПоследних.Должность КАК ДолжностьОтветственногоЛица,
		|	ИнвентаризацияТоваровНаСкладе.Организация.КодПоЕДРПОУ КАК КодПоЕДРПОУ
		|ИЗ
		|	Документ.ИнвентаризацияТоваровНаСкладе КАК ИнвентаризацияТоваровНаСкладе
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтветственныеЛицаОрганизаций.СрезПоследних(&Дата, ) КАК ОтветственныеЛицаОрганизацийСрезПоследних
		|		ПО ИнвентаризацияТоваровНаСкладе.Организация = ОтветственныеЛицаОрганизацийСрезПоследних.СтруктурнаяЕдиница
		|			И ИнвентаризацияТоваровНаСкладе.ОтветственноеЛицо = ОтветственныеЛицаОрганизацийСрезПоследних.ФизическоеЛицо
		|ГДЕ
		|	ИнвентаризацияТоваровНаСкладе.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Дата", Ссылка.Дата);
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	РезультатШапка = Запрос.Выполнить().Выбрать();
	РезультатШапка.Следующий();
	
			
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ИнвентаризацияТоваровНаСкладеТовары.НомерСтроки,
		|	ИнвентаризацияТоваровНаСкладеТовары.ЕдиницаИзмерения,
		|	ИнвентаризацияТоваровНаСкладеТовары.Количество,
		|	ИнвентаризацияТоваровНаСкладеТовары.КоличествоУчет,
		|	ИнвентаризацияТоваровНаСкладеТовары.Коэффициент,
		|	ИнвентаризацияТоваровНаСкладеТовары.Номенклатура,
		|	ИнвентаризацияТоваровНаСкладеТовары.Сумма,
		|	ИнвентаризацияТоваровНаСкладеТовары.СуммаУчет,
		|	ИнвентаризацияТоваровНаСкладеТовары.Цена,
		|	ИнвентаризацияТоваровНаСкладеТовары.ЦенаВРознице,
		|	ИнвентаризацияТоваровНаСкладеТовары.СчетУчетаБУ
		|ИЗ
		|	Документ.ИнвентаризацияТоваровНаСкладе.Товары КАК ИнвентаризацияТоваровНаСкладеТовары
		|ГДЕ
		|	ИнвентаризацияТоваровНаСкладеТовары.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	РезультатТабличнаяЧасть = Запрос.Выполнить().Выгрузить();
	
	РезультатТабличнаяЧасть.Колонки.Добавить("Разница", Новый ОписаниеТипов("Число",,Новый КвалификаторыЧисла(15,2)));
	РезультатТабличнаяЧасть.Колонки.Добавить("РазницаСум", Новый ОписаниеТипов("Число",,Новый КвалификаторыЧисла(15,2)));
	
	Ит = 0;
	Для каждого Строка Из РезультатТабличнаяЧасть Цикл
		
		Пока Ит < РезультатТабличнаяЧасть.Количество() Цикл
			
			СтрокаТаблицы = РезультатТабличнаяЧасть.Получить(Ит);
			Разница = СтрокаТаблицы.Количество - СтрокаТаблицы.КоличествоУчет;
			Если Разница = 0 Тогда
				РезультатТабличнаяЧасть.Удалить(СтрокаТаблицы);
			Иначе
				СтрокаТаблицы.Разница = Разница;
				СтрокаТаблицы.РазницаСум = СтрокаТаблицы.Сумма - СтрокаТаблицы.СуммаУчет; 
				Ит = Ит + 1;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Макет = ПолучитьМакет("ПФ_MXL_ПротоколИнвентаризации2015");
	// всегда на украинском
	КодЯзыкаПечать = "uk"; 
	
	ОбластьМакетаЗаголовок = Макет.ПолучитьОбласть("Заголовок");
	ОбластьМакетаШапкаТаблицы = Макет.ПолучитьОбласть("ШапкаТаблицы");
	ОбластьМакетаНумерацияКолонок = Макет.ПолучитьОбласть("НумерацияКолонок");
	ОбластьМакетаСтрока = Макет.ПолучитьОбласть("Строка");
	ОбластьМакетаИтого = Макет.ПолучитьОбласть("Итого");
	ОбластьМакетаГлаваКомиссии = Макет.ПолучитьОбласть("ГлаваКомиссии");
	ОбластьМакетаЧленКомиссии = Макет.ПолучитьОбласть("ЧленКомиссии");
	ОбластьМакетаДно = Макет.ПолучитьОбласть("Дно");
	ОбластьМакетаРешение = Макет.ПолучитьОбласть("Решение");
	
	МассивОбластей = Новый Массив;
	
	ОбластьМакетаЗаголовок.Параметры.Организация = РезультатШапка.Организация.НаименованиеПолное;
	
	КодЕДРПОУ = СокрЛП(РезультатШапка.КодПоЕДРПОУ);
	Если Не ПустаяСтрока(КодЕДРПОУ) И СтрДлина(КодЕДРПОУ) = 8 Тогда
		ОбластьМакетаЗаголовок.Параметры.КодЕДРПОУ1 = Сред(РезультатШапка.КодПоЕДРПОУ, 1, 1);
		ОбластьМакетаЗаголовок.Параметры.КодЕДРПОУ2 = Сред(РезультатШапка.КодПоЕДРПОУ, 2, 1);
		ОбластьМакетаЗаголовок.Параметры.КодЕДРПОУ3 = Сред(РезультатШапка.КодПоЕДРПОУ, 3, 1);
		ОбластьМакетаЗаголовок.Параметры.КодЕДРПОУ4 = Сред(РезультатШапка.КодПоЕДРПОУ, 4, 1);
		ОбластьМакетаЗаголовок.Параметры.КодЕДРПОУ5 = Сред(РезультатШапка.КодПоЕДРПОУ, 5, 1);
		ОбластьМакетаЗаголовок.Параметры.КодЕДРПОУ6 = Сред(РезультатШапка.КодПоЕДРПОУ, 6, 1);
		ОбластьМакетаЗаголовок.Параметры.КодЕДРПОУ7 = Сред(РезультатШапка.КодПоЕДРПОУ, 7, 1);
		ОбластьМакетаЗаголовок.Параметры.КодЕДРПОУ8 = Сред(РезультатШапка.КодПоЕДРПОУ, 8, 1);
	КонецЕсли;
	
	ОтветственныеЛицаОрганизации = ОтветственныеЛицаБП.ОтветственныеЛица(Ссылка.Организация, ТекущаяДата(),);
	ОбластьМакетаЗаголовок.Параметры.ДолжностьРуководителя = ОтветственныеЛицаОрганизации.РуководительДолжность;
	ОбластьМакетаЗаголовок.Параметры.ФИО_Руководитель =  ОтветственныеЛицаОрганизации.РуководительПредставление;
	ОбластьМакетаЗаголовок.Параметры.Дата = Формат(Ссылка.Дата,"ДФ=dd.MM.yyyy");;
	ОбластьМакетаЗаголовок.Параметры.ДатаПриказа = Формат(РезультатШапка.ИНАГРО_ДокументОснованиеДата,"ДФ=dd.MM.yyyy");  
	ОбластьМакетаЗаголовок.Параметры.НомерПриказа = РезультатШапка.ИНАГРО_ДокументОснованиеНомер;
	Если ЗначениеЗаполнено(РезультатШапка.ПредседательКомиссии) Тогда
		ОбластьМакетаЗаголовок.Параметры.ФИО_ГлаваКомиссии = РезультатШапка.ПредседательКомиссии.Наименование;
	КонецЕсли;
	
	СписокЧленовКомиссии = Новый Массив;
	Если ЗначениеЗаполнено(РезультатШапка.ПервыйЧленКомиссии) Тогда
		СписокЧленовКомиссии.Добавить(РезультатШапка.ПервыйЧленКомиссии.Наименование);
	КонецЕсли;
	Если ЗначениеЗаполнено(РезультатШапка.ВторойЧленКомиссии) Тогда
		СписокЧленовКомиссии.Добавить(РезультатШапка.ВторойЧленКомиссии.Наименование);
	КонецЕсли;
	Если ЗначениеЗаполнено(РезультатШапка.ТретийЧленКомиссии) Тогда
		СписокЧленовКомиссии.Добавить(РезультатШапка.ТретийЧленКомиссии.Наименование);
	КонецЕсли;
	
	Сч = 0;
	СтрокаЧленовКомиссии = "";
	Пока Сч <= СписокЧленовКомиссии.Количество() - 1 Цикл
		Если Сч = СписокЧленовКомиссии.Количество() - 1 Тогда
			СтрокаЧленовКомиссии = СтрокаЧленовКомиссии + СокрЛП(СписокЧленовКомиссии[Сч]);
			Сч = Сч + 1;
			Продолжить;
		КонецЕсли;	
		СтрокаЧленовКомиссии = СтрокаЧленовКомиссии + СокрЛП(СписокЧленовКомиссии[Сч]) + ", ";
		Сч = Сч + 1;
	КонецЦикла;
	
	ОбластьМакетаЗаголовок.Параметры.ФИО_ЧленыКомиссии = СтрокаЧленовКомиссии;
	ОбластьМакетаЗаголовок.Параметры.КоличествоНаименованийТМЦ = Ссылка.Товары.Итог("Количество");
	ОбластьМакетаЗаголовок.Параметры.СуммаВсегоТМЦ = Ссылка.Товары.Итог("Сумма");
	
	ТабДокумент.Вывести(ОбластьМакетаЗаголовок);
	ТабДокумент.Вывести(ОбластьМакетаШапкаТаблицы);
	ТабДокумент.Вывести(ОбластьМакетаНумерацияКолонок);
	
	МассивОбластей.Очистить();
	МассивОбластей.Добавить(ОбластьМакетаСтрока);
	Если НЕ ТабДокумент.ПроверитьВывод(МассивОбластей) Тогда
		ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
	КонецЕсли;
	
	
	НомерСтроки = 1;
	Для каждого СтрокаТаблицыЗначений Из РезультатТабличнаяЧасть Цикл
		
		ОбластьМакетаСтрока.Параметры.ПорядковыйНомер = НомерСтроки;
		ОбластьМакетаСтрока.Параметры.НеоборотныйАктив = СтрокаТаблицыЗначений.Номенклатура.Наименование;
		ОбластьМакетаСтрока.Параметры.ФИО = РезультатШапка.ОтветственноеЛицо.Наименование;
		ОбластьМакетаСтрока.Параметры.РазницаКоличество = СтрокаТаблицыЗначений.Разница;
		ОбластьМакетаСтрока.Параметры.РазницаСумма = СтрокаТаблицыЗначений.РазницаСум;
		
		МассивОбластей.Очистить();
		МассивОбластей.Добавить(ОбластьМакетаСтрока);
		Если НЕ ТабДокумент.ПроверитьВывод(МассивОбластей) Тогда
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			ТабДокумент.Вывести(ОбластьМакетаНумерацияКолонок);
		КонецЕсли;
		
		ТабДокумент.Вывести(ОбластьМакетаСтрока);
		НомерСтроки = НомерСтроки + 1;
	КонецЦикла;
	
	МассивОбластей.Очистить();
	МассивОбластей.Добавить(ОбластьМакетаИтого);
	Если НЕ ТабДокумент.ПроверитьВывод(МассивОбластей) Тогда
		ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
	КонецЕсли;
	
	ОбластьМакетаИтого.Параметры.РазницаКоличество = РезультатТабличнаяЧасть.Итог("Разница");
	ОбластьМакетаИтого.Параметры.РазницаСумма = РезультатТабличнаяЧасть.Итог("РазницаСум");
	
	ТабДокумент.Вывести(ОбластьМакетаИтого);
	
	МассивОбластей.Очистить();
	МассивОбластей.Добавить(ОбластьМакетаГлаваКомиссии);
	МассивОбластей.Добавить(ОбластьМакетаЧленКомиссии);
	МассивОбластей.Добавить(ОбластьМакетаЧленКомиссии);
	МассивОбластей.Добавить(ОбластьМакетаЧленКомиссии);
	Если НЕ ТабДокумент.ПроверитьВывод(МассивОбластей) Тогда
		ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
	КонецЕсли;
	
	// выводим ФИО и должность членов комиссии
	ВыборкаПоКомиссии = ОбщегоНазначенияБПВызовСервера.ПолучитьСведенияОКомиссии(Ссылка);

	ОбластьМакетаГлаваКомиссии = Макет.ПолучитьОбласть("ГлаваКомиссии");
	ОбластьМакетаГлаваКомиссии.Параметры.Должность_ГлаваКомиссии = ВыборкаПоКомиссии.ПредседательКомиссииДолжность;
	ОбластьМакетаГлаваКомиссии.Параметры.ФИО_ГлаваКомиссии = РезультатШапка.ПредседательКомиссии.Наименование;
	ТабДокумент.Вывести(ОбластьМакетаГлаваКомиссии);
	
	Если ЗначениеЗаполнено(РезультатШапка.ПервыйЧленКомиссии) Тогда
		
		ОбластьМакетаЧленКомиссии = Макет.ПолучитьОбласть("ЧленКомиссии");
		ОбластьМакетаЧленКомиссии.Параметры.Должность_ЧленКомиссии = ВыборкаПоКомиссии.ПервыйЧленКомиссииДолжность;
		ОбластьМакетаЧленКомиссии.Параметры.ФИО_ЧленКомиссии = РезультатШапка.ПервыйЧленКомиссии.Наименование;
		ТабДокумент.Вывести(ОбластьМакетаЧленКомиссии);		
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(РезультатШапка.ВторойЧленКомиссии) Тогда
		
		ОбластьМакетаЧленКомиссии = Макет.ПолучитьОбласть("ЧленКомиссии");
		ОбластьМакетаЧленКомиссии.Параметры.Должность_ЧленКомиссии = ВыборкаПоКомиссии.ВторойЧленКомиссииДолжность;
		ОбластьМакетаЧленКомиссии.Параметры.ФИО_ЧленКомиссии = РезультатШапка.ВторойЧленКомиссии.Наименование;
		ТабДокумент.Вывести(ОбластьМакетаЧленКомиссии);		
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(РезультатШапка.ТретийЧленКомиссии) Тогда
		
		ОбластьМакетаЧленКомиссии = Макет.ПолучитьОбласть("ЧленКомиссии");
		ОбластьМакетаЧленКомиссии.Параметры.Должность_ЧленКомиссии = ВыборкаПоКомиссии.ТретийЧленКомиссииДолжность;
		ОбластьМакетаЧленКомиссии.Параметры.ФИО_ЧленКомиссии = РезультатШапка.ТретийЧленКомиссии.Наименование;
		ТабДокумент.Вывести(ОбластьМакетаЧленКомиссии);		
		
	КонецЕсли;
	
	ТабДокумент.Вывести(ОбластьМакетаДно);
	
	МассивОбластей.Очистить();
	МассивОбластей.Добавить(ОбластьМакетаРешение);
	Если НЕ ТабДокумент.ПроверитьВывод(МассивОбластей) Тогда
		ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
	КонецЕсли;
	
	ТабДокумент.Вывести(ОбластьМакетаРешение);
	КонецЦикла;
	
	ТабДокумент.АвтоМасштаб = Истина;
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;

	Возврат ТабДокумент;
	
КонецФункции
// ИНАГРО--

#КонецОбласти 

#Область ПрограммныйИнтерфейс

// Заполняет счета учета номенклатуры в табличной части документа
Процедура ЗаполнитьСчетаУчетаВТабличнойЧасти(Объект, ИмяТабличнойЧасти) Экспорт

	ТабличнаяЧасть = Объект[ИмяТабличнойЧасти];
	
	ДанныеОбъекта = Новый Структура("Дата, Организация, Склад");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
	СоответствиеСчетовУчета = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаУчетаСпискаНоменклатуры(
		ДанныеОбъекта.Организация, ОбщегоНазначения.ВыгрузитьКолонку(ТабличнаяЧасть, "Номенклатура", Истина), ДанныеОбъекта.Склад, ДанныеОбъекта.Дата);
	
	Для Каждого СтрокаТабличнойЧасти Из ТабличнаяЧасть Цикл
		СчетаУчета = СоответствиеСчетовУчета.Получить(СтрокаТабличнойЧасти.Номенклатура);
		ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(ДанныеОбъекта, СтрокаТабличнойЧасти, ИмяТабличнойЧасти, СчетаУчета);
	КонецЦикла;

КонецПроцедуры // ЗаполнитьСчетаУчетаВТабличнойЧасти

// Заполняет счета учета номенклатуры в строке табличной части документа
//
// Параметры:
//  ДанныеОбъекта         - структура данных объекта, используемых при заполнении счетов учета (вид операции,
//                          вид договора контрагента, признак комиссионной торговли и т.п.)
//  СтрокаТабличнойЧасти  - строка табличной части документа
//  ИмяТабличнойЧасти     - имя табличной части документа
//  СведенияОНоменклатуре - структура сведений о номенклатуре, либо структура счетов учета
//
Процедура ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(ДанныеОбъекта, СтрокаТабличнойЧасти, ИмяТабличнойЧасти = "", СведенияОНоменклатуре) Экспорт

	Если СведенияОНоменклатуре = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если СведенияОНоменклатуре.Свойство("СчетаУчета") Тогда
		// СведенияОНоменклатуре - структура сведений номенклатуры
		СчетаУчета = СведенияОНоменклатуре.СчетаУчета;
	ИначеЕсли СведенияОНоменклатуре.Свойство("СчетУчетаБУ") Тогда
		// СведенияОНоменклатуре - структура счетов учета номенклатуры
		СчетаУчета = СведенияОНоменклатуре;
	Иначе
		Возврат;
	КонецЕсли;
	
	ЗаполнитьСчетаБУ(ДанныеОбъекта, СтрокаТабличнойЧасти, ИмяТабличнойЧасти, СчетаУчета);
	ЗаполнитьСчетаНУ(ДанныеОбъекта, СтрокаТабличнойЧасти, ИмяТабличнойЧасти, СчетаУчета);

КонецПроцедуры // ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти 

#Область СлужебныеПроцедурыИФункции

// Заполняет счета БУ в строке табличной части.
Процедура ЗаполнитьСчетаБУ(Объект, СтрокаТЧ, ИмяТабЧасти, СчетаУчета)

	СтрокаТЧ.СчетУчетаБУ = СчетаУчета.СчетУчетаБУ;

КонецПроцедуры // ЗаполнитьСчетаБУ()

// Заполняет счета НУ в строке табличной части.
Процедура ЗаполнитьСчетаНУ(Объект, СтрокаТЧ, ИмяТабЧасти, СчетаУчета)
	

КонецПроцедуры // ЗаполнитьСчетаНУ()

#КонецОбласти  

#КонецЕсли
