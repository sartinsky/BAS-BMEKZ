#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

Перем мВалютаРегламентированногоУчета;

#Область ОбработчикиСобытий

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	ЗаполнениеДокументов.Заполнить(ЭтотОбъект, ДанныеЗаполнения);

КонецПроцедуры 

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// Дерево значений, содержащее имена необходимых полей в запросе по шапке.
	Перем ДеревоПолейЗапросаПоШапке;
	Перем Заголовок, СтруктураШапкиДокумента;
	Перем ТаблицаПоТоварам;
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКПроведению(ЭтотОбъект);
	
	мВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	
	// Заголовок для сообщений об ошибках проведения.	
	Заголовок = ОбщегоНазначенияБПВызовСервера.ПредставлениеДокументаПриПроведении(Ссылка);;
	
	ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента);
	
	ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоТоварам, Отказ, Заголовок);
	
	// Движения по документу
	Если Не Отказ Тогда
		
		ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, Отказ, Заголовок);
		
	КонецЕсли; 	
			
	ПроведениеСервер.ПодготовитьНаборыЗаписейКЗаписиДвижений(ЭтотОбъект);
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКОтменеПроведения(ЭтотОбъект);
	Движения.Записать();
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	Дата = НачалоДня(ОбщегоНазначения.ТекущаяДатаПользователя());
	Ответственный = Пользователи.ТекущийПользователь();
	
КонецПроцедуры

#КонецОбласти

#Область Проведение  

// Процедура формирует структуру шапки документа и дополнительных полей.
//
Процедура ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента) Экспорт
		
	// Дерево значений, содержащее имена необходимых полей в запросе по шапке.
	Перем ДеревоПолейЗапросаПоШапке;
	
	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента = ОбщегоНазначенияРед12.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	
	// Заполним по шапке документа дерево параметров, нужных при проведении.
	ДеревоПолейЗапросаПоШапке = ОбщегоНазначенияРед12.СформироватьДеревоПолейЗапросаПоШапке();
	
	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа.
	СтруктураШапкиДокумента = УправлениеЗапасами.СформироватьЗапросПоДеревуПолей(ЭтотОбъект, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета);
	
КонецПроцедуры // ПодготовитьСтруктуруШапкиДокумента()

// Процедура формирует таблицы документа.
//
Процедура ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоТоварам, Отказ, Заголовок) Экспорт
	
	// Получим необходимые данные для проведения и проверки заполенения данные по табличной части "Товары".
	СтруктураПолей 			= Новый Структура;
	СтруктураПростыхПолей	= Новый Структура;
	
	СтруктураПолей.Вставить("НомерСтроки"        			, "НомерСтроки");
	СтруктураПолей.Вставить("Номенклатура"       			, "Номенклатура");
	СтруктураПолей.Вставить("Количество"         			, "Количество");
	СтруктураПолей.Вставить("КоличествоВОсновномТопливе"	, "КоличествоВОсновномТопливе");
	
	РезультатЗапросаПоТоварам = ОбщегоНазначенияРед12.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураПолей, СтруктураПростыхПолей);
	
	ТаблицаПоТоварам 	       = ПодготовитьТаблицуПоТоварам(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента);
	
КонецПроцедуры

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТоварам - результат запроса по табличной части "Товары",
//  СтруктураШапкиДокумента   - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблица значений.
//
Функция ПодготовитьТаблицуПоТоварам(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента)

	ТаблицаПоТоварам = РезультатЗапросаПоТоварам.Выгрузить();
	
	ТаблицаПоТоварам.Колонки.Добавить("Организация");
	ТаблицаПоТоварам.Колонки.Добавить("ТранспортноеСредство");
	ТаблицаПоТоварам.Колонки.Добавить("ТранспортноеСредствоПолучатель");
	
	ТаблицаПоТоварам.ЗаполнитьЗначения(СтруктураШапкиДокумента.Организация,	"Организация");
	ТаблицаПоТоварам.ЗаполнитьЗначения(СтруктураШапкиДокумента.ТранспортноеСредство,	"ТранспортноеСредство");
	ТаблицаПоТоварам.ЗаполнитьЗначения(СтруктураШапкиДокумента.ТранспортноеСредствоПолучатель,	"ТранспортноеСредствоПолучатель");
	
	Возврат ТаблицаПоТоварам;

КонецФункции

// Проводит табличные части "Товары" по регистрам
//
// Параметры:
//  ТаблицаПоТоварам          - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//	СтруктураШапкиДокумента   - выборка из результата запроса по шапке документа,
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, Отказ, Заголовок)
	
	ДвиженияПоРегистрамТранспорта(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, Отказ, Заголовок);
	ДвиженияПоРегиструПоказанияСпидометраИБака(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, Отказ, Заголовок);
	
КонецПроцедуры

Процедура ДвиженияПоРегистрамТранспорта(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, Отказ, Заголовок)
	
	Для Каждого СтрокаТЧ Из ТаблицаПоТоварам Цикл 
		
		Движение = Движения.ИНАГРО_ТопливоВТС.Добавить();		
		Движение.Период 	       = СтруктураШапкиДокумента.Дата;
		Движение.ВидДвижения       = ВидДвиженияНакопления.Расход;		
		ЗаполнитьЗначенияСвойств(Движение, СтрокаТЧ);		
		Движение.Организация 	   = СтруктураШапкиДокумента.Организация;
		Движение.ОсновноеСредство  = СтрокаТЧ.ТранспортноеСредство;
		Движение.Топливо 		   = СтрокаТЧ.Номенклатура; 
		Движение.КоличествоТоплива = СтрокаТЧ.Количество;
		
		Движение = Движения.ИНАГРО_ТопливоВТС.Добавить();		
		Движение.Период 	       = СтруктураШапкиДокумента.Дата;
		Движение.ВидДвижения       = ВидДвиженияНакопления.Приход;		
		ЗаполнитьЗначенияСвойств(Движение, СтрокаТЧ); 		
		Движение.Организация 	   = СтруктураШапкиДокумента.Организация;
		Движение.ОсновноеСредство  = СтрокаТЧ.ТранспортноеСредствоПолучатель;
		Движение.Топливо 		   = СтрокаТЧ.Номенклатура; 
		Движение.КоличествоТоплива = СтрокаТЧ.Количество;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДвиженияПоРегиструПоказанияСпидометраИБака(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, Отказ, Заголовок)
	
	ВыборкаПоИтогамТоплива = ПодготовитьТаблицуПоказанийБака().Выбрать();	
		
	Пока ВыборкаПоИтогамТоплива.Следующий() Цикл
		
		Показания           = ИНАГРО_Транспорт.ПолучитьПоказанияСпидометраИБака(
								СтруктураШапкиДокумента.Дата,
								СтруктураШапкиДокумента.ТранспортноеСредство,
								СтруктураШапкиДокумента.Ссылка);
		ПоказанияПолучателя = ИНАГРО_Транспорт.ПолучитьПоказанияСпидометраИБака(
								СтруктураШапкиДокумента.Дата,
								СтруктураШапкиДокумента.ТранспортноеСредствоПолучатель,
								СтруктураШапкиДокумента.Ссылка);
						
		Движение = Движения.ИНАГРО_ПоказанияСпидометраИБака.Добавить();
		Движение.ОсновноеСредство 	 = СтруктураШапкиДокумента.ТранспортноеСредство;
		Движение.Период 		 	 = СтруктураШапкиДокумента.Дата;
		Движение.ПоказанияБака		 = Показания.ПоказанияБака - ВыборкаПоИтогамТоплива.КоличествоВОсновномТопливе;     
		Движение.ПоказанияСпидометра = Показания.ПоказанияСпидометра;
		
		Движение = Движения.ИНАГРО_ПоказанияСпидометраИБака.Добавить();
		Движение.ОсновноеСредство 	 = СтруктураШапкиДокумента.ТранспортноеСредствоПолучатель;
		Движение.Период 		 	 = СтруктураШапкиДокумента.Дата;
		Движение.ПоказанияБака		 = ПоказанияПолучателя.ПоказанияБака + ВыборкаПоИтогамТоплива.КоличествоВОсновномТопливеПолучатель;     
		Движение.ПоказанияСпидометра = ПоказанияПолучателя.ПоказанияСпидометра;
		
	КонецЦикла; 
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПодготовитьТаблицуПоказанийБака()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ПередачаТоплива.Ссылка.ТранспортноеСредство,
	               |	СУММА(ПередачаТоплива.КоличествоВОсновномТопливе) КАК КоличествоВОсновномТопливе,
	               |	СУММА(ПередачаТоплива.КоличествоВОсновномТопливеПолучатель) КАК КоличествоВОсновномТопливеПолучатель
	               |ИЗ
	               |	Документ.ИНАГРО_ПередачаТоплива.Товары КАК ПередачаТоплива
	               |ГДЕ
	               |	ПередачаТоплива.Ссылка = &Ссылка
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ПередачаТоплива.Ссылка.ТранспортноеСредство";
	Запрос.УстановитьПараметр("Ссылка", ЭтотОбъект.Ссылка);
	
	Возврат Запрос.Выполнить();

КонецФункции

#КонецОбласти

#КонецЕсли 