#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	// Обработчик подсистемы "ВерсионированиеОбъектов"
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	
	Если Параметры.Ключ.Пустая() Тогда
		
		// создается новый документ
		ЗначенияДляЗаполнения = Новый Структура("ПредыдущийМесяц, Организация, Ответственный, Подразделение", 
		"Объект.МесяцНачисления",
		"Объект.Организация",
		"Объект.Ответственный",
		"Объект.Подразделение");
		
		ЗарплатаКадры.ЗаполнитьПервоначальныеЗначенияВФорме(ЭтаФорма, ЗначенияДляЗаполнения);
		
		УстановитьФункциональныеОпцииФормы();
		
		ЗарплатаКадрыКлиентСервер.ЗаполнитьМесяцПоДате(ЭтаФорма, "Объект.МесяцНачисления", "МесяцНачисленияСтрокой");
		ЗарплатаКадрыКлиентСервер.ЗаполнитьМесяцПоДатеВТабличнойЧасти(Объект.НДФЛ, "НалоговыйПериод", "НалоговыйПериодСтрокой");
		
		
//*		УчетНДФЛФормы.ДополнитьФормуПанельюВычетов(ЭтаФорма);
//*		УчетНДФЛФормы.ЗаполнитьВторичныеДанныеТабличныхЧастей(ЭтаФорма);
		
//*		УчетСтраховыхВзносов.УстановитьВидимостьКолонокТаблицыСтраховыхВзносов(ЭтаФорма, Объект.МесяцНачисления);
		
		УстановитьОтображениеПредупрежденийПриИзмененииКлючевыхРеквизитов();
		Если ИспользуетсяУпрощенныйУчет() Тогда
			ПолучитьСтруктуруКолонокУпрощенногоУчета();
		КонецЕсли;	
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	УстановитьФункциональныеОпцииФормы();
	
	ЗарплатаКадрыКлиентСервер.ЗаполнитьМесяцПоДате(ЭтаФорма, "Объект.МесяцНачисления", "МесяцНачисленияСтрокой");
	ЗарплатаКадрыКлиентСервер.ЗаполнитьМесяцПоДатеВТабличнойЧасти(Объект.НДФЛ, "НалоговыйПериод", "НалоговыйПериодСтрокой");
	
//*	УчетНДФЛФормы.ДополнитьФормуПанельюВычетов(ЭтаФорма);
//*	УчетНДФЛФормы.ЗаполнитьВторичныеДанныеТабличныхЧастей(ЭтаФорма);
	
	УстановитьДоступностьИзмененияНДФЛ();
	УстановитьДоступностьИзмененияВзносов();
	
//*	УчетСтраховыхВзносов.УстановитьВидимостьКолонокТаблицыСтраховыхВзносов(ЭтаФорма, Объект.МесяцНачисления);

	УстановитьОтображениеПредупрежденийПриИзмененииКлючевыхРеквизитов();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ЗарплатаКадрыКлиентСервер.ЗаполнитьМесяцПоДатеВТабличнойЧасти(Объект.НДФЛ, "НалоговыйПериод", "НалоговыйПериодСтрокой");
	
	РассчитатьИтогиПоДвижениям();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	СтандартнаяОбработка = Ложь;
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.Сотрудники") Тогда
		ДобавляемыеСотрудники = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ВыбранноеЗначение);
	Иначе
		ДобавляемыеСотрудники = ВыбранноеЗначение;
	КонецЕсли;

	ДобавитьСотрудников(ДобавляемыеСотрудники);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	НастроитьФормуСпециальныеРежимы(ИспользуетсяУпрощенныйУчет(),Объект.ПредварительныйРасчет);
	
	РассчитатьИтогиПоДокументу();
	
	РассчитатьИтогиПоДвижениям();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ОбработатьИзменениеОрганизацииНаСервере();
		
КонецПроцедуры

&НаКлиенте
Процедура ПодразделениеОрганизацииПриИзменении(Элемент)
	
	 ОчиститьТабличныеЧасти();
	
КонецПроцедуры

&НаКлиенте
Процедура ПредварительныйРасчетПриИзменении(Элемент)
	
	ОчиститьТабличныеЧасти();
	НастроитьФормуСпециальныеРежимы(ИспользуетсяУпрощенныйУчет(),Объект.ПредварительныйРасчет);
	
КонецПроцедуры

&НаКлиенте
Процедура ЭтоПересчетНДФЛПриИзменении(Элемент)
	
	ОчиститьТабличныеЧасти();
	НастроитьФормуСпециальныеРежимы(ИспользуетсяУпрощенныйУчет(),Объект.ПредварительныйРасчет);
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(
		Элемент.ТекстРедактирования,
		ЭтотОбъект,
		"Объект.Комментарий"
	);
	
КонецПроцедуры

&НаКлиенте
Процедура МесяцНачисленияСтрокойПриИзменении(Элемент)
	
	ЗарплатаКадрыКлиент.ВводМесяцаПриИзменении(ЭтаФорма, "Объект.МесяцНачисления", "МесяцНачисленияСтрокой", Модифицированность);
	ОбработатьИзменениеМесяцНачисленияНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура МесяцНачисленияСтрокойНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Оповещение = Новый ОписаниеОповещения("МесяцНачисленияСтрокойНачалоВыбораЗавершение", ЭтотОбъект);
	ЗарплатаКадрыКлиент.ВводМесяцаНачалоВыбора(ЭтаФорма, ЭтаФорма, "Объект.МесяцНачисления", "МесяцНачисленияСтрокой", , Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура МесяцНачисленияСтрокойНачалоВыбораЗавершение(ЗначениеВыбрано, ДополнительныеПараметры) Экспорт 
	
	Если ЗначениеВыбрано Тогда 
		ОбработатьИзменениеМесяцНачисленияНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МесяцНачисленияСтрокойРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	ЗарплатаКадрыКлиент.ВводМесяцаРегулирование(ЭтаФорма, "Объект.МесяцНачисления", "МесяцНачисленияСтрокой", Направление, Модифицированность);
	ПодключитьОбработчикОжидания("ОбработчикОжиданияМесяцНачисленияПриИзменении", 0.3, Истина);
		
КонецПроцедуры

&НаКлиенте
Процедура МесяцНачисленияСтрокойАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	ЗарплатаКадрыКлиент.ВводМесяцаАвтоПодборТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура МесяцНачисленияСтрокойОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	ЗарплатаКадрыКлиент.ВводМесяцаОкончаниеВводаТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицыФормыНачисления

&НаКлиенте
Процедура НачисленияПриИзменении(Элемент)
	
	ДанныеСтроки = Элемент.ТекущиеДанные;
	Если ДанныеСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбработатьИзменениеНачислений(Элементы.Начисления.ТекущаяСтрока);
	РассчитатьИтогиПоДокументу();
	
КонецПроцедуры

&НаКлиенте
Процедура НачисленияПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока Тогда
		Элемент.ТекущиеДанные.Авторасчет = Истина;
	КонецЕсли;	
	Если Копирование Тогда
		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура НачисленияСуммаПриИзменении(Элемент)
	
	ДанныеСтроки = Элементы.Начисления.ТекущиеДанные;
	Если ДанныеСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеСтроки.Авторасчет = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура НачисленияРазмерПриИзменении(Элемент)
	
	ДанныеСтроки = Элементы.Начисления.ТекущиеДанные;
	Если ДанныеСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбработатьИзменениеКлючевогоРеквизитаНачислений(Элементы.Начисления.ТекущаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура НачисленияОтработаноДнейПриИзменении(Элемент)
	
	ДанныеСтроки = Элементы.Начисления.ТекущиеДанные;
	Если ДанныеСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеСтроки.Авторасчет = Ложь;
	
	ДанныеСтроки.ОтработаноЧасов = ДанныеСтроки.ОтработаноДней * 8;
	
	ОбработатьИзменениеКлючевогоРеквизитаНачислений(Элементы.Начисления.ТекущаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура НачисленияОтработаноЧасовПриИзменении(Элемент)
	
	ДанныеСтроки = Элементы.Начисления.ТекущиеДанные;
	Если ДанныеСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеСтроки.Авторасчет = Ложь;
	
	ОбработатьИзменениеКлючевогоРеквизитаНачислений(Элементы.Начисления.ТекущаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура НачисленияНормаДнейЗаМесяцПриИзменении(Элемент)

	ДанныеСтроки = Элементы.Начисления.ТекущиеДанные;
	Если ДанныеСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеСтроки.НормаЧасовЗаМесяц = ДанныеСтроки.НормаДнейЗаМесяц * 8;
	
	ОбработатьИзменениеКлючевогоРеквизитаНачислений(Элементы.Начисления.ТекущаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура НачисленияНормаЧасовЗаМесяцПриИзменении(Элемент)

	ДанныеСтроки = Элементы.Начисления.ТекущиеДанные;
	Если ДанныеСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбработатьИзменениеКлючевогоРеквизитаНачислений(Элементы.Начисления.ТекущаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура НачисленияНачислениеПриИзменении(Элемент)
	
	ДанныеСтроки = Элементы.Начисления.ТекущиеДанные;
	Если ДанныеСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбработатьИзменениеНачисления(Элементы.Начисления.ТекущаяСтрока);
	ОбработатьИзменениеКлючевогоРеквизитаНачислений(Элементы.Начисления.ТекущаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура НачисленияДатаНачалаПриИзменении(Элемент)
	
	ДанныеСтроки = Элементы.Начисления.ТекущиеДанные;
	Если ДанныеСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбработатьИзменениеПериодаНачислений(Элементы.Начисления.ТекущаяСтрока);
	ОбработатьИзменениеКлючевогоРеквизитаНачислений(Элементы.Начисления.ТекущаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура НачисленияДатаОкончанияПриИзменении(Элемент)
	
	ДанныеСтроки = Элементы.Начисления.ТекущиеДанные;
	Если ДанныеСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбработатьИзменениеПериодаНачислений(Элементы.Начисления.ТекущаяСтрока);
	ОбработатьИзменениеКлючевогоРеквизитаНачислений(Элементы.Начисления.ТекущаяСтрока);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицыФормыУдержания

&НаКлиенте
Процедура УдержанияПриИзменении(Элемент)
	
	РассчитатьИтогиПоДокументу();
	
КонецПроцедуры

&НаКлиенте
Процедура УдержанияПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока Тогда
		Элемент.ТекущиеДанные.Авторасчет = Истина;
	КонецЕсли;	
	Если Копирование Тогда
		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УдержанияСуммаПриИзменении(Элемент)
	ДанныеСтроки = Элементы.Удержания.ТекущиеДанные;
	Если ДанныеСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеСтроки.Авторасчет = Ложь;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицыФормыУпрощенныйУчет

&НаКлиенте
Процедура УпрощенныйУчетПриИзменении(Элемент)
	
	Если Элементы.УпрощенныйУчет.ТекущиеДанные <> Неопределено Тогда
		Элементы.УпрощенныйУчет.ТекущиеДанные.ВсегоНачислено = 
			Элементы.УпрощенныйУчет.ТекущиеДанные.Оклад + Элементы.УпрощенныйУчет.ТекущиеДанные.Отпускные + Элементы.УпрощенныйУчет.ТекущиеДанные.БольничныеПредприятие + 
			+ Элементы.УпрощенныйУчет.ТекущиеДанные.БольничныеФСС + Элементы.УпрощенныйУчет.ТекущиеДанные.Индексация + 
			+ Элементы.УпрощенныйУчет.ТекущиеДанные.Доплата1 + Элементы.УпрощенныйУчет.ТекущиеДанные.Доплата2 +
			+ Элементы.УпрощенныйУчет.ТекущиеДанные.Доплата3 + Элементы.УпрощенныйУчет.ТекущиеДанные.Доплата4 +
			+ Элементы.УпрощенныйУчет.ТекущиеДанные.Доплата5 + Элементы.УпрощенныйУчет.ТекущиеДанные.Доплата6;
	КонецЕсли;
		
КонецПроцедуры
	
&НаКлиенте
Процедура УпрощенныйУчетПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)

	Если НоваяСтрока Тогда
		ОбработатьНовуюСтрокуУпрощенныйУчет(Элементы.УпрощенныйУчет.ТекущаяСтрока);
	КонецЕсли;	
		
	
КонецПроцедуры

&НаКлиенте
Процедура УпрощенныйУчетПалновыйОкладПриИзменении(Элемент)
	
	УпрощенныйУчетРасчетОклада();	
	
КонецПроцедуры

&НаКлиенте
Процедура УпрощенныйУчетНормаДнейЗаМесяцПриИзменении(Элемент)
	
	УпрощенныйУчетРасчетОклада();	
	
КонецПроцедуры

&НаКлиенте
Процедура УпрощенныйУчетОтработаноДнейПриИзменении(Элемент)
	
	УпрощенныйУчетРасчетОклада();	
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицыФормыВзносы

&НаКлиенте
Процедура КорректироватьВзносыПриИзменении(Элемент)
	
	ПриИзмененииПризнакаКорректироватьВзносы();
	
КонецПроцедуры

&НаКлиенте
Процедура ВзносыПриИзменении(Элемент)
	
	РассчитатьИтогиПоДокументу();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицыФормыНДФЛ

&НаКлиенте
Процедура КорректироватьНДФЛПриИзменении(Элемент)
	
	ПриИзмененииПризнакаКорректироватьНДФЛ();
	
КонецПроцедуры

&НаКлиенте
Процедура НДФЛПриИзменении(Элемент)
	
	РассчитатьИтогиПоДокументу();
	
КонецПроцедуры

&НаКлиенте
Процедура НДФЛНалоговыйПериодПриИзменении(Элемент)
	
	ЗарплатаКадрыКлиент.ВводМесяцаПриИзменении(Элементы.НДФЛ.ТекущиеДанные, "НалоговыйПериод", "НалоговыйПериодСтрокой", Модифицированность);
	
КонецПроцедуры

&НаКлиенте
Процедура НДФЛНалоговыйПериодНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ЗарплатаКадрыКлиент.ВводМесяцаНачалоВыбора(ЭтаФорма, Элементы.НДФЛ.ТекущиеДанные, "НалоговыйПериод", "НалоговыйПериодСтрокой", Модифицированность);
	
КонецПроцедуры

&НаКлиенте
Процедура НДФЛНалоговыйПериодРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	ЗарплатаКадрыКлиент.ВводМесяцаРегулирование(Элементы.НДФЛ.ТекущиеДанные, "НалоговыйПериод", "НалоговыйПериодСтрокой", Направление, Модифицированность);
	
КонецПроцедуры

&НаКлиенте
Процедура НДФЛНалоговыйПериодАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	ЗарплатаКадрыКлиент.ВводМесяцаАвтоПодборТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура НДФЛНалоговыйПериодОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	ЗарплатаКадрыКлиент.ВводМесяцаОкончаниеВводаТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицыФормыВзносыФОТ

&НаКлиенте
Процедура ВзносыФОТПриИзменении(Элемент)
	
	РассчитатьИтогиПоДокументу();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Заполнить(Команда)
	
	Если Не ЗарплатаКадрыКлиент.ОрганизацияЗаполнена(Объект) Тогда
		Возврат;
	КонецЕсли;
	
	ОчиститьСообщения();
	ЗаполнитьНаСервере();
	
	РассчитатьИтогиПоДокументу();
	
КонецПроцедуры

&НаКлиенте
Процедура Пересчитать(Команда)
	
	Если Не ЗарплатаКадрыКлиент.ОрганизацияЗаполнена(Объект) Тогда
		Возврат;
	КонецЕсли;
	
	ОчиститьСообщения();
	ПересчитатьНаСервере();
	
	РассчитатьИтогиПоДокументу();
	
КонецПроцедуры

&НаКлиенте
Процедура Подбор(Команда)
	
	ПодобратьСотрудников(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура РасчетныйЛисток(Команда)
	
	НачисленияВыделенныеСтроки = Элементы.Начисления.ВыделенныеСтроки;
	Если НачисленияВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ВывестиРасчетныйЛисток(НачисленияВыделенныеСтроки, "Начисления");
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ЗаполнитьНаСервере()
	
	РасчетЗарплаты.ЗаполнитьДокументНачисленияЗарплаты(Объект);
	ПослеЗаполненияНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПересчитатьНаСервере()
	
	Если ИспользуетсяУпрощенныйУчет() Тогда
		СформироватьНачисленияПриУпрощенномРасчете();
	КонецЕсли;	
	
	РасчетЗарплаты.ПересчитатьДокументНачисленияЗарплаты(Объект);
	ПослеЗаполненияНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ДозаполнитьНаСервере()
	
	СотрудникиДокумента = Объект.Начисления.Выгрузить(, "Сотрудник").ВыгрузитьКолонку("Сотрудник");
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ПараметрыПолученияСотрудников = КадровыйУчет.ПараметрыПолученияСотрудниковОрганизацийПоСпискуФизическихЛиц();
	ПараметрыПолученияСотрудников.Организация = Объект.Организация;
	ПараметрыПолученияСотрудников.Подразделение = Объект.Подразделение;
	ПараметрыПолученияСотрудников.НачалоПериода = НачалоМесяца(Объект.МесяцНачисления);
	ПараметрыПолученияСотрудников.ОкончаниеПериода = КонецМесяца(Объект.МесяцНачисления);
	ПараметрыПолученияСотрудников.КадровыеДанные = "ГоловнаяОрганизация,Организация,Подразделение";
	
	КадровыйУчет.СоздатьВТСотрудникиОрганизации(Запрос.МенеджерВременныхТаблиц, Истина, ПараметрыПолученияСотрудников);
	
	Запрос.УстановитьПараметр("СотрудникиДокумента", СотрудникиДокумента);
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	Сотрудники.Ссылка КАК Сотрудник
		|ПОМЕСТИТЬ ВТСотрудникиДокумента
		|ИЗ
		|	Справочник.Сотрудники КАК Сотрудники
		|ГДЕ
		|	Сотрудники.Ссылка В(&СотрудникиДокумента)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СотрудникиДокумента.Сотрудник
		|ИЗ
		|	ВТСотрудникиДокумента КАК СотрудникиДокумента
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСотрудникиОрганизации КАК СотрудникиОрганизации
		|		ПО СотрудникиДокумента.Сотрудник = СотрудникиОрганизации.Сотрудник
		|ГДЕ
		|	СотрудникиОрганизации.Сотрудник ЕСТЬ NULL";
		
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			СтруктураПоиска = Новый Структура;
			СтруктураПоиска.Вставить("Сотрудник", Выборка.Сотрудник);
			
			СтрокиСотрудника = Объект.Начисления.НайтиСтроки(СтруктураПоиска);
			Для каждого УдаляемаяСтрока Из СтрокиСотрудника Цикл
				Объект.Начисления.Удалить(УдаляемаяСтрока);
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли; 
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СотрудникиОрганизации.Сотрудник,
		|	СотрудникиОрганизации.ГоловнаяОрганизация,
		|	СотрудникиОрганизации.Организация,
		|	СотрудникиОрганизации.Подразделение,
		|	СотрудникиОрганизации.ТарифнаяСтавка,
		|	СотрудникиОрганизации.ПроцентСевернойНадбавки
		|ПОМЕСТИТЬ ВТДобавляемыеСотрудники
		|ИЗ
		|	ВТСотрудникиОрганизации КАК СотрудникиОрганизации
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСотрудникиДокумента КАК СотрудникиДокумента
		|		ПО СотрудникиОрганизации.Сотрудник = СотрудникиДокумента.Сотрудник
		|ГДЕ
		|	СотрудникиДокумента.Сотрудник ЕСТЬ NULL 
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДобавляемыеСотрудники.Сотрудник,
		|	ДобавляемыеСотрудники.Организация,
		|	ДобавляемыеСотрудники.Подразделение,
		|	Начисления.Ссылка КАК Начисление,
		|	ДобавляемыеСотрудники.ТарифнаяСтавка КАК Результат,
		|	ИСТИНА КАК ЭтоОкладТариф
		|ПОМЕСТИТЬ ВТДанныеНачисленийПоСотрудникам
		|ИЗ
		|	ВТДобавляемыеСотрудники КАК ДобавляемыеСотрудники
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления КАК Начисления
		|		ПО (Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ПовременнаяОплатаТруда))";
		
	Запрос.Выполнить();
		
	Запрос.Текст = РасчетЗарплатыБазовый.ТекстЗапросаЗаполненияНачислений();
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТСотрудникиОрганизации", "ВТДобавляемыеСотрудники");
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			ЗаполнитьЗначенияСвойств(Объект.Начисления.Добавить(), Выборка);
		КонецЦикла; 
		
	КонецЕсли; 
	
	ПослеЗаполненияНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаполненияНаСервере()
	
	Если ИспользуетсяУпрощенныйУчет() Тогда
		СформироватьПоНачислениямПриУпрощенномРасчете();
	КонецЕсли;	
	ЗарплатаКадрыКлиентСервер.ЗаполнитьМесяцПоДатеВТабличнойЧасти(Объект.НДФЛ, "НалоговыйПериод", "НалоговыйПериодСтрокой");
	УстановитьОтображениеПредупрежденийПриИзмененииКлючевыхРеквизитов();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНДФЛиВзносы()
	
	Если Объект.КорректироватьНДФЛ И Объект.КорректироватьВзносы Тогда
		Возврат;
	КонецЕсли;
	
	РасчетЗарплатыБазовый.ПересчитатьНДФЛиВзносы(Объект);
	ЗарплатаКадрыКлиентСервер.ЗаполнитьМесяцПоДатеВТабличнойЧасти(Объект.НДФЛ, "НалоговыйПериод", "НалоговыйПериодСтрокой");
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьВремяПоСтроке(ДанныеСтроки, Отработано = Ложь, Норма = Ложь, НормаЗаМесяц = Ложь, ТолькоДни = Ложь)
	
	Если НЕ Отработано и НЕ Норма и НЕ НормаЗаМесяц Тогда
		Возврат;
	КонецЕсли;
	
	ГрафикРаботы = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Организация, "ГрафикРаботы");
	УчитыватьПредпраздничные = ГрафикРаботы.УчитыватьПраздники;
	ПроизводственныйКалендарьПоГрафику = ГрафикРаботы.ПроизводственныйКалендарь;
	
	ПроизводственныйКалендарь = КалендарныеГрафики.ПроизводственныйКалендарьУкраины();
	
	Если ЗначениеЗаполнено(ГрафикРаботы) Тогда
		
		Если НормаЗаМесяц Тогда
			НормаДнейЗаМесяц = КалендарныеГрафики.ПолучитьРазностьДатПоКалендарю(ГрафикРаботы, НачалоМесяца(Объект.МесяцНачисления), КонецМесяца(Объект.МесяцНачисления));
		
			ДанныеСтроки.НормаДнейЗаМесяц = НормаДнейЗаМесяц;
			Если НЕ ТолькоДни Тогда
				ДанныеСтроки.НормаЧасовЗаМесяц = НормаДнейЗаМесяц*8;
				ДанныеСтроки.НормаЧасовЗаМесяц = ДанныеСтроки.НормаЧасовЗаМесяц - РасчетЗарплатыБазовый.СократитьПредпраздничныеЧасы(УчитыватьПредпраздничные, ПроизводственныйКалендарьПоГрафику, НачалоМесяца(Объект.МесяцНачисления), КонецМесяца(Объект.МесяцНачисления));
			КонецЕсли;	
		КонецЕсли;
		
		Если Норма ИЛИ Отработано	Тогда
			Дней = КалендарныеГрафики.ПолучитьРазностьДатПоКалендарю(ГрафикРаботы, ДанныеСтроки.ДатаНачала, ДанныеСтроки.ДатаОкончания);
		
			ДанныеСтроки.НормаДней = ?(Норма,Дней, 0);
			Если НЕ ТолькоДни Тогда
				ДанныеСтроки.НормаЧасов = ?(Норма,Дней*8, 0) - ?(Норма,РасчетЗарплатыБазовый.СократитьПредпраздничныеЧасы(УчитыватьПредпраздничные, ПроизводственныйКалендарьПоГрафику, ДанныеСтроки.ДатаНачала, ДанныеСтроки.ДатаОкончания),0);
			КонецЕсли;
			
			ДанныеСтроки.ОтработаноДней = ?(Отработано,Дней, 0);
			Если НЕ ТолькоДни Тогда
				ДанныеСтроки.ОтработаноЧасов = ?(Отработано,Дней*8, 0) - ?(Отработано,РасчетЗарплатыБазовый.СократитьПредпраздничныеЧасы(УчитыватьПредпраздничные, ПроизводственныйКалендарьПоГрафику, ДанныеСтроки.ДатаНачала, ДанныеСтроки.ДатаОкончания),0);
			КонецЕсли;
			
			ДанныеСтроки.КалендарныеДни = Окр((КонецДня(ДанныеСтроки.ДатаОкончания) - НачалоДня(ДанныеСтроки.ДатаНачала)) / 86400);
			
		КонецЕсли;
		
	Иначе
		
		Если НормаЗаМесяц Тогда
			
			ВремяЗаМесяц = РасчетЗарплатыБазовый.РабочихДнейЧасовВПериоде(ПроизводственныйКалендарь, НачалоМесяца(Объект.МесяцНачисления), КонецМесяца(Объект.МесяцНачисления));
		
			ДанныеСтроки.НормаДнейЗаМесяц = ВремяЗаМесяц.Дней;
			Если НЕ ТолькоДни Тогда
				ДанныеСтроки.НормаЧасовЗаМесяц = ВремяЗаМесяц.Часов;
			КонецЕсли;	
		КонецЕсли;
		
		Если Норма ИЛИ Отработано	Тогда
			
			Время = РасчетЗарплатыБазовый.РабочихДнейЧасовВПериоде(ПроизводственныйКалендарь, ДанныеСтроки.ДатаНачала, ДанныеСтроки.ДатаОкончания);
		
			ДанныеСтроки.НормаДней = ?(Норма,Время.Дней, 0);
			Если НЕ ТолькоДни Тогда
				ДанныеСтроки.НормаЧасов = ?(Норма,Время.Часов, 0);
			КонецЕсли;
			
			ДанныеСтроки.ОтработаноДней = ?(Отработано,Время.Дней, 0);
			Если НЕ ТолькоДни Тогда
				ДанныеСтроки.ОтработаноЧасов = ?(Отработано,Время.Часов, 0);
			КонецЕсли;
			
			ДанныеСтроки.КалендарныеДни = Окр((КонецДня(ДанныеСтроки.ДатаОкончания) - НачалоДня(ДанныеСтроки.ДатаНачала)) / 86400);
			
		КонецЕсли;

		
		
	КонецЕсли;	
	
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьИзменениеНачислений(ИдентификаторСтроки)
	
	//*ЗаполнитьНДФЛиВзносы();
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьИзменениеКлючевогоРеквизитаНачислений(ИдентификаторСтроки)
	
	РасчетЗарплатыБазовый.РасчетСтрокиНачисленияЗарплаты(Объект.Начисления.НайтиПоИдентификатору(ИдентификаторСтроки));
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьИзменениеНачисления(ИдентификаторСтроки)
	
	ДанныеСтроки = Объект.Начисления.НайтиПоИдентификатору(ИдентификаторСтроки);
	ДанныеСтроки.ДатаНачала = НачалоМесяца(Объект.МесяцНачисления);
	ДанныеСтроки.ДатаОкончания = КонецМесяца(Объект.МесяцНачисления);
	ЗаполнитьВремяПоСтроке(ДанныеСтроки, ДанныеСтроки.Начисление.ЗачетОтработанногоВремени, ДанныеСтроки.Начисление.ЗачетНормыВремени, ДанныеСтроки.Начисление.ЗачетНормыВремени)

КонецПроцедуры

&НаСервере
Процедура ОбработатьИзменениеПериодаНачислений(ИдентификаторСтроки)
	
	ДанныеСтроки = Объект.Начисления.НайтиПоИдентификатору(ИдентификаторСтроки);
	Если ЗначениеЗаполнено(ДанныеСтроки.ДатаНачала) И ЗначениеЗаполнено(ДанныеСтроки.ДатаОкончания) И (ДанныеСтроки.ДатаНачала <= ДанныеСтроки.ДатаОкончания) Тогда
		ЗаполнитьВремяПоСтроке(ДанныеСтроки, ДанныеСтроки.Начисление.ЗачетОтработанногоВремени, ДанныеСтроки.Начисление.ЗачетНормыВремени);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикОжиданияМесяцНачисленияПриИзменении()

	ОбработатьИзменениеМесяцНачисленияНаСервере();

КонецПроцедуры

&НаСервере
Процедура ОбработатьИзменениеОрганизацииНаСервере()

	УстановитьФункциональныеОпцииФормы();

	ОчиститьТабличныеЧасти();
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьИзменениеМесяцНачисленияНаСервере()

	УстановитьФункциональныеОпцииФормы();
	
	//Если ПолучитьФункциональнуюОпцию("ИспользоватьКадровыйУчет") Тогда
		
		Если ЕстьЗаполненныеТабличныеЧасти() Тогда
			Если ЗначениеЗаполнено(Объект.Организация) Тогда
				ЗаполнитьНаСервере();
			Иначе
				ОчиститьТабличныеЧасти();
			КонецЕсли;
		КонецЕсли; 
	
	//Иначе
	//	
	//	ДозаполнитьНаСервере();
	//	
	//КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьФункциональныеОпцииФормы()

	ПараметрыФО = Новый Структура;
	ПараметрыФО.Вставить("Организация", Объект.Организация);
	ПараметрыФО.Вставить("Период", НачалоДня(Объект.МесяцНачисления));
	УстановитьПараметрыФункциональныхОпцийФормы(ПараметрыФО);

КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьИзмененияНДФЛ()
	
	Элементы.ГруппаНДФЛ.ТолькоПросмотр = Не Объект.КорректироватьНДФЛ;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьИзмененияВзносов()
	
	Элементы.Взносы.ТолькоПросмотр = Не Объект.КорректироватьВзносы;
	Элементы.ВзносыФОТ.ТолькоПросмотр = Не Объект.КорректироватьВзносы;
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииПризнакаКорректироватьНДФЛ()
	
	УстановитьДоступностьИзмененияНДФЛ();
	
	Если Не Объект.КорректироватьНДФЛ Тогда
		// Восстанавливаем по состоянию учета
		ЗаполнитьНДФЛиВзносы();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииПризнакаКорректироватьВзносы()
	
	УстановитьДоступностьИзмененияВзносов();
	
	Если Не Объект.КорректироватьВзносы Тогда
		// Восстанавливаем по состоянию учетам
		ЗаполнитьНДФЛиВзносы();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтображениеПредупрежденийПриИзмененииКлючевыхРеквизитов()
	
	Если ЕстьЗаполненныеТабличныеЧасти() Тогда
		ОтображениеПредупреждения = ОтображениеПредупрежденияПриРедактировании.Отображать;
	Иначе
		ОтображениеПредупреждения = ОтображениеПредупрежденияПриРедактировании.НеОтображать;
	КонецЕсли;
	
	Элементы.Организация.ОтображениеПредупрежденияПриРедактировании = ОтображениеПредупреждения;
	Элементы.ПодразделениеОрганизации.ОтображениеПредупрежденияПриРедактировании = ОтображениеПредупреждения;
	Элементы.МесяцНачисленияСтрокой.ОтображениеПредупрежденияПриРедактировании = ОтображениеПредупреждения;
	Элементы.ПредварительныйРасчет.ОтображениеПредупрежденияПриРедактировании = ОтображениеПредупреждения;
	Элементы.ЭтоПересчетНДФЛ.ОтображениеПредупрежденияПриРедактировании = ОтображениеПредупреждения;
	
КонецПроцедуры

&НаСервере
Функция ЕстьЗаполненныеТабличныеЧасти()
	
	ДанныеВТЧЕсть = Ложь;
	
	СписокТабличныхЧастей = СписокТабличныхЧастейДокумента();
	
	Для каждого ИмяТабличнойЧасти Из СписокТабличныхЧастей Цикл
		Если Объект[ИмяТабличнойЧасти].Количество() > 0 Тогда
			ДанныеВТЧЕсть = Истина;
			Прервать;
		КонецЕсли; 
	КонецЦикла;
	
	Возврат ДанныеВТЧЕсть;
	
КонецФункции

&НаСервере
Функция СписокТабличныхЧастейДокумента()
	
	СписокТабличныхЧастей = Новый Массив;
	
	СписокТабличныхЧастей.Добавить("Начисления");
	СписокТабличныхЧастей.Добавить("УпрощенныйУчет");
	СписокТабличныхЧастей.Добавить("Удержания");
	СписокТабличныхЧастей.Добавить("НДФЛ");
	СписокТабличныхЧастей.Добавить("Взносы");
	СписокТабличныхЧастей.Добавить("ВзносыФОТ");
	
	Возврат СписокТабличныхЧастей;
	
КонецФункции

&НаСервере
Процедура ОчиститьТабличныеЧасти()
	
	СписокТабличныхЧастей = СписокТабличныхЧастейДокумента();
	
	Для каждого ИмяТабличнойЧасти Из СписокТабличныхЧастей Цикл
		Объект[ИмяТабличнойЧасти].Очистить();
	КонецЦикла;
	
	УстановитьОтображениеПредупрежденийПриИзмененииКлючевыхРеквизитов();
	
	РассчитатьИтогиПоДокументу();
	
КонецПроцедуры

&НаСервере
Функция АдресСпискаПодобранныхСотрудников()
	
	Возврат ПоместитьВоВременноеХранилище(Объект.Начисления.Выгрузить(,"Сотрудник").ВыгрузитьКолонку("Сотрудник"), УникальныйИдентификатор);
	
КонецФункции

&НаКлиенте
Процедура ПодобратьСотрудников(МножественныйВыбор)
	
	КадровыйУчетКлиент.ВыбратьСотрудниковРаботающихВПериоде(
		ЭтаФорма, Объект.Организация, Объект.Подразделение,
		Объект.МесяцНачисления, КонецМесяца(Объект.МесяцНачисления), МножественныйВыбор,
		АдресСпискаПодобранныхСотрудников());
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьФормуСпециальныеРежимы(ИспользуетсяУпрощенныйУчет = Ложь, ПредварительныйРасчет = Ложь);
	
	Если ИспользуетсяУпрощенныйУчет Тогда
		УстановитьСтруктуруКолонокУпрощенногоУчета();
		ЭтаФорма.Элементы.НачисленияСтраница.Видимость = Ложь;
		ЭтаФорма.Элементы.УдержанияСтраница.Видимость = Ложь;
		ЭтаФорма.Элементы.ВзносыСтраница.Видимость = НЕ Объект.ПредварительныйРасчет;
		ЭтаФорма.Элементы.ВзносыФОТСтраница.Видимость = НЕ Объект.ПредварительныйРасчет;
		ЭтаФорма.Элементы.НДФЛСтраница.Видимость = НЕ Объект.ПредварительныйРасчет;
		ЭтаФорма.Элементы.ЭтоПересчетНДФЛ.Видимость = Ложь;
		ЭтаФорма.Элементы.КорректироватьВзносы.Видимость = Ложь;
		ЭтаФорма.Элементы.КорректироватьВзносы1.Видимость = Ложь;
		ЭтаФорма.Элементы.КорректироватьНДФЛ.Видимость = Ложь;
	Иначе
		ЭтаФорма.Элементы.УдержанияСтраница.Видимость = НЕ Объект.ПредварительныйРасчет;
		ЭтаФорма.Элементы.ВзносыСтраница.Видимость = НЕ Объект.ПредварительныйРасчет;
		ЭтаФорма.Элементы.ВзносыФОТСтраница.Видимость = НЕ Объект.ПредварительныйРасчет;
		ЭтаФорма.Элементы.НДФЛСтраница.Видимость = НЕ Объект.ПредварительныйРасчет;
		ЭтаФорма.Элементы.ЭтоПересчетНДФЛ.Видимость = НЕ Объект.ПредварительныйРасчет;
		ЭтаФорма.Элементы.КорректироватьВзносы.Видимость = Истина;
		ЭтаФорма.Элементы.КорректироватьВзносы1.Видимость = Истина;
		ЭтаФорма.Элементы.КорректироватьНДФЛ.Видимость = Истина;
	КонецЕсли;
	
	Если Объект.УДАЛИТЬОтражениеВУчете.Количество() > 0 Тогда
		ЭтаФорма.Элементы.ОтражениеВУчетеСтраница.Видимость = Истина;
	КонецЕсли;	
	
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьСтруктуруКолонокУпрощенногоУчета()
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	НастройкаКолонокУпрощенногоУчета.Колонка,
	               |	НастройкаКолонокУпрощенногоУчета.Начисление,
	               |	НастройкаКолонокУпрощенногоУчета.Начисление.Наименование КАК Наименование
	               |ИЗ
	               |	РегистрСведений.НастройкаКолонокУпрощенногоУчета КАК НастройкаКолонокУпрощенногоУчета
	               |ГДЕ
	               |	НастройкаКолонокУпрощенногоУчета.Колонка <> ЗНАЧЕНИЕ(Перечисление.КолонкиУпрощенногоРасчета.ПустаяСсылка)
	               |	И НастройкаКолонокУпрощенногоУчета.Начисление <> ЗНАЧЕНИЕ(ПланвидовРасчета.Начисления.ПустаяСсылка)";
				   
	Объект.СтруктураКолонокУпрощенногоУчета.Загрузить(Запрос.Выполнить().Выгрузить());			   
				   
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтруктуруКолонокУпрощенногоУчета()
	
	ЭтаФорма.Элементы.УпрощенныйУчетГруппаОтпускные.Видимость = Ложь;
	ЭтаФорма.Элементы.УпрощенныйУчетГруппаБольничные.Видимость = Ложь;
	ЭтаФорма.Элементы.УпрощенныйУчетГруппаБольничныеФСС.Видимость = Ложь;
	ЭтаФорма.Элементы.УпрощенныйУчетДоплата1.Видимость = Ложь;
	ЭтаФорма.Элементы.УпрощенныйУчетДоплата2.Видимость = Ложь;
	ЭтаФорма.Элементы.УпрощенныйУчетДоплата3.Видимость = Ложь;
	ЭтаФорма.Элементы.УпрощенныйУчетДоплата4.Видимость = Ложь;
	ЭтаФорма.Элементы.УпрощенныйУчетДоплата5.Видимость = Ложь;
	ЭтаФорма.Элементы.УпрощенныйУчетДоплата6.Видимость = Ложь;
	
	Для Каждого СтрокаСтруктуры из Объект.СтруктураКолонокУпрощенногоУчета Цикл
		Если СтрокаСтруктуры.Колонка = ПредопределенноеЗначение("Перечисление.КолонкиУпрощенногоРасчета.Оклад") Тогда
			//Тут все стандартно
		ИначеЕсли СтрокаСтруктуры.Колонка = ПредопределенноеЗначение("Перечисление.КолонкиУпрощенногоРасчета.Индексация") Тогда	
			//Тут все стандартно
		ИначеЕсли СтрокаСтруктуры.Колонка = ПредопределенноеЗначение("Перечисление.КолонкиУпрощенногоРасчета.Отпускные") Тогда
			ЭтаФорма.Элементы.УпрощенныйУчетГруппаОтпускные.Видимость = Истина;
		ИначеЕсли СтрокаСтруктуры.Колонка = ПредопределенноеЗначение("Перечисление.КолонкиУпрощенногоРасчета.БольничныеПредприятие") Тогда
			ЭтаФорма.Элементы.УпрощенныйУчетГруппаБольничные.Видимость = Истина;
		ИначеЕсли СтрокаСтруктуры.Колонка = ПредопределенноеЗначение("Перечисление.КолонкиУпрощенногоРасчета.БольничныеФСС") Тогда
			ЭтаФорма.Элементы.УпрощенныйУчетГруппаБольничныеФСС.Видимость = Истина;	
		Иначе
			ИмяКолонки = ПолучитьИмяЗначенияПеречисления(СтрокаСтруктуры.Колонка);
			ЭтаФорма.Элементы["УпрощенныйУчет"+ИмяКолонки].Видимость = Истина;
			ЭтаФорма.Элементы["УпрощенныйУчет"+ИмяКолонки].Заголовок = СтрокаСтруктуры.Наименование;	
		КонецЕсли;	
		
	КонецЦикла;	
	
КонецПроцедуры

&НаСервере
Функция ИспользуетсяУпрощенныйУчет() Экспорт

	Возврат ПолучитьФункциональнуюОпцию("ИспользоватьУпрощенныйУчетНачислений");

КонецФункции

&НаСервере
Функция ПолучитьИмяЗначенияПеречисления(Ссылка) Экспорт

	ИмяПеречисления = Ссылка.Метаданные().Имя;
	Индекс = Перечисления[ИмяПеречисления].Индекс(Ссылка);

	Возврат Метаданные.Перечисления[ИмяПеречисления].ЗначенияПеречисления[Индекс].Имя;

КонецФункции 

&НаСервере
Процедура СформироватьНачисленияПриУпрощенномРасчете()
	
	Если Объект.СтруктураКолонокУпрощенногоУчета.Количество() = 0 Тогда
		ПолучитьСтруктуруКолонокУпрощенногоУчета();
	КонецЕсли;	
	
	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц();
	Запрос.УстановитьПараметр("СтруктураКолонок",Объект.СтруктураКолонокУпрощенногоУчета.Выгрузить());
	Запрос.УстановитьПараметр("Начисления",Объект.УпрощенныйУчет.Выгрузить());
	Запрос.УстановитьПараметр("МесяцНачисления",Объект.МесяцНачисления);
	Запрос.УстановитьПараметр("МесяцСледующий",ДобавитьМесяц(Объект.МесяцНачисления,1));
	
	ТекстРазмер = 
		"ВЫБОР
		|";
	ТекстРезультат = 
		"ВЫБОР
		|";
	ТекстКалендарныеДни = 
		"ВЫБОР
		|";
	ТекстОтработаноДней = 
		"ВЫБОР
		|";	
	ТекстОтработаноЧасов = 
		"ВЫБОР
		|";
	ТекстНормаДней = 
		"ВЫБОР
		|";
	ТекстНормаЧасов = 
		"ВЫБОР
		|";	
		
	Для Каждого	СтрокаСтруктуры из Объект.СтруктураКолонокУпрощенногоУчета Цикл
		
		Если СтрокаСтруктуры.Колонка = ПредопределенноеЗначение("Перечисление.КолонкиУпрощенногоРасчета.Оклад") Тогда
			ТекстРазмер = ТекстРазмер + 
			"     КОГДА СтруктураКолонок.Колонка = ЗНАЧЕНИЕ(Перечисление.КолонкиУпрощенногоРасчета.Оклад) ТОГДА Начисления.ПлановыйОклад
			|";
			ТекстРезультат = ТекстРезультат + 
			"     КОГДА СтруктураКолонок.Колонка = ЗНАЧЕНИЕ(Перечисление.КолонкиУпрощенногоРасчета.Оклад) ТОГДА Начисления.Оклад
			|";
			ТекстКалендарныеДни = ТекстКалендарныеДни + 
			"     КОГДА СтруктураКолонок.Колонка = ЗНАЧЕНИЕ(Перечисление.КолонкиУпрощенногоРасчета.Оклад) ТОГДА РАЗНОСТЬДАТ(&МесяцНачисления,&МесяцСледующий,ДЕНЬ)
			|";
			ТекстОтработаноДней = ТекстОтработаноДней + 
			"     КОГДА СтруктураКолонок.Колонка = ЗНАЧЕНИЕ(Перечисление.КолонкиУпрощенногоРасчета.Оклад) ТОГДА Начисления.ОтработаноДней
			|";
			ТекстОтработаноЧасов = ТекстОтработаноЧасов + 
			"     КОГДА СтруктураКолонок.Колонка = ЗНАЧЕНИЕ(Перечисление.КолонкиУпрощенногоРасчета.Оклад) ТОГДА Начисления.ОтработаноДней*8
			|";
			ТекстНормаДней = ТекстНормаДней + 
			"     КОГДА СтруктураКолонок.Колонка = ЗНАЧЕНИЕ(Перечисление.КолонкиУпрощенногоРасчета.Оклад) ТОГДА Начисления.ОтработаноДней
			|";
			ТекстНормаЧасов = ТекстНормаЧасов + 
			"     КОГДА СтруктураКолонок.Колонка = ЗНАЧЕНИЕ(Перечисление.КолонкиУпрощенногоРасчета.Оклад) ТОГДА Начисления.ОтработаноДней*8
			|";
		ИначеЕсли СтрокаСтруктуры.Колонка = ПредопределенноеЗначение("Перечисление.КолонкиУпрощенногоРасчета.Индексация") Тогда	
			ТекстРазмер = ТекстРазмер + 
			"     КОГДА СтруктураКолонок.Колонка = ЗНАЧЕНИЕ(Перечисление.КолонкиУпрощенногоРасчета.Индексация) ТОГДА 1
			|";
			ТекстРезультат = ТекстРезультат + 
			"     КОГДА СтруктураКолонок.Колонка = ЗНАЧЕНИЕ(Перечисление.КолонкиУпрощенногоРасчета.Индексация) ТОГДА Начисления.Индексация
			|";
		ИначеЕсли СтрокаСтруктуры.Колонка = ПредопределенноеЗначение("Перечисление.КолонкиУпрощенногоРасчета.Отпускные") Тогда
			ТекстРазмер = ТекстРазмер + 
			"     КОГДА СтруктураКолонок.Колонка = ЗНАЧЕНИЕ(Перечисление.КолонкиУпрощенногоРасчета.Отпускные) ТОГДА Начисления.Отпускные
			|";
			ТекстРезультат = ТекстРезультат + 
			"     КОГДА СтруктураКолонок.Колонка = ЗНАЧЕНИЕ(Перечисление.КолонкиУпрощенногоРасчета.Отпускные) ТОГДА Начисления.Отпускные
			|";
			ТекстКалендарныеДни = ТекстКалендарныеДни + 
			"     КОГДА СтруктураКолонок.Колонка = ЗНАЧЕНИЕ(Перечисление.КолонкиУпрощенногоРасчета.Отпускные) ТОГДА Начисления.ОтпускныеКалендарныхДней
			|";
		ИначеЕсли СтрокаСтруктуры.Колонка = ПредопределенноеЗначение("Перечисление.КолонкиУпрощенногоРасчета.БольничныеПредприятие") Тогда
			ТекстРазмер = ТекстРазмер + 
			"     КОГДА СтруктураКолонок.Колонка = ЗНАЧЕНИЕ(Перечисление.КолонкиУпрощенногоРасчета.БольничныеПредприятие) ТОГДА Начисления.БольничныеПредприятие
			|";
			ТекстРезультат = ТекстРезультат + 
			"     КОГДА СтруктураКолонок.Колонка = ЗНАЧЕНИЕ(Перечисление.КолонкиУпрощенногоРасчета.БольничныеПредприятие) ТОГДА Начисления.БольничныеПредприятие
			|";
			ТекстКалендарныеДни = ТекстКалендарныеДни + 
			"     КОГДА СтруктураКолонок.Колонка = ЗНАЧЕНИЕ(Перечисление.КолонкиУпрощенногоРасчета.БольничныеПредприятие) ТОГДА Начисления.БольничныеПредприятиеКалендарныхДней
			|";
		ИначеЕсли СтрокаСтруктуры.Колонка = ПредопределенноеЗначение("Перечисление.КолонкиУпрощенногоРасчета.БольничныеФСС") Тогда
			ТекстРазмер = ТекстРазмер + 
			"     КОГДА СтруктураКолонок.Колонка = ЗНАЧЕНИЕ(Перечисление.КолонкиУпрощенногоРасчета.БольничныеФСС) ТОГДА Начисления.БольничныеФСС
			|";
			ТекстРезультат = ТекстРезультат + 
			"     КОГДА СтруктураКолонок.Колонка = ЗНАЧЕНИЕ(Перечисление.КолонкиУпрощенногоРасчета.БольничныеФСС) ТОГДА Начисления.БольничныеФСС
			|";
			ТекстКалендарныеДни = ТекстКалендарныеДни + 
			"     КОГДА СтруктураКолонок.Колонка = ЗНАЧЕНИЕ(Перечисление.КолонкиУпрощенногоРасчета.БольничныеФСС) ТОГДА Начисления.БольничныеФССКалендарныхДней
			|";
		Иначе
			ИмяКолонки = ПолучитьИмяЗначенияПеречисления(СтрокаСтруктуры.Колонка);
			ТекстРазмер = ТекстРазмер + 
			"     КОГДА СтруктураКолонок.Колонка = ЗНАЧЕНИЕ(Перечисление.КолонкиУпрощенногоРасчета."+ИмяКолонки+") ТОГДА Начисления."+ИмяКолонки+"
			|";
			ТекстРезультат = ТекстРезультат + 
			"     КОГДА СтруктураКолонок.Колонка = ЗНАЧЕНИЕ(Перечисление.КолонкиУпрощенногоРасчета."+ИмяКолонки+") ТОГДА Начисления."+ИмяКолонки+"
			|";
		КонецЕсли;
		
	КонецЦикла;	
	
	ТекстРазмер = ТекстРазмер + 
		"     ИНАЧЕ 0
		|    КОНЕЦ";
		
	ТекстРезультат = ТекстРезультат + 
		"     ИНАЧЕ 0
		|    КОНЕЦ";
		
	ТекстКалендарныеДни = ТекстКалендарныеДни + 
		"     ИНАЧЕ 0
		|    КОНЕЦ";	
		
	ТекстОтработаноДней = ТекстОтработаноДней + 
		"     ИНАЧЕ 0
		|    КОНЕЦ";
		
	ТекстОтработаноЧасов = ТекстОтработаноЧасов + 
		"     ИНАЧЕ 0
		|    КОНЕЦ";
		
	ТекстНормаДней = ТекстНормаДней + 
		"     ИНАЧЕ 0
		|    КОНЕЦ";
		
	ТекстНормаЧасов = ТекстНормаЧасов + 
		"     ИНАЧЕ 0
		|    КОНЕЦ";	
	
	
	
	Запрос.Текст = 
	   "ВЫБРАТЬ
	   |	СтруктураКолонок.Колонка,
	   |	СтруктураКолонок.Начисление
	   |ПОМЕСТИТЬ ВТСтруктураКолонок
	   |ИЗ
	   |	&СтруктураКолонок КАК СтруктураКолонок
	   |;
	   |
	   |ВЫБРАТЬ
	   |	Начисления.Сотрудник,
	   |	Начисления.Подразделение,
	   |	Начисления.Должность,
	   |	Начисления.НормаДнейЗаМесяц,
	   |	Начисления.Оклад,
	   |	Начисления.ПлановыйОклад,
	   |	Начисления.Отпускные,
	   |	Начисления.БольничныеПредприятие,
	   |	Начисления.БольничныеФСС,
	   |	Начисления.Индексация,
	   |	Начисления.ОтработаноДней,
	   |	Начисления.ОтпускныеКалендарныхДней,
	   |	Начисления.БольничныеПредприятиеКалендарныхДней,
	   |	Начисления.БольничныеФССКалендарныхДней,
	   |	Начисления.Доплата1,
	   |	Начисления.Доплата2,
	   |	Начисления.Доплата3,
	   |	Начисления.Доплата4,
	   |	Начисления.Доплата5,
	   |	Начисления.Доплата6
	   |ПОМЕСТИТЬ ВТНачисления
	   |ИЗ
	   |	&Начисления КАК Начисления
	   |";
	   
	 Запрос.Выполнить();  
	   
	 Запрос.Текст = 
	   "ВЫБРАТЬ
	   |	Начисления.Сотрудник,
	   |	Начисления.Подразделение,
	   |	Начисления.Должность,
	   |	СтруктураКолонок.Начисление,
	   |	НАЧАЛОПЕРИОДА(&МесяцНачисления, МЕСЯЦ) КАК ДатаНачала,
	   |	КОНЕЦПЕРИОДА(&МесяцНачисления, МЕСЯЦ) КАК ДатаОкончания,
	   |	Начисления.НормаДнейЗаМесяц,
	   |	Начисления.НормаДнейЗаМесяц*8 КАК НормаЧасовЗаМесяц,
	   |    "+ТекстРазмер+" КАК Размер,
	   |    "+ТекстРезультат+" КАК Результат,
	   |    "+ТекстКалендарныеДни+" КАК КалендарныеДни,
	   |    "+ТекстОтработаноДней+" КАК ОтработаноДней,
	   |    "+ТекстОтработаноЧасов+" КАК ОтработаноЧасов,
	   |    "+ТекстНормаДней+" КАК НормаДней,
	   |    "+ТекстНормаЧасов+" КАК НормаЧасов
	   |ПОМЕСТИТЬ ВТПолныеНачисления
	   |ИЗ
	   |	ВТНачисления КАК Начисления
	   |	ЛЕВОЕ СОЕДИНЕНИЕ
	   |	ВТСтруктураКолонок КАК СтруктураКолонок
	   |    ПО ИСТИНА
	   |;
	   |
	   |ВЫБРАТЬ
	   |	Истина КАК Авторасчет,
	   |	Начисления.Сотрудник,
	   |	Начисления.Подразделение,
	   |	Начисления.Должность,
	   |	Начисления.Начисление,
	   |	Начисления.ДатаНачала,
	   |	Начисления.ДатаОкончания,
	   |	Начисления.НормаДнейЗаМесяц,
	   |	Начисления.НормаЧасовЗаМесяц,
	   |    Начисления.Размер,
	   |    Начисления.Результат,
	   |    Начисления.КалендарныеДни,
	   |    Начисления.ОтработаноДней,
	   |    Начисления.ОтработаноЧасов,
	   |    Начисления.НормаДней,
	   |    Начисления.НормаЧасов
	   |ИЗ
	   |	ВТПолныеНачисления КАК Начисления
	   |";
	   
	   
	Объект.Начисления.Загрузить(Запрос.Выполнить().Выгрузить());			   
				   
	
КонецПроцедуры

&НаСервере
Процедура СформироватьПоНачислениямПриУпрощенномРасчете()
	
	Если Объект.СтруктураКолонокУпрощенногоУчета.Количество() = 0 Тогда
		ПолучитьСтруктуруКолонокУпрощенногоУчета();
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц();
	Запрос.УстановитьПараметр("СтруктураКолонок",Объект.СтруктураКолонокУпрощенногоУчета.Выгрузить());
	Запрос.УстановитьПараметр("Начисления",Объект.Начисления.Выгрузить());
	
	Запрос.Текст = 
	   "ВЫБРАТЬ
	   |	СтруктураКолонок.Колонка,
	   |	СтруктураКолонок.Начисление
	   |ПОМЕСТИТЬ ВТСтруктураКолонок
	   |ИЗ
	   |	&СтруктураКолонок КАК СтруктураКолонок
	   |;
	   |
	   |ВЫБРАТЬ
	   |	Начисления.Сотрудник,
	   |	Начисления.Подразделение,
	   |	Начисления.Должность,
	   |	Начисления.Начисление,
	   |	Начисления.НормаДнейЗаМесяц,
	   |	Начисления.Размер,
	   |	Начисления.Результат,
	   |	Начисления.ОтработаноДней,
	   |	Начисления.КалендарныеДни
	   |ПОМЕСТИТЬ ВТНачисления
	   |ИЗ
	   |	&Начисления КАК Начисления
	   |";
	Запрос.Выполнить();
	
	Запрос.Текст = 
	   "ВЫБРАТЬ
	   |	Начисления.Сотрудник,
	   |	Начисления.Подразделение,
	   |	Начисления.Должность,
	   |	Подразделения.РеквизитДопУпорядочиванияИерархического КАК ДопПорядокПодразделение,
	   |	Сотрудники.Наименование КАК СотрудникНаименование,
	   |	Начисления.НормаДнейЗаМесяц,
	   |    ВЫБОР
	   |      КОГДА СтруктураКолонок.Колонка = ЗНАЧЕНИЕ(Перечисление.КолонкиУпрощенногоРасчета.Оклад)
	   |      ТОГДА Начисления.Размер
	   |      ИНАЧЕ 0
	   |    КОНЕЦ КАК ПлановыйОклад,
	   |    ВЫБОР
	   |      КОГДА СтруктураКолонок.Колонка = ЗНАЧЕНИЕ(Перечисление.КолонкиУпрощенногоРасчета.Оклад)
	   |      ТОГДА Начисления.ОтработаноДней
	   |      ИНАЧЕ 0
	   |    КОНЕЦ КАК ОтработаноДней,
	   |    ВЫБОР
	   |      КОГДА СтруктураКолонок.Колонка = ЗНАЧЕНИЕ(Перечисление.КолонкиУпрощенногоРасчета.Отпускные)
	   |      ТОГДА Начисления.КалендарныеДни
	   |      ИНАЧЕ 0
	   |    КОНЕЦ КАК ОтпускныеКалендарныхДней,
	   |    ВЫБОР
	   |      КОГДА СтруктураКолонок.Колонка = ЗНАЧЕНИЕ(Перечисление.КолонкиУпрощенногоРасчета.БольничныеПредприятие)
	   |      ТОГДА Начисления.КалендарныеДни
	   |      ИНАЧЕ 0
	   |    КОНЕЦ КАК БольничныеПредприятиеКалендарныхДней,
	   |    ВЫБОР
	   |      КОГДА СтруктураКолонок.Колонка = ЗНАЧЕНИЕ(Перечисление.КолонкиУпрощенногоРасчета.БольничныеФСС)
	   |      ТОГДА Начисления.КалендарныеДни
	   |      ИНАЧЕ 0
	   |    КОНЕЦ КАК БольничныеФССКалендарныхДней,
	   |    ВЫБОР
	   |      КОГДА СтруктураКолонок.Колонка = ЗНАЧЕНИЕ(Перечисление.КолонкиУпрощенногоРасчета.Оклад)
	   |      ТОГДА Начисления.Результат
	   |      ИНАЧЕ 0
	   |    КОНЕЦ КАК Оклад,
	   |    ВЫБОР
	   |      КОГДА СтруктураКолонок.Колонка = ЗНАЧЕНИЕ(Перечисление.КолонкиУпрощенногоРасчета.Отпускные)
	   |      ТОГДА Начисления.Результат
	   |      ИНАЧЕ 0
	   |    КОНЕЦ КАК Отпускные,
	   |    ВЫБОР
	   |      КОГДА СтруктураКолонок.Колонка = ЗНАЧЕНИЕ(Перечисление.КолонкиУпрощенногоРасчета.БольничныеПредприятие)
	   |      ТОГДА Начисления.Результат
	   |      ИНАЧЕ 0
	   |    КОНЕЦ КАК БольничныеПредприятие,
	   |    ВЫБОР
	   |      КОГДА СтруктураКолонок.Колонка = ЗНАЧЕНИЕ(Перечисление.КолонкиУпрощенногоРасчета.БольничныеФСС)
	   |      ТОГДА Начисления.Результат
	   |      ИНАЧЕ 0
	   |    КОНЕЦ КАК БольничныеФСС,
	   |    ВЫБОР
	   |      КОГДА СтруктураКолонок.Колонка = ЗНАЧЕНИЕ(Перечисление.КолонкиУпрощенногоРасчета.Индексация)
	   |      ТОГДА Начисления.Результат
	   |      ИНАЧЕ 0
	   |    КОНЕЦ КАК Индексация,
	   |    ВЫБОР
	   |      КОГДА СтруктураКолонок.Колонка = ЗНАЧЕНИЕ(Перечисление.КолонкиУпрощенногоРасчета.Доплата1)
	   |      ТОГДА Начисления.Результат
	   |      ИНАЧЕ 0
	   |    КОНЕЦ КАК Доплата1,
	   |    ВЫБОР
	   |      КОГДА СтруктураКолонок.Колонка = ЗНАЧЕНИЕ(Перечисление.КолонкиУпрощенногоРасчета.Доплата2)
	   |      ТОГДА Начисления.Результат
	   |      ИНАЧЕ 0
	   |    КОНЕЦ КАК Доплата2,
	   |    ВЫБОР
	   |      КОГДА СтруктураКолонок.Колонка = ЗНАЧЕНИЕ(Перечисление.КолонкиУпрощенногоРасчета.Доплата3)
	   |      ТОГДА Начисления.Результат
	   |      ИНАЧЕ 0
	   |    КОНЕЦ КАК Доплата3,
	   |    ВЫБОР
	   |      КОГДА СтруктураКолонок.Колонка = ЗНАЧЕНИЕ(Перечисление.КолонкиУпрощенногоРасчета.Доплата4)
	   |      ТОГДА Начисления.Результат
	   |      ИНАЧЕ 0
	   |    КОНЕЦ КАК Доплата4,
	   |    ВЫБОР
	   |      КОГДА СтруктураКолонок.Колонка = ЗНАЧЕНИЕ(Перечисление.КолонкиУпрощенногоРасчета.Доплата5)
	   |      ТОГДА Начисления.Результат
	   |      ИНАЧЕ 0
	   |    КОНЕЦ КАК Доплата5,
	   |    ВЫБОР
	   |      КОГДА СтруктураКолонок.Колонка = ЗНАЧЕНИЕ(Перечисление.КолонкиУпрощенногоРасчета.Доплата6)
	   |      ТОГДА Начисления.Результат
	   |      ИНАЧЕ 0
	   |    КОНЕЦ КАК Доплата6
	   |ПОМЕСТИТЬ ВТПолныеНачисления
	   |ИЗ
	   |	ВТНачисления КАК Начисления
	   |	ЛЕВОЕ СОЕДИНЕНИЕ
	   |	ВТСтруктураКолонок КАК СтруктураКолонок
	   |    ПО Начисления.Начисление = СтруктураКолонок.Начисление
	   |	ЛЕВОЕ СОЕДИНЕНИЕ
	   |	Справочник.Сотрудники КАК Сотрудники
	   |    ПО Начисления.Сотрудник = Сотрудники.Ссылка
	   |	ЛЕВОЕ СОЕДИНЕНИЕ
	   |	Справочник.ПодразделенияОрганизаций КАК Подразделения
	   |    ПО Начисления.Подразделение = Подразделения.Ссылка
	   |;
	   |
	   |ВЫБРАТЬ
	   |	Начисления.Сотрудник,
	   |	Начисления.Подразделение,
	   |	Начисления.Должность,
	   |	МАКСИМУМ(Начисления.НормаДнейЗаМесяц) КАК НормаДнейЗаМесяц,
	   |	МАКСИМУМ(Начисления.ОтработаноДней) КАК ОтработаноДней,
	   |	МАКСИМУМ(Начисления.ПлановыйОклад) КАК ПлановыйОклад,
	   |	СУММА(Начисления.Оклад) КАК Оклад,
	   |	СУММА(Начисления.Отпускные) КАК Отпускные,
	   |	СУММА(Начисления.ОтпускныеКалендарныхДней) КАК ОтпускныеКалендарныхДней,
	   |	СУММА(Начисления.БольничныеПредприятиеКалендарныхДней) КАК БольничныеПредприятиеКалендарныхДней,
	   |	СУММА(Начисления.БольничныеФССКалендарныхДней) КАК БольничныеФССКалендарныхДней,
	   |	СУММА(Начисления.БольничныеПредприятие) КАК БольничныеПредприятие,
	   |	СУММА(Начисления.БольничныеФСС) КАК БольничныеФСС,
	   |	СУММА(Начисления.Индексация) КАК Индексация,
	   |	СУММА(Начисления.Доплата1) КАК Доплата1,
	   |	СУММА(Начисления.Доплата2) КАК Доплата2,
	   |	СУММА(Начисления.Доплата3) КАК Доплата3,
	   |	СУММА(Начисления.Доплата4) КАК Доплата4,
	   |	СУММА(Начисления.Доплата5) КАК Доплата5,
	   |	СУММА(Начисления.Доплата6) КАК Доплата6,
	   |	СУММА(Начисления.Оклад + Начисления.Отпускные + Начисления.БольничныеПредприятие + Начисления.БольничныеФСС
	   |	+ Начисления.Индексация + Начисления.Доплата1 + Начисления.Доплата2 + Начисления.Доплата3
	   |	+ Начисления.Доплата4 + Начисления.Доплата5 + Начисления.Доплата6) КАК ВсегоНачислено
	   |ИЗ
	   |	ВТПолныеНачисления КАК Начисления
	   |СГРУППИРОВАТЬ ПО
	   |	Сотрудник,
	   |	Подразделение,
	   |	Должность,
	   |	ДопПорядокПодразделение,
	   |	СотрудникНаименование
	   |УПОРЯДОЧИТЬ ПО
	   |	ДопПорядокПодразделение,
	   |	СотрудникНаименование";
	   
	   
	Объект.УпрощенныйУчет.Загрузить(Запрос.Выполнить().Выгрузить());			   
				   
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьНовуюСтрокуУпрощенныйУчет(ИдентификаторСтроки)
	
	ДанныеСтроки = Объект.УпрощенныйУчет.НайтиПоИдентификатору(ИдентификаторСтроки);
	ЗаполнитьВремяПоСтроке(ДанныеСтроки, , , Истина, Истина);
	
Конецпроцедуры	

&НаКлиенте
Процедура УпрощенныйУчетРасчетОклада()
	
	Если Элементы.УпрощенныйУчет.ТекущиеДанные.ПлановыйОклад = 0 ИЛИ Элементы.УпрощенныйУчет.ТекущиеДанные.НормаДнейЗаМесяц = 0 ИЛИ Элементы.УпрощенныйУчет.ТекущиеДанные.ОтработаноДней = 0 Тогда
		Элементы.УпрощенныйУчет.ТекущиеДанные.Оклад = 0;
	Иначе
		Элементы.УпрощенныйУчет.ТекущиеДанные.Оклад = Элементы.УпрощенныйУчет.ТекущиеДанные.ПлановыйОклад * Элементы.УпрощенныйУчет.ТекущиеДанные.ОтработаноДней / Элементы.УпрощенныйУчет.ТекущиеДанные.НормаДнейЗаМесяц;
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьИтогиПоДокументу()

	ЗарплатаКадрыКлиентСервер.ИтогиТабличнойЧасти(ЭтаФорма, Объект, "Начисления", "Начисление", "Результат", "ИтогиНачислено");
	ЗарплатаКадрыКлиентСервер.ИтогиТабличнойЧасти(ЭтаФорма, Объект, "Удержания", "Удержание", "Результат", "ИтогиУдержано");
	ЗарплатаКадрыКлиентСервер.ИтогиТабличнойЧасти(ЭтаФорма, Объект, "Взносы", "Налог", "Результат", "ИтогиВзносы");
	ЗарплатаКадрыКлиентСервер.ИтогиТабличнойЧасти(ЭтаФорма, Объект, "Взносы", "Налог", "База", "ИтогиВзносыБаза");
	ЗарплатаКадрыКлиентСервер.ИтогиТабличнойЧасти(ЭтаФорма, Объект, "ВзносыФОТ", "Налог", "Результат", "ИтогиВзносыФОТ");
	ЗарплатаКадрыКлиентСервер.ИтогиТабличнойЧасти(ЭтаФорма, Объект, "ВзносыФОТ", "Налог", "База", "ИтогиВзносыБазаФОТ");
	ЗарплатаКадрыКлиентСервер.ИтогиТабличнойЧасти(ЭтаФорма, Объект, "НДФЛ", "ДоходНДФЛ", "Доход", "ИтогиНДФЛДоход");
	ЗарплатаКадрыКлиентСервер.ИтогиТабличнойЧасти(ЭтаФорма, Объект, "НДФЛ", "ДоходНДФЛ", "Налог", "ИтогиНДФЛ");
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьИтогиПоДвижениям()

	ЗарплатаКадрыКлиентСервер.ИтогиДвижений(ЭтаФорма, РеквизитФормыВЗначение("Объект"), "Хозрасчетный", "СчетДт", "СчетКт", "Сумма", "Декорация15");
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьСотрудников(Знач СписокСотрудников)
	
	СотрудникиКДобавлению = Новый Массив;
	Для каждого ДобавляемыйСотрудник Из СписокСотрудников Цикл
		
		Если Объект.Начисления.НайтиСтроки(Новый Структура("Сотрудник", ДобавляемыйСотрудник)).Количество() = 0 Тогда
			СотрудникиКДобавлению.Добавить(ДобавляемыйСотрудник.ФизическоеЛицо);
		КонецЕсли; 
		
	КонецЦикла;
	
	Результат = РасчетЗарплаты.ДоЗаполнитьДокументНачисленияЗарплаты(Объект,СотрудникиКДобавлению); 
	
	Если Результат.Начисления <> Неопределено И Результат.Начисления.Количество() > 0 Тогда
		
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(Результат.Начисления, Объект.Начисления);
		
	КонецЕсли;

	Если Результат.Удержания <> Неопределено И Результат.Удержания.Количество() > 0 Тогда
		
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(Результат.Удержания, Объект.Удержания);
		
	КонецЕсли;
	
	Если Результат.Взносы <> Неопределено И Результат.Взносы.Количество() > 0 Тогда
		
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(Результат.Взносы, Объект.Взносы);
		
	КонецЕсли;
	
	Если Результат.ВзносыФОТ <> Неопределено И Результат.ВзносыФОТ.Количество() > 0 Тогда
		
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(Результат.ВзносыФОТ, Объект.ВзносыФОТ);
		
	КонецЕсли;
	
	Если Результат.НДФЛ <> Неопределено И Результат.НДФЛ.Количество() > 0 Тогда
		
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(Результат.НДФЛ, Объект.НДФЛ);
		ЗарплатаКадрыКлиентСервер.ЗаполнитьМесяцПоДатеВТабличнойЧасти(Объект.НДФЛ, "НалоговыйПериод", "НалоговыйПериодСтрокой");
	
	КонецЕсли;
	
	РассчитатьИтогиПоДокументу();
	
	//54057
	Если ИспользуетсяУпрощенныйУчет() Тогда
		СформироватьПоНачислениямПриУпрощенномРасчете();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьСотрудниковНДФЛиВзносыСотрудников(Сотрудники)
	
	//Если Объект.КорректироватьНДФЛ И Объект.КорректироватьВзносы Тогда
	//	// Не пересчитываем, т.к. и НДФЛ, и взносы в режиме корректировки.
	//	Возврат;
	//КонецЕсли;
	//
	//// Составляем временные таблицы для расчета НДФЛ и взносов.
	//МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	//РасчетЗарплатыБазовый.СоздатьВТДляРасчетаНДФЛиВзносов(МенеджерВременныхТаблиц, Объект, Сотрудники);
	//
	//// Составляем массив физических лиц.
	//ТекстЗапроса =
	//"ВЫБРАТЬ
	//|	ФизическиеЛица.ФизическоеЛицо
	//|ИЗ
	//|	ВТФизическиеЛица КАК ФизическиеЛица";
	//
	//ФизическиеЛицаМассив = Новый Массив;
	//
	//Запрос = Новый Запрос(ТекстЗапроса);
	//Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	//
	//Выборка = Запрос.Выполнить().Выбрать();
	//Пока Выборка.Следующий() Цикл
	//	ФизическиеЛицаМассив.Добавить(Выборка.ФизическоеЛицо);
	//КонецЦикла;
	//
	//ОтборСтрок = Новый Структура("ФизическоеЛицо", ФизическиеЛицаМассив);
	//
	//// Рассчитываем НДФЛ и взносы
	//ДатаОперации = Мин(Объект.Дата, КонецДня(Объект.МесяцНачисления));
	//
	//НачатьТранзакцию();
	//
	//УстановитьПривилегированныйРежим(Истина);
	//
	//Если Не Объект.КорректироватьНДФЛ Тогда
	//	РезультатРасчетаНДФЛ = РасчетЗарплатыБазовый.РезультатРасчетаНДФЛ(МенеджерВременныхТаблиц, Объект, ДатаОперации);
	//	СдвигИдентификатора = УчетНДФЛФормы.МаксимальныйИдентификаторСтрокиНДФЛ(Объект.НДФЛ) + 1;
	//	// Перенумеруем строки новых коллекций.
	//	УчетНДФЛФормы.НазначитьИдентификаторыНовымСтрокамТаблицамНДФЛИПримененныеВычетыНаДетейИИмущественные(
	//		СдвигИдентификатора, РезультатРасчетаНДФЛ.НДФЛ, РезультатРасчетаНДФЛ.ПримененныеВычетыНаДетейИИмущественные);
	//	// Выполняем замену прежних строк на новые.
	//	РасчетЗарплаты.ЗаменитьСтрокиНаНовыеДанные(Объект.НДФЛ, РезультатРасчетаНДФЛ.НДФЛ, "ФизическоеЛицо", , ОтборСтрок);
	//	// В таблице вычетов, т.к. она не отображается, достаточно просто добавить новые строки в любое место, старые будут
	//	// удалены перед записью.
	//	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(РезультатРасчетаНДФЛ.ПримененныеВычетыНаДетейИИмущественные, Объект.ПримененныеВычетыНаДетейИИмущественные);
	//КонецЕсли; 
	//
	//Если Не Объект.КорректироватьВзносы Тогда
	//	РезультатРасчетаВзносов = РасчетЗарплатыБазовый.РезультатРасчетаВзносов(МенеджерВременныхТаблиц, Объект.Ссылка, Объект.Организация, Объект.МесяцНачисления);	
	//	// Выполняем замену прежних строк на новые.
	//	РасчетЗарплаты.ЗаменитьСтрокиНаНовыеДанные(Объект.Взносы, РезультатРасчетаВзносов, "ФизическоеЛицо", , ОтборСтрок);
	//КонецЕсли; 
	//
	//УстановитьПривилегированныйРежим(Ложь);
	//
	//ОтменитьТранзакцию();
	//
	//Если Не Объект.КорректироватьВзносы Тогда
	//	ЗарплатаКадрыКлиентСервер.ЗаполнитьМесяцПоДатеВТабличнойЧасти(Объект.Взносы, "ДатаПолученияДохода", "ДатаПолученияДоходаСтрокой");		
	//КонецЕсли;	
	//
	//ОбновитьСтрокуСотрудника();
		
КонецПроцедуры

&НаКлиенте
Процедура ВывестиРасчетныйЛисток(ИдентификаторыВыделенныхСтрок, ИмяТабличнойЧасти)
	
	РасчетныйЛисток = РасчетныйЛистокНаСервере(ИдентификаторыВыделенныхСтрок, ИмяТабличнойЧасти);
	
	УправлениеПечатьюКлиент.ВыполнитьКомандуПечати("Отчет.АнализНачисленийИУдержаний", "РасчетныйЛисток", 
			РасчетныйЛисток, ЭтаФорма);
			
КонецПроцедуры

&НаСервере
Функция РасчетныйЛистокНаСервере(ИдентификаторыВыделенныхСтрок, ИмяТабличнойЧасти)
	
	СписокСотрудников = Новый Массив;
	Для каждого ИдентификаторСтроки Из ИдентификаторыВыделенныхСтрок Цикл
		
		Если ИмяТабличнойЧасти = "Начисления" Тогда
			СписокСотрудников.Добавить(Объект.Начисления.НайтиПоИдентификатору(ИдентификаторСтроки).Сотрудник);
		Иначе
			СписокСотрудников.Добавить(Объект.Удержания.НайтиПоИдентификатору(ИдентификаторСтроки).Сотрудник);
		КонецЕсли;
		
	КонецЦикла;
	
	Если ИмяТабличнойЧасти = "Начисления" Тогда
		МассивФизическихЛиц = ОбщегоНазначения.ВыгрузитьКолонку(ОбщегоНазначения.ЗначениеРеквизитаОбъектов(СписокСотрудников, "ФизическоеЛицо"), "Значение", Истина);
	Иначе
		МассивФизическихЛиц = СписокСотрудников;
	КонецЕсли;
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	
	КарточкаУчета = Новый Массив;
	КарточкаУчета.Добавить(ДокументОбъект.Ссылка);
	КарточкаУчета.Добавить(УчетНачисленнойЗарплаты.РасчетныйЛистокПодробнее(ДокументОбъект, Модифицированность, МассивФизическихЛиц, Объект.МесяцНачисления));
	
	Возврат КарточкаУчета;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ БСП

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти