#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда  

#Область ОбработчикиСобытий

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	ТипДанныхЗаполнения = ТипЗнч(ДанныеЗаполнения);	
	
	ИНАГРО_ЭлеваторЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект);

	ЗаполнениеДокументов.Заполнить(ЭтотОбъект, ДанныеЗаполнения); 
	
	Если  ТипДанныхЗаполнения = Тип("Структура")
		И ДанныеЗаполнения.Свойство("ВидОперации") Тогда
		ВидОперации = ДанныеЗаполнения.ВидОперации;
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(Организация) Тогда
		Руководители = ИНАГРО_Элеватор.ОтветственныеЛицаОрганизации(Организация, Дата);
		НачальникОхраны = Руководители.НачальникОхраны;
	КонецЕсли; 
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;

КонецПроцедуры 

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	Перем Заголовок, СтруктураШапкиДокумента;
	Перем ТаблицаПоКультурам;
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКПроведению(ЭтотОбъект);
		   
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначенияБПВызовСервера.ПредставлениеДокументаПриПроведении(Ссылка);

	ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента);	
	
	ДополнитьСтруктуруШапкиНужнымиДанными(СтруктураШапкиДокумента, Отказ, Заголовок);

	ПодготовитьТаблицуПоКультурам(СтруктураШапкиДокумента, ТаблицаПоКультурам, Отказ, Заголовок);
	
	// Движения по документу
	Если НЕ Отказ Тогда		
		ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоКультурам, Отказ, Заголовок);
	КонецЕсли; 		
	
	Движения.Хозрасчетный.ВыполнитьДействияПередЗаписьюДвижений();

	ПроведениеСервер.ПодготовитьНаборыЗаписейКЗаписиДвижений(ЭтотОбъект); 	

КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКОтменеПроведения(ЭтотОбъект);
	Движения.Записать();
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)

	Дата = НачалоДня(ОбщегоНазначения.ТекущаяДатаПользователя());
	Ответственный = Пользователи.ТекущийПользователь();
		
КонецПроцедуры

#КонецОбласти

#Область Проведение

Процедура ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента) Экспорт

	// Дерево значений, содержащее имена необходимых полей в запросе по шапке.
	Перем ДеревоПолейЗапросаПоШапке;	
	
	СтруктураШапкиДокумента   = ОбщегоНазначенияРед12.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	
	// Заполним по шапке документа дерево параметров, нужных при проведении.
	ДеревоПолейЗапросаПоШапке = ОбщегоНазначенияРед12.СформироватьДеревоПолейЗапросаПоШапке(); 	
	
	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа.
	СтруктураШапкиДокумента = УправлениеЗапасами.СформироватьЗапросПоДеревуПолей(ЭтотОбъект, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, "");

КонецПроцедуры

Процедура ДополнитьСтруктуруШапкиНужнымиДанными(СтруктураШапкиДокумента, Отказ, Заголовок)
	
	СтруктураШапкиДокумента.Вставить("КодРасхода");
	СтруктураШапкиДокумента.Вставить("КоличествоМест", 0);
	
КонецПроцедуры

Процедура ПодготовитьТаблицуПоКультурам(СтруктураШапкиДокумента, ТаблицаПоКультурам, Отказ, Заголовок) Экспорт
	
	СтруктураПолей = Новый Структура;
	СтруктураПростыхПолей = Новый Структура;
	СтруктураСложныхПолей = Новый Структура;
	
	СтруктураПолей.Вставить("Владелец",                    "Владелец");		
	СтруктураПолей.Вставить("ДоговорКонтрагента",          "ДоговорКонтрагента");	
	СтруктураПолей.Вставить("Номенклатура",                 "Номенклатура");
	СтруктураПолей.Вставить("ВидХранения",                 "ВидХранения");		
	СтруктураПолей.Вставить("ФизическийВес",               "ФизическийВес");
	СтруктураПолей.Вставить("ЗачетныйВес",                 "ЗачетныйВес");
	СтруктураПолей.Вставить("Дата",                        "Ссылка.Дата");	                                             	
	СтруктураПолей.Вставить("Склад",                       "Ссылка.Склад");
	СтруктураПолей.Вставить("МестоХранения",               "Ссылка.МестоХранения");
	СтруктураПолей.Вставить("Организация",                 "Ссылка.Организация");
	СтруктураПолей.Вставить("Урожай",                      "Ссылка.Урожай");
	СтруктураПолей.Вставить("Ссылка",                      "Ссылка");
	СтруктураПолей.Вставить("ОтражатьВБухгалтерскомУчете", "Ссылка.ОтражатьВБухгалтерскомУчете");	                                                                                             
	
	РезультатЗапросаПоКультурам = ОбщегоНазначенияРед12.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "РасчетПоВладельцам", СтруктураПолей, СтруктураПростыхПолей, СтруктураСложныхПолей);
	
	ТаблицаПоКультурам = РезультатЗапросаПоКультурам.Выгрузить();
	
	ТаблицаПоКультурам.Колонки.Добавить("Количество");
	ТаблицаПоКультурам.Колонки.Добавить("КоличествоМест"); 
	ТаблицаПоКультурам.Колонки.Добавить("Стоимость");
	ТаблицаПоКультурам.Колонки.Добавить("СуммаРегл");
	ТаблицаПоКультурам.Колонки.Добавить("Влажность");                 
	ТаблицаПоКультурам.Колонки.Добавить("СорнаяПримесь");
	ТаблицаПоКультурам.Колонки.Добавить("ЗерноваяПримесь");
	ТаблицаПоКультурам.Колонки.Добавить("Поставщик");
	ТаблицаПоКультурам.Колонки.Добавить("ВидФасовки");		
	ТаблицаПоКультурам.Колонки.Добавить("ВидДокумента");
	ТаблицаПоКультурам.Колонки.Добавить("НомерАнализа");
	ТаблицаПоКультурам.Колонки.Добавить("КодРасхода");
	
	ТаблицаПоКультурам.ЗаполнитьЗначения(0, "Количество");
	ТаблицаПоКультурам.ЗаполнитьЗначения(0, "КоличествоМест");
	ТаблицаПоКультурам.ЗаполнитьЗначения(0, "Стоимость");
	ТаблицаПоКультурам.ЗаполнитьЗначения(0, "СуммаРегл");
	ТаблицаПоКультурам.ЗаполнитьЗначения(0, "Влажность");
	ТаблицаПоКультурам.ЗаполнитьЗначения(0, "СорнаяПримесь");
	ТаблицаПоКультурам.ЗаполнитьЗначения(0, "ЗерноваяПримесь");
	ТаблицаПоКультурам.ЗаполнитьЗначения(Справочники.Контрагенты.ПустаяСсылка(),        "Поставщик");
	ТаблицаПоКультурам.ЗаполнитьЗначения(Справочники.ИНАГРО_ВидыФасовки.ПустаяСсылка(), "ВидФасовки");		
	ТаблицаПоКультурам.ЗаполнитьЗначения(СтруктураШапкиДокумента.ВидДокумента,          "ВидДокумента");
		
КонецПроцедуры

Процедура ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоКультурам, Отказ, Заголовок)
	
	ПровестиПоРегистрамЭлеватора(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоКультурам, Отказ, Заголовок);
	
КонецПроцедуры

Процедура ПровестиПоРегистрамЭлеватора(РежимПроведения, Знач СтруктураШапкиДокумента, Знач ТаблицаПоКультурам, Отказ, Заголовок)
	
	КонтрольОстатковВЗачетномВесе = ИНАГРО_Элеватор.ПолучитьПараметрУчетаЭлеватора(ТекущаяДата(), "КонтрольОстатковВЗачетномВесе", Ложь);
	
	Если КонтрольОстатковВЗачетномВесе Тогда 
		ТаблицаПоКультурам.Колонки.Добавить("ЗачетныйВесДляКонтроля");		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтруктураШапкиДокумента.ЛабораторныйАнализ) Тогда			
		ИНАГРО_Элеватор.ДвиженияПоРегиструЖурналЛабораторныхАнализов(Движения, СтруктураШапкиДокумента);
		ИНАГРО_Элеватор.ДвиженияПоРегиструФорма49(Движения, СтруктураШапкиДокумента);
	КонецЕсли;
	
	Для Каждого СтрокаТаблицы Из ТаблицаПоКультурам Цикл
		
		// Приход отходов 3-й категории
		
		Если СтрокаТаблицы.ФизическийВес > 0 Тогда
			Если КонтрольОстатковВЗачетномВесе Тогда
				ЗачетныйВесДляКонтроля = 0;	
				ЗачетныйВесДляКонтроля = ИНАГРО_Элеватор.РассчитатьКонтрольныйЗачетныйВес(Ссылка, СтрокаТаблицы.ФизическийВес, СтрокаТаблицы.Номенклатура,
				                                                                          ВлажностьОтходов,	СорнаяПримесьОтходов, Организация,
																						  СтрокаТаблицы.Владелец, СтрокаТаблицы.ДоговорКонтрагента);
				СтрокаТаблицы.ЗачетныйВесДляКонтроля = ЗачетныйВесДляКонтроля;	
			КонецЕсли;	
			
			ИНАГРО_Элеватор.ДвиженияПоРегиструОстаткиРасход(Движения, СтрокаТаблицы);			
			ИНАГРО_Элеватор.ДвиженияПоРегиструОстаткиСводнаяРасход(Движения, СтрокаТаблицы);
			
			СтрокаТаблицы.КодРасхода      = ВернутьКодРасходаАктаОчисткиСушки(СтруктураШапкиДокумента.Отходы);
			
			СтрокаТаблицы.ФизическийВес   = СтрокаТаблицы.ФизическийВес;	
			СтрокаТаблицы.Влажность       = СтруктураШапкиДокумента.ВлажностьОтходов;			
			СтрокаТаблицы.СорнаяПримесь   = СтруктураШапкиДокумента.СорнаяПримесьОтходов;
			СтрокаТаблицы.ЗерноваяПримесь = СтруктураШапкиДокумента.ЗерноваяПримесьОтходов;
			СтрокаТаблицы.НомерАнализа    = СокрЛП(СтруктураШапкиДокумента.НомерАнализаОтходов);			
			СтрокаТаблицы.Номенклатура    = СтрокаТаблицы.Номенклатура;
			
			ИНАГРО_Элеватор.ДвиженияПоРегиструФорма36Расход(Движения, СтрокаТаблицы);
			ИНАГРО_Элеватор.ДвиженияПоРегиструФорма36СводнаяРасход(Движения, СтрокаТаблицы);				
			
			НоменклатураДо     = СтрокаТаблицы.Номенклатура;
			ВладелецДо         = СтрокаТаблицы.Владелец;
			ДоговорВладельцаДо = СтрокаТаблицы.ДоговорКонтрагента;
			ВидТМЦ             = ИНАГРО_Элеватор.ПолучитьДополнительныйРеквизитНоменклатуры(СтруктураШапкиДокумента.Отходы, "ВидТМЦ");
			
			Если ВидТМЦ = Перечисления.ИНАГРО_ВидыТМЦ.Кат3 Тогда
				
				// Отходы 3-й категории приходуются на предприятие
				
				СобственныйКонтрагент = ИНАГРО_Элеватор.ПолучитьДополнительныйРеквизитОрганизации(Организация, "Контрагент", Дата);			
				
				СтрокаТаблицы.Владелец     = СобственныйКонтрагент;
				
				Если ЗначениеЗаполнено(СобственныйКонтрагент) Тогда
					СтрокаТаблицы.ДоговорКонтрагента = ИНАГРО_Элеватор.ПолучитьДополнительныйРеквизитОрганизации(Организация,"Договор", Дата); 			
				КонецЕсли;
				
				Если ИНАГРО_Элеватор.ПолучитьПараметрУчетаЭлеватора(Дата, "ВестиСкладскойУчетНегодныхОтходов", Истина) Тогда					
					
					СтрокаТаблицы.Номенклатура       = СтруктураШапкиДокумента.Отходы;
					
					ИНАГРО_Элеватор.ДвиженияПоРегиструФорма36Приход(Движения, СтрокаТаблицы);
					ИНАГРО_Элеватор.ДвиженияПоРегиструФорма36СводнаяПриход(Движения, СтрокаТаблицы);
					
					СтрокаТаблицы.ЗачетныйВес        = СтрокаТаблицы.ФизическийВес;
					
					ИНАГРО_Элеватор.ДвиженияПоРегиструОстаткиПриход(Движения, СтрокаТаблицы);
					ИНАГРО_Элеватор.ДвиженияПоРегиструОстаткиСводнаяПриход(Движения, СтрокаТаблицы);
					
				КонецЕсли;
				
			Иначе
				
				СтрокаТаблицы.Номенклатура = СтруктураШапкиДокумента.Отходы;
				
				ИНАГРО_Элеватор.ДвиженияПоРегиструФорма36Приход(Движения, СтрокаТаблицы);
				ИНАГРО_Элеватор.ДвиженияПоРегиструФорма36СводнаяПриход(Движения, СтрокаТаблицы);
				
				СтрокаТаблицы.ЗачетныйВес  = СтрокаТаблицы.ФизическийВес;
				
				ИНАГРО_Элеватор.ДвиженияПоРегиструОстаткиПриход(Движения, СтрокаТаблицы);
				ИНАГРО_Элеватор.ДвиженияПоРегиструОстаткиСводнаяПриход(Движения, СтрокаТаблицы);
				
			КонецЕсли;
			
			СтрокаТаблицы.Номенклатура       = НоменклатураДо;
			СтрокаТаблицы.Владелец           = ВладелецДо;
			СтрокаТаблицы.ДоговорКонтрагента = ДоговорВладельцаДо;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры	

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ВернутьКодРасходаАктаОчисткиСушки(Культура)
	
	КодРасходаАктаОчисткиСушки = Перечисления.ИНАГРО_КодыРасхода.Культура;
	ВидТМЦ                     = ИНАГРО_Элеватор.ПолучитьДополнительныйРеквизитНоменклатуры(Культура, "ВидТМЦ");
	
	Если ВидТМЦ = Перечисления.ИНАГРО_ВидыТМЦ.Побочный Тогда
		КодРасходаАктаОчисткиСушки = Перечисления.ИНАГРО_КодыРасхода.Побочный;
	ИначеЕсли ВидТМЦ=Перечисления.ИНАГРО_ВидыТМЦ.Кат1 Тогда
		КодРасходаАктаОчисткиСушки = Перечисления.ИНАГРО_КодыРасхода.Кат1;
	ИначеЕсли ВидТМЦ=Перечисления.ИНАГРО_ВидыТМЦ.Кат2 Тогда
		КодРасходаАктаОчисткиСушки = Перечисления.ИНАГРО_КодыРасхода.Кат2;
	ИначеЕсли ВидТМЦ = Перечисления.ИНАГРО_ВидыТМЦ.Кат3 Тогда
		КодРасходаАктаОчисткиСушки = Перечисления.ИНАГРО_КодыРасхода.Кат3;
	КонецЕсли;
	
	Возврат КодРасходаАктаОчисткиСушки;
	
КонецФункции

#КонецОбласти

#КонецЕсли