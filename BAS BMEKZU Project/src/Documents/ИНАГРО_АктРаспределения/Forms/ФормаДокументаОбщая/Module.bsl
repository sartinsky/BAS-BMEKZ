#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	Если Параметры.Ключ.Пустая() Тогда
		ПодготовитьФормуНаСервере();		
	КонецЕсли;
	
	// Уведомим о появлении функционала рабочей даты
	ЭтаФорма.НастройкиПредупреждений = ОбщегоНазначенияБП.НастройкиПредупрежденийОбИзменениях("РабочаяДатаИзДокумента");
	 
	// Показываем, если это новый документ и сама рабочая дата еще не установлена.
	ЭтаФорма.НастройкиПредупреждений.РабочаяДатаИзДокумента = ЭтаФорма.НастройкиПредупреждений.РабочаяДатаИзДокумента
	 	И ЭтаФорма.Параметры.Ключ.Пустая()
	  	И НЕ ЗначениеЗаполнено(БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("РабочаяДата"));	  
		
	УстановитьПараметрыВыбораВидОперации();
	
	// Если форма вызвана в режиме смена вида операции - модифицируем сразу при открытии, 
	// чтобы можно было подтвердить или отказаться от изменения путем сохранения или 
	// отказа от сохранения документа.
	Если Параметры.Свойство("ИзменитьВидОперации")
		И Параметры.ИзменитьВидОперации Тогда
		
		// Не кэшируем переменную Объект, т.к. может вызываться Форма.ИзменитьРеквизиты(),
		// которая меняет Объект.
		Объект.ВидОперации = Параметры.ЗначенияЗаполнения.ВидОперации;
		
		УстановитьЗаголовокФормы();		
		
		УправлениеФормой(ЭтаФорма);
		
		Модифицированность = Истина;
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если  ТипЗнч(Параметр) = Тип("Структура") 
		И Параметр.Свойство("ИдентификаторВызывающейФормы")
		И Параметр.ИдентификаторВызывающейФормы = УникальныйИдентификатор Тогда	
		Если ИмяСобытия = "СозданЛабораторныйАнализ" ИЛИ ИмяСобытия = "ИзмененЛабораторныйАнализ" Тогда			
			Если ИНАГРО_Элеватор.ЛабораторныйАнализПроверкаЗаполнения(Параметр.ДокументСсылка, ПолучитьПараметрыДляПроверкиЗаполнения()) Тогда			
				Объект.ЛабораторныйАнализ = Параметр.ДокументСсылка;
				ЛабораторныйАнализПриИзмененииНаСервере();
				Модифицированность = Истина;
			КонецЕсли;		
		КонецЕсли;
	Иначе
		ОбщегоНазначенияБПКлиент.ОбработкаОповещенияФормыДокумента(ЭтаФорма, Объект.Ссылка, ИмяСобытия, Параметр, Источник);
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	ПодготовитьФормуНаСервере();

КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	УстановитьЗаголовокФормы();	
		
	УстановитьСостояниеДокумента();
	
КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	Если НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДатаДокумента) Тогда
		// Изменение времени не влияет на поведение документа.
		ТекущаяДатаДокумента = Объект.Дата;
		Возврат;
	КонецЕсли;		
	
	// Общие проверки условий по датам.
	ТребуетсяВызовСервера = ИНАГРО_ЭлеваторКлиент.ТребуетсяВызовСервераПриИзмененииДатыДокумента(Объект.Дата, ТекущаяДатаДокумента);

	// Если определили, что изменение даты может повлиять на какие-либо параметры, 
	// то передаем обработку на сервер.
	Если ТребуетсяВызовСервера Тогда
		ДатаПриИзмененииНаСервере();
	КонецЕсли;
	
	// Запомним новую дату документа.
	ТекущаяДатаДокумента = Объект.Дата;	
	
КонецПроцедуры

&НаСервере
Процедура ДатаПриИзмененииНаСервере()

	УстановитьФункциональныеОпцииФормы();
	
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ВидОперацииПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.ВидОперации) Тогда
		ВидОперацииПриИзмененииНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВидОперацииПриИзмененииНаСервере()
	
	Если Объект.ВидОперации = Перечисления.ИНАГРО_ВидыОперацийАктРаспределения.Сводный И НЕ НеСписыватьОтходыСВладельцев Тогда
		
		ТекстСообщения = НСтр("ru='Акт распределения отходов ""Сводный"" может быть создан только при установленной настройке ""Не списывать отходы с владельцев"".';uk='Акт розподілу відходів ""Зведений"" може бути створений тільки при встановленому налаштуванні ""Не списувати відходи з власників"".'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
		Объект.ВидОперации = Перечисления.ИНАГРО_ВидыОперацийАктРаспределения.ПоВладельцам;
		
	КонецЕсли;

	УстановитьЗаголовокФормы();
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтражатьВБухгалтерскомУчетеПриИзменении(Элемент)
	
	Если Объект.РасчетПоВладельцам.Количество() > 0 Тогда
		
		Если Объект.ОтражатьВБухгалтерскомУчете Тогда		
			ТекстВопроса = НСтр("ru='Установить счета бухгалтерского учета в соответствии со значениями по умолчанию?';uk='Встановити рахунки бухгалтерського обліку відповідно до значень за замовчуванням?'");
		Иначе
			ТекстВопроса = НСтр("ru='Очистить счета бухгалтерского учета?';uk='Очистити рахунки бухгалтерського обліку?'");
		КонецЕсли;
		
		Оповещение = Новый ОписаниеОповещения("ОтражатьВБухгалтерскомУчетеПриИзмененииЗавершение", ЭтотОбъект, Параметры);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);	
		
		Возврат;
		
	КонецЕсли;	
	
	УправлениеФормой(ЭтаФорма); 
	
КонецПроцедуры

&НаКлиенте
Процедура ОтражатьВБухгалтерскомУчетеПриИзмененииЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		УправлениеФормой(ЭтаФорма);
		Возврат;
	КонецЕсли; 	
	
	ЗаполнитьСчетаУчетаВТабличнойЧасти();
	
	УправлениеФормой(ЭтаФорма);
   
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		ОрганизацияПриИзмененииНаСервере();
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()
	
	Руководители = ИНАГРО_Элеватор.ОтветственныеЛицаОрганизации(Объект.Организация, Объект.Дата);
	Объект.НачальникОхраны = Руководители.НачальникОхраны;

	УстановитьФункциональныеОпцииФормы();	
	
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура СкладПриИзменении(Элемент)

	Если ЗначениеЗаполнено(Объект.Склад) Тогда
		СкладПриИзмененииНаСервере();
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура СкладПриИзмененииНаСервере()
		
	Объект.МестоХранения = Справочники.ИНАГРО_МестаХранения.ПустаяСсылка();

	УстановитьФункциональныеОпцииФормы(); 	
	
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ФизическийВесПриИзменении(Элемент)
	
	Если Объект.РасчетПоВладельцам.Количество() > 0 Тогда
		ТекстВопроса = НСтр("ru='Распределить вес отходов?';uk='Розподілити вагу відходів?'");
		Оповещение = Новый ОписаниеОповещения("ФизическийВесПриИзмененииЗавершение", ЭтотОбъект, Параметры);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ФизическийВесПриИзмененииЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	РаспределитьОтходыНаСервере();
	
	Модифицированность = Истина;
	   
КонецПроцедуры

&НаКлиенте
Процедура ЛабораторныйАнализПриИзменении(Элемент)
	
	ЛабораторныйАнализПриИзмененииНаСервере();	
	
КонецПроцедуры

&НаСервере
Процедура ЛабораторныйАнализПриИзмененииНаСервере()
	
	ЛабораторныйАнализ = Объект.ЛабораторныйАнализ;
	
	Объект.НомерАнализаОтходов    = ИНАГРО_Элеватор.ПолучитьНомерЛабАнализаИзЛабАнализа(ЛабораторныйАнализ);	
	Объект.ВлажностьОтходов       = ЛабораторныйАнализ.Влажность;
	Объект.СорнаяПримесьОтходов   = ЛабораторныйАнализ.СорнаяПримесь;
	Объект.ЗерноваяПримесьОтходов = ЛабораторныйАнализ.ЗерноваяПримесь;	
	
КонецПроцедуры

&НаКлиенте
Процедура ЛабораторныйАнализНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыОтбора = Новый Структура;
	
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		ПараметрыОтбора.Вставить("Организация",        Объект.Организация);		
	КонецЕсли;	
	Если ЗначениеЗаполнено(Объект.Склад) Тогда
		ПараметрыОтбора.Вставить("Склад",              Объект.Склад);
	КонецЕсли;	
	Если ЗначениеЗаполнено(Объект.ВидХранения) Тогда
		ПараметрыОтбора.Вставить("ВидХранения",        Объект.ВидХранения);
	КонецЕсли;	
	Если ЗначениеЗаполнено(Объект.Номенклатура) Тогда
		ПараметрыОтбора.Вставить("Номенклатура",       Объект.Номенклатура);
	КонецЕсли;	
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Отбор",  ПараметрыОтбора);
	ПараметрыФормы.Вставить("Ссылка", Объект.Ссылка);
	
	ОткрытьФорму("Документ.ИНАГРО_ЛабораторныйАнализ.Форма.ФормаВыбора", ПараметрыФормы, Элемент, УникальныйИдентификатор, , , , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры

&НаКлиенте
Процедура СчетЗатратПриИзменении(Элемент)
	
	УстановитьЗаголовкиИДоступностьСубконто(ЭтаФорма, Объект.СчетЗатрат, Истина, "");
	
	ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3",
		"Субконто1", "Субконто2", "Субконто3");
	
	БухгалтерскийУчетКлиентСервер.ПриИзмененииСчета(Объект.СчетЗатрат, Объект, ПоляОбъекта);
	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "", "СчетЗатрат");
				
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура СчетЗатратОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = БухгалтерскийУчетКлиент.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение);

КонецПроцедуры

&НаКлиенте
Процедура СубконтоПриИзменении(Элемент)

	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "", "СчетЗатрат");
	
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура СубконтоНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	СписокПараметров = СписокПараметровВыбораСубконто(ЭтаФорма, Объект, "Субконто%Индекс%", "СчетЗатрат");
	ОбщегоНазначенияБПКлиент.НачалоВыбораЗначенияСубконто(ЭтаФорма, Элемент, СтандартнаяОбработка, СписокПараметров);

КонецПроцедуры

&НаКлиенте
Процедура ПримечаниеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(
		Элемент.ТекстРедактирования,
		ЭтотОбъект,
		"Объект.Примечание",
		НСтр("ru='Причина возникновения отходов';uk='Причина появи відходів'"));

КонецПроцедуры

&НаКлиенте
Процедура ОписаниеДвиженияФормы36НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(
		Элемент.ТекстРедактирования,
		ЭтотОбъект,
		"Объект.ОписаниеДвиженияФормы36",
		НСтр("ru='Описание движения формы 36';uk='Опис руху форми 36'"));

КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(
		Элемент.ТекстРедактирования,
		ЭтотОбъект,
		"Объект.Комментарий");

КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиСобытийЭлементовТаблицыФормыРасчетПоВладельцам

&НаКлиенте
Процедура РасчетПоВладельцамНоменклатураПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.РасчетПоВладельцам.ТекущиеДанные;
	
	ДанныеСтрокиТаблицы = Новый Структура(
		"Номенклатура, Владелец, ДоговорКонтрагента, 
		|ВидХранения, СчетУчетаБУ");
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, ТекущиеДанные);

	ДанныеОбъекта = Новый Структура(
		"Дата, Организация, Склад,
		|ВидОперации, ОтражатьВБухгалтерскомУчете");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	ДанныеОбъекта.Вставить("НеСписыватьОтходыСВладельцев", НеСписыватьОтходыСВладельцев);
	ДанныеОбъекта.Вставить("ВладелецДляОтходов",           ВладелецДляОтходов);	
	
	РасчетПоВладельцамНоменклатураПриИзмененииНаСервере(ДанныеСтрокиТаблицы, ДанныеОбъекта);
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтрокиТаблицы);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура РасчетПоВладельцамНоменклатураПриИзмененииНаСервере(СтрокаТабличнойЧасти, Знач ДанныеОбъекта)
		
	Если  ДанныеОбъекта.ВидОперации = Перечисления.ИНАГРО_ВидыОперацийАктРаспределения.Сводный
		И ДанныеОбъекта.НеСписыватьОтходыСВладельцев Тогда
		СтрокаТабличнойЧасти.Владелец		    = ДанныеОбъекта.ВладелецДляОтходов;
		СтрокаТабличнойЧасти.ДоговорКонтрагента = ДанныеОбъекта.ВладелецДляОтходов.ОсновнойДоговорКонтрагента;
		СтрокаТабличнойЧасти.ВидХранения        = ИНАГРО_ЭлеваторЗаполнениеДокументов.ПолучитьЗначениеПоУмолчанию("ВидХранения");
	КонецЕсли;
	
	СведенияОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОНоменклатуре(
		СтрокаТабличнойЧасти.Номенклатура, ДанныеОбъекта);
	
	Если СведенияОНоменклатуре = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Документы.ИНАГРО_АктРаспределения.ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(ДанныеОбъекта, СтрокаТабличнойЧасти, СведенияОНоменклатуре);

КонецПроцедуры

&НаКлиенте
Процедура РасчетПоВладельцамВладелецПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.РасчетПоВладельцам.ТекущиеДанные;
	
	Если ЗначениеЗаполнено(ТекущиеДанные.Владелец) Тогда
		
		ПараметрыОтбораДоговора = ПолучитьПараметрыДляДоговоров(ТекущиеДанные);
		
		ИНАГРО_ЭлеваторЗаполнениеДокументов.ПриИзмененииЗначенияКонтрагента(Объект.Дата, Объект.Организация, ТекущиеДанные.Владелец, ТекущиеДанные.ДоговорКонтрагента, ПараметрыОтбораДоговора);
		
		ДанныеСтрокиТаблицы = Новый Структура("Номенклатура, Владелец, СчетУчетаБУ");
		ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, ТекущиеДанные);

		ДанныеОбъекта = Новый Структура(
			"Дата, Организация, Склад,
			|ОтражатьВБухгалтерскомУчете");
		ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
				
		РасчетПоВладельцамВладелецПриИзмененииНаСервере(ДанныеСтрокиТаблицы,  ДанныеОбъекта);
		
		ТекущиеДанные.СчетУчетаБУ = ДанныеСтрокиТаблицы.СчетУчетаБУ;

	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Процедура РасчетПоВладельцамВладелецПриИзмененииНаСервере(СтрокаТабличнойЧасти, Знач ДанныеОбъекта)	
	
	СведенияОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОНоменклатуре(
		СтрокаТабличнойЧасти.Номенклатура, ДанныеОбъекта);
	
	Если СведенияОНоменклатуре = Неопределено Тогда
		Возврат;
	КонецЕсли;
		
	Документы.ИНАГРО_АктРаспределения.ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(ДанныеОбъекта, СтрокаТабличнойЧасти, СведенияОНоменклатуре);

КонецПроцедуры

&НаКлиенте
Процедура РасчетПоВладельцамФизическийВесПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.РасчетПоВладельцам.ТекущиеДанные;
	
	ТекущиеДанные.ЗачетныйВес = ТекущиеДанные.ФизическийВес;

КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиКомандФормы

#Область ВыборПериода

&НаКлиенте
Процедура ВыбратьПериод(Команда)

	ПараметрыФормыВыбора = Новый Структура("НачалоПериода, КонецПериода", Объект.ДатаНачала, Объект.ДатаОкончания);
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыбратьПериодЗавершение", ЭтотОбъект);
	ОткрытьФорму("ОбщаяФорма.ВыборСтандартногоПериода", ПараметрыФормыВыбора, Элементы.ВыбратьПериод, , , , ОписаниеОповещения);
	
КонецПроцедуры 

&НаКлиенте
Процедура ВыбратьПериодЗавершение(РезультатВыбора, ДопПараметры) Экспорт
	
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Объект.ДатаНачала	 = РезультатВыбора.НачалоПериода;
	Объект.ДатаОкончания = РезультатВыбора.КонецПериода;		
		
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура СоздатьЛабораторныйАнализ(Команда)
	
	ЗначенияЗаполнения = Новый Структура;
	ЗначенияЗаполнения.Вставить("Ссылка",          ПредопределенноеЗначение("Документ.ИНАГРО_ЛабораторныйАнализ.ПустаяСсылка"));
	ЗначенияЗаполнения.Вставить("Дата",            Объект.Дата);
	ЗначенияЗаполнения.Вставить("Организация",     Объект.Организация);
	ЗначенияЗаполнения.Вставить("Склад",           Объект.Склад);
	ЗначенияЗаполнения.Вставить("ВидХранения",     Объект.ВидХранения);
	ЗначенияЗаполнения.Вставить("Урожай",          Объект.Урожай);
	ЗначенияЗаполнения.Вставить("Номенклатура",    Объект.Отходы);
	ЗначенияЗаполнения.Вставить("Влажность",       Объект.ВлажностьОтходов);
	ЗначенияЗаполнения.Вставить("СорнаяПримесь",   Объект.СорнаяПримесьОтходов);
	ЗначенияЗаполнения.Вставить("ЗерноваяПримесь", Объект.ЗерноваяПримесьОтходов);

	ИНАГРО_ЭлеваторКлиент.СоздатьДокументНаОсновании(ЭтаФорма, ЗначенияЗаполнения);
		
КонецПроцедуры

&НаКлиенте
Процедура РаспределитьОтходы(Команда)
	
	Если Объект.РасчетПоВладельцам.Количество() > 0 Тогда		
		РаспределитьОтходыНаСервере();		
	КонецЕсли;

КонецПроцедуры
	
&НаСервере
Процедура РаспределитьОтходыНаСервере()
		
	ВсегоБазисРаспределенияОтходов             = Объект.РасчетПоВладельцам.Итог("БазисРаспределенияОтходов");	
	ВидТМЦ                                     = ИНАГРО_Элеватор.ПолучитьДополнительныйРеквизитНоменклатуры(Объект.Отходы, "ВидТМЦ");
	Разница                                    = Объект.ФизическийВес;
	МаксЗначениеБазисРаспределенияОтходов      = 0;
	СтрСМаксЗначениемБазисРаспределенияОтходов = 1;	
	
	Для Каждого СтрокаТабличнойЧасти Из Объект.РасчетПоВладельцам Цикл		
		
		ВесПоправки = Окр(СтрокаТабличнойЧасти.БазисРаспределенияОтходов *  Объект.ФизическийВес / ВсегоБазисРаспределенияОтходов);
		СтрокаТабличнойЧасти.ФизическийВес = ВесПоправки;
		
		Если ВидТМЦ = Перечисления.ИНАГРО_ВидыТМЦ.Кат3 Тогда 
			СтрокаТабличнойЧасти.ЗачетныйВес = 0;
		Иначе 
			СтрокаТабличнойЧасти.ЗачетныйВес = СтрокаТабличнойЧасти.ФизическийВес;
		КонецЕсли;
		
		Разница = Разница - ВесПоправки;
		
		Если СтрокаТабличнойЧасти.БазисРаспределенияОтходов > МаксЗначениеБазисРаспределенияОтходов Тогда
			МаксЗначениеБазисРаспределенияОтходов = СтрокаТабличнойЧасти.БазисРаспределенияОтходов;
			СтрСМаксЗначениемБазисРаспределенияОтходов = СтрокаТабличнойЧасти.НомерСтроки;
		КонецЕсли;		
	КонецЦикла;
	
	// остаток положим на строку с максимальным значением базы распределения
	
	Если Разница <> 0 Тогда
		
		СтрокаТабличнойЧасти = Объект.РасчетПоВладельцам.Получить(СтрСМаксЗначениемБазисРаспределенияОтходов - 1);
		СтрокаТабличнойЧасти.ФизическийВес = СтрокаТабличнойЧасти.ФизическийВес + Разница;
		
		Если ВидТМЦ = Перечисления.ИНАГРО_ВидыТМЦ.Кат3 Тогда 
			СтрокаТабличнойЧасти.ЗачетныйВес = 0;
		Иначе 
			СтрокаТабличнойЧасти.ЗачетныйВес = СтрокаТабличнойЧасти.ФизическийВес;
		КонецЕсли;
		
	КонецЕсли;
	
	Модифицированность = Истина;

КонецПроцедуры

#Область Заполнить

&НаКлиенте
Процедура ЗаполнитьОборотом(Команда)
	
	Если Объект.РасчетПоВладельцам.Количество() > 0 Тогда
		ТекстВопроса = НСтр("ru='Табличная часть будет очищена. Продолжить?';uk='Таблична частина буде очищена. Продовжити?'");
		Оповещение = Новый ОписаниеОповещения("ЗаполнитьОборотомЗавершение", ЭтотОбъект, Параметры);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	Иначе		
		ЗаполнитьОборотомНаСервере();		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьОборотомЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли; 	
	
	Объект.РасчетПоВладельцам.Очистить();

	ЗаполнитьОборотомНаСервере();	
		   
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОборотомНаСервере()
	
	Фильтр = СформироватьФильтр();
	
	ФильтрРегистраторов = "
	|	    (ИНАГРО_Форма36Обороты.Регистратор ССЫЛКА Документ.ИНАГРО_Перемещение) 
	|		ИЛИ (ИНАГРО_Форма36Обороты.Регистратор ССЫЛКА Документ.ИНАГРО_ТТНВвоз) 
	|		ИЛИ (ИНАГРО_Форма36Обороты.Регистратор ССЫЛКА Документ.ИНАГРО_ТТНВнутр)
	|		ИЛИ (ИНАГРО_Форма36Обороты.Регистратор ССЫЛКА Документ.ИНАГРО_ТТНВывоз)
	|		ИЛИ (ИНАГРО_Форма36Обороты.Регистратор ССЫЛКА Документ.ИНАГРО_РеестрТТНВвоз)
	|		ИЛИ (ИНАГРО_Форма36Обороты.Регистратор ССЫЛКА Документ.ИНАГРО_РеестрТТНВнутр)
	|		ИЛИ (ИНАГРО_Форма36Обороты.Регистратор ССЫЛКА Документ.ИНАГРО_РеестрТТНВывоз)
	|		ИЛИ (ИНАГРО_Форма36Обороты.Регистратор ССЫЛКА Документ.ИНАГРО_РеестрТТНВвозЖД)
	|		ИЛИ (ИНАГРО_Форма36Обороты.Регистратор ССЫЛКА Документ.ИНАГРО_РеестрТТНВывозЖД)";
	
	Запрос = Новый Запрос;
			
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ИНАГРО_Форма36Обороты.Организация КАК Организация,
		|	ИНАГРО_Форма36Обороты.Номенклатура КАК Номенклатура,
		|	ИНАГРО_Форма36Обороты.Владелец КАК Владелец,
		|	ИНАГРО_Форма36Обороты.Договор КАК Договор,
		|	ИНАГРО_Форма36Обороты.Склад КАК Склад,
		|	ИНАГРО_Форма36Обороты.Урожай КАК Урожай,
		|	ИНАГРО_Форма36Обороты.ВидХранения КАК ВидХранения,
		|	СУММА(ЕСТЬNULL(ИНАГРО_Форма36Обороты.ВесПриходПриход, 0)) КАК ВесПриход,
		|	СУММА(ЕСТЬNULL(ИНАГРО_Форма36Обороты.ВесРасходПриход, 0)) КАК ВесРасход,
		|	ИНАГРО_Форма36Обороты.Регистратор КАК Регистратор 
		|ИЗ
		|	РегистрНакопления.ИНАГРО_Форма36.Обороты(&ДатаНачала, &ДатаОкончания, Регистратор, " + Фильтр + " ) КАК ИНАГРО_Форма36Обороты
		|ГДЕ
		|	" + ФильтрРегистраторов + " 
		|СГРУППИРОВАТЬ ПО
		|	ИНАГРО_Форма36Обороты.ВидХранения,
		|	ИНАГРО_Форма36Обороты.Организация,
		|	ИНАГРО_Форма36Обороты.Склад,
		|	ИНАГРО_Форма36Обороты.Урожай,
		|	ИНАГРО_Форма36Обороты.Номенклатура,
		|	ИНАГРО_Форма36Обороты.Владелец,
		|	ИНАГРО_Форма36Обороты.Договор,
		|	ИНАГРО_Форма36Обороты.Регистратор
		|ИТОГИ
		|	СУММА(ВесПриход),
		|	СУММА(ВесРасход)
		|ПО
		|	Номенклатура,
		|	Владелец,
		|	Договор,
		|	ВидХранения";
	
	Запрос.УстановитьПараметр("Организация",   Объект.Организация);
	Запрос.УстановитьПараметр("Склад",         Объект.Склад);
	Запрос.УстановитьПараметр("Номенклатура",  Объект.Номенклатура);
	Запрос.УстановитьПараметр("Урожай",        Объект.Урожай);	
	Запрос.УстановитьПараметр("ДатаНачала",    Новый Граница(НачалоДня(Объект.ДатаНачала), ВидГраницы.Включая));
	Запрос.УстановитьПараметр("ДатаОкончания", Новый Граница(КонецДня(Объект.ДатаОкончания), ВидГраницы.Включая));

	ВыборкаОбщая    = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);	
	
	Если ВыборкаОбщая.Количество() > 0 Тогда
		
		Пока ВыборкаОбщая.Следующий() Цикл
			
			ВыборкаНоменклатура = ВыборкаОбщая.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			
			Пока ВыборкаНоменклатура.Следующий() Цикл
				
				ВыборкаВладелец = ВыборкаНоменклатура.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				
				Пока ВыборкаВладелец.Следующий() Цикл
					
					Выборка = ВыборкаВладелец.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
					
					Пока Выборка.Следующий() Цикл
						
						ВидТМЦ = ИНАГРО_Элеватор.ПолучитьДополнительныйРеквизитНоменклатуры(Выборка.Номенклатура, "ВидТМЦ");
						
						Если ВидТМЦ <> Перечисления.ИНАГРО_ВидыТМЦ.Культура Тогда
							Продолжить;
						КонецЕсли;
						
						НоваяСтрока = Объект.РасчетПоВладельцам.Добавить();
						НоваяСтрока.Номенклатура              = Выборка.Номенклатура;
						НоваяСтрока.Владелец                  = Выборка.Владелец;
						НоваяСтрока.ДоговорКонтрагента        = Выборка.Договор;
						НоваяСтрока.ВидХранения               = Выборка.ВидХранения;												
						
						Оборот = Выборка.ВесПриход + Выборка.ВесРасход;
						
						НоваяСтрока.БазисРаспределенияОтходов = Оборот;								
						
					КонецЦикла;					
					
				КонецЦикла;					
				
			КонецЦикла;					
			
		КонецЦикла;
		
	КонецЕсли;
	
	ЗаполнитьСчетаУчетаВТабличнойЧасти();
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьОборотомИПодработкой(Команда)
	
	Если Объект.РасчетПоВладельцам.Количество() > 0 Тогда
		ТекстВопроса = НСтр("ru='Табличная часть будет очищена. Продолжить?';uk='Таблична частина буде очищена. Продовжити?'");
		Оповещение = Новый ОписаниеОповещения("ЗаполнитьОборотомИПодработкойЗавершение", ЭтотОбъект, Параметры);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	Иначе		
		ЗаполнитьОборотомИПодработкойСервере();		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьОборотомИПодработкойЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли; 	
	
	Объект.РасчетПоВладельцам.Очистить();

	ЗаполнитьОборотомИПодработкойСервере();
	   
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОборотомИПодработкойСервере()
	
	Фильтр = СформироватьФильтр();
	
	Фильтр1 = "";
	Фильтр1 = Фильтр1 + ?(ЗначениеЗаполнено(Объект.Организация),  " И ИНАГРО_Форма34Сводная.Ссылка.Организация = &Организация ", "");
	Фильтр1 = Фильтр1 + ?(ЗначениеЗаполнено(Объект.Склад),        " И ИНАГРО_Форма34Сводная.Ссылка.Склад = &Склад ", "");
	Фильтр1 = Фильтр1 + ?(ЗначениеЗаполнено(Объект.Номенклатура), " И ИНАГРО_Форма34Сводная.Ссылка.Номенклатура = &Номенклатура ", "");
	Фильтр1 = Фильтр1 + ?(ЗначениеЗаполнено(Объект.Урожай),       " И ИНАГРО_Форма34Сводная.Ссылка.Урожай = &Урожай ", "");
	
	ФильтрРегистраторовПриход  = "
	|	    (ИНАГРО_Форма36Обороты.Регистратор ССЫЛКА Документ.ИНАГРО_Перемещение) 
	|		ИЛИ (ИНАГРО_Форма36Обороты.Регистратор ССЫЛКА Документ.ИНАГРО_ТТНВвоз) 
	|		ИЛИ (ИНАГРО_Форма36Обороты.Регистратор ССЫЛКА Документ.ИНАГРО_ТТНВнутр)
	|		ИЛИ (ИНАГРО_Форма36Обороты.Регистратор ССЫЛКА Документ.ИНАГРО_РеестрТТНВвоз)
	|		ИЛИ (ИНАГРО_Форма36Обороты.Регистратор ССЫЛКА Документ.ИНАГРО_РеестрТТНВнутр)
	|		ИЛИ (ИНАГРО_Форма36Обороты.Регистратор ССЫЛКА Документ.ИНАГРО_РеестрТТНВвозЖД)";
	ФильтрРегистраторовАвто = "
	|	    (ИНАГРО_Форма36Обороты.Регистратор ССЫЛКА Документ.ИНАГРО_Перемещение) 
	|		ИЛИ (ИНАГРО_Форма36Обороты.Регистратор ССЫЛКА Документ.ИНАГРО_ТТНВнутр)
	|		ИЛИ (ИНАГРО_Форма36Обороты.Регистратор ССЫЛКА Документ.ИНАГРО_ТТНВывоз)
	|		ИЛИ (ИНАГРО_Форма36Обороты.Регистратор ССЫЛКА Документ.ИНАГРО_РеестрТТНВнутр)
	|		ИЛИ (ИНАГРО_Форма36Обороты.Регистратор ССЫЛКА Документ.ИНАГРО_РеестрТТНВывоз)";
	ФильтрРегистраторовЖД  = "
	|	     (ИНАГРО_Форма36Обороты.Регистратор ССЫЛКА Документ.ИНАГРО_РеестрТТНВывозЖД)";
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ИНАГРО_Форма36Обороты.Организация КАК Организация,
		|	ИНАГРО_Форма36Обороты.Номенклатура КАК Номенклатура,
		|	ИНАГРО_Форма36Обороты.Склад КАК Склад,
		|	ИНАГРО_Форма36Обороты.Урожай КАК Урожай,
		|	ИНАГРО_Форма36Обороты.ВидХранения КАК ВидХранения,
		|	СУММА(ЕСТЬNULL(ИНАГРО_Форма36Обороты.ВесПриходПриход, 0)) КАК ВесПриход,
		|	ИНАГРО_Форма36Обороты.Регистратор КАК Регистратор,
		|	0 КАК ВесРасходЖД,
		|	0 КАК ВесРасходАвто,
		|	0 КАК Просушено,
		|	0 КАК очищено
		|ИЗ
		|	РегистрНакопления.ИНАГРО_Форма36.Обороты(&ДатаНач, &ДатаКон, Регистратор, " + Фильтр + " ) КАК ИНАГРО_Форма36Обороты
		|ГДЕ
		|	" + ФильтрРегистраторовПриход + " 
		|СГРУППИРОВАТЬ ПО
		|	ИНАГРО_Форма36Обороты.ВидХранения,
		|	ИНАГРО_Форма36Обороты.Организация,
		|	ИНАГРО_Форма36Обороты.Склад,
		|	ИНАГРО_Форма36Обороты.Урожай,
		|	ИНАГРО_Форма36Обороты.Номенклатура,
		|	ИНАГРО_Форма36Обороты.Регистратор
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ИНАГРО_Форма36Обороты.Организация,
		|	ИНАГРО_Форма36Обороты.Номенклатура,
		|	ИНАГРО_Форма36Обороты.Склад,
		|	ИНАГРО_Форма36Обороты.Урожай,
		|	ИНАГРО_Форма36Обороты.ВидХранения,
		|	0 КАК ВесПриход,
		|	ИНАГРО_Форма36Обороты.Регистратор,
		|	СУММА(ЕСТЬNULL(ИНАГРО_Форма36Обороты.ВесРасходПриход, 0)) КАК ВесРасходАвто,
		|	0 КАК ВесРасходЖД,
		|	0 КАК Просушено,
		|	0 КАК очищено
		|ИЗ
		|	РегистрНакопления.ИНАГРО_Форма36.Обороты(&ДатаНач, &ДатаКон, Регистратор, " + Фильтр + " ) КАК ИНАГРО_Форма36Обороты
		|ГДЕ
		|	" + ФильтрРегистраторовАвто + " 
		|СГРУППИРОВАТЬ ПО
		|	ИНАГРО_Форма36Обороты.ВидХранения,
		|	ИНАГРО_Форма36Обороты.Организация,
		|	ИНАГРО_Форма36Обороты.Склад,
		|	ИНАГРО_Форма36Обороты.Урожай,
		|	ИНАГРО_Форма36Обороты.Номенклатура,
		|	ИНАГРО_Форма36Обороты.Регистратор
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ИНАГРО_Форма36Обороты.Организация,
		|	ИНАГРО_Форма36Обороты.Номенклатура,
		|	ИНАГРО_Форма36Обороты.Склад,
		|	ИНАГРО_Форма36Обороты.Урожай,
		|	ИНАГРО_Форма36Обороты.ВидХранения,                                  
		|	0 КАК ВесПриход,
		|	ИНАГРО_Форма36Обороты.Регистратор,
		|	0 КАК ВесРасходАвто,
		|	СУММА(ЕСТЬNULL(ИНАГРО_Форма36Обороты.ВесРасходПриход, 0))КАК ВесРасходЖД,
		|	0 КАК Просушено,
		|	0 КАК очищено
		|ИЗ
		|	РегистрНакопления.ИНАГРО_Форма36.Обороты(&ДатаНач, &ДатаКон, Регистратор, " + Фильтр + " ) КАК ИНАГРО_Форма36Обороты
		|ГДЕ
		|	" + ФильтрРегистраторовЖД + " 
		|СГРУППИРОВАТЬ ПО
		|	ИНАГРО_Форма36Обороты.ВидХранения,
		|	ИНАГРО_Форма36Обороты.Организация,
		|	ИНАГРО_Форма36Обороты.Склад,
		|	ИНАГРО_Форма36Обороты.Урожай,
		|	ИНАГРО_Форма36Обороты.Номенклатура,
		|	ИНАГРО_Форма36Обороты.Регистратор
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ИНАГРО_Форма34Сводная.Организация,
		|	ИНАГРО_Форма34Сводная.Номенклатура,
		|	ИНАГРО_Форма34Сводная.Склад,
		|	ИНАГРО_Форма34Сводная.Урожай,
		|	ИНАГРО_Форма34Сводная.ВидХранения,
		|	0 КАК ВесПриход,
		|	ИНАГРО_Форма34Сводная.Ссылка,
		|	0 КАК ВесРасходАвто,
		|	0 КАК ВесРасходЖД,
		|	СУММА(ЕСТЬNULL(ИНАГРО_Форма34Сводная.ФизическийВес5, 0))КАК Просушено,
		|	СУММА(ЕСТЬNULL(ИНАГРО_Форма34Сводная.ФизическийВес3, 0))КАК очищено
		|ИЗ
		|	Документ.ИНАГРО_Форма34Сводная КАК ИНАГРО_Форма34Сводная
		|ГДЕ
		|	ИНАГРО_Форма34Сводная.Проведен = ИСТИНА
		|	И ИНАГРО_Форма34Сводная.Ссылка.дата МЕЖДУ &ДатаНач1 И &ДатаКон1 " + Фильтр1 + "
		|
		|СГРУППИРОВАТЬ ПО
		|	ИНАГРО_Форма34Сводная.Ссылка,
		|	ИНАГРО_Форма34Сводная.Организация,
		|	ИНАГРО_Форма34Сводная.Номенклатура,
		|	ИНАГРО_Форма34Сводная.Склад,
		|	ИНАГРО_Форма34Сводная.ВидХранения,
		|	ИНАГРО_Форма34Сводная.Урожай
		|ИТОГИ
		|	СУММА(ВесПриход),
		|	СУММА(ВесРасходЖД),
		|	СУММА(ВесРасходАвто),
		|	СУММА(Просушено),
		|	СУММА(очищено)
		|ПО
		|	Номенклатура,
		|	ВидХранения,
		|	Урожай";
	
	Запрос.УстановитьПараметр("Организация",  Объект.Организация);
	Запрос.УстановитьПараметр("Склад",        Объект.Склад);	
	Запрос.УстановитьПараметр("Номенклатура", Объект.Номенклатура);
	Запрос.УстановитьПараметр("Урожай",       Объект.Урожай);	
	Запрос.УстановитьПараметр("ДатаНач",      Новый Граница(НачалоДня(Объект.ДатаНачала),   ВидГраницы.Включая));
	Запрос.УстановитьПараметр("ДатаКон",      Новый Граница(КонецДня(Объект.ДатаОкончания), ВидГраницы.Включая));
	Запрос.УстановитьПараметр("ДатаНач1",     НачалоДня(Объект.ДатаНачала));
	Запрос.УстановитьПараметр("ДатаКон1",     КонецДня(Объект.ДатаОкончания));
	
	ВыборкаОбщая       = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
	Если ВыборкаОбщая.Количество() > 0 Тогда
		
		Пока ВыборкаОбщая.Следующий() Цикл
			
			ВыборкаНоменклатура = ВыборкаОбщая.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			
			Пока ВыборкаНоменклатура.Следующий() Цикл
				
				Выборка = ВыборкаНоменклатура.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				
				Пока Выборка.Следующий() Цикл
					
					ВидТМЦ = ИНАГРО_Элеватор.ПолучитьДополнительныйРеквизитНоменклатуры(Выборка.Номенклатура, "ВидТМЦ");
					
					Если ВидТМЦ <> Перечисления.ИНАГРО_ВидыТМЦ.Культура Тогда
						Продолжить;
					КонецЕсли;
					
					НоваяСтрока = Объект.РасчетПоВладельцам.Добавить();
					НоваяСтрока.Номенклатура              = Выборка.Номенклатура;
					НоваяСтрока.Владелец                  = ВладелецДляОтходов;
					Если ЗначениеЗаполнено(ВладелецДляОтходов) Тогда
						НоваяСтрока.ДоговорКонтрагента = ВладелецДляОтходов.ОсновнойДоговорКонтрагента;
					Иначе
						НоваяСтрока.ДоговорКонтрагента = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
					КонецЕсли;
					НоваяСтрока.ВидХранения               = Выборка.ВидХранения;
					НоваяСтрока.ВесПриход                 = Выборка.ВесПриход;
					НоваяСтрока.ВесРасходАвто             = Выборка.ВесРасходАвто;
					НоваяСтрока.ВесРасходЖД               = Выборка.ВесРасходЖД;
					НоваяСтрока.Очищено                   = Выборка.очищено;
					НоваяСтрока.Просушено                 = Выборка.Просушено;
					НоваяСтрока.Урожай                    = Выборка.урожай; 				
					
					Оборот = Выборка.ВесПриход + Выборка.ВесРасходАвто + Выборка.ВесРасходЖД + Выборка.Очищено + Выборка.Просушено;
					
					НоваяСтрока.БазисРаспределенияОтходов = Оборот; 					
					
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
	ЗаполнитьСчетаУчетаВТабличнойЧасти();
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПросушеннымЗерном(Команда)
	
	Если Объект.РасчетПоВладельцам.Количество() > 0 Тогда
		ТекстВопроса = НСтр("ru='Табличная часть будет очищена. Продолжить?';uk='Таблична частина буде очищена. Продовжити?'");
		Оповещение = Новый ОписаниеОповещения("ЗаполнитьПросушеннымЗерномЗавершение", ЭтотОбъект, Параметры);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	Иначе		
		ЗаполнитьПросушеннымЗерномНаСервере();		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПросушеннымЗерномЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли; 	
	
	Объект.РасчетПоВладельцам.Очистить();

	ЗаполнитьПросушеннымЗерномНаСервере();
	   
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПросушеннымЗерномНаСервере()
	
	Фильтр = "";
	Фильтр = Фильтр + ?(ЗначениеЗаполнено(Объект.Организация),  " И ИНАГРО_Форма34СводнаяРасчетПоВладельцам.Ссылка.Организация = &Организация ", "");
	Фильтр = Фильтр + ?(ЗначениеЗаполнено(Объект.Склад),        " И ИНАГРО_Форма34СводнаяРасчетПоВладельцам.Ссылка.Склад = &Склад ", "");
	Фильтр = Фильтр + ?(ЗначениеЗаполнено(Объект.Номенклатура), " И ИНАГРО_Форма34СводнаяРасчетПоВладельцам.Ссылка.Номенклатура = &Номенклатура ", "");
	Фильтр = Фильтр + ?(ЗначениеЗаполнено(Объект.Урожай),       " И ИНАГРО_Форма34СводнаяРасчетПоВладельцам.Ссылка.Урожай = &Урожай ", "");

	Запрос = Новый Запрос;
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ИНАГРО_Форма34СводнаяРасчетПоВладельцам.Ссылка.Номенклатура КАК Номенклатура,
		|	ИНАГРО_Форма34СводнаяРасчетПоВладельцам.Владелец КАК Владелец,
		|	ИНАГРО_Форма34СводнаяРасчетПоВладельцам.ДоговорКонтрагента КАК ДоговорКонтрагента,
		|	ИНАГРО_Форма34СводнаяРасчетПоВладельцам.ВидХранения КАК ВидХранения,
		|	ИНАГРО_Форма34СводнаяРасчетПоВладельцам.ПроводилиСушку КАК ПроводилиСушку,
		|	СУММА(ЕСТЬNULL(ИНАГРО_Форма34СводнаяРасчетПоВладельцам.УбыльОтСушки, 0)) КАК УбыльОтСушки,
		|	СУММА(ЕСТЬNULL(ИНАГРО_Форма34СводнаяРасчетПоВладельцам.ФизическийВес1, 0)) КАК ФизическийВес1,
		|	СУММА(ЕСТЬNULL(ИНАГРО_Форма34СводнаяРасчетПоВладельцам.ФизическийВес21, 0) + ЕСТЬNULL(ИНАГРО_Форма34СводнаяРасчетПоВладельцам.ФизическийВес3, 0) + ЕСТЬNULL(ИНАГРО_Форма34СводнаяРасчетПоВладельцам.ФизическийВес32, 0)) КАК УбыльОтОчистки,
		|	ИНАГРО_Форма34СводнаяРасчетПоВладельцам.Ссылка.Порядок
		|ИЗ
		|	Документ.ИНАГРО_Форма34Сводная.РасчетПоВладельцам КАК ИНАГРО_Форма34СводнаяРасчетПоВладельцам
		|ГДЕ
		|	ИНАГРО_Форма34СводнаяРасчетПоВладельцам.ПроводилиСушку = ИСТИНА
		|	И ИНАГРО_Форма34СводнаяРасчетПоВладельцам.Ссылка.Проведен = ИСТИНА
		|	И ИНАГРО_Форма34СводнаяРасчетПоВладельцам.Ссылка.Дата МЕЖДУ &ДатаНач И &ДатаКон" + Фильтр+"
		|
		|СГРУППИРОВАТЬ ПО
		|	ИНАГРО_Форма34СводнаяРасчетПоВладельцам.Ссылка.Номенклатура,
		|	ИНАГРО_Форма34СводнаяРасчетПоВладельцам.Владелец,
		|	ИНАГРО_Форма34СводнаяРасчетПоВладельцам.ДоговорКонтрагента,
		|	ИНАГРО_Форма34СводнаяРасчетПоВладельцам.ВидХранения,
		|	ИНАГРО_Форма34СводнаяРасчетПоВладельцам.ПроводилиСушку,
		|	ИНАГРО_Форма34СводнаяРасчетПоВладельцам.Ссылка.Порядок";

	Запрос.УстановитьПараметр("Организация",  Объект.Организация);
	Запрос.УстановитьПараметр("Склад",        Объект.Склад);
	Запрос.УстановитьПараметр("Номенклатура", Объект.Номенклатура);	
	Запрос.УстановитьПараметр("Урожай",       Объект.Урожай);	
	Запрос.УстановитьПараметр("ДатаНач",      НачалоДня(Объект.ДатаНачала));
	Запрос.УстановитьПараметр("ДатаКон",      КонецДня(Объект.ДатаОкончания));	
	
	ВесДоСушки = 0;
	
	ТаблицаЗначений = Запрос.Выполнить().Выгрузить();
	ТаблицаЗначений.Колонки.Добавить("ВесДоСушки");
	
	Для Каждого СтрокаТаблицы Из ТаблицаЗначений Цикл
		Если СтрокаТаблицы.Порядок = Истина Тогда
			СтрокаТаблицы.ВесДоСушки = СтрокаТаблицы.ФизическийВес1;				
			// вначале чистим потом сушим	
		Иначе
			СтрокаТаблицы.ВесДоСушки = СтрокаТаблицы.ФизическийВес1 - СтрокаТаблицы.УбыльОтОчистки;			
		КонецЕсли;
	КонецЦикла;	
	
	ТаблицаЗначений.Свернуть("Номенклатура, Владелец, ДоговорКонтрагента, ВидХранения", "ВесДоСушки");
	
	Для Каждого СтрокаТаблицы Из ТаблицаЗначений Цикл
		
		НоваяСтрока = Объект.РасчетПоВладельцам.Добавить();
		НоваяСтрока.Номенклатура              = СтрокаТаблицы.Номенклатура;
		НоваяСтрока.Владелец                  = СтрокаТаблицы.Владелец;
		НоваяСтрока.ДоговорКонтрагента        = СтрокаТаблицы.ДоговорКонтрагента;
		НоваяСтрока.ВидХранения               = СтрокаТаблицы.ВидХранения;				
		НоваяСтрока.БазисРаспределенияОтходов = СтрокаТаблицы.ВесДоСушки;		
		
	КонецЦикла;
	
	ЗаполнитьСчетаУчетаВТабличнойЧасти();
	
	Модифицированность = Истина;

КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ПодготовитьФормуНаСервере()

	УстановитьФункциональныеОпцииФормы();
	
	ТекущаяДатаДокумента = Объект.Дата;
	
	УстановитьЗаголовкиИДоступностьСубконто(ЭтаФорма, Объект.СчетЗатрат, Истина, "");
                	
	УстановитьЗаголовокФормы(); 	

	УправлениеФормой(ЭтаФорма);
	
	УстановитьСостояниеДокумента();
	
КонецПроцедуры 

&НаСервере
Процедура УстановитьФункциональныеОпцииФормы()

	ОбщегоНазначенияБПКлиентСервер.УстановитьПараметрыФункциональныхОпцийФормыДокумента(ЭтаФорма);	

	ПараметрыУчетаЭлеватора      = ИНАГРО_Элеватор.ПолучитьПараметрыУчетаЭлеватора(Объект.Дата);
	ЛабораторияРаботаетВСистеме  = ПараметрыУчетаЭлеватора.ЛабораторияРаботаетВСистеме;
	ВладелецДляОтходов 	         = ПараметрыУчетаЭлеватора.ВладелецДляОтходов;

	ВидимостьМестаХранения       = ИНАГРО_Элеватор.ПолучитьДополнительныйРеквизитСклада(Объект.Склад, "ВестиУчетПоМестамХранения"); 	

	НеСписыватьОтходыСВладельцев = ИНАГРО_Элеватор.ПолучитьНастройкуНеСписыватьОтходыСВладельцев(Объект);

КонецПроцедуры 

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)

	Элементы = Форма.Элементы;
	Объект   = Форма.Объект;
	
	Элементы.МестоХранения.Видимость = Форма.ВидимостьМестаХранения;

	Элементы.ГруппаСчетЗатратСубконто.Видимость      = Объект.ОтражатьВБухгалтерскомУчете;
	Элементы.РасчетПоВладельцамСчетУчетаБУ.Видимость = Объект.ОтражатьВБухгалтерскомУчете;		
	
	АктРаспределенияСводный = Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ИНАГРО_ВидыОперацийАктРаспределения.Сводный");
	
	Элементы.РасчетПоВладельцамВладелец.Видимость		    = НЕ АктРаспределенияСводный;
	Элементы.РасчетПоВладельцамДоговорКонтрагента.Видимость = НЕ АктРаспределенияСводный;
	Элементы.РасчетПоВладельцамВидХранения.Видимость		= НЕ АктРаспределенияСводный;
	Элементы.РасчетПоВладельцамУрожай.Видимость				= НЕ АктРаспределенияСводный;
	
	Элементы.РасчетПоВладельцамВесПриход.Видимость			= АктРаспределенияСводный;
	Элементы.РасчетПоВладельцамВесРасходАвто.Видимость		= АктРаспределенияСводный;
	Элементы.РасчетПоВладельцамВесРасходЖД.Видимость		= АктРаспределенияСводный;
	Элементы.РасчетПоВладельцамОчищено.Видимость			= АктРаспределенияСводный;
	Элементы.РасчетПоВладельцамОхлаждение.Видимость			= АктРаспределенияСводный;
	Элементы.РасчетПоВладельцамПеремещение.Видимость		= АктРаспределенияСводный;
	Элементы.РасчетПоВладельцамПросушено.Видимость			= АктРаспределенияСводный;
		
КонецПроцедуры

&НаСервере
Процедура УстановитьПараметрыВыбораВидОперации()
	
	МассивВидовОпераций = Документы.ИНАГРО_АктРаспределения.ПолучитьФиксированныйМассивВидовОпераций();
	
	ПараметрМассивВидовОпераций = Новый ПараметрВыбора("Отбор.Ссылка", МассивВидовОпераций);
	
	НовыйМассив = Новый Массив();
	НовыйМассив.Добавить(ПараметрМассивВидовОпераций);
	НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);
	
	Элементы.ВидОперации.ПараметрыВыбора = НовыеПараметры;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗаголовокФормы()
	
	ОбъектФормы = ЭтаФорма.Объект;

	ТекстЗаголовка = НСтр("ru='Акт распределения отходов';uk='Акт розподілу відходів'");
	
	Если ЗначениеЗаполнено(ОбъектФормы.Ссылка) Тогда
		ТекстЗаголовка = ТекстЗаголовка + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru=' %1 от %2';uk=' %1 від %2'"), ОбъектФормы.Номер, ОбъектФормы.Дата);
	Иначе
		ТекстЗаголовка = ТекстЗаголовка + НСтр("ru=' (создание)';uk=' (створення)'");
	КонецЕсли;
	
	ЭтаФорма.Заголовок = ТекстЗаголовка + " (" + Строка(ОбъектФормы.ВидОперации) + ")";

КонецПроцедуры

&НаСервере
Процедура УстановитьСостояниеДокумента()
	
	СостояниеДокумента = ОбщегоНазначенияБП.СостояниеДокумента(Объект);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьЗаголовкиИДоступностьСубконто(Форма, Счет, ЕстьПодразделение, Постфикс = "")

	ПоляФормы = Новый Структура("Субконто1, Субконто2, Субконто3",
		"Субконто" + Постфикс + "1",
		"Субконто" + Постфикс + "2",
		"Субконто" + Постфикс + "3");
		
	Если ЕстьПодразделение Тогда
		ПоляФормы.Вставить("Подразделение", "ПодразделениеЗатрат" + Постфикс);
	КонецЕсли;
	
	ЗаголовкиПолей = Новый Структура("Субконто1, Субконто2, Субконто3",
		"ЗаголовокСубконто" + Постфикс + "1",
		"ЗаголовокСубконто" + Постфикс + "2",
		"ЗаголовокСубконто" + Постфикс + "3");
	
	Если ЕстьПодразделение Тогда
		ЗаголовкиПолей.Вставить("Подразделение", "ЗаголовокПодразделение" + Постфикс);
	КонецЕсли;
	
	БухгалтерскийУчетКлиентСервер.ПриВыбореСчета(Счет, Форма, ПоляФормы, ЗаголовкиПолей);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ИзменитьПараметрыВыбораПолейСубконто(Форма, Суффикс, ИмяСчета)

	ПараметрыДокумента = СписокПараметровВыбораСубконто(Форма, Форма.Объект,
		"Субконто" + Суффикс + "%Индекс%", ИмяСчета);
	
	БухгалтерскийУчетКлиентСервер.ИзменитьПараметрыВыбораПолейСубконто(
		Форма, 
		Форма.Объект, 
		"Субконто" + Суффикс + "%Индекс%", 
		"Субконто" + Суффикс + "%Индекс%", 
		ПараметрыДокумента);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция СписокПараметровВыбораСубконто(Форма, ПараметрыОбъекта, ШаблонИмяПоляОбъекта, ИмяСчета)

	СписокПараметров = Новый Структура;
	Для Индекс = 1 По 3 Цикл
		ИмяПоля = СтрЗаменить(ШаблонИмяПоляОбъекта, "%Индекс%", Индекс);
		Если ТипЗнч(ПараметрыОбъекта[ИмяПоля]) = Тип("СправочникСсылка.Контрагенты") Тогда
			СписокПараметров.Вставить("Контрагент", ПараметрыОбъекта[ИмяПоля]);
		ИначеЕсли ТипЗнч(ПараметрыОбъекта[ИмяПоля]) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
			СписокПараметров.Вставить("ДоговорКонтрагента", ПараметрыОбъекта[ИмяПоля]);
		ИначеЕсли ТипЗнч(ПараметрыОбъекта[ИмяПоля]) = Тип("СправочникСсылка.Номенклатура") Тогда
			СписокПараметров.Вставить("Номенклатура", ПараметрыОбъекта[ИмяПоля]);
		ИначеЕсли ТипЗнч(ПараметрыОбъекта[ИмяПоля]) = Тип("СправочникСсылка.Склады") Тогда
			СписокПараметров.Вставить("Склад", ПараметрыОбъекта[ИмяПоля]);
		КонецЕсли;
	КонецЦикла;
	СписокПараметров.Вставить("Организация", Форма.Объект.Организация);
	СписокПараметров.Вставить("СчетУчета"  , Форма.Объект[ИмяСчета]);
	
	Возврат СписокПараметров;

КонецФункции

&НаСервере
Процедура ЗаполнитьСчетаУчетаВТабличнойЧасти()
	
	Если Объект.РасчетПоВладельцам.Количество() > 0 Тогда
		Документы.ИНАГРО_АктРаспределения.ЗаполнитьСчетаУчетаВТабличнойЧасти(Объект, "РасчетПоВладельцам");
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Функция ПолучитьПараметрыДляДоговоров(ДанныеСтрокиТаблицы)

	ПараметрыОтбора = Новый Структура("ВидХранения, Урожай");
	ЗаполнитьЗначенияСвойств(ПараметрыОтбора, ДанныеСтрокиТаблицы);

	Возврат ПараметрыОтбора;

КонецФункции

&НаКлиенте
Функция ПолучитьПараметрыДляПроверкиЗаполнения()
	
	ПараметрыДляПроверкиЗаполнения = Новый Структура(
		"Склад, ВидХранения, Урожай, 
		|");
	ЗаполнитьЗначенияСвойств(ПараметрыДляПроверкиЗаполнения, Объект);
	ПараметрыДляПроверкиЗаполнения.Вставить("Номенклатура", Объект.Отходы);
	
	Возврат ПараметрыДляПроверкиЗаполнения; 

КонецФункции

&НаСервере
Функция СформироватьФильтр()
	
	Фильтр = "";
	Фильтр = Фильтр + ?(ЗначениеЗаполнено(Объект.Организация),  " Организация = &Организация ", "");
	Фильтр = Фильтр + ?(ЗначениеЗаполнено(Объект.Склад),        " И Склад = &Склад ", "");
	Фильтр = Фильтр + ?(ЗначениеЗаполнено(Объект.Урожай),       " И Урожай = &Урожай ", "");
	Фильтр = Фильтр + ?(ЗначениеЗаполнено(Объект.Номенклатура), " И Номенклатура = &Номенклатура ", "");
	
	Возврат Фильтр;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункцииБСП

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти