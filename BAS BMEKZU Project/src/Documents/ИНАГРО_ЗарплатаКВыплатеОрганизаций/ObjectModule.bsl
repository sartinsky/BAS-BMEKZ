#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

// Процедура - обработчик события "ПередЗаписью"
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ИНАГРО_ПроведениеРасчетов.СформироватьКраткийСоставСотрудников(ЭтотОбъект, "РаботникиОрганизации");
	
КонецПроцедуры

// Процедура - обработчик события "ОбработкаПроведения"
//
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКПроведению(ЭтотОбъект);
	Заголовок = ОбщегоНазначенияБПВызовСервера.ПредставлениеДокументаПриПроведении(Ссылка);
	
 	Сотрудники = РаботникиОрганизации.ВыгрузитьКолонку("Сотрудник");

	Если ВидВыплаты = Справочники.ВидыВыплат.Очередная 
		ИЛИ	ВидВыплаты = Справочники.ВидыВыплат.ОчереднаяПогашениеДолгов
		ИЛИ ВидВыплаты = Справочники.ВидыВыплат.Дивиденды Тогда
		
		////////////////////////////////////////////////////////////////////////
		// РаботникиОрганизации
		Выборка = СформироватьЗапросПоРаботникиОрганизации().Выбрать();
		Пока Выборка.Следующий() Цикл 
			ПроверитьЗаполнениеСтрокиРаботникиОрганизации(Выборка, Отказ, Заголовок);
		КонецЦикла;
		
		////////////////////////////////////////////////////////////////////////
		// ПараметрыОплаты
		Выборка = СформироватьЗапросПоПараметрыОплаты().Выбрать();
		Пока Выборка.Следующий() Цикл 
			ПроверитьЗаполнениеСтрокиПараметрыОплаты(Выборка, Отказ, Заголовок);
		КонецЦикла;
		
		////////////////////////////////////////////////////////////////////////
		// Исчисленный НДФЛ
		Выборка = СформироватьЗапросПоНДФЛ(Сотрудники ).Выбрать();
		Пока Выборка.Следующий() Цикл 
			ПроверитьЗаполнениеСтрокиНДФЛ(Выборка, Отказ, Заголовок);
		КонецЦикла;
		
	ИначеЕсли ВидВыплаты = Справочники.ВидыВыплат.ОчереднаяВзносы 
		ИЛИ	ВидВыплаты = Справочники.ВидыВыплат.ОчереднаяПогашениеДолговВзносы Тогда
		
		////////////////////////////////////////////////////////////////////////
		// Взносы
		Выборка = СформироватьЗапросПоВзносы(,Сотрудники).Выбрать();
		Пока Выборка.Следующий() Цикл 
			ПроверитьЗаполнениеСтрокиВзносы(Выборка, Отказ, Заголовок);
		КонецЦикла;
		
		////////////////////////////////////////////////////////////////////////
		// Взносы ФОТ
		Выборка = СформироватьЗапросПоВзносы("ВзносыФОТ", Сотрудники).Выбрать();
		Пока Выборка.Следующий() Цикл 
			ПроверитьЗаполнениеСтрокиВзносы(Выборка, Отказ, Заголовок);
		КонецЦикла;
		
	ИначеЕсли ВидВыплаты = Справочники.ВидыВыплат.Аванс
	ИЛИ ВидВыплаты = Справочники.ВидыВыплат.АвансПредварительныйРасчет
	ИЛИ ВидВыплаты = Справочники.ВидыВыплат.Отпуск
	ИЛИ	Не ВидВыплаты.Предопределенный Тогда
		
		////////////////////////////////////////////////////////////////////////
		// РаботникиОрганизации
		Выборка = СформироватьЗапросПоРаботникиОрганизации().Выбрать();
		Пока Выборка.Следующий() Цикл 
			ПроверитьЗаполнениеСтрокиРаботникиОрганизации(Выборка, Отказ, Заголовок);
		КонецЦикла;
		
		////////////////////////////////////////////////////////////////////////
		// ПараметрыОплаты
		Выборка = СформироватьЗапросПоПараметрыОплаты().Выбрать();
		Пока Выборка.Следующий() Цикл 
			ПроверитьЗаполнениеСтрокиПараметрыОплаты(Выборка, Отказ, Заголовок);
		КонецЦикла;
		
		////////////////////////////////////////////////////////////////////////
		// Взносы
		Выборка = СформироватьЗапросПоВзносы(,Сотрудники).Выбрать();
		Пока Выборка.Следующий() Цикл 
			ПроверитьЗаполнениеСтрокиВзносы(Выборка, Отказ, Заголовок);
		КонецЦикла;
		
		////////////////////////////////////////////////////////////////////////
		// Взносы ФОТ
		Выборка = СформироватьЗапросПоВзносы("ВзносыФОТ",Сотрудники).Выбрать();
		Пока Выборка.Следующий() Цикл 
			ПроверитьЗаполнениеСтрокиВзносы(Выборка, Отказ, Заголовок);
		КонецЦикла;
		
		////////////////////////////////////////////////////////////////////////
		// Исчисленный НДФЛ
		Выборка = СформироватьЗапросПоНДФЛ(Сотрудники ).Выбрать();
		Пока Выборка.Следующий() Цикл 
			ПроверитьЗаполнениеСтрокиНДФЛ(Выборка, Отказ, Заголовок);
		КонецЦикла;
		
	ИначеЕсли ВидВыплаты = Справочники.ВидыВыплат.Депоненты Тогда
		
		////////////////////////////////////////////////////////////////////////
		// РаботникиОрганизации
		Выборка = СформироватьЗапросПоРаботникиОрганизации().Выбрать();
		Пока Выборка.Следующий() Цикл 
			ПроверитьЗаполнениеСтрокиРаботникиОрганизации(Выборка, Отказ, Заголовок);
		КонецЦикла;
		
		////////////////////////////////////////////////////////////////////////
		// ПараметрыОплаты
		Выборка = СформироватьЗапросПоПараметрыОплаты().Выбрать();
		Пока Выборка.Следующий() Цикл 
			ПроверитьЗаполнениеСтрокиПараметрыОплатыДепоненты(Выборка, Отказ, Заголовок);
		КонецЦикла;
		
	ИначеЕсли ВидВыплаты = Справочники.ВидыВыплат.ЗакрытиеПериода Тогда
		
		////////////////////////////////////////////////////////////////////////
		// ПараметрыОплаты
		Выборка = СформироватьЗапросПоПараметрыОплаты().Выбрать();
		Пока Выборка.Следующий() Цикл 
			ПроверитьЗаполнениеСтрокиПараметрыОплаты(Выборка, Отказ, Заголовок);
		КонецЦикла;
		
		////////////////////////////////////////////////////////////////////////
		// Взносы
		Выборка = СформироватьЗапросПоВзносы("Взносы").Выбрать();
		Пока Выборка.Следующий() Цикл 
			ПроверитьЗаполнениеСтрокиВзносы(Выборка, Отказ, Заголовок);
		КонецЦикла;
		
		////////////////////////////////////////////////////////////////////////
		// Взносы ФОТ
		Выборка = СформироватьЗапросПоВзносы("ВзносыФОТ").Выбрать();
		Пока Выборка.Следующий() Цикл 
			ПроверитьЗаполнениеСтрокиВзносы(Выборка, Отказ, Заголовок);
		КонецЦикла;
		
		////////////////////////////////////////////////////////////////////////
		// Исчисленный НДФЛ
		Выборка = СформироватьЗапросПоНДФЛ( ).Выбрать();
		Пока Выборка.Следующий() Цикл 
			ПроверитьЗаполнениеСтрокиНДФЛ(Выборка, Отказ, Заголовок);
		КонецЦикла;
		
	КонецЕсли; 
	//////////////////////////////////////////////////////////////////////
	// Проводки, если нужны
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если ВидВыплаты = Справочники.ВидыВыплат.Очередная 
	ИЛИ	ВидВыплаты = Справочники.ВидыВыплат.ОчереднаяПогашениеДолгов
	ИЛИ ВидВыплаты = Справочники.ВидыВыплат.Дивиденды 
	ИЛИ ВидВыплаты = Справочники.ВидыВыплат.Аванс
	ИЛИ ВидВыплаты = Справочники.ВидыВыплат.АвансПредварительныйРасчет	
	ИЛИ	Не ВидВыплаты.Предопределенный Тогда
	
		// НДФЛ без налога
		Выборка = СформироватьЗапросПоНДФЛ(Сотрудники).Выбрать();
		Пока Выборка.Следующий() Цикл 
			ДобавитьСтрокуНДФЛБезНалога(Выборка, Движения.ВзаиморасчетыПоНДФЛ);
		КонецЦикла;
		
	КонецЕсли; 
	
	Если ВидВыплаты = Справочники.ВидыВыплат.ЗакрытиеПериода Тогда
		
		////////////////////////////////////////////////////////////////////////
		// Взаиморасчеты
		Выборка = СформироватьЗапросВзаиморасчеты().Выбрать();
		Пока Выборка.Следующий() Цикл 
			ДобавитьСтрокуВзаиморасчетыСРаботникамиОрганизаций(Выборка);
		КонецЦикла;
		
		////////////////////////////////////////////////////////////////////////
		// Взносы
		ВыборкаПоВзносы = СформироватьЗапросПоВзносы("Взносы").Выбрать();
		Пока ВыборкаПоВзносы.Следующий() Цикл 
			ДобавитьСтрокуВзаиморасчетыВзносы(ВыборкаПоВзносы, Движения.ВзаиморасчетыПоВзносамВФонды);
		КонецЦикла;
		
		////////////////////////////////////////////////////////////////////////
		// Взносы ФОТ
		ВыборкаПоВзносыФОТ = СформироватьЗапросПоВзносы("ВзносыФОТ").Выбрать();
		Пока ВыборкаПоВзносыФОТ.Следующий() Цикл 
			ДобавитьСтрокуВзаиморасчетыВзносы(ВыборкаПоВзносыФОТ, Движения.ВзаиморасчетыПоВзносамВФонды);
		КонецЦикла;
		
		////////////////////////////////////////////////////////////////////////
		// исчисленный НДФЛ
		ВыборкаПоНДФЛ = СформироватьЗапросПоНДФЛ( ).Выбрать();
		Пока ВыборкаПоНДФЛ.Следующий() Цикл 
			ДобавитьСтрокуНДФЛ(ВыборкаПоНДФЛ, Движения.ВзаиморасчетыПоНДФЛ);
		КонецЦикла;
		
	ИначеЕсли ВидВыплаты <> Справочники.ВидыВыплат.Депоненты Тогда
		
		////////////////////////////////////////////////////////////////////////
		// Проводки
		ПроводкиБУ = Движения.Хозрасчетный;
		Выборка = СформироватьЗапросВзаиморасчетыДепоненты().Выбрать();
		СчетКт = ПланыСчетов.Хозрасчетный.РасчетыПоДепонентам;
		СпособОплаты = Перечисления.СпособыВыплатыЗарплаты.ЧерезКассу;
		ВыплаченностьЗарплаты = Перечисления.ВыплаченностьЗарплаты.Задепонировано;
		ИНАГРО_ПроведениеРасчетов.ВыполнитьДвиженияПоЗарплате(Ссылка, Движения, ПроводкиБУ, СчетКт, СпособОплаты, ВыплаченностьЗарплаты );
		
	КонецЕсли;
	
	Движения.Хозрасчетный.ВыполнитьДействияПередЗаписьюДвижений();
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКЗаписиДвижений(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область Проведение

Функция СформироватьЗапросПоОсновнымНачислениям(Сотрудники)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументСсылка", 		Ссылка);
	Запрос.УстановитьПараметр("парамПериодРегистрации", ПериодРегистрации);
 	Запрос.УстановитьПараметр("парамСотрудники", 		Сотрудники);
	
	Если ЗначениеЗаполнено(ВидВыплаты.ИНАГРО_ВидРасчета) Тогда
		Запрос.УстановитьПараметр("парамВидРасчета", ВидВыплаты.ИНАГРО_ВидРасчета);
		ТекстВР = "&парамВидРасчета";
	Иначе
		ТекстВР = "ЕстьNULL(ПлановыеНачисления.ВидРасчета,ЗНАЧЕНИЕ(ПланВидовРасчета.ИНАГРО_Начисления.ОкладПоДням))";
	КонецЕсли;	
	
	Запрос.Текст =
	"ВЫБРАТЬ
	// Свойства
	|	СтрокиНачисления.НомерСтроки				КАК НомерСтроки,
	|	СтрокиНачисления.Ссылка.ПериодРегистрации	КАК ПериодРегистрации,
	|	СтрокиНачисления.Ссылка.ПериодРегистрации						КАК ПериодДействияНачало,
	|	КОНЕЦПЕРИОДА(СтрокиНачисления.Ссылка.ПериодРегистрации, МЕСЯЦ)	КАК ПериодДействияКонец,
	|	СтрокиНачисления.Ссылка.ПериодРегистрации						КАК БазовыйПериодНачало,
	|	КОНЕЦПЕРИОДА(СтрокиНачисления.Ссылка.ПериодРегистрации, МЕСЯЦ)	КАК БазовыйПериодКонец,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВЫБОР
	|		КОГДА СтрокиНачисления.Сотрудник.ИНАГРО_ДоговорПодряда
	|			ТОГДА ЗНАЧЕНИЕ(ПланВидовРасчета.ИНАГРО_Начисления.ОплатаПоДоговоруГПХ)
	|		ИНАЧЕ "+ТекстВР+"
	|	КОНЕЦ) КАК ВидРасчета,
	|	ЛОЖЬ КАК Сторно,
	|
	// Измерения
	|	СтрокиНачисления.Ссылка.Организация	КАК Организация,
	|	СтрокиНачисления.Сотрудник			КАК Сотрудник,
	|	СтрокиНачисления.Сотрудник			КАК Назначение,
	|
	// Ресурсы
	|	СтрокиНачисления.СуммаГрязными КАК Результат
	|
	// Реквизиты  - нет
	|
	// Специализированные параметры для регистра Взаиморасчеты с работников организации и др.
	|ИЗ Документ."+Ссылка.Метаданные().Имя+".РаботникиОрганизации КАК СтрокиНачисления
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИНАГРО_ПлановыеНачисленияРаботниковОрганизаций.СрезПоследних(&парамПериодРегистрации) КАК ПлановыеНачисления
	|ПО		ПлановыеНачисления.Сотрудник = СтрокиНачисления.Сотрудник
	| И		ПлановыеНачисления.ВидНачисления = Значение (Перечисление.ИНАГРО_ВидыНачисленийРаботникаОрганизации.Основное)
	|
	|ГДЕ		СтрокиНачисления.Ссылка = &ДокументСсылка
	|   	И	СтрокиНачисления.Сотрудник В (&парамСотрудники)
	
	|СГРУППИРОВАТЬ ПО
	|	СтрокиНачисления.Ссылка.Организация,
	|	СтрокиНачисления.Ссылка.ПериодРегистрации,
	|	СтрокиНачисления.Сотрудник,
	|	СтрокиНачисления.НомерСтроки,
	|	СтрокиНачисления.Ссылка.ПериодРегистрации,
	|	СтрокиНачисления.Ссылка.ПериодРегистрации,
	|	СтрокиНачисления.Сотрудник,
	|	СтрокиНачисления.СуммаГрязными
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|";

	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоНачисления()

Функция СформироватьЗапросПоНачисления( Сотрудники )

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументСсылка", Ссылка);
	Запрос.УстановитьПараметр("парамПериодРегистрации", ПериодРегистрации);
 	Запрос.УстановитьПараметр("парамСотрудники", Сотрудники);
	Если ЗначениеЗаполнено(ВидВыплаты.ИНАГРО_ВидРасчета) Тогда
		Запрос.УстановитьПараметр("парамВидРасчета", ВидВыплаты.ИНАГРО_ВидРасчета);
		ТекстВР = "&парамВидРасчета";
	Иначе
		ТекстВР = "ЕстьNULL(ПлановыеНачисления.ВидРасчета,ЗНАЧЕНИЕ(ПланВидовРасчета.ИНАГРО_Начисления.ОкладПоДням))";
	КонецЕсли;	
	
	Запрос.Текст =
	"ВЫБРАТЬ
	// Свойства
	|	СтрокиНачисления.НомерСтроки				КАК НомерСтроки,
	|	СтрокиНачисления.Ссылка.ПериодРегистрации	КАК ПериодРегистрации,
	|	СтрокиНачисления.Ссылка.ПериодРегистрации						КАК ПериодДействияНачало,
	|	КОНЕЦПЕРИОДА(СтрокиНачисления.Ссылка.ПериодРегистрации, МЕСЯЦ)	КАК ПериодДействияКонец,
	|	СтрокиНачисления.Ссылка.ПериодРегистрации						КАК БазовыйПериодНачало,
	|	КОНЕЦПЕРИОДА(СтрокиНачисления.Ссылка.ПериодРегистрации, МЕСЯЦ)	КАК БазовыйПериодКонец,
	|	ВЫБОР
	|    КОГДА СтрокиНачисления.Сотрудник.ИНАГРО_ДоговорПодряда 
	|    ТОГДА ЗНАЧЕНИЕ(ПланВидовРасчета.ИНАГРО_Начисления.ОплатаПоДоговоруГПХ)
	|	 ИНАЧЕ "+ТекстВР+" 
	|	КОНЕЦ КАК ВидРасчета,
	|	ЛОЖЬ КАК Сторно,
	|
	// Измерения
	|	СтрокиНачисления.Ссылка.Организация	КАК Организация,
	|	СтрокиНачисления.Сотрудник			КАК Сотрудник,
	|	СтрокиНачисления.Сотрудник			КАК Назначение,
	|
	// Ресурсы
	|	СтрокиНачисления.СуммаГрязными КАК Результат
	|
	// Реквизиты  - нет
	|
	// Специализированные параметры для регистра Взаиморасчеты с работников организации и др.
	|ИЗ Документ."+Ссылка.Метаданные().Имя+".РаботникиОрганизации КАК СтрокиНачисления
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИНАГРО_ПлановыеНачисленияРаботниковОрганизаций.СрезПоследних(&парамПериодРегистрации) КАК ПлановыеНачисления
	|ПО		ПлановыеНачисления.Сотрудник = СтрокиНачисления.Сотрудник
	| И		ПлановыеНачисления.ВидНачисления = Значение (Перечисление.ИНАГРО_ВидыНачисленийРаботникаОрганизации.Основное)
	|
	|ГДЕ		СтрокиНачисления.Ссылка = &ДокументСсылка
	|   	И	СтрокиНачисления.Сотрудник В (&парамСотрудники)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|";

	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоНачисления()

Функция СформироватьЗапросВзаиморасчеты()

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументСсылка", Ссылка);

	Запрос.Текст =
	"ВЫБРАТЬ
	// Свойства
	|	Основной.Ссылка.ПериодРегистрации	КАК Период,
	|	Основной.ПериодВзаиморасчетов		КАК ПериодВзаиморасчетов,
	|
	// Измерения
	|	Основной.Ссылка.Организация	КАК Организация,
	|	Основной.Сотрудник			КАК Сотрудник,
	|	Основной.Сотрудник.ФизическоеЛицо КАК ФизическоеЛицо,
	|	Основной.СчетУчета			КАК СчетУчета,
	|	ЗНАЧЕНИЕ(Перечисление.КодыОперацийВзаиморасчетыСРаботникамиОрганизаций.ПереносКопеекНаСледующийМесяц)	КАК КодОперации,
	|
	// Ресурсы
	|	Основной.Выплата КАК СуммаВзаиморасчетов,
	|	Основной.Копейки КАК СуммаОкругления	
	|
	|ИЗ Документ."+Ссылка.Метаданные().Имя+".Зарплата КАК Основной
	|
	|ГДЕ		Основной.Ссылка = &ДокументСсылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|";

	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросВзаиморасчеты()

Функция СформироватьЗапросПоРаботникиОрганизации()

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументСсылка", Ссылка);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	Основной.НомерСтроки,
	|	Основной.Сотрудник,
	|	Основной.Сумма,
	|	Основной.СуммаОкругления,
	|	Основной.ВыплаченностьЗарплаты,
	|	Основной.СпособВыплаты,
	|	Основной.Банк,
	|	Основной.НомерКарточки
	|ИЗ Документ."+Ссылка.Метаданные().Имя+".РаботникиОрганизации КАК Основной
	|ГДЕ		Основной.Ссылка = &ДокументСсылка
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|";

	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоРаботникиОрганизации()

Функция СформироватьЗапросПоПараметрыОплаты()

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументСсылка", Ссылка);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	Основной.НомерСтроки,
	|	Основной.Сотрудник,
	|	Основной.ПериодВзаиморасчетов,
	|	Основной.СчетУчета,
	|	Основной.Копейки,
	|	Основной.Ведомость
	|ИЗ Документ."+Ссылка.Метаданные().Имя+".Зарплата КАК Основной
	|ГДЕ		Основной.Ссылка = &ДокументСсылка
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|";

	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоПараметрыОплаты()

Функция СформироватьЗапросВзаиморасчетыДепоненты()

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументСсылка", Ссылка);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	Основной.НомерСтроки	КАК НомерСтроки,
	|	Основной.Ссылка.ПериодРегистрации	КАК Период,
	|	Основной.ПериодВзаиморасчетов		КАК ПериодВзаиморасчетов,
	|	Основной.Ссылка.Организация	КАК Организация,
	|	Основной.Сотрудник			КАК Сотрудник,
	|	Основной.СчетУчета			КАК СчетУчета,
	|	ЗНАЧЕНИЕ(Перечисление.КодыОперацийВзаиморасчетыСРаботникамиОрганизаций.Выплата)	КАК КодОперации,
	|	Основной.Начислено КАК СуммаВзаиморасчетов,
	|	Основной.Копейки КАК СуммаОкругления
	|
	|ИЗ Документ."+Ссылка.Метаданные().Имя+".Зарплата КАК Основной
	|ЛЕВОЕ СОЕДИНЕНИЕ Документ."+Ссылка.Метаданные().Имя+".РаботникиОрганизации КАК Работники
	|ПО Работники.Сотрудник = Основной.Сотрудник
	| И Работники.Ссылка = Основной.Ссылка
	|
	|ГДЕ	Основной.Ссылка = &ДокументСсылка
	|	И	Работники.ВыплаченностьЗарплаты = ЗНАЧЕНИЕ(Перечисление.ВыплаченностьЗарплаты.Задепонировано)
	|";

	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоНачисления()

Функция СформироватьЗапросПоВзносы(ИмяТаблицы = "Взносы" ,Сотрудники = Неопределено)

	Запрос = Новый Запрос;
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка",	Ссылка);
	УсловиеНаФизлицоТекст="";
	Если Сотрудники <> Неопределено Тогда
		Запрос.УстановитьПараметр("парамСотрудники", Сотрудники);
		УсловиеНаФизлицоТекст = Символы.ПС + " И СтрокиВзносы.Сотрудник В (&парамСотрудники) ";	
	КонецЕсли;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СтрокиВзносы.Ссылка.Организация			КАК Организация,
	|	СтрокиВзносы.Ссылка.ПериодРегистрации	КАК ПериодРегистрации,
	|	СтрокиВзносы.Сотрудник,
	|	СтрокиВзносы.ВидРасчета,
	|	СтрокиВзносы.НомерСтроки			КАК НомерСтроки,
	|	СтрокиВзносы.НомерСтроки			КАК НомерСтрокиТЧ,
	|	СтрокиВзносы.ПериодВзаиморасчетов,
	|	СтрокиВзносы.БазовыйПериодНачало	КАК БазовыйПериодНачало,
	|	СтрокиВзносы.БазовыйПериодКонец		КАК БазовыйПериодКонец,
	|	СтрокиВзносы.ДатаНачала				КАК ДатаНачала,
	|	СтрокиВзносы.ДатаОкончания			КАК ДатаОкончания,
	|	СтрокиВзносы.Предел,
	|	СтрокиВзносы.Налог,
	|	СтрокиВзносы.СтатьяНалоговойДекларации,
	|	СтрокиВзносы.Ставка,
	|	СтрокиВзносы.НомерПорога,
	|	СтрокиВзносы.База,
	|	СтрокиВзносы.БазаВзноса,
	|	СтрокиВзносы.Результат,
	|	СтрокиВзносы.НеподтвержденнаяСумма,
	|	СтрокиВзносы.Сторно,
	|	СтрокиВзносы.ВидРасчета.СпособРасчета КАК СпособРасчета,
	|	ИСТИНА КАК Авторасчет
	|ИЗ
	|	Документ."+Ссылка.Метаданные().Имя+"."+ИмяТаблицы+" КАК СтрокиВзносы
	|ГДЕ
	|	СтрокиВзносы.Ссылка = &ДокументСсылка " + УсловиеНаФизлицоТекст + "
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоВзносы()

Функция СформироватьЗапросПоНДФЛ(Сотрудники = Неопределено)

	Запрос = Новый Запрос;
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка", Ссылка);
	Если НЕ (Сотрудники = Неопределено) Тогда
		Запрос.УстановитьПараметр("парамСотрудники", Сотрудники);
		УсловиеНаФизлицоТекст = " И СтрокиНДФЛ.Сотрудник В (&парамСотрудники) ";	
	Иначе
		УсловиеНаФизлицоТекст="";
	КонецЕсли;

	Запрос.Текст = "
	|ВЫБРАТЬ
	|	СтрокиНДФЛ.Ссылка.Организация КАК Организация,
	|	КОНЕЦПЕРИОДА(СтрокиНДФЛ.Ссылка.ПериодРегистрации, МЕСЯЦ)	КАК Период,
	|	СтрокиНДФЛ.НомерСтроки,
	|	СтрокиНДФЛ.Сотрудник,
	|	СтрокиНДФЛ.Сотрудник КАК Контрагент,
	|	СтрокиНДФЛ.ПериодВзаиморасчетов,
	|	СтрокиНДФЛ.ВидСтавки,
	|	СтрокиНДФЛ.УвеличеннаяСтавка,
	|	СтрокиНДФЛ.ДоходНДФЛ,
	|	СтрокиНДФЛ.НалоговыйПериод,
	|	СтрокиНДФЛ.Льгота,
	|	СтрокиНДФЛ.НеподтвержденнаяСумма,
	|	СтрокиНДФЛ.Налог,
	|	СтрокиНДФЛ.Доход,
	|	СтрокиНДФЛ.КоличествоЛьгот,
	|	ИСТИНА КАК Авторасчет
	|ИЗ
	|	Документ."+Ссылка.Метаданные().Имя+".НДФЛ КАК СтрокиНДФЛ
	|ГДЕ
	|	СтрокиНДФЛ.Ссылка = &ДокументСсылка" + УсловиеНаФизлицоТекст + "
	|
	|УПОРЯДОЧИТЬ ПО
	|	Сотрудник,
	|	НалоговыйПериод";
	
	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоНДФЛ()

Процедура ПроверитьОсновныеНачисленияПоСотруднику(ВыборкаПоСтрокамДокумента, Отказ, Заголовок = "")

	СтрокаНачалаСообщенияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='В строке номер ""%1"" табл. части ""Начисления"": ';uk='У рядку номер ""%1"" табл. частини ""Нарахування"": '"), СокрЛП(ВыборкаПоСтрокамДокумента.НомерСтроки));
	
	// ВидРасчета
    Если ВыборкаПоСтрокамДокумента.ВидРасчета > 1 Тогда
    	ОбщегоНазначенияБПКлиентСервер.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + НСтр("ru='у сотрудника несколько основных начислений!';uk='у працівника декілька основних нарахувань!'"), Отказ, Заголовок);
    КонецЕсли;

	// Дата начала
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ПериодДействияНачало) Тогда
		ОбщегоНазначенияБПКлиентСервер.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + НСтр("ru='не указана дата начала начисления!';uk='не зазначена дата початку нарахування!'"), Отказ, Заголовок);
	КонецЕсли;

	// Дата окончания
	Если Не ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ПериодДействияКонец) Тогда
		ОбщегоНазначенияБПКлиентСервер.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + НСтр("ru='не указана дата окончания начисления!';uk='не зазначена дата закінчення нарахування!'"), Отказ, Заголовок);
	КонецЕсли;
	

	// Дата начала
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.БазовыйПериодНачало) Тогда
		ОбщегоНазначенияБПКлиентСервер.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + НСтр("ru='не указана дата начала базового периода!';uk='не зазначена дата початку базового періоду!'"), Отказ, Заголовок);
	КонецЕсли;

	// Дата окончания
	Если Не ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.БазовыйПериодКонец) Тогда
		ОбщегоНазначенияБПКлиентСервер.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + НСтр("ru='не указана дата окончания базового периода начисления!';uk='не зазначена дата закінчення базового періоду нарахування!'"), Отказ);
	КонецЕсли;

КонецПроцедуры // ПроверитьЗаполнениеСтрокиНачисления()

Процедура ПроверитьЗаполнениеСтрокиНачисления(ВыборкаПоСтрокамДокумента, Отказ, Заголовок = "")

	СтрокаНачалаСообщенияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='В строке номер ""%1"" табл. части ""Начисления"": ';uk='У рядку номер ""%1"" табл. частини ""Нарахування"": '"), СокрЛП(ВыборкаПоСтрокамДокумента.НомерСтроки));
	
	// Сотрудник
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.Сотрудник) Тогда
		ОбщегоНазначенияБПКлиентСервер.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + НСтр("ru='не выбран сотрудник!';uk='не обраний співробітник!'"), Отказ, Заголовок);
	КонецЕсли;

	// Дата начала
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ПериодДействияНачало) Тогда
		ОбщегоНазначенияБПКлиентСервер.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + НСтр("ru='не указана дата начала начисления!';uk='не зазначена дата початку нарахування!'"), Отказ, Заголовок);
	КонецЕсли;

	// Дата окончания
	Если Не ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ПериодДействияКонец) Тогда
		ОбщегоНазначенияБПКлиентСервер.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + НСтр("ru='не указана дата окончания начисления!';uk='не зазначена дата закінчення нарахування!'"), Отказ, Заголовок);
	КонецЕсли;
	

	// Дата начала
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.БазовыйПериодНачало) Тогда
		ОбщегоНазначенияБПКлиентСервер.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + НСтр("ru='не указана дата начала базового периода!';uk='не зазначена дата початку базового періоду!'"), Отказ, Заголовок);
	КонецЕсли;

	// Дата окончания
	Если Не ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.БазовыйПериодКонец) Тогда
		ОбщегоНазначенияБПКлиентСервер.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + НСтр("ru='не указана дата окончания базового периода начисления!';uk='не зазначена дата закінчення базового періоду нарахування!'"), Отказ);
	КонецЕсли;

КонецПроцедуры // ПроверитьЗаполнениеСтрокиНачисления()

Процедура ПроверитьЗаполнениеСтрокиРаботникиОрганизации(ВыборкаПоСтрокамДокумента, Отказ, Заголовок = "")

	СтрокаНачалаСообщенияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='В строке номер ""%1"" табл. части ""Работники"": ';uk='У рядку номер ""%1"" табл. частини ""Працівники"": '"), СокрЛП(ВыборкаПоСтрокамДокумента.НомерСтроки));
	
	Если ВыборкаПоСтрокамДокумента.СпособВыплаты = Перечисления.СпособыВыплатыЗарплаты.ЧерезКассу Тогда
		
		// Выплаченность зарплаты
		Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ВыплаченностьЗарплаты) Тогда
			ОбщегоНазначенияБПКлиентСервер.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + НСтр("ru='не определена выплаченность зарплаты!';uk='не визначена виплаченість зарплати!'"), Отказ, Заголовок);
		КонецЕсли;
		
	ИначеЕсли ВыборкаПоСтрокамДокумента.СпособВыплаты = Перечисления.СпособыВыплатыЗарплаты.ЧерезБанк Тогда
		
		// Банк
		Если Не ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.Банк) Тогда
			ОбщегоНазначенияБПКлиентСервер.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + НСтр("ru='не указан банк!';uk='не вказано банк!'"), Отказ, Заголовок);
		КонецЕсли;
		
		
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаполнениеСтрокиРаботникиОрганизации()

Процедура ПроверитьЗаполнениеСтрокиПараметрыОплаты(ВыборкаПоСтрокамДокумента, Отказ, Заголовок = "")

	СтрокаНачалаСообщенияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='В строке номер ""%1"" табл. части ""Параметры оплаты"": ';uk='У рядку номер ""%1"" табл. частини ""Параметри оплати"": '"), СокрЛП(ВыборкаПоСтрокамДокумента.НомерСтроки));
	
	// Сотрудник
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.Сотрудник) Тогда
		ОбщегоНазначенияБПКлиентСервер.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + НСтр("ru='не выбран сотрудник!';uk='не обраний співробітник!'"), Отказ, Заголовок);
	КонецЕсли;
	
	// Период взаиморасчетов
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ПериодВзаиморасчетов) Тогда
		ОбщегоНазначенияБПКлиентСервер.СообщитьОбОшибке(НСтр("ru='не заполнен период взаиморасчетов.';uk='не заповнений період взаєморозрахунків.'"),Отказ,Заголовок);
	КонецЕсли;

	// Счет учета
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.СчетУчета) Тогда
		ОбщегоНазначенияБПКлиентСервер.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + НСтр("ru='не заполнен счет учета!';uk='не заповнений рахунок обліку!'"), Отказ, Заголовок);
	КонецЕсли;

КонецПроцедуры // ПроверитьЗаполнениеСтрокиПараметрыОплаты()

Процедура ПроверитьЗаполнениеСтрокиПараметрыОплатыДепоненты(ВыборкаПоСтрокамДокумента, Отказ, Заголовок = "")

	СтрокаНачалаСообщенияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='В строке номер ""%1"" табл. части ""Параметры оплаты"": ';uk='У рядку номер ""%1"" табл. частини ""Параметри оплати"": '"), СокрЛП(ВыборкаПоСтрокамДокумента.НомерСтроки));
	
	// Сотрудник
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.Сотрудник) Тогда
		ОбщегоНазначенияБПКлиентСервер.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + НСтр("ru='не выбран сотрудник!';uk='не обраний співробітник!'"), Отказ, Заголовок);
	КонецЕсли;
	
	// Ведомость
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.Ведомость) Тогда
		ОбщегоНазначенияБПКлиентСервер.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + НСтр("ru='не заполнена ведомость, по которой происходит погашение депонента!';uk='не заповнена відомість, по якій відбувається погашення депонента!'"), Отказ, Заголовок);
	КонецЕсли;

	// Счет учета
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.СчетУчета) Тогда
		ОбщегоНазначенияБПКлиентСервер.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + НСтр("ru='не заполнен счет учета!';uk='не заповнений рахунок обліку!'"), Отказ, Заголовок);
	КонецЕсли;

КонецПроцедуры // ПроверитьЗаполнениеСтрокиПараметрыОплаты()

Процедура ПроверитьЗаполнениеСтрокиВзносы(ВыборкаПоСтрокамДокумента, Отказ, Заголовок = "")
	Если ВидВыплаты <> Справочники.ВидыВыплат.Аванс
		И ВидВыплаты <> Справочники.ВидыВыплат.АвансПредварительныйРасчет
		И ВидВыплаты <> Справочники.ВидыВыплат.Отпуск И ВидВыплаты.Предопределенный Тогда
		
	СтрокаНачалаСообщенияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='В строке номер ""%1"" табл. части ""Взносы"": ';uk='У рядку номер ""%1"" табл. частини ""Внески"": '"), СокрЛП(ВыборкаПоСтрокамДокумента.НомерСтроки));
	
		Если ВидВыплаты <> Справочники.ВидыВыплат.ЗакрытиеПериода Тогда
			
			// Сотрудник
			Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.Сотрудник) Тогда
				ОбщегоНазначенияБПКлиентСервер.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + НСтр("ru='не выбрано физическое лицо!';uk='не обрана фізична особа!'"), Отказ, Заголовок);
			КонецЕсли;
			
			// Период взаиморасчетов
			Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ПериодВзаиморасчетов) Тогда
				ОбщегоНазначенияБПКлиентСервер.СообщитьОбОшибке(НСтр("ru='Не заполнен период взаиморасчетов.';uk='Не заповнений період взаєморозрахунків.'"),Отказ,Заголовок);
			КонецЕсли;
			
		КонецЕсли;
								
		// Налог
		Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.Налог) Тогда
			ОбщегоНазначенияБПКлиентСервер.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + НСтр("ru='не задан вид взноса!';uk='не заданий вид внеску!'"), Отказ, Заголовок);
		КонецЕсли;

	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаполнениеСтрокиВзносы()

Процедура ПроверитьЗаполнениеСтрокиНДФЛ(ВыборкаПоСтрокамДокумента, Отказ, Заголовок = "")
	Если ВидВыплаты <> Справочники.ВидыВыплат.Аванс
		И ВидВыплаты <> Справочники.ВидыВыплат.АвансПредварительныйРасчет
		И ВидВыплаты <> Справочники.ВидыВыплат.Отпуск 
		И ВидВыплаты <> Справочники.ВидыВыплат.ЗакрытиеПериода  
		И ВидВыплаты.Предопределенный Тогда
		
	СтрокаНачалаСообщенияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='В строке номер ""%1"" табл. части ""НДФЛ"": ';uk='У рядку номер ""%1"" табл. частини ""ПДФО"": '"), СокрЛП(ВыборкаПоСтрокамДокумента.НомерСтроки));
	
		// Сотрудник
		Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.Сотрудник) Тогда
			ОбщегоНазначенияБПКлиентСервер.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + НСтр("ru='не выбрано физическое лицо!';uk='не обрана фізична особа!'"), Отказ, Заголовок);
		КонецЕсли;

	КонецЕсли;
КонецПроцедуры // ПроверитьЗаполнениеСтрокиНДФЛ()

Процедура ДобавитьСтрокуОсновныхНачислений(ВыборкаПоСтрокамДокумента, НаборЗаписей)
	
    Движение = НаборЗаписей.Добавить();
    ЗаполнитьЗначенияСвойств(Движение, ВыборкаПоСтрокамДокумента);
    Если НЕ ЗначениеЗаполнено(Движение.ВидРасчета) Тогда
        Движение.ВидРасчета				= ПланыВидовРасчета.ИНАГРО_Начисления.ОкладПоДням;
    КонецЕсли; 

КонецПроцедуры // ДобавитьСтрокуОсновныхНачислений()

Процедура ДобавитьСтрокуВзносы(ВыборкаПоСтрокамДокумента, НаборЗаписей)
	
	Движение = НаборЗаписей.Добавить();
	ЗаполнитьЗначенияСвойств(Движение,ВыборкаПоСтрокамДокумента);
	
КонецПроцедуры // ДобавитьСтрокуДоговора

Процедура ДобавитьСтрокуНДФЛ(ВыборкаПоСтрокамДокумента, НаборЗаписей)

	Движение = НаборЗаписей.Добавить();
	ЗаполнитьЗначенияСвойств(Движение,ВыборкаПоСтрокамДокумента);
	Движение.Период			= ?(НачалоМесяца(Дата)=ПериодРегистрации, Дата, НачалоДня(КонецМесяца(ПериодРегистрации)) );
	Движение.ВидДвижения 	= ВидДвиженияНакопления.Расход;
	Движение.Контрагент 	= ВыборкаПоСтрокамДокумента.Сотрудник;
	Если НЕ ЗначениеЗаполнено(Движение.НалоговыйПериод) Тогда
		Движение.НалоговыйПериод = Движение.ПериодВзаиморасчетов;
	КонецЕсли;
	
КонецПроцедуры // ДобавитьСтрокуНДФЛ

Процедура ДобавитьСтрокуВзаиморасчетыСРаботникамиОрганизаций(ВыборкаПоСтрокамДокумента)
	
	// ВзаиморасчетыСРаботникамиОрганизаций
	Движение = Движения.ВзаиморасчетыССотрудниками.Добавить();
	ЗаполнитьЗначенияСвойств(Движение, ВыборкаПоСтрокамДокумента);
	Движение.Период			= ?(НачалоМесяца(Дата)=ПериодРегистрации, Дата, НачалоДня(КонецМесяца(ПериодРегистрации)) );
	Движение.ВидДвижения	= ВидДвиженияНакопления.Расход;
	
КонецПроцедуры // ДобавитьСтрокуВДвиженияПоРегистрамНакопления()

Процедура ДобавитьСтрокуВзаиморасчетыВзносы(ВыборкаПоСтрокамДокумента, НаборЗаписей)
	
	Если ВыборкаПоСтрокамДокумента.Результат = 0 И ВыборкаПоСтрокамДокумента.НеподтвержденнаяСумма = 0 Тогда
	   Возврат;
	КонецЕсли;

	Движение = НаборЗаписей.Добавить();
	ЗаполнитьЗначенияСвойств(Движение,ВыборкаПоСтрокамДокумента);
	Движение.Период			= ?(НачалоМесяца(Дата)=ПериодРегистрации, Дата, НачалоДня(КонецМесяца(ПериодРегистрации)) );
	Движение.ВидДвижения	= ВидДвиженияНакопления.Расход;
	
КонецПроцедуры // ДобавитьСтрокуВзаиморасчетыПоВзносамВФонды

Процедура ДобавитьСтрокуНДФЛБезНалога(ВыборкаПоСтрокамДокумента, НаборЗаписей)
	
	Если ВыборкаПоСтрокамДокумента.Налог <> 0 Тогда
		Возврат;
	КонецЕсли;	
	Движение = НаборЗаписей.Добавить();
	ЗаполнитьЗначенияСвойств(Движение,ВыборкаПоСтрокамДокумента);
	Движение.Период			= Дата;
	Движение.ВидДвижения = ВидДвиженияНакопления.Расход;
	
КонецПроцедуры // ДобавитьСтрокуНДФЛ

#КонецОбласти

#Область АвтозаполнениеРасчет

// Выполняет заполнение
//
Функция ЗаполнитьВзносы(ИмяТЧ, Сотрудники = Неопределено) Экспорт
	
	/////////////////////////////////////////
	// < начало - создание движений документа
	Отказ = Ложь;
	
	// Перечитаем объект и соберем данные для заполнения наборов записей регистров
	НачатьТранзакцию();
	ВыборкаПоНачислениям = СформироватьЗапросПоНачисления(Сотрудники).Выбрать();
	ЗафиксироватьТранзакцию();
	
	// Создадим рабочие наборы записей
	НаборОсновныеНачисления = РегистрыРасчета.ИНАГРО_Начисления.СоздатьНаборЗаписей();
	НаборОсновныеНачисления.Отбор.Регистратор.Значение = Ссылка;
	
	Пока ВыборкаПоНачислениям.Следующий() Цикл
		
		ПроверитьЗаполнениеСтрокиНачисления(ВыборкаПоНачислениям, Отказ);
		Если НЕ Отказ Тогда
			// Заполним записи в наборах записей регистров
			ДобавитьСтрокуОсновныхНачислений(ВыборкаПоНачислениям, НаборОсновныеНачисления);
		КонецЕсли;
		
	КонецЦикла;
	НаборОсновныеНачисления.Записать();
	
	// Если есть какие-то проблемы - удаляем движения (тут нет транзакции) 
	Если Отказ Тогда
		НаборОсновныеНачисления.Очистить();
		НаборОсновныеНачисления.Записать();
		Возврат Не Отказ;
	КонецЕсли;
	// > окончание - создание движений документа
	
	/////////////////////////////////////////
	// < начало - заполнение
	ЭтоВзносы = ?(ИмяТЧ = "Взносы", Истина, Ложь);
	
	ИНАГРО_ПроведениеРасчетов.АвтозаполнениеВзносы(Ссылка, ЭтотОбъект[ИмяТЧ], ЭтоВзносы, Сотрудники);
	
	
	/////////////////////////////////////////
	// Удаляем движения - все закончено
	НаборОсновныеНачисления.Очистить();
	НаборОсновныеНачисления.Записать();
	
	
КонецФункции  // РассчитатьВзносы()

// Выполняет заполнение
//
Функция ЗаполнитьНДФЛ(Сотрудники = Неопределено) Экспорт
	
	/////////////////////////////////////////
	// < начало - создание движений документа
	Отказ = Ложь;
	
	// Перечитаем объект и соберем данные для заполнения наборов записей регистров
	НачатьТранзакцию();
	ВыборкаПоНачислениям = СформироватьЗапросПоНачисления(Сотрудники).Выбрать();
	ЗафиксироватьТранзакцию();
	
	// Создадим рабочие наборы записей
	НаборОсновныеНачисления = РегистрыРасчета.ИНАГРО_Начисления.СоздатьНаборЗаписей();
	НаборОсновныеНачисления.Отбор.Регистратор.Значение = Ссылка;

	Пока ВыборкаПоНачислениям.Следующий() Цикл
		
		ПроверитьЗаполнениеСтрокиНачисления(ВыборкаПоНачислениям, Отказ);
		Если НЕ Отказ Тогда
			// Заполним записи в наборах записей регистров
			ДобавитьСтрокуОсновныхНачислений(ВыборкаПоНачислениям, НаборОсновныеНачисления);
		КонецЕсли;
		
	КонецЦикла;
	НаборОсновныеНачисления.Записать();
	
	// Если есть какие-то проблемы - удаляем движения (тут нет транзакции) 
	Если Отказ Тогда
		НаборОсновныеНачисления.Очистить();
		НаборОсновныеНачисления.Записать();
		Возврат Не Отказ;
	КонецЕсли;
	// > окончание - создание движений документа
	
	/////////////////////////////////////////
	// < начало - заполнение
	ИНАГРО_ПроведениеРасчетов.АвтозаполнениеНДФЛ(Ссылка, НДФЛ, Сотрудники, Истина);
	
	
	/////////////////////////////////////////
	// Удаляем движения - все закончено
	НаборОсновныеНачисления.Очистить();
	НаборОсновныеНачисления.Записать();
	
КонецФункции  // РассчитатьВзносы()

// Выполняет заполнение
//
Процедура РассчитатьВзносы(Сотрудники, ИмяТаблицы = "Взносы") Экспорт
	/////////////////////////////////////////
	// < начало - создание движений документа
	Отказ = Ложь;
	МассивИндексыСтрокВзносыВФонды = Новый Массив();
	
	// Перечитаем объект и соберем данные для заполнения наборов записей регистров
	НачатьТранзакцию();
	Прочитать();
	ВыборкаПоНачислениям = СформироватьЗапросПоНачисления( Сотрудники).Выбрать();
	ВыборкаПоВзносам = СформироватьЗапросПоВзносы( ИмяТаблицы, Сотрудники).Выбрать();
	ЗафиксироватьТранзакцию();
	
	// создадим наборы
	НаборОсновныеНачисления = РегистрыРасчета.ИНАГРО_Начисления.СоздатьНаборЗаписей();
	НаборОсновныеНачисления.Отбор.Регистратор.Значение = Ссылка;
	Пока ВыборкаПоНачислениям.Следующий() Цикл 
		ПроверитьЗаполнениеСтрокиНачисления(ВыборкаПоНачислениям, Отказ);
		Если НЕ Отказ Тогда
			ДобавитьСтрокуОсновныхНачислений(ВыборкаПоНачислениям, НаборОсновныеНачисления);
		КонецЕсли;
	КонецЦикла;
	НаборОсновныеНачисления.Записать();
	
	НаборВзносыВФонды = РегистрыРасчета.ИНАГРО_ВзносыВФонды.СоздатьНаборЗаписей();
	НаборВзносыВФонды.Отбор.Регистратор.Значение = Ссылка;
	Пока ВыборкаПоВзносам.Следующий() Цикл
		ПроверитьЗаполнениеСтрокиВзносы(ВыборкаПоВзносам, Отказ);
		Если НЕ Отказ Тогда
			// Заполним записи в наборах записей регистров
			ДобавитьСтрокуВзносы(ВыборкаПоВзносам, НаборВзносыВФонды);
			МассивИндексыСтрокВзносыВФонды.Добавить(ВыборкаПоВзносам.НомерСтроки-1);
		КонецЕсли;
	КонецЦикла;
	НаборВзносыВФонды.Записать();
	
	// если что-то не так, то очистим созданные наборы
	Если Отказ Тогда
		
		НаборОсновныеНачисления.Очистить();
		НаборОсновныеНачисления.Записать();
		
		НаборВзносыВФонды.Очистить();
		НаборВзносыВФонды.Записать();
		
		Возврат;
	КонецЕсли;
	// > окончание - создание движений документа
	
	/////////////////////////////////////////
	// < начало - расчет
	ИНАГРО_ПроведениеРасчетов.РассчитатьЗаписиРегистраРасчета("ИНАГРО_ВзносыВФонды", НаборВзносыВФонды, ЭтотОбъект[ИмяТаблицы], МассивИндексыСтрокВзносыВФонды, Сотрудники, Ложь);
	
	
	
	/////////////////////////////////////////
	// Удаляем движения - все закончено
	НаборОсновныеНачисления.Очистить();
	НаборОсновныеНачисления.Записать();
	
	НаборВзносыВФонды.Очистить();
	НаборВзносыВФонды.Записать();
	
	Записать();
	
	РасчетВыплатыСУчетомНалогов(Сотрудники);
	
КонецПроцедуры  // РассчитатьВзносы()

// Выполняет заполнение
//
Процедура РассчитатьНДФЛ( Сотрудники, КомментироватьРасчет = Ложь ) Экспорт
	
	/////////////////////////////////////////
	// < начало - создание движений документа
	Отказ = Ложь;
	МассивИндексыСтрокНДФЛ = Новый Массив();
	
	// Перечитаем объект и соберем данные для заполнения наборов записей регистров
	НачатьТранзакцию();
	Прочитать();
	ВыборкаПоНачислениям = СформироватьЗапросПоНачисления(Сотрудники).Выбрать();
	ВыборкаПоВзносам = СформироватьЗапросПоВзносы( , Сотрудники).Выбрать();
	ВыборкаПоНДФЛ = СформироватьЗапросПоНДФЛ( Сотрудники).Выбрать();
	ЗафиксироватьТранзакцию();
	
	// Создадим рабочие наборы записей
	НаборОсновныеНачисления = РегистрыРасчета.ИНАГРО_Начисления.СоздатьНаборЗаписей();
	НаборОсновныеНачисления.Отбор.Регистратор.Значение = Ссылка;
	Пока ВыборкаПоНачислениям.Следующий() Цикл
		
		ПроверитьЗаполнениеСтрокиНачисления(ВыборкаПоНачислениям, Отказ);
		Если НЕ Отказ Тогда
			
			// Заполним записи в наборах записей регистров
			ДобавитьСтрокуОсновныхНачислений(ВыборкаПоНачислениям, НаборОсновныеНачисления);
			
		КонецЕсли;
	КонецЦикла;
	НаборОсновныеНачисления.Записать();
	
	НаборВзносыВФонды = РегистрыРасчета.ИНАГРО_ВзносыВФонды.СоздатьНаборЗаписей();
	НаборВзносыВФонды.Отбор.Регистратор.Значение = Ссылка;
	Пока ВыборкаПоВзносам.Следующий() Цикл
		
		ПроверитьЗаполнениеСтрокиВзносы(ВыборкаПоВзносам, Отказ);
		Если НЕ Отказ Тогда
			
			// Заполним записи в наборах записей регистров
			ДобавитьСтрокуВзносы(ВыборкаПоВзносам, НаборВзносыВФонды);

		КонецЕсли;
	КонецЦикла;
	НаборВзносыВФонды.Записать();
	
	НаборНДФЛ = РегистрыНакопления.ВзаиморасчетыПоНДФЛ.СоздатьНаборЗаписей();
	НаборНДФЛ.Отбор.Регистратор.Значение = Ссылка;
	Пока ВыборкаПоНДФЛ.Следующий() Цикл
		ПроверитьЗаполнениеСтрокиНДФЛ(ВыборкаПоНДФЛ, Отказ);
		Если НЕ Отказ Тогда
			
			// Заполним записи в наборах записей регистров
			ДобавитьСтрокуНДФЛ(ВыборкаПоНДФЛ, НаборНДФЛ);
			МассивИндексыСтрокНДФЛ.Добавить(ВыборкаПоНДФЛ.НомерСтроки-1);

		КонецЕсли;
	КонецЦикла;
	НаборНДФЛ.Записать();

	Если Отказ Тогда
		
		НаборОсновныеНачисления.Очистить();
		НаборОсновныеНачисления.Записать();
		
		НаборВзносыВФонды.Очистить();
		НаборВзносыВФонды.Записать();
		
		НаборНДФЛ.Очистить();
		НаборНДФЛ.Записать();
		
		Возврат;
	КонецЕсли;
	// > окончание - создание движений документа
	
	/////////////////////////////////////////
	// < начало - расчет
	ИНАГРО_ПроведениеРасчетов.РассчитатьЗаписиНДФЛ(НаборНДФЛ, НДФЛ, МассивИндексыСтрокНДФЛ, Сотрудники, КомментироватьРасчет);
	
	/////////////////////////////////////////
	// Удаляем движения - все закончено
	НаборОсновныеНачисления.Очистить();
	НаборОсновныеНачисления.Записать();
	
	НаборВзносыВФонды.Очистить();
	НаборВзносыВФонды.Записать();
	
	НаборНДФЛ.Очистить();
	НаборНДФЛ.Записать();
	
	Записать();
	
	РасчетВыплатыСУчетомНалогов(Сотрудники);
	
КонецПроцедуры  // РассчитатьУдержания

// Выполняет заполнение
//
Процедура РасчетВыплатыСУчетомНалогов(Сотрудники ) Экспорт
	
	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;

	Запрос.УстановитьПараметр("Регистратор", Ссылка);
	Запрос.УстановитьПараметр("парамСотрудники", Сотрудники);

	// ВТДанные
	Если Истина Тогда
		// Список сотрудников по которым необходимо выполнить перерасчет
		// Поля:
		//		Сотрудник
		// Описание:
		// 
		//
		ТекстЗапросаВТ = "
		|		ВЫБРАТЬ
		|			Начисления.НомерСтроки,
		|			Начисления.Сотрудник,
		|			Начисления.СуммаГрязными,
		|			СУММА(Начисления.Налоги)		КАК Налоги
		|ПОМЕСТИТЬ ВТДанные
		|		ИЗ (
		|		ВЫБРАТЬ
		|			Основной.НомерСтроки,
		|			Основной.Сотрудник,
		|			Основной.СуммаГрязными,
		|			НДФЛ.Налог			КАК Налоги
		|		ИЗ Документ.ИНАГРО_ЗарплатаКВыплатеОрганизаций.РаботникиОрганизации КАК Основной
		|       ЛЕВОЕ СОЕДИНЕНИЕ Документ.ИНАГРО_ЗарплатаКВыплатеОрганизаций.НДФЛ КАК НДФЛ
		|       ПО		НДФЛ.Ссылка = &Регистратор
		|			И 	Основной.Сотрудник = НДФЛ.Сотрудник
		|		ГДЕ		Основной.Ссылка = &Регистратор
		|			И 	Основной.Сотрудник В (&парамСотрудники)
		|
		|		ОБЪЕДИНИТЬ ВСЕ
		|		ВЫБРАТЬ
		|			Основной.НомерСтроки,
		|			Основной.Сотрудник,
		|			Основной.СуммаГрязными,
		|			Взносы.Результат	КАК Налоги
		|		ИЗ Документ.ИНАГРО_ЗарплатаКВыплатеОрганизаций.РаботникиОрганизации КАК Основной
		|       ЛЕВОЕ СОЕДИНЕНИЕ Документ.ИНАГРО_ЗарплатаКВыплатеОрганизаций.Взносы КАК Взносы
		|       ПО		Взносы.Ссылка = &Регистратор
		|			И 	Основной.Сотрудник = Взносы.Сотрудник
		|		ГДЕ		Основной.Ссылка = &Регистратор
		|			И 	Основной.Сотрудник В (&парамСотрудники)
		|
		|   ) КАК Начисления
		|
		|	СГРУППИРОВАТЬ ПО   
		|			Начисления.НомерСтроки,
		|			Начисления.Сотрудник,
		|			Начисления.СуммаГрязными
		|
		|ИНДЕКСИРОВАТЬ ПО 
		|	Сотрудник
		|";
		Запрос.Текст = ТекстЗапросаВТ;
		Запрос.Выполнить();
		ТекстЗапросаВТДанные = "ВТДанные";
		ТекстЗапросаВТ = "
		|		ВЫБРАТЬ *
		|       ИЗ ВТДанные
		|";
		Запрос.Текст = ТекстЗапросаВТ;
	КонецЕсли;
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	Данные.НомерСтроки						КАК НомерСтроки,
	|	Данные.Сотрудник						КАК Сотрудник,
	|	ЕСТЬNULL(Данные.СуммаГрязными, 0) - ЕСТЬNULL(Данные.Налоги, 0)	КАК Сумма
	|	
	|ИЗ ВТДанные КАК Данные
	|
	|";
	
	Запрос.Текст = ТекстЗапроса;
	
	ОкруглятьДо = РегистрыСведений.ИНАГРО_УчетнаяПолитикаПоПерсоналу.Получить(Новый Структура ("Организация", Организация)).ОкруглятьДо;
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		СтрокаРаботники			= РаботникиОрганизации.Получить( Выборка.НомерСтроки - 1 );
		СтрокаРаботники.Сумма	= Выборка.Сумма;
		СтрокаРаботники.Выплата	= Выборка.Сумма;
		РассчитатьСуммыСотрудника( Выборка.Сумма,  СтрокаРаботники, ОкруглятьДо);
		
	КонецЦикла;
	Записать();
	
КонецПроцедуры // РасчетВыплатыСУчетомНалогов()

// Выполняет заполнение
//
Процедура РассчитатьСуммыСотрудника( НоваяСумма,  СтрокаРаботники, ОкруглятьДо) Экспорт
	
	Если ОкруглятьДо > 0.01 Тогда
		СтрокаРаботники.Выплата = Цел(НоваяСумма/ОкруглятьДо)*ОкруглятьДо;
		СтрокаРаботники.Копейки = НоваяСумма - Цел(НоваяСумма/ОкруглятьДо)*ОкруглятьДо;
	Иначе
		СтрокаРаботники.Копейки = 0;
	КонецЕсли;
	НоваяСуммаОкругления = СтрокаРаботники.Копейки;
	
	Отбор = Новый Структура ("Сотрудник");
	Отбор.Сотрудник = СтрокаРаботники.Сотрудник;
	
	// определим какая сумма уже записана
	Сумма = 0;
	СуммаОкругления = 0;
	СтрокиПараметры = Зарплата.НайтиСтроки(Отбор);
	Для Каждого СтрокаПараметры Из СтрокиПараметры Цикл
		Сумма = Сумма + СтрокаПараметры.Выплата;
		СуммаОкругления = СуммаОкругления + СтрокаПараметры.Копейки;
	КонецЦикла;
	
	Если Сумма+СуммаОкругления <> НоваяСумма Тогда
		
		// уменьшим (увеличим) на разницу
		Разница = Сумма - НоваяСумма + НоваяСуммаОкругления;
		Для Каждого СтрокаПараметры Из СтрокиПараметры Цикл
			
			СтрокаПараметры.Копейки = НоваяСуммаОкругления;
            НоваяСуммаОкругления = 0;
			
			ТекущаяРазница = Мин(Разница, СтрокаПараметры.Выплата);
			СтрокаПараметры.Выплата = СтрокаПараметры.Выплата - ТекущаяРазница;                                                     
			Разница = Разница - ТекущаяРазница;
			
		КонецЦикла;
	
	КонецЕсли;
	
КонецПроцедуры 

// Выполняет заполнение
//
Процедура РассчитатьНалоги(Сотрудники, КомментироватьРасчет = Ложь) Экспорт
	
	// -1- ЗАПОЛНЕНИЕ ТЧ Взносы и НДФЛ////////////////////
	Если ВидВыплаты.РасчитыватьВзносы Тогда
		
		/////////////////////////////////////////
		// < начало - создание движений документа
		Отказ = Ложь;
		МассивИндексыСтрокНачисления = Новый Массив();
		
		// Перечитаем объект и соберем данные для заполнения наборов записей регистров
		НачатьТранзакцию();
		Прочитать();
		ВыборкаПоОсновнымНачислениям = СформироватьЗапросПоОсновнымНачислениям(Сотрудники).Выбрать();
		
		Пока ВыборкаПоОсновнымНачислениям.Следующий() Цикл
			ПроверитьОсновныеНачисленияПоСотруднику(ВыборкаПоОсновнымНачислениям, Отказ);		
		КонецЦикла;
		
		ВыборкаПоНачислениям = СформироватьЗапросПоНачисления(Сотрудники).Выбрать();
		ВыборкаПоВзносам = СформироватьЗапросПоВзносы( , Сотрудники).Выбрать();
		ВыборкаПоНДФЛ = СформироватьЗапросПоНДФЛ( Сотрудники).Выбрать();
		ЗафиксироватьТранзакцию();
		
		// Создадим рабочие наборы записей
		НаборОсновныеНачисления = РегистрыРасчета.ИНАГРО_Начисления.СоздатьНаборЗаписей();
		НаборОсновныеНачисления.Отбор.Регистратор.Значение = Ссылка;
		Пока ВыборкаПоНачислениям.Следующий() Цикл
			
			ПроверитьЗаполнениеСтрокиНачисления(ВыборкаПоНачислениям, Отказ);
			Если НЕ Отказ Тогда
				
				// Заполним записи в наборах записей регистров
				ДобавитьСтрокуОсновныхНачислений(ВыборкаПоНачислениям, НаборОсновныеНачисления);
				
				МассивИндексыСтрокНачисления.Добавить(ВыборкаПоНачислениям.НомерСтроки-1);
				
			КонецЕсли;
		КонецЦикла;
		НаборОсновныеНачисления.Записать();
		
		Если Отказ Тогда
			
			НаборОсновныеНачисления.Очистить();
			НаборОсновныеНачисления.Записать();
			
			Возврат;
		КонецЕсли;
		// > окончание - создание движений документа
		
		/////////////////////////////////////////
		// < начало - заполнение
		ИНАГРО_ПроведениеРасчетов.АвтозаполнениеВзносы( Ссылка, Взносы, Истина, Сотрудники, Истина);
		Записать();
		ИНАГРО_ПроведениеРасчетов.АвтозаполнениеНДФЛ( Ссылка, НДФЛ, Сотрудники, Истина);
		Записать();
		
		
		
		// РАСЧЕТ ТЧ ////////////////////
		
		/////////////////////////////////////////
		// < начало - создание движений документа
		Отказ = Ложь;
		МассивИндексыСтрокНДФЛ = Новый Массив();
		МассивИндексыСтрокВзносыВФонды = Новый Массив();
		
		// Перечитаем объект и соберем данные для заполнения наборов записей регистров
		НачатьТранзакцию();
		Прочитать();
		ВыборкаПоВзносам = СформироватьЗапросПоВзносы( , Сотрудники).Выбрать();
		ВыборкаПоНДФЛ = СформироватьЗапросПоНДФЛ( Сотрудники).Выбрать();
		ЗафиксироватьТранзакцию();
		
		// Досоздадим рабочие наборы записей
		НаборВзносыВФонды = РегистрыРасчета.ИНАГРО_ВзносыВФонды.СоздатьНаборЗаписей();
		НаборВзносыВФонды.Отбор.Регистратор.Значение = Ссылка;
		Пока ВыборкаПоВзносам.Следующий() Цикл
			
			ПроверитьЗаполнениеСтрокиВзносы(ВыборкаПоВзносам, Отказ);
			Если НЕ Отказ Тогда
				
				// Заполним записи в наборах записей регистров
				ДобавитьСтрокуВзносы(ВыборкаПоВзносам, НаборВзносыВФонды);
				МассивИндексыСтрокВзносыВФонды.Добавить(ВыборкаПоВзносам.НомерСтроки-1);
				
			КонецЕсли;
		КонецЦикла;
		НаборВзносыВФонды.Записать();
		
		НаборНДФЛ = РегистрыНакопления.ВзаиморасчетыПоНДФЛ.СоздатьНаборЗаписей();
		НаборНДФЛ.Отбор.Регистратор.Значение = Ссылка;
		Пока ВыборкаПоНДФЛ.Следующий() Цикл
			ПроверитьЗаполнениеСтрокиНДФЛ(ВыборкаПоНДФЛ, Отказ);
			Если НЕ Отказ Тогда
				
				// Заполним записи в наборах записей регистров
				ДобавитьСтрокуНДФЛ(ВыборкаПоНДФЛ, НаборНДФЛ);
				МассивИндексыСтрокНДФЛ.Добавить(ВыборкаПоНДФЛ.НомерСтроки-1);
				
			КонецЕсли;
		КонецЦикла;
		НаборНДФЛ.Записать();
		
		Если Отказ Тогда
			
			НаборВзносыВФонды.Очистить();
			НаборВзносыВФонды.Записать();
			
			НаборНДФЛ.Очистить();
			НаборНДФЛ.Записать();
			
			Возврат;
		КонецЕсли;
		// окончание - создание движений документа
		
		/////////////////////////////////////////
		// начало - расчет
		Если ВидВыплаты.РасчетОтОбратного Тогда
			
			КопияСотрудники = Сотрудники.Скопировать(); 
			
			Для каждого СтрокаНабора Из НаборОсновныеНачисления Цикл
				СтрокаРаботники = РаботникиОрганизации.Получить(МассивИндексыСтрокНачисления.Получить(СтрокаНабора.НомерСтроки-1));
				
				СтрокаНабора.Результат = СтрокаРаботники.Выплата*1.5;
				СтрокаРаботники.СуммаГрязными	= СтрокаНабора.Результат;
				СтрокаРаботники.СуммаПромежуточная	= СтрокаРаботники.Выплата;
			КонецЦикла;
			НаборОсновныеНачисления.Записать();
			Записать();
			
			Инд          = 0; 
			Рассчитывать = Истина;
			
			Пока Рассчитывать Цикл
				
				ИНАГРО_ПроведениеРасчетов.РассчитатьЗаписиРегистраРасчета("ИНАГРО_ВзносыВФонды", НаборВзносыВФонды, Взносы, МассивИндексыСтрокВзносыВФонды, КопияСотрудники, КомментироватьРасчет);//, Сотрудники);
				НаборВзносыВФонды.Записать();
				ИНАГРО_ПроведениеРасчетов.РассчитатьЗаписиНДФЛ(НаборНДФЛ, НДФЛ, МассивИндексыСтрокНДФЛ, КопияСотрудники, КомментироватьРасчет);
				НаборНДФЛ.Записать();
				
				Рассчитывать = ПроверкаУсловияОкончания(КопияСотрудники, НаборОсновныеНачисления );
				Инд = Инд + 1;
				
			КонецЦикла;
			
		Иначе
			
			ИНАГРО_ПроведениеРасчетов.РассчитатьЗаписиРегистраРасчета("ИНАГРО_ВзносыВФонды", НаборВзносыВФонды, Взносы, МассивИндексыСтрокВзносыВФонды, Сотрудники, КомментироватьРасчет);
			ИНАГРО_ПроведениеРасчетов.РассчитатьЗаписиНДФЛ(НаборНДФЛ, НДФЛ, МассивИндексыСтрокНДФЛ, Сотрудники, КомментироватьРасчет);
			Записать();
			
		КонецЕсли;
		
		
		/////////////////////////////////////////
		// Удаляем движения - все закончено
		//
		НаборВзносыВФонды.Очистить();
		НаборВзносыВФонды.Записать();
		
		НаборНДФЛ.Очистить();
		НаборНДФЛ.Записать();
		
		Записать();
	КонецЕсли;
	
	// -2- ЗАПОЛНЕНИЕ ТЧ ВзносыФОТ////////////////////////
	Если ВидВыплаты.РасчитыватьВзносы Тогда
		
		/////////////////////////////////////////
		// начало - заполнение
		ИНАГРО_ПроведениеРасчетов.АвтозаполнениеВзносы( Ссылка, ВзносыФОТ, Ложь, Сотрудники, Истина);
		Записать();
		
		
		// -4- РАСЧЕТ ТЧ ВзносыФОТ////////////////////
		
		/////////////////////////////////////////
		// < начало - создание движений документа
		МассивИндексыСтрокВзносыВФонды = Новый Массив();
		
		// Перечитаем объект и соберем данные для заполнения наборов записей регистров
		НачатьТранзакцию();
		Прочитать();
		ВыборкаПоВзносам = СформироватьЗапросПоВзносы( "ВзносыФОТ", Сотрудники).Выбрать();
		ЗафиксироватьТранзакцию();
		
		// Досоздадим рабочие наборы записей
		НаборВзносыВФонды = РегистрыРасчета.ИНАГРО_ВзносыВФонды.СоздатьНаборЗаписей();
		НаборВзносыВФонды.Отбор.Регистратор.Значение = Ссылка;
		Пока ВыборкаПоВзносам.Следующий() Цикл
			
			ПроверитьЗаполнениеСтрокиВзносы(ВыборкаПоВзносам, Отказ);
			Если НЕ Отказ Тогда
				
				// Заполним записи в наборах записей регистров
				ДобавитьСтрокуВзносы(ВыборкаПоВзносам, НаборВзносыВФонды);
				МассивИндексыСтрокВзносыВФонды.Добавить(ВыборкаПоВзносам.НомерСтроки-1);
				
			КонецЕсли;
		КонецЦикла;
		НаборВзносыВФонды.Записать();
		
		Если Отказ Тогда
			
			НаборВзносыВФонды.Очистить();
			НаборВзносыВФонды.Записать();
			
			Возврат;
		КонецЕсли;
		// > окончание - создание движений документа
		
		/////////////////////////////////////////
		// < начало - расчет
		ИНАГРО_ПроведениеРасчетов.РассчитатьЗаписиРегистраРасчета("ИНАГРО_ВзносыВФонды", НаборВзносыВФонды, ВзносыФОТ, МассивИндексыСтрокВзносыВФонды, Сотрудники, КомментироватьРасчет);
		
		
		/////////////////////////////////////////
		// Удаляем движения - все закончено
		НаборОсновныеНачисления.Очистить();
		НаборОсновныеНачисления.Записать();
		
		НаборВзносыВФонды.Очистить();
		НаборВзносыВФонды.Записать();
		
		Записать();
	КонецЕсли;
	
	// -3- Выплата = СуммаГрязными - Взносы и НДФЛ////////
	Если ВидВыплаты.РасчитыватьВзносы Тогда
		
		РасчетВыплатыСУчетомНалогов( Сотрудники );
		
	КонецЕсли;
	
КонецПроцедуры //РассчитатьНалоги()

// В зависимости от вида выплаты формируем запрос
//
Процедура Автозаполнение(ЭтоДивиденды, ЭтоДоговорники, ЭтоУволенные, МассивСотрудниковДляЗаполнения) Экспорт
		
	Если Не ВидВыплаты.Предопределенный Тогда
		АвтозаполнениеМежрасчетныеВыплаты(МассивСотрудниковДляЗаполнения);
		
	ИначеЕсли ВидВыплаты = Справочники.ВидыВыплат.Очередная 
		ИЛИ	ВидВыплаты = Справочники.ВидыВыплат.ОчереднаяПогашениеДолгов
		ИЛИ	ВидВыплаты = Справочники.ВидыВыплат.НДФЛБезВыплатыЗарплаты
		Тогда
		АвтозаполнениеОсновнаяВыплата(ЭтоДивиденды, ЭтоДоговорники, ЭтоУволенные, МассивСотрудниковДляЗаполнения);
		
	ИначеЕсли ВидВыплаты = Справочники.ВидыВыплат.ОчереднаяВзносы
		ИЛИ	ВидВыплаты = Справочники.ВидыВыплат.ОчереднаяПогашениеДолговВзносы
		Тогда
		АвтозаполнениеОсновнаяВыплатаВзносы(ЭтоДивиденды, ЭтоДоговорники, ЭтоУволенные, МассивСотрудниковДляЗаполнения);
		
	ИначеЕсли ВидВыплаты = Справочники.ВидыВыплат.Аванс Тогда
		АвтозаполнениеАванс(ЭтоДивиденды, ЭтоДоговорники, ЭтоУволенные, МассивСотрудниковДляЗаполнения);
		
	ИначеЕсли ВидВыплаты = Справочники.ВидыВыплат.АвансПредварительныйРасчет Тогда
		АвтозаполнениеАвансПредварительныйРасчет(ЭтоДивиденды, ЭтоДоговорники, ЭтоУволенные, МассивСотрудниковДляЗаполнения);
		
	ИначеЕсли ВидВыплаты = Справочники.ВидыВыплат.Отпуск Тогда
		АвтозаполнениеОтпуск(ЭтоДивиденды, ЭтоДоговорники, ЭтоУволенные, МассивСотрудниковДляЗаполнения);
		
	ИначеЕсли ВидВыплаты = Справочники.ВидыВыплат.Дивиденды Тогда
		АвтозаполнениеОсновнаяВыплата(Истина, Ложь, Ложь, МассивСотрудниковДляЗаполнения);
		
	ИначеЕсли ВидВыплаты = Справочники.ВидыВыплат.Депоненты Тогда
		АвтозаполнениеДепонированная(ЭтоДивиденды, ЭтоДоговорники, ЭтоУволенные, МассивСотрудниковДляЗаполнения);
		
	ИначеЕсли ВидВыплаты = Справочники.ВидыВыплат.ЗакрытиеПериода Тогда
		АвтозаполнениеЗакрытиеПериода(МассивСотрудниковДляЗаполнения);
		
	ИначеЕсли	ВидВыплаты = Справочники.ВидыВыплат.НДФЛКонтрагентам Тогда
		АвтозаполнениеНДФЛКонтрагентам();
		
	ИначеЕсли ВидВыплаты = Справочники.ВидыВыплат.ЗакрытиеПериодаВзаиморасчеты Тогда
		АвтозаполнениеЗакрытиеПериодаВзаиморасчеты(МассивСотрудниковДляЗаполнения);
		
	ИначеЕсли ВидВыплаты = Справочники.ВидыВыплат.Больничные Тогда
		АвтозаполнениеБольничные(ЭтоДивиденды, ЭтоДоговорники, ЭтоУволенные, МассивСотрудниковДляЗаполнения);
		
	КонецЕсли; 
	
КонецПроцедуры //  Автозаполнение

// Выполняет заполнение
//
Процедура АвтозаполнениеОсновнаяВыплата(ЭтоДивиденды, ЭтоДоговорники, ЭтоУволенные, МассивСотрудниковДляЗаполнения = Неопределено) Экспорт
	
	СПогашениемДолгов = ВидВыплаты = Справочники.ВидыВыплат.ОчереднаяПогашениеДолгов;
	ОкруглятьДо = РегистрыСведений.ИНАГРО_УчетнаяПолитикаПоПерсоналу.Получить(Новый Структура ("Организация", Организация)).ОкруглятьДо;
	
	Если МассивСотрудниковДляЗаполнения = Неопределено И (ЭтоУволенные ИЛИ ЭтоДоговорники) Тогда
		МассивСотрудниковДляЗаполнения = Новый Массив;
		МассивСотрудниковДляЗаполнения = ИНАГРО_ПроведениеРасчетов.АвтозаполнениеРаботникиОрганизации(Ссылка, Ложь, ЭтоДоговорники, ЭтоУволенные).Выгрузить().ВыгрузитьКолонку("Сотрудник");
	КонецЕсли;
	
	////////////////////////////////////////////////////////////////////////////////////	
	// Заполнение ТЧ РаботникиОрганизации и ПараметрыОплаты
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("парамДата",		Дата);
	Запрос.УстановитьПараметр("парамКонМесяца", КонецМесяца(Дата)+1);
	Запрос.УстановитьПараметр("ПериодРегистрации", ПериодРегистрации);
	Запрос.УстановитьПараметр("парамСотрудники", МассивСотрудниковДляЗаполнения);
	
	Если ЭтоДивиденды Тогда
		СписокСчетаУчета = Новый СписокЗначений;
		СписокСчетаУчета.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоНачисленнымДивидендам);	
		Запрос.УстановитьПараметр("парамСчетаУчета", СписокСчетаУчета);
	КонецЕсли;
	
	Если НЕ ЭтоДивиденды Тогда
		СписокСчетаДивидендыДепоненты = Новый СписокЗначений;
		СписокСчетаДивидендыДепоненты.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоДепонентам);	
		СписокСчетаДивидендыДепоненты.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоНачисленнымДивидендам);	
		Запрос.УстановитьПараметр("парамСчетаДивидендыДепоненты", СписокСчетаДивидендыДепоненты);
	КонецЕсли;

	
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Взаиморасчеты.Сотрудник						КАК Сотрудник,
	|	Взаиморасчеты.ПериодВзаиморасчетов			КАК ПериодВзаиморасчетов,
	|	Взаиморасчеты.СчетУчета						КАК СчетУчета,
	|	Взаиморасчеты.СуммаВзаиморасчетовОстаток	КАК Сумма,
	|	СпособыВыплаты.СпособВыплаты				КАК СпособВыплаты,
	|	СпособыВыплаты.Банк							КАК Банк,
	|	СпособыВыплаты.НомерКарточки				КАК НомерКарточки
	|ИЗ
	|	РегистрНакопления.ВзаиморасчетыССотрудниками.Остатки(&парамКонМесяца,	
	|		Сотрудник В (&парамСотрудники)
	|		" + ?(СПогашениемДолгов,"И	НАЧАЛОПЕРИОДА(ПериодВзаиморасчетов, МЕСЯЦ) <= &ПериодРегистрации","И	ПериодВзаиморасчетов = &ПериодРегистрации") + "
	|	) КАК Взаиморасчеты
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИНАГРО_ПараметрыВыплатыЗПРаботников.СрезПоследних(&парамДата,
	|		Сотрудник В (&парамСотрудники)
	|	) КАК СпособыВыплаты
	|ПО	СпособыВыплаты.Сотрудник = Взаиморасчеты.Сотрудник
	|";
	
	Если ЭтоДивиденды Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|ГДЕ Взаиморасчеты.СчетУчета В (&парамСчетаУчета)";
	Иначе                                                  		
		ТекстЗапроса = ТекстЗапроса + "
		|ГДЕ Взаиморасчеты.СчетУчета НЕ В (&парамСчетаДивидендыДепоненты)";
	КонецЕсли;		

	ТекстЗапроса = ТекстЗапроса + "
	
	|
	|УПОРЯДОЧИТЬ ПО 
	|   Сотрудник, ПериодВзаиморасчетов УБЫВ, СчетУчета 
	|
	|ИТОГИ  
	|	СУММА(Сумма),
	|	МАКСИМУМ(СпособВыплаты),
	|	МАКСИМУМ(Банк),
	|	МАКСИМУМ(НомерКарточки)
	|ПО Сотрудник
	|";
	
	Запрос.Текст = ТекстЗапроса;
	
	
	
	СуммаОкругления = 0;
	ВыборкаСотрудник = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаСотрудник.Следующий() Цикл

		Если ВидВыплаты = Справочники.ВидыВыплат.НДФЛБезВыплатыЗарплаты Тогда
			Продолжить;
		КонецЕсли;
		
		Если ОкруглятьДо > 0.01 Тогда
			Если ВыборкаСотрудник.Сумма < 0 Тогда
				СуммаОкругления = 0
			Иначе
				СуммаОкругления = ВыборкаСотрудник.Сумма - Цел(ВыборкаСотрудник.Сумма/ОкруглятьДо)*ОкруглятьДо;
			КонецЕсли;				
		КонецЕсли;
		
		СтрокаРаботники = РаботникиОрганизации.Добавить();
		
		СтрокаРаботники.Сотрудник		= ВыборкаСотрудник.Сотрудник;
		
		Если ВыборкаСотрудник.Сумма < 0 Тогда
			СтрокаРаботники.Сумма			= 0;
			СтрокаРаботники.Выплата			= 0;
			СтрокаРаботники.Копейки			= 0;
			ДолгНаСледМесяц					= - ВыборкаСотрудник.Сумма + СуммаОкругления;
		Иначе
			СтрокаРаботники.Сумма			= ВыборкаСотрудник.Сумма - СуммаОкругления;
			СтрокаРаботники.Выплата			= ВыборкаСотрудник.Сумма - СуммаОкругления;
			СтрокаРаботники.Копейки			= СуммаОкругления;
			ДолгНаСледМесяц					= 0;
		КонецЕсли;
		
		СтрокаРаботники.ВыплаченностьЗарплаты = Перечисления.ВыплаченностьЗарплаты.Выплачено;
		СтрокаРаботники.СпособВыплаты	= ?(ВыборкаСотрудник.СпособВыплаты= NULL, Перечисления.СпособыВыплатыЗарплаты.ЧерезКассу, ВыборкаСотрудник.СпособВыплаты);
		СтрокаРаботники.Банк			= ВыборкаСотрудник.Банк;
		СтрокаРаботники.НомерКарточки	= ВыборкаСотрудник.НомерКарточки;
		
		Выборка = ВыборкаСотрудник.Выбрать(ОбходРезультатаЗапроса.Прямой);
		Пока Выборка.Следующий() Цикл
			
			Если Выборка.Сумма < 0 Тогда
				тСуммаОкругления = Макс(СуммаОкругления, Выборка.Сумма);
				СуммаОкругления = Мин(СуммаОкругления - тСуммаОкругления, 0);
			Иначе
				тСуммаОкругления = Мин(СуммаОкругления, Выборка.Сумма);
				СуммаОкругления = Макс(СуммаОкругления - тСуммаОкругления, 0);
			КонецЕсли;
			

			Строка = Зарплата.Добавить();
			Строка.Сотрудник			= Выборка.Сотрудник;
			Строка.ПериодВзаиморасчетов	= Выборка.ПериодВзаиморасчетов;
			Строка.СчетУчета			= Выборка.СчетУчета;
			Если Выборка.СчетУчета = ПланыСчетов.Хозрасчетный.РасчетыПоЗаработнойПлате Тогда
				Строка.Выплата			= Выборка.Сумма - тСуммаОкругления+ ДолгНаСледМесяц;
				Строка.КВыплате			= Выборка.Сумма - тСуммаОкругления+ ДолгНаСледМесяц;
				ДолгНаСледМесяц			= 0;
			Иначе
				Строка.Выплата			= Выборка.Сумма - тСуммаОкругления;
				Строка.КВыплате			= Выборка.Сумма - тСуммаОкругления;
			КонецЕсли;
			
			Строка.Копейки	= тСуммаОкругления;
			
		КонецЦикла;
		
	КонецЦикла;
	
	////////////////////////////////////////////////////////////////////////////////////	
	// Заполнение ТЧ НДФЛ
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("парамДата",	Дата);
	Запрос.УстановитьПараметр("парамКонМесяца", КонецМесяца(Дата)+1);
	Запрос.УстановитьПараметр("ПериодРегистрации",	ПериодРегистрации);
	Запрос.УстановитьПараметр("парамСотрудники", МассивСотрудниковДляЗаполнения);
	Запрос.УстановитьПараметр("парамДоходНДФЛДивиденды", Справочники.ВидыДоходовНДФЛ.Код12);
	Запрос.УстановитьПараметр("парамДоходВСДивиденды", Справочники.ВидыДоходовНДФЛ.ВоенныйСбор109);
	Запрос.УстановитьПараметр("Приход", ВидДвиженияНакопления.Приход);
	Запрос.УстановитьПараметр("парамПустаяДата", Дата(1,1,1));
	
	Если НЕ ЭтоДивиденды И ИНАГРО_ПроведениеРасчетов.ИспользуетсяНК(ПериодРегистрации) Тогда
		Запрос.Текст ="
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Взаиморасчеты.Контрагент				КАК Сотрудник,
		|	Взаиморасчеты.ДоходНДФЛ					КАК ДоходНДФЛ,
		|	Взаиморасчеты.ПериодВзаиморасчетов		КАК ПериодВзаиморасчетов,
		|	Взаиморасчеты.НалоговыйПериод			КАК НалоговыйПериод,
		|	СУММА(Взаиморасчеты.Налог)				КАК Налог,
		|	СУММА(Взаиморасчеты.Доход)				КАК Доход
		|ПОМЕСТИТЬ ВТПриход 
		|ИЗ РегистрНакопления.ВзаиморасчетыПоНДФЛ КАК Взаиморасчеты
		|ГДЕ Взаиморасчеты.Контрагент В (&парамСотрудники)
		|    И Взаиморасчеты.ВидДвижения = &Приход
		|	 И Взаиморасчеты.Период <= &парамКонМесяца
		|		" + ?(СПогашениемДолгов,"И	ПериодВзаиморасчетов <= &ПериодРегистрации","И	ПериодВзаиморасчетов = &ПериодРегистрации") + "
		|СГРУППИРОВАТЬ ПО
		|    Контрагент,ДоходНДФЛ,ПериодВзаиморасчетов,НалоговыйПериод
		|ИНДЕКСИРОВАТЬ ПО
		|    Контрагент,ДоходНДФЛ,ПериодВзаиморасчетов,НалоговыйПериод 
		|";
		Запрос.Выполнить();
		
		Запрос.Текст ="
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Взаиморасчеты.Контрагент				КАК Сотрудник,
		|	Взаиморасчеты.ДоходНДФЛ					КАК ДоходНДФЛ,
		|	Взаиморасчеты.ПериодВзаиморасчетов		КАК ПериодВзаиморасчетов,
		|	ВЫБОР 
		|	КОГДА Взаиморасчеты.НалоговыйПериод <> &парамПустаяДата  
		|	ТОГДА Взаиморасчеты.НалоговыйПериод
		|   ИНАЧЕ Взаиморасчеты.ПериодВзаиморасчетов
		|	КОНЕЦ КАК НалоговыйПериод,
		|	СУММА(Взаиморасчеты.Налог)				КАК Налог,
		|	СУММА(Взаиморасчеты.Доход)				КАК Доход
		|ПОМЕСТИТЬ ВТРасход 
		|ИЗ РегистрНакопления.ВзаиморасчетыПоНДФЛ КАК Взаиморасчеты
		|ГДЕ Взаиморасчеты.Контрагент В (&парамСотрудники)
		|    И Взаиморасчеты.ВидДвижения <> &Приход
		|	 И Взаиморасчеты.Период <= &парамКонМесяца
		|		" + ?(СПогашениемДолгов,"И	ПериодВзаиморасчетов <= &ПериодРегистрации","И	ПериодВзаиморасчетов = &ПериодРегистрации") + "
		|СГРУППИРОВАТЬ ПО
		|    Контрагент,ДоходНДФЛ,ПериодВзаиморасчетов,НалоговыйПериод
		|ИНДЕКСИРОВАТЬ ПО
		|    Контрагент,ДоходНДФЛ,ПериодВзаиморасчетов,НалоговыйПериод 
		|";
		Запрос.Выполнить();
		
		Запрос.Текст ="
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Приход.Сотрудник					КАК Сотрудник,
		|	Приход.ДоходНДФЛ					КАК ДоходНДФЛ,
		|	Приход.ПериодВзаиморасчетов			КАК ПериодВзаиморасчетов,
		|	Приход.НалоговыйПериод				КАК НалоговыйПериод,
		|	Приход.Налог - ЕСТЬNULL(Расход.Налог,0)	КАК Налог,
		|	Приход.Доход - ЕСТЬNULL(Расход.Доход,0)	КАК Доход
		|ИЗ ВТПриход КАК Приход
		|   ЛЕВОЕ СОЕДИНЕНИЕ
		|   ВТРасход КАК Расход
		|   ПО Приход.Сотрудник = Расход.Сотрудник
		|    И Приход.ДоходНДФЛ = Расход.ДоходНДФЛ
		|    И Приход.ПериодВзаиморасчетов = Расход.ПериодВзаиморасчетов
		|    И Приход.НалоговыйПериод = Расход.НалоговыйПериод
		|   УПОРЯДОЧИТЬ ПО Приход.Сотрудник.Наименование, Приход.ДоходНДФЛ.Код, Приход.ПериодВзаиморасчетов, Приход.НалоговыйПериод
		|";
		
	Иначе
		ТекстЗапроса = "
		|ВЫБРАТЬ
		|	Взаиморасчеты.Контрагент					КАК Сотрудник,
		|	Взаиморасчеты.ДоходНДФЛ						КАК ДоходНДФЛ,
		|	Взаиморасчеты.ПериодВзаиморасчетов			КАК ПериодВзаиморасчетов,
		// |	Взаиморасчеты.НалогУпрОстаток				КАК НалогУпр,
		|	Взаиморасчеты.НалогОстаток					КАК Налог,
		|	Взаиморасчеты.ДоходОстаток					КАК Доход
		|
		|ИЗ РегистрНакопления.ВзаиморасчетыПоНДФЛ.Остатки( &парамДата,
		|		Контрагент В (&парамСотрудники)
		|		" + ?(ЭтоДивиденды,"И	ДоходНДФЛ = &парамДоходНДФЛДивиденды","И	ДоходНДФЛ <> &парамДоходНДФЛДивиденды") + "
		|		" + ?(ЭтоДивиденды,"И	(ДоходНДФЛ = &парамДоходНДФЛДивиденды ИЛИ ДоходНДФЛ = &парамДоходВСДивиденды)","И	ДоходНДФЛ <> &парамДоходНДФЛДивиденды И ДоходНДФЛ <> &парамДоходВСДивиденды") + "
		|		" + ?(СПогашениемДолгов,"И	ПериодВзаиморасчетов <= &ПериодРегистрации","И	ПериодВзаиморасчетов = &ПериодРегистрации") + "
		|    ) КАК Взаиморасчеты
		|
		|";
		Запрос.Текст = ТекстЗапроса;

	КонецЕсли;
		
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если  Выборка.Налог = 0 И Выборка.Доход = 0 Тогда
			Продолжить;
		КонецЕсли;	
				
		СтрокаРаботники = НДФЛ.Добавить();
			
		СтрокаРаботники.Сотрудник	= Выборка.Сотрудник;
		СтрокаРаботники.ПериодВзаиморасчетов	= Выборка.ПериодВзаиморасчетов;
		СтрокаРаботники.ДоходНДФЛ	= Выборка.ДоходНДФЛ;
			
		СтрокаРаботники.Налог		= Выборка.Налог;
		Если НЕ ВидВыплаты = Справочники.ВидыВыплат.НДФЛБезВыплатыЗарплаты Тогда
			СтрокаРаботники.Доход		= Выборка.Доход;
		КонецЕсли;		
		Если НЕ ЭтоДивиденды И ИНАГРО_ПроведениеРасчетов.ИспользуетсяНК(ПериодРегистрации) Тогда
			СтрокаРаботники.НалоговыйПериод		= Выборка.НалоговыйПериод;
		КонецЕсли;
		
	КонецЦикла;
	
	
КонецПроцедуры // Автозаполнение_ОсновнаяВыплата()

// Процедура заполнения табличной части Взносы ФОТ
//
Процедура АвтозаполнениеОсновнаяВыплатаВзносы(ЭтоДивиденды, ЭтоДоговорники, ЭтоУволенные, МассивСотрудниковДляЗаполнения = Неопределено) 
	
	Если МассивСотрудниковДляЗаполнения = Неопределено И (ЭтоУволенные ИЛИ ЭтоДоговорники) Тогда
		МассивСотрудниковДляЗаполнения = Новый Массив;
		МассивСотрудниковДляЗаполнения = ИНАГРО_ПроведениеРасчетов.АвтозаполнениеРаботникиОрганизации(Ссылка, Ложь, ЭтоДоговорники, ЭтоУволенные).Выгрузить().ВыгрузитьКолонку("Сотрудник");
	КонецЕсли;
	
	// Заполнение ТЧ Взносы, ВзносыФОТ
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("парамДата",	Дата);
	Запрос.УстановитьПараметр("парамНачало",	НачалоМесяца(ПериодРегистрации));
	Запрос.УстановитьПараметр("парамКонец",		КонецМесяца(ПериодРегистрации));
	Запрос.УстановитьПараметр("ПериодРегистрации",	ПериодРегистрации);
	Запрос.УстановитьПараметр("парамОрганизация",	Организация);
	Запрос.УстановитьПараметр("парамПодразделение", ПодразделениеОрганизации);
	
	// Список работников формируем с учетом условия на подразделение
	Запрос.УстановитьПараметр("парамСотрудники", МассивСотрудниковДляЗаполнения);
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Если ВидВыплаты = Справочники.ВидыВыплат.ОчереднаяВзносы Тогда // И ЗначениеЗаполнено(ПодразделениеОрганизации) Тогда
		
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
           |	НачисленияВзносы.Налог,
           |	НачисленияВзносы.СтатьяНалоговойДекларации,
           |	НачисленияВзносы.ПериодВзаиморасчетов,
           |	СУММА(НачисленияВзносы.База) КАК База,
           |	СУММА(НачисленияВзносы.БазаВзноса) КАК БазаВзноса,
           |	СУММА(НачисленияВзносы.Результат) КАК Результат
           |ПОМЕСТИТЬ ВТНачисленияВзносы
           |ИЗ
           |	(ВЫБРАТЬ
           |		ВзносыВФонды.Налог КАК Налог,
           |		ВзносыВФонды.СтатьяНалоговойДекларации КАК СтатьяНалоговойДекларации,
           |		ВзносыВФонды.ПериодРегистрации КАК ПериодВзаиморасчетов,
           |		ВзносыВФонды.База КАК База,
           |		ВзносыВФонды.БазаВзноса КАК БазаВзноса,
           |		ВзносыВФонды.Результат КАК Результат
           |	ИЗ
           |		РегистрРасчета.ИНАГРО_ВзносыВФонды КАК ВзносыВФонды
           |	ГДЕ
           |		ВзносыВФонды.ПериодРегистрации = &ПериодРегистрации
		   |		И ВзносыВФонды.Сотрудник В (&парамСотрудники)) КАК НачисленияВзносы
           |
           |СГРУППИРОВАТЬ ПО
           |	НачисленияВзносы.Налог,
           |	НачисленияВзносы.СтатьяНалоговойДекларации,
           |	НачисленияВзносы.ПериодВзаиморасчетов
           |
           |ИНДЕКСИРОВАТЬ ПО
           |	НачисленияВзносы.Налог,
           |	НачисленияВзносы.СтатьяНалоговойДекларации,
           |	НачисленияВзносы.ПериодВзаиморасчетов";		
		Запрос.Выполнить();
		
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
           |	УплатаВзносы.Налог,
           |	УплатаВзносы.СтатьяНалоговойДекларации,
           |	УплатаВзносы.ПериодВзаиморасчетов,
           |	СУММА(УплатаВзносы.База) КАК База,
           |	СУММА(УплатаВзносы.БазаВзноса) КАК БазаВзноса,
           |	СУММА(УплатаВзносы.Результат) КАК Результат
		   |ПОМЕСТИТЬ ВТУплатаВзносы
           |ИЗ
           |	(ВЫБРАТЬ
           |		ЗарплатаКВыплатеОрганизацийВзносы.Налог КАК Налог,
           |		ЗарплатаКВыплатеОрганизацийВзносы.СтатьяНалоговойДекларации КАК СтатьяНалоговойДекларации,
           |		ЗарплатаКВыплатеОрганизацийВзносы.Ссылка.ПериодРегистрации КАК ПериодВзаиморасчетов,
           |		ЗарплатаКВыплатеОрганизацийВзносы.База КАК База,
           |		ЗарплатаКВыплатеОрганизацийВзносы.БазаВзноса КАК БазаВзноса,
           |		ЗарплатаКВыплатеОрганизацийВзносы.Результат КАК Результат
           |	ИЗ
           |		Документ.ИНАГРО_ЗарплатаКВыплатеОрганизаций.Взносы КАК ЗарплатаКВыплатеОрганизацийВзносы
           |	ГДЕ
           |		ЗарплатаКВыплатеОрганизацийВзносы.Ссылка.ПериодРегистрации = &ПериодРегистрации
           |		И ЗарплатаКВыплатеОрганизацийВзносы.Ссылка.Организация = &парамОрганизация
           |		И ЗарплатаКВыплатеОрганизацийВзносы.Ссылка.Дата < &парамДата
           |		И ЗарплатаКВыплатеОрганизацийВзносы.Ссылка.Проведен
		   //|		И ЗарплатаКВыплатеОрганизацийВзносы.Сотрудник В (&парамСотрудники)
		   |		" + ?(ЗначениеЗаполнено(ПодразделениеОрганизации)," И ЗарплатаКВыплатеОрганизацийВзносы.Ссылка.ПодразделениеОрганизации = &парамПодразделение","") + "
		   |	
           |	ОБЪЕДИНИТЬ ВСЕ
           |	
           |	ВЫБРАТЬ
           |		ЗарплатаКВыплатеОрганизацийВзносы.Налог,
           |		ЗарплатаКВыплатеОрганизацийВзносы.СтатьяНалоговойДекларации,
           |		ЗарплатаКВыплатеОрганизацийВзносы.Ссылка.ПериодРегистрации,
           |		ЗарплатаКВыплатеОрганизацийВзносы.База,
           |		ЗарплатаКВыплатеОрганизацийВзносы.БазаВзноса,
           |		ЗарплатаКВыплатеОрганизацийВзносы.Результат
           |	ИЗ
           |		Документ.ИНАГРО_ЗарплатаКВыплатеОрганизаций.ВзносыФОТ КАК ЗарплатаКВыплатеОрганизацийВзносы
           |	ГДЕ
           |		ЗарплатаКВыплатеОрганизацийВзносы.Ссылка.ПериодРегистрации = &ПериодРегистрации
           |		И ЗарплатаКВыплатеОрганизацийВзносы.Ссылка.Организация = &парамОрганизация
           |		И ЗарплатаКВыплатеОрганизацийВзносы.Ссылка.Дата < &парамДата
           |		И ЗарплатаКВыплатеОрганизацийВзносы.Ссылка.Проведен
		   //|		И ЗарплатаКВыплатеОрганизацийВзносы.Сотрудник В (&парамСотрудники)
		   |		" + ?(ЗначениеЗаполнено(ПодразделениеОрганизации)," И ЗарплатаКВыплатеОрганизацийВзносы.Ссылка.ПодразделениеОрганизации = &парамПодразделение","") + "
		   |) КАК УплатаВзносы
           |
           |СГРУППИРОВАТЬ ПО
           |	УплатаВзносы.Налог,
           |	УплатаВзносы.СтатьяНалоговойДекларации,
           |	УплатаВзносы.ПериодВзаиморасчетов
           |
		   |ИНДЕКСИРОВАТЬ ПО
		   |	УплатаВзносы.Налог,
		   |	УплатаВзносы.СтатьяНалоговойДекларации,
		   |	УплатаВзносы.ПериодВзаиморасчетов";	
		Запрос.Выполнить();
		
		ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	НачисленияВзносы.Налог,
			|	НачисленияВзносы.СтатьяНалоговойДекларации,
			|	НачисленияВзносы.ПериодВзаиморасчетов,
			|	ВидыРасчетов.ВидРасчета.СпособРасчета		КАК СпособРасчета,
			|	СУММА(ВЫБОР
			|		КОГДА НачисленияВзносы.База - ЕСТЬNULL(УплатаВзносы.База,0) > 0
			|		ТОГДА НачисленияВзносы.База - ЕСТЬNULL(УплатаВзносы.База,0)
			|		ИНАЧЕ 0
			|	КОНЕЦ) КАК База,
			|	СУММА(ВЫБОР
			|		КОГДА НачисленияВзносы.БазаВзноса - ЕСТЬNULL(УплатаВзносы.БазаВзноса,0) > 0
			|		ТОГДА НачисленияВзносы.БазаВзноса - ЕСТЬNULL(УплатаВзносы.БазаВзноса,0)
			|		ИНАЧЕ 0
			|	КОНЕЦ) КАК БазаВзноса,
			|	СУММА(ВЫБОР
			|		КОГДА НачисленияВзносы.Результат - ЕСТЬNULL(УплатаВзносы.Результат,0) > 0
			|		ТОГДА НачисленияВзносы.Результат - ЕСТЬNULL(УплатаВзносы.Результат,0)
			|		ИНАЧЕ 0
			|	КОНЕЦ) КАК Результат
			|ИЗ
			|	ВТНачисленияВзносы КАК НачисленияВзносы
			|   ЛЕВОЕ СОЕДИНЕНИЕ
			|   ВТУплатаВзносы КАК УплатаВзносы
			|   ПО НачисленияВзносы.Налог = УплатаВзносы.Налог
			|    И НачисленияВзносы.СтатьяНалоговойДекларации = УплатаВзносы.СтатьяНалоговойДекларации
			|    И НачисленияВзносы.ПериодВзаиморасчетов = УплатаВзносы.ПериодВзаиморасчетов
			|	ЛЕВОЕ СОЕДИНЕНИЕ  РегистрСведений.ИНАГРО_ВидыРасчетовВзносовВФонды.СрезПоследних(&парамДата) КАК ВидыРасчетов
			|	ПО НачисленияВзносы.Налог = ВидыРасчетов.Налог
			|ГДЕ
			|	НачисленияВзносы.База > 0
			|	И НачисленияВзносы.БазаВзноса > 0
			|	И НачисленияВзносы.Результат > 0
			|
			|СГРУППИРОВАТЬ ПО
			|	НачисленияВзносы.Налог, НачисленияВзносы.СтатьяНалоговойДекларации, НачисленияВзносы.ПериодВзаиморасчетов, ВидыРасчетов.ВидРасчета.СпособРасчета
			|";				
			
	Иначе
		ТекстЗапроса = "
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ 
			|	Взаиморасчеты.Налог							КАК Налог,
			|	Взаиморасчеты.СтатьяНалоговойДекларации		КАК СтатьяНалоговойДекларации,
			|	ВидыРасчетов.ВидРасчета.СпособРасчета		КАК СпособРасчета,
			|	Взаиморасчеты.ПериодВзаиморасчетов			КАК ПериодВзаиморасчетов,
			|	Взаиморасчеты.ИНАГРО_БазаОстаток			КАК База,
			|	Взаиморасчеты.ИНАГРО_БазаВзносаОстаток		КАК БазаВзноса,
			|	Взаиморасчеты.СуммаОстаток					КАК Результат
			|
			|ИЗ РегистрНакопления.ВзаиморасчетыПоВзносамВФонды.Остатки( &парамДата,
			|			Организация = &парамОрганизация
			|		" + ?(ВидВыплаты = Справочники.ВидыВыплат.ОчереднаяПогашениеДолговВзносы,"И	ПериодВзаиморасчетов <= &ПериодРегистрации","И	ПериодВзаиморасчетов = &ПериодРегистрации") + "
			|    ) КАК Взаиморасчеты
			|ЛЕВОЕ СОЕДИНЕНИЕ  РегистрСведений.ИНАГРО_ВидыРасчетовВзносовВФонды.СрезПоследних(&парамДата) КАК ВидыРасчетов
			|ПО Взаиморасчеты.Налог = ВидыРасчетов.Налог
			|
			|";
	КонецЕсли; 

	Запрос.Текст = ТекстЗапроса; 	
	Выборка = Запрос.Выполнить().Выбрать();
	
	
	Пока Выборка.Следующий() Цикл
		Если НЕ (Выборка.База = 0 И Выборка.БазаВзноса = 0 И Выборка.Результат = 0) Тогда
		
			Если Выборка.СпособРасчета = Перечисления.СпособыРасчетаНачислений.Взносы Тогда 
				СтрокаРаботники = Взносы.Добавить();
			Иначе
				СтрокаРаботники = ВзносыФОТ.Добавить();
			КонецЕсли;
			
			СтрокаРаботники.Налог						= Выборка.Налог;
			СтрокаРаботники.СтатьяНалоговойДекларации	= Выборка.СтатьяНалоговойДекларации;
			СтрокаРаботники.ПериодВзаиморасчетов		= Выборка.ПериодВзаиморасчетов;
			
			СтрокаРаботники.База			= Выборка.База;
			СтрокаРаботники.БазаВзноса		= Выборка.БазаВзноса;
			СтрокаРаботники.Результат		= Выборка.Результат;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // Автозаполнение_ОсновнаяВыплата()

// Процедура заполнения табличных частей РаботникиОрганизации, Зарплата
//
Процедура АвтозаполнениеДепонированная(ЭтоДивиденды, ЭтоДоговорники, ЭтоУволенные, МассивСотрудниковДляЗаполнения = Неопределено) 
	
	// Заполнение ТЧ Зарплата и Работники
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("парамДата",	Дата);
	Запрос.УстановитьПараметр("парамНачало",	НачалоМесяца(ПериодРегистрации));
	Запрос.УстановитьПараметр("парамКонец",		КонецМесяца(ПериодРегистрации));
	Запрос.УстановитьПараметр("парамОрганизация", Организация);
	Запрос.УстановитьПараметр("парамСотрудник", МассивСотрудниковДляЗаполнения);
	
	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ 
		|	Взаиморасчеты.ИНАГРО_Сотрудник				КАК Сотрудник,
		|	Взаиморасчеты.Ведомость						КАК Ведомость,
		|	Взаиморасчеты.Ведомость.ПериодРегистрации	КАК ПериодВзаиморасчетов,
		|	Взаиморасчеты.СуммаОстаток					КАК Выплата,
		|	СпособыВыплаты.СпособВыплаты				КАК СпособВыплаты,
		|	СпособыВыплаты.Банк							КАК Банк,
		|	СпособыВыплаты.НомерКарточки				КАК НомерКарточки
		|ИЗ
		|	РегистрНакопления.ВзаиморасчетыСДепонентами.Остатки( &парамДата,
		|			Организация = &парамОрганизация
		|		И ИНАГРО_Сотрудник В (&парамСотрудник)
		|    ) КАК Взаиморасчеты
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ Документ.ИНАГРО_ЗарплатаКВыплатеОрганизаций.РаботникиОрганизации КАК СпособыВыплаты
		|ПО	СпособыВыплаты.Ссылка = Взаиморасчеты.Ведомость
		|И	СпособыВыплаты.Сотрудник = Взаиморасчеты.ИНАГРО_Сотрудник
		|
		|ИТОГИ СУММА(Выплата) 
		|ПО Сотрудник
		|";
		
	Запрос.Текст = ТекстЗапроса;
	
	ВыборкаСотрудник = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаСотрудник.Следующий() Цикл
		
		СтрокаРаботники = РаботникиОрганизации.Добавить();
		
		СтрокаРаботники.Сотрудник	= ВыборкаСотрудник.Сотрудник;
		СтрокаРаботники.Выплата	= ВыборкаСотрудник.Выплата;
		
		СтрокаРаботники.ВыплаченностьЗарплаты	= Перечисления.ВыплаченностьЗарплаты.Выплачено;
		СтрокаРаботники.СпособВыплаты			= ?(ВыборкаСотрудник.СпособВыплаты= NULL, Перечисления.СпособыВыплатыЗарплаты.ЧерезКассу,ВыборкаСотрудник.СпособВыплаты);
		СтрокаРаботники.Банк					= ВыборкаСотрудник.Банк;
		СтрокаРаботники.НомерКарточки			= ВыборкаСотрудник.НомерКарточки;
		
		
		Выборка = ВыборкаСотрудник.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			Строка = Зарплата.Добавить();
			
			Строка.Сотрудник			= Выборка.Сотрудник;
			Строка.ПериодВзаиморасчетов	= Выборка.ПериодВзаиморасчетов;
			Строка.Ведомость			= Выборка.Ведомость;
			Строка.Выплата				= Выборка.Выплата;
			Строка.СчетУчета			= ПланыСчетов.Хозрасчетный.РасчетыПоДепонентам;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры // Автозаполнение_ОсновнаяВыплата()

// Процедура заполнения табличных частей РаботникиОрганизации, Зарплата
// данными по отпускам.
Процедура АвтозаполнениеОтпуск(ЭтоДивиденды, ЭтоДоговорники, ЭтоУволенные, МассивСотрудниковДляЗаполнения = Неопределено) 
	
	ОкруглятьДо = РегистрыСведений.ИНАГРО_УчетнаяПолитикаПоПерсоналу.Получить(Новый Структура ("Организация", Организация)).ОкруглятьДо;
	
	// Заполнение ТЧ Зарплата и Работники
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("парамДата", Дата);
	Запрос.УстановитьПараметр("парамПериодРегистрации", ПериодРегистрации);
	Запрос.УстановитьПараметр("парамОрганизация", Организация);
	Запрос.УстановитьПараметр("парамСотрудники",МассивСотрудниковДляЗаполнения);
	Запрос.УстановитьПараметр("парамВидВыплаты",ВидВыплаты);
	Запрос.УстановитьПараметр("парамСсылка", Ссылка);
	
	ТекстЗапроса = "ВЫБРАТЬ
	               |	Начислено.Сотрудник КАК Сотрудник,
	               |	Начислено.ПериодРегистрации КАК ПериодВзаиморасчетов,
	               |	Начислено.СчетУчета КАК СчетУчета,
	               |	Начислено.ВидРасчета,
	               |	Начислено.ДатаНачала,
	               |	СпособыВыплаты.СпособВыплаты КАК СпособВыплаты,
	               |	СпособыВыплаты.Банк КАК Банк,
	               |	СпособыВыплаты.НомерКарточки КАК НомерКарточки,
	               |	ВЫБОР
	               |		КОГДА Начислено.Сумма > ЕСТЬNULL(ВыплаченоРанее.Сумма, 0)
	               |			ТОГДА Начислено.Сумма - ЕСТЬNULL(ВыплаченоРанее.Сумма, 0)
	               |		ИНАЧЕ 0
	               |	КОНЕЦ КАК Сумма
	               |ИЗ
	               |	(ВЫБРАТЬ
	               |		ИНАГРО_Начисления.Сотрудник КАК Сотрудник,
	               |		ИНАГРО_Начисления.ПериодРегистрации КАК ПериодРегистрации,
	               |		ИНАГРО_Начисления.ВидРасчета.СчетУчета КАК СчетУчета,
	               |		ИНАГРО_Начисления.ПериодДействияНачало КАК ДатаНачала,
	               |		СУММА(ИНАГРО_Начисления.Результат) КАК Сумма,
	               |		ИНАГРО_Начисления.ВидРасчета КАК ВидРасчета
	               |	ИЗ
	               |		РегистрРасчета.ИНАГРО_Начисления КАК ИНАГРО_Начисления
	               |	ГДЕ
	               |		ИНАГРО_Начисления.ПериодРегистрации = &парамПериодРегистрации
	               |		И ИНАГРО_Начисления.Организация = &парамОрганизация
	               |		И ИНАГРО_Начисления.Сотрудник В(&парамСотрудники)
	               |		И ИНАГРО_Начисления.Регистратор.Дата <= &парамДата
	               |		И ИНАГРО_Начисления.ВидРасчета.ЭтоОтпускные
	               |	
	               |	СГРУППИРОВАТЬ ПО
	               |		ИНАГРО_Начисления.ПериодДействияНачало,
	               |		ИНАГРО_Начисления.ПериодРегистрации,
	               |		ИНАГРО_Начисления.ВидРасчета.СчетУчета,
	               |		ИНАГРО_Начисления.Сотрудник,
	               |		ИНАГРО_Начисления.ВидРасчета) КАК Начислено
	               |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	               |			Выплаты.Сотрудник КАК Сотрудник,
	               |			Выплаты.ПериодВзаиморасчетов КАК ПериодРегистрации,
	               |			Выплаты.СчетУчета КАК СчетУчета,
	               |			Выплаты.ВидРасчета КАК ВидРасчета,
	               |			СУММА(Выплаты.ВыплатаГрязными) КАК Сумма,
	               |			Выплаты.ДатаНачала КАК ДатаНачала
	               |		ИЗ
	               |			Документ.ИНАГРО_ЗарплатаКВыплатеОрганизаций.Зарплата КАК Выплаты
	               |		ГДЕ
	               |			Выплаты.Ссылка.ПериодРегистрации = &парамПериодРегистрации
	               |			И Выплаты.Ссылка.Организация = &парамОрганизация
	               |			И Выплаты.Ссылка.ВидВыплаты = &парамВидВыплаты
	               |			И Выплаты.Сотрудник В(&парамСотрудники)
	               |			И Выплаты.Ссылка.Дата <= &парамДата
	               |			И Выплаты.Ссылка.Проведен
	               |			И Выплаты.Ссылка <> &парамСсылка
	               |		
	               |		СГРУППИРОВАТЬ ПО
	               |			Выплаты.ПериодВзаиморасчетов,
	               |			Выплаты.СчетУчета,
	               |			Выплаты.Сотрудник,
	               |			Выплаты.ВидРасчета,
	               |			Выплаты.ДатаНачала) КАК ВыплаченоРанее
	               |		ПО Начислено.Сотрудник = ВыплаченоРанее.Сотрудник
	               |			И Начислено.ПериодРегистрации = ВыплаченоРанее.ПериодРегистрации
	               |			И Начислено.СчетУчета = ВыплаченоРанее.СчетУчета
	               |			И Начислено.ВидРасчета = ВыплаченоРанее.ВидРасчета
	               |			И Начислено.ДатаНачала = ВыплаченоРанее.ДатаНачала
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИНАГРО_ПараметрыВыплатыЗПРаботников.СрезПоследних(
	               |				&парамДата,
	               |				Организация = &парамОрганизация
	               |					И Сотрудник В (&парамСотрудники)) КАК СпособыВыплаты
	               |		ПО (СпособыВыплаты.Сотрудник = Начислено.Сотрудник)
	               |ГДЕ
	               |	ЕСТЬNULL(Начислено.Сумма, 0) > ЕСТЬNULL(ВыплаченоРанее.Сумма, 0)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	СпособыВыплаты.СпособВыплаты,
	               |	СпособыВыплаты.Банк,
	               |	СпособыВыплаты.НомерКарточки,
	               |	Начислено.Сотрудник,
	               |	Начислено.ПериодРегистрации,
	               |	Начислено.СчетУчета,
	               |	Начислено.ВидРасчета,
	               |	Начислено.ДатаНачала,
	               |	ВЫБОР
	               |		КОГДА Начислено.Сумма > ЕСТЬNULL(ВыплаченоРанее.Сумма, 0)
	               |			ТОГДА Начислено.Сумма - ЕСТЬNULL(ВыплаченоРанее.Сумма, 0)
	               |		ИНАЧЕ 0
	               |	КОНЕЦ
	               |ИТОГИ
	               |	МАКСИМУМ(СпособВыплаты),
	               |	МАКСИМУМ(Банк),
	               |	МАКСИМУМ(НомерКарточки),
	               |	СУММА(Сумма)
	               |ПО
	               |	Сотрудник";
	
	Запрос.Текст = ТекстЗапроса;
	
	СуммаОкругления = 0;
	Сотрудники = Новый СписокЗначений;
	ВыборкаСотрудник = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаСотрудник.Следующий() Цикл
		
		Если ОкруглятьДо > 0.01 Тогда
			СуммаОкругления = ВыборкаСотрудник.Сумма - Цел(ВыборкаСотрудник.Сумма/ОкруглятьДо)*ОкруглятьДо;
		КонецЕсли;
		
		СтрокаРаботники = РаботникиОрганизации.Добавить();
		
		СтрокаРаботники.Сотрудник	= ВыборкаСотрудник.Сотрудник;
		СтрокаРаботники.Выплата	= ВыборкаСотрудник.Сумма - СуммаОкругления;
		СтрокаРаботники.Копейки	= СуммаОкругления;
		СтрокаРаботники.СуммаГрязными	= ВыборкаСотрудник.Сумма;
		
		
		СтрокаРаботники.ВыплаченностьЗарплаты	= Перечисления.ВыплаченностьЗарплаты.Выплачено;
		СтрокаРаботники.СпособВыплаты	= ?(ВыборкаСотрудник.СпособВыплаты= NULL, Перечисления.СпособыВыплатыЗарплаты.ЧерезКассу, ВыборкаСотрудник.СпособВыплаты);
		СтрокаРаботники.Банк			= ВыборкаСотрудник.Банк;
		СтрокаРаботники.НомерКарточки	= ВыборкаСотрудник.НомерКарточки;
		
		Выборка = ВыборкаСотрудник.Выбрать(ОбходРезультатаЗапроса.Прямой);
		
		Пока Выборка.Следующий() Цикл
			
			тСуммаОкругления = Мин(СуммаОкругления, Выборка.Сумма);
			СуммаОкругления = Макс(СуммаОкругления - тСуммаОкругления, 0);
						
			// теперь вид взаиморасчетов и счет
			Строка = Зарплата.Добавить();
			
			Строка.Сотрудник			= Выборка.Сотрудник;
			Строка.ПериодВзаиморасчетов	= Выборка.ПериодВзаиморасчетов;
			Строка.СчетУчета			= Выборка.СчетУчета;
			Строка.Выплата				= Выборка.Сумма - тСуммаОкругления;
			Строка.ВыплатаГрязными		= Выборка.Сумма ;
			Строка.Копейки	            = тСуммаОкругления;
			Строка.ДатаНачала           = Выборка.ДатаНачала;
			Строка.ВидРасчета           = Выборка.ВидРасчета;

		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры // Автозаполнение_ОсновнаяВыплата()

// Выполняет заполнение
//
Процедура АвтозаполнениеБольничные(ЭтоДивиденды, ЭтоДоговорники, ЭтоУволенные, МассивСотрудниковДляЗаполнения = Неопределено) Экспорт 
	
	ОкруглятьДо = РегистрыСведений.ИНАГРО_УчетнаяПолитикаПоПерсоналу.Получить(Новый Структура ("Организация", Организация)).ОкруглятьДо;
	// Заполнение ТЧ Зарплата и Работники
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("парамДата", Дата);
	Запрос.УстановитьПараметр("парамПериодРегистрации", ПериодРегистрации);
	Запрос.УстановитьПараметр("парамОрганизация", Организация);
	Запрос.УстановитьПараметр("парамСотрудники", МассивСотрудниковДляЗаполнения);
	Запрос.УстановитьПараметр("парамВидВыплаты", ВидВыплаты);
	Запрос.УстановитьПараметр("парамСсылка", Ссылка);
	Запрос.УстановитьПараметр("Расход", ВидДвиженияНакопления.Расход);
	
	// Отбор больничных за этот период которые оплачены ФСС
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ВзаиморасчетыПоНачислениямЗаСчетФСС.Период,
	|	ВзаиморасчетыПоНачислениямЗаСчетФСС.Документ
	|ИЗ
	|	РегистрНакопления.ИНАГРО_ВзаиморасчетыПоНачислениямЗаСчетФСС КАК ВзаиморасчетыПоНачислениямЗаСчетФСС
	|ГДЕ
	|   ВзаиморасчетыПоНачислениямЗаСчетФСС.Документ.ПериодРегистрации = &парамПериодРегистрации
	|	И ВзаиморасчетыПоНачислениямЗаСчетФСС.Период <= &парамДата
	|	И ВзаиморасчетыПоНачислениямЗаСчетФСС.ВидДвижения = &Расход
	|	И ВзаиморасчетыПоНачислениямЗаСчетФСС.КодОперации = ЗНАЧЕНИЕ(Перечисление.ИНАГРО_КодыОперацийРасчетыСФСС.Получено)
	|";
	СписокРегистраторов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Документ");
	Запрос.УстановитьПараметр("СписокРегистраторов", СписокРегистраторов);	
	
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Начисления.Сотрудник			КАК Сотрудник,
	|	Начисления.ПериодРегистрации 	КАК ПериодВзаиморасчетов,
	|	Начисления.СчетУчета			КАК СчетУчета,
	|	Начисления.ВидРасчета			КАК ВидРасчета,
	|	Начисления.ДатаНачала			КАК ДатаНачала,
	|	СпособыВыплаты.СпособВыплаты,
	|	СпособыВыплаты.Банк,
	|	СпособыВыплаты.НомерКарточки,
	|	ВЫБОР
	|	 КОГДА Начисления.Сумма > ЕСТЬNULL(Выплаты.Сумма,0)
	|	  ТОГДА Начисления.Сумма - ЕСТЬNULL(Выплаты.Сумма,0)
	|	 ИНАЧЕ 0 
	|	КОНЕЦ КАК Сумма
	|ИЗ
	| (ВЫБРАТЬ
	|	Начисления.Сотрудник			КАК Сотрудник,
	|	Начисления.ПериодРегистрации 	КАК ПериодРегистрации,
	|	Начисления.ВидРасчета.СчетУчета	КАК СчетУчета,
	|	Начисления.ВидРасчета			КАК ВидРасчета,
	|	Начисления.ПериодДействияНачало	КАК ДатаНачала,
	|	СУММА(Начисления.Результат)		КАК Сумма
	| 
	|  ИЗ	РегистрРасчета.ИНАГРО_Начисления КАК Начисления
	|  ГДЕ	Начисления.ПериодРегистрации = &парамПериодРегистрации
	|	И	Начисления.Организация = &парамОрганизация
	|	И	Начисления.Сотрудник В (&парамСотрудники)
	|	И	Начисления.Регистратор.Дата <= &парамДата
	|	И Начисления.ВидРасчета.ЭтоБольничные И Начисления.ВидРасчета.НачислениеЗаСчетФСС И Начисления.Регистратор В (&СписокРегистраторов)
	|
	|  СГРУППИРОВАТЬ ПО
	|	Начисления.Сотрудник,
	|	Начисления.ПериодРегистрации,
	|	Начисления.ВидРасчета.СчетУчета,
	|	Начисления.ВидРасчета,
	|	Начисления.ПериодДействияНачало
    |) КАК Начисления
	|ЛЕВОЕ СОЕДИНЕНИЕ
	| (ВЫБРАТЬ
	|	Выплаты.Сотрудник				КАК Сотрудник,
	|	Выплаты.ПериодВзаиморасчетов 	КАК ПериодРегистрации,
	|	Выплаты.СчетУчета				КАК СчетУчета, 
	|	Выплаты.ВидРасчета				КАК ВидРасчета,
	|	Выплаты.ДатаНачала				КАК ДатаНачала,
	|	СУММА(Выплаты.ВыплатаГрязными)	КАК Сумма
	| 
	|  ИЗ	Документ.ИНАГРО_ЗарплатаКВыплатеОрганизаций.Зарплата КАК Выплаты
	|  ГДЕ	Выплаты.Ссылка.ПериодРегистрации = &парамПериодРегистрации
	|	И	Выплаты.Ссылка.Организация = &парамОрганизация
	|	И	Выплаты.Ссылка.ВидВыплаты = &парамВидВыплаты
	|	И	Выплаты.Сотрудник В (&парамСотрудники)
	|	И	Выплаты.Ссылка.Дата <= &парамДата
	|	И	Выплаты.Ссылка.Проведен
	|	И	Выплаты.Ссылка <> &парамСсылка
	|  СГРУППИРОВАТЬ ПО
	|	Выплаты.Сотрудник,
	|	Выплаты.ПериодВзаиморасчетов,
	|	Выплаты.СчетУчета,
	|	Выплаты.ВидРасчета,
	|	Выплаты.ДатаНачала
    |) КАК Выплаты
	| ПО Начисления.Сотрудник = Выплаты.Сотрудник
	|  И Начисления.ПериодРегистрации = Выплаты.ПериодРегистрации
	|  И Начисления.СчетУчета = Выплаты.СчетУчета
	|  И Начисления.ВидРасчета = Выплаты.ВидРасчета
	|  И Начисления.ДатаНачала = Выплаты.ДатаНачала
	| 
	|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИНАГРО_ПараметрыВыплатыЗПРаботников.СрезПоследних(&парамДата,
	|			Организация = &парамОрганизация
	|		И	Сотрудник В (&парамСотрудники)
	|	) КАК СпособыВыплаты
	|ПО	СпособыВыплаты.Сотрудник = Начисления.Сотрудник
	|
	|ГДЕ Начисления.Сумма > ЕСТЬNULL(Выплаты.Сумма,0)
	|
	|УПОРЯДОЧИТЬ ПО 
	|   Начисления.Сотрудник.Наименование, ПериодВзаиморасчетов УБЫВ, СчетУчета  
	|
	|ИТОГИ  
	|	СУММА(Сумма),
	|	МАКСИМУМ(СпособВыплаты),
	|	МАКСИМУМ(Банк),
	|	МАКСИМУМ(НомерКарточки)
	|ПО Сотрудник
	|";
	
	Запрос.Текст = ТекстЗапроса;
	
	СуммаОкругления = 0;
	Сотрудники = Новый СписокЗначений;
	ВыборкаСотрудник = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	
	Пока ВыборкаСотрудник.Следующий() Цикл
			
		Если ВыборкаСотрудник.Сумма = 0 Тогда
			Продолжить;
		КонецЕсли;	
		Сотрудники.Добавить(ВыборкаСотрудник.Сотрудник);
		
		Если ОкруглятьДо > 0.01 Тогда
			СуммаОкругления = ВыборкаСотрудник.Сумма - Цел(ВыборкаСотрудник.Сумма/ОкруглятьДо)*ОкруглятьДо;
		КонецЕсли;
		
		СтрокаРаботники = РаботникиОрганизации.Добавить();
		
		СтрокаРаботники.Сотрудник		= ВыборкаСотрудник.Сотрудник;
		СтрокаРаботники.Выплата			= ВыборкаСотрудник.Сумма - СуммаОкругления;
		СтрокаРаботники.Копейки			= СуммаОкругления;
		СтрокаРаботники.СуммаГрязными	= ВыборкаСотрудник.Сумма;
		
		СтрокаРаботники.ВыплаченностьЗарплаты = Перечисления.ВыплаченностьЗарплаты.Выплачено;
		СтрокаРаботники.СпособВыплаты	= ?(ВыборкаСотрудник.СпособВыплаты= NULL, Перечисления.СпособыВыплатыЗарплаты.ЧерезКассу, ВыборкаСотрудник.СпособВыплаты);
		СтрокаРаботники.Банк			= ВыборкаСотрудник.Банк;
		СтрокаРаботники.НомерКарточки	= ВыборкаСотрудник.НомерКарточки;
		
		Выборка = ВыборкаСотрудник.Выбрать(ОбходРезультатаЗапроса.Прямой);

		
		Пока Выборка.Следующий() Цикл
			
			тСуммаОкругления = Мин(СуммаОкругления, Выборка.Сумма);
			СуммаОкругления = Макс(СуммаОкругления - тСуммаОкругления, 0);

			Строка = Зарплата.Добавить();
			Строка.Сотрудник			= Выборка.Сотрудник;
			Строка.ПериодВзаиморасчетов	= Выборка.ПериодВзаиморасчетов;
			Строка.СчетУчета			= Выборка.СчетУчета;
			Строка.ВидРасчета			= Выборка.ВидРасчета;
			Строка.ДатаНачала			= Выборка.ДатаНачала;
			Строка.Выплата				= Выборка.Сумма - тСуммаОкругления;
			Строка.ВыплатаГрязными    = Строка.Выплата;
			Строка.Копейки	= тСуммаОкругления;
						
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры // Автозаполнение_ОсновнаяВыплата()

// Процедура заполнения табличных частей РаботникиОрганизации, Зарплата
// данными по авансам.
Процедура АвтозаполнениеАванс(ЭтоДивиденды, ЭтоДоговорники, ЭтоУволенные, МассивСотрудниковДляЗаполнения = Неопределено)
	
	// Просто заполняем работников организации, а суммы бухгалтер проставит вручную
	// возможно будет механизм и для заполнения сумм.
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("парамОрганизация", Организация);
	Запрос.УстановитьПараметр("парамНачало", ПериодРегистрации);
	Запрос.УстановитьПараметр("парамКонец", КонецМесяца( ПериодРегистрации ) );
	Запрос.УстановитьПараметр("парамПодразделение", ПодразделениеОрганизации);
	Запрос.УстановитьПараметр("парамСотрудники",	МассивСотрудниковДляЗаполнения);
	Запрос.УстановитьПараметр("ПустаяДата",	Дата('00010101')); 
	Запрос.УстановитьПараметр("ДатаДокумента",	Дата); 
	
	ТекстЗапроса = "ВЫБРАТЬ РАЗЛИЧНЫЕ РАЗРЕШЕННЫЕ
		|	Работники.Сотрудник,
		|	ЕстьNull(АвансыРаботникамОрганизаций.СуммаАванса,0) КАК СуммаАванса,
		|	СпособыВыплаты.СпособВыплаты,
		|	СпособыВыплаты.Банк,
		|	СпособыВыплаты.НомерКарточки
		|ИЗ	РегистрСведений.ИНАГРО_РаботникиОрганизаций.СрезПоследних(&парамКонец, Организация = &парамОрганизация И Сотрудник В (&парамСотрудники)) КАК Работники
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АвансыСотрудникам КАК АвансыРаботникамОрганизаций
		|	ПО		Работники.Сотрудник = АвансыРаботникамОрганизаций.Сотрудник
		|		И	АвансыРаботникамОрганизаций.Организация = &парамОрганизация
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИНАГРО_ПараметрыВыплатыЗПРаботников.СрезПоследних(&парамКонец, Организация = &парамОрганизация) КАК СпособыВыплаты
		|ПО		СпособыВыплаты.Сотрудник = Работники.Сотрудник
		|
		|ГДЕ	(Работники.ПричинаИзмененияСостояния <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
		|		ИЛИ Работники.Период > &парамНачало)
		|
		|УПОРЯДОЧИТЬ ПО
		|   Работники.Сотрудник.Наименование"; 
		
	Запрос.Текст = ТекстЗапроса;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		// ТЧ РаботникиОрганизации
		НоваяСтрока = РаботникиОрганизации.Добавить();
		
		НоваяСтрока.Сотрудник		= Выборка.Сотрудник;
		НоваяСтрока.Выплата			= Выборка.СуммаАванса;
		НоваяСтрока.СуммаГрязными			= Выборка.СуммаАванса;  //*1.5
		НоваяСтрока.ВыплаченностьЗарплаты	= Перечисления.ВыплаченностьЗарплаты.Выплачено;
		НоваяСтрока.СпособВыплаты			= ?(Выборка.СпособВыплаты= NULL, Перечисления.СпособыВыплатыЗарплаты.ЧерезКассу, Выборка.СпособВыплаты);
		НоваяСтрока.Банк					= Выборка.Банк;
		НоваяСтрока.НомерКарточки			= Выборка.НомерКарточки;
		
		// ТЧ Зарплата
		НоваяСтрока = Зарплата.Добавить();
		
		НоваяСтрока.Сотрудник				= Выборка.Сотрудник;
		НоваяСтрока.Выплата					= Выборка.СуммаАванса;
		НоваяСтрока.СчетУчета				= ВидВыплаты.СчетУчета;
		НоваяСтрока.ПериодВзаиморасчетов	= ПериодРегистрации;
		НоваяСтрока.ВыплатаГрязными	= Выборка.СуммаАванса;
		
	КонецЦикла;
	
	// Сразу можно заполнить и рассчитать взносы и НДФЛ
	
КонецПроцедуры //  Автозаполнение_Аванс

// Процедура заполнения табличных частей РаботникиОрганизации, Зарплата
// данными по межрасчетным выплатам.	
Процедура АвтозаполнениеМежрасчетныеВыплаты(МассивСотрудниковДляЗаполнения) 
	
	ОкруглятьДо = РегистрыСведений.ИНАГРО_УчетнаяПолитикаПоПерсоналу.Получить(Новый Структура ("Организация", Организация)).ОкруглятьДо;
	
	// Заполнение ТЧ Зарплата и Работники
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("парамДата", Дата);
	Запрос.УстановитьПараметр("парамПериодРегистрации", ПериодРегистрации);
	Запрос.УстановитьПараметр("парамОрганизация", Организация);
	Запрос.УстановитьПараметр("парамСотрудники", МассивСотрудниковДляЗаполнения);
	Запрос.УстановитьПараметр("парамВидРасчета", ВидВыплаты.ИНАГРО_ВидРасчета);
	Запрос.УстановитьПараметр("парамВидВыплаты", ВидВыплаты);
	Запрос.УстановитьПараметр("парамСсылка", Ссылка);
	
	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	Начисления.Сотрудник КАК Сотрудник,
	               |	Начисления.ПериодРегистрации КАК ПериодВзаиморасчетов,
	               |	Начисления.СчетУчета КАК СчетУчета,
	               |	Начисления.ВидРасчета КАК ВидРасчета,
	               |	Начисления.ДатаНачала КАК ДатаНачала,
	               |	СпособыВыплаты.СпособВыплаты КАК СпособВыплаты,
	               |	СпособыВыплаты.Банк КАК Банк,
	               |	СпособыВыплаты.НомерКарточки КАК НомерКарточки,
	               |	ВЫБОР
	               |		КОГДА Начисления.Сумма > ЕСТЬNULL(Выплаты.Сумма, 0)
	               |			ТОГДА Начисления.Сумма - ЕСТЬNULL(Выплаты.Сумма, 0)
	               |		ИНАЧЕ 0
	               |	КОНЕЦ КАК Сумма
	               |ИЗ
	               |	(ВЫБРАТЬ
	               |		Начисления.Сотрудник КАК Сотрудник,
	               |		Начисления.ПериодРегистрации КАК ПериодРегистрации,
	               |		Начисления.ВидРасчета.СчетУчета КАК СчетУчета,
	               |		Начисления.ВидРасчета КАК ВидРасчета,
	               |		Начисления.ПериодДействияНачало КАК ДатаНачала,
	               |		СУММА(Начисления.Результат) КАК Сумма
	               |	ИЗ
	               |		РегистрРасчета.ИНАГРО_Начисления КАК Начисления
	               |	ГДЕ
	               |		Начисления.ПериодРегистрации = &парамПериодРегистрации
	               |		И Начисления.Организация = &парамОрганизация
	               |		И Начисления.Сотрудник В(&парамСотрудники)
	               |		И Начисления.Регистратор.Дата <= &парамДата
	               |		И Начисления.ВидРасчета В(&парамВидРасчета)
	               |	
	               |	СГРУППИРОВАТЬ ПО
	               |		Начисления.Сотрудник,
	               |		Начисления.ПериодРегистрации,
	               |		Начисления.ВидРасчета.СчетУчета,
	               |		Начисления.ВидРасчета,
	               |		Начисления.ПериодДействияНачало) КАК Начисления
	               |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	               |			Выплаты.Сотрудник КАК Сотрудник,
	               |			Выплаты.ПериодВзаиморасчетов КАК ПериодРегистрации,
	               |			Выплаты.СчетУчета КАК СчетУчета,
	               |			Выплаты.ВидРасчета КАК ВидРасчета,
	               |			Выплаты.ДатаНачала КАК ДатаНачала,
	               |			СУММА(Выплаты.ВыплатаГрязными) КАК Сумма
	               |		ИЗ
	               |			Документ.ИНАГРО_ЗарплатаКВыплатеОрганизаций.Зарплата КАК Выплаты
	               |		ГДЕ
	               |			Выплаты.Ссылка.ПериодРегистрации = &парамПериодРегистрации
	               |			И Выплаты.Ссылка.Организация = &парамОрганизация
	               |			И Выплаты.Ссылка.ВидВыплаты = &парамВидВыплаты
	               |			И Выплаты.Сотрудник В(&парамСотрудники)
	               |			И Выплаты.Ссылка.Дата <= &парамДата
	               |			И Выплаты.Ссылка.Проведен
	               |			И Выплаты.Ссылка <> &парамСсылка
	               |		
	               |		СГРУППИРОВАТЬ ПО
	               |			Выплаты.Сотрудник,
	               |			Выплаты.ПериодВзаиморасчетов,
	               |			Выплаты.СчетУчета,
	               |			Выплаты.ВидРасчета,
	               |			Выплаты.ДатаНачала) КАК Выплаты
	               |		ПО Начисления.Сотрудник = Выплаты.Сотрудник
	               |			И Начисления.ПериодРегистрации = Выплаты.ПериодРегистрации
	               |			И Начисления.СчетУчета = Выплаты.СчетУчета
	               |			И Начисления.ВидРасчета = Выплаты.ВидРасчета
	               |			И Начисления.ДатаНачала = Выплаты.ДатаНачала
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИНАГРО_ПараметрыВыплатыЗПРаботников.СрезПоследних(
	               |				&парамДата,
	               |				Организация = &парамОрганизация
	               |					И Сотрудник В (&парамСотрудники)) КАК СпособыВыплаты
	               |		ПО (СпособыВыплаты.Сотрудник = Начисления.Сотрудник)
	               |ГДЕ
	               |	Начисления.Сумма > ЕСТЬNULL(Выплаты.Сумма, 0)
	               |ИТОГИ
	               |	МАКСИМУМ(СпособВыплаты),
	               |	МАКСИМУМ(Банк),
	               |	МАКСИМУМ(НомерКарточки),
	               |	СУММА(Сумма)
	               |ПО
	               |	Сотрудник";
	
	
	
	Запрос.Текст = ТекстЗапроса;
	
	СуммаОкругления = 0;
	Сотрудники = Новый СписокЗначений;
	ВыборкаСотрудник = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаСотрудник.Следующий() Цикл
		
		Сотрудники.Добавить(ВыборкаСотрудник.Сотрудник);
		
		Если ОкруглятьДо > 0.01 Тогда
			СуммаОкругления = ВыборкаСотрудник.Сумма - Цел(ВыборкаСотрудник.Сумма/ОкруглятьДо)*ОкруглятьДо;
		КонецЕсли;
		
		СтрокаРаботники = РаботникиОрганизации.Добавить();
		
		СтрокаРаботники.Сотрудник		= ВыборкаСотрудник.Сотрудник;
		СтрокаРаботники.Выплата			= ВыборкаСотрудник.Сумма - СуммаОкругления;
		СтрокаРаботники.Копейки			= СуммаОкругления;
		СтрокаРаботники.СуммаГрязными	= ВыборкаСотрудник.Сумма;
		
		СтрокаРаботники.ВыплаченностьЗарплаты = Перечисления.ВыплаченностьЗарплаты.Выплачено;
		СтрокаРаботники.СпособВыплаты	= ?(ВыборкаСотрудник.СпособВыплаты= NULL, Перечисления.СпособыВыплатыЗарплаты.ЧерезКассу, ВыборкаСотрудник.СпособВыплаты);
		СтрокаРаботники.Банк			= ВыборкаСотрудник.Банк;
		СтрокаРаботники.НомерКарточки	= ВыборкаСотрудник.НомерКарточки;
		
		Выборка = ВыборкаСотрудник.Выбрать(ОбходРезультатаЗапроса.Прямой);
		Пока Выборка.Следующий() Цикл
			
			тСуммаОкругления = Мин(СуммаОкругления, Выборка.Сумма);
			СуммаОкругления = Макс(СуммаОкругления - тСуммаОкругления, 0);

			Строка = Зарплата.Добавить();
			Строка.Сотрудник			= Выборка.Сотрудник;
			Строка.ПериодВзаиморасчетов	= Выборка.ПериодВзаиморасчетов;
			Строка.ВидРасчета			= Выборка.ВидРасчета;
			Строка.СчетУчета			= Выборка.СчетУчета;
			Строка.ДатаНачала			= Выборка.ДатаНачала;
			Строка.Выплата				= Выборка.Сумма - тСуммаОкругления;
			Строка.ВыплатаГрязными		= Выборка.Сумма - тСуммаОкругления;
			Строка.Копейки				= тСуммаОкругления;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры // Автозаполнение_МежрасчетныеВыплаты()

// Процедура заполнения табличных частей РаботникиОрганизации, Зарплата
// обобщающими данными.
Процедура АвтозаполнениеЗакрытиеПериода(МассивСотрудниковДляЗаполнения) 
	
	АвтозаполнениеЗакрытиеПериодаСотрудники(МассивСотрудниковДляЗаполнения);
	АвтозаполнениеЗакрытиеПериодаНДФЛ(МассивСотрудниковДляЗаполнения);
	АвтозаполнениеЗакрытиеПериодаВзносы();
	
КонецПроцедуры // Автозаполнение_ЗакрытиеПериода()

Процедура АвтозаполнениеЗакрытиеПериодаСотрудники(МассивСотрудниковДляЗаполнения) Экспорт
	
	// Заполнение проблем РН ВзаиморасчетыСРаботникамиОрганизаций. 
	// (по списку работникам, которые удовлетворяют условиям шапки документа).
	Если Истина Тогда
		
		// Получаем только отрицательные остатки и перекидываем их. 
		// на текущий месяц в надежде что начисленные суммы их покроют.
		// Наверно в каком-то месяце выплатили больше чем начислили.
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("парамОрганизация", Организация);
		Запрос.УстановитьПараметр("ПериодРегистрации", ДобавитьМесяц(ПериодРегистрации, 1));
		Запрос.УстановитьПараметр("парамСотрудники", МассивСотрудниковДляЗаполнения);
		
		ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
           |	Основной.Сотрудник КАК Сотрудник,
           |	Основной.ПериодВзаиморасчетов КАК ПериодВзаиморасчетов,
           |	Основной.СчетУчета КАК СчетУчета,
           |	-Основной.СуммаВзаиморасчетовОстаток КАК Сумма
           |ИЗ
           |	РегистрНакопления.ВзаиморасчетыССотрудниками.Остатки(
           |			КОНЕЦПЕРИОДА(&ПериодРегистрации, МЕСЯЦ),
           |			Организация = &парамОрганизация
           |				И Сотрудник В (&парамСотрудники)
           |				И НАЧАЛОПЕРИОДА(ПериодВзаиморасчетов, МЕСЯЦ) < &ПериодРегистрации) КАК Основной
           |ГДЕ
           |	Основной.СуммаВзаиморасчетовОстаток < 0";
		
		Запрос.Текст = ТекстЗапроса;
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			
			// Никаких округлений тут не учитываем.
			
			// Первое движение закрывает проблемный период. 
			// Внимание! в запросе только отрицательные суммы, потому первое движение всегда "+" второе "-".
			СтрокаПараметры = Зарплата.Добавить();
			СтрокаПараметры.Сотрудник				= Выборка.Сотрудник;
			СтрокаПараметры.ПериодВзаиморасчетов	= Выборка.ПериодВзаиморасчетов;
			СтрокаПараметры.СчетУчета				= Выборка.СчетУчета;
			СтрокаПараметры.Выплата					= - Выборка.Сумма;
			СтрокаПараметры.ВыплатаГрязными    		= - Выборка.Сумма;
			
			// Второе движение перебрасывает проблемную сумму на  период регистрации.
			СтрокаПараметры = Зарплата.Добавить();
			СтрокаПараметры.Сотрудник				= Выборка.Сотрудник;
			СтрокаПараметры.ПериодВзаиморасчетов	= ДобавитьМесяц(ПериодРегистрации, 1);
			СтрокаПараметры.СчетУчета				= Выборка.СчетУчета;
			СтрокаПараметры.Выплата					= Выборка.Сумма;
			СтрокаПараметры.ВыплатаГрязными    		= Выборка.Сумма;
			
		КонецЦикла;
		
	КонецЕсли;	
	
КонецПроцедуры // АвтозаполнениеЗакрытиеПериодаСотрудники()

Процедура АвтозаполнениеЗакрытиеПериодаНДФЛ(МассивСотрудниковДляЗаполнения) Экспорт
	
	// Заполнение ТЧ НДФЛ (по списку работникам, которые удовлетворяют. 
	// условиям шапки документа).
	Если Истина Тогда
		
		// В два этапа:
		// На первом, определяем есть ли суммы оплаченные без ведомости.
		// На втором, переносим суммы переплат по работникам на следующий период и распределяем суммы без ведомости.
		
		// 1
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Дата",	Дата);
		Запрос.УстановитьПараметр("ПериодРегистрации", ДобавитьМесяц(ПериодРегистрации, 1));
		Запрос.УстановитьПараметр("парамОрганизация", Организация);
		
		ТекстЗапроса =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ВЫБОР
			|		КОГДА Основной.ДоходНДФЛ = ЗНАЧЕНИЕ(Справочник.ВидыДоходовНДФЛ.ВоенныйСбор)
			|			ТОГДА ИСТИНА
			|		ИНАЧЕ ЛОЖЬ
			|	КОНЕЦ КАК ЕстьВоенныйСбор,
			|	Основной.ПериодВзаиморасчетов КАК ПериодВзаиморасчетов,
			|	СУММА(-Основной.НеподтвержденнаяСуммаОстаток) КАК НеподтвержденнаяСумма
			|ИЗ
			|	РегистрНакопления.ВзаиморасчетыПоНДФЛ.Остатки(
			|			&Дата,
			|			Организация = &парамОрганизация
			|				И НАЧАЛОПЕРИОДА(ПериодВзаиморасчетов, МЕСЯЦ) <= &ПериодРегистрации) КАК Основной
			|
			|СГРУППИРОВАТЬ ПО
			|	ВЫБОР
			|		КОГДА Основной.ДоходНДФЛ = ЗНАЧЕНИЕ(Справочник.ВидыДоходовНДФЛ.ВоенныйСбор)
			|			ТОГДА ИСТИНА
			|		ИНАЧЕ ЛОЖЬ
			|	КОНЕЦ,
			|	Основной.ПериодВзаиморасчетов";
		
		Запрос.Текст = ТекстЗапроса;
		тбОплаты = Запрос.Выполнить().Выгрузить();
		тбОплаты.Колонки.Добавить("РаспределенныйНалог", Новый ОписаниеТипов("Число"));
		
		// 2
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Дата",	Дата);
		Запрос.УстановитьПараметр("ПериодРегистрации",	ПериодРегистрации);
		Запрос.УстановитьПараметр("парамОрганизация", Организация);
		Запрос.УстановитьПараметр("парамСотрудники", МассивСотрудниковДляЗаполнения);
		
		ТекстЗапроса =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ВЫБОР
			|		КОГДА Основной.ДоходНДФЛ = ЗНАЧЕНИЕ(Справочник.ВидыДоходовНДФЛ.ВоенныйСбор)
			|			ТОГДА ИСТИНА
			|		ИНАЧЕ ЛОЖЬ
			|	КОНЕЦ КАК ЕстьВоенныйСбор,
			|	Основной.Контрагент КАК Сотрудник,
			|	Основной.ПериодВзаиморасчетов КАК ПериодВзаиморасчетов,
			|	Основной.ДоходНДФЛ КАК ДоходНДФЛ,
			|	Основной.ДоходОстаток КАК Доход,
			|	ВЫБОР
			|		КОГДА Основной.НалогОстаток > 0
			|			ТОГДА Основной.НалогОстаток
			|		ИНАЧЕ 0
			|	КОНЕЦ КАК НеЗакрытыйНалог,
			|	Основной.НалогОстаток КАК Налог
			|ИЗ
			|	РегистрНакопления.ВзаиморасчетыПоНДФЛ.Остатки(
			|			КОНЕЦПЕРИОДА(&ПериодРегистрации, МЕСЯЦ),
			|			Организация = &парамОрганизация
			|				И Контрагент В (&парамСотрудники)
			|				И НАЧАЛОПЕРИОДА(ПериодВзаиморасчетов, МЕСЯЦ) <= &ПериодРегистрации) КАК Основной
			|ИТОГИ
			|	СУММА(НеЗакрытыйНалог)
			|ПО
			|	ЕстьВоенныйСбор,
			|	ПериодВзаиморасчетов";
		
		Запрос.Текст = ТекстЗапроса;
		ВыборкаДоходНДФЛ = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "ЕстьВоенныйСбор");
		Пока ВыборкаДоходНДФЛ.Следующий() Цикл
		ВыборкаПериодВзаиморасчетов = ВыборкаДоходНДФЛ.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);	
		Пока ВыборкаПериодВзаиморасчетов.Следующий() Цикл
			
			// Находим есть ли предоплата.
			НайденныеСтроки = тбОплаты.НайтиСтроки(Новый Структура("ПериодВзаиморасчетов, ЕстьВоенныйСбор", ВыборкаПериодВзаиморасчетов.ПериодВзаиморасчетов, ВыборкаПериодВзаиморасчетов.ЕстьВоенныйСбор));
			
			Если НайденныеСтроки.Количество() = 0 Тогда 
				СтрокаОстатков = Неопределено;
			Иначе 
				СтрокаОстатков = НайденныеСтроки[0];
			КонецЕсли;
			НеЗакрытыйНалог = ВыборкаПериодВзаиморасчетов.НеЗакрытыйНалог;
			
			Выборка = ВыборкаПериодВзаиморасчетов.Выбрать(ОбходРезультатаЗапроса.Прямой);
			Пока Выборка.Следующий() Цикл
				
				Если	Выборка.Доход < 0 ИЛИ Выборка.Налог < 0  Тогда
					// Первое движение закрывает проблемный период. 
					// Внимание! в запросе это отрицательные суммы, потому первое движение всегда "+" второе "-".
					СтрокаНДФЛ = НДФЛ.Добавить();
					СтрокаНДФЛ.Сотрудник			= Выборка.Сотрудник;
					СтрокаНДФЛ.ПериодВзаиморасчетов	= Выборка.ПериодВзаиморасчетов;
					СтрокаНДФЛ.ДоходНДФЛ			= Выборка.ДоходНДФЛ;
					СтрокаНДФЛ.Доход				= - Выборка.Доход;
					СтрокаНДФЛ.Налог				= - Выборка.Налог;
					
					// Второе движение перебрасывает проблемную сумму на  период регистрации.
					СтрокаНДФЛ = НДФЛ.Добавить();
					СтрокаНДФЛ.Сотрудник			= Выборка.Сотрудник;
					СтрокаНДФЛ.ПериодВзаиморасчетов	= ДобавитьМесяц(ПериодРегистрации, 1);
					СтрокаНДФЛ.ДоходНДФЛ			= Выборка.ДоходНДФЛ;
					СтрокаНДФЛ.Доход				= Выборка.Доход;
					СтрокаНДФЛ.Налог				= Выборка.Налог;
					
				ИначеЕсли СтрокаОстатков <> Неопределено Тогда
					
					Если НеЗакрытыйНалог <= СтрокаОстатков.НеподтвержденнаяСумма Тогда
						// Закрываем на полную сумму, а хвост перекинем на следующий период взаиморасчетов.
						СтрокаНДФЛ = НДФЛ.Добавить();
						СтрокаНДФЛ.Сотрудник			= Выборка.Сотрудник;
						СтрокаНДФЛ.ПериодВзаиморасчетов	= Выборка.ПериодВзаиморасчетов;
						СтрокаНДФЛ.ДоходНДФЛ			= Выборка.ДоходНДФЛ;
						СтрокаНДФЛ.Доход				= Выборка.Доход;
						СтрокаНДФЛ.Налог				= Выборка.Налог;
						
						СтрокаОстатков.РаспределенныйНалог = СтрокаОстатков.РаспределенныйНалог + Выборка.Налог;
						
					ИначеЕсли СтрокаОстатков.НеподтвержденнаяСумма <> 0 Тогда
						// Придется сделать пропорцию, если останется копейка бросим на того, на ком вылезла.
						Коэф = СтрокаОстатков.НеподтвержденнаяСумма / НеЗакрытыйНалог;
						тНалог = Окр(Коэф*Выборка.Налог,2);
						СтрокаОстатков.РаспределенныйНалог = СтрокаОстатков.РаспределенныйНалог + тНалог;
						Копейка = 0;
						Если СтрокаОстатков.РаспределенныйНалог - тНалог = 0.01 Тогда
							// копейка вылезла
							Копейка = 0.01;
							СтрокаОстатков.РаспределенныйНалог = СтрокаОстатков.РаспределенныйНалог + Копейка;
						КонецЕсли;
						
						СтрокаНДФЛ = НДФЛ.Добавить();
						СтрокаНДФЛ.Сотрудник			= Выборка.Сотрудник;
						СтрокаНДФЛ.ПериодВзаиморасчетов	= Выборка.ПериодВзаиморасчетов;
						СтрокаНДФЛ.ДоходНДФЛ			= Выборка.ДоходНДФЛ;
						СтрокаНДФЛ.Доход				= Коэф*Выборка.Доход;
						СтрокаНДФЛ.Налог				= тНалог + Копейка;
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		КонецЦикла; 
		
		Для каждого СтрокаОстатков Из тбОплаты Цикл
			
			Если СтрокаОстатков.РаспределенныйНалог > 0 Тогда
				
				СтрокаНДФЛ = НДФЛ.Добавить();
				СтрокаНДФЛ.ПериодВзаиморасчетов		= СтрокаОстатков.ПериодВзаиморасчетов;
				СтрокаНДФЛ.НеподтвержденнаяСумма	= - СтрокаОстатков.НеподтвержденнаяСумма;
				
				Если СтрокаОстатков.НеподтвержденнаяСумма - СтрокаОстатков.РаспределенныйНалог <> 0 Тогда
					СтрокаНДФЛ = НДФЛ.Добавить();
					СтрокаНДФЛ.ПериодВзаиморасчетов		= ДобавитьМесяц(ПериодРегистрации, 1);
					СтрокаНДФЛ.НеподтвержденнаяСумма	= СтрокаОстатков.НеподтвержденнаяСумма - СтрокаОстатков.РаспределенныйНалог;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры // АвтозаполнениеЗакрытиеПериодаНДФЛ()

Процедура АвтозаполнениеЗакрытиеПериодаВзносы(ВидВзносов = "По всем") Экспорт
	
	// тПериодРегистрации = ДобавитьМесяц(ПериодРегистрации, 1);
	
	// Заполнение ТЧ Взносы, ВзносыФОТ (по всей организации).
	// В два этапа:
	// На первом, определяем есть ли суммы оплаченные без ведомости.
	// На втором, переносим суммы переплат по работникам на следующий период и распределяем суммы без ведомости.
	
	// 1.
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Дата",	Дата);
	Запрос.УстановитьПараметр("ПериодРегистрации",	ДобавитьМесяц(ПериодРегистрации, 1));
	Запрос.УстановитьПараметр("парамОрганизация", Организация);
	
	ТекстЗапроса = "
	|		ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Основной.ПериодВзаиморасчетов		КАК ПериодВзаиморасчетов,
	|	Основной.СтатьяНалоговойДекларации	КАК СтатьяНалоговойДекларации,
	|	Основной.Налог						КАК Налог,
	|	СУММА( - Основной.НеподтвержденнаяСуммаОстаток)	КАК НеподтвержденнаяСумма
	|ИЗ РегистрНакопления.ВзаиморасчетыПоВзносамВФонды.Остатки(&Дата, Организация = &парамОрганизация
	|			И	НАЧАЛОПЕРИОДА(ПериодВзаиморасчетов, МЕСЯЦ) <= &ПериодРегистрации
	|	) КАК Основной
	|СГРУППИРОВАТЬ ПО
	|	Основной.ПериодВзаиморасчетов,
	|	Основной.СтатьяНалоговойДекларации,
	|	Основной.Налог
	|";
	
	Запрос.Текст = ТекстЗапроса;
	тбОплаты = Запрос.Выполнить().Выгрузить();
	тбОплаты.Колонки.Добавить("РаспределенныйНалог", Новый ОписаниеТипов("Число"));
	тбОплаты.Колонки.Добавить("ЭтоВзносы", Новый ОписаниеТипов("Булево"));
	
	// 2.	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Дата",	Дата);
	Запрос.УстановитьПараметр("ПериодРегистрации",	ПериодРегистрации);
	Запрос.УстановитьПараметр("парамОрганизация", Организация);
	
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Основной.ПериодВзаиморасчетов			КАК ПериодВзаиморасчетов,
	|	ВидыРасчетовВзносовВФонды.ВидРасчета.СпособРасчета	КАК СпособРасчета,
	|	Основной.Налог							КАК Налог,
	|	Основной.СтатьяНалоговойДекларации		КАК СтатьяНалоговойДекларации,
	|	ВЫБОР КОГДА Основной.СуммаОстаток>0 ТОГДА Основной.СуммаОстаток ИНАЧЕ 0 КОНЕЦ	КАК НеЗакрытыйНалог,
	|	Основной.ИНАГРО_БазаОстаток			КАК База,
	|	Основной.ИНАГРО_БазаВзносаОстаток		КАК БазаВзноса,
	|	Основной.СуммаОстаток		КАК Результат
	|ИЗ РегистрНакопления.ВзаиморасчетыПоВзносамВФонды.Остатки( КОНЕЦПЕРИОДА(&ПериодРегистрации, МЕСЯЦ),	Организация = &парамОрганизация
	|	И	НАЧАЛОПЕРИОДА(ПериодВзаиморасчетов, МЕСЯЦ) <= &ПериодРегистрации
	|	) КАК Основной
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИНАГРО_ВидыРасчетовВзносовВФонды.СрезПоследних(&ПериодРегистрации) КАК ВидыРасчетовВзносовВФонды
	|ПО  Основной.Налог = ВидыРасчетовВзносовВФонды.Налог
	|
	|ИТОГИ СУММА(НеЗакрытыйНалог) 
	|ПО ПериодВзаиморасчетов, Налог, СтатьяНалоговойДекларации
	|";
	
	Запрос.Текст = ТекстЗапроса;
	Отбор = Новый Структура("ПериодВзаиморасчетов, Налог, СтатьяНалоговойДекларации");
	
	ВыборкаПериодВзаиморасчетов = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам,"ПериодВзаиморасчетов");
	Пока ВыборкаПериодВзаиморасчетов.Следующий() Цикл
		
		ВыборкаНалог = ВыборкаПериодВзаиморасчетов.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам,"Налог");
		Пока ВыборкаНалог.Следующий() Цикл
			
			ВыборкаСтатьяНалоговойДекларации = ВыборкаНалог.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам,"СтатьяНалоговойДекларации");
			Пока ВыборкаСтатьяНалоговойДекларации.Следующий() Цикл
				
				НеЗакрытыйНалог = ВыборкаСтатьяНалоговойДекларации.НеЗакрытыйНалог;
				
				// Находим есть ли предоплата
				Отбор.ПериодВзаиморасчетов = ВыборкаСтатьяНалоговойДекларации.ПериодВзаиморасчетов;
				Отбор.Налог = ВыборкаСтатьяНалоговойДекларации.Налог;
				Отбор.СтатьяНалоговойДекларации = ВыборкаСтатьяНалоговойДекларации.СтатьяНалоговойДекларации;
				
				СтрокаОстатков = Неопределено;
				Строки = тбОплаты.НайтиСтроки(Отбор);
				Если Строки.Количество() > 0 Тогда
					СтрокаОстатков = Строки[0];
				КонецЕсли;
				
				Выборка = ВыборкаСтатьяНалоговойДекларации.Выбрать(ОбходРезультатаЗапроса.Прямой);
				Пока Выборка.Следующий() Цикл
					
					Если ВидВзносов = "Взносы" Тогда
						Если Выборка.СпособРасчета = Перечисления.СпособыРасчетаНачислений.ВзносыФОТ Тогда
							Продолжить;
						КонецЕсли;
					ИначеЕсли ВидВзносов = "ВзносыФОТ" Тогда
						Если Выборка.СпособРасчета = Перечисления.СпособыРасчетаНачислений.Взносы Тогда
							Продолжить;
						КонецЕсли;
					КонецЕсли;
					
					Если Выборка.СпособРасчета = Перечисления.СпособыРасчетаНачислений.Взносы Тогда
						ТЧ = Взносы;
						ЭтоВзносы = Истина;
					Иначе
						ТЧ = ВзносыФОТ;
						ЭтоВзносы = Ложь;
					КонецЕсли;
					
					Если	Выборка.База < 0 ИЛИ Выборка.БазаВзноса < 0 ИЛИ Выборка.Результат < 0  Тогда
						// Первое движение закрывает проблемный период. 
						// Внимание! в запросе это отрицательные суммы, потому первое движение всегда "+" второе "-".
						
						СтрокаТЧ = ТЧ.Добавить();
						СтрокаТЧ.ПериодВзаиморасчетов		= Выборка.ПериодВзаиморасчетов;
						СтрокаТЧ.Налог						= Выборка.Налог;
						СтрокаТЧ.СтатьяНалоговойДекларации	= Выборка.СтатьяНалоговойДекларации;
						СтрокаТЧ.База		= - Выборка.База;
						СтрокаТЧ.БазаВзноса	= - Выборка.БазаВзноса;
						СтрокаТЧ.Результат	= - Выборка.Результат;
						
						// Второе движение перебрасывает проблемную сумму на  период регистрации.
						СтрокаТЧ = ТЧ.Добавить();
						СтрокаТЧ.ПериодВзаиморасчетов		= ДобавитьМесяц(ПериодРегистрации, 1);
						СтрокаТЧ.Налог						= Выборка.Налог;
						СтрокаТЧ.СтатьяНалоговойДекларации	= Выборка.СтатьяНалоговойДекларации;
						СтрокаТЧ.База		= Выборка.База;
						СтрокаТЧ.БазаВзноса	= Выборка.БазаВзноса;
						СтрокаТЧ.Результат	= Выборка.Результат;
					ИначеЕсли СтрокаОстатков <> Неопределено Тогда
						
						Если НеЗакрытыйНалог <= СтрокаОстатков.НеподтвержденнаяСумма Тогда
							
							СтрокаОстатков.ЭтоВзносы = ЭтоВзносы;
							СтрокаОстатков.РаспределенныйНалог = СтрокаОстатков.РаспределенныйНалог + Выборка.Результат;
							
							// Закрываем на полную сумму, а хвост перекинем на следующий период взаиморасчетов.
							СтрокаТЧ = ТЧ.Добавить();
							СтрокаТЧ.ПериодВзаиморасчетов		= Выборка.ПериодВзаиморасчетов;
							СтрокаТЧ.Налог						= Выборка.Налог;
							СтрокаТЧ.СтатьяНалоговойДекларации	= Выборка.СтатьяНалоговойДекларации;
							СтрокаТЧ.База		= Выборка.База;
							СтрокаТЧ.БазаВзноса	= Выборка.БазаВзноса;
							СтрокаТЧ.Результат	= Выборка.Результат;
							
						ИначеЕсли СтрокаОстатков.НеподтвержденнаяСумма <> 0 Тогда
							
							СтрокаОстатков.ЭтоВзносы = ЭтоВзносы;
							// Придется сделать пропорцию, если останется копейка бросим на того, на ком вылезла.
							Коэф = СтрокаОстатков.НеподтвержденнаяСумма / НеЗакрытыйНалог;
							тРезультат = Окр(Коэф*Выборка.Результат,2);
							СтрокаОстатков.РаспределенныйНалог = СтрокаОстатков.РаспределенныйНалог + тРезультат;
							Копейка = 0;
							Если СтрокаОстатков.РаспределенныйНалог - тРезультат = 0.01 Тогда
								// Копейка вылезла.
								Копейка = 0.01;
								СтрокаОстатков.РаспределенныйНалог = СтрокаОстатков.РаспределенныйНалог + Копейка;
							КонецЕсли;
							
							СтрокаТЧ = ТЧ.Добавить();
							СтрокаТЧ.ПериодВзаиморасчетов		= Выборка.ПериодВзаиморасчетов;
							СтрокаТЧ.Налог						= Выборка.Налог;
							СтрокаТЧ.СтатьяНалоговойДекларации	= Выборка.СтатьяНалоговойДекларации;
							СтрокаТЧ.База		= Коэф*Выборка.База;
							СтрокаТЧ.БазаВзноса	= Коэф*Выборка.БазаВзноса;
							СтрокаТЧ.Результат	= тРезультат + Копейка;
							
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Для каждого СтрокаОстатков Из тбОплаты Цикл
		
		Если СтрокаОстатков.РаспределенныйНалог > 0 Тогда
			
			Если СтрокаОстатков.ЭтоВзносы Тогда
				ТЧ = Взносы;
			Иначе
				ТЧ = ВзносыФОТ;
			КонецЕсли;
			
			СтрокаТЧ = ТЧ.Добавить();
			СтрокаТЧ.ПериодВзаиморасчетов		= СтрокаОстатков.ПериодВзаиморасчетов;
			СтрокаТЧ.Налог						= СтрокаОстатков.Налог;
			СтрокаТЧ.СтатьяНалоговойДекларации	= СтрокаОстатков.СтатьяНалоговойДекларации;
			СтрокаТЧ.НеподтвержденнаяСумма		= - СтрокаОстатков.НеподтвержденнаяСумма;
			
			Если СтрокаОстатков.НеподтвержденнаяСумма - СтрокаОстатков.РаспределенныйНалог <> 0 Тогда
				СтрокаТЧ = ТЧ.Добавить();
				СтрокаТЧ.ПериодВзаиморасчетов		= ДобавитьМесяц(ПериодРегистрации, 1);
				СтрокаТЧ.Налог						= СтрокаОстатков.Налог;
				СтрокаТЧ.СтатьяНалоговойДекларации	= СтрокаОстатков.СтатьяНалоговойДекларации;
				СтрокаТЧ.НеподтвержденнаяСумма		= СтрокаОстатков.НеподтвержденнаяСумма - СтрокаОстатков.РаспределенныйНалог;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // Автозаполнение_ЗакрытиеПериода()

Процедура АвтозаполнениеЗакрытиеПериодаВзаиморасчеты(МассивСотрудниковДляЗаполнения) 
		
	// В два этапа:
	// На первом, определяем есть ли суммы оплаченные без ведомости.
	// На втором, переносим суммы переплат по работникам на следующий период и распределяем суммы без ведомости.
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Дата",	Дата);
	Запрос.УстановитьПараметр("ПериодРегистрации",НачалоМесяца(ПериодРегистрации));
	Запрос.УстановитьПараметр("парамОрганизация", Организация);
	
	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
       |	Основной.ПериодВзаиморасчетов КАК ПериодВзаиморасчетов,
       |	СУММА(-Основной.НеподтвержденнаяСуммаОстаток) КАК НеподтвержденнаяСумма,
       |	Основной.ДоходНДФЛ
       |ИЗ
       |	РегистрНакопления.ВзаиморасчетыПоНДФЛ.Остатки(
       |			&Дата,
       |			Организация = &парамОрганизация
       |				И НАЧАЛОПЕРИОДА(ПериодВзаиморасчетов, МЕСЯЦ) <= &ПериодРегистрации) КАК Основной
       |
       |СГРУППИРОВАТЬ ПО
       |	Основной.ПериодВзаиморасчетов,
       |	Основной.ДоходНДФЛ";
	
	Запрос.Текст = ТекстЗапроса;
	тбОплаты = Запрос.Выполнить().Выгрузить();
	тбОплаты.Колонки.Добавить("РаспределенныйНалог", Новый ОписаниеТипов("Число"));
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Дата",	Дата);
	Запрос.УстановитьПараметр("ПериодРегистрации",	ПериодРегистрации);
	Запрос.УстановитьПараметр("парамОрганизация", Организация);
	Запрос.УстановитьПараметр("парамСотрудники", МассивСотрудниковДляЗаполнения);
	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
       |	Основной.Контрагент КАК Сотрудник,
       |	Основной.ПериодВзаиморасчетов КАК ПериодВзаиморасчетов,
       |	Основной.ДоходНДФЛ КАК ДоходНДФЛ,
       |	Основной.ДоходОстаток КАК Доход,
       |	ВЫБОР
       |		КОГДА Основной.НалогОстаток > 0
       |			ТОГДА Основной.НалогОстаток
       |		ИНАЧЕ 0
       |	КОНЕЦ КАК НеЗакрытыйНалог,
       |	Основной.НалогОстаток КАК Налог
       |ИЗ
       |	РегистрНакопления.ВзаиморасчетыПоНДФЛ.Остатки(
       |			&Дата,
       |			Организация = &парамОрганизация
       |				И Контрагент В (&парамСотрудники)
       |				И НАЧАЛОПЕРИОДА(ПериодВзаиморасчетов, МЕСЯЦ) <= &ПериодРегистрации) КАК Основной
       |ИТОГИ
       |	СУММА(НеЗакрытыйНалог)
       |ПО
       |	ПериодВзаиморасчетов";
	
	Запрос.Текст = ТекстЗапроса;
	ВыборкаПериодВзаиморасчетов = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам,"ПериодВзаиморасчетов");
	Пока ВыборкаПериодВзаиморасчетов.Следующий() Цикл
		
		// Находим есть ли предоплата
		СтрокаОстатков = тбОплаты.Найти(ВыборкаПериодВзаиморасчетов.ПериодВзаиморасчетов,"ПериодВзаиморасчетов");
		НеЗакрытыйНалог = ВыборкаПериодВзаиморасчетов.НеЗакрытыйНалог;
		
		Выборка = ВыборкаПериодВзаиморасчетов.Выбрать(ОбходРезультатаЗапроса.Прямой);
		Пока Выборка.Следующий() Цикл
			
			Если СтрокаОстатков <> Неопределено Тогда
				
				Если НеЗакрытыйНалог <= СтрокаОстатков.НеподтвержденнаяСумма Тогда
					// Закрываем на полную сумму, а хвост перекинем на следующий период взаиморасчетов.
					СтрокаНДФЛ = НДФЛ.Добавить();
					СтрокаНДФЛ.Сотрудник			= Выборка.Сотрудник;
					СтрокаНДФЛ.НалоговыйПериод	= Выборка.ПериодВзаиморасчетов;
					СтрокаНДФЛ.ПериодВзаиморасчетов	= Выборка.ПериодВзаиморасчетов;
					СтрокаНДФЛ.ДоходНДФЛ			= Выборка.ДоходНДФЛ;
					СтрокаНДФЛ.Доход				= Выборка.Доход;
					СтрокаНДФЛ.Налог				= Выборка.Налог;
					
					СтрокаОстатков.РаспределенныйНалог = СтрокаОстатков.РаспределенныйНалог + Выборка.Налог;
					
				ИначеЕсли СтрокаОстатков.НеподтвержденнаяСумма <> 0 Тогда
					// Придется сделать пропорцию, если останется копейка бросим на того, на ком вылезла.
					Коэф = ?(НеЗакрытыйНалог=0,0,СтрокаОстатков.НеподтвержденнаяСумма / НеЗакрытыйНалог);
					тНалог = Окр(Коэф*Выборка.Налог,2);
					СтрокаОстатков.РаспределенныйНалог = СтрокаОстатков.РаспределенныйНалог + тНалог;
					Копейка = 0;
					Если СтрокаОстатков.РаспределенныйНалог - тНалог = 0.01 Тогда
						// Копейка вылезла
						Копейка = 0.01;
						СтрокаОстатков.РаспределенныйНалог = СтрокаОстатков.РаспределенныйНалог + Копейка;
					КонецЕсли;
					
					СтрокаНДФЛ = НДФЛ.Добавить();
					СтрокаНДФЛ.Сотрудник			= Выборка.Сотрудник;
					СтрокаНДФЛ.НалоговыйПериод		= Выборка.ПериодВзаиморасчетов;
					СтрокаНДФЛ.ДоходНДФЛ			= Выборка.ДоходНДФЛ;
					СтрокаНДФЛ.Доход				= Коэф*Выборка.Доход;
					СтрокаНДФЛ.Налог				= тНалог + Копейка;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Для каждого СтрокаОстатков Из тбОплаты Цикл
		
		Если СтрокаОстатков.РаспределенныйНалог > 0 Тогда
			
			СтрокаНДФЛ = НДФЛ.Добавить();
			СтрокаНДФЛ.НалоговыйПериод				= СтрокаОстатков.ПериодВзаиморасчетов;
			СтрокаНДФЛ.НеподтвержденнаяСумма		= - СтрокаОстатков.НеподтвержденнаяСумма;
			
			Если СтрокаОстатков.НеподтвержденнаяСумма - СтрокаОстатков.РаспределенныйНалог <> 0 Тогда
				СтрокаНДФЛ = НДФЛ.Добавить();
				СтрокаНДФЛ.НалоговыйПериод			= ДобавитьМесяц(ПериодРегистрации, 1);
				СтрокаНДФЛ.НеподтвержденнаяСумма	= СтрокаОстатков.НеподтвержденнаяСумма - СтрокаОстатков.РаспределенныйНалог;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Заполнение ТЧ Взносы, ВзносыФОТ (по всей организации).
	// В два этапа:
	// На первом, определяем есть ли суммы оплаченные без ведомости.
	// На втором, переносим суммы переплат по работникам на следующий период и распределяем суммы без ведомости.
	
	// 1.
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Дата",	Дата);
	Запрос.УстановитьПараметр("ПериодРегистрации",	НачалоМесяца(ПериодРегистрации));
	Запрос.УстановитьПараметр("парамОрганизация", Организация);
	
	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
       |	Основной.ПериодВзаиморасчетов КАК ПериодВзаиморасчетов,
       |	Основной.СтатьяНалоговойДекларации КАК СтатьяНалоговойДекларации,
       |	Основной.Налог КАК Налог,
       |	СУММА(-Основной.НеподтвержденнаяСуммаОстаток) КАК НеподтвержденнаяСумма
       |ИЗ
       |	РегистрНакопления.ВзаиморасчетыПоВзносамВФонды.Остатки(
       |			&Дата,
       |			Организация = &парамОрганизация
       |				И НАЧАЛОПЕРИОДА(ПериодВзаиморасчетов, МЕСЯЦ) <= &ПериодРегистрации) КАК Основной
       |
       |СГРУППИРОВАТЬ ПО
       |	Основной.ПериодВзаиморасчетов,
       |	Основной.СтатьяНалоговойДекларации,
       |	Основной.Налог";
	
	Запрос.Текст = ТекстЗапроса;
	тбОплаты = Запрос.Выполнить().Выгрузить();
	тбОплаты.Колонки.Добавить("РаспределенныйНалог", Новый ОписаниеТипов("Число"));
	тбОплаты.Колонки.Добавить("ЭтоВзносы", Новый ОписаниеТипов("Булево"));
	
	// 2.	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Дата",	Дата);
	Запрос.УстановитьПараметр("ПериодРегистрации",	НачалоМесяца(ПериодРегистрации));
	Запрос.УстановитьПараметр("парамОрганизация", Организация);
	
	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
       |	Основной.ПериодВзаиморасчетов КАК ПериодВзаиморасчетов,
       |	ВидыРасчетовВзносовВФонды.ВидРасчета.СпособРасчета КАК СпособРасчета,
       |	Основной.Налог КАК Налог,
       |	Основной.СтатьяНалоговойДекларации КАК СтатьяНалоговойДекларации,
       |	ВЫБОР
       |		КОГДА Основной.СуммаОстаток > 0
       |			ТОГДА Основной.СуммаОстаток
       |		ИНАЧЕ 0
       |	КОНЕЦ КАК НеЗакрытыйНалог,
       |	Основной.ИНАГРО_БазаОстаток КАК База,
       |	Основной.ИНАГРО_БазаВзносаОстаток КАК БазаВзноса,
       |	Основной.СуммаОстаток КАК Результат
       |ИЗ
       |	РегистрНакопления.ВзаиморасчетыПоВзносамВФонды.Остатки(
       |			&Дата,
       |			Организация = &парамОрганизация
       |				И НАЧАЛОПЕРИОДА(ПериодВзаиморасчетов, МЕСЯЦ) <= &ПериодРегистрации) КАК Основной
       |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИНАГРО_ВидыРасчетовВзносовВФонды.СрезПоследних(&ПериодРегистрации, ) КАК ВидыРасчетовВзносовВФонды
       |		ПО Основной.Налог = ВидыРасчетовВзносовВФонды.Налог
       |ИТОГИ
       |	СУММА(НеЗакрытыйНалог)
       |ПО
       |	ПериодВзаиморасчетов,
       |	Налог,
       |	СтатьяНалоговойДекларации";
	
	Запрос.Текст = ТекстЗапроса;
	Отбор = Новый Структура("ПериодВзаиморасчетов, Налог, СтатьяНалоговойДекларации");
	
	ВыборкаПериодВзаиморасчетов = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам,"ПериодВзаиморасчетов");
	Пока ВыборкаПериодВзаиморасчетов.Следующий() Цикл
		
		ВыборкаНалог = ВыборкаПериодВзаиморасчетов.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам,"Налог");
		Пока ВыборкаНалог.Следующий() Цикл
			
			ВыборкаСтатьяНалоговойДекларации = ВыборкаНалог.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам,"СтатьяНалоговойДекларации");
			Пока ВыборкаСтатьяНалоговойДекларации.Следующий() Цикл
				
				НеЗакрытыйНалог = ВыборкаСтатьяНалоговойДекларации.НеЗакрытыйНалог;
				
				// Находим есть ли предоплата
				Отбор.ПериодВзаиморасчетов = ВыборкаСтатьяНалоговойДекларации.ПериодВзаиморасчетов;
				Отбор.Налог = ВыборкаСтатьяНалоговойДекларации.Налог;
				Отбор.СтатьяНалоговойДекларации = ВыборкаСтатьяНалоговойДекларации.СтатьяНалоговойДекларации;
				
				СтрокаОстатков = Неопределено;
				Строки = тбОплаты.НайтиСтроки(Отбор);
				Если Строки.Количество() > 0 Тогда
					СтрокаОстатков = Строки[0];
				КонецЕсли;
				
				Выборка = ВыборкаСтатьяНалоговойДекларации.Выбрать(ОбходРезультатаЗапроса.Прямой);
				Пока Выборка.Следующий() Цикл
					
					Если Выборка.СпособРасчета = Перечисления.СпособыРасчетаНачислений.Взносы Тогда
						ТЧ = Взносы;
						ЭтоВзносы = Истина;
					Иначе
						ТЧ = ВзносыФОТ;
						ЭтоВзносы = Ложь;
					КонецЕсли;
					Если СтрокаОстатков <> Неопределено Тогда
						
						Если НеЗакрытыйНалог <= СтрокаОстатков.НеподтвержденнаяСумма Тогда
							
							СтрокаОстатков.ЭтоВзносы = ЭтоВзносы;
							СтрокаОстатков.РаспределенныйНалог = СтрокаОстатков.РаспределенныйНалог + Выборка.Результат;
							
							// Закрываем на полную сумму, а хвост перекинем на следующий период взаиморасчетов
							СтрокаТЧ = ТЧ.Добавить();
							СтрокаТЧ.ПериодВзаиморасчетов		= Выборка.ПериодВзаиморасчетов;
							СтрокаТЧ.Налог						= Выборка.Налог;
							СтрокаТЧ.СтатьяНалоговойДекларации	= Выборка.СтатьяНалоговойДекларации;
							СтрокаТЧ.База		= Выборка.База;
							СтрокаТЧ.БазаВзноса	= Выборка.БазаВзноса;
							СтрокаТЧ.Результат	= Выборка.Результат;
							
						ИначеЕсли СтрокаОстатков.НеподтвержденнаяСумма <> 0 Тогда
							
							СтрокаОстатков.ЭтоВзносы = ЭтоВзносы;
							// Придется сделать пропорцию, если останется копейка бросим на того, на ком вылезла.
							Коэф = ?(НеЗакрытыйНалог = 0, 0,СтрокаОстатков.НеподтвержденнаяСумма / НеЗакрытыйНалог);
							тРезультат = Окр(Коэф * Выборка.Результат,2);
							СтрокаОстатков.РаспределенныйНалог = СтрокаОстатков.РаспределенныйНалог + тРезультат;
							Копейка = 0;
							Если СтрокаОстатков.РаспределенныйНалог - тРезультат = 0.01 Тогда
								// Копейка вылезла
								Копейка = 0.01;
								СтрокаОстатков.РаспределенныйНалог = СтрокаОстатков.РаспределенныйНалог + Копейка;
							КонецЕсли;
							
							СтрокаТЧ = ТЧ.Добавить();
							СтрокаТЧ.ПериодВзаиморасчетов		= Выборка.ПериодВзаиморасчетов;
							СтрокаТЧ.Налог						= Выборка.Налог;
							СтрокаТЧ.СтатьяНалоговойДекларации	= Выборка.СтатьяНалоговойДекларации;
							СтрокаТЧ.База		= Коэф * Выборка.База;
							СтрокаТЧ.БазаВзноса	= Коэф * Выборка.БазаВзноса;
							СтрокаТЧ.Результат	= тРезультат + Копейка;
							
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	Для каждого СтрокаОстатков Из тбОплаты Цикл
		
		Если СтрокаОстатков.РаспределенныйНалог > 0 Тогда
			
			Если СтрокаОстатков.ЭтоВзносы Тогда
				ТЧ = Взносы;
			Иначе
				ТЧ = ВзносыФОТ;
			КонецЕсли;
			
			СтрокаТЧ = ТЧ.Добавить();
			СтрокаТЧ.ПериодВзаиморасчетов		= СтрокаОстатков.ПериодВзаиморасчетов;
			СтрокаТЧ.Налог						= СтрокаОстатков.Налог;
			СтрокаТЧ.СтатьяНалоговойДекларации	= СтрокаОстатков.СтатьяНалоговойДекларации;
			СтрокаТЧ.НеподтвержденнаяСумма		= - СтрокаОстатков.НеподтвержденнаяСумма;
			
			Если СтрокаОстатков.НеподтвержденнаяСумма - СтрокаОстатков.РаспределенныйНалог <> 0 Тогда
				СтрокаТЧ = ТЧ.Добавить();
				СтрокаТЧ.ПериодВзаиморасчетов		= ДобавитьМесяц(ПериодРегистрации, 1);
				СтрокаТЧ.Налог						= СтрокаОстатков.Налог;
				СтрокаТЧ.СтатьяНалоговойДекларации	= СтрокаОстатков.СтатьяНалоговойДекларации;
				СтрокаТЧ.НеподтвержденнаяСумма		= СтрокаОстатков.НеподтвержденнаяСумма - СтрокаОстатков.РаспределенныйНалог;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
		
КонецПроцедуры // Автозаполнение_ЗакрытиеПериодаВзаиморасчеты()

// Выполняет заполнение
//
Процедура АвтозаполнениеАвансПредварительныйРасчет(ЭтоДивиденды, ЭтоДоговорники, ЭтоУволенные, МассивСотрудниковДляЗаполнения = Неопределено) Экспорт
		
	// Список работников формируем с учетом условия на подразделение
	ОкруглятьДо = РегистрыСведений.ИНАГРО_УчетнаяПолитикаПоПерсоналу.Получить(Новый Структура ("Организация", Организация)).ОкруглятьДо;
	
	// Список работников формируем с учетом условия на подразделение
	// Заполнение ТЧ Зарплата и Работники.
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("парамДата", Дата);
	Запрос.УстановитьПараметр("парамПериодРегистрации", ПериодРегистрации);
	Запрос.УстановитьПараметр("парамОрганизация", Организация);
	Запрос.УстановитьПараметр("парамПодразделение", ПодразделениеОрганизации);  
	Запрос.УстановитьПараметр("парамСотрудники", МассивСотрудниковДляЗаполнения);
	Запрос.УстановитьПараметр("парамВидВыплаты", ВидВыплаты);
	Запрос.УстановитьПараметр("парамСсылка", Ссылка);
	ЗапросВР = Новый Запрос;
	
	ЗапросВР.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ИНАГРО_НачисленияДляПредварительногоРасчета.ВидРасчета КАК ВидРасчета
		|ИЗ
		|	РегистрСведений.ИНАГРО_НачисленияДляПредварительногоРасчета КАК ИНАГРО_НачисленияДляПредварительногоРасчета";
	
	ВР_ = ЗапросВР.Выполнить().Выгрузить().ВыгрузитьКолонку("ВидРасчета");
	СписокВР_ = Новый СписокЗначений;
	СписокВР_.ЗагрузитьЗначения(ВР_);
	Запрос.УстановитьПараметр("СписокВРПредварительныйРасчет", СписокВР_);
	
	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ  
		|    Начисления.Сотрудник КАК Сотрудник,
		|    Начисления.ПериодРегистрации КАК ПериодВзаиморасчетов,
		|    Начисления.СчетУчета КАК СчетУчета,
		|    СпособыВыплаты.СпособВыплаты КАК СпособВыплаты,
		|    СпособыВыплаты.Банк КАК Банк,
		|    СпособыВыплаты.НомерКарточки КАК НомерКарточки,
		|    ВЫБОР
		|        КОГДА Начисления.Сумма > ЕСТЬNULL(Выплаты.Сумма, 0)
		|            ТОГДА Начисления.Сумма - ЕСТЬNULL(Выплаты.Сумма, 0)
		|        ИНАЧЕ 0
		|    КОНЕЦ КАК Сумма
		|ИЗ
		|    (ВЫБРАТЬ
		|        Начисления.Сотрудник КАК Сотрудник,
		|        Начисления.Ссылка.ПериодРегистрации КАК ПериодРегистрации,
		|        Начисления.ВидРасчета.СчетУчета КАК СчетУчета,
		|		Начисления.ПодразделениеОрганизации	КАК ПодразделениеОрганизации,    
		|        СУММА(Начисления.Результат) КАК Сумма
		|    ИЗ
		|        Документ.ИНАГРО_НачислениеЗарплатыРаботникамОрганизаций.Начисления КАК Начисления
		|    ГДЕ
		|        Начисления.Ссылка.ПериодРегистрации = &парамПериодРегистрации
		|        И Начисления.Ссылка.Организация = &парамОрганизация
		|        И Начисления.Сотрудник В(&парамСотрудники)
		|        И Начисления.Ссылка.Дата <= &парамДата
		|        И Начисления.Ссылка.ПредварительныйРасчет
		|        И Начисления.Ссылка.Проведен
		|" + ?(ПодразделениеОрганизации.Пустая(), "", Символы.ПС + " И Начисления.ПодразделениеОрганизации В ИЕРАРХИИ (&парамПодразделение)") + "
		|    
		|    СГРУППИРОВАТЬ ПО
		|        Начисления.Сотрудник,
		|        Начисления.Ссылка.ПериодРегистрации,
		|        Начисления.ВидРасчета.СчетУчета,
		|	    Начисления.ПодразделениеОрганизации                      
		|    
		|    ОБЪЕДИНИТЬ ВСЕ
		|    
		|    ВЫБРАТЬ
		|        ИНАГРО_Начисления.Сотрудник,
		|        ИНАГРО_Начисления.ПериодРегистрации,
		|        ИНАГРО_Начисления.ВидРасчета.СчетУчета,
		|        ИНАГРО_Начисления.ПодразделениеОрганизации,               
		|        ИНАГРО_Начисления.Результат
		|    ИЗ
		|        РегистрРасчета.ИНАГРО_Начисления КАК ИНАГРО_Начисления
		|    ГДЕ
		|        (НЕ ИНАГРО_Начисления.Регистратор ССЫЛКА Документ.ИНАГРО_НачислениеЗарплатыРаботникамОрганизаций)
		|        И ИНАГРО_Начисления.Сотрудник В (&парамСотрудники)  
		|        И ИНАГРО_Начисления.ПериодРегистрации = &парамПериодРегистрации
		|        И ИНАГРО_Начисления.ПериодДействияКонец <= &парамДата
		|        И ИНАГРО_Начисления.ПериодДействияНачало >= НАЧАЛОПЕРИОДА(&парамДата, МЕСЯЦ)
		|        И ИНАГРО_Начисления.ВидРасчета В(&СписокВРПредварительныйРасчет)) КАК Начисления
		|        ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|            Выплаты.Сотрудник КАК Сотрудник,
		|            Выплаты.ПериодВзаиморасчетов КАК ПериодРегистрации,
		|            Выплаты.СчетУчета КАК СчетУчета,
		|            СУММА(Выплаты.Выплата) КАК Сумма
		|        ИЗ
		|            Документ.ИНАГРО_ЗарплатаКВыплатеОрганизаций.Зарплата КАК Выплаты
		|        ГДЕ
		|            Выплаты.Ссылка.ПериодРегистрации = &парамПериодРегистрации
		|            И Выплаты.Ссылка.Организация = &парамОрганизация
		|            И Выплаты.Ссылка.ВидВыплаты = &парамВидВыплаты
		|            И Выплаты.Сотрудник В(&парамСотрудники)
		|            И Выплаты.Ссылка.Дата <= &парамДата
		|            И Выплаты.Ссылка.Проведен
		|            И Выплаты.Ссылка <> &парамСсылка
		|        
		|        СГРУППИРОВАТЬ ПО
		|            Выплаты.Сотрудник,
		|            Выплаты.ПериодВзаиморасчетов,
		|            Выплаты.СчетУчета) КАК Выплаты
		|        ПО Начисления.Сотрудник = Выплаты.Сотрудник
		|            И Начисления.ПериодРегистрации = Выплаты.ПериодРегистрации
		|            И Начисления.СчетУчета = Выплаты.СчетУчета
		|        ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИНАГРО_ПараметрыВыплатыЗПРаботников.СрезПоследних(
		|                &парамДата,
		|                Организация = &парамОрганизация
		|                    И Сотрудник В (&парамСотрудники)) КАК СпособыВыплаты
		|        ПО (СпособыВыплаты.Сотрудник = Начисления.Сотрудник)
		|ИТОГИ
		|    МАКСИМУМ(СпособВыплаты),
		|    МАКСИМУМ(Банк),
		|    МАКСИМУМ(НомерКарточки),
		|    СУММА(Сумма)
		|ПО
		|    Сотрудник";
	
	Запрос.Текст = ТекстЗапроса;
	
	СуммаОкругления = 0;
	Сотрудники = Новый СписокЗначений;
	ВыборкаСотрудник = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	тзВыборкаСотрудник = Запрос.Выполнить().Выгрузить();
	Пока ВыборкаСотрудник.Следующий() Цикл
		
		Если ВыборкаСотрудник.Сумма = 0 Тогда
			Продолжить;
		КонецЕсли;	
		Сотрудники.Добавить(ВыборкаСотрудник.Сотрудник);
				
		Если ОкруглятьДо > 0.01 Тогда
			Если ВыборкаСотрудник.Сумма < 0 Тогда
				СуммаОкругления = 0
			Иначе
				СуммаОкругления = ВыборкаСотрудник.Сумма - Цел(ВыборкаСотрудник.Сумма/ОкруглятьДо)*ОкруглятьДо;
			КонецЕсли;				
		КонецЕсли;
		
		СтрокаРаботники = РаботникиОрганизации.Добавить();
		
		СтрокаРаботники.Сотрудник		= ВыборкаСотрудник.Сотрудник;
		СтрокаРаботники.Выплата			= ВыборкаСотрудник.Сумма - СуммаОкругления;
		СтрокаРаботники.СуммаГрязными	= ВыборкаСотрудник.Сумма;
		СтрокаРаботники.Копейки         = СуммаОкругления;
		СтрокаРаботники.ВыплаченностьЗарплаты = Перечисления.ВыплаченностьЗарплаты.Выплачено;
		СтрокаРаботники.СпособВыплаты	= ?(ВыборкаСотрудник.СпособВыплаты= NULL, Перечисления.СпособыВыплатыЗарплаты.ЧерезКассу, ВыборкаСотрудник.СпособВыплаты);
		СтрокаРаботники.Банк			= ВыборкаСотрудник.Банк;
		СтрокаРаботники.НомерКарточки	= ВыборкаСотрудник.НомерКарточки;
		
		Строка = Зарплата.Добавить();
		Строка.Сотрудник			= ВыборкаСотрудник.Сотрудник;
		Строка.ПериодВзаиморасчетов	= ПериодРегистрации;
		Строка.СчетУчета			= ПланыСчетов.Хозрасчетный.РасчетыПоЗаработнойПлате;
		Строка.Выплата			    = ВыборкаСотрудник.Сумма - СуммаОкругления;
		Строка.ВыплатаГрязными      = ВыборкаСотрудник.Сумма;
		Строка.Копейки              = СуммаОкругления;
			
	КонецЦикла;
	
КонецПроцедуры // Автозаполнение_ОсновнаяВыплата()

// Процедура заполнения табличных частей НДФЛ
//
Процедура АвтозаполнениеНДФЛКонтрагентам() 
	
	// Заполнение ТЧ НДФЛ
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ПериодРегистрации",	ПериодРегистрации);
	Запрос.УстановитьПараметр("парамДата",	Дата);
	Запрос.УстановитьПараметр("парамОрганизация", Организация);
	Запрос.УстановитьПараметр("парамПодразделениеОрганизации",ПодразделениеОрганизации);
	
	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
       |	Основной.Контрагент КАК Сотрудник,
       |	Основной.ПериодВзаиморасчетов КАК НалоговыйПериод,
       |	Основной.ДоходНДФЛ КАК ДоходНДФЛ,
       |	Основной.НалогОстаток КАК Налог,
       |	Основной.ДоходОстаток КАК Доход
       |ИЗ
       |	РегистрНакопления.ВзаиморасчетыПоНДФЛ.Остатки(
       |			&парамДата,
       |			Организация = &парамОрганизация
       |				И ПериодВзаиморасчетов = &ПериодРегистрации) КАК Основной
       |ГДЕ
       |	(Основной.НалогОстаток > 0
       |			ИЛИ Основной.ДоходОстаток > 0)
       |	И Основной.Контрагент ССЫЛКА Справочник.Контрагенты";

	Запрос.Текст = ТекстЗапроса;
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		СтрокаРаботники = НДФЛ.Добавить();
		
		СтрокаРаботники.Сотрудник		= Выборка.Сотрудник;
		СтрокаРаботники.ДоходНДФЛ		= Выборка.ДоходНДФЛ;
		СтрокаРаботники.ВидСтавки		= Перечисления.ВидыСтавокНДФЛ.Основная;
		СтрокаРаботники.НалоговыйПериод	= Выборка.НалоговыйПериод;
		
		СтрокаРаботники.Налог			= Выборка.Налог;
		СтрокаРаботники.Доход			= Выборка.Доход;
		
	КонецЦикла;
	
КонецПроцедуры // АвтозаполнениеНДФЛКонтрагентам()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции	

// Проверит условие окончания расчета от обратного
//
// Параметры:
//	НеобходимыеДанные
//
Функция ПроверкаУсловияОкончания(Сотрудники, НаборОсновныеНачисления) Экспорт
	
	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;

	Запрос.УстановитьПараметр("Регистратор", Ссылка);
	Запрос.УстановитьПараметр("парамСотрудники", Сотрудники);

	// ВТДанные
	Если Истина Тогда
		// Список сотрудников по которым необходимо выполнить перерасчет
		// Поля:
		//		Сотрудник
		// Описание:
		// 
		//
		ТекстЗапросаВТ = "
		|		ВЫБРАТЬ
		|			Начисления.Сотрудник				КАК Сотрудник,
		|			СУММА(Начисления.Сумма)				КАК Сумма,
		|			СУММА(Начисления.СуммаГрязными)		КАК СуммаГрязными,
		|			СУММА(Начисления.СуммаКонтрольная)	КАК СуммаКонтрольная,
		|			СУММА(Начисления.Начислено)			КАК Начислено,
		|			СУММА(Начисления.Взносы)			КАК Взносы,
		|			СУММА(Начисления.НДФЛ)				КАК НДФЛ
		|ПОМЕСТИТЬ ВТДанные
		|		ИЗ (
		|		ВЫБРАТЬ
		|			Основной.Сотрудник		КАК Сотрудник,
		|			0						КАК Сумма,
		|			Основной.Результат		КАК СуммаГрязными,
		|			-Основной.Результат		КАК СуммаКонтрольная,
		|			0						КАК Начислено,
		|			0						КАК Взносы,
		|			0						КАК НДФЛ
		|		ИЗ РегистрРасчета.ИНАГРО_Начисления КАК Основной
		|		ГДЕ Основной.Регистратор = &Регистратор
		|		И 	Основной.Сотрудник В (&парамСотрудники)
		|
		|		ОБЪЕДИНИТЬ ВСЕ
		|		ВЫБРАТЬ
		|			Основной.Сотрудник		КАК Сотрудник,
		|			Основной.Выплата		КАК Сумма,
		|			0						КАК СуммаГрязными,
		|			Основной.Выплата		КАК СуммаКонтрольная,
		|			Основной.СуммаПромежуточная	КАК Начислено,
		|			0						КАК Взносы,
		|			0						КАК НДФЛ
		|		ИЗ Документ.ИНАГРО_ЗарплатаКВыплатеОрганизаций.РаботникиОрганизации КАК Основной
		|		ГДЕ		Основной.Ссылка = &Регистратор
		|			И 	Основной.Сотрудник В (&парамСотрудники)
		|
		|		ОБЪЕДИНИТЬ ВСЕ
		|		ВЫБРАТЬ
		|			Основной.Сотрудник		КАК Сотрудник,
		|			0						КАК Сумма,
		|			0						КАК СуммаГрязными,
		|			Основной.Результат		КАК СуммаКонтрольная,
		|			0						КАК Начислено,
		|			Основной.Результат		КАК Взносы,
		|			0						КАК НДФЛ
		|		ИЗ РегистрРасчета.ИНАГРО_ВзносыВФонды КАК Основной
		|		ГДЕ		Основной.Регистратор = &Регистратор
		|			И 	Основной.Сотрудник В (&парамСотрудники)
		|			И 	Основной.ВидРасчета.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаНачислений.Взносы)
		|
		|		ОБЪЕДИНИТЬ ВСЕ
		|		ВЫБРАТЬ
		|			Основной.Контрагент	КАК Сотрудник,
		|			0					КАК Сумма,
		|			0					КАК СуммаГрязными,
		|			Основной.Налог		КАК СуммаКонтрольная,
		|			0					КАК Начислено,
		|			0					КАК Взносы,
		|			Основной.Налог		КАК НДФЛ
		|		ИЗ РегистрНакопления.ВзаиморасчетыПоНДФЛ КАК Основной
		|		ГДЕ		Основной.Регистратор = &Регистратор
		|			И 	Основной.Контрагент В (&парамСотрудники)
		|   ) КАК Начисления
		|
		|	СГРУППИРОВАТЬ ПО   
		|		Начисления.Сотрудник
		|
		|ИНДЕКСИРОВАТЬ ПО 
		|	Сотрудник
		|";
		Запрос.Текст = ТекстЗапросаВТ;
		Запрос.Выполнить();
		ТекстЗапросаВТДанные = "ВТДанные";
		ТекстЗапросаВТ = "
		|		ВЫБРАТЬ *
		|       ИЗ ВТДанные
		|";
		Запрос.Текст = ТекстЗапросаВТ;
	КонецЕсли;
	
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	Начисления.НомерСтроки КАК НомерСтрокиРег,
		|	Работники.НомерСтроки КАК НомерСтрокиДок,
		|	Расчет.Сотрудник КАК Сотрудник,
		|	Расчет.СуммаГрязными КАК СуммаГрязными,
		|	Расчет.СуммаКонтрольная КАК СуммаКонтрольная,
		|	Расчет.Начислено КАК Начислено,
		|	Расчет.Взносы КАК Взносы,
		|	Расчет.НДФЛ КАК НДФЛ
		|ИЗ
		|	ВТДанные КАК Расчет
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.ИНАГРО_Начисления КАК Начисления
		|		ПО (Начисления.Регистратор = &Регистратор)
		|			И (Начисления.Сотрудник = Расчет.Сотрудник)
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ИНАГРО_ЗарплатаКВыплатеОрганизаций.РаботникиОрганизации КАК Работники
		|		ПО (Работники.Ссылка = &Регистратор)
		|			И (Работники.Сотрудник = Расчет.Сотрудник)
		|ГДЕ
		|	Расчет.СуммаКонтрольная <> 0";
	
	Запрос.Текст = ТекстЗапроса;
	
	тбРасчет = Запрос.Выполнить().Выгрузить();
	Сотрудники.ЗагрузитьЗначения( тбРасчет.ВыгрузитьКолонку("Сотрудник") );
	
	// А теперь 
	// 1. Пропишем новые результаты
	// 2. Сделаем новый шаг
	Для каждого ТекСтрока Из тбРасчет Цикл
		// 1. Пропишем новые результаты
		СтрокаДвижений = НаборОсновныеНачисления.Получить( ТекСтрока.НомерСтрокиРег - 1 );
		СтрокаРаботники = РаботникиОрганизации.Получить( ТекСтрока.НомерСтрокиДок - 1 );
		
		мРезультат = ?(СтрокаДвижений.Результат = NULL, 0, СтрокаДвижений.Результат);
		мВзносы = ?(ТекСтрока.Взносы = NULL, 0,ТекСтрока.Взносы);
		мНДФЛ = ?(ТекСтрока.НДФЛ = NULL, 0,ТекСтрока.НДФЛ);
		
		// 2. Сделаем новый шаг   
		Шаг =  (СтрокаРаботники.СуммаПромежуточная - СтрокаРаботники.СуммаГрязными) / 2;
		Если Шаг>0 Тогда
			Шаг = Макс(Шаг,0.01);
		ИначеЕсли Шаг<0 Тогда
			Шаг = Макс(-Шаг,0.01);
		КонецЕсли;
		Если Шаг>0 Тогда
			Шаг = Макс(Шаг,0.01);
		ИначеЕсли Шаг<0 Тогда
			Шаг = Макс(-Шаг,0.01);
		КонецЕсли;
		СтрокаДвижений.Результат			= СтрокаДвижений.Результат + ?(ТекСтрока.СуммаКонтрольная>0, Шаг, -Шаг);
		СтрокаРаботники.СуммаПромежуточная	= СтрокаРаботники.СуммаГрязными;
		СтрокаРаботники.СуммаГрязными		= СтрокаДвижений.Результат;
		
		
	КонецЦикла;
	
	НаборОсновныеНачисления.Записать();
	
	Записать();
	
	Возврат (Сотрудники.Количество() > 0) И (Шаг <> 0);
	
КонецФункции // ПолучитьСписок_КодОперацииВыплаты()

#КонецОбласти

#КонецЕсли













