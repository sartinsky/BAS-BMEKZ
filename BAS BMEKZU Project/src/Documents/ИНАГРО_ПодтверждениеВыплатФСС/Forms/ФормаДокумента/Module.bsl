#Область ОбработчикиСобытийФормы 

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды 
	
	Если Параметры.Ключ.Пустая() Тогда
		ПодготовитьФормуНаСервере();
	КонецЕсли;
	
	// Уведомим о появлении функционала рабочей даты
	НастройкиПредупреждений = ОбщегоНазначенияБП.НастройкиПредупрежденийОбИзменениях("РабочаяДатаИзДокумента");
	
	// Показываем, если это новый документ и сама рабочая дата еще не установлена.
	НастройкиПредупреждений.РабочаяДатаИзДокумента = НастройкиПредупреждений.РабочаяДатаИзДокумента
		И Параметры.Ключ.Пустая()
		И НЕ ЗначениеЗаполнено(БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("РабочаяДата"));
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	ОбщегоНазначенияБПКлиент.ОбработкаОповещенияФормыДокумента(ЭтотОбъект, Объект.Ссылка, ИмяСобытия, Параметр, Источник);
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	ПодготовитьФормуНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	УстановитьСостояниеДокумента();

КонецПроцедуры

#КонецОбласти 
  
#Область ОбработчикиСобытийЭлементовШапкиФормы

#Область ПериодРегистрацииСтрокой

&НаКлиенте
Процедура ПериодРегистрацииСтрокойПриИзменении(Элемент)
	
	ЗарплатаКадрыКлиент.ВводМесяцаПриИзменении(ЭтаФорма, "Объект.ПериодРегистрации", "ПериодРегистрацииСтрокой", Модифицированность);

КонецПроцедуры

&НаКлиенте
Процедура ПериодРегистрацииСтрокойНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ЗарплатаКадрыКлиент.ВводМесяцаНачалоВыбора(ЭтаФорма, ЭтаФорма, "Объект.ПериодРегистрации", "ПериодРегистрацииСтрокой");

КонецПроцедуры

&НаКлиенте
Процедура ПериодРегистрацииСтрокойРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	ЗарплатаКадрыКлиент.ВводМесяцаРегулирование(ЭтаФорма, "Объект.ПериодРегистрации", "ПериодРегистрацииСтрокой", Направление, Модифицированность);
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодРегистрацииСтрокойАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	ЗарплатаКадрыКлиент.ВводМесяцаАвтоПодборТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодРегистрацииСтрокойОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	ЗарплатаКадрыКлиент.ВводМесяцаОкончаниеВводаТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);

КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)

	Если НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДатаДокумента) Тогда
		// Изменение времени не влияет на поведение документа.
		ТекущаяДатаДокумента = Объект.Дата;
		Возврат;
	КонецЕсли;

	// Общие проверки условий по датам.
	ТребуетсяВызовСервера = ОбщегоНазначенияБПКлиент.ТребуетсяВызовСервераПриИзмененииДатыДокумента(Объект.Дата, 
		ТекущаяДатаДокумента);		
		
	// Запомним новую дату документа.
	ТекущаяДатаДокумента = Объект.Дата;	
		
КонецПроцедуры

&НаКлиенте
Процедура ЗаявлениеРасчетПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.ЗаявлениеРасчет) Тогда 
		ЗаявлениеРасчетПриИзмененииНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаявлениеРасчетПриИзмененииНаСервере()
	
	Запрос = Документы.ИНАГРО_ПодтверждениеВыплатФСС.ПолучитьЗапросПоДокументам(Объект.Ссылка, Объект.Организация, Объект.ЗаявлениеРасчет);	
	
	Объект.Выплаты.Загрузить(Запрос.Выполнить().Выгрузить());
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(
		Элемент.ТекстРедактирования,
		ЭтотОбъект,
		"Объект.Комментарий");

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ПодготовитьФормуНаСервере()
	
	ТекущаяДатаДокумента = Объект.Дата;		 		
	
	ЗарплатаКадрыКлиентСервер.ЗаполнитьМесяцПоДате(ЭтаФорма, "Объект.ПериодРегистрации", "ПериодРегистрацииСтрокой");

	УстановитьСостояниеДокумента();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСостояниеДокумента()
	
	СостояниеДокумента = ОбщегоНазначенияБП.СостояниеДокумента(Объект);
	
КонецПроцедуры

#Область ПрочийФункционал

&НаКлиенте
Процедура ВыгрузкаПервичныхДокументовВЗвит1С(Команда)
	
	Если Не РегламентированнаяОтчетностьКлиент.ПодключитьМенеджерЗвит1С(Истина) Тогда
		Возврат;
	КонецЕсли;

	Если Объект.Ссылка.Пустая() Или Модифицированность Тогда
		Если Объект.Ссылка.Пустая() Тогда
			
			ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Выполнение действия ""%1"" возможно только после записи данных. Данные будут записаны.';uk='Виконання дії ""%1"" можливо тільки після запису даних. Дані будуть записані.'"),
				НСтр("ru = 'выгрузки'; uk = 'вивантаження'"));
				
			ОписаниеОповещения = Новый ОписаниеОповещения("ВыполнитьВыгрузку", ЭтаФорма);
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
			
		КонецЕсли;
	Иначе
		ВыполнитьВыгрузку(КодВозвратаДиалога.ОК, Неопределено);	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьВыгрузку(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.ОК Тогда
		Записать();
		Если Объект.Ссылка.Пустая() Или Модифицированность Тогда
			Возврат; // запись не удалась, сообщения о причинах выводит платформа
		КонецЕсли;
	ИначеЕсли РезультатВопроса = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;
	
	ЕстьПодключениеКЗвит1С = глМенеджерЗвит1С.ЗапуститьЗвит1С(Ложь, Объект.Организация);
	Если Не ЕстьПодключениеКЗвит1С Тогда
		Возврат;
	КонецЕсли;
	
	ВыборкаШапка = ПолучитьВыборкуШапка();
	ВыборкаТЧ = ПолучитьВыборкуТЧ();
	
	глКомпонентаЗвит1С.Bring1CToFront();
	
	ВерсияОтчета = "01";
	
	// Создаем основной документ C11002..
	ТипПериода	   = 0; 
	НомерВПериоде  = Месяц(Объект.ПериодРегистрации);
	Год			   = Год(Объект.ПериодРегистрации);
	ИмяСхемыЗвит1С = "C11002"+ВерсияОтчета;
	
	ИдГоловнойОтчет = СтрЗаменить("" + Объект.Ссылка.УникальныйИдентификатор(), "-", "");
	Попытка
		ГоловнойОтчет = глКомпонентаЗвит1С.OpenCreateReport(ВыборкаШапка.КодПоЕДРПОУ, ИмяСхемыЗвит1С, ТипПериода, НомерВПериоде, Год, ИдГоловнойОтчет);
	Исключение
		ТекстСообщения = НСтр("ru='Ошибка создания отчета %1: %2. Формирование отчета прервано!';
							  |uk='Помилка створення звіту %1: %2. Формування звіту перервано!'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения,ИмяСхемыЗвит1С,ОписаниеОшибки()));
		Возврат;
	КонецПопытки;

	ДобавитьПоказательВОтчетЗвит1С(ГоловнойОтчет, , "FIRM_NAME",    ВыборкаШапка.НаименованиеПолное);
	ДобавитьПоказательВОтчетЗвит1С(ГоловнойОтчет, , "FIRM_EDRPOU",  ВыборкаШапка.КодПоЕДРПОУ);
	ДобавитьПоказательВОтчетЗвит1С(ГоловнойОтчет, , "CODE_FSSU",    ВыборкаШапка.НомерФССУ);
	ДобавитьПоказательВОтчетЗвит1С(ГоловнойОтчет, , "FIRM_ADR", 	ВыборкаШапка.АдресОрганизации);
	ДобавитьПоказательВОтчетЗвит1С(ГоловнойОтчет, , "FIRM_TELORG", 	ВыборкаШапка.Телефон);

	НомерСтроки = 1;
	Для каждого Выборка ИЗ ВыборкаТЧ Цикл
		ДобавитьСтрокуВОтчетЗвит1С(ГоловнойОтчет, "TAB1");
		
		ДобавитьПоказательВОтчетЗвит1С(ГоловнойОтчет, "TAB1", "TAB1_A1", НомерСтроки);
		ДобавитьПоказательВОтчетЗвит1С(ГоловнойОтчет, "TAB1", "TAB1_A2", Выборка.Фамилия);
		ДобавитьПоказательВОтчетЗвит1С(ГоловнойОтчет, "TAB1", "TAB1_A3", Выборка.Имя);
		ДобавитьПоказательВОтчетЗвит1С(ГоловнойОтчет, "TAB1", "TAB1_A4", Выборка.Отчество);
		ДобавитьПоказательВОтчетЗвит1С(ГоловнойОтчет, "TAB1", "TAB1_A5", Выборка.КодПоДРФО);
		
		ДобавитьПоказательВОтчетЗвит1С(ГоловнойОтчет, "TAB1", "TAB1_A6", Выборка.Серия);
		ДобавитьПоказательВОтчетЗвит1С(ГоловнойОтчет, "TAB1", "TAB1_A7", ?(ЗначениеЗаполнено(Выборка.НомерСлучаяНетрудоспособности), Выборка.НомерСлучаяНетрудоспособности + "-" + Выборка.Номер, Выборка.Номер));
		
		ДобавитьПоказательВОтчетЗвит1С(ГоловнойОтчет, "TAB1", "TAB1_A8", Выборка.ДатаВыплаты);
		ДобавитьПоказательВОтчетЗвит1С(ГоловнойОтчет, "TAB1", "TAB1_A9", Выборка.Сумма);
		
		НомерСтроки = НомерСтроки + 1;
	КонецЦикла;	 

	ДобавитьПоказательВОтчетЗвит1С(ГоловнойОтчет, , "REP_DATE", Объект.Дата);	
    ДобавитьПоказательВОтчетЗвит1С(ГоловнойОтчет, , "FIRM_RUK", ВыборкаШапка.Руководитель);	
	ДобавитьПоказательВОтчетЗвит1С(ГоловнойОтчет, , "FIRM_BUH", ВыборкаШапка.ГлавныйБухгалтер);	
	
	глКомпонентаЗвит1С.SaveReportEx(ГоловнойОтчет, 1);
	
	ПоказатьПредупреждение(,НСтр("ru='Уведомление успешно выгружено во FREDO!';uk='Повідомлення успішно вивантажено у FREDO!'"));
	
	глКомпонентаЗвит1С.BringZvitToFront();

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьПоказательВОтчетЗвит1С(Отчет, ИмяТаблицыЗвит1С = "", ИмяЗвит1С, Значение, ЗаписыватьПустое = Ложь)
	
	Если НЕ ЗаписыватьПустое И НЕ ЗначениеЗаполнено(Значение) Тогда
		Возврат;	
	КонецЕсли;
	
	Попытка
		Отчет.SetValue(ИмяТаблицыЗвит1С, ИмяЗвит1С, Значение); 
	Исключение
		Если глМенеджерЗвит1С.ФлагОтладки Тогда
			Если ПустаяСтрока(ИмяТаблицыЗвит1С) Тогда
				ТекстСообщения = НСтр("ru='FREDO. Ошибка установки показателя (схема ""%1"", поле ""%2"", тип значения ""%3"", значение ""%4"")';
									  |uk='FREDO. Помилка встановлення показника (схема ""%1"", поле ""%2"", тип значення ""%3"", значення ""%4"")'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения,Отчет.CharCode,ИмяЗвит1С,ТипЗнч(Значение),Значение));
			Иначе	
			     ТекстСообщения = НСтр("ru='FREDO. Ошибка установки показателя (схема ""%1"", имя таблицы ""%2"", поле ""%3"", тип значения ""%4"", значение ""%5"")';
									  |uk='FREDO. Помилка встановлення показника (схема ""%1"", ім'я таблиці ""%2"", поле ""%3"", тип значення ""%4"", значення ""%5"")'");
				 ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения,Отчет.CharCode,ИмяТаблицыЗвит1С,ИмяЗвит1С,ТипЗнч(Значение),Значение));
			КонецЕсли; 
		КонецЕсли;
	КонецПопытки;
		
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСтрокуВОтчетЗвит1С(Отчет, ИмяТаблицыЗвит1С)

	Отчет.NewRow(ИмяТаблицыЗвит1С);

КонецПроцедуры

&НаСервере
Функция ПолучитьВыборкуШапка()
	
	Шапка = Новый Структура;
	Шапка.Вставить("Организация", Объект.Организация);
	Шапка.Вставить("НаименованиеПолное", Объект.Организация.НаименованиеПолное);
	Шапка.Вставить("КодПоЕДРПОУ", Объект.Организация.КодПоЕДРПОУ);
	
	Сведения = Новый СписокЗначений;
	Сведения.Добавить("", "НомерФССУ");
	Коды 	= РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(Объект.Организация, Объект.Дата, Сведения);
	Шапка.Вставить("НомерФССУ", Коды.НомерФССУ);
	
	Исполнитель = ОтветственныеЛицаБП.ОтветственныеЛица(Объект.Организация, Объект.Дата);
	Шапка.Вставить("ИсполнительДолжность", Исполнитель.ИсполнительДолжность);
	Шапка.Вставить("Исполнитель", Исполнитель.Исполнитель);
	
	Шапка.Вставить("НомерСчета", Объект.Организация.БанковскийСчетДляРасчетовСФСС.НомерСчета);	
	Шапка.Вставить("БанкНаименование", Объект.Организация.БанковскийСчетДляРасчетовСФСС.Банк.Наименование);
	Шапка.Вставить("БанкКод", Объект.Организация.БанковскийСчетДляРасчетовСФСС.Банк.Код);

	Шапка.Вставить("Руководитель", Исполнитель.Руководитель);
	Шапка.Вставить("ГлавныйБухгалтер", Исполнитель.ГлавныйБухгалтер);
	
	// Получим данные из РС КонтактнаяИнформация для адреса организации
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	КонтактнаяИнформация.Представление КАК Адрес
	               |ИЗ
	               |	Справочник.Организации.КонтактнаяИнформация КАК КонтактнаяИнформация
	               |ГДЕ
	               |	КонтактнаяИнформация.Тип = &Тип
	               |	И КонтактнаяИнформация.Вид = &Вид
	               |	И КонтактнаяИнформация.Ссылка = &Объект";
	
	Запрос.УстановитьПараметр("Объект", Объект.Организация);
	Запрос.УстановитьПараметр("Тип", Перечисления.ТипыКонтактнойИнформации.Адрес);
	Запрос.УстановитьПараметр("Вид", Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
							
	Если Выборка.Следующий() Тогда
		Шапка.Вставить("АдресОрганизации", Выборка.Адрес);
	Иначе
		Шапка.Вставить("АдресОрганизации", НСтр("ru='<Не заполнен>';uk='<Не заповнений>'"));
	КонецЕсли;
							
	// Получим данные из РС КонтактнаяИнформация для телефона организации
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КонтактнаяИнформация.Представление КАК Телефон
	|ИЗ
	|	Справочник.Организации.КонтактнаяИнформация КАК КонтактнаяИнформация
	|ГДЕ
	|	КонтактнаяИнформация.Ссылка = &Объект
	|	И КонтактнаяИнформация.Тип = &Тип
	|	И КонтактнаяИнформация.Вид = &Вид";
	
	Запрос.УстановитьПараметр("Объект", Объект.Организация);
	Запрос.УстановитьПараметр("Тип", Перечисления.ТипыКонтактнойИнформации.Телефон);
	Запрос.УстановитьПараметр("Вид", Справочники.ВидыКонтактнойИнформации.ТелефонОрганизации);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		Шапка.Вставить("Телефон", ОбщегоНазначенияБПВызовСервера.ПолучитьТелефонДляНалоговойНакладной(Выборка.Телефон));
	Иначе
		Шапка.Вставить("Телефон", НСтр("ru='<Не заполнен>';uk='<Не заповнений>'"));
	КонецЕсли;

	Возврат Шапка;
		
КонецФункции	

&НаСервере
Функция ПолучитьВыборкуТЧ()
	
	Возврат ОбщегоНазначения.ТаблицаЗначенийВМассив(Документы.ИНАГРО_ПодтверждениеВыплатФСС.СформироватьЗапросДляПечати(Объект.Ссылка));
	
КонецФункции	

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункцииБСП

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти
 