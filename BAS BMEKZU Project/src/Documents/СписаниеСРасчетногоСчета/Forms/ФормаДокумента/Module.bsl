/// В ТЧ ПеречислениеНалогов рекв.ПеречислениеНалоговСумма убираем ТолькоПросмотр 
&НаКлиенте
Перем мВедомость Экспорт;
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	
	Если Параметры.Ключ.Пустая() Тогда
		ПодготовитьФормуНаСервере();
		// ИНАГРО++
		Если ЗначениеЗаполнено(Параметры.Основание) Тогда
			Если    ТипЗнч(Параметры.Основание) = Тип("ДокументСсылка.ИНАГРО_ЗарплатаКВыплатеОрганизаций")
				ИЛИ Параметры.Основание.Метаданные().Имя = "ИНАГРО_ВедомостьВыплатПайщикам" Тогда			
				//ИЛИ ТипЗнч(Параметры.Основание) = Тип("ДокументСсылка.ИНАГРО_НачислениеДругихВыплат") Тогда			
				УстановитьПараметрыВыбораКонтрагента();
			КонецЕсли;
		КонецЕсли;
		ИНАГРО_ЭтоНовый = Истина;
	Иначе
		ИНАГРО_ЭтоНовый = Ложь;
		// ИНАГРО--
	КонецЕсли;
	
	// Уведомим о появлении функционала рабочей даты
	НастройкиПредупреждений = ОбщегоНазначенияБП.НастройкиПредупрежденийОбИзменениях("РабочаяДатаИзДокумента");
	
	// Показываем, если это новый документ и сама рабочая дата еще не установлена.
	НастройкиПредупреждений.РабочаяДатаИзДокумента = НастройкиПредупреждений.РабочаяДатаИзДокумента
		И Параметры.Ключ.Пустая()
		И НЕ ЗначениеЗаполнено(БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("РабочаяДата"));
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыРасширеннаяПодсистемы") Тогда
		Элементы.ВыплатаЗаработнойПлатыГруппаУчетаНачислений.Видимость = Истина;
		Элементы.ПеречислениеНалоговСчетУчета.Видимость = Истина;
		Элементы.ВыплатаЗаработнойПлатыСчетУчета.Видимость = Ложь;
		Элементы.СчетУчетаРасчетовСКонтрагентомНалоги.Видимость = Ложь;
		Элементы.ПеречислениеНалоговВедомость.Видимость = Ложь;
		Элементы.ПеречислениеНалоговСумма.ТолькоПросмотр = Ложь;
	Иначе
		Элементы.ВыплатаЗаработнойПлатыГруппаУчетаНачислений.Видимость = Ложь;
		Элементы.ПеречислениеНалоговСчетУчета.Видимость = Ложь;
		Элементы.ФизЛицоВыплата.Видимость = Ложь;
		Элементы.Ведомость.Видимость = Ложь;
		Элементы.ВыплатаЗаработнойПлатыСчетУчета.Видимость = Истина;
		Элементы.СчетУчетаРасчетовСКонтрагентомНалоги.Видимость = Истина;
		Элементы.ПеречислениеНалоговВедомость.Видимость = Истина;
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	ПодготовитьФормуНаСервере();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ЗаполнитьДобавленныеКолонкиТаблиц();
	УстановитьСостояниеДокумента();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	// Оповестим оплачиваемые документы выплаты зарплаты
//++ БУ ЗИК
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеЗП")
//~	Если (Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеЗП")
//~	 или Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.ВыплатаЗарплатыНаЛицевыеСчета"))		
//-- БУ ЗИК
		И Объект.Проведен Тогда
		Для каждого СтрокаТЧ Из Объект.ВыплатаЗаработнойПлаты Цикл
			Оповестить("ОбновитьФорму",, СтрокаТЧ.Ведомость);
		КонецЦикла;
	КонецЕсли;
	
	Оповестить("ОбновитьФорму", ВладелецФормы, Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ОбновитьФорму" 
		И ТипЗнч(Источник) = Тип("ДокументСсылка.ПлатежноеПоручение") Тогда
		Прочитать();
	Иначе
		ОбщегоНазначенияБПКлиент.ОбработкаОповещенияФормыДокумента(ЭтаФорма, Объект.Ссылка, ИмяСобытия, Параметр, Источник);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		Если Объект.НеПодтвержденоВыпискойБанка Тогда
			Отказ = Истина;
			ТекстВопроса = НСтр("ru='Проведение документа возможно только после установки флага ""Подтверждено выпиской банка"".
|Записать документ без проведения?';uk='Проведення документа можливе тільки після встановлення прапора ""Підтверджено випискою банку"".
|Записати документ без проведення?'");
			
			Оповещение = Новый ОписаниеОповещения("ВопросПередЗаписьюЗавершение", ЭтотОбъект, ПараметрыЗаписи);
			ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Да);
		Иначе
			КлючеваяОперация = "ПроведениеСписаниеСРасчетногоСчета";
			ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени(КлючеваяОперация);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)

	Если ЗавершениеРаботы И Модифицированность Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если Модифицированность Тогда
		Отказ = Истина;
		ТекстВопроса = НСтр("ru='Данные были изменены. Сохранить изменения?';uk='Дані були змінені. Зберегти зміни?'");
		Оповещение   = Новый ОписаниеОповещения("ВопросПередЗакрытиемЗавершение", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		
		Модифицированность	= Истина;
		
		ЗаполнитьЗначенияСвойств(Объект, ВыбранноеЗначение);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если ИНАГРО_ЭтоНовый Тогда
		
		Если ИНАГРО_НетБанка Тогда
			
			Отказ = Истина;
			  
		ИначеЕсли НЕ ЗначениеЗаполнено(Объект.Контрагент) Тогда
			
			Если    ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.ИНАГРО_ЗарплатаКВыплатеОрганизаций")
				//ИЛИ ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.ИНАГРО_НачислениеДругихВыплат")
				ИЛИ (ИНАГРО_ОбщийВызовСервераПовтИсп.ЕстьБСПУ() И ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.ИНАГРО_ВедомостьВыплатПайщикам")) Тогда
				
				ТекстВопроса = НСтр("ru='Документ " + Объект.ДокументОснование + " содержит несколько банков-получателей.
				|Для завершения ввода на основании необходимо выбрать один банк из списка.';uk='Документ " + Объект.ДокументОснование + " містить кілька банків-одержувачів.
				|Для завершення введення на підставі необхідно вибрати один банк зі списку.'");
				Оповещение = Новый ОписаниеОповещения("ПриОткрытииЗавершение", ЭтотОбъект, Параметры);
				ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена, , КодВозвратаДиалога.ОК);			
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;

	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ВидОперацииПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(Объект.ВидОперации) Тогда
		Возврат;
	КонецЕсли;
	
	ВидОперацииПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(Объект.Дата) Тогда
		Возврат;
	КонецЕсли;
	
	
	Если НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДатаДокумента) Тогда
		// Изменение времени не влияет на поведение документа.
		ТекущаяДатаДокумента = Объект.Дата;
		Возврат;
	КонецЕсли;

	// Общие проверки условий по датам.
	ТребуетсяВызовСервера = ОбщегоНазначенияБПКлиент.ТребуетсяВызовСервераПриИзмененииДатыДокумента(Объект.Дата, 
		ТекущаяДатаДокумента, Объект.ВалютаДокумента, ВалютаРегламентированногоУчета);
		
	// Если определили, что изменение даты может повлиять на какие-либо параметры, 
	// то передаем обработку на сервер.
	Если ТребуетсяВызовСервера Тогда
		ДатаПриИзмененииСервер();
	КонецЕсли;
	
	// Запомним новую дату документа.
	ТекущаяДатаДокумента = Объект.Дата;
	
	// Покажем оповещение о появлении механизма рабочей даты.
	Если НастройкиПредупреждений.РабочаяДатаИзДокумента 
		И НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ОбщегоНазначенияБПКлиент.ПоказатьПредупреждениеОбИзменениях("РабочаяДатаИзДокумента", , НастройкиПредупреждений);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		Возврат;
	КонецЕсли;
	
	ОрганизацияПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура СчетОрганизацииПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(Объект.СчетОрганизации) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОбъекта = ТекущиеПараметрыОбъекта(ЭтаФорма);
	НовыеПараметры   = НовыеПараметрыПриИзмененииСчетаОрганизации(ПараметрыОбъекта);
	
	Если НовыеПараметры.ВалютаДокумента <> ПараметрыОбъекта.ВалютаДокумента Тогда
		ЗаполнитьЗначенияСвойств(ЭтаФорма, НовыеПараметры, "КурсДокумента,   КратностьДокумента");
		ЗаполнитьЗначенияСвойств(Объект,   НовыеПараметры, "ВалютаДокумента, СчетКонтрагента");
		
		УстановитьПараметрыВыбораДоговораСКонтрагентом(ЭтаФорма);
		
		ИнициализироватьСвойстваПлатежаНаКлиенте(Истина);
		ЗаполнитьЗначенияСвойств(СвойстваПлатежа, НовыеПараметры);
		ПерезаполнитьРасшифровкуПлатежа();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СчетБанкПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(Объект.СчетБанк) Тогда
		Возврат;
	КонецЕсли;
	
	СчетБанкПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	// ИНАГРО++
	Если ИНАГРО_ЭтоНовый
		И  (ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.ИНАГРО_ЗарплатаКВыплатеОрганизаций") 
		//ИЛИ ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.ИНАГРО_НачислениеДругихВыплат")
		ИЛИ (ИНАГРО_ОбщийВызовСервераПовтИсп.ЕстьБСПУ() И ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.ИНАГРО_ВедомостьВыплатПайщикам"))) Тогда
		
		Если НЕ ЗначениеЗаполнено(Объект.Контрагент) Тогда
			ТекстСообщения = НСтр("ru='Для завершения ввода на основании необходимо выбрать один банк из списка.';uk='Для завершення введення на підставі необхідно вибрати один банк зі списку.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Объект.Контрагент");
			УстановитьПараметрыВыбораКонтрагента();
			Возврат;
		Иначе
			ЗаполнитьПоОснованию();
		КонецЕсли;
		
	КонецЕсли;
	// ИНАГРО--
	
	КонтрагентПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура СчетКонтрагентаПриИзменении(Элемент)
	
	СчетКонтрагентаПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура СуммаДокументаПриИзменении(Элемент)
	
	СуммаДокументаПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура СчетУчетаПрочиеПриИзменении(Элемент)
	
	УстановитьЗаголовкиИДоступностьСубконто(ЭтаФорма, Объект.СчетУчетаРасчетовСКонтрагентом, "Прочие");
	
	ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3",
		"СубконтоДт1", "СубконтоДт2", "СубконтоДт3");
	ПоляОбъекта.Вставить("Организация",   Объект.Организация);
	БухгалтерскийУчетКлиентСервер.ПриИзмененииСчета(Объект.СчетУчетаРасчетовСКонтрагентом, Объект, ПоляОбъекта);
	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма);
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалога") Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(
			ЭтаФорма, "НалоговыйПериодСтрока", Формат(Объект.НалоговыйПериод, "ДФ='MMMM yyyy'"));
	КонецЕсли;
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура СчетУчетаРасчетовСКонтрагентомПереводПриИзменении(Элемент)
	
		
КонецПроцедуры

&НаКлиенте
Процедура СубконтоДтПриИзменении(Элемент)
	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоДтНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СписокПараметров = СписокПараметровВыбораСубконто(ЭтаФорма, Объект, "СубконтоДт%Индекс%");
	
	ОбщегоНазначенияБПКлиент.НачалоВыбораЗначенияСубконто(ЭтаФорма, Элемент, СтандартнаяОбработка, СписокПараметров);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодтвержденоВыпискойБанкаПриИзменении(Элемент)
	
	Объект.НеПодтвержденоВыпискойБанка = НЕ ПодтвержденоВыпискойБанка;
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьПлатежноеПоручениеНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если НЕ ЗначениеЗаполнено(Параметры.Ключ) ИЛИ Модифицированность Тогда
		ОбъектЗаписан = Записать();
		
		Если НЕ ОбъектЗаписан Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПлатежноеПоручение) Тогда
		ПоказатьЗначение(, ПлатежноеПоручение);
	Иначе
		Если Объект.ПометкаУдаления Тогда
			ПоказатьПредупреждение(, НСтр("ru='Нельзя вводить платежное поручение на основании документа, помеченного на удаление!';uk='Не можна вводити платіжне доручення на підставі документу, який відмічений для вилучення!'"));
			Возврат;
		КонецЕсли;
		
		ПараметрыСписания = Новый Структура("Основание", Параметры.Ключ);
		ОткрытьФорму("Документ.ПлатежноеПоручение.ФормаОбъекта", ПараметрыСписания, ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(
		Элемент.ТекстРедактирования,
		ЭтотОбъект,
		"Объект.Комментарий"
	);
	
КонецПроцедуры

&НаКлиенте
Процедура НалоговыйПериодРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	ИзменениеПериодаУплаты(ЭтаФорма, "Объект.НалоговыйПериод", "НалоговыйПериодСтрока", Направление);
	
	ЭтаФорма.Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура НалоговыйПериодПриИзменении(Элемент)
	
	ИзменениеПериодаУплаты(ЭтаФорма, "Объект.НалоговыйПериод", "НалоговыйПериодСтрока");
	
	ЭтаФорма.Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ФизЛицоВыплатаЗарплатыПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.ФизЛицо) Тогда
		ФизЛицоВыплатаЗарплатыПриИзмененииСервер();
	Иначе
		Объект.СуммаДокумента = 0;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СчетУчетаРасчетовСКонтрагентомНалогиПриИзменении(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	
	УстановитьЗаголовкиИДоступностьСубконто(
		ЭтаФорма, Объект.СчетУчетаРасчетовСКонтрагентом, "", "ПеречислениеНалогов", Ложь);
	
	ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3",
								"СубконтоДт1", "СубконтоДт2", "СубконтоДт3");
	
	ПоляОбъекта.Вставить("Организация"  , Объект.Организация);
	
	Для Каждого Строка Из Объект.ПеречислениеНалогов Цикл 
		
		БухгалтерскийУчетКлиентСервер.ПриИзмененииСчета(Объект.СчетУчетаРасчетовСКонтрагентом, Строка, ПоляОбъекта, Ложь);
		
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура КонтрагентНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка) // ИНАГРО
	
	Если ИНАГРО_ЭтоНовый
		И  (ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.ИНАГРО_ЗарплатаКВыплатеОрганизаций")
		//ИЛИ ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.ИНАГРО_НачислениеДругихВыплат")
		ИЛИ (ИНАГРО_ОбщийВызовСервераПовтИсп.ЕстьБСПУ() И ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.ИНАГРО_ВедомостьВыплатПайщикам"))) Тогда
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТабличнойЧастиРасшифровкаПлатежа

&НаКлиенте
Процедура РасшифровкаПлатежаПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ИнициализироватьСвойстваПлатежаНаКлиенте();
	Если НоваяСтрока И НЕ Копирование Тогда
		ЗаполнитьЗначенияСвойств(Элементы.РасшифровкаПлатежа.ТекущиеДанные, СвойстваПлатежа);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаПриИзменении(Элемент)
	
	Объект.СуммаДокумента = Объект.РасшифровкаПлатежа.Итог("СуммаПлатежа");
	ОбновитьИтоги(ЭтаФорма);
	СформироватьНазначениеПлатежаСервер(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если НоваяСтрока И ОтменаРедактирования Тогда
		Объект.СуммаДокумента = Объект.РасшифровкаПлатежа.Итог("СуммаПлатежа");
		ОбновитьИтоги(ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаПередУдалением(Элемент, Отказ)
	
	Отказ = (Объект.РасшифровкаПлатежа.Количество() = 1);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаДоговорКонтрагентаПриИзменении(Элемент)
	
	СтрокаПлатеж = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	
	Если НЕ ЗначениеЗаполнено(СтрокаПлатеж.ДоговорКонтрагента) Тогда
		Возврат;
	КонецЕсли;
	
	ИнициализироватьСвойстваПлатежаНаКлиенте(Истина); // Только создаем структуру, если она еще не создана.
	
	Если СтрокаПлатеж.ДоговорКонтрагента <> СвойстваПлатежа.ДоговорКонтрагента Тогда
		ПараметрыОбъекта = ТекущиеПараметрыОбъекта(ЭтаФорма);
		ПараметрыОбъекта.ДоговорКонтрагента = СтрокаПлатеж.ДоговорКонтрагента;
		ПараметрыОбъекта.ЗаТару				= СтрокаПлатеж.ЗаТару;
		СвойстваПлатежа = СвойстваСтрокРасшифровкиПлатежа(ПараметрыОбъекта, Ложь);
		СвойстваПлатежа.ЗаТару			= СтрокаПлатеж.ЗаТару;
		СвойстваПлатежа.Амортизируется 	= СтрокаПлатеж.Амортизируется;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(СтрокаПлатеж, СвойстваПлатежа);
	
	ПересчитатьСуммуНДС(СтрокаПлатеж);
	РассчитатьСуммуВзаиморасчетов(СтрокаПлатеж, ЭтаФорма);
	РассчитатьПропорциональныйНДС(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаСделкаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	СтрокаПлатеж = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	
	ПараметрыОбъекта = Новый Структура;
	ПараметрыОбъекта.Вставить("Дата",                  Объект.Дата);
	ПараметрыОбъекта.Вставить("ДоговорКонтрагента",    СтрокаПлатеж.ДоговорКонтрагента);
	ПараметрыОбъекта.Вставить("Контрагент",            Объект.Контрагент);
	ПараметрыОбъекта.Вставить("Организация",           Объект.Организация);
	ПараметрыОбъекта.Вставить("ОстаткиОбороты",        "Кт");
	ПараметрыОбъекта.Вставить("ТипыДокументов",        "Метаданные.Документы.СписаниеСРасчетногоСчета.ТабличныеЧасти.РасшифровкаПлатежа.Реквизиты.Сделка.Тип");
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.ВозвратДенежныхСредствПокупателю") Тогда
		ПараметрыОбъекта.Вставить("СчетУчета", СтрокаПлатеж.СчетУчетаРасчетовПоАвансам);
	Иначе
		ПараметрыОбъекта.Вставить("СчетУчета", СтрокаПлатеж.СчетУчетаРасчетовСКонтрагентом);
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура("ПараметрыОбъекта", ПараметрыОбъекта);
	ОткрытьФорму("Документ.ДокументРасчетовСКонтрагентом.ФормаВыбора", ПараметрыФормы, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаСуммаПлатежаПриИзменении(Элемент)
	
	СтрокаПлатеж = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	РассчитатьСуммуВзаиморасчетов(СтрокаПлатеж, ЭтаФорма);
	ПересчитатьСуммуНДС(СтрокаПлатеж);
	РассчитатьПропорциональныйНДС(ЭтаФорма);
		
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаКурсВзаиморасчетовПриИзменении(Элемент)
	
	СтрокаПлатеж = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	РассчитатьСуммуВзаиморасчетов(СтрокаПлатеж, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаКурсВзаиморасчетовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СтрокаПлатеж = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	
	ПараметрыДокумента = Новый Структура;
	ПараметрыДокумента.Вставить("Валюта"     			 , СтрокаПлатеж.ДоговорКонтрагентаВалютаВзаиморасчетов);
	ПараметрыДокумента.Вставить("КратностьВзаиморасчетов", СтрокаПлатеж.КратностьВзаиморасчетов);
	ПараметрыДокумента.Вставить("КурсВзаиморасчетов"     , СтрокаПлатеж.КурсВзаиморасчетов);
	ПараметрыДокумента.Вставить("Дата"                   , Объект.Дата);
	ПараметрыДокумента.Дата = Объект.Дата;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("СтрокаПлатеж", СтрокаПлатеж);
	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("РасшифровкаПлатежаКурсВзаиморасчетовНачалоВыбораЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ОткрытьФорму("Общаяформа.ФормаВводаКурсаИКратности", ПараметрыДокумента,,,,, ОповещениеОЗакрытии);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаСуммаВзаиморасчетовПриИзменении(Элемент)
	
	СтрокаПлатеж = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	ЗаполнитьПустыеКурсыВалют(СтрокаПлатеж, ЭтаФорма);
	
	Если СтрокаПлатеж.СуммаВзаиморасчетов <> 0 И КратностьДокумента <> 0 Тогда
		СуммаГрн = СтрокаПлатеж.СуммаПлатежа * КурсДокумента / КратностьДокумента;
		СтрокаПлатеж.КурсВзаиморасчетов = СуммаГрн / СтрокаПлатеж.СуммаВзаиморасчетов * СтрокаПлатеж.КратностьВзаиморасчетов;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаСтавкаНДСПриИзменении(Элемент)
	
	СтрокаПлатеж = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	ПересчитатьСуммуНДС(СтрокаПлатеж);
	РассчитатьПропорциональныйНДС(ЭтаФорма);
		
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаСуммаНДСПриИзменении(Элемент)

	РассчитатьПропорциональныйНДС(ЭтаФорма);
		
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаНалоговоеНазначениеПриИзменении(Элемент)

	РассчитатьПропорциональныйНДС(ЭтаФорма);
		
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаЗаТаруПриИзменении(Элемент)
		
	РасшифровкаПлатежаЗаТаруПриИзмененииНаСервере();

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТабличнойЧастиВыплатаЗаработнойПлаты

&НаКлиенте
Процедура ВыплатаЗаработнойПлатыПриИзменении(Элемент)
	
	Если НЕ РедактированиеВыплатаЗаработнойПлаты Тогда
		Возврат;
	КонецЕсли;
	
	Объект.СуммаДокумента = Объект.ВыплатаЗаработнойПлаты.Итог("СуммаКВыплате");
	
КонецПроцедуры

&НаКлиенте
Процедура ВыплатаЗаработнойПлатыВедомостьПриИзменении(Элемент)
	
	СтрокаПлатеж = Элементы.ВыплатаЗаработнойПлаты.ТекущиеДанные;
	Отбор = Новый Структура ("Ведомость");
	Отбор.Ведомость = мВедомость;
	СтрокаПеречисленийЗаработнойПлаты = Объект.ВыплатаЗаработнойПлаты.НайтиСтроки(Отбор);
	Для каждого СтрокаВыплаты Из СтрокаПеречисленийЗаработнойПлаты Цикл
		Объект.ВыплатаЗаработнойПлаты.Удалить(СтрокаВыплаты);	
	КонецЦикла;
	мВедомость = СтрокаПлатеж.Ведомость;
	Отбор.Ведомость = мВедомость;
	СтрокаПеречисленийЗаработнойПлаты = Объект.ВыплатаЗаработнойПлаты.НайтиСтроки(Отбор);
	Для каждого СтрокаПеречислений Из СтрокаПеречисленийЗаработнойПлаты Цикл
		Объект.ВыплатаЗаработнойПлаты.Удалить(СтрокаПеречислений);	
	КонецЦикла;
	
	ЗаполнитьПоВедомости(мВедомость, СтрокаПлатеж.НомерСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыплатаЗаработнойПлатыВедомостьОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ВыплатаЗаработнойПлаты.ТекущиеДанные;
	Если ПроверитьДублиВедомостей(ТекущиеДанные) Тогда
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыплатаЗаработнойПлатыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	РедактированиеВыплатаЗаработнойПлаты = Ложь;
	Если НоваяСтрока Тогда
		ТекущиеДанные = Элементы.ВыплатаЗаработнойПлаты.ТекущиеДанные;
		Если ТекущиеДанные <> Неопределено Тогда
			Если ПроверитьДублиВедомостей(ТекущиеДанные) Тогда
				Элементы.ВыплатаЗаработнойПлаты.ТекущиеДанные.Ведомость    = "";
				Элементы.ВыплатаЗаработнойПлаты.ТекущиеДанные.СуммаКВыплате = 0;
				ОтменаРедактирования = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	
	Если НоваяСтрока И ОтменаРедактирования Тогда
		Объект.СуммаДокумента = Объект.ВыплатаЗаработнойПлаты.Итог("СуммаКВыплате");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыплатаЗаработнойПлатыВедомостьОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.ВыплатаЗаработнойПлаты.ТекущиеДанные;
	
	Если УчетЗарплатыИКадровВоВнешнейПрограмме Тогда
		ТекущиеДанные.Ведомость = ПредопределенноеЗначение("Документ.ВедомостьНаВыплатуЗарплаты.ПустаяСсылка");
	Иначе
		ТекущиеДанные.Ведомость = ПредопределенноеЗначение("Документ.ВедомостьНаВыплатуЗарплатыВБанк.ПустаяСсылка");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыплатаЗаработнойПлатыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	РедактированиеВыплатаЗаработнойПлаты = Истина;
	Если НоваяСтрока И НЕ Копирование Тогда
		
		ТекущиеДанные = Элементы.ВыплатаЗаработнойПлаты.ТекущиеДанные;
		
		Если УчетЗарплатыИКадровВоВнешнейПрограмме Тогда
			ТекущиеДанные.Ведомость = ПредопределенноеЗначение("Документ.ВедомостьНаВыплатуЗарплаты.ПустаяСсылка");
		Иначе
//++ БУ ЗИК
			ТекущиеДанные.Ведомость = ПредопределенноеЗначение("Документ.ВедомостьНаВыплатуЗарплатыВБанк.ПустаяСсылка");
//~			Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.ВыплатаЗарплатыНаЛицевыеСчета") Тогда
//~	        	Элементы.ВыплатаЗаработнойПлатыВедомость.ОграничениеТипа = Новый ОписаниеТипов("ДокументСсылка.ВедомостьНаВыплатуЗарплатыПеречислением");
//~				ТекущиеДанные.Ведомость = Объект.Ведомость;
//~			Иначе
//~				ТекущиеДанные.Ведомость = ПредопределенноеЗначение("Документ.ВедомостьНаВыплатуЗарплатыВБанк.ПустаяСсылка");
//~				Элементы.ВыплатаЗаработнойПлатыВедомость.ОграничениеТипа = Новый ОписаниеТипов("ДокументСсылка.ВедомостьНаВыплатуЗарплатыВБанк");
//~			КонецЕсли;	
//-- БУ ЗИК
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыплатаЗаработнойПлатыВедомостьНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	// ИНАГРО++
	СтандартнаяОбработка = Ложь; 		
			
	ТекущиеДанные = Элементы.ВыплатаЗаработнойПлаты.ТекущиеДанные;		
	
	мВедомость = ТекущиеДанные.Ведомость;
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Организация", Объект.Организация);

	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Отбор",         ПараметрыОтбора);
	ПараметрыФормы.Вставить("Банк",          Объект.Контрагент);
	ПараметрыФормы.Вставить("ТекущаяСтрока", ТекущиеДанные.Ведомость);
	
	ОткрытьФорму("Документ.ИНАГРО_ЗарплатаКВыплатеОрганизаций.Форма.ФормаВыбораСписаниеСРС", ПараметрыФормы, Элемент);
					
	// ИНАГРО-- 	
	
КонецПроцедуры

&НаКлиенте
Процедура ВыплатаЗаработнойПлатыСчетУчетаПриИзменении(Элемент)
	
	СтрокаПлатеж = Элементы.ВыплатаЗаработнойПлаты.ТекущиеДанные;
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеЗП") Тогда
		Платеж = СуммаЗаработнойПлатыПоВедомости(
			СтрокаПлатеж.Ведомость, СтрокаПлатеж.СчетУчета, СтрокаПлатеж.ГруппаУчетаНачислений, Объект.Ссылка, СтрокаПлатеж.НомерСтроки,
			УчетЗарплатыИКадровВоВнешнейПрограмме, Объект.Контрагент);
	Иначе
		Платеж = СуммаЗаработнойПлатыПоВедомостиФизЛица(
			СтрокаПлатеж.Ведомость, Объект.ФизЛицо, СтрокаПлатеж.СчетУчета, СтрокаПлатеж.ГруппаУчетаНачислений, Объект.Ссылка, СтрокаПлатеж.НомерСтроки,
			УчетЗарплатыИКадровВоВнешнейПрограмме);
	КонецЕсли;
		
	Если Платеж <> Неопределено Тогда 
		ЗаполнитьЗначениясвойств(СтрокаПлатеж, Платеж);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыплатаЗаработнойПлатыГруппаУчетаНачисленийПриИзменении(Элемент)
	
	СтрокаПлатеж = Элементы.ВыплатаЗаработнойПлаты.ТекущиеДанные;
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеЗП") Тогда
		Платеж = СуммаЗаработнойПлатыПоВедомости(
			СтрокаПлатеж.Ведомость, СтрокаПлатеж.СчетУчета, СтрокаПлатеж.ГруппаУчетаНачислений, Объект.Ссылка, СтрокаПлатеж.НомерСтроки,
			УчетЗарплатыИКадровВоВнешнейПрограмме, Объект.Контрагент);
	Иначе
		Платеж = СуммаЗаработнойПлатыПоВедомостиФизЛица(
			СтрокаПлатеж.Ведомость, Объект.ФизЛицо, СтрокаПлатеж.СчетУчета, СтрокаПлатеж.ГруппаУчетаНачислений, Объект.Ссылка, СтрокаПлатеж.НомерСтроки,
			УчетЗарплатыИКадровВоВнешнейПрограмме);
	КонецЕсли;
		
	Если Платеж <> Неопределено Тогда 
		ЗаполнитьЗначениясвойств(СтрокаПлатеж, Платеж);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыплатаЗаработнойПлатыПослеУдаления(Элемент)
	
	Объект.СуммаДокумента = Объект.ВыплатаЗаработнойПлаты.Итог("СуммаКВыплате");
	
КонецПроцедуры

&НаКлиенте
Процедура ФизЛицоВыплатаПриИзменении(Элемент)
	Объект.ВыплатаЗаработнойПлаты.Очистить();
	Объект.СчетКонтрагента = Неопределено;
	УстановитьВладельцаСчетаКонтрагента(Этаформа);
КонецПроцедуры

&НаКлиенте
Процедура ВедомостьПриИзменении(Элемент)
	Объект.ВыплатаЗаработнойПлаты.Очистить();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТабличнойЧастиПеречислениеНалогов

&НаКлиенте
Процедура ПеречислениеНалоговПриИзменении(Элемент)
	
	Объект.СуммаДокумента = Объект.ПеречислениеНалогов.Итог("Сумма");
	
КонецПроцедуры

&НаКлиенте
Процедура ПеречислениеНалоговПослеУдаления(Элемент)
	
	Объект.СуммаДокумента = Объект.ПеречислениеНалогов.Итог("Сумма");
	
КонецПроцедуры

&НаКлиенте
Процедура ПеречислениеНалоговСубконтоДтНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтрокаПлатеж = Элементы.ПеречислениеНалогов.ТекущиеДанные;

	ПараметрыДокумента = ПолучитьСписокПараметровВыбораСубконто(ЭтаФорма, СтрокаПлатеж, "СубконтоДт%Индекс%");
//++ БУ ЗИК
	ПараметрыДокумента.Вставить("СчетУчета", Объект.СчетУчетаРасчетовСКонтрагентом);
//~	ПараметрыДокумента.Вставить("СчетУчета", СтрокаПлатеж.СчетУчета);
//-- БУ ЗИК
	ОбщегоНазначенияБПКлиент.НачалоВыбораЗначенияСубконто(ЭтаФорма, Элемент, СтандартнаяОбработка, ПараметрыДокумента);

КонецПроцедуры

&НаКлиенте
Процедура ПеречислениеНалоговВедомостьПриИзменении(Элемент)
	
	СтрокаПлатеж = Элементы.ПеречислениеНалогов.ТекущиеДанные;
	СтрокаПлатеж.Сумма = СуммаНалоговПоВедомости(
		СтрокаПлатеж.Ведомость, Объект.СчетУчетаРасчетовСКонтрагентом, СтрокаПлатеж.СубконтоДт1, СтрокаПлатеж.СубконтоДт2, СтрокаПлатеж.СубконтоДт3, Объект.Ссылка, СтрокаПлатеж.НомерСтроки,
		УчетЗарплатыИКадровВоВнешнейПрограмме);
		
	
КонецПроцедуры
	
&НаКлиенте
Процедура ПеречислениеНалоговСубконтоДт1ПриИзменении(Элемент)
	СтрокаПлатеж = Элементы.ПеречислениеНалогов.ТекущиеДанные;
//++ БУ ЗИК	
	СтрокаПлатеж.Сумма = СуммаНалоговПоВедомости(
		СтрокаПлатеж.Ведомость, Объект.СчетУчетаРасчетовСКонтрагентом, СтрокаПлатеж.СубконтоДт1, СтрокаПлатеж.СубконтоДт2, СтрокаПлатеж.СубконтоДт3, Объект.Ссылка, СтрокаПлатеж.НомерСтроки,
		УчетЗарплатыИКадровВоВнешнейПрограмме);
//-- БУ ЗИК		
КонецПроцедуры
	
&НаКлиенте
Процедура ПеречислениеНалоговСубконтоДт2ПриИзменении(Элемент)
	СтрокаПлатеж = Элементы.ПеречислениеНалогов.ТекущиеДанные;
//++ БУ ЗИК	
	СтрокаПлатеж.Сумма = СуммаНалоговПоВедомости(
		СтрокаПлатеж.Ведомость, Объект.СчетУчетаРасчетовСКонтрагентом, СтрокаПлатеж.СубконтоДт1, СтрокаПлатеж.СубконтоДт2, СтрокаПлатеж.СубконтоДт3, Объект.Ссылка, СтрокаПлатеж.НомерСтроки,
		УчетЗарплатыИКадровВоВнешнейПрограмме);
//-- БУ ЗИК		
КонецПроцедуры	

&НаКлиенте
Процедура ПеречислениеНалоговСубконтоДт3ПриИзменении(Элемент)
	СтрокаПлатеж = Элементы.ПеречислениеНалогов.ТекущиеДанные;
//++ БУ ЗИК	
	СтрокаПлатеж.Сумма = СуммаНалоговПоВедомости(
		СтрокаПлатеж.Ведомость, Объект.СчетУчетаРасчетовСКонтрагентом, СтрокаПлатеж.СубконтоДт1, СтрокаПлатеж.СубконтоДт2, СтрокаПлатеж.СубконтоДт3, Объект.Ссылка, СтрокаПлатеж.НомерСтроки,
		УчетЗарплатыИКадровВоВнешнейПрограмме);
//-- БУ ЗИК		
КонецПроцедуры

&НаКлиенте
Процедура ПеречислениеНалоговСчетУчетаПриИзменении(Элемент)
	
	СтрокаПлатеж = Элементы.ПеречислениеНалогов.ТекущиеДанные;
	
	УстановитьЗаголовкиИДоступностьСубконто(
		ЭтаФорма, СтрокаПлатеж.СчетУчета, "", "ПеречислениеНалогов", Ложь);
	
	СтрокаПлатеж.СубконтоДт1 = Неопределено;
	СтрокаПлатеж.СубконтоДт2 = Неопределено;
	СтрокаПлатеж.СубконтоДт3 = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура ПеречислениеНалоговПриАктивизацииСтроки(Элемент)
//++ БУ ЗИК
//~	СтрокаПлатеж = Элементы.ПеречислениеНалогов.ТекущиеДанные;
//~	Если СтрокаПлатеж <> Неопределено Тогда
//~		УстановитьЗаголовкиИДоступностьСубконто(
//~		ЭтаФорма, СтрокаПлатеж.СчетУчета, "", "ПеречислениеНалогов", Ложь);
//~	КонецЕсли;
//-- БУ ЗИК		
КонецПроцедуры

&НаКлиенте
Процедура ПеречислениеНалоговСуммаПриИзменении(Элемент)
	Объект.СуммаДокумента = Объект.ПеречислениеНалогов.Итог("Сумма");
КонецПроцедуры


#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПровестиИЗакрыть(Команда)
	
	КлючеваяОперация = "ПроведениеСписаниеСРасчетногоСчета";
	ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени(КлючеваяОперация);
	
	ПараметрыЗаписи = Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение);
	Если Записать(ПараметрыЗаписи) Тогда
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ПодготовитьФормуНаСервере()
	
	УстановитьФункциональныеОпцииФормы();
	
	УстановитьСостояниеДокумента();
	
	УчетЗарплатыИКадровВоВнешнейПрограмме = ПолучитьФункциональнуюОпцию("УчетЗарплатыИКадровВоВнешнейПрограмме");
	
	// Заполнение реквизитов формы
	
	ТекущаяДатаДокумента           = Объект.Дата;
	ВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	ОплатаВВалюте = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Объект.СчетБанк).Валютный;
	
	УстановитьВладельцаСчетаКонтрагента(ЭтаФорма);
	ПеречислениеНалоговВедомостьНачалоВыбораНаСервере(ЭтаФорма); // ИНАГРО

	УстановитьПараметрыВыбораСчетовУчетаДенежныхСредств();
	УстановитьПараметрыВыбораБанковскихСчетов(ЭтаФорма);
	УстановитьПараметрыВыбораДоговораСКонтрагентом(ЭтаФорма);
	
	СписокВидовСРасшифровкойПлатежа.ЗагрузитьЗначения(
		Документы.СписаниеСРасчетногоСчета.ПолучитьСписокВидовОперацийСРасшифровкойПлатежа().ВыгрузитьЗначения());
	
	УстановитьКурсДокумента();
	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма);
	
	СвойстваПлатежа = Неопределено; // При открытии формы структуру не инициализируем, будет создана при первом обращении.
	
	ПлатежноеПоручение = Документы.СписаниеСРасчетногоСчета.НайтиДокументПлатежноеПоручение(
		Объект.Ссылка, Объект.ДокументОснование, НадписьПлатежноеПоручение);
	ПодтвержденоВыпискойБанка        = НЕ Объект.НеПодтвержденоВыпискойБанка;
	СгенерированноеНазначенияПлатежа = Документы.СписаниеСРасчетногоСчета.ПолучитьНазначениеПлатежа(Объект);
	
	ЗаголовокСтатьяДДС            = НСтр("ru='Статья движения ден. средств:';uk='Стаття руху гр. коштів:'");
	ЗаголовокНалоговоеНазначение  = НСтр("ru='Налоговое назначение:';uk='Податкове призначення:'");
	ЗаголовокСтатьяДекларацииПоЕН = НСтр("ru='Ст. декл. по ед. налогу:';uk='Ст. декл. по єд. податку:'");
	
	ЗаполнитьДобавленныеКолонкиТаблиц();
	
	УстановитьВидимостьСтраницНаСервере();
	УправлениеФормой(ЭтаФорма);
	УстановитьПараметрыВыбораСтатьиДекларацииПоЕдиномуНалогу();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСостояниеДокумента()
	
	СостояниеДокумента = ОбщегоНазначенияБП.СостояниеДокумента(Объект);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьФункциональныеОпцииФормы()

	ОбщегоНазначенияБПКлиентСервер.УстановитьПараметрыФункциональныхОпцийФормыДокумента(ЭтаФорма);
    ПлательщикЕдиногоНалога = УчетнаяПолитика.ПлательщикЕдиногоНалога(Объект.Организация, Объект.Дата);
	ЕстьНалогНаПрибыльДо2015= УчетнаяПолитика.ПлательщикНалогаНаПрибыльДо2015(Объект.Организация, НачалоМесяца(Объект.Дата));
	ЕстьНДС			  		= УчетнаяПолитика.ПлательщикНДС(Объект.Организация, НачалоМесяца(Объект.Дата));
	КоэффициентПропорциональногоНДС = НалоговыйУчет.ПолучитьКоэффициентПропорциональногоНДС(Объект.Организация, Объект.Дата);
	
КонецПроцедуры 

&НаКлиентеНаСервереБезКонтекста
Функция СвойстваСтрокРасшифровкиПлатежа(ПараметрыОбъекта, ПолучатьДоговор)
	
	Если НЕ ЗначениеЗаполнено(ПараметрыОбъекта.ВидОперации)
		ИЛИ НЕ ЗначениеЗаполнено(ПараметрыОбъекта.Организация)
		ИЛИ НЕ ЗначениеЗаполнено(ПараметрыОбъекта.Дата)
		ИЛИ НЕ ЗначениеЗаполнено(ПараметрыОбъекта.Контрагент)
		ИЛИ НЕ ЗначениеЗаполнено(ПараметрыОбъекта.ВалютаДокумента)
		ИЛИ (НЕ ЗначениеЗаполнено(ПараметрыОбъекта.ДоговорКонтрагента) И НЕ ПолучатьДоговор) Тогда
		
		СвойстваПлатежа = ПустаяСтруктураСвойстваПлатежа();
		
		Возврат СвойстваПлатежа;
		
	Иначе
		
		ПараметрыПлатежа = Новый Структура("ВидОперации, Организация, Дата, Контрагент, ДоговорКонтрагента, ВалютаДокумента, ЗаТару");
		ЗаполнитьЗначенияСвойств(ПараметрыПлатежа, ПараметрыОбъекта);
		ПараметрыПлатежа.Вставить("ОплатаВВалюте",
			ПараметрыОбъекта.ВалютаДокумента <> ПараметрыОбъекта.ВалютаРегламентированногоУчета);
		
		Возврат СвойстваСтрокРасшифровкиПлатежаСервер(ПараметрыПлатежа, ПолучатьДоговор);
		
	КонецЕсли;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ВидыДоговораСКонтрагентом(ВидОперации)
	
	ВидыДоговора = Новый Массив;
	
	Если ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.ОплатаПоставщику") Тогда
		ВидыДоговора.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СПоставщиком"));
		ВидыДоговора.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СКомитентом"));
		ВидыДоговора.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СКомиссионером"));
	ИначеЕсли ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.ВозвратДенежныхСредствПокупателю") Тогда
		ВидыДоговора.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СПокупателем"));
		ВидыДоговора.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СКомиссионером"));
		ВидыДоговора.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СКомитентом"));
	ИначеЕсли ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.РасчетыПоКредитамИЗаймамСКонтрагентами")
		ИЛИ ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.ПрочиеРасчетыСКонтрагентами") Тогда
		ВидыДоговора.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.Прочее"));
	КонецЕсли;
	
	Возврат ВидыДоговора;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьПараметрыВыбораДоговораСКонтрагентом(Форма)
	
	Объект   = Форма.Объект;
	Элементы = Форма.Элементы;
	
	НовыеПараметры = Новый Массив();
	ВидыДоговора   = ВидыДоговораСКонтрагентом(Объект.ВидОперации);
	НовыеПараметры.Добавить(Новый ПараметрВыбора("Отбор.ВидДоговора",   Новый ФиксированныйМассив(ВидыДоговора)));
	НовыеПараметры.Добавить(Новый ПараметрВыбора("Отбор.ОплатаВВалюте", Форма.ОплатаВВалюте));
	Если Форма.ОплатаВВалюте Тогда
		НовыеПараметры.Добавить(Новый ПараметрВыбора("Отбор.ВалютаВзаиморасчетов", Объект.ВалютаДокумента));
	КонецЕсли;
	
	Элементы.РасшифровкаПлатежаДоговорКонтрагента.ПараметрыВыбора = Новый ФиксированныйМассив(НовыеПараметры);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьПараметрыВыбораБанковскихСчетов(Форма)
	
	Элементы = Форма.Элементы;
	
	НовыйМассивПараметров = Новый Массив();
	НовыйМассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Валютный", Форма.ОплатаВВалюте));
	Элементы.СчетОрганизации.ПараметрыВыбора = Новый ФиксированныйМассив(НовыйМассивПараметров);
	
	НовыйМассивПараметров = Новый Массив();
	НовыйМассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Валютный", Форма.ОплатаВВалюте));
	НовыйМассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Владелец", Форма.ВладелецСчетаКонтрагента));
	Элементы.СчетКонтрагента.ПараметрыВыбора = Новый ФиксированныйМассив(НовыйМассивПараметров);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция СписокПараметровВыбораСубконто(Форма, ПараметрыОбъекта, ШаблонИмяПоляОбъекта)
	
	СписокПараметров = Новый Структура;
	Для Индекс = 1 По 3 Цикл
		ИмяПоля = СтрЗаменить(ШаблонИмяПоляОбъекта, "%Индекс%", Индекс);
		Если ТипЗнч(ПараметрыОбъекта[ИмяПоля]) = Тип("СправочникСсылка.Контрагенты") Тогда
			СписокПараметров.Вставить("Контрагент", ПараметрыОбъекта[ИмяПоля]);
		ИначеЕсли ТипЗнч(ПараметрыОбъекта[ИмяПоля]) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
			СписокПараметров.Вставить("ДоговорКонтрагента", ПараметрыОбъекта[ИмяПоля]);
		ИначеЕсли ТипЗнч(ПараметрыОбъекта[ИмяПоля]) = Тип("СправочникСсылка.Номенклатура") Тогда
			СписокПараметров.Вставить("Номенклатура", ПараметрыОбъекта[ИмяПоля]);
		ИначеЕсли ТипЗнч(ПараметрыОбъекта[ИмяПоля]) = Тип("СправочникСсылка.Склады") Тогда
			СписокПараметров.Вставить("Склад", ПараметрыОбъекта[ИмяПоля]);
		КонецЕсли;
	КонецЦикла;
	СписокПараметров.Вставить("Организация", Форма.Объект.Организация);
	СписокПараметров.Вставить("СчетУчета",   Форма.Объект.СчетУчетаРасчетовСКонтрагентом);
	
	Возврат СписокПараметров;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ТекущиеПараметрыОбъекта(Форма)
	
	Объект = Форма.Объект;
	
	ПараметрыОбъекта = Новый Структура(
		"Дата, ВидОперации, Организация, СчетОрганизации, ВалютаДокумента, Контрагент, 
		|СчетКонтрагента, СчетБанк");
	ЗаполнитьЗначенияСвойств(ПараметрыОбъекта, Объект);
	ПараметрыОбъекта.Вставить("ДоговорКонтрагента",
		?(Форма.СвойстваПлатежа = Неопределено, Неопределено,   Форма.СвойстваПлатежа.ДоговорКонтрагента));
	ПараметрыОбъекта.Вставить("ЗаТару",
		?(Форма.СвойстваПлатежа = Неопределено, Ложь,   ?(Форма.СвойстваПлатежа.ЗаТару = Неопределено, Ложь,   Форма.СвойстваПлатежа.ЗаТару)));
	ПараметрыОбъекта.Вставить("Амортизируется",
		?(Форма.СвойстваПлатежа = Неопределено, Ложь,   ?(Форма.СвойстваПлатежа.Амортизируется = Неопределено, Ложь,   Форма.СвойстваПлатежа.Амортизируется)));
	ПараметрыОбъекта.Вставить("ВалютаРегламентированногоУчета", Форма.ВалютаРегламентированногоУчета);
	ПараметрыОбъекта.Вставить("ОплатаВВалюте",                  Форма.ОплатаВВалюте);
	ПараметрыОбъекта.Вставить("ЕстьНалогНаПрибыльДо2015", Форма.ЕстьНалогНаПрибыльДо2015);
	ПараметрыОбъекта.Вставить("ЕстьНДС", 			Форма.ЕстьНДС);
	ПараметрыОбъекта.Вставить("КурсДокумента",      Форма.КурсДокумента);
	ПараметрыОбъекта.Вставить("КратностьДокумента", Форма.КратностьДокумента);
	
	Возврат ПараметрыОбъекта;
	
КонецФункции

&НаСервере
Процедура ПерезаполнитьРасшифровкуПлатежа()
	
	ИнициализироватьСвойстваПлатежаНаСервере();
	Объект.РасшифровкаПлатежа.Очистить();
	
	Если СписокВидовСРасшифровкойПлатежа.НайтиПоЗначению(Объект.ВидОперации) <> Неопределено Тогда
		
		СтрокаПлатеж = Объект.РасшифровкаПлатежа.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаПлатеж, СвойстваПлатежа);
		
		СтрокаПлатеж.СуммаПлатежа = Объект.СуммаДокумента;
		ПересчитатьСуммуНДС(СтрокаПлатеж);
		РассчитатьСуммуВзаиморасчетов(СтрокаПлатеж, ЭтаФорма);
		РассчитатьПропорциональныйНДС(ЭтаФорма, Истина);
		ОбновитьИтоги(ЭтаФорма);
		Элементы.РасшифровкаПлатежа.ТекущаяСтрока = СтрокаПлатеж.ПолучитьИдентификатор();
		
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьВладельцаСчетаКонтрагента(Форма)
	
	Объект = Форма.Объект;
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.ПереводНаДругойСчет") Тогда
		Форма.ВладелецСчетаКонтрагента = Объект.Организация;
//++ БУ ЗИК
//~	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.ВыплатаЗарплатыНаЛицевыеСчета") Тогда
//~		Форма.ВладелецСчетаКонтрагента = Объект.ФизЛицо;
//-- БУ ЗИК		
	Иначе
		Форма.ВладелецСчетаКонтрагента = Объект.Контрагент;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВидОперацииПриИзмененииСервер()
	
	УстановитьПараметрыВыбораСчетовУчетаДенежныхСредств();
	СчетБанкПриИзмененииСервер();
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПереводНаДругойСчет Тогда
		Объект.Контрагент      = Неопределено;
		Объект.СчетКонтрагента = Неопределено;
		Объект.СчетУчетаРасчетовСКонтрагентом = Элементы.СчетБанк.ПараметрыВыбора[0].Значение[0];
	ИначеЕсли (Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеЗП
			ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПрочееСписаниеБезналичныхДенежныхСредств)
			И ОплатаВВалюте Тогда
		
		Объект.СчетБанк        = ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.ТекущиеСчетаВИностраннойВалюте");
		Объект.ВалютаДокумента = ВалютаРегламентированногоУчета;
		ОплатаВВалюте          = Ложь;
		
	КонецЕсли;
	
	УстановитьВладельцаСчетаКонтрагента(ЭтаФорма);
	
	Если СписокВидовСРасшифровкойПлатежа.НайтиПоЗначению(Объект.ВидОперации) <> Неопределено Тогда
		УстановитьПараметрыВыбораДоговораСКонтрагентом(ЭтаФорма);
		ПараметрыОбъекта = ТекущиеПараметрыОбъекта(ЭтаФорма);
		СвойстваПлатежа  = СвойстваСтрокРасшифровкиПлатежа(ПараметрыОбъекта, Истина);
	КонецЕсли;
	
	ПерезаполнитьРасшифровкуПлатежа();
	УстановитьПараметрыВыбораБанковскихСчетов(ЭтаФорма);
	
	СформироватьНазначениеПлатежаСервер();
	
	УстановитьВидимостьСтраницНаСервере();
	УправлениеФормой(ЭтаФорма);
	УстановитьПараметрыВыбораСтатьиДекларацииПоЕдиномуНалогу();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПересчитатьСуммуНДС(СтрокаПлатеж)
	
	ЗначениеСтавкиНДС     = УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаПлатеж.СтавкаНДС);
	СтрокаПлатеж.СуммаНДС = СтрокаПлатеж.СуммаПлатежа * ЗначениеСтавкиНДС / (100 + ЗначениеСтавкиНДС);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьПустыеКурсыВалют(СтрокаПлатеж, Форма)

	Форма.КурсДокумента      = ?(Форма.КурсДокумента      = 0, 1, Форма.КурсДокумента);
	Форма.КратностьДокумента = ?(Форма.КратностьДокумента = 0, 1, Форма.КратностьДокумента);

	Если СтрокаПлатеж <> Неопределено Тогда
		СтрокаПлатеж.КурсВзаиморасчетов      = ?(СтрокаПлатеж.КурсВзаиморасчетов      = 0, 1, СтрокаПлатеж.КурсВзаиморасчетов);
		СтрокаПлатеж.КратностьВзаиморасчетов = ?(СтрокаПлатеж.КратностьВзаиморасчетов = 0, 1, СтрокаПлатеж.КратностьВзаиморасчетов);
	КонецЕсли;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РассчитатьСуммуВзаиморасчетов(СтрокаПлатеж, Форма)
	
	ЗаполнитьПустыеКурсыВалют(СтрокаПлатеж, Форма);
	СтрокаПлатеж.СуммаВзаиморасчетов = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(
		СтрокаПлатеж.СуммаПлатежа,
		Форма.Объект.ВалютаДокумента, СтрокаПлатеж.ДоговорКонтрагентаВалютаВзаиморасчетов,
		Форма.КурсДокумента, СтрокаПлатеж.КурсВзаиморасчетов,
		Форма.КратностьДокумента, СтрокаПлатеж.КратностьВзаиморасчетов);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура РассчитатьКурсИСуммуВзаиморасчетов(СтрокаПлатеж, Форма)
	
	Объект = Форма.Объект;
	СтруктураКурсаВзаиморасчетов = РаботаСКурсамиВалют.ПолучитьКурсВалюты(
		СтрокаПлатеж.ДоговорКонтрагентаВалютаВзаиморасчетов, Объект.Дата);
	
	СтрокаПлатеж.КурсВзаиморасчетов      = СтруктураКурсаВзаиморасчетов.Курс;
	СтрокаПлатеж.КратностьВзаиморасчетов = СтруктураКурсаВзаиморасчетов.Кратность;
	
	РассчитатьСуммуВзаиморасчетов(СтрокаПлатеж, Форма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Элементы = Форма.Элементы;
	Объект   = Форма.Объект;
	ДоступностьКонтрагента = Истина;
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.ПрочееСписаниеБезналичныхДенежныхСредств") Тогда
		УстановитьЗаголовкиИДоступностьСубконто(Форма, Объект.СчетУчетаРасчетовСКонтрагентом, "Прочие");
		
		Элементы.НалоговоеНазначениеПриПрочемСписании.Видимость = Форма.ЕстьНалогНаПрибыльДо2015;
		Элементы.ЗаголовокНалоговоеНазначение.Видимость			= Форма.ЕстьНалогНаПрибыльДо2015;
		
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалога") Тогда
		УстановитьЗаголовкиИДоступностьСубконто(Форма, Объект.СчетУчетаРасчетовСКонтрагентом, "", "ПеречислениеНалогов", Ложь);
		
		
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.ПереводНаДругойСчет") Тогда
		ДоступностьКонтрагента = Ложь;
	КонецЕсли;
	
	Элементы.Контрагент.Доступность = ДоступностьКонтрагента;
	
	ОбновитьИтоги(Форма);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьСтраницНаСервере()
	
	// т.к. Расшифровка платежа теперь есть у многих видов операций,
	// сначала отработаем формы-исключения
	МассивСтраниц = Новый Массив;
	МассивСтраниц.Добавить(Элементы.ГруппаПлатежПрочие);
	МассивСтраниц.Добавить(Элементы.ГруппаПереводНаДругойСчет);
	МассивСтраниц.Добавить(Элементы.ГруппаПеречислениеЗарплаты);
	МассивСтраниц.Добавить(Элементы.ГруппаРасчетыСКонтрагентами);
	МассивСтраниц.Добавить(Элементы.ГруппаПеречислениеДенСрПодотчетнику);
	МассивСтраниц.Добавить(Элементы.ГруппаПеречислениеНалогов);
	МассивСтраниц.Добавить(Элементы.ГруппаПокупкаПродажаВалюты);
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПрочееСписаниеБезналичныхДенежныхСредств Тогда
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаПлатежПрочие;
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалога Тогда
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаПеречислениеНалогов;
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПереводНаДругойСчет Тогда
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаПереводНаДругойСчет;
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеЗП Тогда
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаПеречислениеЗарплаты;
		Элементы.ГруппаВыплатаЗарплатыОперацииСтраницы.ТекущаяСтраница = Элементы.ГруппаВыплатаЗарплатыПоВедомостям;
		Элементы.ГруппаВыплатаЗарплатыОперации.Заголовок = НСтр("ru='Перечисление зарплаты';uk='Перерахування зарплати'"); // ИНАГРО
	ИначеЕсли ИНАГРО_ОбщийВызовСервераПовтИсп.ЕстьБСПУ() И Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ИНАГРО_ВыплатаПаевПоВедомостям Тогда // ИНАГРО 
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаПеречислениеЗарплаты;
		Элементы.ГруппаВыплатаЗарплатыОперацииСтраницы.ТекущаяСтраница = Элементы.ГруппаВыплатаПаевПоВедомостям;
		Элементы.ГруппаВыплатаЗарплатыОперации.Заголовок = НСтр("ru='Перечисление паев';uk='Перерахування паїв'");
	ИначеЕсли ИНАГРО_ОбщийВызовСервераПовтИсп.ЕстьБСПУ() И Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ИНАГРО_ДругиеВыплаты Тогда // ИНАГРО 
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаПеречислениеЗарплаты;
		Элементы.ГруппаВыплатаЗарплатыОперацииСтраницы.ТекущаяСтраница = Элементы.ГруппаВыплатаПаевПоВедомостям;
		Элементы.ГруппаВыплатаЗарплатыОперации.Заголовок = НСтр("ru='Прочие выплаты пайщику';uk='Інші виплати пайщику'");
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеДенежныхСредствПодотчетнику Тогда
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаПеречислениеДенСрПодотчетнику;
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПокупкаПродажаВалюты Тогда
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаПокупкаПродажаВалюты;
	Иначе
		// а затем тех, кто использует основную форму Расшифровки платежа
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаРасчетыСКонтрагентами;
	КонецЕсли;
	
	Для каждого ТекСтраница Из МассивСтраниц Цикл
		Если ТекСтраница <> Элементы.ГруппаСтраницы.ТекущаяСтраница Тогда
			Если ТекСтраница.Видимость Тогда
				ТекСтраница.Видимость = Ложь;
			КонецЕсли;
		Иначе
			Если НЕ ТекСтраница.Видимость Тогда
				ТекСтраница.Видимость = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьЗаголовкиИДоступностьСубконто(Форма, Счет, Постфикс, Префикс = "", ЭтоТаблица = Ложь)
	
	ПоляФормы = Новый Структура("Субконто1, Субконто2, Субконто3",
		Префикс + "СубконтоДт1" + Постфикс,
		Префикс + "СубконтоДт2" + Постфикс,
		Префикс + "СубконтоДт3" + Постфикс);
	
	ЗаголовкиПолей = Новый Структура("Субконто1, Субконто2, Субконто3",
		"ЗаголовокСубконто1", "ЗаголовокСубконто2", "ЗаголовокСубконто3");
	
	БухгалтерскийУчетКлиентСервер.ПриВыбореСчета(Счет, Форма, ПоляФормы, ЗаголовкиПолей, ЭтоТаблица);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ИзменитьПараметрыВыбораПолейСубконто(Форма)
	
	ПараметрыДокумента = СписокПараметровВыбораСубконто(Форма, Форма.Объект, "СубконтоДт%Индекс%");
	БухгалтерскийУчетКлиентСервер.ИзменитьПараметрыВыбораПолейСубконто(
		Форма, Форма.Объект, "СубконтоДт%Индекс%", "СубконтоДт%Индекс%Прочие", ПараметрыДокумента);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ИзменитьПараметрыВыбораСчетаПеревода(Форма)
	
	Элементы = Форма.Элементы;
	
	НовыйМассивПараметров = Новый Массив;
	Для каждого СтарыйПараметр Из Элементы.СчетУчетаРасчетовСКонтрагентомПеревод.ПараметрыВыбора Цикл
		Если СтарыйПараметр.Имя = "Отбор.Ссылка" Тогда
			НовыйМассивПараметров.Добавить(СтарыйПараметр);
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	НовыйМассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Валютный", Форма.ОплатаВВалюте));
	НовыйМассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.ЗапретитьИспользоватьВПроводках", Ложь));
	
	Элементы.СчетУчетаРасчетовСКонтрагентомПеревод.ПараметрыВыбора = Новый ФиксированныйМассив(НовыйМассивПараметров);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПустаяСтруктураСвойстваПлатежа()
	
	СвойстваПлатежа = Новый Структура("ДоговорКонтрагента,
		|Сделка,
		|ДоговорКонтрагентаВалютаВзаиморасчетов, ВедениеВзаиморасчетов,
		|ВалютаДокумента, СтавкаНДС, СложныйНалоговыйУчет,
		|КурсВзаиморасчетов, КратностьВзаиморасчетов,
		|СчетУчетаРасчетовСКонтрагентом,СчетУчетаРасчетовПоАвансам,СчетУчетаНДС,СчетУчетаНДСПодтвержденный,
		|НалоговоеНазначение,СтавкаНДС,Амортизируется,ЗаТару");
	Возврат СвойстваПлатежа;
	
КонецФункции

&НаСервереБезКонтекста
Функция СвойстваСтрокРасшифровкиПлатежаСервер(Знач ПараметрыПлатежа, Знач ПолучатьДоговор)
	
	СвойстваПлатежа = ПустаяСтруктураСвойстваПлатежа();
	
	Если ПолучатьДоговор Тогда
		
		НовыйДоговор  = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
		ВидыДоговоров = ВидыДоговораСКонтрагентом(ПараметрыПлатежа.ВидОперации);
		
		Отбор = Новый Структура;
		Отбор.Вставить("ОплатаВВалюте", Новый Структура("ЗначениеОтбора", ПараметрыПлатежа.ОплатаВВалюте));
		Если ПараметрыПлатежа.ОплатаВВалюте Тогда
			Отбор.Вставить("ВалютаВзаиморасчетов", Новый Структура("ЗначениеОтбора", ПараметрыПлатежа.ВалютаДокумента));
		КонецЕсли;
		
		БухгалтерскийУчетПереопределяемый.УстановитьДоговорКонтрагента(
			НовыйДоговор, ПараметрыПлатежа.Контрагент, ПараметрыПлатежа.Организация, ВидыДоговоров, Отбор);
		ПараметрыПлатежа.ДоговорКонтрагента = НовыйДоговор;
		
	КонецЕсли;
	
	СвойстваПлатежа.ДоговорКонтрагента = ПараметрыПлатежа.ДоговорКонтрагента;
	
	Если ЗначениеЗаполнено(ПараметрыПлатежа.ДоговорКонтрагента) Тогда
		
		СчетаУчета = СчетаУчетаРасчетовСКонтрагентом(ПараметрыПлатежа);
		ЗаполнитьЗначенияСвойств(СвойстваПлатежа, СчетаУчета);
		
		СвойстваДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			ПараметрыПлатежа.ДоговорКонтрагента, "ВалютаВзаиморасчетов,ВедениеВзаиморасчетов,СложныйНалоговыйУчет");
		СвойстваПлатежа.ВалютаДокумента                            = ПараметрыПлатежа.ВалютаДокумента;
		СвойстваПлатежа.ДоговорКонтрагентаВалютаВзаиморасчетов     = СвойстваДоговора.ВалютаВзаиморасчетов;
		СвойстваПлатежа.ВедениеВзаиморасчетов 					   = СвойстваДоговора.ВедениеВзаиморасчетов;
		СвойстваПлатежа.СложныйНалоговыйУчет                       = СвойстваДоговора.СложныйНалоговыйУчет;
		
		
		СтруктураКурса = РаботаСКурсамиВалют.ПолучитьКурсВалюты(СвойстваДоговора.ВалютаВзаиморасчетов, ПараметрыПлатежа.Дата);
		СвойстваПлатежа.КурсВзаиморасчетов      = СтруктураКурса.Курс;
		СвойстваПлатежа.КратностьВзаиморасчетов = СтруктураКурса.Кратность;
		
	Иначе
		Если ЗначениеЗаполнено(ПараметрыПлатежа.ВалютаДокумента) Тогда
			СвойстваПлатежа.ВалютаДокумента = ПараметрыПлатежа.ВалютаДокумента;
		Иначе
			СвойстваПлатежа.ВалютаДокумента = ПараметрыПлатежа.ВалютаРегламентированногоУчета;
		КонецЕсли;
		
		СвойстваПлатежа.КурсВзаиморасчетов      = 1;
		СвойстваПлатежа.КратностьВзаиморасчетов = 1;
	КонецЕсли;
	
	Возврат СвойстваПлатежа;
	
КонецФункции

&НаКлиенте
Процедура ИнициализироватьСвойстваПлатежаНаКлиенте(ТолькоСоздатьКлючи = Ложь)
	
	Если СвойстваПлатежа = Неопределено Тогда
		
		Если ТолькоСоздатьКлючи Тогда
			СвойстваПлатежа = ПустаяСтруктураСвойстваПлатежа();
		Иначе
			ИнициализироватьСвойстваПлатежаНаСервере(ТолькоСоздатьКлючи);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьСвойстваПлатежаНаСервере(ТолькоСоздатьКлючи = Ложь)
	
	Если СвойстваПлатежа = Неопределено Тогда
		
		Если ТолькоСоздатьКлючи Тогда
			СвойстваПлатежа = ПустаяСтруктураСвойстваПлатежа();
		Иначе
			ПараметрыОбъекта = ТекущиеПараметрыОбъекта(ЭтаФорма);
			Если Объект.РасшифровкаПлатежа.Количество() > 0 Тогда
				ПараметрыОбъекта.Вставить("ДоговорКонтрагента", Объект.РасшифровкаПлатежа[0].ДоговорКонтрагента);
			КонецЕсли;
			СвойстваПлатежа = СвойстваСтрокРасшифровкиПлатежа(ПараметрыОбъекта, Ложь);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция НовыеПараметрыПриИзмененииСчетаОрганизации(Знач ПараметрыОбъекта)
	
	СвойстваСчета = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		ПараметрыОбъекта.СчетОрганизации, "ВалютаДенежныхСредств");
	НоваяВалюта  = СвойстваСчета.ВалютаДенежныхСредств;
	
	Если ПараметрыОбъекта.ВалютаДокумента = НоваяВалюта Тогда
		Возврат Новый Структура("ВалютаДокумента", НоваяВалюта);
	КонецЕсли;
	
	СтруктураКурса = РаботаСКурсамиВалют.ПолучитьКурсВалюты(НоваяВалюта, ПараметрыОбъекта.Дата);
	
	НовыйСчетКонтрагента = Справочники.БанковскиеСчета.ПустаяСсылка();
	Если ЗначениеЗаполнено(ПараметрыОбъекта.Контрагент) Тогда
		УчетДенежныхСредствБП.УстановитьБанковскийСчет(
			НовыйСчетКонтрагента, ПараметрыОбъекта.Контрагент, СвойстваСчета.ВалютаДенежныхСредств);
	КонецЕсли;
	
	Если Документы.СписаниеСРасчетногоСчета.ЕстьРасшифровкаПлатежа(ПараметрыОбъекта.ВидОперации) Тогда
		ПараметрыОбъекта.ВалютаДокумента = НоваяВалюта;
		НовыеПараметры = СвойстваСтрокРасшифровкиПлатежаСервер(ПараметрыОбъекта, Истина);
	Иначе
		НовыеПараметры = Новый Структура;
	КонецЕсли;
	
	НовыеПараметры.Вставить("ВалютаДокумента",          НоваяВалюта);
	НовыеПараметры.Вставить("КурсДокумента",            СтруктураКурса.Курс);
	НовыеПараметры.Вставить("КратностьДокумента",       СтруктураКурса.Кратность);
	НовыеПараметры.Вставить("СчетКонтрагента",          НовыйСчетКонтрагента);
	
	Возврат НовыеПараметры;
	
КонецФункции

&НаСервереБезКонтекста
Функция НовыеПараметрыПриИзмененииОрганизации(Знач ПараметрыОбъекта)
	
	НовыйСчетОрганизации = Справочники.БанковскиеСчета.ПустаяСсылка();
	Если ЗначениеЗаполнено(ПараметрыОбъекта.Организация) Тогда
		УчетДенежныхСредствБП.УстановитьБанковскийСчет(
			НовыйСчетОрганизации, ПараметрыОбъекта.Организация,
			ПараметрыОбъекта.ВалютаРегламентированногоУчета, НЕ ПараметрыОбъекта.ОплатаВВалюте);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(НовыйСчетОрганизации) Тогда
		ПараметрыОбъекта.Вставить("СчетОрганизации", НовыйСчетОрганизации);
		НовыеПараметры = НовыеПараметрыПриИзмененииСчетаОрганизации(ПараметрыОбъекта);
	Иначе
		НовыеПараметры = Новый Структура("ВалютаДокумента", ПараметрыОбъекта.ВалютаДокумента);
	КонецЕсли;
	
	Если НЕ НовыеПараметры.Свойство("ДоговорКонтрагента")
		И Документы.СписаниеСРасчетногоСчета.ЕстьРасшифровкаПлатежа(ПараметрыОбъекта.ВидОперации) Тогда
		
		СвойстваПлатежа = СвойстваСтрокРасшифровкиПлатежаСервер(ПараметрыОбъекта, Истина);
		Для каждого СвойствоПлатежа Из СвойстваПлатежа Цикл
			НовыеПараметры.Вставить(СвойствоПлатежа.Ключ, СвойствоПлатежа.Значение);
		КонецЦикла;
		
	КонецЕсли;
	
	НовыеПараметры.Вставить("СчетОрганизации", НовыйСчетОрганизации);
	
	Возврат НовыеПараметры;
	
КонецФункции

&НаСервереБезКонтекста
Функция НовыеПараметрыПриИзмененииКонтрагента(Знач ПараметрыОбъекта)
	
	НовыйСчетКонтрагента = Справочники.БанковскиеСчета.ПустаяСсылка();
	Если ЗначениеЗаполнено(ПараметрыОбъекта.Контрагент) Тогда
		УчетДенежныхСредствБП.УстановитьБанковскийСчет(
			НовыйСчетКонтрагента, ПараметрыОбъекта.Контрагент,
			ПараметрыОбъекта.ВалютаДокумента, Истина);
	КонецЕсли;
	
	Если Документы.СписаниеСРасчетногоСчета.ЕстьРасшифровкаПлатежа(ПараметрыОбъекта.ВидОперации) Тогда
		НовыеПараметры = СвойстваСтрокРасшифровкиПлатежаСервер(ПараметрыОбъекта, Истина);
	Иначе
		НовыеПараметры = Новый Структура;
	КонецЕсли;
	
	НовыеПараметры.Вставить("СчетКонтрагента", НовыйСчетКонтрагента);
	
	Возврат НовыеПараметры;
	
КонецФункции

&НаСервереБезКонтекста
Функция НовыеПараметрыПриИзмененииФизЛица(Знач ПараметрыОбъекта, Знач УчетЗарплатыИКадровВоВнешнейПрограмме)
	
	НовыеПараметры = Новый Структура;
	НовыеПараметры.Вставить("Ссылка",  ПараметрыОбъекта.Ссылка);
	НовыеПараметры.Вставить("ФизЛицо", ПараметрыОбъекта.ФизЛицо);
	
	Возврат НовыеПараметры;
	
КонецФункции

&НаСервереБезКонтекста
Функция НовыеПараметрыПриИзмененииСчетаБанка(Знач ПараметрыОбъекта)
	
	ОплатаВВалюте = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(ПараметрыОбъекта.СчетБанк).Валютный;
	
	Если ОплатаВВалюте <> ПараметрыОбъекта.ОплатаВВалюте Тогда
		
		НовыйСчетОрганизации = Справочники.БанковскиеСчета.ПустаяСсылка();
		Если ЗначениеЗаполнено(ПараметрыОбъекта.Организация) Тогда
			УчетДенежныхСредствБП.УстановитьБанковскийСчет(
				НовыйСчетОрганизации, ПараметрыОбъекта.Организация,
				ПараметрыОбъекта.ВалютаРегламентированногоУчета, НЕ ОплатаВВалюте);
		КонецЕсли;
		
		ПараметрыОбъекта.Вставить("СчетОрганизации", НовыйСчетОрганизации);
		НовыеПараметры = НовыеПараметрыПриИзмененииСчетаОрганизации(ПараметрыОбъекта);
		НовыеПараметры.Вставить("СчетОрганизации",   НовыйСчетОрганизации);
		
	Иначе
		
		НовыеПараметры = Новый Структура("ВалютаДокумента", ПараметрыОбъекта.ВалютаДокумента);
		
	КонецЕсли;
	
	НовыеПараметры.Вставить("ОплатаВВалюте", ОплатаВВалюте);
	
	Возврат НовыеПараметры;
	
КонецФункции

&НаСервереБезКонтекста
Функция СчетаУчетаРасчетовСКонтрагентом(Знач ПараметрыОбъекта)
	
	Если ПараметрыОбъекта.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.РасчетыПоКредитамИЗаймамСКонтрагентами Тогда
		Возврат Новый Структура;
	КонецЕсли;
	
	СчетаУчета = Новый Структура("СчетУчетаРасчетовСКонтрагентом,СчетУчетаРасчетовПоАвансам,СчетУчетаНДС,СчетУчетаНДСПодтвержденный,НалоговоеНазначение,СтавкаНДС,Амортизируется");
	
	СтруктураСчетов = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаРасчетовСКонтрагентом(
		ПараметрыОбъекта.Организация, ПараметрыОбъекта.Контрагент, ПараметрыОбъекта.ДоговорКонтрагента);
	
	Если ПараметрыОбъекта.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ОплатаПоставщику тогда
		
		СчетаУчета.СчетУчетаРасчетовСКонтрагентом = СтруктураСчетов.СчетРасчетов;
		СчетаУчета.СчетУчетаРасчетовПоАвансам     = СтруктураСчетов.СчетАвансов;
		
		СчетаУчета.СчетУчетаНДС    				= СтруктураСчетов.СчетУчетаНДСПриобретений;
		СчетаУчета.СчетУчетаНДСПодтвержденный   = СтруктураСчетов.СчетУчетаНДСПриобретенийПодтвержденный;
		СчетаУчета.НалоговоеНазначение 			= СтруктураСчетов.НалоговоеНазначениеПриобретений;
		Если ПараметрыОбъекта.ЗаТару Тогда 
			СчетаУчета.НалоговоеНазначение 		= СтруктураСчетов.НалоговоеНазначениеПриобретенийПоТаре;
		КонецЕсли;
		СчетаУчета.СтавкаНДС		  			= СтруктураСчетов.СтавкаНДСПриобретений;
		СчетаУчета.Амортизируется		  		= СтруктураСчетов.Амортизируется;
		
	ИначеЕсли ПараметрыОбъекта.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПрочиеРасчетыСКонтрагентами тогда
		
		СчетаУчета.СчетУчетаРасчетовСКонтрагентом = СтруктураСчетов.СчетРасчетов;
		СчетаУчета.СчетУчетаРасчетовПоАвансам     = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
		
	Иначе
		
		СчетаУчета.СчетУчетаРасчетовСКонтрагентом = СтруктураСчетов.СчетРасчетовПокупателя;
		СчетаУчета.СчетУчетаРасчетовПоАвансам     = СтруктураСчетов.СчетАвансовПокупателя;
		
		СчетаУчета.СчетУчетаНДС    				= СтруктураСчетов.СчетУчетаНДСПродаж;
		СчетаУчета.СчетУчетаНДСПодтвержденный   = СтруктураСчетов.СчетУчетаНДСПродажПодтвержденный;
		СчетаУчета.НалоговоеНазначение 			= СтруктураСчетов.НалоговоеНазначениеПродаж;
		Если ПараметрыОбъекта.ЗаТару Тогда 
			СчетаУчета.НалоговоеНазначение 		= СтруктураСчетов.НалоговоеНазначениеПродажПоТаре;
		КонецЕсли;
		СчетаУчета.СтавкаНДС		  			= СтруктураСчетов.СтавкаНДСПродаж;
		
	КонецЕсли;
		
	Возврат СчетаУчета;
	
КонецФункции

&НаСервереБезКонтекста
Функция СуммаЗаработнойПлатыПоВедомости(Знач ПлатежнаяВедомость, Знач СчетУчета, Знач ГруппаУчетаНачислений, Знач Ссылка, Знач НомерСтроки, УчетЗарплатыИКадровВоВнешнейПрограмме, Знач Контрагент) // ИНАГРО Контрагент
	
	Ведомости = Новый Массив;
	Ведомости.Добавить(ПлатежнаяВедомость);
	
	Если УчетЗарплатыИКадровВоВнешнейПрограмме Тогда
		ТаблицаВедомостей = УчетЗарплаты.ПолучитьДанныеВедомостей(Ведомости, ,Ссылка);
		СуммаДокумента = ТаблицаВедомостей.Итог("СуммаКВыплате");
		Если ЗначениеЗаполнено(ПлатежнаяВедомость) И СуммаДокумента = 0 Тогда
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='По документу %1 нет сумм к выплате!';uk='За документом %1 немає сум до виплати!'"), ПлатежнаяВедомость.Ссылка);
			ТекстСообщения = ОбщегоНазначенияБПКлиентСервер.ПолучитьТекстСообщения(
				"Колонка", "Корректность", НСтр("ru='Ведомость';uk='Відомість'"), НомерСтроки, НСтр("ru='Перечисление заработной платы';uk='Перерахування заробітної плати'"), ТекстСообщения);
			ШаблонПоля = "ВыплатаЗаработнойПлаты[%1].Ведомость";
			Поле = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонПоля, Формат(НомерСтроки - 1, "ЧН=0; ЧГ="));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, Поле, "Объект");
		КонецЕсли;
		
		ТаблицаДокументовОплаты = ТаблицаВедомостей.Скопировать();
		ТаблицаДокументовОплаты.Свернуть("Ведомость,СчетУчета","СуммаКВыплате");
		
		Если ЗначениеЗаполнено(СчетУчета) Тогда
			Для Каждого СтрокаОплаты из ТаблицаДокументовОплаты Цикл
				Если СтрокаОплаты.СчетУчета = СчетУчета Тогда
					Продолжить;
				КонецЕсли;	
				ТаблицаДокументовОплаты.Удалить(СтрокаОплаты);
			КонецЦикла;	
		КонецЕсли;
		
		Если ТаблицаДокументовОплаты.Количество() = 1 Тогда
			Платеж = Новый Структура;
			Платеж.Вставить("СчетУчета",ТаблицаДокументовОплаты[0].СчетУчета);
			Платеж.Вставить("СуммаКВыплате",ТаблицаДокументовОплаты[0].СуммаКВыплате);
			Возврат Платеж;
		Иначе
			Возврат Неопределено;
		КонецЕсли;
		
	Иначе
		
		ПлатежнаяВедомость = Ведомости[0];
		ПараметрыОплаты = Ложь;
		
		// ИНАГРО++
		//ТаблицаВедомостей = УчетЗарплаты.ПолучитьДанныеВедомостейДляОплатыТаблично(Ссылка, Ведомости, , ПараметрыОплаты);
		
		Запрос = Новый Запрос;
		
		Запрос.Текст =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	СУММА(ИНАГРО_ЗарплатаКВыплатеОрганизацийЗарплата.Выплата) КАК СуммаКВыплате,
			|	ИНАГРО_ЗарплатаКВыплатеОрганизацийЗарплата.Ссылка КАК Ведомость,
			|	ИНАГРО_ЗарплатаКВыплатеОрганизацийЗарплата.СчетУчета
			|ИЗ
			|	Документ.ИНАГРО_ЗарплатаКВыплатеОрганизаций.Зарплата КАК ИНАГРО_ЗарплатаКВыплатеОрганизацийЗарплата
			|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ИНАГРО_ЗарплатаКВыплатеОрганизаций.РаботникиОрганизации КАК ИНАГРО_ЗарплатаКВыплатеОрганизацийРаботникиОрганизации
			|		ПО (ИНАГРО_ЗарплатаКВыплатеОрганизацийРаботникиОрганизации.Ссылка = ИНАГРО_ЗарплатаКВыплатеОрганизацийЗарплата.Ссылка)
			|			И (ИНАГРО_ЗарплатаКВыплатеОрганизацийРаботникиОрганизации.Сотрудник = ИНАГРО_ЗарплатаКВыплатеОрганизацийЗарплата.Сотрудник)
			|ГДЕ
			|	ИНАГРО_ЗарплатаКВыплатеОрганизацийЗарплата.Ссылка = &Ссылка
			|	И ИНАГРО_ЗарплатаКВыплатеОрганизацийРаботникиОрганизации.Банк = &Банк
			|
			|СГРУППИРОВАТЬ ПО
			|	ИНАГРО_ЗарплатаКВыплатеОрганизацийЗарплата.Ссылка,
			|	ИНАГРО_ЗарплатаКВыплатеОрганизацийЗарплата.СчетУчета";
		
		Запрос.УстановитьПараметр("Ссылка", ПлатежнаяВедомость);
		Запрос.УстановитьПараметр("Банк",   Контрагент);
		
		ТаблицаВедомостей = Запрос.Выполнить().Выгрузить();
		// ИНАГРО--
		
		ТаблицаДокументовОплаты = ТаблицаВедомостей.Скопировать();
//++ БУ ЗИК
		ТаблицаДокументовОплаты.Свернуть("Ведомость,СчетУчета","СуммаКВыплате");
		Если ЗначениеЗаполнено(СчетУчета) Тогда
			Для Каждого СтрокаОплаты из ТаблицаДокументовОплаты Цикл
				Если СтрокаОплаты.СчетУчета = СчетУчета Тогда
					Продолжить;
				КонецЕсли;	
				ТаблицаДокументовОплаты.Удалить(СтрокаОплаты);
			КонецЦикла;	
		КонецЕсли;
		
//~    	ТаблицаДокументовОплаты.Свернуть("Ведомость,ГруппаУчетаНачислений","СуммаКВыплате");
//~		Если ЗначениеЗаполнено(ГруппаУчетаНачислений) Тогда
//~			Счетчик = ТаблицаДокументовОплаты.Количество();
//~			Пока Счетчик > 0 Цикл
//~				СтрокаОплаты = ТаблицаДокументовОплаты[Счетчик-1];
//~				Счетчик = Счетчик - 1;
//~				Если СтрокаОплаты.ГруппаУчетаНачислений = ГруппаУчетаНачислений Тогда
//~					Продолжить;
//~				КонецЕсли;	
//~				ТаблицаДокументовОплаты.Удалить(СтрокаОплаты);
//~			КонецЦикла;	
//~		КонецЕсли;
//-- БУ ЗИК		
		
		ВедомостьОплачена = Ложь;
		Если ТаблицаДокументовОплаты.Количество() = 0 Тогда
			ВедомостьОплачена = Истина;
		КонецЕсли;
		
		Если ВедомостьОплачена Тогда
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Документ %1 полностью оплачен!';uk='Документ %1 повністю оплачений!'"), ПлатежнаяВедомость.Ссылка);
			ТекстСообщения = ОбщегоНазначенияБПКлиентСервер.ПолучитьТекстСообщения(
				"Колонка", "Корректность", НСтр("ru='Ведомость';uk='Відомість'"), НомерСтроки, НСтр("ru='Выплата заработной платы';uk='Виплата заробітної плати'"), ТекстСообщения);
			ШаблонПоля = "ВыплатаЗаработнойПлаты[%1].Ведомость";
			Поле = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонПоля, Формат(НомерСтроки - 1, "ЧН=0; ЧГ="));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, Поле, "Объект");
			Платеж = Новый Структура;
			Платеж.Вставить("СчетУчета",СчетУчета);
//++ БУ ЗИК
//~			Платеж.Вставить("ГруппаУчетаНачислений",ГруппаУчетаНачислений);
//-- БУ ЗИК
			Платеж.Вставить("СуммаКВыплате",0);
			Возврат Платеж
		ИначеЕсли ТаблицаДокументовОплаты.Количество() = 1 Тогда
			Платеж = Новый Структура;
//++ БУ ЗИК
			Платеж.Вставить("СчетУчета",ТаблицаДокументовОплаты[0].СчетУчета);
//~			Платеж.Вставить("ГруппаУчетаНачислений",ТаблицаДокументовОплаты[0].ГруппаУчетаНачислений);
//-- БУ ЗИК
			Платеж.Вставить("СуммаКВыплате",ТаблицаДокументовОплаты[0].СуммаКВыплате);
			Возврат Платеж;
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

&НаСервереБезКонтекста
Функция СуммаЗаработнойПлатыПоВедомостиФизЛица(Знач ПлатежнаяВедомость, Знач ФизЛицо, Знач СчетУчета, Знач ГруппаУчетаНачислений, Знач Ссылка, Знач НомерСтроки, УчетЗарплатыИКадровВоВнешнейПрограмме)
	
	Ведомости = Новый Массив;
	Ведомости.Добавить(ПлатежнаяВедомость);
	
		
	ПлатежнаяВедомость = Ведомости[0];
	ПараметрыОплаты = Ложь;
		
	ТаблицаВедомостей = УчетЗарплаты.ПолучитьДанныеВедомостейДляОплатыТаблично(Ссылка, Ведомости, ФизЛицо, ПараметрыОплаты);
		
	ТаблицаДокументовОплаты = ТаблицаВедомостей.Скопировать();
		
   	ТаблицаДокументовОплаты.Свернуть("Ведомость,ГруппаУчетаНачислений","СуммаКВыплате");
	Если ЗначениеЗаполнено(ГруппаУчетаНачислений) Тогда
		Счетчик = ТаблицаДокументовОплаты.Количество();
		Пока Счетчик > 0 Цикл
			СтрокаОплаты = ТаблицаДокументовОплаты[Счетчик-1];
			Счетчик = Счетчик - 1;
			Если СтрокаОплаты.ГруппаУчетаНачислений = ГруппаУчетаНачислений Тогда
				Продолжить;
			КонецЕсли;	
			ТаблицаДокументовОплаты.Удалить(СтрокаОплаты);
		КонецЦикла;	
	КонецЕсли;
		
	ВедомостьОплачена = Ложь;
	Если ТаблицаДокументовОплаты.Количество() = 0 Тогда
		ВедомостьОплачена = Истина;
	КонецЕсли;
		
	Если ВедомостьОплачена Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Документ %1 полностью оплачен!';uk='Документ %1 повністю оплачений!'"), ПлатежнаяВедомость.Ссылка);
		ТекстСообщения = ОбщегоНазначенияБПКлиентСервер.ПолучитьТекстСообщения(
				"Колонка", "Корректность", НСтр("ru='Ведомость';uk='Відомість'"), НомерСтроки, НСтр("ru='Выплата заработной платы';uk='Виплата заробітної плати'"), ТекстСообщения);
		ШаблонПоля = "ВыплатаЗаработнойПлаты[%1].Ведомость";
		Поле = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонПоля, Формат(НомерСтроки - 1, "ЧН=0; ЧГ="));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, Поле, "Объект");
		Платеж = Новый Структура;
		Платеж.Вставить("СчетУчета",СчетУчета);
		Платеж.Вставить("ГруппаУчетаНачислений",ГруппаУчетаНачислений);
		Платеж.Вставить("СуммаКВыплате",0);
		Возврат Платеж
	ИначеЕсли ТаблицаДокументовОплаты.Количество() = 1 Тогда
		Платеж = Новый Структура;
		Платеж.Вставить("ГруппаУчетаНачислений",ТаблицаДокументовОплаты[0].ГруппаУчетаНачислений);
		Платеж.Вставить("СуммаКВыплате",ТаблицаДокументовОплаты[0].СуммаКВыплате);
		Возврат Платеж;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

&НаСервереБезКонтекста
Функция СуммаНалоговПоВедомости(Знач ПлатежнаяВедомость, СчетУчета, Субконто1, Субконто2, Субконто3, Знач Ссылка, Знач НомерСтроки, УчетЗарплатыИКадровВоВнешнейПрограмме)
	
	Ведомости = Новый Массив;
	Ведомости.Добавить(ПлатежнаяВедомость);
	
	ПлатежнаяВедомость = Ведомости[0];
		
	Сумма = УчетЗарплаты.ПолучитьДанныеВедомостейДляНалогов(ПлатежнаяВедомость, СчетУчета, Субконто1, Субконто2, Субконто3);
	
	// ИНАГРО
	// Субконто ВоенныйСбор может быть и не предопределенным
	//Если СчетУчета = ПланыСчетов.Хозрасчетный.РасчетыПоОбязательнымПлатежам Тогда
	//	Субконто1 = УчетНДФЛ.ЗначенияВоенныйСбор().Налог;
	//КонецЕсли;	
		
	Возврат Сумма;

	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьСтавкуНДСПоДоговору(Знач ДоговорКонтрагента)
	
	СтавкаНДС = Перечисления.СтавкиНДС.НДС20;
	Возврат СтавкаНДС;
	
КонецФункции

&НаСервере
Процедура УстановитьПараметрыВыбораСчетовУчетаДенежныхСредств()
	
	СчетаОтбора = Новый Массив;
	СчетаОтбора.Добавить(ПланыСчетов.Хозрасчетный.СчетаВБанках);
	
	ОтбиратьПоВалюте = Ложь;
	ТекСчет = Неопределено;
	
	СчетаБанка = БухгалтерскийУчет.ПолучитьМассивСчетовДенежныхСредств(СчетаОтбора, ОтбиратьПоВалюте, ТекСчет);
	
	НовыйМассивПараметров = Новый Массив;
	НовыйМассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Ссылка", Новый ФиксированныйМассив(СчетаБанка)));
	НовыйМассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.ЗапретитьИспользоватьВПроводках", Ложь));
	Элементы.СчетБанк.ПараметрыВыбора = Новый ФиксированныйМассив(НовыйМассивПараметров);
	
	НовыйМассивПараметров = Новый Массив;
	НовыйМассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Ссылка",   Новый ФиксированныйМассив(СчетаБанка)));
	НовыйМассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Валютный", ОплатаВВалюте));
	НовыйМассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.ЗапретитьИспользоватьВПроводках", Ложь));
	Элементы.СчетУчетаРасчетовСКонтрагентомПеревод.ПараметрыВыбора = Новый ФиксированныйМассив(НовыйМассивПараметров);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьКурсДокумента()
	
	СтруктураКурса = РаботаСКурсамиВалют.ПолучитьКурсВалюты(Объект.ВалютаДокумента, Объект.Дата);
	КурсДокумента      = СтруктураКурса.Курс;
	КратностьДокумента = СтруктураКурса.Кратность;
	
КонецПроцедуры

&НаСервере
Процедура ДатаПриИзмененииСервер()
	
	УстановитьФункциональныеОпцииФормы();
	
	УстановитьКурсДокумента();
	Если Объект.ВалютаДокумента <> ВалютаРегламентированногоУчета Тогда
		ПересчитатьСуммыВзаиморасчетов();
	КонецЕсли;
	
	УправлениеФормой(ЭтаФорма);
	УстановитьПараметрыВыбораСтатьиДекларацииПоЕдиномуНалогу();
	
	Если Год(Объект.Дата) <> Год(ТекущаяДатаДокумента) Тогда
		РассчитатьПропорциональныйНДС(ЭтаФорма, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииСервер()
	
	УстановитьФункциональныеОпцииФормы();
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПереводНаДругойСчет Тогда
		Объект.СчетКонтрагента = Неопределено;
		УстановитьВладельцаСчетаКонтрагента(ЭтаФорма);
	КонецЕсли;
	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма);
	
	ПараметрыОбъекта = ТекущиеПараметрыОбъекта(ЭтаФорма);
	НовыеПараметры   = НовыеПараметрыПриИзмененииОрганизации(ПараметрыОбъекта);
	
	ЗаполнитьЗначенияСвойств(Объект, НовыеПараметры, "СчетОрганизации, ВалютаДокумента");
	Если ПараметрыОбъекта.ВалютаДокумента <> НовыеПараметры.ВалютаДокумента Тогда
		ЗаполнитьЗначенияСвойств(ЭтаФорма, НовыеПараметры, "КурсДокумента, КратностьДокумента");
		Объект.СчетКонтрагента = НовыеПараметры.СчетКонтрагента;
	КонецЕсли;
	
	ИнициализироватьСвойстваПлатежаНаСервере(Истина);
	ЗаполнитьЗначенияСвойств(СвойстваПлатежа, НовыеПараметры);
	ПерезаполнитьРасшифровкуПлатежа();
	СформироватьНазначениеПлатежаСервер(Ложь);
	
	УстановитьВидимостьСтраницНаСервере();
	УправлениеФормой(ЭтаФорма);
	УстановитьПараметрыВыбораСтатьиДекларацииПоЕдиномуНалогу();
	
КонецПроцедуры

&НаСервере
Процедура КонтрагентПриИзмененииСервер()
	
	УстановитьВладельцаСчетаКонтрагента(ЭтаФорма);
	
	УстановитьПараметрыВыбораБанковскихСчетов(ЭтаФорма);
	
	ПараметрыОбъекта = ТекущиеПараметрыОбъекта(ЭтаФорма);
	НовыеПараметры   = НовыеПараметрыПриИзмененииКонтрагента(ПараметрыОбъекта);
	
	Объект.СчетКонтрагента = НовыеПараметры.СчетКонтрагента;
	
	ИнициализироватьСвойстваПлатежаНаСервере(Истина);
	ЗаполнитьЗначенияСвойств(СвойстваПлатежа, НовыеПараметры);
	
	ПерезаполнитьРасшифровкуПлатежа();
	СформироватьНазначениеПлатежаСервер();
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура СчетКонтрагентаПриИзмененииСервер()
	
	СформироватьНазначениеПлатежаСервер();
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДобавленныеКолонкиТаблиц()
	
	Если Объект.РасшифровкаПлатежа.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	МассивДоговоров   = Объект.РасшифровкаПлатежа.Выгрузить(, "ДоговорКонтрагента").ВыгрузитьКолонку("ДоговорКонтрагента");
	СвойстваДоговоров = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(
		МассивДоговоров, "ВалютаВзаиморасчетов,ВедениеВзаиморасчетов,СложныйНалоговыйУчет");
	
	Для каждого СтрокаПлатеж Из Объект.РасшифровкаПлатежа Цикл
		Если ЗначениеЗаполнено(СтрокаПлатеж.ДоговорКонтрагента) Тогда
			СтрокаПлатеж.ДоговорКонтрагентаВалютаВзаиморасчетов     = СвойстваДоговоров[
				СтрокаПлатеж.ДоговорКонтрагента].ВалютаВзаиморасчетов;
			СтрокаПлатеж.ВедениеВзаиморасчетов 					    = СвойстваДоговоров[
				СтрокаПлатеж.ДоговорКонтрагента].ВедениеВзаиморасчетов;
			СтрокаПлатеж.СложныйНалоговыйУчет                       = СвойстваДоговоров[
				СтрокаПлатеж.ДоговорКонтрагента].СложныйНалоговыйУчет;

		Иначе
			СтрокаПлатеж.ДоговорКонтрагентаВалютаВзаиморасчетов     = Справочники.Валюты.ПустаяСсылка();
			СтрокаПлатеж.ВедениеВзаиморасчетов     					= Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПустаяСсылка();
			СтрокаПлатеж.СложныйНалоговыйУчет     					= Ложь;
		КонецЕсли;
	КонецЦикла;
	
	ПодтвержденоВыпискойБанка = НЕ Объект.НеПодтвержденоВыпискойБанка;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьНазначениеПлатежаСервер(ТолькоСумму = Ложь)
	
	Если ПустаяСтрока(Объект.НазначениеПлатежа) ИЛИ Объект.НазначениеПлатежа = СгенерированноеНазначенияПлатежа Тогда
		Объект.НазначениеПлатежа = Документы.СписаниеСРасчетногоСчета.ПолучитьНазначениеПлатежа(Объект, ТолькоСумму);
		СгенерированноеНазначенияПлатежа = Объект.НазначениеПлатежа;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СуммаДокументаПриИзмененииСервер()
	
	Если СписокВидовСРасшифровкойПлатежа.НайтиПоЗначению(Объект.ВидОперации) <> Неопределено
			И Объект.РасшифровкаПлатежа.Количество() = 1 Тогда
		СтрокаПлатеж = Объект.РасшифровкаПлатежа[0];
		СтрокаПлатеж.СуммаПлатежа = Объект.СуммаДокумента;
		ПересчитатьСуммуНДС(СтрокаПлатеж);
		РассчитатьСуммуВзаиморасчетов(СтрокаПлатеж, ЭтаФорма);
		РассчитатьПропорциональныйНДС(ЭтаФорма,Истина);
		ОбновитьИтоги(ЭтаФорма);
	КонецЕсли;
	
	СформироватьНазначениеПлатежаСервер(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменениеПериодаУплаты(Данные, ПутьРеквизита, ПутьРеквизитаПредставления, Направление = Неопределено)
	
	Если Направление = Неопределено Тогда
		Значение = Объект.Дата;
	Иначе
		Значение = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Данные, ПутьРеквизита);
		Значение = ДобавитьМесяц(Значение, Направление);
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(Данные, ПутьРеквизита, Значение);
	ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(Данные, ПутьРеквизитаПредставления, Формат(Значение, "ДФ='MMMM yyyy'"));
	
КонецПроцедуры

&НаКлиенте
Процедура НалоговыйПериодНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Значение = Объект.НалоговыйПериод;
	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("НалоговыйПериодНачалоВыбораЗавершение", ЭтотОбъект);
	
	ОткрытьФорму("ОбщаяФорма.ВыборПериода",
		Новый Структура("Значение, РежимВыбораПериода, ЗапрашиватьРежимВыбораПериодаУВладельца", Значение, "Месяц", Ложь),
		ЭтотОбъект,,,, ОповещениеОЗакрытии, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Функция ПроверитьДублиВедомостей(ТекущиеДанные, ТабличнаяЧасть = "ВыплатаЗаработнойПлаты")
	
	ЕстьДублиВедомостей = Ложь;
	
	СтрокаПоиска = Новый Структура("Ведомость, СчетУчета", ТекущиеДанные.Ведомость, ТекущиеДанные.СчетУчета);
	НайденныеСтроки = Объект[ТабличнаяЧасть].НайтиСтроки(СтрокаПоиска);
	Если НайденныеСтроки.Количество() <> 0 Тогда
		
		Если НайденныеСтроки.Количество() = 1 Тогда
			Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.ИНАГРО_ВыплатаПаевПоВедомостям") 
				ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.ИНАГРО_ДругиеВыплаты") Тогда // ИНАГРО
				ТабличнаяЧасть = "ВыплатаПаев";				
			КонецЕсли;
			Если Элементы[ТабличнаяЧасть].ТекущиеДанные.НомерСтроки <> НайденныеСтроки[0].НомерСтроки Тогда
				ЕстьДублиВедомостей = Истина;
			КонецЕсли;
		Иначе
			ЕстьДублиВедомостей = Истина;
		КонецЕсли;
		
		Если ЕстьДублиВедомостей  Тогда
			ТекстСообщения = НСтр("ru='Указанная ведомость уже выбрана в документе!';uk='Зазначена відомість вже обрана в документі!'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
	КонецЕсли;
	
	Возврат ЕстьДублиВедомостей;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьИтоги(Форма)
	
	Объект   = Форма.Объект;
	Элементы = Форма.Элементы;
	
	Форма.ИтогоСуммаПлатежа = Объект.РасшифровкаПлатежа.Итог("СуммаПлатежа");
	Форма.ИтогоВсегоНДС     = Объект.РасшифровкаПлатежа.Итог("СуммаНДС");
	
	Если Форма.СписокВидовСРасшифровкойПлатежа.НайтиПоЗначению(Объект.ВидОперации) <> Неопределено Тогда
		Элементы.РасшифровкаПлатежаСуммаПлатежа.ТекстПодвала = Формат(Форма.ИтогоСуммаПлатежа, "ЧЦ=12; ЧДЦ=2");
		Элементы.РасшифровкаПлатежаСуммаНДС.ТекстПодвала     = Формат(Форма.ИтогоВсегоНДС,     "ЧЦ=12; ЧДЦ=2");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СчетБанкПриИзмененииСервер()
	
	ПараметрыОбъекта = ТекущиеПараметрыОбъекта(ЭтаФорма);
	НовыеПараметры   = НовыеПараметрыПриИзмененииСчетаБанка(ПараметрыОбъекта);
	
	Если НовыеПараметры.ОплатаВВалюте <> ПараметрыОбъекта.ОплатаВВалюте Тогда
		
		ЗаполнитьЗначенияСвойств(ЭтаФорма, НовыеПараметры,
			"ОплатаВВалюте, КурсДокумента, КратностьДокумента");
		ЗаполнитьЗначенияСвойств(Объект, НовыеПараметры,
			"СчетОрганизации, ВалютаДокумента, СчетКонтрагента");
		
		ИзменитьПараметрыВыбораСчетаПеревода(ЭтаФорма);
		УстановитьПараметрыВыбораДоговораСКонтрагентом(ЭтаФорма);
		УстановитьПараметрыВыбораБанковскихСчетов(ЭтаФорма);
		
		ИнициализироватьСвойстваПлатежаНаСервере(Истина);
		ЗаполнитьЗначенияСвойств(СвойстваПлатежа, НовыеПараметры);
		ПерезаполнитьРасшифровкуПлатежа();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ФизЛицоВыплатаЗарплатыПриИзмененииСервер()
	
	ПараметрыОбъекта = ТекущиеПараметрыОбъекта(ЭтаФорма);
	НовыеПараметры   = НовыеПараметрыПриИзмененииФизЛица(ПараметрыОбъекта, УчетЗарплатыИКадровВоВнешнейПрограмме);
	ЗаполнитьЗначенияСвойств(Объект, НовыеПараметры, "СуммаДокумента");
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РассчитатьПропорциональныйНДС(Форма, ПересчитыватьВсеСтроки = Ложь)
	
	Объект = Форма.Объект;
	Если ПересчитыватьВсеСтроки Тогда
		Для каждого СтрокаРасшифровки Из Объект.РасшифровкаПлатежа Цикл
			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьПропорциональныйНДСТабЧасти(СтрокаРасшифровки,Форма.ЕстьНДС,Форма.КоэффициентПропорциональногоНДС);
		КонецЦикла;
	Иначе	
		СтрокаРасшифровки = Форма.Элементы.РасшифровкаПлатежа.ТекущиеДанные;
		Если СтрокаРасшифровки <> Неопределено Тогда
			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьПропорциональныйНДСТабЧасти(СтрокаРасшифровки,Форма.ЕстьНДС,Форма.КоэффициентПропорциональногоНДС);
		КонецЕсли; 
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура РасшифровкаПлатежаЗаТаруПриИзмененииНаСервере()
	
	СчетаУчета = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаРасчетовСКонтрагентом(
		Объект.Организация, Объект.Контрагент, Объект.ДоговорКонтрагента);
	Если Элементы.РасшифровкаПлатежа.ТекущаяСтрока <> Неопределено Тогда
		СтрокаПлатеж = Объект.РасшифровкаПлатежа.НайтиПоИдентификатору(
			Элементы.РасшифровкаПлатежа.ТекущаяСтрока);
	КонецЕсли;
	Если Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ОплатаПоставщику тогда
		
		СтрокаПлатеж.НалоговоеНазначение 			= СчетаУчета.НалоговоеНазначениеПриобретений;
		Если СтрокаПлатеж.ЗаТару Тогда
			СтрокаПлатеж.НалоговоеНазначение 		= СчетаУчета.НалоговоеНазначениеПриобретенийПоТаре;
		КонецЕсли;
		
	Иначе		
		
		СтрокаПлатеж.НалоговоеНазначение 			= СчетаУчета.НалоговоеНазначениеПродаж;
		Если СтрокаПлатеж.ЗаТару Тогда
			СтрокаПлатеж.НалоговоеНазначение 		= СчетаУчета.НалоговоеНазначениеПродажПоТаре;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьСписокПараметровВыбораСубконто(Форма, ПараметрыОбъекта, ШаблонИмяПоляОбъекта)

	СписокПараметров = Новый Структура;
	Для Индекс = 1 По 3 Цикл
		ИмяПоля = СтрЗаменить(ШаблонИмяПоляОбъекта, "%Индекс%", Индекс);
		Если ТипЗнч(ПараметрыОбъекта[ИмяПоля]) = Тип("СправочникСсылка.Контрагенты") Тогда
			СписокПараметров.Вставить("Контрагент", ПараметрыОбъекта[ИмяПоля]);
		ИначеЕсли ТипЗнч(ПараметрыОбъекта[ИмяПоля]) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
			СписокПараметров.Вставить("ДоговорКонтрагента", ПараметрыОбъекта[ИмяПоля]);
		ИначеЕсли ТипЗнч(ПараметрыОбъекта[ИмяПоля]) = Тип("СправочникСсылка.Номенклатура") Тогда
			СписокПараметров.Вставить("Номенклатура", ПараметрыОбъекта[ИмяПоля]);
		ИначеЕсли ТипЗнч(ПараметрыОбъекта[ИмяПоля]) = Тип("СправочникСсылка.Склады") Тогда
			СписокПараметров.Вставить("Склад", ПараметрыОбъекта[ИмяПоля]);
		КонецЕсли;
	КонецЦикла;
	СписокПараметров.Вставить("Организация", Форма.Объект.Организация);

	Возврат СписокПараметров;

КонецФункции

&НаСервере
Процедура ПересчитатьСуммыВзаиморасчетов()
	
	ОтборВалюта = Новый Структура("ДоговорКонтрагентаВалютаВзаиморасчетов", Объект.ВалютаДокумента);
	ПлатежиКИзменениюКураса = Объект.РасшифровкаПлатежа.НайтиСтроки(ОтборВалюта);
	Для каждого СтрокаПлатеж Из ПлатежиКИзменениюКураса Цикл
		РассчитатьКурсИСуммуВзаиморасчетов(СтрокаПлатеж, ЭтотОбъект);
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ЗАВЕРШЕНИЕ НЕМОДАЛЬНЫХ ВЫЗОВОВ

&НаКлиенте
Процедура ВопросПередЗаписьюЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		РежимЗаписи = ?(Объект.Проведен, РежимЗаписиДокумента.ОтменаПроведения, РежимЗаписиДокумента.Запись);
		ПараметрыЗаписи = Новый Структура("РежимЗаписи", РежимЗаписи);
		Записать(ПараметрыЗаписи);
		Если ДополнительныеПараметры.Свойство("Закрыть") Тогда
			Закрыть();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросПередЗакрытиемЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ПараметрыЗаписи = Новый Структура("Закрыть", Истина);
		Если Записать(ПараметрыЗаписи) Тогда
			Закрыть();
		КонецЕсли;
	ИначеЕсли Результат = КодВозвратаДиалога.Нет Тогда
		Модифицированность = Ложь;
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаКурсВзаиморасчетовНачалоВыбораЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	СтрокаПлатеж = ДополнительныеПараметры.СтрокаПлатеж;
	
	СтруктураКурсаИКратности = РезультатЗакрытия;
	
	Если СтруктураКурсаИКратности <> Неопределено Тогда
		СтрокаПлатеж.КурсВзаиморасчетов      = СтруктураКурсаИКратности.КурсВалюты;
		СтрокаПлатеж.КратностьВзаиморасчетов = СтруктураКурсаИКратности.КратностьВалюты;
	КонецЕсли;
	
	РассчитатьСуммуВзаиморасчетов(Элементы.РасшифровкаПлатежа.ТекущиеДанные, ЭтотОбъект);
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура НалоговыйПериодНачалоВыбораЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если РезультатЗакрытия = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НалоговыйПериод = РезультатЗакрытия;
	ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(ЭтотОбъект, "НалоговыйПериодСтрока", Формат(НалоговыйПериод, "ДФ='MMMM yyyy'"));
	Если Объект.НалоговыйПериод <> НалоговыйПериод Тогда
		Объект.НалоговыйПериод = НалоговыйПериод;
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ БСП

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры

// ИНАГРО++
//&НаСервере                                       
//Функция УстановитьПараметрыВыбораКонтрагента()
//	
//	ИНАГРО_НетБанка = Ложь;
//	СписокКонтрагентов = ПолучитьСписокКонтрагентов();
//	СписокКонтрагентов.Свернуть("Банк");
//	Если СписокКонтрагентов.Количество() = 0 Тогда		
//		ИНАГРО_НетБанка = Истина;		
//	КонецЕсли;		
//	
//	Возврат ИНАГРО_НетБанка;
//	
//КонецФункции

&НаСервере                                       
Процедура УстановитьПараметрыВыбораКонтрагента()
	
	ИНАГРО_НетБанка = Ложь;
	
	СписокКонтрагентов = ПолучитьСписокКонтрагентов();
	СписокКонтрагентов.Свернуть("Банк");
	
	Если СписокКонтрагентов.Количество() = 0 Тогда		
		
		ТекстСообщения = НСтр("ru='В текущей ведомости нет сумм к выплате через банк!';uk='У поточній відомості немає сум до виплати через банк'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
		ИНАГРО_НетБанка = Истина;
		
	ИначеЕсли СписокКонтрагентов.Количество() = 1 Тогда
		
		Объект.Контрагент =  СписокКонтрагентов[0].Банк;
		
		ЗаполнитьПоОснованию();
		КонтрагентПриИзмененииСервер();
		
	Иначе		
		
		МассивКонтрагентов = Новый Массив;
		
		Для Каждого Строка Из СписокКонтрагентов Цикл		
			МассивКонтрагентов.Добавить(Строка.Банк);
		КонецЦикла;
		
		Элементы.Контрагент.СписокВыбора.ЗагрузитьЗначения(МассивКонтрагентов);
		
	КонецЕсли; 	
		
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытииЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
   	
	Если РезультатВопроса <> КодВозвратаДиалога.ОК Тогда
		ЭтаФорма.Модифицированность = Ложь;
        ЭтаФорма.Закрыть();
		Возврат;
	КонецЕсли;	
		
	ТекстСообщения = НСтр("ru='Для завершения ввода на основании необходимо выбрать один банк из списка.';uk='Для завершення введення на підставі необхідно вибрати один банк зі списку.'");
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Объект.Контрагент");	
			
КонецПроцедуры  

&НаСервере
Функция ПолучитьСписокКонтрагентов()
	
	Запрос = Новый Запрос;
	
	Если ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.ИНАГРО_ЗарплатаКВыплатеОрганизаций") Тогда
		
		Запрос.Текст =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			|	РаботникиОрганизации.Банк КАК Банк
			|ИЗ
			|	Документ.ИНАГРО_ЗарплатаКВыплатеОрганизаций.РаботникиОрганизации КАК РаботникиОрганизации
			|ГДЕ
			|	РаботникиОрганизации.Ссылка = &Ссылка
			|	И РаботникиОрганизации.ВыплаченностьЗарплаты = ЗНАЧЕНИЕ(Перечисление.ВыплаченностьЗарплаты.Выплачено)
			|	И РаботникиОрганизации.СпособВыплаты = ЗНАЧЕНИЕ(Перечисление.СпособыВыплатыЗарплаты.ЧерезБанк)";
		
	ИначеЕсли Объект.ДокументОснование.Метаданные().Имя = "ИНАГРО_ВедомостьВыплатПайщикам" Тогда
		
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			|	СписокПайщиков.Банк КАК Банк
			|ИЗ
			|	Документ.ИНАГРО_ВедомостьВыплатПайщикам.СписокПайщиков КАК СписокПайщиков
			|ГДЕ
			|	СписокПайщиков.Ссылка.Ссылка = &Ссылка
			|	И СписокПайщиков.СпособВыплаты = ЗНАЧЕНИЕ(Перечисление.СпособыВыплатыЗарплаты.ЧерезБанк)";
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Ссылка", Объект.ДокументОснование); 
	
	Возврат Запрос.Выполнить().Выгрузить();			
	
КонецФункции

&НаСервере
Процедура ЗаполнитьПоОснованию()
	
	Объект.ВыплатаЗаработнойПлаты.Очистить();
	Если ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.ИНАГРО_ЗарплатаКВыплатеОрганизаций") Тогда
		
		Запрос = Новый Запрос;
		
		Запрос.Текст =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ПараметрыОплаты.СчетУчета КАК СчетУчета,
			|	СУММА(ПараметрыОплаты.Выплата) КАК СуммаКВыплате
			|ИЗ
			|	Документ.ИНАГРО_ЗарплатаКВыплатеОрганизаций.Зарплата КАК ПараметрыОплаты
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИНАГРО_СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям КАК РанееВыплаченныеСуммы
			|		ПО ПараметрыОплаты.Ссылка = РанееВыплаченныеСуммы.Ведомость
			|			И ПараметрыОплаты.Сотрудник = РанееВыплаченныеСуммы.Сотрудник
			|			И (РанееВыплаченныеСуммы.Регистратор <> &Регистратор)
			|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ИНАГРО_ЗарплатаКВыплатеОрганизаций.РаботникиОрганизации КАК РаботникиОрганизации
			|		ПО ПараметрыОплаты.Ссылка = РаботникиОрганизации.Ссылка
			|			И ПараметрыОплаты.Сотрудник = РаботникиОрганизации.Сотрудник
			|ГДЕ
			|	ПараметрыОплаты.Ссылка = &Ссылка
			|	И РанееВыплаченныеСуммы.Сотрудник ЕСТЬ NULL
			|	И РаботникиОрганизации.ВыплаченностьЗарплаты = ЗНАЧЕНИЕ(Перечисление.ВыплаченностьЗарплаты.Выплачено)
			|	И РаботникиОрганизации.СпособВыплаты = ЗНАЧЕНИЕ(Перечисление.СпособыВыплатыЗарплаты.ЧерезБанк)
			|	И РаботникиОрганизации.Банк = &Банк
			|
			|СГРУППИРОВАТЬ ПО
			|	ПараметрыОплаты.СчетУчета";
		
		Запрос.УстановитьПараметр("Ссылка",      Объект.ДокументОснование);
		Запрос.УстановитьПараметр("Регистратор", Объект.Ссылка);
		Запрос.УстановитьПараметр("Банк",        Объект.Контрагент);	
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			СтрокаВедомость = Объект.ВыплатаЗаработнойПлаты.Добавить();
			СтрокаВедомость.Ведомость	  = Объект.ДокументОснование;
			СтрокаВедомость.СчетУчета	  = Выборка.СчетУчета;
			СтрокаВедомость.СуммаКВыплате = Выборка.СуммаКВыплате;
			
		КонецЦикла;			 
		
		Объект.СуммаДокумента = Объект.ВыплатаЗаработнойПлаты.Итог("СуммаКВыплате");
		
	ИначеЕсли Объект.ДокументОснование.Метаданные().Имя = "ИНАГРО_ВедомостьВыплатПайщикам" Тогда
		
		Запрос = Новый Запрос;
		
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			|	СУММА(ИНАГРО_ВедомостьВыплатПайщикамСписокПайщиков.Выплата) КАК СуммаКВыплате,
			|	ИНАГРО_ВедомостьВыплатПайщикамСписокПайщиков.СчетУчетаРасчетовСКонтрагентом КАК СчетУчета,
			|	ИНАГРО_ВедомостьВыплатПайщикамСписокПайщиков.Ссылка КАК Ведомость,
			|	ИНАГРО_ВедомостьВыплатПайщикамСписокПайщиков.Банк КАК Банк
			|ИЗ
			|	Документ.ИНАГРО_ВедомостьВыплатПайщикам.СписокПайщиков КАК ИНАГРО_ВедомостьВыплатПайщикамСписокПайщиков
			|ГДЕ
			|	ИНАГРО_ВедомостьВыплатПайщикамСписокПайщиков.Ссылка.Ссылка = &Ссылка
			|	И ИНАГРО_ВедомостьВыплатПайщикамСписокПайщиков.СпособВыплаты = ЗНАЧЕНИЕ(Перечисление.СпособыВыплатыЗарплаты.ЧерезБанк)
			|
			|СГРУППИРОВАТЬ ПО
			|	ИНАГРО_ВедомостьВыплатПайщикамСписокПайщиков.Ссылка,
			|	ИНАГРО_ВедомостьВыплатПайщикамСписокПайщиков.СчетУчетаРасчетовСКонтрагентом,
			|	ИНАГРО_ВедомостьВыплатПайщикамСписокПайщиков.Банк";
		
		Запрос.УстановитьПараметр("Ссылка", Объект.ДокументОснование); 
	
		СписокНоменклатуры = Запрос.Выполнить().Выгрузить();
		
		Для Каждого СтрокаТаблицы Из СписокНоменклатуры Цикл
			
			Если СтрокаТаблицы.Банк = Объект.Контрагент Тогда
				
				СтрокаВедомость = Объект.ВыплатаЗаработнойПлаты.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаВедомость, СтрокаТаблицы);
				
			КонецЕсли; 
			
		КонецЦикла;
		
		Объект.СуммаДокумента = Объект.ВыплатаЗаработнойПлаты.Итог("СуммаКВыплате");
		
	ИначеЕсли Объект.ДокументОснование.Метаданные().Имя = "ИНАГРО_НачислениеДругихВыплат" Тогда
		
		Запрос = Новый Запрос;
		
		
		Запрос.Текст =                             
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			|	СУММА(НачислениеДругихВыплатТЧ.КВыдаче) КАК СуммаКВыплате,
			|	НачислениеДругихВыплатТЧ.Ссылка КАК Ведомость,
			|	НачислениеДругихВыплатТЧ.Ссылка.СчетВзаиморасчетов КАК СчетУчета
			|ИЗ
			|	Документ.ИНАГРО_НачислениеДругихВыплат.Товары КАК НачислениеДругихВыплатТЧ
			|ГДЕ
			|	НачислениеДругихВыплатТЧ.Ссылка.Ссылка = &Ссылка
			|
			|СГРУППИРОВАТЬ ПО
			|	НачислениеДругихВыплатТЧ.Ссылка,
			|	НачислениеДругихВыплатТЧ.Ссылка.СчетВзаиморасчетов";
		
		Запрос.УстановитьПараметр("Ссылка", Объект.ДокументОснование); 
	
		СписокНоменклатуры = Запрос.Выполнить().Выгрузить();
		
		Для Каждого СтрокаТаблицы Из СписокНоменклатуры Цикл
			
			СтрокаВедомость = Объект.ВыплатаЗаработнойПлаты.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаВедомость, СтрокаТаблицы);
				
		КонецЦикла;
		
		Объект.СуммаДокумента = Объект.ВыплатаЗаработнойПлаты.Итог("СуммаКВыплате");
		
	КонецЕсли; 		
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоВедомости(мВедомость, НомерСтроки)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ // ИНАГРО РАЗРЕШЕННЫЕ
		|	СУММА(Основной.Выплата) КАК Сумма,
		|	Основной.Ссылка КАК Ведомость,
		|	Основной.СчетУчета
		|ИЗ Документ.ИНАГРО_ЗарплатаКВыплатеОрганизаций.Зарплата КАК Основной
		|	
		|ЛЕВОЕ СОЕДИНЕНИЕ Документ.ИНАГРО_ЗарплатаКВыплатеОрганизаций.РаботникиОрганизации КАК Работники
		|ПО Работники.Ссылка = Основной.Ссылка
		|	И	Работники.Сотрудник = Основной.Сотрудник
		|
		|ГДЕ	Основной.Ссылка = &Ссылка
		|	И	Работники.Банк = &Банк
		|
		|СГРУППИРОВАТЬ ПО
		|	Основной.Ссылка,
		|	Основной.СчетУчета
		|";
	
	Запрос.УстановитьПараметр("Ссылка",    мВедомость);
	Запрос.УстановитьПараметр("Банк",      Объект.Контрагент);
	Запрос.УстановитьПараметр("ЧерезБанк", Перечисления.СпособыВыплатыЗарплаты.ЧерезБанк);  

	Выборка = Запрос.Выполнить().Выгрузить();
	
	Для Каждого Строка Из Выборка Цикл 
		
		Платеж = СуммаЗаработнойПлатыПоВедомости(
			Строка.Ведомость, Строка.СчетУчета, "", Объект.Ссылка, НомерСтроки,
			Ложь, Объект.Контрагент); // ИНАГРО Объект.Контрагент
			
		Если Платеж <> Неопределено Тогда 
			СтрокаПеречислений = Объект.ВыплатаЗаработнойПлаты.Добавить();
			СтрокаПеречислений.Ведомость     = Строка.Ведомость;
			СтрокаПеречислений.СчетУчета     = Строка.СчетУчета;
			СтрокаПеречислений.СуммаКВыплате = Платеж.СуммаКВыплате;
		КонецЕсли;		
		
	КонецЦикла;

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПеречислениеНалоговВедомостьНачалоВыбораНаСервере(Форма)
	
	// ИНАГРО ++ Ограничиваем типы документов для выбора
	
	Элементы = Форма.Элементы;
	Объект = Форма.Объект;
	
	МассивТипов = Новый Массив();
	
	Если ПравоДоступа("Чтение", Метаданные.Документы.ИНАГРО_ЗарплатаКВыплатеОрганизаций) Тогда
		МассивТипов.Добавить(Тип("ДокументСсылка.ИНАГРО_ЗарплатаКВыплатеОрганизаций"));
	КонецЕсли;
	
	Если ПравоДоступа("Чтение", Метаданные.Документы.ИНАГРО_ВедомостьРеализация) Тогда
		МассивТипов.Добавить(Тип("ДокументСсылка.ИНАГРО_ВедомостьРеализация"));
	КонецЕсли;

	Если ИНАГРО_ОбщийВызовСервераПовтИсп.ЕстьБСПУ() Тогда  
		
		Если ПравоДоступа("Чтение", Метаданные.Документы.ИНАГРО_ВедомостьВыплатПайщикам) Тогда
			МассивТипов.Добавить(Тип("ДокументСсылка.ИНАГРО_ВедомостьВыплатПайщикам"));
		КонецЕсли;
		
		//Если ПравоДоступа("Чтение", Метаданные.Документы.ИНАГРО_НачислениеДругихВыплат) Тогда
		//	МассивТипов.Добавить(Тип("ДокументСсылка.ИНАГРО_НачислениеДругихВыплат"));
		//КонецЕсли;
	КонецЕсли;
	
	ОписаниеТипов = Новый ОписаниеТипов(МассивТипов);
	Элементы.ПеречислениеНалоговВедомость.ОграничениеТипа = ОписаниеТипов;	

КонецПроцедуры

&НаСервереБезКонтекста                                                                                        
Функция СуммаВыплаченыхПаевПоВедомости(Знач ПлатежнаяВедомость, Знач СчетУчета, Знач Ссылка, Знач НомерСтроки, Знач Контрагент, Знач ВидОперации) // ИНАГРО
	
	Запрос = Новый Запрос;
		
	Если ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ИНАГРО_ВыплатаПаевПоВедомостям Тогда 
		
		Запрос.Текст = 	
		"ВЫБРАТЬ
		|	СУММА(ИНАГРО_ВедомостьВыплатПайщикамСписокПайщиков.Выплата) КАК СуммаКВыплате,
		|	ИНАГРО_ВедомостьВыплатПайщикамСписокПайщиков.Ссылка КАК Ведомость,
		|	ИНАГРО_ВедомостьВыплатПайщикамСписокПайщиков.СчетУчетаРасчетовСКонтрагентом КАК СчетУчета
		|ИЗ
		|	Документ.ИНАГРО_ВедомостьВыплатПайщикам.СписокПайщиков КАК ИНАГРО_ВедомостьВыплатПайщикамСписокПайщиков
		|ГДЕ
		|	ИНАГРО_ВедомостьВыплатПайщикамСписокПайщиков.Ссылка = &Ссылка
		|	И ИНАГРО_ВедомостьВыплатПайщикамСписокПайщиков.Банк = &Банк
		|	И ИНАГРО_ВедомостьВыплатПайщикамСписокПайщиков.СпособВыплаты = ЗНАЧЕНИЕ(Перечисление.СпособыВыплатыЗарплаты.ЧерезБанк)
		|
		|СГРУППИРОВАТЬ ПО
		|	ИНАГРО_ВедомостьВыплатПайщикамСписокПайщиков.Ссылка,
		|	ИНАГРО_ВедомостьВыплатПайщикамСписокПайщиков.СчетУчетаРасчетовСКонтрагентом";	
			
		Запрос.УстановитьПараметр("Ссылка", ПлатежнаяВедомость);
		Запрос.УстановитьПараметр("Банк",   Контрагент);
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ИНАГРО_ДругиеВыплаты Тогда 
		
		Запрос.Текст =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	СУММА(ИНАГРО_НачислениеДругихВыплатТовары.КВыдаче) КАК СуммаКВыплате,
			|	ИНАГРО_НачислениеДругихВыплатТовары.Ссылка КАК Ведомость,
			|	ИНАГРО_НачислениеДругихВыплатТовары.Ссылка.СчетВзаиморасчетов КАК СчетУчета
			|ИЗ
			|	Документ.ИНАГРО_НачислениеДругихВыплат.Товары КАК ИНАГРО_НачислениеДругихВыплатТовары
			|ГДЕ
			|	ИНАГРО_НачислениеДругихВыплатТовары.Ссылка = &Ссылка
			|
			|СГРУППИРОВАТЬ ПО
			|	ИНАГРО_НачислениеДругихВыплатТовары.Ссылка,
			|	ИНАГРО_НачислениеДругихВыплатТовары.Ссылка.СчетКредита";
		
		Запрос.УстановитьПараметр("Ссылка", ПлатежнаяВедомость);
		
	КонецЕсли;
	
	ТаблицаВедомостей = Запрос.Выполнить().Выгрузить();	
		
	ТаблицаДокументовОплаты = ТаблицаВедомостей.Скопировать();
	ТаблицаДокументовОплаты.Свернуть("Ведомость, СчетУчета", "СуммаКВыплате"); 
	
	Если ЗначениеЗаполнено(СчетУчета) Тогда
		Для Каждого СтрокаОплаты Из ТаблицаДокументовОплаты Цикл
			Если СтрокаОплаты.СчетУчета = СчетУчета Тогда
				Продолжить;
			КонецЕсли;	
			ТаблицаДокументовОплаты.Удалить(СтрокаОплаты);
		КонецЦикла;	
	КонецЕсли; 	
	
	ВедомостьОплачена = Ложь;
	Если ТаблицаДокументовОплаты.Количество() = 0 Тогда
		ВедомостьОплачена = Истина;
	КонецЕсли;
	
	Если ВедомостьОплачена Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='Документ %1 полностью оплачен!';uk='Документ %1 повністю оплачений!'"), ПлатежнаяВедомость.Ссылка);
		ТекстСообщения = ОбщегоНазначенияБПКлиентСервер.ПолучитьТекстСообщения(
		"Колонка", "Корректность", НСтр("ru='Ведомость';uk='Відомість'"), НомерСтроки, НСтр("ru='Выплата паев';uk='Виплата паїв'"), ТекстСообщения);
		ШаблонПоля = "ВыплатаПаев[%1].Ведомость";
		Поле = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонПоля, Формат(НомерСтроки - 1, "ЧН=0; ЧГ="));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, Поле, "Объект");
		Платеж = Новый Структура;
		Платеж.Вставить("СчетУчета",     СчетУчета);
		Платеж.Вставить("СуммаКВыплате", 0);
		Возврат Платеж
	ИначеЕсли ТаблицаДокументовОплаты.Количество() = 1 Тогда
		Платеж = Новый Структура;
		Платеж.Вставить("СчетУчета",     ТаблицаДокументовОплаты[0].СчетУчета);
		Платеж.Вставить("СуммаКВыплате", ТаблицаДокументовОплаты[0].СуммаКВыплате);
		Возврат Платеж;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
		
КонецФункции






#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыВыплатаПаев

&НаКлиенте
Процедура ВыплатаПаевПриИзменении(Элемент)
	
	Если НЕ РедактированиеВыплатаЗаработнойПлаты Тогда
		Возврат;
	КонецЕсли;
	
	Объект.СуммаДокумента = Объект.ВыплатаЗаработнойПлаты.Итог("СуммаКВыплате");
	
КонецПроцедуры

&НаКлиенте
Процедура ВыплатаПаевПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	РедактированиеВыплатаЗаработнойПлаты = Истина;

	Если НоваяСтрока И НЕ Копирование Тогда
		
		ТекущиеДанные = Элементы.ВыплатаПаев.ТекущиеДанные;
		
		Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.ИНАГРО_ВыплатаПаевПоВедомостям") Тогда 
			ТекущиеДанные.Ведомость = ПредопределенноеЗначение("Документ.ИНАГРО_ВедомостьВыплатПайщикам.ПустаяСсылка");							
		ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.ИНАГРО_ДругиеВыплаты") Тогда 
			ТекущиеДанные.Ведомость = ПредопределенноеЗначение("Документ.ИНАГРО_НачислениеДругихВыплат.ПустаяСсылка");							
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВыплатаПаевПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	РедактированиеВыплатаЗаработнойПлаты = Ложь;

	Если НоваяСтрока Тогда
		ТекущиеДанные = Элементы.ВыплатаПаев.ТекущиеДанные;
		Если ТекущиеДанные <> Неопределено Тогда
			Если ПроверитьДублиВедомостей(ТекущиеДанные) Тогда
				Элементы.ВыплатаПаев.ТекущиеДанные.Ведомость     = "";
				Элементы.ВыплатаПаев.ТекущиеДанные.СуммаКВыплате = 0;
				ОтменаРедактирования = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если НоваяСтрока И ОтменаРедактирования Тогда
		Объект.СуммаДокумента = Объект.ВыплатаЗаработнойПлаты.Итог("СуммаКВыплате");
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВыплатаПаевВедомостьПриИзменении(Элемент)
	
	СтрокаПлатеж = Элементы.ВыплатаПаев.ТекущиеДанные;   	
		
	Платеж = СуммаВыплаченыхПаевПоВедомости(
		СтрокаПлатеж.Ведомость, СтрокаПлатеж.СчетУчета, Объект.Ссылка, СтрокаПлатеж.НомерСтроки, Объект.Контрагент, Объект.ВидОперации); 	
	
	Если Платеж <> Неопределено Тогда 		
		СтрокаПлатеж.СчетУчета     = Платеж.СчетУчета;
		СтрокаПлатеж.СуммаКВыплате = Платеж.СуммаКВыплате;
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ВыплатаПаевВедомостьНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
				
	СтандартнаяОбработка = Ложь;	
		
	ТекущиеДанные = Элементы.ВыплатаПаев.ТекущиеДанные;		
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Организация", Объект.Организация);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Отбор",         ПараметрыОтбора);
	ПараметрыФормы.Вставить("ТекущаяСтрока", ТекущиеДанные.Ведомость);
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.ИНАГРО_ВыплатаПаевПоВедомостям") Тогда 
		ПараметрыФормы.Вставить("Банк",          Объект.Контрагент);
		ОткрытьФорму("Документ.ИНАГРО_ВедомостьВыплатПайщикам.Форма.ФормаВыбораСписаниеСРС", ПараметрыФормы, Элемент);	
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.ИНАГРО_ДругиеВыплаты") Тогда
		Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
			ТекстСообщения = НСтр("ru='Не заполнена Организация.';uk='Не заповнена Організація.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Объект.Организация");
		    Возврат;
		КонецЕсли;  
		ПараметрыФормы.Вставить("Организация", Объект.Организация);
		ОткрытьФорму("Документ.ИНАГРО_НачислениеДругихВыплат.Форма.ФормаВыбораРКО", ПараметрыФормы, Элемент);	
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ВыплатаПаевВедомостьОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.ВыплатаПаев.ТекущиеДанные;
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.ИНАГРО_ВыплатаПаевПоВедомостям") Тогда 
		ТекущиеДанные.Ведомость = ПредопределенноеЗначение("Документ.ИНАГРО_ВедомостьВыплатПайщикам.ПустаяСсылка");							
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.ИНАГРО_ДругиеВыплаты") Тогда 
		ТекущиеДанные.Ведомость = ПредопределенноеЗначение("Документ.ИНАГРО_НачислениеДругихВыплат.ПустаяСсылка");							
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыплатаПаевВедомостьОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ВыплатаПаев.ТекущиеДанные;
	Если ПроверитьДублиВедомостей(ТекущиеДанные) Тогда
		СтандартнаяОбработка = Ложь;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВыплатаПаевСчетУчетаПриИзменении(Элемент)
	
	СтрокаПлатеж = Элементы.ВыплатаПаев.ТекущиеДанные;   	
		
	Платеж = СуммаВыплаченыхПаевПоВедомости(
		СтрокаПлатеж.Ведомость, СтрокаПлатеж.СчетУчета, Объект.Ссылка, СтрокаПлатеж.НомерСтроки, Объект.Контрагент,Объект.ВидОперации ); 		
	
	Если Платеж <> Неопределено Тогда 		
		СтрокаПлатеж.СчетУчета     = Платеж.СчетУчета;
		СтрокаПлатеж.СуммаКВыплате = Платеж.СуммаКВыплате;
	КонецЕсли;	

КонецПроцедуры


&НаСервере
Процедура УстановитьПараметрыВыбораСтатьиДекларацииПоЕдиномуНалогу()
	
	
	МассивПараметров = Новый Массив;
	МассивПараметров.Добавить(Новый ПараметрВыбора("ВидНалоговойДекларации", Перечисления.ВидыНалоговыхДеклараций.ЕдиныйНалог));
	
	ЭтоВозврат = (Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ВозвратДенежныхСредствПокупателю);
	
	Если ЭтоВозврат ИЛИ НЕ ЕстьНДС Тогда
		МассивПараметров.Добавить(Новый ПараметрВыбора("НаборСтатейНалоговыхДеклараций", Справочники.НаборыСтатейНалоговыхДеклараций.ЕдиныйНалогПриход));
	Иначе
		МассивПараметров.Добавить(Новый ПараметрВыбора("НаборСтатейНалоговыхДеклараций", Справочники.НаборыСтатейНалоговыхДеклараций.ЕдиныйНалогРасход));		
	КонецЕсли;
	
	НовыеПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);

	Элементы.РасшифровкаПлатежаСтатьяДекларацииПоЕдиномуНалогу.ПараметрыВыбора = НовыеПараметрыВыбора;
	Элементы.СтатьяДекларацииПоЕдиномуНалогуПрочие.ПараметрыВыбора = НовыеПараметрыВыбора;
	Элементы.СтатьяДекларацииПоЕдиномуНалогуЗарплата.ПараметрыВыбора = НовыеПараметрыВыбора;
	Элементы.СтатьяДекларацииПоЕдиномуНалогуПодотчет.ПараметрыВыбора = НовыеПараметрыВыбора;
	Элементы.ПеречислениеНалоговСтатьяДекларацииПоЕдиномуНалогу.ПараметрыВыбора = НовыеПараметрыВыбора;	
	Элементы.СтатьяДекларацииПоЕдиномуНалогуВыплатаПаев.ПараметрыВыбора = НовыеПараметрыВыбора;	// ИНАГРО
	
	
КонецПроцедуры

#КонецОбласти
