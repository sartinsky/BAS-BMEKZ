#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

Перем мВалютаРегламентированногоУчета;

Перем КурсЗачетаАвансаРегл;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

Процедура ЗаполнитьПоДокументуОснованию(Основание)
	
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.СчетНаОплатуПокупателю") Тогда

		// Заполним реквизиты из стандартного набора по документу основанию.
		ЗаполнениеДокументов.ЗаполнитьПоОснованию(ЭтотОбъект, Основание);
		
		// Заполнение шапки
		ВалютаДокумента = Основание.ВалютаДокумента;
		Комментарий 	= Основание.Комментарий;
		Контрагент 		= Основание.Контрагент;
		мСписокВидовДоговоров = Новый СписокЗначений;
		мСписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПокупателем);
		//УправлениеВзаиморасчетами.ПриИзмененииЗначенияКонтрагента(ЭтотОбъект,мСписокВидовДоговоров);
		ДоговорКонтрагента 		= Основание.ДоговорКонтрагента;
		КратностьВзаиморасчетов = Основание.КратностьВзаиморасчетов;
		КурсВзаиморасчетов 		= Основание.КурсВзаиморасчетов;
		Организация 	= Основание.Организация;
		Ответственный 	= Основание.Ответственный;
		СуммаВключаетНДС = Основание.СуммаВключаетНДС;
		СуммаДокумента 	= Основание.СуммаДокумента;
		ТипЦен 			= Основание.ТипЦен;
		
		

		// Сделку и табличные части заполняем только если взаиморасчеты ведутся не по расчетным документам.
		Если ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоРасчетнымДокументам Тогда
			Сделка = Основание;
		КонецЕсли;	
		
		ДанныеОбъекта = Новый Структура("Дата, Организация, ТипЦенПлановойСебестоимости, Реализация");
		ЗаполнитьЗначенияСвойств(ДанныеОбъекта, ЭтотОбъект);
		ДанныеОбъекта.ТипЦенПлановойСебестоимости = Константы.ТипЦенПлановойСебестоимостиНоменклатуры.Получить();
		ДанныеОбъекта.Реализация = Истина;
		СоответствиеСведенийОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОСпискеНоменклатуры(
			Основание.Услуги.ВыгрузитьКолонку("Номенклатура"), ДанныеОбъекта);
		
		Для Каждого ТекСтрокаУслуги Из Основание.Услуги Цикл
			
			НоваяСтрока = Услуги.Добавить();
			НоваяСтрока.Номенклатура = ТекСтрокаУслуги.Номенклатура;			
			НоваяСтрока.Содержание	 = ТекСтрокаУслуги.Содержание;			
			НоваяСтрока.Количество   = ТекСтрокаУслуги.Количество;
			НоваяСтрока.Цена         = ТекСтрокаУслуги.Цена;
			НоваяСтрока.СтавкаНДС    = ТекСтрокаУслуги.СтавкаНДС;
			НоваяСтрока.Сумма        = ТекСтрокаУслуги.Сумма;
			НоваяСтрока.СуммаНДС     = ТекСтрокаУслуги.СуммаНДС;
			
			СведенияОНоменклатуре = СоответствиеСведенийОНоменклатуре.Получить(ТекСтрокаУслуги.Номенклатура);
			Если СведенияОНоменклатуре = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			НоваяСтрока.ПлановаяСтоимость		= СведенияОНоменклатуре.ПлановаяСтоимость;
			НоваяСтрока.НоменклатурнаяГруппа	= СведенияОНоменклатуре.НоменклатурнаяГруппа;
			НоваяСтрока.Спецификация			= СведенияОНоменклатуре.ОсновнаяСпецификацияНоменклатуры;
			
			ОбработкаТабличныхЧастейКлиентСервер.ПересчитатьПлановуюСумму(НоваяСтрока);
			
			                                   
		КонецЦикла;
		Документы.АктОбОказанииПроизводственныхУслуг.ЗаполнитьСчетаУчетаВТабличнойЧасти(ЭтотОбъект,"Услуги");
		
		 
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТоварам - результат запроса по табличной части "Товары",
//  СтруктураШапкиДокумента   - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблиица значений.
//
Функция ПодготовитьТаблицуУслуг(РезультатЗапросаПоУслугам, СтруктураШапкиДокумента)

	ТаблицаУслуг = РезультатЗапросаПоУслугам.Выгрузить();
    		
	ПогрешностиОкругления = Новый Соответствие();
	
	НалоговыйУчет.ДобавитьКолонкиТоваровРегл(ТаблицаУслуг, СтруктураШапкиДокумента, ПогрешностиОкругления, Ложь);
	
	Возврат ТаблицаУслуг;

КонецФункции // ПодготовитьТаблицуУслуг()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ФОРМИРОВАНИЯ ДВИЖЕНИЙ ДОКУМЕНТА

Процедура ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоУслугам, Отказ, Заголовок)

	// Формирование движений регистров
	ПроводкиБУ  = Движения.Хозрасчетный;
	
	ТаблицыДокумента = новый структура("ТаблицаПоУслугам",ТаблицаПоУслугам);
	
	//Возможны корректировки таблиц при расчетах в валюте	
	ТаблицаАвансов = БухгалтерскийУчетРасчетовСКонтрагентами.ЗачетАванса(ЭтотОбъект,СтруктураШапкиДокумента, мВалютаРегламентированногоУчета, ТаблицыДокумента, Отказ,Заголовок);	
	КурсЗачетаАвансаРегл = ?(ТаблицаАвансов.Итог("СуммаВал") = 0, Неопределено, ТаблицаАвансов.Итог("Сумма") / ТаблицаАвансов.Итог("СуммаВал"));
		
	ДвиженияПоТабличнойЧастиУслуги(СтруктураШапкиДокумента, ТаблицаПоУслугам, ПроводкиБУ, Заголовок, Отказ,РежимПроведения);
	
	// Продажи (нал. учет)
	ТаблицаПоВторомуСобытиюНал = ДвиженияПоРегистрамНалоговогоУчета(СтруктураШапкиДокумента, ТаблицаПоУслугам, Отказ);
	
	ПроводкиПоНДС(ПроводкиБУ, СтруктураШапкиДокумента, ТаблицаПоУслугам, ТаблицаПоВторомуСобытиюНал, Отказ);
		
	//Учет курсовых разниц
	Если (ВалютаДокумента <> мВалютаРегламентированногоУчета) тогда
		БухгалтерскийУчетРед12.ПереоценкаСчетовДокументаРегл(ЭтотОбъект,СтруктураШапкиДокумента, мВалютаРегламентированногоУчета,Отказ,Заголовок);
	КонецЕсли; // Учет курсовых разниц
	
КонецПроцедуры // ДвиженияПоРегистрамРегл()

// Процедура формирует движения регистров по табличной части Услуги
//
Процедура ДвиженияПоТабличнойЧастиУслуги(СтруктураШапкиДокумента, ТаблицаПоУслугам, ПроводкиБУ, Заголовок, Отказ, РежимПроведения)

	Если ТаблицаПоУслугам.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаАвансов = Новый ТаблицаЗначений;
	
	ДвиженияРегистровВыпускаПродукцииУслуг(ПроводкиБУ, СтруктураШапкиДокумента, ТаблицаПоУслугам);

	Для Каждого СтрокаТаблицы Из ТаблицаПоУслугам Цикл
		
		Если СтрокаТаблицы.Сумма = 0 Тогда
			Продолжить;
		КонецЕсли;

		Проводка = ПроводкиБУ.Добавить();

		Проводка.Период          = Дата;
		Проводка.Активность      = Истина;
		Проводка.Организация     = СтруктураШапкиДокумента.Организация;
		Проводка.Сумма           = СтрокаТаблицы.ПроводкиСуммаСНДСРегл;
		Проводка.Содержание      = НСтр("ru='Реализация товаров';uk='Реалізація товарів'",Локализация.КодЯзыкаИнформационнойБазы());
		Проводка.НомерЖурнала    = "";

		Проводка.СчетДт          = СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты", СтруктураШапкиДокумента.Контрагент);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Договоры"   , СтруктураШапкиДокумента.ДоговорКонтрагента);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,  "ДокументыРасчетовСКонтрагентами", УправлениеВзаиморасчетами.ОпределитьДокументРасчетовСКонтрагентом(Ссылка,Сделка));
			
		Проводка.ВалютаДт        = СтруктураШапкиДокумента.ВалютаДокумента;
		Проводка.ВалютнаяСуммаДт = СтрокаТаблицы.ПроводкиСуммаСНДСВал;
		
		Проводка.СчетКт         = СтрокаТаблицы.СчетДоходовБУ;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, СтрокаТаблицы.СубконтоДоходовБУ1);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, СтрокаТаблицы.СубконтоДоходовБУ2);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3, СтрокаТаблицы.СубконтоДоходовБУ3);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "НоменклатурныеГруппы", СтрокаТаблицы.НоменклатурнаяГруппа);
		
		Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыльДо2015 Тогда
		
			Проводка.НалоговоеНазначениеКт  = СтрокаТаблицы.НалоговоеНазначениеДоходовИЗатрат;
			Проводка.СуммаНУКт		        = НалоговыйУчет.УчестьСуммуАвансаДо01042011(СтруктураШапкиДокумента, СтрокаТаблицы.ПроводкиСуммаБезНДСРегл) + СтрокаТаблицы.ПроводкиСуммаНДСРегл;
		
		КонецЕсли;
		
		ИНАГРО_Общий.ИНАГРО_РегистрацияРеализации(СтрокаТаблицы, СтрокаТаблицы.Количество, СтрокаТаблицы.СуммаПлановая, ЭтотОбъект); // ИНАГРО

	КонецЦикла;
	
КонецПроцедуры // ДвиженияПоТабличнойЧастиУслуги()

Процедура ПроводкиПоНДС(ПроводкиБУ, СтруктураШапкиДокумента, ТаблицаПоУслугам, ТаблицаПоВторомуСобытиюНал, Отказ)
	
	Если НЕ СтруктураШапкиДокумента.ЕстьНДС Тогда
		// Учет НДС не ведется
		Возврат;              
	КОнецЕсли;

	// Получим таблицу движений по счетам НДС
	
	// УСЛУГИ
	ТаблицаДвижений = ТаблицаПоУслугам.Скопировать();                                                                                                                               
	ТаблицаДвижений.Свернуть("СтавкаНДС, СчетДоходовБУ, СубконтоДоходовБУ1, СубконтоДоходовБУ2, СубконтоДоходовБУ3, НоменклатурнаяГруппа , СчетУчетаНДС, НалоговоеНазначениеДоходовИЗатрат","ПроводкиСуммаНДСРегл,ПроводкиСуммаНДСВал,ПроводкиСуммаНДСКурсНБУ");
	
	Для Каждого СтрокаТаблицы Из ТаблицаДвижений Цикл
		
		Если    СтрокаТаблицы.ПроводкиСуммаНДСРегл <> 0 
			ИЛИ СтрокаТаблицы.ПроводкиСуммаНДСВал  <> 0 Тогда
			
			Проводка = ПроводкиБУ.Добавить();

			Проводка.Период                     = СтруктураШапкиДокумента.Дата;
			Проводка.Активность                 = Истина;
			Проводка.Организация                = СтруктураШапкиДокумента.Организация;
			Проводка.Сумма                      = СтрокаТаблицы.ПроводкиСуммаНДСРегл ;
			Проводка.Содержание                 = НСтр("ru='НДС: налоговый кредит: отгрузка';uk='ПДВ: податковий кредит: відвантаження'",Локализация.КодЯзыкаИнформационнойБазы());
			Проводка.НомерЖурнала               = "";

			Проводка.СчетДт                     = СтрокаТаблицы.СчетДоходовБУ;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтрокаТаблицы.СубконтоДоходовБУ1);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, СтрокаТаблицы.СубконтоДоходовБУ2);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, СтрокаТаблицы.СубконтоДоходовБУ3);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "НоменклатурныеГруппы", СтрокаТаблицы.НоменклатурнаяГруппа);

			Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыльДо2015 Тогда
					
				Проводка.НалоговоеНазначениеДт = СтрокаТаблицы.НалоговоеНазначениеДоходовИЗатрат;
				Проводка.СуммаНУДт = СтрокаТаблицы.ПроводкиСуммаНДСРегл;
				
			КонецЕсли;

			Проводка.СчетКт                     = СтрокаТаблицы.СчетУчетаНДС;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Контрагенты", СтруктураШапкиДокумента.Контрагент);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Договоры"   , СтруктураШапкиДокумента.ДоговорКонтрагента);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ДокументыРасчетовСКонтрагентами", НалоговыйУчет.ОпределитьСделкуНалоговыйУчет(СтруктураШапкиДокумента, Ссылка, Сделка));
			
			НалоговыйУчет.РазбитьПроводкуПоНДСНаПервоеВтороеСобытие(ТаблицаПоВторомуСобытиюНал, ПроводкиБУ, Проводка, 
													  "Кт", СтруктураШапкиДокумента.СчетУчетаНДСПодтвержденный, 
													  СтруктураШапкиДокумента.ДоговорКонтрагента, 
													  НалоговыйУчет.ОпределитьСделкуНалоговыйУчет(СтруктураШапкиДокумента, Ссылка, Сделка), Сделка,
													  Перечисления.СобытияОжидаемыйИПодтвержденныйНДСПродаж.Реализация,
													  СтрокаТаблицы.СтавкаНДС,
													  ,,,СтрокаТаблицы.ПроводкиСуммаНДСВал, СтрокаТаблицы.ПроводкиСуммаНДСКурсНБУ,КурсЗачетаАвансаРегл);
			
		КонецЕсли;

	КонецЦикла;
	
КонецПроцедуры
 
Функция ДвиженияПоРегистрамНалоговогоУчета(СтруктураШапкиДокумента, ТаблицаПоУслугам, Отказ)
	
	ТаблицаПоВторомуСобытиюНал = НалоговыйУчет.СоздатьСтруктуруТаблицыНалоговыхСумм();
    	
	// ПродажиНалоговыйУчет
	Если СтруктураШапкиДокумента.ЕстьНДС Тогда
		
		//Отразим Продажи в регистре ПродажиНалоговыйУчет
		НаборДвижений = Движения.ПродажиНалоговыйУчет;
		
		// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
		ТаблицаДвижений = НаборДвижений.ВыгрузитьКолонки();
			
		// УСЛУГИ
		ТаблицаКопия = ТаблицаПоУслугам.Скопировать();
		ТаблицаКопия.Свернуть("СтавкаНДС","СуммаСНДСВал, СуммаНДСВал");
		
		ТаблицаКопия.Колонки.СуммаСНДСВал.Имя = "СуммаВзаиморасчетов";
		ТаблицаКопия.Колонки.СуммаНДСВал.Имя = "СуммаНДС";
		ОбщегоНазначенияБПВызовСервера.ЗагрузитьВТаблицуЗначений(ТаблицаКопия, ТаблицаДвижений);
		ТаблицаДвижений.ЗаполнитьЗначения(Организация       , "Организация");
		ТаблицаДвижений.ЗаполнитьЗначения(ДоговорКонтрагента, "ДоговорКонтрагента");
		ТаблицаДвижений.ЗаполнитьЗначения(НалоговыйУчет.ОпределитьСделкуНалоговыйУчет(СтруктураШапкиДокумента,
																		СтруктураШапкиДокумента.Ссылка, 
																		СтруктураШапкиДокумента.Сделка),
										  "Сделка");
		ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СобытияПродажиНалоговыйУчет.РеализацияПокупателю, "Событие");
		
		Если СтруктураШапкиДокумента.СложныйНалоговыйУчет Тогда
			
			// очистим налоговые реквизиты
			ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтавкиНДС.ПустаяСсылка(), 			"СтавкаНДС");
			ТаблицаДвижений.ЗаполнитьЗначения(0, 												"СуммаНДС");
			
		Иначе		
			// упрощенный налоговый учет
			Если НЕ СтруктураШапкиДокумента.ЕстьНДС Тогда
				ТаблицаДвижений.ЗаполнитьЗначения(0, 												"СуммаНДС");	
				ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтавкиНДС.ПустаяСсылка(), 			"СтавкаНДС");
			КонецЕсли;
			
			Если СтруктураШапкиДокумента.ВедениеВзаиморасчетовНУ = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоРасчетнымДокументам Тогда
				// взаиморасчеты по договору по расчетным документам - необходимо заполнить в регистре реквизит РасчетныйДокумент
				ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.Сделка, "РасчетныйДокумент");
			КонецЕсли;			
			
		КонецЕсли;	
		
		Если НЕ Отказ И ТаблицаДвижений.Количество() > 0 Тогда
				
			НаборДвижений.мПериод          = Дата;
			НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;
				
			Движения.ПродажиНалоговыйУчет.ВыполнитьПриход();
			Движения.ПродажиНалоговыйУчет.Записать();
				
		КонецЕсли;
		
	КонецЕсли;	

	// ОжидаемыйИПодтвержденныйНДСПродаж
	Если НЕ СтруктураШапкиДокумента.СложныйНалоговыйУчет Тогда
		
		// Движения формируются по данным рассчета "первого события" 
	   НалоговыйУчет.ДвиженияПоРегистрамНалоговогоУчетаУпрощенныйНалоговыйУчет(ЭтотОбъект, ТаблицаПоВторомуСобытиюНал);
	
	ИначеЕсли  СтруктураШапкиДокумента.ЕстьНДС Тогда

		НаборДвижений = Движения.ОжидаемыйИПодтвержденныйНДСПродаж;
		
		// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
		ТаблицаДвижений = НаборДвижений.ВыгрузитьКолонки();
		
		// УСЛУГИ
		ТаблицаКопия = ТаблицаПоУслугам.Скопировать();
		ТаблицаКопия.Свернуть("СтавкаНДС","СуммаБезНДСВал,СуммаНДСВал");
			
		ТаблицаКопия.Колонки.СуммаБезНДСВал.Имя = "БазаНДС";
		ТаблицаКопия.Колонки.СуммаНДСВал   .Имя = "СуммаНДС";
		ОбщегоНазначенияБПВызовСервера.ЗагрузитьВТаблицуЗначений(ТаблицаКопия, ТаблицаДвижений);
		ТаблицаДвижений.ЗаполнитьЗначения(Организация       , "Организация");
		ТаблицаДвижений.ЗаполнитьЗначения(ДоговорКонтрагента, "ДоговорКонтрагента");
		ТаблицаДвижений.ЗаполнитьЗначения(НалоговыйУчет.ОпределитьСделкуНалоговыйУчет(СтруктураШапкиДокумента,
																		СтруктураШапкиДокумента.Ссылка, 
																		СтруктураШапкиДокумента.Сделка),
											  "Сделка");
		ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СобытияОжидаемыйИПодтвержденныйНДСПродаж.Реализация, "СобытиеНДС");
		ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.КодыОперацийОжидаемыйИПодтвержденныйНДСПродаж.ОжидаемыйНДС, "КодОперации");
			
		Если НЕ Отказ И ТаблицаДвижений.Количество() > 0 Тогда
			
			НаборДвижений.мПериод          = Дата;
			НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;
		
			Движения.ОжидаемыйИПодтвержденныйНДСПродаж.ВыполнитьПриход();
			Движения.ОжидаемыйИПодтвержденныйНДСПродаж.Записать();
			
		КонецЕсли;
		
	КонецЕсли;

	Возврат ТаблицаПоВторомуСобытиюНал;
	
КонецФункции

Процедура ДвиженияРегистровВыпускаПродукцииУслуг(ПроводкиБУ, СтруктураШапкиДокумента, ТаблицаПоУслугам)
	
	ДвиженияВыпускПродукцииУслугБУ = Движения.ВыпускПродукцииУслугБухгалтерскийУчет;
	ТаблицаДвиженийВыпускБУ        = ДвиженияВыпускПродукцииУслугБУ.ВыгрузитьКолонки();
	
	Для каждого СтрокаУслуги Из ТаблицаПоУслугам Цикл
		
		// Отражение в бухгалтерском регистре выпуска продукции.
		СтрокаДвижения = ТаблицаДвиженийВыпускБУ.Добавить();
		
		СтрокаДвижения.Организация          = СтруктураШапкиДокумента.Организация;
		СтрокаДвижения.Продукция            = СтрокаУслуги.Номенклатура;
		СтрокаДвижения.СчетЗатрат           = СтруктураШапкиДокумента.СчетЗатрат;
		СтрокаДвижения.Подразделение        = СтруктураШапкиДокумента.ПодразделениеОрганизации;
		СтрокаДвижения.НоменклатурнаяГруппа = СтруктураШапкиДокумента.НоменклатурнаяГруппа;
		СтрокаДвижения.СчетСписания         = СтрокаУслуги.СчетРасходовБУ;	
		СтрокаДвижения.СубконтоСписания1    = СтрокаУслуги.НоменклатурнаяГруппа;
		СтрокаДвижения.СубконтоСписания2    = СтрокаУслуги.СубконтоРасходовБУ2;
		СтрокаДвижения.НалоговоеНазначениеДоходовИЗатрат    = СтрокаУслуги.НалоговоеНазначениеДоходовИЗатрат;
		
		СтрокаДвижения.Количество           = СтрокаУслуги.Количество;
		СтрокаДвижения.ПлановаяСтоимость    = СтрокаУслуги.СуммаПлановая;
		
		Проводка = ПроводкиБУ.Добавить();
		
		Проводка.Период       = СтруктураШапкиДокумента.Дата;
		Проводка.Организация  = СтруктураШапкиДокумента.Организация;
		Проводка.Сумма        = СтрокаУслуги.СуммаПлановая;
		Проводка.Содержание   = НСтр("ru='Затраты от реализации произв. услуг в план.ценах';uk='Витрати від реалізації виробн. послуг в план.цінах'",Локализация.КодЯзыкаИнформационнойБазы());
		Проводка.НомерЖурнала = "";
		
		Проводка.СчетДт      = СтрокаУслуги.СчетРасходовБУ;
		
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтрокаУслуги.СубконтоРасходовБУ1);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, СтрокаУслуги.СубконтоРасходовБУ2);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, СтрокаУслуги.СубконтоРасходовБУ3);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "НоменклатурныеГруппы", СтрокаУслуги.НоменклатурнаяГруппа);
		
		Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыльДо2015 Тогда
			
			Если СтруктураШапкиДокумента.НеОтноситьСебестоимостьЗапасовНаРасходыПоНУ Тогда
				Проводка.НалоговоеНазначениеДт = Справочники.НалоговыеНазначенияАктивовИЗатрат.НКУ_НеХозДеятельность;
				Проводка.СуммаНУДт = 0;
			Иначе	
				Проводка.НалоговоеНазначениеДт = СтрокаУслуги.НалоговоеНазначениеДоходовИЗатрат;
				Проводка.СуммаНУДт = СтрокаУслуги.СуммаПлановая;
			КонецЕсли;

		КонецЕсли;

		Проводка.СчетКт = СтруктураШапкиДокумента.СчетЗатрат;
		
		// ИНАГРО++
		//БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, СтруктураШапкиДокумента.ПодразделениеОрганизации);
		//БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, СтруктураШапкиДокумента.НоменклатурнаяГруппа); 		
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, СтруктураШапкиДокумента.ИНАГРО_Субконто1);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, СтруктураШапкиДокумента.ИНАГРО_Субконто2);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3, СтруктураШапкиДокумента.ИНАГРО_Субконто3);
		// ИНАГРО--
		
		Если СтруктураШапкиДокумента.ЕстьНДС Тогда
			Проводка.НалоговоеНазначениеКт = СтруктураШапкиДокумента.НоменклатурнаяГруппа.НалоговоеНазначениеВПроизводстве;
		Иначе
			Проводка.НалоговоеНазначениеКт = Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяХозДеятельность;
		КонецЕсли;

		Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыльДо2015 Тогда
			Проводка.СуммаНУКт = СтрокаУслуги.СуммаПлановая;
		КонецЕсли;
		
	КонецЦикла;
	
	ДвиженияВыпускПродукцииУслугБУ.мПериод = Дата;
	ДвиженияВыпускПродукцииУслугБУ.мТаблицаДвижений = ТаблицаДвиженийВыпускБУ;
	ДвиженияВыпускПродукцииУслугБУ.ДобавитьДвижение();
	
	
КонецПроцедуры

Процедура ПодготовитьПараметрыУчетнойПолитики(СтруктураШапкиДокумента, Отказ)

	СтруктураШапкиДокумента.Вставить("ЕстьНалогНаПрибыльДо2015", УчетнаяПолитика.ПлательщикНалогаНаПрибыльДо2015(Организация, Дата));
	СтруктураШапкиДокумента.Вставить("ЕстьНДС"           , УчетнаяПолитика.ПлательщикНДС(Организация, Дата));
	
КонецПроцедуры // ПодготовитьПараметрыУчетнойПолитикиРегл()


// Процедура формирует структуру шапки документа и дополнительных полей.
//
Процедура ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента) Экспорт
	
	// Дерево значений, содержащее имена необходимых полей в запросе по шапке.
	Перем ДеревоПолейЗапросаПоШапке;
	

	СтруктураШапкиДокумента = ОбщегоНазначенияРед12.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);

	// Заполним по шапке документа дерево параметров, нужных при проведении.
	ДеревоПолейЗапросаПоШапке = ОбщегоНазначенияРед12.СформироватьДеревоПолейЗапросаПоШапке();
	ОбщегоНазначенияРед12.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "Организация"          , "ДоговорОрганизация");
	ОбщегоНазначенияРед12.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Сделка"              , "ВидОперации"          , "СделкаВидОперации");
	ОбщегоНазначенияРед12.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ПодразделениеОрганизации", "ПодразделениеОрганизации", "ПодразделениеОрганизации");
   	ОбщегоНазначенияРед12.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "ВедениеВзаиморасчетовНУ", "ВедениеВзаиморасчетовНУ");
   	ОбщегоНазначенияРед12.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "СложныйНалоговыйУчет", 	"СложныйНалоговыйУчет");
	
	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа
	СтруктураШапкиДокумента = УправлениеЗапасами.СформироватьЗапросПоДеревуПолей(ЭтотОбъект, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета);
	
КонецПроцедуры // ПодготовитьСтруктуруШапкиДокумента()

// Процедура формирует таблицы документа.
//
Процедура ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоУслугам, Отказ, Заголовок) Экспорт
	
	// Подготовим таблицу услуг для проведения.
	СтруктураПолей = Новый Структура();
	СтруктураПростыхПолей = Новый Структура;
	СтруктураСложныхПолей = Новый Структура;
	
	СтруктураПолей.Вставить("Номенклатура"             , "Номенклатура");
	СтруктураПолей.Вставить("Услуга"                   , "Номенклатура.Услуга");
	СтруктураПолей.Вставить("Количество"               , "Количество");
	СтруктураПолей.Вставить("Сумма"                    , "Сумма");
	СтруктураПолей.Вставить("Цена"                     , "Цена");
	СтруктураПолей.Вставить("СтавкаНДС"                , "СтавкаНДС");
	СтруктураПолей.Вставить("НДС"                      , "СуммаНДС");
	СтруктураПолей.Вставить("НомерСтроки"              , "НомерСтроки");
	СтруктураПолей.Вставить("СчетДоходовБУ"            , "СхемаРеализации.СчетДоходов");
	СтруктураПолей.Вставить("СубконтоДоходовБУ1"       , "СхемаРеализации.СубконтоДоходов1");
	СтруктураПолей.Вставить("СубконтоДоходовБУ2"       , "СхемаРеализации.СубконтоДоходов2");
	СтруктураПолей.Вставить("СубконтоДоходовБУ3"       , "СхемаРеализации.СубконтоДоходов3");
	СтруктураПолей.Вставить("СчетРасходовБУ"           , "СхемаРеализации.СчетСебестоимости");
	СтруктураПолей.Вставить("СубконтоРасходовБУ1"      , "СхемаРеализации.СубконтоСебестоимости1");
	СтруктураПолей.Вставить("СубконтоРасходовБУ2"      , "СхемаРеализации.СубконтоСебестоимости2");
	СтруктураПолей.Вставить("СубконтоРасходовБУ3"      , "СхемаРеализации.СубконтоСебестоимости3");
	СтруктураПолей.Вставить("НоменклатурнаяГруппа"     , "НоменклатурнаяГруппа");
	СтруктураПолей.Вставить("СуммаПлановая"            , "СуммаПлановая");
	СтруктураПолей.Вставить("СчетЗатрат"               , "СчетЗатрат");
	СтруктураПолей.Вставить("СчетДт"                   , "СхемаРеализации.СчетСебестоимости");
	СтруктураПолей.Вставить("СубконтоДт1"              , "СхемаРеализации.СубконтоСебестоимости1");
	СтруктураПолей.Вставить("СхемаРеализации"    	   , "СхемаРеализации");

	СтруктураПростыхПолей.Вставить("ВидДеятельностиНДС" , Перечисления.ВидыДеятельностиНДС.Необлагаемая);
	
	СтруктураПолей.Вставить("НалоговоеНазначениеДоходовИЗатрат", "НалоговоеНазначениеДоходовИЗатрат");	
	СтруктураПолей.Вставить("СчетУчетаНДС"    				   , "Ссылка.СчетУчетаНДС");
	
	// ИНАГРО++
	СтруктураПолей.Вставить("Склад",               "Ссылка.ИНАГРО_Склад");
	СтруктураПолей.Вставить("Субконто1",           "Ссылка.ИНАГРО_Субконто1");  
	СтруктураПолей.Вставить("Субконто2" ,          "Ссылка.ИНАГРО_Субконто2");
	СтруктураПолей.Вставить("Субконто3",           "Ссылка.ИНАГРО_Субконто3");

	СтруктураПолей.Вставить("ПлановаяСтоимость",   "ПлановаяСтоимость");
	СтруктураПолей.Вставить("НалоговоеНазначение", "НалоговоеНазначение");	
	// ИНАГРО--
	
	РезультатЗапросаПоУслугам = ОбщегоНазначенияРед12.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Услуги", СтруктураПолей, СтруктураПростыхПолей, СтруктураСложныхПолей);
	
	// Подготовим таблицу услуг для проведения.
	ТаблицаПоУслугам = ПодготовитьТаблицуУслуг(РезультатЗапросаПоУслугам, СтруктураШапкиДокумента);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура вызывается перед записью документа 
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)

	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	// Посчитать суммы документа и записать ее в соответствующий реквизит шапки для показа в журналах
	СуммаДокумента = УчетНДС.ПолучитьСуммуДокументаСНДС(ЭтотОбъект, "Услуги");
	
	Если АвторасчетНДС Тогда
		// соответствие для хранения погрешностей округлений
		ПогрешностиОкругления = Новый Соответствие();
		// пересчет сумм НДС с учетом ошибок округления
		УчетНДСКлиентСервер.ПересчитатьНДСсУчетомПогрешностиОкругления(Услуги, Ссылка, СуммаВключаетНДС, ПогрешностиОкругления, "Услуги", Строка(ВалютаДокумента));
	КонецЕсли;
	
	ПлательщикНДС = УчетнаяПолитика.ПлательщикНДС(Организация, Дата);

	Если НЕ ПлательщикНДС Тогда
		// организация - не плательщик НДС. Установим во всех ТЧ признак соответствующего учета НДС
		НеОБлНДСДеятельность = Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяХозДеятельность;
		
		Для каждого СтрокаТЧ  Из Услуги Цикл
		    СтрокаТЧ.НалоговоеНазначение = НеОБлНДСДеятельность;
		КонецЦикла; 
	КонецЕсли;
	
	Если ЕстьАвансДо01042011 Тогда
		Если НеОтноситьСебестоимостьЗапасовНаРасходыПоНУ Тогда
			СуммаВДВРПоАвансуДо01042011	= СуммаДокумента;
		КонецЕсли;
	Иначе	
		НеОтноситьСебестоимостьЗапасовНаРасходыПоНУ = Ложь;
	КонецЕсли;
                    
КонецПроцедуры // ПередЗаписью

// Процедура - обработчик события "ОбработкаПроведения"
//
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	Перем Заголовок, СтруктураШапкиДокумента;
	Перем ТаблицаПоУслугам;
    	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКПроведению(ЭтотОбъект);
	Если РучнаяКорректировка Тогда
		Возврат;
	КонецЕсли;
	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = НСтр("ru='Проведение документа ""';uk='Проведення документа ""'") + СокрЛП(Ссылка) + """: ";
	
	ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента);
	
	ПодготовитьПараметрыУчетнойПолитики(СтруктураШапкиДокумента, Отказ);
	

	Если Отказ Тогда
		Возврат;
	КонецЕсли;

	ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоУслугам, Отказ, Заголовок);
	
	//Проверим на возможность проведения в БУ и НУ
	УправлениеВзаиморасчетами.ПроверкаВозможностиПроведенияВ_БУ_НУ(СтруктураШапкиДокумента,СтруктураШапкиДокумента.ДоговорКонтрагента,Отказ, Заголовок);
					 
	// Движения по документу
	Если Не Отказ Тогда
		ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоУслугам, Отказ, Заголовок);
	КонецЕсли;
	
	Движения.Хозрасчетный.ВыполнитьДействияПередЗаписьюДвижений();
	
	// ИНАГРО++
	Движения.Хозрасчетный.Записать();	
	 
	КопияТаблицаПоУслугам = ТаблицаПоУслугам.Скопировать();
	КопияТаблицаПоУслугам.Колонки.СчетРасходовБУ.Имя = "Счет";
	
	ИНАГРО_Общий.ИНАГРО_ДвиженияВыпускПродукции_Услуги(СтруктураШапкиДокумента, КопияТаблицаПоУслугам, Движения);
	ИНАГРО_Общий.ИНАГРО_ДвиженияВыпускПродукции(СтруктураШапкиДокумента, Движения); // Сделает движение только по регистру ИНАГРО_ЗатратыОрганизаций
	// ИНАГРО--
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКЗаписиДвижений(ЭтотОбъект);

КонецПроцедуры // ОбработкаПроведения()

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКОтменеПроведения(ЭтотОбъект);
	Движения.Записать();
	
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)

	ТипДанныхЗаполнения = ТипЗнч(ДанныеЗаполнения);
	Если ДанныеЗаполнения <> Неопределено И ТипДанныхЗаполнения <> Тип("Структура")
		И Метаданные().ВводитсяНаОсновании.Содержит(ДанныеЗаполнения.Метаданные()) Тогда
		ЗаполнитьПоДокументуОснованию(ДанныеЗаполнения);
	КонецЕсли;
	ЗаполнениеДокументов.Заполнить(ЭтотОбъект, ДанныеЗаполнения);
	
	// Заполнение реквизитов, специфичных для документа:
	Если ЗначениеЗаполнено(Организация)
		И ЗначениеЗаполнено(Контрагент)
		И ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
		Документы.АктОбОказанииПроизводственныхУслуг.ЗаполнитьСчетаУчетаРасчетов(ЭтотОбъект);
	КонецЕсли;

КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)

	Дата          = НачалоДня(ОбщегоНазначенияБП.ПолучитьРабочуюДату());
	Ответственный = Пользователи.ТекущийПользователь();
	
	СтруктураКурсаВзаиморасчетов = РаботаСКурсамиВалют.ПолучитьКурсВалюты(
	ВалютаДокумента, Дата);
	
	КурсВзаиморасчетов      = СтруктураКурсаВзаиморасчетов.Курс;
	КратностьВзаиморасчетов = СтруктураКурсаВзаиморасчетов.Кратность;

КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)

	// Исключаем из проверки реквизиты, заполнение которых стало необязательным:
	МассивНепроверяемыхРеквизитов = Новый Массив();
	
	ПлательщикНДС = УчетнаяПолитика.ПлательщикНДС(Организация, Дата);
	ПлательщикНалогаНаПрибыльДо2015  = УчетнаяПолитика.ПлательщикНалогаНаПрибыльДо2015(Организация, Дата);
	РеквизитыДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДоговорКонтрагента, "СложныйНалоговыйУчет");
	СложныйНалоговыйУчет = ЗначениеЗаполнено(ДоговорКонтрагента) И (РеквизитыДоговора.СложныйНалоговыйУчет);
	
	// ИНАГРО++
	КоличествоСубконто = СчетЗатрат.ВидыСубконто.Количество();		
	Для Н = 1 По 2 Цикл 			
		ПроверяемыеРеквизиты.Добавить("ИНАГРО_Субконто" + Н); 			
	КонецЦикла;
	// ИНАГРО--
	
	Если НЕ ПлательщикНДС Тогда
		МассивНепроверяемыхРеквизитов.Добавить("СчетУчетаНДС");
	КонецЕсли;
	
	Если НЕ ПлательщикНДС ИЛИ СложныйНалоговыйУчет Тогда
		МассивНепроверяемыхРеквизитов.Добавить("СчетУчетаНДСПодтвержденный");
	КонецЕсли;
	
	Если НЕ ПлательщикНалогаНаПрибыльДо2015 Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Услуги.НалоговоеНазначениеДоходовИЗатрат");
		МассивНепроверяемыхРеквизитов.Добавить("ИНАГРО_НалоговоеНазначениеДоходовИЗатрат"); // ИНАГРО
	КонецЕсли;
	
	Если (Не ЕстьАвансДо01042011) ИЛИ (ЕстьАвансДо01042011 И НеОтноситьСебестоимостьЗапасовНаРасходыПоНУ) Тогда
		МассивНепроверяемыхРеквизитов.Добавить("СуммаВДВРПоАвансуДо01042011");		
	КонецЕсли;
	
	// Удаляем из проверяемых реквизитов все, по которым автоматическая проверка не нужна:
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	
	ИмяСписка = НСтр("ru='Услуги';uk='Послуги'");
	
	// Схемы реализации должны быть заполнены правильно
	МассивРеквизитовДляПроверки = Новый Массив;
	МассивРеквизитовДляПроверки.Добавить("СчетДоходов");
	МассивРеквизитовДляПроверки.Добавить("СчетСебестоимости");
	БухгалтерскийУчет.ПроверитьСхемыРеализацииТабличнойЧастиНаЗаполненость(
				ЭтотОбъект, 
				"Услуги", ИмяСписка, 
				"СхемаРеализации", НСтр("ru='Схема реализации';uk='Схема реалізації'") , 
				МассивРеквизитовДляПроверки, 
				Отказ
			);
														 
	Если ПлательщикНалогаНаПрибыльДо2015 Тогда
		НехозВНД_НДС = Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяНеХозДеятельность;
		НехозВНД_НП  = Справочники.НалоговыеНазначенияАктивовИЗатрат.НКУ_НеХозДеятельность;
		Для каждого СтрокаТЧ Из Услуги Цикл
			
			Префикс = "Услуги[" + Формат(СтрокаТЧ.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].";
			
			Если НЕ ЗначениеЗаполнено(СтрокаТЧ.НалоговоеНазначениеДоходовИЗатрат) Тогда
				
				ТекстСообщения = ОбщегоНазначенияБПКлиентСервер.ПолучитьТекстСообщения("Колонка",, 
					НСтр("ru='Налоговое назначение (доходов и затрат)';uk='Податкове призначення (доходів і витрат)'"),
					СтрокаТЧ.НомерСтроки, ИмяСписка
				);
				Поле = Префикс + "НалоговоеНазначениеДоходовИЗатрат";
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
				
			ИначеЕсли СтрокаТЧ.НалоговоеНазначениеДоходовИЗатрат = НехозВНД_НП Тогда 
				
				ТекстСообщения = ОбщегоНазначенияБПКлиентСервер.ПолучитьТекстСообщения("Колонка", "Корректность", 
					НСтр("ru='Налоговое назначение (доходов и затрат)';uk='Податкове призначення (доходів і витрат)'"),
					СтрокаТЧ.НомерСтроки, ИмяСписка, 
					НСтр("ru='Вид налоговой деятельности при реализации не может быть ""Не хозяйственной деятельностью"".';uk='Вид податкової діяльності при реалізації не може бути ""Не господарською діяльністю"".'")
				);
				Поле = Префикс + "НалоговоеНазначениеДоходовИЗатрат";
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
				
			КонецЕсли;
				
		КонецЦикла;
	КонецЕсли;
		
КонецПроцедуры

мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
#КонецЕсли