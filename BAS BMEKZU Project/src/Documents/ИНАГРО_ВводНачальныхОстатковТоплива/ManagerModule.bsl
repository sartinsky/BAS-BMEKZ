#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПроцедурыИФункцииПечати

Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	// Оприходование товаров
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "Ведомость";
	КомандаПечати.Представление = НСтр("ru='Оприходование товаров';uk='Оприбуткування товарів'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечати";
	КомандаПечати.СписокФорм    = "ФормаДокумента,ФормаСписка,ФормаВыбора";
	
	// Реестр документов
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "Реестр";
	КомандаПечати.Представление = НСтр("ru='Реестр документов';uk='Реєстр документів'");
	КомандаПечати.ЗаголовокФормы= НСтр("ru='Реестр документов ""Ввод начальных остатков топлива в баках""';uk='Реєстр документів ""Оприбуткування залишків палива у баках""'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечатиРеестраДокументов";
	КомандаПечати.СписокФорм    = "ФормаСписка";
	КомандаПечати.Порядок       = 100;

КонецПроцедуры

Функция ПечатьОприходованияТоваров(МассивОбъектов, ОбъектыПечати, ПараметрыВывода)  Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	ТабДок         = Новый ТабличныйДокумент();
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ИНАГРО_ВводНачальныхОстатковТоплива.ПФ_MXL_Накладная");
	
	ПервыйДокумент = Истина;
	
	Для Каждого Ссылка Из МассивОбъектов Цикл	
		
		Если Не ПервыйДокумент Тогда
			ТабДок.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;

		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ТекущийДокумент", Ссылка);
		Запрос.Текст ="ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ОприходованиеТоваров.Номер,
		|	ОприходованиеТоваров.Дата,
		|	ОприходованиеТоваров.Организация,
		|	ОприходованиеТоваров.СуммаДокумента,
		|	Константы.ВалютаРегламентированногоУчета КАК ВалютаДокумента,
		|	ОприходованиеТоваров.Склад,
		|	1 КАК ID,
		|	ОприходованиеТоваров.Товары.(
		|		НомерСтроки КАК НомерСтроки,
		|		Номенклатура,
		|		Номенклатура.НаименованиеПолное КАК Товар,
		|		Количество,
		|		ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|		Цена,
		|		Сумма
		|	)
		|ИЗ
		|	Документ.ИНАГРО_ВводНачальныхОстатковТоплива КАК ОприходованиеТоваров,
		|	Константы КАК Константы
		|ГДЕ
		|	ОприходованиеТоваров.Ссылка = &ТекущийДокумент
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки";
		Шапка = Запрос.Выполнить().Выбрать();
		
		Шапка.Следующий();
		
		ВыборкаСтрокТовары = Шапка.Товары.Выбрать();                        
		
		Макет       = ПолучитьМакет("ПФ_MXL_Накладная");
		
		// печать производится на языке, указанном в настройках пользователя
		КодЯзыкаПечать = ПараметрыВывода.КодЯзыкаДляМногоязычныхПечатныхФорм;
		Макет.КодЯзыкаМакета = КодЯзыкаПечать;
				
		ТабДокумент = Новый ТабличныйДокумент;
		ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ОприходованиеТоваров_Накладная";
		
		// Выводим шапку накладной		
		ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
		ОбластьМакета.Параметры.ТекстЗаголовка = ОбщегоНазначенияБПВызовСервера.СформироватьЗаголовокДокумента(Шапка, НСтр("ru='Оприходование товаров';uk='Оприбуткування товарів'", КодЯзыкаПечать), КодЯзыкаПечать);

		ТабДокумент.Вывести(ОбластьМакета);
		ОбластьМакета = Макет.ПолучитьОбласть("Покупатель");
		ПредставлениеОрганизации = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Шапка.Организация, Шапка.Дата,,, КодЯзыкаПечать);
		ОбластьМакета.Параметры.ПредставлениеПолучателя 			= ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(ПредставлениеОрганизации, "ПолноеНаименование,",,КодЯзыкаПечать);
		ОбластьМакета.Параметры.Получатель = Шапка.Организация;
		ТабДокумент.Вывести(ОбластьМакета);
						
		СписокДополнительныхПараметров = "Склад,";
		
		МассивСтруктурСтрок = ОбщегоНазначенияБПВызовСервера.ДополнительнаяИнформация(Шапка,СписокДополнительныхПараметров,КодЯзыкаПечать);
		ОбластьМакета = Макет.ПолучитьОбласть("ДопИнформация");                   
		Для каждого СтруктураСтроки Из МассивСтруктурСтрок Цикл
			ОбластьМакета.Параметры.Заполнить(СтруктураСтроки);
			ТабДокумент.Вывести(ОбластьМакета);
		КонецЦикла;
		
		ОбластьШапки  = "ШапкаТаблицы";
		ОбластьСтроки = "Строка";
		
		// Вывести табличную часть
		ОбластьМакета = Макет.ПолучитьОбласть(ОбластьШапки);
		ТабДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть(ОбластьСтроки);
		
		КоличествоТовара = 0;
		
		Пока ВыборкаСтрокТовары.Следующий() Цикл
			
			Если НЕ ЗначениеЗаполнено(ВыборкаСтрокТовары.Номенклатура) Тогда
				
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='В строке %1 не заполнено значение номенклатуры - строка при печати пропущена.';uk='У рядку %1 не заповнене значення номенклатури - рядок під час друку буде пропущений.'"), ВыборкаСтрокТовары.НомерСтроки);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
				Продолжить;
				
			КонецЕсли;
			
			ОбластьМакета.Параметры.Заполнить(ВыборкаСтрокТовары);
			ТабДокумент.Вывести(ОбластьМакета);
			
			КоличествоТовара = КоличествоТовара + 1;
			
		КонецЦикла;
		
		// Вывести Итого
		ОбластьМакета = Макет.ПолучитьОбласть("Итого");
		ОбластьМакета.Параметры.Всего = ОбщегоНазначенияБПВызовСервера.ФорматСумм(Шапка.СуммаДокумента);
		ТабДокумент.Вывести(ОбластьМакета);
		
		// Вывести Сумму прописью
		ОбластьМакета = Макет.ПолучитьОбласть("СуммаПрописью");
		ОбластьМакета.Параметры.ИтоговаяСтрока =  НСтр("ru='Всего наименований ';uk='Всього найменувань '",КодЯзыкаПечать) + ВыборкаСтрокТовары.Количество()
		+  НСтр("ru=', на сумму ';uk=', на суму '",КодЯзыкаПечать) + ОбщегоНазначенияБПВызовСервера.ФорматСумм(Шапка.СуммаДокумента, Шапка.ВалютаДокумента);
		ОбластьМакета.Параметры.СуммаПрописью  = ОбщегоНазначенияБПВызовСервера.СформироватьСуммуПрописью(Шапка.СуммаДокумента, Шапка.ВалютаДокумента, КодЯзыкаПечать);
		ТабДокумент.Вывести(ОбластьМакета);
		
		// Вывести подписи
		ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
		ВыборкаПоКомиссии = ОбщегоНазначенияБПВызовСервера.ПолучитьСведенияОКомиссии(Ссылка);
		ОбластьМакета.Параметры.Заполнить(ВыборкаПоКомиссии);
		ТабДокумент.Вывести(ОбластьМакета);
	КонецЦикла;	 		
	
	Возврат ТабДокумент;
	
КонецФункции

Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	// Устанавливаем признак доступности печати покомплектно.
	ПараметрыВывода.ДоступнаПечатьПоКомплектно = Истина;
	
	// Проверяем, нужно ли для макета СчетЗаказа формировать табличный документ.
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "Ведомость") Тогда
		
		// Формируем табличный документ и добавляем его в коллекцию печатных форм.
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "Ведомость", НСтр("ru='Оприходование товаров';uk='Оприбуткування товарів'"), 
			ПечатьОприходованияТоваров(МассивОбъектов, ОбъектыПечати, ПараметрыВывода), , "Документ.ИНАГРО_ВводНачальныхОстатковТоплива.ПФ_MXL_Накладная", ,Истина);
		
	КонецЕсли;		

КонецПроцедуры

Функция ПолучитьДополнительныеРеквизитыДляРеестра() Экспорт
	
	Результат = Новый Структура;	
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти 

#Область ПрограммныйИнтерфейс

// Заполняет счета учета номенклатуры в табличной части документа
//
//  Параметры:
//  	Объект            - ДанныеФормыСтруктура
//  	ИмяТабличнойЧасти - Строка - имя табличной части
//
Процедура ЗаполнитьСчетаУчетаВТабличнойЧасти(Объект, ИмяТабличнойЧасти) Экспорт

	ТабличнаяЧасть = Объект[ИмяТабличнойЧасти];
	
	ДанныеОбъекта = Новый Структура("Дата, Организация, Склад");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
	СоответствиеСчетовУчета = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаУчетаСпискаНоменклатуры(
		ДанныеОбъекта.Организация, ОбщегоНазначения.ВыгрузитьКолонку(ТабличнаяЧасть, "Номенклатура", Истина), ДанныеОбъекта.Склад, ДанныеОбъекта.Дата);
	
	Для Каждого СтрокаТабличнойЧасти Из ТабличнаяЧасть Цикл
		СчетаУчета = СоответствиеСчетовУчета.Получить(СтрокаТабличнойЧасти.Номенклатура);
		ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(ДанныеОбъекта, СтрокаТабличнойЧасти, СчетаУчета, ИмяТабличнойЧасти);
	КонецЦикла;

КонецПроцедуры 

// Заполняет счета учета номенклатуры в строке табличной части документа
//
// Параметры:
//  ДанныеОбъекта         - Структура - структура данных объекта, используемых при заполнении счетов учета (вид операции,
//                          вид договора контрагента, признак комиссионной торговли и т.п.)
//  СтрокаТабличнойЧасти  - строка табличной части документа
//  ИмяТабличнойЧасти     - Строка - имя табличной части документа
//  СведенияОНоменклатуре - Структура - структура сведений о номенклатуре, либо структура счетов учета
//  ЗаполнятьБУ           - Булево
//  ЗаполнятьНУ           - Булево
//
Процедура ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(ДанныеОбъекта, СтрокаТабличнойЧасти, СведенияОНоменклатуре, ИмяТабличнойЧасти = "", ЗаполнятьБУ = Истина, ЗаполнятьНУ = Истина) Экспорт

	Если СведенияОНоменклатуре = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если СведенияОНоменклатуре.Свойство("СчетаУчета") Тогда
		// СведенияОНоменклатуре - структура сведений номенклатуры
		СчетаУчета = СведенияОНоменклатуре.СчетаУчета;
	ИначеЕсли СведенияОНоменклатуре.Свойство("СчетУчетаБУ") Тогда
		// СведенияОНоменклатуре - структура счетов учета номенклатуры
		СчетаУчета = СведенияОНоменклатуре;
	Иначе
		Возврат;
	КонецЕсли;
	
	Если ЗаполнятьБУ Тогда
		ЗаполнитьСчетаБУ(ДанныеОбъекта, СтрокаТабличнойЧасти, ИмяТабличнойЧасти, СчетаУчета);
	КонецЕсли; 
	
	Если ЗаполнятьНУ Тогда
		ЗаполнитьСчетаНУ(ДанныеОбъекта, СтрокаТабличнойЧасти, ИмяТабличнойЧасти, СчетаУчета);
	КонецЕсли; 

КонецПроцедуры 

#КонецОбласти 

#Область СлужебныеПроцедурыИФункции

// Заполняет счета БУ в строке табличной части.
Процедура ЗаполнитьСчетаБУ(Объект, СтрокаТЧ, ИмяТабЧасти, СчетаУчета)

	Если ВРег(ИмяТабЧасти) = ВРег("БланкиСтрогогоУчета") Тогда		
		СтрокаТЧ.СчетУчетаБУ             = СчетаУчета.СчетУчетаБУ;
		СтрокаТЧ.СчетУчетаЗабалансовыйБУ = СчетаУчета.СчетУчетаДоп;
	Иначе
		СтрокаТЧ.СчетУчетаБУ = СчетаУчета.СчетУчетаБУ; 		
	КонецЕсли;

КонецПроцедуры 

// Заполняет счета НУ в строке табличной части.
Процедура ЗаполнитьСчетаНУ(Объект, СтрокаТЧ, ИмяТабЧасти, СчетаУчета)
	
	СтрокаТЧ.НалоговоеНазначение 		= СчетаУчета.НалоговоеНазначение;

КонецПроцедуры 

#КонецОбласти 

#КонецЕсли