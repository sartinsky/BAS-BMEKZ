#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
Перем мВалютаРегламентированногоУчета;
Перем мУчетнаяПолитика;
Перем мУчетВПродажныхЦенах;
Перем ПартионныйУчетБУ;

#Область ОбработчикиСобытий
	
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)	
		
	ТипДанныхЗаполнения = ТипЗнч(ДанныеЗаполнения);
	Если ДанныеЗаполнения <> Неопределено И ТипДанныхЗаполнения <> Тип("Структура")
		И Метаданные().ВводитсяНаОсновании.Содержит(ДанныеЗаполнения.Метаданные()) Тогда
		ЗаполнитьПоДокументуОснованию(ДанныеЗаполнения);
	КонецЕсли;
	ЗаполнениеДокументов.Заполнить(ЭтотОбъект, ДанныеЗаполнения);
		
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	МассивНепроверяемыхРеквизитов = Новый Массив();
	
	СтруктураШапкиДокумента		  = Новый Структура;
	
	СтруктураШапкиДокумента.Вставить("ЕстьНДС",								УчетнаяПолитика.ПлательщикНДС(Организация, Дата));
	СтруктураШапкиДокумента.Вставить("ЕстьНалогНаПрибыльДо2015",			УчетнаяПолитика.ПлательщикНалогаНаПрибыльДо2015(Организация, Дата));
	СтруктураШапкиДокумента.Вставить("ВалютаРегламентированногоУчета", 		ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета());
	СтруктураШапкиДокумента.Вставить("ТипСклада",			 				ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Склад, "ТипСклада"));
		
	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, МассивНепроверяемыхРеквизитов);
		
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);

КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)

	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ОбновитьПараметрыУчетнойПолитики();	
		
	СуммаДокумента = Товары.Итог("Сумма");
	
	Если НЕ мУчетнаяПолитика.ЕстьНДС Тогда
		// Организация - не плательщик НДС. Установим во всех ТЧ признак соответствующего учета НДС.
		НеОблНДСДеятельность = Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяХозДеятельность;
		
		Для каждого СтрокаТЧ  Из Товары Цикл
			СтрокаТЧ.НалоговоеНазначение = НеОблНДСДеятельность;
		КонецЦикла; 
		
	КонецЕсли; 
	
	Если НЕ мУчетнаяПолитика.ЕстьНалогНаПрибыльДо2015 Тогда
		
		НалоговоеНазначениеДоходовИЗатрат = Неопределено;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// Дерево значений, содержащее имена необходимых полей в запросе по шапке.
	Перем ДеревоПолейЗапросаПоШапке;
	Перем Заголовок, СтруктураШапкиДокумента;
	Перем ТаблицаПоТоварам;
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКПроведению(ЭтотОбъект); 	
	Если РучнаяКорректировка Тогда
		Возврат;
	КонецЕсли;
	
	мВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();

	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначенияБПВызовСервера.ПредставлениеДокументаПриПроведении(Ссылка);
	
	ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента);

	// Получим данные учетной политики
	ПодготовитьПараметрыУчетнойПолитики(СтруктураШапкиДокумента, Отказ, Заголовок);

	ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоТоварам, Отказ, Заголовок);
		            
	// Движения по документу
	Если Не Отказ Тогда
		
		ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, Отказ, Заголовок);
		
	КонецЕсли;
			
	Движения.Хозрасчетный.ВыполнитьДействияПередЗаписьюДвижений();
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКЗаписиДвижений(ЭтотОбъект);

КонецПроцедуры 

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКОтменеПроведения(ЭтотОбъект);
	Движения.Записать();
	
КонецПроцедуры 

Процедура ПриКопировании(ОбъектКопирования)
	
	Дата = НачалоДня(ОбщегоНазначения.ТекущаяДатаПользователя());
	Ответственный = Пользователи.ТекущийПользователь();
	
КонецПроцедуры

#КонецОбласти

#Область Проведение

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТоварам - результат запроса по табличной части "Товары",
//  СтруктураШапкиДокумента   - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблица значений.
//
Функция ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента)

	ТаблицаТоваров = РезультатЗапросаПоТоварам.Выгрузить();
	
	ТаблицаТоваров.Колонки.НалоговоеНазначение.Имя = "НалоговоеНазначениеЗапасов";	
	ТаблицаТоваров.Колонки.Добавить("НалоговоеНазначениеДоходов");
	ТаблицаТоваров.ЗаполнитьЗначения(СтруктураШапкиДокумента.НалоговоеНазначениеДоходовИЗатрат, 	"НалоговоеНазначениеДоходов");
			
	Возврат ТаблицаТоваров;

КонецФункции 

// Проверяет правильность заполнения шапки документа, 
// формирует МассивНепроверяемыхРеквизитов для стандартной проверки заполнения.
//
// Параметры: 
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении,
//  МассивНепроверяемыхРеквизитов - массив имен реквизитов, 
//  которые не будут проверятся стандартной проверкой заполнения.
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, МассивНепроверяемыхРеквизитов)
		
	Если НЕ СтруктураШапкиДокумента.ЕстьНалогНаПрибыльДо2015 Тогда
		МассивНепроверяемыхРеквизитов.Добавить("НалоговоеНазначениеДоходовИЗатрат");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СчетКт) Тогда
		Если НЕ СчетКт.НалоговыйУчет Тогда
			МассивНепроверяемыхРеквизитов.Добавить("НалоговоеНазначениеДоходовИЗатрат");	
		КонецЕсли; 
	КонецЕсли; 	

КонецПроцедуры

// Проводит табличные части по регистрам
//
// Параметры:
//  ТаблицаПоТоварам          - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  ТаблицаПоБланкам          - таблица значений, содержащая данные для проведения и проверки ТЧ БланкиСтрогогоУчета
//  Отказ                     - флаг отказа в проведении
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения
//
Процедура ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, Отказ, Заголовок)
	
	ДвиженияПоРегистрамТранспорта(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, Отказ, Заголовок);
	ДвиженияПоРегиструПоказанияСпидометраИБака(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, Отказ, Заголовок);
		
	// Бухгалтерские проводки
	ДатаДока     = СтруктураШапкиДокумента.Дата;
	ПроводкиБУ   = Движения.Хозрасчетный;	
	
	Для каждого СтрокаТаблицы Из ТаблицаПоТоварам Цикл

		Проводка = ПроводкиБУ.Добавить();

		Проводка.Период       = ДатаДока;
		Проводка.Организация  = СтруктураШапкиДокумента.Организация;
		Проводка.Содержание   = НСтр("ru='Оприходованы ГСМ';uk='Оприбутковані ПММ'", Локализация.КодЯзыкаИнформационнойБазы());
		Проводка.Сумма        = СтрокаТаблицы.Сумма;

		Проводка.НалоговоеНазначениеДт  = СтрокаТаблицы.НалоговоеНазначениеЗапасов;
		Проводка.НалоговоеНазначениеКт 	= СтрокаТаблицы.НалоговоеНазначениеДоходов;
		
		Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыльДо2015 Тогда

			Если ЗначениеЗаполнено(СтрокаТаблицы.НалоговоеНазначениеДоходов) И 
				 НЕ (СтрокаТаблицы.НалоговоеНазначениеДоходов.ВидНалоговойДеятельности = Справочники.ВидыНалоговойДеятельности.НеОблагаемая) Тогда
				Проводка.СуммаНУКт = СтрокаТаблицы.СуммаНУ;
			КонецЕсли;

		КонецЕсли;
		
		Проводка.СчетДт       = СтрокаТаблицы.СчетУчетаБУ;
		
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Номенклатура", СтрокаТаблицы.Номенклатура);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Склады",       СтруктураШапкиДокумента.Склад);
		 				
		// Партионный учет 
		Если (ПартионныйУчетБУ) Тогда  
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Партии",  Ссылка);
		КонецЕсли;

		Проводка.КоличествоДт = СтрокаТаблицы.Количество;		
		
		Проводка.СчетКт = СтруктураШапкиДокумента.СчетКт;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, СтруктураШапкиДокумента.СубконтоКт1);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, СтруктураШапкиДокумента.СубконтоКт2);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3, СтруктураШапкиДокумента.СубконтоКт3);
				
	КонецЦикла;
	
	Если ИНАГРО_ОбщийВызовСервераПовтИсп.ЕстьБСПУ() Тогда
		КопияТаблицаПоТоварам = ТаблицаПоТоварам.Скопировать();
		КопияТаблицаПоТоварам.Колонки.Добавить("НаправлениеДвижения");
		КопияТаблицаПоТоварам.Колонки.Добавить("Склад");
		КопияТаблицаПоТоварам.ЗаполнитьЗначения(Справочники.ИНАГРО_ВидыДвиженийВедомости.Приход, "НаправлениеДвижения");
		КопияТаблицаПоТоварам.ЗаполнитьЗначения(Склад, "Склад");
		ИНАГРО_Общий.ИНАГРО_ВедомостьДвиженийПриход(Движения, КопияТаблицаПоТоварам, СтруктураШапкиДокумента); 	
	КонецЕсли;
	
КонецПроцедуры 

Процедура ДвиженияПоРегистрамТранспорта(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, Отказ, Заголовок)
	
	Для Каждого СтрокаТЧ Из ТаблицаПоТоварам Цикл 
		
		Движение = Движения.ИНАГРО_ТопливоВТС.Добавить();		
		Движение.Период 	       = СтруктураШапкиДокумента.Дата;
		Движение.ВидДвижения       = ВидДвиженияНакопления.Приход;		
		ЗаполнитьЗначенияСвойств(Движение, СтрокаТЧ); 		
		Движение.Организация 	   = СтруктураШапкиДокумента.Организация;
		Движение.ОсновноеСредство  = СтрокаТЧ.ТранспортноеСредство;
		Движение.Топливо 		   = СтрокаТЧ.Номенклатура; 
		Движение.КоличествоТоплива = СтрокаТЧ.Количество;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДвиженияПоРегиструПоказанияСпидометраИБака(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, Отказ, Заголовок)
	 	
	ВыборкаПоИтогамТоплива = ПодготовитьТаблицуПоказанийБака().Выбрать();	
	
	Пока ВыборкаПоИтогамТоплива.Следующий() Цикл
		
		Показания = ИНАГРО_Транспорт.ПолучитьПоказанияСпидометраИБака(
						СтруктураШапкиДокумента.Дата,
						ВыборкаПоИтогамТоплива.ТранспортноеСредство,
						СтруктураШапкиДокумента.Ссылка);
				
		Движение = Движения.ИНАГРО_ПоказанияСпидометраИБака.Добавить();
		Движение.ОсновноеСредство 	 = ВыборкаПоИтогамТоплива.ТранспортноеСредство;
		Движение.Период 		 	 = СтруктураШапкиДокумента.Дата;
		Движение.ПоказанияБака		 = Показания.ПоказанияБака + ВыборкаПоИтогамТоплива.КоличествоВОсновномТопливе;     
		Движение.ПоказанияСпидометра = Показания.ПоказанияСпидометра;
		
	КонецЦикла; 
	
КонецПроцедуры

Функция ПодготовитьТаблицуПоказанийБака()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ 
	|	ВводНачальныхОстатковТопливаТовары.ТранспортноеСредство,
	|	СУММА(ВводНачальныхОстатковТопливаТовары.КоличествоВОсновномТопливе) КАК КоличествоВОсновномТопливе
	|ИЗ
	|	Документ.ИНАГРО_ВводНачальныхОстатковТоплива.Товары КАК ВводНачальныхОстатковТопливаТовары
	|ГДЕ
	|	ВводНачальныхОстатковТопливаТовары.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ВводНачальныхОстатковТопливаТовары.ТранспортноеСредство";
	Запрос.УстановитьПараметр("Ссылка", ЭтотОбъект.Ссылка);
	
	Возврат Запрос.Выполнить();
		
КонецФункции

// Процедура определяет параметры учетной политики
Процедура ПодготовитьПараметрыУчетнойПолитики(СтруктураШапкиДокумента, Отказ, Заголовок)
	
	СтруктураШапкиДокумента.Вставить("ЕстьНалогНаПрибыльДо2015",  мУчетнаяПолитика.ЕстьНалогНаПрибыльДо2015);
	СтруктураШапкиДокумента.Вставить("ЕстьНДС" ,                  мУчетнаяПолитика.ЕстьНДС);
	СтруктураШапкиДокумента.Вставить("ЕстьЕдиныйНалог",		      мУчетнаяПолитика.ЕстьЕдиныйНалог);
	
КонецПроцедуры 

// Процедура формирует структуру шапки документа и дополнительных полей.
Процедура ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента) Экспорт
	
	// Дерево значений, содержащее имена необходимых полей в запросе по шапке.
	Перем ДеревоПолейЗапросаПоШапке;
	
	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента = ОбщегоНазначенияРед12.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);

	// Заполним по шапке документа дерево параметров, нужных при проведении.
	ДеревоПолейЗапросаПоШапке = ОбщегоНазначенияРед12.СформироватьДеревоПолейЗапросаПоШапке(); 	

	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа.
	СтруктураШапкиДокумента = УправлениеЗапасами.СформироватьЗапросПоДеревуПолей(ЭтотОбъект, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета);
	
КонецПроцедуры // ПодготовитьСтруктуруШапкиДокумента()

// Процедура формирует таблицы документа.
Процедура ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоТоварам, Отказ, Заголовок) Экспорт
	
	// Получим необходимые данные для проведения и проверки заполнения табличной части "Товары".
	СтруктураПолей 			= Новый Структура;
	СтруктураПростыхПолей	= Новый Структура;
	СтруктураПолей.Вставить("НомерСтроки",                "НомерСтроки");
	СтруктураПолей.Вставить("Номенклатура",               "Номенклатура");
	СтруктураПолей.Вставить("ТранспортноеСредство",       "ТранспортноеСредство");
	СтруктураПолей.Вставить("Количество",                 "Количество");
	СтруктураПолей.Вставить("КоличествоВОсновномТопливе", "КоличествоВОсновномТопливе");
	СтруктураПолей.Вставить("Сумма",                      "Сумма");
	СтруктураПолей.Вставить("СуммаНУ",                    "СуммаНУ");
	СтруктураПолей.Вставить("СчетУчетаБУ",                "СчетУчетаБУ");
	СтруктураПолей.Вставить("НалоговоеНазначение",        "НалоговоеНазначение");
		
	РезультатЗапросаПоТоварам = ОбщегоНазначенияРед12.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураПолей, СтруктураПростыхПолей);
			
	ТаблицаПоТоварам 	  = ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента);
	
КонецПроцедуры 

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ЗаполнитьПоДокументуОснованию(Основание)

	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ИнвентаризацияТоваровНаСкладе") Тогда
		
		ЗаполнениеДокументов.ЗаполнитьПоОснованию(ЭтотОбъект, Основание);
		
		Запрос = Новый Запрос;
		
		Запрос.Текст =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	Док.Номенклатура,
			|	Док.ЕдиницаИзмерения,
			|	Док.Коэффициент КАК КоэффициентЕдиницыИнвентаризации,
			|	МАКСИМУМ(Док.Количество - Док.КоличествоУчет) КАК КоличествоОтклонениеИнвентаризации,
			|	СУММА(ВЫБОР
			|			КОГДА ДокОприходование.Количество ЕСТЬ NULL
			|				ТОГДА 0
			|			ИНАЧЕ ДокОприходование.Количество * ДокОприходование.Коэффициент / Док.Коэффициент
			|		КОНЕЦ) КАК КоличествоОприходованное,
			|	Док.Цена
			|ИЗ
			|	Документ.ИнвентаризацияТоваровНаСкладе.Товары КАК Док
			|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ОприходованиеТоваров.Товары КАК ДокОприходование
			|		ПО Док.Номенклатура = ДокОприходование.Номенклатура
			|			И Док.Ссылка.Склад = ДокОприходование.Ссылка.Склад
			|			И (ДокОприходование.Ссылка.ИнвентаризацияТоваровНаСкладе = &ДокументОснованиеСсылка)
			|			И (ДокОприходование.Ссылка.Проведен)
			|			И (ДокОприходование.Ссылка <> &ДокументСсылка)
			|ГДЕ
			|	Док.Ссылка = &ДокументОснованиеСсылка
			|	И Док.Количество - Док.КоличествоУчет > 0
			|
			|СГРУППИРОВАТЬ ПО
			|	Док.Номенклатура,
			|	Док.ЕдиницаИзмерения,
			|	Док.Коэффициент,
			|	Док.Цена";
		
		Запрос.УстановитьПараметр("ДокументСсылка",          Ссылка);
		Запрос.УстановитьПараметр("ДокументОснованиеСсылка", Основание);

		Выборка = Запрос.Выполнить().Выбрать();
		
		Склад = Основание.Склад;
		
		СтрокиДобавлены = Ложь;
		
		Пока Выборка.Следующий() Цикл
			
			КоличествоОприходовать = Выборка.КоличествоОтклонениеИнвентаризации - Выборка.КоличествоОприходованное;
			
			Если КоличествоОприходовать <= 0 Тогда
				Продолжить;
			КонецЕсли; 
			
			СтрокиДобавлены = Истина;
			
			СтрокаТабличнойЧасти = Товары.Добавить();			
			СтрокаТабличнойЧасти.Номенклатура     = Выборка.Номенклатура;
			СтрокаТабличнойЧасти.ЕдиницаИзмерения = Выборка.ЕдиницаИзмерения;
			СтрокаТабличнойЧасти.Коэффициент      = Выборка.КоэффициентЕдиницыИнвентаризации;
			СтрокаТабличнойЧасти.Количество       = КоличествоОприходовать;
			СтрокаТабличнойЧасти.Цена             = Выборка.Цена;
			
			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
			
			СчетаУчета = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаУчетаНоменклатуры(Организация, СтрокаТабличнойЧасти.Номенклатура, Склад);			
			
			Документы.ИНАГРО_ВводНачальныхОстатковТоплива.ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(ЭтотОбъект, СтрокаТабличнойЧасти, СчетаУчета, "Товары");
			
		КонецЦикла;		
		
		// Заполним состав комиссии
		ПервыйЧленКомиссии   = Основание.ПервыйЧленКомиссии;
		ВторойЧленКомиссии   = Основание.ВторойЧленКомиссии;
		ТретийЧленКомиссии   = Основание.ТретийЧленКомиссии;
		ПредседательКомиссии = Основание.ПредседательКомиссии;

		Если Товары.Количество() = 0 Тогда
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='В документе ""%1"" № %2 отсутствуют товары фактическое количество которых превышает учетное.';uk='В документі ""%1"" № %2 відсутні товари фактична кількість яких перевищує облікову.'"), Основание.Метаданные().Представление(), Основание.Номер);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);	
		КонецЕсли;		
		
	КонецЕсли;
	
КонецПроцедуры	

Процедура ОбновитьПараметрыУчетнойПолитики()

	мУчетнаяПолитика = Новый Структура;
	мУчетнаяПолитика.Вставить("ЕстьНалогНаПрибыльДо2015", УчетнаяПолитика.ПлательщикНалогаНаПрибыльДо2015(Организация, НачалоМесяца(Дата)));
	мУчетнаяПолитика.Вставить("ЕстьНДС",                  УчетнаяПолитика.ПлательщикНДС(Организация, НачалоМесяца(Дата)));
	мУчетнаяПолитика.Вставить("ЕстьЕдиныйНалог",          УчетнаяПолитика.ПлательщикЕдиногоНалога(Организация, НачалоМесяца(Дата)));
							
	СпособОценкиМПЗ  = УчетнаяПолитика.СпособОценкиМПЗ(Организация, НачалоМесяца(Дата));
	ПартионныйУчетБУ = (СпособОценкиМПЗ = Перечисления.СпособыОценки.ФИФО ИЛИ СпособОценкиМПЗ = Перечисления.СпособыОценки.ЛИФО);

КонецПроцедуры

#КонецОбласти 

#КонецЕсли