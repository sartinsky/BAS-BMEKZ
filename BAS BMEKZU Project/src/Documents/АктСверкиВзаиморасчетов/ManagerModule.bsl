#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти 	

#Область СлужебныеПроцедурыИФункции

// Заполняет список команд отправки по электронной почте.
// 
// Параметры:
//   КомандыОтправки - ТаблицаЗначений - состав полей см. в функции ОтправкаПочтовыхСообщений.КомандыОтправки.
//
Процедура ДобавитьКомандыОтправки(КомандыОтправки) Экспорт
	
	КомандаОтправки = КомандыОтправки.Добавить();
	КомандаОтправки.Идентификатор = "АктСверки";
	КомандаОтправки.Представление = НСтр("ru='Акт сверки';uk='Акт звірки'");
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыИФункцииПечати

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	// Печать акта сверки
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "АктСверки";
	КомандаПечати.Представление = НСтр("ru='Акт сверки';uk='Акт звірки'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечати";
	
	// Реестр документов
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор  = "Реестр";
	КомандаПечати.Представление  = НСтр("ru='Реестр документов';uk='Реєстр документів'");
	КомандаПечати.ЗаголовокФормы = НСтр("ru='Реестр документов ""Акт сверки расчетов с контрагентом""';uk='Реєстр документів ""Акт звірки розрахунків з контрагентом""'");
	КомандаПечати.Обработчик     = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечатиРеестраДокументов";
	КомандаПечати.СписокФорм     = "ФормаСписка";
	КомандаПечати.Порядок        = 100;

	
КонецПроцедуры

// Сформировать печатные формы объектов
//
// ВХОДЯЩИЕ:
//   ИменаМакетов    - Строка    - Имена макетов, перечисленные через запятую
//   МассивОбъектов  - Массив    - Массив ссылок на объекты которые нужно распечатать
//   ПараметрыПечати - Структура - Структура дополнительных параметров печати
//
// ИСХОДЯЩИЕ:
//   КоллекцияПечатныхФорм - Таблица значений - Сформированные табличные документы
//   ПараметрыВывода       - Структура        - Параметры сформированных табличных документов
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	ПараметрыВывода.ДоступнаПечатьПоКомплектно = Истина;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "АктСверки") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "АктСверки", НСтр("ru='Акт сверки взаиморасчетов';uk='Акт звірки взаєморозрахунків'"),
		ПечатьАктаСверки(МассивОбъектов, ОбъектыПечати,ПараметрыВывода), , "Документ.АктСверкиВзаиморасчетов.ПФ_MXL_АктСверки", , Истина);
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьТекстЗапросаДляФормированияПечатнойФормыАктСверки()
ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТЧПоДаннымОрганизации.Ссылка КАК Документ,
	|	0 КАК НомерТабЧасти,
	|	ВЫБОР
	|		КОГДА ТЧПоДаннымОрганизации.Ссылка.РазбитьПоДоговорам
	|			ТОГДА ТЧПоДаннымОрганизации.Договор
	|		ИНАЧЕ NULL
	|	КОНЕЦ КАК Договор,
	|	ТЧПоДаннымОрганизации.НомерСтроки КАК НомерСтроки,
	|	ТЧПоДаннымОрганизации.Дата КАК Дата,
	|	ТЧПоДаннымОрганизации.Документ КАК Регистратор,
	|	ТЧПоДаннымОрганизации.Представление КАК Представление,
	|	ТЧПоДаннымОрганизации.Дебет КАК Дебет,
	|	ТЧПоДаннымОрганизации.Кредит КАК Кредит,
	|	NULL КАК ПредставлениеКонтр,
	|	NULL КАК ДатаКонтр,
	|	0 КАК ДебетКонтр,
	|	0 КАК КредитКонтр
	|ПОМЕСТИТЬ ДанныеДокумента
	|ИЗ
	|	Документ.АктСверкиВзаиморасчетов.ПоДаннымОрганизации КАК ТЧПоДаннымОрганизации
	|ГДЕ
	|	ТЧПоДаннымОрганизации.Ссылка В(&МассивДокументов)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТЧПоДаннымКонтрагента.Ссылка,
	|	1,
	|	ВЫБОР
	|		КОГДА ТЧПоДаннымКонтрагента.Ссылка.РазбитьПоДоговорам
	|			ТОГДА ТЧПоДаннымКонтрагента.Договор
	|		ИНАЧЕ NULL
	|	КОНЕЦ,
	|	ТЧПоДаннымКонтрагента.НомерСтроки,
	|	NULL,
	|	NULL,
	|	NULL,
	|	0,
	|	0,
	|	ТЧПоДаннымКонтрагента.Представление,
	|	ТЧПоДаннымКонтрагента.Дата,
	|	ТЧПоДаннымКонтрагента.Дебет,
	|	ТЧПоДаннымКонтрагента.Кредит
	|ИЗ
	|	Документ.АктСверкиВзаиморасчетов.ПоДаннымКонтрагента КАК ТЧПоДаннымКонтрагента
	|ГДЕ
	|	ТЧПоДаннымКонтрагента.Ссылка В(&МассивДокументов)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Документ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	АктСверкиВзаиморасчетов.Ссылка КАК Документ,
	|	ДанныеДокумента.Договор КАК Договор,
	|	ДанныеДокумента.НомерСтроки КАК НомерСтроки,
	|	ДанныеДокумента.Дата КАК Дата,
	|	ДанныеДокумента.Дата КАК МинДата,
	|	ДанныеДокумента.Регистратор КАК Регистратор,
	|	ДанныеДокумента.Представление КАК Представление,
	|	ДанныеДокумента.ДатаКонтр КАК ДатаКонтр,
	|	ДанныеДокумента.ПредставлениеКонтр КАК ПредставлениеКонтр,
	|	ЕСТЬNULL(ДанныеДокумента.Дебет, 0) КАК СуммаОборотДт,
	|	ЕСТЬNULL(ДанныеДокумента.Кредит, 0) КАК СуммаОборотКт,
	|	ЕСТЬNULL(ДанныеДокумента.ДебетКонтр, 0) КАК СуммаОборотДтКонтр,
	|	ЕСТЬNULL(ДанныеДокумента.КредитКонтр, 0) КАК СуммаОборотКтКонтр,
	|	АктСверкиВзаиморасчетов.Организация КАК Организация,
	|	АктСверкиВзаиморасчетов.Контрагент КАК Контрагент,
	|	АктСверкиВзаиморасчетов.Дата КАК ДатаАктаСверки,
	|	АктСверкиВзаиморасчетов.ПредставительОрганизации КАК ПредставительОрганизации,
	|	АктСверкиВзаиморасчетов.ПредставительКонтрагента КАК ПредставительКонтрагента,
	|	АктСверкиВзаиморасчетов.ДатаНачала КАК ДатаНачала,
	|	АктСверкиВзаиморасчетов.ДатаОкончания КАК ДатаОкончания,
	|	АктСверкиВзаиморасчетов.ОстатокНаНачало КАК ОстатокНаНачало,
	|	АктСверкиВзаиморасчетов.Расхождение КАК Расхождение,
	|	АктСверкиВзаиморасчетов.ДоговорКонтрагента КАК ДоговорКонтрагентаВШапке,
	|	ЕСТЬNULL(АктСверкиВзаиморасчетов.ДоговорКонтрагента.ЭтоГруппа, ЛОЖЬ) КАК ДоговорКонтрагентаВШапкеЭтоГруппа,
	|	АктСверкиВзаиморасчетов.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	АктСверкиВзаиморасчетов.ДоговорКонтрагента.Дата  		КАК ДоговорДата,
	|	АктСверкиВзаиморасчетов.ДоговорКонтрагента.Номер 		КАК ДоговорНомер,
	|	АктСверкиВзаиморасчетов.ДоговорКонтрагента.НаименованиеДляПечати КАК ДоговорНаименованиеДляПечати,
	|	АктСверкиВзаиморасчетов.ВалютаДокумента КАК ВалютаДокумента,
	|	АктСверкиВзаиморасчетов.РазбитьПоДоговорам КАК РазбитьПоДоговорам,
	|	АктСверкиВзаиморасчетов.СверкаСогласована КАК СверкаСогласована,
	|	ДанныеДокумента.НомерТабЧасти КАК НомерТабЧасти
	|ИЗ
	|	Документ.АктСверкиВзаиморасчетов КАК АктСверкиВзаиморасчетов
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДанныеДокумента КАК ДанныеДокумента
	|		ПО (ДанныеДокумента.Документ = АктСверкиВзаиморасчетов.Ссылка)
	|ГДЕ
	|	АктСверкиВзаиморасчетов.Ссылка В(&МассивДокументов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерТабЧасти,
	|	ДанныеДокумента.НомерСтроки
	|ИТОГИ
	|	МИНИМУМ(МинДата),
	|	СУММА(СуммаОборотДт),
	|	СУММА(СуммаОборотКт),
	|	СУММА(СуммаОборотДтКонтр),
	|	СУММА(СуммаОборотКтКонтр),
	|	МАКСИМУМ(Организация),
	|	МАКСИМУМ(Контрагент),
	|	МАКСИМУМ(ДатаАктаСверки),
	|	МАКСИМУМ(ПредставительОрганизации),
	|	МАКСИМУМ(ПредставительКонтрагента),
	|	МАКСИМУМ(ДатаНачала),
	|	МАКСИМУМ(ДатаОкончания),
	|	МАКСИМУМ(ОстатокНаНачало),
	|	МАКСИМУМ(Расхождение),
	|	МАКСИМУМ(ДоговорКонтрагентаВШапке),
	|	МАКСИМУМ(ДоговорКонтрагентаВШапкеЭтоГруппа),
	|	МАКСИМУМ(ВалютаДокумента),
	|	МАКСИМУМ(РазбитьПоДоговорам),
	|	МАКСИМУМ(СверкаСогласована)
	|ПО
	|	Документ,
	|	Договор";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ПечатьАктаСверки(МассивОбъектов, ОбъектыПечати,ПараметрыВывода)
	УстановитьПривилегированныйРежим(Истина);
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.АвтоМасштаб         = Истина;
	ТабличныйДокумент.ОриентацияСтраницы  = ОриентацияСтраницы.Ландшафт;
	ТабличныйДокумент.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_АктСверкиВзаиморасчетов";
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.АктСверкиВзаиморасчетов.ПФ_MXL_АктСверки");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивДокументов", МассивОбъектов);
	Запрос.Текст =	ПолучитьТекстЗапросаДляФормированияПечатнойФормыАктСверки();
	
	Шапка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Документ");
	
	ПервыйДокумент = Истина;
	
	Пока Шапка.Следующий() Цикл
		Организация   		= Шапка.Документ.Организация;
		Контрагент    		= Шапка.Документ.Контрагент;
		ДатаНачала    		= Шапка.Документ.ДатаНачала;
		ДатаОкончания 		= Шапка.Документ.ДатаОкончания;
		ДоговорКонтрагента  = Шапка.Документ.ДоговорКонтрагента;
		ПредставительКонтрагента = Шапка.Документ.ПредставительКонтрагента;
		ПредставительОрганизации = Шапка.Документ.ПредставительОрганизации;
		ВалютаДокумента 	= Шапка.Документ.ВалютаДокумента;
		ОстатокНаНачало 	= Шапка.Документ.ОстатокНаНачало;
		РазбитьПоДоговорам 	= Шапка.Документ.РазбитьПоДоговорам;
		СверкаСогласована 	= Шапка.Документ.СверкаСогласована;
		
		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ПервыйДокумент = Ложь;
		// Запомним номер строки, с которой начали выводить текущий документ.
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		КодЯзыкаПечать = ПараметрыВывода.КодЯзыкаДляМногоязычныхПечатныхФорм;
		Макет.КодЯзыкаМакета = КодЯзыкаПечать;
		ОбластьЗаголовок    = Макет.ПолучитьОбласть("Заголовок");
		ОбластьШапкаТаблицы = Макет.ПолучитьОбласть("ШапкаТаблицы");
		ОбластьНачОстатки   = Макет.ПолучитьОбласть("НачОстатки");
		ОбластьДоговор      = Макет.ПолучитьОбласть("Договор");
		ОбластьДоговорИтоги = Макет.ПолучитьОбласть("ДоговорИтоги");
		ОбластьОбороты      = Макет.ПолучитьОбласть("Обороты");
		ОбластьОборотыИтог  = Макет.ПолучитьОбласть("ОборотыИтог");
		ОбластьКонОстатки   = Макет.ПолучитьОбласть("КонОстатки");
		ОбластьПодвал       = Макет.ПолучитьОбласть("Подвал");
		
		// Заполняем шапку
		ПараметрыЗаголовок = Новый Структура;
		
		// Название организации
		СведенияОбОрганизации = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Шапка.Организация, Шапка.ДатаАктаСверки);
		НазваниеОрганизации = Организация.НаименованиеПолное;
		Если ПустаяСтрока(НазваниеОрганизации) Тогда
			НазваниеОрганизации = Организация;
		КонецЕсли;
		ПараметрыЗаголовок.Вставить("НазваниеОрганизации", НазваниеОрганизации);
		
		// Наименование контрагента
		СведенияОКонтрагенте = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Шапка.Контрагент, Шапка.ДатаАктаСверки);
		НаименованиеКонтрагента = Контрагент.НаименованиеПолное;
		Если ПустаяСтрока(НаименованиеКонтрагента) Тогда
			НаименованиеКонтрагента = Контрагент;
		КонецЕсли;
		ПараметрыЗаголовок.Вставить("НаименованиеКонтрагента", НаименованиеКонтрагента);
		
		// За период
		ДатаНачалаОтчета = ?(ЗначениеЗаполнено(Шапка.ДатаНачала), Шапка.ДатаНачала, Шапка.МинДата);
		Если ЗначениеЗаполнено(ДатаНачалаОтчета) Тогда
			ЗаПериод = ПредставлениеПериода(НачалоДня(ДатаНачалаОтчета), КонецДня(Шапка.ДатаОкончания), "ФП = Истина; Л ="+Локализация.ОпределитьКодЯзыкаДляФормат(КодЯзыкаПечать));
			ПараметрыЗаголовок.Вставить("ЗаПериод", СтрШаблон(НСтр("ru='за период: %1';uk='за період: %1'",КодЯзыкаПечать), ЗаПериод));
		КонецЕсли;
		
		ТекстЗаголовка = НСтр("ru='взаимных расчетов ';uk='взаємних розрахунків '",КодЯзыкаПечать) + ЗаПериод + Символы.ПС
		+ НСтр("ru='между ';uk='між '",КодЯзыкаПечать) + НазваниеОрганизации + Символы.ПС + НСтр("ru='и ';uk='і '",КодЯзыкаПечать) + НаименованиеКонтрагента;
		
		
		Если ЗначениеЗаполнено(Шапка.ДоговорКонтрагентаВШапке) И НЕ Шапка.ДоговорКонтрагентаВШапкеЭтоГруппа Тогда
			
			// выводим сведения о договоре и сделке
			СписокДополнительныхПараметров = "ДоговорНаименованиеДляПечати,";
			МассивСтруктурСтрок = ОбщегоНазначенияБПВызовСервера.ДополнительнаяИнформация(Шапка,СписокДополнительныхПараметров, КодЯзыкаПечать);
			ПоДоговору = "";
			Если НЕ МассивСтруктурСтрок.Количество()=0 Тогда
				ПоДоговору = МассивСтруктурСтрок[0].ЗначениеПараметра;
			КонецЕсли;
			
			ПараметрыЗаголовок.Вставить("ПоДоговору",
				//Символы.ПС + СтрШаблон(НСтр("ru='по договору %1';uk='за договором %1'",КодЯзыкаПечать), Шапка.ДоговорКонтрагентаВШапке));
				Символы.ПС + СтрШаблон(НСтр("ru='по договору %1';uk='за договором %1'",КодЯзыкаПечать), ПоДоговору));
			
		КонецЕсли;
		
		// Валюта документа
		ПараметрыЗаголовок.Вставить("ВалютаДокумента", Шапка.ВалютаДокумента);
		
		// Представитель организации
		ДанныеПредставителяОрганизации = ДанныеПредставителяОрганизации(Шапка);
		ПараметрыЗаголовок.Вставить("ПредставительОрганизации", ПредставительОрганизации);
		
		// Представитель контрагента
		ДанныеПредставителяКонтрагента = ДанныеПредставителяКонтрагента(Шапка);
		ПараметрыЗаголовок.Вставить("ПредставительКонтрагента", ПредставительКонтрагента);
		
		ФИОПредставителя = ДанныеПредставителяОрганизации.ФИОПолные;
		
		СтрЗаголовокТаблица = НСтр("ru='Мы, нижеподписавшиеся, ';uk='Ми, що нижче підписалися, '",КодЯзыкаПечать) + 
		?(НЕ ЗначениеЗаполнено(ДанныеПредставителяОрганизации.Должность),"________________",ДанныеПредставителяОрганизации.Должность) + " " + НазваниеОрганизации 
		+ " " + ?(ФИОПредставителя<>"",ФИОПредставителя,"_______________________") + НСтр("ru=', с одной стороны, ';uk=', з одного боку, '",КодЯзыкаПечать)
		+ НСтр("ru='и ';uk='і '",КодЯзыкаПечать) + ?(НЕ ЗначениеЗаполнено(ПредставительКонтрагента.Должность),"________________",ПредставительКонтрагента.Должность) + " " + НаименованиеКонтрагента + " " 
		+ ?(НЕ ЗначениеЗаполнено(ПредставительКонтрагента),"_______________________",ПредставительКонтрагента) + НСтр("ru=', с другой стороны, ';uk=', з іншого боку, '",КодЯзыкаПечать)
		+ НСтр("ru='составили настоящий акт сверки в том, что состояние взаимных расчетов по данным учета следующее:';uk='склали даний акт звірки у тому, що стан взаємних розрахунків за даними обліку наступний:'",КодЯзыкаПечать);
		//
		ОбластьЗаголовок.Параметры.СтрЗаголовокТаблица = СтрЗаголовокТаблица;
		// Выводим шапку
		ОбластьЗаголовок.Параметры.Заполнить(ПараметрыЗаголовок);
		ТабличныйДокумент.Вывести(ОбластьЗаголовок);
		ТабличныйДокумент.Вывести(ОбластьШапкаТаблицы);
		
		// Строки таблицы
		ПараметрыНачальныеОстатки = Новый Структура;
		ПараметрыНачальныеОстатки.Вставить("СуммаНачальныйОстатокДт", ?(Шапка.ОстатокНаНачало > 0, Шапка.ОстатокНаНачало, 0));
		ПараметрыНачальныеОстатки.Вставить("СуммаНачальныйОстатокКт", ?(Шапка.ОстатокНаНачало < 0, -Шапка.ОстатокНаНачало, 0));
		ОбластьНачОстатки.Параметры.Заполнить(ПараметрыНачальныеОстатки);
		ТабличныйДокумент.Вывести(ОбластьНачОстатки);
		
		Если Шапка.РазбитьПоДоговорам Тогда
			СальдоПоДоговорам = НачальноеСальдоПоДоговорам(Шапка);
			НачальноеСальдоПоДоговорамАкта      = СальдоПоДоговорам.ПоДоговорамАкта;
			НачальноеСальдоПоОстальнымДоговорам = СальдоПоДоговорам.ПоОстальнымДоговорам;
			
			ВывестиСальдоПоОстальнымДоговорам(
				НачальноеСальдоПоОстальнымДоговорам,
				ОбластьДоговор,
				ОбластьДоговорИтоги,
				ТабличныйДокумент,
				Шапка);
		КонецЕсли;
		
		ОбходПоДоговорам = Шапка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Договор");
		Пока ОбходПоДоговорам.Следующий() Цикл
			
			ОбходПоДокументам=ОбходПоДоговорам.Выбрать();
			
			//Создадим список документов по организации и контрагенту
			СписокДокументов = новый массив;
			СписокДокументовК = новый массив;
			
			Пока ОбходПоДокументам.Следующий() Цикл
				Если ОбходПоДокументам.Дата<>NULL Тогда
					СтруктураДокумента = НовыйСтруктураДокумента();
					ЗаполнитьЗначенияСвойств(СтруктураДокумента, ОбходПоДокументам);
					СписокДокументов.Добавить(СтруктураДокумента);
				КонецЕсли;
				
				Если ОбходПоДокументам.ДатаКонтр<>NULL Тогда
					СтруктураДокумента = НовыйСтруктураДокумента(Истина);
					ЗаполнитьЗначенияСвойств(СтруктураДокумента, ОбходПоДокументам);
					СписокДокументовК.Добавить(СтруктураДокумента);
				КонецЕсли; 
			КонецЦикла;
			
			// Не отображаем информацию по контрагенту, если не введены документы и сверка не согласована.
			// В этом случае будут пустые строки и итоги со стороны контрагента.
			ЗаполнятьДанныеКонтрагента = (Шапка.СверкаСогласована ИЛИ (СписокДокументовК.Количество() <> 0));
			
			// Выравняем таблицы по количеству строк
			РазницаСтрок = СписокДокументов.Количество() - СписокДокументовК.Количество();
			Если РазницаСтрок > 0 Тогда
				ДополняемаяТаблица = СписокДокументовК;
				НоваяСтрока = НовыйСтруктураДокумента(Истина);
			ИначеЕсли РазницаСтрок < 0 Тогда
				РазницаСтрок = -РазницаСтрок;
				ДополняемаяТаблица = СписокДокументов;
				НоваяСтрока = НовыйСтруктураДокумента();
			КонецЕсли;
			Для Счетчик = 1 По РазницаСтрок Цикл
				ДополняемаяТаблица.Добавить(НоваяСтрока);
			КонецЦикла;
			
			ЕстьСтрокиДокументов = (СписокДокументов.Количество() <> 0);
			
			// Выводим данные в табличный документ
			Если Шапка.РазбитьПоДоговорам И ЕстьСтрокиДокументов Тогда
				ОбластьДоговор.Параметры.Заполнить(ОбходПоДоговорам);
				НачальноеСальдоПоДоговору = НачальноеСальдоПоДоговорамАкта.Скопировать(
					Новый Структура("Договор", ОбходПоДоговорам.Договор));
				СтруктураСальдоПоДоговору = Новый Структура;
				СтруктураСальдоПоДоговору.Вставить("НачОстатокПоДоговоруДт",
					НачальноеСальдоПоДоговору.Итог("НачОстатокПоДоговоруДт"));
				СтруктураСальдоПоДоговору.Вставить("НачОстатокПоДоговоруКт",
					НачальноеСальдоПоДоговору.Итог("НачОстатокПоДоговоруКт"));
				ОбластьДоговор.Параметры.Заполнить(СтруктураСальдоПоДоговору);
				
				ТабличныйДокумент.Вывести(ОбластьДоговор);
			КонецЕсли;
			
			Для Счетчик = 0 По СписокДокументов.Количество() - 1 Цикл
				// Выводим обороты
				ОбластьОбороты.Параметры.Заполнить(СписокДокументов[Счетчик]);
				ОбластьОбороты.Параметры.Заполнить(СписокДокументовК[Счетчик]);
				ТабличныйДокумент.Вывести(ОбластьОбороты);
			КонецЦикла;
			
			Если Шапка.РазбитьПоДоговорам И ЕстьСтрокиДокументов Тогда
				ОбластьДоговорИтоги.Параметры.Заполнить(ОбходПоДоговорам);
				// Конечное сальдо по договору
				СтруктураКонСальдоПоДоговору = Новый Структура;
				КонОстатокПоДоговоруДт = СтруктураСальдоПоДоговору.НачОстатокПоДоговоруДт + ОбходПоДоговорам.СуммаОборотДт;
				КонОстатокПоДоговоруКт = СтруктураСальдоПоДоговору.НачОстатокПоДоговоруКт + ОбходПоДоговорам.СуммаОборотКт;
				КонОстатокПоДоговору   = КонОстатокПоДоговоруДт - КонОстатокПоДоговоруКт;
				Если КонОстатокПоДоговору < 0 Тогда
					СтруктураКонСальдоПоДоговору.Вставить("КонОстатокПоДоговоруДт", 0);
					СтруктураКонСальдоПоДоговору.Вставить("КонОстатокПоДоговоруКт",-КонОстатокПоДоговору);
				Иначе
					СтруктураКонСальдоПоДоговору.Вставить("КонОстатокПоДоговоруДт", КонОстатокПоДоговору);
					СтруктураКонСальдоПоДоговору.Вставить("КонОстатокПоДоговоруКт", 0);
				КонецЕсли;
				
				Если НЕ ЗаполнятьДанныеКонтрагента Тогда
					СтруктураКонСальдоПоДоговору.Вставить("КонОстатокПоДоговоруДтКонтр", 0);
					СтруктураКонСальдоПоДоговору.Вставить("КонОстатокПоДоговоруКтКонтр", 0);
				Иначе
					КонОстатокПоДоговоруДтКонтр = СтруктураСальдоПоДоговору.НачОстатокПоДоговоруКт + ОбходПоДоговорам.СуммаОборотДтКонтр;
					КонОстатокПоДоговоруКтКонтр = СтруктураСальдоПоДоговору.НачОстатокПоДоговоруДт + ОбходПоДоговорам.СуммаОборотКтКонтр;
					КонОстатокПоДоговоруКонтр = КонОстатокПоДоговоруДтКонтр - КонОстатокПоДоговоруКтКонтр;
					Если КонОстатокПоДоговоруКонтр < 0 Тогда
						СтруктураКонСальдоПоДоговору.Вставить("КонОстатокПоДоговоруДтКонтр", 0);
						СтруктураКонСальдоПоДоговору.Вставить("КонОстатокПоДоговоруКтКонтр",-КонОстатокПоДоговоруКонтр);
					Иначе
						СтруктураКонСальдоПоДоговору.Вставить("КонОстатокПоДоговоруДтКонтр", КонОстатокПоДоговоруКонтр);
						СтруктураКонСальдоПоДоговору.Вставить("КонОстатокПоДоговоруКтКонтр", 0);
					КонецЕсли;
				КонецЕсли;
				
				ОбластьДоговорИтоги.Параметры.Заполнить(СтруктураКонСальдоПоДоговору);
				ТабличныйДокумент.Вывести(ОбластьДоговорИтоги);
			КонецЕсли;
		КонецЦикла;  
		
		// Итоги по документам
		ОбластьОборотыИтог.Параметры.Заполнить(Шапка);
		ТабличныйДокумент.Вывести(ОбластьОборотыИтог);
		
		// Итоги по контрагенту
		ОстатокНаКонец = Шапка.ОстатокНаНачало + Шапка.СуммаОборотДт - Шапка.СуммаОборотКт;
		Если ЗаполнятьДанныеКонтрагента Тогда
			ОстатокНаКонецКонтр = Шапка.ОстатокНаНачало - Шапка.СуммаОборотДтКонтр + Шапка.СуммаОборотКтКонтр;
		Иначе
			ОстатокНаКонецКонтр = 0;
		КонецЕсли;
		ПараметрыИтогиПоКонтрагенту = Новый Структура;
		ПараметрыИтогиПоКонтрагенту.Вставить("СуммаКонечныйОстатокДт",      ?(ОстатокНаКонец > 0, ОстатокНаКонец, 0));
		ПараметрыИтогиПоКонтрагенту.Вставить("СуммаКонечныйОстатокКт",      ?(ОстатокНаКонец < 0, -ОстатокНаКонец, 0));
		ПараметрыИтогиПоКонтрагенту.Вставить("СуммаКонечныйОстатокКтКонтр", ?(ОстатокНаКонецКонтр > 0, ОстатокНаКонецКонтр, 0));
		ПараметрыИтогиПоКонтрагенту.Вставить("СуммаКонечныйОстатокДтКонтр", ?(ОстатокНаКонецКонтр < 0, -ОстатокНаКонецКонтр, 0));
		ОбластьКонОстатки.Параметры.Заполнить(ПараметрыИтогиПоКонтрагенту);
		ТабличныйДокумент.Вывести(ОбластьКонОстатки);
		
		ПараметрыПодвала = Новый Структура;
		ПараметрыПодвала.Вставить("НаименованиеКонтрагента", НаименованиеКонтрагента);
		ПараметрыПодвала.Вставить("НазваниеОрганизации",     НазваниеОрганизации);
		ПараметрыПодвала.Вставить("Должность",               ДанныеПредставителяОрганизации.Должность);
		ПараметрыПодвала.Вставить("ДолжностьК",              ДанныеПредставителяКонтрагента.Должность);
		ПараметрыПодвала.Вставить("ФИОПредставителя",        СтрШаблон("(%1)", ДанныеПредставителяОрганизации.Представление));
		ПараметрыПодвала.Вставить("ФИОПредставителяК",       СтрШаблон("(%1)", ДанныеПредставителяКонтрагента.Представление));
		ПараметрыПодвала.Вставить("РезультатыСверки",
			РезультатСверки(Шапка, ОстатокНаКонец, НазваниеОрганизации, НаименованиеКонтрагента,КодЯзыкаПечать));
		Если ЗаполнятьДанныеКонтрагента Тогда
			ПараметрыПодвала.Вставить("РезультатыСверкиК",
				РезультатСверки(Шапка, ОстатокНаКонецКонтр, НазваниеОрганизации, НаименованиеКонтрагента,КодЯзыкаПечать));
		КонецЕсли;
		
		// Итог сверки выводим если нашли расхождение и сверка согласована.
		Если Шапка.Расхождение <> 0 И Шапка.СверкаСогласована Тогда
			СуммаРасхождение = ?(Шапка.Расхождение > 0, Шапка.Расхождение, -Шапка.Расхождение);
			ИтогСверки = СтрШаблон(НСтр("ru='В результате сверки выявлено расхождение информации о состоянии расчетов в размере %1 %2 (%3)';uk='В результаті звірки виявлена розбіжність інформації про стан розрахунків у розмірі %1 %2 (%3)'",КодЯзыкаПечать),
				Формат(СуммаРасхождение, "ЧЦ=21; ЧДЦ=2"),
				Строка(Шапка.ВалютаДокумента),
				ОбщегоНазначенияБПВызовСервера.СформироватьСуммуПрописью(СуммаРасхождение, Шапка.ВалютаДокумента,КодЯзыкаПечать)
				);
			ПараметрыПодвала.Вставить("ИтогСверки", Символы.ПС + ИтогСверки + Символы.ПС + " ");
		КонецЕсли;
		
		ОбластьПодвал.Параметры.Заполнить(ПараметрыПодвала);
		ТабличныйДокумент.Вывести(ОбластьПодвал);
	
		ТабличныйДокумент.ТолькоПросмотр = Истина;
		
		// В табличном документе зададим имя области, в которую был 
		// выведен объект. Нужно для возможности печати покомплектно.
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, 
			НомерСтрокиНачало, ОбъектыПечати, Шапка.Документ);
		
	КонецЦикла; // Пока Шапка.Следующий()
	
	Возврат ТабличныйДокумент;
	
КонецФункции

Процедура ВывестиСальдоПоОстальнымДоговорам(НачальноеСальдоПоДоговорам, ОбластьДоговор, ОбластьДоговорИтоги, ТабличныйДокумент, Шапка)
	
	Для Каждого СтрокаДоговора Из НачальноеСальдоПоДоговорам Цикл
		// Выводим начальное сальдо по договору.
		ОбластьДоговор.Параметры.Заполнить(СтрокаДоговора);
		ТабличныйДокумент.Вывести(ОбластьДоговор);
		
		// Конечное сальдо равно начальному сальдо,
		// потому что по договору нет движений.
		КонечноеСальдоПоДоговору = Новый Структура;
		КонечноеСальдоПоДоговору.Вставить("КонОстатокПоДоговоруДт",      СтрокаДоговора.НачОстатокПоДоговоруДт);
		КонечноеСальдоПоДоговору.Вставить("КонОстатокПоДоговоруКт",      СтрокаДоговора.НачОстатокПоДоговоруКт);
		КонечноеСальдоПоДоговору.Вставить("КонОстатокПоДоговоруДтКонтр", СтрокаДоговора.НачОстатокПоДоговоруКт);
		КонечноеСальдоПоДоговору.Вставить("КонОстатокПоДоговоруКтКонтр", СтрокаДоговора.НачОстатокПоДоговоруДт);
		
		// Выводим конечное сальдо по договору.
		ОбластьДоговорИтоги.Параметры.Заполнить(КонечноеСальдоПоДоговору);
		ТабличныйДокумент.Вывести(ОбластьДоговорИтоги);
	КонецЦикла;
	
КонецПроцедуры

Функция НачальноеСальдоПоДоговорам(Шапка)
	
	ЗапросОстаткиДоговоров = Новый Запрос;
	
	ФильтрСписокСчетов = Новый Массив();
	Для Каждого СтрокаСчета Из Шапка.Документ.СписокСчетов Цикл
		Если ЗначениеЗаполнено(СтрокаСчета.Счет) И СтрокаСчета.УчаствуетВРасчетах Тогда
			ФильтрСписокСчетов.Добавить(СтрокаСчета.Счет);
		КонецЕсли;
	КонецЦикла;
	
	ТаблицаДоговоров = Шапка.Документ.ПоДаннымОрганизации.Выгрузить(,"Договор");
	ТаблицаДоговоров.Свернуть("Договор");
	МассивДоговоров = ТаблицаДоговоров.ВыгрузитьКолонку("Договор");
	ВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	
	// Дополним массив договорами из табличной части контрагента.
	ТаблицаДоговоровКонтрагента = Шапка.Документ.ПоДаннымКонтрагента.Выгрузить(,"Договор");
	ТаблицаДоговоровКонтрагента.Свернуть("Договор");
	МассивДоговоровКонтрагента = ТаблицаДоговоровКонтрагента.ВыгрузитьКолонку("Договор");
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивДоговоров, МассивДоговоровКонтрагента, Истина);
	
	ЗапросОстаткиДоговоров.УстановитьПараметр("Организация",   Шапка.Организация);
	ЗапросОстаткиДоговоров.УстановитьПараметр("НачалоПериода", Шапка.ДатаНачала);
	ЗапросОстаткиДоговоров.УстановитьПараметр("СчетаРасчета",  ФильтрСписокСчетов);
	ЗапросОстаткиДоговоров.УстановитьПараметр("Контрагент",    Шапка.Контрагент);
	ЗапросОстаткиДоговоров.УстановитьПараметр("Договоры",      МассивДоговоров);
	ЗапросОстаткиДоговоров.УстановитьПараметр("Валюта",
		?(Шапка.ВалютаДокумента = ВалютаРегламентированногоУчета, Неопределено, Шапка.ВалютаДокумента));
	Если Шапка.ДоговорКонтрагентаВШапкеЭтоГруппа Тогда
		ЗапросОстаткиДоговоров.УстановитьПараметр("ГруппаДоговоров", Шапка.ДоговорКонтрагентаВШапке);
	Иначе
		ЗапросОстаткиДоговоров.УстановитьПараметр("ГруппаДоговоров", Неопределено);
	КонецЕсли;
	ЗапросОстаткиДоговоров.УстановитьПараметр("Договоры",      МассивДоговоров);
	ЗапросОстаткиДоговоров.УстановитьПараметр("ГоловнаяОрганизация",
		ОбщегоНазначенияБПВызовСервераПовтИсп.ГоловнаяОрганизация(Шапка.Организация));
	ЗапросОстаткиДоговоров.УстановитьПараметр("АналитикаРасчетов",
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры));
	ЗапросОстаткиДоговоров.УстановитьПараметр("АктСверкиВВалюте",
		Шапка.ВалютаДокумента <> ВалютаРегламентированногоУчета);
		
	ЗапросОстаткиДоговоров.Текст = 
	"ВЫБРАТЬ
	|	Хозрасчетный.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ СчетаРасчета
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.Ссылка В ИЕРАРХИИ(&СчетаРасчета)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДоговорыКонтрагентов.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ОстальныеДоговоры
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|ГДЕ
	|	ДоговорыКонтрагентов.Владелец = &Контрагент
	|	И НЕ ДоговорыКонтрагентов.Ссылка В (&Договоры)
	|	И (&ГруппаДоговоров = НЕОПРЕДЕЛЕНО
	|			ИЛИ ДоговорыКонтрагентов.Ссылка В ИЕРАРХИИ (&ГруппаДоговоров))
	|	И ДоговорыКонтрагентов.ЭтоГруппа = ЛОЖЬ
	|	И ДоговорыКонтрагентов.Организация = &ГоловнаяОрганизация
	|	И (&Валюта = Неопределено ИЛИ ДоговорыКонтрагентов.ВалютаВзаиморасчетов = &Валюта)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ХозрасчетныйОстатки.Субконто1 КАК Договор,
	|	ВЫБОР
	|		КОГДА &АктСверкиВВалюте
	|			ТОГДА ХозрасчетныйОстатки.ВалютнаяСуммаОстатокДт
	|		ИНАЧЕ ХозрасчетныйОстатки.СуммаОстатокДт
	|	КОНЕЦ КАК НачОстатокПоДоговоруДт,
	|	ВЫБОР
	|		КОГДА &АктСверкиВВалюте
	|			ТОГДА ХозрасчетныйОстатки.ВалютнаяСуммаОстатокКт
	|		ИНАЧЕ ХозрасчетныйОстатки.СуммаОстатокКт
	|	КОНЕЦ КАК НачОстатокПоДоговоруКт
	|ПОМЕСТИТЬ ОстаткиПоДоговорамАкта
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			&НачалоПериода,
	|			Счет В
	|				(ВЫБРАТЬ
	|					СчетаРасчета.Ссылка
	|				ИЗ
	|					СчетаРасчета КАК СчетаРасчета),
	|			&АналитикаРасчетов,
	|			Организация = &Организация
	|				И Субконто1 В (&Договоры)) КАК ХозрасчетныйОстатки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ХозрасчетныйОстатки.Субконто1 КАК Договор,
	|	ВЫБОР
	|		КОГДА &АктСверкиВВалюте
	|			ТОГДА ХозрасчетныйОстатки.ВалютнаяСуммаОстатокДт
	|		ИНАЧЕ ХозрасчетныйОстатки.СуммаОстатокДт
	|	КОНЕЦ КАК НачОстатокПоДоговоруДт,
	|	ВЫБОР
	|		КОГДА &АктСверкиВВалюте
	|			ТОГДА ХозрасчетныйОстатки.ВалютнаяСуммаОстатокКт
	|		ИНАЧЕ ХозрасчетныйОстатки.СуммаОстатокКт
	|	КОНЕЦ КАК НачОстатокПоДоговоруКт
	|ПОМЕСТИТЬ ОстаткиПоОстальнымДоговорам
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			&НачалоПериода,
	|			Счет В
	|				(ВЫБРАТЬ
	|					СчетаРасчета.Ссылка
	|				ИЗ
	|					СчетаРасчета КАК СчетаРасчета),
	|			&АналитикаРасчетов,
	|			Организация = &Организация
	|				И Субконто1 В
	|					(ВЫБРАТЬ
	|						ОстальныеДоговоры.Ссылка
	|					ИЗ
	|						ОстальныеДоговоры КАК ОстальныеДоговоры)) КАК ХозрасчетныйОстатки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОстаткиПоДоговорамАкта.Договор КАК Договор,
	|	СУММА(ОстаткиПоДоговорамАкта.НачОстатокПоДоговоруДт) КАК НачОстатокПоДоговоруДт,
	|	СУММА(ОстаткиПоДоговорамАкта.НачОстатокПоДоговоруКт) КАК НачОстатокПоДоговоруКт
	|ИЗ
	|	ОстаткиПоДоговорамАкта КАК ОстаткиПоДоговорамАкта
	|
	|СГРУППИРОВАТЬ ПО
	|	ОстаткиПоДоговорамАкта.Договор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОстаткиПоОстальнымДоговорам.Договор КАК Договор,
	|	СУММА(ОстаткиПоОстальнымДоговорам.НачОстатокПоДоговоруДт) КАК НачОстатокПоДоговоруДт,
	|	СУММА(ОстаткиПоОстальнымДоговорам.НачОстатокПоДоговоруКт) КАК НачОстатокПоДоговоруКт
	|ИЗ
	|	ОстаткиПоОстальнымДоговорам КАК ОстаткиПоОстальнымДоговорам
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|		ПО ОстаткиПоОстальнымДоговорам.Договор = ДоговорыКонтрагентов.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ОстаткиПоОстальнымДоговорам.Договор,
	|	ДоговорыКонтрагентов.Наименование
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДоговорыКонтрагентов.Наименование";
	РезультатЗапроса = ЗапросОстаткиДоговоров.ВыполнитьПакет();
	
	НачальноеСальдоПоДоговорам = Новый Структура;
	НачальноеСальдоПоДоговорам.Вставить("ПоДоговорамАкта", РезультатЗапроса[4].Выгрузить());
	НачальноеСальдоПоДоговорам.Вставить("ПоОстальнымДоговорам", РезультатЗапроса[5].Выгрузить());

	Возврат НачальноеСальдоПоДоговорам;
	
КонецФункции

Функция НовыйСтруктураДокумента(ПоДаннымКонтрагента = Ложь)

	СтруктураДокумента = Новый Структура;
	Если ПоДаннымКонтрагента Тогда
		Суффикс = "Контр";
	Иначе
		Суффикс = "";
	КонецЕсли;
	СтруктураДокумента.Вставить("Дата" + Суффикс);
	СтруктураДокумента.Вставить("Представление" + Суффикс);
	СтруктураДокумента.Вставить("Регистратор"   + Суффикс);
	СтруктураДокумента.Вставить("СуммаОборотДт" + Суффикс);
	СтруктураДокумента.Вставить("СуммаОборотКт" + Суффикс);
	
	Возврат СтруктураДокумента;
	
КонецФункции

Функция РезультатСверки(Шапка, ОстатокНаКонец, Организация, Контрагент,КодЯзыкаПечать)
	ШаблонРезультатСверки = НСтр("ru='на [ДатаСверки] задолженность [Заключение].';uk='на [ДатаСверки] заборгованість [Заключение].'",КодЯзыкаПечать);
	ПараметрыИтогСверки = Новый Структура;
	ПараметрыИтогСверки.Вставить("ДатаСверки", Формат(Шапка.ДатаОкончания, "ДЛФ=D"));
	ПараметрыИтогСверки.Вставить("Заключение", НСтр("ru='отсутствует';uk='відсутня'",КодЯзыкаПечать));
	
	Если ОстатокНаКонец <> 0 Тогда
		ШаблонЗаключение = НСтр("ru='в пользу [Представитель] [СуммаЦифрами] [Валюта] ([СуммаПрописью])';uk='на користь [Представитель] [СуммаЦифрами] [Валюта] ([СуммаПрописью])'",КодЯзыкаПечать);
		ПараметрыЗаключение = Новый Структура("Представитель, СуммаЦифрами, Валюта, СуммаПрописью");
		ПараметрыЗаключение.Валюта = Шапка.ВалютаДокумента;
		Если ОстатокНаКонец > 0 Тогда
			ПараметрыЗаключение.Представитель = Организация;
			Множитель = 1;
		Иначе
			ПараметрыЗаключение.Представитель = Контрагент;
			Множитель = -1;
		КонецЕсли;
		
		ПараметрыЗаключение.СуммаЦифрами = Формат(Множитель * ОстатокНаКонец, "ЧЦ=21; ЧДЦ=2");
		ПараметрыЗаключение.СуммаПрописью = ОбщегоНазначенияБПВызовСервера.СформироватьСуммуПрописью(
			Множитель * ОстатокНаКонец, Шапка.ВалютаДокумента,КодЯзыкаПечать);
		ПараметрыИтогСверки.Заключение = 
			СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(ШаблонЗаключение, ПараметрыЗаключение);
	КонецЕсли;
	
	Возврат СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(ШаблонРезультатСверки, ПараметрыИтогСверки);
	
КонецФункции

Функция ДанныеПредставителяКонтрагента(Шапка)
	
	ДанныеПредставителяКонтрагента = Новый Структура("Должность, ФИОПолные, Представление");
	
	РеквизитыПредставителяКонтрагента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		Шапка.ПредставительКонтрагента, "Должность, Фамилия, Имя, Отчество");
	
	ДанныеПредставителяКонтрагента.Должность = РеквизитыПредставителяКонтрагента.Должность;
	ДанныеПредставителяКонтрагента.ФИОПолные = ОбщегоНазначенияБПВызовСервера.ПолучитьФамилиюИмяОтчество(
		РеквизитыПредставителяКонтрагента.Фамилия,
		РеквизитыПредставителяКонтрагента.Имя,
		РеквизитыПредставителяКонтрагента.Отчество,
		Ложь);
	
	ДанныеПредставителяКонтрагента.Представление = 
		ФизическиеЛицаКлиентСервер.ФамилияИнициалы(РеквизитыПредставителяКонтрагента);
	
	ЗаполнитьПустыеЗначенияДанныхПредставителя(ДанныеПредставителяКонтрагента);
	
	Возврат ДанныеПредставителяКонтрагента;
	
КонецФункции

Функция ДанныеПредставителяОрганизации(Шапка)
	
	ДанныеПредставителяОрганизации = Новый Структура("Должность, ФИОПолные, Представление");
	
	ОтветственныеЛицаОрганизации = ОтветственныеЛицаБППовтИсп.ОтветственныеЛица(Шапка.Организация, Шапка.ДатаАктаСверки);
	
	Если ОтветственныеЛицаОрганизации.Руководитель = Шапка.ПредставительОрганизации Тогда
		ДанныеФизЛица = ОтветственныеЛицаОрганизации.РуководительФИО;
		ДанныеПредставителяОрганизации.Должность = ОтветственныеЛицаОрганизации.РуководительДолжность;
		
	ИначеЕсли ОтветственныеЛицаОрганизации.ГлавныйБухгалтер = Шапка.ПредставительОрганизации Тогда
		ДанныеФизЛица = ОтветственныеЛицаОрганизации.ГлавныйБухгалтерФИО;
		ДанныеПредставителяОрганизации.Должность = ОтветственныеЛицаОрганизации.ГлавныйБухгалтерДолжность;
		
	Иначе
		// Если это не ответственное лицо, тогда получим его кадровые данные
		//ДанныеФизЛица = ОбщегоНазначенияБПВызовСервера.ДанныеФизЛица(
		//	Шапка.Организация,
		//	Шапка.ПредставительОрганизации,
		//	Шапка.ДатаАктаСверки);
		ДанныеФизЛица = ИНАГРО_ЗарплатаКадрыРасширенный.ДанныеФизЛица(
			Шапка.Организация, 
			Шапка.ПредставительОрганизации, 
			Шапка.ДатаАктаСверки);
		ДанныеПредставителяОрганизации.Должность = ДанныеФизЛица.Должность;

	КонецЕсли;
	
	ДанныеПредставителяОрганизации.Представление = ДанныеФизЛица.Представление;
	ДанныеПредставителяОрганизации.ФИОПолные = ОбщегоНазначенияБПВызовСервера.ПолучитьФамилиюИмяОтчество(
		ДанныеФизЛица.Фамилия,
		ДанныеФизЛица.Имя,
		ДанныеФизЛица.Отчество,
		Ложь);
	
	ЗаполнитьПустыеЗначенияДанныхПредставителя(ДанныеПредставителяОрганизации);
	
	Возврат ДанныеПредставителяОрганизации;
	
КонецФункции

Процедура ЗаполнитьПустыеЗначенияДанныхПредставителя(ДанныеПредставителя)

	Если НЕ ЗначениеЗаполнено(ДанныеПредставителя.Должность) Тогда
		ДанныеПредставителя.Должность = "________________";
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ДанныеПредставителя.ФИОПолные) Тогда
		ДанныеПредставителя.ФИОПолные = "_______________________";
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ДанныеПредставителя.Представление) Тогда
		ДанныеПредставителя.Представление = "_______________________";
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти 

#КонецЕсли

Функция НовыйТаблицаДокументов()
	
	ТаблицаДокументов = Новый ТаблицаЗначений;
	ТаблицаДокументов.Колонки.Добавить("Договор",       Новый ОписаниеТипов("СправочникСсылка.ДоговорыКонтрагентов"));
	ТаблицаДокументов.Колонки.Добавить("Дата",          ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
	ТаблицаДокументов.Колонки.Добавить("Документ",      Документы.ТипВсеСсылки());
	ТаблицаДокументов.Колонки.Добавить("Представление", ОбщегоНазначения.ОписаниеТипаСтрока(200));
	ТаблицаДокументов.Колонки.Добавить("Дебет",         ОбщегоНазначения.ОписаниеТипаЧисло(15,2));
	ТаблицаДокументов.Колонки.Добавить("Кредит",        ОбщегоНазначения.ОписаниеТипаЧисло(15,2));
	ТаблицаДокументов.Колонки.Добавить("Валюта",        Новый ОписаниеТипов("СправочникСсылка.Валюты"));
	ТаблицаДокументов.Колонки.Добавить("ВалютнаяСумма", ОбщегоНазначения.ОписаниеТипаЧисло(15,2));
	ТаблицаДокументов.Колонки.Добавить("ДатаВходящегоДокумента", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
	
	Возврат ТаблицаДокументов;
	
КонецФункции

// Функция возвращает соответствие представлений по данным контрагентам
// Используется для формирования таблицы ПоДаннымКонтрагента.
// 
// Возвращаемое значение:
//    СоответствиеПредставлений - Соответствие.
//
Функция СоответствиеПредставленийПоДаннымКонтрагента(КодЯзыкаПечать) Экспорт
	
	СоответствиеПредставлений = Новый Соответствие;
	СоответствиеПредставлений.Вставить(НСтр("ru='Передано';uk='Передано'",КодЯзыкаПечать),                НСтр("ru='Принято';uk='Прийнято'",КодЯзыкаПечать));
	СоответствиеПредставлений.Вставить(НСтр("ru='Принято';uk='Прийнято'",КодЯзыкаПечать),                 НСтр("ru='Передано';uk='Передано'",КодЯзыкаПечать));
	СоответствиеПредставлений.Вставить(НСтр("ru='Реализация';uk='Реалізація'",КодЯзыкаПечать),            НСтр("ru='Приход';uk='Надходження'",КодЯзыкаПечать));
	СоответствиеПредставлений.Вставить(НСтр("ru='Приход';uk='Надходження'",КодЯзыкаПечать),               НСтр("ru='Реализация';uk='Реалізація'",КодЯзыкаПечать));
	СоответствиеПредставлений.Вставить(НСтр("ru='Сторно: принято';uk='Сторно: прийняте'",КодЯзыкаПечать), НСтр("ru='Сторно: передано';uk='Сторно: передане'",КодЯзыкаПечать));
	СоответствиеПредставлений.Вставить(НСтр("ru='Сторно: передано';uk='Сторно: передане'",КодЯзыкаПечать),НСтр("ru='Сторно: принято';uk='Сторно: прийняте'",КодЯзыкаПечать));
	
	Возврат СоответствиеПредставлений;
	
КонецФункции

Функция ПолучитьМетаданныеДокумента(Знач ДокументСсылка, КэшМетаданных)
	
	МетаданныеДокумента = КэшМетаданных[ТипЗнч(ДокументСсылка)];
	
	Если МетаданныеДокумента = Неопределено Тогда
		МетаданныеДокумента = ДокументСсылка.Метаданные();
		КэшМетаданных.Вставить(ТипЗнч(ДокументСсылка), МетаданныеДокумента);
	КонецЕсли;
	
	Возврат МетаданныеДокумента;
	
КонецФункции

Функция ПредставлениеДокумента(СтруктураПараметров, Выборка, КэшМетаданных, КодЯзыкаПечать)
	
	ШаблонПредставлениеСтроки = "[Представление] ([НомерДокумента][ДатаДокумента])";
	ПараметрыПредставления = Новый Структура;
	ПараметрыПредставления.Вставить("Представление", "");
	ПараметрыПредставления.Вставить("НомерДокумента", "");
	ПараметрыПредставления.Вставить("ДатаДокумента", "");
	
	// Представление документа
	Если СтруктураПараметров.ВыводитьПолныеНазванияДокументов Тогда
		МетаданныеДокумента = ПолучитьМетаданныеДокумента(Выборка.Документ, КэшМетаданных);
		ПараметрыПредставления.Представление = МетаданныеДокумента.Представление();
	Иначе
		ПараметрыПредставления.Представление = 
			ПредставлениеХозяйственнойОперации(Выборка, КодЯзыкаПечать);
	КонецЕсли;
	Если (Выборка.НомерВходящегоДокумента = Неопределено) ИЛИ (Выборка.НомерВходящегоДокумента = "") Тогда
		Если (Выборка.НомерДокумента<>Неопределено) И (Выборка.НомерДокумента<>"") Тогда
			ПараметрыПредставления.НомерДокумента = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Выборка.НомерДокумента, Истина, Ложь);
		Иначе
			ПараметрыПредставления.НомерДокумента = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Выборка.Номер, Истина, Ложь);
		КонецЕсли;
	Иначе
		ПараметрыПредставления.НомерДокумента = Формат(Выборка.НомерВходящегоДокумента, "ЧН=_______");
	КонецЕсли;	
	
	// Дата документа
	Если (Выборка.ДатаВходящегоДокумента = Неопределено) ИЛИ (СтрНайти(Строка(Выборка.ДатаВходящегоДокумента),"0001"))>0 Тогда
		ДатаДокумента = Выборка.Дата;
	Иначе
		ДатаДокумента = Выборка.ДатаВходящегоДокумента;
	КонецЕсли;
	
	ТекстПередДатой = ?(ПараметрыПредставления.НомерДокумента = "", "", " " + НСтр("ru='от';uk='від'",КодЯзыкаПечать) + " ");
	ПараметрыПредставления.ДатаДокумента = ТекстПередДатой + Формат(ДатаДокумента, "ДЛФ=D; ДП='  .  .    '");
	
	Возврат СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(ШаблонПредставлениеСтроки, ПараметрыПредставления);
	
КонецФункции

Функция ПредставлениеХозяйственнойОперации(Выборка, КодЯзыкаПечать)
	
	Представление = "";
	Если Выборка.КорСчет.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.ПолученныеШтрафыПениНеустойки)
		 ИЛИ Выборка.КорСчет.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.ПризнанныеШтрафыПениНеустойки) Тогда
			Представление =  НСтр("ru='Санкции';uk='Санкції'",КодЯзыкаПечать);
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(Представление) Тогда
		// Строка уже отработана
	ИначеЕсли Выборка.Счет.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.КраткосрочныеЗаймы) 
	     или Выборка.Счет.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.ДолгосрочныеЗаймы) Тогда	
		
		Если Выборка.Дебет > 0 Тогда
			Представление = НСтр("ru='Займ';uk='Позика'",КодЯзыкаПечать);
		ИначеЕсли Выборка.Кредит > 0 Тогда
			Представление =  НСтр("ru='Возврат займа';uk='Повернення позики'",КодЯзыкаПечать);
		Иначе
			Представление =  НСтр("ru='Операции по займам';uk='Операції по позиках'",КодЯзыкаПечать);
		КонецЕсли;
	ИначеЕсли Выборка.Счет.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.РасчетыПоПретензиям) 
		  или Выборка.Счет = ПланыСчетов.Хозрасчетный.РасчетыПоПретензиям	Тогда
				Представление =  НСтр("ru='Претензия';uk='Претензія'",КодЯзыкаПечать);
	ИначеЕсли  ТипЗнч(Выборка.Документ) = Тип("ДокументСсылка.КорректировкаДолга") Тогда
			Представление =  НСтр("ru='Корректировка';uk='Коригування'",КодЯзыкаПечать);
	ИначеЕсли Выборка.КорСчет.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.Касса) 
		  или Выборка.КорСчет.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.СчетаВБанках)
		  ИЛИ Выборка.КорСчет.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.РасчетыСПодотчетнымиЛицами) Тогда
		Если (Выборка.Кредит >0) Тогда
			Если  Выборка.Счет.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.РасчетыСПоставщикамиИПодрядчиками)
				ИЛИ Выборка.Счет.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.РасчетыПоВыданнымАвансам) Тогда 
					Представление =  НСтр("ru='Возврат средств';uk='Повернення коштів'",КодЯзыкаПечать);
			ИначеЕсли Выборка.Счет.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.РасчетыСПокупателямиИЗаказчиками) 
				  ИЛИ Выборка.Счет.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.РасчетыПоАвансамПолученным) Тогда
					Представление = НСтр("ru='Оплата';uk='Оплата'",КодЯзыкаПечать);
			Иначе
				Представление =  НСтр("ru='Перевод средств';uk='Переведення  коштів'",КодЯзыкаПечать);
			КонецЕсли;
		ИначеЕсли (Выборка.Дебет >0) Тогда
			Если  Выборка.Счет.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.РасчетыСПоставщикамиИПодрядчиками)
					  ИЛИ Выборка.Счет.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.РасчетыСДругимиДебиторами)
					  ИЛИ Выборка.Счет.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.РасчетыСДругимиКредиторами)
					  ИЛИ Выборка.Счет.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.РасчетыПоВыданнымАвансам) Тогда
						Представление = НСтр("ru='Оплата';uk='Оплата'",КодЯзыкаПечать);
				ИначеЕсли Выборка.Счет.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.РасчетыСПокупателямиИЗаказчиками)
					  ИЛИ Выборка.Счет.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.РасчетыПоАвансамПолученным) Тогда
						Представление =  НСтр("ru='Возврат средств';uk='Повернення коштів'",КодЯзыкаПечать);
				Иначе
						Представление =  НСтр("ru='Перевод средств';uk='Переведення  коштів'",КодЯзыкаПечать);
						//Иначе   //ЕРП ЗИК
				КонецЕсли;
		КонецЕсли;
	ИначеЕсли Выборка.Счет.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.РасчетыСПоставщикамиИПодрядчиками) Тогда
		Если Выборка.Дебет <>0 Тогда
			Представление =  НСтр("ru='Возврат';uk='Повернення'",КодЯзыкаПечать);
		ИначеЕсли Выборка.Кредит <>0 Тогда
			Если (Выборка.Кредит <0) и (Выборка.КорСчет.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.НалоговыйКредитВсего)) Тогда
				Представление = НСтр("ru='Возврат';uk='Повернення'",КодЯзыкаПечать);
			Иначе
				Представление = НСтр("ru='Приход';uk='Надходження'",КодЯзыкаПечать);
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли Выборка.Счет.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.РасчетыСПокупателямиИЗаказчиками) Тогда
		Если Выборка.Дебет <>0 Тогда
			Представление = НСтр("ru='Реализация';uk='Реалізація'",КодЯзыкаПечать);
		ИначеЕсли (Выборка.Кредит <>0) Тогда
			Представление =  НСтр("ru='Возврат';uk='Повернення'",КодЯзыкаПечать);
		КонецЕсли;
	ИначеЕсли Выборка.Счет.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.РасчетыСДругимиДебиторами)
		  ИЛИ Выборка.Счет.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.РасчетыСДругимиКредиторами) Тогда
		Если Выборка.Дебет <>0 Тогда
			Если Выборка.КорСчет=ПланыСчетов.Хозрасчетный.ТараПодТоварами Тогда
				Представление =  НСтр("ru='Возврат';uk='Повернення'",КодЯзыкаПечать);
			Иначе
				Представление =  НСтр("ru='Реализация';uk='Реалізація'",КодЯзыкаПечать);
			КонецЕсли;
		ИначеЕсли Выборка.Кредит <>0 Тогда
	  		Если Выборка.КорСчет.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.ВычетыИзДохода)
				 ИЛИ Выборка.КорСчет = ПланыСчетов.Хозрасчетный.ВычетыИзДохода Тогда
				    Представление =  НСтр("ru='Возврат';uk='Повернення'",КодЯзыкаПечать);
			Иначе
					Представление = НСтр("ru='Приход';uk='Надходження'",КодЯзыкаПечать);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Если ПустаяСтрока(Представление)Тогда
		Если Выборка.Дебет > 0 Тогда
			Представление =  НСтр("ru='Принято';uk='Прийнято'",КодЯзыкаПечать);
		ИначеЕсли Выборка.Дебет < 0 Тогда
			Представление = НСтр("ru='Сторно: принято';uk='Сторно: прийняте'",КодЯзыкаПечать);
		ИначеЕсли Выборка.Кредит > 0 Тогда
			Представление = НСтр("ru='Передано';uk='Передано'",КодЯзыкаПечать);
		Иначе
			Представление = НСтр("ru='Сторно: передано';uk='Сторно: передане'",КодЯзыкаПечать);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Представление;
КонецФункции

Функция МассивДоговоров(Договор)

	Если НЕ ЗначениеЗаполнено(Договор) Тогда
		МассивДоговоров = Новый Массив;
	ИначеЕсли НЕ Договор.ЭтоГруппа Тогда
		МассивДоговоров = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Договор);
	Иначе
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ДоговорКонтрагента", Договор);
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ДоговорыКонтрагентов.Ссылка КАК Договор
		|ИЗ
		|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
		|ГДЕ
		|	ДоговорыКонтрагентов.Ссылка В ИЕРАРХИИ(&ДоговорКонтрагента)";
		ТаблицаДоговоров = Запрос.Выполнить().Выгрузить();
		МассивДоговоров = ТаблицаДоговоров.ВыгрузитьКолонку("Договор");
	КонецЕсли;
	
	Возврат МассивДоговоров;
	
КонецФункции

Процедура ДополнитьТаблицуВалютнойСуммой(ТаблицаПоДаннымОрганизации, СтруктураПараметров)
	
	Если СтруктураПараметров.ВалютаДокумента = СтруктураПараметров.ВалютаРегламентированногоУчета 
		И НЕ СтруктураПараметров.ВыводитьПолныеНазванияДокументов Тогда
		
		ТаблицаПоДаннымОрганизации.Свернуть(
			"Дата,ДатаВходящегоДокумента,Документ,Представление,Договор,Валюта",
			"Дебет, Кредит, ВалютнаяСумма");
		
		Для Каждого СтрокаТаблицы Из ТаблицаПоДаннымОрганизации Цикл
			Если СтрокаТаблицы.ВалютнаяСумма = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			ШаблонСтрокиСВалютнойСуммой = "[Представление] ([ВалютнаяСумма] [Валюта])";
			ПараметрыСтроки = Новый Структура;
			ПараметрыСтроки.Вставить("Представление", СтрокаТаблицы.Представление);
			ПараметрыСтроки.Вставить("ВалютнаяСумма", 0);
			ПараметрыСтроки.Вставить("Валюта",        СтрокаТаблицы.Валюта);
			
			Если СтрокаТаблицы.ВалютнаяСумма > 0 Тогда
				ПараметрыСтроки.ВалютнаяСумма = Формат(СтрокаТаблицы.ВалютнаяСумма, "ЧЦ=15; ЧДЦ=2");
			Иначе
				Множитель = ?((СтрокаТаблицы.Дебет + СтрокаТаблицы.Кредит) > 0, -1, 1);
				ПараметрыСтроки.ВалютнаяСумма = Формат(Множитель * СтрокаТаблицы.ВалютнаяСумма, "ЧЦ=15; ЧДЦ=2");
			КонецЕсли;
			СтрокаТаблицы.Представление = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(
				ШаблонСтрокиСВалютнойСуммой,
				ПараметрыСтроки);
		КонецЦикла;
		
	Иначе
		ТаблицаПоДаннымОрганизации.Свернуть("Дата,ДатаВходящегоДокумента,Документ,Представление,Договор","Дебет, Кредит");
	КонецЕсли;
	
КонецПроцедуры

Функция ТаблицаПоДаннымКонтрагента(ТаблицаПоДаннымОрганизации,КодЯзыкаПечать,СтруктураПараметров)
	
	ТаблицаПоДаннымКонтрагента = НовыйТаблицаДокументов();
	
	Для Каждого СтрокаПоДаннымОрганизации Из ТаблицаПоДаннымОрганизации Цикл
		СтрокаПоДаннымКонтрагента = ТаблицаПоДаннымКонтрагента.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаПоДаннымКонтрагента, СтрокаПоДаннымОрганизации);
		Если НЕ СтруктураПараметров.ВыводитьПолныеНазванияДокументов Тогда
			СтрокаПоДаннымКонтрагента.Представление =
				ПредставлениеДокументаПоДаннымКонтрагента(СтрокаПоДаннымОрганизации.Представление,КодЯзыкаПечать);
		КонецЕсли;	
		СтрокаПоДаннымКонтрагента.Дебет  = СтрокаПоДаннымОрганизации.Кредит;
		СтрокаПоДаннымКонтрагента.Кредит = СтрокаПоДаннымОрганизации.Дебет;
		СтрокаПоДаннымКонтрагента.Дата   = ?(ЗначениеЗаполнено(СтрокаПоДаннымОрганизации.ДатаВходящегоДокумента),
			СтрокаПоДаннымОрганизации.ДатаВходящегоДокумента,
			СтрокаПоДаннымОрганизации.Дата);
	КонецЦикла;
	
	Возврат ТаблицаПоДаннымКонтрагента;
	
КонецФункции

Функция ПредставлениеДокументаПоДаннымКонтрагента(ПредставлениеДокумента,КодЯзыкаПечать) Экспорт
	
	Представление = СокрЛП(ПредставлениеДокумента);
	Для Каждого Соответствие Из СоответствиеПредставленийПоДаннымКонтрагента(КодЯзыкаПечать) Цикл
		Если СтрНачинаетсяС(Представление, Соответствие.Ключ) Тогда
			Представление = СтрЗаменить(Представление, Соответствие.Ключ, Соответствие.Значение);
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Представление;
	
КонецФункции

Функция ПодготовитьЗапрос(СтруктураПараметров)

	МассивДоговоров = МассивДоговоров(СтруктураПараметров.ДоговорКонтрагента);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ДатаНачала",                            СтруктураПараметров.ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания",                         СтруктураПараметров.ДатаОкончания);
	Запрос.УстановитьПараметр("Организация",                           СтруктураПараметров.Организация);
	Запрос.УстановитьПараметр("МассивКонтрагентов",                    СтруктураПараметров.Контрагент);
	Запрос.УстановитьПараметр("МассивДоговоров",                       МассивДоговоров);
	Запрос.УстановитьПараметр("Валюта",                                СтруктураПараметров.Валюта);
	Запрос.УстановитьПараметр("ФильтрСписокСчетов",                    СтруктураПараметров.ФильтрСписокСчетов);
	Запрос.УстановитьПараметр("АналитикаРасчетов",                     СтруктураПараметров.АналитикаРасчетов);
	Запрос.УстановитьПараметр("ДоговорКонтрагента",                    СтруктураПараметров.ДоговорКонтрагента);
	Запрос.УстановитьПараметр("РазбитьПоДоговорам",                    СтруктураПараметров.РазбитьПоДоговорам);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Хозрасчетный.Ссылка КАК Счет
	|ПОМЕСТИТЬ ФильтрСписокСчетов
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.Ссылка В ИЕРАРХИИ(&ФильтрСписокСчетов)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Счет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА &Валюта = НЕОПРЕДЕЛЕНО
	|			ТОГДА ХозрасчетныйОстаткиНаНачало.СуммаОстаток
	|		ИНАЧЕ ХозрасчетныйОстаткиНаНачало.ВалютнаяСуммаОстаток
	|	КОНЕЦ КАК ОстатокНаНачало
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			&ДатаНачала,
	|			Счет В
	|				(ВЫБРАТЬ
	|					ФильтрСписокСчетов.Счет
	|				ИЗ
	|					ФильтрСписокСчетов),
	|			&АналитикаРасчетов,
	|			Организация = &Организация
	|				И ВЫБОР
	|					КОГДА &Валюта = НЕОПРЕДЕЛЕНО
	|						ТОГДА ИСТИНА
	|					ИНАЧЕ Валюта = &Валюта
	|				КОНЕЦ
	|				И Субконто1 В (&МассивКонтрагентов)
	|				И ВЫБОР
	|					КОГДА &ДоговорКонтрагента = НЕОПРЕДЕЛЕНО
	|						ТОГДА ИСТИНА
	|					ИНАЧЕ Субконто2 В (&МассивДоговоров)
	|				КОНЕЦ) КАК ХозрасчетныйОстаткиНаНачало
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ХозрасчетныйОбороты.Период КАК Дата,
	|	ДанныеПервичныхДокументов.НомерРегистратора КАК Номер,
	|	ХозрасчетныйОбороты.Регистратор КАК Документ,
	|	ХозрасчетныйОбороты.Субконто2 КАК Договор,
	|	ВЫБОР
	|		КОГДА &Валюта = НЕОПРЕДЕЛЕНО
	|			ТОГДА ХозрасчетныйОбороты.СуммаОборотДт
	|		ИНАЧЕ ХозрасчетныйОбороты.ВалютнаяСуммаОборотДт
	|	КОНЕЦ КАК Дебет,
	|	ВЫБОР
	|		КОГДА &Валюта = НЕОПРЕДЕЛЕНО
	|			ТОГДА ХозрасчетныйОбороты.СуммаОборотКт
	|		ИНАЧЕ ХозрасчетныйОбороты.ВалютнаяСуммаОборотКт
	|	КОНЕЦ КАК Кредит,
	|	ЕСТЬNULL(ДанныеПервичныхДокументов.Номер, НЕОПРЕДЕЛЕНО) КАК НомерВходящегоДокумента,
	|	ЕСТЬNULL(ДанныеПервичныхДокументов.Дата, НЕОПРЕДЕЛЕНО) КАК ДатаВходящегоДокумента,
	|	ЕСТЬNULL(ХозрасчетныйОбороты.Регистратор.НомерОрдера, НЕОПРЕДЕЛЕНО) КАК НомерДокумента,
	|	ХозрасчетныйОбороты.КорСчет,
	|	ХозрасчетныйОбороты.КорСубконто1,
	|	ХозрасчетныйОбороты.КорСубконто2,
	|	ХозрасчетныйОбороты.КорСубконто3,
	|	ХозрасчетныйОбороты.Валюта,
	|	ХозрасчетныйОбороты.ВалютнаяСуммаОборот КАК ВалютнаяСумма,
	|	ХозрасчетныйОбороты.Счет
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(
	|			&ДатаНачала,
	|			&ДатаОкончания,
	|			Регистратор,
	|			Счет В
	|				(ВЫБРАТЬ
	|					ФильтрСписокСчетов.Счет
	|				ИЗ
	|					ФильтрСписокСчетов),
	|			&АналитикаРасчетов,
	|			Организация = &Организация
	|				И ВЫБОР
	|					КОГДА &Валюта = НЕОПРЕДЕЛЕНО
	|						ТОГДА ИСТИНА
	|					ИНАЧЕ Валюта = &Валюта
	|				КОНЕЦ
	|				И Субконто1 В (&МассивКонтрагентов)
	|				И ВЫБОР
	|					КОГДА &ДоговорКонтрагента = НЕОПРЕДЕЛЕНО
	|						ТОГДА ИСТИНА
	|					ИНАЧЕ Субконто2 В (&МассивДоговоров)
	|				КОНЕЦ,
	|			,
	|			) КАК ХозрасчетныйОбороты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПервичныхДокументов КАК ДанныеПервичныхДокументов
	|		ПО (ДанныеПервичныхДокументов.Организация = &Организация)
	|			И ХозрасчетныйОбороты.Регистратор = ДанныеПервичныхДокументов.Документ
	|ГДЕ
	|	ВЫБОР
	|			КОГДА ХозрасчетныйОбороты.КорСчет В
	|					(ВЫБРАТЬ
	|						ФильтрСписокСчетов.Счет
	|					ИЗ
	|						ФильтрСписокСчетов)
	|				ТОГДА ВЫБОР
	|						КОГДА &ДоговорКонтрагента = НЕОПРЕДЕЛЕНО
	|							ТОГДА ВЫБОР
	|									КОГДА &РазбитьПоДоговорам
	|										ТОГДА НЕ ХозрасчетныйОбороты.КорСубконто2 = ХозрасчетныйОбороты.Субконто2
	|									ИНАЧЕ НЕ ХозрасчетныйОбороты.КорСубконто1 В (&МассивКонтрагентов)
	|								КОНЕЦ
	|						ИНАЧЕ НЕ(ХозрасчетныйОбороты.КорСубконто1 В (&МассивКонтрагентов)
	|									И ХозрасчетныйОбороты.КорСубконто2 = ХозрасчетныйОбороты.Субконто2)
	|					КОНЕЦ
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|	И НЕ(ВЫБОР
	|					КОГДА &Валюта = НЕОПРЕДЕЛЕНО
	|						ТОГДА ХозрасчетныйОбороты.СуммаОборотДт
	|					ИНАЧЕ ХозрасчетныйОбороты.ВалютнаяСуммаОборотДт
	|				КОНЕЦ = 0
	|				И ВЫБОР
	|					КОГДА &Валюта = НЕОПРЕДЕЛЕНО
	|						ТОГДА ХозрасчетныйОбороты.СуммаОборотКт
	|					ИНАЧЕ ХозрасчетныйОбороты.ВалютнаяСуммаОборотКт
	|				КОНЕЦ = 0)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата,
	|	Документ";
	//
	//|   Дебет";
	//
	Возврат Запрос;
КонецФункции

Процедура ПроверитьДанныеСтроки(НоваяСтрока, Выборка)
	//проверят данные строки: может это на самом деле сторно НДС
	Если (ТипЗнч(Выборка.Документ) = Тип("ДокументСсылка.ВозвратТоваровПоставщику")) 
		и (Выборка.КорСчет = ПланыСчетов.Хозрасчетный.НалоговыйКредитНеподтвержденный)
		и (Выборка.Кредит<0) Тогда
			НоваяСтрока.Дебет = -Выборка.Кредит;
			НоваяСтрока.Кредит =0;
	КонецЕсли;
КонецПроцедуры

// Процедура подготавливает данные для табличных частей
// ПоДаннымОрганизации и ПоДаннымКонтрагента.
// 
// Параметры:
//    СтруктураПараметров - Структура - Структура с параметрами для заполнения.
//    АдресХранилища - Строка - Адрес во временном хранилище, куда будет помещен результат выполнения процедуры.
//
Процедура ПодготовитьДанныеДляЗаполнения(СтруктураПараметров, АдресХранилища) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	СтруктураДанныхЗаполнения = Новый Структура();
	СтруктураДанныхЗаполнения.Вставить("Успешно", Ложь);
	КодЯзыкаПечать = Локализация.ПолучитьЯзыкФормированияПечатныхФорм();
	
	// Подготовим переменные
	//СчетаИсключения             = СчетаИсключения();
	ТаблицаПоДаннымОрганизации = НовыйТаблицаДокументов();
	КэшМетаданных              = Новый Соответствие; // Используется для получения представления документов
	Запрос = ПодготовитьЗапрос(СтруктураПараметров);
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	// Остаток на начало
	ВыборкаОстатокНаНачало = РезультатЗапроса[1].Выбрать();
	ВыборкаОстатокНаНачало.Следующий();
	СтруктураДанныхЗаполнения.Вставить("ОстатокНаНачало", ВыборкаОстатокНаНачало.ОстатокНаНачало);
	
	// Первоначальное заполнение таблицы по данным организации
	Выборка = РезультатЗапроса[2].Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Выборка.Дебет = 0 И Выборка.Кредит = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = ТаблицаПоДаннымОрганизации.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		ПроверитьДанныеСтроки(НоваяСтрока, Выборка);
		НоваяСтрока.Представление = ПредставлениеДокумента(
			СтруктураПараметров,
			Выборка,
			КэшМетаданных,
			КодЯзыкаПечать);
			
	КонецЦикла;
	
	// Дополним таблицу валютной суммой
	ДополнитьТаблицуВалютнойСуммой(ТаблицаПоДаннымОрганизации, СтруктураПараметров);
	
	// Сортируем таблицу
	КолонкиДляСортировки = ?(СтруктураПараметров.РазбитьПоДоговорам, 
		"Договор, Дата, Документ, Представление",
		"Дата, Документ, Представление, Договор");
	ТаблицаПоДаннымОрганизации.Сортировать(КолонкиДляСортировки, Новый СравнениеЗначений);
	
	// Заполним возвращаемую структуру
	СтруктураДанныхЗаполнения.Вставить("ПоДаннымОрганизации", ТаблицаПоДаннымОрганизации);
	Если СтруктураПараметров.ЗаполнятьДанныеКонтрагента Тогда
		СтруктураДанныхЗаполнения.Вставить("ПоДаннымКонтрагента", ТаблицаПоДаннымКонтрагента(ТаблицаПоДаннымОрганизации,КодЯзыкаПечать,СтруктураПараметров));
	КонецЕсли;
	СтруктураДанныхЗаполнения.Успешно = Истина;
	ПоместитьВоВременноеХранилище(СтруктураДанныхЗаполнения, АдресХранилища);
	
КонецПроцедуры
