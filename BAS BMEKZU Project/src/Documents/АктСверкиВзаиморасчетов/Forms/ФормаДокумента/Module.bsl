#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПараметрыРазмещения = ПодключаемыеКоманды.ПараметрыРазмещения();
	ПараметрыРазмещения.КоманднаяПанель = Элементы.ГруппаВажныеКоманды;
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект, ПараметрыРазмещения);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	
	ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	
	Если Параметры.Ключ.Пустая() Тогда
		ПодготовитьФормуНаСервере();
	КонецЕсли;
	
	УправлениеФормой(ЭтаФорма);
	ИзменитьДоступностьПоСогласованиюСверки(ЭтаФорма);
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	ОтправкаПочтовыхСообщений.ПриСозданииНаСервере(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	ПодготовитьФормуНаСервере();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	УстановитьСостояниеДокумента();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДатаНачалаПриИзменении(Элемент)
	
	ПриИзмененииПериода();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаОкончанияПриИзменении(Элемент)
	
	ПриИзмененииПериода();
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	// Проверяем: нужно ли что-то обновлять:
	Если НЕ Объект.Организация = ТекущаяОрганизация Тогда
		
		Если Объект.ПоДаннымОрганизации.Количество() > 0 ИЛИ Объект.ПоДаннымКонтрагента.Количество() > 0 Тогда
		
			ОписаниеОповещения = Новый ОписаниеОповещения("ВопросПриИзмененииОрганизацииЗавершение", ЭтотОбъект);
			Текст = НСтр("ru='При изменении организации табличные части будут очищены. Продолжить?';uk='При зміні організації табличні частини будуть очищені. Продовжити?'");
			Режим = РежимДиалогаВопрос.ДаНет;
			ПоказатьВопрос(ОписаниеОповещения, Текст, Режим, 0, КодВозвратаДиалога.Да);
			
		Иначе
			// Отработку изменения передаем на сервер:
			ПриИзмененииОрганизацииСервер();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	// Проверяем: нужно ли что-то обновлять:
	Если НЕ Объект.Контрагент = ТекущийКонтрагент Тогда
		
		Если Объект.ПоДаннымОрганизации.Количество() > 0 ИЛИ Объект.ПоДаннымКонтрагента.Количество() > 0 Тогда
			
			ОписаниеОповещения = Новый ОписаниеОповещения("ВопросПриИзмененииКонтрагентаЗавершение", ЭтотОбъект);
			Текст = НСтр("ru='При изменении контрагента табличные части будут очищены. Продолжить?';uk='При зміні контрагента табличні частини будуть очищені. Продовжити?'");
			Режим = РежимДиалогаВопрос.ДаНет;
			ПоказатьВопрос(ОписаниеОповещения, Текст, Режим, 0, КодВозвратаДиалога.Да);
			
		Иначе
			// Отработку изменения передаем на сервер:
			ПриИзмененииКонтрагентаСервер();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорКонтрагентаПриИзменении(Элемент)
	
	// Проверяем: нужно ли что-то обновлять:
	Если НЕ Объект.ДоговорКонтрагента = ПараметрыДоговора.Ссылка Тогда
		
		Если Объект.ПоДаннымОрганизации.Количество() > 0 ИЛИ Объект.ПоДаннымКонтрагента.Количество() > 0 Тогда
		
			ОписаниеОповещения = Новый ОписаниеОповещения("ВопросПриИзмененииДоговораЗавершение", ЭтотОбъект);
			Текст = НСтр("ru='При изменении договора табличные части будут очищены. Продолжить?';uk='При зміні договору табличні частини будуть очищені. Продовжити?'");
			Режим = РежимДиалогаВопрос.ДаНет;
			ПоказатьВопрос(ОписаниеОповещения, Текст, Режим, 0, КодВозвратаДиалога.Да);
			
		Иначе
			// Отработку изменения передаем на сервер:
			ПриИзмененииДоговораСервер();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СверкаСогласованаПриИзменении(Элемент)
	
	ИзменитьДоступностьПоСогласованиюСверки(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура РазбитьПоДоговорамПриИзменении(Элемент)

	Если Объект.ПоДаннымОрганизации.Количество() > 0
		ИЛИ Объект.ПоДаннымКонтрагента.Количество() >0 Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ВопросРазбитьПоДоговорамЗавершение", ЭтотОбъект);
		Текст = НСтр("ru='При изменении флага ""Разбить по договорам"" табличные части будут очищены. Продолжить?';uk='При зміні прапору ""Розбить по договорам"" табличні частини будуть очищені. Продовжити?'");
		ПоказатьВопрос(ОписаниеОповещения, Текст, РежимДиалогаВопрос.ДаНет, 0, КодВозвратаДиалога.Да);
		
	Иначе
		Объект.ОстатокНаНачало = 0;
		ПересчитатьОстатки(ЭтотОбъект);
		УправлениеФормой(ЭтотОбъект);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВыводитьПолныеНазванияДокументовПриИзменении(Элемент)
	
	Если Объект.ПоДаннымОрганизации.Количество() > 0
		ИЛИ Объект.ПоДаннымКонтрагента.Количество() >0 Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ВопросВыводитьПолныеНазванияДокументовЗавершение", ЭтотОбъект);
		Текст = НСтр("ru='При изменении способа вывода названий документов табличные части будут очищены. Продолжить?';uk='При зміні способу виведення назв документів табличні частини будуть очищені. Продовжити?'");
		Режим = РежимДиалогаВопрос.ДаНет;
		ПоказатьВопрос(ОписаниеОповещения, Текст, Режим, 0, КодВозвратаДиалога.Да);
		
	Иначе
		Объект.ОстатокНаНачало = 0;
		ПересчитатьОстатки(ЭтотОбъект);
		УправлениеФормой(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицыФормыУслугиПоДаннымОрганизации

&НаКлиенте
Процедура ПоДаннымОрганизацииПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если НЕ ОтменаРедактирования Тогда
		ПересчитатьОстатки(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоДаннымОрганизацииПослеУдаления(Элемент)
	
	ПересчитатьОстатки(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоДаннымОрганизацииДокументПриИзменении(Элемент)
	
	ДанныеСтроки = Элементы.ПоДаннымОрганизации.ТекущиеДанные;
	ПриВыбореДокументаНаСервере(ДанныеСтроки.Документ, ДанныеСтроки.Дата, ДанныеСтроки.Договор);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицыФормыУслугиПоДаннымКонтрагента

&НаКлиенте
Процедура ПоДаннымКонтрагентаПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если НЕ ОтменаРедактирования Тогда
		ПересчитатьОстатки(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоДаннымКонтрагентаПослеУдаления(Элемент)
	ПересчитатьОстатки(ЭтотОбъект);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗаполнитьТолькоПоНашейОрганизации(Команда)

	Если Объект.ПоДаннымОрганизации.Количество() > 0 Тогда
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ЗаполнятьДанныеКонтрагента", Ложь);
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ВопросЗаполнитьПоДаннымУчетаЗавершение", ЭтотОбъект,ДополнительныеПараметры);
		Текст = НСтр("ru='Перед заполнением табличная часть будет очищена. Продолжить?';uk='Перед заповненням таблична частина буде очищена. Продовжити?'");
		Режим = РежимДиалогаВопрос.ДаНет;
		ПоказатьВопрос(ОписаниеОповещения, Текст, Режим, 0, КодВозвратаДиалога.Да);
		
	Иначе
		
		ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени("ЗаполнениеАктаСверкиВзаиморасчетов");
		ЗаполнитьДаннымиБухгалтерскогоУчетаНаКлиенте(Ложь);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоНашейОрганизацииИПоКонтрагенту(Команда)
	
	Если Объект.ПоДаннымОрганизации.Количество() > 0 Тогда
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ЗаполнятьДанныеКонтрагента", Истина);
		ОписаниеОповещения = Новый ОписаниеОповещения("ВопросЗаполнитьПоДаннымУчетаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		Текст = НСтр("ru='Перед заполнением табличные части будут очищены. Продолжить?';uk='Перед заповненням табличні частини будуть очищені. Продовжити?'");
		ПоказатьВопрос(ОписаниеОповещения, Текст, РежимДиалогаВопрос.ДаНет, 0, КодВозвратаДиалога.Да);
		
	Иначе
		
		ЗаполнитьДаннымиБухгалтерскогоУчетаНаКлиенте(Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДанныеКонтрагентаПоДаннымОрганизации(Команда)
	Если Объект.ПоДаннымКонтрагента.Количество() > 0 Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ВопросЗаполнитьДанныеКонтрагентаЗавершение", ЭтотОбъект);
		Текст = НСтр("ru='Перед заполнением табличная часть будет очищена. Продолжить?';uk='Перед заповненням таблична частина буде очищена. Продовжити?'");
		Режим = РежимДиалогаВопрос.ДаНет;
		ПоказатьВопрос(ОписаниеОповещения, Текст, Режим, 0, КодВозвратаДиалога.Да);
		
	Иначе
		
		ЗаполнитьДанныеКонтрагентаПоДаннымОрганизацииСервер();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЗаполнитьПоДаннымБухгалтерскогоУчета(ЗаполнятьДанныеКонтрагента)
	// проверим заполненность обязательных реквизитов
	Если НЕ ПроверитьЗаполнение() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура;
	
	СтруктураПараметров.Вставить("ДатаНачала",                    Объект.ДатаНачала);
	СтруктураПараметров.Вставить("ДатаОкончания",                 Новый Граница(КонецДня(Объект.ДатаОкончания), ВидГраницы.Включая));
	СтруктураПараметров.Вставить("Организация",                   Объект.Организация);
	СтруктураПараметров.Вставить("Контрагент",                    Объект.Контрагент);
	СтруктураПараметров.Вставить("ЗаполнятьДанныеКонтрагента",    ЗаполнятьДанныеКонтрагента);
	СтруктураПараметров.Вставить("Валюта", ?((Объект.ВалютаДокумента = ВалютаРегламентированногоУчета) ИЛИ (НЕ ЗначениеЗаполнено(Объект.ВалютаДокумента)), Неопределено, Объект.ВалютаДокумента));
	
	ФильтрСписокСчетов = Новый Массив();
	Для Каждого СтрокаСчета Из Объект.СписокСчетов Цикл
		Если ЗначениеЗаполнено(СтрокаСчета.Счет) И СтрокаСчета.УчаствуетВРасчетах Тогда
			ФильтрСписокСчетов.Добавить(СтрокаСчета.Счет);
		КонецЕсли;
	КонецЦикла;
	Если ФильтрСписокСчетов.Количество() = 0 Тогда
		ТекстОшибки = НСтр("ru='Не задан список счетов, по которым производится сверка.';uk='Не задано список рахунків,по яких виконується звірка'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, , , "Объект.СписокСчетов");
		Возврат Неопределено;
	КонецЕсли;
	
	СтруктураПараметров.Вставить("ФильтрСписокСчетов", ФильтрСписокСчетов);
	
	АналитикаРасчетов = Новый Массив();
	АналитикаРасчетов.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
	АналитикаРасчетов.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры);
	СтруктураПараметров.Вставить("АналитикаРасчетов", АналитикаРасчетов);
	
	СтруктураПараметров.Вставить("ДоговорКонтрагента", 
		?(НЕ ЗначениеЗаполнено(Объект.ДоговорКонтрагента), Неопределено, Объект.ДоговорКонтрагента));
		
	СтруктураПараметров.Вставить("ВыводитьПолныеНазванияДокументов", Объект.ВыводитьПолныеНазванияДокументов);
	СтруктураПараметров.Вставить("ВалютаДокумента", Объект.ВалютаДокумента);
	СтруктураПараметров.Вставить("РазбитьПоДоговорам", Объект.РазбитьПоДоговорам);
	СтруктураПараметров.Вставить("ВалютаРегламентированногоУчета", ВалютаРегламентированногоУчета);
	
	Если ЭтоАдресВременногоХранилища(АдресХранилищаСОшибками) Тогда
		УдалитьИзВременногоХранилища(АдресХранилищаСОшибками);
		АдресХранилищаСОшибками = "";
	КонецЕсли;
	
	АдресХранилищаСОшибками = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
	СтруктураПараметров.Вставить("АдресХранилищаСОшибками", АдресХранилищаСОшибками);
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания 	= "ЗаполнитьПоДаннымОрганизации";
	
	Результат = ДлительныеОперации.ВыполнитьВФоне(
		"Документы.АктСверкиВзаиморасчетов.ПодготовитьДанныеДляЗаполнения",
		СтруктураПараметров,
		ПараметрыВыполнения);
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьДаннымиБухгалтерскогоУчетаНаКлиенте(ЗаполнятьДанныеКонтрагента = Ложь)
	// СтандартныеПодсистемы.ОценкаПроизводительности
	УИДЗамераЗаполнения = ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Ложь, "ЗаполнениеАктаСверкиВзаиморасчетов");
	// СтандартныеПодсистемы.ОценкаПроизводительности
	
	Результат = ЗаполнитьПоДаннымБухгалтерскогоУчета(ЗаполнятьДанныеКонтрагента);
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ОповещениеОЗавершении = Новый ОписаниеОповещения("ЗаполнитьДаннымиБухгалтерскогоУчетаЗавершение", ЭтотОбъект);
	ДлительныеОперацииКлиент.ОжидатьЗавершение(Результат, ОповещениеОЗавершении, ПараметрыОжидания);
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДаннымиБухгалтерскогоУчетаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	РезультатВыполнения = ЗагрузитьПодготовленныеДанные(Результат);
	ПоказатьРезультатВыполненияЗадания(РезультатВыполнения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьРезультатВыполненияЗадания(РезультатВыполнения)

	Если НЕ РезультатВыполнения.Успешно Тогда
		ОбщегоНазначенияБПКлиент.ОткрытьФормуОшибокПерепроведения(ЭтотОбъект, АдресХранилищаСОшибками);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСчетамиПоУмолчанию(Команда)
	
	Если Объект.СписокСчетов.Количество()>0 Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ВопросЗаполнитьСчетамиПоУмолчаниюЗавершение", ЭтотОбъект);
		
		Текст = НСтр("ru='Перед заполнением табличная часть ""Счета учета расчетов"" будет очищена. Заполнить?';uk='Перед заповненням таблична частина ""Рахунки обліку розрахунків"" буде очищена. Заповнити?'");
		Режим = РежимДиалогаВопрос.ДаНет;
		
		ПоказатьВопрос(ОписаниеОповещения, Текст, Режим, 0, КодВозвратаДиалога.Да);
		
	Иначе
		// СписокСчетов будет заполнен вместе с таблицей-шаблоном
		ЗаполнитьСчетамиПоУмолчаниюНаСервере();
		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры


&НаСервере
Процедура ЗапомнитьТекущиеЗначенияРеквизитов()

	ТекущаяОрганизация 	 = Объект.Организация;
	ТекущийКонтрагент 	 = Объект.Контрагент;
	ТекущийПредставительКонтрагента = Объект.ПредставительКонтрагента;
	ТекущийПериод.ДатаНачала    = Объект.ДатаНачала;
	ТекущийПериод.ДатаОкончания = Объект.ДатаОкончания;
	ПроверитьПараметрыДоговора(Объект.ДоговорКонтрагента, ПараметрыДоговора);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСостояниеДокумента()
	
	СостояниеДокумента = ОбщегоНазначенияБП.СостояниеДокумента(Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьПериод(Команда)
	
	ПараметрыФормыВыбора = Новый Структура("НачалоПериода, КонецПериода", Объект.ДатаНачала, Объект.ДатаОкончания);
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыбратьПериодЗавершение", ЭтотОбъект);
	ОткрытьФорму("ОбщаяФорма.ВыборСтандартногоПериода", ПараметрыФормыВыбора, Элементы.ВыбратьПериод, , , , ОписаниеОповещения);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область УправлениеФормой

&НаКлиентеНаСервереБезКонтекста 
Процедура УправлениеФормой(Форма)

	Объект   = Форма.Объект;
	Элементы = Форма.Элементы;
	
	Элементы.ДоговорКонтрагента.Доступность = ЗначениеЗаполнено(Объект.Организация) 
		И ЗначениеЗаполнено(Объект.Контрагент)
		И НЕ Объект.СверкаСогласована;
	Элементы.РазбитьПоДоговорам.Доступность = НЕ ЗначениеЗаполнено(Объект.ДоговорКонтрагента) 
		ИЛИ Форма.ПараметрыДоговора.ЭтоГруппа;
		
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста 
Процедура ИзменитьДоступностьПоСогласованиюСверки(Форма)
	
	Элементы = Форма.Элементы;
	Объект = Форма.Объект;
	
	Элементы.Организация.Доступность			= НЕ Объект.СверкаСогласована;
	Элементы.Контрагент.Доступность				= НЕ Объект.СверкаСогласована;
	Элементы.ДоговорКонтрагента.Доступность		= НЕ Объект.СверкаСогласована;
	Элементы.ВалютаДокумента.Доступность		= НЕ Объект.СверкаСогласована;
	
	Элементы.ГруппаПериодСверки.Доступность		= НЕ Объект.СверкаСогласована;
	
	Элементы.ОстатокНаНачало.ТолькоПросмотр		= Объект.СверкаСогласована;
	
	Элементы.ПоДаннымКонтрагента.ТолькоПросмотр = Объект.СверкаСогласована;
	Элементы.ПоДаннымОрганизации.ТолькоПросмотр = Объект.СверкаСогласована;
	Элементы.СписокСчетов.ТолькоПросмотр 		= Объект.СверкаСогласована;

	Элементы.ВыводитьПолныеНазванияДокументов.Доступность 		= НЕ Объект.СверкаСогласована;
	Элементы.РазбитьПоДоговорам.Доступность                    = НЕ Объект.СверкаСогласована;
	
	Элементы.ПоДаннымКонтрагента.КоманднаяПанель.Доступность	= НЕ Объект.СверкаСогласована;
	Элементы.ПоДаннымОрганизации.КоманднаяПанель.Доступность	= НЕ Объект.СверкаСогласована;
	Элементы.СписокСчетов.КоманднаяПанель.Доступность			= НЕ Объект.СверкаСогласована;
	
КонецПроцедуры

&НаСервере
Процедура ПодготовитьФормуНаСервере()
	
	ПересчитатьОстатки(ЭтотОбъект);
	ЗапомнитьТекущиеЗначенияРеквизитов();
	УстановитьСостояниеДокумента();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиОписанияОповещения

&НаКлиенте
Процедура ВыбратьПериодЗавершение(РезультатВыбора, ДопПараметры) Экспорт
	
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Объект.ДатаНачала	 = РезультатВыбора.НачалоПериода;
	Объект.ДатаОкончания = РезультатВыбора.КонецПериода;
	
	ПриИзмененииПериода();
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросЗаполнитьПоДаннымУчетаЗавершение(Ответ, ДополнительныеПараметры) Экспорт

	Если Ответ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		Объект.ПоДаннымОрганизации.Очистить();
		Если ДополнительныеПараметры.ЗаполнятьДанныеКонтрагента Тогда
			Объект.ПоДаннымКонтрагента.Очистить();
		КонецЕсли;
		ЗаполнитьДаннымиБухгалтерскогоУчетаНаКлиенте(ДополнительныеПараметры.ЗаполнятьДанныеКонтрагента);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросЗаполнитьДанныеКонтрагентаЗавершение(Ответ, ДополнительныеПараметры) Экспорт

	Если Ответ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	//проверим заполненность обязательных реквизитов:
	Если Объект.ПоДаннымОрганизации.Количество()=0 Тогда
		ПоказатьПредупреждение(,НСтр("ru='Таблица ""По данным организации"" не заполнена!';uk='Таблиця ""За даними організації"" не заповнена!'"));
		ТекущийЭлемент = Элементы.ПоДаннымОрганизации;
	Иначе
		ЗаполнитьДанныеКонтрагентаПоДаннымОрганизацииСервер();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросЗаполнитьСчетамиПоУмолчаниюЗавершение(Ответ, ДополнительныеПараметры) Экспорт

	Если Ответ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		Объект.СписокСчетов.Очистить();
		
		// СписокСчетов будет заполнен вместе с таблицей-шаблоном
		ЗаполнитьСчетамиПоУмолчаниюНаСервере();
		Модифицированность = Истина;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВопросПриИзмененииОрганизацииЗавершение(Ответ, ДополнительныеПараметры) Экспорт

	Если Ответ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		// при отказе возвращаем предыдущие значения реквизитов:
		Объект.Организация = ТекущаяОрганизация;
		Объект.ДоговорКонтрагента = ПараметрыДоговора.Ссылка;
	Иначе
		// Отработку изменения передаем на сервер:
		ПриИзмененииОрганизацииСервер();
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура ВопросПриИзмененииКонтрагентаЗавершение(Ответ, ДополнительныеПараметры) Экспорт

	Если Ответ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		// при отказе возвращаем предыдущие значения реквизитов:
		Объект.Контрагент = ТекущийКонтрагент;
		Объект.ДоговорКонтрагента = ПараметрыДоговора.Ссылка;
		Объект.ПредставительКонтрагента = ТекущийПредставительКонтрагента;
	Иначе
		// Отработку изменения передаем на сервер:
		ПриИзмененииКонтрагентаСервер();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВопросПриИзмененииДоговораЗавершение(Ответ, ДополнительныеПараметры) Экспорт

	Если Ответ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		// при отказе возвращаем предыдущие значения реквизитов:
		Объект.Организация = ТекущаяОрганизация;
		Объект.ДоговорКонтрагента = ПараметрыДоговора.Ссылка;
	Иначе
		// Отработку изменения передаем на сервер:
		ПриИзмененииДоговораСервер();
	КонецЕсли;

КонецПроцедуры
&НаКлиенте
Процедура ВопросРазбитьПоДоговорамЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ОчиститьДанные(ЭтотОбъект);
		УправлениеФормой(ЭтотОбъект);
	Иначе
		Объект.РазбитьПоДоговорам = НЕ Объект.РазбитьПоДоговорам;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросВыводитьПолныеНазванияДокументовЗавершение(Ответ, ДополнительныеПараметры) Экспорт

	Если Ответ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Объект.ВыводитьПолныеНазванияДокументов = НЕ Объект.ВыводитьПолныеНазванияДокументов;
	Иначе
		Объект.ПоДаннымОрганизации.Очистить();
		Объект.ПоДаннымКонтрагента.Очистить();
		УправлениеФормой(ЭтаФорма);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВопросПриИзмененииПериодаЗавершение(Ответ, ДополнительныеПараметры) Экспорт

	Если Ответ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ТекущийПериод.ДатаНачала	 = Объект.ДатаНачала;
		ТекущийПериод.ДатаОкончания	 = Объект.ДатаОкончания;
		Объект.ПоДаннымОрганизации.Очистить();
		Объект.ПоДаннымКонтрагента.Очистить();
		ОчиститьДанные(ЭтотОбъект);
	Иначе
		Объект.ДатаНачала	 = ТекущийПериод.ДатаНачала;
		Объект.ДатаОкончания = ТекущийПериод.ДатаОкончания;
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ИзменениеРеквизитов

&НаСервере
Процедура ПриИзмененииОрганизацииСервер()
	
	// Выполняем общие действия для всех документов при изменении Организация.
	ЗаполнениеДокументов.ПриИзмененииЗначенияОрганизации(Объект, Пользователи.ТекущийПользователь());
	Если ТекущаяОрганизация <> Объект.Организация Тогда
		Объект.Номер = "";
	КонецЕсли;
	
	ТекущаяОрганизация = Объект.Организация;
	
	//договор очищается платформой автоматически. Пытаемся подставить другой договор:
	БухгалтерскийУчетПереопределяемый.УстановитьДоговорКонтрагента(Объект.ДоговорКонтрагента,
								Объект.Контрагент,
								Объект.Организация);
	//обновим текущее значение договора:
	ПроверитьПараметрыДоговора(Объект.ДоговорКонтрагента, ПараметрыДоговора);
	
	// очищаем табличные части документа:
	Объект.ПоДаннымОрганизации.Очистить();
	Объект.ПоДаннымКонтрагента.Очистить();
	ПересчитатьОстаткиНаСервере();
	
	//Изменяем видимость/доступность реквизитов:
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииКонтрагентаСервер()

	
	ТекущийКонтрагент = Объект.Контрагент;
	Объект.ПредставительКонтрагента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущийКонтрагент, "ОсновноеКонтактноеЛицо");
	ТекущийПредставительКонтрагента = Объект.ПредставительКонтрагента;
	
	//договор очищается платформой автоматически. Пытаемся подставить другой договор:
	БухгалтерскийУчетПереопределяемый.УстановитьДоговорКонтрагента(Объект.ДоговорКонтрагента,
								Объект.Контрагент,
								Объект.Организация);
	//обновим текущее значение договора:
	ПроверитьПараметрыДоговора(Объект.ДоговорКонтрагента, ПараметрыДоговора);
	Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента) И (НЕ ПараметрыДоговора.ЭтоГруппа) Тогда
		Если (НЕ ЗначениеЗаполнено(Объект.ВалютаДокумента)) Или (Объект.ВалютаДокумента<>ПараметрыДоговора.ВалютаДоговора) Тогда
			Объект.ВалютаДокумента=ПараметрыДоговора.ВалютаДоговора;
		КонецЕсли;
	КонецЕсли;
	// очищаем табличные части документа:
	Объект.ПоДаннымОрганизации.Очистить();
	Объект.ПоДаннымКонтрагента.Очистить();
	ПересчитатьОстаткиНаСервере();
	
	
	//Изменяем видимость/доступность реквизитов:
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаСервере
Процедура ПриИзмененииДоговораСервер()

	//Обновим текущее значение:
	ПроверитьПараметрыДоговора(Объект.ДоговорКонтрагента, ПараметрыДоговора);

	// очищаем табличные части документа:
	Объект.ПоДаннымОрганизации.Очистить();
	Объект.ПоДаннымКонтрагента.Очистить();
	ПересчитатьОстаткиНаСервере();

	Объект.ВалютаДокумента = Объект.ДоговорКонтрагента.ВалютаВзаиморасчетов;
	
	Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента) И НЕ ПараметрыДоговора.ЭтоГруппа Тогда
		Объект.РазбитьПоДоговорам = Ложь;
	КонецЕсли;

	//Изменяем видимость/доступность реквизитов:
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииПериода()
	
	Если (ТекущийПериод.ДатаНачала <> Объект.ДатаНачала
		ИЛИ ТекущийПериод.ДатаОкончания <> КонецДня(Объект.ДатаОкончания))
		И Объект.ПоДаннымОрганизации.Количество() > 0 Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ВопросПриИзмененииПериодаЗавершение", ЭтотОбъект);
		Текст = НСтр("ru='При изменении периода сверки табличная часть будет очищена. Изменить период?';uk='При зміні періоду звірки таблична частина буде очищена. Змінити період?'");
		ПоказатьВопрос(ОписаниеОповещения, Текст, РежимДиалогаВопрос.ДаНет, 0, КодВозвратаДиалога.Да);
		
	Иначе
		Объект.ОстатокНаНачало = 0;
		ПересчитатьОстатки(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПроверитьПараметрыДоговора(Договор, ПараметрыДоговора)

	Если ПараметрыДоговора <> Неопределено И ПараметрыДоговора.Ссылка = Договор Тогда
		Возврат;
	КонецЕсли; 
	
	Если ЗначениеЗаполнено(Договор) Тогда
		РеквизитыДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Договор, "ЭтоГруппа,ВалютаВзаиморасчетов,ВидДоговора");
		ПараметрыДоговора = Новый Структура("Ссылка, ЭтоГруппа", Договор, РеквизитыДоговора.ЭтоГруппа);
		Если НЕ ПараметрыДоговора.ЭтоГруппа Тогда
			ПараметрыДоговора.Вставить("ВалютаДоговора", РеквизитыДоговора.ВалютаВзаиморасчетов);
			ПараметрыДоговора.Вставить("ВидДоговора", РеквизитыДоговора.ВидДоговора);
		КонецЕсли; 
	Иначе 
		ПараметрыДоговора = Новый Структура("Ссылка, ЭтоГруппа", Договор, Ложь);
	КонецЕсли; 

	Если ЗначениеЗаполнено(Договор) И (НЕ ПараметрыДоговора.ЭтоГруппа) Тогда
		ПараметрыДоговора.Вставить("ДоступностьРазбивкиПоДоговорам", Ложь);
	Иначе
		ПараметрыДоговора.Вставить("ДоступностьРазбивкиПоДоговорам", Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПриВыбореДокументаНаСервере(ВыбранныйДокумент, ДатаВыбранногоДокумента, ДоговорВыбранногоДокумента)

	Если ЗначениеЗаполнено(ВыбранныйДокумент) Тогда
		Если ВыбранныйДокумент.Метаданные().Реквизиты.Найти("ДоговорКонтрагента") = Неопределено Тогда
			ДатаВыбранногоДокумента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВыбранныйДокумент, "Дата")
		Иначе
			ДанныеДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВыбранныйДокумент, "Дата,ДоговорКонтрагента");
			ДатаВыбранногоДокумента    = ДанныеДокумента.Дата;
			ДоговорВыбранногоДокумента = ДанныеДокумента.ДоговорКонтрагента;
		КонецЕсли; 
	КонецЕсли; 

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОчиститьДанные(Форма)
	
	Объект = Форма.Объект;
	
	Объект.ОстатокНаНачало = 0;
	Объект.ПоДаннымОрганизации.Очистить();
	Объект.ПоДаннымКонтрагента.Очистить();
	ПересчитатьОстатки(Форма);
	
КонецПроцедуры

#КонецОбласти

#Область ЗаполнениеДокумента

// Заполняет массив счетами, которые будут использоваться по умолчанию
//
// Параметры
//  Таблица	-	<ТаблицаЗначений> - реквизит формы "ТаблицаСчетовПоУмолчанию"
//
&НаСервере
Процедура ЗаполнитьСчетамиПоУмолчаниюНаСервере()

	ТаблицаСчетов = УчетВзаиморасчетов.ПолучитьТаблицуСчетовУчетаВзаиморасчетов(Истина,Ложь);
	ТаблицаСчетов.Колонки.СчетРасчетов.Имя = "Счет";
	ТаблицаСчетов.Колонки.Добавить("УчаствуетВРасчетах");
	ТаблицаСчетов.ЗаполнитьЗначения(Истина, "УчаствуетВРасчетах");
	Объект.СписокСчетов.Загрузить(ТаблицаСчетов);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПересчитатьОстатки(Форма)

	Объект = Форма.Объект;
	
	Форма.ОстатокНаКонец = Объект.ОстатокНаНачало
		+ Объект.ПоДаннымОрганизации.Итог("Дебет")
		- Объект.ПоДаннымОрганизации.Итог("Кредит");
		
	Форма.ОстатокНаНачалоКонтрагент = - Объект.ОстатокНаНачало;
	Форма.ОстатокНаКонецКонтрагент = Форма.ОстатокНаНачалоКонтрагент
		+ Объект.ПоДаннымКонтрагента.Итог("Дебет")
		- Объект.ПоДаннымКонтрагента.Итог("Кредит");
	
	Объект.Расхождение = Форма.ОстатокНаКонец + Форма.ОстатокНаКонецКонтрагент;
	Форма.РасхождениеКонтрагент = - Объект.Расхождение;
	
КонецПроцедуры

&НаСервере
Процедура ПересчитатьОстаткиНаСервере()

	ОстатокНаКонец = Объект.ОстатокНаНачало + Объект.ПоДаннымОрганизации.Итог("Дебет") -  Объект.ПоДаннымОрганизации.Итог("Кредит");
	ОстатокНаНачалоКонтрагент = - Объект.ОстатокНаНачало;
	
	ОстатокНаКонецКонтрагент = ОстатокНаНачалоКонтрагент + Объект.ПоДаннымКонтрагента.Итог("Дебет") -  Объект.ПоДаннымКонтрагента.Итог("Кредит");
	
	Если Объект.Расхождение <> ОстатокНаКонец + ОстатокНаКонецКонтрагент Тогда
		Объект.Расхождение = ОстатокНаКонец + ОстатокНаКонецКонтрагент;
	КонецЕсли; 
	Расхождение = Объект.Расхождение;
	РасхождениеКонтрагент = - Расхождение;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеКонтрагентаПоДаннымОрганизацииСервер()
	
	КодЯзыкаПечать = Локализация.ПолучитьЯзыкФормированияПечатныхФорм();
	ПоДаннымКонтрагента = Объект.ПоДаннымОрганизации.Выгрузить();
	
	ПоДаннымКонтрагента.Колонки.Дебет.Имя  = "КредитК";
	ПоДаннымКонтрагента.Колонки.Кредит.Имя = "Дебет";
	ПоДаннымКонтрагента.Колонки.КредитК.Имя= "Кредит";
	
	СоответствиеПредставлений = Документы.АктСверкиВзаиморасчетов.СоответствиеПредставленийПоДаннымКонтрагента(КодЯзыкаПечать);
	
	Для каждого СтрокаДвижений Из ПоДаннымКонтрагента Цикл
		Представление = СокрЛП(СтрокаДвижений.Представление);
		Для Каждого Соответствие Из СоответствиеПредставлений Цикл
			Если СтрНачинаетсяС(Представление, Соответствие.Ключ) Тогда
				Представление = СтрЗаменить(Представление, Соответствие.Ключ, Соответствие.Значение);
				Прервать;
			КонецЕсли;
		КонецЦикла;
		СтрокаДвижений.Представление = Представление;
	КонецЦикла;
	
	Объект.ПоДаннымКонтрагента.Загрузить(ПоДаннымКонтрагента);
	ПересчитатьОстатки(ЭтотОбъект);
	
КонецПроцедуры

// Заполнение таблицы "По данным организации" по данным бухгалтерского учета
&НаСервере
Функция ЗагрузитьПодготовленныеДанные(Результат)
	
	СтруктураДанных = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
	
	РезультатВыполнения = Новый Структура();
	РезультатВыполнения.Вставить("ЗаданиеВыполнено", Истина);
	РезультатВыполнения.Вставить("Успешно", Ложь);
	
	Если ТипЗнч(СтруктураДанных) <> Тип("Структура") Тогда
		Возврат РезультатВыполнения;
	КонецЕсли;
	
	РезультатВыполнения.Успешно = СтруктураДанных.Успешно;
	
	Если СтруктураДанных.Успешно Тогда
	
		Объект.ОстатокНаНачало = СтруктураДанных.ОстатокНаНачало;
		Объект.ПоДаннымОрганизации.Загрузить(СтруктураДанных.ПоДаннымОрганизации);
		Если СтруктураДанных.Свойство("ПоДаннымКонтрагента") Тогда
			Объект.ПоДаннымКонтрагента.Загрузить(СтруктураДанных.ПоДаннымКонтрагента);
		КонецЕсли;
		ПересчитатьОстатки(ЭтотОбъект);
	
	КонецЕсли;
	
	Возврат РезультатВыполнения;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункцииБСП

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

#КонецОбласти