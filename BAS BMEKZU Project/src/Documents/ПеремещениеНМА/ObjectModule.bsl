#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Процедура проверяет правильность заполнения реквизитов документа
//
Процедура ПроверкаРеквизитовТЧ(ТаблицаНМА,СтруктураШапкиДокумента,Отказ, Заголовок) Экспорт

	
	// Проверим соответствие организаций НМА и организации документа

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СписокНМА"     , ТаблицаНМА.ВыгрузитьКолонку("НематериальныйАктив"));
	Запрос.УстановитьПараметр("ВыбОрганизация", СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("Период"     , Новый Граница(МоментВремени(), ВидГраницы.Исключая));
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	МестонахождениеНМАБухгалтерскийУчет.Организация КАК Организация,
	|	НематериальныеАктивы.Код                           КАК Код,
	|	НематериальныеАктивы.Ссылка                        КАК НематериальныйАктив,
	|	Представление(НематериальныеАктивы.Ссылка)         КАК НематериальныйАктивПредставление
	|
	|ИЗ
	|	Справочник.НематериальныеАктивы КАК НематериальныеАктивы
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МестонахождениеНМАБухгалтерскийУчет.СрезПоследних(&Период, (НематериальныйАктив В(&СписокНМА) И Организация = &ВыбОрганизация)) КАК МестонахождениеНМАБухгалтерскийУчет
	|		ПО НематериальныеАктивы.Ссылка = МестонахождениеНМАБухгалтерскийУчет.НематериальныйАктив
	|
	|ГДЕ
	|	НематериальныеАктивы.Ссылка В(&СписокНМА) И
	|	НЕ НематериальныеАктивы.ЭтоГруппа И
	|	МестонахождениеНМАБухгалтерскийУчет.Организация ЕСТЬ NULL";
	Выборка = Запрос.Выполнить().Выбрать();

	Если Выборка.Количество() > 0 Тогда

		Отказ = Истина;

		Пока Выборка.Следующий() Цикл
			СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Бух.учет: Несоответствие НМА ""%1"" код.№ %2 и организации указанной в документе.';uk='Бух.облік: Невідповідність НМА ""%1"" код.№ %2 і організації вказаної в документі.'"), СокрЛП(Выборка.НематериальныйАктивПредставление), СокрЛП(Выборка.Код));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения);
		КонецЦикла;

	КонецЕсли;

КонецПроцедуры // ПроверкаРеквизитов()

// Выполняет движения по регистрам 
//
Процедура ДвиженияПоРегистрам(СтруктураШапкиДокумента, ТаблицаПоНМА,Отказ, Заголовок)

	ДатаДока = Дата;

	МестонахождениеНМАОрганизаций = Движения.МестонахождениеНМАБухгалтерскийУчет;

	Для каждого СтрокаТЧ Из ТаблицаПоНМА Цикл

		Движение = МестонахождениеНМАОрганизаций.Добавить();
	
		Движение.Период           		= ДатаДока;
		Движение.НематериальныйАктив 	= СтрокаТЧ.НематериальныйАктив;
		Движение.Организация      		= СтруктураШапкиДокумента.Организация;
		Движение.МОЛ              		= СтруктураШапкиДокумента.МОЛОрганизации;
		Движение.Местонахождение  		= СтруктураШапкиДокумента.ПодразделениеОрганизации;

	КонецЦикла;

КонецПроцедуры

// Процедура формирует структуру шапки документа и дополнительных полей.
//
Процедура ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента) Экспорт

	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента = ОбщегоНазначенияРед12.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	
КонецПроцедуры // ПодготовитьСтруктуруШапкиДокумента()

// Процедура формирует таблицы документа.
//
Процедура ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоНМА, Отказ, Заголовок) Экспорт
	
	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("НематериальныйАктив", "НематериальныйАктив");

	РезультатЗапросаПоНМА = ОбщегоНазначенияРед12.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "НематериальныеАктивы", СтруктураПолей);
	ТаблицаПоНМА          = РезультатЗапросаПоНМА.Выгрузить();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ
//

Процедура ЗаполнитьПоДокументуОснованию(Основание)

	// Заполним реквизиты из стандартного набора по документу основанию.
	ЗаполнениеДокументов.ЗаполнитьПоОснованию(ЭтотОбъект, Основание);

	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ИнвентаризацияНМА") Тогда
		Для каждого ТекСтрокаНМА Из Основание.НематериальныеАктивы Цикл
			Если ТекСтрокаНМА.НаличиеПоДаннымУчета И НЕ ТекСтрокаНМА.НаличиеФактическое Тогда
				НоваяСтрока = НематериальныеАктивы.Добавить();
				НоваяСтрока.НематериальныйАктив = ТекСтрокаНМА.НематериальныйАктив;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Обработчик события "ОбработкаПроведения" документа.
//
Процедура ОбработкаПроведения(Отказ)
	
	Перем Заголовок, СтруктураШапкиДокумента;
	Перем ТаблицаПоНМА;
	
	Заголовок = ОбщегоНазначенияБПВызовСервера.ПредставлениеДокументаПриПроведении(Ссылка);

	// ПОДГОТОВКА ПРОВЕДЕНИЯ ПО ДАННЫМ ДОКУМЕНТА

	ПроведениеСервер.ПодготовитьНаборыЗаписейКПроведению(ЭтотОбъект);
	Если РучнаяКорректировка Тогда
		Возврат;
	КонецЕсли;
	
	ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента);
	
    ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоНМА, Отказ, Заголовок);
	
	ПроверкаРеквизитовТЧ(ТаблицаПоНМА, СтруктураШапкиДокумента,Отказ, Заголовок);
 	
	//проверка, нет ли списанных ОС в табличной части
	УправлениеНеоборотнымиАктивами.ПроверитьНаСписанностьНМА(МоментВремени(), Организация, ТаблицаПоНМА, Отказ, Заголовок);
	
	Если Не Отказ Тогда
		ДвиженияПоРегистрам(СтруктураШапкиДокумента, ТаблицаПоНМА,Отказ, Заголовок);
	КонецЕсли;

	ПроведениеСервер.ПодготовитьНаборыЗаписейКЗаписиДвижений(ЭтотОбъект);
	
КонецПроцедуры // ОбработкаПроведения()

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКОтменеПроведения(ЭтотОбъект);
	Движения.Записать();
	
КонецПроцедуры

// Обработчик события "ОбработкаЗаполнения" документа.
//
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	ТипДанныхЗаполнения = ТипЗнч(ДанныеЗаполнения);
	Если ДанныеЗаполнения <> Неопределено
			И ТипДанныхЗаполнения <> Тип("Структура")
			И Метаданные().ВводитсяНаОсновании.Содержит(ДанныеЗаполнения.Метаданные()) Тогда
		ЗаполнитьПоДокументуОснованию(ДанныеЗаполнения);
	КонецЕсли;
	ЗаполнениеДокументов.Заполнить(ЭтотОбъект, ДанныеЗаполнения);
	
КонецПроцедуры // ОбработкаЗаполнения()

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)

	УправлениеВнеоборотнымиАктивами.ПроверитьОтсутствиеДублейВТабличнойЧасти(ЭтотОбъект, "НематериальныеАктивы", Новый Структура("НематериальныйАктив"), Отказ);

КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)

	Дата = НачалоДня(ОбщегоНазначенияБП.ПолучитьРабочуюДату());
	Ответственный = Пользователи.ТекущийПользователь();

КонецПроцедуры

#КонецЕсли
