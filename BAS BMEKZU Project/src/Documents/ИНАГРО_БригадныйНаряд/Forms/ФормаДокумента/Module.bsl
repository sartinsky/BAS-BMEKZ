#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды 
	
	Если Параметры.Ключ.Пустая() Тогда
		
		ЗначенияДляЗаполнения = Новый Структура("Месяц, Организация, Ответственный", 
		"Объект.ПериодРегистрации",
		"Объект.Организация",
		"Объект.Ответственный");
		
		ЗарплатаКадры.ЗаполнитьПервоначальныеЗначенияВФорме(ЭтаФорма, ЗначенияДляЗаполнения);
		
		УстановитьФункциональныеОпцииФормы();
		
		ЗарплатаКадрыКлиентСервер.ЗаполнитьМесяцПоДате(ЭтаФорма, "Объект.ПериодРегистрации", "МесяцСтрока");
		
		УстановитьПериоды();
		УправлениеФормой(ЭтаФорма);
		ПодготовитьФормуНаСервере();
		
	КонецЕсли;
	
	// Уведомим о появлении функционала рабочей даты
	НастройкиПредупреждений = ОбщегоНазначенияБП.НастройкиПредупрежденийОбИзменениях("РабочаяДатаИзДокумента");
	
	// Показываем, если это новый документ и сама рабочая дата еще не установлена.
	НастройкиПредупреждений.РабочаяДатаИзДокумента = НастройкиПредупреждений.РабочаяДатаИзДокумента
		И Параметры.Ключ.Пустая()
		И НЕ ЗначениеЗаполнено(БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("РабочаяДата"));
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
КонецПроцедуры 

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ГрупповоеЗаполнение" И ТипЗнч(Параметр) = Тип("Структура") 
		И Параметр.Свойство("ИдентификаторВызывающейФормы")
		И Параметр.ИдентификаторВызывающейФормы = УникальныйИдентификатор Тогда
		
		ВыполнитьГрупповоеЗаполнение(Параметр);
		Модифицированность = Истина;
		
	КонецЕсли;

	ОбщегоНазначенияБПКлиент.ОбработкаОповещенияФормыДокумента(ЭтаФорма, Объект.Ссылка, ИмяСобытия, Параметр, Источник);
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	
	ЗарплатаКадрыКлиентСервер.ЗаполнитьМесяцПоДате(ЭтаФорма, "Объект.ПериодРегистрации", "МесяцСтрока");
	
	ПодготовитьФормуНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	УстановитьСостояниеДокумента();

КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)

	Если НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДатаДокумента) Тогда
		// Изменение времени не влияет на поведение документа.
		ТекущаяДатаДокумента = Объект.Дата;
		Возврат;
	КонецЕсли;

	// Общие проверки условий по датам.
	ТребуетсяВызовСервера = ОбщегоНазначенияБПКлиент.ТребуетсяВызовСервераПриИзмененииДатыДокумента(Объект.Дата, 
		ТекущаяДатаДокумента);
		
	// Если определили, что изменение даты может повлиять на какие-либо параметры, 
	// то передаем обработку на сервер.
	Если ТребуетсяВызовСервера Тогда
		ДатаПриИзмененииНаСервере();
	КонецЕсли;
	
	// Запомним новую дату документа.
	ТекущаяДатаДокумента = Объект.Дата;

КонецПроцедуры

&НаСервере
Процедура ДатаПриИзмененииНаСервере()

	УстановитьФункциональныеОпцииФормы();

	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)

	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		ОрганизацияПриИзмененииНаСервере();
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()

	УстановитьФункциональныеОпцииФормы();
	 		
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ДатаНачалаПриИзменении(Элемент)
	СтруктураПериода = Новый Структура("ДатаНачала, ДатаОкончания, ПериодРегистрации");
	ЗаполнитьЗначенияСвойств(СтруктураПериода, Объект);
	
	ИНАГРО_ПроведениеРасчетовКлиент.ПроверитьКорректностьПериода(СтруктураПериода);
	
	ЗаполнитьЗначенияСвойств(Объект, СтруктураПериода);
	
	ОбновлениеТЧПриОбновленииПериода()

КонецПроцедуры

&НаКлиенте
Процедура ДатаОкончанияПриИзменении(Элемент)
	
	СтруктураПериода = Новый Структура("ДатаНачала, ДатаОкончания, ПериодРегистрации");
	ЗаполнитьЗначенияСвойств(СтруктураПериода, Объект);
	
	ИНАГРО_ПроведениеРасчетовКлиент.ПроверитьКорректностьПериода(СтруктураПериода);
	
	ЗаполнитьЗначенияСвойств(Объект, СтруктураПериода);
	
	ОбновлениеТЧПриОбновленииПериода()
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновлениеТЧПриОбновленииПериода()
	
	Если ЗначениеЗаполнено(Объект.ДатаНачала) И ЗначениеЗаполнено(Объект.ДатаОкончания) И (Объект.ДатаНачала <> ТекущаяДатаНачала ИЛИ Объект.ДатаОкончания <> ТекущаяДатаОкончания)
		И Объект.Начисления.Количество() > 0 Тогда
		
		ТекстВопроса =НСтр("ru='Изменен период расчета. Обновить данные табличной части?';uk='Змінено період розрахунку. Оновити данні табличної частини?'");
		Обработчик = Новый ОписаниеОповещения("ОбновлениеДанныхТЧПослеОтветаНаВопрос", ЭтотОбъект);
		ПоказатьВопрос(Обработчик, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Возврат;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СчетЗатратПриИзменении(Элемент)
	
	УстановитьЗаголовкиИДоступностьСубконто(ЭтаФорма, Объект.СчетЗатрат, Истина, "Затрат");
	
	ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3", "СубконтоЗатрат1", "СубконтоЗатрат2", "СубконтоЗатрат3");
	ПоляОбъекта.Вставить("Подразделение", Объект.ПодразделениеОрганизации);
	ПоляОбъекта.Вставить("Организация",   Объект.Организация);
	БухгалтерскийУчетКлиентСервер.ПриИзмененииСчета(Объект.СчетЗатрат, Объект, ПоляОбъекта);
	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "Затрат", "СчетЗатрат");
	
	ПроверитьНалоговоеНазначениеДоходовИЗатрат();
	
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура СчетЗатратОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = БухгалтерскийУчетКлиент.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение);

КонецПроцедуры

&НаКлиенте
Процедура СубконтоЗатратПриИзменении(Элемент)

	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "Затрат", "СчетЗатрат");
	
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура СубконтоЗатратНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	СписокПараметров = СписокПараметровВыбораСубконто(ЭтаФорма, Объект, "СубконтоЗатрат%Индекс%", "СчетЗатрат");
	ОбщегоНазначенияБПКлиент.НачалоВыбораЗначенияСубконто(ЭтаФорма, Элемент, СтандартнаяОбработка, СписокПараметров);

КонецПроцедуры

&НаКлиенте
Процедура ПоказатьБазовыйПериодПриИзменении(Элемент)
	
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСчетЗатратПриИзменении(Элемент)
	
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ПоказатьНормуВремениИГрафикПриИзменении(Элемент)
	
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ПоказатьПодразделениеИВидРасчетаПриИзменении(Элемент)
	
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура УказатьОСПриИзменении(Элемент)
	
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(
		Элемент.ТекстРедактирования,
		ЭтотОбъект,
		"Объект.Комментарий");

КонецПроцедуры

&НаКлиенте
Процедура МесяцСтрокаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Оповещение = Новый ОписаниеОповещения("МесяцНачисленияСтрокойНачалоВыбораЗавершение", ЭтотОбъект);
	ИНАГРО_ЗарплатаКадрыРасширенныйКлиент.ВводМесяцаНачалоВыбора(ЭтаФорма, ЭтаФорма, "Объект.ПериодРегистрации", "МесяцСтрока", , Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура МесяцСтрокаРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	ИНАГРО_ЗарплатаКадрыРасширенныйКлиент.ВводМесяцаРегулирование(ЭтаФорма, "Объект.ПериодРегистрации", "МесяцСтрока", Направление, Модифицированность);
	ПриИзмененииМесяцаНачисления();
	
КонецПроцедуры

&НаКлиенте
Процедура МесяцСтрокаАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	ИНАГРО_ЗарплатаКадрыРасширенныйКлиент.ВводМесяцаАвтоПодборТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
	ПриИзмененииМесяцаНачисления();
	
КонецПроцедуры

&НаКлиенте
Процедура МесяцСтрокаОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	ИНАГРО_ЗарплатаКадрыРасширенныйКлиент.ВводМесяцаОкончаниеВводаТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
	ПриИзмененииМесяцаНачисления();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПериоды();
	
	Объект.ДатаНачала = Объект.ПериодРегистрации;
	Объект.ДатаОкончания = КонецМесяца(Объект.ПериодРегистрации);
	
КонецПроцедуры

&НаКлиенте
Процедура МесяцСтрокаПриИзменении(Элемент)
	
	УстановитьПериоды();
		
	ОбновлениеТЧПриОбновленииПериода()
	
КонецПроцедуры

&НаКлиенте
Процедура ВидРасчетаПриИзменении(Элемент)
	ВидРасчетаПриИзмененииНаСервере();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыНачисления

&НаКлиенте
Процедура НачисленияПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока И НЕ Копирование Тогда
		Элемент.ТекущиеДанные.Авторасчет = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НачисленияНазначениеПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Начисления.ТекущиеДанные;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ТекущаяСтрока.Сотрудник = СотрудникПоНазначению(ТекущаяСтрока.Назначение);
	ТекущаяСтрока.ВидРасчета = Объект.ВидРасчета;
	
	СписокСотрудников = Новый СписокЗначений;
	СписокСотрудников.Добавить(ТекущаяСтрока.Назначение); 
	
	СтруктураСтроки = Новый Структура("Сотрудник, Назначение, ПодразделениеОрганизации, Должность, 
	|ВидРасчета, ВидУчетаВремениДляСредней, ГрафикРаботы, 
	|БазовыйПериодНачало, БазовыйПериодКонец, ДатаНачала, ДатаОкончания, 
	|НормаДней, НормаЧасов, НормаДнейЗаМесяц, НормаЧасовЗаМесяц, КалендарныеДни, 
	|ОтработаноДней, ОтработаноЧасов, ОплаченоДнейЧасов,
	|ДокументОснование, СпособОтраженияВБухучете, Автозаполнение"); 
	
	ЗаполнитьЗначенияСвойств(СтруктураСтроки, ТекущаяСтрока);
	НачисленияНазначениеПриИзмененииНаСервере(СписокСотрудников, СтруктураСтроки);
	ЗаполнитьЗначенияСвойств(ТекущаяСтрока, СтруктураСтроки);
	
КонецПроцедуры

&НаСервере
Процедура НачисленияНазначениеПриИзмененииНаСервере(СписокСотрудников, СтруктураСтроки = Неопределено)
	
	ЗаполнитьНачисленияПоСтроке(СписокСотрудников, СтруктураСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура НачисленияДатаНачалаПриИзменении(Элемент)
	ПриИзмененииДатНачалоОкончанияВТабличнойЧасти();
КонецПроцедуры

&НаКлиенте
Процедура НачисленияДатаОкончанияПриИзменении(Элемент)
	ПриИзмененииДатНачалоОкончанияВТабличнойЧасти();
КонецПроцедуры

&НаКлиенте
Процедура НачисленияСчетДтПриИзменении(Элемент)

	ТекущиеДанные = Элементы.Начисления.ТекущиеДанные;

	УстановитьЗаголовкиИДоступностьСубконтоТЧ(ЭтаФорма, ТекущиеДанные.СчетДт, Истина, "Дт", Истина);

	ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3", "СубконтоДт1", "СубконтоДт2", "СубконтоДт3");

	ПоляОбъекта.Вставить("Организация", Объект.Организация); 	
	
	БухгалтерскийУчетКлиентСервер.ПриИзмененииСчета(ТекущиеДанные.СчетДт, ТекущиеДанные, ПоляОбъекта, Истина);
	
	ИзменитьПараметрыВыбораПолейСубконтоТЧ(ЭтаФорма);

	// Получим общие параметры обработки для реквизитов документа
	ПараметрыОбработки = ПодготовитьПараметрыОбработкиНачисления(ЭтаФорма, ТекущиеДанные);
	
	// Дополнительные поля, требующиеся для заполнения добавленных колонок табличного поля текущей формы.
	ПараметрыОбработки.ДанныеСтрокиТаблицы.Вставить("СубконтоДт1Доступность", ТекущиеДанные.СубконтоДт1Доступность);
	ПараметрыОбработки.ДанныеСтрокиТаблицы.Вставить("СубконтоДт2Доступность", ТекущиеДанные.СубконтоДт2Доступность);
	ПараметрыОбработки.ДанныеСтрокиТаблицы.Вставить("СубконтоДт3Доступность", ТекущиеДанные.СубконтоДт3Доступность); 	
		
	ЗаполнитьДобавленныеКолонкиСтрокиТаблицыЗатраты(ПараметрыОбработки.ДанныеСтрокиТаблицы, ПараметрыОбработки.ДанныеОбъекта);
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ПараметрыОбработки.ДанныеСтрокиТаблицы);

КонецПроцедуры

&НаКлиенте
Процедура НачисленияСубконтоДтПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Начисления.ТекущиеДанные;

	ИзменитьПараметрыВыбораПолейСубконтоТЧ(ЭтаФорма);

	// Получим общие параметры обработки для реквизитов документа
	ПараметрыОбработки = ПодготовитьПараметрыОбработкиНачисления(ЭтаФорма, ТекущиеДанные);
	
	// Дополнительные поля, требующиеся для заполнения добавленных колонок табличного поля текущей формы.
	ПараметрыОбработки.ДанныеСтрокиТаблицы.Вставить("СубконтоДт1Доступность", ТекущиеДанные.СубконтоДт1Доступность);
	ПараметрыОбработки.ДанныеСтрокиТаблицы.Вставить("СубконтоДт2Доступность", ТекущиеДанные.СубконтоДт2Доступность);
	ПараметрыОбработки.ДанныеСтрокиТаблицы.Вставить("СубконтоДт3Доступность", ТекущиеДанные.СубконтоДт3Доступность); 	
		
	ЗаполнитьДобавленныеКолонкиСтрокиТаблицыЗатраты(ПараметрыОбработки.ДанныеСтрокиТаблицы, ПараметрыОбработки.ДанныеОбъекта);
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ПараметрыОбработки.ДанныеСтрокиТаблицы);
		
КонецПроцедуры

&НаКлиенте
Процедура НачисленияСубконтоДтНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	СтрокаТаблицы = Элементы.Начисления.ТекущиеДанные;

	ПараметрыДокумента = ПолучитьСписокПараметров(ЭтаФорма, СтрокаТаблицы, "СубконтоДт%Индекс%");
	ПараметрыДокумента.Вставить("СчетУчета", СтрокаТаблицы.СчетДт);
	ОбщегоНазначенияБПКлиент.НачалоВыбораЗначенияСубконто(ЭтаФорма, Элемент, СтандартнаяОбработка, ПараметрыДокумента);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПоказатьВсе(Команда)
	
	Объект.ПоказатьБазовыйПериод            = Истина;
	Объект.ПоказатьСчетЗатрат               = Истина;
	Объект.ПоказатьНормуВремениИГрафик      = Истина;
	Объект.ПоказатьПодразделениеИВидРасчета = Истина;
	
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура СкрытьВсе(Команда)
	
	Объект.ПоказатьБазовыйПериод            = Ложь;
	Объект.ПоказатьСчетЗатрат               = Ложь;
	Объект.ПоказатьНормуВремениИГрафик      = Ложь;
	Объект.ПоказатьПодразделениеИВидРасчета = Ложь;
	
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура Заполнить(Команда)
	
	Если Не ЗначениеЗаполнено(Объект.ВидРасчета) Тогда
		ТекстСообщения = НСтр("ru='Перед началом заполнения табличной части необходимо выбрать Вид расчета';uk='Перед початком заповнення табличної частини необхідно обрати Вид розрахунку'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.ДатаНачала) ИЛИ Не ЗначениеЗаполнено(Объект.ДатаОкончания) Тогда
		ТекстСообщения = НСтр("ru='Перед началом заполнения табличной части необходимо заполнить Период';uk='Перед початком заповнення табличної частини необхідно обрати Період'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	Если Объект.Начисления.Количество() > 0 Тогда
		 
		ТекстВопроса = НСтр("ru='Перед заполнением табличная часть будет очищена. Продолжить?';uk='Перед заповненням таблична частина буде очищена. Продовжити?'");
		Оповещение = Новый ОписаниеОповещения("ОчиститьТаблицыЗавершение", ЭтотОбъект, Параметры);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
		Возврат;
	КонецЕсли;
	
	ИНАГРО_ЗарплатаКадрыРасширенныйКлиент.ОткрытьФормуОтбораСпискаРаботников(ЭтаФорма, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьРезультат(Команда)
		
	Если НЕ Объект.УчитыватьТариф И НЕ Объект.УчитыватьЧасы И НЕ Объект.УчитыватьКТУ Тогда 
		ТекстСообщения = НСтр("ru='Необходимо указать хотя бы один признак расчета!';uk='Необхідно вказати хоча б одну ознаку розрахунку!'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	Если Объект.УчитыватьКТУ И Объект.Начисления.Количество()>0 Тогда 
		Для Каждого Строка Из Объект.Начисления Цикл 
			Если Строка.КТУ = 0 Тогда 
				ТекстСообщения = НСтр("ru='Не заполнено значение КТУ по сотруднику: ';uk='Не заповнено значення КТУ по співробітнику: '") + Строка.Сотрудник;
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			КонецЕсли;
		КонецЦикла;		
	КонецЕсли;
	
	Если Объект.УчитыватьЧасы И Объект.Начисления.Количество()>0 Тогда 
		Для Каждого Строка Из Объект.Начисления Цикл 
			Если Строка.ОтработаноЧасов = 0 Тогда 
				ТекстСообщения = НСтр("ru='Не заполнено значение часов по сотруднику: ';uk='Не заповнено значення годин по співробітнику: '") + Строка.Сотрудник;
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			КонецЕсли;
		КонецЦикла;		
	КонецЕсли;             		
	
	// Считаем "вес" начисления для каждого сотрудника
	Для Каждого Строка Из Объект.Начисления Цикл 
		
		Вес = 1;	
		Если Объект.УчитыватьКТУ Тогда 
			Вес = Вес * Строка.Кту;
		КонецЕсли;
		Если Объект.УчитыватьЧасы Тогда 
			Вес = Вес * Строка.ОтработаноЧасов;
		КонецЕсли;
		Если Объект.УчитыватьТариф Тогда 
			Вес = Вес * (ПолучитьЧТС(Строка.Сотрудник, Объект.Дата));		
		КонецЕсли;
		Строка.Вес = Вес;
	КонецЦикла;
	
	// Считаем непосредственно начисления для каждого сотрудника исходя из посчитанного "веса"
	Для Каждого Строка Из Объект.Начисления Цикл 
		Попытка 
			Строка.Результат = Окр(Объект.СуммаНаряда * Строка.Вес / Объект.Начисления.Итог("Вес"),2);
		Исключение 
			Строка.Результат = 0;
		КонецПопытки;		
	КонецЦикла;	              

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ПодготовитьФормуНаСервере()

	УстановитьФункциональныеОпцииФормы();
	
	ТекущаяДатаДокумента = Объект.Дата;
	ТекущаяДатаНачала = Объект.ДатаНачала;
	ТекущаяДатаОкончания = Объект.ДатаОкончания;
	
	ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
		
	УстановитьЗаголовкиИДоступностьСубконто(ЭтаФорма, Объект.СчетЗатрат, Истина, "Затрат");
	
	УправлениеФормой(ЭтаФорма);
	
	УстановитьСостояниеДокумента();

КонецПроцедуры

&НаСервере
Процедура УстановитьФункциональныеОпцииФормы()

	ОбщегоНазначенияБПКлиентСервер.УстановитьПараметрыФункциональныхОпцийФормыДокумента(ЭтаФорма); 	
	
КонецПроцедуры 

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)

	Элементы = Форма.Элементы;
	Объект	 = Форма.Объект;     			
	
	Элементы.ОсновноеСредство.Видимость                            = Объект.УказатьОС; 
	Элементы.НоменклатураЗатрат.Видимость                          = Объект.УказатьОС; 
	
	Элементы.Начисления.ПодчиненныеЭлементы.НачисленияГруппаБазовыйПериод.Видимость = Объект.ПоказатьБазовыйПериод;
	Элементы.Начисления.ПодчиненныеЭлементы.НачисленияГруппаНормаЗаМесяц.Видимость  = Объект.ПоказатьНормуВремениИГрафик;
	Элементы.Начисления.ПодчиненныеЭлементы.НачисленияГруппаНорма.Видимость 		= Объект.ПоказатьНормуВремениИГрафик;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСостояниеДокумента()
	
	СостояниеДокумента = ОбщегоНазначенияБП.СостояниеДокумента(Объект);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьЗаголовкиИДоступностьСубконто(Форма, Счет, ЕстьПодразделение, Постфикс = "")

	ПоляФормы = Новый Структура("Субконто1, Субконто2, Субконто3",
		"Субконто" + Постфикс + "1",
		"Субконто" + Постфикс + "2",
		"Субконто" + Постфикс + "3");
		
	Если ЕстьПодразделение Тогда
		ПоляФормы.Вставить("Подразделение", "ПодразделениеЗатрат" + Постфикс);
	КонецЕсли;
	
	ЗаголовкиПолей = Новый Структура("Субконто1, Субконто2, Субконто3",
		"ЗаголовокСубконто" + Постфикс + "1",
		"ЗаголовокСубконто" + Постфикс + "2",
		"ЗаголовокСубконто" + Постфикс + "3");
	
	Если ЕстьПодразделение Тогда
		ЗаголовкиПолей.Вставить("Подразделение", "ЗаголовокПодразделение" + Постфикс);
	КонецЕсли;
	
	БухгалтерскийУчетКлиентСервер.ПриВыбореСчета(Счет, Форма, ПоляФормы, ЗаголовкиПолей);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ИзменитьПараметрыВыбораПолейСубконто(Форма, Суффикс, ИмяСчета)

	ПараметрыДокумента = СписокПараметровВыбораСубконто(Форма, Форма.Объект,
		"Субконто" + Суффикс + "%Индекс%", ИмяСчета);
	
	БухгалтерскийУчетКлиентСервер.ИзменитьПараметрыВыбораПолейСубконто(
		Форма, 
		Форма.Объект, 
		"Субконто" + Суффикс + "%Индекс%", 
		"Субконто" + Суффикс + "%Индекс%", 
		ПараметрыДокумента);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьЗаголовкиИДоступностьСубконтоТЧ(Форма, Счет, ЕстьПодразделение, Постфикс = "", ЭтоТаблица = Ложь);
		
	ПоляФормы = Новый Структура("Субконто1, Субконто2, Субконто3",
								"НачисленияСубконто" + Постфикс + "1",
								"НачисленияСубконто" + Постфикс + "2",
								"НачисленияСубконто" + Постфикс + "3"); 
	
	БухгалтерскийУчетКлиентСервер.ПриВыбореСчета(Счет, Форма, ПоляФормы, Неопределено, ЭтоТаблица);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ИзменитьПараметрыВыбораПолейСубконтоТЧ(Форма)
	
	Если Форма.Элементы.Начисления.ТекущаяСтрока <> Неопределено Тогда 
		СтрокаТаблицы = Форма.Объект.Начисления.НайтиПоИдентификатору(Форма.Элементы.Начисления.ТекущаяСтрока);
		ПараметрыДокумента = ПолучитьСписокПараметров(Форма, СтрокаТаблицы, "СубконтоДт%Индекс%");
		БухгалтерскийУчетКлиентСервер.ИзменитьПараметрыВыбораПолейСубконто(Форма, СтрокаТаблицы, "СубконтоДт%Индекс%", "НачисленияСубконтоДт%Индекс%", ПараметрыДокумента);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьДобавленныеКолонкиСтрокиТаблицыЗатраты(СтрокаТаблицы, Знач ПараметрыОбъекта)
	
	ПоляОбъектаСубконто	= Новый Структура("Субконто1, Субконто2, Субконто3", "СубконтоДт1", "СубконтоДт2", "СубконтоДт3");

	БухгалтерскийУчетКлиентСервер.УстановитьДоступностьСубконто(СтрокаТаблицы.СчетДт, СтрокаТаблицы, ПоляОбъектаСубконто);
	
КонецПроцедуры 

&НаКлиентеНаСервереБезКонтекста
Функция СписокПараметровВыбораСубконто(Форма, ПараметрыОбъекта, ШаблонИмяПоляОбъекта, ИмяСчета)

	СписокПараметров = Новый Структура;
	Для Индекс = 1 По 3 Цикл
		ИмяПоля = СтрЗаменить(ШаблонИмяПоляОбъекта, "%Индекс%", Индекс);
		Если ТипЗнч(ПараметрыОбъекта[ИмяПоля]) = Тип("СправочникСсылка.Контрагенты") Тогда
			СписокПараметров.Вставить("Контрагент", ПараметрыОбъекта[ИмяПоля]);
		ИначеЕсли ТипЗнч(ПараметрыОбъекта[ИмяПоля]) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
			СписокПараметров.Вставить("ДоговорКонтрагента", ПараметрыОбъекта[ИмяПоля]);
		ИначеЕсли ТипЗнч(ПараметрыОбъекта[ИмяПоля]) = Тип("СправочникСсылка.Номенклатура") Тогда
			СписокПараметров.Вставить("Номенклатура", ПараметрыОбъекта[ИмяПоля]);
		ИначеЕсли ТипЗнч(ПараметрыОбъекта[ИмяПоля]) = Тип("СправочникСсылка.Склады") Тогда
			СписокПараметров.Вставить("Склад", ПараметрыОбъекта[ИмяПоля]);
		КонецЕсли;
	КонецЦикла;
	СписокПараметров.Вставить("Организация", Форма.Объект.Организация);
	СписокПараметров.Вставить("СчетУчета"  , Форма.Объект[ИмяСчета]);
	
	Возврат СписокПараметров;

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьСписокПараметров(Форма, Объект, ШаблонИмяПоляОбъекта)

	СписокПараметров = Новый Структура;
	Для Индекс = 1 По 3 Цикл
		ИмяПоля = СтрЗаменить(ШаблонИмяПоляОбъекта, "%Индекс%", Индекс);
		Если ТипЗнч(Объект[ИмяПоля]) = Тип("СправочникСсылка.Контрагенты") Тогда
			СписокПараметров.Вставить("Контрагент", Объект[ИмяПоля]);
		ИначеЕсли ТипЗнч(Объект[ИмяПоля]) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
			СписокПараметров.Вставить("ДоговорКонтрагента", Объект[ИмяПоля]);
		ИначеЕсли ТипЗнч(Объект[ИмяПоля]) = Тип("СправочникСсылка.Номенклатура") Тогда
			СписокПараметров.Вставить("Номенклатура", Объект[ИмяПоля]);
		ИначеЕсли ТипЗнч(Объект[ИмяПоля]) = Тип("СправочникСсылка.Склады") Тогда
			СписокПараметров.Вставить("Склад", Объект[ИмяПоля]);
		КонецЕсли;
	КонецЦикла;
	СписокПараметров.Вставить("Организация", Форма.Объект.Организация);

	Возврат СписокПараметров;

КонецФункции

&НаСервере
Процедура ЗаполнитьНачисленияПоСтроке(СписокСотрудников, СтруктураСтроки = Неопределено)
	
	Документ = РеквизитФормыВЗначение("Объект");   
  	Документ.АвтозаполнениеНачисления(СписокСотрудников, СтруктураСтроки);
	ЗначениеВРеквизитФормы(Документ, "Объект");	
	
КонецПроцедуры

&НаКлиенте
Функция ПодготовитьПараметрыОбработкиНачисления(Форма, СтрокаТабличнойЧасти)
	
	ДанныеСтрокиТаблицы = Новый Структура("СчетДт, СубконтоДт1, СубконтоДт2, СубконтоДт3"); 		
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, СтрокаТабличнойЧасти);
	
	ДанныеОбъекта = Новый Структура("Дата, Организация");		
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
	ПараметрыОбработки = Новый Структура();
	ПараметрыОбработки.Вставить("ДанныеСтрокиТаблицы", 	ДанныеСтрокиТаблицы);
	ПараметрыОбработки.Вставить("ДанныеОбъекта", 		ДанныеОбъекта);
	
	Возврат ПараметрыОбработки;
	
КонецФункции

&НаСервере
Процедура ПроверитьНалоговоеНазначениеДоходовИЗатрат()
	
	ХарактерЗатрат = УправлениеПроизводствомВызовСервера.ПолучитьХарактерЗатратПоСчетуЗатрат(Объект.СчетЗатрат, ,Объект.Дата);
	Если (ХарактерЗатрат = "Производство" ИЛИ ХарактерЗатрат = "Строительство" ИЛИ ХарактерЗатрат = "ТЗР" ИЛИ ХарактерЗатрат = "РБП" ИЛИ ХарактерЗатрат = "ОПЗ") Тогда
		Объект.НалоговоеНазначениеДоходовИЗатрат = Неопределено;	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновлениеДанныхТЧПослеОтветаНаВопрос(Ответ, СписокСотрудников) Экспорт
	ТекущаяДатаНачала = Объект.ДатаНачала;
	ТекущаяДатаОкончания = Объект.ДатаОкончания;
	
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ТекущаяСтрока Из Объект.Начисления Цикл
	
		СписокСотрудников = Новый СписокЗначений;
		СписокСотрудников.Добавить(ТекущаяСтрока.Сотрудник); 
		
		СтруктураСтроки = Новый Структура("Сотрудник, Назначение, ПодразделениеОрганизации, Должность, 
		|ВидРасчета, ВидУчетаВремениДляСредней, ГрафикРаботы, 
		|БазовыйПериодНачало, БазовыйПериодКонец, ДатаНачала, ДатаОкончания, 
		|НормаДней, НормаЧасов, НормаДнейЗаМесяц, НормаЧасовЗаМесяц, КалендарныеДни, 
		|ОтработаноДней, ОтработаноЧасов, ОплаченоДнейЧасов,
		|ДокументОснование, СпособОтраженияВБухучете, Автозаполнение"); 
		
		ЗаполнитьЗначенияСвойств(СтруктураСтроки, ТекущаяСтрока);
		НачисленияНазначениеПриИзмененииНаСервере(СписокСотрудников, СтруктураСтроки);
		ЗаполнитьЗначенияСвойств(ТекущаяСтрока, СтруктураСтроки);
		
	КонецЦикла;
		
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьТаблицыЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт 
   	
    Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
        Возврат;
	КонецЕсли;
	
	Объект.Начисления.Очистить();
	ИНАГРО_ЗарплатаКадрыРасширенныйКлиент.ОткрытьФормуОтбораСпискаРаботников(ЭтаФорма, Истина)
		     
КонецПроцедуры

&НаКлиенте
Процедура МесяцНачисленияСтрокойНачалоВыбораЗавершение(ЗначениеВыбрано, ДополнительныеПараметры) Экспорт
	
	ПриИзмененииМесяцаНачисления();
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьГрупповоеЗаполнение(Параметр)
	
	ТаблицаСотрудников = ПолучитьИзВременногоХранилища(Параметр.АдресТЗ);
	МассивСотрудниковДляЗаполнения = ТаблицаСотрудников.ВыгрузитьКолонку("Сотрудник");
	
	НачисленияНазначениеПриИзмененииНаСервере(МассивСотрудниковДляЗаполнения);
	
КонецПроцедуры

&НаСервере
Функция СотрудникПоНазначению(Сотрудник)
	
	Если ЗначениеЗаполнено(Сотрудник.ОсновноеНазначение) Тогда
		Возврат Сотрудник.ОсновноеНазначение;
	Иначе
		Возврат Сотрудник;
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ВидРасчетаПриИзмененииНаСервере()
	
	Для Каждого Строка Из Объект.Начисления Цикл 
		Строка.ВидРасчета = Объект.ВидРасчета;	
		Если ЗначениеЗаполнено(Объект.ВидРасчета.СпособОтраженияВБухучете) Тогда 
			Строка.СпособОтраженияВБухучете = Объект.ВидРасчета.СпособОтраженияВБухучете;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииДатНачалоОкончанияВТабличнойЧасти()
	
	Отказ = Ложь;
	ТекСтрока = Элементы.Начисления.ТекущиеДанные;
	
	Если ЗначениеЗаполнено(ТекСтрока.ДатаНачала) И ЗначениеЗаполнено(ТекСтрока.ДатаОкончания) Тогда

		СтруктураПериода = Новый Структура("ДатаДокумента, ДатаПо, ПериодРегистрации,
		|ДатаНачала, ДатаОкончания, ОтработаноДней, ОтработаноЧасов, КалендарныеДни, ОплаченоДнейЧасов, Организация"); 
		
		ЗаполнитьЗначенияСвойств(СтруктураПериода, ТекСтрока);
		СтруктураПериода.ПериодРегистрации 	= Объект.ПериодРегистрации;
		
		ИНАГРО_ПроведениеРасчетовКлиент.ПроверитьКорректностьПериода(СтруктураПериода, Отказ);
		
		Если Не Отказ И ЗначениеЗаполнено(ТекСтрока.Назначение) Тогда
			СписокСотрудников = Новый СписокЗначений;
			СписокСотрудников.Добавить(ТекСтрока.Назначение);
			
			СтруктураПериода.ДатаДокумента 		= ТекСтрока.ДатаНачала;
			СтруктураПериода.ДатаПо 			= ТекСтрока.ДатаОкончания;
			СтруктураПериода.Организация 		= Объект.Организация;
		
			ПолучитьНормуВремениПоСотруднику(СписокСотрудников, СтруктураПериода);
			ЗаполнитьЗначенияСвойств(ТекСтрока, СтруктураПериода);
			ТекСтрока.ОплаченоДнейЧасов = СтруктураПериода.ОтработаноЧасов;
			ТекСтрока.НормаДней			= СтруктураПериода.ОтработаноДней;
			ТекСтрока.НормаЧасов		= СтруктураПериода.ОтработаноЧасов;
		КонецЕсли;
		
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьНормуВремениПоСотруднику(СписокСотрудников, СтруктураСтроки)
	
	ИНАГРО_ПроведениеРасчетов.ПолучитьНормуВремени(СписокСотрудников, СтруктураСтроки);

КонецПроцедуры

&НаСервере
Функция ПолучитьЧТС(Сотрудник, ДатаАктуальности)
	
	Возврат ИНАГРО_ПроведениеРасчетов.ЧасоваяТарифнаяСтавкаРаботникаОрг(Сотрудник, ДатаАктуальности);
	
КонецФункции

&НаКлиенте
Процедура ПриИзмененииМесяцаНачисления()
	
	ИНАГРО_ЗарплатаКадрыРасширенныйКлиент.ВводМесяцаПриИзменении(ЭтаФорма, "Объект.ПериодРегистрации", "МесяцСтрока", Модифицированность);
	ОбработатьИзменениеМесяцНачисленияНаСервере();
	
	ОбновлениеТЧПриОбновленииПериода()
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьИзменениеМесяцНачисленияНаСервере()

	УстановитьПериоды();
	
КонецПроцедуры

#КонецОбласти 

#Область СлужебныеПроцедурыИФункцииБСП

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти 