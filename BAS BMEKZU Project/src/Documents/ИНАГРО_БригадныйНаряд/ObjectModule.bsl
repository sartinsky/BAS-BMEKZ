#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	ТипДанныхЗаполнения = ТипЗнч(ДанныеЗаполнения);	
	
	ЗаполнениеДокументов.Заполнить(ЭтотОбъект, ДанныеЗаполнения); 	
				
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)	
	
	КонтролироватьУжеВведенныеНачисления = НЕ Константы.ИНАГРО_ОдновременноеВыполнениеНесколькихРабот.Получить();	
	// Заголовок для сообщений об ошибках проведения.
	ПроведениеСервер.ПодготовитьНаборыЗаписейКПроведению(ЭтотОбъект);
	Заголовок = ОбщегоНазначенияБПВызовСервера.ПредставлениеДокументаПриПроведении(Ссылка);
	
	ВыборкаПоШапкеДокумента = СформироватьЗапросПоШапке().Выбрать();
		
	Если ВыборкаПоШапкеДокумента.Следующий() Тогда
		
		// Движения стоит добавлять, если в проведении еще не отказано (отказ = ложь)
		Если НЕ Отказ Тогда
			
			// основные Начисления
			ВыборкаПоНачислениям = СформироватьЗапросПоНачислениям().Выбрать();
			Пока ВыборкаПоНачислениям.Следующий() Цикл 
				
				ПроверитьЗаполнениеСтрокиНачисления(ВыборкаПоНачислениям, Отказ);
				Если НЕ Отказ Тогда
					ДобавитьСтрокуНачислений(ВыборкаПоНачислениям, Движения.ИНАГРО_Начисления);
					ДобавитьСтрокуВДвиженияПоРегистрамНакопления(ВыборкаПоНачислениям)
				КонецЕсли;
				
			КонецЦикла;
			
			////////////////////////////////////////////////////////////////////////
			// по регистру расчета ОтражениеЗарплатыОрганизацийВРеглУчете
			Выборка = СформироватьЗапросПоОтражениюПроводки().Выбрать();
			Пока Выборка.Следующий() Цикл 
				
				Если НЕ Отказ Тогда
					ДобавитьСтрокуОтражений(Выборка, Движения.ИНАГРО_Отражение);
				КонецЕсли;
			КонецЦикла;
			
			Если УказатьОС Тогда
				ДобавитьСтрокуСписанныхМатериалов(ВыборкаПоШапкеДокумента);				
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
		
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКОтменеПроведения(ЭтотОбъект);
	Движения.Записать();
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)

	Дата = НачалоДня(ОбщегоНазначения.ТекущаяДатаПользователя());
	Ответственный = Пользователи.ТекущийПользователь();
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ИНАГРО_ПроведениеРасчетов.СформироватьКраткийСоставСотрудников(ЭтотОбъект, "Начисления");
	
КонецПроцедуры

#КонецОбласти

#Область Проведение

 // Формирует запрос по шапке документа
 // Параметры: 
 // нет
 // Возвращаемое значение:
 // Результат запроса
Функция СформироватьЗапросПоШапке() Экспорт
	
	Запрос = Новый Запрос;
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка" , Ссылка);
	Запрос.УстановитьПараметр("парамПустаяОрганизация", Справочники.Организации.ПустаяСсылка());
	
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ИНАГРО_БригадныйНаряд.Дата КАК Дата,
	               |	ИНАГРО_БригадныйНаряд.Дата КАК Период,
	               |	ИНАГРО_БригадныйНаряд.ПериодРегистрации КАК ПериодРегистрации,
	               |	ВЫБОР
	               |		КОГДА ИНАГРО_БригадныйНаряд.Организация.ГоловнаяОрганизация = &парамПустаяОрганизация
	               |			ТОГДА ИНАГРО_БригадныйНаряд.Организация
	               |		ИНАЧЕ ИНАГРО_БригадныйНаряд.Организация.ГоловнаяОрганизация
	               |	КОНЕЦ КАК ГоловнаяОрганизация,
	               |	ИНАГРО_БригадныйНаряд.Организация КАК Организация,
	               |	ИНАГРО_БригадныйНаряд.Организация КАК ОбособленноеПодразделение,
	               |	ИНАГРО_БригадныйНаряд.ВидРасчета,
	               |	ИНАГРО_БригадныйНаряд.УказатьОС,
	               |	ИНАГРО_БригадныйНаряд.ОсновноеСредство,
	               |	ИНАГРО_БригадныйНаряд.СчетЗатрат,
	               |	ИНАГРО_БригадныйНаряд.СубконтоЗатрат1,
	               |	ИНАГРО_БригадныйНаряд.СубконтоЗатрат2,
	               |	ИНАГРО_БригадныйНаряд.СубконтоЗатрат3,
	               |	ИНАГРО_БригадныйНаряд.НалоговоеНазначениеДоходовИЗатрат,
	               |	ИНАГРО_БригадныйНаряд.НоменклатураЗатрат КАК Номенклатура,
	               |	ИНАГРО_БригадныйНаряд.СуммаНаряда КАК Сумма
	               |ИЗ
	               |	Документ.ИНАГРО_БригадныйНаряд КАК ИНАГРО_БригадныйНаряд
	               |ГДЕ
	               |	ИНАГРО_БригадныйНаряд.Ссылка = &ДокументСсылка";
	
	Возврат Запрос.Выполнить();
	
КонецФункции // СформироватьЗапросПоШапке()

Функция СформироватьЗапросПоНачислениям(Сотрудники = Неопределено)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументСсылка" , Ссылка);
	Запрос.УстановитьПараметр("парамСписокПочасовыхОтклонений", ИНАГРО_ПроведениеРасчетов.ПолучитьСписокНачисленийПочасовыхОтклонений());
	Запрос.УстановитьПараметр("парамПустойСчет", ПланыСчетов.Хозрасчетный.ПустаяСсылка());
	Запрос.УстановитьПараметр("парамСотрудники", Сотрудники); 
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СтрокиНачисления.Ссылка.Организация,
	|	СтрокиНачисления.Ссылка.ПериодРегистрации,
	|	СтрокиНачисления.НомерСтроки,  
	|	СтрокиНачисления.Авторасчет,
	|   ЗНАЧЕНИЕ(Перечисление.КодыОперацийВзаиморасчетыСРаботникамиОрганизаций.Начисления) КАК КодОперации,
	|
	|	СтрокиНачисления.Сотрудник,
	|	СтрокиНачисления.Сотрудник.ФизическоеЛицо КАК ФизическоеЛицо,
	|	СтрокиНачисления.Назначение,
	|	СтрокиНачисления.ВидРасчета,
	|	СтрокиНачисления.ВидРасчета.СпособРасчета		КАК СпособРасчета,
    |
	|	КОНЕЦПЕРИОДА(СтрокиНачисления.Ссылка.ПериодРегистрации, МЕСЯЦ)	КАК Период,
	|	СтрокиНачисления.Ссылка.ПериодРегистрации						КАК ПериодВзаиморасчетов,
	|	СтрокиНачисления.ВидРасчета.СчетУчета			КАК СчетУчета,
	|	СтрокиНачисления.Результат						КАК СуммаВзаиморасчетов,
	|
	|	СтрокиНачисления.ДатаНачала,
	|	СтрокиНачисления.ДатаОкончания,
	|	СтрокиНачисления.БазовыйПериодНачало,
	|	СтрокиНачисления.БазовыйПериодКонец,
	|	СтрокиНачисления.ДатаНачала			КАК ПериодДействияНачало,
	|	СтрокиНачисления.ДатаОкончания		КАК ПериодДействияКонец,
	|
	|	СтрокиНачисления.Результат,
	|	СтрокиНачисления.ОплаченоДнейЧасов,
	|	СтрокиНачисления.ОтработаноДней,
	|	СтрокиНачисления.ОтработаноЧасов,
	|	СтрокиНачисления.НормаДней,
	|	СтрокиНачисления.НормаЧасов,
	|	СтрокиНачисления.КалендарныеДни,
	|	ВЫБОР
	|		КОГДА СтрокиНачисления.СчетДт = &парамПустойСчет
	|			ТОГДА СтрокиНачисления.Ссылка.СчетЗатрат
	|		ИНАЧЕ СтрокиНачисления.СчетДт
	|	КОНЕЦ КАК СчетДт,
	|
	|	СтрокиНачисления.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	|	СтрокиНачисления.ПодразделениеОрганизации КАК Подразделение,
	|	СтрокиНачисления.ГрафикРаботы,
	|   ВЫБОР	КОГДА СтрокиНачисления.ГрафикРаботы ССЫЛКА Справочник.ИНАГРО_ГрафикиРаботы
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка)
	|			ИНАЧЕ СтрокиНачисления.Сотрудник
	|	КОНЕЦ						КАК ГрафикРаботыСотрудник,
	|	СтрокиНачисления.ГрафикРаботы.СуммированныйУчетРабочегоВремени КАК СуммированныйУчетРабочегоВремени,
	|	СтрокиНачисления.ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени КАК ВидИспользованияРабочегоВремени, 
	|	СтрокиНачисления.Показатель1,
	|	СтрокиНачисления.Показатель2,
	|	СтрокиНачисления.Показатель3,
	|	СтрокиНачисления.НормаЧасовЗаМесяц,
	|	СтрокиНачисления.НормаДнейЗаМесяц,
	|	СтрокиНачисления.ВидУчетаВремениДляСредней,
	|	СтрокиНачисления.СпособОтраженияВБухучете,
	|	СтрокиНачисления.ДокументОснование,
	|	СтрокиНачисления.Сторно,
	|	ВЫБОР
	|		КОГДА СтрокиНачисления.Сотрудник.ГоловнаяОрганизация = СтрокиНачисления.Ссылка.Организация
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ОшибкаНеСоответствиеСотрудникаИОрганизации,
	|	Прием.ДатаПриема							КАК ДатаПриема
	|
	|ИЗ Документ."+Ссылка.Метаданные().Имя+".Начисления КАК СтрокиНачисления
	
	|ЛЕВОЕ СОЕДИНЕНИЕ (  
	|   ВЫБРАТЬ
	|       РаботникиОрганизации.Сотрудник КАК Сотрудник,
	|       МИНИМУМ(ПриемРаботников.Период) КАК ДатаПриема
	|	ИЗ Документ."+Ссылка.Метаданные().Имя+".Начисления КАК РаботникиОрганизации
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИНАГРО_РаботникиОрганизаций КАК ПриемРаботников
	|   ПО  ПриемРаботников.Сотрудник = РаботникиОрганизации.Сотрудник
	|   СГРУППИРОВАТЬ ПО
	|       РаботникиОрганизации.Сотрудник
	|) КАК Прием
	|ПО Прием.Сотрудник = СтрокиНачисления.Сотрудник
	|
	|ГДЕ СтрокиНачисления.Ссылка = &ДокументСсылка"; 
	Если Не Сотрудники = Неопределено Тогда
		Запрос.Текст = Запрос.Текст + "
		| И СтрокиНачисления.Сотрудник В (&парамСотрудники)
		|";
	КонецЕсли;
	
	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоНачислениям()

Функция СформироватьЗапросПоОтражениюПроводки() Экспорт
	
	Записать();  // запишем документ
	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("парамРегистратор", Ссылка);
	Запрос.УстановитьПараметр("парамПустойСчет",ПланыСчетов.Хозрасчетный.ПустаяСсылка());
	
	ТекстЗапроса  = "ВЫБРАТЬ
	                |	ЗНАЧЕНИЕ(ПланВидовРасчета.ИНАГРО_Отражение.Начисление) КАК ВидРасчета,
	                |	Основной.Ссылка.ПериодРегистрации КАК ПериодРегистрации,
	                |	Основной.БазовыйПериодНачало КАК БазовыйПериодНачало,
	                |	Основной.БазовыйПериодКонец КАК БазовыйПериодКонец,
	                |	NULL КАК ПериодСтавки,
	                |	Основной.Ссылка.Организация КАК Организация,
	                |	Основной.Сотрудник КАК Сотрудник,
	                |	Основной.ВидРасчета КАК ВидРасчетаБазы,
	                |	NULL КАК Налог,
	                |	NULL КАК ВзносыОсновногоНачисления,
	                |	NULL КАК СпособОтраженияЕСВФОТ,
	                |	Основной.НомерСтроки,
	                |	ВЫБОР
	                |		КОГДА Основной.СчетДт = &парамПустойСчет
	                |			ТОГДА Основной.Ссылка.СчетЗатрат
	                |		ИНАЧЕ Основной.СчетДт
	                |	КОНЕЦ КАК СчетДт,
	                |	ВЫБОР
	                |		КОГДА Основной.СчетДт = &парамПустойСчет
	                |			ТОГДА Основной.Ссылка.СубконтоЗатрат1
	                |		ИНАЧЕ Основной.СубконтоДт1
	                |	КОНЕЦ КАК СубконтоДт1,
	                |	ВЫБОР
	                |		КОГДА Основной.СчетДт = &парамПустойСчет
	                |			ТОГДА Основной.Ссылка.СубконтоЗатрат2
	                |		ИНАЧЕ Основной.СубконтоДт2
	                |	КОНЕЦ КАК СубконтоДт2,
	                |	ВЫБОР
	                |		КОГДА Основной.СчетДт = &парамПустойСчет
	                |			ТОГДА Основной.Ссылка.СубконтоЗатрат3
	                |		ИНАЧЕ Основной.СубконтоДт3
	                |	КОНЕЦ КАК СубконтоДт3,
	                |	ВЫБОР
	                |		КОГДА Основной.СчетДт = &парамПустойСчет
	                |			ТОГДА Основной.Ссылка.НалоговоеНазначениеДоходовИЗатрат
	                |		ИНАЧЕ Основной.НалоговоеНазначениеДоходовИЗатрат
	                |	КОНЕЦ КАК НалоговоеНазначение,
	                |	Основной.ВидРасчета.СчетУчета КАК СчетКт,
	                |	Основной.Сотрудник КАК СубконтоКт1,
	                |	Основной.Результат,
	                |	Основной.ВидРасчета.ДоходНДФЛ КАК ДоходНДФЛ,
	                |	Основной.ПодразделениеОрганизации КАК Подразделение
	                |ИЗ
	                |	Документ.ИНАГРО_БригадныйНаряд.Начисления КАК Основной
	                |ГДЕ
	                |	Основной.Ссылка = &парамРегистратор";
	
	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос.Выполнить();
	
КонецФункции  // АвтозаполнениеПроводок

Процедура ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ) Экспорт
	//
	Если ВыборкаПоШапкеДокумента.УказатьОС И ВыборкаПоШапкеДокумента.ОсновноеСредство  = Справочники.ОсновныеСредства.ПустаяСсылка() Тогда
		ОбщегоНазначенияБПКлиентСервер.СообщитьОбОшибке(НСтр("ru='Не заполнено основное средство!';uk='Не заповнений основний засіб!'"), Отказ);
	КонецЕсли; 
	
КонецПроцедуры // ПроверитьЗаполнениеШапки()

Процедура ПроверитьЗаполнениеСтрокиНачисления(ВыборкаПоСтрокамДокумента, Отказ, Заголовок = "")

	СтрокаНачалаСообщенияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='В строке номер ""%1"" табл. части ""Начисления"": ';uk='У рядку номер ""%1"" табл. частини ""Нарахування"": '"), СокрЛП(ВыборкаПоСтрокамДокумента.НомерСтроки));
		
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.СчетДт) Тогда //И НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.Ссылка.СчетЗатрат) Тогда
		ТекстСообщения = СтрокаНачалаСообщенияОбОшибке + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='По сотруднику %1 не указан счет затрат ни в шапке, ни в табличной части!';uk='По працівнику %1 не вказаний рахунок витрат ні в шапці, ні в табличній частині!'"), СокрЛП(ВыборкаПоСтрокамДокумента.Сотрудник));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,ЭтотОбъект,,,Отказ);
	КонецЕсли;
	
	// Организация сотрудника должна совпадать с организацией документа
	Если ВыборкаПоСтрокамДокумента.ОшибкаНеСоответствиеСотрудникаИОрганизации Тогда
		ТекстСообщения = СтрокаНачалаСообщенияОбОшибке + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Сотрудник %1 оформлен на другую организацию!';uk='Працівник %1 оформлений на іншу організацію!'"), СокрЛП(ВыборкаПоСтрокамДокумента.Сотрудник));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,ЭтотОбъект,,,Отказ);
	КонецЕсли;
	
	// Отработано Дней часов
	Если ?(ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ОтработаноЧасов),ВыборкаПоСтрокамДокумента.ОтработаноЧасов, 0) = 0 И ВыборкаПоСтрокамДокумента.ВидРасчета.ЗачетОтработанногоВремени Тогда
		ТекстСообщения = СтрокаНачалаСообщенияОбОшибке + НСтр("ru='не указано количество отработанных часов!';uk='не вказано кількість відпрацьованих годин!'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,ЭтотОбъект,,,Отказ);
	КонецЕсли;
	
	Попытка
		// Проверка дат
		Если ВыборкаПоСтрокамДокумента.ДатаНачала < ВыборкаПоСтрокамДокумента.ДатаПриема Тогда
			ТекстСообщения = СтрокаНачалаСообщенияОбОшибке + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='По сотруднику %1 дата начала начисления меньше даты приема!';uk='По працівнику %1 дата початку нарахування менша за дату прийому!'"), СокрЛП(ВыборкаПоСтрокамДокумента.Сотрудник));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,ЭтотОбъект,,,Отказ);
		ИначеЕсли ВыборкаПоСтрокамДокумента.ДатаНачала > ВыборкаПоСтрокамДокумента.ДатаОкончания Тогда	
			ТекстСообщения = СтрокаНачалаСообщенияОбОшибке + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='По сотруднику %1 дата начала начисления больше даты окончания!';uk='По працівнику %1 дата початку нарахування менша за дату закінчення!'"), СокрЛП(ВыборкаПоСтрокамДокумента.Сотрудник));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,ЭтотОбъект,,,Отказ);
		ИначеЕсли ВыборкаПоСтрокамДокумента.БазовыйПериодНачало < ВыборкаПоСтрокамДокумента.ДатаПриема Тогда
			ТекстСообщения = СтрокаНачалаСообщенияОбОшибке + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='По сотруднику %1 дата начала базового периода начисления меньше даты приема!';uk='По працівнику %1 дата початку базового періоду нарахування менша за дату прийому!'"), СокрЛП(ВыборкаПоСтрокамДокумента.Сотрудник));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,ЭтотОбъект,,,Отказ);
		ИначеЕсли ВыборкаПоСтрокамДокумента.БазовыйПериодНачало > ВыборкаПоСтрокамДокумента.БазовыйПериодКонец Тогда	
			ТекстСообщения = СтрокаНачалаСообщенияОбОшибке + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='По сотруднику %1 дата начала базового периода начисления больше даты окончания!';uk='По працівнику %1 дата початку базового періоду нарахування менша за дату закінчення!'"), СокрЛП(ВыборкаПоСтрокамДокумента.Сотрудник));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,ЭтотОбъект,,,Отказ);
		КонецЕсли;
	Исключение
	КонецПопытки;

КонецПроцедуры

Процедура ДобавитьСтрокуНачислений(ВыборкаПоСтрокамДокумента, НаборЗаписей, ОбнулитьРезультат = Ложь )
	
	Движения.ИНАГРО_Начисления.Записывать = Истина;
	Движение = НаборЗаписей.Добавить();
	ЗаполнитьЗначенияСвойств(Движение, ВыборкаПоСтрокамДокумента);
 	Движение.ВидУчетаВремени = ИНАГРО_ПроведениеРасчетов.ПолучитьВидУчетаВремени(ВыборкаПоСтрокамДокумента.ВидРасчета, ВыборкаПоСтрокамДокумента.СуммированныйУчетРабочегоВремени);
	Если ОбнулитьРезультат И ВыборкаПоСтрокамДокумента.Авторасчет Тогда
		Движение.Результат = 0;
	КонецЕсли;
	
КонецПроцедуры // ДобавитьСтрокуОсновныхНачислений()

Процедура ДобавитьСтрокуОтражений( ВыборкаПоСтрокамДокумента, НаборЗаписей )
	 
	Движения.ИНАГРО_Отражение.Записывать = Истина;
	Движение = НаборЗаписей.Добавить();
	ЗаполнитьЗначенияСвойств(Движение, ВыборкаПоСтрокамДокумента);

КонецПроцедуры // ДобавитьСтрокуНачислений()

Процедура ДобавитьСтрокуВДвиженияПоРегистрамНакопления(ВыборкаПоСтрокамДокумента)
	
	Движения.ВзаиморасчетыССотрудниками.Записывать = Истина;
	Движение = Движения.ВзаиморасчетыССотрудниками.Добавить();
	ЗаполнитьЗначенияСвойств(Движение, ВыборкаПоСтрокамДокумента);
	
	Движение.ВидДвижения			= ВидДвиженияНакопления.Приход;

КонецПроцедуры // ДобавитьСтрокуВДвиженияПоРегистрамНакопления()

Процедура ДобавитьСтрокуСписанныхМатериалов(ВыборкаПоШапкеДокумента)
	 
	Движения.ИНАГРО_МатериалыСписанныеНаТранспорт.Записывать = Истина;
	Движение = Движения.ИНАГРО_МатериалыСписанныеНаТранспорт.Добавить();
	ЗаполнитьЗначенияСвойств(Движение, ВыборкаПоШапкеДокумента);
	
КонецПроцедуры

#КонецОбласти 

#Область АвтозаполнениеРасчет

// Получение данных
//
Процедура АвтозаполнениеНачисления(СписокСотрудников, СтруктураСтроки) Экспорт
	
	мСпособОтраженияВБухучете = Справочники.СпособыОтраженияЗарплатыВРеглУчете.ПустаяСсылка();
	//
	// данные нормы календаря помесячно
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Организация",		Организация);
	Запрос.УстановитьПараметр("парамСотрудник",		СписокСотрудников);
	Запрос.УстановитьПараметр("Дата",				Дата);
	Запрос.УстановитьПараметр("ДатаНачала",			ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания",		ДатаОкончания);
	Запрос.УстановитьПараметр("ВидРасчета",			ВидРасчета);
	
	
	// запрос по всем назначениям, включая внутреннее совместительство
	ТекстЗапроса = "ВЫБРАТЬ
	               |	РаботникиОрганизации.Сотрудник КАК Назначение,
	               |	ДанныеКалендаря.ДатаМесяца КАК ДатаМесяца,
	               |	ДанныеКалендаря.ГрафикРаботы КАК ГрафикРаботы,
	               |	ДанныеКалендаря.НормаДнейЗаМесяц КАК НормаДнейЗаМесяц,
	               |	ДанныеКалендаря.НормаЧасовЗаМесяц КАК НормаЧасовЗаМесяц,
	               |	NULL КАК ДокументОснование,
	               |	РаботникиОрганизации.ПодразделениеОрганизации
	               |ПОМЕСТИТЬ ДанныеКалендаря
	               |ИЗ
	               |	(ВЫБРАТЬ
	               |		&ДатаНачала КАК ДатаНачала,
	               |		&ДатаОкончания КАК ДатаОкончания) КАК ГраницыБригадный
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИНАГРО_РаботникиОрганизаций.СрезПоследних(
	               |				&ДатаНачала,
	               |				Сотрудник В (&парамСотрудник)
	               |					ИЛИ Сотрудник.ОсновноеНазначение В (&парамСотрудник)) КАК РаботникиОрганизации
	               |		ПО (ИСТИНА)
	               |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	               |			ГрафикиРаботы.ГрафикРаботы КАК ГрафикРаботы,
	               |			НАЧАЛОПЕРИОДА(ГрафикиРаботы.Дата, МЕСЯЦ) КАК ДатаМесяца,
	               |			СУММА(ГрафикиРаботы.ОсновноеЗначение) КАК НормаДнейЗаМесяц,
	               |			СУММА(ГрафикиРаботы.ДополнительноеЗначение) КАК НормаЧасовЗаМесяц
	               |		ИЗ
	               |			РегистрСведений.ИНАГРО_ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботы
	               |		ГДЕ
	               |			ГрафикиРаботы.ВидУчетаВремени = ЗНАЧЕНИЕ(Перечисление.ИНАГРО_ВидыУчетаВремени.ПоДням)
	               |		
	               |		СГРУППИРОВАТЬ ПО
	               |			ГрафикиРаботы.ГрафикРаботы,
	               |			НАЧАЛОПЕРИОДА(ГрафикиРаботы.Дата, МЕСЯЦ)) КАК ДанныеКалендаря
	               |		ПО (ДанныеКалендаря.ГрафикРаботы = РаботникиОрганизации.ГрафикРаботы)
	               |			И (ДанныеКалендаря.ДатаМесяца >= НАЧАЛОПЕРИОДА(ГраницыБригадный.ДатаНачала, МЕСЯЦ))
	               |			И (ДанныеКалендаря.ДатаМесяца <= НАЧАЛОПЕРИОДА(ГраницыБригадный.ДатаОкончания, МЕСЯЦ))
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ИНАГРО_ДоговорНаВыполнениеРаботСФизЛицом.Сотрудник,
	               |	NULL,
	               |	NULL,
	               |	NULL,
	               |	NULL,
	               |	ИНАГРО_ДоговорНаВыполнениеРаботСФизЛицом.Ссылка,
	               |	ИНАГРО_ДоговорНаВыполнениеРаботСФизЛицом.ПодразделениеОрганизации
	               |ИЗ
	               |	(ВЫБРАТЬ
	               |		&ДатаНачала КАК ДатаНачала,
	               |		&ДатаОкончания КАК ДатаОкончания) КАК ГраницыБригадный,
	               |	Документ.ИНАГРО_ДоговорНаВыполнениеРаботСФизЛицом КАК ИНАГРО_ДоговорНаВыполнениеРаботСФизЛицом
	               |ГДЕ
	               |	(ИНАГРО_ДоговорНаВыполнениеРаботСФизЛицом.ДатаНачала <= &ДатаНачала
	               |				И ИНАГРО_ДоговорНаВыполнениеРаботСФизЛицом.ДатаОкончания >= &ДатаНачала
	               |			ИЛИ ИНАГРО_ДоговорНаВыполнениеРаботСФизЛицом.ДатаНачала >= &ДатаНачала
	               |				И ИНАГРО_ДоговорНаВыполнениеРаботСФизЛицом.ДатаНачала <= &ДатаОкончания)
	               |	И ИНАГРО_ДоговорНаВыполнениеРаботСФизЛицом.Сотрудник В(&парамСотрудник)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	РаботникиОрганизацийПринятые.Сотрудник,
	               |	ВЫБОР
	               |		КОГДА РаботникиОрганизацийПринятые.ГрафикРаботы.УчетНормыВремениПоОтдельномуГрафику
	               |			ТОГДА РаботникиОрганизацийПринятые.ГрафикРаботы.ГрафикРаботыНормыВремени
	               |		ИНАЧЕ РаботникиОрганизацийПринятые.ГрафикРаботы
	               |	КОНЕЦ КАК ГрафикРаботыСотрудника,
	               |	РаботникиОрганизацийПринятые.ПодразделениеОрганизации,
	               |	СУММА(ЕСТЬNULL(НормаВремени.ОсновноеЗначение, 0)) КАК ОсновноеЗначение,
	               |	СУММА(ЕСТЬNULL(НормаВремени.ДополнительноеЗначение, 0)) КАК ДополнительноеЗначение,
	               |	СУММА(ЕСТЬNULL(НормаВремени.ПроизводственныйКалендарьКалендарныеДни, 0)) КАК КалендарныеДни,
	               |	ВЫБОР
	               |		КОГДА РаботникиОрганизацийПринятые.Регистратор ССЫЛКА Документ.ИНАГРО_ПриемНаРаботуВОрганизацию
	               |			ТОГДА ИНАГРО_ПриемНаРаботуВОрганизациюРаботникиОрганизации.ДатаПриема
	               |		ИНАЧЕ ИНАГРО_КадровоеПеремещениеОрганизацийРаботникиОрганизации.ДатаНачала
	               |	КОНЕЦ КАК ДатаПриема,
	               |	РаботникиОрганизацийПринятые.Регистратор КАК Регистратор,
	               |	ВЫБОР
	               |		КОГДА РаботникиОрганизацийПринятые.Регистратор ССЫЛКА Документ.ИНАГРО_КадровоеПеремещениеОрганизаций
	               |			ТОГДА ИНАГРО_КадровоеПеремещениеОрганизацийРаботникиОрганизации.ПодразделениеОрганизации
	               |		ИНАЧЕ НЕОПРЕДЕЛЕНО
	               |	КОНЕЦ КАК НовоеПодразделение
	               |ПОМЕСТИТЬ Прием
	               |ИЗ
	               |	РегистрСведений.ИНАГРО_РаботникиОрганизаций.СрезПоследних(
	               |			&ДатаОкончания,
	               |			Организация = &Организация
	               |				И ПричинаИзмененияСостояния <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
	               |				И сотрудник В (&парамСотрудник)
	               |				И НЕ сотрудник В
	               |						(ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |							РаботникиОрганизацийСрезПоследних.Сотрудник
	               |						ИЗ
	               |							РегистрСведений.ИНАГРО_РаботникиОрганизаций.СрезПоследних(&ДатаОкончания, Организация = &Организация
	               |								И ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)) КАК РаботникиОрганизацийСрезПоследних)) КАК РаботникиОрганизацийПринятые
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИНАГРО_ГрафикиРаботыПоВидамВремени КАК НормаВремени
	               |		ПО (ВЫБОР
	               |				КОГДА РаботникиОрганизацийПринятые.ГрафикРаботы.УчетНормыВремениПоОтдельномуГрафику
	               |					ТОГДА РаботникиОрганизацийПринятые.ГрафикРаботы.ГрафикРаботыНормыВремени
	               |				ИНАЧЕ РаботникиОрганизацийПринятые.ГрафикРаботы
	               |			КОНЕЦ = НормаВремени.ГрафикРаботы)
	               |			И (НормаВремени.Дата >= &ДатаНачала)
	               |			И (НормаВремени.Дата <= &ДатаОкончания)
	               |			И (НормаВремени.ВидУчетаВремени = ЗНАЧЕНИЕ(Перечисление.ИНАГРО_ВидыУчетаВремени.ПоДням))
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ИНАГРО_ПриемНаРаботуВОрганизацию.РаботникиОрганизации КАК ИНАГРО_ПриемНаРаботуВОрганизациюРаботникиОрганизации
	               |		ПО РаботникиОрганизацийПринятые.Регистратор = ИНАГРО_ПриемНаРаботуВОрганизациюРаботникиОрганизации.Ссылка
	               |			И РаботникиОрганизацийПринятые.Сотрудник = ИНАГРО_ПриемНаРаботуВОрганизациюРаботникиОрганизации.Сотрудник
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ИНАГРО_КадровоеПеремещениеОрганизаций.РаботникиОрганизации КАК ИНАГРО_КадровоеПеремещениеОрганизацийРаботникиОрганизации
	               |		ПО РаботникиОрганизацийПринятые.Регистратор = ИНАГРО_КадровоеПеремещениеОрганизацийРаботникиОрганизации.Ссылка
	               |			И РаботникиОрганизацийПринятые.Сотрудник = ИНАГРО_КадровоеПеремещениеОрганизацийРаботникиОрганизации.Сотрудник
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	РаботникиОрганизацийПринятые.Сотрудник,
	               |	РаботникиОрганизацийПринятые.ПодразделениеОрганизации,
	               |	ВЫБОР
	               |		КОГДА РаботникиОрганизацийПринятые.ГрафикРаботы.УчетНормыВремениПоОтдельномуГрафику
	               |			ТОГДА РаботникиОрганизацийПринятые.ГрафикРаботы.ГрафикРаботыНормыВремени
	               |		ИНАЧЕ РаботникиОрганизацийПринятые.ГрафикРаботы
	               |	КОНЕЦ,
	               |	ВЫБОР
	               |		КОГДА РаботникиОрганизацийПринятые.Регистратор ССЫЛКА Документ.ИНАГРО_ПриемНаРаботуВОрганизацию
	               |			ТОГДА ИНАГРО_ПриемНаРаботуВОрганизациюРаботникиОрганизации.ДатаПриема
	               |		ИНАЧЕ ИНАГРО_КадровоеПеремещениеОрганизацийРаботникиОрганизации.ДатаНачала
	               |	КОНЕЦ,
	               |	РаботникиОрганизацийПринятые.Регистратор,
	               |	ВЫБОР
	               |		КОГДА РаботникиОрганизацийПринятые.Регистратор ССЫЛКА Документ.ИНАГРО_КадровоеПеремещениеОрганизаций
	               |			ТОГДА ИНАГРО_КадровоеПеремещениеОрганизацийРаботникиОрганизации.ПодразделениеОрганизации
	               |		ИНАЧЕ НЕОПРЕДЕЛЕНО
	               |	КОНЕЦ
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	&Дата,
	               |	НАЧАЛОПЕРИОДА(&ДатаНачала, МЕСЯЦ) КАК ПериодРегистрации,
	               |	&Организация,
	               |	&ДатаНачала,
	               |	&ДатаОкончания,
	               |	&ВидРасчета
	               |ПОМЕСТИТЬ ОсновнаяДок
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ИСТИНА КАК Авторасчет,
	               |	ОсновнаяДок.Дата,
	               |	ОсновнаяДок.ПериодРегистрации,
	               |	ОсновнаяДок.Организация,
	               |	ДанныеКалендаря.Назначение КАК Назначение,
	               |	ВЫБОР
	               |		КОГДА ДанныеКалендаря.Назначение.ОсновноеНазначение = ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка)
	               |			ТОГДА ДанныеКалендаря.Назначение
	               |		ИНАЧЕ ДанныеКалендаря.Назначение.ОсновноеНазначение
	               |	КОНЕЦ КАК Сотрудник,
	               |	ДанныеКалендаря.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	               |	ДанныеКалендаря.ГрафикРаботы КАК ГрафикРаботы,
	               |	ДанныеКалендаря.НормаЧасовЗаМесяц КАК НормаЧасовЗаМесяц,
	               |	ДанныеКалендаря.НормаДнейЗаМесяц КАК НормаДнейЗаМесяц,
	               |	ВЫБОР
	               |		КОГДА ЕСТЬNULL(ОсновнаяДок.ДатаНачала, ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)) = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	               |			ТОГДА НАЧАЛОПЕРИОДА(ОсновнаяДок.ПериодРегистрации, МЕСЯЦ)
	               |		ИНАЧЕ ЕСТЬNULL(ОсновнаяДок.ДатаНачала, ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0))
	               |	КОНЕЦ КАК ДатаНачала,
	               |	ВЫБОР
	               |		КОГДА ЕСТЬNULL(ОсновнаяДок.ДатаОкончания, ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)) = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	               |			ТОГДА КОНЕЦПЕРИОДА(ОсновнаяДок.ПериодРегистрации, МЕСЯЦ)
	               |		ИНАЧЕ ЕСТЬNULL(ОсновнаяДок.ДатаОкончания, ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0))
	               |	КОНЕЦ КАК ДатаОкончания,
	               |	ВЫБОР
	               |		КОГДА ЕСТЬNULL(ОсновнаяДок.ДатаНачала, ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)) = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	               |			ТОГДА НАЧАЛОПЕРИОДА(ОсновнаяДок.ПериодРегистрации, МЕСЯЦ)
	               |		ИНАЧЕ ЕСТЬNULL(ОсновнаяДок.ДатаНачала, ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0))
	               |	КОНЕЦ КАК БазовыйПериодНачало,
	               |	ВЫБОР
	               |		КОГДА ЕСТЬNULL(ОсновнаяДок.ДатаОкончания, ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)) = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	               |			ТОГДА КОНЕЦПЕРИОДА(ОсновнаяДок.ПериодРегистрации, МЕСЯЦ)
	               |		ИНАЧЕ ЕСТЬNULL(ОсновнаяДок.ДатаОкончания, ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0))
	               |	КОНЕЦ КАК БазовыйПериодКонец,
	               |	ОсновнаяДок.ВидРасчета,
	               |	ДанныеКалендаря.ДокументОснование,
	               |	Прием.ОсновноеЗначение КАК ОтработаноДней,
	               |	Прием.ДополнительноеЗначение КАК ОтработаноЧасов,
	               |	Прием.ОсновноеЗначение КАК НормаДней,
	               |	Прием.ДополнительноеЗначение КАК НормаЧасов,
	               |	Прием.КалендарныеДни,
	               |	Прием.ОсновноеЗначение КАК ОплаченоДнейЧасов
	               |ИЗ
	               |	ДанныеКалендаря КАК ДанныеКалендаря
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Прием КАК Прием
	               |		ПО ДанныеКалендаря.Назначение = Прием.Сотрудник,
	               |	ОсновнаяДок КАК ОсновнаяДок
	               |ГДЕ
	               |	НЕ ДанныеКалендаря.Назначение = """"";
	
	Запрос.Текст = ТекстЗапроса;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ЗаполнениеПоСтоке = СтруктураСтроки;

	Пока Выборка.Следующий() Цикл
		
		Если ЗаполнениеПоСтоке = Неопределено Тогда
			// строка движений
			СтруктураСтроки = Начисления.Добавить();
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(СтруктураСтроки, Выборка);
		Если Не ЗначениеЗаполнено(Выборка.ДокументОснование) Тогда
		// Реквизиты
			ИНАГРО_ПроведениеРасчетов.ПроставитьДанныеСтроки(Выборка.Сотрудник, СтруктураСтроки.Назначение, СтруктураСтроки.ДатаНачала, Ссылка, СтруктураСтроки);
		КонецЕсли;
				
		НачисленияВыборка = ИНАГРО_ПроведениеРасчетов.ЗапросСпособОтражения(Дата, СтруктураСтроки.ВидРасчета, Выборка.Сотрудник, Организация).Выбрать();
		Если НачисленияВыборка.Следующий() Тогда
			// вверху основное начисление
			мСпособОтраженияВБухучете = НачисленияВыборка.СпособОтраженияВБухучете;
		КонецЕсли;
		
		Если Выборка.Сотрудник = СтруктураСтроки.Назначение Тогда
			СтруктураСтроки.СпособОтраженияВБухучете	= мСпособОтраженияВБухучете;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры  // АвтозаполнениеНачисленияОтпуск()

#КонецОбласти 

#КонецЕсли