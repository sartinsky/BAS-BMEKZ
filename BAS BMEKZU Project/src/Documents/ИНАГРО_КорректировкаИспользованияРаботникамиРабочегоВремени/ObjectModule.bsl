#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ОбработкаПроведения(Отказ, Режим)
	
	Заголовок = ОбщегоНазначенияБПВызовСервера.ПредставлениеДокументаПриПроведении(Ссылка);
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКПроведению(ЭтотОбъект);
	
	// Получим реквизиты шапки из запроса
	ВыборкаПоШапкеДокумента = СформироватьЗапросПоШапке().Выбрать();
	
	Если ВыборкаПоШапкеДокумента.Следующий() Тогда
		
		////////////////////////////////////////////////////////////////////////
		// Отработанное время
		
		// получим реквизиты табличной части
		ВыборкаПоОтработанноеВремя = СформироватьЗапросПоОтработанноеВремя(ВыборкаПоШапкеДокумента).Выбрать();
		
		Пока ВыборкаПоОтработанноеВремя.Следующий() Цикл 
			
			// проверим очередную строку табличной части
			ПроверитьЗаполнениеСтрокиОтработанноеВремя(ВыборкаПоШапкеДокумента, ВыборкаПоОтработанноеВремя, Отказ, Заголовок);
			Если НЕ Отказ Тогда
				// Заполним записи в наборах записей регистров
				ДобавитьСтрокуОтработанноеВремя(ВыборкаПоОтработанноеВремя, ВыборкаПоШапкеДокумента);
			КонецЕсли;
		КонецЦикла;
	
	КонецЕсли;
	
КонецПроцедуры // ОбработкаПроведения()

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ИНАГРО_ПроведениеРасчетов.СформироватьКраткийСоставСотрудников(ЭтотОбъект, "РаботникиОрганизации");
	
КонецПроцедуры // ПередЗаписью()

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКОтменеПроведения(ЭтотОбъект);
	Движения.Записать();

КонецПроцедуры
	
#КонецОбласти

#Область Проведение

// Формирует запрос по шапке документа
//
// Параметры:
//	Нет.
//
// Возвращаемое значение:
//	Результат запроса
//
Функция СформироватьЗапросПоШапке()
	
	Запрос = Новый Запрос;
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка",			Ссылка);
	Запрос.УстановитьПараметр("парамПустаяОрганизация",	Справочники.Организации.ПустаяСсылка());
	
	Запрос.Текст =
	"ВЫБРАТЬ 
	|	КорректировкаИспользованияРаботникамиРабочегоВремени.Дата,
	|	КорректировкаИспользованияРаботникамиРабочегоВремени.ПериодРегистрации,
	|	КорректировкаИспользованияРаботникамиРабочегоВремени.РазвернутыйПериод,
	|	ВЫБОР
	|		КОГДА КорректировкаИспользованияРаботникамиРабочегоВремени.Организация.ГоловнаяОрганизация = &парамПустаяОрганизация
	|			ТОГДА КорректировкаИспользованияРаботникамиРабочегоВремени.Организация
	|		ИНАЧЕ КорректировкаИспользованияРаботникамиРабочегоВремени.Организация.ГоловнаяОрганизация
	|	КОНЕЦ КАК ГоловнаяОрганизация,
	|	КорректировкаИспользованияРаботникамиРабочегоВремени.Ссылка
	|ИЗ
	|	Документ.ИНАГРО_КорректировкаИспользованияРаботникамиРабочегоВремени КАК КорректировкаИспользованияРаботникамиРабочегоВремени
	|ГДЕ
	|	КорректировкаИспользованияРаботникамиРабочегоВремени.Ссылка = &ДокументСсылка";
	
	Возврат Запрос.Выполнить();
	
КонецФункции // СформироватьЗапросПоШапке()

// Формирует запрос по таблице "ОтработанноеВремя" документа
//
// Параметры:
//	ВыборкаПоШапкеДокумента
//
// Возвращаемое значение:
//	Результат запроса.
//
Функция СформироватьЗапросПоОтработанноеВремя(ВыборкаПоШапкеДокумента)
	
	Запрос = Новый Запрос;
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка",					Ссылка);
	Запрос.УстановитьПараметр("ГоловнаяОрганизация",			ВыборкаПоШапкеДокумента.ГоловнаяОрганизация);
	Запрос.УстановитьПараметр("ПустаяДата",						Дата('00010101'));
	Запрос.УстановитьПараметр("СписокНедопустимыхВидовВремени",	ПолучитьСписокНедопустимыхВидовВремени());
	
	Запрос.Текст =
	"ВЫБРАТЬ 
	|	СтрокиТЧ.Сотрудник,
	|	СтрокиТЧ.Назначение,
	|	СтрокиТЧ.ВидИспользованияРабочегоВремени КАК ВидИспользованияРабочегоВремени,
	|	СтрокиТЧ.ВидИспользованияРабочегоВремени.ВидВремени КАК ВидВремени,
	|	ВЫБОР
	|		КОГДА СтрокиТЧ.ВидИспользованияРабочегоВремени.ВидВремени В (&СписокНедопустимыхВидовВремени)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК НедопустимыйВидВремени,
	|	СтрокиТЧ.ДатаНачала КАК ДатаНачала,
	|	ВЫБОР
	|		КОГДА СтрокиТЧ.ДатаОкончания <> &ПустаяДата
	|			ТОГДА НАЧАЛОПЕРИОДА(СтрокиТЧ.ДатаОкончания, ДЕНЬ)
	|		ИНАЧЕ &ПустаяДата
	|	КОНЕЦ КАК ДатаОкончания,
	|	СтрокиТЧ.НомерСтроки КАК НомерСтроки,
	|	СтрокиТЧ.ВсегоДней КАК ВсегоДней,
	|	СтрокиТЧ.ВсегоЧасов КАК ВсегоЧасов
	|ИЗ
	|	Документ.ИНАГРО_КорректировкаИспользованияРаботникамиРабочегоВремени.ОтработанноеВремя КАК СтрокиТЧ
	|ГДЕ
	|	СтрокиТЧ.Ссылка = &ДокументСсылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Возврат Запрос.Выполнить();
	
КонецФункции // СформироватьЗапросПоОтработанноеВремя()

// Проверяет правильность заполнения реквизитов в строке ТЧ "ОтработанноеВремя" документа.
// Если какой-то из реквизитов, влияющий на проведение, не заполнен или
// заполнен некорректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса к ТЧ документа,
// все проверяемые реквизиты должны быть включены в выборку.
//
// Параметры: 
//	ВыборкаПоСтрокамДокумента	- спозиционированная на определенной строке выборка 
//								  из результата запроса к ТЧ документа,
//	Отказ						- флаг отказа в проведении.
//
Процедура ПроверитьЗаполнениеСтрокиОтработанноеВремя(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента, Отказ, Заголовок = "")
	
	СтрокаНачалаСообщенияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='В строке номер ""%1"" табл. части ""Отработанное время"": ';uk='У рядку номер ""%1"" табл. частини ""Відпрацьований час"": '"), СокрЛП(ВыборкаПоСтрокамДокумента.НомерСтроки));
	
	Если НачалоМесяца(ВыборкаПоСтрокамДокумента.ДатаНачала) <> ВыборкаПоШапкеДокумента.ПериодРегистрации Тогда
		ТекстСообщения = СтрокаНачалаСообщенияОбОшибке + НСтр("ru='дата начала периода не совпадает с месяцем, за который составлен документ!';uk='дата початку періоду не співпадає з місяцем документу!'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,ЭтотОбъект,,,Отказ);
	КонецЕсли;
	
	// Дата окончания
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ДатаОкончания) Тогда
		ТекстСообщения = СтрокаНачалаСообщенияОбОшибке + НСтр("ru='не указана дата окончания периода!';uk='не вказана дата закінчення періоду!'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,ЭтотОбъект,,,Отказ);
	Иначе
		Если НачалоМесяца(ВыборкаПоСтрокамДокумента.ДатаОкончания) <> ВыборкаПоШапкеДокумента.ПериодРегистрации Тогда
			ТекстСообщения = СтрокаНачалаСообщенияОбОшибке + НСтр("ru='дата окончания периода не совпадает с месяцем, за который составлен документ!';uk='дата закінчення періоду не співпадає з місяцем документу!'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,ЭтотОбъект,,,Отказ);
		КонецЕсли;
	КонецЕсли;
	
	// Режим однодатного ввода
	Если НЕ ВыборкаПоШапкеДокумента.РазвернутыйПериод Тогда
		Если ВыборкаПоСтрокамДокумента.ДатаНачала <> ВыборкаПоСтрокамДокумента.ДатаОкончания Тогда
			ТекстСообщения = СтрокаНачалаСообщенияОбОшибке + НСтр("ru='в режиме ввода данных за каждую дату начало и конец периода должны совпадать!';uk='в режимі введення даних за кожну дату початок і кінець періода повинні співпадати!'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,ЭтотОбъект,,,Отказ);
		КонецЕсли;
		
		Если ВыборкаПоСтрокамДокумента.ВсегоЧасов > 24 Тогда
			ТекстСообщения = СтрокаНачалаСообщенияОбОшибке + НСтр("ru='в режиме ввода данных за каждую дату число часов не должно превышать 24!';uk='в режимі введення даних за кожну дату кількість годин не повинно перевищувати 24!'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,ЭтотОбъект,,,Отказ);
		КонецЕсли;
	КонецЕсли;
	
	// Вид времени
	Если ВыборкаПоСтрокамДокумента.НедопустимыйВидВремени Тогда
		ТекстСообщения = СтрокаНачалаСообщенияОбОшибке + НСтр("ru='нельзя в документе указывать!';uk='неможна в документі вказувати!'") + ВыборкаПоСтрокамДокумента.ВидИспользованияРабочегоВремени;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,ЭтотОбъект,,,Отказ);
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаполнениеСтрокиНачисления()

// По строке выборок из результатов запроса по документу формируем движения по регистрам.
//
// Параметры:
//	ВыборкаПоСтрокамДокумента				- спозиционированная на определенной строке выборка 
//											  из результата запроса к ТЧ документа, 
//	НаборЗаписей							- набор записей для РабочееВремяРаботниковОрганизаций. 
//
// Возвращаемое значение:
//	Нет.
//
Процедура ДобавитьСтрокуОтработанноеВремя(ВыборкаПоСтрокамДокумента, ВыборкаПоШапкеДокумента)
	
	Движения.ИНАГРО_РабочееВремяРаботниковОрганизаций.Записывать = Истина;
	Движение = Движения.ИНАГРО_РабочееВремяРаботниковОрганизаций.Добавить();
	
	// Свойства
	Движение.Период			= НачалоДня(ВыборкаПоСтрокамДокумента.ДатаОкончания);
	
	// Измерения
	Движение.Сотрудник		= ВыборкаПоСтрокамДокумента.Сотрудник;
	Движение.Назначение		= ВыборкаПоСтрокамДокумента.Назначение;
	Движение.Организация	= ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;
	Движение.ВидИспользованияРабочегоВремени	= ВыборкаПоСтрокамДокумента.ВидИспользованияРабочегоВремени;
	
	// Ресурсы
	Движение.Дней			= ВыборкаПоСтрокамДокумента.ВсегоДней;
	Движение.Часов			= ВыборкаПоСтрокамДокумента.ВсегоЧасов;
	
	// Реквизиты
	Движение.СводнаяЗапись	= (ВыборкаПоСтрокамДокумента.ВсегоДней > 1) Или (ВыборкаПоСтрокамДокумента.ДатаНачала <> ВыборкаПоСтрокамДокумента.ДатаОкончания);
	
КонецПроцедуры // ДобавитьСтрокуОтработанноеВремя()

#КонецОбласти

#Область АвтозаполнениеРасчет

// Выполняет автоматическое заполнение документа по данным документа и переданным параметрам.
// 
// Параметры:
//	МассивСтрокФизЛиц
//	МассивФизЛиц.
//
Процедура Автозаполнение( МассивСтрокФизЛиц, МассивФизЛиц) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц; 
	Запрос.УстановитьПараметр("парамСсылка",		Ссылка);
	Запрос.УстановитьПараметр("парамСотрудник",		МассивФизЛиц);
	Запрос.УстановитьПараметр("парамСтроки",		МассивСтрокФизЛиц);
	Запрос.УстановитьПараметр("парамОрганизация",	Организация);
	Запрос.УстановитьПараметр("НачалоМесяца",		НачалоМесяца(ПериодРегистрации));
	Запрос.УстановитьПараметр("КонецМесяца",		КонецМесяца(ПериодРегистрации));
	Запрос.УстановитьПараметр("ПоЧасам",			Перечисления.ИНАГРО_ВидыУчетаВремени.ПоЧасам);
	Запрос.УстановитьПараметр("ПоНочнымЧасам",		Перечисления.ИНАГРО_ВидыУчетаВремени.ПоНочнымЧасам);
	Запрос.УстановитьПараметр("ПоВечернимЧасам",	Перечисления.ИНАГРО_ВидыУчетаВремени.ПоВечернимЧасам);
	
	УчетВремениНочноеВремя		= ПланыВидовРасчета.ИНАГРО_Начисления.ДоплатаЗаНочныеЧасы.ОбозначениеВТабелеУчетаРабочегоВремени;
	УчетВремениВечернееВремя	= ПланыВидовРасчета.ИНАГРО_Начисления.ДоплатаЗаВечерниеЧасы.ОбозначениеВТабелеУчетаРабочегоВремени;
	Запрос.УстановитьПараметр("УчетВремениНочноеВремя",		УчетВремениНочноеВремя);
	Запрос.УстановитьПараметр("УчетВремениВечернееВремя",	УчетВремениВечернееВремя);
	
	МассивОтработанноеВремя = Новый Массив;
	МассивОтработанноеВремя.Добавить(Перечисления.ИНАГРО_ВидыВремени.ОтработанноеВПределахНормы);
	МассивОтработанноеВремя.Добавить(Перечисления.ИНАГРО_ВидыВремени.ЧасовоеОтработанноеВПределахНормы);
	Запрос.УстановитьПараметр("ОтработанноеВремя", МассивОтработанноеВремя);
	
	МассивНочныеВечерние = Новый Массив;
	МассивНочныеВечерние.Добавить(ПланыВидовРасчета.ИНАГРО_Начисления.ДоплатаЗаНочныеЧасы);
	МассивНочныеВечерние.Добавить(ПланыВидовРасчета.ИНАГРО_Начисления.ДоплатаЗаВечерниеЧасы);
	Запрос.УстановитьПараметр("парамНочныеВечерние", МассивНочныеВечерние);
	
	Запрос.Текст = АвтозаполнениеРабочееВремя(Запрос, ПериодРегистрации);
	
	РезультатЗапроса = Запрос.Выполнить();
	ОтработанноеВремя.Загрузить(РезультатЗапроса.Выгрузить());
	
КонецПроцедуры // Автозаполнение()

Функция	АвтозаполнениеТабличнаяЧастьРаботники()
	
	ТекстЗапроса = "
	|// -начало АвтозаполнениеТабличнаяЧастьРаботники()                              
	|ВЫБРАТЬ 
	|	РаботникиОрганизации.Сотрудник	КАК Сотрудник
	|ИЗ	Документ."+Ссылка.Метаданные().Имя+".РаботникиОрганизации КАК РаботникиОрганизации
	|ГДЕ	РаботникиОрганизации.НомерСтроки В (&парамСтроки)
	|	И	РаботникиОрганизации.Ссылка = &парамСсылка
	|// -Конец АвтозаполнениеТабличнаяЧастьРаботники()                              
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции  // АвтозаполнениеТабличнаяЧастьРаботники()

Функция	АвтозаполнениеДаты(Запрос, ДатаМесяца)
	
	ТекДата = НачалоМесяца(ДатаМесяца);
	КонДата = КонецМесяца(ДатаМесяца);
	Запрос.УстановитьПараметр("Дата"+День(ТекДата),	ТекДата);
	ТекстЗапроса = "			ВЫБРАТЬ  &Дата"+День(ТекДата)+" КАК ДеньМесяца";
	
	ТекДата = ТекДата + 86400;	
	Пока ТекДата <= КонДата Цикл
		Запрос.УстановитьПараметр("Дата"+День(ТекДата),	ТекДата);
		ТекстЗапроса = ТекстЗапроса + " 
		|			ОБЪЕДИНИТЬ ВСЕ
		|			ВЫБРАТЬ &Дата"+День(ТекДата)+" КАК ДеньМесяца";
		ТекДата = ТекДата + 86400;	
	КонецЦикла;
	
	Возврат ТекстЗапроса;
	
КонецФункции     // АвтозаполнениеДаты()

Функция	АвтозаполнениеНачисленияПоДатам(Запрос, ДатаМесяца)
	
	ТекстДаты = АвтозаполнениеДаты(Запрос, ДатаМесяца);
	ТекстЗапроса = "
	|                                 
	|// -начало АвтозаполнениеНачисленияПоДатам()                              
	|                                 
	|ВЫБРАТЬ 
	|	Начисления.Сотрудник	КАК Сотрудник,
	|	Начисления.Назначение	КАК Назначение,
	|	МесяцПоДням.ДеньМесяца			КАК ДеньМесяца,
	|	Начисления.ВидРасчета           КАК ВидРасчета
	|
	|ИЗ ( " + ТекстДаты + " ) КАК МесяцПоДням
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ (
	|	ВЫБРАТЬ
	|		Начисления.Сотрудник				КАК Сотрудник,
	|		Начисления.Назначение				КАК Назначение,
	|		Начисления.ПериодДействияНачало		КАК ПериодДействияНачало,
	|		Начисления.ПериодДействияКонец		КАК ПериодДействияКонец,
	|		Начисления.ВидРасчета				КАК ВидРасчета
	|	ИЗ РегистрРасчета.ИНАГРО_Начисления КАК Начисления
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ("+АвтозаполнениеТабличнаяЧастьРаботники()+") КАК Сотр
	|	ПО		Начисления.Сотрудник = Сотр.Сотрудник                                 
	|	ГДЕ		Начисления.Организация = &парамОрганизация 
	|		И	Начисления.Назначение В (&парамСотрудник)
	|		И	НАЧАЛОПЕРИОДА(Начисления.ПериодДействия,МЕСЯЦ) = &НачалоМесяца
	|		И	Начисления.ПериодРегистрации <= &НачалоМесяца
	|		И	(Начисления.ВидРасчета.ЗачетОтработанногоВремени  // только те, которые влияют на учет времени
	|		ИЛИ  Начисления.ВидРасчета.ЗачетНормыВремени
	|		ИЛИ  Начисления.ВидРасчета.УчитыватьКалендарные)
	|       И НЕ (Начисления.ВидРасчета В (&парамНочныеВечерние))
	|) КАК Начисления 
	|ПО МесяцПоДням.ДеньМесяца МЕЖДУ Начисления.ПериодДействияНачало И Начисления.ПериодДействияКонец
	|                                 
	|// -Конец АвтозаполнениеНачисленияПоДатам()                              
	|                                 
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции  // АвтозаполнениеНачисленияПоДатам()

Функция	АвтозаполнениеНачисления(Запрос, ДатаМесяца)
	
	ТекстНачисленияПоДатам = АвтозаполнениеНачисленияПоДатам(Запрос, ДатаМесяца);
	ТекстЗапросаСчетчикВытесняемые = "
	|	ВЫБРАТЬ 
	|		Нач.Сотрудник				КАК Сотрудник,
	|		Нач.Назначение				КАК Назначение,
	|		Нач.ДеньМесяца				КАК ДеньМесяца,
	|		Нач.ВидРасчета				КАК ВидРасчета,
	|		СУММА(Нач.СчетчикВытесняемых)			КАК СчетчикВытесняемых
	|	ИЗ(
	|		ВЫБРАТЬ
	|			Начисления1.Сотрудник	КАК Сотрудник,
	|			Начисления1.Назначение	КАК Назначение,
	|			Начисления1.ДеньМесяца	КАК ДеньМесяца,
	|			Начисления1.ВидРасчета	КАК ВидРасчета,
	|			1						КАК СчетчикВытесняемых
	|		ИЗ ( "+ТекстНачисленияПоДатам+" ) КАК Начисления1
	|	
	|		ЛЕВОЕ СОЕДИНЕНИЕ ( "+ТекстНачисленияПоДатам+" ) КАК Начисления2
	|		ПО		Начисления1.Сотрудник = Начисления2.Сотрудник
	|		    И   Начисления1.Назначение = Начисления2.Назначение
	|			И	Начисления1.ДеньМесяца = Начисления2.ДеньМесяца
	|			И	Начисления1.ВидРасчета <> Начисления2.ВидРасчета
	|                                 
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.ИНАГРО_Начисления.ВытесняющиеВидыРасчета КАК ВытесняемыеВР
	|		ПО  	Начисления1.ВидРасчета = ВытесняемыеВР.Ссылка
	|   		И	Начисления2.ВидРасчета = ВытесняемыеВР.ВидРасчета                            
	|   	ГДЕ  ВытесняемыеВР.ВидРасчета ЕСТЬ NULL                             
	|	)КАК Нач                              
	|	СГРУППИРОВАТЬ ПО
	|		Нач.Сотрудник,
	|		Нач.Назначение,
	|		Нач.ДеньМесяца,
	|		Нач.ВидРасчета
	|";                                     
	
	ТекстЗапроса = "
	|                                 
	|// -начало АвтозаполнениеНачисления()                              
	|                                 
	|ВЫБРАТЬ 
	|	ИтогНачисления.Сотрудник				КАК Сотрудник,
	|	ИтогНачисления.Назначение				КАК Назначение,
	|	ИтогНачисления.ДеньМесяца				КАК ДеньМесяца,
	|	СчетчикВытесняемые.ВидРасчета			КАК ВидРасчета
	|ИЗ	(
	|	ВЫБРАТЬ
	|		Начисления1.Сотрудник				КАК Сотрудник,
	|		Начисления1.Назначение				КАК Назначение,
	|		Начисления1.ДеньМесяца				КАК ДеньМесяца,
	|		МАКСИМУМ(СчетчикВытесняемых)			КАК СчетчикВытесняемых
	|	ИЗ ( "+ТекстЗапросаСчетчикВытесняемые+" ) КАК Начисления1
	|	
	|	СГРУППИРОВАТЬ ПО
	|		Начисления1.Сотрудник,
	|		Начисления1.Назначение,
	|		Начисления1.ДеньМесяца
	|   )КАК ИтогНачисления                              
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ ( "+ТекстЗапросаСчетчикВытесняемые+" ) КАК СчетчикВытесняемые
	|	ПО		ИтогНачисления.Сотрудник  = СчетчикВытесняемые.Сотрудник
	|	    И	ИтогНачисления.Назначение = СчетчикВытесняемые.Назначение
	|		И	ИтогНачисления.ДеньМесяца = СчетчикВытесняемые.ДеньМесяца
	|		И	ИтогНачисления.СчетчикВытесняемых = СчетчикВытесняемые.СчетчикВытесняемых
	|                                 
	|// -конец АвтозаполнениеНачисления()                              
	|                                 
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции  // АвтозаполнениеНачисления()

Функция	АвтозаполнениеРаботники()
	
	ТекстЗапроса = "
	|                                 
	|// -начало АвтозаполнениеРаботники()                              
	|                                 
	|ВЫБРАТЬ 
	|	Работники.Сотрудник				КАК Сотрудник,
	|	Работники.ГрафикРаботы			КАК ГрафикРаботы,
	|	Работники.Период				КАК НачалоПериода,
	|	МИНИМУМ(ВЫБОР КОГДА Работники2.Период ЕСТЬ НЕ NULL ТОГДА Работники2.Период ИНАЧЕ &КонецМесяца КОНЕЦ )		КАК КонецПериода
	|
	|ИЗ	РегистрСведений.ИНАГРО_РаботникиОрганизаций КАК Работники
	|                                 
	|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИНАГРО_РаботникиОрганизаций КАК Работники2                                
	|	ПО		Работники.Сотрудник = Работники2.Сотрудник
	|		И	Работники.Период < Работники2.Период
	|                                 
	|ВНУТРЕННЕЕ СОЕДИНЕНИЕ ("+АвтозаполнениеТабличнаяЧастьРаботники()+") КАК Сотр
	|ПО		Работники.Сотрудник = Сотр.Сотрудник                                 
	|ГДЕ Работники.Сотрудник В (&парамСотрудник)
	|                                 
	|СГРУППИРОВАТЬ ПО
	|	Работники.Сотрудник,
	|	Работники.ГрафикРаботы,
	|	Работники.Период
	|                                 
	|// -Конец АвтозаполнениеРаботники()                              
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции  // АвтозаполнениеРаботники()

Функция	АвтозаполнениеНачисленияГрафик(Запрос, ДатаМесяца)
	
	ТекстНачисления = АвтозаполнениеНачисления(Запрос, ДатаМесяца);
	ТекстРаботникиОрганизаций = АвтозаполнениеРаботники();
	
	ТекстЗапроса = "
	|                                 
	|   // -начало АвтозаполнениеНачисленияГрафик()                              
	|                                 
	|ВЫБРАТЬ 
	|	Начисления.Сотрудник				КАК Сотрудник,
	|	Начисления.Назначение				КАК Назначение,
	|	Начисления.ДеньМесяца				КАК ДеньМесяца,
	|	Начисления.ВидРасчета				КАК ВидРасчета,
	|	РаботникиОрганизаций.ГрафикРаботы	КАК ГрафикРаботы
	|ИЗ	( "+ТекстНачисления+" ) КАК Начисления
	|                                 
	|ЛЕВОЕ СОЕДИНЕНИЕ ( "+ТекстРаботникиОрганизаций+" )  КАК РаботникиОрганизаций                                 
	|                                 
	|	ПО		Начисления.Назначение = РаботникиОрганизаций.Сотрудник
	|		И	Начисления.ДеньМесяца МЕЖДУ РаботникиОрганизаций.НачалоПериода И РаботникиОрганизаций.КонецПериода
	|                                 
	|   // -Конец АвтозаполнениеНачисленияГрафик()                              
	|                                 
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции  // АвтозаполнениеНачисленияГрафик()

Функция	АвтозаполнениеРеальноеРабочееВремя(Запрос, ДатаМесяца)
	
	ТекстНачисленияГрафик = АвтозаполнениеНачисленияГрафик(Запрос, ДатаМесяца);
	
	Запрос.Текст = "
	|ВЫБРАТЬ 
	|	*
	|ПОМЕСТИТЬ
	|	ВТТекстНачисленияГрафик
	|ИЗ
	|	(" + ТекстНачисленияГрафик + ")  КАК ТекстНачисленияГрафик
	|";
	Запрос.Выполнить();
	
	
	
	ТекстЗапроса = "
	|                                 
	|// -начало АвтозаполнениеРеальноеРабочееВремя()                              
	|// основное время + невыходы                                 
	|ВЫБРАТЬ  
	|	НачисленияГрафик.Сотрудник					КАК Сотрудник,
	|	НачисленияГрафик.Назначение					КАК Назначение,
	|	НачисленияГрафик.ДеньМесяца					КАК ДеньМесяца,
	|	НачисленияГрафик.ВидРасчета					КАК ВидРасчета,
	|	НачисленияГрафик.ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени	КАК ВидИспользованияРабочегоВремени,
	|	НачисленияГрафик.ГрафикРаботы				КАК ГрафикРаботы,
	|	ГрафикПоВидамВремени.ДополнительноеЗначение	КАК Дней,
	|	ГрафикПоВидамВремени.ОсновноеЗначение		КАК Часов
	|ИЗ	ВТТекстНачисленияГрафик КАК НачисленияГрафик 
	|                                 
	|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИНАГРО_ГрафикиРаботыПоВидамВремени  КАК ГрафикПоВидамВремени                                 
	|	ПО		НачисленияГрафик.ГрафикРаботы = ГрафикПоВидамВремени.ГрафикРаботы
	|		И	НачисленияГрафик.ДеньМесяца = ГрафикПоВидамВремени.Дата
	|		И	ГрафикПоВидамВремени.ВидУчетаВремени = &ПоЧасам
	|                                 
	|// ночные                                 
	|ОБЪЕДИНИТЬ ВСЕ                                 
	|ВЫБРАТЬ 
	|	НачисленияГрафик.Сотрудник					КАК Сотрудник,
	|	НачисленияГрафик.Назначение					КАК Назначение,
	|	НачисленияГрафик.ДеньМесяца					КАК ДеньМесяца,
	|	НачисленияГрафик.ВидРасчета					КАК ВидРасчета,
	|	&УчетВремениНочноеВремя						КАК ВидИспользованияРабочегоВремени,
	|	НачисленияГрафик.ГрафикРаботы				КАК ГрафикРаботы,
	|	ГрафикПоВидамВремени.ДополнительноеЗначение	КАК Дней,
	|	ГрафикПоВидамВремени.ОсновноеЗначение		КАК Часов
	|ИЗ	ВТТекстНачисленияГрафик КАК НачисленияГрафик 
	|                                 
	|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИНАГРО_ГрафикиРаботыПоВидамВремени  КАК ГрафикПоВидамВремени                                 
	|	ПО		НачисленияГрафик.ГрафикРаботы = ГрафикПоВидамВремени.ГрафикРаботы
	|		И	НачисленияГрафик.ДеньМесяца = ГрафикПоВидамВремени.Дата
	|		И	ГрафикПоВидамВремени.ВидУчетаВремени = &ПоНочнымЧасам
	|ГДЕ 	НачисленияГрафик.ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени.ВидВремени В (&ОтработанноеВремя)                                 
	|	И ( ГрафикПоВидамВремени.ДополнительноеЗначение <> 0 ИЛИ ГрафикПоВидамВремени.ОсновноеЗначение <> 0 )                                
	|                                 
	|// вечерние                                 
	|ОБЪЕДИНИТЬ ВСЕ                                 
	|ВЫБРАТЬ 
	|	НачисленияГрафик.Сотрудник					КАК Сотрудник,
	|	НачисленияГрафик.Назначение					КАК Назначение,
	|	НачисленияГрафик.ДеньМесяца					КАК ДеньМесяца,
	|	НачисленияГрафик.ВидРасчета					КАК ВидРасчета,
	|	&УчетВремениВечернееВремя					КАК ВидИспользованияРабочегоВремени,
	|	НачисленияГрафик.ГрафикРаботы				КАК ГрафикРаботы,
	|	ГрафикПоВидамВремени.ДополнительноеЗначение	КАК Дней,
	|	ГрафикПоВидамВремени.ОсновноеЗначение		КАК Часов
	|ИЗ	ВТТекстНачисленияГрафик КАК НачисленияГрафик 
	|                                 
	|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИНАГРО_ГрафикиРаботыПоВидамВремени  КАК ГрафикПоВидамВремени                                 
	|	ПО		НачисленияГрафик.ГрафикРаботы = ГрафикПоВидамВремени.ГрафикРаботы
	|		И	НачисленияГрафик.ДеньМесяца = ГрафикПоВидамВремени.Дата
	|		И	ГрафикПоВидамВремени.ВидУчетаВремени = &ПоВечернимЧасам
	|ГДЕ	НачисленияГрафик.ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени.ВидВремени В (&ОтработанноеВремя)                                 
	|	И	( ГрафикПоВидамВремени.ДополнительноеЗначение <> 0 ИЛИ ГрафикПоВидамВремени.ОсновноеЗначение <> 0 )                                
	|                                 
	|// -конец АвтозаполнениеРеальноеРабочееВремя()                              
	|                                 
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции  // АвтозаполнениеРеальноеРабочееВремя()

Функция	АвтозаполнениеПоТабелюРабочееВремя()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ 
	|	РабочееВремя.Сотрудник	КАК Сотрудник,
	|	РабочееВремя.Назначение	КАК Назначение,
	|	РабочееВремя.Период 	КАК ДеньМесяца,
	|	РабочееВремя.ВидИспользованияРабочегоВремени КАК ВидИспользованияРабочегоВремени,
	|	РабочееВремя.Дней		КАК Дней,
	|	РабочееВремя.Часов		КАК Часов
	|ИЗ
	|	РегистрНакопления.ИНАГРО_РабочееВремяРаботниковОрганизаций КАК РабочееВремя
	|                                 
	|ВНУТРЕННЕЕ СОЕДИНЕНИЕ ("+АвтозаполнениеТабличнаяЧастьРаботники()+") КАК Сотр
	|ПО		РабочееВремя.Назначение = Сотр.Сотрудник                                 
	|                                 
	|ГДЕ
	|	РабочееВремя.Организация = &парамОрганизация
	|	И РабочееВремя.Назначение В (&парамСотрудник)
	|	И РабочееВремя.Период МЕЖДУ &НачалоМесяца И &КонецМесяца
	|	И РабочееВремя.Регистратор <> &парамСсылка
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции  // Автозаполнение_ПоТабелюРабочееВремя()

Функция	АвтозаполнениеРабочееВремя(Запрос, ДатаМесяца)
	
	ТекстРеальноеРабочееВремя = АвтозаполнениеРеальноеРабочееВремя(Запрос, ДатаМесяца);
	
	
	Запрос.Текст = "
	|ВЫБРАТЬ 
	|	*
	|ПОМЕСТИТЬ
	|	ВТТекстРеальноеРабочееВремя
	|ИЗ
	|	(" + ТекстРеальноеРабочееВремя + ")  КАК ТекстРеальноеРабочееВремя
	|";
	Запрос.Выполнить();
	
	
	ТекстПоТабелюРабочееВремя = АвтозаполнениеПоТабелюРабочееВремя();
	
	
	Запрос.Текст = "
	|ВЫБРАТЬ 
	|	*
	|ПОМЕСТИТЬ
	|	ВТТекстПоТабелюРабочееВремя
	|ИЗ
	|	(" + ТекстПоТабелюРабочееВремя + ") КАК ТекстПоТабелюРабочееВремя
	|";
	Запрос.Выполнить();
	
	
	
	ТекстЗапроса = "
	|ВЫБРАТЬ 
	|	РабочееВремя.Сотрудник	КАК Сотрудник,
	|	РабочееВремя.Назначение	КАК Назначение,
	|	РабочееВремя.ДеньМесяца КАК ДатаНачала,     //даты приводим к форме удобной для документа
	|	РабочееВремя.ДеньМесяца КАК ДатаОкончания,
	|	РабочееВремя.ВидИспользованияРабочегоВремени КАК ВидИспользованияРабочегоВремени,
	|	СУММА(РабочееВремя.Дней)		КАК ВсегоДней,
	|	СУММА(РабочееВремя.Часов)		КАК ВсегоЧасов
	|ИЗ (
	|		ВЫБРАТЬ
	|			Основной.Сотрудник	КАК Сотрудник,
	|			Основной.Назначение	КАК Назначение,
	|			Основной.ДеньМесяца	КАК ДеньМесяца,
	|			Основной.ВидИспользованияРабочегоВремени КАК ВидИспользованияРабочегоВремени,
	|			Основной.Дней		КАК Дней,
	|			Основной.Часов		КАК Часов
	|		ИЗ ВТТекстРеальноеРабочееВремя  КАК Основной			
	|
	|		ОБЪЕДИНИТЬ ВСЕ
	|		ВЫБРАТЬ
	|			Основной.Сотрудник	КАК Сотрудник,
	|			Основной.Назначение	КАК Назначение,
	|			Основной.ДеньМесяца	КАК ДеньМесяца,
	|			Основной.ВидИспользованияРабочегоВремени КАК ВидИспользованияРабочегоВремени,
	|			-Основной.Дней		КАК Дней,
	|			-Основной.Часов		КАК Часов
	|		ИЗ ВТТекстПоТабелюРабочееВремя КАК Основной		
	|)КАК РабочееВремя
	|
	|ГДЕ РабочееВремя.Сотрудник ЕСТЬ НЕ NULL
	|И РабочееВремя.ВидИспользованияРабочегоВремени ЕСТЬ НЕ NULL
	|
	|СГРУППИРОВАТЬ ПО
	|	РабочееВремя.Сотрудник,
	|	РабочееВремя.Назначение,
	|	РабочееВремя.ДеньМесяца,
	|	РабочееВремя.ВидИспользованияРабочегоВремени
	|ИМЕЮЩИЕ 
	|	СУММА(РабочееВремя.Дней) <> 0 ИЛИ
	|	СУММА(РабочееВремя.Часов) <> 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	РабочееВремя.Назначение.Наименование,
	|	РабочееВремя.ДеньМесяца,
	|	РабочееВремя.ВидИспользованияРабочегоВремени.ЦифровойКод
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции  // АвтозаполнениеРабочееВремя()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции	

// Возвращает список видов времени, которые нельзя вводить этим документом
//
// Параметры
//	Нет.
//
// Возвращаемое значение:
//	Список значений, содержащий подходящий перечень значений перечисления ВидыВремени.
//
Функция ПолучитьСписокНедопустимыхВидовВремени() Экспорт
	
	Список = Новый СписокЗначений;
	Список.Добавить(Перечисления.ИНАГРО_ВидыВремени.ОтработанноеСверхНормы);
	Список.Добавить(Перечисления.ИНАГРО_ВидыВремени.ЧасовоеНеотработанное);
	
	Возврат Список;
	
КонецФункции // ПолучитьСписокНедопустимыхВидовВремени()

Процедура ВыполнитьОтменуПроведенияДокумента() Экспорт
	
	ЭтотОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли