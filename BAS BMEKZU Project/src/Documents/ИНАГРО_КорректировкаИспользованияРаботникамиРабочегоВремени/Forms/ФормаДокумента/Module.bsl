#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды 

	КадровыйУчетФормы.ФормаКадровогоДокументаПриСозданииНаСервере(ЭтаФорма);
	
	Если Параметры.Ключ.Пустая() Тогда
		
		// создается новый документ
		ЗначенияДляЗаполнения = Новый Структура("ПредыдущийМесяц, Организация, Ответственный, Подразделение", 
		"Объект.ПериодРегистрации",
		"Объект.Организация",
		"Объект.Ответственный",
		"Объект.ПодразделениеОрганизации");
		
		ЗарплатаКадры.ЗаполнитьПервоначальныеЗначенияВФорме(ЭтаФорма, ЗначенияДляЗаполнения);
		
		УстановитьФункциональныеОпцииФормы();
		
		ЗарплатаКадрыКлиентСервер.ЗаполнитьМесяцПоДате(ЭтаФорма, "Объект.ПериодРегистрации", "МесяцСтрока");
		УправлениеФормой(ЭтаФорма);
		
	КонецЕсли;
				
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	СтандартнаяОбработка = Ложь;
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.Сотрудники") Тогда
		ДобавляемыеСотрудники = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ВыбранноеЗначение);
	Иначе
		ДобавляемыеСотрудники = ВыбранноеЗначение;
	КонецЕсли;

	ДобавитьСотрудников(ДобавляемыеСотрудники);

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ГрупповоеЗаполнение" И ТипЗнч(Параметр) = Тип("Структура") 
		И Параметр.Свойство("ИдентификаторВызывающейФормы")
		И Параметр.ИдентификаторВызывающейФормы = УникальныйИдентификатор Тогда
		
		ВыполнитьГрупповоеЗаполнение(Параметр);
		
	КонецЕсли;
	
	ОбщегоНазначенияБПКлиент.ОбработкаОповещенияФормыДокумента(ЭтаФорма, Объект.Ссылка, ИмяСобытия, Параметр, Источник);
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	УстановитьФункциональныеОпцииФормы();
	
	ЗарплатаКадрыКлиентСервер.ЗаполнитьМесяцПоДате(ЭтаФорма, "Объект.ПериодРегистрации", "МесяцСтрока");
	
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	ПодготовитьФормуНаСервере(); 
	

КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
		
	УстановитьСостояниеДокумента();	
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура МесяцСтрокаРегулирование(Элемент, Направление, СтандартнаяОбработка)
		
	ИНАГРО_ЗарплатаКадрыРасширенныйКлиент.ВводМесяцаРегулирование(ЭтаФорма, "Объект.ПериодРегистрации", "МесяцСтрока", Направление, Модифицированность);
	
КонецПроцедуры

&НаКлиенте
Процедура МесяцСтрокаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Оповещение = Новый ОписаниеОповещения("МесяцНачисленияСтрокойНачалоВыбораЗавершение", ЭтотОбъект);
	ИНАГРО_ЗарплатаКадрыРасширенныйКлиент.ВводМесяцаНачалоВыбора(ЭтаФорма, ЭтаФорма, "Объект.ПериодРегистрации", "МесяцСтрока", , Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура МесяцСтрокаАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	ИНАГРО_ЗарплатаКадрыРасширенныйКлиент.ВводМесяцаАвтоПодборТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
	ПриИзмененииМесяцаНачисления();
	
КонецПроцедуры

&НаКлиенте
Процедура МесяцСтрокаОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	ИНАГРО_ЗарплатаКадрыРасширенныйКлиент.ВводМесяцаОкончаниеВводаТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
	ПриИзмененииМесяцаНачисления();
	
КонецПроцедуры

&НаКлиенте
Процедура МесяцНачисленияСтрокойНачалоВыбораЗавершение(ЗначениеВыбрано, ДополнительныеПараметры) Экспорт
	
	ПриИзмененииМесяцаНачисления();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииМесяцаНачисления()
	
	ИНАГРО_ЗарплатаКадрыРасширенныйКлиент.ВводМесяцаПриИзменении(ЭтаФорма, "Объект.ПериодРегистрации", "МесяцСтрока", Модифицированность);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтработанноеВремяДатаНачалаПриИзменении(Элемент)
	Если Не Объект.РазвернутыйПериод Тогда
		ТекСтрока = Элементы.ОтработанноеВремя.ТекущиеДанные;
		ТекСтрока.ДатаОкончания = ТекСтрока.ДатаНачала;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОтработанноеВремяНазначениеПриИзменении(Элемент)
	ТекСтрока = Элементы.ОтработанноеВремя.ТекущиеДанные;
	ТекСтрока.Сотрудник = ПолучитьЗначениеСотрудника(ТекСтрока.Назначение);
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ОбработатьИзменениеОрганизацииНаСервере()
	
КонецПроцедуры

&НаКлиенте
Процедура РазвернутыйПериодПриИзменении(Элемент)
	
	УстановитьВидимостьДней(Истина);

КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(
		Элемент.ТекстРедактирования,
		ЭтотОбъект,
		"Объект.Комментарий");

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыРаботникиОрганизаций

&НаКлиенте
Процедура РаботникиОрганизацииПередУдалением(Элемент, Отказ)
	
	Сотрудник = Элементы.РаботникиОрганизации.ТекущиеДанные.Сотрудник;
	
	УдалитьПереформироватьПараметрыРасчетаПоРаботнику(Сотрудник);

КонецПроцедуры

&НаКлиенте
Процедура РаботникиОрганизацииПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	ОтобразитьОтборСтрок(ОтборУстановлен);
	ТЧПриАктивизацииСтроки("РаботникиОрганизации", Элемент)
КонецПроцедуры

&НаКлиенте
Процедура РаботникиОрганизацииПриАктивизацииСтроки(Элемент)
	
	ОтобразитьОтборСтрок(ОтборУстановлен);
	ТЧПриАктивизацииСтроки("РаботникиОрганизации", Элемент)

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыОтработанноеВремя

&НаКлиенте
Процедура ОтработанноеВремяПриАктивизацииСтроки(Элемент)
	ТЧПриАктивизацииСтроки("ОтработанноеВремя", Элемент);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Заполнить(Команда)
	Если Объект.РаботникиОрганизации.Количество() > 0 Тогда
		 
		ТекстВопроса = НСтр("ru='Перед заполнением табличные части будут очищены. Продолжить?';uk='Перед заповненням табличні частини будуть очищені. Продовжити?'");
		Оповещение = Новый ОписаниеОповещения("ОчиститьТаблицыЗавершение", ЭтотОбъект, Параметры);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
		Возврат;
	КонецЕсли;
		
	Объект.РаботникиОрганизации.Очистить();
	Объект.ОтработанноеВремя.Очистить();
	
	ИНАГРО_ЗарплатаКадрыРасширенныйКлиент.ОткрытьФормуОтбораСпискаРаботников(ЭтаФорма, Истина)

КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтбор(Команда)
	
	ОтборУстановлен = Не ОтборУстановлен;
	Если ОтборУстановлен Тогда
		Элементы.УстановитьОтбор.Картинка = БиблиотекаКартинок.СостояниеПользователя02;
	Иначе
		Элементы.УстановитьОтбор.Картинка = БиблиотекаКартинок.ЗначокФизическиеЛица32;
	КонецЕсли;
	
	ОтобразитьОтборСтрок(ОтборУстановлен);
	
КонецПроцедуры

&НаКлиенте
Процедура Подбор(Команда)
	
	ПодобратьСотрудников(Истина);

КонецПроцедуры

&НаКлиенте
Процедура Рассчитать(Команда)
	
	Если Объект.РаботникиОрганизации.Количество() = 0 Тогда
		 Возврат;
	КонецЕсли;	 
	
	Если Объект.Проведен Тогда 
		ТекстВопроса =НСтр("ru='Автоматически рассчитать документ можно только после отмены его проведения. Выполнить отмену проведения документа?';uk='Автоматично розрахувати документ можна тільки після скасування його проведення. Виконати скасування проведення документа?'");
		Обработчик = Новый ОписаниеОповещения("АвторасчетПослеОтветаНаВопросЗаписать", ЭтотОбъект);
		ПоказатьВопрос(Обработчик, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
		Возврат;
	КонецЕсли;
	
	Если Объект.Ссылка.Пустая() Или Модифицированность Тогда 
		ТекстВопроса =НСтр("ru='Выполнение команды ""Рассчитать"" возможно только после записи данных. Записать?';uk='Виконання команди ""Розрахувати"" можливо тільки після запису даних. Записати?'");
		Обработчик = Новый ОписаниеОповещения("АвтозаполнениеПослеОтветаНаВопросЗаписать", ЭтотОбъект);
		ПоказатьВопрос(Обработчик, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
		Возврат;
	КонецЕсли;
	
	ВыполнитьРасчетНаСервере();
	ПодготовитьФормуНаСервере();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ПодготовитьФормуНаСервере()
	
	УправлениеФормой(ЭтаФорма);
	
	УстановитьСостояниеДокумента();
		
КонецПроцедуры

&НаСервере
Процедура УстановитьФункциональныеОпцииФормы()
	
	ПараметрыФО = Новый Структура("Организация, Период", Объект.Организация, Объект.Дата);
	УстановитьПараметрыФункциональныхОпцийФормы(ПараметрыФО);
	
КонецПроцедуры

&НаСервере
Процедура УправлениеФормой(Форма)
	
	УстановитьВидимостьДнейНаСервере();
	
КонецПроцедуры 

&НаСервере
Процедура УстановитьСостояниеДокумента()
	
	СостояниеДокумента = ОбщегоНазначенияБП.СостояниеДокумента(Объект);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьЗначениеСотрудника(ТекСтрокаНазначение)
	
	Если НЕ ТекСтрокаНазначение.ОсновноеНазначение = ПредопределенноеЗначение("Справочник.Сотрудники.ПустаяСсылка") Тогда 	
		Возврат ТекСтрокаНазначение.ОсновноеНазначение; 
	КонецЕсли;	
	
	Возврат ТекСтрокаНазначение; 
	
КонецФункции

&НаКлиенте
Процедура ОтобразитьОтборСтрок(ОтборУстановлен)
	
	Если ОтборУстановлен И Элементы.РаботникиОрганизации.ТекущиеДанные <> Неопределено Тогда    
	    Элементы.ОтработанноеВремя.ОтборСтрок = Новый ФиксированнаяСтруктура("Сотрудник", Элементы.РаботникиОрганизации.ТекущиеДанные.Сотрудник);
	Иначе
	    Элементы.ОтработанноеВремя.ОтборСтрок = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура устанавливает видимость колонок "ДатаОкончания", "Дней", "ВсегоДней" ТЧ документа при необходимости
// в зависимости от способа ввода документа
//
Процедура УстановитьВидимостьДней(ИнтерактивныйВызов)
	
	Если ИнтерактивныйВызов И Не Объект.РазвернутыйПериод Тогда
		Если Объект.ОтработанноеВремя.Количество() > 0 Тогда
			ТекстВопроса = НСтр("ru='При смене способа заполнения будут пересчитаны дни. Продолжить?';uk='При зміні способу заповнення будуть перераховані дні. Продовжити?'");
			Оповещение = Новый ОписаниеОповещения("УстановитьВидимостьДнейЗавершение", ЭтотОбъект, Параметры);
			ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	УстановитьВидимостьДнейНаСервере();
	
КонецПроцедуры // УстановитьВидимостьДней()

&НаСервере
// Процедура устанавливает видимость колонок "ДатаОкончания", "Дней", "ВсегоДней" ТЧ документа при необходимости
// в зависимости от способа ввода документа
//
Процедура УстановитьВидимостьДнейНаСервере()
	
	Если Объект.РазвернутыйПериод Тогда
		// двухдатный способ ввода
		ЭтаФорма.Элементы.ОтработанноеВремяДатаНачала.Заголовок = НСтр("ru='Дата начала';uk='Дата початку'");
		ЭтаФорма.Элементы.ОтработанноеВремяДатаОкончания.Видимость = Истина;
	Иначе
		ЭтаФорма.Элементы.ОтработанноеВремяДатаНачала.Заголовок = НСтр("ru='Дата';uk='Дата'");
		ЭтаФорма.Элементы.ОтработанноеВремяДатаОкончания.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры // УстановитьВидимостьДней()

&НаКлиенте
Процедура УстановитьВидимостьДнейЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт 
   	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Объект.РазвернутыйПериод = Истина;
        Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаТЧ Из Объект.ОтработанноеВремя Цикл
		СтрокаТЧ.ДатаОкончания		= СтрокаТЧ.ДатаНачала;
		СтрокаТЧ.ВсегоДней			= ?(СтрокаТЧ.ВсегоЧасов > 0, 1, 0);
		Элементы.ОтработанноеВремяДатаНачала.Заголовок = НСтр("ru='Дата';uk='Дата'");
		Элементы.ОтработанноеВремяДатаОкончания.Видимость = Ложь;
	КонецЦикла;
	
	УстановитьВидимостьДнейНаСервере();
		     
КонецПроцедуры

&НаКлиенте
Процедура ПодобратьСотрудников(МножественныйВыбор)
	
	КадровыйУчетКлиент.ВыбратьСотрудниковРаботающихВПериоде(
		ЭтаФорма, Объект.Организация, Неопределено,
		Объект.Дата, КонецМесяца(Объект.Дата), МножественныйВыбор,
		АдресСпискаПодобранныхСотрудников());
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьОтменуПроведенияДокументаНаСервере()
	
	Документ = РеквизитФормыВЗначение("Объект");
  	Документ.ВыполнитьОтменуПроведенияДокумента();
  	ЗначениеВРеквизитФормы(Документ, "Объект");	
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьИзменениеОрганизацииНаСервере()

	УстановитьФункциональныеОпцииФормы();

	ОчиститьТабличныеЧасти();
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьТаблицыЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт 
   	
    Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
        Возврат;
	Иначе 
		Объект.РаботникиОрганизации.Очистить();
		Объект.ОтработанноеВремя.Очистить();
	КонецЕсли;
			
	ИНАГРО_ЗарплатаКадрыРасширенныйКлиент.ОткрытьФормуОтбораСпискаРаботников(ЭтаФорма, Истина)
		     
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСотрудников(Знач СписокСотрудников)
	
	СотрудникиКДобавлению = Новый Массив;
	Для каждого ДобавляемыйСотрудник Из СписокСотрудников Цикл
		
		Если Объект.РаботникиОрганизации.НайтиСтроки(Новый Структура("Сотрудник", ДобавляемыйСотрудник)).Количество() = 0 Тогда
			ТекущаяСтрока = Объект.РаботникиОрганизации.Добавить();
			ТекущаяСтрока.Сотрудник = ДобавляемыйСотрудник;
	
		КонецЕсли; 
		
	КонецЦикла;
		
КонецПроцедуры

&НаСервере
Функция АдресСпискаПодобранныхСотрудников()
	
	Возврат ПоместитьВоВременноеХранилище(Объект.РаботникиОрганизации.Выгрузить(,"Сотрудник").ВыгрузитьКолонку("Сотрудник"), УникальныйИдентификатор);
	
КонецФункции

#Область ПроцедурыИФункцииОбработкиТабличныхЧастей

&НаКлиенте
// Добавляет или переопределяет строку в табличной части "Начисления" при изменении сотрудника 
// или формы оплаты труда у сотрудника.
//
Процедура УдалитьПереформироватьПараметрыРасчетаПоРаботнику(Сотрудник)
	
	УдалитьПараметрыРасчетаПоРаботнику(Сотрудник, "ОтработанноеВремя");
		
КонецПроцедуры // ПереформироватьПараметрыРасчетаПоРаботнику()

&НаСервере
// Удаляет начисления по работнику, все или автоматически заполняемые
// Параметры:
//   Сотрудник - СправочникСсылка.Физлица
//   УдалятьВсе - булево, если Истина - удаляются все начисления по физлицу,
//				например, при его удалении из списка.
//				Если Ложь - удаляются только те, которые вводятся "автоматически",
//				например, при редактировании данных по строке табличной части 
//				со списком работников
Процедура УдалитьПараметрыРасчетаПоРаботнику(Сотрудник, ИмяТабЧасти)
	
	ИНАГРО_ЗарплатаКадрыРасширенный.УдалитьПараметрыРасчетаПоРаботнику(Сотрудник, ИмяТабЧасти, Объект)
	
КонецПроцедуры  // УдалитьПараметрыРасчетаПоРаботнику

&НаКлиенте
Процедура ТЧПриАктивизацииСтроки(ИмяТЧ, Элемент)
	ТекСтрокаРаботник = Элементы.РаботникиОрганизации.ТекущиеДанные;
	Если Не ТекСтрокаРаботник = Неопределено Тогда
		ТекущиеДанныеРаботник = ТекСтрокаРаботник.Сотрудник;
	Иначе
		ТекущиеДанныеРаботник = Неопределено
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущиеДанныеРаботник) Тогда
		ТекущиеДанные = Элементы[ИмяТЧ].ТекущиеДанные;
		
		Если ТекущиеДанные = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		// запомним текущего сотрудника
		СинхронизируемыеТабличныеЧасти = Новый Соответствие;
		СинхронизируемыеТабличныеЧасти["РаботникиОрганизации"]	= Ложь;
		СинхронизируемыеТабличныеЧасти["ОтработанноеВремя"]	    = Ложь;
		
		ИНАГРО_ЗарплатаКадрыРасширенныйКлиент.СинхронизироватьСтроки(Элементы, Объект, ИмяТЧ, СинхронизируемыеТабличныеЧасти, "Сотрудник");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьТабличныеЧасти()
	
	Объект.ОтработанноеВремя.Очистить();
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыИФункцииАвтозаполнение

&НаКлиенте
Процедура ВыполнитьГрупповоеЗаполнение(Параметр)
	
	ВыполнитьГрупповоеЗаполнениеНаСервере(Параметр);	//	
	
	ПодготовитьФормуНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьГрупповоеЗаполнениеНаСервере(Параметр)
	
	ТаблицаСотрудников = ПолучитьИзВременногоХранилища(Параметр.АдресТЗ);

	Объект.РаботникиОрганизации.Загрузить(ТаблицаСотрудников);
	
КонецПроцедуры

&НаКлиенте
Процедура АвторасчетПослеОтветаНаВопросЗаписать(Ответ, ПараметрыВыполнения) Экспорт
	Если Ответ <> КодВозвратаДиалога.ОК Тогда
		Возврат;
	КонецЕсли;
	
	ВыполнитьОтменуПроведенияДокументаНаСервере();
		//
	ВыполнитьРасчетНаСервере();
	ПодготовитьФормуНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура АвтозаполнениеПослеОтветаНаВопросЗаписать(Ответ, ПараметрыВыполнения) Экспорт
	Если Ответ <> КодВозвратаДиалога.ОК Тогда
		Возврат;
	КонецЕсли;
	
	Если Не Записать() Тогда
		Возврат;
	КонецЕсли;
		
	ВыполнитьРасчетНаСервере();
	ПодготовитьФормуНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьРасчетНаСервере()
	
	Объект.ОтработанноеВремя.Очистить();
	
	МассивСтрокФизЛиц = Новый Массив;
	МассивФизЛиц      = Новый Массив;
	
	Для Каждого СтрокаРаботники Из Объект.РаботникиОрганизации Цикл
		МассивСтрокФизЛиц.Добавить(СтрокаРаботники.НомерСтроки);
		МассивФизЛиц.Добавить(СтрокаРаботники.Сотрудник);
	КонецЦикла; 
	
	Документ = РеквизитФормыВЗначение("Объект");
  	Документ.Автозаполнение(МассивСтрокФизЛиц, МассивФизЛиц);
  	ЗначениеВРеквизитФормы(Документ, "Объект");	
	
КонецПроцедуры

#КонецОбласти 

#КонецОбласти 

#Область СлужебныеПроцедурыИФункцииБСП

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти




















