#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

Перем мВалютаРегламентированногоУчета; 

#Область ОбработчикиСобытий

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	ЗаполнениеДокументов.Заполнить(ЭтотОбъект, ДанныеЗаполнения);

КонецПроцедуры 

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// Дерево значений, содержащее имена необходимых полей в запросе по шапке.
	Перем ДеревоПолейЗапросаПоШапке;
	Перем Заголовок, СтруктураШапкиДокумента;
	Перем ТаблицаПоТоварам;
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКПроведению(ЭтотОбъект);
	
	мВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	
	// Заголовок для сообщений об ошибках проведения.	
	Заголовок = ОбщегоНазначенияБПВызовСервера.ПредставлениеДокументаПриПроведении(Ссылка);;
	
	ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента);
	
	ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоТоварам, Отказ, Заголовок);
	
	// Движения по документу
	Если Не Отказ Тогда
		
		ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, Отказ, Заголовок);
		
	КонецЕсли;
			
	Движения.Хозрасчетный.ВыполнитьДействияПередЗаписьюДвижений();
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКЗаписиДвижений(ЭтотОбъект);
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКОтменеПроведения(ЭтотОбъект);
	Движения.Записать();
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	Дата = НачалоДня(ОбщегоНазначения.ТекущаяДатаПользователя());
	Ответственный = Пользователи.ТекущийПользователь();
	
КонецПроцедуры

#КонецОбласти

#Область Проведение  

// Процедура формирует структуру шапки документа и дополнительных полей.
//
Процедура ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента) Экспорт
		
	// Дерево значений, содержащее имена необходимых полей в запросе по шапке.
	Перем ДеревоПолейЗапросаПоШапке;
	
	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента = ОбщегоНазначенияРед12.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	
	// Заполним по шапке документа дерево параметров, нужных при проведении.
	ДеревоПолейЗапросаПоШапке = ОбщегоНазначенияРед12.СформироватьДеревоПолейЗапросаПоШапке();
	
	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа.
	СтруктураШапкиДокумента = УправлениеЗапасами.СформироватьЗапросПоДеревуПолей(ЭтотОбъект, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета);
	
КонецПроцедуры // ПодготовитьСтруктуруШапкиДокумента()

// Процедура формирует таблицы документа.
//
Процедура ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоТоварам, Отказ, Заголовок) Экспорт
	
	// Получим необходимые данные для проведения и проверки заполенения данные по табличной части "Товары".
	СтруктураПолей 			= Новый Структура;
	СтруктураПростыхПолей	= Новый Структура;
	
	СтруктураПолей.Вставить("НомерСтроки",                 "НомерСтроки");
	СтруктураПолей.Вставить("Номенклатура",                "Номенклатура");
	СтруктураПолей.Вставить("Количество",                  "Количество");
	СтруктураПолей.Вставить("КоличествоВОсновномТопливе" , "КоличествоВОсновномТопливе");
	СтруктураПолей.Вставить("СчетУчетаБУ",                 "СчетУчетаБУ");
	СтруктураПолей.Вставить("НовыйСчетУчетаБУ",            "НовыйСчетУчетаБУ");
	СтруктураПолей.Вставить("НалоговоеНазначение",         "НалоговоеНазначение");
	// Поля необходимы для партионного учета
	СтруктураПолей.Вставить("Склад",                       "Ссылка.СкладОтправитель");
	СтруктураПолей.Вставить("СкладНовый",                  "Ссылка.СкладПолучатель");
	СтруктураПолей.Вставить("КорСчетСписанияБУ",           "НовыйСчетУчетаБУ");
	СтруктураПолей.Вставить("КорСубконтоСписанияБУ1",      "Номенклатура");
	СтруктураПолей.Вставить("КорСубконтоСписанияБУ2",      "Ссылка.СкладПолучатель");
	
	РезультатЗапросаПоТоварам = ОбщегоНазначенияРед12.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураПолей, СтруктураПростыхПолей);
	
	ТаблицаПоТоварам = ПодготовитьТаблицуПоТоварам(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента);
	
КонецПроцедуры

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТоварам - результат запроса по табличной части "Товары",
//  СтруктураШапкиДокумента   - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблица значений.
//
Функция ПодготовитьТаблицуПоТоварам(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента)

	ТаблицаПоТоварам = РезультатЗапросаПоТоварам.Выгрузить();
	
	ТаблицаПоТоварам.Колонки.Добавить("Организация");
	ТаблицаПоТоварам.Колонки.Добавить("ТранспортноеСредство");
	ТаблицаПоТоварам.Колонки.Добавить("СкладОтправитель");
	ТаблицаПоТоварам.Колонки.Добавить("СкладПолучатель");
	ТаблицаПоТоварам.Колонки.Добавить("Регистратор");
	ТаблицаПоТоварам.Колонки.Добавить("ДоговорКонтрагента");
	ТаблицаПоТоварам.Колонки.Добавить("ДокументОприходования");
	
	ТаблицаПоТоварам.ЗаполнитьЗначения(СтруктураШапкиДокумента.Организация,	"Организация");
	ТаблицаПоТоварам.ЗаполнитьЗначения(СтруктураШапкиДокумента.ТранспортноеСредство,	"ТранспортноеСредство");
	ТаблицаПоТоварам.ЗаполнитьЗначения(СтруктураШапкиДокумента.СкладОтправитель,	"СкладОтправитель");
	ТаблицаПоТоварам.ЗаполнитьЗначения(СтруктураШапкиДокумента.СкладПолучатель,	"СкладПолучатель");
	ТаблицаПоТоварам.ЗаполнитьЗначения(ЭтотОбъект,   "Регистратор");
	ТаблицаПоТоварам.ЗаполнитьЗначения(Неопределено, "ДоговорКонтрагента");
	ТаблицаПоТоварам.ЗаполнитьЗначения(Неопределено, "ДокументОприходования");
	
	ТаблицаПоТоварам.Колонки.Добавить("НалоговоеНазначениеНовое", Новый ОписаниеТипов("СправочникСсылка.НалоговыеНазначенияАктивовИЗатрат"));
	ТаблицаПоТоварам.ЗагрузитьКолонку(ТаблицаПоТоварам.ВыгрузитьКолонку("НалоговоеНазначение") , "НалоговоеНазначениеНовое");
		
	Возврат ТаблицаПоТоварам;

КонецФункции

// Проводит табличные части "Товары" по регистрам
//
// Параметры:
//  ТаблицаПоТоварам          - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//	СтруктураШапкиДокумента   - выборка из результата запроса по шапке документа,
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, Отказ, Заголовок)
	
	ДвиженияПоРегистрамТранспорта(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, Отказ, Заголовок);
	ДвиженияПоРегиструПоказанияСпидометраИБака(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, Отказ, Заголовок);
	
	Если ИНАГРО_ОбщийВызовСервераПовтИсп.ЕстьБСПУ() Тогда
		КопияТаблицаПоТоварам = ТаблицаПоТоварам.Скопировать();
		КопияТаблицаПоТоварам.Колонки.Добавить("НаправлениеДвижения");
		КопияТаблицаПоТоварам.ЗаполнитьЗначения(Справочники.ИНАГРО_ВидыДвиженийВедомости.Перемещение, "НаправлениеДвижения");
		ИНАГРО_Общий.ИНАГРО_ВедомостьДвиженийРасход(Движения, КопияТаблицаПоТоварам, СтруктураШапкиДокумента);
		
		КопияТаблицаПоТоварам.Колонки.Склад.Имя = "СкладСтарый";
		КопияТаблицаПоТоварам.Колонки.СкладНовый.Имя = "Склад";
		ИНАГРО_Общий.ИНАГРО_ВедомостьДвиженийПриход(Движения, КопияТаблицаПоТоварам, СтруктураШапкиДокумента);
	КонецЕсли;	
	
	УправлениеЗапасамиПартионныйУчет.ДвижениеПартийТоваров(ТаблицаПоТоварам, Отказ, , НСтр("ru='Перемещение ГСМ';uk='Переміщення ПММ'",Локализация.КодЯзыкаИнформационнойБазы()));
	
КонецПроцедуры

Процедура ДвиженияПоРегистрамТранспорта(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, Отказ, Заголовок)
	 		
	Для Каждого СтрокаТЧ Из ТаблицаПоТоварам Цикл 
		
		Движение = Движения.ИНАГРО_ТопливоВТС.Добавить(); 		
		Движение.Период 	       = СтруктураШапкиДокумента.Дата;
		Движение.ВидДвижения       = ВидДвиженияНакопления.Расход;		
		ЗаполнитьЗначенияСвойств(Движение, СтрокаТЧ);		
		Движение.Организация 	   = СтруктураШапкиДокумента.Организация;
		Движение.ОсновноеСредство  = СтрокаТЧ.ТранспортноеСредство;
		Движение.Топливо 		   = СтрокаТЧ.Номенклатура; 
		Движение.КоличествоТоплива = СтрокаТЧ.Количество;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДвиженияПоРегиструПоказанияСпидометраИБака(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, Отказ, Заголовок)
	
	ВыборкаПоИтогамТоплива = ПодготовитьТаблицуПоказанийБака().Выбрать();	
	
	Пока ВыборкаПоИтогамТоплива.Следующий() Цикл
				
		Показания = ИНАГРО_Транспорт.ПолучитьПоказанияСпидометраИБака(СтруктураШапкиДокумента.Дата, СтруктураШапкиДокумента.ТранспортноеСредство, СтруктураШапкиДокумента.Ссылка);
		
		Движение = Движения.ИНАГРО_ПоказанияСпидометраИБака.Добавить();
		Движение.Период 		 	 = СтруктураШапкиДокумента.Дата;
		Движение.ОсновноеСредство 	 = СтруктураШапкиДокумента.ТранспортноеСредство;
		Движение.ПоказанияБака		 = Показания.ПоказанияБака - ВыборкаПоИтогамТоплива.КоличествоВОсновномТопливе;     
		Движение.ПоказанияСпидометра = Показания.ПоказанияСпидометра;
		
	КонецЦикла; 
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПодготовитьТаблицуПоказанийБака()
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СливТоплива.Ссылка.ТранспортноеСредство,
		|	СУММА(СливТоплива.КоличествоВОсновномТопливе) КАК КоличествоВОсновномТопливе
		|ИЗ
		|	Документ.ИНАГРО_СливТоплива.Товары КАК СливТоплива
		|ГДЕ
		|	СливТоплива.Ссылка = &Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	СливТоплива.Ссылка.ТранспортноеСредство";
	
	Запрос.УстановитьПараметр("Ссылка", ЭтотОбъект.Ссылка);
	
	Возврат Запрос.Выполнить();
	
КонецФункции

#КонецОбласти

#КонецЕсли