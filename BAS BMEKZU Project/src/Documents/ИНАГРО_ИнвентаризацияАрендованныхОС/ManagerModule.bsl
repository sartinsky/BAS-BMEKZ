#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область ПроцедурыИФункцииПечати

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	 
	// Инвентаризационная опись ОС (ИНВ-1)
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ИНВ1";
	КомандаПечати.Представление = НСтр("ru='(устар.) Инвентаризационная опись ОС';uk='(застар.) Інвентаризаційний опис ОС'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечати";

	
	// Сличительная ведомость (ИНВ-18)
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ИНВ18";
	КомандаПечати.Представление = НСтр("ru='(устар.) Сличительная ведомость';uk='(застар.) Порівнювальна відомість'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечати";
	
	// Приказ о проведении инвентаризации (ИНВ-22)
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ИНВ22";
	КомандаПечати.Представление = НСтр("ru='Приказ о проведении инвентаризации';uk='Наказ про проведення інвентаризації'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечати";
	
	// Инвентарный список ОС (ОЗ-9)
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ОЗ9";
	КомандаПечати.Представление = НСтр("ru='Форма ОЗ-9';uk='Форма ОЗ-9'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечати";
	
	// Реестр документов
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "Реестр";
	КомандаПечати.Представление = НСтр("ru='Реестр документов';uk='Реєстр документів'");
	КомандаПечати.ЗаголовокФормы= НСтр("ru='Реестр документов ""Инвентаризация арендованных ОС""';uk='Реєстр документів ""Інвентаризація орендованих ОЗ""'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечатиРеестраДокументов";
	КомандаПечати.СписокФорм    = "ФормаСписка";
	КомандаПечати.Порядок       = 100;
	
КонецПроцедуры

Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	// Устанавливаем признак доступности печати покомплектно.
	ПараметрыВывода.ДоступнаПечатьПоКомплектно = Истина;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ИНВ1") Тогда
		
		// Формируем табличный документ и добавляем его в коллекцию печатных форм.
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "ИНВ1", НСтр("ru='ИНВ-1 (Инвентаризационная опись)';uk='ІНВ-1 (Інвентаризаційний опис)'"), 
		ПечатьИНВ1(МассивОбъектов, ОбъектыПечати, ПараметрыВывода), , "Документ.ИНАГРО_ИнвентаризацияАрендованныхОС.ПФ_MXL_ИНВ1", , Истина);
		
	КонецЕсли;
		
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ИНВ18") Тогда
		
		// Формируем табличный документ и добавляем его в коллекцию печатных форм.
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "ИНВ18", НСтр("ru='ИНВ-18 (Сличительная ведомость)';uk='ІНВ-18 (Порівняльна відомість)'"), 
			ПечатьИНВ18(МассивОбъектов, ОбъектыПечати, ПараметрыВывода), , "Документ.ИНАГРО_ИнвентаризацияАрендованныхОС.ПФ_MXL_ИНВ18", , Истина);
		
	КонецЕсли;
		
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ИНВ22") Тогда
		
		// Формируем табличный документ и добавляем его в коллекцию печатных форм.
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "ИНВ22",НСтр("ru='ИНВ-22 (Приказ о проведении инвентаризации)';uk='ІНВ-22 (Наказ про проведення інвентаризації)'"), 
			ПечатьИНВ22(МассивОбъектов, ОбъектыПечати, ПараметрыВывода), , "ОбщийМакет.ПФ_MXL_ИНВ22", , Истина);
		
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ОЗ9") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,"ОЗ9", НСтр("ru='Форма ОЗ-9';uk='Форма ОЗ-9'"), 
			ПечатьОЗ9(МассивОбъектов, ОбъектыПечати, ПараметрыВывода), , "Документ.ИНАГРО_ИнвентаризацияАрендованныхОС.ПФ_MXL_ОЗ9", ,Истина);
		
		КонецЕсли;
		
	КонецПроцедуры

// Функция формирует табличный документ по регламентированной форме ОЗ-9
//
// Возвращаемое значение:
//  Табличный документ - печатная форма накладной
Функция ПечатьОЗ9(МассивОбъектов, ОбъектыПечати, ПараметрыВывода)
	УстановитьПривилегированныйРежим(Истина);

	ТабличныйДокумент         = Новый ТабличныйДокумент();
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ИНАГРО_ИнвентаризацияАрендованныхОС.ПФ_MXL_ОЗ9");
	
	ПервыйДокумент = Истина;
	
	Для Каждого Ссылка Из МассивОбъектов Цикл	
		
		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ПервыйДокумент = Ложь;
		
		// Запомним номер строки, с которой начали выводить текущий документ.
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		Запрос = Новый Запрос();
		Запрос.УстановитьПараметр("Ссылка",         Ссылка);
		Запрос.УстановитьПараметр("ТекДата",        Ссылка.МоментВремени());
		Запрос.УстановитьПараметр("ТекОрганизация", Ссылка.Организация);
		
		Запрос.Текст = "ВЫБРАТЬ
		|	ИнвентаризацияОС.Дата                                   КАК ДатаАкта,
		|	ИнвентаризацияОС.Номер                                  КАК НомерАкта,
		|	ИнвентаризацияОС.ПодразделениеОрганизации.Представление КАК Подразделение,
		|	ВЫРАЗИТЬ(ИнвентаризацияОС.Организация.НаименованиеПолное 
		|	                          КАК СТРОКА(1000))             КАК Организация,
		|	ИнвентаризацияОС.Организация.КодПоЕДРПОУ                КАК ЕДРПОУ
		|ИЗ
		|	Документ.ИНАГРО_ИнвентаризацияАрендованныхОС КАК ИнвентаризацияОС
		|ГДЕ
		|	ИнвентаризацияОС.Ссылка = &Ссылка";
		
		// печать производится на языке, указанном в настройках пользователя
		КодЯзыкаПечать = ПараметрыВывода.КодЯзыкаДляМногоязычныхПечатныхФорм;
		Макет.КодЯзыкаМакета = КодЯзыкаПечать;

		
		
		ВыборкаПоШапке = Запрос.Выполнить().Выбрать();
		ВыборкаПоШапке.Следующий();
		
		СписокОС = Ссылка.ОС.ВыгрузитьКолонку("ОсновноеСредство");
		
		Запрос = Новый Запрос();
		Запрос.УстановитьПараметр("ДатаДок"             , Ссылка.Дата);
		Запрос.УстановитьПараметр("МоментДок"           , Ссылка.МоментВремени());
		Запрос.УстановитьПараметр("Организация"         , Ссылка.Организация);
		Запрос.УстановитьПараметр("Ссылка"              , Ссылка.Ссылка);
		Запрос.УстановитьПараметр("СписокОС"            , СписокОС);
		Запрос.УстановитьПараметр("СостояниеСнятоСУчета", Перечисления.СостоянияОС.СнятоСУчета);
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПервоначальныеСведенияОС.Период                        КАК ДатаДок,
		|	ПервоначальныеСведенияОС.Регистратор.Номер             КАК НомерДок,
		|	ПервоначальныеСведенияОС.ИнвентарныйНомер              КАК ИнвентарныйНомер,
		|	ИнвентаризацияОСОС.ОсновноеСредство.НаименованиеПолное КАК НаименованиеОС,
		|	ПервоначальныеСведенияОС.ПервоначальнаяСтоимость       КАК БалансоваяСтоимость,
		|	СостояниеОС.НомерСписания                              КАК НомерСписания,
		|	СостояниеОС.ДатаСписания                               КАК ДатаСписания,
		|	СостояниеОС.ПричинаСписания                            КАК ПричинаСписания
		|ИЗ
		|	Документ.ИНАГРО_ИнвентаризацияАрендованныхОС.ОС КАК ИнвентаризацияОСОС
		|		ЛЕВОЕ СОЕДИНЕНИЕ 
		|			РегистрСведений.ПервоначальныеСведенияОСБухгалтерскийУчет.СрезПоследних(
		|			               &МоментДок,
		|			               Организация = &Организация
		|			               И ОсновноеСредство В (&СписокОС)) КАК ПервоначальныеСведенияОС
		|		ПО ИнвентаризацияОСОС.ОсновноеСредство = ПервоначальныеСведенияОС.ОсновноеСредство
		|		ЛЕВОЕ СОЕДИНЕНИЕ 
		|			(ВЫБРАТЬ
		|				СостоянияОС.ОсновноеСредство  КАК ОсновноеСредство,
		|				СостоянияОС.Регистратор.Номер КАК НомерСписания,
		|				СостоянияОС.ДатаСостояния     КАК ДатаСписания,
		|				ВЫБОР
		|					КОГДА СостоянияОС.Регистратор ССЫЛКА Документ.СписаниеОС
		|						ТОГДА СостоянияОС.Регистратор.ПричинаСписания
		|					ИНАЧЕ ""Передача""
		|				КОНЕЦ                         КАК ПричинаСписания
		|			ИЗ
		|				РегистрСведений.СостоянияОСОрганизаций КАК СостоянияОС
		|			ГДЕ
		|				СостоянияОС.Организация = &Организация
		|				И СостоянияОС.ОсновноеСредство В(&СписокОС)
		|				И СостоянияОС.Состояние = &СостояниеСнятоСУчета
		|				И СостоянияОС.ДатаСостояния <= &ДатаДок) КАК СостояниеОС
		|		ПО ИнвентаризацияОСОС.ОсновноеСредство = СостояниеОС.ОсновноеСредство
		|ГДЕ
		|	ИнвентаризацияОСОС.Ссылка = &Ссылка";
		
		
		ВыборкаПоОС = Запрос.Выполнить().Выбрать();
		
		ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
		ОбластьМакета.Параметры.Заполнить(ВыборкаПоШапке);
		ОбластьМакета.Параметры.Организация = СокрП(ВыборкаПоШапке.Организация);
		
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		Номера = Макет.ПолучитьОбласть("Номера");
		ТабличныйДокумент.Вывести(Номера);
		ТабличныйДокумент.ПовторятьПриПечатиСтроки = ТабличныйДокумент.Область("R"+ ТабличныйДокумент.ВысотаТаблицы);
		
		ОбластьСтрока = Макет.ПолучитьОбласть("Строка");
		
		Пока ВыборкаПоОС.Следующий() Цикл
			
			ОбластьСтрока.Параметры.Заполнить(ВыборкаПоОС);
			ТабличныйДокумент.Вывести(ОбластьСтрока);
			
		КонецЦикла;
	
		// В табличном документе зададим имя области, в которую был 
		// выведен объект. Нужно для возможности печати покомплектно.
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Ссылка);

	КонецЦикла;	
	
	Возврат ТабличныйДокумент;

КонецФункции // ПечатьОЗ9()

Функция ПечатьИНВ1(МассивОбъектов, ОбъектыПечати, ПараметрыВывода)
	УстановитьПривилегированныйРежим(Истина);
	
	УстановитьПривилегированныйРежим(Истина);
	
	ВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	
	// Создаем колонки Таблицы итогов
	ТаблицаИтогов = Новый ТаблицаЗначений();
	ТаблицаИтогов.Колонки.Добавить("ПорядковыйНомерИтогов");
	ТаблицаИтогов.Колонки.Добавить("ИтогНаличиеФактическое");
	ТаблицаИтогов.Колонки.Добавить("ИтогСтоимостьФактическая");
	ТаблицаИтогов.Колонки.Добавить("ИтогНаличиеПоДаннымУчета");
	ТаблицаИтогов.Колонки.Добавить("ИтогСтоимостьПоДаннымУчета");
	ТаблицаИтогов.Колонки.Добавить("КоличествоФактическоеПрописью");
	ТаблицаИтогов.Колонки.Добавить("СтоимостьФактическаяПрописью");
	
	// печать производится на языке, указанном в настройках пользователя
	КодЯзыкаПечать = ПараметрыВывода.КодЯзыкаДляМногоязычныхПечатныхФорм;
	
	// Варианты заголовков разделов с подписями печатной формы	
	ЗаголовокРазделаПодписей = Новый Структура();
	ЗаголовокРазделаПодписей.Вставить("МОЛ",                  НСтр("ru='Лицо(а), ответственное(ые) за сохранность основных средств:';uk='Особа(и), відповідальна(і) за схоронність основних засобів:'", КодЯзыкаПечать));
	ЗаголовокРазделаПодписей.Вставить("ПредседательКомиссии", НСтр("ru='Председатель комиссии';uk='Голова комісії'", КодЯзыкаПечать));
	ЗаголовокРазделаПодписей.Вставить("ЧленыКомиссии",        НСтр("ru='Члены комиссии';uk='Члени комісії'", КодЯзыкаПечать));
	ЗаголовокРазделаПодписей.Вставить("Проверяющий",          НСтр("ru='Указанные в настоящей описи данные и расчеты проверил';uk='Вказані в даному описі дані й розрахунки перевірив'", КодЯзыкаПечать));
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	ТабличныйДокумент.АвтоМасштаб = Истина;
	ТабличныйДокумент.ПолеСверху              = 10;
	ТабличныйДокумент.РазмерКолонтитулаСверху = 10;
	ТабличныйДокумент.ПолеСлева		          = 10;
	ТабличныйДокумент.ПолеСправа    	      = 10;
	ТабличныйДокумент.ОриентацияСтраницы      = ОриентацияСтраницы.Ландшафт;
	ТабличныйДокумент.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ИнвентаризацияОС_ИНВ1";
		
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ИНАГРО_ИнвентаризацияАрендованныхОС.ПФ_MXL_ИНВ1");
	Макет.КодЯзыкаМакета = КодЯзыкаПечать;
	
	// Получаем области макета для вывода в табличный документ
	Шапка            = Макет.ПолучитьОбласть("Шапка");
	Расписка         = Макет.ПолучитьОбласть("Расписка");
	Примечание       = Макет.ПолучитьОбласть("Примечание");
	Подпись          = Макет.ПолучитьОбласть("Подпись");
	ПолеДаты         = Макет.ПолучитьОбласть("ПолеДаты");
	ЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
	ИтогоПоСтранице  = Макет.ПолучитьОбласть("ИтогоПоСтранице");
	ИтогоПоОписи     = Макет.ПолучитьОбласть("ИтогоПоОписи");
	Итоги            = Макет.ПолучитьОбласть("Итоги");
	Подсчеты         = Макет.ПолучитьОбласть("Подсчеты");
	Претензии        = Макет.ПолучитьОбласть("Претензии");
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ИнвентаризацияОСОС.Ссылка КАК Ссылка,
	|	ИнвентаризацияОСОС.Ссылка.Дата КАК Дата,
	|	ИнвентаризацияОСОС.НомерСтроки КАК НомерСтроки,
	|	ИнвентаризацияОСОС.ОсновноеСредство КАК ОсновноеСредство,
	|	ИнвентаризацияОСОС.Ссылка.Организация КАК Организация,
	|	ИнвентаризацияОСОС.СтоимостьПоДаннымУчета КАК СтоимостьПоДаннымУчета,
	|	ИнвентаризацияОСОС.СтоимостьФактическая КАК СтоимостьФактическая,
	|	ВЫБОР
	|		КОГДА ИнвентаризацияОСОС.НаличиеПоДаннымУчета = ИСТИНА
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК НаличиеПоДаннымУчета,
	|	ВЫБОР
	|		КОГДА ИнвентаризацияОСОС.НаличиеФактическое = ИСТИНА
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК НаличиеФактическое,
	|	МАКСИМУМ(МестонахождениеОСБухгалтерскийУчет.Период) КАК МаксПериодМеста,
	|	МАКСИМУМ(ПервоначальныеСведенияОСБухгалтерскийУчет.Период) КАК МаксПериодБУ
	|ПОМЕСТИТЬ ОСИОрганизации
	|ИЗ
	|	Документ.ИНАГРО_ИнвентаризацияАрендованныхОС.ОС КАК ИнвентаризацияОСОС
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МестонахождениеОСБухгалтерскийУчет КАК МестонахождениеОСБухгалтерскийУчет
	|		ПО ИнвентаризацияОСОС.ОсновноеСредство = МестонахождениеОСБухгалтерскийУчет.ОсновноеСредство
	|			И ИнвентаризацияОСОС.Ссылка.Организация = МестонахождениеОСБухгалтерскийУчет.Организация
	|			И ИнвентаризацияОСОС.Ссылка.Дата >= МестонахождениеОСБухгалтерскийУчет.Период
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПервоначальныеСведенияОСБухгалтерскийУчет КАК ПервоначальныеСведенияОСБухгалтерскийУчет
	|		ПО ИнвентаризацияОСОС.ОсновноеСредство = ПервоначальныеСведенияОСБухгалтерскийУчет.ОсновноеСредство
	|			И ИнвентаризацияОСОС.Ссылка.Организация = ПервоначальныеСведенияОСБухгалтерскийУчет.Организация
	|			И ИнвентаризацияОСОС.Ссылка.Дата >= ПервоначальныеСведенияОСБухгалтерскийУчет.Период
	|ГДЕ
	|	ИнвентаризацияОСОС.Ссылка В(&МассивОбъектов)
	|
	|СГРУППИРОВАТЬ ПО
	|	ИнвентаризацияОСОС.Ссылка,
	|	ИнвентаризацияОСОС.ОсновноеСредство,
	|	ИнвентаризацияОСОС.СтоимостьПоДаннымУчета,
	|	ИнвентаризацияОСОС.СтоимостьФактическая,
	|	ИнвентаризацияОСОС.НомерСтроки,
	|	ИнвентаризацияОСОС.Ссылка.Организация,
	|	ВЫБОР
	|		КОГДА ИнвентаризацияОСОС.НаличиеПоДаннымУчета = ИСТИНА
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ИнвентаризацияОСОС.НаличиеФактическое = ИСТИНА
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	ИнвентаризацияОСОС.Ссылка.Дата
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство,
	|	Организация,
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОСИОрганизации.Ссылка,
	|	ОСИОрганизации.НомерСтроки,
	|	ОСИОрганизации.ОсновноеСредство,
	|	ОСИОрганизации.Организация,
	|	ОСИОрганизации.СтоимостьПоДаннымУчета,
	|	ОСИОрганизации.СтоимостьФактическая,
	|	ОСИОрганизации.НаличиеПоДаннымУчета,
	|	ОСИОрганизации.НаличиеФактическое,
	|	ОСИОрганизации.МаксПериодМеста,
	|	ОСИОрганизации.МаксПериодБУ,
	|	ПервоначальныеСведенияОСБухгалтерскийУчет.ИнвентарныйНомер КАК ИнвентарныйНомер,
	|	ЕСТЬNULL(МестонахождениеОСБухгалтерскийУчет.МОЛ, НЕОПРЕДЕЛЕНО) КАК МОЛ
	|ПОМЕСТИТЬ ОСИСведения
	|ИЗ
	|	ОСИОрганизации КАК ОСИОрганизации
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МестонахождениеОСБухгалтерскийУчет КАК МестонахождениеОСБухгалтерскийУчет
	|		ПО ОСИОрганизации.ОсновноеСредство = МестонахождениеОСБухгалтерскийУчет.ОсновноеСредство
	|			И ОСИОрганизации.Организация = МестонахождениеОСБухгалтерскийУчет.Организация
	|			И ОСИОрганизации.МаксПериодМеста = МестонахождениеОСБухгалтерскийУчет.Период
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПервоначальныеСведенияОСБухгалтерскийУчет КАК ПервоначальныеСведенияОСБухгалтерскийУчет
	|		ПО ОСИОрганизации.ОсновноеСредство = ПервоначальныеСведенияОСБухгалтерскийУчет.ОсновноеСредство
	|			И ОСИОрганизации.Организация = ПервоначальныеСведенияОСБухгалтерскийУчет.Организация
	|			И ОСИОрганизации.МаксПериодБУ = ПервоначальныеСведенияОСБухгалтерскийУчет.Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ИнвентаризацияОС.Ссылка КАК Ссылка,
	|	ИнвентаризацияОС.Дата КАК Дата,
	|	ОСИСведения.МОЛ
	|ИЗ
	|	Документ.ИНАГРО_ИнвентаризацияАрендованныхОС КАК ИнвентаризацияОС
	|		ЛЕВОЕ СОЕДИНЕНИЕ ОСИСведения КАК ОСИСведения
	|		ПО ИнвентаризацияОС.Ссылка = ОСИСведения.Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата,
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИнвентаризацияОС.Ссылка КАК Ссылка,
	|	ИнвентаризацияОС.Дата КАК Дата,
	|	ИнвентаризацияОС.Номер КАК Номер,
	|	ИнвентаризацияОС.Организация КАК Организация,
	|	ИнвентаризацияОС.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	|	ИнвентаризацияОС.ПодразделениеОрганизации.Представление КАК ПодразделениеПредставление,
	|	ИнвентаризацияОС.ДатаНачалаИнвентаризации КАК ДатаНачалаИнвентаризации,
	|	ИнвентаризацияОС.ДатаОкончанияИнвентаризации КАК ДатаОкончанияИнвентаризации,
	|	ИнвентаризацияОС.ДокументОснованиеВид КАК ДокументОснованиеВид,
	|	ИнвентаризацияОС.ДокументОснованиеДата КАК ДокументОснованиеДата,
	|	ИнвентаризацияОС.ДокументОснованиеНомер КАК ДокументОснованиеНомер,
	|	ОСИСведения.НомерСтроки КАК НомерСтроки,
	|	ОСИСведения.НомерСтроки КАК МинНомерСтроки,
	|	ОСИСведения.НомерСтроки КАК МаксНомерСтроки,
	|	ОСИСведения.ОсновноеСредство,
	|	ВЫБОР
	|		КОГДА ОСИСведения.ОсновноеСредство.НаименованиеПолное ПОДОБНО """"
	|			ТОГДА ОСИСведения.ОсновноеСредство.Наименование
	|		ИНАЧЕ ОСИСведения.ОсновноеСредство.НаименованиеПолное
	|	КОНЕЦ КАК ОсновноеСредствоНаименованиеПолное,
	|	ОСИСведения.ОсновноеСредство.ДатаВыпуска КАК ДатаВыпуска,
	|	ОСИСведения.ОсновноеСредство.ЗаводскойНомер КАК ЗаводскойНомер,
	|	ОСИСведения.ОсновноеСредство.НомерПаспорта КАК НомерПаспорта,
	|	ОСИСведения.СтоимостьПоДаннымУчета,
	|	ОСИСведения.СтоимостьФактическая КАК СтоимостьФактическая,
	|	ОСИСведения.НаличиеПоДаннымУчета КАК НаличиеПоДаннымУчета,
	|	ОСИСведения.НаличиеФактическое КАК НаличиеФактическое,
	|	ОСИСведения.МаксПериодМеста,
	|	ОСИСведения.МаксПериодБУ,
	|	ОСИСведения.ИнвентарныйНомер,
	|	ИнвентаризацияОС.Контрагент  КАК  Арендодатель
	|ИЗ
	|	ОСИСведения КАК ОСИСведения
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ИНАГРО_ИнвентаризацияАрендованныхОС КАК ИнвентаризацияОС
	|		ПО ОСИСведения.Ссылка = ИнвентаризацияОС.Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата,
	|	Ссылка,
	|	ОСИСведения.НомерСтроки";
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	ВыборкаМОЛ = РезультатЗапроса[2].Выбрать();
	Док = РезультатЗапроса[3].Выбрать();
	
	ПервыйДокумент = Истина;
	
	ОбработаныОбъекты = Ложь;
	Пока Док.СледующийПоЗначениюПоля("Ссылка") Цикл
		
		ОбработаныОбъекты = Истина;
		Если НЕ ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		ТаблицаИтогов.Очистить();
		
		ВыборкаПоКомиссии = ОбщегоНазначенияБПВызовСервера.ПолучитьСведенияОКомиссии(Док.Ссылка);
		
		РежимСобственности = НСтр("ru='в собственности';uk='у власності'", КодЯзыкаПечать);
		
		//////////////////////////////////////////////////////////////////////
		// 1-я страница формы
		
		// Выведем шапку документа
		СведенияОбОрганизации = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Док.Организация, Док.Дата);
		
		Шапка.Параметры.Заполнить(Док);
		Шапка.Параметры.Организация          = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОбОрганизации,,,КодЯзыкаПечать);
		Шапка.Параметры.ОрганизацияКодПоОКПО = БухгалтерскийУчетПереопределяемый.ПолучитьКодОрганизации(СведенияОбОрганизации);
		Шапка.Параметры.РежимСобственности   = РежимСобственности;
		Шапка.Параметры.Подразделение        = Док.ПодразделениеПредставление;
		Шапка.Параметры.Местонахождение      = Док.ПодразделениеПредставление;
		
		Шапка.Параметры.НомерДокумента = ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(Док.Номер, Истина, Истина);
		Шапка.Параметры.ДатаДокумента  = Док.Дата;
		
		ТабличныйДокумент.Вывести(Шапка);
		
		// Выведем расписку МОЛов 
		ТабличныйДокумент.Вывести(Расписка);
		
		// Выборка по МОЛ обходится синхронно с выборкой документов
		ВыборкаМОЛ.СледующийПоЗначениюПоля("Ссылка");
		МассивМОЛ = Новый Массив;
		Пока ВыборкаМОЛ.Следующий() Цикл
			Если МассивМОЛ.Найти(ВыборкаМОЛ.МОЛ) = Неопределено Тогда
				МассивМОЛ.Добавить(ВыборкаМОЛ.МОЛ);
			КонецЕсли;
		КонецЦикла;
		
		// Выведем подписи МОЛов
		ВыводитьЗаголовок  = Истина; // Флаг вывода заголовка набора подписей
		ВыводитьПримечание = Истина; // Флаг вывода примечания-звездочки
		
		ДанныеМОЛ = ОбщегоНазначенияБПВызовСервера.ДанныеФизЛиц(Док.Организация, МассивМОЛ, Док.Дата);
		
		// Сначала выведем МОЛов из выборки
		Для каждого СтрокаМОЛ Из ДанныеМОЛ Цикл
			
			ПодписьСПримечанием = Новый Массив;
			ПодписьСПримечанием.Добавить(Подпись);
			ПодписьСПримечанием.Добавить(Примечание);
			
			Если НЕ ОбщегоНазначенияБПВызовСервера.ПроверитьВыводТабличногоДокумента(ТабличныйДокумент, ПодписьСПримечанием) Тогда
				
				// Выведем примечание
				ТабличныйДокумент.Вывести(Примечание);
				ВыводитьПримечание = Ложь;
				
				// Выведем разрыв страницы
				ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				ВыводитьЗаголовок = Истина; // на новой странице выведем заголовок набора подписей
				
			КонецЕсли;
			
			Подпись.Параметры.Должность = "";
			Если ЗначениеЗаполнено(СтрокаМОЛ.Сотрудник) Тогда
				ДанныеФизЛица = ИНАГРО_ЗарплатаКадрыРасширенный.ДанныеФизЛица(Док.Организация, СтрокаМОЛ.Сотрудник.ФизическоеЛицо, Док.Дата);
				Подпись.Параметры.Должность                = ДанныеФизЛица.Должность;
			КонецЕсли;
			
			Подпись.Параметры.ЗаголовокРазделаПодписей = ?(ВыводитьЗаголовок, ЗаголовокРазделаПодписей.МОЛ, "");
			Подпись.Параметры.РасшифровкаПодписи       = СтрокаМОЛ.Представление;
			
			ТабличныйДокумент.Вывести(Подпись);
			
			ВыводитьЗаголовок = Ложь; // в следующей итерации вывод заголовка не нужен
			
		КонецЦикла;
		
		// Затем выведем пустые места для подписей (чтобы в итоге получилось не менее 3-х
		// подписей, как в форме, утвержденной Госкомстатом)
		Если ДанныеМОЛ.Количество() < 3 Тогда
			
			ПодписьСПримечанием = Новый Массив;
			ПодписьСПримечанием.Добавить(Подпись);
			ПодписьСПримечанием.Добавить(Примечание);
			
			Если НЕ ОбщегоНазначенияБПВызовСервера.ПроверитьВыводТабличногоДокумента(ТабличныйДокумент, ПодписьСПримечанием) Тогда
				
				// Выведем примечание
				ТабличныйДокумент.Вывести(Примечание);
				ВыводитьПримечание = Ложь;
				
				// Выведем разрыв страницы
				ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				ВыводитьЗаголовок = Истина; // на новой странице выведем заголовок набора подписей
				
			КонецЕсли;
			
			Для Итератор = ДанныеМОЛ.Количество() + 1 По 3 Цикл
				
				Подпись.Параметры.ЗаголовокРазделаПодписей = ?(ВыводитьЗаголовок, ЗаголовокРазделаПодписей.МОЛ, "");
				Подпись.Параметры.Должность                = "";
				Подпись.Параметры.РасшифровкаПодписи       = "";
				
				ТабличныйДокумент.Вывести(Подпись);
				
				ВыводитьЗаголовок = Ложь; // в следующей итерации вывод заголовка не нужен
				
			КонецЦикла;
			
		КонецЕсли;
		
		// Выведем примечание
		Если ВыводитьПримечание Тогда
			ТабличныйДокумент.Вывести(Примечание);
		КонецЕсли;
		
		// Выведем разрыв страницы
		ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		
		//////////////////////////////////////////////////////////////////////
		// 2-я страница формы
		
		// Выведем заголовок таблицы	
		ТабличныйДокумент.Вывести(ЗаголовокТаблицы);
		
		ПорядковыйНомерИтогов = 1; // счетчик количества итоговых строк в таблице
		
		НаличиеФактическоеПоСтранице          = 0;
		СтоимостьФактическаяПоСтранице        = 0;
		НаличиеПоДаннымУчетаПоСтранице        = 0;
		СтоимостьПоДаннымУчетаПоСтранице      = 0;
		КоличествоПорядковыхНомеровНаСтранице = 0;
		
		НаличиеФактическоеПоОписи          = 0;
		СтоимостьФактическаяПоОписи        = 0;
		КоличествоПорядковыхНомеровПоОписи = 0;
		
		// Выведем строки таблицы
		Пока Док.Следующий() Цикл
			
			СтрокаТаблицы = Макет.ПолучитьОбласть("СтрокаТаблицы");
			
			СтрокаТаблицы.Параметры.Заполнить(Док);
			
			// Присвоим имена с номерами строк областям таблицы.
			// Номера потребуются для включения/отключения видимости значений в ячейках.
			СтрокаТаблицы.Области.НаличиеФактическое.Имя     = "НаличиеФактическое"        + Формат(Док.НомерСтроки, "ЧДЦ=0; ЧН=; ЧГ=");
			СтрокаТаблицы.Области.СтоимостьФактическая.Имя   = "СтоимостьФактическая"      + Формат(Док.НомерСтроки, "ЧДЦ=0; ЧН=; ЧГ=");
			СтрокаТаблицы.Области.НаличиеПоДаннымУчета.Имя   = "НаличиеПоДаннымУчета"      + Формат(Док.НомерСтроки, "ЧДЦ=0; ЧН=; ЧГ=");
			СтрокаТаблицы.Области.СтоимостьПоДаннымУчета.Имя = "СтоимостьПоДаннымУчета"    + Формат(Док.НомерСтроки, "ЧДЦ=0; ЧН=; ЧГ=");
			
			СтрокаСПодвалом = Новый Массив;
			СтрокаСПодвалом.Добавить(СтрокаТаблицы);
			СтрокаСПодвалом.Добавить(ИтогоПоСтранице);
			СтрокаСПодвалом.Добавить(Итоги);
			
			Если НЕ ОбщегоНазначенияБПВызовСервера.ПроверитьВыводТабличногоДокумента(ТабличныйДокумент, СтрокаСПодвалом) Тогда
				
				ИтогоПоСтранице = Макет.ПолучитьОбласть("ИтогоПоСтранице");
				
				// Присвоим имена с порядковыми номерами итогов областям таблицы.
				// Номера потребуются для включения/отключения видимости значений в ячейках.
				ИтогоПоСтранице.Области.ИтогНаличиеФактическое.Имя     = "ИтогНаличиеФактическое"     + Формат(ПорядковыйНомерИтогов, "ЧДЦ=0; ЧН=; ЧГ=");
				ИтогоПоСтранице.Области.ИтогСтоимостьФактическая.Имя   = "ИтогСтоимостьФактическая"   + Формат(ПорядковыйНомерИтогов, "ЧДЦ=0; ЧН=; ЧГ=");
				ИтогоПоСтранице.Области.ИтогНаличиеПоДаннымУчета.Имя   = "ИтогНаличиеПоДаннымУчета"   + Формат(ПорядковыйНомерИтогов, "ЧДЦ=0; ЧН=; ЧГ=");
				ИтогоПоСтранице.Области.ИтогСтоимостьПоДаннымУчета.Имя = "ИтогСтоимостьПоДаннымУчета" + Формат(ПорядковыйНомерИтогов, "ЧДЦ=0; ЧН=; ЧГ=");
				
				// Выведем заголовок итогов по странице
				ИтогоПоСтранице.Параметры.ИтогСтоимостьФактическая   = СтоимостьФактическаяПоСтранице;
				ИтогоПоСтранице.Параметры.ИтогНаличиеФактическое     = НаличиеФактическоеПоСтранице;
				ИтогоПоСтранице.Параметры.ИтогСтоимостьПоДаннымУчета = СтоимостьПоДаннымУчетаПоСтранице;
				ИтогоПоСтранице.Параметры.ИтогНаличиеПоДаннымУчета   = НаличиеПоДаннымУчетаПоСтранице;
				
				ТабличныйДокумент.Вывести(ИтогоПоСтранице);
				
				Итоги = Макет.ПолучитьОбласть("Итоги");
				
				// Присвоим имена с порядковыми номерами итогов областям таблицы.
				// Номера потребуются для включения/отключения видимости значений в ячейках.
				Итоги.Области.КоличествоФактическоеПрописью.Имя   = "КоличествоФактическоеПрописью" + Формат(ПорядковыйНомерИтогов, "ЧДЦ=0; ЧН=; ЧГ=");
				Итоги.Области.СтоимостьФактическаяПрописью.Имя    = "СтоимостьФактическаяПрописью"  + Формат(ПорядковыйНомерИтогов, "ЧДЦ=0; ЧН=; ЧГ=");
				
				КоличествоФактическоеПрописью = ЧислоПрописью(НаличиеФактическоеПоСтранице,"Л="+Локализация.ОпределитьКодЯзыкаДляФормат(КодЯзыкаПечать), ",,,ж,,,,,0");
				СтоимостьФактическаяПрописью  = ОбщегоНазначенияБПВызовСервера.СформироватьСуммуПрописью(СтоимостьФактическаяПоСтранице, ВалютаРегламентированногоУчета, КодЯзыкаПечать);
				
				// Выведем итоговые строки
				Итоги.Параметры.КоличествоПорядковыхНомеровПрописью = ЧислоПрописью(КоличествоПорядковыхНомеровНаСтранице,"Л="+Локализация.ОпределитьКодЯзыкаДляФормат(КодЯзыкаПечать), ",,,м,,,,,0");
				Итоги.Параметры.КоличествоФактическоеПрописью       = КоличествоФактическоеПрописью;
				Итоги.Параметры.СтоимостьФактическаяПрописью        = СтоимостьФактическаяПрописью;
				
				ТабличныйДокумент.Вывести(Итоги);
				
				// Добавим значения итогов по странице в таблицу итогов.
				// Они потребуются при включении видимости значений ячеек.
				НоваяСтрока = ТаблицаИтогов.Добавить();
				НоваяСтрока.ПорядковыйНомерИтогов         = ПорядковыйНомерИтогов;
				НоваяСтрока.ИтогНаличиеФактическое        = НаличиеФактическоеПоСтранице;
				НоваяСтрока.ИтогСтоимостьФактическая      = СтоимостьФактическаяПоСтранице;
				НоваяСтрока.ИтогНаличиеПоДаннымУчета      = НаличиеПоДаннымУчетаПоСтранице;
				НоваяСтрока.ИтогСтоимостьПоДаннымУчета    = СтоимостьПоДаннымУчетаПоСтранице;
				НоваяСтрока.КоличествоФактическоеПрописью = КоличествоФактическоеПрописью;
				НоваяСтрока.СтоимостьФактическаяПрописью  = СтоимостьФактическаяПрописью;
				
				ПорядковыйНомерИтогов = ПорядковыйНомерИтогов + 1;
				
				// Выведем разрыв страницы
				ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				
				// Выведем заголовок таблицы	
				ТабличныйДокумент.Вывести(ЗаголовокТаблицы);
				
				НаличиеФактическоеПоСтранице          = 0;
				СтоимостьФактическаяПоСтранице        = 0;
				НаличиеПоДаннымУчетаПоСтранице        = 0;
				СтоимостьПоДаннымУчетаПоСтранице      = 0;
				КоличествоПорядковыхНомеровНаСтранице = 0;
				
			КонецЕсли;
			
			ТабличныйДокумент.Вывести(СтрокаТаблицы);
			
			НаличиеФактическоеПоСтранице          = НаличиеФактическоеПоСтранице          + Док.НаличиеФактическое;
			СтоимостьФактическаяПоСтранице        = СтоимостьФактическаяПоСтранице        + Док.СтоимостьФактическая;
			НаличиеПоДаннымУчетаПоСтранице        = НаличиеПоДаннымУчетаПоСтранице        + Док.НаличиеПоДаннымУчета;
			СтоимостьПоДаннымУчетаПоСтранице      = СтоимостьПоДаннымУчетаПоСтранице      + Док.СтоимостьПоДаннымУчета;
			КоличествоПорядковыхНомеровНаСтранице = КоличествоПорядковыхНомеровНаСтранице + 1;
			
			НаличиеФактическоеПоОписи          = НаличиеФактическоеПоОписи + Док.НаличиеФактическое;
			СтоимостьФактическаяПоОписи        = СтоимостьФактическаяПоОписи + Док.СтоимостьФактическая;
			КоличествоПорядковыхНомеровПоОписи = КоличествоПорядковыхНомеровПоОписи + 1;
			
		КонецЦикла;
		
		ИтогоПоСтранице = Макет.ПолучитьОбласть("ИтогоПоСтранице");
		
		// Присвоим имена с порядковыми номерами итогов областям таблицы.
		// Номера потребуются для включения/отключения видимости значений в ячейках.
		ИтогоПоСтранице.Области.ИтогНаличиеФактическое.Имя     = "ИтогНаличиеФактическое"     + Формат(ПорядковыйНомерИтогов, "ЧДЦ=0; ЧН=; ЧГ=");
		ИтогоПоСтранице.Области.ИтогСтоимостьФактическая.Имя   = "ИтогСтоимостьФактическая"   + Формат(ПорядковыйНомерИтогов, "ЧДЦ=0; ЧН=; ЧГ=");
		ИтогоПоСтранице.Области.ИтогНаличиеПоДаннымУчета.Имя   = "ИтогНаличиеПоДаннымУчета"   + Формат(ПорядковыйНомерИтогов, "ЧДЦ=0; ЧН=; ЧГ=");
		ИтогоПоСтранице.Области.ИтогСтоимостьПоДаннымУчета.Имя = "ИтогСтоимостьПоДаннымУчета" + Формат(ПорядковыйНомерИтогов, "ЧДЦ=0; ЧН=; ЧГ=");
		
		// Выведем заголовок итогов по странице
		ИтогоПоСтранице.Параметры.ИтогСтоимостьФактическая   = СтоимостьФактическаяПоСтранице;
		ИтогоПоСтранице.Параметры.ИтогНаличиеФактическое     = НаличиеФактическоеПоСтранице;
		ИтогоПоСтранице.Параметры.ИтогСтоимостьПоДаннымУчета = СтоимостьПоДаннымУчетаПоСтранице;
		ИтогоПоСтранице.Параметры.ИтогНаличиеПоДаннымУчета   = НаличиеПоДаннымУчетаПоСтранице;
		
		ТабличныйДокумент.Вывести(ИтогоПоСтранице);
		
		Итоги = Макет.ПолучитьОбласть("Итоги");	
		
		// Присвоим имена с порядковыми номерами итогов областям таблицы.
		// Номера потребуются для включения/отключения видимости значений в ячейках.
		Итоги.Области.КоличествоФактическоеПрописью.Имя   = "КоличествоФактическоеПрописью" + ПорядковыйНомерИтогов;
		Итоги.Области.СтоимостьФактическаяПрописью.Имя    = "СтоимостьФактическаяПрописью" + ПорядковыйНомерИтогов;
		
		КоличествоФактическоеПрописью = ЧислоПрописью(НаличиеФактическоеПоСтранице,"Л="+Локализация.ОпределитьКодЯзыкаДляФормат(КодЯзыкаПечать), ",,,ж,,,,,0");
		СтоимостьФактическаяПрописью  = ОбщегоНазначенияБПВызовСервера.СформироватьСуммуПрописью(СтоимостьФактическаяПоСтранице, ВалютаРегламентированногоУчета, КодЯзыкаПечать);
		
		// Выведем итоговые строки
		Итоги.Параметры.КоличествоПорядковыхНомеровПрописью = ЧислоПрописью(КоличествоПорядковыхНомеровНаСтранице,"Л="+Локализация.ОпределитьКодЯзыкаДляФормат(КодЯзыкаПечать), ",,,м,,,,,0");
		Итоги.Параметры.КоличествоФактическоеПрописью       = КоличествоФактическоеПрописью;
		Итоги.Параметры.СтоимостьФактическаяПрописью        = СтоимостьФактическаяПрописью;
		
		ТабличныйДокумент.Вывести(Итоги);
		
		// Добавим значения итогов по странице в таблицу итогов.
		// Они потребуются при включении видимости значений ячеек.
		НоваяСтрока = ТаблицаИтогов.Добавить();
		НоваяСтрока.ПорядковыйНомерИтогов         = ПорядковыйНомерИтогов;
		НоваяСтрока.ИтогНаличиеФактическое        = НаличиеФактическоеПоСтранице;
		НоваяСтрока.ИтогСтоимостьФактическая      = СтоимостьФактическаяПоСтранице;
		НоваяСтрока.ИтогНаличиеПоДаннымУчета      = НаличиеПоДаннымУчетаПоСтранице;
		НоваяСтрока.ИтогСтоимостьПоДаннымУчета    = СтоимостьПоДаннымУчетаПоСтранице;
		НоваяСтрока.КоличествоФактическоеПрописью = КоличествоФактическоеПрописью;
		НоваяСтрока.СтоимостьФактическаяПрописью  = СтоимостьФактическаяПрописью;
		
		ПорядковыйНомерИтогов = ПорядковыйНомерИтогов + 1;
		
		// Выведем разрыв страницы
		ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		
		//////////////////////////////////////////////////////////////////////
		// 3-я страница формы
		
		// Выведем заголовок итогов по описи
		ТабличныйДокумент.Вывести(ИтогоПоОписи);
		
		Итоги = Макет.ПолучитьОбласть("Итоги");
		
		// Присвоим имена с порядковыми номерами итогов областям таблицы.
		// Номера потребуются для включения/отключения видимости значений в ячейках.
		Итоги.Области.КоличествоФактическоеПрописью.Имя   = "КоличествоФактическоеПрописьюПоОписи";
		Итоги.Области.СтоимостьФактическаяПрописью.Имя    = "СтоимостьФактическаяПрописьюПоОписи";
		
		// Выведем итоговые строки
		Итоги.Параметры.КоличествоПорядковыхНомеровПрописью = ЧислоПрописью(КоличествоПорядковыхНомеровПоОписи,"Л="+Локализация.ОпределитьКодЯзыкаДляФормат(КодЯзыкаПечать), ",,,м,,,,,0");
		Итоги.Параметры.КоличествоФактическоеПрописью       = ЧислоПрописью(НаличиеФактическоеПоОписи,"Л="+Локализация.ОпределитьКодЯзыкаДляФормат(КодЯзыкаПечать), ",,,ж,,,,,0");
		Итоги.Параметры.СтоимостьФактическаяПрописью        = ОбщегоНазначенияБПВызовСервера.СформироватьСуммуПрописью(СтоимостьФактическаяПоОписи, ВалютаРегламентированногоУчета, КодЯзыкаПечать);
		
		ТабличныйДокумент.Вывести(Итоги);
		
		// Выведем фразу о подсчетах
		ТабличныйДокумент.Вывести(Подсчеты);
		
		// Выведем подпись председателя инвентаризационной комиссии
		Подпись.Параметры.ЗаголовокРазделаПодписей = ЗаголовокРазделаПодписей.ПредседательКомиссии;
		Подпись.Параметры.Должность                = ВыборкаПоКомиссии.ПредседательКомиссииДолжность;
		Подпись.Параметры.РасшифровкаПодписи       = ВыборкаПоКомиссии.ПредседательКомиссииФИО;
		
		ТабличныйДокумент.Вывести(Подпись);
		
		// Выведем подписи членов комиссии
		ВыводитьЗаголовок = Истина;
		
		НаименованиеЧленовКомиссии = Новый Массив;
		НаименованиеЧленовКомиссии.Добавить("ПервыйЧленКомиссии");
		НаименованиеЧленовКомиссии.Добавить("ВторойЧленКомиссии");
		НаименованиеЧленовКомиссии.Добавить("ТретийЧленКомиссии");
		
		// Сначала выведем членов комиссии из выборки
		Для Каждого ЧленКомиссии Из НаименованиеЧленовКомиссии Цикл
			
			Если НЕ ОбщегоНазначенияБПВызовСервера.ПроверитьВыводТабличногоДокумента(ТабличныйДокумент, Подпись) Тогда
				
				// Выведем разрыв страницы
				ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				ВыводитьЗаголовок = Истина; // на новой странице выведем заголовок набора подписей
				
			КонецЕсли;
			
			Подпись.Параметры.ЗаголовокРазделаПодписей = ?(ВыводитьЗаголовок, ЗаголовокРазделаПодписей.ЧленыКомиссии, "");
			Подпись.Параметры.Должность                = ВыборкаПоКомиссии[ЧленКомиссии + "Должность"];
			Подпись.Параметры.РасшифровкаПодписи       = ВыборкаПоКомиссии[ЧленКомиссии + "ФИО"];
			
			ТабличныйДокумент.Вывести(Подпись);
			
			ВыводитьЗаголовок = Ложь; // в следующей итерации вывод заголовка не нужен
			
		КонецЦикла;
		
		// Перед выводом следующего набора подписей, нужно проверить, поместится ли он
		// на страницу целиком. Если нет, нужно начать вывод со следующей страницы.
		
		// Создаем массив строк для проверки, помещаются ли они на страницу
		СтрокаСПодвалом = Новый Массив;
		СтрокаСПодвалом.Добавить(Претензии);
		Для Итератор = 1 По ДанныеМОЛ.Количество() Цикл
			СтрокаСПодвалом.Добавить(Подпись);
		КонецЦикла;
		СтрокаСПодвалом.Добавить(ПолеДаты);
		СтрокаСПодвалом.Добавить(Подпись);
		СтрокаСПодвалом.Добавить(ПолеДаты);
		
		// Если планируемый набор подписей не помещается, начинаем новую страницу
		Если НЕ ОбщегоНазначенияБПВызовСервера.ПроверитьВыводТабличногоДокумента(ТабличныйДокумент, СтрокаСПодвалом) Тогда
			
			// Выведем разрыв страницы
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			
		КонецЕсли;
		
		// Выведем раздел об отсутствии претензий МОЛов
		Если Док.Количество() > 0 Тогда
			Претензии.Параметры.НомерСтрокиНачальный = Док.МинНомерСтроки;
			Претензии.Параметры.НомерСтрокиКонечный  = Док.МаксНомерСтроки;
		Иначе	
			Претензии.Параметры.НомерСтрокиНачальный = "______";
			Претензии.Параметры.НомерСтрокиКонечный  = "______";
		КонецЕсли;
		
		ТабличныйДокумент.Вывести(Претензии);
		
		// Выведем подписи МОЛов
		ВыводитьЗаголовок = Истина;
		
		// Сначала выведем МОЛов из выборки
		Для каждого СтрокаМОЛ Из ДанныеМОЛ Цикл
			
			ПодписьСДатой = Новый Массив;
			ПодписьСДатой.Добавить(Подпись);
			ПодписьСДатой.Добавить(ПолеДаты);
			
			Если НЕ ОбщегоНазначенияБПВызовСервера.ПроверитьВыводТабличногоДокумента(ТабличныйДокумент, ПодписьСДатой) Тогда
				
				// Выведем разрыв страницы
				ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				ВыводитьЗаголовок = Истина; // на новой странице выведем заголовок набора подписей
				
			КонецЕсли;
			
			Подпись.Параметры.ЗаголовокРазделаПодписей = ?(ВыводитьЗаголовок, ЗаголовокРазделаПодписей.МОЛ, "");
			Подпись.Параметры.Должность                = СтрокаМОЛ.Должность;
			Подпись.Параметры.РасшифровкаПодписи       = СтрокаМОЛ.Представление;
			
			ТабличныйДокумент.Вывести(Подпись);
			
			ВыводитьЗаголовок = Ложь; // в следующей итерации вывод заголовка не нужен
			
		КонецЦикла;
		
		// Затем выведем пустые места для подписей (чтобы в итоге получилось не менее 3-х
		// подписей, как в форме, утвержденной Госкомстатом)
		Если ДанныеМОЛ.Количество() < 3 Тогда
			
			ПодписьСДатой = Новый Массив;
			ПодписьСДатой.Добавить(Подпись);
			ПодписьСДатой.Добавить(ПолеДаты);
			
			Если НЕ ОбщегоНазначенияБПВызовСервера.ПроверитьВыводТабличногоДокумента(ТабличныйДокумент, ПодписьСДатой) Тогда
				
				// Выведем разрыв страницы
				ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				ВыводитьЗаголовок = Истина; // на новой странице выведем заголовок набора подписей
				
			КонецЕсли;
			
			Для Итератор = (ДанныеМОЛ.Количество() + 1) По 3 Цикл
				
				Подпись.Параметры.ЗаголовокРазделаПодписей = ?(ВыводитьЗаголовок, ЗаголовокРазделаПодписей.МОЛ, "");
				Подпись.Параметры.Должность                = "";
				Подпись.Параметры.РасшифровкаПодписи       = "";
				
				ТабличныйДокумент.Вывести(Подпись);
				
				ВыводитьЗаголовок = Ложь; // в следующей итерации вывод заголовка не нужен
				
			КонецЦикла;
			
		КонецЕсли;
		
		// Выведем строку с полем для заполнения даты
		ПолеДаты.Параметры.Дата = Формат(Док.Дата, "ДЛФ=DD;Л="+Локализация.ОпределитьКодЯзыкаДляФормат(КодЯзыкаПечать));
		ТабличныйДокумент.Вывести(ПолеДаты);
		
		// Проверим, поместится ли проверяющий, если нет, то начнем новую страницу
		ПодписьСДатой = Новый Массив;
		ПодписьСДатой.Добавить(Подпись);
		ПодписьСДатой.Добавить(ПолеДаты);
		
		Если НЕ ОбщегоНазначенияБПВызовСервера.ПроверитьВыводТабличногоДокумента(ТабличныйДокумент, ПодписьСДатой) Тогда
			
			// Выведем разрыв страницы
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			ВыводитьЗаголовок = Истина; // на новой странице выведем заголовок набора подписей
			
		КонецЕсли;
		
		// Выведем подпись проверяющего
		Подпись.Параметры.ЗаголовокРазделаПодписей = ЗаголовокРазделаПодписей.Проверяющий;
		
		ТабличныйДокумент.Вывести(Подпись);
		
		// Выведем строку с полем для заполнения даты
		ПолеДаты.Параметры.Дата = НСтр("ru='""______"" ___________________________ _______ г.';uk='""______"" ___________________________ _______ р.'", КодЯзыкаПечать);
		ТабличныйДокумент.Вывести(ПолеДаты);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Док.Ссылка);
		
	КонецЦикла;
	
	Если НЕ ОбработаныОбъекты Тогда 
		Шаблон = МассивОбъектов[0];
		
		ТабличныйДокумент.Вывести(Шапка);
		ТабличныйДокумент.Вывести(Расписка);
		ТабличныйДокумент.Вывести(Итоги);	
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, ТабличныйДокумент.ВысотаТаблицы + 1, ОбъектыПечати, Шаблон);
	КонецЕсли;

	Возврат ТабличныйДокумент;
	
КонецФункции

Функция ПечатьИНВ18(МассивОбъектов, ОбъектыПечати, ПараметрыВывода)
	УстановитьПривилегированныйРежим(Истина);
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.АвтоМасштаб = Истина;
	ТабличныйДокумент.ПолеСверху              = 10;
	ТабличныйДокумент.РазмерКолонтитулаСверху = 10;
	ТабличныйДокумент.ПолеСлева          	  = 10;
	ТабличныйДокумент.ПолеСправа         	  = 10;
	ТабличныйДокумент.ОриентацияСтраницы      = ОриентацияСтраницы.Ландшафт;
	ТабличныйДокумент.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ИнвентаризацияОС_ИНВ18";;
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ИНАГРО_ИнвентаризацияАрендованныхОС.ПФ_MXL_ИНВ18");
	
	 // печать производится на языке, указанном в настройках пользователя
	КодЯзыкаПечать = ПараметрыВывода.КодЯзыкаДляМногоязычныхПечатныхФорм;
	Макет.КодЯзыкаМакета = КодЯзыкаПечать;
	
	// Получаем области макета для вывода в табличный документ
	Шапка                     = Макет.ПолучитьОбласть("Шапка");
	СекцияМОЛ                 = Макет.ПолучитьОбласть("СекцияМОЛ");
	СтрокаНадТаблицей         = Макет.ПолучитьОбласть("СтрокаНадТаблицей");
	ЗаголовокТаблицы          = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
	СтрокаТаблицы             = Макет.ПолучитьОбласть("СтрокаТаблицы");
	ПодвалТаблицы             = Макет.ПолучитьОбласть("ПодвалТаблицы");
	ПодписьГлавногоБухгалтера = Макет.ПолучитьОбласть("ПодписьГлавногоБухгалтера");
	ШапкаПодписейМОЛ          = Макет.ПолучитьОбласть("ШапкаПодписейМОЛ");
	Подпись                   = Макет.ПолучитьОбласть("Подпись");
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ИнвентаризацияОСОС.Ссылка КАК Ссылка,
	|	ИнвентаризацияОСОС.Ссылка.Дата КАК Дата,
	|	ИнвентаризацияОСОС.НомерСтроки КАК НомерСтроки,
	|	ИнвентаризацияОСОС.ОсновноеСредство КАК ОсновноеСредство,
	|	ИнвентаризацияОСОС.Ссылка.Организация КАК Организация,
	|	ИнвентаризацияОСОС.СтоимостьПоДаннымУчета КАК СтоимостьПоДаннымУчета,
	|	ИнвентаризацияОСОС.СтоимостьФактическая КАК СтоимостьФактическая,
	|	ВЫБОР
	|		КОГДА ИнвентаризацияОСОС.НаличиеПоДаннымУчета = ИСТИНА
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК НаличиеПоДаннымУчета,
	|	ВЫБОР
	|		КОГДА ИнвентаризацияОСОС.НаличиеФактическое = ИСТИНА
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК НаличиеФактическое,
	|	МАКСИМУМ(МестонахождениеОСБухгалтерскийУчет.Период) КАК МаксПериодМеста,
	|	МАКСИМУМ(ПервоначальныеСведенияОСБухгалтерскийУчет.Период) КАК МаксПериодБУ
	|ПОМЕСТИТЬ ОСИОрганизации
	|ИЗ
	|	Документ.ИНАГРО_ИнвентаризацияАрендованныхОС.ОС КАК ИнвентаризацияОСОС
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МестонахождениеОСБухгалтерскийУчет КАК МестонахождениеОСБухгалтерскийУчет
	|		ПО ИнвентаризацияОСОС.ОсновноеСредство = МестонахождениеОСБухгалтерскийУчет.ОсновноеСредство
	|			И ИнвентаризацияОСОС.Ссылка.Организация = МестонахождениеОСБухгалтерскийУчет.Организация
	|			И ИнвентаризацияОСОС.Ссылка.Дата >= МестонахождениеОСБухгалтерскийУчет.Период
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПервоначальныеСведенияОСБухгалтерскийУчет КАК ПервоначальныеСведенияОСБухгалтерскийУчет
	|		ПО ИнвентаризацияОСОС.ОсновноеСредство = ПервоначальныеСведенияОСБухгалтерскийУчет.ОсновноеСредство
	|			И ИнвентаризацияОСОС.Ссылка.Организация = ПервоначальныеСведенияОСБухгалтерскийУчет.Организация
	|			И ИнвентаризацияОСОС.Ссылка.Дата >= ПервоначальныеСведенияОСБухгалтерскийУчет.Период
	|ГДЕ
	|	ИнвентаризацияОСОС.Ссылка В(&МассивОбъектов)
	|СГРУППИРОВАТЬ ПО
	|	ИнвентаризацияОСОС.Ссылка,
	|	ИнвентаризацияОСОС.ОсновноеСредство,
	|	ИнвентаризацияОСОС.СтоимостьПоДаннымУчета,
	|	ИнвентаризацияОСОС.СтоимостьФактическая,
	|	ИнвентаризацияОСОС.НомерСтроки,
	|	ИнвентаризацияОСОС.Ссылка.Организация,
	|	ВЫБОР
	|		КОГДА ИнвентаризацияОСОС.НаличиеПоДаннымУчета = ИСТИНА
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ИнвентаризацияОСОС.НаличиеФактическое = ИСТИНА
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	ИнвентаризацияОСОС.Ссылка.Дата
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство,
	|	Организация,
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОСИОрганизации.Ссылка,
	|	ОСИОрганизации.НомерСтроки,
	|	ОСИОрганизации.ОсновноеСредство,
	|	ОСИОрганизации.Организация,
	|	ОСИОрганизации.СтоимостьПоДаннымУчета,
	|	ОСИОрганизации.СтоимостьФактическая,
	|	ОСИОрганизации.НаличиеПоДаннымУчета,
	|	ОСИОрганизации.НаличиеФактическое,
	|	ОСИОрганизации.МаксПериодМеста,
	|	ОСИОрганизации.МаксПериодБУ,
	|	ПервоначальныеСведенияОСБухгалтерскийУчет.ИнвентарныйНомер КАК ИнвентарныйНомер,
	|	ЕСТЬNULL(МестонахождениеОСБухгалтерскийУчет.МОЛ, НЕОПРЕДЕЛЕНО) КАК МОЛ
	|ПОМЕСТИТЬ ОСИСведения
	|ИЗ
	|	ОСИОрганизации КАК ОСИОрганизации
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МестонахождениеОСБухгалтерскийУчет КАК МестонахождениеОСБухгалтерскийУчет
	|		ПО ОСИОрганизации.ОсновноеСредство = МестонахождениеОСБухгалтерскийУчет.ОсновноеСредство
	|			И ОСИОрганизации.Организация = МестонахождениеОСБухгалтерскийУчет.Организация
	|			И ОСИОрганизации.МаксПериодМеста = МестонахождениеОСБухгалтерскийУчет.Период
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПервоначальныеСведенияОСБухгалтерскийУчет КАК ПервоначальныеСведенияОСБухгалтерскийУчет
	|		ПО ОСИОрганизации.ОсновноеСредство = ПервоначальныеСведенияОСБухгалтерскийУчет.ОсновноеСредство
	|			И ОСИОрганизации.Организация = ПервоначальныеСведенияОСБухгалтерскийУчет.Организация
	|			И ОСИОрганизации.МаксПериодБУ = ПервоначальныеСведенияОСБухгалтерскийУчет.Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ИнвентаризацияОС.Ссылка КАК Ссылка,
	|	ИнвентаризацияОС.Дата КАК Дата,
	|	ОСИСведения.МОЛ
	|ИЗ
	|	ОСИСведения КАК ОСИСведения
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ИНАГРО_ИнвентаризацияАрендованныхОС КАК ИнвентаризацияОС
	|		ПО ОСИСведения.Ссылка = ИнвентаризацияОС.Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата,
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИнвентаризацияОС.Ссылка КАК Ссылка,
	|	ИнвентаризацияОС.Дата КАК Дата,
	|	ИнвентаризацияОС.Номер КАК Номер,
	|	ИнвентаризацияОС.Организация КАК Организация,
	|	ИнвентаризацияОС.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	|	ИнвентаризацияОС.ПодразделениеОрганизации.Представление КАК ПодразделениеПредставление,
	|	ИнвентаризацияОС.ДатаНачалаИнвентаризации КАК ДатаНачалаИнвентаризации,
	|	ИнвентаризацияОС.ДатаОкончанияИнвентаризации КАК ДатаОкончанияИнвентаризации,
	|	ИнвентаризацияОС.ДокументОснованиеВид КАК ДокументОснованиеВид,
	|	ИнвентаризацияОС.ДокументОснованиеДата КАК ДокументОснованиеДата,
	|	ИнвентаризацияОС.ДокументОснованиеНомер КАК ДокументОснованиеНомер,
	|	ОСИСведения.НомерСтроки КАК НомерСтроки,
	|	ОСИСведения.НомерСтроки КАК МинНомерСтроки,
	|	ОСИСведения.НомерСтроки КАК МаксНомерСтроки,
	|	ОСИСведения.ОсновноеСредство,
	|	ВЫБОР
	|		КОГДА ОСИСведения.ОсновноеСредство.НаименованиеПолное ПОДОБНО """"
	|			ТОГДА ОСИСведения.ОсновноеСредство.Наименование
	|		ИНАЧЕ ОСИСведения.ОсновноеСредство.НаименованиеПолное
	|	КОНЕЦ КАК ОсновноеСредствоНаименованиеПолное,
	|	ОСИСведения.ОсновноеСредство.ДатаВыпуска КАК ДатаВыпуска,
	|	ОСИСведения.ОсновноеСредство.ЗаводскойНомер КАК ЗаводскойНомер,
	|	ОСИСведения.ОсновноеСредство.НомерПаспорта КАК НомерПаспорта,
	|	ОСИСведения.СтоимостьПоДаннымУчета,
	|	ОСИСведения.СтоимостьФактическая КАК СтоимостьФактическая,
	|	ОСИСведения.НаличиеПоДаннымУчета КАК НаличиеПоДаннымУчета,
	|	ОСИСведения.НаличиеФактическое КАК НаличиеФактическое,
	|	ОСИСведения.МаксПериодМеста,
	|	ОСИСведения.МаксПериодБУ,
	|	ОСИСведения.ИнвентарныйНомер
	|ИЗ
	|	ОСИСведения КАК ОСИСведения
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ИНАГРО_ИнвентаризацияАрендованныхОС КАК ИнвентаризацияОС
	|		ПО (ИнвентаризацияОС.Ссылка = ОСИСведения.Ссылка)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата,
	|	Ссылка,
	|	ОСИСведения.НомерСтроки";
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	ВыборкаМОЛ = РезультатЗапроса[2].Выбрать();
	Док = РезультатЗапроса[3].Выбрать();
	
	ПервыйДокумент = Истина;
	
	ОбработанныхОбъектов = Ложь;

	Пока Док.СледующийПоЗначениюПоля("Ссылка") Цикл
		
		ОбработанныхОбъектов = Истина;
		Если НЕ ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		// Выведем шапку документа
		СведенияОбОрганизации = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Док.Организация, Док.Дата);
		
		Шапка.Параметры.Подразделение        = Строка(Док.ПодразделениеОрганизации);
		Шапка.Параметры.Заполнить(Док);
		Шапка.Параметры.Организация          = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОбОрганизации,,,КодЯзыкаПечать);
		Шапка.Параметры.ОрганизацияКодПоОКПО = БухгалтерскийУчетПереопределяемый.ПолучитьКодОрганизации(СведенияОбОрганизации);
		
		Шапка.Параметры.НомерДокумента = ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(Док.Номер, Истина, Истина);
		Шапка.Параметры.ДатаДокумента  = Док.Дата;
		Шапка.Параметры.ДатаОкончанияИнвентаризацииЛокальныйФормат = Формат(Док.ДатаОкончанияИнвентаризации, "ДЛФ=DD;Л="+Локализация.ОпределитьКодЯзыкаДляФормат(КодЯзыкаПечать)) ; 
		
		ТабличныйДокумент.Вывести(Шапка);
		
		// Выборка по МОЛ обходится синхронно с выборкой документов
		ВыборкаМОЛ.СледующийПоЗначениюПоля("Ссылка");
		МассивМОЛ = Новый Массив;
		Пока ВыборкаМОЛ.Следующий() Цикл
			Если МассивМОЛ.Найти(ВыборкаМОЛ.МОЛ) = Неопределено Тогда
				МассивМОЛ.Добавить(ВыборкаМОЛ.МОЛ);
			КонецЕсли;
		КонецЦикла;
		
		// Выведем подписи МОЛов
		ДанныеМОЛ = ОбщегоНазначенияБПВызовСервера.ДанныеФизЛиц(Док.Организация, МассивМОЛ, Док.Дата);
		
		// Сначала выведем МОЛов из выборки
		Для каждого СтрокаМОЛ Из ДанныеМОЛ Цикл
			
			Если НЕ ОбщегоНазначенияБПВызовСервера.ПроверитьВыводТабличногоДокумента(ТабличныйДокумент, СекцияМОЛ) Тогда
				
				// Выведем разрыв страницы
				ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			
			КонецЕсли;
			
			СекцияМОЛ.Параметры.Должность = "";
			Если ЗначениеЗаполнено(СтрокаМОЛ.Сотрудник) Тогда
				ДанныеФизЛица = ИНАГРО_ЗарплатаКадрыРасширенный.ДанныеФизЛица(Док.Организация, СтрокаМОЛ.Сотрудник.ФизическоеЛицо, Док.Дата);
				СекцияМОЛ.Параметры.Должность = ДанныеФизЛица.Должность;
			КонецЕсли;
			
			СекцияМОЛ.Параметры.ФИО       = СтрокаМОЛ.Представление;
			
			ТабличныйДокумент.Вывести(СекцияМОЛ);
			
		КонецЦикла;
		
		// Затем выведем пустые места для подписей (чтобы в итоге получилось не менее 2-х
		// подписей, как в форме, утвержденной Госкомстатом)
		Если ДанныеМОЛ.Количество() < 2 Тогда
			
			Если НЕ ОбщегоНазначенияБПВызовСервера.ПроверитьВыводТабличногоДокумента(ТабличныйДокумент, СекцияМОЛ) Тогда
				
				// Выведем разрыв страницы
				ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			
			КонецЕсли;
			
			Для Итератор = ДанныеМОЛ.Количество() + 1 По 2 Цикл
				
				СекцияМОЛ.Параметры.Должность = "";
				СекцияМОЛ.Параметры.ФИО       = "";
				
				ТабличныйДокумент.Вывести(СекцияМОЛ);
				
			КонецЦикла;
		
		КонецЕсли;
		
		// Проверим, помещаются ли строка над таблицей, заголовок и первая строка.
		ШапкаТаблицы = Новый Массив;
		ШапкаТаблицы.Добавить(СтрокаНадТаблицей);
		ШапкаТаблицы.Добавить(ЗаголовокТаблицы);
		ШапкаТаблицы.Добавить(СтрокаТаблицы);
		
		Если НЕ ОбщегоНазначенияБПВызовСервера.ПроверитьВыводТабличногоДокумента(ТабличныйДокумент, ШапкаТаблицы) Тогда
				
			// Выведем разрыв страницы
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();

		КонецЕсли;
		
		// Выведем строку над таблицей
		ТабличныйДокумент.Вывести(СтрокаНадТаблицей);
		
		// Выведем заголовок таблицы	
		ТабличныйДокумент.Вывести(ЗаголовокТаблицы);
		
		// Создадим переменные для накопления итогов по каждой странице
		ИтогИзлишекКоличество   = 0;
		ИтогИзлишекСтоимость    = 0;
		ИтогНедостачаКоличество = 0;
		ИтогНедостачаСтоимость  = 0;
		
		// Выведем строки таблицы
		Пока Док.Следующий() Цикл
			
			СтрокаТаблицы.Параметры.Заполнить(Док);
			
			СтрокаСПодвалом = Новый Массив;
			СтрокаСПодвалом.Добавить(СтрокаТаблицы);
			СтрокаСПодвалом.Добавить(ПодвалТаблицы);
			Если Док.МаксНомерСтроки = Док.Количество() Тогда  // если последняя строка, должна
				СтрокаСПодвалом.Добавить(ПодписьГлавногоБухгалтера); // помещаться и подпись гл.бухгалтера
			КонецЕсли;
			
			Если НЕ ОбщегоНазначенияБПВызовСервера.ПроверитьВыводТабличногоДокумента(ТабличныйДокумент, СтрокаСПодвалом) Тогда
				
				// Выведем подвал таблицы
				ПодвалТаблицы.Параметры.ИтогИзлишекКоличество   = ИтогИзлишекКоличество;
				ПодвалТаблицы.Параметры.ИтогИзлишекСтоимость    = ИтогИзлишекСтоимость;
				ПодвалТаблицы.Параметры.ИтогНедостачаКоличество = ИтогНедостачаКоличество;
				ПодвалТаблицы.Параметры.ИтогНедостачаСтоимость  = ИтогНедостачаСтоимость;
				
				ТабличныйДокумент.Вывести(ПодвалТаблицы);
				
				// Обнулим переменные для накопления итогов по каждой странице
				ИтогИзлишекКоличество   = 0;
				ИтогИзлишекСтоимость    = 0;
				ИтогНедостачаКоличество = 0;
				ИтогНедостачаСтоимость  = 0;
				
				// Выведем разрыв страницы
				ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				
				// Выведем заголовок таблицы	
				ТабличныйДокумент.Вывести(ЗаголовокТаблицы);
				
			КонецЕсли;
			
			РазницаПоНаличию   = Док.НаличиеФактическое - Док.НаличиеПоДаннымУчета;
			РазницаПоСтоимости = Док.СтоимостьФактическая - Док.СтоимостьПоДаннымУчета;
			
			ИзлишекКоличество   = ?(РазницаПоНаличию > 0, РазницаПоНаличию, 0);
			ИзлишекСтоимость    = ?(РазницаПоСтоимости > 0, РазницаПоСтоимости, 0);
			НедостачаКоличество = ?(РазницаПоНаличию < 0, -РазницаПоНаличию, 0);
			НедостачаСтоимость  = ?(РазницаПоСтоимости < 0, -РазницаПоСтоимости, 0);
			
			ИтогИзлишекКоличество   = ИтогИзлишекКоличество + ИзлишекКоличество;
			ИтогИзлишекСтоимость    = ИтогИзлишекСтоимость + ИзлишекСтоимость;
			ИтогНедостачаКоличество = ИтогНедостачаКоличество + НедостачаКоличество;
			ИтогНедостачаСтоимость  = ИтогНедостачаСтоимость + НедостачаСтоимость;
			
			СтрокаТаблицы.Параметры.ИзлишекКоличество   = ИзлишекКоличество;
			СтрокаТаблицы.Параметры.ИзлишекСтоимость    = ИзлишекСтоимость;
			СтрокаТаблицы.Параметры.НедостачаКоличество = НедостачаКоличество;
			СтрокаТаблицы.Параметры.НедостачаСтоимость  = НедостачаСтоимость;
			
			ТабличныйДокумент.Вывести(СтрокаТаблицы);
			
		КонецЦикла;
		
		// Выведем подвал таблицы
		ПодвалТаблицы.Параметры.ИтогИзлишекКоличество   = ИтогИзлишекКоличество;
		ПодвалТаблицы.Параметры.ИтогИзлишекСтоимость    = ИтогИзлишекСтоимость;
		ПодвалТаблицы.Параметры.ИтогНедостачаКоличество = ИтогНедостачаКоличество;
		ПодвалТаблицы.Параметры.ИтогНедостачаСтоимость  = ИтогНедостачаСтоимость;
		
		ТабличныйДокумент.Вывести(ПодвалТаблицы);
		
		// Выведем подпись бухгалтера
		Руководители = ОтветственныеЛицаБП.ОтветственныеЛица(Док.Организация, Док.Дата, Док.ПодразделениеОрганизации);
		
		ПодписьГлавногоБухгалтера.Параметры.РасшифровкаПодписи = Руководители.ГлавныйБухгалтерПредставление;
		
		ТабличныйДокумент.Вывести(ПодписьГлавногоБухгалтера);
		
		// Проверим, помещаются ли шапка подписей и одна подпись
		Подписи = Новый Массив;
		Подписи.Добавить(ШапкаПодписейМОЛ);
		Подписи.Добавить(Подпись);
		
		Если НЕ ОбщегоНазначенияБПВызовСервера.ПроверитьВыводТабличногоДокумента(ТабличныйДокумент, Подписи) Тогда
				
		// Выведем разрыв страницы
		ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();

		КонецЕсли;
		
		// Выведем шапку подписей МОЛ
		ТабличныйДокумент.Вывести(ШапкаПодписейМОЛ);
		
		// Выведем подписи МОЛов
		ЗаголовокРазделаПодписей = НСтр("ru='Материально ответственное(ые) лицо(а)';uk='Матеріально відповідальна(і) особа(и)'", КодЯзыкаПечать);
		ВыводитьЗаголовок = Истина;
		
		// Сначала выведем МОЛов из выборки
		Для каждого СтрокаМОЛ Из ДанныеМОЛ Цикл
			
			Если НЕ ОбщегоНазначенияБПВызовСервера.ПроверитьВыводТабличногоДокумента(ТабличныйДокумент, Подпись) Тогда
				
				// Выведем разрыв страницы
				ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				ВыводитьЗаголовок = Истина; // на новой странице выведем заголовок набора подписей
				
			КонецЕсли;
			
			Подпись.Параметры.ЗаголовокРазделаПодписей = ?(ВыводитьЗаголовок, ЗаголовокРазделаПодписей, "");
			Подпись.Параметры.Должность                = СтрокаМОЛ.Должность;
			Подпись.Параметры.РасшифровкаПодписи       = СтрокаМОЛ.Представление;
			
			ТабличныйДокумент.Вывести(Подпись);
			
			ВыводитьЗаголовок = Ложь; // в следующей итерации вывод заголовка не нужен
			
		КонецЦикла;
		
		// Затем выведем пустые места для подписей (чтобы в итоге получилось не менее 2-х
		// подписей, как в форме, утвержденной Госкомстатом)
		Если ДанныеМОЛ.Количество() < 2 Тогда
			
			Если НЕ ОбщегоНазначенияБПВызовСервера.ПроверитьВыводТабличногоДокумента(ТабличныйДокумент, Подпись) Тогда
				
				// Выведем разрыв страницы
				ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				ВыводитьЗаголовок = Истина; // на новой странице выведем заголовок набора подписей
			
			КонецЕсли;
			
			Для Итератор = (ДанныеМОЛ.Количество() + 1) По 2 Цикл
				
				Подпись.Параметры.ЗаголовокРазделаПодписей = ?(ВыводитьЗаголовок, ЗаголовокРазделаПодписей, "");
				Подпись.Параметры.Должность                = "";
				Подпись.Параметры.РасшифровкаПодписи       = "";
				
				ТабличныйДокумент.Вывести(Подпись);
				
				ВыводитьЗаголовок = Ложь; // в следующей итерации вывод заголовка не нужен
				
			КонецЦикла;
		
		КонецЕсли;
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Док.Ссылка);
		
	КонецЦикла;
	
	Если НЕ ОбработанныхОбъектов Тогда 
		Шаблон = МассивОбъектов[0];

		ТабличныйДокумент.Вывести(Шапка);
		ТабличныйДокумент.Вывести(СекцияМОЛ);
		ТабличныйДокумент.Вывести(СтрокаНадТаблицей);
		ТабличныйДокумент.Вывести(ЗаголовокТаблицы);	
		ТабличныйДокумент.Вывести(ПодвалТаблицы);
		ТабличныйДокумент.Вывести(ПодписьГлавногоБухгалтера);	
		ТабличныйДокумент.Вывести(ШапкаПодписейМОЛ);
		ТабличныйДокумент.Вывести(Подпись);
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, ТабличныйДокумент.ВысотаТаблицы + 1, ОбъектыПечати, Шаблон);
	КонецЕсли;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

Функция ПечатьИНВ22(МассивОбъектов, ОбъектыПечати, ПараметрыВывода)
	УстановитьПривилегированныйРежим(Истина);
	
	УстановитьПривилегированныйРежим(Истина);
	
	// печать производится на языке, указанном в настройках пользователя
	КодЯзыкаПечать = ПараметрыВывода.КодЯзыкаДляМногоязычныхПечатныхФорм;
	
	// Варианты заголовков разделов с подписями печатной формы	
	ЗаголовокРазделаПодписей = Новый Структура();
	ЗаголовокРазделаПодписей.Вставить("ПредседательКомиссии", НСтр("ru='Председатель комиссии';uk='Голова комісії'", КодЯзыкаПечать));
	ЗаголовокРазделаПодписей.Вставить("ЧленыКомиссии",        НСтр("ru='Члены комиссии';uk='Члени комісії'", КодЯзыкаПечать));
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.АвтоМасштаб = Истина;
	ТабличныйДокумент.ПолеСверху              = 10;
	ТабличныйДокумент.ПолеСлева               = 20;
	ТабличныйДокумент.РазмерКолонтитулаСверху = 10;
	ТабличныйДокумент.ОриентацияСтраницы      = ОриентацияСтраницы.Портрет;
	ТабличныйДокумент.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ИнвентаризацияОС_ИНВ22";
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ИНАГРО_ИнвентаризацияАрендованныхОС.ПФ_MXL_ИНВ22");
	Макет.КодЯзыкаМакета = КодЯзыкаПечать;
	
	// Получаем области макета для вывода в табличный документ
	Шапка   = Макет.ПолучитьОбласть("Шапка");
	Подпись = Макет.ПолучитьОбласть("Подпись");
	Подвал  = Макет.ПолучитьОбласть("Подвал");
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ИнвентаризацияОС.Ссылка КАК Ссылка,
	|	ИнвентаризацияОС.Дата КАК Дата,
	|	ИнвентаризацияОС.Номер КАК Номер,
	|	ИнвентаризацияОС.Организация КАК Организация,
	|	ИнвентаризацияОС.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	|	ИнвентаризацияОС.ПодразделениеОрганизации.Представление КАК Подразделение,
	|	ИнвентаризацияОС.ДатаНачалаИнвентаризации КАК ДатаНачалаИнвентаризации,
	|	ИнвентаризацияОС.ДатаОкончанияИнвентаризации КАК ДатаОкончанияИнвентаризации,
	|	ИнвентаризацияОС.ДокументОснованиеДата КАК ДокументОснованиеДата,
	|	ИнвентаризацияОС.ДокументОснованиеНомер КАК ДокументОснованиеНомер,
	|	ИнвентаризацияОС.ПричинаПроведенияИнвентаризации КАК ПричинаПроведенияИнвентаризации
	|ИЗ
	|	Документ.ИНАГРО_ИнвентаризацияАрендованныхОС КАК ИнвентаризацияОС
	|ГДЕ
	|	ИнвентаризацияОС.Ссылка В(&МассивОбъектов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата,
	|	Ссылка
	|АВТОУПОРЯДОЧИВАНИЕ";
	
	Док = Запрос.Выполнить().Выбрать();
	
	ПервыйДокумент = Истина;
	
	Пока Док.Следующий() Цикл
		
		Если НЕ ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		ВыборкаПоКомиссии = ОбщегоНазначенияБПВызовСервера.ПолучитьСведенияОКомиссии(Док.Ссылка);
		
		// Выведем шапку документа
		СведенияОбОрганизации = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Док.Организация, Док.Дата);
		
		Шапка.Параметры.Подразделение        = Строка(Док.ПодразделениеОрганизации);
		Шапка.Параметры.Заполнить(Док);
		Шапка.Параметры.Организация          = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОбОрганизации,,,КодЯзыкаПечать);
		Шапка.Параметры.ОрганизацияКодПоОКПО = БухгалтерскийУчетПереопределяемый.ПолучитьКодОрганизации(СведенияОбОрганизации);
		
		Шапка.Параметры.НомерДокумента = Док.ДокументОснованиеНомер;
		Шапка.Параметры.ДатаДокумента  = Док.ДокументОснованиеДата;
		
		ТабличныйДокумент.Вывести(Шапка);
		
		// Выведем подпись председателя инвентаризационной комиссии
		Подпись.Параметры.ЗаголовокРазделаПодписей = ЗаголовокРазделаПодписей.ПредседательКомиссии;
		Подпись.Параметры.Должность                = ВыборкаПоКомиссии.ПредседательКомиссииДолжность;
		Подпись.Параметры.РасшифровкаПодписи       = ВыборкаПоКомиссии.ПредседательКомиссииФИО;
			
		ТабличныйДокумент.Вывести(Подпись);
		
		// Выведем подписи членов комиссии
		ВыводитьЗаголовок = Истина;
		
		НаименованиеЧленовКомиссии = Новый Массив;
		НаименованиеЧленовКомиссии.Добавить("ПервыйЧленКомиссии");
		НаименованиеЧленовКомиссии.Добавить("ВторойЧленКомиссии");
		НаименованиеЧленовКомиссии.Добавить("ТретийЧленКомиссии");
		
		// Сначала выведем членов комиссии из выборки
		Для Каждого ЧленКомиссии Из НаименованиеЧленовКомиссии Цикл
			
			Если НЕ ОбщегоНазначенияБПВызовСервера.ПроверитьВыводТабличногоДокумента(ТабличныйДокумент, Подпись) Тогда
				
				// Выведем разрыв страницы
				ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				ВыводитьЗаголовок = Истина; // на новой странице выведем заголовок набора подписей
			
			КонецЕсли;
			
			Подпись.Параметры.ЗаголовокРазделаПодписей = ?(ВыводитьЗаголовок, ЗаголовокРазделаПодписей.ЧленыКомиссии, "");
			Подпись.Параметры.Должность                = ВыборкаПоКомиссии[ЧленКомиссии + "Должность"];
			Подпись.Параметры.РасшифровкаПодписи       = ВыборкаПоКомиссии[ЧленКомиссии + "ФИО"];
			
			ТабличныйДокумент.Вывести(Подпись);
			
			ВыводитьЗаголовок = Ложь; // в следующей итерации вывод заголовка не нужен
			
		КонецЦикла;
		
		// Выведем подвал приказа
		Если НЕ ОбщегоНазначенияБПВызовСервера.ПроверитьВыводТабличногоДокумента(ТабличныйДокумент, Подвал) Тогда
			
			// Выведем разрыв страницы
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			
		КонецЕсли;
		
		Подвал.Параметры.ДатаНачалаИнвентаризации          = Формат(Док.ДатаНачалаИнвентаризации, "ДЛФ=DD;Л="+Локализация.ОпределитьКодЯзыкаДляФормат(КодЯзыкаПечать));
		Подвал.Параметры.ДатаОкончанияИнвентаризации       = Формат(Док.ДатаОкончанияИнвентаризации, "ДЛФ=DD;Л="+Локализация.ОпределитьКодЯзыкаДляФормат(КодЯзыкаПечать));
		Подвал.Параметры.ПричинаПроведенияИнвентаризации   = Док.ПричинаПроведенияИнвентаризации;
		
		ТабличныйДокумент.Вывести(Подвал);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Док.Ссылка);
		
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

Функция ПолучитьДополнительныеРеквизитыДляРеестра() Экспорт
	
	Результат = Новый Структура("Информация", "ПричинаПроведенияИнвентаризации");	
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти 

#КонецЕсли