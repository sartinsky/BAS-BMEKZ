#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПроцедурыИФункцииПечати

Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	// Реестр документов
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "Реестр";
	КомандаПечати.Представление = НСтр("ru='Реестр документов';uk='Реєстр документів'");
	КомандаПечати.ЗаголовокФормы= НСтр("ru='Реестр документов ""Отражение ввоза/вывоза собственного зерна в регламентированом учете""';uk='Реєстр документів ""Відображення ввезення/вивезення власного зерна в регламентованому обліку""'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечатиРеестраДокументов";
	КомандаПечати.СписокФорм    = "ФормаСписка";
	КомандаПечати.Порядок       = 100;
			
КонецПроцедуры		

Функция ПолучитьДополнительныеРеквизитыДляРеестра() Экспорт
	
	Результат = Новый Структура;	
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти 

#Область ПрограммныйИнтерфейс

// Процедура заполняет счета учета расчетов
//
// Параметры:
//
// Объект - СправочникСсылка - объект контактной информации
//
Процедура ЗаполнитьСчетаУчетаРасчетов(Объект) Экспорт
	
	СчетаУчета = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаРасчетовСКонтрагентом(
		Объект.Организация, Объект.Контрагент, Объект.ДоговорКонтрагента);
	
	Если Объект.ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем Тогда
		Объект.СчетУчетаРасчетовСКонтрагентом   = СчетаУчета.СчетРасчетовПокупателя;
		Объект.СчетУчетаРасчетовПоАвансам       = СчетаУчета.СчетАвансовПокупателя;
		Объект.СчетУчетаРасчетовПоТаре          = СчетаУчета.СчетУчетаТарыПокупателя;
		Объект.СчетУчетаРасчетовПоТареПоАвансам = СчетаУчета.СчетАвансовПоТареПокупателя;
	Иначе
		Объект.СчетУчетаРасчетовСКонтрагентом 	= СчетаУчета.СчетРасчетов;
		Объект.СчетУчетаРасчетовПоАвансам     	= СчетаУчета.СчетАвансов;		
		Объект.СчетУчетаРасчетовПоТаре        	= СчетаУчета.СчетУчетаТары;
		Объект.СчетУчетаРасчетовПоТареПоАвансам = СчетаУчета.СчетАвансовПоТаре;
	КонецЕсли;
	
	Объект.СчетУчетаНДС 			  = СчетаУчета.СчетУчетаНДСПриобретений;
	Объект.СчетУчетаНДСПодтвержденный = СчетаУчета.СчетУчетаНДСПриобретенийПодтвержденный;	
	
КонецПроцедуры

// Заполняет счета учета номенклатуры в табличной части документа
//
// Параметры:
// Объект - СправочникСсылка - объект контактной информации
// ИмяТабличнойЧасти - имя табличной части.
//
Процедура ЗаполнитьСведенияОНоменклатуреВТабличнойЧасти(Объект, ИмяТабличнойЧасти) Экспорт

	ТабличнаяЧасть = Объект[ИмяТабличнойЧасти];
	
	ДанныеОбъекта = Новый Структура(
		"Дата, Организация, Склад,
		|ТипЦен, СуммаВключаетНДС, ВалютаДокумента, 
		|КурсВзаиморасчетов, КратностьВзаиморасчетов");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
		
	СоответствиеСведенийОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОСпискеНоменклатуры(
		ОбщегоНазначения.ВыгрузитьКолонку(ТабличнаяЧасть, "Номенклатура", Истина), ДанныеОбъекта);
	
	Для Каждого СтрокаТабличнойЧасти Из ТабличнаяЧасть Цикл
		СведенияОНоменклатуре = СоответствиеСведенийОНоменклатуре.Получить(СтрокаТабличнойЧасти.Номенклатура);
		ЗаполнитьСведенияОНоменклатуреВСтрокеТабличнойЧасти(ДанныеОбъекта, СтрокаТабличнойЧасти, СведенияОНоменклатуре);
	КонецЦикла;

КонецПроцедуры

// Заполняет сведения о номенклатуре в строке табличной части документа
//
// Параметры:
//  ДанныеОбъекта         - структура данных объекта, используемых при заполнении счетов учета (вид операции,
//                          вид договора контрагента, признак комиссионной торговли и т.п.)
//  СтрокаТабличнойЧасти  - Строка - строка табличной части документа
//  СведенияОНоменклатуре - Структура - структура сведений о номенклатуре, либо структура счетов учета.
//
Процедура ЗаполнитьСведенияОНоменклатуреВСтрокеТабличнойЧасти(ДанныеОбъекта, СтрокаТабличнойЧасти, СведенияОНоменклатуре) Экспорт
	
	Если СведенияОНоменклатуре = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаТабличнойЧасти.ЕдиницаИзмерения = СведенияОНоменклатуре.БазоваяЕдиницаИзмерения;
	СтрокаТабличнойЧасти.Коэффициент	  = СведенияОНоменклатуре.Коэффициент;
	СтрокаТабличнойЧасти.Цена			  = СведенияОНоменклатуре.Цена;
	СтрокаТабличнойЧасти.СтавкаНДС	      = СведенияОНоменклатуре.СтавкаНДС;
	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ДанныеОбъекта.СуммаВключаетНДС);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка)
	
	Если ВидФормы <> "ФормаДокумента"
		И ВидФормы <> "ФормаОбъекта" Тогда
		Возврат;
	КонецЕсли;

	ВидОперации = Неопределено; 

	Если Параметры.Свойство("Ключ") И ЗначениеЗаполнено(Параметры.Ключ) Тогда
		ВидОперации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Параметры.Ключ, "ВидОперации");
	КонецЕсли;

	// Если документ копируется, то вид формы получаем из копируемого документа.
	Если НЕ ЗначениеЗаполнено(ВидОперации) Тогда
		Если Параметры.Свойство("ЗначениеКопирования")
			И ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
			ВидОперации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
				Параметры.ЗначениеКопирования, "ВидОперации");
		КонецЕсли;
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(ВидОперации) Тогда
		Если Параметры.Свойство("ЗначенияЗаполнения") 
			И ТипЗнч(Параметры.ЗначенияЗаполнения) = Тип("Структура") Тогда
			Если Параметры.ЗначенияЗаполнения.Свойство("ВидОперации") Тогда
				ВидОперации = Параметры.ЗначенияЗаполнения.ВидОперации;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ВидОперации) Тогда
		Если Параметры.Свойство("Основание")
			И ЗначениеЗаполнено(Параметры.Основание) Тогда
			ВидОперации = ОпределитьВидОперацииПоДокументуОснованию(Параметры.Основание);
		КонецЕсли;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	ФормыИНАГРО_ОтражениеВвозаВывозаСобственногоЗернаВРегламентированномУчете = ПолучитьСоответствиеВидовОперацийФормам();
	ВыбраннаяФорма = ФормыИНАГРО_ОтражениеВвозаВывозаСобственногоЗернаВРегламентированномУчете[ВидОперации];
	Если ВыбраннаяФорма = Неопределено Тогда
		ВыбраннаяФорма = "ФормаДокумента";
	КонецЕсли;
	
КонецПроцедуры 

#КонецОбласти 

#Область СлужебныеПроцедурыИФункции

Функция ПолучитьСоответствиеВидовОперацийФормам() Экспорт

	ФормаИНАГРО_ОтражениеВвозаВывозаСобственногоЗернаВРегламентированномУчете = Новый Соответствие;
	
	ФормаИНАГРО_ОтражениеВвозаВывозаСобственногоЗернаВРегламентированномУчете.Вставить(Перечисления.ИНАГРО_ВидыОперацийВвозаВывозаСобственногоЗерна.ПоступлениеТоваров, 		        "ФормаДокументаОбщая");
	ФормаИНАГРО_ОтражениеВвозаВывозаСобственногоЗернаВРегламентированномУчете.Вставить(Перечисления.ИНАГРО_ВидыОперацийВвозаВывозаСобственногоЗерна.РеализацияТоваровУслуг, 	        "ФормаДокументаОбщая");	
	Возврат ФормаИНАГРО_ОтражениеВвозаВывозаСобственногоЗернаВРегламентированномУчете;

КонецФункции 

Функция ОпределитьВидОперацииПоДокументуОснованию(Основание) Экспорт

	Результат = Перечисления.ИНАГРО_ВидыОперацийВвозаВывозаСобственногоЗерна.ПоступлениеТоваров;

	Возврат Результат;

КонецФункции

Функция ПолучитьФиксированныйМассивВидовОпераций() Экспорт

	МассивВидовОпераций = Новый Массив;
	СписокВидовОпераций = Новый СписокЗначений;
	
	ЗначенияПеречисления = Метаданные.Перечисления.ИНАГРО_ВидыОперацийВвозаВывозаСобственногоЗерна.ЗначенияПеречисления;
	Для Каждого ЗначениеПеречисления Из ЗначенияПеречисления Цикл
		ТекущийВидОперации = Перечисления.ИНАГРО_ВидыОперацийВвозаВывозаСобственногоЗерна[ЗначениеПеречисления.Имя];
		МассивВидовОпераций.Добавить(ТекущийВидОперации);
	КонецЦикла;
		
	Возврат Новый ФиксированныйМассив(МассивВидовОпераций);

КонецФункции

#КонецОбласти

#Область ФормированиеТиповыхДокументов

Функция ПолучитьФормируемыеДокументы(ДокументСсылка) Экспорт

	Если ДокументСсылка.ВидОперации = Перечисления.ИНАГРО_ВидыОперацийВвозаВывозаСобственногоЗерна.ПоступлениеТоваров Тогда
		Возврат Новый Структура("ПоступлениеТоваровУслуг", ПолучитьТаблицуДляФормированияПоступлениеРеализацияТоваровУслуг(ДокументСсылка));
	ИначеЕсли ДокументСсылка.ВидОперации = Перечисления.ИНАГРО_ВидыОперацийВвозаВывозаСобственногоЗерна.РеализацияТоваровУслуг Тогда
		Возврат Новый Структура("РеализацияТоваровУслуг", ПолучитьТаблицуДляФормированияПоступлениеРеализацияТоваровУслуг(ДокументСсылка));		
	КонецЕсли;

КонецФункции

Функция ПолучитьТаблицуДляФормированияПоступлениеРеализацияТоваровУслуг(ДокументСсылка)
	
	ВидОперации = ДокументСсылка.ВидОперации;
	
	Если ВидОперации = Перечисления.ИНАГРО_ВидыОперацийВвозаВывозаСобственногоЗерна.ПоступлениеТоваров Тогда		
		ВидОперацииДокумента = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ПокупкаКомиссия;
		ВидПоступления 		 = Перечисления.ИНАГРО_ВидыПоступленияТоваров.НаСклад;
	ИначеЕсли ВидОперации = Перечисления.ИНАГРО_ВидыОперацийВвозаВывозаСобственногоЗерна.РеализацияТоваровУслуг Тогда
		ВидОперацииДокумента = Перечисления.ВидыОперацийРеализацияТоваров.ПродажаКомиссия;
		ВидПередачи 		 = Перечисления.ИНАГРО_ВидыПередачиТоваров.СоСклада;
	КонецЕсли;

	СчетаУчета = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаРасчетовСКонтрагентом(
		ДокументСсылка.Организация, ДокументСсылка.Контрагент, ДокументСсылка.ДоговорКонтрагента);
		
	СтруктураКурсаДокумента = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ДокументСсылка.ВалютаДокумента, ДокументСсылка.Дата); 
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ИНАГРО_ОтражениеВвозаВывозаСобственногоЗернаВРегламентированномУчетеДокументыЗакупки.Ссылка.Дата КАК Дата,
		|	ИНАГРО_ОтражениеВвозаВывозаСобственногоЗернаВРегламентированномУчетеДокументыЗакупки.Ссылка.ВалютаДокумента КАК ВалютаДокумента,
		|	ИНАГРО_ОтражениеВвозаВывозаСобственногоЗернаВРегламентированномУчетеДокументыЗакупки.Ссылка.ДоговорКонтрагента КАК ДоговорКонтрагента,
		|	ИНАГРО_ОтражениеВвозаВывозаСобственногоЗернаВРегламентированномУчетеДокументыЗакупки.Ссылка.Комментарий КАК Комментарий,
		|	ИНАГРО_ОтражениеВвозаВывозаСобственногоЗернаВРегламентированномУчетеДокументыЗакупки.Ссылка.Контрагент КАК Контрагент,
		|	ИНАГРО_ОтражениеВвозаВывозаСобственногоЗернаВРегламентированномУчетеДокументыЗакупки.Ссылка.Организация КАК Организация,
		|	ИНАГРО_ОтражениеВвозаВывозаСобственногоЗернаВРегламентированномУчетеДокументыЗакупки.Ссылка.Склад КАК Склад,
		|	ИНАГРО_ОтражениеВвозаВывозаСобственногоЗернаВРегламентированномУчетеДокументыЗакупки.Ссылка.СуммаВключаетНДС КАК СуммаВключаетНДС,
		|	ИНАГРО_ОтражениеВвозаВывозаСобственногоЗернаВРегламентированномУчетеДокументыЗакупки.Ссылка.СчетУчетаНДС КАК СчетУчетаНДС,
		|	ИНАГРО_ОтражениеВвозаВывозаСобственногоЗернаВРегламентированномУчетеДокументыЗакупки.Ссылка.СчетУчетаНДСПодтвержденный КАК СчетУчетаНДСПодтвержденный,
		|	ИНАГРО_ОтражениеВвозаВывозаСобственногоЗернаВРегламентированномУчетеДокументыЗакупки.Ссылка.СчетУчетаРасчетовПоАвансам КАК СчетУчетаРасчетовПоАвансам,
		|	ИНАГРО_ОтражениеВвозаВывозаСобственногоЗернаВРегламентированномУчетеДокументыЗакупки.Ссылка.СчетУчетаРасчетовПоТаре КАК СчетУчетаРасчетовПоТаре,
		|	ИНАГРО_ОтражениеВвозаВывозаСобственногоЗернаВРегламентированномУчетеДокументыЗакупки.Ссылка.СчетУчетаРасчетовПоТареПоАвансам КАК СчетУчетаРасчетовПоТареПоАвансам,
		|	ИНАГРО_ОтражениеВвозаВывозаСобственногоЗернаВРегламентированномУчетеДокументыЗакупки.Ссылка.СчетУчетаРасчетовСКонтрагентом КАК СчетУчетаРасчетовСКонтрагентом,
		|	ИНАГРО_ОтражениеВвозаВывозаСобственногоЗернаВРегламентированномУчетеДокументыЗакупки.Ссылка.ТипЦен КАК ТипЦен,
		|	ИНАГРО_ОтражениеВвозаВывозаСобственногоЗернаВРегламентированномУчетеДокументыЗакупки.Номенклатура КАК Номенклатура,
		|	ИНАГРО_ОтражениеВвозаВывозаСобственногоЗернаВРегламентированномУчетеДокументыЗакупки.Количество КАК Количество,
		|	ИНАГРО_ОтражениеВвозаВывозаСобственногоЗернаВРегламентированномУчетеДокументыЗакупки.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	ИНАГРО_ОтражениеВвозаВывозаСобственногоЗернаВРегламентированномУчетеДокументыЗакупки.Коэффициент КАК Коэффициент,
		|	ИНАГРО_ОтражениеВвозаВывозаСобственногоЗернаВРегламентированномУчетеДокументыЗакупки.Цена КАК Цена,
		|	ИНАГРО_ОтражениеВвозаВывозаСобственногоЗернаВРегламентированномУчетеДокументыЗакупки.Сумма КАК Сумма,
		|	ИНАГРО_ОтражениеВвозаВывозаСобственногоЗернаВРегламентированномУчетеДокументыЗакупки.СтавкаНДС КАК СтавкаНДС,
		|	ИНАГРО_ОтражениеВвозаВывозаСобственногоЗернаВРегламентированномУчетеДокументыЗакупки.СуммаНДС КАК СуммаНДС
		|ИЗ
		|	Документ.ИНАГРО_ОтражениеВвозаВывозаСобственногоЗернаВРегламентированномУчете.ДокументыЗакупки КАК ИНАГРО_ОтражениеВвозаВывозаСобственногоЗернаВРегламентированномУчетеДокументыЗакупки
		|ГДЕ
		|	ИНАГРО_ОтражениеВвозаВывозаСобственногоЗернаВРегламентированномУчетеДокументыЗакупки.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
		
	ТаблицаДокументыЗакупки = Запрос.Выполнить().Выгрузить();	

	ТаблицаДокументыЗакупки.Колонки.Добавить("ВидОперации");
	ТаблицаДокументыЗакупки.Колонки.Добавить("КурсВзаиморасчетов");
	ТаблицаДокументыЗакупки.Колонки.Добавить("КратностьВзаиморасчетов");
	ТаблицаДокументыЗакупки.Колонки.Добавить("Ответственный");
	ТаблицаДокументыЗакупки.Колонки.Добавить("КодФормирования");
	ТаблицаДокументыЗакупки.Колонки.Добавить("ИНАГРО_ВидПоступления");
	ТаблицаДокументыЗакупки.Колонки.Добавить("ИНАГРО_ВидПередачи");
	
	ТаблицаДокументыЗакупки.Колонки.Добавить("СчетУчетаБУ");
	ТаблицаДокументыЗакупки.Колонки.Добавить("СхемаРеализации"); 
	ТаблицаДокументыЗакупки.Колонки.Добавить("НалоговоеНазначение");
	ТаблицаДокументыЗакупки.Колонки.Добавить("НалоговоеНазначениеДоходовИЗатрат"); 	
	ТаблицаДокументыЗакупки.Колонки.Добавить("ИНАГРО_Склад");

	ТаблицаДокументыЗакупки.ЗаполнитьЗначения(ВидОперацииДокумента,                      "ВидОперации");
	ТаблицаДокументыЗакупки.ЗаполнитьЗначения(СтруктураКурсаДокумента.Курс,              "КурсВзаиморасчетов");
	ТаблицаДокументыЗакупки.ЗаполнитьЗначения(СтруктураКурсаДокумента.Кратность,         "КратностьВзаиморасчетов");
	ТаблицаДокументыЗакупки.ЗаполнитьЗначения(Пользователи.ТекущийПользователь(),        "Ответственный");
	ТаблицаДокументыЗакупки.ЗаполнитьЗначения(Перечисления.ИНАГРО_КодФормирования.Общий, "КодФормирования");	
	ТаблицаДокументыЗакупки.ЗаполнитьЗначения(ВидПоступления,                            "ИНАГРО_ВидПоступления");
	ТаблицаДокументыЗакупки.ЗаполнитьЗначения(ВидПередачи,                               "ИНАГРО_ВидПередачи");	
		
	Если ВидОперации = Перечисления.ИНАГРО_ВидыОперацийВвозаВывозаСобственногоЗерна.ПоступлениеТоваров Тогда
		
		Если НЕ ЗначениеЗаполнено(ДокументСсылка.СчетУчетаРасчетовСКонтрагентом) Тогда
			ТаблицаДокументыЗакупки.ЗаполнитьЗначения(СчетаУчета.СчетРасчетов, "СчетУчетаРасчетовСКонтрагентом");
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ДокументСсылка.СчетУчетаРасчетовПоАвансам) Тогда
			ТаблицаДокументыЗакупки.ЗаполнитьЗначения(СчетаУчета.СчетАвансов, "СчетУчетаРасчетовПоАвансам");
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ДокументСсылка.СчетУчетаРасчетовПоТаре) Тогда
			ТаблицаДокументыЗакупки.ЗаполнитьЗначения(СчетаУчета.СчетУчетаТары, "СчетУчетаРасчетовПоТаре");
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ДокументСсылка.СчетУчетаРасчетовПоТареПоАвансам) Тогда
			ТаблицаДокументыЗакупки.ЗаполнитьЗначения(СчетаУчета.СчетАвансовПоТаре, "СчетУчетаРасчетовПоТареПоАвансам");
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ДокументСсылка.СчетУчетаНДС) Тогда
			ТаблицаДокументыЗакупки.ЗаполнитьЗначения(СчетаУчета.СчетУчетаНДСПриобретений, "СчетУчетаНДС");
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ДокументСсылка.СчетУчетаНДСПодтвержденный) Тогда
			ТаблицаДокументыЗакупки.ЗаполнитьЗначения(СчетаУчета.СчетУчетаНДСПриобретенийПодтвержденный, "СчетУчетаНДСПодтвержденный");
		КонецЕсли;
		
	ИначеЕсли ВидОперации = Перечисления.ИНАГРО_ВидыОперацийВвозаВывозаСобственногоЗерна.РеализацияТоваровУслуг Тогда
		
		Если НЕ ЗначениеЗаполнено(ДокументСсылка.СчетУчетаРасчетовСКонтрагентом) Тогда
			ТаблицаДокументыЗакупки.ЗаполнитьЗначения(СчетаУчета.СчетРасчетовПокупателя, "СчетУчетаРасчетовСКонтрагентом");
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ДокументСсылка.СчетУчетаРасчетовПоАвансам) Тогда
			ТаблицаДокументыЗакупки.ЗаполнитьЗначения(СчетаУчета.СчетАвансовПокупателя, "СчетУчетаРасчетовПоАвансам");
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ДокументСсылка.СчетУчетаРасчетовПоТаре) Тогда
			ТаблицаДокументыЗакупки.ЗаполнитьЗначения(СчетаУчета.СчетУчетаТарыПокупателя, "СчетУчетаРасчетовПоТаре");
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ДокументСсылка.СчетУчетаРасчетовПоТареПоАвансам) Тогда
			ТаблицаДокументыЗакупки.ЗаполнитьЗначения(СчетаУчета.СчетАвансовПоТареПокупателя, "СчетУчетаРасчетовПоТареПоАвансам");
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ДокументСсылка.СчетУчетаНДС) Тогда
			ТаблицаДокументыЗакупки.ЗаполнитьЗначения(СчетаУчета.СчетУчетаНДСПродаж, "СчетУчетаНДС");
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ДокументСсылка.СчетУчетаНДСПодтвержденный) Тогда
			ТаблицаДокументыЗакупки.ЗаполнитьЗначения(СчетаУчета.СчетУчетаНДСПродажПодтвержденный, "СчетУчетаНДСПодтвержденный");
		КонецЕсли;	
		
	КонецЕсли;
	
	ЗаполнитьСчетаУчетаВТаблице(ДокументСсылка, ТаблицаДокументыЗакупки);		
		
	ТаблицаШапки = ТаблицаДокументыЗакупки.Скопировать();
	Если ВидОперации = Перечисления.ИНАГРО_ВидыОперацийВвозаВывозаСобственногоЗерна.ПоступлениеТоваров Тогда	
		ТаблицаШапки.Свернуть(РеквизитыШапкиФормируемогоДокумента("ПоступлениеТоваровУслуг")); 
	ИначеЕсли ВидОперации = Перечисления.ИНАГРО_ВидыОперацийВвозаВывозаСобственногоЗерна.РеализацияТоваровУслуг Тогда
		ТаблицаШапки.Свернуть(РеквизитыШапкиФормируемогоДокумента("РеализацияТоваровУслуг"));
	КонецЕсли;
	
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("Шапка",  ТаблицаШапки);	
	СтруктураВозврата.Вставить("Товары", ТаблицаДокументыЗакупки);
	
	Возврат СтруктураВозврата;
	
КонецФункции

Процедура ЗаполнитьСчетаУчетаВТаблице(ДокументСсылка, ТаблицаДокументыЗакупки)

	ДанныеОбъекта = Новый Структура(
		"Дата, Организация, Склад,
		|ТипЦен, СуммаВключаетНДС, ВалютаДокумента, 
		|КурсВзаиморасчетов, КратностьВзаиморасчетов");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, ДокументСсылка);
	
	СоответствиеСведенийОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОСпискеНоменклатуры(
		ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаДокументыЗакупки, "Номенклатура", Истина), ДанныеОбъекта);
	
	Для Каждого СтрокаТаблицы Из ТаблицаДокументыЗакупки Цикл		
		СведенияОНоменклатуре = СоответствиеСведенийОНоменклатуре.Получить(СтрокаТаблицы.Номенклатура);
		ЗаполнитьСчетаУчетаВСтрокеТаблицы(СтрокаТаблицы, СведенияОНоменклатуре);
		СтрокаТаблицы.ИНАГРО_Склад = ДанныеОбъекта.Склад;
	КонецЦикла;

КонецПроцедуры

Процедура ЗаполнитьСчетаУчетаВСтрокеТаблицы(СтрокаТаблицы, СведенияОНоменклатуре)
	
	Если СведенияОНоменклатуре = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если СведенияОНоменклатуре.Свойство("СчетаУчета") Тогда
		// СведенияОНоменклатуре - структура сведений номенклатуры
		СчетаУчета = СведенияОНоменклатуре.СчетаУчета;
	ИначеЕсли СведенияОНоменклатуре.Свойство("СчетУчетаБУ") Тогда
		// СведенияОНоменклатуре - структура счетов учета номенклатуры
		СчетаУчета = СведенияОНоменклатуре;
	Иначе
		Возврат;
	КонецЕсли;			
	
	Если ЗначениеЗаполнено(СчетаУчета.СчетУчетаБУ) Тогда
		СтрокаТаблицы.СчетУчетаБУ = СчетаУчета.СчетУчетаБУ;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СчетаУчета.СхемаРеализации) Тогда
		СтрокаТаблицы.СхемаРеализации = СчетаУчета.СхемаРеализации;
	КонецЕсли;		
	
	Если ЗначениеЗаполнено(СчетаУчета.НалоговоеНазначение) Тогда
		СтрокаТаблицы.НалоговоеНазначение = СчетаУчета.НалоговоеНазначение;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СчетаУчета.НалоговоеНазначениеДоходовИЗатрат) Тогда
		СтрокаТаблицы.НалоговоеНазначениеДоходовИЗатрат = СчетаУчета.НалоговоеНазначениеДоходовИЗатрат;
	КонецЕсли;

КонецПроцедуры

Функция ПроверитьУсловияФормирования(ДокументСсылка) Экспорт
	
	Возврат ДокументСсылка.ВидОперации = Перечисления.ИНАГРО_ВидыОперацийВвозаВывозаСобственногоЗерна.ПоступлениеТоваров
		ИЛИ ДокументСсылка.ВидОперации = Перечисления.ИНАГРО_ВидыОперацийВвозаВывозаСобственногоЗерна.РеализацияТоваровУслуг;
		
КонецФункции

Функция РеквизитыШапкиФормируемогоДокумента(ИмяДокумента) Экспорт
	
	СтрокаРеквизитовШапки = "Дата, ВалютаДокумента, ДоговорКонтрагента,
							|Комментарий, Контрагент, Организация,
							|Склад, СуммаВключаетНДС, СчетУчетаНДС,
							|СчетУчетаНДСПодтвержденный, СчетУчетаРасчетовПоАвансам, СчетУчетаРасчетовПоТаре,
							|СчетУчетаРасчетовПоТареПоАвансам, СчетУчетаРасчетовСКонтрагентом, ТипЦен, ВидОперации,
							|КурсВзаиморасчетов, КратностьВзаиморасчетов, Ответственный, КодФормирования";
	
	Если ИмяДокумента = "ПоступлениеТоваровУслуг" Тогда		
		СтрокаРеквизитовШапки = СтрокаРеквизитовШапки + ", ИНАГРО_ВидПоступления";		
	ИначеЕсли ИмяДокумента = "РеализацияТоваровУслуг" Тогда		
		СтрокаРеквизитовШапки = СтрокаРеквизитовШапки + ", ИНАГРО_ВидПередачи";		
	Иначе		
		Возврат Неопределено;		
	КонецЕсли;
	
	Возврат СтрокаРеквизитовШапки;
	
КонецФункции 

#КонецОбласти

#КонецЕсли