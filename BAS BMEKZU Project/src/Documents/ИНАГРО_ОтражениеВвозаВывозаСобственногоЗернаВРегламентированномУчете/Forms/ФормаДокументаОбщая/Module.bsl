#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка, ЗначениеРабочейДаты)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
		
	Если Параметры.Ключ.Пустая() Тогда
		ПодготовитьФормуНаСервере();
	КонецЕсли;
	
	ЗначениеРабочейДаты = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("РабочаяДата");
	
	// Уведомим о появлении функционала рабочей даты
	НастройкиПредупреждений = ОбщегоНазначенияБП.НастройкиПредупрежденийОбИзменениях("РабочаяДатаИзДокумента");
	
	// Показываем, если это новый документ и сама рабочая дата еще не установлена.
	НастройкиПредупреждений.РабочаяДатаИзДокумента = НастройкиПредупреждений.РабочаяДатаИзДокумента
		И Параметры.Ключ.Пустая()
		И НЕ ЗначениеЗаполнено(БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("РабочаяДата"));	
		
	УстановитьПараметрыВыбораВидОперации();
	
	// Если форма вызвана в режиме смена вида операции - модифицируем сразу при открытии, 
	// чтобы можно было подтвердить или отказаться от изменения путем сохранения или 
	// отказа от сохранения документа.
	Если Параметры.Свойство("ИзменитьВидОперации")
		И Параметры.ИзменитьВидОперации Тогда
		
		// Не кэшируем переменную Объект, т.к. может вызываться Форма.ИзменитьРеквизиты(),
		// которая меняет Объект.
		Объект.ВидОперации = Параметры.ЗначенияЗаполнения.ВидОперации;
		                                    
		УстановитьЗаголовокФормы();       
		УправлениеФормой(ЭтаФорма);
		
		Модифицированность = Истина;
		
	КонецЕсли;
			
	СписокТабличныхЧастей = Новый СписокЗначений;
	СписокТабличныхЧастей.Добавить("ДокументыЗакупки", "ДокументыЗакупки");	

	АктивизироватьТабличнуюЧасть = ОбщегоНазначенияБПВызовСервера.ПолучитьПервуюНепустуюВидимуюТабличнуюЧасть(
		ЭтаФорма, СписокТабличныхЧастей);
	ОбщегоНазначенияБПВызовСервера.АктивизироватьЭлементФормы(ЭтаФорма, АктивизироватьТабличнуюЧасть);
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если НЕ Объект.Проведен Тогда 
		Возврат
	КонецЕсли;	
		
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)

	ОбщегоНазначенияБПКлиент.ОбработкаОповещенияФормыДокумента(ЭтаФорма, Объект.Ссылка, ИмяСобытия, Параметр, Источник);

КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения	

	ПодготовитьФормуНаСервере();

КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ЗаполнитьДобавленныеКолонкиТаблицы();

	УстановитьЗаголовокФормы();
	
	УстановитьСостояниеДокумента();
	
	СформированныеДокументы.Параметры.УстановитьЗначениеПараметра("Ссылка", Объект.Ссылка);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	Если НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДатаДокумента) Тогда
		// Изменение времени не влияет на поведение документа.
		ТекущаяДатаДокумента = Объект.Дата;
		Возврат;
	КонецЕсли;
	
	// Общие проверки условий по датам.
	ТребуетсяВызовСервера = ИНАГРО_ЭлеваторКлиент.ТребуетсяВызовСервераПриИзмененииДатыДокумента(Объект.Дата, ТекущаяДатаДокумента);
		
	// Если определили, что изменение даты может повлиять на какие-либо параметры, 
	// то передаем обработку на сервер.
	Если ТребуетсяВызовСервера Тогда
		ДатаПриИзмененииНаСервере();
	КонецЕсли;
	
	// Запомним новую дату документа.
	ТекущаяДатаДокумента = Объект.Дата;
	
КонецПроцедуры       

&НаСервере
Процедура ДатаПриИзмененииНаСервере()
	
	УстановитьФункциональныеОпцииФормы();
	
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ВидОперацииПриИзменении(Элемент)
	
	УстановитьЗаголовокФормы();
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		ОрганизацияПриИзмененииНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()
	
	УстановитьФункциональныеОпцииФормы();

	Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
		КонтрагентПриИзмененииНаСервере();
	КонецЕсли;	
	
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.Контрагент) Тогда		
		КонтрагентПриИзмененииНаСервере();
	КонецЕсли;  
	
КонецПроцедуры

&НаСервере
Процедура КонтрагентПриИзмененииНаСервере()
	
	БухгалтерскийУчетПереопределяемый.УстановитьДоговорКонтрагента(Объект.ДоговорКонтрагента, Объект.Контрагент, Объект.Организация);

	Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		ДоговорКонтрагентаОбработатьИзменение();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорКонтрагентаПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		ДоговорКонтрагентаПриИзмененииНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДоговорКонтрагентаПриИзмененииНаСервере()
	
	ДоговорКонтрагентаОбработатьИзменение();
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ДоговорКонтрагентаОбработатьИзменение()
	
	ВалютаДоИзменения 	 = Объект.ВалютаДокумента;
	КурсДоИзменения 	 = КурсВзаиморасчетов;
	КратностьДоИзменения = КратностьВзаиморасчетов;
	
	ПерезаполнитьЦены = Ложь;
	ПересчитатьЦены   = Ложь;
	ПересчитатьНДС    = Ложь;
	
	ДоговорУказан 	  = ЗначениеЗаполнено(Объект.ДоговорКонтрагента);
	РеквизитыДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		Объект.ДоговорКонтрагента,
		"ВалютаВзаиморасчетов, Владелец, ТипЦен, ВидДоговора, ВедениеВзаиморасчетов");
	
	ЭтоКомиссия = ДоговорУказан И РеквизитыДоговора.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом;
	
	Если ДоговорУказан Тогда
		ВалютаВзаиморасчетов   = РеквизитыДоговора.ВалютаВзаиморасчетов;
		ВедениеВзаиморасчетов  = РеквизитыДоговора.ВедениеВзаиморасчетов;

		Объект.ВалютаДокумента = ВалютаВзаиморасчетов;
		Если НЕ ЗначениеЗаполнено(Объект.Контрагент) Тогда
			Объект.Контрагент = РеквизитыДоговора.Владелец;
		КонецЕсли;
	Иначе
		Объект.ВалютаДокумента = ВалютаРегламентированногоУчета;
		ВедениеВзаиморасчетов  = ПредопределенноеЗначение("Перечисление.ВедениеВзаиморасчетовПоДоговорам.ПустаяСсылка");
	КонецЕсли;
		
	УстановитьФункциональныеОпцииФормы();	
	
	Если ВалютаДоИзменения <> Объект.ВалютаДокумента Тогда
		СтруктураКурсаДокумента = РаботаСКурсамиВалют.ПолучитьКурсВалюты(Объект.ВалютаДокумента, Объект.Дата);
		КурсВзаиморасчетов      = СтруктураКурсаДокумента.Курс;
		КратностьВзаиморасчетов = СтруктураКурсаДокумента.Кратность;
	КонецЕсли;
	
	НовыйТипЦен = Объект.ТипЦен;
	Если ДоговорУказан И ЗначениеЗаполнено(РеквизитыДоговора.ТипЦен) Тогда
		НовыйТипЦен = РеквизитыДоговора.ТипЦен;
	КонецЕсли;
	
	ЕстьСтроки = ЕстьСтрокиВТабличныхЧастях();
	
	Если Объект.ВалютаДокумента <> ВалютаДоИзменения
		ИЛИ КурсДоИзменения <> КурсВзаиморасчетов 
		ИЛИ Объект.ТипЦен <> НовыйТипЦен Тогда
		ПересчитатьЦены = ЕстьСтроки;
	КонецЕсли;
	
	ПрежнийСуммаВключаетНДС = Объект.СуммаВключаетНДС;
	Если ДоговорУказан И ЗначениеЗаполнено(НовыйТипЦен) Тогда
		Объект.ТипЦен 			= НовыйТипЦен;
		Объект.СуммаВключаетНДС = НовыйТипЦен.ЦенаВключаетНДС;
		ПересчитатьНДС 			= Объект.СуммаВключаетНДС <> ПрежнийСуммаВключаетНДС;
	КонецЕсли;
		
	Документы.ИНАГРО_ОтражениеВвозаВывозаСобственногоЗернаВРегламентированномУчете.ЗаполнитьСчетаУчетаРасчетов(Объект); 
	
	Если ЕстьСтроки И (ПерезаполнитьЦены ИЛИ ПересчитатьЦены ИЛИ ПересчитатьНДС) Тогда
		ЗаполнитьРассчитатьСуммы(ВалютаДоИзменения, КурсДоИзменения, КратностьДоИзменения, ПерезаполнитьЦены, ПересчитатьЦены, ПересчитатьНДС);
	ИначеЕсли ПересчитатьНДС Тогда
		УстановитьЗаголовкиКолонок();
	КонецЕсли; 	
	
	ОбновитьИтоги(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ЦеныИВалютаНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОбработатьИзмененияПоКнопкеЦеныИВалюты();
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучилПоДругомуДокументуПриИзменении(Элемент)
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(
		Элемент.ТекстРедактирования,
		ЭтотОбъект,
		"Объект.Комментарий");

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПокупкаЗерна

&НаКлиенте
Процедура ДокументыЗакупкиПриИзменении(Элемент)
	
	ОбновитьИтоги(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументыЗакупкиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока И НЕ Копирование Тогда
		Элемент.ТекущиеДанные.СтавкаНДС = УчетНДСКлиент.ПолучитьСтавкуНДСПоУмолчанию(ПлательщикНДС);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДокументыЗакупкиПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если НоваяСтрока И ОтменаРедактирования Тогда
		ОбновитьИтоги(ЭтаФорма);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДокументыЗакупкиНоменклатураПриИзменении(Элемент)
		
	ТекущиеДанные = Элементы.ДокументыЗакупки.ТекущиеДанные;
	
	ДанныеСтрокиТаблицы = Новый Структура(
		"Номенклатура, Коэффициент, ЕдиницаИзмерения, 
		|Количество, Цена, Сумма,
		|СтавкаНДС, СуммаНДС, ДокументОприходования,
		|Всего");		
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, ТекущиеДанные);
	
	ДанныеОбъекта = Новый Структура(
		"Дата, Организация, Склад,
		|ТипЦен, СуммаВключаетНДС, ВалютаДокумента, 
		|КурсВзаиморасчетов, КратностьВзаиморасчетов");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
		
	ДокументыЗакупкиНоменклатураПриИзмененииНаСервере(ДанныеСтрокиТаблицы, ДанныеОбъекта);
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтрокиТаблицы);

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ДокументыЗакупкиНоменклатураПриИзмененииНаСервере(СтрокаТабличнойЧасти, Знач ДанныеОбъекта)

	СведенияОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОНоменклатуре(
		СтрокаТабличнойЧасти.Номенклатура, ДанныеОбъекта);
		
	Если СведенияОНоменклатуре = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Документы.ИНАГРО_ОтражениеВвозаВывозаСобственногоЗернаВРегламентированномУчете.ЗаполнитьСведенияОНоменклатуреВСтрокеТабличнойЧасти(ДанныеОбъекта, СтрокаТабличнойЧасти, СведенияОНоменклатуре) ;
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументыЗакупкиКоличествоПриИзменении(Элемент)
	
	ОбработкаТабличныхЧастейКлиентСервер.ПриИзмененииКоличествоЦена(ЭтаФорма, "ДокументыЗакупки", 1);

КонецПроцедуры

&НаКлиенте
Процедура ДокументыЗакупкиЕдиницаИзмеренияПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ДокументыЗакупки.ТекущиеДанные;
	
	ДанныеСтрокиТаблицы = Новый Структура(
		"Номенклатура, Коэффициент, ЕдиницаИзмерения, 
		|Количество, Цена, Сумма,
		|СтавкаНДС, СуммаНДС, ДокументОприходования,
		|Всего");		
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, ТекущиеДанные);
	
	ДанныеОбъекта = Новый Структура(
		"Дата, Организация, СуммаВключаетНДС,
		|Ссылка");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
		
	ДокументыЗакупкиЕдиницаИзмеренияПриИзмененииНаСервере(ДанныеСтрокиТаблицы, ДанныеОбъекта);
		
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтрокиТаблицы);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ДокументыЗакупкиЕдиницаИзмеренияПриИзмененииНаСервере(СтрокаТабличнойЧасти, Знач ДанныеОбъекта)

	МетаданныеДокумента = ДанныеОбъекта.Ссылка.Метаданные();
	
	ОбработкаТабличныхЧастей.ЗаполнитьКоэффициентТабЧасти(СтрокаТабличнойЧасти, ДанныеОбъекта, "ДокументыЗакупки", МетаданныеДокумента);
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументыЗакупкиЦенаПриИзменении(Элемент)
	
	ОбработкаТабличныхЧастейКлиентСервер.ПриИзмененииКоличествоЦена(ЭтаФорма, "ДокументыЗакупки");
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументыЗакупкиСуммаПриИзменении(Элемент)
	
	ОбработкаТабличныхЧастейКлиентСервер.ПриИзмененииСумма(ЭтаФорма, "ДокументыЗакупки");

КонецПроцедуры

&НаКлиенте
Процедура ДокументыЗакупкиСтавкаНДСПриИзменении(Элемент)
	
	ОбработкаТабличныхЧастейКлиентСервер.ПриИзмененииСтавкаНДС(ЭтаФорма, "ДокументыЗакупки");
		
КонецПроцедуры

&НаКлиенте
Процедура ДокументыЗакупкиСуммаНДСПриИзменении(Элемент)
	
	ОбработкаТабличныхЧастейКлиентСервер.ПриИзмененииСуммаНДС(ЭтаФорма, "ДокументыЗакупки");
		
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСформированныеДокументы

&НаКлиенте
Процедура СформированныеДокументыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДокументСсылка = Элемент.ТекущиеДанные.ТиповыйДокумент;
	
	Если ДокументСсылка <> Неопределено Тогда 	
		
		ИмяТиповогоДокумента = СформированныеДокументыВыборНаСервере(ДокументСсылка);
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Ключ", ДокументСсылка);
		
		ОткрытьФорму("Документ." + ИмяТиповогоДокумента + ".Форма.ФормаДокументаОбщая", ПараметрыФормы);
		
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Функция СформированныеДокументыВыборНаСервере(ДокументСсылка)
	
	ИмяТиповогоДокумента = ДокументСсылка.Метаданные().Имя;
	
	Возврат ИмяТиповогоДокумента;
	
КонецФункции

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Заполнить(Команда)
	
	Если Объект.Проведен Тогда
		ТекстВопроса = НСтр("ru='Перед расчетом нужно отменить проведение документа. Отменить проведение?';uk='Перед розрахунком необхідно відмінити проведення документу. Відмінити проведення?'");
		Оповещение = Новый ОписаниеОповещения("ЗаполнитьЗавершение", ЭтотОбъект, Параметры);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);  
	Иначе
		ЗаполнитьНаСервере(); 
	КонецЕсли;	
			
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
   	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда		 
		Возврат;
	КонецЕсли; 
	
	ОтменитьПроведение();
	
	ЗаполнитьНаСервере();
				
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНаСервере()
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");	
	ДокументОбъект.ЗаполнитьПоОстаткамПокупка(); 	
	ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");	
			
	Если Объект.ВидОперации = Перечисления.ИНАГРО_ВидыОперацийВвозаВывозаСобственногоЗерна.РеализацияТоваровУслуг Тогда
		ЗаполнитьРеквизитыДоверенностиНаСервере();		
	КонецЕсли;
	
	ОбновитьИтоги(ЭтаФорма);
	
	ЗаполнитьДобавленныеКолонкиТаблицы();
	
	Модифицированность = Истина;

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьРеквизитыДоверенности(Команда)
	
	ЗаполнитьРеквизитыДоверенностиНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРеквизитыДоверенностиНаСервере()
	
	ДоверенностьДата  = '00010101';
	ДоверенностьСерия = "";
	ДоверенностьНомер = "";
	ДоверенностьЧерез = "";
	
	Для Каждого СтрокаТабличнойЧасти Из Объект.ДокументыЗакупки Цикл
		
		Если ТипЗнч(СтрокаТабличнойЧасти.ДокументОприходования) = Тип("ДокументСсылка.ИНАГРО_ТТНВывоз") Тогда
			
			Если    ЗначениеЗаполнено(СтрокаТабличнойЧасти.ДокументОприходования.ДоверенностьДата)
				ИЛИ ЗначениеЗаполнено(СтрокаТабличнойЧасти.ДокументОприходования.ДоверенностьСерия)
				ИЛИ ЗначениеЗаполнено(СтрокаТабличнойЧасти.ДокументОприходования.ДоверенностьНомер)
				ИЛИ ЗначениеЗаполнено(СтрокаТабличнойЧасти.ДокументОприходования.ДоверенностьЧерез) Тогда
				
				Объект.ДоверенностьДата  = СтрокаТабличнойЧасти.ДокументОприходования.ДоверенностьДата;
				Объект.ДоверенностьСерия = СтрокаТабличнойЧасти.ДокументОприходования.ДоверенностьСерия;
				Объект.ДоверенностьНомер = СтрокаТабличнойЧасти.ДокументОприходования.ДоверенностьНомер;
				Объект.ДоверенностьЧерез = СтрокаТабличнойЧасти.ДокументОприходования.ДоверенностьЧерез;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;	        
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьДокументы(Команда)
	
	Если Объект.ДокументыЗакупки.Количество() > 0 Тогда	
		
		Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ИНАГРО_ВидыОперацийВвозаВывозаСобственногоЗерна.ПоступлениеТоваров") Тогда
			ВидОперацииФормирования = НСтр("ru='поступления';uk='надходження'");   		
		ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ИНАГРО_ВидыОперацийВвозаВывозаСобственногоЗерна.РеализацияТоваровУслуг") Тогда
			ВидОперацииФормирования = НСтр("ru='реализации';uk='реалізації'"); 	
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
			ТекстСообщения = НСтр("ru='Не заполнен договор контрагента.';uk='Не заповнен договір контрагента.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);					
			Возврат;		
		КонецЕсли;
		
		Отказ = Ложь;
		
		Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
			Отказ = Истина;
		ИначеЕсли ЗначениеЗаполнено(Объект.Ссылка) И НЕ Объект.Проведен Тогда	
			Отказ = Истина;
		ИначеЕсли Объект.Проведен И Модифицированность Тогда
			Отказ = Истина;
		КонецЕсли; 	
		
		Если Отказ Тогда			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Перед формированием %1 документ необходимо провести!';uk='Перед формуванням %1 документ необхідно провести!'"), ВидОперацииФормирования);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);					
			Возврат;		
		Иначе
			СформироватьДокументыНаСервере(Отказ);  
		КонецЕсли;
		
	Иначе
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Нет документов для обработки.';uk='Немає документів для обробки.'"));
		
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура СформироватьДокументыНаСервере(Отказ)
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");	
	ИНАГРО_Элеватор.СформироватьПодчиненныеДокументы(ДокументОбъект, Отказ); 	
	ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");	

	Элементы.СформированныеДокументы.Обновить();
	
КонецПроцедуры

&НаКлиенте
Процедура Обновить(Команда)
	
	Элементы.СформированныеДокументы.Обновить();

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ПодготовитьФормуНаСервере()
	
	УстановитьФункциональныеОпцииФормы();	
	
	ТекущаяДатаДокумента = Объект.Дата;
	
	ВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();	
	
	ДоговорУказан = ЗначениеЗаполнено(Объект.ДоговорКонтрагента);	
	Если ДоговорУказан Тогда
		РеквизитыДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			Объект.ДоговорКонтрагента, "ВидДоговора, ВалютаВзаиморасчетов, ВедениеВзаиморасчетов");
		ВалютаВзаиморасчетов  = РеквизитыДоговора.ВалютаВзаиморасчетов;
		ВедениеВзаиморасчетов = РеквизитыДоговора.ВедениеВзаиморасчетов;
	КонецЕсли;	

	ЗаполнитьДобавленныеКолонкиТаблицы();

	УправлениеФормой(ЭтаФорма);
	
	УстановитьЗаголовокФормы();	
	
	УстановитьСостояниеДокумента();
	
	СформированныеДокументы.Параметры.УстановитьЗначениеПараметра("Ссылка", Объект.Ссылка);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьФункциональныеОпцииФормы()

	ОбщегоНазначенияБПКлиентСервер.УстановитьПараметрыФункциональныхОпцийФормыДокумента(ЭтаФорма);
	
	ПлательщикНДС = УчетнаяПолитика.ПлательщикНДС(Объект.Организация, Объект.Дата);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)	
		
	Объект   = Форма.Объект;
	Элементы = Форма.Элементы; 	
		
	ПолучилПоДругомуДокументу = Объект.ПолучилПоДругомуДокументу;
	
	Элементы.ДоверенностьСерия.Видимость                = НЕ ПолучилПоДругомуДокументу;
	Элементы.ДоверенностьДата.Видимость                 = НЕ ПолучилПоДругомуДокументу;
	Элементы.ДоверенностьНомер.Видимость                = НЕ ПолучилПоДругомуДокументу;
	Элементы.ДокументПодтверждающийПолномочия.Видимость = ПолучилПоДругомуДокументу;
	Элементы.ДоверенностьВыдана.Видимость               = НЕ ПолучилПоДругомуДокументу;
	Элементы.ЗаполнитьРеквизитыДоверенности.Видимость   = НЕ ПолучилПоДругомуДокументу;
	
	ОбновитьИтоги(Форма);
	
	СформироватьНадписьЦеныИВалюта(Форма);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПараметрыВыбораВидОперации()
	
	МассивВидовОпераций = Документы.ИНАГРО_ОтражениеВвозаВывозаСобственногоЗернаВРегламентированномУчете.ПолучитьФиксированныйМассивВидовОпераций();
	
	ПараметрМассивВидовОпераций = Новый ПараметрВыбора("Отбор.Ссылка", МассивВидовОпераций);
	
	НовыйМассив = Новый Массив();
	НовыйМассив.Добавить(ПараметрМассивВидовОпераций);
	НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);
	
	Элементы.ВидОперации.ПараметрыВыбора = НовыеПараметры;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗаголовокФормы()
	
	ОбъектФормы = ЭтаФорма.Объект;

	ТекстЗаголовка	= НСтр("ru='Отражение ввоза/вывоза собственного зерна в регламентированом учете';uk='Відображення ввезення/вивезення власного зерна в регламентованому обліку'");
	
	Если ЗначениеЗаполнено(ОбъектФормы.Ссылка) Тогда
		ТекстЗаголовка = ТекстЗаголовка + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru=' %1 от %2';uk=' %1 від %2'"), ОбъектФормы.Номер, ОбъектФормы.Дата);
	Иначе
		ТекстЗаголовка = ТекстЗаголовка + НСтр("ru=' (создание)';uk=' (створення)'");
	КонецЕсли;
	
	ЭтаФорма.Заголовок = ТекстЗаголовка + " (" + Строка(ОбъектФормы.ВидОперации) + ")";

КонецПроцедуры

&НаСервере
Процедура УстановитьЗаголовкиКолонок()

	ЗаголовокЦена 	= ?(ПлательщикНДС, ?(Объект.СуммаВключаетНДС, НСтр("ru='Цена с НДС';uk='Ціна з ПДВ'"), НСтр("ru='Цена без НДС';uk='Ціна без ПДВ'")), НСтр("ru='Цена';uk='Ціна'"));
	ЗаголовокСумма 	= ?(ПлательщикНДС, ?(Объект.СуммаВключаетНДС, НСтр("ru='Сумма с НДС';uk='Сума з ПДВ'"), НСтр("ru='Сумма без НДС';uk='Сума без ПДВ'")), НСтр("ru='Сумма';uk='Сума'"));
	
	Элементы.ДокументыЗакупкиЦена.Заголовок	 = ЗаголовокЦена;
	Элементы.ДокументыЗакупкиСумма.Заголовок = ЗаголовокСумма;
		
КонецПроцедуры

&НаСервере
Процедура УстановитьСостояниеДокумента()
	
	СостояниеДокумента = ОбщегоНазначенияБП.СостояниеДокумента(Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппаСтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	Элементы.СформированныеДокументы.Обновить(); 

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДобавленныеКолонкиТаблицы()	
		
	Для Каждого СтрокаТабличнойЧасти Из Объект.ДокументыЗакупки Цикл
		ЗаполнитьДобавленныеКолонкиСтрокиТаблицы(СтрокаТабличнойЧасти, Объект.СуммаВключаетНДС);	
	КонецЦикла;  
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьДобавленныеКолонкиСтрокиТаблицы(СтрокаТабличнойЧасти, СуммаВключаетНДС)
	
	СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма + ?(СуммаВключаетНДС, 0, СтрокаТабличнойЧасти.СуммаНДС);	
		
КонецПроцедуры

&НаСервере
Функция ЕстьСтрокиВТабличныхЧастях()

	ЕстьСтроки = Объект.ДокументыЗакупки.Количество() > 0;		
	
	Возврат ЕстьСтроки; 	
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьИтоги(Форма)
		
	Объект   = Форма.Объект;
	Элементы = Форма.Элементы; 	
		
	Если НЕ Объект.СуммаВключаетНДС Тогда
		Форма.ИтогиВсего = Объект.ДокументыЗакупки.Итог("Сумма") + Объект.ДокументыЗакупки.Итог("СуммаНДС");
	Иначе
		Форма.ИтогиВсего = Объект.ДокументыЗакупки.Итог("Сумма");
	КонецЕсли; 
	
	СуммаИтогов    = 0;
	СуммаНДСИтогов = 0;

	СуммаИтогов    = СуммаИтогов    + Объект.ДокументыЗакупки.Итог("Сумма");
	СуммаНДСИтогов = СуммаНДСИтогов + Объект.ДокументыЗакупки.Итог("СуммаНДС");

	Форма.ИтогиВсего    = СуммаИтогов;
	Форма.ИтогиВсегоНДС = СуммаНДСИтогов;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьПроведение()
	
	Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.ОтменаПроведения));
	
КонецПроцедуры


#Область ЦеныИВалюта

&НаКлиентеНаСервереБезКонтекста
Процедура СформироватьНадписьЦеныИВалюта(Форма)
	
	Объект = Форма.Объект;
	СтруктураНадписи = Новый Структура();
	СтруктураНадписи.Вставить("ТипЦен",           Объект.ТипЦен);
	СтруктураНадписи.Вставить("ВалютаДокумента",  Объект.ВалютаДокумента);
	СтруктураНадписи.Вставить("Курс",             Форма.КурсВзаиморасчетов);
	СтруктураНадписи.Вставить("Кратность",        Форма.КратностьВзаиморасчетов);
	СтруктураНадписи.Вставить("СуммаВключаетНДС", Объект.СуммаВключаетНДС);
	СтруктураНадписи.Вставить("ВалютаРегламентированногоУчета", Форма.ВалютаРегламентированногоУчета);
	Форма.ЦеныИВалюта = ОбщегоНазначенияБПКлиентСервер.СформироватьНадписьЦеныИВалюта(СтруктураНадписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьИзмененияПоКнопкеЦеныИВалюты(ПересчитатьЦены = Ложь, ПерезаполнитьЦены = Ложь )
	
	// 1. Формирование структуры параметров для заполнения формы "Цены и Валюта".
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ВалютаДокумента"     , Объект.ВалютаДокумента);
	СтруктураПараметров.Вставить("Курс"                , 1);
	СтруктураПараметров.Вставить("Кратность"           , 1);
	СтруктураПараметров.Вставить("Контрагент"          , Объект.Контрагент);
	СтруктураПараметров.Вставить("Договор"             , Объект.ДоговорКонтрагента);
	СтруктураПараметров.Вставить("Организация"         , Объект.Организация);
	СтруктураПараметров.Вставить("ДатаДокумента"       , Объект.Дата);
	СтруктураПараметров.Вставить("ПерезаполнитьЦены"   , ПерезаполнитьЦены);
	СтруктураПараметров.Вставить("ПересчитатьЦены"     , ПересчитатьЦены);
	СтруктураПараметров.Вставить("БылиВнесеныИзменения", Ложь);
	СтруктураПараметров.Вставить("ТипЦен"              , Объект.ТипЦен);
	
	Если ВалютаВзаиморасчетов = ВалютаРегламентированногоУчета Тогда
		СтруктураПараметров.Вставить("СуммаВключаетНДС", Объект.СуммаВключаетНДС);
	КонецЕсли;
	
	Если ПлательщикНДС Тогда
		СтруктураПараметров.Вставить("РазрешитьПересчетНДС");	
	КонецЕсли;

	// 2. Открываем форму "Цены и Валюта".
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ОбработатьИзмененияПоКнопкеЦеныИВалютыЗавершение", ЭтотОбъект);
	
	ОткрытьФорму("ОбщаяФорма.ФормаЦеныИВалюта", СтруктураПараметров, , , , , ОповещениеОЗакрытии);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьИзмененияПоКнопкеЦеныИВалютыЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
		
	СтруктураЦеныИВалюта = РезультатЗакрытия;
	
	Если ТипЗнч(СтруктураЦеныИВалюта) = Тип("Структура") И СтруктураЦеныИВалюта.БылиВнесеныИзменения Тогда

		ВалютаДоИзменения    = Объект.ВалютаДокумента;
		КурсДоИзменения 	 = КурсВзаиморасчетов;
		КратностьДоИзменения = КратностьВзаиморасчетов;
		
		Объект.ТипЦен                  = СтруктураЦеныИВалюта.ТипЦен;
		Объект.ВалютаДокумента         = СтруктураЦеныИВалюта.ВалютаДокумента;
		КурсВзаиморасчетов      = СтруктураЦеныИВалюта.Курс;
		КратностьВзаиморасчетов = СтруктураЦеныИВалюта.Кратность;
		Объект.СуммаВключаетНДС        = СтруктураЦеныИВалюта.СуммаВключаетНДС;
		
		Модифицированность = Истина;
		
		ПересчитатьНДС = СтруктураЦеныИВалюта.СуммаВключаетНДС <> СтруктураЦеныИВалюта.ПредСуммаВключаетНДС;
		
		ПриИзмененииЦеныИВалюты(
			ВалютаДоИзменения, 
			КурсДоИзменения,
			КратностьДоИзменения,
			СтруктураЦеныИВалюта.ПерезаполнитьЦены, 
			СтруктураЦеныИВалюта.ПересчитатьЦены, 
			ПересчитатьНДС,
			?(СтруктураЦеныИВалюта.Свойство("РассчитатьНДССУчетомОшибокОкругления"), СтруктураЦеныИВалюта.РассчитатьНДССУчетомОшибокОкругления, Ложь));
	
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииЦеныИВалюты(Знач ВалютаДоИзменения, КурсДоИзменения, КратностьДоИзменения, ПерезаполнитьЦены = Ложь, ПересчитатьЦены = Ложь, ПересчитатьНДС = Ложь, РассчитатьНДССУчетомОшибокОкругления = Ложь) Экспорт

	Если ПерезаполнитьЦены ИЛИ ПересчитатьЦены ИЛИ ПересчитатьНДС Тогда
		ПриИзмененииЦеныИВалютыНаСервере(ВалютаДоИзменения, КурсДоИзменения, КратностьДоИзменения, ПерезаполнитьЦены, ПересчитатьЦены, ПересчитатьНДС, РассчитатьНДССУчетомОшибокОкругления);
	Иначе
		ОбновитьИтоги(ЭтаФорма);
		УправлениеФормой(ЭтаФорма);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПриИзмененииЦеныИВалютыНаСервере(Знач ВалютаДоИзменения, КурсДоИзменения, КратностьДоИзменения, ПерезаполнитьЦены = Ложь, ПересчитатьЦены = Ложь, ПересчитатьНДС = Ложь, РассчитатьНДССУчетомОшибокОкругления = Ложь)

	ЗаполнитьРассчитатьСуммы(
		ВалютаДоИзменения,
		КурсДоИзменения,
		КратностьДоИзменения,
		ПерезаполнитьЦены,
		ПересчитатьЦены,
		ПересчитатьНДС,
		РассчитатьНДССУчетомОшибокОкругления);

	УстановитьЗаголовкиКолонок();

	ОбновитьИтоги(ЭтаФорма);
	
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРассчитатьСуммы(Знач ВалютаДоИзменения, 
					КурсДоИзменения, 
					КратностьДоИзменения, 
					ПерезаполнитьЦены = Ложь, 
					ПересчитатьЦены = Ложь, 
					ПересчитатьНДС = Ложь,
					РассчитатьНДССУчетомОшибокОкругления = Ложь)	
	
	Если ПерезаполнитьЦены Тогда
		
		СписокНоменклатуры	= ОбщегоНазначения.ВыгрузитьКолонку(Объект.ДокументыЗакупки, "Номенклатура", Истина);

		ТаблицаЦенНоменклатуры	= Ценообразование.ПолучитьТаблицуЦенНоменклатуры(
			СписокНоменклатуры,
			Объект.ТипЦен,
			Объект.Дата);
		
	ИначеЕсли ПересчитатьЦены Тогда
		Если КурсДоИзменения <> 0 И КратностьДоИзменения <> 0 Тогда
			СтруктураКурса = Новый Структура("Курс, Кратность", КурсДоИзменения, КратностьДоИзменения);
		Иначе
			СтруктураКурса = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаДоИзменения, Объект.Дата);
		КонецЕсли;
	КонецЕсли;
	
	Для Каждого Строка Из Объект.ДокументыЗакупки Цикл
		ЗаполнитьРассчитатьСуммыВСтроке(Строка, ТаблицаЦенНоменклатуры, ВалютаДоИзменения, СтруктураКурса, ПерезаполнитьЦены, ПересчитатьЦены, ПересчитатьНДС, Истина, 0, Истина);
	КонецЦикла;
	
	Если РассчитатьНДССУчетомОшибокОкругления Тогда		
		// соответствие для хранения погрешностей округлений
		ПогрешностиОкругления = Новый Соответствие();
		// пересчет сумм НДС с учетом ошибок округления
		УчетНДСКлиентСервер.ПересчитатьНДСсУчетомПогрешностиОкругления(Объект.ДокументыЗакупки, Объект.Ссылка, Объект.СуммаВключаетНДС, ПогрешностиОкругления, "ДокументыЗакупки", Строка(Объект.ВалютаДокумента));		
		// пересчет сумм НДС с учетом ошибок округления		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРассчитатьСуммыВСтроке(Строка, ТаблицаЦенНоменклатуры, ВалютаПередИзменением, СтруктураКурса,
										ПерезаполнитьЦены, ПересчитатьЦены, ПересчитатьНДС, ЕстьНДС,
										ЗначениеПустогоКоличества, ЕстьСкидки)

	СуммаСкидки = 0;
	
	Если ПерезаполнитьЦены Тогда
		
		НайденнаяСтрока	= ТаблицаЦенНоменклатуры.Найти(Строка.Номенклатура, "Номенклатура");
		Если НайденнаяСтрока <> Неопределено Тогда
			Цена = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(
				НайденнаяСтрока.Цена, НайденнаяСтрока.Валюта, Объект.ВалютаДокумента, НайденнаяСтрока.Курс,
				1, НайденнаяСтрока.Кратность, 1);
		Иначе
			Цена = 0;
		КонецЕсли;
		
		// Признак того, что цена включает НДС, хранится в реквизите ЦенаВключаетНДС типа цен
		ЦенаВключаетНДС = ?(ЗначениеЗаполнено(Объект.ТипЦен), Объект.ТипЦен.ЦенаВключаетНДС, Ложь);
		
	Иначе
		Если ПересчитатьЦены Тогда

			Цена = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(
				Строка.Цена, ВалютаПередИзменением, Объект.ВалютаДокумента, СтруктураКурса.Курс,
				1, СтруктураКурса.Кратность, 1);;
		Иначе
			Цена = Строка.Цена;
		КонецЕсли;
		// Признак того, что цена включает НДС, хранится в реквизите СуммаВключаетНДС документа
		ЦенаВключаетНДС = ?(ПересчитатьНДС, НЕ Объект.СуммаВключаетНДС, Объект.СуммаВключаетНДС);
	КонецЕсли;

	Если ЕстьНДС Тогда

		Строка.Цена = УчетНДСКлиентСервер.ПересчитатьЦенуПриИзмененииФлаговНалогов(
			Цена, ЦенаВключаетНДС, Объект.СуммаВключаетНДС, УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(Строка.СтавкаНДС));

		СуммаБезСкидки = Строка.Цена * ?(Строка.Количество = 0, ЗначениеПустогоКоличества, Строка.Количество);
		Строка.Сумма = СуммаБезСкидки;
		Строка.СуммаНДС = УчетНДСКлиентСервер.РассчитатьСуммуНДС(Строка.Сумма, Объект.СуммаВключаетНДС, УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(Строка.СтавкаНДС));

	Иначе
		
		Строка.Цена    = Цена;
		СуммаБезСкидки = Строка.Цена * ?(Строка.Количество = 0, ЗначениеПустогоКоличества, Строка.Количество);
		Строка.Сумма   = СуммаБезСкидки;
		
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункцииБСП

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти