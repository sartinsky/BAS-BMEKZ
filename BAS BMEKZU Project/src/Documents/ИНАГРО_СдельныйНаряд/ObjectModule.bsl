#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	ТипДанныхЗаполнения = ТипЗнч(ДанныеЗаполнения);
	
	ЗаполнениеДокументов.Заполнить(ЭтотОбъект, ДанныеЗаполнения); 	
	
	Если  ТипДанныхЗаполнения = Тип("Структура")
		И ДанныеЗаполнения.Свойство("ВидОперации") Тогда
		ВидОперации = ДанныеЗаполнения.ВидОперации;
	КонецЕсли;  
				
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ИНАГРО_ПроведениеРасчетов.СформироватьКраткийСоставСотрудников(ЭтотОбъект, "Начисления");
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)	
	
	КонтролироватьУжеВведенныеНачисления = НЕ Константы.ИНАГРО_ОдновременноеВыполнениеНесколькихРабот.Получить();	
	
	// Заголовок для сообщений об ошибках проведения.
	ПроведениеСервер.ПодготовитьНаборыЗаписейКПроведению(ЭтотОбъект);
	Заголовок = ОбщегоНазначенияБПВызовСервера.ПредставлениеДокументаПриПроведении(Ссылка);
	
	Если ВидОперации = Перечисления.ИНАГРО_ВидыОперацийСдельныйНаряд.СдельныйНаряд ИЛИ
		ВидОперации = Перечисления.ИНАГРО_ВидыОперацийСдельныйНаряд.СдельныйНарядНаПолевыеРаботы Тогда
		Если (ВидРасчета.ДоходНДФЛ = Справочники.ВидыДоходовНДФЛ.Код01ГПХ И НЕ Сотрудник.ИНАГРО_ДоговорПодряда)
			ИЛИ (НЕ ВидРасчета.ДоходНДФЛ = Справочники.ВидыДоходовНДФЛ.Код01ГПХ И Сотрудник.ИНАГРО_ДоговорПодряда) Тогда
			ОбщегоНазначенияБПКлиентСервер.СообщитьОбОшибке(Нстр("ru='Код дохода не соответствует виду договора сотрудника ';uk='Код доходу не відповідає виду договору співробітника '"));
			Отказ = Истина;
		КонецЕсли;	
		Если Сотрудник.ИНАГРО_ДоговорПодряда И НЕ ЗначениеЗаполнено(ДокументОснование)  Тогда
			ОбщегоНазначенияБПКлиентСервер.СообщитьОбОшибке(Нстр("ru=' Не заполнен документ-основание ';uk='Не заповнений документ-підстава '"));
			Отказ = Истина;
		КонецЕсли;	
	КонецЕсли;
	
	ВыборкаПоШапкеДокумента = СформироватьЗапросПоШапке().Выбрать();
	
	Если ВыборкаПоШапкеДокумента.Следующий() Тогда
				
		// Основные Начисления
		ВыборкаПоНачислениям = СформироватьЗапросПоНачислениям().Выбрать();
		Пока ВыборкаПоНачислениям.Следующий() Цикл 
			
			ПроверитьЗаполнениеСтрокиНачисления(ВыборкаПоНачислениям, Отказ);
			Если НЕ Отказ Тогда
				ДобавитьСтрокуНачислений(ВыборкаПоНачислениям, Движения.ИНАГРО_Начисления);
				ДобавитьСтрокуВДвиженияПоРегистрамНакопления(ВыборкаПоНачислениям)
			КонецЕсли;
			
		КонецЦикла;
		
		////////////////////////////////////////////////////////////////////////
		// По регистру расчета ОтражениеЗарплатыОрганизацийВРеглУчете
		Выборка = СформироватьЗапросПоОтражениюПроводки().Выбрать();
		Пока Выборка.Следующий() Цикл 
			
			Если НЕ Отказ Тогда
				ДобавитьСтрокуОтражений(Выборка, Движения.ИНАГРО_Отражение);
			КонецЕсли;
		КонецЦикла;
		
		Если УказатьОС Тогда
			ДобавитьСтрокуСписанныхМатериалов(ВыборкаПоШапкеДокумента);				
		КонецЕсли;
	КонецЕсли;
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКЗаписиДвижений(ЭтотОбъект);

КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКОтменеПроведения(ЭтотОбъект);
	Движения.Записать();
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)

	Дата = НачалоДня(ОбщегоНазначения.ТекущаяДатаПользователя());
	Ответственный = Пользователи.ТекущийПользователь();

	ДокументОснование = Неопределено;
	
КонецПроцедуры

#КонецОбласти

#Область Проведение

// Формирует запрос по шапке документа
//
//
// Возвращаемое значение:
//  Результат запроса
//
Функция СформироватьЗапросПоШапке() 
	
	Запрос = Новый Запрос;
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка" , Ссылка);
	Запрос.УстановитьПараметр("парамПустаяОрганизация", Справочники.Организации.ПустаяСсылка());
	
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ИНАГРО_СдельныйНаряд.Дата КАК Дата,
	               |	ИНАГРО_СдельныйНаряд.Дата КАК Период,
	               |	ИНАГРО_СдельныйНаряд.ПериодРегистрации КАК ПериодРегистрации,
	               |	ВЫБОР
	               |		КОГДА ИНАГРО_СдельныйНаряд.Организация.ГоловнаяОрганизация = &парамПустаяОрганизация
	               |			ТОГДА ИНАГРО_СдельныйНаряд.Организация
	               |		ИНАЧЕ ИНАГРО_СдельныйНаряд.Организация.ГоловнаяОрганизация
	               |	КОНЕЦ КАК ГоловнаяОрганизация,
	               |	ИНАГРО_СдельныйНаряд.Организация КАК Организация,
	               |	ИНАГРО_СдельныйНаряд.Организация КАК ОбособленноеПодразделение,
	               |	ИНАГРО_СдельныйНаряд.ВидРасчета,
	               |	ИНАГРО_СдельныйНаряд.УказатьОС,
	               |	ИНАГРО_СдельныйНаряд.ОсновноеСредство,
	               |	ИНАГРО_СдельныйНаряд.СчетЗатрат,
	               |	ИНАГРО_СдельныйНаряд.СубконтоЗатрат1,
	               |	ИНАГРО_СдельныйНаряд.СубконтоЗатрат2,
	               |	ИНАГРО_СдельныйНаряд.СубконтоЗатрат3,
	               |	ИНАГРО_СдельныйНаряд.НалоговоеНазначениеДоходовИЗатрат,
	               |	ИНАГРО_СдельныйНаряд.НоменклатураЗатрат КАК Номенклатура,
	               |	СУММА(ИНАГРО_СдельныйНарядНачисления.Результат) КАК Сумма
	               |ИЗ
	               |	Документ.ИНАГРО_СдельныйНаряд.Начисления КАК ИНАГРО_СдельныйНарядНачисления
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ИНАГРО_СдельныйНаряд КАК ИНАГРО_СдельныйНаряд
	               |		ПО ИНАГРО_СдельныйНарядНачисления.Ссылка = ИНАГРО_СдельныйНаряд.Ссылка
	               |ГДЕ
	               |	ИНАГРО_СдельныйНаряд.Ссылка = &ДокументСсылка
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ИНАГРО_СдельныйНаряд.ПериодРегистрации,
	               |	ИНАГРО_СдельныйНаряд.УказатьОС,
	               |	ИНАГРО_СдельныйНаряд.ОсновноеСредство,
	               |	ИНАГРО_СдельныйНаряд.СчетЗатрат,
	               |	ИНАГРО_СдельныйНаряд.СубконтоЗатрат1,
	               |	ИНАГРО_СдельныйНаряд.ВидРасчета,
	               |	ИНАГРО_СдельныйНаряд.НалоговоеНазначениеДоходовИЗатрат,
	               |	ИНАГРО_СдельныйНаряд.СубконтоЗатрат2,
	               |	ИНАГРО_СдельныйНаряд.НоменклатураЗатрат,
	               |	ИНАГРО_СдельныйНаряд.СубконтоЗатрат3,
	               |	ИНАГРО_СдельныйНаряд.Дата,
	               |	ВЫБОР
	               |		КОГДА ИНАГРО_СдельныйНаряд.Организация.ГоловнаяОрганизация = &парамПустаяОрганизация
	               |			ТОГДА ИНАГРО_СдельныйНаряд.Организация
	               |		ИНАЧЕ ИНАГРО_СдельныйНаряд.Организация.ГоловнаяОрганизация
	               |	КОНЕЦ,
	               |	ИНАГРО_СдельныйНаряд.Организация,
	               |	ИНАГРО_СдельныйНаряд.Дата,
	               |	ИНАГРО_СдельныйНаряд.Организация";
	
	Возврат Запрос.Выполнить();
	
КонецФункции // СформироватьЗапросПоШапке()

Функция СформироватьЗапросПоНачислениям()

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументСсылка" , Ссылка);
	Запрос.УстановитьПараметр("парамСписокПочасовыхОтклонений", ИНАГРО_ПроведениеРасчетов.ПолучитьСписокНачисленийПочасовыхОтклонений());
	Запрос.УстановитьПараметр("парамПустойСчет",ПланыСчетов.Хозрасчетный.ПустаяСсылка());
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СтрокиНачисления.Ссылка.Организация,
	|	СтрокиНачисления.Ссылка.ПериодРегистрации,
	|	СтрокиНачисления.НомерСтроки,  
	|	СтрокиНачисления.Авторасчет,
	|   ЗНАЧЕНИЕ(Перечисление.КодыОперацийВзаиморасчетыСРаботникамиОрганизаций.Начисления) КАК КодОперации,
	|
	|	СтрокиНачисления.Сотрудник,
	|	СтрокиНачисления.Сотрудник.ФизическоеЛицо КАК ФизическоеЛицо,
	|	СтрокиНачисления.Назначение,
	|	СтрокиНачисления.ВидРасчета,
	|	СтрокиНачисления.ВидРасчета.СпособРасчета		КАК СпособРасчета,
    |
	|	КОНЕЦПЕРИОДА(СтрокиНачисления.Ссылка.ПериодРегистрации, МЕСЯЦ)	КАК Период,
	|	СтрокиНачисления.Ссылка.ПериодРегистрации						КАК ПериодВзаиморасчетов,
	|	СтрокиНачисления.ВидРасчета.СчетУчета			КАК СчетУчета,
	|	СтрокиНачисления.Результат						КАК СуммаВзаиморасчетов,
	|
	|	СтрокиНачисления.ДатаНачала,
	|	СтрокиНачисления.ДатаОкончания,
	|	СтрокиНачисления.БазовыйПериодНачало,
	|	СтрокиНачисления.БазовыйПериодКонец,
	|	СтрокиНачисления.ДатаНачала			КАК ПериодДействияНачало,
	|	СтрокиНачисления.ДатаОкончания		КАК ПериодДействияКонец,
	|
	|	СтрокиНачисления.Результат,
	|	СтрокиНачисления.ОплаченоДнейЧасов,
	|	СтрокиНачисления.ОтработаноДней,
	|	СтрокиНачисления.ОтработаноЧасов,
	|	СтрокиНачисления.НормаДней,
	|	СтрокиНачисления.НормаЧасов,
	|	СтрокиНачисления.КалендарныеДни,
	
	|	ВЫБОР
	|		КОГДА СтрокиНачисления.СчетДт = &парамПустойСчет
	|			ТОГДА СтрокиНачисления.Ссылка.СчетЗатрат
	|		ИНАЧЕ СтрокиНачисления.СчетДт
	|	КОНЕЦ КАК СчетДт,
	
	|
	|	СтрокиНачисления.ПодразделениеОрганизации,
	|	СтрокиНачисления.ПодразделениеОрганизации КАК Подразделение,
	|	СтрокиНачисления.ГрафикРаботы,
	|   ВЫБОР	КОГДА СтрокиНачисления.ГрафикРаботы ССЫЛКА Справочник.ИНАГРО_ГрафикиРаботы
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка)
	|			ИНАЧЕ СтрокиНачисления.Сотрудник
	|	КОНЕЦ						КАК ГрафикРаботыСотрудник,
	|	СтрокиНачисления.ГрафикРаботы.СуммированныйУчетРабочегоВремени КАК СуммированныйУчетРабочегоВремени,
	|	СтрокиНачисления.ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени КАК ВидИспользованияРабочегоВремени, 
	|	СтрокиНачисления.Результат КАК Показатель1,
	|	СтрокиНачисления.НормаЧасовЗаМесяц,
	|	СтрокиНачисления.НормаДнейЗаМесяц,
	|	СтрокиНачисления.ВидУчетаВремениДляСредней,
	|	СтрокиНачисления.СпособОтраженияВБухучете,
	|	СтрокиНачисления.ДокументОснование,
	|	СтрокиНачисления.Сторно
	|
	|ИЗ Документ.ИНАГРО_СдельныйНаряд.Начисления КАК СтрокиНачисления
	|
	|ГДЕ СтрокиНачисления.Ссылка = &ДокументСсылка
	|";

	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоНачислениям()

Функция СформироватьЗапросПоОтражениюПроводки() Экспорт
	
	Записать();  // запишем документ
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("парамРегистратор", Ссылка);
	Запрос.УстановитьПараметр("парамПустойСчет",ПланыСчетов.Хозрасчетный.ПустаяСсылка());
	
	ТекстЗапроса  = "ВЫБРАТЬ
	                |	ЗНАЧЕНИЕ(ПланВидовРасчета.ИНАГРО_Отражение.Начисление) КАК ВидРасчета,
	                |	Основной.Ссылка.ПериодРегистрации КАК ПериодРегистрации,
	                |	Основной.БазовыйПериодНачало КАК БазовыйПериодНачало,
	                |	Основной.БазовыйПериодКонец КАК БазовыйПериодКонец,
	                |	NULL КАК ПериодСтавки,
	                |	Основной.Ссылка.Организация КАК Организация,
	                |	Основной.Сотрудник КАК Сотрудник,
	                |	Основной.ВидРасчета КАК ВидРасчетаБазы,
	                |	NULL КАК Налог,
	                |	NULL КАК ВзносыОсновногоНачисления,
	                |	NULL КАК СпособОтраженияЕСВФОТ,
	                |	Основной.НомерСтроки,
	                |	ВЫБОР
	                |		КОГДА Основной.СчетДт = &парамПустойСчет
	                |			ТОГДА Основной.Ссылка.СчетЗатрат
	                |		ИНАЧЕ Основной.СчетДт
	                |	КОНЕЦ КАК СчетДт,
	                |	ВЫБОР
	                |		КОГДА Основной.СчетДт = &парамПустойСчет
	                |			ТОГДА Основной.Ссылка.СубконтоЗатрат1
	                |		ИНАЧЕ Основной.СубконтоДт1
	                |	КОНЕЦ КАК СубконтоДт1,
	                |	ВЫБОР
	                |		КОГДА Основной.СчетДт = &парамПустойСчет
	                |			ТОГДА Основной.Ссылка.СубконтоЗатрат2
	                |		ИНАЧЕ Основной.СубконтоДт2
	                |	КОНЕЦ КАК СубконтоДт2,
	                |	ВЫБОР
	                |		КОГДА Основной.СчетДт = &парамПустойСчет
	                |			ТОГДА Основной.Ссылка.СубконтоЗатрат3
	                |		ИНАЧЕ Основной.СубконтоДт3
	                |	КОНЕЦ КАК СубконтоДт3,
	                |	ВЫБОР
	                |		КОГДА Основной.СчетДт = &парамПустойСчет
	                |			ТОГДА Основной.Ссылка.НалоговоеНазначениеДоходовИЗатрат
	                |		ИНАЧЕ Основной.НалоговоеНазначениеДоходовИЗатрат
	                |	КОНЕЦ КАК НалоговоеНазначение,
	                |	Основной.ВидРасчета.СчетУчета КАК СчетКт,
	                |	Основной.Сотрудник КАК СубконтоКт1,
	                |	Основной.Результат,
	                |	Основной.ВидРасчета.ДоходНДФЛ КАК ДоходНДФЛ
	                |ИЗ
	                |	Документ.ИНАГРО_СдельныйНаряд.Начисления КАК Основной
	                |ГДЕ
	                |	Основной.Ссылка = &парамРегистратор";
	
	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос.Выполнить();
	
КонецФункции  // АвтозаполнениеПроводок

Процедура ПроверитьЗаполнениеСтрокиНачисления(ВыборкаПоСтрокамДокумента, Отказ, Заголовок = "")

	СтрокаНачалаСообщенияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='В строке номер ""%1"" табл. части ""Начисления"": ';uk='У рядку номер ""%1"" табл. частини ""Нарахування"": '"), СокрЛП(ВыборкаПоСтрокамДокумента.НомерСтроки));
		
	// Отработано Дней/часов
	Если ?(ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ОтработаноЧасов),ВыборкаПоСтрокамДокумента.ОтработаноЧасов, 0) = 0 И ВыборкаПоСтрокамДокумента.ВидРасчета.ЗачетОтработанногоВремени Тогда
		ОбщегоНазначенияБПКлиентСервер.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + НСтр("ru='не указано количство отработанных часов!';uk='не вказано кількість відпрацьованих годин!'"), Отказ, Заголовок);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.СчетДт) Тогда //И НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.Ссылка.СчетЗатрат) Тогда
		ОбщегоНазначенияБПКлиентСервер.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Нстр("ru='по сотруднику %1 не указан счет затрат ни в шапке, ни в табличной части!';uk='По співробітникові %1 не вказаний рахунок витрат ні в шапці, ні в табличній частині!'"),СокрЛП(ВыборкаПоСтрокамДокумента.Сотрудник)), Отказ);
	КонецЕсли;


КонецПроцедуры // ПроверитьЗаполнениеСтрокиНачисления()

Процедура ДобавитьСтрокуНачислений(Выборка, НаборЗаписей)
	
	Движение = НаборЗаписей.Добавить();
	ЗаполнитьЗначенияСвойств(Движение, Выборка);
	
 	Движение.ВидУчетаВремени = ИНАГРО_ПроведениеРасчетов.ПолучитьВидУчетаВремени(Выборка.ВидРасчета, Выборка.СуммированныйУчетРабочегоВремени,Движение.ВидУчетаВремениДляСредней);

КонецПроцедуры // ДобавитьСтрокуОсновныхНачислений

Процедура ДобавитьСтрокуОтражений( ВыборкаПоСтрокамДокумента, НаборЗаписей )
	
	Движение = НаборЗаписей.Добавить();
	ЗаполнитьЗначенияСвойств(Движение, ВыборкаПоСтрокамДокумента);

КонецПроцедуры // ДобавитьСтрокуНачислений()

Процедура ДобавитьСтрокуВДвиженияПоРегистрамНакопления(ВыборкаПоСтрокамДокумента)
	
	Движение = Движения.ВзаиморасчетыССотрудниками.Добавить();
	ЗаполнитьЗначенияСвойств(Движение, ВыборкаПоСтрокамДокумента);
	
	Движение.ВидДвижения			= ВидДвиженияНакопления.Приход;

КонецПроцедуры // ДобавитьСтрокуВДвиженияПоРегистрамНакопления()

Процедура ДобавитьСтрокуСписанныхМатериалов(ВыборкаПоШапкеДокумента)
	 
	Движения.ИНАГРО_МатериалыСписанныеНаТранспорт.Записывать = Истина;
	Движение = Движения.ИНАГРО_МатериалыСписанныеНаТранспорт.Добавить();
	ЗаполнитьЗначенияСвойств(Движение, ВыборкаПоШапкеДокумента);
	
КонецПроцедуры

#КонецОбласти 

#Область СлужебныеПроцедурыИФункции	

// Получение данных
//
Процедура АвтозаполнениеНачисления(СписокСотрудников, СтруктураСтроки) Экспорт
	
	мСпособОтраженияВБухучете = Справочники.СпособыОтраженияЗарплатыВРеглУчете.ПустаяСсылка();
	
	// данные нормы календаря помесячно
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Организация",		Организация);
	Запрос.УстановитьПараметр("парамСотрудник",		СписокСотрудников);
	Запрос.УстановитьПараметр("Дата",				Дата);
	Запрос.УстановитьПараметр("ДатаНачала",			ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания",		КонецДня(ДатаОкончания));           
	Запрос.УстановитьПараметр("ВидРасчета",			ВидРасчета);
	Запрос.УстановитьПараметр("ТехнологическаяОперация",ТехнологическаяОперация);
	
	// запрос по всем назначениям, включая внутреннее совместительство
	ТекстЗапроса = "ВЫБРАТЬ
	               |	РаботникиОрганизации.Сотрудник КАК Назначение,
	               |	ДанныеКалендаря.ДатаМесяца КАК ДатаМесяца,
	               |	ДанныеКалендаря.ГрафикРаботы КАК ГрафикРаботы,
	               |	ДанныеКалендаря.НормаДнейЗаМесяц КАК НормаДнейЗаМесяц,
	               |	ДанныеКалендаря.НормаЧасовЗаМесяц КАК НормаЧасовЗаМесяц,
	               |	NULL КАК ДокументОснование,
	               |	РаботникиОрганизации.ПодразделениеОрганизации
	               |ПОМЕСТИТЬ ДанныеКалендаря
	               |ИЗ
	               |	(ВЫБРАТЬ
	               |		&ДатаНачала КАК ДатаНачала,
	               |		&ДатаОкончания КАК ДатаОкончания) КАК ГраницыБригадный
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИНАГРО_РаботникиОрганизаций.СрезПоследних(
	               |				&ДатаНачала,
	               |				Сотрудник В (&парамСотрудник)
	               |					ИЛИ Сотрудник.ОсновноеНазначение В (&парамСотрудник)) КАК РаботникиОрганизации
	               |		ПО (ИСТИНА)
	               |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	               |			ГрафикиРаботы.ГрафикРаботы КАК ГрафикРаботы,
	               |			НАЧАЛОПЕРИОДА(ГрафикиРаботы.Дата, МЕСЯЦ) КАК ДатаМесяца,
	               |			СУММА(ГрафикиРаботы.ОсновноеЗначение) КАК НормаДнейЗаМесяц,
	               |			СУММА(ГрафикиРаботы.ДополнительноеЗначение) КАК НормаЧасовЗаМесяц
	               |		ИЗ
	               |			РегистрСведений.ИНАГРО_ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботы
	               |		ГДЕ
	               |			ГрафикиРаботы.ВидУчетаВремени = ЗНАЧЕНИЕ(Перечисление.ИНАГРО_ВидыУчетаВремени.ПоДням)
	               |		
	               |		СГРУППИРОВАТЬ ПО
	               |			ГрафикиРаботы.ГрафикРаботы,
	               |			НАЧАЛОПЕРИОДА(ГрафикиРаботы.Дата, МЕСЯЦ)) КАК ДанныеКалендаря
	               |		ПО (ДанныеКалендаря.ГрафикРаботы = РаботникиОрганизации.ГрафикРаботы)
	               |			И (ДанныеКалендаря.ДатаМесяца >= НАЧАЛОПЕРИОДА(ГраницыБригадный.ДатаНачала, МЕСЯЦ))
	               |			И (ДанныеКалендаря.ДатаМесяца <= НАЧАЛОПЕРИОДА(ГраницыБригадный.ДатаОкончания, МЕСЯЦ))
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ИНАГРО_ДоговорНаВыполнениеРаботСФизЛицом.Сотрудник,
	               |	NULL,
	               |	NULL,
	               |	NULL,
	               |	NULL,
	               |	ИНАГРО_ДоговорНаВыполнениеРаботСФизЛицом.Ссылка,
	               |	ИНАГРО_ДоговорНаВыполнениеРаботСФизЛицом.ПодразделениеОрганизации
	               |ИЗ
	               |	(ВЫБРАТЬ
	               |		&ДатаНачала КАК ДатаНачала,
	               |		&ДатаОкончания КАК ДатаОкончания) КАК ГраницыБригадный,
	               |	Документ.ИНАГРО_ДоговорНаВыполнениеРаботСФизЛицом КАК ИНАГРО_ДоговорНаВыполнениеРаботСФизЛицом
	               |ГДЕ
	               |	(ИНАГРО_ДоговорНаВыполнениеРаботСФизЛицом.ДатаНачала <= &ДатаНачала
	               |				И ИНАГРО_ДоговорНаВыполнениеРаботСФизЛицом.ДатаОкончания >= &ДатаНачала
	               |			ИЛИ ИНАГРО_ДоговорНаВыполнениеРаботСФизЛицом.ДатаНачала >= &ДатаНачала
	               |				И ИНАГРО_ДоговорНаВыполнениеРаботСФизЛицом.ДатаНачала <= &ДатаОкончания)
	               |	И ИНАГРО_ДоговорНаВыполнениеРаботСФизЛицом.Сотрудник В(&парамСотрудник)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	РаботникиОрганизацийПринятые.Сотрудник,
	               |	ВЫБОР
	               |		КОГДА РаботникиОрганизацийПринятые.ГрафикРаботы.УчетНормыВремениПоОтдельномуГрафику
	               |			ТОГДА РаботникиОрганизацийПринятые.ГрафикРаботы.ГрафикРаботыНормыВремени
	               |		ИНАЧЕ РаботникиОрганизацийПринятые.ГрафикРаботы
	               |	КОНЕЦ КАК ГрафикРаботыСотрудника,
	               |	РаботникиОрганизацийПринятые.ПодразделениеОрганизации,
	               |	СУММА(ЕСТЬNULL(НормаВремени.ОсновноеЗначение, 0)) КАК ОсновноеЗначение,
	               |	СУММА(ЕСТЬNULL(НормаВремени.ДополнительноеЗначение, 0)) КАК ДополнительноеЗначение,
	               |	СУММА(ЕСТЬNULL(НормаВремени.ПроизводственныйКалендарьКалендарныеДни, 0)) КАК КалендарныеДни,
	               |	ВЫБОР
	               |		КОГДА РаботникиОрганизацийПринятые.Регистратор ССЫЛКА Документ.ИНАГРО_ПриемНаРаботуВОрганизацию
	               |			ТОГДА ИНАГРО_ПриемНаРаботуВОрганизациюРаботникиОрганизации.ДатаПриема
	               |		ИНАЧЕ ИНАГРО_КадровоеПеремещениеОрганизацийРаботникиОрганизации.ДатаНачала
	               |	КОНЕЦ КАК ДатаПриема,
	               |	РаботникиОрганизацийПринятые.Регистратор КАК Регистратор,
	               |	ВЫБОР
	               |		КОГДА РаботникиОрганизацийПринятые.Регистратор ССЫЛКА Документ.ИНАГРО_КадровоеПеремещениеОрганизаций
	               |			ТОГДА ИНАГРО_КадровоеПеремещениеОрганизацийРаботникиОрганизации.ПодразделениеОрганизации
	               |		ИНАЧЕ НЕОПРЕДЕЛЕНО
	               |	КОНЕЦ КАК НовоеПодразделение
	               |ПОМЕСТИТЬ Прием
	               |ИЗ
	               |	РегистрСведений.ИНАГРО_РаботникиОрганизаций.СрезПоследних(
	               |			&ДатаОкончания,
	               |			Организация = &Организация
	               |				И ПричинаИзмененияСостояния <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
	               |				И сотрудник В (&парамСотрудник)
	               |				И НЕ сотрудник В
	               |						(ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |							РаботникиОрганизацийСрезПоследних.Сотрудник
	               |						ИЗ
	               |							РегистрСведений.ИНАГРО_РаботникиОрганизаций.СрезПоследних(&ДатаОкончания, Организация = &Организация
	               |								И ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)) КАК РаботникиОрганизацийСрезПоследних)) КАК РаботникиОрганизацийПринятые
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИНАГРО_ГрафикиРаботыПоВидамВремени КАК НормаВремени
	               |		ПО (ВЫБОР
	               |				КОГДА РаботникиОрганизацийПринятые.ГрафикРаботы.УчетНормыВремениПоОтдельномуГрафику
	               |					ТОГДА РаботникиОрганизацийПринятые.ГрафикРаботы.ГрафикРаботыНормыВремени
	               |				ИНАЧЕ РаботникиОрганизацийПринятые.ГрафикРаботы
	               |			КОНЕЦ = НормаВремени.ГрафикРаботы)
	               |			И (НормаВремени.Дата >= &ДатаНачала)
	               |			И (НормаВремени.Дата <= &ДатаОкончания)
	               |			И (НормаВремени.ВидУчетаВремени = ЗНАЧЕНИЕ(Перечисление.ИНАГРО_ВидыУчетаВремени.ПоДням))
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ИНАГРО_ПриемНаРаботуВОрганизацию.РаботникиОрганизации КАК ИНАГРО_ПриемНаРаботуВОрганизациюРаботникиОрганизации
	               |		ПО РаботникиОрганизацийПринятые.Регистратор = ИНАГРО_ПриемНаРаботуВОрганизациюРаботникиОрганизации.Ссылка
	               |			И РаботникиОрганизацийПринятые.Сотрудник = ИНАГРО_ПриемНаРаботуВОрганизациюРаботникиОрганизации.Сотрудник
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ИНАГРО_КадровоеПеремещениеОрганизаций.РаботникиОрганизации КАК ИНАГРО_КадровоеПеремещениеОрганизацийРаботникиОрганизации
	               |		ПО РаботникиОрганизацийПринятые.Регистратор = ИНАГРО_КадровоеПеремещениеОрганизацийРаботникиОрганизации.Ссылка
	               |			И РаботникиОрганизацийПринятые.Сотрудник = ИНАГРО_КадровоеПеремещениеОрганизацийРаботникиОрганизации.Сотрудник
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	РаботникиОрганизацийПринятые.Сотрудник,
	               |	РаботникиОрганизацийПринятые.ПодразделениеОрганизации,
	               |	ВЫБОР
	               |		КОГДА РаботникиОрганизацийПринятые.ГрафикРаботы.УчетНормыВремениПоОтдельномуГрафику
	               |			ТОГДА РаботникиОрганизацийПринятые.ГрафикРаботы.ГрафикРаботыНормыВремени
	               |		ИНАЧЕ РаботникиОрганизацийПринятые.ГрафикРаботы
	               |	КОНЕЦ,
	               |	ВЫБОР
	               |		КОГДА РаботникиОрганизацийПринятые.Регистратор ССЫЛКА Документ.ИНАГРО_ПриемНаРаботуВОрганизацию
	               |			ТОГДА ИНАГРО_ПриемНаРаботуВОрганизациюРаботникиОрганизации.ДатаПриема
	               |		ИНАЧЕ ИНАГРО_КадровоеПеремещениеОрганизацийРаботникиОрганизации.ДатаНачала
	               |	КОНЕЦ,
	               |	РаботникиОрганизацийПринятые.Регистратор,
	               |	ВЫБОР
	               |		КОГДА РаботникиОрганизацийПринятые.Регистратор ССЫЛКА Документ.ИНАГРО_КадровоеПеремещениеОрганизаций
	               |			ТОГДА ИНАГРО_КадровоеПеремещениеОрганизацийРаботникиОрганизации.ПодразделениеОрганизации
	               |		ИНАЧЕ НЕОПРЕДЕЛЕНО
	               |	КОНЕЦ
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	&Дата,
	               |	НАЧАЛОПЕРИОДА(&ДатаНачала, МЕСЯЦ) КАК ПериодРегистрации,
	               |	&Организация,
	               |	&ДатаНачала,
	               |	&ДатаОкончания,
	               |	&ВидРасчета,
	               |	&ТехнологическаяОперация
	               |ПОМЕСТИТЬ ОсновнаяДок
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ИСТИНА КАК Авторасчет,
	               |	ОсновнаяДок.Дата,
	               |	ОсновнаяДок.ПериодРегистрации,
	               |	ОсновнаяДок.Организация,
	               |	ДанныеКалендаря.Назначение КАК Назначение,
	               |	ДанныеКалендаря.Назначение КАК Сотрудник,
	               |	ДанныеКалендаря.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	               |	ДанныеКалендаря.ГрафикРаботы КАК ГрафикРаботы,
	               |	ДанныеКалендаря.НормаЧасовЗаМесяц КАК НормаЧасовЗаМесяц,
	               |	ДанныеКалендаря.НормаДнейЗаМесяц КАК НормаДнейЗаМесяц,
	               |	ВЫБОР
	               |		КОГДА ЕСТЬNULL(ОсновнаяДок.ДатаНачала, ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)) = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	               |			ТОГДА НАЧАЛОПЕРИОДА(ОсновнаяДок.ПериодРегистрации, МЕСЯЦ)
	               |		ИНАЧЕ ЕСТЬNULL(ОсновнаяДок.ДатаНачала, ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0))
	               |	КОНЕЦ КАК ДатаНачала,
	               |	ВЫБОР
	               |		КОГДА ЕСТЬNULL(ОсновнаяДок.ДатаОкончания, ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)) = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	               |			ТОГДА КОНЕЦПЕРИОДА(ОсновнаяДок.ПериодРегистрации, МЕСЯЦ)
	               |		ИНАЧЕ ЕСТЬNULL(ОсновнаяДок.ДатаОкончания, ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0))
	               |	КОНЕЦ КАК ДатаОкончания,
	               |	НАЧАЛОПЕРИОДА(ОсновнаяДок.ПериодРегистрации, МЕСЯЦ) КАК БазовыйПериодНачало,
	               |	КОНЕЦПЕРИОДА(ОсновнаяДок.ПериодРегистрации, МЕСЯЦ) КАК БазовыйПериодКонец,
	               |	ОсновнаяДок.ВидРасчета,
	               |	ДанныеКалендаря.ДокументОснование,
	               |	ОсновнаяДок.ТехнологическаяОперация
	               |ПОМЕСТИТЬ РезультатПериод
	               |ИЗ
	               |	ДанныеКалендаря КАК ДанныеКалендаря,
	               |	ОсновнаяДок КАК ОсновнаяДок
	               |ГДЕ
	               |	НЕ ДанныеКалендаря.Назначение = """"
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	РезультатПериод.Авторасчет,
	               |	РезультатПериод.Дата,
	               |	РезультатПериод.ПериодРегистрации,
	               |	РезультатПериод.Организация,
	               |	РезультатПериод.Назначение,
	               |	ВЫБОР
	               |		КОГДА РезультатПериод.Сотрудник.ОсновноеНазначение = ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка)
	               |			ТОГДА РезультатПериод.Сотрудник
	               |		ИНАЧЕ РезультатПериод.Сотрудник.ОсновноеНазначение
	               |	КОНЕЦ КАК Сотрудник,
	               |	РезультатПериод.ПодразделениеОрганизации,
	               |	РезультатПериод.ГрафикРаботы,
	               |	РезультатПериод.НормаЧасовЗаМесяц,
	               |	РезультатПериод.НормаДнейЗаМесяц,
	               |	РезультатПериод.ДатаНачала,
	               |	РезультатПериод.ДатаОкончания,
	               |	РезультатПериод.БазовыйПериодНачало,
	               |	РезультатПериод.БазовыйПериодКонец,
	               |	РезультатПериод.ВидРасчета,
	               |	РезультатПериод.ДокументОснование,
	               |	Расценки.ТехнологическаяОперация,
	               |	Расценки.Расценка,
	               |	Прием.КалендарныеДни,
	               |	Прием.ОсновноеЗначение КАК ОтработаноДней,
	               |	Прием.ДополнительноеЗначение КАК ОтработаноЧасов,
	               |	Прием.ОсновноеЗначение КАК ОплаченоДнейЧасов,
	               |	Прием.ОсновноеЗначение КАК НормаДней,
	               |	Прием.ДополнительноеЗначение КАК НормаЧасов
	               |ИЗ
	               |	РезультатПериод КАК РезультатПериод
	               |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ ПЕРВЫЕ 1
	               |			ИНАГРО_ВидыРаботРучнойТрудСрезПоследних.Период КАК Период,
	               |			ИНАГРО_ВидыРаботРучнойТрудСрезПоследних.ТехнологическаяОперация КАК ТехнологическаяОперация,
	               |			ИНАГРО_ВидыРаботРучнойТрудСрезПоследних.Организация КАК Организация,
	               |			ИНАГРО_ВидыРаботРучнойТрудСрезПоследних.НормаВыработки КАК НормаВыработки,
	               |			ИНАГРО_ВидыРаботРучнойТрудСрезПоследних.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	               |			ИНАГРО_ВидыРаботРучнойТрудСрезПоследних.Расценка КАК Расценка,
	               |			ИНАГРО_ВидыРаботРучнойТрудСрезПоследних.Процент КАК Процент,
	               |			ИНАГРО_ВидыРаботРучнойТрудСрезПоследних.РасценкаК КАК РасценкаК,
	               |			ИНАГРО_ВидыРаботРучнойТрудСрезПоследних.СменныхНормОт КАК СменныхНормОт
	               |		ИЗ
	               |			РегистрСведений.ИНАГРО_ВидыРаботРучнойТруд.СрезПоследних(
	               |					&Дата,
	               |					(Организация = &Организация
	               |						ИЛИ Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка))
	               |						И ТехнологическаяОперация = &ТехнологическаяОперация) КАК ИНАГРО_ВидыРаботРучнойТрудСрезПоследних
	               |		
	               |		УПОРЯДОЧИТЬ ПО
	               |			ИНАГРО_ВидыРаботРучнойТрудСрезПоследних.Организация УБЫВ) КАК Расценки
	               |		ПО РезультатПериод.ТехнологическаяОперация = Расценки.ТехнологическаяОперация
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Прием КАК Прием
	               |		ПО РезультатПериод.Сотрудник = Прием.Сотрудник";
	
	Запрос.Текст = ТекстЗапроса;
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	ЗаполнениеПоСтоке = СтруктураСтроки;

	Пока Выборка.Следующий() Цикл
		
		Если ЗаполнениеПоСтоке = Неопределено Тогда
			// строка движений
			СтруктураСтроки = Начисления.Добавить();
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(СтруктураСтроки, Выборка);
		
		Если Не ЗначениеЗаполнено(Выборка.ДокументОснование) Тогда
			// Реквизиты
			ИНАГРО_ПроведениеРасчетов.ПроставитьДанныеСтроки(Выборка.Сотрудник, СтруктураСтроки.Назначение, СтруктураСтроки.ДатаНачала, Ссылка, СтруктураСтроки);
		КонецЕсли;
				
		НачисленияВыборка = ИНАГРО_ПроведениеРасчетов.ЗапросСпособОтражения(Дата, СтруктураСтроки.ВидРасчета, Выборка.Сотрудник, Организация).Выбрать();
		Если НачисленияВыборка.Следующий() Тогда
			// вверху основное начисление
			мСпособОтраженияВБухучете = НачисленияВыборка.СпособОтраженияВБухучете;
		КонецЕсли;
		
		Если Выборка.Сотрудник = СтруктураСтроки.Назначение Тогда
			СтруктураСтроки.СпособОтраженияВБухучете	= мСпособОтраженияВБухучете;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры  // АвтозаполнениеНачисленияОтпуск()

#КонецОбласти 

#КонецЕсли