#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
				
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды 
		
	Если Параметры.Ключ.Пустая() Тогда
		ЗначенияДляЗаполнения = Новый Структура("Месяц, Организация, Ответственный", 
		"Объект.ПериодРегистрации",
		"Объект.Организация",
		"Объект.Ответственный");
		
		ЗарплатаКадры.ЗаполнитьПервоначальныеЗначенияВФорме(ЭтаФорма, ЗначенияДляЗаполнения);
		
		УстановитьФункциональныеОпцииФормы();
		
		ЗарплатаКадрыКлиентСервер.ЗаполнитьМесяцПоДате(ЭтаФорма, "Объект.ПериодРегистрации", "МесяцСтрока");
		
		УстановитьПериоды();
		
		ПодготовитьФормуНаСервере();
		
	КонецЕсли;
	
	// Уведомим о появлении функционала рабочей даты
	НастройкиПредупреждений = ОбщегоНазначенияБП.НастройкиПредупрежденийОбИзменениях("РабочаяДатаИзДокумента");
	
	// Показываем, если это новый документ и сама рабочая дата еще не установлена.
	НастройкиПредупреждений.РабочаяДатаИзДокумента = НастройкиПредупреждений.РабочаяДатаИзДокумента
		И Параметры.Ключ.Пустая()
		И НЕ ЗначениеЗаполнено(БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("РабочаяДата"));
		
	УстановитьПараметрыВыбораВидОперации();
	
	// Если форма вызвана в режиме смена вида операции - модифицируем сразу при открытии, 
	// чтобы можно было подтвердить или отказаться от изменения путем сохранения или 
	// отказа от сохранения документа.
	Если Параметры.Свойство("ИзменитьВидОперации")
		И Параметры.ИзменитьВидОперации Тогда
		
		// Не кэшируем переменную Объект, т.к. может вызываться Форма.ИзменитьРеквизиты(),
		// которая меняет Объект.
		Объект.ВидОперации = Параметры.ЗначенияЗаполнения.ВидОперации;
		
		УстановитьЗаголовокФормы();
		УправлениеФормойНаСервере();
		
		Модифицированность = Истина;
		
	КонецЕсли;		
		
	УправлениеФормойНаСервере();

	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
КонецПроцедуры 

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ГрупповоеЗаполнение" И ТипЗнч(Параметр) = Тип("Структура") 
		И Параметр.Свойство("ИдентификаторВызывающейФормы")
		И Параметр.ИдентификаторВызывающейФормы = УникальныйИдентификатор Тогда
		
		ВыполнитьГрупповоеЗаполнение(Параметр);
		Модифицированность = Истина;
	КонецЕсли;

	ОбщегоНазначенияБПКлиент.ОбработкаОповещенияФормыДокумента(ЭтаФорма, Объект.Ссылка, ИмяСобытия, Параметр, Источник);
	
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	ЗарплатаКадрыКлиентСервер.ЗаполнитьМесяцПоДате(ЭтаФорма, "Объект.ПериодРегистрации", "МесяцСтрока");
	
	ПодготовитьФормуНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	УстановитьСостояниеДокумента();

КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)

	Если НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДатаДокумента) Тогда
		// Изменение времени не влияет на поведение документа.
		ТекущаяДатаДокумента = Объект.Дата;
		Возврат;
	КонецЕсли;

	// Общие проверки условий по датам.
	ТребуетсяВызовСервера = ОбщегоНазначенияБПКлиент.ТребуетсяВызовСервераПриИзмененииДатыДокумента(Объект.Дата, 
		ТекущаяДатаДокумента);
		
	// Если определили, что изменение даты может повлиять на какие-либо параметры, 
	// то передаем обработку на сервер.
	Если ТребуетсяВызовСервера Тогда
		ДатаПриИзмененииНаСервере();
	КонецЕсли;
	
	// Запомним новую дату документа.
	ТекущаяДатаДокумента = Объект.Дата;

КонецПроцедуры

&НаСервере
Процедура ДатаПриИзмененииНаСервере()

	УстановитьФункциональныеОпцииФормы();

	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)

	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		ОрганизацияПриИзмененииНаСервере();
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()

	УстановитьФункциональныеОпцииФормы();
	 		
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ВидОперацииПриИзменении(Элемент)
	
	Если Объект.Начисления.Количество() > 0 Тогда		
		ТекстВопроса = НСтр("ru='При смене вида операции табличные части будут очищены. Продолжить?';uk='При зміні вида операції табличні частини будуть очищені. Продовжити?'");
		Оповещение = Новый ОписаниеОповещения("ВидОперацииПриИзмененииЗавершение", ЭтотОбъект, Параметры);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	Иначе
		ВидОперацииОбработатьИзменение();
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ВидОперацииПриИзмененииЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
   	
    Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Объект.ВидОперации = ВидОперацииПредыдущий; 
		Возврат;
	КонецЕсли;    	
		
	Объект.Начисления.Очистить(); 
	
	ВидОперацииОбработатьИзменение(); 	
		    
КонецПроцедуры

&НаКлиенте
Процедура ВидОперацииОбработатьИзменение()
	
	УстановитьЗаголовокФормы();		
		
	УправлениеФормой(ЭтаФорма);
	
	ВидОперацииПредыдущий = Объект.ВидОперации; 
	
	Модифицированность = Истина; 
	    
КонецПроцедуры

&НаКлиенте
Процедура ВидРасчетаПриИзменении(Элемент)
	
	ВидРасчетаПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ВидРасчетаПриИзмененииНаСервере()
	
	ВидРасчетаНеМенялся = (ТекущийВидРасчета = Объект.ВидРасчета);
	Если НЕ ВидРасчетаНеМенялся Тогда
		Для Каждого ТекущаяСтрока Из Объект.Начисления Цикл
			ТекущаяСтрока.ВидРасчета = Объект.ВидРасчета;
			ТекущаяСтрока.СпособОтраженияВБухучете = Объект.ВидРасчета.СпособОтраженияВБухучете;
		КонецЦикла;
		ТекущийВидРасчета = Объект.ВидРасчета;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТехнологическаяОперацияПриИзменении(Элемент)
	
	ТехОперацияНеМенялась = (ТекущаяТехОперация = Объект.ТехнологическаяОперация);
	Если НЕ ТехОперацияНеМенялась Тогда
		ЗаполнитьРезультатПоВсемСтрокам();
		ТекущаяТехОперация = Объект.ТехнологическаяОперация;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СотрудникПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(Объект.Сотрудник) Тогда
		Возврат;
	КонецЕсли;  	
	
	Объект.ДокументОснование = ПредопределенноеЗначение("Документ.ИНАГРО_ДоговорНаВыполнениеРаботСФизЛицом.ПустаяСсылка"); 
	
	Если ПолучитьЗначениеРеквизита(Объект.Сотрудник, "ИНАГРО_ДоговорПодряда") Тогда 		
		Объект.ДокументОснование = СотрудникПриИзмененииНаСервере(Объект.Сотрудник, Объект.Дата); 		
	КонецЕсли; 

	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаСервереБезКонтекста
Функция СотрудникПриИзмененииНаСервере(Сотрудник, Дата)
	
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|			Договор.Ссылка КАК ДокументОснование
		|		ИЗ
		|			Документ.ИНАГРО_ДоговорНаВыполнениеРаботСФизЛицом КАК Договор
		|		ГДЕ
		|			&ДатаАктуальности МЕЖДУ Договор.ДатаНачала И Договор.ДатаОкончания
		|		    И Договор.Сотрудник = &Сотрудник";		
		Запрос.УстановитьПараметр("Сотрудник",        Сотрудник);
		Запрос.УстановитьПараметр("ДатаАктуальности", Дата);
		
		ТаблДоговорОснование = Запрос.Выполнить().Выгрузить();
		
		Если ТаблДоговорОснование.Количество() > 0 Тогда
			ТекДокументОснование = ТаблДоговорОснование[0].ДокументОснование;
		КонецЕсли; 
		
		Возврат ТекДокументОснование;

КонецФункции

&НаКлиенте
Процедура СчетЗатратПриИзменении(Элемент)
	
	УстановитьЗаголовкиИДоступностьСубконто(ЭтаФорма, Объект.СчетЗатрат, Истина, "Затрат");
	
	ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3", "СубконтоЗатрат1", "СубконтоЗатрат2", "СубконтоЗатрат3");
	ПоляОбъекта.Вставить("Подразделение", Объект.ПодразделениеОрганизации);
	ПоляОбъекта.Вставить("Организация",   Объект.Организация);
	БухгалтерскийУчетКлиентСервер.ПриИзмененииСчета(Объект.СчетЗатрат, Объект, ПоляОбъекта);
	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "Затрат", "СчетЗатрат");
	
	ПроверитьНалоговоеНазначениеДоходовИЗатрат();
	
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура СчетЗатратОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = БухгалтерскийУчетКлиент.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение);

КонецПроцедуры

&НаКлиенте
Процедура СубконтоЗатратПриИзменении(Элемент)

	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "Затрат", "СчетЗатрат");
	
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура СубконтоЗатратНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	СписокПараметров = СписокПараметровВыбораСубконто(ЭтаФорма, Объект, "СубконтоЗатрат%Индекс%", "СчетЗатрат");
	ОбщегоНазначенияБПКлиент.НачалоВыбораЗначенияСубконто(ЭтаФорма, Элемент, СтандартнаяОбработка, СписокПараметров);

КонецПроцедуры

&НаКлиенте
Процедура ПоказатьБазовыйПериодПриИзменении(Элемент)
	
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСчетЗатратПриИзменении(Элемент)
	
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ПоказатьНормуВремениИГрафикПриИзменении(Элемент)
	
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ПоказатьПодразделениеИВидРасчетаПриИзменении(Элемент)
	
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура УказатьОСПриИзменении(Элемент)
	
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(
		Элемент.ТекстРедактирования,
		ЭтотОбъект,
		"Объект.Комментарий");

КонецПроцедуры

// Редактирование месяца строкой

&НаКлиенте
Процедура МесяцСтрокаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Оповещение = Новый ОписаниеОповещения("МесяцНачисленияСтрокойНачалоВыбораЗавершение", ЭтотОбъект);
	ИНАГРО_ЗарплатаКадрыРасширенныйКлиент.ВводМесяцаНачалоВыбора(ЭтаФорма, ЭтаФорма, "Объект.ПериодРегистрации", "МесяцСтрока", , Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура МесяцСтрокаРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	ИНАГРО_ЗарплатаКадрыРасширенныйКлиент.ВводМесяцаРегулирование(ЭтаФорма, "Объект.ПериодРегистрации", "МесяцСтрока", Направление, Модифицированность);
	ПриИзмененииМесяцаНачисления();
	
КонецПроцедуры

&НаКлиенте
Процедура МесяцСтрокаАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	ИНАГРО_ЗарплатаКадрыРасширенныйКлиент.ВводМесяцаАвтоПодборТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
	ПриИзмененииМесяцаНачисления();
	
КонецПроцедуры

&НаКлиенте
Процедура МесяцСтрокаОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	ИНАГРО_ЗарплатаКадрыРасширенныйКлиент.ВводМесяцаОкончаниеВводаТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
	ПриИзмененииМесяцаНачисления();
	
КонецПроцедуры

&НаКлиенте
Процедура МесяцНачисленияСтрокойНачалоВыбораЗавершение(ЗначениеВыбрано, ДополнительныеПараметры) Экспорт
	
	ПриИзмененииМесяцаНачисления();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыНачисления

&НаКлиенте
Процедура НачисленияСчетДтПриИзменении(Элемент)

	ТекущиеДанные = Элементы.Начисления.ТекущиеДанные;

	УстановитьЗаголовкиИДоступностьСубконтоТЧ(ЭтаФорма, ТекущиеДанные.СчетДт, Истина, "Дт", Истина);

	ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3", "СубконтоДт1", "СубконтоДт2", "СубконтоДт3");

	ПоляОбъекта.Вставить("Организация", Объект.Организация); 	
	
	БухгалтерскийУчетКлиентСервер.ПриИзмененииСчета(ТекущиеДанные.СчетДт, ТекущиеДанные, ПоляОбъекта, Истина);
	
	ИзменитьПараметрыВыбораПолейСубконтоТЧ(ЭтаФорма);

	// Получим общие параметры обработки для реквизитов документа
	ПараметрыОбработки = ПодготовитьПараметрыОбработкиНачисления(ЭтаФорма, ТекущиеДанные);
	
	// Дополнительные поля, требующиеся для заполнения добавленных колонок табличного поля текущей формы.
	ПараметрыОбработки.ДанныеСтрокиТаблицы.Вставить("СубконтоДт1Доступность", ТекущиеДанные.СубконтоДт1Доступность);
	ПараметрыОбработки.ДанныеСтрокиТаблицы.Вставить("СубконтоДт2Доступность", ТекущиеДанные.СубконтоДт2Доступность);
	ПараметрыОбработки.ДанныеСтрокиТаблицы.Вставить("СубконтоДт3Доступность", ТекущиеДанные.СубконтоДт3Доступность); 	
		
	ЗаполнитьДобавленныеКолонкиСтрокиТаблицыЗатраты(ПараметрыОбработки.ДанныеСтрокиТаблицы, ПараметрыОбработки.ДанныеОбъекта);
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ПараметрыОбработки.ДанныеСтрокиТаблицы);

КонецПроцедуры

&НаКлиенте
Процедура НачисленияСубконтоДтПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Начисления.ТекущиеДанные;

	ИзменитьПараметрыВыбораПолейСубконтоТЧ(ЭтаФорма);

	// Получим общие параметры обработки для реквизитов документа
	ПараметрыОбработки = ПодготовитьПараметрыОбработкиНачисления(ЭтаФорма, ТекущиеДанные);
	
	// Дополнительные поля, требующиеся для заполнения добавленных колонок табличного поля текущей формы.
	ПараметрыОбработки.ДанныеСтрокиТаблицы.Вставить("СубконтоДт1Доступность", ТекущиеДанные.СубконтоДт1Доступность);
	ПараметрыОбработки.ДанныеСтрокиТаблицы.Вставить("СубконтоДт2Доступность", ТекущиеДанные.СубконтоДт2Доступность);
	ПараметрыОбработки.ДанныеСтрокиТаблицы.Вставить("СубконтоДт3Доступность", ТекущиеДанные.СубконтоДт3Доступность); 	
		
	ЗаполнитьДобавленныеКолонкиСтрокиТаблицыЗатраты(ПараметрыОбработки.ДанныеСтрокиТаблицы, ПараметрыОбработки.ДанныеОбъекта);
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ПараметрыОбработки.ДанныеСтрокиТаблицы);
		
КонецПроцедуры

&НаКлиенте
Процедура НачисленияСубконтоДтНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	СтрокаТаблицы = Элементы.Начисления.ТекущиеДанные;

	ПараметрыДокумента = ПолучитьСписокПараметров(ЭтаФорма, СтрокаТаблицы, "СубконтоДт%Индекс%");
	ПараметрыДокумента.Вставить("СчетУчета", СтрокаТаблицы.СчетДт);
	ОбщегоНазначенияБПКлиент.НачалоВыбораЗначенияСубконто(ЭтаФорма, Элемент, СтандартнаяОбработка, ПараметрыДокумента);

КонецПроцедуры

&НаКлиенте
Процедура НачисленияНазначениеПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Начисления.ТекущиеДанные;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяСтрока.Сотрудник = СотрудникПоНазначению(ТекущаяСтрока.Назначение);
	ТекущаяСтрока.ВидРасчета = Объект.ВидРасчета;
	
	СписокСотрудников = Новый СписокЗначений;
	СписокСотрудников.Добавить(ТекущаяСтрока.Назначение); 
	
	СтруктураСтроки = Новый Структура("Сотрудник, Назначение, Организация, ПодразделениеОрганизации, Должность,  
	|БазовыйПериодНачало, БазовыйПериодКонец, ДатаНачала, ДатаОкончания,  
	|НормаДней, НормаЧасов, НормаДнейЗаМесяц, НормаЧасовЗаМесяц, КалендарныеДни,
	|ОтработаноДней, ОтработаноЧасов, ОплаченоДнейЧасов,
	|ВидРасчета, ВидУчетаВремениДляСредней, ГрафикРаботы, ДокументОснование, 
	|СпособОтраженияВБухучете, Автозаполнение"); 
	
	Если (Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ИНАГРО_ВидыОперацийСдельныйНаряд.СдельныйНарядСписком") 
		ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ИНАГРО_ВидыОперацийСдельныйНаряд.СдельныйНарядНаПолевыеРаботыБригады"))
		И НЕ ЗначениеЗаполнено(ТекущаяСтрока.ТехнологическаяОперация) И ЗначениеЗаполнено(Объект.ТехнологическаяОперация) Тогда
		
		ТекущаяСтрока.ТехнологическаяОперация = Объект.ТехнологическаяОперация;
		
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(СтруктураСтроки, ТекущаяСтрока);
	НачисленияНазначениеПриИзмененииНаСервере(СписокСотрудников, СтруктураСтроки);
	ЗаполнитьЗначенияСвойств(ТекущаяСтрока, СтруктураСтроки);
	
	ЗаполнитьРезультатПоТекСтроке(ТекущаяСтрока);
КонецПроцедуры

&НаСервере
Процедура НачисленияНазначениеПриИзмененииНаСервере(СписокСотрудников, СтруктураСтроки = Неопределено)
	
	ЗаполнитьНачисленияПоСтроке(СписокСотрудников, СтруктураСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура НачисленияТехнологическаяОперацияПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Начисления.ТекущиеДанные;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ЗаполнитьРезультатПоТекСтроке(ТекущаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура НачисленияРасценкаПриИзменении(Элемент)
	// Случай, когда не укаана технологическая операция в строке ТЧ
	ТекущаяСтрока = Элементы.Начисления.ТекущиеДанные;
	ЗаполнитьРезультатПоТекСтроке(ТекущаяСтрока);

КонецПроцедуры

&НаКлиенте
Процедура НачисленияКоличествоРаботПриИзменении(Элемент)
	ТекущаяСтрока = Элементы.Начисления.ТекущиеДанные;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ЗаполнитьРезультатПоТекСтроке(ТекущаяСтрока);
КонецПроцедуры

&НаКлиенте
Процедура НачисленияКоличествоГАПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Начисления.ТекущиеДанные;
	Если НЕ ЗначениеЗаполнено(ТекущаяСтрока.ТехнологическаяОперация) 
		ИЛИ НЕ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ИНАГРО_ВидыОперацийСдельныйНаряд.СдельныйНарядНаПолевыеРаботы") Тогда 
		Возврат;
	КонецЕсли;
	
	ЗаполнитьРезультатПоТекСтроке(ТекущаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура НачисленияОтработаноДнейПриИзменении(Элемент)
	ТекущаяСтрока = Элементы.Начисления.ТекущиеДанные;
	Если ОшибкаВводаПоказателей(ТекущаяСтрока.ОтработаноДней) Тогда 
		ТекущаяСтрока.ОтработаноДней = 0;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура НачисленияОтработаноЧасовПриИзменении(Элемент)
	ТекущаяСтрока = Элементы.Начисления.ТекущиеДанные;
	Если ОшибкаВводаПоказателей(, ТекущаяСтрока.ОтработаноЧасов) Тогда 
		ТекущаяСтрока.ОтработаноЧасов = 0;
		Возврат;
	КонецЕсли;
	
	ЗаполнитьРезультатПоТекСтроке(ТекущаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура НачисленияПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока И НЕ Копирование Тогда
		Элемент.ТекущиеДанные.Авторасчет = Истина;
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура НачисленияДатаНачалаПриИзменении(Элемент)
	Отказ = Ложь;
	ТекСтрока = Элементы.Начисления.ТекущиеДанные;
	
	Если ЗначениеЗаполнено(ТекСтрока.ДатаНачала) И ЗначениеЗаполнено(ТекСтрока.ДатаОкончания) Тогда

		СтруктураПериода = Новый Структура("ДатаДокумента, ДатаПо, ПериодРегистрации,
		|ДатаНачала, ДатаОкончания, ОтработаноДней, ОтработаноЧасов, КалендарныеДни, ОплаченоДнейЧасов, Организация"); 
		
		ЗаполнитьЗначенияСвойств(СтруктураПериода, ТекСтрока);
		СтруктураПериода.ПериодРегистрации 	= Объект.ПериодРегистрации;
		
		ИНАГРО_ПроведениеРасчетовКлиент.ПроверитьКорректностьПериода(СтруктураПериода, Отказ);
		
		Если Не Отказ И ЗначениеЗаполнено(ТекСтрока.Назначение) Тогда
			СписокСотрудников = Новый СписокЗначений;
			СписокСотрудников.Добавить(ТекСтрока.Назначение);
			
			СтруктураПериода.ДатаДокумента 		= ТекСтрока.ДатаНачала;
			СтруктураПериода.ДатаПо 			= ТекСтрока.ДатаОкончания;
			СтруктураПериода.Организация 		= Объект.Организация;
		
			ПолучитьНормуВремениПоСотруднику(СписокСотрудников, СтруктураПериода);
			ЗаполнитьЗначенияСвойств(ТекСтрока, СтруктураПериода);
			ТекСтрока.ОплаченоДнейЧасов = СтруктураПериода.ОтработаноЧасов;
			ТекСтрока.НормаДней			= СтруктураПериода.ОтработаноДней;
			ТекСтрока.НормаЧасов		= СтруктураПериода.ОтработаноЧасов;
		КонецЕсли;
		
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура НачисленияДатаОкончанияПриИзменении(Элемент)
	Отказ = Ложь;
	ТекСтрока = Элементы.Начисления.ТекущиеДанные;
	
	Если ЗначениеЗаполнено(ТекСтрока.ДатаНачала) И ЗначениеЗаполнено(ТекСтрока.ДатаОкончания) Тогда

		СтруктураПериода = Новый Структура("ДатаДокумента, ДатаПо, ПериодРегистрации,
		|ДатаНачала, ДатаОкончания, ОтработаноДней, ОтработаноЧасов, КалендарныеДни, ОплаченоДнейЧасов, Организация"); 
		
		ЗаполнитьЗначенияСвойств(СтруктураПериода, ТекСтрока);
		СтруктураПериода.ПериодРегистрации 	= Объект.ПериодРегистрации;
		
		ИНАГРО_ПроведениеРасчетовКлиент.ПроверитьКорректностьПериода(СтруктураПериода, Отказ);
		
		Если Не Отказ И ЗначениеЗаполнено(ТекСтрока.Назначение) Тогда
			СписокСотрудников = Новый СписокЗначений;
			СписокСотрудников.Добавить(ТекСтрока.Назначение);
			
			СтруктураПериода.ДатаДокумента 		= ТекСтрока.ДатаНачала;
			СтруктураПериода.ДатаПо 			= ТекСтрока.ДатаОкончания;
			СтруктураПериода.Организация 		= Объект.Организация;
		
			ПолучитьНормуВремениПоСотруднику(СписокСотрудников, СтруктураПериода);
			ЗаполнитьЗначенияСвойств(ТекСтрока, СтруктураПериода);
			ТекСтрока.ОплаченоДнейЧасов = СтруктураПериода.ОтработаноЧасов;
			ТекСтрока.НормаДней			= СтруктураПериода.ОтработаноДней;
			ТекСтрока.НормаЧасов		= СтруктураПериода.ОтработаноЧасов;
		КонецЕсли;
		
	КонецЕсли;	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПоказатьВсе(Команда)
	
	Объект.УдалитьПоказатьБазовыйПериод            = Истина;
	Объект.УдалитьПоказатьСчетЗатрат               = Истина;
	Объект.УдалитьПоказатьНормуВремениИГрафик      = Истина;
	Объект.УдалитьПоказатьПодразделениеИВидРасчета = Истина;
	
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура СкрытьВсе(Команда)
	
	Объект.УдалитьПоказатьБазовыйПериод            = Ложь;
	Объект.УдалитьПоказатьСчетЗатрат               = Ложь;
	Объект.УдалитьПоказатьНормуВремениИГрафик      = Ложь;
	Объект.УдалитьПоказатьПодразделениеИВидРасчета = Ложь;
	
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура Заполнить(Команда)
	
	Если Не ЗначениеЗаполнено(Объект.ВидРасчета) Тогда
		ТекстСообщения = НСтр("ru='Перед началом заполнения табличной части необходимо выбрать Вид расчета';uk='Перед початком заповнення табличної частини необхідно обрати Вид розрахунку'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.ДатаНачала) ИЛИ Не ЗначениеЗаполнено(Объект.ДатаОкончания) Тогда
		ТекстСообщения = НСтр("ru='Перед началом заполнения табличной части необходимо заполнить Период';uk='Перед початком заповнення табличної частини необхідно обрати Період'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	Если Объект.Начисления.Количество() > 0 Тогда		 
		ТекстВопроса = НСтр("ru='Перед заполнением табличная часть будет очищена. Продолжить?';uk='Перед заповненям таблична частина буде очищена. Продовжити?'");
		Оповещение = Новый ОписаниеОповещения("ОчиститьТаблицыЗавершение", ЭтотОбъект, Параметры);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
		Возврат;
	КонецЕсли;
	
	ИНАГРО_ЗарплатаКадрыРасширенныйКлиент.ОткрытьФормуОтбораСпискаРаботников(ЭтаФорма, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбщееКоличествоРабот(Команда)
	
	Если Объект.Начисления.Количество()> 0 Тогда
		ТекстВопроса = НСтр("ru='Установить для всех общее количество работ?';uk='Встановити для всіх загальну кількість робіт?'");
		Оповещение = Новый ОписаниеОповещения("ЗаполнитьОбщееКоличествоРаботЗавершение", ЭтотОбъект, Параметры);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);  	
	КонецЕсли;  
	
КонецПроцедуры

&НаКлиенте
Процедура ОбщееКоличествоДней(Команда)
	
	Если Объект.Начисления.Количество()> 0 Тогда
		ТекстВопроса = НСтр("ru='Установить для всех общее количество дней?';uk='Встановити для всіх загальну кількість днів?'");
		Оповещение = Новый ОписаниеОповещения("ЗаполнитьОбщееКоличествоДнейЗавершение", ЭтотОбъект, Параметры);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);  	
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура ОбщееКоличествоЧасов(Команда)
	
	Если Объект.Начисления.Количество()> 0 Тогда
		ТекстВопроса = НСтр("ru='Установить для всех общее количество часов?';uk='Встановити для всіх загальну кількість годин?'");
		Оповещение = Новый ОписаниеОповещения("ЗаполнитьОбщееКоличествоЧасовЗавершение", ЭтотОбъект, Параметры);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);  	
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоНадоям(Команда)
	
	Если Объект.ТехнологическаяОперация = Неопределено Тогда 
		ТекстСообщения = Нстр("ru='Не выбрана технологическая операция!';uk='Не обрана технологічна операція!'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	Если Объект.Начисления.Количество() > 0 Тогда		
		ТекстВопроса = НСтр("ru='Перед заполнением табличные части будут очищены. Продолжить?';uk='Перед заповненням табличні частини будуть очищені. Продовжити?'");
		Оповещение = Новый ОписаниеОповещения("ЗаполнитьПоНадоямЗавершение", ЭтотОбъект, Параметры);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	Иначе
		ЗаполнитьТЧПоНадоям();
	КонецЕсли;	
	Для Каждого Строка Из Объект.Начисления Цикл
		ЗаполнитьРезультатПоТекСтроке(Строка);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ПодготовитьФормуНаСервере()
	
	ТекущаяДатаДокумента = Объект.Дата;
	ТекущаяДатаНачала = Объект.ДатаНачала;
	ТекущаяДатаОкончания = Объект.ДатаОкончания;
	
	ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
		
	УстановитьЗаголовкиИДоступностьСубконто(ЭтаФорма, Объект.СчетЗатрат, Истина, "Затрат");
	
	УстановитьЗаголовокФормы();
	
	УправлениеФормой(ЭтаФорма);
	
	УстановитьСостояниеДокумента(); 	

КонецПроцедуры

&НаСервере
Процедура УстановитьФункциональныеОпцииФормы()

	ОбщегоНазначенияБПКлиентСервер.УстановитьПараметрыФункциональныхОпцийФормыДокумента(ЭтаФорма); 	
			
	ПлательщикНДС                   = УчетнаяПолитика.ПлательщикНДС(Объект.Организация, Объект.Дата);
	ПлательщикНалогаНаПрибыльДо2015 = УчетнаяПолитика.ПлательщикНалогаНаПрибыльДо2015(Объект.Организация, Объект.Дата);
	
КонецПроцедуры 

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)

	Элементы = Форма.Элементы;
	Объект	 = Форма.Объект;  	
	
	ЭтоСдельныйНаряд                       = (Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ИНАГРО_ВидыОперацийСдельныйНаряд.СдельныйНаряд"));
	ЭтоСдельныйНарядСписком                = (Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ИНАГРО_ВидыОперацийСдельныйНаряд.СдельныйНарядСписком"));
	ЭтоСдельныйНарядНаПолевыеРаботы        = (Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ИНАГРО_ВидыОперацийСдельныйНаряд.СдельныйНарядНаПолевыеРаботы"));
	ЭтоСдельныйНарядНаПолевыеРаботыБригады = (Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ИНАГРО_ВидыОперацийСдельныйНаряд.СдельныйНарядНаПолевыеРаботыБригады"));
	
	ЗачетНормыВремени                      = ПолучитьЗначениеРеквизита(Объект.ВидРасчета, "ЗачетНормыВремени");
	ЗачетОтработанногоВремени              = ПолучитьЗначениеРеквизита(Объект.ВидРасчета, "ЗачетОтработанногоВремени"); 
	
	Элементы.Сотрудник.Видимость = ЭтоСдельныйНаряд ИЛИ ЭтоСдельныйНарядНаПолевыеРаботы;
	Элементы.ТехнологическаяОперация.Видимость = ЭтоСдельныйНарядНаПолевыеРаботыБригады ИЛИ ЭтоСдельныйНарядСписком;
	
	Если ЗначениеЗаполнено(Объект.Сотрудник) И (ЭтоСдельныйНаряд ИЛИ ЭтоСдельныйНарядНаПолевыеРаботы) Тогда		
		Элементы.ДокументОснование.Доступность = ПолучитьЗначениеРеквизита(Объект.Сотрудник, "ИНАГРО_ДоговорПодряда"); 	
	КонецЕсли;
	
	// Видимость кнопок заполнения
	Элементы.НачисленияСотрудникамиПоПодразделению.Видимость 	= ЭтоСдельныйНарядСписком ИЛИ ЭтоСдельныйНарядНаПолевыеРаботыБригады;
	Элементы.НачисленияОбщееКоличествоРабот.Видимость       	= ЭтоСдельныйНарядСписком ИЛИ ЭтоСдельныйНарядНаПолевыеРаботыБригады;
	Элементы.НачисленияОбщееКоличествоДней.Видимость       		= ЭтоСдельныйНарядСписком ИЛИ ЭтоСдельныйНарядНаПолевыеРаботыБригады;
	Элементы.НачисленияОбщееКоличествоЧасов.Видимость       	= ЭтоСдельныйНарядСписком ИЛИ ЭтоСдельныйНарядНаПолевыеРаботыБригады;
	Элементы.НачисленияЗаполнитьПоНадоям.Видимость       		= ЭтоСдельныйНарядСписком И ИНАГРО_ОбщийВызовСервераПовтИсп.ЕстьБСПУ();
	
	// Видимость колонок ТЧ
	Элементы.НачисленияСотрудник.Видимость                         = ЭтоСдельныйНарядСписком ИЛИ ЭтоСдельныйНарядНаПолевыеРаботыБригады;
	Элементы.НачисленияВидРасчета.Видимость                        = Объект.УдалитьПоказатьПодразделениеИВидРасчета;

	Элементы.НачисленияГруппаПериод.Видимость                      = ЗачетОтработанногоВремени;	
	Элементы.НачисленияГруппаБазовыйПериод.Видимость               = Объект.УдалитьПоказатьБазовыйПериод;
	
	Элементы.НачисленияТехнологическаяОперация.Видимость           = ЭтоСдельныйНаряд ИЛИ ЭтоСдельныйНарядНаПолевыеРаботы; 

	Элементы.НачисленияКоличествоГА.Видимость                      = ЭтоСдельныйНарядНаПолевыеРаботы;
	Элементы.НачисленияКоличествоТ.Видимость                       = ЭтоСдельныйНарядНаПолевыеРаботы; 
	
	Элементы.НачисленияСчетДт.Видимость                            = Объект.УдалитьПоказатьСчетЗатрат;
	Элементы.НачисленияСубконтоДт1.Видимость                       = Объект.УдалитьПоказатьСчетЗатрат;
	Элементы.НачисленияСубконтоДт2.Видимость                       = Объект.УдалитьПоказатьСчетЗатрат;
	Элементы.НачисленияСубконтоДт3.Видимость                       = Объект.УдалитьПоказатьСчетЗатрат;
	Элементы.НачисленияНалоговоеНазначениеДоходовИЗатрат.Видимость = Объект.УдалитьПоказатьСчетЗатрат;

	Элементы.НачисленияГруппаОтработано.Видимость                  = ЗачетОтработанногоВремени; 
	 
	Элементы.НачисленияНормаДней.Видимость                         = ЗачетНормыВремени;
	Элементы.НачисленияНормаДнейЗаМесяц.Видимость                  = ЗачетНормыВремени;
	Элементы.НачисленияНормаЧасовЗаМесяц.Видимость                 = ЗачетНормыВремени; 		
		
	Элементы.НачисленияГруппаНорма.ОтображатьЗаголовок             = Объект.УдалитьПоказатьНормуВремениИГрафик;
	Элементы.НачисленияНормаДней.Видимость                         = Объект.УдалитьПоказатьНормуВремениИГрафик;
	Элементы.НачисленияНормаЧасов.Видимость                        = Объект.УдалитьПоказатьНормуВремениИГрафик;  
	
	Элементы.НачисленияГрафикРаботы.Видимость                      = Объект.УдалитьПоказатьНормуВремениИГрафик;
	Элементы.НачисленияКалендарныеДни.Видимость                    = Объект.УдалитьПоказатьНормуВремениИГрафик;
	
	Элементы.НачисленияПодразделениеОрганизации.Видимость          = Объект.УдалитьПоказатьПодразделениеИВидРасчета; 	
	
	Элементы.ОсновноеСредство.Видимость                            = Объект.УказатьОС; 
	Элементы.НоменклатураЗатрат.Видимость                          = Объект.УказатьОС;  
	
КонецПроцедуры

&НаСервере
Процедура УправлениеФормойНаСервере()
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПараметрыВыбораВидОперации()
	
	МассивВидовОпераций = Документы.ИНАГРО_СдельныйНаряд.ПолучитьФиксированныйМассивВидовОпераций();
	
	ПараметрМассивВидовОпераций = Новый ПараметрВыбора("Отбор.Ссылка", МассивВидовОпераций);
	
	НовыйМассив = Новый Массив();
	НовыйМассив.Добавить(ПараметрМассивВидовОпераций);
	НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);
	
	Элементы.ВидОперации.ПараметрыВыбора = НовыеПараметры;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗаголовокФормы()
	
	ОбъектФормы = ЭтаФорма.Объект;

	ТекстЗаголовка = НСтр("ru='Сдельный наряд';uk='Відрядний наряд'");
	
	Если ЗначениеЗаполнено(ОбъектФормы.Ссылка) Тогда
		ТекстЗаголовка = ТекстЗаголовка + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru=' %1 от %2';uk=' %1 від %2'"), ОбъектФормы.Номер, ОбъектФормы.Дата);
	Иначе
		ТекстЗаголовка = ТекстЗаголовка + НСтр("ru=' (создание)';uk=' (створення)'");
	КонецЕсли;
	
	ЭтаФорма.Заголовок = ТекстЗаголовка + " (" + Строка(ОбъектФормы.ВидОперации) + ")";

КонецПроцедуры

&НаСервере
Процедура УстановитьСостояниеДокумента()
	
	СостояниеДокумента = ОбщегоНазначенияБП.СостояниеДокумента(Объект);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьЗаголовкиИДоступностьСубконто(Форма, Счет, ЕстьПодразделение, Постфикс = "")

	ПоляФормы = Новый Структура("Субконто1, Субконто2, Субконто3",
		"Субконто" + Постфикс + "1",
		"Субконто" + Постфикс + "2",
		"Субконто" + Постфикс + "3");
		
	Если ЕстьПодразделение Тогда
		ПоляФормы.Вставить("Подразделение", "ПодразделениеЗатрат" + Постфикс);
	КонецЕсли;
	
	ЗаголовкиПолей = Новый Структура("Субконто1, Субконто2, Субконто3",
		"ЗаголовокСубконто" + Постфикс + "1",
		"ЗаголовокСубконто" + Постфикс + "2",
		"ЗаголовокСубконто" + Постфикс + "3");
	
	Если ЕстьПодразделение Тогда
		ЗаголовкиПолей.Вставить("Подразделение", "ЗаголовокПодразделение" + Постфикс);
	КонецЕсли;
	
	БухгалтерскийУчетКлиентСервер.ПриВыбореСчета(Счет, Форма, ПоляФормы, ЗаголовкиПолей);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ИзменитьПараметрыВыбораПолейСубконто(Форма, Суффикс, ИмяСчета)

	ПараметрыДокумента = СписокПараметровВыбораСубконто(Форма, Форма.Объект,
		"Субконто" + Суффикс + "%Индекс%", ИмяСчета);
	
	БухгалтерскийУчетКлиентСервер.ИзменитьПараметрыВыбораПолейСубконто(
		Форма, 
		Форма.Объект, 
		"Субконто" + Суффикс + "%Индекс%", 
		"Субконто" + Суффикс + "%Индекс%", 
		ПараметрыДокумента);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьЗаголовкиИДоступностьСубконтоТЧ(Форма, Счет, ЕстьПодразделение, Постфикс = "", ЭтоТаблица = Ложь);
		
	ПоляФормы = Новый Структура("Субконто1, Субконто2, Субконто3",
								"НачисленияСубконто" + Постфикс + "1",
								"НачисленияСубконто" + Постфикс + "2",
								"НачисленияСубконто" + Постфикс + "3"); 
	
	БухгалтерскийУчетКлиентСервер.ПриВыбореСчета(Счет, Форма, ПоляФормы, Неопределено, ЭтоТаблица);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ИзменитьПараметрыВыбораПолейСубконтоТЧ(Форма)
	
	Если Форма.Элементы.Начисления.ТекущаяСтрока <> Неопределено Тогда 
		СтрокаТаблицы = Форма.Объект.Начисления.НайтиПоИдентификатору(Форма.Элементы.Начисления.ТекущаяСтрока);
		ПараметрыДокумента = ПолучитьСписокПараметров(Форма, СтрокаТаблицы, "СубконтоДт%Индекс%");
		БухгалтерскийУчетКлиентСервер.ИзменитьПараметрыВыбораПолейСубконто(Форма, СтрокаТаблицы, "СубконтоДт%Индекс%", "НачисленияСубконтоДт%Индекс%", ПараметрыДокумента);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция СписокПараметровВыбораСубконто(Форма, ПараметрыОбъекта, ШаблонИмяПоляОбъекта, ИмяСчета)

	СписокПараметров = Новый Структура;
	Для Индекс = 1 По 3 Цикл
		ИмяПоля = СтрЗаменить(ШаблонИмяПоляОбъекта, "%Индекс%", Индекс);
		Если ТипЗнч(ПараметрыОбъекта[ИмяПоля]) = Тип("СправочникСсылка.Контрагенты") Тогда
			СписокПараметров.Вставить("Контрагент", ПараметрыОбъекта[ИмяПоля]);
		ИначеЕсли ТипЗнч(ПараметрыОбъекта[ИмяПоля]) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
			СписокПараметров.Вставить("ДоговорКонтрагента", ПараметрыОбъекта[ИмяПоля]);
		ИначеЕсли ТипЗнч(ПараметрыОбъекта[ИмяПоля]) = Тип("СправочникСсылка.Номенклатура") Тогда
			СписокПараметров.Вставить("Номенклатура", ПараметрыОбъекта[ИмяПоля]);
		ИначеЕсли ТипЗнч(ПараметрыОбъекта[ИмяПоля]) = Тип("СправочникСсылка.Склады") Тогда
			СписокПараметров.Вставить("Склад", ПараметрыОбъекта[ИмяПоля]);
		КонецЕсли;
	КонецЦикла;
	СписокПараметров.Вставить("Организация", Форма.Объект.Организация);
	СписокПараметров.Вставить("СчетУчета"  , Форма.Объект[ИмяСчета]);
	
	Возврат СписокПараметров;

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьСписокПараметров(Форма, Объект, ШаблонИмяПоляОбъекта)

	СписокПараметров = Новый Структура;
	Для Индекс = 1 По 3 Цикл
		ИмяПоля = СтрЗаменить(ШаблонИмяПоляОбъекта, "%Индекс%", Индекс);
		Если ТипЗнч(Объект[ИмяПоля]) = Тип("СправочникСсылка.Контрагенты") Тогда
			СписокПараметров.Вставить("Контрагент", Объект[ИмяПоля]);
		ИначеЕсли ТипЗнч(Объект[ИмяПоля]) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
			СписокПараметров.Вставить("ДоговорКонтрагента", Объект[ИмяПоля]);
		ИначеЕсли ТипЗнч(Объект[ИмяПоля]) = Тип("СправочникСсылка.Номенклатура") Тогда
			СписокПараметров.Вставить("Номенклатура", Объект[ИмяПоля]);
		ИначеЕсли ТипЗнч(Объект[ИмяПоля]) = Тип("СправочникСсылка.Склады") Тогда
			СписокПараметров.Вставить("Склад", Объект[ИмяПоля]);
		КонецЕсли;
	КонецЦикла;
	СписокПараметров.Вставить("Организация", Форма.Объект.Организация);

	Возврат СписокПараметров;

КонецФункции

&НаСервереБезКонтекста
Процедура ЗаполнитьДобавленныеКолонкиСтрокиТаблицыЗатраты(СтрокаТаблицы, Знач ПараметрыОбъекта)
	
	ПоляОбъектаСубконто	= Новый Структура("Субконто1, Субконто2, Субконто3", "СубконтоДт1", "СубконтоДт2", "СубконтоДт3");

	БухгалтерскийУчетКлиентСервер.УстановитьДоступностьСубконто(СтрокаТаблицы.СчетДт, СтрокаТаблицы, ПоляОбъектаСубконто);
	
КонецПроцедуры 

&НаКлиенте
Функция ПодготовитьПараметрыОбработкиНачисления(Форма, СтрокаТабличнойЧасти)
	
	ДанныеСтрокиТаблицы = Новый Структура("СчетДт, СубконтоДт1, СубконтоДт2, СубконтоДт3"); 		
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, СтрокаТабличнойЧасти);
	
	ДанныеОбъекта = Новый Структура("Дата, Организация");		
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
	ПараметрыОбработки = Новый Структура();
	ПараметрыОбработки.Вставить("ДанныеСтрокиТаблицы", 	ДанныеСтрокиТаблицы);
	ПараметрыОбработки.Вставить("ДанныеОбъекта", 		ДанныеОбъекта);
	
	Возврат ПараметрыОбработки;
	
КонецФункции

&НаСервере
Процедура ПроверитьНалоговоеНазначениеДоходовИЗатрат()
	
	ХарактерЗатрат = УправлениеПроизводствомВызовСервера.ПолучитьХарактерЗатратПоСчетуЗатрат(Объект.СчетЗатрат, ,Объект.Дата);
	Если (ХарактерЗатрат = "Производство" ИЛИ ХарактерЗатрат = "Строительство" ИЛИ ХарактерЗатрат = "ТЗР" ИЛИ ХарактерЗатрат = "РБП" ИЛИ ХарактерЗатрат = "ОПЗ") Тогда
		Объект.НалоговоеНазначениеДоходовИЗатрат = Неопределено;	
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьЗначениеРеквизита(Ссылка, Реквизит)
	
	Возврат	ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, Реквизит);
	
КонецФункции

&НаСервере
Процедура ЗаполнитьНачисленияПоСтроке(СписокСотрудников, СтруктураСтроки = Неопределено)
	
	Документ = РеквизитФормыВЗначение("Объект");   
  	Документ.АвтозаполнениеНачисления(СписокСотрудников, СтруктураСтроки);
	ЗначениеВРеквизитФормы(Документ, "Объект");	
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьТаблицыЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт 
   	
    Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
        Возврат;
	КонецЕсли;
	
	Объект.Начисления.Очистить();
	ИНАГРО_ЗарплатаКадрыРасширенныйКлиент.ОткрытьФормуОтбораСпискаРаботников(ЭтаФорма, Истина)
		     
КонецПроцедуры

&НаСервере
Процедура ВыполнитьГрупповоеЗаполнение(Параметр)
	
	ТаблицаСотрудников = ПолучитьИзВременногоХранилища(Параметр.АдресТЗ);
	МассивСотрудниковДляЗаполнения = ТаблицаСотрудников.ВыгрузитьКолонку("Сотрудник");
	
	НачисленияНазначениеПриИзмененииНаСервере(МассивСотрудниковДляЗаполнения);
	
КонецПроцедуры

&НаСервере
// Определяет расценки технологической операции на дату 
//
// Параметры:
//	ДатаРасценок
//	АвтомобильМодель
//	ТехнологическаяОперация
//	Прицеп
//	Организация
//
Функция ПолучитьДанныеПоТехОперации(ТехнологическаяОперация) 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ИНАГРО_ВидыРаботРучнойТрудСрезПоследних.Период,
	|	ИНАГРО_ВидыРаботРучнойТрудСрезПоследних.ТехнологическаяОперация,
	|	ИНАГРО_ВидыРаботРучнойТрудСрезПоследних.Организация КАК Организация,
	|	ИНАГРО_ВидыРаботРучнойТрудСрезПоследних.НормаВыработки,
	|	ИНАГРО_ВидыРаботРучнойТрудСрезПоследних.ЕдиницаИзмерения,
	|	ИНАГРО_ВидыРаботРучнойТрудСрезПоследних.Расценка,
	|	ИНАГРО_ВидыРаботРучнойТрудСрезПоследних.Процент,
	|	ИНАГРО_ВидыРаботРучнойТрудСрезПоследних.РасценкаК,
	|	ИНАГРО_ВидыРаботРучнойТрудСрезПоследних.СменныхНормОт
	|ИЗ
	|	РегистрСведений.ИНАГРО_ВидыРаботРучнойТруд.СрезПоследних(
	|			&Дата,
	|			Организация В (&Организация)
	|				И ТехнологическаяОперация = &ТехнологическаяОперация) КАК ИНАГРО_ВидыРаботРучнойТрудСрезПоследних
	|
	|УПОРЯДОЧИТЬ ПО
	|	Организация УБЫВ";
	
	Запрос.УстановитьПараметр("Дата", Объект.Дата);
	Запрос.УстановитьПараметр("ТехнологическаяОперация", ТехнологическаяОперация);
		
	МассивОрганизация = Новый Массив();
	МассивОрганизация.Добавить(Справочники.Организации.ПустаяСсылка());
	МассивОрганизация.Добавить(Объект.Организация);
	Запрос.УстановитьПараметр("Организация", МассивОрганизация);
	
	СтруктураВозврата = Новый Структура("Организация, ТехнологическаяОперация, НормаВыработки, ЕдиницаИзмерения, Расценка, Процент, РасценкаК, СменныхНормОт");
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда		
		ЗаполнитьЗначенияСвойств(СтруктураВозврата, Выборка); 		
	КонецЕсли;
	
	Возврат СтруктураВозврата;
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьРезультатПоТекСтроке(ТекущаяСтрока)
	
	Если ЗначениеЗаполнено(ТекущаяСтрока.ТехнологическаяОперация) Тогда
		
		ДанныеПоТехОперации = ПолучитьДанныеПоТехОперации(ТекущаяСтрока.ТехнологическаяОперация);
		Если ДанныеПоТехОперации.ТехнологическаяОперация = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		КоличествоРабот = ?((Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ИНАГРО_ВидыОперацийСдельныйНаряд.СдельныйНарядНаПолевыеРаботы")),ТекущаяСтрока.КоличествоГА,ТекущаяСтрока.КоличествоРабот);
			
		ТекущаяСтрока.Расценка = ДанныеПоТехОперации.Расценка;
		ТекущаяСтрока.Результат = ?(ДанныеПоТехОперации.РасценкаК = "КЧасам",ТекущаяСтрока.ОтработаноЧасов * ДанныеПоТехОперации.Расценка, КоличествоРабот * ДанныеПоТехОперации.Расценка);
	
		Если ДанныеПоТехОперации.Процент > 0 Тогда
			ТекущаяСтрока.Результат = ТекущаяСтрока.Результат * ДанныеПоТехОперации.Процент;
		КонецЕсли;
		
	Иначе
		ТекущаяСтрока.Результат = ТекущаяСтрока.КоличествоРабот * ТекущаяСтрока.Расценка;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьРезультатПоВсемСтрокам()
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ИНАГРО_ВидыОперацийСдельныйНаряд.СдельныйНарядНаПолевыеРаботы") 
		ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ИНАГРО_ВидыОперацийСдельныйНаряд.СдельныйНаряд") Тогда
		
		Для Каждого ТекущаяСтрока Из Объект.Начисления Цикл
			
			Если ЗначениеЗаполнено(ТекущаяСтрока.ТехнологическаяОперация) Тогда
				
				ДанныеПоТехОперации = ПолучитьДанныеПоТехОперации(ТекущаяСтрока.ТехнологическаяОперация);
				Если ДанныеПоТехОперации.ТехнологическаяОперация = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				КоличествоРабот =ТекущаяСтрока.КоличествоГА;
					
				ТекущаяСтрока.Расценка = ДанныеПоТехОперации.Расценка;
				ТекущаяСтрока.Результат = ?(ДанныеПоТехОперации.РасценкаК = "КЧасам",ТекущаяСтрока.ОтработаноЧасов * ДанныеПоТехОперации.Расценка, КоличествоРабот * ДанныеПоТехОперации.Расценка);
			
				Если ДанныеПоТехОперации.Процент > 0 Тогда
					ТекущаяСтрока.Результат = ТекущаяСтрока.Результат * ДанныеПоТехОперации.Процент;
				КонецЕсли;
				
			Иначе
				ТекущаяСтрока.Результат = ТекущаяСтрока.КоличествоРабот * ТекущаяСтрока.Расценка;
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		
		Если ЗначениеЗаполнено(Объект.ТехнологическаяОперация) Тогда
			
			ДанныеПоТехОперации = ПолучитьДанныеПоТехОперации(Объект.ТехнологическаяОперация);
			Если ДанныеПоТехОперации.ТехнологическаяОперация = Неопределено Тогда
				Возврат;
			КонецЕсли;
			
			Для Каждого ТекущаяСтрока Из Объект.Начисления Цикл
				КоличествоРабот = ТекущаяСтрока.КоличествоРабот;
				
				ТекущаяСтрока.Расценка = ДанныеПоТехОперации.Расценка;
				ТекущаяСтрока.Результат = ?(ДанныеПоТехОперации.РасценкаК = "КЧасам",ТекущаяСтрока.ОтработаноЧасов * ДанныеПоТехОперации.Расценка, КоличествоРабот * ДанныеПоТехОперации.Расценка);
		
				Если ДанныеПоТехОперации.Процент > 0 Тогда
					ТекущаяСтрока.Результат = ТекущаяСтрока.Результат * ДанныеПоТехОперации.Процент;
				КонецЕсли;
			КонецЦикла;
			
		Иначе
			Для Каждого ТекущаяСтрока Из Объект.Начисления Цикл

				ТекущаяСтрока.Результат = ТекущаяСтрока.КоличествоРабот * ТекущаяСтрока.Расценка;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ОшибкаВводаПоказателей(Дней = Неопределено,Часов = Неопределено)
	
	Отказ = Ложь;
	
	МаксимальноеКоличествоДнейВПериоде = (КонецДня(Объект.ДатаОкончания) + 1 - НачалоДня(Объект.ДатаНачала)) / 86400;
	Если Дней <> Неопределено И Дней > МаксимальноеКоличествоДнейВПериоде Тогда 
		ТекстСообщения = Нстр("ru='Введено количество дней, превышающее максимальное количество дней в периоде!';uk='Введено кількість днів, що перебільшує максимальну кількість днів в періоді!'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , , , Отказ);
		Возврат Отказ;
	КонецЕсли;
	
	МаксимальноеКоличествоЧасовВПериоде = (КонецДня(Объект.ДатаОкончания) + 1 - НачалоДня(Объект.ДатаНачала)) / 3600;
	Если Часов <> Неопределено И Часов > МаксимальноеКоличествоЧасовВПериоде Тогда 
		ТекстСообщения = Нстр("ru='Введено количество часов, превышающее максимальное количество часов в периоде!';uk='Введено кількість годин, що перебільшує максимальну кількість годин в періоді!'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , , , Отказ);
		Возврат Отказ;
	КонецЕсли;
	
	Возврат Отказ;
	
КонецФункции

&НаСервере
Процедура УстановитьПериоды();
	
	Объект.ДатаНачала = Объект.ПериодРегистрации;
	Объект.ДатаОкончания = КонецМесяца(Объект.ПериодРегистрации);
		
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииМесяцаНачисления()
	
	ИНАГРО_ЗарплатаКадрыРасширенныйКлиент.ВводМесяцаПриИзменении(ЭтаФорма, "Объект.ПериодРегистрации", "МесяцСтрока", Модифицированность);
	ОбработатьИзменениеМесяцНачисленияНаСервере();
	
	ОбновлениеТЧПриОбновленииПериода()
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьИзменениеМесяцНачисленияНаСервере()

	УстановитьПериоды();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновлениеТЧПриОбновленииПериода()
	
	Если ЗначениеЗаполнено(Объект.ДатаНачала) И ЗначениеЗаполнено(Объект.ДатаОкончания) И (Объект.ДатаНачала <> ТекущаяДатаНачала ИЛИ Объект.ДатаОкончания <> ТекущаяДатаОкончания)
		И Объект.Начисления.Количество() > 0 Тогда
		
		ТекстВопроса =НСтр("ru='Изменен период рассчета. Обновить данные табличной части?';uk='Змінено період розрахунку. Оновити данні табличної частини?'");
		Обработчик = Новый ОписаниеОповещения("ОбновлениеДанныхТЧПослеОтветаНаВопрос", ЭтотОбъект);
		ПоказатьВопрос(Обработчик, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
		Возврат;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновлениеДанныхТЧПослеОтветаНаВопрос(Ответ, СписокСотрудников) Экспорт
	ТекущаяДатаНачала = Объект.ДатаНачала;
	ТекущаяДатаОкончания = Объект.ДатаОкончания;
	
	Если Ответ <> КодВозвратаДиалога.Нет  Тогда
		Для каждого Стр Из Объект.Начисления Цикл
			Стр.ДатаНачала = Объект.ПериодРегистрации;
			Стр.ДатаОкончания = КонецМесяца(Объект.ПериодРегистрации);
			Стр.БазовыйПериодНачало = Объект.ПериодРегистрации;
			Стр.БазовыйПериодКонец = КонецМесяца(Объект.ПериодРегистрации);
		КонецЦикла; 
	Иначе
		Возврат
	КонецЕсли; 
			
КонецПроцедуры

&НаСервере
Функция СотрудникПоНазначению(Сотрудник)
	
	Если ЗначениеЗаполнено(Сотрудник.ОсновноеНазначение) Тогда
		Возврат Сотрудник.ОсновноеНазначение;
	Иначе
		Возврат Сотрудник;
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьТЧПоНадоям()
	
	ДанныеПоТехнологическойОперации = ПолучитьДанныеПоТехОперации(Объект.ТехнологическаяОперация);
	Если ДанныеПоТехнологическойОперации = Неопределено Тогда 
		ТекстСообщения = Нстр("ru='Не найдены данные по выбранной операции!';uk='Не знайдені дані по обраній операції!'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация"  , Объект.Организация);
	Запрос.УстановитьПараметр("ПодразделениеОрганизации", Объект.ПодразделениеОрганизации);
	Запрос.УстановитьПараметр("ДатаНач"      , Новый Граница(Объект.ДатаНачала, ВидГраницы.Включая));                      
	Запрос.УстановитьПараметр("ДатаКон"      , Новый Граница(КонецДня(Объект.ДатаОкончания), ВидГраницы.Включая));         
	
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
       |	СУММА(ЕСТЬNULL(ТаблицаРегистра.КоличествоБазисноеОборот, 0)) КАК КоличествоРабот,
       |	ДопИнформация.Сотрудник
       |ИЗ
       |	РегистрНакопления.ИНАГРО_НадоиМолока.Обороты(
       |			&ДатаНач,
       |			&ДатаКон,
       |			Запись,
       |			Организация = &Организация
       |				И ПодразделениеОрганизации = &ПодразделениеОрганизации) КАК ТаблицаРегистра
       |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ИНАГРО_НадоиМолока КАК ДопИнформация
       |		ПО ТаблицаРегистра.Период = ДопИнформация.Период
       |			И ТаблицаРегистра.Регистратор = ДопИнформация.Регистратор
       |			И ТаблицаРегистра.НомерСтроки = ДопИнформация.НомерСтроки
       |
       |СГРУППИРОВАТЬ ПО
       |	ДопИнформация.Сотрудник";   	
	
	РезультатНадои = Запрос.Выполнить();
	Выборка = РезультатНадои.Выбрать();
	
	Если Выборка.Количество() = 0 Тогда
	   Возврат;
   КонецЕсли; 
	
	Пока Выборка.Следующий() Цикл	
		СтрокаТабличнойЧасти = Объект.Начисления.Добавить();
		СтрокаТабличнойЧасти.Сотрудник = Выборка.Сотрудник;
		СтрокаТабличнойЧасти.Назначение = Выборка.Сотрудник;
		СтрокаТабличнойЧасти.КоличествоРабот = Выборка.КоличествоРабот;
		СтрокаТабличнойЧасти.ТехнологическаяОперация = Объект.ТехнологическаяОперация;
		СтрокаТабличнойЧасти.Расценка = ДанныеПоТехнологическойОперации.Расценка;
		СтрокаТабличнойЧасти.Результат = СтрокаТабличнойЧасти.КоличествоРабот * СтрокаТабличнойЧасти.Расценка;
		СтрокаТабличнойЧасти.ВидРасчета = Объект.ВидРасчета;
	
		СписокСотрудников = Новый СписокЗначений;
		СписокСотрудников.Добавить(СтрокаТабличнойЧасти.Сотрудник); 
	
		СтруктураСтроки = Новый Структура("Сотрудник, Назначение, Организация, ПодразделениеОрганизации, Должность,  
		|БазовыйПериодНачало, БазовыйПериодКонец, ДатаНачала, ДатаОкончания,  
		|НормаДней, НормаЧасов, НормаДнейЗаМесяц, НормаЧасовЗаМесяц, КалендарныеДни,
		|ОтработаноДней, ОтработаноЧасов, ОплаченоДнейЧасов,
		|ВидРасчета, ВидУчетаВремениДляСредней, ГрафикРаботы, ДокументОснование, 
		|СпособОтраженияВБухучете, Автозаполнение"); 
		
		ЗаполнитьЗначенияСвойств(СтруктураСтроки, СтрокаТабличнойЧасти);
		НачисленияНазначениеПриИзмененииНаСервере(СписокСотрудников, СтруктураСтроки);
		ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтруктураСтроки);
	
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьНормуВремениПоСотруднику(СписокСотрудников, СтруктураСтроки)
	
	ИНАГРО_ПроведениеРасчетов.ПолучитьНормуВремени(СписокСотрудников, СтруктураСтроки);

КонецПроцедуры

#Область ПроцедурыИФункцииОбработкаВопросов

&НаКлиенте
Процедура ЗаполнитьОбщееКоличествоРаботЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
   	
    Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда 		
		Возврат;
	КонецЕсли;
	
	Количество = 0;	
	Оповещение = Новый ОписаниеОповещения("УстановитьВсемОдноКоличествоРаботПослеВводаКоличестваЗавершение", ЭтотОбъект, Параметры);
	ПоказатьВводЧисла(Оповещение, Количество, Нстр("ru='Введите количество';uk='Введіть кількість'"), 12, 2);  
			
КонецПроцедуры  

&НаКлиенте
Процедура УстановитьВсемОдноКоличествоРаботПослеВводаКоличестваЗавершение(Количество, ДополнительныеПараметры) Экспорт	
	
	Если Количество = 0 Тогда
		Возврат
	КонецЕсли; 	  
	
	Для Каждого СтрокаТабличнойЧасти Из Объект.Начисления Цикл
		
		СтрокаТабличнойЧасти.КоличествоРабот = Количество;
		ЗаполнитьРезультатПоТекСтроке(СтрокаТабличнойЧасти);
		
	КонецЦикла;	 
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьОбщееКоличествоЧасовЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
   	
    Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда 		
		Возврат;
	КонецЕсли;
	
	Количество = 0;	
	Оповещение = Новый ОписаниеОповещения("УстановитьВсемОдноКоличествоЧасовПослеВводаКоличестваЗавершение", ЭтотОбъект, Параметры);
	ПоказатьВводЧисла(Оповещение, Количество, Нстр("ru='Введите количество';uk='Введіть кількість'"), 12, 2);  
			
КонецПроцедуры  

&НаКлиенте
Процедура УстановитьВсемОдноКоличествоЧасовПослеВводаКоличестваЗавершение(Количество, ДополнительныеПараметры) Экспорт	
	
	Если Количество = 0 Тогда
		Возврат
	КонецЕсли; 	  
	
	Для Каждого СтрокаТабличнойЧасти Из Объект.Начисления Цикл
		
		СтрокаТабличнойЧасти.ОтработаноЧасов = Количество;
		ЗаполнитьРезультатПоТекСтроке(СтрокаТабличнойЧасти);
		
	КонецЦикла;	 
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьОбщееКоличествоДнейЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
   	
    Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда 		
		Возврат;
	КонецЕсли;
	
	Количество = 0;	
	Оповещение = Новый ОписаниеОповещения("УстановитьВсемОдноКоличествоДнейПослеВводаКоличестваЗавершение", ЭтотОбъект, Параметры);
	ПоказатьВводЧисла(Оповещение, Количество, Нстр("ru='Введите количество';uk='Введіть кількість'"), 12, 2);  
			
КонецПроцедуры  

&НаКлиенте
Процедура УстановитьВсемОдноКоличествоДнейПослеВводаКоличестваЗавершение(Количество, ДополнительныеПараметры) Экспорт	
	
	Если Количество = 0 Тогда
		Возврат
	КонецЕсли; 	  
	
	Для Каждого СтрокаТабличнойЧасти Из Объект.Начисления Цикл
		
		СтрокаТабличнойЧасти.ОтработаноДней = Количество;
		ЗаполнитьРезультатПоТекСтроке(СтрокаТабличнойЧасти);
		
	КонецЦикла;	 
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоНадоямЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
   	
    Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда 		
		Возврат;
	КонецЕсли;
	
	Объект.Начисления.Очистить();
	ЗаполнитьТЧПоНадоям();
	Для Каждого Строка Из Объект.Начисления Цикл
		ЗаполнитьРезультатПоТекСтроке(Строка);
	КонецЦикла;
			
КонецПроцедуры  

#КонецОбласти

#КонецОбласти 

#Область СлужебныеПроцедурыИФункцииБСП

// СтандартныеПодсистемы.Печать

&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Печать

#КонецОбласти 









