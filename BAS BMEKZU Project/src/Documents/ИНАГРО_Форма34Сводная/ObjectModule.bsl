#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда  
	
Перем ПараметрыУчетаЭлеватора;
Перем СобственноеПодразделение;
Перем НеСписыватьОтходыСВладельцев;

Перем мВалютаРегламентированногоУчета;
Перем ПартионныйУчетБУ;

#Область ОбработчикиСобытий

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	ТипДанныхЗаполнения = ТипЗнч(ДанныеЗаполнения);	
	
	ИНАГРО_ЭлеваторЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект);
	
	ЗаполнениеДокументов.Заполнить(ЭтотОбъект, ДанныеЗаполнения); 
	
	Если  ТипДанныхЗаполнения = Тип("Структура")
		И ДанныеЗаполнения.Свойство("ВидДокумента") Тогда
		ВидДокумента = ДанныеЗаполнения.ВидДокумента;
	КонецЕсли;
	
	ПроводилиОчистку = Истина;
	ПроводилиСушку   = Истина;	
	ВидОперации      = Перечисления.ИНАГРО_ВидыОперацийФорма34Сводная.ПрямойРасчет;
	
	Если ЗначениеЗаполнено(Организация) Тогда
		Руководители = ИНАГРО_Элеватор.ОтветственныеЛицаОрганизации(Организация, Дата);
		НачальникОхраны = Руководители.НачальникОхраны;
	КонецЕсли; 
	
	СпособРасчетаУбылиОтОчистки = ИНАГРО_Элеватор.ПолучитьПараметрУчетаЭлеватора(Дата, "СпособРасчетаУбылиОтОчистки", Перечисления.ИНАГРО_СпособыРасчетаУбылиОтОчистки.ПоБалансуСора);
	
	Если НЕ ЗначениеЗаполнено(СпособРасчетаУбылиОтОчистки) Тогда
		СпособРасчетаУбылиОтОчистки	 = Перечисления.ИНАГРО_СпособыРасчетаУбылиОтОчистки.ПоБалансуСора;
	КонецЕсли;	
	Если СпособРасчетаУбылиОтОчистки = Перечисления.ИНАГРО_СпособыРасчетаУбылиОтОчистки.СУчетомУбылиОтСушки Тогда
		Порядок = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	МассивНепроверяемыхРеквизитов = Новый Массив;
	
	Если ОтражатьВБухгалтерскомУчете Тогда
		Для Каждого СтрокаТабличнойЧасти Из РасчетПоВладельцам Цикл
			Если НЕ СтрокаТабличнойЧасти.СчетУчетаБУ.Забалансовый
				ИЛИ СтрокаТабличнойЧасти.ДоговорКонтрагента.ИНАГРО_ОставлятьГодныеОтходыНаПредприятии Тогда
				ПроверяемыеРеквизиты.Добавить("СчетЗатрат"); 	
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);	

КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ПодготовитьПараметрыУчетаЭлеватора();
	
	Если НЕ ЗначениеЗаполнено(ДатаРаспоряжения) Тогда
		ДатаРаспоряжения = Дата;
	КонецЕсли;
	
	Если ПроводилиСушку Тогда
		Если НЕ ЗначениеЗаполнено(ДатаНачалаСушки) Тогда
			ДатаНачалаСушки = ДатаНачала;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ДатаОкончанияСушки) Тогда
			ДатаОкончанияСушки = ДатаОкончания;
		КонецЕсли;
	КонецЕсли;
	
	Если ПроводилиОчистку Тогда
		Если НЕ ЗначениеЗаполнено(ДатаНачалаОчистки) Тогда
			ДатаНачалаОчистки = ДатаНачала;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ДатаОкончанияОчистки) Тогда
			ДатаОкончанияОчистки = ДатаОкончания;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры 

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКПроведению(ЭтотОбъект);

	Если ЗначениеЗаполнено(МестоХранения) И МестоХранения.Владелец <> Склад Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Место хранения %2 не принадлежит складу %1!';uk='Місце зберігання %2 не належить складу %1!'"), Склад, МестоХранения);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
	Если ВидДокумента = Перечисления.ИНАГРО_ВидыАктовОчисткиСушки.ФорсМажор Тогда 
		//
	ИначеЕсли ВидДокумента = Перечисления.ИНАГРО_ВидыАктовОчисткиСушки.Оздоровление Тогда
		
		СтруктураШапкиДокумента = ОбщегоНазначенияРед12.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
		
		ПровестиПоЖурналуЛабораторныхАнализов(СтруктураШапкиДокумента);
		
		СтруктураШапкиДокумента.Вставить("ЗачетныйВес",       0);
		СтруктураШапкиДокумента.Вставить("Количество",        0);
		СтруктураШапкиДокумента.Вставить("ФизическийВес",     0);
		СтруктураШапкиДокумента.Вставить("Влажность",         0);
		СтруктураШапкиДокумента.Вставить("КоличествоМест",    0);
		СтруктураШапкиДокумента.Вставить("СорнаяПримесь",     0);
		СтруктураШапкиДокумента.Вставить("ЗерноваяПримесь",   0);
		СтруктураШапкиДокумента.Вставить("УбыльВесаПриСушке", 1);
		
		ИНАГРО_Элеватор.ДвиженияПоРегиструФорма36СводнаяПриход(Движения, СтруктураШапкиДокумента, "Расход");
		
	Иначе
		
		ОбработкаПроведенияБУХ(Отказ, РежимПроведения);
		
	КонецЕсли;	

	Движения.Хозрасчетный.ВыполнитьДействияПередЗаписьюДвижений();

	ПроведениеСервер.ПодготовитьНаборыЗаписейКЗаписиДвижений(ЭтотОбъект); 	

КонецПроцедуры

Процедура ОбработкаПроведенияБУХ(Отказ, РежимПроведения)
	
	Перем Заголовок, СтруктураШапкиДокумента;
	Перем ТаблицаПоКультурам;
	Перем ТаблицаПоСобственномуЗерну;
	Перем ТаблицаПоступления;
	Перем ТаблицаПоРеестрам;
	Перем ТаблицаПоРеестрам_П;
	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначенияБПВызовСервера.ПредставлениеДокументаПриПроведении(Ссылка);

	ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента);	
	
	ПодготовитьПараметрыУчетнойПолитики(СтруктураШапкиДокумента, Отказ);
	
	ДополнитьСтруктуруШапкиНужнымиДанными(СтруктураШапкиДокумента);

	ПодготовитьТаблицуПоКультурам(СтруктураШапкиДокумента, ТаблицаПоКультурам, ТаблицаПоСобственномуЗерну, ТаблицаПоступления, Отказ, Заголовок);
		
	ПодготовитьТаблицуПоРеестрам(СтруктураШапкиДокумента, ТаблицаПоРеестрам, ТаблицаПоРеестрам_П, Отказ, Заголовок);

	// Движения по документу
	Если НЕ Отказ Тогда 		
		ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоКультурам, ТаблицаПоСобственномуЗерну, ТаблицаПоступления, ТаблицаПоРеестрам, ТаблицаПоРеестрам_П, Отказ, Заголовок);
	КонецЕсли;
	
КонецПроцедуры	

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКОтменеПроведения(ЭтотОбъект);
	Движения.Записать();
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)

	Дата = НачалоДня(ОбщегоНазначения.ТекущаяДатаПользователя());
	Ответственный = Пользователи.ТекущийПользователь();	
		
КонецПроцедуры

#КонецОбласти

#Область Проведение

// Процедура формирует структуру шапки документа и дополнительных полей.
//
Процедура ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента) Экспорт

	// Дерево значений, содержащее имена необходимых полей в запросе по шапке.
	Перем ДеревоПолейЗапросаПоШапке;	
	
	СтруктураШапкиДокумента   = ОбщегоНазначенияРед12.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	
	// Заполним по шапке документа дерево параметров, нужных при проведении.
	ДеревоПолейЗапросаПоШапке = ОбщегоНазначенияРед12.СформироватьДеревоПолейЗапросаПоШапке(); 	
	
	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа.
	СтруктураШапкиДокумента = УправлениеЗапасами.СформироватьЗапросПоДеревуПолей(ЭтотОбъект, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, "");
	
КонецПроцедуры 

Процедура ДополнитьСтруктуруШапкиНужнымиДанными(СтруктураШапкиДокумента)
	
	СобственныйКонтрагент = ИНАГРО_Элеватор.ПолучитьДополнительныйРеквизитОрганизации(Организация, "Контрагент", Дата);				
	Если ЗначениеЗаполнено(СобственныйКонтрагент) Тогда
		ДоговорСобственныйКонтрагент = СобственныйКонтрагент.ОсновнойДоговорКонтрагента;
	Иначе
		ДоговорСобственныйКонтрагент = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
	КонецЕсли;				
	СтруктураШапкиДокумента.Вставить("СобственныйКонтрагент", 		 СобственныйКонтрагент);
	СтруктураШапкиДокумента.Вставить("ДоговорСобственныйКонтрагент", ДоговорСобственныйКонтрагент);
	
	СтруктураШапкиДокумента.Вставить("КодРасхода");
	
КонецПроцедуры

Процедура ПодготовитьТаблицуПоКультурам(СтруктураШапкиДокумента, ТаблицаПоКультурам, ТаблицаПоСобственномуЗерну, ТаблицаПоступления, Отказ, Заголовок)
	
	СтруктураПолей        = Новый Структура;
	СтруктураПростыхПолей = Новый Структура;
	СтруктураСложныхПолей = Новый Структура;
	СтрГруппировок = "";
	СтрСуммирования = "";
	
	СтруктураПолей.Вставить("БалансСорнойПримесиПоВладельцу",   "БалансСорнойПримесиПоВладельцу");		
	СтруктураПолей.Вставить("Владелец",                         "Владелец");		
	СтруктураПолей.Вставить("ДоговорКонтрагента",               "ДоговорКонтрагента");	
	СтруктураПолей.Вставить("Номенклатура",                     "Ссылка.Номенклатура");
	СтруктураПолей.Вставить("ВидХранения",                      "ВидХранения");		
	СтруктураПолей.Вставить("ФизическийВес1",                   "ФизическийВес1");
	Если ПараметрыУчетаЭлеватора.ИспользоватьСистемуКонтроляКачестваПартийЗерна Тогда
		СтруктураПолей.Вставить("ПроводилиСушку",               "ПроводилиСушку");
		СтруктураПолей.Вставить("ПроводилиОчистку",             "ПроводилиОчистку");
		СтруктураСложныхПолей.Вставить("ВесПоВлажности1",       "Влажность1 * ФизическийВес1");
		СтруктураСложныхПолей.Вставить("ВесПоСорнойПримеси1",   "СорнаяПримесь1 * ФизическийВес1");
	Иначе		
		СтруктураПолей.Вставить("Влажность1",                   "Влажность1");
	КонецЕсли;
	СтруктураПолей.Вставить("ФизическийВес2",                   "ФизическийВес2");      
	СтруктураПолей.Вставить("ФизическийВес21",                  "ФизическийВес21");     
	СтруктураПолей.Вставить("ФизическийВес3",                   "ФизическийВес3");      
	СтруктураПолей.Вставить("ФизическийВес31",                  "ФизическийВес31");      
	СтруктураПолей.Вставить("ФизическийВес32",                  "ФизическийВес32");      	
	СтруктураПолей.Вставить("УбыльВесаПриСушке",                "УбыльОтСушки");
	СтруктураПолей.Вставить("УбыльОтСушки",                     "УбыльОтСушки");
	СтруктураПолей.Вставить("Дата",                             "Ссылка.Дата");	                                             	
	СтруктураПолей.Вставить("Склад",                            "Ссылка.Склад");	
	СтруктураПолей.Вставить("Силос",                            "Ссылка.Силос");	
	Если  ИНАГРО_Элеватор.ПолучитьДополнительныйРеквизитСклада(Склад, "ВестиУчетПоМестамХранения")
		И ПараметрыУчетаЭлеватора.ВестиУчетПоФорме37Сводная Тогда
		СтруктураПолей.Вставить("МестоХранения",               "Ссылка.МестоХранения");	
	КонецЕсли;
	СтруктураПростыхПолей.Вставить("КоличествоМест",            0);
	СтруктураПолей.Вставить("Организация",                      "Ссылка.Организация");
	СтруктураПолей.Вставить("Урожай",                           "Ссылка.Урожай");
	СтруктураПолей.Вставить("Ссылка",                           "Ссылка");
	СтруктураПолей.Вставить("ОтражатьВБухгалтерскомУчете",      "Ссылка.ОтражатьВБухгалтерскомУчете");	                                                                                             
	СтруктураПолей.Вставить("СчетУчетаБУ",                      "СчетУчетаБУ");
	
	СтрГруппировок 	= СтрГруппировок + "Владелец, ДоговорКонтрагента, Номенклатура, ВидХранения, Влажность1, Дата, Склад, Организация, Урожай, Ссылка, ОтражатьВБухгалтерскомУчете, СчетУчетаБУ";
	СтрСуммирования = СтрСуммирования + "ФизическийВес1, ФизическийВес2, ФизическийВес21, ФизическийВес3, ФизическийВес31, ФизическийВес32, УбыльВесаПриСушке, УбыльОтСушки";
	
	СтруктураПолей.Вставить("ОтражатьВРегламентированномУчете", "Ссылка.ОтражатьВБухгалтерскомУчете");
	СтруктураПолей.Вставить("СчетЗатрат",                       "Ссылка.СчетЗатрат");
	СтруктураПолей.Вставить("НалоговоеНазначение",              "НалоговоеНазначение");
	СтруктураПолей.Вставить("ВидНалоговойДеятельности",         "НалоговоеНазначение.ВидНалоговойДеятельности");
	СтруктураПолей.Вставить("ВидДеятельностиНДС",               "НалоговоеНазначение.ВидДеятельностиНДС");
	СтруктураПолей.Вставить("Амортизируется",                   "НалоговоеНазначение.Амортизируется");
	СтруктураПолей.Вставить("СтатьяЗатрат",                     "Ссылка.СубконтоСписания2");
	СтруктураПолей.Вставить("НоменклатурнаяГруппа",             "Ссылка.СубконтоСписания3");
	СтруктураПолей.Вставить("КорСчетСписанияБУ",                "Ссылка.СчетЗатрат");		
	СтруктураПолей.Вставить("КорСубконтоСписанияБУ1",           "Ссылка.СубконтоСписания1"); 				
	СтруктураПолей.Вставить("КорСубконтоСписанияБУ2",           "Ссылка.СубконтоСписания2");
	СтруктураПолей.Вставить("КорСубконтоСписанияБУ3",           "Ссылка.СубконтоСписания3");                         
	
	СтруктураПолей.Вставить("ДокументОприходования",            "ДокументОприходования");		
	СтруктураПолей.Вставить("ИндивидуальныйРасчет",             "ИндивидуальныйРасчет");		
	
	// Для НалоговоеНазначениеДоходовИЗатрат
	ХарактерЗатрат = УправлениеПроизводствомВызовСервера.ПолучитьХарактерЗатратПоСчетуЗатрат(СчетЗатрат, ,Дата);                                                                                                  
	
	Если НЕ (ХарактерЗатрат = "Производство" ИЛИ ХарактерЗатрат = "Строительство" ИЛИ ХарактерЗатрат = "ТЗР" ИЛИ ХарактерЗатрат = "РБП" ИЛИ ХарактерЗатрат = "ОПЗ") Тогда
		СтруктураПолей.Вставить("НалоговоеНазначениеНовое", "Ссылка.НалоговоеНазначениеДоходовИЗатрат");
	Иначе	
		ХарактерЗатрат = Неопределено;
		НалоговоеНазначениеПроводки = Неопределено;
		НалоговоеНазначениеНДС = НСтр("ru='Из табличной части';uk='З табличної частини'");
		СтруктураСубконто = Новый Структура("Субконто1,Субконто2,Субконто3", СубконтоСписания1, СубконтоСписания2, СубконтоСписания3);
		НалоговыйУчет.ОпределениеАналитикиНалоговогоУчетаВПроводкахДляЗатрат(СтруктураСубконто, СчетЗатрат, ХарактерЗатрат, 
		НалоговоеНазначениеПроводки, ,
		НалоговоеНазначениеНДС,,
		,Дата);
		Если Строка(НалоговоеНазначениеПроводки) = "Из табличной части" Тогда
			СтруктураПолей.Вставить("НалоговоеНазначениеНовое", "НалоговоеНазначение");
		Иначе
			СтруктураПростыхПолей.Вставить("НалоговоеНазначениеНовое", НалоговоеНазначениеПроводки);
		КонецЕсли;
	КонецЕсли;	
	
	СтрГруппировок 	= СтрГруппировок + ", СчетЗатрат, НалоговоеНазначение, НалоговоеНазначениеНовое, ВидНалоговойДеятельности, ВидДеятельностиНДС, Амортизируется, СтатьяЗатрат, НоменклатурнаяГруппа, КорСчетСписанияБУ, 
	|КорСубконтоСписанияБУ1, КорСубконтоСписанияБУ2, КорСубконтоСписанияБУ3, СтатьяПриростаУбылиЗапасов, ДокументОприходования";
	
	РезультатЗапросаПоКультурам = ОбщегоНазначенияРед12.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "РасчетПоВладельцам", СтруктураПолей, СтруктураПростыхПолей, СтруктураСложныхПолей);
	ТаблицаПоКультурам = РезультатЗапросаПоКультурам.Выгрузить();
	
	ТаблицаПоКультурам.Колонки.Добавить("ФизическийВес");	
	ТаблицаПоКультурам.Колонки.Добавить("ЗачетныйВес");
	ТаблицаПоКультурам.Колонки.Добавить("Количество");
	ТаблицаПоКультурам.Колонки.Добавить("Стоимость");
	ТаблицаПоКультурам.Колонки.Добавить("СуммаРегл");
	ТаблицаПоКультурам.Колонки.Добавить("Влажность");                 
	ТаблицаПоКультурам.Колонки.Добавить("СорнаяПримесь");
	ТаблицаПоКультурам.Колонки.Добавить("ЗерноваяПримесь");
	ТаблицаПоКультурам.Колонки.Добавить("Поставщик");
	ТаблицаПоКультурам.Колонки.Добавить("ВидФасовки");		
	ТаблицаПоКультурам.Колонки.Добавить("ВидДокумента");
	ТаблицаПоКультурам.Колонки.Добавить("НомерАнализа");
	ТаблицаПоКультурам.Колонки.Добавить("КодРасхода");
	ТаблицаПоКультурам.Колонки.Добавить("Регистратор");
	ТаблицаПоКультурам.Колонки.Добавить("СуммаПлановая");	
	ТаблицаПоКультурам.Колонки.Добавить("СчетУчетаНУ");	
	
	ТаблицаПоКультурам.ЗаполнитьЗначения(0,                                             "ФизическийВес");
	ТаблицаПоКультурам.ЗаполнитьЗначения(0,                                             "ЗачетныйВес");
	ТаблицаПоКультурам.ЗаполнитьЗначения(0,                                             "Количество");
	ТаблицаПоКультурам.ЗаполнитьЗначения(0,                                             "Стоимость");
	ТаблицаПоКультурам.ЗаполнитьЗначения(0,                                             "СуммаРегл");
	ТаблицаПоКультурам.ЗаполнитьЗначения(0,                                             "Влажность");
	ТаблицаПоКультурам.ЗаполнитьЗначения(0,                                             "СорнаяПримесь");
	ТаблицаПоКультурам.ЗаполнитьЗначения(0,                                             "ЗерноваяПримесь");
	ТаблицаПоКультурам.ЗаполнитьЗначения(Справочники.Контрагенты.ПустаяСсылка(),        "Поставщик");
	ТаблицаПоКультурам.ЗаполнитьЗначения(Справочники.ИНАГРО_ВидыФасовки.ПустаяСсылка(), "ВидФасовки");		
	ТаблицаПоКультурам.ЗаполнитьЗначения(СтруктураШапкиДокумента.ВидДокумента,          "ВидДокумента");
	ТаблицаПоКультурам.ЗаполнитьЗначения(ЭтотОбъект,                                    "Регистратор");
	ТаблицаПоКультурам.ЗаполнитьЗначения(0,                                             "СуммаПлановая");
	ТаблицаПоКультурам.ЗаполнитьЗначения(СтруктураШапкиДокумента.НомерАнализа2,         "НомерАнализа");
	
	Если ПараметрыУчетаЭлеватора.ИспользоватьСистемуКонтроляКачестваПартийЗерна Тогда
		
		ГруппировочныеКолонки  = "";
		КолонкиИтогов          = "Количество, ФизическийВес, ФизическийВес1, ФизическийВес2, ВесПоВлажности1, ВесПоСорнойПримеси1, ФизическийВес21, ФизическийВес3, ФизическийВес31, ФизическийВес32, УбыльОтСушки, УбыльВесаПриСушке";
		СтруктураКолонкиИтогов = Новый Структура ("БалансСораПоВладельцу, НомерСтроки, " + КолонкиИтогов + ?(НЕ Порядок, ",ПроводилиСушку", ""));
		
		Для Каждого ТекКолонкаТаблицыПоКультурам Из ТаблицаПоКультурам.Колонки Цикл
			ТекИмяКолонки = ТекКолонкаТаблицыПоКультурам.Имя;
			Если НЕ ИНАГРО_Элеватор.ЕстьКлюч(СтруктураКолонкиИтогов, ТекИмяКолонки) Тогда
				ГруппировочныеКолонки = ГруппировочныеКолонки + ТекИмяКолонки + ",";
			КонецЕсли;
		КонецЦикла;
		
		ГруппировочныеКолонки = Сред(ГруппировочныеКолонки, 1, СтрДлина(ГруппировочныеКолонки) - 1);
		
		ТаблицаПоКультурам.Свернуть(ГруппировочныеКолонки,КолонкиИтогов);
		ТаблицаПоКультурам.Колонки.Добавить("Влажность1");	
		ТаблицаПоКультурам.Колонки.Добавить("СорнаяПримесь1");
		ТаблицаПоКультурам.Колонки.Добавить("БалансСораПоВладельцу");
		ТаблицаПоКультурам.Колонки.Добавить("НомерСтроки");
		ТаблицаПоКультурам.ЗаполнитьЗначения(0, "Влажность1");
		ТаблицаПоКультурам.ЗаполнитьЗначения(0, "СорнаяПримесь1");
		ТаблицаПоКультурам.ЗаполнитьЗначения(0, "БалансСораПоВладельцу");
		
		НомерСтроки = 0;		
		
		Для Каждого СтрТаблицыПоКультурам Из ТаблицаПоКультурам Цикл
			НомерСтроки = НомерСтроки + 1;
			СтрТаблицыПоКультурам.НомерСтроки    = НомерСтроки;
			СтрТаблицыПоКультурам.Влажность1     = Окр(СтрТаблицыПоКультурам.ВесПоВлажности1 / СтрТаблицыПоКультурам.ФизическийВес1, 2);
			СтрТаблицыПоКультурам.СорнаяПримесь1 = Окр(СтрТаблицыПоКультурам.ВесПоСорнойПримеси1 / СтрТаблицыПоКультурам.ФизическийВес1, 2);
		КонецЦикла;
		
	КонецЕсли;	
	
	ВесСобственногоЗернаДоОчистки 	 = 0;
	ВесСобственногоЗернаПослеОчистки = 0;
	
	ТаблицаПоСобственномуЗерну = ТаблицаПоКультурам.Скопировать();
	
	ТаблицаПоступления = ТаблицаПоКультурам.Скопировать();
	ТаблицаПоступления.Очистить();
	ТаблицаПоступления.Колонки.Добавить("НалоговоеНазначениеДоходовИЗатрат");
	
	НомСтрТаблицаПоступления         = 0;			
	НомерСтроки                      = ТаблицаПоСобственномуЗерну.Количество() - 1;
	
	Пока НомерСтроки >= 0 Цикл
		
		Строка = ТаблицаПоСобственномуЗерну.Получить(НомерСтроки);
		СписыватьУсушкуПоСкладскомуУчету = ПараметрыУчетаЭлеватора.СписыватьУсушкуПоСкладскомуУчету;
		
		Если СписыватьУсушкуПоСкладскомуУчету Тогда			
			Строка.Количество = Строка.ФизическийВес1 - Строка.ФизическийВес2;
		Иначе
			Строка.Количество = Строка.ФизическийВес1 - Строка.ФизическийВес2 - Строка.УбыльОтСушки;
		КонецЕсли;
		
		Если НеСписыватьОтходыСВладельцев Тогда
			ОприходоватьГодныеОтходыНаПредприятие = Истина;
		Иначе
			ОприходоватьГодныеОтходыНаПредприятие = Ложь;
			Если    Строка.ДоговорКонтрагента.ИНАГРО_ОставлятьГодныеОтходыНаПредприятии
				ИЛИ ИНАГРО_Элеватор.ОпределитьПринадлежностьКонтрагента(Строка.Владелец) Тогда
				ОприходоватьГодныеОтходыНаПредприятие = Истина;
			КонецЕсли;
		КонецЕсли;
		
		Если ОприходоватьГодныеОтходыНаПредприятие Тогда				
			
			СобственныйКонтрагент        = СтруктураШапкиДокумента.СобственныйКонтрагент;
			ДоговорСобственныйКонтрагент = СтруктураШапкиДокумента.ДоговорСобственныйКонтрагент;
			
			// Заполним Таблицу поступления
			
			// Отходы первой категории.
			Если Строка.ФизическийВес31 > 0 Тогда
				НоваяСтрокаТаблицаПоступления = ТаблицаПоступления.Вставить(НомСтрТаблицаПоступления);
				ЗаполнитьЗначенияСвойств(НоваяСтрокаТаблицаПоступления, Строка);
				СтруктураДополнительныхПараметров = Новый Структура("Контрагент, ДоговорКонтрагента, Номенклатура, Вес, ИспользоватьПлановуюЦену", 
					СобственныйКонтрагент, ДоговорСобственныйКонтрагент, СтруктураШапкиДокумента.Отходы1Категории, Строка.ФизическийВес31, Истина);
				ДополнитьСтрокуТаблицыПоступления(НоваяСтрокаТаблицаПоступления, СтруктураДополнительныхПараметров);
				НомСтрТаблицаПоступления = НомСтрТаблицаПоступления + 1;
			КонецЕсли;	  
			
			// Отходоы второй категории
			Если Строка.ФизическийВес32 > 0 Тогда
				НоваяСтрокаТаблицаПоступления = ТаблицаПоступления.Вставить(НомСтрТаблицаПоступления);
				ЗаполнитьЗначенияСвойств(НоваяСтрокаТаблицаПоступления, Строка);
				СтруктураДополнительныхПараметров = Новый Структура("Контрагент, ДоговорКонтрагента, Номенклатура, Вес, ИспользоватьПлановуюЦену", 
					СобственныйКонтрагент, ДоговорСобственныйКонтрагент, СтруктураШапкиДокумента.Отходы2Категории, Строка.ФизическийВес32, Истина);
				ДополнитьСтрокуТаблицыПоступления(НоваяСтрокаТаблицаПоступления, СтруктураДополнительныхПараметров);
				НомСтрТаблицаПоступления = НомСтрТаблицаПоступления + 1;
			КонецЕсли;
			
			// Побочный продукт
			Если Строка.ФизическийВес21 > 0 Тогда
				НоваяСтрокаТаблицаПоступления = ТаблицаПоступления.Вставить(НомСтрТаблицаПоступления);
				ЗаполнитьЗначенияСвойств(НоваяСтрокаТаблицаПоступления, Строка);
				СтруктураДополнительныхПараметров = Новый Структура("Контрагент, ДоговорКонтрагента, Номенклатура, Вес, ИспользоватьПлановуюЦену", 
					СобственныйКонтрагент, ДоговорСобственныйКонтрагент, СтруктураШапкиДокумента.ПобочныйПродукт, Строка.ФизическийВес21, Истина);
				ДополнитьСтрокуТаблицыПоступления(НоваяСтрокаТаблицаПоступления, СтруктураДополнительныхПараметров);
				НомСтрТаблицаПоступления = НомСтрТаблицаПоступления + 1;
			КонецЕсли;
			
		КонецЕсли;
		
		Если НЕ Строка.Владелец = СтруктураШапкиДокумента.СобственныйКонтрагент Тогда
			ТаблицаПоСобственномуЗерну.Удалить(Строка);
		Иначе
			
			МассивСтрок = Новый Массив();
			МассивСтрок.Добавить(Строка);
			
			СтрокаТаблицаПоСобственномуЗерну = ТаблицаПоСобственномуЗерну.Скопировать(МассивСтрок);
			
		КонецЕсли;
		
		НомерСтроки = НомерСтроки - 1;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПодготовитьТаблицуПоРеестрам(СтруктураШапкиДокумента, ТаблицаПоРеестрам, ТаблицаПоРеестрам_П, Отказ, Заголовок)
	
	СтруктураПолей        = Новый Структура;
	СтруктураПростыхПолей = Новый Структура;
	СтруктураСложныхПолей = Новый Структура;
	
	СтруктураПолей.Вставить("Организация",             "Ссылка.Организация");
	СтруктураПолей.Вставить("Склад",                   "Ссылка.Склад");
	СтруктураПолей.Вставить("Контрагент",              "Владелец");	
	СтруктураПолей.Вставить("ДоговорКонтрагента",      "ДоговорКонтрагента");
	СтруктураПолей.Вставить("Номенклатура",            "Номенклатура");
	СтруктураПолей.Вставить("Урожай",                  "Ссылка.Урожай");
	СтруктураПолей.Вставить("ВидХранения",             "ВидХранения");	
	СтруктураПолей.Вставить("ПартияЗерна",             "РеестрТТН");
	СтруктураПолей.Вставить("ЛабораторныйАнализ",             "ЛабораторныйАнализ");
	СтруктураПолей.Вставить("ОбработанныйВес",         "ФизическийВес1");
	СтруктураПолей.Вставить("ФизическийВесТекущий",    "ФизическийВес2");
	СтруктураПолей.Вставить("ВесНаСушку",              "ФизическийВес2");
	СтруктураПолей.Вставить("ВесНаОчистку",            "ФизическийВес2"); 
	СтруктураПолей.Вставить("ВлажностьТекущая",        "Влажность2");
	СтруктураПолей.Вставить("СорнаяПримесьТекущая",    "СорнаяПримесь2");
	СтруктураПолей.Вставить("ЗерноваяПримесьТекущая",  "ЗерноваяПримесь2");
	СтруктураПолей.Вставить("Посушено",                "Посушено");
	СтруктураПолей.Вставить("Очищено",                 "Очищено");                              
	СтруктураПолей.Вставить("Очищено",                 "Очищено");                          
	СтруктураПолей.Вставить("ВыставленыУслугиСушки",   "ВыставленыУслугиСушки");
	СтруктураПолей.Вставить("ВыставленыУслугиОчистки", "ВыставленыУслугиОчистки");
	СтруктураПолей.Вставить("ИндивидуальныйРасчет",    "ИндивидуальныйРасчет");
	СтруктураПолей.Вставить("ФизическийВес2",          "ФизическийВес2");      
	СтруктураПолей.Вставить("ФизическийВес21",         "ФизическийВес21");     
	СтруктураПолей.Вставить("ФизическийВес3",          "ФизическийВес3");      
	СтруктураПолей.Вставить("ФизическийВес31",         "ФизическийВес31");      
	СтруктураПолей.Вставить("ФизическийВес32",         "ФизическийВес32");      	
	СтруктураПолей.Вставить("УбыльОтСушки",            "УбыльОтСушки");
	
	РезультатЗапросаПоРеестрам = ОбщегоНазначенияРед12.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "РасчетПоВладельцам", СтруктураПолей, СтруктураПростыхПолей, СтруктураСложныхПолей);
	ТаблицаПоРеестрам = РезультатЗапросаПоРеестрам.Выгрузить();
	
	ТаблицаПоРеестрам.Колонки.Добавить("Силос");
	ТаблицаПоРеестрам.Колонки.Добавить("МестоХранения");
	//ТаблицаПоРеестрам.Колонки.Добавить("ЛабораторныйАнализ");
	ТаблицаПоРеестрам.Колонки.Добавить("ФизическийВес");
	ТаблицаПоРеестрам.Колонки.Добавить("Сушить");
	ТаблицаПоРеестрам.Колонки.Добавить("Чистить");
	ТаблицаПоРеестрам.Колонки.Добавить("ВлажностьВходящая");
	ТаблицаПоРеестрам.Колонки.Добавить("СорнаяПримесьВходящая");
	ТаблицаПоРеестрам.Колонки.Добавить("ЗерноваяПримесьВходящая");
	ТаблицаПоРеестрам.Колонки.Добавить("ФизическийВесИтоговый");
	ТаблицаПоРеестрам.Колонки.Добавить("ВлажностьИтоговая");
	ТаблицаПоРеестрам.Колонки.Добавить("СорнаяПримесьИтоговая");
	ТаблицаПоРеестрам.Колонки.Добавить("ЗерноваяПримесьИтоговая");
	ТаблицаПоРеестрам.Колонки.Добавить("Вывезено");
	ТаблицаПоРеестрам.Колонки.Добавить("ВлажностьВыставленныхУслуг");
	ТаблицаПоРеестрам.Колонки.Добавить("СорнаяПримесьВыставленныхУслуг");
	ТаблицаПоРеестрам.Колонки.Добавить("ЗерноваяПримесьВыставленныхУслуг");
	
	ТаблицаПоРеестрам_П = ТаблицаПоРеестрам.Скопировать();
	ТаблицаПоРеестрам_П.Колонки.Добавить("ИндивидуальнаяСушка");
	ТаблицаПоРеестрам_П.Колонки.Добавить("ИндивидуальнаяЧистка");
	ТаблицаПоРеестрам_П.Колонки.Добавить("ВесПобочногоПродукта");
	ТаблицаПоРеестрам_П.Колонки.Добавить("ВесОтходов3Кат");
	ТаблицаПоРеестрам_П.Колонки.Добавить("ВесОтходов2Кат");
	ТаблицаПоРеестрам_П.Колонки.Добавить("ВесОтходов1Кат");
	ТаблицаПоРеестрам_П.Колонки.Добавить("ВлажностьИндивидуальная");
	ТаблицаПоРеестрам_П.Колонки.Добавить("СорнаяПримесьИндивидуальная");	
	
	Для Каждого СтрокаТаблицы Из ТаблицаПоРеестрам Цикл		
		ДополнитьСтрокуТаблицыПоРеестрам(СтрокаТаблицы);		
	КонецЦикла;	
	
	Для Каждого СтрокаТаблицы Из ТаблицаПоРеестрам_П Цикл 		
		ДополнитьСтрокуТаблицыПоРеестрам_П(СтрокаТаблицы);		
	КонецЦикла;	
	
КонецПроцедуры 

Процедура ДополнитьСтрокуТаблицыПоступления(НоваяСтрокаТаблицаПоступления, СтруктураДополнительныхПараметров);
	
	НоваяСтрокаТаблицаПоступления.Склад              = ПолучитьСкладГодныхОтходов();
	НоваяСтрокаТаблицаПоступления.Владелец           = СтруктураДополнительныхПараметров.Контрагент;
	НоваяСтрокаТаблицаПоступления.ДоговорКонтрагента = СтруктураДополнительныхПараметров.ДоговорКонтрагента;
	НоваяСтрокаТаблицаПоступления.Номенклатура       = СтруктураДополнительныхПараметров.Номенклатура;					
	
	СчетаУчета = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаУчетаНоменклатуры(Организация, СтруктураДополнительныхПараметров.Номенклатура, НоваяСтрокаТаблицаПоступления.Склад);

	Документы.ИНАГРО_Форма34Сводная.ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(ЭтотОбъект, НоваяСтрокаТаблицаПоступления, СчетаУчета);
	
	Если СобственноеПодразделение Тогда
		НоваяСтрокаТаблицаПоступления.НалоговоеНазначениеДоходовИЗатрат = СчетаУчета.НалоговоеНазначениеДоходовИЗатрат;
	КонецЕсли;
	
	НоваяСтрокаТаблицаПоступления.Количество         = СтруктураДополнительныхПараметров.Вес;
	
	ПлановаяЦена                            = 0;
	ТипЦенПлановойСебестоимостиНоменклатуры = Константы.ТипЦенПлановойСебестоимостиНоменклатуры.Получить();
	
	Если СтруктураДополнительныхПараметров.ИспользоватьПлановуюЦену И ЗначениеЗаполнено(НоваяСтрокаТаблицаПоступления.ДоговорКонтрагента) Тогда
		Если ЗначениеЗаполнено(ТипЦенПлановойСебестоимостиНоменклатуры) Тогда
			ПлановаяЦена = Ценообразование.ПолучитьЦенуНоменклатуры(НоваяСтрокаТаблицаПоступления.Номенклатура, ТипЦенПлановойСебестоимостиНоменклатуры,
																	Дата, НоваяСтрокаТаблицаПоступления.ДоговорКонтрагента.ВалютаВзаиморасчетов);
		КонецЕсли;
	КонецЕсли;
	
	НоваяСтрокаТаблицаПоступления.СуммаПлановая      = НоваяСтрокаТаблицаПоступления.Количество * ПлановаяЦена;
	
КонецПроцедуры

Процедура ДополнитьСтрокуТаблицыПоРеестрам(СтрокаТаблицы)
	
	Запрос = Новый Запрос;		
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаРегистра.*
		|ИЗ
		|	РегистрСведений.ИНАГРО_ДанныеПоКачествуПартийЗерна.СрезПоследних(
		|			&МоментВремени,
		|			ПартияЗерна = &ПартияЗерна
		|				И ЛабораторныйАнализ = &ЛабораторныйАнализ
		|				И Регистратор <> &Ссылка) КАК ТаблицаРегистра";
	
	Запрос.УстановитьПараметр("МоментВремени", Новый Граница(ТекущаяДата(), ВидГраницы.Включая));
	Запрос.УстановитьПараметр("ПартияЗерна",   СтрокаТаблицы.ПартияЗерна);
	Запрос.УстановитьПараметр("ЛабораторныйАнализ",   СтрокаТаблицы.ЛабораторныйАнализ);
	Запрос.УстановитьПараметр("Ссылка",        Ссылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		СтрокаТаблицы.Силос                            = Выборка.Силос;
		СтрокаТаблицы.ЛабораторныйАнализ               = Выборка.ЛабораторныйАнализ;
		СтрокаТаблицы.ФизическийВес                    = Выборка.ФизическийВес;
		СтрокаТаблицы.Сушить                           = Выборка.Сушить;
		СтрокаТаблицы.Чистить                          = Выборка.Чистить;
		СтрокаТаблицы.ВлажностьВходящая                = Выборка.ВлажностьВходящая;
		СтрокаТаблицы.СорнаяПримесьВходящая            = Выборка.СорнаяПримесьВходящая;
		СтрокаТаблицы.ЗерноваяПримесьВходящая          = Выборка.ЗерноваяПримесьВходящая;
		СтрокаТаблицы.ФизическийВесИтоговый            = Выборка.ФизическийВесИтоговый;
		СтрокаТаблицы.ВлажностьИтоговая                = Выборка.ВлажностьИтоговая;
		СтрокаТаблицы.СорнаяПримесьИтоговая            = Выборка.СорнаяПримесьИтоговая;
		СтрокаТаблицы.ЗерноваяПримесьИтоговая          = Выборка.ЗерноваяПримесьИтоговая;
		СтрокаТаблицы.Вывезено                         = Выборка.Вывезено;
		СтрокаТаблицы.ВыставленыУслугиСушки            = ?(Выборка.ВыставленыУслугиСушки  , Выборка.ВыставленыУслугиСушки,            СтрокаТаблицы.Посушено);
		СтрокаТаблицы.ВыставленыУслугиОчистки          = ?(Выборка.ВыставленыУслугиОчистки, Выборка.ВыставленыУслугиОчистки,          СтрокаТаблицы.Очищено);
		СтрокаТаблицы.ВлажностьВыставленныхУслуг       = ?(Выборка.ВыставленыУслугиСушки  , Выборка.ВлажностьВыставленныхУслуг,       СтрокаТаблицы.ВлажностьТекущая);
		СтрокаТаблицы.СорнаяПримесьВыставленныхУслуг   = ?(Выборка.ВыставленыУслугиОчистки, Выборка.СорнаяПримесьВыставленныхУслуг,   СтрокаТаблицы.СорнаяПримесьТекущая);
		СтрокаТаблицы.ЗерноваяПримесьВыставленныхУслуг = ?(Выборка.ВыставленыУслугиОчистки, Выборка.ЗерноваяПримесьВыставленныхУслуг, СтрокаТаблицы.ЗерноваяПримесьТекущая);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДополнитьСтрокуТаблицыПоРеестрам_П(СтрокаТаблицы)
	
	ВремТаб = СтрокаТаблицы.Владелец().Скопировать();
	ВремТаб.Очистить();
	СтрВремТаб = ВремТаб.Добавить();
	ЗаполнитьЗначенияСвойств(СтрВремТаб, СтрокаТаблицы);
	
	Запрос = Новый Запрос;		
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаРегистра.*
		|ИЗ
		|	РегистрСведений.ИНАГРО_ДанныеПоКачествуЗерна.СрезПоследних(
		|			&МоментВремени,
		|			ПартияЗерна = &ПартияЗерна
		|				И ЛабораторныйАнализ = &ЛабораторныйАнализ
		|				И Регистратор <> &Ссылка) КАК ТаблицаРегистра";
	
	Запрос.УстановитьПараметр("МоментВремени", МоментВремени());
	Запрос.УстановитьПараметр("ПартияЗерна",   СтрокаТаблицы.ПартияЗерна);
	Запрос.УстановитьПараметр("ЛабораторныйАнализ",   СтрокаТаблицы.ЛабораторныйАнализ);
	Запрос.УстановитьПараметр("Ссылка",        Ссылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если ВидДокумента = Перечисления.ИНАГРО_ВидыАктовОчисткиСушки.Индивидуальный Тогда
			
			ЗаполнитьЗначенияСвойств(СтрокаТаблицы, Выборка);
			
			Если СтрВремТаб.Посушено И ПроводилиСушку Тогда
				СтрокаТаблицы.ИндивидуальнаяСушка         = Истина; 
				СтрокаТаблицы.УбыльОтСушки                = СтрВремТаб.УбыльОтСушки;				
				СтрокаТаблицы.ВлажностьИндивидуальная     = СтрВремТаб.ВлажностьТекущая;
			КонецЕсли;
			
			Если СтрВремТаб.Очищено И ПроводилиОчистку Тогда
				СтрокаТаблицы.ИндивидуальнаяЧистка        = Истина;
				СтрокаТаблицы.СорнаяПримесьИндивидуальная = СтрВремТаб.СорнаяПримесьТекущая;
				СтрокаТаблицы.ВесПобочногоПродукта        = СтрВремТаб.ФизическийВес21;
				СтрокаТаблицы.ВесОтходов3Кат              = СтрВремТаб.ФизическийВес3;
				СтрокаТаблицы.ВесОтходов2Кат              = СтрВремТаб.ФизическийВес32;
				СтрокаТаблицы.ВесОтходов1Кат              = СтрВремТаб.ФизическийВес31;
			КонецЕсли;
			
		Иначе
			
			СтрокаТаблицы.Силос                            = Выборка.Силос;
			СтрокаТаблицы.МестоХранения                    = Выборка.МестоХранения;
			СтрокаТаблицы.ЛабораторныйАнализ               = Выборка.ЛабораторныйАнализ;
			СтрокаТаблицы.ФизическийВес                    = Выборка.ФизическийВес;
			СтрокаТаблицы.Сушить                           = Выборка.Сушить;
			СтрокаТаблицы.Чистить                          = Выборка.Чистить;
			СтрокаТаблицы.ВлажностьВходящая                = Выборка.ВлажностьВходящая;
			СтрокаТаблицы.СорнаяПримесьВходящая            = Выборка.СорнаяПримесьВходящая;
			СтрокаТаблицы.ЗерноваяПримесьВходящая          = Выборка.ЗерноваяПримесьВходящая;
			СтрокаТаблицы.ФизическийВесИтоговый            = СтрокаТаблицы.ФизическийВесТекущий;
			СтрокаТаблицы.ВлажностьИтоговая                = СтрокаТаблицы.ВлажностьТекущая;
			СтрокаТаблицы.СорнаяПримесьИтоговая            = СтрокаТаблицы.СорнаяПримесьТекущая;
			СтрокаТаблицы.ЗерноваяПримесьИтоговая          = СтрокаТаблицы.ЗерноваяПримесьТекущая;
			СтрокаТаблицы.Вывезено 						   = Выборка.Вывезено;
			СтрокаТаблицы.ВыставленыУслугиСушки            = ?(Выборка.ВыставленыУслугиСушки  , Выборка.ВыставленыУслугиСушки,            Истина);
			СтрокаТаблицы.ВыставленыУслугиОчистки          = ?(Выборка.ВыставленыУслугиОчистки, Выборка.ВыставленыУслугиОчистки,          Истина);
			СтрокаТаблицы.ВлажностьВыставленныхУслуг       = ?(Выборка.ВыставленыУслугиСушки  , Выборка.ВлажностьВыставленныхУслуг,       СтрокаТаблицы.ВлажностьТекущая);
			СтрокаТаблицы.СорнаяПримесьВыставленныхУслуг   = ?(Выборка.ВыставленыУслугиОчистки, Выборка.СорнаяПримесьВыставленныхУслуг,   СтрокаТаблицы.СорнаяПримесьТекущая);
			СтрокаТаблицы.ЗерноваяПримесьВыставленныхУслуг = ?(Выборка.ВыставленыУслугиОчистки, Выборка.ЗерноваяПримесьВыставленныхУслуг, СтрокаТаблицы.ЗерноваяПримесьТекущая);
			
			Если СтрВремТаб.Посушено И ПроводилиСушку Тогда
				СтрокаТаблицы.ИндивидуальнаяСушка         = Ложь;
				СтрокаТаблицы.УбыльОтСушки                = 0;
			Иначе
				СтрокаТаблицы.УбыльОтСушки                = Выборка.УбыльОтСушки;
			КонецЕсли;
			
			Если СтрВремТаб.Очищено И ПроводилиОчистку Тогда                                   
				СтрокаТаблицы.ИндивидуальнаяЧистка        = Ложь;
				СтрокаТаблицы.ВесПобочногоПродукта        = 0;
				СтрокаТаблицы.ВесОтходов3Кат              = 0;
				СтрокаТаблицы.ВесОтходов2Кат              = 0;
				СтрокаТаблицы.ВесОтходов1Кат              = 0;
			КонецЕсли;
			
			Если НЕ СтрВремТаб.Очищено И НЕ ПроводилиОчистку Тогда
				СтрокаТаблицы.Очищено                     = Выборка.Очищено;
			КонецЕсли;
			
			Если НЕ СтрВремТаб.Посушено И НЕ ПроводилиСушку Тогда
				СтрокаТаблицы.Посушено                    = Выборка.Посушено;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Движения по регистрам Элеватора
//
Процедура ПровестиПоРегистрамЭлеватора(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоКультурам, ТаблицаПоРеестрам, ТаблицаПоРеестрам_П, Отказ, Заголовок)
	
	ТаблицаПоКультурам.Колонки.Добавить("ЗачетныйВесДляКонтроля");
	
	ВладелецДляОтходов = ПараметрыУчетаЭлеватора.ВладелецДляОтходов;
	
	Для Каждого СтрокаТаблицы Из ТаблицаПоКультурам Цикл
		
		// Убыль веса при сушке
		
		Если СтрокаТаблицы.УбыльВесаПриСушке > 0 Тогда
			
			СтрокаТаблицы.ФизическийВес = 0;
			
			Если НЕ ВидДокумента = Перечисления.ИНАГРО_ВидыАктовОчисткиСушки.Индивидуальный И СтрокаТаблицы.ИндивидуальныйРасчет Тогда
				//
			Иначе	
				
				ИНАГРО_Элеватор.ДвиженияПоРегиструФорма36Приход(Движения, СтрокаТаблицы);
				
				СтрокаТаблицы.ЗачетныйВес = 0;
				
				СтруктураШапкиДокумента.Вставить("НомерАнализа", СтрокаТаблицы.НомерАнализа);

				ИНАГРО_Элеватор.ДвиженияПоРегиструОстаткиПриход(Движения, СтрокаТаблицы);
				
			КонецЕсли;
			
		КонецЕсли;
		
		СтрокаТаблицы.УбыльВесаПриСушке = 0;
		
		// Списание отходов 3 кат
		
		СтрокаТаблицы.ФизическийВес     = СтрокаТаблицы.ФизическийВес3;
		
		Если НЕ ВидДокумента = Перечисления.ИНАГРО_ВидыАктовОчисткиСушки.Индивидуальный И СтрокаТаблицы.ИндивидуальныйРасчет Тогда
			//
		Иначе	
			
			Если НеСписыватьОтходыСВладельцев Тогда 
				// 
			Иначе
				ИНАГРО_Элеватор.ДвиженияПоРегиструОстаткиРасход(Движения, СтрокаТаблицы);
			КонецЕсли;
			
		КонецЕсли;
		
		// Списание отходов 1, 2 категории, побочный продукт
		
		СтрокаТаблицы.ФизическийВес     = СтрокаТаблицы.ФизическийВес21 + СтрокаТаблицы.ФизическийВес31 + СтрокаТаблицы.ФизическийВес32;
		
		Если НЕ ВидДокумента = Перечисления.ИНАГРО_ВидыАктовОчисткиСушки.Индивидуальный И СтрокаТаблицы.ИндивидуальныйРасчет Тогда
			//
		Иначе	
			ИНАГРО_Элеватор.ДвиженияПоРегиструОстаткиРасход(Движения, СтрокаТаблицы);
		КонецЕсли;
		
		// Списание усушки
		
		Если ПараметрыУчетаЭлеватора.СписыватьУсушкуПоСкладскомуУчету Тогда		
			
			СтрокаТаблицы.ФизическийВес = СтрокаТаблицы.УбыльОтСушки;
			
			Если НЕ ВидДокумента = Перечисления.ИНАГРО_ВидыАктовОчисткиСушки.Индивидуальный И СтрокаТаблицы.ИндивидуальныйРасчет Тогда
				//
			Иначе	
				ИНАГРО_Элеватор.ДвиженияПоРегиструОстаткиРасход(Движения, СтрокаТаблицы);
			КонецЕсли;
			
		КонецЕсли;
		
		ОставлятьГодныеОтходыНаПредприятии = СтрокаТаблицы.ДоговорКонтрагента.ИНАГРО_ОставлятьГодныеОтходыНаПредприятии;
		
		// Приход отходов первой категории
		
		Если СтрокаТаблицы.ФизическийВес31 > 0 Тогда
			
			Если ОставлятьГодныеОтходыНаПредприятии Тогда
				ЧужойКонтрагент                  = СтрокаТаблицы.Владелец;
				ЧужойДоговорКонтрагента          = СтрокаТаблицы.ДоговорКонтрагента;
				СобственныйКонтрагент            = СтруктураШапкиДокумента.СобственныйКонтрагент;
				СтрокаТаблицы.Владелец           = СобственныйКонтрагент;
				СтрокаТаблицы.ДоговорКонтрагента = СтруктураШапкиДокумента.ДоговорСобственныйКонтрагент;
			КонецЕсли;
			
			СкладЗерна                    = СтрокаТаблицы.Склад;
			СкладОтходов                  = ПолучитьСкладГодныхОтходов();
			СтрокаТаблицы.Склад           = СкладОтходов;
			СтрокаТаблицы.КодРасхода      = ВернутьКодРасходаАктаОчисткиСушки(СтруктураШапкиДокумента.Отходы1Категории);
			СтрокаТаблицы.Номенклатура    = СтруктураШапкиДокумента.Отходы1Категории;
			СтрокаТаблицы.ФизическийВес   = СтрокаТаблицы.ФизическийВес31;
			СтрокаТаблицы.Влажность       = СтруктураШапкиДокумента.Влажность9;
			СтрокаТаблицы.СорнаяПримесь   = СтруктураШапкиДокумента.СорнаяПримесь9;
			СтрокаТаблицы.ЗерноваяПримесь = СтруктураШапкиДокумента.ЗерноваяПримесь9;
			СтрокаТаблицы.НомерАнализа    = СокрЛП(СтруктураШапкиДокумента.НомерАнализа9);
			
			Если НЕ ВидДокумента = Перечисления.ИНАГРО_ВидыАктовОчисткиСушки.Индивидуальный И СтрокаТаблицы.ИндивидуальныйРасчет Тогда
				//	
			Иначе	
				ИНАГРО_Элеватор.ДвиженияПоРегиструФорма36Приход(Движения, СтрокаТаблицы);
				СтрокаТаблицы.ЗачетныйВес        = СтрокаТаблицы.ФизическийВес31;
				ИНАГРО_Элеватор.ДвиженияПоРегиструОстаткиПриход(Движения, СтрокаТаблицы);
			КонецЕсли;
			
			Если ОставлятьГодныеОтходыНаПредприятии Тогда
				СтрокаТаблицы.Владелец           = ЧужойКонтрагент;
				СтрокаТаблицы.ДоговорКонтрагента = ЧужойДоговорКонтрагента;				
			КонецЕсли;
			
			СтрокаТаблицы.Склад           = СкладЗерна;			
			СтрокаТаблицы.Номенклатура    = СтруктураШапкиДокумента.Номенклатура;
			
			Если НЕ ВидДокумента = Перечисления.ИНАГРО_ВидыАктовОчисткиСушки.Индивидуальный И СтрокаТаблицы.ИндивидуальныйРасчет Тогда
				
			Иначе	
				ИНАГРО_Элеватор.ДвиженияПоРегиструФорма36Расход(Движения, СтрокаТаблицы);
			КонецЕсли;
			
			// Списание с зачетного веса основной культуры веса отходов первой категори								
			
			Если НЕ ПараметрыУчетаЭлеватора.НеСписыватьЗачетныйВесГодныхОтходов Тогда
				
				Если ПараметрыУчетаЭлеватора.КонтрольОстатковВЗачетномВесе Тогда 	
					ЗачетныйВесДляКонтроля = 0;	
					ЗачетныйВесДляКонтроля = ИНАГРО_Элеватор.РассчитатьКонтрольныйЗачетныйВес(Ссылка, СтрокаТаблицы.ФизическийВес, СтрокаТаблицы.Номенклатура,
																							  СтрокаТаблицы.Влажность, СтрокаТаблицы.СорнаяПримесь, Организация,
																							  СтрокаТаблицы.Владелец, СтрокаТаблицы.ДоговорКонтрагента);
					СтрокаТаблицы.ЗачетныйВесДляКонтроля = ЗачетныйВесДляКонтроля;	
				КонецЕсли;	
				
				СтрокаТаблицы.ФизическийВес = 0;
				
				Если НЕ ВидДокумента = Перечисления.ИНАГРО_ВидыАктовОчисткиСушки.Индивидуальный И СтрокаТаблицы.ИндивидуальныйРасчет Тогда
					//
				Иначе	
					ИНАГРО_Элеватор.ДвиженияПоРегиструОстаткиРасход(Движения, СтрокаТаблицы);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		// Приход отходов второй категории
		
		Если СтрокаТаблицы.ФизическийВес32 > 0 Тогда
			
			Если ОставлятьГодныеОтходыНаПредприятии Тогда
				ЧужойКонтрагент                  = СтрокаТаблицы.Владелец;
				ЧужойДоговорКонтрагента          = СтрокаТаблицы.ДоговорКонтрагента;
				СобственныйКонтрагент            = СтруктураШапкиДокумента.СобственныйКонтрагент;				
				СтрокаТаблицы.Владелец           = СобственныйКонтрагент;
				СтрокаТаблицы.ДоговорКонтрагента = СтруктураШапкиДокумента.ДоговорСобственныйКонтрагент
			КонецЕсли;
			
			СкладЗерна                    = СтрокаТаблицы.Склад;
			СкладОтходов                  = ПолучитьСкладГодныхОтходов();			
			СтрокаТаблицы.КодРасхода      = ВернутьКодРасходаАктаОчисткиСушки(СтруктураШапкиДокумента.Отходы2Категории);
			СтрокаТаблицы.Номенклатура    = СтруктураШапкиДокумента.Отходы2Категории;
			СтрокаТаблицы.ФизическийВес   = СтрокаТаблицы.ФизическийВес32;
			СтрокаТаблицы.Влажность       = СтруктураШапкиДокумента.Влажность10;
			СтрокаТаблицы.СорнаяПримесь   = СтруктураШапкиДокумента.СорнаяПримесь10;
			СтрокаТаблицы.ЗерноваяПримесь = СтруктураШапкиДокумента.ЗерноваяПримесь10;
			СтрокаТаблицы.НомерАнализа    = СокрЛП(СтруктураШапкиДокумента.НомерАнализа10);
			
			Если НЕ ВидДокумента = Перечисления.ИНАГРО_ВидыАктовОчисткиСушки.Индивидуальный И СтрокаТаблицы.ИндивидуальныйРасчет Тогда
				//
			Иначе	
				ИНАГРО_Элеватор.ДвиженияПоРегиструФорма36Приход(Движения, СтрокаТаблицы);
				СтрокаТаблицы.ЗачетныйВес = СтрокаТаблицы.ФизическийВес32;
				ИНАГРО_Элеватор.ДвиженияПоРегиструОстаткиПриход(Движения, СтрокаТаблицы);
			КонецЕсли;	
			
			Если ОставлятьГодныеОтходыНаПредприятии Тогда
				СтрокаТаблицы.Владелец           = ЧужойКонтрагент;
				СтрокаТаблицы.ДоговорКонтрагента = ЧужойДоговорКонтрагента;				
			КонецЕсли;
			
			СтрокаТаблицы.Склад          = СкладЗерна;			
			СтрокаТаблицы.Номенклатура   = СтруктураШапкиДокумента.Номенклатура;
			
			Если НЕ ВидДокумента = Перечисления.ИНАГРО_ВидыАктовОчисткиСушки.Индивидуальный И СтрокаТаблицы.ИндивидуальныйРасчет Тогда
				//
			Иначе	
				ИНАГРО_Элеватор.ДвиженияПоРегиструФорма36Расход(Движения, СтрокаТаблицы);
			КонецЕсли;
			
			// Списание с зачетного веса основной культуры веса отходов второй категори								
			
			Если НЕ ПараметрыУчетаЭлеватора.НеСписыватьЗачетныйВесГодныхОтходов Тогда
				
				Если ПараметрыУчетаЭлеватора.КонтрольОстатковВЗачетномВесе Тогда 	
					ЗачетныйВесДляКонтроля = 0;	
					ЗачетныйВесДляКонтроля = ИНАГРО_Элеватор.РассчитатьКонтрольныйЗачетныйВес(Ссылка, СтрокаТаблицы.ФизическийВес, СтрокаТаблицы.Номенклатура,
																							  СтрокаТаблицы.Влажность, СтрокаТаблицы.СорнаяПримесь, Организация,
																							  СтрокаТаблицы.Владелец, СтрокаТаблицы.ДоговорКонтрагента);
					СтрокаТаблицы.ЗачетныйВесДляКонтроля = ЗачетныйВесДляКонтроля;	
				КонецЕсли;	
				
				СтрокаТаблицы.ФизическийВес = 0;
				
				Если НЕ ВидДокумента = Перечисления.ИНАГРО_ВидыАктовОчисткиСушки.Индивидуальный И СтрокаТаблицы.ИндивидуальныйРасчет Тогда
					//
				Иначе	
					ИНАГРО_Элеватор.ДвиженияПоРегиструОстаткиРасход(Движения, СтрокаТаблицы);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		// Приход побочного продукта
		
		Если СтрокаТаблицы.ФизическийВес21 > 0 Тогда
			
			Если ОставлятьГодныеОтходыНаПредприятии Тогда
				ЧужойКонтрагент                  = СтрокаТаблицы.Владелец;
				ЧужойДоговорКонтрагента          = СтрокаТаблицы.ДоговорКонтрагента;
				СобственныйКонтрагент            = СтруктураШапкиДокумента.СобственныйКонтрагент; 				
				СтрокаТаблицы.Владелец           = СобственныйКонтрагент;
				СтрокаТаблицы.ДоговорКонтрагента = СтруктураШапкиДокумента.ДоговорСобственныйКонтрагент;
			КонецЕсли;
			
			СкладЗерна                    = СтрокаТаблицы.Склад;
			СкладОтходов                  = ПолучитьСкладГодныхОтходов();			
			СтрокаТаблицы.КодРасхода      = ВернутьКодРасходаАктаОчисткиСушки(СтруктураШапкиДокумента.ПобочныйПродукт);
			СтрокаТаблицы.Номенклатура    = СтруктураШапкиДокумента.ПобочныйПродукт;
			СтрокаТаблицы.ФизическийВес   = СтрокаТаблицы.ФизическийВес21;
			СтрокаТаблицы.Влажность       = СтруктураШапкиДокумента.Влажность7;
			СтрокаТаблицы.СорнаяПримесь   = СтруктураШапкиДокумента.СорнаяПримесь7;
			СтрокаТаблицы.ЗерноваяПримесь = СтруктураШапкиДокумента.ЗерноваяПримесь7;
			СтрокаТаблицы.НомерАнализа    = СокрЛП(СтруктураШапкиДокумента.НомерАнализа7);
			
			Если НЕ ВидДокумента = Перечисления.ИНАГРО_ВидыАктовОчисткиСушки.Индивидуальный И СтрокаТаблицы.ИндивидуальныйРасчет Тогда
				//
			Иначе	
				ИНАГРО_Элеватор.ДвиженияПоРегиструФорма36Приход(Движения, СтрокаТаблицы);
				СтрокаТаблицы.ЗачетныйВес = СтрокаТаблицы.ФизическийВес21;
				ИНАГРО_Элеватор.ДвиженияПоРегиструОстаткиПриход(Движения, СтрокаТаблицы);
			КонецЕсли;
			
			Если ОставлятьГодныеОтходыНаПредприятии Тогда
				СтрокаТаблицы.Владелец = ЧужойКонтрагент;
				СтрокаТаблицы.ДоговорКонтрагента=ЧужойДоговорКонтрагента;				
			КонецЕсли;
			
			СтрокаТаблицы.Склад        = СкладЗерна;			
			СтрокаТаблицы.Номенклатура = СтруктураШапкиДокумента.Номенклатура;
			
			ИНАГРО_Элеватор.ДвиженияПоРегиструФорма36Расход(Движения, СтрокаТаблицы);
			
			// Списание с зачетного веса основной культуры веса побочного продукта
			
			Если НЕ ПараметрыУчетаЭлеватора.НеСписыватьЗачетныйВесГодныхОтходов Тогда
				
				Если ПараметрыУчетаЭлеватора.КонтрольОстатковВЗачетномВесе Тогда 	
					ЗачетныйВесДляКонтроля = 0;	
					ЗачетныйВесДляКонтроля = ИНАГРО_Элеватор.РассчитатьКонтрольныйЗачетныйВес(Ссылка, СтрокаТаблицы.ФизическийВес, СтрокаТаблицы.Номенклатура,
																							  СтрокаТаблицы.Влажность, СтрокаТаблицы.СорнаяПримесь,
																							  Организация,СтрокаТаблицы.Владелец, СтрокаТаблицы.ДоговорКонтрагента);
					СтрокаТаблицы.ЗачетныйВесДляКонтроля = ЗачетныйВесДляКонтроля;	
				КонецЕсли;	
				
				СтрокаТаблицы.ФизическийВес = 0;
				
				Если НЕ ВидДокумента = Перечисления.ИНАГРО_ВидыАктовОчисткиСушки.Индивидуальный И СтрокаТаблицы.ИндивидуальныйРасчет Тогда
					//
				Иначе	
					ИНАГРО_Элеватор.ДвиженияПоРегиструОстаткиРасход(Движения, СтрокаТаблицы);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		// Приход отходов третей категории
		
		Если СтрокаТаблицы.ФизическийВес3>0 Тогда
			
			ЧужойКонтрагент                  = СтрокаТаблицы.Владелец;
			ЧужойДоговорКонтрагента          = СтрокаТаблицы.ДоговорКонтрагента;
			СобственныйКонтрагент            = СтруктураШапкиДокумента.СобственныйКонтрагент;
			СтрокаТаблицы.Владелец           = СобственныйКонтрагент;
			ДоговорКонтрагентаДля3кат        = ИНАГРО_Элеватор.ПолучитьДополнительныйРеквизитОрганизации(Организация, "Договор", Дата); 			
			СтрокаТаблицы.ДоговорКонтрагента = ДоговорКонтрагентаДля3кат;
			СтрокаТаблицы.КодРасхода         = Перечисления.ИНАГРО_КодыРасхода.Кат3;
			СтрокаТаблицы.Номенклатура       = СтруктураШапкиДокумента.Отходы3Категории;
			СтрокаТаблицы.ФизическийВес      = СтрокаТаблицы.ФизическийВес3;	
			
			Если СтруктураШапкиДокумента.Порядок И СтрокаТаблицы.УбыльОтСушки <> 0 Тогда					
				СтрокаТаблицы.Влажность = Влажность2;
			Иначе 
				СтрокаТаблицы.Влажность = СтрокаТаблицы.Влажность1;				
			КонецЕсли;									
			
			СтрокаТаблицы.СорнаяПримесь   = СтруктураШапкиДокумента.СорнаяПримесь8;
			СтрокаТаблицы.ЗерноваяПримесь = СтруктураШапкиДокумента.ЗерноваяПримесь8;
			СтрокаТаблицы.НомерАнализа    = СокрЛП(СтруктураШапкиДокумента.НомерАнализа8);
			
			Если НЕ ВидДокумента = Перечисления.ИНАГРО_ВидыАктовОчисткиСушки.Индивидуальный  Тогда
				
				Если ПараметрыУчетаЭлеватора.ВестиСкладскойУчетНегодныхОтходов Тогда					
					ИНАГРО_Элеватор.ДвиженияПоРегиструФорма36Приход(Движения, СтрокаТаблицы);
					СтрокаТаблицы.ЗачетныйВес = СтрокаТаблицы.ФизическийВес3;
					ИНАГРО_Элеватор.ДвиженияПоРегиструОстаткиПриход(Движения, СтрокаТаблицы);				
				КонецЕсли;
				
			КонецЕсли;
			
			СтрокаТаблицы.Владелец           = ЧужойКонтрагент;
			СтрокаТаблицы.ДоговорКонтрагента = ЧужойДоговорКонтрагента;
			СтрокаТаблицы.Номенклатура       = СтруктураШапкиДокумента.Номенклатура;
			
			// Обеспечение задачи не списывать отходов с владельцев
			
			Если НЕ ВидДокумента = Перечисления.ИНАГРО_ВидыАктовОчисткиСушки.Индивидуальный И СтрокаТаблицы.ИндивидуальныйРасчет Тогда
				//
			Иначе	
				Если НеСписыватьОтходыСВладельцев Тогда 
					//
				Иначе
					ИНАГРО_Элеватор.ДвиженияПоРегиструФорма36Расход(Движения, СтрокаТаблицы);
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;	
	
	// Движения по сводным регистрам
	
	Если НЕ ВидДокумента = Перечисления.ИНАГРО_ВидыАктовОчисткиСушки.Индивидуальный  Тогда
		ДвиженияПоСводнымРегистрмЭлеватора(РежимПроведения, СтруктураШапкиДокумента, Отказ, Заголовок);
	КонецЕсли;	
	
	ПровестиПоЖурналуЛабораторныхАнализов(СтруктураШапкиДокумента);
	
	Если ПараметрыУчетаЭлеватора <> Неопределено Тогда
		
		// Движения по регистру ДанныеПоКачетсвуПартийЗерна
		
		Если ПараметрыУчетаЭлеватора.ИспользоватьСистемуКонтроляКачестваПартийЗерна Тогда
			
			НаборДвижений                  = Движения.ИНАГРО_ДанныеПоКачествуПартийЗерна;
			ТаблицаДвижений                = НаборДвижений.Выгрузить();
			ОбщегоНазначенияБПВызовСервера.ЗагрузитьВТаблицуЗначений(ТаблицаПоРеестрам, ТаблицаДвижений);
			ТаблицаДвижений.ЗаполнитьЗначения(Ссылка, "Регистратор");
			
			Для Каждого СтрокаДвижения Из ТаблицаДвижений Цикл
				СтрокаДвижения.Склад       = ?(ЗначениеЗаполнено(СтруктураШапкиДокумента.Склад),  СтруктураШапкиДокумента.Склад,  СтрокаДвижения.ПартияЗерна.Склад);
				СтрокаДвижения.Урожай      = ?(ЗначениеЗаполнено(СтруктураШапкиДокумента.Урожай), СтруктураШапкиДокумента.Урожай, СтрокаДвижения.ПартияЗерна.Урожай);
				Если СтрокаДвижения.Посушено И СтрокаДвижения.Очищено Тогда 
					СтрокаДвижения.ФизическийВесИтоговый = СтрокаДвижения.ФизическийВесТекущий;
				КонецЕсли;	
			КонецЦикла;
			
			НаборДвижений.мПериод          = Дата;
			НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;
			
			Если НЕ Отказ Тогда
				Движения.ИНАГРО_ДанныеПоКачествуПартийЗерна.ВыполнитьДвижения();
			КонецЕсли;
			
			// для Акта Очистки/Сушки 
			
			НаборДвижений                  = Движения.ИНАГРО_ДанныеПоКачествуЗерна;
			ТаблицаДвижений                = НаборДвижений.Выгрузить();
			ОбщегоНазначенияБПВызовСервера.ЗагрузитьВТаблицуЗначений(ТаблицаПоРеестрам_П, ТаблицаДвижений);
			ТаблицаДвижений.ЗаполнитьЗначения(Ссылка, "Регистратор");
			
			Для Каждого СтрокаДвижения Из ТаблицаДвижений Цикл
				СтрокаДвижения.Склад       = ?(ЗначениеЗаполнено(СтруктураШапкиДокумента.Склад),  СтруктураШапкиДокумента.Склад,  СтрокаДвижения.ПартияЗерна.Склад);
				СтрокаДвижения.Урожай      = ?(ЗначениеЗаполнено(СтруктураШапкиДокумента.Урожай), СтруктураШапкиДокумента.Урожай, СтрокаДвижения.ПартияЗерна.Урожай);
				Если СтрокаДвижения.Посушено И СтрокаДвижения.Очищено Тогда 
					СтрокаДвижения.ФизическийВесИтоговый = СтрокаДвижения.ФизическийВесТекущий;
				КонецЕсли;	
			КонецЦикла;
			
			НаборДвижений.мПериод          = Дата;
			НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;
			
			Если НЕ Отказ Тогда
				Движения.ИНАГРО_ДанныеПоКачествуЗерна.ВыполнитьДвижения();
			КонецЕсли;
			
		КонецЕсли;
		
		// Движения по регистру РасчетУслуг
		
		Если ПараметрыУчетаЭлеватора.ВыставлятьУслугиОчисткиСушкиПоФактическимПоказателям Тогда
			// Проверим заполнение обязательных полей
			ТаблицаПоУслугам = Новый ТаблицаЗначений;
			СформироватьТаблицуУслуг(СтруктураШапкиДокумента, ТаблицаПоУслугам, Отказ, Заголовок);
			Если ТаблицаПоУслугам.Количество() > 0 Тогда
				ИНАГРО_Элеватор.ДвиженияПоРегиструРасчетыПоУслугам(Движения, ТаблицаПоУслугам, "Приход");
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры	

Процедура ПровестиПоЖурналуЛабораторныхАнализов(СтруктураШапкиДокумента)
	
	// Физический вес до
	Если ЗначениеЗаполнено(СтруктураШапкиДокумента.ЛабораторныйАнализ1) И СтруктураШапкиДокумента.ФизическийВес1 > 0 Тогда
		
		СтруктураШапкиДокумента.Вставить("ЛабораторныйАнализ", СтруктураШапкиДокумента.ЛабораторныйАнализ1);	
		СтруктураШапкиДокумента.Вставить("ФизическийВес",      СтруктураШапкиДокумента.ФизическийВес1);		
		
		ИНАГРО_Элеватор.ДвиженияПоРегиструЖурналЛабораторныхАнализов(Движения, СтруктураШапкиДокумента);
		ИНАГРО_Элеватор.ДвиженияПоРегиструФорма49(Движения, СтруктураШапкиДокумента);
		
	КонецЕсли; 
	
	// Физический вес после
	Если ЗначениеЗаполнено(СтруктураШапкиДокумента.ЛабораторныйАнализ2) И СтруктураШапкиДокумента.ФизическийВес2 > 0 Тогда
		
		СтруктураШапкиДокумента.Вставить("ЛабораторныйАнализ", СтруктураШапкиДокумента.ЛабораторныйАнализ2);	
		СтруктураШапкиДокумента.Вставить("ФизическийВес",      СтруктураШапкиДокумента.ФизическийВес2);
		
		ИНАГРО_Элеватор.ДвиженияПоРегиструЖурналЛабораторныхАнализов(Движения, СтруктураШапкиДокумента);
		ИНАГРО_Элеватор.ДвиженияПоРегиструФорма49(Движения, СтруктураШапкиДокумента);
		
	КонецЕсли;
	
	// Побочный продукт
	Если ЗначениеЗаполнено(СтруктураШапкиДокумента.ЛабораторныйАнализ7) И СтруктураШапкиДокумента.ФизическийВес7 > 0 Тогда
		
		СтруктураШапкиДокумента.Вставить("ЛабораторныйАнализ", СтруктураШапкиДокумента.ЛабораторныйАнализ7);	
		СтруктураШапкиДокумента.Вставить("ФизическийВес",      СтруктураШапкиДокумента.ФизическийВес7);
		
		ИНАГРО_Элеватор.ДвиженияПоРегиструЖурналЛабораторныхАнализов(Движения, СтруктураШапкиДокумента);
		ИНАГРО_Элеватор.ДвиженияПоРегиструФорма49(Движения, СтруктураШапкиДокумента);
		
	КонецЕсли;
	
	// Отходы
	Если ЗначениеЗаполнено(СтруктураШапкиДокумента.ЛабораторныйАнализ8) И СтруктураШапкиДокумента.ФизическийВес8 > 0 Тогда
		
		СтруктураШапкиДокумента.Вставить("ЛабораторныйАнализ",СтруктураШапкиДокумента.ЛабораторныйАнализ8);	
		СтруктураШапкиДокумента.Вставить("ФизическийВес",СтруктураШапкиДокумента.ФизическийВес8);
		
		ИНАГРО_Элеватор.ДвиженияПоРегиструЖурналЛабораторныхАнализов(Движения, СтруктураШапкиДокумента);
		ИНАГРО_Элеватор.ДвиженияПоРегиструФорма49(Движения, СтруктураШапкиДокумента);
		
	КонецЕсли;
	
	// Отходы 1 категории
	Если ЗначениеЗаполнено(СтруктураШапкиДокумента.ЛабораторныйАнализ9) И СтруктураШапкиДокумента.ФизическийВес9 > 0 Тогда
		
		СтруктураШапкиДокумента.Вставить("ЛабораторныйАнализ",СтруктураШапкиДокумента.ЛабораторныйАнализ9);	
		СтруктураШапкиДокумента.Вставить("ФизическийВес",СтруктураШапкиДокумента.ФизическийВес9);
		
		ИНАГРО_Элеватор.ДвиженияПоРегиструЖурналЛабораторныхАнализов(Движения, СтруктураШапкиДокумента);
		ИНАГРО_Элеватор.ДвиженияПоРегиструФорма49(Движения, СтруктураШапкиДокумента);
		
	КонецЕсли;
	
	// Отходы 2 категории
	Если ЗначениеЗаполнено(СтруктураШапкиДокумента.ЛабораторныйАнализ10) И СтруктураШапкиДокумента.ФизическийВес10 > 0 Тогда
		
		СтруктураШапкиДокумента.Вставить("ЛабораторныйАнализ", СтруктураШапкиДокумента.ЛабораторныйАнализ10);	
		СтруктураШапкиДокумента.Вставить("ФизическийВес",      СтруктураШапкиДокумента.ФизическийВес10);
		
		ИНАГРО_Элеватор.ДвиженияПоРегиструЖурналЛабораторныхАнализов(Движения, СтруктураШапкиДокумента);
		ИНАГРО_Элеватор.ДвиженияПоРегиструФорма49(Движения, СтруктураШапкиДокумента);
		
	КонецЕсли;
	
КонецПроцедуры

// Движения по регистрам приход и расход
Процедура ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоКультурам, ТаблицаПоСобственномуЗерну, ТаблицаПоступления = Неопределено, ТаблицаПоРеестрам, ТаблицаПоРеестрам_П, Отказ, Заголовок)
	
	ПровестиПоРегистрамЭлеватора(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоКультурам, ТаблицаПоРеестрам, ТаблицаПоРеестрам_П, Отказ, Заголовок);
	
	Если НЕ ВидДокумента = Перечисления.ИНАГРО_ВидыАктовОчисткиСушки.Индивидуальный  Тогда		
		
		Если ОтражатьВБухгалтерскомУчете Тогда
			СписаниеСырьяБУХ(Движения, СтруктураШапкиДокумента, ТаблицаПоСобственномуЗерну, Отказ);
			ПриходПродукцииБУХ(Движения, СтруктураШапкиДокумента, ТаблицаПоступления, Отказ);
		КонецЕсли;	
		
		Движения.Хозрасчетный.Записать();
		
		ИНАГРО_Общий.ИНАГРО_ДвиженияЗатратыОрганизации_Приход(СтруктураШапкиДокумента, Движения);
		
	КонецЕсли;	
	
КонецПроцедуры

Процедура ДвиженияПоСводнымРегистрмЭлеватора(РежимПроведения, СтруктураШапкиДокумента, Отказ, Заголовок)
	
	СтруктураДляСводныхРегистров = Новый Структура;
	
	СтруктураДляСводныхРегистров.Вставить("Дата",                 Дата);
	СтруктураДляСводныхРегистров.Вставить("Организация",          Организация);
	СтруктураДляСводныхРегистров.Вставить("Владелец",             Владелец);
	СтруктураДляСводныхРегистров.Вставить("ДоговорКонтрагента",   ДоговорКонтрагента);
	СтруктураДляСводныхРегистров.Вставить("Номенклатура",         Номенклатура);
	СтруктураДляСводныхРегистров.Вставить("Склад",                Склад);
	СтруктураДляСводныхРегистров.Вставить("Силос",                Силос);
	СтруктураДляСводныхРегистров.Вставить("МестоХранения",        МестоХранения);
	СтруктураДляСводныхРегистров.Вставить("Урожай",               Урожай);	
	СтруктураДляСводныхРегистров.Вставить("ВидХранения",          ВидХранения);
	СтруктураДляСводныхРегистров.Вставить("ВидФасовки",           Справочники.ИНАГРО_ВидыФасовки.ПустаяСсылка());	
	СтруктураДляСводныхРегистров.Вставить("Поставщик",            Справочники.Контрагенты.ПустаяСсылка());
	
	СтруктураДляСводныхРегистров.Вставить("ПобочныйПродукт",      ПобочныйПродукт);
	СтруктураДляСводныхРегистров.Вставить("ФизическийВес7",       ФизическийВес7);
	СтруктураДляСводныхРегистров.Вставить("Влажность7",           Влажность7);
	СтруктураДляСводныхРегистров.Вставить("СорнаяПримесь7",       СорнаяПримесь7);
	СтруктураДляСводныхРегистров.Вставить("ЗерноваяПримесь7",     ЗерноваяПримесь7);
	СтруктураДляСводныхРегистров.Вставить("НомерАнализа7",        НомерАнализа7);
	СтруктураДляСводныхРегистров.Вставить("ЛабораторныйАнализ7",  ЛабораторныйАнализ7);
	
	СтруктураДляСводныхРегистров.Вставить("Отходы3Категории",     Отходы3Категории);
	СтруктураДляСводныхРегистров.Вставить("ФизическийВес8",       ФизическийВес8);
	СтруктураДляСводныхРегистров.Вставить("Влажность8",           Влажность8);
	СтруктураДляСводныхРегистров.Вставить("СорнаяПримесь8",       СорнаяПримесь8);
	СтруктураДляСводныхРегистров.Вставить("ЗерноваяПримесь8",     ЗерноваяПримесь8);
	СтруктураДляСводныхРегистров.Вставить("НомерАнализа8",        НомерАнализа8);
	СтруктураДляСводныхРегистров.Вставить("ЛабораторныйАнализ8",  ЛабораторныйАнализ8);
	
	СтруктураДляСводныхРегистров.Вставить("Отходы1Категории",     Отходы1Категории);
	СтруктураДляСводныхРегистров.Вставить("ФизическийВес9",       ФизическийВес9);
	СтруктураДляСводныхРегистров.Вставить("Влажность9",           Влажность9);
	СтруктураДляСводныхРегистров.Вставить("СорнаяПримесь9",       СорнаяПримесь9);
	СтруктураДляСводныхРегистров.Вставить("ЗерноваяПримесь9",     ЗерноваяПримесь9);
	СтруктураДляСводныхРегистров.Вставить("НомерАнализа9",        НомерАнализа9);
	СтруктураДляСводныхРегистров.Вставить("ЛабораторныйАнализ9",  ЛабораторныйАнализ9);
	
	СтруктураДляСводныхРегистров.Вставить("Отходы2Категории",     Отходы2Категории);
	СтруктураДляСводныхРегистров.Вставить("ФизическийВес10",      ФизическийВес10);
	СтруктураДляСводныхРегистров.Вставить("Влажность10",          Влажность10);
	СтруктураДляСводныхРегистров.Вставить("СорнаяПримесь10",      СорнаяПримесь10);
	СтруктураДляСводныхРегистров.Вставить("ЗерноваяПримесь10",    ЗерноваяПримесь10);
	СтруктураДляСводныхРегистров.Вставить("НомерАнализа10",       НомерАнализа10);
	СтруктураДляСводныхРегистров.Вставить("ЛабораторныйАнализ10", ЛабораторныйАнализ10);
	
	СтруктураДляСводныхРегистров.Вставить("ФизическийВес",        0);
	СтруктураДляСводныхРегистров.Вставить("КоличествоМест",       0);
	СтруктураДляСводныхРегистров.Вставить("Количество",           0);
	СтруктураДляСводныхРегистров.Вставить("ЗачетныйВес",          0);
	СтруктураДляСводныхРегистров.Вставить("КодРасхода",           Перечисления.ИНАГРО_КодыРасхода.ПустаяСсылка());
	СтруктураДляСводныхРегистров.Вставить("Влажность",            0);
	СтруктураДляСводныхРегистров.Вставить("СорнаяПримесь",        0);
	СтруктураДляСводныхРегистров.Вставить("ЗерноваяПримесь",      0);
	СтруктураДляСводныхРегистров.Вставить("НомерАнализа",         СтруктураШапкиДокумента.НомерАнализа2);
	СтруктураДляСводныхРегистров.Вставить("ЛабораторныйАнализ",   Документы.ИНАГРО_ЛабораторныйАнализ.ПустаяСсылка());	
	СтруктураДляСводныхРегистров.Вставить("УбыльВесаПриСушке",    УбыльОтСушки);
	
	СтруктураДляСводныхРегистров.Вставить("Ссылка",               Ссылка);
	СтруктураДляСводныхРегистров.Вставить("Регистратор",          Ссылка);
	СтруктураДляСводныхРегистров.Вставить("ВидДокумента",         ЭтотОбъект.Метаданные().Имя);
	
	// Убыль веса при сушке
	
	Если СтруктураДляСводныхРегистров.УбыльВесаПриСушке > 0 Тогда
		
		СтруктураДляСводныхРегистров.ФизическийВес     = 0;
		СтруктураДляСводныхРегистров.ЗачетныйВес       = 0;
		
		ИНАГРО_Элеватор.ДвиженияПоРегиструФорма36СводнаяПриход(Движения, СтруктураДляСводныхРегистров);
		ИНАГРО_Элеватор.ДвиженияПоРегиструОстаткиСводнаяПриход(Движения, СтруктураДляСводныхРегистров);
		
		СтруктураДляСводныхРегистров.УбыльВесаПриСушке = 0;
		
	КонецЕсли;
	
	// Побочный продукт
	
	Если СтруктураДляСводныхРегистров.ФизическийВес7 > 0 Тогда
		
		СтруктураДляСводныхРегистров.КодРасхода        = ВернутьКодРасходаАктаОчисткиСушки(СтруктураДляСводныхРегистров.ПобочныйПродукт);
		СтруктураДляСводныхРегистров.Номенклатура      = СтруктураДляСводныхРегистров.ПобочныйПродукт;
		
		СтруктураДляСводныхРегистров.ФизическийВес     = СтруктураДляСводныхРегистров.ФизическийВес7;
		СтруктураДляСводныхРегистров.ЗачетныйВес       = СтруктураДляСводныхРегистров.ФизическийВес7;
		СтруктураДляСводныхРегистров.Влажность         = СтруктураДляСводныхРегистров.Влажность7;
		СтруктураДляСводныхРегистров.СорнаяПримесь     = СтруктураДляСводныхРегистров.СорнаяПримесь7;
		СтруктураДляСводныхРегистров.ЗерноваяПримесь   = СтруктураДляСводныхРегистров.ЗерноваяПримесь7;
		СтруктураДляСводныхРегистров.НомерАнализа      = СокрЛП(СтруктураДляСводныхРегистров.НомерАнализа7);
		
		ИНАГРО_Элеватор.ДвиженияПоРегиструФорма36СводнаяПриход(Движения, СтруктураДляСводныхРегистров);
		ИНАГРО_Элеватор.ДвиженияПоРегиструОстаткиСводнаяПриход(Движения, СтруктураДляСводныхРегистров);
		
		СтруктураДляСводныхРегистров.Номенклатура      = Номенклатура;
		
		ИНАГРО_Элеватор.ДвиженияПоРегиструФорма36СводнаяРасход(Движения, СтруктураДляСводныхРегистров);
		ИНАГРО_Элеватор.ДвиженияПоРегиструОстаткиСводнаяРасход(Движения, СтруктураДляСводныхРегистров);
		
	КонецЕсли;
	
	// Отходы первой категории
	
	Если СтруктураДляСводныхРегистров.ФизическийВес9 > 0 Тогда
		
		СтруктураДляСводныхРегистров.КодРасхода        = ВернутьКодРасходаАктаОчисткиСушки(СтруктураДляСводныхРегистров.Отходы1Категории);
		СтруктураДляСводныхРегистров.Номенклатура      = СтруктураДляСводныхРегистров.Отходы1Категории;
		
		СтруктураДляСводныхРегистров.ФизическийВес     = СтруктураДляСводныхРегистров.ФизическийВес9;
		СтруктураДляСводныхРегистров.ЗачетныйВес       = СтруктураДляСводныхРегистров.ФизическийВес9;
		СтруктураДляСводныхРегистров.Влажность         = СтруктураДляСводныхРегистров.Влажность9;
		СтруктураДляСводныхРегистров.СорнаяПримесь     = СтруктураДляСводныхРегистров.СорнаяПримесь9;
		СтруктураДляСводныхРегистров.ЗерноваяПримесь   = СтруктураДляСводныхРегистров.ЗерноваяПримесь9;
		СтруктураДляСводныхРегистров.НомерАнализа      = СокрЛП(СтруктураДляСводныхРегистров.НомерАнализа9);
		
		ИНАГРО_Элеватор.ДвиженияПоРегиструФорма36СводнаяПриход(Движения, СтруктураДляСводныхРегистров);
		ИНАГРО_Элеватор.ДвиженияПоРегиструОстаткиСводнаяПриход(Движения, СтруктураДляСводныхРегистров);
		
		СтруктураДляСводныхРегистров.Номенклатура      = Номенклатура;
		
		ИНАГРО_Элеватор.ДвиженияПоРегиструФорма36СводнаяРасход(Движения, СтруктураДляСводныхРегистров);
		ИНАГРО_Элеватор.ДвиженияПоРегиструОстаткиСводнаяРасход(Движения, СтруктураДляСводныхРегистров);
		
	КонецЕсли;
	
	// Отходы второй категории
	
	Если СтруктураДляСводныхРегистров.ФизическийВес10 > 0 Тогда
		
		СтруктураДляСводныхРегистров.КодРасхода        = ВернутьКодРасходаАктаОчисткиСушки(СтруктураДляСводныхРегистров.Отходы2Категории);
		СтруктураДляСводныхРегистров.Номенклатура      = СтруктураДляСводныхРегистров.Отходы2Категории;
		
		СтруктураДляСводныхРегистров.ФизическийВес     = СтруктураДляСводныхРегистров.ФизическийВес10;
		СтруктураДляСводныхРегистров.ЗачетныйВес       = СтруктураДляСводныхРегистров.ФизическийВес10;
		СтруктураДляСводныхРегистров.Влажность         = СтруктураДляСводныхРегистров.Влажность10;
		СтруктураДляСводныхРегистров.СорнаяПримесь     = СтруктураДляСводныхРегистров.СорнаяПримесь10;
		СтруктураДляСводныхРегистров.ЗерноваяПримесь   = СтруктураДляСводныхРегистров.ЗерноваяПримесь10;
		СтруктураДляСводныхРегистров.НомерАнализа      = СокрЛП(СтруктураДляСводныхРегистров.НомерАнализа10);
		
		ИНАГРО_Элеватор.ДвиженияПоРегиструФорма36СводнаяПриход(Движения, СтруктураДляСводныхРегистров);
		ИНАГРО_Элеватор.ДвиженияПоРегиструОстаткиСводнаяПриход(Движения, СтруктураДляСводныхРегистров);
		
		СтруктураДляСводныхРегистров.Номенклатура      = Номенклатура;
		
		ИНАГРО_Элеватор.ДвиженияПоРегиструФорма36СводнаяРасход(Движения, СтруктураДляСводныхРегистров);
		ИНАГРО_Элеватор.ДвиженияПоРегиструОстаткиСводнаяРасход(Движения, СтруктураДляСводныхРегистров);
		
	КонецЕсли;
		
	// Отходы третей категории
	
	Если СтруктураДляСводныхРегистров.ФизическийВес8 > 0 Тогда
		
		СтруктураДляСводныхРегистров.КодРасхода        = ВернутьКодРасходаАктаОчисткиСушки(СтруктураДляСводныхРегистров.Отходы3Категории);
		СтруктураДляСводныхРегистров.Номенклатура      = СтруктураДляСводныхРегистров.Отходы3Категории;
		
		СтруктураДляСводныхРегистров.ФизическийВес     = СтруктураДляСводныхРегистров.ФизическийВес8;
		СтруктураДляСводныхРегистров.ЗачетныйВес       = 0;
		СтруктураДляСводныхРегистров.Влажность         = СтруктураДляСводныхРегистров.Влажность8;
		СтруктураДляСводныхРегистров.СорнаяПримесь     = СтруктураДляСводныхРегистров.СорнаяПримесь8;
		СтруктураДляСводныхРегистров.ЗерноваяПримесь   = СтруктураДляСводныхРегистров.ЗерноваяПримесь8;
		СтруктураДляСводныхРегистров.НомерАнализа      = СокрЛП(СтруктураДляСводныхРегистров.НомерАнализа8);
		
		Если ПараметрыУчетаЭлеватора.ВестиСкладскойУчетНегодныхОтходов Тогда
			ИНАГРО_Элеватор.ДвиженияПоРегиструФорма36СводнаяПриход(Движения, СтруктураДляСводныхРегистров);
			ИНАГРО_Элеватор.ДвиженияПоРегиструОстаткиСводнаяПриход(Движения, СтруктураДляСводныхРегистров);
		КонецЕсли;
		
		Если НеСписыватьОтходыСВладельцев Тогда
			 //
		Иначе	
			СтруктураДляСводныхРегистров.Номенклатура = Номенклатура;
			ИНАГРО_Элеватор.ДвиженияПоРегиструФорма36СводнаяРасход(Движения, СтруктураДляСводныхРегистров);
			ИНАГРО_Элеватор.ДвиженияПоРегиструОстаткиСводнаяРасход(Движения, СтруктураДляСводныхРегистров);
		КонецЕсли;
		
	КонецЕсли;	
	
КонецПроцедуры

// Процедура для списания 
//
Процедура СписаниеСырьяБУХ(Движения, СтруктураШапкиДокумента, ТаблицаСырья, Отказ)
	
	// Списание товара
	
	УправлениеЗапасамиПартионныйУчет.ДвижениеПартийТоваров(ТаблицаСырья, Отказ, , );
	
КонецПроцедуры

// Процедура для оприходования 
//
Процедура ПриходПродукцииБУХ(Движения, СтруктураШапкиДокумента, ТаблицаПродукции, Отказ)
	
	Если ТаблицаПродукции.Количество() = 0 ИЛИ НЕ ОтражатьВБухгалтерскомУчете Тогда
		Возврат;
	КонецЕсли;
	
	ОперацияБУ                     = Движения["Хозрасчетный"];
	ДвиженияВыпускПродукцииУслугБУ = Движения["ВыпускПродукцииУслугБухгалтерскийУчет"];
	ТаблицаДвиженийВыпускБУ        = ДвиженияВыпускПродукцииУслугБУ.Выгрузить();
	
	Если НЕ Отказ Тогда
		
		Для Каждого Строка Из ТаблицаПродукции Цикл
			
			Если ИНАГРО_Элеватор.ОпределитьПринадлежностьКонтрагента(Строка.Владелец) Тогда
				НалоговоеНазначение_Выпуска               = Строка.НалоговоеНазначение;
				НалоговоеНазначениеДоходовИЗатрат_Выпуска = Строка.НалоговоеНазначениеДоходовИЗатрат;
			Иначе
				НалоговоеНазначение_Выпуска               = Справочники.НалоговыеНазначенияАктивовИЗатрат.ПустаяСсылка();
				НалоговоеНазначениеДоходовИЗатрат_Выпуска = Справочники.НалоговыеНазначенияАктивовИЗатрат.ПустаяСсылка();				
			КонецЕсли;
			
			СчетУчетаБУ         = Строка.СчетУчетаБУ;
			СчетЗатратТекущий   = СчетЗатрат;
			
			// Сформируем проводку.
			Если    НЕ ЗначениеЗаполнено(СчетУчетаБУ)
				ИЛИ НЕ ЗначениеЗаполнено(СчетЗатратТекущий) Тогда
				Возврат;
			КонецЕсли;
			
			НоваяПроводка = ОперацияБУ.Добавить();
			
			НоваяПроводка.Организация = Организация;
			НоваяПроводка.Период      = Дата;
			
			НоваяПроводка.СчетДт = СчетУчетаБУ;
			БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, "Номенклатура", Строка.Номенклатура);
			БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, "Склады",       Строка.Склад);
			
			// Если способ оценки ФИФО или ЛИФО и на счете ведется партионный учет,
			// то в проводке указываем в качестве партии текущий документ.
			Если ПартионныйУчетБУ Тогда
				БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, "Партии", Ссылка);
			КонецЕсли; 
			
			НоваяПроводка.Содержание = НСтр("ru='Выпуск продукции';uk='Випуск продукції'", Локализация.КодЯзыкаИнформационнойБазы());
			
			НоваяПроводка.СчетКт = СчетЗатратТекущий;
			
			Если НоваяПроводка.СчетКт.ВидыСубконто.Количество() > 0 Тогда
				НоваяПроводка.СубконтоКт[НоваяПроводка.СчетКт.ВидыСубконто[0].ВидСубконто] = СубконтоСписания1;
			КонецЕсли;
			Если НоваяПроводка.СчетКт.ВидыСубконто.Количество() > 1 Тогда
				НоваяПроводка.СубконтоКт[НоваяПроводка.СчетКт.ВидыСубконто[1].ВидСубконто] = СубконтоСписания2;
			КонецЕсли;
			Если НоваяПроводка.СчетКт.ВидыСубконто.Количество() > 2 Тогда
				НоваяПроводка.СубконтоКт[НоваяПроводка.СчетКт.ВидыСубконто[2].ВидСубконто] = СубконтоСписания3;
			КонецЕсли;
			
			НоваяПроводка.КоличествоДт = ?(НоваяПроводка.СчетДТ.Количественный, Строка.Количество, 0);
			НоваяПроводка.Сумма        = Строка.СуммаПлановая;
			
			Если  СтруктураШапкиДокумента.ЕстьНалогНаПрибыль
				И НалоговоеНазначение_Выпуска <> Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяНеХозДеятельность Тогда
				СуммаНУ = Строка.СуммаПлановая;
				НоваяПроводка.СуммаНУДт = СуммаНУ;
				НоваяПроводка.СуммаНУКт = СуммаНУ;
			КонецЕсли;
			
			НоваяПроводка.НалоговоеНазначениеДт = НалоговоеНазначение_Выпуска;
			НоваяПроводка.НалоговоеНазначениеКт = НалоговоеНазначение_Выпуска;
			
			// Отражения выпуска в регистре накопления ВыпускПродукцииУслуг
			
			СтрокаДвижения = ТаблицаДвиженийВыпускБУ.Добавить();
			СтрокаДвижения.Организация                       = Организация;
			СтрокаДвижения.Продукция                         = Строка.Номенклатура;
			СтрокаДвижения.СчетЗатрат                        = СчетЗатратТекущий;
			СтрокаДвижения.Подразделение                     = СубконтоСписания1;
			СтрокаДвижения.НоменклатурнаяГруппа              = Строка.НоменклатурнаяГруппа;
			СтрокаДвижения.СчетСписания                      = СчетУчетаБУ;
			
			Если СчетУчетаБУ.ВидыСубконто.Количество() > 0 Тогда
				СтрокаДвижения.СубконтоСписания1 = НоваяПроводка.СубконтоДт[НоваяПроводка.СчетДт.ВидыСубконто[0].ВидСубконто];
			КонецЕсли; 
			
			Если СчетУчетаБУ.ВидыСубконто.Количество() > 1 Тогда
				СтрокаДвижения.СубконтоСписания2 = НоваяПроводка.СубконтоДт[НоваяПроводка.СчетДт.ВидыСубконто[1].ВидСубконто];
			КонецЕсли;
			
			Если СчетУчетаБУ.ВидыСубконто.Количество() > 2 Тогда
				СтрокаДвижения.СубконтоСписания3 = НоваяПроводка.СубконтоДт[НоваяПроводка.СчетДт.ВидыСубконто[2].ВидСубконто];
			КонецЕсли;
			
			СтрокаДвижения.Количество                        = Строка.Количество;
			СтрокаДвижения.ПлановаяСтоимость                 = Строка.СуммаПлановая;
			СтрокаДвижения.НалоговоеНазначениеДоходовИЗатрат = НалоговоеНазначение_Выпуска;
			
		КонецЦикла;
		
		ДвиженияВыпускПродукцииУслугБУ.мПериод = Дата;
		ДвиженияВыпускПродукцииУслугБУ.мТаблицаДвижений = ТаблицаДвиженийВыпускБУ;		
		ДвиженияВыпускПродукцииУслугБУ.ДобавитьДвижение();
		
	КонецЕсли;	
	
	Движения.Хозрасчетный.ВыполнитьДействияПередЗаписьюДвижений();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ПодготовитьПараметрыУчетнойПолитики(СтруктураШапкиДокумента, Отказ)

	СпособОценкиМПЗ  = УчетнаяПолитика.СпособОценкиМПЗ(СтруктураШапкиДокумента.Организация, СтруктураШапкиДокумента.Дата);
	ПартионныйУчетБУ = (СпособОценкиМПЗ = Перечисления.СпособыОценки.ФИФО) ИЛИ (СпособОценкиМПЗ = Перечисления.СпособыОценки.ЛИФО);

	СтруктураШапкиДокумента.Вставить("ЕстьНалогНаПрибыль",               Истина);
	СтруктураШапкиДокумента.Вставить("ЕстьНДС",                          Истина);
	СтруктураШапкиДокумента.Вставить("РазрешитьУчетУслугБезПлановыхЦен", Истина); 	

КонецПроцедуры

Процедура ПодготовитьПараметрыУчетаЭлеватора()

	ПараметрыУчетаЭлеватора      = ИНАГРО_Элеватор.ПолучитьПараметрыУчетаЭлеватора(Дата);
	СобственноеПодразделение     = ИНАГРО_Элеватор.ПолучитьДополнительныйРеквизитКонтрагента(Владелец, "СобственноеПодразделение");
	НеСписыватьОтходыСВладельцев = ИНАГРО_Элеватор.ПолучитьНастройкуНеСписыватьОтходыСВладельцев(ЭтотОбъект);
	
КонецПроцедуры

Процедура СформироватьТаблицуУслуг(СтруктураШапкиДокумента, ТаблицаПоУслугам, Отказ, Заголовок)
	
	ТаблицаПоУслугам.Колонки.Добавить("ДатаРасчета");
	ТаблицаПоУслугам.Колонки.Добавить("Ссылка"); 
	ТаблицаПоУслугам.Колонки.Добавить("Организация");
	ТаблицаПоУслугам.Колонки.Добавить("Контрагент");
	ТаблицаПоУслугам.Колонки.Добавить("ДоговорКонтрагента");
	ТаблицаПоУслугам.Колонки.Добавить("Номенклатура");
	ТаблицаПоУслугам.Колонки.Добавить("Культура");
	ТаблицаПоУслугам.Колонки.Добавить("Склад");
	ТаблицаПоУслугам.Колонки.Добавить("ВидХранения");
	ТаблицаПоУслугам.Колонки.Добавить("Урожай");
	ТаблицаПоУслугам.Колонки.Добавить("Количество");
	ТаблицаПоУслугам.Колонки.Добавить("Стоимость");
	ТаблицаПоУслугам.Колонки.Добавить("ДокументРасчета");
	
	Номенклатура_Вентилирование = ИНАГРО_Элеватор.ПолучитьПредопределеннуюНоменклатуру("Вентилирование");
	Номенклатура_Сушка          = ИНАГРО_Элеватор.ПолучитьПредопределеннуюНоменклатуру("Сушка");
	Номенклатура_Очистка        = ИНАГРО_Элеватор.ПолучитьПредопределеннуюНоменклатуру("Очистка");

	Для Каждого СтрокаТабличнойЧасти Из РасчетПоВладельцам Цикл
		
		Если  СтрокаТабличнойЧасти.ЦенаСушки <> 0
			И СтрокаТабличнойЧасти.КоличествоСушки <> 0
			И НЕ СтрокаТабличнойЧасти.ВыставленыУслугиСушки Тогда 	
			
			НоваяСтрока = ТаблицаПоУслугам.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТабличнойЧасти);
			НоваяСтрока.Контрагент  = СтрокаТабличнойЧасти.Владелец; 
			НоваяСтрока.Склад       = ?(ЗначениеЗаполнено(СтруктураШапкиДокумента.Склад),  СтруктураШапкиДокумента.Склад,  СтрокаТабличнойЧасти.РеестрТТН.Склад);
			НоваяСтрока.Урожай      = ?(ЗначениеЗаполнено(СтруктураШапкиДокумента.Урожай), СтруктураШапкиДокумента.Урожай, СтрокаТабличнойЧасти.РеестрТТН.Урожай);
			НоваяСтрока.Культура    = СтрокаТабличнойЧасти.Номенклатура;
			Если СтрокаТабличнойЧасти.Вентилирование И ЗначениеЗаполнено(Номенклатура_Вентилирование) Тогда
				НоваяСтрока.Номенклатура = Номенклатура_Вентилирование;
			ИначеЕсли ЗначениеЗаполнено(Номенклатура_Сушка) Тогда
				НоваяСтрока.Номенклатура = Номенклатура_Сушка;
			КонецЕсли;
			НоваяСтрока.Количество  = СтрокаТабличнойЧасти.КоличествоСушки;
			НоваяСтрока.Стоимость   = СтрокаТабличнойЧасти.СуммаСушки;
			
		КонецЕсли;
		
		Если  СтрокаТабличнойЧасти.ЦенаОчистки <> 0
			И СтрокаТабличнойЧасти.КоличествоОчистки <> 0
			И НЕ СтрокаТабличнойЧасти.ВыставленыУслугиОчистки Тогда 
			
			НоваяСтрока = ТаблицаПоУслугам.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТабличнойЧасти);
			НоваяСтрока.Контрагент   = СтрокаТабличнойЧасти.Владелец;
			НоваяСтрока.Склад        = ?(ЗначениеЗаполнено(СтруктураШапкиДокумента.Склад),  СтруктураШапкиДокумента.Склад,  СтрокаТабличнойЧасти.РеестрТТН.Склад);
			НоваяСтрока.Урожай       = ?(ЗначениеЗаполнено(СтруктураШапкиДокумента.Урожай), СтруктураШапкиДокумента.Урожай, СтрокаТабличнойЧасти.РеестрТТН.Урожай);
			НоваяСтрока.Культура     = СтрокаТабличнойЧасти.Номенклатура;
			НоваяСтрока.Номенклатура = Номенклатура_Очистка;
			НоваяСтрока.Количество   = СтрокаТабличнойЧасти.КоличествоОчистки;
			НоваяСтрока.Стоимость    = СтрокаТабличнойЧасти.СуммаОчистки;
			
		КонецЕсли;
		
	КонецЦикла;	
	
	ТаблицаПоУслугам.ЗаполнитьЗначения(Дата,        "ДатаРасчета");
	ТаблицаПоУслугам.ЗаполнитьЗначения(Ссылка,      "Ссылка"); 
	ТаблицаПоУслугам.ЗаполнитьЗначения(Организация, "Организация");
	ТаблицаПоУслугам.ЗаполнитьЗначения(Ссылка,      "ДокументРасчета");
	
	ТаблицаПоУслугам.Свернуть("ДатаРасчета, Ссылка, Организация, Контрагент, ДоговорКонтрагента, Номенклатура, Культура, Склад, ВидХранения, Урожай, ДокументРасчета", "Количество, Стоимость");
	
КонецПроцедуры

Функция ПолучитьСкладГодныхОтходов()
	
	Если ЗначениеЗаполнено(СкладГодныхОтходов) Тогда
		Возврат СкладГодныхОтходов;
	КонецЕсли;
	
	Возврат Склад;
	
КонецФункции

Функция ВернутьКодРасходаАктаОчисткиСушки(Культура)
	
	КодРасходаАктаОчисткиСушки = Перечисления.ИНАГРО_КодыРасхода.Культура;
	ВидТМЦ                     = ИНАГРО_Элеватор.ПолучитьДополнительныйРеквизитНоменклатуры(Культура, "ВидТМЦ");
	
	Если ВидТМЦ = Перечисления.ИНАГРО_ВидыТМЦ.Побочный Тогда
		КодРасходаАктаОчисткиСушки = Перечисления.ИНАГРО_КодыРасхода.Побочный;
	ИначеЕсли ВидТМЦ=Перечисления.ИНАГРО_ВидыТМЦ.Кат1 Тогда
		КодРасходаАктаОчисткиСушки = Перечисления.ИНАГРО_КодыРасхода.Кат1;
	ИначеЕсли ВидТМЦ=Перечисления.ИНАГРО_ВидыТМЦ.Кат2 Тогда
		КодРасходаАктаОчисткиСушки = Перечисления.ИНАГРО_КодыРасхода.Кат2;
	ИначеЕсли ВидТМЦ = Перечисления.ИНАГРО_ВидыТМЦ.Кат3 Тогда
		КодРасходаАктаОчисткиСушки = Перечисления.ИНАГРО_КодыРасхода.Кат3;
	КонецЕсли;
	
	Возврат КодРасходаАктаОчисткиСушки;
	
КонецФункции

#КонецОбласти

мВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();

#КонецЕсли