#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды 
	
	ИНАГРО_КонтрольПроцессов.ПроверкаРазрешенийПередОткрытием(ЭтотОбъект, Отказ);
	
	Если Параметры.Ключ.Пустая() Тогда
		ПодготовитьФормуНаСервере();		
	КонецЕсли;
	
	// Уведомим о появлении функционала рабочей даты
	ЭтаФорма.НастройкиПредупреждений = ОбщегоНазначенияБП.НастройкиПредупрежденийОбИзменениях("РабочаяДатаИзДокумента");
	 
	// Показываем, если это новый документ и сама рабочая дата еще не установлена.
	ЭтаФорма.НастройкиПредупреждений.РабочаяДатаИзДокумента = ЭтаФорма.НастройкиПредупреждений.РабочаяДатаИзДокумента
	 	И ЭтаФорма.Параметры.Ключ.Пустая()
	  	И НЕ ЗначениеЗаполнено(БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("РабочаяДата"));
	
	УстановитьПараметрыВыбораВидаДокумента();
	
	// Если форма вызвана в режиме смена вида операции - модифицируем сразу при открытии, 
	// чтобы можно было подтвердить или отказаться от изменения путем сохранения или 
	// отказа от сохранения документа.
	Если Параметры.Свойство("ИзменитьВидОперации")
		И Параметры.ИзменитьВидОперации Тогда
		
		// Не кэшируем переменную Объект, т.к. может вызываться Форма.ИзменитьРеквизиты(),
		// которая меняет Объект.
		Объект.ВидОперации = Параметры.ЗначенияЗаполнения.ВидОперации;
		
		УстановитьЗаголовокФормы();		
		УправлениеФормойНаСервере();
		
		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "СозданЛабораторныйАнализ" ИЛИ ИмяСобытия = "ИзмененЛабораторныйАнализ" Тогда
		
		Если  ТипЗнч(Параметр) = Тип("Структура") 
			И Параметр.Свойство("ИдентификаторВызывающейФормы")
			И Параметр.ИдентификаторВызывающейФормы = УникальныйИдентификатор Тогда			
			
			Если ИНАГРО_Элеватор.ЛабораторныйАнализПроверкаЗаполнения(Параметр.ДокументСсылка, ПолучитьПараметрыДляПроверкиЗаполнения()) Тогда
				Объект["ЛабораторныйАнализ" + Индекс] = Параметр.ДокументСсылка;
				ЛабораторныйАнализПриИзмененииНаСервере = "ЛабораторныйАнализ" + Индекс + "ПриИзмененииНаСервере()"; 
				Выполнить (ЛабораторныйАнализПриИзмененииНаСервере);
				Модифицированность = Истина;
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		ОбщегоНазначенияБПКлиент.ОбработкаОповещенияФормыДокумента(ЭтаФорма, Объект.Ссылка, ИмяСобытия, Параметр, Источник);
	КонецЕсли;	
		
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	ПодготовитьФормуНаСервере();

КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	УстановитьЗаголовокФормы();	
			
	УстановитьСостояниеДокумента();
	
КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	Если НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДатаДокумента) Тогда
		// Изменение времени не влияет на поведение документа.
		ТекущаяДатаДокумента = Объект.Дата;
		Возврат;
	КонецЕсли;
	
	// Общие проверки условий по датам.
	ТребуетсяВызовСервера = ИНАГРО_ЭлеваторКлиент.ТребуетсяВызовСервераПриИзмененииДатыДокумента(Объект.Дата, ТекущаяДатаДокумента);

	// Если определили, что изменение даты может повлиять на какие-либо параметры, 
	// то передаем обработку на сервер.
	Если ТребуетсяВызовСервера Тогда
		ДатаПриИзмененииНаСервере();
	КонецЕсли;
	
	// Запомним новую дату документа.
	ТекущаяДатаДокумента = Объект.Дата;

КонецПроцедуры

&НаСервере
Процедура ДатаПриИзмененииНаСервере()

	УстановитьФункциональныеОпцииФормы();
	
	УправлениеФормойНаСервере();

КонецПроцедуры

&НаКлиенте
Процедура ВидДокументаПриИзменении(Элемент)
	
	УстановитьЗаголовокФормы();
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)

	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		ОрганизацияПриИзмененииНаСервере();
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()
	
	Руководители = ИНАГРО_Элеватор.ОтветственныеЛицаОрганизации(Объект.Организация, Объект.Дата);
	Объект.НачальникОхраны = Руководители.НачальникОхраны;

	УстановитьФункциональныеОпцииФормы();	
	
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ОтражатьВБухгалтерскомУчетеПриИзменении(Элемент)
	
	Если Объект.РасчетПоВладельцам.Количество() > 0 Тогда
		
		Если Объект.ОтражатьВБухгалтерскомУчете Тогда		
			ТекстВопроса = НСтр("ru='Установить счета бухгалтерского учета в соответствии со значениями по умолчанию?';uk='Встановити рахунки бухгалтерського обліку відповідно до значень за замовчуванням?'");
		Иначе
			ТекстВопроса = НСтр("ru='Очистить счета бухгалтерского учета?';uk='Очистити рахунки бухгалтерського обліку?'");
		КонецЕсли;
		
		Оповещение = Новый ОписаниеОповещения("ОтражатьВБухгалтерскомУчетеПриИзмененииЗавершение", ЭтотОбъект, Параметры);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);	
		
		Возврат;
		
	КонецЕсли;	
	
	УправлениеФормой(ЭтаФорма); 
	
КонецПроцедуры

&НаКлиенте
Процедура ОтражатьВБухгалтерскомУчетеПриИзмененииЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		УправлениеФормой(ЭтаФорма);
		Возврат;
	КонецЕсли; 	
	
	ЗаполнитьСчетаУчетаВТабличнойЧасти();
	
	УправлениеФормой(ЭтаФорма); 
   
КонецПроцедуры

&НаКлиенте
Процедура ВладелецПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.Владелец) Тогда
		
		Объект.ОтражатьПоЗатратам = ИНАГРО_Элеватор.ОпределитьПринадлежностьКонтрагента(Объект.Владелец);

		ПараметрыОтбораДоговора = ПолучитьПараметрыДляДоговоров();
		
		ИНАГРО_ЭлеваторЗаполнениеДокументов.ПриИзмененииЗначенияКонтрагента(Объект.Дата, Объект.Организация, Объект.Владелец, Объект.ДоговорКонтрагента, ПараметрыОтбораДоговора);
		
		ВладелецПриИзмененииНаСервере();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВладелецПриИзмененииНаСервере()
	
	ЗаполнитьСчетаУчетаВТабличнойЧасти();
	
	УстановитьФункциональныеОпцииФормы();
	
	УправлениеФормой(ЭтаФорма); 	
	
КонецПроцедуры

&НаКлиенте
Процедура СкладПриИзменении(Элемент)

	Если ЗначениеЗаполнено(Объект.Склад) Тогда
		СкладПриИзмененииНаСервере();
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура СкладПриИзмененииНаСервере()
	
	Объект.МестоХранения = Справочники.ИНАГРО_МестаХранения.ПустаяСсылка();

	ЗаполнитьСчетаУчетаВТабличнойЧасти();
	
	УстановитьФункциональныеОпцииФормы(); 	
	
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ВидХраненияПриИзменении(Элемент)
	
	ПараметрыОтбораДоговора = ПолучитьПараметрыДляДоговоров();
	
	ИНАГРО_ЭлеваторЗаполнениеДокументов.ПриИзмененииЗначенияКонтрагента(Объект.Дата, Объект.Организация, Объект.Владелец, Объект.ДоговорКонтрагента, ПараметрыОтбораДоговора);

КонецПроцедуры

&НаКлиенте
Процедура ДоговорКонтрагентаПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		ДоговорКонтрагентаПриИзмененииНаСервере();
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ДоговорКонтрагентаПриИзмененииНаСервере()
	
	Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента.ВидВзаиморасчетов) Тогда
		НайденВидХранения = Справочники.ИНАГРО_ВидыХранения.НайтиПоРеквизиту("ТипДоговора", Объект.ДоговорКонтрагента.ВидВзаиморасчетов); 
		Если НайденВидХранения <> Неопределено Тогда
			Объект.ВидХранения = НайденВидХранения.Ссылка;
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НоменклатураПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.Номенклатура) Тогда			
		
		ТекстВопроса = НСтр("ru='Установить показатели, до которых необходимо произвести очистку сушку, равными базисным?';uk='Встановити показники, до яких необхідно провести очищення сушку, рівними базисним?'");
		Оповещение = Новый ОписаниеОповещения("НоменклатураПриИзмененииЗавершение", ЭтотОбъект, Параметры);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);	
		
	КонецЕсли;	
	
	Если НЕ ЗначениеЗаполнено(Объект.Отходы3Категории) Тогда		
		Объект.Отходы3Категории = НегодныеОтходы();	
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура НоменклатураПриИзмененииЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ВидКультуры = ИНАГРО_Элеватор.ПолучитьДополнительныйРеквизитНоменклатуры(Объект.Номенклатура, "ВидКультуры");
	
	ЗначенияБазисов = ИНАГРО_Элеватор.ПолучитьБазисныеЗначения(ВидКультуры, Объект.Дата, Объект.Организация, Объект.Владелец, Объект.ДоговорКонтрагента, Объект.Склад);
	
	Объект.Влажность2       = ЗначенияБазисов.Влажность;
	Объект.СорнаяПримесь2   = ЗначенияБазисов.СорнаяПримесь;
	Объект.ЗерноваяПримесь2 = ЗначенияБазисов.ЗерноваяПримесь;
	
	Объект.Влажность0       = ЗначенияБазисов.Влажность;
	Объект.СорнаяПримесь0   = ЗначенияБазисов.СорнаяПримесь;
	Объект.ЗерноваяПримесь0 = ЗначенияБазисов.ЗерноваяПримесь; 
	   
КонецПроцедуры

&НаКлиенте
Процедура УрожайПриИзменении(Элемент)
	
	ПараметрыОтбораДоговора = ПолучитьПараметрыДляДоговоров();
	
	ИНАГРО_ЭлеваторЗаполнениеДокументов.ПриИзмененииЗначенияКонтрагента(Объект.Дата, Объект.Организация, Объект.Владелец, Объект.ДоговорКонтрагента, ПараметрыОтбораДоговора);

КонецПроцедуры

&НаКлиенте
Процедура УбыльОтСушкиПриИзменении(Элемент)
	
	РаспределитьУбыльОтСушки();
	
	РассчитатьИтоги();

КонецПроцедуры

&НаКлиенте
Процедура УбыльОтОчисткиПриИзменении(Элемент)
	
	Объект.ФизическийВес8 = Объект.УбыльОтОчистки;
	
	РаспределитьОтходы3Кат();
	
	РассчитатьИтоги();

КонецПроцедуры

&НаКлиенте
Процедура ЛабораторныйАнализ1ПриИзменении(Элемент)
		
	ЛабораторныйАнализ1ПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ЛабораторныйАнализ1ПриИзмененииНаСервере()
	
	ЛабораторныйАнализ1 = Объект.ЛабораторныйАнализ1;
	
	Объект.НомерАнализа1    = ИНАГРО_Элеватор.ПолучитьНомерЛабАнализаИзЛабАнализа(ЛабораторныйАнализ1); 
	Объект.Влажность1       = ЛабораторныйАнализ1.Влажность;
	Объект.СорнаяПримесь1   = ЛабораторныйАнализ1.СорнаяПримесь;
	Объект.ЗерноваяПримесь1 = ЛабораторныйАнализ1.ЗерноваяПримесь;	
																		   
	УстановитьНомераАнализов();	
		
КонецПроцедуры

&НаКлиенте
Процедура ЛабораторныйАнализ2ПриИзменении(Элемент)
		
	ЛабораторныйАнализ2ПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ЛабораторныйАнализ2ПриИзмененииНаСервере()
	
	ЛабораторныйАнализ2 = Объект.ЛабораторныйАнализ2;
	
	Объект.НомерАнализа2    = ИНАГРО_Элеватор.ПолучитьНомерЛабАнализаИзЛабАнализа(ЛабораторныйАнализ2);
	Объект.Влажность2       = ЛабораторныйАнализ2.Влажность;
	Объект.СорнаяПримесь2   = ЛабораторныйАнализ2.СорнаяПримесь;
	Объект.ЗерноваяПримесь2 = ЛабораторныйАнализ2.ЗерноваяПримесь;	
																		   
	УстановитьНомераАнализов();	
	
КонецПроцедуры

&НаКлиенте
Процедура ЛабораторныйАнализ7ПриИзменении(Элемент)
		
	ЛабораторныйАнализ7ПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ЛабораторныйАнализ7ПриИзмененииНаСервере()
	
	ЛабораторныйАнализ7 = Объект.ЛабораторныйАнализ7;
	
	Объект.НомерАнализа7    = ИНАГРО_Элеватор.ПолучитьНомерЛабАнализаИзЛабАнализа(ЛабораторныйАнализ7);
	Объект.Влажность7       = ЛабораторныйАнализ7.Влажность;
	Объект.СорнаяПримесь7   = ЛабораторныйАнализ7.СорнаяПримесь;
	Объект.ЗерноваяПримесь7 = ЛабораторныйАнализ7.ЗерноваяПримесь;	
	
КонецПроцедуры

&НаКлиенте
Процедура ЛабораторныйАнализ8ПриИзменении(Элемент)
		
	ЛабораторныйАнализ8ПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ЛабораторныйАнализ8ПриИзмененииНаСервере()
	
	ЛабораторныйАнализ8 = Объект.ЛабораторныйАнализ8;
	
	Объект.НомерАнализа8    = ИНАГРО_Элеватор.ПолучитьНомерЛабАнализаИзЛабАнализа(ЛабораторныйАнализ8);
	Объект.Влажность8       = ЛабораторныйАнализ8.Влажность;
	Объект.СорнаяПримесь8   = ЛабораторныйАнализ8.СорнаяПримесь;
	Объект.ЗерноваяПримесь8 = ЛабораторныйАнализ8.ЗерноваяПримесь;	
	
КонецПроцедуры

&НаКлиенте
Процедура ЛабораторныйАнализ9ПриИзменении(Элемент)
		
	ЛабораторныйАнализ9ПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ЛабораторныйАнализ9ПриИзмененииНаСервере()
	
	ЛабораторныйАнализ9 = Объект.ЛабораторныйАнализ9;
	
	Объект.НомерАнализа9       = ИНАГРО_Элеватор.ПолучитьНомерЛабАнализаИзЛабАнализа(ЛабораторныйАнализ9);
	Объект.Влажность9          = ЛабораторныйАнализ9.Влажность;
	Объект.СорнаяПримесь9      = ЛабораторныйАнализ9.СорнаяПримесь;
	Объект.ЗерноваяПримесь9    = ЛабораторныйАнализ9.ЗерноваяПримесь;	
	
КонецПроцедуры

&НаКлиенте
Процедура ЛабораторныйАнализ10ПриИзменении(Элемент)
		
	ЛабораторныйАнализ10ПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ЛабораторныйАнализ10ПриИзмененииНаСервере()
	
	ЛабораторныйАнализ10 = Объект.ЛабораторныйАнализ10;
	
	Объект.НомерАнализа10    = ИНАГРО_Элеватор.ПолучитьНомерЛабАнализаИзЛабАнализа(ЛабораторныйАнализ10);
	Объект.Влажность10       = ЛабораторныйАнализ10.Влажность;
	Объект.СорнаяПримесь10   = ЛабораторныйАнализ10.СорнаяПримесь;
	Объект.ЗерноваяПримесь10 = ЛабораторныйАнализ10.ЗерноваяПримесь;																		   
	
КонецПроцедуры

&НаКлиенте
Процедура ЛабораторныйАнализНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыОтбора = Новый Структура;
	
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		ПараметрыОтбора.Вставить("Организация",        Объект.Организация);		
	КонецЕсли;	
	Если ЗначениеЗаполнено(Объект.Владелец) Тогда
		ПараметрыОтбора.Вставить("Владелец",           Объект.Владелец);
	Иначе
		 ПараметрыОтбора.Вставить("Владелец",          СобственныйКонтрагент);
	КонецЕсли;	
	Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		ПараметрыОтбора.Вставить("ДоговорКонтрагента", Объект.ДоговорКонтрагента);		
	КонецЕсли;	
	Если ЗначениеЗаполнено(Объект.Склад) Тогда
		ПараметрыОтбора.Вставить("Склад",              Объект.Склад);
	КонецЕсли;	
	Если ЗначениеЗаполнено(Объект.ВидХранения) Тогда
		ПараметрыОтбора.Вставить("ВидХранения",        Объект.ВидХранения);
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(Объект.Номенклатура) Тогда
		ПараметрыОтбора.Вставить("Номенклатура",       Объект.Номенклатура);
	КонецЕсли;	
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Отбор",  ПараметрыОтбора);
	ПараметрыФормы.Вставить("Ссылка", Объект.Ссылка);
	
	ОткрытьФорму("Документ.ИНАГРО_ЛабораторныйАнализ.Форма.ФормаВыбора", ПараметрыФормы, Элемент, УникальныйИдентификатор, , , , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ЛабораторныйАнализОтходыИПобочныйПродуктНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыОтбора = Новый Структура;
	
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		ПараметрыОтбора.Вставить("Организация",        Объект.Организация);		
	КонецЕсли;	
	Если ЗначениеЗаполнено(Объект.Владелец) Тогда
		ПараметрыОтбора.Вставить("Владелец",           Объект.Владелец);
	Иначе
		 ПараметрыОтбора.Вставить("Владелец",          СобственныйКонтрагент);
	КонецЕсли;	
	Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		ПараметрыОтбора.Вставить("ДоговорКонтрагента", Объект.ДоговорКонтрагента);		
	КонецЕсли;	
	Если ЗначениеЗаполнено(Объект.Склад) Тогда
		ПараметрыОтбора.Вставить("Склад",              Объект.Склад);
	КонецЕсли;	
	Если ЗначениеЗаполнено(Объект.ВидХранения) Тогда
		ПараметрыОтбора.Вставить("ВидХранения",        Объект.ВидХранения);
	КонецЕсли;	
	
	Если ТекущийЭлемент = Элементы.ЛабораторныйАнализ7 Тогда
		Если ЗначениеЗаполнено(Объект.Номенклатура) Тогда
			ПараметрыОтбора.Вставить("Номенклатура", Объект.ПобочныйПродукт);
		КонецЕсли;
	ИначеЕсли ТекущийЭлемент = Элементы.ЛабораторныйАнализ8 Тогда 
		Если ЗначениеЗаполнено(Объект.Номенклатура) Тогда
			ПараметрыОтбора.Вставить("Номенклатура", Объект.Отходы3Категории);
		КонецЕсли;
	ИначеЕсли ТекущийЭлемент = Элементы.ЛабораторныйАнализ9 Тогда 
		Если ЗначениеЗаполнено(Объект.Номенклатура) Тогда
			ПараметрыОтбора.Вставить("Номенклатура", Объект.Отходы1Категории);
		КонецЕсли;
	ИначеЕсли ТекущийЭлемент = Элементы.ЛабораторныйАнализ10 Тогда 
		Если ЗначениеЗаполнено(Объект.Номенклатура) Тогда
			ПараметрыОтбора.Вставить("Номенклатура", Объект.Отходы2Категории);
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Отбор",  ПараметрыОтбора);
	ПараметрыФормы.Вставить("Ссылка", Объект.Ссылка);
	
	ОткрытьФорму("Документ.ИНАГРО_ЛабораторныйАнализ.Форма.ФормаВыбора", ПараметрыФормы, Элемент, УникальныйИдентификатор, , , , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры

&НаКлиенте
Процедура ПроцентПобочногоПродуктаПриИзменении(Элемент)
	
	ПроцентОтходов3Категории = ПолучитьПроцентВыходаНегодныхОтходов();
	
КонецПроцедуры

&НаКлиенте
Процедура ПроцентОтходов1КатегорииПриИзменении(Элемент)
	
	ПроцентОтходов3Категории = ПолучитьПроцентВыходаНегодныхОтходов();

КонецПроцедуры

&НаКлиенте
Процедура ПроцентОтходов2КатегорииПриИзменении(Элемент)
	
	ПроцентОтходов3Категории = ПолучитьПроцентВыходаНегодныхОтходов();

КонецПроцедуры

&НаКлиенте
Процедура ФизическийВес7ПриИзменении(Элемент)
	
	ФизическийВес7ПриИзмененииНаСервере();

КонецПроцедуры

&НаСервере
Процедура ФизическийВес7ПриИзмененииНаСервере()
	
	РаспределитьПобочныйПродукт();
	
	РассчитатьИтоги();

КонецПроцедуры

&НаКлиенте
Процедура ФизическийВес8ПриИзменении(Элемент)
	
	Объект.УбыльОтОчистки = Объект.ФизическийВес8;
	
	ФизическийВес8ПриИзмененииНаСервере();

КонецПроцедуры

&НаСервере
Процедура ФизическийВес8ПриИзмененииНаСервере()
		
	РаспределитьОтходы3Кат();
	
	РассчитатьИтоги();

КонецПроцедуры

&НаКлиенте
Процедура ФизическийВес9ПриИзменении(Элемент)
	
	Если Объект.ФизическийВес9 > 0 Тогда
		Элементы.РасчетПоВладельцамФизическийВес31.Видимость = Истина;		
	Иначе
		Элементы.РасчетПоВладельцамФизическийВес31.Видимость = Ложь;
	КонецЕсли;
	
	ФизическийВес9ПриИзмененииНаСервере();

КонецПроцедуры

&НаСервере
Процедура ФизическийВес9ПриИзмененииНаСервере()
	
	РаспределитьОтходы1Кат();
	
	РассчитатьИтоги();

КонецПроцедуры

&НаКлиенте
Процедура ФизическийВес10ПриИзменении(Элемент)
	
	Если Объект.ФизическийВес10 > 0 Тогда
		Элементы.РасчетПоВладельцамФизическийВес32.Видимость = Истина;		
	Иначе
		Элементы.РасчетПоВладельцамФизическийВес32.Видимость = Ложь;
	КонецЕсли;
		
	ФизическийВес10ПриИзмененииНаСервере();

КонецПроцедуры

&НаСервере
Процедура ФизическийВес10ПриИзмененииНаСервере()
		
	РаспределитьОтходы2Кат();
	
	РассчитатьИтоги();

КонецПроцедуры

&НаКлиенте
Процедура СорнаяПримесь7ПриИзменении(Элемент)
	
	Объект.ЗерноваяПримесь7 = 100 - Объект.СорнаяПримесь7;

КонецПроцедуры

&НаКлиенте
Процедура СорнаяПримесь8ПриИзменении(Элемент)
	
	Объект.ЗерноваяПримесь8 = 100 - Объект.СорнаяПримесь8;

КонецПроцедуры

&НаКлиенте
Процедура СорнаяПримесь9ПриИзменении(Элемент)
	
	Объект.ЗерноваяПримесь9 = 100 - Объект.СорнаяПримесь9;

КонецПроцедуры

&НаКлиенте
Процедура СорнаяПримесь10ПриИзменении(Элемент)
	
	Объект.ЗерноваяПримесь10 = 100 - Объект.СорнаяПримесь10;

КонецПроцедуры

&НаКлиенте
Процедура СпособРасчетаКатегорийныхОтходовПриИзменении(Элемент)
	
	Если Объект.СпособРасчетаКатегорийныхОтходов = ПредопределенноеЗначение("Перечисление.ИНАГРО_СпособыРасчетаКатегорийныхОтходов.УказатьВручную") Тогда		
		Объект.ПроцентПобочногоПродукта = 0;
		Объект.ПроцентОтходов1Категории = 0;
		Объект.ПроцентОтходов2Категории = 0;		
	КонецЕсли;
	
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура НомерСкладаДоПриИзменении(Элемент)
	
	Если СокрЛП(Объект.НомерСклада) = "" Тогда
		Объект.НомерСклада = Объект.НомерСкладаДо;
	КонецЕсли;

КонецПроцедуры 

&НаКлиенте
Процедура ВидОперацииПриИзменении(Элемент)
		
	Если ЗначениеЗаполнено(Объект.ВидОперации) Тогда
		ВидОперацииПриИзмененииНаСервере()
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура ВидОперацииПриИзмененииНаСервере()
		
	Если Объект.ВидДокумента = Перечисления.ИНАГРО_ВидыАктовОчисткиСушки.Индивидуальный Тогда
		Если НЕ ИспользоватьСистемуКонтроляКачестваПартийЗерна Тогда 
			Объект.ВидДокумента = Перечисления.ИНАГРО_ВидыАктовОчисткиСушки.Плановый;
			ТекстСообщения = НСтр("ru='Данная операция может быть использована только при включенной системе контроля качества зерна!';uk='Дана операція може бути використана тільки при включеній системі контролю якості зерна!'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения); 			
		КонецЕсли;	
	КонецЕсли;	
	
	УстановитьЗаголовокФормы();

	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура СчетЗатратПриИзменении(Элемент)
	
	УстановитьЗаголовкиИДоступностьСубконто(ЭтаФорма, Объект.СчетЗатрат, , "Списания");
	
	ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3",
		"СубконтоСписания1", "СубконтоСписания2", "СубконтоСписания3");
	ПоляОбъекта.Вставить("Организация", Объект.Организация);
	БухгалтерскийУчетКлиентСервер.ПриИзмененииСчета(Объект.СчетЗатрат, Объект, ПоляОбъекта);
	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "Списания", "СчетЗатрат");
	
	ПроверитьНалоговоеНазначениеДоходовИЗатрат();
	
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура СчетЗатратОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = БухгалтерскийУчетКлиент.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение);

КонецПроцедуры

&НаКлиенте
Процедура СубконтоСписанияПриИзменении(Элемент)

	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "Списания", "СчетЗатрат");
	
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура СубконтоСписанияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	СписокПараметров = СписокПараметровВыбораСубконто(ЭтаФорма, Объект, "СубконтоСписания%Индекс%", "СчетЗатрат");
	ОбщегоНазначенияБПКлиент.НачалоВыбораЗначенияСубконто(ЭтаФорма, Элемент, СтандартнаяОбработка, СписокПараметров);

КонецПроцедуры

#Область ДействияПанелиРасчетПоВладельцам

&НаКлиенте
Процедура УдалитьПустыеСтроки(Команда)
	
	УдалитьПустыеСтрокиНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура УдалитьПустыеСтрокиНаСервере()
	
	НомерСтроки = Объект.РасчетПоВладельцам.Количество() - 1;
	
	Пока НомерСтроки >= 0 Цикл
		СтрокаТабличнойЧасти = Объект.РасчетПоВладельцам.Получить(НомерСтроки);
		Если (СтрокаТабличнойЧасти.ФизическийВес21 + СтрокаТабличнойЧасти.ФизическийВес3 + 
			  СтрокаТабличнойЧасти.ФизическийВес31 + СтрокаТабличнойЧасти.ФизическийВес32 + 
			  СтрокаТабличнойЧасти.УбыльОтСушки) = 0 Тогда
			Объект.РасчетПоВладельцам.Удалить(СтрокаТабличнойЧасти);
		КонецЕсли;
		НомерСтроки = НомерСтроки - 1;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура РаспределитьОтходы(Команда)
	
	ПараметрыФормы = Новый Структура;
	
	Если ЗначениеЗаполнено(Объект.ПобочныйПродукт) Тогда
		ПараметрыФормы.Вставить("ПобочныйПродукт",  Объект.ПобочныйПродукт);
	КонецЕсли;
	Если ЗначениеЗаполнено(Объект.Отходы1Категории) Тогда
		ПараметрыФормы.Вставить("Отходы1Категории", Объект.Отходы1Категории);
	КонецЕсли;
	Если ЗначениеЗаполнено(Объект.Отходы2Категории) Тогда
		ПараметрыФормы.Вставить("Отходы2Категории", Объект.Отходы2Категории);
	КонецЕсли;

	ПараметрыФормы.Вставить("АдресРасчетПоВладельцамВХранилище", ПоместитьТаблицуРасчетПоВладельцамВХранилище(Истина));

	ОповещениеОЗакрытии = Новый ОписаниеОповещения("РаспределениеОтходовЗавершение", ЭтотОбъект);
	
	ОткрытьФорму("Документ.ИНАГРО_Форма34Сводная.Форма.ФормаВводаРаспределенияОтходов", ПараметрыФормы, , Новый УникальныйИдентификатор(), , , ОповещениеОЗакрытии, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ОставитьСтрокиСОбщимВесомОтходовПоВозр(Команда)
	
	ВесОтходов = Объект.УбыльОтОчистки;
	
	Оповещение = Новый ОписаниеОповещения("ОставитьСтрокиСОбщимВесомОтходовПоВозрЗавершение", ЭтотОбъект, Параметры);
	ПоказатьВводЧисла(Оповещение, ВесОтходов, Нстр("ru='Введите вес отходов';uk='Введіть вагу відходів'"), 15);  
	
КонецПроцедуры

&НаКлиенте
Процедура ОставитьСтрокиСОбщимВесомОтходовПоВозрЗавершение(ВесОтходов, ДополнительныеПараметры) Экспорт
	
	Если ВесОтходов = 0 ИЛИ ВесОтходов = Объект.УбыльОтОчистки Тогда
		Возврат
	КонецЕсли; 	

	УдалитьСтрокиСОбщимВесомОтходов(ВесОтходов, Ложь);

	РассчитатьДокумент();
	
КонецПроцедуры

&НаКлиенте
Процедура ОставитьСтрокиСОбщимВесомОтходовПоУбыв(Команда)
	
	ВесОтходов = Объект.УбыльОтОчистки;
	
	Оповещение = Новый ОписаниеОповещения("ОставитьСтрокиСОбщимВесомОтходовПоУбывЗавершение", ЭтотОбъект, Параметры);
	ПоказатьВводЧисла(Оповещение, ВесОтходов, Нстр("ru='Введите вес отходов';uk='Введіть вагу відходів'"), 15);  

КонецПроцедуры

&НаКлиенте
Процедура ОставитьСтрокиСОбщимВесомОтходовПоУбывЗавершение(ВесОтходов, ДополнительныеПараметры) Экспорт
	
	Если ВесОтходов = 0 ИЛИ ВесОтходов = Объект.УбыльОтОчистки Тогда
		Возврат
	КонецЕсли; 	

	УдалитьСтрокиСОбщимВесомОтходов(ВесОтходов, Истина);

	РассчитатьДокумент();
	
КонецПроцедуры

&НаКлиенте
Процедура ОставитьСтрокиСОбщимВесомПоСорнойПримеси(Команда)
	
	РезультирующийВесОтходовПоСорнойПримеси = 0;
	
	Оповещение = Новый ОписаниеОповещения("ОставитьСтрокиСОбщимВесомПоСорнойПримесиЗавершение", ЭтотОбъект, Параметры);
	ПоказатьВводЧисла(Оповещение, РезультирующийВесОтходовПоСорнойПримеси, Нстр("ru='Введите ц/п отходов по сорной примеси';uk='Введіть ц/п відходів пза сміттєвою домішкою'"), 15);  
	
КонецПроцедуры

&НаКлиенте
Процедура ОставитьСтрокиСОбщимВесомПоСорнойПримесиЗавершение(РезультирующийВесОтходовПоСорнойПримеси, ДополнительныеПараметры) Экспорт
	
	Если РезультирующийВесОтходовПоСорнойПримеси = 0 Тогда
		Возврат
	КонецЕсли; 	

	УдалитьСтрокиСОбщимВесомОтходовПоСорнойПримеси(РезультирующийВесОтходовПоСорнойПримеси, Истина);

	РассчитатьДокумент();
	
КонецПроцедуры

#КонецОбласти

#Область ДействияПанелиРаспоряжение

&НаКлиенте
Процедура МетодОпределенияВеса(Команда)
	
	СписокВыбора = Новый СписокЗначений;		
	СписокВыбора.Добавить(НСтр("ru='по данным бух. учета';uk='за даними бух. обліку'"));
	СписокВыбора.Добавить(НСтр("ru='путем взвешивания';uk='шляхом зважування'"));
	СписокВыбора.Добавить(НСтр("ru='путем обмера';uk='шляхом обміру'")); 

	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ВыборМетодОпределенияВесаИзСпискаЗавершение", ЭтаФорма);			
	ПоказатьВыборИзСписка(ОповещениеОЗакрытии, СписокВыбора);

КонецПроцедуры

&НаКлиенте
Процедура ВыборМетодОпределенияВесаИзСпискаЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	 		
	Если РезультатЗакрытия <> Неопределено Тогда		
		Объект.МетодОпределенияВеса = РезультатЗакрытия;		
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура СпособПодработки(Команда)

	Объект.СпособПодработки = НСтр("ru='в потоке';uk='в потоці'");
	
КонецПроцедуры

&НаКлиенте
Процедура ЦельПодработки(Команда)
	
	СписокВыбора = Новый СписокЗначений;		
	СписокВыбора.Добавить(НСтр("ru='приведение к устойчивому состоянию';uk='доведення до стійкого стану'"));
	СписокВыбора.Добавить(НСтр("ru='приведение к условиям контракта';uk='доведення до умов контракту'"));
	СписокВыбора.Добавить(НСтр("ru='оздоровление';uk='оздоровлення'"));
	СписокВыбора.Добавить(НСтр("ru='обеззараживание';uk='знезараження'"));
	СписокВыбора.Добавить(НСтр("ru='снижение влажности';uk='зниження вологості'"));
	СписокВыбора.Добавить(НСтр("ru='снижение сорной примеси';uk='зниження смітної домішки'")); 

	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ВыборЦельПодработкиИзСпискаЗавершение", ЭтаФорма);			
	ПоказатьВыборИзСписка(ОповещениеОЗакрытии, СписокВыбора);

КонецПроцедуры

&НаКлиенте
Процедура ВыборЦельПодработкиИзСпискаЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	 		
	Если РезультатЗакрытия <> Неопределено Тогда		
		Объект.ЦельПодработки = РезультатЗакрытия;		
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура ПланируемыеРезультаты(Команда)
	
	СписокВыбора = Новый СписокЗначений;		
	СписокВыбора.Добавить(НСтр("ru='влажность зерна для устойчивого состояния';uk='вологість зерна для стійкого стану'"));
	СписокВыбора.Добавить(НСтр("ru='сорная примесь для устойчивого хранения';uk='смітна домішка для стійкого зберігання'"));
	СписокВыбора.Добавить(НСтр("ru='базисные кондиции';uk='базисні кондиції'")); 

	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ВыборПланируемыеРезультатыИзСпискаЗавершение", ЭтаФорма);			
	ПоказатьВыборИзСписка(ОповещениеОЗакрытии, СписокВыбора);

КонецПроцедуры

&НаКлиенте
Процедура ВыборПланируемыеРезультатыИзСпискаЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	 		
	Если РезультатЗакрытия <> Неопределено Тогда		
		Объект.ПланируемыеРезультаты = РезультатЗакрытия;		
	КонецЕсли;
	
КонецПроцедуры 

#КонецОбласти

&НаКлиенте
Процедура ОписаниеДвиженияФормы36НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(
		Элемент.ТекстРедактирования,
		ЭтотОбъект,
		"Объект.ОписаниеДвиженияФормы36",
		НСтр("ru='Описание движения формы 36';uk='Опис руху форми 36'"));

КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(
		Элемент.ТекстРедактирования,
		ЭтотОбъект,
		"Объект.Комментарий");

КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиСобытийЭлементовТаблицыФормыРасчетПоВладельцам

&НаКлиенте
Процедура РасчетПоВладельцамПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		
		ТекущиеДанные = Элементы.РасчетПоВладельцам.ТекущиеДанные;
		
		ТекущиеДанные.ВидХранения      = ИНАГРО_ЭлеваторЗаполнениеДокументов.ПолучитьЗначениеПоУмолчанию("ВидХранения");
		ТекущиеДанные.ПроводилиОчистку = Объект.ПроводилиОчистку;
		ТекущиеДанные.ПроводилиСушку   = Объект.ПроводилиСушку;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура РасчетПоВладельцамПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	ТекущиеДанные = Элементы.РасчетПоВладельцам.ТекущиеДанные;
	
	ДанныеСтрокиТаблицы = ПолучитьСтруктуруДляРасчетаПоВладельцам();
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, ТекущиеДанные);

	ТекущиеДанные.БалансСорнойПримесиПоВладельцу = РассчитатьБалансСорнойПримесиПоВладельцу(ДанныеСтрокиТаблицы);

	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтрокиТаблицы);
	
КонецПроцедуры

&НаКлиенте
Процедура РасчетПоВладельцамВладелецПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.РасчетПоВладельцам.ТекущиеДанные;
	
	ИНАГРО_ЭлеваторЗаполнениеДокументов.ПриИзмененииЗначенияКонтрагента(Объект.Дата, Объект.Организация, ТекущиеДанные.Владелец, ТекущиеДанные.ДоговорКонтрагента, Новый Структура("ВидХранения", ТекущиеДанные.ВидХранения));
	
	ДанныеСтрокиТаблицы = Новый Структура(
		"Владелец,  Номенклатура, СчетУчетаБУ,
		|НалоговоеНазначение");
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, ТекущиеДанные);
	
	ДанныеОбъекта = Новый Структура(
		"Дата, Организация, Номенклатура,
		|Склад, ОтражатьВБухгалтерскомУчете");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
	РасчетПоВладельцамВладелецПриИзмененииНаСервере(ДанныеСтрокиТаблицы, ДанныеОбъекта);
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтрокиТаблицы);

КонецПроцедуры

&НаСервереБезКонтекста
Процедура РасчетПоВладельцамВладелецПриИзмененииНаСервере(СтрокаТабличнойЧасти, Знач ДанныеОбъекта)
	
	СведенияОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОНоменклатуре(
		СтрокаТабличнойЧасти.Номенклатура, ДанныеОбъекта);	
		
	Если СведенияОНоменклатуре = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Документы.ИНАГРО_Форма34Сводная.ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(ДанныеОбъекта, СтрокаТабличнойЧасти, СведенияОНоменклатуре);	

КонецПроцедуры

&НаКлиенте
Процедура РасчетПоВладельцамФизическийВес1ПриИзменении(Элемент)
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ИНАГРО_ВидыОперацийФорма34Сводная.ПрямойРасчет") Тогда
		РассчитатьОтВладельцев();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура РасчетПоВладельцамФизическийВес2ПриИзменении(Элемент)
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ИНАГРО_ВидыОперацийФорма34Сводная.ПрямойРасчет") Тогда
		РасчетПоВладельцамФизическийВес2ПриИзмененииНаСервере();
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура РасчетПоВладельцамФизическийВес2ПриИзмененииНаСервере()
	
	РассчитатьИтоги();
	
	РаспределитьВесПоОперациям();

КонецПроцедуры

&НаКлиенте
Процедура РасчетПоВладельцамФизическийВес21ПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.РасчетПоВладельцам.ТекущиеДанные;
	
	ДанныеСтрокиТаблицы = ПолучитьСтруктуруДляРасчетаПоВладельцам();
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, ТекущиеДанные);

	РасчетПоВладельцамФизическийВес21ПриИзмененииНаСервере(ДанныеСтрокиТаблицы);
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтрокиТаблицы);

КонецПроцедуры

&НаСервере
Процедура РасчетПоВладельцамФизическийВес21ПриИзмененииНаСервере(СтрокаТабличнойЧасти)
	
	РассчитатьФизическийВесПослеПоВладельцу(СтрокаТабличнойЧасти);
	
	РаспределитьВесПоОперациям();

КонецПроцедуры

&НаКлиенте
Процедура РасчетПоВладельцамФизическийВес3ПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.РасчетПоВладельцам.ТекущиеДанные;
	
	ТекущиеДанные.УбыльОтОчистки = ТекущиеДанные.ФизическийВес3;
	
	ДанныеСтрокиТаблицы = ПолучитьСтруктуруДляРасчетаПоВладельцам();
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, ТекущиеДанные);

	РасчетПоВладельцамФизическийВес21ПриИзмененииНаСервере(ДанныеСтрокиТаблицы);
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтрокиТаблицы);

КонецПроцедуры

&НаКлиенте
Процедура РасчетПоВладельцамФизическийВес31ПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.РасчетПоВладельцам.ТекущиеДанные;
	
	ДанныеСтрокиТаблицы = ПолучитьСтруктуруДляРасчетаПоВладельцам();
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, ТекущиеДанные);
	
	РассчитатьФизическийВесПослеПоВладельцу(ДанныеСтрокиТаблицы);
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтрокиТаблицы);

КонецПроцедуры

&НаКлиенте
Процедура РасчетПоВладельцамФизическийВес32ПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.РасчетПоВладельцам.ТекущиеДанные;
	
	ДанныеСтрокиТаблицы = ПолучитьСтруктуруДляРасчетаПоВладельцам();
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, ТекущиеДанные);

	РасчетПоВладельцамФизическийВес21ПриИзмененииНаСервере(ДанныеСтрокиТаблицы);
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтрокиТаблицы);
	
КонецПроцедуры

&НаКлиенте
Процедура РасчетПоВладельцамУбыльОтСушкиПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.РасчетПоВладельцам.ТекущиеДанные;
	
	ДанныеСтрокиТаблицы = ПолучитьСтруктуруДляРасчетаПоВладельцам();
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, ТекущиеДанные);

	РасчетПоВладельцамФизическийВес21ПриИзмененииНаСервере(ДанныеСтрокиТаблицы);
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтрокиТаблицы);

КонецПроцедуры

&НаКлиенте
Процедура РасчетПоВладельцамУбыльОтОчисткиПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.РасчетПоВладельцам.ТекущиеДанные;
	
	ТекущиеДанные.ФизическийВес3 = ТекущиеДанные.УбыльОтОчистки;
	
	ДанныеСтрокиТаблицы = ПолучитьСтруктуруДляРасчетаПоВладельцам();
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, ТекущиеДанные);

	РасчетПоВладельцамФизическийВес21ПриИзмененииНаСервере(ДанныеСтрокиТаблицы);
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтрокиТаблицы);	

КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиСобытийЭлементовТаблицыФормыРасчетУслуг

&НаКлиенте
Процедура РасчетУслугЦенаСушкиПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.РасчетУслуг.ТекущиеДанные;
	ТекущиеДанные.СуммаСушки = ТекущиеДанные.КоличествоСушки * ТекущиеДанные.ЦенаСушки;
	ТекущиеДанные.Сумма      = ТекущиеДанные.СуммаОчистки + ТекущиеДанные.СуммаСушки;
	ТекущиеДанные.СуммаНДС   = УчетНДСКлиентСервер.РассчитатьСуммуНДС(ТекущиеДанные.Сумма, Истина, 20);
	
КонецПроцедуры

&НаКлиенте
Процедура РасчетУслугЦенаОчисткиПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.РасчетУслуг.ТекущиеДанные;
	ТекущиеДанные.СуммаОчистки = ТекущиеДанные.КоличествоОчистки * ТекущиеДанные.ЦенаОчистки;
	ТекущиеДанные.Сумма        = ТекущиеДанные.СуммаОчистки + ТекущиеДанные.СуммаСушки;
	ТекущиеДанные.СуммаНДС     = УчетНДСКлиентСервер.РассчитатьСуммуНДС(ТекущиеДанные.Сумма, Истина, 20);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

#Область ВыборПериода

&НаКлиенте
Процедура ВыбратьПериод(Команда)

	ПараметрыФормыВыбора = Новый Структура("НачалоПериода, КонецПериода", Объект.ДатаНачала, Объект.ДатаОкончания);
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыбратьПериодЗавершение", ЭтотОбъект);
	ОткрытьФорму("ОбщаяФорма.ВыборСтандартногоПериода", ПараметрыФормыВыбора, Элементы.ВыбратьПериод, , , , ОписаниеОповещения);
	
КонецПроцедуры 

&НаКлиенте
Процедура ВыбратьПериодЗавершение(РезультатВыбора, ДопПараметры) Экспорт
	
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Объект.ДатаНачала	 = РезультатВыбора.НачалоПериода;
	Объект.ДатаОкончания = РезультатВыбора.КонецПериода;		
		
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьПериодСушки(Команда)
	
	ПараметрыФормыВыбора = Новый Структура("НачалоПериода, КонецПериода", Объект.ДатаНачалаСушки, Объект.ДатаОкончанияСушки);
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыбратьПериодСушкиЗавершение", ЭтотОбъект);
	ОткрытьФорму("ОбщаяФорма.ВыборСтандартногоПериода", ПараметрыФормыВыбора, Элементы.ВыбратьПериодСушки, , , , ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьПериодСушкиЗавершение(РезультатВыбора, ДопПараметры) Экспорт
	
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Объект.ДатаНачалаСушки	  = РезультатВыбора.НачалоПериода;
	Объект.ДатаОкончанияСушки = РезультатВыбора.КонецПериода;		
		
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьПериодОчистки(Команда)
	
	ПараметрыФормыВыбора = Новый Структура("НачалоПериода, КонецПериода", Объект.ДатаНачалаОчистки, Объект.ДатаОкончанияОчистки);
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыбратьПериодОчисткиЗавершение", ЭтотОбъект);
	ОткрытьФорму("ОбщаяФорма.ВыборСтандартногоПериода", ПараметрыФормыВыбора, Элементы.ВыбратьПериодОчистки, , , , ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьПериодОчисткиЗавершение(РезультатВыбора, ДопПараметры) Экспорт
	
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Объект.ДатаНачалаОчистки	= РезультатВыбора.НачалоПериода;
	Объект.ДатаОкончанияОчистки = РезультатВыбора.КонецПериода;		
		
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура СоздатьЛабораторныйАнализ(Команда)
	
	Если Найти(ТекущийЭлемент.Имя, "ЛабораторныйАнализ") = 0 Тогда
		ТекстСообщения = НСтр("ru='Для создания лабораторного анализа необходимо выбрать соответсвующее поле!';uk='Для створення лабораторного аналізу необхідно вибрати відповідне поле!'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Объект.ЛабораторныйАнализ1");
		Возврат;
	КонецЕсли;
	
	Индекс = СтрЗаменить(ТекущийЭлемент.Имя, "ЛабораторныйАнализ", "");
	
	ЗначенияЗаполнения = Новый Структура;
	ЗначенияЗаполнения.Вставить("Дата",               Объект.Дата);
	ЗначенияЗаполнения.Вставить("Ссылка",             ПредопределенноеЗначение("Документ.ИНАГРО_ЛабораторныйАнализ.ПустаяСсылка"));
	ЗначенияЗаполнения.Вставить("Организация",        Объект.Организация);
	ЗначенияЗаполнения.Вставить("Владелец",           ?(ЗначениеЗаполнено(Объект.Владелец), Объект.Владелец, СобственныйКонтрагент));
	ЗначенияЗаполнения.Вставить("ДоговорКонтрагента", ?(ЗначениеЗаполнено(Объект.ДоговорКонтрагента), Объект.ДоговорКонтрагента, ПредопределенноеЗначение("Справочник.ДоговорыКонтрагентов.ПустаяСсылка")));
	ЗначенияЗаполнения.Вставить("Склад",        	  Объект.Склад);
	ЗначенияЗаполнения.Вставить("ВидХранения",        Объект.ВидХранения);
	ЗначенияЗаполнения.Вставить("Силос",       		  Объект.Силос);
	
	Если ТекущийЭлемент = Элементы.ЛабораторныйАнализ1 ИЛИ ТекущийЭлемент = Элементы.ЛабораторныйАнализ2 Тогда
		ЗначенияЗаполнения.Вставить("Номенклатура",       Объект.Номенклатура);
	ИначеЕсли ТекущийЭлемент = Элементы.ЛабораторныйАнализ7 Тогда
		ЗначенияЗаполнения.Вставить("Номенклатура", Объект.ПобочныйПродукт);
	ИначеЕсли ТекущийЭлемент = Элементы.ЛабораторныйАнализ8 Тогда 
		ЗначенияЗаполнения.Вставить("Номенклатура", Объект.Отходы3Категории);
	ИначеЕсли ТекущийЭлемент = Элементы.ЛабораторныйАнализ9 Тогда 
		ЗначенияЗаполнения.Вставить("Номенклатура", Объект.Отходы1Категории);
	ИначеЕсли ТекущийЭлемент = Элементы.ЛабораторныйАнализ10 Тогда 
		ЗначенияЗаполнения.Вставить("Номенклатура", Объект.Отходы2Категории);
	КонецЕсли; 
	
	ЗначенияЗаполнения.Вставить("Урожай",             Объект.Урожай);
	ЗначенияЗаполнения.Вставить("Влажность",          Объект["Влажность"       + Индекс]);	
	ЗначенияЗаполнения.Вставить("СорнаяПримесь",      Объект["СорнаяПримесь"   + Индекс]);
	ЗначенияЗаполнения.Вставить("ЗерноваяПримесь",    Объект["ЗерноваяПримесь" + Индекс]);	
		
	ИНАГРО_ЭлеваторКлиент.СоздатьДокументНаОсновании(ЭтаФорма, ЗначенияЗаполнения);

КонецПроцедуры

&НаКлиенте
Процедура До(Команда)
	
	Записать();
	
	Если Объект.ВидДокумента = ПредопределенноеЗначение("Перечисление.ИНАГРО_ВидыАктовОчисткиСушки.Индивидуальный") Тогда
		Если НЕ ЗначениеЗаполнено(Объект.Владелец) Тогда
			ТекстСообщения = НСтр("ru='Для индивидуального расчета не заполнен Владелец!';uk='Для індивідуального розрахунку не заповнений Власник!'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Объект.Владелец"); 
			Возврат;
		КонецЕсли;	
	КонецЕсли;	
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ИНАГРО_ВидыОперацийФорма34Сводная.ПрямойРасчет") Тогда
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ДанныеОбъекта", ПолучитьПараметрыВыборки());
		Если Объект.РасчетПоВладельцам.Количество() > 0 Тогда
			ПараметрыФормы.Вставить("АдресРасчетПоВладельцамВХранилище", ПоместитьТаблицуРасчетПоВладельцамВХранилище());
			ПараметрыФормы.Вставить("РасчетПоВладельцамКоличество", Истина);
		КонецЕсли;
		ПараметрыФормы.Вставить("Кнопка", "До");
		
		ОповещениеОЗакрытии = Новый ОписаниеОповещения("ВводПараметровВыборкиЗавершение", ЭтотОбъект);

		ОткрытьФорму("Документ.ИНАГРО_Форма34Сводная.Форма.ФормаВводаПараметровВыборки", ПараметрыФормы, , Новый УникальныйИдентификатор(), , , ОповещениеОЗакрытии, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ИНАГРО_ВидыОперацийФорма34Сводная.ОбратныйРасчет") Тогда
		РасчитатьОтВладельцевОбратныйРасчет();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура После(Команда)
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ИНАГРО_ВидыОперацийФорма34Сводная.ПрямойРасчет") Тогда
		
		РассчитатьОтВладельцев();
		
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ИНАГРО_ВидыОперацийФорма34Сводная.ОбратныйРасчет") Тогда
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ДанныеОбъекта", ПолучитьПараметрыВыборки());
		Если Объект.РасчетПоВладельцам.Количество() > 0 Тогда
			ПараметрыФормы.Вставить("АдресРасчетПоВладельцамВХранилище", ПоместитьТаблицуРасчетПоВладельцамВХранилище());
			ПараметрыФормы.Вставить("РасчетПоВладельцамКоличество", Истина);
		КонецЕсли;

		ПараметрыФормы.Вставить("Кнопка", "После");
		
		ОповещениеОЗакрытии = Новый ОписаниеОповещения("ВводПараметровВыборкиЗавершение", ЭтотОбъект);

		ОткрытьФорму("Документ.ИНАГРО_Форма34Сводная.Форма.ФормаВводаПараметровВыборки", ПараметрыФормы, , Новый УникальныйИдентификатор(), , , ОповещениеОЗакрытии, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

	КонецЕсли;

КонецПроцедуры 

&НаКлиенте
Процедура РасчетЗерновойПримеси(Команда)
	
	РасчитатьЗерновуюПримесьЗернаПослеОчистки();

КонецПроцедуры

&НаКлиенте
Процедура РассчитатьУслуги(Команда)
	
	РассчитатьУслугиНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура Рассчитать(Команда)
	
	РассчитатьДокумент();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ПодготовитьФормуНаСервере()

	УстановитьФункциональныеОпцииФормы();
	
	ТекущаяДатаДокумента = Объект.Дата;	
		
	УстановитьЗаголовкиИДоступностьСубконто(ЭтаФорма, Объект.СчетЗатрат, , "Списания");
	
	УстановитьЗаголовокФормы();
	
	УправлениеФормойНаСервере();	

	УстановитьСостояниеДокумента();
	
КонецПроцедуры 

&НаСервере
Процедура УстановитьФункциональныеОпцииФормы()

	ОбщегоНазначенияБПКлиентСервер.УстановитьПараметрыФункциональныхОпцийФормыДокумента(ЭтаФорма);	
	
	ПараметрыУчетаЭлеватора                              = ИНАГРО_Элеватор.ПолучитьПараметрыУчетаЭлеватора(Объект.Дата);	
	ЛабораторияРаботаетВСистеме                          = ПараметрыУчетаЭлеватора.ЛабораторияРаботаетВСистеме;
	ВыставлятьУслугиОчисткиСушкиПоФактическимПоказателям = ПараметрыУчетаЭлеватора.ВыставлятьУслугиОчисткиСушкиПоФактическимПоказателям;
	ИспользоватьСистемуКонтроляКачестваПартийЗерна       = ПараметрыУчетаЭлеватора.ИспользоватьСистемуКонтроляКачестваПартийЗерна;	
	СпособНачисленияОплатыЗаОчисткуСушку                 = ПараметрыУчетаЭлеватора.СпособНачисленияОплатыЗаОчисткуСушку;
	СпособРасчетаВесаНаОчисткуСушкуДляУслуг              = ПараметрыУчетаЭлеватора.СпособРасчетаВесаНаОчисткуСушкуДляУслуг;
		
	СобственныйКонтрагент                                = ИНАГРО_Элеватор.ПолучитьДополнительныйРеквизитОрганизации(Объект.Организация, "Контрагент", Объект.Дата);
	ВидимостьМестаХранения                               = ИНАГРО_Элеватор.ПолучитьДополнительныйРеквизитСклада(Объект.Склад, "ВестиУчетПоМестамХранения");
	
КонецПроцедуры 

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)

	Элементы = Форма.Элементы;
	Объект   = Форма.Объект;	
	
	ИспользоватьСистемуКонтроляКачестваПартийЗерна = Форма.ИспользоватьСистемуКонтроляКачестваПартийЗерна;
	ПроцентОтРасчетногоВыходаОтходов               = Объект.СпособРасчетаКатегорийныхОтходов = ПредопределенноеЗначение("Перечисление.ИНАГРО_СпособыРасчетаКатегорийныхОтходов.ПроцентОтРасчетногоВыходаОтходов");
	ЛабораторияРаботаетВСистеме                    = Форма.ЛабораторияРаботаетВСистеме;
	
	Элементы.ГруппаБухУчет.Видимость     = Объект.ОтражатьВБухгалтерскомУчете;
	Элементы.ГруппаРасчетУслуг.Видимость = Форма.ВыставлятьУслугиОчисткиСушкиПоФактическимПоказателям;
	
	Элементы.РасчетПоВладельцамСчетУчетаБУ.Видимость     = Объект.ОтражатьВБухгалтерскомУчете;
	Элементы.РасчетПоВладельцамФизическийВес31.Видимость = ?(Объект.ФизическийВес9 > 0,  Истина, Ложь);
	Элементы.РасчетПоВладельцамФизическийВес32.Видимость = ?(Объект.ФизическийВес10 > 0, Истина, Ложь);	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ИНАГРО_ВидыОперацийФорма34Сводная.ПрямойРасчет") Тогда
		Элементы.РасчетПоВладельцамВлажность2.Видимость = Ложь;
		Элементы.РасчетПоВладельцамСорнаяПримесь2.Видимость = Ложь;
		Элементы.РасчетПоВладельцамЗерноваяПримесь2.Видимость = Ложь;
		//Элементы.РасчетПоВладельцамФизическийВес2.Ширина = 12;
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ИНАГРО_ВидыОперацийФорма34Сводная.ОбратныйРасчет") Тогда 
		Элементы.РасчетПоВладельцамВлажность2.Видимость = Истина;
		Элементы.РасчетПоВладельцамСорнаяПримесь2.Видимость = Истина;
		Элементы.РасчетПоВладельцамЗерноваяПримесь2.Видимость = Истина;
	КонецЕсли; 	
	Элементы.РасчетПоВладельцамОчищено.Видимость         = ИспользоватьСистемуКонтроляКачестваПартийЗерна;
	Элементы.РасчетПоВладельцамПосушено.Видимость        = ИспользоватьСистемуКонтроляКачестваПартийЗерна;
	Элементы.РасчетПоВладельцамРеестрТТН.Видимость       = ИспользоватьСистемуКонтроляКачестваПартийЗерна;
	
	Элементы.ПроводилиОчистку.Видимость = НЕ Объект.ВидДокумента = ПредопределенноеЗначение("Перечисление.ИНАГРО_ВидыАктовОчисткиСушки.Оздоровление");	
	Элементы.ПроводилиСушку.Видимость   = НЕ Объект.ВидДокумента = ПредопределенноеЗначение("Перечисление.ИНАГРО_ВидыАктовОчисткиСушки.Оздоровление");	
	Элементы.РасчетПоВладельцамИндивидуальныйРасчет.Видимость = НЕ Объект.ВидДокумента= ПредопределенноеЗначение("Перечисление.ИНАГРО_ВидыАктовОчисткиСушки.Индивидуальный");	
		
	Элементы.ПроцентПобочногоПродукта.Доступность = ПроцентОтРасчетногоВыходаОтходов;
	Элементы.ПроцентОтходов1Категории.Доступность = ПроцентОтРасчетногоВыходаОтходов;
	Элементы.ПроцентОтходов2Категории.Доступность = ПроцентОтРасчетногоВыходаОтходов;
	
	Элементы.ЗаголовокНалоговоеНазначениеЗатрат.Видимость      = Форма.ПлательщикНалогаНаПрибыльДо2015;
	Элементы.ГруппаНалоговоеНазначениеДоходовИЗатрат.Видимость = Форма.ПлательщикНалогаНаПрибыльДо2015;
	
	Если Форма.ПлательщикНалогаНаПрибыльДо2015 Тогда
		ПоказатьНалоговоеНазначениеПроводки(Объект, Элементы, Форма.ПлательщикНДС);
	КонецЕсли;
	
	Элементы.МестоХранения.Видимость        = Форма.ВидимостьМестаХранения;

	Элементы.ЛабораторныйАнализ7.Видимость  = ЛабораторияРаботаетВСистеме;
	Элементы.ЛабораторныйАнализ8.Видимость  = ЛабораторияРаботаетВСистеме;
	Элементы.ЛабораторныйАнализ9.Видимость  = ЛабораторияРаботаетВСистеме;
	Элементы.ЛабораторныйАнализ10.Видимость = ЛабораторияРаботаетВСистеме;
					
КонецПроцедуры

&НаСервере
Процедура УправлениеФормойНаСервере()
	
	РассчитатьИтоги();
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры 

&НаСервере
Процедура УстановитьПараметрыВыбораВидаДокумента()
	
	МассивВидовДокументов = Документы.ИНАГРО_Форма34Сводная.ПолучитьФиксированныйМассивВидовДокументов();
	
	ПараметрМассивВидовДокументов = Новый ПараметрВыбора("Отбор.Ссылка", МассивВидовДокументов);
	
	НовыйМассив = Новый Массив();
	НовыйМассив.Добавить(ПараметрМассивВидовДокументов);
	НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);
	
	Элементы.ВидДокумента.ПараметрыВыбора = НовыеПараметры;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗаголовокФормы()
	
	ОбъектФормы = ЭтаФорма.Объект;

	ТекстЗаголовка = НСтр("ru='Акт очистки/сушки';uk='Акт очищення/сушіння'");
	
	Если ЗначениеЗаполнено(ОбъектФормы.Ссылка) Тогда
		ТекстЗаголовка = ТекстЗаголовка + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru=' %1 от %2';uk=' %1 від %2'"), ОбъектФормы.Номер, ОбъектФормы.Дата);
	Иначе
		ТекстЗаголовка = ТекстЗаголовка + ": " + Строка(ОбъектФормы.ВидДокумента) + " " + НСтр("ru=' (создание)';uk=' (створення)'");
	КонецЕсли;
	
	ЭтаФорма.Заголовок = ТекстЗаголовка + " (" + Строка(ОбъектФормы.ВидОперации) + ")";

КонецПроцедуры

&НаСервере
Процедура УстановитьСостояниеДокумента()
	
	СостояниеДокумента = ОбщегоНазначенияБП.СостояниеДокумента(Объект);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьНомераАнализов()
	
	Объект.НомерАнализа3 = "";
	Объект.НомерАнализа4 = "";
	Объект.НомерАнализа5 = "";
	Объект.НомерАнализа6 = "";

	Если Объект.Порядок Тогда
		Если Объект.ПроводилиСушку И Объект.ПроводилиОчистку Тогда
			Объект.НомерАнализа5 = Объект.НомерАнализа1;
			Объект.НомерАнализа4 = Объект.НомерАнализа2;
		ИначеЕсли Объект.ПроводилиСушку Тогда
			Объект.НомерАнализа5 = Объект.НомерАнализа1;
			Объект.НомерАнализа6 = Объект.НомерАнализа2;
		КонецЕсли;
	Иначе
		Если Объект.ПроводилиОчистку И Объект.ПроводилиСушку Тогда
			Объект.НомерАнализа3 = Объект.НомерАнализа1;
			Объект.НомерАнализа6 = Объект.НомерАнализа2;
		ИначеЕсли Объект.ПроводилиОчистку Тогда
			Объект.НомерАнализа3 = Объект.НомерАнализа1;
			Объект.НомерАнализа4 = Объект.НомерАнализа2;
		КонецЕсли;
	КонецЕсли;
		
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьЗаголовкиИДоступностьСубконто(Форма, Счет, ЕстьПодразделение, Постфикс = "")

	ПоляФормы = Новый Структура("Субконто1, Субконто2, Субконто3",
		"Субконто" + Постфикс + "1",
		"Субконто" + Постфикс + "2",
		"Субконто" + Постфикс + "3");
		
	ЗаголовкиПолей = Новый Структура("Субконто1, Субконто2, Субконто3",
		"ЗаголовокСубконто" + Постфикс + "1",
		"ЗаголовокСубконто" + Постфикс + "2",
		"ЗаголовокСубконто" + Постфикс + "3");	
		
	БухгалтерскийУчетКлиентСервер.ПриВыбореСчета(Счет, Форма, ПоляФормы, ЗаголовкиПолей);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ИзменитьПараметрыВыбораПолейСубконто(Форма, Суффикс, ИмяСчета)

	ПараметрыДокумента = СписокПараметровВыбораСубконто(Форма, Форма.Объект,
		"Субконто" + Суффикс + "%Индекс%", ИмяСчета);
	
	БухгалтерскийУчетКлиентСервер.ИзменитьПараметрыВыбораПолейСубконто(
		Форма, 
		Форма.Объект, 
		"Субконто" + Суффикс + "%Индекс%", 
		"Субконто" + Суффикс + "%Индекс%", 
		ПараметрыДокумента);

КонецПроцедуры

&НаСервере
Процедура ПроверитьНалоговоеНазначениеДоходовИЗатрат()
	
	ХарактерЗатрат = УправлениеПроизводствомВызовСервера.ПолучитьХарактерЗатратПоСчетуЗатрат(Объект.СчетЗатрат,,Объект.Дата);
	Если (ХарактерЗатрат = "Производство" ИЛИ ХарактерЗатрат = "Строительство" ИЛИ ХарактерЗатрат = "ТЗР" ИЛИ ХарактерЗатрат = "РБП" ИЛИ ХарактерЗатрат = "ОПЗ") Тогда
		Объект.НалоговоеНазначениеДоходовИЗатрат = Неопределено;	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПоказатьНалоговоеНазначениеПроводки(Объект, Элементы, ПлательщикНДС)

	ХарактерЗатрат = УправлениеПроизводствомВызовСервера.ПолучитьХарактерЗатратПоСчетуЗатрат(Объект.СчетЗатрат, ,Объект.Дата);                                                                                              
	Элементы.НалоговоеНазначениеДоходовИЗатрат.Доступность = НЕ (ХарактерЗатрат = "Производство" ИЛИ ХарактерЗатрат = "Строительство" ИЛИ ХарактерЗатрат = "ТЗР" ИЛИ ХарактерЗатрат = "РБП" ИЛИ ХарактерЗатрат = "ОПЗ");
	
	ТекстНадписи = "";
	Если Элементы.НалоговоеНазначениеДоходовИЗатрат.Доступность = Ложь Тогда
		// Заполним характер затрат, признак Амортизируется и НалоговоеНазначениеДоходовИЗатрат.
		ХарактерЗатрат = Неопределено;
		ХарактерЗатратРБП = Неопределено;		
		НалоговоеНазначениеПроводки = Неопределено;
		
		Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийТребованиеНакладная.Материалы") Тогда
			НалоговоеНазначениеНДС = НСтр("ru='Совпадает с налоговым назначением материала';uk='Співпадає з податковим призначенням матеріала'");
		Иначе	
		    НалоговоеНазначениеНДС = НСтр("ru='Совпадает с налоговым назначением оборудования';uk='Співпадає з податковим призначенням устаткування'");
		КонецЕсли;
		СтруктураСубконто = Новый Структура("Субконто1,Субконто2,Субконто3", Объект.Субконто1, Объект.Субконто2, Объект.Субконто3);
		НалоговыйУчет.ОпределениеАналитикиНалоговогоУчетаВПроводкахДляЗатрат(СтруктураСубконто, Объект.Счет, ХарактерЗатрат,
																			 НалоговоеНазначениеПроводки, , НалоговоеНазначениеНДС,,,Объект.Дата, ХарактерЗатратРБП
																			,ПлательщикНДС);
		Если НЕ ПлательщикНДС Тогда
			ТекстНадписи = "<" + Строка(НалоговоеНазначениеПроводки) + ">";
		ИначеЕсли ХарактерЗатрат = "ОПЗ"
			ИЛИ ХарактерЗатрат = "ТЗР" Тогда
			ТекстНадписи = "<" + Строка(НалоговоеНазначениеПроводки) + ">";
		ИначеЕсли ХарактерЗатрат = "Производство" Тогда
			ТекстНадписи = "<" + Строка(НалоговоеНазначениеПроводки) + ">, " + НСтр("ru='из аналитики счета - номенклатурной группы';uk='з аналітики рахунку - номенклатурної групи'");
		ИначеЕсли ХарактерЗатрат = "Строительство" Тогда
			ТекстНадписи = "<" + Строка(НалоговоеНазначениеПроводки) + ">, " + НСтр("ru='из аналитики счета - объекта строительства';uk=""з аналітики рахунку - об'єкта будівництва""");
		ИначеЕсли ХарактерЗатрат = "РБП" Тогда
			Если    ХарактерЗатратРБП = "Производство"
				ИЛИ ХарактерЗатратРБП = "Строительство"
				ИЛИ ХарактерЗатратРБП = "ОПЗ" Тогда
				ТекстНадписи = "<" + Строка(НалоговоеНазначениеПроводки) + ">, " + НСтр("ru='из аналитики счета - справочника РБП';uk='з аналітики рахунку - довідника витрат майбут. періодів'");
			Иначе			
				ТекстНадписи = "<" + Строка(НалоговоеНазначениеПроводки) + ">";
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Элементы.НадписьИнформацияНалоговоеНазначениеДоходовИЗатрат.Заголовок = ТекстНадписи;
	
КонецПроцедуры	

&НаКлиентеНаСервереБезКонтекста
Функция СписокПараметровВыбораСубконто(Форма, ПараметрыОбъекта, ШаблонИмяПоляОбъекта, ИмяСчета)

	СписокПараметров = Новый Структура;
	Для Индекс = 1 По 3 Цикл
		ИмяПоля = СтрЗаменить(ШаблонИмяПоляОбъекта, "%Индекс%", Индекс);
		Если ТипЗнч(ПараметрыОбъекта[ИмяПоля]) = Тип("СправочникСсылка.Контрагенты") Тогда
			СписокПараметров.Вставить("Контрагент", ПараметрыОбъекта[ИмяПоля]);
		ИначеЕсли ТипЗнч(ПараметрыОбъекта[ИмяПоля]) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
			СписокПараметров.Вставить("ДоговорКонтрагента", ПараметрыОбъекта[ИмяПоля]);
		ИначеЕсли ТипЗнч(ПараметрыОбъекта[ИмяПоля]) = Тип("СправочникСсылка.Номенклатура") Тогда
			СписокПараметров.Вставить("Номенклатура", ПараметрыОбъекта[ИмяПоля]);
		ИначеЕсли ТипЗнч(ПараметрыОбъекта[ИмяПоля]) = Тип("СправочникСсылка.НоменклатурныеГруппы") Тогда
			СписокПараметров.Вставить("НоменклатурныеГруппы", ПараметрыОбъекта[ИмяПоля]);			
		ИначеЕсли ТипЗнч(ПараметрыОбъекта[ИмяПоля]) = Тип("СправочникСсылка.Склады") Тогда
			СписокПараметров.Вставить("Склад", ПараметрыОбъекта[ИмяПоля]);
		КонецЕсли;
	КонецЦикла;
	СписокПараметров.Вставить("Организация", Форма.Объект.Организация);
	СписокПараметров.Вставить("СчетУчета"  , Форма.Объект[ИмяСчета]);
	
	Возврат СписокПараметров;

КонецФункции

&НаСервере
Процедура ЗаполнитьСчетаУчетаВТабличнойЧасти()
	
	Если Объект.РасчетПоВладельцам.Количество() > 0 Тогда
		Документы.ИНАГРО_Форма34Сводная.ЗаполнитьСчетаУчетаВТабличнойЧасти(Объект, "РасчетПоВладельцам");
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьПараметрыДляДоговоров()

	ПараметрыОтбора = Новый Структура("ВидХранения, Урожай");
	ЗаполнитьЗначенияСвойств(ПараметрыОтбора, Объект);

	Возврат ПараметрыОтбора;

КонецФункции

&НаКлиенте
Функция ПолучитьПараметрыДляПроверкиЗаполнения()
	
	ПараметрыДляПроверкиЗаполнения = Новый Структура(
		"Склад, ВидХранения, Урожай, 
		|");
	ЗаполнитьЗначенияСвойств(ПараметрыДляПроверкиЗаполнения, Объект);
	
	Если ТекущийЭлемент = Элементы.ЛабораторныйАнализ1 ИЛИ ТекущийЭлемент = Элементы.ЛабораторныйАнализ2 Тогда
		ПараметрыДляПроверкиЗаполнения.Вставить("Номенклатура",  Объект.Номенклатура);
	ИначеЕсли ТекущийЭлемент = Элементы.ЛабораторныйАнализ7 Тогда
		ПараметрыДляПроверкиЗаполнения.Вставить("Номенклатура", Объект.ПобочныйПродукт);
	ИначеЕсли ТекущийЭлемент = Элементы.ЛабораторныйАнализ8 Тогда 
		ПараметрыДляПроверкиЗаполнения.Вставить("Номенклатура", Объект.Отходы3Категории);
	ИначеЕсли ТекущийЭлемент = Элементы.ЛабораторныйАнализ9 Тогда 
		ПараметрыДляПроверкиЗаполнения.Вставить("Номенклатура", Объект.Отходы1Категории);
	ИначеЕсли ТекущийЭлемент = Элементы.ЛабораторныйАнализ10 Тогда 
		ПараметрыДляПроверкиЗаполнения.Вставить("Номенклатура", Объект.Отходы2Категории);
	КонецЕсли;
	
	Возврат ПараметрыДляПроверкиЗаполнения; 

КонецФункции

&НаКлиенте
Функция ПолучитьСтруктуруДляРасчетаПоВладельцам()
	
	СтруктураДляРасчетаПоВладельцам = Новый Структура(
		"ФизическийВес1, ФизическийВес2, ФизическийВес21, 
		|ФизическийВес3, ФизическийВес31, ФизическийВес32,
		|СорнаяПримесь1, СорнаяПримесь2, ПроводилиОчистку,
		|УбыльОтСушки, УбыльОтОчистки 
		|");
	
	Возврат СтруктураДляРасчетаПоВладельцам;
	
КонецФункции

&НаСервере
Функция НегодныеОтходы()
	
	НегодныеОтходы = ИНАГРО_Элеватор.ПолучитьДополнительныйРеквизитНоменклатуры(Объект.Номенклатура, "ВидКультуры").НегодныеОтходы;
	
	Если НЕ ЗначениеЗаполнено(НегодныеОтходы) Тогда
		НегодныеОтходы = ИНАГРО_Элеватор.ПолучитьПараметрУчетаЭлеватора(Объект.Дата, "НегодныеОтходы", Неопределено);	
	КонецЕсли;
	
	Возврат НегодныеОтходы;
		
КонецФункции

&НаСервере
Функция ПобочныйПродукт()
	
	ПобочныйПродукт = ИНАГРО_Элеватор.ПолучитьДополнительныйРеквизитНоменклатуры(Объект.Номенклатура, "ВидКультуры").ПобочныйПродукт;
	
	Если НЕ ЗначениеЗаполнено(ПобочныйПродукт) Тогда
		ПобочныйПродукт = ИНАГРО_Элеватор.ПолучитьПараметрУчетаЭлеватора(Объект.Дата, "ПобочныйПродукт", Неопределено);	
	КонецЕсли;
	
	Возврат ПобочныйПродукт;
		
КонецФункции

&НаСервере
Функция ПолучитьПроцентВыходаНегодныхОтходов()
	
	Результат = 100 - Объект.ПроцентПобочногоПродукта - Объект.ПроцентОтходов1Категории - Объект.ПроцентОтходов2Категории;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ПоместитьТаблицуРасчетПоВладельцамВХранилище(Отходы = Ложь)
	
	Если Отходы Тогда		
		ВходящаяТаблица = Объект.РасчетПоВладельцам.Выгрузить( , "Владелец, ФизическийВес1");		
	Иначе
		ВходящаяТаблица = Объект.РасчетПоВладельцам.Выгрузить();		
	КонецЕсли;
	
	Возврат ПоместитьВоВременноеХранилище(ВходящаяТаблица, УникальныйИдентификатор);

КонецФункции

#Область Расчеты

&НаСервере
Процедура РаспределитьПобочныйПродукт(ИмяКолонки = "ФизическийВес21", ДляПустыхЗначений = Ложь)
	
	Если    Объект.РасчетПоВладельцам.Количество() = 0
		ИЛИ Объект.ВидОперации = Перечисления.ИНАГРО_ВидыОперацийФорма34Сводная.ОбратныйРасчет Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьБазисРаспределенияОтходов(ИмяКолонки, ДляПустыхЗначений);
	
	Если Объект.СпособРасчетаКатегорийныхОтходов = Перечисления.ИНАГРО_СпособыРасчетаКатегорийныхОтходов.ПроцентОтРасчетногоВыходаОтходов Тогда
		
		ВесДляРаспределения = Объект.ФизическийВес7 - Объект.РасчетПоВладельцам.Итог("ФизическийВес21");
		Разница = Объект.ФизическийВес7 - Объект.РасчетПоВладельцам.Итог("ФизическийВес21");
		ВсегоБазисРаспределенияОтходов = Объект.РасчетПоВладельцам.Итог("БазисРаспределенияОтходов");
		
		МаксЗначение      = 0;
		СтрСМаксЗначением = 0;
		
		Для Каждого СтрокаТабличнойЧасти Из Объект.РасчетПоВладельцам Цикл		
			
			Если СтрокаТабличнойЧасти.ИндивидуальныйРасчет Тогда
				Продолжить;
			КонецЕсли;	
			
			Если СтрокаТабличнойЧасти.БазисРаспределенияОтходов > МаксЗначение Тогда
				МаксЗначение      = СтрокаТабличнойЧасти.БазисРаспределенияОтходов;
				СтрСМаксЗначением = СтрокаТабличнойЧасти.НомерСтроки;
			КонецЕсли;
			
			ВесПоправки = Окр(?(ВсегоБазисРаспределенияОтходов <> 0, СтрокаТабличнойЧасти.БазисРаспределенияОтходов * ВесДляРаспределения / ВсегоБазисРаспределенияОтходов, 0), 0);
			СтрокаТабличнойЧасти.ФизическийВес21 = СтрокаТабличнойЧасти.ФизическийВес21 + ВесПоправки;
			Разница = Разница - ВесПоправки;
			
			РассчитатьСтрокуПоВладельцу(СтрокаТабличнойЧасти, ?(Объект.Порядок, Ложь, Истина), Ложь);
			РассчитатьФизическийВесПослеПоВладельцу(СтрокаТабличнойЧасти);
			
		КонецЦикла;
		
	Иначе
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Внимание были изменен вес " + Объект.ПобочныйПродукт + " необходимо пересчитать акт");
		
		ВесДляРаспределения            = Объект.ФизическийВес7;
		Разница                        = Объект.ФизическийВес7;
		ВсегоБазисРаспределенияОтходов = Объект.РасчетПоВладельцам.Итог("БазисРаспределенияОтходов");
		
		МаксЗначение      = 0;
		СтрСМаксЗначением = 0;
		
		Для Каждого СтрокаТабличнойЧасти Из Объект.РасчетПоВладельцам Цикл
			
			Если СтрокаТабличнойЧасти.ИндивидуальныйРасчет Тогда
				Продолжить;
			КонецЕсли;	
			
			Если ДляПустыхЗначений И СтрокаТабличнойЧасти.БазисРаспределенияОтходов = 0 Тогда
				Продолжить;
			Конецесли;
			
			Если СтрокаТабличнойЧасти.БазисРаспределенияОтходов > МаксЗначение Тогда
				МаксЗначение = СтрокаТабличнойЧасти.БазисРаспределенияОтходов;
				СтрСМаксЗначением = СтрокаТабличнойЧасти.НомерСтроки;
			КонецЕсли;
			
			СтрокаТабличнойЧасти.ФизическийВес21 = ?(ВсегоБазисРаспределенияОтходов <> 0, СтрокаТабличнойЧасти.БазисРаспределенияОтходов * ВесДляРаспределения / ВсегоБазисРаспределенияОтходов, 0);
			Разница = Разница - СтрокаТабличнойЧасти.ФизическийВес21;
			
			РассчитатьСтрокуПоВладельцу(СтрокаТабличнойЧасти, ?(Объект.Порядок, Ложь, Истина), Ложь);
			РассчитатьФизическийВесПослеПоВладельцу(СтрокаТабличнойЧасти);
			
		КонецЦикла;
		
	КонецЕсли;
	
	// остаток положим на строку с максимальным значением базы распределения
	Если Разница <> 0 Тогда
		СтрокаТабличнойЧасти = Объект.РасчетПоВладельцам.Получить(Макс(СтрСМаксЗначением - 1, 0));
		СтрокаТабличнойЧасти.ФизическийВес21 = СтрокаТабличнойЧасти.ФизическийВес21 + Разница;
		РассчитатьСтрокуПоВладельцу(СтрокаТабличнойЧасти, ?(Объект.Порядок, Ложь, Истина), Ложь);
		РассчитатьФизическийВесПослеПоВладельцу(СтрокаТабличнойЧасти);
	КонецЕсли;
	
	РаспределитьВесПоОперациям();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьБазисРаспределенияОтходов(ИмяКолонки, ДляПустыхЗначений = Ложь)
	
	Для Каждого СтрокаТабличнойЧасти Из Объект.РасчетПоВладельцам Цикл
		
		Если Объект.ВидОперации = Перечисления.ИНАГРО_ВидыОперацийФорма34Сводная.ОбратныйРасчет Тогда
			
			Если  Объект.ПроводилиОчистку
				И СтрокаТабличнойЧасти.ПроводилиОчистку
				И СтрокаТабличнойЧасти.СорнаяПримесь1 > Объект.СорнаяПримесь2 Тогда
				
				Если ДляПустыхЗначений Тогда
					Если ЗначениеЗаполнено(СтрокаТабличнойЧасти[ИмяКолонки]) Тогда
						СтрокаТабличнойЧасти.БазисРаспределенияОтходов = 0;
						Продолжить;
					КонецЕсли;
				КонецЕсли;
				
				СтрокаТабличнойЧасти.БазисРаспределенияОтходов = Окр((СтрокаТабличнойЧасти.СорнаяПримесь1 - СтрокаТабличнойЧасти.СорнаяПримесь2) / 100 * СтрокаТабличнойЧасти.ФизическийВес2);
				
			Иначе
				
				СтрокаТабличнойЧасти.БазисРаспределенияОтходов = 0;
				
			КонецЕсли;
			
		Иначе
			
			Если  Объект.ПроводилиОчистку
				И СтрокаТабличнойЧасти.ПроводилиОчистку
				И СтрокаТабличнойЧасти.СорнаяПримесь1 > Объект.СорнаяПримесь2 Тогда
				
				Если ДляПустыхЗначений Тогда
					Если ЗначениеЗаполнено(СтрокаТабличнойЧасти[ИмяКолонки]) Тогда
						СтрокаТабличнойЧасти.БазисРаспределенияОтходов = 0;
						Продолжить;
					КонецЕсли;
				КонецЕсли;
				
				СтрокаТабличнойЧасти.БазисРаспределенияОтходов = Окр((СтрокаТабличнойЧасти.СорнаяПримесь1 - Объект.СорнаяПримесь2) / 100 * СтрокаТабличнойЧасти.ФизическийВес1);
				
			Иначе
				СтрокаТабличнойЧасти.БазисРаспределенияОтходов = 0;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ВсегоУбыльОтОчистки = Объект.РасчетПоВладельцам.Итог("БазисРаспределенияОтходов");
	
	Если ВсегоУбыльОтОчистки = 0 Тогда
		Возврат;
	КонецЕсли;
	
	МаксЗначениеБазисРаспределенияОтходов      = 0;
	СтрСМаксЗначениемБазисРаспределенияОтходов = 1;
	
	Для Каждого СтрокаТабличнойЧасти Из Объект.РасчетПоВладельцам Цикл
		
		СтрокаТабличнойЧасти.БазисРаспределенияОтходов = Окр(?(ВсегоУбыльОтОчистки <> 0, СтрокаТабличнойЧасти.БазисРаспределенияОтходов * 100 / ВсегоУбыльОтОчистки, 0), 2);
		
		Если СтрокаТабличнойЧасти.БазисРаспределенияОтходов > МаксЗначениеБазисРаспределенияОтходов Тогда
			МаксЗначениеБазисРаспределенияОтходов = СтрокаТабличнойЧасти.БазисРаспределенияОтходов;
			СтрСМаксЗначениемБазисРаспределенияОтходов = СтрокаТабличнойЧасти.НомерСтроки;
		КонецЕсли;
		
	КонецЦикла;
	
	// остаток положим на строку с максимальным значением базы распределения
	ВсегоБазисРаспределенияОтходов = Объект.РасчетПоВладельцам.Итог("БазисРаспределенияОтходов");
	Если ВсегоБазисРаспределенияОтходов <> 100 Тогда
		Разница = 100 - ВсегоБазисРаспределенияОтходов;
		СтрокаТабличнойЧасти = Объект.РасчетПоВладельцам.Получить(СтрСМаксЗначениемБазисРаспределенияОтходов - 1);
		СтрокаТабличнойЧасти.БазисРаспределенияОтходов = СтрокаТабличнойЧасти.БазисРаспределенияОтходов + Разница;
	КонецЕсли
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьСтрокуПоВладельцу(СтрокаТабличнойЧасти, РассчитатьСушку, РассчитатьОчистку)
	
	Если (Объект.Влажность2 > СтрокаТабличнойЧасти.Влажность1) Тогда
		СтрокаТабличнойЧасти.ПроводилиСушку = Ложь;
	КонецЕсли;
	
	Если (Объект.СорнаяПримесь2 > СтрокаТабличнойЧасти.СорнаяПримесь1) Тогда
		СтрокаТабличнойЧасти.ПроводилиОчистку = Ложь;
	КонецЕсли;
	
	Если НЕ Объект.ВидДокумента = Перечисления.ИНАГРО_ВидыАктовОчисткиСушки.Индивидуальный
		  И СтрокаТабличнойЧасти.ИндивидуальныйРасчет Тогда
		  
		ПартияЗерна_ = ПолучитьПартиюЗернаНаДату(СтрокаТабличнойЧасти.РеестрТТН);
		
		Если ПартияЗерна_ = Неопределено Тогда
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='По реестру %1 не найдены значения, строка %2 не рассчиталась!';uk='За реєстром %1 не знайдені значення, рядок %2 не розрахувався!'"), СтрокаТабличнойЧасти.РеестрТТН, СтрокаТабличнойЧасти.НомерСтроки);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			Возврат;
		КонецЕсли;
		
		Если Объект.Порядок = Истина Тогда //сначала сушим потом чистим
			
			Объект.Влажность8 = ?(Объект.Влажность8 = 0, Объект.Влажность2, Объект.Влажность8);	
			
			Если РассчитатьСушку Тогда
				
				//СУШКА
				Если СтрокаТабличнойЧасти.ПроводилиСушку И Объект.ПроводилиСушку Тогда
					Влажность2_П = ПартияЗерна_.ВлажностьИндивидуальная;
					СтрокаТабличнойЧасти.СнижениеВлажности = 100 * (СтрокаТабличнойЧасти.Влажность1-Влажность2_П) / (100-Влажность2_П);
					СтрокаТабличнойЧасти.Влажность2        = Влажность2_П;
					СтрокаТабличнойЧасти.УбыльОтСушки   = ПартияЗерна_.УбыльОтСушки;
				Иначе
					СтрокаТабличнойЧасти.СнижениеВлажности = 0;
					СтрокаТабличнойЧасти.Влажность2        = СтрокаТабличнойЧасти.Влажность1;
					СтрокаТабличнойЧасти.УбыльОтСушки   = 0;
				КонецЕсли;
				
				СтрокаТабличнойЧасти.ФизическийВес2 = СтрокаТабличнойЧасти.ФизическийВес1 - СтрокаТабличнойЧасти.УбыльОтСушки;
				
			КонецЕсли;
			
			Если РассчитатьОчистку Тогда
				
				СтрокаТабличнойЧасти.ФизическийВес2 = СтрокаТабличнойЧасти.ФизическийВес1 - СтрокаТабличнойЧасти.УбыльОтСушки;
				СтрокаТабличнойЧасти.УбыльОтОчистки = 0;			
				
				// ОЧИСТКА                 
				Если СтрокаТабличнойЧасти.ПроводилиОчистку И Объект.ПроводилиОчистку Тогда
					
					СтрокаТабличнойЧасти.ФизическийВес21 = ПартияЗерна_.ВесПобочногоПродукта;
					СтрокаТабличнойЧасти.ФизическийВес31 = ПартияЗерна_.ВесОтходов1Кат;
					СтрокаТабличнойЧасти.ФизическийВес32 = ПартияЗерна_.ВесОтходов2Кат;
					СтрокаТабличнойЧасти.УбыльОтОчистки  = ПартияЗерна_.ВесОтходов3Кат;
					
					ОтнятьОтходы(СтрокаТабличнойЧасти);
					
					СтрокаТабличнойЧасти.СорнаяПримесь2   = ПартияЗерна_.СорнаяПримесьИндивидуальная;
					СтрокаТабличнойЧасти.ЗерноваяПримесь2 = Объект.ЗерноваяПримесь2;
					
				Иначе
					
					СтрокаТабличнойЧасти.УбыльОтОчистки   = 0;
					СтрокаТабличнойЧасти.СорнаяПримесь2   = СтрокаТабличнойЧасти.СорнаяПримесь1;
					СтрокаТабличнойЧасти.ЗерноваяПримесь2 = СтрокаТабличнойЧасти.ЗерноваяПримесь1;				
					СтрокаТабличнойЧасти.ФизическийВес21 = 0;
					СтрокаТабличнойЧасти.ФизическийВес31 = 0;
					СтрокаТабличнойЧасти.ФизическийВес32 = 0;
					
				КонецЕсли;
				
				СтрокаТабличнойЧасти.ФизическийВес3 = СтрокаТабличнойЧасти.УбыльОтОчистки;
				СтрокаТабличнойЧасти.УбыльОтОчистки = СтрокаТабличнойЧасти.ФизическийВес3;
				СтрокаТабличнойЧасти.ЗачетныйВес    = СтрокаТабличнойЧасти.ФизическийВес3;			
				СтрокаТабличнойЧасти.ФизическийВес2 = СтрокаТабличнойЧасти.ФизическийВес2 - СтрокаТабличнойЧасти.УбыльОтОчистки;
				
			КонецЕсли;
			
		Иначе // сначала чистим, потом сушим
			
			Объект.Влажность8 = ?(Объект.Влажность8 = 0, Объект.Влажность1, Объект.Влажность8);
			
			Если РассчитатьОчистку Тогда
				
				СтрокаТабличнойЧасти.ФизическийВес3 = 0;
				
				// ОЧИСТКА				
				Если СтрокаТабличнойЧасти.ПроводилиОчистку И Объект.ПроводилиОчистку Тогда
					
					СтрокаТабличнойЧасти.ФизическийВес21 = ПартияЗерна_.ВесПобочногоПродукта;
					СтрокаТабличнойЧасти.ФизическийВес31 = ПартияЗерна_.ВесОтходов1Кат;
					СтрокаТабличнойЧасти.ФизическийВес32 = ПартияЗерна_.ВесОтходов2Кат;
					СтрокаТабличнойЧасти.УбыльОтОчистки  = ПартияЗерна_.ВесОтходов3Кат;
					
					ОтнятьОтходы(СтрокаТабличнойЧасти);
					
					СтрокаТабличнойЧасти.СорнаяПримесь2   = ПартияЗерна_.СорнаяПримесьИндивидуальная;
					СтрокаТабличнойЧасти.ЗерноваяПримесь2 = Объект.ЗерноваяПримесь2;
					
				Иначе
					
					СтрокаТабличнойЧасти.УбыльОтОчистки   = 0;
					СтрокаТабличнойЧасти.СорнаяПримесь2   = СтрокаТабличнойЧасти.СорнаяПримесь1;
					СтрокаТабличнойЧасти.ЗерноваяПримесь2 = СтрокаТабличнойЧасти.ЗерноваяПримесь1;				
					СтрокаТабличнойЧасти.ФизическийВес21 = 0;
					СтрокаТабличнойЧасти.ФизическийВес31 = 0;
					СтрокаТабличнойЧасти.ФизическийВес32 = 0;
					
				КонецЕсли;
				
				СтрокаТабличнойЧасти.ФизическийВес3 = СтрокаТабличнойЧасти.УбыльОтОчистки;
				СтрокаТабличнойЧасти.УбыльОтОчистки = СтрокаТабличнойЧасти.ФизическийВес3;
				СтрокаТабличнойЧасти.ЗачетныйВес    = СтрокаТабличнойЧасти.ФизическийВес3;
				СтрокаТабличнойЧасти.ФизическийВес2 = СтрокаТабличнойЧасти.ФизическийВес2 - СтрокаТабличнойЧасти.УбыльОтОчистки;
				
			КонецЕсли;
			
			Если РассчитатьСушку Тогда
				
				ОтнятьОтходы(СтрокаТабличнойЧасти);
				
				СтрокаТабличнойЧасти.ФизическийВес2    = СтрокаТабличнойЧасти.ФизическийВес2 - СтрокаТабличнойЧасти.УбыльОтОчистки;
				СтрокаТабличнойЧасти.УбыльОтСушки      = 0;
				СтрокаТабличнойЧасти.СнижениеВлажности = 0;
				
				// СУШКА
				Если СтрокаТабличнойЧасти.ПроводилиСушку И Объект.ПроводилиСушку Тогда
					
					Влажность2_П = ПартияЗерна_.ВлажностьИндивидуальная;
					СтрокаТабличнойЧасти.СнижениеВлажности = 100 * (СтрокаТабличнойЧасти.Влажность1-Влажность2_П) / (100-Влажность2_П);
					СтрокаТабличнойЧасти.Влажность2        = Влажность2_П;
					СтрокаТабличнойЧасти.УбыльОтСушки      = ПартияЗерна_.УбыльОтСушки;
					
				Иначе
					
					СтрокаТабличнойЧасти.СнижениеВлажности = 0;
					СтрокаТабличнойЧасти.Влажность2        = СтрокаТабличнойЧасти.Влажность1;
					
				КонецЕсли;
				
				СтрокаТабличнойЧасти.ФизическийВес2 = СтрокаТабличнойЧасти.ФизическийВес2 - СтрокаТабличнойЧасти.УбыльОтСушки;
				
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		Если Объект.Порядок = Истина Тогда // всначала сушим, потом чистим
			
			Объект.Влажность8 = ?(Объект.Влажность8 = 0, Объект.Влажность2, Объект.Влажность8);	
			
			Если РассчитатьСушку Тогда
				
				//СУШКА
				Если СтрокаТабличнойЧасти.ПроводилиСушку И Объект.ПроводилиСушку Тогда
					
					СтрокаТабличнойЧасти.СнижениеВлажности = 100 * (СтрокаТабличнойЧасти.Влажность1 - Объект.Влажность2) / (100 - Объект.Влажность2);
					СтрокаТабличнойЧасти.Влажность2        = Объект.Влажность2;
					
				Иначе
					
					СтрокаТабличнойЧасти.СнижениеВлажности = 0;
					СтрокаТабличнойЧасти.Влажность2        = СтрокаТабличнойЧасти.Влажность1;
					
				КонецЕсли;
				
				СтрокаТабличнойЧасти.УбыльОтСушки   = СтрокаТабличнойЧасти.ФизическийВес1 * СтрокаТабличнойЧасти.СнижениеВлажности / 100;
				СтрокаТабличнойЧасти.ФизическийВес2 = СтрокаТабличнойЧасти.ФизическийВес1 - СтрокаТабличнойЧасти.УбыльОтСушки;
				
			КонецЕсли;
			
			Если РассчитатьОчистку Тогда
				
				СтрокаТабличнойЧасти.ФизическийВес2 = СтрокаТабличнойЧасти.ФизическийВес1 - СтрокаТабличнойЧасти.УбыльОтСушки;
				СтрокаТабличнойЧасти.УбыльОтОчистки = 0;			
				
				// ОЧИСТКА                 
				Если СтрокаТабличнойЧасти.ПроводилиОчистку И Объект.ПроводилиОчистку Тогда
					
					Если Объект.СпособРасчетаКатегорийныхОтходов = Перечисления.ИНАГРО_СпособыРасчетаКатегорийныхОтходов.ПроцентОтРасчетногоВыходаОтходов Тогда
						
						СтрокаТабличнойЧасти.ФизическийВес21 = ПолучитьВесГодныхОтходов(СтрокаТабличнойЧасти.ФизическийВес2, СтрокаТабличнойЧасти.СорнаяПримесь1, Объект.СорнаяПримесь2, Объект.ПроцентПобочногоПродукта, Объект.СорнаяПримесь7);
						СтрокаТабличнойЧасти.ФизическийВес31 = ПолучитьВесГодныхОтходов(СтрокаТабличнойЧасти.ФизическийВес2, СтрокаТабличнойЧасти.СорнаяПримесь1, Объект.СорнаяПримесь2, Объект.ПроцентОтходов1Категории, Объект.СорнаяПримесь9);
						СтрокаТабличнойЧасти.ФизическийВес32 = ПолучитьВесГодныхОтходов(СтрокаТабличнойЧасти.ФизическийВес2, СтрокаТабличнойЧасти.СорнаяПримесь1, Объект.СорнаяПримесь2, Объект.ПроцентОтходов2Категории, Объект.СорнаяПримесь10);
						
					КонецЕсли;
					
					СтрокаТабличнойЧасти.УбыльОтОчистки  = РасчитатьУбыльОтЧистки(СтрокаТабличнойЧасти.ФизическийВес2,
																				  СтрокаТабличнойЧасти.СорнаяПримесь1,
																				  Объект.СорнаяПримесь2,
																				  СтрокаТабличнойЧасти.Влажность1,
																				?(СтрокаТабличнойЧасти.ПроводилиСушку, Объект.Влажность2, СтрокаТабличнойЧасти.Влажность1),
																				  СтрокаТабличнойЧасти.ФизическийВес21, СтрокаТабличнойЧасти.ФизическийВес31,
																				  СтрокаТабличнойЧасти.ФизическийВес32);
					
					ОтнятьОтходы(СтрокаТабличнойЧасти);
					
					СтрокаТабличнойЧасти.СорнаяПримесь2   = Объект.СорнаяПримесь2;
					СтрокаТабличнойЧасти.ЗерноваяПримесь2 = Объект.ЗерноваяПримесь2;
					
				Иначе
					
					СтрокаТабличнойЧасти.УбыльОтОчистки   = 0;
					СтрокаТабличнойЧасти.СорнаяПримесь2   = СтрокаТабличнойЧасти.СорнаяПримесь1;
					СтрокаТабличнойЧасти.ЗерноваяПримесь2 = СтрокаТабличнойЧасти.ЗерноваяПримесь1;
					
				КонецЕсли;
				
				СтрокаТабличнойЧасти.ФизическийВес3 = СтрокаТабличнойЧасти.УбыльОтОчистки;
				
				СкорректироватьУбыльОтОчистки(СтрокаТабличнойЧасти, СтрокаТабличнойЧасти.ФизическийВес3);
				
				СтрокаТабличнойЧасти.УбыльОтОчистки = СтрокаТабличнойЧасти.ФизическийВес3;
				СтрокаТабличнойЧасти.ЗачетныйВес    = СтрокаТабличнойЧасти.ФизическийВес3;			
				СтрокаТабличнойЧасти.ФизическийВес2 = СтрокаТабличнойЧасти.ФизическийВес2 - СтрокаТабличнойЧасти.УбыльОтОчистки;
				
			КонецЕсли;
			
		Иначе // сначала чистим, потом сушим
			
			Объект.Влажность8 = ?(Объект.Влажность8 = 0, Объект.Влажность1, Объект.Влажность8);
			
			Если РассчитатьОчистку Тогда
				
				СтрокаТабличнойЧасти.ФизическийВес3 = 0;
				
				// ОЧИСТКА				
				Если СтрокаТабличнойЧасти.ПроводилиОчистку И Объект.ПроводилиОчистку Тогда
					
					Если Объект.СпособРасчетаКатегорийныхОтходов = Перечисления.ИНАГРО_СпособыРасчетаКатегорийныхОтходов.ПроцентОтРасчетногоВыходаОтходов Тогда
						СтрокаТабличнойЧасти.ФизическийВес21  = ПолучитьВесГодныхОтходов(СтрокаТабличнойЧасти.ФизическийВес1, СтрокаТабличнойЧасти.СорнаяПримесь1, Объект.СорнаяПримесь2, Объект.ПроцентПобочногоПродукта, Объект.СорнаяПримесь7);
						СтрокаТабличнойЧасти.ФизическийВес31  = ПолучитьВесГодныхОтходов(СтрокаТабличнойЧасти.ФизическийВес1, СтрокаТабличнойЧасти.СорнаяПримесь1, Объект.СорнаяПримесь2, Объект.ПроцентОтходов1Категории, Объект.СорнаяПримесь9);
						СтрокаТабличнойЧасти.ФизическийВес32  = ПолучитьВесГодныхОтходов(СтрокаТабличнойЧасти.ФизическийВес1, СтрокаТабличнойЧасти.СорнаяПримесь1, Объект.СорнаяПримесь2, Объект.ПроцентОтходов2Категории, Объект.СорнаяПримесь10);
					КонецЕсли;
					
					СтрокаТабличнойЧасти.УбыльОтОчистки   = РасчитатьУбыльОтЧистки(СтрокаТабличнойЧасти.ФизическийВес1,
																				   СтрокаТабличнойЧасти.СорнаяПримесь1,
																				   Объект.СорнаяПримесь2,
																				   СтрокаТабличнойЧасти.Влажность1,
																				 ?(СтрокаТабличнойЧасти.ПроводилиСушку, Объект.Влажность2, СтрокаТабличнойЧасти.Влажность1),
																				   СтрокаТабличнойЧасти.ФизическийВес21,
																				   СтрокаТабличнойЧасти.ФизическийВес31,
																				   СтрокаТабличнойЧасти.ФизическийВес32);
					
					ОтнятьОтходы(СтрокаТабличнойЧасти);
					
					СтрокаТабличнойЧасти.СорнаяПримесь2   = Объект.СорнаяПримесь2;
					СтрокаТабличнойЧасти.ЗерноваяПримесь2 = Объект.ЗерноваяПримесь2;
					
				Иначе 
					
					СтрокаТабличнойЧасти.УбыльОтОчистки   = 0;
					СтрокаТабличнойЧасти.СорнаяПримесь2   = СтрокаТабличнойЧасти.СорнаяПримесь1;
					СтрокаТабличнойЧасти.ЗерноваяПримесь2 = СтрокаТабличнойЧасти.ЗерноваяПримесь1;
					
				КонецЕсли;
				
				СтрокаТабличнойЧасти.ФизическийВес3 = СтрокаТабличнойЧасти.УбыльОтОчистки;
				
				СкорректироватьУбыльОтОчистки(СтрокаТабличнойЧасти, СтрокаТабличнойЧасти.ФизическийВес3);
				
				СтрокаТабличнойЧасти.УбыльОтОчистки = СтрокаТабличнойЧасти.ФизическийВес3;
				СтрокаТабличнойЧасти.ЗачетныйВес    = СтрокаТабличнойЧасти.ФизическийВес3;
				СтрокаТабличнойЧасти.ФизическийВес2 = СтрокаТабличнойЧасти.ФизическийВес2 - СтрокаТабличнойЧасти.УбыльОтОчистки;
				
			КонецЕсли;
			
			Если РассчитатьСушку Тогда
				
				ОтнятьОтходы(СтрокаТабличнойЧасти);
				
				СтрокаТабличнойЧасти.ФизическийВес2    = СтрокаТабличнойЧасти.ФизическийВес2 - СтрокаТабличнойЧасти.УбыльОтОчистки;
				СтрокаТабличнойЧасти.УбыльОтСушки      = 0;
				СтрокаТабличнойЧасти.СнижениеВлажности = 0;
				
				// СУШКА
				Если СтрокаТабличнойЧасти.ПроводилиСушку И Объект.ПроводилиСушку Тогда
					
					СтрокаТабличнойЧасти.СнижениеВлажности = 100 * (СтрокаТабличнойЧасти.Влажность1 - Объект.Влажность2) / (100 - Объект.Влажность2);								
					СтрокаТабличнойЧасти.Влажность2        = Объект.Влажность2;
					
				Иначе
					
					СтрокаТабличнойЧасти.СнижениеВлажности = 0;
					СтрокаТабличнойЧасти.Влажность2        = СтрокаТабличнойЧасти.Влажность1;
					
				КонецЕсли;
				
				СтрокаТабличнойЧасти.УбыльОтСушки   = ?(СтрокаТабличнойЧасти.ФизическийВес2 > 0, СтрокаТабличнойЧасти.ФизическийВес2, СтрокаТабличнойЧасти.ФизическийВес1) * СтрокаТабличнойЧасти.СнижениеВлажности / 100;
				СтрокаТабличнойЧасти.ФизическийВес2 = СтрокаТабличнойЧасти.ФизическийВес2 - СтрокаТабличнойЧасти.УбыльОтСушки;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если СтрокаТабличнойЧасти.УбыльОтСушки <> 0 Тогда
		СтрокаТабличнойЧасти.Посушено = Истина;
	Иначе
		СтрокаТабличнойЧасти.Посушено = Ложь;
	КонецЕсли;
	
	Если (СтрокаТабличнойЧасти.ФизическийВес21 + СтрокаТабличнойЧасти.ФизическийВес31 + СтрокаТабличнойЧасти.ФизическийВес32 + СтрокаТабличнойЧасти.ФизическийВес3) Тогда
		СтрокаТабличнойЧасти.Очищено = Истина;
	Иначе
		СтрокаТабличнойЧасти.Очищено = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьПартиюЗернаНаДату(РеестрТТН_)
	
	Запрос = Новый Запрос;	
		
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаРегистра.*
		|ИЗ
		|	РегистрСведений.ИНАГРО_ДанныеПоКачествуЗерна.СрезПоследних(
		|			&МоментВремени,
		|			ПартияЗерна = &ПартияЗерна
		|				И Регистратор <> &Ссылка) КАК ТаблицаРегистра";
	
	Запрос.УстановитьПараметр("МоментВремени", Объект.Дата);
	Запрос.УстановитьПараметр("ПартияЗерна",   РеестрТТН_);
	Запрос.УстановитьПараметр("Ссылка",        Объект.Ссылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка;
	Иначе
		Возврат Неопределено;
	КонецЕсли;	
	
КонецФункции

&НаСервере
Процедура ОтнятьОтходы(СтрокаТабличнойЧасти)
	
	Если Объект.Порядок Тогда
		СтрокаТабличнойЧасти.физическийВес2 = СтрокаТабличнойЧасти.ФизическийВес2
											- СтрокаТабличнойЧасти.ФизическийВес31
											- СтрокаТабличнойЧасти.ФизическийВес32
											- СтрокаТабличнойЧасти.ФизическийВес21;						
	Иначе
		СтрокаТабличнойЧасти.физическийВес2 = СтрокаТабличнойЧасти.ФизическийВес1
											- СтрокаТабличнойЧасти.ФизическийВес31
											- СтрокаТабличнойЧасти.ФизическийВес32
											- СтрокаТабличнойЧасти.ФизическийВес21;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьВесГодныхОтходов(ВесДоОчистки, СорнаяПримесьДо, СорнаяПримесьПосле, ПроцентГодныхОтходов, СорнаяПримесьГодныхОтходов, ПроцентПолезногоЗернаВГодныхОтходах = 0)
	
	Рез = 0;
	
	// Вес чистого сора
	ВесЧистогоСора        = Окр(ВесДоОчистки * (СорнаяПримесьДо - СорнаяПримесьПосле) / 100, 0);	
	ВесСораВГодныхОтходах = Окр(ВесЧистогоСора * ПроцентГодныхОтходов / 100, 0);	
	ВесГодныхОтходов      = ?(СорнаяПримесьГодныхОтходов = 0, 0, Окр(ВесСораВГодныхОтходах * 100 / СорнаяПримесьГодныхОтходов, 0));
	
	// Расчитаем процент полезного зерна в годных отходах для расчета зерновой примеси в партии после очистки
	ПроцентПолезногоЗернаВГодныхОтходах = ?(ВесДоОчистки = 0, 0, (ВесГодныхОтходов - ВесСораВГодныхОтходах) * 100 / ВесДоОчистки);
	
	Рез = ВесГодныхОтходов;
	
	Возврат Рез;
	
КонецФункции

&НаСервере
Функция РасчитатьУбыльОтЧистки(ВесДоОчистки, СорнаяПримесьДо, СорнаяПримесьПосле, ВлажностьДо, ВлажностьПосле, ВесПП, ВесОтходов1Кат, ВесОтходов2Кат)
	
	Если (СорнаяПримесьДо - СорнаяПримесьПосле) < 0 Тогда
		Возврат 0;
	КонецЕсли;
	
	Если Объект.СпособРасчетаУбылиОтОчистки = Перечисления.ИНАГРО_СпособыРасчетаУбылиОтОчистки.СУчетомУбылиОтСушки Тогда
		
		Если (ВлажностьДо - ВлажностьПосле) < 0 Тогда
			СнижениеВлажности = 0;
		Иначе		
			СнижениеВлажности = Окр(100 * (ВлажностьДо - ВлажностьПосле)/(100 - ВлажностьПосле), 2);
		КонецЕсли;
		
		УбыльОтОчистки = Окр((СорнаяПримесьДо - СорнаяПримесьПосле) * 100 / (100 - СорнаяПримесьПосле), 2);  //Не учитываем влажность если сначала чистим
		УбыльОтОчистки = УбыльОтОчистки * ВесДоОчистки / 100;
		
		Если (ВесПП + ВесОтходов1Кат + ВесОтходов2Кат) > 0 Тогда
			// получим ц/% отходов и отнимем ц/% 1кат,2кат,п.п.
			УбыльОтОчистки = Окр(УбыльОтОчистки * Объект.СорнаяПримесь8 / 100, 0);
			УбыльОтОчистки = ОтнятьСорПродуктов(УбыльОтОчистки, ВесПП, ВесОтходов1Кат, ВесОтходов2Кат);
			УбыльОтОчистки = ?(Объект.СорнаяПримесь8 = 0, 0, Окр(УбыльОтОчистки / Объект.СорнаяПримесь8 * 100));
		КонецЕсли;
		
	Иначе
		
		УбыльОтОчистки = (СорнаяПримесьДо - СорнаяПримесьПосле) / 100 * ВесДоОчистки;
		
		Если Объект.СпособРасчетаКатегорийныхОтходов = Перечисления.ИНАГРО_СпособыРасчетаКатегорийныхОтходов.ПроцентОтРасчетногоВыходаОтходов Тогда
			УбыльОтОчистки = ПолучитьПроцентВыходаНегодныхОтходов() * УбыльОтОчистки / 100;
		Иначе			
			УбыльОтОчистки = ОтнятьСорПродуктов(УбыльОтОчистки,ВесПП, ВесОтходов1Кат, ВесОтходов2Кат);
		КонецЕсли;
		
		УбыльОтОчистки = ?(Объект.СорнаяПримесь8 = 0, 0, Окр(УбыльОтОчистки / Объект.СорнаяПримесь8 * 100));		
		
	КонецЕсли;
	
	УбыльОтОчистки = Окр(УбыльОтОчистки);
	
	Возврат УбыльОтОчистки;
	
КонецФункции

&НаСервере
Функция ОтнятьСорПродуктов(УбыльОтОчистки, ВесПоб, Вес1кат, Вес2кат)
	
	Отходы3кат           = УбыльОтОчистки;
	СорВПобочномПродукте = Окр(ВесПоб * Объект.СорнаяПримесь7/ 100, 0);
	СорВОтх1кат          = Окр(Вес1кат * Объект.СорнаяПримесь9 / 100, 0);
	СорВОтх2кат          = Окр(Вес2кат * Объект.СорнаяПримесь10 / 100, 0);
	Отходы3кат           = УбыльОтОчистки - СорВПобочномПродукте - СорВОтх1кат - СорВОтх2кат;
	
	Возврат Отходы3кат;
	
КонецФункции

&НаСервере
Процедура СкорректироватьУбыльОтОчистки(СтрокаТабличнойЧасти = Неопределено, ВесУбылиОтОчистки)
	
	Если Объект.СпособРасчетаУбылиОтОчистки = Перечисления.ИНАГРО_СпособыРасчетаУбылиОтОчистки.СУчетомУбылиОтСушки Тогда
		Возврат;
	КонецЕсли;
	
	Ключ                  = 0;
	ИтогЦентнероПроцентов = 0;
	
	Если Объект.ПогрешностьПоОчистке >= 0 Тогда
		
		Если СтрокаТабличнойЧасти <> Неопределено Тогда
			
			Если Объект.Порядок Тогда
				ВесДоОчистки = СтрокаТабличнойЧасти.ФизическийВес1 - СтрокаТабличнойЧасти.УбыльОтСушки;
			Иначе 
				ВесДоОчистки = СтрокаТабличнойЧасти.ФизическийВес1;
			КонецЕсли;
			
			ЭталонныйИтогЦентнероПроцентов = Объект.ПогрешностьПоОчистке * ВесДоОчистки / 100;
			СтрокаТабличнойЧасти.БалансСорнойПримесиПоВладельцу = РассчитатьБалансСорнойПримесиПоВладельцу(СтрокаТабличнойЧасти, ИтогЦентнероПроцентов);
			
			Выход = Ложь;
			
			Пока НЕ Выход Цикл
				
				Если Ключ > 50 ИЛИ ВесУбылиОтОчистки = 0 Тогда
					Прервать;
				КонецЕсли;
				
				Ключ = Ключ + 1;
				
				СтрокаТабличнойЧасти.БалансСорнойПримесиПоВладельцу = РассчитатьБалансСорнойПримесиПоВладельцу(СтрокаТабличнойЧасти, ИтогЦентнероПроцентов);
				Поправка = Окр((ИтогЦентнероПроцентов - ЭталонныйИтогЦентнероПроцентов) * 100 / Объект.СорнаяПримесь8);
				
				Если    СтрокаТабличнойЧасти.БалансСорнойПримесиПоВладельцу > Объект.ПогрешностьПоОчистке
					ИЛИ СтрокаТабличнойЧасти.БалансСорнойПримесиПоВладельцу < Объект.ПогрешностьПоОчистке Тогда
					СтрокаТабличнойЧасти.ФизическийВес3 = СтрокаТабличнойЧасти.ФизическийВес3 + Поправка;					
					Продолжить;
				КонецЕсли;
				
				СтрокаТабличнойЧасти.УбыльОтОчистки = СтрокаТабличнойЧасти.ФизическийВес3;
				Выход = Истина;
				
			КонецЦикла;
			
		Иначе
			
			ВесДоОчистки = Объект.ФизическийВес3;
			ЭталонныйИтогЦентнероПроцентов = Объект.ПогрешностьПоОчистке * ВесДоОчистки / 100;			
			БалансСора = РассчитатьБалансСорнойПримеси(ИтогЦентнероПроцентов,
											  Объект.ФизическийВес3, Объект.СорнаяПримесь3,
											  Объект.ФизическийВес4, Объект.СорнаяПримесь4,
											  ВесУбылиОтОчистки, Объект.СорнаяПримесь8,
											  Объект.ФизическийВес7, Объект.СорнаяПримесь7,
											  Объект.ФизическийВес9, Объект.СорнаяПримесь9,
											  Объект.ФизическийВес10, Объект.СорнаяПримесь10);
											 
			Выход = Ложь;
			
			Пока НЕ Выход Цикл
				
				Если Ключ > 50 или ВесУбылиОтОчистки = 0 Тогда
					Прервать;
				КонецЕсли;
				
				Ключ = Ключ + 1;
				
				БалансСора = РассчитатьБалансСорнойПримеси(ИтогЦентнероПроцентов,
												  Объект.ФизическийВес3, Объект.СорнаяПримесь3,
											     (Объект.ФизическийВес3 - ВесУбылиОтОчистки - Объект.ФизическийВес7 - Объект.ФизическийВес9 - Объект.ФизическийВес10), Объект.СорнаяПримесь4,
												  ВесУбылиОтОчистки, Объект.СорнаяПримесь8,
												  Объект.ФизическийВес7, Объект.СорнаяПримесь7,
												  Объект.ФизическийВес9, Объект.СорнаяПримесь9,
												  Объект.ФизическийВес10, Объект.СорнаяПримесь10);
												 
				Поправка = Окр((ИтогЦентнероПроцентов - ЭталонныйИтогЦентнероПроцентов) * 100 / Объект.СорнаяПримесь8);
				
				Если БалансСора > Объект.ПогрешностьПоОчистке ИЛИ БалансСора < Объект.ПогрешностьПоОчистке Тогда
					ВесУбылиОтОчистки = ВесУбылиОтОчистки + Поправка;					
					Продолжить;
				КонецЕсли;
				
				Выход = Истина;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Функция РассчитатьБалансСорнойПримесиПоВладельцу(СтрокаТабличнойЧасти, ИтогЦентнероПроцентов = 0)
	
	БалансСора = 0;
	
	Если СтрокаТабличнойЧасти.ПроводилиОчистку Тогда
		
		Если Объект.ВидОперации = Перечисления.ИНАГРО_ВидыОперацийФорма34Сводная.ПрямойРасчет Тогда
			СорнаяПримесьПосле = Объект.СорнаяПримесь2;
		Иначе
			СорнаяПримесьПосле = СтрокаТабличнойЧасти.СорнаяПримесь2;
		КонецЕсли;
		
		ИтогЦентнероПроцентов = 0;
		
		Если Объект.Порядок Тогда
			
			БалансСора = РассчитатьБалансСорнойПримеси(ИтогЦентнероПроцентов,
											 (СтрокаТабличнойЧасти.ФизическийВес1 - СтрокаТабличнойЧасти.УбыльОтСушки), СтрокаТабличнойЧасти.СорнаяПримесь1,
											  СтрокаТабличнойЧасти.ФизическийВес2, СорнаяПримесьПосле,
											  СтрокаТабличнойЧасти.ФизическийВес3, Объект.СорнаяПримесь8,
											  СтрокаТабличнойЧасти.ФизическийВес21, Объект.СорнаяПримесь7,
											  СтрокаТабличнойЧасти.ФизическийВес31, Объект.СорнаяПримесь9,
											  СтрокаТабличнойЧасти.ФизическийВес32, Объект.СорнаяПримесь10);
			
		Иначе
											 
			БалансСора = РассчитатьБалансСорнойПримеси(ИтогЦентнероПроцентов,
											  СтрокаТабличнойЧасти.ФизическийВес1, СтрокаТабличнойЧасти.СорнаяПримесь1,
											 (СтрокаТабличнойЧасти.ФизическийВес1 - СтрокаТабличнойЧасти.ФизическийВес21 - СтрокаТабличнойЧасти.ФизическийВес3 - СтрокаТабличнойЧасти.ФизическийВес31 - СтрокаТабличнойЧасти.ФизическийВес32), СорнаяПримесьПосле,
											  СтрокаТабличнойЧасти.ФизическийВес3, Объект.СорнаяПримесь8,
											  СтрокаТабличнойЧасти.ФизическийВес21, Объект.СорнаяПримесь7,
											  СтрокаТабличнойЧасти.ФизическийВес31, Объект.СорнаяПримесь9,
											  СтрокаТабличнойЧасти.ФизическийВес32, Объект.СорнаяПримесь10);			
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат БалансСора;
	
КонецФункции


// не является ошибкой конфигурации функция будет использоватся
//
&НаСервере
Функция РассчитатьБалансСорнойПримеси(ИтогЦентнероПроцентов,
	                                  ВесДо, СорнаяПримесьДо,
									  ВесПосле, СорнаяПримесьПосле,
									  ВесОтходов3кат, СорнаяПримесьОтходов3кат,
									  ВесПобочногоПродукта = 0, СорнаяПримесьПобочногоПродукта = 0,
									  ВесОтходов1кат = 0, СорнаяПримесьОтходов1кат = 0,
									  ВесОтходов2кат = 0, СорнаяПримесьОтходов2кат = 0)
	
	БалансСора                          = 0;
	ИтогЦентнероПроцентов               = 0;
	
	ВесДоПоСорнойПримеси                = Окр(ВесДо * СорнаяПримесьДо / 100);	
	ВесПослеПоСорнойПримеси             = Окр(ВесПосле * СорнаяПримесьПосле / 100);
	ВесОтходов3катПоСорнойПримеси       = Окр(ВесОтходов3кат * СорнаяПримесьОтходов3кат / 100);
	ВесПобочногоПродуктаПоСорнойПримеси = Окр(ВесПобочногоПродукта * СорнаяПримесьПобочногоПродукта / 100);
	ВесОтходов1катПоСорнойПримеси       = Окр(ВесОтходов1кат * СорнаяПримесьОтходов1кат / 100);
	ВесОтходов2катПоСорнойПримеси       = Окр(ВесОтходов2кат * СорнаяПримесьОтходов2кат / 100);
	ИтогЦентнероПроцентов               = ВесДоПоСорнойПримеси - ВесПослеПоСорнойПримеси - ВесОтходов3катПоСорнойПримеси
											- ВесПобочногоПродуктаПоСорнойПримеси - ВесОтходов1катПоСорнойПримеси - ВесОтходов2катПоСорнойПримеси;
	
	БалансСора                          = ?(ВесДо = 0, 0, Окр(ИтогЦентнероПроцентов / ВесДо * 100, 2));
	
	Возврат БалансСора;
	
КонецФункции 

&НаСервере
Процедура РассчитатьФизическийВесПослеПоВладельцу(СтрокаТабличнойЧасти)
	
	Если Объект.ВидОперации = Перечисления.ИНАГРО_ВидыОперацийФорма34Сводная.ОбратныйРасчет Тогда
		СтрокаТабличнойЧасти.ФизическийВес1 = СтрокаТабличнойЧасти.ФизическийВес2
		                                    + СтрокаТабличнойЧасти.УбыльОтОчистки
											+ СтрокаТабличнойЧасти.УбыльОтСушки
											+ СтрокаТабличнойЧасти.ФизическийВес21
											+ СтрокаТабличнойЧасти.ФизическийВес31
											+ СтрокаТабличнойЧасти.ФизическийВес32;
	Иначе		
		СтрокаТабличнойЧасти.ФизическийВес2 = СтрокаТабличнойЧасти.ФизическийВес1
		                                    - СтрокаТабличнойЧасти.УбыльОтОчистки
											- СтрокаТабличнойЧасти.УбыльОтСушки
											- СтрокаТабличнойЧасти.ФизическийВес21
											- СтрокаТабличнойЧасти.ФизическийВес31
											- СтрокаТабличнойЧасти.ФизическийВес32;
	КонецЕсли;
	
	РассчитатьИтоги();
	
КонецПроцедуры

&НаСервере
Процедура РаспределитьВесПоОперациям()
	
	//ОбнулитьДополнительныеПеременные();
	
	ВесПоВлажностиДоОчистки          = 0;
	ВесПоВлажностиПослеОчистки       = 0;
	ВесПоВлажностиДоСушки            = 0;
	ВесПоВлажностиПослеСушки         = 0;
	ВесПоСорнойПримесиДоОчистки      = 0;
	ВесПоСорнойПримесиПослеОчистки   = 0;
	ВесПоСорнойПримесиДоСушки        = 0;
	ВесПоСорнойПримесиПослеСушки     = 0;
	ВесПоЗерновойПримесиДоОчистки    = 0;
	ВесПоЗерновойПримесиПослеОчистки = 0;
	ВесПоЗерновойПримесиДоСушки      = 0;
	ВесПоЗерновойПримесиПослеСушки   = 0;
	ФизВесДоОчистки                  = 0;
	ФизВесПослеОчистки               = 0;
	ФизВесДоСушки                    = 0;
	ФизВесПослеСушки                 = 0;	

	
	Если Объект.Порядок Тогда // сначала сушим, потом чистим
		
		Для Каждого СтрокаТабличнойЧасти Из Объект.РасчетПоВладельцам Цикл
			
			Если СтрокаТабличнойЧасти.ПроводилиСушку И Объект.ПроводилиСушку Тогда
				
				ФизВесДоСушки                 = ФизВесДоСушки + СтрокаТабличнойЧасти.ФизическийВес1;					
				ВесПоВлажностиДоСушки         = ВесПоВлажностиДоСушки + Окр(СтрокаТабличнойЧасти.ФизическийВес1 * СтрокаТабличнойЧасти.Влажность1 / 100);
				ВесПоСорнойПримесиДоСушки     = ВесПоСорнойПримесиДоСушки + Окр(СтрокаТабличнойЧасти.ФизическийВес1 * СтрокаТабличнойЧасти.СорнаяПримесь1 / 100);
				ВесПоЗерновойПримесиДоСушки   = ВесПоЗерновойПримесиДоСушки + Окр(СтрокаТабличнойЧасти.ФизическийВес1 * СтрокаТабличнойЧасти.ЗерноваяПримесь1 / 100);				
				
				ФизВесПослеСушки              = ФизВесПослеСушки + СтрокаТабличнойЧасти.ФизическийВес1 - СтрокаТабличнойЧасти.УбыльОтСушки;
				
			КонецЕсли;
			
			Если СтрокаТабличнойЧасти.ПроводилиОчистку И Объект.ПроводилиОчистку Тогда
				
				ФизВесДоОчистки               = ФизВесДоОчистки + СтрокаТабличнойЧасти.ФизическийВес1 - СтрокаТабличнойЧасти.УбыльОтСушки;
				ВесПоВлажностиДоОчистки       = ВесПоВлажностиДоОчистки + Окр((СтрокаТабличнойЧасти.ФизическийВес1 - СтрокаТабличнойЧасти.УбыльОтСушки) * ?(СтрокаТабличнойЧасти.УбыльОтСушки > 0, Объект.Влажность2, СтрокаТабличнойЧасти.Влажность1) / 100);
				ВесПоСорнойПримесиДоОчистки   = ВесПоСорнойПримесиДоОчистки + Окр((СтрокаТабличнойЧасти.ФизическийВес1 - СтрокаТабличнойЧасти.УбыльОтСушки) * СтрокаТабличнойЧасти.СорнаяПримесь1 / 100);
				ВесПоЗерновойПримесиДоОчистки = ВесПоЗерновойПримесиДоОчистки+Окр((СтрокаТабличнойЧасти.ФизическийВес1 - СтрокаТабличнойЧасти.УбыльОтСушки) * СтрокаТабличнойЧасти.ЗерноваяПримесь1 / 100);	
				
				ФизВесПослеОчистки            = ФизВесПослеОчистки + СтрокаТабличнойЧасти.ФизическийВес2;
				ВесПоВлажностиПослеОчистки    = ВесПоВлажностиПослеОчистки + Окр(СтрокаТабличнойЧасти.ФизическийВес2 * ?(СтрокаТабличнойЧасти.УбыльОтСушки > 0, Объект.Влажность2, СтрокаТабличнойЧасти.Влажность1) / 100);
				
				СтрокаТабличнойЧасти.БалансСорнойПримесиПоВладельцу = РассчитатьБалансСорнойПримесиПоВладельцу(СтрокаТабличнойЧасти);
				
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе // сначала сушим, потом чистим
		
		Для Каждого СтрокаТабличнойЧасти Из Объект.РасчетПоВладельцам Цикл
			
			УбыльОтОчистки = СтрокаТабличнойЧасти.УбыльОтОчистки + СтрокаТабличнойЧасти.ФизическийВес21 + СтрокаТабличнойЧасти.ФизическийВес31 + СтрокаТабличнойЧасти.ФизическийВес32;
			
			Если СтрокаТабличнойЧасти.ПроводилиОчистку И Объект.ПроводилиОчистку Тогда
				
				ФизВесДоОчистки                = ФизВесДоОчистки + СтрокаТабличнойЧасти.ФизическийВес1;
				ВесПоВлажностиДоОчистки        = ВесПоВлажностиДоОчистки + Окр(СтрокаТабличнойЧасти.ФизическийВес1 * СтрокаТабличнойЧасти.Влажность1 / 100);
				ВесПоСорнойПримесиДоОчистки    = ВесПоСорнойПримесиДоОчистки + Окр(СтрокаТабличнойЧасти.ФизическийВес1 * СтрокаТабличнойЧасти.СорнаяПримесь1 /100);				
				ВесПоЗерновойПримесиДоОчистки  = ВесПоЗерновойПримесиДоОчистки + Окр(СтрокаТабличнойЧасти.ФизическийВес1 * СтрокаТабличнойЧасти.ЗерноваяПримесь1 /100);
				
				ФизВесПослеОчистки             = ФизВесПослеОчистки + СтрокаТабличнойЧасти.ФизическийВес1 - УбыльОтОчистки;
				
				СтрокаТабличнойЧасти.БалансСорнойПримесиПоВладельцу = РассчитатьБалансСорнойПримесиПоВладельцу(СтрокаТабличнойЧасти);
				
			КонецЕсли;
			
			Если СтрокаТабличнойЧасти.ПроводилиСушку И Объект.ПроводилиСушку Тогда
				
				ФизВесДоСушки                  = ФизВесДоСушки + СтрокаТабличнойЧасти.ФизическийВес1 - УбыльОтОчистки;
				ВесПоВлажностиДоСушки          = ВесПоВлажностиДоСушки + Окр((СтрокаТабличнойЧасти.ФизическийВес1 - УбыльОтОчистки) * СтрокаТабличнойЧасти.Влажность1 / 100);
				ВесПоСорнойПримесиДоСушки      = ВесПоСорнойПримесиДоСушки + Окр((СтрокаТабличнойЧасти.ФизическийВес1 - УбыльОтОчистки) * ?(СтрокаТабличнойЧасти.УбыльОтОчистки > 0, Объект.СорнаяПримесь2, СтрокаТабличнойЧасти.СорнаяПримесь1) / 100);
				ВесПоЗерновойПримесиДоСушки    = ВесПоЗерновойПримесиДоСушки + Окр((СтрокаТабличнойЧасти.ФизическийВес1 - УбыльОтОчистки) * ?(СтрокаТабличнойЧасти.УбыльОтОчистки > 0, Объект.ЗерноваяПримесь2, СтрокаТабличнойЧасти.ЗерноваяПримесь1) / 100);
				
				ФизВесПослеСушки               = ФизВесПослеСушки + СтрокаТабличнойЧасти.ФизическийВес2;
				ВесПоСорнойПримесиПослеСушки   = ВесПоСорнойПримесиПослеСушки + Окр(СтрокаТабличнойЧасти.ФизическийВес2 * ?(СтрокаТабличнойЧасти.УбыльОтОчистки > 0, Объект.СорнаяПримесь2, СтрокаТабличнойЧасти.СорнаяПримесь1) / 100);
				ВесПоЗерновойПримесиПослеСушки = ВесПоЗерновойПримесиПослеСушки + Окр(СтрокаТабличнойЧасти.ФизическийВес2 * ?(СтрокаТабличнойЧасти.УбыльОтОчистки > 0, Объект.ЗерноваяПримесь2, СтрокаТабличнойЧасти.ЗерноваяПримесь1) / 100);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;		
	
	Если Объект.Порядок Тогда // сначала сушим, потом чистим
		
		Объект.ФизическийВес5   = ФизВесДоСушки;
		Объект.Влажность5       = Окр(ИНАГРО_Элеватор.Процент(ФизВесДоСушки, ВесПоВлажностиДоСушки), 2);
		Объект.СорнаяПримесь5   = Окр(ИНАГРО_Элеватор.Процент(ФизВесДоСушки, ВесПоСорнойПримесиДоСушки), 2);
		Объект.ЗерноваяПримесь5 = Окр(ИНАГРО_Элеватор.Процент(ФизВесДоСушки, ВесПоЗерновойПримесиДоСушки), 2);
		
		Объект.ФизическийВес6   = ФизВесПослеСушки;		
		Объект.Влажность6       = ?(ФизВесПослеСушки > 0, Объект.Влажность2, 0);
		Объект.СорнаяПримесь6   = ?(ФизВесПослеСушки > 0, Объект.СорнаяПримесь5, 0);
		Объект.ЗерноваяПримесь6 = ?(ФизВесПослеСушки > 0, Объект.ЗерноваяПримесь5, 0);
		
		Объект.ФизическийВес3   = ФизВесДоОчистки;
		Объект.Влажность3       = Окр(ИНАГРО_Элеватор.Процент(ФизВесДоОчистки, ВесПоВлажностиДоОчистки), 2);
		Объект.СорнаяПримесь3   = Окр(ИНАГРО_Элеватор.Процент(ФизВесДоОчистки, ВесПоСорнойПримесиДоОчистки), 2);
		Объект.ЗерноваяПримесь3 = Окр(ИНАГРО_Элеватор.Процент(ФизВесДоОчистки, ВесПоЗерновойПримесиДоОчистки), 2);
		
		Объект.ФизическийВес4   = ФизВесПослеОчистки;
		Объект.Влажность4       = Окр(ИНАГРО_Элеватор.Процент(ФизВесПослеОчистки, ВесПоВлажностиПослеОчистки), 2);
		Объект.СорнаяПримесь4   = ?(ФизВесПослеОчистки > 0, Объект.СорнаяПримесь2, 0);
		Объект.ЗерноваяПримесь4 = ?(ФизВесПослеОчистки > 0, Объект.ЗерноваяПримесь2, 0);
		
	Иначе // сначала сушим, потом чистим
		
		Объект.ФизическийВес3   = ФизВесДоОчистки;
		Объект.Влажность3       = Окр(ИНАГРО_Элеватор.Процент(ФизВесДоОчистки, ВесПоВлажностиДоОчистки), 2);
		Объект.СорнаяПримесь3   = Окр(ИНАГРО_Элеватор.Процент(ФизВесДоОчистки, ВесПоСорнойПримесиДоОчистки), 2);
		Объект.ЗерноваяПримесь3 = Окр(ИНАГРО_Элеватор.Процент(ФизВесДоОчистки, ВесПоЗерновойПримесиДоОчистки), 2);
		
		Объект.ФизическийВес4   = ФизВесПослеОчистки;
		Объект.Влажность4       = ?(ФизВесПослеОчистки > 0, Объект.Влажность3, 0);
		Объект.СорнаяПримесь4   = ?(ФизВесПослеОчистки > 0, Объект.СорнаяПримесь2, 0);
		Объект.ЗерноваяПримесь4 = ?(ФизВесПослеОчистки > 0, Объект.ЗерноваяПримесь2,0);
		
		Объект.ФизическийВес5   = ФизВесДоСушки;
		Объект.Влажность5       = Окр(ИНАГРО_Элеватор.Процент(ФизВесДоСушки, ВесПоВлажностиДоСушки), 2);
		Объект.СорнаяПримесь5   = Окр(ИНАГРО_Элеватор.Процент(ФизВесДоСушки, ВесПоСорнойПримесиДоСушки), 2);
		Объект.ЗерноваяПримесь5 = Окр(ИНАГРО_Элеватор.Процент(ФизВесДоСушки, ВесПоЗерновойПримесиДоСушки), 2);
		
		Объект.ФизическийВес6   = ФизВесПослеСушки;		
		Объект.Влажность6       = ?(ФизВесПослеСушки > 0, Объект.Влажность2, 0);
		Объект.СорнаяПримесь6   = Окр(ИНАГРО_Элеватор.Процент(ФизВесПослеСушки, ВесПоСорнойПримесиПослеСушки), 2);
		Объект.ЗерноваяПримесь6 = Окр(ИНАГРО_Элеватор.Процент(ФизВесПослеСушки, ВесПоЗерновойПримесиПослеСушки), 2);
		
	КонецЕсли;
	
	// показать сводные расчеты
	
КонецПроцедуры

&НаСервере
Процедура РаспределитьОтходы1Кат(ИмяКолонки = "ФизическийВес31", ДляПустыхЗначений = Ложь)
	
	Если    Объект.РасчетПоВладельцам.Количество() = 0
		ИЛИ Объект.ВидОперации = Перечисления.ИНАГРО_ВидыОперацийФорма34Сводная.ОбратныйРасчет Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьБазисРаспределенияОтходов(ИмяКолонки, ДляПустыхЗначений);
	
	Если Объект.СпособРасчетаКатегорийныхОтходов = Перечисления.ИНАГРО_СпособыРасчетаКатегорийныхОтходов.ПроцентОтРасчетногоВыходаОтходов Тогда
		
		ВесДляРаспределения            = Объект.ФизическийВес9 - Объект.РасчетПоВладельцам.Итог("ФизическийВес31");
		Разница                        = Объект.ФизическийВес9 - Объект.РасчетПоВладельцам.Итог("ФизическийВес31");
		ВсегоБазисРаспределенияОтходов = Объект.РасчетПоВладельцам.Итог("БазисРаспределенияОтходов");
		
		МаксЗначение      = 0;
		СтрСМаксЗначением = 0;
		
		Для Каждого СтрокаТабличнойЧасти Из Объект.РасчетПоВладельцам Цикл
			
			Если СтрокаТабличнойЧасти.ИндивидуальныйРасчет Тогда
				Продолжить;
			КонецЕсли;	
			
			Если СтрокаТабличнойЧасти.БазисРаспределенияОтходов > МаксЗначение Тогда
				МаксЗначение = СтрокаТабличнойЧасти.БазисРаспределенияОтходов;
				СтрСМаксЗначением = СтрокаТабличнойЧасти.НомерСтроки;
			КонецЕсли;
			
			ВесПоправки = Окр(?(ВсегоБазисРаспределенияОтходов <> 0, СтрокаТабличнойЧасти.БазисРаспределенияОтходов * ВесДляРаспределения / ВсегоБазисРаспределенияОтходов, 0), 0);
			СтрокаТабличнойЧасти.ФизическийВес31 = СтрокаТабличнойЧасти.ФизическийВес31 + ВесПоправки;
			Разница = Разница - ВесПоправки;
			
			РассчитатьСтрокуПоВладельцу(СтрокаТабличнойЧасти, ?(Объект.Порядок, Ложь, Истина), Ложь);
			РассчитатьФизическийВесПослеПоВладельцу(СтрокаТабличнойЧасти);
			
		КонецЦикла;
		
	Иначе
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Внимание были изменн вес " + Объект.Отходы1Категории + " необходимо пересчитать акт");
		
		ВесДляРаспределения            = Объект.ФизическийВес9;
		Разница                        = Объект.ФизическийВес9;
		ВсегоБазисРаспределенияОтходов = Объект.РасчетПоВладельцам.Итог("БазисРаспределенияОтходов");
		
		МаксЗначение = 0;
		СтрСМаксЗначением = 0;
		
		Для Каждого СтрокаТабличнойЧасти Из Объект.РасчетПоВладельцам Цикл
			
			Если СтрокаТабличнойЧасти.ИндивидуальныйРасчет Тогда
				Продолжить;
			КонецЕсли;	
			
			Если ДляПустыхЗначений И СтрокаТабличнойЧасти.БазисРаспределенияОтходов = 0 Тогда
				Продолжить;
			Конецесли;
			
			Если СтрокаТабличнойЧасти.БазисРаспределенияОтходов > МаксЗначение Тогда
				МаксЗначение = СтрокаТабличнойЧасти.БазисРаспределенияОтходов;
				СтрСМаксЗначением = СтрокаТабличнойЧасти.НомерСтроки;
			КонецЕсли;
			
			СтрокаТабличнойЧасти.ФизическийВес31 = ?(ВсегоБазисРаспределенияОтходов <> 0, СтрокаТабличнойЧасти.БазисРаспределенияОтходов * ВесДляРаспределения / ВсегоБазисРаспределенияОтходов, 0);
			Разница = Разница - СтрокаТабличнойЧасти.ФизическийВес31;
			
			РассчитатьСтрокуПоВладельцу(СтрокаТабличнойЧасти, ?(Объект.Порядок, Ложь, Истина), Ложь);
			РассчитатьФизическийВесПослеПоВладельцу(СтрокаТабличнойЧасти);
			
		КонецЦикла;
		
	КонецЕсли;
	
	// остаток положим на строку с максимальным значением базы распределения
	Если Разница <> 0 Тогда
		СтрокаТабличнойЧасти = Объект.РасчетПоВладельцам.Получить(Макс(СтрСМаксЗначением - 1, 0));
		СтрокаТабличнойЧасти.ФизическийВес31 = СтрокаТабличнойЧасти.ФизическийВес31 + Разница;		
		РассчитатьСтрокуПоВладельцу(СтрокаТабличнойЧасти, ?(Объект.Порядок, Ложь, Истина), Ложь);
		РассчитатьФизическийВесПослеПоВладельцу(СтрокаТабличнойЧасти);
	КонецЕсли;
	
	РаспределитьВесПоОперациям();
	
КонецПроцедуры

&НаСервере
Процедура РаспределитьОтходы2Кат(ИмяКолонки = "ФизическийВес32", ДляПустыхЗначений = Ложь)
	
	Если    Объект.РасчетПоВладельцам.Количество() = 0 
		ИЛИ Объект.ВидОперации = Перечисления.ИНАГРО_ВидыОперацийФорма34Сводная.ОбратныйРасчет Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьБазисРаспределенияОтходов(ИмяКолонки, ДляПустыхЗначений);
	
	Если Объект.СпособРасчетаКатегорийныхОтходов = Перечисления.ИНАГРО_СпособыРасчетаКатегорийныхОтходов.ПроцентОтРасчетногоВыходаОтходов Тогда
		
		ВесДляРаспределения            = Объект.ФизическийВес10 - Объект.РасчетПоВладельцам.Итог("ФизическийВес32");
		Разница                        = Объект.ФизическийВес10 - Объект.РасчетПоВладельцам.Итог("ФизическийВес32");
		ВсегоБазисРаспределенияОтходов = Объект.РасчетПоВладельцам.Итог("БазисРаспределенияОтходов");
		
		МаксЗначение      = 0;
		СтрСМаксЗначением = 0;
		
		Для Каждого СтрокаТабличнойЧасти Из Объект.РасчетПоВладельцам Цикл		
			Если СтрокаТабличнойЧасти.ИндивидуальныйРасчет Тогда
				Продолжить;
			КонецЕсли;	
			
			Если СтрокаТабличнойЧасти.БазисРаспределенияОтходов > МаксЗначение Тогда
				МаксЗначение = СтрокаТабличнойЧасти.БазисРаспределенияОтходов;
				СтрСМаксЗначением = СтрокаТабличнойЧасти.НомерСтроки;
			КонецЕсли;
			ВесПоправки = Окр(?(ВсегоБазисРаспределенияОтходов <> 0, СтрокаТабличнойЧасти.БазисРаспределенияОтходов * ВесДляРаспределения / ВсегоБазисРаспределенияОтходов, 0), 0);
			СтрокаТабличнойЧасти.ФизическийВес32 = СтрокаТабличнойЧасти.ФизическийВес32 + ВесПоправки;
			Разница = Разница - ВесПоправки;
			РассчитатьСтрокуПоВладельцу(СтрокаТабличнойЧасти, ?(Объект.Порядок, Ложь, Истина), Ложь);
			РассчитатьФизическийВесПослеПоВладельцу(СтрокаТабличнойЧасти);
		КонецЦикла;
		
	Иначе
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Внимание были изменн вес " + Объект.Отходы2Категории + " необходимо пересчитать акт");
		
		ВесДляРаспределения = Объект.ФизическийВес10;
		Разница = Объект.ФизическийВес10;
		ВсегоБазисРаспределенияОтходов = Объект.РасчетПоВладельцам.Итог("БазисРаспределенияОтходов");
		МаксЗначение = 0;
		СтрСМаксЗначением = 0;
		Для Каждого СтрокаТабличнойЧасти Из Объект.РасчетПоВладельцам Цикл		
			Если СтрокаТабличнойЧасти.ИндивидуальныйРасчет Тогда
				Продолжить;
			КонецЕсли;	
			
			Если ДляПустыхЗначений И СтрокаТабличнойЧасти.БазисРаспределенияОтходов = 0 Тогда
				Продолжить;
			Конецесли;		
			Если СтрокаТабличнойЧасти.БазисРаспределенияОтходов > МаксЗначение Тогда
				МаксЗначение = СтрокаТабличнойЧасти.БазисРаспределенияОтходов;
				СтрСМаксЗначением = СтрокаТабличнойЧасти.НомерСтроки;
			КонецЕсли;
			СтрокаТабличнойЧасти.ФизическийВес32 = ?(ВсегоБазисРаспределенияОтходов <> 0, СтрокаТабличнойЧасти.БазисРаспределенияОтходов * ВесДляРаспределения / ВсегоБазисРаспределенияОтходов, 0);
			Разница = Разница - СтрокаТабличнойЧасти.ФизическийВес32;
			РассчитатьСтрокуПоВладельцу(СтрокаТабличнойЧасти, ?(Объект.Порядок, Ложь, Истина), Ложь);
			РассчитатьФизическийВесПослеПоВладельцу(СтрокаТабличнойЧасти);
		КонецЦикла;
		
	КонецЕсли;
	
	// остаток положим на строку с максимальным значением базы распределения
	Если Разница <> 0 Тогда
		СтрокаТабличнойЧасти = Объект.РасчетПоВладельцам.Получить(Макс(СтрСМаксЗначением - 1, 0));
		СтрокаТабличнойЧасти.ФизическийВес32 = СтрокаТабличнойЧасти.ФизическийВес32 + Разница;
		РассчитатьСтрокуПоВладельцу(СтрокаТабличнойЧасти, ?(Объект.Порядок, Ложь, Истина), Ложь);
		РассчитатьФизическийВесПослеПоВладельцу(СтрокаТабличнойЧасти);
	КонецЕсли;
	
	РаспределитьВесПоОперациям();
	
КонецПроцедуры

&НаСервере
Процедура РаспределитьОтходы3Кат(ИмяКолонки = "ФизическийВес3", ДляПустыхЗначений = Ложь)
	
	Если    Объект.РасчетПоВладельцам.Количество() = 0
		ИЛИ Объект.ВидОперации = Перечисления.ИНАГРО_ВидыОперацийФорма34Сводная.ОбратныйРасчет Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьБазисРаспределенияОтходов(ИмяКолонки, ДляПустыхЗначений);
	
	ВесДляРаспределения            = Объект.ФизическийВес8 - Объект.РасчетПоВладельцам.Итог("УбыльОтОчистки");
	Разница                        = Объект.ФизическийВес8 - Объект.РасчетПоВладельцам.Итог("УбыльОтОчистки");
	ВсегоБазисРаспределенияОтходов = Объект.РасчетПоВладельцам.Итог("БазисРаспределенияОтходов");
	
	Для Каждого СтрокаТабличнойЧасти Из Объект.РасчетПоВладельцам Цикл
		
		Если ДляПустыхЗначений И СтрокаТабличнойЧасти.БазисРаспределенияОтходов = 0 Тогда
			Продолжить;
		Конецесли;
		
		Если СтрокаТабличнойЧасти.ИндивидуальныйРасчет Тогда
			Продолжить;
		КонецЕсли;	
		
		ВесПоправки = Окр(?(ВсегоБазисРаспределенияОтходов <> 0, СтрокаТабличнойЧасти.БазисРаспределенияОтходов * ВесДляРаспределения / ВсегоБазисРаспределенияОтходов, 0), 0);
		СтрокаТабличнойЧасти.УбыльОтОчистки = СтрокаТабличнойЧасти.УбыльОтОчистки + ВесПоправки;
		СтрокаТабличнойЧасти.ФизическийВес3 = СтрокаТабличнойЧасти.УбыльОтОчистки;
		Разница = Разница - ВесПоправки;
		
		РассчитатьСтрокуПоВладельцу(СтрокаТабличнойЧасти, ?(Объект.Порядок, Ложь, Истина), Ложь);
		РассчитатьФизическийВесПослеПоВладельцу(СтрокаТабличнойЧасти);
		
	КонецЦикла;
	
	// остаток положим на строку с максимальным значением базы распределения
	Объект.РасчетПоВладельцам.Сортировать("БазисРаспределенияОтходов УБЫВ");
	
	Если Разница <> 0 Тогда
		// посколку сортировали по убыванию первая строка - максимальна
		Для Каждого СтрокаТабличнойЧасти Из Объект.РасчетПоВладельцам Цикл
			
			Если СтрокаТабличнойЧасти.ИндивидуальныйРасчет Тогда
				Продолжить;
			КонецЕсли;	
			
			СтрокаТабличнойЧасти.УбыльОтОчистки = СтрокаТабличнойЧасти.УбыльОтОчистки + Разница;		
			СтрокаТабличнойЧасти.ФизическийВес3 = СтрокаТабличнойЧасти.УбыльОтОчистки;
			
			РассчитатьСтрокуПоВладельцу(СтрокаТабличнойЧасти, ?(Объект.Порядок, Ложь, Истина), Ложь);
			РассчитатьФизическийВесПослеПоВладельцу(СтрокаТабличнойЧасти);
			
			Прервать;
			
		КонецЦикла;
		
	КонецЕсли;
	
	РаспределитьВесПоОперациям();
	
КонецПроцедуры

&НаСервере
Процедура РаспределитьУбыльОтСушки()
	
	Если    Объект.РасчетПоВладельцам.Количество() = 0 
		ИЛИ Объект.ВидОперации = Перечисления.ИНАГРО_ВидыОперацийФорма34Сводная.ОбратныйРасчет Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьБазисРаспределенияУсушки();
	
	ВесДляРаспределения           = Объект.УбыльОтСушки - Объект.РасчетПоВладельцам.Итог("УбыльОтСушки");
	Разница                       = Объект.УбыльОтСушки - Объект.РасчетПоВладельцам.Итог("УбыльОтСушки");
	ВсегоБазисРаспределенияУсушки = Объект.РасчетПоВладельцам.Итог("БазисРаспределенияУсушки");
	
	Для Каждого СтрокаТабличнойЧасти Из Объект.РасчетПоВладельцам Цикл	
		
		Если СтрокаТабличнойЧасти.ИндивидуальныйРасчет Тогда
			Продолжить;
		КонецЕсли;	
		
		ВесПоправки = Окр(?(ВсегоБазисРаспределенияУсушки <> 0, СтрокаТабличнойЧасти.БазисРаспределенияУсушки * ВесДляРаспределения / ВсегоБазисРаспределенияУсушки, 0), 0);
		СтрокаТабличнойЧасти.УбыльОтСушки = СтрокаТабличнойЧасти.УбыльОтСушки + ВесПоправки;
		Разница = Разница - ВесПоправки;
		
		РассчитатьСтрокуПоВладельцу(СтрокаТабличнойЧасти, Ложь, ?(Объект.Порядок, Истина, Ложь));
		РассчитатьФизическийВесПослеПоВладельцу(СтрокаТабличнойЧасти);
		
	КонецЦикла;
	
	// остаток положим на строку с максимальным значением базы распределения
	Объект.РасчетПоВладельцам.Сортировать("БазисРаспределенияУсушки УБЫВ");
	
	Если Разница <> 0 Тогда
		// посколку сортировали по убыванию первая строка - максимальна
		Для Каждого СтрокаТабличнойЧасти Из Объект.РасчетПоВладельцам Цикл
			
			Если СтрокаТабличнойЧасти.ИндивидуальныйРасчет Тогда
				Продолжить;
			КонецЕсли;	
			
			СтрокаТабличнойЧасти.УбыльОтСушки = СтрокаТабличнойЧасти.УбыльОтСушки + Разница;
			
			РассчитатьСтрокуПоВладельцу(СтрокаТабличнойЧасти, Ложь, ?(Объект.Порядок, Истина, Ложь));			
			РассчитатьФизическийВесПослеПоВладельцу(СтрокаТабличнойЧасти);
			
			Прервать;
			
		КонецЦикла;
		
	КонецЕсли;
	
	РассчитатьИтоги();
	
	РаспределитьВесПоОперациям();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьБазисРаспределенияУсушки()
	
	Для Каждого СтрокаТабличнойЧасти Из Объект.РасчетПоВладельцам Цикл
		
		Если Объект.ВидОперации = Перечисления.ИНАГРО_ВидыОперацийФорма34Сводная.ОбратныйРасчет Тогда
			
			Если  Объект.ПроводилиСушку
				И СтрокаТабличнойЧасти.ПроводилиСушку
				И СтрокаТабличнойЧасти.Влажность1 > Объект.Влажность2 Тогда
				СтрокаТабличнойЧасти.БазисРаспределенияУсушки = (СтрокаТабличнойЧасти.Влажность1 - СтрокаТабличнойЧасти.Влажность2) / (100 - Объект.Влажность2) * СтрокаТабличнойЧасти.ФизическийВес2;			
			Иначе
				СтрокаТабличнойЧасти.БазисРаспределенияУсушки = 0;
			КонецЕсли;
			
		Иначе
			
			Если  Объект.ПроводилиСушку
				И СтрокаТабличнойЧасти.ПроводилиСушку
				И СтрокаТабличнойЧасти.Влажность1 > Объект.Влажность2 Тогда
				СтрокаТабличнойЧасти.БазисРаспределенияУсушки = (СтрокаТабличнойЧасти.Влажность1 - Объект.Влажность2) / (100 - Объект.Влажность2) * СтрокаТабличнойЧасти.ФизическийВес1;			
			Иначе
				СтрокаТабличнойЧасти.БазисРаспределенияУсушки = 0;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ВсегоУсушка = Объект.РасчетПоВладельцам.Итог("БазисРаспределенияУсушки");
	
	Если ВсегоУсушка = 0 Тогда
		Возврат;
	КонецЕсли;
	
	МаксЗначениеБазисРаспределенияУсушки      = 0;
	СтрСМаксЗначениемБазисРаспределенияУсушки = 1;
	
	Для Каждого СтрокаТабличнойЧасти Из Объект.РасчетПоВладельцам Цикл
		
		СтрокаТабличнойЧасти.БазисРаспределенияУсушки = Окр(?(ВсегоУсушка <> 0, СтрокаТабличнойЧасти.БазисРаспределенияУсушки * 100 / ВсегоУсушка, 0), 2);
		
		Если СтрокаТабличнойЧасти.БазисРаспределенияУсушки > МаксЗначениеБазисРаспределенияУсушки Тогда
			МаксЗначениеБазисРаспределенияУсушки = СтрокаТабличнойЧасти.БазисРаспределенияУсушки;
			СтрСМаксЗначениемБазисРаспределенияУсушки = СтрокаТабличнойЧасти.НомерСтроки;
		КонецЕсли;
		
	КонецЦикла;
	
	// остаток положим на строку с максимальным значением базы распределения
	ВсегоБазисРаспределенияУсушки = Объект.РасчетПоВладельцам.Итог("БазисРаспределенияУсушки");
	Если ВсегоБазисРаспределенияУсушки <> 100 Тогда
		Разница = 100 - ВсегоБазисРаспределенияУсушки;
		СтрокаТабличнойЧасти = Объект.РасчетПоВладельцам.Получить(СтрСМаксЗначениемБазисРаспределенияУсушки - 1);
		СтрокаТабличнойЧасти.БазисРаспределенияУсушки = СтрокаТабличнойЧасти.БазисРаспределенияУсушки + Разница;
	КонецЕсли
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьОтВладельцев()
	
	Объект.ФизическийВес1 = Объект.РасчетПоВладельцам.Итог("ФизическийВес1");
	ЦПВлажность       = 0; 
	ЦПСорнаяПримесь   = 0; 
	ЦПЗерноваяПримесь = 0;
	
	Для Каждого СтрокаТабличнойЧасти Из Объект.РасчетПоВладельцам Цикл
		ЦПВлажность       = ЦПВлажность       + Окр(СтрокаТабличнойЧасти.ФизическийВес1 * СтрокаТабличнойЧасти.Влажность1 / 100);
		ЦПСорнаяПримесь   = ЦПСорнаяПримесь   + Окр(СтрокаТабличнойЧасти.ФизическийВес1 * СтрокаТабличнойЧасти.СорнаяПримесь1 / 100);
		ЦПЗерноваяПримесь = ЦПЗерноваяПримесь + Окр(СтрокаТабличнойЧасти.ФизическийВес1 * СтрокаТабличнойЧасти.ЗерноваяПримесь1 / 100);
	КонецЦикла;
	
	Объект.Влажность1       = Окр(ИНАГРО_Элеватор.Процент(Объект.ФизическийВес1, ЦПВлажность), 2);
	Объект.СорнаяПримесь1   = Окр(ИНАГРО_Элеватор.Процент(Объект.ФизическийВес1, ЦПСорнаяПримесь), 2);
	Объект.ЗерноваяПримесь1 = Окр(ИНАГРО_Элеватор.Процент(Объект.ФизическийВес1, ЦПЗерноваяПримесь), 2);
	
	Объект.Влажность7     = ?(Объект.Влажность7 = 0,     Объект.Влажность2,     Объект.Влажность7);	
	Объект.СорнаяПримесь7 = ?(Объект.СорнаяПримесь7 = 0, Объект.СорнаяПримесь2, Объект.СорнаяПримесь7);
	Объект.СорнаяПримесь8 = ?(Объект.СорнаяПримесь8 = 0, 98,                    Объект.СорнаяПримесь8);
	
	Для Каждого СтрокаТабличнойЧасти Из Объект.РасчетПоВладельцам Цикл			
		РассчитатьСтрокуПоВладельцу(СтрокаТабличнойЧасти, Истина, Истина);
	КонецЦикла;
	
	РаспределитьВесПоОперациям();
	
	РассчитатьИтоги();
	
	// Коректировка результатов
	Если Объект.Порядок Тогда		
		// сушка
		Объект.СнижениеВлажности = ПолучитьСводноеСнижениеОтВлажности();
		Объект.УбыльОтСушки      = ПолучитьСводнуюУбыльОтСушки();
		
		РаспределитьУбыльОтСушки();
		
		РассчитатьИтоги();
		
		// очистка
		Если Объект.СпособРасчетаКатегорийныхОтходов = Перечисления.ИНАГРО_СпособыРасчетаКатегорийныхОтходов.ПроцентОтРасчетногоВыходаОтходов Тогда
			
			ПроцентПолезногоЗернаВПобочномПродукте = 0;
			Объект.ФизическийВес7  = ПолучитьВесГодныхОтходов(Объект.ФизическийВес3, Объект.СорнаяПримесь3, Объект.СорнаяПримесь2, Объект.ПроцентПобочногоПродукта, Объект.СорнаяПримесь7, ПроцентПолезногоЗернаВПобочномПродукте);
			
			РаспределитьПобочныйПродукт();
			
			ПроцентПолезногоЗернаВОтходах1Категории = 0;			
			Объект.ФизическийВес9  = ПолучитьВесГодныхОтходов(Объект.ФизическийВес3, Объект.СорнаяПримесь3, Объект.СорнаяПримесь2, Объект.ПроцентОтходов1Категории, Объект.СорнаяПримесь9, ПроцентПолезногоЗернаВОтходах1Категории);
			
			РаспределитьОтходы1Кат();
			
			ПроцентПолезногоЗернаВОтходах2Категории = 0;
			Объект.ФизическийВес10  = ПолучитьВесГодныхОтходов(Объект.ФизическийВес3, Объект.СорнаяПримесь3, Объект.СорнаяПримесь2, Объект.ПроцентОтходов2Категории, Объект.СорнаяПримесь10, ПроцентПолезногоЗернаВОтходах2Категории);
			
			РаспределитьОтходы2Кат();
			
			// расчет зерновой примеси в партии после очистки
			Если Объект.ПроводилиОчистку Тогда
				Объект.ЗерноваяПримесь2 = Объект.ЗерноваяПримесь1 - ПроцентПолезногоЗернаВПобочномПродукте - ПроцентПолезногоЗернаВОтходах1Категории - ПроцентПолезногоЗернаВОтходах2Категории;
				Объект.ЗерноваяПримесь4 = Объект.ЗерноваяПримесь2;
			КонецЕсли;
			
		КонецЕсли;
		
		Объект.ФизическийВес8 = ПолучитьСводнуюУбыльОтОчистки();
		Объект.УбыльОтОчистки = Объект.ФизическийВес8;
		
		РаспределитьОтходы3Кат();
		
		РассчитатьИтоги();
		
	Иначе		
		// очистка
		Если Объект.СпособРасчетаКатегорийныхОтходов = Перечисления.ИНАГРО_СпособыРасчетаКатегорийныхОтходов.ПроцентОтРасчетногоВыходаОтходов Тогда
			
			ПроцентПолезногоЗернаВПобочномПродукте = 0;
			Объект.ФизическийВес7  = ПолучитьВесГодныхОтходов(Объект.ФизическийВес3, Объект.СорнаяПримесь3, Объект.СорнаяПримесь2, Объект.ПроцентПобочногоПродукта, Объект.СорнаяПримесь7, ПроцентПолезногоЗернаВПобочномПродукте);
			
			РаспределитьПобочныйПродукт();
			
			ПроцентПолезногоЗернаВОтходах1Категории = 0;
			Объект.ФизическийВес9  = ПолучитьВесГодныхОтходов(Объект.ФизическийВес3, Объект.СорнаяПримесь3, Объект.СорнаяПримесь2, Объект.ПроцентОтходов1Категории, Объект.СорнаяПримесь9, ПроцентПолезногоЗернаВОтходах1Категории);
			
			РаспределитьОтходы1Кат();
			
			ПроцентПолезногоЗернаВОтходах2Категории = 0;
			Объект.ФизическийВес10  = ПолучитьВесГодныхОтходов(Объект.ФизическийВес3, Объект.СорнаяПримесь3, Объект.СорнаяПримесь2, Объект.ПроцентОтходов2Категории, Объект.СорнаяПримесь10, ПроцентПолезногоЗернаВОтходах2Категории);
			
			РаспределитьОтходы2Кат();
			
			// расчет зерновой примеси в партии после очистки
			Если Объект.ПроводилиОчистку Тогда
				Объект.ЗерноваяПримесь2 = Объект.ЗерноваяПримесь1 - ПроцентПолезногоЗернаВПобочномПродукте - ПроцентПолезногоЗернаВОтходах1Категории - ПроцентПолезногоЗернаВОтходах2Категории;
				Объект.ЗерноваяПримесь4 = Объект.ЗерноваяПримесь2;
			КонецЕсли;
			
			Если Объект.ПроводилиСушку Тогда
				Объект.ЗерноваяПримесь5 = Объект.ЗерноваяПримесь2;
				Объект.ЗерноваяПримесь6 = Объект.ЗерноваяПримесь6;
			КонецЕсли;
			
		КонецЕсли;
		
		Объект.ФизическийВес8 = ПолучитьСводнуюУбыльОтОчистки();		
		Объект.УбыльОтОчистки = Объект.ФизическийВес8;
		
		РаспределитьОтходы3Кат();
		
		РассчитатьИтоги();
		
		// сушка
		Объект.СнижениеВлажности = ПолучитьСводноеСнижениеОтВлажности();
		Объект.УбыльОтСушки      = ПолучитьСводнуюУбыльОтСушки();
		
		РаспределитьУбыльОтСушки();
		
		РассчитатьИтоги();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСводноеСнижениеОтВлажности()
	
	СнижениеВлажности = Окр((Объект.Влажность5 - Объект.Влажность6) / (100 - Объект.Влажность6), 4);
	
	Возврат СнижениеВлажности;
	
КонецФункции

&НаСервере
Функция ПолучитьСводнуюУбыльОтСушки()
	
	УбыльОтСушки = Окр(Объект.ФизическийВес5 * ПолучитьСводноеСнижениеОтВлажности());
	
	Возврат УбыльОтСушки;
	
КонецФункции

&НаСервере
Функция ПолучитьСводнуюУбыльОтОчистки()
	
	Если Объект.СпособРасчетаУбылиОтОчистки = Перечисления.ИНАГРО_СпособыРасчетаУбылиОтОчистки.СУчетомУбылиОтСушки Тогда
		УбыльОтОчистки = РасчитатьУбыльОтЧистки(Объект.ФизическийВес3, Объект.СорнаяПримесь3, Объект.СорнаяПримесь4, Объект.Влажность3,
											   ?(Объект.ПроводилиСушку, Объект.Влажность2, Объект.Влажность3), Объект.ФизическийВес7, Объект.ФизическийВес9, Объект.ФизическийВес10);		
	Иначе
		УбыльОтОчистки = РасчитатьУбыльОтЧистки(Объект.ФизическийВес3, Объект.СорнаяПримесь3, Объект.СорнаяПримесь4, Объект.Влажность3,
												 Объект.Влажность4, Объект.ФизическийВес7, Объект.ФизическийВес9, Объект.ФизическийВес10);
											 КонецЕсли;
											 
	СкорректироватьУбыльОтОчистки(,УбыльОтОчистки);
	
	Возврат УбыльОтОчистки;
	
КонецФункции

&НаСервере
Процедура УдалитьСтрокиСОбщимВесомОтходов(ВесОтходов, СортироватьПоУбыванию = Истина)
			
	Если ВесОтходов = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаЗначений = Объект.РасчетПоВладельцам.Выгрузить();
	
	ТаблицаЗначений.Колонки.Добавить("ВесОтходов");
	ТаблицаЗначений.Колонки.Добавить("УдалитьСтроку");
	
	Если СортироватьПоУбыванию Тогда
		ТаблицаЗначений.Сортировать("БазисРаспределенияОтходов Убыв, ФизическийВес3 Убыв");
	Иначе
		ТаблицаЗначений.Сортировать("БазисРаспределенияОтходов Возр, ФизическийВес3 Возр");
	КонецЕсли;
	
	Для Каждого СтрокаТаблицы Из ТаблицаЗначений Цикл
		
		Если (ТаблицаЗначений.Итог("ВесОтходов") + СтрокаТаблицы.ФизическийВес3) >= ВесОтходов Тогда
			
		Иначе			
			СтрокаТаблицы.ВесОтходов = СтрокаТаблицы.ФизическийВес3;
			Продолжить;
		КонецЕсли;
		
		Если СтрокаТаблицы.ФизическийВес3 <> 0 Тогда
				Строка = Объект.РасчетПоВладельцам.Получить(СтрокаТаблицы.НомерСтроки - 1);
				Строка.ПроводилиОчистку = Ложь;
				Строка.ПроводилиСушку	= Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
	НомерСтроки = Объект.РасчетПоВладельцам.Количество() - 1;
	Пока НомерСтроки >= 0 Цикл
		Строка = Объект.РасчетПоВладельцам.Получить(НомерСтроки);
		Если Строка.ПроводилиОчистку = Ложь И Строка.ПроводилиСушку = Ложь Тогда
			Объект.РасчетПоВладельцам.Удалить(Строка);
		КонецЕсли;
		НомерСтроки = НомерСтроки - 1;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьСтрокиСОбщимВесомОтходовПоСорнойПримеси(РезультирующийВесОтходовПоСорнойПримеси, СортироватьПоУбыванию = Истина)
	
	Если РезультирующийВесОтходовПоСорнойПримеси = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаЗначений = Объект.РасчетПоВладельцам.Выгрузить();
	
	ТаблицаЗначений.Колонки.Добавить("РезультирующийВесЗернаПоСорнойПримеси");
	ТаблицаЗначений.Колонки.Добавить("ВесОтходовПоСорнойПримеси");
	ТаблицаЗначений.Колонки.Добавить("ВесЗернаПоСорнойПримеси");
	ТаблицаЗначений.Колонки.Добавить("УдалитьСтроку");
	
	Для Каждого СтрокаТаблицы Из ТаблицаЗначений Цикл
		СтрокаТаблицы.ВесЗернаПоСорнойПримеси   = Окр(СтрокаТаблицы.ФизическийВес1 * Объект.СорнаяПримесь1 / 100, 2);
		СтрокаТаблицы.ВесОтходовПоСорнойПримеси = Окр(СтрокаТаблицы.ФизическийВес3 * Объект.СорнаяПримесь8 / 100, 2);
	КонецЦикла;
	
	Если СортироватьПоУбыванию Тогда
		ТаблицаЗначений.Сортировать("ВесЗернаПоСорнойПримеси Убыв, ФизическийВес3 Убыв");
	Иначе
		ТаблицаЗначений.Сортировать("ВесЗернаПоСорнойПримеси Возр, ФизическийВес3 Возр");
	КонецЕсли;
	
	РезультирующийВесЗернаПоСорнойПримеси = Окр(ТаблицаЗначений.Итог("ВесЗернаПоСорнойПримеси") * РезультирующийВесОтходовПоСорнойПримеси / ТаблицаЗначений.Итог("ВесОтходовПоСорнойПримеси"), 0);
	
	Для Каждого СтрокаТаблицы Из ТаблицаЗначений Цикл
		
		Если (ТаблицаЗначений.Итог("РезультирующийВесЗернаПоСорнойПримеси") + СтрокаТаблицы.ВесЗернаПоСорнойПримеси) >= РезультирующийВесЗернаПоСорнойПримеси Тогда
			
		Иначе			
			СтрокаТаблицы.РезультирующийВесЗернаПоСорнойПримеси = СтрокаТаблицы.ВесЗернаПоСорнойПримеси;
			Продолжить;
		КонецЕсли;
		
		Если СтрокаТаблицы.ФизическийВес3 <> 0 Тогда
			Строка = Объект.РасчетПоВладельцам.Получить(СтрокаТаблицы.НомерСтроки - 1);
			Строка.ПроводилиОчистку = Ложь;
			Строка.ПроводилиСушку	 = Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
	НомерСтроки = Объект.РасчетПоВладельцам.Количество() - 1;
	Пока НомерСтроки >= 0 Цикл
		Строка = Объект.РасчетПоВладельцам.Получить(НомерСтроки);
		Если Строка.Объект.ПроводилиОчистку = Ложь И Строка.ПроводилиСушку = Ложь Тогда
			Объект.РасчетПоВладельцам.Удалить(Строка);
		КонецЕсли;
		НомерСтроки = НомерСтроки - 1;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьУслугиНаСервере()
	
	Если ВыставлятьУслугиОчисткиСушкиПоФактическимПоказателям Тогда
		
		Для Каждого СтрокаТабличнойЧасти Из Объект.РасчетПоВладельцам Цикл
			
			Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.РеестрТТН) Тогда
				ПерезаполнитьГалНаВыставленыеУслуги(СтрокаТабличнойЧасти);
			КонецЕсли;
			
			РасчитатьУслугиПоСтроке(СтрокаТабличнойЧасти);
			
		КонецЦикла;
		
	КонецЕсли; 		
	
КонецПроцедуры	

&НаСервере
Процедура ПерезаполнитьГалНаВыставленыеУслуги(СтрокаТабличнойЧасти)
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаРегистра.ПартияЗерна,
		|	ТаблицаРегистра.ВыставленыУслугиСушки,
		|	ТаблицаРегистра.ВыставленыУслугиОчистки
		|ИЗ
		|	РегистрСведений.ИНАГРО_ДанныеПоКачествуПартийЗерна.СрезПоследних(&ДатаОкончания, ПартияЗерна = &ДокументРТТН) КАК ТаблицаРегистра";
	
	Запрос.УстановитьПараметр("ДокументРТТН",  СтрокаТабличнойЧасти.РеестрТТН);
	Запрос.УстановитьПараметр("ДатаОкончания", Новый Граница((Объект.Дата-1), ВидГраницы.Включая));

	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка1 = РезультатЗапроса.Выбрать();
	
	Если Выборка1.Следующий() Тогда
		СтрокаТабличнойЧасти.ВыставленыУслугиСушки   = Выборка1.ВыставленыУслугиСушки;
		СтрокаТабличнойЧасти.ВыставленыУслугиОчистки = Выборка1.ВыставленыУслугиОчистки;
	КонецЕсли;
	
КонецПроцедуры	   

&НаСервере
Процедура РасчитатьУслугиПоСтроке(СтрокаТабличнойЧасти)
	
	ВидКультуры = ИНАГРО_Элеватор.ПолучитьДополнительныйРеквизитНоменклатуры(СтрокаТабличнойЧасти.Номенклатура, "ВидКультуры");
		
	ИНАГРО_Элеватор.РасчетНатуральныхСкидок(Объект, СтрокаТабличнойЧасти);
	
	Вес = СтрокаТабличнойЧасти.ФизическийВес1;
	
	СпособНачисленияОплатыЗаОчисткуСушку 	= ИНАГРО_Элеватор.ПолучитьПараметрУчетаЭлеватора(Объект.Дата, "СпособНачисленияОплатыЗаОчисткуСушку", Перечисления.ИНАГРО_СпособыНачисленияОплатыЗаОчисткуСушку.ПустаяСсылка());
	СпособРасчетаВесаНаОчисткуСушкуДляУслуг = ИНАГРО_Элеватор.ПолучитьПараметрУчетаЭлеватора(Объект.Дата, "СпособРасчетаВесаНаОчисткуСушкуДляУслуг", Перечисления.ИНАГРО_СпособРасчетаВесаНаОчисткуСушкуДляУслуг.ПустаяСсылка());
	
	Если СтрокаТабличнойЧасти.ПроводилиСушку И НЕ СтрокаТабличнойЧасти.ВыставленыУслугиСушки Тогда
		
		// количество сушки
		Если НЕ ЗначениеЗаполнено(СпособНачисленияОплатыЗаОчисткуСушку)  
			ИЛИ СпособНачисленияОплатыЗаОчисткуСушку = Перечисления.ИНАГРО_СпособыНачисленияОплатыЗаОчисткуСушку.БезУчетаТехнологическогоЦикла
			ИЛИ СпособНачисленияОплатыЗаОчисткуСушку = Перечисления.ИНАГРО_СпособыНачисленияОплатыЗаОчисткуСушку.СначалаСушимПотомЧистим
			Тогда
			
			КоличествоСушки = СтрокаТабличнойЧасти.НатСкидкаВлажность * Вес / 1000;
						
		ИначеЕсли СпособНачисленияОплатыЗаОчисткуСушку = Перечисления.ИНАГРО_СпособыНачисленияОплатыЗаОчисткуСушку.СначалаЧистимПотомСушим Тогда
			
			Объект.УбыльОтОчистки = 0;
			Если СтрокаТабличнойЧасти.ПроводилиОчистку И НЕ СтрокаТабличнойЧасти.ВыставленыУслугиОчистки Тогда
				Если СпособРасчетаВесаНаОчисткуСушкуДляУслуг = Перечисления.ИНАГРО_СпособРасчетаВесаНаОчисткуСушкуДляУслуг.ПоДювалю Тогда
					Объект.УбыльОтОчистки = Вес * Макс(ОКР((СтрокаТабличнойЧасти.СорнаяПримесь1 - СтрокаТабличнойЧасти.СорнаяПримесь2) / (100 - СтрокаТабличнойЧасти.СорнаяПримесь2), 4), 0);
				ИначеЕсли СпособРасчетаВесаНаОчисткуСушкуДляУслуг = Перечисления.ИНАГРО_СпособРасчетаВесаНаОчисткуСушкуДляУслуг.ОтклонениеОтБазиса Тогда
					Объект.УбыльОтОчистки = Вес * Макс((СтрокаТабличнойЧасти.СорнаяПримесь1 - СтрокаТабличнойЧасти.СорнаяПримесь2), 0) / 100;
				ИначеЕсли НЕ (ЗначениеЗаполнено(СпособРасчетаВесаНаОчисткуСушкуДляУслуг)) Тогда
					Объект.УбыльОтОчистки = 0;
				КонецЕсли;
			КонецЕсли;
			
			КоличествоСушки = СтрокаТабличнойЧасти.НатСкидкаВлажность *((Вес - Объект.УбыльОтОчистки)) / 1000;
			
		КонецЕсли;
		
		// цена сушки
		ЦенаСушки = 0;
		Если КоличествоСушки <> 0 Тогда
			Если СтрокаТабличнойЧасти.Вентилирование Тогда
	     		ЦенаСушки = ИНАГРО_Элеватор.ПолучитьЦенуУслугиЭлеватора(Объект.Организация, Объект.Дата, СтрокаТабличнойЧасти.Владелец, СтрокаТабличнойЧасти.ДоговорКонтрагента, ВидКультуры.ВидКультурыДляРасчетаСтоимостиУслуги, Объект.Урожай, ИНАГРО_Элеватор.ПолучитьПредопределеннуюНоменклатуру("Вентилирование"));
			Иначе
				ЦенаСушки = ИНАГРО_Элеватор.ПолучитьЦенуУслугиЭлеватора(Объект.Организация, Объект.Дата, СтрокаТабличнойЧасти.Владелец, СтрокаТабличнойЧасти.ДоговорКонтрагента, ВидКультуры.ВидКультурыДляРасчетаСтоимостиУслуги, Объект.Урожай, ИНАГРО_Элеватор.ПолучитьПредопределеннуюНоменклатуру("Сушка"));
			КонецЕсли;			
		КонецЕсли;
		
		// сумма сушки
		СуммаСушки = ЦенаСушки * КоличествоСушки;
		
	КонецЕсли;
	
	СтрокаТабличнойЧасти.КоличествоСушки = КоличествоСушки;
	СтрокаТабличнойЧасти.ЦенаСушки 		 = ЦенаСушки;
	СтрокаТабличнойЧасти.СуммаСушки      = СуммаСушки;		
	
	// РАСЧЕТ УСЛУГИ-ОЧИСТКИ
	КоличествоОчисткии = 0;
	ЦенаОчистки		   = 0;
	СуммаОчистки	   = 0;	
	
	Если СтрокаТабличнойЧасти.ПроводилиОчистку И НЕ СтрокаТабличнойЧасти.ВыставленыУслугиОчистки Тогда
		
		// количество очистки
		Если НЕ ЗначениеЗаполнено(СпособНачисленияОплатыЗаОчисткуСушку)  
			ИЛИ СпособНачисленияОплатыЗаОчисткуСушку = Перечисления.ИНАГРО_СпособыНачисленияОплатыЗаОчисткуСушку.БезУчетаТехнологическогоЦикла
			ИЛИ СпособНачисленияОплатыЗаОчисткуСушку = Перечисления.ИНАГРО_СпособыНачисленияОплатыЗаОчисткуСушку.СначалаЧистимПотомСушим
			Тогда
			
			КоличествоОчистки = СтрокаТабличнойЧасти.НаТСкидкаСорнаяПримесь * Вес / 1000;
			
		ИначеЕсли СпособНачисленияОплатыЗаОчисткуСушку = Перечисления.ИНАГРО_СпособыНачисленияОплатыЗаОчисткуСушку.СначалаСушимПотомЧистим Тогда
			
			ВесУсушки = 0;
			Если СтрокаТабличнойЧасти.ПроводилиСушку И НЕ СтрокаТабличнойЧасти.ВыставленыУслугиСушки Тогда
				Если СпособРасчетаВесаНаОчисткуСушкуДляУслуг = Перечисления.ИНАГРО_СпособРасчетаВесаНаОчисткуСушкуДляУслуг.ПоДювалю Тогда
					ВесУсушки = Вес * Макс(Окр((СтрокаТабличнойЧасти.Влажность1 - СтрокаТабличнойЧасти.Влажность2) / (100 - СтрокаТабличнойЧасти.Влажность2), 4), 0); // ПоДювалю
				ИначеЕсли СпособРасчетаВесаНаОчисткуСушкуДляУслуг = Перечисления.ИНАГРО_СпособРасчетаВесаНаОчисткуСушкуДляУслуг.ОтклонениеОтБазиса Тогда
					ВесУсушки	= Вес * Макс((СтрокаТабличнойЧасти.Влажность1 - СтрокаТабличнойЧасти.Влажность2),0) / 100;
				ИначеЕсли НЕ (ЗначениеЗаполнено(СпособРасчетаВесаНаОчисткуСушкуДляУслуг)) Тогда				
					ВесУсушки = 0;
				КонецЕсли;
			КонецЕсли;
						
			КоличествоОчистки = СтрокаТабличнойЧасти.НаТСкидкаСорнаяПримесь * (Вес - ВесУсушки) / 1000;
						
		КонецЕсли;
		
		// цена очистки
		Если КоличествоОчистки <> 0 Тогда
			ЦенаОчистки = ИНАГРО_Элеватор.ПолучитьЦенуУслугиЭлеватора(Объект.Организация, Объект.Дата, СтрокаТабличнойЧасти.Владелец, СтрокаТабличнойЧасти.ДоговорКонтрагента, ВидКультуры.ВидКультурыДляРасчетаСтоимостиУслуги, Объект.Урожай, ИНАГРО_Элеватор.ПолучитьПредопределеннуюНоменклатуру("Очистка"));
		КонецЕсли;
		
		// сумма очистки
		СуммаОчистки = ЦенаОчистки * КоличествоОчистки;
		
	КонецЕсли;
	
	СтрокаТабличнойЧасти.КоличествоОчистки = КоличествоОчистки;
	СтрокаТабличнойЧасти.ЦенаОчистки 	   = ЦенаОчистки;
	СтрокаТабличнойЧасти.СуммаОчистки 	   = СуммаОчистки;
	
	СтрокаТабличнойЧасти.Сумма             = СтрокаТабличнойЧасти.СуммаОчистки + СтрокаТабличнойЧасти.СуммаСушки;
	СтрокаТабличнойЧасти.СуммаНДС          = УчетНДСКлиентСервер.РассчитатьСуммуНДС(СтрокаТабличнойЧасти.Сумма, Истина, 20) ;

КонецПроцедуры

&НаСервере
Процедура РасчитатьЗерновуюПримесьЗернаПослеОчистки()
	
	Если Объект.ПроводилиОчистку Тогда
		
		// полезное зерно в побочном продукте
		ВесПолезногоЗернаВПобочномПродукте      = Окр(Объект.ФизическийВес7 * Объект.ЗерноваяПримесь7 / 100, 0);
		ПроцентПолезногоЗернаВПобочномПродукте  = ?(Объект.ФизическийВес3 = 0, 0, ВесПолезногоЗернаВПобочномПродукте * 100 / Объект.ФизическийВес3);
		
		// полезное зерно в отходах 1 кат.
		ВесПолезногоЗернаВОтходах1Категории     = Окр(Объект.ФизическийВес9 * Объект.ЗерноваяПримесь9 / 100, 0);
		ПроцентПолезногоЗернаВОтходах1Категории = ?(Объект.ФизическийВес3 = 0, 0, ВесПолезногоЗернаВОтходах1Категории * 100 / Объект.ФизическийВес3);
		
		// полезное зерно в отходах 2 кат.
		ВесПолезногоЗернаВОтходах2Категории     = Окр(Объект.ФизическийВес10 * Объект.ЗерноваяПримесь10 / 100, 0);
		ПроцентПолезногоЗернаВОтходах2Категории = ?(Объект.ФизическийВес3 = 0, 0, ВесПолезногоЗернаВОтходах2Категории * 100 / Объект.ФизическийВес3);
		
		Если Объект.Порядок Тогда
			
			// расчет зерновой примеси в партии после очистки
			Если Объект.ПроводилиОчистку Тогда
				Объект.ЗерноваяПримесь2 = Объект.ЗерноваяПримесь1 - ПроцентПолезногоЗернаВПобочномПродукте - ПроцентПолезногоЗернаВОтходах1Категории - ПроцентПолезногоЗернаВОтходах2Категории;
				Объект.ЗерноваяПримесь4 = Объект.ЗерноваяПримесь2;
			КонецЕсли;
			
		Иначе
			
			Если Объект.ПроводилиОчистку Тогда
				Объект.ЗерноваяПримесь2 = Объект.ЗерноваяПримесь1 - ПроцентПолезногоЗернаВПобочномПродукте - ПроцентПолезногоЗернаВОтходах1Категории - ПроцентПолезногоЗернаВОтходах2Категории;
				Объект.ЗерноваяПримесь4 = Объект.ЗерноваяПримесь2;
			КонецЕсли;
			
			Если Объект.ПроводилиСушку Тогда
				Объект.ЗерноваяПримесь5 = Объект.ЗерноваяПримесь2;
				Объект.ЗерноваяПримесь6 = Объект.ЗерноваяПримесь6;
			КонецЕсли;
			
		КонецЕсли;
		
		// Пересчтаем баланс зерновой примеси
		ПересчитатьБалансЗеновойПримесиПоВладельцам();
		тСводныеРасчеты()
		
	Иначе
		
		Объект.ЗерноваяПримесь4 = 0;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПересчитатьБалансЗеновойПримесиПоВладельцам()
	
	Для Каждого СтрокаТабличнойЧасти Из Объект.РасчетПоВладельцам Цикл
		Если СтрокаТабличнойЧасти.ПроводилиОчистку И Объект.ПроводилиОчистку Тогда
			СтрокаТабличнойЧасти.БалансЗерновойПримесиПоВладельцу = РасчитатьБалансЗерновойПримесиПоВладельцу(СтрокаТабличнойЧасти);
		Иначе 
			СтрокаТабличнойЧасти.БалансЗерновойПримесиПоВладельцу = 0;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция РасчитатьБалансЗерновойПримесиПоВладельцу(СтрокаТабличнойЧасти, ИтогЦентнероПроцентов = 0)
	
	БалансСора = 0;
	
	Если Объект.ПроводилиОчистку И СтрокаТабличнойЧасти.ПроводилиОчистку = 1 Тогда
		
		Если Объект.ВидОперации = Перечисления.ИНАГРО_ВидыОперацийФорма34Сводная.ПрямойРасчет Тогда
			ЗерноваяПримесьПосле = Объект.ЗерноваяПримесь2;
		Иначе
			ЗерноваяПримесьПосле = СтрокаТабличнойЧасти.ЗерноваяПримесь2;
		КонецЕсли;
		
		ИтогЦентнероПроцентов = 0;
		
		Если Объект.Порядок Тогда
			
			БалансСора = РассчитатьБалансСорнойПримеси(ИтогЦентнероПроцентов,
			                                  СтрокаТабличнойЧасти.ФизическийВес1 - СтрокаТабличнойЧасти.УбыльОтСушки, СтрокаТабличнойЧасти.ЗерноваяПримесь1,
											  СтрокаТабличнойЧасти.ФизическийВес2, ЗерноваяПримесьПосле,
											  СтрокаТабличнойЧасти.ФизическийВес3, Объект.ЗерноваяПримесь8,
											  СтрокаТабличнойЧасти.ФизическийВес21, Объект.ЗерноваяПримесь7,
											  СтрокаТабличнойЧасти.ФизическийВес31, Объект.ЗерноваяПримесь9,
											  СтрокаТабличнойЧасти.ФизическийВес32, Объект.ЗерноваяПримесь10);
			
		Иначе
			
			Если Объект.СпособРасчетаУбылиОтОчистки = Перечисления.ИНАГРО_СпособыРасчетаУбылиОтОчистки.СУчетомУбылиОтСушки Тогда
				
				БалансСора = РассчитатьБалансСорнойПримеси(ИтогЦентнероПроцентов,
												  СтрокаТабличнойЧасти.ФизическийВес1, СтрокаТабличнойЧасти.ЗерноваяПримесь1,
												  СтрокаТабличнойЧасти.ФизическийВес1 - СтрокаТабличнойЧасти.УбыльОтСушки - СтрокаТабличнойЧасти.ФизическийВес21 - СтрокаТабличнойЧасти.ФизическийВес3 - СтрокаТабличнойЧасти.ФизическийВес31 - СтрокаТабличнойЧасти.ФизическийВес32, ЗерноваяПримесьПосле,
												  СтрокаТабличнойЧасти.ФизическийВес3, Объект.ЗерноваяПримесь8,
												  СтрокаТабличнойЧасти.ФизическийВес21, Объект.ЗерноваяПримесь7,
												  СтрокаТабличнойЧасти.ФизическийВес31, Объект.ЗерноваяПримесь9,
												  СтрокаТабличнойЧасти.ФизическийВес32, Объект.ЗерноваяПримесь10);
				
			Иначе
				
				БалансСора = РассчитатьБалансСорнойПримеси(ИтогЦентнероПроцентов,
												  СтрокаТабличнойЧасти.ФизическийВес1, СтрокаТабличнойЧасти.ЗерноваяПримесь1,
												  СтрокаТабличнойЧасти.ФизическийВес1 - СтрокаТабличнойЧасти.ФизическийВес21 - СтрокаТабличнойЧасти.ФизическийВес3 - СтрокаТабличнойЧасти.ФизическийВес31 - СтрокаТабличнойЧасти.ФизическийВес32, ЗерноваяПримесьПосле,
												  СтрокаТабличнойЧасти.ФизическийВес3, Объект.ЗерноваяПримесь8,
												  СтрокаТабличнойЧасти.ФизическийВес21, Объект.ЗерноваяПримесь7,
												  СтрокаТабличнойЧасти.ФизическийВес31, Объект.ЗерноваяПримесь9,
												  СтрокаТабличнойЧасти.ФизическийВес32, Объект.ЗерноваяПримесь10);			
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат БалансСора;
	
КонецФункции

&НаСервере
Процедура РассчитатьИтоги()
	
	Объект.ФизическийВес1  = Объект.РасчетПоВладельцам.Итог("ФизическийВес1");
	Объект.ФизическийВес2  = Объект.РасчетПоВладельцам.Итог("ФизическийВес2");	
	Объект.ФизическийВес8  = Объект.РасчетПоВладельцам.Итог("ФизическийВес3");
	Объект.ФизическийВес9  = Объект.РасчетПоВладельцам.Итог("ФизическийВес31");
	Объект.ФизическийВес10 = Объект.РасчетПоВладельцам.Итог("ФизическийВес32");	
	Объект.ФизическийВес7  = Объект.РасчетПоВладельцам.Итог("ФизическийВес21");
	Объект.УбыльОтОчистки  = Объект.РасчетПоВладельцам.Итог("УбыльОтОчистки");
	Объект.УбыльОтСушки    = Объект.РасчетПоВладельцам.Итог("УбыльОтСушки");
	
	Объект.СнижениеВлажности = ?(Объект.Влажность5 = 0, 0, 100 * (Объект.Влажность5 - Объект.Влажность6) / (100 - Объект.Влажность6));
	
	тСводныеРасчеты();
	
КонецПроцедуры

&НаСервере
Процедура тСводныеРасчеты()
	
	Синий   = Новый Цвет(47, 95, 237);
	Красный = Новый Цвет(255, 0, 0);
	
	Элементы.НадписьУбыльОтСушки.Заголовок   = ПолучитьСводнуюУбыльОтСушки();
	Элементы.НадписьУбыльОтОчистки.Заголовок = ПолучитьСводнуюУбыльОтОчистки();

	Если Объект.СпособРасчетаУбылиОтОчистки = Перечисления.ИНАГРО_СпособыРасчетаУбылиОтОчистки.СУчетомУбылиОтСушки тогда
		ФизическийВесДляБалансаПосле = Объект.ФизическийВес2;
	иначе
		ФизическийВесДляБалансаПосле = Объект.ФизическийВес4;
	КонецЕсли;
	
	ИтогЦентнероПроцентов = 0;
	
	БалансСорнойПримеси = РассчитатьБалансСорнойПримеси(ИтогЦентнероПроцентов, Объект.ФизическийВес3, Объект.СорнаяПримесь3,
													    ФизическийВесДляБалансаПосле, Объект.СорнаяПримесь4,
													    Объект.ФизическийВес8, Объект.СорнаяПримесь8,
													    Объект.ФизическийВес7, Объект.СорнаяПримесь7,
													    Объект.ФизическийВес9, Объект.СорнаяПримесь9,
													    Объект.ФизическийВес10, Объект.СорнаяПримесь10);
											  
	стрБалансСора = НСтр("ru='Баланс сора ';uk='Баланс смітності '")+ БалансСорнойПримеси + "%. ";	
	
	ДопустимыйБалансСора = 0.2;
	
	Если БалансСорнойПримеси > ДопустимыйБалансСора Тогда
		Элементы.НадписьБалансСорнойПримеси.ЦветТекста = Красный;
		стрБалансСора = стрБалансСора + НСтр("ru='Занижение сора в вых. продуктах (макс. ';uk='Заниження смітності в вих. продуктах (макс. '") + ДопустимыйБалансСора + "%)";
	ИначеЕсли БалансСорнойПримеси < 0 Тогда
		Элементы.НадписьБалансСорнойПримеси.ЦветТекста = Красный;
		стрБалансСора = стрБалансСора + НСтр("ru='Превышение сора в вых. продуктах (макс. ';uk='Перевищення смітності в вих. продуктах (макс. '") + ДопустимыйБалансСора + "%)";
	Иначе
		Элементы.НадписьБалансСорнойПримеси.ЦветТекста = Синий;
	КонецЕсли;
		
	Элементы.НадписьБалансСорнойПримеси.Заголовок = стрБалансСора;
	
	ИтогЦентнероПроцентов = 0;
	
	БалансЗерновойПримеси = РассчитатьБалансСорнойПримеси(ИтогЦентнероПроцентов,  Объект.ФизическийВес3,  Объект.ЗерноваяПримесь3,
														  ФизическийВесДляБалансаПосле, Объект.ЗерноваяПримесь4,
														  Объект.ФизическийВес8, Объект.ЗерноваяПримесь8,
														  Объект.ФизическийВес7, Объект.ЗерноваяПримесь7,
														  Объект.ФизическийВес9, Объект.ЗерноваяПримесь9,
														  Объект.ФизическийВес10, Объект.ЗерноваяПримесь10);
	
	стрБалансЗерновойПримеси = "Баланс зерн. " + БалансЗерновойПримеси + "%. ";
	
	Если БалансЗерновойПримеси < 0 Тогда
		Элементы.НадписьБалансЗерновойПримиси.ЦветТекста = Красный;
		стрБалансЗерновойПримеси = стрБалансЗерновойПримеси + НСтр("ru='Превышение зерн. прим. в вых. продуктах';uk='Перевищення зерн. дом. у вих. продуктах'");
	Иначе
		Элементы.НадписьБалансЗерновойПримиси.ЦветТекста = Синий;
	КонецЕсли;
	
	Элементы.НадписьБалансЗерновойПримиси.Заголовок = стрБалансЗерновойПримеси;
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьДокумент()
	
	Если Объект.Проведен Тогда		
		ТекстВопроса = НСтр("ru='Перед расчетом нужно отменить проведение документа. Продолжить?';uk='Перед розрахунком необхідно відмінити проведення документу. Продовжити?'");
		Оповещение = Новый ОписаниеОповещения("РассчитатьДокументЗавершение", ЭтотОбъект, Параметры);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	Иначе
		РассчитатьДокументНаСервере();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура РассчитатьДокументЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
   	
    Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ОтменитьПроведениеИРассчитатьДокументНаСервере();
	
КонецПроцедуры  

&НаСервере
Процедура ОтменитьПроведениеИРассчитатьДокументНаСервере()
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	ДокументОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);	
	ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
	
	УстановитьСостояниеДокумента();
	
	РассчитатьДокументНаСервере();
		
КонецПроцедуры

&НаСервере
Процедура РассчитатьДокументНаСервере()
	
	Если Объект.ВидОперации = Перечисления.ИНАГРО_ВидыОперацийФорма34Сводная.ПрямойРасчет Тогда
		
		Если Объект.Влажность2 = 0 ИЛИ Объект.СорнаяПримесь2 = 0 Тогда
			ТекстСообщения = Нстр("ru='Не заполнены показатели качества до которых необходимо сушить/чистить.';uk='Не заповнені показники якості до яких необхідно сушити/чистити.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			Возврат;
		КонецЕсли;
		
		РассчитатьОтВладельцев();
		
	ИначеЕсли Объект.ВидОперации = Перечисления.ИНАГРО_ВидыОперацийФорма34Сводная.ОбратныйРасчет Тогда
		
		РасчитатьОтВладельцевОбратныйРасчет();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура РасчитатьОтВладельцевОбратныйРасчет()
	
	Объект.ФизическийВес2 = Объект.РасчетПоВладельцам.Итог("ФизическийВес2");
	
	ЦПВлажность       = 0; 
	ЦПСорнаяПримесь   = 0; 
	ЦПЗерноваяПримесь = 0;
	
	Для Каждого СтрокаТабличнойЧасти Из Объект.РасчетПоВладельцам Цикл
		ЦПВлажность = ЦПВлажность + Окр(СтрокаТабличнойЧасти.ФизическийВес2 * СтрокаТабличнойЧасти.Влажность2 / 100);
		ЦПСорнаяПримесь = ЦПСорнаяПримесь + Окр(СтрокаТабличнойЧасти.ФизическийВес2 * СтрокаТабличнойЧасти.СорнаяПримесь2 / 100);
		ЦПЗерноваяПримесь = ЦПЗерноваяПримесь + Окр(СтрокаТабличнойЧасти.ФизическийВес2 * СтрокаТабличнойЧасти.ЗерноваяПримесь2 / 100);
	КонецЦикла;
	
	Объект.Влажность2       = Окр(ИНАГРО_Элеватор.Процент(Объект.ФизическийВес2, ЦПВлажность), 1);
	Объект.СорнаяПримесь2   = Окр(ИНАГРО_Элеватор.Процент(Объект.ФизическийВес2, ЦПСорнаяПримесь), 1);
	Объект.ЗерноваяПримесь2 = Окр(ИНАГРО_Элеватор.Процент(Объект.ФизическийВес2, ЦПЗерноваяПримесь), 1);
	
	Для Каждого СтрокаТабличнойЧасти Из Объект.РасчетПоВладельцам Цикл	
		РассчитатьСтрокуПоВладельцуОбратныйРасчет(СтрокаТабличнойЧасти, Истина, Истина); 
	КонецЦикла;
	
	Объект.ФизическийВес1 = Объект.РасчетПоВладельцам.Итог("ФизическийВес1");
	
	ЦПВлажность = 0; 
	ЦПСорнаяПримесь   = 0; 
	ЦПЗерноваяПримесь = 0;
	
	Для Каждого СтрокаТабличнойЧасти Из Объект.РасчетПоВладельцам Цикл
		ЦПВлажность       = ЦПВлажность + Окр(СтрокаТабличнойЧасти.ФизическийВес1 * СтрокаТабличнойЧасти.Влажность1 / 100);
		ЦПСорнаяПримесь   = ЦПСорнаяПримесь + Окр(СтрокаТабличнойЧасти.ФизическийВес1 * СтрокаТабличнойЧасти.СорнаяПримесь1 / 100);
		ЦПЗерноваяПримесь = ЦПЗерноваяПримесь + Окр(СтрокаТабличнойЧасти.ФизическийВес1 * СтрокаТабличнойЧасти.ЗерноваяПримесь1 / 100);
	КонецЦикла;
	
	Объект.Влажность1       = Окр(ИНАГРО_Элеватор.Процент(Объект.ФизическийВес1, ЦПВлажность),2);
	Объект.СорнаяПримесь1   = Окр(ИНАГРО_Элеватор.Процент(Объект.ФизическийВес1, ЦПСорнаяПримесь),2);
	Объект.ЗерноваяПримесь1 = Окр(ИНАГРО_Элеватор.Процент(Объект.ФизическийВес1, ЦПЗерноваяПримесь),2);
	
	Объект.ФизическийВес8   = Объект.РасчетПоВладельцам.Итог("ФизическийВес3");
	Объект.ФизическийВес9   = Объект.РасчетПоВладельцам.Итог("ФизическийВес31");
	Объект.ФизическийВес10  = Объект.РасчетПоВладельцам.Итог("ФизическийВес32");	
	Объект.ФизическийВес7   = Объект.РасчетПоВладельцам.Итог("ФизическийВес21");
	
	Объект.УбыльОтОчистки   = Объект.РасчетПоВладельцам.Итог("УбыльОтОчистки");
	Объект.УбыльОтСушки     = Объект.РасчетПоВладельцам.Итог("УбыльОтСушки");	
	
	РаспределитьВесПоОперациям();
	
	Объект.СнижениеВлажности = ?(Объект.ФизическийВес5 = 0, 0, Объект.УбыльОтСушки * 100 / Объект.ФизическийВес5);
	
	тСводныеРасчеты();
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьСтрокуПоВладельцуОбратныйРасчет(СтрокаТабличнойЧасти, РассчитатьСушку, РассчитатьОчистку)
	
	Если Объект.УбыльОтСушки = 0 Тогда
		СтрокаТабличнойЧасти.ПроводилиСушку = Ложь;
	КонецЕсли;
	
	Если (СтрокаТабличнойЧасти.ФизическийВес21 + СтрокаТабличнойЧасти.ФизическийВес31 + СтрокаТабличнойЧасти.ФизическийВес32 + СтрокаТабличнойЧасти.ФизическийВес3) = 0 Тогда
		СтрокаТабличнойЧасти.ПроводилиОчистку = Ложь;
	КонецЕсли;
	
	Если Объект.Порядок = Истина Тогда // сначала сушим потом чистим
		
		СтрокаТабличнойЧасти.ФизическийВес1 = СтрокаТабличнойЧасти.ФизическийВес2;
		СтрокаТабличнойЧасти.Влажность1     = СтрокаТабличнойЧасти.Влажность2;
		СтрокаТабличнойЧасти.СорнаяПримесь1 = СтрокаТабличнойЧасти.СорнаяПримесь2;		
		
		Если РассчитатьОчистку Тогда
			
			// ОЧИСТКА			
			Если СтрокаТабличнойЧасти.ПроводилиОчистку И Объект.ПроводилиОчистку Тогда
				СтрокаТабличнойЧасти.ФизическийВес1    = СтрокаТабличнойЧасти.ФизическийВес2 + (СтрокаТабличнойЧасти.ФизическийВес21 + СтрокаТабличнойЧасти.ФизическийВес31 + СтрокаТабличнойЧасти.ФизическийВес32 + СтрокаТабличнойЧасти.ФизическийВес3);
				СтрокаТабличнойЧасти.СорнаяПримесь1    = ПолучитьСорнуюПримесьДоОчисткиОбратныйРасчет(СтрокаТабличнойЧасти.ФизическийВес1, СтрокаТабличнойЧасти.ФизическийВес2, СтрокаТабличнойЧасти.СорнаяПримесь2, СтрокаТабличнойЧасти.ФизическийВес21, СтрокаТабличнойЧасти.ФизическийВес31, СтрокаТабличнойЧасти.ФизическийВес32, СтрокаТабличнойЧасти.ФизическийВес3);
			КонецЕсли;
			
		КонецЕсли;
		
		Если РассчитатьСушку Тогда
			//СУШКА
			Если СтрокаТабличнойЧасти.ПроводилиСушку И Объект.ПроводилиСушку Тогда
				СтрокаТабличнойЧасти.ФизическийВес1    = СтрокаТабличнойЧасти.ФизическийВес1 + СтрокаТабличнойЧасти.УбыльОтСушки;
				СтрокаТабличнойЧасти.СнижениеВлажности = ?(СтрокаТабличнойЧасти.ФизическийВес1 = 0, 0, СтрокаТабличнойЧасти.УбыльОтСушки * 100 / СтрокаТабличнойЧасти.ФизическийВес1);
				СтрокаТабличнойЧасти.Влажность1        = СтрокаТабличнойЧасти.Влажность2 + СтрокаТабличнойЧасти.СнижениеВлажности * (100 - Объект.Влажность2) / 100;
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе // вначале чистим потом сушим
		
		СтрокаТабличнойЧасти.ФизическийВес1 = СтрокаТабличнойЧасти.ФизическийВес2;
		СтрокаТабличнойЧасти.Влажность1     = СтрокаТабличнойЧасти.Влажность2;
		СтрокаТабличнойЧасти.СорнаяПримесь1 = СтрокаТабличнойЧасти.СорнаяПримесь2;
		
		Если РассчитатьСушку Тогда
			
			// СУШКА
			Если СтрокаТабличнойЧасти.ПроводилиСушку И Объект.ПроводилиСушку Тогда
				СтрокаТабличнойЧасти.ФизическийВес1    = СтрокаТабличнойЧасти.ФизическийВес1 + СтрокаТабличнойЧасти.УбыльОтСушки;
				СтрокаТабличнойЧасти.СнижениеВлажности = ?(СтрокаТабличнойЧасти.ФизическийВес1 = 0, 0, СтрокаТабличнойЧасти.УбыльОтСушки * 100 / СтрокаТабличнойЧасти.ФизическийВес1);
				СтрокаТабличнойЧасти.Влажность1        = СтрокаТабличнойЧасти.Влажность2 + СтрокаТабличнойЧасти.СнижениеВлажности * (100 - Объект.Влажность2) / 100;				
			КонецЕсли;
			
		КонецЕсли;
		
		Если РассчитатьОчистку Тогда
			
			// ОЧИСТКА
			Если СтрокаТабличнойЧасти.ПроводилиОчистку И Объект.ПроводилиОчистку Тогда
				СтрокаТабличнойЧасти.ФизическийВес1    = СтрокаТабличнойЧасти.ФизическийВес1 + (СтрокаТабличнойЧасти.ФизическийВес21 + СтрокаТабличнойЧасти.ФизическийВес31 + СтрокаТабличнойЧасти.ФизическийВес32 + СтрокаТабличнойЧасти.ФизическийВес3);
				СтрокаТабличнойЧасти.СорнаяПримесь1    = ПолучитьСорнуюПримесьДоОчисткиОбратныйРасчет(СтрокаТабличнойЧасти.ФизическийВес1, СтрокаТабличнойЧасти.ФизическийВес2, СтрокаТабличнойЧасти.СорнаяПримесь2, СтрокаТабличнойЧасти.ФизическийВес21, СтрокаТабличнойЧасти.ФизическийВес31, СтрокаТабличнойЧасти.ФизическийВес32, СтрокаТабличнойЧасти.ФизическийВес3);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;	
	
	Если СтрокаТабличнойЧасти.УбыльОтСушки <> 0 Тогда
		СтрокаТабличнойЧасти.Посушено = Истина;
	Иначе
		СтрокаТабличнойЧасти.Посушено = Ложь;
	КонецЕсли;
	
	Если (СтрокаТабличнойЧасти.ФизическийВес21 + СтрокаТабличнойЧасти.ФизическийВес31 + СтрокаТабличнойЧасти.ФизическийВес32 + СтрокаТабличнойЧасти.ФизическийВес3) <> 0 Тогда
		СтрокаТабличнойЧасти.Очищено = Истина;
	Иначе
		СтрокаТабличнойЧасти.Очищено = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСорнуюПримесьДоОчисткиОбратныйРасчет(ВесДоОчистки, ВесПослеОчистки, СорнаяПримесьПосле, ВесПП, ВесОтходов1Кат, ВесОтходов2Кат, ВесОтходов3Кат)
	
	// Расчитаем вес до из фо-лы баланса сора 
	// ПогрешностьПоОчистке - прогнозный баланс сора
	ВесПоСорнойПримесиПосле       = Окр(ВесПослеОчистки * СорнаяПримесьПосле / 100, 0);
	ВесПоСорнойПримесиПП	      = Окр(ВесПП * Объект.СорнаяПримесь7 / 100, 0);
	ВесПоСорнойПримесиОтходов1Кат = Окр(ВесОтходов1Кат * Объект.СорнаяПримесь9 / 100, 0);
	ВесПоСорнойПримесиОтходов2Кат = Окр(ВесОтходов2Кат * Объект.СорнаяПримесь10 / 100, 0);
	ВесПоСорнойПримесиОтходов3Кат = Окр(ВесОтходов3Кат *Объект. СорнаяПримесь8 / 100, 0);
	
	Рез = ?(ВесДоОчистки = 0, 0, 100 * (ВесПоСорнойПримесиПосле + ВесПоСорнойПримесиПП + ВесПоСорнойПримесиОтходов1Кат + ВесПоСорнойПримесиОтходов2Кат + ВесПоСорнойПримесиОтходов3Кат) / ВесДоОчистки + Объект.ПогрешностьПоОчистке);
	
	Возврат Рез;
	
КонецФункции

&НаКлиенте
Процедура ВводПараметровВыборкиЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если РезультатЗакрытия <> Неопределено Тогда
		
		Если РезультатЗакрытия.ПоказыватьПредварительныйПросмотр Тогда
			ЗаполнитьРасчетПоВладельцамДаннымиТаблицыПоВладельцам(РезультатЗакрытия.АдресТаблицаВладельцевВХранилище);
		КонецЕсли;
		
		Если РезультатЗакрытия.Очищать Тогда
			Объект.РасчетПоВладельцам.Очистить();
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(Объект, РезультатЗакрытия.ДанныеФормы);
		
		РезультатЗакрытия.Свойство("Выборка", МетодЗаполнения);	
		
		Если МетодЗаполнения <> Неопределено Тогда
			ВводПараметровВыборкиЗавершениеНаСервере(РезультатЗакрытия);
		КонецЕсли;
		
		Модифицированность = Истина;

	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ВводПараметровВыборкиЗавершениеНаСервере(РезультатЗакрытия)
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");

	Если РезультатЗакрытия.Кнопка = "До" Тогда		
		ИНАГРО_Элеватор.ЗаполнитьФизическийВесДо(ДокументОбъект, МетодЗаполнения);		
	ИначеЕсли РезультатЗакрытия.Кнопка = "После" Тогда		
		ИНАГРО_Элеватор.ЗаполнитьФизическийВесПосле(ДокументОбъект, МетодЗаполнения);		
	КонецЕсли;
	
	ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");

	Объект.Отходы3Категории = ?(НЕ ЗначениеЗаполнено(Объект.Отходы3Категории), НегодныеОтходы(),  Объект.Отходы3Категории);
	Объект.ПобочныйПродукт  = ?(НЕ ЗначениеЗаполнено(Объект.ПобочныйПродукт),  ПобочныйПродукт(), Объект.ПобочныйПродукт);
	
	ЗаполнитьСчетаУчетаВТабличнойЧасти();
	
	Объект.РасчетПоВладельцам.Сортировать("Владелец ВОЗР");	
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРасчетПоВладельцамДаннымиТаблицыПоВладельцам(АдресТаблицаВладельцевВХранилище)
	
	ТаблицаВладельцев = ПолучитьИзВременногоХранилища(АдресТаблицаВладельцевВХранилище);
	
	Объект.РасчетПоВладельцам.Очистить();
	
	Для Каждого СтрокаТаблицы Из ТаблицаВладельцев Цикл
		
		НоваяСтрока = Объект.РасчетПоВладельцам.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.Номенклатура) Тогда
			НоваяСтрока.Номенклатура = Объект.Номенклатура;
		КонецЕсли;
		
	КонецЦикла;
		
КонецПроцедуры

&НаКлиенте
Процедура РаспределениеОтходовЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если РезультатЗакрытия <> Неопределено Тогда
		
		РезультатЗакрытия.Свойство("ОтходыНаРаспределение", ОтходыНаРаспределение);	
		
		Если ОтходыНаРаспределение <> Неопределено Тогда
			РаспределениеОтходовЗавершениеНаСервере(РезультатЗакрытия);
		КонецЕсли;
		
		Модифицированность = Истина;

	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура РаспределениеОтходовЗавершениеНаСервере(РезультатЗакрытия)
	
	ТаблицаВладельцев = ПолучитьИзВременногоХранилища(РезультатЗакрытия.АдресТаблицаВладельцевВХранилище);
	
	ИмяКолонки = "";
	
	Если Объект.ПобочныйПродукт = ОтходыНаРаспределение Тогда
		ИмяКолонки = "ФизическийВес21";
	ИначеЕсли Объект.Отходы1Категории = ОтходыНаРаспределение Тогда
		ИмяКолонки = "ФизическийВес31";
	ИначеЕсли Объект.Отходы2Категории = ОтходыНаРаспределение Тогда
		ИмяКолонки = "ФизическийВес32";
	КонецЕсли;
	
	Если ИмяКолонки <> "" Тогда		
		Для Каждого СтрокаТабличнойЧасти Из Объект.РасчетПоВладельцам Цикл
			СтрокаТаблицаВладельцев = ТаблицаВладельцев.Найти(СтрокаТабличнойЧасти.Владелец, "Владелец");
			СтрокаТабличнойЧасти[ИмяКолонки] = Окр(СтрокаТабличнойЧасти.ФизическийВес1 * СтрокаТаблицаВладельцев.ПроцентВыхода / 100);
			СтрокаТабличнойЧасти.БазисРаспределенияОтходов = 0;
		КонецЦикла;		
	КонецЕсли;			
	
	ФизическийВесНаРаспределение = РезультатЗакрытия.ВесОтходов - ТаблицаВладельцев.Итог("ВесОтходов");
	
	Если ФизическийВесНаРаспределение > 0 Тогда
		Если Объект.ПобочныйПродукт = ОтходыНаРаспределение Тогда
			Объект.ФизическийВес7 = ФизическийВесНаРаспределение;
			РаспределитьПобочныйПродукт("ФизическийВес21", Истина);
		ИначеЕсли Объект.Отходы1Категории = ОтходыНаРаспределение Тогда
			Объект.ФизическийВес9 = ФизическийВесНаРаспределение;
			РаспределитьОтходы1Кат("ФизическийВес31", Истина);
		ИначеЕсли Объект.Отходы2Категории = ОтходыНаРаспределение Тогда
			Объект.ФизическийВес10 = ФизическийВесНаРаспределение;
			РаспределитьОтходы2Кат("ФизическийВес32", Истина);
		КонецЕсли;
	КонецЕсли;
	
	Элементы["РасчетПоВладельцам" + ИмяКолонки].Видимость = Истина; 	
	
КонецПроцедуры

#КонецОбласти  

&НаКлиенте
Функция ПолучитьПараметрыВыборки()

	ДанныеОбъекта = Новый Структура(
		"Дата, Организация, Владелец,
		|ДоговорКонтрагента, Склад, ВидХранения,
		|МестоХранения, Силос, Номенклатура,
		|Урожай, ДатаНачала, ДатаОкончания,
		|СпособОтбораСушки, ВлажностьВыше, ВлажностьНиже,
		|СорнаяПримесьВыше, СорнаяПримесьНиже, ПроцентВлажности1,
		|ПроцентВлажности2, ПроцентСорнойПримеси1, ПроцентСорнойПримеси2,
		|НеУчитыватьНаправлениеНаСушкуПриОтборе, НеУчитыватьНаправлениеНаОчисткуПриОтборе,
		|Влажность2, СорнаяПримесь2, ВидОперации
		|");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	ДанныеОбъекта.Вставить("ИспользоватьСистемуКонтроляКачестваПартийЗерна", ИспользоватьСистемуКонтроляКачестваПартийЗерна);
	
	Возврат ДанныеОбъекта;

КонецФункции

#КонецОбласти  

#Область СлужебныеПроцедурыИФункцииБСП

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	
	Если ТипЗнч(Команда) = Тип("КомандаФормы") Тогда
		
		ИмяКоманды      = Команда.Имя;
		АдресНастроек   = ЭтотОбъект.ПараметрыПодключаемыхКоманд.АдресТаблицыКоманд;
		ОписаниеКоманды = ПодключаемыеКомандыКлиентПовтИсп.ОписаниеКоманды(ИмяКоманды, АдресНастроек);		
		
		Если ОписаниеКоманды.Идентификатор = "Форма34" Тогда
			
			СписокЗначенийПечатнойФормы = ЗаполнитьСписокЗначенийПечатнойФормы(Объект.Ссылка);
			
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("СписокВладельцев", СписокЗначенийПечатнойФормы);				
			
			ДополнительныеПараметры = Новый Структура;
			ДополнительныеПараметры.Вставить("Команда", Команда);
			
			ОповещениеОЗакрытии = Новый ОписаниеОповещения("ВыборПечатнойФормыЗавершение", ЭтотОбъект, ДополнительныеПараметры);
			
			ОткрытьФорму("Документ.ИНАГРО_Форма34Сводная.Форма.ФормаВыбораПечатнойФормы", ПараметрыФормы, ЭтаФорма, УникальныйИдентификатор, , , ОповещениеОЗакрытии, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			
		ИначеЕсли ОписаниеКоманды.Идентификатор = "ОтчетПроГаз" Тогда
			
			ДополнительныеПараметры = Новый Структура;
			ДополнительныеПараметры.Вставить("Команда", Команда);
			ДополнительныеПараметры.Вставить("ИдентификаторКоманды", ОписаниеКоманды.Идентификатор);

			Оповещение = Новый ОписаниеОповещения("ВводЧислаЗавершение", ЭтотОбъект, ДополнительныеПараметры); 
			ПоказатьВводЧисла(Оповещение, 0, Нстр("ru='Введите норму расхода газа';uk='Введіть норму витрат газу'"), 10, 2);
							
		Иначе
			ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект); 
		КонецЕсли; 
		
	Иначе		
		ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);		
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаСервереБезКонтекста
Функция ЗаполнитьСписокЗначенийПечатнойФормы(Ссылка)
			
	Возврат Документы.ИНАГРО_Форма34Сводная.ЗаполнитьСписокЗначенийПечатнойФормы(Ссылка);
		
КонецФункции

&НаКлиенте
Процедура ВыборПечатнойФормыЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(РезультатЗакрытия) = Тип("Структура") И РезультатЗакрытия <> Неопределено Тогда
		ЗаписатьВыбраннуюПечатнуюФорму(РезультатЗакрытия); 
		ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, ДополнительныеПараметры.Команда, Объект);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаписатьВыбраннуюПечатнуюФорму(ВыбранныйЭлемент)
    
    Документы.ИНАГРО_Форма34Сводная.ЗаписатьВыбраннуюПечатнуюФорму(ВыбранныйЭлемент);
    
КонецПроцедуры

&НаКлиенте 
Процедура ВводЧислаЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт 
	
	Если РезультатЗакрытия <> Неопределено Тогда 
		ЗаписатьВыбранноеКоличество(РезультатЗакрытия, ДополнительныеПараметры.ИдентификаторКоманды);
		ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, ДополнительныеПараметры.Команда, Объект);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаписатьВыбранноеКоличество(РезультатЗакрытия, ИдентификаторКоманды)
		
	Документы.ИНАГРО_Форма34Сводная.ЗаписатьВыбранноеКоличество(РезультатЗакрытия, ИдентификаторКоманды);
	
КонецПроцедуры

#КонецОбласти
