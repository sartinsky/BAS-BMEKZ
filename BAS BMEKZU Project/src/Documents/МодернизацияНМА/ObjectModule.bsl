#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Процедура определяет параметры учетной политики
//
Процедура ПодготовитьПараметрыУчетнойПолитики(СтруктураШапкиДокумента, Отказ, Заголовок)
	
	СтруктураШапкиДокумента.Вставить("ЕстьНалогНаПрибыль"             , УчетнаяПолитика.ПлательщикНалогаНаПрибыль(СтруктураШапкиДокумента.Организация, КонецМесяца(СтруктураШапкиДокумента.Дата)));
	СтруктураШапкиДокумента.Вставить("ЕстьНалогНаПрибыльДо2015"       , УчетнаяПолитика.ПлательщикНалогаНаПрибыльДо2015(СтруктураШапкиДокумента.Организация, КонецМесяца(СтруктураШапкиДокумента.Дата)));
	СтруктураШапкиДокумента.Вставить("ЕстьНДС"                        , УчетнаяПолитика.ПлательщикНДС(СтруктураШапкиДокумента.Организация, КонецМесяца(СтруктураШапкиДокумента.Дата)));
	
КонецПроцедуры // ПодготовитьПараметрыУчетнойПолитики()

// Выполняет движения по регистрам 
//
Процедура ДвиженияПоРегистрам(СтруктураШапкиДокумента, ТаблицаПоНМА, ТаблицаПервоначальныхДанных, Отказ, Заголовок)

	ДатаДока       = Дата;
	ТекОрганизация = СтруктураШапкиДокумента.Организация;

	УправлениеНеоборотнымиАктивами.ДополнитьТабличнуюЧастьСведениямиОбНМАБухНалогРегл(МоментВремени(), ТаблицаПоНМА,
	                                                  СтруктураШапкиДокумента, 
													  Отказ, Заголовок);

	Если Отказ Тогда
		
		Возврат;
		
	КонецЕсли;								
													  
	ПервоначальныеСведенияНМА 		= Движения.ПервоначальныеСведенияНМАБухгалтерскийУчет;
	ПервоначальныеСведенияНМА_НУ 	= Движения.ПервоначальныеСведенияНМАНалоговыйУчет;
	ПроводкиБУ             = Движения.Хозрасчетный;
	ТабАмортизации         = Неопределено;
	
	НеОблНДСДеятельность = Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяХозДеятельность;
	
	Для каждого СтрокаТЧ Из ТаблицаПоНМА Цикл

		ТекНМА = СтрокаТЧ.НематериальныйАктив;
		
		ТекПервоначальныеДанные 	= ТаблицаПервоначальныхДанных.Найти(СтрокаТЧ.НематериальныйАктив,"НМА_БУ");
		
		НепроизводственноеНМА = (СтрокаТЧ.НалоговоеНазначение_НМА = Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяНеХозДеятельность);
		

		// Движения по регистру ПервоначальныеСведенияНМА
		Движение = ПервоначальныеСведенияНМА.Добавить();
		Движение.Период 										= ДатаДока;
		Движение.НематериальныйАктив 							= ТекНМА;
		Движение.Организация 									= ТекОрганизация;
		Движение.СрокПолезногоИспользования 					= СтрокаТЧ.СрокПолезногоИспользованияБУ;
		Движение.ПервоначальнаяСтоимость 						= Макс(0, СтрокаТЧ.СтоимостьБУ + СтрокаТЧ.СуммаМодернизацииБУ); 
		Движение.ОбъемПродукцииРаботДляВычисленияАмортизации  	= СтрокаТЧ.ОбъемПродукцииРаботБУ; 
		Движение.ЛиквидационнаяСтоимость                      	= СтрокаТЧ.ЛиквидационнаяСтоимостьБУ;
		Движение.НачислятьАмортизацию 							= ТекПервоначальныеДанные.НачислятьАмортизацию_БУ;
		Движение.СпособНачисленияАмортизации 					= ТекПервоначальныеДанные.СпособНачисленияАмортизации_БУ;

		
		Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыль Тогда 
			
			ТекПервоначальныеДанные 	= ТаблицаПервоначальныхДанных.Найти(СтрокаТЧ.НематериальныйАктив,"НМА_НУ");
			
			// Движения по регистру ПервоначальныеСведенияНМАНалоговыйУчет
			Движение = ПервоначальныеСведенияНМА_НУ.Добавить();
			Движение.Период           			= ДатаДока;
			Движение.НематериальныйАктив 		= ТекНМА;
			Движение.Организация      			= ТекОрганизация;
			Движение.ПервоначальнаяСтоимостьНУ 	= Макс(0, СтрокаТЧ.СтоимостьНУ + СтрокаТЧ.СуммаМодернизацииНУ); 
			Движение.СрокПолезногоИспользования = СтрокаТЧ.СрокПолезногоИспользованияНУ;
			Движение.НачислятьАмортизацию 		= ТекПервоначальныеДанные.НачислятьАмортизацию_НУ;
			Движение.НалоговоеНазначение 		= ТекПервоначальныеДанные.НалоговоеНазначение_НУ;
			Движение.НалоговаяГруппаОС	 		= ТекПервоначальныеДанные.НалоговаяГруппаОС;
		КонецЕсли;	
		
		// списание модернизации Д СчетУчета К СчетУчетаВнеоборотногоАктива
		СуммаПроводки 	= СтрокаТЧ.СуммаМодернизацииБУ;
		СуммаПроводкиНУ = СтрокаТЧ.СуммаМодернизацииНУ;
		
		Если СуммаПроводки <> 0 Тогда

			Проводка = ПроводкиБУ.Добавить();

			Проводка.Период       = ДатаДока;
			Проводка.Организация  = ТекОрганизация;
			Проводка.Содержание   = НСтр("ru='Модернизация ""';uk='Модернізація ""'",Локализация.КодЯзыкаИнформационнойБазы()) + ТекНМА + """";
			Проводка.НомерЖурнала = НСтр("ru='НМА';uk='НМА'",Локализация.КодЯзыкаИнформационнойБазы());
			Проводка.Сумма        = СуммаПроводки;
			
			Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыль ИЛИ СтруктураШапкиДокумента.ЕстьНДС Тогда
				Проводка.НалоговоеНазначениеДт  = СтрокаТЧ.НалоговоеНазначение_НМА;
			КонецЕсли;
			
			Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыль Тогда
			    Проводка.СуммаНУДт 				= СуммаПроводкиНУ;
			КонецЕсли;
			
			Проводка.СчетДт       = СтрокаТЧ.СчетУчетаБУ;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "НематериальныеАктивы", ТекНМА);
			
			Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыль ИЛИ СтруктураШапкиДокумента.ЕстьНДС Тогда
				Проводка.НалоговоеНазначениеКт  = СтруктураШапкиДокумента.ОбъектСтроительства.НалоговоеНазначение;
			КонецЕсли;
			
			Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыльДо2015 Тогда
			    Проводка.СуммаНУКт 				= СуммаПроводкиНУ;
			КонецЕсли;
			
			Проводка.СчетКт       = СтруктураШапкиДокумента.СчетУчетаБУВнеоборотногоАктива;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОбъектыСтроительства", СтруктураШапкиДокумента.ОбъектСтроительства);
			
			Если НЕ СтруктураШапкиДокумента.ЕстьНДС Тогда
				// организация - не плательщик НДС. 
				Если НепроизводственноеНМА Тогда
					// Непроизводственное
					Проводка.НалоговоеНазначениеДт = СтрокаТЧ.НалоговоеНазначение_НМА;
				Иначе	
					Проводка.НалоговоеНазначениеДт = НеОблНДСДеятельность;
				КонецЕсли;	
				
				Проводка.НалоговоеНазначениеКт = НеОблНДСДеятельность;
			КонецЕсли;	
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Процедура формирует структуру шапки документа и дополнительных полей.
//
Процедура ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента) Экспорт

	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента = ОбщегоНазначенияРед12.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	СтруктураШапкиДокумента.Вставить("НалоговоеНазначениеОбъектаСтроительства", 
	                                 СтруктураШапкиДокумента.ОбъектСтроительства.НалоговоеНазначение);
	
КонецПроцедуры // ПодготовитьСтруктуруШапкиДокумента()

// Процедура формирует таблицы документа.
//
Процедура ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоНМА, ТаблицаПервоначальныхДанных, Отказ, Заголовок) Экспорт
	
	СтруктураПолей = Новый Структура;

	СтруктураПолей.Вставить("НематериальныйАктив", 			"НематериальныйАктив");

	СтруктураПолей.Вставить("СтоимостьБУ",                  "СтоимостьБУ");
	СтруктураПолей.Вставить("СуммаМодернизацииБУ",          "СуммаМодернизацииБУ");
	СтруктураПолей.Вставить("ЛиквидационнаяСтоимостьБУ",    "ЛиквидационнаяСтоимостьБУ");
	
	СтруктураПолей.Вставить("СрокПолезногоИспользованияБУ", "СрокПолезногоИспользованияБУ");
	
	СтруктураПолей.Вставить("ОбъемПродукцииРаботБУ",        "ОбъемПродукцииРаботБУ");

	СтруктураПолей.Вставить("СтоимостьНУ",                  "СтоимостьНУ");
	СтруктураПолей.Вставить("СрокПолезногоИспользованияНУ", "СрокПолезногоИспользованияНУ");
	СтруктураПолей.Вставить("СуммаМодернизацииНУ",          "СуммаМодернизацииНУ");

	РезультатЗапросаПоНМА = ОбщегоНазначенияРед12.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "НМА", СтруктураПолей);
	ТаблицаПоНМА          = РезультатЗапросаПоНМА.Выгрузить();
	
	// подготовка первоначальной таблицы
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекОрганизация", СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("ТекПериод",      МоментВремени());
	СписокНМА = ТаблицаПоНМА.ВыгрузитьКолонку("НематериальныйАктив");
	Запрос.УстановитьПараметр("СписокНМА",       СписокНМА);
	Запрос.Текст = "ВЫБРАТЬ
	               |	ПервоначальныеСведенияНМА_БУ.НематериальныйАктив КАК НМА_БУ,
	               |	ПервоначальныеСведенияНМА_БУ.НачислятьАмортизацию КАК НачислятьАмортизацию_БУ,
	               |	ПервоначальныеСведенияНМА_БУ.СпособНачисленияАмортизации КАК СпособНачисленияАмортизации_БУ,
	               |	ПервоначальныеСведенияНМА_НУ.НематериальныйАктив КАК НМА_НУ,
	               |	ПервоначальныеСведенияНМА_НУ.НачислятьАмортизацию КАК НачислятьАмортизацию_НУ,
	               |	ПервоначальныеСведенияНМА_НУ.СрокПолезногоИспользования КАК СрокПолезногоИспользования_НУ,
	               |	ПервоначальныеСведенияНМА_НУ.ПервоначальнаяСтоимостьНУ КАК ПервоначальнаяСтоимость_НУ,
	               |	ПервоначальныеСведенияНМА_НУ.НалоговаяГруппаОС КАК НалоговаяГруппаОС,
	               |	ПервоначальныеСведенияНМА_НУ.НалоговоеНазначение КАК НалоговоеНазначение_НУ
	               |ИЗ
	               |	РегистрСведений.ПервоначальныеСведенияНМАБухгалтерскийУчет.СрезПоследних(
	               |			&ТекПериод,
	               |			НематериальныйАктив В (&СписокНМА)
	               |				И Организация = &ТекОрганизация) КАК ПервоначальныеСведенияНМА_БУ
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПервоначальныеСведенияНМАНалоговыйУчет.СрезПоследних(&ТекПериод, НематериальныйАктив В (&СписокНМА)) КАК ПервоначальныеСведенияНМА_НУ
	               |		ПО ПервоначальныеСведенияНМА_БУ.НематериальныйАктив = ПервоначальныеСведенияНМА_НУ.НематериальныйАктив";
	ТаблицаПервоначальныхДанных = Запрос.Выполнить().Выгрузить();
	
КонецПроцедуры

Процедура ЗаполнитьПоДокументуОснованию(Основание)

	// Заполним реквизиты из стандартного набора по документу основанию.
	ЗаполнениеДокументов.ЗаполнитьПоОснованию(ЭтотОбъект, Основание);

КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)

	ТипДанныхЗаполнения = ТипЗнч(ДанныеЗаполнения);
	Если ДанныеЗаполнения <> Неопределено И ТипДанныхЗаполнения <> Тип("Структура")
		И Метаданные().ВводитсяНаОсновании.Содержит(ДанныеЗаполнения.Метаданные()) Тогда
		ЗаполнитьПоДокументуОснованию(ДанныеЗаполнения);
	КонецЕсли;
	ЗаполнениеДокументов.Заполнить(ЭтотОбъект, ДанныеЗаполнения);

	СчетаУчета = УправлениеНеоборотнымиАктивами.ПолучитьСчетаУчетаОбъектовСтроительства(Организация, ОбъектСтроительства);
	Если НЕ ЗначениеЗаполнено(СчетУчетаБУВнеоборотногоАктива) Тогда
		СчетУчетаБУВнеоборотногоАктива = СчетаУчета.СчетУчетаБУ;
	КонецЕсли;

КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)

	МассивНепроверяемыхРеквизитов = Новый Массив;

	ПлательщикНалогаНаПрибыль 	= УчетнаяПолитика.ПлательщикНалогаНаПрибыль(Организация, Дата);
	ПлательщикНДС 				= УчетнаяПолитика.ПлательщикНДС(Организация, Дата);
	ПлательщикНалогаНаПрибыльДо2015 	= УчетнаяПолитика.ПлательщикНалогаНаПрибыльДо2015(Организация, Дата);
	
	УправлениеВнеоборотнымиАктивами.ПроверитьОтсутствиеДублейВТабличнойЧасти(ЭтотОбъект, "НМА", Новый Структура("НематериальныйАктив"), Отказ);

	Если ПлательщикНалогаНаПрибыль Тогда
		Если НЕ ЗначениеЗаполнено(ОбъектСтроительства.НалоговоеНазначение) Тогда
			ТекстСообщения = НСтр("ru='Не заполнено налоговое назначение у объекта строительства <%1>';uk=""Не заповнене податкове призначення у об'єкту будівництва <%1>""");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ОбъектСтроительства);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, "ОбъектСтроительства", "Объект", Отказ);
		КонецЕсли;	
	КонецЕсли;	
	
	// Проверим что суммы модернизации относимые на каждый объект ОС в сумме равны данным из шапки документа
	Если НМА.Итог("СуммаМодернизацииБУ") <> СтоимостьБУ Тогда
		
		ТекстСообщения = НСтр("ru='По бухгалтерскому учету общая сумма модернизации, не соответствует в итоге суммам, отнесенным на нематериальные активы!';uk='По бухгалтерському обліку загальна сума модернізації, не відповідає в підсумку сумам, віднесеним на нематеріальні активи!'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, "СтоимостьБУ", "Объект", Отказ);
							 
	КонецЕсли;

	Если ПлательщикНалогаНаПрибыльДо2015 Тогда
		 
		// Проверим что суммы модернизации относимые на каждый объект ОС в сумме равны данным из шапки документа
		Если НМА.Итог("СуммаМодернизацииНУ") <> СтоимостьНУ Тогда
			
			ТекстСообщения = НСтр("ru='По налоговому учету общая сумма модернизации, не соответствует в итоге суммам, отнесенным на нематериальные активы!';uk='По податковому обліку загальна сума модернізації, не відповідає в підсумку сумам, віднесеним на нематеріальні активи!'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, "СтоимостьНУ", "Объект", Отказ);
			
		КонецЕсли;
		
	КонецЕсли;
	
	ПроверитьЗаполнениеПараметровАмортизацииНМА(Отказ);
	
КонецПроцедуры

// Проверяет правильность заполнения строк табличной части "НМА".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТоварам        - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  СтруктураШапкиДокумента - структура, содержащая рексвизиты шапки документа и результаты запроса по шапке
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеПараметровАмортизацииНМА(Отказ)

	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Организация",     Организация);
	Запрос.УстановитьПараметр("Период",          Новый Граница(Дата, ВидГраницы.Исключая));
	Запрос.УстановитьПараметр("ВнешнийИсточник", НМА);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВнешнийИсточник.НематериальныйАктив КАК НематериальныйАктив,
	               |	ВнешнийИсточник.СрокПолезногоИспользованияБУ КАК СрокИспользованияДляВычисленияАмортизацииБУ,
	               |	ВнешнийИсточник.СрокПолезногоИспользованияНУ КАК СрокИспользованияДляВычисленияАмортизацииНУ,
	               |	ВнешнийИсточник.НомерСтроки КАК НомерСтроки,
	               |	ВнешнийИсточник.ОбъемПродукцииРаботБУ КАК ОбъемПродукцииРаботБУ
	               |ПОМЕСТИТЬ НематериальныеАктивы
	               |ИЗ
	               |	&ВнешнийИсточник КАК ВнешнийИсточник
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	НематериальныйАктив
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	НематериальныеАктивы.НематериальныйАктив КАК НематериальныйАктив,
	               |	ЕСТЬNULL(ПервоначальныеСведенияБУ.СпособНачисленияАмортизации, ЗНАЧЕНИЕ(Перечисление.СпособыНачисленияАмортизацииНМА.ПустаяСсылка)) КАК СпособНачисленияАмортизацииБУ,
	               |	ЕСТЬNULL(ПервоначальныеСведенияНУ.СпособНачисленияАмортизации, ЗНАЧЕНИЕ(Перечисление.СпособыНачисленияАмортизацииНМА.ПустаяСсылка)) КАК СпособНачисленияАмортизацииНУ,
	               |	НематериальныеАктивы.СрокИспользованияДляВычисленияАмортизацииБУ КАК СрокИспользованияДляВычисленияАмортизацииБУ,
	               |	НематериальныеАктивы.СрокИспользованияДляВычисленияАмортизацииНУ КАК СрокИспользованияДляВычисленияАмортизацииНУ,
	               |	НематериальныеАктивы.НомерСтроки КАК НомерСтроки,
	               |	НематериальныеАктивы.ОбъемПродукцииРаботБУ КАК ОбъемПродукцииРаботБУ
	               |ИЗ
	               |	НематериальныеАктивы КАК НематериальныеАктивы
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПервоначальныеСведенияНМАБухгалтерскийУчет.СрезПоследних(
	               |				&Период,
	               |				НематериальныйАктив В
	               |					(ВЫБРАТЬ
	               |						НематериальныеАктивы.НематериальныйАктив
	               |					ИЗ
	               |						НематериальныеАктивы)) КАК ПервоначальныеСведенияБУ
	               |		ПО НематериальныеАктивы.НематериальныйАктив = ПервоначальныеСведенияБУ.НематериальныйАктив
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПервоначальныеСведенияНМАНалоговыйУчет.СрезПоследних(
	               |				&Период,
	               |				НематериальныйАктив В
	               |					(ВЫБРАТЬ
	               |						НематериальныеАктивы.НематериальныйАктив
	               |					ИЗ
	               |						НематериальныеАктивы)) КАК ПервоначальныеСведенияНУ
	               |		ПО НематериальныеАктивы.НематериальныйАктив = ПервоначальныеСведенияНУ.НематериальныйАктив";
	
	ТаблицаСведенийНМА  = Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрокаТЧ Из ТаблицаСведенийНМА Цикл

		Если ЗначениеЗаполнено(СтрокаТЧ.СпособНачисленияАмортизацииБУ) Тогда

			Если СтрокаТЧ.СпособНачисленияАмортизацииБУ = Перечисления.СпособыНачисленияАмортизацииНМА.Производственный Тогда 
				Если НЕ ЗначениеЗаполнено(СтрокаТЧ.ОбъемПродукцииРаботБУ) Тогда
					
					СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Для нематериального актива ""%1"" в строке №%2 не заполнен реквизит ""Объем работ для амортизации (БУ)""!';uk='Для нематеріального активу ""%1"" в рядку №%2 не заповнений реквізит ""Обсяг робіт для амортизації (БО)""!'"), СтрокаТЧ.НематериальныйАктив, СтрокаТЧ.НомерСтроки);
					Поле = "НМА[" + Формат(СтрокаТЧ.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].ОбъемПродукцииРаботБУ";								
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения,ЭтотОбъект, Поле, "Объект", Отказ);
				КонецЕСли;
			Иначе 
				Если НЕ ЗначениеЗаполнено(СтрокаТЧ.СрокИспользованияДляВычисленияАмортизацииБУ) Тогда
					СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Для нематериального актива ""%1"" в строке №%2 не заполнен реквизит ""Срок использ. (БУ)""!';uk='Для нематеріального активу ""%1"" в рядку №%2 не заповнений реквізит ""Строк викор. (БО)""!'"), СтрокаТЧ.НематериальныйАктив, СтрокаТЧ.НомерСтроки);
					Поле = "НМА[" + Формат(СтрокаТЧ.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].СрокИспользованияДляВычисленияАмортизацииБУ";								
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения,ЭтотОбъект, Поле, "Объект", Отказ);
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;	
		
		Если ЗначениеЗаполнено(СтрокаТЧ.СпособНачисленияАмортизацииНУ) Тогда
			
			Если НЕ СтрокаТЧ.СпособНачисленияАмортизацииНУ = Перечисления.СпособыНачисленияАмортизацииНМА.Производственный Тогда
				Если НЕ ЗначениеЗаполнено(СтрокаТЧ.СрокИспользованияДляВычисленияАмортизацииНУ) Тогда
					СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Для нематериального актива ""%1"" в строке №%2 не заполнен реквизит ""Срок использ. (НУ)""!';uk='Для нематеріального активу ""%1"" в рядку №%2 не заповнений реквізит ""Строк викор. (ПО)""!'"), СтрокаТЧ.НематериальныйАктив, СтрокаТЧ.НомерСтроки);
					Поле = "НМА[" + Формат(СтрокаТЧ.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].СрокИспользованияДляВычисленияАмортизацииНУ";								
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения,ЭтотОбъект, Поле, "Объект",Отказ);
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;	
		
	КонецЦикла;
	
КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиНМА()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаПроведения(Отказ,РежимПроведения)

	Перем Заголовок, СтруктураШапкиДокумента;
	Перем ТаблицаПоНМА, ТаблицаПервоначальныхДанных;
	
	Заголовок = ОбщегоНазначенияБПВызовСервера.ПредставлениеДокументаПриПроведении(Ссылка);
	
	// ПОДГОТОВКА ПРОВЕДЕНИЯ ПО ДАННЫМ ДОКУМЕНТА

	ПроведениеСервер.ПодготовитьНаборыЗаписейКПроведению(ЭтотОбъект);
	Если РучнаяКорректировка Тогда
		Возврат;
	КонецЕсли;

	ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента);
                                                                                                    
	// Получим данные учетной политики                                                             
	ПодготовитьПараметрыУчетнойПолитики(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоНМА, ТаблицаПервоначальныхДанных, Отказ, Заголовок);
	
	//проверка, нет ли списанных НМА в табличной части
	УправлениеНеоборотнымиАктивами.ПроверитьНаСписанностьНМА(МоментВремени(), Организация, ТаблицаПоНМА, Отказ, Заголовок);
	
	Если Не Отказ Тогда
		
		ДвиженияПоРегистрам(СтруктураШапкиДокумента,ТаблицаПоНМА, ТаблицаПервоначальныхДанных, Отказ, Заголовок);
		
	КонецЕсли;
	
	Движения.Хозрасчетный.ВыполнитьДействияПередЗаписьюДвижений();

	ПроведениеСервер.ПодготовитьНаборыЗаписейКЗаписиДвижений(ЭтотОбъект);
	
КонецПроцедуры // ОбработкаПроведения()

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;

	ДатаНКУ2015 = '2015 01 01';
	Если Дата >= ДатаНКУ2015 Тогда
		СтоимостьНУ = СтоимостьБУ;
		Для Каждого СтрокаНМА Из НМА Цикл
			СтрокаНМА.СуммаМодернизацииНУ = СтрокаНМА.СуммаМодернизацииБУ;
		КонецЦикла; 
	КонецЕсли;	
	
	ПлательщикНалогаНаПрибыль = УчетнаяПолитика.ПлательщикНалогаНаПрибыль(Организация, Дата);
	
	Если НЕ Отказ Тогда
		Если НЕ ПлательщикНалогаНаПрибыль Тогда
			СтоимостьНУ = 0;	
			Для Каждого СтрокаНМА Из НМА Цикл
				СтрокаНМА.СуммаМодернизацииНУ = 0;
			КонецЦикла; 
		КонецЕсли; 
	КонецЕсли;	
	
КонецПроцедуры // ПередЗаписью

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКОтменеПроведения(ЭтотОбъект);
	Движения.Записать();
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)

	Дата = НачалоДня(ОбщегоНазначенияБП.ПолучитьРабочуюДату());
	Ответственный = Пользователи.ТекущийПользователь();

КонецПроцедуры

#КонецЕсли
