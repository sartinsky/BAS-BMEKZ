#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда  

Перем ПараметрыУчетаЭлеватора;
Перем СобственноеПодразделение;
	
#Область ОбработчикиСобытий

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	ТипДанныхЗаполнения = ТипЗнч(ДанныеЗаполнения);	
	
	ИНАГРО_ЭлеваторЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект);
	
	ЗаполнениеДокументов.Заполнить(ЭтотОбъект, ДанныеЗаполнения); 	
	
	Если ЭтоНовый()	Тогда
		
		ОбновитьПараметрыУчетаЭлеватора();
		ЭтотОбъект.НеПереформировыватьАвтоматически = ПараметрыУчетаЭлеватора.ОтключитьАвтоматическоеНачислениеУслуг;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ОбновитьПараметрыУчетаЭлеватора();

	ЕстьЛабораторныйАнализ = Ложь;
	Для Каждого СтрокаТабличнойЧасти Из СписокТТН Цикл
		Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.ЛабораторныйАнализ) Тогда
			ЕстьЛабораторныйАнализ = Истина;
			Прервать;
		КонецЕсли;			
	КонецЦикла;
	
	Если НЕ Отказ Тогда
		
		ПараметрыДляРасчетаЗачетногоВеса = ПолучитьПараметрыДляРасчетаЗачетногоВеса();
		
		Для Каждого СтрокаТабличнойЧасти Из СписокТТН Цикл 			
						
			ЗаполнитьЗначенияСвойств(ПараметрыДляРасчетаЗачетногоВеса, СтрокаТабличнойЧасти);

			СтрокаТабличнойЧасти.ЗачетныйВес = ИНАГРО_Элеватор.ЗачетныйВесПриПроведении(ПараметрыДляРасчетаЗачетногоВеса);
			
		КонецЦикла;
		
	КонецЕсли;
	
	ФизическийВес = СписокТТН.Итог("ФизическийВес");
	
	Для Каждого СтрокаТабличнойЧасти Из СписокТТН Цикл
		Номенклатура = СтрокаТабличнойЧасти.Номенклатура;
		Прервать;
	КонецЦикла;
	
	Если НЕ НеПереформировыватьАвтоматически Тогда 
		ЗаполнитьУслуги();
	КонецЕсли;	
		
КонецПроцедуры 

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	Перем Заголовок, СтруктураШапкиДокумента;
	Перем ТаблицаПоКультурам, ТаблицаПоТТН;
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКПроведению(ЭтотОбъект);
		   
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначенияБПВызовСервера.ПредставлениеДокументаПриПроведении(Ссылка);
	
	Если РежимПроведения = РежимПроведенияДокумента.Неоперативный Тогда		
		Если НЕ ПроверитьЗаполнение() Тогда
			Отказ = Истина;
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(МестоХранения) И МестоХранения.Владелец <> Склад Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Место хранения %2 не принадлежит складу %1!';uk='Місце зберігання %2 не належить складу %1!'"), Склад, МестоХранения);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , , , Отказ);
	КонецЕсли;	
	
	ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента);

	ПодготовитьТаблицуПоКультурам(СтруктураШапкиДокумента, ТаблицаПоКультурам, Отказ, Заголовок);
	
	ПроверкаЗаполненныхНомеровТТН();
	
	ТаблицаПоКультурамСвернутая = ТаблицаПоКультурам.Скопировать();
	Если СчетУчетаВТаблице Тогда
		ТаблицаПоКультурамСвернутая.Свернуть("СчетУчетаБУ, Забалансовый, СтавкаНДС, Услуга, Владелец, ДоговорКонтрагента, Склад, ВидХранения, Урожай, Номенклатура, Дата, Организация, Ссылка, ОтражатьВБухгалтерскомУчете, ПоставщикПолучатель, ВидДокумента, ЛабораторныйАнализ, Влажность, СорнаяПримесь, ЗерноваяПримесь, ВлажностьВходящая, ВлажностьТекущая, ЗерноваяПримесьВходящая, ЗерноваяПримесьТекущая, НомерАнализа, СорнаяПримесьВходящая, СорнаяПримесьТекущая", "Количество, ФизическийВес, Вес, ЗачетныйВес, ВесНаСушку, ВесНаОчистку, ФизическийВесТекущий");
	Иначе
		ТаблицаПоКультурамСвернутая.Свернуть("СтавкаНДС, Услуга, Владелец, ДоговорКонтрагента, Склад, ВидХранения, Урожай, Номенклатура, Дата, Организация, Ссылка, ОтражатьВБухгалтерскомУчете, ПоставщикПолучатель, ВидДокумента, ЛабораторныйАнализ, Влажность, СорнаяПримесь, ЗерноваяПримесь, ВлажностьВходящая, ВлажностьТекущая, ЗерноваяПримесьВходящая, ЗерноваяПримесьТекущая, НомерАнализа, СорнаяПримесьВходящая, СорнаяПримесьТекущая", "Количество, ФизическийВес, Вес, ЗачетныйВес, ВесНаСушку, ВесНаОчистку, ФизическийВесТекущий");
	КонецЕсли;	
	
	// Движения по документу		
	Если НЕ Отказ Тогда 		
		ПроводкиПоРегистрамЭлеватора(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоКультурам, ТаблицаПоКультурамСвернутая, Отказ, Заголовок);
	КонецЕсли; 	
	
	Движения.Хозрасчетный.ВыполнитьДействияПередЗаписьюДвижений();

	ПроведениеСервер.ПодготовитьНаборыЗаписейКЗаписиДвижений(ЭтотОбъект); 	

КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКОтменеПроведения(ЭтотОбъект);
	Движения.Записать();
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)

	Дата = НачалоДня(ОбщегоНазначения.ТекущаяДатаПользователя());
	Ответственный = Пользователи.ТекущийПользователь();	
	СкладскаяКвитанция = Неопределено;
	
КонецПроцедуры

#КонецОбласти

#Область Проведение

// Процедура формирует структуру шапки документа и дополнительных полей.
//
Процедура ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента) Экспорт

	// Дерево значений, содержащее имена необходимых полей в запросе по шапке.
	Перем ДеревоПолейЗапросаПоШапке;	
	
	СтруктураШапкиДокумента   = ОбщегоНазначенияРед12.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	
	// Заполним по шапке документа дерево параметров, нужных при проведении.
	ДеревоПолейЗапросаПоШапке = ОбщегоНазначенияРед12.СформироватьДеревоПолейЗапросаПоШапке(); 	
	ОбщегоНазначенияРед12.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "Организация", "ДоговорОрганизация");

	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа.
	СтруктураШапкиДокумента = УправлениеЗапасами.СформироватьЗапросПоДеревуПолей(ЭтотОбъект, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, ""); 
	
КонецПроцедуры

// Подготавличвает Таблица По Товарам для проведения документа
//Параметры
// СтруктураШапкиДокумента
// ТаблицаПоКультурам
// Отказ
// Заголовок.
// 
Процедура ПодготовитьТаблицуПоКультурам(СтруктураШапкиДокумента, ТаблицаПоКультурам, Отказ, Заголовок) Экспорт
	
	СтруктураПолей        = Новый Структура;
	СтруктураПростыхПолей = Новый Структура;
	СтруктураСложныхПолей = Новый Структура;	
		
	СтруктураПолей.Вставить("Ссылка",                      "Ссылка");
	СтруктураПолей.Вставить("Дата",                        "Ссылка.Дата");	       
	СтруктураПолей.Вставить("Организация",                 "Ссылка.Организация");
	СтруктураПолей.Вставить("ОтражатьВБухгалтерскомУчете", "Ссылка.ОтражатьВБухгалтерскомУчете");	        
	СтруктураПолей.Вставить("Владелец",                    "Ссылка.Владелец");
	СтруктураПолей.Вставить("ПоставщикПолучатель",         "Ссылка.Владелец");
	СтруктураПолей.Вставить("ДоговорКонтрагента",          "Ссылка.ДоговорКонтрагента");	
	СтруктураПолей.Вставить("Склад",                       "Ссылка.Склад");
	СтруктураПолей.Вставить("ВидХранения",                 "Ссылка.ВидХранения");
	Если ИНАГРО_Элеватор.ПолучитьДополнительныйРеквизитСклада(Склад, "ВестиУчетПоМестамХранения") Тогда
		СтруктураПолей.Вставить("МестоХранения", "Ссылка.МестоХранения");	
	КонецЕсли;
	СтруктураПолей.Вставить("Номенклатура",                "Номенклатура");
	СтруктураПолей.Вставить("СтавкаНДС",                   "Номенклатура.СтавкаНДС");
	СтруктураПолей.Вставить("Услуга",                      "Номенклатура.Услуга");
	СтруктураПолей.Вставить("Урожай",                      "Ссылка.Урожай");
	СтруктураПолей.Вставить("ЛабораторныйАнализ",          "ЛабораторныйАнализ");          	
	СтруктураПолей.Вставить("НомерАнализа",                "НомерАнализа"); 
	СтруктураПолей.Вставить("Влажность",                   "Влажность");          
	СтруктураПолей.Вставить("СорнаяПримесь",               "СорнаяПримесь");          
	СтруктураПолей.Вставить("ЗерноваяПримесь",             "ЗерноваяПримесь");  
	СтруктураПолей.Вставить("ФизическийВес",               "ФизическийВес");
	СтруктураПолей.Вставить("Вес",                         "ФизическийВес");
	СтруктураПолей.Вставить("Количество",                  "ФизическийВес");
	СтруктураПолей.Вставить("ЗачетныйВес",                 "ЗачетныйВес");          
	СтруктураПолей.Вставить("ВлажностьВходящая",           "Влажность");
	СтруктураПолей.Вставить("СорнаяПримесьВходящая",       "СорнаяПримесь");
	СтруктураПолей.Вставить("ЗерноваяПримесьВходящая",     "ЗерноваяПримесь");
	СтруктураПолей.Вставить("ВлажностьТекущая",            "Влажность");
	СтруктураПолей.Вставить("СорнаяПримесьТекущая",        "СорнаяПримесь");
	СтруктураПолей.Вставить("ЗерноваяПримесьТекущая",      "ЗерноваяПримесь");
	СтруктураПолей.Вставить("ВесНаСушку",                  "ФизическийВес");
	СтруктураПолей.Вставить("ВесНаОчистку",                "ФизическийВес");
	СтруктураПолей.Вставить("ФизическийВесТекущий",        "ФизическийВес"); 
	Если НЕ СобственноеПодразделение Тогда
		Если СчетУчетаВТаблице Тогда
			СтруктураПолей.Вставить("СчетУчетаБУ",  "СчетУчетаБУ");
			СтруктураПолей.Вставить("Забалансовый", "СчетУчетаБУ.Забалансовый");
		Иначе
			СтруктураПолей.Вставить("СчетУчетаБУ",  "Ссылка.СчетУчетаБУ");
			СтруктураПолей.Вставить("Забалансовый", "Ссылка.СчетУчетаБУ.Забалансовый");
		КонецЕсли;
	КонецЕсли;
	
	СтруктураПростыхПолей.Вставить("ВидФасовки",              Справочники.ИНАГРО_ВидыФасовки.ПустаяСсылка());	
	СтруктураПростыхПолей.Вставить("Поставщик",               Справочники.Контрагенты.ПустаяСсылка());
	СтруктураПростыхПолей.Вставить("ВидДокумента",            СтруктураШапкиДокумента.ВидДокумента);	
	СтруктураПростыхПолей.Вставить("Сумма",                   0);			
	СтруктураПростыхПолей.Вставить("Цена",                    0);
	СтруктураПростыхПолей.Вставить("СуммаНДС",                0);	
	СтруктураПростыхПолей.Вставить("СуммаБезНДСРегл",         0);
	СтруктураПростыхПолей.Вставить("СуммаНДСРегл",            0);
	СтруктураПростыхПолей.Вставить("СуммаСНДСРегл",           0);	
	СтруктураПростыхПолей.Вставить("СуммаБезНДСВал",          0);
	СтруктураПростыхПолей.Вставить("СуммаНДСВал",             0);
	СтруктураПростыхПолей.Вставить("СуммаСНДСВал",            0);	
	СтруктураПростыхПолей.Вставить("ПроводкиСуммаБезНДСРегл", 0);
	СтруктураПростыхПолей.Вставить("ПроводкиСуммаНДСРегл",    0);
	СтруктураПростыхПолей.Вставить("ПроводкиСуммаСНДСРегл",   0);	
	СтруктураПростыхПолей.Вставить("ПроводкиСуммаБезНДСВал",  0);
	СтруктураПростыхПолей.Вставить("ПроводкиСуммаНДСВал",     0);
	СтруктураПростыхПолей.Вставить("ПроводкиСуммаСНДСВал",    0);
	СтруктураПростыхПолей.Вставить("КоличествоМест",          0);
	
	Если СобственноеПодразделение Тогда		
		СтруктураПростыхПолей.Вставить("ВидОперацииВвозаВывозаСобственногоЗерна", Перечисления.ИНАГРО_ВидыОперацийВвозаВывозаСобственногоЗерна.ПоступлениеТоваров);		
	КонецЕсли;
	
	СтруктураСложныхПолей.Вставить("ДокументОприходования"  , " ЕСТЬNULL(Док.ТТН, Док.Ссылка)");

	РезультатЗапросаПоКультурам = ОбщегоНазначенияРед12.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "СписокТТН", СтруктураПолей, СтруктураПростыхПолей, СтруктураСложныхПолей);
	
	ТаблицаПоКультурам = РезультатЗапросаПоКультурам.Выгрузить();
	
КонецПроцедуры

Процедура ПроводкиПоРегистрамЭлеватора(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоКультурам, ТаблицаПоКультурамСвернутая, Отказ, Заголовок)
	
	ТаблицаПоКультурамКопия = ТаблицаПоКультурам.Скопировать();
	
	Для Каждого СтрокаТаблицы Из ТаблицаПоКультурамКопия Цикл
		
		СтрокаТаблицы.Количество = 0;
		
		ИНАГРО_Элеватор.ДвиженияПоРегиструОстаткиПриход(Движения, СтрокаТаблицы);
		ИНАГРО_Элеватор.ДвиженияПоРегиструОстаткиСводнаяПриход(Движения, СтрокаТаблицы);
		
		ПроводитьККУ = ИНАГРО_Элеватор.ПроверкаЗаполненияКачества(Дата, СтрокаТаблицы.ЛабораторныйАнализ, СтрокаТаблицы.Влажность, СтрокаТаблицы.Номенклатура);	
		
		СтруктураШапкиДокумента.Вставить("НомерАнализа", СтрокаТаблицы.НомерАнализа); 
		
		Если ПроводитьККУ Тогда		
			ИНАГРО_Элеватор.ДвиженияПоРегиструФорма36Приход(Движения, СтрокаТаблицы);
			ИНАГРО_Элеватор.ДвиженияПоРегиструФорма36СводнаяПриход(Движения, СтрокаТаблицы);
		Иначе
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Документ: %1 Не заполнены показатели качества, движения по форме 36 не выполнены!';uk='Документ: %1 Не заповнені показники якості, рухи за формою 36 не виконані!'"), Ссылка);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		
	КонецЦикла;	
	
	// Движения по регистру ИНАГРО_ЖурналЛабораторныхАнализов
	
	КолонкиГруппировокУПП = "";
	ТаблицаПоКультурамКопия = ТаблицаПоКультурамКопия.Скопировать();
	ТаблицаПоКультурамКопия.Свернуть(КолонкиГруппировокУПП + "Ссылка, Дата, ВидДокумента, Организация, Поставщик, Урожай, Склад, ВидХранения, Номенклатура, Владелец, ДоговорКонтрагента, ЛабораторныйАнализ, НомерАнализа, Влажность, ЗерноваяПримесь, СорнаяПримесь", "ФизическийВес, Количество, ЗачетныйВес");	
	
	Если ТаблицаПоКультурамКопия.Количество() <> 0 Тогда
		Для Каждого СтрокаТаблицы Из ТаблицаПоКультурамКопия Цикл
			Если ЗначениеЗаполнено(СтрокаТаблицы.ЛабораторныйАнализ) Тогда
				ИНАГРО_Элеватор.ДвиженияПоРегиструЖурналЛабораторныхАнализов(Движения, СтрокаТаблицы);					
				ИНАГРО_Элеватор.ДвиженияПоРегиструФорма49(Движения, СтрокаТаблицы);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// Движения по регистру ДанныеПоКачетсвуПартийЗерна
	
	Если ПараметрыУчетаЭлеватора <> Неопределено Тогда
		
		Если ПараметрыУчетаЭлеватора.ИспользоватьСистемуКонтроляКачестваПартийЗерна Тогда
			
			НаборДвижений           = Движения.ИНАГРО_ДанныеПоКачествуПартийЗерна;
			ТаблицаДвижений         = НаборДвижений.Выгрузить();
			ТаблицаПоКультурамКопия = ТаблицаПоКультурамСвернутая.Скопировать();
			ТаблицаПоКультурамКопия.Колонки["Владелец"].Имя = "Контрагент";
			ТаблицаПоКультурамКопия.Колонки["ЗачетныйВес"].Имя = "ФизическийВесИтоговый";
			ОбщегоНазначенияБПВызовСервера.ЗагрузитьВТаблицуЗначений(ТаблицаПоКультурамКопия, ТаблицаДвижений);
			ТаблицаДвижений.ЗаполнитьЗначения(Ссылка, "Регистратор");
			ТаблицаДвижений.ЗаполнитьЗначения(Ссылка, "ПартияЗерна");
			ТаблицаДвижений.ЗаполнитьЗначения(Истина, "Сушить");
			ТаблицаДвижений.ЗаполнитьЗначения(Истина, "Чистить");
			ТаблицаДвижений.ЗаполнитьЗначения(Истина, "ВыставленыУслугиСушки");
			ТаблицаДвижений.ЗаполнитьЗначения(Истина, "ВыставленыУслугиОчистки");
			
			// Заполним итоговые значения 
			Для Каждого СтрокаТаблицы Из ТаблицаДвижений Цикл
				ВидКультуры                           = ИНАГРО_Элеватор.ПолучитьДополнительныйРеквизитНоменклатуры(СтрокаТаблицы.Номенклатура,"ВидКультуры");
				ЗначенияБазисов                       = ИНАГРО_Элеватор.ПолучитьБазисныеЗначения(ВидКультуры, Ссылка.Дата, Организация, Владелец, ДоговорКонтрагента, Склад);
				СтрокаТаблицы.ВлажностьИтоговая       = ЗначенияБазисов.Влажность;
				СтрокаТаблицы.СорнаяПримесьИтоговая   = ЗначенияБазисов.СорнаяПримесь;
				СтрокаТаблицы.ЗерноваяПримесьИтоговая = ЗначенияБазисов.ЗерноваяПримесь;
			КонецЦикла;
			
			НаборДвижений.мПериод          = Дата;
			НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;
			Если НЕ Отказ Тогда
				Движения.ИНАГРО_ДанныеПоКачествуПартийЗерна.ВыполнитьДвижения();
			КонецЕсли;
			
			// для Акта Очистки Сушки
			НаборДвижений           = Движения.ИНАГРО_ДанныеПоКачествуЗерна;
			ТаблицаДвижений         = НаборДвижений.Выгрузить();
			ТаблицаПоКультурамКопия = ТаблицаПоКультурамСвернутая.Скопировать();
			ТаблицаПоКультурамКопия.Колонки["Владелец"].Имя = "Контрагент";
			ТаблицаПоКультурамКопия.Колонки["ЗачетныйВес"].Имя = "ФизическийВесИтоговый";
			ОбщегоНазначенияБПВызовСервера.ЗагрузитьВТаблицуЗначений(ТаблицаПоКультурамКопия, ТаблицаДвижений);
			ТаблицаДвижений.ЗаполнитьЗначения(Ссылка, "Регистратор");
			ТаблицаДвижений.ЗаполнитьЗначения(Ссылка, "ПартияЗерна");
			ТаблицаДвижений.ЗаполнитьЗначения(Истина, "Сушить");
			ТаблицаДвижений.ЗаполнитьЗначения(Истина, "Чистить");
			ТаблицаДвижений.ЗаполнитьЗначения(Истина, "ВыставленыУслугиСушки");
			ТаблицаДвижений.ЗаполнитьЗначения(Истина, "ВыставленыУслугиОчистки");
			
			// Заполним итоговые значения 
			Для Каждого СтрокаТаблицы Из ТаблицаДвижений Цикл
				ВидКультуры                           = ИНАГРО_Элеватор.ПолучитьДополнительныйРеквизитНоменклатуры(СтрокаТаблицы.Номенклатура,"ВидКультуры");
				ЗначенияБазисов                       = ИНАГРО_Элеватор.ПолучитьБазисныеЗначения(ВидКультуры, Ссылка.Дата, Организация, Владелец, ДоговорКонтрагента, Склад);
				СтрокаТаблицы.ВлажностьИтоговая       = ЗначенияБазисов.Влажность;
				СтрокаТаблицы.СорнаяПримесьИтоговая   = ЗначенияБазисов.СорнаяПримесь;
				СтрокаТаблицы.ЗерноваяПримесьИтоговая = ЗначенияБазисов.ЗерноваяПримесь;
			КонецЦикла;
			
			НаборДвижений.мПериод          = Дата;
			НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;
			Если Не Отказ Тогда
				Движения.ИНАГРО_ДанныеПоКачествуЗерна.ВыполнитьДвижения();
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ Отказ И ПараметрыУчетаЭлеватора.ОтражениеВвозаВывозаСобственногоЗернаВРегламентированномУчете Тогда
		ДвижениеПоРегиструКонтрольОтраженияВвозаВывозаСобственногоЗернаВРегламентированомУчете(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоКультурам, Отказ, Заголовок);
	КонецЕсли;
	
	Если НЕ Отказ Тогда
		ТаблицаУслуг = СформироватьТаблицуУслуг();
		Если ТаблицаУслуг.Количество() > 0 Тогда
			ИНАГРО_Элеватор.ДвиженияПоРегиструРасчетыПоУслугам(Движения, ТаблицаУслуг, "Приход");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ДвижениеПоРегиструКонтрольОтраженияВвозаВывозаСобственногоЗернаВРегламентированомУчете(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоКультурам, Отказ, Заголовок)
	
	ВыполнитьДвижения = Ложь;	
		
	Если СобственноеПодразделение Тогда		
		ВыполнитьДвижения = Истина		
	КонецЕсли;
	
	Для Каждого СтрокаТаблицы Из ТаблицаПоКультурам Цикл	
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ДокументОприходования) Тогда			
			СтрокаТаблицы.ДокументОприходования = Ссылка;
		КонецЕсли;
	КонецЦикла;
	
	Если ВыполнитьДвижения Тогда
		
		// Приход
		
		НаборДвижений = Движения.ИНАГРО_КонтрольОтраженияВвозаВывозаСобственногоЗернаВРегламентированномУчете;
		
		СтруктТаблицДокумента = Новый Структура;
		СтруктТаблицДокумента.Вставить("ТаблицаПоКультурам", ТаблицаПоКультурам);
		
		ТаблицыДанныхДокумента = ИНАГРО_Общий.ЗагрузитьТаблицыДокументаВСтруктуру(НаборДвижений, СтруктТаблицДокумента);
		
		ИНАГРО_Общий.ЗаписатьТаблицыДокументаВРегистр(НаборДвижений, ВидДвиженияНакопления.Приход, ТаблицыДанныхДокумента, Дата);		
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ОбновитьПараметрыУчетаЭлеватора()

	ПараметрыУчетаЭлеватора  = ИНАГРО_Элеватор.ПолучитьПараметрыУчетаЭлеватора(Дата);
	СобственноеПодразделение = ИНАГРО_Элеватор.ПолучитьДополнительныйРеквизитКонтрагента(Владелец, "СобственноеПодразделение");
		
КонецПроцедуры

Процедура ЗаполнитьУслуги() Экспорт
	 	
	Если НеПереформировыватьАвтоматически Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаУслуг = Новый ТаблицаЗначений;
	ТаблицаУслуг.Колонки.Добавить("Номенклатура");
	ТаблицаУслуг.Колонки.Добавить("Количество");
	ТаблицаУслуг.Колонки.Добавить("Сумма"); 
	
	Номенклатура_Приемка       = ИНАГРО_Элеватор.ПолучитьПредопределеннуюНоменклатуру("Приемка");
	Номенклатура_ПодачаВагона  = ИНАГРО_Элеватор.ПолучитьПредопределеннуюНоменклатуру("ПодачаВагона");
	Номенклатура_ВзвешиваниеЖД = ИНАГРО_Элеватор.ПолучитьПредопределеннуюНоменклатуру("ВзвешиваниеЖД");
	
	Для Каждого Строка Из СписокТТН Цикл
		
		ВидКультурыДляРасчетаСтоимостиУслуги = ИНАГРО_Элеватор.ПолучитьДополнительныйРеквизитНоменклатуры(Строка.Номенклатура, "ВидКультуры").ВидКультурыДляРасчетаСтоимостиУслуги;
		
		// приемка
		
		ТекущаяЦена = ИНАГРО_Элеватор.ПолучитьЦенуУслугиЭлеватора(Организация, Дата, Владелец, ДоговорКонтрагента, ВидКультурыДляРасчетаСтоимостиУслуги, Урожай, Номенклатура_Приемка);
		
		Если ЗначениеЗаполнено(Номенклатура_Приемка) Тогда     
			Если (ТекущаяЦена <> 0) и (Строка.ФизическийВес <> 0) Тогда 													 
				НоваяСтрока              = ТаблицаУслуг.Добавить();
				НоваяСтрока.Номенклатура = Номенклатура_Приемка;
				НоваяСтрока.Количество   = Строка.ФизическийВес/1000;
				НоваяСтрока.Сумма        = НоваяСтрока.Количество * ТекущаяЦена;
			Иначе
				ПараметрыОтбора = Новый Структура;
				ПараметрыОтбора.Вставить("Номенклатура", Номенклатура_Приемка);
				НайденныеСтроки = Услуги.НайтиСтроки(ПараметрыОтбора);
				Для Каждого Строк_Усл Из НайденныеСтроки Цикл
					Услуги.Удалить(Строк_Усл);
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		// подача Вагона
		
		ТекущаяЦена = ИНАГРО_Элеватор.ПолучитьЦенуУслугиЭлеватора(Организация, Дата, Владелец, ДоговорКонтрагента, ВидКультурыДляРасчетаСтоимостиУслуги, Урожай, Номенклатура_ПодачаВагона);
		
		Если ЗначениеЗаполнено(Номенклатура_ПодачаВагона) Тогда     
			Если ТекущаяЦена <> 0 Тогда 													 
				НоваяСтрока              = ТаблицаУслуг.Добавить();
				НоваяСтрока.Номенклатура = Номенклатура_ПодачаВагона;
				НоваяСтрока.Количество   = 1;
				НоваяСтрока.Сумма        = НоваяСтрока.Количество * ТекущаяЦена;
			Иначе
				ПараметрыОтбора = Новый Структура;
				ПараметрыОтбора.Вставить("Номенклатура", Номенклатура_ПодачаВагона);
				НайденныеСтроки = Услуги.НайтиСтроки(ПараметрыОтбора);
				Для каждого Строк_Усл из НайденныеСтроки Цикл
					Услуги.Удалить(Строк_Усл);
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		// ВзвешиваниеЖД
		
		ТекущаяЦена = ИНАГРО_Элеватор.ПолучитьЦенуУслугиЭлеватора(Организация,Дата,Владелец,ДоговорКонтрагента,	ВидКультурыДляРасчетаСтоимостиУслуги, Урожай, Номенклатура_ВзвешиваниеЖД);
		
		Если  ЗначениеЗаполнено(Номенклатура_ВзвешиваниеЖД) Тогда     
			Если ТекущаяЦена <> 0 И Строка.ФизическийВес <> 0 Тогда 													 
				НоваяСтрока              = ТаблицаУслуг.Добавить();
				НоваяСтрока.Номенклатура = Номенклатура_ВзвешиваниеЖД;
				НоваяСтрока.Количество   = Строка.ФизическийВес/1000;
				НоваяСтрока.Сумма        = НоваяСтрока.Количество * ТекущаяЦена;
			Иначе
				ПараметрыОтбора = Новый Структура;
				ПараметрыОтбора.Вставить("Номенклатура", Номенклатура_ВзвешиваниеЖД);
				НайденныеСтроки = Услуги.НайтиСтроки(ПараметрыОтбора);
				Для каждого Строк_Усл из НайденныеСтроки Цикл
					Услуги.Удалить(Строк_Усл);
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	ТаблицаУслуг.Свернуть("Номенклатура", "Количество, Сумма");
	
	Для Каждого Строка_Услуг Из ТаблицаУслуг Цикл
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("Номенклатура", Строка_Услуг.Номенклатура);
		НайденныеСтроки = Услуги.НайтиСтроки(ПараметрыОтбора);
		Если НайденныеСтроки.Количество() = 0 Тогда
			Если ЗначениеЗаполнено(Строка_Услуг.Номенклатура) Тогда
				НоваяСтрока              = Услуги.Добавить();
				НоваяСтрока.Номенклатура = Строка_Услуг.Номенклатура;
				НоваяСтрока.Количество   = Строка_Услуг.Количество;
				НоваяСтрока.Цена         = Строка_Услуг.Сумма/Строка_Услуг.Количество;
				НоваяСтрока.Сумма        = Строка_Услуг.Сумма;
			КонецЕсли;
		Иначе
			Для каждого Строк_Усл из НайденныеСтроки Цикл
				Строк_Усл.Количество = Строка_Услуг.Количество;
				Строк_Усл.Цена       = Строка_Услуг.Сумма/Строка_Услуг.Количество;
				Строк_Усл.Сумма      = Строка_Услуг.Сумма;
				Прервать;
			КонецЦикла;	
		КонецЕсли;	
	КонецЦикла;
	
КонецПроцедуры	

Функция СформироватьТаблицуУслуг()
	
	ТаблицаУслуг = Новый ТаблицаЗначений;
	ТаблицаУслуг.Колонки.Добавить("ДатаРасчета");
	ТаблицаУслуг.Колонки.Добавить("Ссылка"); 
	ТаблицаУслуг.Колонки.Добавить("Организация");
	ТаблицаУслуг.Колонки.Добавить("Контрагент");
	ТаблицаУслуг.Колонки.Добавить("ДоговорКонтрагента");
	ТаблицаУслуг.Колонки.Добавить("Номенклатура");
	ТаблицаУслуг.Колонки.Добавить("Культура");
	ТаблицаУслуг.Колонки.Добавить("Склад");
	ТаблицаУслуг.Колонки.Добавить("ВидХранения");
	ТаблицаУслуг.Колонки.Добавить("Урожай");
	ТаблицаУслуг.Колонки.Добавить("Количество");
	ТаблицаУслуг.Колонки.Добавить("Стоимость");  
	
	Для Каждого СтрокаТабУслуги Из Услуги Цикл
		
		НоваяСтрока                    = ТаблицаУслуг.Добавить();
		НоваяСтрока.ДатаРасчета        = Дата;
		НоваяСтрока.Ссылка             = Ссылка; 
		НоваяСтрока.Организация        = Организация;
		НоваяСтрока.Контрагент         = Владелец;
		НоваяСтрока.ДоговорКонтрагента = ДоговорКонтрагента;
		НоваяСтрока.Номенклатура       = СтрокаТабУслуги.Номенклатура;
		НоваяСтрока.Культура           = Номенклатура;
		НоваяСтрока.Склад              = Склад;
		НоваяСтрока.ВидХранения        = ВидХранения;
		НоваяСтрока.Урожай             = Урожай;
		НоваяСтрока.Количество         = СтрокаТабУслуги.Количество;
		НоваяСтрока.Стоимость          = СтрокаТабУслуги.Сумма;
		
	КонецЦикла;	
	
	Возврат ТаблицаУслуг; 
	
КонецФункции		 

Функция ПолучитьПараметрыДляРасчетаЗачетногоВеса()
	
	ПараметрыДляРасчетаЗачетногоВеса = Новый Структура(
		"Ссылка, Дата, Организация,
		|Владелец, ДоговорКонтрагента, Номенклатура,
		|Склад, Влажность, СорнаяПримесь,
		|ФизическийВес, ЗачетныйВес     
		|");
	ЗаполнитьЗначенияСвойств(ПараметрыДляРасчетаЗачетногоВеса, ЭтотОбъект);
	
	Возврат ПараметрыДляРасчетаЗачетногоВеса;
	
КонецФункции

Процедура ПроверкаЗаполненныхНомеровТТН()
	
	Для Каждого ТТН из СписокТТН Цикл
		Если НЕ ЗначениеЗаполнено(ТТН.НомерТТН) Тогда
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='В табличной части ""Список ТТН"" для строки %1 не заполнено значение реквизита ""Номер ТТН""!';uk='У табличній частині ""Список ТТН"" для рядка %1 не заповнено значення реквізиту ""Номер ТТН""!'"), ТТН.НомерСтроки);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли