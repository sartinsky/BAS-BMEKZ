#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды 
	
	Если Параметры.Ключ.Пустая() Тогда
		ПодготовитьФормуНаСервере();		
	КонецЕсли;
	
	// Уведомим о появлении функционала рабочей даты
	ЭтаФорма.НастройкиПредупреждений = ОбщегоНазначенияБП.НастройкиПредупрежденийОбИзменениях("РабочаяДатаИзДокумента");
	 
	// Показываем, если это новый документ и сама рабочая дата еще не установлена.
	ЭтаФорма.НастройкиПредупреждений.РабочаяДатаИзДокумента = ЭтаФорма.НастройкиПредупреждений.РабочаяДатаИзДокумента
	 	И ЭтаФорма.Параметры.Ключ.Пустая()
	  	И НЕ ЗначениеЗаполнено(БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("РабочаяДата"));
	  
	УстановитьПараметрыВыбораВидОперации();
	
	// Если форма вызвана в режиме смена вида операции - модифицируем сразу при открытии, 
	// чтобы можно было подтвердить или отказаться от изменения путем сохранения или 
	// отказа от сохранения документа.
	Если Параметры.Свойство("ИзменитьВидОперации")
		И Параметры.ИзменитьВидОперации Тогда
		
		// Не кэшируем переменную Объект, т.к. может вызываться Форма.ИзменитьРеквизиты(),
		// которая меняет Объект.
		Объект.ВидОперации = Параметры.ЗначенияЗаполнения.ВидОперации;
		
		УстановитьЗаголовокФормы();		
		УправлениеФормойНаСервере();
		
		Модифицированность = Истина;
		
	КонецЕсли;
	
	// Активизировать первую непустую табличную часть
	СписокТабличныхЧастей = Новый СписокЗначений;	
	СписокТабличныхЧастей.Добавить("СоставКорректировки", "СоставКорректировки");	
	СписокТабличныхЧастей.Добавить("ДанныеРаспределения", "ДанныеРаспределения");	
	
	АктивизироватьТабличнуюЧасть = ОбщегоНазначенияБПВызовСервера.ПолучитьПервуюНепустуюВидимуюТабличнуюЧасть(
		ЭтаФорма, СписокТабличныхЧастей);
		
	ОбщегоНазначенияБПВызовСервера.АктивизироватьЭлементФормы(ЭтаФорма, АктивизироватьТабличнуюЧасть);	

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	ОбщегоНазначенияБПКлиент.ОбработкаОповещенияФормыДокумента(ЭтаФорма, Объект.Ссылка, ИмяСобытия, Параметр, Источник);
			
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	ПодготовитьФормуНаСервере();

КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	УстановитьЗаголовокФормы();	
	
	ЗаполнитьДобавленныеКолонкиТаблиц();
	
	УстановитьСостояниеДокумента();
	
КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)

	Если НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДатаДокумента) Тогда
		// Изменение времени не влияет на поведение документа.
		ТекущаяДатаДокумента = Объект.Дата;
		Возврат;
	КонецЕсли;
	
	// Общие проверки условий по датам.
	ТребуетсяВызовСервера = ОбщегоНазначенияБПКлиент.ТребуетсяВызовСервераПриИзмененииДатыДокумента(Объект.Дата, 
		ТекущаяДатаДокумента);		
		
	// Запомним новую дату документа.
	ТекущаяДатаДокумента = Объект.Дата;

КонецПроцедуры 

&НаКлиенте
Процедура ВидОперацииПриИзменении(Элемент)
	
	ОчиститьТаблицыДокумента(); 
		
КонецПроцедуры

&НаКлиенте
Процедура ВидОперацииНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ВидОперацииПредыдущий = Объект.ВидОперации;

КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)

	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		ОрганизацияПриИзмененииНаСервере();
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()
	
	Объект.СоставКорректировки.Очистить();
	Объект.ДанныеРаспределения.Очистить();
	 
	Объект.ДокументОснование = Неопределено;		

КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.Контрагент) Тогда	
		КонтрагентПриИзмененииНаСервере();
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура КонтрагентПриИзмененииНаСервере()	
	
	Объект.ДокументОснование = Неопределено;

	БухгалтерскийУчетПереопределяемый.УстановитьДоговорКонтрагента(Объект.ДоговорКонтрагента, Объект.Контрагент, Объект.Организация);
		
	Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		ДоговорКонтрагентаПриИзмененииНаСервере();
	КонецЕсли;	
		
КонецПроцедуры

&НаКлиенте
Процедура ДоговорКонтрагентаПриИзменении(Элемент)

	Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		ДоговорКонтрагентаПриИзмененииНаСервере();
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ДоговорКонтрагентаПриИзмененииНаСервере()
	
	ВалютаДоИзменения 			= Объект.ВалютаДокумента;
	КурсДоИзменения   			= Объект.КурсВзаиморасчетов;
	КратностьДоИзменения 		= Объект.КратностьВзаиморасчетов;
	ТипЦенДоИзменения 			= Объект.ТипЦен;
	СуммаВключаетНДСДоИзменения = Объект.СуммаВключаетНДС;
	
	ДоговорУказан     = ЗначениеЗаполнено(Объект.ДоговорКонтрагента);
	РеквизитыДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.ДоговорКонтрагента,
																   "ВалютаВзаиморасчетов, Владелец, ТипЦен, ВидДоговора, ВедениеВзаиморасчетовНУ");
	
	Если ДоговорУказан Тогда
		ВалютаВзаиморасчетов = РеквизитыДоговора.ВалютаВзаиморасчетов;
		Объект.ВалютаДокумента     = ВалютаВзаиморасчетов;
		Если НЕ ЗначениеЗаполнено(Объект.Контрагент) Тогда
			Объект.Контрагент = РеквизитыДоговора.Владелец;
		КонецЕсли;
	Иначе
		Объект.ВалютаДокумента     = ВалютаРегламентированногоУчета;
	КонецЕсли;
	
	Если ВалютаДоИзменения <> Объект.ВалютаДокумента Тогда
		СтруктураКурсаДокумента        = РаботаСКурсамиВалют.ПолучитьКурсВалюты(Объект.ВалютаДокумента, Объект.Дата);
		Объект.КурсВзаиморасчетов      = СтруктураКурсаДокумента.Курс;
		Объект.КратностьВзаиморасчетов = СтруктураКурсаДокумента.Кратность;
	КонецЕсли;
	
	Если ДоговорУказан И ЗначениеЗаполнено(РеквизитыДоговора.ТипЦен) Тогда
		Объект.ТипЦен           = РеквизитыДоговора.ТипЦен;
		Объект.СуммаВключаетНДС = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(РеквизитыДоговора.ТипЦен, "ЦенаВключаетНДС");
	КонецЕсли; 
		
	// Очистим документ-основание при необходимости
	Если  Объект.ДокументОснование <> Неопределено
		И ОбщегоНазначенияБП.ЕстьРеквизитДокумента("ДоговорКонтрагента", Объект.ДокументОснование.Метаданные()) 
		И Объект.ДокументОснование.ДоговорКонтрагента <> Объект.ДоговорКонтрагента Тогда
		
		Объект.ДокументОснование = Неопределено;		
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументОснованиеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка) 	
		
	СтандартнаяОбработка = Ложь; 	
	
	ПараметрыОтбора	= Новый Структура;
	ПараметрыОтбора.Вставить("Организация",	Объект.Организация);	
	Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
		ПараметрыОтбора.Вставить("Контрагент",         Объект.Контрагент);
	КонецЕсли;	
	Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		ПараметрыОтбора.Вставить("ДоговорКонтрагента", Объект.ДоговорКонтрагента);
	КонецЕсли; 	
		
	ДанныеОбъекта = Новый Структура("ВидОперации, ДокументОснование");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
	СписокТипов = ПолучитьСписокТиповДляВыбораДокументаОснования(ДанныеОбъекта);
	
	ДополнительныеПараметры = Новый Структура("ПараметрыОтбора, Элемент", ПараметрыОтбора, Элемент);
	
	Оповещение = Новый ОписаниеОповещения("ДокументОснованиеНачалоВыбораЗавершение", ЭтотОбъект, ДополнительныеПараметры);

	ЭтаФорма.ПоказатьВыборИзСписка(Оповещение, СписокТипов, Элементы.ДокументОснование);
	 	
КонецПроцедуры

&НаКлиенте
Процедура ДокументОснованиеНачалоВыбораЗавершение(ВыбранныйЭлемент1, ДополнительныеПараметры) Экспорт
		
	ПараметрыОтбора = ДополнительныеПараметры.ПараметрыОтбора;
	Элемент         = ДополнительныеПараметры.Элемент;	
	
	ВыбранныйЭлемент = ВыбранныйЭлемент1;
	
	Если ВыбранныйЭлемент = Неопределено Тогда // Отказ от выбора
	    Возврат;
	КонецЕсли;
	
	ВыбранныйТип = ВыбранныйЭлемент.Значение;
	
	Если ТипЗнч(Объект.ДокументОснование) <> Тип("ДокументСсылка." + ВыбранныйТип) Тогда
	    Объект.ДокументОснование = ПредопределенноеЗначение("Документ." + ВыбранныйТип + ".ПустаяСсылка");
	КонецЕсли; 	
		
	ПараметрыФормы	= Новый Структура;
	ПараметрыФормы.Вставить("Отбор",              ПараметрыОтбора);
	ПараметрыФормы.Вставить("РежимВыбора",        Истина);
	ПараметрыФормы.Вставить("МножественныйВыбор", Ложь);	
	Если ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
	    ПараметрыФормы.Вставить("ТекущаяСтрока", Объект.ДокументОснование);
	КонецЕсли;
	
	ОткрытьФорму("Документ." + ВыбранныйТип + ".ФормаВыбора", ПараметрыФормы, Элемент, УникальныйИдентификатор, , , , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры  

&НаКлиенте
Процедура ПолучилПоДругомуДокументуПриИзменении(Элемент)
	
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ПолучилНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	УправлениеКонтактнойИнформациейБП.ПредставительКонтрагентаНачалоВыбора(Объект.Контрагент, ДанныеВыбора, СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(
		Элемент.ТекстРедактирования,
		ЭтотОбъект,
		"Объект.Комментарий");

КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиСобытийТаблицыФормыСоставКорректировки

&НаКлиенте
Процедура СоставКорректировкиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;

КонецПроцедуры

&НаКлиенте
Процедура СоставКорректировкиЦенаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.СоставКорректировки.ТекущиеДанные;
	
	Если СтрокаТабличнойЧасти.ПрименитьЦенуККоличествуГолов Тогда
		СтрокаТабличнойЧасти.Сумма = СтрокаТабличнойЧасти.Цена * СтрокаТабличнойЧасти.Голов;
	Иначе
		СтрокаТабличнойЧасти.Сумма = СтрокаТабличнойЧасти.Цена * СтрокаТабличнойЧасти.КоличествоТекущее;
	КонецЕсли;

	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ПолучитьЗначениеРеквизита(Объект.ДокументОснование, "СуммаВключаетНДС"));
	
	ПересчитатьРазницу(СтрокаТабличнойЧасти);

КонецПроцедуры

&НаКлиенте
Процедура СоставКорректировкиСуммаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.СоставКорректировки.ТекущиеДанные;
	
	Если СтрокаТабличнойЧасти.ПрименитьЦенуККоличествуГолов Тогда
		РасчетноеКоличество = ?(СтрокаТабличнойЧасти.Голов           = 0, 0, СтрокаТабличнойЧасти.Голов);  	
	Иначе
		РасчетноеКоличество = ?(СтрокаТабличнойЧасти.КоличествоТекущее = 0, 0, СтрокаТабличнойЧасти.КоличествоТекущее);
	КонецЕсли;
	
	Если РасчетноеКоличество = 0 Тогда
		СтрокаТабличнойЧасти.Цена = 0;
	Иначе
		СтрокаТабличнойЧасти.Цена = СтрокаТабличнойЧасти.Сумма / РасчетноеКоличество;
	КонецЕсли; 
	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ПолучитьЗначениеРеквизита(Объект.ДокументОснование, "СуммаВключаетНДС"));
	
	ПересчитатьРазницу(СтрокаТабличнойЧасти); 
	
КонецПроцедуры

&НаКлиенте
Процедура СоставКорректировкиСуммаРаспределенияПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.СоставКорректировки.ТекущиеДанные;
	
	СтрокаТабличнойЧасти.Сумма = СтрокаТабличнойЧасти.СуммаТекущая + СтрокаТабличнойЧасти.СуммаРаспределения; 	
	
	Если СтрокаТабличнойЧасти.ПрименитьЦенуККоличествуГолов Тогда   		
		Если СтрокаТабличнойЧасти.Голов = 0 Тогда
			СтрокаТабличнойЧасти.Цена = 0;
		Иначе
			СтрокаТабличнойЧасти.Цена = СтрокаТабличнойЧасти.Сумма / СтрокаТабличнойЧасти.Голов;
		КонецЕсли;   		
	Иначе 		
		ОбработкаТабличныхЧастейКлиентСервер.ПриИзмененииСуммыТабЧасти(СтрокаТабличнойЧасти);
	КонецЕсли;
	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ПолучитьЗначениеРеквизита(Объект.ДокументОснование, "СуммаВключаетНДС"));
	
	СтрокаТабличнойЧасти.СуммаНДСРаспределения = СтрокаТабличнойЧасти.СуммаНДС - СтрокаТабличнойЧасти.СуммаНДСТекущая;

КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьРазницу(СтрокаТабличнойЧасти)
	
	 СтрокаТабличнойЧасти.СуммаНДСРаспределения = СтрокаТабличнойЧасти.СуммаНДС - СтрокаТабличнойЧасти.СуммаНДСТекущая;
	 СтрокаТабличнойЧасти.СуммаРаспределения    = СтрокаТабличнойЧасти.Сумма - СтрокаТабличнойЧасти.СуммаТекущая;    	
	
КонецПроцедуры  

#КонецОбласти 

#Область ОбработчикиСобытийТаблицыФормыДанныеРаспределения

&НаКлиенте
Процедура ДанныеРаспределенияДокументНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗаполнитьСоставКорректировки(Команда)
	
	Если Объект.СоставКорректировки.Количество()> 0 Тогда
		ТекстВопроса = НСтр("ru='Табличная часть будет очищена. Продолжить?';uk='Таблична частина буде очищена. Продовжити?'");
		Оповещение = Новый ОписаниеОповещения("ЗаполнитьСоставКорректировкиЗавершение", ЭтотОбъект, Параметры);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);  
	Иначе
		ЗаполнитьСоставКорректировкиЗавершениеНаСервере(); 
	КонецЕсли; 	

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСоставКорректировкиЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
   	
    Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда 		
		Возврат;
	КонецЕсли;	
		
	Объект.СоставКорректировки.Очистить();  	
	
	ЗаполнитьСоставКорректировкиЗавершениеНаСервере();		
			
КонецПроцедуры  

&НаСервере
Процедура ЗаполнитьСоставКорректировкиЗавершениеНаСервере()
	
	Если НЕ ЗначениеЗаполнено(Объект.ДокументОснование) Тогда		
		ТекстСообщения = НСтр("ru='Не заполнен Документ основание!';uk='Не заповнений Документ підстава!'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Объект.ДокументОснование");		
		Возврат;
	КонецЕсли; 

	Документ = РеквизитФормыВЗначение("Объект", Тип("ДокументОбъект.ИНАГРО_РасчетКорректировкиЦены"));
	
	Документ.ЗаполнитьСоставКорректировки();
	
	ЗначениеВРеквизитФормы(Документ, "Объект");
			
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДанныеРаспределения(Команда)
	
	Если Объект.Проведен Тогда		
		ПоказатьПредупреждение(, НСтр("ru='Заполнение возможно только в непроведенном документе.';uk='Заповнення можливе тільки в непроведеному документі.'"));
		Возврат;  		
	КонецЕсли;
	
	Если Объект.ДанныеРаспределения.Количество()> 0 Тогда
		ТекстВопроса = НСтр("ru='Табличная часть будет очищена. Продолжить?';uk='Таблична частина буде очищена. Продовжити?'");
		Оповещение = Новый ОписаниеОповещения("ЗаполнитьДанныеРаспределенияЗавершение", ЭтотОбъект, Параметры);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);  
	Иначе
		ЗаполнитьДанныеРаспределенияЗавершениеНаСервере(); 
	КонецЕсли; 	

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДанныеРаспределенияЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
   	
    Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда 		
		Возврат;
	КонецЕсли;	
		
	Объект.ДанныеРаспределения.Очистить();  	
	
	ЗаполнитьДанныеРаспределенияЗавершениеНаСервере();		
			
КонецПроцедуры  

&НаСервере
Процедура ЗаполнитьДанныеРаспределенияЗавершениеНаСервере()
	
	Документ = РеквизитФормыВЗначение("Объект", Тип("ДокументОбъект.ИНАГРО_РасчетКорректировкиЦены"));
	
	Документ.ЗаполнитьДанныеРаспределения();
	
	ЗначениеВРеквизитФормы(Документ, "Объект");
	
	ЗаполнитьДобавленныеКолонкиТаблиц();
			
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ПодготовитьФормуНаСервере()
		
	ТекущаяДатаДокумента = Объект.Дата;
	
	ТипЦен = Константы.ТипЦенПлановойСебестоимостиНоменклатуры.Получить();
	
	ВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета(); 	
		
	УстановитьЗаголовокФормы();
	
	ЗаполнитьДобавленныеКолонкиТаблиц();	

	УправлениеФормой(ЭтаФорма);

	УстановитьСостояниеДокумента();
	
КонецПроцедуры 

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)

	Элементы = Форма.Элементы;
	Объект   = Форма.Объект;
	
	ИсходящиеДокументы = Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ИНАГРО_ВидыОперацийКорректировкиСтоимости.ИсходящиеДокументы");
	ВходящиеДокументы  = Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ИНАГРО_ВидыОперацийКорректировкиСтоимости.ВходящиеДокументы");
	
	Элементы.СоставКорректировкиРасхождениеКоличества.Видимость = ИсходящиеДокументы И ИНАГРО_ОбщийВызовСервераПовтИсп.ЕстьБСПУ();
	Элементы.СоставКорректировкиСхемаРеализации.Видимость       = ИсходящиеДокументы;

	Элементы.ГруппаДанныеРаспределения.Видимость                = ВходящиеДокументы;  	
	Элементы.ГруппаПечать.Видимость                             = ИсходящиеДокументы;
	
	Элементы.ГруппаРеквизитыДоверенностиЛевая.Видимость = НЕ Объект.ПолучилПоДругомуДокументу; 
	Элементы.ДокументПодтверждающийПолномочия.Видимость = Объект.ПолучилПоДругомуДокументу;
					
КонецПроцедуры

&НаСервере
Процедура УправлениеФормойНаСервере()
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры 

&НаСервере
Процедура УстановитьПараметрыВыбораВидОперации()
	
	МассивВидовОпераций = Документы.ИНАГРО_РасчетКорректировкиЦены.ПолучитьФиксированныйМассивВидовОпераций();
	
	ПараметрМассивВидовОпераций = Новый ПараметрВыбора("Отбор.Ссылка", МассивВидовОпераций);
	
	НовыйМассив = Новый Массив();
	НовыйМассив.Добавить(ПараметрМассивВидовОпераций);
	НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);
	
	Элементы.ВидОперации.ПараметрыВыбора = НовыеПараметры;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗаголовокФормы()
	
	ОбъектФормы = ЭтаФорма.Объект;

	ТекстЗаголовка = НСтр("ru='Расчет корректировки цены';uk='Розрахунок коригування ціни'");
	
	Если ЗначениеЗаполнено(ОбъектФормы.Ссылка) Тогда
		ТекстЗаголовка = ТекстЗаголовка + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru=' %1 от %2';uk=' %1 від %2'"), ОбъектФормы.Номер, ОбъектФормы.Дата);
	Иначе
		ТекстЗаголовка = ТекстЗаголовка + НСтр("ru=' (создание)';uk=' (створення)'");
	КонецЕсли;
	
	ЭтаФорма.Заголовок = ТекстЗаголовка + " (" + Строка(ОбъектФормы.ВидОперации) + ")";

КонецПроцедуры

&НаСервере
Процедура УстановитьСостояниеДокумента()
	
	СостояниеДокумента = ОбщегоНазначенияБП.СостояниеДокумента(Объект);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДобавленныеКолонкиТаблиц()
	
	Для Каждого СтрокаТабличнойЧасти Из Объект.ДанныеРаспределения Цикл
		УстановитьДоступностьСубконтоДт(СтрокаТабличнойЧасти);
		УстановитьДоступностьСубконтоКт(СтрокаТабличнойЧасти);
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УстановитьДоступностьСубконтоДт(СтрокаТабличнойЧасти)
	
	ПоляОбъекта	= Новый Структура("Субконто1, Субконто2, Субконто3", "СубконтоДт1", "СубконтоДт2", "СубконтоДт3");

	БухгалтерскийУчетКлиентСервер.УстановитьДоступностьСубконто(СтрокаТабличнойЧасти.СчетДт, СтрокаТабличнойЧасти, ПоляОбъекта);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УстановитьДоступностьСубконтоКт(СтрокаТабличнойЧасти)
	
	ПоляОбъекта	= Новый Структура("Субконто1, Субконто2, Субконто3", "СубконтоКт1", "СубконтоКт2", "СубконтоКт3");

	БухгалтерскийУчетКлиентСервер.УстановитьДоступностьСубконто(СтрокаТабличнойЧасти.СчетКт, СтрокаТабличнойЧасти, ПоляОбъекта);
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьТаблицыДокумента()
	
	Если Объект.СоставКорректировки.Количество() > 0 ИЛИ Объект.ДанныеРаспределения.Количество() > 0 Тогда
		ТекстВопроса = НСтр("ru='При смене вида операции табличная часть будет очищена. Продолжить?';uk='При зміні вида операції таблична частина буде очищена. Продовжити?'");
		Оповещение = Новый ОписаниеОповещения("ОчиститьТаблицыДокументаЗавершение", ЭтотОбъект, Параметры);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);				
	Иначе 		
		ВидОперацииОбработатьИзменение(); 		
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьТаблицыДокументаЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
   	
    Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Объект.ВидОперации = ВидОперацииПредыдущий;
		ВидОперацииОбработатьИзменение();
		Возврат;
	КонецЕсли;
	
    Объект.СоставКорректировки.Очистить();
	Объект.ДанныеРаспределения.Очистить();
	 
	Объект.ДокументОснование = Неопределено;
	
    ВидОперацииОбработатьИзменение();
	
КонецПроцедуры

&НаСервере
Процедура ВидОперацииОбработатьИзменение()
		
	УстановитьЗаголовокФормы();	
		
	УправлениеФормойНаСервере();
	
	ВидОперацииПредыдущий = Объект.ВидОперации;
	
	Модифицированность = Истина;

КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСписокТиповДляВыбораДокументаОснования(Объект)
	
	СписокТипов = Новый СписокЗначений;
	
	МассивТиповДокументаОснования = Метаданные.Документы.ИНАГРО_РасчетКорректировкиЦены.Реквизиты["ДокументОснование"].Тип.Типы();

	ОграничениеТипов = Новый Массив();
	
	Если Объект.ВидОперации = Перечисления.ИНАГРО_ВидыОперацийКорректировкиСтоимости.ВходящиеДокументы Тогда		
		Если ИНАГРО_ОбщийВызовСервераПовтИсп.ЕстьБСПУ() Тогда
			ОграничениеТипов.Добавить(Тип("ДокументСсылка.ПоступлениеТоваровУслуг")); 
			ОграничениеТипов.Добавить(Тип("ДокументСсылка.ИНАГРО_ПоступлениеБиологическихАктивов"));
		Иначе	
			ОграничениеТипов.Добавить(Тип("ДокументСсылка.ПоступлениеТоваровУслуг"));
		КонецЕсли; 
	Иначе	
		Если ИНАГРО_ОбщийВызовСервераПовтИсп.ЕстьБСПУ() Тогда
			ОграничениеТипов.Добавить(Тип("ДокументСсылка.РеализацияТоваровУслуг"));
			ОграничениеТипов.Добавить(Тип("ДокументСсылка.ИНАГРО_РеализацияБиологическихАктивов"));
		Иначе	
			ОграничениеТипов.Добавить(Тип("ДокументСсылка.РеализацияТоваровУслуг"));
		КонецЕсли; 
	КонецЕсли; 

	Для каждого ЭлементМассива Из МассивТиповДокументаОснования Цикл
			
		Если ОграничениеТипов.Найти(ЭлементМассива) = Неопределено Тогда
			 // Тип не вписывается в полученные ограничения
			Продолжить;
		КонецЕсли; 
		ПустоеЗначение = Новый(ЭлементМассива);
		ОбъектОписанияМетаданных = ПустоеЗначение.Метаданные();
		
		СписокТипов.Добавить(ОбъектОписанияМетаданных.Имя, ОбъектОписанияМетаданных.Представление());

	КонецЦикла; 

	СписокТипов.СортироватьПоПредставлению();
		
	Возврат СписокТипов;	

КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьЗначениеРеквизита(Ссылка, Реквизит)
	
	Возврат	ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, Реквизит);
	
КонецФункции

#КонецОбласти 

#Область СлужебныеПроцедурыИФункцииБСП

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти  
