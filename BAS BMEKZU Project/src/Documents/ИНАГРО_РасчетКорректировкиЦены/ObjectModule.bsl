#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
Перем мВалютаРегламентированногоУчета;
Перем мУчетнаяПолитика;
Перем ПартионныйУчетМПЗ;
Перем ПартионныйУчетБА;
Перем КурсЗачетаАвансаРегл; 

#Область ОбработчикиСобытий

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	ТипДанныхЗаполнения = ТипЗнч(ДанныеЗаполнения);
	Если ДанныеЗаполнения <> Неопределено И ТипДанныхЗаполнения <> Тип("Структура")
		И Метаданные().ВводитсяНаОсновании.Содержит(ДанныеЗаполнения.Метаданные()) Тогда
		Если    ДанныеЗаполнения.Метаданные().Имя = "ИНАГРО_ПоступлениеБиологическихАктивов"
			ИЛИ ТипДанныхЗаполнения = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
			ВидОперации = Перечисления.ИНАГРО_ВидыОперацийКорректировкиСтоимости.ВходящиеДокументы;
		Иначе
			ВидОперации = Перечисления.ИНАГРО_ВидыОперацийКорректировкиСтоимости.ИсходящиеДокументы;
		КонецЕсли;
		ЗаполнитьСоставКорректировки(ДанныеЗаполнения);		
	КонецЕсли;	
	ЗаполнениеДокументов.Заполнить(ЭтотОбъект, ДанныеЗаполнения);	
		
	Если  ТипДанныхЗаполнения = Тип("Структура")
		И ДанныеЗаполнения.Свойство("ВидОперации") Тогда
		ВидОперации = ДанныеЗаполнения.ВидОперации;
	КонецЕсли;

КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)

	Если ЗначениеЗаполнено(ДокументОснование) И (Дата < ДокументОснование.Дата) Тогда		
		ТекстСообщения = НСтр("ru='Дата документа не может быть меньше даты документа основания.';uk='Дата документу не може бути меньше дати документу підстави.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, , , Отказ);	
	    Возврат;
	КонецЕсли; 
	
	ОбновитьПараметрыУчетнойПолитики();
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	Перем Заголовок, СтруктураШапкиДокумента;
	Перем ТаблицаПоТоварам, ТаблицаПоДанныеРаспределения; 
		
	ПроведениеСервер.ПодготовитьНаборыЗаписейКПроведению(ЭтотОбъект);
	Если РучнаяКорректировка Тогда
		Возврат;
	КонецЕсли; 	
	
    мВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
		
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначенияБПВызовСервера.ПредставлениеДокументаПриПроведении(Ссылка);
	
	ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента);	
		
	ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоДанныеРаспределения, Отказ, Заголовок);
			
	// Движения по документу
	Если Не Отказ Тогда		
		ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоДанныеРаспределения, Отказ, Заголовок);		
	КонецЕсли; 
	
	Движения.Хозрасчетный.ВыполнитьДействияПередЗаписьюДвижений();
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКЗаписиДвижений(ЭтотОбъект);
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
		
	ПроведениеСервер.ПодготовитьНаборыЗаписейКОтменеПроведения(ЭтотОбъект);
	Движения.Записать();
	
КонецПроцедуры 

Процедура ПриКопировании(ОбъектКопирования)
	
	Дата = НачалоДня(ОбщегоНазначения.ТекущаяДатаПользователя());
	Ответственный = Пользователи.ТекущийПользователь();
	
	ДокументОснование = Неопределено;	
		
КонецПроцедуры

#КонецОбласти

#Область Проведение 

// Процедура формирует структуру шапки документа и дополнительных полей.
//
Процедура ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента) Экспорт
	
	// Дерево значений, содержащее имена необходимых полей в запросе по шапке.
	Перем ДеревоПолейЗапросаПоШапке;
	
	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента = ОбщегоНазначенияРед12.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	              	
	// Заполним по шапке документа дерево параметров, нужных при проведении.
	ДеревоПолейЗапросаПоШапке = ОбщегоНазначенияРед12.СформироватьДеревоПолейЗапросаПоШапке();
	ОбщегоНазначенияРед12.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "Организация",                    "ДоговорОрганизация");
	ОбщегоНазначенияРед12.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "ВидДоговора",                    "ВидДоговора");
	ОбщегоНазначенияРед12.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "СложныйНалоговыйУчет",           "СложныйНалоговыйУчет");
	ОбщегоНазначенияРед12.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "ВедениеВзаиморасчетовНУ",        "ВедениеВзаиморасчетовНУ");
   	ОбщегоНазначенияРед12.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "ВедениеВзаиморасчетов",          "ВедениеВзаиморасчетов");
	ОбщегоНазначенияРед12.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "СхемаНалоговогоУчета",           "СхемаНалоговогоУчета");
	
	ОбщегоНазначенияРед12.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "НеОтноситьНаЗатратыПоНУ",        "НеОтноситьНаЗатратыПоНУ");
	ОбщегоНазначенияРед12.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДокументОснование",    "СчетУчетаРасчетовСКонтрагентом", "СчетУчетаРасчетовСКонтрагентом");
	ОбщегоНазначенияРед12.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДокументОснование",    "СчетУчетаРасчетовПоАвансам",     "СчетУчетаРасчетовПоАвансам");
	
	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа.
	СтруктураШапкиДокумента = УправлениеЗапасами.СформироватьЗапросПоДеревуПолей(ЭтотОбъект, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, );
	
	СтруктураШапкиДокумента.Вставить("ЕстьНалогНаПрибыльДо2015", мУчетнаяПолитика.ЕстьНалогНаПрибыльДо2015);
	СтруктураШапкиДокумента.Вставить("ЕстьНДС",                  мУчетнаяПолитика.ЕстьНДС);
	
КонецПроцедуры // ПодготовитьСтруктуруШапкиДокумента()

// Процедура формирует таблицы документа.
//
Процедура ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоДанныеРаспределения, Отказ, Заголовок) Экспорт
	
	// Получим необходимые данные для проведения и проверки заполенения данные по табличной части "Товары".
	СтруктураПолей = Новый Структура;
	СтруктураСложныхПолей = Новый Структура;
	СтруктураПолей.Вставить("Номенклатура",                      "Номенклатура");
	СтруктураПолей.Вставить("Количество",                        "Количество");
	СтруктураПолей.Вставить("Голов",                             "ГоловТекущее"); 
	СтруктураПолей.Вставить("ГоловВозврат",                      "Голов - ГоловТекущее"); 
	СтруктураПолей.Вставить("Сумма",                             "СуммаРаспределения");
	СтруктураПолей.Вставить("СтавкаНДС",                         "СтавкаНДС");
	СтруктураПолей.Вставить("НДС",                               "СуммаНДСРаспределения");
	СтруктураПолей.Вставить("Услуга",                            "Номенклатура.Услуга");
	СтруктураПолей.Вставить("БланкСтрогогоУчета",                "Номенклатура.БланкСтрогогоУчета");
	СтруктураПолей.Вставить("КоличествоВозврат",                 "Количество - КоличествоТекущее");
	СтруктураПолей.Вставить("Цена",                              "ЦенаТекущая");
	СтруктураПолей.Вставить("РасхождениеКоличества",             "РасхождениеКоличества");
				                                                                 	
	СтруктураПолей.Вставить("СчетУчетаРасчетовПоАвансам",        "Ссылка.ДокументОснование.СчетУчетаРасчетовПоАвансам");  
	СтруктураПолей.Вставить("СчетУчетаРасчетовСКонтрагентом",    "Ссылка.ДокументОснование.СчетУчетаРасчетовСКонтрагентом");  
	СтруктураПолей.Вставить("СчетУчетаНДСПодтвержденный",        "Ссылка.ДокументОснование.СчетУчетаНДСПодтвержденный");  
	
	// Дополним полями, нужными для регл.
	СтруктураПолей.Вставить("СчетУчетаБУ", "СчетУчетаБУ");
	СтруктураПолей.Вставить("СчетУчетаБУЗабалансовый",           "СчетУчетаБУ.Забалансовый");
	СтруктураПолей.Вставить("НалоговоеНазначение",               "НалоговоеНазначение");
	СтруктураПолей.Вставить("ВидДеятельностиНДС",                "НалоговоеНазначение.ВидДеятельностиНДС");  	
	СтруктураПолей.Вставить("СчетУчетаНДС",                      "Ссылка.ДокументОснование.СчетУчетаНДС"); 
	//СтруктураПолей.Вставить("Склад",                             "Ссылка.ДокументОснование.Склад");   	
	СтруктураПолей.Вставить("Склад",                             "Склад");   	
	СтруктураПолей.Вставить("СхемаРеализации",                   "СхемаРеализации");
	СтруктураПолей.Вставить("СчетДоходовБУ",                     "СхемаРеализации.СчетДоходов");
	СтруктураПолей.Вставить("СубконтоДоходовБУ1",                "СхемаРеализации.СубконтоДоходов1");
	СтруктураПолей.Вставить("СубконтоДоходовБУ2",                "СхемаРеализации.СубконтоДоходов2");
	СтруктураПолей.Вставить("СубконтоДоходовБУ3",                "СхемаРеализации.СубконтоДоходов3");
	СтруктураПолей.Вставить("СчетРасходовБУ",                    "СхемаРеализации.СчетСебестоимости");
	СтруктураПолей.Вставить("СубконтоРасходовБУ1",               "СхемаРеализации.СубконтоСебестоимости1");
	СтруктураПолей.Вставить("СубконтоРасходовБУ2",               "СхемаРеализации.СубконтоСебестоимости2");
	СтруктураПолей.Вставить("СубконтоРасходовБУ3",               "СхемаРеализации.СубконтоСебестоимости3");
	СтруктураПолей.Вставить("НоменклатурнаяГруппа",              "Номенклатура.НоменклатурнаяГруппа");
	СтруктураПолей.Вставить("НалоговоеНазначениеДоходовИЗатрат", "НалоговоеНазначениеДоходовИЗатрат");   
	
	РезультатЗапросаПоТоварам = ОбщегоНазначенияРед12.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "СоставКорректировки", СтруктураПолей, , СтруктураСложныхПолей);
                       
	ТаблицаПоТоварам = РезультатЗапросаПоТоварам.Выгрузить();
	
	ПогрешностиОкругления     = Новый Соответствие;
	
	ДобавитьКолонкиТоваровРегл(ТаблицаПоТоварам, ПогрешностиОкругления);
	
	ТаблицаПоТоварам.Колонки.Добавить("Регистратор");
	ТаблицаПоТоварам.Колонки.Добавить("Организация");
	ТаблицаПоТоварам.Колонки.Добавить("ДоговорКонтрагента");

	ТаблицаПоТоварам.ЗаполнитьЗначения(ЭтотОбъект,                                 "Регистратор");
	ТаблицаПоТоварам.ЗаполнитьЗначения(СтруктураШапкиДокумента.Организация,        "Организация");
	ТаблицаПоТоварам.ЗаполнитьЗначения(СтруктураШапкиДокумента.ДоговорКонтрагента, "ДоговорКонтрагента");
	
	ТаблицаПоТоварам.Колонки.Добавить("ДляХозяйственнойДеятельности", Новый ОписаниеТипов("Булево"));
	ТаблицаПоТоварам.Колонки.Добавить("Амортизируется", Новый ОписаниеТипов("Булево"));  	
	ТаблицаПоТоварам.Колонки.Добавить("Сделка");  	
	
	Для каждого Строка Из ТаблицаПоТоварам Цикл
		Если Строка.НалоговоеНазначение = Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяНеХозДеятельность Тогда
			Строка.ДляХозяйственнойДеятельности = Ложь;
		Иначе
			Строка.ДляХозяйственнойДеятельности = Истина;
		КонецЕсли;
		
		// Отсеем те случаи, где Сделки не должно быть
		Строка.Сделка = НалоговыйУчет.ОпределитьСделкуНалоговыйУчет(СтруктураШапкиДокумента,
																			ДокументОснование, 
																			ДокументОснование.Сделка);		
	КонецЦикла;  	
	
	// Получим необходимые данные для проведения и проверки заполенения данные по табличной части "ДанныеРаспределения".
	СтруктураПолей = Новый Структура;
	СтруктураСложныхПолей = Новый Структура;
	СтруктураПолей.Вставить("Номенклатура",          "СубконтоКт1");
	СтруктураПолей.Вставить("Склад",                 "Ссылка.ДокументОснование.Склад");   
	СтруктураПолей.Вставить("СчетДт",                "СчетДт");
	СтруктураПолей.Вставить("СуммаРаспределения",    "СуммаРаспределения");  
	СтруктураПолей.Вставить("Количество",            "Количество");  	
	СтруктураПолей.Вставить("СубконтоДт1",           "СубконтоДт1");  
	СтруктураПолей.Вставить("СубконтоДт2",           "СубконтоДт2");  
	СтруктураПолей.Вставить("СубконтоДт3",           "СубконтоДт3");  
	СтруктураПолей.Вставить("СубконтоКт1",           "СубконтоКт1");  
	СтруктураПолей.Вставить("СубконтоКт2",           "СубконтоКт2");  
	СтруктураПолей.Вставить("СубконтоКт3",           "СубконтоКт3");  
	СтруктураПолей.Вставить("СчетКт",                "СчетКт");  
	СтруктураПолей.Вставить("НалоговоеНазначениеДт", "НалоговоеНазначениеДт");
	СтруктураПолей.Вставить("НалоговоеНазначениеКт", "НалоговоеНазначениеКт"); 
	СтруктураПолей.Вставить("СуммаВключаетНДС",      "Ссылка.ДокументОснование.СуммаВключаетНДС");
	СтруктураПолей.Вставить("Содержание",            "Содержание"); 
	СтруктураПолей.Вставить("ВидДеятельностиНДС",    "НалоговоеНазначениеДт.ВидДеятельностиНДС");  	
	СтруктураПолей.Вставить("ДокументРаспределения", "Документ"); 
	
	РезультатЗапросаРаспределения = ОбщегоНазначенияРед12.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "ДанныеРаспределения", СтруктураПолей, , СтруктураСложныхПолей);
	
	ТаблицаПоДанныеРаспределения = РезультатЗапросаРаспределения.Выгрузить();
	
КонецПроцедуры
           
Процедура ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоДанныеРаспределения, Отказ, Заголовок);
               			
	// Формирование проводок
	ДатаДока   = СтруктураШапкиДокумента.Дата;
	ПроводкиБУ = Движения.Хозрасчетный;
		                        	
	ТаблицаПоВторомуСобытиюНал = ДвиженияПоРегистрамНалоговогоУчета(СтруктураШапкиДокумента, ТаблицаПоТоварам, Отказ);
	
	// Зачет аванса
   	ТаблицыДокумента = Новый Структура();
   	ТаблицыДокумента.Вставить("ТаблицаПоТоварам",ТаблицаПоТоварам);
	ТаблицаАвансов = БухгалтерскийУчетРасчетовСКонтрагентами.ЗачетАванса(ЭтотОбъект, СтруктураШапкиДокумента , мВалютаРегламентированногоУчета, ТаблицыДокумента , Отказ, Заголовок, "АВ");
	
	КурсЗачетаАвансаРегл = ?(ТаблицаАвансов.Итог("СуммаВал") = 0, Неопределено, ТаблицаАвансов.Итог("Сумма") / ТаблицаАвансов.Итог("СуммаВал"));
	
	Если ВидОперации = Перечисления.ИНАГРО_ВидыОперацийКорректировкиСтоимости.ВходящиеДокументы Тогда 
		
		Если ИНАГРО_ОбщийВызовСервераПовтИсп.ЕстьБСПУ() И ДокументОснование.Метаданные().Имя ="ДокументСсылка.ИНАГРО_ПоступлениеБиологическихАктивов" Тогда
			ДвиженияПоЖивотным(СтруктураШапкиДокумента, ТаблицаПоТоварам, Отказ);
		КонецЕсли;
		
		// Проводки по товарам
		Для каждого СтрокаТаблицы Из ТаблицаПоТоварам Цикл
			
			Если СтрокаТаблицы.Сумма = 0 Тогда 
				Продолжить;
			КонецЕсли;
			
			Проводка = ПроводкиБУ.Добавить();
			
			Проводка.Период       = ДатаДока;
			Проводка.Организация  = СтруктураШапкиДокумента.Организация;
			Проводка.Содержание   = НСтр("ru='Оприходованы ТМЦ';uk='Оприбутковані ТМЦ'",Локализация.КодЯзыкаИнформационнойБазы());
			
			Проводка.НалоговоеНазначениеДт = СтрокаТаблицы.НалоговоеНазначение;
						
			ОценкаСтоимостиВНУ = 0;
			Если мУчетнаяПолитика.ЕстьНалогНаПрибыльДо2015
				И СтруктураШапкиДокумента.НеОтноситьНаЗатратыПоНУ = Ложь
				И СтрокаТаблицы.НалоговоеНазначение <> Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяНеХозДеятельность Тогда
				
				Проводка.СуммаНУДт = НалоговыйУчет.УчестьСуммуАвансаДо01042011(СтруктураШапкиДокумента, СтрокаТаблицы.ПроводкиСуммаБезНДСРегл);
				ОценкаСтоимостиВНУ = Проводка.СуммаНУДт;
				
			КонецЕсли;
			
			Проводка.СчетДт       = СтрокаТаблицы.СчетУчетаБУ;
			
			Если ТипЗнч(СтрокаТаблицы.Номенклатура) = Тип("СправочникСсылка.Номенклатура") Тогда 
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Номенклатура",                    СтрокаТаблицы.Номенклатура);
			Иначе 				
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "БиологическиеАктивы",             СтрокаТаблицы.Номенклатура);
			КонецЕсли; 		
			
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Склады",                          СтрокаТаблицы.Склад); 
			
			// Для товаров, принятых на комиссию партия прописывается всегда 
			Если (ПартионныйУчетМПЗ И ТипЗнч(СтрокаТаблицы.Номенклатура) = Тип("СправочникСсылка.Номенклатура")) 
				ИЛИ (ПартионныйУчетБА И ТипЗнч(СтрокаТаблицы.Номенклатура) = Тип("СправочникСсылка.БиологическиеАктивы")) 
				ИЛИ (БухгалтерскийУчетВызовСервераПовтИсп.КомиссионныйТовар(СтрокаТаблицы.СчетУчетаБУ)) Тогда 
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Партии",                          ДокументОснование);
			Иначе	
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ДокументыРасчетовСКонтрагентами", НалоговыйУчет.ОпределитьСделкуНалоговыйУчет(СтруктураШапкиДокумента, ДокументОснование.Сделка, ДокументОснование.Сделка));
			КонецЕсли;
			
			Проводка.Сумма = СтрокаТаблицы.ПроводкиСуммаБезНДСРегл;
			
			Проводка.СчетКт = СтрокаТаблицы.СчетУчетаРасчетовСКонтрагентом;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Контрагенты",                     СтруктураШапкиДокумента.Контрагент);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Договоры",                        СтруктураШапкиДокумента.ДоговорКонтрагента);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ДокументыРасчетовСКонтрагентами", УправлениеВзаиморасчетами.ОпределитьДокументРасчетовСКонтрагентом(ДокументОснование, ДокументОснование.Сделка));
			
			
			Если Проводка.СчетКт.Валютный Тогда
				Проводка.ВалютаКт        = СтруктураШапкиДокумента.ВалютаВзаиморасчетов;
				Проводка.ВалютнаяСуммаКт = СтрокаТаблицы.СуммаСНДСВал;
			КонецЕсли;
			
			// Движение по рег. ИНАГРО_ЗакупкиОрганизаций
			Движение = Движения.ИНАГРО_ЗакупкиОрганизаций.Добавить();
			Движение.Период                = СтруктураШапкиДокумента.Дата;
			Движение.Номенклатура          = СтрокаТаблицы.Номенклатура;
			Движение.Организация           = СтруктураШапкиДокумента.Организация;
			Движение.Склад                 = СтрокаТаблицы.Склад;
			Движение.СтавкаНДС             = СтрокаТаблицы.СтавкаНДС;
			Движение.Контрагент            = СтруктураШапкиДокумента.Контрагент;
			Движение.Количество            = 0;
			Движение.Стоимость             = СтрокаТаблицы.ПроводкиСуммаСНДСРегл;
			Движение.СуммаНДС              = СтрокаТаблицы.ПроводкиСуммаНДСРегл;
			Движение.ДокументОприходования = ДокументОснование;
			
			// Проводки по НДС
			Если СтрокаТаблицы.ПроводкиСуммаНДСРегл <> 0 Тогда
				
				Проводка = ПроводкиБУ.Добавить();
				
				Проводка.Период      = ДатаДока;				
				Проводка.Организация = СтруктураШапкиДокумента.Организация;
				Проводка.Содержание  = НСтр("ru='НДС - налоговый кредит (товары)';uk='ПДВ - податковий кредит (товари)'",Локализация.КодЯзыкаИнформационнойБазы());
				
				Проводка.СчетДт      = СтрокаТаблицы.СчетУчетаНДС;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты",                     СтруктураШапкиДокумента.Контрагент);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Договоры",                        СтруктураШапкиДокумента.ДоговорКонтрагента);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ДокументыРасчетовСКонтрагентами", НалоговыйУчет.ОпределитьСделкуНалоговыйУчет(СтруктураШапкиДокумента, ДокументОснование, ДокументОснование.Сделка));
							
				Проводка.СчетКт      = СтрокаТаблицы.СчетУчетаРасчетовСКонтрагентом;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Контрагенты",                      СтруктураШапкиДокумента.Контрагент);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Договоры",                         СтруктураШапкиДокумента.ДоговорКонтрагента);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ДокументыРасчетовСКонтрагентами",  УправлениеВзаиморасчетами.ОпределитьДокументРасчетовСКонтрагентом(ДокументОснование, ДокументОснование.Сделка));
						
				Если СтрокаТаблицы.СчетУчетаРасчетовСКонтрагентом.Валютный Тогда
					Проводка.ВалютаКт        = СтруктураШапкиДокумента.ВалютаВзаиморасчетов;
					Проводка.ВалютнаяСуммаКт = СтрокаТаблицы.ПроводкиСуммаНДСВал;
				КонецЕсли;
				
				Проводка.Сумма       = СтрокаТаблицы.ПроводкиСуммаНДСРегл;
								
	 			НалоговыйУчет.РазбитьПроводкуПоНДСНаПервоеВтороеСобытие(ТаблицаПоВторомуСобытиюНал, ПроводкиБУ, Проводка, 
												 	  "Дт", СтрокаТаблицы.СчетУчетаНДСПодтвержденный, 
													  СтруктураШапкиДокумента.ДоговорКонтрагента, 
													  НалоговыйУчет.ОпределитьСделкуНалоговыйУчет(СтруктураШапкиДокумента, ДокументОснование.Сделка, ДокументОснование.Сделка), ДокументОснование.Сделка,
													  Перечисления.СобытияОжидаемыйИПодтвержденныйНДСПриобретений.Поступление,
													  СтрокаТаблицы.СтавкаНДС, СтрокаТаблицы.ДляХозяйственнойДеятельности, СтрокаТаблицы.ВидДеятельностиНДС, ?(Дата < '20080101', Ложь, СтрокаТаблицы.Амортизируется),
													  СтрокаТаблицы.ПроводкиСуммаНДСВал);
													  
			КонецЕсли; // Проводки по НДС
			
		КонецЦикла;	
		
		// Проводки по ТЧ ДАННЫЕ РАСПРЕДЕЛЕНИЯ
		Для каждого СтрокаТаблицы Из ТаблицаПоДанныеРаспределения Цикл
			
			Если СтрокаТаблицы.СуммаРаспределения = 0 Тогда 
				Продолжить;
			КонецЕсли;
			
			Проводка = ПроводкиБУ.Добавить();
			
			Проводка.Период       = ДатаДока;
			Проводка.Организация  = СтруктураШапкиДокумента.Организация;
			Проводка.Содержание   = СтрокаТаблицы.Содержание;
			
			Проводка.НалоговоеНазначениеДт = СтрокаТаблицы.НалоговоеНазначениеДт;
			Проводка.НалоговоеНазначениеКт = СтрокаТаблицы.НалоговоеНазначениеКт;
			
			Проводка.СчетДт       = СтрокаТаблицы.СчетДт;   				
			Если ЗначениеЗаполнено(СтрокаТаблицы.СубконтоДт1) Тогда 
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтрокаТаблицы.СубконтоДт1);
			КонецЕсли;    				
			Если ЗначениеЗаполнено(СтрокаТаблицы.СубконтоДт2) Тогда 
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, СтрокаТаблицы.СубконтоДт2);
			КонецЕсли; 	
			Если ЗначениеЗаполнено(СтрокаТаблицы.СубконтоДт3) Тогда 
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, СтрокаТаблицы.СубконтоДт3);
			КонецЕсли; 					        				
			
			Проводка.Сумма = СтрокаТаблицы.СуммаРаспределения;
			
			Проводка.СчетКт = СтрокаТаблицы.СчетКт;
			Если ЗначениеЗаполнено(СтрокаТаблицы.СубконтоКт1) Тогда 
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, СтрокаТаблицы.СубконтоКт1);
			КонецЕсли;    				
			Если ЗначениеЗаполнено(СтрокаТаблицы.СубконтоКт2) Тогда 
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, СтрокаТаблицы.СубконтоКт2);
			КонецЕсли; 	                                              
			Если ЗначениеЗаполнено(СтрокаТаблицы.СубконтоКт3) Тогда 
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3, СтрокаТаблицы.СубконтоКт3);
			КонецЕсли; 				
			
		КонецЦикла;	
		
		ИНАГРО_Общий.ИНАГРО_ДвиженияЗатратыОрганизации_Приход(СтруктураШапкиДокумента, Движения);
		
		Счет90 = ПланыСчетов.Хозрасчетный.СебестоимостьРеализации;
		                       	
		Для Каждого СтрокаТаблицы Из ТаблицаПоДанныеРаспределения Цикл 
			
			Если СтрокаТаблицы.СуммаРаспределения = 0 Тогда 	
				Продолжить;
			КонецЕсли;
			
			// Движение по РН ИНАГРО_РеализацияОрганизаций
			Если СтрокаТаблицы.СчетДт.ПринадлежитЭлементу(Счет90) Тогда
				
				Движение = Движения.ИНАГРО_РеализацияОрганизаций.Добавить();
				Движение.Период             = СтруктураШапкиДокумента.Дата;
				Движение.Номенклатура       = СтрокаТаблицы.Номенклатура;
				Движение.Организация        = Организация;
				Движение.СтавкаНДС          = Перечисления.СтавкиНДС.НДС20;
				Если ОбщегоНазначенияБП.ЕстьРеквизитДокумента("Контрагент", СтрокаТаблицы.ДокументРаспределения.Метаданные()) Тогда
					Движение.Контрагент = СтрокаТаблицы.ДокументРаспределения.Контрагент;
				Иначе	
					Движение.Контрагент = Контрагент;
				КонецЕсли;
				Если ОбщегоНазначенияБП.ЕстьРеквизитДокумента("Склад", СтрокаТаблицы.ДокументРаспределения.Метаданные()) Тогда
					Движение.Склад      = СтрокаТаблицы.ДокументРаспределения.Склад;
				Иначе	
					Движение.Склад      = СтрокаТаблицы.Склад;
				КонецЕсли;
				Движение.Количество         = 0;
				Движение.Стоимость          = 0; // для Вход. не меняется цена продажи.
				Движение.СуммаНДС           = 0;
				Движение.СебестоимостьСумма = СтрокаТаблицы.СуммаРаспределения; // для Вход. меняется цена закупки. 
				
			КонецЕсли;
									 
			// Движение по РН ИНАГРО_ЖивотныеОрганизации и ИНАГРО_РастенияОрганизации по результатам распределения.
			Если ИНАГРО_ОбщийВызовСервераПовтИсп.ЕстьБСПУ() И ДокументОснование.Метаданные().Имя ="ДокументСсылка.ИНАГРО_ПоступлениеБиологическихАктивов"
				И НЕ СтрокаТаблицы.СчетКт.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.МатериальныеЗатраты) 
				И НЕ СтрокаТаблицы.СчетКт.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.ЗатратыНаОплатуТруда) 
				И НЕ СтрокаТаблицы.СчетКт.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.ОтчисленияНаСоциальныеМероприятия) 
				И НЕ СтрокаТаблицы.СчетКт.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.Амортизация) 
				И НЕ СтрокаТаблицы.СчетКт.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.ДругиеОперационныеЗатраты) 
				И НЕ СтрокаТаблицы.СчетКт.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.ДругиеЗатратыПоЭлементам) Тогда
				
				ДвиженияПоБА(СтруктураШапкиДокумента, СтрокаТаблицы, Отказ);
				
			КонецЕсли;
			
		КонецЦикла;	
		
	Иначе // ВидОперации = ИсходящиеДокументы
		
		Для каждого СтрокаТаблицы Из ТаблицаПоТоварам Цикл
			
			// Выручка
			Если СтрокаТаблицы.Сумма <> 0 Тогда
			
				Проводка = ПроводкиБУ.Добавить();
				
				Проводка.Период          = Дата;
				Проводка.Активность      = Истина;
				Проводка.Организация     = СтруктураШапкиДокумента.Организация;  
				Проводка.Сумма           = СтрокаТаблицы.ПроводкиСуммаСНДСРегл;
				Проводка.Содержание      = НСтр("ru='Реализация товаров';uk='Реалізація товарів'",Локализация.КодЯзыкаИнформационнойБазы());
				Проводка.НомерЖурнала    = "";
				
				Проводка.СчетДт          = СтрокаТаблицы.СчетУчетаРасчетовСКонтрагентом;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты",                     СтруктураШапкиДокумента.Контрагент);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Договоры",                        СтруктураШапкиДокумента.ДоговорКонтрагента);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ДокументыРасчетовСКонтрагентами", УправлениеВзаиморасчетами.ОпределитьДокументРасчетовСКонтрагентом(ДокументОснование, ДокументОснование.Сделка));
				
				Проводка.ВалютаДт        = СтруктураШапкиДокумента.ВалютаДокумента;
				Проводка.ВалютнаяСуммаДт = СтрокаТаблицы.ПроводкиСуммаСНДСВал;
				
				Проводка.СчетКт          = СтрокаТаблицы.СчетДоходовБУ;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1,                                 СтрокаТаблицы.СубконтоДоходовБУ1);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2,                                 СтрокаТаблицы.СубконтоДоходовБУ2);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3,                                 СтрокаТаблицы.СубконтоДоходовБУ3);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "НоменклатурныеГруппы",            СтрокаТаблицы.НоменклатурнаяГруппа);
							
				Если мУчетнаяПолитика.ЕстьНалогНаПрибыльДо2015 Тогда
					
					Проводка.НалоговоеНазначениеКт  = СтрокаТаблицы.НалоговоеНазначениеДоходовИЗатрат; 
					Проводка.СуммаНУКт 				= НалоговыйУчет.УчестьСуммуАвансаДо01042011(СтруктураШапкиДокумента, СтрокаТаблицы.ПроводкиСуммаБезНДСРегл) + СтрокаТаблицы.ПроводкиСуммаНДСРегл;
					
				КонецЕсли;
			
				Движение = Движения.ИНАГРО_РеализацияОрганизаций.Добавить(); 
				Движение.Период             = СтруктураШапкиДокумента.Дата;
				Движение.Организация        = СтруктураШапкиДокумента.Организация;
				Движение.Контрагент         = СтруктураШапкиДокумента.Контрагент;				
				Движение.Склад              = СтрокаТаблицы.Склад;
				Движение.Номенклатура       = СтрокаТаблицы.Номенклатура;				
				Движение.СтавкаНДС          = СтрокаТаблицы.СтавкаНДС; 								
				Движение.СуммаНДС           = СтрокаТаблицы.НДС;
				Движение.Стоимость          = Проводка.Сумма; // для Исход. меняется цена продажи
				Движение.СебестоимостьСумма = 0; // для Исход. не меняется цена закупки.
				
			КонецЕсли;
			
		КонецЦикла; 
		
		// НДС 
		ПроводкиПоНДС(ПроводкиБУ, СтруктураШапкиДокумента, ТаблицаПоТоварам,ТаблицаПоВторомуСобытиюНал, Отказ);
		
	КонецЕсли; 
	
КонецПроцедуры
           
Функция ДвиженияПоРегистрамНалоговогоУчета(СтруктураШапкиДокумента, ТаблицаПоТоварам, Отказ)
	
	ТаблицаПоВторомуСобытиюНал = НалоговыйУчет.СоздатьСтруктуруТаблицыНалоговыхСумм();
	
	Если Не СтруктураШапкиДокумента.ЕстьНДС Тогда
		// Если не нужно отражать в налоговом учете, тогда не отражаем и в подсистеме учета НДС.
		Возврат ТаблицаПоВторомуСобытиюНал;                    
	КонецЕсли;
	
	
	// ВходящиеДокументы		
	Если ВидОперации = Перечисления.ИНАГРО_ВидыОперацийКорректировкиСтоимости.ВходящиеДокументы Тогда 
		
		// Отразим Продажи в регистре ПродажиНалоговыйУчет
		НаборДвижений = Движения.ПриобретенияНалоговыйУчет;
		
		// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
		ТаблицаДвижений = НаборДвижений.ВыгрузитьКолонки();   		
		
		// ТОВАРЫ
		ТаблицаКопия = ТаблицаПоТоварам.Скопировать();
		ТаблицаКопия.Свернуть("СтавкаНДС, ДляХозяйственнойДеятельности, ВидДеятельностиНДС, Сделка", "СуммаСНДСВал, СуммаНДСВал"); 
		СуммаОбщ = Новый Массив;
		СуммаОбщ.Добавить(ЭтотОбъект.РасчетСуммыВсего());
		ТаблицаКопия.ЗагрузитьКолонку(СуммаОбщ, "СуммаСНДСВал");
		ТаблицаПриобретений = ТаблицаКопия.Скопировать();
		
		ТаблицаПриобретений.Колонки.Добавить("СуммаНДСПропорционально");
		ТаблицаПриобретений.Колонки.СуммаСНДСВал.Имя = "СуммаВзаиморасчетов";
		ТаблицаПриобретений.Колонки.СуммаНДСВал.Имя  = "СуммаНДС";
		ОбщегоНазначенияБПВызовСервера.ЗагрузитьВТаблицуЗначений(ТаблицаПриобретений, ТаблицаДвижений);
		
		ТаблицаДвижений.ЗаполнитьЗначения(Организация,                                                           "Организация");
		ТаблицаДвижений.ЗаполнитьЗначения(ДоговорКонтрагента,                                                    "ДоговорКонтрагента");
		ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СобытияПриобретенияНалоговыйУчет.ПоступлениеОтПоставщика, "Событие");
		ТаблицаДвижений.ЗаполнитьЗначения(ЭтотОбъект.Ссылка,                                                     "РасчетныйДокумент");
		
		Если СтруктураШапкиДокумента.СложныйНалоговыйУчет Тогда    		
			// очистим налоговые реквизиты
			ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтавкиНДС.ПустаяСсылка(), 			"СтавкаНДС");
			ТаблицаДвижений.ЗаполнитьЗначения(Ложь, 										   	"ДляХозяйственнойДеятельности");
			ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.ВидыДеятельностиНДС.ПустаяСсылка(), 	"ВидДеятельностиНДС");
			ТаблицаДвижений.ЗаполнитьЗначения(Ложь,												"Амортизируется");
			ТаблицаДвижений.ЗаполнитьЗначения(0, 												"СуммаНДС");
			ТаблицаДвижений.ЗаполнитьЗначения(0, 												"СуммаНДСПропорционально");  		
		КонецЕсли;
		
		Если НЕ Отказ И ТаблицаДвижений.Количество() > 0 Тогда
			
			НаборДвижений.мПериод          = Дата;
			НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;
			
			Движения.ПриобретенияНалоговыйУчет.ВыполнитьПриход();
			Движения.ПриобретенияНалоговыйУчет.Записать();
			
		КонецЕсли;		
		
		// Движения по регистру Ожидаемый и подтвержденный НДС приобретений
		
		//Если НЕ СтруктураШапкиДокумента.СложныйНалоговыйУчет Тогда
		//	// Движения формируются по данным рассчета "первого события" 
		//	НалоговыйУчет.ДвиженияПоРегистрамНалоговогоУчетаУпрощенныйНалоговыйУчет(ЭтотОбъект, ТаблицаПоВторомуСобытиюНал);
		//	
		//ИначеЕсли СтруктураШапкиДокумента.ВалютаВзаиморасчетов = мВалютаРегламентированногоУчета Тогда
		Если СтруктураШапкиДокумента.ВалютаВзаиморасчетов = мВалютаРегламентированногоУчета Тогда
			
			НаборДвижений = Движения.ОжидаемыйИПодтвержденныйНДСПриобретений;
			
			// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
			ТаблицаДвижений = НаборДвижений.ВыгрузитьКолонки();
			
			// ТОВАРЫ
			ТаблицаКопия = ТаблицаПоТоварам.Скопировать();
			ТаблицаКопия.Свернуть("СтавкаНДС, ДляХозяйственнойДеятельности, ВидДеятельностиНДС", "СуммаБезНДСВал, СуммаНДСВал");
			ТаблицаПриобретений = ТаблицаКопия.Скопировать();
			
			ТаблицаПриобретений.Колонки.СуммаБезНДСВал.Имя = "БазаНДС";
			ТаблицаПриобретений.Колонки.СуммаНДСВал.Имя    = "СуммаНДС";
			ОбщегоНазначенияБПВызовСервера.ЗагрузитьВТаблицуЗначений(ТаблицаПриобретений, ТаблицаДвижений);
			ТаблицаДвижений.ЗаполнитьЗначения(Организация,                                                                   "Организация");
			ТаблицаДвижений.ЗаполнитьЗначения(ДоговорКонтрагента,                                                            "ДоговорКонтрагента");
			ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СобытияОжидаемыйИПодтвержденныйНДСПриобретений.Поступление, 	     "СобытиеНДС");
			ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.КодыОперацийОжидаемыйИПодтвержденныйНДСПриобретений.ОжидаемыйНДС, "КодОперации");
			
			Если НЕ Отказ И ТаблицаДвижений.Количество() > 0 Тогда
				
				НаборДвижений.мПериод          = Дата;
				НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;
				
				Движения.ОжидаемыйИПодтвержденныйНДСПриобретений.ВыполнитьПриход();
				Движения.ОжидаемыйИПодтвержденныйНДСПриобретений.Записать();
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// ИсходящиеДокументы    	
	Если ВидОперации = Перечисления.ИНАГРО_ВидыОперацийКорректировкиСтоимости.ИсходящиеДокументы Тогда       		
		
		// Отразим Продажи в регистре ПродажиНалоговыйУчет
		НаборДвижений = Движения.ПродажиНалоговыйУчет;
		
		// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
		ТаблицаДвижений = НаборДвижений.ВыгрузитьКолонки();
		
		ТаблицаКопия = ТаблицаПоТоварам.Скопировать();
		ТаблицаКопия.Свернуть("СтавкаНДС, Сделка", "СуммаСНДСВал, СуммаНДСВал");   
		ТаблицаПродаж = ТаблицаКопия.Скопировать();  
		
		ТаблицаПродаж.Колонки.СуммаСНДСВал.Имя = "СуммаВзаиморасчетов";
		ТаблицаПродаж.Колонки.СуммаНДСВал.Имя  = "СуммаНДС";
		
		ОбщегоНазначенияБПВызовСервера.ЗагрузитьВТаблицуЗначений(ТаблицаПродаж, ТаблицаДвижений);
		
		ТаблицаДвижений.ЗаполнитьЗначения(Организация,                                                   "Организация");
		ТаблицаДвижений.ЗаполнитьЗначения(ДоговорКонтрагента,                                            "ДоговорКонтрагента");
		ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СобытияПродажиНалоговыйУчет.РеализацияПокупателю, "Событие");
		ТаблицаДвижений.ЗаполнитьЗначения(ЭтотОбъект.Ссылка,                                             "РасчетныйДокумент");
		
		Если СтруктураШапкиДокумента.СложныйНалоговыйУчет Тогда
			
			// очистим налоговые реквизиты
			ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтавкиНДС.ПустаяСсылка(), "СтавкаНДС");
			ТаблицаДвижений.ЗаполнитьЗначения(0, 									 "СуммаНДС");
			
		Иначе		
			// упрощенный налоговый учет
			Если НЕ СтруктураШапкиДокумента.ЕстьНДС Тогда
				ТаблицаДвижений.ЗаполнитьЗначения(0, 									 "СуммаНДС");	
				ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтавкиНДС.ПустаяСсылка(), "СтавкаНДС");
			КонецЕсли;  		
			
		КонецЕсли;	
		
		Если НЕ Отказ И ТаблицаДвижений.Количество() > 0 Тогда
			
			НаборДвижений.мПериод          = Дата;
			НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;
			
			Движения.ПродажиНалоговыйУчет.ВыполнитьПриход();
			Движения.ПродажиНалоговыйУчет.Записать();
			
		КонецЕсли;
		
		// ОжидаемыйИПодтвержденныйНДСПродаж
		
		//Если НЕ СтруктураШапкиДокумента.СложныйНалоговыйУчет Тогда
		//	
		//	// Движения формируются по данным рассчета "первого события" 
		//   НалоговыйУчет.ДвиженияПоРегистрамНалоговогоУчетаУпрощенныйНалоговыйУчет(ЭтотОбъект, ТаблицаПоВторомуСобытиюНал);
		//
		//Иначе

			НаборДвижений = Движения.ОжидаемыйИПодтвержденныйНДСПродаж;
			
			// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
			ТаблицаДвижений = НаборДвижений.ВыгрузитьКолонки();
			
			ТаблицаДвиженийТара = ТаблицаДвижений.Скопировать();
			
			// ТОВАРЫ
			ТаблицаКопия = ТаблицаПоТоварам.Скопировать();
			ТаблицаКопия.Свернуть("СтавкаНДС, Сделка", "СуммаБезНДСВал, СуммаНДСВал");  
			
			ТаблицаПродаж = ТаблицаКопия.Скопировать();
			ТаблицаПродаж.Колонки.СуммаБезНДСВал.Имя = "БазаНДС";
			ТаблицаПродаж.Колонки.СуммаНДСВал.Имя    = "СуммаНДС";
			ОбщегоНазначенияБПВызовСервера.ЗагрузитьВТаблицуЗначений(ТаблицаПродаж, ТаблицаДвижений);
			
			ТаблицаДвижений.ЗаполнитьЗначения(Организация,                                                             "Организация");
			ТаблицаДвижений.ЗаполнитьЗначения(ДоговорКонтрагента,                                                      "ДоговорКонтрагента");
			ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СобытияОжидаемыйИПодтвержденныйНДСПродаж.Реализация,        "СобытиеНДС");
			ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.КодыОперацийОжидаемыйИПодтвержденныйНДСПродаж.ОжидаемыйНДС, "КодОперации");
			
			Если НЕ Отказ И ТаблицаДвижений.Количество() > 0 Тогда
				
				НаборДвижений.мПериод          = Дата;
				НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;
				
				Движения.ОжидаемыйИПодтвержденныйНДСПродаж.ВыполнитьПриход();
				Движения.ОжидаемыйИПодтвержденныйНДСПродаж.Записать();
				
			КонецЕсли;
		//КонецЕсли; 	            	 	
			
	КонецЕсли; 	            	 	
	
	Возврат ТаблицаПоВторомуСобытиюНал;                    
	
КонецФункции

Процедура ДвиженияПоБА(СтруктураШапкиДокумента, СтрокаТЧ, Отказ)
	
		ЭтоЖивотное = Ложь;
		Если ДокументОснование.ВидОперации = Перечисления.ИНАГРО_ВидыОперацийПоступленияБА.ПокупкаКомиссияЖивотных Тогда 				
			ЭтоЖивотное = Истина;
		КонецЕсли;
		
		Если СтрокаТЧ.ДокументРаспределения.Метаданные().Имя = "ИНАГРО_Забой" Тогда
			
			Для каждого Стр Из СтрокаТЧ.ДокументРаспределения.Животные Цикл
				
				Если Стр.Номенклатура = СтрокаТЧ.Номенклатура Тогда
					
					Движение = Движения.ИНАГРО_ЖивотныеОрганизации.Добавить();
					Движение.Период                = СтруктураШапкиДокумента.Дата;
					Движение.Организация           = СтруктураШапкиДокумента.Организация;
					Движение.ВидДвижения           = ВидДвиженияНакопления.Расход;
					Движение.КодОперации           = Перечисления.ИНАГРО_КодыОперацийУчетЖивотных.Забой;   				
					Движение.Склад 		           = Стр.Склад;
					Движение.Номенклатура          = Стр.Номенклатура;
					Движение.Сумма                 = СтрокаТЧ.СуммаРаспределения/СтрокаТЧ.Количество*Стр.Количество;
					Движение.ДокументОприходования = ДокументОснование;
					
				КонецЕсли; 
				
			КонецЦикла;
			
		ИначеЕсли СтрокаТЧ.ДокументРаспределения.Метаданные().Имя = "ИНАГРО_ПеремещениеБиологическихАктивов" Тогда
				 
				КодОперации = Неопределено;
				КодОперацииНовый = Неопределено;
				ПолучитьКодОперацииПеремещения(СтрокаТЧ.ДокументРаспределения.ВидОперации,КодОперации,КодОперацииНовый);
				
				Для каждого Стр Из СтрокаТЧ.ДокументРаспределения.Животные Цикл
					
					Если ЗначениеЗаполнено(Стр.Номенклатура) И Стр.Номенклатура = СтрокаТЧ.Номенклатура Тогда
						
						Если ЭтоЖивотное Тогда 				
							Движение = Движения.ИНАГРО_ЖивотныеОрганизации.Добавить();
						Иначе	
							Движение = Движения.ИНАГРО_РастенияОрганизации.Добавить();
						КонецЕсли;
						Движение.Период                = СтруктураШапкиДокумента.Дата;
						Движение.Организация           = СтруктураШапкиДокумента.Организация;
						Движение.ВидДвижения           = ВидДвиженияНакопления.Расход;
						Движение.КодОперации           = КодОперации;   				
						Движение.Склад 		           = Стр.Склад;
						Движение.Номенклатура          = Стр.Номенклатура;
						Движение.Сумма                 = СтрокаТЧ.СуммаРаспределения / СтрокаТЧ.Количество * Стр.Количество;
						Движение.ДокументОприходования = ДокументОснование;
						
						Если ЗначениеЗаполнено(Стр.НоменклатураНовая)  Тогда
							
							Если ЭтоЖивотное Тогда 				
								Движение = Движения.ИНАГРО_ЖивотныеОрганизации.Добавить();
							Иначе	
								Движение = Движения.ИНАГРО_РастенияОрганизации.Добавить();
							КонецЕсли;
							Движение.Период                = СтруктураШапкиДокумента.Дата;
							Движение.Организация           = СтруктураШапкиДокумента.Организация;
							Движение.ВидДвижения           = ВидДвиженияНакопления.Приход;
							Движение.КодОперации           = КодОперацииНовый;   				
							Движение.Склад 		           = Стр.СкладНовый;
							Движение.Номенклатура          = Стр.НоменклатураНовая;
							Движение.Сумма                 = СтрокаТЧ.СуммаРаспределения / СтрокаТЧ.Количество * Стр.Количество;	
							Движение.ДокументОприходования = ДокументОснование;

						КонецЕсли; 
						
					КонецЕсли;
					
				КонецЦикла;
			
		Иначе
				
			Если ЭтоЖивотное Тогда 				
				Движение = Движения.ИНАГРО_ЖивотныеОрганизации.Добавить();
			Иначе	
				Движение = Движения.ИНАГРО_РастенияОрганизации.Добавить();
			КонецЕсли;
			Движение.Период                = СтруктураШапкиДокумента.Дата;
			Движение.ВидДвижения           = ВидДвиженияНакопления.Расход;
			Движение.Организация           = СтруктураШапкиДокумента.Организация;
			Движение.Номенклатура          = СтрокаТЧ.Номенклатура;
			Движение.Сумма                 = СтрокаТЧ.СуммаРаспределения; 
			Движение.ДокументОприходования = ДокументОснование;
			
			Если СтрокаТЧ.ДокументРаспределения.Метаданные().Имя = "ИНАГРО_ВозвратБиологическихАктивовПоставщику" Тогда 
				Движение.КодОперации  = ?(ЭтоЖивотное,Перечисления.ИНАГРО_КодыОперацийУчетЖивотных.Прочие,Перечисления.ИНАГРО_КодыОперацийУчетРастений.Прочие);   				
				Движение.Склад 		  = СтрокаТЧ.ДокументРаспределения.Склад;
			КонецЕсли;
			
			Если СтрокаТЧ.ДокументРаспределения.Метаданные().Имя = "ИНАГРО_ВозвратБиологическихАктивовОтПокупателя" Тогда 
				Движение.КодОперации  = ?(ЭтоЖивотное,Перечисления.ИНАГРО_КодыОперацийУчетЖивотных.Прочие,Перечисления.ИНАГРО_КодыОперацийУчетРастений.Прочие);   				
				Движение.Склад 		  = СтрокаТЧ.ДокументРаспределения.Склад;
				Движение.Сумма        = СтрокаТЧ.СуммаРаспределения;
			КонецЕсли;
			
			Если СтрокаТЧ.ДокументРаспределения.Метаданные().Имя = "ИНАГРО_СписаниеБиологическихАктивов" Тогда 
				Движение.КодОперации  = ?(ЭтоЖивотное,Перечисления.ИНАГРО_КодыОперацийУчетЖивотных.Падеж,Перечисления.ИНАГРО_КодыОперацийУчетРастений.Списание);   				
				Движение.Склад 		  = СтрокаТЧ.Склад;
			КонецЕсли;
			
			Если СтрокаТЧ.ДокументРаспределения.Метаданные().Имя = "ИНАГРО_РеализацияБиологическихАктивов" Тогда 
				Движение.КодОперации  = ?(ЭтоЖивотное,Перечисления.ИНАГРО_КодыОперацийУчетЖивотных.Продажа,Перечисления.ИНАГРО_КодыОперацийУчетРастений.Продажа);   				
				Движение.Склад 		  = СтрокаТЧ.ДокументРаспределения.Склад;
			КонецЕсли;
		
			Если СтрокаТЧ.ДокументРаспределения.Метаданные().Имя = "ИНАГРО_ВедомостьРеализацияЖивотные" Тогда 
				Движение.КодОперации  = Перечисления.ИНАГРО_КодыОперацийУчетЖивотных.Продажа;   				
				Движение.Склад 		  = СтрокаТЧ.ДокументРаспределения.Склад;
			КонецЕсли;
			
		КонецЕсли; 		
				
КонецПроцедуры
           
Процедура ДвиженияПоЖивотным(СтруктураШапкиДокумента, ТаблицаПоТоварам, Отказ)
	
	Для Каждого СтрокаТЧ Из ТаблицаПоТоварам Цикл 
		
		Если СтрокаТЧ.СуммаБезНДСРегл = 0 Тогда 
			Продолжить;
		КонецЕсли;
		
		Если ДокументОснование.ВидОперации = Перечисления.ИНАГРО_ВидыОперацийПоступленияБА.ПокупкаКомиссияЖивотных Тогда
			
			Движение = Движения.ИНАГРО_ЖивотныеОрганизации.Добавить(); 				
			Движение.ВидДвижения  = ВидДвиженияНакопления.Приход;
			Движение.Период       = СтруктураШапкиДокумента.Дата;
			Движение.Организация  = СтруктураШапкиДокумента.Организация;
			Движение.Номенклатура = СтрокаТЧ.Номенклатура;
			Движение.Склад 		  = СтрокаТЧ.Склад;
			Движение.КодОперации  = Перечисления.ИНАГРО_КодыОперацийУчетЖивотных.Прочие;   				
			Движение.Сумма        = СтрокаТЧ.СуммаБезНДСРегл;
			
		Иначе
			
			Движение = Движения.ИНАГРО_РастенияОрганизации.Добавить();   				
			Движение.ВидДвижения  = ВидДвиженияНакопления.Приход;
			Движение.Период       = СтруктураШапкиДокумента.Дата;
			Движение.Организация  = СтруктураШапкиДокумента.Организация;
			Движение.Номенклатура = СтрокаТЧ.Номенклатура;
			Движение.Склад 		  = СтрокаТЧ.Склад;
			Движение.КодОперации  = Перечисления.ИНАГРО_КодыОперацийУчетРастений.Прочие; 				
			Движение.Сумма        = СтрокаТЧ.СуммаБезНДСРегл;
			
		КонецЕсли;
		
		Движение.ДокументОприходования = ДокументОснование;

	КонецЦикла;  		
			
КонецПроцедуры

Процедура ПроводкиПоНДС(ПроводкиБУ, СтруктураШапкиДокумента, ТаблицаПоТоварам,ТаблицаПоВторомуСобытиюНал, Отказ)
	
	Если НЕ СтруктураШапкиДокумента.ЕстьНДС Тогда
		Возврат;
	КонецЕсли;

	// Получим таблицу движений по счетам НДС
	
	// ТОВАРЫ
	ТаблицаКопия = ТаблицаПоТоварам.Скопировать();                                                                                                                               
	ТаблицаКопия.Свернуть("СчетУчетаНДСПодтвержденный, СтавкаНДС, СчетДоходовБУ, СубконтоДоходовБУ1, СубконтоДоходовБУ2, СубконтоДоходовБУ3, НоменклатурнаяГруппа, СчетУчетаНДС, НалоговоеНазначениеДоходовИЗатрат","ПроводкиСуммаНДСРегл,ПроводкиСуммаНДСВал,ПроводкиСуммаНДСКурсНБУ");
	ТаблицаДвижений = ТаблицаКопия.Скопировать();
		
	Для Каждого СтрокаТаблицы Из ТаблицаДвижений Цикл
		
		Если    СтрокаТаблицы.ПроводкиСуммаНДСРегл <> 0 
			ИЛИ СтрокаТаблицы.ПроводкиСуммаНДСВал  <> 0 Тогда
			
			Проводка = ПроводкиБУ.Добавить();

			Проводка.Период                     = СтруктураШапкиДокумента.Дата;
			Проводка.Активность                 = Истина;
			Проводка.Организация                = СтруктураШапкиДокумента.Организация;
			Проводка.Сумма                      = СтрокаТаблицы.ПроводкиСуммаНДСРегл;
			Проводка.Содержание                 = НСтр("ru='НДС: налоговые обязательства: отгрузка';uk=""ПДВ: податкові зобов'язання: відвантаження""",Локализация.КодЯзыкаИнформационнойБазы());
			Проводка.НомерЖурнала               = "";

			Если НЕ СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
				Проводка.СчетДт                     = СтрокаТаблицы.СчетДоходовБУ;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1,                      СтрокаТаблицы.СубконтоДоходовБУ1);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2,                      СтрокаТаблицы.СубконтоДоходовБУ2);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3,                      СтрокаТаблицы.СубконтоДоходовБУ3);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "НоменклатурныеГруппы", СтрокаТаблицы.НоменклатурнаяГруппа);
				
				Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыльДо2015 Тогда
					
					Проводка.НалоговоеНазначениеДт = СтрокаТаблицы.НалоговоеНазначениеДоходовИЗатрат;
					Проводка.СуммаНУДт = СтрокаТаблицы.ПроводкиСуммаНДСРегл;
					
				КонецЕсли;
				
			Иначе	
				// С 2011 года согласно НК начисляются обязательства при поставке товаров по договорам комиссии.
				Проводка.СчетДт                     = СтрокаТаблицы.СчетУчетаНДСПодтвержденный;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты",                     СтруктураШапкиДокумента.Контрагент);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Договоры",                        СтруктураШапкиДокумента.ДоговорКонтрагента);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ДокументыРасчетовСКонтрагентами", НалоговыйУчет.ОпределитьСделкуНалоговыйУчет(СтруктураШапкиДокумента, ДокументОснование, ДокументОснование.Сделка));
			КонецЕсли;
			
			Проводка.СчетКт                     = СтрокаТаблицы.СчетУчетаНДС;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Контрагенты",                     СтруктураШапкиДокумента.Контрагент);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Договоры",                        СтруктураШапкиДокумента.ДоговорКонтрагента);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ДокументыРасчетовСКонтрагентами", НалоговыйУчет.ОпределитьСделкуНалоговыйУчет(СтруктураШапкиДокумента, ДокументОснование, ДокументОснование.Сделка));
					
			НалоговыйУчет.РазбитьПроводкуПоНДСНаПервоеВтороеСобытие(ТаблицаПоВторомуСобытиюНал, ПроводкиБУ, Проводка, 
													  "Кт", СтрокаТаблицы.СчетУчетаНДСПодтвержденный, 
													  СтруктураШапкиДокумента.ДоговорКонтрагента, 
													  НалоговыйУчет.ОпределитьСделкуНалоговыйУчет(СтруктураШапкиДокумента, ДокументОснование.Сделка, ДокументОснование.Сделка), ДокументОснование.Сделка,
													  Перечисления.СобытияОжидаемыйИПодтвержденныйНДСПродаж.Реализация,
													  СтрокаТаблицы.СтавкаНДС,	
													  , , ,СтрокаТаблицы.ПроводкиСуммаНДСВал, СтрокаТаблицы.ПроводкиСуммаНДСКурсНБУ, КурсЗачетаАвансаРегл);
			
		КонецЕсли;

	КонецЦикла;
	
КонецПроцедуры
  
#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ОбновитьПараметрыУчетнойПолитики()
		
	мУчетнаяПолитика = Новый Структура;
	мУчетнаяПолитика.Вставить("ЕстьНалогНаПрибыльДо2015", УчетнаяПолитика.ПлательщикНалогаНаПрибыльДо2015(Организация, НачалоМесяца(Дата)));
	мУчетнаяПолитика.Вставить("ЕстьНДС",                  УчетнаяПолитика.ПлательщикНДС(Организация, НачалоМесяца(Дата)));
	
	СпособОценкиМПЗ   = УчетнаяПолитика.СпособОценкиМПЗ(Организация, НачалоМесяца(Дата));
	ПартионныйУчетМПЗ = (СпособОценкиМПЗ = Перечисления.СпособыОценки.ФИФО ИЛИ СпособОценкиМПЗ = Перечисления.СпособыОценки.ЛИФО); 
	
	ПартионныйУчетБА = Ложь;
	Если ИНАГРО_ОбщийВызовСервераПовтИсп.ЕстьБСПУ() Тогда
		МодульИНАГРО_БиологическиеАктивы = ОбщегоНазначения.ОбщийМодуль("ИНАГРО_БиологическиеАктивы");
		СпособОценкиБА = МодульИНАГРО_БиологическиеАктивы.СпособОценкиБА(Организация, НачалоМесяца(Дата));
		ПартионныйУчетБА  = (СпособОценкиБА = Перечисления.СпособыОценки.ФИФО) ИЛИ (СпособОценкиБА = Перечисления.СпособыОценки.ЛИФО);
	КонецЕсли;
			
КонецПроцедуры

// Процедура заполняет колонки таблицы товаров, которые будут в дальнейшем использоваться
// для формирования движений по бухгалтерскому и налоговому учетам.
Процедура ДобавитьКолонкиТоваровРегл(ТаблицаТоваров, ПогрешностиОкругления) Экспорт
	
	Приобретение = ВидОперации = Перечисления.ИНАГРО_ВидыОперацийКорректировкиСтоимости.ВходящиеДокументы;		
	
	ТаблицаТоваров.Колонки.Добавить("СуммаНДСВалИсходный",     ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповЧисла(15, 2));
	
	// Суммы в документе в валюте регл. учета
	ТаблицаТоваров.Колонки.Добавить("СуммаБезНДСРегл",         ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповЧисла(15, 2));
	ТаблицаТоваров.Колонки.Добавить("СуммаНДСРегл",            ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповЧисла(15, 2));
	ТаблицаТоваров.Колонки.Добавить("СуммаСНДСРегл",           ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповЧисла(15, 2));
	
	// Суммы в документе в валюте документа
	ТаблицаТоваров.Колонки.Добавить("СуммаБезНДСВал",          ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповЧисла(15, 2));
	ТаблицаТоваров.Колонки.Добавить("СуммаНДСВал",             ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповЧисла(15, 2));
	ТаблицаТоваров.Колонки.Добавить("СуммаСНДСВал",            ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповЧисла(15, 2));
	
	// Суммы в проводках в валюте регл. учета
	ТаблицаТоваров.Колонки.Добавить("ПроводкиСуммаБезНДСРегл", ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповЧисла(15, 2));
	ТаблицаТоваров.Колонки.Добавить("ПроводкиСуммаНДСРегл",    ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповЧисла(15, 2));
	ТаблицаТоваров.Колонки.Добавить("ПроводкиСуммаСНДСРегл",   ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповЧисла(15, 2));
	
	// Суммы в проводках в валюте документа
	ТаблицаТоваров.Колонки.Добавить("ПроводкиСуммаБезНДСВал",  ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповЧисла(15, 2));
	ТаблицаТоваров.Колонки.Добавить("ПроводкиСуммаНДСВал",     ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповЧисла(15, 2));
	ТаблицаТоваров.Колонки.Добавить("ПроводкиСуммаСНДСВал",    ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповЧисла(15, 2));
	
	ТаблицаТоваров.Колонки.Добавить("ПроводкиСуммаНДСКурсНБУ", ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповЧисла(15, 2));	
	
	// сумма по налоговому учету налога на прибыль
	ТаблицаТоваров.Колонки.Добавить("ПроводкиСуммаБезНДСНУ",   ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповЧисла(15, 2));
	
	ВидДеятельностиНДСНеоблагаемый 	   = Перечисления.ВидыДеятельностиНДС.Необлагаемая;
	ВидДеятельностиНДСПропорциональный = Перечисления.ВидыДеятельностиНДС.ПропорциональноОблагаемая;
	
	// Заполним значения в добавленых колонках 
	Для каждого СтрокаТаблицы Из ТаблицаТоваров Цикл
		
		ЕстьПропорциональныйНДС = Приобретение И ОбщегоНазначенияБП.ЕстьРеквизитДокумента("СуммаНДСПропорциональноКредит", ДокументОснование.Метаданные());
		ДокументСуммаВключаетНДС = Истина;
		Если ОбщегоНазначенияБП.ЕстьРеквизитДокумента("СуммаВключаетНДС", ДокументОснование.Метаданные()) Тогда 
		    ДокументСуммаВключаетНДС = ДокументОснование.СуммаВключаетНДС;
		КонецЕсли;			
		
		// Рассчитаем суммы в документе в валюте документа
		СтрокаТаблицы.СуммаСНДСВал = СтрокаТаблицы.Сумма + ?(ДокументСуммаВключаетНДС, 0, СтрокаТаблицы.НДС);
		СтрокаТаблицы.СуммаНДСВал  = СтрокаТаблицы.НДС;
		
		Если  ЕстьПропорциональныйНДС = Истина
			И СтрокаТаблицы.НалоговоеНазначение.ВидДеятельностиНДС = ВидДеятельностиНДСПропорциональный Тогда
			// в этой колонке сохраним исходную сумму НДС в валюте.
			СтрокаТаблицы.СуммаНДСВалИсходный = СтрокаТаблицы.СуммаНДСВал;
			Если ДокументОснование.СуммаНДСПропорциональноВсего = 0 Тогда
				СтрокаТаблицы.СуммаНДСВал = 0;
			Иначе	
				СтрокаТаблицы.СуммаНДСВал = ОбщегоНазначенияРед12.ОкруглитьСУчетомПогрешности(СтрокаТаблицы.СуммаНДСВал * (ДокументОснование.СуммаНДСПропорциональноКредит / ДокументОснование.СуммаНДСПропорциональноВсего), 2, , ПогрешностиОкругления, "СуммаНДСПропорциональноВал");
			КонецЕсли;	
		КонецЕсли;			
		
		СтрокаТаблицы.СуммаБезНДСВал  = СтрокаТаблицы.СуммаСНДСВал - СтрокаТаблицы.СуммаНДСВал;

		// Рассчитаем суммы в документе в валюте регл. учета
		Если ДокументОснование.ВалютаДокумента = мВалютаРегламентированногоУчета Тогда
			СтрокаТаблицы.СуммаСНДСРегл = СтрокаТаблицы.СуммаСНДСВал;
			СтрокаТаблицы.СуммаНДСРегл  = СтрокаТаблицы.СуммаНДСВал;
		Иначе
			КурсОсн      = ЗаполнениеДокументов.КурсДокумента(ДокументОснование, мВалютаРегламентированногоУчета);
			КратностьОсн = ЗаполнениеДокументов.КратностьДокумента(ДокументОснование, мВалютаРегламентированногоУчета);
			СтрокаТаблицы.СуммаСНДСРегл = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.СуммаСНДСВал, 
												ДокументОснование.ВалютаДокумента,
												мВалютаРегламентированногоУчета, 
												КурсОсн, 1,
												КратностьОсн, 1,
												, ПогрешностиОкругления, "СуммаСНДСРегл");
			СтрокаТаблицы.СуммаНДСРегл = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.СуммаНДСВал, 
												ДокументОснование.ВалютаДокумента,
												мВалютаРегламентированногоУчета, 
												КурсОсн, 1,
												КратностьОсн, 1,
												, ПогрешностиОкругления, СтрокаТаблицы.СтавкаНДС);
			
		КонецЕсли;
		СтрокаТаблицы.СуммаБезНДСРегл = СтрокаТаблицы.СуммаСНДСРегл - СтрокаТаблицы.СуммаНДСРегл;
		
		// Рассчитаем суммы в проводках в валюте регл. учета и валюте документа
		СтрокаТаблицы.ПроводкиСуммаСНДСРегл = СтрокаТаблицы.СуммаСНДСРегл;
		СтрокаТаблицы.ПроводкиСуммаСНДСВал  = СтрокаТаблицы.СуммаСНДСВал;
		
		Если Приобретение Тогда
	
			// Определим значение НДС в проводках			
			Если СтрокаТаблицы.НалоговоеНазначение.ВидДеятельностиНДС = ВидДеятельностиНДСНеоблагаемый Тогда
				// НДС включается в стоимость
				СтрокаТаблицы.ПроводкиСуммаНДСРегл = 0;
				СтрокаТаблицы.ПроводкиСуммаНДСВал  = 0;
			Иначе
				СтрокаТаблицы.ПроводкиСуммаНДСРегл = СтрокаТаблицы.СуммаНДСРегл;
				СтрокаТаблицы.ПроводкиСуммаНДСВал  = СтрокаТаблицы.СуммаНДСВал;
			КонецЕсли;
			
		Иначе
			
			// Определим значение НДС в проводках
			СтрокаТаблицы.ПроводкиСуммаНДСРегл = СтрокаТаблицы.СуммаНДСРегл;
			СтрокаТаблицы.ПроводкиСуммаНДСВал  = СтрокаТаблицы.СуммаНДСВал;			
			
		КонецЕсли;
		
		СтрокаТаблицы.ПроводкиСуммаБезНДСРегл = СтрокаТаблицы.ПроводкиСуммаСНДСРегл - СтрокаТаблицы.ПроводкиСуммаНДСРегл;
		СтрокаТаблицы.ПроводкиСуммаБезНДСВал  = СтрокаТаблицы.ПроводкиСуммаСНДСВал  - СтрокаТаблицы.ПроводкиСуммаНДСВал;
		
		СтрокаТаблицы.ПроводкиСуммаНДСКурсНБУ = СтрокаТаблицы.ПроводкиСуммаНДСРегл;
			
	КонецЦикла;
	
КонецПроцедуры

Процедура ПолучитьКодОперацииПеремещения(ВидОперации, КодОперации,КодОперацииНовый)
	
	Если ВидОперации = Перечисления.ИНАГРО_ВидыОперацийПеремещениеБА.ВводВОсновноеСтадо Тогда
		КодОперации = Перечисления.ИНАГРО_КодыОперацийУчетЖивотных.ПеремещениеВДругуюГруппуМинус;
		КодОперацииНовый = Перечисления.ИНАГРО_КодыОперацийУчетЖивотных.ВводВОсновноеСтадо;
		
	ИначеЕсли ВидОперации = Перечисления.ИНАГРО_ВидыОперацийПеремещениеБА.ВыбраковкаСОсновногоСтада Тогда
		КодОперации = Перечисления.ИНАГРО_КодыОперацийУчетЖивотных.ВыбраковкаСОсновногоСтада;
		КодОперацииНовый = Перечисления.ИНАГРО_КодыОперацийУчетЖивотных.ПеремещениеВДругуюГруппуПлюс;
		
	ИначеЕсли ВидОперации = Перечисления.ИНАГРО_ВидыОперацийПеремещениеБА.ПереводВДругуюГруппу Тогда
		КодОперации = Перечисления.ИНАГРО_КодыОперацийУчетЖивотных.ПеремещениеВДругуюГруппуМинус;
		КодОперацииНовый = Перечисления.ИНАГРО_КодыОперацийУчетЖивотных.ПеремещениеВДругуюГруппуПлюс;
		
	ИначеЕсли ВидОперации = Перечисления.ИНАГРО_ВидыОперацийПеремещениеБА.Перемещение Тогда
		КодОперации = Перечисления.ИНАГРО_КодыОперацийУчетЖивотных.ПеремещениеМинус;
		КодОперацииНовый = Перечисления.ИНАГРО_КодыОперацийУчетЖивотных.ПеремещениеПлюс;
		
	ИначеЕсли ВидОперации = Перечисления.ИНАГРО_ВидыОперацийПеремещениеБА.ПереводНаВыращивание Тогда
		КодОперации = Перечисления.ИНАГРО_КодыОперацийУчетЖивотных.ПриростКоличественный;
		КодОперацииНовый = Перечисления.ИНАГРО_КодыОперацийУчетЖивотных.ПеремещениеПлюс;
		
	ИначеЕсли ВидОперации = Перечисления.ИНАГРО_ВидыОперацийПеремещениеБА.ПеремещениеРастений Тогда
		КодОперации = Перечисления.ИНАГРО_КодыОперацийУчетРастений.ПеремещениеМинус;
		КодОперацииНовый = Перечисления.ИНАГРО_КодыОперацийУчетРастений.ПеремещениеПлюс;
		
	ИначеЕсли ВидОперации = Перечисления.ИНАГРО_ВидыОперацийПеремещениеБА.ПеремещениеРастений1552 Тогда 
		КодОперации = Перечисления.ИНАГРО_КодыОперацийУчетРастений.Оприходование;
		
	ИначеЕсли ВидОперации = Перечисления.ИНАГРО_ВидыОперацийПеремещениеБА.ПереводВДолгосрочныеРаст Тогда
		КодОперации = Перечисления.ИНАГРО_КодыОперацийУчетРастений.ПеремещениеВДругуюГруппуМинус;
		КодОперацииНовый = Перечисления.ИНАГРО_КодыОперацийУчетРастений.ПереводВДолгосрочныеРаст;
		
	КонецЕсли;
	
КонецПроцедуры	

// Расчет суммы документа
//
// Параметры:
//  СтрокаТабличнойЧасти - строка табличной части документа,
//  ДокументОбъект       - объект редактируемого документа.
//
Функция РасчетСуммыВсего() Экспорт
	
	СуммаВсего = 0;
	Если СоставКорректировки.Количество() = 0 Тогда
		Возврат Формат(СуммаВсего,"ЧДЦ=2");
	КонецЕсли;
	
	Для каждого Стр Из СоставКорректировки Цикл
		Если  НЕ Стр.СуммаВключаетНДС Тогда
			СуммаВсего = СуммаВсего + Стр.СуммаРаспределения + Стр.СуммаНдсРаспределения;
		Иначе 
			СуммаВсего = СуммаВсего + Стр.СуммаРаспределения;
		КонецЕсли; 
	КонецЦикла;
	
	Возврат Формат(СуммаВсего,"ЧДЦ=2");
	
КонецФункции

Процедура ЗаполнитьСоставКорректировки(ДанныеЗаполнения = Неопределено) Экспорт
	
	Если ДанныеЗаполнения <> Неопределено Тогда
		
		ДокументОснование  = ДанныеЗаполнения;
		
		Контрагент         = ДокументОснование.Контрагент;		
		ДоговорКонтрагента = ДокументОснование.ДоговорКонтрагента;

	КонецЕсли;
	
	Если    ДокументОснование.Метаданные().Имя = "ИНАГРО_РеализацияБиологическихАктивов"
		ИЛИ ДокументОснование.Метаданные().Имя = "ИНАГРО_ПоступлениеБиологическихАктивов" Тогда 
		ЦенаКГоловам = ДокументОснование.ПрименитьЦенуККоличествуГолов;
	Иначе 
		ЦенаКГоловам = Ложь;
	КонецЕсли;
			
	Для Каждого СтрокаТабличнойЧасти Из ДокументОснование.Товары Цикл   
		
		НоваяСтрока = СоставКорректировки.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТабличнойЧасти);
		НоваяСтрока.КоличествоТекущее             = СтрокаТабличнойЧасти.Количество; 
		НоваяСтрока.ЦенаТекущая                   = СтрокаТабличнойЧасти.Цена;
		НоваяСтрока.СуммаТекущая                  = СтрокаТабличнойЧасти.Сумма; 			
		НоваяСтрока.СуммаНДСТекущая               = СтрокаТабличнойЧасти.СуммаНДС;
		НоваяСтрока.Цена                          = СтрокаТабличнойЧасти.Цена;
		НоваяСтрока.Сумма                         = НоваяСтрока.СуммаТекущая;  	
		НоваяСтрока.СтавкаНДС                     = СтрокаТабличнойЧасти.СтавкаНДС;
		НоваяСтрока.СуммаНДС                      = СтрокаТабличнойЧасти.СуммаНДС;			
		НоваяСтрока.ПрименитьЦенуККоличествуГолов = ЦенаКГоловам;		 
		НоваяСтрока.СуммаВключаетНДС              = ДокументОснование.СуммаВключаетНДС; 
		
		Если ИНАГРО_ОбщийВызовСервераПовтИсп.ЕстьБСПУ() Тогда
			
			Если ДокументОснование.Метаданные().Имя = "ИНАГРО_РеализацияБиологическихАктивов"
				ИЛИ ДокументОснование.Метаданные().Имя = "ИНАГРО_ПоступлениеБиологическихАктивов" Тогда 
				НоваяСтрока.ГоловТекущее          = СтрокаТабличнойЧасти.Голов; 
			КонецЕсли;  
			
			Если ДокументОснование.Метаданные().Имя = "ИНАГРО_РеализацияБиологическихАктивов" Тогда 
				НоваяСтрока.РасхождениеКоличества = ДокументОснование.РасхождениеКоличества;
				НоваяСтрока.СхемаРеализации       = СтрокаТабличнойЧасти.СхемаРеализации;
				Если ДокументОснование.РасхождениеКоличества Тогда
					НоваяСтрока.КоличествоТекущее = СтрокаТабличнойЧасти.НовоеКоличество;  
				КонецЕсли; 
			КонецЕсли;
			
			Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда 
				НоваяСтрока.РасхождениеКоличества = ДокументОснование.ИНАГРО_РасхождениеКоличества;
				НоваяСтрока.СхемаРеализации       = СтрокаТабличнойЧасти.СхемаРеализации;
				Если ДокументОснование.ИНАГРО_РасхождениеКоличества Тогда
					НоваяСтрока.КоличествоТекущее = СтрокаТабличнойЧасти.ИНАГРО_НовоеКоличество;  
				КонецЕсли; 
			КонецЕсли;  
			
		КонецЕсли;
		
		Если   ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
			Если ДокументОснование.ИНАГРО_ВидПоступления = Перечисления.ИНАГРО_ВидыПоступленияТоваров.ПоОрдеру И ДокументОснование.ИНАГРО_ОрдерВТЧ Тогда
				НоваяСтрока.Склад                 = СтрокаТабличнойЧасти.Ордер.Склад;
			ИначеЕсли ДокументОснование.ИНАГРО_ВидПоступления = Перечисления.ИНАГРО_ВидыПоступленияТоваров.ПоОрдеру Тогда
				НоваяСтрока.Склад                 = ДокументОснование.Склад.Склад;
			ИначеЕсли ДокументОснование.ИНАГРО_ВидПоступления = Перечисления.ИНАГРО_ВидыПоступленияТоваров.НаСклад И ДокументОснование.ИНАГРО_СкладВТЧ Тогда
				НоваяСтрока.Склад                 = СтрокаТабличнойЧасти.ИНАГРО_Склад;
			Иначе	 
				НоваяСтрока.Склад                 = ДокументОснование.Склад;
			КонецЕсли;
		Иначе	
			НоваяСтрока.Склад = ДокументОснование.Склад;
		КонецЕсли;  

	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьДанныеРаспределения() Экспорт 
	
	ОбновитьПараметрыУчетнойПолитики();

	ТабОснование = СоставКорректировки.Выгрузить();
	ТабОснование.Свернуть("Номенклатура, Коэффициент, СчетУчетаБУ, СтавкаНДС,НалоговоеНазначение", "КоличествоТекущее, СуммаТекущая, СуммаРаспределения, СуммаНДСРаспределения");
	ТабОснование.Колонки.СуммаРаспределения.Имя    = "Сумма";
	ТабОснование.Колонки.СуммаНДСРаспределения.Имя = "НДС";
	
	ПогрешностиОкругления = Новый Соответствие;
	ДобавитьКолонкиТоваровРегл(ТабОснование, ПогрешностиОкругления);
		
	РезультатРаспределения = ДанныеРаспределения.Выгрузить();
	
	Для Каждого СтрОснование Из ТабОснование Цикл   
		
		Если СтрОснование.Сумма = 0 Тогда 
			Продолжить;
		КонецЕсли;
				
		Запрос = Новый Запрос;
		
		Если (ИНАГРО_ОбщийВызовСервераПовтИсп.ЕстьБСПУ() И ДокументОснование.Метаданные().Имя = "ИНАГРО_ПоступлениеБиологическихАктивов" И НЕ ПартионныйУчетБА) 
			ИЛИ (ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") И НЕ ПартионныйУчетМПЗ) Тогда 
			
			Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
			               |	ХозрасчетныйДвиженияССубконто.Регистратор КАК Документ,
			               |	ХозрасчетныйДвиженияССубконто.СчетДт КАК СчетДт,
			               |	ХозрасчетныйДвиженияССубконто.СчетКт КАК СчетКт,
			               |	ХозрасчетныйДвиженияССубконто.СубконтоДт1 КАК СубконтоДт1,
			               |	ХозрасчетныйДвиженияССубконто.СубконтоДт2 КАК СубконтоДт2,
			               |	ХозрасчетныйДвиженияССубконто.СубконтоДт3 КАК СубконтоДт3,
			               |	ХозрасчетныйДвиженияССубконто.СубконтоКт1 КАК СубконтоКт1,
			               |	ХозрасчетныйДвиженияССубконто.СубконтоКт2 КАК СубконтоКт2,
			               |	ХозрасчетныйДвиженияССубконто.СубконтоКт3 КАК СубконтоКт3,
			               |	СУММА(ХозрасчетныйДвиженияССубконто.Сумма) КАК Сумма,
			               |	СУММА(ХозрасчетныйДвиженияССубконто.КоличествоКт) КАК Количество,
			               |	ХозрасчетныйДвиженияССубконто.НалоговоеНазначениеДт КАК НалоговоеНазначениеДт,
			               |	ХозрасчетныйДвиженияССубконто.НалоговоеНазначениеКт КАК НалоговоеНазначениеКт,
			               |	ХозрасчетныйДвиженияССубконто.Регистратор.Дата КАК РегистраторДата,
			               |	СУММА(ВЫБОР
			               |			КОГДА ХозрасчетныйДвиженияССубконто.СчетКт = ХозрасчетныйДвиженияССубконто.СчетДт
			               |				ТОГДА 0
			               |			ИНАЧЕ ХозрасчетныйДвиженияССубконто.КоличествоКт
			               |		КОНЕЦ) КАК КоличествоДляИтога,
			               |	СУММА(ВЫБОР
			               |			КОГДА ХозрасчетныйДвиженияССубконто.СчетКт = ХозрасчетныйДвиженияССубконто.СчетДт
			               |				ТОГДА 0
			               |			ИНАЧЕ ХозрасчетныйДвиженияССубконто.Сумма
			               |		КОНЕЦ) КАК СуммаДляИтога,
			               |	ХозрасчетныйДвиженияССубконто.Содержание КАК Содержание
			               |ПОМЕСТИТЬ Документы
			               |ИЗ
			               |	РегистрБухгалтерии.Хозрасчетный.ДвиженияССубконто(
			               |			&ДатаНач,
			               |			&ДатаКон,
			               |			Организация = &Организация
			               |				И СубконтоКт1 = &Номенклатура,
			               |			,
			               |			) КАК ХозрасчетныйДвиженияССубконто
			               |ГДЕ
			               |	ХозрасчетныйДвиженияССубконто.Регистратор <> &Регистратор
			               |	И ХозрасчетныйДвиженияССубконто.КоличествоКт <> 0
			               |
			               |СГРУППИРОВАТЬ ПО
			               |	ХозрасчетныйДвиженияССубконто.СубконтоДт2,
			               |	ХозрасчетныйДвиженияССубконто.СубконтоДт1,
			               |	ХозрасчетныйДвиженияССубконто.СубконтоДт3,
			               |	ХозрасчетныйДвиженияССубконто.СубконтоКт1,
			               |	ХозрасчетныйДвиженияССубконто.СчетДт,
			               |	ХозрасчетныйДвиженияССубконто.СчетКт,
			               |	ХозрасчетныйДвиженияССубконто.СубконтоКт2,
			               |	ХозрасчетныйДвиженияССубконто.СубконтоКт3,
			               |	ХозрасчетныйДвиженияССубконто.НалоговоеНазначениеДт,
			               |	ХозрасчетныйДвиженияССубконто.НалоговоеНазначениеКт,
			               |	ХозрасчетныйДвиженияССубконто.Регистратор.Дата,
			               |	ХозрасчетныйДвиженияССубконто.Регистратор,
			               |	ХозрасчетныйДвиженияССубконто.Содержание
			               |;
			               |
			               |////////////////////////////////////////////////////////////////////////////////
			               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
			               |	NULL КАК Период,
			               |	NULL КАК Организация,
			               |	ДокументыБезТранзита8Кл.Сумма КАК Сумма,
			               |	ДокументыБезТранзита8Кл.Количество КАК Количество,
			               |	NULL КАК НомерСтроки,
			               |	ДокументыБезТранзита8Кл.Документ КАК Документ,
			               |	ДокументыБезТранзита8Кл.СчетДт КАК СчетДт,
			               |	ДокументыБезТранзита8Кл.СчетКт КАК СчетКт,
			               |	ДокументыБезТранзита8Кл.СубконтоДт1 КАК СубконтоДт1,
			               |	ДокументыБезТранзита8Кл.СубконтоДт2 КАК СубконтоДт2,
			               |	ДокументыБезТранзита8Кл.СубконтоДт3 КАК СубконтоДт3,
			               |	ДокументыБезТранзита8Кл.СубконтоКт1 КАК СубконтоКт1,
			               |	ДокументыБезТранзита8Кл.СубконтоКт2 КАК СубконтоКт2,
			               |	ДокументыБезТранзита8Кл.СубконтоКт3 КАК СубконтоКт3,
			               |	ДокументыБезТранзита8Кл.НалоговоеНазначениеДт КАК НалоговоеНазначениеДт,
			               |	ДокументыБезТранзита8Кл.НалоговоеНазначениеКт КАК НалоговоеНазначениеКт,
			               |	ДокументыБезТранзита8Кл.Документ.Представление КАК ДокументПредставление,
			               |	ДокументыБезТранзита8Кл.Документ.Дата КАК ДокументДата,
			               |	ДокументыБезТранзита8Кл.КоличествоДляИтога КАК КоличествоДляИтога,
			               |	ДокументыБезТранзита8Кл.СуммаДляИтога КАК СуммаДляИтога,
			               |	ДокументыБезТранзита8Кл.Содержание КАК Содержание
			               |ИЗ
			               |	Документы КАК ДокументыБезТранзита8Кл
			               |ГДЕ
			               |	НЕ ДокументыБезТранзита8Кл.СчетКт В ИЕРАРХИИ (&Счета8Класса)
			               |
			               |ОБЪЕДИНИТЬ ВСЕ
			               |
			               |ВЫБРАТЬ
			               |	Проводки8Класс.Период,
			               |	Проводки8Класс.Организация,
			               |	Проводки8Класс.Сумма,
			               |	ИсходныеПроводки.КоличествоКт,
			               |	ИсходныеПроводки.НомерСтроки,
			               |	Проводки8Класс.Регистратор,
			               |	Проводки8Класс.СчетДт,
			               |	Проводки8Класс.СчетКт,
			               |	Проводки8Класс.СубконтоДт1,
			               |	Проводки8Класс.СубконтоДт2,
			               |	Проводки8Класс.СубконтоДт3,
			               |	Проводки8Класс.СубконтоКт1,
			               |	Проводки8Класс.СубконтоКт2,
			               |	Проводки8Класс.СубконтоКт3,
			               |	Проводки8Класс.НалоговоеНазначениеДт,
			               |	Проводки8Класс.НалоговоеНазначениеКт,
			               |	Проводки8Класс.Регистратор.Представление,
			               |	Проводки8Класс.Регистратор.Дата,
			               |	ВЫБОР
			               |		КОГДА Проводки8Класс.СчетКт В ИЕРАРХИИ (&Счета8Класса)
			               |			ТОГДА 0
			               |		ИНАЧЕ ВЫБОР
			               |				КОГДА ИсходныеПроводки.СчетКт = ИсходныеПроводки.СчетДт
			               |					ТОГДА 0
			               |				ИНАЧЕ ИсходныеПроводки.КоличествоКт
			               |			КОНЕЦ
			               |	КОНЕЦ,
			               |	ВЫБОР
			               |		КОГДА Проводки8Класс.СчетКт В ИЕРАРХИИ (&Счета8Класса)
			               |			ТОГДА 0
			               |		ИНАЧЕ ВЫБОР
			               |				КОГДА ИсходныеПроводки.СчетКт = ИсходныеПроводки.СчетДт
			               |					ТОГДА 0
			               |				ИНАЧЕ ИсходныеПроводки.Сумма
			               |			КОНЕЦ
			               |	КОНЕЦ,
			               |	ИсходныеПроводки.Содержание
			               |ИЗ
			               |	РегистрБухгалтерии.Хозрасчетный.ДвиженияССубконто(&ДатаНач, &ДатаКон, СчетКт В ИЕРАРХИИ (&Счета8Класса), , ) КАК Проводки8Класс
			               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.ДвиженияССубконто(&ДатаНач, &ДатаКон, СчетДт В ИЕРАРХИИ (&Счета8Класса), , ) КАК ИсходныеПроводки
			               |		ПО Проводки8Класс.Регистратор = ИсходныеПроводки.Регистратор
			               |			И (Проводки8Класс.НомерИсходнойПроводки = ИсходныеПроводки.НомерСтроки - 1),
			               |	Документы КАК Документы
			               |ГДЕ
			               |	Проводки8Класс.Регистратор В (Документы.Документ)
			               |	И ИсходныеПроводки.СубконтоКт1 = &Номенклатура
			               |
			               |УПОРЯДОЧИТЬ ПО
			               |	ДокументДата,
			               |	ДокументПредставление,
			               |	НомерСтроки";
			
		Иначе
			
			Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
			               |	ХозрасчетныйДвиженияССубконто.Регистратор КАК Документ,
			               |	ХозрасчетныйДвиженияССубконто.СчетДт КАК СчетДт,
			               |	ХозрасчетныйДвиженияССубконто.СчетКт КАК СчетКт,
			               |	ХозрасчетныйДвиженияССубконто.СубконтоДт1 КАК СубконтоДт1,
			               |	ХозрасчетныйДвиженияССубконто.СубконтоДт2 КАК СубконтоДт2,
			               |	ХозрасчетныйДвиженияССубконто.СубконтоДт3 КАК СубконтоДт3,
			               |	ХозрасчетныйДвиженияССубконто.СубконтоКт1 КАК СубконтоКт1,
			               |	ХозрасчетныйДвиженияССубконто.СубконтоКт2 КАК СубконтоКт2,
			               |	ХозрасчетныйДвиженияССубконто.СубконтоКт3 КАК СубконтоКт3,
			               |	СУММА(ХозрасчетныйДвиженияССубконто.Сумма) КАК Сумма,
			               |	СУММА(ХозрасчетныйДвиженияССубконто.КоличествоКт) КАК Количество,
			               |	ХозрасчетныйДвиженияССубконто.НалоговоеНазначениеДт КАК НалоговоеНазначениеДт,
			               |	ХозрасчетныйДвиженияССубконто.НалоговоеНазначениеКт КАК НалоговоеНазначениеКт,
			               |	ХозрасчетныйДвиженияССубконто.Регистратор.Дата КАК РегистраторДата,
			               |	СУММА(ВЫБОР
			               |			КОГДА ХозрасчетныйДвиженияССубконто.СчетКт = ХозрасчетныйДвиженияССубконто.СчетДт
			               |				ТОГДА 0
			               |			ИНАЧЕ ХозрасчетныйДвиженияССубконто.КоличествоКт
			               |		КОНЕЦ) КАК КоличествоДляИтога,
			               |	СУММА(ВЫБОР
			               |			КОГДА ХозрасчетныйДвиженияССубконто.СчетКт = ХозрасчетныйДвиженияССубконто.СчетДт
			               |				ТОГДА 0
			               |			ИНАЧЕ ХозрасчетныйДвиженияССубконто.Сумма
			               |		КОНЕЦ) КАК СуммаДляИтога,
			               |	ХозрасчетныйДвиженияССубконто.Содержание КАК Содержание
			               |ПОМЕСТИТЬ Документы
			               |ИЗ
			               |	РегистрБухгалтерии.Хозрасчетный.ДвиженияССубконто(
			               |			&ДатаНач,
			               |			&ДатаКон,
			               |			Организация = &Организация
			               |				И СубконтоКт1 = &Номенклатура
			               |				И (СубконтоКт2 = &Регистратор
			               |					ИЛИ СубконтоКт3 = &Регистратор),
			               |			,
			               |			) КАК ХозрасчетныйДвиженияССубконто
			               |ГДЕ
			               |	ХозрасчетныйДвиженияССубконто.Регистратор <> &Регистратор
			               |	И ХозрасчетныйДвиженияССубконто.КоличествоКт <> 0
			               |
			               |СГРУППИРОВАТЬ ПО
			               |	ХозрасчетныйДвиженияССубконто.СубконтоДт2,
			               |	ХозрасчетныйДвиженияССубконто.СубконтоДт1,
			               |	ХозрасчетныйДвиженияССубконто.СубконтоДт3,
			               |	ХозрасчетныйДвиженияССубконто.СубконтоКт1,
			               |	ХозрасчетныйДвиженияССубконто.СчетДт,
			               |	ХозрасчетныйДвиженияССубконто.СчетКт,
			               |	ХозрасчетныйДвиженияССубконто.СубконтоКт2,
			               |	ХозрасчетныйДвиженияССубконто.СубконтоКт3,
			               |	ХозрасчетныйДвиженияССубконто.НалоговоеНазначениеДт,
			               |	ХозрасчетныйДвиженияССубконто.НалоговоеНазначениеКт,
			               |	ХозрасчетныйДвиженияССубконто.Регистратор.Дата,
			               |	ХозрасчетныйДвиженияССубконто.Регистратор,
			               |	ХозрасчетныйДвиженияССубконто.Содержание
			               |;
			               |
			               |////////////////////////////////////////////////////////////////////////////////
			               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
			               |	NULL КАК Период,
			               |	NULL КАК Организация,
			               |	ДокументыБезТранзита8Кл.Сумма КАК Сумма,
			               |	ДокументыБезТранзита8Кл.Количество КАК Количество,
			               |	NULL КАК НомерСтроки,
			               |	ДокументыБезТранзита8Кл.Документ КАК Документ,
			               |	ДокументыБезТранзита8Кл.СчетДт КАК СчетДт,
			               |	ДокументыБезТранзита8Кл.СчетКт КАК СчетКт,
			               |	ДокументыБезТранзита8Кл.СубконтоДт1 КАК СубконтоДт1,
			               |	ДокументыБезТранзита8Кл.СубконтоДт2 КАК СубконтоДт2,
			               |	ДокументыБезТранзита8Кл.СубконтоДт3 КАК СубконтоДт3,
			               |	ДокументыБезТранзита8Кл.СубконтоКт1 КАК СубконтоКт1,
			               |	ДокументыБезТранзита8Кл.СубконтоКт2 КАК СубконтоКт2,
			               |	ДокументыБезТранзита8Кл.СубконтоКт3 КАК СубконтоКт3,
			               |	ДокументыБезТранзита8Кл.НалоговоеНазначениеДт КАК НалоговоеНазначениеДт,
			               |	ДокументыБезТранзита8Кл.НалоговоеНазначениеКт КАК НалоговоеНазначениеКт,
			               |	ДокументыБезТранзита8Кл.Документ.Представление КАК ДокументПредставление,
			               |	ДокументыБезТранзита8Кл.Документ.Дата КАК ДокументДата,
			               |	ДокументыБезТранзита8Кл.КоличествоДляИтога КАК КоличествоДляИтога,
			               |	ДокументыБезТранзита8Кл.СуммаДляИтога КАК СуммаДляИтога,
			               |	ДокументыБезТранзита8Кл.Содержание КАК Содержание
			               |ИЗ
			               |	Документы КАК ДокументыБезТранзита8Кл
			               |ГДЕ
			               |	НЕ ДокументыБезТранзита8Кл.СчетКт В ИЕРАРХИИ (&Счета8Класса)
			               |
			               |ОБЪЕДИНИТЬ ВСЕ
			               |
			               |ВЫБРАТЬ
			               |	Проводки8Класс.Период,
			               |	Проводки8Класс.Организация,
			               |	Проводки8Класс.Сумма,
			               |	ИсходныеПроводки.КоличествоКт,
			               |	ИсходныеПроводки.НомерСтроки,
			               |	Проводки8Класс.Регистратор,
			               |	Проводки8Класс.СчетДт,
			               |	Проводки8Класс.СчетКт,
			               |	Проводки8Класс.СубконтоДт1,
			               |	Проводки8Класс.СубконтоДт2,
			               |	Проводки8Класс.СубконтоДт3,
			               |	Проводки8Класс.СубконтоКт1,
			               |	Проводки8Класс.СубконтоКт2,
			               |	Проводки8Класс.СубконтоКт3,
			               |	Проводки8Класс.НалоговоеНазначениеДт,
			               |	Проводки8Класс.НалоговоеНазначениеКт,
			               |	Проводки8Класс.Регистратор.Представление,
			               |	Проводки8Класс.Регистратор.Дата,
			               |	ВЫБОР
			               |		КОГДА Проводки8Класс.СчетКт В ИЕРАРХИИ (&Счета8Класса)
			               |			ТОГДА 0
			               |		ИНАЧЕ ИсходныеПроводки.КоличествоКт
			               |	КОНЕЦ,
			               |	ВЫБОР
			               |		КОГДА Проводки8Класс.СчетКт В ИЕРАРХИИ (&Счета8Класса)
			               |			ТОГДА 0
			               |		ИНАЧЕ Проводки8Класс.Сумма
			               |	КОНЕЦ,
			               |	ИсходныеПроводки.Содержание
			               |ИЗ
			               |	РегистрБухгалтерии.Хозрасчетный.ДвиженияССубконто(&ДатаНач, &ДатаКон, СчетКт В ИЕРАРХИИ (&Счета8Класса), , ) КАК Проводки8Класс
			               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.ДвиженияССубконто(&ДатаНач, &ДатаКон, СчетДт В ИЕРАРХИИ (&Счета8Класса), , ) КАК ИсходныеПроводки
			               |		ПО (Проводки8Класс.НомерИсходнойПроводки = ИсходныеПроводки.НомерСтроки - 1)
			               |			И Проводки8Класс.Регистратор = ИсходныеПроводки.Регистратор
			               |			И Проводки8Класс.Сумма = ИсходныеПроводки.Сумма
			               |			И Проводки8Класс.СчетКт = ИсходныеПроводки.СчетДт
			               |ГДЕ
			               |	ИсходныеПроводки.СубконтоКт1 = &Номенклатура
			               |	И (ИсходныеПроводки.СубконтоКт2 = &Регистратор
			               |			ИЛИ ИсходныеПроводки.СубконтоКт3 = &Регистратор)
			               |
			               |УПОРЯДОЧИТЬ ПО
			               |	ДокументДата,
			               |	ДокументПредставление,
			               |	НомерСтроки"; 				   
		
		КонецЕсли; 
		
		Запрос.УстановитьПараметр("ДатаНач",      ДокументОснование.Дата);
		Запрос.УстановитьПараметр("ДатаКон",      Дата);
		Запрос.УстановитьПараметр("СчетКт",       СтрОснование.СчетУчетаБУ);
		Запрос.УстановитьПараметр("Организация",  Организация);
		Запрос.УстановитьПараметр("Номенклатура", СтрОснование.Номенклатура);   				 
		Запрос.УстановитьПараметр("Регистратор",  ДокументОснование); 
		
		Счета8 = Новый Массив;
		Счета8.Добавить(ПланыСчетов.Хозрасчетный.МатериальныеЗатраты);
		Счета8.Добавить(ПланыСчетов.Хозрасчетный.ЗатратыНаОплатуТруда);
		Счета8.Добавить(ПланыСчетов.Хозрасчетный.ОтчисленияНаСоциальныеМероприятия);
		Счета8.Добавить(ПланыСчетов.Хозрасчетный.Амортизация);
		Счета8.Добавить(ПланыСчетов.Хозрасчетный.ДругиеОперационныеЗатраты);
		Счета8.Добавить(ПланыСчетов.Хозрасчетный.ДругиеЗатратыПоЭлементам);
		
		Запрос.УстановитьПараметр("Счета8Класса", Счета8);
		
		Результат = Запрос.Выполнить().Выгрузить();
		
		// Для Средней необходимо контролировать Количество, которое распределяем, т.к. в проводках нет контроля по партиям.
		КоличествоНадоСписать = СтрОснование.КоличествоТекущее;				
		Для Каждого Строка Из Результат Цикл 	
			Если ИНАГРО_ОбщийВызовСервераПовтИсп.ЕстьБСПУ() Тогда
				Если    Строка.Документ.Метаданные().Имя = "ИНАГРО_КорректировкаСтоимостиБиологическихАктивов"
					ИЛИ Строка.Документ.Метаданные().Имя = "ИНАГРО_ВозвратБиологическихАктивовПоставщику" Тогда
					 Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			Если КоличествоНадоСписать > 0 Тогда
				НоваяСтрока = РезультатРаспределения.Добавить();
			Иначе
				Прервать;
			КонецЕсли;
			
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка); 			
			
			КоэфКорректировки = СтрОснование.СуммаБезНДСРегл / (СтрОснование.КоличествоТекущее * ?(СтрОснование.Коэффициент = 0,1,СтрОснование.Коэффициент));
			Если (ИНАГРО_ОбщийВызовСервераПовтИсп.ЕстьБСПУ() И ДокументОснование.Метаданные().Имя = "ИНАГРО_ПоступлениеБиологическихАктивов" И Не ПартионныйУчетБА) 
				ИЛИ (ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") И Не ПартионныйУчетМПЗ) Тогда 
				Если КоличествоНадоСписать > Строка.Количество Тогда
					СтрКоличество = Строка.Количество;
					КоличествоНадоСписать = КоличествоНадоСписать - Строка.Количество;
				Иначе
					СтрКоличество = КоличествоНадоСписать;					
					КоличествоНадоСписать = 0;
				КонецЕсли; 
			Иначе
				СтрКоличество = Строка.Количество;
			КонецЕсли;
			
			НоваяСтрока.СуммаРаспределения = КоэфКорректировки * СтрКоличество;
			НоваяСтрока.Количество = СтрКоличество;
									
		КонецЦикла;
		
	КонецЦикла;
	
	ДанныеРаспределения.Загрузить(РезультатРаспределения);	
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли