#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПроцедурыИФункцииПечати

Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт

	// Корректировка
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "Корректировка";
	КомандаПечати.Представление = НСтр("ru='Корректировка';uk='Коригування'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечати";
	КомандаПечати.СписокФорм    = "ФормаСписка,ФормаДокументаОбщая";
	
	// Реестр документов
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "Реестр";
	КомандаПечати.Представление = НСтр("ru='Реестр документов';uk='Реєстр документів'");
	КомандаПечати.ЗаголовокФормы= НСтр("ru='Реестр документов ""Расчет корректировки цены""';uk='Реєстр документів ""Розрахунок коригування ціни""'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечатиРеестраДокументов";
	КомандаПечати.СписокФорм    = "ФормаСписка";
	КомандаПечати.Порядок       = 100;

КонецПроцедуры		

Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	// Устанавливаем признак доступности печати покомплектно.
	ПараметрыВывода.ДоступнаПечатьПоКомплектно = Истина;
	
	// Проверяем, нужно ли для макета СчетЗаказа формировать табличный документ.
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "Корректировка") Тогда
		
		// Формируем табличный документ и добавляем его в коллекцию печатных форм.
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "Корректировка", НСтр("ru='Корректировка';uk='Коригування'"), 
			ПечатьКорректировки(МассивОбъектов, ОбъектыПечати, ПараметрыВывода), , "Документ.ИНАГРО_РасчетКорректировкиЦены.ПФ_MXL_Накладная", ,Истина);
		
	КонецЕсли; 	

КонецПроцедуры

Функция ПечатьКорректировки(МассивОбъектов,ОбъектыПечати,ПараметрыВывода)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТабДокумент = Новый ТабличныйДокумент();
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ИНАГРО_РасчетКорректировкиЦены.ПФ_MXL_Накладная");
	ПервыйДокумент = Истина;
	
	Для Каждого Ссылка Из МассивОбъектов Цикл
		Если Не ПервыйДокумент Тогда
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли; 		
		ПервыйДокумент = Ложь;
		
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Номер,
	|	Дата,
	|	ДоговорКонтрагента,
	|	ДоговорКонтрагента.Дата  		КАК ДоговорДата,
	|	ДоговорКонтрагента.Номер 		КАК ДоговорНомер,
	|	ДоговорКонтрагента.НаименованиеДляПечати КАК ДоговорНаименованиеДляПечати,
	|	ДоговорКонтрагента.ВидДоговора  КАК ВидДоговораКонтрагента,
	|	ПредставительОрганизации КАК ПредставительПоставщика,
	|	ВЫРАЗИТЬ(МестоСоставленияДокумента КАК СТРОКА(1000)) КАК МестоСоставленияДокумента,
	|	Организация,
	|	ДоверенностьСерия,
	|	ДоверенностьНомер,
	|	ДоверенностьДата,
	|	Получил,
	|	ПолучилПоДругомуДокументу,
	|	ДокументПодтверждающийПолномочия, 
	|	Контрагент  КАК Контрагент,
	|	Организация КАК Организация,
	|	ВалютаДокумента
	|ИЗ
	|	Документ.ИНАГРО_РасчетКорректировкиЦены КАК ИНАГРО_РасчетКорректировкиЦены
	|
	|ГДЕ
	|	ИНАГРО_РасчетКорректировкиЦены.Ссылка = &ТекущийДокумент";
	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", Ссылка);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВложенныйЗапросПоТоварам.Номенклатура,
	|	ВЫРАЗИТЬ(ВложенныйЗапросПоТоварам.Номенклатура.НаименованиеПолное КАК СТРОКА(1000)) КАК Товар,
	|	ВложенныйЗапросПоТоварам.Номенклатура.Код КАК Код,
	|	ВложенныйЗапросПоТоварам.Номенклатура.Артикул КАК Артикул,
	|	СУММА(ВложенныйЗапросПоТоварам.КоличествоТекущее) КАК Количество,
	|	ВложенныйЗапросПоТоварам.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	СУММА(ВЫБОР
	|			КОГДА ВложенныйЗапросПоТоварам.Цена = ВложенныйЗапросПоТоварам.ЦенаТекущая
	|				ТОГДА ВложенныйЗапросПоТоварам.Цена
	|			ИНАЧЕ ВложенныйЗапросПоТоварам.Цена - ВложенныйЗапросПоТоварам.ЦенаТекущая
	|		КОНЕЦ) КАК Цена,
	|	СУММА(ВложенныйЗапросПоТоварам.Сумма) КАК Сумма,
	|	СУММА(ВложенныйЗапросПоТоварам.СуммаНДС) КАК СуммаНДС,
	|	СУММА(1) КАК ID,
	|	ВложенныйЗапросПоТоварам.Склад,
	|	ВложенныйЗапросПоТоварам.Документ КАК Документ
	|ИЗ
	|	(ВЫБРАТЬ
	|		ИНАГРО_РасчетКорректировкиЦены.Номенклатура КАК Номенклатура,
	|		ИНАГРО_РасчетКорректировкиЦены.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|		ИНАГРО_РасчетКорректировкиЦены.Цена КАК Цена,
	|		ИНАГРО_РасчетКорректировкиЦены.СтавкаНДС КАК СтавкаНДС,
	|		СУММА(ИНАГРО_РасчетКорректировкиЦены.Количество) КАК Количество,
	|		СУММА(ИНАГРО_РасчетКорректировкиЦены.СуммаРаспределения) КАК Сумма,
	|		СУММА(ИНАГРО_РасчетКорректировкиЦены.СуммаНДСРаспределения) КАК СуммаНДС,
	|		ИНАГРО_РасчетКорректировкиЦены.Ссылка.ДокументОснование.Склад КАК Склад,
	|		ИНАГРО_РасчетКорректировкиЦены.Ссылка.ДокументОснование КАК Документ,
	|		СУММА(ИНАГРО_РасчетКорректировкиЦены.ЦенаТекущая) КАК ЦенаТекущая,
	|		СУММА(ИНАГРО_РасчетКорректировкиЦены.КоличествоТекущее) КАК КоличествоТекущее
	|	ИЗ
	|		Документ.ИНАГРО_РасчетКорректировкиЦены.СоставКорректировки КАК ИНАГРО_РасчетКорректировкиЦены
	|	ГДЕ
	|		ИНАГРО_РасчетКорректировкиЦены.Ссылка = &ТекущийДокумент
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ИНАГРО_РасчетКорректировкиЦены.Номенклатура,
	|		ИНАГРО_РасчетКорректировкиЦены.ЕдиницаИзмерения,
	|		ИНАГРО_РасчетКорректировкиЦены.Цена,
	|		ИНАГРО_РасчетКорректировкиЦены.СтавкаНДС,
	|		ИНАГРО_РасчетКорректировкиЦены.Ссылка.ДокументОснование.Склад,
	|		ИНАГРО_РасчетКорректировкиЦены.Ссылка.ДокументОснование) КАК ВложенныйЗапросПоТоварам
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапросПоТоварам.Номенклатура,
	|	ВложенныйЗапросПоТоварам.ЕдиницаИзмерения,
	|	ВложенныйЗапросПоТоварам.Номенклатура.Код,
	|	ВложенныйЗапросПоТоварам.Номенклатура.Артикул,
	|	ВложенныйЗапросПоТоварам.Склад,
	|	ВложенныйЗапросПоТоварам.Документ,
	|	ВЫРАЗИТЬ(ВложенныйЗапросПоТоварам.Номенклатура.НаименованиеПолное КАК СТРОКА(1000))
	|
	|УПОРЯДОЧИТЬ ПО
	|	ID
	|ИТОГИ ПО
	|	Документ";
	ЗапросТовары = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ИНАГРО_РасчетКорректировкиЦены_Накладная";
	
	Макет = ПолучитьМакет("ПФ_MXL_Накладная");                                    
	
	// печать производится на языке, указанном в настройках пользователя
	КодЯзыкаПечать = ПараметрыВывода.КодЯзыкаДляМногоязычныхПечатныхФорм;
	Макет.КодЯзыкаМакета = КодЯзыкаПечать; 
	
	Пока ЗапросТовары.Следующий() Цикл
			
		ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");   	
		НачалоЗаголовка = ОбщегоНазначенияБПВызовСервера.СформироватьЗаголовокДокумента(Шапка, НСтр("ru='Корректировка стоимостных показателей';uk='Коригування вартісних показників'",КодЯзыкаПечать),КодЯзыкаПечать);
		           						
		ОбластьМакета.Параметры.ТекстЗаголовка = НачалоЗаголовка + НСтр("ru=' к накладной ';uk=' до накладної'",КодЯзыкаПечать) + " № " + ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(Ссылка.ДокументОснование.Номер) + НСтр("ru=' от ';uk=' від '",КодЯзыкаПечать) + Формат(Ссылка.ДокументОснование.Дата, "ДФ='дд ММММ гггг';Л="
		+ Локализация.ОпределитьКодЯзыкаДляФормат(КодЯзыкаПечать)) + НСтр("ru=' г.';uk=' р.'",КодЯзыкаПечать);
		
		ТабДокумент.Вывести(ОбластьМакета);
		
		СведенияОКонтрагенте = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Шапка.Контрагент, Шапка.Дата,,,КодЯзыкаПечать);
		СведенияОбОрганизации = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Шапка.Организация, Шапка.Дата,,,КодЯзыкаПечать);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");
		ОбластьМакета.Параметры.Заполнить(Шапка);
		Если Ссылка.ВидОперации = Перечисления.ИНАГРО_ВидыОперацийКорректировкиСтоимости.ВходящиеДокументы Тогда
			ОбластьМакета.Параметры.ПредставлениеПоставщика = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОКонтрагенте, "ПолноеНаименование,",,КодЯзыкаПечать);	
			ОбластьМакета.Параметры.РеквизитыПоставщика =     ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОКонтрагенте, "ФактическийАдрес,Телефоны,",,КодЯзыкаПечать);
		Иначе	
			ОбластьМакета.Параметры.ПредставлениеПоставщика = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОбОрганизации, "ПолноеНаименование,",,КодЯзыкаПечать);	
			ОбластьМакета.Параметры.РеквизитыПоставщика =     ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОбОрганизации, "НомерСчета,Банк,МФО,/,ЮридическийАдрес,Телефоны,/,КодПоЕДРПОУ,КодПоДРФО,ИНН,НомерСвидетельства,/,ИнформацияОСтатусеПлательщикаНалогов,",,КодЯзыкаПечать);
		КонецЕсли; 
		ТабДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Покупатель");
		ОбластьМакета.Параметры.Заполнить(Шапка);
		Если Ссылка.ВидОперации = Перечисления.ИНАГРО_ВидыОперацийКорректировкиСтоимости.ВходящиеДокументы Тогда
			ОбластьМакета.Параметры.ПредставлениеПокупателя = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОбОрганизации, "ПолноеНаименование,",,КодЯзыкаПечать);
			ОбластьМакета.Параметры.РеквизитыПокупателя		= ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОбОрганизации,"НомерСчета,Банк,МФО,/,ЮридическийАдрес,Телефоны,/,КодПоЕДРПОУ,КодПоДРФО,ИНН,НомерСвидетельства,/,ИнформацияОСтатусеПлательщикаНалогов,",,КодЯзыкаПечать);
		Иначе	
			ОбластьМакета.Параметры.ПредставлениеПокупателя = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОКонтрагенте, "ПолноеНаименование,",,КодЯзыкаПечать);
			ОбластьМакета.Параметры.РеквизитыПокупателя		= ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОКонтрагенте,"ФактическийАдрес,Телефоны,",,КодЯзыкаПечать);
		КонецЕсли; 
		ТабДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Склад");
		ОбластьМакета.Параметры.Склад = Ссылка.ДокументОснование.Склад; 
		ТабДокумент.Вывести(ОбластьМакета); 
		
		ОбластьМакета = Макет.ПолучитьОбласть("Договор");
		ОбластьМакета.Параметры.Договор = Ссылка.ДоговорКонтрагента.НаименованиеДляПечати; 
		ТабДокумент.Вывести(ОбластьМакета);   
		                				
		// Выводим дополнительно информацию о договоре и сделке
		СписокДополнительныхПараметров = "ДоговорНаименованиеДляПечати,Сделка,Склад,АдресДоставки,";
		МассивСтруктурСтрок = ОбщегоНазначенияБПВызовСервера.ДополнительнаяИнформация(Шапка,СписокДополнительныхПараметров,КодЯзыкаПечать);
				
		ДопКолонка = Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
		Если ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул Тогда
			ВыводитьКоды = Истина;
			Колонка = "Артикул";
		ИначеЕсли ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Код Тогда
			ВыводитьКоды = Истина;
			Колонка = "Код";
		Иначе
			ВыводитьКоды = Ложь;
		КонецЕсли;  
		
		ОбластьШапки    = "ШапкаТаблицы";
		ОбластьСтроки   = "Строка";
		ОбластьИтого    = "Итого";
		ОбластьИтогоНДС = "ИтогоНДС";
		ОбластьВсегоСНДС = "ВсегоСНДС";
		
		// Вывести табличную часть
		ОбластьНомера = Макет.ПолучитьОбласть(ОбластьШапки+"|НомерСтроки");
		ОбластьДанных = Макет.ПолучитьОбласть(ОбластьШапки+"|Данные");  	
		ТабДокумент.Вывести(ОбластьНомера);
		
		Суффикс = "";
		
		Если Ссылка.ДокументОснование.СуммаВключаетНДС Тогда
			Суффикс  = Суффикс  + НСтр("ru=' с НДС ';uk=' з ПДВ '",КодЯзыкаПечать);
		Иначе	
			Суффикс  = Суффикс  + НСтр("ru=' без НДС ';uk=' без ПДВ '",КодЯзыкаПечать);
		КонецЕсли;
		
		
		ОбластьДанных.Параметры.Цена  = НСтр("ru='Цена';uk='Ціна'",КодЯзыкаПечать) + Суффикс;
		ОбластьДанных.Параметры.Сумма = НСтр("ru='Сумма';uk='Сума'",КодЯзыкаПечать)+ Суффикс;
		ТабДокумент.Присоединить(ОбластьДанных); 
		
		ОбластьНомера = Макет.ПолучитьОбласть(ОбластьСтроки+"|НомерСтроки");
		ОбластьДанных = Макет.ПолучитьОбласть(ОбластьСтроки+"|Данные");
		
		Сумма    		= 0;
		СуммаБезСкидки  = 0;
		СуммаСкидки 	= 0;
		СуммаНДС 		= 0;
		                				
		ВыборкаСтрокТовары = ЗапросТовары.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		НомерСтроки = 0;
		Пока ВыборкаСтрокТовары.Следующий() Цикл
			
			Если НЕ ЗначениеЗаполнено(ВыборкаСтрокТовары.Номенклатура) Тогда
				ТекстСообщения = НСтр("ru='В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.';uk='В одному з рядків не заповнене значення номенклатури - рядок під час друку буде пропущений.'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
				Продолжить;
			КонецЕсли;
			
			НомерСтроки = НомерСтроки + 1;
			ОбластьНомера.Параметры.НомерСтроки = НомерСтроки;
			ТабДокумент.Вывести(ОбластьНомера); 		
			
			ОбластьДанных.Параметры.Заполнить(ВыборкаСтрокТовары);
			ОбластьДанных.Параметры.Товар 		= СокрЛП(ВыборкаСтрокТовары.Товар);
			ТабДокумент.Присоединить(ОбластьДанных); 
			
			Сумма          = Сумма       + ВыборкаСтрокТовары.Сумма;
			СуммаНДС       = СуммаНДС    + ВыборкаСтрокТовары.СуммаНДС;   
			
		КонецЦикла;
		
		// Вывести Итого
		ОбластьНомера = Макет.ПолучитьОбласть(ОбластьИтого+"|НомерСтроки");
		ОбластьДанных = Макет.ПолучитьОбласть(ОбластьИтого+"|Данные"); 	
		ТабДокумент.Вывести(ОбластьНомера);
		
		ОбластьДанных.Параметры.Всего = ОбщегоНазначенияБПВызовСервера.ФорматСумм(Сумма);
		ТабДокумент.Присоединить(ОбластьДанных);
		
		// Вывести ИтогоНДС

		// НДС
		ОбластьНомера = Макет.ПолучитьОбласть(ОбластьИтогоНДС+"|НомерСтроки");
		ОбластьДанных = Макет.ПолучитьОбласть(ОбластьИтогоНДС+"|Данные"); 	
		ТабДокумент.Вывести(ОбластьНомера);
		ОбластьДанных.Параметры.ВсегоНДС = ОбщегоНазначенияБПВызовСервера.ФорматСумм(СуммаНДС);
		ОбластьДанных.Параметры.НДС      = ?(Ссылка.ДокументОснование.СуммаВключаетНДС, НСтр("ru='В том числе НДС:';uk='У тому числі ПДВ:'",КодЯзыкаПечать), НСтр("ru='Сумма НДС:';uk='Сума ПДВ:'",КодЯзыкаПечать));
		ТабДокумент.Присоединить(ОбластьДанных);
		
		Если НЕ Ссылка.ДокументОснование.СуммаВключаетНДС Тогда
			Область = Макет.ПолучитьОбласть(ОбластьВсегоСНДС);
			Область.Параметры.ВсегоСНДС =  Сумма + СуммаНДС;
			ТабДокумент.Присоединить(Область);
		КонецЕсли;
		
		// Вывести Сумму прописью
		ОбластьМакета = Макет.ПолучитьОбласть("СуммаПрописью");
		СуммаКПрописи = Сумма +?(Ссылка.ДокументОснование.СуммаВключаетНДС, 0, СуммаНДС);  
		ОбластьМакета.Параметры.ИтоговаяСтрока = НСтр("ru='Всего наименований ';uk='Всього найменувань '",КодЯзыкаПечать) + ВыборкаСтрокТовары.Количество() + "," +
		НСтр("ru=' на сумму ';uk=' на суму '",КодЯзыкаПечать)  + ОбщегоНазначенияБПВызовСервера.ФорматСумм(СуммаКПрописи, Шапка.ВалютаДокумента) + ".";
		
		ОбластьМакета.Параметры.СуммаПрописью  = ОбщегоНазначенияБПВызовСервера.СформироватьСуммуПрописью(СуммаКПрописи, Шапка.ВалютаДокумента,КодЯзыкаПечать)
		+   Символы.ПС + НСтр("ru='В т.ч. НДС: ';uk='У т.ч. ПДВ: '",КодЯзыкаПечать) + ОбщегоНазначенияБПВызовСервера.СформироватьСуммуПрописью(СуммаНДС, Шапка.ВалютаДокумента, КодЯзыкаПечать);
		ТабДокумент.Вывести(ОбластьМакета);
		
		Если ЗначениеЗаполнено(Шапка.МестоСоставленияДокумента) Тогда 
			ОбластьМакета = Макет.ПолучитьОбласть("МестоСоставления");
			ОбластьМакета.Параметры.МестоСоставления = СокрЛП(Шапка.МестоСоставленияДокумента);
			ТабДокумент.Вывести(ОбластьМакета);
		КонецЕсли; 
		
		// Вывести подписи
		ДанныеПредставителя = ОбщегоНазначенияБПВызовСервера.ДанныеФизЛица(Шапка.Организация,Шапка.ПредставительПоставщика, Шапка.Дата);
		ДанныеФизЛица 		= ИНАГРО_ЗарплатаКадрыРасширенный.ДанныеФизЛица(Шапка.Организация, Шапка.ПредставительПоставщика, Шапка.Дата);
		ДолжностьПредставителя = СокрЛП(ДанныеФизЛица.Должность);
		
		ДолжностьФИОПредставителя = ?(ЗначениеЗаполнено(ДолжностьПредставителя),ДолжностьПредставителя + " ","") + 
		?(ДанныеПредставителя.Фамилия = Неопределено,"",ДанныеПредставителя.Фамилия + " ") + 
		?(ДанныеПредставителя.Имя = Неопределено,"",ДанныеПредставителя.Имя + " ") +
		?(ДанныеПредставителя.Отчество = Неопределено,"",ДанныеПредставителя.Отчество);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
		ТабДокумент.Вывести(ОбластьМакета);
		
		ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		
	КонецЦикла;

	ТабДокумент.АвтоМасштаб = Истина;
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	КонецЦикла;	
	Возврат ТабДокумент;
	
КонецФункции 

Функция ПолучитьДополнительныеРеквизитыДляРеестра() Экспорт
	
	Результат = Новый Структура;	
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти 

#Область ОбработчикиСобытий

Процедура ОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка)
	
	Если ВидФормы <> "ФормаДокумента"
		И ВидФормы <> "ФормаОбъекта" Тогда
		Возврат;
	КонецЕсли;

	ВидОперации = Неопределено; 

	Если Параметры.Свойство("Ключ") И ЗначениеЗаполнено(Параметры.Ключ) Тогда
		ВидОперации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Параметры.Ключ, "ВидОперации");
	КонецЕсли;

	// Если документ копируется, то вид формы получаем из копируемого документа.
	Если НЕ ЗначениеЗаполнено(ВидОперации) Тогда
		Если Параметры.Свойство("ЗначениеКопирования")
			И ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
			ВидОперации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
				Параметры.ЗначениеКопирования, "ВидОперации");
		КонецЕсли;
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(ВидОперации) Тогда
		Если Параметры.Свойство("ЗначенияЗаполнения") 
			И ТипЗнч(Параметры.ЗначенияЗаполнения) = Тип("Структура") Тогда
			Если Параметры.ЗначенияЗаполнения.Свойство("ВидОперации") Тогда
				ВидОперации = Параметры.ЗначенияЗаполнения.ВидОперации;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ВидОперации) Тогда
		Если Параметры.Свойство("Основание")
			И ЗначениеЗаполнено(Параметры.Основание) Тогда
			ВидОперации = ОпределитьВидОперацииПоДокументуОснованию(Параметры.Основание);
		КонецЕсли;
	КонецЕсли;

	СтандартнаяОбработка = Ложь;
	ФормыИНАГРО_РасчетКорректировкиЦены = ПолучитьСоответствиеВидовОперацийФормам();
	ВыбраннаяФорма = ФормыИНАГРО_РасчетКорректировкиЦены[ВидОперации];
	Если ВыбраннаяФорма = Неопределено Тогда
		ВыбраннаяФорма = "ФормаДокумента";
	КонецЕсли;
	
КонецПроцедуры 

#КонецОбласти 

#Область СлужебныеПроцедурыИФункции

Функция ПолучитьСоответствиеВидовОперацийФормам() Экспорт

	ФормыИНАГРО_РасчетКорректировкиЦены = Новый Соответствие;
	
	ФормыИНАГРО_РасчетКорректировкиЦены.Вставить(Перечисления.ИНАГРО_ВидыОперацийКорректировкиСтоимости.ВходящиеДокументы,  "ФормаДокументаОбщая");
	ФормыИНАГРО_РасчетКорректировкиЦены.Вставить(Перечисления.ИНАГРО_ВидыОперацийКорректировкиСтоимости.ИсходящиеДокументы, "ФормаДокументаОбщая");
		
	Возврат ФормыИНАГРО_РасчетКорректировкиЦены;

КонецФункции 

Функция ОпределитьВидОперацииПоДокументуОснованию(Основание) Экспорт

	Результат = Перечисления.ИНАГРО_ВидыОперацийКорректировкиСтоимости.ВходящиеДокументы;

	Возврат Результат;

КонецФункции

Функция ПолучитьФиксированныйМассивВидовОпераций() Экспорт

	МассивВидовОпераций = Новый Массив;
	СписокВидовОпераций = Новый СписокЗначений;
	
	ЗначенияПеречисления = Метаданные.Перечисления.ИНАГРО_ВидыОперацийКорректировкиСтоимости.ЗначенияПеречисления;
	Для Каждого ЗначениеПеречисления Из ЗначенияПеречисления Цикл
		ТекущийВидОперации = Перечисления.ИНАГРО_ВидыОперацийКорректировкиСтоимости[ЗначениеПеречисления.Имя];
		МассивВидовОпераций.Добавить(ТекущийВидОперации);
	КонецЦикла;
		
	Возврат Новый ФиксированныйМассив(МассивВидовОпераций);

КонецФункции

#КонецОбласти 

#КонецЕсли