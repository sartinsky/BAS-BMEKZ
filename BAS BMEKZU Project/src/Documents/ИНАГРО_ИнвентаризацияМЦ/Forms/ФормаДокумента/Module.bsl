#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	Если Параметры.Ключ.Пустая() Тогда
		Объект.Дата = ТекущаяДатаСеанса();
		ПодготовитьФормуНаСервере();
	КонецЕсли;
	
	// Уведомим о появлении функционала рабочей даты
	ЭтаФорма.НастройкиПредупреждений = ОбщегоНазначенияБП.НастройкиПредупрежденийОбИзменениях("РабочаяДатаИзДокумента");
	 
	// Показываем, если это новый документ и сама рабочая дата еще не установлена.
	ЭтаФорма.НастройкиПредупреждений.РабочаяДатаИзДокумента = ЭтаФорма.НастройкиПредупреждений.РабочаяДатаИзДокумента
	 	И ЭтаФорма.Параметры.Ключ.Пустая()
	  	И НЕ ЗначениеЗаполнено(БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("РабочаяДата"));
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
КонецПроцедуры 

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ИсточникВыбора.ИмяФормы = "РегистрСведений.СоставКомиссий.Форма.ФормаВыбора" Тогда
		ЗаполнитьЗначенияСвойств(Объект, ВыбранноеЗначение);
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)

	ОбщегоНазначенияБПКлиент.ОбработкаОповещенияФормыДокумента(ЭтаФорма, Объект.Ссылка, ИмяСобытия, Параметр, Источник);

КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	ПодготовитьФормуНаСервере();
	
КонецПроцедуры 

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	УстановитьЗаголовокФормы();
	
	ЗаполнитьДобавленныеКолонкиТаблиц();
	
	УстановитьСостояниеДокумента();

КонецПроцедуры 

#КонецОбласти 

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)

	Если НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДатаДокумента) Тогда
		// Изменение времени не влияет на поведение документа.
		ТекущаяДатаДокумента = Объект.Дата;
		Возврат;
	КонецЕсли;

	// Общие проверки условий по датам.
	ТребуетсяВызовСервера = ОбщегоНазначенияБПКлиент.ТребуетсяВызовСервераПриИзмененииДатыДокумента(Объект.Дата, 
		ТекущаяДатаДокумента);

	// Запомним новую дату документа.
	ТекущаяДатаДокумента = Объект.Дата;

КонецПроцедуры 

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)

	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		ОрганизацияПриИзмененииНаСервере();
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()

	ЗаполнениеДокументов.ПриИзмененииЗначенияОрганизации(Объект, Пользователи.ТекущийПользователь());
	
КонецПроцедуры 

&НаКлиенте
Процедура ОтветственноеЛицоОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Объект.Товары.Количество() > 0 Тогда
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ОтветственноеЛицо", ВыбранноеЗначение);
		ДополнительныеПараметры.Вставить("СтароеОтветственноеЛицо", Объект.ОтветственноеЛицо);
				
		ТекстВопроса = НСтр("ru='Перед заполнением табличная часть будет очищена!';uk='Перед заповненням таблична частина буде очищена!'");
		Оповещение = Новый ОписаниеОповещения("ОтветственноеЛицоОбработкаВыбораЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена, , КодВозвратаДиалога.ОК);
        Возврат; 
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОтветственноеЛицоОбработкаВыбораЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    	
	Если РезультатВопроса <> КодВозвратаДиалога.ОК Тогда
		Объект.ОтветственноеЛицо = ДополнительныеПараметры.СтароеОтветственноеЛицо;
		Возврат;		
	Иначе 		
		Объект.Товары.Очистить();
		Объект.ОтветственноеЛицо = ДополнительныеПараметры.ОтветственноеЛицо;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования,ЭтотОбъект,"Объект.Комментарий");
	
КонецПроцедуры

#КонецОбласти  

#Область ОбработчикиСобытийЭлементовТаблицыФормыТовары

&НаКлиенте
Процедура ТоварыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если НЕ ОтменаРедактирования Тогда
		Элемент.ТекущиеДанные.Отклонение = Элемент.ТекущиеДанные.Количество 
											- Элемент.ТекущиеДанные.КоличествоУчет;
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)

	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	ДанныеСтрокиТаблицы = Новый Структура(
		"Номенклатура, НазначениеИспользования, НазначениеИспользованияНовое,
		|ЕдиницаИзмерения, Коэффициент,
		|Количество, КоличествоУчет,
		|Цена, Сумма, СуммаУчет,
		|Отклонение");
	
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, ТекущиеДанные);
	
	ДанныеОбъекта = Новый Структура("Дата, Организация, Склад");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
	ТоварыНоменклатураПриИзмененииНаСервере(ДанныеСтрокиТаблицы, ДанныеОбъекта);
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтрокиТаблицы);
	 
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ТоварыНоменклатураПриИзмененииНаСервере(СтрокаТабличнойЧасти, Знач ДанныеОбъекта)
	
	СведенияОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОНоменклатуре(
	СтрокаТабличнойЧасти.Номенклатура, ДанныеОбъекта);
	
	Если СведенияОНоменклатуре = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаТабличнойЧасти.ЕдиницаИзмерения		= СведенияОНоменклатуре.БазоваяЕдиницаИзмерения;
	СтрокаТабличнойЧасти.Коэффициент			= СведенияОНоменклатуре.Коэффициент;
	
	Если СтрокаТабличнойЧасти.Количество = 0 Тогда
		
		Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.НазначениеИспользования) Тогда
			РеквизитыНазначенияИспользования = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			СтрокаТабличнойЧасти.НазначениеИспользования, "Количество, Коэффициент");
			
			СтрокаТабличнойЧасти.Количество = РеквизитыНазначенияИспользования.Количество * РеквизитыНазначенияИспользования.Коэффициент / СтрокаТабличнойЧасти.Коэффициент;
		КонецЕсли;
		
	КонецЕсли;
		
	СтрокаТабличнойЧасти.Цена = 0;
	
	РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
	
	ЗаполнитьДобавленныеКолонкиСтрокиТаблицыТовары(СтрокаТабличнойЧасти);
	
КонецПроцедуры 

&НаКлиенте
Процедура ТоварыНазначениеИспользованияПриИзменении(Элемент)

	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;

	Если НЕ ЗначениеЗаполнено(ТекущиеДанные.Номенклатура) 
		И ЗначениеЗаполнено(ТекущиеДанные.НазначениеИспользования)
		ИЛИ ЗначениеЗаполнено(ТекущиеДанные.НазначениеИспользования) Тогда
		ТоварыНоменклатураПриИзменении(Элемент);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ТоварыЕдиницаИзмеренияПриИзменении(Элемент)

	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	ДанныеСтрокиТаблицы = Новый Структура(
		"Номенклатура, СчетУчетаБУ, ЕдиницаИзмерения, Коэффициент,
		|Количество, КоличествоУчет,
		|Цена, ЦенаВРознице,
		|Сумма, СуммаУчет,
		|Отклонение");
		
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, ТекущиеДанные);
	
	ТоварыЕдиницаИзмеренияПриИзмененииНаСервере(ДанныеСтрокиТаблицы);
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтрокиТаблицы);

КонецПроцедуры 

&НаСервереБезКонтекста
Процедура ТоварыЕдиницаИзмеренияПриИзмененииНаСервере(СтрокаТабличнойЧасти)
	
	ОбработкаТабличныхЧастей.ЗаполнитьКоэффициентТабЧасти(СтрокаТабличнойЧасти);
	
	СтрокаТабличнойЧасти.Сумма = РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
	
	ЗаполнитьДобавленныеКолонкиСтрокиТаблицыТовары(СтрокаТабличнойЧасти);

КонецПроцедуры 

&НаКлиенте
Процедура ТоварыКоличествоПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	СтрокаТабличнойЧасти.Сумма = РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЦенаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКоличествоУчетПриИзменении(Элемент)
	
	Элементы.Товары.ТекущиеДанные.СуммаУчет = Элементы.Товары.ТекущиеДанные.Цена 
											* Элементы.Товары.ТекущиеДанные.КоличествоУчет;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	СтрокаТабличнойЧасти.Цена = ?(СтрокаТабличнойЧасти.Количество = 0, 0, 
									СтрокаТабличнойЧасти.Сумма / СтрокаТабличнойЧасти.Количество);
	
КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Заполнить(Команда)
	
	Если Объект.Товары.Количество() > 0 Тогда
		
		ТекстВопроса = НСтр("ru='Перед заполнением табличная часть будет очищена. Заполнить?';uk='Перед заповненням таблична частина буде очищена. Заповнити?'");
		ПоказатьВопрос(Новый ОписаниеОповещения("ЗаполнитьЗавершение", ЭтотОбъект), ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да, Заголовок);
        Возврат; 
		
	КонецЕсли;
	
    ЗаполнитьНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
        Возврат;
		
	Иначе Объект.Товары.Очистить();
		
	КонецЕсли;
	
	ЗаполнитьНаСервере();

КонецПроцедуры

// Заполняет табличную часть данными регистра бухгалтерии
//	Используется процедура из модуля объекта
//
// Параметры
//  Нет
//
&НаСервере
Процедура ЗаполнитьНаСервере()
		
	ТабличнаяЧасть = Объект.Товары;    
		
	ПорядокСубконто = Новый Массив();
	ПорядокСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.РаботникиОрганизаций);
	ПорядокСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НазначенияИспользования);
	
	ВедетсяСуммовойУчет = БухгалтерскийУчетВызовСервераПовтИсп.ВедетсяСуммовойУчетПоСкладам(ПланыСчетов.Хозрасчетный.МалоценныеАктивыВЭксплуатации);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МОЛ",	 			 Объект.ОтветственноеЛицо);
	Запрос.УстановитьПараметр("КонецПериода",  		 Объект.Дата);
	Запрос.УстановитьПараметр("Организация",   		 Объект.Организация);
	Запрос.УстановитьПараметр("ПорядокСубконто", 	 ПорядокСубконто);
	Запрос.УстановитьПараметр("СчетУчетаБУ",	 	 ПланыСчетов.Хозрасчетный.МалоценныеАктивыВЭксплуатации);
	
	ТекстЗапросаИнвентаризация = 
	   "ВЫБРАТЬ
	   |	ХозрасчетныйОстатки.Счет КАК Счет,
	   |	ХозрасчетныйОстатки.Субконто2 КАК НазначениеИспользования,
	   |	ХозрасчетныйОстатки.Счет.Порядок КАК Порядок,
	   |	ХозрасчетныйОстатки.Субконто2.ЕдиницаИзмерения КАК БазоваяЕдиницаИзмерения,
	   |	ХозрасчетныйОстатки.СуммаОстаток КАК Сумма,
	   |	ХозрасчетныйОстатки.КоличествоОстаток КАК Количество,
	   |	ХозрасчетныйОстаткиСумма.СуммаОстаток КАК СуммаВсего,
	   |	ХозрасчетныйОстаткиСумма.КоличествоОстаток КАК КоличествоВсего,
	   |	ХозрасчетныйОстатки.Субконто2.Владелец КАК Номенклатура
	   |ИЗ
	   |	РегистрБухгалтерии.Хозрасчетный.Остатки(
	   |			&КонецПериода,
	   |			Счет В (&СчетУчетаБУ),
	   |			&ПорядокСубконто,
	   |			Организация В (&Организация)
	   |				И Субконто1 В (&МОЛ)) КАК ХозрасчетныйОстатки
	   |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.Остатки(&КонецПериода, Счет В (&СчетУчетаБУ), &ПорядокСубконто, Организация В (&Организация)) КАК ХозрасчетныйОстаткиСумма
	   |		ПО ХозрасчетныйОстатки.Счет = ХозрасчетныйОстаткиСумма.Счет
	   |			И ХозрасчетныйОстатки.Субконто1 = ХозрасчетныйОстаткиСумма.Субконто1
	   |
	   |УПОРЯДОЧИТЬ ПО
	   |	Порядок";
	
	Запрос.Текст =ТекстЗапросаИнвентаризация;

	Выборка   = Запрос.Выполнить().Выбрать();

	ДатаДока  = Объект.Дата;

	Пока Выборка.Следующий() Цикл
		
		Если Выборка.Количество = NULL Тогда
			Продолжить;
		КонецЕсли;
		
		Если (НЕ ВедетсяСуммовойУчет) И Выборка.КоличествоВсего = NULL Тогда
			Продолжить;
		КонецЕсли;
		
		Если Выборка.Количество <= 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если (НЕ ВедетсяСуммовойУчет) И Выборка.КоличествоВсего <= 0 Тогда
			Продолжить;
		КонецЕсли;

		СтрокаТабличнойЧасти = ТабличнаяЧасть.Добавить();

		СтрокаТабличнойЧасти.Номенклатура     = Выборка.Номенклатура;
		СтрокаТабличнойЧасти.НазначениеИспользования  = Выборка.НазначениеИспользования;
		СтрокаТабличнойЧасти.Количество       = Выборка.Количество;
		СтрокаТабличнойЧасти.КоличествоУчет   = СтрокаТабличнойЧасти.Количество;

		СтрокаТабличнойЧасти.ЕдиницаИзмерения = Выборка.БазоваяЕдиницаИзмерения;
		СтрокаТабличнойЧасти.Коэффициент      = 1;

		СтрокаТабличнойЧасти.СуммаУчет        = Выборка.Сумма;
		СтрокаТабличнойЧасти.Сумма            = СтрокаТабличнойЧасти.СуммаУчет;
		СтрокаТабличнойЧасти.Цена             = СтрокаТабличнойЧасти.Сумма / СтрокаТабличнойЧасти.Количество;

	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ВыбратьСоставКомиссии(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимВыбора", Истина);

	ПараметрыФормы.Вставить("Отбор", Новый Структура("Организация", Объект.Организация));
	ОткрытьФорму("РегистрСведений.СоставКомиссий.Форма.ФормаВыбора", ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры 

#КонецОбласти 

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ПодготовитьФормуНаСервере()
	
	ТекущаяДатаДокумента	= Объект.Дата;
	
	ВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	
	УстановитьЗаголовокФормы();	

	ЗаполнитьДобавленныеКолонкиТаблиц();

	УстановитьСостояниеДокумента();
	
КонецПроцедуры 

&НаСервере
Процедура УстановитьЗаголовокФормы()
	
	ОбъектФормы = ЭтаФорма.Объект;

	ТекстЗаголовка = НСтр("ru='Инвентаризация малоценных активов в эксплуатации (сч. МЦ)';uk='Інвентаризація малоцінних активів в експлуатації (рах. МЦ)'");
	
	Если ЗначениеЗаполнено(ОбъектФормы.Ссылка) Тогда
		ТекстЗаголовка = ТекстЗаголовка + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru=' %1 от %2';uk=' %1 від %2'"), ОбъектФормы.Номер, ОбъектФормы.Дата);
	Иначе
		ТекстЗаголовка = ТекстЗаголовка + НСтр("ru=' (создание)';uk=' (створення)'");
	КонецЕсли;
	
	ЭтаФорма.Заголовок = ТекстЗаголовка;

КонецПроцедуры 

&НаСервере
Процедура УстановитьСостояниеДокумента()
	
	СостояниеДокумента = ОбщегоНазначенияБП.СостояниеДокумента(Объект);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДобавленныеКолонкиТаблиц()

	Для каждого СтрокаТаблицы Из Объект.Товары Цикл
		ЗаполнитьДобавленныеКолонкиСтрокиТаблицыТовары(СтрокаТаблицы);
	КонецЦикла;

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьДобавленныеКолонкиСтрокиТаблицыТовары(СтрокаТаблицы)

	СтрокаТаблицы.Отклонение = СтрокаТаблицы.Количество - СтрокаТаблицы.КоличествоУчет;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция РассчитатьСуммуТабЧасти(Знач СтрокаТабличнойЧасти)
	
	ЦенаУчет = Неопределено;
	
	Если СтрокаТабличнойЧасти.КоличествоУчет <> 0 Тогда
		ЦенаУчет = СтрокаТабличнойЧасти.СуммаУчет / СтрокаТабличнойЧасти.КоличествоУчет;
	КонецЕсли;
	
	Если ЦенаУчет <> Неопределено И СтрокаТабличнойЧасти.Цена = Окр(ЦенаУчет, 2) Тогда
		Сумма = СтрокаТабличнойЧасти.СуммаУчет * СтрокаТабличнойЧасти.Количество / СтрокаТабличнойЧасти.КоличествоУчет;
	Иначе
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
		Сумма = СтрокаТабличнойЧасти.Сумма;
	КонецЕсли;
	
	Возврат Сумма;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункцииБСП

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти