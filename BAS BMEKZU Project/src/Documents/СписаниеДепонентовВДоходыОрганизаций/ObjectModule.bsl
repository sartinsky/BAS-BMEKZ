#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

// Подсистема "Управление доступом"

// Процедура ЗаполнитьНаборыЗначенийДоступа по свойствам объекта заполняет наборы значений доступа
// в таблице с полями:
//    НомерНабора     - Число                                     (необязательно, если набор один),
//    ВидДоступа      - ПланВидовХарактеристикСсылка.ВидыДоступа, (обязательно),
//    ЗначениеДоступа - Неопределено, СправочникСсылка или др.    (обязательно),
//    Чтение          - Булево (необязательно, если набор для всех прав) устанавливается для одной строки набора,
//    Добавление      - Булево (необязательно, если набор для всех прав) устанавливается для одной строки набора,
//    Изменение       - Булево (необязательно, если набор для всех прав) устанавливается для одной строки набора,
//    Удаление        - Булево (необязательно, если набор для всех прав) устанавливается для одной строки набора,
//
//  Вызывается из процедуры УправлениеДоступомСлужебный.ЗаписатьНаборыЗначенийДоступа(),
// если объект зарегистрирован в "ПодпискаНаСобытие.ЗаписатьНаборыЗначенийДоступа" и
// из таких же процедур объектов, у которых наборы значений доступа зависят от наборов этого
// объекта (в этом случае объект зарегистрирован в "ПодпискаНаСобытие.ЗаписатьЗависимыеНаборыЗначенийДоступа").
//
// Параметры:
//  Таблица      - ТабличнаяЧасть,
//                 РегистрСведенийНаборЗаписей.НаборыЗначенийДоступа,
//                 ТаблицаЗначений, возвращаемая УправлениеДоступом.ТаблицаНаборыЗначенийДоступа().
//
Процедура ЗаполнитьНаборыЗначенийДоступа(Таблица) Экспорт
	
	ЗарплатаКадры.ЗаполнитьНаборыПоОрганизацииИФизическимЛицам(ЭтотОбъект, Таблица, "Организация", "Работники.ФизическоеЛицо");
	
КонецПроцедуры

// Подсистема "Управление доступом"

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ЗарплатаКадры.ОтключитьБизнесЛогикуПриЗаписи(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	// Посчитать суммы документа и записать ее в соответствующий реквизит шапки
	СуммаДокумента = Работники.Итог("Сумма");

КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	Запрос=Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Ссылка); 
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	Депоненты.Ссылка.Организация	КАК Организация,
	|	Депоненты.Ссылка.Дата			КАК Период,
	|	Депоненты.ФизическоеЛицо		КАК ФизическоеЛицо,
	|	Депоненты.Ведомость				КАК Ведомость,
	|	Депоненты.Сумма					КАК Сумма
	|        
	|ИЗ	Документ."+Метаданные().Имя+".Работники КАК Депоненты
	|
	|ГДЕ Депоненты.Ссылка = &Ссылка
	|
	|";
	
	
	Запрос.Текст = ТекстЗапроса;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		// 1. ВзаиморасчетыСДепонентамиОрганизаций
		НоваяСтрока = Движения.ВзаиморасчетыСДепонентами.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		НоваяСтрока.ВидДвижения	= ВидДвиженияНакопления.Расход;
		
		
		// 2. проводки, надо закрыть 662 счет
		Проводка = Движения.Хозрасчетный.Добавить();
		
		Проводка.Период      = Дата;
		Проводка.Активность  = Истина;
		Проводка.Организация = Организация;
		Проводка.Содержание  = НСтр("ru='Списание депонентов на доходы';uk='Списання депонентів на доходи'", Локализация.КодЯзыкаИнформационнойБазы());
		Проводка.Сумма       = Выборка.Сумма;
		
		Проводка.СчетДт      = ПланыСчетов.Хозрасчетный.РасчетыПоДепонентам;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "РаботникиОрганизаций", Выборка.ФизическоеЛицо);
		
		Проводка.СчетКт      = СчетУчетаРасходов;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, Субконто1);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, Субконто2);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3, Субконто3);

		Если Проводка.СчетКт.НалоговыйУчет тогда
			Проводка.НалоговоеНазначениеКт = НалоговоеНазначениеДоходов;
			Проводка.СуммаНУКт = Выборка.Сумма;
		КонецЕсли;	
		
	КонецЦикла;
	
	Движения.ВзаиморасчетыСДепонентами.Записывать = Истина;
	Движения.Хозрасчетный.Записывать = Истина;
	
КонецПроцедуры 

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Процедура Автозаполнение() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("парамДата",	Дата);
	Запрос.УстановитьПараметр("парамНачало", СписаниеДепонентаНаДату);
	Запрос.УстановитьПараметр("парамОрганизация", Организация);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Взаиморасчеты.ФизическоеЛицо	КАК ФизическоеЛицо,
	|	Взаиморасчеты.Ведомость			КАК Ведомость,
	|	Взаиморасчеты.СуммаОстаток		КАК Сумма
	|ИЗ
	|	РегистрНакопления.ВзаиморасчетыСДепонентами.Остатки( &парамДата,
	|			Организация = &парамОрганизация	И	Ведомость.ПериодРегистрации <= &парамНачало
	|    ) КАК Взаиморасчеты
	|";
	
	Запрос.Текст = ТекстЗапроса;
	Работники.Загрузить( Запрос.Выполнить().Выгрузить() );
	
	
КонецПроцедуры //  Автозаполнение

#КонецЕсли