#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	
	Если Параметры.Ключ.Пустая() Тогда
		ПодготовитьФормуНаСервере();
	КонецЕсли;
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	ПодготовитьФормуНаСервере();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ОбновитьДокументИБПослеЗаполнения" И Параметр.Найти(Объект.Ссылка) <> Неопределено Тогда
		Прочитать();
	Иначе
		ОбщегоНазначенияБПКлиент.ОбработкаОповещенияФормыДокумента(ЭтаФорма, Объект.Ссылка, ИмяСобытия, Параметр, Источник);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ЗаполнитьДобавленныеКолонкиТаблиц();
	
	УстановитьСостояниеДокумента();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗаполнитьПриобретения(Команда)


	Если Объект.Приобретения.Количество() > 0 Тогда
		ТекстВопроса = НСтр("ru='Перед заполнением табличная часть будет очищена. Заполнить?';uk='Перед заповненням таблична частина буде очищена. Заповнити?'");
		Оповещение = Новый ОписаниеОповещения("ЗаполнитьПриобретенияПослеЗакрытияВопроса", ЭтотОбъект, Параметры);

		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	Иначе
		ЗаполнитьПриобретенияНаСервере();
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПродажи(Команда)

	
	Если Объект.Продажи.Количество() > 0 Тогда
		
		ТекстВопроса = НСтр("ru='Перед заполнением табличная часть будет очищена. Заполнить?';uk='Перед заповненням таблична частина буде очищена. Заповнити?'");
		
		Оповещение = Новый ОписаниеОповещения("ЗаполнитьПродажиПослеЗакрытияВопроса", ЭтотОбъект, Параметры);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	Иначе
		
		ЗаполнитьПродажиНаСервере();
	КонецЕсли;
	
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьВозвраты(Команда)

	
	Если Объект.Возвраты.Количество() > 0 Тогда
		ТекстВопроса = НСтр("ru='Перед заполнением табличная часть будет очищена. Заполнить?';uk='Перед заповненням таблична частина буде очищена. Заповнити?'");
		Оповещение = Новый ОписаниеОповещения("ЗаполнитьВозвратыПослеЗакрытияВопроса", ЭтотОбъект, Параметры);

		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	Иначе
		ЗаполнитьВозвратыНаСервере();
	КонецЕсли; 
	
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	Если НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДатаДокумента) Тогда
		// Изменение времени не влияет на поведение документа.
		ТекущаяДатаДокумента = Объект.Дата;
		Возврат;
	КонецЕсли;

	ДатаПриИзмененииНаСервере();

	// Запомним новую дату документа.
	ТекущаяДатаДокумента = Объект.Дата;
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		ОрганизацияПриИзмененииНаСервере();
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТабличнойЧастиПриобретения

&НаКлиенте
Процедура ПриобретенияКонтрагентПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Приобретения.ТекущиеДанные;
	
	ДанныеСтроки = ДанныеСтрокиПриобретения(СтрокаТабличнойЧасти);
	
	ПриобретенияКонтрагентПриИзмененииНаСервере(ДанныеСтроки, ДанныеОбъекта());
	
	ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ДанныеСтроки);
	
КонецПроцедуры

&НаСервере
Процедура ПриобретенияКонтрагентПриИзмененииНаСервере(ДанныеСтроки, ДанныеОбъекта)
	
	БухгалтерскийУчетПереопределяемый.УстановитьДоговорКонтрагента(
		ДанныеСтроки.ДоговорКонтрагента, ДанныеСтроки.Контрагент, ДанныеОбъекта.Организация, 
		ДанныеОбъекта.РазрешенныеВидыДоговоровПриобретения);
	
	ПриобретенияДоговорКонтрагентаПриИзмененииНаСервере(ДанныеСтроки, ДанныеОбъекта);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриобретенияДоговорКонтрагентаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Приобретения.ТекущиеДанные;
	
	ДанныеСтроки = ДанныеСтрокиПриобретения(СтрокаТабличнойЧасти);
	
	ПриобретенияДоговорКонтрагентаПриИзмененииНаСервере(ДанныеСтроки, ДанныеОбъекта());
	
	ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ДанныеСтроки);
	
КонецПроцедуры

&НаСервере
Процедура ПриобретенияДоговорКонтрагентаПриИзмененииНаСервере(ДанныеСтроки, ДанныеОбъекта)
	
	ДанныеСтроки.ВалютаВзаиморасчетов = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеСтроки.ДоговорКонтрагента, "ВалютаВзаиморасчетов");
	
	ОпределитьФлагиРегистрацияПо(ДанныеСтроки, Истина);
	
	Документы.РегистрацияАвансовВНалоговомУчете.УстановитьКурсВзаиморасчетов(ДанныеСтроки, ДанныеОбъекта);
	Документы.РегистрацияАвансовВНалоговомУчете.РассчитатьСуммуВзаиморасчетовРеглВСтрокеТабЧасти(ДанныеСтроки);
	
	Документы.РегистрацияАвансовВНалоговомУчете.ЗаполнитьСчетаУчетаВСтрокеТабЧасти(ДанныеСтроки, ДанныеОбъекта, "Приобретения");
	
	РассчитатьСуммуНДСВСтрокеТабЧастиПриобретения(ДанныеСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриобретенияВидОперацииПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Приобретения.ТекущиеДанные;
	
	ДанныеСтроки = ДанныеСтрокиПриобретения(СтрокаТабличнойЧасти);
	
	ПриобретенияВидОперацииПриИзмененииНаСервере(ДанныеСтроки);
	
	ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ДанныеСтроки);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПриобретенияВидОперацииПриИзмененииНаСервере(ДанныеСтроки);
	
	ОпределитьФлагиРегистрацияПо(ДанныеСтроки, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриобретенияСуммаВзаиморасчетовПриИзменении(Элемент)
	
	ПриобретенияПересчитатьСуммы(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриобретенияПересчитатьСуммы(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Приобретения.ТекущиеДанные;
	
	ДанныеСтроки = ДанныеСтрокиПриобретения(СтрокаТабличнойЧасти);
	
	ПриобретенияПересчитатьСуммыНаСервере(ДанныеСтроки);
	
	ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ДанныеСтроки);
	
КонецПроцедуры

&НаСервере
Процедура ПриобретенияПересчитатьСуммыНаСервере(ДанныеСтроки)
	
	Документы.РегистрацияАвансовВНалоговомУчете.РассчитатьСуммуВзаиморасчетовРеглВСтрокеТабЧасти(ДанныеСтроки);
	РассчитатьСуммуНДСВСтрокеТабЧастиПриобретения(ДанныеСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриобретенияКурсВзаиморасчетовПриИзменении(Элемент)
	
	ПриобретенияПересчитатьСуммы(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриобретенияКратностьВзаиморасчетовПриИзменении(Элемент)
	
	ПриобретенияПересчитатьСуммы(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриобретенияСтавкаНДСПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Приобретения.ТекущиеДанные;
	
	ДанныеСтроки = ДанныеСтрокиПриобретения(СтрокаТабличнойЧасти);
	
	ПриобретенияСтавкаНДСПриИзмененииНаСервере(ДанныеСтроки);
	
	ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ДанныеСтроки);
	
КонецПроцедуры

&НаСервере
Процедура ПриобретенияСтавкаНДСПриИзмененииНаСервере(ДанныеСтроки);
		
	РассчитатьСуммуНДСВСтрокеТабЧастиПриобретения(ДанныеСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриобретенияНалоговоеНазначениеПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Приобретения.ТекущиеДанные;
	
	ДанныеСтроки = ДанныеСтрокиПриобретения(СтрокаТабличнойЧасти);
	
	ПриобретенияНалоговоеНазначениеПриИзмененииНаСервере(ДанныеСтроки);
	
	ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ДанныеСтроки);
	
КонецПроцедуры

&НаСервере
Процедура ПриобретенияНалоговоеНазначениеПриИзмененииНаСервере(ДанныеСтроки)
	
	РассчитатьПропорциональныйНДС(ДанныеСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриобретенияВозвратнаяТараПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Приобретения.ТекущиеДанные;
	
	ДанныеСтроки = ДанныеСтрокиПриобретения(СтрокаТабличнойЧасти);
	
	ПриобретенияВозвратнаяТараПриИзмененииНаСервере(ДанныеСтроки, ДанныеОбъекта());
	
	ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ДанныеСтроки);
	
КонецПроцедуры

&НаСервере
Процедура ПриобретенияВозвратнаяТараПриИзмененииНаСервере(ДанныеСтроки, ДанныеОбъекта)
	
	Документы.РегистрацияАвансовВНалоговомУчете.ЗаполнитьСчетаУчетаВСтрокеТабЧасти(ДанныеСтроки, ДанныеОбъекта, "Приобретения");
	РассчитатьСуммуНДСВСтрокеТабЧастиПриобретения(ДанныеСтроки);

	ОпределитьФлагиРегистрацияПо(ДанныеСтроки,Истина);
	
	Если ДанныеСтроки.ВозвратнаяТара Тогда
	    ДанныеСтроки.Амортизируется = Ложь;
	    РассчитатьПропорциональныйНДС(ДанныеСтроки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриобретенияСуммаВзаиморасчетовРеглПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Приобретения.ТекущиеДанные;
	
	ДанныеСтроки = ДанныеСтрокиПриобретения(СтрокаТабличнойЧасти);
	
	ПриобретенияСуммаВзаиморасчетовРеглПриИзмененииНаСервере(ДанныеСтроки, ДанныеОбъекта());
	
	ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ДанныеСтроки);
	
КонецПроцедуры

&НаСервере
Процедура ПриобретенияСуммаВзаиморасчетовРеглПриИзмененииНаСервере(ДанныеСтроки, ДанныеОбъекта)
	
	РассчитатьСуммуНДСВСтрокеТабЧастиПриобретения(ДанныеСтроки);
	
	Если НЕ ДанныеСтроки.ВалютаВзаиморасчетов = ДанныеОбъекта.ВалютаРегламентированногоУчета Тогда
		Документы.РегистрацияАвансовВНалоговомУчете.РассчитатьКурсВСтрокеТабЧасти(ДанныеСтроки);
	Иначе
		ДанныеСтроки.СуммаВзаиморасчетов = ДанныеСтроки.СуммаВзаиморасчетовРегл;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриобретенияБазаНДСПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Приобретения.ТекущиеДанные;
	
	ДанныеСтроки = ДанныеСтрокиПриобретения(СтрокаТабличнойЧасти);
	
	ПриобретенияБазаНДСПриИзмененииНаСервере(ДанныеСтроки);
	
	ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ДанныеСтроки);
	
КонецПроцедуры

&НаСервере
Процедура ПриобретенияБазаНДСПриИзмененииНаСервере(ДанныеСтроки)
	
	ДанныеСтроки.НДСВходящий = ДанныеСтроки.СуммаВзаиморасчетовРегл - ДанныеСтроки.БазаНДС;
	
	РассчитатьПропорциональныйНДС(ДанныеСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриобретенияНДСВходящийПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Приобретения.ТекущиеДанные;
	
	ДанныеСтроки = ДанныеСтрокиПриобретения(СтрокаТабличнойЧасти);
	
	ПриобретенияНДСВходящийПриИзмененииНаСервере(ДанныеСтроки);
	
	ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ДанныеСтроки);
	
КонецПроцедуры

&НаСервере
Процедура ПриобретенияНДСВходящийПриИзмененииНаСервере(ДанныеСтроки)
	
	ДанныеСтроки.БазаНДС = ДанныеСтроки.СуммаВзаиморасчетовРегл - ДанныеСтроки.НДСВходящий;
	
	РассчитатьПропорциональныйНДС(ДанныеСтроки);
	
КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиСобытийТабличнойЧастиПродажи

&НаКлиенте
Процедура ПродажиКонтрагентПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Продажи.ТекущиеДанные;
	
	ДанныеСтроки = ДанныеСтрокиПродажи(СтрокаТабличнойЧасти);
	
	ПродажиКонтрагентПриИзмененииНаСервере(ДанныеСтроки, ДанныеОбъекта());
	
	ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ДанныеСтроки);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПродажиКонтрагентПриИзмененииНаСервере(ДанныеСтроки, ДанныеОбъекта)
	
	БухгалтерскийУчетПереопределяемый.УстановитьДоговорКонтрагента(
		ДанныеСтроки.ДоговорКонтрагента, ДанныеСтроки.Контрагент, ДанныеОбъекта.Организация, 
		ДанныеОбъекта.РазрешенныеВидыДоговоровПродажи);
	
	ПродажиДоговорКонтрагентаПриИзмененииНаСервере(ДанныеСтроки, ДанныеОбъекта);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродажиДоговорКонтрагентаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Продажи.ТекущиеДанные;
	
	ДанныеСтроки = ДанныеСтрокиПродажи(СтрокаТабличнойЧасти);
	
	ПродажиДоговорКонтрагентаПриИзмененииНаСервере(ДанныеСтроки, ДанныеОбъекта());
	
	ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ДанныеСтроки);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПродажиДоговорКонтрагентаПриИзмененииНаСервере(ДанныеСтроки, ДанныеОбъекта)
	
	ДанныеСтроки.ВалютаВзаиморасчетов = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеСтроки.ДоговорКонтрагента, "ВалютаВзаиморасчетов");
	
	Документы.РегистрацияАвансовВНалоговомУчете.УстановитьКурсВзаиморасчетов(ДанныеСтроки, ДанныеОбъекта);
	Документы.РегистрацияАвансовВНалоговомУчете.РассчитатьСуммуВзаиморасчетовРеглВСтрокеТабЧасти(ДанныеСтроки);
	
	Документы.РегистрацияАвансовВНалоговомУчете.ЗаполнитьСчетаУчетаВСтрокеТабЧасти(ДанныеСтроки, ДанныеОбъекта, "Продажи");
	РассчитатьСуммуНДСВСтрокеТабЧастиПродажи(ДанныеСтроки);
	
	ОпределитьФлагиРегистрацияПо(ДанныеСтроки,Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродажиВозвратнаяТараПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Продажи.ТекущиеДанные;
	
	ДанныеСтроки = ДанныеСтрокиПродажи(СтрокаТабличнойЧасти);
	
	ПродажиВозвратнаяТараПриИзмененииНаСервере(ДанныеСтроки, ДанныеОбъекта());
	
	ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ДанныеСтроки);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПродажиВозвратнаяТараПриИзмененииНаСервере(ДанныеСтроки, ДанныеОбъекта)
	
	Документы.РегистрацияАвансовВНалоговомУчете.ЗаполнитьСчетаУчетаВСтрокеТабЧасти(ДанныеСтроки, ДанныеОбъекта, "Продажи");
	РассчитатьСуммуНДСВСтрокеТабЧастиПродажи(ДанныеСтроки);
	
	ОпределитьФлагиРегистрацияПо(ДанныеСтроки,Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродажиВидОперацииПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Продажи.ТекущиеДанные;
	
	ДанныеСтроки = ДанныеСтрокиПродажи(СтрокаТабличнойЧасти);
	
	ПродажиВидОперацииПриИзмененииНаСервере(ДанныеСтроки);
	
	ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ДанныеСтроки);
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПродажиВидОперацииПриИзмененииНаСервере(ДанныеСтроки)
	
	ОпределитьФлагиРегистрацияПо(ДанныеСтроки,Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродажиСтавкаНДСПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Продажи.ТекущиеДанные;
	
	ДанныеСтроки = ДанныеСтрокиПродажи(СтрокаТабличнойЧасти);
	
	ПродажиСтавкаНДСПриИзмененииНаСервере(ДанныеСтроки);
	
	ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ДанныеСтроки);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПродажиСтавкаНДСПриИзмененииНаСервере(ДанныеСтроки)
	
	РассчитатьСуммуНДСВСтрокеТабЧастиПродажи(ДанныеСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродажиСуммаВзаиморасчетовРеглПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Продажи.ТекущиеДанные;
	
	ДанныеСтроки = ДанныеСтрокиПродажи(СтрокаТабличнойЧасти);
	
	ПродажиСуммаВзаиморасчетовРеглПриИзмененииНаСервере(ДанныеСтроки, ДанныеОбъекта());
	
	ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ДанныеСтроки);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПродажиСуммаВзаиморасчетовРеглПриИзмененииНаСервере(ДанныеСтроки, ДанныеОбъекта)
	
	РассчитатьСуммуНДСВСтрокеТабЧастиПродажи(ДанныеСтроки);
	
	Если НЕ ДанныеСтроки.ВалютаВзаиморасчетов = ДанныеОбъекта.ВалютаРегламентированногоУчета Тогда
		Документы.РегистрацияАвансовВНалоговомУчете.РассчитатьКурсВСтрокеТабЧасти(ДанныеСтроки);
	Иначе
		ДанныеСтроки.СуммаВзаиморасчетов = ДанныеСтроки.СуммаВзаиморасчетовРегл;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПродажиБазаНДСПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Продажи.ТекущиеДанные;
	
	СтрокаТабличнойЧасти.НДС = СтрокаТабличнойЧасти.СуммаВзаиморасчетовРегл - СтрокаТабличнойЧасти.БазаНДС;
	
КонецПроцедуры

&НаКлиенте
Процедура ПродажиСуммаВзаиморасчетовПриИзменении(Элемент)
	
	ПродажиПересчитатьСуммы(Элемент);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПродажиПересчитатьСуммыНаСервере(ДанныеСтроки)

	Документы.РегистрацияАвансовВНалоговомУчете.РассчитатьСуммуВзаиморасчетовРеглВСтрокеТабЧасти(ДанныеСтроки);
	РассчитатьСуммуНДСВСтрокеТабЧастиПродажи(ДанныеСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродажиПересчитатьСуммы(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Продажи.ТекущиеДанные;
	
	ДанныеСтроки = ДанныеСтрокиПродажи(СтрокаТабличнойЧасти);
	
	ПродажиПересчитатьСуммыНаСервере(ДанныеСтроки);
	
	ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ДанныеСтроки);
	
КонецПроцедуры
	
&НаКлиенте
Процедура ПродажиКратностьВзаиморасчетовПриИзменении(Элемент)
	
	ПродажиПересчитатьСуммы(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродажиКурсВзаиморасчетовПриИзменении(Элемент)
	
	ПродажиПересчитатьСуммы(Элемент);
	
КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиСобытийТабличнойЧастиВозвраты

&НаКлиенте
Процедура ВозвратыКонтрагентПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Возвраты.ТекущиеДанные;
	
	ДанныеСтроки = ДанныеСтрокиВозвраты(СтрокаТабличнойЧасти);
	
	ВозвратыКонтрагентПриИзмененииНаСервере(ДанныеСтроки, ДанныеОбъекта());
	
	ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ДанныеСтроки);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ВозвратыКонтрагентПриИзмененииНаСервере(ДанныеСтроки, ДанныеОбъекта)
	
	БухгалтерскийУчетПереопределяемый.УстановитьДоговорКонтрагента(
		ДанныеСтроки.ДоговорКонтрагента, ДанныеСтроки.Контрагент, ДанныеОбъекта.Организация, 
		ДанныеОбъекта.РазрешенныеВидыДоговоровВозвраты);
	
	ВозвратыДоговорКонтрагентаПриИзмененииНаСервере(ДанныеСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура ВозвратыДоговорКонтрагентаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Возвраты.ТекущиеДанные;
	
	ДанныеСтроки = ДанныеСтрокиВозвраты(СтрокаТабличнойЧасти);
	
	ВозвратыДоговорКонтрагентаПриИзмененииНаСервере(ДанныеСтроки);
	
	ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ДанныеСтроки);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ВозвратыДоговорКонтрагентаПриИзмененииНаСервере(ДанныеСтроки)
	
	ДанныеСтроки.ВалютаВзаиморасчетов = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеСтроки.ДоговорКонтрагента, "ВалютаВзаиморасчетов");
	
	ОпределитьТипКонтрагентаПоВидуДоговора(ДанныеСтроки);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ЗаполнитьПоОстаткамНаСервере();
	
	Документы.РегистрацияВходящегоНалоговогоДокумента.ЗаполнитьПоОстаткам(Объект);
		
КонецПроцедуры

&НаСервере
Процедура ДатаПриИзмененииНаСервере()
	
	ДатаОбработатьИзменение();
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ДатаОбработатьИзменение()
	
	УстановитьФункциональныеОпцииФормы();
	
	Если Год(Объект.Дата) <> Год(ТекущаяДатаДокумента) Тогда
		КоэффициентПропорциональногоНДС = НалоговыйУчет.ПолучитьКоэффициентПропорциональногоНДС(Объект.Организация, Объект.Дата);
		РассчитатьПропорциональныйНДС();
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()
	
	ОрганизацияОбработатьИзменение();
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаСервере
Процедура ОрганизацияОбработатьИзменение()

	УстановитьФункциональныеОпцииФормы();

КонецПроцедуры

&НаСервере
Функция ПолучитьПериодЗаполненияНаСервере()
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Возврат Новый Граница(Новый МоментВремени(Объект.Дата, Объект.Ссылка), ВидГраницы.Исключая);
	Иначе
		Возврат Новый Граница(КонецДня(Объект.Дата), ВидГраницы.Включая);
	КонецЕсли; 
КонецФункции 

&НаКлиенте
Процедура ЗаполнитьПриобретенияПослеЗакрытияВопроса(Результат, Параметры) Экспорт

	Если Результат = КодВозвратаДиалога.Да Тогда
		Объект.Приобретения.Очистить();
		ЗаполнитьПриобретенияНаСервере();
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПриобретенияНаСервере()
	
	ДанныеОбъекта  = Новый Структура("Организация, Дата, ВалютаРегламентированногоУчета");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	ДанныеОбъекта.ВалютаРегламентированногоУчета  = ЭтаФорма.ВалютаРегламентированногоУчета;
	// заполнение ТЧ "Приобретения"
	
	МоментыОпределенияНалоговойБазы = Перечисления.МоментыОпределенияНалоговойБазы;
	СобытияНДСПриобретений = Перечисления.СобытияПриобретенияНалоговыйУчет;
	ВидыОпераций = Перечисления.ВидыОперацийРегистрацияАвансовВНалоговомУчете;
	
	Запрос =  Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	НДСПриобретенийОстатки.ДоговорКонтрагента.Владелец КАК Контрагент,
				   |	НДСПриобретенийОстатки.ДоговорКонтрагента.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	               |	НДСПриобретенийОстатки.ДоговорКонтрагента,
	               |	НДСПриобретенийОстатки.ВозвратнаяТара,
	               |	ВЫБОР КОГДА НДСПриобретенийОстатки.ВозвратнаяТара = ЛОЖЬ ТОГДА НДСПриобретенийОстатки.ДоговорКонтрагента.СхемаНалоговогоУчета.МоментОпределенияБазыНДСПоПокупкам КОГДА НДСПриобретенийОстатки.ВозвратнаяТара = ИСТИНА ТОГДА НДСПриобретенийОстатки.ДоговорКонтрагента.СхемаНалоговогоУчетаПоТаре.МоментОпределенияБазыНДСПоПокупкам КОНЕЦ КАК МоментОпределенияБазыНДС,
	               |	СУММА(ВЫБОР КОГДА НДСПриобретенийОстатки.Событие = &СобытиеОтгрузка ТОГДА НДСПриобретенийОстатки.СуммаВзаиморасчетовОстаток ИНАЧЕ 0 КОНЕЦ) КАК Отгрузка,
	               |	СУММА(ВЫБОР КОГДА НДСПриобретенийОстатки.Событие = &СобытиеОплата ТОГДА НДСПриобретенийОстатки.СуммаВзаиморасчетовОстаток ИНАЧЕ 0 КОНЕЦ) КАК Оплата,
	               |	СУММА(ВЫБОР КОГДА НДСПриобретенийОстатки.Событие = &СобытиеВозвратОтгрузка ТОГДА НДСПриобретенийОстатки.СуммаВзаиморасчетовОстаток ИНАЧЕ 0 КОНЕЦ) КАК ВозвратОтгрузка,
	               |	СУММА(ВЫБОР КОГДА НДСПриобретенийОстатки.Событие = &СобытиеВозвратОплата ТОГДА НДСПриобретенийОстатки.СуммаВзаиморасчетовОстаток ИНАЧЕ 0 КОНЕЦ) КАК ВозвратОплата
	               |ИЗ
	               |	РегистрНакопления.ПриобретенияНалоговыйУчет.Остатки(&МоментДок, Организация = &Организация  И ДоговорКонтрагента.СложныйНалоговыйУчет) КАК НДСПриобретенийОстатки
				   |
	               |СГРУППИРОВАТЬ ПО
	               |	НДСПриобретенийОстатки.ДоговорКонтрагента,
	               |	НДСПриобретенийОстатки.ВозвратнаяТара,
	               |	НДСПриобретенийОстатки.ДоговорКонтрагента.Владелец,
	               |	ВЫБОР КОГДА НДСПриобретенийОстатки.ВозвратнаяТара = ЛОЖЬ ТОГДА НДСПриобретенийОстатки.ДоговорКонтрагента.СхемаНалоговогоУчета.МоментОпределенияБазыНДСПоПокупкам КОГДА НДСПриобретенийОстатки.ВозвратнаяТара = ИСТИНА ТОГДА НДСПриобретенийОстатки.ДоговорКонтрагента.СхемаНалоговогоУчетаПоТаре.МоментОпределенияБазыНДСПоПокупкам КОНЕЦ ";
				   
	Запрос.УстановитьПараметр("МоментДок", ПолучитьПериодЗаполненияНаСервере());
	Запрос.УстановитьПараметр("Организация",Объект.Организация);
	Запрос.УстановитьПараметр("СобытиеОтгрузка",СобытияНДСПриобретений.ПоступлениеОтПоставщика);
	Запрос.УстановитьПараметр("СобытиеОплата",СобытияНДСПриобретений.ОплатаПоставщику);
	Запрос.УстановитьПараметр("СобытиеВозвратОтгрузка",СобытияНДСПриобретений.ВозвратПоставщику);
	Запрос.УстановитьПараметр("СобытиеВозвратОплата",СобытияНДСПриобретений.ВозвратОплатыПоставщиком);
	Субконто = Новый Массив();
	Субконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры);
	Запрос.УстановитьПараметр("Субконто", Субконто);
	Результат = Запрос.Выполнить();
	
	Объект.Приобретения.Очистить();
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		СуммаВзаиморасчетов = 0;
		
		Если НЕ Выборка.ВалютаВзаиморасчетов = ВалютаРегламентированногоУчета Тогда
			
			ДанныеОВалюте = МодульВалютногоУчета.ПолучитьКурсВалюты(Выборка.ВалютаВзаиморасчетов, Объект.Дата);
			
			Кратность 	  = ДанныеОВалюте.Кратность;
			Курс = ДанныеОВалюте.Курс;	
			
		Иначе	
			
			Курс      = 1;
			Кратность = 1;
		
		КонецЕсли;
		
		Если (Выборка.МоментОпределенияБазыНДС = МоментыОпределенияНалоговойБазы.НеОпределять ИЛИ
			Выборка.МоментОпределенияБазыНДС = МоментыОпределенияНалоговойБазы.ПоОтгрузке) Тогда
			
		    // ни по НДС, ни по ВР авансы регистрировать не нужно
			Продолжить;
		ИначеЕсли НЕ ЗначениеЗаполнено(Выборка.МоментОпределенияБазыНДС) Тогда
			
			Сообщить(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Для контрагента %1 по договору %2 (по возватной таре: %3) не указана схема налогового учета по НДС!';uk='Для контрагента %1 по договору %2 (по зворотній тарі: %3) не зазначена схема податкового обліку по ПДВ!'"), Выборка.Контрагент, Выборка.ДоговорКонтрагента, Выборка.ВозвратнаяТара));
			Продолжить;
			
		КонецЕсли;
		
		Если (Выборка.Оплата > Выборка.Отгрузка) Тогда
			// есть незакрытые отгрузками оплаты 
			СуммаВзаиморасчетов = Выборка.Оплата - Выборка.Отгрузка;
			// проверим по моментам, нужно ли как то обрабатывать такие оплаты
			Если Выборка.МоментОпределенияБазыНДС = МоментыОпределенияНалоговойБазы.ПоПервомуСобытию ИЛИ
				 Выборка.МоментОпределенияБазыНДС = МоментыОпределенияНалоговойБазы.ПоОплате Тогда
				 
				Строка = Объект.Приобретения.Добавить();
				Строка.Контрагент 		  	= Выборка.Контрагент;
				Строка.ДоговорКонтрагента 	= Выборка.ДоговорКонтрагента;
				Строка.ВозвратнаяТара		= Выборка.ВозвратнаяТара;
				
				Строка.ВидОперации 			= ВидыОпераций.АвансОпределениеПараметровНУ;
				Строка.СуммаВзаиморасчетов	= СуммаВзаиморасчетов;
				
				Если Выборка.МоментОпределенияБазыНДС = МоментыОпределенияНалоговойБазы.ПоПервомуСобытию ИЛИ
					Выборка.МоментОпределенияБазыНДС = МоментыОпределенияНалоговойБазы.ПоОплате Тогда
				
					Строка.РегистрацияПоНДС = Истина;
				КонецЕсли;
				
				Строка.ВалютаВзаиморасчетов 	= Выборка.ВалютаВзаиморасчетов;
				Строка.КурсВзаиморасчетов 		= Курс;
				Строка.КратностьВзаиморасчетов 	= Кратность;
				Документы.РегистрацияАвансовВНалоговомУчете.РассчитатьСуммуВзаиморасчетовРеглВСтрокеТабЧасти(Строка);
			
				Документы.РегистрацияАвансовВНалоговомУчете.ЗаполнитьСчетаУчетаВСтрокеТабЧасти(Строка, ДанныеОбъекта, "Приобретения");
				РассчитатьСуммуНДСВСтрокеТабЧастиПриобретения(Строка);
				
			КонецЕсли; 
			
		КонецЕсли;
		
		Если (Выборка.ВозвратОплата > Выборка.ВозвратОтгрузка) Тогда
			// есть незакрытые отгрузками оплаты 
			СуммаВзаиморасчетов = Выборка.ВозвратОплата - Выборка.ВозвратОтгрузка;
			// проверим по моментам, нужно ли как то обрабатывать такие оплаты
			Если Выборка.МоментОпределенияБазыНДС = МоментыОпределенияНалоговойБазы.ПоПервомуСобытию ИЛИ
				 Выборка.МоментОпределенияБазыНДС = МоментыОпределенияНалоговойБазы.ПоОплате Тогда
				 
				Строка = Объект.Приобретения.Добавить();
				Строка.Контрагент 		  	= Выборка.Контрагент;
				Строка.ДоговорКонтрагента 	= Выборка.ДоговорКонтрагента;
				Строка.ВозвратнаяТара		= Выборка.ВозвратнаяТара;
				
				Строка.ВидОперации 			= ВидыОпераций.АвансВозвратОпределениеПараметровНУ;
				Строка.СуммаВзаиморасчетов	= СуммаВзаиморасчетов;
			
				Если Выборка.МоментОпределенияБазыНДС = МоментыОпределенияНалоговойБазы.ПоПервомуСобытию ИЛИ
					Выборка.МоментОпределенияБазыНДС = МоментыОпределенияНалоговойБазы.ПоОплате Тогда
				
					Строка.РегистрацияПоНДС = Истина;
				КонецЕсли;
				
				Строка.ВалютаВзаиморасчетов 	= Выборка.ВалютаВзаиморасчетов;
				Строка.КурсВзаиморасчетов 		= Курс;
				Строка.КратностьВзаиморасчетов 	= Кратность;
				Документы.РегистрацияАвансовВНалоговомУчете.РассчитатьСуммуВзаиморасчетовРеглВСтрокеТабЧасти(Строка);
				
				Документы.РегистрацияАвансовВНалоговомУчете.ЗаполнитьСчетаУчетаВСтрокеТабЧасти(Строка, ДанныеОбъекта, "Приобретения");
				РассчитатьСуммуНДСВСтрокеТабЧастиПриобретения(Строка);
				
			КонецЕсли;
			
		КонецЕсли; 
		
		Если (Выборка.Оплата < Выборка.Отгрузка) Тогда
			// есть незакрытые оплатами отгрузки
			СуммаВзаиморасчетов = Выборка.Отгрузка - Выборка.Оплата;
			
			// проверим по моментам, нужно ли как то обрабатывать такие отгрузки
			Если Выборка.МоментОпределенияБазыНДС = МоментыОпределенияНалоговойБазы.ПоОплате Тогда
				 
				Строка = Объект.Приобретения.Добавить();
				Строка.Контрагент 		  	= Выборка.Контрагент;
				Строка.ДоговорКонтрагента 	= Выборка.ДоговорКонтрагента;
				Строка.ВозвратнаяТара		= Выборка.ВозвратнаяТара;
				
				Строка.ВидОперации 			= ВидыОпераций.ОтгрузкаОтменаРегистрацииВНУ;
				Строка.СуммаВзаиморасчетов	= СуммаВзаиморасчетов;
				
				Если Выборка.МоментОпределенияБазыНДС = МоментыОпределенияНалоговойБазы.ПоОплате Тогда
				
					Строка.РегистрацияПоНДС = Истина;
				КонецЕсли;
				
				Строка.ВалютаВзаиморасчетов 	= Выборка.ВалютаВзаиморасчетов;
				Строка.КурсВзаиморасчетов 		= Курс;
				Строка.КратностьВзаиморасчетов 	= Кратность;
				Документы.РегистрацияАвансовВНалоговомУчете.РассчитатьСуммуВзаиморасчетовРеглВСтрокеТабЧасти(Строка);
				
				Документы.РегистрацияАвансовВНалоговомУчете.ЗаполнитьСчетаУчетаВСтрокеТабЧасти(Строка, ДанныеОбъекта, "Приобретения");
				РассчитатьСуммуНДСВСтрокеТабЧастиПриобретения(Строка);
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если (Выборка.ВозвратОплата < Выборка.ВозвратОтгрузка) Тогда
		
			СуммаВзаиморасчетов = Выборка.ВозвратОтгрузка - Выборка.ВозвратОплата;
		
			// проверим по моментам, нужно ли как то обрабатывать такие отгрузки
			Если Выборка.МоментОпределенияБазыНДС = МоментыОпределенияНалоговойБазы.ПоОплате Тогда
				 
				Строка = Объект.Приобретения.Добавить();
				Строка.Контрагент 		  	= Выборка.Контрагент;
				Строка.ДоговорКонтрагента 	= Выборка.ДоговорКонтрагента;
				Строка.ВозвратнаяТара		= Выборка.ВозвратнаяТара;
				
				Строка.ВидОперации 			= ВидыОпераций.ОтгрузкаВозвратОтменаРегистрацииВНУ;
				Строка.СуммаВзаиморасчетов	= СуммаВзаиморасчетов;
				
				Если Выборка.МоментОпределенияБазыНДС = МоментыОпределенияНалоговойБазы.ПоОплате Тогда
				
					Строка.РегистрацияПоНДС = Истина;
				КонецЕсли;
				
				Строка.ВалютаВзаиморасчетов 	= Выборка.ВалютаВзаиморасчетов;
				Строка.КурсВзаиморасчетов 		= Курс;
				Строка.КратностьВзаиморасчетов 	= Кратность;
				Документы.РегистрацияАвансовВНалоговомУчете.РассчитатьСуммуВзаиморасчетовРеглВСтрокеТабЧасти(Строка);
				
				Документы.РегистрацияАвансовВНалоговомУчете.ЗаполнитьСчетаУчетаВСтрокеТабЧасти(Строка, ДанныеОбъекта, "Приобретения");
				РассчитатьСуммуНДСВСтрокеТабЧастиПриобретения(Строка);
			
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла; 
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПродажиПослеЗакрытияВопроса(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Объект.Продажи.Очистить();
		ЗаполнитьПродажиНаСервере();
	КонецЕсли; 
	
КонецПроцедуры
	
&НаСервере
Процедура ЗаполнитьПродажиНаСервере()
	
	ДанныеОбъекта  = Новый Структура("Организация, Дата, ВалютаРегламентированногоУчета");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	ДанныеОбъекта.ВалютаРегламентированногоУчета  = ЭтаФорма.ВалютаРегламентированногоУчета;
	
	// заполнение ТЧ "Продажи"
	
	МоментыОпределенияНалоговойБазы = Перечисления.МоментыОпределенияНалоговойБазы;
	СобытияНДСПродаж = Перечисления.СобытияПродажиНалоговыйУчет;
	ВидыОпераций = Перечисления.ВидыОперацийРегистрацияАвансовВНалоговомУчете;
	
	Запрос =  Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	НДСПродажОстатки.ДоговорКонтрагента.Владелец КАК Контрагент,
	               |	НДСПродажОстатки.ДоговорКонтрагента,
				   |	НДСПродажОстатки.ДоговорКонтрагента.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	               |	НДСПродажОстатки.ВозвратнаяТара,
	               |	ВЫБОР КОГДА НДСПродажОстатки.ВозвратнаяТара = ЛОЖЬ ТОГДА НДСПродажОстатки.ДоговорКонтрагента.СхемаНалоговогоУчета.МоментОпределенияБазыНДСПоПродажам КОГДА НДСПродажОстатки.ВозвратнаяТара = ИСТИНА ТОГДА НДСПродажОстатки.ДоговорКонтрагента.СхемаНалоговогоУчетаПоТаре.МоментОпределенияБазыНДСПоПродажам КОНЕЦ КАК МоментОпределенияБазыНДС,
				   |	СУММА(ВЫБОР КОГДА НДСПродажОстатки.Событие = &СобытиеОтгрузка ТОГДА НДСПродажОстатки.СуммаВзаиморасчетовОстаток ИНАЧЕ 0 КОНЕЦ) КАК Отгрузка,
	               |	СУММА(ВЫБОР КОГДА НДСПродажОстатки.Событие = &СобытиеОплата ТОГДА НДСПродажОстатки.СуммаВзаиморасчетовОстаток ИНАЧЕ 0 КОНЕЦ) КАК Оплата,
	               |	СУММА(ВЫБОР КОГДА НДСПродажОстатки.Событие = &СобытиеВозвратОтгрузка ТОГДА НДСПродажОстатки.СуммаВзаиморасчетовОстаток ИНАЧЕ 0 КОНЕЦ) КАК ВозвратОтгрузка,
	               |	СУММА(ВЫБОР КОГДА НДСПродажОстатки.Событие = &СобытиеВозвратОплата ТОГДА НДСПродажОстатки.СуммаВзаиморасчетовОстаток ИНАЧЕ 0 КОНЕЦ) КАК ВозвратОплата
				   |ИЗ
	               |	РегистрНакопления.ПродажиНалоговыйУчет.Остатки(&МоментДок, Организация = &Организация  И ДоговорКонтрагента.СложныйНалоговыйУчет) КАК НДСПродажОстатки
				   |
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	НДСПродажОстатки.ДоговорКонтрагента,
	               |	НДСПродажОстатки.ВозвратнаяТара,
	               |	НДСПродажОстатки.ДоговорКонтрагента.Владелец,
	               |	ВЫБОР КОГДА НДСПродажОстатки.ВозвратнаяТара = ЛОЖЬ ТОГДА НДСПродажОстатки.ДоговорКонтрагента.СхемаНалоговогоУчета.МоментОпределенияБазыНДСПоПродажам КОГДА НДСПродажОстатки.ВозвратнаяТара = ИСТИНА ТОГДА НДСПродажОстатки.ДоговорКонтрагента.СхемаНалоговогоУчетаПоТаре.МоментОпределенияБазыНДСПоПродажам КОНЕЦ";
				   
	Запрос.УстановитьПараметр("МоментДок", ПолучитьПериодЗаполненияНаСервере());
	Запрос.УстановитьПараметр("Организация",Объект.Организация);
	Запрос.УстановитьПараметр("СобытиеОтгрузка",СобытияНДСПродаж.РеализацияПокупателю);
	Запрос.УстановитьПараметр("СобытиеОплата",СобытияНДСПродаж.ОплатаПокупателем);
	Запрос.УстановитьПараметр("СобытиеВозвратОтгрузка",СобытияНДСПродаж.ВозвратОтПокупателя);
	Запрос.УстановитьПараметр("СобытиеВозвратОплата",СобытияНДСПродаж.ВозвратОплатыПокупателю);

	Объект.Продажи.Очистить();
	
	Результат = Запрос.Выполнить();
	
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		СуммаВзаиморасчетов = 0;
		
		Если НЕ Выборка.ВалютаВзаиморасчетов = ВалютаРегламентированногоУчета Тогда
			
			ДанныеОВалюте = МодульВалютногоУчета.ПолучитьКурсВалюты(Выборка.ВалютаВзаиморасчетов, Объект.Дата);
			
			Кратность 	  = ДанныеОВалюте.Кратность;
			Курс = ДанныеОВалюте.Курс;	
			
		Иначе	
			
			Курс      = 1;
			Кратность = 1;
		
		КонецЕсли;
				
		Если (Выборка.МоментОпределенияБазыНДС = МоментыОпределенияНалоговойБазы.НеОпределять ИЛИ
			Выборка.МоментОпределенияБазыНДС = МоментыОпределенияНалоговойБазы.ПоОтгрузке) Тогда
			
		    // ни по НДС, ни по ВР авансы регистрировать не нужно
			Продолжить;
		ИначеЕсли НЕ ЗначениеЗаполнено(Выборка.МоментОпределенияБазыНДС) Тогда
			
			Сообщить(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Для контрагента %1 по договору %2 (по возватной таре: %3) не указана схема налогового учета по НДС!';uk='Для контрагента %1 по договору %2 (по зворотній тарі: %3) не зазначена схема податкового обліку по ПДВ!'"), Выборка.Контрагент, Выборка.ДоговорКонтрагента, Выборка.ВозвратнаяТара));
			Продолжить;
			
		КонецЕсли;
		
		Если (Выборка.Оплата > Выборка.Отгрузка) Тогда
			// есть незакрытые отгруками оплаты 
			СуммаВзаиморасчетов = Выборка.Оплата - Выборка.Отгрузка;
			// проверим по моментам, нужно ли как то обрабатывать такие оплаты
			Если Выборка.МоментОпределенияБазыНДС = МоментыОпределенияНалоговойБазы.ПоПервомуСобытию ИЛИ
				 Выборка.МоментОпределенияБазыНДС = МоментыОпределенияНалоговойБазы.ПоОплате Тогда
				 
				Строка = Объект.Продажи.Добавить();
				Строка.Контрагент 		  	= Выборка.Контрагент;
				Строка.ДоговорКонтрагента 	= Выборка.ДоговорКонтрагента;
				Строка.ВозвратнаяТара		= Выборка.ВозвратнаяТара;
				
				Строка.ВидОперации 			= ВидыОпераций.АвансОпределениеПараметровНУ;
				Строка.СуммаВзаиморасчетов	= СуммаВзаиморасчетов;
				
				Если Выборка.МоментОпределенияБазыНДС = МоментыОпределенияНалоговойБазы.ПоПервомуСобытию ИЛИ
					Выборка.МоментОпределенияБазыНДС = МоментыОпределенияНалоговойБазы.ПоОплате Тогда
				
					Строка.РегистрацияПоНДС = Истина;
				КонецЕсли;
				
				Строка.ВалютаВзаиморасчетов 	= Выборка.ВалютаВзаиморасчетов;
				Строка.КурсВзаиморасчетов 		= Курс;
				Строка.КратностьВзаиморасчетов 	= Кратность;
				Документы.РегистрацияАвансовВНалоговомУчете.РассчитатьСуммуВзаиморасчетовРеглВСтрокеТабЧасти(Строка);
				
				Документы.РегистрацияАвансовВНалоговомУчете.ЗаполнитьСчетаУчетаВСтрокеТабЧасти(Строка, ДанныеОбъекта, "Продажи");
				РассчитатьСуммуНДСВСтрокеТабЧастиПродажи(Строка);
				
			КонецЕсли; 
			
		КонецЕсли;
		
		Если (Выборка.ВозвратОплата > Выборка.ВозвратОтгрузка) Тогда
			// есть незакрытые отгрузками оплаты 
			СуммаВзаиморасчетов = Выборка.ВозвратОплата - Выборка.ВозвратОтгрузка;
			// проверим по моментам, нужно ли как то обрабатывать такие оплаты
			Если Выборка.МоментОпределенияБазыНДС = МоментыОпределенияНалоговойБазы.ПоПервомуСобытию ИЛИ
				 Выборка.МоментОпределенияБазыНДС = МоментыОпределенияНалоговойБазы.ПоОплате Тогда
				 
				Строка = Объект.Продажи.Добавить();
				Строка.Контрагент 		  	= Выборка.Контрагент;
				Строка.ДоговорКонтрагента 	= Выборка.ДоговорКонтрагента;
				Строка.ВозвратнаяТара		= Выборка.ВозвратнаяТара;
				
				Строка.ВидОперации 			= ВидыОпераций.АвансВозвратОпределениеПараметровНУ;
				Строка.СуммаВзаиморасчетов	= СуммаВзаиморасчетов;
			
				Если Выборка.МоментОпределенияБазыНДС = МоментыОпределенияНалоговойБазы.ПоПервомуСобытию ИЛИ
					Выборка.МоментОпределенияБазыНДС = МоментыОпределенияНалоговойБазы.ПоОплате Тогда
				
					Строка.РегистрацияПоНДС = Истина;
				КонецЕсли;
				
				Строка.ВалютаВзаиморасчетов 	= Выборка.ВалютаВзаиморасчетов;
				Строка.КурсВзаиморасчетов 		= Курс;
				Строка.КратностьВзаиморасчетов 	= Кратность;
				Документы.РегистрацияАвансовВНалоговомУчете.РассчитатьСуммуВзаиморасчетовРеглВСтрокеТабЧасти(Строка);
				
				Документы.РегистрацияАвансовВНалоговомУчете.ЗаполнитьСчетаУчетаВСтрокеТабЧасти(Строка, ДанныеОбъекта, "Продажи");
				РассчитатьСуммуНДСВСтрокеТабЧастиПродажи(Строка);
				
			КонецЕсли;
			
		КонецЕсли; 
		
		Если (Выборка.Оплата < Выборка.Отгрузка) Тогда
			// есть незакрытые оплатами отгрузки
			СуммаВзаиморасчетов = Выборка.Отгрузка - Выборка.Оплата;
			
			// проверим по моментам, нужно ли как то обрабатывать такие отгрузки
			Если Выборка.МоментОпределенияБазыНДС = МоментыОпределенияНалоговойБазы.ПоОплате ТОгда
				Строка = Объект.Продажи.Добавить();
				Строка.Контрагент 		  	= Выборка.Контрагент;
				Строка.ДоговорКонтрагента 	= Выборка.ДоговорКонтрагента;
				Строка.ВозвратнаяТара		= Выборка.ВозвратнаяТара;
				
				Строка.ВидОперации 			= ВидыОпераций.ОтгрузкаОтменаРегистрацииВНУ;
				Строка.СуммаВзаиморасчетов	= СуммаВзаиморасчетов;
				
				Если Выборка.МоментОпределенияБазыНДС = МоментыОпределенияНалоговойБазы.ПоОплате Тогда
				
					Строка.РегистрацияПоНДС = Истина;
				КонецЕсли;
				
				Строка.ВалютаВзаиморасчетов 	= Выборка.ВалютаВзаиморасчетов;
				Строка.КурсВзаиморасчетов 		= Курс;
				Строка.КратностьВзаиморасчетов 	= Кратность;
				Документы.РегистрацияАвансовВНалоговомУчете.РассчитатьСуммуВзаиморасчетовРеглВСтрокеТабЧасти(Строка);
				
				Документы.РегистрацияАвансовВНалоговомУчете.ЗаполнитьСчетаУчетаВСтрокеТабЧасти(Строка, ДанныеОбъекта, "Продажи");
				РассчитатьСуммуНДСВСтрокеТабЧастиПродажи(Строка);
				
			КонецЕсли;
			
		КонецЕсли;
	
		Если (Выборка.ВозвратОплата < Выборка.ВозвратОтгрузка) Тогда
		
			СуммаВзаиморасчетов = Выборка.ВозвратОтгрузка - Выборка.ВозвратОплата;
		
			// проверим по моментам, нужно ли как то обрабатывать такие отгрузки
			Если Выборка.МоментОпределенияБазыНДС = МоментыОпределенияНалоговойБазы.ПоОплате Тогда
				 
				Строка = Объект.Продажи.Добавить();
				Строка.Контрагент 		  	= Выборка.Контрагент;
				Строка.ДоговорКонтрагента 	= Выборка.ДоговорКонтрагента;
				Строка.ВозвратнаяТара		= Выборка.ВозвратнаяТара;
				
				Строка.ВидОперации 			= ВидыОпераций.ОтгрузкаВозвратОтменаРегистрацииВНУ;
				Строка.СуммаВзаиморасчетов	= СуммаВзаиморасчетов;
				
				Если Выборка.МоментОпределенияБазыНДС = МоментыОпределенияНалоговойБазы.ПоОплате Тогда
				
					Строка.РегистрацияПоНДС = Истина;
				КонецЕсли;
				
				Строка.ВалютаВзаиморасчетов 	= Выборка.ВалютаВзаиморасчетов;
				Строка.КурсВзаиморасчетов 		= Курс;
				Строка.КратностьВзаиморасчетов 	= Кратность;
				Документы.РегистрацияАвансовВНалоговомУчете.РассчитатьСуммуВзаиморасчетовРеглВСтрокеТабЧасти(Строка);
				
				Документы.РегистрацияАвансовВНалоговомУчете.ЗаполнитьСчетаУчетаВСтрокеТабЧасти(Строка, ДанныеОбъекта, "Продажи");
				РассчитатьСуммуНДСВСтрокеТабЧастиПродажи(Строка);
					
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьВозвратыПослеЗакрытияВопроса(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Объект.Возвраты.Очистить();
		ЗаполнитьВозвратыНаСервере();
	КонецЕсли; 
	
КонецПроцедуры
	
&НаСервере
Процедура ЗаполнитьВозвратыНаСервере()
	
	// заполнение ТЧ "Возвраты"
	Запрос =  Новый Запрос;
	Запрос.Текст = 
			"ВЫБРАТЬ
			|	Данные.ДоговорКонтрагента.Владелец    КАК Контрагент,
			|	Данные.ДоговорКонтрагента			  КАК ДоговорКонтрагента,
			|	Данные.ВозвратнаяТара 				  КАК ВозвратнаяТара,
			|	Данные.ТипКонтрагента 				  КАК ТипКонтрагента,
			|   ВЫБОР КОГДА (РасчетыОтгрузка > РасчетыОплата) И (ВозвратОтгрузка > ВозвратОплата) ТОГДА 
			|         		ВЫБОР КОГДА РасчетыОтгрузка - РасчетыОплата > ВозвратОтгрузка - ВозвратОплата
			| 							ТОГДА ВозвратОтгрузка - ВозвратОплата
			|                           ИНАЧЕ РасчетыОтгрузка - РасчетыОплата
			|               КОНЕЦ
			|         КОГДА (РасчетыОтгрузка < РасчетыОплата) И (ВозвратОтгрузка < ВозвратОплата) ТОГДА 
			|         		ВЫБОР КОГДА РасчетыОтгрузка - РасчетыОплата > ВозвратОтгрузка - ВозвратОплата
			| 							ТОГДА РасчетыОтгрузка - РасчетыОплата
			|                           ИНАЧЕ ВозвратОтгрузка - ВозвратОплата
			|               КОНЕЦ
			|		  ИНАЧЕ 
			|				0
			|  КОНЕЦ КАК Сумма
			|
			|ИЗ
			|	(ВЫБРАТЬ
			|		Данные.ДоговорКонтрагента КАК ДоговорКонтрагента,
			|		Данные.ВозвратнаяТара КАК ВозвратнаяТара,
			|		Данные.ТипКонтрагента КАК ТипКонтрагента,
			|		ЕстьNULL(СУММА(Данные.РасчетыОтгрузка) 		, 0)	КАК РасчетыОтгрузка,
			|		ЕстьNULL(СУММА(Данные.РасчетыОплата) 		, 0)	КАК РасчетыОплата,
			|		ЕстьNULL(СУММА(Данные.ВозвратОтгрузка) 		, 0)	КАК ВозвратОтгрузка,
			|		ЕстьNULL(СУММА(Данные.ВозвратОплата) 		, 0)	КАК ВозвратОплата
			|	ИЗ
			|		(ВЫБРАТЬ
			|			Продажи.ДоговорКонтрагента КАК ДоговорКонтрагента,
			|			Продажи.ВозвратнаяТара КАК ВозвратнаяТара,
			|			""Покупатель"" КАК ТипКонтрагента,
			|			ВЫБОР
			|				КОГДА Продажи.Событие = &ПродажиРасчетыОтгрузка
			|					ТОГДА Продажи.СуммаВзаиморасчетовОстаток
			|			КОНЕЦ КАК РасчетыОтгрузка,
			|			ВЫБОР
			|				КОГДА Продажи.Событие = &ПродажиРасчетыОплата
			|					ТОГДА Продажи.СуммаВзаиморасчетовОстаток
			|			КОНЕЦ КАК РасчетыОплата,
			|			ВЫБОР
			|				КОГДА Продажи.Событие = &ПродажиВозвратОтгрузка
			|					ТОГДА Продажи.СуммаВзаиморасчетовОстаток
			|			КОНЕЦ КАК ВозвратОтгрузка,
			|			ВЫБОР
			|				КОГДА Продажи.Событие = &ПродажиВозвратОплата
			|					ТОГДА Продажи.СуммаВзаиморасчетовОстаток
			|			КОНЕЦ КАК ВозвратОплата
			|		ИЗ
			|			РегистрНакопления.ПродажиНалоговыйУчет.Остатки(&МоментВремени, Организация = &Организация И НЕ ДоговорКонтрагента.ВидДоговора = &Бартер И ДоговорКонтрагента.СложныйНалоговыйУчет) КАК Продажи
			|		
			|		ОБЪЕДИНИТЬ ВСЕ
			|		
			|		ВЫБРАТЬ
			|			Приобретения.ДоговорКонтрагента,
			|			Приобретения.ВозвратнаяТара,
			|			""Поставщик"", 
			|			ВЫБОР
			|				КОГДА Приобретения.Событие = &ПриобретенияРасчетыОтгрузка
			|					ТОГДА Приобретения.СуммаВзаиморасчетовОстаток
			|			КОНЕЦ,
			|			ВЫБОР
			|				КОГДА Приобретения.Событие = &ПриобретенияРасчетыОплата
			|					ТОГДА Приобретения.СуммаВзаиморасчетовОстаток
			|			КОНЕЦ,
			|			ВЫБОР
			|				КОГДА Приобретения.Событие = &ПриобретенияВозвратОтгрузка
			|					ТОГДА Приобретения.СуммаВзаиморасчетовОстаток
			|			КОНЕЦ,
			|			ВЫБОР
			|				КОГДА Приобретения.Событие = &ПриобретенияВозвратОплата
			|					ТОГДА Приобретения.СуммаВзаиморасчетовОстаток
			|			КОНЕЦ
			|		ИЗ
			|			РегистрНакопления.ПриобретенияНалоговыйУчет.Остатки(&МоментВремени, Организация = &Организация И НЕ ДоговорКонтрагента.ВидДоговора = &Бартер И ДоговорКонтрагента.СложныйНалоговыйУчет) КАК Приобретения) КАК Данные
			|	
			|	СГРУППИРОВАТЬ ПО
			|		Данные.ДоговорКонтрагента,
			|		Данные.ВозвратнаяТара,
			|		Данные.ТипКонтрагента) КАК Данные
			|
			|УПОРЯДОЧИТЬ ПО
			|	ДоговорКонтрагента,
			|	ВозвратнаяТара,
			|	ТипКонтрагента";
							 
	Запрос.УстановитьПараметр("МоментВремени", ПолучитьПериодЗаполненияНаСервере());
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("Бартер", Перечисления.ВидыДоговоровКонтрагентов.Бартерный);
	
	Запрос.УстановитьПараметр("ПродажиРасчетыОтгрузка", 	Перечисления.СобытияПродажиНалоговыйУчет.РеализацияПокупателю);
	Запрос.УстановитьПараметр("ПродажиРасчетыОплата", 	Перечисления.СобытияПродажиНалоговыйУчет.ОплатаПокупателем);
	Запрос.УстановитьПараметр("ПродажиВозвратОтгрузка", 	Перечисления.СобытияПродажиНалоговыйУчет.ВозвратОтПокупателя);
	Запрос.УстановитьПараметр("ПродажиВозвратОплата", 	Перечисления.СобытияПродажиНалоговыйУчет.ВозвратОплатыПокупателю);
	Запрос.УстановитьПараметр("ПриобретенияРасчетыОтгрузка",	Перечисления.СобытияПриобретенияНалоговыйУчет.ПоступлениеОтПоставщика);
	Запрос.УстановитьПараметр("ПриобретенияРасчетыОплата",	Перечисления.СобытияПриобретенияНалоговыйУчет.ОплатаПоставщику);
	Запрос.УстановитьПараметр("ПриобретенияВозвратОтгрузка",	Перечисления.СобытияПриобретенияНалоговыйУчет.ВозвратПоставщику);
	Запрос.УстановитьПараметр("ПриобретенияВозвратОплата", 	Перечисления.СобытияПриобретенияНалоговыйУчет.ВозвратОплатыПоставщиком);
	
	Результат = Запрос.Выполнить();
	
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.Сумма = 0 Тогда
			
			Продолжить;
		
		КонецЕсли; 
		
		Строка = Объект.Возвраты.Добавить();
		
		Строка.Контрагент 							= Выборка.Контрагент;
		Строка.ДоговорКонтрагента 					= Выборка.ДоговорКонтрагента;
		Строка.ВозвратнаяТара 						= Выборка.ВозвратнаяТара;
		Строка.ТипКонтрагента 						= Перечисления.СтатусыКонтрагентов[Выборка.ТипКонтрагента];
		Строка.НеПредполагаетсяЗакрывающаяОперация 	= Истина;
		
		Строка.ПревышениеОтгрузкиНадОплатой			= Выборка.Сумма;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПодготовитьФормуНаСервере()
	
	УстановитьФункциональныеОпцииФормы();
	
	УстановитьСостояниеДокумента();

	// Заполнение реквизитов формы
	ТекущаяДатаДокумента           = Объект.Дата;
	ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	КоэффициентПропорциональногоНДС = НалоговыйУчет.ПолучитьКоэффициентПропорциональногоНДС(Объект.Организация, Объект.Дата);
	РазрешенныеВидыДоговоровПриобретения = Новый ФиксированныйМассив(Новый Массив);
	Для каждого ПараметрВыбора Из Элементы.ПриобретенияДоговорКонтрагента.ПараметрыВыбора Цикл
		Если ПараметрВыбора.Имя = "Отбор.ВидДоговора" Тогда
			РазрешенныеВидыДоговоровПриобретения = ПараметрВыбора.Значение;
		КонецЕсли; 
	КонецЦикла; 
	РазрешенныеВидыДоговоровПродажи = Новый ФиксированныйМассив(Новый Массив);
	Для каждого ПараметрВыбора Из Элементы.ПродажиДоговорКонтрагента.ПараметрыВыбора Цикл
		Если ПараметрВыбора.Имя = "Отбор.ВидДоговора" Тогда
			РазрешенныеВидыДоговоровПродажи = ПараметрВыбора.Значение;
		КонецЕсли; 
	КонецЦикла; 
	РазрешенныеВидыДоговоровВозвраты = Новый ФиксированныйМассив(Новый Массив);
	Для каждого ПараметрВыбора Из Элементы.ВозвратыДоговорКонтрагента.ПараметрыВыбора Цикл
		Если ПараметрВыбора.Имя = "Отбор.ВидДоговора" Тогда
			РазрешенныеВидыДоговоровВозвраты = ПараметрВыбора.Значение;
		КонецЕсли; 
	КонецЦикла; 
	
	ЗаполнитьДобавленныеКолонкиТаблиц();

	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьФункциональныеОпцииФормы()

	ОбщегоНазначенияБПКлиентСервер.УстановитьПараметрыФункциональныхОпцийФормыДокумента(ЭтаФорма);

КонецПроцедуры 

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Элементы = Форма.Элементы;
	Объект   = Форма.Объект;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДобавленныеКолонкиТаблиц()

	
	Для Каждого ДанныеСтроки Из Объект.Приобретения Цикл

		ДанныеСтроки.ВалютаВзаиморасчетов  = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеСтроки.ДоговорКонтрагента, "ВалютаВзаиморасчетов");
		
	КонецЦикла; 
	
	Для Каждого ДанныеСтроки Из Объект.Продажи Цикл

		ДанныеСтроки.ВалютаВзаиморасчетов  = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеСтроки.ДоговорКонтрагента, "ВалютаВзаиморасчетов");
		
	КонецЦикла;
	
	Для Каждого ДанныеСтроки Из Объект.Возвраты Цикл

		ДанныеСтроки.ВалютаВзаиморасчетов  = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеСтроки.ДоговорКонтрагента, "ВалютаВзаиморасчетов");
		
	КонецЦикла; 
	
КонецПроцедуры

&НаКлиенте
Функция ДанныеОбъекта()
	
	ДанныеОбъекта  = Новый Структура("Организация, Дата, ВалютаРегламентированногоУчета, КоэффициентПропорциональногоНДС, 
						|РазрешенныеВидыДоговоровПриобретения, РазрешенныеВидыДоговоровПродажи, РазрешенныеВидыДоговоровВозвраты");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	ДанныеОбъекта.ВалютаРегламентированногоУчета  = ЭтаФорма.ВалютаРегламентированногоУчета;
	ДанныеОбъекта.КоэффициентПропорциональногоНДС = ЭтаФорма.КоэффициентПропорциональногоНДС;
	ДанныеОбъекта.РазрешенныеВидыДоговоровПриобретения = ЭтаФорма.РазрешенныеВидыДоговоровПриобретения;
	ДанныеОбъекта.РазрешенныеВидыДоговоровПродажи = ЭтаФорма.РазрешенныеВидыДоговоровПродажи;
	ДанныеОбъекта.РазрешенныеВидыДоговоровВозвраты = ЭтаФорма.РазрешенныеВидыДоговоровВозвраты;
	
	Возврат ДанныеОбъекта;
	
КонецФункции

&НаКлиенте
Функция ДанныеСтрокиПриобретения(СтрокаТабличнойЧасти)
	
	ДанныеСтроки = Новый Структура("Контрагент, ДоговорКонтрагента,ВозвратнаяТара,ВидОперации,РегистрацияПоНДС,
	|СуммаВзаиморасчетов,ВалютаВзаиморасчетов,КурсВзаиморасчетов,КратностьВзаиморасчетов,СуммаВзаиморасчетовРегл,
	|СтавкаНДС,НДСВходящий,БазаНДС,СуммаНДСПропорциональноКредит,
	|НалоговоеНазначение,Амортизируется,СчетУчетаНДС,СчетУчетаНДСНеподтвержденный");
	                                            
	ЗаполнитьЗначенияСвойств(ДанныеСтроки, СтрокаТабличнойЧасти);
	
	Возврат ДанныеСтроки;
	
КонецФункции

&НаКлиенте
Функция ДанныеСтрокиПродажи(СтрокаТабличнойЧасти)
	
	ДанныеСтроки = Новый Структура("Контрагент, ДоговорКонтрагента,ВозвратнаяТара,ВидОперации,РегистрацияПоНДС,
	|СуммаВзаиморасчетов,ВалютаВзаиморасчетов,КурсВзаиморасчетов,КратностьВзаиморасчетов,СуммаВзаиморасчетовРегл,
	|СтавкаНДС,НДС,БазаНДС,
	|СчетУчетаНДС,СчетУчетаНДСНеподтвержденный");
	                                            
	ЗаполнитьЗначенияСвойств(ДанныеСтроки, СтрокаТабличнойЧасти);
	
	Возврат ДанныеСтроки;
	
КонецФункции

&НаКлиенте
Функция ДанныеСтрокиВозвраты(СтрокаТабличнойЧасти)
	
	ДанныеСтроки = Новый Структура("Контрагент, ДоговорКонтрагента, ВозвратнаяТара, ТипКонтрагента, ВалютаВзаиморасчетов");
	                                            
	ЗаполнитьЗначенияСвойств(ДанныеСтроки, СтрокаТабличнойЧасти);
	
	Возврат ДанныеСтроки;
	
КонецФункции

&НаСервере
Процедура УстановитьСостояниеДокумента()
	
	СостояниеДокумента = ОбщегоНазначенияБП.СостояниеДокумента(Объект);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

&НаСервереБезКонтекста
Процедура ОпределитьФлагиРегистрацияПо(СтрокаТабличнойЧасти, ПоПокупкам = Ложь)
	
	СтрокаТабличнойЧасти.РегистрацияПоНДС = Ложь;
	
	Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.ДоговорКонтрагента) ИЛИ
		 НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.ВидОперации) Тогда
		Возврат;
	КонецЕсли;
	
	ВидыОпераций = Перечисления.ВидыОперацийРегистрацияАвансовВНалоговомУчете;
	
	Если СтрокаТабличнойЧасти.ВозвратнаяТара Тогда
		СхемаНалоговогоУчета = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаТабличнойЧасти.ДоговорКонтрагента, "СхемаНалоговогоУчетаПоТаре");
	Иначе
		СхемаНалоговогоУчета = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаТабличнойЧасти.ДоговорКонтрагента, "СхемаНалоговогоУчета");
	КонецЕсли;
	
	Если ПоПокупкам Тогда
		МоментОпределенияБазыНДС = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СхемаНалоговогоУчета, "МоментОпределенияБазыНДСПоПокупкам");
	Иначе
		МоментОпределенияБазыНДС = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СхемаНалоговогоУчета, "МоментОпределенияБазыНДСПоПродажам");
	КонецЕсли;
	
	Если СтрокаТабличнойЧасти.ВидОперации = ВидыОпераций.АвансОпределениеПараметровНУ ИЛИ
		СтрокаТабличнойЧасти.ВидОперации = ВидыОпераций.АвансВозвратОпределениеПараметровНУ Тогда
		
		// Аванс требует регистрации только если методы ПоПервомуСобытию или ПоОплате
		Если МоментОпределенияБазыНДС = Перечисления.МоментыОпределенияНалоговойБазы.ПоПервомуСобытию ИЛИ
			 МоментОпределенияБазыНДС = Перечисления.МоментыОпределенияНалоговойБазы.ПоОплате Тогда
		
			СтрокаТабличнойЧасти.РегистрацияПоНДС = Истина;
		
		КонецЕсли; 
	
	Иначе // "операции по отгрузке"
		// только если метод по оплате
		Если МоментОпределенияБазыНДС = Перечисления.МоментыОпределенияНалоговойБазы.ПоОплате Тогда
		
			СтрокаТабличнойЧасти.РегистрацияПоНДС = Истина;
		
		КонецЕсли; 
	
	КонецЕсли; 
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОпределитьТипКонтрагентаПоВидуДоговора(ДанныеСтроки)
	
	ВидДоговора = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеСтроки.ДоговорКонтрагента, "ВидДоговора");
	
	Если ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем Тогда
		ДанныеСтроки.ТипКонтрагента = Перечисления.СтатусыКонтрагентов.Покупатель;
	Иначе
		ДанныеСтроки.ТипКонтрагента = Перечисления.СтатусыКонтрагентов.Поставщик;
	КонецЕсли;
	
КонецПроцедуры	

&НаСервере
Процедура РассчитатьСуммуНДСВСтрокеТабЧастиПриобретения(СтрокаТЧ) Экспорт
	
	ИмяКолонкиНДС = "НДСВходящий";
	
	СтрокаТЧ[ИмяКолонкиНДС] = УчетНДС.РассчитатьСуммуНДС(СтрокаТЧ.СуммаВзаиморасчетовРегл,
	                                                   Истина,Истина,УчетНДС.ПолучитьСтавкуНДС(СтрокаТЧ.СтавкаНДС));
	СтрокаТЧ.БазаНДС  = СтрокаТЧ.СуммаВзаиморасчетовРегл - СтрокаТЧ[ИмяКолонкиНДС];
	
	РассчитатьПропорциональныйНДС( СтрокаТЧ );

КонецПроцедуры

&НаСервереБезКонтекста
Процедура РассчитатьСуммуНДСВСтрокеТабЧастиПродажи(СтрокаТЧ)
	
	ИмяКолонкиНДС = "НДС";
	
	СтрокаТЧ[ИмяКолонкиНДС] = УчетНДС.РассчитатьСуммуНДС(СтрокаТЧ.СуммаВзаиморасчетовРегл,
	                                                   Истина,Истина,УчетНДС.ПолучитьСтавкуНДС(СтрокаТЧ.СтавкаНДС));
	СтрокаТЧ.БазаНДС  = СтрокаТЧ.СуммаВзаиморасчетовРегл - СтрокаТЧ[ИмяКолонкиНДС];
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьПропорциональныйНДС( СтрокаПлатеж = Неопределено ) Экспорт
	
	ДанныеОбъекта = Новый Структура("КоэффициентПропорциональногоНДС",ЭтаФорма.КоэффициентПропорциональногоНДС);
	
	ПересчитыватьВсеСтроки = (СтрокаПлатеж = Неопределено);
	
	Если ДанныеОбъекта.КоэффициентПропорциональногоНДС = Неопределено Тогда
		
		ДанныеОбъекта.КоэффициентПропорциональногоНДС = НалоговыйУчет.ПолучитьКоэффициентПропорциональногоНДС(ДанныеОбъекта.Организация, ДанныеОбъекта.Дата);
	
	КонецЕсли;
	
	Если ПересчитыватьВсеСтроки Тогда
		Для каждого СтрокаРасшифровки Из Объект.Приобретения Цикл
			Если НЕ СтрокаРасшифровки.НалоговоеНазначение = Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_Пропорционально Тогда
			    СтрокаРасшифровки.СуммаНДСПропорциональноКредит = 0;
			Иначе	
				СтрокаРасшифровки.СуммаНДСПропорциональноКредит = СтрокаРасшифровки.НДСВходящий * ДанныеОбъекта.КоэффициентПропорциональногоНДС;
			КонецЕсли;
		КонецЦикла;
	Иначе	
		Если НЕ СтрокаПлатеж.НалоговоеНазначение = Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_Пропорционально Тогда
			СтрокаПлатеж.СуммаНДСПропорциональноКредит = 0;
		Иначе	
			СтрокаПлатеж.СуммаНДСПропорциональноКредит = СтрокаПлатеж.НДСВходящий * ДанныеОбъекта.КоэффициентПропорциональногоНДС;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

/////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ БСП

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти