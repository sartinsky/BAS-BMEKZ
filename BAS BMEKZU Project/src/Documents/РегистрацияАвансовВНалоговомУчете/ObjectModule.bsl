#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
Перем мВалютаРегламентированногоУчета;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Процедура готовит таблицу используемую для корректировки сумм, на которую формируются сторнирующие проводки на начало следующего месяца
// на суммы закрытых "неполных возвратов" (указываются на закладке "Возвраты"). По тем возвратам, по каким
// регистрируются авансы (или сторнируются отргузки) не нужно делать сторно проводок.
//
// Параметры
//	ТаблицаПоВозвратам - Сумма проводки до корректировки
//
//	ТипКонтрагета – Перечисение.СтатусыКонтрагентов -  	для отбора строк из родительской таблицы
//														по Приобретению/Продажам
//
//  СтрокаТаблицы  – Строка таблицы значений, по которой формируются движения.
//
// Возвращаемое значение:
//   ТаблицаЗначений   – подготовленная таблица.
//
Функция ПодготовитьТаблицуВозвратовДляКорректировок(ТаблицаПоВозвратам, ТипКонтрагета)
	
	ТабВозвраты = ТаблицаПоВозвратам.Скопировать();
	ТабВозвраты.Колонки.Добавить("СуммаОтгрузки", ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповЧисла(15,3));
	ТабВозвраты.Колонки.Добавить("СуммаОплаты"	 , ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповЧисла(15,3));
	
	Инд = 0;
	Пока ТабВозвраты.Количество() > Инд Цикл
		СтрокаВозвратов = ТабВозвраты[Инд];
		Если НЕ СтрокаВозвратов.ТипКонтрагента = ТипКонтрагета 
			ИЛИ СтрокаВозвратов.ЗакрыватьВозврат = Ложь 
			ИЛИ СтрокаВозвратов.ПревышениеОтгрузкиНадОплатой = 0 Тогда
			ТабВозвраты.Удалить(СтрокаВозвратов);	
		Иначе
			Если СтрокаВозвратов.ПревышениеОтгрузкиНадОплатой > 0 Тогда
				СтрокаВозвратов.СуммаОтгрузки = СтрокаВозвратов.ПревышениеОтгрузкиНадОплатой;
			Иначе
				СтрокаВозвратов.СуммаОплаты   = -СтрокаВозвратов.ПревышениеОтгрузкиНадОплатой;
			КонецЕсли;
			Инд = Инд + 1;
		КонецЕсли;
	КонецЦикла;
	
	ТабВозвраты.Свернуть("Контрагент, ДоговорКонтрагента, ВозвратнаяТара", "СуммаОтгрузки, СуммаОплаты");	
	
	Возврат  ТабВозвраты;
	
КонецФункции

// Процедура корректирует сумму, на которую формируются сторнирующие проводки на начало следующего месяца
// на суммы закрытых "неполных возвратов" (указываются на закладке "Возвраты"). По тем возвратам, по каким
// регистрируются авансы (или сторнируются отргузки) не нужно делать сторно проводок.
//
// Параметры
//	СуммаПроводки - Сумма проводки до корректировки
//
//	Возвраты  – таблица с данным по закрываемым возвратам 
//
//  СтрокаТаблицы  – Строка таблицы значений, по которой формируются движения.
//
// Возвращаемое значение:
//   Число   – откорректированная сумма проводки.
//
Функция СуммаКорректирующейПроводкиСУчетомЗакрытияВозвратов(СуммаПроводки, ТабВозвраты, СтрокаТаблицы)

	НоваяСуммаПроводки = СуммаПроводки;
	
	// Не нужно сторнировать проводки, для регистрации авансов по закрываемым неполным возвратам
	СтрокиЗакрытияВозвратов = ТабВозвраты.НайтиСтроки(Новый Структура("Контрагент, 				ДоговорКонтрагента, 				ВозвратнаяТара",	
																	СтрокаТаблицы.Контрагент,	СтрокаТаблицы.ДоговорКонтрагента,   СтрокаТаблицы.ВозвратнаяТара));
	
	Если СтрокиЗакрытияВозвратов.Количество() > 0 Тогда
		//не более одной строки																			
		СтрокаЗакрытияВозвратов = СтрокиЗакрытияВозвратов[0];
		
		ИмяКолонкиСуммы = "";
		Если  СтрокаЗакрытияВозвратов.СуммаОтгрузки > 0
			И СтрокаТаблицы.СуммаОтгрузки > 0 Тогда
			
			ИмяКолонкиСуммы = "СуммаОтгрузки";
			
		ИначеЕсли СтрокаЗакрытияВозвратов.СуммаОплаты > 0
			И СтрокаТаблицы.СуммаОплаты > 0 Тогда
			
			ИмяКолонкиСуммы = "СуммаОплаты";
			
		КонецЕсли;	
		
		Если НЕ ИмяКолонкиСуммы = "" Тогда
			
			СуммаВозврата = Мин(СтрокаЗакрытияВозвратов[ИмяКолонкиСуммы], СтрокаТаблицы[ИмяКолонкиСуммы+"Всего"]); 
			
			Если НЕ СтрокаТаблицы[ИмяКолонкиСуммы+"Всего"] = СуммаВозврата Тогда
				// нужно подкорректировать сумму на сумму возврата
				НоваяСуммаПроводки =  СуммаПроводки * (1 - (СуммаВозврата/СтрокаТаблицы[ИмяКолонкиСуммы+"Всего"]));
				
			Иначе
				
				НоваяСуммаПроводки = 0;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;	
	
    Возврат НоваяСуммаПроводки;
	
КонецФункции // СуммаКорректирующейПроводкиСУчетомЗакрытияВозвратов()

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТоварам - результат запроса по табличной части "Товары",
//  СтруктураШапкиДокумента   - структура, содержащая рексвизиты шапки документа и результаты запроса по шапке
//
// Возвращаемое значение:
//  Сформированная таблиица значений.
//
Функция ПодготовитьТаблицуПриобретения(РезультатЗапросаПоПриобретениям, СтруктураШапкиДокумента)

	ТаблицаПриобретения = РезультатЗапросаПоПриобретениям.Выгрузить();
	ВидыОпераций = Перечисления.ВидыОперацийРегистрацияАвансовВНалоговомУчете;
	СобытияНДС = Перечисления.СобытияОжидаемыйИПодтвержденныйНДСПриобретений;
	События    = Перечисления.СобытияПриобретенияНалоговыйУчет;
	
	ТаблицаПриобретения.Колонки.Добавить("СуммаОтгрузки"	 , ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповЧисла(15,3));
	ТаблицаПриобретения.Колонки.Добавить("СуммаОплаты"		 , ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповЧисла(15,3));
	ТаблицаПриобретения.Колонки.Добавить("СуммаОтгрузкиВсего", ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповЧисла(15,3));
	ТаблицаПриобретения.Колонки.Добавить("СуммаОплатыВсего"	 , ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповЧисла(15,3));
	
	ТаблицаПриобретения.Колонки.Добавить("ПроводкиСуммаНДСРегл"	, ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповЧисла(15,3));
	ТаблицаПриобретения.Колонки.Добавить("НДСКредит"	, ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповЧисла(15,3));
	ТаблицаПриобретения.Колонки.Добавить("СобытиеНДС");
	ТаблицаПриобретения.Колонки.Добавить("Событие");
    ТаблицаПриобретения.Колонки.Добавить("ДляХозяйственнойДеятельности");	
	
	Для каждого СтрокаТаблицы Из ТаблицаПриобретения Цикл
		
		Если СтрокаТаблицы.ВидОперации = ВидыОпераций.АвансОпределениеПараметровНУ Тогда
			// нужно зарегистрировать отгрузку
			СтрокаТаблицы.СобытиеНДС = 	СобытияНДС.Поступление;
			СтрокаТаблицы.Событие    = 	События.ПоступлениеОтПоставщика;
			СтрокаТаблицы.СуммаОтгрузки = 0;
			СтрокаТаблицы.СуммаОплаты   = СтрокаТаблицы.СуммаВзаиморасчетов;
			
		ИначеЕсли СтрокаТаблицы.ВидОперации = ВидыОпераций.АвансВозвратОпределениеПараметровНУ Тогда
			// нужно зарегистрировать возврат отгрузки
			СтрокаТаблицы.СобытиеНДС = 	СобытияНДС.Возврат;
			СтрокаТаблицы.Событие    = 	События.ВозвратПоставщику;
			СтрокаТаблицы.СуммаОтгрузки = 0;
			СтрокаТаблицы.СуммаОплаты   = СтрокаТаблицы.СуммаВзаиморасчетов;
			
		ИначеЕсли СтрокаТаблицы.ВидОперации = ВидыОпераций.ОтгрузкаОтменаРегистрацииВНУ Тогда
			// нужно отсторнировать отгрузку			
			СтрокаТаблицы.СобытиеНДС = 	СобытияНДС.Поступление;
			СтрокаТаблицы.Событие    = 	События.ПоступлениеОтПоставщика;
			
			СтрокаТаблицы.СуммаОтгрузки = СтрокаТаблицы.СуммаВзаиморасчетов;
			СтрокаТаблицы.СуммаОплаты   = 0;
			
			// при этом суммы должны быть отрицательными
			СтрокаТаблицы.СуммаВзаиморасчетовРегл 	= - СтрокаТаблицы.СуммаВзаиморасчетовРегл;
			СтрокаТаблицы.СуммаВзаиморасчетов	 	= - СтрокаТаблицы.СуммаВзаиморасчетов;
			СтрокаТаблицы.БазаНДС 					= - СтрокаТаблицы.БазаНДС;
			СтрокаТаблицы.НДСВходящий 				= - СтрокаТаблицы.НДСВходящий;
			СтрокаТаблицы.СуммаНДСПропорционально   = - СтрокаТаблицы.СуммаНДСПропорционально;
			
		ИначеЕсли СтрокаТаблицы.ВидОперации = ВидыОпераций.ОтгрузкаВозвратОтменаРегистрацииВНУ Тогда
			// нужно отсторнировать возврат отгрузки
			СтрокаТаблицы.СобытиеНДС = 	СобытияНДС.Возврат;
			СтрокаТаблицы.Событие    = 	События.ВозвратПоставщику;
			
			СтрокаТаблицы.СуммаОтгрузки = СтрокаТаблицы.СуммаВзаиморасчетов;
			СтрокаТаблицы.СуммаОплаты   = 0;
			
			// при этом суммы должны быть отрицательными
			СтрокаТаблицы.СуммаВзаиморасчетовРегл 	= - СтрокаТаблицы.СуммаВзаиморасчетовРегл;
			СтрокаТаблицы.СуммаВзаиморасчетов	 	= - СтрокаТаблицы.СуммаВзаиморасчетов;
			СтрокаТаблицы.БазаНДС 					= - СтрокаТаблицы.БазаНДС;
			СтрокаТаблицы.НДСВходящий				= - СтрокаТаблицы.НДСВходящий;
			СтрокаТаблицы.СуммаНДСПропорционально   = - СтрокаТаблицы.СуммаНДСПропорционально;
			
		КонецЕсли; 
		
		Если СтрокаТаблицы.НалоговоеНазначение = Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяНеХозДеятельность Тогда
			СтрокаТаблицы.ДляХозяйственнойДеятельности = Ложь;
		Иначе
			СтрокаТаблицы.ДляХозяйственнойДеятельности = Истина;
		КонецЕсли; 
		
		// проверим, есть ли право на налоговый кредит
		Если  	 СтрокаТаблицы.ДляХозяйственнойДеятельности
			И НЕ СтрокаТаблицы.ВидДеятельностиНДС = перечисления.ВидыДеятельностиНДС.Необлагаемая Тогда
			
			Если СтрокаТаблицы.ВидДеятельностиНДС = перечисления.ВидыДеятельностиНДС.ПропорциональноОблагаемая Тогда
				СтрокаТаблицы.НДСКредит 	= СтрокаТаблицы.СуммаНДСПропорционально;
			Иначе
				СтрокаТаблицы.НДСКредит 	= СтрокаТаблицы.НДСВходящий;
			КонецЕсли;
			
		Иначе
			СтрокаТаблицы.НДСКредит		= 0;
		КонецЕсли; 
		
		Если  СтрокаТаблицы.ВидОперации = ВидыОпераций.АвансВозвратОпределениеПараметровНУ
		  ИЛИ СтрокаТаблицы.ВидОперации = ВидыОпераций.ОтгрузкаВозвратОтменаРегистрацииВНУ	Тогда
			// по возвратам сумма НДС должна быть отрицательной
			СтрокаТаблицы.ПроводкиСуммаНДСРегл = - СтрокаТаблицы.НДСКредит;
		Иначе
			СтрокаТаблицы.ПроводкиСуммаНДСРегл = СтрокаТаблицы.НДСКредит;
		КонецЕсли;
		
	КонецЦикла;

	ТаблицаКопия = ТаблицаПриобретения.Скопировать();
	ТаблицаКопия.Свернуть("Контрагент, ДоговорКонтрагента, ВозвратнаяТара,ВидОперации,РегистрацияПоНДС", "СуммаОтгрузки, СуммаОплаты");
	СтруктураПоиска = Новый Структура("Контрагент, ДоговорКонтрагента, ВозвратнаяТара,ВидОперации,РегистрацияПоНДС");
	Для каждого СтрокаТаблицы  Из ТаблицаПриобретения Цикл
		СтруктураПоиска.Контрагент 			= СтрокаТаблицы.Контрагент;
		СтруктураПоиска.ДоговорКонтрагента 	= СтрокаТаблицы.ДоговорКонтрагента;
		СтруктураПоиска.ВозвратнаяТара 		= СтрокаТаблицы.ВозвратнаяТара;
		СтруктураПоиска.ВидОперации 		= СтрокаТаблицы.ВидОперации;
		СтруктураПоиска.РегистрацияПоНДС 	= СтрокаТаблицы.РегистрацияПоНДС;
		
		ИтоговыеСтроки = ТаблицаКопия.НайтиСтроки(СтруктураПоиска);
		Если ИтоговыеСтроки.Количество() > 0 Тогда
			СтрокаТаблицы.СуммаОтгрузкиВсего = ИтоговыеСтроки[0].СуммаОтгрузки;
			СтрокаТаблицы.СуммаОплатыВсего   = ИтоговыеСтроки[0].СуммаОплаты;
		КонецЕсли;
	КонецЦикла; 
	
	Возврат ТаблицаПриобретения;

КонецФункции // ПодготовитьТаблицуПриобретения()

Функция ПодготовитьТаблицуПродажи(РезультатЗапросаПоПродажам, СтруктураШапкиДокумента)

	ТаблицаПродажи = РезультатЗапросаПоПродажам.Выгрузить();
	ВидыОпераций = Перечисления.ВидыОперацийРегистрацияАвансовВНалоговомУчете;
	СобытияНДС = Перечисления.СобытияОжидаемыйИПодтвержденныйНДСПродаж;
	События    = Перечисления.СобытияПродажиНалоговыйУчет;
	

	ТаблицаПродажи.Колонки.Добавить("СуммаОтгрузки"	, ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповЧисла(15,3));
	ТаблицаПродажи.Колонки.Добавить("СуммаОплаты"	, ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповЧисла(15,3));
	ТаблицаПродажи.Колонки.Добавить("СуммаОтгрузкиВсего", ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповЧисла(15,3));
	ТаблицаПродажи.Колонки.Добавить("СуммаОплатыВсего"	, ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповЧисла(15,3));
	
	ТаблицаПродажи.Колонки.Добавить("ПроводкиСуммаНДСРегл"	, ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповЧисла(15,3));
	ТаблицаПродажи.Колонки.Добавить("СобытиеНДС");
	ТаблицаПродажи.Колонки.Добавить("Событие");

	Для каждого СтрокаТаблицы Из ТаблицаПродажи Цикл
		
		Если СтрокаТаблицы.ВидОперации = ВидыОпераций.АвансОпределениеПараметровНУ Тогда
			// нужно зарегистрировать отгрузку
			СтрокаТаблицы.СобытиеНДС = 	СобытияНДС.Реализация;
			СтрокаТаблицы.Событие 	 = 	События.РеализацияПокупателю;
			СтрокаТаблицы.СуммаОтгрузки = 0;
			СтрокаТаблицы.СуммаОплаты   = СтрокаТаблицы.СуммаВзаиморасчетов;
			
		ИначеЕсли СтрокаТаблицы.ВидОперации = ВидыОпераций.АвансВозвратОпределениеПараметровНУ Тогда
			// нужно зарегистрировать возврат отгрузки
			СтрокаТаблицы.СобытиеНДС = 	СобытияНДС.Возврат;
			СтрокаТаблицы.Событие 	 = 	События.ВозвратОтПокупателя;
			СтрокаТаблицы.СуммаОтгрузки = 0;
			СтрокаТаблицы.СуммаОплаты   = СтрокаТаблицы.СуммаВзаиморасчетов;
			
		ИначеЕсли СтрокаТаблицы.ВидОперации = ВидыОпераций.ОтгрузкаОтменаРегистрацииВНУ Тогда
			// нужно отсторнировать отгрузку
			СтрокаТаблицы.СобытиеНДС = 	СобытияНДС.Реализация;
			СтрокаТаблицы.Событие 	 = 	События.РеализацияПокупателю;
			
			СтрокаТаблицы.СуммаОтгрузки = СтрокаТаблицы.СуммаВзаиморасчетов;
			СтрокаТаблицы.СуммаОплаты   = 0;
			
			// при этом суммы должны быть отрицательными
			СтрокаТаблицы.СуммаВзаиморасчетовРегл 	= - СтрокаТаблицы.СуммаВзаиморасчетовРегл;
			СтрокаТаблицы.СуммаВзаиморасчетов	 	= - СтрокаТаблицы.СуммаВзаиморасчетов;
			СтрокаТаблицы.БазаНДС 					= - СтрокаТаблицы.БазаНДС;
			СтрокаТаблицы.НДС 						= - СтрокаТаблицы.НДС;
			
		ИначеЕсли СтрокаТаблицы.ВидОперации = ВидыОпераций.ОтгрузкаВозвратОтменаРегистрацииВНУ Тогда
			// нужно отсторнировать возврат отгрузки
			СтрокаТаблицы.СобытиеНДС = 	СобытияНДС.Возврат;
			СтрокаТаблицы.Событие 	 = 	События.ВозвратОтПокупателя;
			
			СтрокаТаблицы.СуммаОтгрузки = СтрокаТаблицы.СуммаВзаиморасчетов;
			СтрокаТаблицы.СуммаОплаты   = 0;
			
			// при этом суммы должны быть отрицательными
			СтрокаТаблицы.СуммаВзаиморасчетовРегл 	= - СтрокаТаблицы.СуммаВзаиморасчетовРегл;
			СтрокаТаблицы.СуммаВзаиморасчетов	 	= - СтрокаТаблицы.СуммаВзаиморасчетов;
			СтрокаТаблицы.БазаНДС 					= - СтрокаТаблицы.БазаНДС;
			СтрокаТаблицы.НДС	 					= - СтрокаТаблицы.НДС;
			
		КонецЕсли; 
		
		СтрокаТаблицы.ПроводкиСуммаНДСРегл = СтрокаТаблицы.НДС;
		
		// Инвертируем суммы ВР и проводок по НДС по операциям возврата.
		Если  СтрокаТаблицы.ВидОперации = ВидыОпераций.АвансВозвратОпределениеПараметровНУ
		  ИЛИ СтрокаТаблицы.ВидОперации = ВидыОпераций.ОтгрузкаВозвратОтменаРегистрацииВНУ	Тогда
			
			СтрокаТаблицы.ПроводкиСуммаНДСРегл 	= - СтрокаТаблицы.ПроводкиСуммаНДСРегл;
			
		КонецЕсли;

	КонецЦикла;

	ТаблицаКопия = ТаблицаПродажи.Скопировать();
	ТаблицаКопия.Свернуть("Контрагент, ДоговорКонтрагента, ВозвратнаяТара,ВидОперации,РегистрацияПоНДС", "СуммаОтгрузки, СуммаОплаты");
	СтруктураПоиска = Новый Структура("Контрагент, ДоговорКонтрагента, ВозвратнаяТара,ВидОперации,РегистрацияПоНДС");
	Для каждого СтрокаТаблицы  Из ТаблицаПродажи Цикл
		СтруктураПоиска.Контрагент 			= СтрокаТаблицы.Контрагент;
		СтруктураПоиска.ДоговорКонтрагента 	= СтрокаТаблицы.ДоговорКонтрагента;
		СтруктураПоиска.ВозвратнаяТара 		= СтрокаТаблицы.ВозвратнаяТара;
		СтруктураПоиска.ВидОперации 		= СтрокаТаблицы.ВидОперации;
		СтруктураПоиска.РегистрацияПоНДС 	= СтрокаТаблицы.РегистрацияПоНДС;
		
		ИтоговыеСтроки = ТаблицаКопия.НайтиСтроки(СтруктураПоиска);
		Если ИтоговыеСтроки.Количество() > 0 Тогда
			СтрокаТаблицы.СуммаОтгрузкиВсего = ИтоговыеСтроки[0].СуммаОтгрузки;
			СтрокаТаблицы.СуммаОплатыВсего   = ИтоговыеСтроки[0].СуммаОплаты;
		КонецЕсли;
	КонецЦикла; 
	
	Возврат ТаблицаПродажи;

КонецФункции // ПодготовитьТаблицуПродажи()

Функция ПодготовитьТаблицуВозвраты(РезультатЗапросаПоВозвратам, СтруктураШапкиДокумента)
	
	ТаблицаВозвраты = РезультатЗапросаПоВозвратам.Выгрузить();
	
	СобытияПродаж 		= Перечисления.СобытияПродажиНалоговыйУчет;
	СобытияПриобретений = Перечисления.СобытияПриобретенияНалоговыйУчет;
	
	Поставщик 	= Перечисления.СтатусыКонтрагентов.Поставщик;
	Покупатель 	= Перечисления.СтатусыКонтрагентов.Покупатель;
	
	ТаблицаВозвраты.Колонки.Добавить("СобытиеРасчеты");
	ТаблицаВозвраты.Колонки.Добавить("СобытиеВозврат");

	Для каждого СтрокаТаблицы Из ТаблицаВозвраты Цикл
		
		Если СтрокаТаблицы.ТипКонтрагента = Покупатель Тогда
			
			Если СтрокаТаблицы.СуммаВзаиморасчетов < 0 Тогда
				
				// возврат оплаты
				СтрокаТаблицы.СуммаВзаиморасчетов = -СтрокаТаблицы.СуммаВзаиморасчетов;
				
				СтрокаТаблицы.СобытиеРасчеты = СобытияПродаж.ОплатаПокупателем;
				СтрокаТаблицы.СобытиеВозврат = СобытияПродаж.ВозвратОплатыПокупателю;
				
			Иначе
				
				// возврат отгрузки
				СтрокаТаблицы.СобытиеРасчеты = СобытияПродаж.РеализацияПокупателю;
				СтрокаТаблицы.СобытиеВозврат = СобытияПродаж.ВозвратОтПокупателя;
				
			КонецЕсли; 
			
			
		ИначеЕсли СтрокаТаблицы.ТипКонтрагента = Поставщик Тогда
			
			Если СтрокаТаблицы.СуммаВзаиморасчетов < 0 Тогда
				
				// возврат оплаты
				СтрокаТаблицы.СуммаВзаиморасчетов = -СтрокаТаблицы.СуммаВзаиморасчетов;
				
				СтрокаТаблицы.СобытиеРасчеты = СобытияПриобретений.ОплатаПоставщику;
				СтрокаТаблицы.СобытиеВозврат = СобытияПриобретений.ВозвратОплатыПоставщиком;
				
			Иначе
				
				// возврат отгрузки
				СтрокаТаблицы.СобытиеРасчеты = СобытияПриобретений.ПоступлениеОтПоставщика;
				СтрокаТаблицы.СобытиеВозврат = СобытияПриобретений.ВозвратПоставщику;
				
			КонецЕсли; 
			
		КонецЕсли; 
		
		// установим признак не проведения по регистрам для нулевых сумм
		Если СтрокаТаблицы.СуммаВзаиморасчетов = 0 Тогда
			СтрокаТаблицы.ЗакрыватьВозврат = Ложь;
		КонецЕсли;
		
	КонецЦикла;

	Возврат ТаблицаВозвраты;

КонецФункции

// Проверяет правильность заполнения строк табличной части "Приобретения".
Процедура ПроверитьЗаполнениеТабличнойЧастиПриобретения(СтруктураШапкиДокумента, Отказ, МассивНепроверяемыхРеквизитов)

	// Дополнительные проверки:
	Для каждого Строка Из Приобретения Цикл
		
		Префикс = "Приобретения[%1].";
		Префикс = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Префикс, Формат(Строка.НомерСтроки - 1, "ЧН=0; ЧГ="));
		
		Если Не Строка.ВозвратнаяТара И Строка.РегистрацияПоНДС Тогда
			Если Строка.СчетУчетаНДС.Пустая() Тогда
				Поле = Префикс + "СчетУчетаНДС";
				СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='В строке номер ""%1"" табличной части ""Приобретения"" не заполнено значение реквизита ""Счет НДС (налоговый кредит)""!';uk='У рядку номер ""%1"" табличної частини ""Придбання"" не заповнено значення реквізиту ""Рахунок ПДВ (податковий кредит)""!'"), Строка.НомерСтроки);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения, ЭтотОбъект, Поле, , Отказ);
			КонецЕсли;
			
			Если Строка.СчетУчетаНДСНеподтвержденный.Пустая() Тогда
				Поле = Префикс + "СчетУчетаНДСНеподтвержденный";
				СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='В строке номер ""%1"" табличной части ""Приобретения"" не заполнено значение реквизита ""Счет НДС (неподтвержденный налоговый кредит)""!';uk='У рядку номер ""%1"" табличної частини ""Придбання"" не заповнено значення реквізиту ""Рахунок ПДВ (непідтверджений податковий кредит)""!'"), Строка.НомерСтроки);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения, ЭтотОбъект, Поле, , Отказ);
			КонецЕсли;
		КонецЕсли;
			
	КонецЦикла;
	
КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиПриобретения()

// Проверяет правильность заполнения строк табличной части "Продажи".
Процедура ПроверитьЗаполнениеТабличнойЧастиПродажи(СтруктураШапкиДокумента, Отказ, МассивНепроверяемыхРеквизитов)

	// Дополнительные проверки:
	Для каждого Строка Из Продажи Цикл
		
		Префикс = "Продажи[%1].";
		Префикс = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Префикс, Формат(Строка.НомерСтроки - 1, "ЧН=0; ЧГ="));
		
		Если Не Строка.ВозвратнаяТара И Строка.РегистрацияПоНДС Тогда
			Если Строка.СчетУчетаНДС.Пустая() Тогда
				Поле = Префикс + "СчетУчетаНДС";
				СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='В строке номер ""%1"" табличной части ""Продажи"" не заполнено значение реквизита ""Счет НДС (налоговые обязательства)""!';uk='У рядку номер ""%1"" табличної частини ""Продажі"" не заповнено значення реквізиту ""Рахунок ПДВ (податкові зобов''язання)""!'"), Строка.НомерСтроки);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения, ЭтотОбъект, Поле, , Отказ);
			КонецЕсли;
			
			Если Строка.СчетУчетаНДСНеподтвержденный.Пустая() Тогда
				Поле = Префикс + "СчетУчетаНДСНеподтвержденный";
				СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='В строке номер ""%1"" табличной части ""Продажи"" не заполнено значение реквизита ""Счет НДС (неподтвержденные налоговые обязательства)""!';uk='У рядку номер ""%1"" табличної частини ""Продажі"" не заповнено значення реквізиту ""Рахунок ПДВ (непідтверджені податкові зобов''язання)""!'"), Строка.НомерСтроки);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения, ЭтотОбъект, Поле, , Отказ);
			КонецЕсли;
		КонецЕсли;
	
	КонецЦикла;
	
КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиПродажи()

// Проверяет правильность заполнения строк табличной части "Возвраты".
Процедура ПроверитьЗаполнениеТабличнойЧастиВозвраты(СтруктураШапкиДокумента, Отказ, МассивНепроверяемыхРеквизитов)

	// Дополнительные проверки:
	Для каждого Строка Из Возвраты Цикл
		
		Префикс = "Возвраты[%1].";
		Префикс = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Префикс, Формат(Строка.НомерСтроки - 1, "ЧН=0; ЧГ="));
		
		ВидДоговора = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Строка.ДоговорКонтрагента, "ВидДоговора");
		Если (     ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем
			  И НЕ Строка.ТипКонтрагента = Перечисления.СтатусыКонтрагентов.Покупатель)
			 ИЛИ
			 (     ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком
			  И НЕ Строка.ТипКонтрагента = Перечисления.СтатусыКонтрагентов.Поставщик) Тогда
			  
			Поле = Префикс + "ТипКонтрагента";
			СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='В строке номер ""%1"" табличной части ""Возвраты"" тип контрагента не соответствует виду договора контрагента!';uk='У рядку номер ""%1"" табличної частини ""Повернення"" тип контрагента не відповідає виду договору контрагента!'"), Строка.НомерСтроки);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения, ЭтотОбъект, Поле, , Отказ);
			
		КонецЕсли;
	
	КонецЦикла;
	
КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиПродажи()

// Проверяет правильность заполнения шапки документа.
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, МассивНепроверяемыхРеквизитов)

	Если НЕ СтруктураШапкиДокумента.ЕстьНДС Тогда
	
		СтрокаСообщения = НСтр("ru='По выбранной организации не ведется учет НДС!';uk='По обраній організації не ведеться облік ПДВ!'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения, ЭтотОбъект, "Организация",, Отказ);
	
	КонецЕсли; 
	
КонецПроцедуры // ПроверитьЗаполнениеШапки()

// По результату запроса по шапке документа формируем движения по регистрам.
//
// Параметры: 
//  РежимПроведения           - режим проведения документа (оперативный или неоперативный),
//  СтруктураШапкиДокумента   - структура, содержащая рексвизиты шапки документа и результаты запроса по шапке
//  ТаблицаПоПриобретениям    - таблица значений, содержащая данные для проведения и проверки ТЧ Приобретения
//  ТаблицаПоПродажам         - таблица значений, содержащая данные для проведения и проверки ТЧ Продажи,
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, 
	                          ТаблицаПоПриобретениям, ТаблицаПоПродажам, ТаблицаПоВозвратам,
							  Отказ, Заголовок)
							  
	ЗакрытиеВозвратов(РежимПроведения, СтруктураШапкиДокумента, 
						  ТаблицаПоВозвратам, Отказ, Заголовок);
							  
	ДвиженияПоРегистрамНалоговогоУчета(РежимПроведения, СтруктураШапкиДокумента, 
						  ТаблицаПоПриобретениям, ТаблицаПоПродажам, ТаблицаПоВозвратам, Отказ, Заголовок);
						  
КонецПроцедуры // ДвиженияПоРегистрам()

Процедура ЗакрытиеВозвратов(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоВозвратам, Отказ, Заголовок)
	
	НаборДвиженийПродажи 	 = Движения.ПродажиНалоговыйУчет;
	НаборДвиженийПриобртение = Движения.ПриобретенияНалоговыйУчет;
	
	ТаблицаДвиженийПродажи = НаборДвиженийПродажи.ВыгрузитьКолонки();
	
	ТаблицаДвиженийПриобретение = НаборДвиженийПриобртение.ВыгрузитьКолонки();
	
	// из таблицы получим данные для проведения по двум регистрам
	// в начале для Продаж (тип контрагента - покупатель)
	ПостроительВозвраты = Новый ПостроительЗапроса();
	ПостроительВозвраты.ИсточникДанных = Новый ОписаниеИсточникаДанных(ТаблицаПоВозвратам);
	ПостроительВозвраты.Отбор.Добавить("ЗакрыватьВозврат");
	ПостроительВозвраты.Отбор.ЗакрыватьВозврат.Установить(Истина,Истина);
	
	ПостроительВозвраты.Отбор.Добавить("ТипКонтрагента");
	ПостроительВозвраты.Отбор.ТипКонтрагента.Установить(Перечисления.СтатусыКонтрагентов.Покупатель,Истина);

	ТаблицаПродаж = ПостроительВозвраты.Результат.Выгрузить(ОбходРезультатаЗапроса.Прямой);
	
	// Закрываем событие расчетов (отгрузку или оплату)
	ТаблицаПродаж.Колонки.СобытиеРасчеты.Имя = "Событие";
	ОбщегоНазначенияБПВызовСервера.ЗагрузитьВТаблицуЗначений(ТаблицаПродаж, ТаблицаДвиженийПродажи);
	
	// Закрываем событие возвратов (отгрузку или оплату)
	ТаблицаПродаж.Колонки.Удалить("Событие");
	ТаблицаПродаж.Колонки.СобытиеВозврат.Имя = "Событие";
	ОбщегоНазначенияБПВызовСервера.ЗагрузитьВТаблицуЗначений(ТаблицаПродаж, ТаблицаДвиженийПродажи);
	
	// теперь закрываем приобретения (тип контрагента - поставщик)
	ПостроительВозвраты.Отбор.ТипКонтрагента.Установить(Перечисления.СтатусыКонтрагентов.Поставщик,Истина);

	ТаблицаПриобретений = ПостроительВозвраты.Результат.Выгрузить(ОбходРезультатаЗапроса.Прямой);
	
	// Закрываем событие расчетов (отгрузку или оплату)
	ТаблицаПриобретений.Колонки.СобытиеРасчеты.Имя = "Событие";
	ОбщегоНазначенияБПВызовСервера.ЗагрузитьВТаблицуЗначений(ТаблицаПриобретений, ТаблицаДвиженийПриобретение);
	
	// Закрываем событие возвратов (отгрузку или оплату)
	ТаблицаПриобретений.Колонки.Удалить("Событие");
	ТаблицаПриобретений.Колонки.СобытиеВозврат.Имя = "Событие";
	ОбщегоНазначенияБПВызовСервера.ЗагрузитьВТаблицуЗначений(ТаблицаПриобретений, ТаблицаДвиженийПриобретение);
	
	ТаблицаДвиженийПродажи.ЗаполнитьЗначения(СтруктураШапкиДокумента.Организация,"Организация");
	Если ТаблицаДвиженийПродажи.Количество() > 0 Тогда
		
		НаборДвиженийПродажи.мПериод            = СтруктураШапкиДокумента.Дата;
		НаборДвиженийПродажи.мТаблицаДвижений   = ТаблицаДвиженийПродажи;

		Если Не Отказ Тогда
			Движения.ПродажиНалоговыйУчет.ВыполнитьРасход();
		КонецЕсли;
		
	КонецЕсли;
	
	ТаблицаДвиженийПриобретение.ЗаполнитьЗначения(СтруктураШапкиДокумента.Организация,"Организация");
	Если ТаблицаДвиженийПриобретение.Количество() > 0 Тогда
		
		НаборДвиженийПриобртение.мПериод            = СтруктураШапкиДокумента.Дата;
		НаборДвиженийПриобртение.мТаблицаДвижений   = ТаблицаДвиженийПриобретение;

		Если Не Отказ Тогда
			Движения.ПриобретенияНалоговыйУчет.ВыполнитьРасход();
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

Процедура ДвиженияПоРегистрамНалоговогоУчета(РежимПроведения, СтруктураШапкиДокумента, 
	                          ТаблицаПоПриобретениям, ТаблицаПоПродажам, ТаблицаПоВозвратам, Отказ, Заголовок)
							
	ДатаСторноДвижений = КонецМесяца(СтруктураШапкиДокумента.Дата)+2;
	
	ПроводкиБУ = Движения.Хозрасчетный;
	
	// движения по  приобретениям
	НаборДвиженийОиПНДСПриобретений 	= Движения.ОжидаемыйИПодтвержденныйНДСПриобретений;
	// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
	ТаблицаДвиженийОиПНДСПриобретений	= НаборДвиженийОиПНДСПриобретений.ВыгрузитьКолонки();
	
	// движения по приобретений налоговый учет
	НаборДвиженийНУПриобретений 	= Движения.ПриобретенияНалоговыйУчет;
	// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
	ТаблицаДвиженийНУПриобретений 	= НаборДвиженийНУПриобретений.ВыгрузитьКолонки();
	
	ТаблицаКопия = ТаблицаПоПриобретениям.Скопировать();
	
	//удалим те строки, для которых не требуется регистрация по НДС
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("РегистрацияПоНДС", Ложь);
	НайденныеСтроки = ТаблицаКопия.НайтиСтроки(СтруктураПоиска);
	Для Каждого Строка Из НайденныеСтроки Цикл
		ТаблицаКопия.Удалить(Строка);
	КонецЦикла;
	
	// ДВИЖЕНИЯ ПО РЕГИСТРУ ПриобретенийНалоговыйУчет
	ОбщегоНазначенияБПВызовСервера.ЗагрузитьВТаблицуЗначений(ТаблицаКопия, ТаблицаДвиженийНУПриобретений);
	
	ТаблицаДвиженийНУПриобретений.ЗаполнитьЗначения(СтруктураШапкиДокумента.Организация,"Организация");
	
	ТаблицаДвиженийНУПриобретений.ЗаполнитьЗначения(Перечисления.СтавкиНДС.ПустаяСсылка(),"СтавкаНДС");
	ТаблицаДвиженийНУПриобретений.ЗаполнитьЗначения(Ложь,"ДляХозяйственнойДеятельности");
	ТаблицаДвиженийНУПриобретений.ЗаполнитьЗначения(Перечисления.ВидыДеятельностиНДС.ПустаяСсылка(),"ВидДеятельностиНДС");
	ТаблицаДвиженийНУПриобретений.ЗаполнитьЗначения(Ложь,"Амортизируется");
	ТаблицаДвиженийНУПриобретений.ЗаполнитьЗначения(0,"СуммаНДС");
	ТаблицаДвиженийНУПриобретений.ЗаполнитьЗначения(0,"СуммаНДСПропорционально");
	
	НаборДвиженийНУПриобретений.мПериод            = СтруктураШапкиДокумента.Дата;
	НаборДвиженийНУПриобретений.мТаблицаДвижений   = ТаблицаДвиженийНУПриобретений;

	Если Не Отказ Тогда
		Движения.ПриобретенияНалоговыйУчет.ВыполнитьПриход();
	КонецЕсли;
	
	// теперь сделаем сторно на конец периода
	Для каждого Строка  Из ТаблицаДвиженийНУПриобретений Цикл
		Строка.СуммаВзаиморасчетов = - Строка.СуммаВзаиморасчетов;
	КонецЦикла;
							  
	НаборДвиженийНУПриобретений.мПериод            = ДатаСторноДвижений;
	НаборДвиженийНУПриобретений.мТаблицаДвижений   = ТаблицаДвиженийНУПриобретений;

	Если Не Отказ Тогда
		Движения.ПриобретенияНалоговыйУчет.ВыполнитьПриход();
	КонецЕсли;	
	
	
	// ДВИЖЕНИЯ ПО РЕГИСТРУ ОжидаемыйИПодтвержденныйНДСПриобретений
	Если СтруктураШапкиДокумента.ЕстьНДС Тогда
		Сч = 0;
		Пока Сч < ТаблицаКопия.Количество() Цикл
			СтрокаТаблицыКопии = ТаблицаКопия[Сч];
			Если НЕ СтрокаТаблицыКопии.ВалютаВзаиморасчетов = мВалютаРегламентированногоУчета Тогда
				// приобретение у нерезидента не отражается в подсистеме учета НДС
				ТаблицаКопия.Удалить(СтрокаТаблицыКопии);
			ИначеЕсли СтрокаТаблицыКопии.СобытиеНДС = Перечисления.СобытияОжидаемыйИПодтвержденныйНДСПриобретений.Возврат
				И СтрокаТаблицыКопии.ВозвратнаяТара Тогда
				// по возвратной таре при возвратах не учитываем ожидаемый и подтвержденный НДС
				ТаблицаКопия.Удалить(СтрокаТаблицыКопии);	
			Иначе
				Сч = Сч + 1;
			КонецЕсли;
		КонецЦикла; 
		
		// Колонку СчетУчетаНДСНеподтвержденный "переименуем" в СчетУчетаНДС, как в регистре
		ТаблицаКопия.Колонки.Удалить("СчетУчетаНДС");
		ТаблицаКопия.Колонки.СчетУчетаНДСНеподтвержденный.Имя = "СчетУчетаНДС";
		
		// Колонку НДСВходящий "переименуем" в СуммаНДС, как в регистре
		ТаблицаКопия.Колонки.НДСВходящий.Имя = "СуммаНДС";	
		
		// Заполним таблицу движений.
		ОбщегоНазначенияБПВызовСервера.ЗагрузитьВТаблицуЗначений(ТаблицаКопия, ТаблицаДвиженийОиПНДСПриобретений);
		
		ТаблицаДвиженийОиПНДСПриобретений.ЗаполнитьЗначения(СтруктураШапкиДокумента.Организация,"Организация");
		ТаблицаДвиженийОиПНДСПриобретений.ЗаполнитьЗначения(Перечисления.КодыОперацийОжидаемыйИПодтвержденныйНДСПриобретений.РегистрацияАвансов,"КодОперации");
		
		НаборДвиженийОиПНДСПриобретений.мПериод            = СтруктураШапкиДокумента.Дата;
		НаборДвиженийОиПНДСПриобретений.мТаблицаДвижений   = ТаблицаДвиженийОиПНДСПриобретений;
		
		Если Не Отказ Тогда
			Движения.ОжидаемыйИПодтвержденныйНДСПриобретений.ВыполнитьПриход();
		КонецЕсли;
		
		// теперь сделаем сторно на конец периода
		ТаблицаДвиженийОиПНДСПриобретений.Очистить();
		
		ТабВозвраты = ПодготовитьТаблицуВозвратовДляКорректировок(ТаблицаПоВозвратам, Перечисления.СтатусыКонтрагентов.Поставщик);
		
		// удалим формирование движений сторнодвижений по закрываемым неполным возвратам
		Инд = 0;
		Пока ТаблицаКопия.Количество() > Инд Цикл
			СтрокаТаблицы = ТаблицаКопия[Инд];
			СтрокаТаблицы.БазаНДС = СуммаКорректирующейПроводкиСУчетомЗакрытияВозвратов(СтрокаТаблицы.БазаНДС, ТабВозвраты, СтрокаТаблицы);
			СтрокаТаблицы.СуммаНДС = СуммаКорректирующейПроводкиСУчетомЗакрытияВозвратов(СтрокаТаблицы.СуммаНДС, ТабВозвраты, СтрокаТаблицы);
			СтрокаТаблицы.СуммаНДСПропорционально = СуммаКорректирующейПроводкиСУчетомЗакрытияВозвратов(СтрокаТаблицы.СуммаНДСПропорционально, ТабВозвраты, СтрокаТаблицы);
			
			Если СтрокаТаблицы.БазаНДС = 0 И СтрокаТаблицы.СуммаНДС = 0 Тогда
				
				ТаблицаКопия.Удалить(СтрокаТаблицы);
				Продолжить;
				
			КонецЕсли;
			Инд = Инд + 1;
		КонецЦикла;
		
		ОбщегоНазначенияБПВызовСервера.ЗагрузитьВТаблицуЗначений(ТаблицаКопия, ТаблицаДвиженийОиПНДСПриобретений);
		ТаблицаДвиженийОиПНДСПриобретений.ЗаполнитьЗначения(Перечисления.КодыОперацийОжидаемыйИПодтвержденныйНДСПриобретений.ОтменаРегистрацииАвансов,"КодОперации");
		ТаблицаДвиженийОиПНДСПриобретений.ЗаполнитьЗначения(СтруктураШапкиДокумента.Организация,"Организация");
		Для каждого Строка  Из ТаблицаДвиженийОиПНДСПриобретений Цикл
			Строка.БазаНДС 		= - Строка.БазаНДС;
			Строка.СуммаНДС 	= - Строка.СуммаНДС;
			Строка.СуммаНДСПропорционально 	= - Строка.СуммаНДСПропорционально;
		КонецЦикла;
		
		НаборДвиженийОиПНДСПриобретений.мПериод            = ДатаСторноДвижений;
		НаборДвиженийОиПНДСПриобретений.мТаблицаДвижений   = ТаблицаДвиженийОиПНДСПриобретений;
		
		Если Не Отказ Тогда
			Движения.ОжидаемыйИПодтвержденныйНДСПриобретений.ВыполнитьПриход();
		КонецЕсли;
		
		// Проводки по бухгалтерскому учету
		Для каждого СтрокаТаблицы Из ТаблицаПоПриобретениям Цикл
			
			СуммаПроводки = СтрокаТаблицы.ПроводкиСуммаНДСРегл;
			
			Если СуммаПроводки = 0 Тогда
				Продолжить;
			КонецЕсли; 
			
			Проводка = ПроводкиБУ.Добавить();
			
			Проводка.Период                     = СтруктураШапкиДокумента.Дата;
			Проводка.Активность                 = Истина;
			Проводка.Организация                = СтруктураШапкиДокумента.Организация;
			Проводка.Сумма                      = СуммаПроводки;
			
			Проводка.СчетДт						= СтрокаТаблицы.СчетУчетаНДСНеподтвержденный;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты", СтрокаТаблицы.Контрагент);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Договоры"   , СтрокаТаблицы.ДоговорКонтрагента);
			
			Проводка.СчетКт						= СтрокаТаблицы.СчетУчетаНДС;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Контрагенты", СтрокаТаблицы.Контрагент);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Договоры"   , СтрокаТаблицы.ДоговорКонтрагента);
			
			Проводка.Содержание					= НСтр("ru='Регистрация авансов по приобретениям';uk='Реєстрація авансів по придбаннях'",Локализация.КодЯзыкаИнформационнойБазы());
			
		КонецЦикла; 
		
		// обратные движения на начало следующего месяца
		ТабВозвраты = ПодготовитьТаблицуВозвратовДляКорректировок(ТаблицаПоВозвратам, Перечисления.СтатусыКонтрагентов.Поставщик);
		Для каждого СтрокаТаблицы Из ТаблицаПоПриобретениям Цикл
			
			СуммаПроводки = -СтрокаТаблицы.ПроводкиСуммаНДСРегл;
			
			// подкорректируем сумму по закрытиям возвратов
			СуммаПроводки = СуммаКорректирующейПроводкиСУчетомЗакрытияВозвратов(СуммаПроводки, ТабВозвраты, СтрокаТаблицы);
			
			Если СуммаПроводки = 0 Тогда
				Продолжить;
			КонецЕсли; 
			
			Проводка = ПроводкиБУ.Добавить();
			
			Проводка.Период                     = ДатаСторноДвижений;
			Проводка.Активность                 = Истина;
			Проводка.Организация                = СтруктураШапкиДокумента.Организация;
			Проводка.Сумма                      = СуммаПроводки;
			
			Проводка.СчетДт						= СтрокаТаблицы.СчетУчетаНДСНеподтвержденный;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты", СтрокаТаблицы.Контрагент);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Договоры"   , СтрокаТаблицы.ДоговорКонтрагента);
			
			Проводка.СчетКт						= СтрокаТаблицы.СчетУчетаНДС;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Контрагенты", СтрокаТаблицы.Контрагент);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Договоры"   , СтрокаТаблицы.ДоговорКонтрагента);
			
			Проводка.Содержание					= НСтр("ru='Отмена регистрации авансов по приобретениям';uk='Скасування реєстрації авансів по придбаннях'",Локализация.КодЯзыкаИнформационнойБазы());
			
		КонецЦикла; 
		
	КонецЕсли;
	
	// движения по продажам
	НаборДвиженийОиПНДСПродаж = Движения.ОжидаемыйИПодтвержденныйНДСПродаж;
	// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
	ТаблицаДвиженийОиПНДСПродаж = НаборДвиженийОиПНДСПродаж.ВыгрузитьКолонки();
	
	НаборДвиженийНУПродаж = Движения.ПродажиНалоговыйУчет;
	// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
	ТаблицаДвиженийНУПродаж = НаборДвиженийНУПродаж.ВыгрузитьКолонки();
	
	ТаблицаКопия = ТаблицаПоПродажам.Скопировать();
	
	//удалим те строки, для которых не требуется регистрация по НДС
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("РегистрацияПоНДС", Ложь);
	НайденныеСтроки = ТаблицаКопия.НайтиСтроки(СтруктураПоиска);
	Для Каждого Строка Из НайденныеСтроки Цикл
		ТаблицаКопия.Удалить(Строка);
	КонецЦикла;
	
	// ДВИЖЕНИЯ ПО РЕГИСТРУ ПродажиНалоговыйУчет
	ОбщегоНазначенияБПВызовСервера.ЗагрузитьВТаблицуЗначений(ТаблицаКопия, ТаблицаДвиженийНУПродаж);
	
	ТаблицаДвиженийНУПродаж.ЗаполнитьЗначения(СтруктураШапкиДокумента.Организация,"Организация");
	
	ТаблицаДвиженийНУПродаж.ЗаполнитьЗначения(Перечисления.СтавкиНДС.ПустаяСсылка(),"СтавкаНДС");
	ТаблицаДвиженийНУПродаж.ЗаполнитьЗначения(0,"СуммаНДС");
	
	НаборДвиженийНУПродаж.мПериод            = СтруктураШапкиДокумента.Дата;
	НаборДвиженийНУПродаж.мТаблицаДвижений   = ТаблицаДвиженийНУПродаж;

	Если Не Отказ Тогда
		Движения.ПродажиНалоговыйУчет.ВыполнитьПриход();
	КонецЕсли;
	
	// теперь сделаем сторно на конец периода
	Для каждого Строка  Из ТаблицаДвиженийНУПродаж Цикл
		Строка.СуммаВзаиморасчетов = - Строка.СуммаВзаиморасчетов;
	КонецЦикла;
							  
	НаборДвиженийНУПродаж.мПериод            = ДатаСторноДвижений;
	НаборДвиженийНУПродаж.мТаблицаДвижений   = ТаблицаДвиженийНУПродаж;

	Если Не Отказ Тогда
		Движения.ПродажиНалоговыйУчет.ВыполнитьПриход();
	КонецЕсли;	
	
	// ДВИЖЕНИЯ ПО РЕГИСТРУ ОжидаемыйИПодтвержденныйНДСПродаж
	Если СтруктураШапкиДокумента.ЕстьНДС Тогда
		
		Сч = 0;
		Пока Сч < ТаблицаКопия.Количество() Цикл
			СтрокаТаблицыКопии = ТаблицаКопия[Сч];
			Если СтрокаТаблицыКопии.СобытиеНДС = Перечисления.СобытияОжидаемыйИПодтвержденныйНДСПродаж.Возврат
				И СтрокаТаблицыКопии.ВозвратнаяТара Тогда
				// по возвратной таре при возвратах не учитываем ожидаемый и подтвержденный НДС
				ТаблицаКопия.Удалить(СтрокаТаблицыКопии);	
			Иначе
				Сч = Сч + 1;
			КонецЕсли;
		КонецЦикла; 
		
		// Колонку СчетУчетаНДСНеподтвержденный "переименуем" в СчетУчетаНДС, как в регистре
		ТаблицаКопия.Колонки.Удалить("СчетУчетаНДС");
		ТаблицаКопия.Колонки.СчетУчетаНДСНеподтвержденный.Имя = "СчетУчетаНДС";
		
		// Колонку НДС "переименуем" в СуммаНДС, как в регистре
		ТаблицаКопия.Колонки.НДС.Имя = "СуммаНДС";
		
		// Заполним таблицу движений.
		ОбщегоНазначенияБПВызовСервера.ЗагрузитьВТаблицуЗначений(ТаблицаКопия, ТаблицаДвиженийОиПНДСПродаж);
		
		ТаблицаДвиженийОиПНДСПродаж.ЗаполнитьЗначения(СтруктураШапкиДокумента.Организация,"Организация");
		ТаблицаДвиженийОиПНДСПродаж.ЗаполнитьЗначения(Перечисления.КодыОперацийОжидаемыйИПодтвержденныйНДСПродаж.РегистрацияАвансов,"КодОперации");
		
		НаборДвиженийОиПНДСПродаж.мПериод            = СтруктураШапкиДокумента.Дата;
		НаборДвиженийОиПНДСПродаж.мТаблицаДвижений   = ТаблицаДвиженийОиПНДСПродаж;
		
		Если Не Отказ Тогда
			Движения.ОжидаемыйИПодтвержденныйНДСПродаж.ВыполнитьПриход();
		КонецЕсли;
		
		// теперь сделаем сторно на конец периода
		ТабВозвраты = ПодготовитьТаблицуВозвратовДляКорректировок(ТаблицаПоВозвратам, Перечисления.СтатусыКонтрагентов.Покупатель);
		ТаблицаДвиженийОиПНДСПродаж.Очистить();
		// удалим формирование сторно-движений по закрываемым неполным возвратам
		Инд = 0;
		Пока ТаблицаКопия.Количество() > Инд Цикл
			СтрокаТаблицы = ТаблицаКопия[Инд];
			СтрокаТаблицы.БазаНДС = СуммаКорректирующейПроводкиСУчетомЗакрытияВозвратов(СтрокаТаблицы.БазаНДС, ТабВозвраты, СтрокаТаблицы);
			СтрокаТаблицы.СуммаНДС = СуммаКорректирующейПроводкиСУчетомЗакрытияВозвратов(СтрокаТаблицы.СуммаНДС, ТабВозвраты, СтрокаТаблицы);
			Если СтрокаТаблицы.БазаНДС = 0 И СтрокаТаблицы.СуммаНДС = 0 Тогда
				
				ТаблицаКопия.Удалить(СтрокаТаблицы);
				Продолжить;
				
			КонецЕсли;
			Инд = Инд + 1;
		КонецЦикла;
		
		ОбщегоНазначенияБПВызовСервера.ЗагрузитьВТаблицуЗначений(ТаблицаКопия, ТаблицаДвиженийОиПНДСПродаж);
		ТаблицаДвиженийОиПНДСПродаж.ЗаполнитьЗначения(СтруктураШапкиДокумента.Организация,"Организация");
		ТаблицаДвиженийОиПНДСПродаж.ЗаполнитьЗначения(Перечисления.КодыОперацийОжидаемыйИПодтвержденныйНДСПродаж.ОтменаРегистрацииАвансов,"КодОперации");
		Для каждого Строка  Из ТаблицаДвиженийОиПНДСПродаж Цикл
			Строка.БазаНДС 		= - Строка.БазаНДС;
			Строка.СуммаНДС 	= - Строка.СуммаНДС;
		КонецЦикла;
		
		НаборДвиженийОиПНДСПродаж.мПериод            = ДатаСторноДвижений;
		НаборДвиженийОиПНДСПродаж.мТаблицаДвижений   = ТаблицаДвиженийОиПНДСПродаж;
		
		Если Не Отказ Тогда
			Движения.ОжидаемыйИПодтвержденныйНДСПродаж.ВыполнитьПриход();
		КонецЕсли;
		
		// Проводки по бухгалтерскому учету
		Для каждого СтрокаТаблицы Из ТаблицаПоПродажам Цикл
			
			СуммаПроводки = СтрокаТаблицы.ПроводкиСуммаНДСРегл;
			Если СуммаПроводки = 0 Тогда
				Продолжить;
			КонецЕсли; 
			
			Проводка = ПроводкиБУ.Добавить();
			
			Проводка.Период                     = СтруктураШапкиДокумента.Дата;
			Проводка.Активность                 = Истина;
			Проводка.Организация                = СтруктураШапкиДокумента.Организация;
			Проводка.Сумма                      = СуммаПроводки;
			
			Проводка.СчетДт						= СтрокаТаблицы.СчетУчетаНДС;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты", СтрокаТаблицы.Контрагент);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Договоры"   , СтрокаТаблицы.ДоговорКонтрагента);
			
			Проводка.СчетКт						= СтрокаТаблицы.СчетУчетаНДСНеподтвержденный;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Контрагенты", СтрокаТаблицы.Контрагент);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Договоры"   , СтрокаТаблицы.ДоговорКонтрагента);
			
			
			Проводка.Содержание					= НСтр("ru='Регистрация авансов по продажам';uk='Реєстрація авансів по продажах'",Локализация.КодЯзыкаИнформационнойБазы());
			
		КонецЦикла; 
		
		ТабВозвраты = ПодготовитьТаблицуВозвратовДляКорректировок(ТаблицаПоВозвратам, Перечисления.СтатусыКонтрагентов.Покупатель);
		
		// обратные движения на начало следующего месяца
		Для каждого СтрокаТаблицы Из ТаблицаПоПродажам Цикл
			
			СуммаПроводки = -СтрокаТаблицы.ПроводкиСуммаНДСРегл;
			
			// подкорректируем сумму по закрытиям возвратов
			СуммаПроводки = СуммаКорректирующейПроводкиСУчетомЗакрытияВозвратов(СуммаПроводки, ТабВозвраты, СтрокаТаблицы);
			
			Если СуммаПроводки = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			Проводка = ПроводкиБУ.Добавить();
			
			Проводка.Период                     = ДатаСторноДвижений;
			Проводка.Активность                 = Истина;
			Проводка.Организация                = СтруктураШапкиДокумента.Организация;
			Проводка.Сумма                      = СуммаПроводки;
			
			Проводка.СчетДт						= СтрокаТаблицы.СчетУчетаНДС;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты", СтрокаТаблицы.Контрагент);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Договоры"   , СтрокаТаблицы.ДоговорКонтрагента);
			
			Проводка.СчетКт						= СтрокаТаблицы.СчетУчетаНДСНеподтвержденный;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Контрагенты", СтрокаТаблицы.Контрагент);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Договоры"   , СтрокаТаблицы.ДоговорКонтрагента);
			
			Проводка.Содержание					= НСтр("ru='Отмена регистрации авансов по продажам';uk='Скасування реєстрації авансів по продажах'",Локализация.КодЯзыкаИнформационнойБазы());
			
		КонецЦикла; 
		
	КонецЕсли; 
	
КонецПроцедуры // ДвиженияПоРегистрам_НДС()

// Процедура формирует структуру шапки документа и дополнительных полей.
//
Процедура ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента) Экспорт
	
	// Дерево значений, содержащее имена необходимых полей в запросе по шапке.
	Перем ДеревоПолейЗапросаПоШапке;
	
	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента = ОбщегоНазначенияРед12.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);

	// Заполним по шапке документа дерево параметров, нужных при проведении.
	ДеревоПолейЗапросаПоШапке = ОбщегоНазначенияРед12.СформироватьДеревоПолейЗапросаПоШапке();
	
	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа
	СтруктураШапкиДокумента = УправлениеЗапасами.СформироватьЗапросПоДеревуПолей(ЭтотОбъект, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета);
	
КонецПроцедуры // ПодготовитьСтруктуруШапкиДокумента()

// Процедура формирует таблицы документа.
//
Процедура ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоПриобретениям, ТаблицаПоПродажам, ТаблицаПоВозвратам, Отказ, Заголовок) Экспорт
	
	// Получим необходимые данные для проведения и проверки заполенения данные по табличной части "Приобретения".
	СтруктураПолей        = Новый Структура;

	СтруктураПолей.Вставить("Контрагент"                           , "Контрагент");
	СтруктураПолей.Вставить("ДоговорКонтрагента"                   , "ДоговорКонтрагента");
	СтруктураПолей.Вставить("ВалютаВзаиморасчетов"                 , "ДоговорКонтрагента.ВалютаВзаиморасчетов");
	СтруктураПолей.Вставить("ДоговорОрганизация"                   , "ДоговорКонтрагента.Организация");
	СтруктураПолей.Вставить("СложныйНалоговыйУчет"                 , "ДоговорКонтрагента.СложныйНалоговыйУчет");
	СтруктураПолей.Вставить("ВедениеВзаиморасчетовНУ"              , "ДоговорКонтрагента.ВедениеВзаиморасчетовНУ");
	СтруктураПолей.Вставить("ВозвратнаяТара"                       , "ВозвратнаяТара");
	СтруктураПолей.Вставить("ВидОперации"                          , "ВидОперации");
	СтруктураПолей.Вставить("РегистрацияПоНДС"                     , "РегистрацияПоНДС");
	СтруктураПолей.Вставить("СтавкаНДС"                  		   , "СтавкаНДС");
	СтруктураПолей.Вставить("СуммаВзаиморасчетов"                  , "СуммаВзаиморасчетов");
	СтруктураПолей.Вставить("СуммаВзаиморасчетовРегл"	 		   , "СуммаВзаиморасчетовРегл");
	СтруктураПолей.Вставить("БазаНДС"                          	   , "БазаНДС");
	СтруктураПолей.Вставить("НДСВходящий"                          , "НДСВходящий");
	СтруктураПолей.Вставить("СчетУчетаНДС"                         , "СчетУчетаНДС");
	СтруктураПолей.Вставить("СчетУчетаНДСНеподтвержденный"         , "СчетУчетаНДСНеподтвержденный");
	СтруктураПолей.Вставить("НалоговоеНазначение"     			   , "НалоговоеНазначение");
	СтруктураПолей.Вставить("Амортизируется"     				   , "Амортизируется");
	СтруктураПолей.Вставить("ВидДеятельностиНДС"     			   , "НалоговоеНазначение.ВидДеятельностиНДС");
	СтруктураПолей.Вставить("СуммаНДСПропорционально"				, "СуммаНДСПропорциональноКредит");
	
	РезультатЗапросаПоПриобретениям = ОбщегоНазначенияРед12.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Приобретения", СтруктураПолей);
	
	// Получим необходимые данные для проведения и проверки заполенения данные по табличной части "Продажи".
	СтруктураПолей        = Новый Структура;

	СтруктураПолей.Вставить("Контрагент"                           , "Контрагент");
	СтруктураПолей.Вставить("ДоговорКонтрагента"                   , "ДоговорКонтрагента");
	СтруктураПолей.Вставить("ВалютаВзаиморасчетов"                 , "ДоговорКонтрагента.ВалютаВзаиморасчетов");
	СтруктураПолей.Вставить("ДоговорОрганизация"                   , "ДоговорКонтрагента.Организация");
	СтруктураПолей.Вставить("СложныйНалоговыйУчет"                 , "ДоговорКонтрагента.СложныйНалоговыйУчет");
	СтруктураПолей.Вставить("ВедениеВзаиморасчетовНУ"              , "ДоговорКонтрагента.ВедениеВзаиморасчетовНУ");
	СтруктураПолей.Вставить("ВозвратнаяТара"                       , "ВозвратнаяТара");
	СтруктураПолей.Вставить("ВидОперации"                          , "ВидОперации");
	СтруктураПолей.Вставить("РегистрацияПоНДС"                     , "РегистрацияПоНДС");
	СтруктураПолей.Вставить("СтавкаНДС"                  		   , "СтавкаНДС");
	СтруктураПолей.Вставить("СуммаВзаиморасчетов"                  , "СуммаВзаиморасчетов");
	СтруктураПолей.Вставить("СуммаВзаиморасчетовРегл"	 		   , "СуммаВзаиморасчетовРегл");
	СтруктураПолей.Вставить("БазаНДС"                          	   , "БазаНДС");
	СтруктураПолей.Вставить("НДС"                          		   , "НДС");
	СтруктураПолей.Вставить("СчетУчетаНДС"                         , "СчетУчетаНДС");
	СтруктураПолей.Вставить("СчетУчетаНДСНеподтвержденный"         , "СчетУчетаНДСНеподтвержденный");
	
	РезультатЗапросаПоПродажам = ОбщегоНазначенияРед12.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Продажи", СтруктураПолей);
	
	// Получим необходимые данные для проведения и проверки заполенения данные по табличной части "Возвраты".
	СтруктураПолей        = Новый Структура;

	СтруктураПолей.Вставить("Контрагент"                           , "Контрагент");
	СтруктураПолей.Вставить("ДоговорКонтрагента"                   , "ДоговорКонтрагента");
	СтруктураПолей.Вставить("ВидДоговора"		                   , "ДоговорКонтрагента.ВидДоговора");
	СтруктураПолей.Вставить("ДоговорОрганизация"                   , "ДоговорКонтрагента.Организация");
	СтруктураПолей.Вставить("СложныйНалоговыйУчет"                 , "ДоговорКонтрагента.СложныйНалоговыйУчет");
	СтруктураПолей.Вставить("ВедениеВзаиморасчетовНУ"              , "ДоговорКонтрагента.ВедениеВзаиморасчетовНУ");
	СтруктураПолей.Вставить("ВозвратнаяТара"                       , "ВозвратнаяТара");
	СтруктураПолей.Вставить("ТипКонтрагента"                       , "ТипКонтрагента");
	СтруктураПолей.Вставить("ПревышениеОтгрузкиНадОплатой"		   , "ПревышениеОтгрузкиНадОплатой");
	СтруктураПолей.Вставить("СуммаВзаиморасчетовРегл"		 	   , "ПревышениеОтгрузкиНадОплатой");
	СтруктураПолей.Вставить("СуммаВзаиморасчетов"		 	   	   , "ПревышениеОтгрузкиНадОплатой");
	СтруктураПолей.Вставить("ЗакрыватьВозврат"                     , "НеПредполагаетсяЗакрывающаяОперация");
	
	РезультатЗапросаПоВозвратам = ОбщегоНазначенияРед12.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Возвраты", СтруктураПолей);
	
	// Подготовим таблицы товаров для проведения.
	ТаблицаПоПриобретениям      = ПодготовитьТаблицуПриобретения(РезультатЗапросаПоПриобретениям, СтруктураШапкиДокумента);
	ТаблицаПоПродажам      		= ПодготовитьТаблицуПродажи(РезультатЗапросаПоПродажам, СтруктураШапкиДокумента);
	ТаблицаПоВозвратам     		= ПодготовитьТаблицуВозвраты(РезультатЗапросаПоВозвратам, СтруктураШапкиДокумента);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого Строка Из Приобретения Цикл
		// поправим налоговые реквизииты
		Если Строка.ВозвратнаяТара Тогда
			
			Строка.СтавкаНДС 	= Перечисления.СтавкиНДС.НеНДС;
			Строка.НДСВходящий  = 0;
			Строка.СуммаНДСПропорциональноКредит = 0;
			Строка.Амортизируется = 0;
			Строка.СчетУчетаНДСНеподтвержденный = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
			Строка.СчетУчетаНДС = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
			Строка.НалоговоеНазначение = Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяХозДеятельность;
			
		КонецЕсли; 
	КонецЦикла; 
		
	Для каждого Строка Из Продажи Цикл
		// поправим налоговые реквизииты
		Если Строка.ВозвратнаяТара Тогда
			
			Строка.СтавкаНДС = Перечисления.СтавкиНДС.НеНДС;
			Строка.НДС  	 = 0;
			Строка.СчетУчетаНДСНеподтвержденный = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
			Строка.СчетУчетаНДС = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
			
		КонецЕсли; 
	КонецЦикла; 
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	Перем Заголовок, СтруктураШапкиДокумента;
	Перем ТаблицаПоПриобретениям, ТаблицаПоПродажам, ТаблицаПоВозвратам;

	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначенияБПВызовСервера.ПредставлениеДокументаПриПроведении(Ссылка);
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКПроведению(ЭтотОбъект);
	Если РучнаяКорректировка Тогда
		Возврат;
	КонецЕсли;

	ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента);
	
	СтруктураШапкиДокумента.Вставить("ЕстьНДС"                        , УчетнаяПолитика.ПлательщикНДС(СтруктураШапкиДокумента.Организация, КонецМесяца(СтруктураШапкиДокумента.Дата)));
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоПриобретениям, ТаблицаПоПродажам, ТаблицаПоВозвратам, Отказ, Заголовок);
	
	
	// Движения по документу
	Если Не Отказ Тогда
		ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, 
							ТаблицаПоПриобретениям, ТаблицаПоПродажам, ТаблицаПоВозвратам, Отказ, Заголовок);
	КонецЕсли;
	
	Движения.Хозрасчетный.ВыполнитьДействияПередЗаписьюДвижений();
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКЗаписиДвижений(ЭтотОбъект);

КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКОтменеПроведения(ЭтотОбъект);
	Движения.Записать();
	
    
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	МассивНепроверяемыхРеквизитов = Новый Массив();
	
	СтруктураШапкиДокумента		  = Новый Структура;
	
	СтруктураШапкиДокумента.Вставить("ЕстьНДС",					 УчетнаяПолитика.ПлательщикНДС(Организация, Дата));
	
	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, МассивНепроверяемыхРеквизитов);
	
	ПроверитьЗаполнениеТабличнойЧастиПриобретения(СтруктураШапкиДокумента, Отказ, МассивНепроверяемыхРеквизитов);
	ПроверитьЗаполнениеТабличнойЧастиПродажи(СтруктураШапкиДокумента, Отказ, МассивНепроверяемыхРеквизитов);
	ПроверитьЗаполнениеТабличнойЧастиВозвраты(СтруктураШапкиДокумента, Отказ, МассивНепроверяемыхРеквизитов);
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)

	ЗаполнениеДокументов.Заполнить(ЭтотОбъект, ДанныеЗаполнения);

КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)

	Дата = НачалоДня(ОбщегоНазначенияБП.ПолучитьРабочуюДату());
	Ответственный = Пользователи.ТекущийПользователь();

КонецПроцедуры

мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
#КонецЕсли
