#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
Перем мВалютаРегламентированногоУчета;
Перем мУчетнаяПолитика;
Перем мИспользоватьОборотнуюНоменклатуру;
Перем мРазделятьПоСтавкамНДС;
Перем мУчетВПродажныхЦенах;

Перем ПартионныйУчетБУ;
Перем РозницаВПродажныхЦенах;


#Область ОбработчикиСобытий

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	МассивНепроверяемыхРеквизитов = Новый Массив();
	
	СтруктураШапкиДокумента		  = Новый Структура;
	
	СтруктураШапкиДокумента.Вставить("ЕстьНДС",								УчетнаяПолитика.ПлательщикНДС(Организация, Дата));
	СтруктураШапкиДокумента.Вставить("ЕстьНалогНаПрибыльДо2015",			УчетнаяПолитика.ПлательщикНалогаНаПрибыльДо2015(Организация, Дата));
	СтруктураШапкиДокумента.Вставить("ВалютаРегламентированногоУчета", 		ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета());
	СтруктураШапкиДокумента.Вставить("РозницаВПродажныхЦенах", 				(УчетнаяПолитика.СпособОценкиТоваровВРознице(Организация, Дата) = Перечисления.СпособыОценкиТоваровВРознице.ПоПродажнойСтоимости));
	СтруктураШапкиДокумента.Вставить("ТипСклада",			 				ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Склад, "ТипСклада"));
	СтруктураШапкиДокумента.Вставить("ТипЦенРозничнойТорговли", 			ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Склад, "ТипЦенРозничнойТорговли"));
	СтруктураШапкиДокумента.Вставить("ВидОперации", 						ВидОперации);
	
	СтруктураШапкиДокумента.Вставить("РазделятьПоСтавкамНДС", БухгалтерскийУчетВызовСервераПовтИсп.ИспользуетсяРазделениеПоСтавкамНДСВНТТ());
	
	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, МассивНепроверяемыхРеквизитов);
	

	НеИспользуемыеТабличныеЧасти = Новый Массив;
	
	Если ВидОперации <> Перечисления.ВидыОперацийОприходованиеТоваров.БланкиСтрогогоУчета Тогда
		ПроверитьЗаполнениеТабличнойЧастиТовары(СтруктураШапкиДокумента, Отказ, МассивНепроверяемыхРеквизитов);
	Иначе
		НеИспользуемыеТабличныеЧасти.Добавить("Товары");
	КонецЕсли;	
	
	Если ВидОперации = Перечисления.ВидыОперацийОприходованиеТоваров.БланкиСтрогогоУчета 
		 И ПолучитьФункциональнуюОпцию("ИспользоватьБланкиСтрогогоУчета") Тогда
		ПроверитьЗаполнениеТабличнойЧастиБланкиСтрогогоУчета(СтруктураШапкиДокумента, Отказ, МассивНепроверяемыхРеквизитов);
	Иначе
		НеИспользуемыеТабличныеЧасти.Добавить("БланкиСтрогогоУчета");
	КонецЕсли;	
	
	ОбщегоНазначенияБП.ИсключитьИзПроверкиНеиспользуемыеТабличныеЧасти(
		ПроверяемыеРеквизиты,
		НеИспользуемыеТабличныеЧасти);
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);

КонецПроцедуры // ОбработкаПроверкиЗаполнения

Процедура ПриКопировании(ОбъектКопирования)
	
	Дата = НачалоДня(ОбщегоНазначенияБП.ПолучитьРабочуюДату());
	Ответственный = Пользователи.ТекущийПользователь();
	
КонецПроцедуры // ПриКопировании

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)

	ТипДанныхЗаполнения = ТипЗнч(ДанныеЗаполнения);
	Если ДанныеЗаполнения <> Неопределено И ТипДанныхЗаполнения <> Тип("Структура")
		И Метаданные().ВводитсяНаОсновании.Содержит(ДанныеЗаполнения.Метаданные()) Тогда
		
		ЗаполнитьПоДокументуОснованию(ДанныеЗаполнения);
		
	КонецЕсли;
	
	ЗаполнениеДокументов.Заполнить(ЭтотОбъект, ДанныеЗаполнения);
	
	Если  ТипДанныхЗаполнения = Тип("Структура")
		И ДанныеЗаполнения.Свойство("ВидОперации") Тогда
		ВидОперации = ДанныеЗаполнения.ВидОперации;
	КонецЕсли;

КонецПроцедуры // ОбработкаЗаполнения()

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)

	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ОбновитьПараметрыУчетнойПолитики();
	
	// Посчитать суммы документа и записать ее в соответствующий реквизит шапки для показа в журналах
	СуммаДокумента = УчетНДС.ПолучитьСуммуДокументаСНДС(ЭтотОбъект);

	Если РозницаВПродажныхЦенах Тогда
		Для Каждого Строка Из Товары Цикл
			Если Склад.ТипСклада = Перечисления.ТипыСкладов.РозничныйМагазин Тогда
				Строка.СчетУчетаБУ = ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахАТТ;
			Иначе
				Строка.СчетУчетаБУ = ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахНТТ;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если НЕ мУчетнаяПолитика.ЕстьНДС Тогда
		// организация - не плательщик НДС. Установим во всех ТЧ признак соответствующего учета НДС
		НеОБлНДСДеятельность = Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяХозДеятельность;
		
		Для каждого СтрокаТЧ  Из Товары Цикл
		    СтрокаТЧ.НалоговоеНазначение = НеОБлНДСДеятельность;
		КонецЦикла;  
		Для каждого СтрокаТЧ  Из БланкиСтрогогоУчета Цикл
		    СтрокаТЧ.НалоговоеНазначение = НеОБлНДСДеятельность;
		КонецЦикла; 
	КонецЕсли; 
	
	Если НЕ мУчетнаяПолитика.ЕстьНалогНаПрибыльДо2015 Тогда
		
		НалоговоеНазначениеДоходовИЗатрат = Неопределено;
		
	КонецЕсли;
	
КонецПроцедуры // ПередЗаписью

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	Перем Заголовок, СтруктураШапкиДокумента;
	Перем ТаблицаПоТоварам, ТаблицаПоБланкам;
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКПроведению(ЭтотОбъект);
	Если РучнаяКорректировка Тогда
		Возврат;
	КонецЕсли;

	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначенияБПВызовСервера.ПредставлениеДокументаПриПроведении(Ссылка);
	
	ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента);

	// Получим данные учетной политики
	ПодготовитьПараметрыУчетнойПолитики(СтруктураШапкиДокумента, Отказ, Заголовок);


	ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоБланкам, Отказ, Заголовок);
	
	            
	// Движения по документу
	Если Не Отказ Тогда
		
		ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоБланкам, Отказ, Заголовок);
		
	КонецЕсли;
	
	Движения.Хозрасчетный.ВыполнитьДействияПередЗаписьюДвижений();
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКЗаписиДвижений(ЭтотОбъект);

КонецПроцедуры // ОбработкаПроведения()

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКОтменеПроведения(ЭтотОбъект);
	Движения.Записать();
	
КонецПроцедуры // ОбработкаУдаленияПроведения

#КонецОбласти 

#Область Проведение

Процедура ОбновитьПараметрыУчетнойПолитики() Экспорт

	мУчетнаяПолитика = Новый Структура;
	мУчетнаяПолитика.Вставить("ЕстьНалогНаПрибыльДо2015" , УчетнаяПолитика.ПлательщикНалогаНаПрибыльДо2015(Организация, НачалоМесяца(Дата)));
	мУчетнаяПолитика.Вставить("ЕстьНДС"            , УчетнаяПолитика.ПлательщикНДС(Организация, НачалоМесяца(Дата)));
	мУчетнаяПолитика.Вставить("ЕстьЕдиныйНалог"    , УчетнаяПолитика.ПлательщикЕдиногоНалога(Организация, НачалоМесяца(Дата)));

	мИспользоватьОборотнуюНоменклатуру = БухгалтерскийУчетВызовСервераПовтИсп.ИспользуетсяОборотнаяНоменклатураВНТТ();
	мРазделятьПоСтавкамНДС             = БухгалтерскийУчетВызовСервераПовтИсп.ИспользуетсяРазделениеПоСтавкамНДСВНТТ();

	СпособОценкиТоваровВРознице = УчетнаяПолитика.СпособОценкиТоваровВРознице(Организация, НачалоМесяца(Дата));
	мУчетВПродажныхЦенах = (СпособОценкиТоваровВРознице = Перечисления.СпособыОценкиТоваровВРознице.ПоПродажнойСтоимости);
	
	РозницаВПродажныхЦенах = ((НЕ Склад.ТипСклада = Перечисления.ТипыСкладов.ОптовыйСклад) 
								И мУчетВПродажныхЦенах); 
								
	СпособОценкиМПЗ  = УчетнаяПолитика.СпособОценкиМПЗ(Организация, НачалоМесяца(Дата));
	ПартионныйУчетБУ = (СпособОценкиМПЗ = Перечисления.СпособыОценки.ФИФО ИЛИ СпособОценкиМПЗ = Перечисления.СпособыОценки.ЛИФО);

КонецПроцедуры // ОбновитьПараметрыУчетнойПолитики

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТоварам - результат запроса по табличной части "Товары",
//  СтруктураШапкиДокумента   - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблиица значений.
//
Функция ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента)

	ТаблицаТоваров = РезультатЗапросаПоТоварам.Выгрузить();
	
	ТаблицаТоваров.Колонки.НалоговоеНазначение.Имя = "НалоговоеНазначениеЗапасов";	
	ТаблицаТоваров.Колонки.Добавить("НалоговоеНазначениеДоходов");
	ТаблицаТоваров.ЗаполнитьЗначения(СтруктураШапкиДокумента.НалоговоеНазначениеДоходовИЗатрат, 	"НалоговоеНазначениеДоходов");
	
	Если мУчетВПродажныхЦенах Тогда
		Если СтруктураШапкиДокумента.ТипСклада = Перечисления.ТипыСкладов.РозничныйМагазин Тогда
			
			ТаблицаТоваров.Колонки.Добавить("РозничнаяЦена");
			ТаблицаТоваров.Колонки.Добавить("УчетнаяЦена");
			
			// Установим параметры запроса
			ПорядокСубконто = Новый Массив();
			ПорядокСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);
			ПорядокСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады);
			
			МассивНоменклатуры = ТаблицаТоваров.ВыгрузитьКолонку("Номенклатура");
			
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("Склад",           СтруктураШапкиДокумента.Склад);
			Запрос.УстановитьПараметр("КонецПериода",    СтруктураШапкиДокумента.Дата);
			Запрос.УстановитьПараметр("Организация",     СтруктураШапкиДокумента.Организация);
			Запрос.УстановитьПараметр("Счет",     		 ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахАТТ);
			Запрос.УстановитьПараметр("ПорядокСубконто", ПорядокСубконто);
			Запрос.УстановитьПараметр("Номенклатура", 	 МассивНоменклатуры);
			
			Запрос.Текст =
			"ВЫБРАТЬ
			|	Остатки.Субконто1 КАК Номенклатура,
			|	СУММА(Остатки.СуммаОстатокДт) КАК СуммаОстаток,
			|	СУММА(Остатки.КоличествоОстатокДт) КАК КоличествоОстаток
			|ИЗ
			|	РегистрБухгалтерии.Хозрасчетный.Остатки(&КонецПериода, Счет = &Счет, &ПорядокСубконто, Организация = &Организация И Субконто1 В (&Номенклатура) И Субконто2 = &Склад) КАК Остатки
			|
			|ГДЕ
			|	Остатки.КоличествоОстаток > 0 
			|
			|СГРУППИРОВАТЬ ПО
			|	Остатки.Субконто1
			|";
			
			ТаблицаУчетныхЦен = Запрос.Выполнить().Выгрузить();

			Для Каждого Строка из ТаблицаТоваров Цикл
				СтрокаТаблицыЦен = ТаблицаУчетныхЦен.Найти(Строка.Номенклатура, "Номенклатура");
				Если НЕ СтрокаТаблицыЦен = Неопределено Тогда
					Строка.УчетнаяЦена = Окр(?(СтрокаТаблицыЦен.КоличествоОстаток = 0, 0, СтрокаТаблицыЦен.СуммаОстаток / СтрокаТаблицыЦен.КоличествоОстаток),2,1);
				Иначе
					Строка.УчетнаяЦена = 0;
				КонецЕсли;
				Строка.РозничнаяЦена = Ценообразование.ПолучитьЦенуНоменклатуры(Строка.Номенклатура, СтруктураШапкиДокумента.Склад.ТипЦенРозничнойТорговли, 
																СтруктураШапкиДокумента.Дата, мВалютаРегламентированногоУчета, 1, 1);
			КонецЦикла;
	
		КонецЕсли;	
	КонецЕсли;
	
	Возврат ТаблицаТоваров;

КонецФункции // ПодготовитьТаблицуТоваров()

Функция ПодготовитьТаблицуБланков(РезультатЗапросаПоБланкам, СтруктураШапкиДокумента)

	ТаблицаБланков = РезультатЗапросаПоБланкам.Выгрузить();	
	
	ТаблицаБланков.Колонки.НалоговоеНазначение.Имя = "НалоговоеНазначениеЗапасов";	
	ТаблицаБланков.Колонки.Добавить("НалоговоеНазначениеДоходов");
	ТаблицаБланков.ЗаполнитьЗначения(СтруктураШапкиДокумента.НалоговоеНазначениеДоходовИЗатрат, 	"НалоговоеНазначениеДоходов");
	
	Возврат ТаблицаБланков;

КонецФункции // ПодготовитьТаблицуБланков()

// Проверяет правильность заполнения шапки документа, формирует МассивНепроверяемыхРеквизитов для стандартной проверки заполнения.
//
// Параметры: 
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении,
//  МассивНепроверяемыхРеквизитов - массив имен реквизитов, которые не будут проверятся стандартной проверкой заполнения.
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, МассивНепроверяемыхРеквизитов)

	
	Если Товары.Количество() + БланкиСтрогогоУчета.Количество() = 0 Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Склад");
	КонецЕсли;
	
	Если НЕ СтруктураШапкиДокумента.ЕстьНалогНаПрибыльДо2015 Тогда
		МассивНепроверяемыхРеквизитов.Добавить("НалоговоеНазначениеДоходовИЗатрат");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СчетКт) Тогда
		Если НЕ СчетКт.НалоговыйУчет Тогда
			МассивНепроверяемыхРеквизитов.Добавить("НалоговоеНазначениеДоходовИЗатрат");	
		КонецЕсли; 
	КонецЕсли; 	
	


КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Проверяет правильность заполнения строк табличной части "Товары", формирует МассивНепроверяемыхРеквизитов для стандартной проверки заполнения.
//
// Параметры: 
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении.
//  МассивНепроверяемыхРеквизитов - массив имен реквизитов, которые не будут проверятся стандартной проверкой заполнения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиТовары(СтруктураШапкиДокумента, Отказ, МассивНепроверяемыхРеквизитов)

	ИмяТабличнойЧасти = "Товары";

	
	НТТ = (СтруктураШапкиДокумента.РозницаВПродажныхЦенах И (СтруктураШапкиДокумента.ТипСклада = Перечисления.ТипыСкладов.НеавтоматизированнаяТорговаяТочка));
	АТТ = (СтруктураШапкиДокумента.РозницаВПродажныхЦенах И (СтруктураШапкиДокумента.ТипСклада = Перечисления.ТипыСкладов.РозничныйМагазин));
	
	Если НЕ НТТ Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Товары.СуммаВРознице");
		МассивНепроверяемыхРеквизитов.Добавить("Товары.СтавкаНДСВРознице");
	Иначе
		Если НЕ СтруктураШапкиДокумента.РазделятьПоСтавкамНДС Тогда
			МассивНепроверяемыхРеквизитов.Добавить("СтавкаНДСВРознице");
		КонецЕсли;
		МассивНепроверяемыхРеквизитов.Добавить("Товары.Номенклатура");
		МассивНепроверяемыхРеквизитов.Добавить("Товары.Количество");
		МассивНепроверяемыхРеквизитов.Добавить("Товары.ЕдиницаИзмерения");
	КонецЕсли;
	
	Если НЕ СтруктураШапкиДокумента.ЕстьНДС Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Товары.НалоговоеНазначение");	
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.РозницаВПродажныхЦенах Тогда
		// СчетУчетаБУ будет заполнен в ПередЗаписью
		МассивНепроверяемыхРеквизитов.Добавить("Товары.СчетУчетаБУ");
	КонецЕсли;
	
	Если НТТ Тогда
		// не предполагается поступление в розницу для "необлагаемой деятельности"
		Для Каждого СтрокаТаблицы Из Товары Цикл
				
			Префикс = "Товары[%1].";
			Префикс = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Префикс, Формат(СтрокаТаблицы.НомерСтроки - 1, "ЧН=0; ЧГ="));
			
			Если ЗначениеЗаполнено(СтрокаТаблицы.НалоговоеНазначение) Тогда
				Если СтрокаТаблицы.НалоговоеНазначение = Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяНеХозДеятельность Тогда
					
					Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.Номенклатура) Тогда
						СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='В строке %1 указано налоговое назначение по нехозяйственной деятельности. 
|Передача товаров в розницу возможна только по хозяйственной деятельности.';uk='У рядку %1 вказане податкове призначення по негосподарській діяльності. 
|Передача товарів у роздріб можлива тільки по господарській діяльності.'"), (Товары.Индекс(СтрокаТаблицы)+1));
					Иначе
						СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Для товара ""%1"" указано налоговое назначение по нехозяйственной деятельности. 
|Передача товаров в розницу возможна только по хозяйственной деятельности.';uk='Для товару ""%1"" вказано податкове призначення по негосподарській діяльності. 
|Передача товарів у роздріб можлива тільки по господарській діяльності.'"), СтрокаТаблицы.Номенклатура);
					КонецЕсли;							
					
					Поле = Префикс + "НалоговоеНазначение";
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения, ЭтотОбъект, Поле, , Отказ);
					
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	
	Если АТТ Тогда
		
		ПорядокСубконто = Новый Массив();
		ПорядокСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);
		ПорядокСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады);
		
		МассивНоменклатуры = Товары.ВыгрузитьКолонку("Номенклатура");
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Склад",           Склад);
		Запрос.УстановитьПараметр("КонецПериода",    Дата);
		Запрос.УстановитьПараметр("Организация",     Организация);
		Запрос.УстановитьПараметр("Счет",     		 ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахАТТ);
		Запрос.УстановитьПараметр("ПорядокСубконто", ПорядокСубконто);
		Запрос.УстановитьПараметр("Номенклатура", 	 МассивНоменклатуры);
		
		Запрос.УстановитьПараметр("НалоговыеНазначения", Товары.ВыгрузитьКолонку("НалоговоеНазначение"));
		
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Остатки.Субконто1 КАК Номенклатура,
		|	Остатки.НалоговоеНазначение КАК НалоговоеНазначение,
		|	СУММА(Остатки.СуммаОстатокДт) КАК СуммаОстаток,
		|	СУММА(Остатки.КоличествоОстатокДт) КАК КоличествоОстаток
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(
		|			&КонецПериода,
		|			Счет = &Счет,
		|			&ПорядокСубконто,
		|			НалоговоеНазначение В (&НалоговыеНазначения)
		|				И Организация = &Организация
		|				И Субконто1 В (&Номенклатура)
		|				И Субконто2 = &Склад) КАК Остатки
		|ГДЕ
		|	Остатки.КоличествоОстаток > 0
		|
		|СГРУППИРОВАТЬ ПО
		|	Остатки.Субконто1,
		|	Остатки.НалоговоеНазначение";
		
		ТаблицаУчетныхЦен = Запрос.Выполнить().Выгрузить();
		ТаблицаУчетныхЦен.Индексы.Добавить("Номенклатура, НалоговоеНазначение");

		Для Каждого СтрокаТаблицы Из Товары Цикл
			
			НайденныеСтроки = ТаблицаУчетныхЦен.НайтиСтроки(Новый Структура("Номенклатура, НалоговоеНазначение", СтрокаТаблицы.Номенклатура, СтрокаТаблицы.НалоговоеНазначение));
			Если НайденныеСтроки.Количество()> 0 Тогда
				СтрокаТаблицыЦен = НайденныеСтроки[0];
				УчетнаяЦена = Окр(?(СтрокаТаблицыЦен.КоличествоОстаток = 0, 0, СтрокаТаблицыЦен.СуммаОстаток / СтрокаТаблицыЦен.КоличествоОстаток),2,1);
			Иначе
				УчетнаяЦена = 0;
			КонецЕсли;
			
			РозничнаяЦена = Ценообразование.ПолучитьЦенуНоменклатуры(СтрокаТаблицы.Номенклатура, СтруктураШапкиДокумента.ТипЦенРозничнойТорговли, 
															Дата, СтруктураШапкиДокумента.ВалютаРегламентированногоУчета, 1, 1);
															
															
			Префикс = "Товары[%1].";
			Префикс = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Префикс, Формат(СтрокаТаблицы.НомерСтроки - 1, "ЧН=0; ЧГ="));
			
			ДопустимоеОтклонение = УчетнаяЦена * 0.001;
			СтрокаСообщения = "";
			
			Если РозничнаяЦена = 0 Тогда
				СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Для товара ""%1"" не установлена розничная цена.';uk='Для товару ""%1"" не встановлена роздрібна ціна.'"), СтрокаТаблицы.Номенклатура);
			ИначеЕсли УчетнаяЦена = 0 Тогда
				// Учетная цена неизвестна.
			ИначеЕсли РозничнаяЦена - УчетнаяЦена > ДопустимоеОтклонение
				ИЛИ РозничнаяЦена - УчетнаяЦена < - ДопустимоеОтклонение Тогда
				СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Для товара ""%1"" розничная цена (%2) не равна учетной цене(%3).
|измените розничную цену или проведите переоценку.';uk='Для товару ""%1"" роздрібна ціна (%2) не дорівнює обліковій ціні(%3).
|змініть роздрібну ціну або проведіть переоцінку.'"), СтрокаТаблицы.Номенклатура, РозничнаяЦена, УчетнаяЦена);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтрокаСообщения) Тогда
				Поле = Префикс + "Номенклатура";
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
			КонецЕсли;

		КонецЦикла;
	
	КонецЕсли;
	
	
	ПроверитьТабЧастьТоварыПоСтрочно(СтруктураШапкиДокумента, Отказ, МассивНепроверяемыхРеквизитов);
	
КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиТовары()

// Выполняет проверки строк табличной части "Товары"
Процедура ПроверитьТабЧастьТоварыПоСтрочно(СтруктураШапкиДокумента, Отказ, МассивНепроверяемыхРеквизитов)
	
	ЭтоОборудование = (СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийОприходованиеТоваров.Оборудование);
	
	Для Каждого СтрокаТЧ Из Товары Цикл	
		
		ПрефиксПоля = "Товары[%1].";
		ПрефиксПоля = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПрефиксПоля, Формат(СтрокаТЧ.НомерСтроки - 1, "ЧН=0; ЧГ="));
		СтрокаСообщения = "";

		Если НЕ ЭтоОборудование Тогда
			СтрокаНачалаСообщенияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='В строке номер ""%1"" табличной части ""Товары"": ';uk='У рядку номер ""%1"" табличної частини ""Товари"": '"), СокрЛП(СтрокаТЧ.НомерСтроки));
		Иначе
			СтрокаНачалаСообщенияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='В строке номер ""%1"" табличной части ""Оборудование"": ';uk='У рядку номер ""%1"" табличної частини ""Устаткування"": '"), СокрЛП(СтрокаТЧ.НомерСтроки));
		КонецЕсли;	
						
		Если СтруктураШапкиДокумента.ЕстьНДС Тогда
				
			Если НЕ СтрокаТЧ.НалоговоеНазначение.Пустая() Тогда
				
				ВидДеятельностиНДС = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаТЧ.НалоговоеНазначение, "ВидДеятельностиНДС");
				
			    // проверим корректность указания налогового назначения
				// по всем его реквизитам
				Если СтруктураШапкиДокумента.ЕстьНДС
				   И СтруктураШапкиДокумента.РозницаВПродажныхЦенах
				   И СтруктураШапкиДокумента.РазделятьПоСтавкамНДС
				   И СтруктураШапкиДокумента.ТипСклада = Перечисления.ТипыСкладов.НеавтоматизированнаяТорговаяТочка 
				   И НЕ СтрокаТЧ.СтавкаНДСВРознице.Пустая()
				   И НЕ ВидДеятельностиНДС = УчетНДС.ПолучитьВидДеятельностиНДС(СтрокаТЧ.СтавкаНДСВРознице) Тогда
					   
				   СтрокаСообщения = СтрокаНачалаСообщенияОбОшибке + НСтр("ru='Указано некорректное налоговое назначение! Вид деятельности НДС не соответствует ставке НДС, указанной в строке';uk='Вказано некоректне податкове призначення! Вид діяльності ПДВ не відповідає ставці ПДВ, вказаній в рядку'");
				   
						
				КонецЕсли;
					
			КонецЕсли;
				
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаСообщения) Тогда
			Поле = ПрефиксПоля + "НалоговоеНазначение";
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
		КонецЕсли;
 		
	КонецЦикла;

КонецПроцедуры // ПроверитьТабЧастьТоварыПоСтрочно()

// Проверяет правильность заполнения строк табличной части "БланкиСтрогогоУчета", формирует МассивНепроверяемыхРеквизитов для стандартной проверки заполнения.
//
// Параметры: 
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении.
//  МассивНепроверяемыхРеквизитов - массив имен реквизитов, которые не будут проверятся стандартной проверкой заполнения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиБланкиСтрогогоУчета(СтруктураШапкиДокумента, Отказ, МассивНепроверяемыхРеквизитов)


	Если НЕ СтруктураШапкиДокумента.ЕстьНДС Тогда
		МассивНепроверяемыхРеквизитов.Добавить("БланкиСтрогогоУчета.НалоговоеНазначение");
	КонецЕсли;
	
						
КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиБланкиСтрогогоУчета()

// Проводит табличные части по регистрам
//
// Параметры:
//  ТаблицаПоТоварам          - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  ТаблицаПоБланкам          - таблица значений, содержащая данные для проведения и проверки ТЧ БланкиСтрогогоУчета
//  Отказ                     - флаг отказа в проведении
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения
//
Процедура ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоБланкам, Отказ, Заголовок)

	// Бухгалтерские проводки
	ДатаДока     = СтруктураШапкиДокумента.Дата;
	ПроводкиБУ   = Движения.Хозрасчетный;
		
	НТТ = (РозницаВПродажныхЦенах И (СтруктураШапкиДокумента.ТипСклада = Перечисления.ТипыСкладов.НеавтоматизированнаяТорговаяТочка));
	АТТ = (РозницаВПродажныхЦенах И (СтруктураШапкиДокумента.ТипСклада = Перечисления.ТипыСкладов.РозничныйМагазин));
	
	Для каждого СтрокаТаблицы Из ТаблицаПоТоварам Цикл

		Проводка = ПроводкиБУ.Добавить();

		Проводка.Период       = ДатаДока;
		Проводка.Организация  = СтруктураШапкиДокумента.Организация;
		Проводка.Содержание   = НСтр("ru='Оприходованы ТМЦ';uk='Оприбутковані ТМЦ'", Локализация.КодЯзыкаИнформационнойБазы());
		Проводка.Сумма        = СтрокаТаблицы.Сумма;

		Проводка.НалоговоеНазначениеДт  = СтрокаТаблицы.НалоговоеНазначениеЗапасов;
		Проводка.НалоговоеНазначениеКт 	= СтрокаТаблицы.НалоговоеНазначениеДоходов;
		
		Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыльДо2015 Тогда

			Если СтруктураШапкиДокумента.ПризнаватьЗатратыВНУ Тогда
				Если СтрокаТаблицы.НалоговоеНазначениеЗапасов <> Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяНеХозДеятельность Тогда
					Проводка.СуммаНУДт = СтрокаТаблицы.СуммаНУ;
				КонецЕсли;
			КонецЕсли;
			Если ЗначениеЗаполнено(СтрокаТаблицы.НалоговоеНазначениеДоходов) И 
				 НЕ (СтрокаТаблицы.НалоговоеНазначениеДоходов.ВидНалоговойДеятельности = Справочники.ВидыНалоговойДеятельности.НеОблагаемая) Тогда
				Проводка.СуммаНУКт = СтрокаТаблицы.СуммаНУ;
			КонецЕсли;

		КонецЕсли;
		
		Проводка.СчетДт       = СтрокаТаблицы.СчетУчетаБУ;
		Если (НЕ НТТ) ИЛИ (мИспользоватьОборотнуюНоменклатуру) Тогда
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Номенклатура", СтрокаТаблицы.Номенклатура);
		КонецЕсли;	
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Склады",       СтруктураШапкиДокумента.Склад);
		Если НТТ 
		   И мРазделятьПоСтавкамНДС Тогда
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "СтавкиНДС",  СтрокаТаблицы.СтавкаНДСВРознице);
		КонецЕсли;
		// Для товаров, принятых на комиссию партия прописывается всегда 
		Если (ПартионныйУчетБУ) ИЛИ (БухгалтерскийУчетВызовСервераПовтИсп.КомиссионныйТовар(СтрокаТаблицы.СчетУчетаБУ)) Тогда 
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Партии",       Ссылка);
		КонецЕсли;

		Если (НЕ НТТ) Тогда
			Проводка.КоличествоДт = СтрокаТаблицы.Количество;
		КонецЕсли;
		
		Проводка.СчетКт = СтруктураШапкиДокумента.СчетКт;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, СтруктураШапкиДокумента.СубконтоКт1);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, СтруктураШапкиДокумента.СубконтоКт2);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3, СтруктураШапкиДокумента.СубконтоКт3);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "НоменклатурныеГруппы", СтрокаТаблицы.НоменклатурнаяГруппа);

		ТорговаяНаценка = 0;
		
		Если АТТ ИЛИ НТТ Тогда
			Если АТТ Тогда
				ТорговаяНаценка   = (СтрокаТаблицы.РозничнаяЦена * СтрокаТаблицы.Количество) - СтрокаТаблицы.Сумма;
				ТорговаяНаценкаНУ = (СтрокаТаблицы.РозничнаяЦена * СтрокаТаблицы.Количество) - ?(СтруктураШапкиДокумента.ПризнаватьЗатратыВНУ, СтрокаТаблицы.СуммаНУ, 0);
				СчетНаценки       = ПланыСчетов.Хозрасчетный.ТорговаяНаценкаАТТ;
			Иначе
				ТорговаяНаценка   = СтрокаТаблицы.СуммаВРознице - СтрокаТаблицы.Сумма;
				ТорговаяНаценкаНУ = СтрокаТаблицы.СуммаВРознице - ?(СтруктураШапкиДокумента.ПризнаватьЗатратыВНУ, СтрокаТаблицы.СуммаНУ, 0);
				СчетНаценки       = ПланыСчетов.Хозрасчетный.ТорговаяНаценкаНТТ;
			КонецЕсли;
			
			Если ТорговаяНаценка <> 0 ИЛИ ТорговаяНаценкаНУ <> 0 Тогда
				
				Проводка = ПроводкиБУ.Добавить();
				Проводка.Период      = СтруктураШапкиДокумента.Дата;
				Проводка.Организация = СтруктураШапкиДокумента.Организация;
				Проводка.Содержание  = НСтр("ru='Торговая наценка';uk='Торгова націнка'",Локализация.КодЯзыкаИнформационнойБазы());
				
				Проводка.НалоговоеНазначениеДт = СтрокаТаблицы.НалоговоеНазначениеЗапасов;
				Проводка.НалоговоеНазначениеКт = СтрокаТаблицы.НалоговоеНазначениеЗапасов;
				
				Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыльДо2015 И
					 СтрокаТаблицы.НалоговоеНазначениеЗапасов <> Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяНеХозДеятельность Тогда
					 
					Проводка.СуммаНУДт = ТорговаяНаценкаНУ;
					Проводка.СуммаНУКт = ТорговаяНаценкаНУ;
					//Если СтруктураШапкиДокумента.ПризнаватьЗатратыВНУ Тогда
					//	Проводка.СуммаНУДт = ТорговаяНаценкаНУ;
					//	Проводка.СуммаНУКт = ТорговаяНаценкаНУ;
					//Иначе
					//	Проводка.СуммаНУДт = 0;
					//	Проводка.СуммаНУКт = 0;
					//КонецЕсли;	
					
				КонецЕсли;
				
				Проводка.СчетДт      = СтрокаТаблицы.СчетУчетаБУ;
				Проводка.СчетКт      = СчетНаценки;
				
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Склады",  СтруктураШапкиДокумента.Склад);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Склады",  СтруктураШапкиДокумента.Склад);
				
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Партии", Ссылка);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Партии", Ссылка);
				
				Если (НЕ НТТ) ИЛИ (мИспользоватьОборотнуюНоменклатуру) Тогда
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Номенклатура",  СтрокаТаблицы.Номенклатура);
				КонецЕсли;
				Если НЕ НТТ Тогда
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Номенклатура",  СтрокаТаблицы.Номенклатура);
				КонецЕсли;
				Если НТТ И мРазделятьПоСтавкамНДС Тогда
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "СтавкиНДС",  СтрокаТаблицы.СтавкаНДСВРознице);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "СтавкиНДС",  СтрокаТаблицы.СтавкаНДСВРознице);
				КонецЕсли;
				
				Проводка.Сумма       = ТорговаяНаценка;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла; // Для каждого СтрокаТаблицы Из ТаблицаПоТоварам Цикл
	
	Для каждого СтрокаТаблицы Из ТаблицаПоБланкам Цикл

		Проводка = ПроводкиБУ.Добавить();

		Проводка.Период       = ДатаДока;
		Проводка.Организация  = СтруктураШапкиДокумента.Организация;
		Проводка.Содержание   = НСтр("ru='Оприходованы БСУ';uk='Оприбутковані БСЗ'", Локализация.КодЯзыкаИнформационнойБазы());

		Проводка.НалоговоеНазначениеДт  = СтрокаТаблицы.НалоговоеНазначениеЗапасов;
		Проводка.НалоговоеНазначениеКт 	= СтрокаТаблицы.НалоговоеНазначениеДоходов;
		
		Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыльДо2015 Тогда

			Если СтруктураШапкиДокумента.ПризнаватьЗатратыВНУ Тогда
				Если СтрокаТаблицы.НалоговоеНазначениеЗапасов <> Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяНеХозДеятельность Тогда
					Проводка.СуммаНУДт = СтрокаТаблицы.СуммаНУ;
				КонецЕсли;
			КонецЕсли;	
			Если ЗначениеЗаполнено(СтрокаТаблицы.НалоговоеНазначениеДоходов) И 
				 НЕ (СтрокаТаблицы.НалоговоеНазначениеДоходов.ВидНалоговойДеятельности = Справочники.ВидыНалоговойДеятельности.НеОблагаемая) Тогда
				Проводка.СуммаНУКт = СтрокаТаблицы.СуммаНУ;
			КонецЕсли;

		КонецЕсли;
		
		Проводка.СчетДт       = СтрокаТаблицы.СчетУчетаБУ;
			
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Номенклатура", СтрокаТаблицы.Номенклатура);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Склады",       СтруктураШапкиДокумента.Склад);
			
		Если НТТ 
		   И мРазделятьПоСтавкамНДС Тогда
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "СтавкиНДС",  СтрокаТаблицы.СтавкаНДСВРознице);
		КонецЕсли;
		
		// Для товаров, принятых на комиссию партия прописывается всегда 
		Если (ПартионныйУчетБУ) ИЛИ (БухгалтерскийУчетВызовСервераПовтИсп.КомиссионныйТовар(СтрокаТаблицы.СчетУчетаБУ)) Тогда 
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Партии",       Ссылка);
		КонецЕсли;
			
		Проводка.КоличествоДт = СтрокаТаблицы.Количество;
		Проводка.Сумма = СтрокаТаблицы.Сумма;

		Проводка.СчетКт = СтруктураШапкиДокумента.СчетКт;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, СтруктураШапкиДокумента.СубконтоКт1);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, СтруктураШапкиДокумента.СубконтоКт2);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3, СтруктураШапкиДокумента.СубконтоКт3);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "НоменклатурныеГруппы", СтрокаТаблицы.НоменклатурнаяГруппа);

												
		// проводка по счету СчетУчетаЗабалансовыйБУ
		Проводка = ПроводкиБУ.Добавить();
        Проводка.Период       = ДатаДока;
		Проводка.Организация  = СтруктураШапкиДокумента.Организация;
		Проводка.Содержание   = НСтр("ru='Оприходованы БСУ';uk='Оприбутковані БСЗ'", Локализация.КодЯзыкаИнформационнойБазы());

		Проводка.СчетДт       = СтрокаТаблицы.СчетУчетаЗабалансовыйБУ;
			
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Номенклатура", СтрокаТаблицы.Номенклатура);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Склады",       СтруктураШапкиДокумента.Склад);
			
		Проводка.КоличествоДт = СтрокаТаблицы.Количество;
		Проводка.Сумма = СтрокаТаблицы.СуммаНоминальная;
										
	КонецЦикла; // Проводки по бланкам строгого учета

	Если СтруктураШапкиДокумента.ЕстьЕдиныйНалог И СтруктураШапкиДокумента.ПризнаватьДоходомПлательщикаЕН Тогда
		ДвиженияПоЕдиномуНалогу(СтруктураШапкиДокумента);
	КонецЕсли; 	
	
	Если ИНАГРО_ОбщийВызовСервераПовтИсп.ЕстьБСПУ() Тогда // ИНАГРО
		ИНАГРО_Общий.ИНАГРО_ВедомостьДвиженийПриход(Движения,ТаблицаПоТоварам,СтруктураШапкиДокумента);	
	КонецЕсли;	
	
КонецПроцедуры // ДвиженияПоРегистрам()

Процедура ДвиженияПоЕдиномуНалогу(СтруктураШапкиДокумента)
	
	СуммаЕН = СтруктураШапкиДокумента.СуммаДокумента;
	
	Если СуммаЕН > 0 Тогда
		Движение = Движения.КнигаДоходовРасходовПоЕдиномуНалогу.Добавить();
		Движение.Период = СтруктураШапкиДокумента.Дата;
		Движение.Регистратор = СтруктураШапкиДокумента.Ссылка;
		Движение.Организация = СтруктураШапкиДокумента.Организация;
		Движение.Статья = Справочники.СтатьиНалоговыхДеклараций.ЕННК_ДоходыСтоимостьБезоплатноПолученных;
		Движение.Сумма = СуммаЕН;
	КонецЕсли;
	
КонецПроцедуры // ДвиженияПоЕдиномуНалогу

// Процедура определяет параметры учетной политики
Процедура ПодготовитьПараметрыУчетнойПолитики(СтруктураШапкиДокумента, Отказ, Заголовок)
	

	СтруктураШапкиДокумента.Вставить("ЕстьНалогНаПрибыльДо2015",  мУчетнаяПолитика.ЕстьНалогНаПрибыльДо2015);
	СтруктураШапкиДокумента.Вставить("ЕстьНДС" ,            мУчетнаяПолитика.ЕстьНДС);
	СтруктураШапкиДокумента.Вставить("ЕстьЕдиныйНалог",		мУчетнаяПолитика.ЕстьЕдиныйНалог);
	
КонецПроцедуры // ПодготовитьПараметрыУчетнойПолитики()

// Процедура формирует структуру шапки документа и дополнительных полей.
Процедура ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента) Экспорт
	
	// Дерево значений, содержащее имена необходимых полей в запросе по шапке.
	Перем ДеревоПолейЗапросаПоШапке;
	
	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента = ОбщегоНазначенияРед12.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);

	// Заполним по шапке документа дерево параметров, нужных при проведении.
	ДеревоПолейЗапросаПоШапке = ОбщегоНазначенияРед12.СформироватьДеревоПолейЗапросаПоШапке();
	ОбщегоНазначенияРед12.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Склад", "ТипСклада", "ТипСклада");

	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа
	СтруктураШапкиДокумента = УправлениеЗапасами.СформироватьЗапросПоДеревуПолей(ЭтотОбъект, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета);
	
КонецПроцедуры // ПодготовитьСтруктуруШапкиДокумента()

// Процедура формирует таблицы документа.
Процедура ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоБланкам, Отказ, Заголовок) Экспорт
	
	// Получим необходимые данные для проведения и проверки заполнения данные по табличной части "Товары".
	СтруктураПолей 			= Новый Структура;
	СтруктураПростыхПолей	= Новый Структура;
	СтруктураПолей.Вставить("НомерСтроки"        	, "НомерСтроки");
	СтруктураПолей.Вставить("Номенклатура"       	, "Номенклатура");
	СтруктураПолей.Вставить("Количество"         	, "Количество * Коэффициент");
	СтруктураПолей.Вставить("Сумма"              	, "Сумма");
	
	СтруктураПолей.Вставить("СуммаНУ"    			, "СуммаНУ");
	
	СтруктураПолей.Вставить("Услуга"             	, "Номенклатура.Услуга");
	СтруктураПолей.Вставить("БланкСтрогогоУчета"	, "Номенклатура.БланкСтрогогоУчета");
	СтруктураПолей.Вставить("СчетУчетаБУ"        	, "СчетУчетаБУ");
	СтруктураПолей.Вставить("СуммаВРознице"		 	, "СуммаВРознице");
	СтруктураПолей.Вставить("СтавкаНДСВРознице"  	, "СтавкаНДСВРознице");
	СтруктураПолей.Вставить("НоменклатурнаяГруппа"  , "Номенклатура.НоменклатурнаяГруппа");

	СтруктураПолей.Вставить("НалоговоеНазначение"     		   , "НалоговоеНазначение");
	СтруктураПолей.Вставить("ВидДеятельностиНДС"     		   , "НалоговоеНазначение.ВидДеятельностиНДС");
	
	РезультатЗапросаПоТоварам = ОбщегоНазначенияРед12.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураПолей, СтруктураПростыхПолей);

	// Получим необходимые данные для проведения и проверки заполнения данные по табличной части "БланкиСтрогогоУчета".
	СтруктураПолей = Новый Структура;
	СтруктураСложныхПолей = Новый Структура;
	СтруктураПолей.Вставить("Номенклатура", "Номенклатура");
	СтруктураПолей.Вставить("Количество"  , "Количество * Коэффициент");
	СтруктураПолей.Вставить("Сумма"       , "Сумма");
	СтруктураПолей.Вставить("Услуга"      , "Номенклатура.Услуга");
	СтруктураПолей.Вставить("БланкСтрогогоУчета", "Номенклатура.БланкСтрогогоУчета");
	СтруктураПолей.Вставить("НоменклатурнаяГруппа"  , "Номенклатура.НоменклатурнаяГруппа");

	СтруктураПолей.Вставить("СуммаНУ"    			, "СуммаНУ");
	
	// Дополним полями, нужными для регл.
	СтруктураПолей.Вставить("СчетУчетаБУ"     , "СчетУчетаБУ");
	СтруктураПолей.Вставить("СчетУчетаЗабалансовыйБУ", "СчетУчетаЗабалансовыйБУ");
		
	СтруктураПолей.Вставить("НалоговоеНазначение"     	, "НалоговоеНазначение");
		
	СтруктураПолей.Вставить("ВидДеятельностиНДС"     	, "НалоговоеНазначение.ВидДеятельностиНДС");
    СтруктураПолей.Вставить("СуммаНоминальная"			, "СуммаНоминальная");
		
	РезультатЗапросаПоБланкам = ОбщегоНазначенияРед12.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "БланкиСтрогогоУчета", СтруктураПолей,,СтруктураСложныхПолей);// Подготовим таблицу товаров для проведения.
	
	ТаблицаПоТоварам 	  = ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента);
    ТаблицаПоБланкам 	  = ПодготовитьТаблицуБланков(РезультатЗапросаПоБланкам, СтруктураШапкиДокумента);
	
	Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийОприходованиеТоваров.БланкиСтрогогоУчета И ТаблицаПоТоварам.Количество() > 0 Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru='Заполнена табличная часть ""Товары (Оборудование)"", но при этом установлен вид операции ""Бланки строгого учета"". Движения по товарам (оборудованию) не будут сформированы!';uk='Заповнена таблична частина ""Товари (Устаткування)"", але при цьому встановлений вид операції ""Бланки суворого обліку"". Рухи за товарами (устаткуванням) не будуть сформовані!'"
			),	
			ЭтотОбъект, 
			"ВидОперации",
			"Объект"
		);
		
		ТаблицаПоТоварам.Очистить();
		
	КонецЕсли; 
	
	Если СтруктураШапкиДокумента.ВидОперации <> Перечисления.ВидыОперацийОприходованиеТоваров.БланкиСтрогогоУчета И ТаблицаПоБланкам.Количество() > 0 Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru='Заполнена табличная часть ""Бланки строгого учета"", но при этом не установлен вид операции ""Бланки строгого учета"". Движения по бланкам строгого учета не будут сформированы!';uk='Заповнена таблична частина ""Бланки суворого обліку"", але при цьому не встановлений вид операції ""Бланки суворого обліку"". Рухи за бланками суворого обліку не будуть сформовані!'"
			),	
			ЭтотОбъект, 
			"ВидОперации", 
			"Объект"
		);
		
		ТаблицаПоБланкам.Очистить();
		
	КонецЕсли; 
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьБланкиСтрогогоУчета") И ТаблицаПоБланкам.Количество() > 0 Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru='В настройках параметров учета отключен параметр ""Ведется учет бланков строгого учета"". Движения по бланкам строгого учета не будут сформированы!';uk='В настройках параметрів обліку вимкнений параметр ""Ведеться облік бланків суворого обліку"". Рухи бланків суворого обліку не будуть сформовані!'"
			),	
			ЭтотОбъект, 
			"БланкиСтрогогоУчета", 
			"Объект"
		);
		
		ТаблицаПоБланкам.Очистить();
		
	КонецЕсли;
	

КонецПроцедуры // ПодготовитьТаблицыДокумента

#КонецОбласти 

#Область СлужебныеПроцедурыИФункции	

// Процедура выполняет заполнение табличной части по инвентаризации Товаров.
//
// Параметры:
//  ДокументОснование - ссылка на документ основание (инвентаризация Товаров).
//
Процедура ЗаполнитьТоварыПоИнвентаризацииТоваров(ДокументОснование) Экспорт

	Запрос = Новый Запрос;
	
	НТТ = (ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Склад, "ТипСклада") = Перечисления.ТипыСкладов.НеавтоматизированнаяТорговаяТочка);
	
	Запрос.УстановитьПараметр("ДокументСсылка"                   , Ссылка);
	Запрос.УстановитьПараметр("НеавтоматизированнаяТорговаяТочка", НТТ);
	Запрос.УстановитьПараметр("ДокументОснованиеСсылка"          , ДокументОснование);
	
	// Заполняем выявленными излишками по инвентаризации, с учетом уже выполненного оприходования 
	// по данной инвентаризации. Цены берем из документа инвентаризации. 
	// Если розница – заполняем розничную цену.
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДокИнвентаризации.Номенклатура,
	|	ДокИнвентаризации.СчетУчетаБУ,
	|	ДокИнвентаризации.ЕдиницаИзмерения,
	|	ДокИнвентаризации.Коэффициент КАК КоэффициентЕдиницыИнвентаризации,
	|	МАКСИМУМ(ДокИнвентаризации.Количество - ДокИнвентаризации.КоличествоУчет) КАК КоличествоОтклонениеИнвентаризации,
	|	СУММА(ВЫБОР
	|			КОГДА ДокОприходование.Количество ЕСТЬ NULL 
	|				ТОГДА 0
	|			ИНАЧЕ ДокОприходование.Количество * ДокОприходование.Коэффициент / ДокИнвентаризации.Коэффициент
	|		КОНЕЦ) КАК КоличествоОприходованное,
	|	ДокИнвентаризации.Цена
	|ИЗ
	|	Документ.ИнвентаризацияТоваровНаСкладе.Товары КАК ДокИнвентаризации
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ОприходованиеТоваров.Товары КАК ДокОприходование
	|		ПО ДокИнвентаризации.Номенклатура = ДокОприходование.Номенклатура
	|			И ДокИнвентаризации.СчетУчетаБУ = ДокОприходование.СчетУчетаБУ
	|			И ДокИнвентаризации.Ссылка.Склад = ДокОприходование.Ссылка.Склад
	|			И (ДокОприходование.Ссылка.ИнвентаризацияТоваровНаСкладе = &ДокументОснованиеСсылка)
	|			И (ДокОприходование.Ссылка.Проведен)
	|			И (ДокОприходование.Ссылка <> &ДокументСсылка)
	|ГДЕ
	|	ДокИнвентаризации.Ссылка = &ДокументОснованиеСсылка
	|	И ДокИнвентаризации.Количество - ДокИнвентаризации.КоличествоУчет > 0
	|
	|СГРУППИРОВАТЬ ПО
	|	ДокИнвентаризации.Номенклатура,
	|	ДокИнвентаризации.СчетУчетаБУ,
	|	ДокИнвентаризации.ЕдиницаИзмерения,
	|	ДокИнвентаризации.Коэффициент,
	|	ДокИнвентаризации.Цена,
	|	ДокИнвентаризации.НомерСтроки
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДокИнвентаризации.НомерСтроки";
	
	
	ТаблицаТоваров = Запрос.Выполнить().Выгрузить();

	Склад = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОснование, "Склад");
	
	ДанныеОбъекта = Новый Структура("Дата, Организация, Склад");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, ЭтотОбъект);
	
	СоответствиеСведенийОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОСпискеНоменклатуры(
		ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаТоваров, "Номенклатура", Истина), ДанныеОбъекта);
		
	Для Каждого СтрокаТовара Из ТаблицаТоваров Цикл

		КоличествоОприходовать = СтрокаТовара.КоличествоОтклонениеИнвентаризации - СтрокаТовара.КоличествоОприходованное;

		Если КоличествоОприходовать <= 0 Тогда
			Продолжить;
		КонецЕсли; 

		СтрокаТабличнойЧасти = Товары.Добавить();

		СтрокаТабличнойЧасти.Номенклатура        = СтрокаТовара.Номенклатура;
		СтрокаТабличнойЧасти.СчетУчетаБУ         = СтрокаТовара.СчетУчетаБУ;
		СтрокаТабличнойЧасти.ЕдиницаИзмерения    = СтрокаТовара.ЕдиницаИзмерения;
		СтрокаТабличнойЧасти.Коэффициент         = СтрокаТовара.КоэффициентЕдиницыИнвентаризации;
		СтрокаТабличнойЧасти.Количество          = КоличествоОприходовать;
		СтрокаТабличнойЧасти.Цена                = СтрокаТовара.Цена;

		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
		
		СтрокаТабличнойЧасти.СуммаНУ             = СтрокаТабличнойЧасти.Сумма;

		СведенияОНоменклатуре = СоответствиеСведенийОНоменклатуре.Получить(СтрокаТовара.Номенклатура);
		Если СведенияОНоменклатуре = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		
		ЗаполнятьБУ = НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.СчетУчетаБУ);
		ЗаполнятьНУ = НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.НалоговоеНазначение);
		
		Если ЗаполнятьБУ ИЛИ ЗаполнятьНУ Тогда
			Документы.ОприходованиеТоваров.ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(
				ДанныеОбъекта, СтрокаТабличнойЧасти, "Товары", СведенияОНоменклатуре, ЗаполнятьБУ, ЗаполнятьНУ);
		КонецЕсли;
		
	КонецЦикла;
	

	Если Товары.Количество() = 0 Тогда
		
		СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru='В документе ""%1"" № %2 отсутствуют товары, фактическое количество которых превышает учетное.';uk='В документі ""%1"" № %2 відсутні товари, фактична кількість яких перевищує облікову.'"
							), 
							ДокументОснование.Метаданные().Представление(), 
							ДокументОснование.Номер
						  );
		
		ТекстСообщения = ОбщегоНазначенияБПКлиентСервер.ПолучитьТекстСообщения(
			"Поле",
			"Корректность",
			"Инвентаризация", // Параметр1
			, // Параметр2
			, // Параметр3
			СтрокаСообщения
		); // Параметр4
				
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, "ИнвентаризацияТоваровНаСкладе", "Объект");
		
	КонецЕсли;
	

КонецПроцедуры // ЗаполнитьТоварыПоИнвентаризацииТоваров()

Процедура ЗаполнитьПоДокументуОснованию(Основание)

	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ИнвентаризацияТоваровНаСкладе") Тогда
		
		// Заполним реквизиты из стандартного набора по документу основанию.
		ЗаполнениеДокументов.ЗаполнитьПоОснованию(ЭтотОбъект, Основание);
		
		ВидОперации = Перечисления.ВидыОперацийОприходованиеТоваров.ТоварыПродукция;
		
		Если Основание.Склад.ТипСклада <> Перечисления.ТипыСкладов.НеавтоматизированнаяТорговаяТочка Тогда

			СтруктураКурсаДокумента = МодульВалютногоУчета.ПолучитьКурсВалюты(мВалютаРегламентированногоУчета, Дата);
			КурсДокумента      = СтруктураКурсаДокумента.Курс;
			КратностьДокумента = СтруктураКурсаДокумента.Кратность;

		Иначе

			КурсДокумента      = 1;
			КратностьДокумента = 1;

		КонецЕсли;

		ИнвентаризацияТоваровНаСкладе = Основание;

		ЗаполнитьТоварыПоИнвентаризацииТоваров(Основание);
		
		// Заполним состав комиссии
		ПервыйЧленКомиссии   = Основание.ПервыйЧленКомиссии;
		ВторойЧленКомиссии   = Основание.ВторойЧленКомиссии;
		ТретийЧленКомиссии   = Основание.ТретийЧленКомиссии;
		ПредседательКомиссии = Основание.ПредседательКомиссии;
		
	КонецЕсли;
	
КонецПроцедуры	// ЗаполнитьПоДокументуОснованию

#КонецОбласти 

мВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();

#КонецЕсли