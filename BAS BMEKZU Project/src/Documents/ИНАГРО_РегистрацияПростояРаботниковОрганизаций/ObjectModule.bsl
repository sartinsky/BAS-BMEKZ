#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

// Процедура - обработчик события "ОбработкаПроведения"
////
Процедура ОбработкаПроведения(Отказ, Режим)
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКПроведению(ЭтотОбъект);
	Заголовок = ОбщегоНазначенияБПВызовСервера.ПредставлениеДокументаПриПроведении(Ссылка);
	
	ВыборкаПоШапкеДокумента = СформироватьЗапросПоШапке().Выбрать();
	ВыборкаПоШапкеДокумента.Следующий();
	
	// Движения стоит добавлять, если в проведении еще не отказано (отказ =ложь)
	Если НЕ Отказ Тогда
		
		////////////////////////////////////////////////////////////////////////
		// основные Начисления
		ВыборкаПоНачислениям = СформироватьЗапросПоНачислениям().Выбрать();
		Пока ВыборкаПоНачислениям.Следующий() Цикл 
			ПроверитьЗаполнениеСтрокиНачисления(ВыборкаПоШапкеДокумента, ВыборкаПоНачислениям, Отказ);
			Если НЕ Отказ Тогда
				ДобавитьСтрокуОсновныхНачислений(ВыборкаПоНачислениям, Движения.ИНАГРО_Начисления);
				Если Дата >= Дата(2016,1,1) Тогда
					ДобавитьСтрокуВДвиженияПоРегистрамНакопления(ВыборкаПоНачислениям);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		////////////////////////////////////////////////////////////////////////
		// Расчет средней
		ВыборкаПоСредним = СформироватьЗапросПоРасчетСреднего().Выбрать();
		Пока ВыборкаПоСредним.Следующий() Цикл
			ПроверитьЗаполнениеСтрокиРасчетСреднего(ВыборкаПоСредним, Отказ);
			Если НЕ Отказ Тогда
				ДобавитьСтрокуРасчетаСреднего(ВыборкаПоСредним, Движения.ИНАГРО_РасчетСреднегоЗаработка);
			КонецЕсли;
		КонецЦикла;
					
	КонецЕсли; 
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКОтменеПроведения(ЭтотОбъект);
	Движения.Записать();

КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)

	Дата = НачалоДня(ОбщегоНазначения.ТекущаяДатаПользователя());
	Ответственный = Пользователи.ТекущийПользователь();
	
КонецПроцедуры

#КонецОбласти

#Область Проведение

// Формирует запрос по шапке документа
//
//
// Возвращаемое значение:
//  Результат запроса
//
Функция СформироватьЗапросПоШапке() Экспорт
	
	Запрос = Новый Запрос;
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка" , Ссылка);
	Запрос.УстановитьПараметр("парамПустаяОрганизация", Справочники.Организации.ПустаяСсылка());
	Запрос.УстановитьПараметр("ДатаНачалаСобытия" , ДатаНачала);
	Запрос.УстановитьПараметр("Сотрудник" , Сотрудник);
	Запрос.УстановитьПараметр("парамПоДням"     , Перечисления.ИНАГРО_ВидыУчетаВремени.ПоДням);
	
	Запрос.УстановитьПараметр("ОсновнойВидРасчета" , ПланыВидовРасчета.ИНАГРО_Начисления.ПустаяСсылка());
	
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ИНАГРО_РегистрацияПростояРаботниковОрганизаций.Дата КАК Дата,
	               |	ИНАГРО_РегистрацияПростояРаботниковОрганизаций.ПериодРегистрации КАК ПериодРегистрации,
	               |	ИНАГРО_РегистрацияПростояРаботниковОрганизаций.Организация КАК Организация,
	               |	ИНАГРО_РегистрацияПростояРаботниковОрганизаций.СуммаСредней КАК СуммаСредней,
	               |	ИНАГРО_РегистрацияПростояРаботниковОрганизаций.ВидУчетаВремениДляСредней КАК ВидУчетаВремениДляСредней,
	               |	ВЫБОР
	               |		КОГДА ИНАГРО_РегистрацияПростояРаботниковОрганизаций.Организация.ГоловнаяОрганизация = &парамПустаяОрганизация
	               |			ТОГДА ИНАГРО_РегистрацияПростояРаботниковОрганизаций.Организация
	               |		ИНАЧЕ ИНАГРО_РегистрацияПростояРаботниковОрганизаций.Организация.ГоловнаяОрганизация
	               |	КОНЕЦ КАК ГоловнаяОрганизация,
	               |	ИНАГРО_РегистрацияПростояРаботниковОрганизаций.Организация КАК ОбособленноеПодразделение,
	               |	ИНАГРО_РегистрацияПростояРаботниковОрганизаций.Ссылка КАК Ссылка,
	               |	ИНАГРО_РегистрацияПростояРаботниковОрганизаций.Сотрудник КАК Сотрудник,
	               |	ЕСТЬNULL(РаботникиОрганизацииСрезПоследних.Сотрудник, ИНАГРО_РегистрацияПростояРаботниковОрганизаций.Сотрудник) КАК Назначение,
	               |	ДанныеКалендаря.НормаЧасовЗаМесяц КАК НормаЧасовЗаМесяц,
	               |	ДанныеКалендаря.НормаДнейЗаМесяц КАК НормаДнейЗаМесяц,
	               |	РаботникиОрганизацииСрезПоследних.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	               |	РаботникиОрганизацииСрезПоследних.ГрафикРаботы КАК ГрафикРаботы,
	               |	РаботникиОрганизацииСрезПоследних.ГрафикРаботы.СуммированныйУчетРабочегоВремени КАК СуммированныйУчетРабочегоВремени
	               |ИЗ
	               |	Документ.ИНАГРО_РегистрацияПростояРаботниковОрганизаций КАК ИНАГРО_РегистрацияПростояРаботниковОрганизаций
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ИНАГРО_ПриемНаРаботуВОрганизацию.РаботникиОрганизации КАК ПриказОПриеме
	               |		ПО (ПриказОПриеме.Сотрудник = ИНАГРО_РегистрацияПростояРаботниковОрганизаций.Сотрудник)
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИНАГРО_РаботникиОрганизаций.СрезПоследних(
	               |				&ДатаНачалаСобытия,
	               |				Сотрудник = &Сотрудник
	               |					ИЛИ Сотрудник.ОсновноеНазначение = &Сотрудник) КАК РаботникиОрганизацииСрезПоследних
	               |		ПО (ИСТИНА)
	               |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	               |			ГрафикиРаботы.ГрафикРаботы КАК ГрафикРаботы,
	               |			НАЧАЛОПЕРИОДА(ГрафикиРаботы.Дата, МЕСЯЦ) КАК ДатаМесяца,
	               |			СУММА(ГрафикиРаботы.ОсновноеЗначение) КАК НормаДнейЗаМесяц,
	               |			СУММА(ГрафикиРаботы.ДополнительноеЗначение) КАК НормаЧасовЗаМесяц
	               |		ИЗ
	               |			РегистрСведений.ИНАГРО_ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботы
	               |		ГДЕ
	               |			ГрафикиРаботы.ВидУчетаВремени = &парамПоДням
	               |		
	               |		СГРУППИРОВАТЬ ПО
	               |			ГрафикиРаботы.ГрафикРаботы,
	               |			НАЧАЛОПЕРИОДА(ГрафикиРаботы.Дата, МЕСЯЦ)) КАК ДанныеКалендаря
	               |		ПО (ДанныеКалендаря.ГрафикРаботы = РаботникиОрганизацииСрезПоследних.ГрафикРаботы)
	               |			И (ДанныеКалендаря.ДатаМесяца = ИНАГРО_РегистрацияПростояРаботниковОрганизаций.ПериодРегистрации)
	               |ГДЕ
	               |	ИНАГРО_РегистрацияПростояРаботниковОрганизаций.Ссылка = &ДокументСсылка";
	
	Возврат Запрос.Выполнить();
	
КонецФункции // СформироватьЗапросПоШапке()

// Формирует запрос по шапке документа
//
//
// Возвращаемое значение:
//  Результат запроса
//
Функция СформироватьЗапросПоШапкеПоВсемПриказам() Экспорт
	
	Запрос = Новый Запрос;
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка" , Ссылка);
	Запрос.УстановитьПараметр("парамПустаяОрганизация", Справочники.Организации.ПустаяСсылка());
	Запрос.УстановитьПараметр("ДатаНачалаСобытия" , ДатаНачала);
	Запрос.УстановитьПараметр("Сотрудник" , Сотрудник);
	Запрос.УстановитьПараметр("парамПоДням"     , Перечисления.ИНАГРО_ВидыУчетаВремени.ПоДням);
	
	Запрос.УстановитьПараметр("ОсновнойВидРасчета" , ПланыВидовРасчета.ИНАГРО_Начисления.ОплатаПоСреднемуОтп);
	
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ИНАГРО_РегистрацияПростояРаботниковОрганизаций.Дата КАК Дата,
	               |	ИНАГРО_РегистрацияПростояРаботниковОрганизаций.ПериодРегистрации КАК ПериодРегистрации,
	               |	ИНАГРО_РегистрацияПростояРаботниковОрганизаций.Организация КАК Организация,
	               |	ИНАГРО_РегистрацияПростояРаботниковОрганизаций.СуммаСредней КАК СуммаСредней,
	               |	ИНАГРО_РегистрацияПростояРаботниковОрганизаций.ВидУчетаВремениДляСредней КАК ВидУчетаВремениДляСредней,
	               |	ВЫБОР
	               |		КОГДА ИНАГРО_РегистрацияПростояРаботниковОрганизаций.Организация.ГоловнаяОрганизация = &парамПустаяОрганизация
	               |			ТОГДА ИНАГРО_РегистрацияПростояРаботниковОрганизаций.Организация
	               |		ИНАЧЕ ИНАГРО_РегистрацияПростояРаботниковОрганизаций.Организация.ГоловнаяОрганизация
	               |	КОНЕЦ КАК ГоловнаяОрганизация,
	               |	ИНАГРО_РегистрацияПростояРаботниковОрганизаций.Организация КАК ОбособленноеПодразделение,
	               |	ИНАГРО_РегистрацияПростояРаботниковОрганизаций.Ссылка КАК Ссылка,
	               |	ИНАГРО_РегистрацияПростояРаботниковОрганизаций.Сотрудник КАК Сотрудник,
	               |	ПриказОПриеме.Ссылка.ВидЗанятости КАК ВидЗанятости,
	               |	ДанныеКалендаря.НормаЧасовЗаМесяц КАК НормаЧасовЗаМесяц,
	               |	ДанныеКалендаря.НормаДнейЗаМесяц КАК НормаДнейЗаМесяц,
	               |	РаботникиОрганизацииСрезПоследних.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	               |	РаботникиОрганизацииСрезПоследних.ГрафикРаботы КАК ГрафикРаботы,
	               |	РаботникиОрганизацииСрезПоследних.ГрафикРаботы.СуммированныйУчетРабочегоВремени КАК СуммированныйУчетРабочегоВремени,
	               |	ИНАГРО_РегистрацияПростояРаботниковОрганизаций.ПериодРасчетаСреднегоНачало КАК ПериодРасчетаСреднегоНачало,
	               |	ИНАГРО_РегистрацияПростояРаботниковОрганизаций.ПериодРасчетаСреднегоКонец КАК ПериодРасчетаСреднегоКонец
	               |ИЗ
	               |	Документ.ИНАГРО_РегистрацияПростояРаботниковОрганизаций КАК ИНАГРО_РегистрацияПростояРаботниковОрганизаций
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИНАГРО_РаботникиОрганизаций.СрезПоследних(&ДатаНачалаСобытия, Сотрудник = &Сотрудник) КАК РаботникиОрганизацииСрезПоследних
	               |		ПО ИНАГРО_РегистрацияПростояРаботниковОрганизаций.Сотрудник = РаботникиОрганизацииСрезПоследних.Сотрудник
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ИНАГРО_ПриемНаРаботуВОрганизацию.РаботникиОрганизации КАК ПриказОПриеме
	               |		ПО (ПриказОПриеме.Сотрудник = РаботникиОрганизацииСрезПоследних.Сотрудник)
	               |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	               |			ГрафикиРаботы.ГрафикРаботы КАК ГрафикРаботы,
	               |			НАЧАЛОПЕРИОДА(ГрафикиРаботы.Дата, МЕСЯЦ) КАК ДатаМесяца,
	               |			СУММА(ГрафикиРаботы.ОсновноеЗначение) КАК НормаДнейЗаМесяц,
	               |			СУММА(ГрафикиРаботы.ДополнительноеЗначение) КАК НормаЧасовЗаМесяц
	               |		ИЗ
	               |			РегистрСведений.ИНАГРО_ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботы
	               |		ГДЕ
	               |			ГрафикиРаботы.ВидУчетаВремени = &парамПоДням
	               |		
	               |		СГРУППИРОВАТЬ ПО
	               |			ГрафикиРаботы.ГрафикРаботы,
	               |			НАЧАЛОПЕРИОДА(ГрафикиРаботы.Дата, МЕСЯЦ)) КАК ДанныеКалендаря
	               |		ПО (ДанныеКалендаря.ГрафикРаботы = РаботникиОрганизацииСрезПоследних.ГрафикРаботы)
	               |			И (ДанныеКалендаря.ДатаМесяца = ИНАГРО_РегистрацияПростояРаботниковОрганизаций.ПериодРегистрации)
	               |ГДЕ
	               |	ИНАГРО_РегистрацияПростояРаботниковОрганизаций.Ссылка = &ДокументСсылка";
	
	Возврат Запрос.Выполнить();
	
КонецФункции // СформироватьЗапросПоШапке()

// Получение данных
//
Функция СформироватьЗапросПоРасчетСреднего() Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументСсылка", Ссылка);

	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СтрокаРасчетСреднего.Ссылка.ПериодРегистрации КАК ПериодРегистрации,
	|	СтрокаРасчетСреднего.Ссылка.Сотрудник КАК Сотрудник,
	|	СтрокаРасчетСреднего.Ссылка.Организация КАК Организация,
	|
	|	СтрокаРасчетСреднего.НомерСтроки,
	|	СтрокаРасчетСреднего.Авторасчет,
	|	СтрокаРасчетСреднего.ВидРасчета,
	|	СтрокаРасчетСреднего.БазовыйПериодНачало,
	|	СтрокаРасчетСреднего.БазовыйПериодКонец,
	|	СтрокаРасчетСреднего.КоэффициентПовышенияОкладов,
	|
	|	СтрокаРасчетСреднего.ОтработаноДней,
	|	СтрокаРасчетСреднего.ОтработаноЧасов,
	|	СтрокаРасчетСреднего.НормаДней,
	|	СтрокаРасчетСреднего.НормаЧасов,
	|	СтрокаРасчетСреднего.КалендарныеДни,
	|
	|	СтрокаРасчетСреднего.Результат,
	|	СтрокаРасчетСреднего.РезультатПолный
	|ИЗ Документ."+Ссылка.Метаданные().Имя+".РасчетСреднего КАК СтрокаРасчетСреднего
	|
	|ГДЕ СтрокаРасчетСреднего.Ссылка = &ДокументСсылка
    |УПОРЯДОЧИТЬ ПО
    |	НомерСтроки
    |";
	
	Возврат Запрос.Выполнить();
	
КонецФункции // СформироватьЗапросПоРасчетСреднего()

Функция СформироватьЗапросПоНачислениям()

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументСсылка" , Ссылка);
	Запрос.УстановитьПараметр("парамСписокПочасовыхОтклонений", ИНАГРО_ПроведениеРасчетов.ПолучитьСписокНачисленийПочасовыхОтклонений());
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СтрокиНачисления.Ссылка.Организация,
	|	СтрокиНачисления.Ссылка.ПериодРегистрации,
	|	СтрокиНачисления.НомерСтроки,  
	|	СтрокиНачисления.Авторасчет,
	|   ЗНАЧЕНИЕ(Перечисление.КодыОперацийВзаиморасчетыСРаботникамиОрганизаций.Начисления) КАК КодОперации,
	|
	|	СтрокиНачисления.Сотрудник,
	|	СтрокиНачисления.Назначение,
	|	СтрокиНачисления.ВидРасчета,
	|	СтрокиНачисления.ВидРасчета.СпособРасчета		КАК СпособРасчета,
    |
	|	КОНЕЦПЕРИОДА(СтрокиНачисления.Ссылка.ПериодРегистрации, МЕСЯЦ)	КАК Период,
	|	СтрокиНачисления.Ссылка.ПериодРегистрации						КАК ПериодВзаиморасчетов,
	|	СтрокиНачисления.ВидРасчета.СчетУчета			КАК СчетУчета,
	|	СтрокиНачисления.Результат						КАК СуммаВзаиморасчетов,
	|
	|	СтрокиНачисления.ДатаНачала,
	|	СтрокиНачисления.ДатаОкончания,
	|	СтрокиНачисления.БазовыйПериодНачало,
	|	СтрокиНачисления.БазовыйПериодКонец,
	|	СтрокиНачисления.ДатаНачала			КАК ПериодДействияНачало,
	|	СтрокиНачисления.ДатаОкончания		КАК ПериодДействияКонец,
	|
	|	СтрокиНачисления.Результат,
	|	СтрокиНачисления.ОплаченоДнейЧасов,
	|	СтрокиНачисления.ОтработаноДней,
	|	СтрокиНачисления.ОтработаноЧасов,
	|	СтрокиНачисления.НормаДней,
	|	СтрокиНачисления.НормаЧасов,
	|	СтрокиНачисления.КалендарныеДни,
	|
	|	СтрокиНачисления.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	|	СтрокиНачисления.ПодразделениеОрганизации КАК Подразделение,
	|	СтрокиНачисления.ГрафикРаботы,
	|	СтрокиНачисления.ГрафикРаботы.СуммированныйУчетРабочегоВремени КАК СуммированныйУчетРабочегоВремени,
	|	СтрокиНачисления.ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени КАК ВидИспользованияРабочегоВремени, 
	|	СтрокиНачисления.Показатель1,
	|	СтрокиНачисления.Показатель2,
	|	СтрокиНачисления.Показатель3,
	|	СтрокиНачисления.НормаЧасовЗаМесяц,
	|	СтрокиНачисления.НормаДнейЗаМесяц,
	|	СтрокиНачисления.ВидУчетаВремениДляСредней,
	|	СтрокиНачисления.СпособОтраженияВБухучете,
	|	СтрокиНачисления.Сторно
	|
	|ИЗ Документ."+Ссылка.Метаданные().Имя+".Начисления КАК СтрокиНачисления
	|
	|ГДЕ СтрокиНачисления.Ссылка = &ДокументСсылка
	|";

	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоНачислениям()

// Получение данных
//
Процедура ПроверитьЗаполнениеСтрокиРасчетСреднего(ВыборкаПоСтрокамДокумента, Отказ) Экспорт

	СтрокаНачалаСообщенияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='В строке номер ""%1"" табл. части ""Расчет среднего"": ';uk='У рядку номер ""%1"" табл. частини ""Розрахунок середнього"": '"), СокрЛП(ВыборкаПоСтрокамДокумента.НомерСтроки));
	
	Если ВыборкаПоСтрокамДокумента.БазовыйПериодКонец < ВыборкаПоСтрокамДокумента.БазовыйПериодНачало Тогда
		ТекстСообщения = СтрокаНачалаСообщенияОбОшибке + НСтр("ru='дата начала базового периода не может быть больше даты окончания базового периода!';uk='дата початку базового періоду не може бути більшою ніж дата закінчення базового періоду!'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,ЭтотОбъект,,,Отказ);
	КонецЕсли; 
	
КонецПроцедуры // ПроверитьЗаполнениеСтрокиРасчетСреднего()

Процедура ПроверитьЗаполнениеСтрокиНачисления(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента, Отказ)

	СтрокаНачалаСообщенияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='В строке номер ""%1"" табл. части ""Начисления"": ';uk='У рядку номер ""%1"" табл. частини ""Нарахування"": '"), СокрЛП(ВыборкаПоСтрокамДокумента.НомерСтроки));
	
	Если Не ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ВидРасчета) Тогда
		ОбщегоНазначенияБПКлиентСервер.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + НСтр("ru='не задан Вид расчета!';uk='не заданий Вид розрахунку!'"), Отказ);
	КонецЕсли;
	
	// Дата начала 
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ДатаНачала) Тогда
		ОбщегоНазначенияБПКлиентСервер.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + НСтр("ru='не указана дата начала начисления!';uk='не зазначена дата початку нарахування!'"), Отказ);
	Иначе
		// Дата окончания 
		Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ДатаОкончания) Тогда
			ОбщегоНазначенияБПКлиентСервер.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + НСтр("ru='не указана дата окончания начисления!';uk='не зазначена дата закінчення нарахування!'"), Отказ);
		Иначе
			Если ВыборкаПоСтрокамДокумента.ДатаОкончания < ВыборкаПоСтрокамДокумента.ДатаНачала Тогда
				ОбщегоНазначенияБПКлиентСервер.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + НСтр("ru='дата окончания начисления не должна быть меньше даты начала!';uk='дата закінчення нарахування не повинна бути менше дати початку!'"), Отказ);
			Иначе	
				Если НачалоМесяца(ВыборкаПоСтрокамДокумента.ДатаОкончания) <> НачалоМесяца(ВыборкаПоСтрокамДокумента.ДатаНачала) Тогда
					ОбщегоНазначенияБПКлиентСервер.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + НСтр("ru='даты начала и окончания должны принадлежать одному месяцу!';uk='дати початку і закінчення повинні належати одному місяцю!'"), Отказ);
				КонецЕсли;
			КонецЕсли; 
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ПодразделениеОрганизации) Тогда
		ОбщегоНазначенияБПКлиентСервер.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + НСтр("ru='не указано подразделение организации!!';uk='не вказано підрозділ організації!'"), Отказ);
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаполнениеСтрокиНачисления()

// Получение данных
//
Процедура ДобавитьСтрокуРасчетаСреднего(ВыборкаПоСтрокамДокумента, НаборЗаписей) Экспорт
	
	Движения.ИНАГРО_РасчетСреднегоЗаработка.Записывать = Истина;
	Движение = НаборЗаписей.Добавить();
	ЗаполнитьЗначенияСвойств(Движение,ВыборкаПоСтрокамДокумента);
	
КонецПроцедуры 

Процедура ДобавитьСтрокуОсновныхНачислений(ВыборкаПоСтрокамДокумента, НаборЗаписей)
	
	Движения.ИНАГРО_Начисления.Записывать = Истина;
	Движение = НаборЗаписей.Добавить();
	ЗаполнитьЗначенияСвойств(Движение, ВыборкаПоСтрокамДокумента);
	
 	Движение.ВидУчетаВремени = ИНАГРО_ПроведениеРасчетов.ПолучитьВидУчетаВремени(ВыборкаПоСтрокамДокумента.ВидРасчета, ВыборкаПоСтрокамДокумента.СуммированныйУчетРабочегоВремени);

	Если ВыборкаПоСтрокамДокумента.ВидРасчета = ПланыВидовРасчета.ИНАГРО_Начисления.ОтпускЧАЭС 
		ИЛИ ВыборкаПоСтрокамДокумента.ВидРасчета = ПланыВидовРасчета.ИНАГРО_Начисления.ОтпускУчебный 
		ИЛИ ВыборкаПоСтрокамДокумента.ВидРасчета = ПланыВидовРасчета.ИНАГРО_Начисления.ОтпускЗаСвойСчет 
		ИЛИ ВыборкаПоСтрокамДокумента.ВидРасчета = ПланыВидовРасчета.ИНАГРО_Начисления.ОтпускТворческий Тогда
		Движение.ВидУчетаВремениДляСредней = Перечисления.ИНАГРО_ВидыУчетаВремениДляСредней.ПоКалендарнымДнямСПраздниками
	КонецЕсли;
	
КонецПроцедуры // ДобавитьСтрокуОсновныхНачислений

Процедура ДобавитьСтрокуВДвиженияПоРегистрамНакопления(ВыборкаПоСтрокамДокумента)
	
	// ВзаиморасчетыСРаботникамиОрганизаций
	Движения.ВзаиморасчетыССотрудниками.Записывать = Истина;
	Движение = Движения.ВзаиморасчетыССотрудниками.Добавить();
	ЗаполнитьЗначенияСвойств(Движение, ВыборкаПоСтрокамДокумента);
	
	Движение.ФизическоеЛицо 		= ВыборкаПоСтрокамДокумента.Сотрудник.ФизическоеЛицо;
	Движение.ВидДвижения			= ВидДвиженияНакопления.Приход;

КонецПроцедуры // ДобавитьСтрокуВДвиженияПоРегистрамНакопления()

#КонецОбласти

// Получение данных
//
Функция АвтозаполнениеРасчетСреднего() Экспорт
	
	Перем ДатаОкончанияСобытия;
	Если ДатаНачала < ИНАГРО_ПроведениеРасчетов.ДатаИзмененияПорядка100() Тогда
		//	1. Проверка если данных для расчета средней ещ нет (человек мало проработал, начисляем по окладу)
		//
		Если  НачалоДня(ДобавитьМесяц(ПериодРасчетаСреднегоНачало,1)-1) > ПериодРасчетаСреднегоКонец Тогда

			
			// в отпуск в первый рабочий день
			// если есть за что платить, но расчет еще не производился
			// пользователю прийдется заполнить эти суммы вручную
			//
			СоздатьСтрокуРасчетСреднего( ПланыВидовРасчета.ИНАГРО_СреднийЗаработок.ПоОкладу, 1, НачалоМесяца(ПериодРасчетаСреднегоНачало), КонецМесяца(ПериодРасчетаСреднегоНачало));
		
			Записать();
		
			Возврат Истина;
		КонецЕсли;

		
		// Сначала определим коэффициент увеличения оклада 
		// если он вдруг поменялся за время пока за человеком 
		// сохранялась средняя ЗП
		Запрос = Новый Запрос;
		ДатаНачалаСобытия = ДатаНачала;
		КоэффициентПовышенияОкладов = 1;
		Если ДатаНачалаСобытия < ИНАГРО_ПроведениеРасчетов.ДатаИзмененияПорядка100() Тогда
			Запрос.УстановитьПараметр( "парамСотрудник",	Сотрудник );
			Запрос.УстановитьПараметр( "парамНачало",		КонецДня(ПериодРасчетаСреднегоКонец) + 1 );
			Запрос.УстановитьПараметр( "парамКонец",		ДатаОкончанияСобытия );
			ТекстЗапроса = " 
			|ВЫБРАТЬ
			|	КоэффициентПовышения.Период,
			|	КоэффициентПовышения.Коэффициент
			|ИЗ РегистрСведений.ИНАГРО_КоэффициентПовышенияОкладов КАК	КоэффициентПовышения		
			|ГДЕ	КоэффициентПовышения.Сотрудник	= &парамСотрудник
			|	И	КоэффициентПовышения.Период >= &парамНачало
			|	И	КоэффициентПовышения.Период <= &парамКонец
			|";
			Запрос.Текст = ТекстЗапроса;
			Выборка = Запрос.Выполнить().Выбрать();
			Коэф = 1;
			Пока Выборка.Следующий() Цикл
				Коэф = Коэф * Выборка.Коэффициент;
			КонецЦикла;
			КоэффициентПовышенияОкладов = Коэф;
		КонецЕсли;

		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		Запрос.УстановитьПараметр( "парамСотрудник",	Сотрудник );
		Запрос.УстановитьПараметр( "парамНачало",		ПериодРасчетаСреднегоНачало );
		Запрос.УстановитьПараметр( "парамКонец",		 ПериодРасчетаСреднегоКонец);
		
		//	ВТВремя
		Если Истина Тогда
			//	Описание:
			// 		таблица периодов для расчета средней
			//		
			Начало = ПериодРасчетаСреднегоНачало;
			Конец = ПериодРасчетаСреднегоКонец;
			Запрос.УстановитьПараметр( "парамНачало1", Начало );
			Запрос.УстановитьПараметр( "парамКонец1", Мин( КонецМесяца(Начало), Конец ) );
			ТекстЗапросаВТ = " 
			|	ВЫБРАТЬ
			|		&парамНачало1	КАК БазовыйПериодНачало,
			|		&парамКонец1	КАК БазовыйПериодКонец
			|ПОМЕСТИТЬ ВТВремя	
			|";
			
			Начало = ДобавитьМесяц(НачалоМесяца(Начало),1);
			Инд = 2;
			Пока Начало <= Конец Цикл
				
				Запрос.УстановитьПараметр( "парамНачало"+Инд    , Начало );
				Запрос.УстановитьПараметр( "парамКонец"+Инд    , Мин( КонецМесяца(Начало), Конец ) );
				ТекстЗапросаВТ = ТекстЗапросаВТ + " 
				|	ОБЪЕДИНИТЬ	  
				|	ВЫБРАТЬ
				|		&парамНачало"+Инд+"	КАК БазовыйПериодНачало,
				|		&парамКонец"+Инд+"	КАК БазовыйПериодКонец
				|";	  
				Инд = Инд + 1;
				Начало = ДобавитьМесяц(НачалоМесяца(Начало),1);
				
			КонецЦикла;
			
			Запрос.Текст = ТекстЗапросаВТ;
			Запрос.Выполнить();
			ТекстЗапросаВТВремя = "ВТВремя";
		КонецЕсли;
		
		//	ВТКоэффициент
		Если Истина Тогда
			
			ТаблицаКоэф = Новый ТаблицаЗначений;
			ТаблицаКоэф.Колонки.Добавить("ПериодНачало",Новый ОписаниеТипов("Дата"));
			ТаблицаКоэф.Колонки.Добавить("ПериодКонец",Новый ОписаниеТипов("Дата"));
			ТаблицаКоэф.Колонки.Добавить("Коэффициент",Новый ОписаниеТипов("Число"));
			
			Если ДатаНачалаСобытия < ИНАГРО_ПроведениеРасчетов.ДатаИзмененияПорядка100() Тогда 
				
				//	Описание:
				// 		таблица с коффициентами для оклада и периодами (нижняя граница)
				//		
				ТекстЗапросаВТ = " 
				|	ВЫБРАТЬ
				|		КоэффициентПовышения.Период			КАК ПериодНачало,
				|		КоэффициентПовышения.Коэффициент	КАК Коэффициент,
				|		МИНИМУМ(
				|			ВЫБОР	КОГДА КоэффициентПовышения1.Период ЕСТЬ NULL 
				|						ТОГДА &парамКонец 	
				|					ИНАЧЕ ДОБАВИТЬКДАТЕ(КоэффициентПовышения1.Период,СЕКУНДА,-1) 
				|			КОНЕЦ ) КАК ПериодКонец
				|	ИЗ (
				|			ВЫБРАТЬ
				|				&парамНачало	КАК Период,
				|				1	КАК Коэффициент
				|	
				|	    	ОБЪЕДИНИТЬ 
				|			ВЫБРАТЬ
				|				КоэффициентПовышения.Период,
				|				КоэффициентПовышения.Коэффициент
				|			ИЗ РегистрСведений.ИНАГРО_КоэффициентПовышенияОкладов КАК	КоэффициентПовышения		
				|			ГДЕ		КоэффициентПовышения.Сотрудник	= &парамСотрудник
				|				И	КоэффициентПовышения.Период > &парамНачало
				|	)КАК КоэффициентПовышения
				|	
				|	
				|	ЛЕВОЕ СОЕДИНЕНИЕ  РегистрСведений.ИНАГРО_КоэффициентПовышенияОкладов 	КАК КоэффициентПовышения1
				|	ПО		КоэффициентПовышения1.Сотрудник	= &парамСотрудник
				|		И	КоэффициентПовышения1.Период > КоэффициентПовышения.Период
				|	
				|	СГРУППИРОВАТЬ ПО
				|		КоэффициентПовышения.Период,
				|		КоэффициентПовышения.Коэффициент
				|УПОРЯДОЧИТЬ ПО
				|	ПериодНачало УБЫВ		
				|";
				Запрос.Текст = ТекстЗапросаВТ;
				Выборка = Запрос.Выполнить().Выбрать();
				НачалоМесяцаПериода = Дата(1,1,1);
				КоэффициентПоНачалуМесяца = 1;
				
				Пока Выборка.Следующий()Цикл
					СтрокаКоэф = ТаблицаКоэф.Добавить();
					СтрокаКоэф.ПериодНачало = Выборка.ПериодНачало;
					СтрокаКоэф.ПериодКонец = Выборка.ПериодКонец;
					Если НачалоМесяца(Выборка.ПериодНачало) = НачалоМесяцаПериода Тогда
						СтрокаКоэф.Коэффициент = КоэффициентПоНачалуМесяца*Выборка.Коэффициент;
						КоэффициентПоНачалуМесяца = КоэффициентПоНачалуМесяца * Выборка.Коэффициент;
					Иначе
						СтрокаКоэф.Коэффициент = Выборка.Коэффициент;
						КоэффициентПоНачалуМесяца = Выборка.Коэффициент;
					КонецЕсли;	
					НачалоМесяцаПериода = НачалоМесяца(Выборка.ПериодНачало);
				КонецЦикла;
			Иначе
				СтрокаТаблицы = ТаблицаКоэф.Добавить();
				СтрокаТаблицы.ПериодНачало = ПериодРасчетаСреднегоНачало;
				СтрокаТаблицы.ПериодКонец = ПериодРасчетаСреднегоКонец;
				СтрокаТаблицы.Коэффициент = 1;
			КонецЕсли;	
			Запрос.УстановитьПараметр("ТаблицаКоэф",ТаблицаКоэф);
			ТекстЗапросаВТ = " 
			|	ВЫБРАТЬ
			|		КоэффициентПовышения.ПериодНачало			КАК ПериодНачало,
			|		КоэффициентПовышения.Коэффициент	КАК Коэффициент,
			|		КоэффициентПовышения.ПериодКонец			КАК ПериодКонец
			|ПОМЕСТИТЬ ВТКоэффициент	
			|ИЗ &ТаблицаКоэф КАК КоэффициентПовышения";
			Запрос.Текст = ТекстЗапросаВТ;
			Запрос.Выполнить();
			ТекстЗапросаВТКоэффициент = "ВТКоэффициент";
		КонецЕсли;
		
		ТекстЗапроса = "
		|ВЫБРАТЬ
		|	ВЫБОР КОГДА КоэффициентПериоды.ПериодНачало >= ВсеПериоды.БазовыйПериодНачало И КоэффициентПериоды.ПериодНачало <= ВсеПериоды.БазовыйПериодКонец ТОГДА КоэффициентПериоды.Коэффициент ИНАЧЕ 1 КОНЕЦ	КАК Коэффициент,
		|	НАЧАЛОПЕРИОДА(ВЫБОР КОГДА КоэффициентПериоды.ПериодНачало <= ВсеПериоды.БазовыйПериодНачало ТОГДА ВсеПериоды.БазовыйПериодНачало ИНАЧЕ КоэффициентПериоды.ПериодНачало КОНЕЦ, МЕСЯЦ)	КАК БазовыйПериодНачало,
		|	КОНЕЦПЕРИОДА(ВЫБОР КОГДА КоэффициентПериоды.ПериодКонец <= ВсеПериоды.БазовыйПериодКонец ТОГДА КоэффициентПериоды.ПериодКонец ИНАЧЕ ВсеПериоды.БазовыйПериодКонец КОНЕЦ, МЕСЯЦ)	КАК БазовыйПериодКонец
		|ПОМЕСТИТЬ ВТРасчетСредней
		|ИЗ ВТВремя КАК ВсеПериоды
		|	
		|ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТКоэффициент КАК КоэффициентПериоды
		|ПО		ВсеПериоды.БазовыйПериодНачало <= КоэффициентПериоды.ПериодКонец
		|И		КоэффициентПериоды.ПериодНачало <= ВсеПериоды.БазовыйПериодКонец	
		|	
		|;
		|ВЫБРАТЬ 
		|	МАКСИМУМ(ВТРасчетСредней.Коэффициент),
		|	ВТРасчетСредней.БазовыйПериодНачало,
		|	ВТРасчетСредней.БазовыйПериодКонец 
		|ИЗ ВТРасчетСредней КАК ВТРасчетСредней
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТРасчетСредней.БазовыйПериодНачало,
		|	ВТРасчетСредней.БазовыйПериодКонец
		|УПОРЯДОЧИТЬ ПО 
		|	ВТРасчетСредней.БазовыйПериодНачало УБЫВ";	
		Запрос.Текст = ТекстЗапроса;
		
		мЕстьПремии = РегистрыСведений.ИНАГРО_УчетнаяПолитикаПоПерсоналу.Получить(Новый Структура ("Организация", Организация)).ЕстьПремии;
		мЕстьГодоваяПремия = РегистрыСведений.ИНАГРО_УчетнаяПолитикаПоПерсоналу.Получить(Новый Структура ("Организация", Организация)).ЕстьГодоваяПремия;
		Коэффициент = 1;
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			
			СоздатьСтрокуРасчетСреднего(ПланыВидовРасчета.ИНАГРО_СреднийЗаработок.ПоЗаработкуДляОтпуска, Выборка.Коэффициент, Выборка.БазовыйПериодНачало, Выборка.БазовыйПериодКонец);
			Если мЕстьПремии  Тогда
				СоздатьСтрокуРасчетСреднего(ПланыВидовРасчета.ИНАГРО_СреднийЗаработок.ПоПремиямОтпуска, 0, Выборка.БазовыйПериодНачало, Выборка.БазовыйПериодКонец);
				СоздатьСтрокуРасчетСреднего(ПланыВидовРасчета.ИНАГРО_СреднийЗаработок.ПоФиксПремиямОтпуска, 0, Выборка.БазовыйПериодНачало, Выборка.БазовыйПериодКонец);
			КонецЕсли;
			Если мЕстьГодоваяПремия Тогда
				СоздатьСтрокуРасчетСреднего(ПланыВидовРасчета.ИНАГРО_СреднийЗаработок.ПоГодовойПремии, 0, Выборка.БазовыйПериодНачало, Выборка.БазовыйПериодКонец);
			КонецЕсли;
		
		КонецЦикла;
	Иначе
		//	1. Проверка если данных для расчета средней ещ нет (человек мало проработал, начисляем по окладу)
		//
		Если  НачалоДня(ДобавитьМесяц(ПериодРасчетаСреднегоНачало,1)-1) > ПериодРасчетаСреднегоКонец Тогда
			ДатаНачалаСобытия = ДатаНачала;

			// проработал меньше целого месяца
			// если есть за что платить, пользователю прийдется заполнить эти суммы вручную
			//
			СоздатьСтрокуРасчетСреднего( ПланыВидовРасчета.ИНАГРО_СреднийЗаработок.ПоОкладу, 1, НачалоМесяца(ДатаНачалаСобытия), КонецМесяца(ДатаНачалаСобытия));
		
			Записать();
		
			Возврат Истина;
		КонецЕсли;
		ДатаНачалаСобытия = ДатаНачала;
		КоэффициентПовышенияОкладов = 1;
		
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		Запрос.УстановитьПараметр( "парамСотрудник",	Сотрудник );
		Запрос.УстановитьПараметр( "парамНачало",		ПериодРасчетаСреднегоНачало );
		Запрос.УстановитьПараметр( "парамКонец",		 ПериодРасчетаСреднегоКонец);
		
		//	ВТВремя
		Если Истина Тогда
			//	Описание:
			// 		таблица периодов для расчета средней
			//		
			Начало = ПериодРасчетаСреднегоНачало;
			Конец = ПериодРасчетаСреднегоКонец;
			Запрос.УстановитьПараметр( "парамНачало1", Начало );
			Запрос.УстановитьПараметр( "парамКонец1", Мин( КонецМесяца(Начало), Конец ) );
			ТекстЗапросаВТ = " 
			|	ВЫБРАТЬ
			|		&парамНачало1	КАК БазовыйПериодНачало,
			|		&парамКонец1	КАК БазовыйПериодКонец
			|ПОМЕСТИТЬ ВТВремя	
			|";
			
			Начало = ДобавитьМесяц(НачалоМесяца(Начало),1);
			Инд = 2;
			Пока Начало <= Конец Цикл
				
				Запрос.УстановитьПараметр( "парамНачало"+Инд    , Начало );
				Запрос.УстановитьПараметр( "парамКонец"+Инд    , Мин( КонецМесяца(Начало), Конец ) );
				ТекстЗапросаВТ = ТекстЗапросаВТ + " 
				|	ОБЪЕДИНИТЬ	  
				|	ВЫБРАТЬ
				|		&парамНачало"+Инд+"	КАК БазовыйПериодНачало,
				|		&парамКонец"+Инд+"	КАК БазовыйПериодКонец
				|";	  
				Инд = Инд + 1;
				Начало = ДобавитьМесяц(НачалоМесяца(Начало),1);
				
			КонецЦикла;
			
			Запрос.Текст = ТекстЗапросаВТ;
			Запрос.Выполнить();
			ТекстЗапросаВТВремя = "ВТВремя";
		КонецЕсли;
		
		ТекстЗапроса = "
		|ВЫБРАТЬ
		|	НАЧАЛОПЕРИОДА(ВсеПериоды.БазовыйПериодНачало)	КАК БазовыйПериодНачало,
		|	КОНЕЦПЕРИОДА(ВсеПериоды.БазовыйПериодКонец)	КАК БазовыйПериодКонец
		|ИЗ ВТВремя КАК ВсеПериоды
		|	
		|СГРУППИРОВАТЬ ПО
		|	ВсеПериоды.БазовыйПериодНачало,
		|	ВсеПериоды.БазовыйПериодКонец
		|УПОРЯДОЧИТЬ ПО 
		|	ВсеПериоды.БазовыйПериодНачало УБЫВ";	
		
		Запрос.Текст = ТекстЗапроса;
			
		мЕстьПремии = РегистрыСведений.ИНАГРО_УчетнаяПолитикаПоПерсоналу.Получить(Новый Структура ("Организация", Организация)).ЕстьПремии;
		мЕстьГодоваяПремия = РегистрыСведений.ИНАГРО_УчетнаяПолитикаПоПерсоналу.Получить(Новый Структура ("Организация", Организация)).ЕстьГодоваяПремия;
		Коэффициент = 1;
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			
			СоздатьСтрокуРасчетСреднего(ПланыВидовРасчета.ИНАГРО_СреднийЗаработок.ПоЗаработкуДляОтпуска, 1, Выборка.БазовыйПериодНачало, Выборка.БазовыйПериодКонец);
			Если мЕстьПремии  Тогда
				СоздатьСтрокуРасчетСреднего(ПланыВидовРасчета.ИНАГРО_СреднийЗаработок.ПоПремиямОтпуска, 0, Выборка.БазовыйПериодНачало, Выборка.БазовыйПериодКонец);
				СоздатьСтрокуРасчетСреднего(ПланыВидовРасчета.ИНАГРО_СреднийЗаработок.ПоФиксПремиямОтпуска, 0, Выборка.БазовыйПериодНачало, Выборка.БазовыйПериодКонец);
			КонецЕсли;
			Если мЕстьГодоваяПремия Тогда
				СоздатьСтрокуРасчетСреднего(ПланыВидовРасчета.ИНАГРО_СреднийЗаработок.ПоГодовойПремии, 0, Выборка.БазовыйПериодНачало, Выборка.БазовыйПериодКонец);
			КонецЕсли;
		
		КонецЦикла;
		
	КонецЕсли;	
	Записать();

	
КонецФункции  // АвтозаполнениеРасчетСреднего()

#Область СлужебныеПроцедурыИФункции	

Процедура ВыполнитьОтменуПроведенияДокумента() Экспорт
	
	ЭтотОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
	
КонецПроцедуры

// Получение данных
//
Процедура ПолучитьПериодПоРаботнику() Экспорт
	Перем ДатаОкончанияСобытия, ДатаПриемаПервыйРабочийДень;
	
	Если НЕ ЗначениеЗаполнено(Сотрудник) Тогда
		Возврат;
	КонецЕсли;	
	
	// -1- работает дольше 12-и месяцев
	// -2- работает меньше 12 месяцев, но дольше 1-го месяца
	// -3- работает меньше целого месяца, но в отпуск не в первый рабочий день - заполняем реальный период с даты приема
	// -4- в отпуск в первый рабочий день, нет начисленной зарплаты.
	
	ДатаНачалаСобытия = ДатаНачала;
	ДатаПриема = ПолучитьДанныеОПриеме(ДатаПриемаПервыйРабочийДень);
	НеПроработалЦелогоМесяца = Ложь;
	
	Если НЕ ЗначениеЗаполнено(ДатаПриема) Тогда
		Возврат;
	КонецЕсли;
	
	Если ДобавитьМесяц(НачалоМесяца(ДатаНачалаСобытия), -ЧислоМесяцев)>= ДатаПриема Тогда
		// -1- работает дольше 12-и месяцев
		ПериодРасчетаСреднегоНачало	= ДобавитьМесяц(НачалоМесяца(ДатаНачалаСобытия), -ЧислоМесяцев);
		ПериодРасчетаСреднегоКонец	= НачалоДня(НачалоМесяца(ДатаНачалаСобытия)-1);
		
	ИначеЕсли КонецМесяца(ДобавитьМесяц(ДатаНачалаСобытия, -1)) >= ДатаПриема Тогда
		// -2-3-
		Если ДатаПриемаПервыйРабочийДень Тогда
			// -2- работает меньше 12 месяцев, но дольше 1-го месяца
			// если дата приема первый рабочий день месяца, то месяц считаем целым.
			ПериодРасчетаСреднегоНачало	= НачалоМесяца(ДатаПриема);
			ПериодРасчетаСреднегоКонец	= НачалоДня(НачалоМесяца(ДатаНачалаСобытия)-1);
		ИначеЕсли ДобавитьМесяц(НачалоМесяца(ДатаНачалаСобытия), -1) > ДатаПриема Тогда
			// -2- работает меньше 12 месяцев, но дольше 1-го месяца
			// если дата приема не первый рабочий день месяца, но есть целые отработанные месяцы.
			ПериодРасчетаСреднегоНачало	= ДобавитьМесяц(НачалоМесяца(ДатаПриема),1);
			ПериодРасчетаСреднегоКонец	= НачалоДня(НачалоМесяца(ДатаНачалаСобытия)-1);
		Иначе
			// -3- работает меньше целого месяца, но в отпуск не в первый рабочий день 
			//    - заполняем реальный период с даты приема.
			ПериодРасчетаСреднегоНачало	= ДатаПриема;	
			ПериодРасчетаСреднегоКонец	= КонецМесяца(ДатаПриема);
			НеПроработалЦелогоМесяца = Истина;
		КонецЕсли;
		
	ИначеЕсли ДатаНачалаСобытия = ДатаПриема Тогда
		// -4- в отпуск в первый рабочий день, нет начисленной зарплаты
		ПериодРасчетаСреднегоНачало	= ДатаПриема;
		ПериодРасчетаСреднегоКонец	= ДатаПриема;
		НеПроработалЦелогоМесяца = Истина;
		
	Иначе
		// -3- работает меньше целого месяца, но в отпуск не в первый рабочий день 
		//    - заполняем реальный период с даты приема
		// прием в месяце ухода в отпуск.
		ПериодРасчетаСреднегоНачало	= ДатаПриема;	
		ПериодРасчетаСреднегоКонец	= НачалоДня(ДатаНачалаСобытия-1);
		НеПроработалЦелогоМесяца = Истина;
		
	КонецЕсли;

КонецПроцедуры // ПолучитьПериодПоРаботнику()

Процедура ПолучитьПериодПоРаботнику1213() Экспорт
	Перем ДатаОкончанияСобытия;
	Перем ДатаПриемаПервыйРабочийДень;
	Перем ОтработаноЗа2Мес, ОтработаноЗа4Мес, ОсновнойВидРасчета;
	
	ДатаНачалаСобытия = ДатаНачала;
	ДатаПриема = ПолучитьДанныеОПриеме(ДатаПриемаПервыйРабочийДень);
	Если ДатаПриема > ДатаНачалаСобытия Тогда
		ТекстПредупреждения = НСтр("ru='Дата начала события меньше даты приема работника в организацию!';uk='Дата початку події менше дати прийняття працівника в організацію!'");
		#Если Клиент Тогда
			Предупреждение(ТекстПредупреждения);
		#Иначе
			Сообщить(ТекстПредупреждения, СтатусСообщения.Информация);
		#КонецЕсли
		Возврат
	КонецЕсли;

	ГрафикРаботы = ПолучитьДанныеОбОтработанномВремени(ОтработаноЗа2Мес, ОтработаноЗа4Мес, ОсновнойВидРасчета);
	ПериодПолучен = Ложь;
	
	Если НЕ ЗначениеЗаполнено(ДатаПриема) Тогда
		Возврат;
	КонецЕсли;	
	
	// Получим период
	// -1- работает дольше 2-х месяцев
	// -2- работает меньше 2 месяцев, но дольше 1-го месяца
	// -3- в командировку в первый рабочий месяц, оплата по окладу, даже если есть заработок
	Если НачалоМесяца(ДатаНачалаСобытия) = НачалоМесяца(ДатаПриема) Тогда
		// -3- 
		ПериодРасчетаСреднегоНачало	= ДатаПриема;	
		ПериодРасчетаСреднегоКонец	= Макс(НачалоДня(ДатаНачалаСобытия-1),ДатаПриема);
		ПериодПолучен = Истина;
	Иначе
		
		Если ОтработаноЗа2Мес Тогда
			ПериодПолучен = Истина;
			ПериодРасчетаСреднегоНачало	= Макс(ДобавитьМесяц(НачалоМесяца(ДатаНачалаСобытия), -ЧислоМесяцев),ДатаПриема);
			ПериодРасчетаСреднегоКонец	= НачалоДня(НачалоМесяца(ДатаНачалаСобытия)-1);
		КонецЕсли;
		
		Если НЕ ПериодПолучен И ОтработаноЗа4Мес Тогда
			ПериодПолучен = Истина;
			
			Если ДобавитьМесяц(НачалоМесяца(ДатаНачалаСобытия), -4)>= ДатаПриема Тогда
				// -1- работает дольше 2-и месяцев
				ПериодРасчетаСреднегоНачало	= ДобавитьМесяц(НачалоМесяца(ДатаНачалаСобытия), -4);
				ПериодРасчетаСреднегоКонец	= НачалоДня(НачалоМесяца(ДобавитьМесяц(ДатаНачалаСобытия,-2))-1);
				
			ИначеЕсли КонецМесяца(ДобавитьМесяц(ДатаНачалаСобытия, -3)) >= ДатаПриема
				И ДобавитьМесяц(НачалоМесяца(ДатаНачалаСобытия), -4) <= ДатаПриема Тогда
					ПериодРасчетаСреднегоНачало	= ДатаПриема;	
					ПериодРасчетаСреднегоКонец	= НачалоДня(НачалоМесяца(ДобавитьМесяц(ДатаНачалаСобытия,-2))-1);
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ ПериодПолучен Тогда
			// -3- расчет по окладу
			ПериодРасчетаСреднегоНачало	= ДатаПриема;
			ПериодРасчетаСреднегоКонец	= ДатаПриема;
			ПериодПолучен = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Получим Вид учета времени для средней
	Если ГрафикРаботы.СуммированныйУчетРабочегоВремени 
		ИЛИ ОсновнойВидРасчета = ПланыВидовРасчета.Начисления.ОкладПоЧасам
		ИЛИ ОсновнойВидРасчета = ПланыВидовРасчета.Начисления.ТарифЧасовой
		Тогда
		ВидУчетаВремениДляСредней = Перечисления.ИНАГРО_ВидыУчетаВремениДляСредней.ПоРабочимЧасам;
		
	Иначе
		ВидУчетаВремениДляСредней = Перечисления.ИНАГРО_ВидыУчетаВремениДляСредней.ПоРабочимДням;
		
	КонецЕсли;
	
КонецПроцедуры // ПолучитьПериодПоРаботнику()

Функция	ПолучитьДанныеОбОтработанномВремени(ОтработаноЗа2Мес, ОтработаноЗа4Мес, ОсновнойВидРасчета)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаНачалаСобытия", ДатаНачала );
	Запрос.УстановитьПараметр("парамСотрудник",	   Сотрудник );
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	ОсновноеНачисление.ВидРасчета КАК ОсновнойВидРасчета,
		|	Работники.ГрафикРаботы КАК ГрафикРаботы,
		|	ЕСТЬNULL(Время2Месяца.ОтработаноЧасов, 0) КАК ОтработаноЗа2Мес,
		|	ЕСТЬNULL(Время4Месяца.ОтработаноЧасов, 0) КАК ОтработаноЗа4Мес
		|ИЗ
		|	РегистрСведений.ИНАГРО_РаботникиОрганизаций.СрезПоследних(&ДатаНачалаСобытия, Сотрудник = &парамСотрудник) КАК Работники
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			СУММА(Начисления.ОтработаноЧасов) КАК ОтработаноЧасов
		|		ИЗ
		|			РегистрРасчета.ИНАГРО_Начисления КАК Начисления
		|		ГДЕ
		|			Начисления.Сотрудник = &парамСотрудник
		|			И Начисления.ПериодРегистрации < НАЧАЛОПЕРИОДА(&ДатаНачалаСобытия, МЕСЯЦ)
		|			И Начисления.ПериодДействия >= ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(&ДатаНачалаСобытия, МЕСЯЦ), МЕСЯЦ, -2)
		|			И Начисления.ПериодДействия < НАЧАЛОПЕРИОДА(&ДатаНачалаСобытия, МЕСЯЦ)) КАК Время2Месяца
		|		ПО (ИСТИНА)
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			СУММА(Начисления.ОтработаноЧасов) КАК ОтработаноЧасов
		|		ИЗ
		|			РегистрРасчета.ИНАГРО_Начисления КАК Начисления
		|		ГДЕ
		|			Начисления.Сотрудник = &парамСотрудник
		|			И Начисления.ПериодРегистрации < НАЧАЛОПЕРИОДА(&ДатаНачалаСобытия, МЕСЯЦ)
		|			И Начисления.ПериодДействия >= ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(&ДатаНачалаСобытия, МЕСЯЦ), МЕСЯЦ, -4)
		|			И Начисления.ПериодДействия <= КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(&ДатаНачалаСобытия, МЕСЯЦ), МЕСЯЦ, -3), МЕСЯЦ)) КАК Время4Месяца
		|		ПО (ИСТИНА)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИНАГРО_ПлановыеНачисленияРаботниковОрганизаций.СрезПоследних(
		|				&ДатаНачалаСобытия,
		|				Сотрудник = &парамСотрудник
		|					И ВидНачисления = ЗНАЧЕНИЕ(Перечисление.ИНАГРО_ВидыНачисленийРаботникаОрганизации.Основное)) КАК ОсновноеНачисление
		|		ПО (ИСТИНА)";
		
	Запрос.Текст = ТекстЗапроса;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		ОсновнойВидРасчета = Выборка.ОсновнойВидРасчета;
		ГрафикРаботы = Выборка.ГрафикРаботы;
		ОтработаноЗа2Мес = Выборка.ОтработаноЗа2Мес;
		ОтработаноЗа4Мес = Выборка.ОтработаноЗа4Мес;
    КонецЕсли;
		
	Возврат ГрафикРаботы;
	
КонецФункции


Функция	ПолучитьДанныеОПриеме(ДатаПриемаПервыйРабочийДень)
	
	ЭтоПервыйРабочийДень = Ложь;
	ДатаПриема = Дата('00010101');
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("парамСотрудник",		Сотрудник );
	Запрос.УстановитьПараметр("парамФизЛицо",		Сотрудник.ФизическоеЛицо);
		
	ТекстЗапроса = "
	|	ВЫБРАТЬ
	|       ПриемРаботников.ДатаПриема КАК ДатаПриема,
	|		СУММА(ЕСТЬNULL(Графики.ОсновноеЗначение,0)) КАК ОтработаноДнейСНачалаМесяца
	|   ИЗ (
	|		ВЫБРАТЬ 
	|          	МИНИМУМ(Работники.Период) КАК ДатаПриема
	|		ИЗ РегистрСведений.ИНАГРО_РаботникиОрганизаций КАК Работники
	|   	ГДЕ Работники.Сотрудник = &парамСотрудник
	|       ) КАК ПриемРаботников
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИНАГРО_РаботникиОрганизаций КАК Работники 
	|   	ПО		Работники.Сотрудник = &парамСотрудник
	|			И	Работники.Период = ПриемРаботников.ДатаПриема
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИНАГРО_ГрафикиРаботыПоВидамВремени КАК Графики
	|   	ПО  	Графики.Дата >= НАЧАЛОПЕРИОДА(Работники.Период, МЕСЯЦ)
	|			И	Графики.Дата <= Работники.Период
	|			И	Графики.ВидУчетаВремени = ЗНАЧЕНИЕ(Перечисление.ИНАГРО_ВидыУчетаВремени.ПоДням)
	|			// индивидуальные графики и табели не анализируем, так как нас интересует только норма времени
	|			И	ВЫБОР КОГДА Работники.ГрафикРаботы.ГрафикРаботыНормыВремени <> ЗНАЧЕНИЕ(Справочник.ИНАГРО_ГрафикиРаботы.ПустаяСсылка)
	|						ТОГДА  Работники.ГрафикРаботы.ГрафикРаботыНормыВремени
	|                     ИНАЧЕ Работники.ГрафикРаботы
	|				КОНЕЦ = Графики.ГрафикРаботы
	|    СГРУППИРОВАТЬ ПО
	|       ПриемРаботников.ДатаПриема
	|";
				
	Запрос.Текст = ТекстЗапроса;
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ДатаПриема = Выборка.ДатаПриема;
		ДатаПриемаПервыйРабочийДень = (Выборка.ОтработаноДнейСНачалаМесяца = 0 ИЛИ Выборка.ОтработаноДнейСНачалаМесяца = 1);
	КонецЕсли;

	Возврат ДатаПриема;
	
КонецФункции

Функция СоздатьСтрокуРасчетСреднего(ВидРасч, Коэффициент, БазовыйПериодНачало, БазовыйПериодКонец) 
	
	// Строку вставляем на первую позицию, потому что коэффициент считали в обратном порядке.
	СтрокаТабличнойЧасти =  РасчетСреднего.Вставить(0);
	
	СтрокаТабличнойЧасти.Авторасчет 			= Истина;
	СтрокаТабличнойЧасти.ВидРасчета 			= ВидРасч;
	СтрокаТабличнойЧасти.БазовыйПериодНачало 	= БазовыйПериодНачало;
	СтрокаТабличнойЧасти.БазовыйПериодКонец 	= БазовыйПериодКонец;
	СтрокаТабличнойЧасти.КоэффициентПовышенияОкладов = Коэффициент;
	
КонецФункции

#КонецОбласти

#Область АвтозаполнениеРасчет

// Получение данных
//
Процедура АвтозаполнениеНачисления(СуммаСредней = 0) Экспорт
	
	ПолучитьРеквизитыНачисленияНаСервере();
	мСпособОтраженияВБухучете = Справочники.СпособыОтраженияЗарплатыВРеглУчете.ПустаяСсылка();
	
	// данные нормы календаря помесячно
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("парамРегистратор",	Ссылка);
	Запрос.УстановитьПараметр("ДатаНачала",	ДатаНачала);
	Запрос.УстановитьПараметр("парамСотрудник",		Сотрудник);
	Запрос.УстановитьПараметр("парамФизлицо",		Сотрудник.ФизическоеЛицо);
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	Основной.Дата,
	|	Основной.ПериодРегистрации,
	|	Основной.Организация,
	|	Основной.Ссылка,
	|	Основной.Сотрудник,
	|	Основной.ДатаНачала,
	|	Основной.ДатаОкончания,
	|	ВЫБОР КОГДА Работники.Сотрудник = Основной.Сотрудник ТОГДА Основной.СуммаСредней ИНАЧЕ 0 КОНЕЦ КАК СуммаСредней,
	|	Основной.ПроцентОплаты,
	|	Основной.ВидУчетаВремениДляСредней,
	|  	Основной.ПериодРасчетаСреднегоНачало	КАК ПериодРасчетаСреднегоНачало,
	|  	Основной.ПериодРасчетаСреднегоКонец		КАК ПериодРасчетаСреднегоКонец,
	|
	|	Работники.Сотрудник 						КАК Назначение,
	|	Работники.ПодразделениеОрганизации			КАК ПодразделениеОрганизации
	|
	|ИЗ Документ.ИНАГРО_РегистрацияПростояРаботниковОрганизаций КАК Основной
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИНАГРО_РаботникиОрганизаций.СрезПоследних(&ДатаНачала, Сотрудник = &парамСотрудник ИЛИ Сотрудник.ОсновноеНазначение = &парамСотрудник ) КАК Работники
	|ПО		ИСТИНА
	|
	|ГДЕ Основной.Ссылка = &парамРегистратор	
	|	И  ЕСТЬNULL(Работники.ЗанимаемыхСтавок,1) > 0
	|";
	
	Запрос.Текст = ТекстЗапроса;
	
	Выборка = Запрос.Выполнить().Выбрать();
	мСпособОтраженияВБухучете = Справочники.СпособыОтраженияЗарплатыВРеглУчете.ПустаяСсылка();

	Пока Выборка.Следующий() Цикл
		
		ТекущаяДатаНачала = ДатаНачала;
		ТекущаяДатаОкончания = Мин(КонецМесяца(ТекущаяДатаНачала), ДатаОкончания);
		
		Пока ТекущаяДатаНачала <= ТекущаяДатаОкончания Цикл
		
			// строка движений
			НоваяСтрока = Начисления.Добавить();
			
			// Свойства
			НоваяСтрока.Авторасчет			= Истина;
			НоваяСтрока.ДатаНачала			= НачалоДня(ТекущаяДатаНачала);
			НоваяСтрока.ДатаОкончания		= КонецДня(ТекущаяДатаОкончания);
			НоваяСтрока.БазовыйПериодНачало	= НачалоДня(ТекущаяДатаНачала);
			НоваяСтрока.БазовыйПериодКонец	= КонецДня(ТекущаяДатаОкончания);
			НоваяСтрока.ВидРасчета			= ВидРасчета;
			
			// Измерения
			НоваяСтрока.Сотрудник = Выборка.Сотрудник;
			НоваяСтрока.Назначение = Выборка.Назначение;
			
			// Реквизиты
			ПроставитьДанныеСтроки(Сотрудник, Выборка.Назначение, НоваяСтрока.ДатаНачала, Ссылка, НоваяСтрока);
			
			Если ВидПростоя = Перечисления.ИНАГРО_ВидыПростояРаботника.ПоНезависящимПричинам Тогда
				НоваяСтрока.Показатель1	= Выборка.СуммаСредней;
				НоваяСтрока.Показатель2	= 100;
				НоваяСтрока.ВидУчетаВремениДляСредней	= Выборка.ВидУчетаВремениДляСредней;
			Иначе
				НоваяСтрока.Показатель1	= НоваяСтрока.Показатель1;
				НоваяСтрока.Показатель2	= ПроцентОплаты;
			КонецЕсли;
			
			Если СпособРегистрацииВремени = Перечисления.ИНАГРО_СпособыРегистрацииВремени.РегистрацияДляЧастиСмены Тогда
				НоваяСтрока.ОплачиватьЧасов	= ОплачиватьЧасов;
			КонецЕсли;
			
			ТекущаяДатаНачала = ТекущаяДатаОкончания + 1;
			ТекущаяДатаОкончания = Мин(КонецМесяца(ТекущаяДатаНачала), ДатаОкончания);
		КонецЦикла;
		
	КонецЦикла;
	Записать();
	
КонецПроцедуры  // АвтозаполнениеНачисления()  

// Данная процедура написана компанией ИН-АГРО.
	// 
Процедура ПроставитьДанныеСтроки(Сотрудник, Назначение, ДатаСобытия, Регистратор, ТекущаяСтрока) Экспорт
	
	ПериодРегистрации = Регистратор.ПериодРегистрации;
	
	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("парамДатаСобытия", ДатаСобытия);
	Запрос.УстановитьПараметр("парамСотрудник", Сотрудник);
	Запрос.УстановитьПараметр("парамНазначение", Назначение);
	Запрос.УстановитьПараметр("парамВидРасчета", ТекущаяСтрока.ВидРасчета);
	Запрос.УстановитьПараметр("парамСпособРасчета", ТекущаяСтрока.ВидРасчета.СпособРасчета);
	Запрос.УстановитьПараметр("парамОрганизация", Сотрудник.ГоловнаяОрганизация);
	
	Запрос.УстановитьПараметр("парамПериодРегистрации" , ПериодРегистрации);
	Запрос.УстановитьПараметр("парамВалютаРегламентУчета" , Константы.ВалютаРегламентированногоУчета.Получить());
	
	ТекстПВР = "ИНАГРО_Начисления";
	ТекстПРС = "ИНАГРО_ПлановыеНачисленияРаботниковОрганизаций";
	
	//	ВТОкладТариф
	Если Истина Тогда 
		//	Описание:
		// 		Все оклады сотрудников
		//		Для п.1.   			

		ТекстЗапросаВТ = "ВЫБРАТЬ ПЕРВЫЕ 1
		                 |	ИНАГРО_ПлановыеНачисленияРаботниковОрганизацийСрезПоследних.Организация КАК Организация,
		                 |	ИНАГРО_ПлановыеНачисленияРаботниковОрганизацийСрезПоследних.Сотрудник КАК Назначение,
		                 |	ИНАГРО_ПлановыеНачисленияРаботниковОрганизацийСрезПоследних.ВидРасчета КАК ВидРасчета,
		                 |	ВЫБОР
		                 |		КОГДА ИНАГРО_ПлановыеНачисленияРаботниковОрганизацийСрезПоследних.ВидРасчета.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаНачислений.ПоМесячнойТарифнойСтавкеПоДням)
		                 |				ИЛИ ИНАГРО_ПлановыеНачисленияРаботниковОрганизацийСрезПоследних.ВидРасчета.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаНачислений.ПоМесячнойТарифнойСтавкеПоЧасам)
		                 |				ИЛИ НаборПоказателей.Показатель = ЗНАЧЕНИЕ(Справочник.ИНАГРО_ПоказателиСхемМотивации.НормаВремениВДнях)
		                 |				ИЛИ НаборПоказателей.Показатель = ЗНАЧЕНИЕ(Справочник.ИНАГРО_ПоказателиСхемМотивации.НормаВремениВЧасах)
		                 |				ИЛИ НаборПоказателей.Показатель = ЗНАЧЕНИЕ(Справочник.ИНАГРО_ПоказателиСхемМотивации.НормаВремениЗаМесяцВДнях)
		                 |				ИЛИ НаборПоказателей.Показатель = ЗНАЧЕНИЕ(Справочник.ИНАГРО_ПоказателиСхемМотивации.НормаВремениЗаМесяцВЧасах)
		                 |			ТОГДА ""ЗА МЕСЯЦ""
		                 |		КОГДА ИНАГРО_ПлановыеНачисленияРаботниковОрганизацийСрезПоследних.ВидРасчета.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаНачислений.ПоДневнойТарифнойСтавке)
		                 |			ТОГДА ""ЗА ДЕНЬ""
		                 |		ИНАЧЕ ""ЗА ЧАС""
		                 |	КОНЕЦ КАК СпособУчетаВремени,
		                 |	ИНАГРО_ПлановыеНачисленияРаботниковОрганизацийСрезПоследних.Показатель1 КАК ОкладТариф,
		                 |	ИНАГРО_ПлановыеНачисленияРаботниковОрганизацийСрезПоследних.Период КАК ДатаНачала,
		                 |	МИНИМУМ(Окончания.Период) КАК ДатаОкончания 
						 |ПОМЕСТИТЬ ВТОкладТариф 
		                 |ИЗ
		                 |	РегистрСведений.ИНАГРО_ПлановыеНачисленияРаботниковОрганизаций.СрезПоследних(&парамДатаСобытия, ) КАК ИНАГРО_ПлановыеНачисленияРаботниковОрганизацийСрезПоследних
		                 |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИНАГРО_ПлановыеНачисленияРаботниковОрганизаций КАК Окончания
		                 |		ПО (ИНАГРО_ПлановыеНачисленияРаботниковОрганизацийСрезПоследних.ВидНачисления <> ЗНАЧЕНИЕ(Перечисление.ИНАГРО_ВидыНачисленийРаботникаОрганизации.Индивидуальное))
		                 |			И (ИНАГРО_ПлановыеНачисленияРаботниковОрганизацийСрезПоследних.Действует)
		                 |			И (ИНАГРО_ПлановыеНачисленияРаботниковОрганизацийСрезПоследних.Организация = &парамОрганизация)
		                 |			И ИНАГРО_ПлановыеНачисленияРаботниковОрганизацийСрезПоследних.Сотрудник = Окончания.Сотрудник
		                 |			И ИНАГРО_ПлановыеНачисленияРаботниковОрганизацийСрезПоследних.ВидРасчета = Окончания.ВидРасчета
		                 |			И ИНАГРО_ПлановыеНачисленияРаботниковОрганизацийСрезПоследних.Период < Окончания.Период
		                 |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ ПЕРВЫЕ 1
		                 |			НаборПоказателей.Ссылка КАК ВидРасчета,
		                 |			НаборПоказателей.Показатель КАК Показатель
		                 |		ИЗ
		                 |			ПланВидовРасчета.ИНАГРО_Начисления.Показатели КАК НаборПоказателей
		                 |		ГДЕ
		                 |			(НаборПоказателей.Показатель = ЗНАЧЕНИЕ(Справочник.ИНАГРО_ПоказателиСхемМотивации.НормаВремениВДнях)
		                 |					ИЛИ НаборПоказателей.Показатель = ЗНАЧЕНИЕ(Справочник.ИНАГРО_ПоказателиСхемМотивации.НормаВремениВЧасах)
		                 |					ИЛИ НаборПоказателей.Показатель = ЗНАЧЕНИЕ(Справочник.ИНАГРО_ПоказателиСхемМотивации.НормаВремениЗаМесяцВДнях)
		                 |					ИЛИ НаборПоказателей.Показатель = ЗНАЧЕНИЕ(Справочник.ИНАГРО_ПоказателиСхемМотивации.НормаВремениЗаМесяцВЧасах))) КАК НаборПоказателей
		                 |		ПО ИНАГРО_ПлановыеНачисленияРаботниковОрганизацийСрезПоследних.ВидРасчета = НаборПоказателей.ВидРасчета
		                 |ГДЕ
		                 |	ИНАГРО_ПлановыеНачисленияРаботниковОрганизацийСрезПоследних.ВидНачисления <> ЗНАЧЕНИЕ(Перечисление.ИНАГРО_ВидыНачисленийРаботникаОрганизации.Индивидуальное)
		                 |	И ИНАГРО_ПлановыеНачисленияРаботниковОрганизацийСрезПоследних.Действует
		                 |	И ИНАГРО_ПлановыеНачисленияРаботниковОрганизацийСрезПоследних.Организация = &парамОрганизация
		                 |	И ИНАГРО_ПлановыеНачисленияРаботниковОрганизацийСрезПоследних.Сотрудник = &парамНазначение
		                 |
		                 |СГРУППИРОВАТЬ ПО
		                 |	ИНАГРО_ПлановыеНачисленияРаботниковОрганизацийСрезПоследних.Действует,
		                 |	ИНАГРО_ПлановыеНачисленияРаботниковОрганизацийСрезПоследних.Организация,
		                 |	ИНАГРО_ПлановыеНачисленияРаботниковОрганизацийСрезПоследних.Сотрудник,
		                 |	ИНАГРО_ПлановыеНачисленияРаботниковОрганизацийСрезПоследних.ВидРасчета,
		                 |	ВЫБОР
		                 |		КОГДА ИНАГРО_ПлановыеНачисленияРаботниковОрганизацийСрезПоследних.ВидРасчета.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаНачислений.ПоМесячнойТарифнойСтавкеПоДням)
		                 |				ИЛИ ИНАГРО_ПлановыеНачисленияРаботниковОрганизацийСрезПоследних.ВидРасчета.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаНачислений.ПоМесячнойТарифнойСтавкеПоЧасам)
		                 |				ИЛИ НаборПоказателей.Показатель = ЗНАЧЕНИЕ(Справочник.ИНАГРО_ПоказателиСхемМотивации.НормаВремениВДнях)
		                 |				ИЛИ НаборПоказателей.Показатель = ЗНАЧЕНИЕ(Справочник.ИНАГРО_ПоказателиСхемМотивации.НормаВремениВЧасах)
		                 |				ИЛИ НаборПоказателей.Показатель = ЗНАЧЕНИЕ(Справочник.ИНАГРО_ПоказателиСхемМотивации.НормаВремениЗаМесяцВДнях)
		                 |				ИЛИ НаборПоказателей.Показатель = ЗНАЧЕНИЕ(Справочник.ИНАГРО_ПоказателиСхемМотивации.НормаВремениЗаМесяцВЧасах)
		                 |			ТОГДА ""ЗА МЕСЯЦ""
		                 |		КОГДА ИНАГРО_ПлановыеНачисленияРаботниковОрганизацийСрезПоследних.ВидРасчета.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаНачислений.ПоДневнойТарифнойСтавке)
		                 |			ТОГДА ""ЗА ДЕНЬ""
		                 |		ИНАЧЕ ""ЗА ЧАС""
		                 |	КОНЕЦ,
		                 |	ИНАГРО_ПлановыеНачисленияРаботниковОрганизацийСрезПоследних.Показатель1,
		                 |	ИНАГРО_ПлановыеНачисленияРаботниковОрганизацийСрезПоследних.Период
		                 |
		                 |УПОРЯДОЧИТЬ ПО
		                 |	ДатаНачала УБЫВ";
		Запрос.Текст = ТекстЗапросаВТ;
		Запрос.Выполнить();
	КонецЕсли;
	
	//	ВТЗначенияПоказателей
	Если Истина Тогда 
		//	Описание:
		// 		Все оклады сотрудников
		//		Для п.1.
		ТекстЗапроса = "
		|ВЫБРАТЬ
		|	ЗначенияПоказателей.Сотрудник,
		|	ЗначенияПоказателей.Подразделение,
		|	ЗначенияПоказателей.Показатель,
		|	НАЧАЛОПЕРИОДА(ЗначенияПоказателей.ПериодДействия, МЕСЯЦ) КАК ПериодДействия,
		|	ЗначенияПоказателей.Значение КАК Значение
		|ПОМЕСТИТЬ ВТЗначенияПоказателей
		|ИЗ РегистрСведений.ИНАГРО_ЗначенияПоказателейСхемМотивации КАК ЗначенияПоказателей
		|	
		|ГДЕ	ЗначенияПоказателей.Организация = &парамОрганизация
		|	И	НАЧАЛОПЕРИОДА(ЗначенияПоказателей.ПериодДействия, МЕСЯЦ) = НАЧАЛОПЕРИОДА(&парамДатаСобытия, МЕСЯЦ)
		|	И	(ЗначенияПоказателей.Сотрудник = &парамНазначение
		|	ИЛИ	ЗначенияПоказателей.Сотрудник = ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка))
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Показатель
		|";
		Запрос.Текст = ТекстЗапроса;
		Запрос.Выполнить();
	КонецЕсли;
	Запрос.Текст = "ВЫБРАТЬ * ИЗ ВТЗначенияПоказателей";
	
	//	ВТПоказатели
	Если Истина Тогда 
		//	Описание:
		// 		
		//		
		ТекстЗапроса = "
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СотрудникиПодразделенияВПоказателях.Сотрудник КАК Сотрудник,
		|	СотрудникиПодразделенияВПоказателях.Подразделение КАК Подразделение,
		|	ПоказателиВидовРасчета.Ссылка КАК ВидРасчета,
		|	ПоказателиВидовРасчета.Показатель1.ТипПоказателя КАК ТипПоказателя1,
		|	ПоказателиВидовРасчета.Показатель2.ТипПоказателя КАК ТипПоказателя2,
		|	ПоказателиВидовРасчета.Показатель3.ТипПоказателя КАК ТипПоказателя3,
		|	ПоказателиВидовРасчета.Показатель4.ТипПоказателя КАК ТипПоказателя4,
		|	ПоказателиВидовРасчета.Показатель5.ТипПоказателя КАК ТипПоказателя5,
		|	ПоказателиВидовРасчета.Показатель6.ТипПоказателя КАК ТипПоказателя6,
		|	ПоказателиВидовРасчета.Показатель1.ВозможностьИзменения КАК ВозможностьИзменения1,
		|	ПоказателиВидовРасчета.Показатель2.ВозможностьИзменения КАК ВозможностьИзменения2,
		|	ПоказателиВидовРасчета.Показатель3.ВозможностьИзменения КАК ВозможностьИзменения3,
		|	ПоказателиВидовРасчета.Показатель4.ВозможностьИзменения КАК ВозможностьИзменения4,
		|	ПоказателиВидовРасчета.Показатель5.ВозможностьИзменения КАК ВозможностьИзменения5,
		|	ПоказателиВидовРасчета.Показатель6.ВозможностьИзменения КАК ВозможностьИзменения6,
		|	ЗначенияПоказателей1.Значение КАК Показатель1,
		|	ЗначенияПоказателей2.Значение КАК Показатель2,
		|	ЗначенияПоказателей3.Значение КАК Показатель3,
		|	ЗначенияПоказателей4.Значение КАК Показатель4,
		|	ЗначенияПоказателей5.Значение КАК Показатель5,
		|	ЗначенияПоказателей6.Значение КАК Показатель6
		|ПОМЕСТИТЬ ВТПоказатели
		|ИЗ (ВЫБРАТЬ РАЗЛИЧНЫЕ Подразделение, Сотрудник ИЗ ВТЗначенияПоказателей КАК ЗначенияПоказателей) КАК СотрудникиПодразделенияВПоказателях
		|
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	(ВЫБРАТЬ
		|		Показатели.Ссылка КАК Ссылка,
		|		Показатели1.Показатель КАК Показатель1,
		|		Показатели2.Показатель КАК Показатель2,
		|		Показатели3.Показатель КАК Показатель3,
		|		Показатели4.Показатель КАК Показатель4,
		|		Показатели5.Показатель КАК Показатель5,
		|		Показатели6.Показатель КАК Показатель6
		|	ИЗ ПланВидовРасчета.ИНАГРО_Начисления.Показатели КАК Показатели
		|	
		|	ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.ИНАГРО_Начисления.Показатели КАК Показатели1
		|	ПО Показатели.Ссылка = Показатели1.Ссылка И Показатели1.НомерСтроки = 1
		|	ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.ИНАГРО_Начисления.Показатели КАК Показатели2
		|	ПО Показатели.Ссылка = Показатели2.Ссылка И Показатели2.НомерСтроки = 2
		|	ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.ИНАГРО_Начисления.Показатели КАК Показатели3
		|	ПО Показатели.Ссылка = Показатели3.Ссылка И Показатели3.НомерСтроки = 3
		|	ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.ИНАГРО_Начисления.Показатели КАК Показатели4
		|	ПО Показатели.Ссылка = Показатели4.Ссылка И Показатели4.НомерСтроки = 4
		|	ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.ИНАГРО_Начисления.Показатели КАК Показатели5
		|	ПО Показатели.Ссылка = Показатели5.Ссылка И Показатели5.НомерСтроки = 5
		|	ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.ИНАГРО_Начисления.Показатели КАК Показатели6
		|	ПО Показатели.Ссылка = Показатели6.Ссылка И Показатели6.НомерСтроки = 6
		|	
		|) КАК ПоказателиВидовРасчета
		|ПО ИСТИНА
		|	
		|	
		|ЛЕВОЕ СОЕДИНЕНИЕ ВТЗначенияПоказателей КАК ЗначенияПоказателей1
		|ПО 	ПоказателиВидовРасчета.Показатель1 = ЗначенияПоказателей1.Показатель
		|	И	СотрудникиПодразделенияВПоказателях.Сотрудник = ЗначенияПоказателей1.Сотрудник
		|	И	СотрудникиПодразделенияВПоказателях.Подразделение = ЗначенияПоказателей1.Подразделение
		|ЛЕВОЕ СОЕДИНЕНИЕ ВТЗначенияПоказателей КАК ЗначенияПоказателей2
		|ПО		ПоказателиВидовРасчета.Показатель2 = ЗначенияПоказателей2.Показатель
		|	И	СотрудникиПодразделенияВПоказателях.Сотрудник = ЗначенияПоказателей2.Сотрудник
		|	И	СотрудникиПодразделенияВПоказателях.Подразделение = ЗначенияПоказателей2.Подразделение
		|ЛЕВОЕ СОЕДИНЕНИЕ ВТЗначенияПоказателей КАК ЗначенияПоказателей3
		|ПО		ПоказателиВидовРасчета.Показатель3 = ЗначенияПоказателей3.Показатель
		|	И	СотрудникиПодразделенияВПоказателях.Сотрудник = ЗначенияПоказателей3.Сотрудник
		|	И	СотрудникиПодразделенияВПоказателях.Подразделение = ЗначенияПоказателей3.Подразделение
		|ЛЕВОЕ СОЕДИНЕНИЕ ВТЗначенияПоказателей КАК ЗначенияПоказателей4
		|ПО		ПоказателиВидовРасчета.Показатель4 = ЗначенияПоказателей4.Показатель
		|	И	СотрудникиПодразделенияВПоказателях.Сотрудник = ЗначенияПоказателей4.Сотрудник
		|	И	СотрудникиПодразделенияВПоказателях.Подразделение = ЗначенияПоказателей4.Подразделение
		|ЛЕВОЕ СОЕДИНЕНИЕ ВТЗначенияПоказателей КАК ЗначенияПоказателей5
		|ПО		ПоказателиВидовРасчета.Показатель5 = ЗначенияПоказателей5.Показатель
		|	И	СотрудникиПодразделенияВПоказателях.Сотрудник = ЗначенияПоказателей5.Сотрудник
		|	И	СотрудникиПодразделенияВПоказателях.Подразделение = ЗначенияПоказателей5.Подразделение
		|ЛЕВОЕ СОЕДИНЕНИЕ ВТЗначенияПоказателей КАК ЗначенияПоказателей6
		|ПО		ПоказателиВидовРасчета.Показатель6 = ЗначенияПоказателей6.Показатель
		|	И	СотрудникиПодразделенияВПоказателях.Сотрудник = ЗначенияПоказателей6.Сотрудник
		|	И	СотрудникиПодразделенияВПоказателях.Подразделение = ЗначенияПоказателей6.Подразделение
		|
		|ГДЕ	ПоказателиВидовРасчета.Ссылка = &парамВидРасчета
		|	И (ЗначенияПоказателей1.Значение ЕСТЬ НЕ NULL
		|	ИЛИ	ЗначенияПоказателей2.Значение ЕСТЬ НЕ NULL
		|	ИЛИ	ЗначенияПоказателей3.Значение ЕСТЬ НЕ NULL
		|	ИЛИ	ЗначенияПоказателей4.Значение ЕСТЬ НЕ NULL
		|	ИЛИ	ЗначенияПоказателей5.Значение ЕСТЬ НЕ NULL
		|	ИЛИ	ЗначенияПоказателей6.Значение ЕСТЬ НЕ NULL)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ВидРасчета
		|";
		Запрос.Текст = ТекстЗапроса;
		Запрос.Выполнить();
	КонецЕсли;
	Запрос.Текст = "ВЫБРАТЬ * ИЗ ВТПоказатели";

	ТекстПоказатель1 = "
	|			ВЫБОР
	|				КОГДА ПоказателиСхемМотивацийПоСотруднику.Показатель1 ЕСТЬ НЕ NULL 
	|					ТОГДА ПоказателиСхемМотивацийПоСотруднику.Показатель1
	|				КОГДА ПоказателиСхемМотивацийПоПодразделению.Показатель1 ЕСТЬ НЕ NULL 
	|					ТОГДА ПоказателиСхемМотивацийПоПодразделению.Показатель1
	|				КОГДА ПоказателиСхемМотивацийПоОрганизации.Показатель1 ЕСТЬ НЕ NULL 
	|					ТОГДА ПоказателиСхемМотивацийПоОрганизации.Показатель1
	|				КОГДА ТипПоказатель1.Показатель = ЗНАЧЕНИЕ(Справочник.ИНАГРО_ПоказателиСхемМотивации.ОкладТарифНазначения)
	|                   //СПЕЦИАЛЬНЫЕ
	|                   // для оклада валюта учтена при его получении
	|					ТОГДА	ВЫБОР	КОГДА Оклады.СпособУчетаВремени = ""ЗА МЕСЯЦ"" И ДанныеКалендаря.НормаЧасовЗаМесяц > 0
	|										ТОГДА Оклады.ОкладТариф/ДанныеКалендаря.НормаЧасовЗаМесяц
	|									КОГДА Оклады.СпособУчетаВремени = ""ЗА ДЕНЬ""
	|										ТОГДА Оклады.ОкладТариф/8
	|									ИНАЧЕ Оклады.ОкладТариф
	|							КОНЕЦ
	|				КОГДА ТипПоказатель1.Показатель = ЗНАЧЕНИЕ(Справочник.ИНАГРО_ПоказателиСхемМотивации.ОкладТариф)
	|                   // для оклада валюта учтена при его получении
	|					ТОГДА Оклады.ОкладТариф
	|				ИНАЧЕ ЕСТЬNULL(СписокПлановыхНачислений.Показатель1, 0) 
	|			КОНЕЦ
	|	";
	ТекстПоказатель2 = СтрЗаменить(ТекстПоказатель1, "1", "2");
	ТекстПоказатель3 = СтрЗаменить(ТекстПоказатель1, "1", "3");
	ТекстПоказатель4 = СтрЗаменить(ТекстПоказатель1, "1", "4");
	ТекстПоказатель5 = СтрЗаменить(ТекстПоказатель1, "1", "5");
	ТекстПоказатель6 = СтрЗаменить(ТекстПоказатель1, "1", "6");
	
	//Некоторые способы расчета имеют "виртуальный" показатель 1 "часовой тариф"
	ТекстПоказатель1 = СтрЗаменить(ТекстПоказатель1, "//СПЕЦИАЛЬНЫЕ", 
	"ИЛИ &парамСпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаНачислений.ДоплатаЗаНочныеЧасы) 
	|ИЛИ &парамСпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаНачислений.ДоплатаЗаВечерниеЧасы)
	|ИЛИ &парамСпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаНачислений.ПоЧасовойТарифнойСтавкеУмножитьНаПроцент)");
	
	// Основной текст запроса
	ОсновнойТекстЗапроса = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РаботникиОрганизации.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	|	Оклады.ОкладТариф КАК ОкладТариф,
    |
	|	" + ТекстПоказатель1 + " КАК Показатель1,
	|	" + ТекстПоказатель2 + " КАК Показатель2,
	|	" + ТекстПоказатель3 + " КАК Показатель3,
	|	" + ТекстПоказатель4 + " КАК Показатель4,
	|	" + ТекстПоказатель5 + " КАК Показатель5,
	|	" + ТекстПоказатель6 + " КАК Показатель6,
	|
	|	ДанныеКалендаря.НормаДнейЗаМесяц	КАК НормаДнейЗаМесяц,
	|	ДанныеКалендаря.НормаЧасовЗаМесяц	КАК НормаЧасовЗаМесяц,
	|	ДанныеКалендаря.ГрафикРаботы        КАК ГрафикРаботы
	|ИЗ ПланВидовРасчета.ИНАГРО_Начисления КАК СписокНачислений
	|
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИНАГРО_ПлановыеНачисленияРаботниковОрганизаций.СрезПоследних(&парамДатаСобытия, Сотрудник = &парамНазначение) КАК СписокПлановыхНачислений
	|ПО		СписокПлановыхНачислений.ВидРасчета = &парамВидРасчета
	|
	|
	|
	|//-----------------------
	|// данные о подразделении и графике работы
	|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИНАГРО_РаботникиОрганизаций.СрезПоследних(&парамДатаСобытия, Сотрудник = &парамНазначение) КАК РаботникиОрганизации
	|ПО ИСТИНА
	|
	|
	|//-----------------------
	|// данные нормы календаря
	|ЛЕВОЕ СОЕДИНЕНИЕ (
	|	ВЫБРАТЬ
	|		ГрафикиРаботы.ГрафикРаботы						КАК ГрафикРаботы,
	|		СУММА( ГрафикиРаботы.ОсновноеЗначение  )		КАК НормаДнейЗаМесяц,
	|		СУММА( ГрафикиРаботы.ДополнительноеЗначение )	КАК НормаЧасовЗаМесяц
	|	ИЗ	РегистрСведений.ИНАГРО_ГрафикиРаботыПоВидамВремени	КАК ГрафикиРаботы
	|	ГДЕ		НАЧАЛОПЕРИОДА( ГрафикиРаботы.Дата, МЕСЯЦ ) = НАЧАЛОПЕРИОДА( &парамДатаСобытия, МЕСЯЦ ) 
	|		И	ГрафикиРаботы.ВидУчетаВремени = ЗНАЧЕНИЕ(Перечисление.ИНАГРО_ВидыУчетаВремени.ПоДням) 
	|	СГРУППИРОВАТЬ ПО
	|			ГрафикиРаботы.ГрафикРаботы
	|) КАК ДанныеКалендаря
	|ПО		ДанныеКалендаря.ГрафикРаботы =  
	|			ВЫБОР КОГДА РаботникиОрганизации.ГрафикРаботы.УчетНормыВремениПоОтдельномуГрафику
	|				ТОГДА  РаботникиОрганизации.ГрафикРаботы.ГрафикРаботыНормыВремени 
	|				ИНАЧЕ  РаботникиОрганизации.ГрафикРаботы 
	|		КОНЕЦ 
	|	
	|	
	|
	|
	|//-----------------------
	|// данные о видах показателей
	|ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.ИНАГРО_Начисления.Показатели КАК ТипПоказатель1
	|ПО		ТипПоказатель1.Ссылка = СписокНачислений.Ссылка И ТипПоказатель1.НомерСтроки = 1
	|ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.ИНАГРО_Начисления.Показатели КАК ТипПоказатель2
	|ПО		ТипПоказатель2.Ссылка = СписокНачислений.Ссылка И ТипПоказатель2.НомерСтроки = 2
	|ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.ИНАГРО_Начисления.Показатели КАК ТипПоказатель3
	|ПО		ТипПоказатель3.Ссылка = СписокНачислений.Ссылка И ТипПоказатель3.НомерСтроки = 3
	|ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.ИНАГРО_Начисления.Показатели КАК ТипПоказатель4
	|ПО		ТипПоказатель4.Ссылка = СписокНачислений.Ссылка И ТипПоказатель4.НомерСтроки = 4
	|ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.ИНАГРО_Начисления.Показатели КАК ТипПоказатель5
	|ПО		ТипПоказатель5.Ссылка = СписокНачислений.Ссылка И ТипПоказатель5.НомерСтроки = 5
	|ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.ИНАГРО_Начисления.Показатели КАК ТипПоказатель6
	|ПО		ТипПоказатель6.Ссылка = СписокНачислений.Ссылка И ТипПоказатель6.НомерСтроки = 6
	|
	|//-----------------------
	|// данные об окладах
	|ЛЕВОЕ СОЕДИНЕНИЕ ВТОкладТариф КАК Оклады
	|ПО	ИСТИНА
	|
	|//-----------------------
	|// данные показателей Схем Мотиваций
	|// по конкретным сотрудникам
	|ЛЕВОЕ СОЕДИНЕНИЕ ВТПоказатели КАК ПоказателиСхемМотивацийПоСотруднику
	|ПО	ПоказателиСхемМотивацийПоСотруднику.Сотрудник = &парамНазначение
	|
	|// по подразделению
	|ЛЕВОЕ СОЕДИНЕНИЕ ВТПоказатели КАК ПоказателиСхемМотивацийПоПодразделению
	|ПО	ПоказателиСхемМотивацийПоПодразделению.Подразделение = РаботникиОрганизации.ПодразделениеОрганизации
	|
	|
	|// организации
	|ЛЕВОЕ СОЕДИНЕНИЕ ВТПоказатели КАК ПоказателиСхемМотивацийПоОрганизации
	|ПО		ПоказателиСхемМотивацийПоОрганизации.Сотрудник = ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка)
	|	И	ПоказателиСхемМотивацийПоОрганизации.Подразделение = ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка) 
	|
	|
	|ГДЕ СписокНачислений.Ссылка = &парамВидРасчета
	|
	|";
	
	Запрос.Текст = ОсновнойТекстЗапроса;
	
	ВыборкаНачисления = Запрос.Выполнить().Выбрать();
	Пока ВыборкаНачисления.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(ТекущаяСтрока, ВыборкаНачисления);
	КонецЦикла;

КонецПроцедуры

Процедура РассчитатьПараметрыСреднейДокумента() Экспорт
	
	ЧислоМесяцев = 2;
		
	Если ДатаНачала= Дата('00010101') Тогда
		ПериодРасчетаСреднегоНачало	= Дата('00010101');
		ПериодРасчетаСреднегоКонец	= Дата('00010101');
		ВидУчетаВремениДляСредней = Перечисления.ИНАГРО_ВидыУчетаВремениДляСредней.ПоРабочимДням;
	Иначе
		
		Если ДатаНачала >= ИНАГРО_ПроведениеРасчетов.ДатаИзмененияПорядка100() Тогда
			ПолучитьПериодПоРаботнику1213()
		Иначе
			ПолучитьПериодПоРаботнику();
			ГодоваяПремияБазовыйПериодНачало = НачалоГода(НачалоГода(ПериодРасчетаСреднегоНачало));
			ГодоваяПремия = ИНАГРО_ПроведениеРасчетов.РассчитатьПремияЗаГод(ГодоваяПремияБазовыйПериодНачало, Сотрудник);
		КонецЕсли;	

	КонецЕсли;
			
КонецПроцедуры

&НаСервере
// Возвращает структуру, содержащую необходимые данные для заполнения строки начислений
Функция ПолучитьРеквизитыНачисленияНаСервере() Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("парамСотрудник", Сотрудник);
	Запрос.УстановитьПараметр("ДатаАктуальности", ДатаНачала);
	Запрос.УстановитьПараметр("ВидРасчета", ПланыВидовРасчета.ИНАГРО_Начисления.Простой);
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Работники.ПодразделениеОрганизации,
	|	РазмерыЗаконодательноУстановленныхВыплат.Размер КАК ПределОплатыЗаЧас,
	|	ОсновноеНачисление.ВидРасчета КАК ОсновнойВидРасчета,
	|	ОсновноеНачисление.Показатель1 КАК ОкладТариф,
	|	ОсновноеНачисление.ВидРасчета.СпособРасчета КАК СпособРасчета
	|
	|ИЗ	РегистрСведений.ИНАГРО_РаботникиОрганизаций.СрезПоследних(&ДатаАктуальности, Сотрудник = &парамСотрудник) КАК Работники
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИНАГРО_ПлановыеНачисленияРаботниковОрганизаций.СрезПоследних(&ДатаАктуальности, Сотрудник = &парамСотрудник И ВидНачисления = ЗНАЧЕНИЕ(Перечисление.ИНАГРО_ВидыНачисленийРаботникаОрганизации.Основное)) КАК ОсновноеНачисление
	|ПО		ИСТИНА
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИНАГРО_РазмерыЗаконодательноУстановленныхВыплат.СрезПоследних(&ДатаАктуальности, ВидРасчета = &ВидРасчета) КАК РазмерыЗаконодательноУстановленныхВыплат
	|ПО		ИСТИНА
	|
	|";
	
	ДанныеНаДатуНачисления = Запрос.Выполнить().Выбрать();
	
	ПроцентОплаты = 2/3 * 100;// 66.67%
	
	// Вид расчета
	Если ВидПростоя = Перечисления.ИНАГРО_ВидыПростояРаботника.ПоНезависящимПричинам Тогда
		
		Если СпособРегистрацииВремени = Перечисления.ИНАГРО_СпособыРегистрацииВремени.РегистрацияДляЧастиСмены Тогда
			ВидРасчета = ПланыВидовРасчета.ИНАГРО_Начисления.ПочасовойПростойПоСредней;
		Иначе
			ВидРасчета = ПланыВидовРасчета.ИНАГРО_Начисления.ПростойПоСредней;
		КонецЕсли;
		
		ПолучитьПериодПоРаботнику();
		ДанныеНаДатуНачисления.Следующий();
		
	ИначеЕсли ВидПростоя = Перечисления.ИНАГРО_ВидыПростояРаботника.ПриостановкаТрудовогоДоговора Тогда
		
		ВидРасчета = ПланыВидовРасчета.ИНАГРО_Начисления.ПростойСПриостановкойТрудДог;		
		
	Иначе
		
		Если ДанныеНаДатуНачисления.Следующий() Тогда
			
			СпособРасчета = ДанныеНаДатуНачисления.СпособРасчета;
			
			// На основе основного вида расчета найден вид расчета к оплате
			Если СпособРегистрацииВремени = Перечисления.ИНАГРО_СпособыРегистрацииВремени.РегистрацияДляЧастиСмены Тогда
				ВидРасчетаКОплате = ПланыВидовРасчета.ИНАГРО_Начисления.ПочасовойПростой;
			Иначе
				ВидРасчетаКОплате = ПланыВидовРасчета.ИНАГРО_Начисления.Простой;
			КонецЕсли;
		
			ВидРасчета = ВидРасчетаКОплате;
			
		КонецЕсли; 
	КонецЕсли;

	Возврат ДанныеНаДатуНачисления;
	
КонецФункции 


// Получение данных
//
Функция РассчитатьТЧСреднюю() Экспорт
	
	// очистить расчитываемые поля в ТЧ РасчетСреднего
	Для каждого ТекущаяСтрока Из РасчетСреднего Цикл
		
		Если ТекущаяСтрока.Авторасчет Тогда
			ТекущаяСтрока.Результат = 0;
			ТекущаяСтрока.РезультатПолный = 0;
			
			ТекущаяСтрока.ОтработаноДней = 0;
			ТекущаяСтрока.ОтработаноЧасов = 0;
			ТекущаяСтрока.КалендарныеДни = 0;
			ТекущаяСтрока.НормаДней = 0;
			ТекущаяСтрока.НормаЧасов = 0;
		КонецЕсли;
		
	КонецЦикла;
	Записать();
	
	Если ДатаНачала < ИНАГРО_ПроведениеРасчетов.ДатаИзмененияПорядка100() Тогда
		// 1. Если расчет по Окладу
		//
		Если  РасчетСреднего.Количество() > 0 И РасчетСреднего[0].ВидРасчета = ПланыВидовРасчета.ИНАГРО_СреднийЗаработок.ПоОкладу Тогда
			
			ПараметрыОклада = ИНАГРО_ПроведениеРасчетов.ПолучитьПараметыОклада(ПериодРасчетаСреднегоКонец, Сотрудник);
			РасчетСреднего[0].Результат			= ПараметрыОклада["Оклад"];
			РасчетСреднего[0].РезультатПолный	= ПараметрыОклада["Оклад"];
			РасчетСреднего[0].ОтработаноДней	= ПараметрыОклада["НормаДней"];
			РасчетСреднего[0].ОтработаноЧасов	= ПараметрыОклада["НормаЧасов"];
			РасчетСреднего[0].КалендарныеДни	= ПараметрыОклада["КалендарныеДни"];
			
			РассчитатьСреднюю();
			Записать();
			Возврат Истина;
			
		КонецЕсли;
		
		// 2. Стандартный расчет
	    //
		НачатьТранзакцию();
		Прочитать();
		ВыборкаПоСредним = СформироватьЗапросПоРасчетСреднего().Выбрать();
		ЗафиксироватьТранзакцию();
		
		// Создадим рабочие наборы записей
		Отказ = Ложь;
		НаборСредних = РегистрыРасчета.ИНАГРО_РасчетСреднегоЗаработка.СоздатьНаборЗаписей();
		НаборСредних.Отбор.Регистратор.Значение = Ссылка;
		Пока ВыборкаПоСредним.Следующий() Цикл
			
			ПроверитьЗаполнениеСтрокиРасчетСреднего(ВыборкаПоСредним, Отказ);
			Если НЕ Отказ Тогда
				// Заполним записи в наборах записей регистров
				ДобавитьСтрокуРасчетаСреднего(ВыборкаПоСредним, НаборСредних);
			КонецЕсли;
			
		КонецЦикла;
		НаборСредних.Записать();
		
		Если Отказ Тогда
			
			// Если есть какие-то проблемы - удаляем движения (тут нет транзакции) 
			// Удаляем движения
			НаборСредних.Очистить();
			НаборСредних.Записать();
			
			Возврат Не Отказ;
			
		КонецЕсли;
		
		ОсновнойВидРасчета = ПланыВидовРасчета.ИНАГРО_СреднийЗаработок.ПоЗаработкуДляОтпуска;
		тКоэффициентПовышенияОкладов = КоэффициентПовышенияОкладов;
		ПредыдущийПериодОсновногоВидаРасчета = Дата(1,1,1);
		нКоэффициентПовышенияОкладов = 0;
	    Выборка = ИНАГРО_ПроведениеРасчетов.РассчитатьСреднююПорядок100(Ссылка).Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			СтрокаТабличнойЧасти = РасчетСреднего.Получить( Выборка.НомерСтроки - 1 );
			
			Если НЕ СтрокаТабличнойЧасти.Авторасчет Тогда
				Продолжить;
			КонецЕсли;
			Если Не Выборка.ВидРасчета = ОсновнойВидРасчета И нКоэффициентПовышенияОкладов > 0 И ПредыдущийПериодОсновногоВидаРасчета = Выборка.БазовыйПериодНачало Тогда
				СтрокаТабличнойЧасти.Результат				= Окр(Выборка.Результат,2) * нКоэффициентПовышенияОкладов;
			Иначе	
				СтрокаТабличнойЧасти.Результат				= Окр(Выборка.Результат,2) * тКоэффициентПовышенияОкладов;
			КонецЕсли;
			СтрокаТабличнойЧасти.РезультатПолный		= Выборка.РезультатПолный;
			
			СтрокаТабличнойЧасти.ОтработаноДней			= Выборка.ОтработаноДней;
			СтрокаТабличнойЧасти.ОтработаноЧасов		= Выборка.ОтработаноЧасов;
			Если ВидУчетаВремениДляСредней = Перечисления.ИНАГРО_ВидыУчетаВремениДляСредней.ПоКалендарнымДнямСПраздниками
				И СтрокаТабличнойЧасти.ВидРасчета = ПланыВидовРасчета.ИНАГРО_СреднийЗаработок.ПоЗаработкуДляОтпуска Тогда
				СтрокаТабличнойЧасти.КалендарныеДни		= 1 + День(Выборка.БазовыйПериодКонец) - День(Выборка.БазовыйПериодНачало);
			Иначе
				СтрокаТабличнойЧасти.КалендарныеДни		= Выборка.КалендарныеДни;
			КонецЕсли;
			СтрокаТабличнойЧасти.НормаДней				= Выборка.НормаДней;
			СтрокаТабличнойЧасти.НормаЧасов				= Выборка.НормаЧасов;
			
			Если Выборка.ВидРасчета = ОсновнойВидРасчета Тогда
				нКоэффициентПовышенияОкладов = тКоэффициентПовышенияОкладов;
				тКоэффициентПовышенияОкладов = тКоэффициентПовышенияОкладов * Выборка.КоэффициентПовышенияОкладов;;
				ПредыдущийПериодОсновногоВидаРасчета = Выборка.БазовыйПериодНачало;
			КонецЕсли;
		КонецЦикла;
	Иначе
		// 1. Если расчет по Окладу
		//
		Если  РасчетСреднего.Количество() > 0 И РасчетСреднего[0].ВидРасчета = ПланыВидовРасчета.ИНАГРО_СреднийЗаработок.ПоОкладу Тогда
			
			ДатаНачалаСобытия = ДатаНачала;
			ПараметрыОклада = ИНАГРО_ПроведениеРасчетов.ПолучитьПараметыОклада1213(ДатаНачалаСобытия, Сотрудник,,,Истина);

			РасчетСреднего[0].Результат			= ПараметрыОклада["Оклад"];
			РасчетСреднего[0].РезультатПолный	= ПараметрыОклада["Оклад"];
			РасчетСреднего[0].ОтработаноДней	= ПараметрыОклада["НормаДней"];
			РасчетСреднего[0].ОтработаноЧасов	= ПараметрыОклада["НормаЧасов"];
			РасчетСреднего[0].КалендарныеДни	= ПараметрыОклада["КалендарныеДни"];
			
			РассчитатьСреднюю();
			Записать();
			Возврат Истина;
			
		КонецЕсли;
		
		// 2. Стандартный расчет
		//
		НачатьТранзакцию();
		Прочитать();
		ВыборкаПоСредним = СформироватьЗапросПоРасчетСреднего().Выбрать();
		ЗафиксироватьТранзакцию();
		
		// Создадим рабочие наборы записей
		Отказ = Ложь;
		НаборСредних = РегистрыРасчета.ИНАГРО_РасчетСреднегоЗаработка.СоздатьНаборЗаписей();
		НаборСредних.Отбор.Регистратор.Значение = Ссылка;
		Пока ВыборкаПоСредним.Следующий() Цикл
			
			ПроверитьЗаполнениеСтрокиРасчетСреднего(ВыборкаПоСредним, Отказ);
			Если НЕ Отказ Тогда
				// Заполним записи в наборах записей регистров
				ДобавитьСтрокуРасчетаСреднего(ВыборкаПоСредним, НаборСредних);
			КонецЕсли;
			
		КонецЦикла;
		НаборСредних.Записать();
		
		Если Отказ Тогда
			
			// Если есть какие-то проблемы - удаляем движения (тут нет транзакции) 
			// Удаляем движения
			НаборСредних.Очистить();
			НаборСредних.Записать();
			
			Возврат Не Отказ;
			
		КонецЕсли;
		
		ОсновнойВидРасчета = ПланыВидовРасчета.ИНАГРО_СреднийЗаработок.ПоЗаработкуДляОтпуска;
		
		Выборка = ИНАГРО_ПроведениеРасчетов.РассчитатьСреднююПорядок100(Ссылка).Выбрать();
				
		Пока Выборка.Следующий() Цикл
			
			СтрокаТабличнойЧасти = РасчетСреднего.Получить(Выборка.НомерСтроки - 1);
			
			Если НЕ СтрокаТабличнойЧасти.Авторасчет Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаТабличнойЧасти.Результат				= Окр(Выборка.Результат,2);
				
			СтрокаТабличнойЧасти.РезультатПолный		= Выборка.РезультатПолный;
			
			СтрокаТабличнойЧасти.ОтработаноДней			= Выборка.ОтработаноДней;
			СтрокаТабличнойЧасти.ОтработаноЧасов		= Выборка.ОтработаноЧасов;
			Если ВидУчетаВремениДляСредней = Перечисления.ИНАГРО_ВидыУчетаВремениДляСредней.ПоКалендарнымДнямСПраздниками
				И СтрокаТабличнойЧасти.ВидРасчета = ПланыВидовРасчета.ИНАГРО_СреднийЗаработок.ПоЗаработкуДляОтпуска Тогда
				СтрокаТабличнойЧасти.КалендарныеДни		= 1 + День(Выборка.БазовыйПериодКонец) - День(Выборка.БазовыйПериодНачало);
			Иначе
				СтрокаТабличнойЧасти.КалендарныеДни		= Выборка.КалендарныеДни;
			КонецЕсли;
			СтрокаТабличнойЧасти.НормаДней				= Выборка.НормаДней;
			СтрокаТабличнойЧасти.НормаЧасов				= Выборка.НормаЧасов;
			
		КонецЦикла;
		
	КонецЕсли;
	НаборСредних.Очистить();
	НаборСредних.Записать();
	
	РассчитатьСреднюю();
	Записать();
	
КонецФункции  // РассчитатьРасчетСреднего()

// Рассчитываем величину средней
//
Функция РассчитатьСреднюю() Экспорт
	
	СуммаСредней = 0;
	ОплачиваемоеВремя = 0;
	
	Если ВидУчетаВремениДляСредней = Перечисления.ИНАГРО_ВидыУчетаВремениДляСредней.ПоРабочимДням Тогда
		ОплачиваемоеВремя = РасчетСреднего.Итог("ОтработаноДней");
		
	ИначеЕсли ВидУчетаВремениДляСредней = Перечисления.ИНАГРО_ВидыУчетаВремениДляСредней.ПоРабочимЧасам Тогда
		ОплачиваемоеВремя = РасчетСреднего.Итог("ОтработаноЧасов");
		
	Иначе
		ОплачиваемоеВремя = РасчетСреднего.Итог("КалендарныеДни");
		
	КонецЕсли;
	
	СуммаСредней = ?(ОплачиваемоеВремя = 0 , 0, РасчетСреднего.Итог("Результат") / ОплачиваемоеВремя);
	
КонецФункции  // ЗаполнитьРасчетаСреднего_Заполнение()

// Получение данных
//
Процедура РассчитатьНачисления(Сотрудники) Экспорт
	
	// Массивы для хранения индексов строк табличных частей,
	// используются для расчета по одному сотруднику.
	МассивИндексыСтрокНачисления = Новый Массив();         
	
	Отказ = Ложь;
	// Перечитаем объект и соберем данные для заполнения наборов записей регистров
	НачатьТранзакцию();
	Прочитать();
	ВыборкаПоШапкеДокумента = СформироватьЗапросПоШапке().Выбрать();
	
	// позиционируем выборку
	ВыборкаПоШапкеДокумента.Следующий();
	ВыборкаПоНачислениям = СформироватьЗапросПоНачислениям().Выбрать();
	ЗафиксироватьТранзакцию();
	
	// Создадим рабочие наборы записей
	НаборОсновныеНачисления = РегистрыРасчета.ИНАГРО_Начисления.СоздатьНаборЗаписей();
	НаборОсновныеНачисления.Отбор.Регистратор.Значение = Ссылка;
	
	Пока ВыборкаПоНачислениям.Следующий() Цикл
		
		ПроверитьЗаполнениеСтрокиНачисления(ВыборкаПоШапкеДокумента,ВыборкаПоНачислениям, Отказ);
		Если НЕ Отказ Тогда
			// Заполним записи в наборах записей регистров
			ДобавитьСтрокуОсновныхНачислений(ВыборкаПоНачислениям, НаборОсновныеНачисления);
			МассивИндексыСтрокНачисления.Добавить(ВыборкаПоНачислениям.НомерСтроки-1);
			
		КонецЕсли;
		
	КонецЦикла;
	НаборОсновныеНачисления.Записать();
	
	Если Отказ Тогда
		
		// Если есть какие-то проблемы - удаляем движения (тут нет транзакции) 
		// Удаляем движения.
		НаборОсновныеНачисления.Очистить();
		НаборОсновныеНачисления.Записать();
		
		Возврат;
		
	КонецЕсли;
	
	// Получим дополнительные записи, имеющие признак сторно, которые необходимо добавить 
	// в текущий набор для того, чтобы в результате сохранения получился максимальный 
	// фактический период действия.
	ТаблицаСторноЗаписей = НаборОсновныеНачисления.ПолучитьДополнение();
	ТаблицаСторноЗаписей.Колонки.Удалить("ПериодРегистрации");
	ТаблицаСторноЗаписей.Колонки.ПериодРегистрацииСторно.Имя = "ПериодРегистрации";
	ТаблицаСторноЗаписей.Колонки.Удалить("ПериодДействияНачало");
	ТаблицаСторноЗаписей.Колонки.ПериодДействияНачалоСторно.Имя = "ПериодДействияНачало";
	ТаблицаСторноЗаписей.Колонки.Удалить("ПериодДействияКонец");
	ТаблицаСторноЗаписей.Колонки.ПериодДействияКонецСторно.Имя = "ПериодДействияКонец";
	Для каждого СтрокаСторно Из ТаблицаСторноЗаписей Цикл
		
		// Заполним записи в наборе записей регистра
		Движение = НаборОсновныеНачисления.Добавить();
		ЗаполнитьЗначенияСвойств(Движение, СтрокаСторно);
		Движение.Сторно						= Истина;
		Движение.Авторасчет					= Истина;
		
		// и в табличной части
		Движение = Начисления.Добавить();
		ЗаполнитьЗначенияСвойств(Движение, СтрокаСторно);
		Движение.ДатаНачала		= СтрокаСторно.ПериодДействияНачало;   
		Движение.ДатаОкончания	= СтрокаСторно.ПериодДействияКонец; 
		Движение.Сторно						= Истина;
		Движение.Авторасчет					= Истина;

		МассивИндексыСтрокНачисления.Добавить(Движение.НомерСтроки-1);
		
	КонецЦикла;
	НаборОсновныеНачисления.Записать();
		
	// Рассчитываем записи
	// при этом передаем не только набор записей регистра расчета, но и набор записей регистра 
	// накопления со сведениями об отработанном времени.
	ИНАГРО_ПроведениеРасчетов.РассчитатьЗаписиРегистраРасчета("ИНАГРО_Начисления", 
														НаборОсновныеНачисления, 
														Начисления, 
														МассивИндексыСтрокНачисления, 
														Сотрудники);
	
	// Удаляем движения
	НаборОсновныеНачисления.Очистить();
	НаборОсновныеНачисления.Записать();
	
	Записать();
	
КонецПроцедуры  // РассчитатьНачисления

#КонецОбласти

#КонецЕсли