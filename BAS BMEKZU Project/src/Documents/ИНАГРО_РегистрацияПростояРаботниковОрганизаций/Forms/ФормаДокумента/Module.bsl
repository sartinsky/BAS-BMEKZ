#Область ОбработчикиСобытийФормы 

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды 

	КадровыйУчетФормы.ФормаКадровогоДокументаПриСозданииНаСервере(ЭтаФорма);
	
	Если Параметры.Ключ.Пустая() Тогда
		
		ЗначенияДляЗаполнения = Новый Структура("Месяц, Организация, Ответственный", 
		"Объект.ПериодРегистрации",
		"Объект.Организация",
		"Объект.Ответственный");
		
		ЗарплатаКадры.ЗаполнитьПервоначальныеЗначенияВФорме(ЭтаФорма, ЗначенияДляЗаполнения);
		
		Объект.ВидУчетаВремениДляСредней	= ПредопределенноеЗначение("Перечисление.ИНАГРО_ВидыУчетаВремениДляСредней.ПоКалендарнымДням");
		
		УстановитьФункциональныеОпцииФормы();
		
		ЗарплатаКадрыКлиентСервер.ЗаполнитьМесяцПоДате(ЭтаФорма, "Объект.ПериодРегистрации", "МесяцСтрока");
		//ВидПростояПриИзмененииНаСервере();
		
		УправлениеФормой(ЭтаФорма);
		
	КонецЕсли;
			
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)

	ОбщегоНазначенияБПКлиент.ОбработкаОповещенияФормыДокумента(ЭтаФорма, Объект.Ссылка, ИмяСобытия, Параметр, Источник);

КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	УстановитьФункциональныеОпцииФормы();
	
	ЗарплатаКадрыКлиентСервер.ЗаполнитьМесяцПоДате(ЭтаФорма, "Объект.ПериодРегистрации", "МесяцСтрока");
	
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	ПодготовитьФормуНаСервере(); 
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	УстановитьСостояниеДокумента();	
	УправлениеФормой(ЭтаФорма);
	ОбновитьСтрокиНачислений();

КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура МесяцСтрокаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Оповещение = Новый ОписаниеОповещения("МесяцНачисленияСтрокойНачалоВыбораЗавершение", ЭтотОбъект);
	ИНАГРО_ЗарплатаКадрыРасширенныйКлиент.ВводМесяцаНачалоВыбора(ЭтаФорма, ЭтаФорма, "Объект.ПериодРегистрации", "МесяцСтрока", , Оповещение);
	
КонецПроцедуры
	
&НаКлиенте
Процедура МесяцСтрокаАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	ИНАГРО_ЗарплатаКадрыРасширенныйКлиент.ВводМесяцаАвтоПодборТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура МесяцСтрокаОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	ИНАГРО_ЗарплатаКадрыРасширенныйКлиент.ВводМесяцаОкончаниеВводаТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура МесяцСтрокаРегулирование(Элемент, Направление, СтандартнаяОбработка)
		
	ИНАГРО_ЗарплатаКадрыРасширенныйКлиент.ВводМесяцаРегулирование(ЭтаФорма, "Объект.ПериодРегистрации", "МесяцСтрока", Направление, Модифицированность);
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		ОрганизацияПриИзмененииНаСервере();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()

	УстановитьФункциональныеОпцииФормы();
	
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры


&НаКлиенте
Процедура ПоказатьКолонкуТЧ(Элемент)
	
	УстановитьВидимостьКолонок(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(
		Элемент.ТекстРедактирования,
		ЭтотОбъект,
		"Объект.Комментарий");

КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиСобытийЭлементовТаблицыФормыНачисления

&НаКлиенте
Процедура НачисленияПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		ТекущаяСтрока = Элементы.Начисления.ТекущиеДанные;
		ТекущаяСтрока.Авторасчет	= Истина;
		ТекущаяСтрока.Сотрудник		= Объект.Сотрудник;
		ТекущаяСтрока.Назначение	= Объект.Сотрудник;
		ТекущаяСтрока.Сторно = Ложь;
		ТекущаяСтрока.ВидРасчета 	= Объект.ВидРасчета;
		
		ИндексСтроки = Объект.Начисления.Индекс(ТекущаяСтрока);
		Если ИндексСтроки > 0  Тогда
			ТекущаяСтрока.ДатаНачала = Объект.Начисления[ИндексСтроки-1].ДатаОкончания + 86400;
		КонецЕсли; 
		ТекущаяСтрока.ДатаОкончания				= ТекущаяСтрока.ДатаНачала;
		ТекущаяСтрока.БазовыйПериодНачало		= ТекущаяСтрока.ДатаНачала;
		ТекущаяСтрока.БазовыйПериодКонец		= ТекущаяСтрока.ДатаОкончания;
		ТекущаяСтрока.Показатель1 				= Объект.СуммаСредней;
		ТекущаяСтрока.ВидУчетаВремениДляСредней = Объект.ВидУчетаВремениДляСредней;
		
		Если ЗначениеЗаполнено(Объект.Сотрудник) Тогда
			
			ДанныеСотрудника = Новый Структура ("Сотрудник, ФизическоеЛицо, 
			|ВидРасчета, ПодразделениеОрганизации, Должность, СпособОтраженияВБухучете, 
			|ПринятНаНовоеРабочееМесто, ГрафикРаботы, ЗанимаемыхСтавок");
			
			ЗаполнитьЗначенияСвойств(ДанныеСотрудника, ТекущаяСтрока);
			ДанныеСотрудника.Сотрудник = Объект.Сотрудник;
			ПодучитьДанныеПоСотрудникуНаСервере(ДанныеСотрудника);
			ЗаполнитьЗначенияСвойств(ТекущаяСтрока, ДанныеСотрудника);
			
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура НачисленияПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	Если ОтменаРедактирования Тогда
		Возврат;
	КонецЕсли; 
	
	ТекущаяСтрока = Элементы.Начисления.ТекущиеДанные;
	Если ТекущаяСтрока.Сторно Тогда
		Возврат;
	КонецЕсли; 
		
	ДанныеСтроки = Новый Структура("Сотрудник, ПодразделениеОрганизации, ГрафикРаботы, ДатаНачала") ;
	ЗаполнитьЗначенияСвойств(ДанныеСтроки, ТекущаяСтрока);
	//ДанныеСтроки.ДатаНачалаСобытия = ДатаНачалаСобытия;
	
	// Авторасчет незаполненных реквизитов строки
	ВыполнитьАвторасчетРеквизитовСтрокиНачислений(ДанныеСтроки);
	
	ЗаполнитьЗначенияСвойств(ТекущаяСтрока, ДанныеСтроки);
	
	Если НЕ ЗначениеЗаполнено(ТекущаяСтрока.ВидУчетаВремениДляСредней) Тогда
		ТекущаяСтрока.ВидУчетаВремениДляСредней = Объект.ВидУчетаВремениДляСредней; 
	КонецЕсли;

	
	// Разбивка строк на помесячные
	РазницаВМесяцах = (Год(ТекущаяСтрока.ДатаОкончания)*12 + Месяц(ТекущаяСтрока.ДатаОкончания)) - (Год(ТекущаяСтрока.ДатаНачала)*12 + Месяц(ТекущаяСтрока.ДатаНачала));
	Если РазницаВМесяцах > 0 Тогда
		
		ТекстВопроса =НСтр("ru='Разбить строку начислений на помесячные записи?';uk='Розбити рядок нарахувань на помісячні записи?'");
		Обработчик = Новый ОписаниеОповещения("РазбитьСтрокуНачисленийПослеОтветаНаВопрос", ЭтотОбъект);
		ПоказатьВопрос(Обработчик, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
		Возврат;
		
	КонецЕсли; 

КонецПроцедуры

&НаКлиенте
Процедура НачисленияВидРасчетаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Начисления.ТекущиеДанные;
	
	УстановитьВидимостьПоказателей(ТекущиеДанные);
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура НачисленияРезультатПриИзменении(Элемент)
	
	ТекСтрока = Элементы.Начисления.ТекущиеДанные;
	Если ТекСтрока.Результат <> СтарыйРезультат Тогда
		ТекСтрока.Авторасчет = Ложь;
		СтарыйРезультат = ТекСтрока.Результат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НачисленияНазначениеПриИзменении(Элемент)
	ТекущиеДанные = Элементы.Начисления.ТекущиеДанные;
	Если ЗначениеЗаполнено(ТекущиеДанные.Назначение) Тогда
		ТекущиеДанные.ВидЗанятости = ПолучитьВидЗанятости(ТекущиеДанные.Назначение);
		ТекущиеДанные.Сотрудник = ТекущиеДанные.Назначение;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиСобытийЭлементовТаблицыФормыРасчетСредней

&НаКлиенте
Процедура РасчетСреднегоПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		Элементы.РасчетСреднего.ТекущиеДанные.КоэффициентПовышенияОкладов = 1;
	КонецЕсли; 

КонецПроцедуры

&НаКлиенте
Процедура РасчетСреднегоПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Если Не ЗначениеЗаполнено(Объект.Сотрудник) Тогда
		ТекстСообщения = НСтр("ru='Перед началом заполнения табличной части необходимо выбрать работника';uk='Перед початком заповнення табличної частини необхідно обрати працівника'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасчетСреднегоРезультатПриИзменении(Элемент)
	
	ТекСтрока = Элементы.РасчетСреднего.ТекущиеДанные;
	Если ТекСтрока.Результат <> РасчетСреднегоРезультат Тогда
		ТекСтрока.Авторасчет = Ложь;
		РасчетСреднегоРезультат = ТекСтрока.Результат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасчетСреднегоРезультатПолныйПриИзменении(Элемент)
	ТекСтрока = Элементы.РасчетСреднего.ТекущиеДанные;
	Если ТекСтрока.РезультатПолный <> РасчетСреднегоРезультатПолный Тогда
		ТекСтрока.Авторасчет = Ложь;
		РасчетСреднегоРезультатПолный = ТекСтрока.РезультатПолный;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура РасчетСреднегоПриАктивизацииЯчейки(Элемент)
	ТекущаяСтрока =  Элементы.РасчетСреднего.ТекущиеДанные;
	Если ТекущаяСтрока <> Неопределено Тогда
		РасчетСреднегоРезультат			= ТекущаяСтрока.Результат;
		РасчетСреднегоРезультатПолный	= ТекущаяСтрока.РезультатПолный;
		РасчетСреднегоОтработаноДней	= ТекущаяСтрока.ОтработаноДней;
		РасчетСреднегоОтработаноЧасов	= ТекущаяСтрока.ОтработаноЧасов;
		РасчетСреднегоКалендарныеДни	= ТекущаяСтрока.КалендарныеДни;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура РасчетСреднегоОтработаноДнейПриИзменении(Элемент)
	ТекСтрока = Элементы.РасчетСреднего.ТекущиеДанные;
	Если ТекСтрока.ОтработаноДней <> РасчетСреднегоОтработаноДней Тогда
		ТекСтрока.Авторасчет = Ложь;
		РасчетСреднегоОтработаноДней = ТекСтрока.ОтработаноДней;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура РасчетСреднегоОтработаноЧасовПриИзменении(Элемент)
	ТекСтрока = Элементы.РасчетСреднего.ТекущиеДанные;
	Если ТекСтрока.ОтработаноЧасов <> РасчетСреднегоОтработаноЧасов Тогда
		ТекСтрока.Авторасчет = Ложь;
		РасчетСреднегоОтработаноЧасов = ТекСтрока.ОтработаноЧасов;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура РасчетСреднегоКалендарныеДниПриИзменении(Элемент)
	ТекСтрока = Элементы.РасчетСреднего.ТекущиеДанные;
	Если ТекСтрока.КалендарныеДни <> РасчетСреднегоКалендарныеДни Тогда
		ТекСтрока.Авторасчет = Ложь;
		РасчетСреднегоКалендарныеДни = ТекСтрока.КалендарныеДни;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура РассчитатьСреднюю(Команда)
	
	РассчитатьСреднююНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьСреднююНаСервере()
	
	Документ = РеквизитФормыВЗначение("Объект");
  	Документ.РассчитатьСреднюю();
  	ЗначениеВРеквизитФормы(Документ, "Объект");	
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьРасчетСреднего(Команда)
	
	Если Не ЗначениеЗаполнено(Объект.Сотрудник) Тогда
		ТекстСообщения = НСтр("ru='Перед началом заполнения табличной части необходимо выбрать работника';uk='Перед початком заповнення табличної частини необхідно обрати працівника'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;

	Если Объект.РасчетСреднего.Количество()>0 Тогда
		
		ТекстВопроса =НСтр("ru='Перед заполнением табличная часть ""Расчет среднего"" будет очищена. Продолжить?';uk='Перед заповненням таблична частина ""Розрахунок середнього"" буде очищена. Продовжити?'");
		Обработчик = Новый ОписаниеОповещения("АвтозаполнениеПослеОтветаНаВопрос", ЭтотОбъект);
		ПоказатьВопрос(Обработчик, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
		Возврат;
	КонецЕсли;
	//
	ЗаполнитьРасчетСреднегоНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРасчетСреднегоНаСервере()
	
	Документ = РеквизитФормыВЗначение("Объект");
  	Документ.РассчитатьПараметрыСреднейДокумента();
	Документ.АвтозаполнениеРасчетСреднего();
  	ЗначениеВРеквизитФормы(Документ, "Объект");	
	
	ОбновитьСтрокиНачислений();
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьРасчетСреднего(Команда)
	
	Если Объект.Проведен Тогда 
		ТекстВопроса =НСтр("ru='Автоматически рассчитать документ можно только после отмены его проведения. Выполнить отмену проведения документа?';uk='Автоматично розрахувати документ можна тільки після скасування його проведення. Виконати скасування проведення документа?'");
		Обработчик = Новый ОписаниеОповещения("АвторасчетПослеОтветаНаВопросЗаписать", ЭтотОбъект);
		ПоказатьВопрос(Обработчик, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
		Возврат;
	ИначеЕсли Объект.Ссылка = ПредопределенноеЗначение("Документ.ИНАГРО_РегистрацияПростояРаботниковОрганизаций.ПустаяСсылка") Тогда
		ТекстВопроса =НСтр("ru='Автоматически рассчитать документ можно только после его записи. Записать?';uk='Автоматично розрахувати документ можна тільки після його запису. Записати?'");
		Обработчик = Новый ОписаниеОповещения("АвторасчетПослеОтветаНаВопросЗаписать", ЭтотОбъект);
		ПоказатьВопрос(Обработчик, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
		Возврат;
	КонецЕсли;
	
	РассчитатьРасчетСреднегоНаСервере();
	
	ТекущаяСтрока =  Элементы.РасчетСреднего.ТекущиеДанные;
	Если ТекущаяСтрока <> Неопределено Тогда
		РасчетСреднегоРезультат		= ТекущаяСтрока.Результат;
		РасчетСреднегоРезультатПолный	= ТекущаяСтрока.РезультатПолный;
		РасчетСреднегоОтработаноДней	= ТекущаяСтрока.ОтработаноДней;
		РасчетСреднегоОтработаноЧасов	= ТекущаяСтрока.ОтработаноЧасов;
		РасчетСреднегоКалендарныеДни	= ТекущаяСтрока.КалендарныеДни;
	КонецЕсли;

	
КонецПроцедуры

&НаСервере
Процедура РассчитатьРасчетСреднегоНаСервере()
	
	Документ = РеквизитФормыВЗначение("Объект");
  	Документ.РассчитатьТЧСреднюю();
  	ЗначениеВРеквизитФормы(Документ, "Объект");	
	
	ОбновитьСтрокиНачислений();
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьПремиюЗаГод(Команда)
	РассчитатьПремиюЗаГодНаСервере();
КонецПроцедуры

&НаСервере
Процедура РассчитатьПремиюЗаГодНаСервере()
	
	Если Объект.ДатаНачала < ИНАГРО_ПроведениеРасчетов.ДатаИзмененияПорядка100() Тогда
		Объект.ГодоваяПремия = ИНАГРО_ПроведениеРасчетов.РассчитатьПремияЗаГод(Объект.ГодоваяПремияБазовыйПериодНачало, Объект.Сотрудник);
	КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьНачисления(Команда)
	
	Если Не ЗначениеЗаполнено(Объект.Сотрудник) Тогда
		ТекстСообщения = НСтр("ru='Перед началом заполнения табличной части необходимо выбрать работника';uk='Перед початком заповнення табличної частини необхідно обрати працівника'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	Если Объект.Начисления.Количество()>0 Тогда
		
		ТекстВопроса =НСтр("ru='Перед заполнением табличная часть ""Начисления"" будет очищена. Продолжить?';uk='Перед заповненням таблична частина ""Нарахування"" буде очищена. Продовжити?'");
		Обработчик = Новый ОписаниеОповещения("АвтозаполнениеНачисленийПослеОтветаНаВопрос", ЭтотОбъект);
		ПоказатьВопрос(Обработчик, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
		Возврат;
	КонецЕсли;
	
	ЗаполнитьНачисленияНаСервере();
	ЗаполнитьВидыЗанятостиПоСтрокам();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНачисленияНаСервере()
	
	Если Объект.СпособРегистрацииВремени = Перечисления.ИНАГРО_СпособыРегистрацииВремени.РегистрацияДляЧастиСмены Тогда
		Объект.ДатаОкончания = Объект.ДатаНачала;
	КонецЕсли;
	
	Документ = РеквизитФормыВЗначение("Объект");
	Документ.Записать();
  	Документ.АвтозаполнениеНачисления(Объект.СуммаСредней);
  	ЗначениеВРеквизитФормы(Документ, "Объект");	
	
	ОбновитьСтрокиНачислений();
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьНачисления(Команда)
			
	Если Объект.Проведен Тогда 
		ТекстВопроса =НСтр("ru='Автоматически рассчитать документ можно только после отмены его проведения. Выполнить отмену проведения документа?';uk='Автоматично розрахувати документ можна тільки після скасування його проведення. Виконати скасування проведення документа?'");
		Обработчик = Новый ОписаниеОповещения("АвторасчетНачисленияПослеОтветаНаВопросЗаписать", ЭтотОбъект, "ОтменаПроведения");
		ПоказатьВопрос(Обработчик, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
		Возврат;
	ИначеЕсли Модифицированность Тогда
		ТекстВопроса =НСтр("ru='Автоматически рассчитать документ можно только после его записи. Записать?';uk='Автоматично розрахувати документ можна тільки після його запису. Записати?'");
		Обработчик = Новый ОписаниеОповещения("АвторасчетНачисленияПослеОтветаНаВопросЗаписать", ЭтотОбъект, "Запись");
		ПоказатьВопрос(Обработчик, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
		Возврат;
	КонецЕсли;

	РассчитатьНачисленияНаСервере(Объект.Сотрудник);
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьНачисленияНаСервере(Сотрудник, ПараметрВыполнения = Неопределено)
	
	Документ = РеквизитФормыВЗначение("Объект");
	Если ПараметрВыполнения = "Запись" Тогда
		Документ.Записать(РежимЗаписиДокумента.Запись);
	ИначеЕсли ПараметрВыполнения = "ОтменаПроведения" Тогда
		Документ.Записать(РежимЗаписиДокумента.ОтменаПроведения);
	КонецЕсли;
	
  	Документ.РассчитатьНачисления(Сотрудник);
  	ЗначениеВРеквизитФормы(Документ, "Объект");	
	
	ОбновитьСтрокиНачислений();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьВсе(Команда)
	
	Объект.ПоказатьБазовыйПериод            	= Истина;
	Объект.ПоказатьВидУчетаВремениДляСредней    = Истина;
	Объект.ПоказатьГрафикРаботы			      	= Истина;
	Объект.ПоказатьДополнительныеДанные		 	= Истина;
	Объект.ПоказатьЗамены		 				= Истина;
	Объект.ПоказатьНормуВремени		 			= Истина;
	Объект.ПоказатьОтработанноеВремя		 	= Истина;
	Объект.ПоказатьПериодДействия		 		= Истина;
	
	УстановитьВидимостьКолонок(ЭтаФорма);	
КонецПроцедуры

&НаКлиенте
Процедура СкрытьВсе(Команда)
	
	Объект.ПоказатьБазовыйПериод            	= Ложь;
	Объект.ПоказатьВидУчетаВремениДляСредней    = Ложь;
	Объект.ПоказатьГрафикРаботы			      	= Ложь;
	Объект.ПоказатьДополнительныеДанные		 	= Ложь;
	Объект.ПоказатьЗамены		 				= Ложь;
	Объект.ПоказатьНормуВремени		 			= Ложь;
	Объект.ПоказатьОтработанноеВремя		 	= Ложь;
	Объект.ПоказатьПериодДействия		 		= Ложь;
	
	УстановитьВидимостьКолонок(ЭтаФорма);	
КонецПроцедуры

#КонецОбласти 

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ПодготовитьФормуНаСервере()
		
	УстановитьСостояниеДокумента();
	УправлениеФормой(ЭтаФорма);
	ОбновитьСтрокиНачислений();
			
КонецПроцедуры

&НаСервере
Процедура УстановитьФункциональныеОпцииФормы()
	
	ПараметрыФО = Новый Структура("Организация, Период", Объект.Организация, Объект.Дата);
	УстановитьПараметрыФункциональныхОпцийФормы(ПараметрыФО);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Объект   = Форма.Объект;
	Элементы = Форма.Элементы;   
	
	Если Объект.ВидПростоя = ПредопределенноеЗначение("Перечисление.ИНАГРО_ВидыПростояРаботника.НеПоВинеРаботника") Тогда
		Элементы.ГруппаРасчетСреднего.Видимость = Ложь;
		Элементы.ПроцентОплаты.Видимость = Истина; 
	ИначеЕсли Объект.ВидПростоя = ПредопределенноеЗначение("Перечисление.ИНАГРО_ВидыПростояРаботника.ПоНезависящимПричинам") Тогда
		Элементы.ГруппаРасчетСреднего.Видимость = Истина;
		Элементы.ПроцентОплаты.Видимость = Ложь;
	Иначе 
		Элементы.ГруппаРасчетСреднего.Видимость = Ложь;
		Элементы.ПроцентОплаты.Видимость = Ложь;
	КонецЕсли;
	
	Если Объект.СпособРегистрацииВремени = ПредопределенноеЗначение("Перечисление.ИНАГРО_СпособыРегистрацииВремени.РегистрацияДляЧастиСмены") Тогда
		Элементы.ГруппаПериод.ТекущаяСтраница = Элементы.ГруппаНаДату;
	Иначе
		Элементы.ГруппаПериод.ТекущаяСтраница = Элементы.ГруппаЗаПериод;
	КонецЕсли;
	
	УстановитьВидимостьКолонок(Форма);
	
КонецПроцедуры 

&НаСервере
Процедура УстановитьСостояниеДокумента()
	
	СостояниеДокумента = ОбщегоНазначенияБП.СостояниеДокумента(Объект);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСтрокиНачислений();
	
	СведенияОВидахРасчета = Новый Соответствие;
	Для Каждого ТекСтрока Из Объект.Начисления Цикл
		УстановитьВидимостьПоказателейНаСервере(ТекСтрока);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииМесяцаНачисления()
	
	ИНАГРО_ЗарплатаКадрыРасширенныйКлиент.ВводМесяцаПриИзменении(ЭтаФорма, "Объект.ПериодРегистрации", "МесяцСтрока", Модифицированность);
	ОбработатьИзменениеМесяцНачисленияНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьИзменениеМесяцНачисленияНаСервере()

	УстановитьФункциональныеОпцииФормы();
		
	Если ЕстьЗаполненныеТабличныеЧасти() Тогда
		ОчиститьТабличныеЧасти();
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Функция ЕстьЗаполненныеТабличныеЧасти()
	
	ДанныеВТЧЕсть = Ложь;
	
	СписокТабличныхЧастей = СписокТабличныхЧастейДокумента();
	
	Для каждого ИмяТабличнойЧасти Из СписокТабличныхЧастей Цикл
		Если Объект[ИмяТабличнойЧасти].Количество() > 0 Тогда
			ДанныеВТЧЕсть = Истина;
			Прервать;
		КонецЕсли; 
	КонецЦикла;
	
	Возврат ДанныеВТЧЕсть;
	
КонецФункции

&НаСервере
Функция СписокТабличныхЧастейДокумента()
	
	СписокТабличныхЧастей = Новый Массив;
	
	СписокТабличныхЧастей.Добавить("Начисления");
	СписокТабличныхЧастей.Добавить("РасчетСреднего");
	
	Возврат СписокТабличныхЧастей;
	
КонецФункции

&НаСервере
Процедура УстановитьВидимостьПоказателейНаСервере(ТекСтрока)
	
	СведенияОВидеРасчета = ПолучитьСведенияОВидеРасчета(ТекСтрока.ВидРасчета);
	
	Для СчПоказателей = 1 По 3 Цикл
		Если СчПоказателей <= СведенияОВидеРасчета["КоличествоПоказателей"] Тогда
			Если СведенияОВидеРасчета["Показатель" + СчПоказателей + "Видимость"] Тогда
				ТекСтрока["ИмяПоказатель" + СчПоказателей] = СведенияОВидеРасчета["Показатель" + СчПоказателей + "Наименование"];
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьВидимостьКолонок(Форма)
	Объект   = Форма.Объект;
	Элементы = Форма.Элементы;
	
	Элементы.Начисления.ПодчиненныеЭлементы.НачисленияГруппаПериод.Видимость  		= Объект.ПоказатьПериодДействия;
	Элементы.Начисления.ПодчиненныеЭлементы.НачисленияГруппаБазовыйПериод.Видимость = Объект.ПоказатьБазовыйПериод;
	Элементы.Начисления.ПодчиненныеЭлементы.НачисленияГруппаОтработано.Видимость  	= Объект.ПоказатьОтработанноеВремя;
	Элементы.Начисления.ПодчиненныеЭлементы.НачисленияГруппаНорма.Видимость 		= Объект.ПоказатьНормуВремени;
	Элементы.Начисления.ПодчиненныеЭлементы.НачисленияГруппаНормаЗаМесяц.Видимость 	= Объект.ПоказатьНормуВремени;
	Элементы.Начисления.ПодчиненныеЭлементы.НачисленияГруппаЗамены.Видимость 		= Объект.ПоказатьЗамены;
	Элементы.Начисления.ПодчиненныеЭлементы.НачисленияОплачиватьЧасов.Видимость 	= Объект.СпособРегистрацииВремени = ПредопределенноеЗначение("Перечисление.ИНАГРО_СпособыРегистрацииВремени.РегистрацияДляЧастиСмены");
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСведенияОВидеРасчета(ВидРасчета)
	
	Возврат ИНАГРО_ЗарплатаКадрыРасширенныйПовтИсп.ПолучитьСведенияОВидеРасчетаСхемыМотивации(ВидРасчета);
	
КонецФункции

&НаСервере
Процедура ОчиститьТабличныеЧасти()
	
	Объект.Начисления.Очистить();
	Объект.РасчетСреднего.Очистить();
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьПараметрыСредней()
	
	Документ = РеквизитФормыВЗначение("Объект");
  	Документ.РассчитатьПараметрыСреднейДокумента();
  	ЗначениеВРеквизитФормы(Документ, "Объект");	
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьОтменуПроведенияДокументаНаСервере()
	
	Документ = РеквизитФормыВЗначение("Объект");
  	Документ.ВыполнитьОтменуПроведенияДокумента();
  	ЗначениеВРеквизитФормы(Документ, "Объект");	
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ВыполнитьАвторасчетРеквизитовСтрокиНачислений(ТекущаяСтрока)

	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Сотрудник",ТекущаяСтрока.Сотрудник);
	Запрос.УстановитьПараметр("ДатаАктуальности", ТекущаяСтрока.ДатаНачала);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	РаботникиОрганизации.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	               |	РаботникиОрганизации.ГрафикРаботы КАК ГрафикРаботы
	               |ИЗ
	               |	РегистрСведений.ИНАГРО_РаботникиОрганизаций.СрезПоследних(&ДатаАктуальности, Сотрудник = &Сотрудник) КАК РаботникиОрганизации";
	
	// подразделение, график и вид учета времени
	ПрежниеДанные = Запрос.Выполнить().Выбрать();
	Если ПрежниеДанные.Следующий() Тогда
		Если НЕ ЗначениеЗаполнено(ТекущаяСтрока.ПодразделениеОрганизации) Тогда
			ТекущаяСтрока.ПодразделениеОрганизации = ПрежниеДанные.ПодразделениеОрганизации; 
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ТекущаяСтрока.ГрафикРаботы) Тогда
			ТекущаяСтрока.ГрафикРаботы = ПрежниеДанные.ГрафикРаботы; 
		КонецЕсли;
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура ПодучитьДанныеПоСотрудникуНаСервере(ДанныеСотрудника)
	
	ИНАГРО_ПроведениеРасчетов.ПолучитьДанныеСотрудника(Объект.Дата, ДанныеСотрудника);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьПоказателей(ТекСтрока)
	
	СведенияОВидеРасчета = ПолучитьСведенияОВидеРасчета(ТекСтрока.ВидРасчета);
	Для СчПоказателей = 1 По 3 Цикл
		Если СчПоказателей <= СведенияОВидеРасчета["КоличествоПоказателей"] Тогда
			Если СведенияОВидеРасчета["Показатель" + СчПоказателей + "Видимость"] Тогда
				ТекСтрока["ИмяПоказатель" + СчПоказателей] = СведенияОВидеРасчета["Показатель" + СчПоказателей + "Наименование"];
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
		
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьВидЗанятости(Назначение)
	
	Возврат Назначение.ИНАГРО_ВидЗанятости;
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьВидыЗанятостиПоСтрокам()
	
	Для Каждого ТекСтрока Из Объект.Начисления Цикл
		ТекСтрока.ВидЗанятости = ПолучитьВидЗанятости(ТекСтрока.Назначение);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыИФункцииОбработкаВопросов

&НаКлиенте
Процедура ПерезаполнитьПараметрыСреднейЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт 
   	
    Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
        Возврат;
	КонецЕсли;
	
	РассчитатьПараметрыСредней();
		     
КонецПроцедуры

&НаКлиенте
Процедура АвтозаполнениеПослеОтветаНаВопрос(Ответ, ПараметрыВыполнения) Экспорт
	Если Ответ <> КодВозвратаДиалога.ОК Тогда
		Возврат;
	КонецЕсли;
	
	Объект.РасчетСреднего.Очистить();
		//
	ЗаполнитьРасчетСреднегоНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура АвтозаполнениеНачисленийПослеОтветаНаВопрос(Ответ, ПараметрыВыполнения) Экспорт
	Если Ответ <> КодВозвратаДиалога.ОК Тогда
		Возврат;
	КонецЕсли;
	
	Объект.Начисления.Очистить();
		
	ЗаполнитьНачисленияНаСервере();
	ЗаполнитьВидыЗанятостиПоСтрокам();
	
КонецПроцедуры

&НаКлиенте
Процедура РазбитьСтрокуНачисленийПослеОтветаНаВопрос(Ответ, ПараметрыВыполнения) Экспорт
	Если Ответ <> КодВозвратаДиалога.ОК Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.Начисления.ТекущиеДанные;
		
	ИНАГРО_ПроведениеРасчетовКлиент.РазбитьСтрокуНачисленийНаПомесячныеЗаписи(ТекущиеДанные, Объект.Начисления);
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьВсеПослеОтветаНаВопросЗаписать(Ответ, ПараметрыВыполнения) Экспорт 
	Если Ответ <> КодВозвратаДиалога.ОК Тогда
		Возврат;
	КонецЕсли;
	
	ВыполнитьОтменуПроведенияДокументаНаСервере();
	РассчитатьРасчетСреднегоНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура АвторасчетНачисленияПослеОтветаНаВопросЗаписать(Ответ, ПараметрыВыполнения) Экспорт
	Если Ответ <> КодВозвратаДиалога.ОК Тогда
		Возврат;
	КонецЕсли;
	
	РассчитатьНачисленияНаСервере(Объект.Сотрудник, ПараметрыВыполнения);
	
КонецПроцедуры

&НаКлиенте
Процедура АвторасчетПослеОтветаНаВопросЗаписать(Ответ, ПараметрыВыполнения) Экспорт 
	Если Ответ <> КодВозвратаДиалога.ОК Тогда
		Возврат;
	КонецЕсли;
	
	Записать();
	
	ВыполнитьОтменуПроведенияДокументаНаСервере();
	РассчитатьРасчетСреднегоНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура МесяцНачисленияСтрокойНачалоВыбораЗавершение(ЗначениеВыбрано, ДополнительныеПараметры) Экспорт
	
	ПриИзмененииМесяцаНачисления();
	
КонецПроцедуры

&НаКлиенте
Процедура СообщитьОНесоответствииДат(РезультатВопроса, ДополнительныеПараметры) Экспорт 
   	
    Если РезультатВопроса <> КодВозвратаДиалога.Ок Тогда
        Возврат;
	КонецЕсли;
		     
КонецПроцедуры

#КонецОбласти 


#Область СлужебныеПроцедурыИФункцииБСП

// СтандартныеПодсистемы.Печать
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры

&НаКлиенте
Процедура СпособРегистрацииВремениПриИзменении(Элемент)
	
	СпособРегистрацииВремениПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура СпособРегистрацииВремениПриИзмененииНаСервере()
	
	Документ = РеквизитФормыВЗначение("Объект");
	Документ.Записать();
  	Документ.ПолучитьРеквизитыНачисленияНаСервере();
  	ЗначениеВРеквизитФормы(Документ, "Объект");	
	
	ПодготовитьФормуНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ВидПростояПриИзмененииНаСервере()
	Документ = РеквизитФормыВЗначение("Объект");
	Документ.Записать();
  	Документ.ПолучитьРеквизитыНачисленияНаСервере();
  	ЗначениеВРеквизитФормы(Документ, "Объект");	
	
	УправлениеФормой(ЭтаФорма);
	ПодготовитьФормуНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ВидПростояПриИзменении(Элемент)
	ВидПростояПриИзмененииНаСервере();
КонецПроцедуры

// Конец СтандартныеПодсистемы.Печать

#КонецОбласти