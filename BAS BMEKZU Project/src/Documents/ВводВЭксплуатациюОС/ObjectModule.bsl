#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

Перем АмортизацияБА Экспорт; // ИНАГРО

//////////////////////////////////////////////////////////////////////////////////
//// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

// Устанавливает СчетНачисленияАмортизацииБУ 
// по значению СчетУчетаБУ 
// или по значению СчетУчетаБУВнеоборотногоАктива
//
Процедура УстановитьСчетАмортизации() Экспорт
	
	ПланХозрасчетный = ПланыСчетов.Хозрасчетный;
	
	Счет10   = ПланХозрасчетный.ОсновныеСредства;
	Счет11   = ПланХозрасчетный.ДругиеНеоборотныеМатериальныеАктивыГруппа;
	Счет13   = ПланХозрасчетный.ИзносАмортизацияНеоборотныхАктивов;
	Счет131  = ПланХозрасчетный.ИзносОсновныхСредств;
	Счет132  = ПланХозрасчетный.ИзносДругихНеоборотныхМатериальныхАктивов;
	Счет1321 = ПланХозрасчетный.ИзносДругихНеоборотныхМатериальныхАктивовИндивидуально;
	Счет1322 = ПланХозрасчетный.ИзносДругихНеоборотныхМатериальныхАктивовКоличественно;
	Счет151  = ПланХозрасчетный.КапитальноеСтроительство;
	Счет152  = ПланХозрасчетный.ПриобретениеИзготовлениеОсновныхСредств;
	Счет153  = ПланХозрасчетный.ПриобретениеИзготовлениеДругихНеоборотныхМатериальныхАктивов;
	
	Если ЗначениеЗаполнено(СчетУчетаБУ) Тогда
		
		Если СчетУчетаБУ.ПринадлежитЭлементу(Счет10) Тогда
			
			Если НЕ ЗначениеЗаполнено(СчетНачисленияАмортизацииБУ)
				ИЛИ (НЕ СчетНачисленияАмортизацииБУ.ПринадлежитЭлементу(Счет13))
				ИЛИ СчетНачисленияАмортизацииБУ.ПринадлежитЭлементу(Счет132) Тогда
				
				СчетНачисленияАмортизацииБУ = Счет131;
				
			КонецЕсли;
			
		ИначеЕсли СчетУчетаБУ.ПринадлежитЭлементу(Счет11) Тогда
			
			Если НЕ ЗначениеЗаполнено(СчетНачисленияАмортизацииБУ)
				ИЛИ (НЕ СчетНачисленияАмортизацииБУ.ПринадлежитЭлементу(Счет132))
				ИЛИ СчетНачисленияАмортизацииБУ = (Счет1322) Тогда
				
				СчетНачисленияАмортизацииБУ = Счет1321;
				
			КонецЕсли;                                                   
			
		КонецЕсли;
		
	ИначеЕсли ЗначениеЗаполнено(СчетУчетаБУВнеоборотногоАктива) Тогда
		
		Если СчетУчетаБУВнеоборотногоАктива.ПринадлежитЭлементу(Счет152)
			ИЛИ СчетУчетаБУВнеоборотногоАктива = Счет151 Тогда
			
			Если НЕ ЗначениеЗаполнено(СчетНачисленияАмортизацииБУ)
				ИЛИ (НЕ СчетНачисленияАмортизацииБУ.ПринадлежитЭлементу(Счет13))
				ИЛИ СчетНачисленияАмортизацииБУ.ПринадлежитЭлементу(Счет132) Тогда
				
				СчетНачисленияАмортизацииБУ = Счет131;
				
			КонецЕсли;
			
		ИначеЕсли СчетУчетаБУВнеоборотногоАктива.ПринадлежитЭлементу(Счет153) Тогда
			
			Если НЕ ЗначениеЗаполнено(СчетНачисленияАмортизацииБУ)
				ИЛИ (НЕ СчетНачисленияАмортизацииБУ.ПринадлежитЭлементу(Счет132))
				ИЛИ СчетНачисленияАмортизацииБУ = (Счет1322) Тогда
				
				СчетНачисленияАмортизацииБУ = Счет1321;
				
			КонецЕсли;                                                   
			
		КонецЕсли;
		
	КонецЕсли;
		

КонецПроцедуры // УстановитьСчетАмортизации()

//////////////////////////////////////////////////////////////////////////////////
//// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Процедура определяет параметры учетной политики
//
Процедура ПодготовитьПараметрыУчетнойПолитики(СтруктураШапкиДокумента, Отказ, Заголовок)
	
	СтруктураШапкиДокумента.Вставить("ЕстьНалогНаПрибыль"             , УчетнаяПолитика.ПлательщикНалогаНаПрибыль(СтруктураШапкиДокумента.Организация, КонецМесяца(СтруктураШапкиДокумента.Дата)));
	СтруктураШапкиДокумента.Вставить("ЕстьНалогНаПрибыльДо2015"       , УчетнаяПолитика.ПлательщикНалогаНаПрибыльДо2015(СтруктураШапкиДокумента.Организация, КонецМесяца(СтруктураШапкиДокумента.Дата)));
	СтруктураШапкиДокумента.Вставить("ЕстьНДС"                        , УчетнаяПолитика.ПлательщикНДС(СтруктураШапкиДокумента.Организация, КонецМесяца(СтруктураШапкиДокумента.Дата)));
	
КонецПроцедуры // ПодготовитьПараметрыУчетнойПолитики()


// Процедура формирования движений регистров
//
Процедура ФормированиеДвижений(СтруктураШапкиДокумента, ТаблицаПоОС, Отказ, Заголовок)

	Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПринятияКУчетуОсновныхСредств.Оборудование Тогда
		
		ФормированиеДвиженийПоРегиструСписанныеТовары(СтруктураШапкиДокумента, ТаблицаПоОС, Отказ);
		
	КонецЕсли;

	ФормированиеДвиженийРегл(СтруктураШапкиДокумента, ТаблицаПоОС, Отказ, Заголовок);
	
КонецПроцедуры // ФормированиеДвижений()

Процедура ФормированиеДвиженийПоРегиструСписанныеТовары(СтруктураШапкиДокумента, ТаблицаПоОС, Отказ)
	
	НомСтр   = 0;
	ДатаДока = Дата;

    Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Док.НомерСтроки                                         КАК НомерСтроки,
	|	&ПустойДоговор                                          КАК ДоговорКонтрагента,
	|	Док.Ссылка.Склад                                        КАК Склад,
	|	Док.Ссылка.Номенклатура                                 КАК Номенклатура,
	|	Док.Ссылка.Организация                                  КАК Организация,
	|	Док.Ссылка.Номенклатура.Услуга                          КАК Услуга,
	|	Док.ОсновноеСредство                                    КАК ОсновноеСредство,
	|	Док.ИнвентарныйНомер                                    КАК ИнвентарныйНомер,
	|	1                                                       КАК Количество,
	|	Док.Ссылка.СчетУчетаБУВнеоборотногоАктива               КАК СчетУчетаБУ,
	|	Док.Ссылка.СчетУчетаБУ                                  КАК КорСчетСписанияБУ,
	|	Док.ОсновноеСредство                                    КАК КорСубконтоСписанияБУ1,
	|	&НомерЖурнала                                           КАК НомерЖурналаБУ,
	|	НЕОПРЕДЕЛЕНО                                            КАК ДокументОприходования,
	|	Док.Ссылка.НалоговоеНазначениеОборудования              КАК НалоговоеНазначение,
	|	Док.Ссылка.НалоговоеНазначение                          КАК НалоговоеНазначениеНовое
	|ИЗ
	|	Документ.ВводВЭксплуатациюОС.ОС КАК Док
	|ГДЕ
	|	Док.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка"       , СтруктураШапкиДокумента.Ссылка );
	Запрос.УстановитьПараметр("ПустойДоговор", Справочники.ДоговорыКонтрагентов.ПустаяСсылка());
	Запрос.УстановитьПараметр("НомерЖурнала" , НСтр("ru='ОС';uk='ОЗ'",Локализация.КодЯзыкаИнформационнойБазы()));
	
	Результат = Запрос.Выполнить();
	ТаблицаПоОС = Результат.Выгрузить();
	ТаблицаПоОС.Колонки.Добавить("Регистратор");
	ТаблицаПоОС.ЗаполнитьЗначения(ЭтотОбъект, "Регистратор");
	ТаблицаПоОС.Колонки.Добавить("СчетДоходовБУ");

	ЕстьНалогНаПрибыль = СтруктураШапкиДокумента.ЕстьНалогНаПрибыль;
	
	УправлениеЗапасамиПартионныйУчет.ДвижениеПартийТоваров(ТаблицаПоОС, Отказ, , НСтр("ru='Ввод в эксплуатацию объекта ОС';uk=""Введення в експлуатацію об'єкта ОЗ""",Локализация.КодЯзыкаИнформационнойБазы()));

КонецПроцедуры

// Процедура формирования движений регл. регистров
//
Процедура ФормированиеДвиженийРегл(СтруктураШапкиДокумента, ТаблицаПоОС, Отказ, Заголовок)

	ДатаДока       = Дата;
	ТекОрганизация = СтруктураШапкиДокумента.Организация;

	ДатаНКУ2015 = '2015 01 01';
	ЭтоДокументДо2015 = (Дата < ДатаНКУ2015);
	
	ТЗДанныеОС = Новый ТаблицаЗначений;
	ТЗДанныеОС.Колонки.Добавить("ОбъектУчета");
	ТЗДанныеОС.Колонки.Добавить("Сумма", 	ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповЧисла(15,2));
	ТЗДанныеОС.Колонки.Добавить("СуммаНУ", 	ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповЧисла(15,2));

	ПроводкиБУ = Движения.Хозрасчетный;

	Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПринятияКУчетуОсновныхСредств.Оборудование Тогда
		
		Для Каждого СтрокаТаблицы Из ТаблицаПоОС Цикл
			
			НоваяСтрока = ТЗДанныеОС.Добавить();
			
			НоваяСтрока.ОбъектУчета = СтрокаТаблицы.ОсновноеСредство;
			НоваяСтрока.Сумма       = СтрокаТаблицы.СписанныеПартииБУ.Итог("СуммаСписания");
			Если ЭтоДокументДо2015 Тогда
				НоваяСтрока.СуммаНУ = СтрокаТаблицы.СписанныеПартииБУ.Итог("СуммаСписанияНУ");
			Иначе
				Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыль И СтруктураШапкиДокумента.НалоговоеНазначение <> Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяНеХозДеятельность Тогда
					НоваяСтрока.СуммаНУ = НоваяСтрока.Сумма;
				Иначе
					НоваяСтрока.СуммаНУ = 0;
				КонецЕсли;
			КонецЕсли; 
			
		КонецЦикла;

	Иначе //ОбъектыСтроительства или ПоРезультатамИнвентаризации

		ПогрешностьСтоимостиОС = 0;
		ПогрешностьСтоимостиОСНУ = 0;
		Коэф                     = ?( ТаблицаПоОС.Количество()>0,(1 / ТаблицаПоОС.Количество()),0); // ИНАГРО
		
		//Заполним таблицу значений для проведения по регистрам, не зависящим от вида операции
		Для Каждого Строка Из ТаблицаПоОС Цикл
			
			ТекОС 			= Строка.ОсновноеСредство;
			ТекСтоимостьБУ	= ОбщегоНазначенияРед12.ОкруглитьСУчетомПогрешности(СтруктураШапкиДокумента.СтоимостьБУ * Коэф, 2, ПогрешностьСтоимостиОС);
			ТекСтоимостьНУ	= ОбщегоНазначенияРед12.ОкруглитьСУчетомПогрешности(СтруктураШапкиДокумента.СтоимостьНУ * Коэф, 2, ПогрешностьСтоимостиОСНУ);
			
			НоваяСтрока = ТЗДанныеОС.Добавить();
			НоваяСтрока.ОбъектУчета = ТекОС;
			НоваяСтрока.Сумма       = ТекСтоимостьБУ;
			Если ЭтоДокументДо2015 Тогда
				НоваяСтрока.СуммаНУ     = ТекСтоимостьНУ;
			Иначе	
				Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыль И СтруктураШапкиДокумента.НалоговоеНазначение <> Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяНеХозДеятельность Тогда
					НоваяСтрока.СуммаНУ = ТекСтоимостьБУ;
				Иначе
					НоваяСтрока.СуммаНУ = 0;
				КонецЕсли;
			КонецЕсли;	
			
		КонецЦикла;

	КонецЕсли;

	ГрафикиАмортизации       = Движения.ГрафикиАмортизацииОСБухгалтерскийУчет;
	МестонахождениеОС        = Движения.МестонахождениеОСБухгалтерскийУчет;
	НаправлениеАмортизации   = Движения.СпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчет;
	НачислениеАмортизации    = Движения.НачислениеАмортизацииОСБухгалтерскийУчет;
	ПервоначальныеСведения   = Движения.ПервоначальныеСведенияОСБухгалтерскийУчет;
	ПервоначальныеСведенияНУ = Движения.ПервоначальныеСведенияОСНалоговыйУчет;
	ПараметрыАмортизации     = Движения.ПараметрыАмортизацииОСБухгалтерскийУчет;
	СостояниеОС              = Движения.СостоянияОСОрганизаций;
	ОперацииОС               = Движения.СобытияОСОрганизаций;
	СчетаУчетаОС             = Движения.СчетаБухгалтерскогоУчетаОС;
	
	НачислениеАмортизацииНУ  = Движения.НачислениеАмортизацииОСНалоговыйУчет;
	ПараметрыАмортизацииНУ   = Движения.ПараметрыАмортизацииОСНалоговыйУчет;

	НалоговыеНазначенияОС  	 = Движения.НалоговыеНазначенияОС;
	
	
	ВидНалоговойДеятельностиНеОблагаемая = Справочники.ВидыНалоговойДеятельности.НеОблагаемая; 
	НеОблНДСДеятельность = Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяХозДеятельность;
	
	Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПринятияКУчетуОсновныхСредств.ИНАГРО_БиологическиеАктивы Тогда
		МодульИНАГРО_БиологическиеАктивы = ОбщегоНазначения.ОбщийМодуль("ИНАГРО_БиологическиеАктивы");	
		СпособОценкиБА   = МодульИНАГРО_БиологическиеАктивы.СпособОценкиБА(СтруктураШапкиДокумента.Организация, НачалоМесяца(Дата));
		ПартионныйУчетБУ = (СпособОценкиБА = Перечисления.СпособыОценки.ФИФО ИЛИ СпособОценкиБА = Перечисления.СпособыОценки.ЛИФО);
	КонецЕсли;
				
	Если  СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПринятияКУчетуОсновныхСредств.ИНАГРО_БиологическиеАктивы И ПартионныйУчетБУ Тогда // ИНАГРО
		
		ТаблицаЖивотных = Новый ТаблицаЗначений();
		
		ТаблицаЖивотных.Колонки.Добавить("Номенклатура");
		ТаблицаЖивотных.Колонки.Добавить("Голов");
		ТаблицаЖивотных.Колонки.Добавить("Количество");           
		ТаблицаЖивотных.Колонки.Добавить("Сумма");
		ТаблицаЖивотных.Колонки.Добавить("СчетУчетаБУ");
		ТаблицаЖивотных.Колонки.Добавить("Склад");
		ТаблицаЖивотных.Колонки.Добавить("КорСчетСписанияБУ");
		ТаблицаЖивотных.Колонки.Добавить("КорСубконтоСписанияБУ1");
		ТаблицаЖивотных.Колонки.Добавить("КорСубконтоСписанияБУ2");
		ТаблицаЖивотных.Колонки.Добавить("КорСубконтоСписанияБУ3");
		ТаблицаЖивотных.Колонки.Добавить("НалоговоеНазначение");
		ТаблицаЖивотных.Колонки.Добавить("НалоговоеНазначениеНовое");
		ТаблицаЖивотных.Колонки.Добавить("Регистратор");
		ТаблицаЖивотных.Колонки.Добавить("Организация");
		ТаблицаЖивотных.Колонки.Добавить("ДоговорКонтрагента");
		ТаблицаЖивотных.Колонки.Добавить("ДокументОприходования");	
		
		Для Каждого СтрокаТаблицаПоОС Из ТаблицаПоОС Цикл
		    Строка = ТаблицаЖивотных.Добавить();
			Строка.КорСубконтоСписанияБУ1 = СтрокаТаблицаПоОС.ОсновноеСредство;
		КонецЦикла;	
		ТаблицаЖивотных.ЗаполнитьЗначения(ЭтотОбъект.ИНАГРО_БиологическийАктив, 					"Номенклатура");
		ТаблицаЖивотных.ЗаполнитьЗначения(1,                         								"Голов"      );
		ТаблицаЖивотных.ЗаполнитьЗначения(ЭтотОбъект.ИНАГРО_Количество / ТЗДанныеОС.Количество(),	"Количество");           
		ТаблицаЖивотных.ЗаполнитьЗначения(ЭтотОбъект.СтоимостьБУ / ТЗДанныеОС.Количество(),		 	"Сумма");
		ТаблицаЖивотных.ЗаполнитьЗначения(ЭтотОбъект.СчетУчетаБУВнеоборотногоАктива,		  		"СчетУчетаБУ");
		ТаблицаЖивотных.ЗаполнитьЗначения(ЭтотОбъект.Склад,					 						"Склад");
		ТаблицаЖивотных.ЗаполнитьЗначения(ЭтотОбъект.СчетУчетаБУ,		 							"КорСчетСписанияБУ");
		Если СтруктураШапкиДокумента.ЕстьНДС Тогда
			ТаблицаЖивотных.ЗаполнитьЗначения(ЭтотОбъект.НалоговоеНазначение,       				"НалоговоеНазначение");
		Иначе	
			ТаблицаЖивотных.ЗаполнитьЗначения(НеОблНДСДеятельность,       							"НалоговоеНазначение");
		КонецЕсли;	
		ТаблицаЖивотных.ЗаполнитьЗначения(ЭтотОбъект.НалоговоеНазначение , 							"НалоговоеНазначениеНовое");
		ТаблицаЖивотных.ЗаполнитьЗначения(ЭтотОбъект,                                      			"Регистратор");
		ТаблицаЖивотных.ЗаполнитьЗначения(СтруктураШапкиДокумента.Организация,             			"Организация");	
		ТаблицаЖивотных.ЗаполнитьЗначения(Справочники.ДоговорыКонтрагентов.ПустаяСсылка(), 			"ДоговорКонтрагента");
		
		СодержаниеПроводки = НСтр("ru='Введен в эксплуатацию объект ОС';uk=""Введений в експлуатацію об'єкт ОЗ""",Локализация.КодЯзыкаИнформационнойБазы());
		
		МодульИНАГРО_БиологическиеАктивы = ОбщегоНазначения.ОбщийМодуль("ИНАГРО_БиологическиеАктивы");
		МодульИНАГРО_БиологическиеАктивы.ИНАГРО_ДвижениеПартийТоваров(ТаблицаЖивотных, Истина, Ложь, Отказ, , СодержаниеПроводки,Истина,СтруктураШапкиДокумента);
		
	КонецЕсли;
	
	Для Каждого Строка Из ТЗДанныеОС Цикл

		ТекОС = Строка.ОбъектУчета;

		Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПринятияКУчетуОсновныхСредств.ОбъектыСтроительства  ИЛИ
			 СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПринятияКУчетуОсновныхСредств.ИНАГРО_БиологическиеАктивы И НЕ ПартионныйУчетБУ Тогда // ИНАГРО

			Если Строка.Сумма > 0 Тогда

				Проводка = ПроводкиБУ.Добавить();
				
				Проводка.Период       = ДатаДока;
				Проводка.Организация  = СтруктураШапкиДокумента.Организация;
				Проводка.НомерЖурнала = НСтр("ru='ОС';uk='ОЗ'",Локализация.КодЯзыкаИнформационнойБазы());
				Проводка.Содержание   = НСтр("ru='Введен в эксплуатацию объект ОС';uk=""Введений в експлуатацію об'єкт ОЗ""",Локализация.КодЯзыкаИнформационнойБазы());
				Проводка.Сумма        = Строка.Сумма;

				Проводка.СчетДт       = СтруктураШапкиДокумента.СчетУчетаБУ;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ОсновныеСредства", ТекОС);

				Проводка.НалоговоеНазначениеДт  = СтруктураШапкиДокумента.НалоговоеНазначение;
				
				Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыль Тогда
					
					Если СтруктураШапкиДокумента.НалоговоеНазначение <> Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяНеХозДеятельность Тогда 
				    	Проводка.СуммаНУДт = Строка.СуммаНУ;
					КонецЕсли;	
					
				КонецЕсли;
				
				Проводка.СчетКт       = СтруктураШапкиДокумента.СчетУчетаБУВнеоборотногоАктива;
				
				// ИНАГРО++
				Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПринятияКУчетуОсновныхСредств.ИНАГРО_БиологическиеАктивы Тогда
					
					Проводка.КоличествоКт = ЭтотОбъект.ИНАГРО_Количество / ТЗДанныеОС.Количество();
					
					МодульИНАГРО_БиологическиеАктивы = ОбщегоНазначения.ОбщийМодуль("ИНАГРО_БиологическиеАктивы");
						
					Если МодульИНАГРО_БиологическиеАктивы.ЭтоЖивотное(СтруктураШапкиДокумента.ИНАГРО_БиологическийАктив) Тогда
						Если Проводка.СчетКт.Поштучный Тогда
							Проводка.КоличествоГоловКт = 1;
						КонецЕсли;
					КонецЕсли;
						
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "БиологическиеАктивы", СтруктураШапкиДокумента.ИНАГРО_БиологическийАктив);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Склады", СтруктураШапкиДокумента.Склад);
					Если ПартионныйУчетБУ Тогда 
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Партии", Ссылка);
					КонецЕсли;
					
					Если СтруктураШапкиДокумента.ЕстьНДС Тогда
						Проводка.НалоговоеНазначениеКт  = СтруктураШапкиДокумента.НалоговоеНазначение;
					Иначе	
						Проводка.НалоговоеНазначениеКт  = НеОблНДСДеятельность;
					КонецЕсли;	
				Иначе	
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОбъектыСтроительства", СтруктураШапкиДокумента.ОбъектСтроительства);
					Если СтруктураШапкиДокумента.ЕстьНДС Тогда
						Проводка.НалоговоеНазначениеКт  = СтруктураШапкиДокумента.ОбъектСтроительства.НалоговоеНазначение;
					Иначе	
						Проводка.НалоговоеНазначениеКт  = НеОблНДСДеятельность;
					КонецЕсли;	
 				КонецЕсли;
				// ИНАГРО-- 
				
				Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыльДо2015 Тогда
					
				    Проводка.СуммаНУКт 				= Строка.СуммаНУ;
					
				КонецЕсли;
				
			КонецЕсли;
			
		ИначеЕсли СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПринятияКУчетуОсновныхСредств.Оборудование Тогда
			
			//Проводка сформирована движениями по партиям
			
		ИначеЕсли СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПринятияКУчетуОсновныхСредств.ПоРезультатамИнвентаризации Тогда

			Если Строка.Сумма > 0 Тогда

				Проводка = ПроводкиБУ.Добавить();
				
				Проводка.Период       = ДатаДока;
				Проводка.Организация  = СтруктураШапкиДокумента.Организация;
				Проводка.НомерЖурнала = НСтр("ru='ОС';uk='ОЗ'",Локализация.КодЯзыкаИнформационнойБазы());
				Проводка.Содержание   = НСтр("ru='Принят к учету объект ОС';uk=""Прийнятий до обліку об'єкт ОЗ""",Локализация.КодЯзыкаИнформационнойБазы());
				Проводка.Сумма        = Строка.Сумма;

				Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыль ИЛИ СтруктураШапкиДокумента.ЕстьНДС Тогда
					
					Проводка.НалоговоеНазначениеДт  = СтруктураШапкиДокумента.НалоговоеНазначение;
					
				КонецЕсли;	
				
				Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыль Тогда
					
				    Проводка.СуммаНУДт 				= Строка.СуммаНУ;
					
				КонецЕсли;
				
				Проводка.СчетДт       = СтруктураШапкиДокумента.СчетУчетаБУ;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ОсновныеСредства", ТекОС);

				Проводка.СчетКт       = СтруктураШапкиДокумента.СчетУчетаБУВнеоборотногоАктива;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, СтруктураШапкиДокумента.СубконтоБУ1);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, СтруктураШапкиДокумента.СубконтоБУ2);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3, СтруктураШапкиДокумента.СубконтоБУ3);

			КонецЕсли;
			
		КонецЕсли;
		
		// Движения по регистру ПервоначальныеСведенияОбОсновныхСредствах
		Движение = ПервоначальныеСведения.Добавить();
		Движение.Период                      = ДатаДока;
		Движение.ОсновноеСредство            = ТекОС;
		Движение.Организация                 = ТекОрганизация;
		Движение.ПервоначальнаяСтоимость     = Строка.Сумма;
		Движение.СпособНачисленияАмортизации = СтруктураШапкиДокумента.СпособНачисленияАмортизацииБУ;
		ТекСтрокаОС = ТаблицаПоОС.Найти(ТекОС, "ОсновноеСредство");
		Движение.ИнвентарныйНомер            = ?(ТекСтрокаОС = Неопределено, Неопределено, ТекСтрокаОС.ИнвентарныйНомер);
		Движение.ПараметрВыработки           = СтруктураШапкиДокумента.ПараметрВыработкиБУ;
		
		// Движения по регистру МестонахождениеОсновныхСредств
		Движение = МестонахождениеОС.Добавить();
		Движение.Период               = ДатаДока;
		Движение.ОсновноеСредство     = ТекОС;
		Движение.Организация          = ТекОрганизация;
		Движение.Местонахождение      = СтруктураШапкиДокумента.ПодразделениеОрганизации;
		Движение.МОЛ                  = СтруктураШапкиДокумента.МОЛБУ;

		// Движения по регистру НачислениеАмортизации
		Движение = НачислениеАмортизации.Добавить();
		Движение.Период               = ДатаДока;
		Движение.ОсновноеСредство     = ТекОС;
		Движение.Организация          = ТекОрганизация;
		Движение.НачислятьАмортизацию = СтруктураШапкиДокумента.НачислятьАмортизациюБУ;
		
		Производственное = СтруктураШапкиДокумента.НалоговоеНазначение.ВидНалоговойДеятельности <> ВидНалоговойДеятельностиНеОблагаемая;
		// Движения по регистру НачислениеАмортизацииНУ
		Движение = НачислениеАмортизацииНУ.Добавить();
		Движение.Период               = ДатаДока;
		Движение.ОсновноеСредство     = ТекОС;
		Движение.Организация          = ТекОрганизация;
		Движение.НачислятьАмортизацию = СтруктураШапкиДокумента.ЕстьНалогНаПрибыль И СтруктураШапкиДокумента.НачислятьАмортизациюБУ И Производственное;
		
		// Движения по регистру СостоянияОСОрганизаций
		Движение = СостояниеОС.Добавить();
		Движение.ДатаСостояния        = ДатаДока;
		Движение.ОсновноеСредство     = ТекОС;
		Движение.Организация          = ТекОрганизация;
		Движение.Состояние            = Перечисления.СостоянияОС.ВведеноВЭксплуатацию;
		Движение.НазваниеДокумента    = Строка(СтруктураШапкиДокумента.Ссылка.Метаданные());
		Движение.НомерДокумента       = СтруктураШапкиДокумента.Номер;

		// Движения по регистру СобытияОСОрганизаций
		Движение = ОперацииОС.Добавить();
		Движение.Период            = ДатаДока;
		Движение.ОсновноеСредство  = ТекОС;
		Движение.Организация       = ТекОрганизация;
		Движение.Событие           = СтруктураШапкиДокумента.СобытиеОС;
		Движение.НазваниеДокумента = Строка(СтруктураШапкиДокумента.Ссылка.Метаданные());
		Движение.НомерДокумента    = СтруктураШапкиДокумента.Номер;

		// Движения по регистру СчетаБухгалтерскогоУчетаОС
		Движение = СчетаУчетаОС.Добавить();
		Движение.Период                    = ДатаДока;
		Движение.ОсновноеСредство          = ТекОС;
		Движение.Организация               = ТекОрганизация;
		Движение.СчетУчета                 = СтруктураШапкиДокумента.СчетУчетаБУ;
		Движение.СчетНачисленияАмортизации = СтруктураШапкиДокумента.СчетНачисленияАмортизацииБУ;
		Движение.СчетУчетаДооценокОС         = СтруктураШапкиДокумента.СчетУчетаДооценокОС;
		
		// Движения по регистру ГрафикиАмортизации
		Движение = ГрафикиАмортизации.Добавить();
		Движение.Период            = ДатаДока;
		Движение.ОсновноеСредство  = ТекОС;
		Движение.Организация       = ТекОрганизация;
		Движение.ГрафикАмортизации = СтруктураШапкиДокумента.ГрафикАмортизацииПоГодуБУ;
		
		// Движения по регистру СпособыОтраженияРасходовПоАмортизации
		Движение = НаправлениеАмортизации.Добавить();
		Движение.Период                                = ДатаДока;
		Движение.ОсновноеСредство                      = ТекОС;
		Движение.Организация                           = ТекОрганизация;
		Движение.СпособыОтраженияРасходовПоАмортизации = СтруктураШапкиДокумента.СпособыОтраженияРасходовПоАмортизации;
		
		// Движения по регистру ПараметрыАмортизации
		Движение = ПараметрыАмортизации.Добавить();
		Движение.Период                                      = ДатаДока;
		Движение.ОсновноеСредство                            = ТекОС;
		Движение.Организация                                 = ТекОрганизация;
		Движение.ОбъемПродукцииРабот                         = СтруктураШапкиДокумента.ПредполагаемыйОбъемПродукцииБУ;
		Движение.ЛиквидационнаяСтоимость                     = СтруктураШапкиДокумента.ЛиквидационнаяСтоимостьБУ;
		Движение.СрокПолезногоИспользования                  = СтруктураШапкиДокумента.СрокПолезногоИспользованияБУ;
		Движение.СрокИспользованияДляВычисленияАмортизации   = СтруктураШапкиДокумента.СрокПолезногоИспользованияБУ;
		Движение.СтоимостьДляВычисленияАмортизации           = Строка.Сумма;
		Движение.ОбъемПродукцииРаботДляВычисленияАмортизации = СтруктураШапкиДокумента.ПредполагаемыйОбъемПродукцииБУ;
		
		// Движения по регистру ПараметрыАмортизацииНУ
		Движение = ПараметрыАмортизацииНУ.Добавить();
		Движение.Период                                      = ДатаДока;
		Движение.ОсновноеСредство                            = ТекОС;
		Движение.Организация                                 = ТекОрганизация;
		Движение.СрокПолезногоИспользования                  = СтруктураШапкиДокумента.СрокПолезногоИспользованияНУ;
		Движение.СрокИспользованияДляВычисленияАмортизации   = СтруктураШапкиДокумента.СрокПолезногоИспользованияНУ;
		Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыль Тогда
			Движение.СтоимостьДляВычисленияАмортизации           = Строка.СуммаНУ;
		КонецЕсли;	
		
		// Движения по регистру ПервоначальныеСведенияОСНалоговыйУчет
		Движение = ПервоначальныеСведенияНУ.Добавить();
		Движение.Период            = ДатаДока;
		Движение.ОсновноеСредство  = ТекОС;
		Движение.Организация       = ТекОрганизация;
		Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыль Тогда
			Движение.ПервоначальнаяСтоимостьНУ 	= Строка.СуммаНУ;
		КонецЕсли;	
		Движение.НалоговаяГруппаОС = СтруктураШапкиДокумента.НалоговаяГруппаОС;
		Если НЕ ЭтоДокументДо2015 Тогда
			Движение.СпособНачисленияАмортизации = СтруктураШапкиДокумента.СпособНачисленияАмортизацииНУ;
		КонецЕсли;	
		                                                                                    
		// Движения по регистру НалоговыеНазначенияОС
		Движение = НалоговыеНазначенияОС.Добавить();
		Движение.Период				 = ДатаДока;
		Движение.Организация		 = ТекОрганизация;
		Движение.ОсновноеСредство	 = ТекОС;
		Движение.НалоговоеНазначение = СтруктураШапкиДокумента.НалоговоеНазначение;
				

	КонецЦикла;

	// Списание при принятии к учету (БУ)
	Если СтруктураШапкиДокумента.СпособНачисленияАмортизацииБУ = Перечисления.СпособыНачисленияАмортизацииОС._100
		 ИЛИ СтруктураШапкиДокумента.СпособНачисленияАмортизацииБУ = Перечисления.СпособыНачисленияАмортизацииОС._50_50 Тогда
		 
		Если СтруктураШапкиДокумента.СпособНачисленияАмортизацииБУ = Перечисления.СпособыНачисленияАмортизацииОС._50_50 Тогда
			
			Для Каждого Строка Из ТЗДанныеОС Цикл
			
				Строка.Сумма 	= Строка.Сумма / 2;	
				Строка.СуммаНУ 	= Строка.СуммаНУ / 2;	
			
			КонецЦикла;
			
		КонецЕсли; 
		 
		НаправлениеСписания = СтруктураШапкиДокумента.СпособыОтраженияРасходовПоАмортизации;
		
		ТЗДанныеОС.Колонки.Добавить("НаправлениеАмортизации");
		ТЗДанныеОС.ЗаполнитьЗначения(НаправлениеСписания, "НаправлениеАмортизации");
		ТЗДанныеОС.Колонки.Добавить("СчетАмортизации");
		ТЗДанныеОС.ЗаполнитьЗначения(СтруктураШапкиДокумента.СчетНачисленияАмортизацииБУ, "СчетАмортизации");
		ТЗДанныеОС.Колонки.Добавить("НалоговоеНазначение");
		ТЗДанныеОС.ЗаполнитьЗначения(СтруктураШапкиДокумента.НалоговоеНазначение, "НалоговоеНазначение");
		ТЗДанныеОС.Колонки.Добавить("Местонахождение");
		ТЗДанныеОС.ЗаполнитьЗначения(ПодразделениеОрганизации, "Местонахождение");
		
		// далее нужно распределить суммы по направлениям начисления амортизации
		УправлениеНеоборотнымиАктивами.ПолучитьРаспределениеАмортизацииПоНаправлениямРегл(ПроводкиБУ, Отказ, Заголовок, ТЗДанныеОС, СтруктураШапкиДокумента, НСтр("ru='ОС';uk='ОЗ'",Локализация.КодЯзыкаИнформационнойБазы()), НСтр("ru='Начисление амортизации ОС';uk='Нарахування амортизації ОЗ'",Локализация.КодЯзыкаИнформационнойБазы()));

	КонецЕсли;
	
	УправлениеНеоборотнымиАктивами.ПроверкаДублированияЗаписейСостоянийОС(СтруктураШапкиДокумента.Организация, СостояниеОС, Отказ, Заголовок);

КонецПроцедуры // ФормированиеДвиженийРегл()

// Процедура формирует структуру шапки документа и дополнительных полей.
//
Процедура ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента) Экспорт

	// Дерево значений, содержащее имена необходимых полей в запросе по шапке.
	Перем ДеревоПолейЗапросаПоШапке;
	
	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента = ОбщегоНазначенияРед12.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	СтруктураШапкиДокумента.Вставить("ВидНалоговойДеятельности",
	                                 СтруктураШапкиДокумента.НалоговоеНазначение.ВидНалоговойДеятельности);
	
КонецПроцедуры // ПодготовитьСтруктуруШапкиДокумента()

// Процедура формирует таблицы документа.
//
Процедура ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоОС, Отказ, Заголовок) Экспорт
	
	ПогрешностиОкругления = Новый Соответствие;
	
	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("ОсновноеСредство", "ОсновноеСредство");
	СтруктураПолей.Вставить("ИнвентарныйНомер", "ИнвентарныйНомер");

	РезультатЗапросаПоОС = ОбщегоНазначенияРед12.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "ОС", СтруктураПолей);
	ТаблицаПоОС          = РезультатЗапросаПоОС.Выгрузить();
	
КонецПроцедуры

//////////////////////////////////////////////////////////////////////////////////
//// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура - обработчик события "ОбработкаЗаполнения".
//
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)

	ТипДанныхЗаполнения = ТипЗнч(ДанныеЗаполнения);
	Если ДанныеЗаполнения <> Неопределено И ТипДанныхЗаполнения <> Тип("Структура")
		И Метаданные().ВводитсяНаОсновании.Содержит(ДанныеЗаполнения.Метаданные()) Тогда
		ЗаполнитьПоДокументуОснованию(ДанныеЗаполнения);
	Иначе
		НачислятьАмортизациюБУ = Истина;
	КонецЕсли;
	ЗаполнениеДокументов.Заполнить(ЭтотОбъект, ДанныеЗаполнения);
	
	// Специфические для конкретного документа действия
	Если НЕ ЗначениеЗаполнено(СобытиеОС) Тогда
		СобытиеОС = УчетОС.ПолучитьСобытиеПоОСИзСправочника(Перечисления.ВидыСобытийОС.ВводВЭксплуатацию);
	КонецЕсли;
	
	// ИНАГРО++
	Если ТипДанныхЗаполнения = Тип("Структура") И ДанныеЗаполнения.Свойство("ИНАГРО_ДокументОперативногоУчета") Тогда
		
		Если ДанныеЗаполнения.ИНАГРО_ДокументОперативногоУчета.Метаданные().Имя = "ИНАГРО_ПеремещениеБиологическихАктивов" ИЛИ
			 ДанныеЗаполнения.ИНАГРО_ДокументОперативногоУчета.Метаданные().Имя = "ИНАГРО_ОприходованиеБиологическихАктивов" Тогда
			 
			 ВидОперации = Перечисления.ВидыОперацийПринятияКУчетуОсновныхСредств.ИНАГРО_БиологическиеАктивы;
			ЗаполнитьРеквизитыБА(ДанныеЗаполнения);
			ЗаполнитьТаблицуОС(ДанныеЗаполнения); 
		КонецЕсли;
		
	КонецЕсли;
	// ИНАГРО--  
	
КонецПроцедуры // ОбработкаЗаполнения()

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)

	МассивНепроверяемыхРеквизитов = Новый Массив;

	ПлательщикНДС = УчетнаяПолитика.ПлательщикНДС(Организация, Дата);
	ПлательщикНП  = УчетнаяПолитика.ПлательщикНалогаНаПрибыль(Организация, Дата);
	ПлательщикНалогаНаПрибыльДо2015  = УчетнаяПолитика.ПлательщикНалогаНаПрибыльДо2015(Организация, Дата);
	
	ДатаНКУ2015 = '2015 01 01';
	
	УправлениеВнеоборотнымиАктивами.ПроверитьОтсутствиеДублейВТабличнойЧасти(ЭтотОбъект, "ОС",
		Новый Структура("ОсновноеСредство"), Отказ);	
	
	Если ВидОперации = Перечисления.ВидыОперацийПринятияКУчетуОсновныхСредств.Оборудование Тогда
		МассивНепроверяемыхРеквизитов.Добавить("ОбъектСтроительства");
		МассивНепроверяемыхРеквизитов.Добавить("СтоимостьБУ");
		МассивНепроверяемыхРеквизитов.Добавить("СтоимостьНУ");	
		МассивНепроверяемыхРеквизитов.Добавить("ИНАГРО_БиологическийАктив"); // ИНАГРО
	КонецЕсли;
	
	// ИНАГРО++
	Если ВидОперации = Перечисления.ВидыОперацийПринятияКУчетуОсновныхСредств.ОбъектыСтроительства Тогда 
		МассивНепроверяемыхРеквизитов.Добавить("Номенклатура");
		МассивНепроверяемыхРеквизитов.Добавить("Склад");
		МассивНепроверяемыхРеквизитов.Добавить("ИНАГРО_БиологическийАктив");
	КонецЕсли;
	// ИНАГРО--
	
	Если ВидОперации = Перечисления.ВидыОперацийПринятияКУчетуОсновныхСредств.ПоРезультатамИнвентаризации Тогда
		МассивНепроверяемыхРеквизитов.Добавить("ОбъектСтроительства");
		МассивНепроверяемыхРеквизитов.Добавить("Номенклатура");
		МассивНепроверяемыхРеквизитов.Добавить("Склад");
		МассивНепроверяемыхРеквизитов.Добавить("ИНАГРО_БиологическийАктив"); // ИНАГРО
	КонецЕсли;
	
	// ИНАГРО++
	Если ВидОперации = Перечисления.ВидыОперацийПринятияКУчетуОсновныхСредств.ИНАГРО_БиологическиеАктивы Тогда
		МассивНепроверяемыхРеквизитов.Добавить("ОбъектСтроительства");
		МассивНепроверяемыхРеквизитов.Добавить("Номенклатура");		
	КонецЕсли;
	// ИНАГРО--
	
	Если СпособНачисленияАмортизацииБУ <> Перечисления.СпособыНачисленияАмортизацииОС.Прямолинейный
			И СпособНачисленияАмортизацииБУ <> Перечисления.СпособыНачисленияАмортизацииОС.Кумулятивный
			И СпособНачисленияАмортизацииБУ <> Перечисления.СпособыНачисленияАмортизацииОС.УменьшенияОстатка
			И СпособНачисленияАмортизацииБУ <> Перечисления.СпособыНачисленияАмортизацииОС.УскоренногоУменьшенияОстатка Тогда
		МассивНепроверяемыхРеквизитов.Добавить("СрокПолезногоИспользованияБУ");
	КонецЕсли;
	
	Если СпособНачисленияАмортизацииБУ <> Перечисления.СпособыНачисленияАмортизацииОС.Производственный Тогда
		МассивНепроверяемыхРеквизитов.Добавить("ПредполагаемыйОбъемПродукцииБУ");
		МассивНепроверяемыхРеквизитов.Добавить("ПараметрВыработкиБУ");
	КонецЕсли;
	
	Если ВидОперации <> Перечисления.ВидыОперацийПринятияКУчетуОсновныхСредств.Оборудование Тогда
		МассивНепроверяемыхРеквизитов.Добавить("НалоговоеНазначениеОборудования");
	КонецЕсли;	
	
	Если НачислятьАмортизациюБУ И СпособНачисленияАмортизацииБУ = Перечисления.СпособыНачисленияАмортизацииОС.УменьшенияОстатка Тогда
		ПроверяемыеРеквизиты.Добавить("ЛиквидационнаяСтоимостьБУ");
	КонецЕсли;
	
	Если ПлательщикНП И НачислятьАмортизациюБУ И Дата >= ДатаНКУ2015 Тогда 
		ПроверяемыеРеквизиты.Добавить("СпособНачисленияАмортизацииНУ");
		Если  (СпособНачисленияАмортизацииНУ = Перечисления.СпособыНачисленияАмортизацииОС.Прямолинейный)
			ИЛИ (СпособНачисленияАмортизацииНУ = Перечисления.СпособыНачисленияАмортизацииОС.Кумулятивный)
			ИЛИ (СпособНачисленияАмортизацииНУ = Перечисления.СпособыНачисленияАмортизацииОС.УменьшенияОстатка)
			ИЛИ (СпособНачисленияАмортизацииНУ = Перечисления.СпособыНачисленияАмортизацииОС.УскоренногоУменьшенияОстатка) Тогда
			ПроверяемыеРеквизиты.Добавить("СрокПолезногоИспользованияНУ");
		КонецЕсли;	
	КонецЕсли;
	
	Если ВидОперации = Перечисления.ВидыОперацийПринятияКУчетуОсновныхСредств.ОбъектыСтроительства Тогда
		РеквизитАналитики = ОбъектСтроительства.НалоговоеНазначение;
		Если НЕ ПлательщикНДС Тогда
			РеквизитАналитики = Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяХозДеятельность;
		КонецЕсли;	
			
		ОбъектУчетаКт = ОбъектСтроительства;
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПринятияКУчетуОсновныхСредств.Оборудование Тогда
		РеквизитАналитики = НалоговоеНазначениеОборудования;
		ОбъектУчетаКт = Номенклатура;
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПринятияКУчетуОсновныхСредств.ИНАГРО_БиологическиеАктивы Тогда // ИНАГРО
		РеквизитАналитики = НалоговоеНазначение;
		ОбъектУчетаКт = ИНАГРО_БиологическийАктив; 
	Иначе	
		РеквизитАналитики = НалоговоеНазначениеОборудования;
		ОбъектУчетаКт = Номенклатура;
	КонецЕсли;	
	
	Если ПлательщикНДС Тогда
		УправлениеНеоборотнымиАктивами.ПроверитьСоответствиеНалоговогоНазначенияОбъектов(ОбъектУчетаКт, Неопределено, РеквизитАналитики, НалоговоеНазначение, Отказ, "");
	КонецЕсли;
	
	Если ПлательщикНалогаНаПрибыльДо2015 И НачислятьАмортизациюБУ И ВидОперации = Перечисления.ВидыОперацийПринятияКУчетуОсновныхСредств.Оборудование Тогда
		УправлениеНеоборотнымиАктивами.ПроверитьСоответствиеНалоговогоНазначенияАмортизацииОбъекта(Номенклатура, СпособыОтраженияРасходовПоАмортизации, НалоговоеНазначение, Отказ, "", Дата, ПлательщикНДС);
	КонецЕсли;
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	
	Если СпособНачисленияАмортизацииНУ = Перечисления.СпособыНачисленияАмортизацииОС.Производственный И Дата < Дата('20200401') Тогда
		СтрокаСообщения = НСтр("ru='Бух. учет: Указан Производственный способ аморт. в НУ, амотртизация возможна с 01.04.2020!';uk='Бух. облік: Вказано Виробничий метод аморт. в ПО, амотртізація можлива з 01.04.2020!'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения);
	КонецЕсли;

КонецПроцедуры

Процедура ОбработкаПроведения(Отказ)

	Перем Заголовок, СтруктураШапкиДокумента;
	Перем ТаблицаПоОС;
	
	Заголовок = "";

	// ПОДГОТОВКА ПРОВЕДЕНИЯ ПО ДАННЫМ ДОКУМЕНТА

	ПроведениеСервер.ПодготовитьНаборыЗаписейКПроведению(ЭтотОбъект);
	Если РучнаяКорректировка Тогда
		Возврат;
	КонецЕсли;
	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначенияБПВызовСервера.ПредставлениеДокументаПриПроведении(Ссылка);
	
	ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента);
	
	// Получим данные учетной политики
	ПодготовитьПараметрыУчетнойПолитики(СтруктураШапкиДокумента, Отказ, Заголовок);

	ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоОС, Отказ, Заголовок);
	
	
	Если НЕ Отказ Тогда

		// Формирование движений регистров, бухгалтерских и налоговых проводок.
		ФормированиеДвижений(СтруктураШапкиДокумента, ТаблицаПоОС, Отказ, Заголовок);

	КонецЕсли;
	
	Движения.Хозрасчетный.ВыполнитьДействияПередЗаписьюДвижений(); 	
	
	Если НЕ Отказ Тогда

		ИНАГРО_Общий.ИНАГРО_ДвиженияЗатратыОрганизации_Приход(СтруктураШапкиДокумента, Движения);
		
		// Движение в РегистрСведений.ИНАГРО_СоответствиеБАиОС 
		Если АмортизацияБА И ЗначениеЗаполнено(ИНАГРО_ДокументОперативногоУчета) Тогда  
			
			ТаблицаБА = ЭтотОбъект.ОС.Выгрузить();
			
			ТаблицаБА.Колонки.Добавить("БиологическийАктив");
			Если ИНАГРО_ДокументОперативногоУчета.Метаданные().Имя = "ИНАГРО_ПеремещениеБиологическихАктивов" Тогда
				ТаблицаБА.ЗаполнитьЗначения(ЭтотОбъект.ИНАГРО_БиологическийАктивНовый, "БиологическийАктив");
			Иначе	
				ТаблицаБА.ЗаполнитьЗначения(ЭтотОбъект.ИНАГРО_БиологическийАктив, "БиологическийАктив");
			КонецЕсли; 
			
			ТаблицаБА.Колонки.Добавить("Склад");
			Если ИНАГРО_ДокументОперативногоУчета.Метаданные().Имя = "ИНАГРО_ПеремещениеБиологическихАктивов" Тогда
				ТаблицаБА.ЗаполнитьЗначения(ЭтотОбъект.ИНАГРО_СкладНовый, "Склад");
			Иначе	
				ТаблицаБА.ЗаполнитьЗначения(ЭтотОбъект.Склад, "Склад");
			КонецЕсли; 
			
			ТаблицаБА.Колонки.Добавить("ПодразделениеОрганизации");
			ТаблицаБА.ЗаполнитьЗначения(ЭтотОбъект.ПодразделениеОрганизации, "ПодразделениеОрганизации");
			
			ТаблицаБА.Колонки.Добавить("Организация");
			ТаблицаБА.ЗаполнитьЗначения(ЭтотОбъект.Организация, "Организация");
			
			ТаблицаБА.Колонки.Добавить("ДокументОперативногоУчета");
			ТаблицаБА.ЗаполнитьЗначения(ЭтотОбъект.ИНАГРО_ДокументОперативногоУчета.Ссылка, "ДокументОперативногоУчета");
			
			ТаблицаБА.Колонки.Добавить("СтоимостьБУ");
			ТаблицаБА.ЗаполнитьЗначения(ЭтотОбъект.СтоимостьБУ, "СтоимостьБУ");
			
			ТаблицаБА.Колонки.Добавить("СтоимостьНУ");
			ТаблицаБА.ЗаполнитьЗначения(ЭтотОбъект.СтоимостьНУ, "СтоимостьНУ");
			                                                 
			Если ИНАГРО_ОбщийВызовСервераПовтИсп.ЕстьБСПУ() Тогда
				МодульИНАГРО_БиологическиеАктивы = ОбщегоНазначения.ОбщийМодуль("ИНАГРО_БиологическиеАктивы");			
				МодульИНАГРО_БиологическиеАктивы.СоответствиеБАиОС(Движения, СтруктураШапкиДокумента, ТаблицаБА);
			КонецЕсли;
		
		КонецЕсли;
		
	КонецЕсли;	
	// ИНАГРО-- 
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКЗаписиДвижений(ЭтотОбъект);
	
КонецПроцедуры
// ИНАГРО--

// Процедура вызывается перед записью документа 
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)

	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	// Очистка неиспользуемых реквизитов.
	
	СпособыНачисленияАмортизации = Перечисления.СпособыНачисленияАмортизацииОС;             
	
	// Бухгалтерский учет
	
	Если СпособНачисленияАмортизацииБУ <> СпособыНачисленияАмортизации.Производственный Тогда
		
		ПредполагаемыйОбъемПродукцииБУ = 0;
		ПараметрВыработкиБУ            = Справочники.ПараметрыВыработкиОС.ПустаяСсылка();
		
	КонецЕсли;
	
	Если СпособНачисленияАмортизацииБУ <> СпособыНачисленияАмортизации.Прямолинейный
		 И СпособНачисленияАмортизацииБУ <> СпособыНачисленияАмортизации.УменьшенияОстатка 
		 И СпособНачисленияАмортизацииБУ <> СпособыНачисленияАмортизации.УскоренногоУменьшенияОстатка 
		 И СпособНачисленияАмортизацииБУ <> СпособыНачисленияАмортизации.Кумулятивный Тогда
		 
		 СрокПолезногоИспользованияБУ = 0;
		 Если СпособНачисленияАмортизацииБУ <> СпособыНачисленияАмортизации.Производственный Тогда
			 ЛиквидационнаяСтоимостьБУ    = 0;
		 КонецЕсли;
		 ГрафикАмортизацииПоГодуБУ    = Справочники.ГодовыеГрафикиАмортизацииОС.ПустаяСсылка();
		 
	 КонецЕсли;
	 
	 Если СпособНачисленияАмортизацииБУ = СпособыНачисленияАмортизации.УскоренногоУменьшенияОстатка Тогда
			
		Если СрокПолезногоИспользованияБУ <= 24 Тогда
					
			СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Для основного средства при расчете по способу %1 указан срок полезного использования <%2> мес.!
|Для корректного начисления амортизации срок использования должен быть более 24 месяца.';uk='Для основного засобу при розрахунку способом %1 зазначений строк корисного використання <%2> міс.!
|Для коректного нарахування амортизації строк використання повинен бути більше 24 місяців.'"),
											СпособНачисленияАмортизацииБУ, СрокПолезногоИспользованияБУ);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения);
				
		КонецЕсли; 
	 	
	 КонецЕсли;
	 
	ПлательщикНДС = УчетнаяПолитика.ПлательщикНДС(Организация, Дата);
	 
	Если НЕ ПлательщикНДС Тогда
		
		// организация - не плательщик НДС. Установим во всех ТЧ признак соответствующего учета НДС
		НеОблНДСДеятельность = Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяХозДеятельность;
		
		Если НалоговоеНазначение <> Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяНеХозДеятельность Тогда
			НалоговоеНазначение = НеОблНДСДеятельность;
		КонецЕсли;	
		
		НалоговоеНазначениеОборудования = НеОблНДСДеятельность;
		
	КонецЕсли; 
	
	ДатаНКУ2015 = '2015 01 01';
	
	Если Дата >= ДатаНКУ2015 Тогда
		Если НЕ ЗначениеЗаполнено(СпособНачисленияАмортизацииНУ) И СпособНачисленияАмортизацииБУ <> Перечисления.СпособыНачисленияАмортизацииОС.Производственный Тогда
			СпособНачисленияАмортизацииНУ = СпособНачисленияАмортизацииБУ;	
		КонецЕсли;	
		Если НЕ ЗначениеЗаполнено(СрокПолезногоИспользованияНУ) Тогда
			Если  (СпособНачисленияАмортизацииНУ = Перечисления.СпособыНачисленияАмортизацииОС.Прямолинейный)
				ИЛИ (СпособНачисленияАмортизацииНУ = Перечисления.СпособыНачисленияАмортизацииОС.Кумулятивный)
				ИЛИ (СпособНачисленияАмортизацииНУ = Перечисления.СпособыНачисленияАмортизацииОС.УменьшенияОстатка)
				ИЛИ (СпособНачисленияАмортизацииНУ = Перечисления.СпособыНачисленияАмортизацииОС.УскоренногоУменьшенияОстатка) Тогда
				
				СрокПолезногоИспользованияНУ = СрокПолезногоИспользованияБУ;	
			КонецЕсли;
		КонецЕсли;	
		
	КонецЕсли;		
	
	// ИНАГРО++
	Если Проведен И РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения И АмортизацияБА		
		 И ЗначениеЗаполнено(ИНАГРО_ДокументОперативногоУчета) И ИНАГРО_ДокументОперативногоУчета.Проведен Тогда
		  
		СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Отмена проведения запрещена! Документ-основание ""%1"" проведен.';uk='Вiдміна проведення заборонено! Документ-підстава ""%1"" проведений'"),
			ИНАГРО_ДокументОперативногоУчета);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения);        		
		Отказ = Истина;
		
	КонецЕсли;
	// ИНАГРО--
		
КонецПроцедуры // ПередЗаписью

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКОтменеПроведения(ЭтотОбъект);
	Движения.Записать();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Процедура ЗаполнитьПоДокументуОснованию(Основание)

	Если ТипЗнч(Основание) = Тип("СправочникСсылка.ОсновныеСредства") Тогда
		
		Если Основание.ЭтоГруппа Тогда
			
			Сообщить(НСтр("ru='Нельзя принять к учету группу основных средств';uk='Не можна прийняти до обліку групу основних засобів'"), СтатусСообщения.Внимание);
			Возврат;
			
		КонецЕсли; 

		СтрокаТабличнойЧасти = ОС.Добавить();

		СтрокаТабличнойЧасти.ОсновноеСредство = Основание.Ссылка;
		СтрокаТабличнойЧасти.ИнвентарныйНомер = Основание.Код;

	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ИнвентаризацияОС") ИЛИ ТипЗнч(Основание) = Тип("ДокументСсылка.ИНАГРО_ИнвентаризацияОС") Тогда // ИНАГРО
		
		Организация              = Основание.Организация;
		ПодразделениеОрганизации = Основание.ПодразделениеОрганизации;
		ВидОперации = Перечисления.ВидыОперацийПринятияКУчетуОсновныхСредств.ПоРезультатамИнвентаризации;
		СтоимостьБУ = 0;
		ТекМол      = "";
		
		Если ТипЗнч(Основание) = Тип("ДокументСсылка.ИНАГРО_ИнвентаризацияОС") Тогда // ИНАГРО 
			МОЛБУ = Основание.МОЛ;
		КонецЕсли;

		
		Для Каждого ТекСтрокаОС Из Основание.ОС Цикл
			
			Если НЕ ТекСтрокаОС.НаличиеПоДаннымУчета И ТекСтрокаОС.НаличиеФактическое Тогда
				
				НоваяСтрока = ОС.Добавить();
				НоваяСтрока.ОсновноеСредство = ТекСтрокаОС.ОсновноеСредство;
				НоваяСтрока.ИнвентарныйНомер = ТекСтрокаОС.ОсновноеСредство.Код;
				
				СтоимостьБУ = СтоимостьБУ + ТекСтрокаОС.СтоимостьФактическая;
				
			КонецЕсли;
			
		КонецЦикла;
		
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
		
		ВидОперацииОснования             = Основание.ВидОперации;
		ПоступлениеОборудования          = (ВидОперацииОснования = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Оборудование);
		ПоступлениеОбъектовСтроительства = (ВидОперацииОснования = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ОбъектыСтроительства);
		Организация              = Основание.Организация;
		Склад                    = Основание.Склад;
		
		Если ПоступлениеОборудования Тогда
			
			ВидОперации            = Перечисления.ВидыОперацийПринятияКУчетуОсновныхСредств.Оборудование;
			Оборудование           = Основание.Оборудование;
			ОборудованиеКоличество = Оборудование.Количество();
			
			Если ОборудованиеКоличество > 0 Тогда
				
				Если ОборудованиеКоличество > 1 Тогда
					
					ТаблицаОборудования = Оборудование.Выгрузить();
					СтрокаТЧ = ТаблицаОборудования.ВыбратьСтроку(НСтр("ru='Выберите строку документа.';uk='Виберіть строку документу.'"));
					
				Иначе
					
					СтрокаТЧ = Оборудование[0];
					
				КонецЕсли;
				
				Если СтрокаТЧ <> Неопределено Тогда
					
					Номенклатура                   = СтрокаТЧ.Номенклатура;
					НалоговоеНазначение            = СтрокаТЧ.НалоговоеНазначение;
					СчетУчетаБУВнеоборотногоАктива = СтрокаТЧ.СчетУчетаБУ;

					НалоговоеНазначениеОборудования = СтрокаТЧ.НалоговоеНазначение;
					
				КонецЕсли;
				
			КонецЕсли;
			
		ИначеЕсли ПоступлениеОбъектовСтроительства Тогда
			
			ВидОперации                    = Перечисления.ВидыОперацийПринятияКУчетуОсновныхСредств.ОбъектыСтроительства;
			ОбъектыСтроительства           = Основание.ОбъектыСтроительства;
			ОбъектыСтроительстваКоличество = ОбъектыСтроительства.Количество();
			
			Если ОбъектыСтроительстваКоличество > 0 Тогда
				
				Если ОбъектыСтроительстваКоличество > 1 Тогда
					
					ТаблицаОбъектовСтроительства = ОбъектыСтроительства.Выгрузить();
					СтрокаТЧ = ТаблицаОбъектовСтроительства.ВыбратьСтроку(НСтр("ru='Выберите строку документа.';uk='Виберіть строку документу.'"));
					
				Иначе
					
					СтрокаТЧ = ОбъектыСтроительства[0];
					
				КонецЕсли;
				
				Если СтрокаТЧ <> Неопределено Тогда
					
					ОбъектСтроительства            = СтрокаТЧ.ОбъектСтроительства;
					НалоговоеНазначение            = СтрокаТЧ.НалоговоеНазначение;
					СчетУчетаБУВнеоборотногоАктива = СтрокаТЧ.СчетУчетаБУ;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		УстановитьСчетАмортизации();
		
	КонецЕсли;

	НачислятьАмортизациюБУ = Истина;
	
КонецПроцедуры

// ИНАГРО++
Процедура ПриКопировании(ОбъектКопирования)
	
	Дата = НачалоДня(ОбщегоНазначенияБП.ПолучитьРабочуюДату());
	Ответственный = Пользователи.ТекущийПользователь();
	
	ИНАГРО_ДокументОперативногоУчета = Неопределено;	
	Если ВидОперации = Перечисления.ВидыОперацийПринятияКУчетуОсновныхСредств.ИНАГРО_БиологическиеАктивы Тогда 
		ВидОперации = Перечисления.ВидыОперацийПринятияКУчетуОсновныхСредств.Оборудование; // как по-умолчанию
	КонецЕсли;	
	ИНАГРО_БиологическийАктив        = Справочники.БиологическиеАктивы.ПустаяСсылка();
	Комментарий		   		         = "";
			
КонецПроцедуры

Процедура ПередУдалением(Отказ)
	
	Если АмортизацияБА И ЗначениеЗаполнено(ИНАГРО_ДокументОперативногоУчета) И ИНАГРО_ДокументОперативногоУчета.Проведен Тогда
		  
		СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Удаление запрещено! Документ-основание ""%1"" проведен.';uk='Видалення заборонено! Документ-підстава ""%1"" проведений'"),
			ИНАГРО_ДокументОперативногоУчета);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения);         		
		Отказ = Истина;
		
	КонецЕсли;  	
	
КонецПроцедуры

// ИНАГРО++ 
Процедура ЗаполнитьРеквизитыБА(Параметры)
			
	НалоговаяГруппаОС 				 = Параметры.НалоговаяГруппаОС;
	СчетУчетаБУ  					 = Параметры.СчетУчетаБУ;
	Дата 							 = Параметры.Дата;
	Организация  					 = Параметры.Организация;
	Склад  							 = Параметры.Склад;
	Комментарий						 = Параметры.Комментарий; 
	СпособНачисленияАмортизацииБУ  	 = Параметры.СпособНачисленияАмортизацииБУ;
	СчетНачисленияАмортизацииБУ  	 = Параметры.СчетНачисленияАмортизацииБУ;
	НачислятьАмортизациюБУ           = Параметры.НачислятьАмортизациюБУ;
	ИНАГРО_ДокументОперативногоУчета = Параметры.ИНАГРО_ДокументОперативногоУчета;
	ИНАГРО_БиологическийАктив  		 = Параметры.ИНАГРО_БиологическийАктив; 
	ИНАГРО_Количество 				 = Параметры.ИНАГРО_Количество;
	СтоимостьБУ 					 = Параметры.СтоимостьБУ;
	СтоимостьНУ 					 = Параметры.СтоимостьНУ; 	
	
	Если Параметры.ИНАГРО_ДокументОперативногоУчета.Метаданные().Имя = "ИНАГРО_ПеремещениеБиологическихАктивов" Тогда
		
		СчетУчетаБУВнеоборотногоАктива = Параметры.СчетУчетаБУВнеоборотногоАктива;
		НалоговоеНазначение			   = Параметры.НалоговоеНазначение;
		ИНАГРО_БиологическийАктивНовый = Параметры.ИНАГРО_БиологическийАктивНовый;
		ИНАГРО_СкладНовый 			   = Параметры.ИНАГРО_СкладНовый;  		
				
	ИначеЕсли Параметры.ИНАГРО_ДокументОперативногоУчета.Метаданные().Имя = "ИНАГРО_ОприходованиеБиологическихАктивов"
		И ВидОперации = Перечисления.ВидыОперацийПринятияКУчетуОсновныхСредств.ПоРезультатамИнвентаризации Тогда
		
		СчетУчетаБУВнеоборотногоАктива = Параметры.СчетУчетаБУВнеоборотногоАктива; 
		СубконтоБУ1 	               = Параметры.СубконтоБУ1;
		СубконтоБУ2 	               = Параметры.СубконтоБУ2;
		СубконтоБУ3 	               = Параметры.СубконтоБУ3;		
		
	КонецЕсли;

КонецПроцедуры 

Процедура ЗаполнитьТаблицуОС(Параметры)
	        			
	КоличествоСтрок = ?(Параметры.ОперацияЖивотноводства, Параметры.Голов, 1); 
	
	Для Счетчик = 1 По КоличествоСтрок Цикл
		
		НовоеОС = Справочники.ОсновныеСредства.СоздатьЭлемент();
		
		Если Параметры.ИНАГРО_ДокументОперативногоУчета.Метаданные().Имя = "ИНАГРО_ПеремещениеБиологическихАктивов" Тогда
			
			НовоеОС.Наименование	   = Параметры.ИНАГРО_БиологическийАктивНовый.Наименование;
			НовоеОС.НаименованиеПолное = Параметры.ИНАГРО_БиологическийАктивНовый.НаименованиеПолное;
			
		Иначе
			
			НовоеОС.Наименование	   = Параметры.ИНАГРО_БиологическийАктив.Наименование;
			НовоеОС.НаименованиеПолное = Параметры.ИНАГРО_БиологическийАктив.НаименованиеПолное;
			
		КонецЕсли;
		
		НовоеОС.Записать();
		
		СтрокаТЧ = ОС.Добавить();
		СтрокаТЧ.ОсновноеСредство = НовоеОС.Ссылка;
		СтрокаТЧ.ИнвентарныйНомер = НовоеОС.Ссылка.Код;
		
	КонецЦикла; 	
	        	
КонецПроцедуры

АмортизацияБА = Ложь;
Если ИНАГРО_ОбщийВызовСервераПовтИсп.ЕстьБСПУ() Тогда
	АмортизацияБА = Константы.ИНАГРО_НачислятьАмортизациюБА.Получить();
КонецЕсли;
// ИНАГРО--

#КонецЕсли