#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда  

#Область ОбработчикиСобытий

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	ТипДанныхЗаполнения = ТипЗнч(ДанныеЗаполнения);	
	
	ИНАГРО_ЭлеваторЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект);
	
	ЗаполнениеДокументов.Заполнить(ЭтотОбъект, ДанныеЗаполнения); 	
	
	Если ТипДанныхЗаполнения = Тип("Структура") Тогда
		Если ДанныеЗаполнения.Свойство("Номенклатура") Тогда			
			ЗаполнитьПоДокументуОснованию(ДанныеЗаполнения);
		КонецЕсли;
	КонецЕсли;
	
	ВидЖурнала = Перечисления.ИНАГРО_ВидыЖурналов.ЖурналВесовой;		
	
	ИНАГРО_ЭлеваторЗаполнениеДокументов.ЗаполнитьТипНомерЖурналаВесовой(ЭтотОбъект);			
	
	Весовщик = Пользователи.ТекущийПользователь(); 	
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	МассивНепроверяемыхРеквизитов = Новый Массив; 	
	
	КонтрольПриказов = ИНАГРО_Элеватор.ПолучитьПараметрУчетаЭлеватора(Дата, "КонтрольПриказов", Ложь);
	Если НЕ КонтрольПриказов Тогда
		МассивНепроверяемыхРеквизитов.Добавить("ПриказНаВывоз");
	КонецЕсли;

	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);	

КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда		
		Возврат;		
	КонецЕсли;	
		
	Если ЭтоНовый() Тогда
		
		ВремяНачалаДняПриОтгрузке = ИНАГРО_Элеватор.ПолучитьПараметрУчетаЭлеватора(Дата, "ВремяНачалаДняПриОтгрузке", 0);
				
		Дата = Дата + 60 * 60 * ВремяНачалаДняПриОтгрузке; 

	КонецЕсли; 

	Если ЗначениеЗаполнено(ТипЖурнала) Тогда
		
		Отбор = Новый Структура("ВидЖурнала, ТипЖурнала");
		ЗаполнитьЗначенияСвойств(Отбор, ЭтотОбъект);
		
		ИНАГРО_Элеватор.ЗаписатьОчереднойНомер(Отбор, НомерЖурнала); 
		
	КонецЕсли;

КонецПроцедуры 

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	Перем Заголовок, СтруктураШапкиДокумента;
	Перем ТаблицаПоКультурам;	
		   
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначенияБПВызовСервера.ПредставлениеДокументаПриПроведении(Ссылка);

	ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента);	
	
	Если ЗначениеЗаполнено(МестоХранения) И МестоХранения.Владелец <> Склад Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Место хранения %2 не принадлежит складу %1!';uk='Місце зберігання %2 не належить складу %1!'"), Склад, МестоХранения);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , , , Отказ);
	КонецЕсли;
	
	Если ВесБрутто = 0 Тогда
		ТекстСообщения = НСтр("ru='Нет значения веса брутто!';uk='Немає значення ваги брутто!'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Объект.ВесБрутто", , Отказ);									
	КонецЕсли;
	
	Если ВесТары = 0 Тогда
		ТекстСообщения = НСтр("ru='Нет значения веса тары!';uk='Немає значення ваги тари!'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Объект.ВесТары", , Отказ);									
	КонецЕсли;
	
	КонтрольПриказаВБизнесПроцессах = ИНАГРО_Элеватор.ПолучитьПараметрУчетаЭлеватора(Дата, "КонтрольПриказаВБизнесПроцессах", Ложь);
	Если НЕ Отказ И КонтрольПриказаВБизнесПроцессах Тогда
		ПодготовитьТаблицуПоКультурам(СтруктураШапкиДокумента, ТаблицаПоКультурам, Отказ, Заголовок);		
		Для Каждого СтрокаТаблицы Из ТаблицаПоКультурам Цикл	                                                                     
			ВидТМЦ = ИНАГРО_Элеватор.ПолучитьДополнительныйРеквизитНоменклатуры(СтрокаТаблицы.Номенклатура, "ВидТМЦ");
			Если НЕ ВидТМЦ = Перечисления.ИНАГРО_ВидыТМЦ.Кат3 Тогда 
				Отказ = ИНАГРО_Элеватор.ПроверитьОстатокПоПриказу(СтрокаТаблицы);				        
			КонецЕсли;
		КонецЦикла;	
	КонецЕсли; 	

КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)

	Дата = НачалоДня(ОбщегоНазначения.ТекущаяДатаПользователя());
	Ответственный = Пользователи.ТекущийПользователь();
	
	ИНАГРО_ЭлеваторЗаполнениеДокументов.ЗаполнитьТипНомерЖурналаВесовой(ЭтотОбъект);			
		
	ВесБрутто  = 0; 
	ВесБрутто1 = 0;
	ВесТары    = 0;	 
	ВесТары1   = 0;
	ВесНетто   = 0;
	
КонецПроцедуры

#КонецОбласти

#Область Проведение

// Процедура формирует структуру шапки документа и дополнительных полей.
//
Процедура ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента) Экспорт

	// Дерево значений, содержащее имена необходимых полей в запросе по шапке.
	Перем ДеревоПолейЗапросаПоШапке;	
	
	СтруктураШапкиДокумента   = ОбщегоНазначенияРед12.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	
	// Заполним по шапке документа дерево параметров, нужных при проведении.
	ДеревоПолейЗапросаПоШапке = ОбщегоНазначенияРед12.СформироватьДеревоПолейЗапросаПоШапке(); 
	ОбщегоНазначенияРед12.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "Организация", "ДоговорОрганизация");
	
	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа.
	СтруктураШапкиДокумента = УправлениеЗапасами.СформироватьЗапросПоДеревуПолей(ЭтотОбъект, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, );

КонецПроцедуры

Процедура ПодготовитьТаблицуПоКультурам(СтруктураШапкиДокумента, ТаблицаПоКультурам, Отказ, Заголовок)
	
	СтруктураПолей 			= Новый Структура;
	СтруктураПростыхПолей 	= Новый Структура;
	СтруктураСложныхПолей 	= Новый Структура;
	
	СтруктураПолей.Вставить("Номенклатура",         "Номенклатура");
	СтруктураПолей.Вставить("НоменклатурнаяГруппа", "Номенклатура.НоменклатурнаяГруппа");
	СтруктураПолей.Вставить("Услуга",               "Номенклатура.Услуга");
	СтруктураПолей.Вставить("Организация",          "Ссылка.Организация");
	СтруктураПолей.Вставить("Контрагент",           "Ссылка.Владелец");	
	СтруктураПолей.Вставить("Владелец",             "Ссылка.Владелец");	
	СтруктураПолей.Вставить("ДоговорКонтрагента",   "Ссылка.ДоговорКонтрагента");	
	СтруктураПолей.Вставить("Склад",                "Ссылка.Склад");
	СтруктураПолей.Вставить("ВидХранения",          "Ссылка.ВидХранения");
	СтруктураПолей.Вставить("Урожай",               "Урожай");	
	СтруктураПолей.Вставить("Количество",           "Вес");
	СтруктураПолей.Вставить("ФизическийВес",        "Вес");
	СтруктураПолей.Вставить("ЗачетныйВес",          "Вес");
	СтруктураПолей.Вставить("Дата",                 "Ссылка.Дата");	
	СтруктураПолей.Вставить("Ссылка",               "Ссылка");
	
	// Для бухгалтерии
	СтруктураПростыхПолей.Вставить("ВидДокумента", СтруктураШапкиДокумента.ВидДокумента);
	
	// !!!!!
	РезультатЗапросаПоКультурам = ИНАГРО_Элеватор.СформироватьТаблицуТоваровПоШапкеДокумента(ЭтотОбъект, СтруктураПолей, СтруктураПростыхПолей, СтруктураСложныхПолей);
	//РезультатЗапросаПоКультурам = ОбщегоНазначенияРед12.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, СтруктураПолей, СтруктураПростыхПолей, СтруктураСложныхПолей);

	
	ТаблицаПоКультурам = РезультатЗапросаПоКультурам.Выгрузить();
	
КонецПроцедуры                                               

#КонецОбласти

#Область СлужебныеПроцедурыИФункции	

Процедура ЗаполнитьПоДокументуОснованию(Основание, НоменклатураПриВыбореПриказа = Неопределено) Экспорт
	
	Если ТипЗнч(Основание.Ссылка) = Тип("ДокументСсылка.ИНАГРО_ПриказНаВывоз") Тогда		
		
		ПриказНаВывоз      = Основание.Ссылка;
		Организация        = Основание.Организация;
		Владелец           = Основание.Владелец;
		ДоговорКонтрагента = Основание.ДоговорКонтрагента;
		
		Если НоменклатураПриВыбореПриказа <> Неопределено Тогда
			Номенклатура           = НоменклатураПриВыбореПриказа;
		Иначе
			Номенклатура           = Основание.Номенклатура;
		КонецЕсли;
		
		Если ТипЗнч(Основание) = Тип("Структура") Тогда
			
			Основание.Свойство("ЛабораторныйАнализ", ЛабораторныйАнализ);
			Основание.Свойство("НомерАнализа",       НомерАнализа);
			Основание.Свойство("Влажность",          Влажность);
			Основание.Свойство("СорнаяПримесь",      СорнаяПримесь);
			Основание.Свойство("ЗерноваяПримесь",    ЗерноваяПримесь);

		Иначе
			СтрокаТабличнойЧасти = Основание.Культуры.Найти(Номенклатура, "Номенклатура");
						
				ЛабораторныйАнализ = СтрокаТабличнойЧасти.ЛабораторныйАнализ;
				
				Если ЗначениеЗаполнено(ЛабораторныйАнализ) Тогда
					НомерАнализа    = СтрокаТабличнойЧасти.НомерАнализа;
					Влажность       = СтрокаТабличнойЧасти.Влажность;
					СорнаяПримесь   = СтрокаТабличнойЧасти.СорнаяПримесь;							
					ЗерноваяПримесь = СтрокаТабличнойЧасти.ЗерноваяПримесь;
				КонецЕсли;				
			
		КонецЕсли;	
	
		Склад              = Основание.Склад;		
		МестоХранения      = Основание.МестоХранения;				
		Урожай             = Основание.Урожай;		
		ВидХранения        = Основание.ВидХранения;		
		Комментарий        = Основание.Комментарий;
	
	КонецЕсли;	
			
КонецПроцедуры

#КонецОбласти

#КонецЕсли