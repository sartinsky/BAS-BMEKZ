#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА


// Процедура определяет возможный вид корректировки налогового кредита, по переданным данным
//
// Параметры
//  Данные  – Строка табличной части, структура, строка таблицы. Должна содержать реквизиты (колонки):
//  			НалоговоеНазначение, НалоговоеНазначениеНовое
//
// Возвращаемое значение:
//   ПеречислениеСсылка.ВидыКорректировокНалоговогоКредита  - вид корректировки. Если неопределен - пустая ссылка.
//
Функция ОпределитьВидКорректировкиНК(Данные) Экспорт
	
	Если    НЕ ЗначениеЗаполнено(Данные.НалоговоеНазначение)
		ИЛИ НЕ ЗначениеЗаполнено(Данные.НалоговоеНазначениеНовое) Тогда 
		
		Возврат  Перечисления.ВидыКорректировокНалоговогоКредита.ПустаяСсылка();
		
	КонецЕсли; 
	
	НалоговыйКредитВход  = Данные.НалоговоеНазначение = Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_Пропорционально ИЛИ УчетНДС.ЕстьПравоНаНалоговыйКредит(Данные.НалоговоеНазначение);
	НалоговыйКредитВыход = Данные.НалоговоеНазначениеНовое = Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_Пропорционально ИЛИ УчетНДС.ЕстьПравоНаНалоговыйКредит(Данные.НалоговоеНазначениеНовое);
	
	Если НалоговыйКредитВход = НалоговыйКредитВыход Тогда
		
		Возврат Перечисления.ВидыКорректировокНалоговогоКредита.НетКорректировок;
		
	ИначеЕсли НалоговыйКредитВход И НЕ НалоговыйКредитВыход Тогда
		
		Возврат Перечисления.ВидыКорректировокНалоговогоКредита.ПотеряПраваНаНалоговыйКредит;
		
	Иначе
		
		Возврат Перечисления.ВидыКорректировокНалоговогоКредита.ВосстановлениеПраваНаНалоговыйКредит;
		
	КонецЕсли;
	
КонецФункции

//////////////////////////////////////////////////////////////////////////////////
//// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТоварам - результат запроса по табличной части "Товары",
//  СтруктураШапкиДокумента   - структура, содержащая рексвизиты шапки документа и результаты запроса по шапке
//
// Возвращаемое значение:
//  Сформированная таблиица значений.
//
Функция ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента)
	
	ТаблицаТоваров = РезультатЗапросаПоТоварам.Выгрузить();
	
	ТаблицаТоваров.Колонки.Добавить("ВидКорректировкиНалоговогоКредита",Новый ОписаниеТипов("ПеречислениеСсылка.ВидыКорректировокНалоговогоКредита"));
	ТаблицаТоваров.Колонки.Добавить("БазаНДС", 							ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповЧисла(15,2));
	
	Для каждого СтрокаТаблицы Из ТаблицаТоваров Цикл
		
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.СтавкаНДС) Тогда
			СтрокаТаблицы.СтавкаНДС = Перечисления.СтавкиНДС.НДС20;
		КонецЕсли;
		
		СтрокаТаблицы.ВидКорректировкиНалоговогоКредита = ОпределитьВидКорректировкиНК(СтрокаТаблицы);
		СтрокаТаблицы.БазаНДС  = СтрокаТаблицы.НДС*100/УчетНДС.ПолучитьСтавкуНДС(СтрокаТаблицы.СтавкаНДС);
	КонецЦикла;
	
	Возврат ТаблицаТоваров;
	
КонецФункции // ПодготовитьТаблицуТоваров()



Процедура ПроверитьВозможностьКорректировки(Таблица, ИмяТабличнойЧасти, Отказ, Заголовок)

	ПредставлениеТабличнойЧасти = Метаданные().ТабличныеЧасти[ИмяТабличнойЧасти].Представление();
	
	ПропорцНДС = Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_Пропорционально;
	ОблНДС	   = Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_Облагаемая;
	
	Для каждого СтрокаТЧ  Из Таблица Цикл
		
		СтрокаНачалаСообщенияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='В строке номер ""%1"": ';uk='У рядку номер ""%1"": '"), СокрЛП(СтрокаТЧ.НомерСтроки));
		СтрокаСообщения = НСтр("ru='Корректировка между указанными налоговыми назначениями не предусмотрена!';uk='Коригування між вказаними податковими призначеннями не передбачене!'");	
		
		ВыдаватьСообщение = Ложь;
		
		Если СтрокаТЧ.НалоговоеНазначениеНовое = ПропорцНДС Тогда
		
			ВыдаватьСообщение = Истина;
			
		ИначеЕсли СтрокаТЧ.НалоговоеНазначение      = ПропорцНДС 
			    И СтрокаТЧ.НалоговоеНазначениеНовое = ОблНДС Тогда
			
			ВыдаватьСообщение = Истина;
			
		КонецЕсли;
		
		
		Если ВыдаватьСообщение Тогда
			
			СтрокаСообщения = СтрокаНачалаСообщенияОбОшибке + СтрокаСообщения;
			Поле = ИмяТабличнойЧасти + "[" + Формат(СтрокаТЧ.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].НалоговоеНазначениеНовое";								
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения,ЭтотОбъект, Поле, "Объект",Отказ);
			
		КонецЕсли;
		
	КонецЦикла; 		

КонецПроцедуры

Процедура ПроверитьЗаполнениеМетодКорректировкиНалоговогоКредитаВТабличнойЧасти(Таблица, ИмяТабличнойЧасти, Отказ, Заголовок)
	
	ПредставлениеТабличнойЧасти = Метаданные().ТабличныеЧасти[ИмяТабличнойЧасти].Представление();
	
	Для каждого СтрокаТЧ  Из Таблица Цикл
		
		СтрокаНачалаСообщенияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru='В строке номер <%1>: ';uk='У рядку номер <%1>: '"),СокрЛП(СтрокаТЧ.НомерСтроки));
		
		СтрокаСообщения = НСтр("ru='Неверное значение метода корректировки налогового кредита (""Метод корректировки"")!';uk='Невірне значення методу коригування податкового кредиту (""Метод коригування"")!'");	
		
		Если 
			(  СтрокаТЧ.ВидКорректировкиНалоговогоКредита = Перечисления.ВидыКорректировокНалоговогоКредита.ПотеряПраваНаНалоговыйКредит
			И СтрокаТЧ.МетодКорректировкиНалоговогоКредита = Перечисления.МетодыКорректировкиНалоговогоКредита.НаНалоговыйКредит)	
			ИЛИ 
			(     СтрокаТЧ.ВидКорректировкиНалоговогоКредита = Перечисления.ВидыКорректировокНалоговогоКредита.НетКорректировок
			И НЕ СтрокаТЧ.МетодКорректировкиНалоговогоКредита = Перечисления.МетодыКорректировкиНалоговогоКредита.НеКорректировать)	 Тогда
			
			СтрокаСообщения = СтрокаНачалаСообщенияОбОшибке + СтрокаСообщения;
			Поле = "Товары[" + Формат(СтрокаТЧ.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].МетодКорректировкиНалоговогоКредита";								
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения,ЭтотОбъект, Поле, "Объект",Отказ);

		КонецЕсли;
		
	КонецЦикла; 
	
КонецПроцедуры 

// Проверяет правильность заполнения строк табличной части "Товары".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТоварам        - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  СтруктураШапкиДокумента - структура, содержащая рексвизиты шапки документа и результаты запроса по шапке
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок)
	
	ИмяТабличнойЧасти = "Товары";
	
	
	ПроверитьВозможностьКорректировки(ТаблицаПоТоварам, ИмяТабличнойЧасти, Отказ, Заголовок);
	
	Если НЕ Отказ Тогда
		ПроверитьЗаполнениеМетодКорректировкиНалоговогоКредитаВТабличнойЧасти(ТаблицаПоТоварам, ИмяТабличнойЧасти, Отказ, Заголовок);
	КонецЕсли;
	
	
КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиТовары()

Процедура ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоБиологическимАктивам, Отказ, Заголовок); // ИНАГРО ТаблицаПоБиологическимАктивам
	
	ДвиженияПоРегиструОжидаемыйИПодтвержденныйНДСПродаж(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, Отказ, Заголовок);
	
	ДвиженияПоПартиям(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, Отказ, Заголовок);	
		
	ПроводкиПоНДС(СтруктураШапкиДокумента, ТаблицаПоТоварам, Отказ, Заголовок);
	
	// ИНАГРО++
	ДвиженияПоРегиструОжидаемыйИПодтвержденныйНДСПродаж(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоБиологическимАктивам, Отказ, Заголовок);
	
	ДвиженияПоПартиям_БА(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоБиологическимАктивам, Отказ, Заголовок);
	
	ПроводкиПоНДС(СтруктураШапкиДокумента, ТаблицаПоБиологическимАктивам, Отказ, Заголовок);
	// ИНАГРО--
	
КонецПроцедуры // ДвиженияПоРегистрам()

Процедура ДвиженияПоРегиструОжидаемыйИПодтвержденныйНДСПродаж(РежимПроведения, СтруктураШапкиДокумента, 
	ПроводкиПоТоварам, Отказ, Заголовок)
	
	// для метода корректировки "На обязательства" отражаем в регистре НДСПРодажа, далее в кнге продаж
	// отразится документом НалоговаяНалкданая (Вид операции - Условная продажа)
	НаборДвижений = Движения.ОжидаемыйИПодтвержденныйНДСПродаж;
	
	// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
	ТаблицаДвиженийОжидаемыйИПодтвержденныйНДСПродаж = НаборДвижений.ВыгрузитьКолонки();
	
	ТаблицаКопия = ПроводкиПоТоварам.Скопировать();
	ТаблицаКопия.Колонки.Добавить("СобытиеНДС");
	
	// оставим только строки с методом корректировки "на обязательства" и ненулевой суммой обязательств
	Инд = 0;
	Пока Инд < ТаблицаКопия.Количество() Цикл
		СтрокаТаблицы = ТаблицаКопия[Инд];
		
		Если  НЕ СтрокаТаблицы.МетодКорректировкиНалоговогоКредита = Перечисления.МетодыКорректировкиНалоговогоКредита.НаНалоговыеОбязательства 
			ИЛИ СтрокаТаблицы.НДС = 0 Тогда
			
			ТаблицаКопия.Удалить(СтрокаТаблицы);
			
		Иначе
			
			Если СтрокаТаблицы.ВидКорректировкиНалоговогоКредита = Перечисления.ВидыКорректировокНалоговогоКредита.ВосстановлениеПраваНаНалоговыйКредит Тогда
				СтрокаТаблицы.СобытиеНДС = Перечисления.СобытияОжидаемыйИПодтвержденныйНДСПродаж.УсловнаяПродажаВозврат;
			Иначе	
			    СтрокаТаблицы.СобытиеНДС = Перечисления.СобытияОжидаемыйИПодтвержденныйНДСПродаж.УсловнаяПродажа;
			КонецЕсли;
			
			Инд = Инд + 1;
			
		КонецЕсли;
	КонецЦикла;
	
	ТаблицаКопия.Колонки.НДС.Имя 	= "СуммаНДС";
	ТаблицаКопия.Свернуть("СтавкаНДС, СобытиеНДС","СуммаНДС, БазаНДС");
	
	// Заполним таблицу движений.
	ОбщегоНазначенияБПВызовСервера.ЗагрузитьВТаблицуЗначений(ТаблицаКопия, ТаблицаДвиженийОжидаемыйИПодтвержденныйНДСПродаж);
	
	ТаблицаДвиженийОжидаемыйИПодтвержденныйНДСПродаж.ЗаполнитьЗначения(СтруктураШапкиДокумента.Организация			  , "Организация");
	ТаблицаДвиженийОжидаемыйИПодтвержденныйНДСПродаж.ЗаполнитьЗначения(Перечисления.КодыОперацийОжидаемыйИПодтвержденныйНДСПродаж.ОжидаемыйНДС, "КодОперации");
	
	Если ТаблицаДвиженийОжидаемыйИПодтвержденныйНДСПродаж.Количество()>0 Тогда
		
		НаборДвижений.мПериод            = СтруктураШапкиДокумента.Дата;
		НаборДвижений.мТаблицаДвижений   = ТаблицаДвиженийОжидаемыйИПодтвержденныйНДСПродаж;
		
		Если Не Отказ Тогда
			Движения.ОжидаемыйИПодтвержденныйНДСПродаж.ВыполнитьПриход();
		КонецЕсли;
		
	КонецЕсли; 
	
КонецПроцедуры

Процедура ПроводкиПоНДС(СтруктураШапкиДокумента, ПроводкиПоТоварам, Отказ, Заголовок)
	
	ПроводкиБУ = Движения.Хозрасчетный;	
	// Проводки по НДС
	
	// Суммы, по корректировкам налоговых обязательств (условная продажа)
	ТаблицаКопия = ПроводкиПоТоварам.Скопировать();
	
	ТаблицаКопия.Свернуть("ВидКорректировкиНалоговогоКредита, МетодКорректировкиНалоговогоКредита,НалоговоеНазначениеНовое","НДС");
	
	// оставим только строку с методом корректировки "на обязательства" и ненулевой суммой обязательств
	Инд = 0;
	Пока Инд < ТаблицаКопия.Количество() Цикл
		СтрокаТаблицы = ТаблицаКопия[Инд];
		
		Если  НЕ СтрокаТаблицы.МетодКорректировкиНалоговогоКредита = Перечисления.МетодыКорректировкиНалоговогоКредита.НаНалоговыеОбязательства 
			ИЛИ СтрокаТаблицы.НДС = 0 
			ИЛИ СтрокаТаблицы.ВидКорректировкиНалоговогоКредита = Перечисления.ВидыКорректировокНалоговогоКредита.ВосстановлениеПраваНаНалоговыйКредит
			Тогда
			
			ТаблицаКопия.Удалить(СтрокаТаблицы);
			
		Иначе
			
			Инд = Инд + 1;
			
		КонецЕсли;
	КонецЦикла;	
	
	Для каждого СтрокаТаблицы Из ТаблицаКопия Цикл
	
		Проводка = ПроводкиБУ.Добавить();
		
		Проводка.Период                     = СтруктураШапкиДокумента.Дата;
		Проводка.Активность                 = Истина;
		Проводка.Организация                = СтруктураШапкиДокумента.Организация;
		
		Проводка.Сумма                      = СтрокаТаблицы.НДС;
		
		Проводка.СчетДт						= СтруктураШапкиДокумента.СчетУчетаЗатрат;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1 , СтруктураШапкиДокумента.ЗатратыСубконто1);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2 , СтруктураШапкиДокумента.ЗатратыСубконто2);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3 , СтруктураШапкиДокумента.ЗатратыСубконто3);
		
		Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыльДо2015 Тогда
			Если СтрокаТаблицы.НалоговоеНазначениеНовое = Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяНеХозДеятельность  Тогда
				
				Проводка.НалоговоеНазначениеДт = Справочники.НалоговыеНазначенияАктивовИЗатрат.НКУ_НеХозДеятельность;
				
			Иначе	
				
				Проводка.НалоговоеНазначениеДт = СтруктураШапкиДокумента.НалоговоеНазначениеДоходовИЗатрат;
				Если НЕ СтруктураШапкиДокумента.НалоговоеНазначениеДоходовИЗатрат = Справочники.НалоговыеНазначенияАктивовИЗатрат.НКУ_НеХозДеятельность Тогда
					
					Проводка.СуммаНУДт =  СтрокаТаблицы.НДС;
				
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
		
		Проводка.СчетКт						= СтруктураШапкиДокумента.СчетУчетаНДС_НО;
		
		Проводка.Содержание					= НСтр("ru='Налоговые обязательства по НДС (условная продажа)';uk=""Податкові зобов'язання по ПДВ (умовний продаж)""",Локализация.КодЯзыкаИнформационнойБазы());
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДвиженияПоПартиям(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, Отказ, Заголовок)
	
	Если ТаблицаПоТоварам.Количество() = 0 Тогда
	    // движений не будет
		Возврат;	
	КонецЕсли; 
	
	МассивОрганизаций = Новый Массив();
	МассивОрганизаций.Добавить(СтруктураШапкиДокумента.Организация);
	
	МассивСкладов = Новый Массив();
	МассивСкладов.Добавить(СтруктураШапкиДокумента.Склад);
	
	МассивНоменкалтуры = ТаблицаПоТоварам.ВыгрузитьКолонку("Номенклатура");
	ОбщегоНазначенияБПВызовСервера.УдалитьПовторяющиесяЭлементыМассива(МассивНоменкалтуры);
	
	МассивСчетовУчетаБУ = ТаблицаПоТоварам.ВыгрузитьКолонку("СчетУчетаБУ");
	ОбщегоНазначенияБПВызовСервера.УдалитьПовторяющиесяЭлементыМассива(МассивСчетовУчетаБУ);
	
	МассивНалоговыхНазначений = ТаблицаПоТоварам.ВыгрузитьКолонку("НалоговоеНазначение");
	ОбщегоНазначенияБПВызовСервера.УдалитьПовторяющиесяЭлементыМассива(МассивНалоговыхНазначений);
	
	СтруктураПараметровПартий = Новый Структура;
	СтруктураПараметровПартий.Вставить("СпособОценкиБух", СтруктураШапкиДокумента.СпособОценкиМПЗБух);
	СтруктураПараметровПартий.Вставить("МоментКон", МоментВремени());
	СтруктураПараметровПартий.Вставить("ПроводитьДокументПоРазделуУчета", Истина); 
	СтруктураПараметровПартий.Вставить("Организация", Организация); 
	
	Если ОбщегоНазначенияБПВызовСервераПовтИсп.ИспользоватьУправляемыеБлокировки() Тогда
		
		

		
		ТаблицаПоТоварам.Индексы.Добавить("СчетУчетаБУ");
		ТаблицаСчетов = ТаблицаПоТоварам.Скопировать(, "СчетУчетаБУ");
		ТаблицаСчетов.Свернуть("СчетУчетаБУ");

		Для Каждого СтрокаСчета Из ТаблицаСчетов Цикл
			
			ОтборПоСчету = Новый Структура("СчетУчетаБУ", СтрокаСчета.СчетУчетаБУ);
			ТаблицаСписанияПоСчету = ТаблицаПоТоварам.Скопировать(ОтборПоСчету, "Номенклатура");
				
			СтруктураПараметровБлокировки = Новый Структура("ТипТаблицы, ИмяТаблицы", "РегистрБухгалтерии", "Хозрасчетный");
			СтруктураПараметровБлокировки.Вставить("ИсточникДанных", ТаблицаСписанияПоСчету);
			
			ЗначенияБлокировки = Новый Соответствие;
			ЗначенияБлокировки.Вставить("Период", Новый Диапазон(, Дата)); 
			ЗначенияБлокировки.Вставить("Счет", СтрокаСчета.СчетУчетаБУ);
			ЗначенияБлокировки.Вставить("Организация", СтруктураШапкиДокумента.Организация); 
			
			СвойстваСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(СтрокаСчета.СчетУчетаБУ);
				
			ВидСубконтоНоменклатура = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура;
			ВидСубконтоСклады = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады;
			
			ЕстьНоменклатураНаСчете = (СвойстваСчета.ВидСубконто1 = ВидСубконтоНоменклатура)
				ИЛИ (СвойстваСчета.ВидСубконто2 = ВидСубконтоНоменклатура)
				ИЛИ (СвойстваСчета.ВидСубконто3 = ВидСубконтоНоменклатура);
				
			ЕстьСкладыНаСчете = (СвойстваСчета.ВидСубконто1 = ВидСубконтоСклады)
				ИЛИ (СвойстваСчета.ВидСубконто2 = ВидСубконтоСклады)
				ИЛИ (СвойстваСчета.ВидСубконто3 = ВидСубконтоСклады);
				
			Если ЕстьСкладыНаСчете Тогда
				ЗначенияБлокировки.Вставить(ВидСубконтоСклады, СтруктураШапкиДокумента.Склад); 
			КонецЕсли;
				
			ОписаниеИсточника = Новый Соответствие;
							
			Если ЕстьНоменклатураНаСчете Тогда
				ОписаниеИсточника.Вставить(ВидСубконтоНоменклатура, "Номенклатура");
			КонецЕсли;
			
			ОбщегоНазначенияБПВызовСервера.УстановитьУправляемуюБлокировку(СтруктураПараметровБлокировки, ЗначенияБлокировки, ОписаниеИсточника);
			
		КонецЦикла;	

		
	КонецЕсли;	
	
	ПартииНаСкладахБУ = УправлениеЗапасамиПартионныйУчет.ПолучитьТаблицуПартийНаСкладах(СтруктураПараметровПартий, "Бух", МассивОрганизаций, МассивНалоговыхНазначений, МассивСчетовУчетаБУ, МассивНоменкалтуры, МассивСкладов,,,);
	
	ПроводкиБУ = Движения.Хозрасчетный;
	
	Для каждого СтрокаТаблицы Из ТаблицаПоТоварам Цикл
		
		МассивСтрокВсеПартииБУ = ПартииНаСкладахБУ.Строки.Найти(СтрокаТаблицы.Номенклатура, "Номенклатура");
		
		Если НЕ МассивСтрокВсеПартииБУ = Неопределено Тогда
			Отбор = Новый Структура();
			Отбор.Вставить("СчетУчета", СтрокаТаблицы.СчетУчетаБУ);
			Отбор.Вставить("НалоговоеНазначение", СтрокаТаблицы.НалоговоеНазначение);
			Если СтруктураШапкиДокумента.ВедетсяПартионныйУчетБУ Тогда
				Отбор.Вставить("ДокументОприходования", СтрокаТаблицы.ДокументОприходования);
			КонецЕсли;
			МассивИскомаяПартияБУ = МассивСтрокВсеПартииБУ.Строки.НайтиСтроки(Отбор);
		Иначе	
			МассивИскомаяПартияБУ = Новый Массив();
		КонецЕсли;
		
		КоличествоНеобходимоСписать = СтрокаТаблицы.Количество;
		КоличествоОсталосьСписать = КоличествоНеобходимоСписать;
		
		Для Каждого СтрокаТаблицыПартий Из МассивИскомаяПартияБУ Цикл
			
			Если КоличествоОсталосьСписать <= 0 Тогда 
				Прервать;
			КонецЕсли;
			
			Если СтрокаТаблицыПартий.Количество <= 0 Тогда 
				Продолжить;
			КонецЕсли;
			
			СписываемКоличество = Мин(КоличествоОсталосьСписать, СтрокаТаблицыПартий.Количество);
			
			Если СписываемКоличество = СтрокаТаблицыПартий.Количество Тогда
				
				СписываемаяСумма   = СтрокаТаблицыПартий.Стоимость;
				СписываемаяСуммаНУ = СтрокаТаблицыПартий.СтоимостьНУ;
				
			    Коэфф = 1;
				
			Иначе	
				
				Коэфф =  СписываемКоличество / СтрокаТаблицыПартий.Количество;
				
				СписываемаяСумма   = Окр(СтрокаТаблицыПартий.Стоимость   * Коэфф, 2);
				СписываемаяСуммаНУ = Окр(СтрокаТаблицыПартий.СтоимостьНУ * Коэфф, 2);
				
			КонецЕсли;
			
			// проводка по изменению налогового назначения запаса
			Проводка = ПроводкиБУ.Добавить();
			Проводка.Активность = Истина;
			Проводка.Организация = СтруктураШапкиДокумента.Организация;
			Проводка.Период = СтруктураШапкиДокумента.Дата;
			
			Проводка.Сумма = СписываемаяСумма;
			
			Проводка.КоличествоДТ = СписываемКоличество;
			Проводка.КоличествоКТ = СписываемКоличество;			
			
			Проводка.СчетДт = СтрокаТаблицыПартий.СчетУчета;
			Проводка.СчетКт = СтрокаТаблицыПартий.СчетУчета;
			
			Если СтруктураШапкиДокумента.ВедетсяПартионныйУчетБУ Тогда
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт,"Партии",СтрокаТаблицыПартий.ДокументОприходования);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт,"Партии",СтрокаТаблицыПартий.ДокументОприходования);
			КонецЕсли;
			
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт,"Склады",СтруктураШапкиДокумента.Склад);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт,"Склады",СтруктураШапкиДокумента.Склад);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт,"Номенклатура",СтрокаТаблицы.Номенклатура);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт,"Номенклатура",СтрокаТаблицы.Номенклатура);
			
			Проводка.НалоговоеНазначениеДт = СтрокаТаблицы.НалоговоеНазначениеНовое;
			Проводка.НалоговоеНазначениеКт = СтрокаТаблицы.НалоговоеНазначение;
			
			Если НЕ Проводка.НалоговоеНазначениеДт = Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяНеХозДеятельность Тогда
				Проводка.СуммаНУДт = СписываемаяСуммаНУ;
				Если  СтрокаТаблицы.НалоговоеНазначение = Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяНеХозДеятельность Тогда
					// восстановим сумму НУ - она указана руками в документе.
					Проводка.СуммаНУДт = СтрокаТаблицы.СуммаНУ;	
				КонецЕсли;
			КонецЕсли;
			
			Проводка.СуммаНУКт = СписываемаяСуммаНУ;
			
			// проводки по корректировке НДС
			Если СтрокаТаблицы.МетодКорректировкиНалоговогоКредита = Перечисления.МетодыКорректировкиНалоговогоКредита.НаНалоговыеОбязательства Тогда
				
				Если СтрокаТаблицы.ВидКорректировкиНалоговогоКредита = Перечисления.ВидыКорректировокНалоговогоКредита.ВосстановлениеПраваНаНалоговыйКредит Тогда
				    // сторно ("Возврат") условной продажи
					
					//Бух учет  - переоцениваем партию на сумму НДС
					СуммаНДС = СписываемКоличество / КоличествоНеобходимоСписать * СтрокаТаблицы.НДС;
					
					Проводка = ПроводкиБУ.Добавить();
					Проводка.Активность = Истина;
					Проводка.Организация = СтруктураШапкиДокумента.Организация;
					Проводка.Период = СтруктураШапкиДокумента.Дата;
					
					Проводка.Сумма = - СуммаНДС;
					
					Проводка.СчетДт = СтрокаТаблицыПартий.СчетУчета;
					Если СтруктураШапкиДокумента.ВедетсяПартионныйУчетБУ Тогда
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт,"Партии",СтрокаТаблицыПартий.ДокументОприходования);
					КонецЕсли;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт,"Склады",СтруктураШапкиДокумента.Склад);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт,"Номенклатура",СтрокаТаблицы.Номенклатура);
					
					Проводка.НалоговоеНазначениеДт = СтрокаТаблицы.НалоговоеНазначениеНовое; 
					Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыльДо2015 Тогда
						Проводка.СуммаНУДт = СуммаНДС;
					КонецЕсли;
					
					Проводка.СчетКт = СтруктураШапкиДокумента.СчетУчетаНДС_НО;
					
				Иначе	
					// Проводки по условной продаже  будут сделаны в процедуре ПроводкиПоНДС();
				КонецЕсли;
				
			ИначеЕсли СтрокаТаблицы.МетодКорректировкиНалоговогоКредита = Перечисления.МетодыКорректировкиНалоговогоКредита.НаНалоговыйКредит Тогда
				
				//Бух учет  - переоцениваем партию на сумму НДС
				СуммаНДС = СписываемКоличество / КоличествоНеобходимоСписать * СтрокаТаблицы.НДС;
				
				Проводка = ПроводкиБУ.Добавить();
				Проводка.Активность = Истина;
				Проводка.Организация = СтруктураШапкиДокумента.Организация;
				Проводка.Период = СтруктураШапкиДокумента.Дата;
				
				Проводка.Сумма = СуммаНДС;
				
				Проводка.СчетКт = СтрокаТаблицыПартий.СчетУчета;
				Если СтруктураШапкиДокумента.ВедетсяПартионныйУчетБУ Тогда
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт,"Партии",СтрокаТаблицыПартий.ДокументОприходования);
				КонецЕсли;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт,"Склады",СтруктураШапкиДокумента.Склад);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт,"Номенклатура",СтрокаТаблицы.Номенклатура);
				
				Проводка.НалоговоеНазначениеКт = СтрокаТаблицы.НалоговоеНазначениеНовое; 
				Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыльДо2015 Тогда
					Проводка.СуммаНУКт = СуммаНДС;
				КонецЕсли;
				
				Проводка.СчетДт = СтруктураШапкиДокумента.СчетУчетаКорректировкиНДСКредит;
				
			КонецЕсли;
			
			СтрокаТаблицыПартий.Количество = СтрокаТаблицыПартий.Количество   - СписываемКоличество;
			СтрокаТаблицыПартий.Стоимость   = СтрокаТаблицыПартий.Стоимость   - СписываемаяСумма;
			СтрокаТаблицыПартий.СтоимостьНУ = СтрокаТаблицыПартий.СтоимостьНУ - СписываемаяСуммаНУ;
			
			КоличествоОсталосьСписать = КоличествоОсталосьСписать - СписываемКоличество;
			
		КонецЦикла;
		
		Если КоличествоОсталосьСписать >0 Тогда
			
			СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Номер строки: %1. Не хватает %2 %3 товара %4, счет учета %5, налоговое назначение (НДС): %6';uk='Номер рядка: %1 Не вистачає %2 %3 товари %4, рахунок %5 , податкове призначення (ПДВ): %6'"), СтрокаТаблицы.НомерСтроки, КоличествоОсталосьСписать, СтрокаТаблицы.Номенклатура.БазоваяЕдиницаИзмерения, СтрокаТаблицы.Номенклатура, СтрокаТаблицы.СчетУчетаБУ, СтрокаТаблицы.НалоговоеНазначение);
			Поле = "Товары[" + Формат(СтрокаТаблицы.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].Количество";								
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения,ЭтотОбъект, Поле, "Объект");

			Отказ = Истина;
		КонецЕсли;
		
	КонецЦикла; // Проводки по товарам
	
КонецПроцедуры

// Процедура определяет параметры регл. учетной политики
//
Процедура ПодготовитьПараметрыУчетнойПолитики(СтруктураШапкиДокумента, Отказ, Заголовок)
	
	СтруктураШапкиДокумента.Вставить("ЕстьНалогНаПрибыльДо2015"       , УчетнаяПолитика.ПлательщикНалогаНаПрибыльДо2015(Организация,Дата));
	СтруктураШапкиДокумента.Вставить("ЕстьНДС"                        , УчетнаяПолитика.ПлательщикНДС(Организация,Дата));
		
	Если НЕ Отказ Тогда
		СтруктураШапкиДокумента.Вставить("СпособОценкиМПЗБух"             , УчетнаяПолитика.СпособОценкиМПЗ(Организация,Дата));
		СтруктураШапкиДокумента.Вставить("СпособОценкиТоваровВРознице"	  , УчетнаяПолитика.СпособОценкиТоваровВРознице(Организация,Дата));
		СтруктураШапкиДокумента.Вставить("ВедетсяПартионныйУчетБУ"		  , УчетнаяПолитика.СпособОценкиМПЗ(Организация, Дата) <> Перечисления.СпособыОценки.ПоСредней);
	КонецЕсли; 
	
КонецПроцедуры // ПодготовитьПараметрыУчетнойПолитики

// Процедура формирует структуру шапки документа и дополнительных полей.
//
Процедура ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента) Экспорт
	

	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента = ОбщегоНазначенияРед12.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	
	СтруктураШапкиДокумента.Вставить("ТипСклада",ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Склад, "ТипСклада"));
	
	
	
КонецПроцедуры // ПодготовитьСтруктуруШапкиДокумента()

// Процедура формирует таблицы документа.
//
Процедура ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоБиологическимАктивам, Отказ, Заголовок) Экспорт // ИНАГРО ТаблицаПоБиологическимАктивам
	
	// Получим необходимые данные для проведения и проверки заполенения данные по табличной части "Товары".
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаТовары", Товары.Выгрузить());
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаТовары.Номенклатура,
	|	ТаблицаТовары.НомерСтроки,
	|	ТаблицаТовары.ДокументОприходования,
	|	ТаблицаТовары.Количество,
	|	ТаблицаТовары.Сумма,
	|	ТаблицаТовары.Коэффициент,
	|	ТаблицаТовары.СуммаНДС КАК НДС,
	|	ТаблицаТовары.НалоговоеНазначение,
	|	ТаблицаТовары.НалоговоеНазначениеНовое,
	|	ТаблицаТовары.МетодКорректировкиНалоговогоКредита,
	|	ТаблицаТовары.СчетУчетаБУ,
	|	ТаблицаТовары.СтавкаНДС,
	|	ТаблицаТовары.СуммаНУ
	|ПОМЕСТИТЬ ВТ_ТаблицаТовары
	|ИЗ
	|	&ТаблицаТовары КАК ТаблицаТовары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ТаблицаТовары.Номенклатура,
	|	ВТ_ТаблицаТовары.НомерСтроки,
	|	ВТ_ТаблицаТовары.ДокументОприходования,
	|	ВТ_ТаблицаТовары.Количество * ВТ_ТаблицаТовары.Коэффициент КАК Количество,
	|	ВТ_ТаблицаТовары.Сумма,
	|	ВТ_ТаблицаТовары.Номенклатура.Услуга КАК Услуга,
	|	ВТ_ТаблицаТовары.НДС,
	|	ВТ_ТаблицаТовары.НалоговоеНазначение,
	|	ВТ_ТаблицаТовары.НалоговоеНазначениеНовое,
	|	ВТ_ТаблицаТовары.МетодКорректировкиНалоговогоКредита,
	|	ВТ_ТаблицаТовары.СчетУчетаБУ,
	|	ВТ_ТаблицаТовары.СуммаНУ,
	|	ВТ_ТаблицаТовары.СтавкаНДС
	|ИЗ
	|	ВТ_ТаблицаТовары КАК ВТ_ТаблицаТовары";
	
	РезультатЗапросаПоТоварам = Запрос.Выполнить();

	// Подготовим таблицы товаров для проведения.
	ТаблицаПоТоварам = ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента);
	
	// ИНАГРО++
	// Получим необходимые данные для проведения и проверки заполенения данные по табличной части "ИНАГРО_БА".
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаТовары", ИНАГРО_БА.Выгрузить());
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаТовары.Номенклатура,
	|	ТаблицаТовары.НомерСтроки,
	|	ТаблицаТовары.ДокументОприходования,
	|	ТаблицаТовары.Количество,
	|	ТаблицаТовары.Голов,
	|	ТаблицаТовары.Сумма,
	|	ТаблицаТовары.Коэффициент,
	|	ТаблицаТовары.СуммаНДС КАК НДС,
	|	ТаблицаТовары.НалоговоеНазначение,
	|	ТаблицаТовары.НалоговоеНазначениеНовое,
	|	ТаблицаТовары.МетодКорректировкиНалоговогоКредита,
	|	ТаблицаТовары.СчетУчетаБУ,
	|	ТаблицаТовары.СтавкаНДС,
	|	ТаблицаТовары.СуммаНУ
	|ПОМЕСТИТЬ ВТ_ТаблицаТовары
	|ИЗ
	|	&ТаблицаТовары КАК ТаблицаТовары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ТаблицаТовары.Номенклатура,
	|	ВТ_ТаблицаТовары.НомерСтроки,
	|	ВТ_ТаблицаТовары.ДокументОприходования,
	|	ВТ_ТаблицаТовары.Количество * ВТ_ТаблицаТовары.Коэффициент КАК Количество,
	|	ВТ_ТаблицаТовары.Голов,
	|	ВТ_ТаблицаТовары.Сумма,
	|	ВТ_ТаблицаТовары.НДС,
	|	ВТ_ТаблицаТовары.НалоговоеНазначение,
	|	ВТ_ТаблицаТовары.НалоговоеНазначениеНовое,
	|	ВТ_ТаблицаТовары.МетодКорректировкиНалоговогоКредита,
	|	ВТ_ТаблицаТовары.СчетУчетаБУ,
	|	ВТ_ТаблицаТовары.СуммаНУ,
	|	ВТ_ТаблицаТовары.СтавкаНДС
	|ИЗ
	|	ВТ_ТаблицаТовары КАК ВТ_ТаблицаТовары";
	
	РезультатЗапросаПоТоварам = Запрос.Выполнить();

	// Подготовим таблицы товаров для проведения.
	ТаблицаПоБиологическимАктивам = ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура - обработчик события "ОбработкаПроведения".
//
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	Перем Заголовок, СтруктураШапкиДокумента;
	Перем ТаблицаПоТоварам;
	Перем ТаблицаПоБиологическимАктивам; // ИНАГРО
	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначенияБПВызовСервера.ПредставлениеДокументаПриПроведении(Ссылка);
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКПроведению(ЭтотОбъект);
	Если РучнаяКорректировка Тогда
		Возврат;
	КонецЕсли;
	
	ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента);
	
	ПодготовитьПараметрыУчетнойПолитики(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоБиологическимАктивам, Отказ, Заголовок); // ИНАГРО ТаблицаПоБиологическимАктивам
	
	// Движения по документу
	Если Не Отказ Тогда
		ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоБиологическимАктивам, Отказ, Заголовок); // ИНАГРО ТаблицаПоБиологическимАктивам
	КонецЕсли;
	
	Движения.Хозрасчетный.ВыполнитьДействияПередЗаписьюДвижений();

	ПроведениеСервер.ПодготовитьНаборыЗаписейКЗаписиДвижений(ЭтотОбъект)
КонецПроцедуры // ОбработкаПроведения()

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКОтменеПроведения(ЭтотОбъект);
	Движения.Записать();
	
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	ЗаполнениеДокументов.Заполнить(ЭтотОбъект, ДанныеЗаполнения);
	
	//Заполним счет учета НДС по-умолчанию
	СчетУчетаНДС 		= ПланыСчетов.Хозрасчетный.РасчетыПоНДС;
	СчетУчетаНДС_НО 	= ПланыСчетов.Хозрасчетный.УсловнаяПродажа;
	СчетУчетаКорректировкиНДСКредит = ПланыСчетов.Хозрасчетный.КорректировкиНалоговогоКредита;
	НалоговоеНазначениеДоходовИЗатрат 	= Справочники.НалоговыеНазначенияАктивовИЗатрат.НКУ_ХозДеятельность;
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	Дата = НачалоДня(ОбщегоНазначенияБП.ПолучитьРабочуюДату());
	Ответственный = Пользователи.ТекущийПользователь();
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	Перем Заголовок, СтруктураШапкиДокумента;
	Перем ТаблицаПоТоварам;
	Перем ТаблицаПоБиологическимАктивам; //ИНАГРО
	
	МассивНепроверяемыхРеквизитов = Новый Массив;

	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначенияБПВызовСервера.ПредставлениеДокументаПриПроведении(Ссылка);
	
	ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента);
	
	ПодготовитьПараметрыУчетнойПолитики(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	// Проверим правильность заполнения шапки документа
	
	// Нельзя изменять налоговое назначение в НТТ с суммовым учетом
	Если НЕ СтруктураШапкиДокумента.ЕстьНДС Тогда
		ТекстСообщения = НСтр("ru='Организация не является плательщиком НДС. Документ предназначен для организаций - плательщиков НДС.';uk='Організація не є платником ПДВ! Документ призначений для організацій-платників ПДВ.'");
		ТекстСообщения = ОбщегоНазначенияБПКлиентСервер.ПолучитьТекстСообщения(, "Корректность",
		НСтр("ru='Организация';uk='Організація'"),,, ТекстСообщения);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект,
		"Организация", "Объект", Отказ);
		Возврат;
	КонецЕсли;
	
	ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоБиологическимАктивам, Отказ, Заголовок); // ИНАГРО ТаблицаПоБиологическимАктивам
	
	// Проверить заполнение ТЧ 
	ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок);
	
	ПроверитьЗаполнениеТабличнойЧастиИНАГРО_БА(ТаблицаПоБиологическимАктивам, СтруктураШапкиДокумента, Отказ, Заголовок);
	
	Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыльДо2015 Тогда
		Если ЗначениеЗаполнено(СчетУчетаЗатрат) Тогда
			Для НомСубконто = 1 По 3 Цикл
				Если СчетУчетаЗатрат.ВидыСубконто.Количество()<НомСубконто Тогда
					МассивНепроверяемыхРеквизитов.Добавить("ЗатратыСубконто" + НомСубконто);
					Продолжить;
				КонецЕсли;
				
				ВидСубконто = СчетУчетаЗатрат.ВидыСубконто[НомСубконто-1].ВидСубконто;
				Если НЕ (ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат
					 ИЛИ ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиДоходов
					 ИЛИ ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиНеоперационныхРасходов) Тогда
					 МассивНепроверяемыхРеквизитов.Добавить("ЗатратыСубконто" + НомСубконто);
				КонецЕсли;
			КонецЦикла;
		Иначе 
			МассивНепроверяемыхРеквизитов.Добавить("ЗатратыСубконто1");
			МассивНепроверяемыхРеквизитов.Добавить("ЗатратыСубконто2");
			МассивНепроверяемыхРеквизитов.Добавить("ЗатратыСубконто3");
		КонецЕсли;
	Иначе 
		МассивНепроверяемыхРеквизитов.Добавить("НалоговоеНазначениеДоходовИЗатрат");
		МассивНепроверяемыхРеквизитов.Добавить("СчетУчетаЗатрат");
		МассивНепроверяемыхРеквизитов.Добавить("ЗатратыСубконто1");
		МассивНепроверяемыхРеквизитов.Добавить("ЗатратыСубконто2");
		МассивНепроверяемыхРеквизитов.Добавить("ЗатратыСубконто3");
	КонецЕсли; 

	Если Товары.Количество() = 0 И ИНАГРО_БА.Количество() = 0 Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Склад");
	КонецЕсли;
	
	// Нельзя изменять налоговое назначение в НТТ с суммовым учетом
	Если  СтруктураШапкиДокумента.ТипСклада = Перечисления.ТипыСкладов.НеавтоматизированнаяТорговаяТочка
		И СтруктураШапкиДокумента.СпособОценкиТоваровВРознице = Перечисления.СпособыОценкиТоваровВРознице.ПоПродажнойСтоимости Тогда
		ТекстСообщения = НСтр("ru='Нельзя изменять налоговое назначение запасов в неавтоматизированной торговой точке 
|если применяется оценка товаров в рознице ""по продажным ценам!""';uk='Не можна змінювати податкове призначення запасів у неавтоматизованій торговельній точці 
|якщо застосовується оцінка товарів у роздробі ""за продажними цінами!""'");
		ТекстСообщения = ОбщегоНазначенияБПКлиентСервер.ПолучитьТекстСообщения(, "Корректность",
		НСтр("ru='Склад';uk='Склад'"),,, ТекстСообщения);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект,
		"Склад", "Объект", Отказ);
	КонецЕсли;
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
КонецПроцедуры

// Проверяет правильность заполнения строк табличной части "ИНАГРО_БА".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТоварам        - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  СтруктураШапкиДокумента - структура, содержащая рексвизиты шапки документа и результаты запроса по шапке
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиИНАГРО_БА(ТаблицаПоБиологическимАктивам, СтруктураШапкиДокумента, Отказ, Заголовок) // ИНАГРО
	
	ИмяТабличнойЧасти = "ИНАГРО_БА";	
	
	ПроверитьВозможностьКорректировки(ТаблицаПоБиологическимАктивам, ИмяТабличнойЧасти, Отказ, Заголовок);
	
	Если НЕ Отказ Тогда
		ПроверитьЗаполнениеМетодКорректировкиНалоговогоКредитаВТабличнойЧасти(ТаблицаПоБиологическимАктивам, ИмяТабличнойЧасти, Отказ, Заголовок);
	КонецЕсли; 	
	
КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиИНАГРО_БА()

Процедура ДвиженияПоПартиям_БА(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоБиологическимАктивам, Отказ, Заголовок) // ИНАГРО
	Перем мПартионныйУчетБА;
	
	Если ТаблицаПоБиологическимАктивам.Количество() = 0 Тогда
	    // движений не будет
		Возврат;	
	КонецЕсли; 
	
	//ЕстьПоголовныйУчет
	ЕстьПоголовныйУчет = ИНАГРО_ВидБА = 1;
	
	МассивОрганизаций = Новый Массив();
	МассивОрганизаций.Добавить(СтруктураШапкиДокумента.Организация);
	
	МассивСкладов = Новый Массив();
	МассивСкладов.Добавить(СтруктураШапкиДокумента.Склад);
	
	МассивНоменкалтуры = ТаблицаПоБиологическимАктивам.ВыгрузитьКолонку("Номенклатура");
	ОбщегоНазначенияБПВызовСервера.УдалитьПовторяющиесяЭлементыМассива(МассивНоменкалтуры);
	
	МассивСчетовУчетаБУ = ТаблицаПоБиологическимАктивам.ВыгрузитьКолонку("СчетУчетаБУ");
	ОбщегоНазначенияБПВызовСервера.УдалитьПовторяющиесяЭлементыМассива(МассивСчетовУчетаБУ);
	
	МассивНалоговыхНазначений = ТаблицаПоБиологическимАктивам.ВыгрузитьКолонку("НалоговоеНазначение");
	ОбщегоНазначенияБПВызовСервера.УдалитьПовторяющиесяЭлементыМассива(МассивНалоговыхНазначений);
	
	СтруктураПараметровПартий = Новый Структура;
	СтруктураПараметровПартий.Вставить("СпособОценкиБух",                 СтруктураШапкиДокумента.СпособОценкиМПЗБух);
	СтруктураПараметровПартий.Вставить("МоментКон",                       МоментВремени());
	СтруктураПараметровПартий.Вставить("ПроводитьДокументПоРазделуУчета", Истина); 
	СтруктураПараметровПартий.Вставить("Организация",                     Организация); 
	//СтруктураПараметровПартий.Вставить("УчетнаяПолитика",                 УправлениеЗапасамиПартионныйУчет.ПолучитьУчетнуюПолитику(СтруктураПараметровПартий.Организация, СтруктураПараметровПартий.МоментКон));	
	
	Если ОбщегоНазначенияБПВызовСервераПовтИсп.ИспользоватьУправляемыеБлокировки() Тогда
				
		ТаблицаПоБиологическимАктивам.Индексы.Добавить("СчетУчетаБУ");
		ТаблицаСчетов = ТаблицаПоБиологическимАктивам.Скопировать(, "СчетУчетаБУ");
		ТаблицаСчетов.Свернуть("СчетУчетаБУ");

		Для Каждого СтрокаСчета Из ТаблицаСчетов Цикл
			
			ОтборПоСчету = Новый Структура("СчетУчетаБУ", СтрокаСчета.СчетУчетаБУ);
			ТаблицаСписанияПоСчету = ТаблицаПоБиологическимАктивам.Скопировать(ОтборПоСчету, "Номенклатура");
				
			СтруктураПараметровБлокировки = Новый Структура("ТипТаблицы, ИмяТаблицы", "РегистрБухгалтерии", "Хозрасчетный");
			СтруктураПараметровБлокировки.Вставить("ИсточникДанных", ТаблицаСписанияПоСчету);
			
			ЗначенияБлокировки = Новый Соответствие;
			ЗначенияБлокировки.Вставить("Период", Новый Диапазон(, Дата)); 
			ЗначенияБлокировки.Вставить("Счет", СтрокаСчета.СчетУчетаБУ);
			ЗначенияБлокировки.Вставить("Организация", СтруктураШапкиДокумента.Организация); 
			
			СвойстваСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(СтрокаСчета.СчетУчетаБУ);
				
			ВидСубконтоНоменклатура = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура;
			ВидСубконтоСклады = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады;
			
			ЕстьНоменклатураНаСчете = (СвойстваСчета.ВидСубконто1 = ВидСубконтоНоменклатура)
				ИЛИ (СвойстваСчета.ВидСубконто2 = ВидСубконтоНоменклатура)
				ИЛИ (СвойстваСчета.ВидСубконто3 = ВидСубконтоНоменклатура);
				
			ЕстьСкладыНаСчете = (СвойстваСчета.ВидСубконто1 = ВидСубконтоСклады)
				ИЛИ (СвойстваСчета.ВидСубконто2 = ВидСубконтоСклады)
				ИЛИ (СвойстваСчета.ВидСубконто3 = ВидСубконтоСклады);
				
			Если ЕстьСкладыНаСчете Тогда
				ЗначенияБлокировки.Вставить(ВидСубконтоСклады, СтруктураШапкиДокумента.Склад); 
			КонецЕсли;
				
			ОписаниеИсточника = Новый Соответствие;
							
			Если ЕстьНоменклатураНаСчете Тогда
				ОписаниеИсточника.Вставить(ВидСубконтоНоменклатура, "Номенклатура");
			КонецЕсли;
			
			ОбщегоНазначенияБПВызовСервера.УстановитьУправляемуюБлокировку(СтруктураПараметровБлокировки, ЗначенияБлокировки, ОписаниеИсточника);
			
		КонецЦикла;	
		
	КонецЕсли; 	
		
	//Если ИНАГРО_ОбщийВызовСервераПовтИсп.ЕстьБСПУ() Тогда
		МодульИНАГРО_БиологическиеАктивы = ОбщегоНазначения.ОбщийМодуль("ИНАГРО_БиологическиеАктивы");
		ПартииНаСкладахБУ = МодульИНАГРО_БиологическиеАктивы.ПолучитьТаблицуПартийНаСкладах(СтруктураПараметровПартий, "Бух", МассивОрганизаций, МассивНалоговыхНазначений, МассивСчетовУчетаБУ, МассивНоменкалтуры, МассивСкладов,,,);
		
		СпособОценкиБА    = МодульИНАГРО_БиологическиеАктивы.СпособОценкиБА(Организация, НачалоМесяца(Дата)); 
		мПартионныйУчетБА = СпособОценкиБА = Перечисления.СпособыОценки.ФИФО ИЛИ СпособОценкиБА = Перечисления.СпособыОценки.ЛИФО;
		
	//Иначе
	//	ПартииНаСкладахБУ = УправлениеЗапасамиПартионныйУчет.ПолучитьТаблицуПартийНаСкладах(СтруктураПараметровПартий, "Бух", МассивОрганизаций, МассивНалоговыхНазначений, МассивСчетовУчетаБУ, МассивНоменкалтуры, МассивСкладов,,,);
	//КонецЕсли;
	
	ПроводкиБУ = Движения.Хозрасчетный;
	
	Для каждого СтрокаТаблицы Из ТаблицаПоБиологическимАктивам Цикл
		
		МассивСтрокВсеПартииБУ = ПартииНаСкладахБУ.Строки.Найти(СтрокаТаблицы.Номенклатура, "Номенклатура");
		
		Если НЕ МассивСтрокВсеПартииБУ = Неопределено Тогда
			Отбор = Новый Структура();
			Отбор.Вставить("СчетУчета", СтрокаТаблицы.СчетУчетаБУ);
			Отбор.Вставить("НалоговоеНазначение", СтрокаТаблицы.НалоговоеНазначение);
			//Если СтруктураШапкиДокумента.ВедетсяПартионныйУчетБУ Тогда
			Если мПартионныйУчетБА Тогда
				Отбор.Вставить("ДокументОприходования", СтрокаТаблицы.ДокументОприходования);
			КонецЕсли;
			МассивИскомаяПартияБУ = МассивСтрокВсеПартииБУ.Строки.НайтиСтроки(Отбор);
		Иначе	
			МассивИскомаяПартияБУ = Новый Массив();
		КонецЕсли;
		
		КоличествоНеобходимоСписать = СтрокаТаблицы.Количество;
		КоличествоОсталосьСписать = КоличествоНеобходимоСписать;
		
		Если ЕстьПоголовныйУчет Тогда
			ГоловОсталосьСписать = СтрокаТаблицы.Голов;
		Иначе
			ГоловОсталосьСписать = 0;
		КонецЕсли;
		
		Для Каждого СтрокаТаблицыПартий Из МассивИскомаяПартияБУ Цикл
			
			Если ЕстьПоголовныйУчет Тогда
				Если ГоловОсталосьСписать <= 0 и КоличествоОсталосьСписать <= 0 Тогда
					Прервать;
				КонецЕсли;
			Иначе
				Если КоличествоОсталосьСписать <= 0 Тогда 
					Прервать;
				КонецЕсли;
			КонецЕсли; 			
			
			Если СтрокаТаблицыПартий.Количество <= 0 Тогда 
				Продолжить;
			КонецЕсли;
			
			Если ЕстьПоголовныйУчет Тогда
				Если НЕ СтрокаТаблицыПартий.КоличествоГолов > 0 Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			СписываемКоличество = Мин(КоличествоОсталосьСписать, СтрокаТаблицыПартий.Количество);
			
			Если СписываемКоличество = СтрокаТаблицыПартий.Количество Тогда
				
				СписываемаяСумма   = СтрокаТаблицыПартий.Стоимость;
				СписываемаяСуммаНУ = СтрокаТаблицыПартий.СтоимостьНУ;
				
			    Коэфф = 1;
				
			Иначе	
				
				Коэфф =  СписываемКоличество / СтрокаТаблицыПартий.Количество;
				
				СписываемаяСумма   = Окр(СтрокаТаблицыПартий.Стоимость   * Коэфф, 2);
				СписываемаяСуммаНУ = Окр(СтрокаТаблицыПартий.СтоимостьНУ * Коэфф, 2);
				
			КонецЕсли;
			
			Если ЕстьПоголовныйУчет Тогда
				Если СтрокаТаблицыПартий.КоличествоГолов >= ГоловОсталосьСписать Тогда
					КоэффСписанияГолов = ГоловОсталосьСписать / СтрокаТаблицыПартий.КоличествоГолов;
				Иначе
					КоэффСписанияГолов = 1;
				КонецЕсли;
				Голов = Окр(СтрокаТаблицыПартий.КоличествоГолов * КоэффСписанияГолов, 0, 1);
				ГоловОсталосьСписать = ГоловОсталосьСписать - Голов;
			КонецЕсли;
			
			// проводка по изменению налогового назначения запаса
			Проводка = ПроводкиБУ.Добавить();
			Проводка.Активность = Истина;
			Проводка.Организация = СтруктураШапкиДокумента.Организация;
			Проводка.Период = СтруктураШапкиДокумента.Дата;
			
			Проводка.Сумма = СписываемаяСумма;
			
			Проводка.КоличествоДТ = СписываемКоличество;
			Проводка.КоличествоКТ = СписываемКоличество;			
			
			Проводка.СчетДт = СтрокаТаблицыПартий.СчетУчета;
			Проводка.СчетКт = СтрокаТаблицыПартий.СчетУчета;
			
			Если мПартионныйУчетБА Тогда
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт,"Партии",СтрокаТаблицыПартий.ДокументОприходования);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт,"Партии",СтрокаТаблицыПартий.ДокументОприходования);
			КонецЕсли;
			
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт,"Склады",СтруктураШапкиДокумента.Склад);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт,"Склады",СтруктураШапкиДокумента.Склад);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт,"БиологическиеАктивы",СтрокаТаблицы.Номенклатура);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт,"БиологическиеАктивы",СтрокаТаблицы.Номенклатура);
			
			Проводка.НалоговоеНазначениеДт = СтрокаТаблицы.НалоговоеНазначениеНовое;
			Проводка.НалоговоеНазначениеКт = СтрокаТаблицы.НалоговоеНазначение;
			
			Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыльДо2015 Тогда
			
				Если НЕ Проводка.НалоговоеНазначениеДт = Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяНеХозДеятельность Тогда
					Проводка.СуммаНУДт = СписываемаяСуммаНУ;
					Если  СтрокаТаблицы.НалоговоеНазначение = Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяНеХозДеятельность Тогда
						// восстановим сумму НУ - она указана руками в документе.
						Проводка.СуммаНУДт = СтрокаТаблицы.СуммаНУ;	
					КонецЕсли;
				КонецЕсли;
			
				Проводка.СуммаНУКт = СписываемаяСуммаНУ;
			
			КонецЕсли;
			
			//ЕстьПоголовныйУчет
			Если Проводка.СчетДт.Поштучный И ЕстьПоголовныйУчет Тогда
				Проводка.КоличествоГоловДт = Голов;
			КонецЕсли;
			Если Проводка.СчетКт.Поштучный И ЕстьПоголовныйУчет Тогда
				Проводка.КоличествоГоловКт = Голов;
			КонецЕсли; 			
			
			// проводки по корректировке НДС
			Если СтрокаТаблицы.МетодКорректировкиНалоговогоКредита = Перечисления.МетодыКорректировкиНалоговогоКредита.НаНалоговыеОбязательства Тогда
				
				Если СтрокаТаблицы.ВидКорректировкиНалоговогоКредита = Перечисления.ВидыКорректировокНалоговогоКредита.ВосстановлениеПраваНаНалоговыйКредит Тогда
				    // сторно ("Возврат") условной продажи
					
					//Бух учет  - переоцениваем партию на сумму НДС
					СуммаНДС = СписываемКоличество / КоличествоНеобходимоСписать * СтрокаТаблицы.НДС;
					
					Проводка = ПроводкиБУ.Добавить();
					Проводка.Активность = Истина;
					Проводка.Организация = СтруктураШапкиДокумента.Организация;
					Проводка.Период = СтруктураШапкиДокумента.Дата;
					
					Проводка.Сумма = - СуммаНДС;
					
					Проводка.СчетДт = СтрокаТаблицыПартий.СчетУчета;
					Если мПартионныйУчетБА Тогда
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт,"Партии",СтрокаТаблицыПартий.ДокументОприходования);
					КонецЕсли;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт,"Склады",СтруктураШапкиДокумента.Склад);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт,"БиологическиеАктивы",СтрокаТаблицы.Номенклатура);
					
					Проводка.НалоговоеНазначениеДт = СтрокаТаблицы.НалоговоеНазначениеНовое; 
					Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыльДо2015 Тогда
						Проводка.СуммаНУДт = СуммаНДС;
					КонецЕсли;
					
					Проводка.СчетКт = СтруктураШапкиДокумента.СчетУчетаНДС_НО;
					
				Иначе	
					// Проводки по условной продаже  будут сделаны в процедуре ПроводкиПоНДС();
				КонецЕсли;
				
			ИначеЕсли СтрокаТаблицы.МетодКорректировкиНалоговогоКредита = Перечисления.МетодыКорректировкиНалоговогоКредита.НаНалоговыйКредит Тогда
				
				//Бух учет  - переоцениваем партию на сумму НДС
				СуммаНДС = СписываемКоличество / КоличествоНеобходимоСписать * СтрокаТаблицы.НДС;
				
				Проводка = ПроводкиБУ.Добавить();
				Проводка.Активность = Истина;
				Проводка.Организация = СтруктураШапкиДокумента.Организация;
				Проводка.Период = СтруктураШапкиДокумента.Дата;
				
				Проводка.Сумма = СуммаНДС;
				
				Проводка.СчетКт = СтрокаТаблицыПартий.СчетУчета;
				Если мПартионныйУчетБА Тогда
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт,"Партии",СтрокаТаблицыПартий.ДокументОприходования);
				КонецЕсли;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт,"Склады",СтруктураШапкиДокумента.Склад);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт,"БиологическиеАктивы",СтрокаТаблицы.Номенклатура);
				
				Проводка.НалоговоеНазначениеКт = СтрокаТаблицы.НалоговоеНазначениеНовое; 
				Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыльДо2015 Тогда
					Проводка.СуммаНУКт = СуммаНДС;
				КонецЕсли;
				
				Проводка.СчетДт = СтруктураШапкиДокумента.СчетУчетаКорректировкиНДСКредит;
				
			КонецЕсли;
			
			СтрокаТаблицыПартий.Количество = СтрокаТаблицыПартий.Количество   - СписываемКоличество;
			СтрокаТаблицыПартий.Стоимость   = СтрокаТаблицыПартий.Стоимость   - СписываемаяСумма;
			СтрокаТаблицыПартий.СтоимостьНУ = СтрокаТаблицыПартий.СтоимостьНУ - СписываемаяСуммаНУ;
			//ЕстьПоголовныйУчет
			Если ЕстьПоголовныйУчет Тогда
				СтрокаТаблицыПартий.КоличествоГолов = СтрокаТаблицыПартий.КоличествоГолов - Голов;
			КонецЕсли;
			
			КоличествоОсталосьСписать = КоличествоОсталосьСписать - СписываемКоличество;
			
		КонецЦикла;
		
		Если КоличествоОсталосьСписать >0 Тогда
			
			ОбщегоНазначенияБПКлиентСервер.СообщитьОбОшибке(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Номер строки: %1. Не хватает %2 %3 товара %4, счет учета %5, налоговое назначение (НДС): %6';uk='Номер рядка: %1 Не вистачає %2 %3 товари %4, рахунок %5 , податкове призначення (ПДВ): %6'"), СтрокаТаблицы.НомерСтроки, КоличествоОсталосьСписать, СтрокаТаблицы.Номенклатура.БазоваяЕдиницаИзмерения, СтрокаТаблицы.Номенклатура, СтрокаТаблицы.СчетУчетаБУ, СтрокаТаблицы.НалоговоеНазначение), "");

			Отказ = Истина;
		КонецЕсли;
		
	КонецЦикла; // Проводки по товарам
	
КонецПроцедуры

#КонецЕсли