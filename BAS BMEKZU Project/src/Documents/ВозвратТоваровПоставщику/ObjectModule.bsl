#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

///////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ ПРОВЕДЕНИЯ
Перем мВалютаРегламентированногоУчета;
Перем мУчетВПродажныхЦенах;
Перем мРазделятьПоСтавкамНДС;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ
//

// Процедура выполняет заполнение табличной части по документу основанию.
// При заполнении копируется состав документа, количество заполняется минимальным из того,
//  что осталось на складе и того, что есть в строке документа-основания.
//
// Параметры:
//  ДокументОснование - ссылка на документ основание.
//
Процедура ЗаполнитьТоварыПоОснованию(ДокументОснование) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка",  ДокументОснование);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПоступлениеТоваровУслугТовары.Ссылка.ВалютаДокумента,
	|	ПоступлениеТоваровУслугТовары.Номенклатура,
	|	ПоступлениеТоваровУслугТовары.НомерСтроки КАК НомерСтроки,
	|	ПоступлениеТоваровУслугТовары.ЕдиницаИзмерения,
	|	ПоступлениеТоваровУслугТовары.Коэффициент,
	|	ПоступлениеТоваровУслугТовары.Количество,
	|	ПоступлениеТоваровУслугТовары.Цена,
	|	ПоступлениеТоваровУслугТовары.Сумма,
	|	ПоступлениеТоваровУслугТовары.СтавкаНДС,
	|	ПоступлениеТоваровУслугТовары.СуммаНДС,
	|	ПоступлениеТоваровУслугТовары.Ссылка.СуммаВключаетНДС,
	|	ПоступлениеТоваровУслугТовары.ЦенаВРознице,
	|	ПоступлениеТоваровУслугТовары.СуммаВРознице,
	|	ПоступлениеТоваровУслугТовары.СтавкаНДСВРознице,
	|	ПоступлениеТоваровУслугТовары.СчетУчетаБУ,
	|	ПоступлениеТоваровУслугТовары.НалоговоеНазначение
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг.Товары КАК ПоступлениеТоваровУслугТовары
	|ГДЕ
	|	ПоступлениеТоваровУслугТовары.Ссылка = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	Выборка = Запрос.Выполнить().Выбрать();

	ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();

	Курс         = ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, ВалютаРегламентированногоУчета);
	КурсОсн      = ЗаполнениеДокументов.КурсДокумента(ДокументОснование, ВалютаРегламентированногоУчета);
	Кратность    = ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, ВалютаРегламентированногоУчета);
	КратностьОсн = ЗаполнениеДокументов.КратностьДокумента(ДокументОснование, ВалютаРегламентированногоУчета);

	Пока Выборка.Следующий() Цикл

		СтрокаТабличнойЧасти = Товары.Добавить();

		СтрокаТабличнойЧасти.Номенклатура     = Выборка.Номенклатура;
		СтрокаТабличнойЧасти.Количество       = Выборка.Количество;
		СтрокаТабличнойЧасти.ЕдиницаИзмерения = Выборка.ЕдиницаИзмерения;
		СтрокаТабличнойЧасти.Коэффициент      = Выборка.Коэффициент;
		СтрокаТабличнойЧасти.СтавкаНДС        = Выборка.СтавкаНДС;
		СтрокаТабличнойЧасти.СуммаНДС         = Выборка.СуммаНДС;
		СтрокаТабличнойЧасти.Цена             = Выборка.Цена;
		СтрокаТабличнойЧасти.Сумма            = Выборка.Сумма;

		//Для НТТ в продажных ценах
		СтрокаТабличнойЧасти.ЦенаВРознице      = Выборка.ЦенаВРознице;
		СтрокаТабличнойЧасти.СуммаВРознице     = Выборка.СуммаВРознице;
		СтрокаТабличнойЧасти.СтавкаНДСВРознице = Выборка.СтавкаНДСВРознице;

		// Если валюта документа отличается от валюты основания, пересчитаем цену и суммы.
		Если ЗначениеЗаполнено(ЭтотОбъект.ВалютаДокумента)
				И НЕ (ЭтотОбъект.ВалютаДокумента = Выборка.ВалютаДокумента) Тогда

			Цена = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(
				СтрокаТабличнойЧасти.Цена,
				Выборка.ВалютаДокумента,
				ВалютаДокумента,
				КурсОсн, Курс,
				КратностьОсн, Кратность);

			СтрокаТабличнойЧасти.Цена = УчетНДСКлиентСервер.ПересчитатьЦенуПриИзмененииФлаговНалогов(
				Цена,
				Выборка.СуммаВключаетНДС,
				СуммаВключаетНДС,
				УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));

			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект.СуммаВключаетНДС);

		КонецЕсли;

		СтрокаТабличнойЧасти.СчетУчетаБУ         = Выборка.СчетУчетаБУ;
		СтрокаТабличнойЧасти.НалоговоеНазначение = Выборка.НалоговоеНазначение;

	КонецЦикла;

КонецПроцедуры

// Процедура выполняет заполнение табличной части по документу основанию.
// При заполнении копируется состав документа, количество заполняется минимальным из того,
//  что осталось на складе и того, что есть в строке документа-основания.
//
// Параметры:
//  ДокументОснование - ссылка на документ основание.
//
Процедура ЗаполнитьОборудованиеПоОснованию(ДокументОснование) Экспорт

	ОснованиеПоступление = (ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг"));

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ДокументОснование);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПоступлениеТоваровУслугОборудование.Ссылка.ВалютаДокумента,
	|	ПоступлениеТоваровУслугОборудование.Ссылка.СуммаВключаетНДС,
	|	ПоступлениеТоваровУслугОборудование.Номенклатура,
	|	ПоступлениеТоваровУслугОборудование.ЕдиницаИзмерения,
	|	ПоступлениеТоваровУслугОборудование.Коэффициент,
	|	ПоступлениеТоваровУслугОборудование.Количество,
	|	ПоступлениеТоваровУслугОборудование.Цена,
	|	ПоступлениеТоваровУслугОборудование.Сумма,
	|	ПоступлениеТоваровУслугОборудование.СуммаНДС,
	|	ПоступлениеТоваровУслугОборудование.СтавкаНДС,
	|	ПоступлениеТоваровУслугОборудование.СчетУчетаБУ,
	|	ПоступлениеТоваровУслугОборудование.НалоговоеНазначение,
	|	ПоступлениеТоваровУслугОборудование.НомерСтроки КАК НомерСтроки
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг.Оборудование КАК ПоступлениеТоваровУслугОборудование
	|ГДЕ
	|	ПоступлениеТоваровУслугОборудование.Ссылка = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	Выборка = Запрос.Выполнить().Выбрать();

	ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();

	Курс         = ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, ВалютаРегламентированногоУчета);
	КурсОсн      = ЗаполнениеДокументов.КурсДокумента(ДокументОснование, ВалютаРегламентированногоУчета);
	Кратность    = ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, ВалютаРегламентированногоУчета);
	КратностьОсн = ЗаполнениеДокументов.КратностьДокумента(ДокументОснование, ВалютаРегламентированногоУчета);

	Пока Выборка.Следующий() Цикл

		СтрокаТабличнойЧасти = Товары.Добавить();

		СтрокаТабличнойЧасти.Номенклатура     = Выборка.Номенклатура;
		СтрокаТабличнойЧасти.Количество       = Выборка.Количество;
		СтрокаТабличнойЧасти.ЕдиницаИзмерения = Выборка.ЕдиницаИзмерения;
		СтрокаТабличнойЧасти.Коэффициент      = Выборка.Коэффициент;
		СтрокаТабличнойЧасти.Цена             = Выборка.Цена;
		СтрокаТабличнойЧасти.Сумма            = Выборка.Сумма;
		СтрокаТабличнойЧасти.СуммаНДС         = Выборка.СуммаНДС;
		СтрокаТабличнойЧасти.СтавкаНДС        = Выборка.СтавкаНДС;
		СтрокаТабличнойЧасти.СчетУчетаБУ      = Выборка.СчетУчетаБУ;
		СтрокаТабличнойЧасти.НалоговоеНазначение = Выборка.НалоговоеНазначение;

		// Если валюта документа отличается от валюты основания, пересчитаем цену и суммы.
		Если ЗначениеЗаполнено(ЭтотОбъект.ВалютаДокумента)
			И НЕ (ЭтотОбъект.ВалютаДокумента = Выборка.ВалютаДокумента) Тогда

			Цена = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(
				СтрокаТабличнойЧасти.Цена,
				Выборка.ВалютаДокумента,
				ВалютаДокумента,
				КурсОсн, Курс,
				КратностьОсн, Кратность);

			СтрокаТабличнойЧасти.Цена = УчетНДСКлиентСервер.ПересчитатьЦенуПриИзмененииФлаговНалогов(
				Цена,
				Выборка.СуммаВключаетНДС,
				СуммаВключаетНДС,
				УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));

			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект.СуммаВключаетНДС);

		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

// Процедура выполняет заполнение возвратной тары по документу основанию.
// При заполнении копируется состав документа, количество заполняется минимальным из того,
//  что осталось на складе и того, что есть в строке документа-основания.
//
// Параметры:
//  ДокументОснование - ссылка на документ основание.
//
Процедура ЗаполнитьВозвратнуюТаруПоОснованию(ДокументОснование) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка",  ДокументОснование);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПоступлениеТоваровУслугВозвратнаяТара.Ссылка.ВалютаДокумента,
	|	ПоступлениеТоваровУслугВозвратнаяТара.Номенклатура,
	|	ПоступлениеТоваровУслугВозвратнаяТара.Количество,
	|	ПоступлениеТоваровУслугВозвратнаяТара.Цена,
	|	ПоступлениеТоваровУслугВозвратнаяТара.Сумма,
	|	ПоступлениеТоваровУслугВозвратнаяТара.СчетУчетаБУ,
	|	ПоступлениеТоваровУслугВозвратнаяТара.НалоговоеНазначение,
	|	ПоступлениеТоваровУслугВозвратнаяТара.НомерСтроки КАК НомерСтроки
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг.ВозвратнаяТара КАК ПоступлениеТоваровУслугВозвратнаяТара
	|ГДЕ
	|	ПоступлениеТоваровУслугВозвратнаяТара.Ссылка = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";

	Выборка = Запрос.Выполнить().Выбрать();

	ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();

	Курс         = ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, ВалютаРегламентированногоУчета);
	КурсОсн      = ЗаполнениеДокументов.КурсДокумента(ДокументОснование, ВалютаРегламентированногоУчета);
	Кратность    = ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, ВалютаРегламентированногоУчета);
	КратностьОсн = ЗаполнениеДокументов.КратностьДокумента(ДокументОснование, ВалютаРегламентированногоУчета);

	Пока Выборка.Следующий() Цикл

		СтрокаВозвратнойТары = ВозвратнаяТара.Добавить();

		СтрокаВозвратнойТары.Номенклатура = Выборка.Номенклатура;
		СтрокаВозвратнойТары.Количество   = Выборка.Количество;
		СтрокаВозвратнойТары.Цена         = Выборка.Цена;
		СтрокаВозвратнойТары.Сумма        = Выборка.Сумма;
		СтрокаВозвратнойТары.СчетУчетаБУ  = Выборка.СчетУчетаБУ;
		СтрокаВозвратнойТары.НалоговоеНазначение = Выборка.НалоговоеНазначение;

		// Если валюта документа отличается от валюты основания, пересчитаем цену и суммы.
		Если ЗначениеЗаполнено(ЭтотОбъект.ВалютаДокумента)
				И НЕ (ЭтотОбъект.ВалютаДокумента = Выборка.ВалютаДокумента) Тогда

			СтрокаВозвратнойТары.Цена = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(
				СтрокаВозвратнойТары.Цена,
				Выборка.ВалютаДокумента,
				ВалютаДокумента,
				КурсОсн, Курс,
				КратностьОсн, Кратность);

			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаВозвратнойТары);

		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

Процедура ЗаполнитьПоДокументуОснованию(ДанныеЗаполнения)

	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда

		// Заполним реквизиты из стандартного набора.
		ЗаполнениеДокументов.ЗаполнитьПоОснованию(ЭтотОбъект, ДанныеЗаполнения);

		// Заполним вид операции.
		ВидыОперацийПоступлениеТоваров       = Перечисления.ВидыОперацийПоступлениеТоваровУслуг;
		ВидыОперацийВозвратТоваровПоставщику = Перечисления.ВидыОперацийВозвратТоваровПоставщику;
		Если ДанныеЗаполнения.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Оборудование Тогда
			ВидОперации = ВидыОперацийВозвратТоваровПоставщику.Оборудование;
		ИначеЕсли ДанныеЗаполнения.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ВПереработку Тогда
			ВидОперации = ВидыОперацийВозвратТоваровПоставщику.ИзПереработки;
			СуммаВключаетНДС = Ложь;
		Иначе
			ВидОперации = ВидыОперацийВозвратТоваровПоставщику.ПокупкаКомиссия;
		КонецЕсли;

		Если ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоРасчетнымДокументам Тогда
			Сделка = УправлениеВзаиморасчетами.ОпределитьДокументРасчетовСКонтрагентом(ДанныеЗаполнения, ДанныеЗаполнения.Сделка);
		КонецЕсли;
		ДокументПоступления = ДанныеЗаполнения;

		Если ДанныеЗаполнения.Проведен Тогда
			// Заполним табличные части по поступлению Товаров.
			Если ВидОперации = Перечисления.ВидыОперацийВозвратТоваровПоставщику.Оборудование Тогда
				ЗаполнитьОборудованиеПоОснованию(ДанныеЗаполнения);
			Иначе
				ЗаполнитьТоварыПоОснованию(ДанныеЗаполнения);
			КонецЕсли;
			ЗаполнитьВозвратнуюТаруПоОснованию(ДанныеЗаполнения);
		КонецЕсли;
		
		Документы.ВозвратТоваровПоставщику.РассчитатьПропорциональныйНДС(ЭтотОбъект,
			УчетнаяПолитика.ПлательщикНДС(Организация, Дата),
			НалоговыйУчет.ПолучитьКоэффициентПропорциональногоНДС(Организация, Дата)
			);

		Документы.ВозвратТоваровПоставщику.ЗаполнитьСчетаУчетаРасчетов(ЭтотОбъект);
		Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеЗаполнения.ДоговорКонтрагента, "ВидДоговора")
				<> Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда
			СчетУчетаРасчетовСКонтрагентом = ДанныеЗаполнения.СчетУчетаРасчетовСКонтрагентом;
			СчетУчетаРасчетовПоАвансам     = ДанныеЗаполнения.СчетУчетаРасчетовПоАвансам;
			СчетУчетаРасчетовПоТаре        = ДанныеЗаполнения.СчетУчетаРасчетовПоТаре;
			СчетУчетаРасчетовПоТареПоАвансам = ДанныеЗаполнения.СчетУчетаРасчетовПоТареПоАвансам;
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ПРОВЕДЕНИЯ - ПОДГОТОВКА ДАННЫХ ИНФОРМАЦИОННОЙ БАЗЫ

// Процедура формирует структуру шапки документа и дополнительных полей.
//
Процедура ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента) Экспорт
	
	// Дерево значений, содержащее имена необходимых полей в запросе по шапке.
	Перем ДеревоПолейЗапросаПоШапке;
	
	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента   = ОбщегоНазначенияРед12.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);

	// Заполним по шапке документа дерево параметров, нужных при проведении.
	ДеревоПолейЗапросаПоШапке = ОбщегоНазначенияРед12.СформироватьДеревоПолейЗапросаПоШапке();

	ОбщегоНазначенияРед12.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "Организация", "ДоговорОрганизация");
	ОбщегоНазначенияРед12.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "ВидДоговора", "ВидДоговора");
	ОбщегоНазначенияРед12.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Склад"               , "ТипСклада"  , "ТипСклада");
	ОбщегоНазначенияРед12.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "СложныйНалоговыйУчет", "СложныйНалоговыйУчет");
	ОбщегоНазначенияРед12.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "ВедениеВзаиморасчетовНУ", "ВедениеВзаиморасчетовНУ");
	ОбщегоНазначенияРед12.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "СхемаНалоговогоУчета",    "СхемаНалоговогоУчета");

	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа
	СтруктураШапкиДокумента = УправлениеЗапасами.СформироватьЗапросПоДеревуПолей(ЭтотОбъект, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета);
	
КонецПроцедуры // ПодготовитьСтруктуруШапкиДокумента()

// Процедура определяет параметры учетной политики
//
Процедура ПодготовитьПараметрыУчетнойПолитики(СтруктураШапкиДокумента, Отказ, Заголовок)
	
	СтруктураШапкиДокумента.Вставить("ЕстьНалогНаПрибыльДо2015", УчетнаяПолитика.ПлательщикНалогаНаПрибыльДо2015(СтруктураШапкиДокумента.Организация, СтруктураШапкиДокумента.Дата));
	СтруктураШапкиДокумента.Вставить("ЕстьНДС",            УчетнаяПолитика.ПлательщикНДС(СтруктураШапкиДокумента.Организация, СтруктураШапкиДокумента.Дата));
	
КонецПроцедуры // ПодготовитьПараметрыУчетнойПолитики()

// Процедура формирует таблицы документа.
//
Процедура ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоТаре, Отказ, Заголовок) Экспорт
	
	СтруктураПолей = Новый Структура();
	СтруктураСложныхПолей = Новый Структура();
	// Получим необходимые данные для проведения и проверки заполенения данные по табличной части "Товары".
	СтруктураПолей.Вставить("Номенклатура"       , "Номенклатура");
	СтруктураПолей.Вставить("Сумма"              , "Сумма");
	СтруктураПолей.Вставить("СтавкаНДС"          , "СтавкаНДС");
	СтруктураПолей.Вставить("НДС"                , "СуммаНДС");
	СтруктураПолей.Вставить("Количество"         , "Количество * Коэффициент");
	СтруктураПолей.Вставить("Услуга"             , "Номенклатура.Услуга");
	СтруктураПолей.Вставить("БланкСтрогогоУчета" , "Номенклатура.БланкСтрогогоУчета");
	СтруктураПолей.Вставить("СчетУчетаБУ"        , "СчетУчетаБУ");
	СтруктураПолей.Вставить("СчетУчетаБУЗабалансовый", "СчетУчетаБУ.Забалансовый");
	СтруктураПолей.Вставить("СуммаВРознице"      , "СуммаВРознице");
	СтруктураПолей.Вставить("СтавкаНДСВРознице"  , "СтавкаНДСВРознице");
	СтруктураПолей.Вставить("ДокументОприходования"  , "ДокументОприходования");
	СтруктураПолей.Вставить("Себестоимость"  	 , "Себестоимость");
	СтруктураПолей.Вставить("СебестоимостьНУ"  	 , "СебестоимостьНУ");
	
	СтруктураПолей.Вставить("НалоговоеНазначение"     	, "НалоговоеНазначение");
	СтруктураПолей.Вставить("ВидДеятельностиНДС"     	, "НалоговоеНазначение.ВидДеятельностиНДС");
	
	СтруктураПолей.Вставить("СчетУчетаНДС", "Ссылка.СчетУчетаНДС");
	
	РезультатЗапросаПоТоварам = ОбщегоНазначенияРед12.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураПолей, , СтруктураСложныхПолей);

	// Получим необходимые данные для проведения и проверки заполенения данные 
	// по табличной части "Возвратная тара".
	СтруктураПолей = Новый Структура();
	СтруктураПолей.Вставить("Номенклатура", "Номенклатура");
	СтруктураПолей.Вставить("Услуга"      , "Номенклатура.Услуга");
	СтруктураПолей.Вставить("БланкСтрогогоУчета", "Номенклатура.БланкСтрогогоУчета");
	СтруктураПолей.Вставить("Сумма"       , "Сумма");
	СтруктураПолей.Вставить("Количество"  , "Количество");
	СтруктураПолей.Вставить("СчетУчетаБУ" , "СчетУчетаБУ");
	СтруктураПолей.Вставить("СчетУчетаБУЗабалансовый", "СчетУчетаБУ.Забалансовый");
	
	СтруктураПолей.Вставить("НалоговоеНазначение"     	, "НалоговоеНазначение");
	СтруктураПолей.Вставить("ВидДеятельностиНДС"     	, "НалоговоеНазначение.ВидДеятельностиНДС");
	
	РезультатЗапросаПоТаре = ОбщегоНазначенияРед12.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "ВозвратнаяТара", СтруктураПолей);
	
	ПогрешностиОкругления  = Новый Соответствие;
	ПогрешностиОкругленияТара = Новый Соответствие;
	
	// Подготовим таблицу товаров и тары для проведения.
	ТаблицаПоТоварам = ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента, ПогрешностиОкругления);
	ТаблицаПоТаре    = ПодготовитьТаблицуТары(РезультатЗапросаПоТаре, СтруктураШапкиДокумента, ПогрешностиОкругленияТара);

КонецПроцедуры

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТоварам - результат запроса по табличной части "Товары",
//  СтруктураШапкиДокумента   - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблиица значений.
//
Функция ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента, ПогрешностиОкругления)

	ТаблицаТоваров = РезультатЗапросаПоТоварам.Выгрузить();
	
	Если НЕ СтруктураШапкиДокумента.ЕстьНДС Тогда
		// для регламентного учета считаем НДС
		ТаблицаТоваров.ЗаполнитьЗначения(Перечисления.СтавкиНДС.БезНДС, "СтавкаНДС");
		ТаблицаТоваров.ЗаполнитьЗначения(0                            , "НДС");
	КонецЕсли;
	
	НалоговыйУчет.ДобавитьКолонкиТоваровРегл(ТаблицаТоваров, СтруктураШапкиДокумента, ПогрешностиОкругления, Истина);

//	ТаблицаТоваров.Колонки.Добавить("ДокументОприходования");
	ТаблицаТоваров.Колонки.Добавить("СуммаБезНДС", ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаТоваров.Колонки.Добавить("ИмяТабЧасти");
	ТаблицаТоваров.Колонки.Добавить("Регистратор");
	ТаблицаТоваров.Колонки.Добавить("Склад");
	
	ТаблицаТоваров.Колонки.Добавить("Организация");
	ТаблицаТоваров.Колонки.Добавить("ДоговорКонтрагента");
	
	ТаблицаТоваров.Колонки.Добавить("КорСчетСписанияБУ");
	ТаблицаТоваров.Колонки.Добавить("КорСубконтоСписанияБУ1");
	ТаблицаТоваров.Колонки.Добавить("КорСубконтоСписанияБУ2");
	ТаблицаТоваров.Колонки.Добавить("КорСубконтоСписанияБУ3");
	
	ТаблицаТоваров.Колонки.Добавить("СписыватьПоУказаннойСтоимости");
	
	ТаблицаТоваров.Колонки.Добавить("ДляХозяйственнойДеятельности");
	ТаблицаТоваров.Колонки.Добавить("Амортизируется", Новый ОписаниеТипов("Булево"));
	
	ТаблицаТоваров.ЗаполнитьЗначения(ЭтотОбъект,                          "Регистратор");
	ТаблицаТоваров.ЗаполнитьЗначения(СтруктураШапкиДокумента.Склад,       "Склад");
	ТаблицаТоваров.ЗаполнитьЗначения(СтруктураШапкиДокумента.Организация, "Организация");
	ТаблицаТоваров.ЗаполнитьЗначения("Товары",                            "ИмяТабЧасти");

	ТаблицаТоваров.ЗаполнитьЗначения(СтруктураШапкиДокумента.ДоговорКонтрагента,                       "ДоговорКонтрагента");
	
	ТаблицаТоваров.ЗаполнитьЗначения(Ложь, "СписыватьПоУказаннойСтоимости");
	
	ТаблицаТоваров.ЗаполнитьЗначения(СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом, "КорСчетСписанияБУ");
	Для каждого Субконто из СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом.ВидыСубконто Цикл
		Если Субконто.ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты тогда
			ТаблицаТоваров.ЗаполнитьЗначения(СтруктураШапкиДокумента.Контрагент, "КорСубконтоСписанияБУ"+Субконто.НомерСтроки);
		ИначеЕсли Субконто.ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры тогда
			ТаблицаТоваров.ЗаполнитьЗначения(СтруктураШапкиДокумента.ДоговорКонтрагента, "КорСубконтоСписанияБУ"+Субконто.НомерСтроки);
		ИначеЕсли Субконто.ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ДокументыРасчетовСКонтрагентами тогда
			ТаблицаТоваров.ЗаполнитьЗначения(УправлениеВзаиморасчетами.ОпределитьДокументРасчетовСКонтрагентом(СтруктураШапкиДокумента.Ссылка,СтруктураШапкиДокумента.Сделка), "КорСубконтоСписанияБУ"+Субконто.НомерСтроки);
		КонецЕсли;
	КонецЦикла;
	
	ЭтоОборудование = ВидОперации = Перечисления.ВидыОперацийВозвратТоваровПоставщику.Оборудование;
	Для каждого Строка Из ТаблицаТоваров Цикл
		
		Если Строка.НалоговоеНазначение = Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяНеХозДеятельность Тогда
			Строка.ДляХозяйственнойДеятельности = Ложь;
		Иначе
			Строка.ДляХозяйственнойДеятельности = Истина;
		КонецЕсли; 
		
		Строка.Амортизируется = ЭтоОборудование;
		
		Если НЕ ЗначениеЗаполнено(Строка.ДокументОприходования) Тогда
			Строка.ДокументОприходования = СтруктураШапкиДокумента.ДокументПоступления;
		КонецЕсли;
	КонецЦикла; 
	
	ТаблицаТоваров.Индексы.Добавить("Услуга");
	СтрокиСУлугой_Null = ТаблицаТоваров.НайтиСтроки(новый Структура ("Услуга", NULL));
	Для Каждого Строка из СтрокиСУлугой_Null Цикл
		Строка.Услуга = Ложь;
	КонецЦикла;
	
	Возврат ТаблицаТоваров;

КонецФункции // ПодготовитьТаблицуТоваров()

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТаре  - результат запроса по табличной части "ВозвратнаяТара",
//  СтруктураШапкиДокумента - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблиица значений.
//
Функция ПодготовитьТаблицуТары(РезультатЗапросаПоТаре, СтруктураШапкиДокумента, ПогрешностиОкругления)

	ТаблицаТары = РезультатЗапросаПоТаре.Выгрузить();

	ТаблицаТары.Колонки.Добавить("СтавкаНДС");
	ТаблицаТары.Колонки.Добавить("НДС");
	ТаблицаТары.Колонки.Добавить("СчетУчетаНДС");
	ТаблицаТары.Колонки.Добавить("ДляХозяйственнойДеятельности");
	ТаблицаТары.Колонки.Добавить("Амортизируется");
	
	// тара без НДС, и не амортизируется
	ТаблицаТары.ЗаполнитьЗначения(Перечисления.СтавкиНДС.НеНДС	, "СтавкаНДС");
	ТаблицаТары.ЗаполнитьЗначения(0								, "НДС");
	ТаблицаТары.ЗаполнитьЗначения(ПланыСчетов.Хозрасчетный.ПустаяСсылка(), "СчетУчетаНДС");
	
	Для каждого Строка Из ТаблицаТары Цикл
		Строка.ДляХозяйственнойДеятельности = Истина;
		Строка.ВидДеятельностиНДС = Перечисления.ВидыДеятельностиНДС.Необлагаемая;
	КонецЦикла; 
	
	НалоговыйУчет.ДобавитьКолонкиТоваровРегл(ТаблицаТары, СтруктураШапкиДокумента, ПогрешностиОкругления, Истина);
	
	ТаблицаТары.Колонки.Добавить("ДокументОприходования");
	ТаблицаТары.Колонки.Добавить("ДоговорПоставщика");
	ТаблицаТары.Колонки.Добавить("Регистратор");
	ТаблицаТары.Колонки.Добавить("Склад");
	ТаблицаТары.Колонки.Добавить("Организация");
	ТаблицаТары.Колонки.Добавить("СубконтоБУ");
	ТаблицаТары.Колонки.Добавить("КорСчетСписанияБУ");
	ТаблицаТары.Колонки.Добавить("КорСубконтоСписанияБУ1");
	ТаблицаТары.Колонки.Добавить("КорСубконтоСписанияБУ2");
	ТаблицаТары.Колонки.Добавить("КорСубконтоСписанияБУ3");
	
	ТаблицаТары.Колонки.Добавить("ДоговорКонтрагента");

	ТаблицаТары.ЗаполнитьЗначения(ЭтотОбъект,                          "Регистратор");
	ТаблицаТары.ЗаполнитьЗначения(СтруктураШапкиДокумента.Склад,       "Склад");
	ТаблицаТары.ЗаполнитьЗначения(СтруктураШапкиДокумента.Организация, "Организация");
	ТаблицаТары.ЗаполнитьЗначения(СтруктураШапкиДокумента.ДоговорКонтрагента, "ДоговорКонтрагента");

	ТаблицаТары.ЗаполнитьЗначения(СтруктураШапкиДокумента.СчетУчетаРасчетовПоТаре, "КорСчетСписанияБУ");
	Для каждого Субконто из СтруктураШапкиДокумента.СчетУчетаРасчетовПоТаре.ВидыСубконто Цикл
		Если Субконто.ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты тогда
			ТаблицаТары.ЗаполнитьЗначения(СтруктураШапкиДокумента.Контрагент, "КорСубконтоСписанияБУ"+Субконто.НомерСтроки);
		ИначеЕсли Субконто.ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры тогда
			ТаблицаТары.ЗаполнитьЗначения(СтруктураШапкиДокумента.ДоговорКонтрагента, "КорСубконтоСписанияБУ"+Субконто.НомерСтроки);
		ИначеЕсли Субконто.ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ДокументыРасчетовСКонтрагентами тогда
			ТаблицаТары.ЗаполнитьЗначения(УправлениеВзаиморасчетами.ОпределитьДокументРасчетовСКонтрагентом(СтруктураШапкиДокумента.Ссылка,СтруктураШапкиДокумента.Сделка), "КорСубконтоСписанияБУ"+Субконто.НомерСтроки);
		КонецЕсли;
	КонецЦикла;

	Возврат ТаблицаТары;

КонецФункции // ПодготовитьТаблицуТары()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ПРОВЕДЕНИЯ - ФОРМИРОВАНИЕ ДВИЖЕНИЙ

// По результату запроса по шапке документа формируем движения по регистрам.
//
// Параметры: 
//  РежимПроведения           - режим проведения документа (оперативный или неоперативный),
//  СтруктураШапкиДокумента   - выборка из результата запроса по шапке документа,
//  ТаблицаПоТоварам          - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  ТаблицаПоТаре             - таблица значений, содержащая данные для проведения и проверки ТЧ "Возвратная тара",
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоТаре, Отказ, Заголовок);

	ТаблицаПоТоварамКопия = ТаблицаПоТоварам.Скопировать(); // ИНАГРО

	ПроводкиБУ = Движения.Хозрасчетный;
	
	ИзПереработки = (ВидОперации = Перечисления.ВидыОперацийВозвратТоваровПоставщику.ИзПереработки);
	Комиссия = (ВидОперации = Перечисления.ВидыОперацийВозвратТоваровПоставщику.ПокупкаКомиссия
	            И ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом);
				
	НТТ = (мУчетВПродажныхЦенах И (Склад.ТипСклада = Перечисления.ТипыСкладов.НеавтоматизированнаяТорговаяТочка));
	АТТ = (мУчетВПродажныхЦенах И (Склад.ТипСклада = Перечисления.ТипыСкладов.РозничныйМагазин));
	
	// Проводки по взаиморасчетам - авансы
	Если НЕ ИзПереработки И НЕ Комиссия Тогда

	   	ТаблицыДокумента = Новый Структура();
	   	ТаблицыДокумента.Вставить("ТаблицаПоТоварам",ТаблицаПоТоварам);
		
		//Возможны корректировки сумм при расчетах в валюте
		ТаблицаАвансов = БухгалтерскийУчетРасчетовСКонтрагентами.ЗачетАванса(ЭтотОбъект, СтруктураШапкиДокумента , мВалютаРегламентированногоУчета, ТаблицыДокумента , Отказ, Заголовок, "АВ");

	КонецЕсли; // Проводки по взаиморасчетам - авансы
	
	ТаблицаПоВторомуСобытиюНал = ДвиженияПоРегистрамНалоговогоУчета(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоТаре, Отказ);
	
	// Проводки по взаиморасчетам - авансы
	Если НЕ ИзПереработки Тогда
		
		// по таре зачет авансов всегда 
		ТаблицыДокумента = Новый Структура();
		ТаблицыДокумента.Вставить("ТаблицаПоТаре",ТаблицаПоТаре);
				
		//Возможны корректировки сумм при расчетах в валюте
		ТаблицаАвансов = БухгалтерскийУчетРасчетовСКонтрагентами.ЗачетАванса(ЭтотОбъект, СтруктураШапкиДокумента , мВалютаРегламентированногоУчета, ТаблицыДокумента , Отказ, Заголовок, "АВ",,,СтруктураШапкиДокумента.СчетУчетаРасчетовПоТаре, СтруктураШапкиДокумента.СчетУчетаРасчетовПоТареПоАвансам);
		
	КонецЕсли;
		
	Если АТТ Тогда
		//Спишем торговую наценку
		ТаблицаНаценок = УправлениеЗапасамиПартионныйУчет.ТорговаяНаценкаАТТ(Ссылка, Склад, ТаблицаПоТоварам.ВыгрузитьКолонку("Номенклатура"), ТаблицаПоТоварам.ВыгрузитьКолонку("НалоговоеНазначение"));
		СчетНаценки = ПланыСчетов.Хозрасчетный.ТорговаяНаценкаАТТ;
		ТаблицаНаценок.Индексы.Добавить("Номенклатура,Партия");

		УправлениеЗапасамиПартионныйУчет.ДвижениеПартийТоваров(ТаблицаПоТоварам, Отказ, , НСтр("ru='Возврат ТМЦ';uk='Повернення ТМЦ'",Локализация.КодЯзыкаИнформационнойБазы()));
		
		Для Каждого Строка Из ТаблицаПоТоварам Цикл
			
			ПолучательСчетНаценки = Строка.КорСчетСписанияБУ;
			
			Для Каждого Партия Из Строка.СписанныеПартииБУ Цикл
				
				СтруктураОтбора = Новый Структура;
				СтруктураОтбора.Вставить("Номенклатура",Строка.Номенклатура);
				СтруктураОтбора.Вставить("Партия",		Партия.Партия);
				СтруктураОтбора.Вставить("НалоговоеНазначение", Строка.НалоговоеНазначение);
				
				
				СтрокаТаблицыНаценок = ТаблицаНаценок.НайтиСтроки(СтруктураОтбора);
				
				Сумма   = Партия.СуммаСписания;
				СуммаНУ = Партия.СуммаСписанияНУ;
				
				Если СтрокаТаблицыНаценок.Количество() = 0 Тогда
					ПокупнаяЦена = Сумма;
				ИначеЕсли НЕ СтрокаТаблицыНаценок[0].ПС = 0 Тогда
					СуммаНаценки = СтрокаТаблицыНаценок[0].ТН * Сумма / (СтрокаТаблицыНаценок[0].ПС);
					ПокупнаяЦена = Сумма - СуммаНаценки;
				Иначе
					ПокупнаяЦена = 0;
				КонецЕсли;
				
				Если СтрокаТаблицыНаценок.Количество() = 0 Тогда
					ПокупнаяЦенаНУ = СуммаНУ;
				ИначеЕсли НЕ СтрокаТаблицыНаценок[0].ПС_НУ = 0 Тогда
					СуммаНаценкиНУ = СтрокаТаблицыНаценок[0].ТН_НУ * СуммаНУ / (СтрокаТаблицыНаценок[0].ПС_НУ);
					ПокупнаяЦенаНУ = СуммаНУ - СуммаНаценкиНУ;
				Иначе
					ПокупнаяЦенаНУ = 0;
				КонецЕсли;				
				
				Если     Сумма - ПокупнаяЦена <> 0 
					ИЛИ  (СтруктураШапкиДокумента.ЕстьНалогНаПрибыльДо2015 И (СуммаНУ - ПокупнаяЦенаНУ <> 0))Тогда
					
					// "уменьшим" списание партий
					Проводка = ПроводкиБУ.Добавить();
					Проводка.Период      = Дата;
					Проводка.Организация = Организация;
					Проводка.Содержание  = НСтр("ru='Торговая наценка';uk='Торгова націнка'",Локализация.КодЯзыкаИнформационнойБазы());
					
					Проводка.СчетДт      = ПолучательСчетНаценки;
					Проводка.СчетКт      = Строка.СчетУчетаБУ;
					
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, Строка.КорСубконтоСписанияБУ1);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, Строка.КорСубконтоСписанияБУ2);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, Строка.КорСубконтоСписанияБУ3);
			
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Номенклатура",  Строка.Номенклатура);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Склады",  СтруктураШапкиДокумента.Склад);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Партии",  Партия.Партия);
					Проводка.Сумма       = ПокупнаяЦена - Сумма;
					
					Если Проводка.СчетДт.Валютный Тогда
						Проводка.ВалютаДт = СтруктураШапкиДокумента.ВалютаВзаиморасчетов;
						Проводка.ВалютнаяСуммаДт = ?(Строка.СуммаБезНДСВал = 0, Проводка.Сумма, Проводка.Сумма * Строка.СуммаБезНДСВал / Строка.СуммаБезНДСРегл);
					КонецЕсли;
					
					Проводка.НалоговоеНазначениеКт = Строка.НалоговоеНазначение;
					Если   СтруктураШапкиДокумента.ЕстьНалогНаПрибыльДо2015
						 И Строка.НалоговоеНазначение <> Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяНеХозДеятельность Тогда
						Проводка.СуммаНУКт       = ПокупнаяЦенаНУ - СуммаНУ;
					КонецЕсли;
					
					// отразим списание наценки
					Проводка = ПроводкиБУ.Добавить();
					Проводка.Период      = Дата;
					Проводка.Организация = Организация;
					Проводка.Содержание  = НСтр("ru='Торговая наценка';uk='Торгова націнка'",Локализация.КодЯзыкаИнформационнойБазы());
					
					Проводка.СчетДт      = Строка.СчетУчетаБУ;
					Проводка.СчетКт      = СчетНаценки;
					
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Номенклатура",  Строка.Номенклатура);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Склады",  СтруктураШапкиДокумента.Склад);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Партии",  Партия.Партия);
			
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Номенклатура",  Строка.Номенклатура);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Склады",  СтруктураШапкиДокумента.Склад);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Партии",  Партия.Партия);
					Проводка.Сумма                     = ПокупнаяЦена - Сумма;
					
					Проводка.НалоговоеНазначениеДт = Строка.НалоговоеНазначение;
					Проводка.НалоговоеНазначениеКт = Строка.НалоговоеНазначение;
					Если   СтруктураШапкиДокумента.ЕстьНалогНаПрибыльДо2015
						 И Строка.НалоговоеНазначение <> Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяНеХозДеятельность Тогда
						Проводка.СуммаНУДт       = ПокупнаяЦенаНУ - СуммаНУ;
						Проводка.СуммаНУКт       = ПокупнаяЦенаНУ - СуммаНУ;
					КонецЕсли;
					
					Партия.СуммаСписания = ПокупнаяЦена;
					Партия.СуммаСписанияНУ = ПокупнаяЦенаНУ;
					
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
        		
		УправлениеЗапасамиПартионныйУчет.ДвижениеПартийТоваров(ТаблицаПоТаре,  Отказ, , НСтр("ru='Возврат тары';uk='Повернення тари'",Локализация.КодЯзыкаИнформационнойБазы()));
		
	ИначеЕсли НТТ И НЕ Комиссия Тогда
		
		ТаблицаНаценок 	  = УправлениеЗапасамиПартионныйУчет.ТорговаяНаценкаНТТ(Ссылка, Склад, ТаблицаПоТоварам.ВыгрузитьКолонку("НалоговоеНазначение"), мРазделятьПоСтавкамНДС);
		СчетНаценки = ПланыСчетов.Хозрасчетный.ТорговаяНаценкаНТТ;
		Если мРазделятьПоСтавкамНДС Тогда
			ТаблицаНаценок.Индексы.Добавить("СтавкиНДС");
		КонецЕсли;
		
		Если ТаблицаПоТоварам.Колонки.Найти("СписанныеПартииБУ") = Неопределено Тогда
			ТаблицаПоТоварам.Колонки.Добавить("СписанныеПартииБУ");
		КонецЕсли;
		
		Для Каждого Строка Из ТаблицаПоТоварам Цикл
			
			ПолучательСчетНаценки = Строка.КорСчетСписанияБУ;
			
			СтруктураОтбора = Новый Структура();
			СтруктураОтбора.Вставить("НалоговоеНазначение", Строка.НалоговоеНазначение);
			Если мРазделятьПоСтавкамНДС Тогда
				СтруктураОтбора.Вставить("СтавкиНДС", Строка.СтавкаНДСВРознице);
			КонецЕсли;
			
			СтрокиТаблицыНаценок = ТаблицаНаценок.НайтиСтроки(СтруктураОтбора); 
			СтрокаТаблицыНаценок = ?(СтрокиТаблицыНаценок.Количество() > 0, СтрокиТаблицыНаценок[0], Неопределено);
			
			Сумма   = Строка.СуммаВРознице;
			СуммаНУ = Строка.СуммаВРознице;
			Если СтрокаТаблицыНаценок = Неопределено Тогда
				ПокупнаяЦена = Сумма;
			ИначеЕсли НЕ СтрокаТаблицыНаценок.ПС + Сумма = 0 Тогда
				СуммаНаценки = СтрокаТаблицыНаценок.ТН * Сумма / (СтрокаТаблицыНаценок.ПС);
				ПокупнаяЦена = Сумма - СуммаНаценки;
			Иначе
				ПокупнаяЦена = 0;
			КонецЕсли;
			
			Если СтрокаТаблицыНаценок = Неопределено Тогда
				ПокупнаяЦенаНУ = СуммаНУ;
			ИначеЕсли НЕ СтрокаТаблицыНаценок.ПС_НУ = 0 Тогда
				СуммаНаценкиНУ = СтрокаТаблицыНаценок.ТН_НУ * СуммаНУ / (СтрокаТаблицыНаценок.ПС_НУ);
				ПокупнаяЦенаНУ = СуммаНУ - СуммаНаценкиНУ;
			Иначе
				ПокупнаяЦенаНУ = 0;
			КонецЕсли;
			
			//Спишем товар из розницы
			Проводка = ПроводкиБУ.Добавить();
			Проводка.Период      = Дата;
			Проводка.Организация = Организация;
			Проводка.Содержание  = НСтр("ru='Возврат товара из розницы';uk='Повернення товару з роздробу'",Локализация.КодЯзыкаИнформационнойБазы());
			
			Проводка.СчетДт      = Строка.КорСчетСписанияБУ;
			Проводка.СчетКт      = Строка.СчетУчетаБУ;
			
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, Строка.КорСубконтоСписанияБУ1);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, Строка.КорСубконтоСписанияБУ2);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, Строка.КорСубконтоСписанияБУ3);
					
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Склады",  СтруктураШапкиДокумента.Склад);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Номенклатура",  Строка.Номенклатура);
			
			Если мРазделятьПоСтавкамНДС Тогда
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "СтавкиНДС",  Строка.СтавкаНДСВРознице);
			КонецЕсли;
			
			Проводка.Сумма         = ПокупнаяЦена;
			
			Если Проводка.СчетДт.Валютный Тогда
				Проводка.ВалютаДт = СтруктураШапкиДокумента.ВалютаВзаиморасчетов;
				Проводка.ВалютнаяСуммаДт = ?(Строка.СуммаБезНДСВал = 0, Проводка.Сумма, Проводка.Сумма * Строка.СуммаБезНДСВал / Строка.СуммаБезНДСРегл);
			КонецЕсли;
			
			Проводка.НалоговоеНазначениеКт = Строка.НалоговоеНазначение;
			Если   СтруктураШапкиДокумента.ЕстьНалогНаПрибыльДо2015
				 И Строка.НалоговоеНазначение <> Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяНеХозДеятельность Тогда
				Проводка.СуммаНУКт       = ПокупнаяЦенаНУ;
			КонецЕсли;
			
			//Спишем торговую наценку
			Если 	 Сумма - ПокупнаяЦена <> 0
				ИЛИ (СтруктураШапкиДокумента.ЕстьНалогНаПрибыльДо2015 И (СуммаНУ - ПокупнаяЦенаНУ <> 0)) Тогда
				
				Проводка = ПроводкиБУ.Добавить();
				Проводка.Период      = Дата;
				Проводка.Организация = Организация;
				Проводка.Содержание  = НСтр("ru='Торговая наценка';uk='Торгова націнка'",Локализация.КодЯзыкаИнформационнойБазы());
				
				Проводка.СчетДт      = СчетНаценки;
				Проводка.СчетКт      = Строка.СчетУчетаБУ;
				
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Склады",  СтруктураШапкиДокумента.Склад);
				Если мРазделятьПоСтавкамНДС Тогда
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "СтавкиНДС",  Строка.СтавкаНДСВРознице);
				КонецЕсли;
					
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Склады",  СтруктураШапкиДокумента.Склад);
				Если мРазделятьПоСтавкамНДС Тогда
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "СтавкиНДС",  Строка.СтавкаНДСВРознице);
				КонецЕсли;
				Проводка.Сумма                     = Сумма - ПокупнаяЦена;
				
				Проводка.НалоговоеНазначениеДт = Строка.НалоговоеНазначение;
				Проводка.НалоговоеНазначениеКт = Строка.НалоговоеНазначение;
				Если   СтруктураШапкиДокумента.ЕстьНалогНаПрибыльДо2015
					 И Строка.НалоговоеНазначение <> Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяНеХозДеятельность Тогда
					Проводка.СуммаНУДт       = СуммаНУ - ПокупнаяЦенаНУ;					
					Проводка.СуммаНУКт       = СуммаНУ - ПокупнаяЦенаНУ;
				КонецЕсли;
				
			КонецЕсли;
			
			ТаблицаПартий = Новый ТаблицаЗначений;
			ТаблицаПартий.Колонки.Добавить("СуммаСписания");
			ТаблицаПартий.Колонки.Добавить("СуммаСписанияНУ");
			
			СтрокаСтоимости = ТаблицаПартий.Добавить();
			СтрокаСтоимости.СуммаСписания = ПокупнаяЦена;
			СтрокаСтоимости.СуммаСписанияНУ = ПокупнаяЦенаНУ;
			
			Строка.СписанныеПартииБУ = ТаблицаПартий;
			
		КонецЦикла;
		
		УправлениеЗапасамиПартионныйУчет.ДвижениеПартийТоваров(ТаблицаПоТаре, Отказ, , НСтр("ru='Возврат тары';uk='Повернення тари'",Локализация.КодЯзыкаИнформационнойБазы()));
		
	Иначе
		
		УправлениеЗапасамиПартионныйУчет.ДвижениеПартийТоваров(ТаблицаПоТоварам,  Отказ, , НСтр("ru='Возврат ТМЦ';uk='Повернення ТМЦ'",Локализация.КодЯзыкаИнформационнойБазы()));
		УправлениеЗапасамиПартионныйУчет.ДвижениеПартийТоваров(ТаблицаПоТаре,     Отказ, , НСтр("ru='Возврат тары';uk='Повернення тари'",Локализация.КодЯзыкаИнформационнойБазы()));
		
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;

	ДатаДок    = Дата;
	ПроводкиБУ = Движения.Хозрасчетный;

	Если (СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком 
		  ИЛИ СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.Бартерный)
		и ТаблицаПоТоварам.Количество()>0 тогда
		
		// проводки по НДС
		ТаблицаДляПроводокПоНДС = ТаблицаПоТоварам.Скопировать();
		ТаблицаДляПроводокПоНДС.Свернуть("СтавкаНДС,ДляХозяйственнойДеятельности,ВидДеятельностиНДС,Амортизируется","ПроводкиСуммаНДСРегл, ПроводкиСуммаНДСВал");
		Для каждого СтрокаТаблицы Из ТаблицаДляПроводокПоНДС Цикл
			Если СтруктураШапкиДокумента.ЕстьНДС И СтрокаТаблицы.ПроводкиСуммаНДСРегл > 0 Тогда

				Проводка = ПроводкиБУ.Добавить();
				Проводка.Период      = Дата;

				Проводка.Организация = СтруктураШапкиДокумента.Организация;
				Проводка.Содержание  = НСтр("ru='НДС (товары) (сторно)';uk='ПДВ (товари) (сторно)'",Локализация.КодЯзыкаИнформационнойБазы());

				Проводка.СчетДт      = СтруктураШапкиДокумента.СчетУчетаНДС;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Контрагенты",        СтруктураШапкиДокумента.Контрагент);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Договоры",           СтруктураШапкиДокумента.ДоговорКонтрагента);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"ДокументыРасчетовСКонтрагентами", НалоговыйУчет.ОпределитьСделкуНалоговыйУчет(СтруктураШапкиДокумента, Ссылка, Сделка));

				Проводка.СчетКт      = СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Контрагенты",        СтруктураШапкиДокумента.Контрагент);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Договоры",           СтруктураШапкиДокумента.ДоговорКонтрагента);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"ДокументыРасчетовСКонтрагентами", УправлениеВзаиморасчетами.ОпределитьДокументРасчетовСКонтрагентом(Ссылка, Сделка));

				Если СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом.Валютный Тогда
					Проводка.ВалютаКт        = СтруктураШапкиДокумента.ВалютаВзаиморасчетов;
					Проводка.ВалютнаяСуммаКт = - СтрокаТаблицы.ПроводкиСуммаНДСВал;
				КонецЕсли;
				
				Проводка.Сумма       = - СтрокаТаблицы.ПроводкиСуммаНДСРегл;
				НалоговыйУчет.РазбитьПроводкуПоНДСНаПервоеВтороеСобытие(ТаблицаПоВторомуСобытиюНал, ПроводкиБУ, Проводка, 
														   "Дт", СтруктураШапкиДокумента.СчетУчетаНДСПодтвержденный, 
														  СтруктураШапкиДокумента.ДоговорКонтрагента, 
														  НалоговыйУчет.ОпределитьСделкуНалоговыйУчет(СтруктураШапкиДокумента, Ссылка, Сделка), Сделка,
														  Перечисления.СобытияОжидаемыйИПодтвержденныйНДСПриобретений.Возврат,
														  СтрокаТаблицы.СтавкаНДС, СтрокаТаблицы.ДляХозяйственнойДеятельности, СтрокаТаблицы.ВидДеятельностиНДС, СтрокаТаблицы.Амортизируется,
													      СтрокаТаблицы.ПроводкиСуммаНДСВал);
				
				
			КонецЕсли; // Проводки по НДС
		КонецЦикла;		
		
		// посчитаем на какую сумму были сформированы проводки по себестоимости
		СуммаПоПартиямВсего = 0;
		СуммаПоПартиямВсегоВал = 0;
		Для каждого СтрокаТаблицы Из ТаблицаПоТоварам Цикл
			СуммаПоПартиямВсего   = СуммаПоПартиямВсего   + СтрокаТаблицы.СписанныеПартииБУ.Итог("СуммаСписания");
			Для каждого СтрокаПартии Из СтрокаТаблицы.СписанныеПартииБУ Цикл
				СуммаПоПартиямВсегоВал = СуммаПоПартиямВсегоВал + Окр(?(СтрокаТаблицы.ПроводкиСуммаСНДСРегл = 0, СтрокаПартии.СуммаСписания, СтрокаПартии.СуммаСписания * СтрокаТаблицы.ПроводкиСуммаСНДСВал / СтрокаТаблицы.ПроводкиСуммаСНДСРегл),2);
			КонецЦикла; 
		КонецЦикла;
		//Сколько всего должно пройти по взаиморасчетам
		СуммаСНДСВзаиморасчетыРегл = ТаблицаПоТоварам.Итог("ПроводкиСуммаСНДСРегл");
		СуммаНДСВзаиморасчетыРегл = ТаблицаПоТоварам.Итог("ПроводкиСуммаНДСРегл");
		СуммаСНДСВзаиморасчетыВал = ТаблицаПоТоварам.Итог("ПроводкиСуммаСНДСВал");
		СуммаНДСВзаиморасчетыВал = ТаблицаПоТоварам.Итог("ПроводкиСуммаНДСВал");
		
		Разница = СуммаСНДСВзаиморасчетыРегл - (СуммаПоПартиямВсего + СуммаНДСВзаиморасчетыРегл);
		РазницаВал = СуммаСНДСВзаиморасчетыВал - (СуммаПоПартиямВсегоВал + СуммаНДСВзаиморасчетыВал);
		
		Если Разница > 0 Тогда
			
			// доходы
			Проводка = ПроводкиБУ.Добавить();
			Проводка.Период      = Дата;

			Проводка.Организация = СтруктураШапкиДокумента.Организация;
			Проводка.Содержание  = НСтр("ru='Сумма дохода от возврата (товар)';uk='Сума доходу від повернення (товар)'",Локализация.КодЯзыкаИнформационнойБазы());

			Проводка.СчетДт      = СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Контрагенты",        СтруктураШапкиДокумента.Контрагент);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Договоры",           СтруктураШапкиДокумента.ДоговорКонтрагента);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"ДокументыРасчетовСКонтрагентами", УправлениеВзаиморасчетами.ОпределитьДокументРасчетовСКонтрагентом(СтруктураШапкиДокумента.Ссылка,СтруктураШапкиДокумента.Сделка));

			Если СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом.Валютный Тогда
				Проводка.ВалютаДт        = СтруктураШапкиДокумента.ВалютаВзаиморасчетов;
				Проводка.ВалютнаяСуммаДт = РазницаВал;
			КонецЕсли;

			Проводка.СчетКт      = СтруктураШапкиДокумента.СчетУчетаДоходовБУ;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт, 1, СтруктураШапкиДокумента.СубконтоДоходов1);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт, 2, СтруктураШапкиДокумента.СубконтоДоходов2);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт, 3, СтруктураШапкиДокумента.СубконтоДоходов3);

			// разницу по НУ не показываем
			Проводка.НалоговоеНазначениеКт = Справочники.НалоговыеНазначенияАктивовИЗатрат.НКУ_НеХозДеятельность;
			
			Проводка.Сумма       = Разница;
			
		ИначеЕсли Разница < 0 Тогда
			// расходы
			Проводка = ПроводкиБУ.Добавить();
			Проводка.Период      = Дата;

			Проводка.Организация = СтруктураШапкиДокумента.Организация;
			Проводка.Содержание  = НСтр("ru='Сумма затрат от возврат (товар)';uk='Сума витрат від повернення (товар)'",Локализация.КодЯзыкаИнформационнойБазы());

			Проводка.СчетДт      = СтруктураШапкиДокумента.СчетУчетаРасходовБУ;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт, 1, СтруктураШапкиДокумента.СубконтоРасходов1);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт, 2, СтруктураШапкиДокумента.СубконтоРасходов2);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт, 3, СтруктураШапкиДокумента.СубконтоРасходов3);

			Проводка.СчетКт      = СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Контрагенты",        СтруктураШапкиДокумента.Контрагент);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Договоры",           СтруктураШапкиДокумента.ДоговорКонтрагента);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"ДокументыРасчетовСКонтрагентами", УправлениеВзаиморасчетами.ОпределитьДокументРасчетовСКонтрагентом(СтруктураШапкиДокумента.Ссылка,СтруктураШапкиДокумента.Сделка));

			Если СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом.Валютный Тогда
				Проводка.ВалютаКт        = СтруктураШапкиДокумента.ВалютаВзаиморасчетов;
				Проводка.ВалютнаяСуммаКт = - РазницаВал;
			КонецЕсли;

			Проводка.Сумма       = - Разница;
			
			// разницу по НУ не показываем
			Проводка.НалоговоеНазначениеДт = Справочники.НалоговыеНазначенияАктивовИЗатрат.НКУ_НеХозДеятельность;
		
		КонецЕсли;
		
		СуммаПоПартиямВсего = 0;
		СуммаПоПартиямВсегоВал = 0;
		Для каждого СтрокаТаблицы Из ТаблицаПоТаре Цикл
			СуммаПоПартиямВсего = СуммаПоПартиямВсего + СтрокаТаблицы.СписанныеПартииБУ.Итог("СуммаСписания");
			Для каждого СтрокаПартии Из СтрокаТаблицы.СписанныеПартииБУ Цикл
				СуммаПоПартиямВсегоВал = СуммаПоПартиямВсегоВал + Окр(?(СтрокаТаблицы.ПроводкиСуммаСНДСРегл = 0, СтрокаПартии.СуммаСписания, СтрокаПартии.СуммаСписания * СтрокаТаблицы.ПроводкиСуммаСНДСВал / СтрокаТаблицы.ПроводкиСуммаСНДСРегл),2);
			КонецЦикла; 
		КонецЦикла;
		
		//Сколько всего должно пройти по взаиморасчетам
		СуммаСНДСВзаиморасчетыРегл 	= ТаблицаПоТаре.Итог("ПроводкиСуммаСНДСРегл");
		СуммаСНДСВзаиморасчетыВал 	= ТаблицаПоТаре.Итог("ПроводкиСуммаСНДСВал");
		
		Разница = СуммаСНДСВзаиморасчетыРегл - СуммаПоПартиямВсего;
		РазницаВал = СуммаСНДСВзаиморасчетыВал - СуммаПоПартиямВсегоВал;
		
		Если Разница > 0 Тогда
			
			// доходы
			Проводка = ПроводкиБУ.Добавить();
			Проводка.Период      = Дата;

			Проводка.Организация = СтруктураШапкиДокумента.Организация;
			Проводка.Содержание  = НСтр("ru='Сумма дохода от возврата (тара)';uk='Сума доходу від повернення (тара)'",Локализация.КодЯзыкаИнформационнойБазы());

			Проводка.СчетДт      = СтруктураШапкиДокумента.СчетУчетаРасчетовПоТаре;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Контрагенты",        СтруктураШапкиДокумента.Контрагент);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Договоры",           СтруктураШапкиДокумента.ДоговорКонтрагента);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"ДокументыРасчетовСКонтрагентами", УправлениеВзаиморасчетами.ОпределитьДокументРасчетовСКонтрагентом(СтруктураШапкиДокумента.Ссылка,СтруктураШапкиДокумента.Сделка));

			Если СтруктураШапкиДокумента.СчетУчетаРасчетовПоТаре.Валютный Тогда
				Проводка.ВалютаДт        = СтруктураШапкиДокумента.ВалютаВзаиморасчетов;
				Проводка.ВалютнаяСуммаДт = РазницаВал;
			КонецЕсли;

			Проводка.СчетКт      = СтруктураШапкиДокумента.СчетУчетаДоходовБУ;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт, 1, СтруктураШапкиДокумента.СубконтоДоходов1);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт, 2, СтруктураШапкиДокумента.СубконтоДоходов2);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт, 3, СтруктураШапкиДокумента.СубконтоДоходов3);

			Проводка.Сумма       = Разница;
			
		ИначеЕсли Разница < 0 Тогда
			// расходы
			Проводка = ПроводкиБУ.Добавить();
			Проводка.Период      = Дата;

			Проводка.Организация = СтруктураШапкиДокумента.Организация;
			Проводка.Содержание  = НСтр("ru='Сумма затрат от возврат (тара)';uk='Сума витрат від повернення (тара)'",Локализация.КодЯзыкаИнформационнойБазы());
                                  
			Проводка.СчетДт      = СтруктураШапкиДокумента.СчетУчетаРасходовБУ;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт, 1, СтруктураШапкиДокумента.СубконтоРасходов1);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт, 2, СтруктураШапкиДокумента.СубконтоРасходов2);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт, 3, СтруктураШапкиДокумента.СубконтоРасходов3);

			Проводка.СчетКт      = СтруктураШапкиДокумента.СчетУчетаРасчетовПоТаре;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Контрагенты",        СтруктураШапкиДокумента.Контрагент);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Договоры",           СтруктураШапкиДокумента.ДоговорКонтрагента);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"ДокументыРасчетовСКонтрагентами", УправлениеВзаиморасчетами.ОпределитьДокументРасчетовСКонтрагентом(СтруктураШапкиДокумента.Ссылка,СтруктураШапкиДокумента.Сделка));

			Если СтруктураШапкиДокумента.СчетУчетаРасчетовПоТаре.Валютный Тогда
				Проводка.ВалютаКт        = СтруктураШапкиДокумента.ВалютаВзаиморасчетов;
				Проводка.ВалютнаяСуммаКт = - РазницаВал;
			КонецЕсли;

			Проводка.Сумма       = - Разница;
		
		КонецЕсли;
		
	ИначеЕсли СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом
	    	И ТаблицаПоТоварам.Количество()>0 Тогда
		
		// Проводки по НДС
		ТаблицаДляПроводокПоНДС = ТаблицаПоТоварам.Скопировать();
		ТаблицаДляПроводокПоНДС.Свернуть("СтавкаНДС,ДляХозяйственнойДеятельности,ВидДеятельностиНДС,Амортизируется","ПроводкиСуммаНДСРегл, ПроводкиСуммаНДСВал");
		
		Для каждого СтрокаТаблицы Из ТаблицаДляПроводокПоНДС Цикл
			Если СтруктураШапкиДокумента.ЕстьНДС И СтрокаТаблицы.ПроводкиСуммаНДСРегл > 0 Тогда
				
				Проводка = ПроводкиБУ.Добавить();
				Проводка.Период      = Дата;
				
				Проводка.Организация = СтруктураШапкиДокумента.Организация;
				Проводка.Содержание  = НСтр("ru='НДС (товары) (сторно)';uk='ПДВ (товари) (сторно)'", Локализация.КодЯзыкаИнформационнойБазы());
				
				Проводка.СчетДт      = СтруктураШапкиДокумента.СчетУчетаНДС;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Контрагенты",        СтруктураШапкиДокумента.Контрагент);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Договоры",           СтруктураШапкиДокумента.ДоговорКонтрагента);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"ДокументыРасчетовСКонтрагентами", НалоговыйУчет.ОпределитьСделкуНалоговыйУчет(СтруктураШапкиДокумента, Ссылка, Сделка));
				
				Проводка.СчетКт      = СтруктураШапкиДокумента.СчетУчетаНДСПодтвержденный;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Контрагенты",        СтруктураШапкиДокумента.Контрагент);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Договоры",           СтруктураШапкиДокумента.ДоговорКонтрагента);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"ДокументыРасчетовСКонтрагентами", НалоговыйУчет.ОпределитьСделкуНалоговыйУчет(СтруктураШапкиДокумента, Ссылка, Сделка));
				
				Если СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом.Валютный Тогда
					Проводка.ВалютаКт        = СтруктураШапкиДокумента.ВалютаВзаиморасчетов;
					Проводка.ВалютнаяСуммаКт = - СтрокаТаблицы.ПроводкиСуммаНДСВал;
				КонецЕсли;
				
				Проводка.Сумма       = - СтрокаТаблицы.ПроводкиСуммаНДСРегл;
				
			КонецЕсли; // Проводки по НДС
			
		КонецЦикла;		
		
	КонецЕсли;
	
	// ИНАГРО++
	//Движение по регистру ИНАГРО_ЗакупкиОрганизаций
	Если НЕ ИзПереработки И НЕ Комиссия И ТаблицаПоТоварамКопия.Количество() >0 Тогда
	
		Для Каждого СтрокаТаблицы Из ТаблицаПоТоварамКопия Цикл
			ИНАГРО_Общий.ИНАГРО_РегистрацияЗакупки(Движения, СтрокаТаблицы, СтруктураШапкиДокумента, Истина);
		КонецЦикла;		
	
	КонецЕсли;
	// ИНАГРО--
	
	//Учет курсовых разниц
	Если (ВалютаДокумента <> мВалютаРегламентированногоУчета) тогда
		БухгалтерскийУчетРед12.ПереоценкаСчетовДокументаРегл(ЭтотОбъект,СтруктураШапкиДокумента, мВалютаРегламентированногоУчета,Отказ,Заголовок);
	КонецЕсли; // Учет курсовых разниц
	
КонецПроцедуры // ДвиженияПоРегистрам                                                                        	

Функция ДвиженияПоРегистрамНалоговогоУчета(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоТаре, Отказ)
	
	ТаблицаПоВторомуСобытиюНал = НалоговыйУчет.СоздатьСтруктуруТаблицыНалоговыхСумм();

	Если Не СтруктураШапкиДокумента.ЕстьНДС Тогда
		// Если не нужно отражать в налоговом учете, тогда не отражаем и в подсистеме учета НДС
		Возврат ТаблицаПоВторомуСобытиюНал;
	КонецЕсли;

	//Отразим Продажи в регистре ПродажиНалоговыйУчет
	НаборДвижений = Движения.ПриобретенияНалоговыйУчет;
	
	// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
	ТаблицаДвижений = НаборДвижений.ВыгрузитьКолонки();
	ТаблицаДвиженийТара = ТаблицаДвижений.Скопировать();
	
	// ТОВАРЫ
	Если  СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом
	  ИЛИ СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийВозвратТоваровПоставщику.ИзПереработки Тогда
		// в налоговом учете не учитываются
	Иначе
		ТаблицаКопия = ТаблицаПоТоварам.Скопировать();
		ТаблицаКопия.Свернуть("СтавкаНДС, ДляХозяйственнойДеятельности,ВидДеятельностиНДС,Амортизируется","СуммаСНДСВал, СуммаНДСВал, СуммаНДСВалИсходный");
		
		ТаблицаКопия.Колонки.Добавить("СуммаНДСПропорционально");
		Для каждого СтрокаКопии Из ТаблицаКопия Цикл
			Если СтрокаКопии.ВидДеятельностиНДС = Перечисления.ВидыДеятельностиНДС.ПропорциональноОблагаемая Тогда
				СтрокаКопии.СуммаНДСПропорционально = СтрокаКопии.СуммаНДСВал;
				СтрокаКопии.СуммаНДСВал = СтрокаКопии.СуммаНДСВалИсходный;
			КонецЕсли;
		КонецЦикла;
		
		ТаблицаКопия.Колонки.СуммаСНДСВал.Имя = "СуммаВзаиморасчетов";
		ТаблицаКопия.Колонки.СуммаНДСВал.Имя  = "СуммаНДС";
		ОбщегоНазначенияБПВызовСервера.ЗагрузитьВТаблицуЗначений(ТаблицаКопия, ТаблицаДвижений);
		
	КонецЕсли;		
	
	ТаблицаДвижений.ЗаполнитьЗначения(Организация       , "Организация");
	ТаблицаДвижений.ЗаполнитьЗначения(ДоговорКонтрагента, "ДоговорКонтрагента");
	ТаблицаДвижений.ЗаполнитьЗначения(НалоговыйУчет.ОпределитьСделкуНалоговыйУчет(СтруктураШапкиДокумента,
																	СтруктураШапкиДокумента.Ссылка, 
																	СтруктураШапкиДокумента.Сделка),
									  "Сделка");
	ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СобытияПриобретенияНалоговыйУчет.ВозвратПоставщику, "Событие");
	
	Если СтруктураШапкиДокумента.СложныйНалоговыйУчет Тогда
		
		// очистим налоговые реквизиты
		ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтавкиНДС.ПустаяСсылка(), 			"СтавкаНДС");
		ТаблицаДвижений.ЗаполнитьЗначения(Ложь, 										   	"ДляХозяйственнойДеятельности");
		ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.ВидыДеятельностиНДС.ПустаяСсылка(), 	"ВидДеятельностиНДС");
		ТаблицаДвижений.ЗаполнитьЗначения(Ложь,												"Амортизируется");
		ТаблицаДвижений.ЗаполнитьЗначения(0, 												"СуммаНДС");
		ТаблицаДвижений.ЗаполнитьЗначения(0, 												"СуммаНДСПропорционально");
		
	Иначе		
		
		Если СтруктураШапкиДокумента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоРасчетнымДокументам Тогда
			// взаиморасчеты по договору по расчетным документам - необходимо заполнить в регистре реквизит РасчетныйДокумент
			ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.Сделка, "РасчетныйДокумент");
			ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.СчетУчетаНДСПодтвержденный, "СчетУчетаНДСПодтвержденный");
		КонецЕсли;			
		
	КонецЕсли;		
	
	//ТАРА
	ТаблицаКопия = ТаблицаПоТаре.Скопировать();
	ТаблицаКопия.Свернуть("СтавкаНДС, ДляХозяйственнойДеятельности,ВидДеятельностиНДС","СуммаСНДСВал, СуммаНДСВал");
	ТаблицаКопия.Колонки.СуммаСНДСВал.Имя = "СуммаВзаиморасчетов";
	ТаблицаКопия.Колонки.СуммаНДСВал.Имя  = "СуммаНДС";
	ОбщегоНазначенияБПВызовСервера.ЗагрузитьВТаблицуЗначений(ТаблицаКопия, ТаблицаДвиженийТара);
	ТаблицаДвиженийТара.ЗаполнитьЗначения(Организация       , "Организация");
	ТаблицаДвиженийТара.ЗаполнитьЗначения(ДоговорКонтрагента, "ДоговорКонтрагента");
	ТаблицаДвиженийТара.ЗаполнитьЗначения(НалоговыйУчет.ОпределитьСделкуНалоговыйУчет(СтруктураШапкиДокумента,
																	СтруктураШапкиДокумента.Ссылка, 
																	СтруктураШапкиДокумента.Сделка),
									  "Сделка");
	ТаблицаДвиженийТара.ЗаполнитьЗначения(Перечисления.СобытияПриобретенияНалоговыйУчет.ВозвратПоставщику, "Событие");
    ТаблицаДвиженийТара.ЗаполнитьЗначения(Истина, "ВозвратнаяТара");
	
	Если СтруктураШапкиДокумента.СложныйНалоговыйУчет Тогда
		
		// очистим налоговые реквизиты
		ТаблицаДвиженийТара.ЗаполнитьЗначения(Перечисления.СтавкиНДС.ПустаяСсылка(), 			"СтавкаНДС");
		ТаблицаДвиженийТара.ЗаполнитьЗначения(Ложь, 										   	"ДляХозяйственнойДеятельности");
		ТаблицаДвиженийТара.ЗаполнитьЗначения(Перечисления.ВидыДеятельностиНДС.ПустаяСсылка(), 	"ВидДеятельностиНДС");
		ТаблицаДвиженийТара.ЗаполнитьЗначения(0, 												"СуммаНДС");
		
	Иначе		
		
		Если СтруктураШапкиДокумента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоРасчетнымДокументам Тогда
			// взаиморасчеты по договору по расчетным документам - необходимо заполнить в регистре реквизит РасчетныйДокумент
			ТаблицаДвиженийТара.ЗаполнитьЗначения(Сделка, "РасчетныйДокумент");
		КонецЕсли;
		
	КонецЕсли;		
	
	Если НЕ Отказ И ТаблицаДвижений.Количество() > 0 Тогда
			
		НаборДвижений.мПериод          = Дата;
		НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;
			
		Движения.ПриобретенияНалоговыйУчет.ВыполнитьПриход();
		Движения.ПриобретенияНалоговыйУчет.Записать();
			
	КонецЕсли;
	
	Если НЕ Отказ И ТаблицаДвиженийТара.Количество() > 0 Тогда
			
		НаборДвижений.мПериод          = Дата;
		НаборДвижений.мТаблицаДвижений = ТаблицаДвиженийТара;
			
		Движения.ПриобретенияНалоговыйУчет.ВыполнитьПриход();
		Движения.ПриобретенияНалоговыйУчет.Записать();
			
	КонецЕсли;
		
	// Движения по регистру Ожидаемый и подтвержденный НДС приобретений
	Если НЕ СтруктураШапкиДокумента.СложныйНалоговыйУчет Тогда
		// Движения формируются по данным рассчета "первого события" 
	   НалоговыйУчет.ДвиженияПоРегистрамНалоговогоУчетаУпрощенныйНалоговыйУчет(ЭтотОбъект, ТаблицаПоВторомуСобытиюНал);
	
	ИначеЕсли СтруктураШапкиДокумента.ВалютаВзаиморасчетов = мВалютаРегламентированногоУчета Тогда

		НаборДвижений = Движения.ОжидаемыйИПодтвержденныйНДСПриобретений;
		
		// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
		ТаблицаДвижений = НаборДвижений.Выгрузить();
		
		
		Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийВозвратТоваровПоставщику.ИзПереработки Тогда
			// в налоговом учете не учитываются
		Иначе
			// ТОВАРЫ
			ТаблицаКопия = ТаблицаПоТоварам.Скопировать();
			ТаблицаКопия.Свернуть("СтавкаНДС,ДляХозяйственнойДеятельности,ВидДеятельностиНДС,Амортизируется","СуммаБезНДСВал,СуммаНДСВал,СуммаНДСВалИсходный");
			
			ТаблицаКопия.Колонки.Добавить("СуммаНДСПропорционально");
			Для каждого СтрокаКопии Из ТаблицаКопия Цикл
				Если СтрокаКопии.ВидДеятельностиНДС = Перечисления.ВидыДеятельностиНДС.ПропорциональноОблагаемая Тогда
					СуммаСНДСВал = СтрокаКопии.СуммаБезНДСВал  + СтрокаКопии.СуммаНДСВал;
					СтрокаКопии.СуммаНДСПропорционально = СтрокаКопии.СуммаНДСВал;
					СтрокаКопии.СуммаНДСВал 			= СтрокаКопии.СуммаНДСВалИсходный;
					СтрокаКопии.СуммаБезНДСВал 			= СуммаСНДСВал - СтрокаКопии.СуммаНДСВал;
				КонецЕсли;
			КонецЦикла;
			
			ТаблицаКопия.Колонки.СуммаБезНДСВал.Имя = "БазаНДС";
			ТаблицаКопия.Колонки.СуммаНДСВал   .Имя = "СуммаНДС";
			ОбщегоНазначенияБПВызовСервера.ЗагрузитьВТаблицуЗначений(ТаблицаКопия, ТаблицаДвижений);
			ТаблицаДвижений.ЗаполнитьЗначения(Организация       , "Организация");
			ТаблицаДвижений.ЗаполнитьЗначения(ДоговорКонтрагента, "ДоговорКонтрагента");
			ТаблицаДвижений.ЗаполнитьЗначения(НалоговыйУчет.ОпределитьСделкуНалоговыйУчет(СтруктураШапкиДокумента,
																			СтруктураШапкиДокумента.Ссылка, 
																			СтруктураШапкиДокумента.Сделка),
											  	"Сделка");
			ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СобытияОжидаемыйИПодтвержденныйНДСПриобретений.Возврат, "СобытиеНДС");
			ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.КодыОперацийОжидаемыйИПодтвержденныйНДСПриобретений.ОжидаемыйНДС , "КодОперации");
			
		КонецЕсли;

		Если НЕ Отказ И ТаблицаДвижений.Количество() > 0 Тогда
			
			НаборДвижений.мПериод          = Дата;
			НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;
		
			Движения.ОжидаемыйИПодтвержденныйНДСПриобретений.ВыполнитьПриход();
			Движения.ОжидаемыйИПодтвержденныйНДСПриобретений.Записать();
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ТаблицаПоВторомуСобытиюНал;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)

	ТипДанныхЗаполнения = ТипЗнч(ДанныеЗаполнения);
	ЗаполнятьПоОснованию = ДанныеЗаполнения <> Неопределено И ТипДанныхЗаполнения <> Тип("Структура")
		И Метаданные().ВводитсяНаОсновании.Содержит(ДанныеЗаполнения.Метаданные());
	Если ЗаполнятьПоОснованию Тогда
		ЗаполнитьПоДокументуОснованию(ДанныеЗаполнения);
	Иначе
		СуммаВключаетНДС = Ложь;
	КонецЕсли;
	ЗаполнениеДокументов.Заполнить(ЭтотОбъект, ДанныеЗаполнения);
	
	Если НЕ ЗаполнятьПоОснованию
		И ЗначениеЗаполнено(Организация)
		И ЗначениеЗаполнено(Контрагент)
		И ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
		Документы.ВозвратТоваровПоставщику.ЗаполнитьСчетаУчетаРасчетов(ЭтотОбъект);
	КонецЕсли;

    Если ЗначениеЗаполнено(Организация) Тогда
		СчетаУчетаДоходов = БухгалтерскийУчетПереопределяемый.ПолучитьСчетУчетаПрочий(Организация, Перечисления.ВидыПрочихСчетовУчета.СчетДоходовВозвратПоставщику);
		СчетУчетаДоходовБУ 	= СчетаУчетаДоходов.СчетУчетаБУ;
		СубконтоДоходов1 	= СчетаУчетаДоходов.Субконто1;
		СубконтоДоходов2 	= СчетаУчетаДоходов.Субконто2;
		СубконтоДоходов3 	= СчетаУчетаДоходов.Субконто3;
	
		СчетаУчетаЗатрат = БухгалтерскийУчетПереопределяемый.ПолучитьСчетУчетаПрочий(Организация, Перечисления.ВидыПрочихСчетовУчета.СчетЗатратВозвратПоставщику);
		СчетУчетаРасходовБУ = СчетаУчетаЗатрат.СчетУчетаБУ;
		СубконтоРасходов1 	= СчетаУчетаЗатрат.Субконто1;
		СубконтоРасходов2 	= СчетаУчетаЗатрат.Субконто2;
		СубконтоРасходов3 	= СчетаУчетаЗатрат.Субконто3;
	КонецЕсли;

КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)

	Дата = НачалоДня(ОбщегоНазначенияБП.ПолучитьРабочуюДату());
	Ответственный = Пользователи.ТекущийПользователь();

	СтруктураКурсаВзаиморасчетов = РаботаСКурсамиВалют.ПолучитьКурсВалюты(
	ВалютаДокумента, Дата);
	
	КурсВзаиморасчетов      = СтруктураКурсаВзаиморасчетов.Курс;
	КратностьВзаиморасчетов = СтруктураКурсаВзаиморасчетов.Кратность;
	
	Если Год(ОбъектКопирования.Дата) <> Год(Дата) Тогда
		Документы.ВозвратТоваровПоставщику.РассчитатьПропорциональныйНДС(ЭтотОбъект,
			УчетнаяПолитика.ПлательщикНДС(Организация, Дата),
			НалоговыйУчет.ПолучитьКоэффициентПропорциональногоНДС(Организация, Дата)
			);
	КонецЕсли;
	
	Звит1С_DOC_ID = "";

КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	МассивНепроверяемыхРеквизитов = Новый Массив;
	
	ПлательщикНДС = УчетнаяПолитика.ПлательщикНДС(Организация, Дата);	

	РеквизитыДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДоговорКонтрагента, "ВидДоговора, СложныйНалоговыйУчет, СхемаНалоговогоУчета");
	ВидДоговора          = РеквизитыДоговора.ВидДоговора;
	СложныйНалоговыйУчет = ЗначениеЗаполнено(ДоговорКонтрагента) И (РеквизитыДоговора.СложныйНалоговыйУчет);
	ЭтоКомиссия          = ЗначениеЗаполнено(ДоговорКонтрагента) И (РеквизитыДоговора.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом);

	ТипСклада   = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Склад, "ТипСклада");
	
	Если ВидОперации = Перечисления.ВидыОперацийВозвратТоваровПоставщику.ИзПереработки
	 ИЛИ ЭтоКомиссия Тогда
		МассивНепроверяемыхРеквизитов.Добавить("СчетУчетаДоходовБУ");
		МассивНепроверяемыхРеквизитов.Добавить("СчетУчетаРасходовБУ");
		МассивНепроверяемыхРеквизитов.Добавить("СчетУчетаРасчетовСКонтрагентом");
	КонецЕсли;

	Если ВидОперации = Перечисления.ВидыОперацийВозвратТоваровПоставщику.ИзПереработки Тогда
		МассивНепроверяемыхРеквизитов.Добавить("СчетУчетаНДС");		
		МассивНепроверяемыхРеквизитов.Добавить("СчетУчетаНДСПодтвержденный");		
	Иначе	 
		Если Не РеализацияТоваровУслугФормыКлиентСервер.ИспользуетсяСчетУчетаНДС(ПлательщикНДС, ЭтоКомиссия, Дата) Тогда
			МассивНепроверяемыхРеквизитов.Добавить("СчетУчетаНДС");		
		КонецЕсли;
		Если Не РеализацияТоваровУслугФормыКлиентСервер.ИспользуетсяСчетУчетаНДСПодтвержденный(ПлательщикНДС, ЭтоКомиссия, Дата, СложныйНалоговыйУчет) Тогда
			МассивНепроверяемыхРеквизитов.Добавить("СчетУчетаНДСПодтвержденный");		
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
		ТекстСообщения = "";
		Если НЕ УчетВзаиморасчетов.ПроверитьВозможностьПроведенияВРеглУчете(
			ЭтотОбъект, ДоговорКонтрагента, ТекстСообщения) Тогда
			ТекстСообщения = ОбщегоНазначенияБПКлиентСервер.ПолучитьТекстСообщения(, "Корректность",
				НСтр("ru='Договор';uk='Договір'"),,, ТекстСообщения);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект,
				"ДоговорКонтрагента", "Объект", Отказ);
		КонецЕсли;
	КонецЕсли;
	
	Если ПлательщикНДС И ЭтоКомиссия Тогда
		
		Если Не ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
			// Проверку не выполняем
			
		ИначеЕсли НЕ РеквизитыДоговора.СхемаНалоговогоУчета = Справочники.СхемыНалоговогоУчетаПоДоговорамКонтрагентов.СКомитентом_НК Тогда
			ТекстСообщения = ОбщегоНазначенияБПКлиентСервер.ПолучитьТекстСообщения(, "Корректность",
			    НСтр("ru='Договор';uk='Договір'"),,,
				НСтр("ru='В договоре комиссии указана неправильная схема налогового учета! Используйте схему для периода с 2011 года!';uk='У договорі комісії зазначена неправильна схема податкового обліку! Використайте схему для періоду з 2011 року!'")
			);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, "ДоговорКонтрагента", "Объект", Отказ);
			
		ИначеЕсли НЕ СложныйНалоговыйУчет Тогда			
			ТекстСообщения = ОбщегоНазначенияБПКлиентСервер.ПолучитьТекстСообщения(, "Корректность",
			    НСтр("ru='Договор';uk='Договір'"),,,
				НСтр("ru='По договорам комиссии с 2011 года в конфигурации реализован только ""Сложный налоговый учет"". Установите соответствующий флаг в договоре с контрагентом!';uk='За договорами комісії з 2011 року в конфігурації реалізований тільки ""Складний податковий облік"". Встановіть відповідний прапор в договорі з контрагентом!'")
			);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, "ДоговорКонтрагента", "Объект", Отказ);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьВозвратнуюТару") 
		ИЛИ ВозвратнаяТара.Количество() = 0 Тогда
		МассивНепроверяемыхРеквизитов.Добавить("СчетУчетаРасчетовПоТаре");
	КонецЕсли;
		
	БУ = ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахНТТ.ПолучитьОбъект();
	РазделятьПоСтавкамНДС  = ?(
		БУ.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтавкиНДС, "ВидСубконто") = Неопределено,
		Ложь,
		Истина);
	
	СпособОценкиТоваровВРознице = УчетнаяПолитика.СпособОценкиТоваровВРознице(Организация, Дата);
	УчетВПродажныхЦенах = СпособОценкиТоваровВРознице = Перечисления.СпособыОценкиТоваровВРознице.ПоПродажнойСтоимости;
	
	НТТ = УчетВПродажныхЦенах И (ТипСклада = Перечисления.ТипыСкладов.НеавтоматизированнаяТорговаяТочка);
	
	// Проверка табличной части "Товары"
	РозницаВПродажныхЦенах =
		ВидОперации = Перечисления.ВидыОперацийВозвратТоваровПоставщику.ПокупкаКомиссия
		И УчетВПродажныхЦенах
		И ТипСклада <> Перечисления.ТипыСкладов.ОптовыйСклад
		И Не ЭтоКомиссия;
		
	Если РозницаВПродажныхЦенах Тогда	
		МассивНепроверяемыхРеквизитов.Добавить("Товары.СчетУчетаБУ"); // счета будут заполнены ПередЗаписью
	КонецЕсли;

	Если НТТ И Не ЭтоКомиссия Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Товары.Номенклатура");
		МассивНепроверяемыхРеквизитов.Добавить("Товары.ЕдиницаИзмерения");
		МассивНепроверяемыхРеквизитов.Добавить("Товары.Количество");
		МассивНепроверяемыхРеквизитов.Добавить("Товары.Сумма");
		МассивНепроверяемыхРеквизитов.Добавить("Товары.СчетУчетаБУ");
		Если НЕ РазделятьПоСтавкамНДС Тогда
			МассивНепроверяемыхРеквизитов.Добавить("Товары.СтавкаНДСВРознице");
		КонецЕсли;
	Иначе
		МассивНепроверяемыхРеквизитов.Добавить("Товары.СуммаВРознице");
		МассивНепроверяемыхРеквизитов.Добавить("Товары.СтавкаНДСВРознице");
	КонецЕсли;
	
	Если Не ПлательщикНДС
	 ИЛИ ВидОперации = Перечисления.ВидыОперацийВозвратТоваровПоставщику.ИзПереработки 
	 ИЛИ ЭтоКомиссия Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Товары.НалоговоеНазначение");
	КонецЕсли;	
	
	
	// Проверка табличной части "Возвратная тара"
	
	// Исключаем из проверки те реквизиты табличных частей, обязательность которых
	//	зависит от значений других рекивизитов в строках табличных частей:
	МассивНепроверяемыхРеквизитов.Добавить("ВозвратнаяТара.НалоговоеНазначение");
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьВозвратнуюТару")
		ИЛИ ВидОперации = Перечисления.ВидыОперацийВозвратТоваровПоставщику.ИзПереработки Тогда
		МассивНепроверяемыхРеквизитов.Добавить("ВозвратнаяТара.Номенклатура");
		МассивНепроверяемыхРеквизитов.Добавить("ВозвратнаяТара.Количество");
		МассивНепроверяемыхРеквизитов.Добавить("ВозвратнаяТара.Сумма");
		МассивНепроверяемыхРеквизитов.Добавить("ВозвратнаяТара.СчетУчетаБУ");
	Иначе
		Для Каждого СтрокаТаблицы Из ВозвратнаяТара Цикл
			
			Префикс = "ВозвратнаяТара[" + Формат(СтрокаТаблицы.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].";
			ИмяСписка = НСтр("ru='Возвратная тара';uk='Зворотна тара'");
			
			Если ПлательщикНДС Тогда
				
				Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.НалоговоеНазначение) Тогда
					
					ТекстСообщения = ОбщегоНазначенияБПКлиентСервер.ПолучитьТекстСообщения("Колонка",, 
						НСтр("ru='Налоговое назначение (НДС)';uk='Податкове призначення (ПДВ)'"),
						СтрокаТаблицы.НомерСтроки, ИмяСписка
					);
					Поле = Префикс + "НалоговоеНазначение";
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
					
				ИначеЕсли СтрокаТаблицы.НалоговоеНазначение = Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяНеХозДеятельность Тогда	
					
					ТекстСообщения = ОбщегоНазначенияБПКлиентСервер.ПолучитьТекстСообщения("Колонка", "Корректность", 
						НСтр("ru='Налоговое назначение (НДС)';uk='Податкове призначення (ПДВ)'"),
						СтрокаТаблицы.НомерСтроки, ИмяСписка,
						НСтр("ru='Вид налоговой деятельности при реализации не может быть ""Не хозяйственной деятельностью"".';uk='Вид податкової діяльності при реалізації не може бути ""Не господарською діяльністю"".'")
					);
					Поле = Префикс + "НалоговоеНазначение";
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
					
				КонецЕсли;
				
			КонецЕсли;

		КонецЦикла;

	КонецЕсли;
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ПлательщикНДС               = УчетнаяПолитика.ПлательщикНДС(Организация, Дата);	
	
	СпособОценкиТоваровВРознице = УчетнаяПолитика.СпособОценкиТоваровВРознице(Организация, Дата);
	УчетВПродажныхЦенах = СпособОценкиТоваровВРознице = Перечисления.СпособыОценкиТоваровВРознице.ПоПродажнойСтоимости;
	
	// Посчитать суммы документа и записать ее в соответствующий реквизит шапки для показа в журналах
	СуммаДокумента = УчетНДС.ПолучитьСуммуДокументаСНДС(ЭтотОбъект, "Товары");
	
	ТипСклада = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Склад, "ТипСклада");
	РозницаВПродажныхЦенах =
		ВидОперации = Перечисления.ВидыОперацийВозвратТоваровПоставщику.ПокупкаКомиссия
		И УчетВПродажныхЦенах
		И ТипСклада <> Перечисления.ТипыСкладов.ОптовыйСклад
		И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДоговорКонтрагента, "ВидДоговора")
			<> Перечисления.ВидыДоговоровКонтрагентов.СКомитентом;
	
	Если РозницаВПродажныхЦенах Тогда
		Для Каждого Строка Из Товары Цикл
			Если ТипСклада = Перечисления.ТипыСкладов.РозничныйМагазин Тогда
				Строка.СчетУчетаБУ = ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахАТТ;
			Иначе
				Строка.СчетУчетаБУ = ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахНТТ;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если (НЕ ПолучитьФункциональнуюОпцию("ИспользоватьВозвратнуюТару")
		ИЛИ ВидОперации = Перечисления.ВидыОперацийВозвратТоваровПоставщику.ИзПереработки)
		И ВозвратнаяТара.Количество() > 0 Тогда
		ВозвратнаяТара.Очистить();
	КонецЕсли;
	
	СчетУчетаРасчетовПоАвансам       = СчетУчетаРасчетовСКонтрагентом;	
	СчетУчетаРасчетовПоТареПоАвансам = СчетУчетаРасчетовПоТаре;	
	
	Если Не ПлательщикНДС Тогда
		// организация - не плательщик НДС. Установим во всех ТЧ признак соответствующего учета НДС
		НеОБлНДСДеятельность = Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяХозДеятельность;
		
		Для каждого СтрокаТЧ  Из Товары Цикл
		    СтрокаТЧ.НалоговоеНазначение = НеОБлНДСДеятельность;
		КонецЦикла; 
		Для каждого СтрокаТЧ  Из ВозвратнаяТара Цикл
		    СтрокаТЧ.НалоговоеНазначение = НеОБлНДСДеятельность;
		КонецЦикла; 
	КонецЕсли; 
	
	ДополнительныеСвойства.Вставить("РежимЗаписи", РежимЗаписи);
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)

	Перем Заголовок, СтруктураШапкиДокумента;
	Перем ТаблицаПоТоварам, ТаблицаПоТаре;

	// ПОДГОТОВКА ПРОВЕДЕНИЯ ПО ДАННЫМ ДОКУМЕНТА
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКПроведению(ЭтотОбъект);
	Если РучнаяКорректировка Тогда
		Возврат;
	КонецЕсли;
	
    мВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	
	СпособОценкиТоваровВРознице     = УчетнаяПолитика.СпособОценкиТоваровВРознице(Организация, Дата);	
	мУчетВПродажныхЦенах = (СпособОценкиТоваровВРознице = Перечисления.СпособыОценкиТоваровВРознице.ПоПродажнойСтоимости);
	
	мРазделятьПоСтавкамНДС = БухгалтерскийУчетВызовСервераПовтИсп.ИспользуетсяРазделениеПоСтавкамНДСВНТТ();
			
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначенияБПВызовСервера.ПредставлениеДокументаПриПроведении(Ссылка);
	
	ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента);
	ПодготовитьПараметрыУчетнойПолитики(СтруктураШапкиДокумента, Отказ, Заголовок);	
	ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоТаре, Отказ, Заголовок);
	
	// Движения по документу
	Если Не Отказ Тогда
		ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоТаре, Отказ, Заголовок);
	КонецЕсли;
	
	Движения.Хозрасчетный.ВыполнитьДействияПередЗаписьюДвижений();
	
	// ИНАГРО++
	Если  ВидОперации = Перечисления.ИНАГРО_ВидыОперацийПриходныйОрдер.Перемещение
		И РежимПроведения = РежимПроведенияДокумента.Оперативный Тогда
		Движения.ИНАГРО_ТоварыНаСкладах.КонтрольОстатков(ЭтотОбъект, "Товары",         СтруктураШапкиДокумента, Отказ, Заголовок);
		Движения.ИНАГРО_ТоварыНаСкладах.КонтрольОстатков(ЭтотОбъект, "ВозвратнаяТара", СтруктураШапкиДокумента, Отказ, Заголовок);
	КонецЕсли;
	
	Если ИНАГРО_ОбщийВызовСервераПовтИсп.ЕстьБСПУ() Тогда
		КопияТаблицаПоТоварам = ТаблицаПоТоварам.Скопировать();
		КопияТаблицаПоТоварам.Колонки.Добавить("НаправлениеДвижения");
		КопияТаблицаПоТоварам.ЗаполнитьЗначения(Справочники.ИНАГРО_ВидыДвиженийВедомости.Возврат, "НаправлениеДвижения");
		ИНАГРО_Общий.ИНАГРО_ВедомостьДвиженийРасход(Движения, КопияТаблицаПоТоварам, СтруктураШапкиДокумента);
	КонецЕсли; 	
	
	Если НЕ Отказ И ИНАГРО_ВидПередачи = Перечисления.ИНАГРО_ВидыПередачиТоваров.ПоОрдеру Тогда
		
		СтруктТаблицДокумента = Новый Структура;
		СтруктТаблицДокумента.Вставить("ТаблицаПоТоварам", ТаблицаПоТоварам);
		СтруктТаблицДокумента.Вставить("ТаблицаПоТаре",    ТаблицаПоТаре);
				
		ТаблицыДанныхДокумента = ЗагрузитьТаблицыДокументаВСтруктуру(Движения.ИНАГРО_ТоварыНаСкладах, СтруктТаблицДокумента);
			
        ДокПеремещения =  Ссылка;
		
		УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Склад",          Склад);
        УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ВозвратнаяТара", Истина, "ТаблицаПоТаре");
		
		ЗаписатьТаблицыДокументаВРегистр(Движения.ИНАГРО_ТоварыНаСкладах, ВидДвиженияНакопления.Приход, ТаблицыДанныхДокумента, Дата);
		
	КонецЕсли;
    // ИНАГРО--
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКЗаписиДвижений(ЭтотОбъект);
	

КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)

	ПроведениеСервер.ПодготовитьНаборыЗаписейКОтменеПроведения(ЭтотОбъект);
	Движения.Записать();

	
КонецПроцедуры

// Функция загружает таблицы документа
//
Функция ЗагрузитьТаблицыДокументаВСтруктуру(Движение, СтруктТаблицДокумента) Экспорт
	
	ПустаяТабРегистра = Движение.Выгрузить();
	ПустаяТабРегистра.Очистить();
	
	СтруктДанных = Новый Структура;
	Для Каждого ТабЧасть Из СтруктТаблицДокумента Цикл
		
		ТабРегистра = ПустаяТабРегистра.Скопировать();
		
		Если ТабЧасть.Значение <> Неопределено И ТабЧасть.Значение.Количество() > 0 Тогда
			ЗагрузитьВТаблицуЗначений( ТабЧасть.Значение, ТабРегистра);
		КонецЕсли;
		
		СтруктДанных.Вставить( ТабЧасть.Ключ, ТабРегистра);
		
	КонецЦикла;
	
	Возврат СтруктДанных;
	
КонецФункции 

// Процедура загружает таблицы документа
//
Процедура ЗагрузитьВТаблицуЗначений(ТаблицаИсточник, ТаблицаПриемник) Экспорт
	
	// Заполним значения в совпадающих колонках.
	Для каждого СтрокаТаблицыИсточника Из ТаблицаИсточник Цикл
		
		СтрокаТаблицыПриемника = ТаблицаПриемник.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицыПриемника, СтрокаТаблицыИсточника);
		
	КонецЦикла;
	
КонецПроцедуры 

// Заполнение данных
//
Процедура УстановитьЗначениеВТаблицыДокумента(СтруктТаблицДокумента, ИмяПоля, УстанавливаемоеЗначение, СтрТабЧасти = "") Экспорт
	
	СтруктТабЧасти = ?( ПустаяСтрока(СтрТабЧасти), СтруктТаблицДокумента, Новый Структура(СтрТабЧасти));
	Для Каждого ТабЧасть Из СтруктТабЧасти Цикл
		
		Если СтруктТаблицДокумента[ТабЧасть.Ключ].Количество() > 0 Тогда
			СтруктТаблицДокумента[ТабЧасть.Ключ].ЗаполнитьЗначения( УстанавливаемоеЗначение, ИмяПоля);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры 

// Заполнение данных
//
Процедура ЗаписатьТаблицыДокументаВРегистр(Движение, ВидДвижения, СтруктТаблицДокумента, ДатаДвижения) Экспорт
	
	Движение.мПериод = ДатаДвижения;
	Для Каждого ТабЧасть Из СтруктТаблицДокумента Цикл
		
		Если ТабЧасть.Значение.Количество() = 0 Тогда
			Продолжить; // Пропускаем пустые табличные части
		КонецЕсли;
		
		Движение.мТаблицаДвижений = ТабЧасть.Значение;
		Если ВидДвижения = Неопределено Тогда // Регистр сведений
			ОбщегоНазначенияРед12.ВыполнитьДвижениеПоРегистру(Движение);
		Иначе // Регистр накопления
			ОбщегоНазначенияРед12.ВыполнитьДвижениеПоРегистру(Движение, ВидДвижения);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры 

#КонецЕсли