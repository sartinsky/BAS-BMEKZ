#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	
	Если Параметры.Ключ.Пустая() Тогда
		ПодготовитьФормуНаСервере();
	КонецЕсли;

	// Активизировать первую непустую табличную часть
	СписокТабличныхЧастей = Новый СписокЗначений;
	СписокТабличныхЧастей.Добавить("Товары", "Товары");
	СписокТабличныхЧастей.Добавить("ВозвратнаяТара", "ВозвратнаяТара");
	
	АктивизироватьТабличнуюЧасть = ОбщегоНазначенияБПВызовСервера.ПолучитьПервуюНепустуюВидимуюТабличнуюЧасть(
		ЭтаФорма, СписокТабличныхЧастей);
	ОбщегоНазначенияБПВызовСервера.АктивизироватьЭлементФормы(ЭтаФорма, АктивизироватьТабличнуюЧасть);
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)

	Если ИсточникВыбора.ИмяФормы = "Обработка.ПодборНоменклатуры.Форма.Форма" Тогда
		ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение, ИсточникВыбора.ИмяТаблицы);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)

	Если ИмяСобытия = "ОбработанаТабличнаяЧастьТовары" И ТипЗнч(Параметр) = Тип("Структура") 
		И Параметр.Свойство("ИдентификаторВызывающейФормы")
		И Параметр.ИдентификаторВызывающейФормы = УникальныйИдентификатор Тогда
		ОбработкаОповещенияОбработкиТабличнойЧастиТоварыНаСервере(Параметр);
	Иначе
		ОбщегоНазначенияБПКлиент.ОбработкаОповещенияФормыДокумента(ЭтаФорма, Объект.Ссылка, ИмяСобытия, Параметр, Источник);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом

	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	ПодготовитьФормуНаСервере();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	ЗаполнитьДобавленныеКолонкиТаблиц();
		
	УстановитьСостояниеДокумента();

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

#КонецОбласти    //ОбработчикиСобытийФормы

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ВидОперацииПриИзменении(Элемент)

	ВидОперацииПриИзмененииНаСервере();

КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)

	Если НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДатаДокумента) Тогда
		// Изменение времени не влияет на поведение документа.
		ТекущаяДатаДокумента = Объект.Дата;
		Возврат;
	КонецЕсли;

	// Общие проверки условий по датам.
	ТребуетсяВызовСервера = ОбщегоНазначенияБПКлиент.ТребуетсяВызовСервераПриИзмененииДатыДокумента(Объект.Дата, 
		ТекущаяДатаДокумента, Объект.ВалютаДокумента, ВалютаРегламентированногоУчета);
		
	// Если определили, что изменение даты может повлиять на какие-либо параметры, 
	// то передаем обработку на сервер.
	Если ТребуетсяВызовСервера Тогда
		ДатаПриИзмененииНаСервере();
	КонецЕсли;
	
	// Запомним новую дату документа.
	ТекущаяДатаДокумента = Объект.Дата;

КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)

	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		ОрганизацияПриИзмененииНаСервере();
	Иначе
		УстановитьПараметрыВыбораДокументаПоступления(ЭтаФорма);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СкладПриИзменении(Элемент)

	// Заполним значение реквизита формы НТТ
	ЗаполнитьРеквизитыСкладаНаСервере();
	
	ОпределитьНеобходимостьРасчетаСуммыВРознице(ЭтаФорма);
	
	Если НТТ И РассчитыватьСуммаВРознице Тогда
		ТекстВопроса = НСтр("ru='Свернуть табличную часть по номенклатуре?';uk='Згорнути табличну частину по номенклатурі?'");
		ЗаголовокВопроса = НСтр("ru='Свертка по номенклатуре';uk='Згортка по номенклатурі'");
		Оповещение = Новый ОписаниеОповещения("ВопросСвернутьТабличнуюЧастьЗавершение", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , , ЗаголовокВопроса);
	Иначе
		ТоварыСвернуты	= Ложь;
		ПриИзменииСклада();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)

	Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
		КонтрагентПриИзмененииНаСервере();
	Иначе
		УстановитьПараметрыВыбораДокументаПоступления(ЭтаФорма);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДоговорКонтрагентаПриИзменении(Элемент)

	Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		ДоговорКонтрагентаПриИзмененииНаСервере();
	Иначе
		УстановитьПараметрыВыбораДокументаПоступления(ЭтаФорма);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СделкаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;

	ПараметрыОбъекта = Новый Структура;
	ПараметрыОбъекта.Вставить("Дата"                 , Объект.Дата);
	ПараметрыОбъекта.Вставить("ДоговорКонтрагента"   , Объект.ДоговорКонтрагента);
	ПараметрыОбъекта.Вставить("Контрагент"           , Объект.Контрагент);
	ПараметрыОбъекта.Вставить("СчетУчета"            , Объект.СчетУчетаРасчетовСКонтрагентом);
	ПараметрыОбъекта.Вставить("Организация"          , Объект.Организация);
	ПараметрыОбъекта.Вставить("ОстаткиОбороты"       , "Кт");
	ПараметрыОбъекта.Вставить("ТипыДокументов"       , "Метаданные.Документы.ВозвратТоваровПоставщику.Реквизиты.Сделка.Тип");

	ПараметрыФормы = Новый Структура("ПараметрыОбъекта", ПараметрыОбъекта);
	ОткрытьФорму("Документ.ДокументРасчетовСКонтрагентом.ФормаВыбора", ПараметрыФормы, Элемент);
		
КонецПроцедуры

&НаКлиенте
Процедура ЦеныИВалютаНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОбработатьИзмененияПоКнопкеЦеныИВалюты();
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументПоступленияПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.ДокументПоступления) Тогда
		ДокументПоступленияПриИзмененииНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СчетУчетаПриИзменении(Элемент)
	
	НастроитьСубконтоПриИзмененииСчета(ЭтаФорма, Элемент.Имя);

КонецПроцедуры

&НаКлиенте
Процедура СчетУчетаДоходовСубконтоПриИзменении(Элемент)
	
	НастроитьСубконтоПриИзмененииСубконто(ЭтаФорма, "СчетУчетаДоходовБУ");
	
КонецПроцедуры

&НаКлиенте
Процедура СчетУчетаРасходовСубконтоПриИзменении(Элемент)
	
	НастроитьСубконтоПриИзмененииСубконто(ЭтаФорма, "СчетУчетаРасходовБУ");
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучилНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)	
	
	УправлениеКонтактнойИнформациейБП.ПредставительКонтрагентаНачалоВыбора(Объект.Контрагент, ДанныеВыбора, СтандартнаяОбработка);
		
КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(
		Элемент.ТекстРедактирования,
		ЭтотОбъект,
		"Объект.Комментарий"
	);

КонецПроцедуры

&НаКлиенте
Процедура ПолучилПоДругомуДокументуПриИзменении(Элемент)
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти	 //ОбработчикиСобытийЭлементовШапкиФормы

#Область ОбработчикиСобытийЭлементовТаблицыФормыТовары

&НаКлиенте
Процедура ТоварыПриИзменении(Элемент)

	РассчитатьПропорциональныйНДС(ПлательщикНДС, КоэффициентПропорциональногоНДС);
	ОбновитьИтоги(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		// Данное значение установлено всегда. Необходимо для информирования
		ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
        ТекущиеДанные.ПоставкаОсновныхФондов = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если НоваяСтрока И ОтменаРедактирования Тогда
		ОбновитьИтоги(ЭтаФорма);
		РассчитатьПропорциональныйНДС(ПлательщикНДС, КоэффициентПропорциональногоНДС);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПослеУдаления(Элемент)
	
	РассчитатьПропорциональныйНДС(ПлательщикНДС, КоэффициентПропорциональногоНДС);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)

	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	ДанныеСтрокиТаблицы = Новый Структура(
		"Номенклатура, ЕдиницаИзмерения, Коэффициент, Количество,
		|НаименованиеПоставщика, 
		|Цена, Сумма, СтавкаНДС, СуммаНДС,
		|СчетУчетаБУ, НалоговоеНазначение, 
		|ЦенаВРознице, СуммаВРознице, СтавкаНДСВРознице,
		|Всего, СчетУчетаБУЗабалансовый, ПоставкаОсновныхФондов");
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, ТекущиеДанные);
	
	ДанныеОбъекта = Новый Структура(
		"Дата, ВидОперации, Организация, Склад, ТипЦен, СуммаВключаетНДС,
		|Контрагент, Звит1С_DOC_ID, 
		|ВалютаДокумента, КурсВзаиморасчетов, КратностьВзаиморасчетов,
		|РассчитыватьСуммаВРознице, ЗаполнятьСтавкуНДСВРознице, ЭтоКомиссия");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	ДанныеОбъекта.РассчитыватьСуммаВРознице		= РассчитыватьСуммаВРознице;
	ДанныеОбъекта.ЗаполнятьСтавкуНДСВРознице	= НТТ И УчетВПродажныхЦенах И РазделениеПоСтавкамВРознице;
	ДанныеОбъекта.ЭтоКомиссия					= ЭтоКомиссия;
	
	ПараметрыОбработки = Новый Структура();
	ПараметрыОбработки.Вставить("ДанныеСтрокиТаблицы", 	ДанныеСтрокиТаблицы);
	ПараметрыОбработки.Вставить("ДанныеОбъекта", 		ДанныеОбъекта);
	Если  ЗначениеЗаполнено(ПараметрыОбработки.ДанныеОбъекта.Звит1С_DOC_ID) 
		И ЗначениеЗаполнено(ПараметрыОбработки.ДанныеСтрокиТаблицы.НаименованиеПоставщика) Тогда
		ОбработатьДанныеСтрокиЭДО(ПараметрыОбработки, "Товары");
	Иначе	
		ТоварыНоменклатураПриИзмененииНаСервере(ПараметрыОбработки.ДанныеСтрокиТаблицы, ПараметрыОбработки.ДанныеОбъекта);
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ПараметрыОбработки.ДанныеСтрокиТаблицы);

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОбработатьДанныеСтрокиЭДО(ПараметрыОбработки, ИмяТЧ)

	СтрокаТЧ		 = ПараметрыОбработки.ДанныеСтрокиТаблицы;
	ДанныеОбъекта	 = ПараметрыОбработки.ДанныеОбъекта;
	
	Если ИмяТЧ = "Товары" Тогда
		// счет получен из Звит. При выборе "нашей" номенклатуры не нужно ничего перезаполнять и пересчитывать, кроме заполнения единицы измерения/коэффициента, если их не заполнили при загрузке
		Если НЕ ЗначениеЗаполнено(СтрокаТЧ.ЕдиницаИзмерения) Тогда
			СтрокаТЧ.ЕдиницаИзмерения = СтрокаТЧ.Номенклатура.БазоваяЕдиницаИзмерения;	
			СтрокаТЧ.Коэффициент 	  = 1;
		ИначеЕсли НЕ ЗначениеЗаполнено(СтрокаТЧ.Коэффициент) Тогда
			 // поищем коэффициент в ТЧ с единицами измерения в товаре
			 СтрокаЕдиниц = СтрокаТЧ.Номенклатура.ЕдиницыИзмерения.Найти(СтрокаТЧ.ЕдиницаИзмерения);
			 Если НЕ СтрокаЕдиниц = Неопределено Тогда
			 	СтрокаТЧ.Коэффициент = СтрокаЕдиниц.Коэффициент;
			 КонецЕсли;
		 КонецЕсли;	 
	КонецЕсли;

	Если  ЗначениеЗаполнено(ДанныеОбъекта.Контрагент)
		И ЗначениеЗаполнено(СтрокаТЧ.Номенклатура) Тогда
		Попытка
			НоменклатураПоставщика = РегистрыСведений.НоменклатураКонтрагентов.СоздатьМенеджерЗаписи();
			НоменклатураПоставщика.Контрагент = ДанныеОбъекта.Контрагент;
			НоменклатураПоставщика.Номенклатура = СтрокаТЧ.Номенклатура;
			НоменклатураПоставщика.Прочитать();
			
			Если НЕ НоменклатураПоставщика.Выбран() Тогда
				
				НоменклатураПоставщика.Контрагент   = ДанныеОбъекта.Контрагент;
				НоменклатураПоставщика.Номенклатура = СтрокаТЧ.Номенклатура;
				
				НаименованиеПоставщика = ?(ИмяТЧ = "Товары", СтрокаТЧ.НаименованиеПоставщика, СтрокаТЧ.Содержание);
				
				НоменклатураПоставщика.НаименованиеНоменклатурыКонтрагента = НаименованиеПоставщика;	
				
				
				НоменклатураПоставщика.Записать();
			КонецЕсли;
			
		Исключение
			ТекстОписанияОшибки = ОписаниеОшибки();
		КонецПопытки;
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОбработатьДанныеСтрокиЭДО_ЕдиницаИзмерения(ПараметрыОбработки)

	СтрокаТЧ		 = ПараметрыОбработки.ДанныеСтрокиТаблицы;
	ДанныеОбъекта	 = ПараметрыОбработки.ДанныеОбъекта;
	
	 // поищем коэффициент в ТЧ с единицами измерения в товаре
	 СтрокаЕдиниц = СтрокаТЧ.Номенклатура.ЕдиницыИзмерения.Найти(СтрокаТЧ.ЕдиницаИзмерения);
	 Если НЕ СтрокаЕдиниц = Неопределено Тогда
	 	СтрокаТЧ.Коэффициент = СтрокаЕдиниц.Коэффициент;
	 КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура НадписьДокументПолученИзЗвит1СНажатие(Элемент)
	
	Если ПустаяСтрока(Объект.Звит1С_DOC_ID) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не РегламентированнаяОтчетностьКлиент.ПодключитьМенеджерЗвит1С() Тогда
		Возврат;
	КонецЕсли;
	
	Если Не глМенеджерЗвит1С.ЗапуститьЗвит1С(Ложь, Объект.Организация) Тогда
		Возврат;
	КонецЕсли;
	
	Результат = глКомпонентаЗвит1С.ShowReport(Объект.Звит1С_DOC_ID);
	
	Если Результат = 0 Тогда
		глКомпонентаЗвит1С.Bring1CToFront();		
		Возврат;
	КонецЕсли;

	глКомпонентаЗвит1С.BringZvitToFront();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЕдиницаИзмеренияПриИзменении(Элемент)

	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	ДанныеСтрокиТаблицы = Новый Структура(
		"Номенклатура, ЕдиницаИзмерения, Коэффициент, Количество,
		|Цена, Сумма, СтавкаНДС, СуммаНДС,
		|СчетУчетаБУ, НалоговоеНазначение, 
		|ЦенаВРознице, СуммаВРознице, СтавкаНДСВРознице,
		|Всего, СчетУчетаБУЗабалансовый, ПоставкаОсновныхФондов");
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, ТекущиеДанные);

	ДанныеОбъекта = Новый Структура(
		"Дата, ВидОперации, Организация, Склад, Дата, ТипЦен, СуммаВключаетНДС,
		|Контрагент, Звит1С_DOC_ID, 
		|ВалютаДокумента, КурсВзаиморасчетов, КратностьВзаиморасчетов");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
	ПараметрыОбработки = Новый Структура();
	ПараметрыОбработки.Вставить("ДанныеСтрокиТаблицы", 	ДанныеСтрокиТаблицы);
	ПараметрыОбработки.Вставить("ДанныеОбъекта", 		ДанныеОбъекта);
	Если  ЗначениеЗаполнено(ПараметрыОбработки.ДанныеОбъекта.Звит1С_DOC_ID) 
		И ЗначениеЗаполнено(ПараметрыОбработки.ДанныеСтрокиТаблицы.НаименованиеПоставщика) Тогда
		ОбработатьДанныеСтрокиЭДО_ЕдиницаИзмерения(ПараметрыОбработки);
	Иначе	
		ТоварыЕдиницаИзмеренияПриИзмененииНаСервере(ПараметрыОбработки.ДанныеСтрокиТаблицы, ПараметрыОбработки.ДанныеОбъекта);
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ПараметрыОбработки.ДанныеСтрокиТаблицы);


КонецПроцедуры

&НаКлиенте
Процедура ТоварыКоличествоПриИзменении(Элемент)
	
	ПересчитатьСуммуТовары("Товары");
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЦенаПриИзменении(Элемент)
	
	ПересчитатьСуммуТовары("Товары");
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаПриИзменении(Элемент)
	
	ПересчитатьЦену("Товары");
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСтавкаНДСПриИзменении(Элемент)
	
	ПересчитатьНДС("Товары");
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаНДСПриИзменении(Элемент)

	Строка = Элементы.Товары.ТекущиеДанные;
	Строка.Всего 	= Строка.Сумма + ?(Объект.СуммаВключаетНДС, 0, Строка.СуммаНДС);

КонецПроцедуры

&НаКлиенте
Процедура ТоварыЦенаВРозницеПриИзменении(Элемент)

	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	СтрокаТабличнойЧасти.СуммаВРознице = СтрокаТабличнойЧасти.Количество * СтрокаТабличнойЧасти.ЦенаВРознице;

КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаВРозницеПриИзменении(Элемент)

	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	СтрокаТабличнойЧасти.ЦенаВРознице = ?(СтрокаТабличнойЧасти.Количество = 0, 0, СтрокаТабличнойЧасти.СуммаВРознице/СтрокаТабличнойЧасти.Количество);

КонецПроцедуры

&НаКлиенте
Процедура ТоварыСчетУчетаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	ТекущиеДанные.СчетУчетаБУЗабалансовый = ЗначениеЗаполнено(ТекущиеДанные.СчетУчетаБУ)
		И БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(ТекущиеДанные.СчетУчетаБУ).Забалансовый;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыДокументОприходованияПриИзменении(Элемент)

	Строка = Элементы.Товары.ТекущиеДанные;
	Если НЕ ЗначениеЗаполнено(Строка.ДокументОприходования) Тогда
		Строка.Себестоимость = 0;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ТоварыДокументОприходованияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;

	ПараметрыОбъекта = Новый Структура;
	ПараметрыОбъекта.Вставить("КонецПериода",   Объект.Дата);
	ПараметрыОбъекта.Вставить("Организация",    Объект.Организация);
	ПараметрыОбъекта.Вставить("Номенклатура",   ТекущиеДанные.Номенклатура);
	ПараметрыОбъекта.Вставить("СчетУчета",      ТекущиеДанные.СчетУчетаБУ);
	ПараметрыОбъекта.Вставить("Склад",          Объект.Склад);
	ПараметрыОбъекта.Вставить("ТипыДокументов", "Метаданные.Документы.ВозвратТоваровПоставщику.ТабличныеЧасти.Товары.Реквизиты.ДокументОприходования.Тип");

	ПараметрыФормы = Новый Структура("ПараметрыОбъекта", ПараметрыОбъекта);
	ОткрытьФорму("Документ.Партия.ФормаВыбора", ПараметрыФормы, Элемент);

КонецПроцедуры

#КонецОбласти	 //ОбработчикиСобытийЭлементовТаблицыФормыТовары

#Область ОбработчикиСобытийЭлементовТаблицыФормыВозвратнаяТара

&НаКлиенте
Процедура ВозвратнаяТараПриИзменении(Элемент)

	ЕстьВозвратнаяТара = Объект.ВозвратнаяТара.Количество() > 0;

КонецПроцедуры

&НаКлиенте
Процедура ВозвратнаяТараПослеУдаления(Элемент)

	ЕстьВозвратнаяТара = Объект.ВозвратнаяТара.Количество() > 0;

КонецПроцедуры

&НаКлиенте
Процедура ВозвратнаяТараНоменклатураПриИзменении(Элемент)

    ДанныеСтрокаТаблицы = Новый Структура("Номенклатура, Количество, Цена, Сумма, СчетУчетаБУ, НалоговоеНазначение, НаименованиеПоставщика");
	ЗаполнитьЗначенияСвойств(ДанныеСтрокаТаблицы, Элементы.ВозвратнаяТара.ТекущиеДанные);
	
	ПараметрыОбъекта = Новый Структура("Организация, Дата, Ссылка, ТипЦен, СуммаВключаетНДС,
		|Контрагент, Звит1С_DOC_ID, 
		|ВалютаДокумента, КурсВзаиморасчетов, КратностьВзаиморасчетов, Склад, ВидОперации, ДоговорКонтрагента");
	ЗаполнитьЗначенияСвойств(ПараметрыОбъекта, Объект);
	ПараметрыОбъекта.СуммаВключаетНДС = Истина;
	
	ВозвратнаяТараНоменклатураПриИзмененииНаСервере(ДанныеСтрокаТаблицы, ПараметрыОбъекта);
	
	ЗаполнитьЗначенияСвойств(Элементы.ВозвратнаяТара.ТекущиеДанные, ДанныеСтрокаТаблицы);

КонецПроцедуры

&НаКлиенте
Процедура ВозвратнаяТараКоличествоПриИзменении(Элемент)
	
	ПересчитатьСуммуТовары("ВозвратнаяТара");
	
КонецПроцедуры

&НаКлиенте
Процедура ВозвратнаяТараЦенаПриИзменении(Элемент)
	
	ПересчитатьСуммуТовары("ВозвратнаяТара");
	
КонецПроцедуры

&НаКлиенте
Процедура ВозвратнаяТараСуммаПриИзменении(Элемент)
	
	ПересчитатьЦену("ВозвратнаяТара");
	
КонецПроцедуры

#КонецОбласти	 //ОбработчикиСобытийЭлементовТаблицыФормыВозвратнаяТара

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ДобавитьИзПоступления(Команда)

	ЗаполнитьТабличнуюЧастьПоПоступлению("Товары", "Добавить");

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоПоступлению(Команда)

	ЗаполнитьТабличнуюЧастьПоПоступлению("Товары", "Заполнить");

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзПоступленияТара(Команда)

	ЗаполнитьТабличнуюЧастьПоПоступлению("ВозвратнаяТара", "Добавить");

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоПоступлениюТара(Команда)

	ЗаполнитьТабличнуюЧастьПоПоступлению("ВозвратнаяТара", "Заполнить");

КонецПроцедуры

&НаКлиенте
Процедура ПодборТовары(Команда)

	ПараметрыПодбора = ПолучитьПараметрыПодбора("Товары");
	Если ПараметрыПодбора <> Неопределено Тогда
		ОткрытьФорму("Обработка.ПодборНоменклатуры.Форма.Форма", ПараметрыПодбора,
			ЭтаФорма, УникальныйИдентификатор);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПодборВозвратнаяТара(Команда)

	ПараметрыПодбора = ПолучитьПараметрыПодбора("ВозвратнаяТара");
	Если ПараметрыПодбора <> Неопределено Тогда
		ОткрытьФорму("Обработка.ПодборНоменклатуры.Форма.Форма", ПараметрыПодбора,
			ЭтаФорма, УникальныйИдентификатор);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ИзменитьТовары(Команда)

	ПараметрыФормы = ПолучитьПараметрыОбработкиТабличнойЧастиТовары();
	
	Если ПараметрыФормы <> Неопределено Тогда
		ОткрытьФорму("Обработка.ИзменениеТаблицыТоваров.Форма.Форма", ПараметрыФормы,
			ЭтаФорма, УникальныйИдентификатор);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти    //ОбработчикиКомандФормы

#Область СлужебныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ
//

// Облуживание типа цен - валюты - НДС:

&НаКлиенте
Процедура ОбработатьИзмененияПоКнопкеЦеныИВалюты(
		ПересчитатьЦены = Ложь,
		ПерезаполнитьЦены = Ложь,
		ТипЦен = Неопределено)

	// 1. Формируем структуру параметров для заполнения формы "Цены и Валюта".
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ВалютаДокумента"     , Объект.ВалютаДокумента);
	СтруктураПараметров.Вставить("Курс"                , Объект.КурсВзаиморасчетов);
	СтруктураПараметров.Вставить("Кратность"           , Объект.КратностьВзаиморасчетов);
	СтруктураПараметров.Вставить("Контрагент"          , Объект.Контрагент);
	СтруктураПараметров.Вставить("Договор"             , Объект.ДоговорКонтрагента);
	СтруктураПараметров.Вставить("Организация"         , Объект.Организация);
	СтруктураПараметров.Вставить("ДатаДокумента"       , Объект.Дата);
	СтруктураПараметров.Вставить("ПерезаполнитьЦены"   , ПерезаполнитьЦены);
	СтруктураПараметров.Вставить("ПересчитатьЦены"     , ПересчитатьЦены);
	СтруктураПараметров.Вставить("БылиВнесеныИзменения", Ложь);
	СтруктураПараметров.Вставить("ТипЦен"              , ?(ТипЦен = Неопределено, Объект.ТипЦен, ТипЦен));

	Если Объект.ВидОперации <> ПредопределенноеЗначение("Перечисление.ВидыОперацийВозвратТоваровПоставщику.ИзПереработки") Тогда
		СтруктураПараметров.Вставить("СуммаВключаетНДС"    , Объект.СуммаВключаетНДС);
	КонецЕсли;

	// 2. Открвыаем форму "Цены и Валюта".
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ОбработатьИзмененияПоКнопкеЦеныИВалютыЗавершение", ЭтотОбъект);
	
	ОткрытьФорму("ОбщаяФорма.ФормаЦеныИВалюта", СтруктураПараметров,,,,,ОповещениеОЗакрытии);

КонецПроцедуры

&НаКлиенте
Процедура ОбработатьИзмененияПоКнопкеЦеныИВалютыЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	СтруктураЦеныИВалюта = РезультатЗакрытия;
	
	Если ТипЗнч(СтруктураЦеныИВалюта) = Тип("Структура") И СтруктураЦеныИВалюта.БылиВнесеныИзменения Тогда

		ВалютаДоИзменения 	 = Объект.ВалютаДокумента;
		КурсДоИзменения 	 = Объект.КурсВзаиморасчетов;
		КратностьДоИзменения = Объект.КратностьВзаиморасчетов;
		
		Объект.ТипЦен                  = СтруктураЦеныИВалюта.ТипЦен;
		Объект.ВалютаДокумента         = СтруктураЦеныИВалюта.ВалютаДокумента;
		Объект.КурсВзаиморасчетов      = СтруктураЦеныИВалюта.Курс;
		Объект.КратностьВзаиморасчетов = СтруктураЦеныИВалюта.Кратность;
		Объект.СуммаВключаетНДС        = СтруктураЦеныИВалюта.СуммаВключаетНДС;
		
		Модифицированность = Истина;
		
		ПересчитатьНДС = СтруктураЦеныИВалюта.СуммаВключаетНДС <> СтруктураЦеныИВалюта.ПредСуммаВключаетНДС;
		
		Если СтруктураЦеныИВалюта.ПерезаполнитьЦены ИЛИ СтруктураЦеныИВалюта.ПересчитатьЦены ИЛИ ПересчитатьНДС Тогда
			ЗаполнитьРассчитатьСуммы(
				ВалютаДоИзменения, 
				КурсДоИзменения,
				КратностьДоИзменения,
				СтруктураЦеныИВалюта.ПерезаполнитьЦены, 
				СтруктураЦеныИВалюта.ПересчитатьЦены, 
				ПересчитатьНДС);
		КонецЕсли;
				
		СформироватьНадписьЦеныИВалюта(ЭтаФорма);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРассчитатьСуммы(Знач ВалютаДоИзменения, КурсДоИзменения, КратностьДоИзменения, ПерезаполнитьЦены = Ложь, ПересчитатьЦены = Ложь, ПересчитатьНДС = Ложь);

	Если ПерезаполнитьЦены Тогда
		
		СписокНоменклатуры	= ОбщегоНазначения.ВыгрузитьКолонку(Объект.Товары, "Номенклатура", Истина);
		ОбщегоНазначения.ЗаполнитьМассивУникальнымиЗначениями(СписокНоменклатуры,
			ОбщегоНазначения.ВыгрузитьКолонку(Объект.ВозвратнаяТара, "Номенклатура"));
		
		ТаблицаЦенНоменклатуры	= Ценообразование.ПолучитьТаблицуЦенНоменклатуры(
			СписокНоменклатуры,
			Объект.ТипЦен,
			Объект.Дата);
		
	ИначеЕсли ПересчитатьЦены Тогда
		Если КурсДоИзменения <> 0 И КратностьДоИзменения <> 0 Тогда
			СтруктураКурса = Новый Структура("Курс, Кратность", КурсДоИзменения, КратностьДоИзменения);
		Иначе
			СтруктураКурса = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаДоИзменения, Объект.Дата);
		КонецЕсли;
	КонецЕсли;

	Для Каждого Строка Из Объект.Товары Цикл
		Префикс = "Товары[" + Формат(Строка.НомерСтроки - 1, "ЧН=;ЧГ=") + "].";
		ЗаполнитьРассчитатьСуммыВСтроке(Строка, ТаблицаЦенНоменклатуры, ВалютаДоИзменения, СтруктураКурса, ПерезаполнитьЦены, ПересчитатьЦены, ПересчитатьНДС, Истина, 0, Префикс);
	КонецЦикла;
	Для Каждого Строка Из Объект.ВозвратнаяТара Цикл
		Префикс = "ВозвратнаяТара[" + Формат(Строка.НомерСтроки - 1, "ЧН=;ЧГ=") + "].";
		ЗаполнитьРассчитатьСуммыВСтроке(Строка, ТаблицаЦенНоменклатуры, ВалютаДоИзменения, СтруктураКурса, ПерезаполнитьЦены, ПересчитатьЦены, ПересчитатьНДС, Ложь, 0, Префикс);
	КонецЦикла;

	РассчитатьПропорциональныйНДС(ПлательщикНДС, КоэффициентПропорциональногоНДС);
	
	ОбновитьИтоги(ЭтаФорма);

	Если ПересчитатьНДС Тогда
		УстановитьЗаголовкиКолонок();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРассчитатьСуммыВСтроке(Строка, ТаблицаЦенНоменклатуры, ВалютаПередИзменением, СтруктураКурса, ПерезаполнитьЦены, ПересчитатьЦены, ПересчитатьНДС, ЕстьНДС, ЗначениеПустогоКоличества, Префикс)

	Если ПерезаполнитьЦены Тогда
		
		НайденнаяСтрока	= ТаблицаЦенНоменклатуры.Найти(Строка.Номенклатура, "Номенклатура");
		Если НайденнаяСтрока <> Неопределено Тогда
			Цена = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(
				НайденнаяСтрока.Цена, НайденнаяСтрока.Валюта, Объект.ВалютаДокумента, НайденнаяСтрока.Курс,
				Объект.КурсВзаиморасчетов, НайденнаяСтрока.Кратность, Объект.КратностьВзаиморасчетов);
		Иначе
			Цена = 0;
		КонецЕсли;
		
		// Признак того, что цена включает НДС, хранится в реквизите ЦенаВключаетНДС типа цен
		ЦенаВключаетНДС = ?(ЗначениеЗаполнено(Объект.ТипЦен), Объект.ТипЦен.ЦенаВключаетНДС, Ложь);
		
	Иначе
		Если ПересчитатьЦены Тогда

			Цена = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(
				Строка.Цена, ВалютаПередИзменением, Объект.ВалютаДокумента, СтруктураКурса.Курс,
				Объект.КурсВзаиморасчетов, СтруктураКурса.Кратность, Объект.КратностьВзаиморасчетов);

		Иначе
			Цена = Строка.Цена;
		КонецЕсли;
		// Признак того, что цена включает НДС, хранится в реквизите СуммаВключаетНДС документа
		ЦенаВключаетНДС = ?(ПересчитатьНДС, НЕ Объект.СуммаВключаетНДС, Объект.СуммаВключаетНДС);
	КонецЕсли;

	Если ЕстьНДС Тогда
		Строка.Цена     = УчетНДСКлиентСервер.ПересчитатьЦенуПриИзмененииФлаговНалогов(Цена, ЦенаВключаетНДС, Объект.СуммаВключаетНДС, УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(Строка.СтавкаНДС));
		Строка.Сумма    = Строка.Цена * ?(Строка.Количество =0, ЗначениеПустогоКоличества, Строка.Количество);
		Строка.СуммаНДС = УчетНДСКлиентСервер.РассчитатьСуммуНДС(Строка.Сумма, Объект.СуммаВключаетНДС, УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(Строка.СтавкаНДС));
		Строка.Всего 	= Строка.Сумма + ?(Объект.СуммаВключаетНДС, 0, Строка.СуммаНДС);
	Иначе
		Строка.Цена     = Цена;
		Строка.Сумма    = Строка.Цена * ?(Строка.Количество =0, ЗначениеПустогоКоличества, Строка.Количество);
	КонецЕсли;

КонецПроцедуры

// Серверная обработка изменения реквизитов:

&НаСервере
Процедура ОбновитьСписокВыбораВидаоперации()

	// Если производственная деятельность отключена, операция "Из переработки" должна быть не доступна для использования
	ВедетсяПроизводственнаяДеятельность = ПолучитьФункциональнуюОпцию("ВедетсяПроизводственнаяДеятельность");
	ДоступныеВидыОпераций    = Новый Массив;
	Для каждого ЗначениеПеречисления Из Метаданные.Перечисления.ВидыОперацийВозвратТоваровПоставщику.ЗначенияПеречисления Цикл
		ЗначениеПеречисления = Перечисления.ВидыОперацийВозвратТоваровПоставщику[ЗначениеПеречисления.Имя];
		Если НЕ ВедетсяПроизводственнаяДеятельность
			И ЗначениеПеречисления = Перечисления.ВидыОперацийВозвратТоваровПоставщику.ИзПереработки Тогда
			Продолжить;
		КонецЕсли;
		ДоступныеВидыОпераций.Добавить(ЗначениеПеречисления);
	КонецЦикла;
	Элементы.ВидОперации.СписокВыбора.ЗагрузитьЗначения(ДоступныеВидыОпераций);

	// Если установлен недоступный вид операции
	Если Модифицированность
	   И НЕ ВедетсяПроизводственнаяДеятельность
	   И Объект.ВидОперации = Перечисления.ВидыОперацийВозвратТоваровПоставщику.ИзПереработки
	Тогда
		Объект.ВидОперации = ДоступныеВидыОпераций[0];
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ДатаПриИзмененииНаСервере()
	
	ДатаОбработатьИзменение();
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаСервере
Процедура ДатаОбработатьИзменение()
	
	УстановитьФункциональныеОпцииФормы();
	УстановитьЗаголовкиКолонок();
	ОпределитьНеобходимостьРасчетаСуммыВРознице(ЭтаФорма);
	ТоварыСвернуты = ТоварыСвернуты И НТТ И РассчитыватьСуммаВРознице;

	Если (Объект.ВалютаДокумента <> ВалютаРегламентированногоУчета) Тогда
		СтруктураКурсаДокумента        = РаботаСКурсамиВалют.ПолучитьКурсВалюты(Объект.ВалютаДокумента, Объект.Дата);
		Объект.КурсВзаиморасчетов      = СтруктураКурсаДокумента.Курс;
		Объект.КратностьВзаиморасчетов = СтруктураКурсаДокумента.Кратность;
	КонецЕсли;
	
	Если Год(Объект.Дата) <> Год(ТекущаяДатаДокумента) Тогда
		РассчитатьПропорциональныйНДС(ПлательщикНДС, КоэффициентПропорциональногоНДС);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ВидОперацииПриИзмененииНаСервере()
	
	ВидОперацииОбработатьИзменение();
	УстановитьПараметрыВыбораДокументаПоступления(ЭтаФорма);
	УправлениеФормой(ЭтаФорма);
		
КонецПроцедуры

&НаСервере
Процедура ВидОперацииОбработатьИзменение()

	Если НЕ ЗначениеЗаполнено(Объект.ВидОперации) Тогда
		Возврат;
	КонецЕсли;
	

	Если Объект.ВидОперации = Перечисления.ВидыОперацийВозвратТоваровПоставщику.ИзПереработки Тогда
		Если Объект.СуммаВключаетНДС Тогда
			
			Объект.СуммаВключаетНДС = Ложь;
			
			ЗаполнитьРассчитатьСуммы(
				Объект.ВалютаДокумента,          // ВалютаДоИзменения
				Объект.КурсВзаиморасчетов,       // КурсДоИзменения
				Объект.КратностьВзаиморасчетов,  // КратностьДоИзменения
				Ложь,                            // ПерезаполнитьЦены
				Ложь,                            // ПересчитатьЦены
				Истина);                         // ПересчитатьНДС
			
			СформироватьНадписьЦеныИВалюта(ЭтаФорма);

		КонецЕсли;
	КонецЕсли;
	
	ОпределитьНеобходимостьРасчетаСуммыВРознице(ЭтаФорма);
	ТоварыСвернуты = ТоварыСвернуты И НТТ И РассчитыватьСуммаВРознице;	
	
	МассивВидовДоговоров = ПолучитьМассивВидовДоговоров(Объект.ВидОперации);
	Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		Если МассивВидовДоговоров.Найти(Объект.ДоговорКонтрагента.ВидДоговора) = Неопределено Тогда
			Объект.ДоговорКонтрагента = Неопределено;
		КонецЕсли;
	КонецЕсли;
	Если ЗначениеЗаполнено(Объект.Контрагент) И ЗначениеЗаполнено(Объект.Организация) Тогда
		БухгалтерскийУчетПереопределяемый.УстановитьДоговорКонтрагента(
			Объект.ДоговорКонтрагента, Объект.Контрагент, Объект.Организация, 
			ПолучитьМассивВидовДоговоров(Объект.ВидОперации));
	КонецЕсли;

	ДоговорКонтрагентаОбработатьИзменение();
		
КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()

	УстановитьФункциональныеОпцииФормы();
	УстановитьЗаголовкиКолонок();
	
	ОпределитьНеобходимостьРасчетаСуммыВРознице(ЭтаФорма);
	ТоварыСвернуты = ТоварыСвернуты И НТТ И РассчитыватьСуммаВРознице;
	Объект.Сделка = Неопределено;
	Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
		КонтрагентОбработатьИзменение();
	КонецЕсли;
	
	ЗаполнитьСчетаУчетаВТабличнойЧастиНаСервере();	
	СчетаУчетаДоходов = БухгалтерскийУчетПереопределяемый.ПолучитьСчетУчетаПрочий(Объект.Организация, Перечисления.ВидыПрочихСчетовУчета.СчетДоходовВозвратПоставщику);
	Объект.СчетУчетаДоходовБУ 	= СчетаУчетаДоходов.СчетУчетаБУ;
	Объект.СубконтоДоходов1 	= СчетаУчетаДоходов.Субконто1;
	Объект.СубконтоДоходов2 	= СчетаУчетаДоходов.Субконто2;
	Объект.СубконтоДоходов3 	= СчетаУчетаДоходов.Субконто3;

	СчетаУчетаЗатрат = БухгалтерскийУчетПереопределяемый.ПолучитьСчетУчетаПрочий(Объект.Организация, Перечисления.ВидыПрочихСчетовУчета.СчетЗатратВозвратПоставщику);
	Объект.СчетУчетаРасходовБУ = СчетаУчетаЗатрат.СчетУчетаБУ;
	Объект.СубконтоРасходов1 	= СчетаУчетаЗатрат.Субконто1;
	Объект.СубконтоРасходов2 	= СчетаУчетаЗатрат.Субконто2;
	Объект.СубконтоРасходов3 	= СчетаУчетаЗатрат.Субконто3;
	
	РассчитатьПропорциональныйНДС(ПлательщикНДС, КоэффициентПропорциональногоНДС);
	
	УстановитьПараметрыВыбораДокументаПоступления(ЭтаФорма);
	
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаСервере
Процедура КонтрагентПриИзмененииНаСервере()
	
	КонтрагентОбработатьИзменение();
	УстановитьПараметрыВыбораДокументаПоступления(ЭтаФорма);
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура КонтрагентОбработатьИзменение()

	БухгалтерскийУчетПереопределяемый.УстановитьДоговорКонтрагента(
		Объект.ДоговорКонтрагента, Объект.Контрагент, Объект.Организация, 
		ПолучитьМассивВидовДоговоров(Объект.ВидОперации));

	Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		ДоговорКонтрагентаОбработатьИзменение();
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ДоговорКонтрагентаПриИзмененииНаСервере()
	
	ДоговорКонтрагентаОбработатьИзменение();
	УстановитьПараметрыВыбораДокументаПоступления(ЭтаФорма);
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаСервере
Процедура ДоговорКонтрагентаОбработатьИзменение()

	ВалютаДоИзменения = Объект.ВалютаДокумента;
	КурсДоИзменения   = Объект.КурсВзаиморасчетов;
	КратностьДоИзменения   		= Объект.КратностьВзаиморасчетов;
	ТипЦенДоИзменения 			= Объект.ТипЦен;
	СуммаВключаетНДСДоИзменения = Объект.СуммаВключаетНДС;
	
	ДоговорУказан     = ЗначениеЗаполнено(Объект.ДоговорКонтрагента);
	РеквизитыДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		Объект.ДоговорКонтрагента, "Владелец, ВалютаВзаиморасчетов, ТипЦен, ВидДоговора, ВедениеВзаиморасчетов, СложныйНалоговыйУчет");

	Если ДоговорУказан Тогда
		ВалютаВзаиморасчетов   = РеквизитыДоговора.ВалютаВзаиморасчетов;
		Объект.ВалютаДокумента = ВалютаВзаиморасчетов;
		Если НЕ ЗначениеЗаполнено(Объект.Контрагент) Тогда
			Объект.Контрагент = РеквизитыДоговора.Владелец;
		КонецЕсли;
	Иначе
		Объект.ВалютаДокумента = ВалютаРегламентированногоУчета;
	КонецЕсли;
	
	Если ВалютаДоИзменения <> Объект.ВалютаДокумента Тогда
		СтруктураКурсаДокумента        = РаботаСКурсамиВалют.ПолучитьКурсВалюты(Объект.ВалютаДокумента, Объект.Дата);
		Объект.КурсВзаиморасчетов      = СтруктураКурсаДокумента.Курс;
		Объект.КратностьВзаиморасчетов = СтруктураКурсаДокумента.Кратность;
	КонецЕсли;
	Объект.Сделка = Неопределено;
	
	ЭтоКомиссия       = ДоговорУказан И РеквизитыДоговора.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом;
	ВедениеВзаиморасчетовПоРасчетнымДокументам = ДоговорУказан И РеквизитыДоговора.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоРасчетнымДокументам;
	СложныйНалоговыйУчет = ДоговорУказан И РеквизитыДоговора.СложныйНалоговыйУчет;
	
	Документы.ВозвратТоваровПоставщику.ЗаполнитьСчетаУчетаРасчетов(Объект);
	Если ДоговорУказан Тогда
		УстановитьПараметрыВыбораДляСчетаУчета(ЭтаФорма, Объект.ВидОперации);
	КонецЕсли;
	
	Если ДоговорУказан И ЗначениеЗаполнено(РеквизитыДоговора.ТипЦен) Тогда
		 Объект.ТипЦен           = РеквизитыДоговора.ТипЦен;
		 Если Объект.ВидОперации <> Перечисления.ВидыОперацийВозвратТоваровПоставщику.ИзПереработки Тогда
			 Объект.СуммаВключаетНДС = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(РеквизитыДоговора.ТипЦен, "ЦенаВключаетНДС");
		 КонецЕсли;
	КонецЕсли;
	
	ПересчитатьЦены = Объект.ВалютаДокумента <> ВалютаДоИзменения
		ИЛИ Объект.КурсВзаиморасчетов <> КурсДоИзменения
		ИЛИ Объект.ТипЦен <> ТипЦенДоИзменения;
	ПересчитатьНДС = Объект.СуммаВключаетНДС <> СуммаВключаетНДСДоИзменения;
	
	Если ЕстьСтрокиВТабличныхЧастях() И (ПересчитатьЦены ИЛИ ПересчитатьНДС) Тогда
		ЗаполнитьРассчитатьСуммы(ВалютаДоИзменения, 
			КурсДоИзменения, 
			КратностьДоИзменения, 
			Ложь, 
			ПересчитатьЦены, 
			ПересчитатьНДС);
	ИначеЕсли ПересчитатьНДС Тогда
		УстановитьЗаголовкиКолонок();
	КонецЕсли;
	
	ЗаполнитьСчетаУчетаВТабличнойЧастиНаСервере();	// счета зависят от признака ЭтоКомиссия
	
	ОпределитьНеобходимостьРасчетаСуммыВРознице(ЭтаФорма);
	ТоварыСвернуты = ТоварыСвернуты И НТТ И РассчитыватьСуммаВРознице;
	
	УстановитьПараметрыВыбора(ЭтаФорма);
	
	Если НЕ ВалютаДоИзменения = Объект.ВалютаДокумента Тогда
		РассчитатьПропорциональныйНДС( ПлательщикНДС, КоэффициентПропорциональногоНДС);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзменииСклада()
	
	Если ЗначениеЗаполнено(Объект.Склад) Тогда
		СкладПриИзмененииНаСервере();
	КонецЕсли;
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросСвернутьТабличнуюЧастьЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ТоварыСвернуты = (Результат = КодВозвратаДиалога.Да);
	ПриИзменииСклада();
	
КонецПроцедуры

&НаСервере
Процедура СкладПриИзмененииНаСервере()
	
	СвойстваСклада = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		Объект.Склад, "ТипСклада, ТипЦенРозничнойТорговли");
	ТипЦенСклада   = СвойстваСклада.ТипЦенРозничнойТорговли;
	ТипСклада      = СвойстваСклада.ТипСклада;
	
	
	Если НЕ ЕстьСтрокиВТабличныхЧастях() Тогда
		Возврат;
	КонецЕсли;
	
	Если ТоварыСвернуты Тогда
		
		ТаблицаТоваров = Объект.Товары.Выгрузить();
		ТаблицаТоваров.Свернуть("СтавкаНДС, СтавкаНДСВРознице", "Сумма, СуммаНДС, Всего, СуммаВРознице");
		Объект.Товары.Загрузить(ТаблицаТоваров);
		
	Иначе
		ЗаполнитьСчетаУчетаВТабличнойЧастиНаСервере("Товары");
	КонецЕсли;
	
	ЗаполнитьСчетаУчетаВТабличнойЧастиНаСервере("ВозвратнаяТара");
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ДокументПоступленияПриИзмененииНаСервере()
	
	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		
		Объект.Организация = Объект.ДокументОтгрузки.Организация;
		ОрганизацияПриИзмененииНаСервере();
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Склад) Тогда
		
		Объект.Склад = Объект.ДокументОтгрузки.Склад;
		СкладПриИзмененииНаСервере();
		
	КонецЕсли;
	
	Если ОбщегоНазначенияБП.ЕстьРеквизитДокумента("Контрагент", Объект.ДокументПоступления.Метаданные()) И НЕ ЗначениеЗаполнено(Объект.Контрагент) Тогда
		
		Объект.Контрагент = Объект.ДокументПоступления.Контрагент;
		
		// При подстановке контрагента сделка очищается.
		// Сохраняем значение для последующей подстановки.
		ТекущееЗначение = Объект.Сделка;
		
		КонтрагентОбработатьИзменение();
		
		Объект.Сделка = ТекущееЗначение;		
		
	КонецЕсли;
	
	Если ОбщегоНазначенияБП.ЕстьРеквизитДокумента("ДоговорКонтрагента", Объект.ДокументПоступления.Метаданные()) И НЕ ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		
		Объект.ДоговорКонтрагента = Объект.ДокументПоступления.ДоговорКонтрагента;
		
		// При подстановке договора сделка очищается.
		// Сохраняем значение для последующей подстановки.
		ТекущееЗначение = Объект.Сделка;
		
		ДоговорКонтрагентаОбработатьИзменение();
		
		Объект.Сделка = ТекущееЗначение;
		
	КонецЕсли;
	
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРеквизитыСкладаНаСервере()
	
	Если ЗначениеЗаполнено(Объект.Склад) Тогда
		СвойстваСклада = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			Объект.Склад, "ТипСклада, ТипЦенРозничнойТорговли");
		ТипЦенСклада   = СвойстваСклада.ТипЦенРозничнойТорговли;
		ТипСклада      = СвойстваСклада.ТипСклада;
	Иначе
		ТипЦенСклада = ПредопределенноеЗначение("Справочник.ТипыЦенНоменклатуры.ПустаяСсылка");
		ТипСклада    = ПредопределенноеЗначение("Перечисление.ТипыСкладов.ОптовыйСклад");
    КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСчетаУчетаВТабличнойЧастиНаСервере(ИмяТабличнойЧасти = "")

	Если ПустаяСтрока(ИмяТабличнойЧасти) ИЛИ ИмяТабличнойЧасти = "Товары" Тогда
		Документы.ВозвратТоваровПоставщику.ЗаполнитьСчетаУчетаВТабличнойЧасти(Объект, "Товары");
	КонецЕсли;
	
	Если ПустаяСтрока(ИмяТабличнойЧасти) ИЛИ ИмяТабличнойЧасти = "ВозвратнаяТара" Тогда
		Документы.ВозвратТоваровПоставщику.ЗаполнитьСчетаУчетаВТабличнойЧасти(Объект, "ВозвратнаяТара");
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ТоварыНоменклатураПриИзмененииНаСервере(СтрокаТабличнойЧасти, Знач ДанныеОбъекта)

	СведенияОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОНоменклатуре(
		СтрокаТабличнойЧасти.Номенклатура, ДанныеОбъекта);
	Если СведенияОНоменклатуре = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаТабличнойЧасти.ЕдиницаИзмерения       = СведенияОНоменклатуре.БазоваяЕдиницаИзмерения;
	СтрокаТабличнойЧасти.Коэффициент			= СведенияОНоменклатуре.Коэффициент;
	СтрокаТабличнойЧасти.Цена					= СведенияОНоменклатуре.Цена;
	СтрокаТабличнойЧасти.СтавкаНДС				= СведенияОНоменклатуре.СтавкаНДС;
	
	Если ДанныеОбъекта.РассчитыватьСуммаВРознице Тогда
		СтрокаТабличнойЧасти.ЦенаВРознице = СведенияОНоменклатуре.ЦенаВРознице;
	КонецЕсли;
	
	Если ДанныеОбъекта.ЗаполнятьСтавкуНДСВРознице Тогда
		СтрокаТабличнойЧасти.СтавкаНДСВРознице = СведенияОНоменклатуре.СтавкаНДС;
	КонецЕсли;
	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ДанныеОбъекта.СуммаВключаетНДС);
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуВРозницеТабЧасти(СтрокаТабличнойЧасти);
	
	Документы.ВозвратТоваровПоставщику.ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(
		ДанныеОбъекта, СтрокаТабличнойЧасти, "Товары", СведенияОНоменклатуре);
		
	ЗаполнитьДобавленныеКолонкиСтрокиТаблицыТовары(СтрокаТабличнойЧасти, ДанныеОбъекта.СуммаВключаетНДС);

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ТоварыЕдиницаИзмеренияПриИзмененииНаСервере(СтрокаТабличнойЧасти, Знач ДанныеОбъекта)

	ОбработкаТабличныхЧастей.ЗаполнитьКоэффициентТабЧасти(СтрокаТабличнойЧасти, ДанныеОбъекта, "Товары", Метаданные.Документы.ВозвратТоваровПоставщику);
	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ДанныеОбъекта.СуммаВключаетНДС);
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуВРозницеТабЧасти(СтрокаТабличнойЧасти);
	
	ЗаполнитьДобавленныеКолонкиСтрокиТаблицыТовары(СтрокаТабличнойЧасти, ДанныеОбъекта.СуммаВключаетНДС);

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ВозвратнаяТараНоменклатураПриИзмененииНаСервере(СтрокаТаблицы, Знач ДанныеОбъекта)

	СведенияОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОНоменклатуре(
		СтрокаТаблицы.Номенклатура, ДанныеОбъекта);
	Если СведенияОНоменклатуре = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаТаблицы.Цена = СведенияОНоменклатуре.Цена;
	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТаблицы);
	
	Документы.ВозвратТоваровПоставщику.ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(
		ДанныеОбъекта, СтрокаТаблицы, "ВозвратнаяТара", СведенияОНоменклатуре);

КонецПроцедуры

// Пересчеты реквизитов в строках табличных частей

&НаКлиенте
Процедура ПересчитатьСуммуТовары(ИмяТабЧасти)

	Строка = Элементы[ИмяТабЧасти].ТекущиеДанные;
	ОбщегоНазначенияБПКлиент.ПересчитатьСумму(Строка, Объект.СуммаВключаетНДС);

	Если ИмяТабЧасти = "Товары"
		 И НТТ
		 И УчетВПродажныхЦенах
		 И Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийВозвратТоваровПоставщику.ПокупкаКомиссия")
		 И НЕ ЭтоКомиссия Тогда

		Строка.СуммаВРознице = Строка.Количество * Строка.ЦенаВРознице;

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьНДС(ИмяТабЧасти)

	Строка = Элементы[ИмяТабЧасти].ТекущиеДанные;
	ОбщегоНазначенияБПКлиент.ПересчитатьСуммуНДС(Строка, Объект.СуммаВключаетНДС);

КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьЦену(ИмяТабЧасти)

	Строка = Элементы[ИмяТабЧасти].ТекущиеДанные;
	Строка.Цена = Строка.Сумма / ?(Строка.Количество = 0, 1, Строка.Количество);
	Если ИмяТабЧасти = "Товары" Тогда
		ОбщегоНазначенияБПКлиент.ПересчитатьСуммуНДС(Строка, Объект.СуммаВключаетНДС);
	КонецЕсли;

КонецПроцедуры

// Внешний вид, содержание надписей и т.п.

&НаСервере
Процедура УстановитьСостояниеДокумента()
	
	СостояниеДокумента = ОбщегоНазначенияБП.СостояниеДокумента(Объект);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)

	Объект   = Форма.Объект;
	Элементы = Форма.Элементы;
	
	Элементы.ГруппаВозвратнаяТара.Видимость =
		Объект.ВидОперации <> ПредопределенноеЗначение("Перечисление.ВидыОперацийВозвратТоваровПоставщику.ИзПереработки");

	ИзПереработки =	Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийВозвратТоваровПоставщику.ИзПереработки");
	Элементы.ГруппаСчетаРасчетов.Видимость           = Не ИзПереработки; // Вся страница с счетами
	Элементы.ГруппаСуммаНДСПропорционально.Видимость = Не ИзПереработки; // Пропорциональный НДС

	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийВозвратТоваровПоставщику.Оборудование") Тогда
		Элементы.ГруппаТовары.Заголовок = НСтр("ru='Оборудование';uk='Устаткування'");
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийВозвратТоваровПоставщику.ИзПереработки") Тогда
		Элементы.ГруппаТовары.Заголовок = НСтр("ru='Материалы';uk='Матеріали'");
	Иначе
		Элементы.ГруппаТовары.Заголовок = НСтр("ru='Товары';uk='Товари'");
	КонецЕсли;

	
	// Доступность взаимосвязанных полей
	Элементы.ДоговорКонтрагента.Доступность       = ЗначениеЗаполнено(Объект.Организация) И ЗначениеЗаполнено(Объект.Контрагент);
	Элементы.Сделка.Доступность                   = Форма.ВедениеВзаиморасчетовПоРасчетнымДокументам;;
	
	Элементы.СчетУчетаРасчетовСКонтрагентом.Доступность    = Не Форма.ЭтоКомиссия;
    //Элементы.СчетУчетаРасчетовПоТаре.Доступность         = Истина; // Доступен всегда
	Элементы.СчетУчетаНДС.Доступность                      = РеализацияТоваровУслугФормыКлиентСервер.ИспользуетсяСчетУчетаНДС(Форма.ПлательщикНДС, Форма.ЭтоКомиссия, Объект.Дата);
	Элементы.СчетУчетаНДСПодтвержденный.Доступность        = РеализацияТоваровУслугФормыКлиентСервер.ИспользуетсяСчетУчетаНДСПодтвержденный(Форма.ПлательщикНДС, Форма.ЭтоКомиссия, Объект.Дата, Форма.СложныйНалоговыйУчет);

	Элементы.ГруппаРамкаГруппыРазницыСтоимостиТоваров.Доступность = Не Форма.ЭтоКомиссия;
	Элементы.ДекорацияЗаголовокСчетУчетаДоходовБУ.Доступность  = Не Форма.ЭтоКомиссия;
    Элементы.ЗаголовокСубконтоДоходов1.Доступность             = Не Форма.ЭтоКомиссия;
    Элементы.ЗаголовокСубконтоДоходов2.Доступность             = Не Форма.ЭтоКомиссия;	
    Элементы.ЗаголовокСубконтоДоходов3.Доступность             = Не Форма.ЭтоКомиссия;
	Элементы.СчетУчетаДоходовБУ.Доступность                    = Не Форма.ЭтоКомиссия;
	
    Элементы.ДекорацияЗаголовокСчетУчетаРасходовБУ.Доступность = Не Форма.ЭтоКомиссия;
    Элементы.ЗаголовокСубконтоРасходов1.Доступность            = Не Форма.ЭтоКомиссия;
    Элементы.ЗаголовокСубконтоРасходов2.Доступность            = Не Форма.ЭтоКомиссия;	
    Элементы.ЗаголовокСубконтоРасходов3.Доступность            = Не Форма.ЭтоКомиссия;
	Элементы.СчетУчетаРасходовБУ.Доступность                   = Не Форма.ЭтоКомиссия;
	
	Если Не Форма.ЭтоКомиссия Тогда
		НастроитьСубконтоПриПодготовкеФормыНаСервере(Форма, "СчетУчетаДоходовБУ");
		НастроитьСубконтоПриПодготовкеФормыНаСервере(Форма, "СчетУчетаРасходовБУ");
	Иначе
	    Элементы.СубконтоДоходов1.Доступность                      = Ложь;
	    Элементы.СубконтоДоходов2.Доступность                      = Ложь;
	    Элементы.СубконтоДоходов3.Доступность                      = Ложь;
		
	    Элементы.СубконтоРасходов1.Доступность                     = Ложь;
	    Элементы.СубконтоРасходов2.Доступность                     = Ложь;
	    Элементы.СубконтоРасходов3.Доступность                     = Ложь;		
	КонецЕсли;
	
	Элементы.ДекорацияПредупреждениеНУ.Видимость               = Форма.ПлательщикНалогаНаПрибыльДо2015;
	Элементы.ДекорацияПредупреждениеНУ.Доступность             = Не Форма.ЭтоКомиссия;
		
	Элементы.СуммаНДСПропорциональноКредит.Видимость                = Форма.ПлательщикНДС;
	Элементы.ВалютаРеглУчетаСуммаНДСПропорциональноКредит.Видимость = Форма.ПлательщикНДС;
	Элементы.СуммаНДСПропорциональноВсего.Видимость                 = Форма.ПлательщикНДС;
	Элементы.ВалютаРеглУчетаСуммаНДСПропорциональноВсего.Видимость  = Форма.ПлательщикНДС;

	Элементы.ГруппаРеквизитыДоверенностиЛевая.Видимость = НЕ Объект.ПолучилПоДругомуДокументу; 
	Элементы.ДокументПодтверждающийПолномочия.Видимость = Объект.ПолучилПоДругомуДокументу; 

	Элементы.НадписьДокументПолученИзЗвит1С.Видимость = ЗначениеЗаполнено(Объект.Звит1С_DOC_ID);
	Элементы.ТоварыНаименованиеПоставщика.Видимость   = ЗначениеЗаполнено(Объект.Звит1С_DOC_ID);
	Элементы.ВозвратнаяТараНаименованиеПоставщика.Видимость   = ЗначениеЗаполнено(Объект.Звит1С_DOC_ID);
	
	ОбновитьИтоги(Форма);
	СформироватьНадписьЦеныИВалюта(Форма);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьИтоги(Форма)

	Объект = Форма.Объект;
	Форма.ИтогиВсего = Объект.Товары.Итог("Всего");

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СформироватьНадписьЦеныИВалюта(Форма)
	
	Объект = Форма.Объект;
	СтруктураНадписи = Новый Структура(
		"ТипЦен, ВалютаДокумента, Курс, Кратность, СуммаВключаетНДС, ВалютаРегламентированногоУчета",
		Объект.ТипЦен,
		Объект.ВалютаДокумента,
		Объект.КурсВзаиморасчетов,
		Объект.КратностьВзаиморасчетов,
		Объект.СуммаВключаетНДС,
		Форма.ВалютаРегламентированногоУчета);
	Форма.ЦеныИВалюта = ОбщегоНазначенияБПКлиентСервер.СформироватьНадписьЦеныИВалюта(СтруктураНадписи);

КонецПроцедуры 

&НаСервере
Процедура УстановитьЗаголовкиКолонок()
	
	ЗаголовокЦена 	= ?(ПлательщикНДС, ?(Объект.СуммаВключаетНДС, НСтр("ru='Цена с НДС';uk='Ціна з ПДВ'"), НСтр("ru='Цена без НДС';uk='Ціна без ПДВ'")), НСтр("ru='Цена';uk='Ціна'"));
	ЗаголовокСумма 	= ?(ПлательщикНДС, ?(Объект.СуммаВключаетНДС, НСтр("ru='Сумма с НДС';uk='Сума з ПДВ'"), НСтр("ru='Сумма без НДС';uk='Сума без ПДВ'")), НСтр("ru='Сумма';uk='Сума'"));
	
	Элементы.ТоварыЦена.Заголовок = ЗаголовокЦена;
	Элементы.ТоварыСумма.Заголовок = ЗаголовокСумма;
	
КонецПроцедуры

// Заполнение документа по документам - основаниям:

&НаКлиенте
Процедура ЗаполнитьТабличнуюЧастьПоПоступлению(ТабличнаяЧасть, СпособЗаполнения)

	// Оценочная стоимость возвратной тары учитывается в валюте взаиморасчетов по договору,
	// поэтому перед заполнением договор должен быть выбран.
	Если Не ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		ПоказатьПредупреждение(,НСтр("ru='Не выбран договор контрагента!';uk='Не обраний договір контрагента!'"));
		Возврат;
	КонецЕсли;

	// Если заполняем, то почистим ТЧ
	Если СпособЗаполнения = "Заполнить"
		И Объект[ТабличнаяЧасть].Количество() > 0 Тогда

		ТекстВопроса = НСтр("ru='Перед заполнением табличная часть будет очищена. Заполнить?';uk='Перед заповненням таблична частина буде очищена. Заповнити?'");
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("СпособЗаполнения", СпособЗаполнения);
		ДополнительныеПараметры.Вставить("ТабличнаяЧасть", ТабличнаяЧасть);
		Оповещение = Новый ОписаниеОповещения("ВопросПередЗаполнениемТабличнойЧастиЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	Иначе
		ДополнитьТабличнуюЧастьПоПоступлению(ТабличнаяЧасть, СпособЗаполнения);
	КонецЕсли;

//
//
//
//	ДокументПоступления = Объект.ДокументПоступления;
//

//
//
//	Если (СпособЗаполнения = "Заполнить" И Не ЗначениеЗаполнено(ДокументПоступления))
//
//		ИЛИ (СпособЗаполнения = "Добавить") Тогда

//		// Теперь нужно выбрать документ, по которому будем заполнять
//		ПараметрыФормы = Новый Структура;
//		Отбор = Новый Структура("ДоговорКонтрагента,Проведен",Объект.ДоговорКонтрагента,Истина);
//		Если ЗначениеЗаполнено(Объект.Организация) Тогда
//			Отбор.Вставить("Организация",Объект.Организация);
//		КонецЕсли;

//		СписокОпераций = Новый СписокЗначений;
//		Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийВозвратТоваровПоставщику.ИзПереработки") Тогда
//			СписокОпераций.Добавить(ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеТоваровУслуг.ВПереработку"));
//		Иначе
//			СписокОпераций.Добавить(ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеТоваровУслуг.ПокупкаКомиссия"));
//
//
//
//
//			СписокОпераций.Добавить(ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеТоваровУслуг.Оборудование"));
//		КонецЕсли;
//		Отбор.Вставить("ВидОперации", СписокОпераций);

//		ПараметрыФормы.Вставить("Отбор",Отбор);

//		ДокументПоступления = ОткрытьФормуМодально("Документ.ПоступлениеТоваровУслуг.ФормаВыбора", ПараметрыФормы,ЭтаФорма);

//		Если Не ЗначениеЗаполнено(ДокументПоступления) Тогда
//			Возврат; // ничего не выбрали.
//		КонецЕсли;

//	КонецЕсли;

//	Если СпособЗаполнения = "Заполнить" Тогда
//
//
//
//		Объект.ДокументПоступления = ДокументПоступления;
//
//	КонецЕсли;

//	// Вызываем процедуру заполнения.
//	Если СпособЗаполнения = "Заполнить" Тогда

//		Если ТабличнаяЧасть = "Товары" Тогда
//			Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийВозвратТоваровПоставщику.Оборудование") Тогда
//				ЗаполнитьОборудованиеПоОснованию(ДокументПоступления);
//			Иначе
//				ЗаполнитьТоварыПоОснованию(ДокументПоступления);
//			КонецЕсли;
//		ИначеЕсли ТабличнаяЧасть = "ВозвратнаяТара" Тогда
//			ЗаполнитьВозвратнуюТаруПоОснованию(ДокументПоступления);
//		КонецЕсли;

//	Иначе // При добавлении надо сворачивать дубли строк, аналогично подбору

//		ДобавитьСтрокиТабличнойЧастиИзДокументаПоступления(ДокументПоступления, ТабличнаяЧасть);

//	КонецЕсли;
//	
//
//
//	РассчитатьПропорциональныйНДС(Объект, ПлательщикНДС, КоэффициентПропорциональногоНДС);
//

//	ОбновитьИтоги(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ВопросПередЗаполнениемТабличнойЧастиЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Объект[ДополнительныеПараметры.ТабличнаяЧасть].Очистить();
		ДополнитьТабличнуюЧастьПоПоступлению(ДополнительныеПараметры.ТабличнаяЧасть, ДополнительныеПараметры.СпособЗаполнения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТабличнуюЧастьПоПоступлениюЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	ДокументПоступления = РезультатЗакрытия;
	
	Если Не ЗначениеЗаполнено(ДокументПоступления) Тогда
		Возврат; // ничего не выбрали.
	КонецЕсли;

	ТабличнаяЧасть   = ДополнительныеПараметры.ТабличнаяЧасть;
	СпособЗаполнения = ДополнительныеПараметры.СпособЗаполнения;
	
	Если СпособЗаполнения = "Заполнить" Тогда
		Объект.ДокументПоступления = ДокументПоступления;
	КонецЕсли;
	
	ЗаполнитьТабличнуюЧастьПоПоступлениюПослеПолученияДокумента(ДокументПоступления, ТабличнаяЧасть, СпособЗаполнения);

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТабличнуюЧастьПоПоступлениюПослеПолученияДокумента(ДокументПоступления, ТабличнаяЧасть, СпособЗаполнения)
	
	// Вызываем процедуру заполнения.
	Если СпособЗаполнения = "Заполнить" Тогда

		Если ТабличнаяЧасть = "Товары" Тогда
			Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийВозвратТоваровПоставщику.Оборудование") Тогда
				ЗаполнитьОборудованиеПоОснованию(ДокументПоступления);
			Иначе
				ЗаполнитьТоварыПоОснованию(ДокументПоступления);
			КонецЕсли;
		ИначеЕсли ТабличнаяЧасть = "ВозвратнаяТара" Тогда
			ЗаполнитьВозвратнуюТаруПоОснованию(ДокументПоступления);
		КонецЕсли;

	Иначе // При добавлении надо сворачивать дубли строк, аналогично подбору

		ДобавитьСтрокиТабличнойЧастиИзДокументаПоступления(ДокументПоступления, ТабличнаяЧасть);

	КонецЕсли;
	
	РассчитатьПропорциональныйНДС(ПлательщикНДС, КоэффициентПропорциональногоНДС);

	ОбновитьИтоги(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ДополнитьТабличнуюЧастьПоПоступлению(ТабличнаяЧасть, СпособЗаполнения)

	Если (СпособЗаполнения = "Заполнить" И Не ЗначениеЗаполнено(Объект.ДокументПоступления))
		ИЛИ (СпособЗаполнения = "Добавить") Тогда

		// Теперь нужно выбрать документ, по которому будем заполнять
		ПараметрыФормы = Новый Структура;
		Отбор = Новый Структура("ДоговорКонтрагента,Проведен",Объект.ДоговорКонтрагента,Истина);
		Если ЗначениеЗаполнено(Объект.Организация) Тогда
			Отбор.Вставить("Организация",Объект.Организация);
		КонецЕсли;

		СписокОпераций = Новый СписокЗначений;
		Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийВозвратТоваровПоставщику.ИзПереработки") Тогда
			СписокОпераций.Добавить(ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеТоваровУслуг.ВПереработку"));
		Иначе
			СписокОпераций.Добавить(ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеТоваровУслуг.ПокупкаКомиссия"));
			СписокОпераций.Добавить(ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеТоваровУслуг.Оборудование"));
		КонецЕсли;
		Отбор.Вставить("ВидОперации", СписокОпераций);

		ПараметрыФормы.Вставить("Отбор",Отбор);

		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ТабличнаяЧасть", ТабличнаяЧасть);
		ДополнительныеПараметры.Вставить("СпособЗаполнения", СпособЗаполнения);
		
		ОповещениеОЗакрытии = Новый ОписаниеОповещения("ЗаполнитьТабличнуюЧастьПоПоступлениюЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		
		ОткрытьФорму("Документ.ПоступлениеТоваровУслуг.ФормаВыбора", ПараметрыФормы,ЭтаФорма,,,,ОповещениеОЗакрытии);	
	Иначе
		ДокументПоступления = Объект.ДокументПоступления;
		ЗаполнитьТабличнуюЧастьПоПоступлениюПослеПолученияДокумента(ДокументПоступления, ТабличнаяЧасть, СпособЗаполнения);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ДобавитьСтрокиТабличнойЧастиИзДокументаПоступления(ДокументПоступления, ТабличнаяЧасть)

	ВидОперацииОборудование = (Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийВозвратТоваровПоставщику.Оборудование"));

	Выборка = ПолучитьДанныеДляКопирования(ДокументПоступления, ТабличнаяЧасть,ВидОперацииОборудование);
	МетаданныеДокумента = Объект.Ссылка.Метаданные();

	// Обходим строки Реализации
	СтруктураОтбора = Новый Структура();
	Пока Выборка.Следующий() Цикл

		// Ищем текущую позицию основания в табличной части документа возврата.
		//  Если найдем - увеличим количество; не найдем - добавим новую строку.
		СтруктураОтбора.Вставить("Номенклатура", Выборка.Номенклатура);

		СтрокаТабличнойЧасти = ОбработкаТабличныхЧастейКлиентСервер.НайтиСтрокуТабЧасти(Объект, ТабличнаяЧасть, СтруктураОтбора);
		Если СтрокаТабличнойЧасти <> неопределено Тогда

			// Нашли, увеличиваем количество в первой найденной строке.
			СтрокаТабличнойЧасти.Количество =  СтрокаТабличнойЧасти.Количество + Выборка.Количество;
 			Если ТабличнаяЧасть = "Товары" Тогда


				// Рассчитать реквизиты табличной части.
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, Объект.СуммаВключаетНДС);
				СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма + ?(Объект.СуммаВключаетНДС, 0, СтрокаТабличнойЧасти.СуммаНДС);

			ИначеЕсли ТабличнаяЧасть = "ВозвратнаяТара" Тогда

				// Рассчитать реквизиты табличной части.
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);

			КонецЕсли;

		Иначе

			// Не нашли - добавляем новую строку.
			СтрокаТабличнойЧасти = Объект[ТабличнаяЧасть].Добавить();
			СтрокаТабличнойЧасти.Номенклатура     = Выборка.Номенклатура;
			СтрокаТабличнойЧасти.Количество       = Выборка.Количество;

			Если ТабличнаяЧасть = "Товары" Тогда

				СтрокаТабличнойЧасти.ЕдиницаИзмерения = Выборка.ЕдиницаИзмерения;
				СтрокаТабличнойЧасти.Коэффициент      = Выборка.Коэффициент;


				// Заполняем реквизиты табличной части.
				ОбработкаТабличныхЧастей.ЗаполнитьСтавкуНДСТабЧасти(СтрокаТабличнойЧасти, Объект,"Товары",МетаданныеДокумента);

				// Пересчитаем цену в валюту документа.
				Цена = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(Выборка.Цена,
				                  Выборка.ВалютаДокумента,    Объект.ВалютаДокумента,
				                  Выборка.КурсДокумента,      ЗаполнениеДокументов.КурсДокумента(Объект, ВалютаРегламентированногоУчета),
				                  Выборка.КратностьДокумента, ЗаполнениеДокументов.КратностьДокумента(Объект, ВалютаРегламентированногоУчета));

				СтрокаТабличнойЧасти.Цена = УчетНДСКлиентСервер.ПересчитатьЦенуПриИзмененииФлаговНалогов(Цена,
				                                                 Выборка.СуммаВключаетНДС,
				                                                 Объект.СуммаВключаетНДС,
				                                                 УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));
				СтрокаТабличнойЧасти.СчетУчетаБУ         = Выборка.СчетУчетаБУ;
				СтрокаТабличнойЧасти.НалоговоеНазначение = Выборка.НалоговоеНазначение;

				// Рассчитываем реквизиты табличной части.
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, Объект.СуммаВключаетНДС);
				СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма + ?(Объект.СуммаВключаетНДС, 0, СтрокаТабличнойЧасти.СуммаНДС);

			ИначеЕсли ТабличнаяЧасть = "ВозвратнаяТара" Тогда

				// Пересчитаем цену в валюту взаиморасчетов (в документах договоры могут отличаться).
				СтрокаТабличнойЧасти.Цена = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(Выборка.Цена,
				                  Выборка.ВалютаВзаиморасчетов, Объект.ДоговорКонтрагента.ВалютаВзаиморасчетов,
				                  Выборка.КурсВзаиморасчетов, ЗаполнениеДокументов.КурсДокумента(Объект, ВалютаРегламентированногоУчета),
				                  Выборка.КратностьВзаиморасчетов, ЗаполнениеДокументов.КратностьДокумента(Объект, ВалютаРегламентированногоУчета));

				// По флагам налогообложения тару пересчитывать не надо,
				// Считаем, для тары флаги одинаковы (с НДС),

				// Рассчитать реквизиты табличной части.
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);

				СтрокаТабличнойЧасти.СчетУчетаБУ         = Выборка.СчетУчетаБУ;
				СтрокаТабличнойЧасти.НалоговоеНазначение = Выборка.НалоговоеНазначение;

			КонецЕсли;

		КонецЕсли;

	КонецЦикла;

	ОбновитьИтоги(ЭтаФорма);

КонецПроцедуры

&НаСервере
Функция ПолучитьДанныеДляКопирования(ДокументСсылка, ТабличнаяЧасть,ВидОперацииОборудование)

	// Считываем нужную информацию по документу Реализации
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", ДокументСсылка);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	Док.НомерСтроки КАК НомерСтроки,
	|	Док.Номенклатура,
	|	Док.Количество,
	|	Док.СчетУчетаБУ,
	|	Док.НалоговоеНазначение,
	|	Док.Цена,";

	Если ТабличнаяЧасть = "Товары" Тогда

		Запрос.Текст = Запрос.Текст + "
		|	Док.ЕдиницаИзмерения,
		|	Док.Коэффициент,
		|	Док.Ссылка.ВалютаДокумента,
		|	ВЫБОР КОГДА Док.Ссылка.ВалютаДокумента = Док.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов ТОГДА
		|		Док.Ссылка.КурсВзаиморасчетов
		|	ИНАЧЕ
		|		1
		|	КОНЕЦ КАК КурсДокумента,
		|	ВЫБОР КОГДА Док.Ссылка.ВалютаДокумента = Док.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов ТОГДА
		|		Док.Ссылка.КратностьВзаиморасчетов
		|	ИНАЧЕ
		|		1
		|	КОНЕЦ КАК КратностьДокумента,
		|	Док.Ссылка.СуммаВключаетНДС,
		|	Док.СтавкаНДС";

	Иначе

		Запрос.Текст = Запрос.Текст + "
		|	Док.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов  КАК ВалютаВзаиморасчетов,
		|	Док.Ссылка.КурсВзаиморасчетов,
		|	Док.Ссылка.КратностьВзаиморасчетов ";
	КонецЕсли;

	Запрос.Текст = Запрос.Текст + "
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг" + ?(ТабличнаяЧасть = "Товары",?(ВидОперацииОборудование, ".Оборудование",".Товары"),".ВозвратнаяТара") + " КАК Док
	|
	|ГДЕ
	|	Док.Ссылка = &ДокументОснование
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|";

	РезультатЗапроса = Запрос.Выполнить();

	Выборка = РезультатЗапроса.Выбрать();

	Возврат Выборка;

КонецФункции

&НаСервере
Процедура ЗаполнитьТоварыПоОснованию(ДокументОснование)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка",  ДокументОснование);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПоступлениеТоваровУслугТовары.Ссылка.ВалютаДокумента КАК ВалютаДокумента,
	|	ПоступлениеТоваровУслугТовары.Номенклатура,
	|	ПоступлениеТоваровУслугТовары.ЕдиницаИзмерения,
	|	ПоступлениеТоваровУслугТовары.Коэффициент,
	|	ПоступлениеТоваровУслугТовары.Количество,
	|	ПоступлениеТоваровУслугТовары.Цена,
	|	ПоступлениеТоваровУслугТовары.Сумма,
	|	ПоступлениеТоваровУслугТовары.СтавкаНДС,
	|	ПоступлениеТоваровУслугТовары.СуммаНДС,
	|	ПоступлениеТоваровУслугТовары.Ссылка.СуммаВключаетНДС,
	|	ПоступлениеТоваровУслугТовары.ЦенаВРознице,
	|	ПоступлениеТоваровУслугТовары.СуммаВРознице,
	|	ПоступлениеТоваровУслугТовары.СтавкаНДСВРознице,
	|	ПоступлениеТоваровУслугТовары.СчетУчетаБУ,
	|	ПоступлениеТоваровУслугТовары.НалоговоеНазначение,
	|	ПоступлениеТоваровУслугТовары.НомерСтроки КАК НомерСтроки
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг.Товары КАК ПоступлениеТоваровУслугТовары
	|ГДЕ
	|	ПоступлениеТоваровУслугТовары.Ссылка = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";

	РезультатЗапроса = Запрос.Выполнить();

	Объект.Товары.Загрузить(РезультатЗапроса.Выгрузить());

	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();

	Если ЗначениеЗаполнено(Объект.ВалютаДокумента)
		И НЕ (Объект.ВалютаДокумента = Выборка.ВалютаДокумента) Тогда

		Курс         = ЗаполнениеДокументов.КурсДокумента(Объект, ВалютаРегламентированногоУчета);
		КурсОсн      = ЗаполнениеДокументов.КурсДокумента(ДокументОснование, ВалютаРегламентированногоУчета);
		Кратность    = ЗаполнениеДокументов.КратностьДокумента(Объект, ВалютаРегламентированногоУчета);
		КратностьОсн = ЗаполнениеДокументов.КратностьДокумента(ДокументОснование, ВалютаРегламентированногоУчета);

		Для каждого СтрокаТабличнойЧасти Из Объект.Товары Цикл

			// Пересчитаем цену в валюту документа (может отличаться от валюты основания).
			Цена = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(СтрокаТабличнойЧасти.Цена, Выборка.ВалютаДокумента, Объект.ВалютаДокумента,
											                                  КурсОсн, Курс, КратностьОсн, Кратность);

			СтрокаТабличнойЧасти.Цена = УчетНДСКлиентСервер.ПересчитатьЦенуПриИзмененииФлаговНалогов(Цена,
												Выборка.СуммаВключаетНДС,
												Объект.СуммаВключаетНДС,
												УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));

			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, Объект.СуммаВключаетНДС);

			СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма + ?(Объект.СуммаВключаетНДС, 0, СтрокаТабличнойЧасти.СуммаНДС);

		КонецЦикла;
	КонецЕсли;

	ЗаполнитьДобавленныеКолонкиТаблиц();

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОборудованиеПоОснованию(ДокументОснование)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка",  ДокументОснование);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПоступлениеТоваровУслугОборудование.Ссылка.ВалютаДокумента,
	|	ПоступлениеТоваровУслугОборудование.Ссылка.СуммаВключаетНДС,
	|	ПоступлениеТоваровУслугОборудование.Номенклатура,
	|	ПоступлениеТоваровУслугОборудование.ЕдиницаИзмерения,
	|	ПоступлениеТоваровУслугОборудование.Коэффициент,
	|	ПоступлениеТоваровУслугОборудование.Количество,
	|	ПоступлениеТоваровУслугОборудование.Цена,
	|	ПоступлениеТоваровУслугОборудование.Сумма,
	|	ПоступлениеТоваровУслугОборудование.СуммаНДС,
	|	ПоступлениеТоваровУслугОборудование.СтавкаНДС,
	|	ПоступлениеТоваровУслугОборудование.СчетУчетаБУ,
	|	ПоступлениеТоваровУслугОборудование.НалоговоеНазначение,
	|	ПоступлениеТоваровУслугОборудование.НомерСтроки КАК НомерСтроки
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг.Оборудование КАК ПоступлениеТоваровУслугОборудование
	|ГДЕ
	|	ПоступлениеТоваровУслугОборудование.Ссылка = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	РезультатЗапроса = Запрос.Выполнить();

	Объект.Товары.Загрузить(РезультатЗапроса.Выгрузить());

	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();

	Если ЗначениеЗаполнено(Объект.ВалютаДокумента)
		И НЕ (Объект.ВалютаДокумента = Выборка.ВалютаДокумента) Тогда

		Курс         = ЗаполнениеДокументов.КурсДокумента(Объект, ВалютаРегламентированногоУчета);
		КурсОсн      = ЗаполнениеДокументов.КурсДокумента(ДокументОснование, ВалютаРегламентированногоУчета);
		Кратность    = ЗаполнениеДокументов.КратностьДокумента(Объект, ВалютаРегламентированногоУчета);
		КратностьОсн = ЗаполнениеДокументов.КратностьДокумента(ДокументОснование, ВалютаРегламентированногоУчета);

		Для каждого СтрокаТабличнойЧасти Из Объект.Товары Цикл

			// Пересчитаем цену в валюту документа (может отличаться от валюты основания).
			Цена = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(
				СтрокаТабличнойЧасти.Цена,
				Выборка.ВалютаДокумента,
				Объект.ВалютаДокумента,
				КурсОсн,
				Курс,
				КратностьОсн,
				Кратность);

			СтрокаТабличнойЧасти.Цена = УчетНДСКлиентСервер.ПересчитатьЦенуПриИзмененииФлаговНалогов(Цена,
												Выборка.СуммаВключаетНДС,
												Объект.СуммаВключаетНДС,
												УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));

			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, Объект.СуммаВключаетНДС);

		КонецЦикла;
	КонецЕсли;

	ЗаполнитьДобавленныеКолонкиТаблиц();

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьВозвратнуюТаруПоОснованию(ДокументОснование)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка",  ДокументОснование);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПоступлениеТоваровУслугВозвратнаяТара.Ссылка.ВалютаДокумента,
	|	ПоступлениеТоваровУслугВозвратнаяТара.Номенклатура,
	|	ПоступлениеТоваровУслугВозвратнаяТара.Количество,
	|	ПоступлениеТоваровУслугВозвратнаяТара.Цена,
	|	ПоступлениеТоваровУслугВозвратнаяТара.Сумма,
	|	ПоступлениеТоваровУслугВозвратнаяТара.СчетУчетаБУ,
	|	ПоступлениеТоваровУслугВозвратнаяТара.НалоговоеНазначение,
	|	ПоступлениеТоваровУслугВозвратнаяТара.НомерСтроки КАК НомерСтроки
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг.ВозвратнаяТара КАК ПоступлениеТоваровУслугВозвратнаяТара
	|ГДЕ
	|	ПоступлениеТоваровУслугВозвратнаяТара.Ссылка = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";

	Выборка = Запрос.Выполнить().Выбрать();

	Курс         = ЗаполнениеДокументов.КурсДокумента(Объект, ВалютаРегламентированногоУчета);
	КурсОсн      = ЗаполнениеДокументов.КурсДокумента(ДокументОснование, ВалютаРегламентированногоУчета);
	Кратность    = ЗаполнениеДокументов.КратностьДокумента(Объект, ВалютаРегламентированногоУчета);
	КратностьОсн = ЗаполнениеДокументов.КратностьДокумента(ДокументОснование, ВалютаРегламентированногоУчета);

	Пока Выборка.Следующий() Цикл

		СтрокаВозвратнойТары = Объект.ВозвратнаяТара.Добавить();

		СтрокаВозвратнойТары.Номенклатура     = Выборка.Номенклатура;
		СтрокаВозвратнойТары.Количество       = Выборка.Количество;
		СтрокаВозвратнойТары.Цена             = Выборка.Цена;
		СтрокаВозвратнойТары.Сумма        	  = Выборка.Сумма;
		СтрокаВозвратнойТары.СчетУчетаБУ  	  = Выборка.СчетУчетаБУ;
		СтрокаВозвратнойТары.НалоговоеНазначение = Выборка.НалоговоеНазначение;

		// Если валюта документа отличается от валюты основания, пересчитаем цену и суммы.
		Если ЗначениеЗаполнено(Объект.ВалютаДокумента)
		   И НЕ (Объект.ВалютаДокумента = Выборка.ВалютаДокумента) Тогда
			// Пересчитаем цену в валюту взаиморасчетов (в документах договоры могут отличаться).
			СтрокаВозвратнойТары.Цена = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(
											СтрокаВозвратнойТары.Цена, Выборка.ВалютаДокумента, Объект.ВалютаДокумента,
			                            	КурсОсн, Курс, КратностьОсн, Кратность);

			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаВозвратнойТары);
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

// Прочий функционал общего назначения:

&НаСервере
Процедура ПодготовитьФормуНаСервере()
	
	ТекущаяДатаДокумента			= Объект.Дата;
	ВалютаРегламентированногоУчета 	= Константы.ВалютаРегламентированногоУчета.Получить();
	
	УстановитьФункциональныеОпцииФормы();
	
	УстановитьСостояниеДокумента();
	
	ДоговорУказан = ЗначениеЗаполнено(Объект.ДоговорКонтрагента);
	Если ДоговорУказан Тогда
		РеквизитыДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			Объект.ДоговорКонтрагента, "ВидДоговора, ВалютаВзаиморасчетов, ВедениеВзаиморасчетов, СложныйНалоговыйУчет");
		ЭтоКомиссия          = РеквизитыДоговора.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом;
		ВедениеВзаиморасчетовПоРасчетнымДокументам = (РеквизитыДоговора.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоРасчетнымДокументам);
		СложныйНалоговыйУчет = РеквизитыДоговора.СложныйНалоговыйУчет;
		ВалютаВзаиморасчетов = РеквизитыДоговора.ВалютаВзаиморасчетов;
	Иначе
		ЭтоКомиссия          = Ложь;
		ВедениеВзаиморасчетовПоРасчетнымДокументам = Ложь;
		СложныйНалоговыйУчет = Ложь;
	КонецЕсли;
	
	Если ДоговорУказан Тогда
		УстановитьПараметрыВыбораДляСчетаУчета(ЭтаФорма, Объект.ВидОперации);
	КонецЕсли;
	
	
	Если ЗначениеЗаполнено(Объект.Склад) Тогда
		СвойстваСклада = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			Объект.Склад, "ТипСклада, ТипЦенРозничнойТорговли");
		ТипЦенСклада = СвойстваСклада.ТипЦенРозничнойТорговли;
		ТипСклада    = СвойстваСклада.ТипСклада;
	Иначе
		ТипЦенСклада = Справочники.ТипыЦенНоменклатуры.ПустаяСсылка();
		ТипСклада    = Перечисления.ТипыСкладов.ОптовыйСклад;
	КонецЕсли;
	
	РазделениеПоСтавкамВРознице = БухгалтерскийУчетВызовСервераПовтИсп.ИспользуетсяРазделениеПоСтавкамНДСВНТТ();
	
	ЕстьВозвратнаяТара = Объект.ВозвратнаяТара.Количество() > 0;
	
	ОпределитьНеобходимостьРасчетаСуммыВРознице(ЭтаФорма);
	
	Если НТТ И РассчитыватьСуммаВРознице И Объект.Товары.Количество() > 0 Тогда
		
		ТоварыСвернуты	= Истина;
		Для каждого СтрокаТовары Из Объект.Товары Цикл
			Если ЗначениеЗаполнено(СтрокаТовары.Номенклатура) Тогда
				ТоварыСвернуты	= Ложь;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	Иначе
		ТоварыСвернуты	= Ложь;
	КонецЕсли;
	

	МетаданныеТоварыРеквизиты = Метаданные.Документы.ВозвратТоваровПоставщику.ТабличныеЧасти.Товары.Реквизиты;
	Элементы.ТоварыСебестоимость.Заголовок   = МетаданныеТоварыРеквизиты.Себестоимость.Представление() + " (" + Строка(ВалютаРегламентированногоУчета) + ")";
	Элементы.ТоварыСебестоимостьНУ.Заголовок = МетаданныеТоварыРеквизиты.СебестоимостьНУ.Представление() + " (" + Строка(ВалютаРегламентированногоУчета) + ")";

	УстановитьПараметрыВыбораДокументаПоступления(ЭтаФорма);

	ЗаполнитьДобавленныеКолонкиТаблиц();
	
	ОбновитьСписокВыбораВидаОперации();
	
	УстановитьПараметрыВыбора(ЭтаФорма);
	
	УправлениеФормой(ЭтаФорма);
	
	УстановитьЗаголовкиКолонок();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьФункциональныеОпцииФормы()

	ОбщегоНазначенияБПКлиентСервер.УстановитьПараметрыФункциональныхОпцийФормыДокумента(ЭтаФорма);
	
	ПлательщикНДС               = УчетнаяПолитика.ПлательщикНДС(Объект.Организация, Объект.Дата);
	ПлательщикНДС = ПлательщикНДС И (ВалютаРегламентированногоУчета = ВалютаВзаиморасчетов ИЛИ НЕ ЗначениеЗаполнено(ВалютаВзаиморасчетов));
	ПлательщикНалогаНаПрибыльДо2015 = УчетнаяПолитика.ПлательщикНалогаНаПрибыльДо2015(Объект.Организация, Объект.Дата);
	СпособОценкиТоваровВРознице = УчетнаяПолитика.СпособОценкиТоваровВРознице(Объект.Организация, Объект.Дата);
	УчетВПродажныхЦенах         = (СпособОценкиТоваровВРознице = Перечисления.СпособыОценкиТоваровВРознице.ПоПродажнойСтоимости);
	
	СпособОценкиМПЗ             = УчетнаяПолитика.СпособОценкиМПЗ(Объект.Организация, Объект.Дата);
	
	КоэффициентПропорциональногоНДС = НалоговыйУчет.ПолучитьКоэффициентПропорциональногоНДС(Объект.Организация, Объект.Дата);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОпределитьНеобходимостьРасчетаСуммыВРознице(Форма)
	
	Объект = Форма.Объект;
	
	Форма.РассчитыватьСуммаВРознице = 
		Форма.ТипСклада <> ПредопределенноеЗначение("Перечисление.ТипыСкладов.ОптовыйСклад")
		И Форма.УчетВПродажныхЦенах
		И Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийВозвратТоваровПоставщику.ПокупкаКомиссия")
		И НЕ Форма.ЭтоКомиссия;
	
	Форма.НТТ = Форма.ТипСклада = ПредопределенноеЗначение("Перечисление.ТипыСкладов.НеавтоматизированнаяТорговаяТочка");
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьПараметрыВыбора(Форма)

	Элементы = Форма.Элементы;

	МассивВидовДоговоров = Новый ФиксированныйМассив(ПолучитьМассивВидовДоговоров(Форма.Объект.ВидОперации));

	НовыйМассивПараметров = Новый Массив();
	НовыйМассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.ВидДоговора", МассивВидовДоговоров));

	НовыеПараметрыВыбора = Новый ФиксированныйМассив(НовыйМассивПараметров);
	Элементы.ДоговорКонтрагента.ПараметрыВыбора = НовыеПараметрыВыбора;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьПараметрыВыбораДокументаПоступления(Форма)
	
	Элементы = Форма.Элементы;
	Объект   = Форма.Объект;
	
	НовыйМассивПараметров = Новый Массив();
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		НовыйМассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Организация", Объект.Организация));
	КонецЕсли;
	Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
		НовыйМассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Контрагент", Объект.Контрагент));
	КонецЕсли;
	Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		НовыйМассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.ДоговорКонтрагента", Объект.ДоговорКонтрагента));
	КонецЕсли;
	
	НовыеПараметрыВыбора = Новый ФиксированныйМассив(НовыйМассивПараметров);
	Элементы.ДокументПоступления.ПараметрыВыбора = НовыеПараметрыВыбора;
	
КонецПроцедуры

&НаСервере
Функция ЕстьСтрокиВТабличныхЧастях()
	
	ЕстьСтроки = Объект.Товары.Количество() > 0;
	Если Объект.ВидОперации = Перечисления.ВидыОперацийВозвратТоваровПоставщику.ПокупкаКомиссия
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийВозвратТоваровПоставщику.Оборудование Тогда
		ЕстьСтроки = ЕстьСтроки ИЛИ Объект.ВозвратнаяТара.Количество() > 0;
	КонецЕсли;
	
	Возврат ЕстьСтроки;

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьМассивВидовДоговоров(ВидОперации)

	СписокВидовДоговоров = Новый Массив;

	Если ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийВозвратТоваровПоставщику.ИзПереработки") Тогда
		СписокВидовДоговоров.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СПокупателем"));
	Иначе
		СписокВидовДоговоров.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СПоставщиком"));
		СписокВидовДоговоров.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СКомитентом"));
	КонецЕсли;

	Возврат СписокВидовДоговоров;

КонецФункции

&НаСервере
Процедура ЗаполнитьДобавленныеКолонкиТаблиц()

	Для Каждого СтрокаТаблицы Из Объект.Товары Цикл
		ЗаполнитьДобавленныеКолонкиСтрокиТаблицыТовары(СтрокаТаблицы, Объект.СуммаВключаетНДС);
	КонецЦикла;

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьДобавленныеКолонкиСтрокиТаблицыТовары(СтрокаТаблицы, СуммаВключаетНДС)
	
	СтрокаТаблицы.Всего = СтрокаТаблицы.Сумма + ?(СуммаВключаетНДС, 0, СтрокаТаблицы.СуммаНДС);
	СтрокаТаблицы.СчетУчетаБУЗабалансовый = ЗначениеЗаполнено(СтрокаТаблицы.СчетУчетаБУ)
		И БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(СтрокаТаблицы.СчетУчетаБУ).Забалансовый;
	СтрокаТаблицы.ПоставкаОсновныхФондов = Истина; // Информационная колонка. Флаг виден только для оборудования и всегда заполнен
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УстановитьПараметрыВыбораДляСчетаУчета(Форма, ВидОперации)
	
	Элементы = Форма.Элементы;
	НовыйМассивПараметров = Новый Массив();
	НовыйМассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.ЗапретитьИспользоватьВПроводках", Ложь));
	Если ((ВидОперации = Перечисления.ВидыОперацийВозвратТоваровПоставщику.ПокупкаКомиссия) И Форма.ЭтоКомиссия) 
	 ИЛИ (ВидОперации = Перечисления.ВидыОперацийВозвратТоваровПоставщику.ИзПереработки) Тогда
		НовыйМассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Забалансовый", Истина));
	Иначе
 		НовыйМассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Забалансовый", Ложь));
	КонецЕсли;
	
	НовыеПараметрыВыбора = Новый ФиксированныйМассив(НовыйМассивПараметров);
	Элементы.ТоварыСчетУчета.ПараметрыВыбора = НовыеПараметрыВыбора;
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьПараметрыПодбора(ИмяТаблицы)
	
	ПараметрыФормы = Новый Структура;
	
	ДатаРасчетов 	 = ?(НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДата()), Неопределено, Объект.Дата);
	ЗаголовокПодбора = НСтр("ru='Подбор номенклатуры в %1 (%2)';uk='Підбір номенклатури %1 (%2)'");
	
	Валюта = Объект.ВалютаДокумента;
	
	Если ЗначениеЗаполнено(Объект.ТипЦен) Тогда
		Параметрыформы.Вставить("ПоказыватьЦены", Истина);
	КонецЕсли;
	
	Если ИмяТаблицы = "Товары" Тогда
		ПредставлениеТаблицы = НСтр("ru='Товары';uk='Товари'");
		
		ПараметрыФормы.Вставить("ПоказыватьОстатки"  , Истина);
		ПараметрыФормы.Вставить("ПоказыватьСчетУчета", Истина);
	ИначеЕсли ИмяТаблицы = "ВозвратнаяТара" Тогда
		ПредставлениеТаблицы = НСтр("ru='Возвратная тара';uk='Зворотна тара'");
		
		Отказ = Ложь;
		ОчиститьСообщения();
		Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
			Валюта = ВалютаВзаиморасчетов;
			Если НЕ ЗначениеЗаполнено(Валюта) Тогда
				ТекстСообщения = ОбщегоНазначенияБПКлиентСервер.ПолучитьТекстСообщения(,, НСтр("ru='Валюта расчетов';uk='Валюта розрахунків'"));
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "ДоговорКонтрагента", "Объект", Отказ);
			КонецЕсли;
		Иначе
			ТекстСообщения = ОбщегоНазначенияБПКлиентСервер.ПолучитьТекстСообщения(,, НСтр("ru='Договор';uk='Договір'"));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "ДоговорКонтрагента", "Объект", Отказ);
		КонецЕсли;
		Если Отказ Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		ПараметрыФормы.Вставить("ПоказыватьОстатки"  , Истина);
		ПараметрыФормы.Вставить("ПоказыватьСчетУчета", Истина);
	КонецЕсли;
	ЗаголовокПодбора = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ЗаголовокПодбора, Объект.Ссылка, ПредставлениеТаблицы);
	
	ПараметрыФормы.Вставить("ТипЦен", Объект.ТипЦен);
	
	Если ЗначениеЗаполнено(ПараметрыФормы.ТипЦен) Тогда
		ПараметрыФормы.Вставить("ПоказыватьЦены", Истина);
	КонецЕсли;
	
	ПараметрыФормы.Вставить("ЕстьЦена"          , Истина);
	ПараметрыФормы.Вставить("ЕстьКоличество"    , Истина);
	ПараметрыФормы.Вставить("ДатаРасчетов"      , ДатаРасчетов);
	ПараметрыФормы.Вставить("Валюта"            , Валюта);
	ПараметрыФормы.Вставить("ДоговорКонтрагента", Объект.ДоговорКонтрагента);
	ПараметрыФормы.Вставить("Контрагент"        , Объект.Контрагент);
	ПараметрыФормы.Вставить("Организация"       , Объект.Организация);
	ПараметрыФормы.Вставить("Склад"             , Объект.Склад);
	ПараметрыФормы.Вставить("Заголовок"         , ЗаголовокПодбора);
	ПараметрыФормы.Вставить("ВидПодбора"        , ПолучитьВидПодбора(ИмяТаблицы));
	ПараметрыФормы.Вставить("ИмяТаблицы"        , ИмяТаблицы);
	ПараметрыФормы.Вставить("Услуги"            , ИмяТаблицы = "Услуги");
	
	Возврат ПараметрыФормы;
	
КонецФункции

&НаКлиенте
Функция ПолучитьВидПодбора(ИмяТаблицы)

	ВидПодбора = "";

	Если ЭтоКомиссия Тогда
		ВидПодбора = "Комитент";
	КонецЕсли;

	Возврат ВидПодбора;

КонецФункции

&НаСервере
Процедура ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение, ИмяТаблицы)

	ТаблицаТоваров = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресПодобраннойНоменклатурыВХранилище);
	
	ДанныеОбъекта = Новый Структура("Дата, ВидОперации, Организация, Склад, ЭтоКомиссия");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	ДанныеОбъекта.ЭтоКомиссия = ЭтоКомиссия;
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийВозвратТоваровПоставщику.ИзПереработки Тогда
		ДанныеОбъекта.Вставить("СтавкаНДС", Перечисления.СтавкиНДС.БезНДС)
	КонецЕсли;
	
	СоответствиеСведенийОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОСпискеНоменклатуры(
		ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаТоваров, "Номенклатура", Истина), ДанныеОбъекта);
		
	Если ЗначениеЗаполнено(Объект.ТипЦен) Тогда
		ЦенаВключаетНДС	= ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ТипЦен, "ЦенаВключаетНДС");
	Иначе
		ЦенаВключаетНДС	= Объект.СуммаВключаетНДС;
	КонецЕсли;
	
	Для Каждого СтрокаТовара Из ТаблицаТоваров Цикл
		
		СтруктураОтбора = Новый Структура("Номенклатура, Цена", СтрокаТовара.Номенклатура, СтрокаТовара.Цена);
		Если ИмяТаблицы = "Товары"  Тогда
			СтруктураОтбора.Вставить("ЕдиницаИзмерения",СтрокаТовара.ЕдиницаИзмерения);
		КонецЕсли; 
		СтрокаТаблицы = НайтиСтрокуТабличнойЧасти(ИмяТаблицы, СтруктураОтбора);
		Если СтрокаТаблицы <> Неопределено Тогда
			
			// Нашли - увеличиваем количество.
			СтрокаТаблицы.Количество = СтрокаТаблицы.Количество + СтрокаТовара.Количество;
			Если ИмяТаблицы = "Товары" Тогда
				
				// Рассчитываем реквизиты табличной части.
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТаблицы);
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТаблицы, Объект.СуммаВключаетНДС);
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуВРозницеТабЧасти(СтрокаТаблицы);
				
				ЗаполнитьДобавленныеКолонкиСтрокиТаблицыТовары(СтрокаТаблицы, Объект.СуммаВключаетНДС);
				
			ИначеЕсли ИмяТаблицы = "ВозвратнаяТара" Тогда
				
				// Рассчитать реквизиты табличной части
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТаблицы);
				
			КонецЕсли;
		Иначе
			СтрокаТаблицы = Объект[ИмяТаблицы].Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТаблицы, СтрокаТовара);
			
			СведенияОНоменклатуре = СоответствиеСведенийОНоменклатуре.Получить(СтрокаТовара.Номенклатура);
			Если СведенияОНоменклатуре = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Документы.ВозвратТоваровПоставщику.ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(
			ДанныеОбъекта, СтрокаТаблицы, ИмяТаблицы, СведенияОНоменклатуре);
			
			Если ИмяТаблицы = "Товары" Тогда
				
				СтрокаТаблицы.СтавкаНДС				= СведенияОНоменклатуре.СтавкаНДС;
				
				СтрокаТаблицы.Цена = УчетНДСКлиентСервер.ПересчитатьЦенуПриИзмененииФлаговНалогов(
				СтрокаТаблицы.Цена, ЦенаВключаетНДС, Объект.СуммаВключаетНДС,
				УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаТаблицы.СтавкаНДС));
				
				Если РассчитыватьСуммаВРознице Тогда
					СтрокаТаблицы.ЦенаВРознице = СведенияОНоменклатуре.ЦенаВРознице;
				КонецЕсли;
				
				Если НТТ И УчетВПродажныхЦенах И РазделениеПоСтавкамВРознице Тогда
					СтрокаТаблицы.СтавкаНДСВРознице = СведенияОНоменклатуре.СтавкаНДСВРознице;
				КонецЕсли;
				
				// Рассчитываем реквизиты табличной части.
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТаблицы);
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТаблицы, Объект.СуммаВключаетНДС);
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуВРозницеТабЧасти(СтрокаТаблицы);
				
				ЗаполнитьДобавленныеКолонкиСтрокиТаблицыТовары(СтрокаТаблицы, Объект.СуммаВключаетНДС);
				
			ИначеЕсли ИмяТаблицы = "ВозвратнаяТара" Тогда
				
				СтрокаТаблицы.Цена = УчетНДСКлиентСервер.ПересчитатьЦенуПриИзмененииФлаговНалогов(
				СтрокаТаблицы.Цена, ЦенаВключаетНДС, Истина,
				УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СведенияОНоменклатуре.СтавкаНДС));
				
				// Рассчитать реквизиты табличной части
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТаблицы);
				
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	РассчитатьПропорциональныйНДС(ПлательщикНДС, КоэффициентПропорциональногоНДС);
	
	ОбновитьИтоги(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Функция ПоместитьТоварыВоВременноеХранилищеНаСервере()
	
	Возврат ПоместитьВоВременноеХранилище(Объект.Товары.Выгрузить(), УникальныйИдентификатор);
	
КонецФункции

&НаКлиенте
Функция ПолучитьПараметрыОбработкиТабличнойЧастиТовары()

	ПараметрыОбработки = Новый Структура;
	
	ПараметрыОбработки.Вставить("АдресХранилищаТовары", 		ПоместитьТоварыВоВременноеХранилищеНаСервере());
	ПараметрыОбработки.Вставить("ЗаполнятьЦеныПоПокупке", 		Истина);
	
	ПараметрыОбработки.Вставить("ДокументСсылка", 				Объект.Ссылка);
	ПараметрыОбработки.Вставить("ДокументДата", 				Объект.Дата);
	ПараметрыОбработки.Вставить("ДокументОрганизация", 			Объект.Организация);
	ПараметрыОбработки.Вставить("ДокументВалюта", 				Объект.ВалютаДокумента);
	ПараметрыОбработки.Вставить("ДокументКурс", 				Объект.КурсВзаиморасчетов);
	ПараметрыОбработки.Вставить("ДокументКратность", 			Объект.КратностьВзаиморасчетов);
	ПараметрыОбработки.Вставить("ДокументСуммаВключаетНДС", 	Объект.СуммаВключаетНДС);
	ПараметрыОбработки.Вставить("ДокументТипЦен", 				Объект.ТипЦен);
	ПараметрыОбработки.Вставить("ДокументСклад", 				Объект.Склад);

	Возврат ПараметрыОбработки;
	
КонецФункции 

&НаСервере
Процедура ОбработкаОповещенияОбработкиТабличнойЧастиТоварыНаСервере(Параметры)

	ТаблицаОбработки = ПолучитьИзВременногоХранилища(Параметры.АдресОбработаннойТабличнойЧастиТоварыВХранилище);
	
	Отбор = Новый Структура("НомерСтрокиДокумента", 0);
	ТаблицаОбработки.Индексы.Добавить("НомерСтрокиДокумента");
	ДобавленныеСтроки = ТаблицаОбработки.НайтиСтроки(Отбор);
	
	ДанныеОбъекта = Новый Структура("Дата, ВидОперации, Организация, Склад, ЭтоКомиссия");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	ДанныеОбъекта.ЭтоКомиссия = ЭтоКомиссия;
	
	СоответствиеСчетовУчета = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаУчетаСпискаНоменклатуры(
		ДанныеОбъекта.Организация, ОбщегоНазначения.ВыгрузитьКолонку(ДобавленныеСтроки, "Номенклатура", Истина), ДанныеОбъекта.Склад, ДанныеОбъекта.Дата);
		
	Для Каждого СтрокаТабличнойЧасти ИЗ ДобавленныеСтроки Цикл
		
		СчетаУчета = СоответствиеСчетовУчета.Получить(СтрокаТабличнойЧасти.Номенклатура);
		
		Документы.ВозвратТоваровПоставщику.ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(
			ДанныеОбъекта, СтрокаТабличнойЧасти, "Товары", СчетаУчета);
		
		ЗаполнитьДобавленныеКолонкиСтрокиТаблицыТовары(СтрокаТабличнойЧасти, Объект.СуммаВключаетНДС);
		
	КонецЦикла;
	
	Объект.Товары.Загрузить(ТаблицаОбработки);
	
	РассчитатьПропорциональныйНДС(ПлательщикНДС, КоэффициентПропорциональногоНДС);
	 
	ОбновитьИтоги(ЭтаФорма);

КонецПроцедуры

#КонецОбласти    //СлужебныеПроцедурыИФункции

#Область СлужебныеПроцедурыИФункцииБСП

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ БСП

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти    //СлужебныеПроцедурыИФункцииБСП

#Область СлужебныйПрограммныйИнтерфейс

&НаСервере
Процедура РассчитатьПропорциональныйНДС(ПлательщикНДС, КоэффициентПропорциональногоНДС)

	Документы.ВозвратТоваровПоставщику.РассчитатьПропорциональныйНДС(Объект, ПлательщикНДС, КоэффициентПропорциональногоНДС);
		
КонецПроцедуры

// Изменение счетов учета и их субконто

&НаКлиентеНаСервереБезКонтекста
Процедура НастроитьСубконтоПриПодготовкеФормыНаСервере(Форма, ИмяСчета);
	
	ИмяПоля = ОпределитьИмяСубконтоПоИмениСчета(ИмяСчета);	
	
	УстановитьЗаголовкиИДоступностьСубконто(Форма, ИмяСчета, ИмяПоля);
	УстановитьПараметрыВыбораСубконто(Форма, ИмяСчета, ИмяПоля);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура НастроитьСубконтоПриИзмененииСчета(Форма, ИмяСчета);
	
	ИмяПоля = ОпределитьИмяСубконтоПоИмениСчета(ИмяСчета);	
	
	УстановитьЗаголовкиИДоступностьСубконто(Форма, ИмяСчета, ИмяПоля);
	УстановитьЗначенияСубконтоПриИзмененииСчета(Форма, ИмяСчета, ИмяПоля);
	УстановитьПараметрыВыбораСубконто(Форма, ИмяСчета, ИмяПоля);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура НастроитьСубконтоПриИзмененииСубконто(Форма, ИмяСчета);
	
	ИмяПоля = ОпределитьИмяСубконтоПоИмениСчета(ИмяСчета);	

	УстановитьПараметрыВыбораСубконто(Форма, ИмяСчета, ИмяПоля);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьЗаголовкиИДоступностьСубконто(Форма, ИмяСчета, ИмяПоля)

	Объект = Форма.Объект;
	
	ПоляФормы = Новый Структура("Субконто1, Субконто2, Субконто3",
		ИмяПоля+"1",
		ИмяПоля+"2",
		ИмяПоля+"3");
	ЗаголовкиПолей = Новый Структура("Субконто1, Субконто2, Субконто3",
		"Заголовок"+ИмяПоля+"1",
		"Заголовок"+ИмяПоля+"2",
		"Заголовок"+ИмяПоля+"3");
	БухгалтерскийУчетКлиентСервер.ПриВыбореСчета(Объект[ИмяСчета], Форма, ПоляФормы, ЗаголовкиПолей);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьПараметрыВыбораСубконто(Форма, ИмяСчета, ИмяПоля)

	Объект = Форма.Объект;
	
	ПараметрыДокумента = ПолучитьСписокПараметров(Форма, ИмяПоля+"%Индекс%"); 
	БухгалтерскийУчетКлиентСервер.ИзменитьПараметрыВыбораПолейСубконто(
		Форма,
		Объект,
		ИмяПоля+"%Индекс%",
		ИмяПоля+"%Индекс%",
		ПараметрыДокумента);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьЗначенияСубконтоПриИзмененииСчета(Форма, ИмяСчета, ИмяПоля)

	Объект = Форма.Объект;
	
	ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3, Организация",
		ИмяПоля+"1",
		ИмяПоля+"2",
		ИмяПоля+"3",
		Объект.Организация);
	БухгалтерскийУчетКлиентСервер.ПриИзмененииСчета(Объект[ИмяСчета], Объект, ПоляОбъекта);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ОпределитьИмяСубконтоПоИмениСчета(ИмяСчета)
	
	Если ИмяСчета = "СчетУчетаДоходовБУ" Тогда
		Возврат "СубконтоДоходов"
	ИначеЕсли ИмяСчета = "СчетУчетаРасходовБУ" Тогда
		Возврат "СубконтоРасходов"
	КонецЕсли;
	
	ВызватьИсключение "Неверное обращение к функции ОпределитьИмяСубконтоПоИмениСчета";
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьСписокПараметров(Форма, ШаблонИмяПоляОбъекта)
	
	Объект = Форма.Объект;
	
	СписокПараметров = Новый Структура;
	Для Индекс = 1 По 3 Цикл
		ИмяПоля = СтрЗаменить(ШаблонИмяПоляОбъекта, "%Индекс%", Индекс);
		Если ТипЗнч(Объект[ИмяПоля]) = Тип("СправочникСсылка.Контрагенты") Тогда
			СписокПараметров.Вставить("Контрагент", Объект[ИмяПоля]);
		ИначеЕсли ТипЗнч(Объект[ИмяПоля]) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
			СписокПараметров.Вставить("ДоговорКонтрагента", Объект[ИмяПоля]);
		ИначеЕсли ТипЗнч(Объект[ИмяПоля]) = Тип("СправочникСсылка.Склады") Тогда
			СписокПараметров.Вставить("Склад", Объект[ИмяПоля]);
		КонецЕсли;
	КонецЦикла;
	СписокПараметров.Вставить("Организация", Объект.Организация);

	Возврат СписокПараметров;

КонецФункции

&НаСервере
Функция НайтиСтрокуТабличнойЧасти(ИмяТабличнойЧасти, СтруктураОтбора)

	СтрокаТабличнойЧасти = Неопределено;

	МассивНайденныхСтрок = Объект[ИмяТабличнойЧасти].НайтиСтроки(СтруктураОтбора);
	Если МассивНайденныхСтрок.Количество() > 0 Тогда
		// Нашли. Вернем первую найденную строку.
		СтрокаТабличнойЧасти = МассивНайденныхСтрок[0];
	КонецЕсли;

	Возврат СтрокаТабличнойЧасти;

КонецФункции

#КонецОбласти    //СлужебныйПрограммныйИнтерфейс