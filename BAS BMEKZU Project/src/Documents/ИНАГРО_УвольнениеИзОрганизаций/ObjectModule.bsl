#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область ОбработчикиСобытий

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ИНАГРО_ПроведениеРасчетов.СформироватьКраткийСоставСотрудников(ЭтотОбъект, "РаботникиОрганизации");
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКПроведению(ЭтотОбъект);

	РезультатЗапросаПоШапке = СформироватьЗапросПоШапке(РежимПроведения);
	
	// Получим реквизиты шапки из запроса
	ВыборкаПоШапкеДокумента = РезультатЗапросаПоШапке.Выбрать();
	Если ВыборкаПоШапкеДокумента.Следующий() Тогда
		
		// Движения стоит добавлять, если в проведении еще не отказано (отказ =ложь)
		Если НЕ Отказ Тогда
			
			// получим реквизиты табличной части
			РезультатЗапросаПоРаботники = СформироватьЗапросПоРаботникиОрганизаций(ВыборкаПоШапкеДокумента, РежимПроведения);
			ВыборкаПоСтрокамДокумента = РезультатЗапросаПоРаботники.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			
			// обходим строки документа
			Пока ВыборкаПоСтрокамДокумента.Следующий() Цикл 
				
				// выберем все виды строк запроса для текущей строки документа
				ВыборкаПоВидамСтрокЗапроса = ВыборкаПоСтрокамДокумента.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				Пока ВыборкаПоВидамСтрокЗапроса.Следующий() Цикл 
					
					// Для каждого вида строки запроса свои проверки
					ВидСтрокиЗапроса = ВыборкаПоВидамСтрокЗапроса.ВидСтрокиЗапроса;
					ВыборкаСтрокЗапроса = ВыборкаПоВидамСтрокЗапроса.Выбрать();
					
					
					// обходим строки запроса, проверяем данные и формируем движения
					Пока ВыборкаСтрокЗапроса.Следующий() Цикл
						
						ПроверитьЗаполнениеСтрокиРаботникаОрганизации(ВыборкаПоШапкеДокумента, ВыборкаСтрокЗапроса , Отказ);
						Если НЕ Отказ Тогда
							ДобавитьСтрокуВДвиженияПоРегистрамСведений(ВыборкаПоШапкеДокумента, ВыборкаСтрокЗапроса);
						КонецЕсли;  
						
					КонецЦикла;					
					
				КонецЦикла;
				
			КонецЦикла; 
			
		КонецЕсли; 
		
	КонецЕсли;
	

КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКОтменеПроведения(ЭтотОбъект);
	Движения.Записать();

КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)

	Дата = НачалоДня(ОбщегоНазначения.ТекущаяДатаПользователя());
	Ответственный = Пользователи.ТекущийПользователь();
			
КонецПроцедуры

#КонецОбласти

#Область Проведение

// Формирует запрос по шапке документа
//
// Параметры: 
//  Режим - режим проведения
//
// Возвращаемое значение:
//  Результат запроса
//
Функция СформироватьЗапросПоШапке(Режим)
	
	Запрос = Новый Запрос;
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка" , Ссылка);
	
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ 
	|	Дата, 
	|	Организация,
	|	Организация КАК ГоловнаяОрганизация,
	| 	Ссылка 
	|ИЗ 
	|	Документ." + Метаданные().Имя + "
	|ГДЕ 
	|	Ссылка = &ДокументСсылка
	|";
	
	Возврат Запрос.Выполнить();
	
КонецФункции // СформироватьЗапросПоШапке()

// Формирует запрос по таблице "РаботникиОрганизации" документа
//
// Параметры: 
//  Режим - режим проведения
//
// Возвращаемое значение:
//  Результат запроса. В запросе данные документа дополняются данными о 
//  работниках из регистра сведений РаботникиОрганизации и о начислениях
//  и удержаниях из регистров сведений. 
//
Функция СформироватьЗапросПоРаботникиОрганизаций(ВыборкаПоШапкеДокумента, Режим)
	
	Запрос = Новый Запрос;
	
	// Заполним список обособленных подразделений организации 
	ГоловнаяОрганизация = ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка", Ссылка);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ГоловнаяОрганизация", ГоловнаяОрганизация);
	Запрос.УстановитьПараметр("ОсновноеМестоРаботы", Перечисления.ВидыЗанятости.ОсновноеМестоРаботы);
	Запрос.УстановитьПараметр("МассивФизЛиц", РаботникиОрганизации.ВыгрузитьКолонку("Сотрудник"));
	Запрос.УстановитьПараметр("ПриемНаРаботу",Перечисления.ПричиныИзмененияСостояния.ПриемНаРаботу);
	
	// Описание текста запроса:
	// Первая часть запроса  - вид строки запроса "ДанныеДляДвиженийКадров": 
	// 1. Выборка "ТЧРаботникиОрганизации": 
	//		Выбираются строки документа.  
	// 2. Выборка "ПриказыОПриеме"
	//		Присоединяем данные о приказах-приемах на работу с целью проверки соответствия 
	// 		выбранных приказов физлицам и организации
	//		(приказ о приеме может быть оформлен от лица любого структурного подразделения организации)
	// 3. Выборка "ДанныеПоРаботникиДоНазначения": 
	//		Для каждой строки ТЧРаботникиОрганизации выполняем срез по регистру РаботникиОрганизаций на дату ДатаНачала
	//		для выполнения движений и проверки "Работает ли работник на дату перемещения" в указанной организации
	//		(структурном подразделении). 
	//		(Использует данные выборки "ДатыПоследнихДвиженийРаботников")
	// 4. Выборка "ПересекающиесяСтроки": 
	//		Среди остальных строк документа ищем строки, имеющие одиноковый набор реквизитов <ФизЛицо, Приказ>.
	//
	// Вторая часть запроса - вид строки запроса "НачисленияРаботникаОрганизации" - выборка открытых начислений 
	//	и удержаний работника для их закрытия
	// 1. Выборка "ТЧРаботникиОрганизации":
	//		Выбираются строки документа 
	// 2. Выборка "СписокВидовРасчета":
	//		Для каждой строки ТЧРаботникиОрганизации по регистрам ПлановыеНачисленияРаботниковОрганизаций выполняем 
	//		срез последних на дату ДатаУвольнения (выборка СписокВидовРасчета).
	//		Для закрытия нужны только те строки начислений и удержаний, ресурс "Размер" которых не равен нулю.
	//		Удержания физлица закрываем по всем структруным подразделениям только в момент увольнения 
	//		с основного места работы.
	
	// Третья часть запроса - вид строки запроса "РабочиеМестаДоУвольнения" - выборка остающихся мест работы 
	//	 после увольнения
	// Данные выборки нужня для проверки "Работник не может быть уволен с основного места работы до тех пор, 
	//	пока он оформлен внутренним совместителем"
	// 1. Выборка "ТЧРаботникиОрганизации":
	//		Выбираются строки документа 
	// 2. Выборка "ДанныеПоРаботникуДоУвольнения":
	//		Для каждой строки ТЧРаботникиОрганизации выполняем срез по выборке "ДвиженияРаботниковОрганизации" 
	//		регистру РаботникиОрганизаций на дату ДатаУвольнения.
	//		Где выборка "ДвиженияРаботниковОрганизации" есть объединение движений по регистру "РаботникиОрганизаций" 
	//		и движений, которые должны выполниться проверяемым документом. 
	
	// Четвертая часть запроса - вид строки запроса "КонфликтныйДокумент" - поиск конфликтных документов: 
	// 1. Выборка "ТЧРаботникиОрганизации":
	//		Выбираются строки документа 
	// 2. Выборка "КонфликтныеДвижения":
	//		Для каждой строки ТЧРаботникиОрганизации ищем движения по регистрам РаботникиОрганизаций
	//		на дату ДатаУвольнения по набору измерений <ФизЛицо, Приказ>.
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	""ДанныеДляДвиженийКадров"" КАК ВидСтрокиЗапроса,
	|	ТЧРаботникиОрганизации.НомерСтроки КАК НомерСтроки,
	|	ТЧРаботникиОрганизации.Сотрудник,
	|	ТЧРаботникиОрганизации.Сотрудник.Наименование КАК СотрудникНаименование,
	|	ТЧРаботникиОрганизации.ДатаУвольнения,
	|	ТЧРаботникиОрганизации.ОснованиеУвольнения,
	|	ТЧРаботникиОрганизации.ПричинаУвольнения,
	|	ТЧРаботникиОрганизации.Сотрудник.ИНАГРО_ВидЗанятости КАК ВидЗанятости,
	|	ДанныеПоРаботникуДоНазначения.ПодразделениеОрганизации КАК ПрежнееПодразделение,
	|	ДанныеПоРаботникуДоНазначения.ПодразделениеОрганизации.Владелец КАК ПрежняяОрганизация,
	|	ДанныеПоРаботникуДоНазначения.Должность КАК ПрежняяДолжность,
	|	ВЫБОР
	|		КОГДА ПриказыОПриеме.Сотрудник ЕСТЬ NULL
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ОшибкаВПриказеОПриемеНетФизЛица,
	|	ВЫБОР
	|		КОГДА НЕ ПриказыОПриеме.Ссылка.Организация = &ГоловнаяОрганизация
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ОшибкаНеСоответствиеОрганизацииПриказаОПриеме,
	|	ДанныеПоРаботникуДоНазначения.Период КАК ДатаПоследнегоДвиженияПоРаботнику,
	|	ПересекающиесяСтроки.КонфликтнаяСтрокаНомер,
	|	NULL КАК ВидРасчета,
	|	NULL КАК КонфликтныйДокумент
	|ИЗ
	|	Документ.ИНАГРО_УвольнениеИзОрганизаций.РаботникиОрганизации КАК ТЧРаботникиОрганизации
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ИНАГРО_ПриемНаРаботуВОрганизацию.РаботникиОрганизации КАК ПриказыОПриеме
	|		ПО (ПриказыОПриеме.Сотрудник = ТЧРаботникиОрганизации.Сотрудник)
	|			И (ТЧРаботникиОрганизации.Ссылка.Проведен)
	|			И (ПриказыОПриеме.Ссылка.Проведен)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИНАГРО_РаботникиОрганизаций КАК ДанныеПоРаботникуДоНазначения
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|				Док.Сотрудник КАК Сотрудник,
	|				МАКСИМУМ(СостояниеВнутри.Период) КАК ДатаПоследнегоИзменения
	|			ИЗ
	|				РегистрСведений.ИНАГРО_РаботникиОрганизаций КАК СостояниеВнутри
	|					ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ИНАГРО_УвольнениеИзОрганизаций.РаботникиОрганизации КАК Док
	|					ПО СостояниеВнутри.Сотрудник = Док.Сотрудник
	|						И (СостояниеВнутри.Организация = &ГоловнаяОрганизация)
	|						И (Док.Ссылка = &ДокументСсылка)
	|						И СостояниеВнутри.Период <= Док.ДатаУвольнения
	|			
	|			СГРУППИРОВАТЬ ПО
	|				Док.Сотрудник) КАК СписокДат
	|			ПО ДанныеПоРаботникуДоНазначения.Сотрудник = СписокДат.Сотрудник
	|				И ДанныеПоРаботникуДоНазначения.Период = СписокДат.ДатаПоследнегоИзменения
	|				И (ДанныеПоРаботникуДоНазначения.Организация = &ГоловнаяОрганизация)
	|		ПО (ДанныеПоРаботникуДоНазначения.Сотрудник = ТЧРаботникиОрганизации.Сотрудник)
	|			И (ДанныеПоРаботникуДоНазначения.Организация = &ГоловнаяОрганизация)
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ТЧРаботникиОрганизации.НомерСтроки КАК НомерСтроки,
	|			МИНИМУМ(ТЧРаботникиОрганизаций2.НомерСтроки) КАК КонфликтнаяСтрокаНомер
	|		ИЗ
	|			Документ.ИНАГРО_УвольнениеИзОрганизаций.РаботникиОрганизации КАК ТЧРаботникиОрганизации
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ИНАГРО_УвольнениеИзОрганизаций.РаботникиОрганизации КАК ТЧРаботникиОрганизаций2
	|				ПО (ТЧРаботникиОрганизаций2.Ссылка = &ДокументСсылка)
	|					И ТЧРаботникиОрганизации.Сотрудник = ТЧРаботникиОрганизаций2.Сотрудник
	|					И ТЧРаботникиОрганизации.НомерСтроки <> ТЧРаботникиОрганизаций2.НомерСтроки
	|		ГДЕ
	|			ТЧРаботникиОрганизации.Ссылка = &ДокументСсылка
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ТЧРаботникиОрганизации.НомерСтроки) КАК ПересекающиесяСтроки
	|		ПО ТЧРаботникиОрганизации.НомерСтроки = ПересекающиесяСтроки.НомерСтроки
	|ГДЕ
	|	ТЧРаботникиОрганизации.Ссылка = &ДокументСсылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	""НачисленияРаботникаОрганизации"",
	|	ТЧРаботникиОрганизации.НомерСтроки,
	|	ТЧРаботникиОрганизации.Сотрудник,
	|	ТЧРаботникиОрганизации.Сотрудник.Наименование,
	|	ТЧРаботникиОрганизации.ДатаУвольнения,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	СписокВидовРасчета.ДокументОснование,
	|	СписокВидовРасчета.ВидРасчета,
	|	NULL
	|ИЗ
	|	Документ.ИНАГРО_УвольнениеИзОрганизаций.РаботникиОрганизации КАК ТЧРаботникиОрганизации
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			НачисленияРаботниковОрганизации.Сотрудник КАК Сотрудник,
	|			НачисленияРаботниковОрганизации.ВидРасчета КАК ВидРасчета,
	|			NULL КАК ДокументОснование
	|		ИЗ
	|			РегистрСведений.ИНАГРО_ПлановыеНачисленияРаботниковОрганизаций КАК НачисленияРаботниковОрганизации
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|					НачисленияРаботниковОрганизации.Сотрудник КАК Сотрудник,
	|					НачисленияРаботниковОрганизации.ВидРасчета КАК ВидРасчета,
	|					МАКСИМУМ(НачисленияРаботниковОрганизации.Период) КАК ДатаИзмененияРеквизитов
	|				ИЗ
	|					Документ.ИНАГРО_УвольнениеИзОрганизаций.РаботникиОрганизации КАК Док
	|						ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИНАГРО_ПлановыеНачисленияРаботниковОрганизаций КАК НачисленияРаботниковОрганизации
	|						ПО Док.Сотрудник = НачисленияРаботниковОрганизации.Сотрудник
	|							И (НачисленияРаботниковОрганизации.Организация = &ГоловнаяОрганизация)
	|							И Док.ДатаУвольнения >= НачисленияРаботниковОрганизации.Период
	|							И (Док.Ссылка = &ДокументСсылка)
	|				
	|				СГРУППИРОВАТЬ ПО
	|					НачисленияРаботниковОрганизации.Сотрудник,
	|					НачисленияРаботниковОрганизации.ВидРасчета) КАК ДатыНачислений
	|				ПО НачисленияРаботниковОрганизации.Период = ДатыНачислений.ДатаИзмененияРеквизитов
	|					И НачисленияРаботниковОрганизации.Сотрудник = ДатыНачислений.Сотрудник
	|					И (НачисленияРаботниковОрганизации.Организация = &ГоловнаяОрганизация)
	|					И НачисленияРаботниковОрганизации.ВидРасчета = ДатыНачислений.ВидРасчета
	|					И (НачисленияРаботниковОрганизации.Действует = ИСТИНА)) КАК СписокВидовРасчета
	|		ПО ТЧРаботникиОрганизации.Сотрудник = СписокВидовРасчета.Сотрудник
	|ГДЕ
	|	ТЧРаботникиОрганизации.Ссылка = &ДокументСсылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	""УдержанияРаботникаОрганизации"",
	|	ТЧРаботникиОрганизации.НомерСтроки,
	|	ТЧРаботникиОрганизации.Сотрудник,
	|	ТЧРаботникиОрганизации.Сотрудник.Наименование,
	|	ТЧРаботникиОрганизации.ДатаУвольнения,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	СписокВидовРасчета.ВидРасчета,
	|	NULL
	|ИЗ
	|	Документ.ИНАГРО_УвольнениеИзОрганизаций.РаботникиОрганизации КАК ТЧРаботникиОрганизации
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			УдержанияРаботниковОрганизации.Сотрудник КАК Сотрудник,
	|			УдержанияРаботниковОрганизации.ВидРасчета КАК ВидРасчета
	|		ИЗ
	|			РегистрСведений.ИНАГРО_ПлановыеУдержанияРаботниковОрганизаций КАК УдержанияРаботниковОрганизации
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|					УдержанияРаботниковОрганизации.Сотрудник КАК Сотрудник,
	|					УдержанияРаботниковОрганизации.ВидРасчета КАК ВидРасчета,
	|					МАКСИМУМ(УдержанияРаботниковОрганизации.Период) КАК ДатаИзмененияРеквизитов
	|				ИЗ
	|					Документ.ИНАГРО_УвольнениеИзОрганизаций.РаботникиОрганизации КАК Док
	|						ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИНАГРО_ПлановыеУдержанияРаботниковОрганизаций КАК УдержанияРаботниковОрганизации
	|						ПО Док.Сотрудник = УдержанияРаботниковОрганизации.Сотрудник
	|							И (УдержанияРаботниковОрганизации.Организация = &ГоловнаяОрганизация)
	|							И Док.ДатаУвольнения >= УдержанияРаботниковОрганизации.Период
	|							И (Док.Ссылка = &ДокументСсылка)
	|				
	|				СГРУППИРОВАТЬ ПО
	|					УдержанияРаботниковОрганизации.Сотрудник,
	|					УдержанияРаботниковОрганизации.ВидРасчета) КАК ДатыУдержаний
	|				ПО УдержанияРаботниковОрганизации.Период = ДатыУдержаний.ДатаИзмененияРеквизитов
	|					И УдержанияРаботниковОрганизации.Сотрудник = ДатыУдержаний.Сотрудник
	|					И (УдержанияРаботниковОрганизации.Организация = &ГоловнаяОрганизация)
	|					И УдержанияРаботниковОрганизации.ВидРасчета = ДатыУдержаний.ВидРасчета
	|					И (УдержанияРаботниковОрганизации.Действует = ИСТИНА)) КАК СписокВидовРасчета
	|		ПО ТЧРаботникиОрганизации.Сотрудник = СписокВидовРасчета.Сотрудник
	|ГДЕ
	|	ТЧРаботникиОрганизации.Ссылка = &ДокументСсылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	""КонфликтныйДокумент"",
	|	ТЧРаботникиОрганизации.НомерСтроки,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	КонфликтныеДвижения.Регистратор
	|ИЗ
	|	Документ.ИНАГРО_УвольнениеИзОрганизаций.РаботникиОрганизации КАК ТЧРаботникиОрганизации
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			РаботникиОрганизации.Период КАК Период,
	|			РаботникиОрганизации.Сотрудник КАК Сотрудник,
	|			РаботникиОрганизации.Регистратор КАК Регистратор
	|		ИЗ
	|			РегистрСведений.ИНАГРО_РаботникиОрганизаций КАК РаботникиОрганизации
	|		ГДЕ
	|			РаботникиОрганизации.Организация = &ГоловнаяОрганизация) КАК КонфликтныеДвижения
	|		ПО (КонфликтныеДвижения.Сотрудник = ТЧРаботникиОрганизации.Сотрудник)
	|			И (КонфликтныеДвижения.Период = ДОБАВИТЬКДАТЕ(ТЧРаботникиОрганизации.ДатаУвольнения, ДЕНЬ, 1))
	|ГДЕ
	|	ТЧРаботникиОрганизации.Ссылка = &ДокументСсылка
	|ИТОГИ ПО
	|	НомерСтроки,
	|	ВидСтрокиЗапроса";

	
	Запрос.Текст = ТекстЗапроса;

	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоРаботникиОрганизаций()

// Проверяет правильность заполнения реквизитов в строке ТЧ "РаботникиОрганизации" документа.
// Если какой-то из реквизтов, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса по строке ТЧ документа,
// все проверяемые реквизиты должны быть включены в выборку.
//
// Параметры: 
//  ВыборкаПоШапкеДокумента		- выборка из результата запроса по шапке документа,
//  ВыборкаПоСтрокамДокумента	- спозиционированная на определеной строке выборка 
//  							  из результата запроса по товарам документа, 
//  Отказ 						- флаг отказа в проведении.
//
Процедура ПроверитьЗаполнениеСтрокиРаботникаОрганизации(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента, Отказ)
	
	СтрокаНачалаСообщенияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='ТЧ ""Работники организации"" в строке %1: ';uk='ТЧ ""Робітники організацій"" в рядку %1: '"), СокрЛП(ВыборкаПоСтрокамДокумента.НомерСтроки));
	Если ВыборкаПоСтрокамДокумента.ВидСтрокиЗапроса = "ДанныеДляДвиженийКадров" Тогда
		
		Если ВыборкаПоСтрокамДокумента.ОшибкаНеСоответствиеОрганизацииПриказаОПриеме Тогда
			ТекстСообщения = СтрокаНачалаСообщенияОбОшибке + НСтр("ru=' указанный приказ о приеме оформлен на другую организацию!';uk=' вказаний наказ про прийом оформлений на іншу організацію!'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,ЭтотОбъект,,,Отказ);
		ИначеЕсли ВыборкаПоСтрокамДокумента.ОшибкаВПриказеОПриемеНетФизЛица Тогда
			ТекстСообщения = СтрокаНачалаСообщенияОбОшибке + НСтр("ru=' работник и приказ о приеме не соответствуют друг другу!';uk=' працівник і наказ про прийом не відповідають один одному!'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,ЭтотОбъект,,,Отказ);
		КонецЕсли;
				
		// Проверка: противоречие другой строке документа
		Если ВыборкаПоСтрокамДокумента.КонфликтнаяСтрокаНомер <> NULL Тогда
			ТекстСообщения = СтрокаНачалаСообщенияОбОшибке + НСтр("ru='работник не может быть указан в документе дважды (см. строку ';uk='працівник не може бути зазначений у документі двічі (див. рядок '") + ВыборкаПоСтрокамДокумента.КонфликтнаяСтрокаНомер + ")!";
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,ЭтотОбъект,,,Отказ);
		КонецЕсли;	
		
	ИначеЕсли ВыборкаПоСтрокамДокумента.ВидСтрокиЗапроса = "КонфликтныйДокумент" Тогда	
		
		// противоречие другим кадровым приказам
		ТекстСообщения = СтрокаНачалаСообщенияОбОшибке + НСтр("ru='возникает противоречие кадровому приказу ';uk='виникає протиріччя кадровому наказу '") + Символы.ПС + Символы.Таб + ВыборкаПоСтрокамДокумента.КонфликтныйДокумент + "!";
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,ЭтотОбъект,,,Отказ);
		
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаполнениеСтрокиРаботникаОрганизации()

// По строке выборки результата запроса по документу формируем движения по регистрам.
//
// Параметры: 
//  ВыборкаПоШапкеДокумента      	- выборка из результата запроса по шапке документа,
//  ВыборкаПоРаботникиОрганизации 	- выборка из результата запроса по табличной части документа.
//
// Возвращаемое значение:
//  Нет.
//
Процедура ДобавитьСтрокуВДвиженияПоРегистрамСведений(ВыборкаПоШапкеДокумента, ВыборкаПоРаботникиОрганизации)
	
	Если ВыборкаПоРаботникиОрганизации.ВидСтрокиЗапроса = "ДанныеДляДвиженийКадров" Тогда
		
		//// Если документ нужно проводить по регистру, то для него есть ключ в структуре
		Движения.ИНАГРО_РаботникиОрганизаций.Записывать = Истина;
		Движение = Движения.ИНАГРО_РаботникиОрганизаций.Добавить();
		
		Движение.Период                     = КонецДня(ВыборкаПоРаботникиОрганизации.ДатаУвольнения) ;
		
		// Измерения
		Движение.Сотрудник                  = ВыборкаПоРаботникиОрганизации.Сотрудник;
		Движение.Организация           		= ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;
		// Ресурсы
		Движение.ПодразделениеОрганизации	= ВыборкаПоРаботникиОрганизации.ПрежнееПодразделение;
		Движение.Должность					= ВыборкаПоРаботникиОрганизации.ПрежняяДолжность;
		
		// Реквизиты
		Движение.ПричинаИзмененияСостояния  = Перечисления.ПричиныИзмененияСостояния.Увольнение;
		Движение.СтатьяКЗоТ  				= ВыборкаПоРаботникиОрганизации.ОснованиеУвольнения;
		
		Если ВыборкаПоРаботникиОрганизации.Сотрудник.ИНАГРО_ВидЗанятости <> Перечисления.ВидыЗанятости.ВнутреннееСовместительство Тогда
			
			// Льготы работника	
			Запрос = Новый Запрос;
			Запрос.Текст = "
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ //<< Ин-Агро - добавлено Разрешенные
			|	Льготы.Организация,
			|	Льготы.ИНАГРО_Сотрудник КАК Сотрудник,
			|	Льготы.Льгота,
			|   Льготы.Актуальность,
			|	Льготы.Период
			|
			|ИЗ
			|	РегистрСведений.ЛьготыПоНДФЛСотрудников.СрезПоследних(&Дата)	КАК Льготы
			|
			|ГДЕ
			|	Льготы.Организация 	= &Организация
			| И Льготы.ИНАГРО_Сотрудник		= &Работник
			|
			|";
			
			Запрос.УстановитьПараметр("Организация"	, ВыборкаПоРаботникиОрганизации.ПрежняяОрганизация);
			Запрос.УстановитьПараметр("Работник"	, ВыборкаПоРаботникиОрганизации.Сотрудник);
			Запрос.УстановитьПараметр("Дата"		, ВыборкаПоРаботникиОрганизации.ДатаУвольнения);
			Выборка = Запрос.Выполнить().Выбрать();
			мОтказ = ложь;	
			
			Движения.ЛьготыПоНДФЛСотрудников.Записывать = Истина;
			Пока Выборка.Следующий() Цикл
				Если Выборка.Актуальность = Истина Тогда
					
					Движение = Движения.ЛьготыПоНДФЛСотрудников.Добавить();		
					
					// Свойства
					Движение.Период						= КонецМесяца(ВыборкаПоРаботникиОрганизации.ДатаУвольнения)+1;				
					
					// Измерения
					Движение.ИНАГРО_Сотрудник           = Выборка.Сотрудник;
					Движение.ФизическоеЛицо             = Выборка.Сотрудник.ФизическоеЛицо;
					Движение.Организация           		= Выборка.Организация;
					Движение.Льгота						= Выборка.Льгота;
					
					// Ресурсы
					Движение.Актуальность				= Ложь;
				КонецЕсли;		
			КонецЦикла;
			
			// Взносы в фонды работника
			Запрос.Текст = "
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ //<< Ин-Агро - добавлено Разрешенные
			|	Взносы.Организация,
			|	Взносы.Сотрудник,
			|	Взносы.Налог,
			|   Взносы.Действует
			|
			|ИЗ
			|	РегистрСведений.ИНАГРО_ВзносыВФондыРаботниковОрганизаций.СрезПоследних(&Дата)	КАК Взносы
			|
			|ГДЕ
			|	Взносы.Организация 	= &Организация
			| И Взносы.Сотрудник		= &Работник
			|
			|";
			
			Запрос.УстановитьПараметр("Организация"	, ВыборкаПоРаботникиОрганизации.ПрежняяОрганизация);
			Запрос.УстановитьПараметр("Работник"	, ВыборкаПоРаботникиОрганизации.Сотрудник);
			Запрос.УстановитьПараметр("Дата"		, ВыборкаПоРаботникиОрганизации.ДатаУвольнения);
			Выборка = Запрос.Выполнить().Выбрать();
			
			Движения.ИНАГРО_ВзносыВФондыРаботниковОрганизаций.Записывать = Истина;
			Пока Выборка.Следующий() Цикл
				Если Выборка.Действует = Истина Тогда
					Движение = Движения.ИНАГРО_ВзносыВФондыРаботниковОрганизаций.Добавить();		
					// Свойства
					Движение.Период                     = КонецДня(ВыборкаПоРаботникиОрганизации.ДатаУвольнения);
					
					// Измерения
					Движение.Сотрудник                    = Выборка.Сотрудник;
					Движение.Организация           		= Выборка.Организация;
					Движение.Налог						= Выборка.Налог;
					
					// Ресурсы
					Движение.Действует				= Ложь;
				КонецЕсли;		
			КонецЦикла;
			
		КонецЕсли;
		
	ИначеЕсли ВыборкаПоРаботникиОрганизации.ВидСтрокиЗапроса = "НачисленияРаботникаОрганизации" И ЗначениеЗаполнено(ВыборкаПоРаботникиОрганизации.ВидРасчета) Тогда 
		
		Движения.ИНАГРО_ПлановыеНачисленияРаботниковОрганизаций.Записывать = Истина;
		Движение = Движения.ИНАГРО_ПлановыеНачисленияРаботниковОрганизаций.Добавить();
		
		// Свойства
		Движение.Период			= КонецДня(ВыборкаПоРаботникиОрганизации.ДатаУвольнения);
		
		// Измерения
		Движение.Сотрудник		= ВыборкаПоРаботникиОрганизации.Сотрудник;
		Движение.ВидРасчета		= ВыборкаПоРаботникиОрганизации.ВидРасчета;
		
		// Ресурсы
		Движение.Действует		= Ложь;
		
		// Реквизиты
		Движение.Организация	= ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;
		
	ИначеЕсли ВыборкаПоРаботникиОрганизации.ВидСтрокиЗапроса = "УдержанияРаботникаОрганизации" Тогда
		
		Движения.ИНАГРО_ПлановыеУдержанияРаботниковОрганизаций.Записывать = Истина;
		Движение = Движения.ИНАГРО_ПлановыеУдержанияРаботниковОрганизаций.Добавить();
		
		// Свойства
		Движение.Период			= КонецДня(ВыборкаПоРаботникиОрганизации.ДатаУвольнения);
		
		// Измерения
		Движение.Сотрудник		= ВыборкаПоРаботникиОрганизации.Сотрудник;
		Движение.ВидРасчета		= ВыборкаПоРаботникиОрганизации.ВидРасчета;
		
		// Ресурсы
		Движение.Действует		= Ложь;
		
		// Реквизиты
		Движение.Организация	= ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;
		
	КонецЕсли; 
	
КонецПроцедуры // ДобавитьСтрокуВДвиженияПоРегистрамСведений

#КонецОбласти

#КонецЕсли 

