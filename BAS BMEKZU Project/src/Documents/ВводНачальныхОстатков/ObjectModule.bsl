#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

///////////////////////////////////////////////////////////////////////////////////////////////////
//Переменные


Перем мВалютаРегламентированногоУчета;
Перем СодержаниеПроводки;
Перем СтруктураШапкиДокумента;
Перем Заголовок;

Перем мРозницаВПродажныхЦенах;
Перем мВестиСкладскойУчетБУ;
Перем мОценкаМПЗПоСредней;
Перем мУчетДенежныхСредствПоОбособленнымПодразделениям;

Перем мТаблицаУсловий;
Перем мПустаяСтруктура;
Перем мПустаяСтруктураТЧ;

Перем НомераСубконтоРДпоСчету;

Перем АмортизацияБА; // ИНАГРО


////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Область ОбработчикиСобытйФормы

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	// Очистка неиспользуемых реквизитов
	ПолучитьУчетнуюПолитику();
	
	// Запасы
	Если НЕ УчетнаяПолитика.ПлательщикНДС(Организация, НачалоМесяца(Дата)) Тогда
		// организация - не плательщик НДС. Установим во всех ТЧ признак соответствующего учета НДС
		НеОблНДСДеятельность = Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяХозДеятельность;
		
		Для каждого СтрокаТЧ Из ЗапасыВсе Цикл
		    СтрокаТЧ.НалоговоеНазначение = НеОБлНДСДеятельность;
		КонецЦикла;
	КонецЕсли;
	
	НеОблНДСДеятельность = Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяХозДеятельность;
	
	ДатаНКУ2015_ДляВводаНачальныхОстатков = '2015 01 01' - 86400;
	
	
	МожноВводитьОСВременнаяНалоговаяРазница = (Дата < '20141231000000') 
												ИЛИ (Дата >= '20200301000000' И Дата < '20251201000000');
	
	Если НЕ МожноВводитьОСВременнаяНалоговаяРазница Тогда
		
		Если РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.ОсновныеСредства Тогда
			ВводитьОСВременнаяНалоговаяРазница = Ложь;
		ИначеЕсли РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.ВременнаяРазницаОСЗа2020 Тогда
											
		СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Для основного средства  %1 указана дата ввода  <%2> !"
			"Для корректного начисления амортизации дата ввода должна быть в период с 01.03.20 по 01.12.2025.';uk='Для основного засобу %1 зазначена дата вводу <%2> міс.!"
			"Для коректного нарахування амортизації  дата вводу повинна бути в період з 01.03.20 по 01.12.2025.'"),
													ОсновноеСредствоВременнаяНалоговаяРазница, Дата);
				
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения);
		
		КонецЕсли;
	
	КонецЕсли;
	
	Если (ВводитьОСВременнаяНалоговаяРазница
			ИЛИ  РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.ВременнаяРазницаОСЗа2020)
													И СрокИспользованияВременнаяНалоговаяРазница > 60 Тогда
										
		СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Для основного средства  %1 указан срок полезного использования <%2> мес.!"
			"Для корректного начисления амортизации срок использования должен быть не более 60 месяцев.';uk='Для основного засобу %1 зазначений строк корисного використання <%2> міс.!"
			"Для коректного нарахування амортизації строк використання повинен бути не більше 60 місяців.'"),
													ОсновноеСредствоВременнаяНалоговаяРазница, СрокИспользованияВременнаяНалоговаяРазница);
				
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения);
		
	КонецЕсли;
	
	// ОС
	Для каждого СтрТЧОС Из ОС Цикл
		
		СпособыНачисленияАмортизации = Перечисления.СпособыНачисленияАмортизацииОС;             
	    // Бухгалтерский учет
		Если СтрТЧОС.СпособНачисленияАмортизацииБУ <> СпособыНачисленияАмортизации.Производственный Тогда
			СтрТЧОС.ПараметрВыработкиБУ = Справочники.ПараметрыВыработкиОС.ПустаяСсылка();
		КонецЕсли;  		
		
		Если СтрТЧОС.СпособНачисленияАмортизацииБУ <> СпособыНачисленияАмортизации.Прямолинейный
		   И СтрТЧОС.СпособНачисленияАмортизацииБУ <> СпособыНачисленияАмортизации.УменьшенияОстатка 
		   И СтрТЧОС.СпособНачисленияАмортизацииБУ <> СпособыНачисленияАмортизации.УскоренногоУменьшенияОстатка 
		   И СтрТЧОС.СпособНачисленияАмортизацииБУ <> СпособыНачисленияАмортизации.Кумулятивный Тогда			 
			 СтрТЧОС.СрокПолезногоИспользованияБУ = 0;
			 Если НЕ ЗначениеЗаполнено(СтрТЧОС.СпособНачисленияАмортизацииНУ) Тогда
				 Если СтрТЧОС.СпособНачисленияАмортизацииБУ <> СпособыНачисленияАмортизации.Производственный Тогда
					 СтрТЧОС.ЛиквидационнаяСтоимостьБУ = 0;
				 КонецЕсли;
				 СтрТЧОС.ГрафикАмортизацииБУ = Справочники.ГодовыеГрафикиАмортизацииОС.ПустаяСсылка();			 
			 КонецЕсли;	 
		 КонецЕсли;
		 
		 Если СтрТЧОС.СпособНачисленияАмортизацииБУ = СпособыНачисленияАмортизации.УскоренногоУменьшенияОстатка Тогда				
			Если СтрТЧОС.СрокИспользованияДляВычисленияАмортизацииБУ <= 24 Тогда						
				СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Для основного средства при расчете по способу %1 указан срок полезного использования <%2> мес.!
|Для корректного начисления амортизации срок использования должен быть более 24 месяца.';uk='Для основного засобу при розрахунку способом %1 зазначений строк корисного використання <%2> міс.!
|Для коректного нарахування амортизації строк використання повинен бути більше 24 місяців.'"),
												СтрТЧОС.СпособНачисленияАмортизацииБУ, СтрТЧОС.СрокПолезногоИспользованияБУ);
				Поле = "ОС[" + Формат(СтрТЧОС.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].СрокИспользованияДляВычисленияАмортизацииБУ";								
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения,ЭтотОбъект, Поле, "Объект");
			КонецЕсли; 		 	
		 КонецЕсли;
		 
		 Если Дата >= ДатаНКУ2015_ДляВводаНачальныхОстатков Тогда
			 Если НЕ ЗначениеЗаполнено(СтрТЧОС.СпособНачисленияАмортизацииНУ) Тогда
				 СтрТЧОС.СпособНачисленияАмортизацииНУ = СтрТЧОС.СпособНачисленияАмортизацииБУ;	
			 КонецЕсли;	
			 Если НЕ ЗначениеЗаполнено(СтрТЧОС.СрокИспользованияДляВычисленияАмортизацииНУ) Тогда
				 Если  (СтрТЧОС.СпособНачисленияАмортизацииНУ = Перечисления.СпособыНачисленияАмортизацииОС.Прямолинейный)
					 ИЛИ (СтрТЧОС.СпособНачисленияАмортизацииНУ = Перечисления.СпособыНачисленияАмортизацииОС.Кумулятивный)
					 ИЛИ (СтрТЧОС.СпособНачисленияАмортизацииНУ = Перечисления.СпособыНачисленияАмортизацииОС.УменьшенияОстатка)
					 ИЛИ (СтрТЧОС.СпособНачисленияАмортизацииНУ = Перечисления.СпособыНачисленияАмортизацииОС.УскоренногоУменьшенияОстатка) Тогда
					 
					 СтрТЧОС.СрокИспользованияДляВычисленияАмортизацииНУ = СтрТЧОС.СрокИспользованияДляВычисленияАмортизацииБУ;	
				 КонецЕсли;
			 КонецЕсли;	
			 
			НепроизводственноеНУ = (СтрТЧОС.НалоговоеНазначение.ВидНалоговойДеятельности = Справочники.ВидыНалоговойДеятельности.НеОблагаемая);
			Если НепроизводственноеНУ Тогда
				СтрТЧОС.БалансоваяСтоимостьНУ = 0;
				СтрТЧОС.НакопленнаяАмортизацияНУ = 0;
			КонецЕсли;	
			 
		 КонецЕсли;	
		 
		 Если НЕ УчетнаяПолитика.ПлательщикНДС(Организация, НачалоМесяца(Дата)) Тогда
			 // организация - не плательщик НДС. Установим во всех ТЧ признак соответствующего учета НДС
			 Если НЕ СтрТЧОС.НепроизводственноеНУ Тогда
				 СтрТЧОС.НалоговоеНазначение = НеОблНДСДеятельность;
			 КонецЕсли;	
		 КонецЕсли;
		 
		 Если НЕ ЗначениеЗаполнено(СтрТЧОС.СчетУчетаДооценокОС) Тогда
			СтрТЧОС.СчетУчетаДооценокОС = ПланыСчетов.Хозрасчетный.ДооценкаОсновныхСредств;		 
		 КонецЕсли; 
		 
	КонецЦикла; 
	
	// НМА
	Для каждого СтрТЧНМА Из НМА Цикл
	
		СпособыНачисленияАмортизации = Перечисления.СпособыНачисленияАмортизацииНМА;
	   	Если СтрТЧНМА.СпособНачисленияАмортизацииБУ = СпособыНачисленияАмортизации.Производственный Тогда			
			СтрТЧНМА.СрокПолезногоИспользованияБУ	= 0;
			Если НЕ ЗначениеЗаполнено(СтрТЧНМА.СпособНачисленияАмортизацииНУ) Тогда
				СтрТЧНМА.ЛиквидационнаяСтоимостьБУ 		= 0;
				СтрТЧНМА.СрокПолезногоИспользованияНУ	= 0;
			КонецЕсли;	
		Иначе                                           					
			СтрТЧНМА.ОбъемПродукцииРаботДляВычисленияАмортизации = 0;
		КонецЕсли;
		 
		 Если СтрТЧНМА.СпособНачисленияАмортизацииБУ = СпособыНачисленияАмортизации.УскоренногоУменьшенияОстатка Тогда
				
			Если СтрТЧНМА.СрокПолезногоИспользованияБУ <= 24 Тогда						
				СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Для нематериального актива при расчете по способу %1 указан срок полезного использования <%2> мес.!
|Для корректного начисления амортизации срок использования должен быть более 24 месяца.';uk='Для нематеріального активу при розрахунку способом %1 зазначений строк корисного використання <%2> міс.!
|Для коректного нарахування амортизації строк використання повинен бути більше 24 місяців.'"),
												СтрТЧНМА.СпособНачисленияАмортизацииБУ, СтрТЧНМА.СрокПолезногоИспользованияБУ);
				Поле = "НМА[" + Формат(СтрТЧНМА.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].СрокПолезногоИспользованияБУ";								
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения,ЭтотОбъект, Поле, "Объект");
			КонецЕсли; 		 	
		 КонецЕсли;
		
		Если СтрТЧНМА.НематериальныйАктив.НалоговоеНазначение.ВидНалоговойДеятельности = Справочники.ВидыНалоговойДеятельности.НеОблагаемая Тогда			
			 СтрТЧНМА.НачислятьАмортизациюНУ	= Ложь;			 
		КонецЕсли;	
		
		 Если Дата >= ДатаНКУ2015_ДляВводаНачальныхОстатков Тогда
			 Если НЕ ЗначениеЗаполнено(СтрТЧНМА.СпособНачисленияАмортизацииНУ) Тогда
				 СтрТЧНМА.СпособНачисленияАмортизацииНУ = СтрТЧНМА.СпособНачисленияАмортизацииБУ;	
			 КонецЕсли;	
			 Если НЕ ЗначениеЗаполнено(СтрТЧНМА.СрокПолезногоИспользованияНУ) Тогда
				 Если  (СтрТЧНМА.СпособНачисленияАмортизацииНУ = Перечисления.СпособыНачисленияАмортизацииНМА.Прямолинейный)
					 ИЛИ (СтрТЧНМА.СпособНачисленияАмортизацииНУ = Перечисления.СпособыНачисленияАмортизацииНМА.Кумулятивный)
					 ИЛИ (СтрТЧНМА.СпособНачисленияАмортизацииНУ = Перечисления.СпособыНачисленияАмортизацииНМА.УменьшенияОстатка)
					 ИЛИ (СтрТЧНМА.СпособНачисленияАмортизацииНУ = Перечисления.СпособыНачисленияАмортизацииНМА.УскоренногоУменьшенияОстатка) Тогда
					 
					 СтрТЧНМА.СрокПолезногоИспользованияНУ = СтрТЧНМА.СрокПолезногоИспользованияБУ;	
				 КонецЕсли;
			 КонецЕсли;	
			 
			НепроизводственноеНУ = (СтрТЧНМА.НематериальныйАктив.НалоговоеНазначение.ВидНалоговойДеятельности = Справочники.ВидыНалоговойДеятельности.НеОблагаемая);
			Если НепроизводственноеНУ Тогда
				СтрТЧНМА.ПервоначальнаяСтоимостьНУ = 0;
				СтрТЧНМА.НакопленнаяАмортизацияНУ = 0;
			КонецЕсли;	
			 
		 КонецЕсли;	
		
		
	КонецЦикла; 	
	
	// Малоценные активы. Автоматическое создание назначения использования 
	Если РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.МалоценныеАктивыВЭксплуатации Тогда
		Если НЕ ВводитьОстаткиЗапасовВРазрезеДатОприходования Тогда
			Для Каждого СтрокаМалоценки Из МалоценныеАктивы Цикл
				СтрокаМалоценки.ДатаПриобретения = Дата;
			КонецЦикла;
		КонецЕсли;	
		
		Если НЕ УчетнаяПолитика.ПлательщикНДС(Организация, НачалоМесяца(Дата)) Тогда
			// организация - не плательщик НДС. Установим во всех ТЧ признак соответствующего учета НДС
			НеОблНДСДеятельность = Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяХозДеятельность;
			
			Для Каждого СтрокаМалоценки Из МалоценныеАктивы Цикл
				СтрокаМалоценки.НалоговоеНазначение = НеОблНДСДеятельность;
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;	
	
	// ИНАГРО++
	Если Проведен И РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения И АмортизацияБА Тогда
		
		Если  РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.ОсновныеСредства
			И ЗначениеЗаполнено(ИНАГРО_ДокументОперативногоУчета)
			И ИНАГРО_ДокументОперативногоУчета.Проведен Тогда
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Отмена проведения запрещена! Документ-основание ""%1"" проведен.';uk='Вiдміна проведення заборонено! Документ-підстава ""%1"" проведений'"), ИНАГРО_ДокументОперативногоУчета);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
				Отказ = Истина;
			КонецЕсли;
			
	КонецЕсли;
	// ИНАГРО--

КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;  	
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ)
	
	мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	
	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента = ОбщегоНазначенияРед12.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	
	ДополнитьСтруктуруШапкиДокумента(СтруктураШапкиДокумента);
			
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначенияБПВызовСервера.ПредставлениеДокументаПриПроведении(СтруктураШапкиДокумента.Ссылка);
	
	// Проверка ручной корректировки
	ПроведениеСервер.ПодготовитьНаборыЗаписейКПроведению(ЭтотОбъект);
	Если РучнаяКорректировка Тогда
		Возврат;
	КонецЕсли;
	
	
	Если Отказ Тогда		
		Возврат     		
	КонецЕсли;
	
	// Получим данные учетной политики
	ПодготовитьПараметрыУчетнойПолитики(СтруктураШапкиДокумента, Отказ, Заголовок);
		
	СодержаниеПроводки = СодержаниеПроводки(СтруктураШапкиДокумента.РазделУчета);
	
	Если Не Отказ Тогда
			
		Если СтруктураШапкиДокумента.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.ОсновныеСредства Тогда
			
			ДвиженияПоРегистрам(ЭтотОбъект, СтруктураШапкиДокумента, Отказ, Заголовок);
		ИначеЕсли СтруктураШапкиДокумента.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.ВременнаяРазницаОСЗа2020 Тогда
		
			ФормированиеДвиженияОСВременнаяНалоговаяРазница(ЭтотОбъект, СтруктураШапкиДокумента, Отказ, Заголовок)
			
		ИначеЕсли СтруктураШапкиДокумента.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.НематериальныеАктивы Тогда
			
			ДвиженияПоРегистрамНМА(Отказ, Заголовок);
			
		ИначеЕсли СтруктураШапкиДокумента.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.ВзаиморасчетыСКонтрагентами Тогда
			
			ОбработкаПроведения_ВзаиморасчетыСКонтрагентами(Отказ);
		
		ИначеЕсли СтруктураШапкиДокумента.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.ДенежныеСредства
		 	ИЛИ СтруктураШапкиДокумента.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.ПрочиеСчетаБухгалтерскогоУчета
			ИЛИ СтруктураШапкиДокумента.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.ВзаиморасчетыСПодотчетнымиЛицами Тогда
			
		 	ОбработкаПроведения_БухСправка(Отказ);
			
		ИначеЕсли СтруктураШапкиДокумента.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.КапитальныеИнвестиции
			ИЛИ СтруктураШапкиДокумента.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.ЗапасыСебестоимость
			ИЛИ СтруктураШапкиДокумента.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.ЗапасыПереданные
			ИЛИ СтруктураШапкиДокумента.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.ТоварыНаКомиссии Тогда
			
		 	ОбработкаПроведения_ЗапасыВсе(Отказ);
			
		ИначеЕсли СтруктураШапкиДокумента.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.ТранспортноЗаготовительныеРасходыНаОтдельныхСубсчетах Тогда
			
		 	ОбработкаПроведения_ТЗР(Отказ);
			
		ИначеЕсли СтруктураШапкиДокумента.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.НезавершенноеПроизводство Тогда 
			
		 	ОбработкаПроведения_НЗП(Отказ);
			
		ИначеЕсли СтруктураШапкиДокумента.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.МалоценныеАктивыВЭксплуатации Тогда
			
		 	ОбработкаПроведения_МалоценныеАктивы(Отказ);
			
		ИначеЕсли СтруктураШапкиДокумента.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.РасходыБудущихПериодов Тогда
			
		 	ОбработкаПроведения_РасходыБудущихПериодов(Отказ);	
			
		ИначеЕсли СтруктураШапкиДокумента.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.ТоварыПоПродажнойЦене Тогда
			
		 	ОбработкаПроведения_ТоварыПоПродажнойЦене(Отказ);	
			
		ИначеЕсли СтруктураШапкиДокумента.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.ЗарплатаИОтчисления Тогда
			
		 	ОбработкаПроведения_РасчетыСПерсоналомПоОплатеТрудаИДепонентам(Отказ);
		 		
		ИначеЕсли СтруктураШапкиДокумента.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.ДанныеНалоговогоУчета ИЛИ
			СтруктураШапкиДокумента.РазделУчета  = Перечисления.РазделыУчетаДляВводаОстатков.ОтсроченныеНалоговыеАктивыИОбязательства ИЛИ
			СтруктураШапкиДокумента.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.ГруппыОСНалоговыйУчет Тогда
			
			Отказ = Истина;
		ИначеЕсли СтруктураШапкиДокумента.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.БиологическиеАктивы Тогда   // ИНАГРО
			
			ОбработкаПроведения_БиологическиеАктивы(Отказ);  			
			
		КонецЕсли;
	КонецЕсли;
	
	Движения.Хозрасчетный.ВыполнитьДействияПередЗаписьюДвижений();
		
	// ИНАГРО++
	//Движения.Хозрасчетный.Записать(Ложь);	 	
	ИНАГРО_Общий.ИНАГРО_ДвиженияЗатратыОрганизации_Приход(СтруктураШапкиДокумента, Движения);
	// ИНАГРО--
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКЗаписиДвижений(ЭтотОбъект);
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКОтменеПроведения(ЭтотОбъект);
	Движения.Записать();
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") И ДанныеЗаполнения.Свойство("Организация") Тогда
		Дата = Документы.ВводНачальныхОстатков.ПолучитьДатуВводаОстатков(ДанныеЗаполнения.Организация);
	ИначеЕсли Не Справочники.Организации.ИспользуетсяНесколькоОрганизаций() Тогда
		Организация = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация");
		Дата = Документы.ВводНачальныхОстатков.ПолучитьДатуВводаОстатков(Организация); 
	Иначе
		Дата = Документы.ВводНачальныхОстатков.ПолучитьДатуВводаОстатков(Организация);
	КонецЕсли;

	ЗаполнениеДокументов.Заполнить(ЭтотОбъект, ДанныеЗаполнения);
	
	// ИНАГРО++
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") И ДанныеЗаполнения.Свойство("ИНАГРО_ДокументОперативногоУчета") Тогда
		Если ТипЗнч(ДанныеЗаполнения.ИНАГРО_ДокументОперативногоУчета) = Тип("ДокументСсылка.ВводНачальныхОстатков") Тогда			
			ЗаполнениеДокументов.ЗаполнитьПоСтруктуре(ЭтотОбъект, ДанныеЗаполнения); 
			ЗаполнитьТаблицуОС(ДанныеЗаполнения); 
		КонецЕсли;
	КонецЕсли;
	// ИНАГРО--  

КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	МассивНепроверяемыхРеквизитов = Новый Массив;
	
	Если РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.ТоварыНаКомиссии Тогда
		МассивНепроверяемыхРеквизитов.Добавить("ЗапасыВсе.НалоговоеНазначение");
	КонецЕсли; 
	
	мФормаДокумента = Неопределено;
	мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	
	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента = ОбщегоНазначенияРед12.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
			
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначенияБПВызовСервера.ПредставлениеДокументаПриПроведении(СтруктураШапкиДокумента.Ссылка);
	
	// Получим данные учетной политики
	ПодготовитьПараметрыУчетнойПолитики(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	Если Не Отказ Тогда
			
		Если СтруктураШапкиДокумента.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.ОсновныеСредства Тогда
			
			ОбработкаПроверкиЗаполнения_ОсновныеСредства(Отказ,МассивНепроверяемыхРеквизитов);	
			
		ИначеЕсли НЕ СтруктураШапкиДокумента.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.ВременнаяРазницаОСЗа2020 Тогда
			
			МассивНепроверяемыхРеквизитов.Добавить("ОсновноеСредствоВременнаяНалоговаяРазница");
			МассивНепроверяемыхРеквизитов.Добавить("СтоимостьНУВременнаяНалоговаяРазница");
			МассивНепроверяемыхРеквизитов.Добавить("СрокИспользованияВременнаяНалоговаяРазница");

		КонецЕсли;
			
		Если СтруктураШапкиДокумента.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.НематериальныеАктивы Тогда
			
			ОбработкаПроверкиЗаполнения_НематериальныеАктивы(Отказ);
			
		КонецЕсли;	
			
		Если СтруктураШапкиДокумента.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.ВзаиморасчетыСКонтрагентами Тогда
			
			ОбработкаПроверкиЗаполнения_ВзаиморасчетыСКонтрагентами(Отказ,МассивНепроверяемыхРеквизитов);
		
		КонецЕсли;	
			
		Если СтруктураШапкиДокумента.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.ДенежныеСредства
		 	ИЛИ СтруктураШапкиДокумента.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.ПрочиеСчетаБухгалтерскогоУчета
			ИЛИ СтруктураШапкиДокумента.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.ВзаиморасчетыСПодотчетнымиЛицами Тогда
			
		 	ПроверитьЗаполнение_БухСправка(Отказ);
		КонецЕсли;	
			
		Если СтруктураШапкиДокумента.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.КапитальныеИнвестиции
			ИЛИ СтруктураШапкиДокумента.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.ЗапасыСебестоимость
			ИЛИ СтруктураШапкиДокумента.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.ЗапасыПереданные
			ИЛИ СтруктураШапкиДокумента.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.ТоварыНаКомиссии Тогда
			
			// Проверим правильность заполнения табличной части документа
			ПроверитьЗаполнение_ЗапасыВсе(Отказ);
			
			МассивНепроверяемыхРеквизитов.Добавить("ЗапасыВсе.СчетУчета");
			МассивНепроверяемыхРеквизитов.Добавить("ЗапасыВсе.Подразделение");
			МассивНепроверяемыхРеквизитов.Добавить("ЗапасыВсе.НоменклатурнаяГруппа");
			МассивНепроверяемыхРеквизитов.Добавить("ЗапасыВсе.НалоговоеНазначение");
			МассивНепроверяемыхРеквизитов.Добавить("ЗапасыВсе.Сумма");
			МассивНепроверяемыхРеквизитов.Добавить("ЗапасыВсе.Номенклатура");
			
		КонецЕсли;
			
		Если СтруктураШапкиДокумента.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.ТранспортноЗаготовительныеРасходыНаОтдельныхСубсчетах Тогда
			
			ПроверитьЗаполнение_ТЗР(Отказ);
			
			МассивНепроверяемыхРеквизитов.Добавить("Затраты.НоменклатурнаяГруппа");
			МассивНепроверяемыхРеквизитов.Добавить("Затраты.Подразделение");
			
		КонецЕСли;
		
		Если СтруктураШапкиДокумента.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.НезавершенноеПроизводство Тогда 
			
			//ПроверитьЗаполнение_НЗП(Отказ);
	
		ИначеЕсли СтруктураШапкиДокумента.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.МалоценныеАктивыВЭксплуатации Тогда
			
			ПроверитьЗаполнениеТабЧастиМалоценныеАктивы(Отказ, Заголовок,МассивНепроверяемыхРеквизитов);
			
		ИначеЕсли СтруктураШапкиДокумента.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.РасходыБудущихПериодов Тогда
			
		 	//ОбработкаПроведения_РасходыБудущихПериодов(Отказ);	
			
		ИначеЕсли СтруктураШапкиДокумента.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.ТоварыПоПродажнойЦене Тогда
			
	 		ПроверитьЗаполнение_ТоварыПоПродажнойЦене(Отказ);
			
		ИначеЕсли СтруктураШапкиДокумента.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.ЗарплатаИОтчисления Тогда
			
			ПроверитьЗаполнениеТабличнойЧасти_РасчетыСПерсоналомПоОплатеТрудаИДепонентам(Отказ);
		 		
		ИначеЕсли СтруктураШапкиДокумента.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.ДанныеНалоговогоУчета ИЛИ
			СтруктураШапкиДокумента.РазделУчета  = Перечисления.РазделыУчетаДляВводаОстатков.ОтсроченныеНалоговыеАктивыИОбязательства ИЛИ
			СтруктураШапкиДокумента.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.ГруппыОСНалоговыйУчет Тогда
			
			Отказ = Истина;
			
		ИначеЕсли СтруктураШапкиДокумента.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.БиологическиеАктивы Тогда // ИНАГРО 			
			
			ПроверитьЗаполнение_БиологическиеАктивыЖивотные(Отказ);			
			ПроверитьЗаполнение_БиологическиеАктивыРастения(Отказ); 			
			
		КонецЕсли;
	КонецЕсли;
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
КонецПроцедуры

// ИНАГРО++
Процедура ПередУдалением(Отказ)
	
	Если  АмортизацияБА
		И РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.ОсновныеСредства
		И ЗначениеЗаполнено(ИНАГРО_ДокументОперативногоУчета)
		И ИНАГРО_ДокументОперативногоУчета.Проведен Тогда
		                           
		   СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		   	НСтр("ru='Удаление запрещено! Документ-основание ""%1"" проведен.';uk='Видалення заборонено! Документ-підстава ""%1"" проведений'"),
			ИНАГРО_ДокументОперативногоУчета);
		   ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения);         		
		   Отказ = Истина;  	
		
	КонецЕсли;	 
	
КонецПроцедуры
// ИНАГРО--

#КонецОбласти 


#Область Проведение 
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Процедура определяет параметры учетной политики
//
Процедура ПодготовитьПараметрыУчетнойПолитики(СтруктураШапкиДокумента, Отказ, Заголовок)
	                     
	Отказ = НЕ ПолучитьУчетнуюПолитику();
	
	Если НЕ Отказ Тогда
		СтруктураШапкиДокумента.Вставить("ЕстьНалогНаПрибыль", УчетнаяПолитика.ПлательщикНалогаНаПрибыль(Организация, НачалоМесяца(Дата)));
		СтруктураШапкиДокумента.Вставить("ЕстьНалогНаПрибыльДо2015", УчетнаяПолитика.ПлательщикНалогаНаПрибыльДо2015(Организация, НачалоМесяца(Дата)));
		СтруктураШапкиДокумента.Вставить("ЕстьНДС"           , УчетнаяПолитика.ПлательщикНДС(Организация, НачалоМесяца(Дата)));	
		СтруктураШапкиДокумента.Вставить("ЕстьЕдиныйНалог", УчетнаяПолитика.ПлательщикЕдиногоНалога(СтруктураШапкиДокумента.Организация,СтруктураШапкиДокумента.Дата));
	КонецЕсли; // НЕ Отказ                                                               	
	
	Если Отказ Тогда
		мРозницаВПродажныхЦенах = Ложь;
		мОценкаМПЗПоСредней = Истина;
	Иначе
		мРозницаВПродажныхЦенах = УчетнаяПолитика.СпособОценкиТоваровВРознице(Организация, НачалоМесяца(Дата)) = Перечисления.СпособыОценкиТоваровВРознице.ПоПродажнойСтоимости;
		мОценкаМПЗПоСредней = УчетнаяПолитика.СпособОценкиМПЗ(Организация, НачалоМесяца(Дата)) = Перечисления.СпособыОценки.ПоСредней;
	КонецЕсли;
	
КонецПроцедуры // ПодготовитьПараметрыУчетнойПолитики()


Процедура ДополнитьСтруктуруШапкиДокумента(СтруктураШапкиДокумента)
	
		
КонецПроцедуры

////////////////////////////////////////////////////////
//Текст содержания проводки
Функция СодержаниеПроводки(РазделУчета)
	
	СодержаниеТекст = НСтр("ru='Остатки по разделу: ';uk='Залишки по розділу: '",Локализация.КодЯзыкаИнформационнойБазы()) + """" + РазделУчета + """.";
	
	Возврат(СодержаниеТекст);
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
//ОБРАБОТКИ ПРОВЕДЕНИЯ ПО РАЗЛИЧНЫМ РАЗДЕЛАМ

Функция ТипСчетаСубконто(Значение, СтрокаБухСправки)
	
	Если Значение = 1 Тогда //Тип счета
		Строка = "Счет";
	Иначе //Тип субконто
		Строка = "Субконто";
	КонецЕсли;
	
	СчетУчета = СтрокаБухСправки.СчетУчета;
	ВидСчетаУчета = СчетУчета.Вид;
	Если ВидСчетаУчета = ВидСчета.Активный Тогда
		Строка = Строка + "Дт";
	ИначеЕсли ВидСчетаУчета = ВидСчета.Пассивный Тогда
		Строка = Строка + "Кт";
	ИначеЕсли ВидСчетаУчета = ВидСчета.АктивноПассивный Тогда
		Если СтрокаБухСправки.Сумма <> 0 Тогда
			Строка = Строка + "Дт";
		Иначе
			Строка = Строка + "Кт";
		КонецЕсли;
	КонецЕсли;
	
	Возврат Строка;
	
КонецФункции

Функция СформироватьПроводкуБух(Операция, СтрокаБухСправки)
	
	СчетУчета = СтрокаБухСправки.СчетУчета;
	ВидСчетаУчета = СчетУчета.Вид;
	
	Проводка = Операция.Добавить();
	Проводка.Период      = СтруктураШапкиДокумента.Дата;
	Проводка.Организация = СтруктураШапкиДокумента.Организация;
	Проводка.Содержание  = СодержаниеПроводки;
	
	Забалансовый = СчетУчета.Забалансовый;
	
	Если ВидСчетаУчета = ВидСчета.Активный Тогда
		Проводка.Сумма       = СтрокаБухСправки.Сумма;
		ОтразитьПоДебету = Истина;
	ИначеЕсли ВидСчетаУчета = ВидСчета.Пассивный Тогда
		ОтразитьПоДебету = Ложь;
		Если СтрокаБухСправки.Сумма <> 0 Тогда
			Проводка.Сумма       = СтрокаБухСправки.Сумма;
		Иначе
			Если СтруктураШапкиДокумента.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.ПрочиеСчетаБухгалтерскогоУчета
			 ИЛИ СтруктураШапкиДокумента.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.ВзаиморасчетыСПодотчетнымиЛицами
			 ИЛИ СтруктураШапкиДокумента.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.МалоценныеАктивыВЭксплуатации Тогда
			 	Проводка.Сумма = СтрокаБухСправки.СуммаКт;
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ВидСчетаУчета = ВидСчета.АктивноПассивный Тогда
		Если СтрокаБухСправки.Сумма <> 0 Тогда
			Проводка.Сумма       = СтрокаБухСправки.Сумма;
			ОтразитьПоДебету = Истина;
		Иначе
			Проводка.Сумма       = СтрокаБухСправки.СуммаКт;
			ОтразитьПоДебету = Ложь;
		КонецЕсли;
		Если СтруктураШапкиДокумента.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.ЗарплатаИОтчисления Тогда
			ОтразитьПоДебету = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если ОтразитьПоДебету Тогда
		Проводка.СчетДт = СчетУчета;
		Если НЕ Забалансовый Тогда
			Проводка.СчетКт = ПланыСчетов.Хозрасчетный.Вспомогательный;
		КонецЕсли;
		Если СчетУчета.Валютный Тогда
			Проводка.ВалютаДт = СтрокаБухСправки.Валюта;
			Проводка.ВалютнаяСуммаДт = СтрокаБухСправки.ВалютнаяСумма;
		КонецЕсли;
		Если СчетУчета.Количественный Тогда
			Проводка.КоличествоДт = СтрокаБухСправки.Количество;
		КонецЕсли;
		
	Иначе
		Проводка.СчетКт = СчетУчета;
		Если НЕ Забалансовый Тогда
			Проводка.СчетДт = ПланыСчетов.Хозрасчетный.Вспомогательный;
		КонецЕсли;
		Если СчетУчета.Валютный Тогда
			Проводка.ВалютаКт = СтрокаБухСправки.Валюта;
			Проводка.ВалютнаяСуммаКт = СтрокаБухСправки.ВалютнаяСумма;
		КонецЕсли;
		Если СчетУчета.Количественный Тогда
			Проводка.КоличествоКт = СтрокаБухСправки.Количество;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Проводка;
	
КонецФункции


#КонецОбласти 

//*****************************************************************************************************************************
// ПО ТАБЛИЦЕ БУХГАЛТЕРСКАЯ СПРАВКА (ПРОЧИЕ СЧЕТА УЧЕТА)

Функция ПолучитьУчетнуюПолитику() Экспорт

	УчетнаяПолитикаНеЗадана = НЕ УчетнаяПолитика.Существует(Организация, НачалоМесяца(Дата),Истина);
		
	Если УчетнаяПолитикаНеЗадана Тогда
		мУчетДенежныхСредствПоОбособленнымПодразделениям = Ложь;
		мРозницаВПродажныхЦенах = Ложь;
		мОценкаМПЗПоСредней = Истина;
	Иначе	                                                    																 
		// Для денежных средств, если в разрезе обусобленых подразделений.
		мУчетДенежныхСредствПоОбособленнымПодразделениям = УчетнаяПолитика.УчетПоОбособленнымПодразделениям(Организация, НачалоМесяца(Дата));		
		мРозницаВПродажныхЦенах = УчетнаяПолитика.СпособОценкиТоваровВРознице(Организация, НачалоМесяца(Дата)) = Перечисления.СпособыОценкиТоваровВРознице.ПоПродажнойСтоимости;
		мОценкаМПЗПоСредней = УчетнаяПолитика.СпособОценкиМПЗ(Организация, НачалоМесяца(Дата)) = Перечисления.СпособыОценки.ПоСредней;
	КонецЕсли; // УчетнаяПолитикаНеЗадана 
	
	БУ = ПланыСчетов.Хозрасчетный.Товары.ПолучитьОбъект();
	мВестиСкладскойУчетБУ = ?(БУ.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады, "ВидСубконто") = Неопределено, Ложь, Истина);
	
	Если мОценкаМПЗПоСредней И ВводитьОстаткиЗапасовВРазрезеПоставщиков Тогда
		ВводитьОстаткиЗапасовВРазрезеПоставщиков = Ложь;
	КонецЕсли;
	
    Возврат НЕ УчетнаяПолитикаНеЗадана;
	
КонецФункции // ПолучитьУчетнуюПолитику()

Процедура ОбработкаПроведения_БухСправка(Отказ)
	
	
	ФормированиеПроводокБух_БухСправка(БухСправка);
	
КонецПроцедуры

Функция ПолучитьПредставленияВидаПоСубконто(СтрокаТЧ, ИмяСубконто, Представление)
	
	ВыбраныйСчетУчета = СтрокаТЧ.СчетУчета;
	
	Если ЗначениеЗаполнено(ВыбраныйСчетУчета)
	   И ВыбраныйСчетУчета.ВидыСубконто.Количество() Тогда
	
			
			
		Если РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.ВзаиморасчетыСПодотчетнымиЛицами Тогда
			
			Если ИмяСубконто = "Субконто1" Тогда
				Возврат НСтр("ru='Подотчетное лицо';uk='Підзвітна особа'");
			КонецЕсли;	
			
		ИначеЕсли РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.ДенежныеСредства Тогда
			
			Если ВыбраныйСчетУчета = ПланыСчетов.Хозрасчетный.ДенежныеСредстваВПутиВНациональнойВалюте
		   	 ИЛИ ВыбраныйСчетУчета = ПланыСчетов.Хозрасчетный.ДенежныеСредстваВПутиВИностраннойВалюте Тогда 	   	
		  		ВидСубконто = "Банки";
			ИначеЕсли ВыбраныйСчетУчета.Родитель = ПланыСчетов.Хозрасчетный.Касса
				    И мУчетДенежныхСредствПоОбособленнымПодразделениям
					И ВыбраныйСчетУчета.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОбособленныеПодразделенияБезОбразованияЮрЛица, "ВидСубконто") <> Неопределено Тогда
				ВидСубконто = НСтр("ru='Обособленные подразделения';uk='Відокремлені підрозділи'");
			ИначеЕсли ВыбраныйСчетУчета.ВидыСубконто[0].ТолькоОбороты Тогда
				Возврат Представление;
		 	Иначе
		    	ВидСубконто = ВыбраныйСчетУчета.ВидыСубконто.Получить(0).ВидСубконто;	   
		  	КонецЕсли; 
			
            Возврат ВидСубконто;
			
		КонецЕсли; //разделы учета	
	
	КонецЕсли; 
	
	Возврат Представление;
	
КонецФункции	

Функция ПолучитьПредставленияРеквизитаСумма(СтрокаТЧ, ИмяСумма, Представление)
	
	Если РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.КапитальныеИнвестиции Тогда
		
		Возврат НСтр("ru='Сумма в национальной валюте';uk='Сума в національній валюті'");
		
	ИначеЕсли РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.ЗапасыСебестоимость Тогда	
		
		Возврат НСтр("ru='Себестоимость (БУ)';uk='Собівартість (БО)'");
		
	ИначеЕсли РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.ЗапасыПереданные Тогда	
		
		Возврат НСтр("ru='Себестоимость (БУ)';uk='Собівартість (БО)'");
		
	ИначеЕсли РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.ТоварыНаКомиссии Тогда

		Возврат НСтр("ru='Сумма в национальной валюте';uk='Сума в національній валюті'");
		
		
	ИначеЕсли РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.ВзаиморасчетыСПодотчетнымиЛицами Тогда
		
		Если ИмяСумма = "ВалютнаяСумма" Тогда
			Возврат НСтр("ru='Сумма в национальной валюте';uk='Сума в національній валюті'");
		ИначеЕсли ИмяСумма = "Сумма" Тогда
			Возврат НСтр("ru='Задолженность подотчетника в валюте аванса';uk='Заборгованість підзвітника у валюті авансу'");
		ИначеЕсли ИмяСумма = "СуммаКт" Тогда
			Возврат НСтр("ru='Задолженность перед подотчетником в валюте отчета';uk='Заборгованість перед підзвітником у валюті звіту'");
		КонецЕсли;	
		
	ИначеЕсли РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.ДенежныеСредства Тогда
		
		Если ИмяСумма = "ВалютнаяСумма" Тогда
			Возврат НСтр("ru='Сумма в валюте учета ДС';uk='Сума у валюті обліку ГК'");
		ИначеЕсли ИмяСумма = "Сумма" Тогда
			Возврат НСтр("ru='Сумма в национальной валюте';uk='Сума в національній валюті'");
		КонецЕсли;	
		
	ИначеЕсли РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.ПрочиеСчетаБухгалтерскогоУчета Тогда
		
		Если ИмяСумма = "Сумма" Тогда
			Возврат НСтр("ru='Остаток по дебету';uk='Залишок по дебету'");
		ИначеЕсли ИмяСумма = "СуммаКт" Тогда
			Возврат НСтр("ru='Остаток по кредиту';uk='Залишок по кредиту'");
		КонецЕсли;	
		
	КонецЕсли; //разделы учета	
	
	Возврат Представление;
	
КонецФункции	

Процедура ПроверкаПоСтроке_БухСправка(СтрокаТЧ, МетаданныеРеквизиты, Отказ)
	
	Если СтруктураШапкиДокумента.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.ДенежныеСредства Тогда
		
		СтруктураОбязательныхРеквизитов = Новый Структура("Сумма");
		
		Если СтрокаТЧ.СчетУчета.ВидыСубконто.Количество() > 0 И  НЕ СтрокаТЧ.СчетУчета.ВидыСубконто[0].ТолькоОбороты Тогда
			
			СтруктураОбязательныхРеквизитов.Вставить("Субконто1");	
			
		КонецЕсли;	
		
		Если СтрокаТЧ.СчетУчета.Валютный Тогда
			
			СтруктураОбязательныхРеквизитов.Вставить("Валюта");	
			СтруктураОбязательныхРеквизитов.Вставить("Курс");	
			СтруктураОбязательныхРеквизитов.Вставить("ВалютнаяСумма");	
			
		КонецЕсли;	
		
	ИначеЕсли СтруктураШапкиДокумента.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.ВзаиморасчетыСКонтрагентами Тогда
		
		СтруктураОбязательныхРеквизитов = Новый Структура("Сумма");
		
	ИначеЕсли СтруктураШапкиДокумента.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.ВзаиморасчетыСПодотчетнымиЛицами Тогда
		
		СтруктураОбязательныхРеквизитов = Новый Структура("ВалютнаяСумма");
	ИначеЕсли СтруктураШапкиДокумента.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.РасходыБудущихПериодов Тогда
		
		СтруктураОбязательныхРеквизитов = Новый Структура("Сумма");
		
	ИначеЕсли СтруктураШапкиДокумента.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.ПрочиеСчетаБухгалтерскогоУчета Тогда
		
		СтруктураОбязательныхРеквизитов = Новый Структура("");
		
		Если СтрокаТЧ.СчетУчета.Вид = ВидСчета.Активный Тогда
			СтруктураОбязательныхРеквизитов.Вставить("Сумма");
		ИначеЕсли СтрокаТЧ.СчетУчета.Вид = ВидСчета.Пассивный Тогда
			СтруктураОбязательныхРеквизитов.Вставить("СуммаКт");
		КонецЕсли;
		
	КонецЕсли;	
	
	//СтрокаНачалаСообщенияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='В строке номер ""%1"" табличной части: ';uk='У рядку номер ""%1"" табличної частини: '"), СтрокаТЧ.НомерСтроки);	
	Префикс = "БухСправка[" + Формат(СтрокаТЧ.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].";

	Для каждого КлючЗначение Из СтруктураОбязательныхРеквизитов Цикл
		
		Значение = СтрокаТЧ[КлючЗначение.Ключ];
		Если НЕ ЗначениеЗаполнено(Значение) Тогда 
			
			Если НЕ ЗначениеЗаполнено(КлючЗначение.Значение) Тогда //
				ПредставлениеРеквизита = МетаданныеРеквизиты[КлючЗначение.Ключ].Представление();
				
				Если Лев(КлючЗначение.Ключ,8) = "Субконто" Тогда
					ПредставлениеРеквизита = ПолучитьПредставленияВидаПоСубконто(СтрокаТЧ, КлючЗначение.Ключ, ПредставлениеРеквизита);
				ИначеЕсли КлючЗначение.Ключ = "Сумма" Или КлючЗначение.Ключ = "СуммаКт" Или КлючЗначение.Ключ = "ВалютнаяСумма" Тогда
					ПредставлениеРеквизита = ПолучитьПредставленияРеквизитаСумма(СтрокаТЧ, КлючЗначение.Ключ, ПредставлениеРеквизита);
				КонецЕсли;	
				
			Иначе
				СтрокаСообщения = КлючЗначение.Значение;
				
			КонецЕсли;
			
			ТекстСообщения = ОбщегоНазначенияБПКлиентСервер.ПолучитьТекстСообщения("Колонка", "Заполнение", 
					ПредставлениеРеквизита,
					СтрокаТЧ.НомерСтроки, "");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Префикс+КлючЗначение.Ключ, "Объект",Отказ);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры	

Процедура ПроверитьЗаполнение_БухСправка(Отказ)
	
	МетаданныеРеквизиты = ЭтотОбъект.Метаданные().ТабличныеЧасти.БухСправка.Реквизиты;
	
	Для Каждого СтрокаТЧ ИЗ БухСправка Цикл
		
		ПроверкаПоСтроке_БухСправка(СтрокаТЧ, МетаданныеРеквизиты, Отказ)
		
	КонецЦикла;	
	
КонецПроцедуры

Процедура ПроверкаПоСтроке_ЗапасыВсе(СтрокаТЧ, МетаданныеРеквизиты, Отказ)
	
	НаименованиеТабличнойЧасти = "Запасы";
	ИмяТабличнойЧасти = "ЗапасыВсе";
	
	Если СтруктураШапкиДокумента.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.КапитальныеИнвестиции Тогда
		
		СтруктураОбязательныхРеквизитов = Новый Структура("НомерСтроки, СчетУчета, Номенклатура, Сумма");
		
			СтруктураОбязательныхРеквизитов.Вставить("НалоговоеНазначение");
		
		Если СтрокаТЧ.СчетУчета.Количественный Тогда
			СтруктураОбязательныхРеквизитов.Вставить("Количество");	

			Если мВестиСкладскойУчетБУ Тогда
				СтруктураОбязательныхРеквизитов.Вставить("Склад");	
			КонецЕсли;	
			
		КонецЕсли;	
		
	ИначеЕсли СтруктураШапкиДокумента.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.ЗапасыСебестоимость Тогда
		
		СтруктураОбязательныхРеквизитов = Новый Структура("НомерСтроки, СчетУчета, Номенклатура, Количество, Сумма, Количество");
		
		Если СтруктураШапкиДокумента.ЕстьНДС Тогда
		
			СтруктураОбязательныхРеквизитов.Вставить("НалоговоеНазначение");
		
		КонецЕсли; 
		
		Если мВестиСкладскойУчетБУ Тогда
			СтруктураОбязательныхРеквизитов.Вставить("Склад");	
		КонецЕсли;	
		
	ИначеЕсли СтруктураШапкиДокумента.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.ЗапасыПереданные Тогда
		
		СтруктураОбязательныхРеквизитов = Новый Структура("НомерСтроки, СчетУчета, Номенклатура, Контрагент, ДоговорКонтрагента, Количество, Сумма");
		
		Если СтруктураШапкиДокумента.ЕстьНДС Тогда
		
			СтруктураОбязательныхРеквизитов.Вставить("НалоговоеНазначение");
		
		КонецЕсли; 
		
	ИначеЕсли СтруктураШапкиДокумента.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.ТоварыНаКомиссии Тогда
		НаименованиеТабличнойЧасти = "Товары";
		
		СтруктураОбязательныхРеквизитов = Новый Структура("НомерСтроки, СчетУчета, Поставщик, ДоговорПоставщика, Номенклатура, Количество");
		
		НайденыйВидСубконтоКонтрагент	= СтрокаТЧ.СчетУчета.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты,	"ВидСубконто");
		
		Если НайденыйВидСубконтоКонтрагент <> Неопределено Тогда
			СтруктураОбязательныхРеквизитов.Вставить("Контрагент");
			СтруктураОбязательныхРеквизитов.Вставить("ДоговорКонтрагента");
		КонецЕсли;	
		
	ИначеЕсли СтруктураШапкиДокумента.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.ТоварыПоПродажнойЦене Тогда
		НаименованиеТабличнойЧасти = "Товары";
		ИмяТабличнойЧасти = "ТоварыПоПродажнойЦене";
		
		СтруктураОбязательныхРеквизитов = Новый Структура("СчетУчета");
		
		Если СтрокаТЧ.СчетУчета = ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахАТТ Тогда
			// АТТ
			
			НаименованиеТабличнойЧасти = "Товары в АТТ (счет 2821)";
			
			СтруктураОбязательныхРеквизитов.Вставить("Магазин");
			СтруктураОбязательныхРеквизитов.Вставить("Номенклатура");
			СтруктураОбязательныхРеквизитов.Вставить("НалоговоеНазначение");
			СтруктураОбязательныхРеквизитов.Вставить("Количество");
			СтруктураОбязательныхРеквизитов.Вставить("Цена");
			СтруктураОбязательныхРеквизитов.Вставить("Сумма");
			СтруктураОбязательныхРеквизитов.Вставить("СуммаПродажи");
		Иначе
			// НТТ
			
			НаименованиеТабличнойЧасти = "Товары в НТТ (счет 2822)";
			СтруктураОбязательныхРеквизитов.Вставить("Магазин");
			СтруктураОбязательныхРеквизитов.Вставить("НалоговоеНазначение");
			СтруктураОбязательныхРеквизитов.Вставить("Сумма");
			СтруктураОбязательныхРеквизитов.Вставить("СуммаПродажи");
		КонецЕсли;	
		
	КонецЕсли;	
	
	Для каждого КлючЗначение Из СтруктураОбязательныхРеквизитов Цикл
		
		Значение = СтрокаТЧ[КлючЗначение.Ключ];
		Если НЕ ЗначениеЗаполнено(Значение) Тогда 
			
			Если НЕ ЗначениеЗаполнено(КлючЗначение.Значение) Тогда //
				ПредставлениеРеквизита = МетаданныеРеквизиты[КлючЗначение.Ключ].Представление();
				
				Если Лев(КлючЗначение.Ключ,8) = "Субконто" Тогда
					ПредставлениеРеквизита = ПолучитьПредставленияВидаПоСубконто(СтрокаТЧ, КлючЗначение.Ключ, ПредставлениеРеквизита);
				ИначеЕсли КлючЗначение.Ключ = "Сумма" Или КлючЗначение.Ключ = "СуммаКт" Или КлючЗначение.Ключ = "ВалютнаяСумма" Тогда
					ПредставлениеРеквизита = ПолучитьПредставленияРеквизитаСумма(СтрокаТЧ, КлючЗначение.Ключ, ПредставлениеРеквизита);
				КонецЕсли;	
				
				ТекстСообщения = ОбщегоНазначенияБПКлиентСервер.ПолучитьТекстСообщения("Колонка", "Заполнение", 
					СокрЛП(ПредставлениеРеквизита),
					СтрокаТЧ.НомерСтроки, НаименованиеТабличнойЧасти);
			Иначе
				СтрокаСообщения = КлючЗначение.Значение;
				
			КонецЕсли;
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, ИмяТабличнойЧасти+"["+(СтрокаТЧ.НомерСтроки-1)+"]."+КлючЗначение.Ключ, "Объект",Отказ);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры	
	
Процедура ПроверитьЗаполнение_ЗапасыВсе(Отказ)
	
	МетаданныеРеквизиты = ЭтотОбъект.Метаданные().ТабличныеЧасти.ЗапасыВсе.Реквизиты;
	
	Для Каждого СтрокаТЧ ИЗ ЗапасыВсе Цикл
		
		ПроверкаПоСтроке_ЗапасыВсе(СтрокаТЧ, МетаданныеРеквизиты, Отказ)
		
	КонецЦикла;	
	
КонецПроцедуры

Процедура ПроверитьЗаполнение_ТоварыПоПродажнойЦене(Отказ)
	
	МетаданныеРеквизиты = ЭтотОбъект.Метаданные().ТабличныеЧасти.ТоварыПоПродажнойЦене.Реквизиты;
	
	Для Каждого СтрокаТЧ ИЗ ТоварыПоПродажнойЦене Цикл
		
		ПроверкаПоСтроке_ЗапасыВсе(СтрокаТЧ, МетаданныеРеквизиты, Отказ)
		
	КонецЦикла;	
	
КонецПроцедуры

Процедура ПроверитьЗаполнение_ТЗР(Отказ)
	
	ИмяТабличнойЧасти = "ТЗР на отдельных счетах";
	
	МетаданныеРеквизиты = ЭтотОбъект.Метаданные().ТабличныеЧасти.Затраты.Реквизиты;
	Для каждого СтрокаТЧ Из Затраты Цикл
		
		ТекВидыСубконто = СтрокаТЧ.СчетУчета.ВидыСубконто;
		ЕстьСубконтоНоменклатурнаяГруппа = НЕ (ТекВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы,"ВидСубконто") = Неопределено);
		
		Если ЕстьСубконтоНоменклатурнаяГруппа Тогда
			
			Если НЕ ЗначениеЗаполнено(СтрокаТЧ.НоменклатурнаяГруппа) Тогда //
				
				ТекстСообщения = ОбщегоНазначенияБПКлиентСервер.ПолучитьТекстСообщения("Колонка", "Заполнение", 
					МетаданныеРеквизиты["НоменклатурнаяГруппа"].Представление(),
					СтрокаТЧ.НомерСтроки, ИмяТабличнойЧасти);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, "Затраты["+(СтрокаТЧ.НомерСтроки-1)+"].НоменклатурнаяГруппа", "Объект",Отказ);
				
			КонецЕсли;
			
		КонецЕсли; 
	
	КонецЦикла; 
	
	
КонецПроцедуры


Процедура ОбработкаПроведения_ЗапасыВсе(Отказ)
	
	ФормированиеПроводокБух_ЗапасыВсе(ЗапасыВсе);
	
	// ИНАГРО++
	Если ИНАГРО_ОбщийВызовСервераПовтИсп.ЕстьБСПУ() И НЕ РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.КапитальныеИнвестиции Тогда
		ТаблицаДокумента = ЗапасыВсе.Выгрузить();
		ТаблицаДокумента.Колонки.СчетУчета.Имя = "СчетУчетаБУ";
		ИНАГРО_Общий.ИНАГРО_ВедомостьДвиженийПриход(Движения, ТаблицаДокумента, СтруктураШапкиДокумента);	
	КонецЕсли;	
	// ИНАГРО--
	
КонецПроцедуры

Процедура ОбработкаПроведения_ТоварыПоПродажнойЦене(Отказ)
	
	ФормированиеПроводокБух_ТоварыПоПродажнойЦене(ТоварыПоПродажнойЦене);
	
КонецПроцедуры

Процедура ОбработкаПроведения_МалоценныеАктивы(Отказ)
	
	ФормированиеПроводокБух_МалоценныеАктивы(МалоценныеАктивы);
	
КонецПроцедуры

Процедура ОбработкаПроведения_ТЗР(Отказ)
	
	
	ФормированиеПроводокБух_ТЗР(Затраты);
	
КонецПроцедуры

Процедура ОбработкаПроведения_НЗП(Отказ)
	
	ФормированиеПроводокБух_НЗП(Затраты);
	
КонецПроцедуры

////////////////////////////////////////////////////////
//Движения по регистрам бухгалтерии

// Для некоторых разделов данные храняться не в тех реквизитах, для обеспечения общего и более понятного ввода.
Функция ПолучитьКорректнуюСтроку(СтрокаБухСправки)

	Если РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.ВзаиморасчетыСПодотчетнымиЛицами
	 ИЛИ РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.МалоценныеАктивыВЭксплуатации Тогда
		
		КорректнаяСтрока = Новый Структура;
		КорректнаяСтрока.Вставить("НомерСтроки", СтрокаБухСправки.НомерСтроки);
		Для каждого РеквизитТЧ Из ЭтотОбъект.Метаданные().ТабличныеЧасти.БухСправка.Реквизиты Цикл
			
			ПолеАнализа = РеквизитТЧ.Имя;
			ВидСчетаУчета = СтрокаБухСправки.СчетУчета.Вид;			
			// В колонке сумма или СуммаКт, содержится валютная сумма, а в валютной покрытие в регламентной валюте. 
			Если ПолеАнализа = "Сумма" Тогда            	
		 				
				Если ВидСчетаУчета = ВидСчета.Активный 
				ИЛИ (ВидСчетаУчета = ВидСчета.АктивноПассивный
				   И (СтрокаБухСправки.Сумма <> 0 ИЛИ СтрокаБухСправки.СуммаКт = 0) ) Тогда
					КорректнаяСтрока.Вставить("Сумма"			, СтрокаБухСправки.ВалютнаяСумма);
					КорректнаяСтрока.Вставить("СуммаКт"			, 0);
					КорректнаяСтрока.Вставить("ВалютнаяСумма"	, СтрокаБухСправки.Сумма);
				Иначе
					КорректнаяСтрока.Вставить("Сумма"			, 0);
					КорректнаяСтрока.Вставить("СуммаКт"			, СтрокаБухСправки.ВалютнаяСумма);
					КорректнаяСтрока.Вставить("ВалютнаяСумма"	, СтрокаБухСправки.СуммаКт);				
				КонецЕсли;			
				
			ИначеЕсли ПолеАнализа = "СуммаКт" ИЛИ ПолеАнализа = "ВалютнаяСумма" Тогда			
				
				Продолжить; // значение перенесено, при анализе поля Сумма					
				
			Иначе // сохраняем значение без изменений
				
				КорректнаяСтрока.Вставить(ПолеАнализа, СтрокаБухСправки[ПолеАнализа]);	
				
			КонецЕсли; 
			
		КонецЦикла; 
		
		Возврат КорректнаяСтрока;
	
	Иначе	
		Возврат СтрокаБухСправки;	
	КонецЕсли; 
	
	

КонецФункции // ПолучитьКорректнуюСтроку()

Функция ПолучитьДатуОприходования(ДатаПрихода)

	Возврат ?(ВводитьОстаткиЗапасовВРазрезеДатОприходования И ДатаПрихода <> '00010101' И ДатаПрихода < Дата, ДатаПрихода, Дата);	

КонецФункции // ПолучитьДатуОприходования()
 
// Получает партиеобразующий документ.
//
// Возвращаемое значение:
//   ДокументСсылка
//
Функция ПолучитьПартию(Контрагент, ДатаПрихода = '00010101', Договор = Неопределено, ОбязательноСформироватьПартию = Ложь)
	

// Всегда используем в качестве прартии "ручной" документ партии ... 

	КонтрагентПартии = Контрагент;
	Если НЕ ЗначениеЗаполнено(КонтрагентПартии) Тогда
		КонтрагентПартии = Справочники.Контрагенты.ПустаяСсылка();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Договор) Тогда
		ДоговорПартии = Договор;
	Иначе
		ДоговорПартии = КонтрагентПартии.ОсновнойДоговорКонтрагента;
		Если ДоговорПартии.Организация <> Организация Тогда
			ДоговорПартии = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
		КонецЕсли;
	КонецЕсли;
	
	ДатаПартии = НачалоДня(ПолучитьДатуОприходования(ДатаПрихода));
	ЗапросДокументовРучнойПартии = Новый Запрос("ВЫБРАТЬ
	                                            |	Партия.Ссылка
												|ИЗ
	                                            |	Документ.Партия КАК Партия
	                                            |ГДЕ
	                                            |	НАЧАЛОПЕРИОДА(Партия.Дата,ДЕНЬ) = &ДатаОприходования
	                                            |	И (НЕ Партия.ПометкаУдаления)
	                                            |	И Партия.Организация = &Организация
	                                            |	И Партия.Контрагент = &Контрагент
	                                            |	И Партия.ДоговорКонтрагента = &ДоговорКонтрагента
	                                            |	И Партия.ВалютаДокумента = &ВалютаДокумента
												|УПОРЯДОЧИТЬ ПО
												|	Партия.Дата УБЫВ");
	ЗапросДокументовРучнойПартии.УстановитьПараметр("ДатаОприходования", 	ДатаПартии);
	ЗапросДокументовРучнойПартии.УстановитьПараметр("Организация",			Организация);
	ЗапросДокументовРучнойПартии.УстановитьПараметр("Контрагент",			КонтрагентПартии);
	ЗапросДокументовРучнойПартии.УстановитьПараметр("ДоговорКонтрагента",	ДоговорПартии);
	ЗапросДокументовРучнойПартии.УстановитьПараметр("ВалютаДокумента",		мВалютаРегламентированногоУчета);
		
	ВыборкаПартий = ЗапросДокументовРучнойПартии.Выполнить().Выбрать();
	// Партия есть
	Если ВыборкаПартий.Следующий() Тогда
		Партия = ВыборкаПартий.Ссылка;
	Иначе // формируем
		ДокументПартии = Документы.Партия.СоздатьДокумент();
		
		ДокументПартии.Дата					= ДатаПартии;
		ДокументПартии.ВалютаДокумента		= мВалютаРегламентированногоУчета;
		ДокументПартии.Организация			= Организация;
		ДокументПартии.Контрагент			= КонтрагентПартии;
		ДокументПартии.ДоговорКонтрагента	= ДоговорПартии;
		ДокументПартии.Записать();
		Партия = ДокументПартии.Ссылка;
	КонецЕсли; 	
		
	Возврат Партия;	

КонецФункции // ПолучитьПартию()

// Получает партиеобразующий документ.
//
// Возвращаемое значение:
//   ДокументСсылка
//
Функция ПартиеОбразующийДокументМЦ(ДатаПрихода, Подразделение) 	
	
	
	ЗапросДокументовРучнойПартии = Новый Запрос("ВЫБРАТЬ
	                                            |	ПартияМалоценныхАктивовВЭксплуатации.Ссылка
	                                            |ИЗ
	                                            |	Документ.ПартияМалоценныхАктивовВЭксплуатации КАК ПартияМалоценныхАктивовВЭксплуатации
	                                            |ГДЕ
	                                            |	НАЧАЛОПЕРИОДА(ПартияМалоценныхАктивовВЭксплуатации.Дата,ДЕНЬ) = &ДатаОприходования
	                                            |	И (НЕ ПартияМалоценныхАктивовВЭксплуатации.ПометкаУдаления)
	                                            |	И ПартияМалоценныхАктивовВЭксплуатации.Организация = &Организация
	                                            |	И ПартияМалоценныхАктивовВЭксплуатации.ПодразделениеОрганизации = &ПодразделениеОрганизации
	                                            |
	                                            |УПОРЯДОЧИТЬ ПО
	                                            |	ПартияМалоценныхАктивовВЭксплуатации.Дата УБЫВ");
	ЗапросДокументовРучнойПартии.УстановитьПараметр("ДатаОприходования", 		НачалоДня(ПолучитьДатуОприходования(ДатаПрихода)));
	ЗапросДокументовРучнойПартии.УстановитьПараметр("Организация",				Организация);
	ЗапросДокументовРучнойПартии.УстановитьПараметр("ПодразделениеОрганизации",	Подразделение);
		
	ВыборкаПартий = ЗапросДокументовРучнойПартии.Выполнить().Выбрать();
	// Партия есть
	Если ВыборкаПартий.Следующий() Тогда
		Партия = ВыборкаПартий.Ссылка;
	Иначе // формируем
		ДокументПартии = Документы.ПартияМалоценныхАктивовВЭксплуатации.СоздатьДокумент();
		
		ДокументПартии.Дата						= ПолучитьДатуОприходования(ДатаПрихода);
		ДокументПартии.Организация				= Организация;
		ДокументПартии.ПодразделениеОрганизации	= Подразделение;
		ДокументПартии.Ответственный 			= Пользователи.ТекущийПользователь();
		ДокументПартии.УстановитьНовыйНомер(Организация.Префикс);
		ДокументПартии.Записать();
		Партия = ДокументПартии.Ссылка;
	КонецЕсли; 	
		
	Возврат Партия;	

КонецФункции // ПартиеОбразующийДокументМЦ()

Функция ПолучитьНазначениеИспользования(СчетПередачи, Владелец, СрокПолезногоИспользования)
	
	Если Владелец.Пустая()
	 ИЛИ Владелец.Услуга	
	 ИЛИ СчетПередачи.Пустая()
	 Тогда
		Возврат Справочники.НазначенияИспользования.ПустаяСсылка(); 
	КонецЕсли; 
	
	Если СчетПередачи = ПланыСчетов.Хозрасчетный.МалоценныеНеоборотныеМатериальныеАктивыКоличественно Тогда
		ВидМалоценногоАктива 	= Перечисления.ВидыМалоценныхАктивов.МалоценныйНеоборотныйАктив;
		СчетАмортизацииБУ 		= ПланыСчетов.Хозрасчетный.ИзносДругихНеоборотныхМатериальныхАктивовКоличественно;
		СчетПередачиБУ 			= СчетПередачи;
	ИначеЕсли СчетПередачи = ПланыСчетов.Хозрасчетный.БиблиотечныеФондыКоличественно Тогда	
		ВидМалоценногоАктива 	= Перечисления.ВидыМалоценныхАктивов.БиблиотечныеФонды;
		СчетАмортизацииБУ 		= ПланыСчетов.Хозрасчетный.ИзносДругихНеоборотныхМатериальныхАктивовКоличественно;
		СчетПередачиБУ 			= СчетПередачи;
	Иначе
		ВидМалоценногоАктива 	= Перечисления.ВидыМалоценныхАктивов.МалоценныйБыстроизнашивающийсяПредмет;
		СчетАмортизацииБУ 		= ПланыСчетов.Хозрасчетный.Вспомогательный;
		СчетПередачиБУ 			= ПланыСчетов.Хозрасчетный.Вспомогательный;
	КонецЕсли;		
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	НазначенияИспользования.Ссылка
	|ИЗ
	|	Справочник.НазначенияИспользования КАК НазначенияИспользования
	|ГДЕ
	|	(НЕ НазначенияИспользования.ПометкаУдаления)
	|	И НазначенияИспользования.Владелец = &Владелец
	|	И НазначенияИспользования.ВидМалоценногоАктива = &ВидМалоценногоАктива
	|	И НазначенияИспользования.СрокПолезногоИспользования = &СрокПолезногоИспользования
	|	И НазначенияИспользования.СчетПередачиБУ = &СчетПередачиБУ");
						  
	Запрос.УстановитьПараметр("Владелец"					, Владелец);
	Запрос.УстановитьПараметр("Наименование"				, Владелец.Наименование);
	Запрос.УстановитьПараметр("ВидМалоценногоАктива"		, ВидМалоценногоАктива);
	Запрос.УстановитьПараметр("СрокПолезногоИспользования"	, СрокПолезногоИспользования);
	Запрос.УстановитьПараметр("СчетПередачиБУ"				, СчетПередачиБУ);
	ВыборкаНазначений = Запрос.Выполнить().Выбрать();
	
	Если ВыборкаНазначений.Следующий() Тогда
		Возврат ВыборкаНазначений.Ссылка;	
	Иначе	
		
	    ЭлементСпр = Справочники.НазначенияИспользования.СоздатьЭлемент();		
		ЭлементСпр.УстановитьНовыйКод();
		ЭлементСпр.Владелец						= Владелец; 		
		ЭлементСпр.Наименование 				= Владелец.Наименование;
		ЭлементСпр.ЕдиницаИзмерения				= Владелец.БазоваяЕдиницаИзмерения;
		ЭлементСпр.Коэффициент					= Справочники.Номенклатура.ПолучитьКоэффициентЕдиницыИзмерения(ЭлементСпр.Владелец, ЭлементСпр.ЕдиницаИзмерения); 	
        ЭлементСпр.Количество 					= 1;
		ЭлементСпр.СрокПолезногоИспользования	= СрокПолезногоИспользования;
		
		ЭлементСпр.ВидМалоценногоАктива = ВидМалоценногоАктива;
		ЭлементСпр.СчетАмортизацииБУ 	= СчетАмортизацииБУ;
		ЭлементСпр.СчетПередачиБУ 		= СчетПередачиБУ;
			
		ЭлементСпр.Записать();
		
		Возврат ЭлементСпр.Ссылка;
		
	КонецЕсли; // ВыборкаНазначений.Следующий() 
    	
КонецФункции // ПолучитьНазначениеИспользования()

Процедура ФормированиеПроводокБух_МалоценныеАктивы(МалоценныеАктивы)
	
	Операция = Движения.Хозрасчетный;
	
	Для Каждого СтрокаМалоценки Из МалоценныеАктивы Цикл
		
		Если СтрокаМалоценки.Стоимость = 0 И СтрокаМалоценки.Количество = 0 Тогда 
			Продолжить;
		КонецЕсли;
				
		СчетУчета = СтрокаМалоценки.СчетУчета;
		
		НазначениеИспользования = ПолучитьНазначениеИспользования(СчетУчета, СтрокаМалоценки.Номенклатура, СтрокаМалоценки.СрокПолезногоИспользования);  	
	
		Если СчетУчета <> ПланыСчетов.Хозрасчетный.МалоценныеАктивыВЭксплуатации И НЕ НазначениеИспользования.Пустая() Тогда
			
			// проводка по счету передачи.
			Проводка = Операция.Добавить();                                              
			
			Проводка.Период       = Дата;
			Проводка.Организация  = Организация;
			Проводка.Содержание   = НСтр("ru='Ввод остатков по малоценным активам';uk='Введення залишків по малоцінним активам'", Локализация.КодЯзыкаИнформационнойБазы());
			Проводка.НомерЖурнала = "МЦ";
			Проводка.Сумма        = СтрокаМалоценки.Стоимость;
			Проводка.КоличествоДт = СтрокаМалоценки.Количество;
			Проводка.СчетДт = СчетУчета;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Номенклатура", СтрокаМалоценки.Номенклатура);
			
			Проводка.НалоговоеНазначениеДт = СтрокаМалоценки.НалоговоеНазначение;
			Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыль Тогда
				
				Если НЕ СтрокаМалоценки.НалоговоеНазначение = Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяНеХозДеятельность Тогда
				
					Проводка.СуммаНУДт = СтрокаМалоценки.СтоимостьНУ;	
				
				КонецЕсли;
				
			КонецЕсли;
			
			Проводка.СчетКт = ПланыСчетов.Хозрасчетный.Вспомогательный;
			
			// проводка по счету амортизации.
			Проводка = Операция.Добавить();
			
			Проводка.Период       = Дата;
			Проводка.Организация  = Организация;
			Проводка.Содержание   = НСтр("ru='Ввод остатков амортизации по малоценным активам';uk='Введення залишків амортизації по малоцінним активам'", Локализация.КодЯзыкаИнформационнойБазы());
			Проводка.НомерЖурнала = "МЦ";
			Проводка.Сумма        = СтрокаМалоценки.Стоимость;
			
			Проводка.СчетДт = ПланыСчетов.Хозрасчетный.Вспомогательный;
			
			Проводка.СчетКт = НазначениеИспользования.СчетАмортизацииБУ;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Номенклатура", СтрокаМалоценки.Номенклатура);
			
			Проводка.НалоговоеНазначениеКт = СтрокаМалоценки.НалоговоеНазначение;
			Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыль Тогда
				
				Если НЕ СтрокаМалоценки.НалоговоеНазначение = Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяНеХозДеятельность Тогда
				
					Проводка.СуммаНУКт = СтрокаМалоценки.СтоимостьНУ;	
				
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		// проводка по счету МЦ.
		Проводка = Операция.Добавить(); 
		
		Проводка.Период       =	Дата;
		Проводка.Организация  = Организация;
		Проводка.Содержание   = НСтр("ru='Ввод остатков по малоценным активам';uk='Введення залишків по малоцінним активам'", Локализация.КодЯзыкаИнформационнойБазы());
		Проводка.НомерЖурнала = "МЦ";
		Проводка.Сумма        = СтрокаМалоценки.Стоимость;
		Проводка.КоличествоДт = СтрокаМалоценки.Количество;
		
		Проводка.НалоговоеНазначениеДт = СтрокаМалоценки.НалоговоеНазначение;
		Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыль Тогда
			
			Если НЕ СтрокаМалоценки.НалоговоеНазначение = Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяНеХозДеятельность Тогда
			
				Проводка.СуммаНУДт = СтрокаМалоценки.СтоимостьНУ;	
			
			КонецЕсли;
			
		КонецЕсли;
		
		Проводка.СчетДт = ПланыСчетов.Хозрасчетный.МалоценныеАктивыВЭксплуатации;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "РаботникиОрганизаций"        , СтрокаМалоценки.ФизЛицо);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "НазначенияИспользования"     , НазначениеИспользования);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ПартииМалоценныхАктивовВЭксплуатации", ПартиеОбразующийДокументМЦ(?(ВводитьОстаткиЗапасовВРазрезеДатОприходования, СтрокаМалоценки.ДатаПриобретения, Дата), СтрокаМалоценки.Подразделение));
		
		Продолжить;
			
		
	КонецЦикла;
	
КонецПроцедуры
 
Процедура ФормированиеПроводокБух_БухСправка(БухСправка)
	
	Операция = Движения.Хозрасчетный;
	
	Для Каждого СтрокаБухСправки Из БухСправка Цикл
		
		Если СтрокаБухСправки.Сумма = 0 И СтрокаБухСправки.Количество = 0 И СтрокаБухСправки.СуммаКт = 0 Тогда 
			Продолжить;
		КонецЕсли;
				
		СчетУчета = СтрокаБухСправки.СчетУчета;
		
		КорректнаяСтрока = ПолучитьКорректнуюСтроку(СтрокаБухСправки);
		
		Проводка = СформироватьПроводкуБух(Операция, КорректнаяСтрока);
		
		// Счета 30 группы, в разрезе обособленных подразделений.
		Если РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.ДенежныеСредства
		   И СчетУчета.Родитель = ПланыСчетов.Хозрасчетный.Касса
		   И мУчетДенежныхСредствПоОбособленнымПодразделениям
		   И СчетУчета.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОбособленныеПодразделенияБезОбразованияЮрЛица, "ВидСубконто") <> Неопределено Тогда
			БухгалтерскийУчет.УстановитьСубконто(Проводка[ТипСчетаСубконто(1, КорректнаяСтрока)], Проводка[ТипСчетаСубконто(2, КорректнаяСтрока)], "ОбособленныеПодразделенияБезОбразованияЮрЛица", КорректнаяСтрока.Субконто1);
		Иначе
			ЧислоАктивныхСубконто = СчетУчета.ВидыСубконто.Количество();
			
			Для Сч = 1 По ЧислоАктивныхСубконто Цикл
				Если РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.ДенежныеСредства И СчетУчета.ВидыСубконто[Сч-1].ТолькоОбороты Тогда				
					Продолжить;
				КонецЕсли;
				БухгалтерскийУчет.УстановитьСубконто(Проводка[ТипСчетаСубконто(1, КорректнаяСтрока)], Проводка[ТипСчетаСубконто(2, КорректнаяСтрока)], Сч, КорректнаяСтрока["Субконто"+Сч]);
			КонецЦикла;									
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция БылиДвиженияПоРегистрам(СсылкаНаСправочник)
	
	УстановитьПривилегированныйРежим(Истина);
	
	БылиДвиженияПоРегистрам = Ложь;

	Запрос       = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ХозрасчетныйСубконто.Значение
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Субконто КАК ХозрасчетныйСубконто
	|ГДЕ
	|	ХозрасчетныйСубконто.Вид = &ВидСубконто
	|	И ХозрасчетныйСубконто.Значение = &Значение";
	
	Если ТипЗнч(СсылкаНаСправочник) = Тип("СправочникСсылка.НематериальныеАктивы") Тогда 
		Запрос.УстановитьПараметр("ВидСубконто", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НематериальныеАктивы);
	Иначе
		Запрос.УстановитьПараметр("ВидСубконто", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОбъектыСтроительства);
	КонецЕсли;	
	Запрос.УстановитьПараметр("Значение"   , СсылкаНаСправочник);
	
	БылиДвиженияПоРегистрам = НЕ Запрос.Выполнить().Пустой();
	
	УстановитьПривилегированныйРежим(Ложь);

	Возврат БылиДвиженияПоРегистрам;
	
КонецФункции

Процедура ФормированиеПроводокБух_ЗапасыВсе(ЗапасыВсе)
	
	Операция = Движения.Хозрасчетный;
	
	Для Каждого СтрокаЗапасы Из ЗапасыВсе Цикл
		
		Если СтрокаЗапасы.Сумма = 0 И СтрокаЗапасы.Количество = 0 Тогда 
			Продолжить;
		КонецЕсли;
				
		СчетУчета = СтрокаЗапасы.СчетУчета;
		
		Проводка = СформироватьПроводкуБух(Операция, СтрокаЗапасы);
		
		Если РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.ТоварыНаКомиссии Тогда
			//для этого раздела всегда делаем партию
			ПартияВводаОстатков = ПолучитьПартию(СтрокаЗапасы.Поставщик, ,СтрокаЗапасы.ДоговорПоставщика, Истина);
		ИначеЕсли УчетнаяПолитика.СпособОценкиМПЗ(Организация, НачалоМесяца(Дата)) <> Перечисления.СпособыОценки.ПоСредней Тогда
			ПартияВводаОстатков = ПолучитьПартию(СтрокаЗапасы.Поставщик, СтрокаЗапасы.ДатаПриобретения);
		Иначе
			ПартияВводаОстатков = Неопределено;
		КонецЕсли; 
		
		Проводка.НалоговоеНазначениеДт = СтрокаЗапасы.НалоговоеНазначение;
		Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыль И СтрокаЗапасы.НалоговоеНазначение <> Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяНеХозДеятельность Тогда
			Проводка.СуммаНУДт = СтрокаЗапасы.СуммаНУ;
		КонецЕсли;
		
		Если РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.КапитальныеИнвестиции Тогда
			
			ЭтоОбъектСтроительства = СтрокаЗапасы.СчетУчета.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОбъектыСтроительства, "ВидСубконто") <> Неопределено;
			ЭтоНематериальныйАктив = СтрокаЗапасы.СчетУчета.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НематериальныеАктивы, "ВидСубконто") <> Неопределено;
			
			Если ЭтоОбъектСтроительства ИЛИ ЭтоНематериальныйАктив Тогда
					
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтрокаЗапасы.Номенклатура);
				
			Иначе
				
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Номенклатура"	, СтрокаЗапасы.Номенклатура);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Склады"			, СтрокаЗапасы.Склад);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Партии"			, ПартияВводаОстатков);
				
			КонецЕсли; 
			
			// для элементов НМА/Объекта строительства заполним НалоговоеНазначение из табличной части
			Если ЭтоОбъектСтроительства ИЛИ ЭтоНематериальныйАктив Тогда
				// проверим, что нет движений
				Если ЗначениеЗаполнено(СтрокаЗапасы.НалоговоеНазначение) И СтрокаЗапасы.Номенклатура.НалоговоеНазначение <> СтрокаЗапасы.НалоговоеНазначение 
					И (НЕ ЗначениеЗаполнено(СтрокаЗапасы.Номенклатура.НалоговоеНазначение) ИЛИ НЕ БылиДвиженияПоРегистрам(СтрокаЗапасы.Номенклатура))  Тогда
					// заполним НалоговоеНазначение
					ТекОбъект = СтрокаЗапасы.Номенклатура.ПолучитьОбъект();
					ТекОбъект.НалоговоеНазначение = СтрокаЗапасы.НалоговоеНазначение;
					Попытка
						ТекОбъект.Записать();
					Исключение
						Сообщить(ОписаниеОшибки());
					КонецПопытки;			
				КонецЕсли;	
			КонецЕсли;	
			
			
		ИначеЕсли РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.ЗапасыСебестоимость Тогда
			
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Номенклатура"	, СтрокаЗапасы.Номенклатура);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Склады"			, СтрокаЗапасы.Склад);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Партии"			, ПартияВводаОстатков);
			
			// БСУ
			//проводка по  счету 08
			Если СтрокаЗапасы.Номенклатура.БланкСтрогогоУчета И СтрокаЗапасы.Номенклатура.УчитываетсяПоНоминальнойСтоимости 
			   И СтрокаЗапасы.СуммаНоминальная >0 Тогда
			   
				ПроводкаБСУ = Операция.Добавить();
		        ПроводкаБСУ.Период       = Дата;
				ПроводкаБСУ.Организация  = Организация;
				ПроводкаБСУ.Содержание   = СодержаниеПроводки + НСтр("ru=' БСУ';uk=' БСЗ'", Локализация.КодЯзыкаИнформационнойБазы());
  				ПроводкаБСУ.СчетДт       = ПланыСчетов.Хозрасчетный.БланкиСтрогогоУчета;
					
				БухгалтерскийУчет.УстановитьСубконто(ПроводкаБСУ.СчетДт, ПроводкаБСУ.СубконтоДт, "Номенклатура", СтрокаЗапасы.Номенклатура);
				БухгалтерскийУчет.УстановитьСубконто(ПроводкаБСУ.СчетДт, ПроводкаБСУ.СубконтоДт, "Склады", СтрокаЗапасы.Склад);
					
				ПроводкаБСУ.КоличествоДт	= СтрокаЗапасы.Количество;
				ПроводкаБСУ.Сумма 			= СтрокаЗапасы.СуммаНоминальная;
				
			КонецЕсли; // ВидСубконтоНоменклатура <> Неопределено 
					
		ИначеЕсли РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.ЗапасыПереданные Тогда
			
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты"	, СтрокаЗапасы.Контрагент);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Номенклатура"	, СтрокаЗапасы.Номенклатура);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Партии"			, ПартияВводаОстатков);
									
		ИначеЕсли РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.ТоварыНаКомиссии Тогда
			
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты",	СтрокаЗапасы.Контрагент);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Склады", 		СтрокаЗапасы.Склад);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Номенклатура", 	СтрокаЗапасы.Номенклатура);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Партии", ПартияВводаОстатков);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ФормированиеПроводокБух_ТоварыПоПродажнойЦене(ТоварыПоПродажнойЦене)
	
	Операция = Движения.Хозрасчетный;
	
	Для Каждого СтрокаЗапасы Из ТоварыПоПродажнойЦене Цикл
		
		СчетУчета = СтрокаЗапасы.СчетУчета;
		
		ТоварыВРозницеАТТ = СчетУчета = ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахАТТ;
		ТоварыВРозницеНТТ = СчетУчета = ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахНТТ;
		
		Проводка = СформироватьПроводкуБух(Операция, СтрокаЗапасы);
		
		Проводка.Сумма = СтрокаЗапасы.СуммаПродажи;
		
		Проводка.НалоговоеНазначениеДт = СтрокаЗапасы.НалоговоеНазначение;
		Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыль И СтрокаЗапасы.НалоговоеНазначение <> Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяНеХозДеятельность Тогда
			Проводка.СуммаНУДт = СтрокаЗапасы.СуммаПродажи;
		КонецЕсли;
		
	 	ВидыСубконтоСчета = СчетУчета.ВидыСубконто;
		
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Склады", СтрокаЗапасы["Магазин"]);
		
		Если ВидыСубконтоСчета.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтавкиНДС) <> Неопределено Тогда
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "СтавкиНДС", СтрокаЗапасы["СтавкаНДС"]);
		КонецЕсли;	
		
		Если ТоварыВРозницеАТТ Тогда
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Номенклатура", СтрокаЗапасы["Номенклатура"]);
			
			Если УчетнаяПолитика.СпособОценкиМПЗ(Организация, НачалоМесяца(Дата))<>Перечисления.СпособыОценки.ПоСредней Тогда
				ПартияВводаОстатков = ПолучитьПартию(СтрокаЗапасы.Поставщик, СтрокаЗапасы.ДатаПриобретения);
			Иначе
				ПартияВводаОстатков = Неопределено;
			КонецЕсли; 
								 
			Если ВидыСубконтоСчета.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Партии) <> Неопределено Тогда
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Партии", ПартияВводаОстатков);
			КонецЕсли;
		КонецЕсли;
		
		ТорговаяНаценка = СтрокаЗапасы.СуммаПродажи - СтрокаЗапасы.Сумма;
		Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыль И СтрокаЗапасы.НалоговоеНазначение <> Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяНеХозДеятельность Тогда
			ТорговаяНаценкаНУ = СтрокаЗапасы.СуммаПродажи - СтрокаЗапасы.СуммаНУ;
		Иначе
			ТорговаяНаценкаНУ = 0;
		КонецЕсли;
		
		// Торговая наценка
		Если ТорговаяНаценка <> 0  ИЛИ ТорговаяНаценкаНУ <>0 Тогда
			Проводка = Операция.Добавить();
			Проводка.Период      = СтруктураШапкиДокумента.Дата;
			Проводка.Организация = СтруктураШапкиДокумента.Организация;
			Проводка.Содержание  = СодержаниеПроводки;
			Проводка.Сумма       = ТорговаяНаценка;
			
			Проводка.НалоговоеНазначениеКт = СтрокаЗапасы.НалоговоеНазначение;
			Проводка.СуммаНУКт = ТорговаяНаценкаНУ;
			
			Если ТоварыВРозницеАТТ Тогда
				
				Проводка.СчетКт = ПланыСчетов.Хозрасчетный.ТорговаяНаценкаАТТ;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Номенклатура", СтрокаЗапасы["Номенклатура"]);
				
				Если ВидыСубконтоСчета.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Партии) <> Неопределено Тогда
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Партии", ПартияВводаОстатков);
				КонецЕсли;
				
			Иначе //ТоварыВРозницеНТТ
				Проводка.СчетКт = ПланыСчетов.Хозрасчетный.ТорговаяНаценкаНТТ;
			КонецЕсли;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Склады", СтрокаЗапасы["Магазин"]);
			Если Проводка.СчетКт.Количественный Тогда
				Проводка.КоличествоКт = СтрокаЗапасы.Количество;
			КонецЕсли;
			
			Проводка.СчетДт = ПланыСчетов.Хозрасчетный.Вспомогательный;
			
			Если ВидыСубконтоСчета.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтавкиНДС) <> Неопределено Тогда
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "СтавкиНДС", СтрокаЗапасы["СтавкаНДС"]);
			КонецЕсли;	
			
		КонецЕсли;	
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ФормированиеПроводокБух_ТЗР(Затраты)
	
	Операция = Движения.Хозрасчетный;
	
	Для Каждого СтрокаТЗР Из Затраты Цикл
		
		Если СтрокаТЗР.Сумма = 0 Тогда 
			Продолжить;
		КонецЕсли;
		
		Проводка = Операция.Добавить();
		Проводка.Период      = СтруктураШапкиДокумента.Дата;
		Проводка.Организация = СтруктураШапкиДокумента.Организация;
		Проводка.Содержание  = СодержаниеПроводки;
		Проводка.Сумма 		 = СтрокаТЗР.Сумма;
		Проводка.СчетКт 	 = ПланыСчетов.Хозрасчетный.Вспомогательный;
		Проводка.СчетДт 	 = СтрокаТЗР.СчетУчета;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "НоменклатурныеГруппы"	, СтрокаТЗР.НоменклатурнаяГруппа);
		
		Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыльДо2015 Тогда
			Проводка.НалоговоеНазначениеДт = СтрокаТЗР.НалоговоеНазначение;
			Если СтрокаТЗР.НалоговоеНазначение <> Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяНеХозДеятельность Тогда
				Проводка.СуммаНУДт = СтрокаТЗР.СуммаНУ;
			КонецЕсли;
		Иначе
			Если Проводка.СчетДт.УчетПоНалоговымНазначениямНДС Тогда
				Проводка.НалоговоеНазначениеДт = СтрокаТЗР.НалоговоеНазначение;
			КонецЕсли; 
		КонецЕсли;

	КонецЦикла;
	
КонецПроцедуры

Процедура ФормированиеПроводокБух_НЗП(Затраты)
	
	Операция = Движения.Хозрасчетный;
	
	Для Каждого СтрокаНЗП Из Затраты Цикл
		
		Если СтрокаНЗП.Сумма = 0 Тогда 
			Продолжить;
		КонецЕсли;
		
		Проводка = Операция.Добавить();
		Проводка.Период      = СтруктураШапкиДокумента.Дата;
		Проводка.Организация = СтруктураШапкиДокумента.Организация;
		Проводка.Содержание  = СодержаниеПроводки;
		Проводка.Сумма 		 = СтрокаНЗП.Сумма;
		Проводка.СчетКт 	 = ПланыСчетов.Хозрасчетный.Вспомогательный;
		Проводка.СчетДт 	 = СтрокаНЗП.СчетУчета;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "НоменклатурныеГруппы"	, СтрокаНЗП.НоменклатурнаяГруппа);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Подразделения"	, СтрокаНЗП.Подразделение);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "СтатьиЗатрат", СтрокаНЗП.ИНАГРО_СтатьяЗатрат); // ИНАГРО
		
		Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыльДо2015 Тогда
			Проводка.НалоговоеНазначениеДт = СтрокаНЗП.НалоговоеНазначение;
			Если СтрокаНЗП.НалоговоеНазначение <> Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяНеХозДеятельность Тогда
				Проводка.СуммаНУДт = СтрокаНЗП.СуммаНУ;
			КонецЕсли;
		Иначе
			Если Проводка.СчетДт.УчетПоНалоговымНазначениямНДС Тогда
				Проводка.НалоговоеНазначениеДт = СтрокаНЗП.НалоговоеНазначение;
			КонецЕсли; 
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры


//*****************************************************************************************************************************
// РАСЧЕТЫ ПО ЗАРАБОТНОЙ ПЛАТЕ

Процедура ОбработкаПроведения_РасчетыСПерсоналомПоОплатеТрудаИДепонентам(Отказ)
	
	ФормированиеПроводокБух_РасчетыСПерсоналомПоОплатеТрудаИДепонентам(РасчетыПоЗаработнойПлате);
	
//++ БУ ЗИК	

	ФормированиеРегистровЗарплаты(РасчетыПоЗаработнойПлате, Отказ);

//-- БУ ЗИК	
	
КонецПроцедуры

Процедура ПроверитьЗаполнениеТабличнойЧасти_РасчетыСПерсоналомПоОплатеТрудаИДепонентам(Отказ)
	
	СтруктураОбязательныхРеквизитов = Новый Структура("НомерСтроки, СчетУчета");
	УчетЗарплатыИКадровВоВнешнейПрограмме = ПолучитьФункциональнуюОпцию("УчетЗарплатыИКадровВоВнешнейПрограмме");	
	Если НЕ УчетЗарплатыИКадровВоВнешнейПрограмме Тогда
		СтруктураОбязательныхРеквизитов.Вставить("РаботникОрганизации");	
	КонецЕсли;	
	СтруктураОбязательныхРеквизитов.Вставить("ПериодРегистрации");
	
	мТаблицаУсловий.Очистить();
	НовоеУсловие = мТаблицаУсловий.Добавить();
	НовоеУсловие.ИмяРеквизита = "СчетУчета";
	НовоеУсловие.ВидСравнения = "В";
	НовоеУсловие.УсловиеОбъединения = "И ";
	СписокСчетов = Новый СписокЗначений();
	СписокСчетов.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоЗаработнойПлате); //661
	СписокСчетов.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоДругимВыплатам);  //663
	
	НовоеУсловие.ЗначениеРеквизита = СписокСчетов;
	ПроверкаЗаполненияТабличныхЧастей(Отказ, СтруктураОбязательныхРеквизитов, "РасчетыПоЗаработнойПлате", , мТаблицаУсловий);
	
	СтруктураОбязательныхРеквизитов.Удалить("ПериодРегистрации");
	Если УчетЗарплатыИКадровВоВнешнейПрограмме Тогда
		СтруктураОбязательныхРеквизитов.Вставить("Ведомость");
	КонецЕсли; 
	мТаблицаУсловий.Очистить();
	НовоеУсловие = мТаблицаУсловий.Добавить();
	НовоеУсловие.ИмяРеквизита = "СчетУчета";
	НовоеУсловие.ВидСравнения = "В";
	НовоеУсловие.УсловиеОбъединения = "И ";
	СписокСчетов = Новый СписокЗначений();
	СписокСчетов.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоДепонентам); //662
	НовоеУсловие.ЗначениеРеквизита = СписокСчетов;
	ПроверкаЗаполненияТабличныхЧастей(Отказ, СтруктураОбязательныхРеквизитов, "РасчетыПоЗаработнойПлате", , мТаблицаУсловий);
	
	СтруктураОбязательныхРеквизитов = Новый Структура("НомерСтроки, СчетУчета");
	СтруктураОбязательныхРеквизитов.Вставить("Налог");
	СтруктураОбязательныхРеквизитов.Вставить("СтатьяНалоговойДекларации");
	СтруктураОбязательныхРеквизитов.Вставить("ПериодРегистрации");
	
	мТаблицаУсловий.Очистить();
	НовоеУсловие = мТаблицаУсловий.Добавить();
	НовоеУсловие.ИмяРеквизита = "СчетУчета";
	НовоеУсловие.ВидСравнения = "В";
	НовоеУсловие.УсловиеОбъединения = "И ";
	СписокСчетов = Новый СписокЗначений();
	СписокСчетов.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоПенсионномуОбеспечению); 			//651
	СписокСчетов.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоСоциальномуСтрахованию);			//652
    СписокСчетов.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоСтрахованиюНаСлучайБезработицы);	//653
	СписокСчетов.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоСтрахованиюОтНесчастныхСлучаев);	//656
	НовоеУсловие.ЗначениеРеквизита = СписокСчетов;
	ПроверкаЗаполненияТабличныхЧастей(Отказ, СтруктураОбязательныхРеквизитов, "РасчетыПоЗаработнойПлате", , мТаблицаУсловий);
	
КонецПроцедуры

////////////////////////////////////////////////////////
//Движения по регистрам бухгалтерии

Процедура ФормированиеПроводокБух_РасчетыСПерсоналомПоОплатеТрудаИДепонентам(БухСправка)
	
	УчетЗарплатыИКадровВоВнешнейПрограмме = ПолучитьФункциональнуюОпцию("УчетЗарплатыИКадровВоВнешнейПрограмме");
	
	Операция = ЭтотОбъект.Движения.Хозрасчетный;
	
	Для Каждого СтрокаБухСправки Из БухСправка Цикл
		
		Если СтрокаБухСправки.Сумма = 0 Тогда 
			Продолжить;
		КонецЕсли;
		
		Если СтрокаБухСправки.СчетУчета = ПланыСчетов.Хозрасчетный.ПустаяСсылка() Тогда
		     Продолжить;
		КонецЕсли;
		
		Если УчетЗарплатыИКадровВоВнешнейПрограмме Тогда
			ФизическоеЛицо = СтрокаБухСправки["ФизическоеЛицо"];
		Иначе
			//ФизическоеЛицо = СтрокаБухСправки["РаботникОрганизации"].ФизическоеЛицо;
			ФизическоеЛицо = СтрокаБухСправки["РаботникОрганизации"]; // ИНАГРО
		КонецЕсли;	
		
		Проводка = СформироватьПроводкуБух(Операция, СтрокаБухСправки);
		Если СтрокаБухСправки.СчетУчета = ПланыСчетов.Хозрасчетный.РасчетыПоДепонентам
		 или СтрокаБухСправки.СчетУчета = ПланыСчетов.Хозрасчетный.РасчетыПоЗаработнойПлате
		 или СтрокаБухСправки.СчетУчета = ПланыСчетов.Хозрасчетный.РасчетыПоДругимВыплатам 
		 Тогда	
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "РаботникиОрганизаций", ФизическоеЛицо);
		ИначеЕсли СтрокаБухСправки.СчетУчета = ПланыСчетов.Хозрасчетный.РасчетыПоПенсионномуОбеспечению
			  или СтрокаБухСправки.СчетУчета.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.РасчетыПоПенсионномуОбеспечению)
			  или СтрокаБухСправки.СчетУчета = ПланыСчетов.Хозрасчетный.РасчетыПоСоциальномуСтрахованию
			  или СтрокаБухСправки.СчетУчета.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.РасчетыПоСоциальномуСтрахованию)
			  или СтрокаБухСправки.СчетУчета = ПланыСчетов.Хозрасчетный.РасчетыПоСтрахованиюНаСлучайБезработицы
			  или СтрокаБухСправки.СчетУчета.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.РасчетыПоСтрахованиюНаСлучайБезработицы)
			  или СтрокаБухСправки.СчетУчета = ПланыСчетов.Хозрасчетный.РасчетыПоСтрахованиюОтНесчастныхСлучаев 
			  или СтрокаБухСправки.СчетУчета.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.РасчетыПоСтрахованиюОтНесчастныхСлучаев) Тогда
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Налоги", СтрокаБухСправки["Налог"]);  
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "СтатьиНалоговыхДеклараций", СтрокаБухСправки["СтатьяНалоговойДекларации"]);
		ИначеЕсли СтрокаБухСправки.СчетУчета = ПланыСчетов.Хозрасчетный.РасчетыПоОбязательнымПлатежам Тогда
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Налоги", Справочники.Налоги.ВоенныйСбор);  
		Иначе
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "РаботникиОрганизаций", ФизическоеЛицо);
		КонецЕсли;	
		
	КонецЦикла;
	
	
	
КонецПроцедуры

////////////////////////////////////////////////////////
//Движения по регистрам зарплаты

Процедура ФормированиеРегистровЗарплаты(ТаблицаДанных, Отказ)
	
	Если ПолучитьФункциональнуюОпцию("УчетЗарплатыИКадровВоВнешнейПрограмме") Тогда
		Возврат;
	КонецЕсли;	
	
	Для Каждого СтрокаТЧ ИЗ ТаблицаДанных Цикл
		
		Если СтрокаТЧ.Сумма  = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрокаТЧ.СчетУчета = ПланыСчетов.Хозрасчетный.РасчетыПоДепонентам И ПолучитьФункциональнуюОпцию("УчетЗарплатыИКадровВоВнешнейПрограмме") Тогда
			Движение				= Движения.ВзаиморасчетыСДепонентами.Добавить();
			Движение.ВидДвижения	= ?(СтрокаТЧ.Сумма > 0, ВидДвиженияНакопления.Приход, ВидДвиженияНакопления.Расход);
			Движение.Период			= СтруктураШапкиДокумента.Дата;
			Движение.Организация	= СтруктураШапкиДокумента.Организация;
			Движение.Сумма			= ?(СтрокаТЧ.Сумма > 0, СтрокаТЧ.Сумма, -СтрокаТЧ.Сумма);
			Движение.Ведомость		= СтрокаТЧ.Ведомость;
			Движение.ФизическоеЛицо	= СтрокаТЧ.РаботникОрганизации.ФизическоеЛицо;
			Движение.ИНАГРО_Сотрудник	= СтрокаТЧ.РаботникОрганизации;    // ИНАГРО
			
		ИначеЕсли СтрокаТЧ.СчетУчета = ПланыСчетов.Хозрасчетный.РасчетыПоЗаработнойПлате
			или СтрокаТЧ.СчетУчета = ПланыСчетов.Хозрасчетный.РасчетыПоДругимВыплатам Тогда
			
			Движение						= Движения.ВзаиморасчетыССотрудниками.Добавить();
			Движение.ВидДвижения			= ?(СтрокаТЧ.Сумма > 0, ВидДвиженияНакопления.Приход, ВидДвиженияНакопления.Расход);
			Движение.Период					= СтруктураШапкиДокумента.Дата;
			Движение.Организация			= СтруктураШапкиДокумента.Организация;
			Движение.СуммаВзаиморасчетов	= ?(СтрокаТЧ.Сумма > 0, СтрокаТЧ.Сумма, -СтрокаТЧ.Сумма);
			Движение.ПериодВзаиморасчетов	= СтрокаТЧ.ПериодРегистрации;
			Движение.ФизическоеЛицо			= СтрокаТЧ.РаботникОрганизации.ФизическоеЛицо;
			Движение.Сотрудник				= СтрокаТЧ.РаботникОрганизации;  // ИНАГРО
			Движение.СчетУчета				= СтрокаТЧ.СчетУчета;
			Движение.КодОперации 			= Перечисления.КодыОперацийВзаиморасчетыСРаботникамиОрганизаций.Начисления;
			
		ИначеЕсли СтрокаТЧ.СчетУчета = ПланыСчетов.Хозрасчетный.РасчетыПоПенсионномуОбеспечению
		  или СтрокаТЧ.СчетУчета.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.РасчетыПоПенсионномуОбеспечению)	
		  или СтрокаТЧ.СчетУчета = ПланыСчетов.Хозрасчетный.РасчетыПоСоциальномуСтрахованию
		  или СтрокаТЧ.СчетУчета.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.РасчетыПоСоциальномуСтрахованию)
		  или СтрокаТЧ.СчетУчета = ПланыСчетов.Хозрасчетный.РасчетыПоСтрахованиюНаСлучайБезработицы
		  или СтрокаТЧ.СчетУчета.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.РасчетыПоСтрахованиюНаСлучайБезработицы)
		  или СтрокаТЧ.СчетУчета = ПланыСчетов.Хозрасчетный.РасчетыПоСтрахованиюОтНесчастныхСлучаев 
		  или СтрокаТЧ.СчетУчета.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.РасчетыПоСтрахованиюОтНесчастныхСлучаев) Тогда
			
			Движение						= Движения.ВзаиморасчетыПоВзносамВФонды.Добавить();
			Движение.ВидДвижения			= ВидДвиженияНакопления.Приход;
			Движение.Период					= СтруктураШапкиДокумента.Дата;
			Движение.Организация			= СтруктураШапкиДокумента.Организация;
			Движение.Налог					= СтрокаТЧ.Налог;
			Движение.СтатьяНалоговойДекларации	= СтрокаТЧ.СтатьяНалоговойДекларации;
			Движение.ПериодВзаиморасчетов	= СтрокаТЧ.ПериодРегистрации;
			
			Движение.Сумма	= СтрокаТЧ.Сумма;
			
		ИначеЕсли	СтрокаТЧ.СчетУчета = ПланыСчетов.Хозрасчетный.РасчетыПоНДФЛ 
			или СтрокаТЧ.СчетУчета = ПланыСчетов.Хозрасчетный.РасчетыПоОбязательнымПлатежам Тогда
			
			Движение						= Движения.ВзаиморасчетыПоНДФЛ.Добавить();
			Движение.ВидДвижения			= ВидДвиженияНакопления.Приход;
			Движение.Период					= СтруктураШапкиДокумента.Дата;
			//Движение.Контрагент				= СтрокаТЧ.РаботникОрганизации.ФизическоеЛицо;  // ИНАГРО
			Движение.Контрагент				= СтрокаТЧ.РаботникОрганизации;                     // ИНАГРО
			Движение.Организация			= СтруктураШапкиДокумента.Организация;
			Движение.ПериодВзаиморасчетов	= СтрокаТЧ.ПериодРегистрации;
			Движение.ДоходНДФЛ				= СтрокаТЧ.ДоходНДФЛ;
			Движение.ВидСтавки				= СтрокаТЧ.ВидСтавки;
			Движение.Льгота					= СтрокаТЧ.Льгота;
			Движение.НалоговыйПериод		= СтрокаТЧ.ПериодРегистрации;
			
			Движение.Налог		= СтрокаТЧ.Сумма;
			Движение.Доход		= СтрокаТЧ.Доход;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

//-- БУ ЗИК


//*****************************************************************************************************************************
// РБП

Процедура ОбработкаПроведения_РасходыБудущихПериодов(Отказ)
	
	Операция = Движения.Хозрасчетный;
	 
	Для Каждого СтрокаРБП Из РасходыБудущихПериодов Цикл
		
		
		// Получение элемента спр. РБП
		ЭлементСпрРБП = Справочники.РасходыБудущихПериодов.НайтиПоНаименованию(СтрокаРБП.Наименование);
		Если ЭлементСпрРБП.Пустая() Тогда
			
			ЭлементСпрРБП = Справочники.РасходыБудущихПериодов.СоздатьЭлемент();
			ЭлементСпрРБП.УстановитьНовыйКод();
			ЭлементСпрРБП.Наименование 			= СтрокаРБП.Наименование;
			ЭлементСпрРБП.СчетБУ 				= СтрокаРБП.СчетЗатрат;
			ЭлементСпрРБП.СубконтоБУ1 			= СтрокаРБП.Субконто1;
			ЭлементСпрРБП.СубконтоБУ2			= СтрокаРБП.Субконто2;
			ЭлементСпрРБП.СубконтоБУ3 			= СтрокаРБП.Субконто3;
			ЭлементСпрРБП.МетодРаспределения	= СтрокаРБП.МетодРаспределения;
			ХарактерЗатрат = УправлениеПроизводствомВызовСервера.ПолучитьХарактерЗатратПоСчетуЗатрат(СтрокаРБП.СчетЗатрат, Неопределено , Дата);
	
			Если (ХарактерЗатрат = "Производство") ИЛИ (ХарактерЗатрат = "Строительство") ИЛИ (ХарактерЗатрат = "ОПЗ") Тогда
				ЭлементСпрРБП.НалоговоеНазначение = СтрокаРБП.НалоговоеНазначение;
			КонецЕсли;
			Если (ХарактерЗатрат = "Затраты")  ИЛИ (ХарактерЗатрат = "ОПЗ") Тогда
				ЭлементСпрРБП.НалоговоеНазначениеДоходовИЗатрат = СтрокаРБП.НалоговоеНазначениеДоходовИЗатрат;
			КонецЕсли;
			
			ЭлементСпрРБП.ДатаНачалаСписания	= КонецМесяца(Дата) + 1;
			ЭлементСпрРБП.ДатаОкончанияСписания	= СтрокаРБП.ДатаОкончанияСписания;
			ЭлементСпрРБП.Записать();
		
		КонецЕсли; 
		
		// Движения
		Проводка = Операция.Добавить();
		СчетУчета = ПланыСчетов.Хозрасчетный.ЗатратыБудущихПериодов;
		
		Проводка.Период      	= Дата;
		Проводка.Организация 	= Организация;
		Проводка.Содержание  	= СодержаниеПроводки;
		Проводка.Сумма			= СтрокаРБП.Сумма;
		Проводка.СчетДт			= СтрокаРБП.СчетУчета;
		Проводка.СчетКт 		= ПланыСчетов.Хозрасчетный.Вспомогательный;
		
		ХарактерЗатрат = УправлениеПроизводствомВызовСервера.ПолучитьХарактерЗатратПоСчетуЗатрат(СтрокаРБП.СчетЗатрат, Неопределено , Дата);
		
		Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыльДо2015 Тогда
			Проводка.СуммаНУДт		= СтрокаРБП.СуммаНУ;
			Проводка.НалоговоеНазначениеДт = СтрокаРБП.НалоговоеНазначение;
		Иначе
			Если Проводка.СчетДт.УчетПоНалоговымНазначениямНДС Тогда
				Проводка.НалоговоеНазначениеДт = СтрокаРБП.НалоговоеНазначение;
			КонецЕсли; 
		КонецЕсли;	
		
		Если СчетУчета.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.РасходыБудущихПериодов) <> Неопределено Тогда
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "РасходыБудущихПериодов", ЭлементСпрРБП.Ссылка);
		КонецЕсли;   		
		
	КонецЦикла;
		
КонецПроцедуры

//*****************************************************************************************************************************
// РАСХОДЫ ПО НМА

Процедура ОбработкаПроверкиЗаполнения_НематериальныеАктивы(Отказ)
	
	
	
	мСтрокаОбязательныхРеквизитов = "";
	ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаНМА(мСтрокаОбязательныхРеквизитов);
	// Проверим правильность заполнения табличной части документа
	ПроверитьЗаполнениеТабЧастиНМА(Отказ, Заголовок, мСтрокаОбязательныхРеквизитов);
	
	УправлениеВнеоборотнымиАктивами.ПроверитьОтсутствиеДублейВТабличнойЧасти(ЭтотОбъект, "НМА", Новый Структура("НематериальныйАктив"), Отказ);
	
	
КонецПроцедуры

Процедура ОшибкаПроведенияПоСтрокеНМА(СтрокаНМА, ТекстСообщения,Заголовок,Статус)
	НачалоСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='- строка № %1, НМА <%2> : ';uk='- рядок № %1, НМА <%2> : '"), СтрокаНМА.НомерСтроки, СтрокаНМА.НематериальныйАктив);
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НачалоСообщения+ТекстСообщения);
КонецПроцедуры

// Процедура заполняет структуры именами реквизитов, которые имеют смысл
// только для определенного вида учета
//
Процедура ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаНМА(мСтрокаОбязательныхРеквизитов)
	
	мСтрокаРеквизитыБухУчета =  "НачислятьАмортизациюБУ,
	|ОбъемПродукцииРаботДляВычисленияАмортизации,
	|МОЛБУ,
	|ПодразделениеОрганизации,
	|СпособНачисленияАмортизацииБУ,
	|СрокПолезногоИспользованияБУ,
	|СтоимостьБУ,
	|СчетНачисленияАмортизацииБУ,
	|СчетУчетаБУ,
	|СчетУчетаБУВнеоборотногоАктива,
	|ЛиквидационнаяСтоимостьБУ
	|";
	
	мСтрокаРеквизитыНалУчета =  "НачислятьАмортизациюНУ,
	|УчитываетсяКакОСНУ,
	|СпособНачисленияАмортизацииНУ,
	|НалоговаяГруппаОС
	|";
		
	мОбщиеРеквизиты =  "НематериальныйАктив,
						|ДатаПринятияКУчетуРегл,
						|";
	
	мСтрокаОбязательныхРеквизитов = мОбщиеРеквизиты + мСтрокаРеквизитыБухУчета + мСтрокаРеквизитыНалУчета;

КонецПроцедуры // ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаНМА()

// Процедура проверяет корректность заполнения реквизитов таб. части документа
//
Процедура ПроверитьЗаполнениеТабЧастиНМА(Отказ, Заголовок, мСтрокаОбязательныхРеквизитов)

	
	БухУчет    = Истина;
	НалУчет    = Истина;
	
	РеквизитыВысокойВажности = "";

	Если БухУчет тогда
		РеквизитыВысокойВажности = РеквизитыВысокойВажности +",ПервоначальнаяСтоимостьБУ, СчетУчетаБУ, ПодразделениеОрганизации";
	КонецЕсли;

	МетаданныеРеквизиты = ЭтотОбъект.Метаданные().ТабличныеЧасти.НМА.Реквизиты;

	Для Каждого СтрокаТЧ Из ЭтотОбъект.НМА Цикл

		ПроверкаПоСтрокеНМА(СтрокаТЧ, РеквизитыВысокойВажности, БухУчет, НалУчет, Отказ,МетаданныеРеквизиты);

	КонецЦикла;

КонецПроцедуры // ПроверитьЗаполнениеТабЧастиНМА()

//Проверка заполнения реквизитов
Функция ПроверкаПоСтрокеНМА(СтрокаНМА,БезусловныеРеквизиты, БухУчет, НалУчет, Отказ, МетаданныеРеквизиты)
	
	РеквизитыДляПроверки = Новый Структура(БезусловныеРеквизиты);
	Для каждого ТекРеквизит из РеквизитыДляПроверки Цикл
		РеквизитыДляПроверки.Вставить(ТекРеквизит.Ключ, СтатусСообщения.Важное);
	КонецЦикла;
	
	ДатаНКУ2015_ДляВводаНачальныхОстатков = '2015 01 01' - 86400;
	ЭтоДокументДо2015 = (ЭтотОбъект.Дата < ДатаНКУ2015_ДляВводаНачальныхОстатков);
	
	//Проверка реквизитов общей группы
	Если БухУчет или НалУчет тогда
		
		Если СтрокаНМА.НачислятьАмортизациюБУ Тогда
		
			//По видам учета
			Если БухУчет тогда
				РеквизитыДляПроверки.Вставить("СчетНачисленияАмортизацииБУ"  	,СтатусСообщения.Важное);				
			КонецЕсли;	
			
			Если ЗначениеЗаполнено(СтрокаНМА.СпособНачисленияАмортизацииБУ) Тогда
			
				Если СтрокаНМА.СпособНачисленияАмортизацииБУ = Перечисления.СпособыНачисленияАмортизацииНМА.Производственный Тогда
					РеквизитыДляПроверки.Вставить("ОбъемПродукцииРаботДляВычисленияАмортизации", СтатусСообщения.Важное);					
				Иначе					
					РеквизитыДляПроверки.Вставить("СрокПолезногоИспользованияБУ", СтатусСообщения.Важное);					
				КонецЕсли;
				
				Если СтрокаНМА.СпособНачисленияАмортизацииБУ = Перечисления.СпособыНачисленияАмортизацииНМА.УменьшенияОстатка Тогда
					РеквизитыДляПроверки.Вставить("ЛиквидационнаяСтоимостьБУ", СтатусСообщения.Важное);										
				КонецЕсли;
				
			КонецЕсли;
						
		КонецЕсли;
		
		Если СтрокаНМА.НачислятьАмортизациюНУ 
		   И НалУчет Тогда
			РеквизитыДляПроверки.Вставить("ПервоначальнаяСтоимостьНУ"					,СтатусСообщения.Важное);
		КонецЕсли;

	КонецЕсли;
	
	//Проверка реквизитов групп амортизации
	Если БухУчет Тогда
		
		РеквизитыДляПроверки.Вставить("СпособНачисленияАмортизацииБУ"			,СтатусСообщения.Важное);
		
		Если СтрокаНМА.НачислятьАмортизациюБУ Тогда
			РеквизитыДляПроверки.Вставить("СпособОтраженияРасходов"	,СтатусСообщения.Внимание);
		КонецЕсли;
		
	КонецЕсли;
	
	Если НалУчет
	   И СтрокаНМА.НачислятьАмортизациюНУ Тогда
	    				
		Если СтрокаНМА.НачислятьАмортизациюНУ Тогда
			РеквизитыДляПроверки.Вставить("СпособОтраженияРасходов"	,СтатусСообщения.Внимание);
		КонецЕсли;
		
	КонецЕсли;
	
	Если НалУчет И СтруктураШапкиДокумента.ЕстьНалогНаПрибыль Тогда
		
		Если Не ЭтоДокументДо2015 И СтрокаНМА.НачислятьАмортизациюНУ Тогда
			РеквизитыДляПроверки.Вставить("СпособНачисленияАмортизацииНУ", СтатусСообщения.Важное);
		КонецЕсли;	
		
		Если СтрокаНМА.УчитываетсяКакОСНУ Тогда
			
			РеквизитыДляПроверки.Вставить("НалоговаяГруппаОС"	,СтатусСообщения.Внимание);
			
		ИначеЕсли СтрокаНМА.НачислятьАмортизациюНУ Тогда
			
			РеквизитыДляПроверки.Вставить("СрокПолезногоИспользованияНУ"	,СтатусСообщения.Внимание);
			
		КонецЕсли;
		
	
	КонецЕсли;
	
	
	// Цикл по проверяемым полям
	Для каждого КлючЗначение Из РеквизитыДляПроверки Цикл
		Значение = СтрокаНМА[КлючЗначение.Ключ];
		Если НЕ ЗначениеЗаполнено(Значение) Тогда // 
			ПредставлениеРеквизита = МетаданныеРеквизиты[КлючЗначение.Ключ].Представление();
			ВидУчета = ""; 
			Если Прав(КлючЗначение.Ключ,2) = "БУ" тогда
				ВидУчета = НСтр("ru='(БУ) ';uk='(БО) '");
			ИначеЕсли Прав(КлючЗначение.Ключ,2) = "НУ" тогда
				ВидУчета = НСтр("ru='(НУ) ';uk='(ПО) '");
			КонецЕсли;
			СтрокаСообщения = ВидУчета+ НСтр("ru='не заполнено значение реквизита ""';uk='не заповнене значення реквізиту ""'") + СокрЛП(ПредставлениеРеквизита) + """!";
			
			ОшибкаПроведенияПоСтрокеНМА(СтрокаНМА, СтрокаСообщения,Заголовок,КлючЗначение.Значение);
		КонецЕсли;
	КонецЦикла;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Процедура формирования движений регистров
Процедура ДвиженияПоРегистрамНМА(Отказ,Заголовок)
	
	ТабНМА = НМА.Выгрузить();
	
	Для Каждого СтрокаНМА ИЗ ТабНМА Цикл
		ДвиженияПоРегистрамРеглНМА(СтрокаНМА, Отказ,Заголовок);
	КонецЦикла;
	
КонецПроцедуры // ФормированиеДвижений()

// Процедура формирования движений регл. регистров
Процедура ДвиженияПоРегистрамРеглНМА(СтрокаНМА, Отказ,Заголовок)

	// Движения по регистру Состояние
	Движение = Движения.СостоянияНМАОрганизаций.Добавить();
	Движение.Период              = СтрокаНМА.ДатаПринятияКУчетуРегл;
	Движение.НематериальныйАктив = СтрокаНМА.НематериальныйАктив;
	Движение.Организация         = СтруктураШапкиДокумента.Организация;
	Движение.Состояние           = Перечисления.ВидыСостоянийНМА.ПринятКУчету;
	
	СостояниеНМА            = Движения.СостоянияНМАОрганизаций;
	УправлениеНеоборотнымиАктивами.ПроверкаДублированияЗаписейСостоянийНМА(СтруктураШапкиДокумента.Организация,СтруктураШапкиДокумента.Дата, СостояниеНМА,Отказ,Заголовок);
	
	Если Отказ Тогда
	    // НМА уже было принято к учету ранее.
		// Повторное принятие к учету НМА недопустимо.
		Возврат;
	КонецЕсли; 

	ДатаНКУ2015_ДляВводаНачальныхОстатков = '2015 01 01' - 86400;
	ЭтоДокументДо2015 = (ЭтотОбъект.Дата < ДатаНКУ2015_ДляВводаНачальныхОстатков);
	
	Проводки = Движения.Хозрасчетный;
	
	Если СтрокаНМА.ПервоначальнаяСтоимостьБУ <> 0 ИЛИ СтрокаНМА.ПервоначальнаяСтоимостьНУ <> 0 Тогда 
		
		Проводка = Проводки.Добавить();
		
		Проводка.Период       = СтруктураШапкиДокумента.Дата;
		Проводка.Организация  = СтруктураШапкиДокумента.Организация;
		
		Проводка.Содержание = СодержаниеПроводки;
		
		Проводка.НомерЖурнала = "НА";
		Проводка.Сумма        = СтрокаНМА.ПервоначальнаяСтоимостьБУ;
		
		Проводка.НалоговоеНазначениеДт 	= СтрокаНМА.НематериальныйАктив.НалоговоеНазначение;
		
		Если СтрокаНМА.НематериальныйАктив.НалоговоеНазначение <> Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяНеХозДеятельность Тогда 
			Проводка.СуммаНУДт 	 			= СтрокаНМА.ПервоначальнаяСтоимостьНУ;
		КонецЕсли;	
		
		Проводка.СчетДт       = СтрокаНМА.СчетУчетаБУ;
		Проводка.СчетКт       = ПланыСчетов.Хозрасчетный.Вспомогательный;
					
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "НематериальныеАктивы", СтрокаНМА.НематериальныйАктив);			
					
	КонецЕсли;
	
	Если СтрокаНМА.НакопленнаяАмортизацияБУ <> 0 ИЛИ СтрокаНМА.НакопленнаяАмортизацияНУ <> 0 Тогда
		
		Проводка = Проводки.Добавить();
		
		Проводка.Период       = СтруктураШапкиДокумента.Дата;
		Проводка.Организация  = СтруктураШапкиДокумента.Организация;
		
		Проводка.Содержание = НСтр("ru='Накопленная амортизация НМА';uk='Накопичена амортизація НМА'",Локализация.КодЯзыкаИнформационнойБазы());
		
		Проводка.НомерЖурнала = "НА";
		Проводка.Сумма        = СтрокаНМА.НакопленнаяАмортизацияБУ;
		Проводка.СчетДт       = ПланыСчетов.Хозрасчетный.Вспомогательный;
		Проводка.СчетКт       = СтрокаНМА.СчетНачисленияАмортизацииБУ;
		
		Проводка.НалоговоеНазначениеКт 	= СтрокаНМА.НематериальныйАктив.НалоговоеНазначение;
		Если СтрокаНМА.НематериальныйАктив.НалоговоеНазначение <> Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяНеХозДеятельность Тогда 
			Проводка.СуммаНУКт 	 			= СтрокаНМА.НакопленнаяАмортизацияНУ;
		КонецЕсли;	
		
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "НематериальныеАктивы", СтрокаНМА.НематериальныйАктив);
		
	КонецЕсли;
	
	// Движения по регистру СпособыОтраженияРасходов
	Движение = Движения.СпособыОтраженияРасходовПоАмортизацииНМАБухгалтерскийУчет.Добавить();
	Движение.Период                      = СтрокаНМА.ДатаПринятияКУчетуРегл;
	Движение.НематериальныйАктив         = СтрокаНМА.НематериальныйАктив;
	Движение.Организация                 = СтруктураШапкиДокумента.Организация;
	Движение.СпособОтраженияРасходов     = СтрокаНМА.СпособОтраженияРасходов; 
			
	// Движения по регистру ПервоначальныеСведения
	Движение = Движения.ПервоначальныеСведенияНМАБухгалтерскийУчет.Добавить();
	Движение.Период                      					= СтрокаНМА.ДатаПринятияКУчетуРегл;
	Движение.НематериальныйАктив         					= СтрокаНМА.НематериальныйАктив;
	Движение.Организация                 					= СтруктураШапкиДокумента.Организация;
	Движение.НачислятьАмортизацию        					= СтрокаНМА.НачислятьАмортизациюБУ;
	Движение.ПервоначальнаяСтоимость     					= СтрокаНМА.ПервоначальнаяСтоимостьБУ;
	Движение.СпособНачисленияАмортизации 					= СтрокаНМА.СпособНачисленияАмортизацииБУ;
	Движение.СрокПолезногоИспользования  					= СтрокаНМА.СрокПолезногоИспользованияБУ;
	Движение.ЛиквидационнаяСтоимость  	 					= СтрокаНМА.ЛиквидационнаяСтоимостьБУ;
	Движение.ОбъемПродукцииРаботДляВычисленияАмортизации	= СтрокаНМА.ОбъемПродукцииРаботДляВычисленияАмортизации;
	
	// Движения по регистру МестонахождениеНМАБухгалтерскийУчет
	Движение = Движения.МестонахождениеНМАБухгалтерскийУчет.Добавить();
	Движение.Период 				= СтрокаНМА.ДатаПринятияКУчетуРегл;
	Движение.Организация 			= СтруктураШапкиДокумента.Организация;
	Движение.НематериальныйАктив 	= СтрокаНМА.НематериальныйАктив;
	Движение.Местонахождение 		= СтрокаНМА.ПодразделениеОрганизации;
	Движение.МОЛ 					= СтрокаНМА.МОЛБУ;
	
	// Движения по регистру СчетаБухгалтерскогоУчета
	Движение = Движения.СчетаБухгалтерскогоУчетаНМА.Добавить();
	Движение.Период                      = СтрокаНМА.ДатаПринятияКУчетуРегл;
	Движение.НематериальныйАктив         = СтрокаНМА.НематериальныйАктив;
	Движение.Организация                 = СтруктураШапкиДокумента.Организация;
	Движение.СчетУчета                   = СтрокаНМА.СчетУчетаБУ;
	Движение.СчетНачисленияАмортизации   = СтрокаНМА.СчетНачисленияАмортизацииБУ;		

	// Движения по регистру ПервоначальныеСведенияНМАНалоговыйУчет
	Движение = Движения.ПервоначальныеСведенияНМАНалоговыйУчет.Добавить();
	Движение.НематериальныйАктив	= СтрокаНМА.НематериальныйАктив;
	Движение.Организация           	= СтруктураШапкиДокумента.Организация;
	Движение.Период                	= СтрокаНМА.ДатаПринятияКУчетуРегл;
	Движение.НалоговоеНазначение   	= СтрокаНМА.НематериальныйАктив.НалоговоеНазначение;
	Если НЕ ЭтоДокументДо2015 Тогда
		Движение.СпособНачисленияАмортизации = СтрокаНМА.СпособНачисленияАмортизацииНУ;
	КонецЕсли;	
	
	Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыль Тогда
		Движение.НачислятьАмортизацию 	    = СтрокаНМА.НачислятьАмортизациюБУ 
												И (СтрокаНМА.НематериальныйАктив.НалоговоеНазначение.ВидНалоговойДеятельности <> Справочники.ВидыНалоговойДеятельности.НеОблагаемая);
		Движение.ПервоначальнаяСтоимостьНУ  = СтрокаНМА.ПервоначальнаяСтоимостьНУ;
		Движение.СрокПолезногоИспользования = СтрокаНМА.СрокПолезногоИспользованияНУ;
		Движение.НалоговаяГруппаОС          = СтрокаНМА.НалоговаяГруппаОС;			
	ИначеЕсли СтруктураШапкиДокумента.ЕстьНДС Тогда
		Движение.НачислятьАмортизацию 	    = Ложь;
		Движение.ПервоначальнаяСтоимостьНУ  = 0;
		Движение.СрокПолезногоИспользования = 0;
		Движение.НалоговаяГруппаОС          = Справочники.НалоговыеГруппыОсновныхСредств.ПустаяСсылка();			
	КонецЕсли;
	
				
КонецПроцедуры // ФормированиеДвиженийРегл()

//*****************************************************************************************************************************
// ВЗАИМОРАСЧЕТЫ С КОНТРАГЕНТАМИ

Процедура ОбработкаПроведения_ВзаиморасчетыСКонтрагентами(Отказ)
	
	Перем ТаблицаПоРасчетам;

	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначенияБПВызовСервера.ПредставлениеДокументаПриПроведении(Ссылка);
	
	ПодготовитьТаблицуРасчетовСКонтрагентами(СтруктураШапкиДокумента, ТаблицаПоРасчетам, Отказ, Заголовок);
	
	
	Если НЕ Отказ Тогда
		
		ДвиженияПоВводуНачальныхОстатковВзаиморасчетов(СтруктураШапкиДокумента, ТаблицаПоРасчетам, Отказ, Заголовок);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения_ВзаиморасчетыСКонтрагентами(Отказ,МассивНепроверяемыхРеквизитов)
	
	Перем ТаблицаПоРасчетам;

	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначенияБПВызовСервера.ПредставлениеДокументаПриПроведении(Ссылка);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаРасчетыСКонтрагентами", РасчетыСКонтрагентами.Выгрузить());
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаРасчетыСКонтрагентами.НомерСтроки,
	|	ТаблицаРасчетыСКонтрагентами.ДоговорКонтрагента,
	|	ТаблицаРасчетыСКонтрагентами.ЗаТару,
	|	ТаблицаРасчетыСКонтрагентами.РасчетыВозврат,
	|	ТаблицаРасчетыСКонтрагентами.СтавкаНДС,
	|	ТаблицаРасчетыСКонтрагентами.СуммаНДС,
	|	ТаблицаРасчетыСКонтрагентами.СчетУчетаНДС,
	|	ТаблицаРасчетыСКонтрагентами.СчетУчетаНДСПодтвержденный,
	|	ТаблицаРасчетыСКонтрагентами.НалоговоеНазначение,
	|	ТаблицаРасчетыСКонтрагентами.ТипКонтрагента
	|ПОМЕСТИТЬ ВТ_ТаблицаРасчетыСКонтрагентами
	|ИЗ
	|	&ТаблицаРасчетыСКонтрагентами КАК ТаблицаРасчетыСКонтрагентами
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ТаблицаРасчетыСКонтрагентами.НомерСтроки,
	|	ВТ_ТаблицаРасчетыСКонтрагентами.ДоговорКонтрагента,
	|	isnull(ВТ_ТаблицаРасчетыСКонтрагентами.ДоговорКонтрагента.Владелец,ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) КАК КонтрагентДоговора,
	|	isnull(ВТ_ТаблицаРасчетыСКонтрагентами.ДоговорКонтрагента.Организация,ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)) КАК ДоговорОрганизация,
	|	isnull(ВТ_ТаблицаРасчетыСКонтрагентами.ДоговорКонтрагента.ВидДоговора,ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.ПустаяСсылка)) КАК ВидДоговора,
	|	isnull(ВТ_ТаблицаРасчетыСКонтрагентами.ДоговорКонтрагента.СложныйНалоговыйУчет,Ложь) КАК СложныйНалоговыйУчет,
	|	ВТ_ТаблицаРасчетыСКонтрагентами.ЗаТару КАК ВозвратнаяТара,
	|	ВТ_ТаблицаРасчетыСКонтрагентами.РасчетыВозврат,
	|	ВТ_ТаблицаРасчетыСКонтрагентами.СтавкаНДС,
	|	ВТ_ТаблицаРасчетыСКонтрагентами.СуммаНДС,
	|	ВТ_ТаблицаРасчетыСКонтрагентами.СчетУчетаНДС,
	|	ВТ_ТаблицаРасчетыСКонтрагентами.СчетУчетаНДСПодтвержденный,
	|	ВТ_ТаблицаРасчетыСКонтрагентами.НалоговоеНазначение,
	|	ВТ_ТаблицаРасчетыСКонтрагентами.ТипКонтрагента
	|ИЗ
	|	ВТ_ТаблицаРасчетыСКонтрагентами КАК ВТ_ТаблицаРасчетыСКонтрагентами";
	
	РезультатЗапросаПоТоварам = Запрос.Выполнить();
	
	ТаблицаПоРасчетам = РезультатЗапросаПоТоварам.Выгрузить();
	ПроверитьЗаполнениеТабличнойЧастиСуммыДолга(ТаблицаПоРасчетам, СтруктураШапкиДокумента, Отказ, Заголовок,МассивНепроверяемыхРеквизитов);
	
КонецПроцедуры


// Процедура формирует таблицы документа.
//
Процедура ПодготовитьТаблицуРасчетовСКонтрагентами(СтруктураШапкиДокумента, ТаблицаПоРасчетам, Отказ, Заголовок) Экспорт
	
	// Получим необходимые данные для проведения и проверки заполенения данные по табличной части "Суммы долга".
	СтруктураПолей = Новый Структура;
	
	СтруктураПолей.Вставить("ВидЗадолженности"                        , "ВидЗадолженности");
	СтруктураПолей.Вставить("Контрагент"                      		  , "Контрагент");
	СтруктураПолей.Вставить("ДоговорКонтрагента"                      , "ДоговорКонтрагента");
	СтруктураПолей.Вставить("КонтрагентДоговора"                      , "ДоговорКонтрагента.Владелец");
	СтруктураПолей.Вставить("ВалютаВзаиморасчетов"                    , "ДоговорКонтрагента.ВалютаВзаиморасчетов");
	СтруктураПолей.Вставить("ВедениеВзаиморасчетов"                   , "ДоговорКонтрагента.ВедениеВзаиморасчетов");
	СтруктураПолей.Вставить("ВедениеВзаиморасчетовНУ"                 , "ДоговорКонтрагента.ВедениеВзаиморасчетовНУ");
	СтруктураПолей.Вставить("ДоговорОрганизация"                      , "ДоговорКонтрагента.Организация");
	СтруктураПолей.Вставить("ВидДоговора"                             , "ДоговорКонтрагента.ВидДоговора");
	СтруктураПолей.Вставить("СложныйНалоговыйУчет"                    , "ДоговорКонтрагента.СложныйНалоговыйУчет");	
	
	СтруктураПолей.Вставить("Сделка"                				  , "Документ");
	СтруктураПолей.Вставить("Сумма"              					  , "Сумма");
	СтруктураПолей.Вставить("СуммаВзаиморасчетов"              		  , "ВалютнаяСумма");
	СтруктураПолей.Вставить("КурсВзаиморасчетов"                      , "КурсВзаиморасчетов");
	СтруктураПолей.Вставить("КратностьВзаиморасчетов"                 , "КратностьВзаиморасчетов");
 	СтруктураПолей.Вставить("СчетОплаты"          					  , "СчетУчета");
	СтруктураПолей.Вставить("СчетАванса"          					  , "СчетУчета");
	
	СтруктураПолей.Вставить("ТипКонтрагента"						  , "ТипКонтрагента");
	
	СтруктураПолей.Вставить("ВозвратнаяТара"          			, "ЗаТару");
	СтруктураПолей.Вставить("СуммаНУ"              				, "СуммаНУ");
	
	СтруктураПолей.Вставить("РасчетыВозврат"          			, "РасчетыВозврат");
	СтруктураПолей.Вставить("СтавкаНДС"				  			, "СтавкаНДС");
	СтруктураПолей.Вставить("СчетУчетаНДС"						, "СчетУчетаНДС");
	СтруктураПолей.Вставить("СчетУчетаНДСПодтвержденный"		, "СчетУчетаНДСПодтвержденный");
	СтруктураПолей.Вставить("СуммаНДС"						  	, "СуммаНДС");
	СтруктураПолей.Вставить("НетНалоговойНакладной"				, "НетНалоговойНакладной");
	СтруктураПолей.Вставить("ВзаиморасчетыЗакрыты"				, "ВзаиморасчетыЗакрыты");
	
	СтруктураПолей.Вставить("СхемаНалоговогоУчета"				, "ДоговорКонтрагента.СхемаНалоговогоУчета");
	СтруктураПолей.Вставить("СхемаНалоговогоУчетаПоТаре"		, "ДоговорКонтрагента.СхемаНалоговогоУчетаПоТаре");
	
	СтруктураПолей.Вставить("НалоговоеНазначение"				, "НалоговоеНазначение");
	СтруктураПолей.Вставить("ВидНалоговойДеятельности"  		, "НалоговоеНазначение.ВидНалоговойДеятельности");
	СтруктураПолей.Вставить("Амортизируется"     				, "Амортизируется");
	СтруктураПолей.Вставить("ВидДеятельностиНДС"		     	, "НалоговоеНазначение.ВидДеятельностиНДС");
	
	РезультатЗапросаПоРасчетам = ОбщегоНазначенияРед12.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "РасчетыСКонтрагентами", СтруктураПолей);

	// Подготовим таблицы товаров для проведения.
	ТаблицаПоРасчетам = ДополнитьТаблицуРасчетовСКонтрагентами(РезультатЗапросаПоРасчетам, СтруктураШапкиДокумента);

КонецПроцедуры

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоРасчетам - результат запроса по табличной части "РасчетыСКонтрагентами",
//  СтруктураШапкиДокумента   - структура, содержащая рексвизиты шапки документа и результаты запроса по шапке
//
// Возвращаемое значение:
//  Сформированная таблиица значений.
//
Функция ДополнитьТаблицуРасчетовСКонтрагентами(РезультатЗапросаПоРасчетам, СтруктураШапкиДокумента)

	ТаблицаРасчетов = РезультатЗапросаПоРасчетам.Выгрузить();
	
	// Добполнение таблицы расчетов полями.
	
	СтрокиКредиторки = ТаблицаРасчетов.найтиСтроки(Новый Структура("ВидЗадолженности", Перечисления.ВидыЗадолженности.Кредиторская));

	Для каждого СтрокаРасчетов Из ТаблицаРасчетов Цикл
		
		Если НЕ ЗначениеЗаполнено(СтрокаРасчетов.Сделка) Тогда
		
			СтрокаРасчетов.Сделка = Неопределено;
		
		КонецЕсли;
		
	КонецЦикла;
	
	// Дополним таблицу расчетов полями валютной сумм (для отработки стандартных механизмов движения денег)
	ТаблицаРасчетов.Колонки.Добавить("ГривневаяСумма", ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаРасчетов.Колонки.Добавить("ВалютнаяСумма", ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповЧисла(15,2));
	
	ТаблицаРасчетов.ЗагрузитьКолонку(ТаблицаРасчетов.ВыгрузитьКолонку("СуммаВзаиморасчетов"),"ВалютнаяСумма");
	ТаблицаРасчетов.ЗагрузитьКолонку(ТаблицаРасчетов.ВыгрузитьКолонку("Сумма"),"ГривневаяСумма");
	
	ТаблицаРасчетов.Колонки.Добавить("МоментОпределенияБазыНДС", Новый ОписаниеТипов("ПеречислениеСсылка.МоментыОпределенияНалоговойБазы"));
	
	
	Если СтруктураШапкиДокумента.ЕстьНДС Тогда
		
		ТаблицаРасчетов.Колонки.Добавить("СуммаНДСРегл", ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповЧисла(15,2));
		ТаблицаРасчетов.Колонки.Добавить("СуммаНДСВал", ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповЧисла(15,2));
		ТаблицаРасчетов.Колонки.Добавить("ПроводкиСуммаНДС", ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповЧисла(15,2));
		ТаблицаРасчетов.Колонки.Добавить("ПроводкиСуммаНДСВал", ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповЧисла(15,2));
		
		//определим имеется ли налоговый кредит по данной операции, и таким образом проводка по счету НДС.
		Для каждого СтрокаРасчетов Из ТаблицаРасчетов Цикл
			
			СтрокаРасчетов.СуммаНДСРегл = СтрокаРасчетов.СуммаНДС;
			
			СтрокаРасчетов.СуммаНДСВал  = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаРасчетов.СуммаНДС, 
											СтруктураШапкиДокумента.ВалютаРегламентированногоУчета,
											СтрокаРасчетов.ВалютаВзаиморасчетов,
											1,
											СтрокаРасчетов.КурсВзаиморасчетов, 
											1,
											СтрокаРасчетов.КратностьВзаиморасчетов);
			
			Если СтрокаРасчетов.ВозвратнаяТара ИЛИ НЕ УчетНДС.ЕстьПравоНаНалоговыйКредит(СтрокаРасчетов.НалоговоеНазначение) Тогда
			
				СтрокаРасчетов.ПроводкиСуммаНДС = 0;	
				СтрокаРасчетов.ПроводкиСуммаНДСВал = 0;	
				
			Иначе
				
				СтрокаРасчетов.ПроводкиСуммаНДС = СтрокаРасчетов.СуммаНДСРегл;	
				СтрокаРасчетов.ПроводкиСуммаНДСВал = СтрокаРасчетов.СуммаНДСВал;

			КонецЕсли;
			
			
			Если СтрокаРасчетов.ТипКонтрагента = Перечисления.СтатусыКонтрагентов.Поставщик Тогда
				
				Если СтрокаРасчетов.ВозвратнаяТара Тогда
					СтрокаРасчетов.МоментОпределенияБазыНДС = СтрокаРасчетов.СхемаНалоговогоУчетаПоТаре.МоментОпределенияБазыНДСПоПокупкам;
				Иначе//товары	
					СтрокаРасчетов.МоментОпределенияБазыНДС = СтрокаРасчетов.СхемаНалоговогоУчета.МоментОпределенияБазыНДСПоПокупкам;
				КонецЕсли;
				
			Иначе// покупатель	
				
				Если СтрокаРасчетов.ВозвратнаяТара Тогда
					СтрокаРасчетов.МоментОпределенияБазыНДС = СтрокаРасчетов.СхемаНалоговогоУчетаПоТаре.МоментОпределенияБазыНДСПоПродажам;
				Иначе//товары	
					СтрокаРасчетов.МоментОпределенияБазыНДС = СтрокаРасчетов.СхемаНалоговогоУчета.МоментОпределенияБазыНДСПоПродажам;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ТаблицаРасчетов;

КонецФункции // ПодготовитьТаблицуСуммДолга()

// Проверяет правильность заполнения строк табличной части "РасчетыСКонтрагентами".
//
// Параметры:
// Параметры: 
//  ТаблицаПоРасчетам    - таблица значений, содержащая данные для проведения и проверки ТЧ СуммыДолга
//  СтруктураШапкиДокумента - структура, содержащая рексвизиты шапки документа и результаты запроса по шапке
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиСуммыДолга(ТаблицаПоРасчетам, СтруктураШапкиДокумента, Отказ, Заголовок,МассивНепроверяемыхРеквизитов)

	ИмяТабличнойЧасти = "РасчетыСКонтрагентами";


	Если НЕ СтруктураШапкиДокумента.ЕстьНДС Тогда
		
		МассивНепроверяемыхРеквизитов.Добавить("ТипКонтрагента");
		МассивНепроверяемыхРеквизитов.Добавить("РасчетыВозврат");
				
	КонецЕсли;
	

	//Организация в документе должна совпадать с организацией, указанной в договорах взаиморасчетов.
	УправлениеВзаиморасчетами.ПроверитьОрганизациюДоговораВзаиморасчетовВТабличнойЧасти(ЭтотОбъект, ИмяТабличнойЧасти, ТаблицаПоРасчетам, Отказ, Заголовок);

	ТипПоставщик  = Перечисления.СтатусыКонтрагентов.Поставщик;
	ТипПокупатель = Перечисления.СтатусыКонтрагентов.Покупатель;
			
	ДоговорСПоставщиком = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком;
	ДоговорСПокупателем = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем;
	ДоговорПрочее	    = Перечисления.ВидыДоговоровКонтрагентов.Прочее;

	Если СтруктураШапкиДокумента.ЕстьНДС Тогда
		
		Для каждого СтрокаТаблицы Из ТаблицаПоРасчетам Цикл

			Префикс = ИмяТабличнойЧасти+"[" + Формат(СтрокаТаблицы.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].";
			
			Если     СтрокаТаблицы.СложныйНалоговыйУчет
				И НЕ (СтрокаТаблицы.ВозвратнаяТара И СтрокаТаблицы.РасчетыВозврат = Перечисления.РасчетыВозврат.Возврат)
				И НЕ СтрокаТаблицы.ВидДоговора = ДоговорПрочее Тогда
				
				Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.НалоговоеНазначение) Тогда
					Если СтруктураШапкиДокумента.ЕстьНДС Тогда
						
						ТекстСообщения = ОбщегоНазначенияБПКлиентСервер.ПолучитьТекстСообщения("Колонка", "Заполнение", 
							НСтр("ru='Налоговое назначение';uk='Податкове призначення'"),
							СтрокаТаблицы.НомерСтроки, ИмяТабличнойЧасти);
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Префикс+"НоменклатурнаяГруппа", "Объект",Отказ);
						
					КонецЕсли; 
				КонецЕсли;
				
				Если СтруктураШапкиДокумента.ЕстьНДС Тогда
		
					Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.СтавкаНДС) Тогда
						ТекстСообщения = ОбщегоНазначенияБПКлиентСервер.ПолучитьТекстСообщения("Колонка", "Заполнение",   
							НСтр("ru='Ставка НДС';uk='Ставка ПДВ'"),
							СтрокаТаблицы.НомерСтроки, ИмяТабличнойЧасти);
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Префикс+"СтавкаНДС", "Объект",Отказ);

					КонецЕсли;
					
					Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.СчетУчетаНДС) и СтрокаТаблицы.СуммаНДС <> 0 Тогда
						ТекстСообщения = ОбщегоНазначенияБПКлиентСервер.ПолучитьТекстСообщения("Колонка", "Заполнение",  
							НСтр("ru='Счет учета НДС (неподтвержденный)';uk='Рахунок ПДВ (непідтверджений)'"),
							СтрокаТаблицы.НомерСтроки, ИмяТабличнойЧасти);
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Префикс+"СчетУчетаНДС", "Объект",Отказ);
					КонецЕсли;
					
					Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.СчетУчетаНДСПодтвержденный) и СтрокаТаблицы.СуммаНДС <> 0 Тогда
						ТекстСообщения = ОбщегоНазначенияБПКлиентСервер.ПолучитьТекстСообщения("Колонка", "Заполнение",
							НСтр("ru='Счет учета НДС (подтвержденный)';uk='Рахунок обліку ПДВ (підтверджений)'"),
							СтрокаТаблицы.НомерСтроки, ИмяТабличнойЧасти);
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Префикс+"СчетУчетаНДСПодтвержденный", "Объект",Отказ);
					КонецЕсли;
					
				КонецЕсли;

			ИначеЕсли  НЕ  СтрокаТаблицы.СложныйНалоговыйУчет Тогда
				
				Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.НалоговоеНазначение) Тогда
					ТекстСообщения = ОбщегоНазначенияБПКлиентСервер.ПолучитьТекстСообщения("Колонка", "Заполнение", 
							НСтр("ru='Налоговое назначение';uk='Податкове призначення'"),
							СтрокаТаблицы.НомерСтроки, ИмяТабличнойЧасти);
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Префикс+"НалоговоеНазначений",Отказ);
				КонецЕсли;
				
				Если СтруктураШапкиДокумента.ЕстьНДС Тогда
		
					Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.СтавкаНДС) Тогда
						ТекстСообщения = ОбщегоНазначенияБПКлиентСервер.ПолучитьТекстСообщения("Колонка", "Заполнение",
							НСтр("ru='Ставка НДС';uk='Ставка ПДВ'"),
							СтрокаТаблицы.НомерСтроки, ИмяТабличнойЧасти);
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Префикс+"СтавкаНДС", "Объект",Отказ);
					КонецЕсли;
					
					Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.СчетУчетаНДС) И НЕ СтрокаТаблицы.ВозвратнаяТара Тогда
						ТекстСообщения = ОбщегоНазначенияБПКлиентСервер.ПолучитьТекстСообщения("Колонка", "Заполнение", 
							НСтр("ru='Счет учета НДС (неподтвержденный)';uk='Рахунок ПДВ (непідтверджений)'"),
							СтрокаТаблицы.НомерСтроки, ИмяТабличнойЧасти);
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Префикс+"СчетУчетаНДС", "Объект",Отказ);
					КонецЕсли;
					
					Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.СчетУчетаНДСПодтвержденный) И НЕ СтрокаТаблицы.ВозвратнаяТара Тогда
						ТекстСообщения = ОбщегоНазначенияБПКлиентСервер.ПолучитьТекстСообщения("Колонка", "Заполнение",
							НСтр("ru='Счет учета НДС (подтвержденный)';uk='Рахунок обліку ПДВ (підтверджений)'"),
							СтрокаТаблицы.НомерСтроки, ИмяТабличнойЧасти);
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Префикс+"СчетУчетаНДСПодтвержденный", "Объект",Отказ);
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
			Если    (СтрокаТаблицы.ВидДоговора = ДоговорСПоставщиком и НЕ СтрокаТаблицы.ТипКонтрагента = ТипПоставщик)
				ИЛИ (СтрокаТаблицы.ВидДоговора = ДоговорСПокупателем и НЕ СтрокаТаблицы.ТипКонтрагента = ТипПокупатель)	Тогда
				ТекстСообщения = ОбщегоНазначенияБПКлиентСервер.ПолучитьТекстСообщения("Колонка", "Корректность",
							НСтр("ru='Договор контрагента';uk='Договір контрагента'"),
							СтрокаТаблицы.НомерСтроки, ИмяТабличнойЧасти,
							НСтр("ru=' значение реквизита ""тип контрагента"" не соответствует виду договора!';uk=' значення реквізиту ""тип контрагента"" не відповідає виду договору!'"));
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Префикс+"ДоговорКонтрагента", "Объект",Отказ);
			КонецЕсли;

		КонецЦикла;
		
	КонецЕсли;	
КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиСуммыДолга()

Функция ПолучитьДокументРасчетовСКонтрагентом(СтрокаЗадолженности)

	ВидыСубконто = СтрокаЗадолженности.СчетОплаты.ВидыСубконто;
	Если ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ДокументыРасчетовСКонтрагентами) = Неопределено Тогда
		Возврат Неопределено
	КонецЕсли;
	
	Контрагент = СтрокаЗадолженности.Контрагент;
	ДоговорПартии = СтрокаЗадолженности.Контрагент;
	
	
	ДатаДокументРасчетов = НачалоДня(Дата);
	ЗапросДокументРасчетовСКонтрагентом = Новый Запрос("ВЫБРАТЬ
	                                            |	ДокументРасчетов.Ссылка
												|ИЗ
	                                            |	Документ.ДокументРасчетовСКонтрагентом КАК ДокументРасчетов
	                                            |ГДЕ
	                                            |	НАЧАЛОПЕРИОДА(ДокументРасчетов.Дата,ДЕНЬ) = &ДатаОприходования
	                                            |	И (НЕ ДокументРасчетов.ПометкаУдаления)
	                                            |	И ДокументРасчетов.Организация = &Организация
	                                            |	И ДокументРасчетов.Контрагент = &Контрагент
	                                            |	И ДокументРасчетов.ДоговорКонтрагента = &ДоговорКонтрагента
												|УПОРЯДОЧИТЬ ПО
												|	ДокументРасчетов.Дата УБЫВ");
	ЗапросДокументРасчетовСКонтрагентом.УстановитьПараметр("ДатаОприходования", 	ДатаДокументРасчетов);
	ЗапросДокументРасчетовСКонтрагентом.УстановитьПараметр("Организация",			Организация);
	ЗапросДокументРасчетовСКонтрагентом.УстановитьПараметр("Контрагент",			СтрокаЗадолженности.Контрагент);
	ЗапросДокументРасчетовСКонтрагентом.УстановитьПараметр("ДоговорКонтрагента",	СтрокаЗадолженности.ДоговорКонтрагента);
	ЗапросДокументРасчетовСКонтрагентом.УстановитьПараметр("ВалютаДокумента",		мВалютаРегламентированногоУчета);
		
	Выборка = ЗапросДокументРасчетовСКонтрагентом.Выполнить().Выбрать();
	// Уже есть документ расчетов
	Если Выборка.Следующий() Тогда
		ДокументРасчетов = Выборка.Ссылка;
	Иначе // формируем
		ДокументРасчетовСКонтрагентом = Документы.ДокументРасчетовСКонтрагентом.СоздатьДокумент();
		
		ДокументРасчетовСКонтрагентом.Дата					= ДатаДокументРасчетов;
		ДокументРасчетовСКонтрагентом.Организация			= Организация;
		ДокументРасчетовСКонтрагентом.Контрагент			= СтрокаЗадолженности.Контрагент;
		ДокументРасчетовСКонтрагентом.ДоговорКонтрагента	= СтрокаЗадолженности.ДоговорКонтрагента;
		ДокументРасчетовСКонтрагентом.ВалютаДокумента		= СтрокаЗадолженности.ВалютаВзаиморасчетов;
		ДокументРасчетовСКонтрагентом.Записать();
		ДокументРасчетов = ДокументРасчетовСКонтрагентом.Ссылка;
	КонецЕсли; 	
		
	Возврат ДокументРасчетов;	

КонецФункции // ()
  
Процедура ДвиженияПоВводуНачальныхОстатковВзаиморасчетов(СтруктураШапкиДокумента, ТаблицаПоРасчетам, Отказ, Заголовок)
	
	ПроводкиБУ 			= Движения.Хозрасчетный;
	
	ОиПНДСПродаж 		= Движения.ОжидаемыйИПодтвержденныйНДСПродаж;
	ОиПНДСПриобретений 	= Движения.ОжидаемыйИПодтвержденныйНДСПриобретений;
	
	НУПродаж 			= Движения.ПродажиНалоговыйУчет;
	НУПриобретений 		= Движения.ПриобретенияНалоговыйУчет;
	
	ВидЗадолженностиДебиторская  = Перечисления.ВидыЗадолженности.Дебиторская;
	ВидЗадолженностиКредиторская = Перечисления.ВидыЗадолженности.Кредиторская;

	ВспомогательныйСчет = ПланыСчетов.Хозрасчетный.Вспомогательный;
	
	НеОблагаемыйВНД = Справочники.ВидыНалоговойДеятельности.НеОблагаемая;
	
	ДатаСторноДвижений = КонецМесяца(СтруктураШапкиДокумента.Дата)+2;
	
	Для каждого СтрокаЗадолженности Из ТаблицаПоРасчетам Цикл
		
		ДокументРасчетовВводОстатков = ПолучитьДокументРасчетовСКонтрагентом(СтрокаЗадолженности);
		
		Если СтрокаЗадолженности.ВзаиморасчетыЗакрыты Тогда
			// сфорируем только движения по ожидаемому и подтвержденному НДС
			
				// ожидаемый и подтвержденный НДС
				Если  НЕ СтрокаЗадолженности.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.Прочее 
					И      СтруктураШапкиДокумента.ЕстьНДС
					И НЕ  (СтрокаЗадолженности.ВозвратнаяТара И СтрокаЗадолженности.РасчетыВозврат = Перечисления.РасчетыВозврат.Возврат)
					И     ((СтрокаЗадолженности.ВалютаВзаиморасчетов = мВалютаРегламентированногоУчета) ИЛИ СтрокаЗадолженности.ТипКонтрагента = Перечисления.СтатусыКонтрагентов.Покупатель) Тогда
						
					   Если СтрокаЗадолженности.ТипКонтрагента 	= Перечисления.СтатусыКонтрагентов.Покупатель Тогда
							   
						   РегистрОиПНДС = ОиПНДСПродаж;
							   
						   Движение 		 = РегистрОиПНДС.Добавить();	
							   
						   КодыОпераций = Перечисления.КодыОперацийОжидаемыйИПодтвержденныйНДСПродаж;
							   
						   Если СтрокаЗадолженности.РасчетыВозврат = Перечисления.РасчетыВозврат.Расчеты Тогда
							   // расчеты
							   Движение.СобытиеНДС = Перечисления.СобытияОжидаемыйИПодтвержденныйНДСПродаж.Реализация;
						   Иначе
							   //возврат	
							   Движение.СобытиеНДС = Перечисления.СобытияОжидаемыйИПодтвержденныйНДСПродаж.Возврат;
						   КонецЕсли;
							   
					   Иначе// СтрокаЗадолженности.ТипКонтрагента 	= Перечисления.СтатусыКонтрагентов.Поставщик
							   
						   РегистрОиПНДС = ОиПНДСПриобретений;

						   Движение 			= РегистрОиПНДС.Добавить();
							   
						   КодыОпераций = Перечисления.КодыОперацийОжидаемыйИПодтвержденныйНДСПриобретений;
							   
						   Если СтрокаЗадолженности.РасчетыВозврат = Перечисления.РасчетыВозврат.Расчеты Тогда
							   // расчеты
							   Движение.СобытиеНДС = Перечисления.СобытияОжидаемыйИПодтвержденныйНДСПриобретений.Поступление;
						   Иначе
							   //возврат	
							   Движение.СобытиеНДС = Перечисления.СобытияОжидаемыйИПодтвержденныйНДСПриобретений.Возврат;
						   КонецЕсли;
							   
						   Движение.ДляХозяйственнойДеятельности = ?(СтрокаЗадолженности.ВидНалоговойДеятельности = Справочники.ВидыНалоговойДеятельности.НеОблагаемая, Ложь, Истина);
						   Движение.ВидДеятельностиНДС 			 = СтрокаЗадолженности.ВидДеятельностиНДС;
						   Движение.Амортизируется 				= СтрокаЗадолженности.Амортизируется;
							   
					   КонецЕсли;
					   
					   Движение.ВидДвижения  			= ВидДвиженияНакопления.Приход;
					   Движение.Период	 				= СтруктураШапкиДокумента.Дата;
					   Движение.Организация 		  	= СтруктураШапкиДокумента.Организация;
					   Движение.ДоговорКонтрагента 		= СтрокаЗадолженности.ДоговорКонтрагента;
	  				   Движение.Сделка				    = НалоговыйУчет.ОпределитьСделкуНалоговыйУчет(СтрокаЗадолженности, ДокументРасчетовВводОстатков, СтрокаЗадолженности.Сделка);
					   Движение.ВозвратнаяТара	  		= СтрокаЗадолженности.ВозвратнаяТара;
					   Движение.СтавкаНДС	  			= СтрокаЗадолженности.СтавкаНДС;
					   Движение.БазаНДС  				= СтрокаЗадолженности.СуммаВзаиморасчетов - СтрокаЗадолженности.СуммаНДСВал;
					   Движение.СуммаНДС    			= СтрокаЗадолженности.СуммаНДСВал;
					   Движение.КодОперации 			= КодыОпераций.ОжидаемыйНДС;						   
					   
					   // бухгалтерские проводки - НДС
					   Если  СтрокаЗадолженности.ПроводкиСуммаНДС <> 0 Тогда
						   
						   Проводка = ПроводкиБУ.Добавить();
						   Проводка.Период			= СтруктураШапкиДокумента.Дата;
						   Проводка.Организация		= СтруктураШапкиДокумента.Организация;
						   Проводка.НомерЖурнала	= "";
						   Проводка.Содержание		= НСтр("ru='Ввод начальных остатков по взаиморасчетам (НДС)';uk='Введення початкових залишків по взаєморозрахунках (ПДВ)'",Локализация.КодЯзыкаИнформационнойБазы());
						   Проводка.Сумма			= СтрокаЗадолженности.ПроводкиСуммаНДС;
						   
						   Если СтрокаЗадолженности.ТипКонтрагента = Перечисления.СтатусыКонтрагентов.Покупатель Тогда
							   // покупатель
							   Проводка.СчетДт = ВспомогательныйСчет;
							   
							   Проводка.СчетКт = СтрокаЗадолженности.СчетУчетаНДС;
							   БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Контрагенты", СтрокаЗадолженности.Контрагент);
							   БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Договоры", 	СтрокаЗадолженности.ДоговорКонтрагента);
							   БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ДокументыРасчетовСКонтрагентами", НалоговыйУчет.ОпределитьСделкуНалоговыйУчет(СтрокаЗадолженности, ДокументРасчетовВводОстатков, СтрокаЗадолженности.Сделка));
							   
						   Иначе//Если СтрокаЗадолженности.ВидЗадолженности = ВидЗадолженностиДебиторская Тогда	
							   // поставщик
							   Проводка.СчетДт = СтрокаЗадолженности.СчетУчетаНДС;
							   БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты", СтрокаЗадолженности.Контрагент);
							   БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Договоры", 	СтрокаЗадолженности.ДоговорКонтрагента);
							   БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ДокументыРасчетовСКонтрагентами", НалоговыйУчет.ОпределитьСделкуНалоговыйУчет(СтрокаЗадолженности, ДокументРасчетовВводОстатков, СтрокаЗадолженности.Сделка));
							   
							   Проводка.СчетКт 	= ВспомогательныйСчет;
							   
						   КонецЕсли;
						   
					   КонецЕсли;					   
					   
				   КонецЕсли;
				   
			   Продолжить;
	   
		   КонецЕсли;
		   
		// бухгалтерские проводки  - взаиморасчеты
		Проводка = ПроводкиБУ.Добавить();
		Проводка.Период			= СтруктураШапкиДокумента.Дата;
		Проводка.Организация	= СтруктураШапкиДокумента.Организация;
		Проводка.НомерЖурнала	= "";
		Проводка.Содержание		= НСтр("ru='Ввод начальных остатков по взаиморасчетам';uk='Введення початкових залишків по взаєморозрахунках'",Локализация.КодЯзыкаИнформационнойБазы());
		Проводка.Сумма			= СтрокаЗадолженности.Сумма;
		
		Если СтрокаЗадолженности.ВидЗадолженности = ВидЗадолженностиДебиторская Тогда
			
			Проводка.СчетДт = СтрокаЗадолженности.СчетОплаты;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты", СтрокаЗадолженности.Контрагент);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Договоры", 	СтрокаЗадолженности.ДоговорКонтрагента);
					
			НомерСубконтоРД = ПолучитьНомерСубконтоРД(СтрокаЗадолженности.СчетОплаты);
			Если не НомерСубконтоРД = 0  Тогда
				Если НЕ ЗначениеЗаполнено(СтрокаЗадолженности.Сделка) Тогда
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ДокументыРасчетовСКонтрагентами", ДокументРасчетовВводОстатков);
				Иначе
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ДокументыРасчетовСКонтрагентами", СтрокаЗадолженности.Сделка);
				КонецЕсли; 
			КонецЕсли;
			
			Если Проводка.СчетДт.Валютный Тогда
				Проводка.ВалютаДт        = СтрокаЗадолженности.ВалютаВзаиморасчетов;
				Проводка.ВалютнаяСуммаДт = СтрокаЗадолженности.СуммаВзаиморасчетов;
			КонецЕсли;			
			
			Проводка.СчетКт 	= ВспомогательныйСчет;
			
		Иначе//Если СтрокаЗадолженности.ВидЗадолженности = ВидЗадолженностиКредиторская Тогда	
			
			Проводка.СчетДт 	= ВспомогательныйСчет;
			
			Проводка.СчетКт = СтрокаЗадолженности.СчетОплаты;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Контрагенты", СтрокаЗадолженности.Контрагент);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Договоры", 	СтрокаЗадолженности.ДоговорКонтрагента);
			
			НомерСубконтоРД = ПолучитьНомерСубконтоРД(СтрокаЗадолженности.СчетОплаты);
			Если не НомерСубконтоРД = 0  Тогда
				Если НЕ ЗначениеЗаполнено(СтрокаЗадолженности.Сделка) Тогда					
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ДокументыРасчетовСКонтрагентами", ДокументРасчетовВводОстатков);
				Иначе
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ДокументыРасчетовСКонтрагентами", СтрокаЗадолженности.Сделка);
				КонецЕсли; 
			КонецЕсли;
			
			Если Проводка.СчетКт.Валютный Тогда
				Проводка.ВалютаКт        = СтрокаЗадолженности.ВалютаВзаиморасчетов;
				Проводка.ВалютнаяСуммаКт = СтрокаЗадолженности.СуммаВзаиморасчетов;
			КонецЕсли;			
			
		КонецЕсли;
		
		Если СтрокаЗадолженности.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.Прочее Тогда
			
			//налоговые регистры не заполняем
			Продолжить;
			
		КонецЕсли; 
		
		Если СтрокаЗадолженности.СложныйНалоговыйУчет Тогда
			
			// бухгалтерские проводки - НДС
			Если  СтруктураШапкиДокумента.ЕстьНДС 
				И СтрокаЗадолженности.ПроводкиСуммаНДС <> 0 Тогда
				
				Проводка = ПроводкиБУ.Добавить();
				Проводка.Период			= СтруктураШапкиДокумента.Дата;
				Проводка.Организация	= СтруктураШапкиДокумента.Организация;
				Проводка.НомерЖурнала	= "";
				Проводка.Содержание		= НСтр("ru='Ввод начальных остатков по взаиморасчетам (НДС)';uk='Введення початкових залишків по взаєморозрахунках (ПДВ)'",Локализация.КодЯзыкаИнформационнойБазы());
				Проводка.Сумма			= СтрокаЗадолженности.ПроводкиСуммаНДС;
				
				Если    ЭтоОплата(СтрокаЗадолженности)
					И НЕ СтрокаЗадолженности.МоментОпределенияБазыНДС = Перечисления.МоментыОпределенияНалоговойБазы.ПоОтгрузке Тогда
					// формируются проводки типа 00(6442) - 6441 на сумму НДС
					
					Если СтрокаЗадолженности.ВидЗадолженности = ВидЗадолженностиКредиторская Тогда
						// покупатель
						Проводка.СчетДт = СтрокаЗадолженности.СчетУчетаНДСПодтвержденный;
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты", СтрокаЗадолженности.Контрагент);
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Договоры", 	СтрокаЗадолженности.ДоговорКонтрагента);
						Если СтрокаЗадолженности.НетНалоговойНакладной Тогда
							Проводка.СчетКт = СтрокаЗадолженности.СчетУчетаНДС;
							БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Контрагенты", СтрокаЗадолженности.Контрагент);
							БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Договоры", 	СтрокаЗадолженности.ДоговорКонтрагента);
						Иначе	
							Проводка.СчетКт = ВспомогательныйСчет;	
						КонецЕсли;
						
					Иначе//Если СтрокаЗадолженности.ВидЗадолженности = ВидЗадолженностиДебиторская Тогда	
						// поставщик
						Если СтрокаЗадолженности.НетНалоговойНакладной Тогда
							Проводка.СчетДт = СтрокаЗадолженности.СчетУчетаНДС;
							БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты", СтрокаЗадолженности.Контрагент);
							БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Договоры", 	СтрокаЗадолженности.ДоговорКонтрагента);
						Иначе
							Проводка.СчетДт = ВспомогательныйСчет;
						КонецЕсли;
						
						Проводка.СчетКт 	= СтрокаЗадолженности.СчетУчетаНДСПодтвержденный;
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Контрагенты", СтрокаЗадолженности.Контрагент);
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Договоры", 	СтрокаЗадолженности.ДоговорКонтрагента);
						
					КонецЕсли;
					
				ИначеЕсли НЕ ЭтоОплата(СтрокаЗадолженности)
					И    СтрокаЗадолженности.НетНалоговойНакладной 
					И НЕ СтрокаЗадолженности.МоментОпределенияБазыНДС = Перечисления.МоментыОпределенияНалоговойБазы.ПоОплате Тогда
					// формируются проводки типа 6442 - 00 на сумму НДС
					
					Если СтрокаЗадолженности.ВидЗадолженности = ВидЗадолженностиКредиторская Тогда
						// поставщик
						Проводка.СчетДт 	= СтрокаЗадолженности.СчетУчетаНДС;
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты", СтрокаЗадолженности.Контрагент);
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Договоры", 	СтрокаЗадолженности.ДоговорКонтрагента);
						
						Проводка.СчетКт 	= ВспомогательныйСчет;
						
					Иначе//Если СтрокаЗадолженности.ВидЗадолженности = ВидЗадолженностиДебиторская Тогда	
						// покупатель
						Проводка.СчетДт 	= ВспомогательныйСчет;
						
						Проводка.СчетКт = СтрокаЗадолженности.СчетУчетаНДС;
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Контрагенты", СтрокаЗадолженности.Контрагент);
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Договоры", 	СтрокаЗадолженности.ДоговорКонтрагента);
						
					КонецЕсли;
					
				ИначеЕсли НЕ ЭтоОплата(СтрокаЗадолженности)
					И СтрокаЗадолженности.НетНалоговойНакладной 
					И СтрокаЗадолженности.МоментОпределенияБазыНДС = Перечисления.МоментыОпределенияНалоговойБазы.ПоОплате Тогда
					// формируются проводки типа 00 - 6441 на -сумму НДС (для приведения остатков к учету "по отгрузке")
					
					Если СтрокаЗадолженности.ВидЗадолженности = ВидЗадолженностиДебиторская Тогда
						// покупатель
						Проводка.СчетДт 	= СтрокаЗадолженности.СчетУчетаНДСПодтвержденный;
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты", СтрокаЗадолженности.Контрагент);
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Договоры", 	СтрокаЗадолженности.ДоговорКонтрагента);
						
						Проводка.СчетКт 	= ВспомогательныйСчет;
						
					Иначе//Если СтрокаЗадолженности.ВидЗадолженности = ВидЗадолженностиКредиторская Тогда	
						// поставщик
						Проводка.СчетДт 	= ВспомогательныйСчет;
						
						Проводка.СчетКт 	= СтрокаЗадолженности.СчетУчетаНДСПодтвержденный;
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Контрагенты", СтрокаЗадолженности.Контрагент);
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Договоры", 	СтрокаЗадолженности.ДоговорКонтрагента);
						
					КонецЕсли;
					
					Проводка.Сумма = - Проводка.Сумма;
					
				Иначе
					// в остальных случаях проводки не формируются.	   
					ПроводкиБУ.Удалить(Проводка);
					
				КонецЕсли;
				
				// сформируем проводку по регистрации авансов (отмена регистрации)
				Если  (   ЭтоОплата(СтрокаЗадолженности) И НЕ СтрокаЗадолженности.МоментОпределенияБазыНДС = Перечисления.МоментыОпределенияНалоговойБазы.ПоОтгрузке)
					ИЛИ (НЕ ЭтоОплата(СтрокаЗадолженности) И    СтрокаЗадолженности.МоментОпределенияБазыНДС = Перечисления.МоментыОпределенияНалоговойБазы.ПоОплате) Тогда
					
					// формируются проводки типа 6442 - 6441 на -сумму НДС
					Проводка = ПроводкиБУ.Добавить();
					Проводка.Период			= ДатаСторноДвижений;
					Проводка.Организация	= СтруктураШапкиДокумента.Организация;
					Проводка.НомерЖурнала	= "";
					Проводка.Содержание		= НСтр("ru='Отмена регистрации авансов (НДС)';uk='Скасування реєстрації авансів (ПДВ)'",Локализация.КодЯзыкаИнформационнойБазы());
					Проводка.Сумма			=  - СтрокаЗадолженности.ПроводкиСуммаНДС;
					
					Если (СтрокаЗадолженности.ВидЗадолженности = ВидЗадолженностиКредиторская И    ЭтоОплата(СтрокаЗадолженности)) 
						ИЛИ(СтрокаЗадолженности.ВидЗадолженности = ВидЗадолженностиДебиторская  И НЕ ЭтоОплата(СтрокаЗадолженности))	Тогда
						// покупатель
						Проводка.СчетДт 	= СтрокаЗадолженности.СчетУчетаНДСПодтвержденный;
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты", СтрокаЗадолженности.Контрагент);
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Договоры", 	СтрокаЗадолженности.ДоговорКонтрагента);
						
						Проводка.СчетКт 	= СтрокаЗадолженности.СчетУчетаНДС;
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Контрагенты", СтрокаЗадолженности.Контрагент);
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Договоры", 	СтрокаЗадолженности.ДоговорКонтрагента);
						
					Иначе//Если СтрокаЗадолженности.ВидЗадолженности = ВидЗадолженностиДебиторская Тогда	
						// поставщик
						Проводка.СчетДт 	= СтрокаЗадолженности.СчетУчетаНДС;
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты", СтрокаЗадолженности.Контрагент);
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Договоры", 	СтрокаЗадолженности.ДоговорКонтрагента);
						
						Проводка.СчетКт 	= СтрокаЗадолженности.СчетУчетаНДСПодтвержденный;
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Контрагенты", СтрокаЗадолженности.Контрагент);
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Договоры", 	СтрокаЗадолженности.ДоговорКонтрагента);
						
					КонецЕсли;
					
					Если НЕ ЭтоОплата(СтрокаЗадолженности) Тогда
						// долг по отгрузке при методе определения базы - по оплате
						Проводка.Сумма =  - Проводка.Сумма;
					КонецЕсли; 
					
				КонецЕсли;
				
			КонецЕсли; 
				
			// Налоговый учет (продаж/приобретений)
			Если  СтруктураШапкиДокумента.ЕстьНДС Тогда
				
				Если СтрокаЗадолженности.ТипКонтрагента 	= Перечисления.СтатусыКонтрагентов.Покупатель Тогда
					
					Движение = НУПродаж.Добавить();
					
					Если ЭтоОплата(СтрокаЗадолженности) Тогда
						// оплата
						Если СтрокаЗадолженности.РасчетыВозврат = Перечисления.РасчетыВозврат.Расчеты Тогда
							// расчеты
							Движение.Событие = Перечисления.СобытияПродажиНалоговыйУчет.ОплатаПокупателем;
						Иначе
							//возврат	
							Движение.Событие = Перечисления.СобытияПродажиНалоговыйУчет.ВозвратОплатыПокупателю;
						КонецЕсли;
					Иначе
						//отгрузка
						Если СтрокаЗадолженности.РасчетыВозврат = Перечисления.РасчетыВозврат.Расчеты Тогда
							// расчеты
							Движение.Событие = Перечисления.СобытияПродажиНалоговыйУчет.РеализацияПокупателю;
						Иначе
							//возврат	
							Движение.Событие = Перечисления.СобытияПродажиНалоговыйУчет.ВозвратОтПокупателя;
						КонецЕсли;
					КонецЕсли; 
					
				Иначе// СтрокаЗадолженности.ТипКонтрагента 	= Перечисления.СтатусыКонтрагентов.Поставщик
					
					Движение = НУПриобретений.Добавить();
					
					Если ЭтоОплата(СтрокаЗадолженности) Тогда
						// оплата
						Если СтрокаЗадолженности.РасчетыВозврат = Перечисления.РасчетыВозврат.Расчеты Тогда
							// расчеты
							Движение.Событие = Перечисления.СобытияПриобретенияНалоговыйУчет.ОплатаПоставщику;
						Иначе
							//возврат	
							Движение.Событие = Перечисления.СобытияПриобретенияНалоговыйУчет.ВозвратОплатыПоставщиком;
						КонецЕсли;
					Иначе
						//отгрузка
						Если СтрокаЗадолженности.РасчетыВозврат = Перечисления.РасчетыВозврат.Расчеты Тогда
							// расчеты
							Движение.Событие = Перечисления.СобытияПриобретенияНалоговыйУчет.ПоступлениеОтПоставщика;
						Иначе
							//возврат	
							Движение.Событие = Перечисления.СобытияПриобретенияНалоговыйУчет.ВозвратПоставщику;
						КонецЕсли;
					КонецЕсли; 
					
				КонецЕсли; 
				
				Движение.Период	 		  		= СтруктураШапкиДокумента.Дата;
				Движение.Организация 		  		= СтруктураШапкиДокумента.Организация;
				Движение.ДоговорКонтрагента 		= СтрокаЗадолженности.ДоговорКонтрагента;
				Движение.ВозвратнаяТара	  		= СтрокаЗадолженности.ВозвратнаяТара;
				Движение.СуммаВзаиморасчетов  	= СтрокаЗадолженности.СуммаВзаиморасчетов;
				
			КонецЕсли;			
			
			// ожидаемый и подтвержденный НДС
			Если  СтруктураШапкиДокумента.ЕстьНДС
				// по возвратам тары в регистарах ожидаемого и подтвержденного НДС учет не ведется
				И НЕ  (СтрокаЗадолженности.ВозвратнаяТара И СтрокаЗадолженности.РасчетыВозврат = Перечисления.РасчетыВозврат.Возврат)
				И     ((СтрокаЗадолженности.ВалютаВзаиморасчетов = мВалютаРегламентированногоУчета) ИЛИ СтрокаЗадолженности.ТипКонтрагента = Перечисления.СтатусыКонтрагентов.Покупатель) Тогда
				
				Если СтрокаЗадолженности.ТипКонтрагента 	= Перечисления.СтатусыКонтрагентов.Покупатель Тогда
					
					РегистрОиПНДС = ОиПНДСПродаж;
					
					Движение 		 = РегистрОиПНДС.Добавить();	
					ДвижениеВыпискаНН = РегистрОиПНДС.Добавить();
					ДвижениеСторно    = РегистрОиПНДС.Добавить();
					
					КодыОпераций = Перечисления.КодыОперацийОжидаемыйИПодтвержденныйНДСПродаж;
					
					Если СтрокаЗадолженности.РасчетыВозврат = Перечисления.РасчетыВозврат.Расчеты Тогда
						// расчеты
						Движение.СобытиеНДС = Перечисления.СобытияОжидаемыйИПодтвержденныйНДСПродаж.Реализация;
					Иначе
						//возврат	
						Движение.СобытиеНДС = Перечисления.СобытияОжидаемыйИПодтвержденныйНДСПродаж.Возврат;
					КонецЕсли;
					
				Иначе// СтрокаЗадолженности.ТипКонтрагента 	= Перечисления.СтатусыКонтрагентов.Поставщик
					
					РегистрОиПНДС = ОиПНДСПриобретений;
					
					Движение 			= РегистрОиПНДС.Добавить();
					ДвижениеВыпискаНН 	= РегистрОиПНДС.Добавить();
					ДвижениеСторно 		= РегистрОиПНДС.Добавить();
					
					КодыОпераций = Перечисления.КодыОперацийОжидаемыйИПодтвержденныйНДСПриобретений;
					
					Если СтрокаЗадолженности.РасчетыВозврат = Перечисления.РасчетыВозврат.Расчеты Тогда
						// расчеты
						Движение.СобытиеНДС = Перечисления.СобытияОжидаемыйИПодтвержденныйНДСПриобретений.Поступление;
					Иначе
						//возврат	
						Движение.СобытиеНДС = Перечисления.СобытияОжидаемыйИПодтвержденныйНДСПриобретений.Возврат;
					КонецЕсли;
					
					Движение.ДляХозяйственнойДеятельности = ?(СтрокаЗадолженности.ВидНалоговойДеятельности = Справочники.ВидыНалоговойДеятельности.НеОблагаемая, Ложь, Истина);
					Движение.ВидДеятельностиНДС 			 = СтрокаЗадолженности.ВидДеятельностиНДС;
					Движение.Амортизируется	 			 = СтрокаЗадолженности.Амортизируется;
					
				КонецЕсли;
				
				Если (НЕ ЭтоОплата(СтрокаЗадолженности) 
					И СтрокаЗадолженности.МоментОпределенияБазыНДС = Перечисления.МоментыОпределенияНалоговойБазы.ПоОплате
					И СтрокаЗадолженности.НетНалоговойНакладной) Тогда
					Движение.Период		  	= ДатаСторноДвижений;
					Движение.КодОперации 	= КодыОпераций.ОтменаРегистрацииАвансов;
				Иначе	
					Движение.Период	 = СтруктураШапкиДокумента.Дата;
					Если ЭтоОплата(СтрокаЗадолженности) Тогда
						Движение.КодОперации = КодыОпераций.РегистрацияАвансов;
					Иначе	
						Движение.КодОперации = КодыОпераций.ОжидаемыйНДС;
					КонецЕсли;
				КонецЕсли;
				Движение.ВидДвижения  			= ВидДвиженияНакопления.Приход;
				Движение.Организация 		  	= СтруктураШапкиДокумента.Организация;
				Движение.ДоговорКонтрагента 		= СтрокаЗадолженности.ДоговорКонтрагента;
				Движение.ВозвратнаяТара	  		= СтрокаЗадолженности.ВозвратнаяТара;
				Движение.СтавкаНДС	  			= СтрокаЗадолженности.СтавкаНДС;
				Движение.БазаНДС  				= СтрокаЗадолженности.СуммаВзаиморасчетов - СтрокаЗадолженности.СуммаНДСВал;
				Движение.СуммаНДС    			= СтрокаЗадолженности.СуммаНДСВал;

				Если НЕ СтрокаЗадолженности.НетНалоговойНакладной Тогда
					
					// сформируем движение по выписке налоговой
					ЗаполнитьЗначенияСвойств(ДвижениеВыпискаНН,Движение,,"НомерСтроки");					   
					ДвижениеВыпискаНН.ВидДвижения = ВидДвиженияНакопления.Расход;
					ДвижениеВыпискаНН.КодОперации = КодыОпераций.ПодтвержденныйНДС;
					
				КонецЕсли;
				
				Если ЭтоОплата(СтрокаЗадолженности) Тогда
					
					// добавим движения по регистрации авансов (отмена регистрации):
					// сторно на начало следующего месяца
					ЗаполнитьЗначенияСвойств(ДвижениеСторно,Движение,,"НомерСтроки");
					
					ДвижениеСторно.СуммаНДС    = -ДвижениеСторно.СуммаНДС;
					ДвижениеСторно.БазаНДС     = -ДвижениеСторно.БазаНДС;
					ДвижениеСторно.Период      = ДатаСторноДвижений;
					ДвижениеСторно.КодОперации = КодыОпераций.ОтменаРегистрацииАвансов;
					
				КонецЕсли; 
				
				// оставим только те движения, которые имеют смысл:
				Если НЕ ЭтоОплата(СтрокаЗадолженности) ИЛИ СтрокаЗадолженности.МоментОпределенияБазыНДС = Перечисления.МоментыОпределенияНалоговойБазы.ПоОтгрузке Тогда
					
					РегистрОиПНДС.Удалить(ДвижениеСторно);
					
				КонецЕсли;
				
				Если  (   ЭтоОплата(СтрокаЗадолженности) И СтрокаЗадолженности.МоментОпределенияБазыНДС = Перечисления.МоментыОпределенияНалоговойБазы.ПоОтгрузке)
					ИЛИ (НЕ ЭтоОплата(СтрокаЗадолженности) И СтрокаЗадолженности.МоментОпределенияБазыНДС = Перечисления.МоментыОпределенияНалоговойБазы.ПоОплате) Тогда
					
					УдалятьДвижение = Истина;
					Если (НЕ ЭтоОплата(СтрокаЗадолженности) 
						И СтрокаЗадолженности.МоментОпределенияБазыНДС = Перечисления.МоментыОпределенияНалоговойБазы.ПоОплате
						И СтрокаЗадолженности.НетНалоговойНакладной) Тогда
						УдалятьДвижение = Ложь;	
					КонецЕсли;
					
					Если УдалятьДвижение Тогда
						РегистрОиПНДС.Удалить(Движение);
					КонецЕсли;
					
					РегистрОиПНДС.Удалить(ДвижениеВыпискаНН);
					
				ИначеЕсли СтрокаЗадолженности.НетНалоговойНакладной Тогда
					
					РегистрОиПНДС.Удалить(ДвижениеВыпискаНН);
					
				КонецЕсли;
				
			КонецЕсли; 
			
		Иначе // упрощенный налоговый учет
			
			// бухгалтерские проводки - НДС
			Если  СтруктураШапкиДокумента.ЕстьНДС 
				И СтрокаЗадолженности.ПроводкиСуммаНДС <> 0 Тогда
				
				Проводка = ПроводкиБУ.Добавить();
				Проводка.Период			= СтруктураШапкиДокумента.Дата;
				Проводка.Организация	= СтруктураШапкиДокумента.Организация;
				Проводка.НомерЖурнала	= "";
				Проводка.Содержание		= НСтр("ru='Ввод начальных остатков по взаиморасчетам (НДС)';uk='Введення початкових залишків по взаєморозрахунках (ПДВ)'",Локализация.КодЯзыкаИнформационнойБазы());
				Проводка.Сумма			= СтрокаЗадолженности.ПроводкиСуммаНДС;
				
				Если    ЭтоОплата(СтрокаЗадолженности)
					И НЕ СтрокаЗадолженности.МоментОпределенияБазыНДС = Перечисления.МоментыОпределенияНалоговойБазы.ПоОтгрузке Тогда
					// формируются проводки типа 00(6442) - 6441 на сумму НДС
					
					Если СтрокаЗадолженности.ВидЗадолженности = ВидЗадолженностиКредиторская Тогда
						// покупатель
						Проводка.СчетДт = СтрокаЗадолженности.СчетУчетаНДСПодтвержденный;
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты", СтрокаЗадолженности.Контрагент);
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Договоры", 	СтрокаЗадолженности.ДоговорКонтрагента);
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ДокументыРасчетовСКонтрагентами", НалоговыйУчет.ОпределитьСделкуНалоговыйУчет(СтрокаЗадолженности, ?(ЗначениеЗаполнено(СтрокаЗадолженности.Сделка), СтрокаЗадолженности.Сделка, ДокументРасчетовВводОстатков), СтрокаЗадолженности.Сделка));
						
						Если СтрокаЗадолженности.НетНалоговойНакладной Тогда
							Проводка.СчетКт = СтрокаЗадолженности.СчетУчетаНДС;
							БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Контрагенты", СтрокаЗадолженности.Контрагент);
							БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Договоры", 	СтрокаЗадолженности.ДоговорКонтрагента);
							БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ДокументыРасчетовСКонтрагентами", НалоговыйУчет.ОпределитьСделкуНалоговыйУчет(СтрокаЗадолженности, ?(ЗначениеЗаполнено(СтрокаЗадолженности.Сделка), СтрокаЗадолженности.Сделка, ДокументРасчетовВводОстатков), СтрокаЗадолженности.Сделка));
						Иначе	
							Проводка.СчетКт = ВспомогательныйСчет;	
						КонецЕсли;
						
					Иначе//Если СтрокаЗадолженности.ВидЗадолженности = ВидЗадолженностиДебиторская Тогда	
						// поставщик
						Если СтрокаЗадолженности.НетНалоговойНакладной Тогда
							Проводка.СчетДт = СтрокаЗадолженности.СчетУчетаНДС;
							БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты", СтрокаЗадолженности.Контрагент);
							БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Договоры", 	СтрокаЗадолженности.ДоговорКонтрагента);
							БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ДокументыРасчетовСКонтрагентами", НалоговыйУчет.ОпределитьСделкуНалоговыйУчет(СтрокаЗадолженности, ?(ЗначениеЗаполнено(СтрокаЗадолженности.Сделка), СтрокаЗадолженности.Сделка, ДокументРасчетовВводОстатков), СтрокаЗадолженности.Сделка));
						Иначе
							Проводка.СчетДт = ВспомогательныйСчет;
						КонецЕсли;
						
						Проводка.СчетКт 	= СтрокаЗадолженности.СчетУчетаНДСПодтвержденный;
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Контрагенты", СтрокаЗадолженности.Контрагент);
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Договоры", 	СтрокаЗадолженности.ДоговорКонтрагента);
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ДокументыРасчетовСКонтрагентами", НалоговыйУчет.ОпределитьСделкуНалоговыйУчет(СтрокаЗадолженности, ?(ЗначениеЗаполнено(СтрокаЗадолженности.Сделка), СтрокаЗадолженности.Сделка, ДокументРасчетовВводОстатков), СтрокаЗадолженности.Сделка));								
						
					КонецЕсли;
					
				ИначеЕсли НЕ ЭтоОплата(СтрокаЗадолженности)
					И    СтрокаЗадолженности.НетНалоговойНакладной 
					И НЕ СтрокаЗадолженности.МоментОпределенияБазыНДС = Перечисления.МоментыОпределенияНалоговойБазы.ПоОплате Тогда
					
					// формируются проводки типа 6442 - 00 на сумму НДС
					
					Если СтрокаЗадолженности.ВидЗадолженности = ВидЗадолженностиКредиторская Тогда
						// поставщик
						Проводка.СчетДт 	= СтрокаЗадолженности.СчетУчетаНДС;
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты", СтрокаЗадолженности.Контрагент);
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Договоры", 	СтрокаЗадолженности.ДоговорКонтрагента);
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ДокументыРасчетовСКонтрагентами", НалоговыйУчет.ОпределитьСделкуНалоговыйУчет(СтрокаЗадолженности, ?(ЗначениеЗаполнено(СтрокаЗадолженности.Сделка), СтрокаЗадолженности.Сделка, ДокументРасчетовВводОстатков), СтрокаЗадолженности.Сделка));								
						
						Проводка.СчетКт 	= ВспомогательныйСчет;
						
					Иначе//Если СтрокаЗадолженности.ВидЗадолженности = ВидЗадолженностиДебиторская Тогда	
						// покупатель
						Проводка.СчетДт 	= ВспомогательныйСчет;
						
						Проводка.СчетКт = СтрокаЗадолженности.СчетУчетаНДС;
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Контрагенты", СтрокаЗадолженности.Контрагент);
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Договоры", 	СтрокаЗадолженности.ДоговорКонтрагента);							
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ДокументыРасчетовСКонтрагентами", НалоговыйУчет.ОпределитьСделкуНалоговыйУчет(СтрокаЗадолженности, ?(ЗначениеЗаполнено(СтрокаЗадолженности.Сделка), СтрокаЗадолженности.Сделка, ДокументРасчетовВводОстатков), СтрокаЗадолженности.Сделка));								
						
					КонецЕсли;
					
				ИначеЕсли НЕ ЭтоОплата(СтрокаЗадолженности)
					И СтрокаЗадолженности.НетНалоговойНакладной 
					И СтрокаЗадолженности.МоментОпределенияБазыНДС = Перечисления.МоментыОпределенияНалоговойБазы.ПоОплате Тогда
					// формируются проводки типа 6441 - 00 на сумму НДС 
					
					Если СтрокаЗадолженности.ВидЗадолженности = ВидЗадолженностиКредиторская Тогда
						// поставщик
						Проводка.СчетДт 	= СтрокаЗадолженности.СчетУчетаНДСПодтвержденный;
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты", СтрокаЗадолженности.Контрагент);
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Договоры", 	СтрокаЗадолженности.ДоговорКонтрагента);
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ДокументыРасчетовСКонтрагентами", НалоговыйУчет.ОпределитьСделкуНалоговыйУчет(СтрокаЗадолженности, ?(ЗначениеЗаполнено(СтрокаЗадолженности.Сделка), СтрокаЗадолженности.Сделка, ДокументРасчетовВводОстатков), СтрокаЗадолженности.Сделка));
						
						Проводка.СчетКт 	= ВспомогательныйСчет;
						
					Иначе//Если СтрокаЗадолженности.ВидЗадолженности = ВидЗадолженностиДебиторская  Тогда	
						// покупатель
						Проводка.СчетДт 	= ВспомогательныйСчет;
						
						Проводка.СчетКт 	= СтрокаЗадолженности.СчетУчетаНДСПодтвержденный;
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Контрагенты", СтрокаЗадолженности.Контрагент);
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Договоры", 	СтрокаЗадолженности.ДоговорКонтрагента);
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ДокументыРасчетовСКонтрагентами", НалоговыйУчет.ОпределитьСделкуНалоговыйУчет(СтрокаЗадолженности, ?(ЗначениеЗаполнено(СтрокаЗадолженности.Сделка), СтрокаЗадолженности.Сделка, ДокументРасчетовВводОстатков), СтрокаЗадолженности.Сделка));
						
					КонецЕсли;
					
				Иначе
					// в остальных случаях проводки не формируются.	   
					ПроводкиБУ.Удалить(Проводка);
					
				КонецЕсли;
				
			КонецЕсли; 
			
			// Налоговый учет (продаж/приобретений)
			Если  СтруктураШапкиДокумента.ЕстьНДС Тогда
				
				Если СтрокаЗадолженности.ТипКонтрагента 	= Перечисления.СтатусыКонтрагентов.Покупатель Тогда
					
					Движение = НУПродаж.Добавить();
					
					Если ЭтоОплата(СтрокаЗадолженности) Тогда
						// оплата
						Если СтрокаЗадолженности.РасчетыВозврат = Перечисления.РасчетыВозврат.Расчеты Тогда
							// расчеты
							Движение.Событие = Перечисления.СобытияПродажиНалоговыйУчет.ОплатаПокупателем;
						Иначе
							//возврат	
							Движение.Событие = Перечисления.СобытияПродажиНалоговыйУчет.ВозвратОплатыПокупателю;
						КонецЕсли;
					Иначе
						//отгрузка
						Если СтрокаЗадолженности.РасчетыВозврат = Перечисления.РасчетыВозврат.Расчеты Тогда
							// расчеты
							Движение.Событие = Перечисления.СобытияПродажиНалоговыйУчет.РеализацияПокупателю;
						Иначе
							//возврат	
							Движение.Событие = Перечисления.СобытияПродажиНалоговыйУчет.ВозвратОтПокупателя;
						КонецЕсли;
					КонецЕсли; 
					
					
				Иначе// СтрокаЗадолженности.ТипКонтрагента 	= Перечисления.СтатусыКонтрагентов.Поставщик
					
					Движение = НУПриобретений.Добавить();
					
					Если ЭтоОплата(СтрокаЗадолженности) Тогда
						// оплата
						Если СтрокаЗадолженности.РасчетыВозврат = Перечисления.РасчетыВозврат.Расчеты Тогда
							// расчеты
							Движение.Событие = Перечисления.СобытияПриобретенияНалоговыйУчет.ОплатаПоставщику;
						Иначе
							//возврат	
							Движение.Событие = Перечисления.СобытияПриобретенияНалоговыйУчет.ВозвратОплатыПоставщиком;
						КонецЕсли;
					Иначе
						//отгрузка
						Если СтрокаЗадолженности.РасчетыВозврат = Перечисления.РасчетыВозврат.Расчеты Тогда
							// расчеты
							Движение.Событие = Перечисления.СобытияПриобретенияНалоговыйУчет.ПоступлениеОтПоставщика;
						Иначе
							//возврат	
							Движение.Событие = Перечисления.СобытияПриобретенияНалоговыйУчет.ВозвратПоставщику;
						КонецЕсли;
					КонецЕсли; 
					
					Движение.ДляХозяйственнойДеятельности = ?(СтрокаЗадолженности.ВидНалоговойДеятельности = Справочники.ВидыНалоговойДеятельности.НеОблагаемая, Ложь, Истина);
					Движение.ВидДеятельностиНДС 			= СтрокаЗадолженности.ВидДеятельностиНДС;
					Движение.Амортизируется 				= СтрокаЗадолженности.Амортизируется;
					
				КонецЕсли; 
				
				Движение.Период	 		  		= СтруктураШапкиДокумента.Дата;
				Движение.Организация 		  		= СтруктураШапкиДокумента.Организация;
				Движение.ДоговорКонтрагента 		= СтрокаЗадолженности.ДоговорКонтрагента;
				Движение.Сделка				    = НалоговыйУчет.ОпределитьСделкуНалоговыйУчет(СтрокаЗадолженности, ?(ЗначениеЗаполнено(СтрокаЗадолженности.Сделка), СтрокаЗадолженности.Сделка, ДокументРасчетовВводОстатков), СтрокаЗадолженности.Сделка);
				Движение.СтавкаНДС	  			= СтрокаЗадолженности.СтавкаНДС;
				Движение.ВозвратнаяТара	  		= СтрокаЗадолженности.ВозвратнаяТара;
				
				Движение.СуммаВзаиморасчетов  	= СтрокаЗадолженности.СуммаВзаиморасчетов;
			  	Движение.СуммаНДС	  			= СтрокаЗадолженности.СуммаНДСВал;
				
			КонецЕсли;			
			
			// ожидаемый и подтвержденный НДС
			Если  СтруктураШапкиДокумента.ЕстьНДС
				// по возвратам тары в регистарах ожидаемого и подтвержденного НДС учет не ведется
				И НЕ  (СтрокаЗадолженности.ВозвратнаяТара И СтрокаЗадолженности.РасчетыВозврат = Перечисления.РасчетыВозврат.Возврат)
				И     ((СтрокаЗадолженности.ВалютаВзаиморасчетов = мВалютаРегламентированногоУчета) ИЛИ СтрокаЗадолженности.ТипКонтрагента = Перечисления.СтатусыКонтрагентов.Покупатель) Тогда
				
				Если СтрокаЗадолженности.ТипКонтрагента 	= Перечисления.СтатусыКонтрагентов.Покупатель Тогда
					
					РегистрОиПНДС = ОиПНДСПродаж;
					
					Движение 		 = РегистрОиПНДС.Добавить();	
					ДвижениеВыпискаНН = РегистрОиПНДС.Добавить();
					
					КодыОпераций = Перечисления.КодыОперацийОжидаемыйИПодтвержденныйНДСПродаж;
					
					Если СтрокаЗадолженности.РасчетыВозврат = Перечисления.РасчетыВозврат.Расчеты Тогда
						// расчеты
						Движение.СобытиеНДС = Перечисления.СобытияОжидаемыйИПодтвержденныйНДСПродаж.Реализация;
					Иначе
						//возврат	
						Движение.СобытиеНДС = Перечисления.СобытияОжидаемыйИПодтвержденныйНДСПродаж.Возврат;
					КонецЕсли;
					
				Иначе// СтрокаЗадолженности.ТипКонтрагента 	= Перечисления.СтатусыКонтрагентов.Поставщик
					
					РегистрОиПНДС = ОиПНДСПриобретений;
					
					Движение 			= РегистрОиПНДС.Добавить();
					ДвижениеВыпискаНН 	= РегистрОиПНДС.Добавить();
					
					КодыОпераций = Перечисления.КодыОперацийОжидаемыйИПодтвержденныйНДСПриобретений;
					
					Если СтрокаЗадолженности.РасчетыВозврат = Перечисления.РасчетыВозврат.Расчеты Тогда
						// расчеты
						Движение.СобытиеНДС = Перечисления.СобытияОжидаемыйИПодтвержденныйНДСПриобретений.Поступление;
					Иначе
						//возврат	
						Движение.СобытиеНДС = Перечисления.СобытияОжидаемыйИПодтвержденныйНДСПриобретений.Возврат;
					КонецЕсли;
					
					Движение.ДляХозяйственнойДеятельности = ?(СтрокаЗадолженности.ВидНалоговойДеятельности = Справочники.ВидыНалоговойДеятельности.НеОблагаемая, Ложь, Истина);
					Движение.ВидДеятельностиНДС 			 = СтрокаЗадолженности.ВидДеятельностиНДС;
					Движение.Амортизируется 			 	 = СтрокаЗадолженности.Амортизируется;
					
				КонецЕсли;
				
				Движение.ВидДвижения  			= ВидДвиженияНакопления.Приход;
				Движение.Период	 				= СтруктураШапкиДокумента.Дата;
				Движение.Организация 		  	= СтруктураШапкиДокумента.Организация;
				Движение.ДоговорКонтрагента 	= СтрокаЗадолженности.ДоговорКонтрагента;
				Движение.Сделка				    = НалоговыйУчет.ОпределитьСделкуНалоговыйУчет(СтрокаЗадолженности, ?(ЗначениеЗаполнено(СтрокаЗадолженности.Сделка), СтрокаЗадолженности.Сделка, ДокументРасчетовВводОстатков), СтрокаЗадолженности.Сделка);
				Движение.ВозвратнаяТара	  		= СтрокаЗадолженности.ВозвратнаяТара;
				Движение.СтавкаНДС	  			= СтрокаЗадолженности.СтавкаНДС;
				Движение.БазаНДС  				= СтрокаЗадолженности.СуммаВзаиморасчетов - СтрокаЗадолженности.СуммаНДСВал;
				Движение.СуммаНДС    			= СтрокаЗадолженности.СуммаНДСВал;
				Движение.КодОперации 			= КодыОпераций.ОжидаемыйНДС;
				
				Если НЕ СтрокаЗадолженности.НетНалоговойНакладной Тогда
					
					// сформируем движение по выписке налоговой
					ЗаполнитьЗначенияСвойств(ДвижениеВыпискаНН,Движение,,"НомерСтроки");					   
					ДвижениеВыпискаНН.ВидДвижения = ВидДвиженияНакопления.Расход;
					ДвижениеВыпискаНН.КодОперации = КодыОпераций.ПодтвержденныйНДС;
					
				КонецЕсли;
				
				// оставим только те движения, которые имеют смысл:
				
				Если  (   ЭтоОплата(СтрокаЗадолженности) И СтрокаЗадолженности.МоментОпределенияБазыНДС = Перечисления.МоментыОпределенияНалоговойБазы.ПоОтгрузке)
					ИЛИ (НЕ ЭтоОплата(СтрокаЗадолженности) И СтрокаЗадолженности.МоментОпределенияБазыНДС = Перечисления.МоментыОпределенияНалоговойБазы.ПоОплате) Тогда
					
					РегистрОиПНДС.Удалить(Движение);
					РегистрОиПНДС.Удалить(ДвижениеВыпискаНН);
					
				ИначеЕсли СтрокаЗадолженности.НетНалоговойНакладной Тогда
					
					РегистрОиПНДС.Удалить(ДвижениеВыпискаНН);
					
				КонецЕсли;
				
			КонецЕсли; 
			
		КонецЕсли;

	КонецЦикла;
	
КонецПроцедуры

// Функция используется при вводе остатков взаиморасчетов. Определяет является ли долг - долгом, сформированным
// оплатой контрагента
//
Функция ЭтоОплата(ДанныеПоЗадолженности)

	ЗнакПокупатель 	= ?(ДанныеПоЗадолженности.ТипКонтрагента 	= Перечисления.СтатусыКонтрагентов.Покупатель, 1, -1);
	ЗнакРасчеты		= ?(ДанныеПоЗадолженности.РасчетыВозврат 	= Перечисления.РасчетыВозврат.Расчеты,		   1, -1);
	ЗнакДебет	    = ?(ДанныеПоЗадолженности.ВидЗадолженности	= Перечисления.ВидыЗадолженности.Дебиторская,  1, -1);

	ЗнакОтгрузки = ЗнакПокупатель * ЗнакРасчеты * ЗнакДебет;
	
	Если ЗнакОтгрузки = 1 Тогда
	
		Возврат Ложь;	
		
	Иначе
		
		Возврат Истина;	
		
	КонецЕсли;
	
КонецФункции 

//Функция для получения номера субконто "Расчетные документы" по счету учета
//
// Параметры
//  Счет         - счет по которому определяетс номер субконто "Документы расчетов с контрагентами"
// Возвращаемое значение:
//   Число   – номер субконто "Документы расчетов с контрагентами" на счете. Если субконто нет - возвращается 0.
//
Функция ПолучитьНомерСубконтоРД(Счет)
    Если НомераСубконтоРДпоСчету = Неопределено Тогда
	    НомераСубконтоРДпоСчету = Новый Соответствие();
	КонецЕсли; 
	
	НомерСубконтоРД = НомераСубконтоРДпоСчету[Счет];
	
	Если  НомерСубконтоРД = Неопределено Тогда
		НомерСубконтоРД = 0;
		
		// Определим начичие субконто "Документы расчетов с контрагентами" по счету учета.
		ВидыСубконто = Счет.ВидыСубконто;
		СтрокаСубконтоРД = ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ДокументыРасчетовСКонтрагентами,"ВидСубконто");
		Если не СтрокаСубконтоРД = Неопределено Тогда
			НомераСубконтоРДпоСчету.Вставить(Счет, СтрокаСубконтоРД.НомерСтроки);
			НомерСубконтоРД = СтрокаСубконтоРД.НомерСтроки;
		КонецЕсли; 
		
	КонецЕсли; 
	
	Возврат НомерСубконтоРД;

КонецФункции // ПолучитьНомерСубконтоРД()


//*****************************************************************************************************************************
// ОСНОВНЫЕ СРЕДСТВА

Процедура ОбработкаПроведения_ОсновныеСредства(Отказ)
	
	
КонецПроцедуры // ОбработкаПроведения()

Процедура ОбработкаПроверкиЗаполнения_ОсновныеСредства(Отказ, МассивНепроверяемыхРеквизитов)
	
	// Проверим правильность заполнения табличной части документа
	ПроверитьЗаполнениеТабЧасти(ЭтотОбъект, СтруктураШапкиДокумента, Отказ, Заголовок, МассивНепроверяемыхРеквизитов);
	
	УправлениеВнеоборотнымиАктивами.ПроверитьОтсутствиеДублейВТабличнойЧасти(ЭтотОбъект, "ОС", Новый Структура("ОсновноеСредство"), Отказ);
	
	Если НЕ ВводитьОСВременнаяНалоговаяРазница Тогда
		МассивНепроверяемыхРеквизитов.Добавить("ОсновноеСредствоВременнаяНалоговаяРазница");
		МассивНепроверяемыхРеквизитов.Добавить("СтоимостьНУВременнаяНалоговаяРазница");
		МассивНепроверяемыхРеквизитов.Добавить("СрокИспользованияВременнаяНалоговаяРазница");
	КонецЕсли;	
	
	
КонецПроцедуры // ОбработкаПроверкиЗаполнения_ОсновныеСредства()


// Процедура проверяет корректность заполнения реквизитов таб. части документа
//
Процедура ПроверитьЗаполнениеТабЧасти(ЭтотОбъект, СтруктураШапкиДокумента, Отказ, Заголовок,МассивНепроверяемыхРеквизитов);


	БухУчет    = Истина;
	НалУчет    = СтруктураШапкиДокумента.ЕстьНалогНаПрибыль;
	НалУчетОбщ = (СтруктураШапкиДокумента.ЕстьНалогНаПрибыль ИЛИ СтруктураШапкиДокумента.ЕстьНДС);
	
	РеквизитыВысокойВажности = "ИнвентарныйНомерРегл,СчетУчетаБУ";

	МетаданныеРеквизиты = ЭтотОбъект.Метаданные().ТабличныеЧасти.ОС.Реквизиты;

	Для Каждого СтрокаТЧ Из ЭтотОбъект.ОС Цикл

		ПроверкаПоСтроке(ЭтотОбъект, СтрокаТЧ, РеквизитыВысокойВажности, БухУчет, НалУчет, НалУчетОбщ, Отказ,Заголовок,МетаданныеРеквизиты);

	КонецЦикла;

КонецПроцедуры // ПроверитьЗаполнениеТабЧасти()

//Проверка заполнения реквизитов
Функция ПроверкаПоСтроке(ЭтотОбъект, СтрокаОС,БезусловныеРеквизиты, БухУчет, НалУчет, НалУчетОбщ, Отказ, Заголовок,МетаданныеРеквизиты)
	
	РеквизитыДляПроверки = Документы.ВводНачальныхОстатков.ПолучитьРеквизитыОСДляПроверки(Дата, СтрокаОС,БезусловныеРеквизиты, НалУчет, НалУчетОбщ);
	
	// Цикл по проверяемым полям
	Для каждого КлючЗначение Из РеквизитыДляПроверки Цикл
		Значение = СтрокаОС[КлючЗначение.Ключ];
		Если НЕ ЗначениеЗаполнено(Значение) Тогда // 
			ПредставлениеРеквизита = МетаданныеРеквизиты[КлючЗначение.Ключ].Представление();
			ВидУчета = ""; 
			Если Прав(КлючЗначение.Ключ,2) = "БУ" тогда
				ВидУчета = НСтр("ru='(БУ) ';uk='(БО) '");
			ИначеЕсли Прав(КлючЗначение.Ключ,2) = "НУ" тогда
				ВидУчета = НСтр("ru='(НУ) ';uk='(ПО) '");
			КонецЕсли;
			СтрокаСообщения = ВидУчета+ НСтр("ru='не заполнено значение реквизита ""';uk='не заповнене значення реквізиту ""'") + СокрЛП(ПредставлениеРеквизита) + """!";
			
			Если КлючЗначение.Ключ = "СобытиеВводВЭксплуатациюРегл"
			 ИЛИ КлючЗначение.Ключ = "СчетУчетаБУ"
			 ИЛИ КлючЗначение.Ключ = "СчетАмортизацииБУ" Тогда
				Отказ = Истина;
				Сообщить(НСтр("ru='Документ не может быть проведен!';uk='Документ не може бути проведений!'"), СтатусСообщения.БезСтатуса);
			КонецЕсли;

			ОшибкаПроведенияПоСтроке(СтрокаОС, СтрокаСообщения,Заголовок,КлючЗначение.Значение);
		КонецЕсли;

	КонецЦикла; 	
	
	// Проверим на наличие метода начисления амортизации = Налоговый
	Если СтрокаОС.СпособНачисленияАмортизацииБУ = Перечисления.СпособыНачисленияАмортизацииОС.Налоговый Тогда
		СтрокаСообщения = НСтр("ru='указан недопустимый способ начисления амортизации ""';uk='зазначений неприпустимий спосіб нарахування амортизації ""'")+ СокрЛП(СтрокаОС.СпособНачисленияАмортизацииБУ) + """!";
		ОшибкаПроведенияПоСтроке(СтрокаОС, СтрокаСообщения, Заголовок, КлючЗначение.Значение);
		Отказ = Истина;
	КонецЕсли;	
	
	Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыльДо2015 И СтрокаОС.НачислятьАмортизациюБУ Тогда                                                                                                                                               
		УправлениеНеоборотнымиАктивами.ПроверитьСоответствиеНалоговогоНазначенияАмортизацииОбъекта(СтрокаОС.ОсновноеСредство, СтрокаОС.СпособОтраженияРасходовПоАмортизацииБУ, СтрокаОС.НалоговоеНазначение, Отказ, Заголовок, Дата, СтруктураШапкиДокумента.ЕстьНДС);
	КонецЕсли;
	
	Если Дата < Дата('20200301') И СтрокаОС.СпособНачисленияАмортизацииНУ = Перечисления.СпособыНачисленияАмортизацииОС.Производственный Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Бух. учет: Для основного средства ""%1"" в строке №%2 указан Производственный способ аморт. в НУ, амотртизация возможна с 01.04.2020!';uk='Бух. облік: Для основного засобу ""%1"" в рядку №%2 вказано Виробничий метод аморт. в ПО, амотртізація можлива з 01.04.2020!'"), СтрокаОС.ОсновноеСредство, СтрокаОС.НомерСтроки);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Отказ = Истина;
	КонецЕсли;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ФОРМИРОВАНИЯ ДВИЖЕНИЙ ДОКУМЕНТА ПО РЕГИСТРАМ

////////////////////////////////////////////////////////////////////////////////

// Процедура формирования движений по регистру ВыработкаОС
//
Процедура ДвижениеПоРегиструВыработкаОС(ЭтотОбъект, ТабОС, СтруктураШапкиДокумента)

	НаборДвижений   = ЭтотОбъект.Движения.ВыработкаОС;
	ТаблицаДвижений = НаборДвижений.Выгрузить();

	Для Каждого СтрокаОС Из ТабОС Цикл

		Если СтрокаОС.ВыработкаКоличествоБУ > 0
		   И ЗначениеЗаполнено(СтрокаОС.ПараметрВыработкиБУ) Тогда

			НоваяСтрока = ТаблицаДвижений.Добавить();

			НоваяСтрока.Период            = ЭтотОбъект.Дата;
			НоваяСтрока.ОсновноеСредство  = СтрокаОС.ОсновноеСредство;
			НоваяСтрока.ПараметрВыработки = СтрокаОС.ПараметрВыработкиБУ;
			НоваяСтрока.Количество        = СтрокаОС.ВыработкаКоличествоБУ;

		КонецЕсли;

	КонецЦикла;

	НаборДвижений.мПериод = ЭтотОбъект.Дата;
	НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;
	НаборДвижений.ДобавитьДвижение();
	
КонецПроцедуры // ДвижениеПоРегиструВыработкаОС()

////////////////////////////////////////////////////////////////////////////////

// Процедура формирования движений по регистру Первоначальные сведеняи об ОС бух.
//
Процедура ДвижениеПоРегиструПервоначальныеСведенияОСБух(ЭтотОбъект, ТабОС, СтруктураШапкиДокумента)
		
	НаборДвижений   = ЭтотОбъект.Движения.ПервоначальныеСведенияОСБухгалтерскийУчет;
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	
	Для Каждого СтрокаОС Из ТабОС Цикл
		
		НоваяСтрока = ТаблицаДвижений.Добавить();
		НоваяСтрока.Период                      = СтрокаОС.ДатаВводаВЭксплуатациюРегл;
		НоваяСтрока.Организация                 = СтруктураШапкиДокумента.Организация;
		НоваяСтрока.ОсновноеСредство            = СтрокаОС.ОсновноеСредство;
		НоваяСтрока.ИнвентарныйНомер            = СтрокаОС.ИнвентарныйНомерРегл;
		НоваяСтрока.ПервоначальнаяСтоимость     = СтрокаОС.ПервоначальнаяСтоимостьБУ;
		НоваяСтрока.СпособНачисленияАмортизации = СтрокаОС.СпособНачисленияАмортизацииБУ;
		НоваяСтрока.ПараметрВыработки           = СтрокаОС.ПараметрВыработкиБУ;
		
	КонецЦикла;
	
	НаборДвижений.Загрузить(ТаблицаДвижений);
	НаборДвижений.УстановитьАктивность(Истина);
	
КонецПроцедуры // ДвижениеПоРегиструПервоначальныеСведенияОСБух()

// Процедура формирования движений по регистру Первоначальные сведеняи об ОС нал.
//
Процедура ДвижениеПоРегиструПервоначальныеСведенияОСНал(ЭтотОбъект, ТабОС, СтруктураШапкиДокумента)
		
	НаборДвижений   = ЭтотОбъект.Движения.ПервоначальныеСведенияОСНалоговыйУчет;
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	ЕстьНалогНаПрибыль = СтруктураШапкиДокумента.ЕстьНалогНаПрибыль;
	
	ДатаНКУ2015_ДляВводаНачальныхОстатков = '2015 01 01' - 86400;
	ЭтоДокументДо2015 = (ЭтотОбъект.Дата < ДатаНКУ2015_ДляВводаНачальныхОстатков);
	
	Для Каждого СтрокаОС Из ТабОС Цикл
		
		НоваяСтрока = ТаблицаДвижений.Добавить();
		НоваяСтрока.Период            = СтрокаОС.ДатаВводаВЭксплуатациюРегл;
		НоваяСтрока.Организация       = СтруктураШапкиДокумента.Организация;
		НоваяСтрока.ОсновноеСредство  = СтрокаОС.ОсновноеСредство;
		НоваяСтрока.НалоговаяГруппаОС = СтрокаОС.НалоговаяГруппаОС;
		
		Если ЕстьНалогНаПрибыль Тогда
			
			НоваяСтрока.ПервоначальнаяСтоимостьНУ = СтрокаОС.БалансоваяСтоимостьНУ;
			
		КонецЕсли;
		
		Если НЕ ЭтоДокументДо2015 Тогда
			НоваяСтрока.СпособНачисленияАмортизации = СтрокаОС.СпособНачисленияАмортизацииНУ;
		КонецЕсли;	
		
	КонецЦикла;
	
	НаборДвижений.Загрузить(ТаблицаДвижений);
	НаборДвижений.УстановитьАктивность(Истина);
	
КонецПроцедуры // ДвижениеПоРегиструПервоначальныеСведенияОСНал()

////////////////////////////////////////////////////////////////////////////////

// Процедура формирования движений по регистру Местонахождение ОС бух.
//
Процедура ДвижениеПоРегиструМестонахождениеОСБух(ЭтотОбъект, ТабОС, СтруктураШапкиДокумента)
		
	НаборДвижений   = ЭтотОбъект.Движения.МестонахождениеОСБухгалтерскийУчет;
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	
	Для Каждого СтрокаОС Из ТабОС Цикл
		
		НоваяСтрока = ТаблицаДвижений.Добавить();
		НоваяСтрока.Период           = ЭтотОбъект.Дата;
		НоваяСтрока.Организация      = СтруктураШапкиДокумента.Организация;
		НоваяСтрока.ОсновноеСредство = СтрокаОС.ОсновноеСредство;
		НоваяСтрока.МОЛ              = СтрокаОС.МОЛРегл;
		НоваяСтрока.Местонахождение  = СтрокаОС.ПодразделениеОрганизации;
		
	КонецЦикла;
	
	НаборДвижений.Загрузить(ТаблицаДвижений);
	НаборДвижений.УстановитьАктивность(Истина);
	
КонецПроцедуры // ДвижениеПоРегиструМестонахождениеОСБух()

////////////////////////////////////////////////////////////////////////////////

// Процедура формирования движений по регистру Графики амортизации ОС бух.
//
Процедура ДвижениеПоРегиструГрафикиАмортизацииОСБух(ЭтотОбъект, ТабОС, СтруктураШапкиДокумента)
		
	НаборДвижений   = ЭтотОбъект.Движения.ГрафикиАмортизацииОСБухгалтерскийУчет;
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	
	Для Каждого СтрокаОС Из ТабОС Цикл
		
		Если ЗначениеЗаполнено( СтрокаОС.ГрафикАмортизацииБУ) Тогда
			НоваяСтрока = ТаблицаДвижений.Добавить();
			НоваяСтрока.Период            = ЭтотОбъект.Дата;
			НоваяСтрока.Организация       = СтруктураШапкиДокумента.Организация;
			НоваяСтрока.ОсновноеСредство  = СтрокаОС.ОсновноеСредство;
			НоваяСтрока.ГрафикАмортизации = СтрокаОС.ГрафикАмортизацииБУ;
		КонецЕсли;
		
	КонецЦикла;
	
	НаборДвижений.Загрузить(ТаблицаДвижений);
	НаборДвижений.УстановитьАктивность(Истина);
	
КонецПроцедуры // ДвижениеПоРегиструГрафикиАмортизацииОСБух()

////////////////////////////////////////////////////////////////////////////////

// Процедура формирования движений по регистру Начисление амортизации бух.
//
Процедура ДвижениеПоРегиструНачислениеАмортизацииБух(ЭтотОбъект, ТабОС, СтруктураШапкиДокумента, Заголовок)
		
	НаборДвижений   = ЭтотОбъект.Движения.НачислениеАмортизацииОСБухгалтерскийУчет;
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	
	Для Каждого СтрокаОС Из ТабОС Цикл
		
		НоваяСтрока = ТаблицаДвижений.Добавить();
		НоваяСтрока.Период               = ЭтотОбъект.Дата;
		НоваяСтрока.Организация          = СтруктураШапкиДокумента.Организация;
		НоваяСтрока.ОсновноеСредство     = СтрокаОС.ОсновноеСредство;
		НоваяСтрока.НачислятьАмортизацию = СтрокаОС.НачислятьАмортизациюБУ;
		
	КонецЦикла;
	
	НаборДвижений.Загрузить(ТаблицаДвижений);
	НаборДвижений.УстановитьАктивность(Истина);
	
КонецПроцедуры // ДвижениеПоРегиструНачислениеАмортизацииБух()

// Процедура формирования движений по регистру Начисление амортизации нал.
//
Процедура ДвижениеПоРегиструНачислениеАмортизацииНал(ЭтотОбъект, ТабОС, СтруктураШапкиДокумента, Заголовок)
		
	НаборДвижений   = ЭтотОбъект.Движения.НачислениеАмортизацииОСНалоговыйУчет;
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	
	Для Каждого СтрокаОС Из ТабОС Цикл
		
		НоваяСтрока = ТаблицаДвижений.Добавить();
		НоваяСтрока.Период               = ЭтотОбъект.Дата;
		НоваяСтрока.Организация          = СтруктураШапкиДокумента.Организация;
		НоваяСтрока.ОсновноеСредство     = СтрокаОС.ОсновноеСредство;
		НоваяСтрока.НачислятьАмортизацию = СтрокаОС.НачислятьАмортизациюБУ И НЕ СтрокаОС.НепроизводственноеНУ;
		
	КонецЦикла;
	
	НаборДвижений.Загрузить(ТаблицаДвижений);
	НаборДвижений.УстановитьАктивность(Истина);
	
КонецПроцедуры // ДвижениеПоРегиструНачислениеАмортизацииБух()

// Процедура формирования движений по регистру НалоговыеНазначенияОС.
//
Процедура ДвижениеПоРегиструНалоговыеНазначенияОС(ЭтотОбъект, ТабОС, СтруктураШапкиДокумента, Заголовок)
		
	НаборДвижений   = ЭтотОбъект.Движения.НалоговыеНазначенияОС;
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	
	
	Для Каждого СтрокаОС Из ТабОС Цикл
		
		НоваяСтрока = ТаблицаДвижений.Добавить();
		НоваяСтрока.Период     		    = СтрокаОС.ДатаВводаВЭксплуатациюРегл;
		НоваяСтрока.ОсновноеСредство    = СтрокаОС.ОсновноеСредство;
		НоваяСтрока.Организация         = СтруктураШапкиДокумента.Организация;
		НоваяСтрока.НалоговоеНазначение = СтрокаОС.НалоговоеНазначение;
		
	КонецЦикла;
    		
	НаборДвижений.Загрузить(ТаблицаДвижений);
	НаборДвижений.УстановитьАктивность(Истина);
	
КонецПроцедуры 

////////////////////////////////////////////////////////////////////////////////

// Процедура формирования движений по регистру ПараметрыАмортизации ОС бух.
//
Процедура ДвижениеПоРегиструПараметрыАмортизацииБух(ЭтотОбъект, ТабОС, СтруктураШапкиДокумента)
		
	НаборДвижений   = ЭтотОбъект.Движения.ПараметрыАмортизацииОСБухгалтерскийУчет;
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	
	Для Каждого СтрокаОС Из ТабОС Цикл
		
		ДатаДвижения = СтрокаОС.ДатаВводаВЭксплуатациюРегл;
		Если ЗначениеЗаполнено(СтрокаОС.ДатаПоследнейМодернизацииРегл) тогда
			ДатаДвижения = ?(СтрокаОС.ДатаВводаВЭксплуатациюРегл=СтрокаОС.ДатаПоследнейМодернизацииРегл, СтрокаОС.ДатаВводаВЭксплуатациюРегл+1, СтрокаОС.ДатаПоследнейМодернизацииРегл);
		Иначе
			ДатаДвижения = СтрокаОС.ДатаВводаВЭксплуатациюРегл;
		КонецЕсли;
		
		НоваяСтрока = ТаблицаДвижений.Добавить();
		НоваяСтрока.Период           = ДатаДвижения;
		НоваяСтрока.Организация      = СтруктураШапкиДокумента.Организация;
		НоваяСтрока.ОсновноеСредство = СтрокаОС.ОсновноеСредство;
		
		Если ЗначениеЗаполнено(СтрокаОС.СрокПолезногоИспользованияБУ) тогда
			НоваяСтрока.СрокПолезногоИспользования                  = СтрокаОС.СрокПолезногоИспользованияБУ;
		Иначе
			НоваяСтрока.СрокПолезногоИспользования                  = СтрокаОС.СрокИспользованияДляВычисленияАмортизацииБУ;
		КонецЕсли;	
		НоваяСтрока.ОбъемПродукцииРабот                         = СтрокаОС.ОбъемПродукцииРаботБУ;
		НоваяСтрока.СтоимостьДляВычисленияАмортизации           = СтрокаОС.ТекущаяСтоимостьБУ;
		Если НЕ ЗначениеЗаполнено(СтрокаОС.СрокИспользованияДляВычисленияАмортизацииБУ) тогда
			НоваяСтрока.СрокИспользованияДляВычисленияАмортизации   = СтрокаОС.СрокПолезногоИспользованияБУ;
		Иначе
			НоваяСтрока.СрокИспользованияДляВычисленияАмортизации   = СтрокаОС.СрокИспользованияДляВычисленияАмортизацииБУ;
		КонецЕсли;                                                                            		
		Если НЕ ЗначениеЗаполнено(СтрокаОС.ОбъемПродукцииРаботДляВычисленияАмортизацииБУ) тогда
			НоваяСтрока.ОбъемПродукцииРаботДляВычисленияАмортизации = СтрокаОС.ОбъемПродукцииРаботБУ;
		Иначе
			НоваяСтрока.ОбъемПродукцииРаботДляВычисленияАмортизации = СтрокаОС.ОбъемПродукцииРаботДляВычисленияАмортизацииБУ;
		КонецЕсли;
		НоваяСтрока.ЛиквидационнаяСтоимость	= СтрокаОС.ЛиквидационнаяСтоимостьБУ;
		
	КонецЦикла;
	
	НаборДвижений.Загрузить(ТаблицаДвижений);
	НаборДвижений.УстановитьАктивность(Истина);
	
КонецПроцедуры // ДвижениеПоРегиструПараметрыАмортизацииБух()

// Процедура формирования движений по регистру ПараметрыАмортизации ОС нал.
//
Процедура ДвижениеПоРегиструПараметрыАмортизацииНал(ЭтотОбъект, ТабОС, СтруктураШапкиДокумента)
		
	НаборДвижений   = ЭтотОбъект.Движения.ПараметрыАмортизацииОСНалоговыйУчет;
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	
	Для Каждого СтрокаОС Из ТабОС Цикл
		
		ДатаДвижения = СтрокаОС.ДатаВводаВЭксплуатациюРегл;
		Если ЗначениеЗаполнено(СтрокаОС.ДатаПоследнейМодернизацииРегл) тогда
			ДатаДвижения = ?(СтрокаОС.ДатаВводаВЭксплуатациюРегл=СтрокаОС.ДатаПоследнейМодернизацииРегл, СтрокаОС.ДатаВводаВЭксплуатациюРегл+1, СтрокаОС.ДатаПоследнейМодернизацииРегл);
		Иначе
			ДатаДвижения = СтрокаОС.ДатаВводаВЭксплуатациюРегл;
		КонецЕсли;
		
		НоваяСтрока = ТаблицаДвижений.Добавить();
		НоваяСтрока.Период           = ДатаДвижения;
		НоваяСтрока.Организация      = СтруктураШапкиДокумента.Организация;
		НоваяСтрока.ОсновноеСредство = СтрокаОС.ОсновноеСредство;
		
		НоваяСтрока.СрокПолезногоИспользования 					= СтрокаОС.СрокИспользованияДляВычисленияАмортизацииНУ;
		НоваяСтрока.СрокИспользованияДляВычисленияАмортизации 	= СтрокаОС.СрокИспользованияДляВычисленияАмортизацииНУ;
		Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыль Тогда
			НоваяСтрока.СтоимостьДляВычисленияАмортизации           = СтрокаОС.БалансоваяСтоимостьНУ;
		КонецЕсли;	
		
	КонецЦикла;
	
	НаборДвижений.Загрузить(ТаблицаДвижений);
	НаборДвижений.УстановитьАктивность(Истина);
	
КонецПроцедуры // ДвижениеПоРегиструПараметрыАмортизацииНал()

////////////////////////////////////////////////////////////////////////////////

// Процедура формирования движений по регистру Состояния ОС бух.
//
Процедура ДвижениеПоРегиструСостоянияОСБух(ЭтотОбъект, ТабОС, СтруктураШапкиДокумента,Отказ,Заголовок)
		
	НаборДвижений   = ЭтотОбъект.Движения.СостоянияОСОрганизаций;
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	
	Для Каждого СтрокаОС Из ТабОС Цикл
		
		НоваяСтрока = ТаблицаДвижений.Добавить();
		НоваяСтрока.ДатаСостояния     = СтрокаОС.ДатаВводаВЭксплуатациюРегл;
		НоваяСтрока.ОсновноеСредство  = СтрокаОС.ОсновноеСредство;
		НоваяСтрока.Организация       = СтруктураШапкиДокумента.Организация;
		НоваяСтрока.Состояние         = Перечисления.СостоянияОС.ВведеноВЭксплуатацию;
		НоваяСтрока.НазваниеДокумента = СтрокаОС.НазваниеДокументаВводаВЭксплуатациюРегл;
		НоваяСтрока.НомерДокумента    = СтрокаОС.НомерДокументаВводаВЭксплуатациюРегл;
						
	КонецЦикла;
	НаборДвижений.Загрузить(ТаблицаДвижений);
	НаборДвижений.УстановитьАктивность(Истина);
	
КонецПроцедуры 

// Процедура формирования движений по регистру Состояния ОС бух.
//
Процедура ДвижениеПоРегиструОперацииОСБух(ЭтотОбъект, ТабОС, СтруктураШапкиДокумента)
		
	НаборДвижений   = ЭтотОбъект.Движения.СобытияОСОрганизаций;
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	
	Для Каждого СтрокаОС Из ТабОС Цикл
		
		НоваяСтрока = ТаблицаДвижений.Добавить();
		НоваяСтрока.Период            = СтрокаОС.ДатаВводаВЭксплуатациюРегл;
		НоваяСтрока.ОсновноеСредство  = СтрокаОС.ОсновноеСредство;
		НоваяСтрока.Организация       = СтруктураШапкиДокумента.Организация;
		НоваяСтрока.Событие           = СтрокаОС.СобытиеВводаВЭксплуатациюРегл;
		НоваяСтрока.НомерДокумента    = СтрокаОС.НомерДокументаВводаВЭксплуатациюРегл;
		НоваяСтрока.НазваниеДокумента = СтрокаОС.НазваниеДокументаВводаВЭксплуатациюРегл;
		
		Если ЗначениеЗаполнено(СтрокаОС.ДатаПоследнейМодернизацииРегл) Тогда
			
			НоваяСтрока = ТаблицаДвижений.Добавить();
			НоваяСтрока.Период            = ?(СтрокаОС.ДатаВводаВЭксплуатациюРегл=СтрокаОС.ДатаПоследнейМодернизацииРегл,СтрокаОС.ДатаВводаВЭксплуатациюРегл+1,СтрокаОС.ДатаПоследнейМодернизацииРегл);
			НоваяСтрока.ОсновноеСредство  = СтрокаОС.ОсновноеСредство;
			НоваяСтрока.Организация       = СтруктураШапкиДокумента.Организация;
			НоваяСтрока.Событие           = СтрокаОС.СобытиеМодернизацииРегл;
			НоваяСтрока.НомерДокумента    = СтрокаОС.НомерДокументаМодернизацииРегл;
			НоваяСтрока.НазваниеДокумента = СтрокаОС.НазваниеДокументаМодернизацииРегл;
			НоваяСтрока.СуммаЗатратБУ     = СтрокаОС.СуммаПоследнейМодернизацииБУ;
			
		КонецЕсли;
		
	КонецЦикла;
	
	НаборДвижений.Загрузить(ТаблицаДвижений);
	НаборДвижений.УстановитьАктивность(Истина);
	
КонецПроцедуры 
////////////////////////////////////////////////////////////////////////////////

Процедура ДвижениеПоРегиструСпособыОтраженияБух(ЭтотОбъект, ТабОС, СтруктураШапкиДокумента, Заголовок)
		
	НаборДвижений   = ЭтотОбъект.Движения.СпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчет;
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	
	Для Каждого СтрокаОС Из ТабОС Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаОС.СпособОтраженияРасходовПоАмортизацииБУ) тогда
			Продолжить;
		КонецЕслИ;
		
		НоваяСтрока = ТаблицаДвижений.Добавить();
		НоваяСтрока.Период            = СтруктураШапкиДокумента.Дата;
		НоваяСтрока.ОсновноеСредство  = СтрокаОС.ОсновноеСредство;
		НоваяСтрока.Организация       = СтруктураШапкиДокумента.Организация;
		НоваяСтрока.СпособыОтраженияРасходовПоАмортизации = СтрокаОС.СпособОтраженияРасходовПоАмортизацииБУ;
		
	КонецЦикла;
	
	НаборДвижений.Загрузить(ТаблицаДвижений);
	НаборДвижений.УстановитьАктивность(Истина);
	
КонецПроцедуры // ДвижениеПоРегиструСпособыОтраженияБух()

Процедура ДвижениеПоРегиструПереоценкаОСБух(ЭтотОбъект, ТабОС, СтруктураШапкиДокумента, Заголовок)
		
	НаборДвижений   = ЭтотОбъект.Движения.ПереоценкаОСБухгалтерскийУчет;
	
	Для Каждого СтрокаОС Из ТабОС Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаОС.СчетУчетаДооценокОС) ИЛИ СтрокаОС.ПревышениеСуммДооценокНадСуммамиУценокБУ = 0 тогда
			Продолжить;
		КонецЕслИ;
		
		Если СтрокаОС.ПревышениеСуммДооценокНадСуммамиУценокБУ > 0 Тогда
			НоваяСтрока = НаборДвижений.ДобавитьПриход();
		Иначе	
			НоваяСтрока = НаборДвижений.ДобавитьРасход();
		КонецЕсли;	
			
		НоваяСтрока.Период            	= СтруктураШапкиДокумента.Дата;
		НоваяСтрока.ОсновноеСредство 	= СтрокаОС.ОсновноеСредство;
		НоваяСтрока.Организация 		= СтруктураШапкиДокумента.Организация;
		НоваяСтрока.СуммаПереоценки 	= Макс(СтрокаОС.ПревышениеСуммДооценокНадСуммамиУценокБУ, -СтрокаОС.ПревышениеСуммДооценокНадСуммамиУценокБУ);
		
	КонецЦикла;
	
	НаборДвижений.УстановитьАктивность(Истина);
	
КонецПроцедуры // ДвижениеПоРегиструСпособыОтраженияБух()

////////////////////////////////////////////////////////////////////////////////

// Процедура формирования движений по регистру СчетаУчета ОС бух.
//
Процедура ДвижениеПоРегиструСчетовУчетаОСБух(ЭтотОбъект, ТабОС, СтруктураШапкиДокумента)
		
	НаборДвижений   = Этотобъект.Движения.СчетаБухгалтерскогоУчетаОС;
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	
	Для Каждого СтрокаОС Из ТабОС Цикл
		
		НоваяСтрока = ТаблицаДвижений.Добавить();
		НоваяСтрока.Период     		  = СтрокаОС.ДатаВводаВЭксплуатациюРегл;
		НоваяСтрока.ОсновноеСредство  = СтрокаОС.ОсновноеСредство;
		НоваяСтрока.Организация       = СтруктураШапкиДокумента.Организация;
		НоваяСтрока.СчетУчета         = СтрокаОС.СчетУчетаБУ;
		НоваяСтрока.СчетНачисленияАмортизации 	= СтрокаОС.СчетАмортизацииБУ;
		НоваяСтрока.СчетУчетаДооценокОС 		= СтрокаОС.СчетУчетаДооценокОС;
		
	КонецЦикла;
	НаборДвижений.Загрузить(ТаблицаДвижений);
	НаборДвижений.УстановитьАктивность(Истина);
	
КонецПроцедуры // ДвижениеПоРегиструСчетовУчетаОСБух()

////////////////////////////////////////////////////////////////////////////////
// Процедура формирование проводок.
//
Процедура ФормированиеПроводокБух(ЭтотОбъект, ТабОС, СтруктураШапкиДокумента)
	
	Операция = ЭтотОбъект.Движения.Хозрасчетный;
	
	Для Каждого СтрокаОС Из ТабОС Цикл
		
		Если ЗначениеЗаполнено( СтрокаОС.СчетУчетаБУ) Тогда
				
			// Ввод текущей стоимости ОС.
			Проводка = Операция.Добавить();
			Проводка.Период      = ЭтотОбъект.Дата;
			
			Проводка.Организация = СтруктураШапкиДокумента.Организация;
			Проводка.Содержание  = НСтр("ru='Ввод остатков ОС (текущая стоимость)';uk='Введення залишків ОЗ (поточна вартість)'",Локализация.КодЯзыкаИнформационнойБазы());
			Проводка.Сумма       = СтрокаОС.ТекущаяСтоимостьБУ;
			
			Проводка.НалоговоеНазначениеДт 	= СтрокаОС.НалоговоеНазначение;
			Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыль Тогда
				Если СтрокаОС.НалоговоеНазначение <> Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяНеХозДеятельность Тогда 
					Проводка.СуммаНУДт 	 			= СтрокаОС.БалансоваяСтоимостьНУ;
				КонецЕсли;	
			КонецЕсли;	
			
			Проводка.СчетДт = СтрокаОС.СчетУчетаБУ;
			БухгалтерскийУчет.УстановитьСубконто( Проводка.СчетДт, Проводка.СубконтоДт, "ОсновныеСредства", СтрокаОС.ОсновноеСредство);
			
			Проводка.СчетКт = ПланыСчетов.Хозрасчетный.Вспомогательный;
				
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаОС.СчетАмортизацииБУ)
			   И (НЕ СтрокаОС.НакопленнаяАмортизацияБУ = 0 ИЛИ НЕ СтрокаОС.НакопленнаяАмортизацияНУ = 0) Тогда
			   
			    СуммаПроводки = СтрокаОС.НакопленнаяАмортизацияБУ; 
				// Ввод накопленной амортизации.
				Проводка = Операция.Добавить();
				
				Проводка.Период      = ЭтотОбъект.Дата;
				Проводка.Организация = СтруктураШапкиДокумента.Организация;
				Проводка.Содержание  = НСтр("ru='Ввод остатков ОС (накопленная амортизация)';uk='Введення залишків ОЗ (накопичена амортизація)'",Локализация.КодЯзыкаИнформационнойБазы());
				Проводка.Сумма       = СуммаПроводки;
				
				Проводка.НалоговоеНазначениеКт 	= СтрокаОС.НалоговоеНазначение;
				Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыль Тогда
					Если СтрокаОС.НалоговоеНазначение <> Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяНеХозДеятельность Тогда 
						Проводка.СуммаНУКт 	 			= СтрокаОС.НакопленнаяАмортизацияНУ;
					КонецЕсли;	
				КонецЕсли;	
				
				Проводка.СчетКт = СтрокаОС.СчетАмортизацииБУ;
				БухгалтерскийУчет.УстановитьСубконто( Проводка.СчетКт, Проводка.СубконтоКт, "ОсновныеСредства", СтрокаОС.ОсновноеСредство);
				
				Проводка.СчетДт = ПланыСчетов.Хозрасчетный.Вспомогательный;
				
		КонецЕсли;
			
		
		Если ЗначениеЗаполнено(СтрокаОС.СчетУчетаДооценокОС) И СтрокаОС.СуммаДопКапиталаНачисленногоПриДооценкахОСБУ <> 0 тогда
			
			// Ввод остатков при дооценках ОС
			Проводка = Операция.Добавить();
			
			Проводка.Период      = ЭтотОбъект.Дата;
			Проводка.Организация = СтруктураШапкиДокумента.Организация;
			Проводка.Содержание  = НСтр("ru='Ввод остатков ОС (сумма доп капитала)';uk='Введення залишків ОЗ (сума дод. капіталу)'",Локализация.КодЯзыкаИнформационнойБазы());
			Проводка.Сумма       = СтрокаОС.СуммаДопКапиталаНачисленногоПриДооценкахОСБУ;
			
			Проводка.СчетКт = СтрокаОС.СчетУчетаДооценокОС;
			БухгалтерскийУчет.УстановитьСубконто( Проводка.СчетКт, Проводка.СубконтоКт, "ОсновныеСредства", СтрокаОС.ОсновноеСредство);
			
			Проводка.СчетДт = ПланыСчетов.Хозрасчетный.Вспомогательный;
		КонецЕслИ;
		
		
	КонецЦикла;
	
КонецПроцедуры // ФормированиеПроводокБух

////////////////////////////////////////////////////////////////////////////////

// Процедура формирования движений по регистрам.
//
Процедура ДвиженияПоРегистрам(ЭтотОбъект, СтруктураШапкиДокумента, Отказ,Заголовок)

	ТабОС = ЭтотОбъект.ОС.Выгрузить();
	ТаблицаБА = ТабОС.Скопировать(); // ИНАГРО

	// Движение по регистрам общим для упр. и регл. учета
	ДвижениеПоРегиструВыработкаОС(ЭтотОбъект, ТабОС, СтруктураШапкиДокумента);
	
	// Движение по регл. регистрам  		
	ДвижениеПоРегиструПервоначальныеСведенияОСБух(ЭтотОбъект, ТабОС, СтруктураШапкиДокумента);
	ДвижениеПоРегиструСостоянияОСБух             (ЭтотОбъект, ТабОС, СтруктураШапкиДокумента,Отказ,  Заголовок);
	ДвижениеПоРегиструМестонахождениеОСБух       (ЭтотОбъект, ТабОС, СтруктураШапкиДокумента);
	ДвижениеПоРегиструГрафикиАмортизацииОСБух    (ЭтотОбъект, ТабОС, СтруктураШапкиДокумента);
	ДвижениеПоРегиструНачислениеАмортизацииБух   (ЭтотОбъект, ТабОС, СтруктураШапкиДокумента, Заголовок);
	ДвижениеПоРегиструПараметрыАмортизацииБух    (ЭтотОбъект, ТабОС, СтруктураШапкиДокумента);
	ДвижениеПоРегиструСпособыОтраженияБух	     (ЭтотОбъект, ТабОС, СтруктураШапкиДокумента, Заголовок);
	ДвижениеПоРегиструОперацииОСБух              (ЭтотОбъект, ТабОС, СтруктураШапкиДокумента);
	ДвижениеПоРегиструСчетовУчетаОСБух           (ЭтотОбъект, ТабОС, СтруктураШапкиДокумента);
	
	ДвижениеПоРегиструПереоценкаОСБух			 (ЭтотОбъект, ТабОС, СтруктураШапкиДокумента, Заголовок);
	
	ФормированиеПроводокБух(ЭтотОбъект, ТабОС, СтруктураШапкиДокумента);
	
	ДвижениеПоРегиструНачислениеАмортизацииНал   (ЭтотОбъект, ТабОС, СтруктураШапкиДокумента, Заголовок);
	ДвижениеПоРегиструПараметрыАмортизацииНал    (ЭтотОбъект, ТабОС, СтруктураШапкиДокумента);
	
		ДвижениеПоРегиструПервоначальныеСведенияОСНал(ЭтотОбъект, ТабОС, СтруктураШапкиДокумента);		
		ДвижениеПоРегиструНалоговыеНазначенияОС(ЭтотОбъект, ТабОС, СтруктураШапкиДокумента, Заголовок);

	ФормированиеДвиженияОСВременнаяНалоговаяРазница(ЭтотОбъект, СтруктураШапкиДокумента, Отказ, Заголовок);	
	
	// ИНАГРО++
	Если АмортизацияБА И ЗначениеЗаполнено(ИНАГРО_ДокументОперативногоУчета) Тогда 
		
		// Движение в РегистрСведений.ИНАГРО_СоответствиеБАиОС		
		ТаблицаБА.Колонки.ПервоначальнаяСтоимостьБУ.Имя = "СтоимостьБУ";
		ТаблицаБА.Колонки.ПервоначальнаяСтоимостьНУ.Имя = "СтоимостьНУ";
		
		ТаблицаБА.Колонки.Добавить("ДокументОперативногоУчета");
		ТаблицаБА.Колонки.Добавить("БиологическийАктив");
		ТаблицаБА.Колонки.Добавить("Склад");
		
		ТаблицаБА.ЗаполнитьЗначения(ЭтотОбъект.ИНАГРО_ДокументОперативногоУчета.Ссылка, "ДокументОперативногоУчета");		
		ТаблицаБА.ЗаполнитьЗначения(ЭтотОбъект.ИНАГРО_БиологическийАктив,               "БиологическийАктив");		
		ТаблицаБА.ЗаполнитьЗначения(ЭтотОбъект.ИНАГРО_Склад,                            "Склад");
		
		Если ИНАГРО_ОбщийВызовСервераПовтИсп.ЕстьБСПУ() Тогда
			МодульИНАГРО_БиологическиеАктивы = ОбщегоНазначения.ОбщийМодуль("ИНАГРО_БиологическиеАктивы");		
			МодульИНАГРО_БиологическиеАктивы.СоответствиеБАиОС(Движения, СтруктураШапкиДокумента, ТаблицаБА);
		КонецЕсли;

	КонецЕсли;
	// ИНАГРО--
	
КонецПроцедуры // ДвиженияПоРегистрам()

Процедура ФормированиеДвиженияОСВременнаяНалоговаяРазница(ЭтотОбъект, СтруктураШапкиДокумента, Отказ, Заголовок)
	
	Если НЕ ВводитьОСВременнаяНалоговаяРазница
			И НЕ СтруктураШапкиДокумента.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.ВременнаяРазницаОСЗа2020 Тогда
		Возврат;
	КонецЕсли;
	
	ПроверитьВводВременнойРазницы2020(СтруктураШапкиДокумента, Отказ);	
	
	Счет1091 	= ПланыСчетов.Хозрасчетный.ДругиеОсновныеСредства; 
	Счет131 	= ПланыСчетов.Хозрасчетный.ИзносОсновныхСредств; 
	
	// Хозрасчетный
	Операция = ЭтотОбъект.Движения.Хозрасчетный;
	
	// Стоимость
	Проводка = Операция.Добавить();
	Проводка.Период      = СтруктураШапкиДокумента.Дата;
	Проводка.Организация = СтруктураШапкиДокумента.Организация;
	Проводка.Содержание  = НСтр("ru='Ввод остатков ОС (текущая стоимость)';uk='Введення залишків ОЗ (поточна вартість)'",Локализация.КодЯзыкаИнформационнойБазы());
	
	Проводка.НалоговоеНазначениеДт 	= Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяХозДеятельность;
	Проводка.СуммаНУДт 	 			= СтоимостьНУВременнаяНалоговаяРазница;
	
	Проводка.СчетДт = Счет1091;
	БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ОсновныеСредства", ОсновноеСредствоВременнаяНалоговаяРазница);
	
	Проводка.СчетКт = ПланыСчетов.Хозрасчетный.Вспомогательный;
	
	// Амортизация
	Если АмортизацияНУВременнаяНалоговаяРазница > 0 Тогда
		Проводка = Операция.Добавить();
		Проводка.Период      = СтруктураШапкиДокумента.Дата;
		Проводка.Организация = СтруктураШапкиДокумента.Организация;
		Проводка.Содержание  = НСтр("ru='Ввод остатков ОС (накопленная амортизация)';uk='Введення залишків ОЗ (накопичена амортизація)'",Локализация.КодЯзыкаИнформационнойБазы());
		
		Проводка.СчетДт = ПланыСчетов.Хозрасчетный.Вспомогательный;
		
		Проводка.НалоговоеНазначениеКт 	= Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяХозДеятельность;
		Проводка.СуммаНУКт	 			= АмортизацияНУВременнаяНалоговаяРазница;
		
		Проводка.СчетКт = Счет131;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОсновныеСредства", ОсновноеСредствоВременнаяНалоговаяРазница);
	КонецЕсли;
	
	
	// СчетаБухгалтерскогоУчетаОС
	НаборДвижений   = Этотобъект.Движения.СчетаБухгалтерскогоУчетаОС;
	
	НоваяСтрока = НаборДвижений.Добавить();
	НоваяСтрока.Период     		  = СтруктураШапкиДокумента.Дата;
	НоваяСтрока.ОсновноеСредство  = ОсновноеСредствоВременнаяНалоговаяРазница;
	НоваяСтрока.Организация       = СтруктураШапкиДокумента.Организация;
	НоваяСтрока.СчетУчета         = Счет1091;
	НоваяСтрока.СчетНачисленияАмортизации = Счет131;
	
	// СостоянияОСОрганизаций
	НаборДвижений   = ЭтотОбъект.Движения.СостоянияОСОрганизаций;
	
	НоваяСтрока = НаборДвижений.Добавить();
	НоваяСтрока.ДатаСостояния     = СтруктураШапкиДокумента.Дата;
	НоваяСтрока.ОсновноеСредство  = ОсновноеСредствоВременнаяНалоговаяРазница;
	НоваяСтрока.Организация       = СтруктураШапкиДокумента.Организация;
	НоваяСтрока.Состояние         = Перечисления.СостоянияОС.ВведеноВЭксплуатацию;
	
	УправлениеНеоборотнымиАктивами.ПроверкаДублированияЗаписейСостоянийОС(СтруктураШапкиДокумента.Организация, Движения.СостоянияОСОрганизаций, Отказ, Заголовок);
	
	// СпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчет
	НаборДвижений   = ЭтотОбъект.Движения.СпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчет;
	
	НоваяСтрока = НаборДвижений.Добавить();
	НоваяСтрока.Период            = СтруктураШапкиДокумента.Дата;
	НоваяСтрока.ОсновноеСредство  = ОсновноеСредствоВременнаяНалоговаяРазница;
	НоваяСтрока.Организация       = СтруктураШапкиДокумента.Организация;
	Если Дата >= Дата('20200301') Тогда
	   НоваяСтрока.СпособыОтраженияРасходовПоАмортизации = Справочники.СпособыОтраженияРасходовПоАмортизации.ВременнаяРазницаОС_За2020;
	Иначе 
		НоваяСтрока.СпособыОтраженияРасходовПоАмортизации = Справочники.СпособыОтраженияРасходовПоАмортизации.ВременнаяРазницаОСНа01042011;
	КонецЕсли; 
	
	//НачислениеАмортизацииОСНалоговыйУчет
	НаборДвижений   = ЭтотОбъект.Движения.НачислениеАмортизацииОСНалоговыйУчет;
	
	НоваяСтрока = НаборДвижений.Добавить();
	НоваяСтрока.Период               = СтруктураШапкиДокумента.Дата;
	НоваяСтрока.Организация          = СтруктураШапкиДокумента.Организация;
	НоваяСтрока.ОсновноеСредство     = ОсновноеСредствоВременнаяНалоговаяРазница;
	НоваяСтрока.НачислятьАмортизацию = Истина;

	//ПервоначальныеСведенияОСБухгалтерскийУчет
	НаборДвижений   = ЭтотОбъект.Движения.ПервоначальныеСведенияОСБухгалтерскийУчет;
	
	НоваяСтрока = НаборДвижений.Добавить();
	НоваяСтрока.Период                      = ЭтотОбъект.Дата;
	НоваяСтрока.Организация                 = СтруктураШапкиДокумента.Организация;
	НоваяСтрока.ОсновноеСредство            = ОсновноеСредствоВременнаяНалоговаяРазница;
	НоваяСтрока.ИнвентарныйНомер            = ОсновноеСредствоВременнаяНалоговаяРазница.Код;
	НоваяСтрока.ПервоначальнаяСтоимость     = 0;
	НоваяСтрока.СпособНачисленияАмортизации = Перечисления.СпособыНачисленияАмортизацииОС.Прямолинейный;
	
	//ПервоначальныеСведенияОСНалоговыйУчет
	НаборДвижений   = ЭтотОбъект.Движения.ПервоначальныеСведенияОСНалоговыйУчет;
	
	НоваяСтрока = НаборДвижений.Добавить();
	НоваяСтрока.Период            = СтруктураШапкиДокумента.Дата;
	НоваяСтрока.Организация       = СтруктураШапкиДокумента.Организация;
	НоваяСтрока.ОсновноеСредство  = ОсновноеСредствоВременнаяНалоговаяРазница;
	НоваяСтрока.НалоговаяГруппаОС = Справочники.НалоговыеГруппыОсновныхСредств.ОСВременнаяНалоговаяРазница;
	
	НоваяСтрока.ПервоначальнаяСтоимостьНУ = СтоимостьНУВременнаяНалоговаяРазница;
	
	
	// ПараметрыАмортизацииОСНалоговыйУчет 
	НаборДвижений   = ЭтотОбъект.Движения.ПараметрыАмортизацииОСНалоговыйУчет;

	НоваяСтрока = НаборДвижений.Добавить();
	НоваяСтрока.Период           = СтруктураШапкиДокумента.Дата;
	НоваяСтрока.Организация      = СтруктураШапкиДокумента.Организация;
	НоваяСтрока.ОсновноеСредство = ОсновноеСредствоВременнаяНалоговаяРазница;
	
	НоваяСтрока.СтоимостьДляВычисленияАмортизации           = СтоимостьНУВременнаяНалоговаяРазница;
	НоваяСтрока.СрокПолезногоИспользования   				= СрокИспользованияВременнаяНалоговаяРазница; 
	НоваяСтрока.СрокИспользованияДляВычисленияАмортизации   = СрокИспользованияВременнаяНалоговаяРазница;
	
	//НалоговыеНазначенияОС
	НаборДвижений   = ЭтотОбъект.Движения.НалоговыеНазначенияОС;
	
	НоваяСтрока = НаборДвижений.Добавить();
	НоваяСтрока.Период     		    = ЭтотОбъект.Дата;
	НоваяСтрока.ОсновноеСредство    = ОсновноеСредствоВременнаяНалоговаяРазница;
	НоваяСтрока.Организация         = СтруктураШапкиДокумента.Организация;
	НоваяСтрока.НалоговоеНазначение = Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяХозДеятельность;;	
	
КонецПроцедуры

Процедура ПроверитьВводВременнойРазницы2020(СтруктураШапкиДокумента, Отказ)

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СпособыОтраженияРасходовПоАмортизацииОС.ОсновноеСредство КАК ОсновноеСредство,
		|	СпособыОтраженияРасходовПоАмортизацииОС.ОсновноеСредство.Код КАК КодОС,
		|	СпособыОтраженияРасходовПоАмортизацииОС.Регистратор КАК Регистратор
		|ИЗ
		|	РегистрСведений.СпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчет КАК СпособыОтраженияРасходовПоАмортизацииОС
		|ГДЕ
		|	СпособыОтраженияРасходовПоАмортизацииОС.Организация = &Организация
		|	И СпособыОтраженияРасходовПоАмортизацииОС.СпособыОтраженияРасходовПоАмортизации = &СпособыОтраженияРасходовПоАмортизации
		|	И СпособыОтраженияРасходовПоАмортизацииОС.Регистратор <> &ТекущийРегистратор";
	
	Запрос.УстановитьПараметр("Организация", СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("ТекущийРегистратор", Ссылка);
	Запрос.УстановитьПараметр("СпособыОтраженияРасходовПоАмортизации", Справочники.СпособыОтраженияРасходовПоАмортизации.ВременнаяРазницаОС_За2020);
	
			Результат = Запрос.Выполнить();
	
			Выборка = Результат.Выбрать();

			ШаблонСообщения = НСтр("ru='В организации <%1> уже введенно основное средство <%2 (%3)>, имеющее способ отображения расходов по амортизации <%4>"
			"документом <%5>.';uk='В організації <%1> вже введене основний засіб <%2 (%3)>, що має спосіб відображення витрат по амортизації <%4>"
			"документом <%5>.'");
			
			
			Пока Выборка.Следующий() Цикл
				
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, СтруктураШапкиДокумента.Организация,
									Выборка.ОсновноеСредство, Выборка.КодОС, Справочники.СпособыОтраженияРасходовПоАмортизации.ВременнаяРазницаОС_За2020, Выборка.Регистратор);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , , , Отказ);
				
			КонецЦикла;


КонецПроцедуры // ПроверитьВводВременнойРазницы2020()

Процедура ОшибкаПроведенияПоСтроке(СтрокаОС, ТекстСообщения,Заголовок,Статус)
	НачалоСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='- строка № %1, инв. номер ОС <%2> : ';uk='- рядок № %1, инв. номер ОЗ <%2> : '"), СтрокаОС.НомерСтроки, СтрокаОС.ИнвентарныйНомерРегл);
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НачалоСообщения+ТекстСообщения);
КонецПроцедуры



Процедура ПроверитьЗаполнениеТабЧастиМалоценныеАктивы(Отказ, Заголовок,МассивНепроверяемыхРеквизитов);

	Если НЕ ВводитьОстаткиЗапасовВРазрезеДатОприходования Тогда						 
		МассивНепроверяемыхРеквизитов.Добавить("МалоценныеАктивы.ДатаПриобретения");
		МассивНепроверяемыхРеквизитов.Добавить("МалоценныеАктивы.СрокПолезногоИспользования");
	КонецЕсли;	
							 
	Для Каждого СтрокаТЧ Из ЭтотОбъект.МалоценныеАктивы Цикл
		Префикс = "МалоценныеАктивы[" + Формат(СтрокаТЧ.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].";

		Если НЕ ЗначениеЗаполнено(СтрокаТЧ.Стоимость)
			И (СтрокаТЧ.СчетУчета <> ПланыСчетов.Хозрасчетный.МалоценныеАктивыВЭксплуатации) Тогда
			
			ТекстСообщения = ОбщегоНазначенияБПКлиентСервер.ПолучитьТекстСообщения("Колонка", "Заполнение",
							НСтр("ru='Стоимость';uk='Вартість'"),
							СтрокаТЧ.НомерСтроки, НСтр("ru='Малоценные активы';uk='Малоцінні активи'"));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Префикс+"Стоимость", "Объект",Отказ);
		КонецЕсли;	
		
		Если СтруктураШапкиДокумента.ЕстьНДС Тогда
			
			Если НЕ ЗначениеЗаполнено(СтрокаТЧ.НалоговоеНазначение) Тогда
				
				ТекстСообщения = ОбщегоНазначенияБПКлиентСервер.ПолучитьТекстСообщения("Колонка", "Заполнение",
					НСтр("ru='Налоговое назначение';uk='Податкове призначення'"),
					СтрокаТЧ.НомерСтроки, НСтр("ru='Малоценные активы';uk='Малоцінні активи'"));
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Префикс+"НалоговоеНазначение", "Объект",Отказ);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;	
	
КонецПроцедуры 






////////////////////////////////////////////////////////////////////////////////
//******************************************************************************

Процедура ПроверкаЗаполненияТабличныхЧастей(Отказ, СтруктураОбязательныхПолей, ИмяТабличнойЧасти, ПредставлениеТабличнойЧасти = "", ТаблицаУсловий = Неопределено, СтруктураОбязательныхПолейПодч = Неопределено, ИмяТабличнойЧастиПодч = Неопределено, ПредставлениеТабличнойЧастиПодч = "", ТаблицаУсловийПодч = Неопределено, Отступ = "")
	
	МетаданныеРеквизиты = ЭтотОбъект.Метаданные().ТабличныеЧасти[ИмяТабличнойЧасти].Реквизиты;
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", СтруктураШапкиДокумента.Ссылка);
	Если ТаблицаУсловий <> Неопределено Тогда
		Для Каждого Условие ИЗ ТаблицаУсловий Цикл
			Запрос.УстановитьПараметр(Условие.ИмяРеквизита, Условие.ЗначениеРеквизита);
		КонецЦикла;
	КонецЕсли;

	Запрос.Текст = "ВЫБРАТЬ
	|";
	
	Шаг = 0;
	Для Каждого КлючЗначение Из СтруктураОбязательныхПолей Цикл
		Шаг = Шаг + 1;
		Запрос.Текст = Запрос.Текст + "ВводНачальныхОстатков." + КлючЗначение.Ключ + ?(СтруктураОбязательныхПолей.Количество() = Шаг, "", ",") + "
		|";
	КонецЦикла;
	
	Запрос.Текст = Запрос.Текст + "
	               |ИЗ
	               |	Документ.ВводНачальныхОстатков." + ИмяТабличнойЧасти + " КАК ВводНачальныхОстатков
	               |ГДЕ
	               |	ВводНачальныхОстатков.Ссылка = &ТекущийДокумент
				   |";
	
	Если ТаблицаУсловий <> Неопределено Тогда
		Для Каждого Условие ИЗ ТаблицаУсловий Цикл
			Запрос.Текст = Запрос.Текст + "
			| " + Условие.УсловиеОбъединения + " ВводНачальныхОстатков." + Условие.ИмяРеквизита + " " + Условие.ВидСравнения +
			?(Условие.ВидСравнения = "В", "(", "") + " &" + Условие.ИмяРеквизита + ?(Условие.ВидСравнения = "В", ")", "") + "
			|";
		КонецЦикла;
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	Если РезультатЗапроса.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	
	//Обработка ситуации исключения № 1
	Если РезультатЗапроса.Колонки.Найти("НомерСтроки") = Неопределено Тогда
		ИмяКолонкиНомерСтроки = "НомерСтрокиТЧ";
	Иначе
		ИмяКолонкиНомерСтроки = "НомерСтроки";
	КонецЕсли;
	
	Для Каждого СтрокаЗапроса ИЗ РезультатЗапроса Цикл
		
		Префикс = ИмяТабличнойЧасти+"[" + Формат(СтрокаЗапроса.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].";
		Если ПредставлениеТабличнойЧасти = "" Тогда
			СтрокаНачалаСообщенияОбОшибке = Отступ + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='В строке номер ""%1"" табличной части: ';uk='У рядку номер ""%1"" табличної частини: '"), СокрЛП(СтрокаЗапроса[ИмяКолонкиНомерСтроки]));	
		Иначе
			СтрокаНачалаСообщенияОбОшибке = Отступ + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='В строке номер ""%1"" табличной части ""%2"": ';uk='У рядку номер ""%1"" табличної частини ""%2"": '"), СокрЛП(СтрокаЗапроса[ИмяКолонкиНомерСтроки]), ПредставлениеТабличнойЧасти);
		КонецЕсли;
		Для каждого КлючЗначение Из СтруктураОбязательныхПолей Цикл
			
			Значение = СтрокаЗапроса[КлючЗначение.Ключ];
			Если НЕ ЗначениеЗаполнено(Значение) Тогда 
				
				Если НЕ ЗначениеЗаполнено(КлючЗначение.Значение) Тогда //
					ПредставлениеРеквизита = МетаданныеРеквизиты[КлючЗначение.Ключ].Представление();
					
					СтрокаСообщения = НСтр("ru='Не заполнено значение реквизита ""';uk='Не заповнене значення реквізиту ""'") + СокрЛП(ПредставлениеРеквизита) + """!";
					
				Иначе
					СтрокаСообщения = КлючЗначение.Значение;
					
				КонецЕсли;
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения, ЭтотОбъект, Префикс+КлючЗначение.Ключ, "Объект",Отказ);
				
			КонецЕсли;
			
		КонецЦикла;
		

		
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьПодчиненнуюТаблицу(Отказ, СтруктураОбязательныхПолей, ИмяТабличнойЧасти, МетаданныеРеквизиты)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", СтруктураШапкиДокумента.Ссылка);
	
	Запрос.Текст = "ВЫБРАТЬ
	|";
	
	Шаг = 0;
	Для Каждого КлючЗначение Из СтруктураОбязательныхПолей Цикл
		Шаг = Шаг + 1;
		
		Если (КлючЗначение.Ключ = "Количество") И (ИмяТабличнойЧасти <> "Обороты") Тогда
			
			Запрос.Текст = Запрос.Текст + " ВводНачальныхОстатков.Количество КАК Количество ";
			
			Запрос.Текст = Запрос.Текст + ?(СтруктураОбязательныхПолей.Количество() = Шаг, "", ",") + "
			|";
		Иначе
			
			Запрос.Текст = Запрос.Текст + "ВводНачальныхОстатков." + КлючЗначение.Ключ + ?(СтруктураОбязательныхПолей.Количество() = Шаг, "", ",") + "
			|";
		КонецЕсли;
		
	КонецЦикла;
	
	Запрос.Текст = Запрос.Текст + "
	               |ИЗ
	               |	Документ.ВводНачальныхОстатков." + ИмяТабличнойЧасти + " КАК ВводНачальныхОстатков
	               |ГДЕ
	               |	ВводНачальныхОстатков.Ссылка = &ТекущийДокумент
				   |";
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	Возврат РезультатЗапроса;
	
КонецФункции

// ИНАГРО++
Процедура ЗаполнитьТаблицуОС(Параметры)
	
	КоличествоСтрокОС = Параметры.КоличествоСтрокОС; 
	
	Для Счетчик = 1 По КоличествоСтрокОС Цикл
		
		НовоеОС = Справочники.ОсновныеСредства.СоздатьЭлемент(); 		
		НовоеОС.Наименование	   = Параметры.ИНАГРО_БиологическийАктив.Наименование;
		НовоеОС.НаименованиеПолное = Параметры.ИНАГРО_БиологическийАктив.НаименованиеПолное;		
		НовоеОС.Записать();
		
		СтрокаТЧ = ОС.Добавить();
		СтрокаТЧ.ОсновноеСредство              = НовоеОС.Ссылка;
		СтрокаТЧ.ИнвентарныйНомерРегл          = НовоеОС.Ссылка.Код;
		СтрокаТЧ.ПервоначальнаяСтоимостьБУ 	   = Параметры.Цена;
		СтрокаТЧ.ПервоначальнаяСтоимостьНУ 	   = Параметры.Цена;
		СтрокаТЧ.ТекущаяСтоимостьБУ 		   = Параметры.Цена;
		СтрокаТЧ.БалансоваяСтоимостьНУ		   = Параметры.Цена;
		СтрокаТЧ.НакопленнаяАмортизацияБУ	   = Параметры.НакопленнаяАмортизацияБУ;
		СтрокаТЧ.НакопленнаяАмортизацияНУ	   = Параметры.НакопленнаяАмортизацияБУ;
		СтрокаТЧ.СпособНачисленияАмортизацииБУ = Перечисления.СпособыНачисленияАмортизацииОС.Прямолинейный;
		СтрокаТЧ.СчетУчетаБУ				   = Параметры. СчетУчетаБУ;
		СтрокаТЧ.СчетАмортизацииБУ			   = ПланыСчетов.Хозрасчетный.НакопленнаяАмортизацияДолгосрочныхБиологическихАктивов;
		
		Если Параметры.ИмяТабличнойЧасти = "ИНАГРО_БиологическиеАктивыЖивотные" Тогда
			СтрокаТЧ.НалоговаяГруппаОС = Справочники.НалоговыеГруппыОсновныхСредств.ОСГруппа7;
		Иначе
			СтрокаТЧ.НалоговаяГруппаОС = Справочники.НалоговыеГруппыОсновныхСредств.ОСГруппа8;
		КонецЕсли;	
		
		СтрокаТЧ.НачислятьАмортизациюБУ		   = Истина;
		
	КонецЦикла;
	        	
КонецПроцедуры

Процедура ОбработкаПроведения_БиологическиеАктивы(Отказ)
		
	Если Отказ = Истина Тогда
		Возврат;	
	КонецЕсли;	
	
	ФормированиеПроводокБух_БиологическиеАктивыЖивотные(ИНАГРО_БиологическиеАктивыЖивотные);
	ФормированиеПроводокБух_БиологическиеАктивыРастения(ИНАГРО_БиологическиеАктивыРастения);
	
КонецПроцедуры

Процедура ПроверитьЗаполнение_БиологическиеАктивыЖивотные(Отказ)
	
	МетаданныеРеквизиты = ЭтотОбъект.Метаданные().ТабличныеЧасти.ИНАГРО_БиологическиеАктивыЖивотные.Реквизиты;
	
	Для Каждого СтрокаТЧ Из ИНАГРО_БиологическиеАктивыЖивотные Цикл		
		ПроверкаПоСтроке_БиологическиеАктивы("ИНАГРО_БиологическиеАктивыЖивотные", СтрокаТЧ, МетаданныеРеквизиты, Отказ);				
	КонецЦикла;

	Если АмортизацияБА Тогда
		Если ИНАГРО_ОбщийВызовСервераПовтИсп.ЕстьБСПУ() Тогда
			МодульИНАГРО_БиологическиеАктивы = ОбщегоНазначения.ОбщийМодуль("ИНАГРО_БиологическиеАктивы");		
			МодульИНАГРО_БиологическиеАктивы.ИНАГРО_ПроверитьСоответствиеДокументаОС(ЭтотОбъект, "ИНАГРО_БиологическиеАктивыЖивотные", Истина, Отказ);		
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьЗаполнение_БиологическиеАктивыРастения(Отказ)
	
	МетаданныеРеквизиты = ЭтотОбъект.Метаданные().ТабличныеЧасти.ИНАГРО_БиологическиеАктивыЖивотные.Реквизиты;
	
	Для Каждого СтрокаТЧ ИЗ ИНАГРО_БиологическиеАктивыРастения Цикл		
		ПроверкаПоСтроке_БиологическиеАктивы("ИНАГРО_БиологическиеАктивыРастения", СтрокаТЧ, МетаданныеРеквизиты, Отказ);				
	КонецЦикла;	
	
	Если АмортизацияБА Тогда
		Если ИНАГРО_ОбщийВызовСервераПовтИсп.ЕстьБСПУ() Тогда
			МодульИНАГРО_БиологическиеАктивы = ОбщегоНазначения.ОбщийМодуль("ИНАГРО_БиологическиеАктивы");		
			МодульИНАГРО_БиологическиеАктивы.ИНАГРО_ПроверитьСоответствиеДокументаОС(ЭтотОбъект, "ИНАГРО_БиологическиеАктивыРастения", Истина, Отказ);		
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры 

Процедура ПроверкаПоСтроке_БиологическиеАктивы(ИмяТабличнойЧасти, СтрокаТЧ, МетаданныеРеквизиты, Отказ)	
		
	Если СтруктураШапкиДокумента.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.БиологическиеАктивы Тогда
		
		СтруктураОбязательныхРеквизитов = Новый Структура("НомерСтроки");
		
		Если ИмяТабличнойЧасти = "ИНАГРО_БиологическиеАктивыЖивотные" Тогда
			НаименованиеТабличнойЧасти = "Животноводство"; 			
		ИначеЕсли ИмяТабличнойЧасти = "ИНАГРО_БиологическиеАктивыРастения" Тогда 			
			НаименованиеТабличнойЧасти = "Растениеводство";			
		КонецЕсли; 
		
		Если НЕ СтрокаТЧ.Номенклатура.НачислятьАмортизацию Тогда
			
			СтруктураОбязательныхРеквизитов.Вставить("СчетУчета");
		
			Если СтруктураШапкиДокумента.ЕстьНДС Тогда
				СтруктураОбязательныхРеквизитов.Вставить("НалоговоеНазначение");
			КонецЕсли; 
		
		КонецЕсли;
		
	КонецЕсли;	
	
	Для Каждого КлючЗначение Из СтруктураОбязательныхРеквизитов Цикл
		
		Значение = СтрокаТЧ[КлючЗначение.Ключ];
		Если НЕ ЗначениеЗаполнено(Значение) Тогда 
			
			Если НЕ ЗначениеЗаполнено(КлючЗначение.Значение) Тогда
				ПредставлениеРеквизита = МетаданныеРеквизиты[КлючЗначение.Ключ].Представление();								
				ТекстСообщения = ОбщегоНазначенияБПКлиентСервер.ПолучитьТекстСообщения("Колонка", "Заполнение",
																					   СокрЛП(ПредставлениеРеквизита),
																					   СтрокаТЧ.НомерСтроки,
																					   НаименованиеТабличнойЧасти);
			Иначе
				СтрокаСообщения = КлючЗначение.Значение;				
			КонецЕсли;
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект,
															  ИмяТабличнойЧасти + "[" + (СтрокаТЧ.НомерСтроки - 1) + "]." + КлючЗначение.Ключ,
															  "Объект", Отказ);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ФормированиеПроводокБух_БиологическиеАктивыЖивотные(БиологическиеАктивыЖивотные)
	
	Операция  = Движения.Хозрасчетный;
	
	Поставщик = Справочники.Контрагенты.ПустаяСсылка();
	
	МодульИНАГРО_БиологическиеАктивы = ОбщегоНазначения.ОбщийМодуль("ИНАГРО_БиологическиеАктивы");
	
	Для Каждого СтрокаТЧ Из БиологическиеАктивыЖивотные Цикл
				
		Если МодульИНАГРО_БиологическиеАктивы.СпособОценкиБА(Организация, НачалоМесяца(Дата)) <> Перечисления.СпособыОценки.ПоСредней Тогда
			ПартияВводаОстатков = ПолучитьПартию(Поставщик);
		Иначе
			ПартияВводаОстатков = Неопределено;
		КонецЕсли; 		
		
		Если СтрокаТЧ.Сумма = 0 И СтрокаТЧ.Количество = 0 Тогда 
			Продолжить;
		КонецЕсли;
				
		// регистр Животные организации
		Если ИНАГРО_ОбщийВызовСервераПовтИсп.ЕстьБСПУ() Тогда
			
			Если СтрокаТЧ.Номенклатура.НачислятьАмортизацию
				ИЛИ (ЗначениеЗаполнено(СтрокаТЧ.СчетУчета)
				И НЕ СтрокаТЧ.СчетУчета.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.ПриобретениеВыращиваниеДолгосрочныхБиологическихАктивов)
				И НЕ СтрокаТЧ.СчетУчета = ПланыСчетов.Хозрасчетный.АрендаБА) Тогда
				
				Движение = Движения.ИНАГРО_ЖивотныеОрганизации.Добавить();					
				Движение.Период 	           = СтруктураШапкиДокумента.Дата;
				Движение.Регистратор           = Ссылка;
				Движение.ВидДвижения           = ВидДвиженияНакопления.Приход;
				Движение.КодОперации           = Перечисления.ИНАГРО_КодыОперацийУчетЖивотных.ВводНачОстатков;
				Движение.Организация           = СтруктураШапкиДокумента.Организация;
				Движение.Склад 		           = СтрокаТЧ.Склад;
				Движение.Номенклатура          = СтрокаТЧ.Номенклатура;
				Движение.Количество            = СтрокаТЧ.Количество;
				Движение.Штук 		           = СтрокаТЧ.Голов;
				Движение.Сумма 		           = СтрокаТЧ.Сумма;
				Движение.Амортизация           = СтрокаТЧ.НакопленнаяАмортизацияБУ;
				Движение.ДокументОприходования = ПартияВводаОстатков;
				
			КонецЕсли;
			
		КонецЕсли;
			
		Если АмортизацияБА И СтрокаТЧ.Номенклатура.НачислятьАмортизацию Тогда // Проводку будет делать док. ввода остатков ОС
			Продолжить;
		КонецЕсли;
				
		СчетУчета = СтрокаТЧ.СчетУчета;
		
		Проводка = СформироватьПроводкуБух(Операция, СтрокаТЧ);
		
		Проводка.КоличествоГоловДт = СтрокаТЧ.Голов;
		
		Проводка.НалоговоеНазначениеДт = СтрокаТЧ.НалоговоеНазначение;
		Если  СтруктураШапкиДокумента.ЕстьНалогНаПрибыльДо2015
			И СтрокаТЧ.НалоговоеНазначение <> Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяНеХозДеятельность Тогда
			Проводка.СуммаНУДт = СтрокаТЧ.СуммаНУ;
		КонецЕсли;
		
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "БиологическиеАктивы", СтрокаТЧ.Номенклатура);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Склады",              СтрокаТЧ.Склад);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Партии",              ПартияВводаОстатков);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты",         СтрокаТЧ.Контрагент);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ФормированиеПроводокБух_БиологическиеАктивыРастения(БиологическиеАктивыРастения)
	
	Операция  = Движения.Хозрасчетный;
	
	Поставщик = Справочники.Контрагенты.ПустаяСсылка();
	
	МодульИНАГРО_БиологическиеАктивы = ОбщегоНазначения.ОбщийМодуль("ИНАГРО_БиологическиеАктивы");

	Для Каждого СтрокаТЧ Из БиологическиеАктивыРастения Цикл
				
		Если МодульИНАГРО_БиологическиеАктивы.СпособОценкиБА(Организация, НачалоМесяца(Дата)) <> Перечисления.СпособыОценки.ПоСредней Тогда
			ПартияВводаОстатков = ПолучитьПартию(Поставщик);
		Иначе
			ПартияВводаОстатков = Неопределено;
		КонецЕсли;
		
		Если СтрокаТЧ.Сумма = 0 И СтрокаТЧ.Количество = 0 Тогда 
			Продолжить;
		КонецЕсли;
		
		// регистр Растения организации
		Если ИНАГРО_ОбщийВызовСервераПовтИсп.ЕстьБСПУ() Тогда
			
			Если СтрокаТЧ.Номенклатура.НачислятьАмортизацию
				ИЛИ (ЗначениеЗаполнено(СтрокаТЧ.СчетУчета)
				И НЕ СтрокаТЧ.СчетУчета.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.ПриобретениеВыращиваниеДолгосрочныхБиологическихАктивов)
				И НЕ СтрокаТЧ.СчетУчета = ПланыСчетов.Хозрасчетный.АрендаБА) Тогда
				
				Движение = Движения.ИНАГРО_РастенияОрганизации.Добавить();				
				Движение.Период 	           = СтруктураШапкиДокумента.Дата;
				Движение.Регистратор           = Ссылка;
				Движение.ВидДвижения           = ВидДвиженияНакопления.Приход;
				Движение.КодОперации           = Перечисления.ИНАГРО_КодыОперацийУчетРастений.ВводНачОстатков;
				Движение.Организация           = СтруктураШапкиДокумента.Организация;
				Движение.Склад 		           = СтрокаТЧ.Склад;
				Движение.Номенклатура          = СтрокаТЧ.Номенклатура;
				Движение.Количество            = СтрокаТЧ.Количество;
				Движение.Сумма 		           = СтрокаТЧ.Сумма;
				Движение.Амортизация           = СтрокаТЧ.НакопленнаяАмортизацияБУ;
				Движение.ДокументОприходования = ПартияВводаОстатков;
				
			КонецЕсли;
			
		КонецЕсли;
			
		Если АмортизацияБА И СтрокаТЧ.Номенклатура.НачислятьАмортизацию Тогда //  Проводку будет делать док. ввода остатков ОС
			Продолжить;
		КонецЕсли;
				
		СчетУчета = СтрокаТЧ.СчетУчета;
		
		Проводка = СформироватьПроводкуБух(Операция, СтрокаТЧ);
		
		Проводка.НалоговоеНазначениеДт = СтрокаТЧ.НалоговоеНазначение;
		Если  СтруктураШапкиДокумента.ЕстьНалогНаПрибыльДо2015
			И СтрокаТЧ.НалоговоеНазначение <> Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяНеХозДеятельность Тогда
			Проводка.СуммаНУДт = СтрокаТЧ.СуммаНУ;
		КонецЕсли;
		
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "БиологическиеАктивы", СтрокаТЧ.Номенклатура);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Склады",              СтрокаТЧ.Склад);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Партии",              ПартияВводаОстатков);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты",         СтрокаТЧ.Контрагент);
		
	КонецЦикла;
	
КонецПроцедуры 

АмортизацияБА = Ложь;
Если ИНАГРО_ОбщийВызовСервераПовтИсп.ЕстьБСПУ() Тогда
	АмортизацияБА = Константы.ИНАГРО_НачислятьАмортизациюБА.Получить();
КонецЕсли;
// ИНАГРО--

мТаблицаУсловий = Новый ТаблицаЗначений();
мТаблицаУсловий.Колонки.Добавить("ИмяРеквизита");
мТаблицаУсловий.Колонки.Добавить("ВидСравнения");
мТаблицаУсловий.Колонки.Добавить("ЗначениеРеквизита");
мТаблицаУсловий.Колонки.Добавить("УсловиеОбъединения"); 

#КонецЕсли
