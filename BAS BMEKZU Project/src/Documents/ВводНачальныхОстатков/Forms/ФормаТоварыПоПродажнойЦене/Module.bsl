////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	//ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтаФорма, ДополнительныеОтчетыИОбработкиКлиентСервер.ТипФормыОбъекта());
	
	Если Параметры.Ключ.Пустая() Тогда
		ПодготовитьФормуНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом

	ПодготовитьФормуНаСервере();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)

	Оповестить("ОбновитьФормуПомощникаВводаОстатков", Объект.Организация, "ВводНачальныхОстатков");

КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	Документы.ВводНачальныхОстатков.УстановитьЗаголовокФормы(ЭтаФорма);
	УправлениеФормойСервер();
	
	УстановитьСостояниеДокумента();

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)

	ОбщегоНазначенияБПКлиент.ОбработкаОповещенияФормыДокумента(ЭтаФорма, Объект.Ссылка, ИмяСобытия, Параметр, Источник);

КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	//ПустыеСтроки = ТекущийОбъект.ТоварыПоПродажнойЦене.НайтиСтроки(Новый Структура("СчетУчета",ПланыСчетов.Хозрасчетный.ПустаяСсылка()));
	//Для каждого Строка Из ПустыеСтроки Цикл
	//	ТекущийОбъект.ТоварыПоПродажнойЦене.Удалить(Строка);
	//КонецЦикла; 
	
	ПеренумероватьТЧ(ТекущийОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

#КонецОбласти 

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)

	Если НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДатаДокумента) Тогда
		// Изменение времени не влияет на поведение документа.
		ТекущаяДатаДокумента = Объект.Дата;
		Возврат;
	КонецЕсли;

	// Общие проверки условий по датам.
	ТребуетсяВызовСервера = ОбщегоНазначенияБПКлиент.ТребуетсяВызовСервераПриИзмененииДатыДокумента(Объект.Дата, 
		ТекущаяДатаДокумента);

	// Если определили, что изменение даты может повлиять на какие-либо параметры, 
	// то передаем обработку на сервер.
	Если ТребуетсяВызовСервера Тогда
		ДатаПриИзмененииСервер();
	КонецЕсли;
	
	// Запомним новую дату документа.
	ТекущаяДатаДокумента = Объект.Дата;

КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)

	ОрганизацияПриИзмененииСервер();

КонецПроцедуры

#КонецОбласти 

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ 

#Область ОбработчикиСобытийТаблицыФормы

&НаКлиенте
Процедура ТоварыВРозницеНТТНалоговоеНазначениеПриИзменении(Элемент)
	ТекущаяСтрока = Элементы.ТоварыВРозницеНТТ.ТекущиеДанные;
	РассчитатьСуммуНУ(ТекущаяСтрока);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыВРозницеАТТКоличествоПриИзменении(Элемент)
	ТекущаяСтрока = Элементы.ТоварыВРозницеАТТ.ТекущиеДанные;
	
	ТекущаяСтрока.Сумма = ТекущаяСтрока.Количество * ТекущаяСтрока.Цена;   
	ТекущаяСтрока.СуммаПродажи = ТекущаяСтрока.Количество * ТекущаяСтрока.ЦенаПродажи;   

	РассчитатьСуммуНУ(ТекущаяСтрока);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыВРозницеНТТЦенеКоличествоПриИзменении(Элемент)
	ТекущаяСтрока = Элементы.ТоварыВРозницеНТТ.ТекущиеДанные;
	РассчитатьСуммуНУ(ТекущаяСтрока);

КонецПроцедуры

&НаКлиенте
Процедура ТоварыВРозницеНТТЦенаПриИзменении(Элемент)
	ДанныеТекущейСтроки = Элементы.ТоварыВРозницеНТТ.ТекущиеДанные;
	ДанныеТекущейСтроки.Сумма = ДанныеТекущейСтроки.Количество * ДанныеТекущейСтроки.Цена;
    РассчитатьСуммуНУ(ДанныеТекущейСтроки);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыВРозницеАТТЦенаПриИзменении(Элемент)
	ДанныеТекущейСтроки = Элементы.ТоварыВРозницеАТТ.ТекущиеДанные;
	ДанныеТекущейСтроки.Сумма = ДанныеТекущейСтроки.Количество * ДанныеТекущейСтроки.Цена;
    РассчитатьСуммуНУ(ДанныеТекущейСтроки);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыВРозницеАТТПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	ТекущиеДанные = Элементы.ТоварыВРозницеАТТ.ТекущиеДанные;
	ТекущиеДанные.АТТ = Истина;
	Если НоваяСтрока Тогда
        ТекущиеДанные.СчетУчета = ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахАТТ");
 		Если Не ЕстьНДС Тогда
			ТекущиеДанные.НалоговоеНазначение = ПредопределенноеЗначение("Справочник.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяХозДеятельность");
		КонецЕсли;
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура ТоварыВРозницеНТТПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	ТекущиеДанные = Элементы.ТоварыВРозницеНТТ.ТекущиеДанные;
	ТекущиеДанные.НТТ = Истина;
	Если НоваяСтрока Тогда
		ТекущиеДанные.СчетУчета = ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахНТТ");
		Если Не ЕстьНДС Тогда
			ТекущиеДанные.НалоговоеНазначение = ПредопределенноеЗначение("Справочник.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяХозДеятельность");
		КонецЕсли;
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура ТоварыВРозницеНТТНоменклатураПриИзменении(Элемент)
	ТекущаяСтрока = Элементы.ТоварыВРозницеНТТ.ТекущиеДанные;
	ТоварыВРозницеНоменклатураПриИзменении(ТекущаяСтрока);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыВРозницеАТТНоменклатураПриИзменении(Элемент)
	ТекущаяСтрока = Элементы.ТоварыВРозницеАТТ.ТекущиеДанные;
	ТоварыВРозницеНоменклатураПриИзменении(ТекущаяСтрока);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыВРозницеНоменклатураПриИзменении(ТекущаяСтрока)
	Если ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура) И ЗначениеЗаполнено(ТекущаяСтрока.Магазин) Тогда
		ТекущаяСтрока.ЦенаПродажи = ПолучитьЦенуНоменклатурыНаСервере(ТекущаяСтрока.Номенклатура, ТекущаяСтрока.Магазин, 
		Объект.Дата, ВалютаРегламентированногоУчета);
		
		ТекущаяСтрока.СуммаПродажи = ТекущаяСтрока.Количество * ТекущаяСтрока.ЦенаПродажи;														
	КонецЕсли;															
КонецПроцедуры

&НаКлиенте
Процедура ТоварыВРозницеНТТЦенаПродажиПриИзменении(Элемент)
	ТекущаяСтрока = Элементы.ТоварыВРозницеНТТ.ТекущиеДанные;
	ТекущаяСтрока.СуммаПродажи = ТекущаяСтрока.Количество * ТекущаяСтрока.ЦенаПродажи;
КонецПроцедуры

&НаКлиенте
Процедура ТоварыВРозницеАТТЦенаПродажиПриИзменении(Элемент)
	ТекущаяСтрока = Элементы.ТоварыВРозницеАТТ.ТекущиеДанные;
	ТекущаяСтрока.СуммаПродажи = ТекущаяСтрока.Количество * ТекущаяСтрока.ЦенаПродажи;
КонецПроцедуры

&НаКлиенте
Процедура ТоварыВРозницеАТТСуммаПродажиПриИзменении(Элемент)
	ТекущаяСтрока = Элементы.ТоварыВРозницеАТТ.ТекущиеДанные;
	ПересчитатьЦенуТоваровПоПродажнойЦене(ТекущаяСтрока);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыВРозницеНТТСуммаПродажиПриИзменении(Элемент)
	ТекущаяСтрока = Элементы.ТоварыВРозницеНТТ.ТекущиеДанные;
	ПересчитатьЦенуТоваровПоПродажнойЦене(ТекущаяСтрока);
КонецПроцедуры

#КонецОбласти 

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОткрытьФормуНастройкиРежима(Команда)

	ПараметрыНастройкиРежима	= Новый Структура;
	ПараметрыНастройкиРежима.Вставить("ВводитьОстаткиЗапасовВРазрезеДатОприходования",	Объект.ВводитьОстаткиЗапасовВРазрезеДатОприходования);
	ПараметрыНастройкиРежима.Вставить("ВводитьОстаткиЗапасовВРазрезеПоставщиков",		Объект.ВводитьОстаткиЗапасовВРазрезеПоставщиков);
	ПараметрыНастройкиРежима.Вставить("ВводитьСуммыУлучшенияВключенныеВБалансовуюСтоимостьОС",	Объект.ВводитьСуммыУлучшенияВключенныеВБалансовуюСтоимостьОС);
	ПараметрыНастройкиРежима.Вставить("Организация", Объект.Организация);
	ПараметрыНастройкиРежима.Вставить("РазделУчета", Объект.РазделУчета);
	ПараметрыНастройкиРежима.Вставить("Дата",		 Объект.Дата);
	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ОткрытьФормуНастройкиРежимаЗавершение", ЭтотОбъект);
	
	ОткрытьФорму("Документ.ВводНачальныхОстатков.Форма.ФормаНастройкиРежима",
		ПараметрыНастройкиРежима,,,,,ОповещениеОЗакрытии);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуНастройкиРежимаЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	РезультатНастройкиРежима = РезультатЗакрытия;
	
	Если ТипЗнч(РезультатНастройкиРежима) = Тип("Структура") Тогда
		
		Модифицированность	= Истина;
		
		ЗаполнитьЗначенияСвойств(Объект, РезультатНастройкиРежима);
		
		Объект.Дата	= РезультатНастройкиРежима.ДатаВводаОстатков;
		ДатаПриИзмененииСервер();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьОписаниеРаздела(Команда)

	ДанныеЗаполнения	= Новый Структура;
	ДанныеЗаполнения.Вставить("Дата",		 Объект.Дата);
	ДанныеЗаполнения.Вставить("Организация", Объект.Организация);
	ДанныеЗаполнения.Вставить("РазделУчета", Объект.РазделУчета);

	ОткрытьФорму("Документ.ВводНачальныхОстатков.Форма.ФормаСправки", Новый Структура("ДанныеЗаполнения", ДанныеЗаполнения), ЭтаФорма, ВариантОткрытияОкна.ОтдельноеОкно);

КонецПроцедуры

#КонецОбласти 

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ БСП

#Область СлужебныеПроцедурыФункцииБСП

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти 

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

#Область СлужебныеПроцедурыФункции 

&НаСервере
Процедура ПодготовитьФормуНаСервере()
	
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтотОбъект);

	ТекущаяДатаДокумента			= Объект.Дата;

	ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
    ЕстьНалогНаПрибыльДо2015 = УчетнаяПолитика.ПлательщикНалогаНаПрибыльДо2015(Объект.Организация, ТекущаяДатаДокумента);
	
	Элементы.ТоварыВРозницеНТТСтавкаНДС.Видимость = ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахНТТ.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтавкиНДС) <> Неопределено;
    Элементы.ТоварыВРозницеНТТСуммаНУ.Видимость = ЕстьНалогНаПрибыльДо2015;
	Элементы.ТоварыВРозницеАТТСуммаНУ.Видимость = ЕстьНалогНаПрибыльДо2015;
	
	Если ТипЗнч(Параметры) = Тип("ДанныеФормыСтруктура") Тогда
		Параметры.Свойство("ОткрытиеИзОбработкиВводаНачальныхОстатков", ОткрытиеИзОбработкиВводаНачальныхОстатков);
	КонецЕсли;

	Документы.ВводНачальныхОстатков.УстановитьЗаголовокФормы(ЭтаФорма);
	УправлениеФормойСервер();
	
	УстановитьСостояниеДокумента();

КонецПроцедуры

&НаСервере
Процедура УправлениеФормойСервер()

	// Установка режима "Только просмотр" для поля "Дата"
	Элементы.Дата.ТолькоПросмотр =
		ЗначениеЗаполнено(Документы.ВводНачальныхОстатков.ПолучитьДатуВводаОстатков(Объект.Организация));

	Документы.ВводНачальныхОстатков.УстановитьПараметрыФункциональныхОпцийФормыДокумента(ЭтаФорма);

	ЕстьНДС                        = УчетнаяПолитика.ПлательщикНДС(Объект.Организация, НачалоМесяца(ТекущаяДатаДокумента));	

	// Ограничение выбора счета учета:
	МассивСчетовТоварыВРозницеАТТ = Новый Массив;
	МассивСчетовТоварыВРозницеНТТ = Новый Массив;
	
	МассивИсключений = Новый Массив;
	
	МассивСчетовТоварыВРозницеАТТ.Добавить(ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахАТТ); //2821
	СчетаДляОтбораТоварыВРозницеАТТ = БухгалтерскийУчет.ПолучитьМассивСчетовССубсчетами(МассивСчетовТоварыВРозницеАТТ, Ложь, , , МассивИсключений);
	БухгалтерскийУчетКлиентСервер.ИзменитьПараметрыВыбораСчета(Элементы.ТоварыВРозницеАТТСчетУчета, СчетаДляОтбораТоварыВРозницеАТТ);
	Элементы.ТоварыВРозницеАТТ.ОтборСтрок = Новый ФиксированнаяСтруктура("АТТ",Истина);
	
	
	МассивСчетовТоварыВРозницеНТТ.Добавить(ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахНТТ); //2822
	СчетаДляОтбораТоварыВРозницеНТТ = БухгалтерскийУчет.ПолучитьМассивСчетовССубсчетами(МассивСчетовТоварыВРозницеНТТ, Ложь, , , МассивИсключений);
	БухгалтерскийУчетКлиентСервер.ИзменитьПараметрыВыбораСчета(Элементы.ТоварыВРозницеНТТСчетУчета, СчетаДляОтбораТоварыВРозницеНТТ);
	Элементы.ТоварыВРозницеНТТ.ОтборСтрок = Новый ФиксированнаяСтруктура("НТТ",Истина);
	
	Для каждого СтрокаТаблицы Из Объект.ТоварыПоПродажнойЦене Цикл
		СтрокаТаблицы.АТТ = СчетаДляОтбораТоварыВРозницеАТТ.Найти(СтрокаТаблицы.СчетУчета) <> Неопределено;
		СтрокаТаблицы.НТТ = СчетаДляОтбораТоварыВРозницеНТТ.Найти(СтрокаТаблицы.СчетУчета) <> Неопределено;
	КонецЦикла;
	

КонецПроцедуры

&НаСервере
Процедура ДатаПриИзмененииСервер()

	Документы.ВводНачальныхОстатков.УстановитьПараметрыФункциональныхОпцийФормыДокумента(ЭтаФорма);
	
	УправлениеФормойСервер();

КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииСервер()

	ДатаВводаОстатков	= Документы.ВводНачальныхОстатков.ПолучитьДатуВводаОстатков(Объект.Организация);
	
	Если ЗначениеЗаполнено(ДатаВводаОстатков) Тогда
		Объект.Дата	= ДатаВводаОстатков;
	КонецЕсли;

	Документы.ВводНачальныхОстатков.УстановитьПараметрыФункциональныхОпцийФормыДокумента(ЭтаФорма);
	
	УправлениеФормойСервер();

КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьЦенуНоменклатурыНаСервере(Номенклатура, Магазин, Дата, ВалютаРегламентированногоУчета)

	Возврат Ценообразование.ПолучитьЦенуНоменклатуры(Номенклатура, Магазин.ТипЦенРозничнойТорговли, 
															Дата, ВалютаРегламентированногоУчета, 1, 1);

КонецФункции // ПолучитьЦенуНоменклатуры()

&НаКлиенте
Процедура ТоварыВРозницеАТТНалоговоеНазначениеПриИзменении(Элемент)
	ТекущаяСтрока = Элементы.ТоварыВРозницеАТТ.ТекущиеДанные;
	РассчитатьСуммуНУ(ТекущаяСтрока);
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьСуммуНУ(ТекущаяСтрока)
	
 	ТекущаяСтрока.СуммаНУ = ?(ТекущаяСтрока.НалоговоеНазначение = ПредопределенноеЗначение("Справочник.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяНеХозДеятельность"), 0, ТекущаяСтрока.Сумма);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыВРозницеАТТСуммаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ТоварыВРозницеАТТ.ТекущиеДанные;
	ПересчитатьЦенуТоваровПоПродажнойЦене(ТекущаяСтрока);
	РассчитатьСуммуНУ(ТекущаяСтрока);	

КонецПроцедуры

&НаКлиенте
Процедура ТоварыВРозницеНТТСуммаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ТоварыВРозницеНТТ.ТекущиеДанные;
	ПересчитатьЦенуТоваровПоПродажнойЦене(ТекущаяСтрока);
	РассчитатьСуммуНУ(ТекущаяСтрока);	
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьЦенуТоваровПоПродажнойЦене(ТекущаяСтрока)

	ТекущаяСтрока.ЦенаПродажи = ?(ТекущаяСтрока.Количество <> 0, ТекущаяСтрока.Сумма/ТекущаяСтрока.Количество, ТекущаяСтрока.ЦенаПродажи);

КонецПроцедуры // ПересчитатьЦенуТоваровПоПродажнойЦене(ТекущаяСтрока)()

&НаСервере
Процедура ПеренумероватьТЧ(ТекущийОбъект)

	РасчетныйНомерСтроки = 0;
	Для Каждого СтрокаТаблицы ИЗ ТекущийОбъект.ТоварыПоПродажнойЦене Цикл
		Если СтрокаТаблицы.СчетУчета = ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахАТТ Тогда
			РасчетныйНомерСтроки = РасчетныйНомерСтроки + 1;
			СтрокаТаблицы.НомерСтрокиТЧ = РасчетныйНомерСтроки;
		КонецЕсли;
	КонецЦикла;
	Для Каждого СтрокаТаблицы ИЗ ТекущийОбъект.ТоварыПоПродажнойЦене Цикл
		Если СтрокаТаблицы.СчетУчета <> ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахАТТ Тогда
			РасчетныйНомерСтроки = РасчетныйНомерСтроки + 1;
			СтрокаТаблицы.НомерСтрокиТЧ = РасчетныйНомерСтроки;
		КонецЕсли;
	КонецЦикла;

	
КонецПроцедуры

&НаСервере
Процедура УстановитьСостояниеДокумента()
	
	СостояниеДокумента = ОбщегоНазначенияБП.СостояниеДокумента(Объект);
	
КонецПроцедуры
 
#КонецОбласти 


