#Область ОбработчикиСобытийФормы 

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	Если Параметры.Ключ.Пустая() Тогда
		ПодготовитьФормуНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	ПодготовитьФормуНаСервере();

КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)

	Оповестить("ОбновитьФормуПомощникаВводаОстатков", Объект.Организация, "ВводНачальныхОстатков");

КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	Документы.ВводНачальныхОстатков.УстановитьЗаголовокФормы(ЭтаФорма);
	
	ЗаполнитьДобавленныеКолонкиТаблиц();
	
	УправлениеФормойСервер();
	
	УстановитьСостояниеДокумента();

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)

	Если ИмяСобытия = "ВводНачальныхОстатков_ВозвратДокументСсылкаОС" Тогда
		ВводНачальныхОстатков_ВозвратДокументСсылкаОС(Параметр);
	КонецЕсли;

КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)

	Если НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДатаДокумента) Тогда
		// Изменение времени не влияет на поведение документа.
		ТекущаяДатаДокумента = Объект.Дата;
		Возврат;
	КонецЕсли;

	// Общие проверки условий по датам.
	ТребуетсяВызовСервера = ОбщегоНазначенияБПКлиент.ТребуетсяВызовСервераПриИзмененииДатыДокумента(Объект.Дата, 
		ТекущаяДатаДокумента);

	// Если определили, что изменение даты может повлиять на какие-либо параметры, 
	// то передаем обработку на сервер.
	Если ТребуетсяВызовСервера Тогда
		ДатаПриИзмененииСервер();
	КонецЕсли;
	
	// Запомним новую дату документа.
	ТекущаяДатаДокумента = Объект.Дата;

КонецПроцедуры

&НаСервере
Процедура ДатаПриИзмененииСервер()

	Документы.ВводНачальныхОстатков.УстановитьПараметрыФункциональныхОпцийФормыДокумента(ЭтаФорма);
	
	УправлениеФормойСервер();

КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)

	ОрганизацияПриИзмененииСервер();

КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииСервер()

	ДатаВводаОстатков	= Документы.ВводНачальныхОстатков.ПолучитьДатуВводаОстатков(Объект.Организация);
	
	Если ЗначениеЗаполнено(ДатаВводаОстатков) Тогда
		Объект.Дата	= ДатаВводаОстатков;
	КонецЕсли;

	Документы.ВводНачальныхОстатков.УстановитьПараметрыФункциональныхОпцийФормыДокумента(ЭтаФорма);
	
	УправлениеФормойСервер();

КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(
		Элемент.ТекстРедактирования,
		ЭтотОбъект,
		"Объект.Комментарий"
	);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыИНАГРО_БиологическиеАктивыЖивотные

&НаКлиенте
Процедура ИНАГРО_БиологическиеАктивыЖивотныеПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	
	Если НоваяСтрока И Не Копирование Тогда
		Если Не ЕстьНДС Тогда
			ТекущиеДанные.НалоговоеНазначение = ПредопределенноеЗначение("Справочник.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяХозДеятельность");
		КонецЕсли;
	КонецЕсли; 	
		
	Если Копирование Тогда			
		ТекущиеДанные.ДокументОС = ПредопределенноеЗначение("Документ.ВводНачальныхОстатков.ПустаяСсылка");
	КонецЕсли;	

КонецПроцедуры

&НаКлиенте
Процедура ИНАГРО_БиологическиеАктивыЖивотныеНоменклатураПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ИНАГРО_БиологическиеАктивыЖивотные.ТекущиеДанные;
	
	Если ИНАГРО_ОбщийВызовСервераПовтИсп.ЕстьБСПУ() Тогда
		
		МодульИНАГРО_БиологическиеАктивы = ОбщегоНазначенияКлиент.ОбщийМодуль("ИНАГРО_БиологическиеАктивы");
		
		Если НЕ МодульИНАГРО_БиологическиеАктивы.ЭтоЖивотное(ТекущиеДанные.Номенклатура) Тогда
			СтрокаСообщения = НСтр("ru='Выбрано не животное!';uk='Обрана не тварина!'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения, , "ИНАГРО_БиологическиеАктивыЖивотные" + "[" + (ТекущиеДанные.НомерСтроки - 1) + "].Номенклатура", "Объект");
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	ДанныеСтрокиТаблицы = Новый Структура(
		"Номенклатура, ПрименитьЦенуККоличествуГолов, СчетУчета,
		|НалоговоеНазначение, НачислятьАмортизацию");
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, ТекущиеДанные);
	
	ДанныеОбъекта = Новый Структура("Дата, Организация");	
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);  	
			 	
	ИНАГРО_БиологическиеАктивыЖивотныеНоменклатураПриИзмененииНаСервере(ДанныеСтрокиТаблицы, ДанныеОбъекта);
			
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтрокиТаблицы);

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ИНАГРО_БиологическиеАктивыЖивотныеНоменклатураПриИзмененииНаСервере(СтрокаТабличнойЧасти, Знач ДанныеОбъекта)	
		
	Если СтрокаТабличнойЧасти.Номенклатура.НачислятьАмортизацию Тогда
		
		СтрокаТабличнойЧасти.ПрименитьЦенуККоличествуГолов = Истина;
		СтрокаТабличнойЧасти.СчетУчета 			           = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
		СтрокаТабличнойЧасти.НалоговоеНазначение           = Справочники.НалоговыеНазначенияАктивовИЗатрат.ПустаяСсылка();
		
	Иначе	
		
		СтрокаТабличнойЧасти.ПрименитьЦенуККоличествуГолов = Ложь; 
		
		Если ИНАГРО_ОбщийВызовСервераПовтИсп.ЕстьБСПУ() Тогда
			МодульИНАГРО_БиологическиеАктивы = ОбщегоНазначения.ОбщийМодуль("ИНАГРО_БиологическиеАктивы");
			СведенияОНоменклатуре = МодульИНАГРО_БиологическиеАктивы.ПолучитьСведенияОБА(СтрокаТабличнойЧасти.Номенклатура, ДанныеОбъекта);
		КонецЕсли;
		
		Если СведенияОНоменклатуре = Неопределено Тогда
			Возврат;
		КонецЕсли; 	 	
		
		СтрокаТабличнойЧасти.НалоговоеНазначение           = СведенияОНоменклатуре.СчетаУчета.НалоговоеНазначение;
		
	КонецЕсли;
	
	СтрокаТабличнойЧасти.НачислятьАмортизацию = СтрокаТабличнойЧасти.Номенклатура.НачислятьАмортизацию;	

КонецПроцедуры

&НаКлиенте
Процедура ИНАГРО_БиологическиеАктивыЖивотныеКоличествоПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ИНАГРО_БиологическиеАктивыЖивотные.ТекущиеДанные;
	
	Если НЕ ТекущиеДанные.ПрименитьЦенуККоличествуГолов Тогда
		ТекущиеДанные.Сумма = ТекущиеДанные.Количество * ТекущиеДанные.Цена;   
	КонецЕсли;
	
	РассчитатьСуммуНУ(ТекущиеДанные);

КонецПроцедуры

&НаКлиенте
Процедура ИНАГРО_БиологическиеАктивыЖивотныеГоловПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ИНАГРО_БиологическиеАктивыЖивотные.ТекущиеДанные;
	
	Если ТекущиеДанные.ПрименитьЦенуККоличествуГолов Тогда
		ТекущиеДанные.Сумма = ТекущиеДанные.Цена * ТекущиеДанные.Голов;
	КонецЕсли;
	
	РассчитатьСуммуНУ(ТекущиеДанные);

КонецПроцедуры

&НаКлиенте
Процедура ИНАГРО_БиологическиеАктивыЖивотныеЦенаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ИНАГРО_БиологическиеАктивыЖивотные.ТекущиеДанные;
	
	ТекущиеДанные.Сумма = ?(ТекущиеДанные.ПрименитьЦенуККоличествуГолов, ТекущиеДанные.Голов, ТекущиеДанные.Количество) * ТекущиеДанные.Цена;
	
    РассчитатьСуммуНУ(ТекущиеДанные);

КонецПроцедуры

&НаКлиенте
Процедура ИНАГРО_БиологическиеАктивыЖивотныеПрименитьЦенуККоличествуГоловПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ИНАГРО_БиологическиеАктивыЖивотные.ТекущиеДанные;
	
	РасчетноеКоличество = ?(ТекущиеДанные.ПрименитьЦенуККоличествуГолов, ТекущиеДанные.Голов, ТекущиеДанные.Количество);
	
	ТекущиеДанные.Сумма = ТекущиеДанные.Цена * РасчетноеКоличество;
		
	РассчитатьСуммуНУ(ТекущиеДанные);

КонецПроцедуры

&НаКлиенте
Процедура ИНАГРО_БиологическиеАктивыЖивотныеСуммаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ИНАГРО_БиологическиеАктивыЖивотные.ТекущиеДанные;
	
	РасчетноеКоличество = ?(ТекущиеДанные.ПрименитьЦенуККоличествуГолов, ТекущиеДанные.Голов, ТекущиеДанные.Количество);
	
	Если РасчетноеКоличество = 0 Тогда
		ТекущиеДанные.Цена = 0;
	Иначе
		ТекущиеДанные.Цена = ТекущиеДанные.Сумма / РасчетноеКоличество;
	КонецЕсли; 
		
	РассчитатьСуммуНУ(ТекущиеДанные);

КонецПроцедуры

&НаКлиенте
Процедура ИНАГРО_БиологическиеАктивыЖивотныеДокументОСПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ИНАГРО_БиологическиеАктивыЖивотные.ТекущиеДанные;
	
	ДанныеСтрокиТаблицы = Новый Структура("ДокументОС, ИндексКартинкиОС");	
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, ТекущиеДанные);
	
	ЗаполнитьДобавленныеКолонкиСтрокиТаблицы(ДанныеСтрокиТаблицы);
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтрокиТаблицы);

КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиСобытийЭлементовТаблицыФормыИНАГРО_БиологическиеАктивыРастения

&НаКлиенте
Процедура ИНАГРО_БиологическиеАктивыРастенияПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
		
	ТекущиеДанные = Элемент.ТекущиеДанные;
	
	Если НоваяСтрока И Не Копирование Тогда
		Если Не ЕстьНДС Тогда
			ТекущиеДанные.НалоговоеНазначение = ПредопределенноеЗначение("Справочник.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяХозДеятельность");
		КонецЕсли;
	КонецЕсли; 	
		
	Если Копирование Тогда				
		ТекущиеДанные.ДокументОС = ПредопределенноеЗначение("Документ.ВводНачальныхОстатков.ПустаяСсылка");		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ИНАГРО_БиологическиеАктивыРастенияНоменклатураПриИзменении(Элемент)

	ТекущиеДанные = Элементы.ИНАГРО_БиологическиеАктивыРастения.ТекущиеДанные;
	
	Если ИНАГРО_ОбщийВызовСервераПовтИсп.ЕстьБСПУ() Тогда
		
		МодульИНАГРО_БиологическиеАктивы = ОбщегоНазначенияКлиент.ОбщийМодуль("ИНАГРО_БиологическиеАктивы");
		
		Если МодульИНАГРО_БиологическиеАктивы.ЭтоЖивотное(ТекущиеДанные.Номенклатура) Тогда
			СтрокаСообщения = НСтр("ru='Выбрано не растение!';uk='Обрана не рослина!'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения, , "ИНАГРО_БиологическиеАктивыРастения" + "[" + (ТекущиеДанные.НомерСтроки - 1) + "].Номенклатура", "Объект");
			Возврат;
		КонецЕсли;
		
	КонецЕсли;

	ДанныеСтрокиТаблицы = Новый Структура(
		"Номенклатура, СчетУчета,
		|НалоговоеНазначение, НачислятьАмортизацию");
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, ТекущиеДанные);
	
	ДанныеОбъекта = Новый Структура("Дата, Организация");	
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);  	
			 	
	ИНАГРО_БиологическиеАктивыРастенияНоменклатураПриИзмененииНаСервере(ДанныеСтрокиТаблицы, ДанныеОбъекта);
			
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтрокиТаблицы);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ИНАГРО_БиологическиеАктивыРастенияНоменклатураПриИзмененииНаСервере(СтрокаТабличнойЧасти, Знач ДанныеОбъекта)	
		
	Если СтрокаТабличнойЧасти.Номенклатура.НачислятьАмортизацию Тогда
		
		СтрокаТабличнойЧасти.СчетУчета 			 = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
		СтрокаТабличнойЧасти.НалоговоеНазначение = Справочники.НалоговыеНазначенияАктивовИЗатрат.ПустаяСсылка();
		
	Иначе			
		
		Если ИНАГРО_ОбщийВызовСервераПовтИсп.ЕстьБСПУ() Тогда
			МодульИНАГРО_БиологическиеАктивы = ОбщегоНазначения.ОбщийМодуль("ИНАГРО_БиологическиеАктивы");
			СведенияОНоменклатуре = МодульИНАГРО_БиологическиеАктивы.ПолучитьСведенияОБА(СтрокаТабличнойЧасти.Номенклатура, ДанныеОбъекта);
		КонецЕсли;
	
		Если СведенияОНоменклатуре = Неопределено Тогда
			Возврат;
		КонецЕсли; 	 	
		
		СтрокаТабличнойЧасти.НалоговоеНазначение = СведенияОНоменклатуре.СчетаУчета.НалоговоеНазначение;
		
	КонецЕсли;
	
	СтрокаТабличнойЧасти.НачислятьАмортизацию = СтрокаТабличнойЧасти.Номенклатура.НачислятьАмортизацию;

КонецПроцедуры

&НаКлиенте
Процедура ИНАГРО_БиологическиеАктивыРастенияКоличествоПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ИНАГРО_БиологическиеАктивыРастения.ТекущиеДанные;
	
	ТекущиеДанные.Сумма = ТекущиеДанные.Количество * ТекущиеДанные.Цена;   
		
	РассчитатьСуммуНУ(ТекущиеДанные);

КонецПроцедуры

&НаКлиенте
Процедура ИНАГРО_БиологическиеАктивыРастенияЦенаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ИНАГРО_БиологическиеАктивыРастения.ТекущиеДанные;
	
	ТекущиеДанные.Сумма = ТекущиеДанные.Количество * ТекущиеДанные.Цена;
	
    РассчитатьСуммуНУ(ТекущиеДанные);

КонецПроцедуры

&НаКлиенте
Процедура ИНАГРО_БиологическиеАктивыРастенияСуммаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ИНАГРО_БиологическиеАктивыРастения.ТекущиеДанные; 	
		
	Если ТекущиеДанные.Количество = 0 Тогда
		ТекущиеДанные.Цена = 0;
	Иначе
		ТекущиеДанные.Цена = ТекущиеДанные.Сумма / ТекущиеДанные.Количество;
	КонецЕсли; 
		
	РассчитатьСуммуНУ(ТекущиеДанные);

КонецПроцедуры

&НаКлиенте
Процедура ИНАГРО_БиологическиеАктивыРастенияДокументОСПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ИНАГРО_БиологическиеАктивыРастения.ТекущиеДанные;
	
	ДанныеСтрокиТаблицы = Новый Структура("ДокументОС, ИндексКартинкиОС");	
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, ТекущиеДанные);
	
	ЗаполнитьДобавленныеКолонкиСтрокиТаблицы(ДанныеСтрокиТаблицы);
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтрокиТаблицы);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОткрытьФормуНастройкиРежима(Команда)

	ПараметрыНастройкиРежима	= Новый Структура;
	ПараметрыНастройкиРежима.Вставить("ВводитьОстаткиЗапасовВРазрезеДатОприходования",	Объект.ВводитьОстаткиЗапасовВРазрезеДатОприходования);
	ПараметрыНастройкиРежима.Вставить("ВводитьОстаткиЗапасовВРазрезеПоставщиков",		Объект.ВводитьОстаткиЗапасовВРазрезеПоставщиков);
	ПараметрыНастройкиРежима.Вставить("ВводитьСуммыУлучшенияВключенныеВБалансовуюСтоимостьОС",	Объект.ВводитьСуммыУлучшенияВключенныеВБалансовуюСтоимостьОС);
	ПараметрыНастройкиРежима.Вставить("Организация", Объект.Организация);
	ПараметрыНастройкиРежима.Вставить("РазделУчета", Объект.РазделУчета);
	ПараметрыНастройкиРежима.Вставить("Дата",		 Объект.Дата);
	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ОткрытьФормуНастройкиРежимаЗавершение", ЭтотОбъект);
	
	ОткрытьФорму("Документ.ВводНачальныхОстатков.Форма.ФормаНастройкиРежима",
		ПараметрыНастройкиРежима,,,,,ОповещениеОЗакрытии);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуНастройкиРежимаЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	РезультатНастройкиРежима = РезультатЗакрытия;
	
	Если ТипЗнч(РезультатНастройкиРежима) = Тип("Структура") Тогда
		
		Модифицированность	= Истина;
		
		ЗаполнитьЗначенияСвойств(Объект, РезультатНастройкиРежима);
		
		Объект.Дата	= РезультатНастройкиРежима.ДатаВводаОстатков;
		ДатаПриИзмененииСервер();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьОписаниеРаздела(Команда)

	ДанныеЗаполнения	= Новый Структура;
	ДанныеЗаполнения.Вставить("Дата",		 Объект.Дата);
	ДанныеЗаполнения.Вставить("Организация", Объект.Организация);
	ДанныеЗаполнения.Вставить("РазделУчета", Объект.РазделУчета);

	ОткрытьФорму("Документ.ВводНачальныхОстатков.Форма.ФормаСправки", Новый Структура("ДанныеЗаполнения", ДанныеЗаполнения), ЭтаФорма, ВариантОткрытияОкна.ОтдельноеОкно);

КонецПроцедуры

&НаКлиенте
Процедура СформироватьДокументыОС(Команда)
	
	Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаСтраницаЖивотные Тогда
		ИмяТабличнойЧасти = "ИНАГРО_БиологическиеАктивыЖивотные";
	ИначеЕсли Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаСтраницаРастения Тогда 
		ИмяТабличнойЧасти = "ИНАГРО_БиологическиеАктивыРастения";		
	КонецЕсли;
	
	СоздатьДокументыОС(ИмяТабличнойЧасти);
	
	УправлениеФормойСервер();

КонецПроцедуры

#КонецОбласти 

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ПодготовитьФормуНаСервере()
	
	// ДополнительныеОтчетыИОбработки
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец ДополнительныеОтчетыИОбработки

	ТекущаяДатаДокумента			= Объект.Дата;
	
	ВалютаРегламентированногоУчета	= ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();

	Если ТипЗнч(Параметры) = Тип("ДанныеФормыСтруктура") Тогда
		Параметры.Свойство("ОткрытиеИзОбработкиВводаНачальныхОстатков", ОткрытиеИзОбработкиВводаНачальныхОстатков);
	КонецЕсли;

	Документы.ВводНачальныхОстатков.УстановитьЗаголовокФормы(ЭтаФорма);
	
	УправлениеФормойСервер();

	УстановитьСостояниеДокумента();
	
КонецПроцедуры

&НаСервере
Процедура УправлениеФормойСервер()

	// Установка режима "Только просмотр" для поля "Дата"
	Элементы.Дата.ТолькоПросмотр = ЗначениеЗаполнено(Документы.ВводНачальныхОстатков.ПолучитьДатуВводаОстатков(Объект.Организация));

	Документы.ВводНачальныхОстатков.УстановитьПараметрыФункциональныхОпцийФормыДокумента(ЭтаФорма); 	

	// Установить значения реквизитов
	ЕстьНалогНаПрибыльДо2015 = УчетнаяПолитика.ПлательщикНалогаНаПрибыльДо2015(Объект.Организация, НачалоМесяца(ТекущаяДатаДокумента));
	ЕстьНДС                  = УчетнаяПолитика.ПлательщикНДС(Объект.Организация, НачалоМесяца(ТекущаяДатаДокумента));	
		
	АмортизацияБА = Константы.ИНАГРО_НачислятьАмортизациюБА.Получить();
		
	// Установить видимость
	//ВидимостьНалоговыхРеквизитов = ЕстьНДС ИЛИ ЕстьНалогНаПрибыльДо2015; 
	
	Элементы.ИНАГРО_БиологическиеАктивыЖивотныеСуммаНУ.Видимость 			 = ЕстьНалогНаПрибыльДо2015;
	Элементы.ИНАГРО_БиологическиеАктивыЖивотныеНалоговоеНазначение.Видимость = ЕстьНДС;
	Элементы.ИНАГРО_БиологическиеАктивыЖивотныеДокументОС.Видимость          = АмортизацияБА;
	
	Элементы.ИНАГРО_БиологическиеАктивыЖивотныеСформироватьДокументыОС.Доступность = АмортизацияБА;
	
	Элементы.ИНАГРО_БиологическиеАктивыРастенияСуммаНУ.Видимость 			 = ЕстьНалогНаПрибыльДо2015;
	Элементы.ИНАГРО_БиологическиеАктивыРастенияНалоговоеНазначение.Видимость = ЕстьНДС;
	Элементы.ИНАГРО_БиологическиеАктивыРастенияДокументОС.Видимость          = АмортизацияБА;

	Элементы.ИНАГРО_БиологическиеАктивыРастенияСформироватьДокументыОС.Доступность = АмортизацияБА;
	
	// Ограничение выбора счета учета:
	МассивСчетов = Новый Массив;
	
	МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.АрендаБА); // 013	
	МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.ПриобретениеВыращиваниеДолгосрочныхБиологическихАктивовНеАмортизируются); // 1551	
	МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.ДолгосрочныеБиологическиеАктивы); // 16
	МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.ТекущиеБиологическиеАктивы); // 21
			
	МассивИсключений = Новый Массив;
	МассивИсключений.Добавить(ПланыСчетов.Хозрасчетный.ДолгосрочныеБиологическиеАктивыРастениеводстваПоПервоначальнойСтоимостиАмортизируются); // 1622
	МассивИсключений.Добавить(ПланыСчетов.Хозрасчетный.ДолгосрочныеБиологическиеАктивыЖивотноводстваПоПервоначальнойСтоимостиАмортизируются); // 1642
	МассивИсключений.Добавить(ПланыСчетов.Хозрасчетный.НезрелыеДолгосрочныеБиологическиеАктивыПоПервоначальнойСтоимостиАмортизируются); // 1662
	
	СчетаДляОтбора = БухгалтерскийУчет.ПолучитьМассивСчетовССубсчетами(МассивСчетов, Ложь, , , МассивИсключений);
	БухгалтерскийУчетКлиентСервер.ИзменитьПараметрыВыбораСчета(Элементы.ИНАГРО_БиологическиеАктивыЖивотныеСчетУчета, СчетаДляОтбора);
	
	ЗаполнитьДобавленныеКолонкиТаблиц();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСостояниеДокумента()
	
	СостояниеДокумента = ОбщегоНазначенияБП.СостояниеДокумента(Объект);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДобавленныеКолонкиТаблиц(ИмяТаблицы = "")

	Если ПустаяСтрока(ИмяТаблицы) ИЛИ ИмяТаблицы = "ИНАГРО_БиологическиеАктивыЖивотные" Тогда		
		Для Каждого СтрокаТабличнойЧасти Из Объект.ИНАГРО_БиологическиеАктивыЖивотные Цикл			
			ЗаполнитьДобавленныеКолонкиСтрокиТаблицы(СтрокаТабличнойЧасти);					
			СтрокаТабличнойЧасти.НачислятьАмортизацию = СтрокаТабличнойЧасти.Номенклатура.НачислятьАмортизацию;			
		КонецЦикла;		
	КонецЕсли;
	
	Если ПустаяСтрока(ИмяТаблицы) ИЛИ ИмяТаблицы = "ИНАГРО_БиологическиеАктивыРастения" Тогда		
		Для Каждого СтрокаТабличнойЧасти Из Объект.ИНАГРО_БиологическиеАктивыРастения Цикл			
			ЗаполнитьДобавленныеКолонкиСтрокиТаблицы(СтрокаТабличнойЧасти);			
			СтрокаТабличнойЧасти.НачислятьАмортизацию = СтрокаТабличнойЧасти.Номенклатура.НачислятьАмортизацию;			
		КонецЦикла;		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьДобавленныеКолонкиСтрокиТаблицы(СтрокаТабличнойЧасти)
	
	Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.ДокументОС) Тогда
		Если СтрокаТабличнойЧасти.ДокументОС.Проведен Тогда
			СтрокаТабличнойЧасти.ИндексКартинкиОС = 1;
		ИначеЕсли СтрокаТабличнойЧасти.ДокументОС.ПометкаУдаления Тогда
			СтрокаТабличнойЧасти.ИндексКартинкиОС = 2;
		Иначе
			СтрокаТабличнойЧасти.ИндексКартинкиОС = 0;
		КонецЕсли; 
	КонецЕсли; 			
		
КонецПроцедуры

&НаКлиенте
Процедура СоздатьДокументыОС(ИмяТабличнойЧасти)
		
	Если Объект[ИмяТабличнойЧасти].Количество() > 0 Тогда
		ДополнительныеПараметры = Новый Структура("ИмяТабличнойЧасти", ИмяТабличнойЧасти);
		ТекстВопроса = НСтр("ru='Перед заполнением документ будет записан! Продолжить?';uk='Перед заповненням документ буде записаний! Продовжити?'");
		Оповещение = Новый ОписаниеОповещения("СоздатьДокументыОСЗавершение", ЭтотОбъект, ДополнительныеПараметры); 
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);		
	КонецЕсли;	
	
КонецПроцедуры	

&НаКлиенте
Процедура СоздатьДокументыОСЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда    		
		Возврат;
	КонецЕсли;
	
	ЗаписатьМодифицированныйДокумент();
	
	Для каждого СтрокаТЧ Из Объект[ДополнительныеПараметры.ИмяТабличнойЧасти] Цикл				 
		
		СтрокаТЧ.IDСтроки = Новый УникальныйИдентификатор;
		
		Если ЗначениеЗаполнено(СтрокаТЧ.Номенклатура) И ПолучитьЗначениеРеквизита(СтрокаТЧ.Номенклатура, "НачислятьАмортизацию") Тогда
			СоздатьДокументОС_ВводНачальныхОстатков(СтрокаТЧ, ДополнительныеПараметры.ИмяТабличнойЧасти); 				
		КонецЕсли;
			
	КонецЦикла; 

КонецПроцедуры

&НаКлиенте
Процедура СоздатьДокументОС_ВводНачальныхОстатков(Строка, ИмяТабличнойЧасти)
	
	Если ЗначениеЗаполнено(Строка.ДокументОС) Тогда 
				 				
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Ключ",  			  Строка.ДокументОС);		
		
		ОткрытьФорму("Документ.ВводНачальныхОстатков.Форма.ФормаОсновныеСредства", ПараметрыФормы, , , , , , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	Иначе	
		
		ЗначенияЗаполнения = Новый Структура;	
		ЗначенияЗаполнения.Вставить("Дата",        						Объект.Дата);
		ЗначенияЗаполнения.Вставить("Организация",        				Объект.Организация);
		ЗначенияЗаполнения.Вставить("Комментарий",        				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
																		НСтр("ru='Введен на основании ""%1"".';uk='Введений на підставі ""%1"" .'"), Объект.Ссылка));
		ЗначенияЗаполнения.Вставить("ИНАГРО_ДокументОперативногоУчета", Объект.Ссылка);
		ЗначенияЗаполнения.Вставить("ИНАГРО_БиологическийАктив",  		Строка.Номенклатура);
		ЗначенияЗаполнения.Вставить("ИНАГРО_Склад",        				Строка.Склад);
		ЗначенияЗаполнения.Вставить("Цена",        	                    Строка.Цена);
		ЗначенияЗаполнения.Вставить("НакопленнаяАмортизацияБУ",         Строка.НакопленнаяАмортизацияБУ);
		ЗначенияЗаполнения.Вставить("ИмяТабличнойЧасти",                ИмяТабличнойЧасти);
		
		Если ИмяТабличнойЧасти = "ИНАГРО_БиологическиеАктивыЖивотные" Тогда
			ЗначенияЗаполнения.Вставить("КоличествоСтрокОС", Строка.Голов);
			ЗначенияЗаполнения.Вставить("СчетУчетаБУ",     ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.ДолгосрочныеБиологическиеАктивыЖивотноводстваПоПервоначальнойСтоимостиАмортизируются"));			
		Иначе
			ЗначенияЗаполнения.Вставить("КоличествоСтрокОС", Строка.Количество);
			ЗначенияЗаполнения.Вставить("СчетУчетаБУ",     ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.ДолгосрочныеБиологическиеАктивыРастениеводстваПоПервоначальнойСтоимостиАмортизируются"));
		КонецЕсли;
		
		ЗначенияЗаполнения.Вставить("РазделУчета",                ПредопределенноеЗначение("Перечисление.РазделыУчетаДляВводаОстатков.ОсновныеСредства"));
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения); 
		ПараметрыФормы.Вставить("IDСтроки",  		  Строка.IDСтроки);

		ОткрытьФорму("Документ.ВводНачальныхОстатков.Форма.ФормаОсновныеСредства", ПараметрыФормы, , Новый УникальныйИдентификатор(), , , , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
	КонецЕсли;	
		
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьСуммуНУ(ТекущиеДанные)
	
	Если ТекущиеДанные.НалоговоеНазначение = ПредопределенноеЗначение("Справочник.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяНеХозДеятельность") Тогда
		ТекущиеДанные.СуммаНУ = 0;	
	Иначе
		ТекущиеДанные.СуммаНУ = ТекущиеДанные.Сумма;		
	КонецЕсли; 
	
КонецПроцедуры 

&НаСервере
Процедура ЗаписатьМодифицированныйДокумент()
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	Если ДокументОбъект.Модифицированность() Тогда
		ДокументОбъект.Записать(РежимЗаписиДокумента.Запись); 		
	КонецЕсли;                          
	
	ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");	
			
КонецПроцедуры

&НаКлиенте
Процедура ВводНачальныхОстатков_ВозвратДокументСсылкаОС(Параметры) Экспорт
	
	Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаСтраницаЖивотные Тогда
		ИмяТабличнойЧасти = "ИНАГРО_БиологическиеАктивыЖивотные";
	ИначеЕсли Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаСтраницаРастения Тогда 
		ИмяТабличнойЧасти = "ИНАГРО_БиологическиеАктивыРастения";		
	КонецЕсли;

	Если Параметры.ДокументСсылка <> Неопределено Тогда
		
		СтруктураПоиска = Новый Структура("IDСтроки", Параметры.IDСтроки);
		
		Попытка
			СтрокиТаблицы = Объект[ИмяТабличнойЧасти].НайтиСтроки(СтруктураПоиска);
		Исключение
			СтрокиТаблицы = Элементы[ИмяТабличнойЧасти].НайтиСтроки(СтруктураПоиска);
		КонецПопытки;
		
		Если СтрокиТаблицы.Количество() > 0 Тогда 		
			
			Элементы[ИмяТабличнойЧасти].ТекущаяСтрока = СтрокиТаблицы[0].ПолучитьИдентификатор(); 		
			Элементы[ИмяТабличнойЧасти].ТекущиеДанные.ДокументОС = Параметры.ДокументСсылка;
			
		КонецЕсли;  	
		
		ЗаполнитьДобавленныеКолонкиТаблиц(ИмяТабличнойЧасти);
		
		Модифицированность = Истина;
		
	Иначе 
		
		Модифицированность = Ложь;
		
	КонецЕсли; 
				
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьЗначениеРеквизита(Ссылка, Реквизит)
	
	Возврат	ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, Реквизит);
	
КонецФункции

#КонецОбласти
 
#Область СлужебныеПроцедурыИФункцииБСП

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти 