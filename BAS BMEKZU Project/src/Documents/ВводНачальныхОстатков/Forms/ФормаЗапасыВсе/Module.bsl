////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	//ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтаФорма, ДополнительныеОтчетыИОбработкиКлиентСервер.ТипФормыОбъекта());
	
	Если Параметры.Ключ.Пустая() Тогда
		ПодготовитьФормуНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом

	ПодготовитьФормуНаСервере();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)

	Оповестить("ОбновитьФормуПомощникаВводаОстатков", Объект.Организация, "ВводНачальныхОстатков");

КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ЗаполнитьДобавленныеКолонкиТаблиц();
	
	Документы.ВводНачальныхОстатков.УстановитьЗаголовокФормы(ЭтаФорма);
	УправлениеФормойСервер();
	
	УстановитьСостояниеДокумента();

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)

	ОбщегоНазначенияБПКлиент.ОбработкаОповещенияФормыДокумента(ЭтаФорма, Объект.Ссылка, ИмяСобытия, Параметр, Источник);

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

#КонецОбласти 

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)

	Если НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДатаДокумента) Тогда
		// Изменение времени не влияет на поведение документа.
		ТекущаяДатаДокумента = Объект.Дата;
		Возврат;
	КонецЕсли;

	// Общие проверки условий по датам.
	ТребуетсяВызовСервера = ОбщегоНазначенияБПКлиент.ТребуетсяВызовСервераПриИзмененииДатыДокумента(Объект.Дата, 
		ТекущаяДатаДокумента);

	// Если определили, что изменение даты может повлиять на какие-либо параметры, 
	// то передаем обработку на сервер.
	Если ТребуетсяВызовСервера Тогда
		ДатаПриИзмененииСервер();
	КонецЕсли;
	
	// Запомним новую дату документа.
	ТекущаяДатаДокумента = Объект.Дата;

КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)

	ОрганизацияПриИзмененииСервер();

КонецПроцедуры

#КонецОбласти 


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ 

#Область ОбработчикиСобытийТаблицыФормы

&НаКлиенте
Процедура ЗапасыВсеПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущиеДанные = Элементы.ЗапасыВсе.ТекущиеДанные;
	Если НоваяСтрока И Не Копирование Тогда
		Если Не ЕстьНДС Тогда
			ТекущиеДанные.НалоговоеНазначение = ПредопределенноеЗначение("Справочник.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяХозДеятельность");
		КонецЕсли;
	КонецЕсли;

	УстановитьДоступностьПолейПоСчету(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыВсеНоменклатураПриИзменении(Элемент)
	
	Если Объект.РазделУчета = ПредопределенноеЗначение("Перечисление.РазделыУчетаДляВводаОстатков.ЗапасыСебестоимость") Тогда
		ТекущиеДанные = Элементы.ЗапасыВсе.ТекущиеДанные;
		
		ПараметрыДокумента	= Новый Структура("ВалютаРегламентированногоУчета, РазделУчета, Организация",
			ВалютаРегламентированногоУчета, Объект.РазделУчета, Объект.Организация);
			
		ПараметрыСтроки = ПоляСтрокиТабличнойЧасти(ТекущиеДанные);
		ЗаполнитьДобавленныеКолонкиСтрокиТаблицы_ЗапасыВсе(ПараметрыСтроки, ПараметрыДокумента);
		ЗаполнитьЗначенияСвойств(ТекущиеДанные, ПараметрыСтроки);

		ПересчитатьСуммуНоминальную(ТекущиеДанные);
	КонецЕсли; 

КонецПроцедуры

&НаКлиенте
Процедура ЗапасыВсеКоличествоПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ЗапасыВсе.ТекущиеДанные;
	
	Если Объект.РазделУчета = ПредопределенноеЗначение("Перечисление.РазделыУчетаДляВводаОстатков.ЗапасыСебестоимость") Тогда
		ПересчитатьСуммуНоминальную(ТекущиеДанные);
	КонецЕсли; 
	
	ТекущиеДанные.Сумма = ТекущиеДанные.Количество * ТекущиеДанные.Цена;   
	РассчитатьСуммуНУ(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыВсеСчетУчетаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ЗапасыВсе.ТекущиеДанные;
	УстановитьДоступностьПолейПоСчету(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыВсеЦенаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ЗапасыВсе.ТекущиеДанные;
	ТекущиеДанные.Сумма = ТекущиеДанные.Количество * ТекущиеДанные.Цена;   
    РассчитатьСуммуНУ(ТекущиеДанные);

КонецПроцедуры

&НаКлиенте
Процедура ЗапасыВсеСуммаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ЗапасыВсе.ТекущиеДанные;

	Если ТекущиеДанные.Количество > 0 Тогда
		ТекущиеДанные.Цена = ТекущиеДанные.Сумма/ТекущиеДанные.Количество;			
	Иначе 	
		ТекущиеДанные.Цена = ТекущиеДанные.Сумма;
	КонецЕсли; 
	РассчитатьСуммуНУ(ТекущиеДанные);	

КонецПроцедуры

&НаКлиенте
Процедура ЗапасыВсеПоставщикПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ЗапасыВсе.ТекущиеДанные;
	ПараметрыСтроки = ПоляСтрокиТабличнойЧасти();
	
	ЗапасыВсеПоставщикПриИзмененииСервер(ПараметрыСтроки);
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ПараметрыСтроки);
	
КонецПроцедуры

&НаКлиенте
Функция ПоляСтрокиТабличнойЧасти(СтрокаТаблицы = Неопределено)

	Если СтрокаТаблицы = Неопределено Тогда
		СтрокаТаблицы = Элементы.ЗапасыВсе.ТекущиеДанные;
	КонецЕсли; 

	ПараметрыСтроки = Новый Структура("СчетУчета, Номенклатура, Склад, Поставщик, ДоговорПоставщика,
	|Количество, Сумма, НалоговоеНазначение, ДатаПриобретения, Цена,
	|СуммаНоминальная, СуммаНУ, Контрагент, ДоговорКонтрагента,
	|ВидАналитики, СчетУчетаКоличественный, ЭтоБСУ");
			
	ЗаполнитьЗначенияСвойств(ПараметрыСтроки, СтрокаТаблицы);

	Возврат ПараметрыСтроки;

КонецФункции


&НаСервере
Процедура ЗапасыВсеПоставщикПриИзмененииСервер(ТекущиеДанные)

	МассивВидовДоговоров = Новый Массив;
	Если Объект.РазделУчета = ПредопределенноеЗначение("Перечисление.РазделыУчетаДляВводаОстатков.ТоварыНаКомиссии") Тогда
		МассивВидовДоговоров.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СКомитентом"));
	Иначе 
		МассивВидовДоговоров.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СПоставщиком"));
	КонецЕсли;	
	
	БухгалтерскийУчетПереопределяемый.УстановитьДоговорКонтрагента(ТекущиеДанные.ДоговорПоставщика,
		ТекущиеДанные.Контрагент, Объект.Организация, МассивВидовДоговоров);
	

КонецПроцедуры // ЗапасыВсеПоставщикПриИзмененииСервер()

&НаКлиенте
Процедура ЗапасыВсеНалоговоеНазначениеПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ЗапасыВсе.ТекущиеДанные;
	РассчитатьСуммуНУ(ТекущиеДанные);	

КонецПроцедуры


#КонецОбласти 

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОткрытьФормуНастройкиРежима(Команда)

	ПараметрыНастройкиРежима	= Новый Структура;
	ПараметрыНастройкиРежима.Вставить("ВводитьОстаткиЗапасовВРазрезеДатОприходования",	Объект.ВводитьОстаткиЗапасовВРазрезеДатОприходования);
	ПараметрыНастройкиРежима.Вставить("ВводитьОстаткиЗапасовВРазрезеПоставщиков",		Объект.ВводитьОстаткиЗапасовВРазрезеПоставщиков);
	ПараметрыНастройкиРежима.Вставить("ВводитьСуммыУлучшенияВключенныеВБалансовуюСтоимостьОС",	Объект.ВводитьСуммыУлучшенияВключенныеВБалансовуюСтоимостьОС);
	ПараметрыНастройкиРежима.Вставить("Организация", Объект.Организация);
	ПараметрыНастройкиРежима.Вставить("РазделУчета", Объект.РазделУчета);
	ПараметрыНастройкиРежима.Вставить("Дата",		 Объект.Дата);
	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ОткрытьФормуНастройкиРежимаЗавершение", ЭтотОбъект);
	
	ОткрытьФорму("Документ.ВводНачальныхОстатков.Форма.ФормаНастройкиРежима",
		ПараметрыНастройкиРежима,,,,,ОповещениеОЗакрытии);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуНастройкиРежимаЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	РезультатНастройкиРежима = РезультатЗакрытия;
	
	Если ТипЗнч(РезультатНастройкиРежима) = Тип("Структура") Тогда
		
		Модифицированность	= Истина;
		
		ЗаполнитьЗначенияСвойств(Объект, РезультатНастройкиРежима);
		
		УстановитьВидимостьКолонок();		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьОписаниеРаздела(Команда)

	ДанныеЗаполнения	= Новый Структура;
	ДанныеЗаполнения.Вставить("Дата",		 Объект.Дата);
	ДанныеЗаполнения.Вставить("Организация", Объект.Организация);
	ДанныеЗаполнения.Вставить("РазделУчета", Объект.РазделУчета);

	ОткрытьФорму("Документ.ВводНачальныхОстатков.Форма.ФормаСправки", Новый Структура("ДанныеЗаполнения", ДанныеЗаполнения), ЭтаФорма, ВариантОткрытияОкна.ОтдельноеОкно);

КонецПроцедуры

#КонецОбласти 

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ БСП

#Область СлужебныеПроцедурыФункцииБСП

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

&НаСервере
Процедура ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(ИмяЭлемента, РезультатВыполнения)
	
	ДополнительныеОтчетыИОбработки.ВыполнитьНазначаемуюКомандуНаСервере(ЭтаФорма, ИмяЭлемента, РезультатВыполнения);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

&НаКлиенте
Процедура Подключаемый_ВыполнитьНазначаемуюКоманду(Команда)
	
	Если НЕ ДополнительныеОтчетыИОбработкиКлиент.ВыполнитьНазначаемуюКомандуНаКлиенте(ЭтаФорма, Команда.Имя) Тогда
		РезультатВыполнения = Неопределено;
		ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(Команда.Имя, РезультатВыполнения);
		ДополнительныеОтчетыИОбработкиКлиент.ПоказатьРезультатВыполненияКоманды(ЭтаФорма, РезультатВыполнения);
	КонецЕсли;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

// СтандартныеПодсистемы.Печать
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	
	УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти 

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

#Область СлужебныеПроцедурыФункции 

&НаСервере
Процедура ПодготовитьФормуНаСервере()
	
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтотОбъект);
	
	//Установить значения реквизитов
	ВестиСкладскойУчетБУ = ПланыСчетов.Хозрасчетный.Товары.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады, "ВидСубконто") <> Неопределено;
	ТекущаяДатаДокумента = Объект.Дата;
	ЕстьНалогНаПрибыльДо2015   = УчетнаяПолитика.ПлательщикНалогаНаПрибыльДо2015(Объект.Организация, НачалоМесяца(ТекущаяДатаДокумента));
	ЕстьНДС              = УчетнаяПолитика.ПлательщикНДС(Объект.Организация, НачалоМесяца(ТекущаяДатаДокумента));	
	ВалютаРегламентированногоУчета  = Константы.ВалютаРегламентированногоУчета.Получить();

	Если ТипЗнч(Параметры) = Тип("ДанныеФормыСтруктура") Тогда
		Параметры.Свойство("ОткрытиеИзОбработкиВводаНачальныхОстатков", ОткрытиеИзОбработкиВводаНачальныхОстатков);
	КонецЕсли;

	Документы.ВводНачальныхОстатков.УстановитьЗаголовокФормы(ЭтаФорма);
	УправлениеФормойСервер();

	ЗаполнитьДобавленныеКолонкиТаблиц();
	
	УстановитьСостояниеДокумента();
	
КонецПроцедуры

&НаСервере
Процедура УправлениеФормойСервер()

	// Установка режима "Только просмотр" для поля "Дата"
	Элементы.Дата.ТолькоПросмотр =
		ЗначениеЗаполнено(Документы.ВводНачальныхОстатков.ПолучитьДатуВводаОстатков(Объект.Организация));
    ТекущаяДатаДокумента = Объект.Дата;
		
	
	Документы.ВводНачальныхОстатков.УстановитьПараметрыФункциональныхОпцийФормыДокумента(ЭтаФорма);

	// Ограничение выбора счета учета:
	МассивСчетов = Новый Массив;
	МассивИсключений = Новый Массив;
	Если Объект.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.ЗапасыПереданные Тогда
		МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.МатериалыПереданныеВПереработку); //206
		МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.ТоварыНаКомиссии);                //283
	ИначеЕсли Объект.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.ЗапасыСебестоимость Тогда
		МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.ПроизводственныеЗапасы);   //20
		МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.МалоценныеИБыстроизнашивающиесяПредметыНаСкладе); //221
		МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.ТоварыНаСкладе);      //281
		МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.ТараПодТоварами);     //284
		МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.ТоварыВТорговлеПоПокупнойСтоимости); //289
		МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.ПроизводствоИзДавальческогоСырья);  //234
		МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.Полуфабрикаты);  //25
		МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.ГотоваяПродукция);  //26
		МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.ПродукцияСельскохозяйственногоПроизводства);  //27
		//МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.БланкиСтрогогоУчета);  //08
		МассивИсключений.Добавить(ПланыСчетов.Хозрасчетный.ТранспортноЗаготовительныеРасходыМатериалы); //200
		МассивИсключений.Добавить(ПланыСчетов.Хозрасчетный.МатериалыПереданныеВПереработку);            //206
	ИначеЕсли Объект.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.КапитальныеИнвестиции Тогда
		МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.КапитальныеИнвестиции); //15
		// ИНАГРО++
		Если ИНАГРО_ОбщийВызовСервераПовтИсп.ЕстьБСПУ()Тогда
			МассивИсключений.Добавить(ПланыСчетов.Хозрасчетный.ПриобретениеВыращиваниеДолгосрочныхБиологическихАктивов); // 1551
		Иначе
			МассивИсключений.Добавить(ПланыСчетов.Хозрасчетный.ПриобретениеВыращиваниеДолгосрочныхБиологическихАктивов); // 155
		КонецЕсли;
		// ИНАГРО--
	ИначеЕсли Объект.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.ТоварыНаКомиссии Тогда
		МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.ТоварыПринятыеНаКомиссию); //0241
		МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.ТоварыПринятыеНаКомиссиюНаСубкомиссии); //0242
	Иначе 
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Неверно указан раздел ("+Объект.РазделУчета+")!");
	КонецЕсли;   

	СчетаДляОтбора = БухгалтерскийУчет.ПолучитьМассивСчетовССубсчетами(МассивСчетов, Ложь, , , МассивИсключений);
	БухгалтерскийУчетКлиентСервер.ИзменитьПараметрыВыбораСчета(Элементы.ЗапасыВсеСчетУчета, СчетаДляОтбора);

	Если Объект.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.КапитальныеИнвестиции Тогда
		Элементы.ЗапасыВсеНоменклатура.Заголовок = НСтр("ru='Аналитика';uk='Аналітика'"); 
	ИначеЕсли Объект.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.ТоварыНаКомиссии Тогда
		мПараметр = Новый ПараметрВыбора("Отбор.ВидДоговора",Перечисления.ВидыДоговоровКонтрагентов.СКомитентом);
		мМассивПараметров = Новый Массив();
		мМассивПараметров.Добавить(мПараметр);
		Элементы.ЗапасыВсеДоговорПоставщика.ПараметрыВыбора = Новый ФиксированныйМассив(мМассивПараметров);
		Элементы.ЗапасыВсеНоменклатура.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.Номенклатура");
		Элементы.ЗапасыВсеВидАналитики.Видимость = Ложь;
		Элементы.ФормаОткрытьФормуНастройкиРежима.Видимость = Ложь;
	Иначе 	
		Элементы.ЗапасыВсеНоменклатура.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.Номенклатура");
		Элементы.ЗапасыВсеВидАналитики.Видимость = Ложь;
	КонецЕсли;	
	
	
	Элементы.ЗапасыВсеСклад.Видимость = ВестиСкладскойУчетБУ;
	Элементы.ЗапасыВсеДатаПриобретения.Видимость				= Объект.ВводитьОстаткиЗапасовВРазрезеДатОприходования;
	
	Если Объект.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.КапитальныеИнвестиции Тогда
		
		Элементы.ЗапасыВсеДоговорПоставщика.Видимость		= Ложь;
		Элементы.ЗапасыВсеПоставщик.Видимость				= Ложь;
		
		Элементы.ЗапасыВсеКонтрагент.Видимость				= Ложь;
		Элементы.ЗапасыВсеДоговорКонтрагента.Видимость		= Ложь;
		
		Элементы.ЗапасыВсеНалоговоеНазначение.Видимость		= ЕстьНДС;
	 	Элементы.ЗапасыВсеКоличество.Видимость				= Истина;
		Элементы.ЗапасыВсеСумма.Видимость					= Истина;
		Элементы.ЗапасыВсеЦена.Видимость					= Истина;
		
		Элементы.ЗапасыВсеСуммаНоминальная.Видимость		= Ложь;
		Элементы.ЗапасыВсеСуммаНУ.Видимость					= ЕстьНалогНаПрибыльДо2015;
		Элементы.ЗапасыВсеСумма.Заголовок					= НСтр("ru='Сумма (грн)';uk='Сума (грн)'");
		    		
	ИначеЕсли Объект.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.ЗапасыСебестоимость Тогда
		
		ВидимостьРеквизитовНУ =  (ЕстьНалогНаПрибыльДо2015 или ЕстьНДС);
				
		// Все счета активные не валютные.
		Элементы.ЗапасыВсеДоговорПоставщика.Видимость			= Ложь;
		Элементы.ЗапасыВсеПоставщик.Видимость					= Ложь;
		
		Элементы.ЗапасыВсеНоменклатура.Видимость				= Истина;
		Элементы.ЗапасыВсеПоставщик.Видимость					= Объект.ВводитьОстаткиЗапасовВРазрезеПоставщиков;

		Элементы.ЗапасыВсеКонтрагент.Видимость					= Ложь;
		Элементы.ЗапасыВсеДоговорКонтрагента.Видимость			= Ложь;
		
		Элементы.ЗапасыВсеНалоговоеНазначение.Видимость			= ЕстьНДС;
		Элементы.ЗапасыВсеКоличество.Видимость					= Истина;
		Элементы.ЗапасыВсеСумма.Видимость						= Истина;
		Элементы.ЗапасыВсеЦена.Видимость						= Истина;
		Элементы.ЗапасыВсеСуммаНоминальная.Видимость			= Истина;
		Элементы.ЗапасыВсеСуммаНУ.Видимость						= ЕстьНалогНаПрибыльДо2015;
		
	ИначеЕсли Объект.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.ЗапасыПереданные Тогда
		
		Элементы.ЗапасыВсеДоговорПоставщика.Видимость			= Ложь;
		Элементы.ЗапасыВсеПоставщик.Видимость					= Объект.ВводитьОстаткиЗапасовВРазрезеПоставщиков;
		
		Элементы.ЗапасыВсеКонтрагент.Видимость					= Истина;
		Элементы.ЗапасыВсеДоговорКонтрагента.Видимость			= Истина;
		Элементы.ЗапасыВсеКонтрагент.Заголовок					= НСтр("ru='Комиссионер (переработчик)';uk='Комісіонер (переробник)'");
		Элементы.ЗапасыВсеНалоговоеНазначение.Видимость			= ЕстьНДС;
    	Элементы.ЗапасыВсеСклад.Видимость                       = Ложь;
		
		Элементы.ЗапасыВсеКоличество.Видимость					= Истина;
		Элементы.ЗапасыВсеСумма.Видимость						= Истина;
		Элементы.ЗапасыВсеДатаПриобретения.Видимость			= Ложь; 
		Элементы.ЗапасыВсеЦена.Видимость						= Истина;
		Элементы.ЗапасыВсеСуммаНоминальная.Видимость			= Ложь;
		Элементы.ЗапасыВсеСуммаНУ.Видимость						= ЕстьНалогНаПрибыльДо2015;

		
	ИначеЕсли Объект.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.ТоварыНаКомиссии Тогда
		
		Элементы.ЗапасыВсеДоговорПоставщика.Видимость			= Истина;
		Элементы.ЗапасыВсеПоставщик.Видимость					= Истина;
		
		Элементы.ЗапасыВсеКонтрагент.Видимость					= Истина;
		Элементы.ЗапасыВсеДоговорКонтрагента.Видимость			= Истина;
		
		Элементы.ЗапасыВсеНалоговоеНазначение.Видимость			= Ложь;
		Элементы.ЗапасыВсеКоличество.Видимость					= Истина;
		Элементы.ЗапасыВсеСумма.Видимость						= Истина;
		Элементы.ЗапасыВсеДатаПриобретения.Видимость			= Ложь; // Уже списали со склада
		Элементы.ЗапасыВсеЦена.Видимость						= Истина;
		Элементы.ЗапасыВсеСуммаНоминальная.Видимость			= Ложь;
		Элементы.ЗапасыВсеСуммаНУ.Видимость						= Ложь;
		Элементы.ЗапасыВсеКонтрагент.Заголовок					= НСтр("ru='Комиссионер';uk='Комісіонер'");
		Элементы.ЗапасыВсеДоговорКонтрагента.Заголовок			= НСтр("ru='Договор комиссионера';uk='Договір комісіонера'");
				
	КонецЕсли;	
	УстановитьВидимостьКолонок();

КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьКолонок()

	Элементы.ЗапасыВсеДатаПриобретения.Видимость				= Объект.ВводитьОстаткиЗапасовВРазрезеДатОприходования;
	Если Объект.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.КапитальныеИнвестиции 
	 ИЛИ Объект.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.ЗапасыСебестоимость
	 ИЛИ Объект.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.ЗапасыПереданные Тогда
		Элементы.ЗапасыВсеПоставщик.Видимость					= Объект.ВводитьОстаткиЗапасовВРазрезеПоставщиков;
	ИначеЕсли Объект.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.ТоварыНаКомиссии Тогда
		Элементы.ЗапасыВсеДоговорПоставщика.Видимость	= Истина;
		Элементы.ЗапасыВсеПоставщик.Видимость			= Истина;
	КонецЕсли;	
	
КонецПроцедуры
 

&НаСервере
Процедура ДатаПриИзмененииСервер()

	Документы.ВводНачальныхОстатков.УстановитьПараметрыФункциональныхОпцийФормыДокумента(ЭтаФорма);
	
	УправлениеФормойСервер();

КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииСервер()

	ДатаВводаОстатков	= Документы.ВводНачальныхОстатков.ПолучитьДатуВводаОстатков(Объект.Организация);
	
	Если ЗначениеЗаполнено(ДатаВводаОстатков) Тогда
		Объект.Дата	= ДатаВводаОстатков;
	КонецЕсли;

	Документы.ВводНачальныхОстатков.УстановитьПараметрыФункциональныхОпцийФормыДокумента(ЭтаФорма);
	
	УправлениеФормойСервер();

КонецПроцедуры

// Устанавливает доступность полей ТЧ в зависимости от свойств счета
//
// Параметры:
//  ТекущиеДанные - текущая строка ТЧ
//
&НаКлиенте
Процедура УстановитьДоступностьПолейПоСчету(ТекущиеДанные)
	
	СвойстваСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(ТекущиеДанные.СчетУчета);
	
	ТекущиеДанные.СчетУчетаКоличественный = СвойстваСчета.Количественный;
	Если НЕ СвойстваСчета.Количественный Тогда
		ТекущиеДанные.Количество = 0;
	КонецЕсли; 
	
	Если Объект.РазделУчета = ПредопределенноеЗначение("Перечисление.РазделыУчетаДляВводаОстатков.КапитальныеИнвестиции") Тогда
		
		//Ограничить тип поля "Номенклатура" в зависимоти от типа аналитики на счете
		Если СвойстваСчета.ВидСубконто1 = ПредопределенноеЗначение("ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ОбъектыСтроительства") Тогда
			мОписаниеТипаНоменклатуры =  Новый ОписаниеТипов("СправочникСсылка.ОбъектыСтроительства");
			ТекущиеДанные.ВидАналитики = НСтр("ru='Объект строительства';uk=""Об'єкт будівництва""");
		ИначеЕсли СвойстваСчета.ВидСубконто1 = ПредопределенноеЗначение("ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.НематериальныеАктивы") Тогда
			мОписаниеТипаНоменклатуры = Новый ОписаниеТипов("СправочникСсылка.НематериальныеАктивы");
			ТекущиеДанные.ВидАналитики = НСтр("ru='Нематериальный актив';uk='Нематеріальний актив'");
		Иначе 
			мОписаниеТипаНоменклатуры = Новый ОписаниеТипов("СправочникСсылка.Номенклатура");
			ТекущиеДанные.ВидАналитики = НСтр("ru='Номенклатура';uk='Номенклатура'");
		КонецЕсли;    
		Элементы.ЗапасыВсеНоменклатура.ОграничениеТипа = мОписаниеТипаНоменклатуры;
		ТекущиеДанные.Номенклатура = мОписаниеТипаНоменклатуры.ПривестиЗначение(ТекущиеДанные.Номенклатура);
		
		Если НЕ СвойстваСчета.Количественный И НЕ ТекущиеДанные.Склад.Пустая()  Тогда
			ТекущиеДанные.Склад = Неопределено;
		КонецЕсли; 
	ИначеЕсли Объект.РазделУчета = ПредопределенноеЗначение("Перечисление.РазделыУчетаДляВводаОстатков.ЗапасыПереданные") Тогда  	
		
		
	КонецЕсли;	
	
КонецПроцедуры // УстановитьДоступностьПолейПоСчету()


&НаСервере
Процедура ЗаполнитьДобавленныеКолонкиТаблиц()
	
	ПараметрыДокумента	= Новый Структура("ВалютаРегламентированногоУчета, РазделУчета, Организация",
		ВалютаРегламентированногоУчета, Объект.РазделУчета, Объект.Организация);

	Для каждого СтрокаТаблицы Из Объект.ЗапасыВсе Цикл
		
		ЗаполнитьДобавленныеКолонкиСтрокиТаблицы_ЗапасыВсе(СтрокаТаблицы, ПараметрыДокумента);
		
	КонецЦикла;

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьДобавленныеКолонкиСтрокиТаблицы_ЗапасыВсе(СтрокаТаблицы, ПараметрыДокумента)

	Если ЗначениеЗаполнено(СтрокаТаблицы.СчетУчета) Тогда
		
		СвойстваСчета	= БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(СтрокаТаблицы.СчетУчета);
		
		СтрокаТаблицы.СчетУчетаКоличественный = СвойстваСчета.Количественный;
		//СтрокаТаблицы.СчетУчетаВалютный       = СвойстваСчета.Валютный;
		//СтрокаТаблицы.СчетУчетаВид            = СвойстваСчета.Вид;
		Если ПараметрыДокумента.РазделУчета = ПредопределенноеЗначение("Перечисление.РазделыУчетаДляВводаОстатков.КапитальныеИнвестиции") Тогда
			
			//Ограничить тип поля "Номенклатура" в зависимоти от типа аналитики на счете
			Если СвойстваСчета.ВидСубконто1 = ПредопределенноеЗначение("ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ОбъектыСтроительства") Тогда
				СтрокаТаблицы.ВидАналитики = НСтр("ru='Объект строительства';uk=""Об'єкт будівництва""");
			ИначеЕсли СвойстваСчета.ВидСубконто1 = ПредопределенноеЗначение("ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.НематериальныеАктивы") Тогда
				СтрокаТаблицы.ВидАналитики = НСтр("ru='Нематериальный актив';uk='Нематеріальний актив'");
			Иначе 
				СтрокаТаблицы.ВидАналитики = НСтр("ru='Номенклатура';uk='Номенклатура'");
			КонецЕсли;    
		КонецЕсли;	
	КонецЕсли;
	
	Если ПараметрыДокумента.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.ЗапасыСебестоимость Тогда
	
		// БСУ
		НоменклатураСтроки = СтрокаТаблицы.Номенклатура;
		СтрокаТаблицы.ЭтоБСУ = ЗначениеЗаполнено(НоменклатураСтроки)
				 И НоменклатураСтроки.БланкСтрогогоУчета И НоменклатураСтроки.УчитываетсяПоНоминальнойСтоимости;

	
	КонецЕсли; 
	
КонецПроцедуры


&НаСервереБезКонтекста
Функция БланкиСтрогогоУчетаПолучитьЦенуНоминальную(Номенклатура, Дата)
	
	Если Номенклатура.БланкСтрогогоУчета И Номенклатура.УчитываетсяПоНоминальнойСтоимости Тогда
		Возврат РегистрыСведений.НоминальнаяСтоимостьБланковСтрогогоУчета.ПолучитьПоследнее(Дата, Новый Структура("Номенклатура", Номенклатура)).Цена;			   
	Иначе
		Возврат 0;
	КонецЕсли; 

КонецФункции // БланкиСтрогогоУчетаПолучитьЦенуНоминальную()

&НаКлиенте
Процедура ПересчитатьСуммуНоминальную(ТекущиеДанные)
	
	Если Объект.РазделУчета = ПредопределенноеЗначение("Перечисление.РазделыУчетаДляВводаОстатков.ЗапасыСебестоимость") Тогда
		Если ТекущиеДанные.Количество > 0 Тогда
			ТекущиеДанные.СуммаНоминальная = БланкиСтрогогоУчетаПолучитьЦенуНоминальную(ТекущиеДанные.Номенклатура, Объект.Дата) * ТекущиеДанные.Количество;
		Иначе 
			ТекущиеДанные.СуммаНоминальная = 0;	
		КонецЕсли; 
	КонецЕсли; 

КонецПроцедуры

&НаКлиенте
Процедура РассчитатьСуммуНУ(ТекущиеДанные)
	
	
	Если ТекущиеДанные.НалоговоеНазначение = ПредопределенноеЗначение("Справочник.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяНеХозДеятельность") Тогда
		ТекущиеДанные.СуммаНУ = 0;	
	Иначе
		ТекущиеДанные.СуммаНУ = ТекущиеДанные.Сумма;		
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыВсеДоговорКонтрагентаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Если Объект.РазделУчета = ПредопределенноеЗначение("Перечисление.РазделыУчетаДляВводаОстатков.ЗапасыПереданные") Тогда  	
		
		ТекущиеДанные = Элементы.ЗапасыВсе.ТекущиеДанные;

		//Установить отбор по виду договора в зависимости от счета учета
		Если БухгалтерскийУчетВызовСервераПовтИсп.СчетВИерархии(ТекущиеДанные.СчетУчета,ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.МатериалыПереданныеВПереработку")) Тогда
			ОтборВидДоговора = ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СПоставщиком");
		Иначе 
			ОтборВидДоговора = ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СКомиссионером");
		КонецЕсли; 
	    мПараметр = Новый ПараметрВыбора("Отбор.ВидДоговора",ОтборВидДоговора);
		мМассивПараметров = Новый Массив();
		мМассивПараметров.Добавить(мПараметр);
		Элемент.ПараметрыВыбора = Новый ФиксированныйМассив(мМассивПараметров);
		
	КонецЕсли;	
КонецПроцедуры

&НаСервере
Процедура УстановитьСостояниеДокумента()
	
	СостояниеДокумента = ОбщегоНазначенияБП.СостояниеДокумента(Объект);
	
КонецПроцедуры


#КонецОбласти 


