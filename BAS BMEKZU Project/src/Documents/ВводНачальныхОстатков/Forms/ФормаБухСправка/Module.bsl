// ИНАГРО В элементе БухСправкаСубконто1 проставлено свойство ВыбиратьТип
////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	//ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтаФорма, ДополнительныеОтчетыИОбработкиКлиентСервер.ТипФормыОбъекта());
	
	Если Параметры.Ключ.Пустая() Тогда
		ПодготовитьФормуНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом

	ПодготовитьФормуНаСервере();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)

	Оповестить("ОбновитьФормуПомощникаВводаОстатков", Объект.Организация, "ВводНачальныхОстатков");

КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	Документы.ВводНачальныхОстатков.УстановитьЗаголовокФормы(ЭтаФорма);
	УправлениеФормойСервер();
	
	УстановитьСостояниеДокумента();

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)

	ОбщегоНазначенияБПКлиент.ОбработкаОповещенияФормыДокумента(ЭтаФорма, Объект.Ссылка, ИмяСобытия, Параметр, Источник);

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

#КонецОбласти 

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

#Область ОбрабоитчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)

	Если НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДатаДокумента) Тогда
		// Изменение времени не влияет на поведение документа.
		ТекущаяДатаДокумента = Объект.Дата;
		Возврат;
	КонецЕсли;

	// Общие проверки условий по датам.
	ТребуетсяВызовСервера = ОбщегоНазначенияБПКлиент.ТребуетсяВызовСервераПриИзмененииДатыДокумента(Объект.Дата, 
		ТекущаяДатаДокумента);

	// Если определили, что изменение даты может повлиять на какие-либо параметры, 
	// то передаем обработку на сервер.
	Если ТребуетсяВызовСервера Тогда
		ДатаПриИзмененииСервер();
	КонецЕсли;
	
	// Запомним новую дату документа.
	ТекущаяДатаДокумента = Объект.Дата;

КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)

	ОрганизацияПриИзмененииСервер();

КонецПроцедуры

#КонецОбласти 

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ 

#Область ОбработчикиСобытийТаблицыФормы

&НаКлиенте
Процедура БухСправкаСчетУчетаПриИзменении(Элемент)
	ТекущиеДанные = Элементы.БухСправка.ТекущиеДанные;

	УстановитьЗаголовкиИДоступностьСубконто(ЭтаФорма, ТекущиеДанные.СчетУчета,  Истина, Истина);

	ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3",
								 "Субконто1", "Субконто2", "Субконто3");

	ПоляОбъекта.Вставить("Организация", Объект.Организация);
	
	
	БухгалтерскийУчетКлиентСервер.ПриИзмененииСчета(ТекущиеДанные.СчетУчета, ТекущиеДанные, ПоляОбъекта, Истина);
	
	// Получим общие параметры обработки для реквизитов документа
	ПараметрыОбработки = ПодготовитьПараметрыОбработки(ЭтаФорма, ТекущиеДанные);
	
	// Дополнительные поля, требующиеся для заполнения добавленных колонок табличного поля текущей формы.
	ПараметрыОбработки.ДанныеСтрокиТаблицы.Вставить("Субконто1Доступность", ТекущиеДанные.Субконто1Доступность);
	ПараметрыОбработки.ДанныеСтрокиТаблицы.Вставить("Субконто2Доступность", ТекущиеДанные.Субконто2Доступность);
	ПараметрыОбработки.ДанныеСтрокиТаблицы.Вставить("Субконто3Доступность", ТекущиеДанные.Субконто3Доступность);
	
	//ЗаполнитьПараметрыОбъектаДляЗаполненияДобавленныхКолонок(ЭтаФорма, ПараметрыОбработки.ДанныеОбъекта);
		
	ЗаполнитьДобавленныеКолонкиСтрокиТаблицыБухСправка(ПараметрыОбработки.ДанныеСтрокиТаблицы, ПараметрыОбработки.ДанныеОбъекта);
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ПараметрыОбработки.ДанныеСтрокиТаблицы);
	
	
	Если Объект.РазделУчета <> ПредопределенноеЗначение("Перечисление.РазделыУчетаДляВводаОстатков.ОтсроченныеНалоговыеАктивыИОбязательства") Тогда
		
		Если ТекущиеДанные.СчетУчетаВид = ВидСчета.Активный
			ИЛИ (ТекущиеДанные.СчетУчетаВид = ВидСчета.АктивноПассивный
			И (ТекущиеДанные.Сумма ИЛИ НЕ ТекущиеДанные.СуммаКт)) Тогда
			//Перекинуть если залнено ранее, но в другой колонке.
			Если ТекущиеДанные.СуммаКт <> 0 Тогда
				ТекущиеДанные.Сумма = ТекущиеДанные.СуммаКт;
				ТекущиеДанные.СуммаКт = 0;
			КонецЕсли;				
		Иначе
			Если ТекущиеДанные.Сумма <> 0 Тогда
				ТекущиеДанные.СуммаКт = ТекущиеДанные.Сумма;
				ТекущиеДанные.Сумма = 0;					
			КонецЕсли;				
		КонецЕсли;
		
		Если НЕ ТекущиеДанные.СчетУчетаКоличественный Тогда
			ТекущиеДанные.Количество = 0;
		КонецЕсли;
		
		Если НЕ ТекущиеДанные.СчетУчетаВалютный ИЛИ ТекущиеДанные.Валюта = ВалютаРегламентированногоУчета Тогда
			ТекущиеДанные.Валюта = ВалютаРегламентированногоУчета;
			ВалютаПриИзмененииБухСправка(Ложь);									
		КонецЕсли; 
		
	Иначе			
		// Колонка является средством ввода остатка в валюте взаиморасчетов.
		//  При изменении необходимо положить в нужную ячейку.		
		Если ТекущиеДанные.СчетУчетаВид = ВидСчета.Пассивный Тогда
			ТекущиеДанные.СуммаКт	= ТекущиеДанные.ВалютнаяСумма;		
			ТекущиеДанные.Сумма		= 0;
		Иначе 			
			ТекущиеДанные.Сумма		= ТекущиеДанные.ВалютнаяСумма;		
			ТекущиеДанные.СуммаКт	= 0;
		КонецЕсли; 
	КонецЕсли; 						
	
	
КонецПроцедуры

&НаКлиенте
Процедура БухСправкаСубконто1ПриИзменении(Элемент)
	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма);
	ОбработатьИзменениеСубконто(1);

КонецПроцедуры

&НаКлиенте
Процедура БухСправкаСубконто2ПриИзменении(Элемент)
	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма);
	ОбработатьИзменениеСубконто(2);

КонецПроцедуры

&НаКлиенте
Процедура БухСправкаСубконто3ПриИзменении(Элемент)
	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма);
	ОбработатьИзменениеСубконто(3);

КонецПроцедуры

&НаКлиенте
Процедура БухСправкаСубконтоНачалоВыбора(Элемент,НомерСубконто, ДанныеВыбора, СтандартнаяОбработка)
	ТекущиеДанные = Элементы.БухСправка.ТекущиеДанные;

	ПараметрыДокумента = ПолучитьСписокПараметров(ЭтаФорма, ТекущиеДанные, "Субконто%Индекс%");
	ПараметрыДокумента.Вставить("СчетУчета", ТекущиеДанные.СчетУчета);
	ОбщегоНазначенияБПКлиент.НачалоВыбораЗначенияСубконто(ЭтаФорма, Элемент, СтандартнаяОбработка, ПараметрыДокумента);

	Если НЕ СтандартнаяОбработка Тогда
		Возврат;
	КонецЕсли;

	// Выбор других типов, связанных с организацией / контрагентом
	ЗначениеСубконто = ТекущиеДанные["Субконто" + НомерСубконто];
	ТипСубконто      = ТипЗнч(ЗначениеСубконто);

	Если ТипСубконто = БухгалтерскийУчетКлиентСерверПереопределяемый.ТипЗначенияБанковскогоСчетаОрганизации() Тогда

		СтандартнаяОбработка = Ложь;
		Отбор = Новый Структура;
		Отбор.Вставить("Владелец", ПараметрыДокумента.Организация);
		Отбор.Вставить("Валютный", ТекущиеДанные.СчетУчетаВалютный);
		ПараметрыФормы = Новый Структура("Отбор,ТекущаяСтрока", Отбор, ЗначениеСубконто);
		БухгалтерскийУчетКлиентПереопределяемый.ОткрытьФормуВыбораБанковскогоСчетОрганизации(ПараметрыФормы, Элемент);

	ИначеЕсли ТипСубконто = БухгалтерскийУчетКлиентСерверПереопределяемый.ТипПодразделения() Тогда

		СтандартнаяОбработка = Ложь;
		Отбор = Новый Структура;
		ИмяРеквизитаОрганизации = БухгалтерскийУчетКлиентСерверПереопределяемый.ИмяРеквизитаОрганизацияПодразделения();
		Если ЗначениеЗаполнено(ИмяРеквизитаОрганизации) Тогда
			Отбор.Вставить(ИмяРеквизитаОрганизации, ПараметрыДокумента.Организация);
		КонецЕсли;
		ПараметрыФормы = Новый Структура("Отбор,ТекущаяСтрока", Отбор, ЗначениеСубконто);
		БухгалтерскийУчетКлиентПереопределяемый.ОткрытьФормуВыбораПодразделения(ПараметрыФормы, Элемент);

	ИначеЕсли БухгалтерскийУчетКлиентСерверПереопределяемый.ПолучитьОписаниеТиповДоговора().СодержитТип(ТипСубконто) Тогда

		СтандартнаяОбработка = Ложь;
		ПараметрыФормы = Новый Структура;
		Отбор = Новый Структура;
		Отбор.Вставить("Организация", ПараметрыДокумента.Организация);
		Если ПараметрыДокумента.Свойство("Контрагент") Тогда
			Отбор.Вставить(БухгалтерскийУчетКлиентСерверПереопределяемый.ПолучитьИмяРеквизитаКонтрагентДоговора(), ПараметрыДокумента.Контрагент);
		КонецЕсли;
		ПараметрыФормы = Новый Структура("Отбор,ТекущаяСтрока", Отбор, ЗначениеСубконто);
		БухгалтерскийУчетКлиентПереопределяемый.ОткрытьФормуВыбораДоговора(ПараметрыФормы, Элемент);

	ИначеЕсли ТипСубконто = Тип("СправочникСсылка.ОбособленныеПодразделенияОрганизаций") 
		    И Объект.РазделУчета = ПредопределенноеЗначение("Перечисление.РазделыУчетаДляВводаОстатков.ДенежныеСредства") Тогда
		
		Элемент.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.ОбособленныеПодразделенияОрганизаций");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура БухСправкаВалютаПриИзменении(Элемент)
	ВалютаПриИзмененииБухСправка(Истина);
КонецПроцедуры

&НаКлиенте
Процедура БухСправкаВалютнаяСуммаПриИзменении(Элемент)
	
	ДанныеТекущейСтроки = Элементы.БухСправка.ТекущиеДанные;
	Если Объект.РазделУчета <> ПредопределенноеЗначение("Перечисление.РазделыУчетаДляВводаОстатков.ОтсроченныеНалоговыеАктивыИОбязательства") Тогда
		Если НЕ (Объект.РазделУчета = ПредопределенноеЗначение("Перечисление.РазделыУчетаДляВводаОстатков.ВзаиморасчетыСПодотчетнымиЛицами")) Тогда
			// В этом случае всегда пересчитываем.
			БухСправкаВалютныеПересчеты(Истина);
		КонецЕсли
	Иначе
		// Колонка является средствов ввода остатка в валюте взаиморасчетов.
		//  При изменении необходимо положить в нужную ячейку.		
		Если ДанныеТекущейСтроки.СчетУчетаВид = ВидСчета.Пассивный Тогда
			ДанныеТекущейСтроки.СуммаКт	= ДанныеТекущейСтроки.ВалютнаяСумма;		
			ДанныеТекущейСтроки.Сумма	= 0;
		Иначе 			
		    ДанныеТекущейСтроки.Сумма	= ДанныеТекущейСтроки.ВалютнаяСумма;		
			ДанныеТекущейСтроки.СуммаКт	= 0;
		КонецЕсли; 
	КонецЕсли; 

КонецПроцедуры

&НаКлиенте
Процедура БухСправкаСуммаПриИзменении(Элемент)
	Если НЕ (Объект.РазделУчета = ПредопределенноеЗначение("Перечисление.РазделыУчетаДляВводаОстатков.ДенежныеСредства")) Тогда
		ОпределитьМестоположениеВалютныхЗначений("Сумма"); 
		ПересчитатьЦену("Сумма");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура БухСправкаСуммаКтПриИзменении(Элемент)
	Если НЕ (Объект.РазделУчета = ПредопределенноеЗначение("Перечисление.РазделыУчетаДляВводаОстатков.ДенежныеСредства")) Тогда
		ОпределитьМестоположениеВалютныхЗначений("СуммаКт"); 
		ПересчитатьЦену("СуммаКт");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура БухСправкаСубконто1НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	БухСправкаСубконтоНачалоВыбора(Элемент, 1, ДанныеВыбора, СтандартнаяОбработка)
КонецПроцедуры

&НаКлиенте
Процедура БухСправкаСубконто2НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	БухСправкаСубконтоНачалоВыбора(Элемент, 2, ДанныеВыбора, СтандартнаяОбработка)
КонецПроцедуры

&НаКлиенте
Процедура БухСправкаСубконто3НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	БухСправкаСубконтоНачалоВыбора(Элемент, 3, ДанныеВыбора, СтандартнаяОбработка)
КонецПроцедуры


#КонецОбласти 

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОткрытьФормуНастройкиРежима(Команда)

	ПараметрыНастройкиРежима	= Новый Структура;
	ПараметрыНастройкиРежима.Вставить("ВводитьОстаткиЗапасовВРазрезеДатОприходования",	Объект.ВводитьОстаткиЗапасовВРазрезеДатОприходования);
	ПараметрыНастройкиРежима.Вставить("ВводитьОстаткиЗапасовВРазрезеПоставщиков",		Объект.ВводитьОстаткиЗапасовВРазрезеПоставщиков);
	ПараметрыНастройкиРежима.Вставить("ВводитьСуммыУлучшенияВключенныеВБалансовуюСтоимостьОС",	Объект.ВводитьСуммыУлучшенияВключенныеВБалансовуюСтоимостьОС);
	ПараметрыНастройкиРежима.Вставить("Организация", Объект.Организация);
	ПараметрыНастройкиРежима.Вставить("РазделУчета", Объект.РазделУчета);
	ПараметрыНастройкиРежима.Вставить("Дата",		 Объект.Дата);
	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ОткрытьФормуНастройкиРежимаЗавершение", ЭтотОбъект);
	
	ОткрытьФорму("Документ.ВводНачальныхОстатков.Форма.ФормаНастройкиРежима",
		ПараметрыНастройкиРежима,,,,,ОповещениеОЗакрытии);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуНастройкиРежимаЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	РезультатНастройкиРежима = РезультатЗакрытия;
	
	Если ТипЗнч(РезультатНастройкиРежима) = Тип("Структура") Тогда
		
		Модифицированность	= Истина;
		
		ЗаполнитьЗначенияСвойств(Объект, РезультатНастройкиРежима);
		
		Объект.Дата	= РезультатНастройкиРежима.ДатаВводаОстатков;
		ДатаПриИзмененииСервер();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьОписаниеРаздела(Команда)

	ДанныеЗаполнения	= Новый Структура;
	ДанныеЗаполнения.Вставить("Дата",		 Объект.Дата);
	ДанныеЗаполнения.Вставить("Организация", Объект.Организация);
	ДанныеЗаполнения.Вставить("РазделУчета", Объект.РазделУчета);

	ОткрытьФорму("Документ.ВводНачальныхОстатков.Форма.ФормаСправки", Новый Структура("ДанныеЗаполнения", ДанныеЗаполнения), ЭтаФорма, ВариантОткрытияОкна.ОтдельноеОкно);

КонецПроцедуры

#КонецОбласти 

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ БСП

#Область СлужебныеПроцедурыФункцииБСП

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

&НаСервере
Процедура ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(ИмяЭлемента, РезультатВыполнения)
	
	ДополнительныеОтчетыИОбработки.ВыполнитьНазначаемуюКомандуНаСервере(ЭтаФорма, ИмяЭлемента, РезультатВыполнения);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

&НаКлиенте
Процедура Подключаемый_ВыполнитьНазначаемуюКоманду(Команда)
	
	Если НЕ ДополнительныеОтчетыИОбработкиКлиент.ВыполнитьНазначаемуюКомандуНаКлиенте(ЭтаФорма, Команда.Имя) Тогда
		РезультатВыполнения = Неопределено;
		ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(Команда.Имя, РезультатВыполнения);
		ДополнительныеОтчетыИОбработкиКлиент.ПоказатьРезультатВыполненияКоманды(ЭтаФорма, РезультатВыполнения);
	КонецЕсли;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

// СтандартныеПодсистемы.Печать
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	
	УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти 

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

#Область СлужебныеПроцедурыФункции 

&НаСервере
Процедура ПодготовитьФормуНаСервере()
	
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтотОбъект);
	
	ТекущаяДатаДокумента			= Объект.Дата;

	ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
    УчетДенежныхСредствПоОбособленнымПодразделениям = УчетнаяПолитика.УчетПоОбособленнымПодразделениям(Объект.Организация, НачалоМесяца(ТекущаяДатаДокумента));

	Если ТипЗнч(Параметры) = Тип("ДанныеФормыСтруктура") Тогда
		Параметры.Свойство("ОткрытиеИзОбработкиВводаНачальныхОстатков", ОткрытиеИзОбработкиВводаНачальныхОстатков);
	КонецЕсли;

	Документы.ВводНачальныхОстатков.УстановитьЗаголовокФормы(ЭтаФорма);
	УправлениеФормойСервер();

	УстановитьСостояниеДокумента();
	
КонецПроцедуры

&НаСервере
Процедура УправлениеФормойСервер()

	// Установка режима "Только просмотр" для поля "Дата"
	Элементы.Дата.ТолькоПросмотр =
		ЗначениеЗаполнено(Документы.ВводНачальныхОстатков.ПолучитьДатуВводаОстатков(Объект.Организация));

	Документы.ВводНачальныхОстатков.УстановитьПараметрыФункциональныхОпцийФормыДокумента(ЭтаФорма);

	// Ограничение выбора счета учета:
	МассивСчетов = Новый Массив;
	МассивИсключений = Новый Массив;
	Если Объект.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.ВзаиморасчетыСПодотчетнымиЛицами Тогда
      	МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСПодотчетнымиЛицами); //372
	ИначеЕсли Объект.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.ГруппыОСНалоговыйУчет Тогда
		//Не используется	
	ИначеЕсли Объект.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.ДанныеНалоговогоУчета Тогда
		//Не используется		
	ИначеЕсли Объект.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.ДенежныеСредства Тогда
		МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.Касса); // 30, 
		МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.СчетаВБанках); // 31, 
		МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.ДенежныеСредстваВПутиВНациональнойВалюте); // 333,
		МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.ДенежныеСредстваВПутиВИностраннойВалюте); // 334
		//Не используется
	ИначеЕсли Объект.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.ОтсроченныеНалоговыеАктивыИОбязательства Тогда
		//Не используется

	ИначеЕсли Объект.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.ПрочиеСчетаБухгалтерскогоУчета Тогда
		// ИНАГРО++			
		МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.ОборудованиеПринятоеДляМонтажа); // 021, 
		МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.МатериалыПринятыеВПереработкуВсего); // 022, 
		МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.НепредвиденныеАктивыИОбязательства); // 04,
		МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.СписанныеАктивы); // 07,
		МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.ДолгосрочныеФинансовыеИнвестиции); // 14,
		МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.ПриобретениеВыращиваниеДолгосрочныхБиологическихАктивов); // 155,
		МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.ОтсроченныеНалоговыеАктивы); // 17,
		МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.ДолгосрочнаяДебиторскаяЗадолженностьИПрочиеНеоборотныеАктивы); // 18,
		МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.Гудвил); // 19,
		МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.ОбслуживаниеИРемонт); // 235,
		МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.КраткосрочныеВекселяПолученные); // 34,
		МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.ТекущиеФинансовыеИнвестиции); // 35,
		МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоГарантийномуОбеспечению); // 364,
		МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.РезервСомнительныхДолгов); // 38,
		МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.ЗарегистрированныйПаевойКапитал); // 40,
		МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.ДооценкаАктивов); // 41,
		МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.ДополнительныйКапитал); // 42,
		МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.РезервныйКапитал); // 43,
		МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.НераспределеннаяПрибыльНепокрытыеУбытки); // 44,
		МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.ИзъятыйКапитал); // 45,
		МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.НеоплаченныйКапитал); // 46,
		МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.ОбеспечениеБудущихЗатратИПлатежей); // 47,
		МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.ЦелевоеФинансированиеИЦелевыеПоступления); // 48,
		МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.СтраховыеРезервы); // 49,
		МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.ДолгосрочныеЗаймы); // 50,
		МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.ДолгосрочныеВекселяВыданные); // 51,
		МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.ДолгосрочныеОбязательстваПоОблигациям); // 52,
		МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.ДолгосрочныеОбязательстваПоАренде); // 53,
		МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.ОтсроченныеНалоговыеОбязательства); // 54,
		МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.ПрочиеДолгосрочныеОбязательства); // 55,
		МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.КраткосрочныеЗаймы); // 60,
		МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.ТекущаяЗадолженностьПоДолгосрочнымОбязательствам); // 61,
		МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.КраткосрочныеВекселяВыданные); // 62,
		МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоНалогам); // 641,
		МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСУчастниками); // 67,
		МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.ДоходыБудущихПериодов); // 69,
		МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.ДоходыОтРеализации); // 70,
		МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.ДругойОперационныйДоход); // 71,
		МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.ДоходОтУчастияВКапитале); // 72,
		МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.ПрочиеФинансовыеДоходы); // 73,
		МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.ДругиеДоходы); // 74,
		МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.ЧрезвычайныеДоходы); // 75, - не используется
		МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.СтраховыеПлатежи); // 76,
		МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.ФинансовыеРезультаты); // 79,
		МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.МатериальныеЗатраты); // 80,
		МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.ЗатратыНаОплатуТруда); // 81,
		МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.ОтчисленияНаСоциальныеМероприятия); // 82,
		МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.Амортизация); // 83,
		МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.ДругиеОперационныеЗатраты); // 84,
		МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.ДругиеЗатратыПоЭлементам); // 85,
		МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.СебестоимостьРеализации); // 90,
		МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.ОбщепроизводственныеРасходы); // 91,
		МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.АдминистративныеРасходы); // 92,
		МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.РасходыНаСбыт); // 93,
		МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.ДругиеЗатратыОперационнойДеятельностиГруппа); // 94,
		МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.ФинансовыеЗатраты); // 95,
		МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.ПотериОтУчастияВКапитале); // 96,
		МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.ДругиеЗатратыДеятельности); // 97,
		МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.НалогНаПрибыль); // 98,
		МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.ЧрезвычайныеЗатраты); // 99,
		МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.Вспомогательный); // 00,
		МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.АрендованныеНеоборотныеАктивы); // 01,
		МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.МатериальныеЦенностиНаОтветственномХранении); // 023,
		МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.ИмуществоВДоверительномУправлении); // 025,
		МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.КонтрактныеОбязательства); // 03,
		МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.ГарантииИОбеспечениеПредоставленные); // 05,
		МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.ГарантииИОбеспечениеПолученные); // 06,
		МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.АмортизационныеОтчисления); // 09,
		МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.БракВПроизводстве); // 24,
		МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.ДенежныеДокументыВНациональнойВалюте); // 331,
		МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.ДенежныеДокументыВИностраннойВалюте); // 332,			
		МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоНачисленнымДоходам); // 373, 
		МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоПретензиям); // 374,
		МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоВозмещениюПричиненногоУщерба); // 375,
		МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоСсудамЧленамКредитныхСоюзов); // 376,
		МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСРабочимиИСлужащимиПоДругимОперациям); // 3773,
		МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСГосударственнымиЦелевымиФондами); // 378,
		МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоОперациямСДеривативами); // 379,
		МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоОбязательнымПлатежам); // 642,
		МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоНеоборотнымАктивамИГруппамВыбытияУдерживаемымиДляПродажи); // 680,
		МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.ВнутренниеРасчеты); // 682,
		МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.ВнутрихозяйственныеРасчеты); // 683,
		МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоНачисленнымПроцентам); // 684,
		МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоИсполнительнымДокументам); // 6853			
		Если ИНАГРО_ОбщийВызовСервераПовтИсп.ЕстьБСПУ()Тогда
			МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.ЭлектронныеДеньги); // 335,				
		Иначе
			МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.ДолгосрочныеБиологическиеАктивы); // 16,
			МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.ТекущиеБиологическиеАктивы); // 21,
			МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.УценкиЗапасов); // УЗ			
		КонецЕсли;
		// ИНАГРО-- 
	КонецЕсли; 

	СчетаДляОтбора = БухгалтерскийУчет.ПолучитьМассивСчетовССубсчетами(МассивСчетов, Ложь, , , МассивИсключений);
	БухгалтерскийУчетКлиентСервер.ИзменитьПараметрыВыбораСчета(Элементы.БухСправкаСчетУчета, СчетаДляОтбора);
	
	Если Объект.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.ПрочиеСчетаБухгалтерскогоУчета Тогда
		
		Элементы.БухСправкаВидСубконто.Видимость				= Ложь;
		
		Элементы.БухСправкаКурс.Видимость						= Ложь;
		Элементы.БухСправкаКратность.Видимость					= Ложь;
		Элементы.БухСправкаЦена.Видимость						= Ложь;
		
		Элементы.БухСправкаСумма.Заголовок						= НСтр("ru='Остаток по дебету';uk='Залишок по дебету'");
		Элементы.БухСправкаСуммаКт.Заголовок					= НСтр("ru='Остаток по кредиту';uk='Залишок по кредиту'");
		
	ИначеЕсли Объект.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.ДенежныеСредства Тогда
		
		Элементы.БухСправкаСубконто2.Видимость					= Ложь;
		Элементы.БухСправкаСубконто3.Видимость					= Ложь;
		Элементы.БухСправкаВидСубконто.Видимость				= Истина;
		
		Элементы.БухСправкаКоличество.Видимость					= Ложь;
		Элементы.БухСправкаСуммаКт.Видимость					= Ложь; 
		Элементы.БухСправкаЦена.Видимость						= Ложь;
	 	Элементы.БухСправкаСумма.Заголовок						= НСтр("ru='Сумма (грн)';uk='Сума (грн)'");
		Элементы.БухСправкаВалютнаяСумма.Заголовок				= НСтр("ru='Сумма в валюте учета ДС';uk='Сума у валюті обліку ГК'");
		
	ИначеЕсли Объект.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.ВзаиморасчетыСПодотчетнымиЛицами Тогда
		
		Элементы.БухСправкаВидСубконто.Видимость				= Ложь;
		Элементы.БухСправкаСубконто1.Видимость					= Истина;
		Элементы.БухСправкаСубконто2.Видимость					= Ложь;
		Элементы.БухСправкаСубконто3.Видимость					= Ложь;
		
		Элементы.БухСправкаКоличество.Видимость					= Ложь;
		Элементы.БухСправкаЦена.Видимость						= Ложь;
		
		Элементы.БухСправкаСубконто1.Заголовок					= НСтр("ru='Подотчетное лицо';uk='Підзвітна особа'");
	 	Элементы.БухСправкаСумма.Заголовок						= НСтр("ru='Задолженность подотчетника в валюте аванса';uk='Заборгованість підзвітника у валюті авансу'");
		Элементы.БухСправкаСуммаКт.Заголовок					= НСтр("ru='Задолженность перед подотчетником в валюте отчета';uk='Заборгованість перед підзвітником у валюті звіту'");
		Элементы.БухСправкаВалютнаяСумма.Заголовок				= НСтр("ru='Сумма (грн)';uk='Сума (грн)'");
		
    	// Сдвиним колонку ВалютнаяСумма в конец.
		Элементы.Переместить(Элементы.БухСправкаВалютнаяСумма,Элементы.БухСправка);
	
    КонецЕсли;
	
	ЗаполнитьДобавленныеКолонкиТаблиц();

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДобавленныеКолонкиТаблиц()
	
	ПараметрыДокумента	= Новый Структура("ВалютаРегламентированногоУчета, РазделУчета, Организация,УчетДенежныхСредствПоОбособленнымПодразделениям",
		ВалютаРегламентированногоУчета, Объект.РазделУчета, Объект.Организация,УчетДенежныхСредствПоОбособленнымПодразделениям);

	Для каждого СтрокаТаблицы Из Объект.БухСправка Цикл

		ЗаполнитьДобавленныеКолонкиСтрокиТаблицы_БухСправка(СтрокаТаблицы, ПараметрыДокумента);

	КонецЦикла;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьДобавленныеКолонкиСтрокиТаблицы_БухСправка(СтрокаТаблицы, ПараметрыДокумента)

	Если ЗначениеЗаполнено(СтрокаТаблицы.СчетУчета) Тогда
		
		СвойстваСчета	= БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(СтрокаТаблицы.СчетУчета);
		
		КоличествоСубконто	= СвойстваСчета.КоличествоСубконто;
		Для Индекс = 1 По 3 Цикл
			СтрокаТаблицы["Субконто" + Индекс + "Доступность"]	= (Индекс <= КоличествоСубконто);
		КонецЦикла;
		
		СтрокаТаблицы.СчетУчетаКоличественный = СвойстваСчета.Количественный;
		СтрокаТаблицы.СчетУчетаВалютный       = СвойстваСчета.Валютный;
		СтрокаТаблицы.СчетУчетаВид            = СвойстваСчета.Вид;
		
		Если СвойстваСчета.КоличествоСубконто
		   И ПараметрыДокумента.РазделУчета = ПредопределенноеЗначение("Перечисление.РазделыУчетаДляВводаОстатков.ДенежныеСредства") Тогда
			
			Если СтрокаТаблицы.СчетУчета = ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.ДенежныеСредстваВПутиВНациональнойВалюте")
		   	 ИЛИ СтрокаТаблицы.СчетУчета = ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.ДенежныеСредстваВПутиВИностраннойВалюте") Тогда 	   	
		  		СтрокаТаблицы.ВидСубконто = "Банки";
			ИначеЕсли СвойстваСчета.Родитель = ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.Касса")
				    И ПараметрыДокумента.УчетДенежныхСредствПоОбособленнымПодразделениям
					И  (СвойстваСчета.ВидСубконто1 = ПредопределенноеЗначение("ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ОбособленныеПодразделенияБезОбразованияЮрЛица") 
					ИЛИ СвойстваСчета.ВидСубконто2 = ПредопределенноеЗначение("ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ОбособленныеПодразделенияБезОбразованияЮрЛица")
					ИЛИ СвойстваСчета.ВидСубконто3 = ПредопределенноеЗначение("ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ОбособленныеПодразделенияБезОбразованияЮрЛица")) Тогда
				СтрокаТаблицы.ВидСубконто = НСтр("ru='Обособленные подразделения';uk='Відокремлені підрозділи'");
				Если ТипЗнч(СтрокаТаблицы.Субконто1) <> Тип("СправочникСсылка.ОбособленныеПодразделенияОрганизаций") Тогда
				     СтрокаТаблицы.Субконто1 = ПредопределенноеЗначение("Справочник.ОбособленныеПодразделенияОрганизаций.ПустаяСсылка");
				КонецЕсли; 
			ИначеЕсли СвойстваСчета.ВидСубконто1ТолькоОбороты Тогда
				СтрокаТаблицы.ВидСубконто = "";	
				СтрокаТаблицы.Субконто1Доступность = Ложь;
		 	Иначе
		    	СтрокаТаблицы.ВидСубконто = СвойстваСчета.ВидСубконто1Наименование;	   
		  	КонецЕсли; 
			
		КонецЕсли; //разделы учета	
	
	КонецЕсли; 

	
КонецПроцедуры

&НаСервере
Процедура ДатаПриИзмененииСервер()

	Документы.ВводНачальныхОстатков.УстановитьПараметрыФункциональныхОпцийФормыДокумента(ЭтаФорма);
	
	УправлениеФормойСервер();

КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииСервер()

	ДатаВводаОстатков	= Документы.ВводНачальныхОстатков.ПолучитьДатуВводаОстатков(Объект.Организация);
	
	Если ЗначениеЗаполнено(ДатаВводаОстатков) Тогда
		Объект.Дата	= ДатаВводаОстатков;
	КонецЕсли;

	Документы.ВводНачальныхОстатков.УстановитьПараметрыФункциональныхОпцийФормыДокумента(ЭтаФорма);
	
	УправлениеФормойСервер();

КонецПроцедуры

&НаКлиенте
Процедура УстановитьЗаголовкиИДоступностьСубконто(Форма, Счет,  ЕстьПодразделение, ЭтоТаблица = Ложь)

	ПоляФормы = Новый Структура("Субконто1, Субконто2, Субконто3",
								"БухСправкаСубконто1",
								"БухСправкаСубконто2",
								"БухСправкаСубконто3");

	БухгалтерскийУчетКлиентСервер.ПриВыбореСчета(Счет, Форма, ПоляФормы, Неопределено, ЭтоТаблица);

КонецПроцедуры

&НаКлиенте
Функция ПодготовитьПараметрыОбработки(Форма, СтрокаТабличнойЧасти) Экспорт
	
	ТекущийОбъект = Форма.Объект;
	
	ДанныеСтрокиТаблицы = ПоляСтрокиТабличнойЧасти();

	ДанныеОбъекта = Новый Структура("Дата, Организация, РазделУчета, УчетДенежныхСредствПоОбособленнымПодразделениям");
	
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, ТекущийОбъект);
	ДанныеОбъекта.УчетДенежныхСредствПоОбособленнымПодразделениям = Форма.УчетДенежныхСредствПоОбособленнымПодразделениям;
	
	ПараметрыОбработки = Новый Структура();
	ПараметрыОбработки.Вставить("ДанныеСтрокиТаблицы", 	ДанныеСтрокиТаблицы);
	ПараметрыОбработки.Вставить("ДанныеОбъекта", 		ДанныеОбъекта);
	
	Возврат ПараметрыОбработки;
	
КонецФункции

&НаКлиенте
Функция ПоляСтрокиТабличнойЧасти()

	СтрокаТаблицы = Элементы.БухСправка.ТекущиеДанные;

	ПараметрыСтроки = Новый Структура(
		"СчетУчета, Субконто1, Субконто2, Субконто3,
		|Субконто1Доступность, Субконто2Доступность, Субконто3Доступность, ВидСубконто,
		|СчетУчетаКоличественный, СчетУчетаВалютный, СчетУчетаВид,     
		|Количество, Сумма, Валюта, ВалютнаяСумма, СуммаКт, Курс, Цена, Кратность ");
		
	ЗаполнитьЗначенияСвойств(ПараметрыСтроки, СтрокаТаблицы);
	
	Возврат ПараметрыСтроки;

КонецФункции

&НаСервереБезКонтекста
Процедура ЗаполнитьДобавленныеКолонкиСтрокиТаблицыБухСправка(СтрокаТаблицы, ПараметрыОбъекта)
	
	ЗаполнитьДобавленныеКолонкиСтрокиТаблицы_БухСправка(СтрокаТаблицы, ПараметрыОбъекта)
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьИзменениеСубконто(НомерСубконто)

	СтрокаТаблицы		= Элементы.БухСправка.ТекущиеДанные;
	
	ЗначениеСубконто	= СтрокаТаблицы["Субконто" + НомерСубконто];
	ТипСубконто			= ТипЗнч(ЗначениеСубконто);
	
	Если ТипСубконто = Тип("СправочникСсылка.Контрагенты") Тогда
		
		ПараметрыСтроки = ПоляСтрокиТабличнойЧасти();
		ПараметрыОбъекта = Новый Структура("ВалютаРегламентированногоУчета, РазделУчета, Организация",
								ВалютаРегламентированногоУчета, Объект.РазделУчета, Объект.Организация);

		КонтрагентПриИзмененииСервер(ПараметрыСтроки, ПараметрыОбъекта);
		
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ПараметрыСтроки);
		
	ИначеЕсли ТипСубконто = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
		
		ПараметрыСтроки = ПоляСтрокиТабличнойЧасти();
		ПараметрыОбъекта = Новый Структура("ВалютаРегламентированногоУчета, РазделУчета, Организация",
								ВалютаРегламентированногоУчета, Объект.РазделУчета, Объект.Организация);

		ДоговорСчетПриИзмененииСервер(ПараметрыСтроки, ПараметрыОбъекта);

		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ПараметрыСтроки);
		
	ИначеЕсли ТипСубконто = Тип("СправочникСсылка.БанковскиеСчета") Тогда
		
		ПараметрыСтроки = ПоляСтрокиТабличнойЧасти();
		БанковскийСчетПриИзмененииСервер(ПараметрыСтроки, НомерСубконто);

		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ПараметрыСтроки);
		ВалютаПриИзмененииБухСправка(Истина);
		
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Процедура БанковскийСчетПриИзмененииСервер(ПараметрыСтроки, НомерСубконто)

	СвойстваСчета	= БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(ПараметрыСтроки.СчетУчета);
	
	Если СвойстваСчета.Валютный Тогда		
		БанковскийСчет = ПараметрыСтроки["Субконто" + НомерСубконто];
		Если ЗначениеЗаполнено(БанковскийСчет) Тогда
			ПараметрыСтроки.Валюта = ПараметрыСтроки["Субконто" + НомерСубконто].ВалютаДенежныхСредств;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ДоговорСчетПриИзмененииСервер(ПараметрыСтроки, Знач ПараметрыДокумента)

	ВидСубконтоДоговоры	= ПараметрыСтроки.СчетУчета.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры);
	
	СвойстваСчета		= БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(ПараметрыСтроки.СчетУчета);

	Если СвойстваСчета.Вид = ВидСчета.Активный И ПараметрыСтроки.СуммаКт <> 0 Тогда
		ПараметрыСтроки.Сумма	= ПараметрыСтроки.СуммаКт;
		ПараметрыСтроки.СуммаКт	= 0;
	ИначеЕсли СвойстваСчета.Вид = ВидСчета.Пассивный И ПараметрыСтроки.Сумма <> 0 Тогда
		ПараметрыСтроки.СуммаКт	= ПараметрыСтроки.Сумма;
		ПараметрыСтроки.Сумма	= 0;
	КонецЕсли;

	Если СвойстваСчета.Валютный И НЕ ВидСубконтоДоговоры = Неопределено Тогда
		ВалютаВзаиморасчетов	= ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПараметрыСтроки["Субконто" + ВидСубконтоДоговоры.НомерСтроки], "ВалютаВзаиморасчетов");
		ПараметрыСтроки.Валюта = ?(ЗначениеЗаполнено(ВалютаВзаиморасчетов), ВалютаВзаиморасчетов, ПараметрыДокумента.ВалютаРегламентированногоУчета);
	Иначе
		ПараметрыСтроки.Валюта = ПараметрыДокумента.ВалютаРегламентированногоУчета;
	КонецЕсли;
	
	Если НЕ СвойстваСчета.Количественный Тогда
		ПараметрыСтроки.Количество	= 0;
	КонецЕсли;

	ЗаполнитьДобавленныеКолонкиСтрокиТаблицы_БухСправка(ПараметрыСтроки, ПараметрыДокумента);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура КонтрагентПриИзмененииСервер(ПараметрыСтроки, Знач ПараметрыДокумента)

	ВидСубконтоКонтрагенты	= ПараметрыСтроки.СчетУчета.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
	ВидСубконтоДоговоры		= ПараметрыСтроки.СчетУчета.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры);
	
	Если ВидСубконтоКонтрагенты = Неопределено ИЛИ ВидСубконтоДоговоры = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	//МассивВидовДоговоров = Новый Массив;
	//МассивВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком);
	//МассивВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомитентом);
	//МассивВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомитентомНаЗакупку);
	//МассивВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПокупателем);
	//МассивВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером);
	//МассивВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомиссионеромНаЗакупку);
	//МассивВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.Прочее);

	БухгалтерскийУчетПереопределяемый.УстановитьДоговорКонтрагента(ПараметрыСтроки["Субконто" + ВидСубконтоДоговоры.НомерСтроки],
		ПараметрыСтроки["Субконто" + ВидСубконтоКонтрагенты.НомерСтроки], ПараметрыДокумента.Организация, Неопределено);
		
	ДоговорСчетПриИзмененииСервер(ПараметрыСтроки, ПараметрыДокумента);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ИзменитьПараметрыВыбораПолейСубконто(Форма)

	Если Форма.Элементы.БухСправка.ТекущаяСтрока <> Неопределено Тогда
		СтрокаТаблицы = Форма.Объект.БухСправка.НайтиПоИдентификатору(Форма.Элементы.БухСправка.ТекущаяСтрока);
		ПараметрыДокумента = ПолучитьСписокПараметров(Форма, СтрокаТаблицы, "Субконто%Индекс%");
		БухгалтерскийУчетКлиентСервер.ИзменитьПараметрыВыбораПолейСубконто(Форма, СтрокаТаблицы, "Субконто%Индекс%", "БухСправкаСубконто%Индекс%", ПараметрыДокумента);
	КонецЕсли;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьСписокПараметров(Форма, Объект, ШаблонИмяПоляОбъекта)

	СписокПараметров = Новый Структура;
	Для Индекс = 1 По 3 Цикл
		ИмяПоля = СтрЗаменить(ШаблонИмяПоляОбъекта, "%Индекс%", Индекс);
		Если ТипЗнч(Объект[ИмяПоля]) = Тип("СправочникСсылка.Контрагенты") Тогда
			СписокПараметров.Вставить("Контрагент", Объект[ИмяПоля]);
		ИначеЕсли ТипЗнч(Объект[ИмяПоля]) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
			СписокПараметров.Вставить("ДоговорКонтрагента", Объект[ИмяПоля]);
		ИначеЕсли ТипЗнч(Объект[ИмяПоля]) = Тип("СправочникСсылка.Номенклатура") Тогда
			СписокПараметров.Вставить("Номенклатура", Объект[ИмяПоля]);
		ИначеЕсли ТипЗнч(Объект[ИмяПоля]) = Тип("СправочникСсылка.Склады") Тогда
			СписокПараметров.Вставить("Склад", Объект[ИмяПоля]);
		КонецЕсли;
	КонецЦикла;
	СписокПараметров.Вставить("ОстаткиОбороты", "Кт");
	СписокПараметров.Вставить("Организация" , Форма.Объект.Организация);

	Возврат СписокПараметров;

КонецФункции

&НаКлиенте
Процедура ВалютаПриИзмененииБухСправка(НеобходимоПересчитатьКурс = Ложь)
	
	ТекущиеДанные = Элементы.БухСправка.ТекущиеДанные;
	
	Если НЕ Элементы.БухСправкаВалюта.Видимость Тогда
		ТекущиеДанные.ВалютнаяСумма	= 0;
		ТекущиеДанные.Курс		  	= 1;
		ТекущиеДанные.Кратность	  	= 1;
		ТекущиеДанные.Валюта		= ВалютаРегламентированногоУчета;
		Возврат;                      	
	КонецЕсли; 
	
	Если НЕ ЗначениеЗаполнено(ТекущиеДанные.Валюта) Тогда
		ТекущиеДанные.Курс		= 1;
		ТекущиеДанные.Кратность	= 1;
		ТекущиеДанные.Валюта	= ВалютаРегламентированногоУчета;
		Возврат;                      	
	КонецЕсли;  
		
	Если НеобходимоПересчитатьКурс Тогда
		КурсКратность = МодульВалютногоУчета.ПолучитьКурсВалюты(ТекущиеДанные.Валюта, Объект.Дата);
		ТекущиеДанные.Кратность = ?(КурсКратность.Кратность, КурсКратность.Кратность, 1);	
		ТекущиеДанные.Курс = ?(КурсКратность.Курс, КурсКратность.Курс, 1);	
	КонецЕсли;  
	
	// Ракировка значений колонок.
	Если ТекущиеДанные.Валюта = ВалютаРегламентированногоУчета Тогда
		ТекущиеДанные.Курс = 1;
		ТекущиеДанные.Кратность	  	= 1;
		// Для ВзаиморасчетыСПодотчетнымиЛицами в колонке ВалютнаяСумма значение в национальной валюте, а в Сумма или СуммаКт в валюте.
		Если Объект.РазделУчета = ПредопределенноеЗначение("Перечисление.РазделыУчетаДляВводаОстатков.ДенежныеСредства") Тогда
			ТекущиеДанные.ВалютнаяСумма = ТекущиеДанные.Сумма;
		ИначеЕсли Объект.РазделУчета = ПредопределенноеЗначение("Перечисление.РазделыУчетаДляВводаОстатков.ВзаиморасчетыСПодотчетнымиЛицами") Тогда	
			Если ТекущиеДанные.СуммаКт <> 0 Тогда
				ТекущиеДанные.СуммаКт = ТекущиеДанные.ВалютнаяСумма;
			ИначеЕсли ТекущиеДанные.Сумма <> 0 Тогда
				ТекущиеДанные.Сумма = ТекущиеДанные.ВалютнаяСумма;
			КонецЕсли;
		Иначе
			Если ТекущиеДанные.СуммаКт <> 0 Тогда
				ТекущиеДанные.ВалютнаяСумма = ТекущиеДанные.СуммаКт;
			ИначеЕсли ТекущиеДанные.Сумма <> 0 Тогда
				ТекущиеДанные.ВалютнаяСумма = ТекущиеДанные.Сумма;
			КонецЕсли;
		КонецЕсли; // РазделУчета     				
	Иначе
		БухСправкаВалютныеПересчеты(Истина);	
	КонецЕсли;
	
КонецПроцедуры // ВалютаПриИзмененииБухСправка()

&НаКлиенте
Процедура БухСправкаВалютныеПересчеты(ОсновнойПересчет = Ложь)
					
	ДанныеТекущейСтроки = Элементы.БухСправка.ТекущиеДанные;
	
	Если НЕ (ОсновнойПересчет
		 ИЛИ (Объект.РазделУчета = ПредопределенноеЗначение("Перечисление.РазделыУчетаДляВводаОстатков.ДенежныеСредства"))
	     ИЛИ (Объект.РазделУчета = ПредопределенноеЗначение("Перечисление.РазделыУчетаДляВводаОстатков.ВзаиморасчетыСПодотчетнымиЛицами")) ) Тогда
		Возврат;	
	КонецЕсли; // НЕ АвтоматическийПересчет 

	
	// Пересчитаем в зависимости от нового курса.	
	// Для Активно-пасивного заполняем ту которая не пустая, если же не заполнена ни одна, тогда сумма Дт.
	ИмяКолонкиПересчета = ?(НЕ Элементы.БухСправкаСуммаКт.Видимость
						ИЛИ ДанныеТекущейСтроки.СчетУчетаВид = ВидСчета.Активный
		 				ИЛИ (ДанныеТекущейСтроки.СчетУчетаВид = ВидСчета.АктивноПассивный
						   И (ДанныеТекущейСтроки.Сумма <> 0 ИЛИ ДанныеТекущейСтроки.СуммаКт = 0)),
		 					"Сумма",			
							"СуммаКт");
							
	// Для ВзаиморасчетыСПодотчетнымиЛицами валютная сумма вводится в поле Сумма и СуммаКт.
	//  А поле ВалютнаяСумма не доступно для редактирования, соответственно второе условие не должно отрабатывать.	
	Если Объект.РазделУчета <> ПредопределенноеЗначение("Перечисление.РазделыУчетаДляВводаОстатков.ВзаиморасчетыСПодотчетнымиЛицами") Тогда
		ДанныеТекущейСтроки[ИмяКолонкиПересчета] = СуммаВРегламентированнойВалютеБухСправка(ДанныеТекущейСтроки.ВалютнаяСумма, ДанныеТекущейСтроки.Валюта, ВалютаРегламентированногоУчета, ДанныеТекущейСтроки.Курс, ДанныеТекущейСтроки.Кратность);	
	Иначе		
		ДанныеТекущейСтроки.ВалютнаяСумма = СуммаВРегламентированнойВалютеБухСправка(ДанныеТекущейСтроки[ИмяКолонкиПересчета], ДанныеТекущейСтроки.Валюта, ВалютаРегламентированногоУчета, ДанныеТекущейСтроки.Курс, ДанныеТекущейСтроки.Кратность);
	КонецЕсли;		
	
КонецПроцедуры // БухСправкаВалютныеПересчеты()

&НаСервереБезКонтекста
Функция СуммаВРегламентированнойВалютеБухСправка(ВалютнаяСумма, Валюта, ВалютаРегламентированногоУчета, Курс, Кратность)

	Возврат МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(ВалютнаяСумма,
															Валюта,
															ВалютаРегламентированногоУчета,
															Курс, 1, Кратность, 1);

КонецФункции // ПересчитатьВРегламентированнуюВалюту()

&НаКлиенте
Процедура ОпределитьМестоположениеВалютныхЗначений(ТекущийРеквизит)

	ДанныеТекущейСтроки = Элементы.БухСправка.ТекущиеДанные;
	ПротивоположныйРеквизит = ?(ТекущийРеквизит = "Сумма", "СуммаКт", "Сумма");
	
	Если ДанныеТекущейСтроки[ТекущийРеквизит] Тогда
		// Очистим противоположную сумму. Или по Дт или по Кт, но не по обеим сразу. 
		ДанныеТекущейСтроки[ПротивоположныйРеквизит] = 0; 
		
		Если ДанныеТекущейСтроки.Валюта = ВалютаРегламентированногоУчета Тогда
			Если Объект.РазделУчета = ПредопределенноеЗначение("Перечисление.РазделыУчетаДляВводаОстатков.ДенежныеСредства") Тогда
				ДанныеТекущейСтроки[ТекущийРеквизит] = ДанныеТекущейСтроки.ВалютнаяСумма;
			Иначе 
			    ДанныеТекущейСтроки.ВалютнаяСумма = ДанныеТекущейСтроки[ТекущийРеквизит];
			КонецЕсли;
		Иначе	
			БухСправкаВалютныеПересчеты();
		КонецЕсли;	
	ИначеЕсли НЕ ДанныеТекущейСтроки[ПротивоположныйРеквизит] Тогда 
		ДанныеТекущейСтроки.ВалютнаяСумма = 0;
	КонецЕсли;

КонецПроцедуры // ОпределитьМестоположениеВалютныхЗначений()

// Пресчет цены для количественных.
&НаКлиенте
Процедура ПересчитатьЦену(ТекущийРеквизит)
	
	ТекущиеДанные 	= Элементы.БухСправка.ТекущиеДанные;
	КолонкаЦена		= Элементы.БухСправкаЦена;
	ТекущиеДанные.Цена = ?(КолонкаЦена.Видимость И КолонкаЦена.Доступность,
						  ?(ТекущиеДанные.Количество, ТекущиеДанные[ТекущийРеквизит]/ТекущиеДанные.Количество, ТекущиеДанные[ТекущийРеквизит]),
						  0);			
		
КонецПроцедуры // ПересчитатьЦену(Элемент)

&НаСервере
Процедура УстановитьСостояниеДокумента()
	
	СостояниеДокумента = ОбщегоНазначенияБП.СостояниеДокумента(Объект);
	
КонецПроцедуры


#КонецОбласти 


