
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	
КонецПроцедуры

// Установка видимости элементов
&НаСервере
Процедура УстановитьВидимость()

	Если НЕ ЗначениеЗаполнено(НематериальныйАктив.НалоговоеНазначение) Тогда
		СтрокаЗаголовка = НСтр("ru='Не определено';uk='Не визначено'");
	Иначе
		СтрокаЗаголовка = НематериальныйАктив.НалоговоеНазначение.Наименование;
	КонецЕсли;
	ИнформацияОНалоговомНазначении = СтрокаЗаголовка;
	
	Элементы.СчетНачисленияАмортизацииБУ.Видимость                  = Истина;
	Элементы.СрокПолезногоИспользованияБУ.Видимость 				= НачислятьАмортизациюБУ;
	Элементы.РасшифровкаСрокаПолезногоИспользованияБУ.Видимость 	= НачислятьАмортизациюБУ;
	
	Элементы.СрокПолезногоИспользованияНУ.Видимость 				= НачислятьАмортизациюБУ;
	Элементы.РасшифровкаСрокаПолезногоИспользованияНУ.Видимость 	= НачислятьАмортизациюБУ;
	
	Элементы.СпособНачисленияАмортизацииБУ.Видимость        		= НачислятьАмортизациюБУ;
	
	ДатаНКУ2015_ДляВводаНачальныхОстатков = '2015 01 01' - 86400;
	ЭтоДокументДо2015 = (Дата < ДатаНКУ2015_ДляВводаНачальныхОстатков);
	
	НепроизводственноеНУ = (НематериальныйАктив.НалоговоеНазначение.ВидНалоговойДеятельности = Справочники.ВидыНалоговойДеятельности.НеОблагаемая);
	
	Элементы.СпособНачисленияАмортизацииНУ.Видимость 		= НЕ ЭтоДокументДо2015 И НачислятьАмортизациюБУ И НЕ НепроизводственноеНУ;
	Элементы.ПервоначальнаяСтоимостьНУ.Видимость 			= НЕ ЭтоДокументДо2015 И НЕ НепроизводственноеНУ;
	Элементы.НакопленнаяАмортизацияНУ.Видимость 			= НЕ ЭтоДокументДо2015 И НЕ НепроизводственноеНУ;
	Элементы.ГруппаСрокПолезногоИспользованияНУ.Видимость 	= НЕ НепроизводственноеНУ;
	
	мПроизводственныйСпособНачисления = (СпособНачисленияАмортизацииБУ = Перечисления.СпособыНачисленияАмортизацииНМА.Производственный)
	                                    И НачислятьАмортизациюБУ;
	
	Элементы.ОбъемПродукцииРаботДляВычисленияАмортизации.Видимость 	= мПроизводственныйСпособНачисления;
	
	Элементы.ЛиквидационнаяСтоимостьБУ.ОтметкаНезаполненного = НачислятьАмортизациюБУ И 
																		((ЛиквидационнаяСтоимостьБУ = 0)
		                                                                  И (СпособНачисленияАмортизацииБУ 
		                                                                     = Перечисления.СпособыНачисленияАмортизацииНМА.УменьшенияОстатка));
	
	
	мВалютаРегл = Константы.ВалютаРегламентированногоУчета.Получить();
	Элементы.РеглВалюта.Заголовок = мВалютаРегл;
	Элементы.РеглВалюта.Видимость = Элементы.ЛиквидационнаяСтоимостьБУ.Видимость;
	
	Элементы.ДатаПринятияКУчетуРеглБУ.Видимость = НачислятьАмортизациюБУ И (СпособНачисленияАмортизацииБУ = Перечисления.СпособыНачисленияАмортизацииНМА.УменьшенияОстатка 
															ИЛИ СпособНачисленияАмортизацииБУ = Перечисления.СпособыНачисленияАмортизацииНМА.УскоренногоУменьшенияОстатка
															ИЛИ СпособНачисленияАмортизацииБУ = Перечисления.СпособыНачисленияАмортизацииНМА.Кумулятивный
															ИЛИ СпособНачисленияАмортизацииНУ = Перечисления.СпособыНачисленияАмортизацииНМА.УменьшенияОстатка 
															ИЛИ СпособНачисленияАмортизацииНУ = Перечисления.СпособыНачисленияАмортизацииНМА.УскоренногоУменьшенияОстатка
															ИЛИ СпособНачисленияАмортизацииНУ = Перечисления.СпособыНачисленияАмортизацииНМА.Кумулятивный)
															;
	Элементы.ДатаПринятияКУчетуРегл.Доступность =  НЕ (СпособНачисленияАмортизацииБУ = Перечисления.СпособыНачисленияАмортизацииНМА.УменьшенияОстатка 
																ИЛИ СпособНачисленияАмортизацииБУ = Перечисления.СпособыНачисленияАмортизацииНМА.УскоренногоУменьшенияОстатка);

КонецПроцедуры // УстановитьВидимость()
 

&НаКлиентеНаСервереБезКонтекста
Процедура ОтобразитьРасшифровкуСрокаПолезногоИспользованияБУ(Форма)
	
	Форма.Элементы.РасшифровкаСрокаПолезногоИспользованияБУ.Заголовок = 
		УправлениеВнеоборотнымиАктивамиКлиентСервер.РасшифровкаСрокаПолезногоИспользования(Форма.СрокПолезногоИспользованияБУ);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОтобразитьРасшифровкуСрокаПолезногоИспользованияНУ(Форма)
	
	Форма.Элементы.РасшифровкаСрокаПолезногоИспользованияНУ.Заголовок = 
		УправлениеВнеоборотнымиАктивамиКлиентСервер.РасшифровкаСрокаПолезногоИспользования(Форма.СрокПолезногоИспользованияНУ);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьМассивСпособовАмортизацииБУ(СчетУчетаБУ) Экспорт
                                                                                                        
	МассивПеречисления = Новый Массив;
	
	МассивПеречисления.Добавить(Перечисления.СпособыНачисленияАмортизацииНМА.Прямолинейный);
	МассивПеречисления.Добавить(Перечисления.СпособыНачисленияАмортизацииНМА.Производственный);	
	
	Если ЗначениеЗаполнено(СчетУчетаБУ) Тогда
		МассивПеречисления.Добавить(Перечисления.СпособыНачисленияАмортизацииНМА.УменьшенияОстатка);
		МассивПеречисления.Добавить(Перечисления.СпособыНачисленияАмортизацииНМА.УскоренногоУменьшенияОстатка);
		МассивПеречисления.Добавить(Перечисления.СпособыНачисленияАмортизацииНМА.Кумулятивный);
	КонецЕсли;
	
	Возврат МассивПеречисления;

КонецФункции // ПолучитьМассивСпособовАмортизацииНУ()

&НаСервереБезКонтекста
Функция ПолучитьМассивСпособовАмортизацииНУ(СчетУчетаБУ, СпособНачисленияАмортизацииБУ, ДатаВводаНачальныхОстатков) Экспорт
                                                                                                        
	МассивПеречисления = Новый Массив;
	
	МассивПеречисления.Добавить(Перечисления.СпособыНачисленияАмортизацииНМА.Прямолинейный);
	
	Если ДатаВводаНачальныхОстатков >= Дата('20200301') 
			И СпособНачисленияАмортизацииБУ = Перечисления.СпособыНачисленияАмортизацииНМА.Производственный Тогда
		МассивПеречисления.Добавить(Перечисления.СпособыНачисленияАмортизацииНМА.Производственный);	
	КонецЕсли; 

	
	Если ЗначениеЗаполнено(СчетУчетаБУ) Тогда
		МассивПеречисления.Добавить(Перечисления.СпособыНачисленияАмортизацииНМА.УменьшенияОстатка);
		МассивПеречисления.Добавить(Перечисления.СпособыНачисленияАмортизацииНМА.УскоренногоУменьшенияОстатка);
		МассивПеречисления.Добавить(Перечисления.СпособыНачисленияАмортизацииНМА.Кумулятивный);
	КонецЕсли;
	
	Возврат МассивПеречисления;

КонецФункции // ПолучитьМассивСпособовАмортизацииНУ()

&НаСервере
Функция ВернутьСтруктуруЗакрытия()
	
	Структура = Новый Структура();
	
	Для Каждого Реквизит Из ЭтаФорма.ПолучитьРеквизиты() Цикл
		Структура.Вставить(Реквизит.Имя, ЭтаФорма[Реквизит.Имя]);
	КонецЦикла;
	
	Возврат Структура;
	
КонецФункции

&НаКлиенте
Процедура ВопросСохранитьИзмененияЗавершение(Результат, ДополнительныеПараметры) Экспорт

	Если Результат = КодВозвратаДиалога.Да Тогда
		Если ПроверитьЗаполнение() Тогда
			Модифицированность = Ложь;
			РезультатЗакрытия = ВернутьСтруктуруЗакрытия();
			Закрыть(РезультатЗакрытия);
		КонецЕсли;
	ИначеЕсли Результат = КодВозвратаДиалога.Нет Тогда
		Модифицированность = Ложь;
		Закрыть(Неопределено);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСчетаУчета()
    	
	//Если не БезВопросов Тогда
	//	Текст = НСтр("ru='Установить значения счетов учета, используемые по умолчанию?';uk='Встановити значення рахунків, що використовуються по умовчанню?'");
	//	Ответ = Вопрос(Текст, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да, );

	//	Если Ответ = КодВозвратаДиалога.Нет Тогда
	//		Возврат;
	//	КонецЕсли;
	//КонецЕсли;
	
	СчетНачисленияАмортизацииБУ	= ПланыСчетов.Хозрасчетный.НакопленнаяАмортизацияНематериальныхАктивов;
	СчетУчетаБУ 				= ПланыСчетов.Хозрасчетный.ДругиеНематериальныеАктивы;
			
КонецПроцедуры // ЗаполнитьСчетаУчетаВСтрокеТабЧасти()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	
	Если ПроверитьЗаполнение() Тогда
		ЗаписатьБезПроверок(Команда)
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьБезПроверок(Команда)
	Модифицированность = Ложь;
	РезультатЗакрытия = ВернутьСтруктуруЗакрытия();
	Закрыть(РезультатЗакрытия);
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ

&НаКлиенте
Процедура НематериальныйАктивПриИзменении(Элемент)
	
	НематериальныйАктивПриИзмененииСервер();

КонецПроцедуры

&НаСервере
Процедура НематериальныйАктивПриИзмененииСервер()

	Если НематериальныйАктив.НалоговоеНазначение.ВидНалоговойДеятельности = Справочники.ВидыНалоговойДеятельности.НеОблагаемая Тогда 		
		НачислятьАмортизациюНУ = Ложь;
	КонецЕсли;
	
	УстановитьВидимость();
	ЗаполнитьСчетаУчета();
	
	УправлениеНеоборотнымиАктивами.УстановитьНалоговуюГруппуНМА(СчетУчетаБУ, НалоговаяГруппаОС);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ЗАКЛАДКИ "УЧЕТНЫЕ ДАННЫЕ"
 
&НаКлиенте
Процедура ПервоначальнаяСтоимостьБУПриИзменении(Элемент)
	Если ПервоначальнаяСтоимостьНУ = 0 Тогда
		ПервоначальнаяСтоимостьНУ = ПервоначальнаяСтоимостьБУ;
	КонецЕсли;		
КонецПроцедуры

&НаКлиенте
Процедура НакопленнаяАмортизацияБУПриИзменении(Элемент)
	Если НакопленнаяАмортизацияНУ = 0 Тогда
		НакопленнаяАмортизацияНУ = НакопленнаяАмортизацияБУ;
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура СрокПолезногоИспользованияБУПриИзменении(Элемент)
		СрокПолезногоИспользованияНУ = СрокПолезногоИспользованияБУ;
		ОтобразитьРасшифровкуСрокаПолезногоИспользованияБУ(ЭтаФорма);
		ОтобразитьРасшифровкуСрокаПолезногоИспользованияНУ(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура НачислятьАмортизациюБУПриИзменении(Элемент)
		УстановитьВидимость()
КонецПроцедуры

&НаКлиенте
Процедура СрокПолезногоИспользованияНУПриИзменении(Элемент)
		ОтобразитьРасшифровкуСрокаПолезногоИспользованияНУ(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура СпособНачисленияАмортизацииБУПриИзменении(Элемент)
	
	ДатаВводаНачальныхОстатков = ЭтаФорма.Дата;
	
	Элементы.СпособНачисленияАмортизацииНУ.СписокВыбора.ЗагрузитьЗначения(ПолучитьМассивСпособовАмортизацииНУ(СчетУчетаБУ, СпособНачисленияАмортизацииБУ, ДатаВводаНачальныхОстатков));
	
	Если ДатаВводаНачальныхОстатков >= Дата('20200301') Тогда
		СпособНачисленияАмортизацииНУ = СпособНачисленияАмортизацииБУ;
	ИначеЕсли СпособНачисленияАмортизацииБУ <> ПредопределенноеЗначение("Перечисление.СпособыНачисленияАмортизацииНМА.Производственный") Тогда
		СпособНачисленияАмортизацииНУ = СпособНачисленияАмортизацииБУ;
	Иначе	
		СпособНачисленияАмортизацииНУ = ПредопределенноеЗначение("Перечисление.СпособыНачисленияАмортизацииНМА.Прямолинейный");
	КонецЕсли;	
	
	УстановитьВидимость();
	
КонецПроцедуры

&НаКлиенте
Процедура СпособНачисленияАмортизацииНУПриИзменении(Элемент)
	УстановитьВидимость();
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЗаполнитьЗначенияСвойств(ЭтаФорма, Параметры.ДанныеЗаполнения);
	
	ДатаУчетнойПолитики = Дата + 86400;
	ЕстьНалогНаПрибыль = УчетнаяПолитика.ПлательщикНалогаНаПрибыль(Организация, ДатаУчетнойПолитики);
	
	ОбщегоНазначенияБПКлиентСервер.УстановитьПараметрОрганизацияФункциональныхОпцийФормы(
		ЭтаФорма,
		Организация,
		ДатаУчетнойПолитики);
	
	// Установка значений по умолчанию.
	Если Параметры.ЭтоНовый И НЕ Параметры.Копирование Тогда
		
		СпособНачисленияАмортизацииБУ = Перечисления.СпособыНачисленияАмортизацииНМА.Прямолинейный;
		НачислятьАмортизациюБУ        = Истина;
		НачислятьАмортизациюНУ        = Истина;
 		НалоговоеНазначение   		  = Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_Облагаемая;
 		ДатаПринятияКУчетуРегл   	  = Дата;
		
	КонецЕсли;
	
	Заголовок = НСтр("ru='Нематериальные активы: %1';uk='Нематеріальні активи: %1'");
	Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Заголовок,
		?(Параметры.ЭтоНовый, НСтр("ru='Новая строка';uk='Новий рядок'"), НематериальныйАктив));
	
	ОтобразитьРасшифровкуСрокаПолезногоИспользованияБУ(ЭтаФорма);
	ОтобразитьРасшифровкуСрокаПолезногоИспользованияНУ(ЭтаФорма);
	
	// Ограничение выбора счета учета:
	МассивСчетов = Новый Массив;
	МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.НематериальныеАктивы);
	
	МассивСчетовАмортизации = Новый Массив;
	МассивСчетовАмортизации.Добавить(ПланыСчетов.Хозрасчетный.НакопленнаяАмортизацияНематериальныхАктивов);
	
	МассивИсключений = Новый Массив;
	
	мСписокСчетов            = БухгалтерскийУчет.ПолучитьМассивСчетовССубсчетами(МассивСчетов, Ложь, , , МассивИсключений);
	мСписокСчетовАмортизации = БухгалтерскийУчет.ПолучитьМассивСчетовССубсчетами(МассивСчетовАмортизации, Ложь, , , МассивИсключений);
	БухгалтерскийУчетКлиентСервер.ИзменитьПараметрыВыбораСчета(Элементы.СчетУчетаБУ, мСписокСчетов);
	БухгалтерскийУчетКлиентСервер.ИзменитьПараметрыВыбораСчета(Элементы.СчетНачисленияАмортизацииБУ, мСписокСчетовАмортизации);

	ЗаполнитьСчетаУчета();
	
	Элементы.ОбъемПродукцииРаботДляВычисленияАмортизации.Видимость = Ложь;
		
	// Установка видимости закладок "Налоговый учет".
	ВидимостьНалоговыхРеквизитов = ЕстьНалогНаПрибыль;
	мВидНалоговойДеятельностиНеОблагаемая = Справочники.ВидыНалоговойДеятельности.НеОблагаемая;
	мВидНалоговойДеятельностиНМА          = НематериальныйАктив.НалоговоеНазначение.ВидНалоговойДеятельности;
	
	мПроизводственныйАктив        = мВидНалоговойДеятельностиНМА <> мВидНалоговойДеятельностиНеОблагаемая;

	Элементы.ПервоначальнаяСтоимостьНУ.Видимость		   = ВидимостьНалоговыхРеквизитов;
	Элементы.НалоговаяГруппаОС.Видимость                   = ВидимостьНалоговыхРеквизитов;
	Элементы.НакопленнаяАмортизацияНУ.Видимость            = ВидимостьНалоговыхРеквизитов и мПроизводственныйАктив;
	Элементы.ПервоначальнаяСтоимостьНУ.Видимость           = ВидимостьНалоговыхРеквизитов;
	Элементы.НакопленнаяАмортизацияНУ.Видимость            = мПроизводственныйАктив;

	Элементы.СпособНачисленияАмортизацииБУ.СписокВыбора.ЗагрузитьЗначения(ПолучитьМассивСпособовАмортизацииБУ(СчетУчетаБУ));
	Элементы.СпособНачисленияАмортизацииНУ.СписокВыбора.ЗагрузитьЗначения(ПолучитьМассивСпособовАмортизацииНУ(СчетУчетаБУ, СпособНачисленияАмортизацииБУ, ЭтаФорма.Дата));
	
	УстановитьВидимость();
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)

	Если ЗавершениеРаботы И Модифицированность Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если Модифицированность Тогда
		
		Отказ = Истина;
		
		ТекстВопроса = НСтр("ru='Данные были изменены. Сохранить изменения?';uk='Дані були змінені. Зберегти зміни?'");
		Оповещение = Новый ОписаниеОповещения("ВопросСохранитьИзмененияЗавершение", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)

	МассивНепроверяемыхРеквизитов = Новый Массив;
	
	Если НЕ НачислятьАмортизациюБУ Тогда
		МассивНепроверяемыхРеквизитов.Добавить("СчетНачисленияАмортизацииБУ");
		МассивНепроверяемыхРеквизитов.Добавить("ОбъемПродукцииРаботДляВычисленияАмортизации");
		МассивНепроверяемыхРеквизитов.Добавить("СрокПолезногоИспользованияБУ");
		МассивНепроверяемыхРеквизитов.Добавить("СрокПолезногоИспользованияНУ");
		МассивНепроверяемыхРеквизитов.Добавить("ЛиквидационнаяСтоимостьБУ");
		МассивНепроверяемыхРеквизитов.Добавить("ПервоначальнаяСтоимостьНУ");
		МассивНепроверяемыхРеквизитов.Добавить("СпособОтраженияРасходов");
		МассивНепроверяемыхРеквизитов.Добавить("СпособНачисленияАмортизацииБУ");
	ИначеЕсли НЕ ЗначениеЗаполнено(СпособНачисленияАмортизацииБУ) Тогда
		МассивНепроверяемыхРеквизитов.Добавить("ОбъемПродукцииРаботДляВычисленияАмортизации");
		МассивНепроверяемыхРеквизитов.Добавить("СрокПолезногоИспользованияБУ");
		МассивНепроверяемыхРеквизитов.Добавить("ЛиквидационнаяСтоимостьБУ");
		МассивНепроверяемыхРеквизитов.Добавить("СрокПолезногоИспользованияНУ");
	Иначе
		Если СпособНачисленияАмортизацииБУ = Перечисления.СпособыНачисленияАмортизацииНМА.Производственный Тогда
			МассивНепроверяемыхРеквизитов.Добавить("СрокПолезногоИспользованияНУ");
			МассивНепроверяемыхРеквизитов.Добавить("СрокПолезногоИспользованияБУ");
		Иначе					
			МассивНепроверяемыхРеквизитов.Добавить("ОбъемПродукцииРаботДляВычисленияАмортизации");
		КонецЕсли;
		Если СпособНачисленияАмортизацииБУ <> Перечисления.СпособыНачисленияАмортизацииНМА.УменьшенияОстатка Тогда
			МассивНепроверяемыхРеквизитов.Добавить("ЛиквидационнаяСтоимостьБУ");
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЕстьНалогНаПрибыль Тогда
		МассивНепроверяемыхРеквизитов.Добавить("НачислятьАмортизациюНУ");
		МассивНепроверяемыхРеквизитов.Добавить("ПервоначальнаяСтоимостьНУ");
		МассивНепроверяемыхРеквизитов.Добавить("СрокПолезногоИспользованияНУ");
		МассивНепроверяемыхРеквизитов.Добавить("НалоговаяГруппаОС");
	КонецЕсли; 
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
КонецПроцедуры




