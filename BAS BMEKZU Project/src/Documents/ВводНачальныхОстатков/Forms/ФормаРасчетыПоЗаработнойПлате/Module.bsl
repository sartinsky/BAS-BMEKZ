////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	//ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтаФорма, ДополнительныеОтчетыИОбработкиКлиентСервер.ТипФормыОбъекта());
	
	Если Параметры.Ключ.Пустая() Тогда
		ПодготовитьФормуНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом

	ПодготовитьФормуНаСервере();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)

	Оповестить("ОбновитьФормуПомощникаВводаОстатков", Объект.Организация, "ВводНачальныхОстатков");

КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	Документы.ВводНачальныхОстатков.УстановитьЗаголовокФормы(ЭтаФорма);
	УправлениеФормойСервер();
	
	УстановитьСостояниеДокумента();

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)

	ОбщегоНазначенияБПКлиент.ОбработкаОповещенияФормыДокумента(ЭтаФорма, Объект.Ссылка, ИмяСобытия, Параметр, Источник);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)

	Если НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДатаДокумента) Тогда
		// Изменение времени не влияет на поведение документа.
		ТекущаяДатаДокумента = Объект.Дата;
		Возврат;
	КонецЕсли;

	// Общие проверки условий по датам.
	ТребуетсяВызовСервера = ОбщегоНазначенияБПКлиент.ТребуетсяВызовСервераПриИзмененииДатыДокумента(Объект.Дата, 
		ТекущаяДатаДокумента);

	// Если определили, что изменение даты может повлиять на какие-либо параметры, 
	// то передаем обработку на сервер.
	Если ТребуетсяВызовСервера Тогда
		ДатаПриИзмененииСервер();
	КонецЕсли;
	
	// Запомним новую дату документа.
	ТекущаяДатаДокумента = Объект.Дата;

КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)

	ОрганизацияПриИзмененииСервер();

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ 

&НаКлиенте
Процедура РасчетыПоЗаработнойПлатеПериодРегистрацииПриИзменении(Элемент)
	
	СтрокаТаблицы = Элементы.РасчетыПоЗаработнойПлате.ТекущиеДанные;
	Если СтрокаТаблицы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаТаблицы.ПериодРегистрации = НачалоМесяца(СтрокаТаблицы.ПериодРегистрации);

КонецПроцедуры

&НаКлиенте
Процедура РасчетыПоЗаработнойПлатеПериодРегистрацииРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	СтрокаТаблицы = Элементы.РасчетыПоЗаработнойПлате.ТекущиеДанные;
	Если СтрокаТаблицы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Направление = 1 Тогда // увеличиваем значение
		СтрокаТаблицы.ПериодРегистрации = КонецМесяца(СтрокаТаблицы.ПериодРегистрации) + 1
	Иначе // = -1 - уменьшаем значение
		СтрокаТаблицы.ПериодРегистрации = НачалоМесяца(СтрокаТаблицы.ПериодРегистрации - 1)
	КонецЕсли;
	СтандартнаяОбработка = Ложь;

КонецПроцедуры

&НаКлиенте
Процедура РасчетыПоЗаработнойПлатеНалогНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтрокаТаблицы = Элементы.РасчетыПоЗаработнойПлате.ТекущиеДанные;
	Если СтрокаТаблицы = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
    ДанныеВыбора = ПолучитьДоступныеНалоги(СтрокаТаблицы.СчетУчета);

	Если ДанныеВыбора <> Неопределено Тогда
		СтандартнаяОбработка = Ложь;
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура РасчетыПоЗаработнойПлатеНалогПриИзменении(Элемент)
	
	СтрокаТаблицы = Элементы.РасчетыПоЗаработнойПлате.ТекущиеДанные;
	ПараметрыСтроки		= ПоляСтрокиТабличнойЧасти(СтрокаТаблицы);
	ПараметрыДокумента	= Новый Структура("ВалютаРегламентированногоУчета, Дата",ВалютаРегламентированногоУчета, Объект.Дата);
	
	РасчетыПоЗаработнойПлатеНалогПриИзмененииНаСервере(ПараметрыСтроки,ПараметрыДокумента);
	
	ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ПараметрыСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура РасчетыПоЗаработнойПлатеВедомостьНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка) // ИНАГРО
	
	Если ТипЗнч(ДанныеВыбора) = Тип("ДокументСсылка.ИНАГРО_ЗарплатаКВыплатеОрганизаций") Тогда
		
		СтандартнаяОбработка = Ложь;			
		
		ОткрытьФорму("Документ.ИНАГРО_ЗарплатаКВыплатеОрганизаций.Форма.ФормаВыбора", , ЭтаФорма);
		
	Иначе
		
		СтандартнаяОбработка = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура ОткрытьФормуНастройкиРежима(Команда)

	ПараметрыНастройкиРежима	= Новый Структура;
	ПараметрыНастройкиРежима.Вставить("ВводитьОстаткиЗапасовВРазрезеДатОприходования",	Объект.ВводитьОстаткиЗапасовВРазрезеДатОприходования);
	ПараметрыНастройкиРежима.Вставить("ВводитьОстаткиЗапасовВРазрезеПоставщиков",		Объект.ВводитьОстаткиЗапасовВРазрезеПоставщиков);
	ПараметрыНастройкиРежима.Вставить("ВводитьСуммыУлучшенияВключенныеВБалансовуюСтоимостьОС",	Объект.ВводитьСуммыУлучшенияВключенныеВБалансовуюСтоимостьОС);
	ПараметрыНастройкиРежима.Вставить("Организация", Объект.Организация);
	ПараметрыНастройкиРежима.Вставить("РазделУчета", Объект.РазделУчета);
	ПараметрыНастройкиРежима.Вставить("Дата",		 Объект.Дата);
	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ОткрытьФормуНастройкиРежимаЗавершение", ЭтотОбъект);
	
	ОткрытьФорму("Документ.ВводНачальныхОстатков.Форма.ФормаНастройкиРежима",
		ПараметрыНастройкиРежима,,,,,ОповещениеОЗакрытии);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуНастройкиРежимаЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	РезультатНастройкиРежима = РезультатЗакрытия;
	
	Если ТипЗнч(РезультатНастройкиРежима) = Тип("Структура") Тогда
		
		Модифицированность	= Истина;
		
		ЗаполнитьЗначенияСвойств(Объект, РезультатНастройкиРежима);
		
		Объект.Дата	= РезультатНастройкиРежима.ДатаВводаОстатков;
		ДатаПриИзмененииСервер();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьОписаниеРаздела(Команда)

	ДанныеЗаполнения	= Новый Структура;
	ДанныеЗаполнения.Вставить("Дата",		 Объект.Дата);
	ДанныеЗаполнения.Вставить("Организация", Объект.Организация);
	ДанныеЗаполнения.Вставить("РазделУчета", Объект.РазделУчета);

	ОткрытьФорму("Документ.ВводНачальныхОстатков.Форма.ФормаСправки", Новый Структура("ДанныеЗаполнения", ДанныеЗаполнения), ЭтаФорма, ВариантОткрытияОкна.ОтдельноеОкно);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ БСП

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

#Область СлужебныеПроцедурыФункции 

&НаСервере
Процедура ПодготовитьФормуНаСервере()
	
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтотОбъект);

	ТекущаяДатаДокумента			= Объект.Дата;

	Если ТипЗнч(Параметры) = Тип("ДанныеФормыСтруктура") Тогда
		Параметры.Свойство("ОткрытиеИзОбработкиВводаНачальныхОстатков", ОткрытиеИзОбработкиВводаНачальныхОстатков);
	КонецЕсли;

	Документы.ВводНачальныхОстатков.УстановитьЗаголовокФормы(ЭтаФорма);
	УправлениеФормойСервер();

	УстановитьСостояниеДокумента();
	
КонецПроцедуры

&НаСервере
Процедура УправлениеФормойСервер()

	// Установка режима "Только просмотр" для поля "Дата"
	Элементы.Дата.ТолькоПросмотр =
		ЗначениеЗаполнено(Документы.ВводНачальныхОстатков.ПолучитьДатуВводаОстатков(Объект.Организация));

	Документы.ВводНачальныхОстатков.УстановитьПараметрыФункциональныхОпцийФормыДокумента(ЭтаФорма);
	ЕстьНДС              = УчетнаяПолитика.ПлательщикНДС(Объект.Организация, НачалоМесяца(ТекущаяДатаДокумента));	

	// Ограничение выбора счета учета:
	МассивСчетов = Новый Массив;
	МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоСтрахованию);
	МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоОплатеТруда);
	МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоНДФЛ);
	МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоОбязательнымПлатежам);

	СчетаДляОтбора = БухгалтерскийУчет.ПолучитьМассивСчетовССубсчетами(МассивСчетов);
	БухгалтерскийУчетКлиентСервер.ИзменитьПараметрыВыбораСчета(Элементы.РасчетыПоЗаработнойПлатеСчетУчета, СчетаДляОтбора);

	ЗаполнитьДобавленныеКолонкиТаблиц();

	
КонецПроцедуры

&НаСервере
Процедура ДатаПриИзмененииСервер()

	Документы.ВводНачальныхОстатков.УстановитьПараметрыФункциональныхОпцийФормыДокумента(ЭтаФорма);
	
	УправлениеФормойСервер();

КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииСервер()

	ДатаВводаОстатков	= Документы.ВводНачальныхОстатков.ПолучитьДатуВводаОстатков(Объект.Организация);
	
	Если ЗначениеЗаполнено(ДатаВводаОстатков) Тогда
		Объект.Дата	= ДатаВводаОстатков;
	КонецЕсли;

	Документы.ВводНачальныхОстатков.УстановитьПараметрыФункциональныхОпцийФормыДокумента(ЭтаФорма);
	
	УправлениеФормойСервер();

КонецПроцедуры

// Получение списка налогов, разрешенных для выбранного счета
//
// Параметры:
//   СчетУчета - ссылка на счет, для которого определить доступные налоги
//
// Возвращаемое значение:
//   СписокЗначений - список доступных налогов
//
&НаСервереБезКонтекста
Функция ПолучитьДоступныеНалоги(СчетУчета)

    СписокЗначений = Новый СписокЗначений;
	
	Если СчетУчета = ПланыСчетов.Хозрасчетный.РасчетыПоПенсионномуОбеспечению 
		или СчетУчета.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.РасчетыПоПенсионномуОбеспечению) Тогда
		СписокЗначений.Добавить(Справочники.Налоги.Пенсионный);
		СписокЗначений.Добавить(Справочники.Налоги.Пенсионный1_5);
		СписокЗначений.Добавить(Справочники.Налоги.ПенсионныйФОТ);
		СписокЗначений.Добавить(Справочники.Налоги.ПенсионныйФОТДекр);
		СписокЗначений.Добавить(Справочники.Налоги.ПенсионныйФОТИнв);
		СписокЗначений.Добавить(Справочники.Налоги.ПенсионныйФОТЛет);
		СписокЗначений.Добавить(Справочники.Налоги.ЕСВБольничные);
		СписокЗначений.Добавить(Справочники.Налоги.ЕСВГПХ);
		СписокЗначений.Добавить(Справочники.Налоги.ЕСВИнвалидыУТОГУТОС);
		СписокЗначений.Добавить(Справочники.Налоги.ЕСВЛетчики);
		СписокЗначений.Добавить(Справочники.Налоги.ЕСВРаботники);
		СписокЗначений.Добавить(Справочники.Налоги.ЕСВРаботникиСР);
		СписокЗначений.Добавить(Справочники.Налоги.ЕСВФОТБольничные);
		СписокЗначений.Добавить(Справочники.Налоги.ЕСВФОТБольничныеИнвалиды);
		СписокЗначений.Добавить(Справочники.Налоги.ЕСВФОТБольничныеИнвалиды50);
		СписокЗначений.Добавить(Справочники.Налоги.ЕСВФОТБольничныеУТОГ);
		СписокЗначений.Добавить(Справочники.Налоги.ЕСВФОТБюджетники);
		СписокЗначений.Добавить(Справочники.Налоги.ЕСВФОТГПХ);
		СписокЗначений.Добавить(Справочники.Налоги.ЕСВФОТИнвалиды);
		СписокЗначений.Добавить(Справочники.Налоги.ЕСВФОТИнвалиды50);
		СписокЗначений.Добавить(Справочники.Налоги.ЕСВФОТЛетчики);
		СписокЗначений.Добавить(Справочники.Налоги.ЕСВФОТРаботники);
		СписокЗначений.Добавить(Справочники.Налоги.ЕСВФОТРаботникиУТОГУТОС);
		СписокЗначений.Добавить(Справочники.Налоги.ЕСВДекретные);
		СписокЗначений.Добавить(Справочники.Налоги.ЕСВФОТДекретные);
		СписокЗначений.Добавить(Справочники.Налоги.ЕСВФОТДекретныеИнвалиды);
		СписокЗначений.Добавить(Справочники.Налоги.ЕСВФОТДекретныеИнвалиды50);
		СписокЗначений.Добавить(Справочники.Налоги.ЕСВФОТДекретныеУТОГ);
	ИначеЕсли СчетУчета = ПланыСчетов.Хозрасчетный.РасчетыПоСоциальномуСтрахованию 
		или СчетУчета.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.РасчетыПоСоциальномуСтрахованию) Тогда
		СписокЗначений.Добавить(Справочники.Налоги.Соцстрах);
		СписокЗначений.Добавить(Справочники.Налоги.СоцстрахФОТ);
	ИначеЕсли СчетУчета = ПланыСчетов.Хозрасчетный.РасчетыПоСтрахованиюНаСлучайБезработицы 
		или СчетУчета.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.РасчетыПоСтрахованиюНаСлучайБезработицы) Тогда
		СписокЗначений.Добавить(Справочники.Налоги.Безработица);
		СписокЗначений.Добавить(Справочники.Налоги.БезработицаФОТ);
	ИначеЕсли СчетУчета = ПланыСчетов.Хозрасчетный.РасчетыПоСтрахованиюОтНесчастныхСлучаев 
		или СчетУчета.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.РасчетыПоСтрахованиюОтНесчастныхСлучаев) Тогда
		СписокЗначений.Добавить(Справочники.Налоги.СоцстрахНесчФОТ);
	ИначеЕсли СчетУчета = ПланыСчетов.Хозрасчетный.РасчетыПоОбязательнымПлатежам Тогда
		СписокЗначений.Добавить(Справочники.Налоги.ВоенныйСбор);
	Иначе 
		Возврат Неопределено;
	КонецЕсли;	

	Возврат СписокЗначений;
	
КонецФункции // ПолучитьДоступныеНалоги()

&НаСервереБезКонтекста
Процедура РасчетыПоЗаработнойПлатеНалогПриИзмененииНаСервере(СтрокаТаблицы,ПараметрыДокумента)
	
	Если СтрокаТаблицы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Срез = РегистрыСведений.ШкалаСтавокНалогов.СрезПоследних(ПараметрыДокумента.Дата,Новый Структура("Налог",СтрокаТаблицы.Налог));
	Если Срез.Количество() <> 0 Тогда
		СтрокаТаблицы.СтатьяНалоговойДекларации = Срез[0].СтатьяНалоговойДекларации;
	КонецЕсли;
	Если СтрокаТаблицы.Налог.Родитель = Справочники.Налоги.ВзносыФОТ Тогда
		СтрокаТаблицы.НалоговоеНазначение = Справочники.НалоговыеНазначенияАктивовИЗатрат.НКУ_ХозДеятельность;
	Иначе
		СтрокаТаблицы.НалоговоеНазначение = Справочники.НалоговыеНазначенияАктивовИЗатрат.ПустаяСсылка();
	КонецЕсли;	
	ЗаполнитьДобавленныеКолонкиСтрокиТаблицы_РасчетыПоЗаработнойПлате(СтрокаТаблицы);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДобавленныеКолонкиТаблиц()
	
	ПараметрыДокумента	= Новый Структура("ВалютаРегламентированногоУчета, РазделУчета, Организация, Дата",
		ВалютаРегламентированногоУчета, Объект.РазделУчета, Объект.Организация, Объект.Дата);

	Для каждого СтрокаТаблицы Из Объект.РасчетыПоЗаработнойПлате Цикл

		ЗаполнитьДобавленныеКолонкиСтрокиТаблицы_РасчетыПоЗаработнойПлате(СтрокаТаблицы);

	КонецЦикла;

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьДобавленныеКолонкиСтрокиТаблицы_РасчетыПоЗаработнойПлате(СтрокаТаблицы)

	Если ЗначениеЗаполнено(СтрокаТаблицы.СчетУчета) Тогда
		
		СтрокаТаблицы.ЭтоНалоги = СтрокаТаблицы.СчетУчета = ПланыСчетов.Хозрасчетный.РасчетыПоПенсионномуОбеспечению
		или СтрокаТаблицы.СчетУчета.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.РасчетыПоПенсионномуОбеспечению)
		или СтрокаТаблицы.СчетУчета = ПланыСчетов.Хозрасчетный.РасчетыПоСоциальномуСтрахованию
		или СтрокаТаблицы.СчетУчета.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.РасчетыПоСоциальномуСтрахованию)
		или СтрокаТаблицы.СчетУчета = ПланыСчетов.Хозрасчетный.РасчетыПоСтрахованиюНаСлучайБезработицы
		или СтрокаТаблицы.СчетУчета.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.РасчетыПоСтрахованиюНаСлучайБезработицы)
		или СтрокаТаблицы.СчетУчета = ПланыСчетов.Хозрасчетный.РасчетыПоСтрахованиюОтНесчастныхСлучаев
		или СтрокаТаблицы.СчетУчета.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.РасчетыПоСтрахованиюОтНесчастныхСлучаев);
		
		СтрокаТаблицы.ЭтоФОТ = СтрокаТаблицы.СчетУчета = ПланыСчетов.Хозрасчетный.РасчетыПоСтрахованиюОтНесчастныхСлучаев
		или СтрокаТаблицы.СчетУчета.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.РасчетыПоСтрахованиюОтНесчастныхСлучаев)
		или (СтрокаТаблицы.Налог.Родитель = Справочники.Налоги.ВзносыФОТ И СтрокаТаблицы.ЭтоНалоги);
		
		СтрокаТаблицы.ЭтоНДФЛ = СтрокаТаблицы.СчетУчета = ПланыСчетов.Хозрасчетный.РасчетыПоНДФЛ; 
		
		СтрокаТаблицы.ЭтоВС = СтрокаТаблицы.СчетУчета = ПланыСчетов.Хозрасчетный.РасчетыПоОбязательнымПлатежам; 
		
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура РасчетыПоЗаработнойПлатеСчетУчетаПриИзменении(Элемент)
		СтрокаТаблицы = Элементы.РасчетыПоЗаработнойПлате.ТекущиеДанные;
		ПараметрыСтроки		= ПоляСтрокиТабличнойЧасти(СтрокаТаблицы);
		ПараметрыДокумента	= Новый Структура("ВалютаРегламентированногоУчета",ВалютаРегламентированногоУчета);
		
		ОбработатьСтрокуПриИзмененииСчета(ПараметрыСтроки,ПараметрыДокумента);
		
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ПараметрыСтроки);

КонецПроцедуры

&НаКлиенте
Функция ПоляСтрокиТабличнойЧасти(СтрокаТаблицы = Неопределено)

	Если СтрокаТаблицы = Неопределено Тогда
		СтрокаТаблицы = Элементы.РасчетыПоЗаработнойПлате.ТекущиеДанные;
	КонецЕсли; 

	ПараметрыСтроки = Новый Структура("СчетУчета,
	|Сумма,
	|ПериодРегистрации,
	|Ведомость,
	|РаботникОрганизации,
	|Налог,
	|СтатьяНалоговойДекларации,
	|БазаВзноса,
	|НалоговоеНазначение,
	|Доход,
	|ДоходНДФЛ,
	|ВидСтавки,
	|Льгота,
	|ЭтоНалоги,
	|ЭтоФОТ,
	|ЭтоНДФЛ,
	|ЭтоВС");
	
	ЗаполнитьЗначенияСвойств(ПараметрыСтроки, СтрокаТаблицы);

	Возврат ПараметрыСтроки;

КонецФункции

&НаСервереБезКонтекста
Процедура ОбработатьСтрокуПриИзмененииСчета(СтрокаТаблицы,ПараметрыДокумента)
	
	ЗаполнитьДобавленныеКолонкиСтрокиТаблицы_РасчетыПоЗаработнойПлате(СтрокаТаблицы);
	
	Если НЕ СтрокаТаблицы.СчетУчета = ПланыСчетов.Хозрасчетный.РасчетыПоДепонентам Тогда
		СтрокаТаблицы.Ведомость = "";
	ИначеЕсли СтрокаТаблицы.СчетУчета = ПланыСчетов.Хозрасчетный.РасчетыПоДепонентам Тогда
		СтрокаТаблицы.ПериодРегистрации = "";
	КонецЕсли;	
	Если СтрокаТаблицы.ЭтоНалоги Тогда
		СтрокаТаблицы.РаботникОрганизации = "";	
	ИначеЕсли НЕ СтрокаТаблицы.ЭтоНалоги Тогда
		СтрокаТаблицы.Налог = "";
		СтрокаТаблицы.СтатьяНалоговойДекларации = "";
		СтрокаТаблицы.БазаВзноса = 0;
	КонецЕсли;	
	Если СтрокаТаблицы.ЭтоНДФЛ ИЛИ СтрокаТаблицы.ЭтоВС И (СтрокаТаблицы.ЭтоНалоги И НЕ СтрокаТаблицы.ЭтоФОТ) Тогда
		СтрокаТаблицы.НалоговоеНазначение = "";	
	КонецЕсли;
	Если НЕ СтрокаТаблицы.ЭтоНДФЛ И НЕ СтрокаТаблицы.ЭтоВС Тогда
		СтрокаТаблицы.Доход			= "";
		СтрокаТаблицы.ДоходНДФЛ		= "";
		СтрокаТаблицы.ВидСтавки		= "";
		СтрокаТаблицы.Льгота		= "";
	Иначе
		Если СтрокаТаблицы.ЭтоНДФЛ Тогда
//++ БУ ЗИК
			
			СтрокаТаблицы.ДоходНДФЛ		= Справочники.ВидыДоходовНДФЛ.Код01;
			//~СтрокаТаблицы.ДоходНДФЛ		= Справочники.ВидыДоходовНДФЛ.Код101;
//-- БУ ЗИК

			СтрокаТаблицы.ВидСтавки		= Перечисления.ВидыСтавокНДФЛ.Основная;
		Иначе
			СтрокаТаблицы.ДоходНДФЛ		= Справочники.ВидыДоходовНДФЛ.ВоенныйСбор;
			СтрокаТаблицы.ВидСтавки		= Перечисления.ВидыСтавокНДФЛ.ВоенныйСбор;
			СтрокаТаблицы.Налог 		= Справочники.Налоги.ВоенныйСбор;
		КонецЕсли;	
	КонецЕсли;
	
	//заполним по умолчанию
	Если НЕ СтрокаТаблицы.ЭтоНалоги или (СтрокаТаблицы.ЭтоНалоги И НЕ СтрокаТаблицы.ЭтоФОТ) Тогда
		Если НЕ СтрокаТаблицы.ЭтоНДФЛ И НЕ СтрокаТаблицы.ЭтоВС Тогда
			СтрокаТаблицы.НалоговоеНазначение = Справочники.НалоговыеНазначенияАктивовИЗатрат.НКУ_ХозДеятельность;
		КонецЕсли;	
	КонецЕсли;	
	Если СтрокаТаблицы.СчетУчета = ПланыСчетов.Хозрасчетный.РасчетыПоСтрахованиюОтНесчастныхСлучаев Тогда
		СтрокаТаблицы.Налог = Справочники.Налоги.СоцстрахНесчФОТ;
		СтрокаТаблицы.СтатьяНалоговойДекларации = Справочники.СтатьиНалоговыхДеклараций.ФССНесчСлуч_Орг;
	КонецЕсли;	
	
КонецПроцедуры // ОбработатьСтрокуПриИзмененииСчета()

&НаКлиенте
Процедура РасчетыПоЗаработнойПлатеПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока И НЕ Копирование Тогда
		СтрокаТаблицы = Элементы.РасчетыПоЗаработнойПлате.ТекущиеДанные;
		СтрокаТаблицы.ПериодРегистрации = НачалоМесяца(Объект.Дата);
		Если Не ЕстьНДС Тогда
			СтрокаТаблицы.НалоговоеНазначение = ПредопределенноеЗначение("Справочник.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяХозДеятельность");
		КонецЕсли;
	КонецЕсли;   
КонецПроцедуры
 
#КонецОбласти  

&НаСервере
Процедура УстановитьСостояниеДокумента()
	
	СостояниеДокумента = ОбщегоНазначенияБП.СостояниеДокумента(Объект);
	
КонецПроцедуры

#Область ОбработчикиСобытийФормы

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

#КонецОбласти