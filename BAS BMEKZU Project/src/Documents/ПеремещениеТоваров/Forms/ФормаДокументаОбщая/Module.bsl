#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	Если Параметры.Ключ.Пустая() Тогда
		ПодготовитьФормуНаСервере();
	КонецЕсли;
	
	// Уведомим о появлении функционала рабочей даты
	ЭтаФорма.НастройкиПредупреждений = ОбщегоНазначенияБП.НастройкиПредупрежденийОбИзменениях("РабочаяДатаИзДокумента");
	 
	// Показываем, если это новый документ и сама рабочая дата еще не установлена.
	ЭтаФорма.НастройкиПредупреждений.РабочаяДатаИзДокумента = ЭтаФорма.НастройкиПредупреждений.РабочаяДатаИзДокумента
	 	И ЭтаФорма.Параметры.Ключ.Пустая()
	  	И НЕ ЗначениеЗаполнено(БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("РабочаяДата"));
	
	УстановитьПараметрыВыбораВидОперации();
	
	// Если форма вызвана в режиме смена вида операции - модифицируем сразу при открытии, 
	// чтобы можно было подтвердить или отказаться от изменения путем сохранения или 
	// отказа от сохранения документа.
	Если Параметры.Свойство("ИзменитьВидОперации")
		И Параметры.ИзменитьВидОперации Тогда
		
		// Не кэшируем переменную Объект, т.к. может вызываться Форма.ИзменитьРеквизиты(),
		// которая меняет Объект.
		Объект.ВидОперации = Параметры.ЗначенияЗаполнения.ВидОперации;
		
		УстановитьЗаголовокФормы();
		УправлениеФормойНаСервере();
		
		Модифицированность = Истина;
		
	КонецЕсли;
	
	ОбновитьИтогиНаСервере();
	
	// Активизировать первую непустую табличную часть
	СписокТабличныхЧастей = Новый СписокЗначений;
	СписокТабличныхЧастей.Добавить("Товары",			"Товары");
	СписокТабличныхЧастей.Добавить("ТоварыНаКомиссии",	"ТоварыНаКомиссии");
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьВозвратнуюТару") Тогда	
		СписокТабличныхЧастей.Добавить("ВозвратнаяТара",	"ВозвратнаяТара");
	КонецЕсли;
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеТоваров.БланкиСтрогогоУчета") И ПолучитьФункциональнуюОпцию("ИспользоватьБланкиСтрогогоУчета") Тогда
		СписокТабличныхЧастей.Добавить("БланкиСтрогогоУчета", "БланкиСтрогогоУчета");
	КонецЕсли;	
	
	АктивизироватьТабличнуюЧасть = ОбщегоНазначенияБПВызовСервера.ПолучитьПервуюНепустуюВидимуюТабличнуюЧасть(
		ЭтаФорма, СписокТабличныхЧастей);
	ОбщегоНазначенияБПВызовСервера.АктивизироватьЭлементФормы(ЭтаФорма, АктивизироватьТабличнуюЧасть);
	
	УправлениеФормойНаСервере();

КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом

	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	ПодготовитьФормуНаСервере();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	УстановитьЗаголовокФормы();
	
	УстановитьСостояниеДокумента();
	
КонецПроцедуры  // ПослеЗаписиНаСервере

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)

	Если ИсточникВыбора.ИмяФормы = "Обработка.ПодборНоменклатуры.Форма.Форма" Тогда
		ОбработкаВыбораПодборВставкаИзБуфераНаСервере(ВыбранноеЗначение, ИсточникВыбора.ИмяТаблицы);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)

	Если ИмяСобытия = "ОбработанаТабличнаяЧастьТовары"
		И ТипЗнч(Параметр) = Тип("Структура") 
		И Параметр.Свойство("ИдентификаторВызывающейФормы")
		И Параметр.ИдентификаторВызывающейФормы = УникальныйИдентификатор Тогда
		ОбработкаОповещенияОбработкиТабличнойЧастиТоварыНаСервере(Параметр);
		
	ИначеЕсли ИмяСобытия = "ДанныеСкопированыВБуферОбмена" Тогда
		
		УстановитьДоступностьКомандыВставки(ЭтотОбъект, Истина);
	
	Иначе
		ОбщегоНазначенияБПКлиент.ОбработкаОповещенияФормыДокумента(ЭтаФорма, Объект.Ссылка, ИмяСобытия, Параметр, Источник);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)

	Если НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДатаДокумента) Тогда
		// Изменение времени не влияет на поведение документа.
		ТекущаяДатаДокумента = Объект.Дата;
		Возврат;
	КонецЕсли;

	// Общие проверки условий по датам.
	ТребуетсяВызовСервера = ОбщегоНазначенияБПКлиент.ТребуетсяВызовСервераПриИзмененииДатыДокумента(Объект.Дата, 
		ТекущаяДатаДокумента);
		
	// Если определили, что изменение даты может повлиять на какие-либо параметры, 
	// то передаем обработку на сервер.
	Если ТребуетсяВызовСервера Тогда
		ДатаПриИзмененииНаСервере();
	КонецЕсли;
	
	// Запомним новую дату документа.
	ТекущаяДатаДокумента = Объект.Дата;
	
КонецПроцедуры

&НаСервере
Процедура ДатаПриИзмененииНаСервере()

	УстановитьФункциональныеОпцииФормы();
	
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры 

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)

	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		ОрганизацияПриИзмененииНаСервере();
	КонецЕсли;

КонецПроцедуры // ОрганизацияПриИзменении

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()

	УстановитьФункциональныеОпцииФормы();
	
	ЗаполнитьСчетаУчетаВТабличнойЧастиНаСервере();
	
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры // ОрганизацияПриИзмененииНаСервере

&НаКлиенте
Процедура СкладОтправительПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.СкладОтправитель) Тогда
		СкладОтправительПриИзмененииНаСервере();
	Иначе
		ТипЦенСкладОтправитель = ПредопределенноеЗначение("Справочник.ТипыЦенНоменклатуры.ПустаяСсылка");
		ТипСкладаОтправитель   = ПредопределенноеЗначение("Перечисление.ТипыСкладов.ОптовыйСклад");
	КонецЕсли;
	
КонецПроцедуры // СкладОтправительПриИзменении

&НаСервере
Процедура СкладОтправительПриИзмененииНаСервере()
	
	СкладыОбработатьИзменение();
	
	ЗаполнитьСтрокиТабличнойЧастиТоварыНаСервере();
	
	ЗаполнитьСчетаУчетаВТабличнойЧастиНаСервере("ТоварыНаКомиссии");
	ЗаполнитьСчетаУчетаВТабличнойЧастиНаСервере("ВозвратнаяТара");
	ЗаполнитьСчетаУчетаВТабличнойЧастиНаСервере("БланкиСтрогогоУчета");
	
	ОбновитьИтогиНаСервере();
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры // СкладОтправительПриИзмененииНаСервере

&НаКлиенте
Процедура СкладПолучательПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.СкладПолучатель) Тогда
		СкладПолучательПриИзмененииНаСервере();
	Иначе
		ТипЦенСкладПолучатель = ПредопределенноеЗначение("Справочник.ТипыЦенНоменклатуры.ПустаяСсылка");
		ТипСкладаПолучатель   = ПредопределенноеЗначение("Перечисление.ТипыСкладов.ОптовыйСклад");
	КонецЕсли;
	
КонецПроцедуры // СкладПолучательПриИзменении

&НаСервере
Процедура СкладПолучательПриИзмененииНаСервере()
	
	СкладыОбработатьИзменение();
	
	ЗаполнитьСтрокиТабличнойЧастиТоварыНаСервере();
	
	ЗаполнитьСчетаУчетаВТабличнойЧастиНаСервере("ТоварыНаКомиссии");
	ЗаполнитьСчетаУчетаВТабличнойЧастиНаСервере("ВозвратнаяТара");
	ЗаполнитьСчетаУчетаВТабличнойЧастиНаСервере("БланкиСтрогогоУчета");
	
	ОбновитьИтогиНаСервере();
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры // СкладПолучательПриИзмененииНаСервере

&НаКлиенте
Процедура ВидОперацииПриИзменении(Элемент)

	ВидОперацииПриИзмененииНаСервере();

КонецПроцедуры // ВидОперацииПриИзменении

&НаСервере
Процедура ВидОперацииПриИзмененииНаСервере()

	УстановитьЗаголовокФормы();
	ОбновитьИтогиНаСервере();
	УправлениеФормойНаСервере();
	
	Модифицированность = Истина;

КонецПроцедуры // ВидОперацииПриИзмененииНаСервере

#КонецОбласти 

#Область ОбработчикиСобытийТаблицыФормыТовары

&НаКлиенте
Процедура ТоварыПриИзменении(Элемент)
	ОбновитьИтоги(ЭтаФорма);
КонецПроцедуры // ТоварыПриИзменении

&НаКлиенте
Процедура ТоварыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	Если НоваяСтрока И ОтменаРедактирования Тогда
		ОбновитьИтоги(ЭтаФорма);
	КонецЕсли;
КонецПроцедуры // ТоварыПриОкончанииРедактирования

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)
	
	ТекДанные = Элементы.Товары.ТекущиеДанные;
	
	СтруктураПараметров = Новый Структура("Номенклатура, Количество,
		|ТипСкладаОтправитель, ТипСкладаПолучатель, ТипЦенСкладОтправитель, ТипЦенСкладПолучатель,
		|РазделениеПоСтавкамВРознице, Дата, Организация, УчетВПродажныхЦенах, СкладОтправитель, СкладПолучатель");
		
	ЗаполнитьЗначенияСвойств(СтруктураПараметров, ТекДанные);
	ЗаполнитьЗначенияСвойств(СтруктураПараметров, ЭтаФорма);
	ЗаполнитьЗначенияСвойств(СтруктураПараметров, Объект);
	
	ДанныеНоменклатуры = ПолучитьДанныеТоварыНоменклатураПриИзменении(СтруктураПараметров);
	
	ЗаполнитьЗначенияСвойств(ТекДанные, ДанныеНоменклатуры);
	
КонецПроцедуры // ТоварыНоменклатураПриИзменении

&НаСервереБезКонтекста
Функция ПолучитьДанныеТоварыНоменклатураПриИзменении(Знач СтруктураПараметров)
	
	ДанныеНоменклатура = Новый Структура("СчетУчетаБУ, НовыйСчетУчетаБУ, НалоговоеНазначение, ЕдиницаИзмерения, Коэффициент,
		|СтавкаНДСВРознице, ЦенаВРознице, СуммаВРознице");
	
	ДанныеОбъекта = Новый Структура("Дата, Организация, Склад", СтруктураПараметров.Дата, СтруктураПараметров.Организация, );
	
	ДанныеОбъекта.Склад	= СтруктураПараметров.СкладОтправитель;
	СведенияОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОНоменклатуре(
		СтруктураПараметров.Номенклатура, ДанныеОбъекта);
	
	ДанныеОбъекта.Склад	= СтруктураПараметров.СкладПолучатель;
	НовыеСведенияОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОНоменклатуре(
		СтруктураПараметров.Номенклатура, ДанныеОбъекта);
		
		
	Если СтруктураПараметров.УчетВПродажныхЦенах
			И СтруктураПараметров.ТипСкладаОтправитель <> Перечисления.ТипыСкладов.ОптовыйСклад Тогда
		Документы.ПеремещениеТоваров.ЗаполнитьСчетУчетаТовараРозницаВПродажныхЦенах(
			ДанныеНоменклатура.СчетУчетаБУ, СтруктураПараметров.ТипСкладаОтправитель);
		ДанныеНоменклатура.ЕдиницаИзмерения	= СведенияОНоменклатуре.БазоваяЕдиницаИзмерения;
		ДанныеНоменклатура.Коэффициент		= СведенияОНоменклатуре.Коэффициент;
	ИначеЕсли СведенияОНоменклатуре <> Неопределено Тогда
		ДанныеНоменклатура.СчетУчетаБУ		   = СведенияОНоменклатуре.СчетаУчета.СчетУчетаБУ;
		ДанныеНоменклатура.НалоговоеНазначение = СведенияОНоменклатуре.СчетаУчета.НалоговоеНазначение;
		ДанныеНоменклатура.ЕдиницаИзмерения	   = СведенияОНоменклатуре.БазоваяЕдиницаИзмерения;
		ДанныеНоменклатура.Коэффициент		   = СведенияОНоменклатуре.Коэффициент;
	КонецЕсли;
	
	Если СтруктураПараметров.УчетВПродажныхЦенах
			И СтруктураПараметров.ТипСкладаПолучатель <> Перечисления.ТипыСкладов.ОптовыйСклад Тогда
		Документы.ПеремещениеТоваров.ЗаполнитьСчетУчетаТовараРозницаВПродажныхЦенах(
			ДанныеНоменклатура.НовыйСчетУчетаБУ, СтруктураПараметров.ТипСкладаПолучатель);
	ИначеЕсли НовыеСведенияОНоменклатуре <> Неопределено Тогда
		ДанныеНоменклатура.НовыйСчетУчетаБУ = НовыеСведенияОНоменклатуре.СчетаУчета.СчетУчетаБУ;
	КонецЕсли;
	
	Если СтруктураПараметров.ТипСкладаОтправитель = Перечисления.ТипыСкладов.НеавтоматизированнаяТорговаяТочка Тогда
		
		Если СтруктураПараметров.РазделениеПоСтавкамВРознице И СведенияОНоменклатуре <> Неопределено Тогда	
			ДанныеНоменклатура.СтавкаНДСВРознице = СведенияОНоменклатуре.СтавкаНДСВРознице;
		КонецЕсли;
		
		Если СтруктураПараметров.ТипСкладаПолучатель = Перечисления.ТипыСкладов.ОптовыйСклад И СведенияОНоменклатуре <> Неопределено Тогда
			ДанныеНоменклатура.ЦенаВРознице  = СведенияОНоменклатуре.ЦенаВРознице;
			ДанныеНоменклатура.СуммаВРознице = ДанныеНоменклатура.ЦенаВРознице * СтруктураПараметров.Количество;
		КонецЕсли;
		
	ИначеЕсли СтруктураПараметров.ТипСкладаПолучатель = Перечисления.ТипыСкладов.НеавтоматизированнаяТорговаяТочка Тогда
		
		Если СтруктураПараметров.РазделениеПоСтавкамВРознице И НовыеСведенияОНоменклатуре <> Неопределено Тогда	
			ДанныеНоменклатура.СтавкаНДСВРознице = НовыеСведенияОНоменклатуре.СтавкаНДСВРознице;
		КонецЕсли;
		
		Если СтруктураПараметров.ТипСкладаОтправитель = Перечисления.ТипыСкладов.ОптовыйСклад И НовыеСведенияОНоменклатуре <> Неопределено Тогда
			ДанныеНоменклатура.ЦенаВРознице  = НовыеСведенияОНоменклатуре.ЦенаВРознице;
			ДанныеНоменклатура.СуммаВРознице = ДанныеНоменклатура.ЦенаВРознице * СтруктураПараметров.Количество;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ДанныеНоменклатура;
	
КонецФункции // ПолучитьДанныеТоварыНоменклатураПриИзменении

&НаКлиенте
Процедура ТоварыЕдиницаИзмеренияПриИзменении(Элемент)

	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	ДанныеСтрокиТаблицы	= Новый Структура(
		"Номенклатура, ЕдиницаИзмерения, Коэффициент,
		|Количество, ЦенаВРознице, СуммаВРознице,  
		|СтавкаНДСВРознице,
		|СчетУчетаБУ, НалоговоеНазначение");
		
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, ТекущиеДанные);
	
	ТоварыЕдиницаИзмеренияПриИзмененииНаСервере(ДанныеСтрокиТаблицы);
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтрокиТаблицы);
	
КонецПроцедуры // ТоварыЕдиницаИзмеренияПриИзменении

&НаСервереБезКонтекста
Процедура ТоварыЕдиницаИзмеренияПриИзмененииНаСервере(СтрокаТабличнойЧасти)
	
	ОбработкаТабличныхЧастей.ЗаполнитьКоэффициентТабЧасти(СтрокаТабличнойЧасти);
	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуВРозницеТабЧасти(СтрокаТабличнойЧасти);
	
КонецПроцедуры // ТоварыЕдиницаИзмеренияПриИзмененииНаСервере

&НаКлиенте
Процедура ТоварыКоличествоПриИзменении(Элемент)

	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	Если Элементы.ТоварыЦенаВРознице.Видимость И СтрокаТабличнойЧасти.ЦенаВРознице <> 0 Тогда
		СтрокаТабличнойЧасти.СуммаВРознице = СтрокаТабличнойЧасти.ЦенаВРознице * СтрокаТабличнойЧасти.Количество;
	КонецЕсли;
	
КонецПроцедуры // ТоварыКоличествоПриИзменении

&НаКлиенте
Процедура ТоварыЦенаВРозницеПриИзменении(Элемент)

	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	СтрокаТабличнойЧасти.СуммаВРознице = СтрокаТабличнойЧасти.ЦенаВРознице * СтрокаТабличнойЧасти.Количество;

КонецПроцедуры // ТоварыЦенаВРозницеПриИзменении

&НаКлиенте
Процедура ТоварыСуммаВРозницеПриИзменении(Элемент)

	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;

	Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.Количество) Тогда
		СтрокаТабличнойЧасти.Цена = 0;
	Иначе
		СтрокаТабличнойЧасти.ЦенаВРознице = СтрокаТабличнойЧасти.СуммаВРознице / СтрокаТабличнойЧасти.Количество;
	КонецЕсли;

КонецПроцедуры // ТоварыСуммаВРозницеПриИзменении

&НаКлиенте
Процедура ТоварыДокументОприходованияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;

	ПараметрыОбъекта = Новый Структура;
	ПараметрыОбъекта.Вставить("КонецПериода"  , Объект.Дата);
	ПараметрыОбъекта.Вставить("Организация"   , Объект.Организация);
	ПараметрыОбъекта.Вставить("Склад"         , Объект.СкладОтправитель);
	ПараметрыОбъекта.Вставить("Номенклатура"  , ТекущиеДанные.Номенклатура);
	ПараметрыОбъекта.Вставить("СчетУчета"     , ТекущиеДанные.СчетУчетаБУ);
	ПараметрыОбъекта.Вставить("ТипыДокументов", "Метаданные.Документы.ПеремещениеТоваров.ТабличныеЧасти.Товары.Реквизиты.ДокументОприходования.Тип");

	ПараметрыФормы = Новый Структура("ПараметрыОбъекта", ПараметрыОбъекта);
	ОткрытьФорму("Документ.Партия.ФормаВыбора", ПараметрыФормы, Элемент);

КонецПроцедуры // ТоварыДокументОприходованияНачалоВыбора

#КонецОбласти 

#Область ОбработчикиСобытийТаблицыФормыТоварыНаКомиссии

&НаКлиенте
Процедура ТоварыНаКомиссииНоменклатураПриИзменении(Элемент)

	Номенклатура = Элементы.ТоварыНаКомиссии.ТекущиеДанные.Номенклатура;
	ДанныеНоменклатура = ПолучитьДанныеТоварыНаКомиссииНоменклатураПриИзменении(Объект.Дата, Объект.Организация,
		Номенклатура, Объект.СкладОтправитель, Объект.СкладПолучатель);

	ЗаполнитьЗначенияСвойств(Элементы.ТоварыНаКомиссии.ТекущиеДанные, ДанныеНоменклатура);

КонецПроцедуры // ТоварыНаКомиссииНоменклатураПриИзменении

&НаСервереБезКонтекста
Функция ПолучитьДанныеТоварыНаКомиссииНоменклатураПриИзменении(Дата, Организация, Номенклатура, СкладОтправитель, СкладПолучатель)

	ДанныеНоменклатура = Новый Структура("СчетУчетаБУ, НовыйСчетУчетаБУ, ЕдиницаИзмерения, Коэффициент");
	
	ДанныеОбъекта = Новый Структура("Дата, Организация, Склад", Дата, Организация, );
	
	ДанныеОбъекта.Склад	= СкладОтправитель;
	СведенияОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОНоменклатуре(
		Номенклатура, ДанныеОбъекта);
	
	ДанныеОбъекта.Склад	= СкладПолучатель;
	НовыеСведенияОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОНоменклатуре(
		Номенклатура, ДанныеОбъекта);
	
	Если СведенияОНоменклатуре <> Неопределено Тогда
		ДанныеНоменклатура.СчетУчетаБУ = СведенияОНоменклатуре.СчетаУчета.СчетУчетаДоп;
		
		ДанныеНоменклатура.ЕдиницаИзмерения	= СведенияОНоменклатуре.БазоваяЕдиницаИзмерения;
		ДанныеНоменклатура.Коэффициент		= СведенияОНоменклатуре.Коэффициент;
	КонецЕсли;
	
	Если НовыеСведенияОНоменклатуре <> Неопределено Тогда
		ДанныеНоменклатура.НовыйСчетУчетаБУ = НовыеСведенияОНоменклатуре.СчетаУчета.СчетУчетаДоп;
	КонецЕсли;
	
	Возврат ДанныеНоменклатура;

КонецФункции // ПолучитьДанныеТоварыНаКомиссииНоменклатураПриИзменении

&НаКлиенте
Процедура ТоварыНаКомиссииЕдиницаИзмеренияПриИзменении(Элемент)

	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	ДанныеСтрокиТаблицы	= Новый Структура(
		"Номенклатура, ЕдиницаИзмерения, Коэффициент,
		|Цена");
		
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, ТекущиеДанные);
	
	ТоварыНаКомиссииЕдиницаИзмеренияПриИзмененииНаСервере(ДанныеСтрокиТаблицы);
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтрокиТаблицы);
	
КонецПроцедуры // ТоварыНаКомиссииЕдиницаИзмеренияПриИзменении

&НаСервереБезКонтекста
Процедура ТоварыНаКомиссииЕдиницаИзмеренияПриИзмененииНаСервере(СтрокаТабличнойЧасти)
	
	ОбработкаТабличныхЧастей.ЗаполнитьКоэффициентТабЧасти(СтрокаТабличнойЧасти);

КонецПроцедуры // ТоварыЕдиницаИзмеренияПриИзмененииНаСервере

#КонецОбласти 

#Область ОбработчикиСобытийТаблицыФормыВозвратнаяТара

&НаКлиенте
Процедура ВозвратнаяТараНоменклатураПриИзменении(Элемент)

	Номенклатура = Элементы.ВозвратнаяТара.ТекущиеДанные.Номенклатура;
	
	ДанныеНоменклатура = ПолучитьДанныеВозвратнаяТараНоменклатураПриИзменении(Объект.Дата, Объект.Организация,
		Номенклатура, Объект.СкладОтправитель, Объект.СкладПолучатель);

	ЗаполнитьЗначенияСвойств(Элементы.ВозвратнаяТара.ТекущиеДанные, ДанныеНоменклатура);

КонецПроцедуры // ВозвратнаяТараНоменклатураПриИзменении

&НаСервереБезКонтекста
Функция ПолучитьДанныеВозвратнаяТараНоменклатураПриИзменении(Дата, Организация, Номенклатура, СкладОтправитель, СкладПолучатель)

	ДанныеНоменклатура = Новый Структура("СчетУчетаБУ, НовыйСчетУчетаБУ, НалоговоеНазначение");
	
	ДанныеОбъекта = Новый Структура("Дата, Организация, Склад", Дата, Организация, );
	
	ДанныеОбъекта.Склад	= СкладОтправитель;
	СведенияОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОНоменклатуре(
		Номенклатура, ДанныеОбъекта);
	
	ДанныеОбъекта.Склад	= СкладПолучатель;
	НовыеСведенияОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОНоменклатуре(
		Номенклатура, ДанныеОбъекта);
	
	Если СведенияОНоменклатуре <> Неопределено Тогда
		ДанныеНоменклатура.СчетУчетаБУ		   = СведенияОНоменклатуре.СчетаУчета.СчетУчетаБУ;
		ДанныеНоменклатура.НалоговоеНазначение = СведенияОНоменклатуре.СчетаУчета.НалоговоеНазначение;
	КонецЕсли;
	
	Если НовыеСведенияОНоменклатуре <> Неопределено Тогда
		ДанныеНоменклатура.НовыйСчетУчетаБУ = НовыеСведенияОНоменклатуре.СчетаУчета.СчетУчетаБУ;
	КонецЕсли;
	
	Возврат ДанныеНоменклатура;

КонецФункции // ПолучитьДанныеВозвратнаяТараНоменклатураПриИзменении

#КонецОбласти 

#Область ОбработчикиСобытийТаблицыФормыБланкиСтрогогоУчета

&НаКлиенте
Процедура БланкиСтрогогоУчетаНоменклатураПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.БланкиСтрогогоУчета.ТекущиеДанные;
	
	СтруктураПараметров = Новый Структура("Номенклатура, Дата, Организация, СкладОтправитель, СкладПолучатель");
		
	ЗаполнитьЗначенияСвойств(СтруктураПараметров, ТекущиеДанные);
	ЗаполнитьЗначенияСвойств(СтруктураПараметров, ЭтаФорма);
	ЗаполнитьЗначенияСвойств(СтруктураПараметров, Объект);
	
	ДанныеБланкиСтрогогоУчета = ПолучитьДанныеБланкиСтрогогоУчетаНоменклатураПриИзменении(СтруктураПараметров);
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеБланкиСтрогогоУчета);
	
КонецПроцедуры // БланкиСтрогогоУчетаНоменклатураПриИзменении

&НаСервереБезКонтекста
Функция ПолучитьДанныеБланкиСтрогогоУчетаНоменклатураПриИзменении(Знач СтруктураПараметров)
	
	ДанныеНоменклатура = Новый Структура("СчетУчетаБУ, НовыйСчетУчетаБУ, СчетУчетаЗабалансовыйБУ, НовыйСчетУчетаЗабалансовыйБУ, НалоговоеНазначение, ЕдиницаИзмерения, Коэффициент");
	
	ДанныеОбъекта = Новый Структура("Дата, Организация, Склад", СтруктураПараметров.Дата, СтруктураПараметров.Организация, );
	
	ДанныеОбъекта.Склад	= СтруктураПараметров.СкладОтправитель;
	СведенияОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОНоменклатуре(
		СтруктураПараметров.Номенклатура, ДанныеОбъекта);
	
	ДанныеОбъекта.Склад	= СтруктураПараметров.СкладПолучатель;
	НовыеСведенияОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОНоменклатуре(
		СтруктураПараметров.Номенклатура, ДанныеОбъекта);
	
	Если СведенияОНоменклатуре <> Неопределено Тогда
		ДанныеНоменклатура.СчетУчетаБУ		       = СведенияОНоменклатуре.СчетаУчета.СчетУчетаБУ;
		ДанныеНоменклатура.СчетУчетаЗабалансовыйБУ = СведенияОНоменклатуре.СчетаУчета.СчетУчетаДоп;
		ДанныеНоменклатура.НалоговоеНазначение     = СведенияОНоменклатуре.СчетаУчета.НалоговоеНазначение;
		ДанныеНоменклатура.ЕдиницаИзмерения	       = СведенияОНоменклатуре.БазоваяЕдиницаИзмерения;
		ДанныеНоменклатура.Коэффициент		       = СведенияОНоменклатуре.Коэффициент;
	КонецЕсли;
	
	Если НовыеСведенияОНоменклатуре <> Неопределено Тогда
		ДанныеНоменклатура.НовыйСчетУчетаБУ             = НовыеСведенияОНоменклатуре.СчетаУчета.СчетУчетаБУ;
		ДанныеНоменклатура.НовыйСчетУчетаЗабалансовыйБУ = НовыеСведенияОНоменклатуре.СчетаУчета.СчетУчетаДоп;
	КонецЕсли;
	
	Возврат ДанныеНоменклатура;
	
КонецФункции // ПолучитьДанныеТоварыНоменклатураПриИзменении

&НаКлиенте
Процедура БланкиСтрогогоУчетаЕдиницаИзмеренияПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.БланкиСтрогогоУчета.ТекущиеДанные;
	
	ДанныеСтрокиТаблицы = Новый Структура(
		"Номенклатура, ЕдиницаИзмерения, Коэффициент, Количество,
		|СчетУчетаЗабалансовыйБУ");
	
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, ТекущиеДанные);
	
	БланкиСтрогогоУчетаЕдиницаИзмеренияПриИзмененииНаСервере(ДанныеСтрокиТаблицы);
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтрокиТаблицы);
	
КонецПроцедуры // БланкиСтрогогоУчетаЕдиницаИзмеренияПриИзменении

&НаСервереБезКонтекста
Процедура БланкиСтрогогоУчетаЕдиницаИзмеренияПриИзмененииНаСервере(СтрокаТабличнойЧасти)
	
	ОбработкаТабличныхЧастей.ЗаполнитьКоэффициентТабЧасти(СтрокаТабличнойЧасти);
	
КонецПроцедуры // БланкиСтрогогоУчетаЕдиницаИзмеренияПриИзмененииНаСервере

#КонецОбласти 

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПодборТовары(Команда)

	ПараметрыПодбора = ПолучитьПараметрыПодбора("Товары");
	Если ПараметрыПодбора <> Неопределено Тогда
		ОткрытьФорму("Обработка.ПодборНоменклатуры.Форма.Форма", ПараметрыПодбора,
			ЭтаФорма, УникальныйИдентификатор);
	КонецЕсли;

КонецПроцедуры 

&НаКлиенте
Процедура ПодборТоварыНаКомиссии(Команда)

	ПараметрыПодбора = ПолучитьПараметрыПодбора("ТоварыНаКомиссии");
	Если ПараметрыПодбора <> Неопределено Тогда
		ОткрытьФорму("Обработка.ПодборНоменклатуры.Форма.Форма", ПараметрыПодбора,
			ЭтаФорма, УникальныйИдентификатор);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПодборВозвратнаяТара(Команда)

	ПараметрыПодбора = ПолучитьПараметрыПодбора("ВозвратнаяТара");
	Если ПараметрыПодбора <> Неопределено Тогда
		ОткрытьФорму("Обработка.ПодборНоменклатуры.Форма.Форма", ПараметрыПодбора,
			ЭтаФорма, УникальныйИдентификатор);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ИзменитьТовары(Команда)

	ПараметрыФормы = ПолучитьПараметрыОбработкиТабличнойЧастиТовары();
	
	Если ПараметрыФормы <> Неопределено Тогда
		ОткрытьФорму("Обработка.ИзменениеТаблицыТоваров.Форма.Форма", ПараметрыФормы,
			ЭтаФорма, УникальныйИдентификатор);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборБланки(Команда)
	
	ПараметрыПодбора = ПолучитьПараметрыПодбора("БланкиСтрогогоУчета");
	Если ПараметрыПодбора <> Неопределено Тогда
		ОткрытьФорму("Обработка.ПодборНоменклатуры.Форма.Форма", ПараметрыПодбора,
			ЭтаФорма, УникальныйИдентификатор);
	КонецЕсли;
	
КонецПроцедуры // ПодборБланки

&НаКлиенте
Процедура СкопироватьСтроки(Команда)
	
	ИмяТаблицы = ПолучитьИмяТекущейТабличнойЧасти();
	Если ПустаяСтрока(ИмяТаблицы) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	КоличествоСтрок = Элементы[ИмяТаблицы].ВыделенныеСтроки.Количество();
	Если КоличествоСтрок = 0 Тогда
		
		Возврат;
		
	КонецЕсли;
	СкопироватьСтрокиНаСервере(ИмяТаблицы);
	ОбработкаТабличныхЧастейКлиент.ОповеститьОКопированииСтрокВБуферОбмена(ЭтотОбъект, КоличествоСтрок);
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьСтроки(Команда)
	
	ИмяТаблицы = ПолучитьИмяТекущейТабличнойЧасти();
	Если ПустаяСтрока(ИмяТаблицы) Тогда
		
		Возврат;
		
	КонецЕсли;
	КоличествоСтрок = ВставитьСтрокиНаСервере(ИмяТаблицы);
	ОбработкаТабличныхЧастейКлиент.ОповеститьОВставкеСтрокИзБуфераОбмена(ЭтотОбъект, КоличествоСтрок);
	
КонецПроцедуры

#КонецОбласти 

#Область CлужебныеПроцедурыИФункции 

&НаСервере
Процедура ПодготовитьФормуНаСервере()
	
	УстановитьФункциональныеОпцииФормы();
	
	ТекущаяДатаДокумента = Объект.Дата;
	
	ВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	
	ПоказыватьВДокументахСчетаУчета = Истина;
	
			
	РазделениеПоСтавкамВРознице	= БухгалтерскийУчетВызовСервераПовтИсп.ИспользуетсяРазделениеПоСтавкамНДСВНТТ();		
	
	УстановитьЗаголовокФормы();
	
	УправлениеФормой(ЭтаФорма);
	
	УстановитьСостояниеДокумента();
	
	// Проверка буфера обмена на наличие скопированных строк
	УстановитьДоступностьКомандыВставки(ЭтотОбъект, Не ОбщегоНазначения.ПустойБуферОбмена());
	
КонецПроцедуры // ПодготовитьФормуНаСервере

&НаСервере
Процедура УстановитьФункциональныеОпцииФормы()

	ОбщегоНазначенияБПКлиентСервер.УстановитьПараметрыФункциональныхОпцийФормыДокумента(ЭтаФорма);
	
	УчетВПродажныхЦенах =
		УчетнаяПолитика.СпособОценкиТоваровВРознице(Объект.Организация, Объект.Дата) = Перечисления.СпособыОценкиТоваровВРознице.ПоПродажнойСтоимости;
		
	ПлательщикНДС               = УчетнаяПолитика.ПлательщикНДС(Объект.Организация, Объект.Дата);
	ПлательщикНалогаНаПрибыльДо2015 = УчетнаяПолитика.ПлательщикНалогаНаПрибыльДо2015(Объект.Организация, Объект.Дата);
	ПлательщикЕН                = УчетнаяПолитика.ПлательщикЕдиногоНалога(Объект.Организация, Объект.Дата);
	
	СкладыОбработатьИзменение();
	
	СпособОценкиМПЗ	= УчетнаяПолитика.СпособОценкиМПЗ(Объект.Организация, Объект.Дата);
	СпособОценкиМПЗПоСредней	= (СпособОценкиМПЗ = Перечисления.СпособыОценки.ПоСредней);
	
КонецПроцедуры // УстановитьФункциональныеОпцииФормы

&НаСервере
Процедура СкладыОбработатьИзменение()

	Если ЗначениеЗаполнено(Объект.СкладОтправитель) Тогда
		СвойстваСкладаОтправителя = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			Объект.СкладОтправитель, "ТипСклада, ТипЦенРозничнойТорговли");
		ТипЦенСкладОтправитель = СвойстваСкладаОтправителя.ТипЦенРозничнойТорговли;
		ТипСкладаОтправитель   = СвойстваСкладаОтправителя.ТипСклада;
	Иначе
		ТипЦенСкладОтправитель    = Справочники.ТипыЦенНоменклатуры.ПустаяСсылка();
		ТипСкладаОтправитель      = Перечисления.ТипыСкладов.ОптовыйСклад;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.СкладПолучатель) Тогда
		СвойстваСкладаПолучателя = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			Объект.СкладПолучатель, "ТипСклада, ТипЦенРозничнойТорговли");
		ТипЦенСкладПолучатель = СвойстваСкладаПолучателя.ТипЦенРозничнойТорговли;
		ТипСкладаПолучатель   = СвойстваСкладаПолучателя.ТипСклада;
	Иначе
		ТипЦенСкладПолучатель = Справочники.ТипыЦенНоменклатуры.ПустаяСсылка();
		ТипСкладаПолучатель   = Перечисления.ТипыСкладов.ОптовыйСклад;
	КонецЕсли;
	
	Если ТипСкладаПолучатель <> Перечисления.ТипыСкладов.ОптовыйСклад
		И УчетВПродажныхЦенах Тогда
		РассчитыватьСуммаВРознице = Истина;
	Иначе
		РассчитыватьСуммаВРознице = Ложь;
	КонецЕсли;

	НТТ = (ТипСкладаОтправитель = Перечисления.ТипыСкладов.НеавтоматизированнаяТорговаяТочка);
	ОПТ = (ТипСкладаОтправитель = Перечисления.ТипыСкладов.ОптовыйСклад);
	
	ПолучательНТТ = (ТипСкладаПолучатель = Перечисления.ТипыСкладов.НеавтоматизированнаяТорговаяТочка);
	ПолучательОПТ = (ТипСкладаПолучатель = Перечисления.ТипыСкладов.ОптовыйСклад);
	
КонецПроцедуры // СкладыОбработатьИзменение

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)

	ОбъектФормы = Форма.Объект;
	Элементы	= Форма.Элементы;
	
	ЭтоОборудование = (ОбъектФормы.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПеремещениеТоваров.Оборудование"));
	
	// видимость шапки и страниц формы
	
	Если ОбъектФормы.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПеремещениеТоваров.БланкиСтрогогоУчета") Тогда
		Элементы.ГруппаБланкиСтрогогоУчета.Видимость = Истина;
		Элементы.ГруппаТовары.Видимость              = Ложь;
		Элементы.ГруппаТоварыНаКомиссии.Видимость    = Ложь;
		Элементы.ГруппаВозвратнаяТара.Видимость      = Ложь;
	Иначе
		Элементы.ГруппаБланкиСтрогогоУчета.Видимость = Ложь;
		Элементы.ГруппаТовары.Видимость              = Истина;
		Элементы.ГруппаТоварыНаКомиссии.Видимость    = Истина;
		Элементы.ГруппаВозвратнаяТара.Видимость      = Истина;
	КонецЕсли;
	
	Элементы.ГруппаИтоги.Видимость = Форма.НТТ ИЛИ Форма.ПолучательНТТ;
	// видимость Товары
	
	
	
	
	// изменение надписей, заголовков
	Элементы.ГруппаТовары.Заголовок = ?(ЭтоОборудование, 
										 НСтр("ru='Оборудование';uk='Устаткування'"), 
										 НСтр("ru='Товары';uk='Товари'")
									   );
									   
	ПараметрыВыбора = Новый Массив;
	ПараметрыВыбора.Добавить(Новый ПараметрВыбора("Отбор.Услуга", Ложь)); 
	ПараметрыВыбора.Добавить(Новый ПараметрВыбора("Отбор.БланкСтрогогоУчета", Ложь)); 
	ПараметрыВыбора.Добавить(Новый ПараметрВыбора("Заголовок", Элементы.ГруппаТовары.Заголовок)); 
	Элементы.ТоварыНоменклатура.ПараметрыВыбора	= Новый ФиксированныйМассив(ПараметрыВыбора);

КонецПроцедуры // УправлениеФормой

&НаСервере
Процедура УправлениеФормойНаСервере() Экспорт
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры // УправлениеФормойНаСервере

&НаСервере
Процедура УстановитьПараметрыВыбораВидОперации()
	
	МассивВидовОпераций = Документы.ПеремещениеТоваров.ПолучитьФиксированныйМассивВидовОпераций();
	
	ПараметрМассивВидовОпераций = Новый ПараметрВыбора("Отбор.Ссылка", МассивВидовОпераций);
	
	НовыйМассив = Новый Массив();
	НовыйМассив.Добавить(ПараметрМассивВидовОпераций);
	НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);
	
	Элементы.ВидОперации.ПараметрыВыбора = НовыеПараметры;
	
КонецПроцедуры // УстановитьПараметрыВыбораВидОперации

&НаСервере
Процедура УстановитьЗаголовокФормы() Экспорт
	
	ОбъектФормы = ЭтаФорма.Объект;

	ТекстЗаголовка = НСтр("ru='Перемещение товаров';uk='Переміщення товарів'");
	
	Если ЗначениеЗаполнено(ОбъектФормы.Ссылка) Тогда
		ТекстЗаголовка = ТекстЗаголовка + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru=' %1 от %2';uk=' %1 від %2'"), ОбъектФормы.Номер, ОбъектФормы.Дата);
	Иначе
		ТекстЗаголовка = ТекстЗаголовка + НСтр("ru=' (создание)';uk=' (створення)'");
	КонецЕсли;
	
	ЭтаФорма.Заголовок = ТекстЗаголовка + " (" + Строка(ОбъектФормы.ВидОперации) + ")";

КонецПроцедуры // УстановитьЗаголовокФормы

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьИтоги(Форма)
	
	Форма.ИтогиВсего    = Форма.Объект.Товары.Итог("СуммаВРознице");

КонецПроцедуры // ОбновитьИтоги

&НаСервере
Процедура ОбновитьИтогиНаСервере() Экспорт

	ОбновитьИтоги(ЭтаФорма);

КонецПроцедуры // ОбновитьИтогиНаСервере

&НаСервере
Процедура УстановитьСостояниеДокумента()
	
	СостояниеДокумента = ОбщегоНазначенияБП.СостояниеДокумента(Объект);
	
КонецПроцедуры

// Серверная обработка изменения реквизитов:

&НаСервере
Процедура ЗаполнитьСчетаУчетаВТабличнойЧастиНаСервере(ИмяТабличнойЧасти = "")

	Если ПустаяСтрока(ИмяТабличнойЧасти) ИЛИ ИмяТабличнойЧасти = "Товары" Тогда
		Документы.ПеремещениеТоваров.ЗаполнитьСчетаУчетаВТабличнойЧасти(Объект, "Товары");
	КонецЕсли;
	
	Если ПустаяСтрока(ИмяТабличнойЧасти) ИЛИ ИмяТабличнойЧасти = "ТоварыНаКомиссии" Тогда
		Документы.ПеремещениеТоваров.ЗаполнитьСчетаУчетаВТабличнойЧасти(Объект, "ТоварыНаКомиссии");
	КонецЕсли;
	
	Если ПустаяСтрока(ИмяТабличнойЧасти) ИЛИ ИмяТабличнойЧасти = "ВозвратнаяТара" Тогда
		Документы.ПеремещениеТоваров.ЗаполнитьСчетаУчетаВТабличнойЧасти(Объект, "ВозвратнаяТара");
	КонецЕсли;
	
	Если ПустаяСтрока(ИмяТабличнойЧасти) ИЛИ ИмяТабличнойЧасти = "БланкиСтрогогоУчета" Тогда
		Документы.ПеремещениеТоваров.ЗаполнитьСчетаУчетаВТабличнойЧасти(Объект, "БланкиСтрогогоУчета");
	КонецЕсли;

КонецПроцедуры // ЗаполнитьСчетаУчетаВТабличнойЧастиНаСервере

&НаСервере
Процедура ЗаполнитьСтрокиТабличнойЧастиТоварыНаСервере()
	
	Документы.ПеремещениеТоваров.ЗаполнитьСтрокиТабличнойЧастиТовары(Объект, ТипСкладаОтправитель, ТипСкладаПолучатель, РазделениеПоСтавкамВРознице);

КонецПроцедуры // ЗаполнитьСтрокиТабличнойЧастиТоварыНаСервере

// Прочий функционал:

&НаКлиенте
Функция ПолучитьПараметрыПодбора(ИмяТаблицы)

	ПараметрыФормы = Новый Структура;

	ДатаРасчетов 	 = ?(НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДата()), Неопределено, Объект.Дата);
	ЗаголовокПодбора = НСтр("ru='Подбор номенклатуры в %1 (%2)';uk='Підбір номенклатури %1 (%2)'");

	Валюта = ВалютаРегламентированногоУчета;

	ПараметрыФормы.Вставить("ПоказыватьОстатки", Истина);

	Если ТипСкладаОтправитель = ПредопределенноеЗначение("Перечисление.ТипыСкладов.НеавтоматизированнаяТорговаяТочка")
			ИЛИ ТипСкладаПолучатель = ПредопределенноеЗначение("Перечисление.ТипыСкладов.НеавтоматизированнаяТорговаяТочка") Тогда
		ПараметрыФормы.Вставить("ПоказыватьСчетУчета", Истина);
	КонецЕсли;

	Если ИмяТаблицы = "Товары" Тогда
		ПредставлениеТаблицы = НСтр("ru='Товары';uk='Товари'");
	ИначеЕсли ИмяТаблицы = "ТоварыНаКомиссии" Тогда
		ПредставлениеТаблицы = НСтр("ru='Товары на комиссии';uk='Товари на комісії'");
	ИначеЕсли ИмяТаблицы = "ВозвратнаяТара" Тогда
		ПредставлениеТаблицы = НСтр("ru='Возвратная тара';uk='Зворотна тара'");
	ИначеЕсли ИмяТаблицы = "БланкиСтрогогоУчета" Тогда
		ПредставлениеТаблицы = НСтр("ru='Бланки строгого учета';uk='Бланки суворого обліку'");	
	КонецЕсли;
	ЗаголовокПодбора = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ЗаголовокПодбора, Объект.Ссылка, ПредставлениеТаблицы);

	Если ИмяТаблицы = "Товары" Тогда
		
		Если ТипСкладаОтправитель = ПредопределенноеЗначение("Перечисление.ТипыСкладов.НеавтоматизированнаяТорговаяТочка")
			И ТипСкладаПолучатель = ПредопределенноеЗначение("Перечисление.ТипыСкладов.ОптовыйСклад") Тогда
			
			ПараметрыФормы.Вставить("ЕстьЦена",       Истина);
			ПараметрыФормы.Вставить("ПоказыватьЦены", ЗначениеЗаполнено(ТипЦенСкладОтправитель));
			ПараметрыФормы.Вставить("ДатаЦены",       Объект.Дата);
			ПараметрыФормы.Вставить("ТипЦен",         ТипЦенСкладОтправитель);
			
		ИначеЕсли ТипСкладаОтправитель = ПредопределенноеЗначение("Перечисление.ТипыСкладов.ОптовыйСклад")
			И ТипСкладаПолучатель = ПредопределенноеЗначение("Перечисление.ТипыСкладов.НеавтоматизированнаяТорговаяТочка") Тогда
			
			ПараметрыФормы.Вставить("ЕстьЦена",       Истина);
			ПараметрыФормы.Вставить("ПоказыватьЦены", ЗначениеЗаполнено(ТипЦенСкладПолучатель));
			ПараметрыФормы.Вставить("ДатаЦены",       Объект.Дата);
			ПараметрыФормы.Вставить("ТипЦен",         ТипЦенСкладПолучатель);
			
		КонецЕсли;
		
	КонецЕсли;
	
	ПараметрыФормы.Вставить("ЕстьКоличество",      Истина);
	ПараметрыФормы.Вставить("ПоказыватьСчетУчета", Истина);
	ПараметрыФормы.Вставить("ДатаРасчетов",        ДатаРасчетов);
	ПараметрыФормы.Вставить("Валюта",              Валюта);
	ПараметрыФормы.Вставить("Организация",         Объект.Организация);
	ПараметрыФормы.Вставить("Склад",               Объект.СкладОтправитель);
	ПараметрыФормы.Вставить("Заголовок",           ЗаголовокПодбора);
	ПараметрыФормы.Вставить("ВидПодбора",          ПолучитьВидПодбора(ИмяТаблицы));
	ПараметрыФормы.Вставить("ИмяТаблицы",          ИмяТаблицы);
	ПараметрыФормы.Вставить("Услуги",              Ложь);

	Возврат ПараметрыФормы;

КонецФункции // ПолучитьПараметрыПодбора

&НаКлиенте
Функция ПолучитьВидПодбора(ИмяТаблицы)

	ВидПодбора = "";

	Если ЗначениеЗаполнено(Объект.СкладОтправитель)
		И ТипСкладаОтправитель = ПредопределенноеЗначение("Перечисление.ТипыСкладов.НеавтоматизированнаяТорговаяТочка") Тогда
		ВидПодбора = "НТТ";
	КонецЕсли;

	Возврат ВидПодбора;

КонецФункции

&НаСервере
Функция ПоместитьТоварыВоВременноеХранилищеНаСервере()

	Возврат ПоместитьВоВременноеХранилище(Объект.Товары.Выгрузить(), УникальныйИдентификатор);

КонецФункции

&НаКлиенте
Функция ПолучитьПараметрыОбработкиТабличнойЧастиТовары()

	ПараметрыОбработки = Новый Структура;
	
	ПараметрыОбработки.Вставить("АдресХранилищаТовары",		ПоместитьТоварыВоВременноеХранилищеНаСервере());
	ПараметрыОбработки.Вставить("ЗаполнятьЦеныПоПокупке",	Ложь);
	ПараметрыОбработки.Вставить("ДокументСсылка",			Объект.Ссылка);
	ПараметрыОбработки.Вставить("ДокументДата",				Объект.Дата);
	ПараметрыОбработки.Вставить("ДокументОрганизация",		Объект.Организация);
	ПараметрыОбработки.Вставить("ДокументСклад",			Объект.СкладПолучатель);
	
	Возврат ПараметрыОбработки;

КонецФункции 

&НаСервере
Процедура ОбработкаВыбораПодборВставкаИзБуфераНаСервере(ВыбранноеЗначение, ИмяТаблицы)

	ЭтоВставкаИзБуфера = ВыбранноеЗначение.Свойство("ЭтоВставкаИзБуфера");
	СписокСвойств = Неопределено;
	Если ЭтоВставкаИзБуфера Тогда
		
		ТаблицаТоваров = ВыбранноеЗначение.Данные;
		СписокСвойств = ВыбранноеЗначение.СписокСвойств;
		
	Иначе
		
		ТаблицаТоваров = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресПодобраннойНоменклатурыВХранилище);
		
	КонецЕсли;
	
	СписокНоменклатуры	= ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаТоваров, "Номенклатура", Истина);
	
	ДанныеОбъекта = Новый Структура("Дата, Организация, Склад");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
	ДанныеОбъекта.Склад	= Объект.СкладОтправитель;
	СоответствиеСведенийОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОСпискеНоменклатуры(
		СписокНоменклатуры, ДанныеОбъекта);
	
	ДанныеОбъекта.Склад	= Объект.СкладПолучатель;
	СоответствиеНовыхСведенийОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОСпискеНоменклатуры(
		СписокНоменклатуры, ДанныеОбъекта);
		
	КоличествоДобавленныхСтрок = 0;
		
	Для Каждого СтрокаТовара Из ТаблицаТоваров Цикл
		
		СтрокаТабличнойЧасти = Неопределено;
		Если Не ЭтоВставкаИзБуфера Тогда
		
			СтруктураОтбора = Новый Структура("Номенклатура", СтрокаТовара.Номенклатура);
			Если ИмяТаблицы <> "ВозвратнаяТара" Тогда
				 СтруктураОтбора.Вставить("Цена",СтрокаТовара.Цена);
				 СтруктураОтбора.Вставить("ЕдиницаИзмерения",СтрокаТовара.ЕдиницаИзмерения);
			КонецЕсли;
			
			СтрокаТабличнойЧасти = НайтиСтрокуТабличнойЧасти(ИмяТаблицы, СтруктураОтбора);
			
		КонецЕсли;
		
		Если СтрокаТабличнойЧасти <> Неопределено Тогда
			// Нашли - увеличиваем количество.
			СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + СтрокаТовара.Количество;
			
			Если ИмяТаблицы = "Товары" Тогда
				
				Если ТипСкладаОтправитель = Перечисления.ТипыСкладов.НеавтоматизированнаяТорговаяТочка Тогда
					
					Если ТипСкладаПолучатель = Перечисления.ТипыСкладов.ОптовыйСклад Тогда
						СтрокаТабличнойЧасти.СуммаВРознице	= СтрокаТовара.Цена * СтрокаТовара.Количество;
					КонецЕсли;
					
				ИначеЕсли ТипСкладаПолучатель = Перечисления.ТипыСкладов.НеавтоматизированнаяТорговаяТочка Тогда
					
					Если ТипСкладаОтправитель = Перечисления.ТипыСкладов.ОптовыйСклад Тогда
						СтрокаТабличнойЧасти.СуммаВРознице	= СтрокаТовара.Цена * СтрокаТовара.Количество;
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе
			
			СведенияОНоменклатуре = СоответствиеСведенийОНоменклатуре.Получить(СтрокаТовара.Номенклатура);
			Если ЭтоВставкаИзБуфера 
				И СведенияОНоменклатуре <> Неопределено
				И ЗначениеЗаполнено(СведенияОНоменклатуре.Услуга)
				И СведенияОНоменклатуре.Услуга Тогда
				
				Продолжить;
				
			КонецЕсли;
			СтрокаТабличнойЧасти	= Объект[ИмяТаблицы].Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтрокаТовара, СписокСвойств);
			КоличествоДобавленныхСтрок = КоличествоДобавленныхСтрок + 1;
			
			НовыеСведенияОНоменклатуре	= СоответствиеНовыхСведенийОНоменклатуре.Получить(СтрокаТабличнойЧасти.Номенклатура);
			
			Документы.ПеремещениеТоваров.ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(
				ДанныеОбъекта, СтрокаТабличнойЧасти, ИмяТаблицы, СведенияОНоменклатуре, НовыеСведенияОНоменклатуре);
				
			Если ЭтоВставкаИзБуфера 
				И Найти(СписокСвойств, "СчетУчетаБУ") <> 0 
				И ЗначениеЗаполнено(СтрокаТовара["СчетУчетаБУ"]) Тогда
				СтрокаТабличнойЧасти.СчетУчетаБУ = СтрокаТовара.СчетУчетаБУ;
			КонецЕсли;
				
			Если ИмяТаблицы = "Товары" Тогда
				
				Если ТипСкладаОтправитель = Перечисления.ТипыСкладов.НеавтоматизированнаяТорговаяТочка Тогда
					
					Если РазделениеПоСтавкамВРознице И СведенияОНоменклатуре <> Неопределено Тогда	
						СтрокаТабличнойЧасти.СтавкаНДСВРознице = СведенияОНоменклатуре.СтавкаНДСВРознице;
					КонецЕсли;
					
					Если ТипСкладаПолучатель = Перечисления.ТипыСкладов.ОптовыйСклад Тогда
						СтрокаТабличнойЧасти.ЦенаВРознице	= СтрокаТовара.Цена;
						СтрокаТабличнойЧасти.СуммаВРознице	= СтрокаТовара.Цена * СтрокаТовара.Количество;
					КонецЕсли;
					
				ИначеЕсли ТипСкладаПолучатель = Перечисления.ТипыСкладов.НеавтоматизированнаяТорговаяТочка Тогда
					
					Если РазделениеПоСтавкамВРознице И НовыеСведенияОНоменклатуре <> Неопределено Тогда	
						СтрокаТабличнойЧасти.СтавкаНДСВРознице = НовыеСведенияОНоменклатуре.СтавкаНДСВРознице;
					КонецЕсли;
					
					Если ТипСкладаОтправитель = Перечисления.ТипыСкладов.ОптовыйСклад Тогда
						СтрокаТабличнойЧасти.ЦенаВРознице	= СтрокаТовара.Цена;
						СтрокаТабличнойЧасти.СуммаВРознице	= СтрокаТовара.Цена * СтрокаТовара.Количество;
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ОбновитьИтоги(ЭтаФорма);
	
	Если ЭтоВставкаИзБуфера Тогда
		ВыбранноеЗначение.КоличествоДобавленныхСтрок = КоличествоДобавленныхСтрок;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ОбработкаОповещенияОбработкиТабличнойЧастиТоварыНаСервере(Параметры)
	Перем ТаблицаСтавокНДС;
	
	ТаблицаОбработки = ПолучитьИзВременногоХранилища(Параметры.АдресОбработаннойТабличнойЧастиТоварыВХранилище);
	
	Отбор	= Новый Структура("НомерСтрокиДокумента", 0);
	ТаблицаОбработки.Индексы.Добавить("НомерСтрокиДокумента");
	ДобавленныеСтроки	= ТаблицаОбработки.НайтиСтроки(Отбор);
	
	СписокНоменклатуры	= ОбщегоНазначения.ВыгрузитьКолонку(ДобавленныеСтроки, "Номенклатура", Истина);
	
	ДанныеОбъекта = Новый Структура("Дата, Организация, Склад");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
	ДанныеОбъекта.Склад	= Объект.СкладОтправитель;
	СоответствиеСведенийОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОСпискеНоменклатуры(
		СписокНоменклатуры, ДанныеОбъекта);
	
	ДанныеОбъекта.Склад	= Объект.СкладПолучатель;
	СоответствиеНовыхСведенийОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОСпискеНоменклатуры(
		СписокНоменклатуры, ДанныеОбъекта);
	
	Для Каждого СтрокаТабличнойЧасти ИЗ ДобавленныеСтроки Цикл
		
		СведенияОНоменклатуре		= СоответствиеСведенийОНоменклатуре.Получить(СтрокаТабличнойЧасти.Номенклатура);
		НовыеСведенияОНоменклатуре	= СоответствиеНовыхСведенийОНоменклатуре.Получить(СтрокаТабличнойЧасти.Номенклатура);
		
		Документы.ПеремещениеТоваров.ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(
			ДанныеОбъекта, СтрокаТабличнойЧасти, "Товары", СведенияОНоменклатуре, НовыеСведенияОНоменклатуре);
		
		Если ТипСкладаОтправитель = Перечисления.ТипыСкладов.НеавтоматизированнаяТорговаяТочка Тогда
			Если РазделениеПоСтавкамВРознице И СведенияОНоменклатуре <> Неопределено Тогда	
				СтрокаТабличнойЧасти.СтавкаНДСВРознице = СведенияОНоменклатуре.СтавкаНДСВРознице;
			КонецЕсли;
		ИначеЕсли ТипСкладаПолучатель = Перечисления.ТипыСкладов.НеавтоматизированнаяТорговаяТочка Тогда
			Если РазделениеПоСтавкамВРознице И НовыеСведенияОНоменклатуре <> Неопределено Тогда	
				СтрокаТабличнойЧасти.СтавкаНДСВРознице = НовыеСведенияОНоменклатуре.СтавкаНДСВРознице;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Объект.Товары.Загрузить(ТаблицаОбработки);
	
	ОбновитьИтоги(ЭтаФорма);

КонецПроцедуры // ОбработкаОповещенияОбработкиТабличнойЧастиТоварыНаСервере

&НаСервере
Функция НайтиСтрокуТабличнойЧасти(ИмяТабличнойЧасти, СтруктураОтбора)

	СтрокаТабличнойЧасти = Неопределено;

	МассивНайденныхСтрок = Объект[ИмяТабличнойЧасти].НайтиСтроки(СтруктураОтбора);
	Если МассивНайденныхСтрок.Количество() > 0 Тогда
		// Нашли. Вернем первую найденную строку.
		СтрокаТабличнойЧасти = МассивНайденныхСтрок[0];
	КонецЕсли;

	Возврат СтрокаТабличнойЧасти;

КонецФункции

#Область КопированиеВставкаСтрокЧерезБуферОбмена

&НаСервере
Процедура СкопироватьСтрокиНаСервере(ИмяТаблицы)
	
	ОбщегоНазначения.СкопироватьСтрокиВБуферОбмена(Объект[ИмяТаблицы], 
		Элементы[ИмяТаблицы].ВыделенныеСтроки, Объект.Ссылка.Метаданные().Имя);

КонецПроцедуры

&НаСервере
Функция ВставитьСтрокиНаСервере(ИмяТаблицы)
	
	ПараметрыВставки = ОбработкаТабличныхЧастей.ПолучитьПараметрыВставкиДанныхИзБуфераОбмена(Объект.Ссылка, ИмяТаблицы, ПоказыватьВДокументахСчетаУчета);
	ОпределитьСписокСвойствДляВставкиИзБуфера(ПараметрыВставки);
	ОбработкаВыбораПодборВставкаИзБуфераНаСервере(ПараметрыВставки, ПараметрыВставки.ИмяТаблицы);
	
	Возврат ПараметрыВставки.КоличествоДобавленныхСтрок;
	
КонецФункции

&НаКлиенте
Функция ПолучитьИмяТекущейТабличнойЧасти()
	
	Возврат "Товары";
	
КонецФункции

&НаСервере
Процедура ОпределитьСписокСвойствДляВставкиИзБуфера(ПараметрыВставки)

	СписокСвойств = Новый Массив;
	СписокСвойств.Добавить("Номенклатура");
	СписокСвойств.Добавить("ЕдиницаИзмерения");
	СписокСвойств.Добавить("Коэффициент");
	СписокСвойств.Добавить("Количество");
	СписокСвойств.Добавить("Цена");
	СписокСвойств.Добавить("ЦенаВРознице");
	СписокСвойств.Добавить("СтавкаНДСВРознице");
	Если ПараметрыВставки.ПоказыватьВДокументахСчетаУчета Тогда
		СписокСвойств.Добавить("СчетУчетаБУ");
		
		Если ПараметрыВставки.ИсточникИДокументОдногоВида Тогда
			СписокСвойств.Добавить("НовыйСчетУчетаБУ");
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыВставки.СписокСвойств = ОбработкаТабличныхЧастей.ПолучитьСписокСвойствИмеющихсяВТаблицеДанных(
		ПараметрыВставки.Данные, СписокСвойств);
	
КонецПроцедуры
	
&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьКомандыВставки(Форма, Доступность)

	Доступность = Не Форма.ТолькоПросмотр И Доступность;
	Элементы = Форма.Элементы;
	Элементы.ТоварыВставитьСтроки.Доступность					 = Доступность;
	Элементы.ТоварыКонтекстноеМенюВставитьСтроки.Доступность	 = Доступность;

КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункцииБСП

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти 