#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПроцедурыИФункцииПечати

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	// Накладная на перемещение товаров
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "Ведомость";
	КомандаПечати.Представление = НСтр("ru='Накладная на перемещение товаров';uk='Накладна на переміщення товарів'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечати";
	КомандаПечати.СписокФорм    = "ФормаСписка,ФормаВыбора,ФормаДокументаОбщая";
	КомандаПечати.Порядок       = 1;
	
	
	// Накладная на перемещение товаров (М-11)
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "М11";
	КомандаПечати.Представление = НСтр("ru='Накладная на перемещение товаров (М-11)';uk='Накладна на переміщення товарів (М-11)'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечати";
	КомандаПечати.СписокФорм    = "ФормаСписка,ФормаВыбора,ФормаДокументаОбщая";
	КомандаПечати.Порядок       = 2;
	
	// Товарно-транспортная накладная (1-ТН)
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.МенеджерПечати = "Обработка.ПечатьТТН";
	КомандаПечати.Идентификатор = "ТТН";
	КомандаПечати.Представление = НСтр("ru='Товарно-транспортная накладная (1-ТН)';uk='Товарно-транспортна накладна (1-ТН)'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБПКлиент.ОткрытьФормуПечатиТТН";
	КомандаПечати.СписокФорм    = "ФормаСписка,ФормаВыбора,ФормаДокументаОбщая";	
	КомандаПечати.Порядок       = 3;
	
	// Реестр документов
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "Реестр";
	КомандаПечати.Представление = НСтр("ru='Реестр документов';uk='Реєстр документів'");
	КомандаПечати.ЗаголовокФормы= НСтр("ru='Реестр документов ""Перемещение товаров""';uk='Реєстр документів ""Переміщення товарів""'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечатиРеестраДокументов";
	КомандаПечати.СписокФорм    = "ФормаСписка";
	КомандаПечати.Порядок       = 100;

КонецПроцедуры // ДобавитьКомандыПечати

// Функция формирует табличный документ с печатной формой накладной на перемещение товаров, разработанной методистами
//
// Возвращаемое значение:
//  Табличный документ - печатная форма накладной
//
Функция ПечатьПеремещениеТоваров(МассивОбъектов, ОбъектыПечати, ПараметрыВывода)

	УстановитьПривилегированныйРежим(Истина);	
	
	мВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	
	ДопКолонка = Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
	Если ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул Тогда
		ВыводитьКоды = Истина;
		Колонка = "Артикул";
	ИначеЕсли ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Код Тогда
		ВыводитьКоды = Истина;
		Колонка = "Код";
	Иначе
		ВыводитьКоды = Ложь;
	КонецЕсли;
	
	ЗапросДокумент = Новый Запрос;
	ЗапросДокумент.Текст = "
	|ВЫБРАТЬ
	|	Номер,
	|	Дата,
	|	Ответственный.ФизическоеЛицо.Наименование КАК Отпустил,
	|	Организация,
	|	СкладОтправитель,
	|	СкладОтправитель.Представление КАК Поставщик,
	|	СкладПолучатель,
	|	СкладОтправитель.ТипСклада КАК ТипСкладаОтправитель,
	|	СкладПолучатель.ТипСклада КАК ТипСкладаПолучатель,
	|	СкладОтправитель.ТипЦенРозничнойТорговли КАК ТипЦенРозничнойТорговлиОтправитель,
	|	СкладПолучатель.ТипЦенРозничнойТорговли КАК ТипЦенРозничнойТорговлиПолучатель,
	|	ВЫБОР КОГДА СкладОтправитель.ТипСклада = &НТТ ТОГДА ИСТИНА ИНАЧЕ ЛОЖЬ КОНЕЦ КАК ОтправительНТТ,
	|	ВЫБОР КОГДА СкладПолучатель.ТипСклада = &НТТ ТОГДА ИСТИНА ИНАЧЕ ЛОЖЬ КОНЕЦ КАК ПолучательНТТ,
	|	СкладПолучатель.Представление КАК Покупатель
	|ИЗ
	|	Документ.ПеремещениеТоваров КАК ПеремещениеТоваров
	|ГДЕ
	|	ПеремещениеТоваров.Ссылка = &ТекущийДокумент";
	
	ЗапросДокумент.УстановитьПараметр("НТТ", Перечисления.ТипыСкладов.НеавтоматизированнаяТорговаяТочка);
	
	ЗапросПоТоварам = Новый Запрос;
	ЗапросПоТоварам.Текст = "
	|ВЫБРАТЬ
	|	Номенклатура,
	|	Номенклатура.НаименованиеПолное КАК Товар,
	|	Номенклатура.Код КАК Код,
	|	Номенклатура.Артикул КАК Артикул,
	|	Количество,
	|	ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	Цена,
	|   НомерСтроки,
	|	1 КАК ID
	|ИЗ 
	|	(ВЫБРАТЬ
	|		Номенклатура         КАК Номенклатура,
	|		ЕдиницаИзмерения     КАК ЕдиницаИзмерения,
	|		ЦенаВРознице         КАК Цена,
	|		СУММА(Количество)    КАК Количество,
	|		МИНИМУМ(НомерСтроки) КАК НомерСтроки
	|	ИЗ
	|		Документ.ПеремещениеТоваров.Товары КАК ПеремещениеТоваров
	|	ГДЕ
	|		ПеремещениеТоваров.Ссылка = &ТекущийДокумент
	|	СГРУППИРОВАТЬ ПО
	|		Номенклатура,
	|		ЕдиницаИзмерения,
	|		ЦенаВРознице
	|	) КАК ВложенныйЗапросПоТоварам
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Номенклатура,
	|	Номенклатура.НаименованиеПолное КАК Товар,
	|	Номенклатура.Код КАК Код,
	|	Номенклатура.Артикул КАК Артикул,
	|	Количество,
	|	ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	Цена,
	|   НомерСтроки,
	|	2 КАК ID
	|ИЗ 
	|	(ВЫБРАТЬ
	|		Номенклатура         КАК Номенклатура,
	|		ЕдиницаИзмерения     КАК ЕдиницаИзмерения,
	|		Цена                 КАК Цена,
	|		СУММА(Количество)    КАК Количество,
	|		МИНИМУМ(НомерСтроки) КАК НомерСтроки
	|	ИЗ
	|		Документ.ПеремещениеТоваров.ТоварыНаКомиссии КАК ПеремещениеТоваров
	|	ГДЕ
	|		ПеремещениеТоваров.Ссылка = &ТекущийДокумент
	|	СГРУППИРОВАТЬ ПО
	|		Номенклатура,
	|		ЕдиницаИзмерения,
	|		Цена
	|	) КАК ВложенныйЗапросПоТоварам
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Номенклатура,
	|	Номенклатура.НаименованиеПолное,
	|	Номенклатура.Код КАК Код,
	|	Номенклатура.Артикул КАК Артикул,
	|	Количество,
	|	Номенклатура.БазоваяЕдиницаИзмерения,
	|	0,
	|	НомерСтроки,
	|	3
	|	
	|ИЗ
	|	Документ.ПеремещениеТоваров.ВозвратнаяТара КАК ПеремещениеТоваров
	|
	|ГДЕ
	|	ПеремещениеТоваров.Ссылка = &ТекущийДокумент
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Номенклатура,
	|	Номенклатура.НаименованиеПолное,
	|	Номенклатура.Код КАК Код,
	|	Номенклатура.Артикул КАК Артикул,
	|	Количество,
	|	ЕдиницаИзмерения,
	|	0,
	|	НомерСтроки,
	|	4
	|	
	|ИЗ
	|	Документ.ПеремещениеТоваров.БланкиСтрогогоУчета КАК ПеремещениеТоваров
	|
	|ГДЕ
	|	ПеремещениеТоваров.Ссылка = &ТекущийДокумент
	|
	|
	|УПОРЯДОЧИТЬ ПО
	|	ID,
	|	НомерСтроки";
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПеремещениеТоваров_Накладная";

	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ПеремещениеТоваров.ПФ_MXL_Накладная");
	
	// печать производится на языке, указанном в настройках пользователя
	КодЯзыкаПечать = ПараметрыВывода.КодЯзыкаДляМногоязычныхПечатныхФорм;
	Макет.КодЯзыкаМакета = КодЯзыкаПечать;

	ПервыйДокумент = Истина;
	
	ОбластьКолонкаТоварШиринаКолонки = Макет.Область("Товар").ШиринаКолонки;
	ОбластьКолонкаКодовШиринаКолонки = Макет.Область("КолонкаКодов").ШиринаКолонки;
	
	Для Каждого Ссылка Из МассивОбъектов Цикл	
		
		Если Не ПервыйДокумент Тогда
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ПервыйДокумент = Ложь;
		
		// Запомним номер строки, с которой начали выводить текущий документ.
		НомерСтрокиНачало = ТабДокумент.ВысотаТаблицы + 1;
		
		ЗапросДокумент.УстановитьПараметр("ТекущийДокумент", Ссылка);
		
		Шапка = ЗапросДокумент.Выполнить().Выбрать();

		Шапка.Следующий();
		
		СпособОценкиТоваровВРознице = УчетнаяПолитика.СпособОценкиТоваровВРознице(Шапка.Организация, НачалоМесяца(Шапка.Дата));
		мУчетВПродажныхЦенах = (СпособОценкиТоваровВРознице = Перечисления.СпособыОценкиТоваровВРознице.ПоПродажнойСтоимости);

		СкладНТТ = Шапка.ОтправительНТТ ИЛИ Шапка.ПолучательНТТ;
		ЕстьЦена = мУчетВПродажныхЦенах И НЕ (Шапка.ТипСкладаОтправитель = Перечисления.ТипыСкладов.ОптовыйСклад И Шапка.ТипСкладаПолучатель = Перечисления.ТипыСкладов.ОптовыйСклад); 
		
		// Выводим шапку накладной
		ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
		ОбластьМакета.Параметры.ТекстЗаголовка = ОбщегоНазначенияБПВызовСервера.СформироватьЗаголовокДокумента(Шапка, НСтр("ru='Накладная на перемещение';uk='Накладна на переміщення'", КодЯзыкаПечать), КодЯзыкаПечать);
		ТабДокумент.Вывести(ОбластьМакета);

		СведенияОбОрганизации = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Шапка.Организация, Шапка.Дата,,,КодЯзыкаПечать);
		ОбластьМакета = Макет.ПолучитьОбласть("Организация");
		ОбластьМакета.Параметры.Заполнить(Шапка);
		ОбластьМакета.Параметры.ПредставлениеПоставщика = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОбОрганизации, "ПолноеНаименование,",,КодЯзыкаПечать);	
		ОбластьМакета.Параметры.РеквизитыПоставщика     = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОбОрганизации, "ЮридическийАдрес,Телефоны,/,КодПоЕДРПОУ,КодПоДРФО,",,КодЯзыкаПечать);
		ТабДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");
		ОбластьМакета.Параметры.ПредставлениеПоставщика = Шапка.Поставщик;
		ОбластьМакета.Параметры.Поставщик = Шапка.СкладОтправитель;
		ТабДокумент.Вывести(ОбластьМакета);

		ОбластьМакета = Макет.ПолучитьОбласть("Покупатель");
		ОбластьМакета.Параметры.ПредставлениеПолучателя = Шапка.Покупатель;
		ОбластьМакета.Параметры.Получатель = Шапка.СкладПолучатель;
		ТабДокумент.Вывести(ОбластьМакета);

		ОбластьШапки  = "ШапкаТаблицы";
		ОбластьСтроки = "Строка";

		ОбластьНомера = Макет.ПолучитьОбласть(ОбластьШапки+"|НомерСтроки");
		ОбластьКодов  = Макет.ПолучитьОбласть(ОбластьШапки+"|КолонкаКодов");
		ОбластьДанных = Макет.ПолучитьОбласть(ОбластьШапки+"|Данные");
		ОбластьЦены   = Макет.ПолучитьОбласть(ОбластьШапки+"|Цена");
		
		ТабДокумент.Вывести(ОбластьНомера);
		Если ВыводитьКоды Тогда
			ОбластьКодов.Параметры.ИмяКолонкиКодов = Колонка;
			ТабДокумент.Присоединить(ОбластьКодов);
		КонецЕсли;
		ТабДокумент.Присоединить(ОбластьДанных);
		Если ЕстьЦена Тогда
			ТабДокумент.Присоединить(ОбластьЦены);
		КонецЕсли; 
		
		ОбластьКолонкаТовар = Макет.Область("Товар");

		Если Не ВыводитьКоды Тогда
			ОбластьКолонкаТовар.ШиринаКолонки = ОбластьКолонкаТоварШиринаКолонки + ОбластьКолонкаКодовШиринаКолонки;
		КонецЕсли;
		
		ОбластьНомера = Макет.ПолучитьОбласть(ОбластьСтроки+"|НомерСтроки");
		ОбластьКодов  = Макет.ПолучитьОбласть(ОбластьСтроки+"|КолонкаКодов");
		ОбластьДанных = Макет.ПолучитьОбласть(ОбластьСтроки+"|Данные");
		ОбластьЦены   = Макет.ПолучитьОбласть(ОбластьСтроки+"|Цена");
		
		ЗапросПоТоварам.УстановитьПараметр("ТекущийДокумент", Ссылка);
		ВыборкаСтрокТовары = ЗапросПоТоварам.Выполнить().Выбрать();
	
		НомерСтрокиВыборки = 1;
		ИтогоСумма = 0;
		
		Пока ВыборкаСтрокТовары.Следующий() Цикл

			Если НЕ ЗначениеЗаполнено(ВыборкаСтрокТовары.Номенклатура) Тогда
				Сообщить(НСтр("ru='В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.';uk='В одному з рядків не заповнене значення номенклатури - рядок під час друку буде пропущений.'"), СтатусСообщения.Важное);
				Продолжить;
			КонецЕсли;

			ОбластьНомера.Параметры.НомерСтроки = НомерСтрокиВыборки;
			ТабДокумент.Вывести(ОбластьНомера);

			Если ВыводитьКоды Тогда
				Если Колонка = "Артикул" Тогда
					ОбластьКодов.Параметры.Артикул = ВыборкаСтрокТовары.Артикул;
				Иначе
					ОбластьКодов.Параметры.Артикул = ВыборкаСтрокТовары.Код;
				КонецЕсли;
				ТабДокумент.Присоединить(ОбластьКодов);
			КонецЕсли;
			
			ОбластьДанных.Параметры.Заполнить(ВыборкаСтрокТовары);
			ОбластьДанных.Параметры.Товар = СокрЛП(ВыборкаСтрокТовары.Товар);
			ТабДокумент.Присоединить(ОбластьДанных);
			Если ЕстьЦена Тогда
				// Определим цену для розницы в продажных ценах
				КоличествоТов = ВыборкаСтрокТовары.Количество;
				ЦенаПеремещения = 0;
				Если (ВыборкаСтрокТовары.ID = 1) И СкладНТТ Тогда
					ЦенаПеремещения = ВыборкаСтрокТовары.Цена;
				ИначеЕсли (ВыборкаСтрокТовары.ID = 1) Тогда
					// один из складов - розничный
					Склад = ?(Шапка.ТипСкладаОтправитель = Перечисления.ТипыСкладов.РозничныйМагазин, Шапка.СкладОтправитель, Шапка.СкладПолучатель);
					ТипЦенРозничнойТорговли = ?(Шапка.ТипСкладаОтправитель = Перечисления.ТипыСкладов.РозничныйМагазин, Шапка.ТипЦенРозничнойТорговлиОтправитель, Шапка.ТипЦенРозничнойТорговлиПолучатель);
					ЦенаПеремещения = Ценообразование.ПолучитьЦенуНоменклатуры(ВыборкаСтрокТовары.Номенклатура, ТипЦенРозничнойТорговли, 
																				Шапка.Дата, мВалютаРегламентированногоУчета, 1, 1);
				КонецЕсли; 
				
				Сумма = ЦенаПеремещения * КоличествоТов;
				
				ОбластьЦены.Параметры.Цена  = ЦенаПеремещения;
				ОбластьЦены.Параметры.Сумма = Сумма;
				ТабДокумент.Присоединить(ОбластьЦены);
				ИтогоСумма = ИтогоСумма + Сумма;
				
			КонецЕсли; 
			
			НомерСтрокиВыборки = НомерСтрокиВыборки + 1;
			
		КонецЦикла;

		// Подвал
		ОбластьНомера = Макет.ПолучитьОбласть("Подвал|НомерСтроки");
		ОбластьКодов  = Макет.ПолучитьОбласть("Подвал|КолонкаКодов");
		ОбластьДанных = Макет.ПолучитьОбласть("Подвал|Данные");
		ОбластьЦены   = Макет.ПолучитьОбласть("Подвал|Цена");
		
		ОбластьЦены.Параметры.ИтогоСумма = ИтогоСумма;
		
		ТабДокумент.Вывести(ОбластьНомера);
		Если ВыводитьКоды Тогда
			ТабДокумент.Присоединить(ОбластьКодов);
		КонецЕсли;
		ТабДокумент.Присоединить(ОбластьДанных);
		Если ЕстьЦена Тогда
			ТабДокумент.Присоединить(ОбластьЦены);
		КонецЕсли; 

		// Вывести подписи
		ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
		ОбластьМакета.Параметры.Заполнить(Шапка);
		ТабДокумент.Вывести(ОбластьМакета);
		
		// В табличном документе зададим имя области, в которую был 
		// выведен объект. Нужно для возможности печати покомплектно.
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабДокумент, 
			НомерСтрокиНачало, ОбъектыПечати, Ссылка);
		
	КонецЦикла;	

	Возврат ТабДокумент;

КонецФункции // ПечатьПеремещениеТоваров()

// Функция формирует табличный документ с печатной типовой формой М-11 накладной на перемещение товаров
//
// Возвращаемое значение:
//  Табличный документ - печатная форма накладной
//
Функция ПечатьМ11(МассивОбъектов, ОбъектыПечати)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЗапросДокумент = Новый Запрос;
	ЗапросДокумент.Текст = "
	|ВЫБРАТЬ
	|	ПеремещениеТоваров.Номер                          КАК НомерДокумента,
	|	ПеремещениеТоваров.Дата                           КАК ДатаДокумента,
	|	ПеремещениеТоваров.Организация                    КАК Организация,
	|	ПеремещениеТоваров.Организация.НаименованиеПолное КАК ПредставлениеОрганизации,
	|	ПеремещениеТоваров.Организация.КодПоЕДРПОУ        КАК КодПоЕДРПОУ,
	|	ПеремещениеТоваров.Ответственный.ФизическоеЛицо.Наименование КАК Отпустил,
	|	ПеремещениеТоваров.Организация,
	|	ПеремещениеТоваров.СкладОтправитель,
	|	ПеремещениеТоваров.СкладОтправитель.Представление КАК СкладОтправительПредставление,
	|	ПеремещениеТоваров.СкладПолучатель,
	|	ПеремещениеТоваров.СкладПолучатель.Представление КАК СкладПолучательПредставление,
	|	ПеремещениеТоваров.СкладОтправитель.ТипСклада КАК ТипСкладаОтправитель,
	|	ПеремещениеТоваров.СкладПолучатель.ТипСклада КАК ТипСкладаПолучатель,
	|	ПеремещениеТоваров.СкладОтправитель.ТипЦенРозничнойТорговли КАК ТипЦенРозничнойТорговлиОтправитель,
	|	ПеремещениеТоваров.СкладПолучатель.ТипЦенРозничнойТорговли КАК ТипЦенРозничнойТорговлиПолучатель,
	|	ВЫБОР КОГДА ПеремещениеТоваров.СкладОтправитель.ТипСклада = ЗНАЧЕНИЕ(Перечисление.ТипыСкладов.НеавтоматизированнаяТорговаяТочка) ТОГДА ИСТИНА ИНАЧЕ ЛОЖЬ КОНЕЦ КАК ОтправительНТТ,
	|	ВЫБОР КОГДА ПеремещениеТоваров.СкладПолучатель.ТипСклада  = ЗНАЧЕНИЕ(Перечисление.ТипыСкладов.НеавтоматизированнаяТорговаяТочка) ТОГДА ИСТИНА ИНАЧЕ ЛОЖЬ КОНЕЦ КАК ПолучательНТТ,
	|	ПеремещениеТоваров.СкладПолучатель.Представление КАК Покупатель
	|ИЗ
	|	Документ.ПеремещениеТоваров КАК ПеремещениеТоваров
	|ГДЕ
	|	ПеремещениеТоваров.Ссылка = &ТекущийДокумент";
	
	
	ЗапросПоТоварам = Новый Запрос;
	ЗапросПоТоварам.Текст = "
	|ВЫБРАТЬ
	|	Номенклатура КАК Материал,
	|	Номенклатура.НаименованиеПолное КАК МатериалНаименование,
	|	Номенклатура.Код КАК НоменклатурныйНомер,
	|	Количество,
	|	ЕдиницаИзмерения.Представление КАК ЕдиницаИзмеренияНаименование,
	|	ЕдиницаИзмерения.Код КАК ЕдиницаИзмеренияКод,
	|	Коэффициент КАК Коэффициент,
	|	Цена,
	|   СчетПередачи,
	|   НомерСтроки,
	|	1 КАК ID
	|ИЗ 
	|	(ВЫБРАТЬ
	|		Номенклатура         КАК Номенклатура,
	|		ЕдиницаИзмерения     КАК ЕдиницаИзмерения,
	|		Коэффициент          КАК Коэффициент,
	|		ЦенаВРознице         КАК Цена,
	|		СУММА(Количество)    КАК Количество,
	|		ВЫБОР ПеремещениеТоваров.Ссылка.СкладПолучатель.ТипСклада
	|			КОГДА ЗНАЧЕНИЕ(Перечисление.ТипыСкладов.РозничныйМагазин)                  ТОГДА ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахАТТ)
	|			КОГДА ЗНАЧЕНИЕ(Перечисление.ТипыСкладов.НеавтоматизированнаяТорговаяТочка) ТОГДА ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахНТТ)
	|			ИНАЧЕ НовыйСчетУчетаБУ 
	|		КОНЕЦ КАК СчетПередачи,
	|		МИНИМУМ(НомерСтроки) КАК НомерСтроки
	|	ИЗ
	|		Документ.ПеремещениеТоваров.Товары КАК ПеремещениеТоваров
	|	ГДЕ
	|		ПеремещениеТоваров.Ссылка = &ТекущийДокумент
	|	СГРУППИРОВАТЬ ПО
	|		Номенклатура,
	|		ЕдиницаИзмерения,
	|		Коэффициент,
	|		ЦенаВРознице,
	|		ВЫБОР ПеремещениеТоваров.Ссылка.СкладПолучатель.ТипСклада
	|			КОГДА ЗНАЧЕНИЕ(Перечисление.ТипыСкладов.РозничныйМагазин)                  ТОГДА ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахАТТ)
	|			КОГДА ЗНАЧЕНИЕ(Перечисление.ТипыСкладов.НеавтоматизированнаяТорговаяТочка) ТОГДА ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахНТТ)
	|			ИНАЧЕ НовыйСчетУчетаБУ 
	|		КОНЕЦ
	|	) КАК ВложенныйЗапросПоТоварам
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Номенклатура,
	|	Номенклатура.НаименованиеПолное,
	|	Номенклатура.Код,
	|	Количество,
	|	ПРЕДСТАВЛЕНИЕ(ЕдиницаИзмерения) КАК ЕдиницаИзмеренияНаименование,
	|	ЕдиницаИзмерения.Код КАК ЕдиницаИзмеренияКод,
	|	Коэффициент          КАК Коэффициент,
	|	Цена,
	|   СчетПередачи,
	|   НомерСтроки,
	|	2 КАК ID
	|ИЗ 
	|	(ВЫБРАТЬ
	|		Номенклатура         КАК Номенклатура,
	|		ЕдиницаИзмерения     КАК ЕдиницаИзмерения,
	|		Коэффициент          КАК Коэффициент,
	|		Цена                 КАК Цена,
	|		СУММА(Количество)    КАК Количество,
	|		НовыйСчетУчетаБУ     КАК СчетПередачи,
	|		МИНИМУМ(НомерСтроки) КАК НомерСтроки
	|	ИЗ
	|		Документ.ПеремещениеТоваров.ТоварыНаКомиссии КАК ПеремещениеТоваров
	|	ГДЕ
	|		ПеремещениеТоваров.Ссылка = &ТекущийДокумент
	|	СГРУППИРОВАТЬ ПО
	|		Номенклатура,
	|		ЕдиницаИзмерения,
	|		Коэффициент,
	|		Цена,
	|  	 	НовыйСчетУчетаБУ
	|	) КАК ВложенныйЗапросПоТоварам
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Номенклатура,
	|	Номенклатура.НаименованиеПолное,
	|	Номенклатура.Код КАК Код,
	|	Количество,
	|	ПРЕДСТАВЛЕНИЕ(Номенклатура.БазоваяЕдиницаИзмерения) КАК ЕдиницаИзмеренияНаименование,
	|	Номенклатура.БазоваяЕдиницаИзмерения.Код КАК ЕдиницаИзмеренияКод,
	|	1 КАК Коэффициент,
	|	0,
	|	НовыйСчетУчетаБУ     КАК СчетПередачи,
	|	НомерСтроки,
	|	3
	|	
	|ИЗ
	|	Документ.ПеремещениеТоваров.ВозвратнаяТара КАК ПеремещениеТоваров
	|
	|ГДЕ
	|	ПеремещениеТоваров.Ссылка = &ТекущийДокумент
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Номенклатура,
	|	Номенклатура.НаименованиеПолное,
	|	Номенклатура.Код КАК Код,
	|	Количество,
	|	ПРЕДСТАВЛЕНИЕ(ЕдиницаИзмерения) КАК ЕдиницаИзмеренияНаименование,
	|	ЕдиницаИзмерения.Код КАК ЕдиницаИзмеренияКод,
	|	Коэффициент          КАК Коэффициент,
	|	0,
	|	НовыйСчетУчетаБУ     КАК СчетПередачи,
	|	НомерСтроки,
	|	4
	|	
	|ИЗ
	|	Документ.ПеремещениеТоваров.БланкиСтрогогоУчета КАК ПеремещениеТоваров
	|
	|ГДЕ
	|	ПеремещениеТоваров.Ссылка = &ТекущийДокумент
	|
	|
	|УПОРЯДОЧИТЬ ПО
	|	ID,
	|	НомерСтроки";
	
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПеремещениеТоваров_М11";
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("ОбщийМакет.ПФ_MXL_UK_М11");
	ОбластьНомера = Макет.ПолучитьОбласть("Номера");
		
	ВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	
	ПервыйДокумент = Истина;
	
	Для Каждого Ссылка Из МассивОбъектов Цикл	
		
		Если Не ПервыйДокумент Тогда
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ПервыйДокумент = Ложь;
		
		// Запомним номер строки, с которой начали выводить текущий документ.
		НомерСтрокиНачало = ТабДокумент.ВысотаТаблицы + 1;
	
		ЗапросДокумент.УстановитьПараметр("ТекущийДокумент", Ссылка);
		
		Шапка = ЗапросДокумент.Выполнить().Выбрать();
		Шапка.Следующий();
		                            
		Область = Макет.ПолучитьОбласть("Шапка");
		Область.Параметры.Заполнить(Шапка);
		Область.Параметры.Валюта         = ВалютаРегламентированногоУчета;
		Область.Параметры.КодОперации 	 = "Переміщення";
		
		Область.Параметры.Основание = "Переміщення із складу " + Шапка.СкладОтправительПредставление + " на склад " + Шапка.СкладПолучательПредставление;
		
		ОбластьПодвал   = Макет.ПолучитьОбласть("Подвал");
		ПараметрыПодвал = ОбластьПодвал.Параметры;
		ПараметрыПодвал.Заполнить(Шапка);
		
		ТабДокумент.Вывести(Область);
		ТабДокумент.Вывести(ОбластьНомера);
			
		
		СпособОценкиТоваровВРознице = УчетнаяПолитика.СпособОценкиТоваровВРознице(Шапка.Организация, НачалоМесяца(Шапка.ДатаДокумента));
		мУчетВПродажныхЦенах = (СпособОценкиТоваровВРознице = Перечисления.СпособыОценкиТоваровВРознице.ПоПродажнойСтоимости);

		СкладНТТ = Шапка.ОтправительНТТ ИЛИ Шапка.ПолучательНТТ;
		ЕстьЦенаРозничная = мУчетВПродажныхЦенах И НЕ (Шапка.ТипСкладаОтправитель = Перечисления.ТипыСкладов.ОптовыйСклад И Шапка.ТипСкладаПолучатель = Перечисления.ТипыСкладов.ОптовыйСклад); 
		
		МассивСсылок = Новый Массив;
		МассивСсылок.Добавить(Ссылка);
		ТаблицаСуммСписания = БухгалтерскийУчетПереопределяемый.ПолучитьСуммуСписанияАктивов(МассивСсылок, Шапка.ДатаДокумента, Шапка.ДатаДокумента);
		
		
		ЗапросПоТоварам.УстановитьПараметр("ТекущийДокумент", Ссылка);
		ВыборкаСтрокТовары = ЗапросПоТоварам.Выполнить().Выбрать();
		
		КоличествоВТаблице     = ВыборкаСтрокТовары.Количество();
		КоличествоОбработанных = 1;
		ОбщаяСуммаПеремещения  = 0;
		
		Пока ВыборкаСтрокТовары.Следующий() Цикл

			Область = Макет.ПолучитьОбласть("Строка");
			Область.Параметры.Заполнить(ВыборкаСтрокТовары);
			
			// Если есть цена розничная для товаров - выводим как цену розничную цену, иначе цену списания
			Если ЕстьЦенаРозничная И ВыборкаСтрокТовары.ID = 1 Тогда	
				// Определим цену для розницы в продажных ценах
				КоличествоТов = ВыборкаСтрокТовары.Количество;
				ЦенаПеремещения = 0;
				Если (ВыборкаСтрокТовары.ID = 1) И СкладНТТ Тогда
					ЦенаПеремещения = ВыборкаСтрокТовары.Цена;
				ИначеЕсли (ВыборкаСтрокТовары.ID = 1) Тогда
					// один из складов - розничный
					Склад = ?(Шапка.ТипСкладаОтправитель = Перечисления.ТипыСкладов.РозничныйМагазин, Шапка.СкладОтправитель, Шапка.СкладПолучатель);
					ТипЦенРозничнойТорговли = ?(Шапка.ТипСкладаОтправитель = Перечисления.ТипыСкладов.РозничныйМагазин, Шапка.ТипЦенРозничнойТорговлиОтправитель, Шапка.ТипЦенРозничнойТорговлиПолучатель);
					ЦенаПеремещения = Ценообразование.ПолучитьЦенуНоменклатуры(ВыборкаСтрокТовары.Материал, ТипЦенРозничнойТорговли, 
																				Шапка.ДатаДокумента, ВалютаРегламентированногоУчета, 1, 1);
				КонецЕсли; 
				
				СуммаПеремещения = ЦенаПеремещения * КоличествоТов;
				
				Область.Параметры.Цена      = ЦенаПеремещения;
				Область.Параметры.Стоимость = СуммаПеремещения;
				
				ОбщаяСуммаПеремещения  = ОбщаяСуммаПеремещения + Область.Параметры.Стоимость;
				
			Иначе
				
				СтрокаСуммСписания =  ТаблицаСуммСписания.Найти(ВыборкаСтрокТовары.Материал, "Номенклатура");
				Если СтрокаСуммСписания = Неопределено Тогда
					 Область.Параметры.Цена      = 0;
					 Область.Параметры.Стоимость = 0;
				 Иначе
					 ЦенаПеремещения = ?(СтрокаСуммСписания.Количество = 0, 0, СтрокаСуммСписания.Сумма / СтрокаСуммСписания.Количество * ВыборкаСтрокТовары.Коэффициент);
					 Область.Параметры.Цена		 = ЦенаПеремещения;
					 Область.Параметры.Стоимость = ЦенаПеремещения * ВыборкаСтрокТовары.Количество;
				 КонецЕсли;
				 
				 ОбщаяСуммаПеремещения  = ОбщаяСуммаПеремещения + Область.Параметры.Стоимость;
				
			КонецЕсли; 
			
			Если КоличествоОбработанных = КоличествоВТаблице Тогда
			  	// Последняя запись. Ее не следует отрывать от подписей.
			  	
			  	МассивТаблиц = Новый Массив(2);
			  	МассивТаблиц[0] = Область;
			  	МассивТаблиц[1] = ОбластьПодвал;
			  	
			  	Если НЕ ТабДокумент.ПроверитьВывод(МассивТаблиц) Тогда
			  		
			  		ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			  		ТабДокумент.Вывести(ОбластьНомера);
					
			  	КонецЕсли;
			  	
			  КонецЕсли;
			
			ТабДокумент.Вывести(Область);
			КоличествоОбработанных = КоличествоОбработанных + 1;

		КонецЦикла;
		
		
		// В форме сказано "Кількість найменувань". Будет выводится количество позиций.
		ПараметрыПодвал.ИтогоКоличествоПрописью = ЧислоПрописью(КоличествоОбработанных - 1, "Л=uk_UA;НП=Ложь;НД=Ложь;", ",,,,,,,,0");
																
		// сумму прописью выводим всегда на украинском - печатная форма регламенированная
		ПараметрыПодвал.ИтогоСуммаПрописью = ЧислоПрописью(ОбщаяСуммаПеремещения, "Л=uk_UA; ДП=Ложь", ВалютаРегламентированногоУчета.ПараметрыПрописиНаУкраинском);
		
		Руководители = ОтветственныеЛицаБП.ОтветственныеЛица(Шапка.Организация, Шапка.ДатаДокумента);
		ПараметрыПодвал.ГлавныйБухгалтер = Руководители.ГлавныйБухгалтер;
		
		ТабДокумент.Вывести(ОбластьПодвал);
	
		// В табличном документе зададим имя области, в которую был 
		// выведен объект. Нужно для возможности печати покомплектно.
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабДокумент, 
			НомерСтрокиНачало, ОбъектыПечати, Ссылка);
		
	КонецЦикла;
	
	Возврат ТабДокумент;

КонецФункции // ПечатьМ11

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходимое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	ПараметрыВывода.ДоступнаПечатьПоКомплектно = Истина;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "Ведомость") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "Ведомость", НСтр("ru='Накладная на перемещение товаров';uk='Накладна на переміщення товарів'"), 
			ПечатьПеремещениеТоваров(МассивОбъектов, ОбъектыПечати, ПараметрыВывода),,"Документ.ПеремещениеТоваров.ПФ_MXL_Накладная", , Истина);
	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "М11") Тогда
		// Формируем табличный документ и добавляем его в коллекцию печатных форм.
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "М11", НСтр("ru='Накладная на перемещение товаров (М-11)';uk='Накладна на переміщення товарів (М-11)'"),
			ПечатьМ11(МассивОбъектов, ОбъектыПечати),,"ОбщийМакет.ПФ_MXL_UK_М11");
	КонецЕсли;
 	
КонецПроцедуры // Печать

Функция ПолучитьДополнительныеРеквизитыДляРеестра() Экспорт
	
	Результат = Новый Структура("Информация", "СкладОтправитель");
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти 

#Область ПрограммныйИнтерфейс

// Заполняет счета учета номенклатуры в табличной части документа
Процедура ЗаполнитьСчетаУчетаВТабличнойЧасти(Объект, ИмяТабличнойЧасти) Экспорт

	ТабличнаяЧасть = Объект[ИмяТабличнойЧасти];
	
	ДанныеОбъекта = Новый Структура("Дата, Организация, Склад");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
	ДанныеОбъекта.Склад = Объект.СкладОтправитель;
	СоответствиеСчетовУчета = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаУчетаСпискаНоменклатуры(
		ДанныеОбъекта.Организация, ОбщегоНазначения.ВыгрузитьКолонку(ТабличнаяЧасть, "Номенклатура", Истина), ДанныеОбъекта.Склад, ДанныеОбъекта.Дата);
	
	ДанныеОбъекта.Склад = Объект.СкладПолучатель;
	СоответствиеНовыхСчетовУчета = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаУчетаСпискаНоменклатуры(
		ДанныеОбъекта.Организация, ОбщегоНазначения.ВыгрузитьКолонку(ТабличнаяЧасть, "Номенклатура", Истина), ДанныеОбъекта.Склад, ДанныеОбъекта.Дата);
		
	Для каждого СтрокаТабличнойЧасти Из ТабличнаяЧасть Цикл
		СчетаУчета		= СоответствиеСчетовУчета.Получить(СтрокаТабличнойЧасти.Номенклатура);
		НовыеСчетаУчета	= СоответствиеНовыхСчетовУчета.Получить(СтрокаТабличнойЧасти.Номенклатура);
		ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(ДанныеОбъекта, СтрокаТабличнойЧасти, ИмяТабличнойЧасти, СчетаУчета, НовыеСчетаУчета);
	КонецЦикла;

КонецПроцедуры // ЗаполнитьСчетаУчетаВТабличнойЧасти

Процедура ЗаполнитьСтрокиТабличнойЧастиТовары(Объект, ТипСкладаОтправитель, ТипСкладаПолучатель, РазделениеПоСтавкамВРознице) Экспорт

	СписокНоменклатуры	= ОбщегоНазначения.ВыгрузитьКолонку(Объект.Товары, "Номенклатура", Истина);
	
	ДанныеОбъекта = Новый Структура("Дата, Организация, Склад");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
	ДанныеОбъекта.Склад	= Объект.СкладОтправитель;
	СоответствиеСведенийОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОСпискеНоменклатуры(
		СписокНоменклатуры, ДанныеОбъекта);
	
	ДанныеОбъекта.Склад	= Объект.СкладПолучатель;
	СоответствиеНовыхСведенийОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОСпискеНоменклатуры(
		СписокНоменклатуры, ДанныеОбъекта);
		
	Для Каждого СтрокаТабличнойЧасти Из Объект.Товары Цикл
		
		СведенияОНоменклатуре		= СоответствиеСведенийОНоменклатуре.Получить(СтрокаТабличнойЧасти.Номенклатура);
		НовыеСведенияОНоменклатуре	= СоответствиеНовыхСведенийОНоменклатуре.Получить(СтрокаТабличнойЧасти.Номенклатура);
		
		Документы.ПеремещениеТоваров.ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(
			ДанныеОбъекта, СтрокаТабличнойЧасти, "Товары", СведенияОНоменклатуре, НовыеСведенияОНоменклатуре);
			
		
		Если ТипСкладаОтправитель = Перечисления.ТипыСкладов.НеавтоматизированнаяТорговаяТочка Тогда
			
			Если РазделениеПоСтавкамВРознице И СведенияОНоменклатуре <> Неопределено Тогда
				СтрокаТабличнойЧасти.СтавкаНДСВРознице = СведенияОНоменклатуре.СтавкаНДСВРознице;
			КонецЕсли;
			
			Если ТипСкладаПолучатель = Перечисления.ТипыСкладов.ОптовыйСклад Тогда
				СтрокаТабличнойЧасти.ЦенаВРознице	= СведенияОНоменклатуре.ЦенаВРознице;
				СтрокаТабличнойЧасти.СуммаВРознице	= СведенияОНоменклатуре.ЦенаВРознице * СтрокаТабличнойЧасти.Количество;
			КонецЕсли;
			
		ИначеЕсли ТипСкладаПолучатель = Перечисления.ТипыСкладов.НеавтоматизированнаяТорговаяТочка Тогда
			
			Если РазделениеПоСтавкамВРознице И НовыеСведенияОНоменклатуре <> Неопределено Тогда
				СтрокаТабличнойЧасти.СтавкаНДСВРознице = НовыеСведенияОНоменклатуре.СтавкаНДСВРознице;
			КонецЕсли;
			
			Если ТипСкладаОтправитель = Перечисления.ТипыСкладов.ОптовыйСклад Тогда
				СтрокаТабличнойЧасти.ЦенаВРознице	= НовыеСведенияОНоменклатуре.ЦенаВРознице;
				СтрокаТабличнойЧасти.СуммаВРознице	= НовыеСведенияОНоменклатуре.ЦенаВРознице * СтрокаТабличнойЧасти.Количество;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры // ЗаполнитьСтрокиТабличнойЧастиТовары

Функция ЗаполнитьСчетУчетаТовараРозницаВПродажныхЦенах(СчетУчета, Знач ТипСклада) Экспорт
	Перем СчетУчетаРозницаВПродажныхЦенах;
	
	Если ТипСклада = Перечисления.ТипыСкладов.РозничныйМагазин Тогда
		СчетУчетаРозницаВПродажныхЦенах = ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахАТТ;
	ИначеЕсли ТипСклада = Перечисления.ТипыСкладов.НеавтоматизированнаяТорговаяТочка Тогда
		СчетУчетаРозницаВПродажныхЦенах = ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахНТТ;
	Иначе
		СчетУчетаРозницаВПродажныхЦенах = СчетУчета;
	КонецЕсли;
	
	Если СчетУчета <> СчетУчетаРозницаВПродажныхЦенах Тогда
		СчетУчета = СчетУчетаРозницаВПродажныхЦенах;
	КонецЕсли;
	
КонецФункции // ЗаполнитьСчетУчетаТовараРозницаВПродажныхЦенах

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Заполняет счета учета номенклатуры в строке табличной части документа
//
// Параметры:
//  ДанныеОбъекта         - структура данных объекта, используемых при заполнении счетов учета (вид операции,
//                          вид договора контрагента, признак комиссионной торговли и т.п.)
//  СтрокаТабличнойЧасти  - строка табличной части документа
//  ИмяТабличнойЧасти     - имя табличной части документа
//  СведенияОНоменклатуре - структура сведений о номенклатуре, либо стуктура счетов учета
//
Процедура ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(ДанныеОбъекта, СтрокаТабличнойЧасти, ИмяТабличнойЧасти, СведенияОНоменклатуре, НовыеСведенияОНоменклатуре, ЗаполнятьБУ = Истина, ЗаполнятьНУ = Истина) Экспорт
	
	Перем СчетаУчета, НовыеСчетаУчета;
	
	Если СведенияОНоменклатуре <> Неопределено Тогда
		
		Если СведенияОНоменклатуре.Свойство("СчетаУчета") Тогда
			// СведенияОНоменклатуре - структура сведений номенклатуры
			СчетаУчета = СведенияОНоменклатуре.СчетаУчета;
		ИначеЕсли СведенияОНоменклатуре.Свойство("СчетУчетаБУ") Тогда
			// СведенияОНоменклатуре - структура счетов учета номенклатуры
			СчетаУчета = СведенияОНоменклатуре;
		КонецЕсли;
		
	КонецЕсли;
	
	Если НовыеСведенияОНоменклатуре <> Неопределено Тогда
		
		Если НовыеСведенияОНоменклатуре.Свойство("СчетаУчета") Тогда
			// СведенияОНоменклатуре - структура сведений номенклатуры
			НовыеСчетаУчета = НовыеСведенияОНоменклатуре.СчетаУчета;
		ИначеЕсли НовыеСведенияОНоменклатуре.Свойство("СчетУчетаБУ") Тогда
			// СведенияОНоменклатуре - структура счетов учета номенклатуры
			НовыеСчетаУчета = НовыеСведенияОНоменклатуре;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗаполнятьБУ Тогда
		ЗаполнитьСчетаБУ(СтрокаТабличнойЧасти, ИмяТабличнойЧасти, СчетаУчета, НовыеСчетаУчета);
	КонецЕсли; 
	Если ЗаполнятьНУ Тогда
		ЗаполнитьСчетаНУ(СтрокаТабличнойЧасти, ИмяТабличнойЧасти, СчетаУчета, НовыеСчетаУчета);
	КонецЕсли; 

КонецПроцедуры // ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти

// Заполняет счета БУ в строке табличной части.
Процедура ЗаполнитьСчетаБУ(СтрокаТабличнойЧасти, ИмяТабличнойЧасти, СчетаУчета, НовыеСчетаУчета)

	Если ВРег(ИмяТабличнойЧасти) <> Врег("ТоварыНаКомиссии") Тогда
	    СтрокаТабличнойЧасти.СчетУчетаБУ      = СчетаУчета.СчетУчетаБУ;
		СтрокаТабличнойЧасти.НовыйСчетУчетаБУ = НовыеСчетаУчета.СчетУчетаБУ;
		Если ВРег(ИмяТабличнойЧасти) = ВРег("БланкиСтрогогоУчета") Тогда
			СтрокаТабличнойЧасти.СчетУчетаЗабалансовыйБУ      = СчетаУчета.СчетУчетаДоп;
			СтрокаТабличнойЧасти.НовыйСчетУчетаЗабалансовыйБУ = НовыеСчетаУчета.СчетУчетаДоп;
		КонецЕсли;	
	Иначе
	    СтрокаТабличнойЧасти.СчетУчетаБУ      = СчетаУчета.СчетУчетаДоп;
		СтрокаТабличнойЧасти.НовыйСчетУчетаБУ = НовыеСчетаУчета.СчетУчетаДоп;
	КонецЕсли; 

КонецПроцедуры // ЗаполнитьСчетаБУ()

// Заполняет счета НУ в строке табличной части.
Процедура ЗаполнитьСчетаНУ(СтрокаТабличнойЧасти, ИмяТабличнойЧасти, СчетаУчета, НовыеСчетаУчета)
	
	Если ВРег(ИмяТабличнойЧасти) <> Врег("ТоварыНаКомиссии") Тогда
		СтрокаТабличнойЧасти.НалоговоеНазначение = СчетаУчета.НалоговоеНазначение;
	КонецЕсли;	

КонецПроцедуры // ЗаполнитьСчетаНУ()

Функция ПолучитьСоответствиеВидовОперацийФормам() Экспорт

	ФормыОприходованиеТоваров = Новый Соответствие;
	
	ФормыОприходованиеТоваров.Вставить(Перечисления.ВидыОперацийПеремещениеТоваров.ТоварыПродукция, 	    "ФормаДокументаОбщая");
	ФормыОприходованиеТоваров.Вставить(Перечисления.ВидыОперацийПеремещениеТоваров.Оборудование, 			"ФормаДокументаОбщая");
	ФормыОприходованиеТоваров.Вставить(Перечисления.ВидыОперацийПеремещениеТоваров.БланкиСтрогогоУчета, 	"ФормаДокументаОбщая");
	
	Возврат ФормыОприходованиеТоваров;

КонецФункции 

Функция ОпределитьВидОперацииПоДокументуОснованию(Основание) Экспорт

	Результат = Перечисления.ВидыОперацийПеремещениеТоваров.ТоварыПродукция;

	Возврат Результат;

КонецФункции

Функция ПолучитьФиксированныйМассивВидовОпераций() Экспорт

	МассивВидовОпераций = Новый Массив;
	СписокВидовОпераций = Новый СписокЗначений;
	
	ЗначенияПеречисления = Метаданные.Перечисления.ВидыОперацийПеремещениеТоваров.ЗначенияПеречисления;
	Для Каждого ЗначениеПеречисления Из ЗначенияПеречисления Цикл
		ТекущийВидОперации = Перечисления.ВидыОперацийПеремещениеТоваров[ЗначениеПеречисления.Имя];
		МассивВидовОпераций.Добавить(ТекущийВидОперации);
	КонецЦикла;
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьБланкиСтрогогоУчета") Тогда
		ИндексНайденныйЭлемент = МассивВидовОпераций.Найти(Перечисления.ВидыОперацийПеремещениеТоваров.БланкиСтрогогоУчета);
		Если ИндексНайденныйЭлемент <> Неопределено Тогда
    		МассивВидовОпераций.Удалить(ИндексНайденныйЭлемент);
		КонецЕсли;	
	КонецЕсли;
	
	Возврат Новый ФиксированныйМассив(МассивВидовОпераций);

КонецФункции // ПолучитьФиксированныйМассивВидовОпераций

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка)
	
	Если ВидФормы <> "ФормаДокумента"
		И ВидФормы <> "ФормаОбъекта" Тогда
		Возврат;
	КонецЕсли;

	ВидОперации = Неопределено; 

	Если Параметры.Свойство("Ключ") И ЗначениеЗаполнено(Параметры.Ключ) Тогда
		ВидОперации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Параметры.Ключ, "ВидОперации");
	КонецЕсли;

	// Если документ копируется, то вид формы получаем из копируемого документа.
	Если НЕ ЗначениеЗаполнено(ВидОперации) Тогда
		Если Параметры.Свойство("ЗначениеКопирования")
			И ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
			ВидОперации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
				Параметры.ЗначениеКопирования, "ВидОперации");
		КонецЕсли;
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(ВидОперации) Тогда
		Если Параметры.Свойство("ЗначенияЗаполнения") 
			И ТипЗнч(Параметры.ЗначенияЗаполнения) = Тип("Структура") Тогда
			Если Параметры.ЗначенияЗаполнения.Свойство("ВидОперации") Тогда
				ВидОперации = Параметры.ЗначенияЗаполнения.ВидОперации;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ВидОперации) Тогда
		Если Параметры.Свойство("Основание")
			И ЗначениеЗаполнено(Параметры.Основание) Тогда
			ВидОперации = ОпределитьВидОперацииПоДокументуОснованию(Параметры.Основание);
		КонецЕсли;
	КонецЕсли;

	СтандартнаяОбработка = Ложь;
	ФормыПеремещениеТоваров = ПолучитьСоответствиеВидовОперацийФормам();
	ВыбраннаяФорма = ФормыПеремещениеТоваров[ВидОперации];
	Если ВыбраннаяФорма = Неопределено Тогда
		ВыбраннаяФорма = "ФормаДокумента";
	КонецЕсли;
	
КонецПроцедуры // ОбработкаПолученияФормы

#КонецОбласти  

#КонецЕсли