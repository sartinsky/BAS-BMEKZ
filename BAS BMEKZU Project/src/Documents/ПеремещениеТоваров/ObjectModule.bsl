#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
Перем мВалютаРегламентированногоУчета;
Перем мУчетнаяПолитика;
Перем мИспользоватьОборотнуюНоменклатуру;
Перем мРазделятьПоСтавкамНДС;
Перем мУчетВПродажныхЦенах;

Перем ПартионныйУчетБУ;

#Область ОбработчикиСобытий

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	МассивНепроверяемыхРеквизитов = Новый Массив();
	
	СтруктураШапкиДокумента		  = Новый Структура;
	
	СтруктураШапкиДокумента.Вставить("ЕстьНДС",								УчетнаяПолитика.ПлательщикНДС(Организация, Дата));
	СтруктураШапкиДокумента.Вставить("ЕстьНалогНаПрибыльДо2015",			УчетнаяПолитика.ПлательщикНалогаНаПрибыльДо2015(Организация, Дата));
	СтруктураШапкиДокумента.Вставить("ВалютаРегламентированногоУчета", 		ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета());
	СтруктураШапкиДокумента.Вставить("РозницаВПродажныхЦенах", 				(УчетнаяПолитика.СпособОценкиТоваровВРознице(Организация, Дата) = Перечисления.СпособыОценкиТоваровВРознице.ПоПродажнойСтоимости));
	СтруктураШапкиДокумента.Вставить("ТипСкладаОтправитель", 				ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СкладОтправитель, "ТипСклада"));
	СтруктураШапкиДокумента.Вставить("ТипЦенРозничнойТорговлиОтправитель",  ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СкладОтправитель, "ТипЦенРозничнойТорговли"));
	СтруктураШапкиДокумента.Вставить("ТипСкладаПолучатель", 				ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СкладПолучатель, "ТипСклада"));
	СтруктураШапкиДокумента.Вставить("ТипЦенРозничнойТорговлиПолучатель",   ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СкладПолучатель, "ТипЦенРозничнойТорговли"));
	СтруктураШапкиДокумента.Вставить("ВидОперации",			 				ВидОперации);
	
	СтруктураШапкиДокумента.Вставить("РазделятьПоСтавкамНДС",               БухгалтерскийУчетВызовСервераПовтИсп.ИспользуетсяРазделениеПоСтавкамНДСВНТТ());
	
	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, МассивНепроверяемыхРеквизитов);
	
	НеИспользуемыеТабличныеЧасти = Новый Массив;
	
	Если Не ВидОперации = Перечисления.ВидыОперацийОприходованиеТоваров.БланкиСтрогогоУчета Тогда
		ПроверитьЗаполнениеТабличнойЧастиТовары(СтруктураШапкиДокумента, Отказ, МассивНепроверяемыхРеквизитов);
		ПроверитьЗаполнениеТабличнойЧастиТоварыНаКомиссии(СтруктураШапкиДокумента, Отказ, МассивНепроверяемыхРеквизитов);
		Если ПолучитьФункциональнуюОпцию("ИспользоватьВозвратнуюТару") Тогда
			ПроверитьЗаполнениеТабличнойЧастиВозвратнаяТара(СтруктураШапкиДокумента, Отказ, МассивНепроверяемыхРеквизитов);
		Иначе
			НеИспользуемыеТабличныеЧасти.Добавить("ВозвратнаяТара");
		КонецЕсли; 
	Иначе
		НеИспользуемыеТабличныеЧасти.Добавить("Товары");
		НеИспользуемыеТабличныеЧасти.Добавить("ТоварыНаКомиссии");
		НеИспользуемыеТабличныеЧасти.Добавить("ВозвратнаяТара");
	КонецЕсли;	
	
	Если ВидОперации = Перечисления.ВидыОперацийОприходованиеТоваров.БланкиСтрогогоУчета И ПолучитьФункциональнуюОпцию("ИспользоватьБланкиСтрогогоУчета") Тогда
		ПроверитьЗаполнениеТабличнойЧастиБланкиСтрогогоУчета(СтруктураШапкиДокумента, Отказ, МассивНепроверяемыхРеквизитов);
	Иначе
		НеИспользуемыеТабличныеЧасти.Добавить("БланкиСтрогогоУчета");
	КонецЕсли;	
	
	ОбщегоНазначенияБП.ИсключитьИзПроверкиНеиспользуемыеТабличныеЧасти(
		ПроверяемыеРеквизиты,
		НеИспользуемыеТабличныеЧасти);
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	
КонецПроцедуры // ОбработкаПроверкиЗаполнения

Процедура ПриКопировании(ОбъектКопирования)
	
	Дата = НачалоДня(ОбщегоНазначенияБП.ПолучитьРабочуюДату());
	Ответственный = Пользователи.ТекущийПользователь();
	
КонецПроцедуры // ПриКопировании

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	Если НЕ ЗначениеЗаполнено(СкладПолучатель) Тогда
		СкладПолучатель = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновнойСклад");
	КонецЕсли;
	
	ТипДанныхЗаполнения = ТипЗнч(ДанныеЗаполнения);
	Если ДанныеЗаполнения <> Неопределено 
		И ТипДанныхЗаполнения <> Тип("Структура")
		И Метаданные().ВводитсяНаОсновании.Содержит(ДанныеЗаполнения.Метаданные()) Тогда
		
		ЗаполнитьПоДокументуОснованию(ДанныеЗаполнения);

	КонецЕсли;
	
	ЗаполнениеДокументов.Заполнить(ЭтотОбъект, ДанныеЗаполнения);
	
	Если НЕ ЗначениеЗаполнено(СкладОтправитель) Тогда
		СкладОтправитель = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновнойСклад");
	КонецЕсли;
	
	Если  ТипДанныхЗаполнения = Тип("Структура")
		И ДанныеЗаполнения.Свойство("ВидОперации") Тогда
		ВидОперации = ДанныеЗаполнения.ВидОперации;
	КонецЕсли;
    
КонецПроцедуры // ОбработкаЗаполнения()

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)

	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ОбновитьПараметрыУчетнойПолитики();
	
	ТипСкладаОтправителя = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СкладОтправитель, "ТипСклада");
	ТипСкладаПолучателя  = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СкладПолучатель,  "ТипСклада");
	
	Если мУчетВПродажныхЦенах
		И (ТипСкладаОтправителя <> Перечисления.ТипыСкладов.ОптовыйСклад
		ИЛИ ТипСкладаПолучателя <> Перечисления.ТипыСкладов.ОптовыйСклад) Тогда
		
		Для каждого Строка Из Товары Цикл
			
			Документы.ПеремещениеТоваров.ЗаполнитьСчетУчетаТовараРозницаВПродажныхЦенах(
				Строка.СчетУчетаБУ, ТипСкладаОтправителя);
				
			Документы.ПеремещениеТоваров.ЗаполнитьСчетУчетаТовараРозницаВПродажныхЦенах(
				Строка.НовыйСчетУчетаБУ, ТипСкладаПолучателя);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если ВидОперации = Перечисления.ВидыОперацийПеремещениеТоваров.БланкиСтрогогоУчета Тогда
		Товары.Очистить();
		ТоварыНаКомиссии.Очистить();
		ВозвратнаяТара.Очистить();
	Иначе
		БланкиСтрогогоУчета.Очистить();
	КонецЕсли;
	
	Если НЕ мУчетнаяПолитика.ЕстьНДС Тогда
		
		// организация - не плательщик НДС. Установим во всех ТЧ признак соответствующего учета НДС
		НеОблНДСДеятельность = Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяХозДеятельность;
		
		Для Каждого СтрокаТЧ Из Товары Цикл
		    СтрокаТЧ.НалоговоеНазначение = НеОблНДСДеятельность;
		КонецЦикла; 
		Для Каждого СтрокаТЧ Из ВозвратнаяТара Цикл
		    СтрокаТЧ.НалоговоеНазначение = НеОблНДСДеятельность;
		КонецЦикла; 
		Для Каждого СтрокаТЧ Из БланкиСтрогогоУчета Цикл
		    СтрокаТЧ.НалоговоеНазначение = НеОблНДСДеятельность;
		КонецЦикла; 
	КонецЕсли; 

КонецПроцедуры // ПередЗаписью

Процедура ОбработкаПроведения(Отказ, РежимПроведения)

	// Дерево значений, содержащее имена необходимых полей в запросе по шапке.
	Перем ДеревоПолейЗапросаПоШапке;
	Перем Заголовок, СтруктураШапкиДокумента;
	Перем ТаблицаПоТоварам, ТаблицаПоТоварамНаКомиссии, ТаблицаПоТаре, ТаблицаПоБланкам;
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКПроведению(ЭтотОбъект);
	Если РучнаяКорректировка Тогда
		Возврат;
	КонецЕсли;
	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначенияБПВызовСервера.ПредставлениеДокументаПриПроведении(Ссылка);
	
	ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента);	

	// Получим данные учетной политики
	ПодготовитьПараметрыУчетнойПолитики(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоТоварамНаКомиссии, ТаблицаПоТаре, ТаблицаПоБланкам, Отказ, Заголовок);
	
	ПроверитьТабличныеЧастиПострочно(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоТоварамНаКомиссии, Отказ);
	
	// Движения по документу
	Если Не Отказ Тогда
		ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоТоварамНаКомиссии, ТаблицаПоТаре, ТаблицаПоБланкам, Отказ, Заголовок);
	КонецЕсли;
	
	Движения.Хозрасчетный.ВыполнитьДействияПередЗаписьюДвижений();
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКЗаписиДвижений(ЭтотОбъект);

КонецПроцедуры // ОбработкаПроведения()

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКОтменеПроведения(ЭтотОбъект);
	Движения.Записать();
	
КонецПроцедуры // ОбработкаУдаленияПроведения

#КонецОбласти 

#Область Проведение

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТоварам - результат запроса по табличной части "Товары",
//  СтруктураШапкиДокумента   - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблица значений.
//
Функция ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента)

	ТаблицаТоваров = РезультатЗапросаПоТоварам.Выгрузить();

	ТаблицаТоваров.Колонки.Добавить("ДоговорКонтрагента");
//	ТаблицаТоваров.Колонки.Добавить("ДокументОприходования");
	ТаблицаТоваров.Колонки.Добавить("Регистратор");

	ТаблицаТоваров.ЗаполнитьЗначения(Неопределено, "ДоговорКонтрагента");
	ТаблицаТоваров.ЗаполнитьЗначения(ЭтотОбъект,   "Регистратор");
	
	ТаблицаТоваров.Колонки.Добавить("НалоговоеНазначениеНовое", Новый ОписаниеТипов("СправочникСсылка.НалоговыеНазначенияАктивовИЗатрат"));
	ТаблицаТоваров.ЗагрузитьКолонку(ТаблицаТоваров.ВыгрузитьКолонку("НалоговоеНазначение") , "НалоговоеНазначениеНовое");
	
	Если мУчетВПродажныхЦенах Тогда
		Если  ((СтруктураШапкиДокумента.ТипСкладаОтправитель = Перечисления.ТипыСкладов.РозничныйМагазин) 
		  ИЛИ (СтруктураШапкиДокумента.ТипСкладаПолучатель = Перечисления.ТипыСкладов.РозничныйМагазин)) Тогда
		  
			ТаблицаТоваров.Колонки.Добавить("РозничнаяЦена");
			ТаблицаТоваров.Колонки.Добавить("УчетнаяЦена");
			ТаблицаТоваров.Колонки.Добавить("РозничнаяЦенаПолучатель");
			
			// Установим параметры запроса
			ПорядокСубконто = Новый Массив();
			ПорядокСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);
			ПорядокСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады);
			
			МассивНоменклатуры = ТаблицаТоваров.ВыгрузитьКолонку("Номенклатура");
			
			Склад = ?(СтруктураШапкиДокумента.ТипСкладаОтправитель = Перечисления.ТипыСкладов.РозничныйМагазин, СтруктураШапкиДокумента.СкладОтправитель, СтруктураШапкиДокумента.СкладПолучатель);
			СкладТипЦенРозничнойТорговли = ?(СтруктураШапкиДокумента.ТипСкладаОтправитель = Перечисления.ТипыСкладов.РозничныйМагазин, СтруктураШапкиДокумента.ТипЦенРозничнойТорговлиОтправитель, СтруктураШапкиДокумента.ТипЦенРозничнойТорговлиПолучатель);
			
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("Склад",               Склад);
			Запрос.УстановитьПараметр("КонецПериода",        СтруктураШапкиДокумента.Дата);
			Запрос.УстановитьПараметр("Организация",         СтруктураШапкиДокумента.Организация);
			Запрос.УстановитьПараметр("Счет",     		     ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахАТТ);
			Запрос.УстановитьПараметр("ПорядокСубконто",     ПорядокСубконто);
			Запрос.УстановитьПараметр("Номенклатура", 	     МассивНоменклатуры);
			Запрос.УстановитьПараметр("НалоговыеНазначения", ТаблицаТоваров.ВыгрузитьКолонку("НалоговоеНазначение"));
			
			Запрос.Текст =
			"ВЫБРАТЬ
			|	Остатки.Субконто1 КАК Номенклатура,
			|	Остатки.НалоговоеНазначение КАК НалоговоеНазначение,
			|	СУММА(Остатки.СуммаОстатокДт) КАК СуммаОстаток,
			|	СУММА(Остатки.КоличествоОстатокДт) КАК КоличествоОстаток
			|ИЗ
			|	РегистрБухгалтерии.Хозрасчетный.Остатки(
			|			&КонецПериода,
			|			Счет = &Счет,
			|			&ПорядокСубконто,
			|			НалоговоеНазначение В (&НалоговыеНазначения)
			|				И Организация = &Организация
			|				И Субконто1 В (&Номенклатура)
			|				И Субконто2 = &Склад) КАК Остатки
			|ГДЕ
			|	Остатки.КоличествоОстаток > 0
			|
			|СГРУППИРОВАТЬ ПО
			|	Остатки.Субконто1,
			|	Остатки.НалоговоеНазначение";
			
			ТаблицаУчетныхЦен = Запрос.Выполнить().Выгрузить();
			ТаблицаУчетныхЦен.Индексы.Добавить("Номенклатура, НалоговоеНазначение");
			
			Для Каждого Строка из ТаблицаТоваров Цикл
				
				НайденныеСтроки = ТаблицаУчетныхЦен.НайтиСтроки(Новый Структура("Номенклатура, НалоговоеНазначение", Строка.Номенклатура, Строка.НалоговоеНазначение));
				Если НайденныеСтроки.Количество()> 0 Тогда
					СтрокаТаблицыЦен = НайденныеСтроки[0];
					Строка.УчетнаяЦена = ?(СтрокаТаблицыЦен.КоличествоОстаток = 0, 0, СтрокаТаблицыЦен.СуммаОстаток / СтрокаТаблицыЦен.КоличествоОстаток);
				Иначе
					Строка.УчетнаяЦена = 0;
				КонецЕсли;
				Строка.РозничнаяЦена = Ценообразование.ПолучитьЦенуНоменклатуры(Строка.Номенклатура, СкладТипЦенРозничнойТорговли, 
																СтруктураШапкиДокумента.Дата, мВалютаРегламентированногоУчета, 1, 1);
																
				Если СтруктураШапкиДокумента.ТипСкладаПолучатель = Перечисления.ТипыСкладов.РозничныйМагазин Тогда 
						
					Строка.РозничнаяЦенаПолучатель = Ценообразование.ПолучитьЦенуНоменклатуры(Строка.Номенклатура, СтруктураШапкиДокумента.ТипЦенРозничнойТорговлиПолучатель, 
																СтруктураШапкиДокумента.Дата, мВалютаРегламентированногоУчета, 1, 1);
				КонецЕсли;
															
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ТаблицаТоваров;

КонецФункции // ПодготовитьТаблицуТоваров()

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоКомТоварам - результат запроса по табличной части "Товары на комиссии",
//  СтруктураШапкиДокумента   - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблица значений.
//
Функция ПодготовитьТаблицуТоваровНаКомиссии(РезультатЗапросаПоКомТоварам, СтруктураШапкиДокумента)

	ТаблицаТоваров = РезультатЗапросаПоКомТоварам.Выгрузить();

	ТаблицаТоваров.Колонки.Добавить("ДоговорКонтрагента");
	ТаблицаТоваров.Колонки.Добавить("ДокументОприходования");
	ТаблицаТоваров.Колонки.Добавить("Регистратор");
    ТаблицаТоваров.Колонки.Добавить("НалоговоеНазначение");
	
	ТаблицаТоваров.Колонки.Добавить("НалоговоеНазначениеНовое", Новый ОписаниеТипов("СправочникСсылка.НалоговыеНазначенияАктивовИЗатрат"));
	ТаблицаТоваров.ЗагрузитьКолонку(ТаблицаТоваров.ВыгрузитьКолонку("НалоговоеНазначение") , "НалоговоеНазначениеНовое");
	
	ТаблицаТоваров.ЗаполнитьЗначения(Неопределено, "ДоговорКонтрагента");
	ТаблицаТоваров.ЗаполнитьЗначения(ЭтотОбъект,   "Регистратор");
    	
	Возврат ТаблицаТоваров;

КонецФункции // ПодготовитьТаблицуТоваровНаКомиссии()

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТаре  - результат запроса по табличной части "ВозвратнаяТара",
//  СтруктураШапкиДокумента - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблица значений.
//
Функция ПодготовитьТаблицуТары(РезультатЗапросаПоТаре, СтруктураШапкиДокумента)

	ТаблицаТары = РезультатЗапросаПоТаре.Выгрузить();

	ТаблицаТары.Колонки.Добавить("ДоговорКонтрагента");
	ТаблицаТары.Колонки.Добавить("ДокументОприходования");
	ТаблицаТары.Колонки.Добавить("Регистратор");
	
	ТаблицаТары.Колонки.Добавить("НалоговоеНазначениеНовое", Новый ОписаниеТипов("СправочникСсылка.НалоговыеНазначенияАктивовИЗатрат"));
	ТаблицаТары.ЗагрузитьКолонку(ТаблицаТары.ВыгрузитьКолонку("НалоговоеНазначение") , "НалоговоеНазначениеНовое");

	ТаблицаТары.ЗаполнитьЗначения(Неопределено, "ДоговорКонтрагента");
	ТаблицаТары.ЗаполнитьЗначения(ЭтотОбъект,   "Регистратор");

	Возврат ТаблицаТары;

КонецФункции // ПодготовитьТаблицуТары()

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоБланкам - результат запроса по табличной части "Бланки",
//  СтруктураШапкиДокумента   - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблица значений.
//
Функция ПодготовитьТаблицуБланков(РезультатЗапросаПоБланкам, СтруктураШапкиДокумента)

	ТаблицаБланков = РезультатЗапросаПоБланкам.Выгрузить();

	ТаблицаБланков.Колонки.Добавить("ДоговорКонтрагента");
	ТаблицаБланков.Колонки.Добавить("ДокументОприходования");
	ТаблицаБланков.Колонки.Добавить("Регистратор");
	
	ТаблицаБланков.Колонки.Добавить("СуммаНоминальная");
	ТаблицаБланков.Колонки.Добавить("КоличествоНоминальное");

	ТаблицаБланков.Колонки.Добавить("НалоговоеНазначениеНовое", Новый ОписаниеТипов("СправочникСсылка.НалоговыеНазначенияАктивовИЗатрат"));
	ТаблицаБланков.ЗагрузитьКолонку(ТаблицаБланков.ВыгрузитьКолонку("НалоговоеНазначение") , "НалоговоеНазначениеНовое");
	
	ТаблицаБланков.ЗаполнитьЗначения(Неопределено, "ДоговорКонтрагента");
	ТаблицаБланков.ЗаполнитьЗначения(ЭтотОбъект,   "Регистратор");

	// Установим параметры запроса
	ПорядокСубконто = Новый Массив();
	ПорядокСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);
	ПорядокСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Склад",           СтруктураШапкиДокумента.Склад);
	Запрос.УстановитьПараметр("КонецПериода",    СтруктураШапкиДокумента.Ссылка.МоментВремени());	
	Запрос.УстановитьПараметр("Организация",     СтруктураШапкиДокумента.Организация);	
	Запрос.УстановитьПараметр("ПорядокСубконто", ПорядокСубконто);
	Запрос.УстановитьПараметр("Счет",     		 ТаблицаБланков.ВыгрузитьКолонку("СчетУчетаЗабалансовыйБУ"));
	Запрос.УстановитьПараметр("Номенклатура", 	 ТаблицаБланков.ВыгрузитьКолонку("Номенклатура"));
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Остатки.Субконто1 КАК Номенклатура,
	|	СУММА(Остатки.СуммаОстатокДт) КАК СуммаОстаток,
	|	СУММА(Остатки.КоличествоОстатокДт) КАК КоличествоОстаток
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			&КонецПериода,
	|			Счет В (&Счет),
	|			&ПорядокСубконто,
	|				Организация = &Организация
	|				И Субконто1 В (&Номенклатура)
	|				И Субконто2 = &Склад) КАК Остатки
	|ГДЕ
	|	Остатки.КоличествоОстаток > 0
	|
	|СГРУППИРОВАТЬ ПО
	|	Остатки.Субконто1";
	
	ТаблицаЦен = Запрос.Выполнить().Выгрузить();
	ТаблицаЦен.Индексы.Добавить("Номенклатура");

	Для Каждого Строка из ТаблицаБланков Цикл
				
		НайденныеСтроки = ТаблицаЦен.НайтиСтроки(Новый Структура("Номенклатура", Строка.Номенклатура));
		Если НайденныеСтроки.Количество()> 0 Тогда
			СтрокаТаблицыЦен = НайденныеСтроки[0];
			Строка.СуммаНоминальная = Строка.Количество * Окр(?(СтрокаТаблицыЦен.КоличествоОстаток = 0, 0, СтрокаТаблицыЦен.СуммаОстаток / СтрокаТаблицыЦен.КоличествоОстаток),2,1);
			Строка.КоличествоНоминальное = СтрокаТаблицыЦен.КоличествоОстаток;	
		Иначе
			Строка.СуммаНоминальная = 0;
			Строка.КоличествоНоминальное = 0;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТаблицаБланков;

КонецФункции // ПодготовитьТаблицуБланков()

// Проверяет правильность заполнения шапки документа, формирует МассивНепроверяемыхРеквизитов для стандартной проверки заполнения.
// Если какой-то из реквизитов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении,
//  МассивНепроверяемыхРеквизитов - массив имен реквизитов, которые не будут проверятся стандартной проверкой заполнения.
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, МассивНепроверяемыхРеквизитов)
	

КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Проверяет правильность заполнения строк табличной части "Товары", формирует МассивНепроверяемыхРеквизитов для стандартной проверки заполнения.
//
// Параметры: 
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении.
//  МассивНепроверяемыхРеквизитов - массив имен реквизитов, которые не будут проверятся стандартной проверкой заполнения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиТовары(СтруктураШапкиДокумента, Отказ, МассивНепроверяемыхРеквизитов)

	ИмяТабличнойЧасти = "Товары";
	
	НТТОтправитель = (СтруктураШапкиДокумента.ТипСкладаОтправитель = Перечисления.ТипыСкладов.НеавтоматизированнаяТорговаяТочка);
	НТТПолучатель  = (СтруктураШапкиДокумента.ТипСкладаПолучатель  = Перечисления.ТипыСкладов.НеавтоматизированнаяТорговаяТочка);
	ОПТОтправитель = (СтруктураШапкиДокумента.ТипСкладаОтправитель = Перечисления.ТипыСкладов.ОптовыйСклад);
	ОПТПолучатель  = (СтруктураШапкиДокумента.ТипСкладаПолучатель  = Перечисления.ТипыСкладов.ОптовыйСклад);
	
	Если СтруктураШапкиДокумента.РозницаВПродажныхЦенах И НТТОтправитель И НТТПолучатель Тогда
		
		МассивНепроверяемыхРеквизитов.Добавить("Товары.Номенклатура");
		МассивНепроверяемыхРеквизитов.Добавить("Товары.Количество");
		МассивНепроверяемыхРеквизитов.Добавить("Товары.ЕдиницаИзмерения");
		
	КонецЕсли;
	
	Если НЕ (СтруктураШапкиДокумента.РозницаВПродажныхЦенах 
		 И СтруктураШапкиДокумента.РазделятьПоСтавкамНДС 
		 И (НТТОтправитель ИЛИ НТТПолучатель)) Тогда
		 
		МассивНепроверяемыхРеквизитов.Добавить("Товары.СтавкаНДСВРознице"); 

	КонецЕсли;
	
	Если НЕ (НЕ СтруктураШапкиДокумента.РозницаВПродажныхЦенах ИЛИ ОПТОтправитель) Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Товары.СчетУчетаБУ");
	КонецЕсли;
	
	Если НЕ (НЕ СтруктураШапкиДокумента.РозницаВПродажныхЦенах ИЛИ ОПТПолучатель) Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Товары.НовыйСчетУчетаБУ");
	КонецЕсли;
	
	Если НЕ СтруктураШапкиДокумента.ЕстьНДС Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Товары.НалоговоеНазначение");	
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиТовары()

// Проверяет правильность заполнения строк табличной части "Товары на комиссии", формирует МассивНепроверяемыхРеквизитов для стандартной проверки заполнения.
//
// Параметры: 
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении.
//  МассивНепроверяемыхРеквизитов - массив имен реквизитов, которые не будут проверятся стандартной проверкой заполнения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиТоварыНаКомиссии(СтруктураШапкиДокумента, Отказ, МассивНепроверяемыхРеквизитов)

	ИмяТабличнойЧасти = "ТоварыНаКомиссии";
	
КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиТоварыНаКомиссии()

// Проверяет правильность заполнения строк табличной части "Возвратная тара", формирует МассивНепроверяемыхРеквизитов для стандартной проверки заполнения.
//
// Параметры: 
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении.
//  МассивНепроверяемыхРеквизитов - массив имен реквизитов, которые не будут проверятся стандартной проверкой заполнения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиВозвратнаяТара(СтруктураШапкиДокумента, Отказ, МассивНепроверяемыхРеквизитов)

	ИмяТабличнойЧасти = "ВозвратнаяТара";
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьВозвратнуюТару") Тогда
		МассивНепроверяемыхРеквизитов.Добавить("ВозвратнаяТара.Номенклатура");
		МассивНепроверяемыхРеквизитов.Добавить("ВозвратнаяТара.Количество");
		МассивНепроверяемыхРеквизитов.Добавить("ВозвратнаяТара.СчетУчетаБУ");
		МассивНепроверяемыхРеквизитов.Добавить("ВозвратнаяТара.НалоговоеНазначение");
	КонецЕсли;
	
	Если НЕ СтруктураШапкиДокумента.ЕстьНДС Тогда
		МассивНепроверяемыхРеквизитов.Добавить("ВозвратнаяТара.НалоговоеНазначение");	
	КонецЕсли;

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиВозвратнаяТара()

// Проверяет правильность заполнения строк табличной части "Бланки", формирует МассивНепроверяемыхРеквизитов для стандартной проверки заполнения.
//
// Параметры: 
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении.
//  МассивНепроверяемыхРеквизитов - массив имен реквизитов, которые не будут проверятся стандартной проверкой заполнения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиБланкиСтрогогоУчета(СтруктураШапкиДокумента, Отказ, МассивНепроверяемыхРеквизитов)

	ИмяТабличнойЧасти = "БланкиСтрогогоУчета";

	Если НЕ СтруктураШапкиДокумента.ЕстьНДС Тогда
		МассивНепроверяемыхРеквизитов.Добавить("БланкиСтрогогоУчета.НалоговоеНазначение");	
	КонецЕсли;

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиБланкиСтрогогоУчета()

Процедура ПроверитьТабличныеЧастиПострочно(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоТоварамНаКомиссии, Отказ)
	
	ЭтоОборудование = (СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПеремещениеТоваров.Оборудование);
	
	Для Каждого СтрокаТаблицы Из ТаблицаПоТоварам Цикл
		
		Если НЕ ЭтоОборудование Тогда
			СтрокаНачалаСообщенияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='В строке номер ""%1"" табличной части ""Товары"": ';uk='У рядку номер ""%1"" табличної частини ""Товари"": '"), СокрЛП(СтрокаТаблицы.НомерСтроки));
		Иначе
			СтрокаНачалаСообщенияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='В строке номер ""%1"" табличной части ""Оборудование"": ';uk='У рядку номер ""%1"" табличної частини ""Устаткування"": '"), СокрЛП(СтрокаТаблицы.НомерСтроки));
		КонецЕсли;	
		
		ПрефиксПоля = "Товары[" + Формат(СтрокаТаблицы.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].";
		
		Если мУчетВПродажныхЦенах Тогда
			Если СтруктураШапкиДокумента.ТипСкладаОтправитель = Перечисления.ТипыСкладов.РозничныйМагазин 
				ИЛИ СтруктураШапкиДокумента.ТипСкладаПолучатель = Перечисления.ТипыСкладов.РозничныйМагазин Тогда
				
				// АТТ в продажных ценах
					
				ДопустимоеОтклонение = СтрокаТаблицы.УчетнаяЦена * 0.001;
				
				Если СтрокаТаблицы.РозничнаяЦена = 0 Тогда
					СтрокаСообщения = СтрокаНачалаСообщенияОбОшибке + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Для товара ""%1"" не установлена розничная цена.';uk='Для товару ""%1"" не встановлена роздрібна ціна.'"), СтрокаТаблицы.Номенклатура);
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения, ЭтотОбъект, ПрефиксПоля + "Номенклатура", "Объект", Отказ);
				ИначеЕсли СтрокаТаблицы.УчетнаяЦена = 0 Тогда
					// Учетная цена неизвестна
				ИначеЕсли СтрокаТаблицы.РозничнаяЦена - СтрокаТаблицы.УчетнаяЦена > ДопустимоеОтклонение
					ИЛИ СтрокаТаблицы.РозничнаяЦена - СтрокаТаблицы.УчетнаяЦена < - ДопустимоеОтклонение Тогда
					СтрокаСообщения = СтрокаНачалаСообщенияОбОшибке + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Для товара ""%1"" розничная цена (%2) не равна учетной цене(%3).
|измените розничную цену или проведите переоценку.';uk='Для товару ""%1"" роздрібна ціна (%2) не дорівнює обліковій ціні(%3).
|змініть роздрібну ціну або проведіть переоцінку.'"), СтрокаТаблицы.Номенклатура, СтрокаТаблицы.РозничнаяЦена, СтрокаТаблицы.УчетнаяЦена);
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения, ЭтотОбъект, ПрефиксПоля + "Номенклатура", "Объект", Отказ);
				КонецЕсли;
				
			КонецЕсли;	
		КонецЕсли;
		
		Если СтруктураШапкиДокумента.ЕстьНДС Тогда
				
			// проверим корректность указания налогового назначения
			Если мУчетВПродажныхЦенах
			   И мРазделятьПоСтавкамНДС
			   И (СтруктураШапкиДокумента.ТипСкладаОтправитель = Перечисления.ТипыСкладов.НеавтоматизированнаяТорговаяТочка ИЛИ СтруктураШапкиДокумента.ТипСкладаПолучатель = Перечисления.ТипыСкладов.НеавтоматизированнаяТорговаяТочка)
			   И НЕ СтрокаТаблицы.СтавкаНДСВРознице.Пустая()
			   И НЕ СтрокаТаблицы.ВидДеятельностиНДС = Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_Пропорционально
			   И НЕ СтрокаТаблицы.ВидДеятельностиНДС = УчетНДС.ПолучитьВидДеятельностиНДС(СтрокаТаблицы.СтавкаНДСВРознице) Тогда
				   
				СтрокаСообщения = СтрокаНачалаСообщенияОбОшибке + НСтр("ru='Указано некорректное налоговое назначение! Вид деятельности НДС не соответствует ставке НДС, указанной в строке';uk='Вказано некоректне податкове призначення! Вид діяльності ПДВ не відповідає ставці ПДВ, вказаній в рядку'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения, ЭтотОбъект, ПрефиксПоля + "НалоговоеНазначение", "Объект", Отказ);
					
			КонецЕсли;
					
		КонецЕсли;
 		
	КонецЦикла;
	

КонецПроцедуры // ПроверитьТабличныеЧастиПострочно()

// Процедура определяет параметры учетной политики
//
Процедура ПодготовитьПараметрыУчетнойПолитики(СтруктураШапкиДокумента, Отказ, Заголовок)
	
	СтруктураШапкиДокумента.Вставить("ЕстьНалогНаПрибыльДо2015",мУчетнаяПолитика.ЕстьНалогНаПрибыльДо2015);
	СтруктураШапкиДокумента.Вставить("ЕстьНДС"           , 	мУчетнаяПолитика.ЕстьНДС);
	СтруктураШапкиДокумента.Вставить("ЕстьЕдиныйНалог"    , мУчетнаяПолитика.ЕстьЕдиныйНалог);
	СтруктураШапкиДокумента.Вставить("ПартионныйУчетБУ",	мУчетнаяПолитика.ПартионныйУчетБУ);
	
КонецПроцедуры // ПодготовитьПараметрыУчетнойПолитики()

// Процедура формирует таблицы документа.
Процедура ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоТоварамНаКомиссии, ТаблицаПоТаре, ТаблицаПоБланкам, Отказ, Заголовок) Экспорт
	
	// Получим необходимые данные для проведения и проверки заполенения данные по табличной части "Товары".
	СтруктураПолей = Новый Структура;
	СтруктураПростыхПолей = Новый Структура;
	СтруктураПолей.Вставить("Номенклатура"       , "Номенклатура");
	СтруктураПолей.Вставить("Количество"         , "Количество * Коэффициент");
	СтруктураПолей.Вставить("Услуга"             , "Номенклатура.Услуга");
	СтруктураПолей.Вставить("БланкСтрогогоУчета" , "Номенклатура.БланкСтрогогоУчета");
	СтруктураПолей.Вставить("Цена"               , "Цена");
	СтруктураПолей.Вставить("СуммаВРознице"      , "СуммаВРознице");
	СтруктураПолей.Вставить("СтавкаНДСВРознице"  , "СтавкаНДСВРознице");
	СтруктураПолей.Вставить("СчетУчетаБУ"        , "СчетУчетаБУ");
	СтруктураПолей.Вставить("Забалансовый"       , "СчетУчетаБУ.Забалансовый");
	СтруктураПолей.Вставить("НовыйСчетУчетаБУ"   , "НовыйСчетУчетаБУ");
	СтруктураПолей.Вставить("НовыйЗабалансовый"  , "НовыйСчетУчетаБУ.Забалансовый");
	СтруктураПолей.Вставить("НалоговоеНазначение", "НалоговоеНазначение");
	СтруктураПолей.Вставить("ВидДеятельностиНДС" , "НалоговоеНазначение.ВидДеятельностиНДС");
	// Поля необходимы для партионного учета
	СтруктураПолей.Вставить("ДокументОприходования",  "ДокументОприходования");
	СтруктураПолей.Вставить("Организация",            "Ссылка.Организация");
	СтруктураПолей.Вставить("Склад",                  "Ссылка.СкладОтправитель");
	СтруктураПолей.Вставить("СкладНовый",             "Ссылка.СкладПолучатель");
	СтруктураПолей.Вставить("КорСчетСписанияБУ",      "НовыйСчетУчетаБУ");
	СтруктураПолей.Вставить("КорСубконтоСписанияБУ1", "Номенклатура");
	СтруктураПолей.Вставить("КорСубконтоСписанияБУ2", "Ссылка.СкладПолучатель");
	СтруктураПолей.Вставить("КорСубконтоСписанияБУ3", "СтавкаНДСВРознице");

	РезультатЗапросаПоТоварам = ОбщегоНазначенияРед12.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураПолей, СтруктураПростыхПолей);

	// Получим необходимые данные для проведения и проверки заполенения данные по 
	// табличной части "Товары на комиссии".
	
	СтруктураПолей = Новый Структура;
	СтруктураПростыхПолей = Новый Структура;
	СтруктураПолей.Вставить("Номенклатура"      , "Номенклатура");
	СтруктураПолей.Вставить("Количество"        , "Количество * Коэффициент");
	СтруктураПолей.Вставить("Услуга"            , "Номенклатура.Услуга");
	СтруктураПолей.Вставить("БланкСтрогогоУчета", "Номенклатура.БланкСтрогогоУчета");
	СтруктураПолей.Вставить("Цена"              , "Цена");
	СтруктураПолей.Вставить("СчетУчетаБУ"       , "СчетУчетаБУ");
	СтруктураПолей.Вставить("Забалансовый"      , "СчетУчетаБУ.Забалансовый");
	СтруктураПолей.Вставить("НовыйСчетУчетаБУ"  , "НовыйСчетУчетаБУ");
	СтруктураПолей.Вставить("НовыйЗабалансовый" , "НовыйСчетУчетаБУ.Забалансовый");
	// Поля необходимы для партионного учета
	СтруктураПолей.Вставить("Организация",            "Ссылка.Организация");
	СтруктураПолей.Вставить("Склад",                  "Ссылка.СкладОтправитель");
	СтруктураПолей.Вставить("СкладНовый",             "Ссылка.СкладПолучатель");
	СтруктураПолей.Вставить("КорСчетСписанияБУ",      "НовыйСчетУчетаБУ");
	СтруктураПолей.Вставить("КорСубконтоСписанияБУ1", "Номенклатура");
	СтруктураПолей.Вставить("КорСубконтоСписанияБУ2", "Ссылка.СкладПолучатель");
	
	РезультатЗапросаПоКомисссионнымТоварам = ОбщегоНазначенияРед12.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "ТоварыНаКомиссии", СтруктураПолей, СтруктураПростыхПолей);
	
	// Получим необходимые данные для проведения и проверки заполенения данные 
	// по табличной части "Возвратная тара".
	СтруктураПолей = Новый Структура;
	СтруктураПростыхПолей = Новый Структура;
	СтруктураПолей.Вставить("Номенклатура"       , "Номенклатура");
	СтруктураПолей.Вставить("Количество"         , "Количество");
	СтруктураПолей.Вставить("Услуга"             , "Номенклатура.Услуга");
	СтруктураПолей.Вставить("БланкСтрогогоУчета" , "Номенклатура.БланкСтрогогоУчета");
	СтруктураПолей.Вставить("СчетУчетаБУ"        , "СчетУчетаБУ");
	СтруктураПолей.Вставить("НовыйСчетУчетаБУ"   , "НовыйСчетУчетаБУ");
	СтруктураПолей.Вставить("НалоговоеНазначение", "НалоговоеНазначение");
	СтруктураПолей.Вставить("ВидДеятельностиНДС" , "НалоговоеНазначение.ВидДеятельностиНДС");
	// Поля необходимы для партионного учета
	СтруктураПолей.Вставить("Организация",            "Ссылка.Организация");
	СтруктураПолей.Вставить("Склад",                  "Ссылка.СкладОтправитель");
	СтруктураПолей.Вставить("СкладНовый",             "Ссылка.СкладПолучатель");	
	СтруктураПолей.Вставить("КорСчетСписанияБУ",      "НовыйСчетУчетаБУ");
	СтруктураПолей.Вставить("КорСубконтоСписанияБУ1", "Номенклатура");
	СтруктураПолей.Вставить("КорСубконтоСписанияБУ2", "Ссылка.СкладПолучатель");

	РезультатЗапросаПоТаре = ОбщегоНазначенияРед12.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "ВозвратнаяТара", СтруктураПолей, СтруктураПростыхПолей);

	// Получим необходимые данные для проведения и проверки заполенения данные по табличной части "Бланки".
	СтруктураПолей = Новый Структура;
	СтруктураПростыхПолей = Новый Структура;
	СтруктураПолей.Вставить("Номенклатура"                , "Номенклатура");
	СтруктураПолей.Вставить("Количество"                  , "Количество * Коэффициент");
	СтруктураПолей.Вставить("Услуга"                      , "Номенклатура.Услуга");
	СтруктураПолей.Вставить("БланкСтрогогоУчета"          , "Номенклатура.БланкСтрогогоУчета");
	СтруктураПолей.Вставить("Цена"                        , "Цена");
	СтруктураПолей.Вставить("СчетУчетаБУ"                 , "СчетУчетаБУ");
	СтруктураПолей.Вставить("НовыйСчетУчетаБУ"            , "НовыйСчетУчетаБУ");
	СтруктураПолей.Вставить("СчетУчетаЗабалансовыйБУ"     , "СчетУчетаЗабалансовыйБУ");
	СтруктураПолей.Вставить("НовыйСчетУчетаЗабалансовыйБУ", "НовыйСчетУчетаЗабалансовыйБУ");
	СтруктураПолей.Вставить("НалоговоеНазначение"     	  , "НалоговоеНазначение");
	СтруктураПолей.Вставить("ВидДеятельностиНДС"     	  , "НалоговоеНазначение.ВидДеятельностиНДС");
	// Поля необходимы для партионного учета
	СтруктураПолей.Вставить("Организация",            "Ссылка.Организация");
	СтруктураПолей.Вставить("Склад",                  "Ссылка.СкладОтправитель");
	СтруктураПолей.Вставить("СкладНовый",             "Ссылка.СкладПолучатель");
	СтруктураПолей.Вставить("КорСчетСписанияБУ",      "НовыйСчетУчетаБУ");
	СтруктураПолей.Вставить("КорСубконтоСписанияБУ1", "Номенклатура");
	СтруктураПолей.Вставить("КорСубконтоСписанияБУ2", "Ссылка.СкладПолучатель");
	
	РезультатЗапросаПоБланкам = ОбщегоНазначенияРед12.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "БланкиСтрогогоУчета", СтруктураПолей, СтруктураПростыхПолей);
		
	// Подготовим таблицы для проведения
	ТаблицаПоТоварам 	       = ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента);
	ТаблицаПоТоварамНаКомиссии = ПодготовитьТаблицуТоваровНаКомиссии(РезультатЗапросаПоКомисссионнымТоварам, СтруктураШапкиДокумента);
	ТаблицаПоТаре 		       = ПодготовитьТаблицуТары(РезультатЗапросаПоТаре, СтруктураШапкиДокумента);
	ТаблицаПоБланкам	       = ПодготовитьТаблицуБланков(РезультатЗапросаПоБланкам, СтруктураШапкиДокумента);
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьВозвратнуюТару") И ТаблицаПоТаре.Количество() > 0 Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru='В настройках параметров учета отключен параметр ""Ведется учет возвратной тары"". Движения по возвратной таре не будут сформированы!';uk='В настройках параметрів обліку вимкнений параметр ""Ведеться облік зворотної тари"". Рухи по зворотній тарі не будуть сформовані!'"
			),	
			ЭтотОбъект, 
			"ВозвратнаяТара", 
			"Объект"
		);
		
		ТаблицаПоТаре.Очистить();
		
	КонецЕсли;
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьБланкиСтрогогоУчета") И ТаблицаПоБланкам.Количество() > 0 Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru='В настройках параметров учета отключен параметр ""Ведется учет бланков строгого учета"". Движения по бланкам строгого учета не будут сформированы!';uk='В настройках параметрів обліку вимкнений параметр ""Ведеться облік бланків суворого обліку"". Рухи бланків суворого обліку не будуть сформовані!'"
			),	
			ЭтотОбъект, 
			"БланкиСтрогогоУчета", 
			"Объект"
		);
		
		ТаблицаПоБланкам.Очистить();
		
	КонецЕсли;
	
	
КонецПроцедуры // ПодготовитьТаблицыДокумента

// Процедура формирует структуру шапки документа и дополнительных полей.
Процедура ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента) Экспорт
	
	// Дерево значений, содержащее имена необходимых полей в запросе по шапке.
	Перем ДеревоПолейЗапросаПоШапке;
	
	СтруктураШапкиДокумента = ОбщегоНазначенияРед12.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	
	СтруктураШапкиДокумента.Вставить("ВалютаДокумента"		, СтруктураШапкиДокумента.ВалютаРегламентированногоУчета);
	СтруктураШапкиДокумента.Вставить("КурсДокумента"		, 1);
	СтруктураШапкиДокумента.Вставить("КратностьДокумента"	, 1);
	
	// Заполним по шапке документа дерево параметров, нужных при проведении.
	ДеревоПолейЗапросаПоШапке = ОбщегоНазначенияРед12.СформироватьДеревоПолейЗапросаПоШапке();
	
	ОбщегоНазначенияРед12.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "СкладОтправитель", "ТипСклада", "ТипСкладаОтправитель");
	ОбщегоНазначенияРед12.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "СкладОтправитель", "ТипЦенРозничнойТорговли", "ТипЦенРозничнойТорговлиОтправитель");
	ОбщегоНазначенияРед12.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "СкладПолучатель" , "ТипСклада", "ТипСкладаПолучатель");
	ОбщегоНазначенияРед12.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "СкладПолучатель" , "ТипЦенРозничнойТорговли", "ТипЦенРозничнойТорговлиПолучатель");

	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа
	СтруктураШапкиДокумента = УправлениеЗапасами.СформироватьЗапросПоДеревуПолей(ЭтотОбъект, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета);
	
	СтруктураШапкиДокумента.Вставить("Склад", СкладОтправитель);
	
КонецПроцедуры // ПодготовитьСтруктуруШапкиДокумента()

// По результату запроса по шапке и табличным частям документа формирует движения по регистрам
//
// Параметры: 
//  РежимПроведения            - режим проведения документа (оперативный или неоперативный)
//  СтруктураШапкиДокумента    - выборка из результата запроса по шапке документа
//  ТаблицаПоТоварам           - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  ТаблицаПоТоварамНаКомиссии - таблица значений, содержащая данные для проведения и проверки ТЧ ТаблицаПоТоварамНаКомиссии
//  ТаблицаПоТаре              - таблица значений, содержащая данные для проведения и проверки ТЧ "Возвратная тара"
//  ТаблицаПоБланкам           - таблица значений, содержащая данные для проведения и проверки ТЧ БланкиСтрогогоУчета
//  Отказ                      - флаг отказа в проведении
//  Заголовок                  - строка, заголовок сообщения об ошибке проведения.
//
Процедура ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоТоварамНаКомиссии, ТаблицаПоТаре, ТаблицаПоБланкам, Отказ, Заголовок)
	
	Если мУчетВПродажныхЦенах Тогда
				
		// Если розница
		ПроводкиБУ = Движения.Хозрасчетный;
		
		// Из опта
		Если СтруктураШапкиДокумента.ТипСкладаОтправитель = Перечисления.ТипыСкладов.ОптовыйСклад Тогда
						
			// В розницу
			Если НЕ СтруктураШапкиДокумента.ТипСкладаПолучатель = Перечисления.ТипыСкладов.ОптовыйСклад Тогда
				
				УправлениеЗапасамиПартионныйУчет.ДвижениеПартийТоваров(
					ТаблицаПоТоварам, 
					Отказ, 
					, 
					НСтр("ru='Перемещение в розницу';uk='Переміщення в роздріб'",Локализация.КодЯзыкаИнформационнойБазы())
				);
				
				НТТ = (СтруктураШапкиДокумента.ТипСкладаПолучатель = Перечисления.ТипыСкладов.НеавтоматизированнаяТорговаяТочка);
				АТТ = (СтруктураШапкиДокумента.ТипСкладаПолучатель = Перечисления.ТипыСкладов.РозничныйМагазин);
				
				// Формирование торговой наценки
				Для Каждого Строка Из ТаблицаПоТоварам Цикл
					
					// В АТТ с учетом по партиям
					Если АТТ И БухгалтерскийУчетВызовСервераПовтИсп.НаСчетеВедетсяПартионныйУчет(ПланыСчетов.Хозрасчетный.ТорговаяНаценкаАТТ) Тогда	
						
						Для Каждого Партия Из Строка.СписанныеПартииБУ Цикл
							
							ТорговаяНаценка   = Окр(Строка.РозничнаяЦена * Партия.Количество,2,1) - Партия.СуммаСписания;
							ТорговаяНаценкаНУ = Окр(Строка.РозничнаяЦена * Партия.Количество,2,1) - Партия.СуммаСписанияНУ;
							СчетНаценки = ПланыСчетов.Хозрасчетный.ТорговаяНаценкаАТТ;
							
							Если ТорговаяНаценка <> 0 ИЛИ ТорговаяНаценкаНУ <> 0 Тогда
								
								Проводка = ПроводкиБУ.Добавить();
								
								Проводка.Период      = СтруктураШапкиДокумента.Дата;
								Проводка.Организация = СтруктураШапкиДокумента.Организация;
								Проводка.Содержание  = НСтр("ru='Торговая наценка';uk='Торгова націнка'", Локализация.КодЯзыкаИнформационнойБазы());
								
								Проводка.СчетДт      = Строка.КорСчетСписанияБУ;
								Проводка.СчетКт      = СчетНаценки;
								
								БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Склады",  СтруктураШапкиДокумента.СкладПолучатель);
								БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Склады",  СтруктураШапкиДокумента.СкладПолучатель);
								
								БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Номенклатура",  Строка.Номенклатура);
								БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Номенклатура",  Строка.Номенклатура);
								
								Если СтруктураШапкиДокумента.ПартионныйУчетБУ Тогда
									БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Партии",  Партия.Партия);
									БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Партии",  Партия.Партия);
								КонецЕсли;
								
								Проводка.Сумма       = ТорговаяНаценка;
								
								Проводка.НалоговоеНазначениеДт = Строка.НалоговоеНазначение;
								Проводка.НалоговоеНазначениеКт = Строка.НалоговоеНазначение;
								Если   СтруктураШапкиДокумента.ЕстьНалогНаПрибыльДо2015
									 И Строка.НалоговоеНазначение <> Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяНеХозДеятельность Тогда
									Проводка.СуммаНУДт = ТорговаяНаценкаНУ;
									Проводка.СуммаНУКт = ТорговаяНаценкаНУ;
								КонецЕсли;
								
							КонецЕсли;
						КонецЦикла;
						
					Иначе 						
						// бухгалтерская наценка
						СуммаСписания = 0;
						СуммаСписанияНУ = 0;
						Для Каждого Партия Из Строка.СписанныеПартииБУ Цикл
							СуммаСписания = СуммаСписания + Партия.СуммаСписания;
							СуммаСписанияНУ = СуммаСписанияНУ + Партия.СуммаСписанияНУ;
						КонецЦикла;
						
						Если АТТ Тогда
							ТорговаяНаценка = Окр(Строка.РозничнаяЦена * Строка.Количество,2,1) - СуммаСписания;
							ТорговаяНаценкаНУ = Окр(Строка.РозничнаяЦена * Строка.Количество,2,1) - СуммаСписанияНУ;
							СчетНаценки = ПланыСчетов.Хозрасчетный.ТорговаяНаценкаАТТ;
						Иначе
							ТорговаяНаценка = Строка.СуммаВРознице - СуммаСписания;
							ТорговаяНаценкаНУ = Строка.СуммаВРознице - СуммаСписанияНУ;
							СчетНаценки = ПланыСчетов.Хозрасчетный.ТорговаяНаценкаНТТ;
						КонецЕсли;
						
						Если ТорговаяНаценка <> 0 ИЛИ ТорговаяНаценкаНУ <> 0 Тогда
							
							Проводка = ПроводкиБУ.Добавить();
							
							Проводка.Период      = СтруктураШапкиДокумента.Дата;
							Проводка.Организация = СтруктураШапкиДокумента.Организация;
							Проводка.Содержание  = НСтр("ru='Торговая наценка';uk='Торгова націнка'", Локализация.КодЯзыкаИнформационнойБазы());
							
							Проводка.СчетДт      = Строка.КорСчетСписанияБУ;
							Проводка.СчетКт      = СчетНаценки;
							
							БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Склады",  СтруктураШапкиДокумента.СкладПолучатель);
							БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Склады",  СтруктураШапкиДокумента.СкладПолучатель);
							
							БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Номенклатура",  Строка.Номенклатура);
							БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Номенклатура",  Строка.Номенклатура);
							
							Если НТТ И мРазделятьПоСтавкамНДС Тогда
								БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "СтавкиНДС",  Строка.КорСубконтоСписанияБУ3);
								БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "СтавкиНДС",  Строка.КорСубконтоСписанияБУ3);
							КонецЕсли;
							
							Проводка.Сумма       = ТорговаяНаценка;
							
							Проводка.НалоговоеНазначениеДт = Строка.НалоговоеНазначение;
							Проводка.НалоговоеНазначениеКт = Строка.НалоговоеНазначение;
							Если   СтруктураШапкиДокумента.ЕстьНалогНаПрибыльДо2015
								 И Строка.НалоговоеНазначение <> Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяНеХозДеятельность Тогда
								Проводка.СуммаНУДт = ТорговаяНаценкаНУ;
								Проводка.СуммаНУКт = ТорговаяНаценкаНУ;
							КонецЕсли;
							
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЦикла;
				
			Иначе 
				// В опт
				
				УправлениеЗапасамиПартионныйУчет.ДвижениеПартийТоваров(
					ТаблицаПоТоварам, 
					Отказ, 
					, 
					НСтр("ru='Перемещение ТМЦ';uk='Переміщення ТМЦ'", Локализация.КодЯзыкаИнформационнойБазы())
				);
				
			КонецЕсли;
			
		// Из АТТ
		ИначеЕсли СтруктураШапкиДокумента.ТипСкладаОтправитель = Перечисления.ТипыСкладов.РозничныйМагазин Тогда
			
			// Спишем торговую наценку
			ТаблицаНаценок = УправлениеЗапасамиПартионныйУчет.ТорговаяНаценкаАТТ(
									Ссылка, 
									СтруктураШапкиДокумента.СкладОтправитель, 
									ТаблицаПоТоварам.ВыгрузитьКолонку("Номенклатура"), 
									ТаблицаПоТоварам.ВыгрузитьКолонку("НалоговоеНазначение")
							 );
							 
			СчетНаценки = ПланыСчетов.Хозрасчетный.ТорговаяНаценкаАТТ;
			
			ПолучательНТТ = (СтруктураШапкиДокумента.ТипСкладаПолучатель = Перечисления.ТипыСкладов.НеавтоматизированнаяТорговаяТочка);
			ПолучательАТТ = (СтруктураШапкиДокумента.ТипСкладаПолучатель = Перечисления.ТипыСкладов.РозничныйМагазин);
			ПолучательОПТ = (СтруктураШапкиДокумента.ТипСкладаПолучатель = Перечисления.ТипыСкладов.ОптовыйСклад);
            
			УправлениеЗапасамиПартионныйУчет.ДвижениеПартийТоваров(
												ТаблицаПоТоварам, 
												Отказ,
												, 
												?(ПолучательОПТ, 
													НСтр("ru='Возврат из розницы';uk='Повернення з роздробу'", Локализация.КодЯзыкаИнформационнойБазы()), 
													НСтр("ru='Перемещение ТМЦ';uk='Переміщення ТМЦ'",Локализация.КодЯзыкаИнформационнойБазы())
									  			)
							       			 );
			
			Для Каждого Строка Из ТаблицаПоТоварам Цикл
				
				Если ПолучательАТТ Тогда
					ПолучательСчетНаценки = ПланыСчетов.Хозрасчетный.ТорговаяНаценкаАТТ;
				ИначеЕсли ПолучательНТТ Тогда
					ПолучательСчетНаценки = ПланыСчетов.Хозрасчетный.ТорговаяНаценкаНТТ;
				Иначе //ПолучательОПТ
					ПолучательСчетНаценки = Строка.КорСчетСписанияБУ;
				КонецЕсли;
				
				Для Каждого Партия Из Строка.СписанныеПартииБУ Цикл
					
					СтруктураОтбора = Новый Структура;
					СтруктураОтбора.Вставить("Номенклатура",		Строка.Номенклатура);
					СтруктураОтбора.Вставить("Партия",				Партия.Партия);
					СтруктураОтбора.Вставить("НалоговоеНазначение", Строка.НалоговоеНазначение);
					
					СтрокаТаблицыНаценок = ТаблицаНаценок.НайтиСтроки(СтруктураОтбора);
					
					Сумма = Строка.РозничнаяЦена * Партия.Количество;
					
					Если СтрокаТаблицыНаценок.Количество() = 0 Тогда
						ПокупнаяЦена = Сумма;
					ИначеЕсли НЕ СтрокаТаблицыНаценок[0].ПС = 0 Тогда
						СуммаНаценки = СтрокаТаблицыНаценок[0].ТН * Сумма / (СтрокаТаблицыНаценок[0].ПС);
						ПокупнаяЦена = Сумма - СуммаНаценки;
					Иначе
						ПокупнаяЦена = 0;
					КонецЕсли;
					
					Если НЕ СтруктураШапкиДокумента.ЕстьНалогНаПрибыльДо2015 = Истина Тогда
						ПокупнаяЦенаНУ = 0;
					ИначеЕсли СтрокаТаблицыНаценок.Количество() = 0 Тогда
						ПокупнаяЦенаНУ = Сумма;						
					ИначеЕсли НЕ СтрокаТаблицыНаценок[0].ПС_НУ = 0 Тогда
						СуммаНаценкиНУ = СтрокаТаблицыНаценок[0].ТН_НУ * Сумма / (СтрокаТаблицыНаценок[0].ПС_НУ);
						ПокупнаяЦенаНУ = Сумма - СуммаНаценкиНУ;
					Иначе
						ПокупнаяЦенаНУ = 0;
					КонецЕсли;
					
					Если    Сумма - ПокупнаяЦена <> 0
						ИЛИ Сумма - ПокупнаяЦенаНУ <> 0 Тогда
						
						Если  НЕ ПолучательАТТ
							И НЕ ПолучательНТТ Тогда
							
							// опт
							// наценку спишем в корреспонденции со счетом учета в АТТ, двумя проводками
							Проводка = ПроводкиБУ.Добавить();
							Проводка.Период      = СтруктураШапкиДокумента.Дата;
							Проводка.Организация = СтруктураШапкиДокумента.Организация;
							Проводка.Содержание  = НСтр("ru='Торговая наценка';uk='Торгова націнка'", Локализация.КодЯзыкаИнформационнойБазы());
							
							Проводка.СчетДт      = ПолучательСчетНаценки;
							Проводка.СчетКт      = Строка.СчетУчетаБУ; 		
							
							БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Номенклатура",  Строка.Номенклатура);
							БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Склады",  СтруктураШапкиДокумента.СкладПолучатель);
							Если СтруктураШапкиДокумента.ПартионныйУчетБУ Тогда
								БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Партии",  Партия.Партия);
							КонецЕсли;
							
							Если ПолучательНТТ И мРазделятьПоСтавкамНДС Тогда
								БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "СтавкиНДС",  Строка.СтавкаНДСВРознице);
							КонецЕсли;
							
							БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Номенклатура",  Строка.Номенклатура);
							БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Склады",  СтруктураШапкиДокумента.СкладОтправитель);
							Если СтруктураШапкиДокумента.ПартионныйУчетБУ Тогда
								БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Партии",  Партия.Партия);
							КонецЕсли;
							
							Проводка.Сумма                     = ПокупнаяЦена - Сумма;
									
							Проводка.НалоговоеНазначениеДт = Строка.НалоговоеНазначение;
							Проводка.НалоговоеНазначениеКт = Строка.НалоговоеНазначение;
							
							Если   СтруктураШапкиДокумента.ЕстьНалогНаПрибыльДо2015
								 И Строка.НалоговоеНазначение <> Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяНеХозДеятельность Тогда
								Проводка.СуммаНУДт = ПокупнаяЦенаНУ - Сумма;
								Проводка.СуммаНУКт = ПокупнаяЦенаНУ - Сумма;
							КонецЕсли;
							
							// вторая проводка
							Проводка = ПроводкиБУ.Добавить();
							
							Проводка.Период      = СтруктураШапкиДокумента.Дата;
							Проводка.Организация = СтруктураШапкиДокумента.Организация;
							Проводка.Содержание  = НСтр("ru='Торговая наценка';uk='Торгова націнка'", Локализация.КодЯзыкаИнформационнойБазы());
							
							Проводка.СчетДт      = СчетНаценки;
							Проводка.СчетКт      = Строка.СчетУчетаБУ; 		
							
							БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Номенклатура",  Строка.Номенклатура);
							БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Склады",  СтруктураШапкиДокумента.СкладОтправитель);
							Если СтруктураШапкиДокумента.ПартионныйУчетБУ Тогда
								БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Партии",  Партия.Партия);
							КонецЕсли;
							
							Если ПолучательНТТ И мРазделятьПоСтавкамНДС Тогда
								БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "СтавкиНДС",  Строка.СтавкаНДСВРознице);
							КонецЕсли;
							
							БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Номенклатура",  Строка.Номенклатура);
							БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Склады",  СтруктураШапкиДокумента.СкладОтправитель);
							Если СтруктураШапкиДокумента.ПартионныйУчетБУ Тогда
								БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Партии",  Партия.Партия);
							КонецЕсли;
							
							Проводка.Сумма                     = Сумма - ПокупнаяЦена;
									
							Проводка.НалоговоеНазначениеДт = Строка.НалоговоеНазначение;
							Проводка.НалоговоеНазначениеКт = Строка.НалоговоеНазначение;
							Если   СтруктураШапкиДокумента.ЕстьНалогНаПрибыльДо2015
								 И Строка.НалоговоеНазначение <> Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяНеХозДеятельность Тогда
								Проводка.СуммаНУДт = Сумма - ПокупнаяЦенаНУ;
								Проводка.СуммаНУКт = Сумма - ПокупнаяЦенаНУ;
							КонецЕсли;
							
						Иначе	
							// розница
							// в начале отсторнируем продажную стоимость на сумму наценки на складе отправителе
							
							Проводка = ПроводкиБУ.Добавить();
							Проводка.Период      = СтруктураШапкиДокумента.Дата;
							Проводка.Организация = СтруктураШапкиДокумента.Организация;
							Проводка.Содержание  = НСтр("ru='Торговая наценка (корректировка продажной стоимости на стоимость наценки)';uk='Торгова націнка (коригування продажнної вартості на вартість списання)'", Локализация.КодЯзыкаИнформационнойБазы());
							
							Проводка.СчетДт      = Строка.КорСчетСписанияБУ;
							Проводка.СчетКт      = Строка.СчетУчетаБУ;
							
							БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Номенклатура",  Строка.Номенклатура);
							БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Склады",  СтруктураШапкиДокумента.СкладПолучатель);
							Если СтруктураШапкиДокумента.ПартионныйУчетБУ Тогда
								БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Партии",  Партия.Партия);
							КонецЕсли;
							
							Если ПолучательНТТ И мРазделятьПоСтавкамНДС Тогда
								БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "СтавкиНДС",  Строка.СтавкаНДСВРознице);
							КонецЕсли;
							
							БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Номенклатура",  Строка.Номенклатура);
							БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Склады",  СтруктураШапкиДокумента.СкладОтправитель);
							Если СтруктураШапкиДокумента.ПартионныйУчетБУ Тогда
								БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Партии",  Партия.Партия);
							КонецЕсли;
							
							Проводка.Сумма = -(Сумма - ПокупнаяЦена);
									
							Проводка.НалоговоеНазначениеДт = Строка.НалоговоеНазначение;
							Проводка.НалоговоеНазначениеКт = Строка.НалоговоеНазначение;
							Если   СтруктураШапкиДокумента.ЕстьНалогНаПрибыльДо2015
								 И Строка.НалоговоеНазначение <> Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяНеХозДеятельность Тогда
								Проводка.СуммаНУДт = -(Сумма - ПокупнаяЦенаНУ);
								Проводка.СуммаНУКт = -(Сумма - ПокупнаяЦенаНУ);
							КонецЕсли;
							
							// теперь сделаем расход наценки по складу-отправителю
							Проводка = ПроводкиБУ.Добавить();
							
							Проводка.Период      = СтруктураШапкиДокумента.Дата;
							Проводка.Организация = СтруктураШапкиДокумента.Организация;
							Проводка.Содержание  = НСтр("ru='Торговая наценка (списание наценки при перемещении)';uk='Торгова націнка (списання націнки при переміщенні)'", Локализация.КодЯзыкаИнформационнойБазы());
							
							Проводка.СчетДт      = СчетНаценки;
							Проводка.СчетКт      = Строка.СчетУчетаБУ;
							
							БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Номенклатура",  Строка.Номенклатура);
							БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Склады",  СтруктураШапкиДокумента.СкладОтправитель);
							Если СтруктураШапкиДокумента.ПартионныйУчетБУ Тогда
								БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Партии",  Партия.Партия);
							КонецЕсли;
							
							Если ПолучательНТТ И мРазделятьПоСтавкамНДС Тогда
								БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "СтавкиНДС",  Строка.СтавкаНДСВРознице);
							КонецЕсли;
							
							БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Номенклатура",  Строка.Номенклатура);
							БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Склады",  СтруктураШапкиДокумента.СкладОтправитель);
							Если СтруктураШапкиДокумента.ПартионныйУчетБУ Тогда
								БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Партии",  Партия.Партия);
							КонецЕсли;
							
							Проводка.Сумма = Сумма - ПокупнаяЦена;
									
							Проводка.НалоговоеНазначениеДт = Строка.НалоговоеНазначение;
							Проводка.НалоговоеНазначениеКт = Строка.НалоговоеНазначение;
							Если   СтруктураШапкиДокумента.ЕстьНалогНаПрибыльДо2015
								 И Строка.НалоговоеНазначение <> Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяНеХозДеятельность Тогда
								Проводка.СуммаНУДт = Сумма - ПокупнаяЦенаНУ;
								Проводка.СуммаНУКт = Сумма - ПокупнаяЦенаНУ;
							КонецЕсли;
							
							// теперь сделаем приход наценки по складу-получателю
							Проводка = ПроводкиБУ.Добавить();
							
							Проводка.Период      = СтруктураШапкиДокумента.Дата;
							Проводка.Организация = СтруктураШапкиДокумента.Организация;
							Проводка.Содержание  = НСтр("ru='Торговая наценка';uk='Торгова націнка'", Локализация.КодЯзыкаИнформационнойБазы());
							
							Проводка.СчетДт      = Строка.КорСчетСписанияБУ;
							Проводка.СчетКт      = ПолучательСчетНаценки;
							
							БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Номенклатура",  Строка.Номенклатура);
							БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Склады",  СтруктураШапкиДокумента.СкладПолучатель);
							Если СтруктураШапкиДокумента.ПартионныйУчетБУ Тогда
								БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Партии",  Партия.Партия);
							КонецЕсли;
							
							Если ПолучательНТТ И мРазделятьПоСтавкамНДС Тогда
								БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "СтавкиНДС",  Строка.СтавкаНДСВРознице);
							КонецЕсли;
							
							БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Номенклатура",  Строка.Номенклатура);
							БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Склады",  СтруктураШапкиДокумента.СкладПолучатель);
							Если СтруктураШапкиДокумента.ПартионныйУчетБУ Тогда
								БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Партии",  Партия.Партия);
							КонецЕсли;
							
							Проводка.Сумма                     = Сумма - ПокупнаяЦена;
									
							Проводка.НалоговоеНазначениеДт = Строка.НалоговоеНазначение;
							Проводка.НалоговоеНазначениеКт = Строка.НалоговоеНазначение;
							Если   СтруктураШапкиДокумента.ЕстьНалогНаПрибыльДо2015
								 И Строка.НалоговоеНазначение <> Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяНеХозДеятельность Тогда
								Проводка.СуммаНУДт = Сумма - ПокупнаяЦенаНУ;
								Проводка.СуммаНУКт = Сумма - ПокупнаяЦенаНУ;
							КонецЕсли;
							
						КонецЕсли;
					КонецЕсли;
					
					// Автоматическая переоценка при поступлении в АТТ
					Если ПолучательАТТ И (НЕ Строка.РозничнаяЦенаПолучатель = 0) И (НЕ Строка.РозничнаяЦена = Строка.РозничнаяЦенаПолучатель) Тогда
						
						СуммаПереоценки = (Строка.РозничнаяЦенаПолучатель - Строка.РозничнаяЦена) * Партия.Количество;
						
						СуммаПереоценкиНУ = 0;
						Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыльДо2015 = Истина Тогда
							СуммаПереоценкиНУ = СуммаПереоценки;						
						КонецЕсли;
						
						Проводка = ПроводкиБУ.Добавить();
						
						Проводка.Период      = СтруктураШапкиДокумента.Дата;
						Проводка.Организация = СтруктураШапкиДокумента.Организация;
						Проводка.Содержание  = НСтр("ru='Переоценка товаров';uk='Переоцінка товарів'", Локализация.КодЯзыкаИнформационнойБазы());
						
						Проводка.СчетДт      = Строка.КорСчетСписанияБУ;
						Проводка.СчетКт      = ПланыСчетов.Хозрасчетный.ТорговаяНаценкаАТТ;
						
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Склады",  СтруктураШапкиДокумента.СкладПолучатель);
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Склады",  СтруктураШапкиДокумента.СкладПолучатель);
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Номенклатура",  Строка.Номенклатура);
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Номенклатура",  Строка.Номенклатура);
						Если (СтруктураШапкиДокумента.ПартионныйУчетБУ) Тогда
							БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Партии",  Партия.Партия);
							БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Партии",  Партия.Партия);
						КонецЕсли;
						
						Проводка.Сумма       = СуммаПереоценки;
						
						Проводка.НалоговоеНазначениеДт = Строка.НалоговоеНазначение;
						Проводка.НалоговоеНазначениеКт = Строка.НалоговоеНазначение;
						Проводка.СуммаНУДт = СуммаПереоценкиНУ;
						Проводка.СуммаНУКт = СуммаПереоценкиНУ;
					КонецЕсли;
					
				КонецЦикла;
			КонецЦикла;
						
		// Из НТТ
		ИначеЕсли СтруктураШапкиДокумента.ТипСкладаОтправитель = Перечисления.ТипыСкладов.НеавтоматизированнаяТорговаяТочка Тогда
			
			ТаблицаНаценок  = УправлениеЗапасамиПартионныйУчет.ТорговаяНаценкаНТТ(
								Ссылка, 
								СкладОтправитель, 
								ТаблицаПоТоварам.ВыгрузитьКолонку("НалоговоеНазначение"), 
								мРазделятьПоСтавкамНДС
							);
			
			СчетНаценки 	= ПланыСчетов.Хозрасчетный.ТорговаяНаценкаНТТ;
			
			ПолучательНТТ = (СтруктураШапкиДокумента.ТипСкладаПолучатель = Перечисления.ТипыСкладов.НеавтоматизированнаяТорговаяТочка);
			ПолучательАТТ = (СтруктураШапкиДокумента.ТипСкладаПолучатель = Перечисления.ТипыСкладов.РозничныйМагазин);
			ПолучательОПТ = (СтруктураШапкиДокумента.ТипСкладаПолучатель = Перечисления.ТипыСкладов.ОптовыйСклад);
			
			Для Каждого Строка Из ТаблицаПоТоварам Цикл
								
				Если ПолучательАТТ Тогда
					ПолучательСчетНаценки = ПланыСчетов.Хозрасчетный.ТорговаяНаценкаАТТ;
				ИначеЕсли ПолучательНТТ Тогда
					ПолучательСчетНаценки = ПланыСчетов.Хозрасчетный.ТорговаяНаценкаНТТ;
				Иначе //ПолучательОПТ
					ПолучательСчетНаценки = Неопределено;
				КонецЕсли;
				
				Если мРазделятьПоСтавкамНДС Тогда
					ТаблицаНаценок.НайтиСтроки(Новый Структура("СтавкиНДС, НалоговоеНазначение", Строка.СтавкаНДСВРознице, Строка.НалоговоеНазначение));
					Если ТаблицаНаценок.Количество() > 0 Тогда
						СтрокаТаблицыНаценок = ТаблицаНаценок[0];
					Иначе
						СтрокаТаблицыНаценок = Неопределено;
					КонецЕсли;
				Иначе
					СтрокаТаблицыНаценок = ?(ТаблицаНаценок.Количество() > 0, ТаблицаНаценок[0], Неопределено);
				КонецЕсли;
				
				Сумма = Строка.СуммаВРознице;
				
				Если СтрокаТаблицыНаценок = Неопределено Тогда
					ПокупнаяЦена = Сумма;
				ИначеЕсли НЕ СтрокаТаблицыНаценок.ПС = 0 Тогда
					СуммаНаценки = СтрокаТаблицыНаценок.ТН * Сумма / (СтрокаТаблицыНаценок.ПС);
					ПокупнаяЦена = Сумма - СуммаНаценки;
				Иначе
					ПокупнаяЦена = 0;
				КонецЕсли;
				
				Если НЕ СтруктураШапкиДокумента.ЕстьНалогНаПрибыльДо2015 = Истина Тогда
					ПокупнаяЦенаНУ = 0;
				ИначеЕсли СтрокаТаблицыНаценок = Неопределено Тогда
					ПокупнаяЦенаНУ = Сумма;
				ИначеЕсли НЕ СтрокаТаблицыНаценок.ПС_НУ = 0 Тогда
					СуммаНаценкиНУ = СтрокаТаблицыНаценок.ТН_НУ * Сумма / (СтрокаТаблицыНаценок.ПС_НУ);
					ПокупнаяЦенаНУ = Сумма - СуммаНаценкиНУ;
				Иначе
					ПокупнаяЦенаНУ = 0;
				КонецЕсли;
				
				// Спишем товар из розницы
				Проводка = ПроводкиБУ.Добавить();
				
				Проводка.Период      = СтруктураШапкиДокумента.Дата;
				Проводка.Организация = СтруктураШапкиДокумента.Организация;
				Проводка.Содержание  = ?(ПолучательОПТ, НСтр("ru='Возврат из розницы';uk='Повернення з роздробу'",Локализация.КодЯзыкаИнформационнойБазы()), НСтр("ru='Перемещение ТМЦ';uk='Переміщення ТМЦ'", Локализация.КодЯзыкаИнформационнойБазы()));
				
				Проводка.СчетДт      = Строка.КорСчетСписанияБУ;
				Проводка.СчетКт      = Строка.СчетУчетаБУ;
				
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 	"Номенклатура",  Строка.Номенклатура);
                БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт,	"Склады",  СтруктураШапкиДокумента.СкладПолучатель);
				Если СтруктураШапкиДокумента.ПартионныйУчетБУ Тогда
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 	"Партии",  Ссылка);
				КонецЕсли;
				Если ПолучательНТТ И мРазделятьПоСтавкамНДС Тогда
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт,"СтавкиНДС",  Строка.СтавкаНДСВРознице);
				КонецЕсли;
				
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 	"Склады",  СтруктураШапкиДокумента.СкладОтправитель);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 	"Номенклатура",  Строка.Номенклатура);
				Если мРазделятьПоСтавкамНДС Тогда
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт,"СтавкиНДС",  Строка.СтавкаНДСВРознице);
				КонецЕсли;
				
				Сумма = Строка.СуммаВРознице;
				Проводка.КоличествоДт  = Строка.Количество;				
				Проводка.Сумма         = ПокупнаяЦена;
				
				Проводка.НалоговоеНазначениеДт = Строка.НалоговоеНазначение;
				Проводка.НалоговоеНазначениеКт = Строка.НалоговоеНазначение;
				Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыльДо2015 = Истина Тогда
					Проводка.СуммаНУДт = ПокупнаяЦенаНУ;
					Проводка.СуммаНУКт = ПокупнаяЦенаНУ;
				КонецЕсли;
				
				// Спишем торговую наценку
				Если    Сумма - ПокупнаяЦена   <> 0
					ИЛИ Сумма - ПокупнаяЦенаНУ <> 0 Тогда
					
					Проводка = ПроводкиБУ.Добавить();
					
					Проводка.Период      = СтруктураШапкиДокумента.Дата;
					Проводка.Организация = СтруктураШапкиДокумента.Организация;
					Проводка.Содержание  = НСтр("ru='Торговая наценка';uk='Торгова націнка'", Локализация.КодЯзыкаИнформационнойБазы());
					
					Проводка.СчетДт      = СчетНаценки;
					Проводка.СчетКт      = Строка.СчетУчетаБУ;
					
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Склады",  	  СтруктураШапкиДокумента.СкладОтправитель);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Номенклатура",  Строка.Номенклатура);
					Если мРазделятьПоСтавкамНДС Тогда
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "СтавкиНДС",  Строка.СтавкаНДСВРознице);
					КонецЕсли;
					
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Склады",  СтруктураШапкиДокумента.СкладОтправитель);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Номенклатура",  Строка.Номенклатура);
					Если мРазделятьПоСтавкамНДС Тогда
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "СтавкиНДС",  Строка.СтавкаНДСВРознице);
					КонецЕсли;
					
					Проводка.Сумма  = Сумма - ПокупнаяЦена;
					
					Проводка.НалоговоеНазначениеДт = Строка.НалоговоеНазначение;
					Проводка.НалоговоеНазначениеКт = Строка.НалоговоеНазначение;
					Если   СтруктураШапкиДокумента.ЕстьНалогНаПрибыльДо2015
						 И Строка.НалоговоеНазначение <> Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяНеХозДеятельность Тогда
						Проводка.СуммаНУДт = Сумма - ПокупнаяЦенаНУ;
						Проводка.СуммаНУКт = Сумма - ПокупнаяЦенаНУ;
					КонецЕсли;

					Если НЕ ПолучательСчетНаценки = Неопределено 
						 И (    Сумма - ПокупнаяЦена   <> 0
						    ИЛИ Сумма - ПокупнаяЦенаНУ <> 0) Тогда
					    // при необходимости перебрасываем наценку
						Проводка = ПроводкиБУ.Добавить();
						
						Проводка.Период      = СтруктураШапкиДокумента.Дата;
						Проводка.Организация = СтруктураШапкиДокумента.Организация;
						Проводка.Содержание  = НСтр("ru='Торговая наценка';uk='Торгова націнка'", Локализация.КодЯзыкаИнформационнойБазы());
						
						Проводка.СчетДт      = Строка.КорСчетСписанияБУ;
						Проводка.СчетКт      = ПолучательСчетНаценки;
						
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Номенклатура",  Строка.Номенклатура);
		                БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Склады",  СтруктураШапкиДокумента.СкладПолучатель);
						Если СтруктураШапкиДокумента.ПартионныйУчетБУ Тогда
							БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Партии",  Ссылка);
						КонецЕсли;
						Если ПолучательНТТ И мРазделятьПоСтавкамНДС Тогда
							БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "СтавкиНДС",  Строка.СтавкаНДСВРознице);
						КонецЕсли;
							
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Склады",  СтруктураШапкиДокумента.СкладПолучатель);
						Если СтруктураШапкиДокумента.ПартионныйУчетБУ Тогда
							БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Партии",  Ссылка);
						КонецЕсли;
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Номенклатура",  Строка.Номенклатура);
						Если ПолучательНТТ И мРазделятьПоСтавкамНДС Тогда
							БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "СтавкиНДС",  Строка.СтавкаНДСВРознице);
						КонецЕсли;
						
						Проводка.Сумма  = Сумма - ПокупнаяЦена;
						
						Проводка.НалоговоеНазначениеДт = Строка.НалоговоеНазначение;
						Проводка.НалоговоеНазначениеКт = Строка.НалоговоеНазначение;
						Если   СтруктураШапкиДокумента.ЕстьНалогНаПрибыльДо2015
							 И Строка.НалоговоеНазначение <> Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяНеХозДеятельность Тогда
							Проводка.СуммаНУДт = Сумма - ПокупнаяЦенаНУ;
							Проводка.СуммаНУКт = Сумма - ПокупнаяЦенаНУ;
						КонецЕсли;
					
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	Иначе //Розница в покупных ценах
		
		УправлениеЗапасамиПартионныйУчет.ДвижениеПартийТоваров(
											ТаблицаПоТоварам, 
											Отказ, 
											, 
											НСтр("ru='Перемещение ТМЦ';uk='Переміщення ТМЦ'", Локализация.КодЯзыкаИнформационнойБазы())
										 );
		
	КонецЕсли;
	
	УправлениеЗапасамиПартионныйУчет.ДвижениеПартийТоваров(
										ТаблицаПоТоварамНаКомиссии, 
										Отказ, 
										, 
										НСтр("ru='Перемещение ТМЦ';uk='Переміщення ТМЦ'", Локализация.КодЯзыкаИнформационнойБазы())
									 );
	
	УправлениеЗапасамиПартионныйУчет.ДвижениеПартийТоваров(
										ТаблицаПоТаре,    	
										Отказ, 
										, 
										НСтр("ru='Перемещение ТМЦ';uk='Переміщення ТМЦ'", Локализация.КодЯзыкаИнформационнойБазы())
									 );
	
	Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПеремещениеТоваров.БланкиСтрогогоУчета Тогда
		
		УправлениеЗапасамиПартионныйУчет.ДвижениеПартийТоваров(
											ТаблицаПоБланкам,
											Отказ,
											, 
											НСтр("ru='Перемещение БСУ';uk='Переміщення БСЗ'", Локализация.КодЯзыкаИнформационнойБазы())
										 );
		
		// Проводки по бланкам стогого учета		
		Для Каждого СтрокаТаблицы Из ТаблицаПоБланкам Цикл
		// проводка по счету СчетУчетаЗабалансовыйБУ
			Если СтрокаТаблицы.КоличествоНоминальное < СтрокаТаблицы.Количество Тогда
				Учет = "Бух";
				СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1. учет. Строка :%2
|Не списано %3 %4 товара %5, счет учета %6';uk='%1. облік. Рядок :%2
|Не списано %3 %4 товара %5, рахунок %6'"), Учет, СтрокаТаблицы.НомерСтроки, (СтрокаТаблицы.Количество - СтрокаТаблицы.КоличествоНоминальное), СтрокаТаблицы.Номенклатура.БазоваяЕдиницаИзмерения, СтрокаТаблицы.Номенклатура, СтрокаТаблицы.СчетУчетаЗабалансовыйБУ);
				Поле = "БланкиСтрогогоУчета[" + Формат(СтрокаТаблицы.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].Количество";								
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения,ЭтотОбъект, Поле, "Объект",Отказ);
			Иначе		
				ПроводкиБУ = Движения.Хозрасчетный;
				Проводка = ПроводкиБУ.Добавить();
				
	            Проводка.Период       = СтруктураШапкиДокумента.Дата;
				Проводка.Организация  = СтруктураШапкиДокумента.Организация;
				Проводка.Содержание   = НСтр("ru='Перемещение БСУ';uk='Переміщення БСЗ'", Локализация.КодЯзыкаИнформационнойБазы());				

				Проводка.СчетДТ       = СтрокаТаблицы.НовыйСчетУчетаЗабалансовыйБУ;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДТ, Проводка.СубконтоДТ, "Номенклатура", СтрокаТаблицы.Номенклатура);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДТ, Проводка.СубконтоДТ, "Склады",       СтруктураШапкиДокумента.СкладПолучатель);
				Проводка.КоличествоДТ = СтрокаТаблицы.Количество;

				Проводка.СчетКТ       = СтрокаТаблицы.СчетУчетаЗабалансовыйБУ;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКТ, Проводка.СубконтоКТ, "Номенклатура", СтрокаТаблицы.Номенклатура);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКТ, Проводка.СубконтоКТ, "Склады",       СтруктураШапкиДокумента.СкладОтправитель);
				Проводка.КоличествоКТ = СтрокаТаблицы.Количество;			
											
				Проводка.Сумма = СтрокаТаблицы.СуммаНоминальная;
				
			  КонецЕсли;
		КонецЦикла; // Проводки по бланкам строгого учета

	КонецЕсли;
	
	// ИНАГРО++
	Если ИНАГРО_ОбщийВызовСервераПовтИсп.ЕстьБСПУ() Тогда
	    КопияТаблицаПоТоварам = ТаблицаПоТоварам.Скопировать();
		КопияТаблицаПоТоварам.Колонки.Добавить("НаправлениеДвижения");
		КопияТаблицаПоТоварам.ЗаполнитьЗначения(Справочники.ИНАГРО_ВидыДвиженийВедомости.Перемещение, "НаправлениеДвижения");
		ИНАГРО_Общий.ИНАГРО_ВедомостьДвиженийРасход(Движения, КопияТаблицаПоТоварам, СтруктураШапкиДокумента);	
		
		КопияТаблицаПоТоварам.Колонки.Склад.Имя = "СкладСтарый";
		КопияТаблицаПоТоварам.Колонки.СкладНовый.Имя = "Склад";
		ИНАГРО_Общий.ИНАГРО_ВедомостьДвиженийПриход(Движения, КопияТаблицаПоТоварам, СтруктураШапкиДокумента);	
	КонецЕсли;	
	// ИНАГРО--
	
КонецПроцедуры // ДвиженияПоРегистрам()

#КонецОбласти 

#Область СлужебныеПроцедурыИФункции

Процедура ОбновитьПараметрыУчетнойПолитики() Экспорт

	мУчетнаяПолитика = Новый Структура;
	мУчетнаяПолитика.Вставить("ЕстьНалогНаПрибыльДо2015" , УчетнаяПолитика.ПлательщикНалогаНаПрибыльДо2015(Организация, НачалоМесяца(Дата)));
	мУчетнаяПолитика.Вставить("ЕстьНДС"            , УчетнаяПолитика.ПлательщикНДС(Организация, НачалоМесяца(Дата)));
	мУчетнаяПолитика.Вставить("ЕстьЕдиныйНалог"    , УчетнаяПолитика.ПлательщикЕдиногоНалога(Организация, НачалоМесяца(Дата)));

	мИспользоватьОборотнуюНоменклатуру = БухгалтерскийУчетВызовСервераПовтИсп.ИспользуетсяОборотнаяНоменклатураВНТТ();
	мРазделятьПоСтавкамНДС             = БухгалтерскийУчетВызовСервераПовтИсп.ИспользуетсяРазделениеПоСтавкамНДСВНТТ();

	СпособОценкиТоваровВРознице = УчетнаяПолитика.СпособОценкиТоваровВРознице(Организация, НачалоМесяца(Дата));
	мУчетВПродажныхЦенах = (СпособОценкиТоваровВРознице = Перечисления.СпособыОценкиТоваровВРознице.ПоПродажнойСтоимости);
	
	СпособОценкиМПЗ  = УчетнаяПолитика.СпособОценкиМПЗ(Организация, НачалоМесяца(Дата));
	ПартионныйУчетБУ = (СпособОценкиМПЗ = Перечисления.СпособыОценки.ФИФО ИЛИ СпособОценкиМПЗ = Перечисления.СпособыОценки.ЛИФО);
	
	мУчетнаяПолитика.Вставить("ПартионныйУчетБУ"   , ПартионныйУчетБУ);

КонецПроцедуры // ОбновитьПараметрыУчетнойПолитики

// Процедура вызывается при заполнению на основании документа ПоступлениеТоваровУслуг
Процедура ЗаполнитьПоПоступлению(ИмяТабЧасти, Режим, Основание = Неопределено, ИмяТабЧастиИсточника = Неопределено) Экспорт

	Поступление = Основание;

	Если НЕ ЗначениеЗаполнено(Поступление) Тогда
		Возврат;
	КонецЕсли;

	ТабЧасть = ЭтотОбъект[ИмяТабЧасти];

	Если ТабЧасть.Количество() > 0 И Режим = "Заполнить" Тогда


		ТабЧасть.Очистить();

	КонецЕсли;
	
	ТабЧастьИсточник = ?(ИмяТабЧастиИсточника = Неопределено, ИмяТабЧасти, ИмяТабЧастиИсточника);

	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Поступление", Поступление);
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ПоступлениеТоваровУслугТовары.НомерСтроки,
	|	ПоступлениеТоваровУслугТовары.Номенклатура,
	|	ПоступлениеТоваровУслугТовары.ЕдиницаИзмерения,
	|	ПоступлениеТоваровУслугТовары.Коэффициент,
	|	ПоступлениеТоваровУслугТовары.Количество
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг."+ТабЧастьИсточник + " КАК ПоступлениеТоваровУслугТовары
	|
	|ГДЕ
	|	ПоступлениеТоваровУслугТовары.Ссылка = &Поступление";
	
	Если ТабЧасть = ВозвратнаяТара Тогда
	
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПоступлениеТоваровУслугТовары.ЕдиницаИзмерения", 	"NULL"); 
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПоступлениеТоваровУслугТовары.Коэффициент", 		"NULL");
		
	КонецЕсли;
	
	ТаблицаТоваров = Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрокаТовара Из ТаблицаТоваров Цикл

		СтрокаТЧ = ТабЧасть.Добавить();

		СтрокаТЧ.Номенклатура        = СтрокаТовара.Номенклатура;
		СтрокаТЧ.Количество          = СтрокаТовара.Количество;
		
		Если НЕ ТабЧасть = ВозвратнаяТара Тогда
		
			СтрокаТЧ.ЕдиницаИзмерения    = СтрокаТовара.ЕдиницаИзмерения;
			СтрокаТЧ.Коэффициент         = СтрокаТовара.Коэффициент;
		
		КонецЕсли; 
		
	КонецЦикла;

КонецПроцедуры // ЗаполнитьПоПоступлению()

Процедура ЗаполнитьПоДокументуОснованию(Основание)

	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда

		// Заполним реквизиты из стандартного набора по документу-основанию.
		ЗаполнениеДокументов.ЗаполнитьПоОснованию(ЭтотОбъект, Основание);
		
		СкладОтправитель = Основание.Склад;

		Если Основание.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Оборудование Тогда
			ВидОперации = Перечисления.ВидыОперацийПеремещениеТоваров.Оборудование;
		ИначеЕсли Основание.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.БланкиСтрогогоУчета Тогда
			ВидОперации = Перечисления.ВидыОперацийПеремещениеТоваров.БланкиСтрогогоУчета;
		Иначе
			ВидОперации = Перечисления.ВидыОперацийПеремещениеТоваров.ТоварыПродукция;
		КонецЕсли;

		Если ВидОперации = Перечисления.ВидыОперацийПеремещениеТоваров.Оборудование Тогда
			ЗаполнитьПоПоступлению("Товары" , "Заполнить", Основание);
			ЗаполнитьПоПоступлению("Товары" , "Добавить",  Основание, "Оборудование");
		ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПеремещениеТоваров.БланкиСтрогогоУчета Тогда
			ЗаполнитьПоПоступлению("БланкиСтрогогоУчета" , "Заполнить", Основание);
			ЗаполнитьПоПоступлению("Товары" , "Заполнить", Основание);
		Иначе
			Если Основание.ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда
				ЗаполнитьПоПоступлению("ТоварыНаКомиссии" , "Заполнить", Основание, "Товары");
			Иначе
				ЗаполнитьПоПоступлению("Товары" , "Заполнить", Основание);
			КонецЕсли;
		КонецЕсли;
		
		ЗаполнитьПоПоступлению("ВозвратнаяТара", "Заполнить", Основание);
		
		Документы.ПеремещениеТоваров.ЗаполнитьСчетаУчетаВТабличнойЧасти(ЭтотОбъект, "Товары");
		Документы.ПеремещениеТоваров.ЗаполнитьСчетаУчетаВТабличнойЧасти(ЭтотОбъект, "ТоварыНаКомиссии");
		Документы.ПеремещениеТоваров.ЗаполнитьСчетаУчетаВТабличнойЧасти(ЭтотОбъект, "ВозвратнаяТара");
		Документы.ПеремещениеТоваров.ЗаполнитьСчетаУчетаВТабличнойЧасти(ЭтотОбъект, "БланкиСтрогогоУчета");
		
		СвойстваСкладаОтправителя 	= ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЭтотОбъект.СкладОтправитель, "ТипСклада");
		ТипСкладаОтправитель   		= СвойстваСкладаОтправителя.ТипСклада;
		СвойстваСкладаПолучателя 	= ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЭтотОбъект.СкладПолучатель, "ТипСклада");
		ТипСкладаПолучатель   		= СвойстваСкладаПолучателя.ТипСклада;
		РазделятьПоСтавкамНДС       = БухгалтерскийУчетВызовСервераПовтИсп.ИспользуетсяРазделениеПоСтавкамНДСВНТТ();
		
		Документы.ПеремещениеТоваров.ЗаполнитьСтрокиТабличнойЧастиТовары(ЭтотОбъект, ТипСкладаОтправитель, ТипСкладаПолучатель, РазделятьПоСтавкамНДС);
		
		Ответственный = Пользователи.ТекущийПользователь();		
		
	КонецЕсли;
	
КонецПроцедуры	// ЗаполнитьПоДокументуОснованию

#КонецОбласти 

мВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();

#КонецЕсли

