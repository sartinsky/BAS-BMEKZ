#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ ПРОВЕДЕНИЯ
Перем мВалютаРегламентированногоУчета;
Перем ПартионныйУчетБУ;

// Процедура выполняет движения по регистрам
//
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ПРОВЕДЕНИЯ - ПОДГОТОВКА ДАННЫХ ИНФОРМАЦИОННОЙ БАЗЫ

// Процедура формирует структуру шапки документа и дополнительных полей.
//
Процедура ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента) Экспорт
	
	// Дерево значений, содержащее имена необходимых полей в запросе по шапке.
	Перем ДеревоПолейЗапросаПоШапке;

	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента = ОбщегоНазначенияРед12.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	СтруктураШапкиДокумента.Склад = ?(ИНАГРО_ВидПоступления = Перечисления.ИНАГРО_ВидыПоступленияТоваров.ПоОрдеру, СтруктураШапкиДокумента.Склад.Склад, СтруктураШапкиДокумента.Склад); // ИНАГРО							
	
	// Заполним по шапке документа дерево параметров, нужных при проведении.
	ДеревоПолейЗапросаПоШапке = ОбщегоНазначенияРед12.СформироватьДеревоПолейЗапросаПоШапке();
	
	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа
	СтруктураШапкиДокумента = УправлениеЗапасами.СформироватьЗапросПоДеревуПолей(ЭтотОбъект, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета);
	
КонецПроцедуры // ПодготовитьСтруктуруШапкиДокумента()

// Процедура определяет параметры учетной политики
//
Процедура ПодготовитьПараметрыУчетнойПолитики(СтруктураШапкиДокумента, Отказ, Заголовок)
	
	СпособОценкиМПЗ = УчетнаяПолитика.СпособОценкиМПЗ(СтруктураШапкиДокумента.Организация, СтруктураШапкиДокумента.Дата);
	ПартионныйУчетБУ = (СпособОценкиМПЗ = Перечисления.СпособыОценки.ФИФО) ИЛИ (СпособОценкиМПЗ = Перечисления.СпособыОценки.ЛИФО);
	
	СтруктураШапкиДокумента.Вставить("ЕстьНДС"           , УчетнаяПолитика.ПлательщикНДС(СтруктураШапкиДокумента.Организация, СтруктураШапкиДокумента.Дата));
	СтруктураШапкиДокумента.Вставить("ЕстьНалогНаПрибыльДо2015", УчетнаяПолитика.ПлательщикНалогаНаПрибыльДо2015(СтруктураШапкиДокумента.Организация, СтруктураШапкиДокумента.Дата));
	СтруктураШапкиДокумента.Вставить("ЕстьЕдиныйНалог"   , УчетнаяПолитика.ПлательщикЕдиногоНалога(СтруктураШапкиДокумента.Организация, СтруктураШапкиДокумента.Дата));
	
КонецПроцедуры // ПодготовитьПараметрыУчетнойПолитики()

// Процедура формирует таблицы документа.
//
Процедура ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоТаре, ТаблицаПоАвансам, ТаблицаПоОплате, ТаблицаПоПрочее, Отказ, Заголовок) Экспорт
	
	// Получим необходимые данные для проведения и проверки заполенения данные по табличной части "Товары".
	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("Номенклатура", 		"Номенклатура");
	СтруктураПолей.Вставить("Количество"  , 		"Количество * Коэффициент");
	СтруктураПолей.Вставить("Сумма"       , 		"Сумма");
	СтруктураПолей.Вставить("СтавкаНДС"   , 		"СтавкаНДС");
	СтруктураПолей.Вставить("НДС"         , 		"СуммаНДС");
	СтруктураПолей.Вставить("Услуга"      , 		"Номенклатура.Услуга");	
	СтруктураПолей.Вставить("БланкСтрогогоУчета", 	"Номенклатура.БланкСтрогогоУчета");
	СтруктураПолей.Вставить("Контрагент"  , 		"Контрагент"); 
	СтруктураПолей.Вставить("ДоговорКонтрагента" , 	"ДоговорКонтрагента"); 
	СтруктураПолей.Вставить("НеОтноситьНаЗатратыПоНУ" , 	"ДоговорКонтрагента.НеОтноситьНаЗатратыПоНУ"); 
	СтруктураПолей.Вставить("Сделка", 				"Сделка");
	СтруктураПолей.Вставить("СчетУчетаБУ" , 		"СчетУчетаБУ");
	СтруктураПолей.Вставить("СчетУчетаБУЗаб", 		"СчетУчетаБУ.Забалансовый");
	СтруктураПолей.Вставить("СчетУчетаНДС", 		"СчетУчетаНДС");
	СтруктураПолей.Вставить("СтатьяДекларацииПоЕдиномуНалогу"		, "СтатьяДекларацииПоЕдиномуНалогу");
		
	СтруктураПолей.Вставить("НалоговоеНазначение"     	, "НалоговоеНазначение");
	СтруктураПолей.Вставить("ВидДеятельностиНДС"     	, "НалоговоеНазначение.ВидДеятельностиНДС");
	СтруктураПолей.Вставить("СуммаНДСПропорциональноКредит" , "СуммаНДСПропорциональноКредит");
	
	СтруктураПолей.Вставить("СложныйНалоговыйУчет"	     	, "ДоговорКонтрагента.СложныйНалоговыйУчет");
	СтруктураПолей.Вставить("ВедениеВзаиморасчетовНУ"	   	, "ДоговорКонтрагента.ВедениеВзаиморасчетовНУ");
    СтруктураПолей.Вставить("ВедениеВзаиморасчетов"	     	, "ДоговорКонтрагента.ВедениеВзаиморасчетов"); 	
		
	// ИНАГРО++
	Если ИНАГРО_ВидПоступления = Перечисления.ИНАГРО_ВидыПоступленияТоваров.ПоОрдеру И ИНАГРО_ОрдерВТЧ Тогда
		СтруктураПолей.Вставить("Склад", "ИНАГРО_Ордер.Склад");
	ИначеЕсли ИНАГРО_ВидПоступления = Перечисления.ИНАГРО_ВидыПоступленияТоваров.ПоОрдеру Тогда
		СтруктураПолей.Вставить("Склад", "Ссылка.Склад.Склад");
	ИначеЕсли ИНАГРО_ВидПоступления = Перечисления.ИНАГРО_ВидыПоступленияТоваров.НаСклад И ИНАГРО_СкладВТЧ Тогда
		СтруктураПолей.Вставить("Склад", "ИНАГРО_Склад");
	Иначе	 
		СтруктураПолей.Вставить("Склад", "Ссылка.Склад");
	КонецЕсли;
	
	СтруктураПолей.Вставить("СчетУчетаРасчетовСКонтрагентом", "ИНАГРО_СчетУчетаРасчетовСКонтрагентом"); 	
	СтруктураПолей.Вставить("ДокументОприходования",          "Ссылка"); // Для регистра ИНАГРО_ЗакупкиОрганизаций
	// ИНАГРО--
	
	РезультатЗапросаПоТоварам = ОбщегоНазначенияРед12.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураПолей);

	// Получим необходимые данные для проведения и проверки заполенения данные 
	// по табличной части "Возвратная тара".
	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("Номенклатура" 		, "Номенклатура");
	СтруктураПолей.Вставить("Услуга"       		, "Номенклатура.Услуга");
	СтруктураПолей.Вставить("БланкСтрогогоУчета", "Номенклатура.БланкСтрогогоУчета");
	СтруктураПолей.Вставить("Количество"   		, "Количество");
	СтруктураПолей.Вставить("Сумма"        		, "Сумма");
	СтруктураПолей.Вставить("Контрагент"   		, "Контрагент");
	СтруктураПолей.Вставить("ДоговорКонтрагента", "ДоговорКонтрагента"); 
	СтруктураПолей.Вставить("НеОтноситьНаЗатратыПоНУ" , 	"ДоговорКонтрагента.НеОтноситьНаЗатратыПоНУ"); 
	СтруктураПолей.Вставить("Сделка"            , "Сделка");
	СтруктураПолей.Вставить("СчетУчетаБУ"  		, "СчетУчетаБУ");
	СтруктураПолей.Вставить("СчетУчетаБУЗаб"	, "СчетУчетаБУ.Забалансовый");
	СтруктураПолей.Вставить("СчетУчетаРасчетовПоТаре", "СчетУчетаРасчетовПоТаре");
	СтруктураПолей.Вставить("СчетУчетаРасчетовПоТареПоАвансам", "СчетУчетаРасчетовПоТареПоАвансам");
	СтруктураПолей.Вставить("ДоговорКонтрагента", "ДоговорКонтрагента");
	СтруктураПолей.Вставить("ДоговорОрганизация", "ДоговорКонтрагента.Организация");
	
	СтруктураПолей.Вставить("НалоговоеНазначение"		, "НалоговоеНазначение");
	СтруктураПолей.Вставить("ВидДеятельностиНДС"  		, "НалоговоеНазначение.ВидДеятельностиНДС");
	
	СтруктураПолей.Вставить("СложныйНалоговыйУчет"	     	, "ДоговорКонтрагента.СложныйНалоговыйУчет");
	СтруктураПолей.Вставить("ВедениеВзаиморасчетовНУ"	    , "ДоговорКонтрагента.ВедениеВзаиморасчетовНУ");
	СтруктураПолей.Вставить("ВедениеВзаиморасчетов"	     	, "ДоговорКонтрагента.ВедениеВзаиморасчетов");
	
	// ИНАГРО++
	Если ИНАГРО_ВидПоступления = Перечисления.ИНАГРО_ВидыПоступленияТоваров.ПоОрдеру И ИНАГРО_ОрдерВТЧ Тогда
		СтруктураПолей.Вставить("Склад", "ИНАГРО_Ордер.Склад");
	ИначеЕсли ИНАГРО_ВидПоступления = Перечисления.ИНАГРО_ВидыПоступленияТоваров.ПоОрдеру Тогда
		СтруктураПолей.Вставить("Склад", "Ссылка.Склад.Склад");
	ИначеЕсли ИНАГРО_ВидПоступления = Перечисления.ИНАГРО_ВидыПоступленияТоваров.НаСклад И ИНАГРО_СкладВТЧ Тогда
		СтруктураПолей.Вставить("Склад", "ИНАГРО_Склад");
	Иначе	 
		СтруктураПолей.Вставить("Склад", "Ссылка.Склад");
	КонецЕсли; 
	// ИНАГРО--

	РезультатЗапросаПоТаре = ОбщегоНазначенияРед12.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "ВозвратнаяТара", СтруктураПолей);

	// Получим необходимые данные для проведения и проверки заполенения данные 
	// по табличной части "Авансы".
	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("ДокументАванса", "ДокументАванса");

	РезультатЗапросаПоВыданнымАвансам = ОбщегоНазначенияРед12.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "ВыданныеАвансы", СтруктураПолей);

	// Получим необходимые данные для проведения и проверки заполенения данные 
	// по табличной части "Оплата поставщикам".
	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("Контрагент"           , "Контрагент");
	СтруктураПолей.Вставить("ДоговорКонтрагента"   , "ДоговорКонтрагента");
	СтруктураПолей.Вставить("ВедениеВзаиморасчетов", "ДоговорКонтрагента.ВедениеВзаиморасчетов");
	СтруктураПолей.Вставить("ВалютаДоговора"       , "ДоговорКонтрагента.ВалютаВзаиморасчетов");
	СтруктураПолей.Вставить("ДоговорОрганизация"   , "ДоговорКонтрагента.Организация");
	СтруктураПолей.Вставить("Сделка"               , "Сделка");
	СтруктураПолей.Вставить("Сумма"                , "Сумма");
	СтруктураПолей.Вставить("СуммаВзаиморасчетов"  , "СуммаВзаиморасчетов");
	СтруктураПолей.Вставить("КурсВзаиморасчетов"   , "КурсВзаиморасчетов");
	СтруктураПолей.Вставить("КратностьВзаиморасчетов",           "КратностьВзаиморасчетов");
	СтруктураПолей.Вставить("СчетУчетаРасчетовСКонтрагентом",    "СчетУчетаРасчетовСКонтрагентом");
	СтруктураПолей.Вставить("СчетУчетаРасчетовПоАвансам",        "СчетУчетаРасчетовПоАвансам");
	
	СтруктураПолей.Вставить("СчетУчетаНДС", 	  			"СчетУчетаНДС");
	СтруктураПолей.Вставить("СчетУчетаНДСПодтвержденный", 	"СчетУчетаНДСПодтвержденный");
	СтруктураПолей.Вставить("СчетУчетаРасчетовПоАвансам", 	"СчетУчетаРасчетовПоАвансам");
	СтруктураПолей.Вставить("НалоговоеНазначение", 			"НалоговоеНазначение");
	СтруктураПолей.Вставить("Амортизируется", 				"Амортизируется");
	СтруктураПолей.Вставить("СложныйНалоговыйУчет"	     	, "ДоговорКонтрагента.СложныйНалоговыйУчет");
	СтруктураПолей.Вставить("ВедениеВзаиморасчетов"	     	, "ДоговорКонтрагента.ВедениеВзаиморасчетов");
	СтруктураПолей.Вставить("ВедениеВзаиморасчетовНУ"	    , "ДоговорКонтрагента.ВедениеВзаиморасчетовНУ");
	СтруктураПолей.Вставить("СтатьяДекларацииПоЕдиномуНалогу"	, "СтатьяДекларацииПоЕдиномуНалогу");
	
	СтруктураПолей.Вставить("СтавкаНДС"	     				, "СтавкаНДС");
	СтруктураПолей.Вставить("СуммаНДС"	     				, "СуммаНДС");
	СтруктураПолей.Вставить("СуммаНДСПропорциональноКредит" , "СуммаНДСПропорциональноКредит");

	
	РезультатЗапросаПоОплатеПоставщикам = ОбщегоНазначенияРед12.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "ОплатаПоставщикам", СтруктураПолей);

	// Получим необходимые данные для проведения и проверки заполенения данные 
	// по табличной части "Прочее".
	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("Сумма"       , "Сумма");
	СтруктураПолей.Вставить("СтавкаНДС"   , "СтавкаНДС");
	СтруктураПолей.Вставить("НДС"         , "СуммаНДС");
	СтруктураПолей.Вставить("Содержание"  , "Содержание");
	СтруктураПолей.Вставить("Номенклатура", "Номенклатура");
	СтруктураПолей.Вставить("Услуга"      , "Номенклатура.Услуга");
	СтруктураПолей.Вставить("БланкСтрогогоУчета", "Номенклатура.БланкСтрогогоУчета");
	СтруктураПолей.Вставить("Контрагент"  , "Контрагент");
	СтруктураПолей.Вставить("ДоговорКонтрагента"   , "ДоговорКонтрагента");
	СтруктураПолей.Вставить("НеОтноситьНаЗатратыПоНУ" ,"ДоговорКонтрагента.НеОтноситьНаЗатратыПоНУ"); 
	СтруктураПолей.Вставить("Сделка",              "Сделка");
	СтруктураПолей.Вставить("СчетЗатрат"  , "СчетЗатрат");
	СтруктураПолей.Вставить("Субконто1",    "Субконто1");
	СтруктураПолей.Вставить("Субконто2",    "Субконто2");
	СтруктураПолей.Вставить("Субконто3",    "Субконто3");
	СтруктураПолей.Вставить("СчетУчетаНДС", "СчетУчетаНДС");
	СтруктураПолей.Вставить("СтатьяДекларацииПоЕдиномуНалогу"	, "СтатьяДекларацииПоЕдиномуНалогу");
	
	СтруктураПолей.Вставить("ЭтоСуточные"				, "ЭтоСуточные");
	СтруктураПолей.Вставить("СуточныеДатаС"				, "СуточныеДатаС");
	СтруктураПолей.Вставить("СуточныеДатаПо"			, "СуточныеДатаПо");
	
	СтруктураПолей.Вставить("КомандировкаЗарубеж"		, "КомандировкаЗарубеж");
	СтруктураПолей.Вставить("КоличествоСуток"			, "КоличествоСуток");
	
	СтруктураПолей.Вставить("НалоговоеНазначение"     	, "НалоговоеНазначение");
	СтруктураПолей.Вставить("ВидДеятельностиНДС"     	, "НалоговоеНазначение.ВидДеятельностиНДС");
	
	СтруктураПолей.Вставить("НалоговоеНазначениеДоходовИЗатрат" , "НалоговоеНазначениеДоходовИЗатрат");
	СтруктураПолей.Вставить("СуммаНУ" 					, "СуммаНУ");
	СтруктураПолей.Вставить("СуммаНДСПропорциональноКредит" , "СуммаНДСПропорциональноКредит");
	
	
	СтруктураПолей.Вставить("СложныйНалоговыйУчет"	     	, "ДоговорКонтрагента.СложныйНалоговыйУчет");
	СтруктураПолей.Вставить("ВедениеВзаиморасчетовНУ"	    , "ДоговорКонтрагента.ВедениеВзаиморасчетовНУ");
	СтруктураПолей.Вставить("ВедениеВзаиморасчетов"	     	, "ДоговорКонтрагента.ВедениеВзаиморасчетов");
	
	СтруктураПолей.Вставить("СчетУчетаРасчетовСКонтрагентом", "ИНАГРО_СчетУчетаРасчетовСКонтрагентом");  // ИНАГРО

	РезультатЗапросаПоПрочее = ОбщегоНазначенияРед12.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Прочее", СтруктураПолей);

	ПогрешностиОкругления = Новый Соответствие;
	ПогрешностиОкругленияТара = Новый Соответствие;
	
	// Подготовим таблицы для проведения.
	ТаблицаПоТоварам = ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента, ПогрешностиОкругления);
	ТаблицаПоТаре    = ПодготовитьТаблицуТары(РезультатЗапросаПоТаре, СтруктураШапкиДокумента, ПогрешностиОкругленияТара);
	ТаблицаПоАвансам = РезультатЗапросаПоВыданнымАвансам.Выгрузить();
	ТаблицаПоОплате  = ПодготовитьТаблицуПоОплате(РезультатЗапросаПоОплатеПоставщикам, СтруктураШапкиДокумента);
	ТаблицаПоПрочее  = ПодготовитьТаблицуПрочие(РезультатЗапросаПоПрочее, СтруктураШапкиДокумента, ПогрешностиОкругления);

КонецПроцедуры

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
////
//// Параметры: 
////  РезультатЗапросаПоТоварам - результат запроса по табличной части "Товары",
////  СтруктураШапкиДокумента   - выборка по результату запроса по шапке документа.
////
//// Возвращаемое значение:
////  Сформированная таблиица значений.
////
Функция ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента, ПогрешностиОкругления)

	ТаблицаТоваров = РезультатЗапросаПоТоварам.Выгрузить();

	Если НЕ СтруктураШапкиДокумента.ЕстьНДС Тогда
		// для регламентного учета считаем НДС
		ТаблицаТоваров.ЗаполнитьЗначения(Перечисления.СтавкиНДС.БезНДС, "СтавкаНДС");
		ТаблицаТоваров.ЗаполнитьЗначения(0                            , "НДС");
	КонецЕсли;
	
	ТаблицаТоваров.Колонки.Добавить("ДляХозяйственнойДеятельности", Новый ОписаниеТипов("Булево"));
	// для товаров колонка Амортизируется = Ложь
	ТаблицаТоваров.Колонки.Добавить("Амортизируется", Новый ОписаниеТипов("Булево"));
	
	Для Каждого Строка Из ТаблицаТоваров Цикл
		
		Если Строка.НалоговоеНазначение = Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяНеХозДеятельность Тогда
			Строка.ДляХозяйственнойДеятельности = Ложь;
		Иначе
			Строка.ДляХозяйственнойДеятельности = Истина;
		КонецЕсли;
		
		Если Строка.НалоговоеНазначение = Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_Пропорционально Тогда
	        Строка.Сумма = Строка.Сумма + ?(СтруктураШапкиДокумента.СуммаВключаетНДС, 0, Строка.НДС - Строка.СуммаНДСПропорциональноКредит);
		Иначе
			Строка.СуммаНДСПропорциональноКредит = Строка.НДС;
		КонецЕсли;
		
	КонецЦикла;
	
	ТаблицаТоваров.Колонки.НДС.Имя = "СуммаНДСВалИсходный";
	ТаблицаТоваров.Колонки.СуммаНДСПропорциональноКредит.Имя = "НДС";

	НалоговыйУчет.ДобавитьКолонкиТоваровРегл(ТаблицаТоваров, СтруктураШапкиДокумента, ПогрешностиОкругления);
	
	Если СтруктураШапкиДокумента.Дата >= '20120101' Тогда
		ТаблицаТоваров.ЗаполнитьЗначения(Ложь, "НеОтноситьНаЗатратыПоНУ");
	КонецЕсли;
	
	Возврат ТаблицаТоваров;

КонецФункции // ПодготовитьТаблицуТоваров()

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
////
//// Параметры: 
////  РезультатЗапросаПоТаре  - результат запроса по табличной части "ВозвратнаяТара",
////  СтруктураШапкиДокумента - выборка по результату запроса по шапке документа.
////
//// Возвращаемое значение:
////  Сформированная таблиица значений.
////
Функция ПодготовитьТаблицуТары(РезультатЗапросаПоТаре, СтруктураШапкиДокумента, ПогрешностиОкругления)

	ТаблицаТары = РезультатЗапросаПоТаре.Выгрузить();

	ТаблицаТары.Колонки.Добавить("СтавкаНДС");
	ТаблицаТары.Колонки.Добавить("НДС");
	ТаблицаТары.Колонки.Добавить("ДляХозяйственнойДеятельности");
	ТаблицаТары.Колонки.Добавить("Амортизируется");
	ТаблицаТары.Колонки.Добавить("СчетУчетаНДС");
	
	ТаблицаТары.ЗаполнитьЗначения(Перечисления.СтавкиНДС.НеНДС	, "СтавкаНДС");
	ТаблицаТары.ЗаполнитьЗначения(0								, "НДС");
	ТаблицаТары.ЗаполнитьЗначения(ПланыСчетов.Хозрасчетный.ПустаяСсылка()			, "СчетУчетаНДС");
	ТаблицаТары.ЗаполнитьЗначения(Перечисления.ВидыДеятельностиНДС.Необлагаемая		, "ВидДеятельностиНДС");
	ТаблицаТары.ЗаполнитьЗначения(Истина											, "ДляХозяйственнойДеятельности");
	
	НалоговыйУчет.ДобавитьКолонкиТоваровРегл(ТаблицаТары, СтруктураШапкиДокумента, ПогрешностиОкругления);
	
	Если СтруктураШапкиДокумента.Дата >= '20120101' Тогда
		ТаблицаТары.ЗаполнитьЗначения(Ложь, "НеОтноситьНаЗатратыПоНУ");
	КонецЕсли;
	
	Возврат ТаблицаТары;

КонецФункции // ПодготовитьТаблицуТары()

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТаре  - результат запроса по табличной части "ВозвратнаяТара",
//  СтруктураШапкиДокумента - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблиица значений.
//
Функция ПодготовитьТаблицуПоОплате(РезультатЗапросаПоОплате, СтруктураШапкиДокумента)

	ТаблицаПоОплате = РезультатЗапросаПоОплате.Выгрузить();

	ТаблицаПоОплате.Колонки.Добавить("ПроводкаСуммаСНДСВал", ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаПоОплате.Колонки.Добавить("ПроводкаСуммаСНДСРегл", ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаПоОплате.Колонки.Добавить("СуммаНДСРегл", ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповЧисла(15,2));

	ВалютаРег      = мВалютаРегламентированногоУчета;
	Данные         = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаРег, Дата);

	// Надо расчитать сумму без НДС.
	Для каждого СтрокаТаблицы Из ТаблицаПоОплате Цикл

		СтрокаТаблицы.ПроводкаСуммаСНДСВал = СтрокаТаблицы.СуммаВзаиморасчетов;
		Если СтрокаТаблицы.ВалютаДоговора = ВалютаРег Тогда
			СтрокаТаблицы.ПроводкаСуммаСНДСРегл = СтрокаТаблицы.СуммаВзаиморасчетов;
			СтрокаТаблицы.СуммаНДСРегл = СтрокаТаблицы.СуммаНДС;
		Иначе
			СтрокаТаблицы.ПроводкаСуммаСНДСРегл = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.Сумма, 
											 СтруктураШапкиДокумента.ВалютаДокумента,    ВалютаРег,
											 СтруктураШапкиДокумента.КурсДокумента,      Данные.Курс,
											 СтруктураШапкиДокумента.КратностьДокумента, Данные.Кратность);
			СтрокаТаблицы.СуммаНДСРегл = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.СуммаНДС, 
											 СтруктураШапкиДокумента.ВалютаДокумента,    ВалютаРег,
											 СтруктураШапкиДокумента.КурсДокумента,      Данные.Курс,
											 СтруктураШапкиДокумента.КратностьДокумента, Данные.Кратность);
		КонецЕсли;

	КонецЦикла;

	Возврат ТаблицаПоОплате;

КонецФункции // ПодготовитьТаблицуПоОплате()

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоПрочие  - результат запроса по табличной части "Прочие",
//  СтруктураШапкиДокумента  - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблиица значений.
//
Функция ПодготовитьТаблицуПрочие(РезультатЗапросаПоПрочее, СтруктураШапкиДокумента, ПогрешностиОкругления)
	
	ТаблицаПрочие = РезультатЗапросаПоПрочее.Выгрузить();
	
	Если НЕ СтруктураШапкиДокумента.ЕстьНДС Тогда
		// для регламентного учета считаем НДС
		ТаблицаПрочие.ЗаполнитьЗначения(Перечисления.СтавкиНДС.БезНДС, "СтавкаНДС");
		ТаблицаПрочие.ЗаполнитьЗначения(0                            , "НДС");
	КонецЕсли;
	
	ТаблицаПрочие.Колонки.Добавить("ДляХозяйственнойДеятельности", Новый ОписаниеТипов("Булево"));
	ТаблицаПрочие.Колонки.Добавить("Амортизируется", Новый ОписаниеТипов("Булево"));
	
	Для Каждого Строка Из ТаблицаПрочие Цикл
		
		Если Строка.НалоговоеНазначение = Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяНеХозДеятельность Тогда
			Строка.ДляХозяйственнойДеятельности = Ложь;
		Иначе
			Строка.ДляХозяйственнойДеятельности = Истина;
		КонецЕсли; 
		
		Если Строка.НалоговоеНазначение = Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_Пропорционально Тогда
	        Строка.Сумма = Строка.Сумма + ?(СтруктураШапкиДокумента.СуммаВключаетНДС, 0, Строка.НДС - Строка.СуммаНДСПропорциональноКредит);
		Иначе
			Строка.СуммаНДСПропорциональноКредит = Строка.НДС;
		КонецЕсли;
		
	КонецЦикла;
	
	ТаблицаПрочие.Колонки.Добавить("ХарактерЗатрат");
	
	Для каждого Строка Из ТаблицаПрочие Цикл
		
		// заполним характер затрат, признак Амортизируется и НалоговоеНазначениеДоходовИЗатрат
		
		НалоговыйУчет.ОпределениеАналитикиНалоговогоУчетаВПроводкахДляЗатрат(Строка, Строка.СчетЗатрат, Строка.ХарактерЗатрат,
														       	Строка.НалоговоеНазначениеДоходовИЗатрат, Строка.Амортизируется, 
																Строка.НалоговоеНазначение, Строка.НалоговоеНазначениеДоходовИЗатрат,
																,Дата
																,,СтруктураШапкиДокумента.ЕстьНДС
																);
	КонецЦикла;	
	
	ТаблицаПрочие.Колонки.НДС.Имя = "СуммаНДСВалИсходный";
	ТаблицаПрочие.Колонки.СуммаНДСПропорциональноКредит.Имя = "НДС";
	
	НалоговыйУчет.ДобавитьКолонкиТоваровРегл(ТаблицаПрочие, СтруктураШапкиДокумента, ПогрешностиОкругления);
	
	Если СтруктураШапкиДокумента.Дата >= '20120101' Тогда
		ТаблицаПрочие.ЗаполнитьЗначения(Ложь, "НеОтноситьНаЗатратыПоНУ");
	КонецЕсли;

	Возврат ТаблицаПрочие;

КонецФункции // ПодготовитьТаблицуПрочие()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ПРОВЕДЕНИЯ - ФОРМИРОВАНИЕ ДВИЖЕНИЙ

// По результату запроса по шапке документа формируем движения по регистрам.
//
// Параметры: 
//  РежимПроведения           - режим проведения документа (оперативный или неоперативный),
//  СтруктураШапкиДокумента   - выборка из результата запроса по шапке документа,
//  ТаблицаПоТоварам          - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  ТаблицаПоТаре             - таблица значений, содержащая данные для проведения и проверки ТЧ "Возвратная тара",
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, 
	                          ТаблицаПоТоварам, ТаблицаПоТаре, ТаблицаПоВыданныеАвансы, ТаблицаПоОплатамПоставщикам, ТаблицаПоПрочее,
	                          Отказ, Заголовок);

	ДвиженияПоРегистрамБухгалтерии(РежимПроведения, СтруктураШапкиДокумента, 
	                        ТаблицаПоТоварам, ТаблицаПоТаре, ТаблицаПоВыданныеАвансы, ТаблицаПоОплатамПоставщикам, ТаблицаПоПрочее,
	                        Отказ, Заголовок);

							
	ДвиженияПоРегистрамНалоговогоУчета(СтруктураШапкиДокумента,
									ТаблицаПоТоварам, ТаблицаПоТаре, ТаблицаПоВыданныеАвансы, ТаблицаПоОплатамПоставщикам, ТаблицаПоПрочее,
									Отказ);
							
	
КонецПроцедуры // ДвиженияПоРегистрам()

Процедура ДвиженияПоРегистрамБухгалтерии(РежимПроведения, СтруктураШапкиДокумента, 
		                          ТаблицаПоТоварам, ТаблицаПоТаре, ТаблицаПоВыданныеАвансы, ТаблицаПоОплатамПоставщикам, ТаблицаПоПрочее,
		                          Отказ, Заголовок);

	ВалютаРег = мВалютаРегламентированногоУчета;

	// Формирование проводок.
	ПроводкиБУ = Движения.Хозрасчетный;

	Если СтруктураШапкиДокумента.ВалютаДокумента = ВалютаРег Тогда
		СчетРасчетовСПодотчетником = ПланыСчетов.Хозрасчетный.РасчетыСПодотчетнымиЛицамиВНациональнойВалюте;
	Иначе
		СчетРасчетовСПодотчетником = ПланыСчетов.Хозрасчетный.РасчетыСПодотчетнымиЛицамиВИностраннойВалюте;
		ТаблицыДокумента = Новый Структура();
		ТаблицыДокумента.Вставить("ТаблицаПоТоварам",ТаблицаПоТоварам);
		ТаблицыДокумента.Вставить("ТаблицаПоПрочее",ТаблицаПоПрочее);
		БухгалтерскийУчетРасчетовСКонтрагентами.ЗачетАвансаПодотчетника(ЭтотОбъект, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета, ТаблицыДокумента, Отказ,СчетРасчетовСПодотчетником);
	КонецЕсли;

	Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыльДо2015 И СтруктураШапкиДокумента.ВалютаДокумента = мВалютаРегламентированногоУчета Тогда
		ЗапросПоЕдинщикам = Новый Запрос();
		ЗапросПоЕдинщикам.Текст = "ВЫБРАТЬ
		                          |	СхемыНалогообложенияКонтрагентов.Контрагент КАК Контрагент
		                          |ИЗ
		                          |	РегистрСведений.СхемыНалогообложенияКонтрагентов.СрезПоследних(&Дата, ) КАК СхемыНалогообложенияКонтрагентов
		                          |ГДЕ
		                          |	СхемыНалогообложенияКонтрагентов.СхемаНалогообложения.ЕдиныйНалог = Истина
		                          |	И СхемыНалогообложенияКонтрагентов.Контрагент В
		                          |			(ВЫБРАТЬ
		                          |				Документ.АвансовыйОтчет.Товары.Контрагент
		                          |			ИЗ
		                          |				Документ.АвансовыйОтчет.Товары
		                          |			ГДЕ
		                          |				Документ.АвансовыйОтчет.Товары.Ссылка = &Ссылка
		                          |		
		                          |			ОБЪЕДИНИТЬ
		                          |		
		                          |			ВЫБРАТЬ
		                          |				Документ.АвансовыйОтчет.Прочее.Контрагент
		                          |			ИЗ
		                          |				Документ.АвансовыйОтчет.Прочее
		                          |			ГДЕ
		                          |				Документ.АвансовыйОтчет.Прочее.Ссылка = &Ссылка)";
		
		ЗапросПоЕдинщикам.УстановитьПараметр("Дата", Дата);
		ЗапросПоЕдинщикам.УстановитьПараметр("Ссылка", Ссылка);
		КонтрагентыЕдинщики = ЗапросПоЕдинщикам.Выполнить().Выгрузить();
	КонецЕсли;
	
	ДатаДок      = Дата;
	СкладПроводок = СтруктураШапкиДокумента.Склад;
	
	// Проводки по товарам
	Для каждого СтрокаТаблицы Из ТаблицаПоТоварам Цикл

		Проводка = ПроводкиБУ.Добавить();

		Проводка.Период      = ДатаДок;
		Проводка.Организация = СтруктураШапкиДокумента.Организация;
		Проводка.Содержание  = НСтр("ru='Оприходованы ТМЦ';uk='Оприбутковані ТМЦ'",Локализация.КодЯзыкаИнформационнойБазы());

		Проводка.СчетДт      = СтрокаТаблицы.СчетУчетаБУ;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Номенклатура", СтрокаТаблицы.Номенклатура);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Склады",       СтрокаТаблицы.Склад); // ИНАГРО
		
		Проводка.НалоговоеНазначениеДт = СтрокаТаблицы.НалоговоеНазначение;
		
		Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыльДо2015 И
			 СтрокаТаблицы.НеОтноситьНаЗатратыПоНУ = Ложь И 
			 СтрокаТаблицы.НалоговоеНазначение <> Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяНеХозДеятельность Тогда
			 
			 Проводка.СуммаНУДт = СтрокаТаблицы.ПроводкиСуммаБезНДСРегл;
		 КонецЕсли;
		
		// Для товаров, принятых на комиссию партия прописывается всегда 
		Если (ПартионныйУчетБУ) ИЛИ (БухгалтерскийУчетВызовСервераПовтИсп.КомиссионныйТовар(СтрокаТаблицы.СчетУчетаБУ)) Тогда 
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Партии", Ссылка);
		КонецЕсли;
		
		Проводка.КоличествоДт= СтрокаТаблицы.Количество;

		Проводка.Сумма = СтрокаТаблицы.ПроводкиСуммаБезНДСРегл;
				
		// ИНАГРО++	
		Если ЗначениеЗаполнено(СтрокаТаблицы.СчетУчетаРасчетовСКонтрагентом) Тогда
						
			Проводка.СчетКт      = СтрокаТаблицы.СчетУчетаРасчетовСКонтрагентом;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Контрагенты", СтрокаТаблицы.Контрагент);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Договоры", 	  СтрокаТаблицы.ДоговорКонтрагента);
			
			Проводка = ПроводкиБУ.Добавить();
			                                 			
			Проводка.Период      = ДатаДок;
			Проводка.Организация = СтруктураШапкиДокумента.Организация;
			Проводка.Содержание  = НСтр("ru='Оприходованы ТМЦ';uk='Оприбутковані ТМЦ'", Локализация.КодЯзыкаИнформационнойБазы());
			
			Проводка.СчетДт             = СтрокаТаблицы.СчетУчетаРасчетовСКонтрагентом;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты", СтрокаТаблицы.Контрагент);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Договоры", 	  СтрокаТаблицы.ДоговорКонтрагента);
			
			Проводка.Сумма       = СтрокаТаблицы.ПроводкиСуммаСНДСРегл;
			
			Если СтрокаТаблицы.СчетУчетаРасчетовСКонтрагентом.Валютный Тогда
				Проводка.ВалютаДт        = СтруктураШапкиДокумента.ВалютаДокумента;
				Проводка.ВалютнаяСуммаДт = СтрокаТаблицы.ПроводкиСуммаСНДСВал;
			КонецЕсли;
						
		КонецЕсли;
		
		// Движение по регистру ИНАГРО_ЗакупкиОрганизаций
		
		ИНАГРО_Общий.ИНАГРО_РегистрацияЗакупки(Движения, СтрокаТаблицы, СтруктураШапкиДокумента);
		
		Проводка.СчетКт = СчетРасчетовСПодотчетником;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "РаботникиОрганизаций", СтруктураШапкиДокумента.ФизЛицо);
		// ИНАГРО--    

		// Проводки по НДС
		Если СтруктураШапкиДокумента.ЕстьНДС и СтрокаТаблицы.ПроводкиСуммаНДСРегл<>0 Тогда

			Проводка = ПроводкиБУ.Добавить();

			Проводка.Период      = Дата;
			Проводка.Организация = СтруктураШапкиДокумента.Организация;

			Проводка.СчетДт      = СтрокаТаблицы.СчетУчетаНДС;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Контрагенты",        СтрокаТаблицы.Контрагент);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Договоры",        	 СтрокаТаблицы.ДоговорКонтрагента);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"ДокументыРасчетовСКонтрагентами", НалоговыйУчет.ОпределитьСделкуНалоговыйУчет(СтрокаТаблицы, Ссылка, СтрокаТаблицы.Сделка));
			
			// ИНАГРО++
			Если ЗначениеЗаполнено(СтрокаТаблицы.СчетУчетаРасчетовСКонтрагентом) Тогда
			
				Проводка.СчетКт = СтрокаТаблицы.СчетУчетаРасчетовСКонтрагентом;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Контрагенты", СтрокаТаблицы.Контрагент);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Договоры", 	  СтрокаТаблицы.ДоговорКонтрагента);
				Если СчетРасчетовСПодотчетником.Валютный Тогда
					Проводка.ВалютаКт        = СтруктураШапкиДокумента.ВалютаДокумента;
					Проводка.ВалютнаяСуммаКт = СтрокаТаблицы.ПроводкиСуммаНДСВал;
				КонецЕсли;
				
			Иначе
				
				Проводка.СчетКт = СчетРасчетовСПодотчетником;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "РаботникиОрганизаций", СтруктураШапкиДокумента.ФизЛицо);
				Если СчетРасчетовСПодотчетником.Валютный Тогда
					Проводка.ВалютаКт        = СтруктураШапкиДокумента.ВалютаДокумента;
					Проводка.ВалютнаяСуммаКт = СтрокаТаблицы.ПроводкиСуммаНДСВал;
				КонецЕсли;
				
			КонецЕсли;
			// ИНАГРО-- 

			Проводка.Сумма       = СтрокаТаблицы.ПроводкиСуммаНДСРегл;
			Проводка.Содержание  = НСтр("ru='НДС (товары)';uk='ПДВ (товари)'",Локализация.КодЯзыкаИнформационнойБазы());

		КонецЕсли;
		
	КонецЦикла; // Проводки по товарам

	// Проводки по авансам по таре
	
	Если ТаблицаПоТаре.Количество()>0 Тогда
		
		ТаблицаПоТареАвансы = ТаблицаПоТаре.Скопировать();
		ТаблицаПоТареАвансы.Свернуть("Контрагент,ДоговорКонтрагента,СчетУчетаРасчетовПоТаре,СчетУчетаРасчетовПоТареПоАвансам","ПроводкиСуммаБезНДСРегл,ПроводкиСуммаНДСРегл,ПроводкиСуммаСНДСРегл,ПроводкиСуммаБезНДСВал,ПроводкиСуммаНДСВал,ПроводкиСуммаСНДСВал");
		
		Для каждого СтрокаТаблицы Из ТаблицаПоТареАвансы Цикл
			// для каждого договора - отдельно запускаем зачет авансов
			СтруктураШапкиДокументаДляАвансов = СтруктураШапкиДокумента;
			СтруктураШапкиДокументаДляАвансов.Вставить("Контрагент",СтрокаТаблицы.Контрагент);
			СтруктураШапкиДокументаДляАвансов.Вставить("ДоговорКонтрагента",СтрокаТаблицы.ДоговорКонтрагента);
			СтруктураШапкиДокументаДляАвансов.Вставить("Сделка",Неопределено);
			СтруктураШапкиДокументаДляАвансов.Вставить("ВедениеВзаиморасчетов",СтрокаТаблицы.ДоговорКонтрагента.ВедениеВзаиморасчетов);
			
			ТаблицыДокумента = Новый Структура();
			ТаблицаПоТареДляАвансов = ТаблицаПоТаре.Скопировать();
			ТаблицаПоТареДляАвансов.Очистить();
			
			СтруктураПоиска = Новый Структура;
			СтруктураПоиска.Вставить("Контрагент",СтрокаТаблицы.Контрагент);
			СтруктураПоиска.Вставить("ДоговорКонтрагента",СтрокаТаблицы.ДоговорКонтрагента);
			СтруктураПоиска.Вставить("СчетУчетаРасчетовПоТаре",СтрокаТаблицы.СчетУчетаРасчетовПоТаре);
			СтруктураПоиска.Вставить("СчетУчетаРасчетовПоТареПоАвансам",СтрокаТаблицы.СчетУчетаРасчетовПоТареПоАвансам);
			НайденныеСтроки = ТаблицаПоТаре.НайтиСтроки(СтруктураПоиска);
			ОбщегоНазначенияБПВызовСервера.ЗагрузитьВТаблицуЗначений(НайденныеСтроки,ТаблицаПоТареДляАвансов);
			
			ТаблицыДокумента.Вставить("ТаблицаПоТаре",ТаблицаПоТареДляАвансов);
				
			//Возможны корректировки сумм при расчетах в валюте
			ТаблицаАвансов = БухгалтерскийУчетРасчетовСКонтрагентами.ЗачетАванса(ЭтотОбъект, СтруктураШапкиДокументаДляАвансов, мВалютаРегламентированногоУчета, ТаблицыДокумента , Отказ, Заголовок,"АВ",,,СтрокаТаблицы.СчетУчетаРасчетовПоТаре, СтрокаТаблицы.СчетУчетаРасчетовПоТареПоАвансам);
			
			//Если были корректировки, их надо вернуть в таблицу тары !
			//Скорректированы могут быть только суммы Регл, скопируем их обратно
			Для Индекс = 0 по НайденныеСтроки.ВГраница() Цикл
				НайденныеСтроки[Индекс].ПроводкиСуммаБезНДСРегл = ТаблицаПоТареДляАвансов[Индекс].ПроводкиСуммаБезНДСРегл;
				НайденныеСтроки[Индекс].ПроводкиСуммаНДСРегл 	= ТаблицаПоТареДляАвансов[Индекс].ПроводкиСуммаНДСРегл;
				НайденныеСтроки[Индекс].ПроводкиСуммаСНДСРегл 	= ТаблицаПоТареДляАвансов[Индекс].ПроводкиСуммаСНДСРегл;
			КонецЦикла; 
		КонецЦикла; 

	КонецЕсли; 

	// Проводки по таре
	Для каждого СтрокаТаблицы Из ТаблицаПоТаре Цикл
		
		// Бухгалтерский учет
		Проводка = ПроводкиБУ.Добавить();

		Проводка.Период      = ДатаДок;
		Проводка.Организация = СтруктураШапкиДокумента.Организация;
		Проводка.Содержание  = НСтр("ru='Возвратная тара';uk='Зворотна тара'",Локализация.КодЯзыкаИнформационнойБазы());
		Проводка.Сумма       = СтрокаТаблицы.ПроводкиСуммаБезНДСРегл;

		Проводка.НалоговоеНазначениеДт   = СтрокаТаблицы.НалоговоеНазначение;
		Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыльДо2015 И
			 СтрокаТаблицы.НеОтноситьНаЗатратыПоНУ = Ложь И 
			 СтрокаТаблицы.НалоговоеНазначение <> Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяНеХозДеятельность Тогда
			 
			 Проводка.СуммаНУДт = СтрокаТаблицы.ПроводкиСуммаБезНДСРегл;
			 
		 КонецЕсли;
		
		Проводка.СчетДт      = СтрокаТаблицы.СчетУчетаБУ;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Номенклатура", СтрокаТаблицы.Номенклатура);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Склады"      , СтрокаТаблицы.Склад); // ИНАГРО

		Если ПартионныйУчетБУ Тогда 
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Партии",Ссылка);
		КонецЕсли;

		Проводка.КоличествоДт = СтрокаТаблицы.Количество;

		Проводка.СчетКт       = СтрокаТаблицы.СчетУчетаРасчетовПоТаре;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Контрагенты"       , СтрокаТаблицы.Контрагент);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Договоры"          , СтрокаТаблицы.ДоговорКонтрагента);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"ДокументыРасчетовСКонтрагентами", УправлениеВзаиморасчетами.ОпределитьДокументРасчетовСКонтрагентом(Ссылка, СтрокаТаблицы.Сделка));
		
		Если СтрокаТаблицы.СчетУчетаРасчетовПоТаре.Валютный Тогда
			Проводка.ВалютаКт        = СтруктураШапкиДокумента.ВалютаДокумента;
			Проводка.ВалютнаяСуммаКт = СтрокаТаблицы.ПроводкиСуммаБезНДСВал;
		КонецЕсли;

	КонецЦикла; // Проводки по таре
	
	//Проводки по расчетам с поставщиками
	Если ТаблицаПоОплатамПоставщикам.Количество() > 0 Тогда

		СтруктураШапкиДокумента.Вставить("КоррСчет", СчетРасчетовСПодотчетником);
		
		Если БухгалтерскийУчетРасчетовСКонтрагентами.ДвижениеДенег(ЭтотОбъект,СтруктураШапкиДокумента,Истина,Отказ,Заголовок)=Ложь тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;

	//Проводки по ТЧ Прочее
	Для каждого СтрокаТаблицы Из ТаблицаПоПрочее Цикл

		Проводка = ПроводкиБУ.Добавить();

		Проводка.Период       = Дата;
		Проводка.Организация  = СтруктураШапкиДокумента.Организация;
		Если СтрокаТаблицы.ЭтоСуточные Тогда
			Проводка.Содержание   = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку( НСтр("ru='Суточные (с %1 по %2, %3 сут.)';uk='Добові (з %1 по %2, %3 доб.)'",Локализация.КодЯзыкаИнформационнойБазы()) ,Формат(СтрокаТаблицы.СуточныеДатаС,"ДЛФ=ДД"),Формат(СтрокаТаблицы.СуточныеДатаПо,"ДЛФ=ДД"), СтрокаТаблицы.КоличествоСуток);
		Иначе
			Проводка.Содержание   = НСтр("ru='Прочие поступления';uk='Інші надходження'",Локализация.КодЯзыкаИнформационнойБазы());
		КонецЕсли;
		
		Проводка.Сумма        = СтрокаТаблицы.ПроводкиСуммаБезНДСРегл;
		
		Проводка.НалоговоеНазначениеДт       = СтрокаТаблицы.НалоговоеНазначениеДоходовИЗатрат;
		Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыльДо2015 И
			СтрокаТаблицы.НалоговоеНазначение <> Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяНеХозДеятельность Тогда
			
			Если СтрокаТаблицы.ЭтоСуточные Тогда
				Проводка.СуммаНУДт = СтрокаТаблицы.СуммаНУ;
			Иначе
				Если СтрокаТаблицы.НеОтноситьНаЗатратыПоНУ = Ложь Тогда
					Проводка.СуммаНУДт = СтрокаТаблицы.ПроводкиСуммаБезНДСРегл;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;

		Проводка.СчетДт       = СтрокаТаблицы.СчетЗатрат;
		
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтрокаТаблицы.Субконто1);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, СтрокаТаблицы.Субконто2);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, СтрокаТаблицы.Субконто3);

		// ИНАГРО++
		Если СчетРасчетовСПодотчетником.Валютный Тогда
			Проводка.ВалютаКт        = СтруктураШапкиДокумента.ВалютаДокумента;
			Проводка.ВалютнаяСуммаКт = СтрокаТаблицы.ПроводкиСуммаБезНДСВал;
		КонецЕсли;

		Если ЗначениеЗаполнено(СтрокаТаблицы.СчетУчетаРасчетовСКонтрагентом) Тогда
						
			Проводка.СчетКт      = СтрокаТаблицы.СчетУчетаРасчетовСКонтрагентом;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Контрагенты", СтрокаТаблицы.Контрагент);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Договоры", 	  СтрокаТаблицы.ДоговорКонтрагента);
			
			Проводка = ПроводкиБУ.Добавить();
			                                 			
			Проводка.Период      = ДатаДок;
			Проводка.Организация = СтруктураШапкиДокумента.Организация;
			Проводка.Содержание  = НСтр("ru='Прочие поступления';uk='Інші надходження'", Локализация.КодЯзыкаИнформационнойБазы());
			
			Проводка.СчетДт      = СтрокаТаблицы.СчетУчетаРасчетовСКонтрагентом;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты", СтрокаТаблицы.Контрагент);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Договоры", 	  СтрокаТаблицы.ДоговорКонтрагента);
			
			Проводка.Сумма = СтрокаТаблицы.ПроводкиСуммаСНДСРегл;
			
			Если СтрокаТаблицы.СчетУчетаРасчетовСКонтрагентом.Валютный Тогда
				Проводка.ВалютаДт        = СтруктураШапкиДокумента.ВалютаДокумента;
				Проводка.ВалютнаяСуммаДт = СтрокаТаблицы.ПроводкиСуммаСНДСВал;
			КонецЕсли;  
			
		КонецЕсли;
		
		Проводка.СчетКт             = СчетРасчетовСПодотчетником;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "РаботникиОрганизаций", СтруктураШапкиДокумента.ФизЛицо);
		// ИНАГРО--

		// Проводка по НДС
		Если СтруктураШапкиДокумента.ЕстьНДС И СтрокаТаблицы.ПроводкиСуммаНДСРегл > 0 Тогда
			Проводка = ПроводкиБУ.Добавить();
			
			Проводка.Период       = Дата;
			Проводка.Организация  = СтруктураШапкиДокумента.Организация;
			Проводка.Сумма        = СтрокаТаблицы.ПроводкиСуммаНДСРегл;
			Проводка.Содержание   = НСтр("ru='НДС (прочие поступления)';uk='ПДВ (інші надходження)'",Локализация.КодЯзыкаИнформационнойБазы());

			Проводка.СчетДт       = СтрокаТаблицы.СчетУчетаНДС;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,     "Контрагенты",             СтрокаТаблицы.Контрагент);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,     "Договоры",                СтрокаТаблицы.ДоговорКонтрагента);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,	 "ДокументыРасчетовСКонтрагентами", НалоговыйУчет.ОпределитьСделкуНалоговыйУчет(СтрокаТаблицы, Ссылка, СтрокаТаблицы.Сделка));
			
			// ИНАГРО++
			Если ЗначениеЗаполнено(СтрокаТаблицы.СчетУчетаРасчетовСКонтрагентом) Тогда
			
				Проводка.СчетКт = СтрокаТаблицы.СчетУчетаРасчетовСКонтрагентом;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Контрагенты", СтрокаТаблицы.Контрагент);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Договоры", 	  СтрокаТаблицы.ДоговорКонтрагента);
				Если СчетРасчетовСПодотчетником.Валютный Тогда
					Проводка.ВалютаКт        = СтруктураШапкиДокумента.ВалютаДокумента;
					Проводка.ВалютнаяСуммаКт = СтрокаТаблицы.ПроводкиСуммаНДСВал;
				КонецЕсли;
				
			Иначе
				
				Проводка.СчетКт = СчетРасчетовСПодотчетником;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "РаботникиОрганизаций", СтруктураШапкиДокумента.ФизЛицо);
				Если СчетРасчетовСПодотчетником.Валютный Тогда
					Проводка.ВалютаКт        = СтруктураШапкиДокумента.ВалютаДокумента;
					Проводка.ВалютнаяСуммаКт = СтрокаТаблицы.ПроводкиСуммаНДСВал;
				КонецЕсли;
				
			КонецЕсли;
			// ИНАГРО--

		КонецЕсли; // Проводка по НДС

	КонецЦикла;
	
	//Учет курсовых разниц
	Если (ВалютаДокумента <> мВалютаРегламентированногоУчета) тогда
		БухгалтерскийУчетРед12.ПереоценкаСчетовДокументаРегл(ЭтотОбъект,СтруктураШапкиДокумента, мВалютаРегламентированногоУчета,Отказ,Заголовок);
	КонецЕсли; // Учет курсовых разниц
	
	Если СтруктураШапкиДокумента.ЕстьЕдиныйНалог Тогда
		ДвиженияПоЕдиномуНалогу(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоОплатамПоставщикам, ТаблицаПоПрочее,Отказ);
	КонецЕсли;

	// ИНАГРО++
	// Движения по регистру ИНАГРО_ТоварыНаСкладах
    Если ИНАГРО_ВидПоступления = Перечисления.ИНАГРО_ВидыПоступленияТоваров.ПоОрдеру Тогда
		
		// Товары
		НаборДвижений = Движения.ИНАГРО_ТоварыНаСкладах;
        
        ТаблицаДвижений = НаборДвижений.ВыгрузитьКолонки();       
        
        ОбщегоНазначенияБПВызовСервера.ЗагрузитьВТаблицуЗначений(ТаблицаПоТоварам, ТаблицаДвижений);
        
        НаборДвижений.мПериод            = Дата;
        НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;
        
        // Проверка остатков при оперативном проведении.
        Если РежимПроведения = РежимПроведенияДокумента.Оперативный Тогда
            НаборДвижений.КонтрольОстатков(ЭтотОбъект, "Товары", СтруктураШапкиДокумента, Отказ, Заголовок);
		КонецЕсли;
		
        ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.Организация, "Организация");
        
        Если Не Отказ Тогда
            Движения.ИНАГРО_ТоварыНаСкладах.ВыполнитьРасход();
        КонецЕсли;
        
        // ВозвратнаяТара
        НаборДвижений = Движения.ИНАГРО_ТоварыНаСкладах;        
       
        ТаблицаДвижений = НаборДвижений.ВыгрузитьКолонки();
        
        ОбщегоНазначенияБПВызовСервера.ЗагрузитьВТаблицуЗначений(ТаблицаПоТаре, ТаблицаДвижений);        
       
		Если НЕ(ИНАГРО_ВидПоступления = Перечисления.ИНАГРО_ВидыПоступленияТоваров.ПоОрдеру И ИНАГРО_ОрдерВТЧ)
			ИЛИ НЕ ИНАГРО_СкладВТЧ Тогда     
			ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.Склад, "Склад");
		КонецЕсли; 
		ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.Организация, "Организация");
		ТаблицаДвижений.ЗаполнитьЗначения(Истина,                              "ВозвратнаяТара");
        
        НаборДвижений.мПериод            = Дата;
        НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;
        
        // Проверка остатков при оперативном проведении.
        Если РежимПроведения = РежимПроведенияДокумента.Оперативный  Тогда
            НаборДвижений.КонтрольОстатков(ЭтотОбъект, "ВозвратнаяТара", СтруктураШапкиДокумента, Отказ, Заголовок);
        КонецЕсли;
        
        Если НЕ Отказ Тогда
            Движения.ИНАГРО_ТоварыНаСкладах.ВыполнитьРасход();
		КонецЕсли;
		
    КонецЕсли;
	
	Если ИНАГРО_ОбщийВызовСервераПовтИсп.ЕстьБСПУ() Тогда
		Если ИНАГРО_ВидПоступления = Перечисления.ИНАГРО_ВидыПоступленияТоваров.НаСклад Тогда
			ИНАГРО_Общий.ИНАГРО_ВедомостьДвиженийПриход(Движения, ТаблицаПоТоварам, СтруктураШапкиДокумента);
		КонецЕсли; 
	КонецЕсли;	
	// ИНАГРО--

КонецПроцедуры // ДвиженияПоРегистрамБухгалтерии()

Процедура ДвиженияПоРегистрамНалоговогоУчета(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоТаре, ТаблицаПоВыданныеАвансы, ТаблицаПоОплатамПоставщикам, ТаблицаПоПрочее, Отказ)
	
	
	Если Не СтруктураШапкиДокумента.ЕстьНДС Тогда
		// Если не нужно отражать в налоговом учете, тогда не отражаем и в подсистеме учета НДС
		Возврат;
	КонецЕсли;
	
	// в начале сделаем прводки по оплате поставщикам
	Если СтруктураШапкиДокумента.ЕстьНДС Тогда
		
		Если ТаблицаПоОплатамПоставщикам.Количество() > 0 Тогда
			РеестрПлатежей = НалоговыйУчет.ПодготовитьТаблицуОплатДляНалоговогоУчета(СтруктураШапкиДокумента);
			НалоговыйУчет.ДвиженияПоРегистрамНалоговогоУчетаПлатежныхДокументов(ЭтотОбъект,СтруктураШапкиДокумента,РеестрПлатежей,Отказ);
	    КонецЕсли;
		
	КонецЕсли;

	// Движения по регистру ПриобретенияНалоговыйУчет
	  
  	НаборДвижений = Движения.ПриобретенияНалоговыйУчет;
			
	ТаблицаДвижений = НаборДвижений.Выгрузить();
			
	ТаблицаДвижений.Очистить();
	ТаблицаДвиженийОплата = ТаблицаДвижений.Скопировать();
	ТаблицаДвиженийТара   = ТаблицаДвижений.Скопировать();
		
	//ТОВАРЫ
	ТаблицаКопия = ТаблицаПоТоварам.Скопировать();
	СтрокиКУдалению = Новый Массив;
	Для каждого Строка Из ТаблицаКопия Цикл
		Если НЕ ЗначениеЗаполнено(Строка.ДоговорКонтрагента) Тогда
			СтрокиКУдалению.Добавить(Строка);
		Иначе
			Строка.Сделка = НалоговыйУчет.ОпределитьСделкуНалоговыйУчет(Строка, СтруктураШапкиДокумента.Ссылка, Строка.Сделка);
			
			Если Строка.СложныйНалоговыйУчет Тогда
				
				// очистим налоговые реквизиты
				Строка.СтавкаНДС = Перечисления.СтавкиНДС.ПустаяСсылка();
				Строка.ДляХозяйственнойДеятельности = Ложь;
				Строка.ВидДеятельностиНДС = Перечисления.ВидыДеятельностиНДС.ПустаяСсылка();
				Строка.Амортизируется = Ложь;
				Строка.СуммаНДСВал = 0;
				
			Иначе		
				// упрощенный налоговый учет
				Если НЕ СтруктураШапкиДокумента.ЕстьНДС Тогда
					Строка.СтавкаНДС = Перечисления.СтавкиНДС.ПустаяСсылка();
					Строка.ДляХозяйственнойДеятельности = Ложь;
					Строка.ВидДеятельностиНДС = Перечисления.ВидыДеятельностиНДС.ПустаяСсылка();
					Строка.СуммаНДСВал = 0;
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Для Каждого СтрокаТаблицы из СтрокиКУдалению Цикл
		ТаблицаКопия.Удалить(СтрокаТаблицы);
	КонецЦикла;                                                                                                    
	ТаблицаКопия.Свернуть("ДоговорКонтрагента, Сделка, СтавкаНДС, ДляХозяйственнойДеятельности,ВидДеятельностиНДС, Амортизируется","СуммаСНДСВал, СуммаНДСВал, СуммаНДСВалИсходный");
	ТаблицаПриобретений = ТаблицаКопия.Скопировать();
		
	//ПРОЧЕЕ
	
	ТаблицаКопия = ТаблицаПоПрочее.Скопировать();
	СтрокиКУдалению = Новый Массив;
	Для Каждого СтрокаТаблицы Из ТаблицаКопия Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ДоговорКонтрагента) Тогда
			СтрокиКУдалению.Добавить(СтрокаТаблицы);
		Иначе
			СтрокаТаблицы.Сделка = НалоговыйУчет.ОпределитьСделкуНалоговыйУчет(СтрокаТаблицы, СтруктураШапкиДокумента.Ссылка, СтрокаТаблицы.Сделка);	
			

			Если СтрокаТаблицы.СложныйНалоговыйУчет Тогда
				
				// очистим налоговые реквизиты
				СтрокаТаблицы.СтавкаНДС = Перечисления.СтавкиНДС.ПустаяСсылка();
				СтрокаТаблицы.ДляХозяйственнойДеятельности = Ложь;
				СтрокаТаблицы.ВидДеятельностиНДС = Перечисления.ВидыДеятельностиНДС.ПустаяСсылка();
				СтрокаТаблицы.Амортизируется = Ложь;
				СтрокаТаблицы.СуммаНДСВал = 0;
				
			Иначе		
				// упрощенный налоговый учет
				Если НЕ СтруктураШапкиДокумента.ЕстьНДС Тогда
					СтрокаТаблицы.СтавкаНДС = Перечисления.СтавкиНДС.ПустаяСсылка();
					СтрокаТаблицы.ДляХозяйственнойДеятельности = Ложь;
					СтрокаТаблицы.ВидДеятельностиНДС = Перечисления.ВидыДеятельностиНДС.ПустаяСсылка();
					СтрокаТаблицы.СуммаНДСВал = 0;
				КонецЕсли;
				
			КонецЕсли;	
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого СтрокаТаблицы из СтрокиКУдалению Цикл
		ТаблицаКопия.Удалить(СтрокаТаблицы);
	КонецЦикла;
	ТаблицаКопия.Свернуть("ДоговорКонтрагента, Сделка, СтавкаНДС, ДляХозяйственнойДеятельности,ВидДеятельностиНДС,Амортизируется","СуммаСНДСВал, СуммаНДСВал, СуммаНДСВалИсходный");
	ОбщегоНазначенияБПВызовСервера.ЗагрузитьВТаблицуЗначений(ТаблицаКопия, ТаблицаПриобретений);
	ТаблицаПриобретений.Свернуть("ДоговорКонтрагента, Сделка, СтавкаНДС, ДляХозяйственнойДеятельности,ВидДеятельностиНДС,Амортизируется","СуммаСНДСВал, СуммаНДСВал, СуммаНДСВалИсходный");
	
	ТаблицаПриобретений.Колонки.Добавить("СуммаНДСПропорционально");
	Для каждого СтрокаКопии Из ТаблицаПриобретений Цикл
		Если СтрокаКопии.ВидДеятельностиНДС = Перечисления.ВидыДеятельностиНДС.ПропорциональноОблагаемая Тогда
			СтрокаКопии.СуммаНДСПропорционально = СтрокаКопии.СуммаНДСВал;
			СтрокаКопии.СуммаНДСВал = СтрокаКопии.СуммаНДСВалИсходный;
		КонецЕсли;
	КонецЦикла;
	
	ТаблицаПриобретений.Колонки.СуммаСНДСВал.Имя = "СуммаВзаиморасчетов";
	ТаблицаПриобретений.Колонки.СуммаНДСВал.Имя = "СуммаНДС";
	ОбщегоНазначенияБПВызовСервера.ЗагрузитьВТаблицуЗначений(ТаблицаПриобретений, ТаблицаДвижений);
	
	// полученные подотчетником ценности им же и оплачены. Покажем оплату поставщику
	ОбщегоНазначенияБПВызовСервера.ЗагрузитьВТаблицуЗначений(ТаблицаПриобретений, ТаблицаДвиженийОплата);
		
	ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.Организация, "Организация");
	ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СобытияПриобретенияНалоговыйУчет.ПоступлениеОтПоставщика, "Событие");
		
	ТаблицаДвиженийОплата.ЗаполнитьЗначения(СтруктураШапкиДокумента.Организация, "Организация");
	ТаблицаДвиженийОплата.ЗаполнитьЗначения(Перечисления.СобытияПриобретенияНалоговыйУчет.ОплатаПоставщику, "Событие");
		
	//ТАРА
	ТаблицаКопия = ТаблицаПоТаре.Скопировать();
	Для каждого Строка Из ТаблицаКопия Цикл
		Строка.Сделка = НалоговыйУчет.ОпределитьСделкуНалоговыйУчет(Строка, СтруктураШапкиДокумента.Ссылка, Строка.Сделка);
		Если Строка.СложныйНалоговыйУчет Тогда
			
			// очистим налоговые реквизиты
			Строка.СтавкаНДС = Перечисления.СтавкиНДС.ПустаяСсылка();
			Строка.ДляХозяйственнойДеятельности = Ложь;
			Строка.ВидДеятельностиНДС = Перечисления.ВидыДеятельностиНДС.ПустаяСсылка();
			Строка.СуммаНДСВал = 0;
			
		Иначе		
			// упрощенный налоговый учет
			Если НЕ СтруктураШапкиДокумента.ЕстьНДС Тогда
				Строка.СтавкаНДС = Перечисления.СтавкиНДС.ПустаяСсылка();
				Строка.ДляХозяйственнойДеятельности = Ложь;
				Строка.ВидДеятельностиНДС = Перечисления.ВидыДеятельностиНДС.ПустаяСсылка();
				Строка.СуммаНДСВал = 0;
			КонецЕсли;
		КонецЕсли;		
	КонецЦикла;
	
	
	ТаблицаКопия.Свернуть("ДоговорКонтрагента, Сделка, СтавкаНДС, ДляХозяйственнойДеятельности,ВидДеятельностиНДС","СуммаСНДСВал, СуммаНДСВал");
	
	ТаблицаКопия.Колонки.СуммаСНДСВал.Имя = "СуммаВзаиморасчетов";
	ТаблицаКопия.Колонки.СуммаНДСВал.Имя = "СуммаНДС";
		
	ОбщегоНазначенияБПВызовСервера.ЗагрузитьВТаблицуЗначений(ТаблицаКопия, ТаблицаДвиженийТара);
		
	ТаблицаДвиженийТара.ЗаполнитьЗначения(СтруктураШапкиДокумента.Организация, "Организация");
	ТаблицаДвиженийТара.ЗаполнитьЗначения(Истина, "ВозвратнаяТара");
	ТаблицаДвиженийТара.ЗаполнитьЗначения(Перечисления.СобытияПриобретенияНалоговыйУчет.ПоступлениеОтПоставщика, "Событие");

	Если НЕ Отказ И ТаблицаДвижений.Количество() > 0 Тогда
				
		НаборДвижений.мПериод          = Дата;
		НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;
			
		Движения.ПриобретенияНалоговыйУчет.ВыполнитьПриход();
		Движения.ПриобретенияНалоговыйУчет.Записать();
			
		НаборДвижений.мПериод          = Дата;
		НаборДвижений.мТаблицаДвижений = ТаблицаДвиженийОплата;
			
		Движения.ПриобретенияНалоговыйУчет.ВыполнитьПриход();
		Движения.ПриобретенияНалоговыйУчет.Записать();
				
	КонецЕсли;		
		
	Если НЕ Отказ И ТаблицаДвиженийТара.Количество() > 0 Тогда
				
		НаборДвижений.мПериод          = Дата;
		НаборДвижений.мТаблицаДвижений = ТаблицаДвиженийТара;
			
		Движения.ПриобретенияНалоговыйУчет.ВыполнитьПриход();
		Движения.ПриобретенияНалоговыйУчет.Записать();
				
	КонецЕсли;
 	
	// Движения по регистру ОжидаемыйИПодтвержденныйНДСПриобретений

	НаборДвижений = Движения.ОжидаемыйИПодтвержденныйНДСПриобретений;
	
	// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	ТаблицаДвижений.Очистить();
	ТаблицаДвиженийТара = ТаблицаДвижений.Скопировать();	
	
	// ТОВАРЫ
	ТаблицаКопия = ТаблицаПоТоварам.Скопировать();
	СтрокиКУдалению = Новый Массив;
	Для каждого Строка Из ТаблицаКопия Цикл
		Если НЕ ЗначениеЗаполнено(Строка.ДоговорКонтрагента)
			ИЛИ НЕ (Строка.ДоговорКонтрагента.ВалютаВзаиморасчетов = мВалютаРегламентированногоУчета) Тогда
			СтрокиКУдалению.Добавить(Строка);
		Иначе
			Строка.Сделка = НалоговыйУчет.ОпределитьСделкуНалоговыйУчет(Строка, СтруктураШапкиДокумента.Ссылка, Строка.Сделка);
		КонецЕсли;
	КонецЦикла;
	Для Каждого СтрокаТаблицы из СтрокиКУдалению Цикл
		ТаблицаКопия.Удалить(СтрокаТаблицы);
	КонецЦикла;
	ТаблицаКопия.Свернуть("ДоговорКонтрагента,Сделка, СтавкаНДС,ДляХозяйственнойДеятельности,ВидДеятельностиНДС,Амортизируется","СуммаБезНДСВал,СуммаНДСВал,СуммаНДСВалИсходный");
	ТаблицаПриобретений = ТаблицаКопия.Скопировать();
	
	// ПРОЧЕЕ
	// Если для строки не указан договор взаиморасчетов, то и записивать в регистр её не нужно
	ТаблицаКопия = ТаблицаПоПрочее.Скопировать();
	СтрокиКУдалению = Новый Массив;
	Для Каждого Строка Из ТаблицаКопия Цикл
		Если НЕ ЗначениеЗаполнено(Строка.ДоговорКонтрагента)
			ИЛИ НЕ (Строка.ДоговорКонтрагента.ВалютаВзаиморасчетов = мВалютаРегламентированногоУчета) Тогда
			СтрокиКУдалению.Добавить(Строка);
		Иначе
			Строка.Сделка = НалоговыйУчет.ОпределитьСделкуНалоговыйУчет(Строка, СтруктураШапкиДокумента.Ссылка, Строка.Сделка);
		КонецЕсли;
	КонецЦикла;
	Для Каждого СтрокаТаблицы из СтрокиКУдалению Цикл
		ТаблицаКопия.Удалить(СтрокаТаблицы);
	КонецЦикла;
	ТаблицаКопия.Свернуть("ДоговорКонтрагента,Сделка,СтавкаНДС,ДляХозяйственнойДеятельности,ВидДеятельностиНДС,Амортизируется","СуммаБезНДСВал,СуммаНДСВал,СуммаНДСВалИсходный");
	ОбщегоНазначенияБПВызовСервера.ЗагрузитьВТаблицуЗначений(ТаблицаКопия, ТаблицаПриобретений);
	
	ТаблицаПриобретений.Свернуть("ДоговорКонтрагента,Сделка,СтавкаНДС,ДляХозяйственнойДеятельности,ВидДеятельностиНДС,Амортизируется","СуммаБезНДСВал,СуммаНДСВал,СуммаНДСВалИсходный");
	
	ТаблицаПриобретений.Колонки.Добавить("СуммаНДСПропорционально");
	Для каждого СтрокаКопии Из ТаблицаПриобретений Цикл
		Если СтрокаКопии.ВидДеятельностиНДС = Перечисления.ВидыДеятельностиНДС.ПропорциональноОблагаемая Тогда
			СуммаСНДСВал = СтрокаКопии.СуммаБезНДСВал  + СтрокаКопии.СуммаНДСВал;
			СтрокаКопии.СуммаНДСПропорционально = СтрокаКопии.СуммаНДСВал;
			СтрокаКопии.СуммаНДСВал 			= СтрокаКопии.СуммаНДСВалИсходный;
			СтрокаКопии.СуммаБезНДСВал 			= СуммаСНДСВал - СтрокаКопии.СуммаНДСВал;
		КонецЕсли;
	КонецЦикла;
	
	ТаблицаПриобретений.Колонки.СуммаБезНДСВал.Имя = "БазаНДС";
	ТаблицаПриобретений.Колонки.СуммаНДСВал   .Имя = "СуммаНДС";
	
	ОбщегоНазначенияБПВызовСервера.ЗагрузитьВТаблицуЗначений(ТаблицаПриобретений, ТаблицаДвижений);
	
	ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.Организация,"Организация");
	ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СобытияОжидаемыйИПодтвержденныйНДСПриобретений.Поступление, 		 "СобытиеНДС");
	ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.КодыОперацийОжидаемыйИПодтвержденныйНДСПриобретений.ОжидаемыйНДС, "КодОперации");
	
	// ТАРА
	ТаблицаКопия = ТаблицаПоТаре.Скопировать();
	Для каждого Строка Из ТаблицаКопия Цикл
		Строка.Сделка = НалоговыйУчет.ОпределитьСделкуНалоговыйУчет(Строка, СтруктураШапкиДокумента.Ссылка, Строка.Сделка);
	КонецЦикла;	
	ТаблицаКопия.Свернуть("ДоговорКонтрагента, Сделка, СтавкаНДС,ДляХозяйственнойДеятельности,ВидДеятельностиНДС,Амортизируется","СуммаБезНДСВал,СуммаНДСВал");
	ТаблицаКопия.Колонки.СуммаБезНДСВал.Имя = "БазаНДС";
	ТаблицаКопия.Колонки.СуммаНДСВал   .Имя = "СуммаНДС";
	
	ОбщегоНазначенияБПВызовСервера.ЗагрузитьВТаблицуЗначений(ТаблицаКопия, ТаблицаДвиженийТара);
	ТаблицаДвиженийТара.ЗаполнитьЗначения(СтруктураШапкиДокумента.Организация,"Организация");
	ТаблицаДвиженийТара.ЗаполнитьЗначения(Истина,							  "ВозвратнаяТара");
	ТаблицаДвиженийТара.ЗаполнитьЗначения(Перечисления.СобытияОжидаемыйИПодтвержденныйНДСПриобретений.Поступление, 		 "СобытиеНДС");
	ТаблицаДвиженийТара.ЗаполнитьЗначения(Перечисления.КодыОперацийОжидаемыйИПодтвержденныйНДСПриобретений.ОжидаемыйНДС, "КодОперации");
		
	Если НЕ Отказ И ТаблицаДвижений.Количество() > 0 Тогда
					
		НаборДвижений.мПериод          = Дата;
		НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;
					
		Движения.ОжидаемыйИПодтвержденныйНДСПриобретений.ВыполнитьПриход();
		Движения.ОжидаемыйИПодтвержденныйНДСПриобретений.Записать();
					
	КонецЕсли;

	Если НЕ Отказ И ТаблицаДвиженийТара.Количество() > 0 Тогда
					
		НаборДвижений.мПериод          = Дата;
		НаборДвижений.мТаблицаДвижений = ТаблицаДвиженийТара;
					
		Движения.ОжидаемыйИПодтвержденныйНДСПриобретений.ВыполнитьПриход();
		Движения.ОжидаемыйИПодтвержденныйНДСПриобретений.Записать();
					
	КонецЕсли;

КонецПроцедуры

Процедура ДвиженияПоЕдиномуНалогу(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоОплатамПоставщикам, ТаблицаПоПрочее,Отказ)
	
	РеестрПлатежейПоЕдиномуНалогу = Новый ТаблицаЗначений;
	РеестрПлатежейПоЕдиномуНалогу.Колонки.Добавить("ГривневаяСумма",Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,3)));
	РеестрПлатежейПоЕдиномуНалогу.Колонки.Добавить("СуммаНДС",Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	РеестрПлатежейПоЕдиномуНалогу.Колонки.Добавить("СтатьяДекларацииПоЕдиномуНалогу");
	РеестрПлатежейПоЕдиномуНалогу.Колонки.Добавить("СтоимостьОС", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(5,0)));		
    	
	ТаблицаКопия = ТаблицаПоТоварам.Скопировать();
	ТаблицаКопия.Свернуть("СтатьяДекларацииПоЕдиномуНалогу", "СуммаСНДСРегл, СуммаНДСРегл");
	ТаблицаКопия.Колонки.СуммаСНДСРегл.Имя = "ГривневаяСумма";
	ТаблицаКопия.Колонки.СуммаНДСРегл.Имя = "СуммаНДС";
	ОбщегоНазначенияБПВызовСервера.ЗагрузитьВТаблицуЗначений(ТаблицаКопия, РеестрПлатежейПоЕдиномуНалогу);

	ТаблицаКопия = ТаблицаПоПрочее.Скопировать();
	ТаблицаКопия.Свернуть("СтатьяДекларацииПоЕдиномуНалогу", "СуммаСНДСРегл, СуммаНДСРегл");
	ТаблицаКопия.Колонки.СуммаСНДСРегл.Имя = "ГривневаяСумма";
	ТаблицаКопия.Колонки.СуммаНДСРегл.Имя = "СуммаНДС";
	ОбщегоНазначенияБПВызовСервера.ЗагрузитьВТаблицуЗначений(ТаблицаКопия, РеестрПлатежейПоЕдиномуНалогу);
	
	ТаблицаКопия = ТаблицаПоОплатамПоставщикам.Скопировать();
	ТаблицаКопия.Свернуть("СтатьяДекларацииПоЕдиномуНалогу", "ПроводкаСуммаСНДСРегл, СуммаНДСРегл");
	ТаблицаКопия.Колонки.ПроводкаСуммаСНДСРегл.Имя = "ГривневаяСумма";
	ТаблицаКопия.Колонки.СуммаНДСРегл.Имя = "СуммаНДС";
	ОбщегоНазначенияБПВызовСервера.ЗагрузитьВТаблицуЗначений(ТаблицаКопия, РеестрПлатежейПоЕдиномуНалогу);

	НалоговыйУчет.ДвиженияПоЕдиномуНалогуРасчеты(ЭтотОбъект,СтруктураШапкиДокумента,РеестрПлатежейПоЕдиномуНалогу,Отказ);
		
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)

	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьВозвратнуюТару")
		И ВозвратнаяТара.Количество() > 0 Тогда
		ВозвратнаяТара.Очистить();
	КонецЕсли;

	ПлательщикНДС = УчетнаяПолитика.ПлательщикНДС(Организация, Дата);
	ЕстьНалогНаПрибыльДо2015 = УчетнаяПолитика.ПлательщикНалогаНаПрибыльДо2015(Организация, Дата);	
	
	Для каждого СтрокаТаблицы Из Прочее Цикл
		Если СтрокаТаблицы.ЭтоСуточные Тогда
			СтрокаТаблицы.Контрагент                    = Неопределено;
			СтрокаТаблицы.ДоговорКонтрагента            = Неопределено;
			СтрокаТаблицы.Сделка                        = Неопределено;
			СтрокаТаблицы.СтавкаНДС                     = Перечисления.СтавкиНДС.НеНДС;
			СтрокаТаблицы.СуммаНДС                      = 0;
			СтрокаТаблицы.СуммаНДСПропорциональноКредит = 0;
		Иначе
			// для не суточных смысла не имеют
			СтрокаТаблицы.КомандировкаЗарубеж = Ложь;
			СтрокаТаблицы.СуточныеДатаС       = '00010101';
			СтрокаТаблицы.СуточныеДатаПо      = '00010101';
			СтрокаТаблицы.КоличествоСуток     = 0;
			СтрокаТаблицы.СуммаНУ             = 0;
		КонецЕсли;
		
		Если НЕ ЕстьНалогНаПрибыльДо2015 Тогда
			СтрокаТаблицы.НалоговоеНазначениеДоходовИЗатрат = Неопределено;
		КонецЕсли;
	КонецЦикла;
	
	Если Не ПлательщикНДС Тогда
		// организация - не плательщик НДС. Установим во всех ТЧ признак соответствующего учета НДС
		НеОБлНДСДеятельность = Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяХозДеятельность;
		
		Для каждого СтрокаТЧ  Из Товары Цикл
		    СтрокаТЧ.НалоговоеНазначение = НеОБлНДСДеятельность;
		КонецЦикла; 
		Для каждого СтрокаТЧ  Из Прочее Цикл
		    СтрокаТЧ.НалоговоеНазначение = НеОБлНДСДеятельность;
		КонецЦикла; 
		
	КонецЕсли; 
	
	// Посчитать суммы документа и записать ее в соответствующий реквизит шапки для показа в журналах
	СуммаДокумента = УчетНДС.ПолучитьСуммуДокументаСНДС(ЭтотОбъект, "Товары") 
		+ ОплатаПоставщикам.Итог("Сумма") 
		+ УчетНДС.ПолучитьСуммуДокументаСНДС(ЭтотОбъект, "Прочее");
		
	
	ДополнительныеСвойства.Вставить("РежимЗаписи", РежимЗаписи);

КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)

	ТипДанныхЗаполнения = ТипЗнч(ДанныеЗаполнения);
	Если ТипДанныхЗаполнения = Тип("ДокументСсылка.РасходныйКассовыйОрдер") Тогда
		
		Если ДанныеЗаполнения.ВидОперации <> Перечисления.ВидыОперацийРКО.ВыдачаДенежныхСредствПодотчетнику Тогда
			ТекстОшибки = НСтр("ru='Авансовый отчет можно вводить только на основании расходного кассового ордера от подотчетника!';uk='Авансовий звіт можна вводити тільки на підставі вибуткового касового ордера від підзвітної особи!'");
			ВызватьИсключение ТекстОшибки;
		КонецЕсли;
		
		ЗаполнениеДокументов.ЗаполнитьПоОснованию(ЭтотОбъект, ДанныеЗаполнения);

		ФизЛицо = ДанныеЗаполнения.Контрагент;
		
		// Курс должен быть на дату документа основания
		СтруктураКурсаДокумента = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаДокумента, ДанныеЗаполнения.Дата);
		КурсДокумента           = СтруктураКурсаДокумента.Курс;
		КратностьДокумента      = СтруктураКурсаДокумента.Кратность;
		
		СтрокаТабличнойЧасти 				= ВыданныеАвансы.Добавить();
		СтрокаТабличнойЧасти.ДокументАванса = ДанныеЗаполнения.Ссылка;
		
	// ИНАГРО++	
	ИначеЕсли ТипДанныхЗаполнения = Тип("ДокументСсылка.ИНАГРО_ПриходныйОрдерНаТовары")
		    И ДанныеЗаполнения.ВидОперации = Перечисления.Инагро_ВидыОперацийПриходныйОрдер.ОтПодотчетника Тогда 	   
	   
		ЗаполнениеДокументов.ЗаполнитьПоОснованию(ЭтотОбъект, ДанныеЗаполнения);

		ИНАГРО_ВидПоступления = Перечисления.ИНАГРО_ВидыПоступленияТоваров.ПоОрдеру;
		Склад                 = ДанныеЗаполнения;
		ФизЛицо               = ДанныеЗаполнения.ФизЛицо;		
		СуммаВключаетНДС      = Истина; 		

		Если ЗначениеЗаполнено(ДанныеЗаполнения.Контрагент) Тогда
			Если  ДанныеЗаполнения.Контрагент.ОсновнойДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком
				И ДанныеЗаполнения.Контрагент.ОсновнойДоговорКонтрагента.Организация = Организация Тогда
                ДоговорКонтрагента = ДанныеЗаполнения.Контрагент.ОсновнойДоговорКонтрагента;
              	ТипЦен = ДоговорКонтрагента.ТипЦен;
          КонецЕсли;	
		КонецЕсли;
		
		Если ДанныеЗаполнения.Проведен Тогда
			// Заполним табличные части по приходному ордеру на товары.
			Документы.АвансовыйОтчет.ЗаполнитьПоПриходномуОрдеру(ЭтотОбъект, "Товары",         ДанныеЗаполнения);
			Документы.АвансовыйОтчет.ЗаполнитьПоПриходномуОрдеру(ЭтотОбъект, "ВозвратнаяТара", ДанныеЗаполнения);
		КонецЕсли;
	// ИНАГРО--
	
	Иначе
		СуммаВключаетНДС = Ложь;		
	КонецЕсли;

	ЗаполнениеДокументов.Заполнить(ЭтотОбъект, ДанныеЗаполнения);

КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	Перем Заголовок, СтруктураШапкиДокумента;
	Перем ТаблицаПоТоварам, ТаблицаПоТаре, ТаблицаПоАвансам, ТаблицаПоОплате, ТаблицаПоПрочее;

	// ПОДГОТОВКА ПРОВЕДЕНИЯ ПО ДАННЫМ ДОКУМЕНТА
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКПроведению(ЭтотОбъект);
	Если РучнаяКорректировка Тогда
		Возврат;
	КонецЕсли;
	
    мВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначенияБПВызовСервера.ПредставлениеДокументаПриПроведении(Ссылка);

	ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента);
	ПодготовитьПараметрыУчетнойПолитики(СтруктураШапкиДокумента, Отказ, Заголовок);	
	ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоТаре, ТаблицаПоАвансам, ТаблицаПоОплате, ТаблицаПоПрочее, Отказ, Заголовок);

	// Движения по документу
	Если Не Отказ Тогда
		ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, 
							ТаблицаПоТоварам, ТаблицаПоТаре, ТаблицаПоАвансам, ТаблицаПоОплате, ТаблицаПоПрочее,
							Отказ, Заголовок);
	КонецЕсли;
	
	Движения.Хозрасчетный.ВыполнитьДействияПередЗаписьюДвижений();
	
	ИНАГРО_Общий.ИНАГРО_ДвиженияЗатратыОрганизации_Приход(СтруктураШапкиДокумента, Движения); // ИНАГРО

	ПроведениеСервер.ПодготовитьНаборыЗаписейКЗаписиДвижений(ЭтотОбъект);

	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	МассивНепроверяемыхРеквизитов = Новый Массив();
	
	ПлательщикНДС = УчетнаяПолитика.ПлательщикНДС(Организация, Дата);
	ПлательщикНалогаНаПрибыльДо2015 = УчетнаяПолитика.ПлательщикНалогаНаПрибыльДо2015(Организация, Дата);
	
	Если Товары.Количество() = 0 
		И (НЕ ПолучитьФункциональнуюОпцию("ИспользоватьВозвратнуюТару") ИЛИ ВозвратнаяТара.Количество() = 0) Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Склад");
	КонецЕсли;
	
	Если Не ПлательщикНДС И Не ПлательщикНалогаНаПрибыльДо2015 Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Товары.Контрагент");		
		МассивНепроверяемыхРеквизитов.Добавить("Товары.ДоговорКонтрагента");		
	КонецЕсли;
	
	Если Не ПлательщикНДС Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Товары.СтавкаНДС");
		МассивНепроверяемыхРеквизитов.Добавить("Товары.СчетУчетаНДС");
		МассивНепроверяемыхРеквизитов.Добавить("Товары.НалоговоеНазначение");
	КонецЕсли;
	
	
	// Проверка табличной части "Возвратная тара"
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьВозвратнуюТару") Тогда
		
		МассивНепроверяемыхРеквизитов.Добавить("ВозвратнаяТара.Номенклатура");
		МассивНепроверяемыхРеквизитов.Добавить("ВозвратнаяТара.Количество");
		МассивНепроверяемыхРеквизитов.Добавить("ВозвратнаяТара.Сумма");
		МассивНепроверяемыхРеквизитов.Добавить("ВозвратнаяТара.Контрагент");
		МассивНепроверяемыхРеквизитов.Добавить("ВозвратнаяТара.ДоговорКонтрагента");
		МассивНепроверяемыхРеквизитов.Добавить("ВозвратнаяТара.СчетУчетаБУ");
		МассивНепроверяемыхРеквизитов.Добавить("ВозвратнаяТара.СчетУчетаРасчетовПоТаре");
		МассивНепроверяемыхРеквизитов.Добавить("ВозвратнаяТара.НалоговоеНазначение");
		
	Иначе	
		Если Не ПлательщикНДС Тогда
			МассивНепроверяемыхРеквизитов.Добавить("ВозвратнаяТара.НалоговоеНазначение");
		КонецЕсли;
		
		// Проверка табличной части "Оплата поставщикам"
		Для каждого СтрокаТаблицы Из ВозвратнаяТара Цикл
			Префикс = "ВозвратнаяТара[" + Формат(СтрокаТаблицы.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].";
			ИмяСписка = НСтр("ru='Возвратная тара';uk='Зворотна тара'");

			Если ПлательщикНДС Тогда
				
				Если ЗначениеЗаполнено(СтрокаТаблицы.НалоговоеНазначение) Тогда
					
					Если СтрокаТаблицы.НалоговоеНазначение = Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяНеХозДеятельность Тогда	
						
						ТекстСообщения = ОбщегоНазначенияБПКлиентСервер.ПолучитьТекстСообщения("Колонка", "Корректность", 
							НСтр("ru='Налоговое назначение (НДС)';uk='Податкове призначення (ПДВ)'"),
							СтрокаТаблицы.НомерСтроки, ИмяСписка,
							НСтр("ru='Указно налоговое назначение по нехозяйственной деятельности.';uk='Указно податкове призначення за негосподарській діяльності.'")
						);
						Поле = Префикс + "НалоговоеНазначение";
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);

						
					ИначеЕсли СтрокаТаблицы.НалоговоеНазначение = Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_Пропорционально Тогда
						   
						ТекстСообщения = ОбщегоНазначенияБПКлиентСервер.ПолучитьТекстСообщения("Колонка", "Корректность", 
							НСтр("ru='Налоговое назначение (НДС)';uk='Податкове призначення (ПДВ)'"),
							СтрокаТаблицы.НомерСтроки, ИмяСписка,
							НСтр("ru='Указно налоговое назначение по пропорциональному НДС.';uk='Указно податкове призначення за пропорційним ПДВ.'")
						);
						Поле = Префикс + "НалоговоеНазначение";
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	// ИНАГРО++
	Если ИНАГРО_ВидПоступления = Перечисления.ИНАГРО_ВидыПоступленияТоваров.ПоОрдеру И ИНАГРО_ОрдерВТЧ Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Склад");
		ПроверяемыеРеквизиты.Добавить("Товары.ИНАГРО_Ордер");
		ПроверяемыеРеквизиты.Добавить("ВозвратнаяТара.ИНАГРО_Ордер");
	ИначеЕсли ИНАГРО_ВидПоступления = Перечисления.ИНАГРО_ВидыПоступленияТоваров.НаСклад И ИНАГРО_СкладВТЧ Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Склад");
		ПроверяемыеРеквизиты.Добавить("Товары.ИНАГРО_Склад");
		ПроверяемыеРеквизиты.Добавить("ВозвратнаяТара.ИНАГРО_Склад");
	КонецЕсли;
	// ИНАГРО--  
	
	// Проверять надо только по доп.условиям
	МассивНепроверяемыхРеквизитов.Добавить("ОплатаПоставщикам.СчетУчетаНДС");
	МассивНепроверяемыхРеквизитов.Добавить("ОплатаПоставщикам.СчетУчетаНДСПодтвержденный");
	МассивНепроверяемыхРеквизитов.Добавить("ОплатаПоставщикам.НалоговоеНазначение");
	
	// Проверка табличной части "Оплата поставщикам"
	Для каждого СтрокаТаблицы Из ОплатаПоставщикам Цикл
		Префикс = "ОплатаПоставщикам[" + Формат(СтрокаТаблицы.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].";
		ИмяСписка = НСтр("ru='Оплата поставщикам';uk='Оплата постачальникам'");
		
		
		Если ЗначениеЗаполнено(СтрокаТаблицы.ДоговорКонтрагента) Тогда
			Поле = Префикс + "ДоговорКонтрагента";
			ТекстСообщения = "";
			ПроведениеВозможно = УчетВзаиморасчетов.ПроверитьВозможностьПроведенияВРеглУчете(
				ЭтотОбъект, СтрокаТаблицы.ДоговорКонтрагента, ТекстСообщения);
			Если НЕ ПроведениеВозможно Тогда
				ТекстСообщения = ОбщегоНазначенияБПКлиентСервер.ПолучитьТекстСообщения("Колонка", "Корректность",
					НСтр("ru='Договор';uk='Договір'"), СтрокаТаблицы.НомерСтроки, ИмяСписка, ТекстСообщения);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
			КонецЕсли;
		КонецЕсли;
		
		Если ПлательщикНДС ИЛИ ПлательщикНалогаНаПрибыльДо2015 Тогда
	
			Если Не СтрокаТаблицы.ДоговорКонтрагента.СложныйНалоговыйУчет Тогда
				
				Если ПлательщикНДС И Не ЗначениеЗаполнено(СтрокаТаблицы.СчетУчетаНДС) Тогда
					ТекстСообщения = ОбщегоНазначенияБПКлиентСервер.ПолучитьТекстСообщения("Колонка", , 
						НСтр("ru='Счет учета НДС (неподтвержденный)';uk='Рахунок ПДВ (непідтверджений)'"),
						СтрокаТаблицы.НомерСтроки, ИмяСписка
					);
					Поле = Префикс + "СчетУчетаНДС";
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);					
				КонецЕсли;
				
				Если ПлательщикНДС И Не ЗначениеЗаполнено(СтрокаТаблицы.СчетУчетаНДСПодтвержденный) Тогда
					ТекстСообщения = ОбщегоНазначенияБПКлиентСервер.ПолучитьТекстСообщения("Колонка", , 
						НСтр("ru='Счет учета НДС (нал. кредит/обязательства)';uk=""Рахунок обліку ПДВ (под. кредит/зобов'язання)"""),
						СтрокаТаблицы.НомерСтроки, ИмяСписка
					);
					Поле = Префикс + "СчетУчетаНДСПодтвержденный";
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);					
				КонецЕсли;
				
				Если Не ЗначениеЗаполнено(СтрокаТаблицы.НалоговоеНазначение) Тогда
					ТекстСообщения = ОбщегоНазначенияБПКлиентСервер.ПолучитьТекстСообщения("Колонка", , 
						НСтр("ru='Налоговое назначение (НДС)';uk='Податкове призначення (ПДВ)'"),
						СтрокаТаблицы.НомерСтроки, ИмяСписка
					);
					Поле = Префикс + "НалоговоеНазначение";
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;

	КонецЦикла;
	
	// Проверять надо только по доп.условиям
	МассивНепроверяемыхРеквизитов.Добавить("Прочее.Контрагент");			// Проверять если не суточные
	МассивНепроверяемыхРеквизитов.Добавить("Прочее.ДоговорКонтрагента");		
		
	МассивНепроверяемыхРеквизитов.Добавить("Прочее.Контрагент");		
	МассивНепроверяемыхРеквизитов.Добавить("Прочее.ДоговорКонтрагента");		
	
	МассивНепроверяемыхРеквизитов.Добавить("Прочее.СтавкаНДС");		
	МассивНепроверяемыхРеквизитов.Добавить("Прочее.СчетУчетаНДС");
	МассивНепроверяемыхРеквизитов.Добавить("Прочее.НалоговоеНазначение");		
	МассивНепроверяемыхРеквизитов.Добавить("Прочее.НалоговоеНазначениеДоходовИЗатрат");
	
	БухгалтерскийУчет.ПроверитьЗаполнениеАналитикиЗатратТабличнойЧасти(ЭтотОбъект, "Прочее", НСтр("ru='Прочее';uk='Інше'"), Отказ);	
	Если ПлательщикНДС Тогда
		БухгалтерскийУчет.ПроверитьСоответствиеАналитикиЗатратНалоговомуНазначению(ЭтотОбъект, "Прочее", НСтр("ru='Прочее';uk='Інше'"), , Отказ);
	КонецЕсли;
	
	Для каждого СтрокаТаблицы Из Прочее Цикл
		Префикс = "Прочее[" + Формат(СтрокаТаблицы.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].";
		ИмяСписка = НСтр("ru='Прочее';uk='Інше'");

		Если СтрокаТаблицы.ЭтоСуточные Тогда
			
			Если СтрокаТаблицы.СуточныеДатаС > СтрокаТаблицы.СуточныеДатаПо Тогда
				ТекстСообщения = ОбщегоНазначенияБПКлиентСервер.ПолучитьТекстСообщения("Колонка", "Корректность", 
					НСтр("ru='Суточные дата с/по';uk='Добові дата з/по'"),
					СтрокаТаблицы.НомерСтроки, ИмяСписка,
					НСтр("ru='Значение реквизита ""Суточные дата с"" не может быть больше значения реквизита ""Суточные дата по""!';uk='Значення реквізиту ""Добові дата з"" не може бути більше значення реквізиту ""Добові дата по""!'")
				);
				Поле = Префикс + "СуточныеДатаПо";
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);					
			КонецЕсли;
			
		ИначеЕсли ПлательщикНДС Тогда
			
			Если Не ЗначениеЗаполнено(СтрокаТаблицы.СтавкаНДС) Тогда
				ТекстСообщения = ОбщегоНазначенияБПКлиентСервер.ПолучитьТекстСообщения("Колонка", , 
					НСтр("ru='Ставка НДС';uk='Ставка ПДВ'"),
					СтрокаТаблицы.НомерСтроки, ИмяСписка
				);
				Поле = Префикс + "СтавкаНДС";
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);					
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(СтрокаТаблицы.НалоговоеНазначение) Тогда
				ТекстСообщения = ОбщегоНазначенияБПКлиентСервер.ПолучитьТекстСообщения("Колонка", , 
					НСтр("ru='Налоговое назначение (НДС)';uk='Податкове призначення (ПДВ)'"),
					СтрокаТаблицы.НомерСтроки, ИмяСписка
				);
				Поле = Префикс + "НалоговоеНазначение";
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);					
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(СтрокаТаблицы.Контрагент) Тогда
				ТекстСообщения = ОбщегоНазначенияБПКлиентСервер.ПолучитьТекстСообщения("Колонка", , 
					НСтр("ru='Контрагент';uk='Контрагент'"),
					СтрокаТаблицы.НомерСтроки, ИмяСписка
				);
				Поле = Префикс + "Контрагент";
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);					
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(СтрокаТаблицы.ДоговорКонтрагента) Тогда
				ТекстСообщения = ОбщегоНазначенияБПКлиентСервер.ПолучитьТекстСообщения("Колонка", , 
					НСтр("ru='Договор';uk='Договір'"),
					СтрокаТаблицы.НомерСтроки, ИмяСписка
				);
				Поле = Префикс + "ДоговорКонтрагента";
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);					
			КонецЕсли;

			Если СтрокаТаблицы.СуммаНДС <> 0 Тогда
				Если Не ЗначениеЗаполнено(СтрокаТаблицы.СчетУчетаНДС) Тогда
					ТекстСообщения = ОбщегоНазначенияБПКлиентСервер.ПолучитьТекстСообщения("Колонка",, 
						НСтр("ru='Счет учета НДС';uk='Рахунок ПДВ'"),
						СтрокаТаблицы.НомерСтроки, ИмяСписка
					);
					Поле = Префикс + "СчетУчетаНДС";
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли ПлательщикНалогаНаПрибыльДо2015 Тогда
			
			Если Не ЗначениеЗаполнено(СтрокаТаблицы.Контрагент) Тогда
				ТекстСообщения = ОбщегоНазначенияБПКлиентСервер.ПолучитьТекстСообщения("Колонка", , 
					НСтр("ru='Контрагент';uk='Контрагент'"),
					СтрокаТаблицы.НомерСтроки, ИмяСписка
				);
				Поле = Префикс + "Контрагент";
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);					
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(СтрокаТаблицы.ДоговорКонтрагента) Тогда
				ТекстСообщения = ОбщегоНазначенияБПКлиентСервер.ПолучитьТекстСообщения("Колонка", , 
					НСтр("ru='Договор';uk='Договір'"),
					СтрокаТаблицы.НомерСтроки, ИмяСписка
				);
				Поле = Префикс + "ДоговорКонтрагента";
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);					
			КонецЕсли;
		
		КонецЕсли; 
		
		Отказ = Отказ ИЛИ Не ЗначениеЗаполнено(СтрокаТаблицы.СчетЗатрат); // Предупреждение о реквизите СчетЗатрат будет выведено стандартным механизмом платформы
		
		ХарактерЗатрат = Неопределено;
		НалоговаяАналитикаВПроводке = Неопределено;
		НалоговыйУчет.ОпределениеАналитикиНалоговогоУчетаВПроводкахДляЗатрат(
			СтрокаТаблицы, 
			СтрокаТаблицы.СчетЗатрат, 
			ХарактерЗатрат,
			НалоговаяАналитикаВПроводке, 
			, 
			СтрокаТаблицы.НалоговоеНазначение, 
			СтрокаТаблицы.НалоговоеНазначениеДоходовИЗатрат,
			,
			Дата,
			,
			ПлательщикНДС
		);
		
		Если Не Отказ И ПлательщикНДС Тогда
			
			Если ХарактерЗатрат = "ОПЗ"
			   И СтрокаТаблицы.НалоговоеНазначение = Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяНеХозДеятельность Тогда
			   
				ТекстСообщения = ОбщегоНазначенияБПКлиентСервер.ПолучитьТекстСообщения("Колонка", "Корректность", 
					НСтр("ru='Налоговое назначение (НДС)';uk='Податкове призначення (ПДВ)'"),
					СтрокаТаблицы.НомерСтроки, ИмяСписка,
					НСтр("ru='Для услуги нельзя указывать нехозяйственное налоговое назначение (на 91 счете такое налоговое назначение не допустимо)!';uk='Для послуги не можна вказувати негосподарське податкове призначення (на 91 рахунку таке податкове призначення не припустиме)!'")
				);
				Поле = Префикс + "НалоговоеНазначение";
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если Не Отказ И ПлательщикНалогаНаПрибыльДо2015 Тогда
			
			Если Не ЗначениеЗаполнено(НалоговаяАналитикаВПроводке) Тогда
				
				ОшибкаПроведения = Истина;
				Если ХарактерЗатрат = "Затраты" Тогда
					СтрокаСообщения = НСтр("ru='Не указано налоговое назначение затрат!';uk='Не вказане податкове призначення витрат!'");
				ИначеЕсли ХарактерЗатрат = "Строительство" Тогда
					СтрокаСообщения = НСтр("ru='Не указано налоговое назначение для объекта строительства или НМА!';uk=""Не зазначено податкове призначення для об'єкта будівництва або НМА!""");
				ИначеЕсли ХарактерЗатрат = "Производство" Тогда
					СтрокаСообщения = НСтр("ru='Не указано налоговое назначение в производстве для номенклатурной группы!';uk='Не вказане податкове призначення у виробництві для номенклатурної групи!'");
				ИначеЕсли ХарактерЗатрат = "РБП" Тогда
					СтрокаСообщения = НСтр("ru='Не указано налоговое назначение для расходов будущих периодов!';uk='Не зазначено податкове призначення для витрат майбутніх періодів!'");
				Иначе
					СтрокаСообщения = НСтр("ru='Невозможно определить налоговое назначение затрат для указанного счета затрат!';uk='неможливо визначити податкове призначення витрат для вказанного рахунку витрат!'");
					ОшибкаПроведения = Ложь;
				КонецЕсли;
			   
				ТекстСообщения = ОбщегоНазначенияБПКлиентСервер.ПолучитьТекстСообщения("Колонка", "Корректность", 
					НСтр("ru='Налоговое назначение (затрат)';uk='Податкове призначення (витрат)'"),
					СтрокаТаблицы.НомерСтроки, ИмяСписка,
					СтрокаСообщения
				);
				Поле = Префикс + "НалоговоеНазначениеДоходовИЗатрат";
				Если ОшибкаПроведения Тогда
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
				Иначе
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект");
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
		
		// нельзя по НДС указывать нехоз. деятельность, а по НП - хоз. деятельность
		Если Не СтрокаТаблицы.ЭтоСуточные И ПлательщикНДС И ПлательщикНалогаНаПрибыльДо2015 Тогда
			
			НехозДеятельностьНДС = (СтрокаТаблицы.НалоговоеНазначение = Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяНеХозДеятельность);
			НехозДеятельностьНКУ = (НалоговаяАналитикаВПроводке = Справочники.НалоговыеНазначенияАктивовИЗатрат.НКУ_НеХозДеятельность);
			
			Если НЕ СтрокаТаблицы.НалоговоеНазначение = НалоговаяАналитикаВПроводке
			   И НехозДеятельностьНДС <> НехозДеятельностьНКУ Тогда 
				
				 ТекстСообщения = ОбщегоНазначенияБПКлиентСервер.ПолучитьТекстСообщения("Колонка", "Корректность", 
					НСтр("ru='Налоговое назначение (НДС)';uk='Податкове призначення (ПДВ)'"),
					СтрокаТаблицы.НомерСтроки, ИмяСписка,
					НСтр("ru='Для услуги нельзя указывать нехозяйственное налоговое назначение и одновременно хозяйственную деятельность по затратам (и наоборот)!';uk='Для послуги не можна вказувати негосподарське податкове призначення і одночасно господарську діяльність за витратами (і навпаки)!'")
				);
				Поле = Префикс + "НалоговоеНазначение";
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
				
			КонецЕсли;
			
		КонецЕсли;

	КонецЦикла;
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)

	ПроведениеСервер.ПодготовитьНаборыЗаписейКОтменеПроведения(ЭтотОбъект);
	Движения.Записать();

	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)

	Дата = НачалоДня(ОбщегоНазначенияБП.ПолучитьРабочуюДату());
	Ответственный = Пользователи.ТекущийПользователь();

	СтруктураКурсаВзаиморасчетов = РаботаСКурсамиВалют.ПолучитьКурсВалюты(
	ВалютаДокумента, Дата);
	
	КурсВзаиморасчетов      = СтруктураКурсаВзаиморасчетов.Курс;
	КратностьВзаиморасчетов = СтруктураКурсаВзаиморасчетов.Кратность;
	
	Если Год(ОбъектКопирования.Дата) <> Год(Дата) Тогда
		Документы.АвансовыйОтчет.РассчитатьПропорциональныйНДСПоДокументу(ЭтотОбъект,
			УчетнаяПолитика.ПлательщикНДС(Организация, Дата),
			НалоговыйУчет.ПолучитьКоэффициентПропорциональногоНДС(Организация, Дата)
			);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ


#КонецЕсли
