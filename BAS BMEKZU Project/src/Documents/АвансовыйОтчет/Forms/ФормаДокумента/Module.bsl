#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	
	Если Параметры.Ключ.Пустая() Тогда
		ПодготовитьФормуНаСервере();
	КонецЕсли;
	
	// Активизировать первую непустую табличную часть
	СписокТабличныхЧастей = Новый СписокЗначений;
	СписокТабличныхЧастей.Добавить("ВыданныеАвансы", "ВыданныеАвансы");
	СписокТабличныхЧастей.Добавить("Товары", "Товары");
	СписокТабличныхЧастей.Добавить("ВозвратнаяТара", "ВозвратнаяТара");
	СписокТабличныхЧастей.Добавить("ОплатаПоставщикам", "ОплатаПоставщикам");
	СписокТабличныхЧастей.Добавить("Прочее", "Прочее");
	
	АктивизироватьТабличнуюЧасть = ОбщегоНазначенияБПВызовСервера.ПолучитьПервуюНепустуюВидимуюТабличнуюЧасть(
		ЭтаФорма, СписокТабличныхЧастей);
	ОбщегоНазначенияБПВызовСервера.АктивизироватьЭлементФормы(ЭтаФорма, АктивизироватьТабличнуюЧасть);
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)

	Если ИсточникВыбора.ИмяФормы = "Обработка.ПодборНоменклатуры.Форма.Форма" Тогда
		ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение, ИсточникВыбора.ИмяТаблицы);
	// ИНАГРО++
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Документ.ИНАГРО_ПриходныйОрдерНаТовары.Форма.ФормаВыбора" Тогда
		Если ЗначениеЗаполнено(ИсточникВыбора.ИмяТаблицы) Тогда
			ОбработкаЗаполненияТабличнойЧастиНаСервере(ВыбранноеЗначение, ИсточникВыбора.ИмяТаблицы);
		Иначе
			Объект.Склад = ВыбранноеЗначение;
		КонецЕсли;
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Справочник.Склады.Форма.ФормаВыбора" Тогда
		  Объект.Склад = ВыбранноеЗначение;
	// ИНАГРО--
  	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом

	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	ПодготовитьФормуНаСервере();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	ЗаполнитьДобавленныеКолонкиТаблиц();
	ИтогАвансов = Объект.ВыданныеАвансы.Итог("СуммаАванса");
	
	УстановитьДоступностьСубконто();
		
	УстановитьСостояниеДокумента();

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)

	ОбщегоНазначенияБПКлиент.ОбработкаОповещенияФормыДокумента(ЭтаФорма, Объект.Ссылка, ИмяСобытия, Параметр, Источник);

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)

	Если НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДатаДокумента) Тогда
		// Изменение времени не влияет на поведение документа.
		ТекущаяДатаДокумента = Объект.Дата;
		Возврат;
	КонецЕсли;

	// Вызов нужен всегда для обновления норм командировочных расходов
	ДатаПриИзмененииНаСервере();

	// Запомним новую дату документа.
	ТекущаяДатаДокумента = Объект.Дата;

КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		ОрганизацияПриИзмененииНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СкладПриИзменении(Элемент)
	
	УстановитьТипСкладаОрдера(ЭтаФорма); // ИНАГРО

	Если ЗначениеЗаполнено(Объект.Склад) Тогда		
		СкладПриИзмененииНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ФизЛицоПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.ФизЛицо) Тогда
		ПерезаполнитьАвансы();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЦеныИВалютаНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОбработатьИзмененияПоКнопкеЦеныИВалюты(Объект.ВалютаДокумента);
	
КонецПроцедуры

&НаКлиенте
Процедура КоличествоДокументовПриИзменении(Элемент)

	Если ПустаяСтрока(Объект.КоличествоЛистов) Тогда
		Объект.КоличествоЛистов = Объект.КоличествоДокументов;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(
		Элемент.ТекстРедактирования,
		ЭтотОбъект,
		"Объект.Комментарий"
	);

КонецПроцедуры

&НаКлиенте
Процедура СкладНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка) // ИНАГРО
	
	СтандартнаяОбработка = Ложь;
	
	Если Объект.ИНАГРО_ВидПоступления = ПредопределенноеЗначение("Перечисление.ИНАГРО_ВидыПоступленияТоваров.НаСклад") Тогда
		ОткрытьФорму("Справочник.Склады.Форма.ФормаВыбора", , ЭтаФорма, УникальныйИдентификатор, , , , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);		
	Иначе
		ОткрытьФормуВыбораПриходныйОрдерНаТоварыДляЗаполнения();		
	КонецЕсли;
	
КонецПроцедуры

// ИНАГРО++
&НаКлиенте
Процедура ИНАГРО_ВидПоступленияПриИзменении(Элемент)	
		
	УстановитьТипСкладаОрдера(ЭтаФорма);
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры 

&НаКлиенте
Процедура ИНАГРО_СкладВТЧПриИзменении(Элемент)
	
	Если Объект.ИНАГРО_СкладВТЧ Тогда
		Объект.Склад = ПредопределенноеЗначение("Справочник.Склады.ПустаяСсылка");
	КонецЕсли; 

	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ИНАГРО_ОрдерВТЧПриИзменении(Элемент)
	
	Если Объект.ИНАГРО_ОрдерВТЧ Тогда
		Объект.Склад = ПредопределенноеЗначение("Документ.ИНАГРО_ПриходныйОрдерНаТовары.ПустаяСсылка");
	КонецЕсли; 

	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицыФормыВыданныеАвансы

&НаКлиенте
Процедура ВыданныеАвансыПриИзменении(Элемент)
	
	ОбновитьИтоги(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыданныеАвансыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если НоваяСтрока И ОтменаРедактирования Тогда
		ОбновитьИтоги(ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыданныеАвансыДокументАвансаПриИзменении(Элемент)
	
	СтрокаТаблицы = Элементы.ВыданныеАвансы.ТекущиеДанные;
	Если СтрокаТаблицы.ДокументАванса = Неопределено
		ИЛИ СтрокаТаблицы.ДокументАванса <> Неопределено И НЕ ЗначениеЗаполнено(СтрокаТаблицы.ДокументАванса) Тогда
		СтрокаТаблицы.СуммаАванса = 0;
		СтрокаТаблицы.Валюта      = Неопределено;
	Иначе
		ЗначенияРеквизитов = ЗначенияРеквизитовИзДокументаАванса(СтрокаТаблицы.ДокументАванса, ЗначениеЗаполнено(Объект.ФизЛицо));
		
		СтрокаТаблицы.СуммаАванса = ЗначенияРеквизитов.СуммаДокумента;
		СтрокаТаблицы.Валюта      = ЗначенияРеквизитов.ВалютаДокумента;
		
		Если ЗначенияРеквизитов.Свойство("ФизЛицо") Тогда
			Объект.ФизЛицо = ЗначенияРеквизитов.ФизЛицо;
		ИначеЕсли ЗначенияРеквизитов.Свойство("Контрагент") Тогда
			Объект.ФизЛицо = ЗначенияРеквизитов.Контрагент;
		КонецЕсли;
	КонецЕсли;
	
	УстановитьПараметрыОтбораДокументАванса();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыданныеАвансыДокументАвансаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	УстановитьПараметрыОтбораДокументАванса();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицыФормыТовары

&НаКлиенте
Процедура ТоварыПриИзменении(Элемент)

	ОбновитьИтоги(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если НоваяСтрока И ОтменаРедактирования Тогда
		ОбновитьИтоги(ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)

	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	ДанныеСтрокиТаблицы = Новый Структура(
		"Номенклатура, Количество,
		|Цена, Сумма, СтавкаНДС, СуммаНДС,
		|СуммаНДСПропорциональноКредит, Всего, 
		|ЕдиницаИзмерения, Коэффициент, 
		|СчетУчетаБУ, НалоговоеНазначение");

	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, ТекущиеДанные);

	ДанныеОбъекта = Новый Структура(
		"Дата, Организация, Склад, ТипЦен, СуммаВключаетНДС,
		|ВалютаДокумента, КурсДокумента, КратностьДокумента");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	// Реквизиты формы
	ДанныеОбъекта.Вставить("ПлательщикНДС", ПлательщикНДС);
	ДанныеОбъекта.Вставить("КоэффициентПропорциональногоНДС", КоэффициентПропорциональногоНДС);
	
	ТоварыНоменклатураПриИзмененииНаСервере(ДанныеСтрокиТаблицы, ДанныеОбъекта);
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтрокиТаблицы);

КонецПроцедуры

&НаКлиенте
Процедура ТоварыЕдиницаИзмеренияПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	ДанныеСтрокиТаблицы = Новый Структура(
		"Номенклатура, Количество,
		|Цена, Сумма, СтавкаНДС, СуммаНДС,
		|СуммаНДСПропорциональноКредит, Всего,
		|ЕдиницаИзмерения, Коэффициент,
		|СчетУчетаБУ, НалоговоеНазначение");

	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, ТекущиеДанные);

	ДанныеОбъекта = Новый Структура(
		"Дата, Организация, Склад, ТипЦен, СуммаВключаетНДС,
		|ВалютаДокумента, КурсДокумента, КратностьДокумента");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	// Реквизиты формы
	ДанныеОбъекта.Вставить("ПлательщикНДС", ПлательщикНДС);
	ДанныеОбъекта.Вставить("КоэффициентПропорциональногоНДС", КоэффициентПропорциональногоНДС);
	
	ТоварыТоварыЕдиницаИзмеренияПриИзмененииНаСервере(ДанныеСтрокиТаблицы, ДанныеОбъекта);
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтрокиТаблицы);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКоличествоПриИзменении(Элемент)

	СтрокаТаблицы = Элементы.Товары.ТекущиеДанные;

	// Рассчитать реквизиты табличной части.
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТаблицы);
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТаблицы, Объект.СуммаВключаетНДС);
	РассчитатьПропорциональныйНДСПоСтроке(СтрокаТаблицы, ПлательщикНДС, КоэффициентПропорциональногоНДС);

	СтрокаТаблицы.Всего = СтрокаТаблицы.Сумма + ?(Объект.СуммаВключаетНДС, 0, СтрокаТаблицы.СуммаНДС);

КонецПроцедуры

&НаКлиенте
Процедура ТоварыЦенаПриИзменении(Элемент)

	СтрокаТаблицы = Элементы.Товары.ТекущиеДанные;

	// Рассчитать реквизиты табличной части.
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТаблицы);
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТаблицы, Объект.СуммаВключаетНДС);
	РассчитатьПропорциональныйНДСПоСтроке(СтрокаТаблицы, ПлательщикНДС, КоэффициентПропорциональногоНДС);

	СтрокаТаблицы.Всего = СтрокаТаблицы.Сумма + ?(Объект.СуммаВключаетНДС, 0, СтрокаТаблицы.СуммаНДС);

КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаПриИзменении(Элемент)

	СтрокаТаблицы = Элементы.Товары.ТекущиеДанные;

	РасчетноеКоличество = ?(СтрокаТаблицы.Количество = 0, 0, СтрокаТаблицы.Количество);
	Если РасчетноеКоличество = 0 Тогда
		СтрокаТаблицы.Цена = 0;
	Иначе
		СтрокаТаблицы.Цена = СтрокаТаблицы.Сумма / РасчетноеКоличество;
	КонецЕсли;

	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТаблицы, Объект.СуммаВключаетНДС);
	РассчитатьПропорциональныйНДСПоСтроке(СтрокаТаблицы, ПлательщикНДС, КоэффициентПропорциональногоНДС);
	
	СтрокаТаблицы.Всего = СтрокаТаблицы.Сумма + ?(Объект.СуммаВключаетНДС, 0, СтрокаТаблицы.СуммаНДС);

КонецПроцедуры

&НаКлиенте
Процедура ТоварыСтавкаНДСПриИзменении(Элемент)

	СтрокаТаблицы = Элементы.Товары.ТекущиеДанные;
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТаблицы, Объект.СуммаВключаетНДС);
 	РассчитатьПропорциональныйНДСПоСтроке(СтрокаТаблицы, ПлательщикНДС, КоэффициентПропорциональногоНДС);

	СтрокаТаблицы.Всего = СтрокаТаблицы.Сумма + ?(Объект.СуммаВключаетНДС, 0, СтрокаТаблицы.СуммаНДС);

КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаНДСПриИзменении(Элемент)

	СтрокаТаблицы = Элементы.Товары.ТекущиеДанные;
	РассчитатьПропорциональныйНДСПоСтроке(СтрокаТаблицы, ПлательщикНДС, КоэффициентПропорциональногоНДС);

	СтрокаТаблицы.Всего = СтрокаТаблицы.Сумма + ?(Объект.СуммаВключаетНДС, 0, СтрокаТаблицы.СуммаНДС);

КонецПроцедуры

&НаКлиенте
Процедура ТоварыКонтрагентПриИзменении(Элемент)
	
	СтрокаТаблицы = Элементы.Товары.ТекущиеДанные;

	Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.Контрагент) Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеСтрокиТабличнойЧасти = Новый Структура(
		"Контрагент, ДоговорКонтрагента, Сделка,
		|Организация, СчетУчетаНДС, 
		|ДоговорКонтрагентаВедениеВзаиморасчетов");
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТабличнойЧасти, Объект);
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТабличнойЧасти, СтрокаТаблицы);

	ТоварыКонтрагентПриИзмененииНаСервере(ДанныеСтрокиТабличнойЧасти);
	
	ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ДанныеСтрокиТабличнойЧасти);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыДоговорКонтрагентаПриИзменении(Элемент)
	
	СтрокаТаблицы = Элементы.Товары.ТекущиеДанные;

	Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ДоговорКонтрагента) Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеСтрокиТабличнойЧасти = Новый Структура(
		"Контрагент, ДоговорКонтрагента, Сделка,
		|Организация, СчетУчетаНДС, 
		|ДоговорКонтрагентаВедениеВзаиморасчетов");
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТабличнойЧасти, Объект);
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТабличнойЧасти, СтрокаТаблицы);

	ТоварыДоговорКонтрагентаПриИзмененииНаСервере(ДанныеСтрокиТабличнойЧасти);
	
	ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ДанныеСтрокиТабличнойЧасти);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСделкаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СтрокаТаблицы = Элементы.Товары.ТекущиеДанные;

	
	ПараметрыОбъекта = Новый Структура;
	ПараметрыОбъекта.Вставить("Дата",                  Объект.Дата);
	ПараметрыОбъекта.Вставить("ДоговорКонтрагента",    СтрокаТаблицы.ДоговорКонтрагента);
	ПараметрыОбъекта.Вставить("Контрагент",            СтрокаТаблицы.Контрагент);
	ПараметрыОбъекта.Вставить("Организация",           Объект.Организация);
	ПараметрыОбъекта.Вставить("ТипыДокументов",        "Метаданные.Документы.АвансовыйОтчет.ТабличныеЧасти.Товары.Реквизиты.Сделка.Тип");
	
	ПараметрыФормы = Новый Структура("ПараметрыОбъекта", ПараметрыОбъекта);
	ОткрытьФорму("Документ.ДокументРасчетовСКонтрагентом.ФормаВыбора", ПараметрыФормы, Элемент);	
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНалоговоеНазначениеПриИзменении(Элемент)
	
	СтрокаТаблицы = Элементы.Товары.ТекущиеДанные;
	
	РассчитатьПропорциональныйНДСПоСтроке(СтрокаТаблицы, ПлательщикНДС, КоэффициентПропорциональногоНДС);

КонецПроцедуры

&НаКлиенте
Процедура ТоварыИНАГРО_ОтражатьСчетУчетаРасчетовСКонтрагентомПриИзменении(Элемент) // ИНАГРО
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;

	ДанныеСтрокиТаблицы = Новый Структура(
		"Контрагент, ДоговорКонтрагента,
		|ИНАГРО_ОтражатьСчетУчетаРасчетовСКонтрагентом,
		|ИНАГРО_СчетУчетаРасчетовСКонтрагентом");
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, ТекущиеДанные);
	
	ТоварыИНАГРО_ОтражатьСчетУчетаРасчетовСКонтрагентомПриИзмененииНаСервере(ДанныеСтрокиТаблицы, Объект.Организация);

	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтрокиТаблицы);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицыФормыВозвратнаяТара

&НаКлиенте
Процедура ВозвратнаяТараПриИзменении(Элемент)

	ОбновитьИтоги(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ВозвратнаяТараПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если НоваяСтрока И ОтменаРедактирования Тогда
		ОбновитьИтоги(ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВозвратнаяТараНоменклатураПриИзменении(Элемент)

	ТекущиеДанные	= Элементы.ВозвратнаяТара.ТекущиеДанные;
	
	ДанныеСтрокиТаблицы = Новый Структура(
		"Номенклатура, Количество, Цена, Сумма, 
		|СчетУчетаБУ, НалоговоеНазначение");
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, ТекущиеДанные);
	
	ДанныеОбъекта = Новый Структура(
		"Дата, Организация, Склад, ТипЦен, СуммаВключаетНДС,
		|ВалютаДокумента, КурсДокумента, КратностьДокумента, Склад");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	ДанныеОбъекта.СуммаВключаетНДС	= Истина;
	
	ВозвратнаяТараНоменклатураПриИзмененииНаСервере(ДанныеСтрокиТаблицы, ДанныеОбъекта);
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтрокиТаблицы);

КонецПроцедуры

&НаКлиенте
Процедура ВозвратнаяТараКоличествоПриИзменении(Элемент)

	СтрокаТаблицы = Элементы.ВозвратнаяТара.ТекущиеДанные;
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТаблицы);

КонецПроцедуры

&НаКлиенте
Процедура ВозвратнаяТараЦенаПриИзменении(Элемент)

	СтрокаТаблицы = Элементы.ВозвратнаяТара.ТекущиеДанные;
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТаблицы);

КонецПроцедуры

&НаКлиенте
Процедура ВозвратнаяТараСуммаПриИзменении(Элемент)

	СтрокаТаблицы = Элементы.ВозвратнаяТара.ТекущиеДанные;

	Если СтрокаТаблицы.Количество = 0 Тогда
		СтрокаТаблицы.Цена = 0;
	Иначе
		СтрокаТаблицы.Цена = СтрокаТаблицы.Сумма / СтрокаТаблицы.Количество;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВозвратнаяТараКонтрагентПриИзменении(Элемент)
	
	СтрокаТаблицы = Элементы.ВозвратнаяТара.ТекущиеДанные;
	
	ДанныеСтрокиТабличнойЧасти = Новый Структура(
		"Контрагент, ДоговорКонтрагента, Сделка, 
		|Организация, СчетУчетаРасчетовПоТаре, СчетУчетаРасчетовПоТареПоАвансам,
		|ДоговорКонтрагентаВедениеВзаиморасчетов");
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТабличнойЧасти, Объект);
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТабличнойЧасти, СтрокаТаблицы);
	
	ВозвратнаяТараКонтрагентПриИзмененииНаСервере(ДанныеСтрокиТабличнойЧасти);
	ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ДанныеСтрокиТабличнойЧасти);
	
КонецПроцедуры

&НаКлиенте
Процедура ВозвратнаяТараДоговорКонтрагентаПриИзменении(Элемент)

	СтрокаТаблицы = Элементы.ВозвратнаяТара.ТекущиеДанные;

	ДанныеСтрокиТабличнойЧасти = Новый Структура(
		"Контрагент, ДоговорКонтрагента, Сделка, 
		|Организация, СчетУчетаРасчетовПоТаре, СчетУчетаРасчетовПоТареПоАвансам,
		|ДоговорКонтрагентаВедениеВзаиморасчетов");
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТабличнойЧасти, Объект);
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТабличнойЧасти, СтрокаТаблицы);

	ВозвратнаяТараДоговорКонтрагентаПриИзмененииНаСервере(ДанныеСтрокиТабличнойЧасти);
	ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ДанныеСтрокиТабличнойЧасти);

КонецПроцедуры

&НаКлиенте
Процедура ВозвратнаяТараСделкаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Элементы.ВозвратнаяТара.ТекущиеДанные;

	ПараметрыОбъекта = Новый Структура;
	ПараметрыОбъекта.Вставить("Дата"                 , Объект.Дата);
	ПараметрыОбъекта.Вставить("ДоговорКонтрагента"   , ТекущиеДанные.ДоговорКонтрагента);
	ПараметрыОбъекта.Вставить("Контрагент"           , ТекущиеДанные.Контрагент);
	ПараметрыОбъекта.Вставить("СчетУчета"            , ТекущиеДанные.СчетУчетаРасчетовПоТареПоАвансам);
	ПараметрыОбъекта.Вставить("Организация"          , Объект.Организация);
	ПараметрыОбъекта.Вставить("ОстаткиОбороты"       , "Дт");
	ПараметрыОбъекта.Вставить("ТипыДокументов"       , "Метаданные.Документы.АвансовыйОтчет.ТабличныеЧасти.ВозвратнаяТара.Реквизиты.Сделка.Тип");

	ПараметрыФормы = Новый Структура("ПараметрыОбъекта", ПараметрыОбъекта);
	ОткрытьФорму("Документ.ДокументРасчетовСКонтрагентом.ФормаВыбора", ПараметрыФормы, Элемент);
		
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицыФормыОплата

&НаКлиенте
Процедура ОплатаПоставщикамПриИзменении(Элемент)

	ОбновитьИтоги(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ОплатаПоставщикамПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если НоваяСтрока И ОтменаРедактирования Тогда
		ОбновитьИтоги(ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатаПоставщикамКонтрагентПриИзменении(Элемент)

	СтрокаТаблицы = Элементы.ОплатаПоставщикам.ТекущиеДанные;

	Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.Контрагент) Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеСтрокиТабличнойЧасти = Новый Структура(
		"Контрагент, ДоговорКонтрагента, КурсВзаиморасчетов, КратностьВзаиморасчетов, Сделка,
		|СчетУчетаРасчетовСКонтрагентом, СчетУчетаРасчетовПоАвансам, СчетУчетаНДС, СчетУчетаНДСПодтвержденный,
		|Сумма, СуммаВзаиморасчетов, Организация, Дата, ВалютаДокумента, КурсДокумента, КратностьДокумента,
		|СтавкаНДС, СуммаНДС, СуммаНДСПропорциональноКредит,
		|ЗаТару, НалоговоеНазначение, Амортизируется,
		|ДоговорКонтрагентаВалютаВзаиморасчетов, ДоговорКонтрагентаВедениеВзаиморасчетов, ДоговорКонтрагентаСложныйНалоговыйУчет");
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТабличнойЧасти, Объект);
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТабличнойЧасти, СтрокаТаблицы);

	ОплатаПоставщикамКонтрагентПриИзмененииНаСервере(ДанныеСтрокиТабличнойЧасти, ПлательщикНДС, КоэффициентПропорциональногоНДС);
	ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ДанныеСтрокиТабличнойЧасти);

КонецПроцедуры

&НаКлиенте
Процедура ОплатаПоставщикамДоговорКонтрагентаПриИзменении(Элемент)

	СтрокаТаблицы = Элементы.ОплатаПоставщикам.ТекущиеДанные;

	Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ДоговорКонтрагента) Тогда
		Возврат;
	КонецЕсли;

	ДанныеСтрокиТабличнойЧасти = Новый Структура(
		"Контрагент, ДоговорКонтрагента, КурсВзаиморасчетов, КратностьВзаиморасчетов, Сделка,
		|СчетУчетаРасчетовСКонтрагентом, СчетУчетаРасчетовПоАвансам, СчетУчетаНДС, СчетУчетаНДСПодтвержденный,
		|Сумма, СуммаВзаиморасчетов, Организация, Дата, ВалютаДокумента, КурсДокумента, КратностьДокумента,
		|СтавкаНДС, СуммаНДС, СуммаНДСПропорциональноКредит,
		|ЗаТару, НалоговоеНазначение, Амортизируется,
		|ДоговорКонтрагентаВалютаВзаиморасчетов, ДоговорКонтрагентаВедениеВзаиморасчетов, ДоговорКонтрагентаСложныйНалоговыйУчет");
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТабличнойЧасти, Объект);
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТабличнойЧасти, СтрокаТаблицы);

	ОплатаПоставщикамДоговорКонтрагентаПриИзмененииНаСервере(ДанныеСтрокиТабличнойЧасти, ПлательщикНДС, КоэффициентПропорциональногоНДС);
	ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ДанныеСтрокиТабличнойЧасти);

	ЕстьДоговорыВВалюте = ЕстьДоговорыВВалюте
		ИЛИ (СтрокаТаблицы.ДоговорКонтрагентаВалютаВзаиморасчетов <> ВалютаРегламентированногоУчета);

КонецПроцедуры

&НаКлиенте
Процедура ОплатаПоставщикамСделкаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Элементы.ОплатаПоставщикам.ТекущиеДанные;

	ПараметрыОбъекта = Новый Структура;
	ПараметрыОбъекта.Вставить("Дата"                 , Объект.Дата);
	ПараметрыОбъекта.Вставить("ДоговорКонтрагента"   , ТекущиеДанные.ДоговорКонтрагента);
	ПараметрыОбъекта.Вставить("Контрагент"           , ТекущиеДанные.Контрагент);
	ПараметрыОбъекта.Вставить("СчетУчета"            , ТекущиеДанные.СчетУчетаРасчетовСКонтрагентом);
	ПараметрыОбъекта.Вставить("Организация"          , Объект.Организация);
	ПараметрыОбъекта.Вставить("ОстаткиОбороты"       , "Кт");
	ПараметрыОбъекта.Вставить("ТипыДокументов"       , "Метаданные.Документы.АвансовыйОтчет.ТабличныеЧасти.ОплатаПоставщикам.Реквизиты.Сделка.Тип");

	ПараметрыФормы = Новый Структура("ПараметрыОбъекта", ПараметрыОбъекта);
	ОткрытьФорму("Документ.ДокументРасчетовСКонтрагентом.ФормаВыбора", ПараметрыФормы, Элемент);

КонецПроцедуры

&НаКлиенте
Процедура ОплатаПоставщикамЗаТаруПриИзменении(Элемент)
	
	СтрокаТаблицы = Элементы.ОплатаПоставщикам.ТекущиеДанные;

	ДанныеСтрокиТабличнойЧасти = Новый Структура(
		"Контрагент, ДоговорКонтрагента, Организация,
		|СтавкаНДС, СуммаНДС, СуммаНДСПропорциональноКредит,
		|ЗаТару, НалоговоеНазначение");
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТабличнойЧасти, Объект);
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТабличнойЧасти, СтрокаТаблицы);

	ОплатаПоставщикамЗаТаруПриИзмененииНаСервере(ДанныеСтрокиТабличнойЧасти, ПлательщикНДС, КоэффициентПропорциональногоНДС);
	ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ДанныеСтрокиТабличнойЧасти);
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатаПоставщикамСуммаПриИзменении(Элемент)

	СтрокаТаблицы = Элементы.ОплатаПоставщикам.ТекущиеДанные;
	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТаблицы, Истина);
	РассчитатьПропорциональныйНДСПоСтроке(СтрокаТаблицы, ПлательщикНДС, КоэффициентПропорциональногоНДС);	

	РассчитатьСуммуВзаиморасчетов(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ОплатаПоставщикамСтавкаНДСПриИзменении(Элемент)
	
	СтрокаТаблицы = Элементы.ОплатаПоставщикам.ТекущиеДанные;
	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТаблицы, Истина);
	РассчитатьПропорциональныйНДСПоСтроке(СтрокаТаблицы, ПлательщикНДС, КоэффициентПропорциональногоНДС);	

КонецПроцедуры

&НаКлиенте
Процедура ОплатаПоставщикамСуммаНДСПриИзменении(Элемент)
	
	СтрокаТаблицы = Элементы.ОплатаПоставщикам.ТекущиеДанные;
	
	РассчитатьПропорциональныйНДСПоСтроке(СтрокаТаблицы, ПлательщикНДС, КоэффициентПропорциональногоНДС);	

КонецПроцедуры

&НаКлиенте
Процедура ОплатаПоставщикамКурсВзаиморасчетовПриИзменении(Элемент)

	РассчитатьСуммуВзаиморасчетов(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ОплатаПоставщикамКурсВзаиморасчетовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	// Отменить стандартную обработку.
	СтандартнаяОбработка = Ложь;

	СтрокаПлатежа = Элементы.ОплатаПоставщикам.ТекущиеДанные;
	// Если не заполнен договор, то курс взаиморасчетов выбрать нельзя
	Если НЕ ЗначениеЗаполнено(СтрокаПлатежа.ДоговорКонтрагента) Тогда
		ПоказатьПредупреждение( , НСтр("ru='Для выбора курса взаиморасчетов нужно выбрать договор контрагента.';uk='Для вибору курсу взаєморозрахунків потрібно вибрати договір контрагента.'"));
		Возврат;
	КонецЕсли;

	ПараметрыДокумента = Новый Структура;
	ПараметрыДокумента.Вставить("ДоговорКонтрагента"     , СтрокаПлатежа.ДоговорКонтрагента);
	ПараметрыДокумента.Вставить("КратностьВзаиморасчетов", СтрокаПлатежа.КратностьВзаиморасчетов);
	ПараметрыДокумента.Вставить("КурсВзаиморасчетов"     , СтрокаПлатежа.КурсВзаиморасчетов);
	ПараметрыДокумента.Вставить("Дата"                   , Объект.Дата);

	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("СтрокаПлатежа", СтрокаПлатежа); 
	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ОплатаПоставщикамКурсВзаиморасчетовНачалоВыбораЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ОткрытьФорму("Общаяформа.ФормаВводаКурсаИКратности", ПараметрыДокумента,,,,,ОповещениеОЗакрытии);

КонецПроцедуры

&НаКлиенте
Процедура ОплатаПоставщикамКурсВзаиморасчетовНачалоВыбораЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	СтрокаПлатежа = ДополнительныеПараметры.СтрокаПлатежа;
	
	СтруктураКурсаИКратности = РезультатЗакрытия;
	
	Если СтруктураКурсаИКратности <> Неопределено Тогда
		СтрокаПлатежа.КурсВзаиморасчетов      = СтруктураКурсаИКратности.КурсВалюты;
		СтрокаПлатежа.КратностьВзаиморасчетов = СтруктураКурсаИКратности.КратностьВалюты;
	КонецЕсли;
	
	РассчитатьСуммуВзаиморасчетов(ЭтаФорма);
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатаПоставщикамНалоговоеНазначениеПриИзменении(Элемент)

	СтрокаТаблицы = Элементы.ОплатаПоставщикам.ТекущиеДанные;
	
	РассчитатьПропорциональныйНДСПоСтроке(СтрокаТаблицы, ПлательщикНДС, КоэффициентПропорциональногоНДС);	

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицыФормыПрочее

&НаКлиенте
Процедура ПрочееПриИзменении(Элемент)

	ОбновитьИтоги(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ПрочееПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если НоваяСтрока И ОтменаРедактирования Тогда
		ОбновитьИтоги(ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПрочееПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)

	СтрокаПлатеж = Элементы.Прочее.ТекущиеДанные;

	УстановитьЗаголовкиИДоступностьСубконто(ЭтаФорма, СтрокаПлатеж.СчетЗатрат, "", Истина, Истина);
	Если НоваяСтрока И Не Копирование Тогда
		СтрокаПлатеж.КомандировкаЗарубеж = (Объект.ВалютаДокумента <> ВалютаРегламентированногоУчета);
	КонецЕсли;
		
	ЗаполнитьДобавленныеКолонкиСтрокиТаблицыПрочее_НалоговыйУчет();
	
КонецПроцедуры

&НаКлиенте
Процедура ПрочееНоменклатураПриИзменении(Элемент)

	ТекущиеДанные = Элементы.Прочее.ТекущиеДанные;
	
	ДанныеСтрокиТаблицы = Новый Структура(
		"Номенклатура, Содержание,
		|СтавкаНДС, СчетУчетаНДС,
		|СчетЗатрат, Субконто1, Субконто2, Субконто3,
		|Субконто1Доступность, Субконто2Доступность, Субконто3Доступность,
		|Сумма, СуммаНДС, СуммаНДСПропорциональноКредит, Всего,
		|НалоговоеНазначение, НалоговоеНазначениеДоходовИЗатрат");
	
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, ТекущиеДанные);
	
	ДанныеОбъекта = Новый Структура(
		"Дата, Организация, Склад, СуммаВключаетНДС");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	// Реквизиты формы
	ДанныеОбъекта.Вставить("ПлательщикНДС", ПлательщикНДС);
	ДанныеОбъекта.Вставить("КоэффициентПропорциональногоНДС", КоэффициентПропорциональногоНДС);
	
	ПрочееНоменклатураПриИзмененииНаСервере(ДанныеСтрокиТаблицы, ДанныеОбъекта);
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтрокиТаблицы);
	
	УстановитьЗаголовкиИДоступностьСубконто(ЭтаФорма, ТекущиеДанные.СчетЗатрат, "", Истина, Истина);
	
	ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3",
		"Субконто1", "Субконто2", "Субконто3");
	ПоляОбъекта.Вставить("Организация"  , Объект.Организация);
	БухгалтерскийУчетКлиентСервер.ПриИзмененииСчета(ТекущиеДанные.СчетЗатрат, ТекущиеДанные, ПоляОбъекта, Истина);
	

КонецПроцедуры

&НаКлиенте
Процедура ПрочееСуммаПриИзменении(Элемент)
	
	СтрокаТаблицы = Элементы.Прочее.ТекущиеДанные;
	
	// При интерактивном изменении отрабатываем строку и как суточные и как не суточные. 
	// При записи неиспользуемые реквизиты будут очищены
	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТаблицы, Объект.СуммаВключаетНДС);
	РассчитатьПропорциональныйНДСПоСтроке(СтрокаТаблицы, ПлательщикНДС, КоэффициентПропорциональногоНДС);
	
	ДанныеОбъекта = Новый Структура("ВалютаДокумента, КурсДокумента, КратностьДокумента");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	НормированиеРасходовСуточные(СтрокаТаблицы, ДанныеОбъекта, ВалютаРегламентированногоУчета, НормаСуточныеЗарубеж, НормаСуточные);
	
	СтрокаТаблицы.Всего = СтрокаТаблицы.Сумма + ?(Объект.СуммаВключаетНДС, 0, СтрокаТаблицы.СуммаНДС);

КонецПроцедуры

&НаКлиенте
Процедура ПрочееСтавкаНДСПриИзменении(Элемент)
	
	СтрокаТаблицы = Элементы.Прочее.ТекущиеДанные;
	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТаблицы, Объект.СуммаВключаетНДС);
	РассчитатьПропорциональныйНДСПоСтроке(СтрокаТаблицы, ПлательщикНДС, КоэффициентПропорциональногоНДС);
	
	СтрокаТаблицы.Всего = СтрокаТаблицы.Сумма + ?(Объект.СуммаВключаетНДС, 0, СтрокаТаблицы.СуммаНДС);
	
КонецПроцедуры

&НаКлиенте
Процедура ПрочееСуммаНДСПриИзменении(Элемент)
	
	СтрокаТаблицы = Элементы.Прочее.ТекущиеДанные;
	РассчитатьПропорциональныйНДСПоСтроке(СтрокаТаблицы, ПлательщикНДС, КоэффициентПропорциональногоНДС);
	
	СтрокаТаблицы.Всего = СтрокаТаблицы.Сумма + ?(Объект.СуммаВключаетНДС, 0, СтрокаТаблицы.СуммаНДС);
	
КонецПроцедуры

&НаКлиенте
Процедура ПрочееКонтрагентПриИзменении(Элемент)
	
	СтрокаТаблицы = Элементы.Прочее.ТекущиеДанные;

	Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.Контрагент) Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеСтрокиТабличнойЧасти = Новый Структура(
		"Контрагент, ДоговорКонтрагента, Сделка,
		|Организация, СчетУчетаНДС, 
		|ДоговорКонтрагентаВедениеВзаиморасчетов");

	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТабличнойЧасти, Объект);
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТабличнойЧасти, СтрокаТаблицы);

	ПрочееКонтрагентПриИзмененииНаСервере(ДанныеСтрокиТабличнойЧасти);
	
	ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ДанныеСтрокиТабличнойЧасти);
	
КонецПроцедуры

&НаКлиенте
Процедура ПрочееДоговорКонтрагентаПриИзменении(Элемент)
	
	СтрокаТаблицы = Элементы.Прочее.ТекущиеДанные;

	Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.Контрагент) Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеСтрокиТабличнойЧасти = Новый Структура(
		"Контрагент, ДоговорКонтрагента, Сделка,
		|Организация, СчетУчетаНДС, 
		|ДоговорКонтрагентаВедениеВзаиморасчетов");

	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТабличнойЧасти, Объект);
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТабличнойЧасти, СтрокаТаблицы);

	ПрочееДоговорКонтрагентаПриИзмененииНаСервере(ДанныеСтрокиТабличнойЧасти);
	
	ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ДанныеСтрокиТабличнойЧасти);
	
КонецПроцедуры

&НаКлиенте
Процедура ПрочееСделкаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СтрокаТаблицы = Элементы.Прочее.ТекущиеДанные;

	ПараметрыФормы = Новый Структура("Отбор, ТекущаяСтрока", 
		Новый Структура("ДоговорКонтрагента", СтрокаТаблицы.ДоговорКонтрагента), 
		СтрокаТаблицы.Сделка
	);
	
	ОткрытьФорму("Документ.СчетНаОплатуПоставщика.ФормаВыбора", ПараметрыФормы, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ПрочееСчетЗатратПриИзменении(Элемент)

	СтрокаПлатеж = Элементы.Прочее.ТекущиеДанные;

	УстановитьЗаголовкиИДоступностьСубконто(ЭтаФорма, СтрокаПлатеж.СчетЗатрат, "", Истина, Истина);

	ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3",
		"Субконто1", "Субконто2", "Субконто3");
	ПоляОбъекта.Вставить("Организация"  , Объект.Организация);
	БухгалтерскийУчетКлиентСервер.ПриИзмененииСчета(СтрокаПлатеж.СчетЗатрат, СтрокаПлатеж, ПоляОбъекта, Истина);


	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма);
	
	ЗаполнитьДобавленныеКолонкиСтрокиТаблицыПрочее_НалоговыйУчет();
	
КонецПроцедуры

&НаКлиенте
Процедура ПрочееСубконтоПриИзменении(Элемент)

	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма);

	ЗаполнитьДобавленныеКолонкиСтрокиТаблицыПрочее_НалоговыйУчет();

КонецПроцедуры

&НаКлиенте
Процедура ПрочееСубконтоНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	СтрокаТаблицы = Элементы.Прочее.ТекущиеДанные;

	ПараметрыДокумента = ПолучитьСписокПараметров(ЭтаФорма, СтрокаТаблицы, "Субконто%Индекс%");
	ПараметрыДокумента.Вставить("СчетУчета", СтрокаТаблицы.СчетЗатрат);
	ОбщегоНазначенияБПКлиент.НачалоВыбораЗначенияСубконто(ЭтаФорма, Элемент, СтандартнаяОбработка, ПараметрыДокумента);

КонецПроцедуры

&НаКлиенте
Процедура ПрочееНалоговоеНазначениеПриИзменении(Элемент)
	
	СтрокаТаблицы = Элементы.Прочее.ТекущиеДанные;
	
	РассчитатьПропорциональныйНДСПоСтроке(СтрокаТаблицы, ПлательщикНДС, КоэффициентПропорциональногоНДС);

	ЗаполнитьДобавленныеКолонкиСтрокиТаблицыПрочее_НалоговыйУчет();
	
КонецПроцедуры

&НаКлиенте
Процедура ПрочееНалоговоеНазначениеДоходовИЗатратПриИзменении(Элемент)
	
	ЗаполнитьДобавленныеКолонкиСтрокиТаблицыПрочее_НалоговыйУчет();
	
КонецПроцедуры

&НаКлиенте
Процедура ПрочееКомандировкаЗарубежПриИзменении(Элемент)
	
	СтрокаТаблицы = Элементы.Прочее.ТекущиеДанные;
	
	ДанныеОбъекта = Новый Структура("ВалютаДокумента, КурсДокумента, КратностьДокумента");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	НормированиеРасходовСуточные(СтрокаТаблицы, ДанныеОбъекта, ВалютаРегламентированногоУчета, НормаСуточныеЗарубеж, НормаСуточные);
	
КонецПроцедуры

&НаКлиенте
Процедура ПрочееСуточныеДатаСПриИзменении(Элемент)
		
	ПрочееСуточныеДатаСПриИзмененииНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ПрочееСуточныеДатаПоПриИзменении(Элемент)
	
	ПрочееСуточныеДатаСПриИзмененииНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ПрочееСуточныеДатаСПриИзмененииНаКлиенте()
	
	СтрокаТаблицы = Элементы.Прочее.ТекущиеДанные;

	Если ЗначениеЗаполнено(СтрокаТаблицы.СуточныеДатаС) И ЗначениеЗаполнено(СтрокаТаблицы.СуточныеДатаПо) Тогда
	
		КвоСекВСутках = 60*60*24;
		СтрокаТаблицы.КоличествоСуток = (КонецДня(СтрокаТаблицы.СуточныеДатаПо) - НачалоДня(СтрокаТаблицы.СуточныеДатаС) + 1) / КвоСекВСутках;
		
		ДанныеОбъекта = Новый Структура("ВалютаДокумента, КурсДокумента, КратностьДокумента");
		ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
		НормированиеРасходовСуточные(СтрокаТаблицы, ДанныеОбъекта, ВалютаРегламентированногоУчета, НормаСуточныеЗарубеж, НормаСуточные);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПрочееКоличествоСутокПриИзменении(Элемент)
	
	СтрокаТаблицы = Элементы.Прочее.ТекущиеДанные;

	ДанныеОбъекта = Новый Структура("ВалютаДокумента, КурсДокумента, КратностьДокумента");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	НормированиеРасходовСуточные(СтрокаТаблицы, ДанныеОбъекта, ВалютаРегламентированногоУчета, НормаСуточныеЗарубеж, НормаСуточные);
	
КонецПроцедуры

&НаКлиенте
Процедура ПрочееИНАГРО_ОтражатьСчетУчетаРасчетовСКонтрагентомПриИзменении(Элемент) // ИНАГРО
	
	ТекущиеДанные = Элементы.Прочее.ТекущиеДанные;

	ДанныеСтрокиТаблицы = Новый Структура(
		"Контрагент, ДоговорКонтрагента,
		|ИНАГРО_ОтражатьСчетУчетаРасчетовСКонтрагентом,
		|ИНАГРО_СчетУчетаРасчетовСКонтрагентом"); 
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, ТекущиеДанные); 	
	
	ПрочееИНАГРО_ОтражатьСчетУчетаРасчетовСКонтрагентомПриИзмененииНаСервере(ДанныеСтрокиТаблицы, Объект.Организация);

	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтрокиТаблицы);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПодборТовары(Команда)

	ПараметрыПодбора = ПолучитьПараметрыПодбора("Товары");
	Если ПараметрыПодбора <> Неопределено Тогда
		ОткрытьФорму("Обработка.ПодборНоменклатуры.Форма.Форма", ПараметрыПодбора,
			ЭтаФорма, УникальныйИдентификатор);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПодборВозвратнаяТара(Команда)

	ПараметрыПодбора = ПолучитьПараметрыПодбора("ВозвратнаяТара");
	Если ПараметрыПодбора <> Неопределено Тогда
		ОткрытьФорму("Обработка.ПодборНоменклатуры.Форма.Форма", ПараметрыПодбора,
			ЭтаФорма, УникальныйИдентификатор);
	КонецЕсли;

КонецПроцедуры

// ИНАГРО++
&НаКлиенте
Процедура ЗаполнитьПоПриходномуОрдеруТовары(Команда)
			
	ОткрытьФормуВыбораПриходныйОрдерНаТовары("Товары", "Заполнить"); 		
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзПриходногоОрдераТовары(Команда)
	
	ОткрытьФормуВыбораПриходныйОрдерНаТовары("Товары", "Добавить");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоПриходномуОрдеруТара(Команда)
	
	ОткрытьФормуВыбораПриходныйОрдерНаТовары("ВозвратнаяТара", "Заполнить"); 
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзПриходногоОрдераТара(Команда)
	
	ОткрытьФормуВыбораПриходныйОрдерНаТовары("ВозвратнаяТара", "Заполнить");
	
КонецПроцедуры 

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ПодготовитьФормуНаСервере()

	УстановитьФункциональныеОпцииФормы();
	
	УстановитьСостояниеДокумента();

	ТекущаяДатаДокумента	= Объект.Дата;
	
	ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	
	ЗаполнитьДобавленныеКолонкиТаблиц();
	
	УстановитьЗаголовкиКолонок();
	
	УстановитьДоступностьСубконто();
	
	Если НЕ ЗначениеЗаполнено(Объект.Склад) Тогда // ИНАГРО 		
		УстановитьТипСкладаОрдера(ЭтаФорма);
	КонецЕсли;

	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаСервере
Процедура УстановитьФункциональныеОпцииФормы()

	ОбщегоНазначенияБПКлиентСервер.УстановитьПараметрыФункциональныхОпцийФормыДокумента(ЭтаФорма);
	
	ПлательщикНДС			= УчетнаяПолитика.ПлательщикНДС(Объект.Организация, Объект.Дата);
	ПлательщикНалогаНаПрибыльДо2015	= УчетнаяПолитика.ПлательщикНалогаНаПрибыльДо2015(Объект.Организация, Объект.Дата);
	КоэффициентПропорциональногоНДС = НалоговыйУчет.ПолучитьКоэффициентПропорциональногоНДС(Объект.Организация, Объект.Дата);
	
	ПараметрыНалоговогоУчета = РегистрыСведений.ПараметрыНалоговогоУчета.СрезПоследних(Объект.Дата);
	Если ПараметрыНалоговогоУчета.Количество() = 0 Тогда
		// не нормируем
		НормаСуточные = 0; 
		НормаСуточныеЗарубеж = 0;		
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Не указаны нормы командировочных расходов на %1.';uk='Не вказані норми витрат на відрядження на %1.'"),
				Формат(Объект.Дата, "ДФ=dd.MM.yyyy")
			)
		);
		
	Иначе
		НормаСуточные        =  ПараметрыНалоговогоУчета[0].НормаСуточные;
		НормаСуточныеЗарубеж =  ПараметрыНалоговогоУчета[0].НормаСуточныеЗарубеж;		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура УстановитьСостояниеДокумента()
	
	СостояниеДокумента = ОбщегоНазначенияБП.СостояниеДокумента(Объект);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Элементы = Форма.Элементы;
	Объект   = Форма.Объект;
	
	Элементы.ГруппаПрочееНалоговоеНазначениеДоходовИЗатрат.Видимость = Форма.ПлательщикНалогаНаПрибыльДо2015;
	Элементы.ПрочееСуммаНУ.Видимость = Форма.ПлательщикНалогаНаПрибыльДо2015;
	
	// ИНАГРО++
	НаСклад  = Объект.ИНАГРО_ВидПоступления = ПредопределенноеЗначение("Перечисление.ИНАГРО_ВидыПоступленияТоваров.НаСклад"); 
	ПоОрдеру = Объект.ИНАГРО_ВидПоступления = ПредопределенноеЗначение("Перечисление.ИНАГРО_ВидыПоступленияТоваров.ПоОрдеру");
	СкладВТЧ = Объект.ИНАГРО_СкладВТЧ;
	ОрдерВТЧ = Объект.ИНАГРО_ОрдерВТЧ;
	
	Элементы.ИНАГРО_СкладВТЧ.Видимость = НаСклад;
	Элементы.ИНАГРО_ОрдерВТЧ.Видимость = ПоОрдеру;	
	
	Если НаСклад Тогда 
		Элементы.Склад.Доступность = НЕ СкладВТЧ;
	ИначеЕсли ПоОрдеру Тогда 
		Элементы.Склад.Доступность = НЕ ОрдерВТЧ;
	КонецЕсли;
	
	Элементы.ТоварыИНАГРО_Ордер.Видимость = ОрдерВТЧ;
	Элементы.ТоварыИНАГРО_Склад.Видимость = СкладВТЧ;
	
	Элементы.ВозвратнаяТараИНАГРО_Ордер.Видимость = ОрдерВТЧ;
	Элементы.ВозвратнаяТараИНАГРО_Склад.Видимость = СкладВТЧ;

	Элементы.ТоварыДобавитьИзПриходногоОрдераТовары.Доступность       = ОрдерВТЧ;
	Элементы.ВозвратнаяТараДобавитьИзПриходногоОрдераТара.Доступность = ОрдерВТЧ;	
	// ИНАГРО--
	
	ОбновитьИтоги(Форма);
	СформироватьНадписьЦеныИВалюта(Форма);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗначенияРеквизитовИзДокументаАванса(Знач ДокументАванса, Знач ФизЛицоЗаполнено)
	
	РеквизитыСтрока = "СуммаДокумента, ВалютаДокумента";
	
	// Если ФизЛицо еще не было выбрано, заполним его по документу аванса
	Если НЕ ФизЛицоЗаполнено Тогда
		Если ТипЗнч(ДокументАванса) = Тип("ДокументСсылка.СписаниеСРасчетногоСчета") Тогда
			РеквизитыСтрока = РеквизитыСтрока + ", ФизЛицо";
		Иначе
			РеквизитыСтрока = РеквизитыСтрока + ", Контрагент";
		КонецЕсли;
	КонецЕсли;
	
	Возврат ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументАванса, РеквизитыСтрока);
	
КонецФункции

&НаСервере
Процедура УстановитьЗаголовкиКолонок()

	ЗаголовокЦена 	= ?(ПлательщикНДС, ?(Объект.СуммаВключаетНДС, НСтр("ru='Цена с НДС';uk='Ціна з ПДВ'"), НСтр("ru='Цена без НДС';uk='Ціна без ПДВ'")), НСтр("ru='Цена';uk='Ціна'"));
	ЗаголовокСумма 	= ?(ПлательщикНДС, ?(Объект.СуммаВключаетНДС, НСтр("ru='Сумма с НДС';uk='Сума з ПДВ'"), НСтр("ru='Сумма без НДС';uk='Сума без ПДВ'")), НСтр("ru='Сумма';uk='Сума'"));
	
	Элементы.ТоварыЦена.Заголовок	= ЗаголовокЦена;
	Элементы.ТоварыСумма.Заголовок	= ЗаголовокСумма;
	Элементы.ПрочееСумма.Заголовок	= ЗаголовокСумма;
	
	// При поступлении накладные поставщика могут быть как с НДС так и без.
	// Только при оплате необходимо выводить заголовки в зависимости от признака ПлательщикНДС
	Элементы.ОплатаПоставщикамСумма.Заголовок = ?(ПлательщикНДС, НСтр("ru='Сумма с НДС';uk='Сума з ПДВ'"), НСтр("ru='Сумма';uk='Сума'"));
	
КонецПроцедуры

&НаСервере
Процедура ДатаПриИзмененииНаСервере()
	
	УстановитьФункциональныеОпцииФормы();
	
	КэшКурсов = Новый Соответствие;
	Если (Объект.ВалютаДокумента <> ВалютаРегламентированногоУчета) Тогда
		СтруктураКурсаДокумента   = РаботаСКурсамиВалют.ПолучитьКурсВалюты(Объект.ВалютаДокумента, Объект.Дата);
		Объект.КурсДокумента      = СтруктураКурсаДокумента.Курс;
		Объект.КратностьДокумента = СтруктураКурсаДокумента.Кратность;
		КэшКурсов.Вставить(Объект.ВалютаДокумента, СтруктураКурсаДокумента);
	КонецЕсли;
		
	Для каждого СтрокаТаблицы Из Объект.ОплатаПоставщикам Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ДоговорКонтрагента) Тогда
			Продолжить;
		КонецЕсли;
		ВалютаДоговора = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаТаблицы.ДоговорКонтрагента, "ВалютаВзаиморасчетов");
		Если ВалютаДоговора = ВалютаРегламентированногоУчета Тогда
			Продолжить;
		КонецЕсли;
		Если КэшКурсов[ВалютаДоговора] = Неопределено Тогда
			СтруктураКурсаДоговора = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаДоговора, Объект.Дата);
			КэшКурсов.Вставить(ВалютаДоговора, СтруктураКурсаДоговора);
		КонецЕсли;
		СтрокаТаблицы.КурсВзаиморасчетов      = КэшКурсов[ВалютаДоговора].Курс;
		СтрокаТаблицы.КратностьВзаиморасчетов = КэшКурсов[ВалютаДоговора].Кратность;
		СтрокаТаблицы.СуммаВзаиморасчетов     = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(
			СтрокаТаблицы.Сумма,
			Объект.ВалютаДокумента, ВалютаДоговора,
			Объект.КурсДокумента, СтрокаТаблицы.КурсВзаиморасчетов,
			Объект.КратностьДокумента, СтрокаТаблицы.КратностьВзаиморасчетов);
	КонецЦикла;
	
	Если Год(ТекущаяДатаДокумента) <> Год(Объект.Дата) Тогда
	    РассчитатьПропорциональныйНДСПоДокументу();
	КонецЕсли;

	Для каждого СтрокаТаблицы Из Объект.Прочее Цикл
		ЗаполнитьДобавленныеКолонкиСтрокиТаблицыПрочееСервер_НалоговыйУчет(СтрокаТаблицы, Объект.Дата, ПлательщикНДС);
	КонецЦикла;

	УправлениеФормой(ЭтаФорма);
	УстановитьЗаголовкиКолонок();

КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()
	
	УстановитьФункциональныеОпцииФормы();
	
	
	Для каждого СтрокаТаблицы Из Объект.ВозвратнаяТара Цикл
		ДанныеСтрокиТабличнойЧасти = Новый Структура(
			"Контрагент, ДоговорКонтрагента, Сделка, 
			|Организация, СчетУчетаРасчетовПоТаре, СчетУчетаРасчетовПоТареПоАвансам,
			|ДоговорКонтрагентаВедениеВзаиморасчетов");
		ЗаполнитьЗначенияСвойств(ДанныеСтрокиТабличнойЧасти, Объект);
		ЗаполнитьЗначенияСвойств(ДанныеСтрокиТабличнойЧасти, СтрокаТаблицы);
		ВозвратнаяТараКонтрагентПриИзмененииНаСервере(ДанныеСтрокиТабличнойЧасти);
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ДанныеСтрокиТабличнойЧасти);
	КонецЦикла;
	
	Для каждого СтрокаТаблицы Из Объект.ОплатаПоставщикам Цикл
		ДанныеСтрокиТабличнойЧасти = Новый Структура(
			"Контрагент, ДоговорКонтрагента, КурсВзаиморасчетов, КратностьВзаиморасчетов, Сделка,
			|СчетУчетаРасчетовСКонтрагентом, СчетУчетаРасчетовПоАвансам, СчетУчетаНДС, СчетУчетаНДСПодтвержденный,
			|Сумма, СуммаВзаиморасчетов, Организация, Дата, ВалютаДокумента, КурсДокумента, КратностьДокумента,
			|СтавкаНДС, СуммаНДС, СуммаНДСПропорциональноКредит,
			|ЗаТару, НалоговоеНазначение, Амортизируется,
			|ДоговорКонтрагентаВалютаВзаиморасчетов, ДоговорКонтрагентаВедениеВзаиморасчетов, ДоговорКонтрагентаСложныйНалоговыйУчет");
		ЗаполнитьЗначенияСвойств(ДанныеСтрокиТабличнойЧасти, Объект);
		ЗаполнитьЗначенияСвойств(ДанныеСтрокиТабличнойЧасти, СтрокаТаблицы);
		ОплатаПоставщикамКонтрагентПриИзмененииНаСервере(ДанныеСтрокиТабличнойЧасти, ПлательщикНДС, КоэффициентПропорциональногоНДС);
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ДанныеСтрокиТабличнойЧасти);
	КонецЦикла;
	
	
	РассчитатьПропорциональныйНДСПоДокументу();

	Для каждого СтрокаТаблицы Из Объект.Прочее Цикл
		ЗаполнитьДобавленныеКолонкиСтрокиТаблицыПрочееСервер_НалоговыйУчет(СтрокаТаблицы, Объект.Дата, ПлательщикНДС);
	КонецЦикла;

	ЗаполнитьСчетаУчетаВТабличнойЧастиНаСервере();
	
	ПерезаполнитьАвансы();
	
	УправлениеФормой(ЭтаФорма);
	УстановитьЗаголовкиКолонок();
	
КонецПроцедуры

&НаСервере
Процедура СкладПриИзмененииНаСервере()
	
	Если Объект.ИНАГРО_ВидПоступления = Перечисления.ИНАГРО_ВидыПоступленияТоваров.ПоОрдеру Тогда // ИНАГРО
		Если НЕ ЗначениеЗаполнено(Объект.ФизЛицо) Тогда
			Объект.ФизЛицо = Объект.Склад.ФизЛицо;
		КонецЕсли;	
	КонецЕсли;
	
	ЗаполнитьСчетаУчетаВТабличнойЧастиНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПерезаполнитьАвансы()
	
	Если Объект.ВыданныеАвансы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаАвансы = Объект.ВыданныеАвансы[0];
	
	Если НЕ ЗначениеЗаполнено(СтрокаАвансы.ДокументАванса) Тогда
		Возврат;
	КонецЕсли;
	
	// Проверим реквизиты документа из первой строки - если они совпадают
	// с текущим Подотчетным лицом, то ничего не делаем
	
	ЗначенияРеквизитов = ЗначенияРеквизитовИзДокументаАванса(СтрокаАвансы.ДокументАванса, Ложь);
	Если ЗначенияРеквизитов.Свойство("ФизЛицо") Тогда
		Подотчетник = ЗначенияРеквизитов.ФизЛицо;
	ИначеЕсли ЗначенияРеквизитов.Свойство("Контрагент") Тогда
		Подотчетник = ЗначенияРеквизитов.Контрагент;
	КонецЕсли;
	
	Если Подотчетник <> Объект.ФизЛицо Тогда
		Объект.ВыданныеАвансы.Очистить();
		
		СтрокаАвансы = Объект.ВыданныеАвансы.Добавить();
		СтрокаАвансы.СуммаАванса = ИтогАвансов;
		СтрокаАвансы.Валюта      = ЗначенияРеквизитов.ВалютаДокумента;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСчетаУчетаВТабличнойЧастиНаСервере(ИмяТабличнойЧасти = "")

	Если ПустаяСтрока(ИмяТабличнойЧасти) ИЛИ ИмяТабличнойЧасти = "Товары" Тогда
		Документы.АвансовыйОтчет.ЗаполнитьСчетаУчетаВТабличнойЧасти(Объект, "Товары");
	КонецЕсли;
	
	Если ПустаяСтрока(ИмяТабличнойЧасти) ИЛИ ИмяТабличнойЧасти = "ВозвратнаяТара" Тогда
		Документы.АвансовыйОтчет.ЗаполнитьСчетаУчетаВТабличнойЧасти(Объект, "ВозвратнаяТара");
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьСубконто()

	Для Каждого Проводка Из Объект.Прочее Цикл
		
		ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3",
		"Субконто1", "Субконто2", "Субконто3");
		БухгалтерскийУчетКлиентСервер.УстановитьДоступностьСубконто(Проводка.СчетЗатрат, Проводка, ПоляОбъекта);
		
	КонецЦикла;

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ТоварыНоменклатураПриИзмененииНаСервере(СтрокаТабличнойЧасти, Знач ДанныеОбъекта)

	СведенияОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОНоменклатуре(
		СтрокаТабличнойЧасти.Номенклатура, ДанныеОбъекта);
	Если СведенияОНоменклатуре = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаТабличнойЧасти.ЕдиницаИзмерения       = СведенияОНоменклатуре.БазоваяЕдиницаИзмерения;
	СтрокаТабличнойЧасти.Коэффициент            = СведенияОНоменклатуре.Коэффициент;
	СтрокаТабличнойЧасти.Цена					= СведенияОНоменклатуре.Цена;
	СтрокаТабличнойЧасти.СтавкаНДС				= СведенияОНоменклатуре.СтавкаНДС;
	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ДанныеОбъекта.СуммаВключаетНДС);
	РассчитатьПропорциональныйНДСПоСтроке(СтрокаТабличнойЧасти, ДанныеОбъекта.ПлательщикНДС, ДанныеОбъекта.КоэффициентПропорциональногоНДС);
	
	Документы.АвансовыйОтчет.ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(
		ДанныеОбъекта, СтрокаТабличнойЧасти, "Товары", СведенияОНоменклатуре);
	
	ЗаполнитьДобавленныеКолонкиСтрокиТаблицыТовары(СтрокаТабличнойЧасти, ДанныеОбъекта.СуммаВключаетНДС);

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ТоварыТоварыЕдиницаИзмеренияПриИзмененииНаСервере(СтрокаТабличнойЧасти, Знач ДанныеОбъекта)

	// Выполнить общие действия для всех документов при изменении Единица.
	ОбработкаТабличныхЧастей.ЗаполнитьКоэффициентТабЧасти(СтрокаТабличнойЧасти, ДанныеОбъекта, "Товары", Метаданные.Документы.АвансовыйОтчет);	
	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ДанныеОбъекта.СуммаВключаетНДС);
	РассчитатьПропорциональныйНДСПоСтроке(СтрокаТабличнойЧасти, ДанныеОбъекта.ПлательщикНДС, ДанныеОбъекта.КоэффициентПропорциональногоНДС);
	
	ЗаполнитьДобавленныеКолонкиСтрокиТаблицыТовары(СтрокаТабличнойЧасти, ДанныеОбъекта.СуммаВключаетНДС);

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ВозвратнаяТараНоменклатураПриИзмененииНаСервере(СтрокаТабличнойЧасти, Знач ДанныеОбъекта)

	СведенияОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОНоменклатуре(
		СтрокаТабличнойЧасти.Номенклатура, ДанныеОбъекта);
	Если СведенияОНоменклатуре = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаТабличнойЧасти.Цена = СведенияОНоменклатуре.Цена;
	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
	
	Документы.АвансовыйОтчет.ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(
		ДанныеОбъекта, СтрокаТабличнойЧасти, "ВозвратнаяТара", СведенияОНоменклатуре);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьЗаголовкиИДоступностьСубконто(Форма, Счет, Постфикс = "", ЕстьПодразделение, ЭтоТаблица = Ложь)

	ПоляФормы = Новый Структура("Субконто1, Субконто2, Субконто3",
								"ПрочееСубконто" + Постфикс + "1",
								"ПрочееСубконто" + Постфикс + "2",
								"ПрочееСубконто" + Постфикс + "3");


	БухгалтерскийУчетКлиентСервер.ПриВыбореСчета(Счет, Форма, ПоляФормы, Неопределено, ЭтоТаблица);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьСписокПараметров(Форма, Объект, ШаблонИмяПоляОбъекта)
	
	СписокПараметров = Новый Структура;
	Для Индекс = 1 По 3 Цикл
		ИмяПоля = СтрЗаменить(ШаблонИмяПоляОбъекта, "%Индекс%", Индекс);
		Если ТипЗнч(Объект[ИмяПоля]) = Тип("СправочникСсылка.Контрагенты") Тогда
			СписокПараметров.Вставить("Контрагент", Объект[ИмяПоля]);
		ИначеЕсли ТипЗнч(Объект[ИмяПоля]) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
			СписокПараметров.Вставить("ДоговорКонтрагента", Объект[ИмяПоля]);
		ИначеЕсли ТипЗнч(Объект[ИмяПоля]) = Тип("СправочникСсылка.Номенклатура") Тогда
			СписокПараметров.Вставить("Номенклатура", Объект[ИмяПоля]);
		ИначеЕсли ТипЗнч(Объект[ИмяПоля]) = Тип("СправочникСсылка.Склады") Тогда
			СписокПараметров.Вставить("Склад", Объект[ИмяПоля]);
		КонецЕсли;
	КонецЦикла;
	СписокПараметров.Вставить("ОстаткиОбороты", "Кт");
	СписокПараметров.Вставить("Организация",    Форма.Объект.Организация);
	СписокПараметров.Вставить("СчетУчета",      Объект.СчетЗатрат);
	
	Возврат СписокПараметров;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ИзменитьПараметрыВыбораПолейСубконто(Форма)

	СтрокаПлатеж = Форма.Объект.Прочее.НайтиПоИдентификатору(Форма.Элементы.Прочее.ТекущаяСтрока);
	ПараметрыДокумента = ПолучитьСписокПараметров(Форма, СтрокаПлатеж, "Субконто%Индекс%");
	БухгалтерскийУчетКлиентСервер.ИзменитьПараметрыВыбораПолейСубконто(Форма, СтрокаПлатеж, "Субконто%Индекс%", "ПрочееСубконто%Индекс%", ПараметрыДокумента);

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПрочееНоменклатураПриИзмененииНаСервере(СтрокаТабличнойЧасти, Знач ДанныеОбъекта)

	СведенияОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОНоменклатуре(
		СтрокаТабличнойЧасти.Номенклатура, ДанныеОбъекта);
	Если СведенияОНоменклатуре = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаТабличнойЧасти.Содержание	= СведенияОНоменклатуре.НаименованиеПолное;
	СтрокаТабличнойЧасти.СтавкаНДС		= СведенияОНоменклатуре.СтавкаНДС;
	
	Документы.АвансовыйОтчет.ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(
		ДанныеОбъекта, СтрокаТабличнойЧасти, "Прочее", СведенияОНоменклатуре);
		
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ДанныеОбъекта.СуммаВключаетНДС);
	РассчитатьПропорциональныйНДСПоСтроке(СтрокаТабличнойЧасти, ДанныеОбъекта.ПлательщикНДС, ДанныеОбъекта.КоэффициентПропорциональногоНДС);	
	
	СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма + ?(ДанныеОбъекта.СуммаВключаетНДС, 0, СтрокаТабличнойЧасти.СуммаНДС);	
		
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ТоварыКонтрагентПриИзмененииНаСервере(СтрокаТаблицы)
	
	МассивДоговоров = Новый Массив;
	// Список видов договоров - Метаданные.Документы.АвансовыйОтчет.ТабличныеЧасти.Товары.Реквизиты.ДоговорКонтрагента.ПараметрыВыбора[0].Значение
	МассивВидовДоговоров = Метаданные.Документы.АвансовыйОтчет.ТабличныеЧасти.Товары.Реквизиты.ДоговорКонтрагента.ПараметрыВыбора[0].Значение;
	Для каждого ЗначениеОтбора Из МассивВидовДоговоров Цикл
		МассивДоговоров.Добавить(ЗначениеОтбора);
	КонецЦикла;
	
	БухгалтерскийУчетПереопределяемый.УстановитьДоговорКонтрагента(СтрокаТаблицы.ДоговорКонтрагента,
		СтрокаТаблицы.Контрагент, СтрокаТаблицы.Организация, МассивДоговоров);
	
	Если ЗначениеЗаполнено(СтрокаТаблицы.ДоговорКонтрагента) Тогда
		ТоварыДоговорКонтрагентаПриИзмененииНаСервере(СтрокаТаблицы);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ТоварыДоговорКонтрагентаПриИзмененииНаСервере(СтрокаТаблицы)
	
	РеквизитыДоговораКонтрагента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		СтрокаТаблицы.ДоговорКонтрагента, "Владелец, ВалютаВзаиморасчетов, ВедениеВзаиморасчетов");
	Если ЗначениеЗаполнено(СтрокаТаблицы.ДоговорКонтрагента) И НЕ ЗначениеЗаполнено(СтрокаТаблицы.Контрагент) Тогда
		СтрокаТаблицы.Контрагент = РеквизитыДоговораКонтрагента.Владелец;
	КонецЕсли;
		
	СчетаУчета = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаРасчетовСКонтрагентом(
		СтрокаТаблицы.Организация, СтрокаТаблицы.Контрагент, СтрокаТаблицы.ДоговорКонтрагента);
	
	СтрокаТаблицы.СчетУчетаНДС = СчетаУчета.СчетУчетаНДСПриобретений;
	
	СтрокаТаблицы.Сделка = Неопределено;
	
	// Заполним зависимые добавленыые колонки
	ДоговорУказан = ЗначениеЗаполнено(СтрокаТаблицы.ДоговорКонтрагента);
	СтрокаТаблицы.ДоговорКонтрагентаВедениеВзаиморасчетов = ?(ДоговорУказан, РеквизитыДоговораКонтрагента.ВедениеВзаиморасчетов, Неопределено);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОплатаПоставщикамКонтрагентПриИзмененииНаСервере(СтрокаТаблицы, Знач ПлательщикНДС, Знач КоэффициентПропорциональногоНДС)
	
	МассивДоговоров = Новый Массив;
	// Список видов договоров - Метаданные.Документы.АвансовыйОтчет.ТабличныеЧасти.ОплатаПоставщикам.Реквизиты.ДоговорКонтрагента.ПараметрыВыбора[0].Значение
	МассивВидовДоговоров = Метаданные.Документы.АвансовыйОтчет.ТабличныеЧасти.ОплатаПоставщикам.Реквизиты.ДоговорКонтрагента.ПараметрыВыбора[0].Значение;
	Для каждого ЗначениеОтбора Из МассивВидовДоговоров Цикл
		МассивДоговоров.Добавить(ЗначениеОтбора);
	КонецЦикла;
	
	БухгалтерскийУчетПереопределяемый.УстановитьДоговорКонтрагента(СтрокаТаблицы.ДоговорКонтрагента,
		СтрокаТаблицы.Контрагент, СтрокаТаблицы.Организация, МассивДоговоров);
	
	Если ЗначениеЗаполнено(СтрокаТаблицы.ДоговорКонтрагента) Тогда
		ОплатаПоставщикамДоговорКонтрагентаПриИзмененииНаСервере(СтрокаТаблицы, ПлательщикНДС, КоэффициентПропорциональногоНДС);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОплатаПоставщикамДоговорКонтрагентаПриИзмененииНаСервере(СтрокаТаблицы, Знач ПлательщикНДС, Знач КоэффициентПропорциональногоНДС)
	
	РеквизитыДоговораКонтрагента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		СтрокаТаблицы.ДоговорКонтрагента, "Владелец, ВалютаВзаиморасчетов, ВедениеВзаиморасчетов, СложныйНалоговыйУчет");
	Если ЗначениеЗаполнено(СтрокаТаблицы.ДоговорКонтрагента) И НЕ ЗначениеЗаполнено(СтрокаТаблицы.Контрагент) Тогда
		СтрокаТаблицы.Контрагент = РеквизитыДоговораКонтрагента.Владелец;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтрокаТаблицы.ДоговорКонтрагента) Тогда
		СтруктураКурсаВзаиморасчетов = РаботаСКурсамиВалют.ПолучитьКурсВалюты(
			РеквизитыДоговораКонтрагента.ВалютаВзаиморасчетов, СтрокаТаблицы.Дата);
		СтрокаТаблицы.КурсВзаиморасчетов      = СтруктураКурсаВзаиморасчетов.Курс;
		СтрокаТаблицы.КратностьВзаиморасчетов = СтруктураКурсаВзаиморасчетов.Кратность;
	Иначе
		СтрокаТаблицы.КурсВзаиморасчетов      = 1;
		СтрокаТаблицы.КратностьВзаиморасчетов = 1;
	КонецЕсли;
	
	ВалютаВзаиморасчетов = РеквизитыДоговораКонтрагента.ВалютаВзаиморасчетов;
	
	СтрокаТаблицы.ДоговорКонтрагентаВалютаВзаиморасчетов = ВалютаВзаиморасчетов;
	
	СтрокаТаблицы.СуммаВзаиморасчетов = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(
		СтрокаТаблицы.Сумма, СтрокаТаблицы.ВалютаДокумента, ВалютаВзаиморасчетов,
		СтрокаТаблицы.КурсДокумента, СтрокаТаблицы.КурсВзаиморасчетов,
		СтрокаТаблицы.КратностьДокумента, СтрокаТаблицы.КратностьВзаиморасчетов);
	
	СчетаУчета = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаРасчетовСКонтрагентом(
		СтрокаТаблицы.Организация, СтрокаТаблицы.Контрагент, СтрокаТаблицы.ДоговорКонтрагента);
	
	СтрокаТаблицы.СчетУчетаРасчетовСКонтрагентом = СчетаУчета.СчетРасчетов;
	СтрокаТаблицы.СчетУчетаРасчетовПоАвансам     = СчетаУчета.СчетАвансов;
	СтрокаТаблицы.СчетУчетаНДС    				 = СчетаУчета.СчетУчетаНДСПриобретений;
	СтрокаТаблицы.СчетУчетаНДСПодтвержденный     = СчетаУчета.СчетУчетаНДСПриобретенийПодтвержденный;
	Если СтрокаТаблицы.ЗаТару Тогда
		СтрокаТаблицы.НалоговоеНазначение 		 = СчетаУчета.НалоговоеНазначениеПриобретенийПоТаре;
	Иначе
		СтрокаТаблицы.НалоговоеНазначение        = СчетаУчета.НалоговоеНазначениеПриобретений;
	КонецЕсли;
	СтрокаТаблицы.СтавкаНДС		  				 = СчетаУчета.СтавкаНДСПриобретений;
	СтрокаТаблицы.Амортизируется		  		 = СчетаУчета.Амортизируется;
	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьПропорциональныйНДСТабЧасти(СтрокаТаблицы, ПлательщикНДС, КоэффициентПропорциональногоНДС);
	
	СтрокаТаблицы.Сделка = Неопределено;
	
	// Заполним зависимые добавленыые колонки
	ДоговорУказан = ЗначениеЗаполнено(СтрокаТаблицы.ДоговорКонтрагента);
	СтрокаТаблицы.ДоговорКонтрагентаВалютаВзаиморасчетов  = ?(ДоговорУказан, РеквизитыДоговораКонтрагента.ВалютаВзаиморасчетов,  Неопределено);
	СтрокаТаблицы.ДоговорКонтрагентаВедениеВзаиморасчетов = ?(ДоговорУказан, РеквизитыДоговораКонтрагента.ВедениеВзаиморасчетов, Неопределено);
	СтрокаТаблицы.ДоговорКонтрагентаСложныйНалоговыйУчет  = ?(ДоговорУказан, РеквизитыДоговораКонтрагента.СложныйНалоговыйУчет,  Неопределено);

КонецПроцедуры

Процедура ОплатаПоставщикамЗаТаруПриИзмененииНаСервере(СтрокаТаблицы, Знач ПлательщикНДС, Знач КоэффициентПропорциональногоНДС)
	
	СчетаУчета = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаРасчетовСКонтрагентом(
		СтрокаТаблицы.Организация, СтрокаТаблицы.Контрагент, СтрокаТаблицы.ДоговорКонтрагента);
		
	Если СтрокаТаблицы.ЗаТару Тогда
		СтрокаТаблицы.НалоговоеНазначение = СчетаУчета.НалоговоеНазначениеПриобретенийПоТаре;
	Иначе
		СтрокаТаблицы.НалоговоеНазначение = СчетаУчета.НалоговоеНазначениеПриобретений;
	КонецЕсли;
	
	РассчитатьПропорциональныйНДСПоСтроке(СтрокаТаблицы, ПлательщикНДС, КоэффициентПропорциональногоНДС);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПрочееКонтрагентПриИзмененииНаСервере(СтрокаТаблицы)
	
	МассивДоговоров = Новый Массив;
	// Список видов договоров - Метаданные.Документы.АвансовыйОтчет.ТабличныеЧасти.Прочее.Реквизиты.ДоговорКонтрагента.ПараметрыВыбора[0].Значение
	МассивВидовДоговоров = Метаданные.Документы.АвансовыйОтчет.ТабличныеЧасти.Прочее.Реквизиты.ДоговорКонтрагента.ПараметрыВыбора[0].Значение;
	Для каждого ЗначениеОтбора Из МассивВидовДоговоров Цикл
		МассивДоговоров.Добавить(ЗначениеОтбора);
	КонецЦикла;
	
	БухгалтерскийУчетПереопределяемый.УстановитьДоговорКонтрагента(СтрокаТаблицы.ДоговорКонтрагента,
		СтрокаТаблицы.Контрагент, СтрокаТаблицы.Организация, МассивДоговоров);
	
	Если ЗначениеЗаполнено(СтрокаТаблицы.ДоговорКонтрагента) Тогда
		ПрочееДоговорКонтрагентаПриИзмененииНаСервере(СтрокаТаблицы);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПрочееДоговорКонтрагентаПриИзмененииНаСервере(СтрокаТаблицы)
	
	РеквизитыДоговораКонтрагента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		СтрокаТаблицы.ДоговорКонтрагента, "Владелец, ВедениеВзаиморасчетов");
		
	Если ЗначениеЗаполнено(СтрокаТаблицы.ДоговорКонтрагента) И НЕ ЗначениеЗаполнено(СтрокаТаблицы.Контрагент) Тогда
		СтрокаТаблицы.Контрагент = РеквизитыДоговораКонтрагента.Владелец;
	КонецЕсли;
	
	СчетаУчета = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаРасчетовСКонтрагентом(
		СтрокаТаблицы.Организация, СтрокаТаблицы.Контрагент, СтрокаТаблицы.ДоговорКонтрагента);
	
	СтрокаТаблицы.СчетУчетаНДС = СчетаУчета.СчетУчетаНДСПриобретений;
	
	СтрокаТаблицы.Сделка = Неопределено;
	
	// Заполним зависимые добавленыые колонки
	ДоговорУказан = ЗначениеЗаполнено(СтрокаТаблицы.ДоговорКонтрагента);
	СтрокаТаблицы.ДоговорКонтрагентаВедениеВзаиморасчетов = ?(ДоговорУказан, РеквизитыДоговораКонтрагента.ВедениеВзаиморасчетов, Неопределено);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РассчитатьСуммуВзаиморасчетов(Форма)

	Объект = Форма.Объект;
	СтрокаТаблицы = Объект.ОплатаПоставщикам.НайтиПоИдентификатору(Форма.Элементы.ОплатаПоставщикам.ТекущаяСтрока);

	Если Объект.ВалютаДокумента <> СтрокаТаблицы.ДоговорКонтрагентаВалютаВзаиморасчетов
		ИЛИ Объект.КурсДокумента <> СтрокаТаблицы.КурсВзаиморасчетов
		ИЛИ Объект.КратностьДокумента <> СтрокаТаблицы.КратностьВзаиморасчетов Тогда
		ДанныеСтрокиТабличнойЧасти = Новый Структура("ДоговорКонтрагента, КурсВзаиморасчетов, КратностьВзаиморасчетов,
			|Сумма, СуммаВзаиморасчетов, ВалютаДокумента, КурсДокумента, КратностьДокумента");
		ЗаполнитьЗначенияСвойств(ДанныеСтрокиТабличнойЧасти, Объект);
		ЗаполнитьЗначенияСвойств(ДанныеСтрокиТабличнойЧасти, СтрокаТаблицы);

		СтрокаТаблицы.СуммаВзаиморасчетов = ПолучитьСуммуВзаиморасчетов(ДанныеСтрокиТабличнойЧасти);
	Иначе
		СтрокаТаблицы.СуммаВзаиморасчетов = СтрокаТаблицы.Сумма;
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСуммуВзаиморасчетов(Знач СтрокаТаблицы)

	ВалютаВзаиморасчетов = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаТаблицы.ДоговорКонтрагента, "ВалютаВзаиморасчетов");

	СуммаВзаиморасчетов = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.Сумма,
		СтрокаТаблицы.ВалютаДокумента, ВалютаВзаиморасчетов,
		СтрокаТаблицы.КурсДокумента, СтрокаТаблицы.КурсВзаиморасчетов,
		СтрокаТаблицы.КратностьДокумента, СтрокаТаблицы.КратностьВзаиморасчетов);

	Возврат СуммаВзаиморасчетов;

КонецФункции

&НаСервереБезКонтекста
Процедура ВозвратнаяТараКонтрагентПриИзмененииНаСервере(СтрокаТаблицы)
	
	СписокВидовДоговоров = Новый СписокЗначений;
	СписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком);
	
	ДоговорУстановлен = БухгалтерскийУчетПереопределяемый.УстановитьДоговорКонтрагента(СтрокаТаблицы.ДоговорКонтрагента,
		СтрокаТаблицы.Контрагент, СтрокаТаблицы.Организация, СписокВидовДоговоров);
	
	Если ДоговорУстановлен Тогда
		ВозвратнаяТараДоговорКонтрагентаПриИзмененииНаСервере(СтрокаТаблицы);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ВозвратнаяТараДоговорКонтрагентаПриИзмененииНаСервере(СтрокаТаблицы)

	Если ЗначениеЗаполнено(СтрокаТаблицы.ДоговорКонтрагента) И НЕ ЗначениеЗаполнено(СтрокаТаблицы.Контрагент) Тогда
		СтрокаТаблицы.Контрагент = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаТаблицы.ДоговорКонтрагента, "Владелец");
	КонецЕсли;

	СчетаУчета = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаРасчетовСКонтрагентом(
		СтрокаТаблицы.Организация, СтрокаТаблицы.Контрагент, СтрокаТаблицы.ДоговорКонтрагента);

	СтрокаТаблицы.СчетУчетаРасчетовПоТаре          = СчетаУчета.СчетУчетаТары;
	СтрокаТаблицы.СчетУчетаРасчетовПоТареПоАвансам = СчетаУчета.СчетАвансовПоТаре;

	СтрокаТаблицы.Сделка = Неопределено;

	// Заполним зависимые добавленыые колонки
	РеквизитыДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		СтрокаТаблицы.ДоговорКонтрагента,
		"ВедениеВзаиморасчетов"
	);
	ДоговорУказан = ЗначениеЗаполнено(СтрокаТаблицы.ДоговорКонтрагента);
	СтрокаТаблицы.ДоговорКонтрагентаВедениеВзаиморасчетов = ?(ДоговорУказан, РеквизитыДоговора.ВедениеВзаиморасчетов, Неопределено);
	
КонецПроцедуры

// Процедура выполняет пересчет в табличной части документа после изменений
// в форме "Цены и валюта".Выполняется пересчет колонок: цена, скидка, сумма,
// сумма НДС, всего.
//
&НаКлиенте
Процедура ОбработатьИзмененияПоКнопкеЦеныИВалюты(Знач ВалютаДоИзменения, ПересчитатьЦены = Ложь, ПерезаполнитьЦены = Ложь)
	
	КурсДоИзменения 		= Объект.КурсДокумента;
	КратностьДоИзменения 	= Объект.КратностьДокумента;
	
	// 1. Формируем структуру параметров для заполнения формы "Цены и Валюта".
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Организация",          Объект.Организация);
	СтруктураПараметров.Вставить("ДатаДокумента",        Объект.Дата);
	СтруктураПараметров.Вставить("ВалютаДокумента",      Объект.ВалютаДокумента);
	СтруктураПараметров.Вставить("Курс",                 Объект.КурсДокумента);
	СтруктураПараметров.Вставить("Кратность",            Объект.КратностьДокумента);
	СтруктураПараметров.Вставить("БылиВнесеныИзменения", Ложь);
	СтруктураПараметров.Вставить("ПересчитатьЦены",      ПересчитатьЦены);
	СтруктураПараметров.Вставить("ПерезаполнитьЦены",    ПерезаполнитьЦены);
	СтруктураПараметров.Вставить("ТипЦен",               Объект.ТипЦен);
	СтруктураПараметров.Вставить("СуммаВключаетНДС",     Объект.СуммаВключаетНДС);
	
	// 2. Открвыаем форму "Цены и Валюта".
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ОбработатьИзмененияПоКнопкеЦеныИВалютыЗавершение", ЭтотОбъект);
	
	ОткрытьФорму("ОбщаяФорма.ФормаЦеныИВалюта", СтруктураПараметров,,,,,ОповещениеОЗакрытии);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьИзмененияПоКнопкеЦеныИВалютыЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	СтруктураЦеныИВалюта = РезультатЗакрытия;
	
	Если ТипЗнч(СтруктураЦеныИВалюта) = Тип("Структура") И СтруктураЦеныИВалюта.БылиВнесеныИзменения Тогда
		
		ВалютаДоИзменения    = Объект.ВалютаДокумента; 
		КурсДоИзменения      = Объект.КурсДокумента;
		КратностьДоИзменения = Объект.КратностьДокумента;
		
		Объект.ТипЦен               = СтруктураЦеныИВалюта.ТипЦен;
		Объект.СуммаВключаетНДС     = СтруктураЦеныИВалюта.СуммаВключаетНДС;
		Объект.ВалютаДокумента      = СтруктураЦеныИВалюта.ВалютаДокумента;
		Объект.КурсДокумента        = СтруктураЦеныИВалюта.Курс;
		Объект.КратностьДокумента   = СтруктураЦеныИВалюта.Кратность;
		
		Модифицированность = Истина;
		
		ПересчитатьНДС = СтруктураЦеныИВалюта.СуммаВключаетНДС <> СтруктураЦеныИВалюта.ПредСуммаВключаетНДС;
		
		// Пересчитываем табличные части.
		Если СтруктураЦеныИВалюта.ПерезаполнитьЦены ИЛИ СтруктураЦеныИВалюта.ПересчитатьЦены ИЛИ ПересчитатьНДС Тогда
			ЗаполнитьРассчитатьСуммы(
				ВалютаДоИзменения,
				КурсДоИзменения,
				КратностьДоИзменения,
				СтруктураЦеныИВалюта.ПерезаполнитьЦены,
				СтруктураЦеныИВалюта.ПересчитатьЦены,
				ПересчитатьНДС);
		КонецЕсли;
		
		СформироватьНадписьЦеныИВалюта(ЭтаФорма);
		
		Если ВалютаДоИзменения <> Объект.ВалютаДокумента И Объект.ВыданныеАвансы.Количество() > 0 Тогда
			ТекстВопроса = НСтр("ru='Изменилась валюта документа. Погашаемые данным документом авансы должны быть выписаны в той же валюте.
|Очистить табличную часть ""Авансы""?';uk='Змінилася валюта документа. Аванси, що погашаються даним документом, повинні бути виписані в тій же валюті.
|Очистити табличну частину ""Аванси""?'");
								
			Оповешение = Новый ОписаниеОповещения("ВопросОчиститьАвансыЗавершение", ЭтотОбъект);
			ПоказатьВопрос(Оповешение, ТекстВопроса, РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Да);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросОчиститьАвансыЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Объект.ВыданныеАвансы.Очистить();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРассчитатьСуммы(Знач ВалютаДоИзменения, КурсДоИзменения, КратностьДоИзменения, ПерезаполнитьЦены = Ложь, ПересчитатьЦены = Ложь, ПересчитатьНДС = Ложь)
	Перем ТаблицаЦенНоменклатуры;
	
	Если ПерезаполнитьЦены Тогда
		
		МассивНоменклатуры	= ОбщегоНазначения.ВыгрузитьКолонку(Объект.Товары, "Номенклатура", Истина);
		ОбщегоНазначения.ЗаполнитьМассивУникальнымиЗначениями(МассивНоменклатуры,
			ОбщегоНазначения.ВыгрузитьКолонку(Объект.ВозвратнаяТара, "Номенклатура"));
		ОбщегоНазначения.ЗаполнитьМассивУникальнымиЗначениями(МассивНоменклатуры,
			ОбщегоНазначения.ВыгрузитьКолонку(Объект.Прочее, "Номенклатура"));
		
		ТаблицаЦенНоменклатуры	= Ценообразование.ПолучитьТаблицуЦенНоменклатуры(
			МассивНоменклатуры,
			Объект.ТипЦен,
			Объект.Дата);
		
	КонецЕсли;
	
	Если КурсДоИзменения <> 0 И КратностьДоИзменения <> 0 Тогда
		СтруктураКурса = Новый Структура("Курс, Кратность", КурсДоИзменения, КратностьДоИзменения);
	Иначе
		СтруктураКурса = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаДоИзменения, Объект.Дата);
	КонецЕсли;
	
	Для каждого СтрокаТаблицы Из Объект.Товары Цикл
		ЗаполнитьРассчитатьЦеныИСуммыВСтроке(
			СтрокаТаблицы,
			ТаблицаЦенНоменклатуры,
			ВалютаДоИзменения,
			СтруктураКурса,
			ПерезаполнитьЦены,
			ПересчитатьЦены,
			ПересчитатьНДС,
			Истина, // ЕстьНДС
			Объект.СуммаВключаетНДС,
			Истина, // ЕстьЦена
			0);     // ЗначениеПустогоКоличества
	КонецЦикла;
	
	Для каждого СтрокаТаблицы Из Объект.ВозвратнаяТара Цикл
		ЗаполнитьРассчитатьЦеныИСуммыВСтроке(
			СтрокаТаблицы,
			ТаблицаЦенНоменклатуры,
			ВалютаДоИзменения,
			СтруктураКурса,
			ПерезаполнитьЦены,
			ПересчитатьЦены,
			ПересчитатьНДС,
			Ложь,   // ЕстьНДС
			Объект.СуммаВключаетНДС,
			Истина, // ЕстьЦена
			0);     // ЗначениеПустогоКоличества
	КонецЦикла;
	
	Для каждого СтрокаТаблицы Из Объект.Прочее Цикл
		ЗаполнитьРассчитатьЦеныИСуммыВСтроке(
			СтрокаТаблицы,
			ТаблицаЦенНоменклатуры,
			ВалютаДоИзменения,
			СтруктураКурса,
			Ложь,   // ПерезаполнитьЦены
			ПересчитатьЦены,
			ПересчитатьНДС,
			Истина, // ЕстьНДС
			Объект.СуммаВключаетНДС,
			Ложь,   // ЕстьЦена
			0);     // ЗначениеПустогоКоличества
	КонецЦикла;
	
	Для каждого СтрокаТаблицы Из Объект.ОплатаПоставщикам Цикл
		ЗаполнитьРассчитатьЦеныИСуммыВСтроке(
			СтрокаТаблицы,
			ТаблицаЦенНоменклатуры,
			ВалютаДоИзменения,
			СтруктураКурса,
			Ложь,   // ПерезаполнитьЦены
			ПересчитатьЦены,
			Ложь,   // ПересчитатьНДС - признак "цена включает НДС", не хранится в реквизите СуммаВключаетНДС документа
			Истина, // ЕстьНДС
			Истина, // СуммаВключаетНДС
			Ложь,   // ЕстьЦена
			0);     // ЗначениеПустогоКоличества
	КонецЦикла;
	
	ОбновитьИтоги(ЭтаФорма);
	
	Если ПересчитатьНДС Тогда
		УстановитьЗаголовкиКолонок();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРассчитатьЦеныИСуммыВСтроке(СтрокаТаблицы, ТаблицаЦенНоменклатуры, ВалютаПередИзменением,
		СтруктураКурса, ПерезаполнитьЦены, ПересчитатьЦены, ПересчитатьНДС, ЕстьНДС, СуммаВключаетНДС, ЕстьЦена, ЗначениеПустогоКоличества)
	
	Если ПерезаполнитьЦены Тогда
		
		НайденнаяСтрока	= ТаблицаЦенНоменклатуры.Найти(СтрокаТаблицы.Номенклатура, "Номенклатура");
		Если НайденнаяСтрока <> Неопределено Тогда
			Цена = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(
				НайденнаяСтрока.Цена, НайденнаяСтрока.Валюта, Объект.ВалютаДокумента, НайденнаяСтрока.Курс,
				Объект.КурсДокумента, НайденнаяСтрока.Кратность, Объект.КратностьДокумента);
		Иначе
			Цена = 0;
		КонецЕсли;
		
		// Признак того, что цена включает НДС, хранится в реквизите ЦенаВключаетНДС типа цен
		ЦенаВключаетНДС = ?(ЗначениеЗаполнено(Объект.ТипЦен), Объект.ТипЦен.ЦенаВключаетНДС, Ложь);
	Иначе
		Если ПересчитатьЦены Тогда
			
			Цена = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(
				?(ЕстьЦена, СтрокаТаблицы["Цена"], СтрокаТаблицы["Сумма"]),
				ВалютаПередИзменением, Объект.ВалютаДокумента, СтруктураКурса.Курс,
				Объект.КурсДокумента, СтруктураКурса.Кратность, Объект.КратностьДокумента);
			
		Иначе
			Цена = ?(ЕстьЦена, СтрокаТаблицы["Цена"], СтрокаТаблицы["Сумма"]);
		КонецЕсли;
		
		// Признак того, что цена включает НДС, хранится в реквизите СуммаВключаетНДС документа
		ЦенаВключаетНДС = ?(ПересчитатьНДС, НЕ СуммаВключаетНДС, СуммаВключаетНДС);
	КонецЕсли;
	
	Если ЕстьНДС Тогда
		Если ЕстьЦена Тогда
			СтрокаТаблицы.Цена  = УчетНДСКлиентСервер.ПересчитатьЦенуПриИзмененииФлаговНалогов(
				Цена,
				ЦенаВключаетНДС,
				СуммаВключаетНДС,
				УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаТаблицы.СтавкаНДС));
			
			СтрокаТаблицы.Сумма = СтрокаТаблицы.Цена *
				?(СтрокаТаблицы.Количество = 0, ЗначениеПустогоКоличества, СтрокаТаблицы.Количество);
		Иначе
			СтрокаТаблицы.Сумма = УчетНДСКлиентСервер.ПересчитатьЦенуПриИзмененииФлаговНалогов(
				Цена,
				ЦенаВключаетНДС,
				СуммаВключаетНДС,
				УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаТаблицы.СтавкаНДС));
		КонецЕсли;
		
		СтрокаТаблицы.СуммаНДС = УчетНДСКлиентСервер.РассчитатьСуммуНДС(
			СтрокаТаблицы.Сумма,
			СуммаВключаетНДС,
			УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаТаблицы.СтавкаНДС));
			
		РассчитатьПропорциональныйНДСПоСтроке(СтрокаТаблицы, ПлательщикНДС, КоэффициентПропорциональногоНДС);
		
		Если ЕстьЦена Тогда
			СтрокаТаблицы.Всего = СтрокаТаблицы.Сумма + ?(СуммаВключаетНДС, 0, СтрокаТаблицы.СуммаНДС);
		КонецЕсли;
	Иначе
		Если ЕстьЦена Тогда
			СтрокаТаблицы.Цена  = Цена;
			СтрокаТаблицы.Сумма = СтрокаТаблицы.Цена *
				?(СтрокаТаблицы.Количество = 0, ЗначениеПустогоКоличества, СтрокаТаблицы.Количество);
		Иначе
			СтрокаТаблицы.Сумма = Цена;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьИтоги(Форма)
	
	Элементы = Форма.Элементы;
	Объект   = Форма.Объект;
	
	Форма.ВсегоТовары    = Объект.Товары.Итог("Сумма");
	Форма.ВсегоТоварыНДС = Объект.Товары.Итог("СуммаНДС");
	
	ВсегоПрочее    = Объект.Прочее.Итог("Сумма");
	// Информация о ставке НДС сохраняется до записи
	ВсегоПрочееНДС = 0;
	МассивСтрокСНДС = Объект.Прочее.НайтиСтроки(Новый Структура("ЭтоСуточные", Ложь));
	Для каждого СтрокаПрочее Из МассивСтрокСНДС Цикл
		ВсегоПрочееНДС = ВсегоПрочееНДС + СтрокаПрочее.СуммаНДС;
	КонецЦикла;
	
	Если НЕ Объект.СуммаВключаетНДС Тогда
		Форма.ВсегоТовары = Форма.ВсегоТовары + Форма.ВсегоТоварыНДС;
		ВсегоПрочее = ВсегоПрочее + ВсегоПрочееНДС;
	КонецЕсли;
	
	Форма.ИтогАвансов  = Объект.ВыданныеАвансы.Итог("СуммаАванса");
	// в т.ч. ОплатаПоставщикам сумма всегда с НДС
	Форма.ИтогПоОтчету = Форма.ВсегоТовары + Объект.ОплатаПоставщикам.Итог("Сумма") + ВсегоПрочее;
	ИтогоОстаток       = Форма.ИтогАвансов - Форма.ИтогПоОтчету;
	
	Если ИтогоОстаток >= 0 Тогда
		Форма.ИтогоОстаток     = ИтогоОстаток;
		Форма.ТипИтогаПоОтчету = НСтр("ru='Остаток по отчету:';uk='Залишок за звітом:'");
	Иначе
		Форма.ИтогоОстаток     = -ИтогоОстаток;
		Форма.ТипИтогаПоОтчету = НСтр("ru='Перерасход по отчету:';uk='Перевитрата за звітом:'");
	КонецЕсли;
	
	Форма.ОтметкаНезаполненногоСклад = Объект.Товары.Количество() > 0 ИЛИ Объект.ВозвратнаяТара.Количество() > 0;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СформироватьНадписьЦеныИВалюта(Форма)
	
	Объект = Форма.Объект;
	СтруктураНадписи = Новый Структура(
		"ТипЦен, ВалютаДокумента, Курс, Кратность, СуммаВключаетНДС, ВалютаРегламентированногоУчета",
		Объект.ТипЦен,
		Объект.ВалютаДокумента,
		Объект.КурсДокумента,
		Объект.КратностьДокумента,
		Объект.СуммаВключаетНДС,
		Форма.ВалютаРегламентированногоУчета);
	Форма.ЦеныИВалюта = ОбщегоНазначенияБПКлиентСервер.СформироватьНадписьЦеныИВалюта(СтруктураНадписи);

КонецПроцедуры

&НаКлиенте
Процедура УстановитьПараметрыОтбораДокументАванса()
	
	СтрокаТаблицы = Элементы.ВыданныеАвансы.ТекущиеДанные;
	Если СтрокаТаблицы.ДокументАванса <> Неопределено Тогда
		МассивПараметров = Новый Массив();
		
		НовыйПараметр = Новый ПараметрВыбора("Отбор.Организация", Объект.Организация);
		МассивПараметров.Добавить(НовыйПараметр);
		
		НовыйПараметр = Новый ПараметрВыбора("Отбор.ВалютаДокумента", Объект.ВалютаДокумента);
		МассивПараметров.Добавить(НовыйПараметр);
		
		Если ТипЗнч(СтрокаТаблицы.ДокументАванса) = Тип("ДокументСсылка.РасходныйКассовыйОрдер") Тогда
			Если ЗначениеЗаполнено(Объект.ФизЛицо) Тогда
				НовыйПараметр = Новый ПараметрВыбора("Отбор.Контрагент", Объект.ФизЛицо);
				МассивПараметров.Добавить(НовыйПараметр);
				НовыйПараметр = Новый ПараметрВыбора("Отбор.ВидОперации",
					ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.ВыдачаДенежныхСредствПодотчетнику"));
				МассивПараметров.Добавить(НовыйПараметр);
			КонецЕсли;
		ИначеЕсли ТипЗнч(СтрокаТаблицы.ДокументАванса) = Тип("ДокументСсылка.СписаниеСРасчетногоСчета") Тогда
			Если ЗначениеЗаполнено(Объект.ФизЛицо) Тогда
				НовыйПараметр = Новый ПараметрВыбора("Отбор.ФизЛицо", Объект.ФизЛицо);
				МассивПараметров.Добавить(НовыйПараметр);
				НовыйПараметр = Новый ПараметрВыбора("Отбор.ВидОперации",
					ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеДенежныхСредствПодотчетнику"));
				МассивПараметров.Добавить(НовыйПараметр);
			КонецЕсли;
		КонецЕсли;
		
		Элементы.ВыданныеАвансыДокументАванса.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДобавленныеКолонкиТаблиц()
	
	ДанныеДоговоровКонтрагентов	= ОбщегоНазначения.ЗначенияРеквизитовОбъектов(
		ОбщегоНазначения.ВыгрузитьКолонку(Объект.Товары, "ДоговорКонтрагента"),
		"ВедениеВзаиморасчетов");
	Для каждого СтрокаТаблицы Из Объект.Товары Цикл
		ЗаполнитьДобавленныеКолонкиСтрокиТаблицыТовары(СтрокаТаблицы, Объект.СуммаВключаетНДС);
		ДоговорУказан = ЗначениеЗаполнено(СтрокаТаблицы.ДоговорКонтрагента);
		СтрокаТаблицы.ДоговорКонтрагентаВедениеВзаиморасчетов = ?(ДоговорУказан, ДанныеДоговоровКонтрагентов[СтрокаТаблицы.ДоговорКонтрагента].ВедениеВзаиморасчетов, Неопределено);
	КонецЦикла;
	
	Для каждого СтрокаТаблицы Из Объект.ВыданныеАвансы Цикл
		Если ЗначениеЗаполнено(СтрокаТаблицы.ДокументАванса) Тогда
			РеквизитыДокумента	= ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
				СтрокаТаблицы.ДокументАванса,
				"СуммаДокумента, ВалютаДокумента");
			СтрокаТаблицы.СуммаАванса = РеквизитыДокумента.СуммаДокумента;
			СтрокаТаблицы.Валюта      = РеквизитыДокумента.ВалютаДокумента;
		КонецЕсли;
	КонецЦикла;
	
	ДанныеДоговоровКонтрагентов	= ОбщегоНазначения.ЗначенияРеквизитовОбъектов(
		ОбщегоНазначения.ВыгрузитьКолонку(Объект.ВозвратнаяТара, "ДоговорКонтрагента"),
		"ВедениеВзаиморасчетов");
	Для каждого СтрокаТаблицы Из Объект.ВозвратнаяТара Цикл
		ДоговорУказан = ЗначениеЗаполнено(СтрокаТаблицы.ДоговорКонтрагента);
		СтрокаТаблицы.ДоговорКонтрагентаВедениеВзаиморасчетов = ?(ДоговорУказан, ДанныеДоговоровКонтрагентов[СтрокаТаблицы.ДоговорКонтрагента].ВедениеВзаиморасчетов, Неопределено);
	КонецЦикла;	
	
	ДанныеДоговоровКонтрагентов	= ОбщегоНазначения.ЗначенияРеквизитовОбъектов(
		ОбщегоНазначения.ВыгрузитьКолонку(Объект.ОплатаПоставщикам, "ДоговорКонтрагента"),
		"ВалютаВзаиморасчетов, ВедениеВзаиморасчетов, СложныйНалоговыйУчет");
	ЕстьДоговорыВВалюте = Ложь;
	Для каждого СтрокаТаблицы Из Объект.ОплатаПоставщикам Цикл
		ДоговорУказан = ЗначениеЗаполнено(СтрокаТаблицы.ДоговорКонтрагента);
		СтрокаТаблицы.ДоговорКонтрагентаВалютаВзаиморасчетов  = ?(ДоговорУказан, ДанныеДоговоровКонтрагентов[СтрокаТаблицы.ДоговорКонтрагента].ВалютаВзаиморасчетов,  Неопределено);
		СтрокаТаблицы.ДоговорКонтрагентаВедениеВзаиморасчетов = ?(ДоговорУказан, ДанныеДоговоровКонтрагентов[СтрокаТаблицы.ДоговорКонтрагента].ВедениеВзаиморасчетов, Неопределено);
		СтрокаТаблицы.ДоговорКонтрагентаСложныйНалоговыйУчет  = ?(ДоговорУказан, ДанныеДоговоровКонтрагентов[СтрокаТаблицы.ДоговорКонтрагента].СложныйНалоговыйУчет,  Неопределено);
		ЕстьДоговорыВВалюте = ЕстьДоговорыВВалюте 
			ИЛИ СтрокаТаблицы.ДоговорКонтрагентаВалютаВзаиморасчетов <> ВалютаРегламентированногоУчета;
	КонецЦикла;
	
	ДанныеДоговоровКонтрагентов	= ОбщегоНазначения.ЗначенияРеквизитовОбъектов(
		ОбщегоНазначения.ВыгрузитьКолонку(Объект.Прочее, "ДоговорКонтрагента"),
		"ВедениеВзаиморасчетов");
	Для каждого СтрокаТаблицы Из Объект.Прочее Цикл
		ДоговорУказан = ЗначениеЗаполнено(СтрокаТаблицы.ДоговорКонтрагента);
		СтрокаТаблицы.ДоговорКонтрагентаВедениеВзаиморасчетов = ?(ДоговорУказан, ДанныеДоговоровКонтрагентов[СтрокаТаблицы.ДоговорКонтрагента].ВедениеВзаиморасчетов, Неопределено);
		ЗаполнитьДобавленныеКолонкиСтрокиТаблицыПрочее(СтрокаТаблицы, Объект.СуммаВключаетНДС, Объект.Дата, ПлательщикНДС);
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьДобавленныеКолонкиСтрокиТаблицыТовары(СтрокаТаблицы, СуммаВключаетНДС)
	
	СтрокаТаблицы.Всего = СтрокаТаблицы.Сумма + ?(СуммаВключаетНДС, 0, СтрокаТаблицы.СуммаНДС);

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьДобавленныеКолонкиСтрокиТаблицыПрочее(СтрокаТаблицы, СуммаВключаетНДС, Дата, ПлательщикНДС)

	СвойстваСчетаЗатрат		= БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(СтрокаТаблицы.СчетЗатрат);
	
 	Для Индекс = 1 По 3 Цикл
		СтрокаТаблицы["Субконто"   + Индекс + "Доступность"] = (Индекс <= СвойстваСчетаЗатрат.КоличествоСубконто);
	КонецЦикла;
	
	
	СтрокаТаблицы.Всего = СтрокаТаблицы.Сумма + ?(СуммаВключаетНДС, 0, СтрокаТаблицы.СуммаНДС);
	
	ЗаполнитьДобавленныеКолонкиСтрокиТаблицыПрочееСервер_НалоговыйУчет(СтрокаТаблицы, Дата, ПлательщикНДС);
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьПараметрыПодбора(ИмяТаблицы)

	ПараметрыФормы = Новый Структура;

	ДатаРасчетов 	 = ?(НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДата()), Неопределено, Объект.Дата);
	ЗаголовокПодбора = НСтр("ru='Подбор номенклатуры в %1 (%2)';uk='Підбір номенклатури %1 (%2)'");

	Валюта = Объект.ВалютаДокумента;

	Если ЗначениеЗаполнено(Объект.ТипЦен) Тогда
		Параметрыформы.Вставить("ПоказыватьЦены", Истина);
	КонецЕсли;

	Если ИмяТаблицы = "Товары" Тогда
		ПредставлениеТаблицы = НСтр("ru='Товары';uk='Товари'");

		ПараметрыФормы.Вставить("ПоказыватьОстатки"  , Истина);
		ПараметрыФормы.Вставить("ПоказыватьСчетУчета", Истина);
	ИначеЕсли ИмяТаблицы = "ВозвратнаяТара" Тогда
		ПредставлениеТаблицы = НСтр("ru='Возвратная тара';uk='Зворотна тара'");
	КонецЕсли;
	ЗаголовокПодбора = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ЗаголовокПодбора, Объект.Ссылка, ПредставлениеТаблицы);

	ПараметрыФормы.Вставить("ЕстьЦена"      , Истина);
	ПараметрыФормы.Вставить("ЕстьКоличество", Истина);
	ПараметрыФормы.Вставить("ДатаРасчетов"  , ДатаРасчетов);
	ПараметрыФормы.Вставить("ТипЦен"        , Объект.ТипЦен);
	ПараметрыФормы.Вставить("Валюта"        , Валюта);
	ПараметрыФормы.Вставить("Организация"   , Объект.Организация);
	ПараметрыФормы.Вставить("Склад"         , Объект.Склад);
	ПараметрыФормы.Вставить("Заголовок"     , ЗаголовокПодбора);
	ПараметрыФормы.Вставить("ВидПодбора"    , ПолучитьВидПодбора(ИмяТаблицы));
	ПараметрыФормы.Вставить("ИмяТаблицы"    , ИмяТаблицы);
	ПараметрыФормы.Вставить("Услуги"        , ИмяТаблицы = "Услуги");

	Возврат ПараметрыФормы;

КонецФункции

&НаКлиенте
Функция ПолучитьВидПодбора(ИмяТаблицы)

	ВидПодбора = "";

	Возврат ВидПодбора;

КонецФункции

&НаСервере
Процедура ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение, ИмяТаблицы)

	ТаблицаТоваров = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресПодобраннойНоменклатурыВХранилище);
	
	ДанныеОбъекта = Новый Структура("Дата, Организация, Склад");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
	СоответствиеСведенийОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОСпискеНоменклатуры(
		ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаТоваров, "Номенклатура", Истина), ДанныеОбъекта);
	
	Если ЗначениеЗаполнено(Объект.ТипЦен) Тогда
		ЦенаВключаетНДС	= ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ТипЦен, "ЦенаВключаетНДС");
	Иначе
		ЦенаВключаетНДС	= Объект.СуммаВключаетНДС;
	КонецЕсли;
	
	Для Каждого СтрокаТовара Из ТаблицаТоваров Цикл
		
		СтруктураОтбора = Новый Структура("Номенклатура, Цена", СтрокаТовара.Номенклатура, СтрокаТовара.Цена);
		Если ИмяТаблицы = "Товары" Тогда
		     СтруктураОтбора.Вставить("ЕдиницаИзмерения",СтрокаТовара.ЕдиницаИзмерения);
		КонецЕсли; 
		 
		СтрокаТабличнойЧасти = НайтиСтрокуТабличнойЧасти(ИмяТаблицы, СтруктураОтбора);
		
		Если СтрокаТабличнойЧасти <> Неопределено Тогда
			// Нашли - увеличиваем количество.
			СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + СтрокаТовара.Количество;
			
			Если ИмяТаблицы = "Товары" Тогда
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, Объект.СуммаВключаетНДС);
				РассчитатьПропорциональныйНДСПоСтроке(СтрокаТабличнойЧасти, ПлательщикНДС, КоэффициентПропорциональногоНДС);
				
				ЗаполнитьДобавленныеКолонкиСтрокиТаблицыТовары(СтрокаТабличнойЧасти, Объект.СуммаВключаетНДС);	
				
			ИначеЕсли ИмяТаблицы = "ВозвратнаяТара" Тогда
				// Рассчитываем реквизиты табличной части
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
			КонецЕсли;
			
		Иначе
			
			СтрокаТабличнойЧасти = Объект[ИмяТаблицы].Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтрокаТовара);
			
			СведенияОНоменклатуре = СоответствиеСведенийОНоменклатуре.Получить(СтрокаТовара.Номенклатура);
			Если СведенияОНоменклатуре = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Документы.АвансовыйОтчет.ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(
			ДанныеОбъекта, СтрокаТабличнойЧасти, ИмяТаблицы, СведенияОНоменклатуре);
			
			Если ИмяТаблицы = "Товары" Тогда
				
				СтрокаТабличнойЧасти.СтавкаНДС				= СведенияОНоменклатуре.СтавкаНДС;

				СтрокаТабличнойЧасти.Цена = УчетНДСКлиентСервер.ПересчитатьЦенуПриИзмененииФлаговНалогов(
				СтрокаТабличнойЧасти.Цена, ЦенаВключаетНДС, Объект.СуммаВключаетНДС,
				УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));
				
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, Объект.СуммаВключаетНДС);
				РассчитатьПропорциональныйНДСПоСтроке(СтрокаТабличнойЧасти, ПлательщикНДС, КоэффициентПропорциональногоНДС);
				
				ЗаполнитьДобавленныеКолонкиСтрокиТаблицыТовары(СтрокаТабличнойЧасти, Объект.СуммаВключаетНДС);
				
			ИначеЕсли ИмяТаблицы = "ВозвратнаяТара" Тогда
				
				СтрокаТабличнойЧасти.Цена = УчетНДСКлиентСервер.ПересчитатьЦенуПриИзмененииФлаговНалогов(
				СтрокаТабличнойЧасти.Цена, ЦенаВключаетНДС, Истина,
				УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СведенияОНоменклатуре.СтавкаНДС));
				
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ОбновитьИтоги(ЭтаФорма);

КонецПроцедуры

&НаСервере
Функция НайтиСтрокуТабличнойЧасти(ИмяТабличнойЧасти, СтруктураОтбора)

	СтрокаТабличнойЧасти = Неопределено;

	МассивНайденныхСтрок = Объект[ИмяТабличнойЧасти].НайтиСтроки(СтруктураОтбора);
	Если МассивНайденныхСтрок.Количество() > 0 Тогда
		// Нашли. Вернем первую найденную строку.
		СтрокаТабличнойЧасти = МассивНайденныхСтрок[0];
	КонецЕсли;

	Возврат СтрокаТабличнойЧасти;

КонецФункции

&НаКлиенте
Процедура ЗаполнитьДобавленныеКолонкиСтрокиТаблицыПрочее_НалоговыйУчет()

	СтрокаПлатеж = Элементы.Прочее.ТекущиеДанные;	
	ДанныеСтрокиТаблицы = Новый Структура(
		"СчетЗатрат, Субконто1, Субконто2, Субконто3,
		|НалоговоеНазначение, НалоговоеНазначениеДоходовИЗатрат,
		|ХарактерЗатрат, НалоговаяАналитикаВПроводке");
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, СтрокаПлатеж);
	ЗаполнитьДобавленныеКолонкиСтрокиТаблицыПрочееСервер_НалоговыйУчет(ДанныеСтрокиТаблицы, Объект.Дата, ПлательщикНДС);
	ЗаполнитьЗначенияСвойств(СтрокаПлатеж, ДанныеСтрокиТаблицы);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьДобавленныеКолонкиСтрокиТаблицыПрочееСервер_НалоговыйУчет(СтрокаТаблицы, Дата, ПлательщикНДС)
	
	СтрокаТаблицы.ХарактерЗатрат = Неопределено;
	СтрокаТаблицы.НалоговаяАналитикаВПроводке = Неопределено;

	НалоговыйУчет.ОпределениеАналитикиНалоговогоУчетаВПроводкахДляЗатрат(
		СтрокаТаблицы, 
		СтрокаТаблицы.СчетЗатрат, 
		СтрокаТаблицы.ХарактерЗатрат,
		СтрокаТаблицы.НалоговаяАналитикаВПроводке,
		, 
		СтрокаТаблицы.НалоговоеНазначение, 
		СтрокаТаблицы.НалоговоеНазначениеДоходовИЗатрат,
		,
		Дата,
		,
		ПлательщикНДС
	);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РассчитатьПропорциональныйНДСПоСтроке(СтрокаТаблицы, Знач ПлательщикНДС, Знач КоэффициентПропорциональногоНДС)
	
	Если Не ПлательщикНДС Тогда
		СтрокаТаблицы.СуммаНДСПропорциональноКредит = 0;
	Иначе
		
		Если СтрокаТаблицы.НалоговоеНазначение <> ПредопределенноеЗначение("Справочник.НалоговыеНазначенияАктивовИЗатрат.НДС_Пропорционально") Тогда
		    СтрокаТаблицы.СуммаНДСПропорциональноКредит = 0;
		Иначе	
			СтрокаТаблицы.СуммаНДСПропорциональноКредит = СтрокаТаблицы.СуммаНДС * КоэффициентПропорциональногоНДС;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьПропорциональныйНДСПоДокументу()
	
	Для каждого СтрокаТаблицы Из Объект.Товары Цикл
		РассчитатьПропорциональныйНДСПоСтроке(СтрокаТаблицы, ПлательщикНДС, КоэффициентПропорциональногоНДС);
	КонецЦикла;
	Для каждого СтрокаТаблицы Из Объект.ОплатаПоставщикам Цикл
		РассчитатьПропорциональныйНДСПоСтроке(СтрокаТаблицы, ПлательщикНДС, КоэффициентПропорциональногоНДС);
	КонецЦикла;
	Для каждого СтрокаТаблицы Из Объект.Прочее Цикл
		РассчитатьПропорциональныйНДСПоСтроке(СтрокаТаблицы, ПлательщикНДС, КоэффициентПропорциональногоНДС);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура НормированиеРасходовСуточные(СтрокаТаблицы, Знач ДанныеОбъекта, Знач ВалютаРегламентированногоУчета, Знач НормаСуточныеЗарубеж, Знач НормаСуточные)
	
	Если СтрокаТаблицы.КомандировкаЗарубеж Тогда
		СуммаПоНорме = СтрокаТаблицы.КоличествоСуток * НормаСуточныеЗарубеж;
	Иначе
		СуммаПоНорме = СтрокаТаблицы.КоличествоСуток * НормаСуточные;
	КонецЕсли;
	
	Если ДанныеОбъекта.ВалютаДокумента = ВалютаРегламентированногоУчета Тогда
		СуммаГрн = СтрокаТаблицы.Сумма;
	Иначе		
		СуммаГрн = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.Сумма, 
			ДанныеОбъекта.ВалютаДокумента, ВалютаРегламентированногоУчета, 
			ДанныеОбъекта.КурсДокумента, 1, 
			ДанныеОбъекта.КратностьДокумента, 1
		);
	КонецЕсли;
	
	СтрокаТаблицы.СуммаНУ = Мин(СуммаГрн,СуммаПоНорме);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ БСП

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры

// ИНАГРО++
&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьТипСкладаОрдера(Форма)

	Элементы = Форма.Элементы;
	Объект   = Форма.Объект;		

	Если Объект.ИНАГРО_ВидПоступления = ПредопределенноеЗначение("Перечисление.ИНАГРО_ВидыПоступленияТоваров.НаСклад") Тогда
		
		Объект.ИНАГРО_ОрдерВТЧ = Ложь;

		Если ТипЗнч(Объект.Склад) <> Тип("СправочникСсылка.Склады") Тогда
			Объект.Склад = ПредопределенноеЗначение("Справочник.Склады.ПустаяСсылка");
		КонецЕсли;
		
		Элементы.Склад.Подсказка = НСтр("ru='В этом поле необходимо указать склад, с которого оформляется возврат товаров.';uk='У цьому полі необхідно вказати склад, з якого оформлюється повернення товарів.'");
				
	Иначе
		
		Объект.ИНАГРО_СкладВТЧ = Ложь;

		Если ТипЗнч(Объект.Склад) <> Тип("ДокументСсылка.ИНАГРО_ПриходныйОрдерНаТовары") Тогда
			Объект.Склад = ПредопределенноеЗначение("Документ.ИНАГРО_ПриходныйОрдерНаТовары.ПустаяСсылка");
		КонецЕсли;
		
		Элементы.Склад.Подсказка = НСтр("ru='В этом поле необходимо указать приходный ордер, по которому ранее было оформлено поступление товаров.';uk='У цьому полі необхідно вказати прибутковий ордер, за яким раніше було оформлено надходження товарів.'");
				
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ТоварыИНАГРО_ОтражатьСчетУчетаРасчетовСКонтрагентомПриИзмененииНаСервере(СтрокаТабличнойЧасти, Организация)
	
	Документы.АвансовыйОтчет.ЗаполнитьСчетаУчетаРасчетовСКонтрагентом(СтрокаТабличнойЧасти, Организация, "", Ложь);	

КонецПроцедуры 

&НаСервереБезКонтекста
Процедура ПрочееИНАГРО_ОтражатьСчетУчетаРасчетовСКонтрагентомПриИзмененииНаСервере(СтрокаТабличнойЧасти, Организация)
	
	Документы.АвансовыйОтчет.ЗаполнитьСчетаУчетаРасчетовСКонтрагентом(СтрокаТабличнойЧасти, Организация, "", Ложь);	

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораПриходныйОрдерНаТовары(ТабличнаяЧасть, СпособЗаполнения) 
	
	Если Объект.ИНАГРО_ВидПоступления <> ПредопределенноеЗначение("Перечисление.ИНАГРО_ВидыПоступленияТоваров.ПоОрдеру") Тогда
		ТекстСообщения = (Нстр("ru='Заполнять авансовый отчет на основании приходного ордера можно только с видом поступления ""По ордеру""!';uk='Заповнювати авансовий звіт на підставі прибуткового ордера можна тільки з видом надходження ""За ордером""!'"));		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Объект.ИНАГРО_ВидПоступления"); 	
		Возврат;
	КонецЕсли;

	Если СпособЗаполнения = "Заполнить"	И Объект.Товары.Количество() > 0 Тогда
		ДополнительныеПараметры = Новый Структура("ТабличнаяЧасть", ТабличнаяЧасть);	
		ТекстВопроса = НСтр("ru='Перед заполнением табличная часть будет очищена. Заполнить?';uk='Перед заповненням таблична частина буде очищена. Заповнити?'");
		Оповещение = Новый ОписаниеОповещения("ЗаполнитьПоПриходномуОрдеруЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Да);
	Иначе
		ОткрытьФормуВыбораПриходныйОрдерНаТоварыДляЗаполнения(ТабличнаяЧасть);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоПриходномуОрдеруЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	 Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда		
		Возврат;
	КонецЕсли; 	
	
	ТабличнаяЧасть = ДополнительныеПараметры.ТабличнаяЧасть;
	
	Объект[ТабличнаяЧасть].Очистить();	

	ОткрытьФормуВыбораПриходныйОрдерНаТоварыДляЗаполнения(ТабличнаяЧасть);
			
КонецПроцедуры  

&НаКлиенте
Процедура ОткрытьФормуВыбораПриходныйОрдерНаТоварыДляЗаполнения(ТабличнаяЧасть = Неопределено)
	
	ПараметрыОтбора	= Новый Структура;
	ПараметрыОтбора.Вставить("ВидОперации",	ПредопределенноеЗначение("Перечисление.ИНАГРО_ВидыОперацийПриходныйОрдер.ОтПодотчетника"));
	Если ЗначениеЗаполнено(Объект.Организация) Тогда 		
		ПараметрыОтбора.Вставить("Организация",	Объект.Организация);
	КонецЕсли;	
	Если ЗначениеЗаполнено(Объект.ФизЛицо) Тогда
		ПараметрыОтбора.Вставить("ФизЛицо", Объект.ФизЛицо);
	КонецЕсли;
	
	ПараметрыФормы	= Новый Структура;
	ПараметрыФормы.Вставить("Отбор",              ПараметрыОтбора);
	ПараметрыФормы.Вставить("РежимВыбора",        Истина);
	ПараметрыФормы.Вставить("МножественныйВыбор", Ложь);
	Если ТабличнаяЧасть <> Неопределено Тогда
		ПараметрыФормы.Вставить("ИмяТаблицы", ТабличнаяЧасть);
	КонецЕсли;

	ОткрытьФорму("Документ.ИНАГРО_ПриходныйОрдерНаТовары.Форма.ФормаВыбора", ПараметрыФормы, ЭтаФорма, УникальныйИдентификатор, , , , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	                                                                                                                		
КонецПроцедуры 

&НаСервере
Процедура ОбработкаЗаполненияТабличнойЧастиНаСервере(ВыбранноеЗначение, ТабличнаяЧасть)
	
	Документы.АвансовыйОтчет.ЗаполнитьПоПриходномуОрдеру(Объект, ТабличнаяЧасть, ВыбранноеЗначение);
				
КонецПроцедуры 
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти