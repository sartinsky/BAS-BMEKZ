#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

// Процедура - обработчик события "ОбработкаПроведения"
////
Процедура ОбработкаПроведения(Отказ, Режим)
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКПроведению(ЭтотОбъект);
	Заголовок = ОбщегоНазначенияБПВызовСервера.ПредставлениеДокументаПриПроведении(Ссылка);
	
	ВыборкаПоШапкеДокумента = СформироватьЗапросПоШапке().Выбрать();
	ВыборкаПоШапкеДокумента.Следующий();
	
	// Движения стоит добавлять, если в проведении еще не отказано (отказ =ложь)
	Если НЕ Отказ Тогда
		
		////////////////////////////////////////////////////////////////////////
		// основные Начисления
		ВыборкаПоНачислениям = СформироватьЗапросПоНачислениям().Выбрать();
		Пока ВыборкаПоНачислениям.Следующий() Цикл 
			ПроверитьЗаполнениеСтрокиНачисления(ВыборкаПоШапкеДокумента, ВыборкаПоНачислениям, Отказ);
			Если НЕ Отказ Тогда
				ДобавитьСтрокуОсновныхНачислений(ВыборкаПоНачислениям, Движения.ИНАГРО_Начисления);
				Если Дата >= Дата(2016,1,1) Тогда
					ДобавитьСтрокуВДвиженияПоРегистрамНакопления(ВыборкаПоНачислениям);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		////////////////////////////////////////////////////////////////////////
		// Расчет средней
		ВыборкаПоСредним = СформироватьЗапросПоРасчетСреднего().Выбрать();
		Пока ВыборкаПоСредним.Следующий() Цикл
			ПроверитьЗаполнениеСтрокиРасчетСреднего(ВыборкаПоСредним, Отказ);
			Если НЕ Отказ Тогда
				ДобавитьСтрокуРасчетаСреднего(ВыборкаПоСредним, Движения.ИНАГРО_РасчетСреднегоЗаработка);
			КонецЕсли;
		КонецЦикла;
		
		////////////////////////////////////////////////////////////////////////
		// Состояния работников
		// получим реквизиты табличной части.
		Если ВидДокументаОтпуск = Перечисления.ИНАГРО_ВидыДокументаОтпуск.Отпускные ИЛИ ВидДокументаОтпуск = Перечисления.ИНАГРО_ВидыДокументаОтпуск.ОтзывИзОтпуска Тогда
			Выборка = СформироватьЗапросСостояния().Выбрать();
			Пока Выборка.Следующий() Цикл 
				ПроверитьЗаполнениеСтрокиСостояния(Выборка, Отказ);
				Если НЕ Отказ Тогда
					// Заполним записи в наборах записей регистров
					ДобавитьСтрокуСостояний(ВыборкаПоШапкеДокумента, Выборка);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
			
	КонецЕсли; 
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКОтменеПроведения(ЭтотОбъект);
	Движения.Записать();

КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)

	Дата = НачалоДня(ОбщегоНазначения.ТекущаяДатаПользователя());
	Ответственный = Пользователи.ТекущийПользователь();
	
КонецПроцедуры

#КонецОбласти

#Область Проведение

// Формирует запрос по шапке документа
//
//
// Возвращаемое значение:
//  Результат запроса
//
Функция СформироватьЗапросПоШапке() Экспорт
	
	Запрос = Новый Запрос;
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка" , Ссылка);
	Запрос.УстановитьПараметр("парамПустаяОрганизация", Справочники.Организации.ПустаяСсылка());
	Запрос.УстановитьПараметр("ДатаНачалаСобытия" , ПолучитьДатуНачалаСобытия());
	Запрос.УстановитьПараметр("Сотрудник" , Сотрудник);
	Запрос.УстановитьПараметр("парамПоДням"     , Перечисления.ИНАГРО_ВидыУчетаВремени.ПоДням);
	
	Запрос.УстановитьПараметр("ОсновнойВидРасчета" , ПланыВидовРасчета.ИНАГРО_Начисления.ПустаяСсылка());
	
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ //<< Ин-Агро - добавлено Разрешенные
	|	Отпуск.Дата,
	|	Отпуск.ПериодРегистрации,
	|	Отпуск.Организация,
	|	Отпуск.СуммаСредней,
	|	Отпуск.ВидУчетаВремениДляСредней,
	|	ВЫБОР   КОГДА Отпуск.Организация.ГоловнаяОрганизация = &парамПустаяОрганизация 
	|			ТОГДА Отпуск.Организация 
	|			ИНАЧЕ Отпуск.Организация.ГоловнаяОрганизация 
	|			КОНЕЦ 										КАК ГоловнаяОрганизация,
	|	Отпуск.Организация 									КАК ОбособленноеПодразделение,
	|	Отпуск.Ссылка,
	|	Отпуск.Сотрудник,
	|	ЕСТЬNULL(РаботникиОрганизацииСрезПоследних.Сотрудник, Отпуск.Сотрудник) КАК Назначение,
	|	ДанныеКалендаря.НормаЧасовЗаМесяц         						КАК НормаЧасовЗаМесяц,
	|	ДанныеКалендаря.НормаДнейЗаМесяц         						КАК НормаДнейЗаМесяц,
	|
	|	РаботникиОрганизацииСрезПоследних.ПодразделениеОрганизации 	КАК ПодразделениеОрганизации,
	|	РаботникиОрганизацииСрезПоследних.ГрафикРаботы 				КАК ГрафикРаботы,
	|	РаботникиОрганизацииСрезПоследних.ГрафикРаботы.СуммированныйУчетРабочегоВремени КАК СуммированныйУчетРабочегоВремени
	|
	|	ИЗ	Документ.ИНАГРО_НачислениеОтпускаРаботникамОрганизаций КАК Отпуск
	|   //-----------------------
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ Документ.ИНАГРО_ПриемНаРаботуВОрганизацию.РаботникиОрганизации КАК ПриказОПриеме
	|ПО	ПриказОПриеме.Сотрудник = Отпуск.Сотрудник
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИНАГРО_РаботникиОрганизаций.СрезПоследних(&ДатаНачалаСобытия, Сотрудник = &Сотрудник ИЛИ Сотрудник.ОсновноеНазначение = &Сотрудник ) КАК РаботникиОрганизацииСрезПоследних
	|ПО (ИСТИНА)
	|
	|	// данные нормы календаря
	|	ЛЕВОЕ СОЕДИНЕНИЕ (
	|		ВЫБРАТЬ
	|			ГрафикиРаботы.ГрафикРаботы                    КАК ГрафикРаботы,
	|			НАЧАЛОПЕРИОДА( ГрафикиРаботы.Дата, МЕСЯЦ )    КАК ДатаМесяца,
	|			СУММА( ГрафикиРаботы.ОсновноеЗначение  )      КАК НормаДнейЗаМесяц,
	|			СУММА( ГрафикиРаботы.ДополнительноеЗначение ) КАК НормаЧасовЗаМесяц
	|	
	|			ИЗ	РегистрСведений.ИНАГРО_ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботы
	|
	|			ГДЕ ГрафикиРаботы.ВидУчетаВремени = &парамПоДням 
	|
	|			СГРУППИРОВАТЬ ПО
	|			ГрафикиРаботы.ГрафикРаботы,
	|			НАЧАЛОПЕРИОДА( ГрафикиРаботы.Дата, МЕСЯЦ )
	|
	|	) КАК ДанныеКалендаря
	|	ПО ДанныеКалендаря.ГрафикРаботы = РаботникиОрганизацииСрезПоследних.ГрафикРаботы	
	|	И ДанныеКалендаря.ДатаМесяца = Отпуск.ПериодРегистрации	
	|
	|ГДЕ
	|	Отпуск.Ссылка = &ДокументСсылка";
	
	Возврат Запрос.Выполнить();
	
КонецФункции // СформироватьЗапросПоШапке()

// Формирует запрос по шапке документа
//
//
// Возвращаемое значение:
//  Результат запроса
//
Функция СформироватьЗапросПоШапкеПоВсемПриказам() Экспорт
	
	Запрос = Новый Запрос;
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка" , Ссылка);
	Запрос.УстановитьПараметр("парамПустаяОрганизация", Справочники.Организации.ПустаяСсылка());
	Запрос.УстановитьПараметр("ДатаНачалаСобытия" , ПолучитьДатуНачалаСобытия());
	Запрос.УстановитьПараметр("Сотрудник" , Сотрудник);
	Запрос.УстановитьПараметр("парамПоДням"     , Перечисления.ИНАГРО_ВидыУчетаВремени.ПоДням);
	
	Запрос.УстановитьПараметр("ОсновнойВидРасчета" , ПланыВидовРасчета.ИНАГРО_Начисления.ОплатаПоСреднемуОтп);
	
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ //<< Ин-Агро - добавлено Разрешенные
	|	Отпуск.Дата,
	|	Отпуск.ПериодРегистрации,
	|	Отпуск.Организация,
	|	Отпуск.СуммаСредней,
	|	Отпуск.ВидУчетаВремениДляСредней,
	|	ВЫБОР   КОГДА Отпуск.Организация.ГоловнаяОрганизация = &парамПустаяОрганизация 
	|			ТОГДА Отпуск.Организация 
	|			ИНАЧЕ Отпуск.Организация.ГоловнаяОрганизация 
	|			КОНЕЦ 										КАК ГоловнаяОрганизация,
	|	Отпуск.Организация 									КАК ОбособленноеПодразделение,
	|	Отпуск.Ссылка,
	|	Отпуск.Сотрудник,
	|	ПриказОПриеме.Ссылка.ВидЗанятости					КАК ВидЗанятости,
	|	ДанныеКалендаря.НормаЧасовЗаМесяц         					КАК НормаЧасовЗаМесяц,
	|	ДанныеКалендаря.НормаДнейЗаМесяц         					КАК НормаДнейЗаМесяц,
	|
	|	РаботникиОрганизацииСрезПоследних.ПодразделениеОрганизации 	КАК ПодразделениеОрганизации,
	|	РаботникиОрганизацииСрезПоследних.ГрафикРаботы 				КАК ГрафикРаботы,
	|	РаботникиОрганизацииСрезПоследних.ГрафикРаботы.СуммированныйУчетРабочегоВремени КАК СуммированныйУчетРабочегоВремени,
	|
	|	Отпуск.ПериодРасчетаСреднегоНачало 		КАК ПериодРасчетаСреднегоНачало,
	|	Отпуск.ПериодРасчетаСреднегоКонец 		КАК ПериодРасчетаСреднегоКонец
	|
	|	ИЗ	Документ.ИНАГРО_НачислениеОтпускаРаботникамОрганизаций КАК Отпуск
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИНАГРО_РаботникиОрганизаций.СрезПоследних(&ДатаНачалаСобытия, Сотрудник = &Сотрудник ) КАК РаботникиОрганизацииСрезПоследних
	|ПО 	Отпуск.Сотрудник = РаботникиОрганизацииСрезПоследних.Сотрудник
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПриемНаРаботуВОрганизацию.РаботникиОрганизации КАК ПриказОПриеме
	|ПО 	ПриказОПриеме.Сотрудник = РаботникиОрганизацииСрезПоследних.Сотрудник
	|
	|
	|	// данные нормы календаря
	|	ЛЕВОЕ СОЕДИНЕНИЕ (
	|		ВЫБРАТЬ
	|			ГрафикиРаботы.ГрафикРаботы                    КАК ГрафикРаботы,
	|			НАЧАЛОПЕРИОДА( ГрафикиРаботы.Дата, МЕСЯЦ )    КАК ДатаМесяца,
	|			СУММА( ГрафикиРаботы.ОсновноеЗначение  )      КАК НормаДнейЗаМесяц,
	|			СУММА( ГрафикиРаботы.ДополнительноеЗначение ) КАК НормаЧасовЗаМесяц
	|	
	|			ИЗ	РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботы
	|
	|			ГДЕ ГрафикиРаботы.ВидУчетаВремени = &парамПоДням 
	|
	|			СГРУППИРОВАТЬ ПО
	|			ГрафикиРаботы.ГрафикРаботы,
	|			НАЧАЛОПЕРИОДА( ГрафикиРаботы.Дата, МЕСЯЦ )
	|
	|	) КАК ДанныеКалендаря
	|	ПО ДанныеКалендаря.ГрафикРаботы = РаботникиОрганизацииСрезПоследних.ГрафикРаботы	
	|	И ДанныеКалендаря.ДатаМесяца = Отпуск.ПериодРегистрации	
	|
	|ГДЕ
	|	Отпуск.Ссылка = &ДокументСсылка";
	
	Возврат Запрос.Выполнить();
	
КонецФункции // СформироватьЗапросПоШапке()

// Получение данных
//
Функция СформироватьЗапросПоРасчетСреднего() Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументСсылка", Ссылка);

	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СтрокаРасчетСреднего.Ссылка.ПериодРегистрации КАК ПериодРегистрации,
	|	СтрокаРасчетСреднего.Ссылка.Сотрудник КАК Сотрудник,
	|	СтрокаРасчетСреднего.Ссылка.Организация КАК Организация,
	|
	|	СтрокаРасчетСреднего.НомерСтроки,
	|	СтрокаРасчетСреднего.Авторасчет,
	|	СтрокаРасчетСреднего.ВидРасчета,
	|	СтрокаРасчетСреднего.БазовыйПериодНачало,
	|	СтрокаРасчетСреднего.БазовыйПериодКонец,
	|	СтрокаРасчетСреднего.КоэффициентПовышенияОкладов,
	|
	|	СтрокаРасчетСреднего.ОтработаноДней,
	|	СтрокаРасчетСреднего.ОтработаноЧасов,
	|	СтрокаРасчетСреднего.НормаДней,
	|	СтрокаРасчетСреднего.НормаЧасов,
	|	СтрокаРасчетСреднего.КалендарныеДни,
	|
	|	СтрокаРасчетСреднего.Результат,
	|	СтрокаРасчетСреднего.РезультатПолный
	|ИЗ Документ."+Ссылка.Метаданные().Имя+".РасчетСреднего КАК СтрокаРасчетСреднего
	|
	|ГДЕ СтрокаРасчетСреднего.Ссылка = &ДокументСсылка
    |УПОРЯДОЧИТЬ ПО
    |	НомерСтроки
    |";
	
	Возврат Запрос.Выполнить();
	
КонецФункции // СформироватьЗапросПоРасчетСреднего()

Функция СформироватьЗапросПоНачислениям()

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументСсылка" , Ссылка);
	Запрос.УстановитьПараметр("парамСписокПочасовыхОтклонений", ИНАГРО_ПроведениеРасчетов.ПолучитьСписокНачисленийПочасовыхОтклонений());
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СтрокиНачисления.Ссылка.Организация,
	|	СтрокиНачисления.Ссылка.ПериодРегистрации,
	|	СтрокиНачисления.НомерСтроки,  
	|	СтрокиНачисления.Авторасчет,
	|   ЗНАЧЕНИЕ(Перечисление.КодыОперацийВзаиморасчетыСРаботникамиОрганизаций.Начисления) КАК КодОперации,
	|
	|	СтрокиНачисления.Сотрудник,
	|	СтрокиНачисления.Назначение,
	|	СтрокиНачисления.ВидРасчета,
	|	СтрокиНачисления.ВидРасчета.СпособРасчета		КАК СпособРасчета,
    |
	|	КОНЕЦПЕРИОДА(СтрокиНачисления.Ссылка.ПериодРегистрации, МЕСЯЦ)	КАК Период,
	|	СтрокиНачисления.Ссылка.ПериодРегистрации						КАК ПериодВзаиморасчетов,
	|	СтрокиНачисления.ВидРасчета.СчетУчета			КАК СчетУчета,
	|	СтрокиНачисления.Результат						КАК СуммаВзаиморасчетов,
	|
	|	СтрокиНачисления.ДатаНачала,
	|	СтрокиНачисления.ДатаОкончания,
	|	СтрокиНачисления.БазовыйПериодНачало,
	|	СтрокиНачисления.БазовыйПериодКонец,
	|	СтрокиНачисления.ДатаНачала			КАК ПериодДействияНачало,
	|	СтрокиНачисления.ДатаОкончания		КАК ПериодДействияКонец,
	|
	|	СтрокиНачисления.Результат,
	|	СтрокиНачисления.ОплаченоДнейЧасов,
	|	СтрокиНачисления.ОтработаноДней,
	|	СтрокиНачисления.ОтработаноЧасов,
	|	СтрокиНачисления.НормаДней,
	|	СтрокиНачисления.НормаЧасов,
	|	СтрокиНачисления.КалендарныеДни,
	|
	|	СтрокиНачисления.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	|	СтрокиНачисления.ПодразделениеОрганизации КАК Подразделение,
	|	СтрокиНачисления.ГрафикРаботы,
	|	СтрокиНачисления.ГрафикРаботы.СуммированныйУчетРабочегоВремени КАК СуммированныйУчетРабочегоВремени,
	|	СтрокиНачисления.ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени КАК ВидИспользованияРабочегоВремени, 
	|	СтрокиНачисления.Показатель1,
	|	СтрокиНачисления.Показатель2,
	|	СтрокиНачисления.Показатель3,
	|	СтрокиНачисления.НормаЧасовЗаМесяц,
	|	СтрокиНачисления.НормаДнейЗаМесяц,
	|	СтрокиНачисления.ВидУчетаВремениДляСредней,
	|	СтрокиНачисления.СпособОтраженияВБухучете,
	|	СтрокиНачисления.Сторно
	|
	|ИЗ Документ."+Ссылка.Метаданные().Имя+".Начисления КАК СтрокиНачисления
	|
	|ГДЕ СтрокиНачисления.Ссылка = &ДокументСсылка
	|";

	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоНачислениям()

// Формируем и выполняем запрос по ТЧ Начисления
//
Функция СформироватьЗапросСостояния()
	
	Запрос = Новый Запрос;
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка", Ссылка);
	Запрос.УстановитьПараметр("ПустаяДата", Дата('00010101'));
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТЧНачисления.НомерСтроки КАК НомерСтроки,
	|	ТЧНачисления.Сотрудник.ФизическоеЛицо КАК ФизЛицо,
	|	ТЧНачисления.Сотрудник КАК Сотрудник,
	|	ТЧНачисления.Назначение КАК Назначение,
	|	ТЧНачисления.ДатаНачала КАК ДатаНачала,
	|	ВЫБОР
	|		КОГДА ТЧНачисления.ДатаОкончания <> &ПустаяДата
	|			ТОГДА КОНЕЦПЕРИОДА(ТЧНачисления.ДатаОкончания, ДЕНЬ)
	|		ИНАЧЕ &ПустаяДата
	|	КОНЕЦ КАК ДатаОкончания,
	|	ТЧНачисления.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	|	ТЧНачисления.Сторно КАК Сторно,
	|	ТЧНачисления.Состояние КАК Состояние,
	|	ТЧНачисления.ПроизошедшееСобытие
	|		И ТЧНачисления.Ссылка.ВидДокументаОтпуск <> ЗНАЧЕНИЕ(Перечисление.ИНАГРО_ВидыДокументаОтпуск.отзывИзОтпуска) КАК ПроизошедшееСобытие
	|ИЗ
	|	Документ.ИНАГРО_НачислениеОтпускаРаботникамОрганизаций.Начисления КАК ТЧНачисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ ПЕРВЫЕ 1
	|			Строки.НомерСтроки КАК НомерСтроки,
	|			Строки.Сотрудник КАК Сотрудник,
	|			Строки.ДатаНачала КАК ДатаНачала
	|		ИЗ
	|			Документ.ИНАГРО_НачислениеОтпускаРаботникамОрганизаций.Начисления КАК Строки
	|		ГДЕ
	|			Строки.Ссылка = &ДокументСсылка) КАК ДругиеСтроки
	|		ПО (ДругиеСтроки.Сотрудник = ТЧНачисления.Сотрудник)
	|			И (ДругиеСтроки.НомерСтроки < ТЧНачисления.НомерСтроки)
	|			И (ДругиеСтроки.ДатаНачала = ТЧНачисления.ДатаНачала)
	|ГДЕ
	|	ТЧНачисления.Ссылка = &ДокументСсылка" ;
	
	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос.Выполнить();
	
КонецФункции	

// Получение данных
//
Процедура ПроверитьЗаполнениеСтрокиРасчетСреднего(ВыборкаПоСтрокамДокумента, Отказ) Экспорт

	СтрокаНачалаСообщенияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='В строке номер ""%1"" табл. части ""Расчет среднего"": ';uk='У рядку номер ""%1"" табл. частини ""Розрахунок середнього"": '"), СокрЛП(ВыборкаПоСтрокамДокумента.НомерСтроки));
	
	Если ВыборкаПоСтрокамДокумента.БазовыйПериодКонец < ВыборкаПоСтрокамДокумента.БазовыйПериодНачало Тогда
		ТекстСообщения = СтрокаНачалаСообщенияОбОшибке + НСтр("ru='дата начала базового периода не может быть больше даты окончания базового периода!';uk='дата початку базового періоду не може бути більшою ніж дата закінчення базового періоду!'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,ЭтотОбъект,,,Отказ);
	КонецЕсли; 
	
КонецПроцедуры // ПроверитьЗаполнениеСтрокиРасчетСреднего()

Процедура ПроверитьЗаполнениеСтрокиНачисления(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента, Отказ)

	СтрокаНачалаСообщенияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='В строке номер ""%1"" табл. части ""Начисления"": ';uk='У рядку номер ""%1"" табл. частини ""Нарахування"": '"), СокрЛП(ВыборкаПоСтрокамДокумента.НомерСтроки));
	
	Если Не ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ВидРасчета) Тогда
		ОбщегоНазначенияБПКлиентСервер.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + НСтр("ru='не задан Вид расчета!';uk='не заданий Вид розрахунку!'"), Отказ);
	КонецЕсли;
	
	// Дата начала 
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ДатаНачала) Тогда
		ОбщегоНазначенияБПКлиентСервер.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + НСтр("ru='не указана дата начала начисления!';uk='не зазначена дата початку нарахування!'"), Отказ);
	Иначе
		// Дата окончания 
		Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ДатаОкончания) Тогда
			ОбщегоНазначенияБПКлиентСервер.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + НСтр("ru='не указана дата окончания начисления!';uk='не зазначена дата закінчення нарахування!'"), Отказ);
		Иначе
			Если ВыборкаПоСтрокамДокумента.ДатаОкончания < ВыборкаПоСтрокамДокумента.ДатаНачала Тогда
				ОбщегоНазначенияБПКлиентСервер.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + НСтр("ru='дата окончания начисления не должна быть меньше даты начала!';uk='дата закінчення нарахування не повинна бути менше дати початку!'"), Отказ);
			Иначе	
				Если НачалоМесяца(ВыборкаПоСтрокамДокумента.ДатаОкончания) <> НачалоМесяца(ВыборкаПоСтрокамДокумента.ДатаНачала) Тогда
					ОбщегоНазначенияБПКлиентСервер.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + НСтр("ru='даты начала и окончания должны принадлежать одному месяцу!';uk='дати початку і закінчення повинні належати одному місяцю!'"), Отказ);
				КонецЕсли;
			КонецЕсли; 
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ПодразделениеОрганизации) Тогда
		ОбщегоНазначенияБПКлиентСервер.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + НСтр("ru='не указано подразделение организации!!';uk='не вказано підрозділ організації!'"), Отказ);
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаполнениеСтрокиНачисления()

// Проверяет правильность заполнения реквизитов в строке Начисления документа
// Если какой-то из реквизитов, влияющий на проведение, не заполнен или
// заполнен некорректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса к ТЧ документа,
// все проверяемые реквизиты должны быть включены в выборку.
//
// Параметры: 
//  ВыборкаПоСтрокамДокумента	- позиционированная на определенной строке выборка 
//  							  из результата запроса к ТЧ документа, 
//  Отказ 						- флаг отказа в проведении.
// 
Процедура ПроверитьЗаполнениеСтрокиСостояния(ВыборкаПоСтрокамДокумента, Отказ)
	
	СтрокаНачалаСообщенияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='В строке номер ""%1"" табл. части ""Начисления"": ';uk='У рядку номер ""%1"" табл. частини ""Нарахування"": '"), СокрЛП(ВыборкаПоСтрокамДокумента.НомерСтроки));
	
	// Состояние
	Если Не ВыборкаПоСтрокамДокумента.Сторно И НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.Состояние) Тогда
		ОбщегоНазначенияБПКлиентСервер.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + НСтр("ru='не указано состояние работника!';uk='не вказано стан працівника!'"), Отказ);
	КонецЕсли;        
	
	Уволен = Ложь;
	УжеРаботает = РегистрыСведений.ИНАГРО_РаботникиОрганизаций.СрезПоследних(ВыборкаПоСтрокамДокумента.ДатаНачала, Новый Структура("Сотрудник, Организация",ВыборкаПоСтрокамДокумента.Сотрудник, Организация));
	Для каждого Место Из УжеРаботает Цикл
		Если Место.ЗанимаемыхСтавок = 0 Тогда
			Уволен = Истина;
		КонецЕсли;
	КонецЦикла;
	Если УжеРаботает.Количество()=0 ИЛИ Уволен Тогда
		ОбщегоНазначенияБПКлиентСервер.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + НСтр("ru='работник не принят на работу в организацию!';uk='працівник не прийнятий на роботу в організацію!'"), Отказ);
	КонецЕсли;
	
	Если ВыборкаПоСтрокамДокумента.Состояние <> Перечисления.ИНАГРО_СостоянияРаботникаОрганизации.НеИзменять Тогда
		События = РегистрыСведений.ИНАГРО_СостояниеРаботниковОрганизаций.СрезПоследних(ВыборкаПоСтрокамДокумента.ДатаНачала, Новый Структура("Сотрудник, Организация",ВыборкаПоСтрокамДокумента.Сотрудник, Организация));
		Если События.Количество()>0 Тогда
			Если События[0].Период = ВыборкаПоСтрокамДокумента.ДатаНачала И Не ВидДокументаОтпуск = Перечисления.ИНАГРО_ВидыДокументаОтпуск.ОтзывИзОтпуска Тогда 
				ОбщегоНазначенияБПКлиентСервер.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + НСтр("ru='в кадровом учете начало события противоречит документу ';uk='в кадровому обліку початок події суперечить документу '") + События[0].Регистратор+"!", Отказ);
			КонецЕсли;	
		КонецЕсли;
		
		Если ВыборкаПоСтрокамДокумента.ПроизошедшееСобытие Тогда
			События = РегистрыСведений.ИНАГРО_СостояниеРаботниковОрганизаций.СрезПоследних(КонецДня(ВыборкаПоСтрокамДокумента.ДатаОкончания), Новый Структура("Сотрудник, Организация",ВыборкаПоСтрокамДокумента.Сотрудник, Организация));
			Если События.Количество()>0 Тогда
				Если События[0].Период = КонецДня(ВыборкаПоСтрокамДокумента.ДатаОкончания) Тогда 
					ОбщегоНазначенияБПКлиентСервер.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + НСтр("ru='в кадровом учете окончание события противоречит документу ';uk='в кадровому обліку закінчення події суперечить документу '") + События[0].Регистратор+"!", Отказ);
				КонецЕсли;	
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Получение данных
//
Процедура ДобавитьСтрокуРасчетаСреднего(ВыборкаПоСтрокамДокумента, НаборЗаписей) Экспорт
	
	Движения.ИНАГРО_РасчетСреднегоЗаработка.Записывать = Истина;
	Движение = НаборЗаписей.Добавить();
	ЗаполнитьЗначенияСвойств(Движение,ВыборкаПоСтрокамДокумента);
	
КонецПроцедуры 

Процедура ДобавитьСтрокуОсновныхНачислений(ВыборкаПоСтрокамДокумента, НаборЗаписей)
	
	Движения.ИНАГРО_Начисления.Записывать = Истина;
	Движение = НаборЗаписей.Добавить();
	ЗаполнитьЗначенияСвойств(Движение, ВыборкаПоСтрокамДокумента);
	
 	Движение.ВидУчетаВремени = ИНАГРО_ПроведениеРасчетов.ПолучитьВидУчетаВремени(ВыборкаПоСтрокамДокумента.ВидРасчета, ВыборкаПоСтрокамДокумента.СуммированныйУчетРабочегоВремени);

	Если ВыборкаПоСтрокамДокумента.ВидРасчета = ПланыВидовРасчета.ИНАГРО_Начисления.ОтпускЧАЭС 
		ИЛИ ВыборкаПоСтрокамДокумента.ВидРасчета = ПланыВидовРасчета.ИНАГРО_Начисления.ОтпускУчебный 
		ИЛИ ВыборкаПоСтрокамДокумента.ВидРасчета = ПланыВидовРасчета.ИНАГРО_Начисления.ОтпускЗаСвойСчет 
		ИЛИ ВыборкаПоСтрокамДокумента.ВидРасчета = ПланыВидовРасчета.ИНАГРО_Начисления.ОтпускТворческий Тогда
		Движение.ВидУчетаВремениДляСредней = Перечисления.ИНАГРО_ВидыУчетаВремениДляСредней.ПоКалендарнымДнямСПраздниками
	КонецЕсли;
	
КонецПроцедуры // ДобавитьСтрокуОсновныхНачислений

// По строке выборок из результатов запроса по документу формируем движения по регистрам сведений.
//
// Параметры: 
//  Выборка				- спозиционированная на определенной строке выборка 
//				  							  из результата запроса к ТЧ документа, 
// Возвращаемое значение:
//  Нет.
//
Процедура ДобавитьСтрокуСостояний(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента)
	

	Если ВыборкаПоСтрокамДокумента.Состояние = Перечисления.ИНАГРО_СостоянияРаботникаОрганизации.НеИзменять Тогда
		Возврат;
	КонецЕсли;
	
	Движения.ИНАГРО_СостояниеРаботниковОрганизаций.Записывать = Истина;
	Движение = Движения.ИНАГРО_СостояниеРаботниковОрганизаций.Добавить();

	// Свойства
	Если ВидДокументаОтпуск = Перечисления.ИНАГРО_ВидыДокументаОтпуск.ОтзывИзОтпуска Тогда
		Движение.Период = НачалоДня(ВыборкаПоСтрокамДокумента.ДатаНачала) + 1;
	Иначе
		Движение.Период = НачалоДня(ВыборкаПоСтрокамДокумента.ДатаНачала);
	КонецЕсли;

	// Измерения
	Движение.Сотрудник = ВыборкаПоСтрокамДокумента.Назначение;
	Движение.Организация = ВыборкаПоШапкеДокумента.Организация;

	// Ресурсы
	Движение.Состояние = ВыборкаПоСтрокамДокумента.Состояние;
	
	Если ВыборкаПоСтрокамДокумента.ПроизошедшееСобытие Тогда
		
		Движение = Движения.ИНАГРО_СостояниеРаботниковОрганизаций.Добавить();

		// Свойства
		Движение.Период = КонецДня(ВыборкаПоСтрокамДокумента.ДатаОкончания);
	
		// Измерения
		Движение.Сотрудник = ВыборкаПоСтрокамДокумента.Назначение;
		Движение.Организация = ВыборкаПоШапкеДокумента.Организация;

		// Ресурсы
		Движение.Состояние = Перечисления.ИНАГРО_СостоянияРаботникаОрганизации.Работает;
	КонецЕсли;			
	
КонецПроцедуры // ДобавитьСтрокуОсновныхНачислений

Процедура ДобавитьСтрокуВДвиженияПоРегистрамНакопления(ВыборкаПоСтрокамДокумента)
	
	// ВзаиморасчетыСРаботникамиОрганизаций
	Движения.ВзаиморасчетыССотрудниками.Записывать = Истина;
	Движение = Движения.ВзаиморасчетыССотрудниками.Добавить();
	ЗаполнитьЗначенияСвойств(Движение, ВыборкаПоСтрокамДокумента);
	
	Движение.ФизическоеЛицо 		= ВыборкаПоСтрокамДокумента.Сотрудник.ФизическоеЛицо;
	Движение.ВидДвижения			= ВидДвиженияНакопления.Приход;

КонецПроцедуры // ДобавитьСтрокуВДвиженияПоРегистрамНакопления()

#КонецОбласти

// Получение данных
//
Функция АвтозаполнениеРасчетСреднего() Экспорт
	
	Перем ДатаОкончанияСобытия;
	Если ПолучитьДатуНачалаСобытия() < ИНАГРО_ПроведениеРасчетов.ДатаИзмененияПорядка100() Тогда
		//	1. Проверка если данных для расчета средней ещ нет (человек мало проработал, начисляем по окладу)
		//
		Если  НачалоДня(ДобавитьМесяц(ПериодРасчетаСреднегоНачало,1)-1) > ПериодРасчетаСреднегоКонец Тогда

			
			// в отпуск в первый рабочий день
			// если есть за что платить, но расчет еще не производился
			// пользователю прийдется заполнить эти суммы вручную
			//
			СоздатьСтрокуРасчетСреднего( ПланыВидовРасчета.ИНАГРО_СреднийЗаработок.ПоОкладу, 1, НачалоМесяца(ПериодРасчетаСреднегоНачало), КонецМесяца(ПериодРасчетаСреднегоНачало));
		
			Записать();
		
			Возврат Истина;
		КонецЕсли;

		
		// Сначала определим коэффициент увеличения оклада 
		// если он вдруг поменялся за время пока за человеком 
		// сохранялась средняя ЗП
		Запрос = Новый Запрос;
		ДатаНачалаСобытия = ПолучитьДатуНачалаСобытия(ДатаОкончанияСобытия);
		КоэффициентПовышенияОкладов = 1;
		Если ДатаНачалаСобытия < ИНАГРО_ПроведениеРасчетов.ДатаИзмененияПорядка100() Тогда
			Запрос.УстановитьПараметр( "парамСотрудник",	Сотрудник );
			Запрос.УстановитьПараметр( "парамНачало",		КонецДня(ПериодРасчетаСреднегоКонец) + 1 );
			Запрос.УстановитьПараметр( "парамКонец",		ДатаОкончанияСобытия );
			ТекстЗапроса = " 
			|ВЫБРАТЬ
			|	КоэффициентПовышения.Период,
			|	КоэффициентПовышения.Коэффициент
			|ИЗ РегистрСведений.ИНАГРО_КоэффициентПовышенияОкладов КАК	КоэффициентПовышения		
			|ГДЕ	КоэффициентПовышения.Сотрудник	= &парамСотрудник
			|	И	КоэффициентПовышения.Период >= &парамНачало
			|	И	КоэффициентПовышения.Период <= &парамКонец
			|";
			Запрос.Текст = ТекстЗапроса;
			Выборка = Запрос.Выполнить().Выбрать();
			Коэф = 1;
			Пока Выборка.Следующий() Цикл
				Коэф = Коэф * Выборка.Коэффициент;
			КонецЦикла;
			КоэффициентПовышенияОкладов = Коэф;
		КонецЕсли;

		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		Запрос.УстановитьПараметр( "парамСотрудник",	Сотрудник );
		Запрос.УстановитьПараметр( "парамНачало",		ПериодРасчетаСреднегоНачало );
		Запрос.УстановитьПараметр( "парамКонец",		 ПериодРасчетаСреднегоКонец);
		
		//	ВТВремя
		Если Истина Тогда
			//	Описание:
			// 		таблица периодов для расчета средней
			//		
			Начало = ПериодРасчетаСреднегоНачало;
			Конец = ПериодРасчетаСреднегоКонец;
			Запрос.УстановитьПараметр( "парамНачало1", Начало );
			Запрос.УстановитьПараметр( "парамКонец1", Мин( КонецМесяца(Начало), Конец ) );
			ТекстЗапросаВТ = " 
			|	ВЫБРАТЬ
			|		&парамНачало1	КАК БазовыйПериодНачало,
			|		&парамКонец1	КАК БазовыйПериодКонец
			|ПОМЕСТИТЬ ВТВремя	
			|";
			
			Начало = ДобавитьМесяц(НачалоМесяца(Начало),1);
			Инд = 2;
			Пока Начало <= Конец Цикл
				
				Запрос.УстановитьПараметр( "парамНачало"+Инд    , Начало );
				Запрос.УстановитьПараметр( "парамКонец"+Инд    , Мин( КонецМесяца(Начало), Конец ) );
				ТекстЗапросаВТ = ТекстЗапросаВТ + " 
				|	ОБЪЕДИНИТЬ	  
				|	ВЫБРАТЬ
				|		&парамНачало"+Инд+"	КАК БазовыйПериодНачало,
				|		&парамКонец"+Инд+"	КАК БазовыйПериодКонец
				|";	  
				Инд = Инд + 1;
				Начало = ДобавитьМесяц(НачалоМесяца(Начало),1);
				
			КонецЦикла;
			
			Запрос.Текст = ТекстЗапросаВТ;
			Запрос.Выполнить();
			ТекстЗапросаВТВремя = "ВТВремя";
		КонецЕсли;
		
		//	ВТКоэффициент
		Если Истина Тогда
			
			ТаблицаКоэф = Новый ТаблицаЗначений;
			ТаблицаКоэф.Колонки.Добавить("ПериодНачало",Новый ОписаниеТипов("Дата"));
			ТаблицаКоэф.Колонки.Добавить("ПериодКонец",Новый ОписаниеТипов("Дата"));
			ТаблицаКоэф.Колонки.Добавить("Коэффициент",Новый ОписаниеТипов("Число"));
			
			Если ДатаНачалаСобытия < ИНАГРО_ПроведениеРасчетов.ДатаИзмененияПорядка100() Тогда 
				
				//	Описание:
				// 		таблица с коффициентами для оклада и периодами (нижняя граница)
				//		
				ТекстЗапросаВТ = " 
				|	ВЫБРАТЬ
				|		КоэффициентПовышения.Период			КАК ПериодНачало,
				|		КоэффициентПовышения.Коэффициент	КАК Коэффициент,
				|		МИНИМУМ(
				|			ВЫБОР	КОГДА КоэффициентПовышения1.Период ЕСТЬ NULL 
				|						ТОГДА &парамКонец 	
				|					ИНАЧЕ ДОБАВИТЬКДАТЕ(КоэффициентПовышения1.Период,СЕКУНДА,-1) 
				|			КОНЕЦ ) КАК ПериодКонец
				|	ИЗ (
				|			ВЫБРАТЬ
				|				&парамНачало	КАК Период,
				|				1	КАК Коэффициент
				|	
				|	    	ОБЪЕДИНИТЬ 
				|			ВЫБРАТЬ
				|				КоэффициентПовышения.Период,
				|				КоэффициентПовышения.Коэффициент
				|			ИЗ РегистрСведений.ИНАГРО_КоэффициентПовышенияОкладов КАК	КоэффициентПовышения		
				|			ГДЕ		КоэффициентПовышения.Сотрудник	= &парамСотрудник
				|				И	КоэффициентПовышения.Период > &парамНачало
				|	)КАК КоэффициентПовышения
				|	
				|	
				|	ЛЕВОЕ СОЕДИНЕНИЕ  РегистрСведений.ИНАГРО_КоэффициентПовышенияОкладов 	КАК КоэффициентПовышения1
				|	ПО		КоэффициентПовышения1.Сотрудник	= &парамСотрудник
				|		И	КоэффициентПовышения1.Период > КоэффициентПовышения.Период
				|	
				|	СГРУППИРОВАТЬ ПО
				|		КоэффициентПовышения.Период,
				|		КоэффициентПовышения.Коэффициент
				|УПОРЯДОЧИТЬ ПО
				|	ПериодНачало УБЫВ		
				|";
				Запрос.Текст = ТекстЗапросаВТ;
				Выборка = Запрос.Выполнить().Выбрать();
				НачалоМесяцаПериода = Дата(1,1,1);
				КоэффициентПоНачалуМесяца = 1;
				
				Пока Выборка.Следующий()Цикл
					СтрокаКоэф = ТаблицаКоэф.Добавить();
					СтрокаКоэф.ПериодНачало = Выборка.ПериодНачало;
					СтрокаКоэф.ПериодКонец = Выборка.ПериодКонец;
					Если НачалоМесяца(Выборка.ПериодНачало) = НачалоМесяцаПериода Тогда
						СтрокаКоэф.Коэффициент = КоэффициентПоНачалуМесяца*Выборка.Коэффициент;
						КоэффициентПоНачалуМесяца = КоэффициентПоНачалуМесяца * Выборка.Коэффициент;
					Иначе
						СтрокаКоэф.Коэффициент = Выборка.Коэффициент;
						КоэффициентПоНачалуМесяца = Выборка.Коэффициент;
					КонецЕсли;	
					НачалоМесяцаПериода = НачалоМесяца(Выборка.ПериодНачало);
				КонецЦикла;
			Иначе
				СтрокаТаблицы = ТаблицаКоэф.Добавить();
				СтрокаТаблицы.ПериодНачало = ПериодРасчетаСреднегоНачало;
				СтрокаТаблицы.ПериодКонец = ПериодРасчетаСреднегоКонец;
				СтрокаТаблицы.Коэффициент = 1;
			КонецЕсли;	
			Запрос.УстановитьПараметр("ТаблицаКоэф",ТаблицаКоэф);
			ТекстЗапросаВТ = " 
			|	ВЫБРАТЬ
			|		КоэффициентПовышения.ПериодНачало			КАК ПериодНачало,
			|		КоэффициентПовышения.Коэффициент	КАК Коэффициент,
			|		КоэффициентПовышения.ПериодКонец			КАК ПериодКонец
			|ПОМЕСТИТЬ ВТКоэффициент	
			|ИЗ &ТаблицаКоэф КАК КоэффициентПовышения";
			Запрос.Текст = ТекстЗапросаВТ;
			Запрос.Выполнить();
			ТекстЗапросаВТКоэффициент = "ВТКоэффициент";
		КонецЕсли;
		
		ТекстЗапроса = "
		|ВЫБРАТЬ
		|	ВЫБОР КОГДА КоэффициентПериоды.ПериодНачало >= ВсеПериоды.БазовыйПериодНачало И КоэффициентПериоды.ПериодНачало <= ВсеПериоды.БазовыйПериодКонец ТОГДА КоэффициентПериоды.Коэффициент ИНАЧЕ 1 КОНЕЦ	КАК Коэффициент,
		|	НАЧАЛОПЕРИОДА(ВЫБОР КОГДА КоэффициентПериоды.ПериодНачало <= ВсеПериоды.БазовыйПериодНачало ТОГДА ВсеПериоды.БазовыйПериодНачало ИНАЧЕ КоэффициентПериоды.ПериодНачало КОНЕЦ, МЕСЯЦ)	КАК БазовыйПериодНачало,
		|	КОНЕЦПЕРИОДА(ВЫБОР КОГДА КоэффициентПериоды.ПериодКонец <= ВсеПериоды.БазовыйПериодКонец ТОГДА КоэффициентПериоды.ПериодКонец ИНАЧЕ ВсеПериоды.БазовыйПериодКонец КОНЕЦ, МЕСЯЦ)	КАК БазовыйПериодКонец
		|ПОМЕСТИТЬ ВТРасчетСредней
		|ИЗ ВТВремя КАК ВсеПериоды
		|	
		|ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТКоэффициент КАК КоэффициентПериоды
		|ПО		ВсеПериоды.БазовыйПериодНачало <= КоэффициентПериоды.ПериодКонец
		|И		КоэффициентПериоды.ПериодНачало <= ВсеПериоды.БазовыйПериодКонец	
		|	
		|;
		|ВЫБРАТЬ 
		|	МАКСИМУМ(ВТРасчетСредней.Коэффициент),
		|	ВТРасчетСредней.БазовыйПериодНачало,
		|	ВТРасчетСредней.БазовыйПериодКонец 
		|ИЗ ВТРасчетСредней КАК ВТРасчетСредней
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТРасчетСредней.БазовыйПериодНачало,
		|	ВТРасчетСредней.БазовыйПериодКонец
		|УПОРЯДОЧИТЬ ПО 
		|	ВТРасчетСредней.БазовыйПериодНачало УБЫВ";	
		Запрос.Текст = ТекстЗапроса;
		
		мЕстьПремии = РегистрыСведений.ИНАГРО_УчетнаяПолитикаПоПерсоналу.Получить(Новый Структура ("Организация", Организация)).ЕстьПремии;
		мЕстьГодоваяПремия = РегистрыСведений.ИНАГРО_УчетнаяПолитикаПоПерсоналу.Получить(Новый Структура ("Организация", Организация)).ЕстьГодоваяПремия;
		Коэффициент = 1;
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			
			СоздатьСтрокуРасчетСреднего(ПланыВидовРасчета.ИНАГРО_СреднийЗаработок.ПоЗаработкуДляОтпуска, Выборка.Коэффициент, Выборка.БазовыйПериодНачало, Выборка.БазовыйПериодКонец);
			Если мЕстьПремии  Тогда
				СоздатьСтрокуРасчетСреднего(ПланыВидовРасчета.ИНАГРО_СреднийЗаработок.ПоПремиямОтпуска, 0, Выборка.БазовыйПериодНачало, Выборка.БазовыйПериодКонец);
				СоздатьСтрокуРасчетСреднего(ПланыВидовРасчета.ИНАГРО_СреднийЗаработок.ПоФиксПремиямОтпуска, 0, Выборка.БазовыйПериодНачало, Выборка.БазовыйПериодКонец);
			КонецЕсли;
			Если мЕстьГодоваяПремия Тогда
				СоздатьСтрокуРасчетСреднего(ПланыВидовРасчета.ИНАГРО_СреднийЗаработок.ПоГодовойПремии, 0, Выборка.БазовыйПериодНачало, Выборка.БазовыйПериодКонец);
			КонецЕсли;
		
		КонецЦикла;
	Иначе
		//	1. Проверка если данных для расчета средней ещ нет (человек мало проработал, начисляем по окладу)
		//
		Если  НачалоДня(ДобавитьМесяц(ПериодРасчетаСреднегоНачало,1)-1) > ПериодРасчетаСреднегоКонец Тогда
			ДатаНачалаСобытия = ПолучитьДатуНачалаСобытия();

			// проработал меньше целого месяца
			// если есть за что платить, пользователю прийдется заполнить эти суммы вручную
			//
			СоздатьСтрокуРасчетСреднего( ПланыВидовРасчета.ИНАГРО_СреднийЗаработок.ПоОкладу, 1, НачалоМесяца(ДатаНачалаСобытия), КонецМесяца(ДатаНачалаСобытия));
		
			Записать();
		
			Возврат Истина;
		КонецЕсли;
		ДатаНачалаСобытия = ПолучитьДатуНачалаСобытия(ДатаОкончанияСобытия);
		КоэффициентПовышенияОкладов = 1;
		
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		Запрос.УстановитьПараметр( "парамСотрудник",	Сотрудник );
		Запрос.УстановитьПараметр( "парамНачало",		ПериодРасчетаСреднегоНачало );
		Запрос.УстановитьПараметр( "парамКонец",		 ПериодРасчетаСреднегоКонец);
		
		//	ВТВремя
		Если Истина Тогда
			//	Описание:
			// 		таблица периодов для расчета средней
			//		
			Начало = ПериодРасчетаСреднегоНачало;
			Конец = ПериодРасчетаСреднегоКонец;
			Запрос.УстановитьПараметр( "парамНачало1", Начало );
			Запрос.УстановитьПараметр( "парамКонец1", Мин( КонецМесяца(Начало), Конец ) );
			ТекстЗапросаВТ = " 
			|	ВЫБРАТЬ
			|		&парамНачало1	КАК БазовыйПериодНачало,
			|		&парамКонец1	КАК БазовыйПериодКонец
			|ПОМЕСТИТЬ ВТВремя	
			|";
			
			Начало = ДобавитьМесяц(НачалоМесяца(Начало),1);
			Инд = 2;
			Пока Начало <= Конец Цикл
				
				Запрос.УстановитьПараметр( "парамНачало"+Инд    , Начало );
				Запрос.УстановитьПараметр( "парамКонец"+Инд    , Мин( КонецМесяца(Начало), Конец ) );
				ТекстЗапросаВТ = ТекстЗапросаВТ + " 
				|	ОБЪЕДИНИТЬ	  
				|	ВЫБРАТЬ
				|		&парамНачало"+Инд+"	КАК БазовыйПериодНачало,
				|		&парамКонец"+Инд+"	КАК БазовыйПериодКонец
				|";	  
				Инд = Инд + 1;
				Начало = ДобавитьМесяц(НачалоМесяца(Начало),1);
				
			КонецЦикла;
			
			Запрос.Текст = ТекстЗапросаВТ;
			Запрос.Выполнить();
			ТекстЗапросаВТВремя = "ВТВремя";
		КонецЕсли;
		
		ТекстЗапроса = "
		|ВЫБРАТЬ
		|	НАЧАЛОПЕРИОДА(ВсеПериоды.БазовыйПериодНачало)	КАК БазовыйПериодНачало,
		|	КОНЕЦПЕРИОДА(ВсеПериоды.БазовыйПериодКонец)	КАК БазовыйПериодКонец
		|ИЗ ВТВремя КАК ВсеПериоды
		|	
		|СГРУППИРОВАТЬ ПО
		|	ВсеПериоды.БазовыйПериодНачало,
		|	ВсеПериоды.БазовыйПериодКонец
		|УПОРЯДОЧИТЬ ПО 
		|	ВсеПериоды.БазовыйПериодНачало УБЫВ";	
		
		Запрос.Текст = ТекстЗапроса;
			
		мЕстьПремии = РегистрыСведений.ИНАГРО_УчетнаяПолитикаПоПерсоналу.Получить(Новый Структура ("Организация", Организация)).ЕстьПремии;
		мЕстьГодоваяПремия = РегистрыСведений.ИНАГРО_УчетнаяПолитикаПоПерсоналу.Получить(Новый Структура ("Организация", Организация)).ЕстьГодоваяПремия;
		Коэффициент = 1;
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			
			СоздатьСтрокуРасчетСреднего(ПланыВидовРасчета.ИНАГРО_СреднийЗаработок.ПоЗаработкуДляОтпуска, 1, Выборка.БазовыйПериодНачало, Выборка.БазовыйПериодКонец);
			Если мЕстьПремии  Тогда
				СоздатьСтрокуРасчетСреднего(ПланыВидовРасчета.ИНАГРО_СреднийЗаработок.ПоПремиямОтпуска, 0, Выборка.БазовыйПериодНачало, Выборка.БазовыйПериодКонец);
				СоздатьСтрокуРасчетСреднего(ПланыВидовРасчета.ИНАГРО_СреднийЗаработок.ПоФиксПремиямОтпуска, 0, Выборка.БазовыйПериодНачало, Выборка.БазовыйПериодКонец);
			КонецЕсли;
			Если мЕстьГодоваяПремия Тогда
				СоздатьСтрокуРасчетСреднего(ПланыВидовРасчета.ИНАГРО_СреднийЗаработок.ПоГодовойПремии, 0, Выборка.БазовыйПериодНачало, Выборка.БазовыйПериодКонец);
			КонецЕсли;
		
		КонецЦикла;
		
	КонецЕсли;	
	Записать();

	
КонецФункции  // АвтозаполнениеРасчетСреднего()

#Область СлужебныеПроцедурыИФункции	

Процедура ЗаполнитьНачисленияОтзыва()

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("парамСсылка" , Ссылка);
	Запрос.УстановитьПараметр("парамСотрудник" , Сотрудник);
	Запрос.УстановитьПараметр("парамПериодРегистрации" , ПериодРегистрации);
	Запрос.УстановитьПараметр("парамДоПериодаРегистрации" , ПериодРегистрации-1);
	Запрос.УстановитьПараметр("парамСсылкаОснования" , ПервичныйОтпуск);
	
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ 
	|	 Начисления.Сотрудник КАК Сотрудник,
	|	 Начисления.Назначение КАК Назначение,
	|	 ВЫБОР КОГДА Начисления.ПериодДействияНачало >= ПериодОтпуска.ПериодДействияНачало ТОГДА Начисления.ПериодДействияНачало ИНАЧЕ ПериодОтпуска.ПериодДействияНачало КОНЕЦ		КАК ДатаНачала,
	|	 ВЫБОР КОГДА Начисления.ПериодДействияКонец <= ПериодОтпуска.ПериодДействияКонец ТОГДА Начисления.ПериодДействияКонец ИНАЧЕ ПериодОтпуска.ПериодДействияКонец КОНЕЦ			КАК ДатаОкончания,
	|	 ВЫБОР КОГДА Начисления.ПериодДействияНачало >= ПериодОтпуска.ПериодДействияНачало ТОГДА Начисления.ПериодДействияНачало ИНАЧЕ ПериодОтпуска.ПериодДействияНачало КОНЕЦ		КАК БазовыйПериодНачало,
	|	 ВЫБОР КОГДА Начисления.ПериодДействияКонец <= ПериодОтпуска.ПериодДействияКонец ТОГДА Начисления.ПериодДействияКонец ИНАЧЕ ПериодОтпуска.ПериодДействияКонец КОНЕЦ			КАК БазовыйПериодКонец,
	|	 Начисления.ВидРасчета,
	|	 Начисления.ГрафикРаботы,
	|	 Начисления.ВидУчетаВремени,
	|	 Начисления.ПодразделениеОрганизации,
	|	 Начисления.НормаДнейЗаМесяц,
	|	 Начисления.НормаЧасовЗаМесяц,
	|	 Начисления.Показатель1,
	|	 Начисления.Показатель2,
	|	 Начисления.Показатель3,
	|	 Начисления.Авторасчет,
	|	 Начисления.ВидУчетаВремениДляСредней
	|	 
	|
	|ИЗ РегистрРасчета.ИНАГРО_Начисления КАК Начисления
	|
	|ВНУТРЕННЕЕ СОЕДИНЕНИЕ (
	|		ВЫБРАТЬ РАЗЛИЧНЫЕ
	|			Отпуск.Ссылка.Сотрудник КАК Сотрудник,
	|			Отпуск.ВидРасчета КАК ВидРасчета,
	|			Отпуск.ДатаНачала КАК ПериодДействияНачало,
	|			ВЫБОР	КОГДА Отпуск.ДатаОкончания >= &парамПериодРегистрации
	|						ТОГДА &парамДоПериодаРегистрации
	|					ИНАЧЕ Отпуск.ДатаОкончания
	|			КОНЕЦ КАК ПериодДействияКонец
	|		ИЗ Документ."+Метаданные().Имя+".Отпуска КАК Отпуск
	|		ГДЕ		Отпуск.Ссылка = &парамСсылка
	|			И	Отпуск.ДатаНачала < &парамПериодРегистрации
	|) КАК Отпуска
	|ПО		Отпуска.Сотрудник = Начисления.Сотрудник
	|	И	Отпуска.ПериодДействияНачало <= Начисления.ПериодДействияКонец
	|	И	Отпуска.ПериодДействияКонец >= Начисления.ПериодДействияНачало
	|	
	|ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.ИНАГРО_Начисления.ВытесняющиеВидыРасчета КАК ВытесняющиеВидыРасчета
	|ПО		Начисления.ВидРасчета = ВытесняющиеВидыРасчета.Ссылка  
	|	И	Отпуска.ВидРасчета = ВытесняющиеВидыРасчета.ВидРасчета
	|
	|ВНУТРЕННЕЕ СОЕДИНЕНИЕ (
	|		ВЫБРАТЬ
	|			Отпуск.Ссылка.Сотрудник КАК Сотрудник,
	|			МИНИМУМ(Отпуск.ДатаНачала) КАК ПериодДействияНачало,
	|			МАКСИМУМ(
	|				ВЫБОР	КОГДА Отпуск.ДатаОкончания >= &парамПериодРегистрации
	|							ТОГДА &парамДоПериодаРегистрации
	|						ИНАЧЕ Отпуск.ДатаОкончания
	|				КОНЕЦ
	|			) КАК ПериодДействияКонец
	|		ИЗ Документ."+Метаданные().Имя+".Отпуска КАК Отпуск
	|		ГДЕ		Отпуск.Ссылка = &парамСсылка
	|			И	Отпуск.ДатаНачала < &парамПериодРегистрации
	|		СГРУППИРОВАТЬ ПО
	|			Отпуск.Ссылка.Сотрудник
	|) КАК ПериодОтпуска
	|ПО		Отпуска.Сотрудник = Начисления.Сотрудник
	|	И	Отпуска.ПериодДействияНачало <= Начисления.ПериодДействияКонец
	|	И	Отпуска.ПериодДействияКонец >= Начисления.ПериодДействияНачало
	|
	|ГДЕ 	Начисления.Регистратор <> &парамСсылка
	|	И 	Начисления.Регистратор <> &парамСсылкаОснования
	|	И	НЕ Начисления.Сторно
	|";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Движение = Начисления.Добавить();
		ЗаполнитьЗначенияСвойств(Движение, Выборка);
		Движение.Авторасчет	= Истина;
	КонецЦикла;
	
КонецПроцедуры  // АвтозаполнениеНачисления()

Процедура ВыполнитьОтменуПроведенияДокумента() Экспорт
	
	ЭтотОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
	
КонецПроцедуры

// Получение данных
//
Процедура ПолучитьПериодПоРаботнику() Экспорт
	Перем ДатаОкончанияСобытия, ДатаПриемаПервыйРабочийДень;
	
	Если НЕ ЗначениеЗаполнено(Сотрудник) Тогда
		Возврат;
	КонецЕсли;	
	
	// -1- работает дольше 12-и месяцев
	// -2- работает меньше 12 месяцев, но дольше 1-го месяца
	// -3- работает меньше целого месяца, но в отпуск не в первый рабочий день - заполняем реальный период с даты приема
	// -4- в отпуск в первый рабочий день, нет начисленной зарплаты.
	
	ДатаНачалаСобытия = ПолучитьДатуНачалаСобытия(ДатаОкончанияСобытия);
	ДатаПриема = ПолучитьДанныеОПриеме(ДатаПриемаПервыйРабочийДень);
	НеПроработалЦелогоМесяца = Ложь;
	
	Если НЕ ЗначениеЗаполнено(ДатаПриема) Тогда
		Возврат;
	КонецЕсли;
	
	Если ДобавитьМесяц(НачалоМесяца(ДатаНачалаСобытия), -ЧислоМесяцев)>= ДатаПриема Тогда
		// -1- работает дольше 12-и месяцев
		ПериодРасчетаСреднегоНачало	= ДобавитьМесяц(НачалоМесяца(ДатаНачалаСобытия), -ЧислоМесяцев);
		ПериодРасчетаСреднегоКонец	= НачалоДня(НачалоМесяца(ДатаНачалаСобытия)-1);
		
	ИначеЕсли КонецМесяца(ДобавитьМесяц(ДатаНачалаСобытия, -1)) >= ДатаПриема Тогда
		// -2-3-
		Если ДатаПриемаПервыйРабочийДень Тогда
			// -2- работает меньше 12 месяцев, но дольше 1-го месяца
			// если дата приема первый рабочий день месяца, то месяц считаем целым.
			ПериодРасчетаСреднегоНачало	= НачалоМесяца(ДатаПриема);
			ПериодРасчетаСреднегоКонец	= НачалоДня(НачалоМесяца(ДатаНачалаСобытия)-1);
		ИначеЕсли ДобавитьМесяц(НачалоМесяца(ДатаНачалаСобытия), -1) > ДатаПриема Тогда
			// -2- работает меньше 12 месяцев, но дольше 1-го месяца
			// если дата приема не первый рабочий день месяца, но есть целые отработанные месяцы.
			ПериодРасчетаСреднегоНачало	= ДобавитьМесяц(НачалоМесяца(ДатаПриема),1);
			ПериодРасчетаСреднегоКонец	= НачалоДня(НачалоМесяца(ДатаНачалаСобытия)-1);
		Иначе
			// -3- работает меньше целого месяца, но в отпуск не в первый рабочий день 
			//    - заполняем реальный период с даты приема.
			ПериодРасчетаСреднегоНачало	= ДатаПриема;	
			ПериодРасчетаСреднегоКонец	= КонецМесяца(ДатаПриема);
			НеПроработалЦелогоМесяца = Истина;
		КонецЕсли;
		
	ИначеЕсли ДатаНачалаСобытия = ДатаПриема Тогда
		// -4- в отпуск в первый рабочий день, нет начисленной зарплаты
		ПериодРасчетаСреднегоНачало	= ДатаПриема;
		ПериодРасчетаСреднегоКонец	= ДатаПриема;
		НеПроработалЦелогоМесяца = Истина;
		
	Иначе
		// -3- работает меньше целого месяца, но в отпуск не в первый рабочий день 
		//    - заполняем реальный период с даты приема
		// прием в месяце ухода в отпуск.
		ПериодРасчетаСреднегоНачало	= ДатаПриема;	
		ПериодРасчетаСреднегоКонец	= НачалоДня(ДатаНачалаСобытия-1);
		НеПроработалЦелогоМесяца = Истина;
		
	КонецЕсли;

КонецПроцедуры // ПолучитьПериодПоРаботнику()

// Функия возвращает дату начала события.
//
Функция	ПолучитьДатуНачалаСобытия(ДатаОкончанияСобытия = 0) Экспорт
	
	Если Отпуска.Количество() = 0 Тогда
		Возврат ПериодРегистрации;
	КонецЕсли;
		
	тбОтпуска = Отпуска.Выгрузить();
	тбОтпуска.Сортировать("ДатаНачала");
	ДатаОкончанияСобытия = тбОтпуска[тбОтпуска.Количество()-1].ДатаОкончания;
	
	Возврат тбОтпуска[0].ДатаНачала;
	
КонецФункции // ()

Функция	ПолучитьДанныеОПриеме(ДатаПриемаПервыйРабочийДень)
	
	ЭтоПервыйРабочийДень = Ложь;
	ДатаПриема = Дата('00010101');
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("парамСотрудник",		Сотрудник );
	Запрос.УстановитьПараметр("парамФизЛицо",		Сотрудник.ФизическоеЛицо);
		
	ТекстЗапроса = "
	|	ВЫБРАТЬ
	|       ПриемРаботников.ДатаПриема КАК ДатаПриема,
	|		СУММА(ЕСТЬNULL(Графики.ОсновноеЗначение,0)) КАК ОтработаноДнейСНачалаМесяца
	|   ИЗ (
	|		ВЫБРАТЬ 
	|          	МИНИМУМ(Работники.Период) КАК ДатаПриема
	|		ИЗ РегистрСведений.ИНАГРО_РаботникиОрганизаций КАК Работники
	|   	ГДЕ Работники.Сотрудник = &парамСотрудник
	|       ) КАК ПриемРаботников
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИНАГРО_РаботникиОрганизаций КАК Работники 
	|   	ПО		Работники.Сотрудник = &парамСотрудник
	|			И	Работники.Период = ПриемРаботников.ДатаПриема
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИНАГРО_ГрафикиРаботыПоВидамВремени КАК Графики
	|   	ПО  	Графики.Дата >= НАЧАЛОПЕРИОДА(Работники.Период, МЕСЯЦ)
	|			И	Графики.Дата <= Работники.Период
	|			И	Графики.ВидУчетаВремени = ЗНАЧЕНИЕ(Перечисление.ИНАГРО_ВидыУчетаВремени.ПоДням)
	|			// индивидуальные графики и табели не анализируем, так как нас интересует только норма времени
	|			И	ВЫБОР КОГДА Работники.ГрафикРаботы.ГрафикРаботыНормыВремени <> ЗНАЧЕНИЕ(Справочник.ИНАГРО_ГрафикиРаботы.ПустаяСсылка)
	|						ТОГДА  Работники.ГрафикРаботы.ГрафикРаботыНормыВремени
	|                     ИНАЧЕ Работники.ГрафикРаботы
	|				КОНЕЦ = Графики.ГрафикРаботы
	|    СГРУППИРОВАТЬ ПО
	|       ПриемРаботников.ДатаПриема
	|";
				
	Запрос.Текст = ТекстЗапроса;
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ДатаПриема = Выборка.ДатаПриема;
		ДатаПриемаПервыйРабочийДень = (Выборка.ОтработаноДнейСНачалаМесяца = 0 ИЛИ Выборка.ОтработаноДнейСНачалаМесяца = 1);
	КонецЕсли;

	Возврат ДатаПриема;
	
КонецФункции

Функция СоздатьСтрокуРасчетСреднего(ВидРасч, Коэффициент, БазовыйПериодНачало, БазовыйПериодКонец) 
	
	// Строку вставляем на первую позицию, потому что коэффициент считали в обратном порядке.
	СтрокаТабличнойЧасти =  РасчетСреднего.Вставить(0);
	
	СтрокаТабличнойЧасти.Авторасчет 			= Истина;
	СтрокаТабличнойЧасти.ВидРасчета 			= ВидРасч;
	СтрокаТабличнойЧасти.БазовыйПериодНачало 	= БазовыйПериодНачало;
	СтрокаТабличнойЧасти.БазовыйПериодКонец 	= БазовыйПериодКонец;
	СтрокаТабличнойЧасти.КоэффициентПовышенияОкладов = Коэффициент;
	
КонецФункции

#КонецОбласти

#Область АвтозаполнениеРасчет

// Получение данных
//
Процедура АвтозаполнениеНачисленияКомпенсацияОтпуска(СуммаСредней = 0) Экспорт
	
	// данные нормы календаря помесячно
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("парамРегистратор",	Ссылка);
	Запрос.УстановитьПараметр("ДатаНачалаСобытия",	ПериодРасчетаСреднегоНачало);
	Запрос.УстановитьПараметр("парамСотрудник",		Сотрудник);
	Запрос.УстановитьПараметр("парамФизЛицо",		Сотрудник.ФизическоеЛицо);
	
	//	ВТДанныеКалендаря
	Если Истина Тогда
		//	Описание:
		// 		данные календаря по месяцам в которых есть отпуск
		//		график работника на дату начала отпуска.
		//		
		ТекстЗапросаВТ = "
		|	ВЫБРАТЬ
		|		ДанныеКалендаря.ДатаМесяца    		КАК ДатаМесяца,
		|		ДанныеКалендаря.НормаДнейЗаМесяц	КАК НормаДнейЗаМесяц,
		|		ДанныеКалендаря.НормаЧасовЗаМесяц	КАК НормаЧасовЗаМесяц
		|
		|ПОМЕСТИТЬ ВТДанныеКалендаря	
		|   ИЗ (
		|		ВЫБРАТЬ
		|			МИНИМУМ( Отпуска.ДатаНачала  )		КАК ДатаНачала,
		|			МАКСИМУМ( Отпуска.ДатаОкончания )	КАК ДатаОкончания
		|		ИЗ	Документ.ИНАГРО_НачислениеОтпускаРаботникамОрганизаций.Отпуска КАК Отпуска
		|		ГДЕ Отпуска.Ссылка = &парамРегистратор
		|    ) КАК ГраницыОтпуска
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИНАГРО_РаботникиОрганизаций.СрезПоследних(&ДатаНачалаСобытия, Сотрудник = &парамСотрудник ИЛИ Сотрудник.ОсновноеНазначение = &парамСотрудник ) КАК Работники
		|	ПО		ИСТИНА
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ (
		|		ВЫБРАТЬ
		|			ГрафикиРаботы.ГрафикРаботы						КАК ГрафикРаботы,
		|			НАЧАЛОПЕРИОДА( ГрафикиРаботы.Дата, МЕСЯЦ )		КАК ДатаМесяца,
		|			СУММА( ГрафикиРаботы.ОсновноеЗначение )			КАК НормаДнейЗаМесяц,
		|			СУММА( ГрафикиРаботы.ДополнительноеЗначение )	КАК НормаЧасовЗаМесяц
		|		ИЗ	РегистрСведений.ИНАГРО_ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботы
		|		ГДЕ ГрафикиРаботы.ВидУчетаВремени = ЗНАЧЕНИЕ(Перечисление.ИНАГРО_ВидыУчетаВремени.ПоДням) 
		|		СГРУППИРОВАТЬ ПО
		|			ГрафикиРаботы.ГрафикРаботы,
		|			НАЧАЛОПЕРИОДА( ГрафикиРаботы.Дата, МЕСЯЦ )
		|	) КАК ДанныеКалендаря
		|	ПО		ДанныеКалендаря.ГрафикРаботы = Работники.ГрафикРаботы	
		|		И	ДанныеКалендаря.ДатаМесяца >= НАЧАЛОПЕРИОДА( ГраницыОтпуска.ДатаНачала, МЕСЯЦ )	
		|		И	ДанныеКалендаря.ДатаМесяца <= НАЧАЛОПЕРИОДА( ГраницыОтпуска.ДатаОкончания, МЕСЯЦ )	
		|";
		Запрос.Текст = ТекстЗапросаВТ;
		Запрос.Выполнить();
		ТекстЗапросаВТДанныеКалендаря = "ВТДанныеКалендаря";
	КонецЕсли;
	
	// запрос только по оновному назначению, включая внутреннее совместительство
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	Основной.Дата,
	|	Основной.ПериодРегистрации,
	|	Основной.Организация,
	|	Основной.Ссылка,
	|
	|   ЗНАЧЕНИЕ(ПланВидовРасчета.ИНАГРО_Начисления.КомпенсацияОтпуска) КАК ВидРасчета,
	|	ИСТИНА 						КАК Авторасчет,
	|	Основной.Сотрудник 			КАК Сотрудник,
	|	Основной.ПериодРегистрации		КАК ДатаНачала,
	|	Основной.ПериодРегистрации		КАК ДатаОкончания,
	|	Основной.ПериодРегистрации		КАК БазовыйПериодНачало,
	|	Основной.ПериодРегистрации		КАК БазовыйПериодКонец,
	|
	|	Основной.СуммаСредней,
	|	Основной.ВидУчетаВремениДляСредней,
	|  	Основной.ПериодРасчетаСреднегоНачало	КАК ПериодРасчетаСреднегоНачало,
	|  	Основной.ПериодРасчетаСреднегоКонец		КАК ПериодРасчетаСреднегоКонец,
	|
	|	РаботникиОрганизации.Сотрудник 					КАК Назначение,
	|	РаботникиОрганизации.ПодразделениеОрганизации	КАК ПодразделениеОрганизации,
	|	РаботникиОрганизации.ГрафикРаботы	КАК ГрафикРаботы
	|
	|ИЗ Документ."+Ссылка.Метаданные().Имя+" КАК Основной
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИНАГРО_РаботникиОрганизаций.СрезПоследних(&ДатаНачалаСобытия, Сотрудник = &парамСотрудник ) КАК РаботникиОрганизации
	|ПО		ИСТИНА
	|
	|
	|ГДЕ Основной.Ссылка = &парамРегистратор	
	|";
	
	Запрос.Текст = ТекстЗапроса;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НоваяСтрока = Начисления.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		
		НачисленияВыборка = ИНАГРО_ПроведениеРасчетов.ЗапросСпособОтражения(Дата, Выборка.ВидРасчета, Сотрудник, Организация ).Выбрать();
		Если НачисленияВыборка.Следующий() Тогда
			мСпособОтраженияВБухучете = НачисленияВыборка.СпособОтраженияВБухучете;
		КонецЕсли;
		
		
		НоваяСтрока.Показатель1	= СуммаСредней;
		НоваяСтрока.Показатель2	= ?(ВидДокументаОтпуск = Перечисления.ИНАГРО_ВидыДокументаОтпуск.КомпенсацияОтпуска,1,-1)*ДнейЧасовКомпенсацииОтпуска;
		НоваяСтрока.СпособОтраженияВБухучете	= мСпособОтраженияВБухучете;
	КонецЦикла;
	
	Записать();
	
КонецПроцедуры  // АвтозаполнениеНачисленияКомпенсацияОтпуска()

// Получение данных
//
Процедура АвтозаполнениеНачисленияОтзывИзОтпуска(СуммаСредней = 0) Экспорт
	
	// данные нормы календаря помесячно
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("парамРегистратор",	Ссылка);
	Запрос.УстановитьПараметр("ДатаНачалаСобытия",	ПолучитьДатуНачалаСобытия());
	Запрос.УстановитьПараметр("парамСотрудник",		Сотрудник);
	Запрос.УстановитьПараметр("парамФизЛицо",		Сотрудник.ФизическоеЛицо);
	
	//	ВТДанныеКалендаря
	Если Истина Тогда
		//	Описание:
		// 		данные календаря по месяцам в которых есть отпуск
		//		график работника на дату начала отпуска.
		//		
		ТекстЗапросаВТ = "
		|	ВЫБРАТЬ
		|		Работники.Сотрудник    				КАК Назначение,
		|		ДанныеКалендаря.ДатаМесяца    		КАК ДатаМесяца,
		|		ДанныеКалендаря.ГрафикРаботы  		КАК ГрафикРаботы,
		|		ДанныеКалендаря.НормаДнейЗаМесяц	КАК НормаДнейЗаМесяц,
		|		ДанныеКалендаря.НормаЧасовЗаМесяц	КАК НормаЧасовЗаМесяц
		|
		|ПОМЕСТИТЬ ВТДанныеКалендаря	
		|   ИЗ (
		|		ВЫБРАТЬ
		|			МИНИМУМ( Отпуска.ДатаНачала  )		КАК ДатаНачала,
		|			МАКСИМУМ( Отпуска.ДатаОкончания )	КАК ДатаОкончания
		|		ИЗ	Документ.ИНАГРО_НачислениеОтпускаРаботникамОрганизаций.Отпуска КАК Отпуска
		|		ГДЕ Отпуска.Ссылка = &парамРегистратор
		|    ) КАК ГраницыОтпуска
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИНАГРО_РаботникиОрганизаций.СрезПоследних(&ДатаНачалаСобытия, 
		|			Сотрудник = &парамСотрудник ИЛИ Сотрудник.ОсновноеНазначение = &парамСотрудник ) КАК Работники
		|	ПО		ИСТИНА
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ (
		|		ВЫБРАТЬ
		|			ГрафикиРаботы.ГрафикРаботы						КАК ГрафикРаботы,
		|			НАЧАЛОПЕРИОДА( ГрафикиРаботы.Дата, МЕСЯЦ )		КАК ДатаМесяца,
		|			СУММА( ГрафикиРаботы.ОсновноеЗначение )			КАК НормаДнейЗаМесяц,
		|			СУММА( ГрафикиРаботы.ДополнительноеЗначение )	КАК НормаЧасовЗаМесяц
		|		ИЗ	РегистрСведений.ИНАГРО_ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботы
		|		ГДЕ ГрафикиРаботы.ВидУчетаВремени = ЗНАЧЕНИЕ(Перечисление.ИНАГРО_ВидыУчетаВремени.ПоДням) 
		|		СГРУППИРОВАТЬ ПО
		|			ГрафикиРаботы.ГрафикРаботы,
		|			НАЧАЛОПЕРИОДА( ГрафикиРаботы.Дата, МЕСЯЦ )
		|	) КАК ДанныеКалендаря
		|	ПО		ДанныеКалендаря.ГрафикРаботы = Работники.ГрафикРаботы	
		|		И	ДанныеКалендаря.ДатаМесяца >= НАЧАЛОПЕРИОДА( ГраницыОтпуска.ДатаНачала, МЕСЯЦ )	
		|		И	ДанныеКалендаря.ДатаМесяца <= НАЧАЛОПЕРИОДА( ГраницыОтпуска.ДатаОкончания, МЕСЯЦ )	
		|";
		Запрос.Текст = ТекстЗапросаВТ;
		Запрос.Выполнить();
		ТекстЗапросаВТДанныеКалендаря = "ВТДанныеКалендаря";
	КонецЕсли;
	
	
	// запрос по всем назначениям, включая внутреннее совместительство
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ИСТИНА 			КАК Сторно,
	|	ИСТИНА 			КАК Авторасчет,
	|	Основной.Дата,
	|	Основной.ПериодРегистрации,
	|	Основной.Организация,
	|	Основной.Ссылка,
	|	Основной.Сотрудник,
	|	Основной.СуммаСредней,
	|	Основной.ВидУчетаВремениДляСредней,
	|  	Основной.ПериодРасчетаСреднегоНачало	КАК ПериодРасчетаСреднегоНачало,
	|  	Основной.ПериодРасчетаСреднегоКонец		КАК ПериодРасчетаСреднегоКонец,
	|
	|	РаботникиОрганизации.Сотрудник 						КАК Назначение,
	|	РаботникиОрганизации.ПодразделениеОрганизации		КАК ПодразделениеОрганизации,
	|	ДанныеКалендаря.ГрафикРаботы 				КАК ГрафикРаботы,
	|	ДанныеКалендаря.ДатаМесяца         			КАК ДатаМесяца,
	|	ДанныеКалендаря.НормаЧасовЗаМесяц         	КАК НормаЧасовЗаМесяц,
	|	ДанныеКалендаря.НормаДнейЗаМесяц         	КАК НормаДнейЗаМесяц,
	|
	|   ТЧОтпуска.ВидРасчета,
	|	ВЫБОР КОГДА ДанныеКалендаря.ДатаМесяца > ТЧОтпуска.ДатаНачала		ТОГДА ДанныеКалендаря.ДатаМесяца ИНАЧЕ ТЧОтпуска.ДатаНачала КОНЕЦ КАК ДатаНачала,
	|	ВЫБОР КОГДА КОНЕЦПЕРИОДА(ДанныеКалендаря.ДатаМесяца, МЕСЯЦ) < ТЧОтпуска.ДатаОкончания	ТОГДА КОНЕЦПЕРИОДА(ДанныеКалендаря.ДатаМесяца, МЕСЯЦ) ИНАЧЕ ТЧОтпуска.ДатаОкончания КОНЕЦ КАК ДатаОкончания,
	|	ВЫБОР КОГДА ДанныеКалендаря.ДатаМесяца > ТЧОтпуска.ДатаНачала		ТОГДА ДанныеКалендаря.ДатаМесяца ИНАЧЕ ТЧОтпуска.ДатаНачала КОНЕЦ КАК БазовыйПериодНачало,
	|	ВЫБОР КОГДА КОНЕЦПЕРИОДА(ДанныеКалендаря.ДатаМесяца, МЕСЯЦ) < ТЧОтпуска.ДатаОкончания	ТОГДА КОНЕЦПЕРИОДА(ДанныеКалендаря.ДатаМесяца, МЕСЯЦ) ИНАЧЕ ТЧОтпуска.ДатаОкончания КОНЕЦ КАК БазовыйПериодКонец
	|
	|ИЗ Документ."+Ссылка.Метаданные().Имя+" КАК Основной
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИНАГРО_РаботникиОрганизаций.СрезПоследних(&ДатаНачалаСобытия,
	|	Сотрудник = &парамСотрудник ИЛИ Сотрудник.ОсновноеНазначение = &парамСотрудник ) КАК РаботникиОрганизации
	|ПО		ИСТИНА
	|
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ "+ТекстЗапросаВТДанныеКалендаря+" КАК ДанныеКалендаря
	|ПО		ИСТИНА
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ	Документ.ИНАГРО_НачислениеОтпускаРаботникамОрганизаций.Отпуска КАК ТЧОтпуска
	|ПО		ТЧОтпуска.Ссылка = &парамРегистратор
	|	И	ДанныеКалендаря.ДатаМесяца >= НАЧАЛОПЕРИОДА(ТЧОтпуска.ДатаНачала, МЕСЯЦ)
	|	И	ДанныеКалендаря.ДатаМесяца <= КОНЕЦПЕРИОДА(ТЧОтпуска.ДатаОкончания, МЕСЯЦ)
	|
	|ГДЕ Основной.Ссылка = &парамРегистратор	
	|";
	
	Запрос.Текст = ТекстЗапроса;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		// строка движений
		НоваяСтрока = Начисления.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		НачисленияВыборка = ИНАГРО_ПроведениеРасчетов.ЗапросСпособОтражения(Дата, Выборка.ВидРасчета, Сотрудник, Организация ).Выбрать();
		Если НачисленияВыборка.Следующий() Тогда
			// вверху основное начисление
			мСпособОтраженияВБухучете = НачисленияВыборка.СпособОтраженияВБухучете;
		КонецЕсли;
		Если Сотрудник = Выборка.Назначение Тогда
			НоваяСтрока.Показатель1	= СуммаСредней;
			НоваяСтрока.Состояние	= Перечисления.ИНАГРО_СостоянияРаботникаОрганизации.Работает;
			НоваяСтрока.ПроизошедшееСобытие	= Истина;
			НоваяСтрока.СпособОтраженияВБухучете	= мСпособОтраженияВБухучете;
		КонецЕсли;
		
	КонецЦикла;
	Записать();
	
	Если ВидДокументаОтпуск = Перечисления.ИНАГРО_ВидыДокументаОтпуск.ОтзывИзОтпуска Тогда 
		ЗаполнитьНачисленияОтзыва();
	КонецЕсли;
	
КонецПроцедуры  // АвтозаполнениеНачисленияОтзывИзОтпуска()

// Получение данных
//
Процедура АвтозаполнениеНачисления(СуммаСредней = 0) Экспорт
	
	Если ВидДокументаОтпуск = Перечисления.ИНАГРО_ВидыДокументаОтпуск.Отпускные Тогда
		АвтозаполнениеНачисленияОтпуск(СуммаСредней);	
	ИначеЕсли ВидДокументаОтпуск = Перечисления.ИНАГРО_ВидыДокументаОтпуск.КомпенсацияОтпуска 
		ИЛИ ВидДокументаОтпуск = Перечисления.ИНАГРО_ВидыДокументаОтпуск.ВозвратПриУвольнении Тогда
		АвтозаполнениеНачисленияКомпенсацияОтпуска(СуммаСредней);	
	ИначеЕсли ВидДокументаОтпуск = Перечисления.ИНАГРО_ВидыДокументаОтпуск.ОтзывИзОтпуска Тогда
		АвтозаполнениеНачисленияОтзывИзОтпуска(СуммаСредней);	
	Иначе	
	КонецЕсли;
	
КонецПроцедуры  // АвтозаполнениеНачисления()

// Получение данных
//
Процедура АвтозаполнениеНачисленияОтпуск(СуммаСредней = 0) Экспорт
	
	мСпособОтраженияВБухучете = Справочники.СпособыОтраженияЗарплатыВРеглУчете.ПустаяСсылка();
	
	// данные нормы календаря помесячно
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("парамРегистратор",	Ссылка);
	Запрос.УстановитьПараметр("ДатаНачалаСобытия",	ПолучитьДатуНачалаСобытия());
	Запрос.УстановитьПараметр("парамСотрудник",		Сотрудник);
	Запрос.УстановитьПараметр("парамФизлицо",		Сотрудник.ФизическоеЛицо);
	
	//	ВТДанныеКалендаря
	Если Истина Тогда
		//	Описание:
		// 		данные календаря по месяцам в которых есть отпуск
		//		график работника на дату начала отпуска.
		//		
		ТекстЗапросаВТ = "
		|	ВЫБРАТЬ
		|		ЕСТЬNULL(РаботникиОрганизации.Сотрудник,&парамСотрудник)	КАК Назначение,
		|		ДанныеКалендаря.ДатаМесяца    		КАК ДатаМесяца,
		|		ДанныеКалендаря.ГрафикРаботы		КАК ГрафикРаботы,
		|		ДанныеКалендаря.НормаДнейЗаМесяц	КАК НормаДнейЗаМесяц,
		|		ДанныеКалендаря.НормаЧасовЗаМесяц	КАК НормаЧасовЗаМесяц
		|
		|ПОМЕСТИТЬ ВТДанныеКалендаря	
		|   ИЗ (
		|		ВЫБРАТЬ
		|			МИНИМУМ( Отпуска.ДатаНачала  )		КАК ДатаНачала,
		|			МАКСИМУМ( Отпуска.ДатаОкончания )	КАК ДатаОкончания
		|		ИЗ	Документ.ИНАГРО_НачислениеОтпускаРаботникамОрганизаций.Отпуска КАК Отпуска
		|		ГДЕ Отпуска.Ссылка = &парамРегистратор
		|    ) КАК ГраницыОтпуска
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИНАГРО_РаботникиОрганизаций.СрезПоследних(&ДатаНачалаСобытия, 
		|			Сотрудник = &парамСотрудник ИЛИ Сотрудник.ОсновноеНазначение = &парамСотрудник ) КАК РаботникиОрганизации
		|	ПО		ИСТИНА
		|
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ (
		|		ВЫБРАТЬ
		|			ГрафикиРаботы.ГрафикРаботы						КАК ГрафикРаботы,
		|			НАЧАЛОПЕРИОДА( ГрафикиРаботы.Дата, МЕСЯЦ )		КАК ДатаМесяца,
		|			СУММА( ГрафикиРаботы.ОсновноеЗначение )			КАК НормаДнейЗаМесяц,
		|			СУММА( ГрафикиРаботы.ДополнительноеЗначение )	КАК НормаЧасовЗаМесяц
		|		ИЗ	РегистрСведений.ИНАГРО_ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботы
		|		ГДЕ ГрафикиРаботы.ВидУчетаВремени = ЗНАЧЕНИЕ(Перечисление.ИНАГРО_ВидыУчетаВремени.ПоДням) 
		|		СГРУППИРОВАТЬ ПО
		|			ГрафикиРаботы.ГрафикРаботы,
		|			НАЧАЛОПЕРИОДА( ГрафикиРаботы.Дата, МЕСЯЦ )
		|	) КАК ДанныеКалендаря
		|	ПО		ДанныеКалендаря.ГрафикРаботы = РаботникиОрганизации.ГрафикРаботы	
		|		И	ДанныеКалендаря.ДатаМесяца >= НАЧАЛОПЕРИОДА( ГраницыОтпуска.ДатаНачала, МЕСЯЦ )	
		|		И	ДанныеКалендаря.ДатаМесяца <= НАЧАЛОПЕРИОДА( ГраницыОтпуска.ДатаОкончания, МЕСЯЦ )	
		|";
		Запрос.Текст = ТекстЗапросаВТ;
		Запрос.Выполнить();
		ТекстЗапросаВТДанныеКалендаря = "ВТДанныеКалендаря";
	КонецЕсли;
	
	// запрос по всем назначениям, включая внутреннее совместительство
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ИСТИНА КАК Авторасчет,
	|	Основной.Дата,
	|	Основной.ПериодРегистрации,
	|	Основной.Организация,
	|	Основной.Ссылка,
	|	Основной.Сотрудник,
	|	Основной.СуммаСредней,
	|	Основной.ВидУчетаВремениДляСредней,
	|  	Основной.ПериодРасчетаСреднегоНачало	КАК ПериодРасчетаСреднегоНачало,
	|  	Основной.ПериодРасчетаСреднегоКонец		КАК ПериодРасчетаСреднегоКонец,
	|
	|	ЕСТЬNULL(РаботникиОрганизации.Сотрудник, Основной.Сотрудник)	КАК Назначение,
	|	РаботникиОрганизации.ПодразделениеОрганизации					КАК ПодразделениеОрганизации,
	|	ДанныеКалендаря.ГрафикРаботы 				КАК ГрафикРаботы,
	|	ДанныеКалендаря.ДатаМесяца         			КАК ДатаМесяца,
	|	ДанныеКалендаря.НормаЧасовЗаМесяц         	КАК НормаЧасовЗаМесяц,
	|	ДанныеКалендаря.НормаДнейЗаМесяц         	КАК НормаДнейЗаМесяц,
	|
	|   ТЧОтпуска.ВидРасчета,
	|	ВЫБОР КОГДА ДанныеКалендаря.ДатаМесяца > ТЧОтпуска.ДатаНачала		ТОГДА ДанныеКалендаря.ДатаМесяца ИНАЧЕ ТЧОтпуска.ДатаНачала КОНЕЦ КАК ДатаНачала,
	|	ВЫБОР КОГДА КОНЕЦПЕРИОДА(ДанныеКалендаря.ДатаМесяца, МЕСЯЦ) < ТЧОтпуска.ДатаОкончания	ТОГДА КОНЕЦПЕРИОДА(ДанныеКалендаря.ДатаМесяца, МЕСЯЦ) ИНАЧЕ ТЧОтпуска.ДатаОкончания КОНЕЦ КАК ДатаОкончания,
	|
	|	ВЫБОР КОГДА ДанныеКалендаря.ДатаМесяца > ТЧОтпуска.ДатаНачала		ТОГДА ДанныеКалендаря.ДатаМесяца ИНАЧЕ ТЧОтпуска.ДатаНачала КОНЕЦ КАК БазовыйПериодНачало,
	|	ВЫБОР КОГДА КОНЕЦПЕРИОДА(ДанныеКалендаря.ДатаМесяца, МЕСЯЦ) < ТЧОтпуска.ДатаОкончания	ТОГДА КОНЕЦПЕРИОДА(ДанныеКалендаря.ДатаМесяца, МЕСЯЦ) ИНАЧЕ ТЧОтпуска.ДатаОкончания КОНЕЦ КАК БазовыйПериодКонец
	|
	|ИЗ Документ."+Ссылка.Метаданные().Имя+" КАК Основной
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИНАГРО_РаботникиОрганизаций.СрезПоследних(&ДатаНачалаСобытия,
	|	Сотрудник = &парамСотрудник ИЛИ Сотрудник.ОсновноеНазначение = &парамСотрудник ) КАК РаботникиОрганизации
	|ПО		ИСТИНА
	|
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ "+ТекстЗапросаВТДанныеКалендаря+" КАК ДанныеКалендаря
	|ПО		ЕСТЬNULL(РаботникиОрганизации.Сотрудник, &парамСотрудник) = ДанныеКалендаря.Назначение
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ	Документ.ИНАГРО_НачислениеОтпускаРаботникамОрганизаций.Отпуска КАК ТЧОтпуска
	|ПО		ТЧОтпуска.Ссылка = &парамРегистратор
	|	И	ДанныеКалендаря.ДатаМесяца >= НАЧАЛОПЕРИОДА(ТЧОтпуска.ДатаНачала, МЕСЯЦ)
	|	И	ДанныеКалендаря.ДатаМесяца <= КОНЕЦПЕРИОДА(ТЧОтпуска.ДатаОкончания, МЕСЯЦ)
	|
	|ГДЕ Основной.Ссылка = &парамРегистратор	
	|	И  ЕСТЬNULL(РаботникиОрганизации.ЗанимаемыхСтавок,1) > 0
	|
	|";
	
	Запрос.Текст = ТекстЗапроса;
	
	Выборка = Запрос.Выполнить().Выбрать();
	мСпособОтраженияВБухучете = Справочники.СпособыОтраженияЗарплатыВРеглУчете.ПустаяСсылка();

	Пока Выборка.Следующий() Цикл
		
		// строка движений
		НоваяСтрока = Начисления.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		// Реквизиты
		ИНАГРО_ПроведениеРасчетов.ПроставитьДанныеСтроки(Сотрудник, Выборка.Назначение, НоваяСтрока.ДатаНачала, Ссылка, НоваяСтрока);
		
		НачисленияВыборка = ИНАГРО_ПроведениеРасчетов.ЗапросСпособОтражения(Дата, Выборка.ВидРасчета, Сотрудник, Организация ).Выбрать();
		Если НачисленияВыборка.Следующий() Тогда
			// вверху основное начисление
			мСпособОтраженияВБухучете = НачисленияВыборка.СпособОтраженияВБухучете;
		КонецЕсли;
		
		Если Сотрудник = Выборка.Назначение Тогда
			НоваяСтрока.Показатель1	= СуммаСредней;
			Если Выборка.ВидРасчета = ПланыВидовРасчета.ИНАГРО_Начисления.ОтпускПоУходуЗаРебенком Тогда
				НоваяСтрока.Состояние	= Перечисления.ИНАГРО_СостоянияРаботникаОрганизации.ОтпускПоУходуЗаРебенкомДо3Лет;
			Иначе
				НоваяСтрока.Состояние	= Перечисления.ИНАГРО_СостоянияРаботникаОрганизации.ОтпускЕжегодный;
			КонецЕсли;
			НоваяСтрока.ПроизошедшееСобытие	= Истина;
			НоваяСтрока.СпособОтраженияВБухучете	= мСпособОтраженияВБухучете;
		КонецЕсли;
		
	КонецЦикла;
	Записать();
	
КонецПроцедуры  // АвтозаполнениеНачисленияОтпуск()

Процедура РассчитатьПараметрыСреднейДокумента() Экспорт
	
	ЧислоМесяцев = 12;
	
	Если ЗначениеЗаполнено(ПервичныйОтпуск) Тогда
		
		СуммаСредней	= ПервичныйОтпуск.СуммаСредней;
		
		ПериодРасчетаСреднегоНачало = ПервичныйОтпуск.ПериодРасчетаСреднегоНачало;
		ПериодРасчетаСреднегоКонец	= ПервичныйОтпуск.ПериодРасчетаСреднегоКонец;
		ВидУчетаВремениДляСредней	= ПервичныйОтпуск.ВидУчетаВремениДляСредней;
		
		Если ПолучитьДатуНачалаСобытия() < ИНАГРО_ПроведениеРасчетов.ДатаИзмененияПорядка100() Тогда
			ГодоваяПремияБазовыйПериодНачало = ПервичныйОтпуск.ГодоваяПремияБазовыйПериодНачало;
			ГодоваяПремия				= ПервичныйОтпуск.ГодоваяПремия;
		КонецЕсли;
		
		РасчетСреднего.Очистить();
		
	Иначе
		
		Если ПолучитьДатуНачалаСобытия()= Дата('00010101') Тогда
			ПериодРасчетаСреднегоНачало	= Дата('00010101');
			ПериодРасчетаСреднегоКонец	= Дата('00010101');
			
		Иначе
			ПолучитьПериодПоРаботнику();

		КонецЕсли;
		
		ВидУчетаВремениДляСредней	= Перечисления.ИНАГРО_ВидыУчетаВремениДляСредней.ПоКалендарнымДням;
		
		Если ПолучитьДатуНачалаСобытия() < ИНАГРО_ПроведениеРасчетов.ДатаИзмененияПорядка100() Тогда
			ГодоваяПремияБазовыйПериодНачало = НачалоГода(НачалоГода(ПериодРасчетаСреднегоНачало));
			ГодоваяПремия = ИНАГРО_ПроведениеРасчетов.РассчитатьПремияЗаГод(ГодоваяПремияБазовыйПериодНачало, Сотрудник);
		КонецЕсли
			
	КонецЕсли;
	
КонецПроцедуры

// Получение данных
//
Функция РассчитатьТЧСреднюю() Экспорт
	
	// очистить расчитываемые поля в ТЧ РасчетСреднего
	Для каждого ТекущаяСтрока Из РасчетСреднего Цикл
		
		Если ТекущаяСтрока.Авторасчет Тогда
			ТекущаяСтрока.Результат = 0;
			ТекущаяСтрока.РезультатПолный = 0;
			
			ТекущаяСтрока.ОтработаноДней = 0;
			ТекущаяСтрока.ОтработаноЧасов = 0;
			ТекущаяСтрока.КалендарныеДни = 0;
			ТекущаяСтрока.НормаДней = 0;
			ТекущаяСтрока.НормаЧасов = 0;
		КонецЕсли;
		
	КонецЦикла;  
	
	
	Отбор = Новый Структура;
	Отбор.Вставить("ПревышениеПремии", Ложь);
	КопияРасчетСреднего = РасчетСреднего.Выгрузить();
	ИзмКопияРасчетСреднего = КопияРасчетСреднего.Скопировать(Отбор);
	РасчетСреднего.Загрузить(ИзмКопияРасчетСреднего);
	
	Записать();
	
	Если ПолучитьДатуНачалаСобытия() < ИНАГРО_ПроведениеРасчетов.ДатаИзмененияПорядка100() Тогда
		// 1. Если расчет по Окладу
		//
		Если  РасчетСреднего.Количество() > 0 И РасчетСреднего[0].ВидРасчета = ПланыВидовРасчета.ИНАГРО_СреднийЗаработок.ПоОкладу Тогда
			
			ПараметрыОклада = ИНАГРО_ПроведениеРасчетов.ПолучитьПараметыОклада(ПериодРасчетаСреднегоКонец, Сотрудник);
			РасчетСреднего[0].Результат			= ПараметрыОклада["Оклад"];
			РасчетСреднего[0].РезультатПолный	= ПараметрыОклада["Оклад"];
			РасчетСреднего[0].ОтработаноДней	= ПараметрыОклада["НормаДней"];
			РасчетСреднего[0].ОтработаноЧасов	= ПараметрыОклада["НормаЧасов"];
			РасчетСреднего[0].КалендарныеДни	= ПараметрыОклада["КалендарныеДни"];
			
			РассчитатьСреднюю();
			Записать();
			Возврат Истина;
			
		КонецЕсли;
		
		// 2. Стандартный расчет
	    //
		НачатьТранзакцию();
		Прочитать();
		ВыборкаПоСредним = СформироватьЗапросПоРасчетСреднего().Выбрать();
		ЗафиксироватьТранзакцию();
		
		// Создадим рабочие наборы записей
		Отказ = Ложь;
		НаборСредних = РегистрыРасчета.ИНАГРО_РасчетСреднегоЗаработка.СоздатьНаборЗаписей();
		НаборСредних.Отбор.Регистратор.Значение = Ссылка;
		Пока ВыборкаПоСредним.Следующий() Цикл
			
			ПроверитьЗаполнениеСтрокиРасчетСреднего(ВыборкаПоСредним, Отказ);
			Если НЕ Отказ Тогда
				// Заполним записи в наборах записей регистров
				ДобавитьСтрокуРасчетаСреднего(ВыборкаПоСредним, НаборСредних);
			КонецЕсли;
			
		КонецЦикла;
		НаборСредних.Записать();
		
		Если Отказ Тогда
			
			// Если есть какие-то проблемы - удаляем движения (тут нет транзакции) 
			// Удаляем движения
			НаборСредних.Очистить();
			НаборСредних.Записать();
			
			Возврат Не Отказ;
			
		КонецЕсли;
		
		ОсновнойВидРасчета = ПланыВидовРасчета.ИНАГРО_СреднийЗаработок.ПоЗаработкуДляОтпуска;
		тКоэффициентПовышенияОкладов = КоэффициентПовышенияОкладов;
		ПредыдущийПериодОсновногоВидаРасчета = Дата(1,1,1);
		нКоэффициентПовышенияОкладов = 0;    
		
		ДанныеДляСредней = ИНАГРО_ПроведениеРасчетов.РассчитатьСреднююПорядок100(Ссылка); 
		Выборка = ДанныеДляСредней.Выборка.Выбрать();  
		
		Пока Выборка.Следующий() Цикл
			
			СтрокаТабличнойЧасти = РасчетСреднего.Получить( Выборка.НомерСтроки - 1 );
			
			Если НЕ СтрокаТабличнойЧасти.Авторасчет И НЕ СтрокаТабличнойЧасти.ПревышениеПремии Тогда
				Продолжить;
			КонецЕсли;
			Если Не Выборка.ВидРасчета = ОсновнойВидРасчета И нКоэффициентПовышенияОкладов > 0 И ПредыдущийПериодОсновногоВидаРасчета = Выборка.БазовыйПериодНачало Тогда
				СтрокаТабличнойЧасти.Результат				= Окр(Выборка.Результат,2) * нКоэффициентПовышенияОкладов;
			Иначе	
				СтрокаТабличнойЧасти.Результат				= Окр(Выборка.Результат,2) * тКоэффициентПовышенияОкладов;
			КонецЕсли;
			СтрокаТабличнойЧасти.РезультатПолный		= Выборка.РезультатПолный;
			
			СтрокаТабличнойЧасти.ОтработаноДней			= Выборка.ОтработаноДней;
			СтрокаТабличнойЧасти.ОтработаноЧасов		= Выборка.ОтработаноЧасов;
			Если ВидУчетаВремениДляСредней = Перечисления.ИНАГРО_ВидыУчетаВремениДляСредней.ПоКалендарнымДнямСПраздниками
				И СтрокаТабличнойЧасти.ВидРасчета = ПланыВидовРасчета.ИНАГРО_СреднийЗаработок.ПоЗаработкуДляОтпуска Тогда
				СтрокаТабличнойЧасти.КалендарныеДни		= 1 + День(Выборка.БазовыйПериодКонец) - День(Выборка.БазовыйПериодНачало);
			Иначе
				СтрокаТабличнойЧасти.КалендарныеДни		= Выборка.КалендарныеДни;
			КонецЕсли;
			СтрокаТабличнойЧасти.НормаДней				= Выборка.НормаДней;
			СтрокаТабличнойЧасти.НормаЧасов				= Выборка.НормаЧасов;
			
			Если Выборка.ВидРасчета = ОсновнойВидРасчета Тогда
				нКоэффициентПовышенияОкладов = тКоэффициентПовышенияОкладов;
				тКоэффициентПовышенияОкладов = тКоэффициентПовышенияОкладов * Выборка.КоэффициентПовышенияОкладов;;
				ПредыдущийПериодОсновногоВидаРасчета = Выборка.БазовыйПериодНачало;
			КонецЕсли;
		КонецЦикла;
	Иначе
		// 1. Если расчет по Окладу
		//
		Если  РасчетСреднего.Количество() > 0 И РасчетСреднего[0].ВидРасчета = ПланыВидовРасчета.ИНАГРО_СреднийЗаработок.ПоОкладу Тогда
			
			ДатаНачалаСобытия = ПолучитьДатуНачалаСобытия();
			ПараметрыОклада = ИНАГРО_ПроведениеРасчетов.ПолучитьПараметыОклада1213(ДатаНачалаСобытия, Сотрудник,,,Истина);

			РасчетСреднего[0].Результат			= ПараметрыОклада["Оклад"];
			РасчетСреднего[0].РезультатПолный	= ПараметрыОклада["Оклад"];
			РасчетСреднего[0].ОтработаноДней	= ПараметрыОклада["НормаДней"];
			РасчетСреднего[0].ОтработаноЧасов	= ПараметрыОклада["НормаЧасов"];
			РасчетСреднего[0].КалендарныеДни	= ПараметрыОклада["КалендарныеДни"];
			
			РассчитатьСреднюю();
			Записать();
			Возврат Истина;
			
		КонецЕсли;
		
		// 2. Стандартный расчет
		//
		НачатьТранзакцию();
		Прочитать();
		ВыборкаПоСредним = СформироватьЗапросПоРасчетСреднего().Выбрать();
		ЗафиксироватьТранзакцию();
		
		// Создадим рабочие наборы записей
		Отказ = Ложь;
		НаборСредних = РегистрыРасчета.ИНАГРО_РасчетСреднегоЗаработка.СоздатьНаборЗаписей();
		НаборСредних.Отбор.Регистратор.Значение = Ссылка;
		Пока ВыборкаПоСредним.Следующий() Цикл
			
			ПроверитьЗаполнениеСтрокиРасчетСреднего(ВыборкаПоСредним, Отказ);
			Если НЕ Отказ Тогда
				// Заполним записи в наборах записей регистров
				ДобавитьСтрокуРасчетаСреднего(ВыборкаПоСредним, НаборСредних);
			КонецЕсли;
			
		КонецЦикла;
		НаборСредних.Записать();
		
		Если Отказ Тогда
			
			// Если есть какие-то проблемы - удаляем движения (тут нет транзакции) 
			// Удаляем движения
			НаборСредних.Очистить();
			НаборСредних.Записать();
			
			Возврат Не Отказ;
			
		КонецЕсли;
		
		ОсновнойВидРасчета = ПланыВидовРасчета.ИНАГРО_СреднийЗаработок.ПоЗаработкуДляОтпуска; 
		
		ДанныеДляСредней = ИНАГРО_ПроведениеРасчетов.РассчитатьСреднююПорядок100(Ссылка); 
		ТаблицаПревышений = ДанныеДляСредней.ТаблицаПревышений;
		Выборка = ДанныеДляСредней.Выборка.Выбрать();  
				
		Пока Выборка.Следующий() Цикл
			
			СтрокаТабличнойЧасти = РасчетСреднего.Получить(Выборка.НомерСтроки - 1);
			
			Если НЕ СтрокаТабличнойЧасти.Авторасчет Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаТабличнойЧасти.Результат				= Окр(Выборка.Результат,2);
				
			СтрокаТабличнойЧасти.РезультатПолный		= Выборка.РезультатПолный;
			
			СтрокаТабличнойЧасти.ОтработаноДней			= Выборка.ОтработаноДней;
			СтрокаТабличнойЧасти.ОтработаноЧасов		= Выборка.ОтработаноЧасов;
			Если ВидУчетаВремениДляСредней = Перечисления.ИНАГРО_ВидыУчетаВремениДляСредней.ПоКалендарнымДнямСПраздниками
				И СтрокаТабличнойЧасти.ВидРасчета = ПланыВидовРасчета.ИНАГРО_СреднийЗаработок.ПоЗаработкуДляОтпуска Тогда
				СтрокаТабличнойЧасти.КалендарныеДни		= 1 + День(Выборка.БазовыйПериодКонец) - День(Выборка.БазовыйПериодНачало);
			Иначе
				СтрокаТабличнойЧасти.КалендарныеДни		= Выборка.КалендарныеДни;
			КонецЕсли;
			СтрокаТабличнойЧасти.НормаДней				= Выборка.НормаДней;
			СтрокаТабличнойЧасти.НормаЧасов				= Выборка.НормаЧасов;
			
		КонецЦикла;
		
	КонецЕсли;   
	
	Если ПолучитьДатуНачалаСобытия() >= ИНАГРО_ПроведениеРасчетов.ДатаИзмененияПорядка100_486() Тогда
		Если ТаблицаПревышений.Количество() > 0 Тогда
			Для НомерСтрокиПремии = 0 По ТаблицаПревышений.Количество() - 1 Цикл 
				ДополнительнаяСтрока = РасчетСреднего.Добавить();
				ДополнительнаяСтрока.Авторасчет = Истина;
				ДополнительнаяСтрока.ПревышениеПремии = Истина;
				ДополнительнаяСтрока.БазовыйПериодНачало = ТаблицаПревышений[НомерСтрокиПремии].БазовыйПериодПремииНачало;
				ДополнительнаяСтрока.БазовыйПериодКонец = ТаблицаПревышений[НомерСтрокиПремии].БазовыйПериодПремииКонец;
				ДополнительнаяСтрока.Результат = ТаблицаПревышений[НомерСтрокиПремии].РезультатПолный - ТаблицаПревышений[НомерСтрокиПремии].Результат;
				ДополнительнаяСтрока.ВидРасчета = ТаблицаПревышений[НомерСтрокиПремии].ВидРасчета; 
			КонецЦикла;	
		КонецЕсли;
	КонецЕсли;
	
	НаборСредних.Очистить();
	НаборСредних.Записать();
	
	РассчитатьСреднюю();
	Записать();
	
КонецФункции  // РассчитатьРасчетСреднего()

// Рассчитываем величину средней
//
Функция РассчитатьСреднюю() Экспорт
	
	СуммаСредней = 0;
	ОплачиваемоеВремя = 0;
	
	Если ВидУчетаВремениДляСредней = Перечисления.ИНАГРО_ВидыУчетаВремениДляСредней.ПоРабочимДням Тогда
		ОплачиваемоеВремя = РасчетСреднего.Итог("ОтработаноДней");
		
	ИначеЕсли ВидУчетаВремениДляСредней = Перечисления.ИНАГРО_ВидыУчетаВремениДляСредней.ПоРабочимЧасам Тогда
		ОплачиваемоеВремя = РасчетСреднего.Итог("ОтработаноЧасов");
		
	Иначе
		ОплачиваемоеВремя = РасчетСреднего.Итог("КалендарныеДни");
		
	КонецЕсли;
	
	СуммаСредней = ?(ОплачиваемоеВремя = 0 , 0, РасчетСреднего.Итог("Результат") / ОплачиваемоеВремя);
	
КонецФункции  // ЗаполнитьРасчетаСреднего_Заполнение()

// Получение данных
//
Процедура РассчитатьНачисления(Сотрудники) Экспорт
	
	// Массивы для хранения индексов строк табличных частей,
	// используются для расчета по одному сотруднику.
	МассивИндексыСтрокНачисления = Новый Массив();         
	
	Отказ = Ложь;
	// Перечитаем объект и соберем данные для заполнения наборов записей регистров
	НачатьТранзакцию();
	Прочитать();
	ВыборкаПоШапкеДокумента = СформироватьЗапросПоШапке().Выбрать();
	
	// позиционируем выборку
	ВыборкаПоШапкеДокумента.Следующий();
	ВыборкаПоНачислениям = СформироватьЗапросПоНачислениям().Выбрать();
	ЗафиксироватьТранзакцию();
	
	// Создадим рабочие наборы записей
	НаборОсновныеНачисления = РегистрыРасчета.ИНАГРО_Начисления.СоздатьНаборЗаписей();
	НаборОсновныеНачисления.Отбор.Регистратор.Значение = Ссылка;
	
	Пока ВыборкаПоНачислениям.Следующий() Цикл
		
		ПроверитьЗаполнениеСтрокиНачисления(ВыборкаПоШапкеДокумента,ВыборкаПоНачислениям, Отказ);
		Если НЕ Отказ Тогда
			// Заполним записи в наборах записей регистров
			ДобавитьСтрокуОсновныхНачислений(ВыборкаПоНачислениям, НаборОсновныеНачисления);
			МассивИндексыСтрокНачисления.Добавить(ВыборкаПоНачислениям.НомерСтроки-1);
			
		КонецЕсли;
		
	КонецЦикла;
	НаборОсновныеНачисления.Записать();
	
	Если Отказ Тогда
		
		// Если есть какие-то проблемы - удаляем движения (тут нет транзакции) 
		// Удаляем движения.
		НаборОсновныеНачисления.Очистить();
		НаборОсновныеНачисления.Записать();
		
		Возврат;
		
	КонецЕсли;
	
	// Получим дополнительные записи, имеющие признак сторно, которые необходимо добавить 
	// в текущий набор для того, чтобы в результате сохранения получился максимальный 
	// фактический период действия.
	ТаблицаСторноЗаписей = НаборОсновныеНачисления.ПолучитьДополнение();
	ТаблицаСторноЗаписей.Колонки.Удалить("ПериодРегистрации");
	ТаблицаСторноЗаписей.Колонки.ПериодРегистрацииСторно.Имя = "ПериодРегистрации";
	ТаблицаСторноЗаписей.Колонки.Удалить("ПериодДействияНачало");
	ТаблицаСторноЗаписей.Колонки.ПериодДействияНачалоСторно.Имя = "ПериодДействияНачало";
	ТаблицаСторноЗаписей.Колонки.Удалить("ПериодДействияКонец");
	ТаблицаСторноЗаписей.Колонки.ПериодДействияКонецСторно.Имя = "ПериодДействияКонец";
	Для каждого СтрокаСторно Из ТаблицаСторноЗаписей Цикл
		
		// Заполним записи в наборе записей регистра
		Движение = НаборОсновныеНачисления.Добавить();
		ЗаполнитьЗначенияСвойств(Движение, СтрокаСторно);
		Движение.Сторно						= Истина;
		Движение.Авторасчет					= Истина;
		
		// и в табличной части
		Движение = Начисления.Добавить();
		ЗаполнитьЗначенияСвойств(Движение, СтрокаСторно);
		Движение.ДатаНачала		= СтрокаСторно.ПериодДействияНачало;   
		Движение.ДатаОкончания	= СтрокаСторно.ПериодДействияКонец; 
		Движение.Сторно						= Истина;
		Движение.Авторасчет					= Истина;
		Движение.Состояние		= Перечисления.ИНАГРО_СостоянияРаботникаОрганизации.НеИзменять;

		МассивИндексыСтрокНачисления.Добавить(Движение.НомерСтроки-1);
		
	КонецЦикла;
	НаборОсновныеНачисления.Записать();
		
	// Рассчитываем записи
	// при этом передаем не только набор записей регистра расчета, но и набор записей регистра 
	// накопления со сведениями об отработанном времени.
	ИНАГРО_ПроведениеРасчетов.РассчитатьЗаписиРегистраРасчета("ИНАГРО_Начисления", 
														НаборОсновныеНачисления, 
														Начисления, 
														МассивИндексыСтрокНачисления, 
														Сотрудники);
	
	// Удаляем движения
	НаборОсновныеНачисления.Очистить();
	НаборОсновныеНачисления.Записать();
	
	Записать();
	
КонецПроцедуры  // РассчитатьНачисления

#КонецОбласти

#КонецЕсли