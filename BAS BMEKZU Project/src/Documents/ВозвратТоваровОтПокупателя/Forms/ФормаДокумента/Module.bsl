#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	
	Если Параметры.Ключ.Пустая() Тогда
		ПодготовитьФормуНаСервере();
	КонецЕсли;
	
	// Активизировать первую непустую табличную часть
	СписокТабличныхЧастей = Новый СписокЗначений;
	СписокТабличныхЧастей.Добавить("Товары", "Товары");
	СписокТабличныхЧастей.Добавить("ВозвратнаяТара", "ВозвратнаяТара");

	АктивизироватьТабличнуюЧасть = ОбщегоНазначенияБПВызовСервера.ПолучитьПервуюНепустуюВидимуюТабличнуюЧасть(
		ЭтаФорма, СписокТабличныхЧастей);
	ОбщегоНазначенияБПВызовСервера.АктивизироватьЭлементФормы(ЭтаФорма, АктивизироватьТабличнуюЧасть);
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)

	Если ИсточникВыбора.ИмяФормы = "Обработка.ПодборНоменклатуры.Форма.Форма" Тогда
		ОбработкаВыбораПодборВставкаИзБуфераНаСервере(ВыбранноеЗначение, ИсточникВыбора.ИмяТаблицы);
	// ИНАГРО++
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Документ.ИНАГРО_ПриходныйОрдерНаТовары.Форма.ФормаВыбора" Тогда
		Если ЗначениеЗаполнено(ИсточникВыбора.ИмяТаблицы) Тогда
			ОбработкаЗаполненияТабличнойЧастиНаСервере(ВыбранноеЗначение, ИсточникВыбора.ИмяТаблицы);
		Иначе
			Объект.Склад = ВыбранноеЗначение;
		КонецЕсли;
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Справочник.Склады.Форма.ФормаВыбора" Тогда
		Объект.Склад = ВыбранноеЗначение;
	// ИНАГРО-- 
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)

	Если ИмяСобытия = "ОбработанаТабличнаяЧастьТовары" И ТипЗнч(Параметр) = Тип("Структура") 
		И Параметр.Свойство("ИдентификаторВызывающейФормы")
		И Параметр.ИдентификаторВызывающейФормы = УникальныйИдентификатор Тогда
		ОбработкаОповещенияОбработкиТабличнойЧастиТоварыНаСервере(Параметр);
	ИначеЕсли ИмяСобытия = "ДанныеСкопированыВБуферОбмена" Тогда
		УстановитьДоступностьКомандыВставки(ЭтотОбъект, Истина);	
	Иначе
		ОбщегоНазначенияБПКлиент.ОбработкаОповещенияФормыДокумента(ЭтаФорма, Объект.Ссылка, ИмяСобытия, Параметр, Источник);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом

	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	ПодготовитьФормуНаСервере();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	ЗаполнитьДобавленныеКолонкиТаблиц();
	
	ОбновитьИтоги(ЭтаФорма);


	// Авторасчет НДС
	ПерерасчетПроизведен = Истина;

	УстановитьСостояниеДокумента();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ВидОперацииПриИзменении(Элемент)

	ВидОперацииПриИзмененииНаСервере();

КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)

	Если НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДатаДокумента) Тогда
		// Изменение времени не влияет на поведение документа.
		ТекущаяДатаДокумента = Объект.Дата;
		Возврат;
	КонецЕсли;

	// Общие проверки условий по датам.
	ТребуетсяВызовСервера = ОбщегоНазначенияБПКлиент.ТребуетсяВызовСервераПриИзмененииДатыДокумента(Объект.Дата, 
		ТекущаяДатаДокумента, Объект.ВалютаДокумента, ВалютаРегламентированногоУчета);
		
		
	// Если определили, что изменение даты может повлиять на какие-либо параметры, 
	// то передаем обработку на сервер.
	Если ТребуетсяВызовСервера Тогда
		ДатаПриИзмененииНаСервере();
	КонецЕсли;
	
	// Запомним новую дату документа.
	ТекущаяДатаДокумента = Объект.Дата;

КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)

	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		ОрганизацияПриИзмененииНаСервере();
	Иначе
		УстановитьПараметрыВыбораДокументаОтгрузки(ЭтаФорма);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДокументОтгрузкиПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.ДокументОтгрузки) Тогда
		ДокументОтгрузкиПриИзмененииНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)

	Если НЕ ЗначениеЗаполнено(Объект.Контрагент) Тогда
		УстановитьПараметрыВыбораДокументаОтгрузки(ЭтаФорма);
		Возврат;
	КонецЕсли;

	КонтрагентПриИзмененииНаСервере();

КонецПроцедуры

&НаКлиенте
Процедура ДоговорКонтрагентаПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		УстановитьПараметрыВыбораДокументаОтгрузки(ЭтаФорма);
		Возврат;
	КонецЕсли;

	ДоговорКонтрагентаПриИзмененииНаСервере();

КонецПроцедуры

&НаКлиенте
Процедура СкладПриИзменении(Элемент)
	
	УстановитьТипСкладаОрдера(ЭтаФорма); // ИНАГРО
	
	Если ЗначениеЗаполнено(Объект.Склад) Тогда
		СкладПриИзмененииНаСервере();
	Иначе
		ТипЦенСклада = ПредопределенноеЗначение("Справочник.ТипыЦенНоменклатуры.ПустаяСсылка");
		ТипСклада    = ПредопределенноеЗначение("Перечисление.ТипыСкладов.ОптовыйСклад");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СделкаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;

	ПараметрыОбъекта = Новый Структура;
	ПараметрыОбъекта.Вставить("Дата"                 , Объект.Дата);
	ПараметрыОбъекта.Вставить("ДоговорКонтрагента"   , Объект.ДоговорКонтрагента);
	ПараметрыОбъекта.Вставить("Контрагент"           , Объект.Контрагент);
	ПараметрыОбъекта.Вставить("СчетУчета"            , Объект.СчетУчетаРасчетовСКонтрагентом);
	ПараметрыОбъекта.Вставить("Организация"          , Объект.Организация);
	ПараметрыОбъекта.Вставить("ОстаткиОбороты"       , "Кт");
	ПараметрыОбъекта.Вставить("ТипыДокументов"       , "Метаданные.Документы.ВозвратТоваровОтПокупателя.Реквизиты.Сделка.Тип");

	ПараметрыФормы = Новый Структура("ПараметрыОбъекта", ПараметрыОбъекта);
	ОткрытьФорму("Документ.ДокументРасчетовСКонтрагентом.ФормаВыбора", ПараметрыФормы, Элемент);
		
КонецПроцедуры

&НаКлиенте
Процедура ЦеныИВалютаНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОбработатьИзмененияПоКнопкеЦеныИВалюты();

КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(
		Элемент.ТекстРедактирования,
		ЭтотОбъект,
		"Объект.Комментарий"
	);

КонецПроцедуры

&НаКлиенте
Процедура ЕстьАвансДо01042011ПриИзменении(Элемент)
	
	УправлениеФормой(ЭтаФорма);
	
	Если НЕ Объект.ЕстьАвансДо01042011 Тогда
		
		Объект.СуммаВДВРПоАвансуДо01042011 = 0;	
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СкладНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка) // ИНАГРО
	
	СтандартнаяОбработка = Ложь;
	
	Если Объект.ИНАГРО_ВидПоступления = ПредопределенноеЗначение("Перечисление.ИНАГРО_ВидыПоступленияТоваров.НаСклад") Тогда
		ОткрытьФорму("Справочник.Склады.Форма.ФормаВыбора", , ЭтаФорма, УникальныйИдентификатор, , , , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);		
	Иначе
		ОткрытьФормуВыбораПриходныйОрдерНаТоварыДляЗаполнения();		
	КонецЕсли;
	
КонецПроцедуры

// ИНАГРО++
&НаКлиенте
Процедура ИНАГРО_ВидПоступленияПриИзменении(Элемент)
	
	УстановитьТипСкладаОрдера(ЭтаФорма);
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры 

&НаКлиенте
Процедура ИНАГРО_ОрдерВТЧПриИзменении(Элемент)
	
	Если Объект.ИНАГРО_ОрдерВТЧ Тогда
		Объект.Склад = ПредопределенноеЗначение("Документ.ИНАГРО_ПриходныйОрдерНаТовары.ПустаяСсылка");
	КонецЕсли; 

	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицыФормыТовары

&НаКлиенте
Процедура ТоварыПриИзменении(Элемент)

	
	ОбновитьИтоги(ЭтаФорма);

	// Авторасчет НДС
	ПерерасчетПроизведен = Ложь;

КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если НоваяСтрока И ОтменаРедактирования Тогда
		ОбновитьИтоги(ЭтаФорма);
		// Авторасчет НДС
		ПерерасчетПроизведен = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)

	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	ДанныеСтрокиТаблицы = Новый Структура(
		"Номенклатура, Количество,
		|Цена, Сумма, СтавкаНДС, СуммаНДС,
		|СчетУчетаБУ, ПереданныеСчетУчетаБУ,
		|ЕдиницаИзмерения, Коэффициент,		
		|СуммаБезСкидки, СуммаСкидки,
		|СхемаРеализации, НалоговоеНазначение, НалоговоеНазначениеДоходовИЗатрат,
		|Всего");
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, ТекущиеДанные);
	
	ДанныеОбъекта = Новый Структура(
		"Дата, ВидОперации, Организация, Склад, Дата, ТипЦен, СуммаВключаетНДС,
		|ВалютаДокумента, КурсВзаиморасчетов, КратностьВзаиморасчетов");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
	ТоварыНоменклатураПриИзмененииНаСервере(ДанныеСтрокиТаблицы, ДанныеОбъекта);
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтрокиТаблицы);

КонецПроцедуры

&НаКлиенте
Процедура ТоварыКоличествоПриИзменении(Элемент)

	ПриИзмененииКоличествоЦена("Товары");

КонецПроцедуры

&НаКлиенте
Процедура ТоварыЕдиницаИзмеренияПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	ДанныеСтрокиТаблицы = Новый Структура(
		"Номенклатура, Количество,
		|Цена, Сумма, СтавкаНДС, СуммаНДС,
		|СчетУчетаБУ, ПереданныеСчетУчетаБУ,
		|ЕдиницаИзмерения, Коэффициент,
		|СуммаБезСкидки, СуммаСкидки,
		|СхемаРеализации, НалоговоеНазначение, НалоговоеНазначениеДоходовИЗатрат,
		|Всего");
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, ТекущиеДанные);

	ДанныеОбъекта = Новый Структура(
		"Дата, ВидОперации, Организация, Склад, Дата, ТипЦен, СуммаВключаетНДС,
		|ВалютаДокумента, КурсВзаиморасчетов, КратностьВзаиморасчетов");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
	ТоварыЕдиницаИзмеренияПриИзмененииНаСервере(
		ДанныеСтрокиТаблицы, ДанныеОбъекта);
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтрокиТаблицы);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЦенаПриИзменении(Элемент)

	ПриИзмененииКоличествоЦена("Товары");

КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаБезСкидкиПриИзменении(Элемент)
	
	ОбработкаТабличныхЧастейКлиентСервер.ПриИзмененииСуммаБезСкидки(ЭтаФорма, "Товары");
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаСкидкиПриИзменении(Элемент)
	
	ОбработкаТабличныхЧастейКлиентСервер.ПриИзмененииСуммаСкидки(ЭтаФорма, "Товары");
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаСкидкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбработкаТабличныхЧастейКлиентСервер.СуммаСкидкиНачалоВыбора(ЭтаФорма, "Товары", Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаПриИзменении(Элемент)

	ПриИзмененииСумма("Товары");

КонецПроцедуры

&НаКлиенте
Процедура ТоварыСтавкаНДСПриИзменении(Элемент)

	ПриИзмененииСтавкаНДС("Товары");

КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаНДСПриИзменении(Элемент)

	ПриИзмененииСуммаНДС("Товары");

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицыФормыТовары

&НаКлиенте
Процедура ВозвратнаяТараПриИзменении(Элемент)

	ЕстьВозвратнаяТара = Объект.ВозвратнаяТара.Количество() > 0;

КонецПроцедуры

&НаКлиенте
Процедура ВозвратнаяТараНоменклатураПриИзменении(Элемент)

	ТекущиеДанные = Элементы.ВозвратнаяТара.ТекущиеДанные;
	
	ДанныеСтрокиТаблицы = Новый Структура(
		"Номенклатура, Количество,
		|Цена, Сумма, СчетУчетаБУ,
		|СхемаРеализации, НалоговоеНазначение, НалоговоеНазначениеДоходовИЗатрат");
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, ТекущиеДанные);
	
	ДанныеОбъекта = Новый Структура(
		"Дата, ВидОперации, Организация, Склад, Дата, ТипЦен, СуммаВключаетНДС,
		|ВалютаДокумента, КурсВзаиморасчетов, КратностьВзаиморасчетов");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
	ВозвратнаяТараНоменклатураПриИзмененииНаСервере(ДанныеСтрокиТаблицы, ДанныеОбъекта);
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтрокиТаблицы);

КонецПроцедуры

&НаКлиенте
Процедура ВозвратнаяТараКоличествоПриИзменении(Элемент)

	ПриИзмененииКоличествоЦена("ВозвратнаяТара");

КонецПроцедуры

&НаКлиенте
Процедура ВозвратнаяТараЦенаПриИзменении(Элемент)

	ПриИзмененииКоличествоЦена("ВозвратнаяТара");

КонецПроцедуры

&НаКлиенте
Процедура ВозвратнаяТараСуммаПриИзменении(Элемент)

	ПриИзмененииСумма("ВозвратнаяТара");

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ДобавитьИзРеализации(Команда)
	
	ЗаполнитьТабличнуюЧастьПоРеализации("Товары", "Добавить");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоРеализации(Команда)
	
	ЗаполнитьТабличнуюЧастьПоРеализации("Товары", "Заполнить");
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзРеализацииТара(Команда)
	
	ЗаполнитьТабличнуюЧастьПоРеализации("ВозвратнаяТара", "Добавить");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоРеализацииТара(Команда)
	
	ЗаполнитьТабличнуюЧастьПоРеализации("ВозвратнаяТара", "Заполнить");
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборТовары(Команда)
	
	ПараметрыПодбора = ПолучитьПараметрыПодбора("Товары");
	Если ПараметрыПодбора <> Неопределено Тогда
		ОткрытьФорму("Обработка.ПодборНоменклатуры.Форма.Форма", ПараметрыПодбора,
			ЭтаФорма, УникальныйИдентификатор);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборВозвратнаяТара(Команда)
	
	ПараметрыПодбора = ПолучитьПараметрыПодбора("ВозвратнаяТара");
	Если ПараметрыПодбора <> Неопределено Тогда
		ОткрытьФорму("Обработка.ПодборНоменклатуры.Форма.Форма", ПараметрыПодбора,
			ЭтаФорма, УникальныйИдентификатор);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьТовары(Команда)
	
	ПараметрыФормы = ПолучитьПараметрыОбработкиТабличнойЧастиТовары();
	
	Если ПараметрыФормы <> Неопределено Тогда
		ОткрытьФорму("Обработка.ИзменениеТаблицыТоваров.Форма.Форма", ПараметрыФормы,
			ЭтаФорма, УникальныйИдентификатор);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьСтроки(Команда)
	
 	ИмяТаблицы = ПолучитьИмяТекущейТабличнойЧасти();
	Если ПустаяСтрока(ИмяТаблицы) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	КоличествоСтрок = Элементы[ИмяТаблицы].ВыделенныеСтроки.Количество();
	Если КоличествоСтрок = 0 Тогда
		
		Возврат;
		
	КонецЕсли;
	СкопироватьСтрокиНаСервере(ИмяТаблицы);
	ОбработкаТабличныхЧастейКлиент.ОповеститьОКопированииСтрокВБуферОбмена(ЭтотОбъект, КоличествоСтрок);
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьСтроки(Команда)
	
	ИмяТаблицы = ПолучитьИмяТекущейТабличнойЧасти();
	Если ПустаяСтрока(ИмяТаблицы) Тогда
		
		Возврат;
		
	КонецЕсли;
	КоличествоСтрок = ВставитьСтрокиНаСервере(ИмяТаблицы);
	ОбработкаТабличныхЧастейКлиент.ОповеститьОВставкеСтрокИзБуфераОбмена(ЭтотОбъект, КоличествоСтрок);
	
КонецПроцедуры

// ИНАГРО++
&НаКлиенте
Процедура ЗаполнитьПоПриходномуОрдеруТовары(Команда)
			
	ОткрытьФормуВыбораПриходныйОрдерНаТовары("Товары", "Заполнить"); 		
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзПриходногоОрдераТовары(Команда)
	
	ОткрытьФормуВыбораПриходныйОрдерНаТовары("Товары", "Добавить");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоПриходномуОрдеруТара(Команда)
	
	ОткрытьФормуВыбораПриходныйОрдерНаТовары("ВозвратнаяТара", "Заполнить"); 
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзПриходногоОрдераТара(Команда)
	
	ОткрытьФормуВыбораПриходныйОрдерНаТовары("ВозвратнаяТара", "Заполнить");
	
КонецПроцедуры 

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ОбработатьИзмененияПоКнопкеЦеныИВалюты(ПересчитатьЦены = Ложь,
								ПерезаполнитьЦены = Ложь,
								КурсВзаиморасчетов = Неопределено,
								КратностьВзаиморасчетов = Неопределено,
								ТипЦен = Неопределено)

	// Формирование структуры параметров для заполнения формы "Цены и Валюта".
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ВалютаДокумента"     , Объект.ВалютаДокумента);
	СтруктураПараметров.Вставить("Курс"                , ?(КурсВзаиморасчетов = Неопределено, Объект.КурсВзаиморасчетов, КурсВзаиморасчетов));
	СтруктураПараметров.Вставить("Кратность"           , ?(КратностьВзаиморасчетов = Неопределено, Объект.КратностьВзаиморасчетов, КратностьВзаиморасчетов));
	СтруктураПараметров.Вставить("Контрагент"          , Объект.Контрагент);
	СтруктураПараметров.Вставить("Договор"             , Объект.ДоговорКонтрагента);
	СтруктураПараметров.Вставить("Организация"         , Объект.Организация);
	СтруктураПараметров.Вставить("ДатаДокумента"       , Объект.Дата);
	СтруктураПараметров.Вставить("ПерезаполнитьЦены"   , ПерезаполнитьЦены);
	СтруктураПараметров.Вставить("ПересчитатьЦены"     , ПересчитатьЦены);
	СтруктураПараметров.Вставить("БылиВнесеныИзменения", Ложь);
	СтруктураПараметров.Вставить("ТипЦен"              , ?(ТипЦен = Неопределено, Объект.ТипЦен, ТипЦен));
	СтруктураПараметров.Вставить("СуммаВключаетНДС",   Объект.СуммаВключаетНДС);
	СтруктураПараметров.Вставить("АвторасчетНДС"       , Объект.АвторасчетНДС);
	СтруктураПараметров.Вставить("ПлательщикНДС"       , ПлательщикНДС);

	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ОбработатьИзмененияПоКнопкеЦеныИВалютыЗавершение", ЭтотОбъект);
	
	ОткрытьФорму("ОбщаяФорма.ФормаЦеныИВалюта", СтруктураПараметров,,,,,ОповещениеОЗакрытии);

КонецПроцедуры

&НаКлиенте
Процедура ОбработатьИзмененияПоКнопкеЦеныИВалютыЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	СтруктураЦеныИВалюта = РезультатЗакрытия;
	
	Если ТипЗнч(СтруктураЦеныИВалюта) = Тип("Структура") И СтруктураЦеныИВалюта.БылиВнесеныИзменения Тогда

		ВалютаДоИзменения 	= Объект.ВалютаДокумента;
		КурсДоИзменения 	= Объект.КурсВзаиморасчетов;
		КратностьДоИзменения= Объект.КратностьВзаиморасчетов;
		
		Объект.ТипЦен                  = СтруктураЦеныИВалюта.ТипЦен;
		Объект.ВалютаДокумента         = СтруктураЦеныИВалюта.ВалютаДокумента;
		Объект.КурсВзаиморасчетов      = СтруктураЦеныИВалюта.Курс;
		Объект.КратностьВзаиморасчетов = СтруктураЦеныИВалюта.Кратность;
		Объект.СуммаВключаетНДС        = СтруктураЦеныИВалюта.СуммаВключаетНДС;
		Объект.АвторасчетНДС           = СтруктураЦеныИВалюта.АвторасчетНДС;
		
		Модифицированность = Истина;
		
		ПересчитатьНДС = СтруктураЦеныИВалюта.СуммаВключаетНДС <> СтруктураЦеныИВалюта.ПредСуммаВключаетНДС;
		Если СтруктураЦеныИВалюта.ПерезаполнитьЦены ИЛИ СтруктураЦеныИВалюта.ПересчитатьЦены ИЛИ ПересчитатьНДС Тогда
			ЗаполнитьРассчитатьСуммы(
				ВалютаДоИзменения,
				КурсДоИзменения,
				КратностьДоИзменения, 
				СтруктураЦеныИВалюта.ПерезаполнитьЦены, 
				СтруктураЦеныИВалюта.ПересчитатьЦены, 
				ПересчитатьНДС);
		КонецЕсли;
			
		Если Объект.АвторасчетНДС Тогда
			// соответствие для хранения погрешностей округлений
			ПогрешностиОкругления = Новый Соответствие();
			// пересчет сумм НДС с учетом ошибок округления
			УчетНДСКлиентСервер.ПересчитатьНДСсУчетомПогрешностиОкругления(Объект.Товары, Объект.Ссылка, Объект.СуммаВключаетНДС, ПогрешностиОкругления, ?(Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийВозвратТоваровОтПокупателя.Оборудование"), "Оборудование", "Товары"), Строка(Объект.ВалютаДокумента));
			// Установим признак перерасчета сумм НДС
			ПерерасчетПроизведен = ИСТИНА;
			ЗаполнитьДобавленныеКолонкиТаблиц();
			ОбновитьИтоги(ЭтотОбъект);
		КонецЕсли;
			
		СформироватьНадписьЦеныИВалюта(ЭтаФорма);
				
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРассчитатьСуммы(Знач ВалютаДоИзменения, КурсДоИзменения, КратностьДоИзменения, ПерезаполнитьЦены = Ложь, ПересчитатьЦены = Ложь, ПересчитатьНДС = Ложь)

	Если ПерезаполнитьЦены Тогда
		
		СписокНоменклатуры	= ОбщегоНазначения.ВыгрузитьКолонку(Объект.Товары, "Номенклатура", Истина);
		ОбщегоНазначения.ЗаполнитьМассивУникальнымиЗначениями(СписокНоменклатуры,
			ОбщегоНазначения.ВыгрузитьКолонку(Объект.ВозвратнаяТара, "Номенклатура"));
		
		ТаблицаЦенНоменклатуры	= Ценообразование.ПолучитьТаблицуЦенНоменклатуры(
			СписокНоменклатуры,
			Объект.ТипЦен,
			Объект.Дата);
		
	ИначеЕсли ПересчитатьЦены Тогда
		Если КурсДоИзменения <> 0 И КратностьДоИзменения <> 0 Тогда
			СтруктураКурса = Новый Структура("Курс, Кратность", КурсДоИзменения, КратностьДоИзменения);
		Иначе
			СтруктураКурса = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаДоИзменения, Объект.Дата);
		КонецЕсли;
	КонецЕсли;

	// Признак того, что цена включает НДС, хранится в реквизите ЦенаВключаетНДС типа цен
	Если ЗначениеЗаполнено(Объект.ТипЦен) Тогда
		ЦенаВключаетНДС = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ТипЦен, "ЦенаВключаетНДС");
	Иначе
		ЦенаВключаетНДС = Ложь;
	КонецЕсли;

	Для Каждого Строка Из Объект.Товары Цикл
		Префикс = "Товары[" + Формат(Строка.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].";
		ЗаполнитьРассчитатьСуммыВСтроке(Строка, ТаблицаЦенНоменклатуры, ВалютаДоИзменения, СтруктураКурса, ПерезаполнитьЦены,
									   ПересчитатьЦены, ПересчитатьНДС, Истина, 0, Префикс, ЦенаВключаетНДС, Истина);
	КонецЦикла;
	Для Каждого Строка Из Объект.ВозвратнаяТара Цикл
		Префикс = "ВозвратнаяТара[" + Формат(Строка.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].";
		ЗаполнитьРассчитатьСуммыВСтроке(Строка, ТаблицаЦенНоменклатуры, ВалютаДоИзменения, СтруктураКурса, ПерезаполнитьЦены,
									   ПересчитатьЦены, ПересчитатьНДС, Ложь, 0, Префикс, ЦенаВключаетНДС, Ложь);
	КонецЦикла;

	ОбновитьИтоги(ЭтаФорма);
	
	Если ПересчитатьНДС Тогда
		УстановитьЗаголовкиКолонок();
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРассчитатьСуммыВСтроке(Строка, ТаблицаЦенНоменклатуры, ВалютаПередИзменением, СтруктураКурса, ПерезаполнитьЦены, ПересчитатьЦены, ПересчитатьНДС,
										ЕстьНДС, ЗначениеПустогоКоличества, Префикс, ЦенаВключаетНДС, ЕстьСкидки)

	СуммаСкидки = 0;

	Если ПерезаполнитьЦены Тогда
		
		НайденнаяСтрока	= ТаблицаЦенНоменклатуры.Найти(Строка.Номенклатура, "Номенклатура");
		Если НайденнаяСтрока <> Неопределено Тогда
			Цена = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(
				НайденнаяСтрока.Цена, НайденнаяСтрока.Валюта, Объект.ВалютаДокумента, НайденнаяСтрока.Курс,
				Объект.КурсВзаиморасчетов, НайденнаяСтрока.Кратность, Объект.КратностьВзаиморасчетов);
			Если ЕстьСкидки Тогда
				СуммаСкидки = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(
					Строка.СуммаСкидки, НайденнаяСтрока.Валюта, Объект.ВалютаДокумента, НайденнаяСтрока.Курс,
					Объект.КурсВзаиморасчетов, НайденнаяСтрока.Кратность, Объект.КратностьВзаиморасчетов);				
			КонецЕсли;
		Иначе
			Цена = 0;
			Если ЕстьСкидки Тогда
 				СуммаСкидки = 0;
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		Если ПересчитатьЦены Тогда

			Цена = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(
				Строка.Цена, ВалютаПередИзменением, Объект.ВалютаДокумента, СтруктураКурса.Курс,
				Объект.КурсВзаиморасчетов, СтруктураКурса.Кратность, Объект.КратностьВзаиморасчетов);

			Если ЕстьСкидки Тогда
				СуммаСкидки = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(
					Строка.СуммаСкидки, ВалютаПередИзменением, Объект.ВалютаДокумента, СтруктураКурса.Курс,
					Объект.КурсВзаиморасчетов, СтруктураКурса.Кратность, Объект.КратностьВзаиморасчетов);
			КонецЕсли;
		Иначе
			Цена = Строка.Цена;
			Если ЕстьСкидки Тогда
				СуммаСкидки = Строка.СуммаСкидки;
			КонецЕсли;
		КонецЕсли;
		// Признак того, что цена включает НДС, хранится в реквизите СуммаВключаетНДС документа
		ЦенаВключаетНДС = ?(ПересчитатьНДС, НЕ Объект.СуммаВключаетНДС, Объект.СуммаВключаетНДС);
	КонецЕсли;

	Если ЕстьНДС Тогда
		Строка.Цена     = УчетНДСКлиентСервер.ПересчитатьЦенуПриИзмененииФлаговНалогов(Цена, 
								ЦенаВключаетНДС, Объект.СуммаВключаетНДС, УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(Строка.СтавкаНДС));
		СуммаБезСкидки = Строка.Цена * ?(Строка.Количество = 0, ЗначениеПустогоКоличества, Строка.Количество);
		Если ЕстьСкидки Тогда
			Строка.СуммаБезСкидки = СуммаБезСкидки;
			Если (СуммаСкидки <> 0) И (Цена <> Строка.Цена) И (Цена <> 0) Тогда
				СуммаСкидки = Окр(СуммаСкидки * Строка.Цена / Цена, 2, 1);
			КонецЕсли;
			Строка.СуммаСкидки = СуммаСкидки;
		КонецЕсли;
		Строка.Сумма = СуммаБезСкидки - СуммаСкидки;
		Строка.СуммаНДС = УчетНДСКлиентСервер.РассчитатьСуммуНДС(Строка.Сумма, Объект.СуммаВключаетНДС,
								УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(Строка.СтавкаНДС));
		Строка.Всего 	= Строка.Сумма + ?(Объект.СуммаВключаетНДС, 0, Строка.СуммаНДС);
	Иначе
		Строка.Цена  = Цена;
		СуммаБезСкидки = Строка.Цена * ?(Строка.Количество = 0, ЗначениеПустогоКоличества, Строка.Количество);
		Если ЕстьСкидки Тогда
			Строка.СуммаБезСкидки = СуммаБезСкидки;
			Строка.СуммаСкидки = СуммаСкидки;
		КонецЕсли;
		Строка.Сумма = СуммаБезСкидки - СуммаСкидки;
	КонецЕсли;

КонецПроцедуры

// Серверная обработка изменения реквизитов:

&НаСервере
Процедура ВидОперацииПриИзмененииНаСервере()
	
	ВидОперацииОбработатьИзменение();
	
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаСервере
Процедура ВидОперацииОбработатьИзменение()

	
	МассивВидовДоговоров = ПолучитьМассивВидовДоговоров(Объект.ВидОперации);

	Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		Если МассивВидовДоговоров.Найти(Объект.ДоговорКонтрагента.ВидДоговора) = Неопределено Тогда
			Объект.ДоговорКонтрагента = Неопределено;
		КонецЕсли;
	КонецЕсли;


	Если ЗначениеЗаполнено(Объект.Контрагент) И ЗначениеЗаполнено(Объект.Организация) Тогда
		БухгалтерскийУчетПереопределяемый.УстановитьДоговорКонтрагента(Объект.ДоговорКонтрагента,
			Объект.Контрагент, Объект.Организация, МассивВидовДоговоров);
	КонецЕсли;


	УстановитьПараметрыВыбора(ЭтаФорма);
	
	УстановитьПараметрыВыбораДокументаОтгрузки(ЭтаФорма);

	ДоговорКонтрагентаПриИзмененииНаСервере();

КонецПроцедуры

&НаСервере
Процедура ДатаПриИзмененииНаСервере()
	
	ДатаОбработатьИзменение();
	
	
	УправлениеФормой(ЭтаФорма);
	УстановитьЗаголовкиКолонок();
	
КонецПроцедуры

&НаСервере
Процедура ДатаОбработатьИзменение()
	
	ПредыдущаяОрганизацияПлательщикНДС = ПлательщикНДС;

	УстановитьФункциональныеОпцииФормы();
	
	// Если изменился статус плательщика НДС необходимо перезаполнить ставки НДС
	Если ПредыдущаяОрганизацияПлательщикНДС <> ПлательщикНДС Тогда
		ПересчитатьСуммыПриИзмененииПризнакаПлательщикНДС();
	КонецЕсли;
	
	Если (Объект.ВалютаДокумента <> ВалютаРегламентированногоУчета) Тогда
		СтруктураКурсаДокумента        = РаботаСКурсамиВалют.ПолучитьКурсВалюты(Объект.ВалютаДокумента, Объект.Дата);
		Объект.КурсВзаиморасчетов      = СтруктураКурсаДокумента.Курс;
		Объект.КратностьВзаиморасчетов = СтруктураКурсаДокумента.Кратность;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()

	ПредыдущаяОрганизацияПлательщикНДС = ПлательщикНДС;
	
	УстановитьФункциональныеОпцииФормы();
	
	// Если изменился статус плательщика НДС необходимо перезаполнить ставки НДС
	Если ПредыдущаяОрганизацияПлательщикНДС <> ПлательщикНДС Тогда
		ПересчитатьСуммыПриИзмененииПризнакаПлательщикНДС();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
		КонтрагентОбработатьИзменение();
	КонецЕсли;
	
	
	ЗаполнитьСчетаУчетаВТабличнойЧастиНаСервере();
	
	УправлениеФормой(ЭтаФорма);
	УстановитьЗаголовкиКолонок();
	УстановитьПараметрыВыбораДокументаОтгрузки(ЭтаФорма);

КонецПроцедуры

&НаСервере
Процедура ДокументОтгрузкиПриИзмененииНаСервере()
	
	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		
		Объект.Организация = Объект.ДокументОтгрузки.Организация;
		ОрганизацияПриИзмененииНаСервере();
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Склад) Тогда
		
		Объект.Склад = Объект.ДокументОтгрузки.Склад;
		СкладПриИзмененииНаСервере();
		
	КонецЕсли;
	
	Если ОбщегоНазначенияБП.ЕстьРеквизитДокумента("Контрагент", Объект.ДокументОтгрузки.Метаданные()) И НЕ ЗначениеЗаполнено(Объект.Контрагент) Тогда
		
		Объект.Контрагент = Объект.ДокументОтгрузки.Контрагент;
		
		// При подстановке контрагента сделка очищается.
		// Сохраняем значение для последующей подстановки.
		ТекущееЗначение = Объект.Сделка;
		
		КонтрагентОбработатьИзменение();
		
		Объект.Сделка = ТекущееЗначение;		
		
	КонецЕсли;
	
	Если ОбщегоНазначенияБП.ЕстьРеквизитДокумента("ДоговорКонтрагента", Объект.ДокументОтгрузки.Метаданные()) И НЕ ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		
		Объект.ДоговорКонтрагента = Объект.ДокументОтгрузки.ДоговорКонтрагента;
		
		// При подстановке договора сделка очищается.
		// Сохраняем значение для последующей подстановки.
		ТекущееЗначение = Объект.Сделка;
		
		ДоговорКонтрагентаОбработатьИзменение();
		
		Объект.Сделка = ТекущееЗначение;
		
	КонецЕсли;
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура СкладПриИзмененииНаСервере()
	
	Если Объект.ИНАГРО_ВидПоступления = Перечисления.ИНАГРО_ВидыПоступленияТоваров.ПоОрдеру Тогда // ИНАГРО
		Если ЗначениеЗаполнено(Объект.Склад) И НЕ ЗначениеЗаполнено(Объект.Контрагент) Тогда
			Объект.Контрагент = Объект.Склад.Контрагент;
			КонтрагентПриИзмененииНаСервере();
		КонецЕсли;
	КонецЕсли;

	СвойстваСклада = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		Объект.Склад, "ТипСклада, ТипЦенРозничнойТорговли");
	ТипЦенСклада   = СвойстваСклада.ТипЦенРозничнойТорговли;
	ТипСклада      = СвойстваСклада.ТипСклада;
	
	
	ЗаполнитьСчетаУчетаВТабличнойЧастиНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСчетаУчетаВТабличнойЧастиНаСервере(ИмяТабличнойЧасти = "")

	Если ПустаяСтрока(ИмяТабличнойЧасти) ИЛИ ИмяТабличнойЧасти = "Товары" Тогда
		Документы.ВозвратТоваровОтПокупателя.ЗаполнитьСчетаУчетаВТабличнойЧасти(Объект, "Товары");
		ЗаполнитьДобавленныеКолонкиТаблиц();
	КонецЕсли;
	
	Если ПустаяСтрока(ИмяТабличнойЧасти) ИЛИ ИмяТабличнойЧасти = "ВозвратнаяТара" Тогда
		Документы.ВозвратТоваровОтПокупателя.ЗаполнитьСчетаУчетаВТабличнойЧасти(Объект, "ВозвратнаяТара");
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура КонтрагентПриИзмененииНаСервере()
	
	КонтрагентОбработатьИзменение();
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура КонтрагентОбработатьИзменение()

	БухгалтерскийУчетПереопределяемый.УстановитьДоговорКонтрагента(
		Объект.ДоговорКонтрагента, Объект.Контрагент, Объект.Организация, 
		ПолучитьМассивВидовДоговоров(Объект.ВидОперации));

	Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		ДоговорКонтрагентаОбработатьИзменение();
	КонецЕсли;
	
	УстановитьПараметрыВыбораДокументаОтгрузки(ЭтаФорма);

КонецПроцедуры

&НаСервере
Процедура ДоговорКонтрагентаПриИзмененииНаСервере()
	
	ДоговорКонтрагентаОбработатьИзменение();
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ДоговорКонтрагентаОбработатьИзменение()
	
	ВалютаДоИзменения = Объект.ВалютаДокумента;
	КурсДоИзменения   = Объект.КурсВзаиморасчетов;
	КратностьДоИзменения   		= Объект.КратностьВзаиморасчетов;
	ТипЦенДоИзменения 			= Объект.ТипЦен;
	СуммаВключаетНДСДоИзменения = Объект.СуммаВключаетНДС;
	
	Объект.Сделка = Неопределено;
	
	ДоговорУказан     = ЗначениеЗаполнено(Объект.ДоговорКонтрагента);
	РеквизитыДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		Объект.ДоговорКонтрагента, "ВалютаВзаиморасчетов, Владелец, ТипЦен, ВидДоговора, СложныйНалоговыйУчет, ВедениеВзаиморасчетов");

	Если ДоговорУказан Тогда
		ВалютаВзаиморасчетов   = РеквизитыДоговора.ВалютаВзаиморасчетов;
		Объект.ВалютаДокумента = ВалютаВзаиморасчетов;
		Если НЕ ЗначениеЗаполнено(Объект.Контрагент) Тогда
			Объект.Контрагент = РеквизитыДоговора.Владелец;
		КонецЕсли;
	Иначе
		Объект.ВалютаДокумента = ВалютаРегламентированногоУчета;
	КонецЕсли;
	
	Если ВалютаДоИзменения <> Объект.ВалютаДокумента Тогда
		СтруктураКурсаДокумента        = РаботаСКурсамиВалют.ПолучитьКурсВалюты(Объект.ВалютаДокумента, Объект.Дата);
		Объект.КурсВзаиморасчетов      = СтруктураКурсаДокумента.Курс;
		Объект.КратностьВзаиморасчетов = СтруктураКурсаДокумента.Кратность;
	КонецЕсли;
	
	Если ДоговорУказан И ЗначениеЗаполнено(РеквизитыДоговора.ТипЦен) Тогда
		Объект.ТипЦен           = РеквизитыДоговора.ТипЦен;
		Объект.СуммаВключаетНДС = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(РеквизитыДоговора.ТипЦен, "ЦенаВключаетНДС");;
	КонецЕсли;
	
	ПересчитатьНДС = Объект.СуммаВключаетНДС <> СуммаВключаетНДСДоИзменения;
	ПересчитатьЦены = Объект.ВалютаДокумента <> ВалютаДоИзменения
		ИЛИ Объект.КурсВзаиморасчетов <> КурсДоИзменения
		ИЛИ Объект.ТипЦен <> ТипЦенДоИзменения;
	
	Если ЕстьСтрокиВТабличныхЧастях() И (ПересчитатьЦены ИЛИ ПересчитатьНДС) Тогда
		ЗаполнитьРассчитатьСуммы(ВалютаДоИзменения, КурсДоИзменения, КратностьДоИзменения, Ложь, ПересчитатьЦены, ПересчитатьНДС);
		ОбновитьИтоги(ЭтаФорма);
	ИначеЕсли ПересчитатьНДС Тогда
		УстановитьЗаголовкиКолонок();
	КонецЕсли;
	
	ЭтоКомиссия = ДоговорУказан И РеквизитыДоговора.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером;
	ВедениеВзаиморасчетовПоРасчетнымДокументам = ДоговорУказан И РеквизитыДоговора.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоРасчетнымДокументам;
	Внешнеэкономический                        = ДоговорУказан И РеквизитыДоговора.ВалютаВзаиморасчетов <> ВалютаРегламентированногоУчета;
	СложныйНалоговыйУчет                       = ДоговорУказан И РеквизитыДоговора.СложныйНалоговыйУчет;
	
	
	Документы.ВозвратТоваровОтПокупателя.ЗаполнитьСчетаУчетаРасчетов(Объект);
	
	УстановитьПараметрыВыбораДокументаОтгрузки(ЭтаФорма);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ТоварыНоменклатураПриИзмененииНаСервере(СтрокаТабличнойЧасти, Знач ДанныеОбъекта)

	СведенияОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОНоменклатуре(
		СтрокаТабличнойЧасти.Номенклатура, ДанныеОбъекта);
	Если СведенияОНоменклатуре = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаТабличнойЧасти.ЕдиницаИзмерения		= СведенияОНоменклатуре.БазоваяЕдиницаИзмерения;
	СтрокаТабличнойЧасти.Коэффициент			= СведенияОНоменклатуре.Коэффициент;
	СтрокаТабличнойЧасти.Цена					= СведенияОНоменклатуре.Цена;
	СтрокаТабличнойЧасти.СтавкаНДС				= СведенияОНоменклатуре.СтавкаНДС;
	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ДанныеОбъекта.СуммаВключаетНДС);
	
	Документы.ВозвратТоваровОтПокупателя.ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(
		ДанныеОбъекта, СтрокаТабличнойЧасти, "Товары", СведенияОНоменклатуре);
	
	ЗаполнитьДобавленныеКолонкиСтрокиТаблицыТовары(СтрокаТабличнойЧасти, ДанныеОбъекта.СуммаВключаетНДС);

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ТоварыЕдиницаИзмеренияПриИзмененииНаСервере(СтрокаТабличнойЧасти, Знач ДанныеОбъекта)

	ОбработкаТабличныхЧастей.ЗаполнитьКоэффициентТабЧасти(СтрокаТабличнойЧасти, ДанныеОбъекта, "Товары", Метаданные.Документы.ВозвратТоваровОтПокупателя);
	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ДанныеОбъекта.СуммаВключаетНДС);
	
	ЗаполнитьДобавленныеКолонкиСтрокиТаблицыТовары(СтрокаТабличнойЧасти, ДанныеОбъекта.СуммаВключаетНДС);

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ВозвратнаяТараНоменклатураПриИзмененииНаСервере(СтрокаТабличнойЧасти, Знач ДанныеОбъекта)

	СведенияОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОНоменклатуре(
		СтрокаТабличнойЧасти.Номенклатура, ДанныеОбъекта);
	Если СведенияОНоменклатуре = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаТабличнойЧасти.Цена = СведенияОНоменклатуре.Цена;
	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
	
	Документы.ВозвратТоваровОтПокупателя.ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(
		ДанныеОбъекта, СтрокаТабличнойЧасти, "ВозвратнаяТара", СведенияОНоменклатуре);

КонецПроцедуры

// Пересчеты реквизитов в строках табличных частей

&НаКлиенте
Процедура ПриИзмененииКоличествоЦена(ИмяТабЧасти)

	СтрокаТаблицы = Элементы[ИмяТабЧасти].ТекущиеДанные;
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТаблицы);

	Если СтрокаТаблицы.Свойство("СуммаНДС") Тогда
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТаблицы, Объект.СуммаВключаетНДС);
	КонецЕсли;

	Если СтрокаТаблицы.Свойство("Всего") Тогда
		СтрокаТаблицы.Всего = СтрокаТаблицы.Сумма + ?(Объект.СуммаВключаетНДС, 0, СтрокаТаблицы.СуммаНДС);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииСумма(ИмяТабЧасти)

	ОбработкаТабличныхЧастейКлиентСервер.ПриИзмененииСумма(ЭтаФорма, ИмяТабЧасти);

КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииСтавкаНДС(ИмяТабЧасти)

	СтрокаТаблицы = Элементы[ИмяТабЧасти].ТекущиеДанные;
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТаблицы, Объект.СуммаВключаетНДС);
	Если СтрокаТаблицы.Свойство("Всего") Тогда
		СтрокаТаблицы.Всего = СтрокаТаблицы.Сумма + ?(Объект.СуммаВключаетНДС, 0, СтрокаТаблицы.СуммаНДС);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииСуммаНДС(ИмяТабЧасти)

	СтрокаТаблицы = Элементы[ИмяТабЧасти].ТекущиеДанные;

	Если СтрокаТаблицы.Свойство("Всего") Тогда
		СтрокаТаблицы.Всего = СтрокаТаблицы.Сумма + ?(Объект.СуммаВключаетНДС, 0, СтрокаТаблицы.СуммаНДС);
	КонецЕсли;

КонецПроцедуры

// Внешний вид, содержание надписей и т.п.

&НаСервере
Процедура УстановитьСостояниеДокумента()
	
	СостояниеДокумента = ОбщегоНазначенияБП.СостояниеДокумента(Объект);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)

	Элементы = Форма.Элементы;
	Объект   = Форма.Объект;
	
	Элементы.ГруппаТовары.Заголовок =
		?(Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийВозвратТоваровОтПокупателя.Оборудование"),
			НСтр("ru='Оборудование';uk='Устаткування'"),
			НСтр("ru='Товары';uk='Товари'"));
			
	ТоварыНоменклатураПараметрыВыбора = Новый Массив;
	ТоварыНоменклатураПараметрыВыбора.Добавить(Новый ПараметрВыбора("Отбор.Услуга", Ложь)); 
	ТоварыНоменклатураПараметрыВыбора.Добавить(Новый ПараметрВыбора("Заголовок", Элементы.ГруппаТовары.Заголовок)); 
	Элементы.ТоварыНоменклатура.ПараметрыВыбора = Новый ФиксированныйМассив(ТоварыНоменклатураПараметрыВыбора);

	Элементы.ГруппаВозвратнаяТара.Видимость = Не Форма.Внешнеэкономический;
	
	Элементы.СчетУчетаРасчетовСКонтрагентом.Доступность = НЕ Форма.ЭтоКомиссия;

	Элементы.ГруппаСчетаУчетаРасчетов.Видимость = Форма.ПоказыватьВДокументахСчетаУчета;
	Элементы.СчетУчетаРасчетовПоТаре.Доступность  = Не Форма.Внешнеэкономический;
	
	Элементы.СчетУчетаНДС.Доступность               = РеализацияТоваровУслугФормыКлиентСервер.ИспользуетсяСчетУчетаНДС(Форма.ПлательщикНДС, Форма.ЭтоКомиссия, Объект.Дата);
	Элементы.СчетУчетаНДСПодтвержденный.Доступность = РеализацияТоваровУслугФормыКлиентСервер.ИспользуетсяСчетУчетаНДСПодтвержденный(Форма.ПлательщикНДС, Форма.ЭтоКомиссия, Объект.Дата, Форма.СложныйНалоговыйУчет);

	Элементы.ГруппаДополнительноНалоговыйУчет.Видимость = Форма.ПлательщикНалогаНаПрибыльДо2015;
	Элементы.ЕстьАвансДо01042011.Доступность 	   	 = НЕ Форма.ЭтоКомиссия;
	Элементы.СуммаВДВРПоАвансуДо01042011.Доступность = Объект.ЕстьАвансДо01042011 И НЕ Форма.ЭтоКомиссия;

	// Доступность взаимосвязанных полей
	Элементы.ДоговорКонтрагента.Доступность       = ЗначениеЗаполнено(Объект.Организация) И ЗначениеЗаполнено(Объект.Контрагент);
	Элементы.Сделка.Доступность                   = Форма.ВедениеВзаиморасчетовПоРасчетнымДокументам;
	
	Элементы.ИтогиВсего.Видимость                   = НЕ Форма.ЭтоКомиссия;
	Элементы.ВалютаДокументаИтогиВсего.Видимость    = НЕ Форма.ЭтоКомиссия;	
	Элементы.ИтогиВсегоНДС.Видимость                = НЕ Форма.ЭтоКомиссия И Форма.ПлательщикНДС;
	Элементы.ВалютаДокументаИтогиВсегоНДС.Видимость = НЕ Форма.ЭтоКомиссия И Форма.ПлательщикНДС;
	
	// ИНАГРО++
	ЭтоОборудование = Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеТоваровУслуг.Оборудование");
	ПоОрдеру        = Объект.ИНАГРО_ВидПоступления = ПредопределенноеЗначение("Перечисление.ИНАГРО_ВидыПоступленияТоваров.ПоОрдеру");
	ОрдерВТЧ        = Объект.ИНАГРО_ОрдерВТЧ;
	
	Элементы.ИНАГРО_ОрдерВТЧ.Видимость            = ПоОрдеру И НЕ ЭтоОборудование;
	
	Элементы.ТоварыИНАГРО_Ордер.Видимость         = ОрдерВТЧ;	
	Элементы.ВозвратнаяТараИНАГРО_Ордер.Видимость = ОрдерВТЧ;
	
	Элементы.ТоварыДобавитьИзПриходногоОрдераТовары.Доступность       = ОрдерВТЧ;
	Элементы.ВозвратнаяТараДобавитьИзПриходногоОрдераТара.Доступность = ОрдерВТЧ;
    // ИНАГРО--
	
	ОбновитьИтоги(Форма);
	СформироватьНадписьЦеныИВалюта(Форма);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьИтоги(Форма)

	Форма.ИтогиВсего = Форма.Объект.Товары.Итог("Всего");

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СформироватьНадписьЦеныИВалюта(Форма)
	
	Объект = Форма.Объект;
	СтруктураНадписи = Новый Структура(
		"ТипЦен, ВалютаДокумента, Курс, Кратность, ВалютаРегламентированногоУчета",
		Объект.ТипЦен,
		Объект.ВалютаДокумента,
		Объект.КурсВзаиморасчетов,
		Объект.КратностьВзаиморасчетов,
		Форма.ВалютаРегламентированногоУчета);
	Если Форма.ПлательщикНДС Тогда 
		СтруктураНадписи.Вставить("СуммаВключаетНДС", Объект.СуммаВключаетНДС);
		СтруктураНадписи.Вставить("АвторасчетНДС", 	  Объект.АвторасчетНДС);
	КонецЕсли;
	Форма.ЦеныИВалюта = ОбщегоНазначенияБПКлиентСервер.СформироватьНадписьЦеныИВалюта(СтруктураНадписи);

КонецПроцедуры 

&НаСервере
Процедура УстановитьЗаголовкиКолонок()
	
	ЗаголовокЦена = ?(ПлательщикНДС, ?(Объект.СуммаВключаетНДС, НСтр("ru='Цена с НДС';uk='Ціна з ПДВ'"), НСтр("ru='Цена без НДС';uk='Ціна без ПДВ'")), НСтр("ru='Цена';uk='Ціна'"));
	ЗаголовокСумма = ?(ПлательщикНДС, ?(Объект.СуммаВключаетНДС, НСтр("ru='Сумма с НДС';uk='Сума з ПДВ'"), НСтр("ru='Сумма без НДС';uk='Сума без ПДВ'")), НСтр("ru='Сумма';uk='Сума'"));
	
	Элементы.ТоварыЦена.Заголовок = ЗаголовокЦена;
	Элементы.ТоварыСумма.Заголовок = ЗаголовокСумма;
	
КонецПроцедуры

// Заполнение документа данными документов-оснований:

&НаКлиенте
Процедура ЗаполнитьТабличнуюЧастьПоРеализации(ТабличнаяЧасть, СпособЗаполнения)
	
	// Оценочная стоимость возвратной тары учитывается в валюте взаиморасчетов по договору,
	// поэтому перед заполнением договор должен быть выбран.
	Если НЕ ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		ПоказатьПредупреждение(,НСтр("ru='Не выбран договор контрагента!';uk='Не обраний договір контрагента!'"));
		Возврат;
	Иначе
		Если НЕ ЗначениеЗаполнено(ВалютаВзаиморасчетов) Тогда
			ПоказатьПредупреждение(,НСтр("ru='Не выбрана валюта взаиморасчетов по договору!';uk='Не обрана валюта взаєморозрахунків за договором!'"));
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	// Если заполняем, то почистим ТЧ
	Если СпособЗаполнения = "Заполнить"
	   И Объект[ТабличнаяЧасть].Количество() > 0 Тогда
	   
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ТабличнаяЧасть", ТабличнаяЧасть);
		ДополнительныеПараметры.Вставить("СпособЗаполнения", СпособЗаполнения);
		
		ТекстВопроса = НСтр("ru='Перед заполнением табличная часть будет очищена. Заполнить?';uk='Перед заповненням таблична частина буде очищена. Заповнити?'");
		Оповещение = Новый ОписаниеОповещения("ВопросПередЗаполнениемТабличнойЧастиЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Да);
		
	Иначе
		
		ДополнитьТабличнуюЧастьПоРеализации(ТабличнаяЧасть, СпособЗаполнения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДополнитьТабличнуюЧастьПоРеализации(ТабличнаяЧасть, СпособЗаполнения)
	
	Если НЕ ЗначениеЗаполнено(Объект.ДокументОтгрузки) Тогда
		
		// Теперь нужно выбрать документ, по которому будем заполнять
		ПараметрыФормы = Новый Структура;
		Отбор = Новый Структура("ДоговорКонтрагента, Проведен", Объект.ДоговорКонтрагента, Истина);
		Если ЗначениеЗаполнено(Объект.Организация) Тогда
			Отбор.Вставить("Организация", Объект.Организация);
		КонецЕсли;
		ПараметрыФормы.Вставить("Отбор", Отбор);
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ТабличнаяЧасть", ТабличнаяЧасть);
		ДополнительныеПараметры.Вставить("СпособЗаполнения", СпособЗаполнения);
		
		ОповещениеОЗакрытии = Новый ОписаниеОповещения("ЗаполнитьТабличнуюЧастьПоРеализацииЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		
		ОткрытьФорму("Документ.РеализацияТоваровУслуг.ФормаВыбора", ПараметрыФормы, ЭтаФорма,,,, ОповещениеОЗакрытии);
		
	Иначе
		
		ДокументРеализации = Объект.ДокументОтгрузки;
		
		ЗаполнитьТабличнуюЧастьПоРеализацииПослеПолученияДокумента(ДокументРеализации, ТабличнаяЧасть, СпособЗаполнения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросПередЗаполнениемТабличнойЧастиЗавершение(Результат, ДополнительныеПараметры) Экспорт

	Если Результат = КодВозвратаДиалога.Да Тогда
		
		Объект[ДополнительныеПараметры.ТабличнаяЧасть].Очистить();
		ДополнитьТабличнуюЧастьПоРеализации(ДополнительныеПараметры.ТабличнаяЧасть, ДополнительныеПараметры.СпособЗаполнения);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТабличнуюЧастьПоРеализацииЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	ДокументРеализации = РезультатЗакрытия;
	
	Если НЕ ЗначениеЗаполнено(ДокументРеализации) Тогда
		Возврат; // ничего не выбрали.
	КонецЕсли;
	
	ТабличнаяЧасть   = ДополнительныеПараметры.ТабличнаяЧасть;
	СпособЗаполнения = ДополнительныеПараметры.СпособЗаполнения;
	
	ЗаполнитьТабличнуюЧастьПоРеализацииПослеПолученияДокумента(ДокументРеализации, ТабличнаяЧасть, СпособЗаполнения);
		
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТабличнуюЧастьПоРеализацииПослеПолученияДокумента(ДокументРеализации, ТабличнаяЧасть, СпособЗаполнения)
	
	ЭтаФорма.Модифицированность = Истина;
	
	// Вызываем процедуру заполнения.
	Если СпособЗаполнения = "Заполнить" Тогда
		
		Если ТабличнаяЧасть = "Товары" Тогда
			ЗаполнитьТоварыПоОснованию(ДокументРеализации);
		ИначеЕсли ТабличнаяЧасть = "ВозвратнаяТара" Тогда
			ЗаполнитьВозвратнуюТаруПоРеализации(ДокументРеализации);
		КонецЕсли;
		
	Иначе // При добавлении надо сворачивать дубли строк, аналогично подбору
		
		ДобавитьСтрокиТабличнойЧастиИзДокументаРеализации(ДокументРеализации, ТабличнаяЧасть);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТоварыПоОснованию(Знач ДокументОснование)
	
	ТоварыПоДаннымОснования = Документы.ВозвратТоваровОтПокупателя.ТоварыПоДаннымОснования(Объект, ДокументОснование);
	Если ТоварыПоДаннымОснования.Количество() > 0 Тогда
		Объект.Товары.Загрузить(ТоварыПоДаннымОснования);
		ЗаполнитьДобавленныеКолонкиТаблиц();
	КонецЕсли;
	
	ОбновитьИтоги(ЭтаФорма);
	
	// Авторасчет НДС 
	ПерерасчетПроизведен = Ложь;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьВозвратнуюТаруПоРеализации(ДокументОснование)
	
	ВозратнаяТараПоДаннымРеализации = Документы.ВозвратТоваровОтПокупателя.ВозратнаяТараПоДаннымРеализации(Объект, ДокументОснование);
	Если ВозратнаяТараПоДаннымРеализации.Количество() > 0 Тогда
		Объект.ВозвратнаяТара.Загрузить(ВозратнаяТараПоДаннымРеализации);
		ЗаполнитьДобавленныеКолонкиТаблиц();
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура ДобавитьСтрокиТабличнойЧастиИзДокументаРеализации(ДокументРеализации, ТабличнаяЧасть)
	
	Если ТабличнаяЧасть = "Товары" Тогда
		ТаблицаРеализации = Документы.ВозвратТоваровОтПокупателя.ТоварыПоДаннымОснования(Объект, ДокументРеализации);
	ИначеЕсли ТабличнаяЧасть = "ВозвратнаяТара" Тогда
		ТаблицаРеализации = Документы.ВозвратТоваровОтПокупателя.ВозратнаяТараПоДаннымРеализации(Объект, ДокументРеализации);
	Иначе
		// Остальные таб.части не обрабатываем
		Возврат;
	КонецЕсли;
	
	Если ТаблицаРеализации.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеОбъекта = Новый Структура("Дата, Организация, Склад, Реализация");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	ДанныеОбъекта.Реализация = Истина;
	
	// Обходим строки Реализации
	СтруктураОтбора = Новый Структура();
	
	Для каждого СтрокаРеализации Из ТаблицаРеализации Цикл
		
		// Ищем текущую позицию основания в табличной части документа возврата.
		// Если найдем - увеличим количество; не найдем - добавим новую строку.
		СтруктураОтбора.Вставить("Номенклатура", СтрокаРеализации.Номенклатура);
		
		СтрокаТабличнойЧасти = ОбработкаТабличныхЧастейКлиентСервер.НайтиСтрокуТабЧасти(Объект, ТабличнаяЧасть, СтруктураОтбора);
		Если СтрокаТабличнойЧасти <> Неопределено Тогда
			
			// Нашли, увеличиваем количество в первой найденной строке.
			СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + СтрокаРеализации.Количество;
			
			Если ТабличнаяЧасть = "Товары" Тогда
				// Рассчитать реквизиты табличной части.
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, Объект.СуммаВключаетНДС);
			ИначеЕсли ТабличнаяЧасть = "ВозвратнаяТара" Тогда
				// Рассчитать реквизиты табличной части.
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
			КонецЕсли;
			
		Иначе
			
			// Не нашли - добавляем новую строку.
			СтрокаТабличнойЧасти = Объект[ТабличнаяЧасть].Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтрокаРеализации);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ЗаполнитьДобавленныеКолонкиТаблиц();
	ОбновитьИтоги(ЭтаФорма);
	
	// Авторасчет НДС 
	ПерерасчетПроизведен = Ложь;

КонецПроцедуры

// Прочий функционал:

&НаСервере
Процедура ПодготовитьФормуНаСервере()
	
	ТекущаяДатаДокумента = Объект.Дата;
	ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	
	Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		ВалютаВзаиморасчетов = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
			Объект.ДоговорКонтрагента, "ВалютаВзаиморасчетов");
	КонецЕсли; 		
	
	// ИНАГРО++
	Если ЗначениеЗаполнено(Объект.Склад) Тогда
		Если Объект.ИНАГРО_ВидПоступления = Перечисления.ИНАГРО_ВидыПоступленияТоваров.ПоОрдеру Тогда
			СвойстваСклада = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.Склад.Склад, "ТипСклада, ТипЦенРозничнойТорговли");
		Иначе 
			СвойстваСклада = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.Склад, "ТипСклада, ТипЦенРозничнойТорговли");
		КонецЕсли;	
		ТипЦенСклада = СвойстваСклада.ТипЦенРозничнойТорговли;
		ТипСклада    = СвойстваСклада.ТипСклада;
	Иначе
		ТипЦенСклада = Справочники.ТипыЦенНоменклатуры.ПустаяСсылка();
		ТипСклада    = Перечисления.ТипыСкладов.ОптовыйСклад;
		УстановитьТипСкладаОрдера(ЭтаФорма); 
	КонецЕсли;
	// ИНАГРО--

	УстановитьФункциональныеОпцииФормы();
	
	УстановитьСостояниеДокумента();
	
	
	ПоказыватьВДокументахСчетаУчета = Истина;
	ЕстьВозвратнаяТара = Объект.ВозвратнаяТара.Количество() > 0;
	
	
	УстановитьПараметрыВыбора(ЭтаФорма);

	УстановитьПараметрыВыбораДокументаОтгрузки(ЭтаФорма);
	
	ЗаполнитьДобавленныеКолонкиТаблиц();
	
	РеквизитыДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.ДоговорКонтрагента, "ВидДоговора, ВалютаВзаиморасчетов, СложныйНалоговыйУчет, ВедениеВзаиморасчетов");
	ЭтоКомиссия          = (РеквизитыДоговора.ВидДоговора = ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СКомиссионером"));
	ВедениеВзаиморасчетовПоРасчетнымДокументам = (РеквизитыДоговора.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоРасчетнымДокументам);
    Внешнеэкономический  =                       ЗначениеЗаполнено(Объект.ДоговорКонтрагента) И (РеквизитыДоговора.ВалютаВзаиморасчетов <> ВалютаРегламентированногоУчета);
	СложныйНалоговыйУчет =                       ЗначениеЗаполнено(Объект.ДоговорКонтрагента) И (РеквизитыДоговора.СложныйНалоговыйУчет);
	
	// Нестандартное использование заголовка, вместо использования дополнительны декораций
	Элементы.СуммаВДВРПоАвансуДо01042011.Заголовок = " " + Строка(ВалютаРегламентированногоУчета); 
	
	
	УправлениеФормой(ЭтаФорма);
	
	УстановитьЗаголовкиКолонок();
	
	// Авторасчет НДС
	ПерерасчетПроизведен = Истина;

	// Проверка буфера обмена на наличие скопированных строк
	УстановитьДоступностьКомандыВставки(ЭтотОбъект, Не ОбщегоНазначения.ПустойБуферОбмена());

КонецПроцедуры

&НаСервере
Процедура УстановитьФункциональныеОпцииФормы()

	ОбщегоНазначенияБПКлиентСервер.УстановитьПараметрыФункциональныхОпцийФормыДокумента(ЭтаФорма);
	
	ПлательщикНДС			= УчетнаяПолитика.ПлательщикНДС(Объект.Организация, Объект.Дата);
	ПлательщикНалогаНаПрибыльДо2015 = УчетнаяПолитика.ПлательщикНалогаНаПрибыльДо2015(Объект.Организация, Объект.Дата);
	
КонецПроцедуры 

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьМассивВидовДоговоров(ВидОперации)

	СписокВидовДоговоров = Новый Массив;

	СписокВидовДоговоров.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СПокупателем"));
	СписокВидовДоговоров.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.Бартерный"));

	Если ВидОперации <> ПредопределенноеЗначение("Перечисление.ВидыОперацийВозвратТоваровОтПокупателя.Оборудование") Тогда
		СписокВидовДоговоров.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СКомиссионером"));
	КонецЕсли;

	Возврат СписокВидовДоговоров;

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьПараметрыВыбора(Форма)
	
	Элементы = Форма.Элементы;
	
	МассивВидовДоговоров = Новый ФиксированныйМассив(ПолучитьМассивВидовДоговоров(Форма.Объект.ВидОперации));
	
	НовыйМассивПараметров = Новый Массив();
	НовыйМассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.ВидДоговора", МассивВидовДоговоров));
	
	НовыеПараметрыВыбора = Новый ФиксированныйМассив(НовыйМассивПараметров);
	Элементы.ДоговорКонтрагента.ПараметрыВыбора = НовыеПараметрыВыбора;
	
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьПараметрыВыбораДокументаОтгрузки(Форма)
	
	Элементы = Форма.Элементы;
	Объект   = Форма.Объект;
	
	НовыйМассивПараметров = Новый Массив();
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		НовыйМассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Организация", Объект.Организация));
	КонецЕсли;
	Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
		НовыйМассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Контрагент", Объект.Контрагент));
	КонецЕсли;
	Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		НовыйМассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.ДоговорКонтрагента", Объект.ДоговорКонтрагента));
	КонецЕсли;
	
	НовыеПараметрыВыбора = Новый ФиксированныйМассив(НовыйМассивПараметров);
	Элементы.ДокументОтгрузки.ПараметрыВыбора = НовыеПараметрыВыбора;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДобавленныеКолонкиТаблиц()

	Для Каждого СтрокаТаблицы Из Объект.Товары Цикл
		ЗаполнитьДобавленныеКолонкиСтрокиТаблицыТовары(СтрокаТаблицы, Объект.СуммаВключаетНДС);
	КонецЦикла;

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьДобавленныеКолонкиСтрокиТаблицыТовары(СтрокаТаблицы, СуммаВключаетНДС)

	СтрокаТаблицы.Всего = СтрокаТаблицы.Сумма + ?(СуммаВключаетНДС, 0, СтрокаТаблицы.СуммаНДС);

КонецПроцедуры

&НаСервере
Функция ЕстьСтрокиВТабличныхЧастях()

	ЕстьСтроки = Объект.Товары.Количество() > 0;
	Если Объект.ВидОперации = Перечисления.ВидыОперацийВозвратТоваровОтПокупателя.ПродажаКомиссия Тогда
		ЕстьСтроки = ЕстьСтроки ИЛИ Объект.ВозвратнаяТара.Количество() > 0;
	КонецЕсли;
	
	Возврат ЕстьСтроки;
	
КонецФункции

&НаКлиенте
Функция ПолучитьПараметрыПодбора(ИмяТаблицы)

	ПараметрыФормы = Новый Структура;

	ДатаРасчетов 	 = ?(НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДата()), Неопределено, Объект.Дата);
	ЗаголовокПодбора = НСтр("ru='Подбор номенклатуры в %1 (%2)';uk='Підбір номенклатури %1 (%2)'");

	Валюта = Объект.ВалютаДокумента;

	Если ИмяТаблицы = "Товары" Тогда
		ПредставлениеТаблицы = НСтр("ru='Товары';uk='Товари'");
		
		Если ЗначениеЗаполнено(Объект.ТипЦен) Тогда
			Параметрыформы.Вставить("ПоказыватьЦены", НЕ ЭтоКомиссия);
		КонецЕсли;
		
		ПараметрыФормы.Вставить("ПоказыватьОстатки"  , Истина);
		ПараметрыФормы.Вставить("ПоказыватьСчетУчета", Истина);
		
		ПараметрыФормы.Вставить("ЕстьЦена", НЕ ЭтоКомиссия);
		
	ИначеЕсли ИмяТаблицы = "ВозвратнаяТара" Тогда
		ПредставлениеТаблицы = НСтр("ru='Возвратная тара';uk='Зворотна тара'");

		Отказ = Ложь;
		ОчиститьСообщения();
		Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
			Валюта = ВалютаВзаиморасчетов;
			Если НЕ ЗначениеЗаполнено(Валюта) Тогда
				ТекстСообщения = ОбщегоНазначенияБПКлиентСервер.ПолучитьТекстСообщения(,, НСтр("ru='Валюта расчетов';uk='Валюта розрахунків'"));
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "ДоговорКонтрагента", "Объект", Отказ);
			КонецЕсли;
		Иначе
			ТекстСообщения = ОбщегоНазначенияБПКлиентСервер.ПолучитьТекстСообщения(,, НСтр("ru='Договор';uk='Договір'"));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "ДоговорКонтрагента", "Объект", Отказ);
		КонецЕсли;
		Если Отказ Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Объект.ТипЦен) Тогда
			Параметрыформы.Вставить("ПоказыватьЦены", Истина);
		КонецЕсли;
		
		ПараметрыФормы.Вставить("ПоказыватьОстатки"  , Истина);
		ПараметрыФормы.Вставить("ПоказыватьСчетУчета", Истина);
		
		ПараметрыФормы.Вставить("ЕстьЦена", Истина);
		
	КонецЕсли;
	
	ЗаголовокПодбора = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ЗаголовокПодбора, Объект.Ссылка, ПредставлениеТаблицы);

	ПараметрыФормы.Вставить("ТипЦен", Объект.ТипЦен);

	Если ЗначениеЗаполнено(ПараметрыФормы.ТипЦен) Тогда
		ПараметрыФормы.Вставить("ПоказыватьЦены", Истина);
	КонецЕсли;

	ПараметрыФормы.Вставить("ЕстьКоличество"    , Истина);
	ПараметрыФормы.Вставить("ДатаРасчетов"      , ДатаРасчетов);
	ПараметрыФормы.Вставить("Валюта"            , Валюта);
	ПараметрыФормы.Вставить("ДоговорКонтрагента", Объект.ДоговорКонтрагента);
	ПараметрыФормы.Вставить("Контрагент"        , Объект.Контрагент);
	ПараметрыФормы.Вставить("Организация"       , Объект.Организация);
	ПараметрыФормы.Вставить("Склад"             , Объект.Склад);
	ПараметрыФормы.Вставить("Заголовок"         , ЗаголовокПодбора);
	ПараметрыФормы.Вставить("ВидПодбора"        , ?(ЭтоКомиссия, "Комиссионер", ""));
	ПараметрыФормы.Вставить("ИмяТаблицы"        , ИмяТаблицы);
	ПараметрыФормы.Вставить("Услуги"            , ИмяТаблицы = "Услуги");

	Возврат ПараметрыФормы;

КонецФункции

&НаСервере
Процедура ОбработкаВыбораПодборВставкаИзБуфераНаСервере(ВыбранноеЗначение, ИмяТаблицы)

	ЭтоВставкаИзБуфера = ВыбранноеЗначение.Свойство("ЭтоВставкаИзБуфера");
	СписокСвойств = Неопределено;
	Если ЭтоВставкаИзБуфера Тогда
		
		ТаблицаТоваров = ВыбранноеЗначение.Данные;
		СписокСвойств = ВыбранноеЗначение.СписокСвойств;
		
	Иначе
		
		ТаблицаТоваров = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресПодобраннойНоменклатурыВХранилище);
		
	КонецЕсли;
	
	ДанныеОбъекта = Новый Структура("Дата, Организация, Склад, Реализация");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	ДанныеОбъекта.Реализация = Истина; 
	
	СоответствиеСведенийОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОСпискеНоменклатуры(
		ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаТоваров, "Номенклатура", Истина), ДанныеОбъекта);
	
	Если ЗначениеЗаполнено(Объект.ТипЦен) Тогда
		ЦенаВключаетНДС	= ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ТипЦен, "ЦенаВключаетНДС");
	Иначе
		ЦенаВключаетНДС	= Объект.СуммаВключаетНДС;
	КонецЕсли;
	
	КоличествоДобавленныхСтрок = 0;
	
	Для Каждого СтрокаТовара Из ТаблицаТоваров Цикл
		
		СтрокаТабличнойЧасти = Неопределено;
		Если Не ЭтоВставкаИзБуфера Тогда
		
			СтруктураОтбора = Новый Структура("Номенклатура, Цена", СтрокаТовара.Номенклатура, СтрокаТовара.Цена);
			Если ИмяТаблицы = "Товары"  Тогда
			     СтруктураОтбора.Вставить("ЕдиницаИзмерения",СтрокаТовара.ЕдиницаИзмерения);
			КонецЕсли; 
			СтрокаТабличнойЧасти = НайтиСтрокуТабличнойЧасти(ИмяТаблицы, СтруктураОтбора);
			
		КонецЕсли;
		
		Если СтрокаТабличнойЧасти <> Неопределено Тогда
			
			// Нашли - увеличиваем количество.
			СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + СтрокаТовара.Количество;
			Если ИмяТаблицы = "Товары" Тогда
				
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, Объект.СуммаВключаетНДС);
				
				ЗаполнитьДобавленныеКолонкиСтрокиТаблицыТовары(СтрокаТабличнойЧасти, Объект.СуммаВключаетНДС);
	
			ИначеЕсли ИмяТаблицы = "ВозвратнаяТара" Тогда
				
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
				 
			КонецЕсли;
			
		Иначе
			
			СведенияОНоменклатуре = СоответствиеСведенийОНоменклатуре.Получить(СтрокаТовара.Номенклатура);
			Если ЭтоВставкаИзБуфера 
				И СведенияОНоменклатуре <> Неопределено
				И ЗначениеЗаполнено(СведенияОНоменклатуре.Услуга)
				И СведенияОНоменклатуре.Услуга Тогда
			
				Продолжить;
			
			КонецЕсли;
			СтрокаТабличнойЧасти = Объект[ИмяТаблицы].Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтрокаТовара, СписокСвойств);
			КоличествоДобавленныхСтрок = КоличествоДобавленныхСтрок + 1;
			
			Если СведенияОНоменклатуре = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			 
			Документы.ВозвратТоваровОтПокупателя.ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(
				ДанныеОбъекта, СтрокаТабличнойЧасти, ИмяТаблицы, СведенияОНоменклатуре);
				
			Если ЭтоВставкаИзБуфера 
				И Найти(СписокСвойств, "СчетУчетаБУ") <> 0 
				И ЗначениеЗаполнено(СтрокаТовара["СчетУчетаБУ"]) Тогда
				СтрокаТабличнойЧасти.СчетУчетаБУ = СтрокаТовара.СчетУчетаБУ;
			КонецЕсли;
			
			Если ИмяТаблицы = "Товары" Тогда
				
				СтрокаТабличнойЧасти.СтавкаНДС				= СведенияОНоменклатуре.СтавкаНДС;
 
				СтрокаТабличнойЧасти.Цена = УчетНДСКлиентСервер.ПересчитатьЦенуПриИзмененииФлаговНалогов(
					СтрокаТабличнойЧасти.Цена, ЦенаВключаетНДС, Объект.СуммаВключаетНДС,
					УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));
				
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти); 
				
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, Объект.СуммаВключаетНДС);
				
				ЗаполнитьДобавленныеКолонкиСтрокиТаблицыТовары(СтрокаТабличнойЧасти, Объект.СуммаВключаетНДС);
				
			ИначеЕсли ИмяТаблицы = "ВозвратнаяТара" Тогда
				
				СтрокаТабличнойЧасти.Цена = УчетНДСКлиентСервер.ПересчитатьЦенуПриИзмененииФлаговНалогов(
				СтрокаТабличнойЧасти.Цена, ЦенаВключаетНДС, Истина,
				УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СведенияОНоменклатуре.СтавкаНДС));
				
				// Рассчитать реквизиты табличной части.
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ОбновитьИтоги(ЭтаФорма);

	// Авторасчет НДС 
	ПерерасчетПроизведен = Ложь;

	Если ЭтоВставкаИзБуфера Тогда
		ВыбранноеЗначение.КоличествоДобавленныхСтрок = КоличествоДобавленныхСтрок;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция ПоместитьТоварыВоВременноеХранилищеНаСервере()
	
	Возврат ПоместитьВоВременноеХранилище(Объект.Товары.Выгрузить(), УникальныйИдентификатор);
	
КонецФункции

&НаКлиенте
Функция ПолучитьПараметрыОбработкиТабличнойЧастиТовары()

	ПараметрыОбработки = Новый Структура;
	
	ПараметрыОбработки.Вставить("АдресХранилищаТовары", 		ПоместитьТоварыВоВременноеХранилищеНаСервере());
	ПараметрыОбработки.Вставить("ЗаполнятьЦеныПоПокупке", 		Ложь);
	
	ПараметрыОбработки.Вставить("ДокументСсылка", 				Объект.Ссылка);
	ПараметрыОбработки.Вставить("ДокументДата", 				Объект.Дата);
	ПараметрыОбработки.Вставить("ДокументОрганизация", 			Объект.Организация);
	ПараметрыОбработки.Вставить("ДокументВалюта", 				Объект.ВалютаДокумента);
	ПараметрыОбработки.Вставить("ДокументКурс", 				Объект.КурсВзаиморасчетов);
	ПараметрыОбработки.Вставить("ДокументКратность", 			Объект.КратностьВзаиморасчетов);
	ПараметрыОбработки.Вставить("ДокументСуммаВключаетНДС", 	Объект.СуммаВключаетНДС);
	ПараметрыОбработки.Вставить("ДокументТипЦен", 				Объект.ТипЦен);
	ПараметрыОбработки.Вставить("ДокументСклад", 				Объект.Склад);

	Возврат ПараметрыОбработки;
	
КонецФункции 

&НаСервере
Процедура ОбработкаОповещенияОбработкиТабличнойЧастиТоварыНаСервере(Параметры)

	ТаблицаОбработки = ПолучитьИзВременногоХранилища(Параметры.АдресОбработаннойТабличнойЧастиТоварыВХранилище);
	
	Отбор = Новый Структура("НомерСтрокиДокумента", 0);
	ТаблицаОбработки.Индексы.Добавить("НомерСтрокиДокумента");
	ДобавленныеСтроки = ТаблицаОбработки.НайтиСтроки(Отбор);
	
	ДанныеОбъекта = Новый Структура("Дата, Организация, Склад, Реализация");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	ДанныеОбъекта.Реализация	= Истина;
	
	СоответствиеСведенийОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОСпискеНоменклатуры(
		ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаОбработки, "Номенклатура", Истина), ДанныеОбъекта);
	
	Для Каждого СтрокаТабличнойЧасти ИЗ ДобавленныеСтроки Цикл
		
		СведенияОНоменклатуре = СоответствиеСведенийОНоменклатуре.Получить(СтрокаТабличнойЧасти.Номенклатура);
		Если СведенияОНоменклатуре = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Документы.ВозвратТоваровОтПокупателя.ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(
			ДанныеОбъекта, СтрокаТабличнойЧасти, "Товары", СведенияОНоменклатуре);
		
		ЗаполнитьДобавленныеКолонкиСтрокиТаблицыТовары(СтрокаТабличнойЧасти, Объект.СуммаВключаетНДС);
		
	КонецЦикла;
	
	Объект.Товары.Загрузить(ТаблицаОбработки);
	
	ОбновитьИтоги(ЭтаФорма);

	// Авторасчет НДС 
	ПерерасчетПроизведен = Ложь;
	
КонецПроцедуры

&НаСервере
Функция НайтиСтрокуТабличнойЧасти(ИмяТабличнойЧасти, СтруктураОтбора)

	СтрокаТабличнойЧасти = Неопределено;

	МассивНайденныхСтрок = Объект[ИмяТабличнойЧасти].НайтиСтроки(СтруктураОтбора);
	Если МассивНайденныхСтрок.Количество() > 0 Тогда
		// Нашли. Вернем первую найденную строку.
		СтрокаТабличнойЧасти = МассивНайденныхСтрок[0];
	КонецЕсли;

	Возврат СтрокаТабличнойЧасти;

КонецФункции

Процедура ПересчитатьСуммыПриИзмененииПризнакаПлательщикНДС()
	
	МетаданныеДокумента = Объект.Ссылка.Метаданные();
	ПараметрыОбъекта = Новый Структура("Организация, Дата, ПлательщикНДС", Объект.Организация, Объект.Дата, ПлательщикНДС);

	Если Не ПлательщикНДС Тогда
		//организацию-плательщика поменяли на неплательщика, сумма не включала НДС - надо пересчитать;
		ПересчитатьНДС = Не Объект.СуммаВключаетНДС;			
		
		Объект.СуммаВключаетНДС = Истина;
	Иначе
		//организацию-неплательщика поменяли на плательщика;
		ПересчитатьНДС = Ложь;
		
		//заполним ставки до пересчета цены
		Для Каждого Строка Из Объект.Товары Цикл
			ОбработкаТабличныхЧастей.ЗаполнитьСтавкуНДСТабЧасти(Строка, ПараметрыОбъекта, "Товары", МетаданныеДокумента);
		КонецЦикла;

	КонецЕсли;
			
	ЗаполнитьРассчитатьСуммы(
		Объект.ВалютаДокумента, 
		Объект.КурсВзаиморасчетов, 
		Объект.КратностьВзаиморасчетов,
		Ложь, // ПерезаполнитьЦены
		Ложь, // ПересчитатьЦены
		ПересчитатьНДС
	);
	
	Если Не ПлательщикНДС Тогда
		//организацию-плательщика поменяли на неплательщика 
		
		//заполним ставки после пересчета цены
		// и пересчитаем зависимые от ставки колонки СуммаНДС, Всего
		Для Каждого Строка Из Объект.Товары Цикл
			ОбработкаТабличныхЧастей.ЗаполнитьСтавкуНДСТабЧасти(Строка, ПараметрыОбъекта, "Товары", МетаданныеДокумента);
			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(Строка, Объект.СуммаВключаетНДС);
		КонецЦикла;
	
		ЗаполнитьДобавленныеКолонкиТаблиц();
	
	КонецЕсли;
	
КонецПроцедуры

#Область КопированиеВставкаСтрокЧерезБуферОбмена

&НаСервере
Процедура СкопироватьСтрокиНаСервере(ИмяТаблицы)
	
	ОбщегоНазначения.СкопироватьСтрокиВБуферОбмена(Объект[ИмяТаблицы], 
		Элементы[ИмяТаблицы].ВыделенныеСтроки, Объект.Ссылка.Метаданные().Имя);

КонецПроцедуры

&НаСервере
Функция ВставитьСтрокиНаСервере(ИмяТаблицы)
	
	ПараметрыВставки = ОбработкаТабличныхЧастей.ПолучитьПараметрыВставкиДанныхИзБуфераОбмена(Объект.Ссылка, ИмяТаблицы, ПоказыватьВДокументахСчетаУчета);
	ОпределитьСписокСвойствДляВставкиИзБуфера(ПараметрыВставки);
	ОбработкаВыбораПодборВставкаИзБуфераНаСервере(ПараметрыВставки, ПараметрыВставки.ИмяТаблицы);
	
	Возврат ПараметрыВставки.КоличествоДобавленныхСтрок;
	
КонецФункции

&НаКлиенте
Функция ПолучитьИмяТекущейТабличнойЧасти()
	
	ИмяТекущейСтраницы = Элементы.ГруппаСтраницы.ТекущаяСтраница.Имя;
	ИмяТаблицы = "";
	Если ИмяТекущейСтраницы = "ГруппаТовары" Тогда
		
		ИмяТаблицы = "Товары";
		
	КонецЕсли;
	
	Возврат ИмяТаблицы;
	
КонецФункции

&НаСервере
Процедура ОпределитьСписокСвойствДляВставкиИзБуфера(ПараметрыВставки)
	
	СписокСвойств = Новый Массив;
	СписокСвойств.Добавить("Номенклатура");
	СписокСвойств.Добавить("Количество");
	СписокСвойств.Добавить("Цена");
	СписокСвойств.Добавить("ЕдиницаИзмерения");
	СписокСвойств.Добавить("Коэффициент");
	СписокСвойств.Добавить("СуммаСкидки");
	Если ПараметрыВставки.ПоказыватьВДокументахСчетаУчета Тогда
		СписокСвойств.Добавить("СчетУчетаБУ");
	КонецЕсли;
		
	ПараметрыВставки.СписокСвойств = ОбработкаТабличныхЧастей.ПолучитьСписокСвойствИмеющихсяВТаблицеДанных(
		ПараметрыВставки.Данные, СписокСвойств);
	
КонецПроцедуры
	
&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьКомандыВставки(Форма, Доступность)

	Доступность = Не Форма.ТолькоПросмотр И Доступность;
	Элементы = Форма.Элементы;
	Элементы.ТоварыВставитьСтроки.Доступность						 = Доступность;
	Элементы.ТоварыКонтекстноеМенюВставитьСтроки.Доступность		 = Доступность;
	
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ БСП

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте
Процедура ВыгрузкаПервичныхДокументовВЗвит1С(Команда)
	
	Если НЕ КонтрагентИспользуетЭДО(Объект.Контрагент)  Тогда
		ПоказатьПредупреждение(, НСтр("ru='В карточке контрагента не установлен признак ""Использовать FREDO ДокМен""!';uk= 'В картці контрагента не встановлена ознака ""Використовувати FREDO ДокМен""!'"));
		Возврат;
	КонецЕсли;
	
	Если Не РегламентированнаяОтчетностьКлиент.ПодключитьМенеджерЗвит1С(Истина) Тогда
		Возврат;
	КонецЕсли;

	Если Объект.Ссылка.Пустая() Или Модифицированность Тогда
		Если Объект.Ссылка.Пустая() Тогда
			
			ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Данные еще не записаны."
					 "Выполнение действия ""%1"" возможно только после записи данных."
					 "Данные будут записаны.';uk='Дані ще не записані."
				 	 "Виконання дії ""%1"" можливо тільки після запису даних."
					 "Дані будуть записані.'"),
					 НСтр("ru='выгрузки';uk= 'вивантаження'"));
				
			ОписаниеОповещения = Новый ОписаниеОповещения("ВыполнитьОткрытиеФормыВыгрузкиПервичныхДокументовВЭДО", ЭтаФорма);
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
			
		КонецЕсли;
	Иначе
		ВыполнитьОткрытиеФормыВыгрузкиПервичныхДокументовВЭДО(КодВозвратаДиалога.ОК, Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьОткрытиеФормыВыгрузкиПервичныхДокументовВЭДО(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.ОК Тогда
		Записать();
		Если Объект.Ссылка.Пустая() Или Модифицированность Тогда
			Возврат; // запись не удалась, сообщения о причинах выводит платформа
		КонецЕсли;
	ИначеЕсли РезультатВопроса = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;
	
	глМенеджерЗвит1С.ВыгрузитьПервичныйДокумент(Объект.Ссылка, ЭтаФорма);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция КонтрагентИспользуетЭДО(Контрагент)  
	Возврат Контрагент.ИспользоватьЭДО1СЗвит;
КонецФункции

// ИНАГРО++
&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьТипСкладаОрдера(Форма)

	Элементы = Форма.Элементы;
	Объект   = Форма.Объект;		

	Если Объект.ИНАГРО_ВидПоступления = ПредопределенноеЗначение("Перечисление.ИНАГРО_ВидыПоступленияТоваров.НаСклад") Тогда
		
		Объект.ИНАГРО_ОрдерВТЧ = Ложь;

		Если ТипЗнч(Объект.Склад) <> Тип("СправочникСсылка.Склады") Тогда
			Объект.Склад = ПредопределенноеЗначение("Справочник.Склады.ПустаяСсылка");
		КонецЕсли;
		
		Элементы.Склад.Подсказка = НСтр("ru='В этом поле необходимо указать склад, с которого оформляется возврат товаров.';uk='У цьому полі необхідно вказати склад, з якого оформлюється повернення товарів.'");
				
	Иначе		

		Если ТипЗнч(Объект.Склад) <> Тип("ДокументСсылка.ИНАГРО_ПриходныйОрдерНаТовары") Тогда
			Объект.Склад = ПредопределенноеЗначение("Документ.ИНАГРО_ПриходныйОрдерНаТовары.ПустаяСсылка");
		КонецЕсли;
		
		Элементы.Склад.Подсказка = НСтр("ru='В этом поле необходимо указать приходный ордер, по которому ранее было оформлено поступление товаров.';uk='У цьому полі необхідно вказати прибутковий ордер, за яким раніше було оформлено надходження товарів.'");
				
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораПриходныйОрдерНаТовары(ТабличнаяЧасть, СпособЗаполнения) 
	
	Если Объект.ИНАГРО_ВидПоступления <> ПредопределенноеЗначение("Перечисление.ИНАГРО_ВидыПоступленияТоваров.ПоОрдеру") Тогда
		ТекстСообщения = (Нстр("ru='Заполнять возврат товаров от покупателя на основании приходного ордера можно только с видом поступления ""По ордеру""!';uk='Заповнювати повернення товарів від покупця на підставі прибуткового ордера можна тільки з видом надходження ""За ордером""!'"));		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Объект.ИНАГРО_ВидПоступления"); 	
		Возврат;
	КонецЕсли;

	Если СпособЗаполнения = "Заполнить"	И Объект.Товары.Количество() > 0 Тогда
		ДополнительныеПараметры = Новый Структура("ТабличнаяЧасть", ТабличнаяЧасть);	
		ТекстВопроса = НСтр("ru='Перед заполнением табличная часть будет очищена. Заполнить?';uk='Перед заповненням таблична частина буде очищена. Заповнити?'");
		Оповещение = Новый ОписаниеОповещения("ЗаполнитьПоПриходномуОрдеруЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Да);
	Иначе
		ОткрытьФормуВыбораПриходныйОрдерНаТоварыДляЗаполнения(ТабличнаяЧасть);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоПриходномуОрдеруЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	 Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда		
		Возврат;
	КонецЕсли; 	
	
	ТабличнаяЧасть = ДополнительныеПараметры.ТабличнаяЧасть;
	
	Объект[ТабличнаяЧасть].Очистить();	

	ОткрытьФормуВыбораПриходныйОрдерНаТоварыДляЗаполнения(ТабличнаяЧасть);
			
КонецПроцедуры  

&НаКлиенте
Процедура ОткрытьФормуВыбораПриходныйОрдерНаТоварыДляЗаполнения(ТабличнаяЧасть = Неопределено)
	
	ПараметрыОтбора	= Новый Структура;
	ПараметрыОтбора.Вставить("ВидОперации",	ПредопределенноеЗначение("Перечисление.ИНАГРО_ВидыОперацийПриходныйОрдер.ОтПокупателя"));
	Если ЗначениеЗаполнено(Объект.Организация) Тогда 		
		ПараметрыОтбора.Вставить("Организация",	Объект.Организация);
	КонецЕсли;	
	Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
		ПараметрыОтбора.Вставить("Контрагент", Объект.Контрагент);
	КонецЕсли;
	
	ПараметрыФормы	= Новый Структура;
	ПараметрыФормы.Вставить("Отбор",              ПараметрыОтбора);
	ПараметрыФормы.Вставить("РежимВыбора",        Истина);
	ПараметрыФормы.Вставить("МножественныйВыбор", Ложь);
	Если ТабличнаяЧасть <> Неопределено Тогда
		ПараметрыФормы.Вставить("ИмяТаблицы", ТабличнаяЧасть);
	КонецЕсли;

	ОткрытьФорму("Документ.ИНАГРО_ПриходныйОрдерНаТовары.Форма.ФормаВыбора", ПараметрыФормы, ЭтаФорма, УникальныйИдентификатор, , , , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	                                                                                                                		
КонецПроцедуры 

&НаСервере
Процедура ОбработкаЗаполненияТабличнойЧастиНаСервере(ВыбранноеЗначение, ТабличнаяЧасть)
	
	Документы.ВозвратТоваровОтПокупателя.ЗаполнитьПоПриходномуОрдеру(Объект, ТабличнаяЧасть, ВыбранноеЗначение);
				
КонецПроцедуры 

#КонецОбласти