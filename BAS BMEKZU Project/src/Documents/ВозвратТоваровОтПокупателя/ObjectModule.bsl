#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ ПРОВЕДЕНИЯ
Перем мВалютаРегламентированногоУчета;
Перем КурсЗачетаАвансаРегл;
Перем ПартионныйУчетБУ;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ
//

Процедура ЗаполнитьПоДокументуОснованию(ДанныеЗаполнения)
	
	ОснованиеРеализацияТоваров = ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.РеализацияТоваровУслуг");
	Если ОснованиеРеализацияТоваров ИЛИ ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ОтчетОРозничныхПродажах") Тогда
		// Заполним реквизиты из стандартного набора по документу основанию.
		ЗаполнениеДокументов.ЗаполнитьПоОснованию(ЭтотОбъект, ДанныеЗаполнения);
		
		Если ОснованиеРеализацияТоваров Тогда
			Если НЕ ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом Тогда
				СделкаВОсновании = Неопределено;
				Если ОбщегоНазначенияБП.ЕстьРеквизитДокумента("Сделка", ДанныеЗаполнения.Метаданные()) Тогда
					СделкаВОсновании = ДанныеЗаполнения.Сделка;
				КонецЕсли; 
				Сделка = УправлениеВзаиморасчетами.ОпределитьДокументРасчетовСКонтрагентом(ДанныеЗаполнения, СделкаВОсновании);
			КонецЕсли;
		КонецЕсли;
		
		ДокументОтгрузки = ДанныеЗаполнения;			
		
		Если ДанныеЗаполнения.Проведен Тогда
			// Скопируем табличные части из документа основания.
			
			ТоварыПоДаннымОснования = Документы.ВозвратТоваровОтПокупателя.ТоварыПоДаннымОснования(ЭтотОбъект, ДанныеЗаполнения);
			Если ТоварыПоДаннымОснования.Количество() > 0 Тогда
				Товары.Загрузить(ТоварыПоДаннымОснования);
			КонецЕсли;
			
			Если ОснованиеРеализацияТоваров Тогда
				ВозратнаяТараПоДаннымРеализации = Документы.ВозвратТоваровОтПокупателя.ВозратнаяТараПоДаннымРеализации(ЭтотОбъект, ДанныеЗаполнения);
				Если ВозратнаяТараПоДаннымРеализации.Количество() > 0 Тогда
					ВозвратнаяТара.Загрузить(ВозратнаяТараПоДаннымРеализации);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если ОснованиеРеализацияТоваров Тогда
			Документы.ВозвратТоваровОтПокупателя.ЗаполнитьСчетаУчетаРасчетов(ЭтотОбъект);
		КонецЕсли;
		
		Если ОснованиеРеализацияТоваров И ДанныеЗаполнения.ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.Оборудование Тогда
			ВидОперации = Перечисления.ВидыОперацийВозвратТоваровОтПокупателя.Оборудование;
		Иначе
			ВидОперации = Перечисления.ВидыОперацийВозвратТоваровОтПокупателя.ПродажаКомиссия;
		КонецЕсли;
		
		ИНАГРО_ВидПоступления = Перечисления.ИНАГРО_ВидыПоступленияТоваров.НаСклад; //ИНАГРО
		
	// ИНАГРО++
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ИНАГРО_ПриходныйОрдерНаТовары") Тогда
		// Заполним реквизиты из стандартного набора по документу основанию.
		ЗаполнениеДокументов.ЗаполнитьПоОснованию(ЭтотОбъект, ДанныеЗаполнения);
		
		ВидОперации             = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ПокупкаКомиссия;			
		ИНАГРО_ВидПоступления   = Перечисления.ИНАГРО_ВидыПоступленияТоваров.ПоОрдеру;			
		Склад                   = ДанныеЗаполнения;
		
		Если ЗначениеЗаполнено(Контрагент) Тогда
			СписокВидовДоговоров = Новый СписокЗначений;
			
			СписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПокупателем);
			СписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.Бартерный);
			
			ЗаполнениеДокументов.ПриИзмененииЗначенияКонтрагента(ЭтотОбъект, СписокВидовДоговоров);
			
			// Тип цен заполняем, только если в договоре указаны тип цен номенклатуры (он - покупатель или комиссионер).
			Если ДоговорКонтрагента <> Неопределено Тогда
				ТипЦенКонтрагента = ДоговорКонтрагента.ТипЦен;
				Если  ЗначениеЗаполнено(ТипЦенКонтрагента)
					И ТипЗнч(ТипЦенКонтрагента) = Тип("СправочникСсылка.ТипыЦенНоменклатуры") Тогда
					ТипЦен = ТипЦенКонтрагента;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		СуммаВключаетНДС        = ?(ЗначениеЗаполнено(ТипЦен), ТипЦен.ЦенаВключаетНДС, Истина);		
		ВалютаДокумента         = ДоговорКонтрагента.ВалютаВзаиморасчетов;			
		
		// Курс должен быть на дату документа основания
		СтруктураКурсаДокумента = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаДокумента, ДанныеЗаполнения.Дата);			
		КурсВзаиморасчетов      = СтруктураКурсаДокумента.Курс;
		КратностьВзаиморасчетов = СтруктураКурсаДокумента.Кратность;
		
		// Заполним табличные части по приходному ордеру на товары.
		Документы.ПоступлениеТоваровУслуг.ЗаполнитьПоПриходномуОрдеру(ЭтотОбъект, "Товары",         ДанныеЗаполнения);
		Документы.ПоступлениеТоваровУслуг.ЗаполнитьПоПриходномуОрдеру(ЭтотОбъект, "ВозвратнаяТара", ДанныеЗаполнения);

	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ПРОВЕДЕНИЯ - ПОДГОТОВКА ДАННЫХ ИНФОРМАЦИОННОЙ БАЗЫ
//

// Процедура формирует структуру шапки документа и дополнительных полей.
//
Процедура ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента) Экспорт
	
	// Дерево значений, содержащее имена необходимых полей в запросе по шапке.
	Перем ДеревоПолейЗапросаПоШапке;

	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента = ОбщегоНазначенияРед12.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	СтруктураШапкиДокумента.Склад = ?(ИНАГРО_ВидПоступления = Перечисления.ИНАГРО_ВидыПоступленияТоваров.ПоОрдеру, СтруктураШапкиДокумента.Склад.Склад, СтруктураШапкиДокумента.Склад); // ИНАГРО
	
	// Заполним по шапке документа дерево параметров, нужных при проведении.
	ДеревоПолейЗапросаПоШапке = ОбщегоНазначенияРед12.СформироватьДеревоПолейЗапросаПоШапке();
	ОбщегоНазначенияРед12.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "Организация", "ДоговорОрганизация");
	ОбщегоНазначенияРед12.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "ВидДоговора", "ВидДоговора");
   	ОбщегоНазначенияРед12.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "ВедениеВзаиморасчетов", "ВедениеВзаиморасчетов");
	ОбщегоНазначенияРед12.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "ВалютаВзаиморасчетов" , "ВалютаВзаиморасчетов");
	ОбщегоНазначенияРед12.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Сделка"              , "ВидОперации", "СделкаВидОперации");
	ОбщегоНазначенияРед12.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Склад"               , "ТипСклада"  , "ТипСклада");
   	ОбщегоНазначенияРед12.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "ВедениеВзаиморасчетовНУ", "ВедениеВзаиморасчетовНУ");
   	ОбщегоНазначенияРед12.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "СложныйНалоговыйУчет", 	"СложныйНалоговыйУчет");
	ОбщегоНазначенияРед12.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "СхемаНалоговогоУчета",    "СхемаНалоговогоУчета");

	
	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа
	СтруктураШапкиДокумента = УправлениеЗапасами.СформироватьЗапросПоДеревуПолей(ЭтотОбъект, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета);
	
	СтруктураШапкиДокумента.Вставить("УказанДокументПродажи", ЗначениеЗаполнено(СтруктураШапкиДокумента.ДокументОтгрузки));
	
КонецПроцедуры // ПодготовитьСтруктуруШапкиДокумента()

// Процедура определяет параметры учетной политики
//
Процедура ПодготовитьПараметрыУчетнойПолитики(СтруктураШапкиДокумента, Отказ, Заголовок)

	СпособОценкиМПЗ = УчетнаяПолитика.СпособОценкиМПЗ(СтруктураШапкиДокумента.Организация, СтруктураШапкиДокумента.Дата);
	ПартионныйУчетБУ = (СпособОценкиМПЗ = Перечисления.СпособыОценки.ФИФО) ИЛИ (СпособОценкиМПЗ = Перечисления.СпособыОценки.ЛИФО);

	СтруктураШапкиДокумента.Вставить("ЕстьНалогНаПрибыльДо2015"       , УчетнаяПолитика.ПлательщикНалогаНаПрибыльДо2015(СтруктураШапкиДокумента.Организация, СтруктураШапкиДокумента.Дата));
	СтруктураШапкиДокумента.Вставить("ЕстьНДС"                        , УчетнаяПолитика.ПлательщикНДС(СтруктураШапкиДокумента.Организация, СтруктураШапкиДокумента.Дата));
	СтруктураШапкиДокумента.Вставить("СпособОценкиТоваровВРознице"	  , УчетнаяПолитика.СпособОценкиТоваровВРознице(СтруктураШапкиДокумента.Организация, СтруктураШапкиДокумента.Дата));
	
КонецПроцедуры // ПодготовитьПараметрыУчетнойПолитики()

// Процедура формирует таблицы документа.
//
Процедура ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоТаре, Отказ, Заголовок) Экспорт
	
	ПогрешностиОкругления     = Новый Соответствие;
	ПогрешностиОкругленияТара = Новый Соответствие;

	// Получим необходимые данные для проведения и проверки заполенения данные по табличной части "Товары".
	СтруктураПолей = Новый Структура();
	СтруктураПростыхПолей = Новый Структура;
	СтруктураСложныхПолей = Новый Структура;
	
	СтруктураПолей.Вставить("Номенклатура"         		, "Номенклатура");
	СтруктураПолей.Вставить("Услуга"               		, "Номенклатура.Услуга");
	СтруктураПолей.Вставить("БланкСтрогогоУчета"		, "Номенклатура.БланкСтрогогоУчета");
	СтруктураПолей.Вставить("КоличествоДок"        		, "Количество * Коэффициент");
	Если СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
		СтруктураПолей.Вставить("СчетУчетаБУ"	   			, "ПереданныеСчетУчетаБУ");
		СтруктураПолей.Вставить("ПереданныеСчетУчетаБУ"		, "СчетУчетаБУ");
	Иначе
		СтруктураПолей.Вставить("СчетУчетаБУ"	   			, "СчетУчетаБУ");
	КонецЕсли;
	
	СтруктураПолей.Вставить("Сумма"              		, "Сумма");
	СтруктураПолей.Вставить("СтавкаНДС"          		, "СтавкаНДС");
	СтруктураПолей.Вставить("НДС"                		, "СуммаНДС");
	СтруктураПолей.Вставить("НомерСтроки"        		, "НомерСтроки");
	СтруктураПолей.Вставить("СхемаРеализации"           , "СхемаРеализации");
	СтруктураПолей.Вставить("СчетДоходовБУ"             , "СхемаРеализации.СчетВычетовИзДоходов");
	СтруктураПолей.Вставить("СубконтоДоходовБУ1"        , "СхемаРеализации.СубконтоВычетовИзДоходов1");
	СтруктураПолей.Вставить("СубконтоДоходовБУ2"        , "СхемаРеализации.СубконтоВычетовИзДоходов2");
	СтруктураПолей.Вставить("СубконтоДоходовБУ3"        , "СхемаРеализации.СубконтоВычетовИзДоходов3");
	СтруктураПолей.Вставить("СчетРасходовБУ"            , "СхемаРеализации.СчетСебестоимостиПриВозврате");
	СтруктураПолей.Вставить("СубконтоРасходовБУ1"       , "СхемаРеализации.СубконтоСебестоимостиПриВозврате1");
	СтруктураПолей.Вставить("СубконтоРасходовБУ2"       , "СхемаРеализации.СубконтоСебестоимостиПриВозврате2");
	СтруктураПолей.Вставить("СубконтоРасходовБУ3"       , "СхемаРеализации.СубконтоСебестоимостиПриВозврате3");
	СтруктураПолей.Вставить("НоменклатурнаяГруппа"		, "Номенклатура.НоменклатурнаяГруппа");
	
	СтруктураПолей.Вставить("НалоговоеНазначение"     		   , "НалоговоеНазначение");
	СтруктураПолей.Вставить("ВидДеятельностиНДС"     		   , "НалоговоеНазначение.ВидДеятельностиНДС");
	
	СтруктураПолей.Вставить("НалоговоеНазначениеДоходовИЗатрат"     		   , "НалоговоеНазначениеДоходовИЗатрат");
		
	Если НЕ СтруктураШапкиДокумента.УказанДокументПродажи Тогда
		СтруктураПолей.Вставить("Себестоимость", "Себестоимость");
		СтруктураПолей.Вставить("СебестоимостьНУ", "СебестоимостьНУ");
	КонецЕсли;
	
	// ИНАГРО++
	СтруктураПолей.Вставить("Цена",        "Цена");
	СтруктураПолей.Вставить("Коэффициент", "Коэффициент");  

    Если ИНАГРО_ВидПоступления = Перечисления.ИНАГРО_ВидыПоступленияТоваров.ПоОрдеру И ИНАГРО_ОрдерВТЧ Тогда
         СтруктураПолей.Вставить("Склад",     "ИНАГРО_Ордер.Склад");
         СтруктураПолей.Вставить("ТипСклада", "ИНАГРО_Ордер.Склад.ТипСклада");
    КонецЕсли; 
	// ИНАГРО--
	
	СтруктураПолей.Вставить("СчетУчетаНДС", "Ссылка.СчетУчетаНДС");
	
	РезультатЗапросаПоТоварам = ОбщегоНазначенияРед12.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураПолей, СтруктураПростыхПолей, СтруктураСложныхПолей);
	
	// Подготовим таблицу товаров для проведения.
	ТаблицаПоТоварам = ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента, ПогрешностиОкругления);
	
	//Сформируем новую колонку "Количество"
	ТаблицаПоТоварам.Колонки.Добавить("Количество",ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповЧисла(15,3));
	ТаблицаПоТоварам.ЗагрузитьКолонку(ТаблицаПоТоварам.ВыгрузитьКолонку("КоличествоДок"),"Количество");
	ТаблицаПоТоварам.Колонки.Удалить(ТаблицаПоТоварам.Колонки.КоличествоДок);
	
	// Получим необходимые данные для проведения и проверки заполенения данные 
	// по табличной части "Возвратная тара".
	СтруктураПолей = Новый Структура();
	СтруктураПростыхПолей = Новый Структура;
	
	СтруктураПолей.Удалить ("Количество");
	СтруктураПолей.Вставить("КоличествоДок", "Количество"); // Количество нужно выгружать с другим псевдонимом, иначе нельзя будет использовать отрицательные значения
	СтруктураПолей.Вставить("Номенклатура" , "Номенклатура");
	СтруктураПолей.Вставить("Услуга"       , "Номенклатура.Услуга");
	СтруктураПолей.Вставить("БланкСтрогогоУчета", "Номенклатура.БланкСтрогогоУчета");
	СтруктураПолей.Вставить("Сумма"        , "Сумма");
	СтруктураПолей.Вставить("НомерСтроки"  , "НомерСтроки");
	
	СтруктураПолей.Вставить("СчетУчетаБУ",   "СчетУчетаБУ");
	
	СтруктураПолей.Вставить("СчетУчетаБУ"               , "СчетУчетаБУ");
	СтруктураПолей.Вставить("Забалансовый"              , "СчетУчетаБУ.Забалансовый");
	СтруктураПолей.Вставить("СхемаРеализации"           , "СхемаРеализации");
	СтруктураПолей.Вставить("СчетДоходовБУ"             , "СхемаРеализации.СчетВычетовИзДоходов");
	СтруктураПолей.Вставить("СубконтоДоходовБУ1"        , "СхемаРеализации.СубконтоВычетовИзДоходов1");
	СтруктураПолей.Вставить("СубконтоДоходовБУ2"        , "СхемаРеализации.СубконтоВычетовИзДоходов2");
	СтруктураПолей.Вставить("СубконтоДоходовБУ3"        , "СхемаРеализации.СубконтоВычетовИзДоходов3");
	СтруктураПолей.Вставить("СчетРасходовБУ"            , "СхемаРеализации.СчетСебестоимостиПриВозврате");
	СтруктураПолей.Вставить("СубконтоРасходовБУ1"       , "СхемаРеализации.СубконтоСебестоимостиПриВозврате1");
	СтруктураПолей.Вставить("СубконтоРасходовБУ2"       , "СхемаРеализации.СубконтоСебестоимостиПриВозврате2");
	СтруктураПолей.Вставить("СубконтоРасходовБУ3"       , "СхемаРеализации.СубконтоСебестоимостиПриВозврате3");
	СтруктураПолей.Вставить("НоменклатурнаяГруппа"		, "Номенклатура.НоменклатурнаяГруппа");
	
	СтруктураПолей.Вставить("НалоговоеНазначение"     		   , "НалоговоеНазначение");
	СтруктураПолей.Вставить("ВидДеятельностиНДС"     		   , "НалоговоеНазначение.ВидДеятельностиНДС");
	
	СтруктураПолей.Вставить("НалоговоеНазначениеДоходовИЗатрат"     		   , "НалоговоеНазначениеДоходовИЗатрат");

	Если НЕ СтруктураШапкиДокумента.УказанДокументПродажи Тогда
		СтруктураПолей.Вставить("Себестоимость", "Себестоимость");
		СтруктураПолей.Вставить("СебестоимостьНУ", "СебестоимостьНУ");
	КонецЕсли;
	
	// ИНАГРО++
	СтруктураПолей.Вставить("Цена", "Цена");
	СтруктураПростыхПолей.Вставить("Коэффициент", 1);
	
    Если ИНАГРО_ВидПоступления = Перечисления.ИНАГРО_ВидыПоступленияТоваров.ПоОрдеру И ИНАГРО_ОрдерВТЧ Тогда
         СтруктураПолей.Вставить("Склад",     "ИНАГРО_Ордер.Склад");
         СтруктураПолей.Вставить("ТипСклада", "ИНАГРО_Ордер.Склад.ТипСклада");
    КонецЕсли; 
	// ИНАГРО--

	СтруктураПростыхПолей.Вставить("СтавкаНДС"          , Перечисления.СтавкиНДС.НеНДС);
	СтруктураПростыхПолей.Вставить("НДС"                , 0);
	СтруктураПростыхПолей.Вставить("СчетУчетаНДС"       , ПланыСчетов.Хозрасчетный.ПустаяСсылка());
	
	РезультатЗапросаПоТаре = ОбщегоНазначенияРед12.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "ВозвратнаяТара", СтруктураПолей, СтруктураПростыхПолей);
	
	// Подготовим таблицу тары для проведения.
	ТаблицаПоТаре = ПодготовитьТаблицуТары(РезультатЗапросаПоТаре, СтруктураШапкиДокумента, ПогрешностиОкругленияТара);
	
	//Сформируем новую колонку "Количество"
	ТаблицаПоТаре.Колонки.Добавить("Количество",ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповЧисла(15,3));
	ТаблицаПоТаре.ЗагрузитьКолонку(ТаблицаПоТаре.ВыгрузитьКолонку("КоличествоДок"),"Количество");
	ТаблицаПоТаре.Колонки.Удалить(ТаблицаПоТаре.Колонки.КоличествоДок);

КонецПроцедуры

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТоварам - результат запроса по табличной части "Товары",
//  СтруктураШапкиДокумента   - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблиица значений.
//
Функция ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента, ПогрешностиОкругления)
	
	ТаблицаТоваров = РезультатЗапросаПоТоварам.Выгрузить();
	
	Если НЕ(ИНАГРО_ВидПоступления = Перечисления.ИНАГРО_ВидыПоступленияТоваров.ПоОрдеру И ИНАГРО_ОрдерВТЧ) Тогда // ИНАГРО 
		ТаблицаТоваров.Колонки.Добавить("Склад");
		ТаблицаТоваров.Колонки.Добавить("ТипСклада");
	КонецЕсли;

	Если СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
		ТаблицаТоваров.Колонки.Добавить("Регистратор");
		ТаблицаТоваров.Колонки.Добавить("Организация");
		ТаблицаТоваров.Колонки.Добавить("ДоговорКонтрагента");
		
		ТаблицаТоваров.Колонки.ПереданныеСчетУчетаБУ.Имя = "КорСчетСписанияБУ";		
		
		ТаблицаТоваров.Колонки.Добавить("ДокументОприходования");
		
		ТаблицаТоваров.ЗаполнитьЗначения(ЭтотОбъект,                                 "Регистратор");
		ТаблицаТоваров.ЗаполнитьЗначения(СтруктураШапкиДокумента.Организация,        "Организация");
		ТаблицаТоваров.ЗаполнитьЗначения(СтруктураШапкиДокумента.ДоговорКонтрагента, "ДоговорКонтрагента");
		
		// для списания укажем "кор. налоговое назначение" = нал. назначение доходов и затрат
		ТаблицаТоваров.Колонки.Добавить("НалоговоеНазначениеНовое", Новый ОписаниеТипов("СправочникСсылка.НалоговыеНазначенияАктивовИЗатрат"));
		ТаблицаТоваров.ЗагрузитьКолонку(ТаблицаТоваров.ВыгрузитьКолонку("НалоговоеНазначение") , "НалоговоеНазначениеНовое");
		
	КонецЕсли;
	
	Если НЕ СтруктураШапкиДокумента.ЕстьНДС Тогда
		// для регламентного учета считаем НДС
		ТаблицаТоваров.ЗаполнитьЗначения(Перечисления.СтавкиНДС.НеНДС, "СтавкаНДС");
		ТаблицаТоваров.ЗаполнитьЗначения(0                            , "НДС");
	КонецЕсли;
	
	ТаблицаТоваров.Колонки.Добавить("Комиссионный",		 	Новый ОписаниеТипов("Булево"));
	
	ТаблицаТоваров.Колонки.Добавить("СуммаПродажная", 		ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповЧисла(15, 2));
	
	Для Каждого СтрокаТаблицы Из ТаблицаТоваров Цикл
		
		СтрокаТаблицы.Комиссионный = БухгалтерскийУчетВызовСервераПовтИсп.КомиссионныйТовар(СтрокаТаблицы.СчетУчетаБУ);
		
	КонецЦикла;
		
	НалоговыйУчет.ДобавитьКолонкиТоваровРегл(ТаблицаТоваров, СтруктураШапкиДокумента, ПогрешностиОкругления, Ложь);
	
	//Если ИНАГРО_ВидПоступления = Перечисления.ИНАГРО_ВидыПоступленияТоваров.НаСклад Тогда // ИНАГРО 
	//	ТаблицаТоваров.ЗаполнитьЗначения(СтруктураШапкиДокумента.Склад,			  "Склад");
	//	ТаблицаТоваров.ЗаполнитьЗначения(СтруктураШапкиДокумента.Склад.ТипСклада, "ТипСклада");
	//КонецЕсли;
	
	// ИНАГРО++
    Если НЕ(ИНАГРО_ВидПоступления = Перечисления.ИНАГРО_ВидыПоступленияТоваров.ПоОрдеру И ИНАГРО_ОрдерВТЧ) Тогда
        Если ИНАГРО_ВидПоступления = Перечисления.ИНАГРО_ВидыПоступленияТоваров.ПоОрдеру Тогда
            ТаблицаТоваров.ЗаполнитьЗначения(СтруктураШапкиДокумента.Склад.ТипСклада, "ТипСклада");
            ТаблицаТоваров.ЗаполнитьЗначения(СтруктураШапкиДокумента.Склад,			  "Склад");
        Иначе
            ТаблицаТоваров.ЗаполнитьЗначения(СтруктураШапкиДокумента.Склад.ТипСклада, "ТипСклада");
            ТаблицаТоваров.ЗаполнитьЗначения(СтруктураШапкиДокумента.Склад,			  "Склад");
        КонецЕсли; 
	КонецЕсли;
	// ИНАГРО--

	Если НЕ СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийВозвратТоваровОтПокупателя.Оборудование Тогда

		ЕстьРозничныйСклад = УправлениеРозничнойТорговлей.ОпределитьНаличиеРозничногоСклада(ТаблицаТоваров, "Склад", "ТипСклада");
		
		Если ЕстьРозничныйСклад Тогда
			ТаблицаПоЦенам = УправлениеРозничнойТорговлей.СформироватьЗапросПоПродажнымЦенам(Дата, СтруктураШапкиДокумента.ВалютаДокумента,
			                 ТаблицаТоваров.ВыгрузитьКолонку("Номенклатура"), СтруктураШапкиДокумента.Склад.ТипЦенРозничнойТорговли).Выгрузить();

			УправлениеРозничнойТорговлей.ЗаполнитьКолонкуСуммаПродажная(ТаблицаТоваров, ТаблицаПоЦенам, "ТипСклада", "КоличествоДок");
		КонецЕсли;
		
	КонецЕсли;

	Возврат ТаблицаТоваров;
	
КонецФункции // ПодготовитьТаблицуТоваров()

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТаре  - результат запроса по табличной части "ВозвратнаяТара",
//  СтруктураШапкиДокумента - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблиица значений.
//
Функция ПодготовитьТаблицуТары(РезультатЗапросаПоТаре, СтруктураШапкиДокумента, ПогрешностиОкругления)
	
	ТаблицаТары = РезультатЗапросаПоТаре.Выгрузить();
	
	НалоговыйУчет.ДобавитьКолонкиТоваровРегл(ТаблицаТары, СтруктураШапкиДокумента, ПогрешностиОкругления, Ложь);

	Возврат ТаблицаТары;
	
КонецФункции // ПодготовитьТаблицуТары()

// Проверяет правильность заполнения строк табличной части "Товары".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТоварам        - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок)
	
	ИмяТабличнойЧасти = "Товары";
		
	Если  СтруктураШапкиДокумента.ТипСклада = Перечисления.ТипыСкладов.РозничныйМагазин
		И СтруктураШапкиДокумента.СпособОценкиТоваровВРознице = Перечисления.СпособыОценкиТоваровВРознице.ПоПродажнойСтоимости Тогда
		Для Каждого СтрокаТаблицы Из ТаблицаПоТоварам Цикл
			Если СтрокаТаблицы.СуммаПродажная = 0 Тогда
				СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Для товара ""%1"" не установлена розничная цена.';uk='Для товару ""%1"" не встановлена роздрібна ціна.'"), СтрокаТаблицы.Номенклатура);
				Префикс = "Товары[" + Формат(СтрокаТаблицы.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].";

				ТекстСообщения = ОбщегоНазначенияБПКлиентСервер.ПолучитьТекстСообщения("Колонка", "Корректность", 
					НСтр("ru='Номенклатура';uk='Номенклатура'"),
					СтрокаТаблицы.НомерСтроки, НСтр("ru='Товары';uk='Товари'"),
					СтрокаСообщения
				);
				Поле = Префикс + "Номенклатура";
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиТовары()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ПРОВЕДЕНИЯ - ФОРМИРОВАНИЕ ДВИЖЕНИЙ
//

// По результату запроса по шапке документа формируем движения по регистрам.
//
// Параметры: 
//  РежимПроведения           - режим проведения документа (оперативный или неоперативный),
//  СтруктураШапкиДокумента   - выборка из результата запроса по шапке документа,
//  ТаблицаПоТоварам          - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  ТаблицаПоТаре             - таблица значений, содержащая данные для проведения и проверки ТЧ "Возвратная тара",
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоТаре, Отказ, Заголовок);
	
	ПроводкиБУ    = Движения.Хозрасчетный;
	
	ДатаДока = Дата;
	СкладПроводок = СтруктураШапкиДокумента.Склад;
	
	Комиссия = (ВидОперации = Перечисления.ВидыОперацийВозвратТоваровОтПокупателя.ПродажаКомиссия
	            И ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером);
				
	// Проводки по взаиморасчетам - авансы
	Если НЕ Комиссия Тогда

	   	ТаблицыДокумента = Новый Структура();
	   	ТаблицыДокумента.Вставить("ТаблицаПоТоварам",ТаблицаПоТоварам);

		ТаблицаАвансов = БухгалтерскийУчетРасчетовСКонтрагентами.ЗачетАванса(ЭтотОбъект, СтруктураШапкиДокумента , мВалютаРегламентированногоУчета, ТаблицыДокумента , Отказ, Заголовок, "АВ");
		
		КурсЗачетаАвансаРегл = ?(ТаблицаАвансов.Итог("СуммаВал") = 0, Неопределено, ТаблицаАвансов.Итог("Сумма") / ТаблицаАвансов.Итог("СуммаВал"));
		
 	КонецЕсли; // Проводки по взаиморасчетам - авансы

	// Проводки по взаиморасчетам за тару - авансы
   	ТаблицыДокумента = Новый Структура();
   	ТаблицыДокумента.Вставить("ТаблицаПоТаре",ТаблицаПоТаре);
	ТаблицаАвансовПоТаре = БухгалтерскийУчетРасчетовСКонтрагентами.ЗачетАванса(ЭтотОбъект, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета, ТаблицыДокумента , Отказ, Заголовок,"АВ",,,СтруктураШапкиДокумента.СчетУчетаРасчетовПоТаре, СтруктураШапкиДокумента.СчетУчетаРасчетовПоТареПоАвансам);

	Если ТаблицаПоТоварам.Количество() > 0 Тогда
		
		Если Не Комиссия Тогда
			
			ВозвратПартийТоваров(СтруктураШапкиДокумента,ТаблицаПоТоварам,"Товары",Отказ,Заголовок);
			
			// Проводки по товарам
			Для каждого СтрокаТаблицы Из ТаблицаПоТоварам Цикл

				// Выручка
				Если СтрокаТаблицы.Сумма = 0 Тогда
					Продолжить;
				КонецЕсли;

				Проводка = ПроводкиБУ.Добавить();

				Проводка.Период          = Дата;
				Проводка.Активность      = Истина;
				Проводка.Организация     = СтруктураШапкиДокумента.Организация;
				Проводка.Сумма           = СтрокаТаблицы.ПроводкиСуммаСНДСРегл;
				Проводка.Содержание      = НСтр("ru='Возврат товаров';uk='Повернення товарів'",Локализация.КодЯзыкаИнформационнойБазы());
				Проводка.НомерЖурнала    = "";

				Проводка.СчетДт         = СтрокаТаблицы.СчетДоходовБУ;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтрокаТаблицы.СубконтоДоходовБУ1);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, СтрокаТаблицы.СубконтоДоходовБУ2);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, СтрокаТаблицы.СубконтоДоходовБУ3);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "НоменклатурныеГруппы", СтрокаТаблицы.НоменклатурнаяГруппа);

				Проводка.СчетКт          = СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Контрагенты", СтруктураШапкиДокумента.Контрагент);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Договоры"   , СтруктураШапкиДокумента.ДоговорКонтрагента);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт,  "ДокументыРасчетовСКонтрагентами", УправлениеВзаиморасчетами.ОпределитьДокументРасчетовСКонтрагентом(Ссылка,Сделка));
				
				Проводка.ВалютаКт        = СтруктураШапкиДокумента.ВалютаДокумента;
				Проводка.ВалютнаяСуммаКт = СтрокаТаблицы.ПроводкиСуммаСНДСВал;
				
				Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыльДо2015 Тогда
					
					Проводка.НалоговоеНазначениеДт  = СтрокаТаблицы.НалоговоеНазначениеДоходовИЗатрат;
					Проводка.СуммаНУДт 				= НалоговыйУчет.УчестьСуммуАвансаДо01042011(СтруктураШапкиДокумента, СтрокаТаблицы.ПроводкиСуммаБезНДСРегл) + СтрокаТаблицы.ПроводкиСуммаНДСРегл;
					
				КонецЕсли;
				
			КонецЦикла; // Проводки по товарам			
			
			
		Иначе
			
			УправлениеЗапасамиПартионныйУчет.ДвижениеПартийТоваров(ТаблицаПоТоварам, Отказ, ,НСтр("ru='Возврат товаров от комиссионера';uk='Повернення товарів від комісіонера'",Локализация.КодЯзыкаИнформационнойБазы()));
			
		КонецЕсли; // НЕ Комиссия
	
	КонецЕсли; // Если ТаблицаПоТоварам.Количество() > 0 Тогда
	
	// Возврат тары.
	Если ТаблицаПоТаре.Количество() > 0 Тогда
		
		ВозвратПартийТоваров(СтруктураШапкиДокумента,ТаблицаПоТаре,"Тара",Отказ,Заголовок);

		// Проводки по таре
		Для Каждого СтрокаТаблицы Из ТаблицаПоТаре Цикл

			// Бухгалтерский учет
			Проводка = ПроводкиБУ.Добавить();
			
			Проводка.Период          = ДатаДока;
			Проводка.Активность      = Истина;
			Проводка.Организация     = СтруктураШапкиДокумента.Организация;
			Проводка.Сумма           = СтрокаТаблицы.ПроводкиСуммаБезНДСРегл;
			Проводка.Содержание      = НСтр("ru='Возврат тары';uk='Повернення тари'",Локализация.КодЯзыкаИнформационнойБазы());
			Проводка.НомерЖурнала    = "";

			Проводка.СчетДт         = СтрокаТаблицы.СчетДоходовБУ;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтрокаТаблицы.СубконтоДоходовБУ1);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, СтрокаТаблицы.СубконтоДоходовБУ2);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, СтрокаТаблицы.СубконтоДоходовБУ3);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "НоменклатурныеГруппы", СтрокаТаблицы.НоменклатурнаяГруппа);
			
			Проводка.СчетКт          = СтруктураШапкиДокумента.СчетУчетаРасчетовПоТаре;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Контрагенты", СтруктураШапкиДокумента.Контрагент);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Договоры"   , СтруктураШапкиДокумента.ДоговорКонтрагента);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт,  "ДокументыРасчетовСКонтрагентами", УправлениеВзаиморасчетами.ОпределитьДокументРасчетовСКонтрагентом(Ссылка,Сделка));
			
			Проводка.ВалютаКт        = СтруктураШапкиДокумента.ВалютаДокумента;
			Проводка.ВалютнаяСуммаКт = СтрокаТаблицы.ПроводкиСуммаБезНДСВал;
			
			Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыльДо2015 Тогда
				
				Проводка.НалоговоеНазначениеДт  = СтрокаТаблицы.НалоговоеНазначениеДоходовИЗатрат;
				Проводка.СуммаНУДт 				= НалоговыйУчет.УчестьСуммуАвансаДо01042011(СтруктураШапкиДокумента, СтрокаТаблицы.ПроводкиСуммаБезНДСРегл) + СтрокаТаблицы.ПроводкиСуммаНДСРегл;
				
			КонецЕсли;

		КонецЦикла; // Проводки по таре
		
	КонецЕсли; // Если ТаблицаПоТаре.Количество() > 0 Тогда
	
	// Продажи и НДС (нал. учет)	
	ТаблицаПоВторомуСобытиюНал = ДвиженияПоРегистрамНалоговогоУчета(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоТаре, Отказ);
	
	// НДС 
	ПроводкиПоНДС(ПроводкиБУ, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоТаре, ТаблицаПоВторомуСобытиюНал, Отказ);
	
	// ИНАГРО++
    Если ИНАГРО_ВидПоступления = Перечисления.ИНАГРО_ВидыПоступленияТоваров.ПоОрдеру Тогда
        НаборДвижений = Движения.ИНАГРО_ТоварыНаСкладах;
        
        // Получим таблицу значений, совпадающую со структурой набора записей регистра.
        ТаблицаДвижений = НаборДвижений.ВыгрузитьКолонки();
        
        // Заполним таблицу движений.
        ОбщегоНазначенияБПВызовСервера.ЗагрузитьВТаблицуЗначений(ТаблицаПоТоварам, ТаблицаДвижений);
        
        //// Недостающие поля.
        ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.Организация, "Организация");
        НаборДвижений.мПериод          = Дата;
        НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;
        
        // Проверка остатков при оперативном проведении.
        Если РежимПроведения = РежимПроведенияДокумента.Оперативный Тогда
            НаборДвижений.КонтрольОстатков(ЭтотОбъект, "Товары", СтруктураШапкиДокумента, Отказ, Заголовок);
        КонецЕсли;
        
        Если Не Отказ Тогда
            Движения.ИНАГРО_ТоварыНаСкладах.ВыполнитьРасход();
        КонецЕсли;
        
        // ТАРА ПО РЕГИСТРУ ТоварыКПолучениюНаСклады
        НаборДвижений = Движения.ИНАГРО_ТоварыНаСкладах;
        
        // Получим таблицу значений, совпадающую со структурой набора записей регистра.
        ТаблицаДвижений = НаборДвижений.ВыгрузитьКолонки();
        
        ОбщегоНазначенияБПВызовСервера.ЗагрузитьВТаблицуЗначений(ТаблицаПоТаре, ТаблицаДвижений);
        
        // Недостающие поля.
        Если НЕ(ИНАГРО_ВидПоступления = Перечисления.ИНАГРО_ВидыПоступленияТоваров.ПоОрдеру И ИНАГРО_ОрдерВТЧ) Тогда
            ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.Склад, "Склад");
        КонецЕсли; 
		
		ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.Организация, "Организация");
        ТаблицаДвижений.ЗаполнитьЗначения(Истина,                              "ВозвратнаяТара");
        
        НаборДвижений.мПериод          = Дата;
        НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;
        
        // Проверка остатков при оперативном проведении.
        Если РежимПроведения = РежимПроведенияДокумента.Оперативный  Тогда
            НаборДвижений.КонтрольОстатков(ЭтотОбъект, "ВозвратнаяТара", СтруктураШапкиДокумента, Отказ, Заголовок);
        КонецЕсли;
        
        Если Не Отказ Тогда
            Движения.ИНАГРО_ТоварыНаСкладах.ВыполнитьРасход();
        КонецЕсли;
    КонецЕсли;
    // ИНАГРО-- 

КонецПроцедуры // ДвиженияПоРегистрам()

// Формируются проводки по отражаению возврата товаров
// 
Процедура ВозвратПартийТоваров(СтруктураШапкиДокумента, ТаблицаПоТоварам, ИмяТабличнойЧасти, Отказ, Заголовок)

	ПроводкиБУ = Движения.Хозрасчетный;
	
	ДатаДока = Дата;
	СкладПроводок = СтруктураШапкиДокумента.Склад;
	
	ТаблицаПоТоварам.Колонки.Добавить("СписанныеПартииБУ");
	
	ЕстьНалоговыйУчетПартий = (СтруктураШапкиДокумента.ЕстьНДС ИЛИ СтруктураШапкиДокумента.ЕстьНалогНаПрибыльДо2015);			
	
	//Установим управляемые блокировки
	Если СтруктураШапкиДокумента.УказанДокументПродажи И ОбщегоНазначенияБПВызовСервераПовтИсп.ИспользоватьУправляемыеБлокировки() Тогда
		//Установим блокировку на движения регистратора
		СтруктураПараметров = Новый Структура("ТипТаблицы, ИмяТаблицы", "РегистрБухгалтерии", "Хозрасчетный.НаборЗаписей");
		ЗначенияБлокировки = Новый Соответствие;
		ЗначенияБлокировки.Вставить("Регистратор", СтруктураШапкиДокумента.ДокументОтгрузки); 
		ОбщегоНазначенияБПВызовСервера.УстановитьУправляемуюБлокировку(СтруктураПараметров, ЗначенияБлокировки, );
		
	КонецЕсли;
	
	Для Каждого СтрокаТЧ Из ТаблицаПоТоварам Цикл
		
		Если СтруктураШапкиДокумента.УказанДокументПродажи Тогда
			
		   ТаблицаВозвращенныхПартий = СформироватьТаблицуВозвращенныхПартийБух(СтрокаТЧ.СчетУчетаБУ,
		                                                                    СтрокаТЧ.Номенклатура,
																			СтрокаТЧ.НалоговоеНазначение,
		                                                                    СтруктураШапкиДокумента.ДокументОтгрузки,
		                                                                    СтрокаТЧ.Количество,
		                                                                    Отказ, Заголовок);
		
		Иначе
		
			ТаблицаВозвращенныхПартий = СформироватьТаблицуВозвращенныхПартийБезУказанияПартииБух(СтрокаТЧ.СчетУчетаБУ,
		                                                                                     СтрокаТЧ.Номенклатура,
		                                                                                     Ссылка,
		                                                                                     СтрокаТЧ.Количество,
		                                                                                     СтрокаТЧ.Себестоимость,
																							 СтрокаТЧ.СебестоимостьНУ,
		                                                                                     Отказ, Заголовок);
		
	    КонецЕсли;
																						 
		СтрокаТЧ.СписанныеПартииБУ = ТаблицаВозвращенныхПартий;
		
		Если БухгалтерскийУчетВызовСервераПовтИсп.КомиссионныйТовар(СтрокаТЧ.СчетУчетаБУ) Тогда
			ТаблицаПоТоварамКомитента = СформироватьТаблицуПоТоварамКомитента(СтрокаТЧ.Номенклатура, 
																			СтруктураШапкиДокумента.ДокументОтгрузки, 
																			СтрокаТЧ.Количество, Отказ, Заголовок);
		КонецЕсли;

		Если Не Отказ Тогда
			
			Для каждого Партия Из ТаблицаВозвращенныхПартий Цикл
				
				Проводка = ПроводкиБУ.Добавить();
				
				Проводка.Период       = ДатаДока;
				Проводка.Активность   = Истина;
				Проводка.Организация  = СтруктураШапкиДокумента.Организация;
				Проводка.Содержание   = НСтр("ru='Возврат товаров от покупателя';uk='Повернення товарів від покупця'",Локализация.КодЯзыкаИнформационнойБазы());
				Проводка.Сумма        = - Партия.СуммаСписания;
				
				// ИНАГРО++ 
				Если ИНАГРО_ОбщийВызовСервераПовтИсп.ЕстьБСПУ()  Тогда
					
					Движение = Движения.ИНАГРО_РеализацияОрганизаций.Добавить();
					Движение.Период             = СтруктураШапкиДокумента.Дата;
					Движение.Организация        = СтруктураШапкиДокумента.Организация;
					Движение.Контрагент         = СтруктураШапкиДокумента.Контрагент;				
					Движение.Склад              = СтруктураШапкиДокумента.Склад;
					Движение.Номенклатура       = СтрокаТЧ.Номенклатура;				
					Движение.СтавкаНДС          = СтрокаТЧ.СтавкаНДС;
					
					РасчетныйНДС =   УчетНДС.РассчитатьСуммуНДС(Партия.Количество * СтрокаТЧ.Цена / СтрокаТЧ.Коэффициент,
	    	                                                   ?(ОбщегоНазначенияБП.ЕстьРеквизитДокумента("УчитыватьНДС",     ЭтотОбъект.Метаданные()), ЭтотОбъект.УчитыватьНДС,     Истина), 
														       ?(ОбщегоНазначенияБП.ЕстьРеквизитДокумента("СуммаВключаетНДС", ЭтотОбъект.Метаданные()), ЭтотОбъект.СуммаВключаетНДС, Ложь),
	            	                                           УчетНДС.ПолучитьСтавкуНДС(СтрокаТЧ.СтавкаНДС));
														   
					Движение.Количество         = - Партия.Количество;	
					Движение.СуммаНДС           = -РасчетныйНДС;
					Если ?(ОбщегоНазначенияБП.ЕстьРеквизитДокумента("СуммаВключаетНДС", ЭтотОбъект.Метаданные()), ЭтотОбъект.СуммаВключаетНДС, Ложь) Тогда 
						Движение.Стоимость = - Партия.Количество * СтрокаТЧ.Цена / СтрокаТЧ.Коэффициент;
					Иначе
						Движение.Стоимость = - Партия.Количество * СтрокаТЧ.Цена / СтрокаТЧ.Коэффициент - РасчетныйНДС;
					КонецЕсли;
					Движение.СебестоимостьСумма = - Партия.СуммаСписания;
					Движение.СебестоимостьЦена  = ?(Партия.Количество = 0, 0, - Партия.СуммаСписания / Партия.Количество);
					
				КонецЕсли;
				// ИНАГРО--
				
				Если НЕ БухгалтерскийУчетВызовСервераПовтИсп.КомиссионныйТовар(СтрокаТЧ.СчетУчетаБУ) Тогда
					
					Проводка.СчетДт       = СтрокаТЧ.СчетРасходовБУ;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтрокаТЧ.СубконтоРасходовБУ1);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, СтрокаТЧ.СубконтоРасходовБУ2);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, СтрокаТЧ.СубконтоРасходовБУ3);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "НоменклатурныеГруппы", СтрокаТЧ.НоменклатурнаяГруппа);

					Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыльДо2015 Тогда
						
						Проводка.НалоговоеНазначениеДт  = СтрокаТЧ.НалоговоеНазначениеДоходовИЗатрат;
					    Проводка.СуммаНУДт 				= - Партия.СуммаСписанияНУ;
						
					КонецЕсли;
					
				ИначеЕсли ЗначениеЗаполнено(Партия.Партия) Тогда
					МетаданныеДокумента = Партия.Партия.Метаданные();
					Если ОбщегоНазначенияБП.ЕстьРеквизитДокумента("ДоговорКонтрагента", МетаданныеДокумента) Тогда
						СтрокаРеализованныхТоваров = ТаблицаПоТоварамКомитента.Найти(Партия.Партия.ДоговорКонтрагента, "ДоговорКонтрагента");
						Если НЕ СтрокаРеализованныхТоваров = Неопределено Тогда
							Если СтрокаРеализованныхТоваров.Количество > 0 Тогда
								Движение = Движения.РеализованныеТоварыКомитентов.ДобавитьРасход();
								Движение.Активность		 	= Истина;
								Движение.Период				= СтруктураШапкиДокумента.Дата;
								Движение.Организация 		= СтруктураШапкиДокумента.Организация;
								
								Движение.Контрагент		 	= СтрокаРеализованныхТоваров.Контрагент;
								Движение.ДоговорКонтрагента	= СтрокаРеализованныхТоваров.ДоговорКонтрагента;
								Движение.Номенклатура 		= СтрокаТЧ.Номенклатура;
								
								Коэфф = Партия.Количество / СтрокаРеализованныхТоваров.Количество;
								
								Движение.Количество 		= Коэфф * СтрокаРеализованныхТоваров.Количество;
								Движение.Выручка 			= Коэфф * СтрокаРеализованныхТоваров.Выручка;
								Движение.СуммаПоступления	= Коэфф * СтрокаРеализованныхТоваров.СуммаПоступления;
								
								СтрокаРеализованныхТоваров.Количество 		= СтрокаРеализованныхТоваров.Количество - Движение.Количество;
								СтрокаРеализованныхТоваров.Выручка 			= СтрокаРеализованныхТоваров.Выручка - Движение.Выручка;
								СтрокаРеализованныхТоваров.СуммаПоступления	= СтрокаРеализованныхТоваров.СуммаПоступления - Движение.СуммаПоступления;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
				Проводка.СчетКт       = СтрокаТЧ.СчетУчетаБУ;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт, "Номенклатура", СтрокаТЧ.Номенклатура);
				// ИНАГРО++ 
				СкладПров = ?(ИНАГРО_ВидПоступления = Перечисления.ИНАГРО_ВидыПоступленияТоваров.ПоОрдеру И ИНАГРО_ОрдерВТЧ, СтрокаТЧ.Склад, СкладПроводок);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт, "Склады",       СкладПров);
				// ИНАГРО--
				Если (ПартионныйУчетБУ) ИЛИ (БухгалтерскийУчетВызовСервераПовтИсп.КомиссионныйТовар(СтрокаТЧ.СчетУчетаБУ)) Тогда 
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт, "Партии",       Партия.Партия);
				КонецЕсли;	
				
				Проводка.КоличествоКт = -Партия.Количество;
				
				Проводка.НалоговоеНазначениеКт = СтрокаТЧ.НалоговоеНазначение;
				
				Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыльДо2015 Тогда
					Проводка.СуммаНУКт = -Партия.СуммаСписанияНУ;	
				КонецЕсли;
				
				// Возможно, нужно откорректировать наценку
				Если ИмяТабличнойЧасти = "Товары"
					И СтрокаТЧ.ТипСклада = Перечисления.ТипыСкладов.РозничныйМагазин
					И НЕ БухгалтерскийУчетВызовСервераПовтИсп.КомиссионныйТовар(СтрокаТЧ.СчетУчетаБУ) 
					И СтруктураШапкиДокумента.СпособОценкиТоваровВРознице = Перечисления.СпособыОценкиТоваровВРознице.ПоПродажнойСтоимости Тогда
					
					НеПогашеннаяСтоимость = - СтрокаТЧ.СуммаПродажная;
					
					Если ТаблицаВозвращенныхПартий.Количество() - 1 = ТаблицаВозвращенныхПартий.Индекс(Партия) Тогда
						// последняя партия
						СтоимостьВПродажныхЦенах = НеПогашеннаяСтоимость;
					Иначе						
						СтоимостьВПродажныхЦенах = - (Партия.Количество/СтрокаТЧ.Количество)*СтрокаТЧ.СуммаПродажная;
					КонецЕсли; 
					
					Если     СтоимостьВПродажныхЦенах - Партия.СуммаСписания  <> 0 
						ИЛИ (СтруктураШапкиДокумента.ЕстьНалогНаПрибыльДо2015 И СтоимостьВПродажныхЦенах - Партия.СуммаСписанияНУ  <> 0) Тогда
						// нужно начислить наценку
						Проводка = ПроводкиБУ.Добавить();
						
						Проводка.Период       = ДатаДока;
						Проводка.Активность   = Истина;
						Проводка.Организация  = СтруктураШапкиДокумента.Организация;
						Проводка.Содержание   = НСтр("ru='Торговая наценка';uk='Торгова націнка'",Локализация.КодЯзыкаИнформационнойБазы());
						Проводка.Сумма        = СтоимостьВПродажныхЦенах - Партия.СуммаСписания;
						
						Проводка.СчетДт       = СтрокаТЧ.СчетУчетаБУ;
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт, "Номенклатура", СтрокаТЧ.Номенклатура);
						// ИНАГРО++ 
						СкладПров = ?(ИНАГРО_ВидПоступления = Перечисления.ИНАГРО_ВидыПоступленияТоваров.ПоОрдеру И ИНАГРО_ОрдерВТЧ, СтрокаТЧ.Склад, СкладПроводок);
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт, "Склады",       СкладПров);
						// ИНАГРО--
						Если (ПартионныйУчетБУ) Тогда 
							БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт, "Партии",       Партия.Партия);
						КонецЕсли;
					
						Проводка.СчетКт       = ПланыСчетов.Хозрасчетный.ТорговаяНаценкаАТТ;
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт, "Номенклатура", СтрокаТЧ.Номенклатура);
						// ИНАГРО++ 
						СкладПров = ?(ИНАГРО_ВидПоступления = Перечисления.ИНАГРО_ВидыПоступленияТоваров.ПоОрдеру И ИНАГРО_ОрдерВТЧ, СтрокаТЧ.Склад, СкладПроводок);
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт, "Склады",       СкладПров);
						// ИНАГРО--
						Если (ПартионныйУчетБУ) Тогда 
							БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт, "Партии",       Партия.Партия);
						КонецЕсли;
						
						Проводка.НалоговоеНазначениеДт = СтрокаТЧ.НалоговоеНазначение;
						Проводка.НалоговоеНазначениеКт = СтрокаТЧ.НалоговоеНазначение;
						
						Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыльДо2015 Тогда
							Проводка.СуммаНУДт = СтоимостьВПродажныхЦенах - Партия.СуммаСписанияНУ;	
							Проводка.СуммаНУКт = СтоимостьВПродажныхЦенах - Партия.СуммаСписанияНУ;	
						КонецЕсли;
						
					КонецЕсли; 
					
					НеПогашеннаяСтоимость = НеПогашеннаяСтоимость - СтоимостьВПродажныхЦенах;
					
				КонецЕсли;
				
			КонецЦикла; // Для каждого Партия Из ТаблицаВозвращенныхПартий Цикл
			
		КонецЕсли; // Если Не Отказ Тогда
		
	КонецЦикла; // Для Каждого СтрокаТЧ Из ТаблицаПоТоварам Цикл
	
Конецпроцедуры

Функция ДвиженияПоРегистрамНалоговогоУчета(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоТаре, Отказ)
	
	ТаблицаПоВторомуСобытиюНал = НалоговыйУчет.СоздатьСтруктуруТаблицыНалоговыхСумм();

	Если Не СтруктураШапкиДокумента.ЕстьНДС Тогда
		// Если не нужно отражать в налоговом учете, тогда не отражаем и в подсистеме учета НДС
		Возврат ТаблицаПоВторомуСобытиюНал;
	КонецЕсли;
	
	//Отразим Продажи в регистре ПродажиНалоговыйУчет
	НаборДвижений = Движения.ПродажиНалоговыйУчет;
	
	// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
	ТаблицаДвижений = НаборДвижений.ВыгрузитьКолонки();
	ТаблицаДвиженийТара = ТаблицаДвижений.Скопировать();
	
	// ТОВАРЫ
	Если НЕ СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
		
		ТаблицаКопия = ТаблицаПоТоварам.Скопировать();
		ТаблицаКопия.Свернуть("СтавкаНДС","СуммаСНДСВал, СуммаНДСВал");
		ТаблицаКопия.Колонки.СуммаСНДСВал.Имя = "СуммаВзаиморасчетов";
		ТаблицаКопия.Колонки.СуммаНДСВал.Имя = "СуммаНДС";
		ОбщегоНазначенияБПВызовСервера.ЗагрузитьВТаблицуЗначений(ТаблицаКопия, ТаблицаДвижений);
		
	КонецЕсли;		
	
	ТаблицаДвижений.ЗаполнитьЗначения(Организация       , "Организация");
	ТаблицаДвижений.ЗаполнитьЗначения(ДоговорКонтрагента, "ДоговорКонтрагента");
	ТаблицаДвижений.ЗаполнитьЗначения(НалоговыйУчет.ОпределитьСделкуНалоговыйУчет(СтруктураШапкиДокумента,
																	СтруктураШапкиДокумента.Ссылка, 
																	СтруктураШапкиДокумента.Сделка),
									  "Сделка");
	ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СобытияПродажиНалоговыйУчет.ВозвратОтПокупателя, "Событие");
	
	Если СтруктураШапкиДокумента.СложныйНалоговыйУчет Тогда
		
		// очистим налоговые реквизиты
		ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтавкиНДС.ПустаяСсылка(), 			"СтавкаНДС");
		ТаблицаДвижений.ЗаполнитьЗначения(0, 												"СуммаНДС");
		
	Иначе		
		
		Если СтруктураШапкиДокумента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоРасчетнымДокументам Тогда
			// взаиморасчеты по договору по расчетным документам - необходимо заполнить в регистре реквизит РасчетныйДокумент
			ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.Сделка, "РасчетныйДокумент");
			// и счет НДС для правильного закрытия неполного возврата по бух. счетам
			ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.СчетУчетаНДСПодтвержденный, "СчетУчетаНДСПодтвержденный");
		КонецЕсли;			
		
	КонецЕсли;
	
	//ТАРА
	ТаблицаКопия = ТаблицаПоТаре.Скопировать();
 	ТаблицаКопия.Свернуть("СтавкаНДС","СуммаСНДСВал, СуммаНДСВал");
	ТаблицаКопия.Колонки.СуммаСНДСВал.Имя = "СуммаВзаиморасчетов";
	ТаблицаКопия.Колонки.СуммаНДСВал.Имя  = "СуммаНДС";
	ОбщегоНазначенияБПВызовСервера.ЗагрузитьВТаблицуЗначений(ТаблицаКопия, ТаблицаДвиженийТара);
	ТаблицаДвиженийТара.ЗаполнитьЗначения(Организация       , "Организация");
	ТаблицаДвиженийТара.ЗаполнитьЗначения(ДоговорКонтрагента, "ДоговорКонтрагента");
	ТаблицаДвиженийТара.ЗаполнитьЗначения(НалоговыйУчет.ОпределитьСделкуНалоговыйУчет(СтруктураШапкиДокумента,
																		СтруктураШапкиДокумента.Ссылка, 
																		СтруктураШапкиДокумента.Сделка),
									  	  "Сделка");
	ТаблицаДвиженийТара.ЗаполнитьЗначения(Перечисления.СобытияПродажиНалоговыйУчет.ВозвратОтПокупателя, "Событие");
    ТаблицаДвиженийТара.ЗаполнитьЗначения(Истина, "ВозвратнаяТара");
	
	Если СтруктураШапкиДокумента.СложныйНалоговыйУчет Тогда
		
		// очистим налоговые реквизиты
		ТаблицаДвиженийТара.ЗаполнитьЗначения(Перечисления.СтавкиНДС.ПустаяСсылка(), 			"СтавкаНДС");
		ТаблицаДвиженийТара.ЗаполнитьЗначения(0, 												"СуммаНДС");
		
	Иначе		
		
		Если СтруктураШапкиДокумента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоРасчетнымДокументам Тогда
			// взаиморасчеты по договору по расчетным документам - необходимо заполнить в регистре реквизит РасчетныйДокумент
			ТаблицаДвиженийТара.ЗаполнитьЗначения(СтруктураШапкиДокумента.Сделка, "РасчетныйДокумент");
		КонецЕсли;			
		
	КонецЕсли;
	
	Если НЕ Отказ И ТаблицаДвижений.Количество() > 0 Тогда
			
		НаборДвижений.мПериод          = Дата;
		НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;
			
		Движения.ПродажиНалоговыйУчет.ВыполнитьПриход();
		Движения.ПродажиНалоговыйУчет.Записать();
			
	КонецЕсли;
	
	Если НЕ Отказ И ТаблицаДвиженийТара.Количество() > 0 Тогда
			
		НаборДвижений.мПериод          = Дата;
		НаборДвижений.мТаблицаДвижений = ТаблицаДвиженийТара;
			
		Движения.ПродажиНалоговыйУчет.ВыполнитьПриход();
		Движения.ПродажиНалоговыйУчет.Записать();
			
	КонецЕсли;
	

	Если НЕ СтруктураШапкиДокумента.СложныйНалоговыйУчет Тогда
		
		// Движения формируются по данным рассчета "первого события" 
	   НалоговыйУчет.ДвиженияПоРегистрамНалоговогоУчетаУпрощенныйНалоговыйУчет(ЭтотОбъект, ТаблицаПоВторомуСобытиюНал);
	
	Иначе

		НаборДвижений = Движения.ОжидаемыйИПодтвержденныйНДСПродаж;
		
		// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
		ТаблицаДвижений = НаборДвижений.Выгрузить();
		
		
		// ТОВАРЫ
		ТаблицаКопия = ТаблицаПоТоварам.Скопировать();
		ТаблицаКопия.Свернуть("СтавкаНДС","СуммаБезНДСВал, СуммаНДСВал");
		ТаблицаПриобретений = ТаблицаКопия.Скопировать();
		
		ТаблицаПриобретений.Колонки.СуммаБезНДСВал.Имя = "БазаНДС";
		ТаблицаПриобретений.Колонки.СуммаНДСВал   .Имя = "СуммаНДС";
		ОбщегоНазначенияБПВызовСервера.ЗагрузитьВТаблицуЗначений(ТаблицаПриобретений, ТаблицаДвижений);
		ТаблицаДвижений.ЗаполнитьЗначения(Организация       , "Организация");
		ТаблицаДвижений.ЗаполнитьЗначения(ДоговорКонтрагента, "ДоговорКонтрагента");
		ТаблицаДвижений.ЗаполнитьЗначения(НалоговыйУчет.ОпределитьСделкуНалоговыйУчет(СтруктураШапкиДокумента,
																		СтруктураШапкиДокумента.Ссылка, 
																		СтруктураШапкиДокумента.Сделка),
										  	"Сделка");
		ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СобытияОжидаемыйИПодтвержденныйНДСПродаж.Возврат, "СобытиеНДС");
		ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.КодыОперацийОжидаемыйИПодтвержденныйНДСПродаж.ОжидаемыйНДС , "КодОперации");
			
		
		Если НЕ Отказ И ТаблицаДвижений.Количество() > 0 Тогда
			
			НаборДвижений.мПериод          = Дата;
			НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;
		
			Движения.ОжидаемыйИПодтвержденныйНДСПродаж.ВыполнитьПриход();
			Движения.ОжидаемыйИПодтвержденныйНДСПродаж.Записать();
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ТаблицаПоВторомуСобытиюНал;
	
КонецФункции

Процедура ПроводкиПоНДС(ПроводкиБУ, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоТаре, ТаблицаПоВторомуСобытиюНал, Отказ)
	
	Если НЕ СтруктураШапкиДокумента.ЕстьНДС Тогда
		// Учет НДС не ведется
		Возврат;
	КОнецЕсли;

	// Получим таблицу движений по счетам НДС
	
	// ТОВАРЫ
	ТаблицаКопия = ТаблицаПоТоварам.Скопировать();                                                                                                                           
	ТаблицаКопия.Свернуть("СтавкаНДС, СчетДоходовБУ,СубконтоДоходовБУ1,СубконтоДоходовБУ2,СубконтоДоходовБУ3,НоменклатурнаяГруппа, СчетУчетаНДС, НалоговоеНазначениеДоходовИЗатрат","ПроводкиСуммаНДСРегл,ПроводкиСуммаНДСВал,ПроводкиСуммаНДСКурсНБУ");
	ТаблицаДвижений = ТаблицаКопия.Скопировать();
	
	Для Каждого СтрокаТаблицы Из ТаблицаДвижений Цикл
		
		Если    СтрокаТаблицы.ПроводкиСуммаНДСРегл <> 0 
			ИЛИ СтрокаТаблицы.ПроводкиСуммаНДСВал  <> 0 Тогда
			
			Проводка = ПроводкиБУ.Добавить();

			Проводка.Период                     = СтруктураШапкиДокумента.Дата;
			Проводка.Активность                 = Истина;
			Проводка.Организация                = СтруктураШапкиДокумента.Организация;
			Проводка.Сумма                      = - СтрокаТаблицы.ПроводкиСуммаНДСРегл;
			Проводка.Содержание                 = НСтр("ru='НДС: налоговые обязательства: сторно';uk=""ПДВ: податкові зобов'язання: сторно""",Локализация.КодЯзыкаИнформационнойБазы());
			Проводка.НомерЖурнала               = "";

			Если НЕ СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
				Проводка.СчетДт         = СтрокаТаблицы.СчетДоходовБУ;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтрокаТаблицы.СубконтоДоходовБУ1);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, СтрокаТаблицы.СубконтоДоходовБУ2);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, СтрокаТаблицы.СубконтоДоходовБУ3);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "НоменклатурныеГруппы", СтрокаТаблицы.НоменклатурнаяГруппа);
				
				Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыльДо2015 Тогда
					
					Проводка.НалоговоеНазначениеДт = СтрокаТаблицы.НалоговоеНазначениеДоходовИЗатрат;
					Проводка.СуммаНУДт = - СтрокаТаблицы.ПроводкиСуммаНДСРегл;
					
				КонецЕсли;

			Иначе	
				// с 2011 года согласно НК начисляются обязательства при поставке товаров по договорам комиссии
				Проводка.СчетДт                     = СтруктураШапкиДокумента.СчетУчетаНДСПодтвержденный;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты", СтруктураШапкиДокумента.Контрагент);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Договоры"   , СтруктураШапкиДокумента.ДоговорКонтрагента);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ДокументыРасчетовСКонтрагентами", НалоговыйУчет.ОпределитьСделкуНалоговыйУчет(СтруктураШапкиДокумента, Ссылка, Сделка));
			КонецЕсли;
				
			Проводка.СчетКт                     = СтрокаТаблицы.СчетУчетаНДС;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Контрагенты", СтруктураШапкиДокумента.Контрагент);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Договоры"   , СтруктураШапкиДокумента.ДоговорКонтрагента);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ДокументыРасчетовСКонтрагентами", НалоговыйУчет.ОпределитьСделкуНалоговыйУчет(СтруктураШапкиДокумента, Ссылка, Сделка));
			
			НалоговыйУчет.РазбитьПроводкуПоНДСНаПервоеВтороеСобытие(ТаблицаПоВторомуСобытиюНал, ПроводкиБУ, Проводка, 
													  "Кт", СтруктураШапкиДокумента.СчетУчетаНДСПодтвержденный, 
													  СтруктураШапкиДокумента.ДоговорКонтрагента, 
													  НалоговыйУчет.ОпределитьСделкуНалоговыйУчет(СтруктураШапкиДокумента, Ссылка, Сделка), Сделка,
													  Перечисления.СобытияОжидаемыйИПодтвержденныйНДСПродаж.Возврат,
													  СтрокаТаблицы.СтавкаНДС,
													  ,,,СтрокаТаблицы.ПроводкиСуммаНДСВал, СтрокаТаблицы.ПроводкиСуммаНДСКурсНБУ, КурсЗачетаАвансаРегл);
			
		КонецЕсли;

	КонецЦикла;
	
КонецПроцедуры

// На основании указанного в строке документа реализации
// подбираются партии, по которым будет отражать возврат.
// Сформированная таблица партий возвращается.
//
Функция СформироватьТаблицуВозвращенныхПартийБух(СчетУчета, Номенклатура, НалоговоеНазначение, ДокументОтгрузки, ВозвратКоличество, Отказ, Заголовок)
	
	ТаблицаВозвращенныхПартий = Новый ТаблицаЗначений;
	ТаблицаВозвращенныхПартий.Колонки.Добавить("Партия");
	ТаблицаВозвращенныхПартий.Колонки.Добавить("Количество");
	ТаблицаВозвращенныхПартий.Колонки.Добавить("СуммаСписания");
	ТаблицаВозвращенныхПартий.Колонки.Добавить("СуммаСписанияНУ");
	ТаблицаВозвращенныхПартий.Колонки.Добавить("Комиссионный");
	
	МассивВидовСубконто = Новый Массив;
	МассивВидовСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Регистратор",  ДокументОтгрузки);
	Запрос.УстановитьПараметр("СчетКт",       СчетУчета);
	Запрос.УстановитьПараметр("Товар",        Номенклатура);
	Запрос.УстановитьПараметр("НалоговоеНазначение", НалоговоеНазначение);
	Запрос.УстановитьПараметр("ВидыСубконто", МассивВидовСубконто);
	Запрос.УстановитьПараметр("Организация",  Организация);
	
	СчетУчетаКомиссионный = БухгалтерскийУчетВызовСервераПовтИсп.КомиссионныйТовар(СчетУчета);
	
	Если БухгалтерскийУчетВызовСервераПовтИсп.НаСчетеВедетсяПартионныйУчет(СчетУчета) Тогда
		
		МассивВидовСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Партии);
		
		Запрос.Текст = "ВЫБРАТЬ
		|	ОборотыДтКт.СубконтоКт2 КАК Партия,
		|	ОборотыДтКт.СуммаОборот КАК Сумма,
		|	ОборотыДтКт.СуммаНУОборотКТ КАК СуммаНУ,
		|	ОборотыДтКт.КоличествоОборотКт КАК Количество
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(, , Регистратор, , , СчетКт = &СчетКт, &ВидыСубконто, СубконтоКт1 = &Товар И Организация =&Организация"+?(СчетУчетаКомиссионный,""," И НалоговоеНазначениеКт = &НалоговоеНазначение")+") КАК ОборотыДтКт
		|
		|ГДЕ
		|	ОборотыДтКт.Регистратор = &Регистратор И
		|  (ОборотыДтКт.КоличествоОборотКт >= 0)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Количество УБЫВ";
		
	Иначе
		
		Запрос.Текст = "ВЫБРАТЬ
		|	NULL КАК Партия,
		|	ОборотыДтКт.СуммаОборот КАК Сумма,
		|	ОборотыДтКт.СуммаНУОборотКТ КАК СуммаНУ,
		|	ОборотыДтКт.КоличествоОборотКт КАК Количество
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(, , Регистратор, , , СчетКт = &СчетКт, &ВидыСубконто, СубконтоКт1 = &Товар И Организация =&Организация"+?(СчетУчетаКомиссионный,""," И НалоговоеНазначениеКт = &НалоговоеНазначение")+") КАК ОборотыДтКт
		|
		|ГДЕ
		|	ОборотыДтКт.Регистратор = &Регистратор И
		|	(ОборотыДтКт.КоличествоОборотКт >= 0)
		|";
		
	КонецЕсли;
	
	ТаблицаДанных = Запрос.Выполнить().Выгрузить();
	ТаблицаДанных.Свернуть("Партия","Сумма,СуммаНУ,Количество");
	ТаблицаДанных.Сортировать("Количество Убыв");
	
	КоличествоНеПодобраноПартии = ВозвратКоличество;
	
	// Подберем партии, по которым отразим возврат
	Для каждого Партия Из ТаблицаДанных Цикл
		
		НоваяСтрока = ТаблицаВозвращенныхПартий.Добавить();
		НоваяСтрока.Партия = Партия.Партия;
		
		Если КоличествоНеПодобраноПартии > Партия.Количество Тогда
			
			НоваяСтрока.СуммаСписания = Партия.Сумма;
			НоваяСтрока.СуммаСписанияНУ = Партия.СуммаНУ;
			НоваяСтрока.Количество    = Партия.Количество;
			КоличествоНеПодобраноПартии = КоличествоНеПодобраноПартии - Партия.Количество;
			
		Иначе
			
			НоваяСтрока.СуммаСписания = Окр(Партия.Сумма * (КоличествоНеПодобраноПартии / Партия.Количество), 2);
			НоваяСтрока.СуммаСписанияНУ = Окр(Партия.СуммаНУ * (КоличествоНеПодобраноПартии / Партия.Количество), 2);
			НоваяСтрока.Количество    = КоличествоНеПодобраноПартии;
			КоличествоНеПодобраноПартии = 0;
			
		КонецЕсли;
		
		// Если подоброны партии для всего объема товара, то выходим из цикла
		Если КоличествоНеПодобраноПартии = 0 Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	// Если в документе указан документ реалазации по которому было отгружено больше,
	// чем возвращается, то эту разницу отнесем на пустую партию.
	Если КоличествоНеПодобраноПартии > 0 Тогда
		
		СообщенияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Документом %1 было реализовано %2 на %3 %4 меньше, чем возвращается.';uk='Документом %1 було реалізовано %2 на %3 %4 менше, ніж повертається.'"), СокрЛП(ДокументОтгрузки), Номенклатура, КоличествоНеПодобраноПартии, Номенклатура.БазоваяЕдиницаИзмерения);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СообщенияОбОшибке, ЭтотОбъект, "ДокументОтгрузки", "Объект", Отказ);
		
	КонецЕсли;
	
	ТаблицаВозвращенныхПартий.ЗаполнитьЗначения(СчетУчетаКомиссионный, "Комиссионный");
	
	ТаблицаВозвращенныхПартий.Колонки.Добавить("СчетУчетаБУ");
	ТаблицаВозвращенныхПартий.ЗаполнитьЗначения(СчетУчета, "СчетУчетаБУ");
	
	Возврат ТаблицаВозвращенныхПартий;
	
КонецФункции // СформироватьТаблицуВозвращенныхПартий()

Функция СформироватьТаблицуВозвращенныхПартийБезУказанияПартииБух(СчетУчета, Номенклатура, ДокументПартия, ВозвратКоличество, ВозвратСумма, ВозвратСуммаНУ, Отказ, Заголовок)

	ТаблицаВозвращенныхПартий = Новый ТаблицаЗначений;
	ТаблицаВозвращенныхПартий.Колонки.Добавить("Партия");
	ТаблицаВозвращенныхПартий.Колонки.Добавить("Количество");
	ТаблицаВозвращенныхПартий.Колонки.Добавить("СуммаСписания");
	ТаблицаВозвращенныхПартий.Колонки.Добавить("СуммаСписанияНУ");	
	ТаблицаВозвращенныхПартий.Колонки.Добавить("Комиссионный");
	
	// Добавляется единственная строка с данными партии.
	Строка = ТаблицаВозвращенныхПартий.Добавить();
	
	Строка.Партия        = ДокументПартия;
	Строка.Количество    = ВозвратКоличество;
	Строка.СуммаСписания = ВозвратСумма;
	Строка.СуммаСписанияНУ = ВозвратСуммаНУ;

	ТаблицаВозвращенныхПартий.ЗаполнитьЗначения(Ложь, "Комиссионный");
	ТаблицаВозвращенныхПартий.Колонки.Добавить("СчетУчетаБУ");
	ТаблицаВозвращенныхПартий.ЗаполнитьЗначения(СчетУчета, "СчетУчетаБУ");
	
	Возврат ТаблицаВозвращенныхПартий;
	
КонецФункции // СформироватьТаблицуВозвращенныхПартийБезУказанияПартииБух()

Функция СформироватьТаблицуПоТоварамКомитента(Номенклатура, ДокументОтгрузки, ВозвратКоличество, Отказ, Заголовок)
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Регистратор",  	ДокументОтгрузки);
	Запрос.УстановитьПараметр("Номенклатура", 	Номенклатура);
	Запрос.УстановитьПараметр("Организация", 	Организация);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СУММА(РеализованныеТоварыКомитентовОбороты.КоличествоПриход) КАК Количество,
	|	СУММА(РеализованныеТоварыКомитентовОбороты.ВыручкаПриход) КАК Выручка,
	|	СУММА(РеализованныеТоварыКомитентовОбороты.СуммаПоступленияПриход) КАК СуммаПоступления,
	|	РеализованныеТоварыКомитентовОбороты.Контрагент,
	|	РеализованныеТоварыКомитентовОбороты.ДоговорКонтрагента
	|ИЗ
	|	РегистрНакопления.РеализованныеТоварыКомитентов.Обороты(, , Регистратор, ) КАК РеализованныеТоварыКомитентовОбороты
	|ГДЕ
	|	РеализованныеТоварыКомитентовОбороты.Регистратор = &Регистратор
	|	И РеализованныеТоварыКомитентовОбороты.Организация = &Организация
	|	И РеализованныеТоварыКомитентовОбороты.Номенклатура = &Номенклатура
	|
	|СГРУППИРОВАТЬ ПО
	|	РеализованныеТоварыКомитентовОбороты.Контрагент,
	|	РеализованныеТоварыКомитентовОбороты.ДоговорКонтрагента";
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции // СформироватьТаблицуВозвращенныхПартий()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ
//

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)

	ТипДанныхЗаполнения = ТипЗнч(ДанныеЗаполнения);
	Если ДанныеЗаполнения <> Неопределено И ТипДанныхЗаполнения <> Тип("Структура")
			И Метаданные().ВводитсяНаОсновании.Содержит(ДанныеЗаполнения.Метаданные()) Тогда
		ЗаполнитьПоДокументуОснованию(ДанныеЗаполнения);
	КонецЕсли;
	ЗаполнениеДокументов.Заполнить(ЭтотОбъект, ДанныеЗаполнения);
	
	Если ЗначениеЗаполнено(Организация)
		И ЗначениеЗаполнено(Контрагент)
		И ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
		Документы.ВозвратТоваровОтПокупателя.ЗаполнитьСчетаУчетаРасчетов(ЭтотОбъект);
	КонецЕсли;
	

КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)

	Дата = НачалоДня(ОбщегоНазначенияБП.ПолучитьРабочуюДату());
	Ответственный = Пользователи.ТекущийПользователь();

	СтруктураКурсаВзаиморасчетов = РаботаСКурсамиВалют.ПолучитьКурсВалюты(
	ВалютаДокумента, Дата);
	
	КурсВзаиморасчетов      = СтруктураКурсаВзаиморасчетов.Курс;
	КратностьВзаиморасчетов = СтруктураКурсаВзаиморасчетов.Кратность;

КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)

	
	МассивНепроверяемыхРеквизитов = Новый Массив();

	УказанДокументРеализации = ЗначениеЗаполнено(ДокументОтгрузки);

	// ПРОВЕРКА ЗАПОЛНЕНИЯ РЕКВИЗИТОВ ШАПКИ
	
	Если УказанДокументРеализации Тогда
		
		ДатаВозврата 		= Дата;
		ДатаРеализации 		= ДокументОтгрузки.Дата;
		Если ДатаВозврата < ДатаРеализации Тогда
			
			ТекстСообщения = ОбщегоНазначенияБПКлиентСервер.ПолучитьТекстСообщения(, "Корректность",
			    НСтр("ru='Дата';uk='Дата'"),,,
				НСтр("ru='Дата документа не может быть меньше даты документа отгрузки!';uk=' Дата документа не може бути меншою за дату документа відвантаження!'")
			);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, "Дата", "Объект", Отказ);
			
		КонецЕсли;
	КонецЕсли;	
	
	ВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	
	ЭтоОборудование = (ВидОперации = Перечисления.ВидыОперацийВозвратТоваровОтПокупателя.Оборудование);

	ПлательщикНДС = УчетнаяПолитика.ПлательщикНДС(Организация, Дата);
	ПлательщикНалогаНаПрибыльДо2015  = УчетнаяПолитика.ПлательщикНалогаНаПрибыльДо2015(Организация, Дата);
	
	РеквизитыДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДоговорКонтрагента, "ВидДоговора, ВалютаВзаиморасчетов, 
		|СложныйНалоговыйУчет, СхемаНалоговогоУчета");
	ЭтоКомиссия          = РеквизитыДоговора.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером;
	Внешнеэкономический  = ЗначениеЗаполнено(ДоговорКонтрагента) И (РеквизитыДоговора.ВалютаВзаиморасчетов <> ВалютаРегламентированногоУчета);
	СложныйНалоговыйУчет = ЗначениеЗаполнено(ДоговорКонтрагента) И (РеквизитыДоговора.СложныйНалоговыйУчет);
	
	ВидДоговора          = РеквизитыДоговора.ВидДоговора;

	Если ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
		МассивНепроверяемыхРеквизитов.Добавить("СчетУчетаРасчетовСКонтрагентом");
	КонецЕсли;
	МассивНепроверяемыхРеквизитов.Добавить("СчетУчетаРасчетовПоАвансам"); // Заполняется перед записью
	
	Если Не РеализацияТоваровУслугФормыКлиентСервер.ИспользуетсяСчетУчетаНДС(ПлательщикНДС, ЭтоКомиссия, Дата) Тогда
		МассивНепроверяемыхРеквизитов.Добавить("СчетУчетаНДС");		
	КонецЕсли;
	Если Не РеализацияТоваровУслугФормыКлиентСервер.ИспользуетсяСчетУчетаНДСПодтвержденный(ПлательщикНДС, ЭтоКомиссия, Дата, СложныйНалоговыйУчет) Тогда
		МассивНепроверяемыхРеквизитов.Добавить("СчетУчетаНДСПодтвержденный");		
	КонецЕсли;

	// Корректность договора контрагента:
	Если ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
		ТекстСообщения = "";
		Если НЕ УчетВзаиморасчетов.ПроверитьВозможностьПроведенияВРеглУчете(ЭтотОбъект, ДоговорКонтрагента, ТекстСообщения) Тогда
			ТекстСообщения = ОбщегоНазначенияБПКлиентСервер.ПолучитьТекстСообщения(, "Корректность",
				НСтр("ru='Договор';uk='Договір'"),,, ТекстСообщения);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект,
				"ДоговорКонтрагента", "Объект", Отказ);
		КонецЕсли;
	КонецЕсли;

	Если ПлательщикНДС И ЭтоКомиссия Тогда
		
		Если Не ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
			// Проверку не выполняем
			
		ИначеЕсли НЕ РеквизитыДоговора.СхемаНалоговогоУчета = Справочники.СхемыНалоговогоУчетаПоДоговорамКонтрагентов.СКомиссионером_НК Тогда
			ТекстСообщения = ОбщегоНазначенияБПКлиентСервер.ПолучитьТекстСообщения(, "Корректность",
			    НСтр("ru='Договор';uk='Договір'"),,,
				НСтр("ru='В договоре комиссии указана неправильная схема налогового учета! Используйте схему для периода с 2011 года!';uk='У договорі комісії зазначена неправильна схема податкового обліку! Використайте схему для періоду з 2011 року!'")
			);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, "ДоговорКонтрагента", "Объект", Отказ);
			
		ИначеЕсли НЕ СложныйНалоговыйУчет Тогда			
			ТекстСообщения = ОбщегоНазначенияБПКлиентСервер.ПолучитьТекстСообщения(, "Корректность",
			    НСтр("ru='Договор';uk='Договір'"),,,
				НСтр("ru='По договорам комиссии с 2011 года в конфигурации реализован только ""Сложный налоговый учет"". Установите соответствующий флаг в договоре с контрагентом!';uk='За договорами комісії з 2011 року в конфігурації реалізований тільки ""Складний податковий облік"". Встановіть відповідний прапор в договорі з контрагентом!'")
			);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, "ДоговорКонтрагента", "Объект", Отказ);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьВозвратнуюТару") 
		ИЛИ Внешнеэкономический
		ИЛИ ВозвратнаяТара.Количество() = 0 Тогда
		МассивНепроверяемыхРеквизитов.Добавить("СчетУчетаРасчетовПоТаре");
	КонецЕсли;
	МассивНепроверяемыхРеквизитов.Добавить("СчетУчетаРасчетовПоТареПоАвансам"); // Заполняется перед записью

	Если (Не ЕстьАвансДо01042011) Тогда
		МассивНепроверяемыхРеквизитов.Добавить("СуммаВДВРПоАвансуДо01042011");		
	КонецЕсли;
	
	// ИНАГРО++
	Если    (ИНАГРО_ВидПоступления = Перечисления.ИНАГРО_ВидыПоступленияТоваров.ПоОрдеру И ИНАГРО_ОрдерВТЧ) 
		ИЛИ (Товары.Количество() + ВозвратнаяТара.Количество() = 0) Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Склад");
	КонецЕсли;
	
	ИНАГРО_Склад = ?(ИНАГРО_ВидПоступления = Перечисления.ИНАГРО_ВидыПоступленияТоваров.ПоОрдеру, Склад.Склад, Склад);	
	// ИНАГРО--

	// Корректность склада - нельзя возвращать в НТТ
	Если ЗначениеЗаполнено(Склад) Тогда
		ТекстСообщения = НСтр("ru='Нельзя возвращать товар в неавтоматизированную торговую точку.';uk='Не можна повертати товар у неавтоматизовану торгову точку.'");
		Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ИНАГРО_Склад, "ТипСклада")
				= Перечисления.ТипыСкладов.НеавтоматизированнаяТорговаяТочка Тогда
			ТекстСообщения = ОбщегоНазначенияБПКлиентСервер.ПолучитьТекстСообщения(, "Корректность",
				НСтр("ru='Склад';uk='Склад'"),,, ТекстСообщения);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект,
				"Склад", "Объект", Отказ);
		КонецЕсли;
	КонецЕсли; 	
	
	// ПРОВЕРКА ТАБЛИЧНОЙ ЧАСТИ ТОВАРЫ

	Если Не ЭтоКомиссия Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Товары.ПереданныеСчетУчетаБУ");
	Иначе
		МассивНепроверяемыхРеквизитов.Добавить("Товары.СхемаРеализации");
	КонецЕсли;
	
	Если Не ПлательщикНДС Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Товары.СтавкаНДС");
	КонецЕсли;

	Если УказанДокументРеализации Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Товары.Себестоимость");
		МассивНепроверяемыхРеквизитов.Добавить("Товары.СебестоимостьНУ");
	Иначе
		Если Не ПлательщикНалогаНаПрибыльДо2015 Тогда
			МассивНепроверяемыхРеквизитов.Добавить("Товары.СебестоимостьНУ");
		КонецЕсли;
	КонецЕсли;

	// Исключаем из проверки те реквизиты табличных частей, обязательность которых
	//	зависит от значений других рекивизитов в строках табличных частей:
	МассивНепроверяемыхРеквизитов.Добавить("Товары.НалоговоеНазначение");
	МассивНепроверяемыхРеквизитов.Добавить("Товары.НалоговоеНазначениеДоходовИЗатрат");

	НехозВНД_НДС = Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяНеХозДеятельность;
	НехозВНД_НП  = Справочники.НалоговыеНазначенияАктивовИЗатрат.НКУ_НеХозДеятельность;
	
	// Для определения вида деятельности НДС
	ДопПараметрыОпределенияВДНДС = Новый Структура("БартерИЭкспорт");
	Если (РеквизитыДоговора.ВалютаВзаиморасчетов <> ВалютаРегламентированногоУчета) 
	   И (РеквизитыДоговора.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.Бартерный) Тогда
		// Бартер и экспорт
		ДопПараметрыОпределенияВДНДС.БартерИЭкспорт = Истина;
	Иначе
		ДопПараметрыОпределенияВДНДС.БартерИЭкспорт = Ложь;
	КонецЕсли;

	ИмяСписка = НСтр("ru='Товары';uk='Товари'");
	Для каждого СтрокаТаблицы Из Товары Цикл

		Префикс = "Товары[" + Формат(СтрокаТаблицы.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].";

		Если НЕ БухгалтерскийУчетВызовСервераПовтИсп.КомиссионныйТовар(СтрокаТаблицы.СчетУчетаБУ) Тогда
				 
			Если ПлательщикНалогаНаПрибыльДо2015 И НЕ ЭтоКомиссия Тогда   
				
				Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.НалоговоеНазначениеДоходовИЗатрат) Тогда
					
					ТекстСообщения = ОбщегоНазначенияБПКлиентСервер.ПолучитьТекстСообщения("Колонка",, 
						НСтр("ru='Налоговое назначение (доходов и затрат)';uk='Податкове призначення (доходів і витрат)'"),
						СтрокаТаблицы.НомерСтроки, ИмяСписка
					);
					Поле = Префикс + "НалоговоеНазначениеДоходовИЗатрат";
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
					
				ИначеЕсли СтрокаТаблицы.НалоговоеНазначениеДоходовИЗатрат = НехозВНД_НП Тогда 
					
					ТекстСообщения = ОбщегоНазначенияБПКлиентСервер.ПолучитьТекстСообщения("Колонка", "Корректность", 
						НСтр("ru='Налоговое назначение (доходов и затрат)';uk='Податкове призначення (доходів і витрат)'"),
						СтрокаТаблицы.НомерСтроки, ИмяСписка, 
						НСтр("ru='Вид налоговой деятельности при реализации не может быть ""Не хозяйственной деятельностью"".';uk='Вид податкової діяльності при реалізації не може бути ""Не господарською діяльністю"".'")
					);
					Поле = Префикс + "НалоговоеНазначениеДоходовИЗатрат";
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
					
				КонецЕсли;

				
			КонецЕсли;
				
			Если ПлательщикНДС Тогда
					
				Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.НалоговоеНазначение) Тогда
					
					ТекстСообщения = ОбщегоНазначенияБПКлиентСервер.ПолучитьТекстСообщения("Колонка",, 
						НСтр("ru='Налоговое назначение (НДС)';uk='Податкове призначення (ПДВ)'"),
						СтрокаТаблицы.НомерСтроки, ИмяСписка
					);
					Поле = Префикс + "НалоговоеНазначение";
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
					
				ИначеЕсли СтрокаТаблицы.НалоговоеНазначение = НехозВНД_НДС Тогда	
					
					ТекстСообщения = ОбщегоНазначенияБПКлиентСервер.ПолучитьТекстСообщения("Колонка", "Корректность", 
						НСтр("ru='Налоговое назначение (НДС)';uk='Податкове призначення (ПДВ)'"),
						СтрокаТаблицы.НомерСтроки, ИмяСписка,
						НСтр("ru='Вид налоговой деятельности при реализации не может быть ""Не хозяйственной деятельностью"".';uk='Вид податкової діяльності при реалізації не може бути ""Не господарською діяльністю"".'")
					);
					Поле = Префикс + "НалоговоеНазначение";
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);

					
				Иначе
							     
					Если НЕ СтрокаТаблицы.СтавкаНДС.Пустая()
					   И НЕ СтрокаТаблицы.НалоговоеНазначение.ВидДеятельностиНДС = Перечисления.ВидыДеятельностиНДС.ПропорциональноОблагаемая
					   И НЕ СтрокаТаблицы.НалоговоеНазначение.ВидДеятельностиНДС = УчетНДС.ПолучитьВидДеятельностиНДС(СтрокаТаблицы.СтавкаНДС, ДопПараметрыОпределенияВДНДС) 
					   И НЕ ЭтоКомиссия Тогда
						   
						ТекстСообщения = ОбщегоНазначенияБПКлиентСервер.ПолучитьТекстСообщения("Колонка", "Корректность", 
							НСтр("ru='Налоговое назначение (НДС)';uk='Податкове призначення (ПДВ)'"),
							СтрокаТаблицы.НомерСтроки, ИмяСписка,
							НСтр("ru='Налоговое назначение не соответствует ставке НДС, указанной в строке.';uk='Податкове призначення не відповідає ставці ПДВ, вказаній в рядку.'")
						);
						Поле = Префикс + "НалоговоеНазначение";
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
						
					КонецЕсли;
						
				КонецЕсли;
					
			КонецЕсли;
			
		КонецЕсли;

	КонецЦикла;
	
	Если НЕ ЭтоКомиссия Тогда
		// Схемы реализации должны быть заполнены правильно
		МассивРеквизитовДляПроверки = Новый Массив;
		МассивРеквизитовДляПроверки.Добавить("СчетВычетовИзДоходов");
		МассивРеквизитовДляПроверки.Добавить("СчетСебестоимостиПриВозврате");
															 
		БухгалтерскийУчет.ПроверитьСхемыРеализацииТабличнойЧастиНаЗаполненость(
			ЭтотОбъект, 
			"Товары", ИмяСписка, 
			"СхемаРеализации", НСтр("ru='Схема реализации';uk='Схема реалізації'") , 
			МассивРеквизитовДляПроверки, 
			Отказ
		);

	КонецЕсли;
	
	Если ИНАГРО_ВидПоступления = Перечисления.ИНАГРО_ВидыПоступленияТоваров.ПоОрдеру И ИНАГРО_ОрдерВТЧ Тогда // ИНАГРО
		ПроверяемыеРеквизиты.Добавить("Товары.ИНАГРО_Ордер");
	КонецЕсли;
	
	// Проверка табличной части "Возвратная тара"

	Если УказанДокументРеализации Тогда
		МассивНепроверяемыхРеквизитов.Добавить("ВозвратнаяТара.Себестоимость");
		МассивНепроверяемыхРеквизитов.Добавить("ВозвратнаяТара.СебестоимостьНУ");
	Иначе
		Если Не ПлательщикНалогаНаПрибыльДо2015 Тогда
			МассивНепроверяемыхРеквизитов.Добавить("ВозвратнаяТара.СебестоимостьНУ");
		КонецЕсли;
	КонецЕсли;
	
	// Исключаем из проверки те реквизиты табличных частей, обязательность которых
	//	зависит от значений других рекивизитов в строках табличных частей:
	МассивНепроверяемыхРеквизитов.Добавить("ВозвратнаяТара.НалоговоеНазначение");
	МассивНепроверяемыхРеквизитов.Добавить("ВозвратнаяТара.НалоговоеНазначениеДоходовИЗатрат");	
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьВозвратнуюТару") ИЛИ Внешнеэкономический Тогда
		МассивНепроверяемыхРеквизитов.Добавить("ВозвратнаяТара.Номенклатура");
		МассивНепроверяемыхРеквизитов.Добавить("ВозвратнаяТара.Количество");
		МассивНепроверяемыхРеквизитов.Добавить("ВозвратнаяТара.Сумма");
		МассивНепроверяемыхРеквизитов.Добавить("ВозвратнаяТара.СчетУчетаБУ");
		МассивНепроверяемыхРеквизитов.Добавить("ВозвратнаяТара.Себестоимость");
		МассивНепроверяемыхРеквизитов.Добавить("ВозвратнаяТара.СебестоимостьНУ");

	ИначеЕсли ВозвратнаяТара.Количество() > 0 Тогда

		ИмяСписка = НСтр("ru='Возвратная тара';uk='Зворотна тара'");
		Для каждого СтрокаТаблицы Из ВозвратнаяТара Цикл

			Префикс = "ВозвратнаяТара[" + Формат(СтрокаТаблицы.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].";
					
			Если ПлательщикНалогаНаПрибыльДо2015 Тогда   
				
				Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.НалоговоеНазначениеДоходовИЗатрат) Тогда
					
					ТекстСообщения = ОбщегоНазначенияБПКлиентСервер.ПолучитьТекстСообщения("Колонка",, 
						НСтр("ru='Налоговое назначение (доходов и затрат)';uk='Податкове призначення (доходів і витрат)'"),
						СтрокаТаблицы.НомерСтроки, ИмяСписка
					);
					Поле = Префикс + "НалоговоеНазначениеДоходовИЗатрат";
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
					
				ИначеЕсли СтрокаТаблицы.НалоговоеНазначениеДоходовИЗатрат = НехозВНД_НП Тогда 
					
					ТекстСообщения = ОбщегоНазначенияБПКлиентСервер.ПолучитьТекстСообщения("Колонка", "Корректность", 
						НСтр("ru='Налоговое назначение (доходов и затрат)';uk='Податкове призначення (доходів і витрат)'"),
						СтрокаТаблицы.НомерСтроки, ИмяСписка, 
						НСтр("ru='Вид налоговой деятельности при реализации не может быть ""Не хозяйственной деятельностью"".';uk='Вид податкової діяльності при реалізації не може бути ""Не господарською діяльністю"".'")
					);
					Поле = Префикс + "НалоговоеНазначениеДоходовИЗатрат";
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
					
				КонецЕсли;
				
			КонецЕсли;
				
			Если ПлательщикНДС Тогда
				
				Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.НалоговоеНазначение) Тогда
					
					ТекстСообщения = ОбщегоНазначенияБПКлиентСервер.ПолучитьТекстСообщения("Колонка",, 
						НСтр("ru='Налоговое назначение (НДС)';uk='Податкове призначення (ПДВ)'"),
						СтрокаТаблицы.НомерСтроки, ИмяСписка
					);
					Поле = Префикс + "НалоговоеНазначение";
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
					
				ИначеЕсли СтрокаТаблицы.НалоговоеНазначение = НехозВНД_НДС Тогда	
					
					ТекстСообщения = ОбщегоНазначенияБПКлиентСервер.ПолучитьТекстСообщения("Колонка", "Корректность", 
						НСтр("ru='Налоговое назначение (НДС)';uk='Податкове призначення (ПДВ)'"),
						СтрокаТаблицы.НомерСтроки, ИмяСписка,
						НСтр("ru='Вид налоговой деятельности при реализации не может быть ""Не хозяйственной деятельностью"".';uk='Вид податкової діяльності при реалізації не може бути ""Не господарською діяльністю"".'")
					);
					Поле = Префикс + "НалоговоеНазначение";
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);

					
				Иначе
							     
					Если НЕ СтрокаТаблицы.НалоговоеНазначение.ВидДеятельностиНДС = Перечисления.ВидыДеятельностиНДС.ПропорциональноОблагаемая
					   И НЕ СтрокаТаблицы.НалоговоеНазначение.ВидДеятельностиНДС = Перечисления.ВидыДеятельностиНДС.Необлагаемая Тогда
						   
						ТекстСообщения = ОбщегоНазначенияБПКлиентСервер.ПолучитьТекстСообщения("Колонка", "Корректность", 
							НСтр("ru='Налоговое назначение (НДС)';uk='Податкове призначення (ПДВ)'"),
							СтрокаТаблицы.НомерСтроки, ИмяСписка,
							НСтр("ru='Налоговое назначение не может быть облагаемым.';uk='Податкове призначення не може бути оподатковуваним.'")
						);
						Поле = Префикс + "НалоговоеНазначение";
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
						
					КонецЕсли;
						
				КонецЕсли;				
					
			КонецЕсли;

		КонецЦикла;	
		
		// Схемы реализации должны быть заполнены правильно
		МассивРеквизитовДляПроверки = Новый Массив;
		МассивРеквизитовДляПроверки.Добавить("СчетВычетовИзДоходов");
		МассивРеквизитовДляПроверки.Добавить("СчетСебестоимостиПриВозврате");
															 
		БухгалтерскийУчет.ПроверитьСхемыРеализацииТабличнойЧастиНаЗаполненость(
			ЭтотОбъект, 
			"ВозвратнаяТара", ИмяСписка, 
			"СхемаРеализации", НСтр("ru='Схема реализации';uk='Схема реалізації'") , 
			МассивРеквизитовДляПроверки, 
			Отказ
		);

	КонецЕсли;
	
	Если ИНАГРО_ВидПоступления = Перечисления.ИНАГРО_ВидыПоступленияТоваров.ПоОрдеру И ИНАГРО_ОрдерВТЧ Тогда // ИНАГРО
		ПроверяемыеРеквизиты.Добавить("ВозвратнаяТара.ИНАГРО_Ордер");
	КонецЕсли;

	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);

КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)

	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;

	ВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	РеквизитыДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДоговорКонтрагента, "ВалютаВзаиморасчетов");
	Внешнеэкономический = ЗначениеЗаполнено(ДоговорКонтрагента) И (РеквизитыДоговора.ВалютаВзаиморасчетов <> ВалютаРегламентированногоУчета);

	Если (НЕ ПолучитьФункциональнуюОпцию("ИспользоватьВозвратнуюТару") ИЛИ Внешнеэкономический)
		И ВозвратнаяТара.Количество() > 0 Тогда
		ВозвратнаяТара.Очистить();
	КонецЕсли;
	
	СчетУчетаРасчетовПоАвансам       = СчетУчетаРасчетовСКонтрагентом;	
	СчетУчетаРасчетовПоТареПоАвансам = СчетУчетаРасчетовПоТаре;	
	
	Если АвторасчетНДС Тогда
		// соответствие для хранения погрешностей округлений
		ПогрешностиОкругления = Новый Соответствие();
		// пересчет сумм НДС с учетом ошибок округления
		УчетНДСКлиентСервер.ПересчитатьНДСсУчетомПогрешностиОкругления(Товары, Ссылка, СуммаВключаетНДС, ПогрешностиОкругления, "Товары", Строка(ВалютаДокумента));
	КонецЕсли;
	
	// Посчитать суммы документа и записать ее в соответствующий реквизит шапки для показа в журналах
	СуммаДокумента = УчетНДС.ПолучитьСуммуДокументаСНДС(ЭтотОбъект, "Товары");
	
	ПлательщикНДС = УчетнаяПолитика.ПлательщикНДС(Организация, Дата);
	ПлательщикНалогаНаПрибыльДо2015  = УчетнаяПолитика.ПлательщикНалогаНаПрибыльДо2015(Организация, Дата);
	
	Если НЕ ПлательщикНДС Тогда
		// организация - не плательщик НДС. Установим во всех ТЧ признак соответствующего учета НДС
		НеОБлНДСДеятельность = Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяХозДеятельность;
		
		Для каждого СтрокаТЧ  Из Товары Цикл
		    СтрокаТЧ.НалоговоеНазначение = НеОБлНДСДеятельность;
		КонецЦикла; 
		Для каждого СтрокаТЧ  Из ВозвратнаяТара Цикл
		    СтрокаТЧ.НалоговоеНазначение = НеОБлНДСДеятельность;
		КонецЦикла; 
	КонецЕсли; 
	
	Если НЕ ПлательщикНалогаНаПрибыльДо2015 Тогда
		
		Для каждого СтрокаТЧ  Из Товары Цикл
		    СтрокаТЧ.НалоговоеНазначениеДоходовИЗатрат = Неопределено;
			СтрокаТЧ.СебестоимостьНУ = 0;
		КонецЦикла; 
		
		Для каждого СтрокаТЧ  Из ВозвратнаяТара Цикл
		    СтрокаТЧ.НалоговоеНазначениеДоходовИЗатрат = Неопределено;
			СтрокаТЧ.СебестоимостьНУ = 0;
		КонецЦикла; 
		
	КонецЕсли; 

	ДополнительныеСвойства.Вставить("РежимЗаписи", РежимЗаписи);
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)

	Перем Заголовок, СтруктураШапкиДокумента;
	Перем ТаблицаПоТоварам, ТаблицаПоТаре;

	// ПОДГОТОВКА ПРОВЕДЕНИЯ ПО ДАННЫМ ДОКУМЕНТА
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКПроведению(ЭтотОбъект);
	Если РучнаяКорректировка Тогда
		Возврат;
	КонецЕсли;

    мВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = НСтр("ru='Проведение документа ""';uk='Проведення документа ""'") + СокрЛП(Ссылка) + """: ";
	
	ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента);
	ПодготовитьПараметрыУчетнойПолитики(СтруктураШапкиДокумента, Отказ, Заголовок);	
	ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоТаре, Отказ, Заголовок);
	
	ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок);
	
	// Движения по документу
	Если Не Отказ Тогда
		ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоТаре, Отказ, Заголовок);
	КонецЕсли;
	
	Движения.Хозрасчетный.ВыполнитьДействияПередЗаписьюДвижений();
	
	// ИНАГРО++
	Если ИНАГРО_ОбщийВызовСервераПовтИсп.ЕстьБСПУ() Тогда
		КопияТаблицаПоТоварам = ТаблицаПоТоварам.Скопировать();
		КопияТаблицаПоТоварам.Колонки.Добавить("НаправлениеДвижения");
		КопияТаблицаПоТоварам.ЗаполнитьЗначения(Справочники.ИНАГРО_ВидыДвиженийВедомости.Возврат, "НаправлениеДвижения");
		ИНАГРО_Общий.ИНАГРО_ВедомостьДвиженийПриход(Движения, КопияТаблицаПоТоварам, СтруктураШапкиДокумента);
	КонецЕсли;	
	// ИНАГРО--
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКЗаписиДвижений(ЭтотОбъект);
	
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)

	ПроведениеСервер.ПодготовитьНаборыЗаписейКОтменеПроведения(ЭтотОбъект);
	Движения.Записать();


КонецПроцедуры

#КонецЕсли