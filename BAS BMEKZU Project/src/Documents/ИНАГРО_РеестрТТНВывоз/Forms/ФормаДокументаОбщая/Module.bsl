#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды 
		
	Если Параметры.Ключ.Пустая() Тогда
		ПодготовитьФормуНаСервере();		
	КонецЕсли;
	
	// Уведомим о появлении функционала рабочей даты
	ЭтаФорма.НастройкиПредупреждений = ОбщегоНазначенияБП.НастройкиПредупрежденийОбИзменениях("РабочаяДатаИзДокумента");
	 
	// Показываем, если это новый документ и сама рабочая дата еще не установлена.
	ЭтаФорма.НастройкиПредупреждений.РабочаяДатаИзДокумента = ЭтаФорма.НастройкиПредупреждений.РабочаяДатаИзДокумента
	 	И ЭтаФорма.Параметры.Ключ.Пустая()
	  	И НЕ ЗначениеЗаполнено(БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("РабочаяДата"));
	  
	УстановитьПараметрыВыбораВидОперации();
	
	// Если форма вызвана в режиме смена вида операции - модифицируем сразу при открытии, 
	// чтобы можно было подтвердить или отказаться от изменения путем сохранения или 
	// отказа от сохранения документа.
	Если Параметры.Свойство("ИзменитьВидОперации")
		И Параметры.ИзменитьВидОперации Тогда
		
		// Не кэшируем переменную Объект, т.к. может вызываться Форма.ИзменитьРеквизиты(),
		// которая меняет Объект.
		Объект.ВидОперации = Параметры.ЗначенияЗаполнения.ВидОперации;
		
		УстановитьЗаголовокФормы();		
		УправлениеФормой(ЭтаФорма);
		
		Модифицированность = Истина;
		
	КонецЕсли; 	
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ИсточникВыбора.ИмяФормы = "РегистрСведений.СоставКомиссий.Форма.ФормаВыбора" Тогда
		ЗаполнитьЗначенияСвойств(Объект, ВыбранноеЗначение);
		Модифицированность = Истина;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
		
	Если  ТипЗнч(Параметр) = Тип("Структура") 
		И Параметр.Свойство("ИдентификаторВызывающейФормы")
		И Параметр.ИдентификаторВызывающейФормы = УникальныйИдентификатор Тогда
		Если ИмяСобытия = "СозданЛабораторныйАнализ" ИЛИ ИмяСобытия = "ИзмененЛабораторныйАнализ" Тогда			
			Если ИНАГРО_Элеватор.ЛабораторныйАнализПроверкаЗаполнения(Параметр.ДокументСсылка, ПолучитьПараметрыДляПроверкиЗаполнения()) Тогда
				Объект.ЛабораторныйАнализ = Параметр.ДокументСсылка;
				ЛабораторныйАнализПриИзменении(Неопределено);
				Модифицированность = Истина;
			КонецЕсли;
		КонецЕсли;
	Иначе
		ОбщегоНазначенияБПКлиент.ОбработкаОповещенияФормыДокумента(ЭтаФорма, Объект.Ссылка, ИмяСобытия, Параметр, Источник);
	КонецЕсли;

	//Если  ИмяСобытия = "СозданЛабораторныйАнализ"
	//	И ТипЗнч(Параметр) = Тип("Структура") 
	//	И Параметр.Свойство("ИдентификаторВызывающейФормы")
	//	И Параметр.ИдентификаторВызывающейФормы = УникальныйИдентификатор Тогда
	//	Объект.ЛабораторныйАнализ = Параметр.ДокументСсылка;
	//	ЛабораторныйАнализПриИзмененииНаСервере();
	//	Модифицированность = Истина;
	//Иначе
	//	ОбщегоНазначенияБПКлиент.ОбработкаОповещенияФормыДокумента(ЭтаФорма, Объект.Ссылка, ИмяСобытия, Параметр, Источник);
	//КонецЕсли;	
		
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	ПодготовитьФормуНаСервере();

КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
			
	ЗаполнитьДобавленныеКолонкиТаблицыСписокТТН();

	УстановитьЗаголовокФормы();	
		
	УстановитьСостояниеДокумента();
	
КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	Если НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДатаДокумента) Тогда
		// Изменение времени не влияет на поведение документа.
		ТекущаяДатаДокумента = Объект.Дата;
		Возврат;
	КонецЕсли;
	
	// Общие проверки условий по датам.
	ТребуетсяВызовСервера = ИНАГРО_ЭлеваторКлиент.ТребуетсяВызовСервераПриИзмененииДатыДокумента(Объект.Дата, ТекущаяДатаДокумента);
		
	// Если определили, что изменение даты может повлиять на какие-либо параметры, 
	// то передаем обработку на сервер.
	Если ТребуетсяВызовСервера Тогда
		ДатаПриИзмененииНаСервере();
	КонецЕсли;
	
	// Запомним новую дату документа.
	ТекущаяДатаДокумента = Объект.Дата;

КонецПроцедуры

&НаСервере
Процедура ДатаПриИзмененииНаСервере()
	
	УстановитьФункциональныеОпцииФормы();
	
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ВидОперацииПриИзменении(Элемент)
	
	ВидОперацииПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ВидОперацииПриИзмененииНаСервере()
	
	Объект.Услуги.Очистить();
	
	УстановитьЗаголовокФормы(); 	
	
	УправлениеФормой(ЭтаФорма);	
		
КонецПроцедуры

&НаКлиенте
Процедура ВидОперацииНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ВидОперацииПредыдущий = Объект.ВидОперации;

КонецПроцедуры

&НаКлиенте
Процедура ОтражатьВБухгалтерскомУчетеПриИзменении(Элемент)
	
	Если Объект.ОтражатьВБухгалтерскомУчете Тогда		
		ТекстВопроса = НСтр("ru='Установить счета бухгалтерского учета в соответствии со значениями по умолчанию?';uk='Встановити рахунки бухгалтерського обліку відповідно до значень за замовчуванням?'");
	Иначе
		ТекстВопроса = НСтр("ru='Очистить счета бухгалтерского учета?';uk='Очистити рахунки бухгалтерського обліку?'");
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ОтражатьВБухгалтерскомУчетеПриИзмененииЗавершение", ЭтотОбъект, Параметры);
	ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);	
		
КонецПроцедуры

&НаКлиенте
Процедура ОтражатьВБухгалтерскомУчетеПриИзмененииЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		УправлениеФормой(ЭтаФорма); 
		Возврат;
	КонецЕсли;
	
	ДанныеОбъекта = Новый Структура("Организация, Склад, Номенклатура, ОтражатьВБухгалтерскомУчете, СчетЗатрат"); 
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
	ОтражатьВБухгалтерскомУчетеПриИзмененииЗавершениеНаСервере(ДанныеОбъекта);
	
	Объект.СчетЗатрат = ДанныеОбъекта.СчетЗатрат;
		
	УправлениеФормой(ЭтаФорма);
   
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОтражатьВБухгалтерскомУчетеПриИзмененииЗавершениеНаСервере(ДанныеОбъекта)
	
	Если ДанныеОбъекта.ОтражатьВБухгалтерскомУчете Тогда		
		ДанныеОбъекта.СчетЗатрат = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаУчетаНоменклатуры(ДанныеОбъекта.Организация, ДанныеОбъекта.Номенклатура, ДанныеОбъекта.Склад).СчетУчетаДавСырья;		
	Иначе		
		ДанныеОбъекта.СчетЗатрат = ПланыСчетов.Хозрасчетный.ПустаяСсылка();		
	КонецЕсли;	
	   
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)

	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		ОрганизацияПриИзмененииНаСервере();
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()
	
	Руководители = ИНАГРО_Элеватор.ОтветственныеЛицаОрганизации(Объект.Организация, Объект.Дата);
	Объект.НачальникОхраны = Руководители.НачальникОхраны;
	
	УстановитьФункциональныеОпцииФормы();	
	
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ВладелецПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.Владелец) Тогда
		
		ПараметрыОтбораДоговора = ПолучитьПараметрыДляДоговоров();
		
		ИНАГРО_ЭлеваторЗаполнениеДокументов.ПриИзмененииЗначенияКонтрагента(Объект.Дата, Объект.Организация, Объект.Владелец, Объект.ДоговорКонтрагента, ПараметрыОтбораДоговора);
		
		ВладелецПриИзмененииНаСервере();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВладелецПриИзмененииНаСервере()
	
	СчетаУчета = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаУчетаНоменклатуры(Объект.Организация, Объект.Номенклатура, Объект.Склад);
	
	Если СобственноеПодразделение Тогда
		Объект.ОтражатьПоЗатратам = Истина;
		Объект.СчетЗатрат = СчетаУчета.СчетУчетаБУ;
	Иначе
		Объект.ОтражатьПоЗатратам = Ложь;
		Объект.СчетЗатрат = СчетаУчета.СчетУчетаДавСырья;					
	КонецЕсли;
	
	Если Объект.ОтражатьПоЗатратам Тогда
		Объект.ОтражатьВБухгалтерскомУчете = Ложь;			
	КонецЕсли;	
	
	УстановитьФункциональныеОпцииФормы();	

	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура СкладПриИзменении(Элемент)

	Если ЗначениеЗаполнено(Объект.Склад) Тогда
		СкладПриИзмененииНаСервере();
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура СкладПриИзмененииНаСервере()	
		
	Объект.МестоХранения = Справочники.ИНАГРО_МестаХранения.ПустаяСсылка();

	УстановитьФункциональныеОпцииФормы(); 	
	
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ВидХраненияПриИзменении(Элемент)
	
	ПараметрыОтбораДоговора = ПолучитьПараметрыДляДоговоров();
	
	ИНАГРО_ЭлеваторЗаполнениеДокументов.ПриИзмененииЗначенияКонтрагента(Объект.Дата, Объект.Организация, Объект.Владелец, Объект.ДоговорКонтрагента, ПараметрыОтбораДоговора);
	
КонецПроцедуры

#Область ОбработчикиСобытийЭлементовПанелиТранспортКультура

&НаКлиенте
Процедура НоменклатураПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.Номенклатура) Тогда
		
		ПараметрыДляРасчетаЗачетногоВеса = ПолучитьПараметрыДляРасчетаЗачетногоВеса(ЭтаФорма);
		
		Объект.ЗачетныйВес = ИНАГРО_Элеватор.ЗачетныйВесПриПроведении(ПараметрыДляРасчетаЗачетногоВеса);
		
		Если Объект.ОтражатьВБухгалтерскомУчете Тогда
			
			ДанныеОбъекта = Новый Структура(
				"Организация, Номенклатура, Склад, 
				|СчетЗатрат, ОтражатьПоЗатратам");
			ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
			
			НоменклатураПриИзмененииНаСервере(ДанныеОбъекта);
			
			ЗаполнитьЗначенияСвойств(Объект, ДанныеОбъекта);
			
		КонецЕсли;
		
		УправлениеФормой(ЭтаФорма);
		
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Процедура НоменклатураПриИзмененииНаСервере(ДанныеОбъекта)
	
	СчетаУчета = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаУчетаНоменклатуры(ДанныеОбъекта.Организация, ДанныеОбъекта.Номенклатура, ДанныеОбъекта.Склад);
	
	Если ДанныеОбъекта.ОтражатьПоЗатратам Тогда			
		ДанныеОбъекта.СчетЗатрат = СчетаУчета.СчетУчетаБУ;					
	Иначе
		ДанныеОбъекта.СчетЗатрат = СчетаУчета.СчетУчетаДавСырья;					
	КонецЕсли;
		 		
КонецПроцедуры

&НаКлиенте
Процедура УрожайПриИзменении(Элемент)
	
	ПараметрыОтбораДоговора = ПолучитьПараметрыДляДоговоров();
	
	ИНАГРО_ЭлеваторЗаполнениеДокументов.ПриИзмененииЗначенияКонтрагента(Объект.Дата, Объект.Организация, Объект.Владелец, Объект.ДоговорКонтрагента, ПараметрыОтбораДоговора);
	
КонецПроцедуры

&НаКлиенте
Процедура ВесОбразцовПриИзменении(Элемент)
	
	ПараметрыДляРасчетаЗачетногоВеса = ПолучитьПараметрыДляРасчетаЗачетногоВеса(ЭтаФорма);
	
	Объект.ЗачетныйВес = ИНАГРО_Элеватор.ЗачетныйВесПриПроведении(ПараметрыДляРасчетаЗачетногоВеса);
	
	ПересчитатьОбщийФизическийВес(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ФизическийВесПриИзменении(Элемент)
	
	ПараметрыДляРасчетаЗачетногоВеса = ПолучитьПараметрыДляРасчетаЗачетногоВеса(ЭтаФорма);
	
	Объект.ЗачетныйВес = ИНАГРО_Элеватор.ЗачетныйВесПриПроведении(ПараметрыДляРасчетаЗачетногоВеса);
	
	ПересчитатьОбщийФизическийВес(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ЛабораторныйАнализПриИзменении(Элемент)
	
	ДанныеОбъекта = Новый Структура(
		"ЛабораторныйАнализ, НомерАнализа, Влажность, 
		|СорнаяПримесь, ЗерноваяПримесь, ЗачетныйВес,
		|Масличность");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект); 

	ПараметрыДляРасчетаЗачетногоВеса = ПолучитьПараметрыДляРасчетаЗачетногоВеса(ЭтаФорма);

	ИНАГРО_Элеватор.ЛабораторныйАнализПриИзмененииНаСервере(ДанныеОбъекта, ПараметрыДляРасчетаЗачетногоВеса);
	
	ЗаполнитьЗначенияСвойств(Объект, ДанныеОбъекта);
		
	Если НЕ ОтключитьАвтоматическоеНачислениеУслуг Тогда		
		ЗаполнитьУслугиНаСервере();
	КонецЕсли;

	УстановитьДоступностьПоказателейКачества(ЭтаФорма);	
	
КонецПроцедуры

&НаКлиенте
Процедура ЛабораторныйАнализНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыОтбора = Новый Структура;
	
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		ПараметрыОтбора.Вставить("Организация",        Объект.Организация);		
	КонецЕсли;	
	Если ЗначениеЗаполнено(Объект.Владелец) Тогда
		ПараметрыОтбора.Вставить("Владелец",           Объект.Владелец);
	КонецЕсли;	
	Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		ПараметрыОтбора.Вставить("ДоговорКонтрагента", Объект.ДоговорКонтрагента);		
	КонецЕсли;	
	Если ЗначениеЗаполнено(Объект.Склад) Тогда
		ПараметрыОтбора.Вставить("Склад",              Объект.Склад);
	КонецЕсли;	
	Если ЗначениеЗаполнено(Объект.ВидХранения) Тогда
		ПараметрыОтбора.Вставить("ВидХранения",        Объект.ВидХранения);
	КонецЕсли;	
	Если ЗначениеЗаполнено(Объект.Номенклатура) Тогда
		ПараметрыОтбора.Вставить("Номенклатура",       Объект.Номенклатура);
	КонецЕсли;	
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Отбор",  ПараметрыОтбора);
	ПараметрыФормы.Вставить("Ссылка", Объект.Ссылка);
	
	ОткрытьФорму("Документ.ИНАГРО_ЛабораторныйАнализ.Форма.ФормаВыбора", ПараметрыФормы, Элемент, УникальныйИдентификатор, , , , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры

&НаКлиенте
Процедура ВлажностьПриИзменении(Элемент)
	
	ПараметрыДляРасчетаЗачетногоВеса = ПолучитьПараметрыДляРасчетаЗачетногоВеса(ЭтаФорма);
	
	Объект.ЗачетныйВес = ИНАГРО_Элеватор.ЗачетныйВесПриПроведении(ПараметрыДляРасчетаЗачетногоВеса);	
		
КонецПроцедуры

&НаКлиенте
Процедура СорнаяПримесьПриИзменении(Элемент)
	
	ПараметрыДляРасчетаЗачетногоВеса = ПолучитьПараметрыДляРасчетаЗачетногоВеса(ЭтаФорма);
	
	Объект.ЗачетныйВес = ИНАГРО_Элеватор.ЗачетныйВесПриПроведении(ПараметрыДляРасчетаЗачетногоВеса); 	
		
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ПримечаниеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(
		Элемент.ТекстРедактирования,
		ЭтотОбъект,
		"Объект.Примечание",
		НСтр("ru='Примечание';uk='Примітка'"));

КонецПроцедуры

&НаКлиенте
Процедура ОписаниеДвиженияФормы36НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(
		Элемент.ТекстРедактирования,
		ЭтотОбъект,
		"Объект.ОписаниеДвиженияФормы36",
		НСтр("ru='Описание движения формы 36';uk='Опис руху форми 36'"));

КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(
		Элемент.ТекстРедактирования,
		ЭтотОбъект,
		"Объект.Комментарий");

КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписокТТН

&НаКлиенте
Процедура СписокТТНТТНПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.СписокТТН.ТекущиеДанные;
	
	ДанныеСтрокиТаблицы = Новый Структура("ТТН, НомерТТН, Вес, Транспорт, ИндексКартинки");
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, ТекущиеДанные); 	
	
	СписокТТНТТНПриИзмененииНаСервере(ДанныеСтрокиТаблицы);
	
	ЗаполнитьДобавленныеКолонкиСтрокиТаблицыСписокТТН(ДанныеСтрокиТаблицы);	
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтрокиТаблицы);	
		
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СписокТТНТТНПриИзмененииНаСервере(СтрокаТабличнойЧасти)
	
	СтрокаТабличнойЧасти.НомерТТН  = СтрокаТабличнойЧасти.ТТН.Номер;
	СтрокаТабличнойЧасти.Вес       = СтрокаТабличнойЧасти.ТТН.Вес;
	СтрокаТабличнойЧасти.Транспорт = Строка(СтрокаТабличнойЧасти.ТТН.НомерТранспорта);
		
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыУслуги

&НаКлиенте
Процедура УслугиНоменклатураПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Услуги.ТекущиеДанные;

	ВидКультурыДляРасчетаСтоимостиУслуги = ПолучитьВидКультурыДляРасчетаСтоимостиУслуги(Объект.Номенклатура);
	
	ТекущиеДанные.Цена = ИНАГРО_Элеватор.ПолучитьЦенуУслугиЭлеватора(Объект.Организация, Объект.Дата, Объект.Владелец,
																	 Объект.ДоговорКонтрагента, ВидКультурыДляРасчетаСтоимостиУслуги,
																	 Объект.Урожай, ТекущиеДанные.Номенклатура);
																	 
	УслугиКоличествоЦенаПриИзменении();

КонецПроцедуры

&НаКлиенте
Процедура УслугиКоличествоПриИзменении(Элемент)
	
	УслугиКоличествоЦенаПриИзменении();
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиЦенаПриИзменении(Элемент)
	
	УслугиКоличествоЦенаПриИзменении();
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиКоличествоЦенаПриИзменении()
	
	ТекущиеДанные = Элементы.Услуги.ТекущиеДанные;
	
	ТекущиеДанные.Сумма = ТекущиеДанные.Количество * ТекущиеДанные.Цена;

КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура СоздатьЛабораторныйАнализ(Команда)
	
	ЗначенияЗаполнения = Новый Структура;
	ЗначенияЗаполнения.Вставить("Дата",               Объект.Дата);
	ЗначенияЗаполнения.Вставить("Ссылка",             ПредопределенноеЗначение("Документ.ИНАГРО_ЛабораторныйАнализ.ПустаяСсылка"));
	ЗначенияЗаполнения.Вставить("Организация",        Объект.Организация);
	ЗначенияЗаполнения.Вставить("Владелец",           Объект.Владелец);
	ЗначенияЗаполнения.Вставить("ДоговорКонтрагента", Объект.ДоговорКонтрагента);
	ЗначенияЗаполнения.Вставить("Склад",        	  Объект.Склад);
	ЗначенияЗаполнения.Вставить("ВидХранения",        Объект.ВидХранения);
	ЗначенияЗаполнения.Вставить("Урожай",             Объект.Урожай);
	ЗначенияЗаполнения.Вставить("Номенклатура",       Объект.Номенклатура);
	ЗначенияЗаполнения.Вставить("Влажность",          Объект.Влажность);
	ЗначенияЗаполнения.Вставить("СорнаяПримесь",      Объект.СорнаяПримесь);
	ЗначенияЗаполнения.Вставить("ЗерноваяПримесь",    Объект.ЗерноваяПримесь);
	
	ЗначенияЗаполнения.Вставить("ВесОбразцов",        Объект.ВесОбразцов);
	ЗначенияЗаполнения.Вставить("МассаПартии",        Объект.ФизическийВес);	
	
	ИНАГРО_ЭлеваторКлиент.СоздатьДокументНаОсновании(ЭтаФорма, ЗначенияЗаполнения);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьУслуги(Команда)
	
	ЗаполнитьУслугиНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьУслугиНаСервере()
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");	
	ДокументОбъект.ЗаполнитьУслуги(); 	
	ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьСоставКомиссии(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимВыбора", Истина);

	ПараметрыФормы.Вставить("Отбор", Новый Структура("Организация", Объект.Организация));
	ОткрытьФорму("РегистрСведений.СоставКомиссий.Форма.ФормаВыбора", ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ПодготовитьФормуНаСервере()

	ТекущаяДатаДокумента = Объект.Дата;			

	УстановитьФункциональныеОпцииФормы();
	
	ЗаполнитьДобавленныеКолонкиТаблицыСписокТТН();
	
	УстановитьЗаголовокФормы();	

	УправлениеФормой(ЭтаФорма);

	УстановитьСостояниеДокумента();
	
	ПересчитатьОбщийФизическийВес(ЭтаФорма);

КонецПроцедуры 

&НаСервере
Процедура УстановитьФункциональныеОпцииФормы()

	ОбщегоНазначенияБПКлиентСервер.УстановитьПараметрыФункциональныхОпцийФормыДокумента(ЭтаФорма);	
	
	ТекущийПользователь                    = Пользователи.ТекущийПользователь();	
	
	ПараметрыУчетаЭлеватора                = ИНАГРО_Элеватор.ПолучитьПараметрыУчетаЭлеватора(Объект.Дата);
	ЛабораторияРаботаетВСистеме            = ПараметрыУчетаЭлеватора.ЛабораторияРаботаетВСистеме;
	ОтключитьАвтоматическоеНачислениеУслуг = ПараметрыУчетаЭлеватора.ОтключитьАвтоматическоеНачислениеУслуг;	
	
	СобственноеПодразделение               = ИНАГРО_Элеватор.ПолучитьДополнительныйРеквизитКонтрагента(Объект.Владелец, "СобственноеПодразделение");
	ВидимостьМестаХранения                 = ИНАГРО_Элеватор.ПолучитьДополнительныйРеквизитСклада(Объект.Склад, "ВестиУчетПоМестамХранения");
	
	ВидимостьМасличность                   = ИНАГРО_Элеватор.ПолучитьВидимостьМасличность(Объект.Дата);

КонецПроцедуры 

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)

	Элементы = Форма.Элементы;
	Объект   = Форма.Объект;
	
	Элементы.МестоХранения.Видимость		         = Форма.ВидимостьМестаХранения;
	Элементы.ЛабораторныйАнализ.Видимость            = Форма.ЛабораторияРаботаетВСистеме;
	Элементы.Отходы.Видимость = (Объект.ВидОперации  = ПредопределенноеЗначение("Перечисление.ИНАГРО_ВидыОперацийРеестрТТНВывоз.ВывозОтходов"));
	Элементы.ОтражатьВБухгалтерскомУчете.Доступность = НЕ Объект.ОтражатьПоЗатратам;	
	Элементы.СчетЗатрат.Видимость                    = НЕ Объект.ОтражатьПоЗатратам; 
	
	Элементы.СписокТТНВес.Доступность                = ИНАГРО_ЭлеваторУправлениеПользователями.ЗапретитьВручнуюИзменятьВесТТН(Форма.ТекущийПользователь);	
	
	// Масличность
	Элементы.Масличность.Видимость                   = Форма.ВидимостьМасличность;

	УстановитьДоступностьПоказателейКачества(Форма);	
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПараметрыВыбораВидОперации()
	
	МассивВидовОпераций = Документы.ИНАГРО_РеестрТТНВывоз.ПолучитьФиксированныйМассивВидовОпераций();
	
	ПараметрМассивВидовОпераций = Новый ПараметрВыбора("Отбор.Ссылка", МассивВидовОпераций);
	
	НовыйМассив = Новый Массив();
	НовыйМассив.Добавить(ПараметрМассивВидовОпераций);
	НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);
	
	Элементы.ВидОперации.ПараметрыВыбора = НовыеПараметры;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗаголовокФормы()
	
	ОбъектФормы = ЭтаФорма.Объект;

	ТекстЗаголовка = НСтр("ru='Реестр товарно-транспортных накладных (вывоз)';uk='Реєстр товарно-транспортних накладних (вивезення)'");
	
	Если ЗначениеЗаполнено(ОбъектФормы.Ссылка) Тогда
		ТекстЗаголовка = ТекстЗаголовка + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru=' %1 от %2';uk=' %1 від %2'"), ОбъектФормы.Номер, ОбъектФормы.Дата);
	Иначе
		ТекстЗаголовка = ТекстЗаголовка + НСтр("ru=' (создание)';uk=' (створення)'");
	КонецЕсли;
	
	ЭтаФорма.Заголовок = ТекстЗаголовка + " (" + Строка(ОбъектФормы.ВидОперации) + ")";

КонецПроцедуры

&НаСервере
Процедура УстановитьСостояниеДокумента()
	
	СостояниеДокумента = ОбщегоНазначенияБП.СостояниеДокумента(Объект);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьПоказателейКачества(Форма)
	
	Элементы = Форма.Элементы;
	Объект   = Форма.Объект;	
	
	СписокРеквизитов = Новый Структура("Влажность, СорнаяПримесь, ЗерноваяПримесь");	
	ИНАГРО_ЭлеваторКлиентСервер.УстановитьДоступностьРеквизитовПоНастройке(Форма, СписокРеквизитов, Форма.ЛабораторияРаботаетВСистеме, ЗначениеЗаполнено(Объект.ЛабораторныйАнализ));

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДобавленныеКолонкиТаблицыСписокТТН()
	
	Для Каждого СтрокаТабличнойЧасти Из Объект.СписокТТН Цикл			
		ЗаполнитьДобавленныеКолонкиСтрокиТаблицыСписокТТН(СтрокаТабличнойЧасти);		
	КонецЦикла;		
		
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьДобавленныеКолонкиСтрокиТаблицыСписокТТН(СтрокаТабличнойЧасти)
	
	Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.ТТН) Тогда
		Если СтрокаТабличнойЧасти.ТТН.Проведен Тогда
			СтрокаТабличнойЧасти.ИндексКартинки = 1;
		ИначеЕсли СтрокаТабличнойЧасти.ТТН.ПометкаУдаления Тогда
			СтрокаТабличнойЧасти.ИндексКартинки = 2;
		Иначе
			СтрокаТабличнойЧасти.ИндексКартинки = 0;
		КонецЕсли; 
	КонецЕсли; 			
		
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПересчитатьОбщийФизическийВес(Форма)
	
	Элементы = Форма.Элементы;
	Объект   = Форма.Объект;

	ТекстНадписи = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Всего физический вес: %1 + %2';uk='Всього фізична вага: %1 + %2'"), Объект.ФизическийВес, Объект.ВесОбразцов);
	
	Элементы.НадписьОбщийФизическийВес.Заголовок = ТекстНадписи;
	
	//Объект.ОбщийФизическийВес = Объект.ФизическийВес + Объект.ВесОбразцов;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьПараметрыДляДоговоров()

	ПараметрыОтбора = Новый Структура("ВидХранения, Урожай");
	ЗаполнитьЗначенияСвойств(ПараметрыОтбора, Объект);

	Возврат ПараметрыОтбора;

КонецФункции

&НаКлиенте
Функция ПолучитьПараметрыДляПроверкиЗаполнения()
	
	ПараметрыДляПроверкиЗаполнения = Новый Структура(
		"Склад, ВидХранения, Урожай, 
		|Номенклатура");
	ЗаполнитьЗначенияСвойств(ПараметрыДляПроверкиЗаполнения, Объект);

	Возврат ПараметрыДляПроверкиЗаполнения; 

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьПараметрыДляРасчетаЗачетногоВеса(Форма)

	Объект = Форма.Объект;
	
	ПараметрыДляРасчетаЗачетногоВеса = Новый Структура(
		"Ссылка, Дата, Организация,
		|Владелец, ДоговорКонтрагента, Номенклатура,
		|Склад, Влажность, СорнаяПримесь,
		|ФизическийВес, ЗачетныйВес     
		|");
	ЗаполнитьЗначенияСвойств(ПараметрыДляРасчетаЗачетногоВеса, Объект);

	Возврат ПараметрыДляРасчетаЗачетногоВеса;

КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьВидКультурыДляРасчетаСтоимостиУслуги(Знач Номенклатура)
	
	ВидКультуры = ИНАГРО_Элеватор.ПолучитьДополнительныйРеквизитНоменклатуры(Номенклатура, "ВидКультуры");	

	Возврат ВидКультуры.ВидКультурыДляРасчетаСтоимостиУслуги;

КонецФункции

#КонецОбласти  

#Область СлужебныеПроцедурыИФункцииБСП

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти
