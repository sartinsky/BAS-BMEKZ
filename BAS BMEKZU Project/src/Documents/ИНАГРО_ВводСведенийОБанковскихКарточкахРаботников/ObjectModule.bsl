#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ОбработкаЗаполнения(Основание)

	Если НЕ ТипЗнч(Основание) = Тип("ДокументСсылка.ИНАГРО_ПриемНаРаботуВОрганизацию") Тогда
		Возврат;
	КонецЕсли;
	
	Организация = Основание.Организация;
	Ответственный = Основание.Ответственный;
	
	Для каждого ТекСтрока Из Основание.РаботникиОрганизации Цикл
		
		НоваяСтрока = РаботникиОрганизации.Добавить();
		
		НоваяСтрока.Сотрудник = ТекСтрока.Сотрудник;
		НоваяСтрока.СпособВыплаты = Перечисления.СпособыВыплатыЗарплаты.ЧерезКассу;
		
	КонецЦикла
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКПроведению(ЭтотОбъект);
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначенияБПВызовСервера.ПредставлениеДокументаПриПроведении(Ссылка);
		
	// получим реквизиты табличной части
	РезультатЗапросаПоРаботники = СформироватьЗапросПоРаботникиОрганизации();
	ВыборкаПоРаботникиОрганизации = РезультатЗапросаПоРаботники.Выбрать();
	
	Пока ВыборкаПоРаботникиОрганизации.Следующий() Цикл 
		
		// проверим очередную строку табличной части
		ПроверитьЗаполнениеСтрокиРаботникиОрганизации(ВыборкаПоРаботникиОрганизации, Отказ);
		
		Если НЕ Отказ Тогда
			
			// Заполним записи в наборах записей регистров
			ДобавитьСтрокуПараметрыВыплатыЗПРаботников(ВыборкаПоРаботникиОрганизации);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКЗаписиДвижений(ЭтотОбъект);

КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ИНАГРО_ПроведениеРасчетов.СформироватьКраткийСоставСотрудников(ЭтотОбъект, "РаботникиОрганизации");

КонецПроцедуры

#КонецОбласти 

#Область Проведение

Функция СформироватьЗапросПоРаботникиОрганизации()

	Запрос = Новый Запрос;
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка", Ссылка);
	Запрос.УстановитьПараметр("Организация", Организация);

	ТекстЗапроса = "
	|	ВЫБРАТЬ
	|	ТЧРаботникиОрганизации.Ссылка.Дата			КАК Дата,
	|	ТЧРаботникиОрганизации.Ссылка.Организация	КАК Организация,
	|	ТЧРаботникиОрганизации.НомерСтроки,
	|	ТЧРаботникиОрганизации.Сотрудник,
	|	ТЧРаботникиОрганизации.СпособВыплаты,
	|	ТЧРаботникиОрганизации.ДатаДействия,
	|	ТЧРаботникиОрганизации.Банк,
	|	ТЧРаботникиОрганизации.НомерКарточки	
	|
	|ИЗ	Документ." + Метаданные().Имя + ".РаботникиОрганизации КАК ТЧРаботникиОрганизации
	|	
	|ГДЕ	ТЧРаботникиОрганизации.Ссылка = &ДокументСсылка
	|	
	|";			   
	
	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос.Выполнить();

КонецФункции

Процедура ПроверитьЗаполнениеСтрокиРаботникиОрганизации(ВыборкаПоСтрокамДокумента, Отказ)

	СтрокаНачалаСообщенияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='В строке номер %1 табл. части ""Работники организации"": ';uk='У рядку номер %1 табл. частини ""Працівники організації"": '"), СокрЛП(ВыборкаПоСтрокамДокумента.НомерСтроки));
		
	Если ВыборкаПоСтрокамДокумента.СпособВыплаты = Перечисления.СпособыВыплатыЗарплаты.ЧерезБанк Тогда
		
		// ДатаДействия
		Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ДатаДействия) Тогда
			ОбщегоНазначенияБПКлиентСервер.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + НСтр("ru='не указана дата действия карточки!';uk='не зазначена дата дії картки!'"), Отказ);
		КонецЕсли;
		
		// Банк
		Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.Банк) Тогда
			ОбщегоНазначенияБПКлиентСервер.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + НСтр("ru='не указан банк!';uk='не зазначений банк!'"), Отказ);
		КонецЕсли;
		
		// НомерКарточки
		Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.НомерКарточки) Тогда
			ОбщегоНазначенияБПКлиентСервер.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + НСтр("ru='не указан номер счета карточки!';uk='не зазначений номер рахунку картки!'"), Отказ);
		КонецЕсли;
		
	КонецЕсли;	
		
КонецПроцедуры // ПроверитьЗаполнениеСтрокиРаботникаОрганизации()

Процедура ДобавитьСтрокуПараметрыВыплатыЗПРаботников(ВыборкаПоРаботникиОрганизации)

	Движение = Движения.ИНАГРО_ПараметрыВыплатыЗПРаботников.Добавить();
	
	// Свойства
	Движение.Период				= ВыборкаПоРаботникиОрганизации.Дата;
	
	// Измерения
	Движение.Сотрудник			= ВыборкаПоРаботникиОрганизации.Сотрудник;
	Движение.Организация		= ВыборкаПоРаботникиОрганизации.Организация;
	
	// ресурсы
	Движение.СпособВыплаты		= ВыборкаПоРаботникиОрганизации.СпособВыплаты;
	Движение.Банк				= ВыборкаПоРаботникиОрганизации.Банк;
	Движение.НомерКарточки		= ВыборкаПоРаботникиОрганизации.НомерКарточки;
	Движение.ДатаДействия		= ВыборкаПоРаботникиОрганизации.ДатаДействия;
	
КонецПроцедуры // ДобавитьСтрокуПараметрыВыплатыЗПРаботников

#КонецОбласти 

#КонецЕсли





