#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	
	ОбщегоНазначенияБПКлиентСервер.УстановитьПараметрыФункциональныхОпцийФормыДокумента(ЭтаФорма);

	Если Параметры.Ключ.Пустая() Тогда
		ВыполнитьИнициализацию();
		ПодготовитьФормуНаСервере();
		// ИНАГРО++
		Параметры.Свойство("IDСтроки", ИНАГРО_IDСтроки);
		ИНАГРО_ЭтоНовый = Истина;
	Иначе
		ИНАГРО_ЭтоНовый = Ложь;
		// ИНАГРО--	
	КонецЕсли;
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом

	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	ВыполнитьИнициализацию();
	ПодготовитьФормуНаСервере();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)

	Если ИсточникВыбора.ИмяФормы = "Обработка.ПодборОсновныхСредств.Форма.Форма" Тогда
		ОбработкаВыбораНаСервере(ВыбранноеЗначение);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	ПодготовитьФормуНаСервере();

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	ОбщегоНазначенияБПКлиент.ОбработкаОповещенияФормыДокумента(ЭтаФорма, Объект.Ссылка, ИмяСобытия, Параметр, Источник);
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии() // ИНАГРО	
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ИНАГРО_ОбъектыБСПУ") Тогда
		
		Если НЕ Объект.Ссылка.Пустая() И ЗначениеЗаполнено(Объект.ИНАГРО_ДокументОперативногоУчета) И ИНАГРО_ЭтоНовый = Истина Тогда
			
			СтруктураВозврата = Новый Структура;
			СтруктураВозврата.Вставить("ДокументСсылка", Объект.Ссылка);
			СтруктураВозврата.Вставить("IDСтроки",  	 ИНАГРО_IDСтроки);
			
			Если ТипЗнч(Объект.ИНАГРО_ДокументОперативногоУчета) = Тип("ДокументСсылка.ИНАГРО_ПриплодИПривес") Тогда			
				Оповестить("ПриплодИПривес_ВозвратДокументСсылкаОС", СтруктураВозврата, ЭтаФорма); 			
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)

	ЗаполнитьИнвентарныеНомераОСИУправлениеФормой();

КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)

	Если НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДатаДокумента) Тогда
		// Изменение времени не влияет на поведение документа.
		ТекущаяДатаДокумента = Объект.Дата;
		Возврат;
	КонецЕсли;

	// Общие проверки условий по датам.
	ТребуетсяВызовСервера = ОбщегоНазначенияБПКлиент.ТребуетсяВызовСервераПриИзмененииДатыДокумента(Объект.Дата, 
		ТекущаяДатаДокумента);

	// Проверим наличие строк в табличной части.
	Если НЕ ТребуетсяВызовСервера Тогда
		Если Объект.ОС.Количество() > 0 Тогда
			ТребуетсяВызовСервера = НЕ ЗначениеЗаполнено(МаксПериодПервоначальныхСведенийОС) 
				ИЛИ (МаксПериодПервоначальныхСведенийОС >= Объект.Дата);
		КонецЕсли;
	КонецЕсли;
		
	// Если определили, что изменение даты может повлиять на какие-либо параметры, 
	// то передаем обработку на сервер.
	Если ТребуетсяВызовСервера Тогда
		ДатаПриИзмененииНаСервере();
	КонецЕсли;
	
	// Запомним новую дату документа.
	ТекущаяДатаДокумента = Объект.Дата;

КонецПроцедуры

&НаКлиенте
Процедура ОбъектСтроительстваПриИзменении(Элемент)

	Если ЗначениеЗаполнено(Объект.ОбъектСтроительства) Тогда 
		Объект.СчетУчетаБУВнеоборотногоАктива = ПолучитьСчетУчетаОбъектаСтроительства(
			Объект.Организация, Объект.ОбъектСтроительства);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования,ЭтотОбъект,"Объект.Комментарий");

КонецПроцедуры

&НаКлиенте
Процедура ЧтоНеВыполненоНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.ЧтоНеВыполнено", НСтр("ru='Что не выполнено';uk='Що не виконано'"));
КонецПроцедуры

&НаКлиенте
Процедура ЧтоИзменилосьНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.ЧтоИзменилось", НСтр("ru='Что изменилось';uk='Що змінилося'"));
КонецПроцедуры

&НаКлиенте
Процедура ВидУлучшенияПриИзменении(Элемент)
	УстановитьФлагПриАвтозаполненииНеИзменятьАмортизируемуюСтоимостьОСБУ();
	УправлениеФормой(ЭтаФорма);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицыФормыОС

&НаКлиенте
Процедура ОССтоимостьБУПриИзменении(Элемент)

	РассчитатьВычисляемыеПоляПоСтроке(Элементы.ОС.ТекущиеДанные);

	РассчитатьСтоимостьДляВычисленияАмортизации(Элементы.ОС.ТекущиеДанные, Истина, Ложь, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОССуммаМодернизацииБУПриИзменении(Элемент)

	РассчитатьВычисляемыеПоляПоСтроке(Элементы.ОС.ТекущиеДанные);

	РассчитатьСтоимостьДляВычисленияАмортизации(Элементы.ОС.ТекущиеДанные, Истина, Ложь, ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ОСАмортизацияБУПриИзменении(Элемент)

	РассчитатьВычисляемыеПоляПоСтроке(Элементы.ОС.ТекущиеДанные);

	РассчитатьСтоимостьДляВычисленияАмортизации(Элементы.ОС.ТекущиеДанные, Истина, Ложь, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОСАмортизацияЗаМесяцБУПриИзменении(Элемент)

	РассчитатьВычисляемыеПоляПоСтроке(Элементы.ОС.ТекущиеДанные);

	РассчитатьСтоимостьДляВычисленияАмортизации(Элементы.ОС.ТекущиеДанные, Истина, Ложь, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОССуммаУлучшенияВПределахНормНУПриИзменении(Элемент)

	РассчитатьСтоимостьДляВычисленияАмортизации(Элементы.ОС.ТекущиеДанные, Истина, Истина, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОССрокПолезногоИспользованияБУПриИзменении(Элемент)

	РассчитатьВычисляемыеПоляПоСтроке(Элементы.ОС.ТекущиеДанные);

	РассчитатьСрокИспользованияДляВычисленияАмортизации(Элементы.ОС.ТекущиеДанные, Истина, Ложь, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОСФактСрокИспользованияБУПриИзменении(Элемент)

	РассчитатьВычисляемыеПоляПоСтроке(Элементы.ОС.ТекущиеДанные);

	РассчитатьСрокИспользованияДляВычисленияАмортизации(Элементы.ОС.ТекущиеДанные, Истина, Ложь, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОССрокПолезногоИспользованияНУПриИзменении(Элемент)
	
	РассчитатьСрокИспользованияДляВычисленияАмортизации(Элементы.ОС.ТекущиеДанные, Ложь, Истина, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОСФактСрокИспользованияНУПриИзменении(Элемент)
	
	РассчитатьСрокИспользованияДляВычисленияАмортизации(Элементы.ОС.ТекущиеДанные, Ложь, Истина, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОСОбъемПродукцииРаботБУПриИзменении(Элемент)

	РассчитатьВычисляемыеПоляПоСтроке(Элементы.ОС.ТекущиеДанные);

КонецПроцедуры

&НаКлиенте
Процедура ОСФактОбъемПродукцииРаботБУПриИзменении(Элемент)

	РассчитатьВычисляемыеПоляПоСтроке(Элементы.ОС.ТекущиеДанные);

КонецПроцедуры

&НаКлиенте
Процедура ОССтоимостьНУПриИзменении(Элемент)

	РассчитатьВычисляемыеПоляПоСтроке(Элементы.ОС.ТекущиеДанные);

	РассчитатьСтоимостьДляВычисленияАмортизации(Элементы.ОС.ТекущиеДанные, Ложь, Истина, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОССуммаМодернизацииНУПриИзменении(Элемент)

	РассчитатьВычисляемыеПоляПоСтроке(Элементы.ОС.ТекущиеДанные);

	РассчитатьСтоимостьДляВычисленияАмортизации(Элементы.ОС.ТекущиеДанные, Ложь, Истина, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОСАмортизацияНУПриИзменении(Элемент)
	
	РассчитатьСтоимостьДляВычисленияАмортизации(Элементы.ОС.ТекущиеДанные, Ложь, Истина, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОСАмортизацияЗаМесяцНУПриИзменении(Элемент)
	
	РассчитатьСтоимостьДляВычисленияАмортизации(Элементы.ОС.ТекущиеДанные, Ложь, Истина, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОСОсновноеСредствоПриИзменении(Элемент)

	СтрокаТЧ = Элементы.ОС.ТекущиеДанные;
	ОсновноеСредство = СтрокаТЧ.ОсновноеСредство;
	Если НЕ ЗначениеЗаполнено(ОсновноеСредство) Тогда
		СтрокаТЧ.ИнвентарныйНомер = "";
	Иначе
		СтруктураСведений 					= СведенияОбИнвентарномНомереОС(ОсновноеСредство, Объект.Организация, Объект.Дата);
		СтрокаТЧ.ИнвентарныйНомер 			= СтруктураСведений.ИнвентарныйНомер;
		МаксПериодПервоначальныхСведенийОС 	= Макс(МаксПериодПервоначальныхСведенийОС, СтруктураСведений.Период);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОСОсновноеСредствоНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка) // ИНАГРО
	
	Если ИНАГРО_ОбщийВызовСервераПовтИсп.ЕстьБСПУ() И ЗначениеЗаполнено(Объект.ИНАГРО_ДокументОперативногоУчета) Тогда	
		
		СтандартнаяОбработка = Ложь;
		
		МодульИНАГРО_БиологическиеАктивы = ОбщегоНазначенияКлиент.ОбщийМодуль("ИНАГРО_БиологическиеАктивы");
		
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("Ссылка", МодульИНАГРО_БиологическиеАктивы.СформироватьСписокОС(Объект.ИНАГРО_БиологическийАктив, Объект.ИНАГРО_Склад, Объект.Дата));
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Отбор", ПараметрыОтбора);
		ОткрытьФорму("Справочник.ОсновныеСредства.ФормаВыбора", ПараметрыФормы, Элемент);
		
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗаполнитьПоНаименованию(Команда)

	ОсновноеСредство = УправлениеВнеоборотнымиАктивамиКлиент.ПолучитьОСДляЗаполнениеПоНаименованию(
		ПараметрыЗаполненияПоНаименованию(ЭтаФорма));

	Если ЗначениеЗаполнено(ОсновноеСредство) Тогда
		ЗаполнитьПоНаименованиюСервер(ОсновноеСредство);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура Подбор(Команда)

	ПараметрыФормы = Новый Структура;
	Если Объект.ОС.Количество() > 0 Тогда
		ПараметрыФормы.Вставить("АдресОСВХранилище", ПоместитьОСВХранилище());
	КонецЕсли;

	ОткрытьФорму("Обработка.ПодборОсновныхСредств.Форма.Форма", ПараметрыФормы, ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура РассчитатьСуммы(Команда)

	Если Объект.Проведен Тогда
		ПоказатьПредупреждение(Неопределено, НСтр("ru='Заполнение возможно только в непроведенном документе';uk='Заповнення можливе тільки в непроведеному документі'"), 60);
		Возврат;
	КонецЕсли;

	ОчиститьСообщения();

	Отказ = Ложь;

	Если НЕ ЗначениеЗаполнено(Объект.ОбъектСтроительства) Тогда
		ТекстСообщения = ОбщегоНазначенияБПКлиентСервер.ПолучитьТекстСообщения(, , НСтр("ru='Объект строительства';uk=""Об'єкт будівництва"""));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Объект.ОбъектСтроительства", , Отказ);
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		ТекстСообщения = ОбщегоНазначенияБПКлиентСервер.ПолучитьТекстСообщения(, , НСтр("ru='Организация';uk='Організація'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Объект.Организация", , Отказ);
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(Объект.СчетУчетаБУВнеоборотногоАктива) Тогда
		ТекстСообщения = ОбщегоНазначенияБПКлиентСервер.ПолучитьТекстСообщения(, , НСтр("ru='Счет учета внеоборотного актива';uk='Рахунок обліку внеоборотного активу'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Объект.СчетУчетаБУВнеоборотногоАктива", , Отказ);
	КонецЕсли;

	Если Отказ Тогда
		Возврат;
	КонецЕсли;

	СтруктураСтоимости = УправлениеНеоборотнымиАктивами.РасчитатьСтоимостьОбъектаСтроительства(Объект.СчетУчетаБУВнеоборотногоАктива, 
	                                                            Объект.ОбъектСтроительства,
																Объект.Организация, 
																КонецМесяца(Объект.Дата));

	ЗаполнитьЗначенияСвойств(Объект, СтруктураСтоимости);

	ДатаНКУ2015 = '2015 01 01';
	
	Если Объект.Дата >= ДатаНКУ2015 Тогда
		// для документов 2015 года СтоимостьНУ = СтоимостьБУ  
		Объект.СтоимостьНУ = СтруктураСтоимости.СтоимостьБУ;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДляСпискаОС(Команда)

	Если Объект.Проведен Тогда
		ПоказатьПредупреждение(Неопределено, НСтр("ru='Заполнение возможно только в непроведенном документе';uk='Заповнення можливе тільки в непроведеному документі'"), 60);
		Возврат;
	КонецЕсли;

	ОчиститьСообщения();

	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		ТекстСообщения = ОбщегоНазначенияБПКлиентСервер.ПолучитьТекстСообщения(, , НСтр("ru='Организация';uk='Організація'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Объект.Организация");
		Возврат;
	КонецЕсли;

	ТекстВопроса = НСтр("ru='При заполнении существующие данные будут пересчитаны!
|Продолжить?';uk='При заповненні існуючі дані будуть перераховані!
|Продовжити?'");
	ПоказатьВопрос(Новый ОписаниеОповещения("ЗаполнитьДляСпискаОСЗавершение", ЭтотОбъект), ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДляСпискаОСЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
	    ЗаполнитьДляСпискаОССервер();
    КонецЕсли;
    
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьОтчетРасчетЗатратНаУлучшениеОС(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Ссылка", Объект.Ссылка);
	ОткрытьФорму("Отчет.РасчетЗатратНаУлучшениеОС.ФормаОбъекта", ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ВыполнитьИнициализацию()

	Если ИнициализацияВыполнена Тогда
		Возврат;
	КонецЕсли;

	ИнициализацияВыполнена = Истина;

	ВалютаРегламентированногоУчета    = Константы.ВалютаРегламентированногоУчета.Получить();
	ВалютаРегламентированногоУчетаНУ  = ВалютаРегламентированногоУчета;

КонецПроцедуры

&НаСервере
Процедура ПодготовитьФормуНаСервере()

	ТекущаяДатаДокумента					= Объект.Дата;
	
	УстановитьФункциональныеОпцииФормы();

	УправлениеФормой(ЭтаФорма);
	ЗаполнитьИнвентарныеНомераОС();

	Для каждого Строка Из Объект.ОС Цикл
		РассчитатьВычисляемыеПоляПоСтроке(Строка);
	КонецЦикла;
	
	Если ИНАГРО_ОбщийВызовСервераПовтИсп.ЕстьБСПУ() Тогда // ИНАГРО
		ИНАГРО_НеПроводитьПоЗатратам = Объект.ИНАГРО_ДокументОперативногоУчета.НеПроводитьПоЗатратам;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура УстановитьФункциональныеОпцииФормы()

	ОбщегоНазначенияБПКлиентСервер.УстановитьПараметрыФункциональныхОпцийФормыДокумента(ЭтаФорма);
	
	ПлательщикНалогаНаПрибыль  	= УчетнаяПолитика.ПлательщикНалогаНаПрибыль(Объект.Организация, Объект.Дата);
	ПлательщикНалогаНаПрибыльДо2015	= УчетнаяПолитика.ПлательщикНалогаНаПрибыльДо2015(Объект.Организация, Объект.Дата);
	УвеличиватьСтоимостьОСНаСуммуУлучшенияВПорядкеНКУ = УчетнаяПолитика.УвеличиватьСтоимостьОСНаСуммуУлучшенияВПорядкеНКУ(Объект.Организация, Объект.Дата);

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьИнвентарныеНомераОС()

	ТаблицаОС = Объект.ОС.Выгрузить();

	ТаблицаНомеров = УчетОС.ПолучитьТаблицуИнвентарныхНомеровОС(ТаблицаОС,
		Объект.Организация, Объект.Дата);

	ТаблицаОС.ЗагрузитьКолонку(ТаблицаНомеров.ВыгрузитьКолонку("ИнвентарныйНомер"), "ИнвентарныйНомер");
	Объект.ОС.Загрузить(ТаблицаОС);

	// Запомним максимальную дату первоначальных сведений ОС
	ТаблицаНомеров.Сортировать("Период");
	Если ТаблицаНомеров.Количество() > 0 Тогда
		МаксПериодПервоначальныхСведенийОС = ТаблицаНомеров[ТаблицаНомеров.Количество() - 1].Период;
	Иначе
		МаксПериодПервоначальныхСведенийОС = '0001-01-01';
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Функция СведенияОбИнвентарномНомереОС(ОсновноеСредство, Организация, Дата)

	Возврат УчетОС.СведенияОбИнвентарномНомереОС(ОсновноеСредство, Организация, Дата);

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПараметрыЗаполненияПоНаименованию(Форма)

	Результат = Новый Структура;
	Результат.Вставить("Форма", Форма);
	Результат.Вставить("Объект", Форма.Объект);

	Возврат Результат;

КонецФункции

&НаСервере
Процедура ЗаполнитьПоНаименованиюСервер(Знач ОсновноеСредство)

	УчетОС.ДозаполнитьТабличнуюЧастьОсновнымиСредствамиПоНаименованию(
		ПараметрыЗаполненияПоНаименованию(ЭтаФорма), ОсновноеСредство);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)

	Объект = Форма.Объект;
	Элементы = Форма.Элементы;

	ДатаНКУ2015 = '2015 01 01';
	ЭтоДокументДо2015 = (Объект.Дата < ДатаНКУ2015);
	ЭтоРемонт = (Объект.ВидУлучшения = ПредопределенноеЗначение("Перечисление.ВидыУлучшения.Ремонт"));
	
	ВидимостьСпособаОтражения = ЭтоДокументДо2015 ИЛИ (НЕ ЭтоДокументДо2015 И ЭтоРемонт);
	Элементы.ГруппаСпособОтраженияРасходов.Видимость = ВидимостьСпособаОтражения;
	
	// Отчет "Расчет затрат на улучшение ОС"
	Элементы.ФормаОткрытьОтчетРасчетЗатратНаУлучшениеОС.Доступность = ЭтоДокументДо2015;
	
	Элементы.ОССуммаУлучшенияВПределахНормНУ.Видимость = ЭтоДокументДо2015;	
	Элементы.ОССуммаМодернизацииНУ.Видимость = Форма.ПлательщикНалогаНаПрибыльДо2015;	
	
	Элементы.ГруппаСтоимостьНУ.Видимость = ЭтоДокументДо2015;
	
	Если ЭтоДокументДо2015 Тогда
		Элементы.СтоимостьБУ.Заголовок = НСтр("ru='Общая сумма (БУ)';uk='Загальна сума (БО)'");
		Элементы.ОССуммаМодернизацииБУ.Заголовок = НСтр("ru='Сумма улучшения (БУ)';uk='Сума поліпшень (БО)'");
	Иначе
		Элементы.СтоимостьБУ.Заголовок = НСтр("ru='Общая сумма';uk='Загальна сума'");
		Элементы.ОССуммаМодернизацииБУ.Заголовок = НСтр("ru='Сумма улучшения';uk='Сума поліпшень'");
	КонецЕсли;	
	
	// БУ
	ВидимостьКолонокБУ = ЭтоДокументДо2015 ИЛИ (НЕ ЭтоДокументДо2015 И НЕ ЭтоРемонт);
	Элементы.ОСГруппаОбъемРабот.Видимость 		= ВидимостьКолонокБУ;
	Элементы.ОСГруппаСтоимостьБУ.Видимость 		= ВидимостьКолонокБУ;
	Элементы.ОСГруппаАмортизацияБУ.Видимость 	= ВидимостьКолонокБУ;
	
	Элементы.ОССтоимостьДляВычисленияАмортизацииБУ.Видимость 			= ВидимостьКолонокБУ;
	Элементы.ОССрокИспользованияДляВычисленияАмортизацииБУ.Видимость 	= ВидимостьКолонокБУ;
	
	Элементы.ОСГруппаСрокИспользованияБУ.Видимость = ВидимостьКолонокБУ;
	
	
	// НУ
	ВидимостьКолонокНУ = ВидимостьКолонокБУ;
	Элементы.ОССтоимостьДляВычисленияАмортизацииНУ.Видимость 			= ВидимостьКолонокНУ;
	Элементы.ОССрокИспользованияДляВычисленияАмортизацииНУ.Видимость 	= ВидимостьКолонокНУ;
	
	Элементы.ОСГруппаСрокИспользованияПроцентАмортизацииНУ.Видимость	= ВидимостьКолонокНУ;
	
	Элементы.ОСГруппаСтоимостьНУ.Видимость 		= ВидимостьКолонокНУ;
	Элементы.ОСГруппаАмортизацияНУ.Видимость 	= ВидимостьКолонокНУ;
	
	// ИНАГРО++
	Элементы.ГруппаДанныеОперативногоУчета.Видимость = Ложь;
	
	Если ЗначениеЗаполнено(Объект.ИНАГРО_ДокументОперативногоУчета)
		И Объект.ИНАГРО_ДокументОперативногоУчета.Метаданные().Имя = "ИНАГРО_ПриплодИПривес" Тогда 		
		
		Элементы.ГруппаДанныеОперативногоУчета.Видимость = Истина;
		
		ЭтоЖивотное = Ложь;
		
		Если ИНАГРО_ОбщийВызовСервераПовтИсп.ЕстьБСПУ() Тогда
			
			#Если Клиент Тогда
				МодульИНАГРО_БиологическиеАктивы = ОбщегоНазначенияКлиент.ОбщийМодуль("ИНАГРО_БиологическиеАктивы");			
			#ИначеЕсли Сервер Тогда			
				МодульИНАГРО_БиологическиеАктивы = ОбщегоНазначения.ОбщийМодуль("ИНАГРО_БиологическиеАктивы");
			#КонецЕсли
			
			ЭтоЖивотное = МодульИНАГРО_БиологическиеАктивы.ЭтоЖивотное(Объект.ИНАГРО_БиологическийАктив);
			
		КонецЕсли;
		
		Элементы.ИНАГРО_Количество.Видимость            = ЭтоЖивотное;
		Элементы.ИНАГРО_СчетЗатрат.Видимость            = НЕ Форма.ИНАГРО_НеПроводитьПоЗатратам;
		
	КонецЕсли;
	// ИНАГРО--
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РассчитатьВычисляемыеПоляПоСтроке(Строка)

	Строка.ОставшийсяСрокИспользованияБУ = Строка.СрокПолезногоИспользованияБУ - Строка.ФактСрокИспользованияБУ;
	Строка.ОставшийсяОбъемПродукцииРаботБУ = Строка.ОбъемПродукцииРаботБУ - Строка.ФактОбъемПродукцииРаботБУ;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РассчитатьСрокИспользованияДляВычисленияАмортизации(Строка, БУ = Ложь, НУ = Ложь, Форма)

	Если Строка = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДатаНКУ2015 = '2015 01 01';
	ЭтоДокументДо2015 = (Форма.Объект.Дата < ДатаНКУ2015);
	
	Если БУ Тогда
		Если НЕ Форма.Объект.ПриАвтозаполненииНеИзменятьАмортизируемуюСтоимостьОСБУ Тогда
			Строка.СрокИспользованияДляВычисленияАмортизацииБУ = Макс(0, Строка.СрокПолезногоИспользованияБУ - Строка.ФактСрокИспользованияБУ);
		КонецЕсли;	
    КонецЕсли;
		
	Если НУ Тогда
		Если ЭтоДокументДо2015 Тогда
			Строка.СрокИспользованияДляВычисленияАмортизацииНУ = Макс(0, Строка.СрокПолезногоИспользованияНУ - Строка.ФактСрокИспользованияНУ);
		Иначе
			Если НЕ Форма.Объект.ПриАвтозаполненииНеИзменятьАмортизируемуюСтоимостьОСБУ Тогда
				Строка.СрокИспользованияДляВычисленияАмортизацииНУ = Макс(0, Строка.СрокПолезногоИспользованияНУ - Строка.ФактСрокИспользованияНУ);
			КонецЕсли;	
		КонецЕсли;	
	КонецЕсли;	
		
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РассчитатьСтоимостьДляВычисленияАмортизации(Строка, БУ = Ложь, НУ = Ложь, Форма)

	Если Строка = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДатаНКУ2015 = '2015 01 01';
	ЭтоДокументДо2015 = (Форма.Объект.Дата < ДатаНКУ2015);
	
	Если БУ Тогда
		
		Если НЕ Форма.Объект.ПриАвтозаполненииНеИзменятьАмортизируемуюСтоимостьОСБУ Тогда
			Если Форма.УвеличиватьСтоимостьОСНаСуммуУлучшенияВПорядкеНКУ Тогда
			 	Строка.СтоимостьДляВычисленияАмортизацииБУ = Макс(0, Строка.СтоимостьБУ - Строка.АмортизацияБУ - Строка.АмортизацияЗаМесяцБУ + Строка.СуммаМодернизацииНУ - Строка.СуммаУлучшенияВПределахНормНУ);
			Иначе	
			 	Строка.СтоимостьДляВычисленияАмортизацииБУ = Макс(0, Строка.СтоимостьБУ - Строка.АмортизацияБУ - Строка.АмортизацияЗаМесяцБУ + Строка.СуммаМодернизацииБУ);
			КонецЕсли;	
		Иначе	
		 	Строка.СтоимостьДляВычисленияАмортизацииБУ = Макс(0, Строка.СтоимостьБУ + Строка.СуммаМодернизацииБУ);
		КонецЕсли;	
		
    КонецЕсли;
		
	Если НУ Тогда
		Если ЭтоДокументДо2015 Тогда
			Строка.СтоимостьДляВычисленияАмортизацииНУ = Макс(0, Строка.СтоимостьНУ + Строка.СуммаМодернизацииНУ - Строка.АмортизацияНУ - Строка.АмортизацияЗаМесяцНУ - Строка.СуммаУлучшенияВПределахНормНУ);
		Иначе
			Если НЕ Форма.Объект.ПриАвтозаполненииНеИзменятьАмортизируемуюСтоимостьОСБУ Тогда
				Строка.СтоимостьДляВычисленияАмортизацииНУ = Макс(0, Строка.СтоимостьНУ + Строка.СуммаМодернизацииБУ - Строка.АмортизацияНУ - Строка.АмортизацияЗаМесяцНУ);
			Иначе
			 	Строка.СтоимостьДляВычисленияАмортизацииНУ = Макс(0, Строка.СтоимостьНУ + Строка.СуммаМодернизацииБУ);
			КонецЕсли;	
		КонецЕсли;
	КонецЕсли;	
		
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДляСпискаОССервер()

	Если НЕ УчетнаяПолитика.Существует(Объект.Организация, Объект.Дата) Тогда
		ТекстСообщения = НСтр("ru='Не задана учетная политика организации %1 на %2.';uk='Не задана облікова політика організації %1 на %2.'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ТекстСообщения, Объект.Организация, Формат(Объект.Дата, "ДФ=dd.MM.yyyy"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;

	СписокОСТаблица = Объект.ОС.Выгрузить(, "НомерСтроки, ОсновноеСредство");
	СписокОС = СписокОСТаблица.ВыгрузитьКолонку("ОсновноеСредство");
	ТаблицаАмортизацииБух = Новый ТаблицаЗначений();

	Запрос   = Новый Запрос;
	Запрос.УстановитьПараметр("Организация"   , Объект.Организация);
	Запрос.УстановитьПараметр("СписокОС"      , СписокОС);
	Запрос.УстановитьПараметр("Период"        , Объект.Дата);
	Запрос.УстановитьПараметр("СубконтоОС"    , ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства);
	Запрос.УстановитьПараметр("ДатаДока"      , Объект.Дата);
	Запрос.УстановитьПараметр("СостояниеВвода", Перечисления.СостоянияОС.ВведеноВЭксплуатацию);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПервоначальныеСведения.ОсновноеСредство                  КАК ОсновноеСредство,
	|	ПараметрыАмортизации.СтоимостьДляВычисленияАмортизации КАК СтоимостьДляВычисленияАмортизацииБУ,
	|	ПараметрыАмортизации.СрокПолезногоИспользования          КАК СрокПолезногоИспользованияБУ,
	|	ПараметрыАмортизации.СрокИспользованияДляВычисленияАмортизации          КАК СрокИспользованияДляВычисленияАмортизацииБУ,
	|	ПараметрыАмортизацииНУ.СрокПолезногоИспользования        КАК СрокПолезногоИспользованияНУ,
 	|	ПараметрыАмортизацииНУ.СрокИспользованияДляВычисленияАмортизации        КАК СрокИспользованияДляВычисленияАмортизацииНУ,
	|	ПараметрыАмортизации.ОбъемПродукцииРабот                 КАК ОбъемПродукцииРаботБУ,
	|	ПараметрыАмортизации.ЛиквидационнаяСтоимость             КАК ЛиквидационнаяСтоимостьБУ,
	|	ВыработкаОС.КоличествоОборот                             КАК ФактОбъемПродукцииРаботБУ,
	|	СтоимостьОстатки.СуммаОстатокДт                          КАК СтоимостьБУ,
	|	АмортизацияОстатки.СуммаОстатокКт                        КАК АмортизацияБУ,
	|	СтоимостьОстатки.СуммаНУОстатокДт                        КАК СтоимостьНУ,
	|	АмортизацияОстатки.СуммаНУОстатокКт                      КАК АмортизацияНУ,
	|	СостоянияОС.ДатаСостояния КАК ДатаВводаВЭксплуатацию
	|ИЗ
	|	РегистрСведений.ПервоначальныеСведенияОСБухгалтерскийУчет.СрезПоследних(
	|		            &Период,
	|		            Организация = &Организация
	|		            И ОсновноеСредство В (&СписокОС)) КАК ПервоначальныеСведения
	|		ЛЕВОЕ СОЕДИНЕНИЕ 
	|			РегистрСведений.ПараметрыАмортизацииОСБухгалтерскийУчет.СрезПоследних(
	|		                    &Период,
	|		                    Организация = &Организация
	|		                    И ОсновноеСредство В (&СписокОС)) КАК ПараметрыАмортизации
	|		ПО ПервоначальныеСведения.ОсновноеСредство = ПараметрыАмортизации.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ 
	|			РегистрСведений.ПараметрыАмортизацииОСНалоговыйУчет.СрезПоследних(
	|		                    &Период,
	|		                    Организация = &Организация
	|		                    И ОсновноеСредство В (&СписокОС)) КАК ПараметрыАмортизацииНУ
	|		ПО ПервоначальныеСведения.ОсновноеСредство = ПараметрыАмортизацииНУ.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ 
	|			РегистрНакопления.ВыработкаОС.Обороты(, 
	|			                  &Период, , 
	|			                  ОсновноеСредство В (&СписокОС)) КАК ВыработкаОС
	|		ПО ПервоначальныеСведения.ОсновноеСредство = ВыработкаОС.ОсновноеСредство
	|			И ПервоначальныеСведения.ПараметрВыработки = ВыработкаОС.ПараметрВыработки
	|		ЛЕВОЕ СОЕДИНЕНИЕ 
	|			РегистрБухгалтерии.Хозрасчетный.Остатки(
	|		                       &Период,
	|		                       Счет В
	|		 	              	       (ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		     	                  		СчетаБУ.СчетУчета
	|		      	                 	ИЗ
	|			   	                     	РегистрСведений.СчетаБухгалтерскогоУчетаОС.СрезПоследних(
	|			                        	                &Период, Организация = &Организация
	|			                                            И ОсновноеСредство В (&СписокОС)) КАК СчетаБУ),
	|		                       &СубконтоОС,
	|		                       Организация = &Организация
	|		                       И Субконто1 В (&СписокОС)) КАК СтоимостьОстатки
	|		ПО ПервоначальныеСведения.ОсновноеСредство = СтоимостьОстатки.Субконто1
	|		ЛЕВОЕ СОЕДИНЕНИЕ 
	|			РегистрБухгалтерии.Хозрасчетный.Остатки(
	|		                       &Период,
	|		                       Счет В
	|		                          (ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		                               СчетаБУ.СчетНачисленияАмортизации
	|		                           ИЗ
	|		                               РегистрСведений.СчетаБухгалтерскогоУчетаОС.СрезПоследних(
	|		                                               &Период, Организация = &Организация
	|		                                               И ОсновноеСредство В (&СписокОС)) КАК СчетаБУ),
	|		                       &СубконтоОС,
	|		                       Организация = &Организация
	|		                       И Субконто1 В (&СписокОС)) КАК АмортизацияОстатки
	|		ПО ПервоначальныеСведения.ОсновноеСредство = АмортизацияОстатки.Субконто1
	|		ЛЕВОЕ СОЕДИНЕНИЕ 
	|			РегистрСведений.СостоянияОСОрганизаций КАК СостоянияОС
	|		ПО ПервоначальныеСведения.ОсновноеСредство = СостоянияОС.ОсновноеСредство
	|			И ПервоначальныеСведения.Организация = СостоянияОС.Организация
	|			И (СостоянияОС.Состояние = &СостояниеВвода)";
	ТЗ_БУ = Запрос.Выполнить().Выгрузить();
	ТЗ_БУ.Индексы.Добавить("ОсновноеСредство");

	ТаблицаАмортизацииБух = УправлениеНеоборотнымиАктивами.РасчетАмортизацииРегл(Объект.Дата, Объект.Организация, СписокОС);
    Коэф                  = ?(Объект.ОС.Количество()>0, 1 / Объект.ОС.Количество(), 0);
	ПогрешностьБУ         = 0;
	ПогрешностьНУ         = 0;

	Для каждого Строка Из Объект.ОС Цикл

		// В соответствующие поля строки запишем данные из запроса
		СтрокаТЗБУ = ТЗ_БУ.Найти(Строка.ОсновноеСредство, "ОсновноеСредство");

		Если СтрокаТЗБУ = Неопределено Тогда

			Строка.СрокПолезногоИспользованияБУ = 0;
			Строка.ФактСрокИспользованияБУ      = 0;
			Строка.ОбъемПродукцииРаботБУ        = 0;
			Строка.ФактОбъемПродукцииРаботБУ    = 0;
			Строка.СтоимостьБУ                  = 0;
			Строка.СуммаМодернизацииБУ          = 0;
			Строка.АмортизацияБУ                = 0;
			Строка.АмортизацияЗаМесяцБУ         = 0;
			Строка.ЛиквидационнаяСтоимостьБУ    = 0;
			Строка.СуммаМодернизацииНУ          = 0;
			
			Строка.СрокПолезногоИспользованияНУ = 0;
			Строка.ФактСрокИспользованияНУ      = 0;
			Строка.СтоимостьНУ                  = 0;
			Строка.АмортизацияНУ                = 0;
			Строка.АмортизацияЗаМесяцНУ         = 0;
			
			Строка.СрокИспользованияДляВычисленияАмортизацииБУ = 0;
			Строка.СрокИспользованияДляВычисленияАмортизацииНУ = 0;
			Строка.СтоимостьДляВычисленияАмортизацииБУ         = 0;
			Строка.СтоимостьДляВычисленияАмортизацииНУ         = 0;

		Иначе

			Строка.СрокПолезногоИспользованияБУ = СтрокаТЗБУ.СрокПолезногоИспользованияБУ;
			Строка.ФактСрокИспользованияБУ      = ?(СтрокаТЗБУ.ДатаВводаВЭксплуатацию = NULL,
			                                        0,
			                                        УправлениеНеоборотнымиАктивами.ОпределитьФактическийСрокИспользования(СтрокаТЗБУ.ДатаВводаВЭксплуатацию, Объект.Дата));
			
			Строка.ОбъемПродукцииРаботБУ        = СтрокаТЗБУ.ОбъемПродукцииРаботБУ;
			Строка.ФактОбъемПродукцииРаботБУ    = СтрокаТЗБУ.ФактОбъемПродукцииРаботБУ;
			Строка.СтоимостьБУ                  = СтрокаТЗБУ.СтоимостьБУ;
			Строка.СуммаМодернизацииБУ          = ОбщегоНазначенияРед12.ОкруглитьСУчетомПогрешности(Объект.СтоимостьБУ * Коэф, 2, ПогрешностьБУ);
			Строка.АмортизацияБУ                = СтрокаТЗБУ.АмортизацияБУ;
			СтрокаТаблицаАмортизацииБух         = ТаблицаАмортизацииБух.Найти(Строка.ОсновноеСредство,"ОбъектУчета");
			Строка.АмортизацияЗаМесяцБУ         = ?(СтрокаТаблицаАмортизацииБух = Неопределено, 0, СтрокаТаблицаАмортизацииБух.Амортизация);
			Строка.ЛиквидационнаяСтоимостьБУ    = СтрокаТЗБУ.ЛиквидационнаяСтоимостьБУ;

			Строка.СуммаМодернизацииНУ          = ОбщегоНазначенияРед12.ОкруглитьСУчетомПогрешности(Объект.СтоимостьНУ * Коэф, 2, ПогрешностьНУ);
			
			Строка.СрокПолезногоИспользованияНУ = СтрокаТЗБУ.СрокПолезногоИспользованияНУ;
			Строка.ФактСрокИспользованияНУ      = ?(СтрокаТЗБУ.ДатаВводаВЭксплуатацию = NULL,
			                                        0,
			                                        УправлениеНеоборотнымиАктивами.ОпределитьФактическийСрокИспользования(Макс(СтрокаТЗБУ.ДатаВводаВЭксплуатацию, '20110331'), Объект.Дата));
			Строка.СтоимостьНУ                  = СтрокаТЗБУ.СтоимостьНУ;
			Строка.АмортизацияНУ                = СтрокаТЗБУ.АмортизацияНУ;
			Строка.АмортизацияЗаМесяцНУ         = ?(СтрокаТаблицаАмортизацииБух = Неопределено, 0, СтрокаТаблицаАмортизацииБух.АмортизацияНУ);
			
			// по умолчанию
			Строка.СтоимостьДляВычисленияАмортизацииБУ 			= СтрокаТЗБУ.СтоимостьДляВычисленияАмортизацииБУ;
			Строка.СрокИспользованияДляВычисленияАмортизацииБУ 	= СтрокаТЗБУ.СрокИспользованияДляВычисленияАмортизацииБУ;
			Строка.СрокИспользованияДляВычисленияАмортизацииНУ 	= СтрокаТЗБУ.СрокИспользованияДляВычисленияАмортизацииНУ;
			
			РассчитатьСтоимостьДляВычисленияАмортизации(Строка, Истина, Истина, ЭтаФорма);
			РассчитатьСрокИспользованияДляВычисленияАмортизации(Строка, Истина, Истина, ЭтаФорма);

		КонецЕсли;
		
		РассчитатьВычисляемыеПоляПоСтроке(Строка);

	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьИнвентарныеНомераОСИУправлениеФормой()

	ОбщегоНазначенияБПКлиентСервер.УстановитьПараметрыФункциональныхОпцийФормыДокумента(ЭтаФорма);

	УправлениеФормой(ЭтаФорма);
	ЗаполнитьИнвентарныеНомераОС();

КонецПроцедуры

&НаСервере
Функция ПоместитьОСВХранилище()

	ТаблицаОС = Объект.ОС.Выгрузить(, "НомерСтроки, ОсновноеСредство");
	Возврат ПоместитьВоВременноеХранилище(ТаблицаОС);

КонецФункции

&НаСервере
Процедура ОбработкаВыбораНаСервере(Знач ВыбранноеЗначение)

	ДобавленныеСтроки = УчетОС.ОбработатьПодборОсновныхСредств(Объект.ОС, ВыбранноеЗначение);
	ЗаполнитьИнвентарныеНомераОС();

КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСчетУчетаОбъектаСтроительства(Знач Организация, Знач ОбъектСтроительства)

	СчетаУчета = УправлениеНеоборотнымиАктивами.ПолучитьСчетаУчетаОбъектовСтроительства(Организация, ОбъектСтроительства);
	Возврат СчетаУчета.СчетУчетаБУ;

КонецФункции

&НаСервере
Процедура ДатаПриИзмененииНаСервере()

	УстановитьФункциональныеОпцииФормы();
	ЗаполнитьИнвентарныеНомераОСИУправлениеФормой();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьФлагПриАвтозаполненииНеИзменятьАмортизируемуюСтоимостьОСБУ()
	Если Объект.ВидУлучшения = Перечисления.ВидыУлучшения.Ремонт И УвеличиватьСтоимостьОСНаСуммуУлучшенияВПорядкеНКУ = Ложь Тогда
		Объект.ПриАвтозаполненииНеИзменятьАмортизируемуюСтоимостьОСБУ = Истина;
	Иначе
		Объект.ПриАвтозаполненииНеИзменятьАмортизируемуюСтоимостьОСБУ = Ложь;
	КонецЕсли;	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ БСП

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти