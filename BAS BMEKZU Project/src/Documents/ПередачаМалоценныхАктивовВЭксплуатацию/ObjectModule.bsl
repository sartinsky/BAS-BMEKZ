#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

Перем мВалютаРегламентированногоУчета;

// Хранит вид МБП
Перем мМБП;

// Процедура заполняет счета  учета по бухгалтерскому учету 
// по назначению использования 
//
Процедура ЗаполнитьСчетУчетаБУПоНазначениюИспользования(СтрокаТЧ) Экспорт
	
	Если ЗначениеЗаполнено(СтрокаТЧ.НазначениеИспользования) Тогда
		
		Если СтрокаТЧ.НазначениеИспользования.ВидМалоценногоАктива = мМБП Тогда
			
			СтрокаТЧ.СчетУчетаБУ                = ПланыСчетов.Хозрасчетный.МалоценныеИБыстроизнашивающиесяПредметыНаСкладе;
			
		Иначе                                      
			
			СтрокаТЧ.СчетУчетаБУ = ПланыСчетов.Хозрасчетный.ПриобретениеДругихНеоборотныхМатериальныхАктивов;
			
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры // ЗаполнитьСчетУчетаБУПоНазначениюИспользования()






////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Процедура определяет параметры учетной политики
//
Процедура ПодготовитьПараметрыУчетнойПолитики(СтруктураШапкиДокумента, Отказ, Заголовок)
	
	СтруктураШапкиДокумента.Вставить("ЕстьНалогНаПрибыльДо2015"		  , УчетнаяПолитика.ПлательщикНалогаНаПрибыльДо2015(СтруктураШапкиДокумента.Организация, КонецМесяца(СтруктураШапкиДокумента.Дата)));
	СтруктураШапкиДокумента.Вставить("ЕстьНДС"                        , УчетнаяПолитика.ПлательщикНДС(СтруктураШапкиДокумента.Организация, КонецМесяца(СтруктураШапкиДокумента.Дата)));
	
КонецПроцедуры // ПодготовитьПараметрыУчетнойПолитики()

// Функция проверяет правильность заполнения документа
// Возврат - структура с данными шапки документа
//
Функция ПроверкаРеквизитов(Отказ, Заголовок) Экспорт
	
	// Дерево значений, содержащее имена необходимых полей в запросе по шапке.
	Перем ДеревоПолейЗапросаПоШапке;
	
	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента = ОбщегоНазначенияРед12.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);

	// Заполним по шапке документа дерево параметров, нужных при проведении.
	ДеревоПолейЗапросаПоШапке = ОбщегоНазначенияРед12.СформироватьДеревоПолейЗапросаПоШапке();
	ОбщегоНазначенияРед12.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Склад", "ТипСклада", "ТипСклада");
	
	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа
	СтруктураШапкиДокумента = УправлениеЗапасами.СформироватьЗапросПоДеревуПолей(ЭтотОбъект, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета);
	
	// Получим данные учетной политики
	ПодготовитьПараметрыУчетнойПолитики(СтруктураШапкиДокумента, Отказ, Заголовок);

	Возврат СтруктураШапкиДокумента;
	
КонецФункции // ПроверкаРеквизитов()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ФОРМИРОВАНИЯ ДВИЖЕНИЙ ДОКУМЕНТА

// По результату запроса по шапке документа формируем движения по регистрам.
//
// Параметры: 
//  РежимПроведения           - режим проведения документа (оперативный или неоперативный),
//  СтруктураШапкиДокумента   - выборка из результата запроса по шапке документа,
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, Отказ, Заголовок)
	
	ТаблицаПоМалоценнымАктивам = Неопределено;
	
	// Формирование движений по перемещению малоценных активов.
	ФормированиеДвиженийПоРегиструСписанныеТовары(СтруктураШапкиДокумента, ТаблицаПоМалоценнымАктивам, Отказ, Заголовок);	
	
	Если Не Отказ Тогда
		
		ДвиженияПоРегистрамБухРегл(СтруктураШапкиДокумента, ТаблицаПоМалоценнымАктивам, Отказ, Заголовок);
		
		// ИНАГРО++
		Если ИНАГРО_ОбщийВызовСервераПовтИсп.ЕстьБСПУ() Тогда			
			КопияТаблицаПоМалоценнымАктивам = ТаблицаПоМалоценнымАктивам.Скопировать();
			КопияТаблицаПоМалоценнымАктивам.Колонки.Добавить("НаправлениеДвижения");
			КопияТаблицаПоМалоценнымАктивам.ЗаполнитьЗначения(Справочники.ИНАГРО_ВидыДвиженийВедомости.Списание, "НаправлениеДвижения");
			ИНАГРО_Общий.ИНАГРО_ВедомостьДвиженийРасход(Движения, КопияТаблицаПоМалоценнымАктивам, СтруктураШапкиДокумента);			
		КонецЕсли;	
		// ИНАГРО--                                                                                            

	КонецЕсли;
	
КонецПроцедуры // ДвиженияПоРегистрам()

// Формирование движений по перемещению малоценных активов.
//
Процедура ФормированиеДвиженийПоРегиструСписанныеТовары(СтруктураШапкиДокумента, ТаблицаПоМалоценнымАктивам, Отказ, Заголовок)

	НомСтр   = 0;
	ДатаДока = Дата;

    Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Док.НомерСтроки                                                          КАК НомерСтроки,
	|	&ПустойДоговор                                                           КАК ДоговорКонтрагента,
	|	Док.Ссылка.Склад                                                         КАК Склад,
	|	Док.Номенклатура                                                         КАК Номенклатура,
	|	Док.Ссылка.Организация                                                   КАК Организация,
	|	Док.Номенклатура.Услуга                                                  КАК Услуга,
	|	Док.Количество * Коэффициент											 КАК Количество,
	|	Док.СчетУчетаБУ                                                          КАК СчетУчетаБУ,
	|	Док.НазначениеИспользования.СчетПередачиБУ                               КАК КорСчетСписанияБУ,
	|	Док.Номенклатура                                                         КАК КорСубконтоСписанияБУ1,
	|	&НомерЖурнала                                                            КАК НомерЖурналаБУ,
	|	НЕОПРЕДЕЛЕНО                                                             КАК ДокументОприходования,
	|	Док.НазначениеИспользования                                              КАК НазначениеИспользования,
	|	Док.НазначениеИспользования.Владелец                                     КАК ВладелецНазначения,
	|	Док.НалоговоеНазначение                          						 КАК НалоговоеНазначениеНовое,
	|	Док.НалоговоеНазначение                          						 КАК НалоговоеНазначение,
	|	Док.НазначениеИспользования.СпособОтраженияРасходов                      КАК СпособОтраженияРасходов,
	|	Док.НазначениеИспользования.ВидМалоценногоАктива                         КАК ВидМалоценногоАктива,
	|	Док.НазначениеИспользования.СчетАмортизацииБУ                            КАК СчетАмортизацииБУ,
	|	Док.ФизЛицо                                                              КАК ФизЛицо
	|ИЗ
	|	Документ.ПередачаМалоценныхАктивовВЭксплуатацию.МалоценныеАктивы КАК Док
	|ГДЕ
	|	Док.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка"           , СтруктураШапкиДокумента.Ссылка );
	Запрос.УстановитьПараметр("ПустойДоговор"    , Справочники.ДоговорыКонтрагентов.ПустаяСсылка());
	Запрос.УстановитьПараметр("НомерЖурнала"     , НСтр("ru='МЦ';uk='МЦ'",Локализация.КодЯзыкаИнформационнойБазы()));
	
	Результат = Запрос.Выполнить();
	ТаблицаПоМалоценнымАктивам = Результат.Выгрузить();
	
	Если Отказ Тогда
		
		Возврат
		
	КонецЕсли;
	
	ТаблицаПоМалоценнымАктивам.Колонки.Добавить("Регистратор");
	ТаблицаПоМалоценнымАктивам.ЗаполнитьЗначения(ЭтотОбъект, "Регистратор");
	ТаблицаПоМалоценнымАктивам.Колонки.Добавить("СчетДоходовБУ");

	ЕстьНалогНаПрибыльДо2015 = СтруктураШапкиДокумента.ЕстьНалогНаПрибыльДо2015;
	
	УправлениеЗапасамиПартионныйУчет.ДвижениеПартийТоваров(ТаблицаПоМалоценнымАктивам, Отказ, , НСтр("ru='Передача малоценных активов в эксплуатацию';uk='Передача малоцінних активів в експлуатацію'",Локализация.КодЯзыкаИнформационнойБазы()));

КонецПроцедуры // ФормированиеДвиженийПоРегиструСписанныеТовары()

// Формирование движения по регистру бухгалтерии.
//
Процедура ДвиженияПоРегистрамБухРегл(СтруктураШапкиДокумента, ТаблицаПоМалоценнымАктивам, Отказ, Заголовок)
	
	ПроводкиБУ   = Движения.Хозрасчетный;
	НомерЖурнала = НСтр("ru='МЦ';uk='МЦ'",Локализация.КодЯзыкаИнформационнойБазы());
	МБП          = Перечисления.ВидыМалоценныхАктивов.МалоценныйБыстроизнашивающийсяПредмет; 
	                    
	// Удаление проводок по счету 00 для МБП.
	// Необходимые проводки будут сформированы
	// при погашении стоимости.
	
	ВспомогательныйСчет = ПланыСчетов.Хозрасчетный.Вспомогательный;
	СчетаДт             = ПроводкиБУ.ВыгрузитьКолонку("СчетДт");
	Себестоимость       = ПроводкиБУ.ВыгрузитьКолонку("Сумма");
	КоличествоПроводок  = СчетаДт.Количество();
	
	Для Индекс = 1 По КоличествоПроводок Цикл
		
		ОбратныйИндекс = КоличествоПроводок - Индекс;
		
		Если (СчетаДт[ОбратныйИндекс] = ВспомогательныйСчет) И Себестоимость[ОбратныйИндекс] <> 0 Тогда
			
			ПроводкиБУ.Удалить(ОбратныйИндекс);
			
		КонецЕсли;
	
	КонецЦикла;
	
	// Подготовим таблицу с данными по амортизации для начисления амортизации по направлениям затрат
	ТабАмортизации = Новый ТаблицаЗначений;
	ТабАмортизации.Колонки.Добавить("НаправлениеАмортизации",
	                                Новый ОписаниеТипов("СправочникСсылка.СпособыОтраженияРасходовПоАмортизации"));
	ТабАмортизации.Колонки.Добавить("ОбъектУчета", 
	                                Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТабАмортизации.Колонки.Добавить("Сумма", ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповЧисла(15, 2));
	ТабАмортизации.Колонки.Добавить("СуммаНУ", ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповЧисла(15, 2));
	ТабАмортизации.Колонки.Добавить("Количество", ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповЧисла(15, 3));
	ТабАмортизации.Колонки.Добавить("СчетАмортизации");
	ТабАмортизации.Колонки.Добавить("ВидМалоценногоАктива", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыМалоценныхАктивов"));
	ТабАмортизации.Колонки.Добавить("Партия");
	ТабАмортизации.Колонки.Добавить("Склад");          
	ТабАмортизации.Колонки.Добавить("НалоговоеНазначение"	, Новый ОписаниеТипов("СправочникСсылка.НалоговыеНазначенияАктивовИЗатрат"));
	ТабАмортизации.Колонки.Добавить("Местонахождение", Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"));
	
	Для Каждого СтрокаТЧ Из ТаблицаПоМалоценнымАктивам Цикл
		
		СписанныеПартииБУ = СтрокаТЧ.СписанныеПартииБУ;
		
		// проводка по счету МЦ.
		Проводка = ПроводкиБУ.Добавить();
		
		СуммаПроводки = СписанныеПартииБУ.Итог("СуммаСписания");
		
		Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыльДо2015 Тогда
			СуммаПроводкиНУ = СписанныеПартииБУ.Итог("СуммаСписанияНУ");
		Иначе
			Если СтрокаТЧ.НалоговоеНазначение = Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяНеХозДеятельность Тогда
				СуммаПроводкиНУ = 0;
			Иначе
				СуммаПроводкиНУ = СуммаПроводки;
			КонецЕсли;
		КонецЕсли; 
		
		Проводка.Период       = СтруктураШапкиДокумента.Дата;
		Проводка.Организация  = СтруктураШапкиДокумента.Организация;
		Проводка.Содержание   = НСтр("ru='Передача малоценных активов в эксплуатацию';uk='Передача малоцінних активів в експлуатацію'",Локализация.КодЯзыкаИнформационнойБазы());
		Проводка.НомерЖурнала = НомерЖурнала;
		Проводка.Сумма        = СуммаПроводки;
		
		Проводка.СуммаНУДт    = СуммаПроводкиНУ;
		Проводка.НалоговоеНазначениеДт = СтрокаТЧ.НалоговоеНазначение;;
		
		Проводка.СчетДт = ПланыСчетов.Хозрасчетный.МалоценныеАктивыВЭксплуатации;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "РаботникиОрганизаций"        , СтрокаТЧ.ФизЛицо);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "НазначенияИспользования"     , СтрокаТЧ.НазначениеИспользования);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ПартииМалоценныхАктивовВЭксплуатации", СтруктураШапкиДокумента.Ссылка);
		Проводка.КоличествоДт = СтрокаТЧ.Количество;
		
		// подготовка к списанию стоимости
		
		Если СтрокаТЧ.ВидМалоценногоАктива = МБП Тогда
			
			// Разворот по партиям
			Для каждого СтрокаПартий Из СписанныеПартииБУ Цикл
			
				НоваяСтрока = ТабАмортизации.Добавить();
				
				НоваяСтрока.ОбъектУчета            = СтрокаТЧ.Номенклатура;
				НоваяСтрока.СчетАмортизации        = СтрокаТЧ.СчетУчетаБУ;
				НоваяСтрока.ВидМалоценногоАктива   = СтрокаТЧ.ВидМалоценногоАктива;
				НоваяСтрока.НаправлениеАмортизации = СтрокаТЧ.СпособОтраженияРасходов;
				НоваяСтрока.НалоговоеНазначение    = СтрокаТЧ.НалоговоеНазначение;
				НоваяСтрока.Сумма                  = СтрокаПартий.СуммаСписания;
				Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыльДо2015 Тогда
					НоваяСтрока.СуммаНУ                = СтрокаПартий.СуммаСписанияНУ;
				Иначе
					НоваяСтрока.СуммаНУ                = СтрокаПартий.СуммаСписания;
				КонецЕсли;
				НоваяСтрока.Количество             = СтрокаПартий.Количество;
				НоваяСтрока.Партия                 = СтрокаПартий.Партия;
				НоваяСтрока.Склад                  = СтрокаТЧ.Склад;
			
			КонецЦикла;
			
		Иначе
			
			НоваяСтрока = ТабАмортизации.Добавить();
			
			НоваяСтрока.ОбъектУчета            = СтрокаТЧ.Номенклатура;
			НоваяСтрока.СчетАмортизации        = СтрокаТЧ.СчетАмортизацииБУ;
			НоваяСтрока.ВидМалоценногоАктива   = СтрокаТЧ.ВидМалоценногоАктива;
			НоваяСтрока.НаправлениеАмортизации = СтрокаТЧ.СпособОтраженияРасходов;
			
			НоваяСтрока.НалоговоеНазначение    = СтрокаТЧ.НалоговоеНазначение;
			
			НоваяСтрока.Сумма                  = СуммаПроводки;
			НоваяСтрока.СуммаНУ                = СуммаПроводкиНУ;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ТабАмортизации.ЗаполнитьЗначения(СтруктураШапкиДокумента.ПодразделениеОрганизации, "Местонахождение");
	
	Если ТабАмортизации.Количество() > 0 Тогда
		
		ТабАмортизации.Свернуть("НаправлениеАмортизации,
		                         |ОбъектУчета,
								 |СчетАмортизации,
								 |ВидМалоценногоАктива,
								 |Партия,
								 |НалоговоеНазначение,
								 |Местонахождение,
								 |Склад",
								 "Сумма,
								 |СуммаНУ,
								 |Количество");
		
		ПроцедурыМалоценныеАктивы.ПолучитьРаспределениеПогашенияСтоимости(ЭтотОбъект,
	                                            Отказ,
												Заголовок,
												ТабАмортизации,
												СтруктураШапкиДокумента,
												НомерЖурнала,
												НСтр("ru='Списание стоимости малоценных активов';uk='Списання вартості малоцінних активів'",Локализация.КодЯзыкаИнформационнойБазы()));
		
	КонецЕсли;
	
КонецПроцедуры // ДвиженияПоРегистрамБухРегл()

//////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура - обработчик события ОбработкаПроведения
//
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	Заголовок = ОбщегоНазначенияБПВызовСервера.ПредставлениеДокументаПриПроведении(Ссылка);
	
	// ПОДГОТОВКА ПРОВЕДЕНИЯ ПО ДАННЫМ ДОКУМЕНТА

	ПроведениеСервер.ПодготовитьНаборыЗаписейКПроведению(ЭтотОбъект);
	Если РучнаяКорректировка Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураШапкиДокумента = ПроверкаРеквизитов(Отказ, Заголовок);
	
	// Движения по документу.
	Если НЕ Отказ Тогда
		
		ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, Отказ, Заголовок);
		
	КонецЕсли;
	
	Движения.Хозрасчетный.ВыполнитьДействияПередЗаписьюДвижений();
	
	ИНАГРО_Общий.ИНАГРО_ДвиженияЗатратыОрганизации_Приход(СтруктураШапкиДокумента, Движения); // ИНАГРО
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКЗаписиДвижений(ЭтотОбъект);
	
КонецПроцедуры	// ОбработкаПроведения()

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКОтменеПроведения(ЭтотОбъект);
	Движения.Записать();
	
КонецПроцедуры

Процедура ЗаполнитьПоДокументуОснованию(Основание)
	
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
		
		// Заполним реквизиты из стандартного набора по документу основанию.
		ЗаполнениеДокументов.ЗаполнитьПоОснованию(ЭтотОбъект, Основание);
		
		Для Каждого ТекСтрокаТовары Из Основание.Товары Цикл
			
			НоваяСтрока = МалоценныеАктивы.Добавить();
			
			НоваяСтрока.Количество                 = ТекСтрокаТовары.Количество;
			НоваяСтрока.Номенклатура               = ТекСтрокаТовары.Номенклатура;
			НоваяСтрока.СчетУчетаБУ                = ТекСтрокаТовары.СчетУчетаБУ;
			
			НоваяСтрока.ЕдиницаИзмерения 		   = ТекСтрокаТовары.ЕдиницаИзмерения;
			НоваяСтрока.Коэффициент 		   	   = ТекСтрокаТовары.Коэффициент;
			
			НоваяСтрока.НалоговоеНазначение 	   = ТекСтрокаТовары.НалоговоеНазначение;
			
		КонецЦикла;
		
		Для Каждого ТекСтрокаТовары Из Основание.Оборудование Цикл
			
				
				НоваяСтрока = МалоценныеАктивы.Добавить();
				
				НоваяСтрока.Количество                 = ТекСтрокаТовары.Количество;
				НоваяСтрока.Номенклатура               = ТекСтрокаТовары.Номенклатура;
				НоваяСтрока.СчетУчетаБУ                = ТекСтрокаТовары.СчетУчетаБУ;
				
				НоваяСтрока.ЕдиницаИзмерения 		   = ТекСтрокаТовары.ЕдиницаИзмерения;
				НоваяСтрока.Коэффициент 		   	   = ТекСтрокаТовары.Коэффициент;
				
				НоваяСтрока.НалоговоеНазначение 	   = ТекСтрокаТовары.НалоговоеНазначение;
				
			
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения)

	ТипДанныхЗаполнения = ТипЗнч(ДанныеЗаполнения);
	Если ДанныеЗаполнения <> Неопределено
			И ТипДанныхЗаполнения <> Тип("Структура")
			И Метаданные().ВводитсяНаОсновании.Содержит(ДанныеЗаполнения.Метаданные()) Тогда
		ЗаполнитьПоДокументуОснованию(ДанныеЗаполнения);
	КонецЕсли;
	ЗаполнениеДокументов.Заполнить(ЭтотОбъект, ДанныеЗаполнения);

КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)

	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ПлательщикНДС = УчетнаяПолитика.ПлательщикНДС(Организация, Дата);
	
	Если НЕ ПлательщикНДС Тогда
		
		// организация - не плательщик НДС. Установим во всех ТЧ признак соответствующего учета НДС
		НеОблНДСДеятельность = Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяХозДеятельность;
		
		Для каждого СтрокаТЧ  Из МалоценныеАктивы Цикл
		    СтрокаТЧ.НалоговоеНазначение = НеОблНДСДеятельность;
		КонецЦикла; 
		
	КонецЕсли; 
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	МассивНепроверяемыхРеквизитов = Новый Массив;

	ПлательщикНДС = УчетнаяПолитика.ПлательщикНДС(Организация, Дата);
	
	Для Каждого Строка Из МалоценныеАктивы Цикл
		Если НЕ Строка.НазначениеИспользования.Пустая() Тогда
			
			Если Строка.Номенклатура <> Строка.НазначениеИспользования.Владелец Тогда
				ТекстСообщения = НСтр("ru='Назначение использования, выбранное в строке %1 табличной части, не соответствует номенклатуре %2.';uk='Призначення використання, вибране в рядку %1 табличної частини, не відповідає номенклатурі %2.'");
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Строка.НомерСтроки, Строка.Номенклатура);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, "МалоценныеАктивы[" + (Формат(Строка.НомерСтроки, "ЧН=; ЧГ=") - 1) + "].НазначениеИспользования", "Объект", Отказ);
			КонецЕсли;
			
			Если Строка.НазначениеИспользования.СпособОтраженияРасходов.Пустая() Тогда
				ТекстСообщения = НСтр("ru='В назначении использования, выбранном в строке %1 табличной части, не указан способ отражения расходов.';uk='У призначенні використання, вказаному в рядку %1 табличної частини, не зазначений спосіб відображення витрат.'");
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Строка.НомерСтроки);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, "МалоценныеАктивы[" + (Формат(Строка.НомерСтроки, "ЧН=; ЧГ=") - 1) + "].НазначениеИспользования", "Объект", Отказ);
			КонецЕсли;
			
			Если Строка.НазначениеИспользования.ВидМалоценногоАктива.Пустая() Тогда
				ТекстСообщения = НСтр("ru='В назначении использования, выбранном в строке %1 табличной части, не указан вид малоценного актива.';uk='У призначенні використання, вказаному в рядку %1 табличної частини, не зазначено вид малоцінного активу.'");
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Строка.НомерСтроки);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, "МалоценныеАктивы[" + (Формат(Строка.НомерСтроки, "ЧН=; ЧГ=") - 1) + "].НазначениеИспользования", "Объект", Отказ);
			КонецЕсли;
			
			Если Строка.НазначениеИспользования.СчетПередачиБУ.Пустая() Тогда
				ТекстСообщения = НСтр("ru='В назначении использования, выбранном в строке %1 табличной части, не указан счет передачи.';uk='У призначенні використання, вказаному в рядку %1 табличної частини, не вказаний рахунок передачі.'");
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Строка.НомерСтроки);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, "МалоценныеАктивы[" + (Формат(Строка.НомерСтроки, "ЧН=; ЧГ=") - 1) + "].НазначениеИспользования", "Объект", Отказ);
			КонецЕсли;
			
			Если Строка.НазначениеИспользования.ВидМалоценногоАктива <> мМБП И Строка.НазначениеИспользования.СчетПередачиБУ.Пустая() Тогда
				ТекстСообщения = НСтр("ru='В назначении использования, выбранном в строке %1 табличной части, не указан счет амортизации.';uk='У призначенні використання, вказаному в рядку %1 табличної частини, не вказаний рахунок амортизації.'");
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Строка.НомерСтроки);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, "МалоценныеАктивы[" + (Формат(Строка.НомерСтроки, "ЧН=; ЧГ=") - 1) + "].НазначениеИспользования", "Объект", Отказ);
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ ПлательщикНДС Тогда
		МассивНепроверяемыхРеквизитов.Добавить("МалоценныеАктивы.НалоговоеНазначение");	
	КонецЕсли;	
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	Дата 		  = НачалоДня(ОбщегоНазначенияБП.ПолучитьРабочуюДату());
	Ответственный = Пользователи.ТекущийПользователь();
	
КонецПроцедуры

//////////////////////////////////////////////////////////////////////////////// 
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ 
// 

мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
мМБП                            = Перечисления.ВидыМалоценныхАктивов.МалоценныйБыстроизнашивающийсяПредмет;

#КонецЕсли