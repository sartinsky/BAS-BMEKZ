#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды 
		
	Если Параметры.Ключ.Пустая() Тогда
		ПодготовитьФормуНаСервере();		
	КонецЕсли;
	
	// Уведомим о появлении функционала рабочей даты
	ЭтаФорма.НастройкиПредупреждений = ОбщегоНазначенияБП.НастройкиПредупрежденийОбИзменениях("РабочаяДатаИзДокумента");
	 
	// Показываем, если это новый документ и сама рабочая дата еще не установлена.
	ЭтаФорма.НастройкиПредупреждений.РабочаяДатаИзДокумента = ЭтаФорма.НастройкиПредупреждений.РабочаяДатаИзДокумента
	 	И ЭтаФорма.Параметры.Ключ.Пустая()
	  	И НЕ ЗначениеЗаполнено(БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("РабочаяДата"));	  
		
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)

	Если ИсточникВыбора.ИмяФормы = "РегистрСведений.СоставКомиссий.Форма.ФормаВыбора" Тогда
		ЗаполнитьЗначенияСвойств(Объект, ВыбранноеЗначение);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если  ТипЗнч(Параметр) = Тип("Структура") 
		И Параметр.Свойство("ИдентификаторВызывающейФормы")
		И Параметр.ИдентификаторВызывающейФормы = УникальныйИдентификатор Тогда
		Если ИмяСобытия = "СозданЛабораторныйАнализ" ИЛИ ИмяСобытия = "ИзмененЛабораторныйАнализ" Тогда			
			Если ИНАГРО_Элеватор.ЛабораторныйАнализПроверкаЗаполнения(Параметр.ДокументСсылка, ПолучитьПараметрыДляПроверкиЗаполнения()) Тогда
				Объект.ЛабораторныйАнализ = Параметр.ДокументСсылка;
				ЛабораторныйАнализПриИзменении(Неопределено);
				Модифицированность = Истина;
			КонецЕсли;
		КонецЕсли;
	Иначе
		ОбщегоНазначенияБПКлиент.ОбработкаОповещенияФормыДокумента(ЭтаФорма, Объект.Ссылка, ИмяСобытия, Параметр, Источник);
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	ПодготовитьФормуНаСервере();

КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ЗаполнитьДобавленныеКолонкиТаблицы();
	
	УстановитьСостояниеДокумента();
	
КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	Если НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДатаДокумента) Тогда
		// Изменение времени не влияет на поведение документа.
		ТекущаяДатаДокумента = Объект.Дата;
		Возврат;
	КонецЕсли;
	
	// Общие проверки условий по датам.
	ТребуетсяВызовСервера = ИНАГРО_ЭлеваторКлиент.ТребуетсяВызовСервераПриИзмененииДатыДокумента(Объект.Дата, ТекущаяДатаДокумента);
		
	// Если определили, что изменение даты может повлиять на какие-либо параметры, 
	// то передаем обработку на сервер.
	Если ТребуетсяВызовСервера Тогда
		ДатаПриИзмененииНаСервере();
	КонецЕсли;
	
	// Запомним новую дату документа.
	ТекущаяДатаДокумента = Объект.Дата;

КонецПроцедуры

&НаСервере
Процедура ДатаПриИзмененииНаСервере()
	
	УстановитьФункциональныеОпцииФормы();

	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		ОрганизацияПриИзмененииНаСервере();
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()
	
	УстановитьФункциональныеОпцииФормы();
	
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ОтражатьВБухгалтерскомУчетеПриИзменении(Элемент)
	
	Если Объект.СписокВладельцев.Количество() > 0 Тогда
		
		Если Объект.ОтражатьВБухгалтерскомУчете Тогда		
			ТекстВопроса = НСтр("ru='Установить счета бухгалтерского учета в соответствии со значениями по умолчанию?';uk='Встановити рахунки бухгалтерського обліку відповідно до значень за замовчуванням?'");
		Иначе
			ТекстВопроса = НСтр("ru='Очистить счета бухгалтерского учета?';uk='Очистити рахунки бухгалтерського обліку?'");
		КонецЕсли;
		
		Оповещение = Новый ОписаниеОповещения("ОтражатьВБухгалтерскомУчетеПриИзмененииЗавершение", ЭтотОбъект, Параметры);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);	
		
		Возврат;
		
	КонецЕсли;	
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтражатьВБухгалтерскомУчетеПриИзмененииЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		УправлениеФормой(ЭтаФорма);
		Возврат;
	КонецЕсли; 	
	
	ЗаполнитьСчетаУчетаВТабличнойЧасти();
	
	УправлениеФормой(ЭтаФорма);
   
КонецПроцедуры

&НаКлиенте
Процедура ЛабораторныйАнализПриИзменении(Элемент)
		
	ДанныеОбъекта = Новый Структура(
		"ЛабораторныйАнализ, НомерАнализа, Влажность, 
		|СорнаяПримесь, ЗерноваяПримесь");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект); 

	ИНАГРО_Элеватор.ЛабораторныйАнализПриИзмененииНаСервере(ДанныеОбъекта);
	
	ЗаполнитьЗначенияСвойств(Объект, ДанныеОбъекта);
		
	УстановитьДоступностьПоказателейКачества(ЭтаФорма);	
	
КонецПроцедуры

&НаКлиенте
Процедура ЛабораторныйАнализНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыОтбора = Новый Структура;
	
	Если ЗначениеЗаполнено(Объект.Организация) Тогда 		
		ПараметрыОтбора.Вставить("Организация",        Объект.Организация);
		ПараметрыОтбора.Вставить("Владелец",           СобственныйКонтрагент);
	КонецЕсли;	
	Если ЗначениеЗаполнено(Объект.Склад) Тогда
		ПараметрыОтбора.Вставить("Склад",              Объект.Склад);
	КонецЕсли;	
	Если ЗначениеЗаполнено(Объект.ВидХранения) Тогда
		ПараметрыОтбора.Вставить("ВидХранения",        Объект.ВидХранения);
	КонецЕсли;	
	Если ЗначениеЗаполнено(Объект.Номенклатура) Тогда
		ПараметрыОтбора.Вставить("Номенклатура",       Объект.Номенклатура);
	КонецЕсли;	
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Отбор",  ПараметрыОтбора);
	ПараметрыФормы.Вставить("Ссылка", Объект.Ссылка);
	
	ОткрытьФорму("Документ.ИНАГРО_ЛабораторныйАнализ.Форма.ФормаВыбора", ПараметрыФормы, Элемент, УникальныйИдентификатор, , , , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ФизическийВесПоОписиПриИзменении(Элемент)
	
	РаспределитьФизическийВесПоОписиМеждуВладельцами(Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура ПримечаниеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(
		Элемент.ТекстРедактирования,
		ЭтотОбъект,
		"Объект.Примечание",
		НСтр("ru='Примечание';uk='Примітка'"));

КонецПроцедуры

&НаКлиенте
Процедура ОписаниеДвиженияФормы36НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(
		Элемент.ТекстРедактирования,
		ЭтотОбъект,
		"Объект.ОписаниеДвиженияФормы36",
		НСтр("ru='Описание движения формы 36';uk='Опис руху форми 36'"));

КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(
		Элемент.ТекстРедактирования,
		ЭтотОбъект,
		"Объект.Комментарий");

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписокВладельцев

&НаКлиенте
Процедура СписокВладельцевПриИзменении(Элемент)
	
	ОбновитьИтоги(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокВладельцевПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если НЕ ОтменаРедактирования Тогда		
		ТекущиеДанные = Элементы.СписокВладельцев.ТекущиеДанные; 		
		ТекущиеДанные.Отклонение = ТекущиеДанные.ВесПоИнвентаризации - ТекущиеДанные.ВесПоДаннымУчета;		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура СписокВладельцевВладелецПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.СписокВладельцев.ТекущиеДанные;
	
	ДанныеСтрокиТаблицы = Новый Структура(
		"Владелец, ДоговорКонтрагента, ВесПоИнвентаризации,
		|ВесПоДаннымУчета, Отклонение, СчетУчетаБУ
		|");
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, ТекущиеДанные);
	
	ДанныеОбъекта = Новый Структура(
		"Дата, Организация, Номенклатура,
		|Склад, ОтражатьВБухгалтерскомУчете");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);

	СписокВладельцевВладелецПриИзмененииНаСервере(ДанныеСтрокиТаблицы, ДанныеОбъекта);
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтрокиТаблицы);

КонецПроцедуры

&НаСервереБезКонтекста
Процедура СписокВладельцевВладелецПриИзмененииНаСервере(СтрокаТабличнойЧасти, Знач ДанныеОбъекта)
	
	СтрокаТабличнойЧасти.ДоговорКонтрагента = СтрокаТабличнойЧасти.Владелец.ОсновнойДоговорКонтрагента;

	СведенияОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОНоменклатуре(
		ДанныеОбъекта.Номенклатура, ДанныеОбъекта);	
		
	Если СведенияОНоменклатуре = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	Документы.ИНАГРО_Инвентаризация.ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(ДанныеОбъекта, СтрокаТабличнойЧасти, СведенияОНоменклатуре);	

	ЗаполнитьДобавленныеКолонкиСтрокиТаблицыСписокВладельцев(СтрокаТабличнойЧасти);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ВыбратьПериод(Команда)

	ПараметрыФормыВыбора = Новый Структура("НачалоПериода, КонецПериода", Объект.ДатаНачалаИнвентаризации, Объект.ДатаОкончанияИнвентаризации);
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыбратьПериодЗавершение", ЭтотОбъект);
	ОткрытьФорму("ОбщаяФорма.ВыборСтандартногоПериода", ПараметрыФормыВыбора, Элементы.ВыбратьПериод, , , , ОписаниеОповещения);
	
КонецПроцедуры 

&НаКлиенте
Процедура ВыбратьПериодЗавершение(РезультатВыбора, ДопПараметры) Экспорт
	
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Объект.ДатаНачалаИнвентаризации	   = РезультатВыбора.НачалоПериода;
	Объект.ДатаОкончанияИнвентаризации = РезультатВыбора.КонецПериода;		
		
КонецПроцедуры

&НаКлиенте
Процедура СоздатьЛабораторныйАнализ(Команда)
			
	ЗначенияЗаполнения = Новый Структура;
	ЗначенияЗаполнения.Вставить("Дата",            Объект.Дата);
	ЗначенияЗаполнения.Вставить("Ссылка",          ПредопределенноеЗначение("Документ.ИНАГРО_ЛабораторныйАнализ.ПустаяСсылка"));
	ЗначенияЗаполнения.Вставить("Организация",     Объект.Организация);
	ЗначенияЗаполнения.Вставить("Владелец",        СобственныйКонтрагент);
	ЗначенияЗаполнения.Вставить("Склад",           Объект.Склад);
	ЗначенияЗаполнения.Вставить("ВидХранения",     Объект.ВидХранения);
	ЗначенияЗаполнения.Вставить("Урожай",          Объект.Урожай);
	ЗначенияЗаполнения.Вставить("Номенклатура",    Объект.Номенклатура);
	ЗначенияЗаполнения.Вставить("Влажность",       Объект.Влажность);
	ЗначенияЗаполнения.Вставить("СорнаяПримесь",   Объект.СорнаяПримесь);
	ЗначенияЗаполнения.Вставить("ЗерноваяПримесь", Объект.ЗерноваяПримесь); 	
		
	ИНАГРО_ЭлеваторКлиент.СоздатьДокументНаОсновании(ЭтаФорма, ЗначенияЗаполнения);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПредварительнымиАктамиРасчета(Команда)
	
	Если Объект.СписокВладельцев.Количество() > 0 Тогда		
		ТекстВопроса = НСтр("ru='Табличная часть будет перезаполнена! Продолжить?';uk='Таблична частина буде перезаповнена! Продовжити?'");
		Оповещение = Новый ОписаниеОповещения("ЗаполнитьПредварительнымиАктамиРасчетаЗавершение", ЭтотОбъект, Параметры);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	Иначе
		ЗаполнитьПредварительнымиАктамиРасчетаЗаполнение();		
	КонецЕсли;	

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПредварительнымиАктамиРасчетаЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли; 	
	
	Объект.СписокВладельцев.Очистить();

	ЗаполнитьПредварительнымиАктамиРасчетаЗаполнение();
   
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьОстаткамиПоФорме36(Команда)
	
	Если Объект.СписокВладельцев.Количество() > 0 Тогда		
		ТекстВопроса = НСтр("ru='Табличная часть будет перезаполнена! Продолжить?';uk='Таблична частина буде перезаповнена! Продовжити?'");
		Оповещение = Новый ОписаниеОповещения("ЗаполнитьОстаткамиПоФорме36Завершение", ЭтотОбъект, Параметры);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	Иначе
		ЗаполнитьОстаткамиПоФорме36Заполнение();		
	КонецЕсли;	

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьОстаткамиПоФорме36Завершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли; 	
	
	Объект.СписокВладельцев.Очистить();

	ЗаполнитьОстаткамиПоФорме36Заполнение();		
   
КонецПроцедуры

&НаКлиенте
Процедура РаспределитьФизическийВесПоОписиМеждуВладельцами(Команда)
	
	Если Объект.СписокВладельцев.Количество() > 0 И Объект.ФизическийВесПоОписи > 0 Тогда		
		ТекстВопроса = НСтр("ru='Распределить вес между владельцами?';uk='Розподілити вагу між власниками?'");
		Оповещение = Новый ОписаниеОповещения("РаспределитьФизическийВесПоОписиМеждуВладельцамиЗавершение", ЭтотОбъект, Параметры);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура РаспределитьФизическийВесПоОписиМеждуВладельцамиЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли; 	
	
	РаспределитьФизическийВесПоОписиМеждуВладельцамиРассчитать();
   
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьСоставКомиссии(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимВыбора", Истина);

	ПараметрыФормы.Вставить("Отбор", Новый Структура("Организация", Объект.Организация));
	ОткрытьФорму("РегистрСведений.СоставКомиссий.Форма.ФормаВыбора", ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЗаключение(Команда)
	
	Объект.Заключение = НСтр("ru='Все ценности, указанные в данной инвентаризационной описи комиссией проверены 
		|в натуре в моем (нашем) присутствии и внесены в опись, в связи с чем претензий
		|к инвентаризационной комиссии не имею (имеем). Ценности, перечисленные в описи, 
		|находятся на моем (нашем) ответственном хранении';
		
		|uk='Всі цінності, зазначені у даному інвентаризаційному описі комісією перевірені  
		|в натурі в моїй (нашій) присутності та внесені до опису, у зв'язку з чим нарікань 
		|до інвентаризаційної комісії не маю (маємо). Цінності, які перераховані в описі, 
		|знаходяться на моєму (нашім) відповідальному зберіганні.'",
		Локализация.ПолучитьЯзыкФормированияПечатныхФорм());

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ПодготовитьФормуНаСервере()

	ТекущаяДатаДокумента = Объект.Дата;			
	
	УстановитьФункциональныеОпцииФормы();
	
	ЗаполнитьДобавленныеКолонкиТаблицы();

	УправлениеФормой(ЭтаФорма);
	
	УстановитьСостояниеДокумента();
	
КонецПроцедуры 

&НаСервере
Процедура УстановитьФункциональныеОпцииФормы()

	ОбщегоНазначенияБПКлиентСервер.УстановитьПараметрыФункциональныхОпцийФормыДокумента(ЭтаФорма);	

	ЛабораторияРаботаетВСистеме = ИНАГРО_Элеватор.ПолучитьПараметрУчетаЭлеватора(Объект.Дата, "ЛабораторияРаботаетВСистеме", Истина);	
	
	СобственныйКонтрагент       = ИНАГРО_Элеватор.ПолучитьДополнительныйРеквизитОрганизации(Объект.Организация, "Контрагент", Объект.Дата);

КонецПроцедуры 

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)

	Элементы = Форма.Элементы;
	Объект   = Форма.Объект;
	
	Элементы.СписокВладельцевСчетУчетаБУ.Видимость = Объект.ОтражатьВБухгалтерскомУчете;

	УстановитьДоступностьПоказателейКачества(Форма);
	
	ОбновитьИтоги(Форма);
		
КонецПроцедуры

&НаСервере
Процедура УстановитьСостояниеДокумента()
	
	СостояниеДокумента = ОбщегоНазначенияБП.СостояниеДокумента(Объект);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьПоказателейКачества(Форма)
	
	Элементы = Форма.Элементы;
	Объект   = Форма.Объект;	
	
	СписокРеквизитов = Новый Структура("Влажность, СорнаяПримесь, ЗерноваяПримесь");	
	ИНАГРО_ЭлеваторКлиентСервер.УстановитьДоступностьРеквизитовПоНастройке(Форма, СписокРеквизитов, Форма.ЛабораторияРаботаетВСистеме, ЗначениеЗаполнено(Объект.ЛабораторныйАнализ));

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДобавленныеКолонкиТаблицы()

	Для Каждого СтрокаТабличнойЧасти Из Объект.СписокВладельцев Цикл
		ЗаполнитьДобавленныеКолонкиСтрокиТаблицыСписокВладельцев(СтрокаТабличнойЧасти);
	КонецЦикла;

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьДобавленныеКолонкиСтрокиТаблицыСписокВладельцев(СтрокаТабличнойЧасти)

	СтрокаТабличнойЧасти.Отклонение = СтрокаТабличнойЧасти.ВесПоИнвентаризации - СтрокаТабличнойЧасти.ВесПоДаннымУчета;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСчетаУчетаВТабличнойЧасти()
	
	Если Объект.СписокВладельцев.Количество() > 0 Тогда
		Документы.ИНАГРО_Инвентаризация.ЗаполнитьСчетаУчетаВТабличнойЧасти(Объект, "СписокВладельцев");
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПредварительнымиАктамиРасчетаЗаполнение()
	
	Запрос = Новый Запрос;
	
	Фильтр = "";
	Фильтр = Фильтр + ?(ЗначениеЗаполнено(Объект.Организация),  " И ИНАГРО_АктРасчет310.Организация = &Организация ", "");
	Фильтр = Фильтр + ?(ЗначениеЗаполнено(Объект.Склад),        " И ИНАГРО_АктРасчет310.Склад = &Склад ", "");
	Фильтр = Фильтр + ?(ЗначениеЗаполнено(Объект.Номенклатура), " И ИНАГРО_АктРасчет310.Номенклатура = &Номенклатура ", "");	
	Фильтр = Фильтр + ?(ЗначениеЗаполнено(Объект.Урожай),       " И ИНАГРО_АктРасчет310.Урожай = &Урожай ", "");
	Фильтр = Фильтр + ?(ЗначениеЗаполнено(Объект.ВидХранения),  " И ИНАГРО_АктРасчет310.ВидХранения = &ВидХранения ", "");
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ИНАГРО_АктРасчет310.ВидОперации КАК ВидОперации,
		|	ИНАГРО_АктРасчет310.Владелец КАК Владелец,
		|	ИНАГРО_АктРасчет310.Дата КАК Дата,
		|	ИНАГРО_АктРасчет310.ДоговорКонтрагента КАК ДоговорКонтрагента,
		|	ИНАГРО_АктРасчет310.ФизическийВес8 КАК ВесПоДаннымУчета,
		|	ИНАГРО_АктРасчет310.Организация КАК Организация,
		|	ИНАГРО_АктРасчет310.Склад КАК Склад,
		|	ИНАГРО_АктРасчет310.Номенклатура КАК Номенклатура,
		|	ИНАГРО_АктРасчет310.Урожай КАК Урожай,
		|	ИНАГРО_АктРасчет310.ВидХранения КАК ВидХранения,
		|	ИНАГРО_ДополнительныеРеквизитыНоменклатуры.ВидКультуры КАК ВидКультуры
		|ИЗ
		|	Документ.ИНАГРО_АктРасчет310 КАК ИНАГРО_АктРасчет310
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИНАГРО_ДополнительныеРеквизитыНоменклатуры КАК ИНАГРО_ДополнительныеРеквизитыНоменклатуры
		|		ПО ИНАГРО_АктРасчет310.Номенклатура = ИНАГРО_ДополнительныеРеквизитыНоменклатуры.Номенклатура
		|ГДЕ
		|	ИНАГРО_АктРасчет310.Проведен = ИСТИНА
		|	И ИНАГРО_АктРасчет310.ВидОперации = &ПредварительныйРасчет
		|	И ИНАГРО_АктРасчет310.Дата МЕЖДУ &ДатаНач И &ДатаКон" + Фильтр + "";
	
	Запрос.УстановитьПараметр("ДатаНач",               Объект.ДатаНачалаИнвентаризации);
	Запрос.УстановитьПараметр("ДатаКон",               Объект.ДатаОкончанияИнвентаризации);	
	Запрос.УстановитьПараметр("Организация",           Объект.Организация);				
	Запрос.УстановитьПараметр("Склад",                 Объект.Склад);	
	Запрос.УстановитьПараметр("Номенклатура",          Объект.Номенклатура);	
	Запрос.УстановитьПараметр("Урожай",                Объект.Урожай);
	Запрос.УстановитьПараметр("ВидХранения",           Объект.ВидХранения);
	Запрос.УстановитьПараметр("ПредварительныйРасчет", Перечисления.ИНАГРО_ВидыОперацийАктРасчет310.ПредварительныйРасчет);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = Объект.СписокВладельцев.Добавить();
		НоваяСтрока.Владелец           = Выборка.Владелец;
		НоваяСтрока.ДоговорКонтрагента = Выборка.ДоговорКонтрагента;		
		НоваяСтрока.ВесПоДаннымУчета   = Выборка.ВесПоДаннымУчета;
	КонецЦикла;
	
	ЗаполнитьСчетаУчетаВТабличнойЧасти();
	
	ЗаполнитьДобавленныеКолонкиТаблицы();
	
	Модифицированность = Истина;	
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОстаткамиПоФорме36Заполнение()
	
	Запрос = Новый Запрос;
	
	Фильтр = "";
	Фильтр = Фильтр + ?(ЗначениеЗаполнено(Объект.Склад),        " И Склад = &Склад ", "");
	Фильтр = Фильтр + ?(ЗначениеЗаполнено(Объект.Номенклатура), " И Номенклатура = &Номенклатура ", "");	
	Фильтр = Фильтр + ?(ЗначениеЗаполнено(Объект.Урожай),       " И Урожай = &Урожай ", "");
	Фильтр = Фильтр + ?(ЗначениеЗаполнено(Объект.ВидХранения),  " И ВидХранения = &ВидХранения ", "");
	
	Запрос.Текст=
		"ВЫБРАТЬ
		|	ИНАГРО_Форма36ОстаткиИОбороты.Организация КАК Организация,
		|	ИНАГРО_Форма36ОстаткиИОбороты.Владелец КАК Владелец,
		|	ИНАГРО_Форма36ОстаткиИОбороты.Склад КАК Склад,
		|	ИНАГРО_Форма36ОстаткиИОбороты.Номенклатура КАК Культура,
		|	ИНАГРО_Форма36ОстаткиИОбороты.Договор КАК ДоговорКонтрагента,
		|	ИНАГРО_Форма36ОстаткиИОбороты.ВидХранения КАК ВидХранения,
		|	ИНАГРО_Форма36ОстаткиИОбороты.Урожай КАК Урожай,
		|	ИНАГРО_Форма36ОстаткиИОбороты.ВесПриходКонечныйОстаток КАК ВесПриходКонечныйОстаток,
		|	ИНАГРО_Форма36ОстаткиИОбороты.ВесРасходКонечныйОстаток КАК ВесРасходКонечныйОстаток
		|ИЗ
		|	РегистрНакопления.ИНАГРО_Форма36.ОстаткиИОбороты(&Начало, &Конец, , , Организация = &Организация " + Фильтр + ") КАК ИНАГРО_Форма36ОстаткиИОбороты
		|
		|УПОРЯДОЧИТЬ ПО
		|	Организация,
		|	Владелец,
		|	Склад,
		|	Культура,
		|	Договор,
		|	ВидХранения,
		|	Урожай";
	
	Запрос.УстановитьПараметр("Начало",       Объект.ДатаНачалаИнвентаризации);
	Запрос.УстановитьПараметр("Конец",        Объект.ДатаОкончанияИнвентаризации);	
	Запрос.УстановитьПараметр("Организация",  Объект.Организация);				
	Запрос.УстановитьПараметр("Склад",        Объект.Склад);	
	Запрос.УстановитьПараметр("Номенклатура", Объект.Номенклатура);	
	Запрос.УстановитьПараметр("Урожай",       Объект.Урожай);
	Запрос.УстановитьПараметр("ВидХранения",  Объект.ВидХранения);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = Объект.СписокВладельцев.Добавить();
		НоваяСтрока.Владелец           = Выборка.Владелец;
		НоваяСтрока.ДоговорКонтрагента = Выборка.ДоговорКонтрагента;		
		НоваяСтрока.ВесПоДаннымУчета   = Выборка.ВесПриходКонечныйОстаток - Выборка.ВесРасходКонечныйОстаток;
	КонецЦикла;
	
	ЗаполнитьСчетаУчетаВТабличнойЧасти();
	
	ЗаполнитьДобавленныеКолонкиТаблицы();
	
	Модифицированность = Истина;	

КонецПроцедуры

&НаКлиенте
Процедура РаспределитьФизическийВесПоОписиМеждуВладельцамиРассчитать()
			
	ВесДляРаспределения   = Объект.ФизическийВесПоОписи;
	ВсегоВесПоДаннымУчета = Объект.СписокВладельцев.Итог("ВесПоДаннымУчета");

	МассивСтрок        = Новый Массив;
	БазисРаспределения = Новый Массив;
	
	Для Каждого СтрокаТабличнойЧасти Из Объект.СписокВладельцев Цикл		
		СтрокаТабличнойЧасти.ВесПоИнвентаризации = 0;
		БазисРаспределения.Добавить(СтрокаТабличнойЧасти.ВесПоДаннымУчета * ВесДляРаспределения / ВсегоВесПоДаннымУчета);
		МассивСтрок.Добавить(СтрокаТабличнойЧасти);			
	КонецЦикла;
	
	МассивРезультатаРаспределения = ОбщегоНазначенияБПКлиентСервер.РаспределитьПропорционально(ВесДляРаспределения, БазисРаспределения, 0);
	Если МассивРезультатаРаспределения <> Неопределено Тогда
		Для Индекс = 0 По МассивСтрок.ВГраница() Цикл
			МассивСтрок[Индекс].ВесПоИнвентаризации = МассивСтрок[Индекс].ВесПоИнвентаризации + МассивРезультатаРаспределения[Индекс];
		КонецЦикла;
	КонецЕсли; 
	
	ЗаполнитьДобавленныеКолонкиТаблицы();

	Модифицированность = Истина;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьИтоги(Форма)

	Объект = Форма.Объект; 
		
	Форма.Отклонение = Объект.СписокВладельцев.Итог("ВесПоИнвентаризации") - Объект.СписокВладельцев.Итог("ВесПоДаннымУчета");
		
КонецПроцедуры

&НаКлиенте
Функция ПолучитьПараметрыДляПроверкиЗаполнения()
	
	ПараметрыДляПроверкиЗаполнения = Новый Структура(
		"Склад, ВидХранения, Урожай, 
		|Номенклатура");
	ЗаполнитьЗначенияСвойств(ПараметрыДляПроверкиЗаполнения, Объект);

	Возврат ПараметрыДляПроверкиЗаполнения; 

КонецФункции

#КонецОбласти  

#Область СлужебныеПроцедурыИФункцииБСП

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти
