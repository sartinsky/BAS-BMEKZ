#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда  

Перем мВалютаРегламентированногоУчета; 
	
#Область ОбработчикиСобытий

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	ТипДанныхЗаполнения = ТипЗнч(ДанныеЗаполнения);	
	
	ИНАГРО_ЭлеваторЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект);

	ЗаполнениеДокументов.Заполнить(ЭтотОбъект, ДанныеЗаполнения); 	
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
		
КонецПроцедуры 

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	Перем Заголовок, СтруктураШапкиДокумента;
	Перем ТаблицаПоКультурам;
		
	ПроведениеСервер.ПодготовитьНаборыЗаписейКПроведению(ЭтотОбъект);
		   
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначенияБПВызовСервера.ПредставлениеДокументаПриПроведении(Ссылка);

	мВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	
	ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента);	
	
	ПодготовитьПараметрыУчетнойПолитики(СтруктураШапкиДокумента, Отказ, Заголовок);	
	
	ПодготовитьТаблицуПоКультурам(СтруктураШапкиДокумента, ТаблицаПоКультурам, Отказ, Заголовок);

	// Движения по документу
	Если НЕ Отказ Тогда		
		ПровестиПоРегистрамЭлеватора(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоКультурам, Отказ, Заголовок);
	КонецЕсли;	
	
	Движения.Хозрасчетный.ВыполнитьДействияПередЗаписьюДвижений();

	ПроведениеСервер.ПодготовитьНаборыЗаписейКЗаписиДвижений(ЭтотОбъект);

КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКОтменеПроведения(ЭтотОбъект);
	Движения.Записать();
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)

	Дата = НачалоДня(ОбщегоНазначения.ТекущаяДатаПользователя());
	Ответственный = Пользователи.ТекущийПользователь();
	
КонецПроцедуры

#КонецОбласти

#Область Проведение

// Процедура формирует структуру шапки документа и дополнительных полей.
//
Процедура ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента) Экспорт

	// Дерево значений, содержащее имена необходимых полей в запросе по шапке.
	Перем ДеревоПолейЗапросаПоШапке;
	
	СтруктураШапкиДокумента   = ОбщегоНазначенияРед12.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	
	// Заполним по шапке документа дерево параметров, нужных при проведении.
	ДеревоПолейЗапросаПоШапке = ОбщегоНазначенияРед12.СформироватьДеревоПолейЗапросаПоШапке();
		
	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа.
	СтруктураШапкиДокумента   = УправлениеЗапасами.СформироватьЗапросПоДеревуПолей(ЭтотОбъект, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета);

КонецПроцедуры

// Процедура определяет параметры учетной политики
//
Процедура ПодготовитьПараметрыУчетнойПолитики(СтруктураШапкиДокумента, Отказ, Заголовок)
	
	РазрешитьУчетУслугБезПлановыхЦен = НЕ УчетнаяПолитика.ПорядокРаспределенияРасходовНаОказаниеУслуг(СтруктураШапкиДокумента.Организация, СтруктураШапкиДокумента.Дата) = Перечисления.ПорядокРаспределенияРасходовНаОказаниеУслуг.ПоПлановымЦенам;
	
	СтруктураШапкиДокумента.Вставить("ЕстьНалогНаПрибыльДо2015",         УчетнаяПолитика.ПлательщикНалогаНаПрибыльДо2015(СтруктураШапкиДокумента.Организация, СтруктураШапкиДокумента.Дата));
	СтруктураШапкиДокумента.Вставить("ЕстьНДС",                          УчетнаяПолитика.ПлательщикНДС(СтруктураШапкиДокумента.Организация, СтруктураШапкиДокумента.Дата));
	СтруктураШапкиДокумента.Вставить("СпособОценкиТоваровВРознице",      УчетнаяПолитика.СпособОценкиТоваровВРознице(СтруктураШапкиДокумента.Организация, СтруктураШапкиДокумента.Дата));
	СтруктураШапкиДокумента.Вставить("РазрешитьУчетУслугБезПлановыхЦен", РазрешитьУчетУслугБезПлановыхЦен);
	
КонецПроцедуры

Процедура ПодготовитьТаблицуПоКультурам(СтруктураШапкиДокумента,ТаблицаПоКультурам,Отказ,Заголовок);
	
	СтруктураПолей = Новый Структура;
	СтруктураПростыхПолей = Новый Структура;
	СтруктураСложныхПолей = Новый Структура;
	
	СтруктураПолей.Вставить("Владелец",                    "Владелец");	
	СтруктураПолей.Вставить("ДоговорКонтрагента",          "ДоговорКонтрагента");	
	СтруктураПолей.Вставить("ВесПоДаннымУчета",            "ВесПоДаннымУчета");   
	СтруктураПолей.Вставить("ВесПоИнвентаризации",         "ВесПоИнвентаризации");	
	СтруктураПолей.Вставить("ЛабораторныйАнализ",          "Ссылка.ЛабораторныйАнализ"); 
	СтруктураПолей.Вставить("НомерАнализа",                "Ссылка.НомерАнализа"); 
	СтруктураПолей.Вставить("Влажность",                   "Ссылка.Влажность");          
	СтруктураПолей.Вставить("СорнаяПримесь",               "Ссылка.СорнаяПримесь");          
	СтруктураПолей.Вставить("ЗерноваяПримесь",             "Ссылка.ЗерноваяПримесь");	
	СтруктураПолей.Вставить("Номенклатура",                "Ссылка.Номенклатура");	
	СтруктураПолей.Вставить("Урожай",                      "Ссылка.Урожай");	
	СтруктураПолей.Вставить("Склад",                       "Ссылка.Склад");   
	СтруктураПолей.Вставить("Дата",                        "Ссылка.Дата");	                                             
	СтруктураПолей.Вставить("ВидХранения",                 "Ссылка.ВидХранения");
	СтруктураПолей.Вставить("Организация",                 "Ссылка.Организация");
	СтруктураПолей.Вставить("Ссылка",                      "Ссылка");
	СтруктураПолей.Вставить("ОтражатьВБухгалтерскомУчете", "Ссылка.ОтражатьВБухгалтерскомУчете");	 
	СтруктураПолей.Вставить("ДокументОприходования",       "Ссылка");	 
	
	РезультатЗапросаПоКультурам = ОбщегоНазначенияРед12.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "СписокВладельцев", СтруктураПолей, СтруктураПростыхПолей, СтруктураСложныхПолей);
	
	ТаблицаПоКультурам = РезультатЗапросаПоКультурам.Выгрузить();
	
	ТаблицаПоКультурам.Колонки.Добавить("ВидФасовки");
	ТаблицаПоКультурам.Колонки.Добавить("Поставщик");
	ТаблицаПоКультурам.Колонки.Добавить("ВидДокумента");
	ТаблицаПоКультурам.Колонки.Добавить("ФизическийВес");   
	ТаблицаПоКультурам.Колонки.Добавить("Количество");  
	ТаблицаПоКультурам.Колонки.Добавить("ЗачетныйВес");	
	
	ТаблицаПоКультурам.ЗаполнитьЗначения(Справочники.ИНАГРО_ВидыФасовки.ПустаяСсылка(), "ВидФасовки");
	ТаблицаПоКультурам.ЗаполнитьЗначения(Справочники.Контрагенты.ПустаяСсылка(),        "Поставщик");
	ТаблицаПоКультурам.ЗаполнитьЗначения(СтруктураШапкиДокумента.ВидДокумента,          "ВидДокумента");
	ТаблицаПоКультурам.ЗаполнитьЗначения(0,                                             "ФизическийВес");
	ТаблицаПоКультурам.ЗаполнитьЗначения(0,                                             "Количество");
	ТаблицаПоКультурам.ЗаполнитьЗначения(0,                                             "ЗачетныйВес");
	
	ТаблицаПоКультурам.Колонки.Добавить("КодОперации");
	ТаблицаПоКультурам.Колонки.Добавить("СтатусПартии");
	
КонецПроцедуры

// Движения по регистрам Элеватора
//
Процедура ПровестиПоРегистрамЭлеватора(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоКультурам, Отказ, Заголовок)
	
	Для Каждого СтрокаТаблицы Из ТаблицаПоКультурам Цикл					
		
		// Расход
		СтрокаТаблицы.ФизическийВес = СтрокаТаблицы.ВесПоДаннымУчета;
		СтрокаТаблицы.Количество    = 0;
		СтрокаТаблицы.ЗачетныйВес   = СтрокаТаблицы.ВесПоДаннымУчета;
		
		ИНАГРО_Элеватор.ДвиженияПоРегиструОстаткиРасход(Движения, СтрокаТаблицы, Истина);
		ИНАГРО_Элеватор.ДвиженияПоРегиструФорма36Расход(Движения, СтрокаТаблицы, , , ДатаНачалаИнвентаризации);
		
		СтрокаТаблицы.ФизическийВес = СтрокаТаблицы.ВесПоИнвентаризации;
		СтрокаТаблицы.Количество    = 0;
		СтрокаТаблицы.ЗачетныйВес   = СтрокаТаблицы.ВесПоИнвентаризации;
		
		// Приход
		ИНАГРО_Элеватор.ДвиженияПоРегиструОстаткиПриход(Движения, СтрокаТаблицы);
		ИНАГРО_Элеватор.ДвиженияПоРегиструФорма36Приход(Движения, СтрокаТаблицы, , , КонецДня(ДатаОкончанияИнвентаризации));
		
		СтрокаТаблицы.ФизическийВес = 0;
		СтрокаТаблицы.Количество    = 0;
		СтрокаТаблицы.ЗачетныйВес   = 0;
		
	КонецЦикла;
	
КонецПроцедуры	

#КонецОбласти

#КонецЕсли