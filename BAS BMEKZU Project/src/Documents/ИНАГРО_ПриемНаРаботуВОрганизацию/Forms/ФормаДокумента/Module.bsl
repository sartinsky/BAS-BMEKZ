#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды 

	КадровыйУчетФормы.ФормаКадровогоДокументаПриСозданииНаСервере(ЭтаФорма);
	
	Если Параметры.Ключ.Пустая() Тогда
		
		// Заполним реквизиты из значений заполнения
		Если Параметры.Свойство("Организация") И ЗначениеЗаполнено(Параметры.Организация) Тогда 
			Объект.Организация = Параметры.Организация;
		КонецЕсли;
		Если Параметры.Свойство("Подразделение") И ЗначениеЗаполнено(Параметры.Подразделение) Тогда 
			Объект.Подразделение = Параметры.Подразделение;
		КонецЕсли;
		
		Если Параметры.Свойство("Сотрудник") И ЗначениеЗаполнено(Параметры.Сотрудник) Тогда 
			
			Объект.Организация = Параметры.Сотрудник.ГоловнаяОрганизация;
			СтрокаРаботник = Объект.РаботникиОрганизации.Добавить();
			СтрокаРаботник.Сотрудник = Параметры.Сотрудник;
			
			УжеРаботает = ПроверкаАктуальности(Новый Структура("Сотрудник",СтрокаРаботник.Сотрудник));
			
			Если УжеРаботает > 0 Тогда
				ОбщегоНазначенияБПКлиентСервер.СообщитьОбОшибке(НСтр("ru='Сотрудник';uk='Співробітник'") + СтрокаРаботник.Сотрудник + НСтр("ru=' уже работал в этой организации или находится в другой организации';uk=' вже працював у цій організації або знаходиться в іншій організації'"));
				СтрокаРаботник.Сотрудник = ПредопределенноеЗначение("Справочник.Сотрудники.ПустаяСсылка");
			Иначе
				Если Не ЗначениеЗаполнено(Объект.Дата) Тогда
					СтрокаРаботник.ДатаПриема = ТекущаяДата();
				Иначе
					СтрокаРаботник.ДатаПриема = Объект.Дата;
				КонецЕсли; 
				СтрокаРаботник.ЗанимаемыхСтавок	= 1;
				Если Не ЗначениеЗаполнено(СтрокаРаботник.ТабельныйНомер) Тогда
					СтрокаРаботник.ТабельныйНомер 	= СтрокаРаботник.Сотрудник.Код;
				КонецЕсли;
			КонецЕсли;
	
		КонецЕсли;
		
		УстановитьФункциональныеОпцииФормы();
		
	КонецЕсли;
	
	МаксимальныйТабельныйНомер = ОпределитьМаксимальныйТабельныйНомер();
		
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)

	ОбщегоНазначенияБПКлиент.ОбработкаОповещенияФормыДокумента(ЭтаФорма, Объект.Ссылка, ИмяСобытия, Параметр, Источник);

КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	УстановитьСостояниеДокумента();	
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	ПодготовитьФормуНаСервере(); 

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	МаксимальныйТабельныйНомер = ОпределитьМаксимальныйТабельныйНомер();
КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(
		Элемент.ТекстРедактирования,
		ЭтотОбъект,
		"Объект.Комментарий");

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыРаботникиОрганизаций

&НаКлиенте
Процедура РаботникиОрганизацииСотрудникПриИзменении(Элемент)
	 
	ТекущаяСтрока = Элементы.РаботникиОрганизации.ТекущиеДанные;
	
	УжеРаботает = ПроверкаАктуальности(Новый Структура("Сотрудник",ТекущаяСтрока.Сотрудник));
	
	Если УжеРаботает > 0 Тогда
		ТекстСообщения = НСтр("ru='Сотрудник';uk='Співробітник'") + ТекущаяСтрока.Сотрудник + НСтр("ru=' уже работал в этой организации или находится в другой организации';uk=' вже працював у цій організації або знаходиться в іншій організації'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		ТекущаяСтрока.Сотрудник = ПредопределенноеЗначение("Справочник.Сотрудники.ПустаяСсылка");
		Возврат;
	КонецЕсли;
	
	ДозаполнитьСтроку(ТекущаяСтрока);
	
	Если РаботникТекущейСтроки <> ТекущаяСтрока.Сотрудник Тогда
		
		СтруктураПоиска = Новый Структура("Сотрудник", РаботникТекущейСтроки);
		
		Если  ЗначениеЗаполнено(РаботникТекущейСтроки) Тогда
			УдалитьНачисленияПоРаботнику(РаботникТекущейСтроки, Ложь);
		КонецЕсли;	
		
		Если Объект.РаботникиОрганизации.НайтиСтроки(СтруктураПоиска).Количество() = 0 Тогда
			ДобавитьНачисленияПоСтроке(ТекущаяСтрока);
		Иначе
			ПереформироватьНачисленияПоРаботнику();
		КонецЕсли;
		
	КонецЕсли;
	
	РаботникТекущейСтроки = ТекущаяСтрока.Сотрудник;
	
	ОтобразитьОтборСтрок(ОтборУстановлен);
	
КонецПроцедуры

&НаКлиенте
Процедура РаботникиОрганизацииПодразделениеДолжностьПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.РаботникиОрганизации.ТекущиеДанные;
	
	СтруктураОтбора = Новый Структура("ПодразделениеОрганизации, Должность",ТекущиеДанные.ПодразделениеОрганизации, ТекущиеДанные.Должность);
	СрезШР = ОсновноеНачислениеПоШтатномуРасписанию(СтруктураОтбора, ТекущиеДанные.ДатаПриема);
	
	Если СрезШР <> Неопределено Тогда
		ТекущиеДанные.СпособОтраженияВБухУчете = СрезШР.СпособОтраженияВБухУчете;
	КонецЕсли;	
	
	СтруктураПоиска = Новый Структура("Сотрудник", ТекущиеДанные.Сотрудник);
	
	Если Объект.РаботникиОрганизации.НайтиСтроки(СтруктураПоиска).Количество() = 0 Тогда
		ДобавитьНачисленияПоСтроке(ТекущиеДанные)
	Иначе
		ПереформироватьНачисленияПоРаботнику();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура РаботникиОрганизацииТабельныйНомерПриИзменении(Элемент)
	ТекущаяСтрока = Элементы.РаботникиОрганизации.ТекущиеДанные;
	МаксимальныйТабельныйНомер = Макс(МаксимальныйТабельныйНомер, ИНАГРО_ПолучитьСледующийНомер(ТекущаяСтрока.ТабельныйНомер));
КонецПроцедуры

&НаКлиенте
Процедура РаботникиОрганизацииДатаПриемаПриИзменении(Элемент)
		
	ТекущиеДанные = Элементы.РаботникиОрганизации.ТекущиеДанные;
	Если РаботникТекущейСтроки <> ТекущиеДанные.Сотрудник Тогда
		
		СтруктураПоиска = Новый Структура("Сотрудник", РаботникТекущейСтроки);
		
		Если Объект.РаботникиОрганизации.НайтиСтроки(СтруктураПоиска).Количество() = 0 Тогда
			ДобавитьНачисленияПоСтроке(ТекущиеДанные)
		Иначе
			ПереформироватьНачисленияПоРаботнику();
		КонецЕсли;
		
	КонецЕсли;
	
	РаботникТекущейСтроки = ТекущиеДанные.Сотрудник;

КонецПроцедуры

&НаКлиенте
Процедура РаботникиОрганизацииСпособОтраженияВБухучетеПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.РаботникиОрганизации.ТекущиеДанные;
	
	ПерезаполнитьНачисленияПоРаботнику(ТекущиеДанные);

КонецПроцедуры

&НаКлиенте
Процедура РаботникиОрганизацииПриАктивизацииСтроки(Элемент)
	
	ОтобразитьОтборСтрок(ОтборУстановлен);
	
	ТЧПриАктивизацииСтроки("РаботникиОрганизации", Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура РаботникиОрганизацииПередУдалением(Элемент, Отказ)
	
	УдалитьНачисленияПоРаботнику(Элементы.РаботникиОрганизации.ТекущиеДанные.Сотрудник, Истина);

КонецПроцедуры

&НаКлиенте
Процедура РаботникиОрганизацииПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	РаботникТекущейСтроки = Элементы.РаботникиОрганизации.ТекущиеДанные.Сотрудник;
	Если НоваяСтрока Тогда
		Элементы.РаботникиОрганизации.ТекущиеДанные.ТабельныйНомер = "";
		Элементы.РаботникиОрганизации.ТекущиеДанные.ЗанимаемыхСтавок = 1;
		Элементы.РаботникиОрганизации.ТекущиеДанные.УжеРаботает = ?(Объект.ВидЗанятости = ПредопределенноеЗначение("Перечисление.ВидыЗанятости.ВнутреннееСовместительство"), Истина, Ложь);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура РаботникиОрганизацииПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	Если НоваяСтрока И ОтменаРедактирования Тогда
		УдалитьНачисленияПоРаботнику(РаботникТекущейСтроки, Истина);
	КонецЕсли;	

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыНачисления

&НаКлиенте
Процедура НачисленияПриАктивизацииСтроки(Элемент)
	
	ТЧПриАктивизацииСтроки("Начисления", Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура НачисленияПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТабличнаяЧастьПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование);

КонецПроцедуры

&НаКлиенте
Процедура НачисленияВидРасчетаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Начисления.ТекущиеДанные;
	
	УстановитьВидимостьПоказателей(ТекущиеДанные);
	
	Для СчПоказателей = 1 По 6 Цикл
		ТекущиеДанные["Показатель" + СчПоказателей] = 0;
	КонецЦикла;
	
	// для ночных и вчерних определим "процент отплаты"
	Если ТекущиеДанные.ВидРасчета = ПредопределенноеЗначение("ПланВидовРасчета.ИНАГРО_Начисления.ДоплатаЗаВечерниеЧасы") Тогда
		СтавкаВечерних = ПолучитьСтавкуВечерних(Объект.Организация);
		ТекущиеДанные.Показатель2 = СтавкаВечерних;
	ИначеЕсли ТекущиеДанные.ВидРасчета = ПредопределенноеЗначение("ПланВидовРасчета.ИНАГРО_Начисления.ДоплатаЗаНочныеЧасы") Тогда
		СтавкаНочных = ПолучитьСтавкуНочных(Объект.Организация);
		ТекущиеДанные.Показатель2 = СтавкаНочных;
	КонецЕсли;	

	
	Если Не ЗначениеЗаполнено(ТекущиеДанные.ВидНачисления) Тогда
		Элементы.Начисления.ТекущиеДанные.ВидНачисления = ПредопределенноеЗначение("Перечисление.ИНАГРО_ВидыНачисленийРаботникаОрганизации.Индивидуальное");
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ТекущиеДанные.СпособОтраженияВБухучете) Тогда
		СпособОтражения = ПолучитьЗначениеРеквизитаСправочника(ТекущиеДанные.ВидРасчета, "СпособОтраженияВБухучете");
		Если ЗначениеЗаполнено(СпособОтражения) Тогда
			ТекущиеДанные.СпособОтраженияВБухучете = СпособОтражения;
		Иначе
			ТекущиеДанные.СпособОтраженияВБухучете = Элементы.РаботникиОрганизации.ТекущиеДанные.СпособОтраженияВБухучете;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыВзносыФОТ

&НаКлиенте
Процедура ВзносыФОТПриАктивизацииСтроки(Элемент)
	
	ТЧПриАктивизацииСтроки("ВзносыФОТ", Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ВзносыФОТПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТабличнаяЧастьПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыУдержания

&НаКлиенте
Процедура УдержанияПриАктивизацииСтроки(Элемент)
	
	ТЧПриАктивизацииСтроки("Удержания", Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура УдержанияПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТабличнаяЧастьПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование);

КонецПроцедуры

&НаКлиенте
Процедура УдержанияВидРасчетаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Удержания.ТекущиеДанные;
	
	УстановитьВидимостьПоказателей(ТекущиеДанные);
	
	Для СчПоказателей = 1 По 6 Цикл
		ТекущиеДанные["Показатель" + СчПоказателей] = 0;
	КонецЦикла;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура УстановитьОтбор(Команда)
	
	ОтборУстановлен = Не ОтборУстановлен;
	Если ОтборУстановлен Тогда
		Элементы.УстановитьОтбор.Картинка = БиблиотекаКартинок.СостояниеПользователя02;
	Иначе
		Элементы.УстановитьОтбор.Картинка = БиблиотекаКартинок.ЗначокФизическиеЛица32;
	КонецЕсли;
	
	ОтобразитьОтборСтрок(ОтборУстановлен);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ПодготовитьФормуНаСервере()
	
	УстановитьСостояниеДокумента();
	УправлениеФормой(ЭтаФорма);
			
КонецПроцедуры

&НаСервере
Процедура УстановитьФункциональныеОпцииФормы()
	
	ПараметрыФО = Новый Структура("Организация, Период", Объект.Организация, Объект.Дата);
	УстановитьПараметрыФункциональныхОпцийФормы(ПараметрыФО);
	
КонецПроцедуры

&НаСервере
Процедура УправлениеФормой(Форма)
	
	Для Каждого ТекСтрока Из Объект.Начисления Цикл
	
		УстановитьВидимостьПоказателейНаСервере(ТекСтрока);
		
	КонецЦикла;
	
	Для Каждого ТекСтрока Из Объект.Удержания Цикл
		
		УстановитьВидимостьПоказателейНаСервере(ТекСтрока);
		
	КонецЦикла;
		
КонецПроцедуры

&НаСервере
Процедура УстановитьСостояниеДокумента()
	
	СостояниеДокумента = ОбщегоНазначенияБП.СостояниеДокумента(Объект);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьПоказателейНаСервере(ТекСтрока)
	
	СведенияОВидеРасчета = ПолучитьСведенияОВидеРасчета(ТекСтрока.ВидРасчета);
	ЕстьПоказатели = Ложь;
	Для СчПоказателей = 1 По 6 Цикл
		ТекСтрока["Показатель" + СчПоказателей + "Видимость"] = Ложь;
		Если СчПоказателей <= СведенияОВидеРасчета["КоличествоПоказателей"] Тогда
			Если СведенияОВидеРасчета["Показатель" + СчПоказателей + "Видимость"] Тогда
				ТекСтрока.ЕстьПоказатели = Истина;
				ТекСтрока["Показатель" + СчПоказателей + "Видимость"] = Истина;
				ТекСтрока["ИмяПоказатель" + СчПоказателей] = СведенияОВидеРасчета["Показатель" + СчПоказателей + "Наименование"];
			Иначе
				ТекСтрока["Показатель" + СчПоказателей + "Видимость"] = Ложь;

			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
		
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьПоказателей(ТекСтрока)
	
	СведенияОВидеРасчета = ПолучитьСведенияОВидеРасчета(ТекСтрока.ВидРасчета);
	ЕстьПоказатели = Ложь;
	Для СчПоказателей = 1 По 6 Цикл
		ТекСтрока["Показатель" + СчПоказателей + "Видимость"] = Ложь;
		Если СчПоказателей <= СведенияОВидеРасчета["КоличествоПоказателей"] Тогда
			Если СведенияОВидеРасчета["Показатель" + СчПоказателей + "Видимость"] Тогда
				ТекСтрока.ЕстьПоказатели = Истина;
				ТекСтрока["Показатель" + СчПоказателей + "Видимость"] = Истина;
				ТекСтрока["ИмяПоказатель" + СчПоказателей] = СведенияОВидеРасчета["Показатель" + СчПоказателей + "Наименование"];
			Иначе
				ТекСтрока["Показатель" + СчПоказателей + "Видимость"] = Ложь;

			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
		
КонецПроцедуры

&НаСервере
Функция ПолучитьЗначениеРеквизитаСправочника(Справочник, ИмяРеквизита);
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Справочник, ИмяРеквизита);
	
КонецФункции

&НаСервере
Функция ПолучитьСтавкуВечерних(Организация)
	
	Возврат 100*РегистрыСведений.ИНАГРО_УчетнаяПолитикаПоПерсоналу.Получить(Новый Структура ("Организация", Организация)).КоэффициентВечерних;
	
КонецФункции

&НаСервере
Функция ПолучитьСтавкуНочных(Организация)
	
	Возврат 100*РегистрыСведений.ИНАГРО_УчетнаяПолитикаПоПерсоналу.Получить(Новый Структура ("Организация", Организация)).КоэффициентНочных;
	
КонецФункции

&НаСервере
Функция ПроверкаАктуальности(СтруктураОтбора)
	 
	Возврат РегистрыСведений.ИНАГРО_РаботникиОрганизаций.СрезПоследних(,СтруктураОтбора).Количество();
	 
КонецФункции

&НаСервере
Функция ОсновноеНачислениеПоШтатномуРасписанию(СтруктураОтбора, ДатаПриема)
	
	Срез = РегистрыСведений.ИНАГРО_ШтатноеРасписаниеОрганизаций.СрезПоследних(ДатаПриема,СтруктураОтбора);
	
	Если Срез.Количество() = 0 Тогда
		Возврат Неопределено;
	Иначе
		СтруктураВозврата = Новый Структура ("ОсновноеНачисление", Срез[0].ОсновноеНачисление);
		СтруктураВозврата.Вставить("СпособОтраженияВБухучете"    , Срез[0].СпособОтраженияВБухучете);
		Возврат СтруктураВозврата;
	КонецЕсли;	 	 
	
КонецФункции

&НаСервере
Функция ПолучитьСведенияОВидеРасчета(ВидРасчета)
	
	Возврат ИНАГРО_ЗарплатаКадрыРасширенныйПовтИсп.ПолучитьСведенияОВидеРасчетаСхемыМотивации(ВидРасчета);
	
КонецФункции

&НаСервере
Процедура НадбавкиПоШтатномуРасписанию(СтруктураОтбора, ДатаПриема, Сотрудник, СпособОтраженияВБухУчете)
	СрезНадбавок = РегистрыСведений.ИНАГРО_НадбавкиПоШтатномуРасписаниюОрганизаций.СрезПоследних(ДатаПриема, СтруктураОтбора);
	СведенияОВидахРасчета = Новый Соответствие;
	Если СрезНадбавок <> Неопределено Тогда
		Для Каждого Надбавка Из СрезНадбавок Цикл
			Строка = Объект.Начисления.Добавить();
			Строка.Сотрудник	  = Сотрудник;
			Строка.ВидРасчета = Надбавка.ВидНадбавки;
			Строка.ВидНачисления = ПредопределенноеЗначение("Перечисление.ИНАГРО_ВидыНачисленийРаботникаОрганизации.Надбавка");
			Строка.Показатель1 = Надбавка.Показатель1;
			Строка.Показатель2 = Надбавка.Показатель2;
			Строка.Показатель3 = Надбавка.Показатель3;
			Строка.Показатель4 = Надбавка.Показатель4;
			Строка.Показатель5 = Надбавка.Показатель5;
			Строка.Показатель6 = Надбавка.Показатель6;
			Если ЗначениеЗаполнено(Надбавка.СпособОтраженияВБухучете) Тогда
				Строка.СпособОтраженияВБухучете = Надбавка.СпособОтраженияВБухучете;
			Иначе	
				Строка.СпособОтраженияВБухучете = СпособОтраженияВБухУчете;
			КонецЕсли;
			
		УстановитьВидимостьПоказателейНаСервере(Строка);
		КонецЦикла;	
	КонецЕсли;	
	
КонецПроцедуры 

&НаСервере
Процедура ПолучитьВыборкуПоГруппеВзносов(ГруппаВзносов, ДатаЗаполнения, Сотрудник)
	
	Выборка =  ИНАГРО_ПроведениеРасчетов.НалогиПоГруппеВзносов(ГруппаВзносов, ДатаЗаполнения); 
	
	Пока Выборка.Следующий() Цикл
		Если Выборка.СпособРасчета = ПредопределенноеЗначение("Перечисление.СпособыРасчетаНачислений.ВзносыФОТ") Тогда
			Строка = Объект.ВзносыФОТ.Добавить();
			Строка.Сотрудник	= Сотрудник;
			Строка.Налог		= Выборка.Налог;
		Иначе	
			Строка = Объект.Взносы.Добавить();
			Строка.Сотрудник	= Сотрудник;
			Строка.Налог		= Выборка.Налог;
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ ИНАГРО_ПроведениеРасчетов.ИспользуетсяЕСВ(ДатаЗаполнения) Тогда
		// Если дата приема раньше ввода ЕСВ, а на рабочую дату ЕСВ уже используется
		// тогда добавим еще и новые взносы
		Выборка = ИНАГРО_ПроведениеРасчетов.НалогиПоГруппеВзносов(ГруппаВзносов, ДатаЗаполнения);
		Пока Выборка.Следующий() Цикл
			Если Выборка.СпособРасчета = ПредопределенноеЗначение("Перечисление.СпособыРасчетаНачислений.ВзносыФОТ") Тогда
				Строка = Объект.ВзносыФОТ.Добавить();
				Строка.Сотрудник	= Сотрудник;
				Строка.Налог		= Выборка.Налог;
			Иначе	
				Строка = Объект.Взносы.Добавить();
				Строка.Сотрудник	= Сотрудник;
				Строка.Налог		= Выборка.Налог;
			КонецЕсли;
		КонецЦикла;		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ОтобразитьОтборСтрок(ОтборУстановлен)
	
	Если ОтборУстановлен И Элементы.РаботникиОрганизации.ТекущиеДанные <> Неопределено Тогда    
	    Элементы.Начисления.ОтборСтрок = Новый ФиксированнаяСтруктура("Сотрудник", Элементы.РаботникиОрганизации.ТекущиеДанные.Сотрудник);
	    Элементы.Взносы.ОтборСтрок = Новый ФиксированнаяСтруктура("Сотрудник", Элементы.РаботникиОрганизации.ТекущиеДанные.Сотрудник);
	    Элементы.ВзносыФОТ.ОтборСтрок = Новый ФиксированнаяСтруктура("Сотрудник", Элементы.РаботникиОрганизации.ТекущиеДанные.Сотрудник);
	    Элементы.Удержания.ОтборСтрок = Новый ФиксированнаяСтруктура("Сотрудник", Элементы.РаботникиОрганизации.ТекущиеДанные.Сотрудник);
	Иначе
	    Элементы.Начисления.ОтборСтрок = Неопределено;
	    Элементы.Взносы.ОтборСтрок = Неопределено;
	    Элементы.ВзносыФОТ.ОтборСтрок = Неопределено;
	    Элементы.Удержания.ОтборСтрок = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

// Добавляет или переопределяет строку в табличной части "Начисления" при изменении сотрудника 
// или формы оплаты труда у сотрудника.
//
&НаКлиенте
Процедура ПереформироватьНачисленияПоРаботнику()
	
	Если ЗначениеЗаполнено(РаботникТекущейСтроки) Тогда
		УдалитьВзносыПоРаботнику(РаботникТекущейСтроки);
	КонецЕсли;
	
	ДобавитьНачисленияПоСтроке(Элементы.РаботникиОрганизации.ТекущиеДанные);
	
КонецПроцедуры // ПереформироватьНачисленияПоРаботнику()

&НаКлиенте
Процедура ДобавитьНачисленияПоСтроке(РаботникСтрока)
	
	СтруктураПоиска = Новый Структура("Сотрудник", РаботникСтрока.Сотрудник);
	СтрокиНачисления = Объект.Начисления.НайтиСтроки(СтруктураПоиска);
	ДобавлятьВТЧНачисления = ?(СтрокиНачисления.Количество() = 0,Истина,Ложь);
	
	СтрокиВзносы = Объект.Взносы.НайтиСтроки(СтруктураПоиска);
	ДобавлятьВТЧВзносы = ?(СтрокиВзносы.Количество() = 0,Истина,Ложь);
	
	СтрокиВзносыФОТ = Объект.ВзносыФот.НайтиСтроки(СтруктураПоиска);
	ДобавлятьВТЧВзносыФОТ = ?(СтрокиВзносыФОТ.Количество() = 0,Истина,Ложь);
	
	Если НЕ ЗначениеЗаполнено(РаботникСтрока.ПодразделениеОрганизации) Или
		НЕ ЗначениеЗаполнено(РаботникСтрока.Должность) Или
		НЕ ЗначениеЗаполнено(РаботникСтрока.ДатаПриема) Тогда
		Возврат;
	КонецЕсли;
	
	Если ДобавлятьВТЧНачисления Тогда
		
		СтруктураОтбора = Новый Структура("ПодразделениеОрганизации, Должность",РаботникСтрока.ПодразделениеОрганизации, РаботникСтрока.Должность);
		СрезШР = ОсновноеНачислениеПоШтатномуРасписанию(СтруктураОтбора, РаботникСтрока.ДатаПриема);
		
		Если СрезШР = Неопределено Тогда
			// основное начисление
			Строка = Объект.Начисления.Добавить();
			Строка.Сотрудник	 	= РаботникСтрока.Сотрудник;
			Строка.ВидРасчета 		= ПредопределенноеЗначение("ПланВидовРасчета.ИНАГРО_Начисления.ОкладПоДням");
			Строка.ВидНачисления 	= ПредопределенноеЗначение("Перечисление.ИНАГРО_ВидыНачисленийРаботникаОрганизации.Основное");
			
		Иначе
			// основное начисление
			Строка = Объект.Начисления.Добавить();
			Строка.Сотрудник	  = РаботникСтрока.Сотрудник;
			Если ЗначениеЗаполнено(СрезШР.ОсновноеНачисление) Тогда
				Строка.ВидРасчета = СрезШР.ОсновноеНачисление;
			Иначе	
				Строка.ВидРасчета 		= ПредопределенноеЗначение("ПланВидовРасчета.ИНАГРО_Начисления.ОкладПоДням");
			КонецЕсли;	
			Строка.ВидНачисления 	= ПредопределенноеЗначение("Перечисление.ИНАГРО_ВидыНачисленийРаботникаОрганизации.Основное");
			
		КонецЕсли;
		УстановитьВидимостьПоказателей(Строка);
		Строка.СпособОтраженияВБухучете = РаботникСтрока.СпособОтраженияВБухучете;
		
		// индексация зарплаты
		Строка = Объект.Начисления.Добавить();
		Строка.Сотрудник	= РаботникСтрока.Сотрудник;
		
		Строка.ВидРасчета = ПредопределенноеЗначение("ПланВидовРасчета.ИНАГРО_Начисления.ИндексацияЗарплаты");
		Строка.СпособОтраженияВБухучете = РаботникСтрока.СпособОтраженияВБухучете;
		
		Строка.ВидНачисления = ПредопределенноеЗначение("Перечисление.ИНАГРО_ВидыНачисленийРаботникаОрганизации.Индивидуальное");
		
		УстановитьВидимостьПоказателей(Строка);
		
		НадбавкиПоШтатномуРасписанию(СтруктураОтбора, РаботникСтрока.ДатаПриема, РаботникСтрока.Сотрудник, РаботникСтрока.СпособОтраженияВБухучете);
	КонецЕсли;
	
	ОсновноеНазначение = ПолучитьЗначениеРеквизитаСправочника(РаботникСтрока.Сотрудник, "ОсновноеНазначение");
	
	Если НЕ ОсновноеНазначение.Пустая() Тогда
		Возврат;
	КонецЕсли;	
	
	СтруктураПоиска = Новый Структура("Сотрудник", РаботникСтрока.Сотрудник);
	Если Объект.Взносы.НайтиСтроки(СтруктураПоиска).Количество() > 1 
		ИЛИ	Объект.ВзносыФОТ.НайтиСтроки(СтруктураПоиска).Количество() > 1 Тогда
		Возврат
	КонецЕсли;

	ОсновнаяГруппаВзносов = ПолучитьЗначениеРеквизитаСправочника(РаботникСтрока.Сотрудник, "ИНАГРО_ГруппаВзносов");
	Если НЕ ОсновнаяГруппаВзносов.Пустая() Тогда
		ГруппаВзносов = ОсновнаяГруппаВзносов;
	Иначе
		ГруппаВзносов = ПредопределенноеЗначение("Справочник.ИНАГРО_ГруппыВзносовВФонды.ОсновнойСостав");
	КонецЕсли;
	
	ДатаЗаполнения = ?(ЗначениеЗаполнено(РаботникСтрока.ДатаПриема),РаботникСтрока.ДатаПриема,Объект.Дата);
	ПолучитьВыборкуПоГруппеВзносов(ГруппаВзносов, ДатаЗаполнения, РаботникСтрока.Сотрудник);
				 
КонецПроцедуры

// Удаляет взносы по работнику
// Параметры:
// Физлицо - СправочникСсылка.Физлица
&НаКлиенте
Процедура УдалитьВзносыПоРаботнику(Сотрудник)
	
	СтруктураПоиска = Новый Структура("Сотрудник", Сотрудник);
	
	// Удалять взносы будем в том случае, когда в т.ч. Работники эта строка с физлицом - последняя.
	Если Объект.РаботникиОрганизации.НайтиСтроки(СтруктураПоиска).Количество() > 1 Тогда
		Возврат
	КонецЕсли;
	
	Строки = Объект.Взносы.НайтиСтроки(СтруктураПоиска);
	
	Для Каждого Строка Из Строки Цикл
		Объект.Взносы.Удалить(Строка);
	КонецЦикла;
		
	Строки = Объект.ВзносыФОТ.НайтиСтроки(СтруктураПоиска);
		
	Для Каждого Строка Из Строки Цикл
		Объект.ВзносыФОТ.Удалить(Строка);
	КонецЦикла;
			
КонецПроцедуры  // УдалитьВзносыПоРаботнику

// Удаляет начисления по работнику, все или автоматически заполняемые
// Параметры:
//   Сотрудник - СправочникСсылка.Физлица
//   УдалятьВсе - булево, если Истина - удаляются все начисления по физлицу,
//				например, при его удалении из сиска.
//				Если Ложь - удалаются только те, которые вводятся "автоматически",
//				например, при редактировании данных по строке табличной части 
//				со списком работников
&НаКлиенте
Процедура УдалитьНачисленияПоРаботнику(Сотрудник, УдалятьВсе)
	
	СтруктураПоиска = Новый Структура("Сотрудник", Сотрудник);
	
	// Удалять начисления будем в том случае, когда в т.ч. Работники эта строка с физлицом - последняя.
	Если Объект.РаботникиОрганизации.НайтиСтроки(СтруктураПоиска).Количество() > 1 Тогда
		Возврат
	КонецЕсли;
	
	// Основные Начисления
	Строки = Объект.Начисления.НайтиСтроки(СтруктураПоиска);
	Если УдалятьВсе Тогда
		Для Каждого Строка Из Строки Цикл
			Объект.Начисления.Удалить(Строка);
		КонецЦикла;
	Иначе
		Для Каждого Строка Из Строки Цикл
			// удалим "основное" начисление
			Объект.Начисления.Удалить(Строка);
		КонецЦикла;
	КонецЕсли;
	
	// Взносы
	Строки = Объект.Взносы.НайтиСтроки(СтруктураПоиска);
	Если УдалятьВсе Тогда
		Для Каждого Строка Из Строки Цикл
			Объект.Взносы.Удалить(Строка);
		КонецЦикла;
	Иначе
		Для Каждого Строка Из Строки Цикл
			// удалим "Взнос" 
			Объект.Взносы.Удалить(Строка);
		КонецЦикла;
	КонецЕсли;
	
	// Взносы на ФОТ
	Строки = Объект.ВзносыФОТ.НайтиСтроки(СтруктураПоиска);
	Если УдалятьВсе Тогда
		Для Каждого Строка Из Строки Цикл
			Объект.ВзносыФОТ.Удалить(Строка);
		КонецЦикла;
	Иначе
		Для Каждого Строка Из Строки Цикл
			// удалим "ВзносыФОТ" 
			Объект.ВзносыФОТ.Удалить(Строка);
		КонецЦикла;
	КонецЕсли;
	
	// Удержания
	Строки = Объект.Удержания.НайтиСтроки(СтруктураПоиска);
	Если УдалятьВсе Тогда
		Для Каждого Строка Из Строки Цикл
			Объект.Удержания.Удалить(Строка);
		КонецЦикла;
	Иначе
		Для Каждого Строка Из Строки Цикл
			// удалим "Удержание" 
			Объект.Удержания.Удалить(Строка);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры  // УдалитьНачисленияПоРаботнику

&НаКлиенте
Процедура ДозаполнитьСтроку(ТекущаяСтрока)
	
	Если Не ЗначениеЗаполнено(Объект.Дата) Тогда
		ТекущаяСтрока.ДатаПриема = ТекущаяДата();
	Иначе
		ТекущаяСтрока.ДатаПриема = Объект.Дата;
	КонецЕсли; 
	ТекущаяСтрока.ЗанимаемыхСтавок	= 1;
	Если Не ЗначениеЗаполнено(ТекущаяСтрока.ТабельныйНомер) Тогда
		
		ТекущаяСтрока.ТабельныйНомер 	= МаксимальныйТабельныйНомер;
		МаксимальныйТабельныйНомер 		= ИНАГРО_ПолучитьСледующийНомер(МаксимальныйТабельныйНомер);
		
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Функция ОпределитьМаксимальныйТабельныйНомер()
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ 
	|	МАКСИМУМ(Приказы.ТабельныйНомер) КАК ТабельныйНомер
	|ИЗ
	|	Документ.ИНАГРО_ПриемНаРаботуВОрганизацию.РаботникиОрганизации КАК Приказы
	|ГДЕ
	|	Приказы.Ссылка.Организация = &Организация");
	Запрос.УстановитьПараметр("Организация",Объект.Организация);
	
	Если Запрос.Выполнить().Пустой() Тогда
		Возврат "0000000001"
	Иначе
		
		СтрокаРезультата = Запрос.Выполнить().Выгрузить()[0];
		Если НЕ ЗначениеЗаполнено(СтрокаРезультата.ТабельныйНомер) Тогда
			Возврат "0000000001"
		Иначе
			Возврат ИНАГРО_ПолучитьСледующийНомер(СокрП(СтрокаРезультата.ТабельныйНомер));
		КонецЕсли;
		
	КонецЕсли;
	
КонецФункции

&НаСервере
// Увеличивает номер в переданной строке на 1
//
// Параметры
//  ПоследнийНомер - строка - представляет собой номер (документа, табельный и т.п.).
//
// Возвращаемое значение:
//  строка  - следующий по порядку номер.
//
Функция ИНАГРО_ПолучитьСледующийНомер(ПоследнийНомер)  
	
	ДлинаНомера = СтрДлина(ПоследнийНомер);
	Если ДлинаНомера = 0 Тогда
		Возврат "1"
	КонецЕсли;
	СчетчикСимв = ДлинаНомера;
	Пока СчетчикСимв > 0 Цикл
		Если СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(Сред(ПоследнийНомер, СчетчикСимв, 1)) Тогда
			СчетчикСимв = СчетчикСимв - 1;
		Иначе
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Если СчетчикСимв = ДлинаНомера Тогда
		НомерЧисловой = 1
	Иначе
		НомерЧисловой = Число(Сред(ПоследнийНомер, СчетчикСимв + 1));
	КонецЕсли;
	Если НомерЧисловой < Pow(10, ДлинаНомера - СчетчикСимв) - 1 Тогда
		СледующийНомер = НомерЧисловой + 1;
	Иначе
		СледующийНомер = НомерЧисловой;
	КонецЕсли;
	НовыйНомер = Лев(ПоследнийНомер,  СчетчикСимв) + Формат(СледующийНомер,"ЧЦ=" + (ДлинаНомера - СчетчикСимв) + "; ЧВН=; ЧГ=0");
	Возврат НовыйНомер
	
КонецФункции // ИНАГРО_ПолучитьСледующийНомер()

&НаКлиенте
Процедура ПерезаполнитьНачисленияПоРаботнику(РаботникСтрока)
	
	Для Каждого Начисление Из Объект.Начисления Цикл
		
		Если Начисление.Сотрудник = РаботникСтрока.Сотрудник Тогда
			Если Начисление.ВидНачисления = ПредопределенноеЗначение("Перечисление.ИНАГРО_ВидыНачисленийРаботникаОрганизации.Основное") Тогда
				Начисление.СпособОтраженияВБухучете = РаботникСтрока.СпособОтраженияВБухучете;
			КонецЕсли;	
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ПереформироватьНачисленияПоРаботнику()

#Область ПроцедурыИФункцииОбработкиТабличныхЧастей

&НаКлиенте
Процедура ТабличнаяЧастьПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока И Не Элементы.РаботникиОрганизации.ТекущиеДанные = Неопределено Тогда
		Элемент.ТекущиеДанные.Сотрудник = Элементы.РаботникиОрганизации.ТекущиеДанные.Сотрудник;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТЧПриАктивизацииСтроки(ИмяТЧ, Элемент)

	ТекущиеДанные = Элементы[ИмяТЧ].ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		РаботникТекущейСтроки = Неопределено;
		Возврат;
	КонецЕсли;
	
	// запомним текущего сотрудника
	РаботникТекущейСтроки = ТекущиеДанные.Сотрудник;
	
	СинхронизируемыеТабличныеЧасти = Новый Соответствие;
	СинхронизируемыеТабличныеЧасти["РаботникиОрганизации"]	= Ложь;
	СинхронизируемыеТабличныеЧасти["Начисления"]	    	= Ложь;
	СинхронизируемыеТабличныеЧасти["Взносы"]	    		= Ложь;
	СинхронизируемыеТабличныеЧасти["ВзносыФОТ"]	    		= Ложь;
	СинхронизируемыеТабличныеЧасти["Удержания"]	    		= Ложь;
	
	ИНАГРО_ЗарплатаКадрыРасширенныйКлиент.СинхронизироватьСтроки(Элементы, Объект, ИмяТЧ, СинхронизируемыеТабличныеЧасти, "Сотрудник");
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункцииБСП

// СтандартныеПодсистемы.Печать

&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры

// Конец СтандартныеПодсистемы.Печать

#КонецОбласти








