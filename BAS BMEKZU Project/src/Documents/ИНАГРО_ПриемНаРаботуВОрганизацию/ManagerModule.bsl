#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область ПроцедурыИФункцииПечати
	
// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	// П1 от 05.12.2008
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "П1_2008";
	КомандаПечати.Представление = НСтр("ru='П1 от 05.12.2008';uk='П1 от 05.12.2008'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечати";
	КомандаПечати.СписокФорм    = "ФормаДокумента,ФормаСписка";
	
	// Реестр документов
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "Реестр";
	КомандаПечати.Представление = НСтр("ru='Реестр документов';uk='Реєстр документів'");
	КомандаПечати.ЗаголовокФормы= НСтр("ru='Реестр документов ""Прием на работу в организацию""';uk='Реєстр документів ""Прийом на роботу в організацію""'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечатиРеестраДокументов";
	КомандаПечати.СписокФорм    = "ФормаСписка";
	КомандаПечати.Порядок       = 100;
	
КонецПроцедуры
		
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	// Устанавливаем признак доступности печати покомплектно.
	ПараметрыВывода.ДоступнаПечатьПоКомплектно = Истина;
	
	// Проверяем, нужно ли для макета СчетЗаказа формировать табличный документ.
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "П1_2008")  Тогда
		
		// Формируем табличный документ и добавляем его в коллекцию печатных форм.
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "П1_2008", НСтр("ru='П1 от 05.12.2008';uk='П1 от 05.12.2008'"), 
		ПечатьП1(МассивОбъектов, ОбъектыПечати, ПараметрыВывода), , "Документ.ИНАГРО_ПриемНаРаботуВОрганизацию.ПФ_MXL_П1_от_05_12_2008", ,Истина);
		
	КонецЕсли; 	

КонецПроцедуры
	
// ПечатьП1(05122008)	
Функция ПечатьП1(МассивОбъектов, ОбъектыПечати, ПараметрыВывода)
	
		УстановитьПривилегированныйРежим(Истина);
		
		ТабДокумент = Новый ТабличныйДокумент;
		ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПриемНаРаботуВОрганизацию_П1";
		
		масСотрудники = Неопределено;
		Если ТипЗнч(МассивОбъектов[0]) = Тип("СправочникСсылка.Сотрудники") Тогда
			Запрос = Новый Запрос;
			Запрос.Текст = 
			
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ИНАГРО_РаботникиОрганизацийСрезПоследних.Регистратор КАК Документ
			|ИЗ
			|	РегистрСведений.ИНАГРО_РаботникиОрганизаций.СрезПоследних(
			|			,
			|			Сотрудник В (&МассивОбъектов)
			|				И ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.ПриемНаРаботу)) КАК ИНАГРО_РаботникиОрганизацийСрезПоследних";
			
			Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
			масСотрудники = МассивОбъектов;
			МассивОбъектов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Документ");
		КонецЕсли;
		Для Каждого Ссылка Из МассивОбъектов Цикл
		
			// получаем данные для печати
			ВыборкаДляШапки = СформироватьЗапросДляПечати("ПоРеквизитамДокумента", Ссылка).Выбрать();
			ВыборкаДляШапки.Следующий();
			ВыборкаРаботники = СформироватьЗапросДляПечати("ПоТабличнойЧастиДокумента", Ссылка, масСотрудники).Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			СведенияОбОрганизации = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Ссылка.Организация, Ссылка.Дата);
			ОтветственныеЛица = ОтветственныеЛицаБП.ОтветственныеЛица(Ссылка.Организация, Ссылка.Дата);
			
			// запоминаем области макета
			Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ИНАГРО_ПриемНаРаботуВОрганизацию.ПФ_MXL_П1_от_05_12_2008");
			
			// печать производится на языке, указанном в настройках пользователя
			КодЯзыкаПечать = ПараметрыВывода.КодЯзыкаДляМногоязычныхПечатныхФорм;
			Макет.КодЯзыкаМакета = КодЯзыкаПечать;
			
			Область = Макет.ПолучитьОбласть("Форма"); 
			
			// Начинаем формировать выходной документ
			Пока ВыборкаРаботники.Следующий() Цикл
				
				ВложеннаяВыборка = ВыборкаРаботники.Выбрать(); 
				ВложеннаяВыборка.Следующий();
				
				// Каждый приказ на отдельной странице.
				Если ТабДокумент.ВысотаТаблицы > 0 Тогда
					ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				КонецЕсли;
				
				// выводим данные из шапки
				Область.Параметры.Заполнить(ВыборкаДляШапки);
				
				//Область.Параметры.НомерДок = ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(ВыборкаДляШапки.НомерДок, Истина, Истина);
				Область.Параметры.НомерДок = ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(ВыборкаДляШапки.НомерДок);
				Область.Параметры.ФИОРуководителя = ФизическиеЛицаКлиентСервер.ИмяФамилияВФорматеДСТУ(Область.Параметры.ФИОРуководителя);
				
				Область.Параметры.НазваниеОрганизации = ВРег(СведенияОбОрганизации.ПолноеНаименование);
				
				// Данные по работнику.
				Область.Параметры.Заполнить(ВложеннаяВыборка);
				
				// Выводим оклад работника
				Оклад = ВложеннаяВыборка.ОкладТарифнаяСтавка;
				
				Гривны = Цел(Оклад);
				Копейки = Цел((Оклад-Гривны)*100);
				Гривны = КадровыйУчетБазовый.РазложитьЧислоВСтроку(Гривны,6);
				Копейки = КадровыйУчетБазовый.РазложитьЧислоВСтроку(Копейки,2,Истина);
				Для Сч = 1 По 6 Цикл
					Область.Параметры["Гривны" + Сч] = Сред(Строка(Гривны), Сч, 1);
				КонецЦикла;
				Для Сч = 1 По 2 Цикл
					Область.Параметры["Копейки" + Сч] = Сред(Строка(Копейки), Сч, 1);
				КонецЦикла;
				
				Если ВложеннаяВыборка.ГрафикРаботы.ДлительностьРабочейНедели <> 0 Тогда
					Область.Параметры.ФлагДлительность = Истина;
					Область.Параметры.ДлительностьЧасы = Цел(ВложеннаяВыборка.ГрафикРаботы.ДлительностьРабочейНедели);
					Минуты = (ВложеннаяВыборка.ГрафикРаботы.ДлительностьРабочейНедели - Цел(ВложеннаяВыборка.ГрафикРаботы.ДлительностьРабочейНедели))*60;
					Область.Параметры.ДлительностьМинуты = Формат(Минуты,"ЧЦ=2; ЧН=00; ЧВН=");
				КонецЕсли;	
				
				ВыборкаДоплаты = СформироватьЗапросДоплаты(ВложеннаяВыборка.Сотрудник,ВложеннаяВыборка.ПодразделениеСотрудника,ВложеннаяВыборка.ДолжностьСотрудника, Ссылка).Выбрать();
				Если ВыборкаДоплаты.Следующий() Тогда
					Гривны = Цел(ВыборкаДоплаты.Сумма);
					Копейки = Цел((ВыборкаДоплаты.Сумма-Гривны)*100);
					
					Гривны = КадровыйУчетБазовый.РазложитьЧислоВСтроку(Гривны,5);
					Копейки = КадровыйУчетБазовый.РазложитьЧислоВСтроку(Копейки,2,Истина);
					
					Для Сч = 1 По 5 Цикл
						Область.Параметры["ДоплатаГривны" + Сч] = Сред(Строка(Гривны), Сч, 1);
					КонецЦикла;
					Для Сч = 1 По 2 Цикл
						Область.Параметры["ДоплатаКопейки" + Сч] = Сред(Строка(Копейки), Сч, 1);
					КонецЦикла;
				КонецЕсли;
				
				ВыборкаНадбавки = СформироватьЗапросНадбавки(ВложеннаяВыборка.Сотрудник,ВложеннаяВыборка.ПодразделениеСотрудника,ВложеннаяВыборка.ДолжностьСотрудника,Ссылка).Выбрать();
				СчНадбавок = 1;
				Пока ВыборкаНадбавки.Следующий() Цикл
					Если ВыборкаНадбавки.ВидРасчета.СпособРасчета = Перечисления.СпособыРасчетаНачислений.Процентом Тогда
						Процент = Цел(ВыборкаНадбавки.Показатель1);
					Иначе
						Процент = Цел(ВыборкаНадбавки.Показатель2);
					КонецЕсли;	
					
					Процент = КадровыйУчетБазовый.РазложитьЧислоВСтроку(Процент,3);
					
					Для Сч = 1 По 3 Цикл
						Область.Параметры["Надбавка"+СчНадбавок+ Сч] = Сред(Строка(Процент), Сч, 1);
					КонецЦикла;
					
					Если ВыборкаНадбавки.ВидРасчета.СпособРасчета = Перечисления.СпособыРасчетаНачислений.ДоплатаЗаВечерниеЧасы Тогда
						Область.Параметры["Надбавка"+СчНадбавок] = Нстр("ru='вечірні години';uk='вечірні години'");
					ИначеЕсли ВыборкаНадбавки.ВидРасчета.СпособРасчета = Перечисления.СпособыРасчетаНачислений.ДоплатаЗаНочныеЧасы Тогда
						Область.Параметры["Надбавка"+СчНадбавок] = Нстр("ru='нічні години';uk='нічні години'");
					Иначе
						Вид = ВыборкаНадбавки.ВидРасчета.Наименование;
						Позиция = Найти(Вид," за"); 
						Если Позиция > 0 Тогда
							Вид = Сред(Вид,Позиция+4);
						КонецЕсли;	
						Область.Параметры["Надбавка"+СчНадбавок] = Вид;
					КонецЕсли;	
					
					
					СчНадбавок = СчНадбавок+1;
					Если СчНадбавок >4 Тогда
						Прервать;
					КонецЕсли;	
				КонецЦикла;
				
				Область.Параметры.ФИОРуководителя = ФизическиеЛицаКлиентСервер.ИмяФамилияВФорматеДСТУ(ОбщегоНазначенияБПВызовСервера.ДанныеФизЛица(Ссылка.Организация,ОтветственныеЛица.Руководитель,Ссылка.Дата));
				ТабДокумент.Вывести(Область);
					
			КонецЦикла;
			
		КонецЦикла;	
			
		Возврат ТабДокумент;
		
КонецФункции // ПечатьП1(05122008)

// Формирует запрос по документу
Функция СформироватьЗапросДляПечати(Режим, Ссылка, масСотрудники = Неопределено)
	
	Запрос = Новый Запрос;
	
	// Установим параметры запроса           
	Запрос.УстановитьПараметр("ДокументСсылка", Ссылка);             
	Запрос.УстановитьПараметр("Руководитель",	Перечисления.ОтветственныеЛицаОрганизаций.Руководитель);
	Запрос.УстановитьПараметр("ДатаДокумента",	 Ссылка.Дата);
	Запрос.УстановитьПараметр("Основное", Перечисления.ИНАГРО_ВидыНачисленийРаботникаОрганизации.Основное);
	Запрос.УстановитьПараметр("Сотрудники", масСотрудники);
	
	Если Режим = "ПоРеквизитамДокумента" Тогда
		
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ 
		|	ОтветственныеЛицаОрганизацийСрезПоследних.Должность КАК ДолжностьРуководителя,
		|	ПриемНаРаботуВОрганизацию.Номер КАК НомерДок,
		|	ПриемНаРаботуВОрганизацию.Дата КАК ДатаДок,
		|	ПриемНаРаботуВОрганизацию.Организация.НаименованиеПолное КАК НазваниеОрганизации,
		|
		|	ВЫБОР КОГДА (ФИОФизЛицСрезПоследних.ФизическоеЛицо) ЕСТЬ NULL  ТОГДА ОтветственныеЛицаОрганизацийСрезПоследних.ФизическоеЛицо.Наименование ИНАЧЕ ФИОФизЛицСрезПоследних.Фамилия + ВЫБОР КОГДА ПОДСТРОКА(ФИОФизЛицСрезПоследних.Имя, 1, 1) <> """" ТОГДА "" "" + ПОДСТРОКА(ФИОФизЛицСрезПоследних.Имя, 1, 1) + ""."" ИНАЧЕ """" КОНЕЦ + ВЫБОР КОГДА ПОДСТРОКА(ФИОФизЛицСрезПоследних.Отчество, 1, 1) <> """" ТОГДА "" "" + ПОДСТРОКА(ФИОФизЛицСрезПоследних.Отчество, 1, 1) + ""."" ИНАЧЕ """" КОНЕЦ КОНЕЦ КАК ФИОРуководителя
		|ИЗ
		|	Документ.ИНАГРО_ПриемНаРаботуВОрганизацию КАК ПриемНаРаботуВОрганизацию
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтветственныеЛицаОрганизаций.СрезПоследних(&ДатаДокумента, ) КАК ОтветственныеЛицаОрганизацийСрезПоследних
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизическихЛиц.СрезПоследних(&ДатаДокумента, ) КАК ФИОФизЛицСрезПоследних
		|			ПО ОтветственныеЛицаОрганизацийСрезПоследних.ФизическоеЛицо = ФИОФизЛицСрезПоследних.ФизическоеЛицо
		|		ПО (ОтветственныеЛицаОрганизацийСрезПоследних.ОтветственноеЛицо = &Руководитель) И ПриемНаРаботуВОрганизацию.Организация = ОтветственныеЛицаОрганизацийСрезПоследних.СтруктурнаяЕдиница
		|
		|ГДЕ
		|	ПриемНаРаботуВОрганизацию.Ссылка = &ДокументСсылка";
		
	ИначеЕсли Режим = "ПоТабличнойЧастиДокумента" Тогда
		
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ 
		|	СтрокиДокумента.НомерСтроки,
		|	СтрокиДокумента.ДатаПриема,
		|	СтрокиДокумента.Работник КАК Работник,
		|	СтрокиДокумента.Сотрудник КАК Сотрудник,
		|	ЛОЖЬ КАК ФлагКонтракт,
		|	ЛОЖЬ КАК ФлагИспытательныйСрок,
		|	СтрокиДокумента.ТабельныйНомер КАК ТабельныйНомер,
		|	ВЫБОР КОГДА СтрокиДокумента.Сотрудник.ИНАГРО_ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.ОсновноеМестоРаботы)
		|	ТОГДА ИСТИНА ИНАЧЕ ЛОЖЬ КОНЕЦ КАК ФлагОсновная,
		|	СтрокиДокумента.ПодразделениеОрганизации.Наименование КАК Подразделение,
		|	СтрокиДокумента.ПодразделениеОрганизации КАК ПодразделениеСотрудника,
		|	СтрокиДокумента.Должность.Наименование КАК Должность,
		|	СтрокиДокумента.Должность КАК ДолжностьСотрудника,
		|	СтрокиДокумента.ГрафикРаботы КАК ГрафикРаботы,
		|	СтрокиДокумента.ВидРасчета	КАК ОкладСпособРасчета,
		|	ЕСТЬNULL(СтрокиДокумента.ОкладТарифнаяСтавка, 0) КАК ОкладТарифнаяСтавка
		|ИЗ
		|	(ВЫБРАТЬ
		|		ПриемНаРаботуВОрганизациюРаботники.НомерСтроки КАК НомерСтроки,
		|		ПриемНаРаботуВОрганизациюРаботники.ДатаПриема КАК ДатаПриема,
		|		ВЫБОР
		|			КОГДА ФИОФизЛицСрезПоследних.Фамилия ЕСТЬ NULL 
		|				ТОГДА ПриемНаРаботуВОрганизациюРаботники.Сотрудник.ФизическоеЛицо.Наименование
		|			ИНАЧЕ ФИОФизЛицСрезПоследних.Фамилия + "" "" + ФИОФизЛицСрезПоследних.Имя + "" "" + ФИОФизЛицСрезПоследних.Отчество
		|		КОНЕЦ КАК Работник,
		|		ПриемНаРаботуВОрганизациюРаботники.Сотрудник		КАК Сотрудник,
		|		ПриемНаРаботуВОрганизациюРаботники.ТабельныйНомер	КАК ТабельныйНомер,
		|		ПриемНаРаботуВОрганизациюРаботники.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
		|		ПриемНаРаботуВОрганизациюРаботники.Должность КАК Должность,
		|		ПриемНаРаботуВОрганизациюРаботники.ГрафикРаботы КАК ГрафикРаботы,
		|		Начисления.Показатель1 КАК ОкладТарифнаяСтавка,
		|		Начисления.ВидРасчета
		|	ИЗ
		|		Документ.ИНАГРО_ПриемНаРаботуВОрганизацию.РаботникиОрганизации КАК ПриемНаРаботуВОрганизациюРаботники
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизическихЛиц.СрезПоследних(&ДатаДокумента, ) КАК ФИОФизЛицСрезПоследних
		|			ПО ПриемНаРаботуВОрганизациюРаботники.Сотрудник.ФизическоеЛицо = ФИОФизЛицСрезПоследних.ФизическоеЛицо
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИНАГРО_ПлановыеНачисленияРаботниковОрганизаций КАК Начисления
		|			ПО ПриемНаРаботуВОрганизациюРаботники.Ссылка = Начисления.Регистратор
		|				И ПриемНаРаботуВОрганизациюРаботники.Сотрудник = Начисления.Сотрудник
		|				И Начисления.ВидНачисления = &Основное
		|	ГДЕ
		|		ПриемНаРаботуВОрганизациюРаботники.Ссылка = &ДокументСсылка" + 
		?(масСотрудники = Неопределено, "", " И (ПриемНаРаботуВОрганизациюРаботники.Сотрудник В(&Сотрудники))") + ") КАК СтрокиДокумента
		|ИТОГИ ПО
		|	Работник";
			
	Иначе
		Возврат Неопределено
	КонецЕсли;
		
	Возврат Запрос.Выполнить();
	
КонецФункции // СформироватьЗапросДляПечати()

// Формирует запрос по документу
Функция СформироватьЗапросДоплаты(Сотрудник, Подразделение, Должность, Ссылка)	
	
	Запрос = Новый Запрос;
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка", Ссылка);
	Запрос.УстановитьПараметр("ДатаДокумента",	 Ссылка.Дата);
	Запрос.УстановитьПараметр("Сотрудник",	 Сотрудник);
	Запрос.УстановитьПараметр("Подразделение",	 Подразделение);
	Запрос.УстановитьПараметр("Должность",	 Должность);
	СписокСпособов = Новый СписокЗначений;
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаНачислений.ФиксированнойСуммой);
	Запрос.УстановитьПараметр("СписокСпособов",	 СписокСпособов);
		
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ 
	|	Надбавки.ВидРасчета КАК ВидРасчета,
	|	Надбавки.Показатель1 КАК Сумма
	|ИЗ
	|	(ВЫБРАТЬ
	|		НадбавкиПоШтатномуРасписаниюОрганизаций.ВидНадбавки КАК ВидРасчета,
	|		НадбавкиПоШтатномуРасписаниюОрганизаций.Показатель1 КАК Показатель1
	|	ИЗ
	|		РегистрСведений.ИНАГРО_НадбавкиПоШтатномуРасписаниюОрганизаций.СрезПоследних(&ДатаДокумента, ПодразделениеОрганизации = &Подразделение И Должность = &Должность) КАК НадбавкиПоШтатномуРасписаниюОрганизаций
	|   ГДЕ
	|       НадбавкиПоШтатномуРасписаниюОрганизаций.ВидНадбавки.СпособРасчета В(&СписокСпособов)
	|
	|   ОБЪЕДИНИТЬ ВСЕ
	|	ВЫБРАТЬ
	|		ПриемНаРаботуВОрганизациюОсновныеНачисления.ВидРасчета,
	|		ПриемНаРаботуВОрганизациюОсновныеНачисления.Показатель1
	|	ИЗ
	|		Документ.ИНАГРО_ПриемНаРаботуВОрганизацию.Начисления КАК ПриемНаРаботуВОрганизациюОсновныеНачисления
	|   ГДЕ
	|       ПриемНаРаботуВОрганизациюОсновныеНачисления.Ссылка =  &ДокументСсылка
	|       И ПриемНаРаботуВОрганизациюОсновныеНачисления.Сотрудник = &Сотрудник
	|       И ПриемНаРаботуВОрганизациюОсновныеНачисления.ВидРасчета.СпособРасчета В(&СписокСпособов)
	|	) КАК Надбавки";
		
	Возврат Запрос.Выполнить();
	
КонецФункции // СформироватьЗапросДоплаты	

Функция СформироватьЗапросНадбавки(Сотрудник, Подразделение, Должность, Ссылка)
	
	Запрос = Новый Запрос;
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка", Ссылка);
	Запрос.УстановитьПараметр("ДатаДокумента",	 Ссылка.Дата);
	Запрос.УстановитьПараметр("Сотрудник",	 Сотрудник);
	Запрос.УстановитьПараметр("Подразделение",	 Подразделение);
	Запрос.УстановитьПараметр("Должность",	 Должность);
	Запрос.УстановитьПараметр("ВидНачисления",	 Перечисления.ИНАГРО_ВидыНачисленийРаботникаОрганизации.Надбавка);
	СписокСпособов = Новый СписокЗначений;
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаНачислений.Процентом);
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаНачислений.ДоплатаЗаВечерниеЧасы);
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаНачислений.ДоплатаЗаНочныеЧасы);
	Запрос.УстановитьПараметр("СписокСпособов",	 СписокСпособов);
		
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Надбавки.ВидРасчета КАК ВидРасчета,
	|	Надбавки.Показатель1 КАК Показатель1,
	|	Надбавки.Показатель2 КАК Показатель2
	|ИЗ
	|	(ВЫБРАТЬ
	|		НадбавкиПоШтатномуРасписаниюОрганизаций.ВидНадбавки КАК ВидРасчета,
	|		НадбавкиПоШтатномуРасписаниюОрганизаций.Показатель1 КАК Показатель1,
	|		НадбавкиПоШтатномуРасписаниюОрганизаций.Показатель2 КАК Показатель2
	|	ИЗ
	|		РегистрСведений.ИНАГРО_НадбавкиПоШтатномуРасписаниюОрганизаций.СрезПоследних(
	|				&ДатаДокумента,
	|				ПодразделениеОрганизации = &Подразделение
	|					И Должность = &Должность) КАК НадбавкиПоШтатномуРасписаниюОрганизаций
	|	ГДЕ
	|		НадбавкиПоШтатномуРасписаниюОрганизаций.ВидНадбавки.СпособРасчета В(&СписокСпособов)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ПриемНаРаботуВОрганизациюОсновныеНачисления.ВидРасчета,
	|		ПриемНаРаботуВОрганизациюОсновныеНачисления.Показатель1,
	|		ПриемНаРаботуВОрганизациюОсновныеНачисления.Показатель2
	|	ИЗ
	|		Документ.ИНАГРО_ПриемНаРаботуВОрганизацию.Начисления КАК ПриемНаРаботуВОрганизациюОсновныеНачисления
	|	ГДЕ
	|		ПриемНаРаботуВОрганизациюОсновныеНачисления.Ссылка = &ДокументСсылка
	|		И ПриемНаРаботуВОрганизациюОсновныеНачисления.Сотрудник = &Сотрудник
	|		И ПриемНаРаботуВОрганизациюОсновныеНачисления.ВидРасчета.СпособРасчета В(&СписокСпособов)
	|		И ПриемНаРаботуВОрганизациюОсновныеНачисления.ВидНачисления = &ВидНачисления) КАК Надбавки";
		
	Возврат Запрос.Выполнить();
	
КонецФункции // СформироватьЗапросНадбавки

Функция ПолучитьДополнительныеРеквизитыДляРеестра() Экспорт
	
	Результат = Новый Структура;	
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецЕсли
