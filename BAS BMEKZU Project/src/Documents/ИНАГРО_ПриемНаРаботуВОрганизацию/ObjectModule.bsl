#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	ДатаПриема = ТекущаяДатаСеанса();

КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ИНАГРО_ПроведениеРасчетов.СформироватьКраткийСоставСотрудников(ЭтотОбъект, "РаботникиОрганизации");

КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, Режим)
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКПроведению(ЭтотОбъект);
	Заголовок = ОбщегоНазначенияБПВызовСервера.ПредставлениеДокументаПриПроведении(Ссылка);
	
	РезультатЗапросаПоШапке = СформироватьЗапросПоШапке(Режим);
	
	// Получим реквизиты шапки из запроса
	ВыборкаПоШапкеДокумента = РезультатЗапросаПоШапке.Выбрать();
	
	Если ВыборкаПоШапкеДокумента.Следующий() Тогда
		
		// выполним выборку по табличной части документа
		РезультатЗапросаПоРаботники = СформироватьЗапросПоРаботникиОрганизаций(Режим);
		ВыборкаПоСтрокамДокумента = РезультатЗапросаПоРаботники.Выбрать();
		
		// обходим строки документа
		Пока ВыборкаПоСтрокамДокумента.Следующий() Цикл 			
			
			ДобавитьСтрокуВДвиженияПоРаботникиОрганизаций(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента);
			Если НЕ ВыборкаПоСтрокамДокумента.Сотрудник.ИНАГРО_ТабельныйНомер = ВыборкаПоСтрокамДокумента.ТабельныйНомер Тогда
				Спр = ВыборкаПоСтрокамДокумента.Сотрудник.ПолучитьОбъект();
				Спр.ИНАГРО_ТабельныйНомер = ВыборкаПоСтрокамДокумента.ТабельныйНомер;
				Спр.Записать();			
			КонецЕсли;
		КонецЦикла;
		
		// выполним выборку по табличной части основных начислений
		ВыборкаПоСтрокамДокумента = СформироватьЗапросПоНачисления().Выбрать();
		Пока ВыборкаПоСтрокамДокумента.Следующий() Цикл
			ПроверитьЗаполнениеСтрокиНачисления(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента, Отказ);
			Если Не Отказ Тогда
				ДобавитьСтрокуВДвиженияПоНачислениям(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента);
			КонецЕсли;
		КонецЦикла;		
		
		// выполним выборку по табличной части удержаний
		ВыборкаПоСтрокамДокумента = СформироватьЗапросПоУдержания().Выбрать();
		Пока ВыборкаПоСтрокамДокумента.Следующий() Цикл
			ПроверитьЗаполнениеСтрокиУдержания(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента, Отказ);
			Если Не Отказ Тогда
				ДобавитьСтрокуВДвиженияПоУдержаниям(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента);
			КонецЕсли;
		КонецЦикла;
		
		// Выполним выборку по табличной части взносов
		// получим реквизиты табличной части для взносов и взносов на ФОТ.
		
		РезультатЗапросаПоВзносам = СформироватьЗапросПоВзносамСотрудники(Режим);
		ВыборкаПоВзносам = РезультатЗапросаПоВзносам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаПоВзносам.Следующий() Цикл 
			
			// Заполним записи в наборах записей регистров
			ДобавитьСтрокуВДвиженияПоВзносыВФонды(ВыборкаПоШапкеДокумента, ВыборкаПоВзносам);
			
		КонецЦикла;		
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКОтменеПроведения(ЭтотОбъект);
	Движения.Записать();

КонецПроцедуры

#КонецОбласти

#Область Проведение

// Формирует запрос по шапке документа
//
// Параметры: 
//  Режим - режим проведения
//
// Возвращаемое значение:
//  Результат запроса
//
Функция СформироватьЗапросПоШапке(Режим)
	
	Запрос = Новый Запрос;

	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка" , Ссылка);
	Запрос.УстановитьПараметр("ПустаяОрганизация" , Справочники.Организации.ПустаяСсылка());
	Запрос.УстановитьПараметр("ИндексацияПоДожностям" , ИНАГРО_ПроведениеРасчетов.ДатаВводаИндексацииПоДолжностям() >= Дата);
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПриемНаРаботуВОрганизацию.Дата,
	|	ПриемНаРаботуВОрганизацию.Организация,
	|	ПриемНаРаботуВОрганизацию.Организация КАК ГоловнаяОрганизация,
	|	&ИндексацияПоДожностям КАК ИндексацияПоДожностям,
	|	ПриемНаРаботуВОрганизацию.Ссылка
	|ИЗ
	|	Документ.ИНАГРО_ПриемНаРаботуВОрганизацию КАК ПриемНаРаботуВОрганизацию
	|ГДЕ
	|	ПриемНаРаботуВОрганизацию.Ссылка = &ДокументСсылка";

	Возврат Запрос.Выполнить();

	
КонецФункции // СформироватьЗапросПоШапке()

// Формирует запрос по таблице "РаботникиОрганизации" документа
//
// Параметры: 
//  Режим - режим проведения
//
// Возвращаемое значение:
//  Результат запроса.
//
Функция СформироватьЗапросПоРаботникиОрганизаций(Режим)
	
	Запрос = Новый Запрос;
	
	// Определим список организаций - структурных подразделений
	// ГоловнаяОрганизация = ВыборкаПоШапкеДокумента.ГоловнаяОрганизация.
	
	ГоловнаяОрганизация = БухгалтерскийУчетПереопределяемый.ГоловнаяОрганизация(Организация);
	Если НЕ ЗначениеЗаполнено(ГоловнаяОрганизация) Тогда
		СписокСтруктурныхПодразделений = ИНАГРО_Зарплата.ПолучитьСписокОбособленныхПодразделенийОрганизации(Организация);
		СписокСтруктурныхПодразделений.Добавить(Организация);
	Иначе
		СписокСтруктурныхПодразделений = ИНАГРО_Зарплата.ПолучитьСписокОбособленныхПодразделенийОрганизации(ГоловнаяОрганизация);
		СписокСтруктурныхПодразделений.Добавить(ГоловнаяОрганизация);
	КонецЕсли;                      
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка", Ссылка);
	Запрос.УстановитьПараметр("Дата", Дата);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("СписокСтруктурныхПодразделений", СписокСтруктурныхПодразделений);
	
	// Описание текста запроса:
	
	ТекстЗапроса = 
	
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТЧРаботникиОрганизаций.НомерСтроки КАК НомерСтроки,
	|	ТЧРаботникиОрганизаций.Сотрудник КАК Сотрудник,
	|	ТЧРаботникиОрганизаций.Сотрудник.Наименование КАК СотрудникНаименование,
	|	ТЧРаботникиОрганизаций.ДатаПриема КАК ДатаПриема,
	|	ТЧРаботникиОрганизаций.БазовыйПериодИндексацииЗарплаты КАК БазовыйПериодИндексацииЗарплаты,
	|	ТЧРаботникиОрганизаций.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	|	ТЧРаботникиОрганизаций.Должность КАК Должность,
	|	ТЧРаботникиОрганизаций.ПринятНаНовоеРабочееМесто КАК ПринятНаНовоеРабочееМесто,
	|	ТЧРаботникиОрганизаций.ДатаСозданияРабочегоМеста КАК ДатаСозданияРабочегоМеста,
	|	ТЧРаботникиОрганизаций.ТабельныйНомер КАК ТабельныйНомер,
	|	ВЫБОР
	|		КОГДА ТЧРаботникиОрганизаций.ПодразделениеОрганизации.Владелец <> &Организация
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ОшибкаПодразделениеНеПринадлежитОрганизации,
	|	ТЧРаботникиОрганизаций.ЗанимаемыхСтавок КАК ЗанимаемыхСтавок,
	|	ТЧРаботникиОрганизаций.ГрафикРаботы КАК ГрафикРаботы,
	|	ТЧРаботникиОрганизаций.УжеРаботает КАК УжеРаботает,
	|	ТЧРаботникиОрганизаций.СпособОтраженияВБухучете КАК СпособОтраженияВБухучете,
	|	ПересекающиесяСтроки.КонфликтнаяСтрокаНомер КАК КонфликтнаяСтрокаНомер,
	|	ПересекающиесяСтрокиТабельныйНомер.КонфликтнаяСтрокаНомер КАК КонфликтнаяСтрокаТабельныйНомер,
	|	ПроверкаНаУникальностьТабНомер.Сотрудник КАК КонфликтнаяСтрокаТабельныйНомерСотрудник
	|ИЗ
	|	Документ.ИНАГРО_ПриемНаРаботуВОрганизацию.РаботникиОрганизации КАК ТЧРаботникиОрганизаций
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ТЧРаботникиОрганизаций.НомерСтроки КАК НомерСтроки,
	|			МИНИМУМ(ТЧРаботникиОрганизаций2.НомерСтроки) КАК КонфликтнаяСтрокаНомер
	|		ИЗ
	|			Документ.ИНАГРО_ПриемНаРаботуВОрганизацию.РаботникиОрганизации КАК ТЧРаботникиОрганизаций
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ИНАГРО_ПриемНаРаботуВОрганизацию.РаботникиОрганизации КАК ТЧРаботникиОрганизаций2
	|				ПО (ТЧРаботникиОрганизаций2.Ссылка = &ДокументСсылка)
	|					И ТЧРаботникиОрганизаций.Сотрудник = ТЧРаботникиОрганизаций2.Сотрудник
	|					И ТЧРаботникиОрганизаций.НомерСтроки > ТЧРаботникиОрганизаций2.НомерСтроки
	|		ГДЕ
	|			ТЧРаботникиОрганизаций.Ссылка = &ДокументСсылка
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ТЧРаботникиОрганизаций.НомерСтроки) КАК ПересекающиесяСтроки
	|		ПО ТЧРаботникиОрганизаций.НомерСтроки = ПересекающиесяСтроки.НомерСтроки
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ТЧРаботникиОрганизаций.НомерСтроки КАК НомерСтроки,
	|			МИНИМУМ(ТЧРаботникиОрганизаций2.НомерСтроки) КАК КонфликтнаяСтрокаНомер
	|		ИЗ
	|			Документ.ИНАГРО_ПриемНаРаботуВОрганизацию.РаботникиОрганизации КАК ТЧРаботникиОрганизаций
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ИНАГРО_ПриемНаРаботуВОрганизацию.РаботникиОрганизации КАК ТЧРаботникиОрганизаций2
	|				ПО (ТЧРаботникиОрганизаций2.Ссылка = &ДокументСсылка)
	|					И ТЧРаботникиОрганизаций.ТабельныйНомер = ТЧРаботникиОрганизаций2.ТабельныйНомер
	|					И ТЧРаботникиОрганизаций.НомерСтроки > ТЧРаботникиОрганизаций2.НомерСтроки
	|		ГДЕ
	|			ТЧРаботникиОрганизаций.Ссылка = &ДокументСсылка
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ТЧРаботникиОрганизаций.НомерСтроки) КАК ПересекающиесяСтрокиТабельныйНомер
	|		ПО ТЧРаботникиОрганизаций.НомерСтроки = ПересекающиесяСтрокиТабельныйНомер.НомерСтроки
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ИНАГРО_ПриемНаРаботуВОрганизацию.РаботникиОрганизации КАК ПроверкаНаУникальностьТабНомер
	|		ПО ТЧРаботникиОрганизаций.ДатаПриема >= ПроверкаНаУникальностьТабНомер.ДатаПриема
	|			И (ПроверкаНаУникальностьТабНомер.Ссылка.Проведен)
	|			И ТЧРаботникиОрганизаций.Ссылка <> ПроверкаНаУникальностьТабНомер.Ссылка
	|			И ТЧРаботникиОрганизаций.Ссылка.Организация = ПроверкаНаУникальностьТабНомер.Ссылка.Организация
	|			И ТЧРаботникиОрганизаций.ТабельныйНомер = ПроверкаНаУникальностьТабНомер.ТабельныйНомер
	|			И ТЧРаботникиОрганизаций.Сотрудник.ФизическоеЛицо <> ПроверкаНаУникальностьТабНомер.Сотрудник.ФизическоеЛицо
	|ГДЕ
	|	ТЧРаботникиОрганизаций.Ссылка = &ДокументСсылка";
	
	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос.Выполнить();
	
КонецФункции // СформироватьЗапросПоРаботникиОрганизаций()

// Формирует запрос по таблице "Начисления" документа
//
// Параметры: 
//  нет
//
// Возвращаемое значение:
//  Результат запроса.
//
Функция СформироватьЗапросПоНачисления()
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Основное",Перечисления.ИНАГРО_ВидыНачисленийРаботникаОрганизации.Основное);
	
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ //<< Ин-Агро - добавлено Разрешенные
	|	ТЧНачисления.Ссылка						КАК Ссылка,
	|	ТЧНачисления.НомерСтроки				КАК НомерСтроки,
	|	ТЧНачисления.Сотрудник					КАК Сотрудник,
	|	ТЧНачисления.ВидРасчета					КАК ВидРасчета,
	|	ТЧНачисления.Показатель1				КАК Показатель1,
	|	ТЧНачисления.Показатель2				КАК Показатель2,
	|	ТЧНачисления.Показатель3				КАК Показатель3,
	|	ТЧНачисления.ВидНачисления				КАК ВидНачисления,
	|	ТЧРаботникиОрганизации.ДатаПриема		КАК ДатаПриема,
	|	ТЧНачисления2.ВсегоОсновных				КАК ВсегоОсновных,
	|	ТЧНачисления.СпособОтраженияВБухучете	КАК СпособОтраженияВБухучете
	|ИЗ	Документ.ИНАГРО_ПриемНаРаботуВОрганизацию.Начисления КАК ТЧНачисления
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ Документ.ИНАГРО_ПриемНаРаботуВОрганизацию.РаботникиОрганизации КАК ТЧРаботникиОрганизации
	|ПО		ТЧРаботникиОрганизации.Сотрудник = ТЧНачисления.Сотрудник 
	|	И	ТЧРаботникиОрганизации.Ссылка = ТЧНачисления.Ссылка
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ 
	| (ВЫБРАТЬ
	|    ТЧНачисления.Сотрудник,
	|    ТЧНачисления.ВидНачисления,
	|    Количество(ТЧНачисления.НомерСтроки) КАК ВсегоОсновных
	|  ИЗ Документ.ИНАГРО_ПриемНаРаботуВОрганизацию.Начисления КАК ТЧНачисления
	|  ГДЕ ТЧНачисления.ВидНачисления = &Основное
	|    И ТЧНачисления.Ссылка = &ДокументСсылка
	|  СГРУППИРОВАТЬ ПО ТЧНачисления.Сотрудник,ТЧНачисления.ВидНачисления
	|) КАК ТЧНачисления2
	|ПО		ТЧНачисления2.Сотрудник = ТЧНачисления.Сотрудник 
	|
	|ГДЕ	ТЧНачисления.Ссылка = &ДокументСсылка
	|";
	
	Запрос.Текст = ТекстЗапроса;
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка", Ссылка);
	
	Возврат Запрос.Выполнить();
	
КонецФункции // СформироватьЗапросПоНачисления()

// Формирует запрос по таблице "Сотрудники" документа
//
// Параметры: 
//  Режим - режим проведения
//
// Возвращаемое значение:
//  Результат запроса. В запросе данные документа дополняются значениями
//  проверяемых параметров из связанного с.
//
Функция СформироватьЗапросПоВзносамСотрудники(Режим)
	
	Запрос = Новый Запрос;
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка", Ссылка);
	
	// Описание текста запроса:
	//
	// 1. Выборка "Начисления": 
	//		Объединяются строки ТЧ Начисления. Сразу проверяем наличие строк-дублей.  
	
	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ТЧВзносы.НомерСтроки,
	               |	ТЧВзносы.Сотрудник,
	               |	ТЧВзносы.Налог,
	               |	ТЧВзносы.Действие,
	               |	ТЧРаботники.ДатаПриема КАК ДатаДействия
	               |ИЗ
	               |	Документ.ИНАГРО_ПриемНаРаботуВОрганизацию.Взносы КАК ТЧВзносы
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ИНАГРО_ПриемНаРаботуВОрганизацию.РаботникиОрганизации КАК ТЧРаботники
	               |		ПО ТЧВзносы.Сотрудник = ТЧРаботники.Сотрудник
	               |			И (ТЧРаботники.Ссылка = &ДокументСсылка)
	               |ГДЕ
	               |	ТЧВзносы.Ссылка = &ДокументСсылка
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ТЧВзносыФОТ.НомерСтроки,
	               |	ТЧВзносыФОТ.Сотрудник,
	               |	ТЧВзносыФОТ.Налог,
	               |	ТЧВзносыФОТ.Действие,
	               |	ТЧРаботники.ДатаПриема
	               |ИЗ
	               |	Документ.ИНАГРО_ПриемНаРаботуВОрганизацию.ВзносыФОТ КАК ТЧВзносыФОТ
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ИНАГРО_ПриемНаРаботуВОрганизацию.РаботникиОрганизации КАК ТЧРаботники
	               |		ПО ТЧВзносыФОТ.Сотрудник = ТЧРаботники.Сотрудник
	               |			И (ТЧРаботники.Ссылка = &ДокументСсылка)
	               |ГДЕ
	               |	ТЧВзносыФОТ.Ссылка = &ДокументСсылка";
	
	
	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос.Выполнить();
	
КонецФункции

// Формирует запрос по таблице "Начисления" документа
//
// Параметры: 
//  нет
//
// Возвращаемое значение:
//  Результат запроса.
//
Функция СформироватьЗапросПоУдержания()
	
	Запрос = Новый Запрос;
	
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ //<< Ин-Агро - добавлено Разрешенные
	|	ТЧ.Ссылка						КАК Ссылка,
	|	ТЧ.НомерСтроки					КАК НомерСтроки,
	|	ТЧ.Сотрудник						КАК Сотрудник,
	|	ТЧ.ВидРасчета					КАК ВидРасчета,
	|	ТЧ.Показатель1					КАК Показатель1,
	|	ТЧ.Показатель2					КАК Показатель2,
	|	ТЧ.Показатель3					КАК Показатель3,
	|	ТЧ.СпособОтраженияВБухучете		КАК СпособОтраженияВБухучете,
	|	ТЧРаботникиОрганизации.ДатаПриема		КАК ДатаПриема
	|
	|	ИЗ	Документ.ИНАГРО_ПриемНаРаботуВОрганизацию.Удержания КАК ТЧ
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ИНАГРО_ПриемНаРаботуВОрганизацию.РаботникиОрганизации КАК ТЧРаботникиОрганизации
	|		ПО ТЧРаботникиОрганизации.Сотрудник = ТЧ.Сотрудник И ТЧРаботникиОрганизации.Ссылка = ТЧ.Ссылка
	|
	|ГДЕ  ТЧ.Ссылка = &ДокументСсылка
	|";
	
	Запрос.Текст = ТекстЗапроса;
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка", Ссылка);
	
	Возврат Запрос.Выполнить();
	
КонецФункции // СформироватьЗапросПоНачисления()

// Проверяет правильность заполнения реквизитов в строке ТЧ "Начисления" документа.
//
// Параметры: 
//  ВыборкаПоШапкеДокумента		- выборка из результата запроса по шапке документа,
//  ВыборкаПоСтрокамДокумента	- спозиционированная на определеной строке выборка 
//  							  из результата запроса, 
//  Отказ 						- флаг отказа в проведении,
//	Заголовок				- Заголовок для сообщений об ошибках проведения.
//
Процедура ПроверитьЗаполнениеСтрокиНачисления(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента, Отказ)
	
	СтрокаНачалаСообщенияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='ТЧ ""Начисления"" в строке %1: ';uk='ТЧ ""Нарахування"" в рядку %1: '"), СокрЛП(ВыборкаПоСтрокамДокумента.НомерСтроки));
	// Проверка заполнения показателей
	
	Если ВыборкаПоСтрокамДокумента.ВидНачисления = Перечисления.ИНАГРО_ВидыНачисленийРаботникаОрганизации.Основное И ВыборкаПоСтрокамДокумента.ВсегоОсновных > 1 Тогда
		ТекстСообщения = СтрокаНачалаСообщенияОбОшибке + Нстр("ru=' у работника может быть только одно основное начисления!';uk=' у робітника може бути лише тільки одне основне нарахування!'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,ЭтотОбъект,,,Отказ);
	
	КонецЕсли;	 
	
	// проверка на существование работника в табличной части "РаботникиОрганизации"
	Если ВыборкаПоСтрокамДокумента.ДатаПриема = NULL Тогда
		ТекстСообщения = СтрокаНачалаСообщенияОбОшибке + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Нстр("ru='Работник (""%1"") не введен в приказ - по нему не могут быть введены удержания!';uk='Працівник (""%1"") не внесений у наказ - по ньому не можуть бути введені утримання!'"),ВыборкаПоСтрокамДокумента.Сотрудник);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,ЭтотОбъект, "Сотрудник","Объект",Отказ);
	КонецЕсли;
	
КонецПроцедуры		

// Проверяет правильность заполнения реквизитов в строке ТЧ "Начисления" документа.
//
// Параметры: 
//  ВыборкаПоШапкеДокумента		- выборка из результата запроса по шапке документа,
//  ВыборкаПоСтрокамДокумента	- спозиционированная на определеной строке выборка 
//  							  из результата запроса, 
//  Отказ 						- флаг отказа в проведении,
//	Заголовок				- Заголовок для сообщений об ошибках проведения.
//
Процедура ПроверитьЗаполнениеСтрокиУдержания(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента, Отказ)
	
	СтрокаНачалаСообщенияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='ТЧ ""Удержания"" в строке %1: ';uk='ТЧ ""Утримання"" в рядку %1: '"), СокрЛП(ВыборкаПоСтрокамДокумента.НомерСтроки));
	
	Если ВыборкаПоСтрокамДокумента.ДатаПриема = NULL Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Нстр("ru='Работник (""%1"") не введен в приказ - по нему не могут быть введены удержания!';uk='Працівник (""%1"") не внесений у наказ - по ньому не можуть бути введені утримання!'"),ВыборкаПоСтрокамДокумента.Сотрудник);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаНачалаСообщенияОбОшибке + ТекстСообщения,ЭтотОбъект, "Сотрудник","Объект",Отказ);
	КонецЕсли;
	
КонецПроцедуры		

// По строке выборки результата запроса по документу формируем движения по регистрам.
//
// Параметры: 
//  ВыборкаПоШапкеДокумента                - выборка из результата запроса по шапке документа,
//  СтруктураПараметров                    - структура параметров проведения.
//
// Возвращаемое значение:
//  Нет.
//
Процедура ДобавитьСтрокуВДвиженияПоРаботникиОрганизаций(ВыборкаПоШапкеДокумента, ВыборкаПоРаботникиОрганизаций)
	
	// Движения на дату приема
	Движения.ИНАГРО_РаботникиОрганизаций.Записывать = Истина;
	//---------------------------------------------------
	// Движения по регистру "РаботникиОрганизаций"
	Движение = Движения.ИНАГРО_РаботникиОрганизаций.Добавить();
	// Свойства
	Движение.Период                     = ВыборкаПоРаботникиОрганизаций.ДатаПриема;
	// Измерения
	Движение.Сотрудник                    = ВыборкаПоРаботникиОрганизаций.Сотрудник;
	
	Движение.Организация   		    	= ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;
	
	// Ресурсы
	Движение.ЗанимаемыхСтавок   		= ВыборкаПоРаботникиОрганизаций.ЗанимаемыхСтавок;
	Движение.ПодразделениеОрганизации   = ВыборкаПоРаботникиОрганизаций.ПодразделениеОрганизации;
	Движение.Должность   		    	= ВыборкаПоРаботникиОрганизаций.Должность;
	Движение.ГрафикРаботы   		    = ВыборкаПоРаботникиОрганизаций.ГрафикРаботы;
	Движение.СпособОтраженияВБухучете   = ВыборкаПоРаботникиОрганизаций.СпособОтраженияВБухучете;
	
	// Реквизиты
	Движение.ПричинаИзмененияСостояния  = Перечисления.ПричиныИзмененияСостояния.ПриемНаРаботу;
	Движение.ПринятНаНовоерабочееМесто = ВыборкаПоРаботникиОрганизаций.ПринятНаНовоерабочееМесто;
	Если ВыборкаПоРаботникиОрганизаций.ПринятНаНовоерабочееМесто Тогда
		Движение.ДатаСозданияРабочегоМеста = ВыборкаПоРаботникиОрганизаций.ДатаСозданияРабочегоМеста;
	КонецЕсли;	
	
	//---------------------------------------------------
	// Движения по регистру "КоэффициентыПовышенияОкладов" - для правильного расчета индексации заработка.
	Если (НЕ ВыборкаПоШапкеДокумента.ИндексацияПоДожностям ИЛИ Дата < ИНАГРО_ПроведениеРасчетов.ДатаИзмененияПорогаИндексации()) И ВыборкаПоРаботникиОрганизаций.Сотрудник.ОсновноеНазначение = Справочники.Сотрудники.ПустаяСсылка()Тогда
		Движения.ИНАГРО_КоэффициентПовышенияОкладов.Записывать = Истина;
		Движение = Движения.ИНАГРО_КоэффициентПовышенияОкладов.Добавить();
		ПрименяетсяФиксированнаяИндексация = (ИНАГРО_ПроведениеРасчетов.ДатаВводаФиксированнойИндексации() <= Дата);
		Если ПрименяетсяФиксированнаяИндексация Тогда
			Движение.Период	= ?( ВыборкаПоРаботникиОрганизаций.БазовыйПериодИндексацииЗарплаты < ВыборкаПоРаботникиОрганизаций.ДатаПриема, НачалоМесяца(ДобавитьМесяц(ВыборкаПоРаботникиОрганизаций.ДатаПриема,-1)), ВыборкаПоРаботникиОрганизаций.БазовыйПериодИндексацииЗарплаты);
		Иначе
			Движение.Период	= ?( ВыборкаПоРаботникиОрганизаций.БазовыйПериодИндексацииЗарплаты < ВыборкаПоРаботникиОрганизаций.ДатаПриема, ВыборкаПоРаботникиОрганизаций.ДатаПриема, ВыборкаПоРаботникиОрганизаций.БазовыйПериодИндексацииЗарплаты);
		КонецЕсли;	
		Движение.Сотрудник		= ВыборкаПоРаботникиОрганизаций.Сотрудник;
		Движение.Организация	= ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;
		Движение.Коэффициент	= 1;
		
	КонецЕсли;
	
		
КонецПроцедуры // ДобавитьСтрокуВДвиженияПоРегистрамСведений

Процедура ДобавитьСтрокуВДвиженияПоНачислениям(ВыборкаПоШапкеДокумента, ВыборкаСтрокЗапроса)
	// плановые начисления
	Если ВыборкаСтрокЗапроса.ВидРасчета = "*"
		И ВыборкаСтрокЗапроса.СпособОтраженияВБухучете = Справочники.СпособыОтраженияЗарплатыВРеглУчете.ПустаяСсылка() Тогда
		Возврат;		
	КонецЕсли;   
	Движения.ИНАГРО_ПлановыеНачисленияРаботниковОрганизаций.Записывать = Истина;
	Движение = Движения.ИНАГРО_ПлановыеНачисленияРаботниковОрганизаций.Добавить();
	
	// Свойства
	Движение.Период                     = ВыборкаСтрокЗапроса.ДатаПриема;
	
	// Измерения
	Движение.Сотрудник                  = ВыборкаСтрокЗапроса.Сотрудник;
	Движение.Организация				= ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;
	Движение.ВидРасчета        			= ВыборкаСтрокЗапроса.ВидРасчета;
	
	// Ресурсы
	Движение.Действует					= Истина; 
	
	Движение.Показатель1				= ВыборкаСтрокЗапроса.Показатель1; 
	Движение.Показатель2				= ВыборкаСтрокЗапроса.Показатель2; 
	Движение.Показатель3				= ВыборкаСтрокЗапроса.Показатель3; 
	Движение.ВидНачисления				= ВыборкаСтрокЗапроса.ВидНачисления;
	
	Движение.СпособОтраженияВБухучете	= ВыборкаСтрокЗапроса.СпособОтраженияВБухучете;
	
КонецПроцедуры

// По строке выборки результата запроса по документу формируем движения по регистрам.
//
// Параметры: 
//  ВыборкаПоШапкеДокумента                - выборка из результата запроса по шапке документа,
//  СтруктураПараметров                    - структура параметров проведения.
//
// Возвращаемое значение:
//  Нет.
//
Процедура ДобавитьСтрокуВДвиженияПоВзносыВФонды(ВыборкаПоШапкеДокумента, ВыборкаПоРаботникиОрганизаций)
	Движения.ИНАГРО_ВзносыВФондыРаботниковОрганизаций.Записывать = Истина;
	Движение = Движения.ИНАГРО_ВзносыВФондыРаботниковОрганизаций.Добавить();
	
	Движение.Период       = ВыборкаПоРаботникиОрганизаций.ДатаДействия;
	
	Движение.Регистратор  = ВыборкаПоШапкеДокумента.Ссылка;
	
	// Измерения
	Движение.Организация  = ВыборкаПоШапкеДокумента.Организация;
	Движение.Сотрудник      = ВыборкаПоРаботникиОрганизаций.Сотрудник;
	Движение.Налог		  = ВыборкаПоРаботникиОрганизаций.Налог;
	
	// Ресурсы
	Движение.Действует	= Истина;
	
КонецПроцедуры // ДобавитьСтрокуВДвиженияПоРегистрамСведений

Процедура ДобавитьСтрокуВДвиженияПоУдержаниям(ВыборкаПоШапкеДокумента, ВыборкаСтрокЗапроса)
	// плановые удержания
	Движения.ИНАГРО_ПлановыеУдержанияРаботниковОрганизаций.Записывать = Истина;
	Движение = Движения.ИНАГРО_ПлановыеУдержанияРаботниковОрганизаций.Добавить();
	
	// Свойства
	Движение.Период                     = ВыборкаСтрокЗапроса.ДатаПриема;
	
	// Измерения
	Движение.Сотрудник                  = ВыборкаСтрокЗапроса.Сотрудник;
	Движение.Организация				= ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;
	Движение.ВидРасчета        			= ВыборкаСтрокЗапроса.ВидРасчета;
	
	// Ресурсы
	Движение.Действует					= Истина; 
	
	Движение.Показатель1				= ВыборкаСтрокЗапроса.Показатель1; 
	Движение.Показатель2				= ВыборкаСтрокЗапроса.Показатель2; 
	Движение.Показатель3				= ВыборкаСтрокЗапроса.Показатель3; 
	
	Движение.СпособОтраженияВБухучете	= ВыборкаСтрокЗапроса.СпособОтраженияВБухучете;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли




