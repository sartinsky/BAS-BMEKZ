#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПроцедурыИФункцииПечати

Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт

	// Прочие затраты (регл.)
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ПрочиеЗатратыБух";
	КомандаПечати.Представление = НСтр("ru='Прочие затраты (регл.) ';uk='Інші витрати (регл.) '");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечати";
	КомандаПечати.СписокФорм    = "ФормаДокумента,ФормаСписка,ФормаВыбора,ФормаДокументаОбщая";
	
	// Реестр документов
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "Реестр";
	КомандаПечати.Представление = НСтр("ru='Реестр документов';uk='Реєстр документів'");
	КомандаПечати.ЗаголовокФормы= НСтр("ru='Реестр документов ""Прочие затраты""';uk='Реєстр документів ""Інші витрати""'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечатиРеестраДокументов";
	КомандаПечати.СписокФорм    = "ФормаСписка";
	КомандаПечати.Порядок       = 100;

КонецПроцедуры		

Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	// Устанавливаем признак доступности печати покомплектно.
	ПараметрыВывода.ДоступнаПечатьПоКомплектно = Истина;
	
	// Проверяем, нужно ли для макета СчетЗаказа формировать табличный документ.
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПрочиеЗатратыБух") Тогда
		
		// Формируем табличный документ и добавляем его в коллекцию печатных форм.
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "ПрочиеЗатратыБух", НСтр("ru='Приходный ордер на товары';uk='Прибутковий ордер на товари'"), 
			ПечатьПрочиеЗатраты(МассивОбъектов, ОбъектыПечати, ПараметрыВывода), , "Документ.ИНАГРО_ПрочиеЗатраты.ПФ_MXL_ПрочиеЗатраты", ,Истина);
		
	КонецЕсли; 	

КонецПроцедуры

Функция ПечатьПрочиеЗатраты(МассивОбъектов, ОбъектыПечати, ПараметрыВывода)
	
	УстановитьПривилегированныйРежим(Истина);
	ВалютаПечати = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	ТабДок = Новый ТабличныйДокумент();
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ИНАГРО_ПрочиеЗатраты.ПФ_MXL_ПрочиеЗатраты");
	ПервыйДокумент = Истина;
	Для Каждого Ссылка Из МассивОбъектов Цикл
		
		Если Не ПервыйДокумент Тогда
			ТабДок.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
				
		ЗапросШапка = Новый Запрос;
		
		ЗапросШапка.УстановитьПараметр( "ТекДок",   Ссылка);
		ТекстЗапросаШапка = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ПрочиеЗатраты.Ссылка.Организация,
		|	ПрочиеЗатраты.Ссылка.Организация.Представление КАК ПечОрганизация,
		|	ПрочиеЗатраты.Ссылка.ПодразделениеОрганизации КАК Подразделение,
		|	ПРЕДСТАВЛЕНИЕ(ПрочиеЗатраты.Ссылка.ПодразделениеОрганизации) КАК ПечПодразделение
		|ИЗ
		|	Документ.ИНАГРО_ПрочиеЗатраты.Затраты КАК ПрочиеЗатраты
		|ГДЕ
		|	ПрочиеЗатраты.Ссылка = &ТекДок";
		ЗапросШапка.Текст = ТекстЗапросаШапка;
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр( "ТекДок",   Ссылка);
		
		ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ПрочиеЗатраты.Ссылка.Организация,
		|	ПрочиеЗатраты.Ссылка.Организация.Представление КАК ПечОрганизация,
		|	ПрочиеЗатраты.Ссылка.ПодразделениеОрганизации КАК Подразделение,
		|	ПРЕДСТАВЛЕНИЕ(ПрочиеЗатраты.Ссылка.ПодразделениеОрганизации) КАК ПечПодразделение,
		|	ПрочиеЗатраты.НомерСтроки КАК НомерСтроки,
		|	ПрочиеЗатраты.Сумма КАК Сумма,
		|	ПрочиеЗатраты.СчетЗатрат КАК КорСчет,
		|	ПрочиеЗатраты.НоменклатурнаяГруппа КАК НомГруппа,
		|	ПрочиеЗатраты.Продукция,
		|	ПрочиеЗатраты.ОбъектСтроительства,
		|	ПрочиеЗатраты.Субконто1 КАК КорСубконто1,
		|	ПрочиеЗатраты.Субконто2 КАК КорСубконто2,
		|	ПрочиеЗатраты.Субконто3 КАК КорСубконто3,
		|	ПрочиеЗатраты.НалоговоеНазначение КАК КорНалоговоеНазначение,
		|	ПрочиеЗатраты.СуммаНУ,
		|	ПрочиеЗатраты.Ссылка.Субконто1 КАК Субконто1,
		|	ПрочиеЗатраты.Ссылка.Субконто2 КАК Субконто2,
		|	ПрочиеЗатраты.Ссылка.Субконто3 КАК Субконто3,
		|	ПрочиеЗатраты.Ссылка.Счет КАК Счет,
		|	ПрочиеЗатраты.Ссылка.НалоговоеНазначениеДоходовИЗатрат КАК НалоговоеНазначение
		|ИЗ
		|	Документ.ИНАГРО_ПрочиеЗатраты.Затраты КАК ПрочиеЗатраты
		|ГДЕ
		|	ПрочиеЗатраты.Ссылка = &ТекДок
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки";
		Запрос.Текст = ТекстЗапроса;
		
		РезультатЗапроса = ЗапросШапка.Выполнить();
		Шапка = РезультатЗапроса.Выбрать();
		Шапка.Следующий();
		
		ТабДок = Новый ТабличныйДокумент;
		ТабДок.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПрочиеЗатраты_ПрочиеЗатраты";
		
		Макет  = ПолучитьМакет("ПФ_MXL_ПрочиеЗатраты"); 
		
		// печать производится на языке, указанном в настройках пользователя
		КодЯзыкаПечать = ПараметрыВывода.КодЯзыкаДляМногоязычныхПечатныхФорм;
		Макет.КодЯзыкаМакета = КодЯзыкаПечать;
	
		// Вывод заголовка
		Область = Макет.ПолучитьОбласть("Заголовок");
		Область.Параметры.Заголовок = ОбщегоНазначенияБПВызовСервера.СформироватьЗаголовокДокумента(Ссылка, НСтр("ru='Прочие затраты';uk='Інші витрати'",КодЯзыкаПечать),КодЯзыкаПечать);
		Область.Параметры.Подразделение    = Шапка.Подразделение;
		Область.Параметры.ПечПодразделение = Шапка.ПечПодразделение;
		Область.Параметры.Организация      = Шапка.Организация;
		Область.Параметры.ПечОрганизация   = Шапка.ПечОрганизация;
		
		ТабДок.Вывести(Область);
		
		Область = Макет.ПолучитьОбласть("ТабШапка");
		ТабДок.Вывести(Область);
		
		Область = Макет.ПолучитьОбласть("ТабСтрока");
		РезультатЗапроса = Запрос.Выполнить();
		ТабЧасть = РезультатЗапроса.Выбрать();
		
		СуммаИтого = 0;
		СуммаНУИтого = 0;
		
		Пока ТабЧасть.Следующий() Цикл
			Область.Параметры.Заполнить(ТабЧасть);
			
			Если ТабЧасть.Счет.ВидыСубконто.Количество() > 0 Тогда
				Область.Параметры.Аналитика1 = ТабЧасть.Счет.ВидыСубконто[0].ВидСубконто.ТипЗначения; 
			КонецЕсли;	
			Если ТабЧасть.Счет.ВидыСубконто.Количество() > 1 Тогда
				Область.Параметры.Аналитика2 = ТабЧасть.Счет.ВидыСубконто[1].ВидСубконто.ТипЗначения; 
			КонецЕсли;	
			Если ТабЧасть.Счет.ВидыСубконто.Количество() > 2 Тогда
				Область.Параметры.Аналитика3 = ТабЧасть.Счет.ВидыСубконто[2].ВидСубконто.ТипЗначения; 
			КонецЕсли;
			
			Если ТабЧасть.КорСчет.ВидыСубконто.Количество() > 0 Тогда
				Область.Параметры.КорАналитика1 = ТабЧасть.КорСчет.ВидыСубконто[0].ВидСубконто.ТипЗначения; 
			КонецЕсли;	
			Если ТабЧасть.КорСчет.ВидыСубконто.Количество() > 1 Тогда
				Область.Параметры.КорАналитика2 = ТабЧасть.КорСчет.ВидыСубконто[1].ВидСубконто.ТипЗначения; 
			КонецЕсли;	
			Если ТабЧасть.КорСчет.ВидыСубконто.Количество() > 2 Тогда
				Область.Параметры.КорАналитика3 = ТабЧасть.КорСчет.ВидыСубконто[2].ВидСубконто.ТипЗначения; 
			КонецЕсли;	
			
			СуммаИтого = СуммаИтого + ТабЧасть.Сумма;
			СуммаНУИтого = СуммаНУИтого + ТабЧасть.СуммаНУ;
			
			ТабДок.Вывести(Область);
			
		КонецЦикла;
		
		Область = Макет.ПолучитьОбласть("Подвал");
		Область.Параметры.СуммаИтого    = СуммаИтого;
		Область.Параметры.СуммаНУИтого    = СуммаНУИтого;
		Область.Параметры.СуммаПрописью = ОбщегоНазначенияБПВызовСервера.СформироватьСуммуПрописью(	СуммаИтого, ВалютаПечати, КодЯзыкаПечать);
		
		ТабДок.Вывести(Область);
		
	КонецЦикла;	
	ТабДок.АвтоМасштаб = Истина;
	ТабДок.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	Возврат ТабДок;
		
КонецФункции 

Функция ПолучитьДополнительныеРеквизитыДляРеестра() Экспорт
	
	Результат = Новый Структура;	
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти 

#Область ОбработчикиСобытий

Процедура ОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка)
	
	Если ВидФормы <> "ФормаДокумента"
		И ВидФормы <> "ФормаОбъекта" Тогда
		Возврат;
	КонецЕсли;

	ВидОперации = Неопределено; 

	Если Параметры.Свойство("Ключ") И ЗначениеЗаполнено(Параметры.Ключ) Тогда
		ВидОперации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Параметры.Ключ, "ВидОперации");
	КонецЕсли;

	// Если документ копируется, то вид формы получаем из копируемого документа.
	Если НЕ ЗначениеЗаполнено(ВидОперации) Тогда
		Если Параметры.Свойство("ЗначениеКопирования")
			И ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
			ВидОперации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
				Параметры.ЗначениеКопирования, "ВидОперации");
		КонецЕсли;
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(ВидОперации) Тогда
		Если Параметры.Свойство("ЗначенияЗаполнения") 
			И ТипЗнч(Параметры.ЗначенияЗаполнения) = Тип("Структура") Тогда
			Если Параметры.ЗначенияЗаполнения.Свойство("ВидОперации") Тогда
				ВидОперации = Параметры.ЗначенияЗаполнения.ВидОперации;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	ФормыИНАГРО_ПрочиеЗатраты= ПолучитьСоответствиеВидовОперацийФормам();
	ВыбраннаяФорма = ФормыИНАГРО_ПрочиеЗатраты[ВидОперации];
	Если ВыбраннаяФорма = Неопределено Тогда
		ВыбраннаяФорма = "ФормаДокумента";
	КонецЕсли;
	
КонецПроцедуры 

#КонецОбласти 

#Область СлужебныеПроцедурыИФункции

Функция ПолучитьСоответствиеВидовОперацийФормам() Экспорт

	ФормыИНАГРО_ПрочиеЗатраты = Новый Соответствие;
	
	ФормыИНАГРО_ПрочиеЗатраты.Вставить(Перечисления.ИНАГРО_ВидыОперацийПрочиеЗатраты.Отражение, 	"ФормаДокументаОбщая");
	ФормыИНАГРО_ПрочиеЗатраты.Вставить(Перечисления.ИНАГРО_ВидыОперацийПрочиеЗатраты.Списание, 		"ФормаДокументаОбщая");
	 	
	Возврат ФормыИНАГРО_ПрочиеЗатраты;

КонецФункции  

Функция ПолучитьФиксированныйМассивВидовОпераций() Экспорт

	МассивВидовОпераций = Новый Массив;
	СписокВидовОпераций = Новый СписокЗначений;
	
	ЗначенияПеречисления = Метаданные.Перечисления.ИНАГРО_ВидыОперацийПрочиеЗатраты.ЗначенияПеречисления;
	Для Каждого ЗначениеПеречисления Из ЗначенияПеречисления Цикл
		ТекущийВидОперации = Перечисления.ИНАГРО_ВидыОперацийПрочиеЗатраты[ЗначениеПеречисления.Имя];
		МассивВидовОпераций.Добавить(ТекущийВидОперации);
	КонецЦикла;
	
	Возврат Новый ФиксированныйМассив(МассивВидовОпераций);

КонецФункции

#КонецОбласти 

#КонецЕсли