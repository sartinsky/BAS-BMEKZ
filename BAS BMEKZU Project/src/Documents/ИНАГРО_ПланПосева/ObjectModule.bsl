#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	ТипДанныхЗаполнения = ТипЗнч(ДанныеЗаполнения);
		
	ЗаполнениеДокументов.Заполнить(ЭтотОбъект, ДанныеЗаполнения);
	 		
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)

	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
		
КонецПроцедуры 

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
		
	Перем Заголовок, СтруктураШапкиДокумента;
	Перем ТаблицаПоПолям;

	Заголовок = ОбщегоНазначенияБПВызовСервера.ПредставлениеДокументаПриПроведении(Ссылка);
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКПроведению(ЭтотОбъект);
	
	Если РучнаяКорректировка Тогда
		Возврат;
	КонецЕсли; 
	
	ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента);
	
	ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоПолям, Отказ, Заголовок);

	Если Не Отказ Тогда
		ДвиженияПоРегистрам(СтруктураШапкиДокумента, ТаблицаПоПолям, Отказ, Заголовок);
	КонецЕсли;

	ПроведениеСервер.ПодготовитьНаборыЗаписейКЗаписиДвижений(ЭтотОбъект);

КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКОтменеПроведения(ЭтотОбъект);
	Движения.Записать();
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)

	Дата = НачалоДня(ОбщегоНазначения.ТекущаяДатаПользователя());
	Ответственный = Пользователи.ТекущийПользователь();

	ДокументОснование = Неопределено;
	
КонецПроцедуры

#КонецОбласти

#Область Проведение

// Процедура формирует структуру шапки документа и дополнительных полей.
// 
Процедура ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента) Экспорт
	
	// Дерево значений, содержащее имена необходимых полей в запросе по шапке.
	Перем ДеревоПолейЗапросаПоШапке;
	
	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента = ОбщегоНазначенияРед12.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
		
	// Заполним по шапке документа дерево параметров, нужных при проведении.
	ДеревоПолейЗапросаПоШапке = ОбщегоНазначенияРед12.СформироватьДеревоПолейЗапросаПоШапке();
		
	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа.
	СтруктураШапкиДокумента = УправлениеЗапасами.СформироватьЗапросПоДеревуПолей(ЭтотОбъект, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, "");
	
КонецПроцедуры

// Процедура формирует таблицы документа.
//
Процедура ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоПолям, Отказ, Заголовок) Экспорт
	
	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("Подразделение",        "Подразделение");
	СтруктураПолей.Вставить("НоменклатурнаяГруппа", "НоменклатурнаяГруппа");
	СтруктураПолей.Вставить("Площадь",              "Площадь");
	
	РезультатЗапросаПоПолям = ОбщегоНазначенияРед12.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Поля", СтруктураПолей);
	ТаблицаПоПолям	        = ПодготовитьТаблицуПоля(Отказ, РезультатЗапросаПоПолям, СтруктураШапкиДокумента); 
				
КонецПроцедуры

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоПолям - результат запроса по табличной части "Поля",
//  СтруктураШапкиДокумента   - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблиица значений.
//
Функция ПодготовитьТаблицуПоля(Отказ,РезультатЗапросаПоПолям, СтруктураШапкиДокумента)
	
	ТаблицаПоля = РезультатЗапросаПоПолям.Выгрузить();
	масПодразделений = ТаблицаПоля.ВыгрузитьКолонку("Подразделение");
	ОбщегоНазначенияБПВызовСервера.УдалитьПовторяющиесяЭлементыМассива(масПодразделений);
	ТаблицаПоля.Очистить();
	ТаблицаПоля.Колонки.Добавить("Организация"); 
	ТаблицаПоля.Колонки.Добавить("ВидУрожая");
	ТаблицаПоля.Колонки.Добавить("Период");
	
	Если ОтменитьПланы Тогда
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Период", Ссылка.МоментВремени());
		Запрос.УстановитьПараметр("парамПодразделения", масПодразделений);
		Запрос.УстановитьПараметр("Организация", Организация);
		
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ 
		|	ИНАГРО_ПланПосеваСрезПоследних.Подразделение,
		|	ИНАГРО_ПланПосеваСрезПоследних.НоменклатурнаяГруппа,
		|	ИНАГРО_ПланПосеваСрезПоследних.ВидУрожая,
		|	ИНАГРО_ПланПосеваСрезПоследних.Организация
		|ИЗ
		|	РегистрСведений.ИНАГРО_ПланПосева.СрезПоследних(&Период, Организация = &Организация) КАК ИНАГРО_ПланПосеваСрезПоследних";
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			НовСтр = ТаблицаПоля.Добавить();
			НовСтр.Организация 			= Выборка.Организация;
			НовСтр.Подразделение 		= Выборка.Подразделение;
			НовСтр.НоменклатурнаяГруппа = Выборка.НоменклатурнаяГруппа;
			НовСтр.ВидУрожая 			= Выборка.ВидУрожая;
			НовСтр.Площадь 				= 0;
			НовСтр.Период 				= Дата - 60*60*24;
		КонецЦикла;
		
		Заголовок = ОбщегоНазначенияБПВызовСервера.ПредставлениеДокументаПриПроведении(Ссылка);
		ДвиженияПоРегистрам(СтруктураШапкиДокумента, ТаблицаПоля, Отказ, Заголовок,Истина)	
	КонецЕсли;
	
	ТаблицаПоля = РезультатЗапросаПоПолям.Выгрузить();
	ТаблицаПоля.Колонки.Добавить("ВидУрожая");
	ТаблицаПоля.ЗаполнитьЗначения(СтруктураШапкиДокумента.ВидУрожая, "ВидУрожая");
	
	ТаблицаПоля.Колонки.Добавить("Организация");  
	ТаблицаПоля.ЗаполнитьЗначения(СтруктураШапкиДокумента.Организация, "Организация");
	масПодразделений = ТаблицаПоля.ВыгрузитьКолонку("Подразделение");
	ОбщегоНазначенияБПВызовСервера.УдалитьПовторяющиесяЭлементыМассива(масПодразделений);
	
	ТаблицаПоля.Колонки.Добавить("Координаты"); 
	ТЗКоординат = ЭтотОбъект.КоординатыПосева.Выгрузить();
	
	Для Каждого СтрокаТаблицыПоля Из ТаблицаПоля Цикл
		СтруктураКоординат = Новый Структура;
		СтруктураКоординат.Вставить("НомерСтрокиПосева",СтрокаТаблицыПоля.НомерСтроки);
		МассивКоординат = ТЗКоординат.НайтиСтроки(СтруктураКоординат);
		ТЗКоординатДляХранилища = Новый ТаблицаЗначений;
		ТЗКоординатДляХранилища.Колонки.Добавить("Широта");
		ТЗКоординатДляХранилища.Колонки.Добавить("Долгота");
		Для Каждого СтрокаМассива Из МассивКоординат Цикл
			СтрокаТЗКоординатДляХранилища = ТЗКоординатДляХранилища.Добавить();
			СтрокаТЗКоординатДляХранилища.Широта = СтрокаМассива.Широта;
			СтрокаТЗКоординатДляХранилища.Долгота = СтрокаМассива.Долгота;
		КонецЦикла;
		ХранилищеКоординат = Новый ХранилищеЗначения(ТЗКоординатДляХранилища); 
		СтрокаТаблицыПоля.Координаты = ХранилищеКоординат;
	КонецЦикла;
	
	ТаблицаПоля.Свернуть("Организация,Подразделение,НоменклатурнаяГруппа,ВидУрожая,Координаты","Площадь");
	ТаблицаПоля.Колонки.Добавить("Период");
	ТаблицаПоля.ЗаполнитьЗначения(Дата, "Период");
	
	Возврат ТаблицаПоля;

КонецФункции 

// Выполняет движения по регистрам 
//
Процедура ДвиженияПоРегистрам(СтруктураШапкиДокумента, ТаблицаПоПолям, Отказ, Заголовок, ОтменитьПланы = Ложь)
		
	НаборДвижений   = Движения.ИНАГРО_ПланПосева;
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	ТаблицаДвижений.Очистить();	
	
	// Заполним таблицу движений.
	ОбщегоНазначенияБПВызовСервера.ЗагрузитьВТаблицуЗначений(ТаблицаПоПолям, ТаблицаДвижений); 	
	НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;
	
	Движения.ИНАГРО_ПланПосева.Записывать = Истина;
	
	Если Не Отказ Тогда
		Движения.ИНАГРО_ПланПосева.ВыполнитьДвижения();
	КонецЕсли;

КонецПроцедуры 

#КонецОбласти

#КонецЕсли 