#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область Печать

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	// Путевой лист
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ПутевойЛист";
	КомандаПечати.Представление = НСтр("ru='Путевой лист';uk='Подорожній лист'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечати";
	КомандаПечати.СписокФорм    = "ФормаДокумента,ФормаСписка";
	
	// Справка - расчет норм расхода топлива
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "СправкаРасчетНорм";
	КомандаПечати.Представление = НСтр("ru='Справка - расчет норм расхода топлива';uk='Довідка - розрахунок норм витрат палива'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечати";
	КомандаПечати.СписокФорм    = "ФормаДокумента,ФормаСписка";
	
	// Путевой лист трактора
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ПутевойЛистТрактора";
	КомандаПечати.Представление = НСтр("ru='Путевой лист трактора';uk='Подорожній лист трактора'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечати";
	КомандаПечати.СписокФорм    = "ФормаДокумента,ФормаСписка";
	
	// ЛимитноЗаборнаяКарта
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ЛимитноЗаборнаяКарта";
	КомандаПечати.Представление = НСтр("ru='Лимитно-заборная карта';uk='Лімітно-забірна карта'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечати";
	КомандаПечати.СписокФорм    = "ФормаДокумента,ФормаСписка";
	
	// Реестр документов
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "Реестр";
	КомандаПечати.Представление = НСтр("ru='Реестр документов';uk='Реєстр документів'");
	КомандаПечати.ЗаголовокФормы= НСтр("ru='Реестр документов ""Путевой лист""';uk='Реєстр документів ""Подорожній лист""'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечатиРеестраДокументов";
	КомандаПечати.СписокФорм    = "ФормаСписка";
	КомандаПечати.Порядок       = 100;
	
	
КонецПроцедуры

Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	// Устанавливаем признак доступности печати покомплектно.
	ПараметрыВывода.ДоступнаПечатьПоКомплектно = Истина;
	
	// Проверяем, нужно ли для макета СчетЗаказа формировать табличный документ.
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПутевойЛист") Тогда
		
		// Формируем табличный документ и добавляем его в коллекцию печатных форм.
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "ПутевойЛист", НСтр("ru='Путевой лист';uk='Подорожній лист'"),              
		ПечатьПутевойЛист(МассивОбъектов, ОбъектыПечати, ПараметрыВывода), , "Документ.ИНАГРО_ПутевойЛистТрактористаМашиниста.ПФ_MXL_ПутевойЛист", ,Истина);
		
	КонецЕсли;
	
	// Проверяем, нужно ли для макета СчетЗаказа формировать табличный документ.
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "СправкаРасчетНорм") Тогда
		
		// Формируем табличный документ и добавляем его в коллекцию печатных форм.
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "СправкаРасчетНорм", НСтр("ru='Справка - расчет норм расхода топлива';uk='Довідка - розрахунок норм витрат палива'"),              
		ПечатьСправкаРасчетНорм(МассивОбъектов, ОбъектыПечати, ПараметрыВывода), , "Документ.ИНАГРО_ПутевойЛистТрактористаМашиниста.ПФ_MXL_СправкаРасчетНорм", ,Истина);
		
	КонецЕсли;
	
	// Проверяем, нужно ли для макета СчетЗаказа формировать табличный документ.
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПутевойЛистТрактора") Тогда
		
		// Формируем табличный документ и добавляем его в коллекцию печатных форм.
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "ПутевойЛистТрактора", НСтр("ru='Путевой лист трактора';uk='Подорожній лист трактора'"),              
		ПечатьПутевойЛистТрактора(МассивОбъектов, ОбъектыПечати, ПараметрыВывода), , "Документ.ИНАГРО_ПутевойЛистТрактористаМашиниста.ПФ_MXL_ПутевойЛистТрактора", ,Истина);
		
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ЛимитноЗаборнаяКарта")  Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "ЛимитноЗаборнаяКарта", НСтр("ru='Лимитно-заборная карта';uk='Лімітно-забірна карта'"), 
		ПечатьЛЗК(МассивОбъектов, ОбъектыПечати, ПараметрыВывода), , "Документ.ИНАГРО_ПутевойЛистГрузовогоАвтомобиля.ПФ_MXL_ЛимитноЗаборнаяКарта", ,Истина);
		
	КонецЕсли;

КонецПроцедуры

// Функция формирует табличный документ с печатной формой путевого листа,
//
// Возвращаемое значение:
// Табличный документ - печатная форма путевой лист.
//
Функция ПечатьПутевойЛист(МассивОбъектов,ОбъектыПечати,ПараметрыВывода)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПутевойЛист";
	
	ПервыйДокумент = Истина;
	
	Для каждого Ссылка Из МассивОбъектов Цикл
		
		Если Не ПервыйДокумент Тогда
			ТабДокумент.ВывестиВертикальныйРазделительСтраниц();
		КонецЕсли; 
		
		ПервыйДокумент = Ложь;
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ТекущийДокумент", Ссылка);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ИНАГРО_Док.Номер КАК НомерДок,
		|	ИНАГРО_Док.Дата КАК ДатаДок,
		|	ИНАГРО_Док.Организация.НаименованиеПолное КАК Организация,
		|	ИНАГРО_Док.Автомобиль,
		|	ИНАГРО_Док.Водитель,
		|	ИНАГРО_Док.Автомобиль.Модель КАК МаркаАвто,
		|	ИНАГРО_Док.Автомобиль.Код КАК ИнвенНомер,
		|	ИНАГРО_Док.СводныйПутевойЛист КАК Сводный  
		|ИЗ
		|	Документ.ИНАГРО_ПутевойЛистТрактористаМашиниста КАК ИНАГРО_Док
		|ГДЕ
		|	ИНАГРО_Док.Ссылка = &ТекущийДокумент";
		Шапка = Запрос.Выполнить().Выбрать();
		Шапка.Следующий();
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ТекущийДокумент",Ссылка);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ИНАГРО_ТЧДок.IDСтроки КАК IDСтроки,
		|	ИНАГРО_ТЧДок.СчетСписания КАК СчетСпис,
		|	ИНАГРО_ТЧДок.Субконто1 КАК Субконто1,
		|	ИНАГРО_ТЧДок.Субконто2 КАК Субконто2,
		|	ИНАГРО_ТЧДок.ДатаДокумента КАК ДатаДокТ,
		|	ИНАГРО_ТЧДок.ДатаПо КАК ДатаПо,
		|	ИНАГРО_ТЧДок.Расценка КАК Расценка,
		|	ИНАГРО_ТЧДок.ВыполненоВНатуре КАК ВыполненоВНатуре,
		|	ИНАГРО_ТЧДок.РасходНаРаботу КАК РасходНаРаботу,
		|	ИНАГРО_ТЧДок.НормаНаРаботу КАК НаЕд,
		|	ИНАГРО_ТЧДок.РасходФактический КАК РасходФакт,
		|	ИНАГРО_ТЧДок.Часов КАК Часов,
		|	ИНАГРО_ТЧДок.НормаВыработки КАК НормаВыработки,
		|	ИНАГРО_ТЧДок.СменнаяЭталоннаяВыработка КАК СменнаяЭталоннаяВыработка,
		|	ИНАГРО_ТЧДок.ВыполненоУслГа КАК ВыполненоУслГа,
		|	ИНАГРО_ТЧДок.СменныхНорм КАК СменныхНорм,
		|	ИНАГРО_ТЧДок.ЕстьПомощник КАК ЕстьПомощник,
		|	ИНАГРО_ТЧДок.ОплатаОсновная КАК ОплатаОсновная,
		|	ИНАГРО_ТЧДок.ОплатаДополнительная КАК ОплатаДополнительная,
		|	ИНАГРО_ТЧДок.ТехнологическаяОперация КАК ВидРабот,
		|	ИНАГРО_ТЧДок.ТехнологическаяОперация.БазоваяЕдиницаИзмерения КАК ЕдИзм,
		|	ИНАГРО_ТЧДок.НомерСтроки КАК Ном,
		|	ИНАГРО_ТЧДок.Агрегат.Наименование КАК Агрегат
		|ИЗ
		|	Документ.ИНАГРО_ПутевойЛистТрактористаМашиниста.ПутевыеЛисты КАК ИНАГРО_ТЧДок
		|ГДЕ
		|	ИНАГРО_ТЧДок.Ссылка = &ТекущийДокумент
		|ИТОГИ
		|	СУММА(ВыполненоВНатуре),
		|	СУММА(РасходНаРаботу),
		|	СУММА(НаЕд),
		|	СУММА(РасходФакт),
		|	СУММА(Часов),
		|	СУММА(ВыполненоУслГа),
		|	СУММА(СменныхНорм),
		|	СУММА(ОплатаОсновная),
		|	СУММА(ОплатаДополнительная)
		|ПО
		|	ОБЩИЕ";
		
		ВыборкаПЛ = Запрос.Выполнить().Выбрать();
		
		Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ИНАГРО_ПутевойЛистТрактористаМашиниста.ПФ_MXL_ПутевойЛист");
		
		// печать производится на языке, указанном в настройках пользователя
		КодЯзыкаПечать = ПараметрыВывода.КодЯзыкаДляМногоязычныхПечатныхФорм;
		Макет.КодЯзыкаМакета = КодЯзыкаПечать;
		
		ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
		ОбластьМакета.Параметры.Заполнить(Шапка);
		ОбластьМакета.Параметры.ДатаДок = Формат(Шапка.ДатаДок, "ДЛФ=DD");
		ОбластьМакета.Параметры.Агрегат = "";
		Если ВыборкаПЛ.Количество() > 0 Тогда
			Пока ВыборкаПЛ.Следующий() Цикл
				ОбластьМакета.Параметры.Агрегат = ОбластьМакета.Параметры.Агрегат + ?(ЗначениеЗаполнено(ВыборкаПЛ.Агрегат),(ВыборкаПЛ.Агрегат + ", "),"");		
			КонецЦикла;
			ОбластьМакета.Параметры.Агрегат = Лев(ОбластьМакета.Параметры.Агрегат, СтрДлина(ОбластьМакета.Параметры.Агрегат) - 2);
			ВыборкаПЛ.Сбросить();
		КонецЕсли;
		ТабДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Строка");
		ВыборкаПЛ.Следующий();
		ОблДно = Макет.ПолучитьОбласть("Дно");
		ОблДно.Параметры.Заполнить(ВыборкаПЛ);
		
		имОплатаПомощника=0;
		Пока ВыборкаПЛ.Следующий() Цикл
			
			ОбластьМакета.Параметры.Заполнить(ВыборкаПЛ);
			
			Если Шапка.Сводный Тогда  
				ОбластьМакета.Параметры.даты = "с " + Формат((ВыборкаПЛ.ДатаДокТ), "ДЛФ=Д") +" по "+ Формат((ВыборкаПЛ.ДатаПо), "ДЛФ=Д");
			Иначе 
				ОбластьМакета.Параметры.даты = Формат(Шапка.ДатаДок, "ДЛФ=Д");
			КонецЕсли;
			
			Если Лев(ВыборкаПЛ.СчетСпис.Код,2) = "91" Или Лев(ВыборкаПЛ.СчетСпис.Код,2) = "92" Тогда
				ОбластьМакета.Параметры.Субконто2 = "";
			КонецЕсли;
			
			// ЗП Помощника 
			Если ВыборкаПЛ.ЕстьПомощник Тогда
				Запрос.Текст =
					"ВЫБРАТЬ
					|	СУММА(ИНАГРО_ПутевойЛистТрактористаМашинистаПомощники.ОплатаПомощника) КАК ОплатаПомощника,
					|	ИНАГРО_ПутевойЛистТрактористаМашинистаПомощники.Помощник КАК Помощник
					|ИЗ
					|	Документ.ИНАГРО_ПутевойЛистТрактористаМашиниста.Помощники КАК ИНАГРО_ПутевойЛистТрактористаМашинистаПомощники
					|ГДЕ
					|	ИНАГРО_ПутевойЛистТрактористаМашинистаПомощники.Ссылка = &ТекущийДокумент
					|	И ИНАГРО_ПутевойЛистТрактористаМашинистаПомощники.IDСтроки = &НомерСтроки
					|
					|СГРУППИРОВАТЬ ПО
					|	ИНАГРО_ПутевойЛистТрактористаМашинистаПомощники.Помощник";
							
				Запрос.УстановитьПараметр("НомерСтроки", ВыборкаПЛ.IDСтроки);
				ВыборкаПомощник = Запрос.Выполнить().Выбрать();
				Пока ВыборкаПомощник.Следующий() Цикл
					Если ЗначениеЗаполнено(ВыборкаПомощник.Помощник) Тогда
						ОбластьМакета.Параметры.ОплатаПомощника = ВыборкаПомощник.ОплатаПомощника;
						имОплатаПомощника = имОплатаПомощника + ВыборкаПомощник.ОплатаПомощника;
					КонецЕсли;
				КонецЦикла;
			Иначе 
				ОбластьМакета.Параметры.ОплатаПомощника = 0;
			КонецЕсли;
			
			ТабДокумент.Вывести(ОбластьМакета);
			
		КонецЦикла;
		
		ОблДно.Параметры.имОплатаПомощника = имОплатаПомощника; 
		ТабДокумент.Вывести(ОблДно);
	КонецЦикла; 
	Возврат ТабДокумент;
	
КонецФункции // ПечатьПутевойЛист()

Функция ПечатьСправкаРасчетНорм(МассивОбъектов,ОбъектыПечати,ПараметрыВывода)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_СправкаРасчетНорм";
	
	ПервыйДокумент = Истина;
	
	Для каждого Ссылка Из МассивОбъектов Цикл
		
		Если Не ПервыйДокумент Тогда
			ТабДокумент.ВывестиВертикальныйРазделительСтраниц();
		КонецЕсли;
		
		ПервыйДокумент = Ложь;
		
		Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ИНАГРО_ПутевойЛистТрактористаМашиниста.ПФ_MXL_СправкаРасчетНорм");
		// печать производится на языке, указанном в настройках пользователя 
		КодЯзыкаПечать = ПараметрыВывода.КодЯзыкаДляМногоязычныхПечатныхФорм;
		Макет.КодЯзыкаМакета = КодЯзыкаПечать;
		
		ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
		ОбластьМакета.Параметры.НомерДок = Ссылка.Номер;
		ОбластьМакета.Параметры.ДатаДок = Формат(Ссылка.Дата,"ДФ=dd.MM.yyyy");

		ТабДокумент.Вывести(ОбластьМакета);
		
		// Надбавки
		СуммаПроцентов      = 0;
		СуммаНадбавокСуммой = 0;
		Для Каждого СтрокаНадбавок Из Ссылка.Надбавки Цикл
			Если СтрокаНадбавок.Надбавка.ВПроцентах Тогда 
				СуммаПроцентов = СуммаПроцентов + СтрокаНадбавок.Размер;
			Иначе
				СуммаНадбавокСуммой = СуммаНадбавокСуммой + СтрокаНадбавок.Размер;
			КонецЕсли;
		КонецЦикла;
		
		Если НЕ Ссылка.ПутевыеЛисты.Количество() = 0 Тогда 
			НадбавкаПоСтроке = Окр(СуммаНадбавокСуммой / Ссылка.ПутевыеЛисты.Количество(), 3);
		КонецЕсли;
		
		НормаПоДокументу = 0;
		Для Каждого СтрокаТЧ Из Ссылка.ПутевыеЛисты Цикл
			
			ОбластьМакета = Макет.ПолучитьОбласть("Операция");
			ОбластьМакета.Параметры.Номер = СтрокаТЧ.НомерСтроки;
			ОбластьМакета.Параметры.ТехнологическаяОперация = СтрокаТЧ.ТехнологическаяОперация;
			ТабДокумент.Вывести(ОбластьМакета);
			
			ОбластьМакета = Макет.ПолучитьОбласть("Расчет");
			
			Дт = ?(Ссылка.СводныйПутевойЛист, СтрокаТЧ.ДатаДокумента, Ссылка.Дата);
			
			НормыВидРабот = ИНАГРО_Транспорт.ИНАГРО_ПолучитьСтруктуруРасценокВидыРаботСХтехники(Дт,Ссылка.Автомобиль.Модель,СтрокаТЧ.ТехнологическаяОперация,СтрокаТЧ.Агрегат,Ссылка.Организация);
			Если НормыВидРабот.Количество() = 0 ИЛИ НормыВидРабот.НормаГСМПо = "" Тогда
				Возврат ТабДокумент;
			КонецЕсли;	
			Если НормыВидРабот.НормаГСМПо = "КЧасам" Тогда
				РасходНаРаботу = СтрокаТЧ.Часов * СтрокаТЧ.НормаНаРаботу;	
				ОбластьМакета.Параметры.Содержание = Нстр( "ru = 'Норма топлива по часам'; uk = 'Норма палива по годинах'",КодЯзыкаПечать);
				ОбластьМакета.Параметры.Формула = Нстр("ru = 'ТЧ.Часов * ТЧ.НормаНаРаботу'; uk = 'ТЧ.Годин * ТЧ.НормаНаРоботу'",КодЯзыкаПечать);
				ОбластьМакета.Параметры.Расчет = СокрЛП(Строка(СтрокаТЧ.Часов)) + " * " +  СокрЛП(Строка(СтрокаТЧ.НормаНаРаботу));
				
			ИначеЕсли НормыВидРабот.НормаГСМПо = "КГа" Тогда
				РасходНаРаботу = СтрокаТЧ.ВыполненоГа * СтрокаТЧ.НормаНаРаботу;
				ОбластьМакета.Параметры.Содержание = Нстр("ru = 'Норма топлива по Га'; uk = 'Норма палива по Га'",КодЯзыкаПечать);
				ОбластьМакета.Параметры.Формула = Нстр("ru = 'ТЧ.ВыполненоГа * ТЧ.НормаНаРаботу'; uk = 'ТЧ.ВиконаноГа * ТЧ.НормаНаРоботу'",КодЯзыкаПечать);
				ОбластьМакета.Параметры.Расчет = СокрЛП(Строка(СтрокаТЧ.ВыполненоГа)) + " * " +  СокрЛП(Строка(СтрокаТЧ.НормаНаРаботу));
				
			ИначеЕсли НормыВидРабот.НормаГСМПо = "КУслГа" Тогда
				РасходНаРаботу = СтрокаТЧ.ВыполненоУслГа * СтрокаТЧ.НормаНаРаботу;
				ОбластьМакета.Параметры.Содержание = Нстр("ru = 'Норма топлива по усл.Га'; uk = 'Норма палива по посл.Га'",КодЯзыкаПечать);
				ОбластьМакета.Параметры.Формула = Нстр("ru = 'ТЧ.ВыполненоУслГа * ТЧ.НормаНаРаботу'; uk = 'ТЧ.ВиконаноПослГа * ТЧ.НормаНаРоботу'",КодЯзыкаПечать);
				ОбластьМакета.Параметры.Расчет = СокрЛП(Строка(СтрокаТЧ.ВыполненоУслГа)) + " * " +  СокрЛП(Строка(СтрокаТЧ.НормаНаРаботу));
				
			Иначе                                                       
				РасходНаРаботу = СтрокаТЧ.ВыполненоВНатуре * СтрокаТЧ.НормаНаРаботу;	
				ОбластьМакета.Параметры.Содержание = Нстр("ru = 'Норма топлива по вып.в натуре'; uk = 'Норма палива по вип.в натурі'",КодЯзыкаПечать);
				ОбластьМакета.Параметры.Формула = Нстр("ru = 'ТЧ.ВыполненоВНатуре * ТЧ.НормаНаРаботу'; uk = 'ТЧ.ВиконаноВНатурі * ТЧ.НормаНаРоботу'",КодЯзыкаПечать);
				ОбластьМакета.Параметры.Расчет = СокрЛП(Строка(СтрокаТЧ.ВыполненоВНатуре)) + " * " +  СокрЛП(Строка(СтрокаТЧ.НормаНаРаботу));
				
			КонецЕсли; 
						
			ОбластьМакета.Параметры.Параметр = "Норма";
			ОбластьМакета.Параметры.ИтогРасчета = РасходНаРаботу;
			ТабДокумент.Вывести(ОбластьМакета);
			ОбластьМакета = Макет.ПолучитьОбласть("Расчет");
			
			Если СуммаПроцентов <> 0 Тогда
				ОбластьМакета.Параметры.Содержание = Нстр("ru='Надбавка (%) по ТЧ ""Надбавки""';uk='Надбавка (%) по ТЧ ""Надбавки""'");
				ОбластьМакета.Параметры.ЗначениеПараметра = СуммаПроцентов;
				ОбластьМакета.Параметры.Параметр = Нстр("ru = 'СуммаПроцентов'; uk = 'СумаВідсотків'",КодЯзыкаПечать);
				
				РасходНаРаботу = РасходНаРаботу + (РасходНаРаботу * СуммаПроцентов / 100);
				ОбластьМакета.Параметры.Формула = Нстр("ru = 'Норма + Норма*СуммаПроцентов/100'; uk = 'Норма + Норма*СумаВідсотків/100'",КодЯзыкаПечать);
				ОбластьМакета.Параметры.Расчет = СокрЛП(Строка(РасходНаРаботу)) + " + " + СокрЛП(Строка(РасходНаРаботу)) + " * " + СокрЛП(Строка(СуммаПроцентов)) + " / 100";
				ОбластьМакета.Параметры.ИтогРасчета = РасходНаРаботу;
				ТабДокумент.Вывести(ОбластьМакета);
				ОбластьМакета = Макет.ПолучитьОбласть("Расчет");
				
			КонецЕсли; 
			
			Если НадбавкаПоСтроке > 0 Тогда
				ОбластьМакета.Параметры.Содержание = Нстр("ru='Надбавка (сум) по ТЧ ""Надбавки""';uk='Надбавка (сум) по ТЧ ""Надбавки""'");
				
				Если СтрокаТЧ.НомерСтроки -1 = Ссылка.ПутевыеЛисты.Количество() Тогда
					РасходНаРаботу = РасходНаРаботу + СуммаНадбавокСуммой;
					ОбластьМакета.Параметры.ЗначениеПараметра = СуммаНадбавокСуммой;
					ОбластьМакета.Параметры.Параметр = Нстр("ru = 'НадбавкаСуммой'; uk = 'НадбавкаСумою'",КодЯзыкаПечать);
					ОбластьМакета.Параметры.Формула = Нстр("ru = 'Норма + НадбавкаСуммой'; uk = 'Норма + НадбавкаСумою'",КодЯзыкаПечать);
					ОбластьМакета.Параметры.Расчет = СокрЛП(Строка(РасходНаРаботу)) + " + " + СокрЛП(Строка(РасходНаРаботу)) + " + " + СокрЛП(Строка(СуммаНадбавокСуммой));
					ОбластьМакета.Параметры.ИтогРасчета = РасходНаРаботу;
					ТабДокумент.Вывести(ОбластьМакета);
				Иначе
					СтрокаТЧ.РасходНаРаботу = СтрокаТЧ.РасходНаРаботу + НадбавкаПоСтроке;
					СуммаНадбавокСуммой = СуммаНадбавокСуммой - НадбавкаПоСтроке;
					ОбластьМакета.Параметры.ЗначениеПараметра = НадбавкаПоСтроке;
					ОбластьМакета.Параметры.Параметр =  Нстр("ru = 'НадбавкаСуммой'; uk = 'НадбавкаСумою'",КодЯзыкаПечать);
					ОбластьМакета.Параметры.Формула = Нстр("ru = 'Норма + НадбавкаСуммой'; uk = 'Норма + НадбавкаСумою'",КодЯзыкаПечать);
					ОбластьМакета.Параметры.Расчет = СокрЛП(Строка(РасходНаРаботу)) + " + " + СокрЛП(Строка(РасходНаРаботу)) + " + " + СокрЛП(Строка(НадбавкаПоСтроке));
					ОбластьМакета.Параметры.ИтогРасчета = РасходНаРаботу;
					ТабДокумент.Вывести(ОбластьМакета);
				КонецЕсли;
				
			КонецЕсли; 
			
			Если Ссылка.ПутевыеЛисты.Количество() > 1 Тогда
				ОбластьМакета = Макет.ПолучитьОбласть("ИтогПоОперации");
				ОбластьМакета.Параметры.ИтогРасчета = РасходНаРаботу;
				ТабДокумент.Вывести(ОбластьМакета);
			КонецЕсли; 
			
			НормаПоДокументу = НормаПоДокументу + РасходНаРаботу;
			
		КонецЦикла;
		
		Если Ссылка.ПутевыеЛисты.Количество() > 0 Тогда
			ОбластьМакета = Макет.ПолучитьОбласть("ИтогПоДокументу");
			ОбластьМакета.Параметры.ИтогРасчета = НормаПоДокументу;
			ТабДокумент.Вывести(ОбластьМакета);
		КонецЕсли; 	
	КонецЦикла; 
	Возврат ТабДокумент;
	
КонецФункции

Функция ПечатьПутевойЛистТрактора(МассивОбъектов,ОбъектыПечати,ПараметрыВывода)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПутевойЛистТрактора";
	
	ПервыйДокумент = Истина;
	
	Для каждого Ссылка Из МассивОбъектов Цикл
		
		Если Не ПервыйДокумент Тогда
			ТабДокумент.ВывестиВертикальныйРазделительСтраниц();
		КонецЕсли;
		
		ПервыйДокумент = Ложь;
/////////////////
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ТекущийДокумент", Ссылка);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ИНАГРО_Док.Номер КАК НомерДок,
		|	ГОД(ИНАГРО_Док.Дата) КАК Год,
		|	ИНАГРО_Док.Организация.НаименованиеПолное КАК Организация,
		|	ИНАГРО_Док.Автомобиль КАК Трактор,
		|	ИНАГРО_Док.Водитель КАК Тракторист,
		|	МЕСЯЦ(ИНАГРО_Док.Дата) КАК Месяц,
		|	ДЕНЬ(ИНАГРО_Док.Дата) КАК Число,
		|	ИНАГРО_Док.БакДо КАК ОстатокНач,
		|	ИНАГРО_Док.БакПосле КАК ОстатокКон,
		|	ИНАГРО_Док.Организация.Наименование КАК Организация1
		|ИЗ
		|	Документ.ИНАГРО_ПутевойЛистТрактористаМашиниста КАК ИНАГРО_Док
		|ГДЕ
		|	ИНАГРО_Док.Ссылка = &ТекущийДокумент";
		Шапка = Запрос.Выполнить().Выбрать();
		Шапка.Следующий();
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ТекущийДокумент",Ссылка);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ТЧТопливоВыданное.Топливо КАК Топливо,
		|	ТЧТопливоВыданное.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	ТЧТопливоВыданное.Количество КАК Количество
		|ИЗ
		|	Документ.ИНАГРО_ПутевойЛистТрактористаМашиниста.ТопливоВыданное КАК ТЧТопливоВыданное
		|ГДЕ
		|	ТЧТопливоВыданное.Ссылка = &ТекущийДокумент";
		
		ВыборкаПЛ = Запрос.Выполнить().Выбрать();
		
		Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ИНАГРО_ПутевойЛистТрактористаМашиниста.ПФ_MXL_ПутевойЛистТрактора");
		
		// печать производится на языке, указанном в настройках пользователя
		КодЯзыкаПечать = ПараметрыВывода.КодЯзыкаДляМногоязычныхПечатныхФорм;
		Макет.КодЯзыкаМакета = КодЯзыкаПечать;
		
		ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
		ОбластьМакета.Параметры.Заполнить(Шапка);
		
		СвойстваТС = РегистрыСведений.ИНАГРО_Сельхозтехника.ПолучитьПоследнее(Ссылка.Дата, Новый Структура("ОсновноеСредство", Ссылка.Автомобиль));
		ОбластьМакета.Параметры.ГосНомер = СвойстваТС.ГосНомер;		
		
		Если ВыборкаПЛ.Количество() > 0 Тогда
			Если ВыборкаПЛ.Следующий() ТОгда
				ОбластьМакета.Параметры.Топливо1 = ВыборкаПЛ.Топливо;		
				ОбластьМакета.Параметры.Количество1 = ВыборкаПЛ.Количество;		
			КонецЕсли;
			Если ВыборкаПЛ.Следующий() ТОгда
				ОбластьМакета.Параметры.Топливо2 = ВыборкаПЛ.Топливо;		
				ОбластьМакета.Параметры.Количество2 = ВыборкаПЛ.Количество;		
			КонецЕсли;
			Если ВыборкаПЛ.Следующий() ТОгда
				ОбластьМакета.Параметры.Топливо3 = ВыборкаПЛ.Топливо;		
				ОбластьМакета.Параметры.Количество3 = ВыборкаПЛ.Количество;		
			КонецЕсли;
			ВыборкаПЛ.Сбросить();
		КонецЕсли;
		ТабДокумент.Вывести(ОбластьМакета);
		
			
		КонецЦикла;
		
		ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		
		ОбластьМакета = Макет.ПолучитьОбласть("Таблица");
		ТабДокумент.Вывести(ОбластьМакета);
		
		Для Н =  1 По 9 Цикл
			ОбластьМакета = Макет.ПолучитьОбласть("СтрокаТаблицы");
			ТабДокумент.Вывести(ОбластьМакета);
		КонецЦикла; 
		
		
		ОбластьМакета = Макет.ПолучитьОбласть("Подвал");
		ТабДокумент.Вывести(ОбластьМакета);
		
		ТабДокумент.АвтоМасштаб = Истина;
		ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	
	Возврат ТабДокумент;
/////////////
	//	
	//	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ИНАГРО_ПутевойЛистТрактористаМашиниста.ПФ_MXL_ПутевойЛистТрактора");
	//	
	//	// печать производится на языке, указанном в настройках пользователя 
	//	КодЯзыкаПечать = ПараметрыВывода.КодЯзыкаДляМногоязычныхПечатныхФорм;
	//	Макет.КодЯзыкаМакета = КодЯзыкаПечать;
	//	
	//	
	//	ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
	//	ОбластьМакета.Параметры.Тракторист = Ссылка.Водитель;
	//	ОбластьМакета.Параметры.Трактор = Ссылка.Автомобиль;
	//	ТабДокумент.Вывести(ОбластьМакета);
	//	
	//	Возврат ТабДокумент;
	//	
	//КонецЦикла;
	
КонецФункции

Функция ПечатьЛЗК(МассивОбъектов, ОбъектыПечати, ПараметрыВывода)

	УстановитьПривилегированныйРежим(Истина);
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ЛимитноЗаборнаяКарта";
	
	ПервыйДокумент = Истина;
	
	Для каждого Ссылка Из МассивОбъектов Цикл
		Если  Не ПервыйДокумент Тогда
			ТабДокумент.ВывестиВертикальныйРазделительСтраниц();
		КонецЕсли; 
		ПервыйДокумент = Ложь;
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ТекущийДокумент", Ссылка);
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	ПутевойЛистТрактористаМашинистаТопливо.Ссылка.Номер,
		|	ПутевойЛистТрактористаМашинистаТопливо.Ссылка.Дата,
		|	ПутевойЛистТрактористаМашинистаТопливо.Ссылка.Водитель.Наименование КАК Получил,
		|	ПутевойЛистТрактористаМашинистаТопливо.Ссылка.Организация,
		|	ПутевойЛистТрактористаМашинистаТопливо.Ссылка.Организация КАК Поставщик,
		|	ПутевойЛистТрактористаМашинистаТопливо.Ссылка.Организация.КодПоЕДРПОУ КАК ЕДРПОУ,
		|	ПутевойЛистТрактористаМашинистаТопливо.Склад
		|ИЗ
		|	Документ.ИНАГРО_ПутевойЛистТрактористаМашиниста.ТопливоВыданное КАК ПутевойЛистТрактористаМашинистаТопливо
		|ГДЕ
		|	ПутевойЛистТрактористаМашинистаТопливо.Ссылка = &ТекущийДокумент";
		Шапка = Запрос.Выполнить().Выбрать();
		Шапка.Следующий();
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ТекущийДокумент", Ссылка);
		Запрос.УстановитьПараметр("ПустаяЕдиницаИзмерения", Справочники.КлассификаторЕдиницИзмерения.ПустаяСсылка());
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВложенныйЗапросПоТоварам.Номенклатура,
		|	ВЫРАЗИТЬ(ВложенныйЗапросПоТоварам.Номенклатура.НаименованиеПолное КАК СТРОКА(1000)) КАК Товар,
		|	ВложенныйЗапросПоТоварам.Номенклатура.Код КАК Код,
		|	ВложенныйЗапросПоТоварам.Количество,
		|	ВложенныйЗапросПоТоварам.ЕдиницаИзмерения.Наименование КАК ЕдиницаИзмерения,
		|	ВложенныйЗапросПоТоварам.НомерСтроки КАК НомерСтроки,
		|	1 КАК ID
		|ИЗ
		|	(ВЫБРАТЬ
		|		ПутевойЛистТрактористаМашинистаТопливо.Топливо КАК Номенклатура,
		|		ПутевойЛистТрактористаМашинистаТопливо.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|		СУММА(ПутевойЛистТрактористаМашинистаТопливо.Количество) КАК Количество,
		|		МИНИМУМ(ПутевойЛистТрактористаМашинистаТопливо.НомерСтроки) КАК НомерСтроки
		|	ИЗ
		|		Документ.ИНАГРО_ПутевойЛистТрактористаМашиниста.ТопливоВыданное КАК ПутевойЛистТрактористаМашинистаТопливо
		|	ГДЕ
		|		ПутевойЛистТрактористаМашинистаТопливо.Ссылка = &ТекущийДокумент
		|	
		|	СГРУППИРОВАТЬ ПО
		|		ПутевойЛистТрактористаМашинистаТопливо.Топливо,
		|		ПутевойЛистТрактористаМашинистаТопливо.ЕдиницаИзмерения) КАК ВложенныйЗапросПоТоварам
		|
		|УПОРЯДОЧИТЬ ПО
		|	ID,
		|	НомерСтроки";
		ЗапросТовары = Запрос.Выполнить().Выгрузить();
		
		// Вывод заголовка                               
		Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ИНАГРО_ПутевойЛистТрактористаМашиниста.ПФ_MXL_ЛимитноЗаборнаяКарта");
		
		// печать производится на языке, указанном в настройках пользователя
		КодЯзыкаПечать = ПараметрыВывода.КодЯзыкаДляМногоязычныхПечатныхФорм;
		Макет.КодЯзыкаМакета = КодЯзыкаПечать;
		
		ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
		
		ОбластьМакета.Параметры.Заполнить(Шапка);
		ОбластьМакета.Параметры.Дата=Формат(Ссылка.Дата, "ДФ='дд ММММ гггг';Л="+ Локализация.ОпределитьКодЯзыкаДляФормат(КодЯзыкаПечать)) + НСтр("ru=' г.';uk=' р.'",КодЯзыкаПечать);
		ТабДокумент.Вывести(ОбластьМакета);
		
		// Вывести табличную часть
		ОбластьМакета = Макет.ПолучитьОбласть("ШапкаТаблицы");
		ТабДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Строка");
		Для каждого ВыборкаСтрокТовары Из ЗапросТовары Цикл 
			Если НЕ ЗначениеЗаполнено(ВыборкаСтрокТовары.Номенклатура) Тогда
				ТекстСообщения = НСтр("ru='В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.';uk='В одному з рядків не заповнене значення номенклатури - рядок під час друку буде пропущений.'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
				Продолжить;
			КонецЕсли;
			
			ОбластьМакета.Параметры.Заполнить(ВыборкаСтрокТовары);
			ОбластьМакета.Параметры.Товар 		= СокрЛП(ВыборкаСтрокТовары.Товар);
			ОбластьМакета.Параметры.НомерСтроки = ЗапросТовары.Индекс(ВыборкаСтрокТовары) + 1;
			ТабДокумент.Вывести(ОбластьМакета);
			
		КонецЦикла;
		
		// Вывести Итого
		ОбластьМакета = Макет.ПолучитьОбласть("Итого");
		ТабДокумент.Вывести(ОбластьМакета);
		
		// Вывести подписи
		ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
		ОбластьМакета.Параметры.Заполнить(Шапка);
		ТабДокумент.Вывести(ОбластьМакета);
	КонецЦикла;
	Возврат ТабДокумент;
		
КонецФункции 

Функция ПолучитьДополнительныеРеквизитыДляРеестра() Экспорт
	
	Результат = Новый Структура;	
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти
	
#Область СлужебныеПроцедурыИФункции

Процедура ЗаполнитьТЧВыпускПродукции(Объект) Экспорт
	
	Объект.ВыпускПродукции.Очистить();
	
	СтруктураШапкиДокумента = Новый Структура;
	СтруктураШапкиДокумента.Вставить("Ссылка", Объект.Ссылка);
	СтруктураШапкиДокумента.Вставить("Дата",   Объект.Дата);   		
	
	ТаблицаВыпуска = ИНАГРО_Транспорт.ИНАГРО_ПодготовитьТаблицуВыпускаПродукцииСельхозтехникаПоОперациям(СтруктураШапкиДокумента);
	
	Для Каждого СтрокаТЧ Из ТаблицаВыпуска Цикл 
		
		Если СтрокаТЧ.ГА <> 0 Тогда
			
			Строка = Объект.ВыпускПродукции.Добавить();
			
			Строка.Номенклатура 	    = СтрокаТЧ.НоменклатураВыпускаГА;
			Строка.Счет				    = СтрокаТЧ.СчетСписания;			
			Строка.Подразделение		= СтрокаТЧ.ПодразделениеОрганизации;
			Строка.НоменклатурнаяГруппа	= СтрокаТЧ.НоменклатурнаяГруппа;
			Строка.НалоговоеНазначение	= СтрокаТЧ.НалоговоеНазначение;
			Строка.Количество			= СтрокаТЧ.ГА;
			Строка.Сумма				= СтрокаТЧ.ГА * СтрокаТЧ.ЦенаГА;
			
		КонецЕсли;
		
		Если СтрокаТЧ.УГА <> 0 Тогда
			
			Строка = Объект.ВыпускПродукции.Добавить();
			
			Строка.Номенклатура 		= СтрокаТЧ.НоменклатураВыпускаУГА;
			Строка.Счет			 		= СтрокаТЧ.СчетСписания; 			
			Строка.Подразделение		= СтрокаТЧ.ПодразделениеОрганизации;
			Строка.НоменклатурнаяГруппа	= СтрокаТЧ.НоменклатурнаяГруппа;
			Строка.НалоговоеНазначение	= СтрокаТЧ.НалоговоеНазначение;  			
			Строка.Количество			= СтрокаТЧ.УГА;
			Строка.Сумма				= СтрокаТЧ.УГА * СтрокаТЧ.ЦенаУГА;
			
		КонецЕсли;
		
	КонецЦикла; 
	
КонецПроцедуры	

#КонецОбласти

#КонецЕсли