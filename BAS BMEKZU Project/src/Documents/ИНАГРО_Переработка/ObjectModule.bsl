#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда  
	
Перем мВалютаРегламентированногоУчета; 

#Область ОбработчикиСобытий

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	ТипДанныхЗаполнения = ТипЗнч(ДанныеЗаполнения);
	Если ДанныеЗаполнения <> Неопределено И ТипДанныхЗаполнения <> Тип("Структура")
		И Метаданные().ВводитсяНаОсновании.Содержит(ДанныеЗаполнения.Метаданные()) Тогда
		ЗаполнитьПоДокументуОснованию(ДанныеЗаполнения);
	КонецЕсли;
	
	ИНАГРО_ЭлеваторЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект);

	ЗаполнениеДокументов.Заполнить(ЭтотОбъект, ДанныеЗаполнения);
	
	Если  ТипДанныхЗаполнения = Тип("Структура")
		И ДанныеЗаполнения.Свойство("ВидОперации") Тогда
		ВидОперации = ДанныеЗаполнения.ВидОперации;
	КонецЕсли;			
		
	УрожайДляПереработки = ХранилищеОбщихНастроек.Загрузить("УрожайДляПереработки", "Элеватор");
	Урожай = ?(ЗначениеЗаполнено(УрожайДляПереработки), УрожайДляПереработки, Урожай);
				
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	МассивНепроверяемыхРеквизитов = Новый Массив; 	
	
	Если ВидОперации = Перечисления.ИНАГРО_ВидыОперацийПереработка.СкладскойУчет Тогда		
		МассивНепроверяемыхРеквизитов.Добавить("Владелец");	
		МассивНепроверяемыхРеквизитов.Добавить("ДоговорКонтрагента");
		МассивНепроверяемыхРеквизитов.Добавить("ВидХранения");
		МассивНепроверяемыхРеквизитов.Добавить("Урожай");
	КонецЕсли;
	
	Если НЕ ОтражатьВРасчетномВыходеПродукции Тогда		
		МассивНепроверяемыхРеквизитов.Добавить("ПодразделениеОрганизации");
	КонецЕсли;

	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);	
	
	Если ОтражатьВБухгалтерскомУчете И ЗначениеЗаполнено(СчетЗатрат) Тогда
		КоличествоСубконто = СчетЗатрат.ВидыСубконто.Количество();		
		Для СчетчикСубконто = 1 По КоличествоСубконто Цикл 
			Если СчетЗатрат.ВидыСубконто[СчетчикСубконто-1].Предопределенное Тогда
				ПроверяемыеРеквизиты.Добавить("Субконто" + СчетчикСубконто);
			КонецЕсли;
		КонецЦикла;	
	КонецЕсли;

КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли; 	
	
	ХранилищеОбщихНастроек.Сохранить("УрожайДляПереработки", "Элеватор", Урожай);
	
	Если НЕ ИНАГРО_Элеватор.ПолучитьПараметрУчетаЭлеватора(Дата, "ОтключитьАвтоматическоеНачислениеУслуг", Ложь) Тогда 
		ЗаполнитьУслуги();
	КонецЕсли;

КонецПроцедуры 

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	Перем Заголовок, СтруктураШапкиДокумента;
	Перем ТаблицаСырья, ТаблицаПродукции;
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКПроведению(ЭтотОбъект); 	
	Если РучнаяКорректировка Тогда
		Возврат;
	КонецЕсли;
	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначенияБПВызовСервера.ПредставлениеДокументаПриПроведении(Ссылка);

	ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента);	
	
	ПодготовитьПараметрыУчетнойПолитики(СтруктураШапкиДокумента, Отказ, Заголовок);	
		
	ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаСырья, ТаблицаПродукции, Отказ, Заголовок);
	
	// Движения по документу
	Если НЕ Отказ Тогда 		
		ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаСырья, ТаблицаПродукции, Отказ, Заголовок);		
	КонецЕсли;	
	
	Движения.Хозрасчетный.ВыполнитьДействияПередЗаписьюДвижений();

	ПроведениеСервер.ПодготовитьНаборыЗаписейКЗаписиДвижений(ЭтотОбъект);	

КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКОтменеПроведения(ЭтотОбъект);
	Движения.Записать();
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)

	Дата = ОбщегоНазначения.ТекущаяДатаПользователя();
	Ответственный = Пользователи.ТекущийПользователь();	
		
КонецПроцедуры

#КонецОбласти

#Область Проведение

// Процедура формирует структуру шапки документа и дополнительных полей.
//
Процедура ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента) Экспорт
	
	// Дерево значений, содержащее имена необходимых полей в запросе по шапке.
	Перем ДеревоПолейЗапросаПоШапке;
	
	СтруктураШапкиДокумента   = ОбщегоНазначенияРед12.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	 		
	// Заполним по шапке документа дерево параметров, нужных при проведении.
	ДеревоПолейЗапросаПоШапке = ОбщегоНазначенияРед12.СформироватьДеревоПолейЗапросаПоШапке();
	
	ОбщегоНазначенияРед12.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "Организация", "ДоговорОрганизация");
	ОбщегоНазначенияРед12.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "ВидДоговора", "ВидДоговора");
	ОбщегоНазначенияРед12.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Склад",                "ТипСклада",   "ТипСклада");
	
	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа.
	СтруктураШапкиДокумента = УправлениеЗапасами.СформироватьЗапросПоДеревуПолей(ЭтотОбъект, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета);
	
	СтруктураШапкиДокумента.Вставить("КоличествоМест", 0);

КонецПроцедуры

// Процедура определяет параметры учетной политики
//
Процедура ПодготовитьПараметрыУчетнойПолитики(СтруктураШапкиДокумента, Отказ, Заголовок)
	
	СтруктураШапкиДокумента.Вставить("ЕстьНалогНаПрибыльДо2015", Истина);
	СтруктураШапкиДокумента.Вставить("ЕстьНДС",                  Истина);

	СпособОценкиМПЗ  = УчетнаяПолитика.СпособОценкиМПЗ(СтруктураШапкиДокумента.Организация, НачалоМесяца(СтруктураШапкиДокумента.Дата));
	ПартионныйУчетБУ = (СпособОценкиМПЗ = Перечисления.СпособыОценки.ФИФО ИЛИ СпособОценкиМПЗ = Перечисления.СпособыОценки.ЛИФО);
	
	СтруктураШапкиДокумента.Вставить("ВедетсяПартионныйУчет", ПартионныйУчетБУ);
		
	СтруктураШапкиДокумента.Вставить("РазрешитьУчетУслугБезПлановыхЦен", Истина);
	
КонецПроцедуры

Процедура ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаСырья, ТаблицаПродукции, Отказ, Заголовок) Экспорт
	
	// Таблица по продукции
	
	СтруктураПолей = Новый Структура();
	СтруктураПростыхПолей = Новый Структура;
	
	СтруктураПолей.Вставить("Номенклатура",             "Номенклатура");
	СтруктураПолей.Вставить("Склад",                    "Склад");
	СтруктураПолей.Вставить("Количество",               "ФизическийВес * Коэффициент");
	СтруктураПолей.Вставить("СчетУчетаБУ",              "СчетУчетаБУ");
	СтруктураПолей.Вставить("СуммаПлановая",            "СуммаПлановая");
	СтруктураПолей.Вставить("НалоговоеНазначениеНовое", "НалоговоеНазначение");
	СтруктураПолей.Вставить("ВидНалоговойДеятельности", "НалоговоеНазначение.ВидНалоговойДеятельности");
	СтруктураПолей.Вставить("ВидДеятельностиНДС",       "НалоговоеНазначение.ВидДеятельностиНДС");
	СтруктураПолей.Вставить("Амортизируется",           "НалоговоеНазначение.Амортизируется");
	СтруктураПолей.Вставить("СкладНовый",               "Склад");	
	Если ТипЗнч(Субконто1) = Тип("СправочникСсылка.ПодразделенияОрганизаций") Тогда
		СтруктураПолей.Вставить("Подразделение",        "Ссылка.Субконто1");
	ИначеЕсли ТипЗнч(Субконто2) = Тип("СправочникСсылка.ПодразделенияОрганизаций") Тогда
		СтруктураПолей.Вставить("Подразделение",        "Ссылка.Субконто2");
	Иначе
		СтруктураПолей.Вставить("Подразделение",        "Ссылка.Субконто3");
	КонецЕсли;
	Если ТипЗнч(Субконто1) = Тип("СправочникСсылка.НоменклатурныеГруппы") Тогда
		СтруктураПолей.Вставить("НоменклатурнаяГруппа", "Ссылка.Субконто1");
	ИначеЕсли ТипЗнч(Субконто2) = Тип("СправочникСсылка.НоменклатурныеГруппы") Тогда
		СтруктураПолей.Вставить("НоменклатурнаяГруппа", "Ссылка.Субконто2");
	Иначе
		СтруктураПолей.Вставить("НоменклатурнаяГруппа", "Ссылка.Субконто3");
	КонецЕсли;
	Если ТипЗнч(Субконто1) = Тип("СправочникСсылка.СтатьиЗатрат") Тогда
		СтруктураПолей.Вставить("СтатьяЗатрат",         "Ссылка.Субконто1");
	ИначеЕсли ТипЗнч(Субконто2) = Тип("СправочникСсылка.СтатьиЗатрат") Тогда
		СтруктураПолей.Вставить("СтатьяЗатрат",         "Ссылка.Субконто2");
	Иначе
		СтруктураПолей.Вставить("СтатьяЗатрат",         "Ссылка.Субконто3");
	КонецЕсли;	
	СтруктураПолей.Вставить("КорСчетСписанияБУ",        "Ссылка.СчетЗатрат");		
	СтруктураПолей.Вставить("КорСубконтоСписанияБУ1",   "Ссылка.Субконто1"); 				
	СтруктураПолей.Вставить("КорСубконтоСписанияБУ2",   "Ссылка.Субконто2");
	СтруктураПолей.Вставить("КорСубконтоСписанияБУ3",   "Ссылка.Субконто3"); 	
	СтруктураПолей.Вставить("Субконто1",                "Ссылка.Субконто1");
	СтруктураПолей.Вставить("Субконто2",                "Ссылка.Субконто2");
	СтруктураПолей.Вставить("Субконто3",                "Ссылка.Субконто3");
	
	
	// Для НалоговоеНазначениеДоходовИЗатрат
	ХарактерЗатрат = УправлениеПроизводствомВызовСервера.ПолучитьХарактерЗатратПоСчетуЗатрат(СчетЗатрат, , Дата);                                                                                                  
	
	Если НЕ (ХарактерЗатрат = "Производство" ИЛИ ХарактерЗатрат = "Строительство" ИЛИ ХарактерЗатрат = "ТЗР" ИЛИ ХарактерЗатрат = "РБП" ИЛИ ХарактерЗатрат = "ОПЗ") Тогда
		СтруктураПолей.Вставить("НалоговоеНазначение", "Ссылка.НалоговоеНазначениеДоходовИЗатрат");
	Иначе	
		ХарактерЗатрат = Неопределено;
		НалоговоеНазначениеПроводки = Неопределено;
		НалоговоеНазначениеНДС = НСтр("ru='Из табличной части';uk='З табличної частини'");
		СтруктураСубконто = Новый Структура("Субконто1, Субконто2, Субконто3", Субконто1, Субконто2, Субконто3);
		НалоговыйУчет.ОпределениеАналитикиНалоговогоУчетаВПроводкахДляЗатрат(СтруктураСубконто, СчетЗатрат, ХарактерЗатрат, 
		НалоговоеНазначениеПроводки, ,
		НалоговоеНазначениеНДС, ,
		,Дата);
		Если Строка(НалоговоеНазначениеПроводки) = "Из табличной части" Тогда
			СтруктураПолей.Вставить("НалоговоеНазначение", "НалоговоеНазначение");
		Иначе
			СтруктураПростыхПолей.Вставить("НалоговоеНазначение", НалоговоеНазначениеПроводки);
		КонецЕсли;
	КонецЕсли;
	
	РезультатЗапросаПоПродукции = ОбщегоНазначенияРед12.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Продукция", СтруктураПолей, СтруктураПростыхПолей);
	ТаблицаПродукции = РезультатЗапросаПоПродукции.Выгрузить();
	
	Для Каждого СтрокаТаблицы Из ТаблицаПродукции Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.Склад) Тогда
			СтрокаТаблицы.Склад = Склад;
		КонецЕсли;	
	КонецЦикла;	
	
	// Таблица сырья
	
	СтруктураПолей = Новый Структура();
	СтруктураПростыхПолей = Новый Структура;
	
	СтруктураПолей.Вставить("Номенклатура",             "Номенклатура");
	СтруктураПолей.Вставить("НоменклатурнаяГруппа",     "Номенклатура.НоменклатурнаяГруппа");
	СтруктураПолей.Вставить("Количество",               "ФизическийВес * Коэффициент");	
	СтруктураПолей.Вставить("СчетУчетаБУ",              "СчетУчетаБУ");	
	СтруктураПолей.Вставить("НалоговоеНазначение",      "НалоговоеНазначение");	
	СтруктураПолей.Вставить("ВидНалоговойДеятельности", "НалоговоеНазначение.ВидНалоговойДеятельности");	
	СтруктураПолей.Вставить("ВидДеятельностиНДС",       "НалоговоеНазначение.ВидДеятельностиНДС");
	СтруктураПолей.Вставить("Амортизируется",           "НалоговоеНазначение.Амортизируется");
	СтруктураПолей.Вставить("ДокументОприходования",    "ДокументОприходования");
	СтруктураПолей.Вставить("Себестоимость",            "Себестоимость");
	СтруктураПолей.Вставить("Субконто1",                "Ссылка.Субконто1");
	СтруктураПолей.Вставить("Субконто2",                "Ссылка.Субконто2"); 				
	СтруктураПолей.Вставить("Субконто3",                "Ссылка.Ссылка.Субконто3");
	
	// Для НалоговоеНазначениеДоходовИЗатрат
	ХарактерЗатрат = УправлениеПроизводствомВызовСервера.ПолучитьХарактерЗатратПоСчетуЗатрат(СчетЗатрат,,Дата);                                                                                                  
	
	Если НЕ (ХарактерЗатрат = "Производство" ИЛИ ХарактерЗатрат = "Строительство" ИЛИ ХарактерЗатрат = "ТЗР" ИЛИ ХарактерЗатрат = "РБП" ИЛИ ХарактерЗатрат = "ОПЗ") Тогда
		СтруктураПолей.Вставить("НалоговоеНазначениеНовое", "Ссылка.НалоговоеНазначениеДоходовИЗатрат");
	Иначе	
		ХарактерЗатрат = Неопределено;
		НалоговоеНазначениеПроводки = Неопределено;
		НалоговоеНазначениеНДС = НСтр("ru='Из табличной части';uk='З табличної частини'");
		СтруктураСубконто = Новый Структура("Субконто1, Субконто2, Субконто3", Субконто1, Субконто2, Субконто3);
		НалоговыйУчет.ОпределениеАналитикиНалоговогоУчетаВПроводкахДляЗатрат(СтруктураСубконто, СчетЗатрат, ХарактерЗатрат, 
		НалоговоеНазначениеПроводки, ,
		НалоговоеНазначениеНДС, ,
		,Дата);
		Если Строка(НалоговоеНазначениеПроводки) = "Из табличной части" Тогда
			СтруктураПолей.Вставить("НалоговоеНазначениеНовое", "НалоговоеНазначение");
		Иначе
			СтруктураПростыхПолей.Вставить("НалоговоеНазначениеНовое", НалоговоеНазначениеПроводки);
		КонецЕсли;
	КонецЕсли;
	
	РезультатЗапросаПоСырью = ОбщегоНазначенияРед12.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Сырье", СтруктураПолей, СтруктураПростыхПолей);
	ТаблицаСырья = ПодготовитьТаблицуСырья(РезультатЗапросаПоСырью, СтруктураШапкиДокумента);
	
КонецПроцедуры

Функция ПодготовитьТаблицуСырья(РезультатЗапросаПоСырью, СтруктураШапкиДокумента)
	
	ТаблицаСырья = РезультатЗапросаПоСырью.Выгрузить();
	
	ТаблицаСырья.Колонки.Добавить("Регистратор");
	ТаблицаСырья.Колонки.Добавить("Склад");
	ТаблицаСырья.Колонки.Добавить("Организация");
	ТаблицаСырья.Колонки.Добавить("ДоговорКонтрагента");
	ТаблицаСырья.Колонки.Добавить("Валюта");
	ТаблицаСырья.Колонки.Добавить("ВходящийНДС");
	ТаблицаСырья.Колонки.Добавить("КоэффОплаты");
	ТаблицаСырья.Колонки.Добавить("СчетУчетаНУ");
	
	КоэффОплаты      = 1;
	
	ТаблицаСырья.ЗаполнитьЗначения(КоэффОплаты,   							   "КоэффОплаты");
	ТаблицаСырья.ЗаполнитьЗначения(ЭтотОбъект,    							   "Регистратор");
	ТаблицаСырья.ЗаполнитьЗначения(СтруктураШапкиДокумента.Склад,      	       "Склад");
	ТаблицаСырья.ЗаполнитьЗначения(СтруктураШапкиДокумента.Организация,	       "Организация");
	ТаблицаСырья.ЗаполнитьЗначения(СтруктураШапкиДокумента.ДоговорКонтрагента, "ДоговорКонтрагента");	
	
	ТаблицаСырья.Колонки.Добавить("КорСчетСписанияБУ");
	ТаблицаСырья.Колонки.Добавить("КорСубконтоСписанияБУ1");
	ТаблицаСырья.Колонки.Добавить("КорСубконтоСписанияБУ2");
	ТаблицаСырья.Колонки.Добавить("КорСубконтоСписанияБУ3"); 
	ТаблицаСырья.ЗаполнитьЗначения(СчетЗатрат,	                               "КорСчетСписанияБУ");
	ТаблицаСырья.ЗаполнитьЗначения(Субконто1,                                  "КорСубконтоСписанияБУ1");
	ТаблицаСырья.ЗаполнитьЗначения(Субконто2,	                               "КорСубконтоСписанияБУ2");
	ТаблицаСырья.ЗаполнитьЗначения(Субконто3,                                  "КорСубконтоСписанияБУ3");
	ТаблицаСырья.ЗаполнитьЗначения(Субконто2,                                  "НоменклатурнаяГруппа");
		
	Возврат ТаблицаСырья;
	
КонецФункции

// Процедура выполняет движения по регистрам
//
Процедура ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаСырья, ТаблицаПродукции, Отказ, Заголовок)
	
	ПровестиПоРегистрамЭлеватора(РежимПроведения, СтруктураШапкиДокумента, Отказ, Заголовок);
	
	// Движения по регистрам (бухгалтерии, налоговым, накопления - для партий) если владелец являеться собственное подразделением.
	Если ОтражатьПоЗатратам И ВидОперации = Перечисления.ИНАГРО_ВидыОперацийПереработка.СобственноеСырье Тогда		
		Если ОтражатьВБухгалтерскомУчете Тогда
			СписаниеСырьяБУХ(Движения, СтруктураШапкиДокумента, ТаблицаСырья, Отказ);
			ПриходПродукцииБУХ(Движения, СтруктураШапкиДокумента, ТаблицаПродукции, Отказ);
		КонецЕсли;		
	КонецЕсли;
	
	Движения.Хозрасчетный.Записать();
	
	ИНАГРО_Общий.ИНАГРО_ДвиженияВыпускПродукции(СтруктураШапкиДокумента, Движения);
	ИНАГРО_Общий.ИНАГРО_ДвиженияЗатратыОрганизации_Приход(СтруктураШапкиДокумента, Движения);	
	
КонецПроцедуры 

Процедура ПровестиПоРегистрамЭлеватора(РежимПроведения, СтруктураШапкиДокумента, Отказ, Заголовок)
	 	
	ВестиУчетПоПереработке            = ИНАГРО_Элеватор.ПолучитьПараметрУчетаЭлеватора(СтруктураШапкиДокумента.Дата, "ВестиУчетПоПереработке", Ложь); 	
	ВестиСкладскойУчетНегодныхОтходов = ИНАГРО_Элеватор.ПолучитьПараметрУчетаЭлеватора(Дата, "ВестиСкладскойУчетНегодныхОтходов", Истина);
	
	// Расход сырья
	
	Для Каждого СтрокаТаблицы Из Сырье Цикл
		
		СтруктураДвиженияПроведенияБУХ(Сырье, СтруктураШапкиДокумента, СтрокаТаблицы);
		
		СтруктураШапкиДокумента.Вставить("НомерАнализа", СтрокаТаблицы.НомерАнализа);
		
		Если ВестиУчетПоПереработке Тогда
			
			Если ВидОперации = Перечисления.ИНАГРО_ВидыОперацийПереработка.СкладскойУчет Тогда
				ИНАГРО_Элеватор.ДвиженияПоРегиструДвиженияПоПереработке(Движения, СтруктураШапкиДокумента, ВидДвиженияНакопления.Приход);       
			Иначе
				// затраты на производство
				ДвижениеПоЗатратамНаПроизводстве(СтруктураШапкиДокумента);  		
				ИНАГРО_Элеватор.ДвиженияПоРегиструОстаткиРасход(Движения, СтруктураШапкиДокумента);
				ИНАГРО_Элеватор.ДвиженияПоРегиструОстаткиСводнаяРасход(Движения, СтруктураШапкиДокумента); 
				ИНАГРО_Элеватор.ДвиженияПоРегиструФорма36Расход(Движения, СтруктураШапкиДокумента);
				ИНАГРО_Элеватор.ДвиженияПоРегиструФорма36СводнаяРасход(Движения, СтруктураШапкиДокумента); 				
				ИНАГРО_Элеватор.ДвиженияПоРегиструДвиженияПоПереработке(Движения, СтруктураШапкиДокумента, ВидДвиженияНакопления.Расход);
			КонецЕсли;
			
		Иначе	
			
			Если ВидОперации <> Перечисления.ИНАГРО_ВидыОперацийПереработка.СкладскойУчет Тогда   
				// затраты на производство
				ДвижениеПоЗатратамНаПроизводстве(СтруктураШапкиДокумента);   
				ИНАГРО_Элеватор.ДвиженияПоРегиструОстаткиРасход(Движения, СтруктураШапкиДокумента);
				ИНАГРО_Элеватор.ДвиженияПоРегиструОстаткиСводнаяРасход(Движения, СтруктураШапкиДокумента);
				ИНАГРО_Элеватор.ДвиженияПоРегиструФорма36Расход(Движения, СтруктураШапкиДокумента);
				ИНАГРО_Элеватор.ДвиженияПоРегиструФорма36СводнаяРасход(Движения, СтруктураШапкиДокумента);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Приход продукции
	
	ЧужойКонтрагент         = СтруктураШапкиДокумента.Владелец;
	ЧужойДоговорКонтрагента = СтруктураШапкиДокумента.ДоговорКонтрагента;	
		
	Для Каждого СтрокаТаблицы Из Продукция Цикл		
		
		СтруктураДвиженияПроведенияБУХ(Продукция, СтруктураШапкиДокумента, СтрокаТаблицы);
		
		СтруктураШапкиДокумента.Вставить("НомерАнализа", СтрокаТаблицы.НомерАнализа);

		ВидТМЦ = ИНАГРО_Элеватор.ПолучитьДополнительныйРеквизитНоменклатуры(СтрокаТаблицы.Номенклатура, "ВидТМЦ");
		
		Если ВидТМЦ = Перечисления.ИНАГРО_ВидыТМЦ.Кат3 Тогда
			
			СобственныйКонтрагент = ИНАГРО_Элеватор.ПолучитьДополнительныйРеквизитОрганизации(Организация,"Контрагент",Дата);
			
			СтруктураШапкиДокумента.Владелец = СобственныйКонтрагент;
			
			Если ЗначениеЗаполнено(СобственныйКонтрагент) Тогда
				СтруктураШапкиДокумента.ДоговорКонтрагента = СобственныйКонтрагент.ОсновнойДоговорКонтрагента;
			Иначе
				СтруктураШапкиДокумента.ДоговорКонтрагента = "";
			КонецЕсли;			
			
			СтруктураШапкиДокумента.Вставить("КодРасхода", Перечисления.ИНАГРО_КодыРасхода.Кат3);
			
			Если ВестиСкладскойУчетНегодныхОтходов Тогда	
				
				Если ВестиУчетПоПереработке Тогда 							
					
					Если ВидОперации = Перечисления.ИНАГРО_ВидыОперацийПереработка.СкладскойУчет Тогда
						ИНАГРО_Элеватор.ДвиженияПоРегиструДвиженияПоПереработке(Движения, СтруктураШапкиДокумента, ВидДвиженияНакопления.Расход);			
					Иначе 
						ИНАГРО_Элеватор.ДвиженияПоРегиструОстаткиПриход(Движения, СтруктураШапкиДокумента);
						ИНАГРО_Элеватор.ДвиженияПоРегиструОстаткиСводнаяПриход(Движения, СтруктураШапкиДокумента);
						ИНАГРО_Элеватор.ДвиженияПоРегиструФорма36Приход(Движения, СтруктураШапкиДокумента);
						ИНАГРО_Элеватор.ДвиженияПоРегиструФорма36СводнаяПриход(Движения, СтруктураШапкиДокумента);
						ИНАГРО_Элеватор.ДвиженияПоРегиструДвиженияПоПереработке(Движения, СтруктураШапкиДокумента, ВидДвиженияНакопления.Приход);			
					КонецЕсли;
					
				Иначе
					
					Если ВидОперации <> Перечисления.ИНАГРО_ВидыОперацийПереработка.СкладскойУчет Тогда 
						ИНАГРО_Элеватор.ДвиженияПоРегиструОстаткиПриход(Движения, СтруктураШапкиДокумента);
						ИНАГРО_Элеватор.ДвиженияПоРегиструОстаткиСводнаяПриход(Движения, СтруктураШапкиДокумента);
						ИНАГРО_Элеватор.ДвиженияПоРегиструФорма36Приход(Движения, СтруктураШапкиДокумента);
						ИНАГРО_Элеватор.ДвиженияПоРегиструФорма36СводнаяПриход(Движения, СтруктураШапкиДокумента);
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе
			
			СтруктураШапкиДокумента.Владелец = ЧужойКонтрагент;
			СтруктураШапкиДокумента.ДоговорКонтрагента = ЧужойДоговорКонтрагента;
			
			Если ВестиУчетПоПереработке Тогда 							
				
				Если ВидОперации = Перечисления.ИНАГРО_ВидыОперацийПереработка.СкладскойУчет Тогда
					ИНАГРО_Элеватор.ДвиженияПоРегиструДвиженияПоПереработке(Движения, СтруктураШапкиДокумента, ВидДвиженияНакопления.Расход);			
				Иначе 
					ИНАГРО_Элеватор.ДвиженияПоРегиструДвиженияПоПереработке(Движения, СтруктураШапкиДокумента, ВидДвиженияНакопления.Приход);			
					ИНАГРО_Элеватор.ДвиженияПоРегиструВыпускПродукции(СтруктураШапкиДокумента,Движения);		
					ИНАГРО_Элеватор.ДвиженияПоРегиструОстаткиПриход(Движения, СтруктураШапкиДокумента);
					ИНАГРО_Элеватор.ДвиженияПоРегиструОстаткиСводнаяПриход(Движения, СтруктураШапкиДокумента);
					ИНАГРО_Элеватор.ДвиженияПоРегиструФорма36Приход(Движения, СтруктураШапкиДокумента);
					ИНАГРО_Элеватор.ДвиженияПоРегиструФорма36СводнаяПриход(Движения, СтруктураШапкиДокумента);    							
				КонецЕсли;
				
			Иначе 
				
				Если ВидОперации <> Перечисления.ИНАГРО_ВидыОперацийПереработка.СкладскойУчет Тогда
					// выпуск продукции
					ИНАГРО_Элеватор.ДвиженияПоРегиструВыпускПродукции(СтруктураШапкиДокумента,Движения);		
					ИНАГРО_Элеватор.ДвиженияПоРегиструОстаткиПриход(Движения, СтруктураШапкиДокумента);
					ИНАГРО_Элеватор.ДвиженияПоРегиструФорма36Приход(Движения, СтруктураШапкиДокумента);
					ИНАГРО_Элеватор.ДвиженияПоРегиструФорма36СводнаяПриход(Движения, СтруктураШапкиДокумента);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	СтруктураШапкиДокумента.Владелец           = ЧужойКонтрагент ;
	СтруктураШапкиДокумента.ДоговорКонтрагента = ЧужойДоговорКонтрагента;
	
	Если ОтражатьВРасчетномВыходеПродукции Тогда
		
		СтруктураПолей = Новый Структура;
		СтруктураПростыхПолей = Новый Структура;
		СтруктураПолей.Вставить("Ссылка",                   "Ссылка");
		СтруктураПолей.Вставить("Организация",              "Ссылка.Организация");
		СтруктураПолей.Вставить("Владелец",                 "Ссылка.Владелец");
		СтруктураПолей.Вставить("ПодразделениеОрганизации", "Ссылка.ПодразделениеОрганизации");
		СтруктураПолей.Вставить("Продукция",                "НоменклатураПоФорме117");
		СтруктураПолей.Вставить("Вес",                      "ФизическийВес");
		СтруктураПолей.Вставить("Номенклатура",             "Номенклатура");
		
		РезультатЗапросаПоТоварам = ОбщегоНазначенияРед12.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Продукция", СтруктураПолей, СтруктураПростыхПолей);
		ТаблицаПродукции = РезультатЗапросаПоТоварам.Выгрузить();
		
		Если НЕ Отказ Тогда
			
			Для Каждого СтрокаТаблицы Из ТаблицаПродукции Цикл
				
				Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.Продукция) Тогда
					СтрокаТаблицы.Продукция = СтрокаТаблицы.Номенклатура;
				КонецЕсли;
				
				ИНАГРО_Элеватор.ДвиженияПоРегиструРасчетныйВыпускПродукцииРасход(Движения, СтрокаТаблицы);
				
			КонецЦикла;
			
		КонецЕсли;
				
	КонецЕсли;
	
	Если ВидОперации <> Перечисления.ИНАГРО_ВидыОперацийПереработка.СкладскойУчет Тогда
		
		ТаблицаУслуг = СформироватьТаблицуУслуг();
		
		Если ТаблицаУслуг.Количество() > 0 Тогда
			ИНАГРО_Элеватор.ДвиженияПоРегиструРасчетыПоУслугам(Движения, ТаблицаУслуг, "Приход");
		КонецЕсли;
		
	КонецЕсли;
	
	Если ВидОперации = Перечисления.ИНАГРО_ВидыОперацийПереработка.ДавальческоеСырье Тогда
		ПровестиПоРегиструДанныеПоКачествуПартийЗерна();
	КонецЕсли;	

КонецПроцедуры

Процедура ПровестиПоРегиструДанныеПоКачествуПартийЗерна()
	
	// Подготовим таблицу для проведения по регистру "ИНАГРО_ДанныеПоКачествуПартийЗерна".
	ТаблицаПоПартиям        = ПодготовитьТаблицуПоПартиям();
	ПараметрыУчетаЭлеватора = ИНАГРО_Элеватор.ПолучитьПараметрыУчетаЭлеватора(Дата);

	// Движения по регистру ДанныеПоКачетсвуПартийЗерна
	Если ТаблицаПоПартиям <> Неопределено Тогда
		Если ПараметрыУчетаЭлеватора <> Неопределено Тогда
			Если ПараметрыУчетаЭлеватора.ИспользоватьСистемуКонтроляКачестваПартийЗерна Тогда
				НаборДвижений = Движения.ИНАГРО_ДанныеПоКачествуПартийЗерна;
				ТаблицаДвижений                = НаборДвижений.Выгрузить();
				ОбщегоНазначенияБПВызовСервера.ЗагрузитьВТаблицуЗначений(ТаблицаПоПартиям, ТаблицаДвижений);
				НаборДвижений.мПериод          = Дата;
				НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;
				Движения.ИНАГРО_ДанныеПоКачествуПартийЗерна.ВыполнитьДвижения();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Процедура для списания сырья по регистрам в случаи если владалец являеться собственным подразделением.
//
Процедура СписаниеСырьяБУХ(Движения, СтруктураШапкиДокумента, ТаблицаСырья, Отказ)
	
	// Списание товара
	УправлениеЗапасамиПартионныйУчет.ДвижениеПартийТоваров(ТаблицаСырья, Отказ, , );
		
КонецПроцедуры

Процедура ПриходПродукцииБУХ(Движения, СтруктураШапкиДокумента, ТаблицаПродукции, Отказ)
	
	Если Продукция.Количество() = 0 ИЛИ НЕ ОтражатьВБухгалтерскомУчете Тогда
		Возврат;
	КонецЕсли;
	
	ОперацияБУ = Движения["Хозрасчетный"];
	
	Если НЕ Отказ Тогда
		
		Для Каждого СтрокаТаблицы Из ТаблицаПродукции Цикл
			
			ВестиУчетПоСебестоимости = ИНАГРО_Элеватор.ПолучитьДополнительныйРеквизитНоменклатуры(СтрокаТаблицы.Номенклатура, "ВестиУчетПоСебестоимости");
			Если ВестиУчетПоСебестоимости Тогда
				Продолжить;
			КонецЕсли;	
			
			СчетУчетаБУ         = СтрокаТаблицы.СчетУчетаБУ;
			СчетЗатратТекущий   = СчетЗатрат;
			
			// Сформируем проводку.
			Если НЕ ЗначениеЗаполнено(СчетУчетаБУ)
				ИЛИ НЕ ЗначениеЗаполнено(СчетЗатратТекущий) Тогда
				Возврат;
			КонецЕсли;
			
			НоваяПроводка = ОперацияБУ.Добавить();
			
			НоваяПроводка.Организация = Организация;
			НоваяПроводка.Период      = Дата;
			
			НоваяПроводка.СчетДт = СчетУчетаБУ;
			БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, "Номенклатура", СтрокаТаблицы.Номенклатура);
			БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, "Склады",       СтрокаТаблицы.Склад);
			
			// Если способ оценки ФИФО или ЛИФО и на счете ведется партионный учет,
			// то в проводке указываем в качестве партии текущий документ.
			Если СтруктураШапкиДокумента.ВедетсяПартионныйУчет Тогда 
				БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, "Партии", Ссылка);
			КонецЕсли; 
			
			НоваяПроводка.Содержание = НСтр("ru='Выпуск продукции';uk='Випуск продукції'", Локализация.КодЯзыкаИнформационнойБазы());
			
			НоваяПроводка.СчетКт = СчетЗатратТекущий;
			
			СтруктураАналитикиПродукции = ПолучитьАналитикуПродукции(СтрокаТаблицы);
			
			БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетКт, НоваяПроводка.СубконтоКт, "Подразделения",        СтруктураАналитикиПродукции.Подразделение);
			БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетКт, НоваяПроводка.СубконтоКт, "НоменклатурныеГруппы", СтруктураАналитикиПродукции.НоменклатурнаяГруппа);
			
			НоваяПроводка.КоличествоДт = ?(НоваяПроводка.СчетДТ.Количественный, СтрокаТаблицы.Количество, 0);
			НоваяПроводка.Сумма        = СтрокаТаблицы.СуммаПлановая;
			Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыльДо2015
				И СтрокаТаблицы.НалоговоеНазначение <> Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяНеХозДеятельность Тогда						
				НоваяПроводка.СуммаНУДт = СтрокаТаблицы.СуммаПлановая;
				НоваяПроводка.СуммаНУКт = СтрокаТаблицы.СуммаПлановая;
			КонецЕсли;
			НоваяПроводка.НалоговоеНазначениеДт = СтрокаТаблицы.НалоговоеНазначение;
			НоваяПроводка.НалоговоеНазначениеКт = СтрокаТаблицы.НалоговоеНазначение;
		КонецЦикла;
		
	КонецЕсли;
	
	Движения.Хозрасчетный.ВыполнитьДействияПередЗаписьюДвижений();
	
КонецПроцедуры

// Делает движения в зависимости от вида операций в Рецепте
// Если вид операции - по одной готовой продукции, то берем продукцию
// из реквизита продукция и процет продукции = 100,
// Иначе перебираем таблицу "Продукция" док. Рецепт.
//
//
Процедура ДвижениеПоЗатратамНаПроизводстве(СтруктураШапкиДокумента)
	
	СтруктураОчистки = Новый Структура("Продукция", "ПроцентПродукции");
	
	Если Рецепт.ВидОперации = Перечисления.ИНАГРО_ВидыОперацийРецепт.РецептПоОднойГотовойПродукции Тогда
		// если в рецепте одна продукция
		Для Каждого СтрПродукции Из Продукция Цикл
			// проверим если в таблице "Продукция" готовая продукция совпадающая по рецепту
			НайденнаяСтрока = Продукция.Найти(Рецепт.Продукция,"Номенклатура");
			
			// удалим продукцию и процент продукции, если он есть в Структуре
			ИНАГРО_Элеватор.ОчиститьСтруктуруПараметров(СтруктураОчистки);	
			
			Если НайденнаяСтрока <> Неопределено Тогда
				СтруктураШапкиДокумента.Вставить("Продукция", Рецепт.Продукция);
				СтруктураШапкиДокумента.Вставить("ПроцентПродукции", 100);
			КонецЕсли;
			
			ИНАГРО_Элеватор.ДвиженияПоРегиструЗатратыНаПроизводство(СтруктураШапкиДокумента, Движения); 			
			
		КонецЦикла;
		
	Иначе
		// если в рецепте несколько продукций
		Для Каждого СтрокаПродукции Из Рецепт.СписокПродукции Цикл
			// проверим если в таблице "Продукция" готовая продукция совпадающая по рецепту
			НайденнаяСтрока = Продукция.Найти(СтрокаПродукции.Номенклатура,"Номенклатура");
			
			// удалим продукцию и процент продукции, если он есть в Структуре
			ИНАГРО_Элеватор.ОчиститьСтруктуруПараметров(СтруктураОчистки);			
			
			Если НайденнаяСтрока <> Неопределено Тогда
				СтруктураШапкиДокумента.Вставить("Продукция",		 СтрокаПродукции.Номенклатура);
				СтруктураШапкиДокумента.Вставить("ПроцентПродукции", СтрокаПродукции.Процент);
			КонецЕсли;
			
			ИНАГРО_Элеватор.ДвиженияПоРегиструЗатратыНаПроизводство(СтруктураШапкиДокумента,Движения,СтрокаПродукции);
			
		КонецЦикла;
		
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ЗаполнитьПоДокументуОснованию(Основание)
	
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ИНАГРО_Форма117") Тогда
		
		Организация                 = Основание.Организация;
		Владелец                    = Основание.Владелец;
		ДоговорКонтрагента          = Основание.ДоговорКонтрагента;
		ПодразделениеОрганизации    = Основание.ПодразделениеОрганизации;
		Склад                       = Основание.Склад;		
		ВидХранения                 = Основание.ВидХранения;
		Урожай                      = Основание.Урожай;
		ОтражатьВБухгалтерскомУчете = Истина;

		СобственноеПодразделение    = ИНАГРО_Элеватор.ПолучитьДополнительныйРеквизитКонтрагента(Владелец, "СобственноеПодразделение");		
		
		Если СобственноеПодразделение Тогда
			ВидОперации        = Перечисления.ИНАГРО_ВидыОперацийПереработка.СобственноеСырье;
			ОтражатьПоЗатратам = Истина;
		Иначе
			ВидОперации        = Перечисления.ИНАГРО_ВидыОперацийПереработка.ДавальческоеСырье;
			ОтражатьПоЗатратам = Ложь;
		КонецЕсли;
		
		СчетЗатрат = ?(ВидОперации = Перечисления.ИНАГРО_ВидыОперацийПереработка.СобственноеСырье,
			ПланыСчетов.Хозрасчетный.ОсновноеПроизводство,
			ПланыСчетов.Хозрасчетный.ПроизводствоИзДавальческогоСырья);
				
		Для Каждого СтрокаТабличнойЧасти Из Основание.Сырье Цикл
			
			НоваяСтрока = Сырье.Добавить();
			НоваяСтрока.Номенклатура       = СтрокаТабличнойЧасти.Номенклатура;
			НоваяСтрока.ЕдиницаИзмерения   = СтрокаТабличнойЧасти.Номенклатура.БазоваяЕдиницаИзмерения;
			НоваяСтрока.Коэффициент        = 1;	
			НоваяСтрока.ФизическийВес      = СтрокаТабличнойЧасти.ФизическийВес;
			НоваяСтрока.ЗачетныйВес        = СтрокаТабличнойЧасти.ФизическийВес;
			НоваяСтрока.ЛабораторныйАнализ = СтрокаТабличнойЧасти.ЛабораторныйАнализ;
			НоваяСтрока.НомерАнализа       = СтрокаТабличнойЧасти.ЛабораторныйАнализ.Номер;
			НоваяСтрока.Влажность          = СтрокаТабличнойЧасти.ЛабораторныйАнализ.Влажность;
			НоваяСтрока.СорнаяПримесь      = СтрокаТабличнойЧасти.ЛабораторныйАнализ.СорнаяПримесь;
			НоваяСтрока.ЗерноваяПримесь    = СтрокаТабличнойЧасти.ЛабораторныйАнализ.ЗерноваяПримесь;	
			
		КонецЦикла;
		
		Для Каждого СтрокаТабличнойЧасти Из Основание.Продукция Цикл
			
			НоваяСтрока = Продукция.Добавить();
			НоваяСтрока.Номенклатура       = СтрокаТабличнойЧасти.Номенклатура;
			НоваяСтрока.ЕдиницаИзмерения   = СтрокаТабличнойЧасти.Номенклатура.БазоваяЕдиницаИзмерения;
			НоваяСтрока.Коэффициент        = 1;						
			НоваяСтрока.ФизическийВес      = СтрокаТабличнойЧасти.РасчетныйВесВыходаПродукции;
			НоваяСтрока.ЛабораторныйАнализ = СтрокаТабличнойЧасти.ЛабораторныйАнализ;
			НоваяСтрока.НомерАнализа       = СтрокаТабличнойЧасти.ЛабораторныйАнализ.Номер;
			НоваяСтрока.Влажность          = СтрокаТабличнойЧасти.ЛабораторныйАнализ.Влажность;
			НоваяСтрока.СорнаяПримесь      = СтрокаТабличнойЧасти.ЛабораторныйАнализ.СорнаяПримесь;
			НоваяСтрока.ЗерноваяПримесь    = СтрокаТабличнойЧасти.ЛабораторныйАнализ.ЗерноваяПримесь;	
			Если ВидОперации = Перечисления.ИНАГРО_ВидыОперацийПереработка.СобственноеСырье Тогда
				Ценообразование.ЗаполнитьПлановуюСебестоимость(НоваяСтрока, Дата);
			КонецЕсли;				
			НоваяСтрока.СуммаПлановая      = НоваяСтрока.ФизическийВес * НоваяСтрока.ПлановаяСтоимость;
			НоваяСтрока.ДоляСтоимости      = Документы.ИНАГРО_Переработка.ПолучитьЗначениеДолиСтоимости(Рецепт, НоваяСтрока.Номенклатура);
			
			Если ОтражатьВРасчетномВыходеПродукции Тогда
				НоваяСтрока.НоменклатураПоФорме117 = СтрокаТабличнойЧасти.Номенклатура;
			КонецЕсли;

		КонецЦикла;
		
		Документы.ИНАГРО_Переработка.ЗаполнитьСчетаУчетаВТабличнойЧасти(ЭтотОбъект, "Сырье",     СобственноеПодразделение);
		Документы.ИНАГРО_Переработка.ЗаполнитьСчетаУчетаВТабличнойЧасти(ЭтотОбъект, "Продукция", СобственноеПодразделение);

	КонецЕсли;
				
КонецПроцедуры

Процедура ЗаполнитьУслуги() Экспорт
	
	Если НеПересчитыватьУслугиПриЗаписи Тогда
		Возврат;
	КонецЕсли;	
	
	ТаблицаУслуг = Новый ТаблицаЗначений;
	ТаблицаУслуг.Колонки.Добавить("Номенклатура");
	ТаблицаУслуг.Колонки.Добавить("Количество");
	ТаблицаУслуг.Колонки.Добавить("Сумма"); 
	ТаблицаУслуг.Колонки.Добавить("Культура");
	
	ВладелецУслуги = Владелец;
	
	Если НЕ ИНАГРО_Элеватор.ОпределитьПринадлежностьКонтрагента(ВладелецУслуги) Тогда
		ОформитьУслугу = Истина;
	Иначе
		ОформитьУслугу = Ложь;
	КонецЕсли;
	
	Если ОформитьУслугу Тогда
		
		Номенклатура_Переработка = ИНАГРО_Элеватор.ПолучитьПредопределеннуюНоменклатуру("Переработка");
		
		Если ЗначениеЗаполнено(Номенклатура_Переработка) Тогда
			
			Если ВидХранения.ТипДоговора =  Справочники.ВидыВзаиморасчетов.ДоговорХранения Тогда
				
				Для Каждого СтрокаТабличнойЧасти Из Сырье Цикл
					
					ВидКультурыДляРасчетаСтоимостиУслуги = ИНАГРО_Элеватор.ПолучитьДополнительныйРеквизитНоменклатуры(СтрокаТабличнойЧасти.Номенклатура, "ВидКультуры").ВидКультурыДляРасчетаСтоимостиУслуги;

					ТекущаяЦена = ИНАГРО_Элеватор.ПолучитьЦенуУслугиЭлеватора(Организация,
					                                                          Дата,
																			  ВладелецУслуги,
																			  ДоговорКонтрагента,
																			  ВидКультурыДляРасчетаСтоимостиУслуги,
																			  Урожай,
																			  Номенклатура_Переработка);
										
					Если ТекущаяЦена <> 0 И СтрокаТабличнойЧасти.ФизическийВес <> 0 Тогда 													 
						НоваяСтрока              = ТаблицаУслуг.Добавить();						
						НоваяСтрока.Культура     = СтрокаТабличнойЧасти.Номенклатура;
						НоваяСтрока.Номенклатура = Номенклатура_Переработка;             						
						НоваяСтрока.Количество   = СтрокаТабличнойЧасти.ЗачетныйВес / 1000;
						НоваяСтрока.Сумма        = НоваяСтрока.Количество * ТекущаяЦена;						
					Иначе
						ПараметрыОтбора = Новый Структура;
						ПараметрыОтбора.Вставить("Номенклатура", Номенклатура_Переработка);
						НайденныеСтроки = Услуги.НайтиСтроки(ПараметрыОтбора);
						Для Каждого Строк_Усл Из НайденныеСтроки Цикл
							Услуги.Удалить(Строк_Усл);
						КонецЦикла;
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ТаблицаУслуг.Свернуть("Номенклатура, Культура", "Количество, Сумма");
	Для Каждого Строка_Услуг Из ТаблицаУслуг Цикл
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("Культура", Строка_Услуг.Культура);
		НайденныеСтроки = Услуги.НайтиСтроки(ПараметрыОтбора);
		Если НайденныеСтроки.Количество() = 0 Тогда
			НоваяСтрока              = Услуги.Добавить();
			НоваяСтрока.Номенклатура = Строка_Услуг.Номенклатура;
			НоваяСтрока.Количество   = Строка_Услуг.Количество;
			НоваяСтрока.Сумма        = Строка_Услуг.Сумма;
			НоваяСтрока.Цена         = Строка_Услуг.Сумма / Строка_Услуг.Количество;
			НоваяСтрока.Культура     = Строка_Услуг.Культура;
		Иначе
			Для Каждого Строк_Усл Из НайденныеСтроки Цикл				
				Строк_Усл.Номенклатура       = Строка_Услуг.Номенклатура;
				Строк_Усл.Количество         = Строка_Услуг.Количество;
				Строк_Усл.Цена               = Строка_Услуг.Сумма / Строка_Услуг.Количество;
				Строк_Усл.Сумма              = Строка_Услуг.Сумма;
				Строк_Усл.культура           = Строка_Услуг.Культура;				  
			КонецЦикла;	
		КонецЕсли;		
	КонецЦикла;
	
КонецПроцедуры

Процедура СтруктураДвиженияПроведенияБУХ(ИмяТабЧасти, СтруктураШапкиДокумента, СтрокаТаблицы)
	
	СтруктураШапкиДокумента.Вставить("Номенклатура",       СтрокаТаблицы.Номенклатура);
	СтруктураШапкиДокумента.Вставить("ЛабораторныйАнализ", СтрокаТаблицы.ЛабораторныйАнализ);
	СтруктураШапкиДокумента.Вставить("ФизическийВес",      СтрокаТаблицы.ФизическийВес);
	СтруктураШапкиДокумента.Вставить("Влажность",          СтрокаТаблицы.Влажность);
	СтруктураШапкиДокумента.Вставить("СорнаяПримесь",      СтрокаТаблицы.СорнаяПримесь);
	СтруктураШапкиДокумента.Вставить("ЗерноваяПримесь",    СтрокаТаблицы.ЗерноваяПримесь);
	СтруктураШапкиДокумента.Вставить("Поставщик",          Владелец);
	СтруктураШапкиДокумента.Вставить("Откуда",             Склад);
	Если ИмяТабЧасти=Продукция Тогда
		СтруктураШапкиДокумента.Вставить("Урожай",      Справочники.ИНАГРО_ВидыУрожая.Продукция);
		Если Не СтрокаТаблицы.Склад.Ссылка.Пустая() Тогда
			СтруктураШапкиДокумента.Вставить("Склад", СтрокаТаблицы.Склад.Ссылка);
		Иначе
			СтруктураШапкиДокумента.Вставить("Склад", Склад.Ссылка);
		КонецЕсли;	
		СтруктураШапкиДокумента.Вставить("ЗачетныйВес", СтрокаТаблицы.ФизическийВес);
		СтруктураШапкиДокумента.Вставить("Продукция",   СтрокаТаблицы.Номенклатура);
		СтруктураШапкиДокумента.Вставить("ВидФасовки",  СтрокаТаблицы.Фасовка);
	Иначе
		СтруктураШапкиДокумента.Вставить("ЗачетныйВес", СтрокаТаблицы.ЗачетныйВес);
		СтруктураШапкиДокумента.Вставить("ВидФасовки",); 
	КонецЕсли;
	СтруктураШапкиДокумента.Вставить("Количество",         СтрокаТаблицы.Количество);
	СтруктураШапкиДокумента.Вставить("Рецепт",             Рецепт);
	СтруктураШапкиДокумента.Вставить("ВесПродукции",       СтрокаТаблицы.ФизическийВес);
	
КонецПроцедуры

Функция СформироватьТаблицуУслуг()
		
	ТаблицаУслуг = Новый ТаблицаЗначений;
	ТаблицаУслуг.Колонки.Добавить("ДатаРасчета");
	ТаблицаУслуг.Колонки.Добавить("Ссылка"); 
	ТаблицаУслуг.Колонки.Добавить("Организация");
	ТаблицаУслуг.Колонки.Добавить("Контрагент");
	ТаблицаУслуг.Колонки.Добавить("ДоговорКонтрагента");
	ТаблицаУслуг.Колонки.Добавить("Номенклатура");
	ТаблицаУслуг.Колонки.Добавить("Культура");
	ТаблицаУслуг.Колонки.Добавить("Склад");
	ТаблицаУслуг.Колонки.Добавить("ВидХранения");
	ТаблицаУслуг.Колонки.Добавить("Урожай");
	ТаблицаУслуг.Колонки.Добавить("Количество");
	ТаблицаУслуг.Колонки.Добавить("Стоимость"); 
	
	ВладелецУслуги = Владелец;
	
	СобственноеПодразделение = ИНАГРО_Элеватор.ПолучитьДополнительныйРеквизитКонтрагента(Владелец, "СобственноеПодразделение");
	Номенклатура_Переработка = ИНАГРО_Элеватор.ПолучитьПредопределеннуюНоменклатуру("Переработка");
	
	Если НЕ СобственноеПодразделение Тогда	
		
		Для Каждого СтрокаТабличнойЧасти Из Услуги Цикл
			
			ВидКультурыДляРасчетаСтоимостиУслуги = ИНАГРО_Элеватор.ПолучитьДополнительныйРеквизитНоменклатуры(СтрокаТабличнойЧасти.Номенклатура, "ВидКультуры").ВидКультурыДляРасчетаСтоимостиУслуги;
			
			ТекущаяЦена = ИНАГРО_Элеватор.ПолучитьЦенуУслугиЭлеватора(Организация,
			                                                          Дата,
																	  ВладелецУслуги,
																	  ДоговорКонтрагента,
																	  ВидКультурыДляРасчетаСтоимостиУслуги,
																	  Урожай,
																	  Номенклатура_Переработка);
			
			Если ТекущаяЦена <> 0 Тогда 													 
				НоваяСтрока                    = ТаблицаУслуг.Добавить();
				НоваяСтрока.ДатаРасчета        = Дата;  
				НоваяСтрока.Ссылка             = Ссылка; 
				НоваяСтрока.Организация        = Организация;
				НоваяСтрока.Контрагент         = ВладелецУслуги;
				НоваяСтрока.ДоговорКонтрагента = ДоговорКонтрагента;
				НоваяСтрока.Номенклатура       = Номенклатура_Переработка;
				НоваяСтрока.Культура           = СтрокаТабличнойЧасти.Культура;
				НоваяСтрока.Склад              = Склад;
				НоваяСтрока.ВидХранения        = ВидХранения;
				НоваяСтрока.Урожай             = Урожай;
				НоваяСтрока.Количество         = СтрокаТабличнойЧасти.Количество;
				НоваяСтрока.Стоимость          = НоваяСтрока.Количество * ТекущаяЦена;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ТаблицаУслуг;
	
КонецФункции

Функция ПодготовитьТаблицуПоПартиям()
	
	резТаблица = Неопределено;
	
	СписокНоменклатур   = Новый СписокЗначений;
	СписокХарактеристик = Новый СписокЗначений;
	
	Для Каждого СтрокаТабличнойЧасти Из Сырье Цикл
		СписокНоменклатур.Добавить(СтрокаТабличнойЧасти.Номенклатура);
	КонецЦикла;
	
	Запрос = Новый Запрос;
		
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаРегистра.*
		|ИЗ
		|	РегистрСведений.ИНАГРО_ДанныеПоКачествуПартийЗерна.СрезПоследних(
		|			&МоментВремени,
		|			Организация = &Организация
		|				И Контрагент = &Контрагент
		|				И ДоговорКонтрагента = &ДоговорКонтрагента
		|				И Номенклатура В (&СписокНоменклатур)
		|				И Склад = &Склад
		|				И ВидХранения = &ВидХранения
		|				И Урожай = &Урожай) КАК ТаблицаРегистра
		|
		|УПОРЯДОЧИТЬ ПО
		|	ТаблицаРегистра.ПартияЗерна.Дата";	
	
	Запрос.УстановитьПараметр("МоментВремени",       МоментВремени());
	Запрос.УстановитьПараметр("Организация",         Организация);
	Запрос.УстановитьПараметр("Контрагент",          Владелец);
	Запрос.УстановитьПараметр("ДоговорКонтрагента",  ДоговорКонтрагента);
	Запрос.УстановитьПараметр("СписокНоменклатур",   СписокНоменклатур);
	Запрос.УстановитьПараметр("Склад",               Склад);
	Запрос.УстановитьПараметр("ВидХранения",         ВидХранения);
	Запрос.УстановитьПараметр("Урожай",              Урожай);
	Запрос.УстановитьПараметр("СписокХарактеристик", СписокХарактеристик);

	ТаблицаРезультатаЗапроса = Запрос.Выполнить().Выгрузить();			   
	
	Если ТаблицаРезультатаЗапроса.Количество() > 0 Тогда 
		
		резТаблица = ТаблицаРезультатаЗапроса.Скопировать();
		резТаблица.Очистить();
		
		Для Каждого СтрокаТабличнойЧасти Из Сырье Цикл
			
			ОбщийВесПереоформления = СтрокаТабличнойЧасти.ФизическийВес;
			
			СтруктураОтбора = Новый Структура;
			СтруктураОтбора.Вставить("Номенклатура", СтрокаТабличнойЧасти.Номенклатура);
			СтрокиПартий = ТаблицаРезультатаЗапроса.НайтиСтроки(СтруктураОтбора);
			
			Если СтрокиПартий.Количество() > 0 Тогда
				
				Для Каждого СтрокаПартии Из СтрокиПартий Цикл
					
					Если ОбщийВесПереоформления > 0 Тогда
						
						ОстатокПартии = СтрокаПартии.ФизическийВесИтоговый - СтрокаПартии.Вывезено;
						
						Если ОстатокПартии > 0 Тогда
							НоваяСтрока = резТаблица.Добавить();
							ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаПартии);
							НоваяСтрока.Вывезено   = СтрокаПартии.Вывезено + МИН(ОстатокПартии, ОбщийВесПереоформления);
							ОбщийВесПереоформления = ОбщийВесПереоформления - МИН(ОстатокПартии, ОбщийВесПереоформления);
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если резТаблица.Количество() = 0 Тогда
			резТаблица = Неопределено;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат резТаблица;
	
КонецФункции	

Функция ПолучитьАналитикуПродукции(СтрокаТаблицы)
	
	СтруктураАналитикиПродукции = Новый Структура("Подразделение, НоменклатурнаяГруппа, СтатьяЗатрат");
	
	// Подразделение
	Если ТипЗнч(Субконто1) = ТипЗнч(Справочники.ПодразделенияОрганизаций.ПустаяСсылка()) Тогда
		Подразделения_ = Субконто1;
	ИначеЕсли ТипЗнч(Субконто2) = ТипЗнч(Справочники.ПодразделенияОрганизаций.ПустаяСсылка()) Тогда	
		Подразделения_ = Субконто2;
	ИначеЕсли ТипЗнч(Субконто3) = ТипЗнч(Справочники.ПодразделенияОрганизаций.ПустаяСсылка()) Тогда	
		Подразделения_ = Субконто3;
	КонецЕсли; 
	СтруктураАналитикиПродукции.Подразделение = Подразделения_;
	
	// НоменклатурныеГруппы
	Если ТипЗнч(Субконто1) = ТипЗнч(Справочники.НоменклатурныеГруппы.ПустаяСсылка()) Тогда
		НоменклатурныеГруппы_ = Субконто1;
	ИначеЕсли ТипЗнч(Субконто2) = ТипЗнч(Справочники.НоменклатурныеГруппы.ПустаяСсылка()) Тогда	
		НоменклатурныеГруппы_ = Субконто2;
	ИначеЕсли ТипЗнч(Субконто3) = ТипЗнч(Справочники.НоменклатурныеГруппы.ПустаяСсылка()) Тогда	
		НоменклатурныеГруппы_ = Субконто3;
	КонецЕсли; 
	СтруктураАналитикиПродукции.НоменклатурнаяГруппа = НоменклатурныеГруппы_;
		
	Возврат СтруктураАналитикиПродукции;
	
КонецФункции

#КонецОбласти

мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();

#КонецЕсли