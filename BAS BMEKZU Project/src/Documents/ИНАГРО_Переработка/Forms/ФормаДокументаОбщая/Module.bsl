#Область ОбработчикиСобытийФормы
 
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды 
	
	Если Параметры.Ключ.Пустая() Тогда
		ПодготовитьФормуНаСервере();		
	КонецЕсли;
	
	// Уведомим о появлении функционала рабочей даты
	ЭтаФорма.НастройкиПредупреждений = ОбщегоНазначенияБП.НастройкиПредупрежденийОбИзменениях("РабочаяДатаИзДокумента");
	
	// Показываем, если это новый документ и сама рабочая дата еще не установлена.
	ЭтаФорма.НастройкиПредупреждений.РабочаяДатаИзДокумента = ЭтаФорма.НастройкиПредупреждений.РабочаяДатаИзДокумента
	И ЭтаФорма.Параметры.Ключ.Пустая()
	И НЕ ЗначениеЗаполнено(БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("РабочаяДата"));
	
	УстановитьПараметрыВыбораВидОперации();
	
	// Если форма вызвана в режиме смена вида операции - модифицируем сразу при открытии, 
	// чтобы можно было подтвердить или отказаться от изменения путем сохранения или 
	// отказа от сохранения документа.
	Если Параметры.Свойство("ИзменитьВидОперации")
		И Параметры.ИзменитьВидОперации Тогда
		
		// Не кэшируем переменную Объект, т.к. может вызываться Форма.ИзменитьРеквизиты(),
		// которая меняет Объект.
		Объект.ВидОперации = Параметры.ЗначенияЗаполнения.ВидОперации;
		
		УстановитьЗаголовокФормы();		
		УправлениеФормой(ЭтаФорма);
		
		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ИсточникВыбора.ИмяФормы = "Обработка.ПодборНоменклатуры.Форма.Форма" Тогда
		ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение, ИсточникВыбора.ИмяТаблицы);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если  ТипЗнч(Параметр) = Тип("Структура") 
		И Параметр.Свойство("ИдентификаторВызывающейФормы")
		И Параметр.ИдентификаторВызывающейФормы = УникальныйИдентификатор Тогда 			
		
		Если ИмяСобытия = "СозданЛабораторныйАнализ" ИЛИ ИмяСобытия = "ИзмененЛабораторныйАнализ" Тогда
			
			Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаСырье Тогда
				ТекущаяСтраница = "Сырье";
			ИначеЕсли Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаПродукция Тогда
				ТекущаяСтраница = "Продукция";
			КонецЕсли;
			
			ТекущиеДанные = Элементы[ТекущаяСтраница].ТекущиеДанные;		
			
			Если ИНАГРО_Элеватор.ЛабораторныйАнализПроверкаЗаполнения(Параметр.ДокументСсылка, ПолучитьПараметрыДляПроверкиЗаполнения(ТекущиеДанные)) Тогда
				ТекущиеДанные.ЛабораторныйАнализ = Параметр.ДокументСсылка;
				Если ТекущаяСтраница = "Сырье" Тогда 
					СырьеЛабораторныйАнализПриИзменении(Неопределено);
				ИначеЕсли ТекущаяСтраница = "Продукция" Тогда
					ПродукцияЛабораторныйАнализПриИзменении(Неопределено);
				КонецЕсли;
				Модифицированность = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		ОбщегоНазначенияБПКлиент.ОбработкаОповещенияФормыДокумента(ЭтаФорма, Объект.Ссылка, ИмяСобытия, Параметр, Источник);
	КонецЕсли;	
		
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	ПодготовитьФормуНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
		
	УстановитьЗаголовокФормы();	
	
	УстановитьСостояниеДокумента();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	Если НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДатаДокумента) Тогда
		// Изменение времени не влияет на поведение документа.
		ТекущаяДатаДокумента = Объект.Дата;
		Возврат;
	КонецЕсли;		
		
	// Общие проверки условий по датам.
	ТребуетсяВызовСервера = ИНАГРО_ЭлеваторКлиент.ТребуетсяВызовСервераПриИзмененииДатыДокумента(Объект.Дата, ТекущаяДатаДокумента);
		
	// Если определили, что изменение даты может повлиять на какие-либо параметры, 
	// то передаем обработку на сервер.
	Если ТребуетсяВызовСервера Тогда
		ДатаПриИзмененииСервере();
	КонецЕсли;
	
	// Запомним новую дату документа.
	ТекущаяДатаДокумента = Объект.Дата;	

КонецПроцедуры

&НаСервере
Процедура ДатаПриИзмененииСервере()
	
	УстановитьФункциональныеОпцииФормы();
	
	УправлениеФормой(ЭтаФорма);	
	
КонецПроцедуры

&НаКлиенте
Процедура ВидОперацииПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.ВидОперации) Тогда
		
		Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ИНАГРО_ВидыОперацийПереработка.ДавальческоеСырье") И СобственноеПодразделение Тогда
			
			ТекстСообщения = Нстр("ru='При давльческом сырье Владелец не может быть собственным подразделением. Выберите другого Владельца!';uk='При давальницькій сировині Власник не може бути власним підрозділом. Оберіть іншого Власника!'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , , "Объект.Владелец");
			
			Объект.Владелец           = ПредопределенноеЗначение("Справочник.Контрагенты.ПустаяСсылка");
			Объект.ДоговорКонтрагента = ПредопределенноеЗначение("Справочник.ДоговорыКонтрагентов.ПустаяСсылка");
			
		КонецЕсли;
		
		ВидОперацииПриИзмененииНаСервере();	

		Объект.СчетЗатрат = ?(Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ИНАГРО_ВидыОперацийПереработка.СобственноеСырье"),
			ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.ОсновноеПроизводство"),
			ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.ПроизводствоИзДавальческогоСырья"));		
		
		СчетЗатратПриИзменении(Неопределено);
		
	КонецЕсли; 	
	
КонецПроцедуры

&НаСервере
Процедура ВидОперацииПриИзмененииНаСервере()
	
	УстановитьЗаголовокФормы();
	
	УправлениеФормой(ЭтаФорма);		
	
КонецПроцедуры

&НаКлиенте
Процедура ОтражатьВБухгалтерскомУчетеПриИзменении(Элемент)
	
	Если Объект.Сырье.Количество() > 0  ИЛИ Объект.Продукция.Количество() > 0 Тогда
		
		Если Объект.ОтражатьВБухгалтерскомУчете Тогда		
			ТекстВопроса = НСтр("ru='Установить счета бухгалтерского учета в соответствии со значениями по умолчанию?';uk='Встановити рахунки бухгалтерського обліку відповідно до значень за замовчуванням?'");
		Иначе
			ТекстВопроса = НСтр("ru='Очистить счета бухгалтерского учета?';uk='Очистити рахунки бухгалтерського обліку?'");
		КонецЕсли;
		
		Оповещение = Новый ОписаниеОповещения("ОтражатьВБухгалтерскомУчетеПриИзмененииЗавершение", ЭтотОбъект, Параметры);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);	
		
		Возврат;
		
	КонецЕсли;
	
	УправлениеФормой(ЭтаФорма); 
	
КонецПроцедуры

&НаКлиенте
Процедура ОтражатьВБухгалтерскомУчетеПриИзмененииЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		УправлениеФормой(ЭтаФорма);
		Возврат;
	КонецЕсли; 	
	
	ЗаполнитьСчетаУчетаВТабличнойЧасти();
	
	УправлениеФормой(ЭтаФорма); 
   
КонецПроцедуры

&НаКлиенте
Процедура ОтражатьВРасчетномВыходеПродукцииПриИзменении(Элемент)
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		ОрганизацияПриИзмененииСервер();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииСервер()
	
	ЗаполнитьСчетаУчетаВТабличнойЧасти();
	
	УстановитьФункциональныеОпцииФормы();	
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ВладелецПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.Владелец) Тогда		
		
		ПараметрыОтбораДоговора = ПолучитьПараметрыДляДоговоров();
		
		ИНАГРО_ЭлеваторЗаполнениеДокументов.ПриИзмененииЗначенияКонтрагента(Объект.Дата, Объект.Организация, Объект.Владелец, Объект.ДоговорКонтрагента, ПараметрыОтбораДоговора);		
				
		ВладелецПриИзмененииНаСервере();
		
		Объект.СчетЗатрат = ?(Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ИНАГРО_ВидыОперацийПереработка.СобственноеСырье"),
			ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.ОсновноеПроизводство"),
			ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.ПроизводствоИзДавальческогоСырья"));

		СчетЗатратПриИзменении(Неопределено);
		
	КонецЕсли; 	
		
КонецПроцедуры

&НаСервере
Процедура ВладелецПриИзмененииНаСервере()
	
	УстановитьФункциональныеОпцииФормы();
	
	Если СобственноеПодразделение Тогда
		Объект.ВидОперации        = Перечисления.ИНАГРО_ВидыОперацийПереработка.СобственноеСырье;
		Объект.ОтражатьПоЗатратам = Истина;
	Иначе
		Объект.ВидОперации        = Перечисления.ИНАГРО_ВидыОперацийПереработка.ДавальческоеСырье;
		Объект.ОтражатьПоЗатратам = Ложь;
	КонецЕсли;	
	
	ЗаполнитьСчетаУчетаВТабличнойЧасти();	
	
	УстановитьЗаголовокФормы();

	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура СкладПриИзменении(Элемент)

	Если ЗначениеЗаполнено(Объект.Склад) Тогда
		СкладПриИзмененииНаСервере();
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура СкладПриИзмененииНаСервере()
	
	Объект.МестоХранения = Справочники.ИНАГРО_МестаХранения.ПустаяСсылка();
	
	ЗаполнитьСчетаУчетаВТабличнойЧасти();
	
	УстановитьФункциональныеОпцииФормы(); 	
	
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ПодразделениеОрганизацииПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.ПодразделениеОрганизации) Тогда		
		ПодразделениеОрганизацииПриИзмененииНаСервере();	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПодразделениеОрганизацииПриИзмененииНаСервере()
	
	Объект.ОтражатьВРасчетномВыходеПродукции = ВестиРасчетныйВыпускПродукции;
	
	УстановитьФункциональныеОпцииФормы();

КонецПроцедуры

&НаКлиенте
Процедура РецептНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;	
	
	ПараметрыОтбора = Новый Структура;
	
	Если ЗначениеЗаполнено(Объект.Владелец) Тогда
		ПараметрыОтбора.Вставить("Владелец", Объект.Владелец);
	КонецЕсли;		
		
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Отбор",  ПараметрыОтбора);
	ПараметрыФормы.Вставить("Ссылка", Объект.Ссылка);
	
	ОткрытьФорму("Документ.ИНАГРО_Рецепт.Форма.ФормаВыбора", ПараметрыФормы, Элемент, УникальныйИдентификатор, , , , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры

&НаКлиенте
Процедура СчетЗатратПриИзменении(Элемент)
	
	УстановитьЗаголовкиИДоступностьСубконто(ЭтаФорма, Объект.СчетЗатрат, Истина, "");
	
	ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3",
		"Субконто1", "Субконто2", "Субконто3");
	ПоляОбъекта.Вставить("Подразделение", Объект.ПодразделениеОрганизации);
	ПоляОбъекта.Вставить("Организация", Объект.Организация);
	
	БухгалтерскийУчетКлиентСервер.ПриИзмененииСчета(Объект.СчетЗатрат, Объект, ПоляОбъекта);
	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "", "СчетЗатрат");
	
	ПроверитьНалоговоеНазначениеДоходовИЗатрат();
	
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура СубконтоПриИзменении(Элемент)

	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "", "СчетЗатрат");
	
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура СубконтоНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	СписокПараметров = СписокПараметровВыбораСубконто(ЭтаФорма, Объект, "Субконто%Индекс%", "СчетЗатрат");
	ОбщегоНазначенияБПКлиент.НачалоВыбораЗначенияСубконто(ЭтаФорма, Элемент, СтандартнаяОбработка, СписокПараметров);

КонецПроцедуры

&НаКлиенте
Процедура СчетЗатратОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = БухгалтерскийУчетКлиент.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение);
	
КонецПроцедуры

&НаКлиенте
Процедура ОписаниеДвиженияФормы36НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(
		Элемент.ТекстРедактирования,
		ЭтотОбъект,
		"Объект.ОписаниеДвиженияФормы36",
		НСтр("ru='Описание движения формы 36';uk='Опис руху форми 36'"));
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(
		Элемент.ТекстРедактирования,
		ЭтотОбъект,
		"Объект.Комментарий");
	
КонецПроцедуры

#КонецОбласти  
 
 #Область ОбработчикиСобытийЭлементовТаблицыФормыСырье
 
 &НаКлиенте
Процедура СырьеНоменклатураПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Сырье.ТекущиеДанные;
	
	ВидТМЦ = ИНАГРО_Элеватор.ПолучитьДополнительныйРеквизитНоменклатуры(ТекущиеДанные.Номенклатура, "ВидТМЦ");
	
	Если НЕ ЗначениеЗаполнено(ВидТМЦ) Тогда		
		ТекстСообщения = Нстр("ru='Не заполнен ""Вид ТМЦ"" для текущей Номенклатуры!';uk = 'Не заповнений ""Вид ТМЦ"" для поточної Номенклатури'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
	ДанныеСтрокиТаблицы = Новый Структура(
		"Номенклатура, ЕдиницаИзмерения, Коэффициент,
		|СчетУчетаБУ, НалоговоеНазначение");
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, ТекущиеДанные);
	
	ДанныеОбъекта = Новый Структура(
		"Дата, Организация, ВидОперации,
		|Склад, ОтражатьВБухгалтерскомУчете");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	ДанныеОбъекта.Вставить("СобственноеПодразделение", СобственноеПодразделение);
		
	СырьеНоменклатураПриИзмененииНаСервере(ДанныеСтрокиТаблицы, ДанныеОбъекта);
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтрокиТаблицы);
	
КонецПроцедуры
 
 &НаСервере
Процедура СырьеНоменклатураПриИзмененииНаСервере(СтрокаТабличнойЧасти, Знач ДанныеОбъекта)
	
	СведенияОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОНоменклатуре(
		СтрокаТабличнойЧасти.Номенклатура, ДанныеОбъекта);
	
	Если СведенияОНоменклатуре = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаТабличнойЧасти.ЕдиницаИзмерения = СтрокаТабличнойЧасти.Номенклатура.БазоваяЕдиницаИзмерения;
	СтрокаТабличнойЧасти.Коэффициент      = 1;

	Документы.ИНАГРО_Переработка.ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(ДанныеОбъекта, СтрокаТабличнойЧасти, СведенияОНоменклатуре);

КонецПроцедуры
 
 &НаКлиенте
Процедура СырьеФизическийВесПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Сырье.ТекущиеДанные;
	
	ДанныеСтрокиТаблицы = ПолучитьДанныеСтрокиТаблицыСырье(ТекущиеДанные);

	ПараметрыДляРасчетаЗачетногоВеса = ПолучитьПараметрыДляРасчетаЗачетногоВеса(ДанныеСтрокиТаблицы);

	ТекущиеДанные.ЗачетныйВес = ИНАГРО_Элеватор.ЗачетныйВесПриПроведении(ПараметрыДляРасчетаЗачетногоВеса);

КонецПроцедуры

&НаКлиенте
Процедура СырьеЛабораторныйАнализПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Сырье.ТекущиеДанные; 	
	
	ДанныеСтрокиТаблицы = Новый Структура(
		"ЛабораторныйАнализ, НомерАнализа, Влажность,
		|СорнаяПримесь, ЗерноваяПримесь, ЗачетныйВес
		|");
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, ТекущиеДанные); 
	
	ПараметрыДляРасчетаЗачетногоВеса = ПолучитьПараметрыДляРасчетаЗачетногоВеса(ТекущиеДанные);

	ИНАГРО_Элеватор.ЛабораторныйАнализПриИзмененииНаСервере(ДанныеСтрокиТаблицы, ПараметрыДляРасчетаЗачетногоВеса);
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтрокиТаблицы);

КонецПроцедуры

&НаКлиенте
Процедура СырьеЛабораторныйАнализНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.Сырье.ТекущиеДанные;
	
	ПараметрыОтбора = Новый Структура;
	
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		ПараметрыОтбора.Вставить("Организация",        Объект.Организация);		
	КонецЕсли;	
	Если ЗначениеЗаполнено(Объект.Владелец) Тогда
		ПараметрыОтбора.Вставить("Владелец",           Объект.Владелец);
	КонецЕсли;	
	Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		ПараметрыОтбора.Вставить("ДоговорКонтрагента", Объект.ДоговорКонтрагента);		
	КонецЕсли;	
	Если ЗначениеЗаполнено(Объект.Склад) Тогда
		ПараметрыОтбора.Вставить("Склад",              Объект.Склад);
	КонецЕсли;	
	Если ЗначениеЗаполнено(Объект.ВидХранения) Тогда
		ПараметрыОтбора.Вставить("ВидХранения",        Объект.ВидХранения);
	КонецЕсли;	
	Если ЗначениеЗаполнено(ТекущиеДанные.Номенклатура) Тогда
		ПараметрыОтбора.Вставить("Номенклатура",       ТекущиеДанные.Номенклатура);
	КонецЕсли;
		
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Отбор",  ПараметрыОтбора);
	ПараметрыФормы.Вставить("Ссылка", Объект.Ссылка);
	
	ОткрытьФорму("Документ.ИНАГРО_ЛабораторныйАнализ.Форма.ФормаВыбора", ПараметрыФормы, Элемент, УникальныйИдентификатор, , , , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры
 
 #КонецОбласти  
 
#Область ОбработчикиСобытийЭлементовТаблицыФормыПродукция

&НаКлиенте
Процедура ПродукцияНоменклатураПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Продукция.ТекущиеДанные;
	
	ВидТМЦ = ИНАГРО_Элеватор.ПолучитьДополнительныйРеквизитНоменклатуры(ТекущиеДанные.Номенклатура, "ВидТМЦ");
	
	Если НЕ ЗначениеЗаполнено(ВидТМЦ) Тогда		
		ТекстСообщения = Нстр("ru='Не заполнен ""Вид ТМЦ"" для текущей Номенклатуры!';uk = 'Не заповнений ""Вид ТМЦ"" для поточної Номенклатури'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;	
	
	ДанныеСтрокиТаблицы = Новый Структура(
		"Номенклатура, ЕдиницаИзмерения, Коэффициент,
		|ФизическийВес, СчетУчетаБУ, НалоговоеНазначение,
		|ПлановаяСтоимость, СуммаПлановая, ДоляСтоимости,
		|НоменклатураПоФорме117");
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, ТекущиеДанные);
	
	ДанныеОбъекта = Новый Структура(
		"Дата, Организация, ВидОперации,
		|Склад, ОтражатьВБухгалтерскомУчете, ОтражатьВРасчетномВыходеПродукции,
		|Рецепт");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	ДанныеОбъекта.Вставить("СобственноеПодразделение", СобственноеПодразделение);

	ПродукцияНоменклатураПриИзмененииНаСервере(ДанныеСтрокиТаблицы, ДанныеОбъекта);
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтрокиТаблицы);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПродукцияНоменклатураПриИзмененииНаСервере(СтрокаТабличнойЧасти, Знач ДанныеОбъекта)
	
	СведенияОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОНоменклатуре(
		СтрокаТабличнойЧасти.Номенклатура, ДанныеОбъекта);
	
	Если СведенияОНоменклатуре = Неопределено Тогда
		Возврат;
	КонецЕсли;

	СтрокаТабличнойЧасти.ЕдиницаИзмерения = СведенияОНоменклатуре.БазоваяЕдиницаИзмерения;
	СтрокаТабличнойЧасти.Коэффициент      = 1;
	СтрокаТабличнойЧасти.ДоляСтоимости    = Документы.ИНАГРО_Переработка.ПолучитьЗначениеДолиСтоимости(ДанныеОбъекта.Рецепт, СтрокаТабличнойЧасти.Номенклатура);	
	
	Если ДанныеОбъекта.ВидОперации = Перечисления.ИНАГРО_ВидыОперацийПереработка.СобственноеСырье Тогда
		Ценообразование.ЗаполнитьПлановуюСебестоимость(СтрокаТабличнойЧасти, ДанныеОбъекта.Дата);
	КонецЕсли;
	
	ПродукцияКоличествоФизическийВесПлановаСтоимостьПриИзменении(СтрокаТабличнойЧасти);

	Если ДанныеОбъекта.ОтражатьВРасчетномВыходеПродукции Тогда
		Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.НоменклатураПоФорме117) Тогда
			СтрокаТабличнойЧасти.НоменклатураПоФорме117 = СтрокаТабличнойЧасти.Номенклатура;
		КонецЕсли;
	КонецЕсли;

	Документы.ИНАГРО_Переработка.ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(ДанныеОбъекта, СтрокаТабличнойЧасти, СведенияОНоменклатуре);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияФасовкаКоличествоПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Продукция.ТекущиеДанные;
	
	Если ЗначениеЗаполнено(ТекущиеДанные.Фасовка) Тогда
		
		ДанныеСтрокиТаблицы = Новый Структура("Фасовка, Количество, ФизическийВес");
		ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, ТекущиеДанные);		
				
		ПродукцияФасовкаКоличествоПриИзмененииНаСервере(ДанныеСтрокиТаблицы);	
		
		ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтрокиТаблицы);	
		
		ПродукцияКоличествоФизическийВесПлановаСтоимостьПриИзменении(ТекущиеДанные);

	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПродукцияФасовкаКоличествоПриИзмененииНаСервере(СтрокаТабличнойЧасти)
	
	СтрокаТабличнойЧасти.ФизическийВес = СтрокаТабличнойЧасти.Фасовка.Вес * СтрокаТабличнойЧасти.Количество;			
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияФизическийВесПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Продукция.ТекущиеДанные;
	
	ПродукцияКоличествоФизическийВесПлановаСтоимостьПриИзменении(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияПлановаяСтоимостьПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Продукция.ТекущиеДанные;
	
	ПродукцияКоличествоФизическийВесПлановаСтоимостьПриИзменении(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПродукцияКоличествоФизическийВесПлановаСтоимостьПриИзменении(СтрокаТабличнойЧасти)
	
	СтрокаТабличнойЧасти.СуммаПлановая = СтрокаТабличнойЧасти.ФизическийВес * СтрокаТабличнойЧасти.ПлановаяСтоимость;

КонецПроцедуры

&НаКлиенте
Процедура ПродукцияСуммаПлановаяПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Продукция.ТекущиеДанные;

	Если ТекущиеДанные.ФизическийВес = 0 Тогда
		ТекущиеДанные.ПлановаяСтоимость = 0;
	Иначе
		ТекущиеДанные.ПлановаяСтоимость = ТекущиеДанные.СуммаПлановая / ТекущиеДанные.ФизическийВес;
	КонецЕсли;	

КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте
Процедура ПродукцияЛабораторныйАнализПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Продукция.ТекущиеДанные; 	
	
	ДанныеСтрокиТаблицы = Новый Структура(
		"ЛабораторныйАнализ, НомерАнализа, Влажность,
		|СорнаяПримесь, ЗерноваяПримесь, ЗачетныйВес
		|");
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, ТекущиеДанные); 
	
	ПараметрыДляРасчетаЗачетногоВеса = ПолучитьПараметрыДляРасчетаЗачетногоВеса(ТекущиеДанные);

	ИНАГРО_Элеватор.ЛабораторныйАнализПриИзмененииНаСервере(ДанныеСтрокиТаблицы, ПараметрыДляРасчетаЗачетногоВеса);
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтрокиТаблицы);
	
КонецПроцедуры
 
&НаКлиенте
Процедура ПродукцияЛабораторныйАнализНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.Продукция.ТекущиеДанные;
	
	ПараметрыОтбора = Новый Структура;
	
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		ПараметрыОтбора.Вставить("Организация",        Объект.Организация);		
	КонецЕсли;	
	Если ЗначениеЗаполнено(Объект.Владелец) Тогда
		ПараметрыОтбора.Вставить("Владелец",           Объект.Владелец);
	КонецЕсли;	
	Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		ПараметрыОтбора.Вставить("ДоговорКонтрагента", Объект.ДоговорКонтрагента);		
	КонецЕсли;	
	Если ЗначениеЗаполнено(Объект.Склад) Тогда
		ПараметрыОтбора.Вставить("Склад",              Объект.Склад);
	КонецЕсли;	
	Если ЗначениеЗаполнено(Объект.ВидХранения) Тогда
		ПараметрыОтбора.Вставить("ВидХранения",        Объект.ВидХранения);
	КонецЕсли;	
	Если ЗначениеЗаполнено(ТекущиеДанные.Номенклатура) Тогда
		ПараметрыОтбора.Вставить("Номенклатура",       ТекущиеДанные.Номенклатура);
	КонецЕсли;
		
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Отбор",  ПараметрыОтбора);
	ПараметрыФормы.Вставить("Ссылка", Объект.Ссылка);
	
	ОткрытьФорму("Документ.ИНАГРО_ЛабораторныйАнализ.Форма.ФормаВыбора", ПараметрыФормы, Элемент, УникальныйИдентификатор, , , , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

#КонецОбласти 
 
#Область ОбработчикиСобытийЭлементовТаблицыФормыУслуги

&НаКлиенте
Процедура УслугиКоличествоПриИзменении(Элемент)
	
	УслугиКоличествоЦенаПриИзменении();

КонецПроцедуры

&НаКлиенте
Процедура УслугиЦенаПриИзменении(Элемент)
	
	УслугиКоличествоЦенаПриИзменении();
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиКоличествоЦенаПриИзменении()
	
	ТекущиеДанные = Элементы.Услуги.ТекущиеДанные;
	
	ТекущиеДанные.Сумма = ТекущиеДанные.Количество * ТекущиеДанные.Цена;
		
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура СоздатьЛабораторныйАнализ(Команда)
	
	Если ТекущийЭлемент = Элементы.Сырье ИЛИ ТекущийЭлемент = Элементы.Продукция Тогда
		
		ИмяТабличнойЧасти = ТекущийЭлемент.Имя;
		
		ТекущиеДанные = Элементы[ИмяТабличнойЧасти].ТекущиеДанные;
		
		Если Объект[ИмяТабличнойЧасти].Количество() = 0 ИЛИ ТекущиеДанные = Неопределено Тогда			
			Возврат;
		Иначе
			
			ЗначенияЗаполнения = Новый Структура;
			ЗначенияЗаполнения.Вставить("Ссылка",             ПредопределенноеЗначение("Документ.ИНАГРО_ЛабораторныйАнализ.ПустаяСсылка"));
			ЗначенияЗаполнения.Вставить("Дата",               Объект.Дата);
			ЗначенияЗаполнения.Вставить("Организация",        Объект.Организация);
			ЗначенияЗаполнения.Вставить("Владелец",           Объект.Владелец);
			ЗначенияЗаполнения.Вставить("ДоговорКонтрагента", Объект.ДоговорКонтрагента);
			ЗначенияЗаполнения.Вставить("Склад",        	  Объект.Склад);
			ЗначенияЗаполнения.Вставить("ВидХранения",        Объект.ВидХранения);
			ЗначенияЗаполнения.Вставить("Урожай",             Объект.Урожай);
			ЗначенияЗаполнения.Вставить("Номенклатура",       ТекущиеДанные.Номенклатура);
			ЗначенияЗаполнения.Вставить("Влажность",          ТекущиеДанные.Влажность);
			ЗначенияЗаполнения.Вставить("СорнаяПримесь",      ТекущиеДанные.СорнаяПримесь);
			ЗначенияЗаполнения.Вставить("ЗерноваяПримесь",    ТекущиеДанные.ЗерноваяПримесь);
			
			ЗначенияЗаполнения.Вставить("МассаПартии",        ТекущиеДанные.ФизическийВес);
			
			ИНАГРО_ЭлеваторКлиент.СоздатьДокументНаОсновании(ЭтаФорма, ЗначенияЗаполнения);
			
		КонецЕсли;

	Иначе
		
		ТекстСообщения = НСтр("ru='Лабораторный анализ можно создать только для строки табличной части!';uk='Лабораторний аналіз можна створити тільки для рядка табличної частини!'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Объект.Сырье");
		ТекущийЭлемент = Элементы.Сырье;
			
		Возврат;	

	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоОстаткам(Команда)
		
	Если Объект.Ссылка.Пустая() Тогда 		
		
		ТекстСтрокиСообщения = НСтр("ru = 'Заполнить по остаткам'; uk = 'Заповнити за залишками'");
		
		ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Данные еще не записаны.
			|Выполнение действия ""%1"" возможно только после записи данных.
			|Данные будут записаны.';uk='Дані ще не записані.
			|Виконання дії ""%1"" можливо тільки після запису даних.
			|Дані будуть записані.'"), ТекстСтрокиСообщения);
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнитьПоОстаткамПодтверждениеЗаписи", ЭтотОбъект, Параметры);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);		
		
	Иначе
		ЗаполнитьПоОстаткамПодтверждениеЗаписи(КодВозвратаДиалога.ОК, Неопределено);	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоОстаткамПодтверждениеЗаписи(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.ОК Тогда
		Записать();
		Если Объект.Ссылка.Пустая() ИЛИ Модифицированность Тогда
			Возврат; // запись не удалась, сообщения о причинах выводит платформа
		КонецЕсли;
	ИначеЕсли РезультатВопроса = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.Сырье.Количество() > 0 Тогда		
		ТекстВопроса = НСтр("ru='Табличная часть ""Сырье"" будет очищена. Продолжить?';uk='Таблична частина ""Сировина"" буде очищена. Продовжити?'");
		Оповещение = Новый ОписаниеОповещения("ЗаполнитьПоОстаткамЗавершение", ЭтотОбъект, Параметры);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	Иначе
		ЗаполнитьПоОстаткамНаСервере();
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоОстаткамЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда 	   
		Возврат;
	КонецЕсли;
	
	Объект.Сырье.Очистить();
	
	ЗаполнитьПоОстаткамНаСервере();	
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоОстаткамНаСервере()
	
	Фильтр = "";
	Фильтр = Фильтр + ?(ЗначениеЗаполнено(Объект.Организация),        " Организация = &Организация ", "");
	Фильтр = Фильтр + ?(ЗначениеЗаполнено(Объект.Владелец),           " И Владелец = &Владелец ", "");
	Фильтр = Фильтр + ?(ЗначениеЗаполнено(Объект.ДоговорКонтрагента), " И Договор = &Договор ", "");
	Фильтр = Фильтр + ?(ЗначениеЗаполнено(Объект.Склад),              " И Склад = &Склад ", "");
	Фильтр = Фильтр + ?(ЗначениеЗаполнено(Объект.ВидХранения),        " И ВидХранения = &ВидХранения ", "");
	Фильтр = Фильтр + ?(ЗначениеЗаполнено(Объект.Урожай),             " И Урожай = &Урожай ", "");

	Запрос = Новый Запрос;
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Остатки.Номенклатура,
		|	Остатки.ВесОстаток КАК ФизическийВес,
		//|	ВЫБОР
		//|		КОГДА ЕСТЬNULL(Остатки.КоличествоОстаток, 0) = 0
		//|			ТОГДА ЕСТЬNULL(Остатки.ВесОстаток, 0)
		//|		ИНАЧЕ ЕСТЬNULL(Остатки.КоличествоОстаток, 0)
		//|	КОНЕЦ КАК Количество,
		|	0 КАК Количество,
		|	Остатки.ЗачетныйВесОстаток КАК ЗачетныйВес,
		|	Остатки.Номенклатура.БазоваяЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	&Коэффициент
		|ИЗ
		|	Константы КАК Константы,
		|	РегистрНакопления.ИНАГРО_Остатки.Остатки(
		|			&МоментВремени," + Фильтр + ") КАК Остатки";

	
	Запрос.УстановитьПараметр("МоментВремени", Объект.Ссылка.МоментВремени());
	Запрос.УстановитьПараметр("Организация",   Объект.Организация);
	Запрос.УстановитьПараметр("Владелец",      Объект.Владелец);
	Запрос.УстановитьПараметр("Договор",       Объект.ДоговорКонтрагента);
	Запрос.УстановитьПараметр("Склад",         Объект.Склад);
	Запрос.УстановитьПараметр("ВидХранения",   Объект.ВидХранения);
	Запрос.УстановитьПараметр("Урожай",        Объект.Урожай);
	Запрос.УстановитьПараметр("Коэффициент",   1); 	

	ТаблицаЗначений = Запрос.Выполнить().Выгрузить();
	
	//Для Каждого СтрокаТаблицы Из ТаблицаЗначений Цикл
	//	СтрокаТаблицы.Количество = СтрокаТаблицы.ФизическийВес;
	//КонецЦикла;
	
	Объект.Сырье.Загрузить(ТаблицаЗначений);

	Если Объект.Сырье.Количество() > 0 Тогда
		Документы.ИНАГРО_Переработка.ЗаполнитьСчетаУчетаВТабличнойЧасти(Объект, "Сырье", СобственноеПодразделение);
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоРецепту(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.Рецепт) Тогда
		СтрокаСообщения = НСтр("ru='Не выбран рецепт!'; uk ='Не вибраний рецепт!'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения, , "Объект.Рецепт");
		Возврат;
	КонецЕсли;

	Если Объект.Сырье.Количество() > 0 ИЛИ Объект.Продукция.Количество() > 0 Тогда		
		ТекстВопроса = НСтр("ru='Табличные поля будут очищены. Продолжить?';uk='Табличні поля будуть очищені. Продовжити?'");
		Оповещение = Новый ОписаниеОповещения("ЗаполнитьПоРецептуЗавершение", ЭтотОбъект, Параметры);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	Иначе
		ЗаполнитьПоРецептуНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоРецептуЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда 	   
		Возврат;
	КонецЕсли;
	
	Объект.Сырье.Очистить();
	Объект.Продукция.Очистить();
	
	ЗаполнитьПоРецептуНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоРецептуНаСервере()
	
	Рецепт = Объект.Рецепт;
	
	Для Каждого СтрокаТабличнойЧасти Из Рецепт.СписокНоменклатуры Цикл
		СтрокаСырье = Объект.Сырье.Добавить();
		СтрокаСырье.Номенклатура     = СтрокаТабличнойЧасти.Номенклатура;			
		СтрокаСырье.ЕдиницаИзмерения = СтрокаСырье.Номенклатура.БазоваяЕдиницаИзмерения;
		СтрокаСырье.Коэффициент      = 1;
		СтрокаСырье.ФизическийВес    = Окр(Рецепт.ВесПартии * СтрокаТабличнойЧасти.Процент /100 * (100 + Объект.ПроцентПотерь) / 100, 3);
		СтрокаСырье.ЗачетныйВес      = СтрокаСырье.ФизическийВес;
	КонецЦикла;	
		
	Если Рецепт.ВидОперации = Перечисления.ИНАГРО_ВидыОперацийРецепт.РецептПоОднойГотовойПродукции Тогда
		
		СтрокаПродукция = Объект.Продукция.Добавить();
		СтрокаПродукция.Номенклатура     = Рецепт.Продукция;
		СтрокаПродукция.ЕдиницаИзмерения = Рецепт.Продукция.БазоваяЕдиницаИзмерения;
		СтрокаПродукция.Коэффициент      = 1;
		СтрокаПродукция.ФизическийВес    = Рецепт.ВесПартии;		
		СтрокаПродукция.ДоляСтоимости    = 100;
		
		Если ЗначениеЗаполнено(ТипЦенПлановойСебестоимости) Тогда
			СтрокаПродукция.ПлановаяСтоимость = Ценообразование.ПолучитьЦенуНоменклатуры(СтрокаПродукция.Номенклатура,
			                                                                             ТипЦенПлановойСебестоимости,
																						 Объект.Дата,
																						 ВалютаРегламентированногоУчета,
																						 1);
		КонецЕсли;
		
		ПродукцияКоличествоФизическийВесПлановаСтоимостьПриИзменении(СтрокаПродукция);
		
	Иначе
		
		Для Каждого СтрокаТабличнойЧасти Из Рецепт.СписокПродукции Цикл
			
			СтрокаПродукция = Объект.Продукция.Добавить();
			СтрокаПродукция.Номенклатура     = СтрокаТабличнойЧасти.Номенклатура;
			СтрокаПродукция.ЕдиницаИзмерения = СтрокаТабличнойЧасти.Номенклатура.БазоваяЕдиницаИзмерения;
			СтрокаПродукция.Коэффициент      = 1;
			СтрокаПродукция.ФизическийВес    = СтрокаТабличнойЧасти.КоличествоПартии;
			СтрокаПродукция.ДоляСтоимости    = СтрокаТабличнойЧасти.Процент;
			
			Если ЗначениеЗаполнено(ТипЦенПлановойСебестоимости) Тогда
				СтрокаПродукция.ПлановаяСтоимость = Ценообразование.ПолучитьЦенуНоменклатуры(СтрокаПродукция.Номенклатура,
				                                                                             ТипЦенПлановойСебестоимости,
																							 Объект.Дата,
																							 ВалютаРегламентированногоУчета,
																							 1);
			КонецЕсли;
			
			ПродукцияКоличествоФизическийВесПлановаСтоимостьПриИзменении(СтрокаПродукция);
						
		КонецЦикла;
		
	КонецЕсли;	
		
	ЗаполнитьСчетаУчетаВТабличнойЧасти();
	
	Модифицированность = Истина;
		
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьУслуги(Команда)
	
	ЗаполнитьУслугиНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьУслугиНаСервере()
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");	
	ДокументОбъект.ЗаполнитьУслуги(); 	
	ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
	
	Модифицированность = Истина;
	
КонецПроцедуры	

&НаКлиенте
Процедура Подбор(Команда)
	
	ПараметрыПодбора = ПолучитьПараметрыПодбора("Сырье");
	Если ПараметрыПодбора <> Неопределено Тогда
		ОткрытьФорму("Обработка.ПодборНоменклатуры.Форма.Форма", ПараметрыПодбора,
			ЭтаФорма, УникальныйИдентификатор);
	КонецЕсли;

КонецПроцедуры

#КонецОбласти 

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ПодготовитьФормуНаСервере()

	УстановитьФункциональныеОпцииФормы();

	ТекущаяДатаДокумента = Объект.Дата;
	
	ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	ТипЦенПлановойСебестоимости    = Константы.ТипЦенПлановойСебестоимостиНоменклатуры.Получить();
		
	УстановитьЗаголовокФормы();	
	
	УстановитьЗаголовкиИДоступностьСубконто(ЭтаФорма, Объект.СчетЗатрат, Истина, "");
	
	УправлениеФормой(ЭтаФорма);	
	
	УстановитьСостояниеДокумента();

КонецПроцедуры

&НаСервере
Процедура УстановитьФункциональныеОпцииФормы()
	
	ОбщегоНазначенияБПКлиентСервер.УстановитьПараметрыФункциональныхОпцийФормыДокумента(ЭтаФорма);
		
	ПлательщикНДС                   = УчетнаяПолитика.ПлательщикНДС(Объект.Организация, Объект.Дата);
	ПлательщикНалогаНаПрибыльДо2015 = УчетнаяПолитика.ПлательщикНалогаНаПрибыльДо2015(Объект.Организация, Объект.Дата);

	СобственноеПодразделение        = ИНАГРО_Элеватор.ПолучитьДополнительныйРеквизитКонтрагента(Объект.Владелец, "СобственноеПодразделение");
	ВидимостьМестаХранения          = ИНАГРО_Элеватор.ПолучитьДополнительныйРеквизитСклада(Объект.Склад, "ВестиУчетПоМестамХранения");
	ВестиРасчетныйВыпускПродукции   = ИНАГРО_Элеватор.ПолучитьДополнительныйРеквизитПодразделенияОрганизации(Объект.ПодразделениеОрганизации, "ВестиРасчетныйВыпускПродукции");

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Элементы = Форма.Элементы;
	Объект   = Форма.Объект;
	
	СкладскойУчет = Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ИНАГРО_ВидыОперацийПереработка.СкладскойУчет");	
	Если СкладскойУчет Тогда 
		Объект.ОтражатьВБухгалтерскомУчете = Ложь;
	КонецЕсли;
	ОтражатьВБухгалтерскомУчете = Объект.ОтражатьВБухгалтерскомУчете;
	
	Элементы.ОтражатьВБухгалтерскомУчете.Доступность = НЕ СкладскойУчет;	
	Элементы.Владелец.Доступность                    = НЕ СкладскойУчет;
	Элементы.ДоговорКонтрагента.Доступность          = НЕ СкладскойУчет;
	Элементы.ВидХранения.Доступность                 = НЕ СкладскойУчет;	
	Элементы.ПодразделениеОрганизации.Доступность    = НЕ СкладскойУчет;
	Элементы.Урожай.Доступность                      = НЕ СкладскойУчет;
	Элементы.ОтражатьВРасчетномВыходеПродукции.Доступность = НЕ СкладскойУчет;
	Элементы.МестоХранения.Видимость		         = Форма.ВидимостьМестаХранения;
	
	Элементы.ПродукцияНоменклатураПоФорме117.Видимость = Объект.ОтражатьВРасчетномВыходеПродукции;

	Элементы.ГруппаСчетУчетаЗатрат.Видимость         = НЕ СкладскойУчет;
	Элементы.ГруппаСчетЗатратСубконто.Доступность    = ОтражатьВБухгалтерскомУчете;
	
	Элементы.СырьеСчетУчетаБУ.Видимость              = ОтражатьВБухгалтерскомУчете;
	Элементы.СырьеНалоговоеНазначение.Видимость      = ОтражатьВБухгалтерскомУчете;
	
	Элементы.ПродукцияСчетУчетаБУ.Видимость          = ОтражатьВБухгалтерскомУчете;
	Элементы.ПродукцияНалоговоеНазначение.Видимость  = ОтражатьВБухгалтерскомУчете;

	Если    Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ИНАГРО_ВидыОперацийПереработка.СобственноеСырье")
		ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ИНАГРО_ВидыОперацийПереработка.СкладскойУчет") Тогда 
		Элементы.ГруппаУслуги.Видимость = Ложь;
	Иначе 
		Элементы.ГруппаУслуги.Видимость = Истина;
	КонецЕсли;
	
	Элементы.ЗаголовокНалоговоеНазначениеЗатрат.Видимость = Форма.ПлательщикНалогаНаПрибыльДо2015;
	Элементы.ГруппаНалоговоеНазначениеДоходовИЗатрат.Видимость = Форма.ПлательщикНалогаНаПрибыльДо2015;
	Если Форма.ПлательщикНалогаНаПрибыльДо2015 Тогда
		ПоказатьНалоговоеНазначениеПроводки(Объект, Элементы, Форма.ПлательщикНДС);
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПараметрыВыбораВидОперации()
	
	МассивВидовОпераций = Документы.ИНАГРО_Переработка.ПолучитьФиксированныйМассивВидовОпераций();
	
	ПараметрМассивВидовОпераций = Новый ПараметрВыбора("Отбор.Ссылка", МассивВидовОпераций);
	
	НовыйМассив = Новый Массив();
	НовыйМассив.Добавить(ПараметрМассивВидовОпераций);
	НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);
	
	Элементы.ВидОперации.ПараметрыВыбора = НовыеПараметры;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗаголовокФормы()
	
	ТекстЗаголовка = НСтр("ru='Переработка сырья';uk='Переробка сировини'");
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ТекстЗаголовка = ТекстЗаголовка + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru=' %1 от %2';uk=' %1 від %2'"), Объект.Номер, Объект.Дата);
	Иначе
		ТекстЗаголовка = ТекстЗаголовка + НСтр("ru=' (создание)';uk=' (створення)'");
	КонецЕсли;
	
	Заголовок = ТекстЗаголовка + " (" + Строка(Объект.ВидОперации) + ")";
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСостояниеДокумента()
	
	СостояниеДокумента = ОбщегоНазначенияБП.СостояниеДокумента(Объект);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСчетаУчетаВТабличнойЧасти()
	
	Если Объект.Сырье.Количество() > 0 Тогда
		Документы.ИНАГРО_Переработка.ЗаполнитьСчетаУчетаВТабличнойЧасти(Объект, "Сырье", СобственноеПодразделение);
	КонецЕсли;
	
	Если Объект.Продукция.Количество() > 0 Тогда
		Документы.ИНАГРО_Переработка.ЗаполнитьСчетаУчетаВТабличнойЧасти(Объект, "Продукция", СобственноеПодразделение);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьЗаголовкиИДоступностьСубконто(Форма, Счет, ЕстьПодразделение, Постфикс = "")

	ПоляФормы = Новый Структура("Субконто1, Субконто2, Субконто3",
		"Субконто" + Постфикс + "1",
		"Субконто" + Постфикс + "2",
		"Субконто" + Постфикс + "3");
		
	Если ЕстьПодразделение Тогда
		ПоляФормы.Вставить("Подразделение", "ПодразделениеЗатрат" + Постфикс);
	КонецЕсли;
	
	ЗаголовкиПолей = Новый Структура("Субконто1, Субконто2, Субконто3",
		"ЗаголовокСубконто" + Постфикс + "1",
		"ЗаголовокСубконто" + Постфикс + "2",
		"ЗаголовокСубконто" + Постфикс + "3");
	
	Если ЕстьПодразделение Тогда
		ЗаголовкиПолей.Вставить("Подразделение", "ЗаголовокПодразделение" + Постфикс);
	КонецЕсли;
	
	БухгалтерскийУчетКлиентСервер.ПриВыбореСчета(Счет, Форма, ПоляФормы, ЗаголовкиПолей);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ИзменитьПараметрыВыбораПолейСубконто(Форма, Суффикс, ИмяСчета)

	ПараметрыДокумента = СписокПараметровВыбораСубконто(Форма, Форма.Объект,"Субконто" + Суффикс + "%Индекс%", ИмяСчета);
	
	БухгалтерскийУчетКлиентСервер.ИзменитьПараметрыВыбораПолейСубконто(Форма, Форма.Объект, "Субконто" + Суффикс + "%Индекс%", "Субконто" + Суффикс + "%Индекс%", ПараметрыДокумента);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция СписокПараметровВыбораСубконто(Форма, ПараметрыОбъекта, ШаблонИмяПоляОбъекта, ИмяСчета)

	СписокПараметров = Новый Структура;
	Для Индекс = 1 По 3 Цикл
		ИмяПоля = СтрЗаменить(ШаблонИмяПоляОбъекта, "%Индекс%", Индекс);
		Если ТипЗнч(ПараметрыОбъекта[ИмяПоля]) = Тип("СправочникСсылка.Контрагенты") Тогда
			СписокПараметров.Вставить("Контрагент", ПараметрыОбъекта[ИмяПоля]);
		ИначеЕсли ТипЗнч(ПараметрыОбъекта[ИмяПоля]) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
			СписокПараметров.Вставить("ДоговорКонтрагента", ПараметрыОбъекта[ИмяПоля]);
		ИначеЕсли ТипЗнч(ПараметрыОбъекта[ИмяПоля]) = Тип("СправочникСсылка.Номенклатура") Тогда
			СписокПараметров.Вставить("Номенклатура", ПараметрыОбъекта[ИмяПоля]);
		ИначеЕсли ТипЗнч(ПараметрыОбъекта[ИмяПоля]) = Тип("СправочникСсылка.Склады") Тогда
			СписокПараметров.Вставить("Склад", ПараметрыОбъекта[ИмяПоля]);
		КонецЕсли;
	КонецЦикла;
	СписокПараметров.Вставить("Организация", Форма.Объект.Организация);
	СписокПараметров.Вставить("СчетУчета"  , Форма.Объект[ИмяСчета]);
	
	Возврат СписокПараметров;

КонецФункции

&НаСервере
Процедура ПроверитьНалоговоеНазначениеДоходовИЗатрат()
	
	ХарактерЗатрат = УправлениеПроизводствомВызовСервера.ПолучитьХарактерЗатратПоСчетуЗатрат(Объект.СчетЗатрат, ,Объект.Дата);
	Если (ХарактерЗатрат = "Производство" ИЛИ ХарактерЗатрат = "Строительство" ИЛИ ХарактерЗатрат = "ТЗР" ИЛИ ХарактерЗатрат = "РБП") Тогда
		Объект.НалоговоеНазначениеДоходовИЗатрат = Неопределено;	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПоказатьНалоговоеНазначениеПроводки(Объект, Элементы, ПлательщикНДС)

	ХарактерЗатрат = УправлениеПроизводствомВызовСервера.ПолучитьХарактерЗатратПоСчетуЗатрат(Объект.СчетЗатарт, , Объект.Дата);                                                                                              
	Элементы.НалоговоеНазначениеДоходовИЗатрат.Доступность = НЕ (ХарактерЗатрат = "Производство" ИЛИ ХарактерЗатрат = "Строительство" ИЛИ ХарактерЗатрат = "ТЗР" ИЛИ ХарактерЗатрат = "РБП");
	
	ТекстНадписи = "";
	Если Элементы.НалоговоеНазначениеДоходовИЗатрат.Доступность = Ложь Тогда
		// Заполним характер затрат, признак Амортизируется и НалоговоеНазначениеДоходовИЗатрат.
		ХарактерЗатрат = Неопределено;
		ХарактерЗатратРБП = Неопределено;		
		НалоговоеНазначениеПроводки = Неопределено;
		
		Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийТребованиеНакладная.Материалы") Тогда
			НалоговоеНазначениеНДС = НСтр("ru='Совпадает с налоговым назначением материала';uk='Співпадає з податковим призначенням матеріала'");
		Иначе	
		    НалоговоеНазначениеНДС = НСтр("ru='Совпадает с налоговым назначением оборудования';uk='Співпадає з податковим призначенням устаткування'");
		КонецЕсли;
		СтруктураСубконто = Новый Структура("Субконто1,Субконто2,Субконто3", Объект.Субконто1, Объект.Субконто2, Объект.Субконто3);
		НалоговыйУчет.ОпределениеАналитикиНалоговогоУчетаВПроводкахДляЗатрат(СтруктураСубконто, Объект.Счет, ХарактерЗатрат,
																			 НалоговоеНазначениеПроводки, , НалоговоеНазначениеНДС,,,Объект.Дата, ХарактерЗатратРБП
																			,ПлательщикНДС);
		Если НЕ ПлательщикНДС Тогда
			ТекстНадписи = "<" + Строка(НалоговоеНазначениеПроводки) + ">";
		ИначеЕсли ХарактерЗатрат = "ОПЗ"
			ИЛИ ХарактерЗатрат = "ТЗР" Тогда
			ТекстНадписи = "<" + Строка(НалоговоеНазначениеПроводки) + ">";
		ИначеЕсли ХарактерЗатрат = "Производство" Тогда
			ТекстНадписи = "<" + Строка(НалоговоеНазначениеПроводки) + ">, " + НСтр("ru='из аналитики счета - номенклатурной группы';uk='з аналітики рахунку - номенклатурної групи'");
		ИначеЕсли ХарактерЗатрат = "Строительство" Тогда
			ТекстНадписи = "<" + Строка(НалоговоеНазначениеПроводки) + ">, " + НСтр("ru='из аналитики счета - объекта строительства';uk=""з аналітики рахунку - об'єкта будівництва""");
		ИначеЕсли ХарактерЗатрат = "РБП" Тогда
			Если    ХарактерЗатратРБП = "Производство"
				ИЛИ ХарактерЗатратРБП = "Строительство"
				ИЛИ ХарактерЗатратРБП = "ОПЗ" Тогда
				ТекстНадписи = "<" + Строка(НалоговоеНазначениеПроводки) + ">, " + НСтр("ru='из аналитики счета - справочника РБП';uk='з аналітики рахунку - довідника витрат майбут. періодів'");
			Иначе			
				ТекстНадписи = "<" + Строка(НалоговоеНазначениеПроводки) + ">";
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ НалоговоеНазначениеПроводки = Неопределено Тогда
			Объект.НалоговоеНазначениеДоходовИЗатрат = НалоговоеНазначениеПроводки;
		КонецЕсли;

	КонецЕсли;
	
	Элементы.НадписьИнформацияНалоговоеНазначениеДоходовИЗатрат.Заголовок = ТекстНадписи;
	
КонецПроцедуры	

&НаКлиенте
Функция ПолучитьДанныеСтрокиТаблицыСырье(ТекущиеДанные)
	
	ДанныеСтрокиТаблицы = Новый Структура(
		"Влажность, СорнаяПримесь, ЗерноваяПримесь,
		|ФизическийВес, ЗачетныйВес");
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, ТекущиеДанные);	
	
	Возврат ДанныеСтрокиТаблицы;
	
КонецФункции

&НаКлиенте
Функция ПолучитьПараметрыПодбора(ИмяТаблицы)

	ПараметрыФормы = Новый Структура;
	
	ДатаРасчетов 	 = ?(НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДата()), Неопределено, Объект.Дата);
	
	ЗаголовокПодбора = НСтр("ru='Подбор номенклатуры в %1 (%2)';uk='Підбір номенклатури %1 (%2)'");
		
	ПредставлениеТаблицы = НСтр("ru='Сырье';uk='Сировина'");
		
	ЗаголовокПодбора = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ЗаголовокПодбора, Объект.Ссылка, ПредставлениеТаблицы);
	
	ПараметрыФормы.Вставить("ЕстьЦена",            Ложь);
	ПараметрыФормы.Вставить("ЕстьКоличество",      Истина);
	ПараметрыФормы.Вставить("ДатаРасчетов",        ДатаРасчетов);
	ПараметрыФормы.Вставить("Организация",         Объект.Организация);
	ПараметрыФормы.Вставить("Склад",               Объект.Склад);
	ПараметрыФормы.Вставить("Заголовок",           ЗаголовокПодбора);
	ПараметрыФормы.Вставить("ИмяТаблицы",          ИмяТаблицы);
	ПараметрыФормы.Вставить("ПоказыватьОстатки"  , Истина);
	ПараметрыФормы.Вставить("ПоказыватьСчетУчета", Истина);
	Параметрыформы.Вставить("ПоказыватьЦены",      Ложь);
	ПараметрыФормы.Вставить("ТипЦен",              ТипЦенПлановойСебестоимости);

	Возврат ПараметрыФормы;

КонецФункции

&НаСервере
Процедура ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение, ИмяТаблицы)

	ТаблицаСырья = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресПодобраннойНоменклатурыВХранилище);
	
	ДанныеОбъекта = Новый Структура(
		"Дата, Организация, Склад,
		|ВидОперации, ОтражатьВБухгалтерскомУчете");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	ДанныеОбъекта.Вставить("СобственноеПодразделение", СобственноеПодразделение);
	
	СоответствиеСведенийОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОСпискеНоменклатуры(
		ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаСырья, "Номенклатура", Истина), ДанныеОбъекта);
		
	Для Каждого СтрокаСырья Из ТаблицаСырья Цикл		
		
		СтруктураОтбора = Новый Структура("Номенклатура, ЕдиницаИзмерения", СтрокаСырья.Номенклатура, СтрокаСырья.ЕдиницаИзмерения);
		СтрокаТабличнойЧасти = НайтиСтрокуТабличнойЧасти(ИмяТаблицы, СтруктураОтбора);
		
		Если СтрокаТабличнойЧасти <> Неопределено Тогда
			
			СтрокаТабличнойЧасти.ФизическийВес = СтрокаТабличнойЧасти.ФизическийВес + СтрокаСырья.Количество;					
			
		Иначе
			
			СтрокаТабличнойЧасти = Объект[ИмяТаблицы].Добавить();

			СведенияОНоменклатуре = СоответствиеСведенийОНоменклатуре.Получить(СтрокаСырья.Номенклатура);
			Если СведенияОНоменклатуре = Неопределено Тогда
				Продолжить;
			КонецЕсли;

			СтрокаТабличнойЧасти.Номенклатура     = СтрокаСырья.Номенклатура;
			СтрокаТабличнойЧасти.ЕдиницаИзмерения = СтрокаСырья.ЕдиницаИзмерения;
			СтрокаТабличнойЧасти.Коэффициент      = Справочники.Номенклатура.ПолучитьКоэффициентЕдиницыИзмерения(СтрокаТабличнойЧасти.Номенклатура, СтрокаТабличнойЧасти.ЕдиницаИзмерения);
			СтрокаТабличнойЧасти.ФизическийВес    = СтрокаСырья.Количество;

			//Если ДанныеОбъекта.ВидОперации = Перечисления.ИНАГРО_ВидыОперацийПереработка.СобственноеСырье Тогда
			//	Ценообразование.ЗаполнитьПлановуюСебестоимость(СтрокаТабличнойЧасти, ДанныеОбъекта.Дата);
			//КонецЕсли;

			//ПродукцияКоличествоФизическийВесПлановаСтоимостьПриИзменении(СтрокаТабличнойЧасти);

			//СтрокаТабличнойЧасти.СуммаПлановая    = СтрокаТабличнойЧасти.ФизическийВес * СтрокаТабличнойЧасти.ПлановаяСтоимость;

			Документы.ИНАГРО_Переработка.ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(ДанныеОбъекта, СтрокаТабличнойЧасти, СведенияОНоменклатуре); 			
					
		КонецЕсли;
		
	КонецЦикла; 	

КонецПроцедуры

&НаСервере
Функция НайтиСтрокуТабличнойЧасти(ИмяТабличнойЧасти, СтруктураОтбора)

	СтрокаТабличнойЧасти = Неопределено;

	МассивНайденныхСтрок = Объект[ИмяТабличнойЧасти].НайтиСтроки(СтруктураОтбора);
	Если МассивНайденныхСтрок.Количество() > 0 Тогда
		// Нашли. Вернем первую найденную строку.
		СтрокаТабличнойЧасти = МассивНайденныхСтрок[0];
	КонецЕсли;

	Возврат СтрокаТабличнойЧасти;

КонецФункции

&НаКлиенте
Функция ПолучитьПараметрыДляДоговоров()
	
	ПараметрыОтбора = Новый Структура("ВидХранения, Урожай");
	ЗаполнитьЗначенияСвойств(ПараметрыОтбора, Объект);
	
	Возврат ПараметрыОтбора;
	
КонецФункции

&НаКлиенте
Функция ПолучитьПараметрыДляПроверкиЗаполнения(СтрокаТабличнойЧасти)
	
	ПараметрыДляПроверкиЗаполнения = Новый Структура("Склад, ВидХранения, Урожай");
	ЗаполнитьЗначенияСвойств(ПараметрыДляПроверкиЗаполнения, Объект);
	ПараметрыДляПроверкиЗаполнения.Вставить("Номенклатура", СтрокаТабличнойЧасти.Номенклатура);

	Возврат ПараметрыДляПроверкиЗаполнения; 

КонецФункции

&НаКлиенте
Функция ПолучитьПараметрыДляРасчетаЗачетногоВеса(СтрокаТабличнойЧасти)
	
	ПараметрыДляРасчетаЗачетногоВеса = Новый Структура(
		"Ссылка, Дата, Организация,
		|Владелец, ДоговорКонтрагента, Номенклатура,
		|Склад, Влажность, СорнаяПримесь,
		|ФизическийВес, ЗачетныйВес");
	ЗаполнитьЗначенияСвойств(ПараметрыДляРасчетаЗачетногоВеса, Объект);
	ЗаполнитьЗначенияСвойств(ПараметрыДляРасчетаЗачетногоВеса, СтрокаТабличнойЧасти);

	Возврат ПараметрыДляРасчетаЗачетногоВеса; 

КонецФункции

#КонецОбласти 

#Область СлужебныеПроцедурыИФункцииБСП

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры

&НаКлиенте
Процедура УслугиСуммаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Услуги.ТекущиеДанные;

	Если ТекущиеДанные.Количество = 0 Тогда
		ТекущиеДанные.Цена = 0;
	Иначе
		ТекущиеДанные.Цена = ТекущиеДанные.Сумма / ТекущиеДанные.Количество;
	КонецЕсли;	

КонецПроцедуры

#КонецОбласти 
 