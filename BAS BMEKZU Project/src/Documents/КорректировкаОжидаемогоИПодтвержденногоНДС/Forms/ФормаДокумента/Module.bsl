#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	
	Если Параметры.Ключ.Пустая() Тогда
		ПодготовитьФормуНаСервере();
	КонецЕсли;
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	ПодготовитьФормуНаСервере();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ОбновитьДокументИБПослеЗаполнения" И Параметр.Найти(Объект.Ссылка) <> Неопределено Тогда
		Прочитать();
	Иначе
		ОбщегоНазначенияБПКлиент.ОбработкаОповещенияФормыДокумента(ЭтотОбъект, Объект.Ссылка, ИмяСобытия, Параметр, Источник);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ЗаполнитьДобавленныеКолонкиТаблиц();
	
	УстановитьСостояниеДокумента();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	Если НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДатаДокумента) Тогда
		// Изменение времени не влияет на поведение документа.
		ТекущаяДатаДокумента = Объект.Дата;
		Возврат;
	КонецЕсли;

	ДатаПриИзмененииНаСервере();

	// Запомним новую дату документа.
	ТекущаяДатаДокумента = Объект.Дата;
	
КонецПроцедуры

&НаСервере
Процедура ДатаПриИзмененииНаСервере()
	
	ДатаОбработатьИзменение();
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ДатаОбработатьИзменение()
	
	УстановитьФункциональныеОпцииФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		ОрганизацияПриИзмененииНаСервере();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()
	
	ОрганизацияОбработатьИзменение();
	ИзменитьПараметрыВыбораПолейСубконто(ЭтотОбъект);
	УправлениеФормой(ЭтотОбъект);

КонецПроцедуры

&НаСервере
Процедура ОрганизацияОбработатьИзменение()

	УстановитьФункциональныеОпцииФормы();

КонецПроцедуры

&НаСервере
Функция ПолучитьПериодЗаполненияНаСервере()
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Возврат Новый Граница(Новый МоментВремени(Объект.Дата, Объект.Ссылка), ВидГраницы.Исключая);
	Иначе
		Возврат Новый Граница(КонецДня(Объект.Дата), ВидГраницы.Включая);
	КонецЕсли; 
КонецФункции 

&НаКлиенте
Процедура СчетУчетаДоходовПриИзменении(Элемент)
	
	ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3",
		"ДоходыСубконто1", "ДоходыСубконто2", "ДоходыСубконто3");
	ПоляОбъекта.Вставить("Организация",   Объект.Организация);
	БухгалтерскийУчетКлиентСервер.ПриИзмененииСчета(Объект.СчетУчетаДоходов, Объект, ПоляОбъекта);
	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтотОбъект);
	ЗаголовкиПолей = Новый Структура("Субконто1, Субконто2, Субконто3",
		"ЗаголовокДоходыСубконто1", "ЗаголовокДоходыСубконто2", "ЗаголовокДоходыСубконто3");
	УстановитьЗаголовкиИДоступностьСубконто(ЭтотОбъект, Объект.СчетУчетаДоходов, "Доходы", "", ЗаголовкиПолей);
	
КонецПроцедуры

&НаКлиенте
Процедура ДоходыСубконтоНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПараметрыДокумента = ПолучитьСписокПараметровВыбораСубконто(ЭтотОбъект, Объект, "ДоходыСубконто%Индекс%");
	ПараметрыДокумента.Вставить("СчетУчета", Объект.СчетУчетаДоходов);
	ОбщегоНазначенияБПКлиент.НачалоВыбораЗначенияСубконто(ЭтотОбъект, Элемент, СтандартнаяОбработка, ПараметрыДокумента);
	
КонецПроцедуры

&НаКлиенте
Процедура ДоходыСубконтоПриИзменении(Элемент)
	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СчетУчетаЗатратПриИзменении(Элемент)
	
	ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3",
		"ЗатратыСубконто1", "ЗатратыСубконто2", "ЗатратыСубконто3");
	ПоляОбъекта.Вставить("Организация",   Объект.Организация);
	БухгалтерскийУчетКлиентСервер.ПриИзмененииСчета(Объект.СчетУчетаЗатрат, Объект, ПоляОбъекта);
	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтотОбъект);
	ЗаголовкиПолей = Новый Структура("Субконто1, Субконто2, Субконто3",
		"ЗаголовокЗатратыСубконто1", "ЗаголовокЗатратыСубконто2", "ЗаголовокЗатратыСубконто3");
	УстановитьЗаголовкиИДоступностьСубконто(ЭтотОбъект, Объект.СчетУчетаЗатрат, "Затраты", "", ЗаголовкиПолей);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗатратыСубконтоНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПараметрыДокумента = ПолучитьСписокПараметровВыбораСубконто(ЭтотОбъект, Объект, "ЗатратыСубконто%Индекс%");
	ПараметрыДокумента.Вставить("СчетУчета", Объект.СчетУчетаЗатрат);
	ОбщегоНазначенияБПКлиент.НачалоВыбораЗначенияСубконто(ЭтотОбъект, Элемент, СтандартнаяОбработка, ПараметрыДокумента);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗатратыСубконтоПриИзменении(Элемент)
	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗаполнитьПриобретения(Команда)

	Если (Объект.ПриобретенияПодтвержденный.Количество() > 0) или (Объект.ПриобретенияОжидаемый.Количество() > 0) Тогда
		ТекстВопроса = НСтр("ru='Перед заполнением табличные части будут очищены. Заполнить?';uk='Перед заповненням табличні частини будуть очищені. Заповнити?'");
		Оповещение = Новый ОписаниеОповещения("ЗаполнитьПриобретенияПослеЗакрытияВопроса", ЭтотОбъект, Параметры);

		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	Иначе
		ЗаполнитьПриобретенияНаСервере();
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПриобретенияПослеЗакрытияВопроса(Результат, Параметры) Экспорт

	Если Результат = КодВозвратаДиалога.Да Тогда
		Объект.ПриобретенияПодтвержденный.Очистить();
		Объект.ПриобретенияОжидаемый.Очистить();
		
		ЗаполнитьПриобретенияНаСервере();
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПриобретенияНаСервере()
	
	Фильтр = Ложь;
	
	ДанныеОбъекта  = Новый Структура("Организация, Дата, ВалютаРегламентированногоУчета");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	ДанныеОбъекта.ВалютаРегламентированногоУчета  = ЭтотОбъект.ВалютаРегламентированногоУчета;
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ
	|	НДСПриобретенийОстатки.ДоговорКонтрагента.Владелец КАК Контрагент,
	|	НДСПриобретенийОстатки.ДоговорКонтрагента,
	|	НДСПриобретенийОстатки.ВозвратнаяТара,
	|	НДСПриобретенийОстатки.СобытиеНДС,
	|	НДСПриобретенийОстатки.СтавкаНДС,
	|	НДСПриобретенийОстатки.ВидДеятельностиНДС,
	|	НДСПриобретенийОстатки.Сделка,
	|	НДСПриобретенийОстатки.ДляХозяйственнойДеятельности,
	|	НДСПриобретенийОстатки.Амортизируется,
	|	СУММА(НДСПриобретенийОстатки.ОтрицательнаяБазаНДС) КАК ОтрицательнаяБазаНДС,
	|	СУММА(НДСПриобретенийОстатки.ПоложительнаяБазаНДС) КАК ПоложительнаяБазаНДС,
	|	СУММА(НДСПриобретенийОстатки.ОтрицательныйНДС) КАК ОтрицательныйНДС,
	|	СУММА(НДСПриобретенийОстатки.ПоложительныйНДС) КАК ПоложительныйНДС
	|ИЗ
	|	(ВЫБРАТЬ
	|		НДСПриобретенийОстатки.ДоговорКонтрагента 		КАК ДоговорКонтрагента,
	|		НДСПриобретенийОстатки.ВозвратнаяТара 			КАК ВозвратнаяТара,
	|		НДСПриобретенийОстатки.СобытиеНДС 				КАК СобытиеНДС,
	|		НДСПриобретенийОстатки.СтавкаНДС 				КАК СтавкаНДС,
	|		НДСПриобретенийОстатки.ВидДеятельностиНДС 		КАК ВидДеятельностиНДС,
	|		НДСПриобретенийОстатки.ДляХозяйственнойДеятельности КАК ДляХозяйственнойДеятельности,
	|		НДСПриобретенийОстатки.Амортизируется КАК Амортизируется,
	|		НДСПриобретенийОстатки.Сделка 			КАК Сделка,
	|		ВЫБОР КОГДА НДСПриобретенийОстатки.БазаНДСОстаток < 0 ТОГДА НДСПриобретенийОстатки.БазаНДСОстаток ИНАЧЕ 0 КОНЕЦ КАК ОтрицательнаяБазаНДС,
	|		ВЫБОР КОГДА НДСПриобретенийОстатки.БазаНДСОстаток > 0 ТОГДА НДСПриобретенийОстатки.БазаНДСОстаток ИНАЧЕ 0 КОНЕЦ КАК ПоложительнаяБазаНДС,
	|		ВЫБОР КОГДА НДСПриобретенийОстатки.БазаНДСОстаток < 0 ТОГДА НДСПриобретенийОстатки.СуммаНДСОстаток ИНАЧЕ 0 КОНЕЦ КАК ОтрицательныйНДС,
	|		ВЫБОР КОГДА НДСПриобретенийОстатки.БазаНДСОстаток > 0 ТОГДА НДСПриобретенийОстатки.СуммаНДСОстаток ИНАЧЕ 0 КОНЕЦ КАК ПоложительныйНДС
	|
	|	ИЗ
	|		РегистрНакопления.ОжидаемыйИПодтвержденныйНДСПриобретений.Остатки(&МоментДок, Организация = &Организация И СобытиеНДС В (&СписокСобытий) "+?(Фильтр," И ДоговорКонтрагента = &ДоговорКонтрагента И СобытиеНДС = &СобытиеНДС И ВозвратнаяТара = &ВозвратнаяТара  И СтавкаНДС = &СтавкаНДС ","")+") КАК НДСПриобретенийОстатки) КАК НДСПриобретенийОстатки
	|
	|СГРУППИРОВАТЬ ПО 
	|	НДСПриобретенийОстатки.ДоговорКонтрагента,
	|	НДСПриобретенийОстатки.ВозвратнаяТара,
	|	НДСПриобретенийОстатки.СобытиеНДС,
	|	НДСПриобретенийОстатки.СтавкаНДС,
	|	НДСПриобретенийОстатки.ВидДеятельностиНДС,
	|	НДСПриобретенийОстатки.Амортизируется,
	|	НДСПриобретенийОстатки.Сделка,
	|	НДСПриобретенийОстатки.ДляХозяйственнойДеятельности,
	|	НДСПриобретенийОстатки.Амортизируется
	|	
	|ИТОГИ СУММА(ОтрицательнаяБазаНДС), СУММА(ПоложительнаяБазаНДС), СУММА(ОтрицательныйНДС), СУММА(ПоложительныйНДС) 
	| ПО ДоговорКонтрагента, Сделка, ВозвратнаяТара, СобытиеНДС, СтавкаНДС";

					
	СписокСобытий = Новый СписокЗначений();
	СписокСобытий.Добавить(Перечисления.СобытияОжидаемыйИПодтвержденныйНДСПриобретений.Возврат);
	СписокСобытий.Добавить(Перечисления.СобытияОжидаемыйИПодтвержденныйНДСПриобретений.Поступление);
	Запрос.УстановитьПараметр("СписокСобытий",СписокСобытий);
	Запрос.УстановитьПараметр("МоментДок",ПолучитьПериодЗаполненияНаСервере());
	Запрос.УстановитьПараметр("Организация",Объект.Организация);
	
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока Выборка.Следующий() Цикл
		Выборка2 = Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока Выборка2.Следующий() Цикл
			Выборка3= Выборка2.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока Выборка3.Следующий() Цикл
				Выборка4= Выборка3.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				Пока Выборка4.Следующий() Цикл
					
					Выборка5= Выборка4.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
					Пока Выборка5.Следующий() Цикл
					
						// Нам нужна последняя группировка и детальные записи
						
						ВыборкаДетали = Выборка5.Выбрать();
						Пока ВыборкаДетали.Следующий() Цикл
						
							Если НЕ ВыборкаДетали.ПоложительнаяБазаНДС = 0 Тогда
								
								// нужно уменьшение (есть остаток ожидаемого НДС) 
								
								ТабличнаяЧасть = Объект.ПриобретенияОжидаемый;
									
										// остаток суммы нужно отнести как "еще не полученные"
										СтрокаТЧ = ТабличнаяЧасть.Добавить();
										
										СтрокаТЧ.ДоговорКонтрагента = ВыборкаДетали.ДоговорКонтрагента;
										СтрокаТЧ.Контрагент 		= ВыборкаДетали.Контрагент;
										СтрокаТЧ.ВозвратнаяТара		= ВыборкаДетали.ВозвратнаяТара;
										СтрокаТЧ.СобытиеНДС			= ВыборкаДетали.СобытиеНДС;
										СтрокаТЧ.СтавкаНДС			= ВыборкаДетали.СтавкаНДС;
										
										СтрокаТЧ.ДляОперацийОблагаемыхНДС		= ?(ВыборкаДетали.ВидДеятельностиНДС = Перечисления.ВидыДеятельностиНДС.Облагаемая, Истина, Ложь);
										СтрокаТЧ.Сделка			 		= ВыборкаДетали.Сделка;
										ЗаполнитьСчетУчетаНДСПриобретения(СтрокаТЧ, ДанныеОбъекта, Ложь);
										СтрокаТЧ.ДляХозяйственнойДеятельности	= ВыборкаДетали.ДляХозяйственнойДеятельности;
										СтрокаТЧ.Амортизируется	= ВыборкаДетали.Амортизируется;
										
										СтрокаТЧ.БазаНДС 					= ВыборкаДетали.ПоложительнаяБазаНДС;
										СтрокаТЧ.СуммаНДС					= ВыборкаДетали.ПоложительныйНДС;
										
										СтрокаТЧ.ВидОстатка					= Перечисления.ВидыОстатковНДСПриобретенийОжидаемый.ЕщеНеПолучены;
										
							КонецЕсли; 
						КонецЦикла; 
					КонецЦикла; 
				КонецЦикла; 
			КонецЦикла; 
		КонецЦикла; 
	КонецЦикла; 
	
	ЗаполнитьДобавленныеКолонкиТаблиц();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТабличнойЧастиПриобретенияОбщее

&НаСервереБезКонтекста
Процедура ЗаполнитьСчетУчетаНДСПриобретения(ДанныеСтроки, ДанныеОбъекта, ЗаполнятьСтавкуНДС = Истина)

	СчетаУчета 					= БухгалтерскийУчетРасчетовСКонтрагентами.ПолучитьСчетаРасчетовСКонтрагентом(ДанныеОбъекта.Организация, ДанныеСтроки.Контрагент, ДанныеСтроки.ДоговорКонтрагента);
	ДанныеСтроки.СчетУчетаНДС 	=  СчетаУчета.СчетУчетаНДСПриобретений;
	
	Если ЗаполнятьСтавкуНДС Тогда
	
		ДанныеСтроки.СтавкаНДС =  СчетаУчета.СтавкаНДСПриобретений;	
	
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПриобретенияКонтрагентПриИзмененииНаСервере(ДанныеСтроки, ДанныеОбъекта)
	
	БухгалтерскийУчетПереопределяемый.УстановитьДоговорКонтрагента(
		ДанныеСтроки.ДоговорКонтрагента, ДанныеСтроки.Контрагент, ДанныеОбъекта.Организация, 
		ДанныеОбъекта.РазрешенныеВидыДоговоровПриобретения);
	
	ПриобретенияДоговорКонтрагентаПриИзмененииНаСервере(ДанныеСтроки, ДанныеОбъекта);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПриобретенияДоговорКонтрагентаПриИзмененииНаСервере(ДанныеСтроки, ДанныеОбъекта)
	
	ДанныеСтроки.ВалютаВзаиморасчетов = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеСтроки.ДоговорКонтрагента, "ВалютаВзаиморасчетов");
	ДанныеСтроки.Сделка = Неопределено;
	ЗаполнитьСчетУчетаНДСПриобретения(ДанныеСтроки, ДанныеОбъекта);
	РассчитатьСуммуНДСВСтрокеТабЧасти(ДанныеСтроки);
	
КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиСобытийТабличнойЧастиПриобретенияПодтвержденный

&НаКлиенте
Процедура ПриобретенияПодтвержденныйКонтрагентПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ПриобретенияПодтвержденный.ТекущиеДанные;
	
	ДанныеСтроки = ДанныеСтроки(СтрокаТабличнойЧасти);
	
	ПриобретенияКонтрагентПриИзмененииНаСервере(ДанныеСтроки, ДанныеОбъекта());
	
	ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ДанныеСтроки);

КонецПроцедуры

&НаКлиенте
Процедура ПриобретенияПодтвержденныйДоговорКонтрагентаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ПриобретенияПодтвержденный.ТекущиеДанные;
	
	ДанныеСтроки = ДанныеСтроки(СтрокаТабличнойЧасти);
	
	ПриобретенияДоговорКонтрагентаПриИзмененииНаСервере(ДанныеСтроки, ДанныеОбъекта());
	
	ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ДанныеСтроки);

КонецПроцедуры

&НаКлиенте
Процедура ПриобретенияПодтвержденныйСделкаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Элементы.ПриобретенияПодтвержденный.ТекущиеДанные;

	ПараметрыОбъекта = Новый Структура;
	ПараметрыОбъекта.Вставить("Дата"                 , Объект.Дата);
	ПараметрыОбъекта.Вставить("ДоговорКонтрагента"   , ТекущиеДанные.ДоговорКонтрагента);
	ПараметрыОбъекта.Вставить("Контрагент"           , ТекущиеДанные.Контрагент);
	ПараметрыОбъекта.Вставить("СчетУчета"            , Неопределено);
	ПараметрыОбъекта.Вставить("Организация"          , Объект.Организация);
	ПараметрыОбъекта.Вставить("ОстаткиОбороты"       , "Дт");
	ПараметрыОбъекта.Вставить("ТипыДокументов"       , "Метаданные.Документы.КорректировкаОжидаемогоИПодтвержденногоНДС.ТабличныеЧасти.ПриобретенияПодтвержденный.Реквизиты.Сделка.Тип");

	ПараметрыФормы = Новый Структура("ПараметрыОбъекта", ПараметрыОбъекта);
	ОткрытьФорму("Документ.ДокументРасчетовСКонтрагентом.ФормаВыбора", ПараметрыФормы, Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ПриобретенияПодтвержденныйСтавкаНДСПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ПриобретенияПодтвержденный.ТекущиеДанные;
	
	ДанныеСтроки = ДанныеСтроки(СтрокаТабличнойЧасти);
	
	РассчитатьСуммуНДСВСтрокеТабЧасти(ДанныеСтроки);
	
	ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ДанныеСтроки);

КонецПроцедуры

&НаКлиенте
Процедура ПриобретенияПодтвержденныйБазаНДСПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ПриобретенияПодтвержденный.ТекущиеДанные;
	
	ДанныеСтроки = ДанныеСтроки(СтрокаТабличнойЧасти);
	
	РассчитатьСуммуНДСВСтрокеТабЧасти(ДанныеСтроки);
	
	ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ДанныеСтроки);

КонецПроцедуры	

#КонецОбласти 

#Область ОбработчикиСобытийТабличнойЧастиПриобретенияОжидаемый

&НаКлиенте
Процедура ПриобретенияОжидаемыйКонтрагентПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ПриобретенияОжидаемый.ТекущиеДанные;
	
	ДанныеСтроки = ДанныеСтроки(СтрокаТабличнойЧасти);
	
	ПриобретенияКонтрагентПриИзмененииНаСервере(ДанныеСтроки, ДанныеОбъекта());
	
	ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ДанныеСтроки);

КонецПроцедуры

&НаКлиенте
Процедура ПриобретенияОжидаемыйДоговорКонтрагентаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ПриобретенияОжидаемый.ТекущиеДанные;
	
	ДанныеСтроки = ДанныеСтроки(СтрокаТабличнойЧасти);
	
	ПриобретенияДоговорКонтрагентаПриИзмененииНаСервере(ДанныеСтроки, ДанныеОбъекта());
	
	ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ДанныеСтроки);

КонецПроцедуры

&НаКлиенте
Процедура ПриобретенияОжидаемыйСделкаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Элементы.ПриобретенияОжидаемый.ТекущиеДанные;

	ПараметрыОбъекта = Новый Структура;
	ПараметрыОбъекта.Вставить("Дата"                 , Объект.Дата);
	ПараметрыОбъекта.Вставить("ДоговорКонтрагента"   , ТекущиеДанные.ДоговорКонтрагента);
	ПараметрыОбъекта.Вставить("Контрагент"           , ТекущиеДанные.Контрагент);
	ПараметрыОбъекта.Вставить("СчетУчета"            , Неопределено);
	ПараметрыОбъекта.Вставить("Организация"          , Объект.Организация);
	ПараметрыОбъекта.Вставить("ОстаткиОбороты"       , "Дт");
	ПараметрыОбъекта.Вставить("ТипыДокументов"       , "Метаданные.Документы.КорректировкаОжидаемогоИПодтвержденногоНДС.ТабличныеЧасти.ПриобретенияПодтвержденный.Реквизиты.Сделка.Тип");

	ПараметрыФормы = Новый Структура("ПараметрыОбъекта", ПараметрыОбъекта);
	ОткрытьФорму("Документ.ДокументРасчетовСКонтрагентом.ФормаВыбора", ПараметрыФормы, Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ПриобретенияОжидаемыйСтавкаНДСПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ПриобретенияОжидаемый.ТекущиеДанные;
	
	ДанныеСтроки = ДанныеСтроки(СтрокаТабличнойЧасти);
	
	РассчитатьСуммуНДСВСтрокеТабЧасти(ДанныеСтроки);
	
	ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ДанныеСтроки);

КонецПроцедуры

&НаКлиенте
Процедура ПриобретенияОжидаемыйБазаНДСПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ПриобретенияОжидаемый.ТекущиеДанные;
	
	ДанныеСтроки = ДанныеСтроки(СтрокаТабличнойЧасти);
	
	РассчитатьСуммуНДСВСтрокеТабЧасти(ДанныеСтроки);
	
	ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ДанныеСтроки);

КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиСобытийТабличнойЧастиПродажиОбщее

&НаСервереБезКонтекста
Процедура ЗаполнитьСчетУчетаНДСПродажи(ДанныеСтроки, ДанныеОбъекта, ЗаполнятьСтавкуНДС = Истина)

	СчетаУчета 					= БухгалтерскийУчетРасчетовСКонтрагентами.ПолучитьСчетаРасчетовСКонтрагентом(ДанныеОбъекта.Организация, ДанныеСтроки.Контрагент, ДанныеСтроки.ДоговорКонтрагента);
	ДанныеСтроки.СчетУчетаНДС 	=  СчетаУчета.СчетУчетаНДСПродаж;

    Если ЗаполнятьСтавкуНДС Тогда
	
		ДанныеСтроки.СтавкаНДС =  СчетаУчета.СтавкаНДСПродаж;	
	
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПродажиКонтрагентПриИзмененииНаСервере(ДанныеСтроки, ДанныеОбъекта)
	
	БухгалтерскийУчетПереопределяемый.УстановитьДоговорКонтрагента(
		ДанныеСтроки.ДоговорКонтрагента, ДанныеСтроки.Контрагент, ДанныеОбъекта.Организация, 
		ДанныеОбъекта.РазрешенныеВидыДоговоровПродажи);
	
	ПриобретенияДоговорКонтрагентаПриИзмененииНаСервере(ДанныеСтроки, ДанныеОбъекта);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПродажиДоговорКонтрагентаПриИзмененииНаСервере(ДанныеСтроки, ДанныеОбъекта)
	
	ДанныеСтроки.ВалютаВзаиморасчетов = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеСтроки.ДоговорКонтрагента, "ВалютаВзаиморасчетов");
	ДанныеСтроки.Сделка = Неопределено;
	ЗаполнитьСчетУчетаНДСПродажи(ДанныеСтроки, ДанныеОбъекта);
	РассчитатьСуммуНДСВСтрокеТабЧасти(ДанныеСтроки);
	
КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиСобытийТабличнойЧастиПродажиПодтвержденный

&НаКлиенте
Процедура ПродажиПодтвержденныйКонтрагентПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ПродажиПодтвержденный.ТекущиеДанные;
	
	ДанныеСтроки = ДанныеСтроки(СтрокаТабличнойЧасти);
	
	ПродажиКонтрагентПриИзмененииНаСервере(ДанныеСтроки, ДанныеОбъекта());
	
	ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ДанныеСтроки);

КонецПроцедуры

&НаКлиенте
Процедура ПродажиПодтвержденныйДоговорКонтрагентаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ПродажиПодтвержденный.ТекущиеДанные;
	
	ДанныеСтроки = ДанныеСтроки(СтрокаТабличнойЧасти);
	
	ПродажиДоговорКонтрагентаПриИзмененииНаСервере(ДанныеСтроки, ДанныеОбъекта());
	
	ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ДанныеСтроки);

КонецПроцедуры

&НаКлиенте
Процедура ПродажиПодтвержденныйСделкаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Элементы.ПродажиПодтвержденный.ТекущиеДанные;

	ПараметрыОбъекта = Новый Структура;
	ПараметрыОбъекта.Вставить("Дата"                 , Объект.Дата);
	ПараметрыОбъекта.Вставить("ДоговорКонтрагента"   , ТекущиеДанные.ДоговорКонтрагента);
	ПараметрыОбъекта.Вставить("Контрагент"           , ТекущиеДанные.Контрагент);
	ПараметрыОбъекта.Вставить("СчетУчета"            , Неопределено);
	ПараметрыОбъекта.Вставить("Организация"          , Объект.Организация);
	ПараметрыОбъекта.Вставить("ОстаткиОбороты"       , "Дт");
	ПараметрыОбъекта.Вставить("ТипыДокументов"       , "Метаданные.Документы.КорректировкаОжидаемогоИПодтвержденногоНДС.ТабличныеЧасти.ПриобретенияПодтвержденный.Реквизиты.Сделка.Тип");

	ПараметрыФормы = Новый Структура("ПараметрыОбъекта", ПараметрыОбъекта);
	ОткрытьФорму("Документ.ДокументРасчетовСКонтрагентом.ФормаВыбора", ПараметрыФормы, Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ПродажиПодтвержденныйСтавкаНДСПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ПродажиПодтвержденный.ТекущиеДанные;
	
	ДанныеСтроки = ДанныеСтроки(СтрокаТабличнойЧасти);
	
	РассчитатьСуммуНДСВСтрокеТабЧасти(ДанныеСтроки);
	
	ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ДанныеСтроки);

КонецПроцедуры

&НаКлиенте
Процедура ПродажиПодтвержденныйБазаНДСПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ПродажиПодтвержденный.ТекущиеДанные;
	
	ДанныеСтроки = ДанныеСтроки(СтрокаТабличнойЧасти);
	
	РассчитатьСуммуНДСВСтрокеТабЧасти(ДанныеСтроки);
	
	ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ДанныеСтроки);

КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиСобытийТабличнойЧастиПродажиОжидаемый

&НаКлиенте
Процедура ПродажиОжидаемыйКонтрагентПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ПродажиОжидаемый.ТекущиеДанные;
	
	ДанныеСтроки = ДанныеСтроки(СтрокаТабличнойЧасти);
	
	ПродажиКонтрагентПриИзмененииНаСервере(ДанныеСтроки, ДанныеОбъекта());
	
	ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ДанныеСтроки);

КонецПроцедуры

&НаКлиенте
Процедура ПродажиОжидаемыйДоговорКонтрагентаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ПродажиОжидаемый.ТекущиеДанные;
	
	ДанныеСтроки = ДанныеСтроки(СтрокаТабличнойЧасти);
	
	ПродажиДоговорКонтрагентаПриИзмененииНаСервере(ДанныеСтроки, ДанныеОбъекта());
	
	ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ДанныеСтроки);

КонецПроцедуры

&НаКлиенте
Процедура ПродажиОжидаемыйСделкаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Элементы.ПродажиОжидаемый.ТекущиеДанные;

	ПараметрыОбъекта = Новый Структура;
	ПараметрыОбъекта.Вставить("Дата"                 , Объект.Дата);
	ПараметрыОбъекта.Вставить("ДоговорКонтрагента"   , ТекущиеДанные.ДоговорКонтрагента);
	ПараметрыОбъекта.Вставить("Контрагент"           , ТекущиеДанные.Контрагент);
	ПараметрыОбъекта.Вставить("СчетУчета"            , Неопределено);
	ПараметрыОбъекта.Вставить("Организация"          , Объект.Организация);
	ПараметрыОбъекта.Вставить("ОстаткиОбороты"       , "Дт");
	ПараметрыОбъекта.Вставить("ТипыДокументов"       , "Метаданные.Документы.КорректировкаОжидаемогоИПодтвержденногоНДС.ТабличныеЧасти.ПриобретенияПодтвержденный.Реквизиты.Сделка.Тип");

	ПараметрыФормы = Новый Структура("ПараметрыОбъекта", ПараметрыОбъекта);
	ОткрытьФорму("Документ.ДокументРасчетовСКонтрагентом.ФормаВыбора", ПараметрыФормы, Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ПродажиОжидаемыйСтавкаНДСПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ПродажиОжидаемый.ТекущиеДанные;
	
	ДанныеСтроки = ДанныеСтроки(СтрокаТабличнойЧасти);
	
	РассчитатьСуммуНДСВСтрокеТабЧасти(ДанныеСтроки);
	
	ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ДанныеСтроки);

КонецПроцедуры

&НаКлиенте
Процедура ПродажиОжидаемыйБазаНДСПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ПродажиОжидаемый.ТекущиеДанные;
	
	ДанныеСтроки = ДанныеСтроки(СтрокаТабличнойЧасти);
	
	РассчитатьСуммуНДСВСтрокеТабЧасти(ДанныеСтроки);
	
	ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ДанныеСтроки);

КонецПроцедуры

#КонецОбласти 

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ПодготовитьФормуНаСервере()
	
	УстановитьФункциональныеОпцииФормы();
	
	УстановитьСостояниеДокумента();

	ИзменитьПараметрыВыбораПолейСубконто(ЭтотОбъект);
	
	// Заполнение реквизитов формы
	ТекущаяДатаДокумента           = Объект.Дата;
	ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	РазрешенныеВидыДоговоровПриобретения = Новый ФиксированныйМассив(Новый Массив);
	Для каждого ПараметрВыбора Из Элементы.ПриобретенияПодтвержденныйДоговорКонтрагента.ПараметрыВыбора Цикл
		Если ПараметрВыбора.Имя = "Отбор.ВидДоговора" Тогда
			РазрешенныеВидыДоговоровПриобретения = ПараметрВыбора.Значение;
		КонецЕсли; 
	КонецЦикла; 
	РазрешенныеВидыДоговоровПродажи = Новый ФиксированныйМассив(Новый Массив);
	Для каждого ПараметрВыбора Из Элементы.ПродажиПодтвержденныйДоговорКонтрагента.ПараметрыВыбора Цикл
		Если ПараметрВыбора.Имя = "Отбор.ВидДоговора" Тогда
			РазрешенныеВидыДоговоровПродажи = ПараметрВыбора.Значение;
		КонецЕсли; 
	КонецЦикла;
	
	Если Объект.ПриобретенияПодтвержденный.Количество()=0 Тогда
		Элементы.ГруппаПриобретенияПодтвержденный.Видимость = Ложь;
	КонецЕсли;	
	Если Объект.ПродажиПодтвержденный.Количество()=0 Тогда
		Элементы.ГруппаПродажиПодтвержденный.Видимость = Ложь;
	КонецЕсли;	
	Если Объект.ПродажиОжидаемый.Количество()=0 Тогда
		Элементы.ГруппаПродажиОжидаемый.Видимость = Ложь;
	КонецЕсли;	
	
	ЗаполнитьДобавленныеКолонкиТаблиц();

	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьФункциональныеОпцииФормы()

	ОбщегоНазначенияБПКлиентСервер.УстановитьПараметрыФункциональныхОпцийФормыДокумента(ЭтотОбъект);
	ПлательщикНалогаНаПрибыльДо2015 = УчетнаяПолитика.ПлательщикНалогаНаПрибыльДо2015(Объект.Организация, Объект.Дата);	
	
КонецПроцедуры 

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Элементы = Форма.Элементы;
	Объект   = Форма.Объект;
	
	ЗаголовкиПолей = Новый Структура("Субконто1, Субконто2, Субконто3",
		"ЗаголовокДоходыСубконто1", "ЗаголовокДоходыСубконто2", "ЗаголовокДоходыСубконто3");
	УстановитьЗаголовкиИДоступностьСубконто(Форма, Объект.СчетУчетаДоходов, "Доходы", "", ЗаголовкиПолей);
	
	ЗаголовкиПолей = Новый Структура("Субконто1, Субконто2, Субконто3",
		"ЗаголовокЗатратыСубконто1", "ЗаголовокЗатратыСубконто2", "ЗаголовокЗатратыСубконто3");
	УстановитьЗаголовкиИДоступностьСубконто(Форма, Объект.СчетУчетаЗатрат, "Затраты", "", ЗаголовкиПолей);
	
	Элементы.НалоговоеНазначениеДоходовИЗатрат.Видимость = Форма.ПлательщикНалогаНаПрибыльДо2015;
	Элементы.ЗаголовокНалоговоеНазначениеДоходовИЗатрат.Видимость = Форма.ПлательщикНалогаНаПрибыльДо2015;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДобавленныеКолонкиТаблиц()

	
	Для Каждого ДанныеСтроки Из Объект.ПриобретенияОжидаемый Цикл

		ДанныеСтроки.ВалютаВзаиморасчетов  = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеСтроки.ДоговорКонтрагента, "ВалютаВзаиморасчетов");
		
	КонецЦикла;
	
	Для Каждого ДанныеСтроки Из Объект.ПриобретенияПодтвержденный Цикл

		ДанныеСтроки.ВалютаВзаиморасчетов  = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеСтроки.ДоговорКонтрагента, "ВалютаВзаиморасчетов");
		
	КонецЦикла; 
	
	Для Каждого ДанныеСтроки Из Объект.ПродажиОжидаемый Цикл

		ДанныеСтроки.ВалютаВзаиморасчетов  = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеСтроки.ДоговорКонтрагента, "ВалютаВзаиморасчетов");
		
	КонецЦикла;
	
	Для Каждого ДанныеСтроки Из Объект.ПродажиПодтвержденный Цикл

		ДанныеСтроки.ВалютаВзаиморасчетов  = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеСтроки.ДоговорКонтрагента, "ВалютаВзаиморасчетов");
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция ДанныеОбъекта()
	
	ДанныеОбъекта  = Новый Структура("Организация, Дата, ВалютаРегламентированногоУчета, 
						|РазрешенныеВидыДоговоровПриобретения, РазрешенныеВидыДоговоровПродажи");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	ДанныеОбъекта.ВалютаРегламентированногоУчета  = ЭтотОбъект.ВалютаРегламентированногоУчета;
	ДанныеОбъекта.РазрешенныеВидыДоговоровПриобретения = ЭтотОбъект.РазрешенныеВидыДоговоровПриобретения;
	ДанныеОбъекта.РазрешенныеВидыДоговоровПродажи = ЭтотОбъект.РазрешенныеВидыДоговоровПродажи;
	
	Возврат ДанныеОбъекта;
	
КонецФункции

&НаКлиенте
Функция ДанныеСтроки(СтрокаТабличнойЧасти)
	
	ДанныеСтроки = Новый Структура("Контрагент, ДоговорКонтрагента, ВалютаВзаиморасчетов,
	|Сделка, ВозвратнаяТара, СобытиеНДС, СтавкаНДС, СчетУчетаНДС, БазаНДС, СуммаНДС");
	                                            
	ЗаполнитьЗначенияСвойств(ДанныеСтроки, СтрокаТабличнойЧасти);
	
	Возврат ДанныеСтроки;
	
КонецФункции

&НаСервере
Процедура УстановитьСостояниеДокумента()
	
	СостояниеДокумента = ОбщегоНазначенияБП.СостояниеДокумента(Объект);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура РассчитатьСуммуНДСВСтрокеТабЧасти(СтрокаТЧ)
	
	СтрокаТЧ.СуммаНДС = УчетНДС.РассчитатьСуммуНДС(СтрокаТЧ.БазаНДС,
														Истина,Ложь,УчетНДС.ПолучитьСтавкуНДС(СтрокаТЧ.СтавкаНДС));
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьЗаголовкиИДоступностьСубконто(Форма, Счет, Префикс = "", Постфикс = "", ЗаголовкиПолей)

	ПоляФормы = Новый Структура("Субконто1, Субконто2, Субконто3",
		Префикс + "Субконто1" + Постфикс,
		Префикс + "Субконто2" + Постфикс,
		Префикс + "Субконто3" + Постфикс);

	БухгалтерскийУчетКлиентСервер.ПриВыбореСчета(Счет, Форма, ПоляФормы, ЗаголовкиПолей, Ложь);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьСписокПараметровВыбораСубконто(Форма, ПараметрыОбъекта, ШаблонИмяПоляОбъекта)

	СписокПараметров = Новый Структура;
	Для Индекс = 1 По 3 Цикл
		ИмяПоля = СтрЗаменить(ШаблонИмяПоляОбъекта, "%Индекс%", Индекс);
		Если ТипЗнч(ПараметрыОбъекта[ИмяПоля]) = Тип("СправочникСсылка.Контрагенты") Тогда
			СписокПараметров.Вставить("Контрагент", ПараметрыОбъекта[ИмяПоля]);
		ИначеЕсли ТипЗнч(ПараметрыОбъекта[ИмяПоля]) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
			СписокПараметров.Вставить("ДоговорКонтрагента", ПараметрыОбъекта[ИмяПоля]);
		ИначеЕсли ТипЗнч(ПараметрыОбъекта[ИмяПоля]) = Тип("СправочникСсылка.Номенклатура") Тогда
			СписокПараметров.Вставить("Номенклатура", ПараметрыОбъекта[ИмяПоля]);
		ИначеЕсли ТипЗнч(ПараметрыОбъекта[ИмяПоля]) = Тип("СправочникСсылка.Склады") Тогда
			СписокПараметров.Вставить("Склад", ПараметрыОбъекта[ИмяПоля]);
		КонецЕсли;
	КонецЦикла;
	СписокПараметров.Вставить("Организация", Форма.Объект.Организация);

	Возврат СписокПараметров;

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ИзменитьПараметрыВыбораПолейСубконто(Форма)

	ПараметрыДокумента = ПолучитьСписокПараметровВыбораСубконто(Форма, Форма.Объект, "ДоходыСубконто%Индекс%");
	БухгалтерскийУчетКлиентСервер.ИзменитьПараметрыВыбораПолейСубконто(Форма, Форма.Объект,
		"ДоходыСубконто%Индекс%",  "ДоходыСубконто%Индекс%", ПараметрыДокумента);
		
	ПараметрыДокумента = ПолучитьСписокПараметровВыбораСубконто(Форма, Форма.Объект, "ЗатратыСубконто%Индекс%");
	БухгалтерскийУчетКлиентСервер.ИзменитьПараметрыВыбораПолейСубконто(Форма, Форма.Объект,
		"ЗатратыСубконто%Индекс%",  "ЗатратыСубконто%Индекс%", ПараметрыДокумента);
		
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ БСП

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти