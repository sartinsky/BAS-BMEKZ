#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

Перем мВалютаРегламентированногоУчета;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТоварам - результат запроса по табличной части "Товары",
//  СтруктураШапкиДокумента   - структура, содержащая рексвизиты шапки документа и результаты запроса по шапке
//
// Возвращаемое значение:
//  Сформированная таблиица значений.
//
Функция ПодготовитьТаблицуПриобретения(РезультатЗапросаПоПриобретениям, СтруктураШапкиДокумента, Подтвержденый )

	ТаблицаПриобретения = РезультатЗапросаПоПриобретениям.Выгрузить();
	
	Для каждого Строка Из ТаблицаПриобретения Цикл
	
		ОпределитьСделкуЛокально(Строка);	
	
	КонецЦикла; 

	// по некотрым строкам не движений не предполагется вовсе, их можно удалить заранее
	СтруктураПоиска = Новый Структура;
	// по этим видам остатков не нужны корректировки
	Если Подтвержденый Тогда
		СтруктураПоиска.Вставить("ВидОстатка",Перечисления.ВидыОстатковНДСПриобретенийПодтвержденный.ПолученыЗаранее);
	Иначе	
		СтруктураПоиска.Вставить("ВидОстатка",Перечисления.ВидыОстатковНДСПриобретенийОжидаемый.ЕщеНеПолучены);
	КонецЕсли; 
	
	НайденныеСтроки = ТаблицаПриобретения.НайтиСтроки(СтруктураПоиска);
	Для каждого Строка Из НайденныеСтроки Цикл
		ТаблицаПриобретения.Удалить(Строка);
	КонецЦикла; 
	
	ТаблицаПриобретения.Колонки.Добавить("НДСКредит"	, ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповЧисла(15,3));
	ТаблицаПриобретения.Колонки.Добавить("ВидДеятельностиНДС", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыДеятельностиНДС"));

	Для каждого СтрокаТаблицы Из ТаблицаПриобретения Цикл
		
		// проверим, есть ли право на налоговый кредит
		Если (СтрокаТаблицы.ДляХозяйственнойДеятельности И СтрокаТаблицы.ДляОперацийОблагаемыхНДС) Тогда
			СтрокаТаблицы.НДСКредит = СтрокаТаблицы.СуммаНДС;
		Иначе
			СтрокаТаблицы.НДСКредит		= 0;
		КонецЕсли;
		
		Если Подтвержденый Тогда
			// увеличение на самом деле отражается в регистре как расход с минусом
			
			СтрокаТаблицы.БазаНДС 				  = - СтрокаТаблицы.БазаНДС;
			СтрокаТаблицы.СуммаНДС				  = - СтрокаТаблицы.СуммаНДС;
			
			СтрокаТаблицы.НДСКредит				  = - СтрокаТаблицы.НДСКредит;
			
		КонецЕсли; 
		
		Если СтрокаТаблицы.ДляОперацийОблагаемыхНДС Тогда
			СтрокаТаблицы.ВидДеятельностиНДС = Перечисления.ВидыДеятельностиНДС.Облагаемая;	
		Иначе	
			СтрокаТаблицы.ВидДеятельностиНДС = Перечисления.ВидыДеятельностиНДС.Необлагаемая;				
		КонецЕсли

	КонецЦикла;

	Возврат ТаблицаПриобретения;

КонецФункции // ПодготовитьТаблицуПриобретения()

Функция ПодготовитьТаблицуПродажи(РезультатЗапросаПоПродажам, СтруктураШапкиДокумента, Подтвержденный)

	ТаблицаПродажи = РезультатЗапросаПоПродажам.Выгрузить();
	
	Для каждого Строка Из ТаблицаПродажи Цикл
	
		ОпределитьСделкуЛокально(Строка);	
	
	КонецЦикла; 
	
	// по некотрым строкам не движений не предполагется вовсе, их можно удалить заранее
	СтруктураПоиска = Новый Структура;
	// по этим видам остатков не нужны корректировки
	Если Подтвержденный Тогда
		СтруктураПоиска.Вставить("ВидОстатка",Перечисления.ВидыОстатковНДСПродажПодтвержденный.ВыписаныЗаранее);
	Иначе	
		СтруктураПоиска.Вставить("ВидОстатка",Перечисления.ВидыОстатковНДСПродажОжидаемый.ЕщеНеВыписаны);
	КонецЕсли; 
	
	НайденныеСтроки = ТаблицаПродажи.НайтиСтроки(СтруктураПоиска);
	Для каждого Строка Из НайденныеСтроки Цикл
		ТаблицаПродажи.Удалить(Строка);
	КонецЦикла; 
	
	Для каждого СтрокаТаблицы Из ТаблицаПродажи Цикл
		Если Подтвержденный Тогда
			// увеличение на самом деле отражается в регистре как расход с минусом
			
			СтрокаТаблицы.БазаНДС 				  = - СтрокаТаблицы.БазаНДС;
			СтрокаТаблицы.СуммаНДС		  		  = - СтрокаТаблицы.СуммаНДС;
		
		КонецЕсли; 
	КонецЦикла;

	Возврат ТаблицаПродажи;

КонецФункции // ПодготовитьТаблицуПродажи()


// По результату запроса по шапке документа формируем движения по регистрам.
//
// Параметры: 
//  РежимПроведения           - режим проведения документа (оперативный или неоперативный),
//  СтруктураШапкиДокумента   - структура, содержащая рексвизиты шапки документа и результаты запроса по шапке
//  ТаблицаПоПриобретениям    - таблица значений, содержащая данные для проведения и проверки ТЧ Приобретения
//  ТаблицаПоПродажам         - таблица значений, содержащая данные для проведения и проверки ТЧ Продажи,
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, 
	                          ТаблицаПриобретенияПодтвержденный, ТаблицаПриобретенияОжидаемый,  
							  ТаблицаПродажиПодтвержденный, ТаблицаПродажиОжидаемый, Отказ, Заголовок)
							  
	ДвиженияПоРегистрамПриобретения(РежимПроведения, СтруктураШапкиДокумента, 
	                          ТаблицаПриобретенияПодтвержденный, ТаблицаПриобретенияОжидаемый, Отказ, Заголовок);
							  
	ДвиженияПоРегистрамПродажи(РежимПроведения, СтруктураШапкиДокумента, 
							  ТаблицаПродажиПодтвержденный, ТаблицаПродажиОжидаемый, Отказ, Заголовок);
	
КонецПроцедуры // ДвиженияПоРегистрам()

Процедура ДвиженияПоДоходамИЗатратам(СтруктураШапкиДокумента, СтрокаТаблицы, СуммаНДС)

	ПроводкиБУ = Движения.Хозрасчетный;
	
	Если СуммаНДС = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если СуммаНДС< 0 Тогда
	
		// на доходы
		
		Проводка = ПроводкиБУ.Добавить();
	
		Проводка.Период                     = СтруктураШапкиДокумента.Дата;
		Проводка.Активность                 = Истина;
		Проводка.Организация                = СтруктураШапкиДокумента.Организация;
		
		Проводка.Сумма                      = -СуммаНДС;
		
		Проводка.СчетДт						= СтрокаТаблицы.СчетУчетаНДС;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1 , СтрокаТаблицы.Контрагент);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2 , СтрокаТаблицы.ДоговорКонтрагента);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ДокументыРасчетовСКонтрагентами", СтрокаТаблицы.Сделка);		
		
		Проводка.СчетКт						= СтруктураШапкиДокумента.СчетУчетаДоходов;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1 , СтруктураШапкиДокумента.ДоходыСубконто1);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2 , СтруктураШапкиДокумента.ДоходыСубконто2);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3 , СтруктураШапкиДокумента.ДоходыСубконто3);
		
		Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыльДо2015 Тогда
			Проводка.НалоговоеНазначениеКт = СтруктураШапкиДокумента.НалоговоеНазначениеДоходовИЗатрат;
			Если НЕ СтруктураШапкиДокумента.НалоговоеНазначениеДоходовИЗатрат = Справочники.НалоговыеНазначенияАктивовИЗатрат.НКУ_НеХозДеятельность Тогда
				Проводка.СуммаНУКт = -СуммаНДС;
			КонецЕсли;
		КонецЕсли;
		
		Проводка.Содержание					= НСтр("ru='Отнесение корректировок на доходы';uk='Віднесення коригування на доходи'",Локализация.КодЯзыкаИнформационнойБазы());
		
	Иначе
		
		// на затраты
		
		Проводка = ПроводкиБУ.Добавить();
	
		Проводка.Период                     = СтруктураШапкиДокумента.Дата;
		Проводка.Активность                 = Истина;
		Проводка.Организация                = СтруктураШапкиДокумента.Организация;
		
		Проводка.Сумма                      = СуммаНДС;
		
		Проводка.СчетДт						= СтруктураШапкиДокумента.СчетУчетаЗатрат;
		
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1 , СтруктураШапкиДокумента.ЗатратыСубконто1);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2 , СтруктураШапкиДокумента.ЗатратыСубконто2);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3 , СтруктураШапкиДокумента.ЗатратыСубконто3);
		
		Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыльДо2015 Тогда
			Проводка.НалоговоеНазначениеДт = СтруктураШапкиДокумента.НалоговоеНазначениеДоходовИЗатрат;
			Если НЕ СтруктураШапкиДокумента.НалоговоеНазначениеДоходовИЗатрат = Справочники.НалоговыеНазначенияАктивовИЗатрат.НКУ_НеХозДеятельность Тогда
				Проводка.СуммаНУДт = СуммаНДС;
			КонецЕсли;
		КонецЕсли;
		
		Проводка.СчетКт						= СтрокаТаблицы.СчетУчетаНДС;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1 , СтрокаТаблицы.Контрагент);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2 , СтрокаТаблицы.ДоговорКонтрагента);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ДокументыРасчетовСКонтрагентами", СтрокаТаблицы.Сделка);		
		
		Проводка.Содержание					= НСтр("ru='Отнесение корректировок на расходы';uk='Віднесення коригування на витрати'",Локализация.КодЯзыкаИнформационнойБазы());
		
	КонецЕсли; 

КонецПроцедуры
 
Процедура ДвиженияПоРегистрамПриобретения(РежимПроведения, СтруктураШапкиДокумента, 
	                          ТаблицаПриобретенияПодтвержденный, ТаблицаПриобретенияОжидаемый, Отказ, Заголовок);

  	ПроводкиБУ = Движения.Хозрасчетный;
	
	ВсегоКорректировкаНДСКредит = 0;
	
	// Проводки по изменению налогового кредита
	ТаблицаКопияПодтвержденный = ТаблицаПриобретенияПодтвержденный.Скопировать();
	ТаблицаКопияПодтвержденный.Свернуть("ВидОстатка,СчетУчетаНДС,СобытиеНДС,Контрагент,ДоговорКонтрагента,Сделка","НДСКредит");
	
	Для Каждого СтрокаТаблицыПодтвержденный Из ТаблицаКопияПодтвержденный Цикл
		
		// тут суммы отрицательные 
		
		ПроводкаНДСКредит = СтрокаТаблицыПодтвержденный.НДСКредит;
		
		Если СтрокаТаблицыПодтвержденный.СобытиеНДС = Перечисления.СобытияОжидаемыйИПодтвержденныйНДСПриобретений.Возврат Тогда
			ПроводкаНДСКредит = - ПроводкаНДСКредит;
		КонецЕсли; 
		
		Если ПроводкаНДСКредит = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		// делаем "сторно" налогового кредита 
		ВсегоКорректировкаНДСКредит = ВсегоКорректировкаНДСКредит + ПроводкаНДСКредит;
		
		Проводка = ПроводкиБУ.Добавить();

		Проводка.Период                     = СтруктураШапкиДокумента.Дата;
		Проводка.Активность                 = Истина;
		Проводка.Организация                = СтруктураШапкиДокумента.Организация;
		Проводка.Сумма                      = ПроводкаНДСКредит;
		Проводка.Содержание                 = НСтр("ru='НДС кредит, корректировка по неправильному оформлению';uk='ПДВ кредит, коригування по неправильному оформленню'",Локализация.КодЯзыкаИнформационнойБазы());
		Проводка.НомерЖурнала               = "";

		Проводка.СчетДт = СтруктураШапкиДокумента.СчетУчетаКорректировкиНДСКредит;
	
		Проводка.СчетКт                     = СтрокаТаблицыПодтвержденный.СчетУчетаНДС;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Контрагенты", СтрокаТаблицыПодтвержденный.Контрагент);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Договоры"   , СтрокаТаблицыПодтвержденный.ДоговорКонтрагента);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ДокументыРасчетовСКонтрагентами", СтрокаТаблицыПодтвержденный.Сделка);
			
	КонецЦикла;
	
	ТаблицаКопияОжидаемый = ТаблицаПриобретенияОжидаемый.Скопировать();
	ТаблицаКопияОжидаемый.Свернуть("ВидОстатка,СчетУчетаНДС,СобытиеНДС,Контрагент,ДоговорКонтрагента,Сделка","НДСКредит");
	
	Для Каждого СтрокаТаблицыОжидаемый Из ТаблицаКопияОжидаемый Цикл
		
		ПроводкаНДСКредит = СтрокаТаблицыОжидаемый.НДСКредит;
		
		Если СтрокаТаблицыОжидаемый.СобытиеНДС = Перечисления.СобытияОжидаемыйИПодтвержденныйНДСПриобретений.Возврат Тогда
			ПроводкаНДСКредит = - ПроводкаНДСКредит;
		КонецЕсли; 
		
		Если ПроводкаНДСКредит = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрокаТаблицыОжидаемый.ВидОстатка = Перечисления.ВидыОстатковНДСПриобретенийОжидаемый.ПравильнаяРегистрация Тогда
			
			ВсегоКорректировкаНДСКредит = ВсегоКорректировкаНДСКредит + ПроводкаНДСКредит;
			
			Проводка = ПроводкиБУ.Добавить();

			Проводка.Период                     = СтруктураШапкиДокумента.Дата;
			Проводка.Активность                 = Истина;
			Проводка.Организация                = СтруктураШапкиДокумента.Организация;
			Проводка.Сумма                      = ПроводкаНДСКредит;
			Проводка.Содержание                 = НСтр("ru='НДС кредит, корректировка';uk='ПДВ кредит, коригування'",Локализация.КодЯзыкаИнформационнойБазы());
			Проводка.НомерЖурнала               = "";

			Проводка.СчетДт = СтруктураШапкиДокумента.СчетУчетаКорректировкиНДСКредит;

			Проводка.СчетКт                     = СтрокаТаблицыОжидаемый.СчетУчетаНДС;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Контрагенты", СтрокаТаблицыОжидаемый.Контрагент);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Договоры"   , СтрокаТаблицыОжидаемый.ДоговорКонтрагента);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ДокументыРасчетовСКонтрагентами", СтрокаТаблицыОжидаемый.Сделка);
			
		ИначеЕсли СтрокаТаблицыОжидаемый.ВидОстатка = Перечисления.ВидыОстатковНДСПриобретенийОжидаемый.НеБудутПолучены  Тогда
			
			ДвиженияПоДоходамИЗатратам(СтруктураШапкиДокумента, СтрокаТаблицыОжидаемый, ПроводкаНДСКредит);
			
		КонецЕсли;

	КонецЦикла;
	
	// откорректируем регистр НДСПриобретений
	НаборДвижений = Движения.ОжидаемыйИПодтвержденныйНДСПриобретений;
	
	// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
	ТаблицаДвижений = НаборДвижений.ВыгрузитьКолонки();
	
	ТаблицаКопияПодтвержденный = ТаблицаПриобретенияПодтвержденный.Скопировать();
	ТаблицаКопияПодтвержденный.Свернуть("ВидОстатка,ДоговорКонтрагента,Сделка,СобытиеНДС,СтавкаНДС,ДляХозяйственнойДеятельности,ВидДеятельностиНДС,Амортизируется,ВозвратнаяТара", "БазаНДС,СуммаНДС");
	ОбщегоНазначенияБПВызовСервера.ЗагрузитьВТаблицуЗначений(ТаблицаКопияПодтвержденный, ТаблицаДвижений);
	
	ТаблицаКопияОжидаемый = ТаблицаПриобретенияОжидаемый.Скопировать();
	ТаблицаКопияОжидаемый.Свернуть("ВидОстатка,ДоговорКонтрагента,Сделка,СобытиеНДС,СтавкаНДС,ДляХозяйственнойДеятельности,ВидДеятельностиНДС,Амортизируется,ВозвратнаяТара", "БазаНДС,СуммаНДС");
	ОбщегоНазначенияБПВызовСервера.ЗагрузитьВТаблицуЗначений(ТаблицаКопияОжидаемый, ТаблицаДвижений);
	
	ТаблицаДвижений.ЗаполнитьЗначения(Организация       , "Организация");
	ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.КодыОперацийОжидаемыйИПодтвержденныйНДСПриобретений.КорректировкаНеправильноОформленныхНалоговыхДокументов,  "КодОперации");
	
	Если НЕ Отказ И ТаблицаДвижений.Количество() > 0 Тогда
		
		НаборДвижений.мПериод          = Дата;
		НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;
		
		Движения.ОжидаемыйИПодтвержденныйНДСПриобретений.ВыполнитьРасход();
	
	КонецЕсли;
	
КонецПроцедуры // ДвиженияПоРегистрамПриобретения()

Процедура ДвиженияПоРегистрамПродажи(РежимПроведения, СтруктураШапкиДокумента, 
	                           ТаблицаПродажиПодтвержденный, ТаблицаПродажиОжидаемый, Отказ, Заголовок);
							   
	// откорректируем регистр НДСпродаж
	НаборДвижений = Движения.ОжидаемыйИПодтвержденныйНДСПродаж;
	
	// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
	ТаблицаДвижений = НаборДвижений.ВыгрузитьКолонки();
	
	// ТОВАРЫ
	ТаблицаКопияПодтвержденный = ТаблицаПродажиПодтвержденный.Скопировать();
	ТаблицаКопияПодтвержденный.Свернуть("ДоговорКонтрагента,Сделка,СобытиеНДС,СтавкаНДС,ВозвратнаяТара", "БазаНДС,СуммаНДС");
	
	ТаблицаКопияОжидаемый = ТаблицаПродажиОжидаемый.Скопировать();
	ТаблицаКопияОжидаемый.Свернуть("ДоговорКонтрагента,Сделка,СобытиеНДС,СтавкаНДС,ВозвратнаяТара", "БазаНДС,СуммаНДС");
	
	ОбщегоНазначенияБПВызовСервера.ЗагрузитьВТаблицуЗначений(ТаблицаКопияПодтвержденный, ТаблицаДвижений);
	ОбщегоНазначенияБПВызовСервера.ЗагрузитьВТаблицуЗначений(ТаблицаКопияОжидаемый		, ТаблицаДвижений);
	
	ТаблицаДвижений.ЗаполнитьЗначения(Организация       , "Организация");
	
	ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.КодыОперацийОжидаемыйИПодтвержденныйНДСПродаж.КорректировкаНеправильноОформленныхНалоговыхДокументов,  "КодОперации");
	
	Если НЕ Отказ И ТаблицаДвижений.Количество() > 0 Тогда
		
		НаборДвижений.мПериод          = Дата;
		НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;
		
		Движения.ОжидаемыйИПодтвержденныйНДСПродаж.ВыполнитьРасход();
	
	КонецЕсли;
	
	// Проводки по изменению счета учета НДС
	
	ПроводкиБУ = Движения.Хозрасчетный;
	
	ТаблицаКопияПодтвержденный = ТаблицаПродажиПодтвержденный.Скопировать();
	ТаблицаКопияПодтвержденный.Свернуть("СчетУчетаНДС,СобытиеНДС,Контрагент,ДоговорКонтрагента,Сделка","СуммаНДС");
	
	Для Каждого СтрокаТаблицыПодтвержденный Из ТаблицаКопияПодтвержденный Цикл
		
		// тут суммы отрицательные 
		СуммаНДС = СтрокаТаблицыПодтвержденный.СуммаНДС;
		
		Если СтрокаТаблицыПодтвержденный.СобытиеНДС = Перечисления.СобытияОжидаемыйИПодтвержденныйНДСПродаж.Возврат Тогда
			СуммаНДС = - СуммаНДС;
		КонецЕсли; 
		
		Если СуммаНДС = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Проводка = ПроводкиБУ.Добавить();

		Проводка.Период                     = СтруктураШапкиДокумента.Дата;
		Проводка.Активность                 = Истина;
		Проводка.Организация                = СтруктураШапкиДокумента.Организация;
		Проводка.Сумма                      = СуммаНДС;
		Проводка.Содержание                 = НСтр("ru='НДС обязательства, корректировка по неправильному оформлению';uk=""ПДВ зобов'язання, коригування по неправильному оформленню""",Локализация.КодЯзыкаИнформационнойБазы());
		Проводка.НомерЖурнала               = "";

		Проводка.СчетДт                     = СтрокаТаблицыПодтвержденный.СчетУчетаНДС;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты", СтрокаТаблицыПодтвержденный.Контрагент);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Договоры"   , СтрокаТаблицыПодтвержденный.ДоговорКонтрагента);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ДокументыРасчетовСКонтрагентами", СтрокаТаблицыПодтвержденный.Сделка);
		
		Проводка.СчетКт                     = СтруктураШапкиДокумента.СчетУчетаНДС;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, СтруктураШапкиДокумента.НДССубконто1);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, СтруктураШапкиДокумента.НДССубконто2);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3, СтруктураШапкиДокумента.НДССубконто3);

			
	КонецЦикла;
	
	ТаблицаКопияОжидаемый = ТаблицаПродажиОжидаемый.Скопировать();
	ТаблицаКопияОжидаемый.Свернуть("СчетУчетаНДС,СобытиеНДС,Контрагент,ДоговорКонтрагента,Сделка","СуммаНДС");
	
	Для Каждого СтрокаТаблицыОжидаемый Из ТаблицаКопияОжидаемый Цикл
		
		СуммаНДС = СтрокаТаблицыОжидаемый.СуммаНДС;
		
		Если СтрокаТаблицыОжидаемый.СобытиеНДС = Перечисления.СобытияОжидаемыйИПодтвержденныйНДСПродаж.Возврат Тогда
			СуммаНДС = - СуммаНДС;
		КонецЕсли; 
		
		Если СуммаНДС = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Проводка = ПроводкиБУ.Добавить();

		Проводка.Период                     = СтруктураШапкиДокумента.Дата;
		Проводка.Активность                 = Истина;
		Проводка.Организация                = СтруктураШапкиДокумента.Организация;
		Проводка.Сумма                      = СуммаНДС;
		Проводка.Содержание                 = НСтр("ru='НДС обязательства, корректировка';uk=""ПДВ зобов'язання, коригування""",Локализация.КодЯзыкаИнформационнойБазы());
		Проводка.НомерЖурнала               = "";

		Проводка.СчетДт                     = СтрокаТаблицыОжидаемый.СчетУчетаНДС;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты", СтрокаТаблицыОжидаемый.Контрагент);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Договоры"   , СтрокаТаблицыОжидаемый.ДоговорКонтрагента);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ДокументыРасчетовСКонтрагентами", СтрокаТаблицыОжидаемый.Сделка);
		
		Проводка.СчетКт                     = СтруктураШапкиДокумента.СчетУчетаНДС;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, СтруктураШапкиДокумента.НДССубконто1);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, СтруктураШапкиДокумента.НДССубконто2);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3, СтруктураШапкиДокумента.НДССубконто3);
			
	КонецЦикла;
	
КонецПроцедуры // ДвиженияПоРегистрамПродажи()


// Процедура определяет параметры регл. учетной политики
//
Процедура ПодготовитьПараметрыУчетнойПолитикиРегл(СтруктураШапкиДокумента, Отказ, Заголовок)
	
	СтруктураШапкиДокумента.Вставить("ЕстьНалогНаПрибыльДо2015"       , УчетнаяПолитика.ПлательщикНалогаНаПрибыльДо2015(СтруктураШапкиДокумента.Организация, КонецМесяца(СтруктураШапкиДокумента.Дата)));
	СтруктураШапкиДокумента.Вставить("ЕстьНДС"                        , УчетнаяПолитика.ПлательщикНДС(СтруктураШапкиДокумента.Организация, КонецМесяца(СтруктураШапкиДокумента.Дата)));

КонецПроцедуры // ПодготовитьПараметрыУчетнойПолитикиРегл()


// Процедура формирует структуру шапки документа и дополнительных полей.
//
Процедура ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента) Экспорт
	
	// Дерево значений, содержащее имена необходимых полей в запросе по шапке.
	Перем ДеревоПолейЗапросаПоШапке;

	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента = ОбщегоНазначенияРед12.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);

	// Заполним по шапке документа дерево параметров, нужных при проведении.
	ДеревоПолейЗапросаПоШапке = ОбщегоНазначенияРед12.СформироватьДеревоПолейЗапросаПоШапке();
	
	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа
	СтруктураШапкиДокумента = УправлениеЗапасами.СформироватьЗапросПоДеревуПолей(ЭтотОбъект, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета);
	
КонецПроцедуры // ПодготовитьСтруктуруШапкиДокумента()

// Процедура формирует таблицы документа.
//
Процедура ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПриобретенияПодтвержденный, ТаблицаПриобретенияОжидаемый, ТаблицаПродажиПодтвержденный, ТаблицаПродажиОжидаемый, Отказ, Заголовок) Экспорт
	
	// Получим необходимые данные для проведения и проверки заполенения данные по табличной части "ПриобретенияУвеличение".
	СтруктураПолей        = Новый Структура;

	СтруктураПолей.Вставить("Контрагент"                           , "Контрагент");
	СтруктураПолей.Вставить("ДоговорКонтрагента"                   , "ДоговорКонтрагента");
	СтруктураПолей.Вставить("ДоговорОрганизация"                   , "ДоговорКонтрагента.Организация");
	СтруктураПолей.Вставить("ВедениеВзаиморасчетовНУ"              , "ДоговорКонтрагента.ВедениеВзаиморасчетовНУ");
	СтруктураПолей.Вставить("СложныйНалоговыйУчет"                 , "ДоговорКонтрагента.СложныйНалоговыйУчет");
	СтруктураПолей.Вставить("Сделка"                   			   , "Сделка");
	СтруктураПолей.Вставить("ВозвратнаяТара"                       , "ВозвратнаяТара");
	СтруктураПолей.Вставить("СобытиеНДС"                           , "СобытиеНДС");
	СтруктураПолей.Вставить("СтавкаНДС"                  		   , "СтавкаНДС");
	СтруктураПолей.Вставить("ДляХозяйственнойДеятельности"		   , "ДляХозяйственнойДеятельности");
	СтруктураПолей.Вставить("ДляОперацийОблагаемыхНДС"             , "ДляОперацийОблагаемыхНДС");
	СтруктураПолей.Вставить("Амортизируется"             		   , "Амортизируется");
	СтруктураПолей.Вставить("БазаНДС"                          	   , "БазаНДС");
	СтруктураПолей.Вставить("СуммаНДС"	                           , "СуммаНДС");
	СтруктураПолей.Вставить("СчетУчетаНДС"                         , "СчетУчетаНДС");
	СтруктураПолей.Вставить("ВидОстатка"                           , "ВидОстатка");
	
	РезультатЗапросаПриобретенияПодтвержденный 	= ОбщегоНазначенияРед12.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "ПриобретенияПодтвержденный", СтруктураПолей);
	// табличные части с одинаковой структурой
	РезультатЗапросаПриобретенияОжидаемый 		= ОбщегоНазначенияРед12.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "ПриобретенияОжидаемый", СтруктураПолей);
	
	// Получим необходимые данные для проведения и проверки заполенения данные по табличной части "Продажи...".
	СтруктураПолей        = Новый Структура;

	СтруктураПолей.Вставить("Контрагент"                           , "Контрагент");
	СтруктураПолей.Вставить("ДоговорКонтрагента"                   , "ДоговорКонтрагента");
	СтруктураПолей.Вставить("ДоговорОрганизация"                   , "ДоговорКонтрагента.Организация");
	СтруктураПолей.Вставить("ВедениеВзаиморасчетовНУ"              , "ДоговорКонтрагента.ВедениеВзаиморасчетовНУ");
	СтруктураПолей.Вставить("СложныйНалоговыйУчет"                 , "ДоговорКонтрагента.СложныйНалоговыйУчет");
	СтруктураПолей.Вставить("Сделка"                   			   , "Сделка");
	СтруктураПолей.Вставить("ВозвратнаяТара"                       , "ВозвратнаяТара");
	СтруктураПолей.Вставить("СобытиеНДС"                           , "СобытиеНДС");
	СтруктураПолей.Вставить("СтавкаНДС"                  		   , "СтавкаНДС");
	СтруктураПолей.Вставить("СчетУчетаНДС"                         , "СчетУчетаНДС");
	СтруктураПолей.Вставить("БазаНДС"                          	   , "БазаНДС");
	СтруктураПолей.Вставить("СуммаНДС"                             , "СуммаНДС");
	СтруктураПолей.Вставить("ВидОстатка"                           , "ВидОстатка");
	
	РезультатЗапросаПродажиПодтвержденный 	= ОбщегоНазначенияРед12.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "ПродажиПодтвержденный", СтруктураПолей);
	// табличные части с одинаковой структурой
	РезультатЗапросаПродажиОжидаемый 		= ОбщегоНазначенияРед12.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "ПродажиОжидаемый"		, СтруктураПолей);
	
	// Подготовим таблицы для проведения.
	ТаблицаПриобретенияПодтвержденный  	= ПодготовитьТаблицуПриобретения(РезультатЗапросаПриобретенияПодтвержденный	, СтруктураШапкиДокумента, Истина);
	ТаблицаПриобретенияОжидаемый      	= ПодготовитьТаблицуПриобретения(РезультатЗапросаПриобретенияОжидаемый		, СтруктураШапкиДокумента, Ложь	 );
	
	// Подготовим таблицы для проведения.
	ТаблицаПродажиПодтвержденный     	= ПодготовитьТаблицуПродажи(РезультатЗапросаПродажиПодтвержденный	, СтруктураШапкиДокумента, Истина);
	ТаблицаПродажиОжидаемый      		= ПодготовитьТаблицуПродажи(РезультатЗапросаПродажиОжидаемый		, СтруктураШапкиДокумента, Ложь	 );

КонецПроцедуры

Функция ОпределитьСделкуЛокально(Строка) Экспорт
                                     
	Если Строка.ВедениеВзаиморасчетовНУ = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом Тогда
		
		Возврат Неопределено;
		
	Иначе	
		
		Возврат Строка.Сделка;
		
	КонецЕсли;
   
КонецФункции // УправлениеВзаиморасчетами.ОпределитьДокументРасчетовСКонтрагентом()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ


Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	ЗаполнениеДокументов.Заполнить(ЭтотОбъект, ДанныеЗаполнения);
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	Перем Заголовок, СтруктураШапкиДокумента;
	Перем ТаблицаПриобретенияПодтвержденный, ТаблицаПриобретенияОжидаемый, ТаблицаПродажиПодтвержденный, ТаблицаПродажиОжидаемый;

	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначенияБПВызовСервера.ПредставлениеДокументаПриПроведении(Ссылка);
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКПроведению(ЭтотОбъект);
	Если РучнаяКорректировка Тогда
		Возврат;
	КонецЕсли;
	
	ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента);
	
	// Получим данные учетной политики
	ПодготовитьПараметрыУчетнойПолитикиРегл(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	
	ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПриобретенияПодтвержденный, ТаблицаПриобретенияОжидаемый, ТаблицаПродажиПодтвержденный, ТаблицаПродажиОжидаемый, Отказ, Заголовок);
	
	
	// Движения по документу
	Если Не Отказ Тогда
		ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, 
							ТаблицаПриобретенияПодтвержденный, ТаблицаПриобретенияОжидаемый, 
							ТаблицаПродажиПодтвержденный, ТаблицаПродажиОжидаемый, Отказ, Заголовок);
	КонецЕсли;
	
	Движения.Хозрасчетный.ВыполнитьДействияПередЗаписьюДвижений();
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКЗаписиДвижений(ЭтотОбъект);

КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКОтменеПроведения(ЭтотОбъект);
	Движения.Записать();
    
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если Дата < '20080101' Тогда
		Для каждого Строка  Из ПриобретенияПодтвержденный Цикл
			Если Строка.Амортизируется Тогда
				Строка.Амортизируется = Ложь;
			КонецЕсли;
		КонецЦикла;
		
		Для каждого Строка  Из ПриобретенияОжидаемый Цикл
			Если Строка.Амортизируется Тогда
				Строка.Амортизируется = Ложь;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)

	Дата = НачалоДня(ОбщегоНазначенияБП.ПолучитьРабочуюДату());
	Ответственный = Пользователи.ТекущийПользователь();

КонецПроцедуры

мВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
#КонецЕсли

