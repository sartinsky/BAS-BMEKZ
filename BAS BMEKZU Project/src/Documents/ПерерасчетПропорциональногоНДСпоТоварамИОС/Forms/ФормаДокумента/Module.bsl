
#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)

	УстановитьФункциональныеОпцииФормы();
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)

	Если НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДатаДокумента) Тогда
		// Изменение времени не влияет на поведение документа.
		ТекущаяДатаДокумента = Объект.Дата;
		Возврат;
	КонецЕсли;

	ТребуетсяВызовСервера = Истина;

	// Если определили, что изменение даты может повлиять на какие-либо параметры, 
	// то передаем обработку на сервер.
	Если ТребуетсяВызовСервера Тогда
		ДатаПриИзмененииНаСервере();
	КонецЕсли;
	
	// Запомним новую дату документа.
	ТекущаяДатаДокумента = Объект.Дата;

	РасшифровкаОВключенииВДекларацию = НСтр("ru='Данные перерасчета будут включены в декларацию по НДС за ';uk='Результати перерахунку будуть включені до декларації з ПДВ за '") + Формат(Объект.Дата,"ДФ=MM.yyyy");
	
	Объект.ФормироватьДокументУстановкиКоэффициентаНаСледующийГод = (Месяц(Объект.Дата) = 12);
	
	УправлениеФормой(ЭтотОбъект);
	
	УстановитьФильтрТабличныхЧастейОС();
	ЗаполнитьКолонкиПараметрыПерерасчетаОС();	
	
	РассчитатьСуммуКорректировкиПоАктивам();
	
КонецПроцедуры

&НаКлиенте
Процедура СпецРежимНалогообложенияПриИзменении(Элемент)
	
	ЭлементСпискаЗначений = Элемент.СписокВыбора.НайтиПоЗначению(Объект.СпецРежимНалогообложения);
	РасшифровкаСпецРежимНалогообложения = ?(ЭлементСпискаЗначений = Неопределено, "", ЭлементСпискаЗначений.Представление);

КонецПроцедуры

&НаКлиенте
Процедура СчетНДСПриИзменении(Элемент)
	
	
	ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3",
		"СубконтоКт1", "СубконтоКт2", "СубконтоКт3");
	ПоляОбъекта.Вставить("Организация",   Объект.Организация);
	БухгалтерскийУчетКлиентСервер.ПриИзмененииСчета(Объект.СчетНДС, Объект, ПоляОбъекта);
	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма,"СчетНДС");
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура СчетДтПриИзменении(Элемент)
	
	ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3",
		"СубконтоДт1", "СубконтоДт2", "СубконтоДт3");
	ПоляОбъекта.Вставить("Организация",   Объект.Организация);
	БухгалтерскийУчетКлиентСервер.ПриИзмененииСчета(Объект.СчетДт, Объект, ПоляОбъекта);
	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма,"СчетДт");
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоКт1ПриИзменении(Элемент)
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма,"СчетНДС");
КонецПроцедуры

&НаКлиенте
Процедура СубконтоКт2ПриИзменении(Элемент)
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма,"СчетНДС");
КонецПроцедуры

&НаКлиенте
Процедура СубконтоДт1ПриИзменении(Элемент)
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма,"СчетДт");
КонецПроцедуры

&НаКлиенте
Процедура СубконтоДт2ПриИзменении(Элемент)
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма,"СчетДт");
КонецПроцедуры

&НаКлиенте
Процедура СуммаВсехОперацийПриИзменении(Элемент)
	
	ДанныеОбъекта = ДанныеОбъекта();
	РассчитатьКоэффициент(ДанныеОбъекта);
	
	ЗаполнитьЗначенияСвойств(Объект, ДанныеОбъекта);
	
	// Параллельно сделаем пересчет в ТЧ по ОС текущего года и одного года эксплуатации, т.к. в этих строках параметры перерасчета используются из шапки (за текущий год)
	Для Каждого Строка Из Объект.ПараметрыПерерасчетаОС Цикл
	
		Если Год(Объект.Дата) - Год(Строка.ДатаНачалаИспользования) > 1 Тогда
			Продолжить;
		КонецЕсли;
		
		Строка.СуммаВсехОпераций 		= Объект.СуммаВсехОпераций;		
		Строка.СуммаОблагаемыхОпераций 	= Объект.СуммаОблагаемыхОпераций;		
		Строка.Коэффициент 				= Объект.Коэффициент;		
		
		
		ДанныеСтроки = ДанныеСтроки(Строка, "ПараметрыПерерасчетаОС");
		РассчитатьСуммуВключенияВКредит(ДанныеСтроки);
		
		ЗаполнитьЗначенияСвойств(Строка, ДанныеСтроки);
		
	КонецЦикла;
	
	Для Каждого Строка Из Объект.Остатки15Счета Цикл
		
		Строка.Коэффициент 				= Объект.Коэффициент;		
		
		ДанныеСтроки = ДанныеСтроки(Строка, "Остатки15Счета");
		РассчитатьСуммуВключенияВКредит(ДанныеСтроки);
		
		ЗаполнитьЗначенияСвойств(Строка, ДанныеСтроки);
		
	КонецЦикла;
	
	РассчитатьСуммуКорректировкиПоАктивам();
	
	Если Объект.Дата > '20160101' Тогда
		Сообщить(НСтр("ru='Необходимо обновить суммы на закладке ""Налоговые документы""';uk='Необхідно оновити суми на закладці ""Податкові документи""'"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СуммаОблагаемыхОперацийПриИзменении(Элемент)

	ДанныеОбъекта = ДанныеОбъекта();
	РассчитатьКоэффициент(ДанныеОбъекта);
	
	ЗаполнитьЗначенияСвойств(Объект, ДанныеОбъекта);
	
	// Параллельно сделаем пересчет в ТЧ по ОС текущего года и одного года эксплуатации, т.к. в этих строках параметры перерасчета используются из шапки (за текущий год)
	Для Каждого Строка Из Объект.ПараметрыПерерасчетаОС Цикл
	
		Если Год(Объект.Дата) - Год(Строка.ДатаНачалаИспользования) > 1 Тогда
			Продолжить;
		КонецЕсли;
		
		Строка.СуммаВсехОпераций 		= Объект.СуммаВсехОпераций;		
		Строка.СуммаОблагаемыхОпераций 	= Объект.СуммаОблагаемыхОпераций;		
		Строка.Коэффициент 				= Объект.Коэффициент;		
		
		ДанныеСтроки = ДанныеСтроки(Строка, "ПараметрыПерерасчетаОС");
		РассчитатьСуммуВключенияВКредит(ДанныеСтроки);
		
		ЗаполнитьЗначенияСвойств(Строка, ДанныеСтроки);
		
	КонецЦикла;
	Для Каждого Строка Из Объект.Остатки15Счета Цикл
		
		Строка.Коэффициент 				= Объект.Коэффициент;		
		
		ДанныеСтроки = ДанныеСтроки(Строка, "Остатки15Счета");
		РассчитатьСуммуВключенияВКредит(ДанныеСтроки);
		
		ЗаполнитьЗначенияСвойств(Строка, ДанныеСтроки);
		
	КонецЦикла;
	
	РассчитатьСуммуКорректировкиПоАктивам();
	
	Если Объект.Дата > '20160101' Тогда
		Сообщить(НСтр("ru='Необходимо обновить суммы на закладке ""Налоговые документы""';uk='Необхідно оновити суми на закладці ""Податкові документи""'"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КоэффициентПриИзменении(Элемент)

	ДанныеОбъекта = ДанныеОбъекта();
    РассчитатьСуммуВключенияВКредит(ДанныеОбъекта);
	
	ЗаполнитьЗначенияСвойств(Объект, ДанныеОбъекта);
	
	
	// Параллельно сделаем пересчет в ТЧ по ОС текущего года и одного года эксплуатации, т.к. в этих строках параметры перерасчета используются из шапки (за текущий год)
	Для Каждого Строка Из Объект.ПараметрыПерерасчетаОС Цикл
	
		Если Год(Объект.Дата) - Год(Строка.ДатаНачалаИспользования) > 1 Тогда
			Продолжить;
		КонецЕсли;
		
		Строка.СуммаВсехОпераций 		= Объект.СуммаВсехОпераций;		
		Строка.СуммаОблагаемыхОпераций 	= Объект.СуммаОблагаемыхОпераций;		
		Строка.Коэффициент 				= Объект.Коэффициент;		
		
		ДанныеСтроки = ДанныеСтроки(Строка, "ПараметрыПерерасчетаОС");
		РассчитатьСуммуВключенияВКредит(ДанныеСтроки);
		
		ЗаполнитьЗначенияСвойств(Строка, ДанныеСтроки);
		
	КонецЦикла;
	Для каждого Строка Из Объект.Остатки15Счета Цикл
		
		Строка.Коэффициент 				= Объект.Коэффициент;		
		
		ДанныеСтроки = ДанныеСтроки(Строка, "Остатки15Счета");
		РассчитатьСуммуВключенияВКредит(ДанныеСтроки);
		
		ЗаполнитьЗначенияСвойств(Строка, ДанныеСтроки);
		
	КонецЦикла;
	
	РассчитатьСуммуКорректировкиПоАктивам();
	
	Если Объект.Дата > '20160101' Тогда
		Сообщить(НСтр("ru='Необходимо обновить суммы на закладке ""Налоговые документы""';uk='Необхідно оновити суми на закладці ""Податкові документи""'"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СуммаПоставкиПриИзменении(Элемент)
	
	ДанныеОбъекта = ДанныеОбъекта();
	
	ДанныеОбъекта.НДСПоставки = ДанныеОбъекта.СуммаПоставки * УчетНДС.ПолучитьСтавкуНДС(ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС20")) / 100;
	
	РассчитатьСуммуВключенияВКредит(ДанныеОбъекта);
	
	ЗаполнитьЗначенияСвойств(Объект, ДанныеОбъекта);
	
КонецПроцедуры

&НаКлиенте
Процедура НДСПропорциональноКредитДоПерерасчетаПриИзменении(Элемент)
	
	ДанныеОбъекта = ДанныеОбъекта();
	РассчитатьСуммуКорректировки(ДанныеОбъекта);
	
	ЗаполнитьЗначенияСвойств(Объект, ДанныеОбъекта);
	
КонецПроцедуры

&НаКлиенте
Процедура НДСПропорциональноКредитПриИзменении(Элемент)
	
	ДанныеОбъекта = ДанныеОбъекта();
	
	РассчитатьСуммуКорректировки(ДанныеОбъекта);
	
	ЗаполнитьЗначенияСвойств(Объект, ДанныеОбъекта);
	
КонецПроцедуры

&НаКлиенте
Процедура СуммаКорректировкиНДСПриИзменении(Элемент)
	
	РассчитатьСуммуКорректировкиПоАктивам();
	
КонецПроцедуры

&НаКлиенте
Процедура СуммаВсехОпераций2годаПриИзменении(Элемент)
	
	РассчитатьКоэффициент2Года();
	
	// Параллельно сделаем пересчет в ТЧ по ОС двух лет эксплуатации, т.к. в этих строках параметры перерасчета используются из шапки (за текущий и предыдущий год)
	Для Каждого Строка Из Объект.ПараметрыПерерасчетаОС Цикл
	
		Если Год(Объект.Дата) - Год(Строка.ДатаНачалаИспользования) <> 2 Тогда
			Продолжить;
		КонецЕсли;
		
		Строка.СуммаВсехОпераций 		= Объект.СуммаВсехОпераций2года;		
		Строка.СуммаОблагаемыхОпераций 	= Объект.СуммаОблагаемыхОпераций2года;		
		Строка.Коэффициент 				= Объект.Коэффициент2года;		
		
		ДанныеСтроки = ДанныеСтроки(Строка, "ПараметрыПерерасчетаОС");
		РассчитатьСуммуВключенияВКредит(ДанныеСтроки);
		
		ЗаполнитьЗначенияСвойств(Строка, ДанныеСтроки);
		
	КонецЦикла;
	
	РассчитатьСуммуКорректировкиПоАктивам();
	
КонецПроцедуры

&НаКлиенте
Процедура СуммаОблагаемыхОпераций2ГодаПриИзменении(Элемент)
	
	РассчитатьКоэффициент2Года();
	
	// Параллельно сделаем пересчет в ТЧ по ОС двух лет эксплуатации, т.к. в этих строках параметры перерасчета используются из шапки (за текущий и предыдущий год)
	Для Каждого Строка Из Объект.ПараметрыПерерасчетаОС Цикл
	
		Если Год(Объект.Дата) - Год(Строка.ДатаНачалаИспользования) <> 2 Тогда
			Продолжить;
		КонецЕсли;
		
		Строка.СуммаВсехОпераций 		= Объект.СуммаВсехОпераций2года;		
		Строка.СуммаОблагаемыхОпераций 	= Объект.СуммаОблагаемыхОпераций2года;		
		Строка.Коэффициент 				= Объект.Коэффициент2года;		
		
		ДанныеСтроки = ДанныеСтроки(Строка, "ПараметрыПерерасчетаОС");
		РассчитатьСуммуВключенияВКредит(ДанныеСтроки);
		
		ЗаполнитьЗначенияСвойств(Строка, ДанныеСтроки);
		
	КонецЦикла;
	
	РассчитатьСуммуКорректировкиПоАктивам();
	
КонецПроцедуры

&НаКлиенте
Процедура СуммаВсехОпераций3ГодаПриИзменении(Элемент)
	
	РассчитатьКоэффициент3Года();
	
	// Параллельно сделаем пересчет в ТЧ по ОС двух лет эксплуатации, т.к. в этих строках параметры перерасчета используются из шапки (за текущий и предыдущий год)
	Для Каждого Строка Из Объект.ПараметрыПерерасчетаОС Цикл
	
		Если Год(Объект.Дата) - Год(Строка.ДатаНачалаИспользования) <> 3 Тогда
			Продолжить;
		КонецЕсли;
		
		Строка.СуммаВсехОпераций 		= Объект.СуммаВсехОпераций3года;		
		Строка.СуммаОблагаемыхОпераций 	= Объект.СуммаОблагаемыхОпераций3года;		
		Строка.Коэффициент 				= Объект.Коэффициент3года;		
		
		ДанныеСтроки = ДанныеСтроки(Строка, "ПараметрыПерерасчетаОС");
		РассчитатьСуммуВключенияВКредит(ДанныеСтроки);
		
		ЗаполнитьЗначенияСвойств(Строка, ДанныеСтроки);
		
	КонецЦикла;
	
	РассчитатьСуммуКорректировкиПоАктивам();

КонецПроцедуры

&НаКлиенте
Процедура СуммаОблагаемыхОпераций3ГодаПриИзменении(Элемент)
	
	РассчитатьКоэффициент3Года();
	
	// Параллельно сделаем пересчет в ТЧ по ОС двух лет эксплуатации, т.к. в этих строках параметры перерасчета используются из шапки (за текущий и предыдущий год)
	Для Каждого Строка Из Объект.ПараметрыПерерасчетаОС Цикл
	
		Если Год(Объект.Дата) - Год(Строка.ДатаНачалаИспользования) <> 3 Тогда
			Продолжить;
		КонецЕсли;
		
		Строка.СуммаВсехОпераций 		= Объект.СуммаВсехОпераций3года;		
		Строка.СуммаОблагаемыхОпераций 	= Объект.СуммаОблагаемыхОпераций3года;		
		Строка.Коэффициент 				= Объект.Коэффициент3года;		
		
		ДанныеСтроки = ДанныеСтроки(Строка, "ПараметрыПерерасчетаОС");
		РассчитатьСуммуВключенияВКредит(ДанныеСтроки);
		
		ЗаполнитьЗначенияСвойств(Строка, ДанныеСтроки);
		
	КонецЦикла;
	
	РассчитатьСуммуКорректировкиПоАктивам();
	
КонецПроцедуры

&НаКлиенте
Процедура Коэффициент2ГодаПриИзменении(Элемент)
	
	// Параллельно сделаем пересчет в ТЧ по ОС двух лет эксплуатации, т.к. в этих строках параметры перерасчета используются из шапки (за текущий и предыдущий год)
	Для Каждого Строка Из Объект.ПараметрыПерерасчетаОС Цикл
	
		Если Год(Объект.Дата) - Год(Строка.ДатаНачалаИспользования) <> 2 Тогда
			Продолжить;
		КонецЕсли;
		
		Строка.СуммаВсехОпераций 		= Объект.СуммаВсехОпераций2года;		
		Строка.СуммаОблагаемыхОпераций 	= Объект.СуммаОблагаемыхОпераций2года;		
		Строка.Коэффициент 				= Объект.Коэффициент2года;		
		
		ДанныеСтроки = ДанныеСтроки(Строка, "ПараметрыПерерасчетаОС");
		РассчитатьСуммуВключенияВКредит(ДанныеСтроки);
		
		ЗаполнитьЗначенияСвойств(Строка, ДанныеСтроки);
		
	КонецЦикла;
	
	РассчитатьСуммуКорректировкиПоАктивам();
	
КонецПроцедуры

&НаКлиенте
Процедура Коэффициент3ГодаПриИзменении(Элемент)

	// Параллельно сделаем пересчет в ТЧ по ОС двух лет эксплуатации, т.к. в этих строках параметры перерасчета используются из шапки (за текущий и предыдущий год)
	Для Каждого Строка Из Объект.ПараметрыПерерасчетаОС Цикл
	
		Если Год(Объект.Дата) - Год(Строка.ДатаНачалаИспользования) <> 3 Тогда
			Продолжить;
		КонецЕсли;
		
		Строка.СуммаВсехОпераций 		= Объект.СуммаВсехОпераций3года;		
		Строка.СуммаОблагаемыхОпераций 	= Объект.СуммаОблагаемыхОпераций3года;		
		Строка.Коэффициент 				= Объект.Коэффициент3года;		
		
		ДанныеСтроки = ДанныеСтроки(Строка, "ПараметрыПерерасчетаОС");
		РассчитатьСуммуВключенияВКредит(ДанныеСтроки);
		
		ЗаполнитьЗначенияСвойств(Строка, ДанныеСтроки);
		
	КонецЦикла;
	
	РассчитатьСуммуКорректировкиПоАктивам();
	
КонецПроцедуры

&НаКлиенте
Процедура СуммаКорректировкиБУПриИзменении(Элемент)
	Объект.СуммаКорректировкиНУ = Объект.СуммаКорректировкиБУ;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблиц

&НаКлиенте
Процедура ПараметрыПерерасчетаОСДатаНачалаИспользованияПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ПараметрыПерерасчетаОС.ТекущиеДанные;
	
	ТекущиеДанные.ДатаФормированияКредита = ТекущиеДанные.ДатаНачалаИспользования;
	
	ДанныеСтрокиТаблицы = Новый Структура(
		"ДатаНачалаИспользования, ТекущийГод");
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, ТекущиеДанные);
	
	ЗаполнитьКолонкуПараметрыПерерасчетаОС(ДанныеСтрокиТаблицы);
	
	Если ДанныеСтрокиТаблицы.ТекущийГод <> ТекущиеДанные.ТекущийГод Тогда
		ТекущиеДанные.ТекущийГод = ДанныеСтрокиТаблицы.ТекущийГод;
		УстановитьФильтрТабличныхЧастейОС();
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыПерерасчетаОСТекущийГодДатаНачалаИспользованияПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ПараметрыПерерасчетаОСТекущийГод.ТекущиеДанные;
	
	ТекущиеДанные.ДатаФормированияКредита = ТекущиеДанные.ДатаНачалаИспользования;
	
	ДанныеСтрокиТаблицы = Новый Структура(
		"ДатаНачалаИспользования, ТекущийГод");
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, ТекущиеДанные);
	
	ЗаполнитьКолонкуПараметрыПерерасчетаОС(ДанныеСтрокиТаблицы);
	
	Если ДанныеСтрокиТаблицы.ТекущийГод <> ТекущиеДанные.ТекущийГод Тогда
		ТекущиеДанные.ТекущийГод = ДанныеСтрокиТаблицы.ТекущийГод;
		УстановитьФильтрТабличныхЧастейОС();
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыПерерасчетаОССуммаВсехОперацийПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ПараметрыПерерасчетаОС.ТекущиеДанные;

	ДанныеСтроки = ДанныеСтроки(ТекущиеДанные, "ПараметрыПерерасчетаОС");
	РассчитатьКоэффициент(ДанныеСтроки);
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыПерерасчетаОССуммаОблагаемыхОперацийПриИзменении(Элемент)

	ТекущиеДанные = Элементы.ПараметрыПерерасчетаОС.ТекущиеДанные;

	ДанныеСтроки = ДанныеСтроки(ТекущиеДанные, "ПараметрыПерерасчетаОС");
	РассчитатьКоэффициент(ДанныеСтроки);
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыПерерасчетаОСКоэффициентПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ПараметрыПерерасчетаОС.ТекущиеДанные;

	ДанныеСтроки = ДанныеСтроки(ТекущиеДанные, "ПараметрыПерерасчетаОС");
	РассчитатьСуммуКорректировки(ДанныеСтроки);
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыПерерасчетаОССуммаПоставкиПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ПараметрыПерерасчетаОС.ТекущиеДанные;

	ДанныеСтроки = ДанныеСтроки(ТекущиеДанные, "ПараметрыПерерасчетаОС");
	ДанныеСтроки.НДСПоставки = ДанныеСтроки.СуммаПоставки * УчетНДС.ПолучитьСтавкуНДС(ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС20")) / 100;
	РассчитатьСуммуВключенияВКредит(ДанныеСтроки);
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтроки);
	
	РассчитатьСуммуКорректировкиПоАктивам();
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыПерерасчетаОСТекущийГодСуммаПоставкиПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ПараметрыПерерасчетаОСТекущийГод.ТекущиеДанные;

	ДанныеСтроки = ДанныеСтроки(ТекущиеДанные, "ПараметрыПерерасчетаОС");
	ДанныеСтроки.НДСПоставки = ДанныеСтроки.СуммаПоставки * УчетНДС.ПолучитьСтавкуНДС(ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС20")) / 100;
	РассчитатьСуммуВключенияВКредит(ДанныеСтроки);
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыПерерасчетаОСНДСПоставкиПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ПараметрыПерерасчетаОС.ТекущиеДанные;

	ДанныеСтроки = ДанныеСтроки(ТекущиеДанные, "ПараметрыПерерасчетаОС");
	РассчитатьСуммуВключенияВКредит(ДанныеСтроки);
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтроки);
	
	РассчитатьСуммуКорректировкиПоАктивам();
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыПерерасчетаОСТекущийГодНДСПоставкиПриИзменении(Элемент)

	ТекущиеДанные = Элементы.ПараметрыПерерасчетаОСТекущийГод.ТекущиеДанные;

	ДанныеСтроки = ДанныеСтроки(ТекущиеДанные, "ПараметрыПерерасчетаОС");
	РассчитатьСуммуВключенияВКредит(ДанныеСтроки);
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыПерерасчетаОСНДСПропорциональноКредитДоПерерасчетаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ПараметрыПерерасчетаОС.ТекущиеДанные;

	ДанныеСтроки = ДанныеСтроки(ТекущиеДанные, "ПараметрыПерерасчетаОС");
	РассчитатьСуммуКорректировки(ДанныеСтроки);
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтроки);
	
	РассчитатьСуммуКорректировкиПоАктивам();
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыПерерасчетаОСТекущийГодНДСПропорциональноКредитДоПерерасчетаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ПараметрыПерерасчетаОСТекущийГод.ТекущиеДанные;

	ДанныеСтроки = ДанныеСтроки(ТекущиеДанные, "ПараметрыПерерасчетаОС");
	РассчитатьСуммуКорректировки(ДанныеСтроки);
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыПерерасчетаОСНДСПропорциональноКредитПриИзменении(Элемент)

	ТекущиеДанные = Элементы.ПараметрыПерерасчетаОС.ТекущиеДанные;

	ДанныеСтроки = ДанныеСтроки(ТекущиеДанные, "ПараметрыПерерасчетаОС");
	РассчитатьСуммуКорректировки(ДанныеСтроки);
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтроки);
	
	РассчитатьСуммуКорректировкиПоАктивам();
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыПерерасчетаОСТекущийГодНДСПропорциональноКредитПриИзменении(Элемент)

	ТекущиеДанные = Элементы.ПараметрыПерерасчетаОСТекущийГод.ТекущиеДанные;

	ДанныеСтроки = ДанныеСтроки(ТекущиеДанные, "ПараметрыПерерасчетаОС");
	РассчитатьСуммуКорректировки(ДанныеСтроки);
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыПерерасчетаОСОССписанПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ПараметрыПерерасчетаОС.ТекущиеДанные;

	ДанныеСтроки = ДанныеСтроки(ТекущиеДанные, "ПараметрыПерерасчетаОС");
	РассчитатьСуммуКорректировки(ДанныеСтроки);
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтроки);
	
	РассчитатьСуммуКорректировкиПоАктивам();
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыПерерасчетаОСТекущийГодОССписанПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ПараметрыПерерасчетаОСТекущийГод.ТекущиеДанные;

	ДанныеСтроки = ДанныеСтроки(ТекущиеДанные, "ПараметрыПерерасчетаОС");
	РассчитатьСуммуКорректировки(ДанныеСтроки);
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыПерерасчетаОССтоимостьБУПриИзменении(Элемент)

	ТекущиеДанные = Элементы.ПараметрыПерерасчетаОС.ТекущиеДанные;

	Объект.СуммаКорректировкиНУ = ТекущиеДанные.СуммаКорректировкиНУ;
	
	ДанныеСтроки = ДанныеСтроки(ТекущиеДанные, "ПараметрыПерерасчетаОС");
	РассчитатьКорректировкуБУНУ(ДанныеСтроки);
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтроки);
	
	ТекущиеДанные.СуммаКорректировкиНУ = Объект.СуммаКорректировкиНУ;
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыПерерасчетаОСТекущийГодСтоимостьБУПриИзменении(Элемент)

	ТекущиеДанные = Элементы.ПараметрыПерерасчетаОСТекущийГод.ТекущиеДанные;

	Объект.СуммаКорректировкиНУ = ТекущиеДанные.СуммаКорректировкиНУ;
	
	ДанныеСтроки = ДанныеСтроки(ТекущиеДанные, "ПараметрыПерерасчетаОС");
	РассчитатьКорректировкуБУНУ(ДанныеСтроки);
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтроки);
	
	ТекущиеДанные.СуммаКорректировкиНУ = Объект.СуммаКорректировкиНУ;
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыПерерасчетаОСАмортизацияБУПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ПараметрыПерерасчетаОС.ТекущиеДанные;

	Объект.СуммаКорректировкиНУ = ТекущиеДанные.СуммаКорректировкиНУ;
	
	ДанныеСтроки = ДанныеСтроки(ТекущиеДанные, "ПараметрыПерерасчетаОС");
	РассчитатьКорректировкуБУНУ(ДанныеСтроки);
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтроки);
	
	ТекущиеДанные.СуммаКорректировкиНУ = Объект.СуммаКорректировкиНУ;
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыПерерасчетаОСТекущийГодАмортизацияБУПриИзменении(Элемент)

	ТекущиеДанные = Элементы.ПараметрыПерерасчетаОСТекущийГод.ТекущиеДанные;

	Объект.СуммаКорректировкиНУ = ТекущиеДанные.СуммаКорректировкиНУ;
	
	ДанныеСтроки = ДанныеСтроки(ТекущиеДанные, "ПараметрыПерерасчетаОС");
	РассчитатьКорректировкуБУНУ(ДанныеСтроки);
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтроки);
	
	ТекущиеДанные.СуммаКорректировкиНУ = Объект.СуммаКорректировкиНУ;
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыПерерасчетаОССтоимостьНУПриИзменении(Элемент)

	ТекущиеДанные = Элементы.ПараметрыПерерасчетаОС.ТекущиеДанные;

	Объект.СуммаКорректировкиБУ = ТекущиеДанные.СуммаКорректировкиБУ;
	
	ДанныеСтроки = ДанныеСтроки(ТекущиеДанные, "ПараметрыПерерасчетаОС");
	РассчитатьКорректировкуБУНУ(ДанныеСтроки);
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтроки);
	
	ТекущиеДанные.СуммаКорректировкиБУ = Объект.СуммаКорректировкиБУ;
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыПерерасчетаОСАмортизацияНУПриИзменении(Элемент)

	ТекущиеДанные = Элементы.ПараметрыПерерасчетаОС.ТекущиеДанные;

	Объект.СуммаКорректировкиБУ = ТекущиеДанные.СуммаКорректировкиБУ;
	
	ДанныеСтроки = ДанныеСтроки(ТекущиеДанные, "ПараметрыПерерасчетаОС");
	РассчитатьКорректировкуБУНУ(ДанныеСтроки);
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтроки);
	
	ТекущиеДанные.СуммаКорректировкиБУ = Объект.СуммаКорректировкиБУ;
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыПерерасчетаОСТекущийГодСтоимостьНУПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ПараметрыПерерасчетаОСТекущийГод.ТекущиеДанные;

	Объект.СуммаКорректировкиБУ = ТекущиеДанные.СуммаКорректировкиБУ;
	
	ДанныеСтроки = ДанныеСтроки(ТекущиеДанные, "ПараметрыПерерасчетаОС");
	РассчитатьКорректировкуБУНУ(ДанныеСтроки);
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтроки);
	
	ТекущиеДанные.СуммаКорректировкиБУ = Объект.СуммаКорректировкиБУ;
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыПерерасчетаОСТекущийГодАмортизацияНУПриИзменении(Элемент)

	ТекущиеДанные = Элементы.ПараметрыПерерасчетаОСТекущийГод.ТекущиеДанные;

	Объект.СуммаКорректировкиБУ = ТекущиеДанные.СуммаКорректировкиБУ;
	
	ДанныеСтроки = ДанныеСтроки(ТекущиеДанные, "ПараметрыПерерасчетаОС");
	РассчитатьКорректировкуБУНУ(ДанныеСтроки);
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтроки);
	
	ТекущиеДанные.СуммаКорректировкиБУ = Объект.СуммаКорректировкиБУ;
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыПерерасчетаОСТекущийГодПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)

	Если Копирование Тогда
		РассчитатьСуммуКорректировкиПоАктивам();
	КонецЕсли;
	
	Если НоваяСтрока Тогда
	
		ТекущиеДанные = Элементы.ПараметрыПерерасчетаОСТекущийГод.ТекущиеДанные;
		ТекущиеДанные.ДатаНачалаИспользования	= НачалоГода(Объект.Дата);
		ТекущиеДанные.ДатаФормированияКредита	= НачалоГода(Объект.Дата);
		
		ТекущиеДанные.СуммаВсехОпераций 		= Объект.СуммаВсехОпераций;
		ТекущиеДанные.СуммаОблагаемыхОпераций 	= Объект.СуммаОблагаемыхОпераций;
		ТекущиеДанные.Коэффициент 				= Объект.Коэффициент;
	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыПерерасчетаОСТекущийГодПослеУдаления(Элемент)
	РассчитатьСуммуКорректировкиПоАктивам();
КонецПроцедуры

&НаКлиенте
Процедура АвансыПоставщикамНДСПропорциональноКредитДоПерерасчетаПриИзменении(Элемент)
	ТекущиеДанные = Элементы.АвансыПоставщикам.ТекущиеДанные;
	
	ТекущиеДанные.СуммаКорректировкиНДС = ?(ТекущиеДанные.РасчетыВозврат = ПредопределенноеЗначение("Перечисление.РасчетыВозврат.Расчеты"), ТекущиеДанные.НДСПропорциональноКредит, 			   - ТекущиеДанные.НДСПропорциональноКредит)
								 		- ?(ТекущиеДанные.РасчетыВозврат = ПредопределенноеЗначение("Перечисление.РасчетыВозврат.Расчеты"), ТекущиеДанные.НДСПропорциональноКредитДоПерерасчета, - ТекущиеДанные.НДСПропорциональноКредитДоПерерасчета);
										
	РассчитатьСуммуКорректировкиПоАктивам();
КонецПроцедуры

&НаКлиенте
Процедура АвансыПоставщикамНДСПропорциональноКредитПриИзменении(Элемент)
	ТекущиеДанные = Элементы.АвансыПоставщикам.ТекущиеДанные;
	
	ТекущиеДанные.СуммаКорректировкиНДС = ?(ТекущиеДанные.РасчетыВозврат = ПредопределенноеЗначение("Перечисление.РасчетыВозврат.Расчеты"), ТекущиеДанные.НДСПропорциональноКредит, 			   - ТекущиеДанные.НДСПропорциональноКредит)
								 		- ?(ТекущиеДанные.РасчетыВозврат = ПредопределенноеЗначение("Перечисление.РасчетыВозврат.Расчеты"), ТекущиеДанные.НДСПропорциональноКредитДоПерерасчета, - ТекущиеДанные.НДСПропорциональноКредитДоПерерасчета);
										
	РассчитатьСуммуКорректировкиПоАктивам();
КонецПроцедуры

&НаКлиенте
Процедура АвансыПоставщикамПослеУдаления(Элемент)
	РассчитатьСуммуКорректировкиПоАктивам();
КонецПроцедуры

&НаКлиенте
Процедура АвансыПоставщикамРасчетыВозвратПриИзменении(Элемент)
	ТекущиеДанные = Элементы.АвансыПоставщикам.ТекущиеДанные;
	
	ТекущиеДанные.СуммаКорректировкиНДС = ?(ТекущиеДанные.РасчетыВозврат = ПредопределенноеЗначение("Перечисление.РасчетыВозврат.Расчеты"), ТекущиеДанные.НДСПропорциональноКредит, 			   - ТекущиеДанные.НДСПропорциональноКредит)
								 		- ?(ТекущиеДанные.РасчетыВозврат = ПредопределенноеЗначение("Перечисление.РасчетыВозврат.Расчеты"), ТекущиеДанные.НДСПропорциональноКредитДоПерерасчета, - ТекущиеДанные.НДСПропорциональноКредитДоПерерасчета);
										
	РассчитатьСуммуКорректировкиПоАктивам();
КонецПроцедуры

&НаКлиенте
Процедура АвансыПоставщикамПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)

	Если Копирование Тогда
		РассчитатьСуммуКорректировкиПоАктивам();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура АвансыПоставщикамКонтрагентПриИзменении(Элемент)
	ТекущиеДанные = Элементы.АвансыПоставщикам.ТекущиеДанные;
	ТекущиеДанные.ДоговорКонтрагента = ОбщегоНазначенияБПВызовСервера.ЗначениеРеквизитаОбъекта(ТекущиеДанные.Контрагент, "ОсновнойДоговорКонтрагента");
КонецПроцедуры

&НаКлиенте
Процедура Остатки15СчетаПослеУдаления(Элемент)
	РассчитатьСуммуКорректировкиПоАктивам();
КонецПроцедуры

&НаКлиенте
Процедура Остатки15СчетаПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)

	ТекущиеДанные = Элементы.Остатки15Счета.ТекущиеДанные;
	
	Если НоваяСтрока Тогда
	
		ТекущиеДанные.Коэффициент = Объект.Коэффициент;
	
	КонецЕсли;
	
	Если Копирование Тогда
		РассчитатьСуммуКорректировкиПоАктивам();
	КонецЕсли;
	
	ДанныеСтроки = Новый Структура("Счет, НеоборотныйАктив");
	
	ЗаполнитьЗначенияСвойств(ДанныеСтроки, ТекущиеДанные);
	
	УстановитьЗаголовкиИДоступностьОстатки15СчетаНеоборотныйАктив(ЭтаФорма, ДанныеСтроки);
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура Остатки15СчетаСуммаОстатокПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Остатки15Счета.ТекущиеДанные;
	
	ДанныеСтроки = ДанныеСтроки(ТекущиеДанные, "Остатки15Счета");
	ПриИзмненииСуммыОстаткаНа15Счете(ДанныеСтроки);
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура Остатки15СчетаСуммаПоставкиПриИзменении(Элемент)

	ТекущиеДанные = Элементы.Остатки15Счета.ТекущиеДанные;
	
	ТекущиеДанные.НДСПоставки = ТекущиеДанные.СуммаПоставки * УчетНДС.ПолучитьСтавкуНДС(ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС20")) / 100;
	
	ДанныеСтроки = ДанныеСтроки(ТекущиеДанные, "Остатки15Счета");
	РассчитатьСуммуВключенияВКредит(ДанныеСтроки);
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтроки);
	
	РассчитатьСуммуКорректировкиПоАктивам();
	
КонецПроцедуры

&НаКлиенте
Процедура Остатки15СчетаНДСПоставкиПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Остатки15Счета.ТекущиеДанные;
	
	ДанныеСтроки = ДанныеСтроки(ТекущиеДанные, "Остатки15Счета");
	РассчитатьСуммуВключенияВКредит(ДанныеСтроки);
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтроки);
	
	РассчитатьСуммуКорректировкиПоАктивам();

КонецПроцедуры

&НаКлиенте
Процедура Остатки15СчетаНДСПропорциональноКредитДоПерерасчетаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Остатки15Счета.ТекущиеДанные;
	
	ДанныеСтроки = ДанныеСтроки(ТекущиеДанные, "Остатки15Счета");
	РассчитатьСуммуКорректировки(ДанныеСтроки);
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтроки);
	
	РассчитатьСуммуКорректировкиПоАктивам();
	
КонецПроцедуры

&НаКлиенте
Процедура Остатки15СчетаНДСПропорциональноКредитПриИзменении(Элемент)

	ТекущиеДанные = Элементы.Остатки15Счета.ТекущиеДанные;
	
	ДанныеСтроки = ДанныеСтроки(ТекущиеДанные, "Остатки15Счета");
	РассчитатьСуммуКорректировки(ДанныеСтроки);
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтроки);
	
	РассчитатьСуммуКорректировкиПоАктивам();
	
КонецПроцедуры

&НаКлиенте
Процедура Остатки15СчетаСчетПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Остатки15Счета.ТекущиеДанные;
	
	ДанныеСтроки = Новый Структура("Счет, НеоборотныйАктив");
	
	ЗаполнитьЗначенияСвойств(ДанныеСтроки, ТекущиеДанные);
	
	Остатки15СчетаСчетПриИзмененииНаСервере(ДанныеСтроки);
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтроки);
	
КонецПроцедуры

&НаСервере
Процедура Остатки15СчетаСчетПриИзмененииНаСервере(СтрокаТабличнойЧасти)
	
	Если НЕ СтрокаТабличнойЧасти.Счет.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.КапитальныеИнвестиции) Тогда
		СтрокаТабличнойЧасти.Счет = ПланыСчетов.Хозрасчетный.ПустаяСсылка();	
		СтрокаТабличнойЧасти.НеоборотныйАктив = Неопределено;
	КонецЕсли;
	
	УстановитьЗаголовкиИДоступностьОстатки15СчетаНеоборотныйАктив(ЭтаФорма, СтрокаТабличнойЧасти);
	
КонецПроцедуры

&НаКлиенте
Процедура НалоговыеДокументыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если НоваяСтрока и ОтменаРедактирования Тогда
		Возврат;
	КонецЕсли;
	
	ИдентификаторСтроки = Элементы.НалоговыеДокументы.ТекущиеДанные.ПолучитьИдентификатор();
	
	ЗаполнитьСуммуКорректировкиНДСНалоговогоДокумента(ИдентификаторСтроки);
	ПоказатьИтогСуммыКорректировкиНалоговыхДокументов(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура НалоговыеДокументыПослеУдаления(Элемент)
	
	ПоказатьИтогСуммыКорректировкиНалоговыхДокументов(ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗаполнитьПерерасчет(Команда)
	ТекстВопроса	= НСтр("ru='Документ будет заполнен заново, в все введенные данные будут удалены. Корректировки к сводным налоговым накладным будут помечены на удаление. Продолжить?';uk='Документ буде заповнений заново, усі введені дані будуть вилучені. Коригування до зведених податкових накладних будуть позначені на вилучення. Продовжити?'");
	Оповещение = Новый ОписаниеОповещения("ЗаполнитьПерерасчетЗавершение", ЭтотОбъект);
	ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСуммыНалоговыхДокументов(Команда)
	
	ОбновитьСуммыНалоговыхДокументовНаСервере();

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом

	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	ПодготовитьФормуНаСервере();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПараметрыРазмещения = ПодключаемыеКоманды.ПараметрыРазмещения();
	ПараметрыРазмещения.КоманднаяПанель = Элементы.ГруппаВажныеКоманды;
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект, ПараметрыРазмещения);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	
	Если Параметры.Ключ.Пустая() Тогда
		ПодготовитьФормуНаСервере();
		Объект.ФормироватьДокументУстановкиКоэффициентаНаСледующийГод = (Месяц(Объект.Дата) = 12);
	КонецЕсли;
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	ЗаполнитьСуммуКорректировкиНДСНалоговогоДокумента();
	ПоказатьИтогСуммыКорректировкиНалоговыхДокументов(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ЗаполнитьСуммуКорректировкиНДСНалоговогоДокумента();

КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ПодготовитьФормуНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

#КонецОбласти

#Область CлужебныеПроцедурыИФункции

&НаСервере
Процедура ПодготовитьФормуНаСервере()

	УстановитьФункциональныеОпцииФормы();
	
	Если Элементы.СпецРежимНалогообложения.СписокВыбора.Количество() = 0 Тогда
		УчетНДС.ЗаполнитьСписокВыбораСпецРежимаНалогообложения(Элементы.СпецРежимНалогообложения.СписокВыбора);
	КонецЕсли;
	ЭлементСпискаЗначений 				= Элементы.СпецРежимНалогообложения.СписокВыбора.НайтиПоЗначению(Объект.СпецРежимНалогообложения);
	РасшифровкаСпецРежимНалогообложения = ?(ЭлементСпискаЗначений = Неопределено, "", ЭлементСпискаЗначений.Представление);
	
	УстановитьСостояниеДокумента();
	
	РасшифровкаОВключенииВДекларацию = НСтр("ru='Данные перерасчета будут включены в декларацию по НДС за ';uk='Результати перерахунку будуть включені до декларації з ПДВ за '") + Формат(Объект.Дата,"ДФ=MM.yyyy");
	
	УправлениеФормой(ЭтаФорма);
	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма,"СчетНДС");
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма,"СчетДт");
	
	УстановитьФильтрТабличныхЧастейОС();
	ЗаполнитьКолонкиПараметрыПерерасчетаОС();	
	
КонецПроцедуры

&НаСервере
Процедура УстановитьФильтрТабличныхЧастейОС()
	Элементы.ПараметрыПерерасчетаОС.ОтборСтрок = Новый ФиксированнаяСтруктура(Новый Структура("ТекущийГод", Ложь));
	Элементы.ПараметрыПерерасчетаОСТекущийГод.ОтборСтрок = Новый ФиксированнаяСтруктура(Новый Структура("ТекущийГод", Истина));
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьКолонкиПараметрыПерерасчетаОС()

	Для Каждого СтрокаТаблицы Из Объект.ПараметрыПерерасчетаОС Цикл
		ЗаполнитьКолонкуПараметрыПерерасчетаОС(СтрокаТаблицы);
	КонецЦикла; 
	
КонецПроцедуры	

&НаСервере
Процедура ЗаполнитьКолонкуПараметрыПерерасчетаОС(СтрокаТаблицы)

	СтрокаТаблицы.ТекущийГод = (СтрокаТаблицы.ДатаНачалаИспользования >= НачалоГода(Объект.Дата));
	
КонецПроцедуры	

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Объект = Форма.Объект;
	Элементы = Форма.Элементы;
	
	УстановитьЗаголовкиИДоступностьСубконто(Форма, Объект.СчетНДС, "СубконтоКт");
	УстановитьЗаголовкиИДоступностьСубконто(Форма, Объект.СчетДт, "СубконтоДт");
	
	Элементы.НалоговоеНазначениеДоходовИЗатрат.Видимость = Форма.ПлательщикНалогаНаПрибыльДо2015;
	Элементы.ДекорацияНалоговоеНазначение.Видимость 	 = Форма.ПлательщикНалогаНаПрибыльДо2015;
	
	Элементы.СуммаКорректировкиНУ.Видимость = Форма.ПлательщикНалогаНаПрибыльДо2015;
	
	Элементы.ФормироватьДокументУстановкиКоэффициентаНаСледующийГод.Видимость = (Месяц(Объект.Дата) = 12);
	
	ДатаМеньше2013 = (Год(Объект.Дата) < 2013);
	Элементы.ПараметрыПерерасчетаОСДатаФормированияКредита.Видимость  	= ДатаМеньше2013;
	Элементы.ПараметрыПерерасчетаОССуммаВсехОпераций.Видимость 			= ДатаМеньше2013;
	Элементы.ПараметрыПерерасчетаОССуммаОблагаемыхОпераций.Видимость 	= ДатаМеньше2013;
	Элементы.ПараметрыПерерасчетаОСКоэффициент.Видимость 				= ДатаМеньше2013;
	
	Элементы.ПараметрыПерерасчетаОСТекущийГодДатаФормированияКредита.Видимость  = ДатаМеньше2013;
	
	ДатаНеМеньше2016 = (Год(Объект.Дата) >= 2016);
	Элементы.ДекорацияЗаголовокСчетНДСУсловнаяПродажа.Видимость  = ДатаНеМеньше2016;
	Элементы.СчетНДСУсловнаяПродажа.Видимость                  = ДатаНеМеньше2016;
	Элементы.ГруппаНалоговыеДокументы.Видимость  			   = ДатаНеМеньше2016;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьФункциональныеОпцииФормы()

	КоэффициентПропорциональногоНДС = НалоговыйУчет.ПолучитьКоэффициентПропорциональногоНДС(Объект.Организация, Объект.Дата);
	
	ПлательщикНалогаНаПрибыльДо2015 = УчетнаяПолитика.ПлательщикНалогаНаПрибыльДо2015(Объект.Организация, Объект.Дата);	
	ПлательщикНДС = УчетнаяПолитика.ПлательщикНДС(Объект.Организация, Объект.Дата);	
	
КонецПроцедуры 

&НаСервере
Процедура УстановитьСостояниеДокумента()
	
	СостояниеДокумента = ОбщегоНазначенияБП.СостояниеДокумента(Объект);
	
КонецПроцедуры

&НаСервере
Процедура ДатаПриИзмененииНаСервере()

	УстановитьФункциональныеОпцииФормы();

КонецПроцедуры

&НаКлиенте
Функция ДанныеОбъекта()
	
	ДанныеОбъекта = Новый Структура("ЭтоОбъект, Коэффициент, СуммаПоставки, СуммаВсехОпераций, СуммаОблагаемыхОпераций, НДСПоставки, СуммаКорректировкиНДС, 
									|НДСПропорциональноКредитДоПерерасчета, НДСПропорциональноКредит, 
									|СуммаКорректировкиНДСПоАвансамПоставщикамИОС, СуммаКорректировкиБУ, СуммаКорректировкиНУ", Истина);
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
	Возврат ДанныеОбъекта;
	
КонецФункции

&НаКлиенте
Функция ДанныеСтроки(СтрокаТабличнойЧасти, ИмяТЧ = "ПараметрыПерерасчетаОС")
	
	Если ИмяТЧ = "ПараметрыПерерасчетаОС" Тогда
		ДанныеСтроки = Новый Структура("Коэффициент, СуммаВсехОпераций, СуммаОблагаемыхОпераций, СуммаПоставки, НДСПоставки, СуммаКорректировкиНДС, 
										|НДСПропорциональноКредитДоПерерасчета, НДСПропорциональноКредит, 
										|СуммаКорректировкиБУ, СуммаКорректировкиНУ, 
										|СтоимостьБУ, СтоимостьНУ, АмортизацияБУ, АмортизацияНУ, ОССписан");
	ИначеЕсли ИмяТЧ = "Остатки15Счета" Тогда
		ДанныеСтроки = Новый Структура("Коэффициент, СуммаПоставки, НДСПоставки, СуммаКорректировкиНДС, СуммаОстаток, 
										|НДСПропорциональноКредитДоПерерасчета, НДСПропорциональноКредит, 
										|СуммаКорректировкиБУ, СуммаКорректировкиНУ");
		
	КонецЕсли;	
	                                            
	ЗаполнитьЗначенияСвойств(ДанныеСтроки, СтрокаТабличнойЧасти);
	
	Возврат ДанныеСтроки;
	
КонецФункции

&НаКлиенте
Процедура РассчитатьСуммуКорректировкиПоАктивам()
	
	ДанныеОбъекта = ДанныеОбъекта();
	РассчитатьКорректировкуБУНУ(ДанныеОбъекта);
	
	ЗаполнитьЗначенияСвойств(Объект, ДанныеОбъекта);

КонецПроцедуры

&НаСервере
Процедура РассчитатьКорректировкуБУНУ(СтрокаТабличнойЧасти)

	Если ТипЗнч(СтрокаТабличнойЧасти) = Тип("ДанныеФормыСтруктура") ИЛИ (СтрокаТабличнойЧасти.Свойство("ЭтоОбъект") И СтрокаТабличнойЧасти.ЭтоОбъект = Истина) Тогда
	
		СтрокаТабличнойЧасти.СуммаКорректировкиНДСПоАвансамПоставщикамИОС = Объект.АвансыПоставщикам.Итог("СуммаКорректировкиНДС") + Объект.Остатки15Счета.Итог("СуммаКорректировкиНДС");
		
		Для Каждого Строка Из Объект.ПараметрыПерерасчетаОС Цикл
			// для расчета отбираем только строки по ОС, введенным в эксплуатацию в этом году
			Если Строка.ДатаНачалаИспользования < НачалоГода(Объект.Дата) Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаТабличнойЧасти.СуммаКорректировкиНДСПоАвансамПоставщикамИОС = СтрокаТабличнойЧасти.СуммаКорректировкиНДСПоАвансамПоставщикамИОС + Строка.СуммаКорректировкиНДС;
			
		КонецЦикла;
		
		СтрокаТабличнойЧасти.СуммаКорректировкиБУ = СтрокаТабличнойЧасти.СуммаКорректировкиНДСПоАвансамПоставщикамИОС - СтрокаТабличнойЧасти.СуммаКорректировкиНДС; 
		СтрокаТабличнойЧасти.СуммаКорректировкиНУ = СтрокаТабличнойЧасти.СуммаКорректировкиБУ;
		
	Иначе
		
		СтруктураПроверкиНаличияСвойства = Новый Структура("СтоимостьБУ, ОССписан", Неопределено, Неопределено);
		ЗаполнитьЗначенияСвойств(СтруктураПроверкиНаличияСвойства, СтрокаТабличнойЧасти);
		
		Если  НЕ СтруктураПроверкиНаличияСвойства.СтоимостьБУ = Неопределено
			И НЕ СтруктураПроверкиНаличияСвойства.ОССписан = Истина Тогда
		
			СтрокаТабличнойЧасти.СуммаКорректировкиБУ = - ?(СтрокаТабличнойЧасти.СтоимостьБУ = 0, 0, СтрокаТабличнойЧасти.АмортизацияБУ * (СтрокаТабличнойЧасти.СуммаКорректировкиНДС) / СтрокаТабличнойЧасти.СтоимостьБУ);		
			СтрокаТабличнойЧасти.СуммаКорректировкиНУ = - ?(СтрокаТабличнойЧасти.СтоимостьНУ = 0, 0, СтрокаТабличнойЧасти.АмортизацияНУ * (СтрокаТабличнойЧасти.СуммаКорректировкиНДС) / СтрокаТабличнойЧасти.СтоимостьНУ);		
			
		ИначеЕсли НЕ СтруктураПроверкиНаличияСвойства.ОССписан = Неопределено Тогда
			
			СтрокаТабличнойЧасти.СуммаКорректировкиБУ = - СтрокаТабличнойЧасти.СуммаКорректировкиНДС;
			СтрокаТабличнойЧасти.СуммаКорректировкиНУ = - СтрокаТабличнойЧасти.СуммаКорректировкиНДС;
			
		КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьКоэффициент(СтрокаТабличнойЧасти)

	СтрокаТабличнойЧасти.Коэффициент = ?(СтрокаТабличнойЧасти.СуммаВсехОпераций = 0, 0, СтрокаТабличнойЧасти.СуммаОблагаемыхОпераций / СтрокаТабличнойЧасти.СуммаВсехОпераций) * 100;
    РассчитатьСуммуВключенияВКредит(СтрокаТабличнойЧасти);
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьКоэффициент2Года()
	
	Объект.Коэффициент2Года = ?(Объект.СуммаВсехОпераций2Года = 0, 0, Объект.СуммаОблагаемыхОпераций2Года / Объект.СуммаВсехОпераций2Года) * 100;
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьКоэффициент3Года()

	Объект.Коэффициент3Года = ?(Объект.СуммаВсехОпераций3Года = 0, 0, Объект.СуммаОблагаемыхОпераций3Года / Объект.СуммаВсехОпераций3Года) * 100;
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьСуммуВключенияВКредит(СтрокаТабличнойЧасти)
	
	СтрокаТабличнойЧасти.НДСПропорциональноКредит = СтрокаТабличнойЧасти.НДСПоставки * СтрокаТабличнойЧасти.Коэффициент / 100;
	
	РассчитатьСуммуКорректировки(СтрокаТабличнойЧасти);

КонецПроцедуры

&НаСервере
Процедура РассчитатьСуммуКорректировки(СтрокаТабличнойЧасти)
	
	СтрокаТабличнойЧасти.СуммаКорректировкиНДС = - СтрокаТабличнойЧасти.НДСПропорциональноКредитДоПерерасчета + СтрокаТабличнойЧасти.НДСПропорциональноКредит;

	РассчитатьКорректировкуБУНУ(СтрокаТабличнойЧасти);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция СписокПараметровВыбораСубконто(Форма, ПараметрыОбъекта, ШаблонИмяПоляОбъекта, ИмяСчета)
	
	СписокПараметров = Новый Структура;
	Для Индекс = 1 По 3 Цикл
		ИмяПоля = СтрЗаменить(ШаблонИмяПоляОбъекта, "%Индекс%", Индекс);
		Если ТипЗнч(ПараметрыОбъекта[ИмяПоля]) = Тип("СправочникСсылка.Контрагенты") Тогда
			СписокПараметров.Вставить("Контрагент", ПараметрыОбъекта[ИмяПоля]);
		ИначеЕсли ТипЗнч(ПараметрыОбъекта[ИмяПоля]) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
			СписокПараметров.Вставить("ДоговорКонтрагента", ПараметрыОбъекта[ИмяПоля]);
		ИначеЕсли ТипЗнч(ПараметрыОбъекта[ИмяПоля]) = Тип("СправочникСсылка.Номенклатура") Тогда
			СписокПараметров.Вставить("Номенклатура", ПараметрыОбъекта[ИмяПоля]);
		ИначеЕсли ТипЗнч(ПараметрыОбъекта[ИмяПоля]) = Тип("СправочникСсылка.Склады") Тогда
			СписокПараметров.Вставить("Склад", ПараметрыОбъекта[ИмяПоля]);
		КонецЕсли;
	КонецЦикла;
	СписокПараметров.Вставить("Организация", Форма.Объект.Организация);
	СписокПараметров.Вставить("СчетУчета",   Форма.Объект[ИмяСчета]);
	
	Возврат СписокПараметров;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьЗаголовкиИДоступностьСубконто(Форма, Счет, Префикс)
	
	ПоляФормы = Новый Структура("Субконто1, Субконто2, Субконто3",
		Префикс + "1",
		Префикс + "2",
		Префикс + "3");
	
	ЗаголовкиПолей = Новый Структура("Субконто1, Субконто2, Субконто3",
		"Заголовок" + Префикс + "1", "Заголовок" + Префикс + "2", "Заголовок" + Префикс + "3");
	
	БухгалтерскийУчетКлиентСервер.ПриВыбореСчета(Счет, Форма, ПоляФормы, ЗаголовкиПолей);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьЗаголовкиИДоступностьОстатки15СчетаНеоборотныйАктив(Форма, СтрокаТабличнойЧасти)
	
	ДанныеСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(СтрокаТабличнойЧасти.Счет);
	
	Если ДанныеСчета.КоличествоСубконто = 0 Тогда
		Форма.Элементы["Остатки15СчетаНеоборотныйАктив"].Доступность = Ложь;
		СтрокаТабличнойЧасти.НеоборотныйАктив = Неопределено;
	Иначе	
		Форма.Элементы["Остатки15СчетаНеоборотныйАктив"].ОграничениеТипа = ДанныеСчета["ВидСубконто1ТипЗначения"];
		Форма.Элементы["Остатки15СчетаНеоборотныйАктив"].Доступность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ИзменитьПараметрыВыбораПолейСубконто(Форма,ИмяСчета="СчетНДС")
	
	Если ИмяСчета="СчетНДС" Тогда
		ПараметрыДокумента = СписокПараметровВыбораСубконто(Форма, Форма.Объект, "СубконтоКт%Индекс%", "СчетНДС");
		БухгалтерскийУчетКлиентСервер.ИзменитьПараметрыВыбораПолейСубконто(
			Форма, Форма.Объект, "СубконтоКт%Индекс%", "СубконтоКт%Индекс%", ПараметрыДокумента);
	Иначе
		ПараметрыДокумента = СписокПараметровВыбораСубконто(Форма, Форма.Объект, "СубконтоДт%Индекс%", "СчетДт");
		БухгалтерскийУчетКлиентСервер.ИзменитьПараметрыВыбораПолейСубконто(
			Форма, Форма.Объект, "СубконтоДт%Индекс%", "СубконтоДт%Индекс%", ПараметрыДокумента);
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмненииСуммыОстаткаНа15Счете(СтрокаТабличнойЧасти)
	
	ЗначениеСтавкиНДС20 = УчетНДС.ПолучитьСтавкуНДС(Перечисления.СтавкиНДС.НДС20) / 100;
	
	СтрокаТабличнойЧасти.СуммаПоставки = СтрокаТабличнойЧасти.СуммаОстаток / (1 + ЗначениеСтавкиНДС20 * (1 - КоэффициентПропорциональногоНДС));		
	
	СтрокаТабличнойЧасти.НДСПоставки 							= СтрокаТабличнойЧасти.СуммаПоставки * ЗначениеСтавкиНДС20;
	
	СтрокаТабличнойЧасти.НДСПропорциональноКредитДоПерерасчета = (СтрокаТабличнойЧасти.НДСПоставки + СтрокаТабличнойЧасти.СуммаПоставки) - СтрокаТабличнойЧасти.СуммаОстаток;
	
	РассчитатьСуммуВключенияВКредит(СтрокаТабличнойЧасти);
	
	// проводим окончательный расчет
	РассчитатьКорректировкуБУНУ(Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПерерасчетЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;	
	
	ЗаполнитьПерерасчетСервер();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПерерасчетСервер()
	// очищаем документ
	Объект.ПараметрыПерерасчетаОС.Очистить();
	Объект.АвансыПоставщикам.Очистить();
	Объект.Остатки15Счета.Очистить();
	
	Для каждого СтрокаДок Из Объект.НалоговыеДокументы Цикл
	
		Если НЕ ЗначениеЗаполнено(СтрокаДок.П2) Тогда
			Продолжить;
		КонецЕсли;
		
		ДокОб = СтрокаДок.П2.ПолучитьОбъект();
		Попытка
			ДокОб.УстановитьПометкуУдаления(Истина);
		Исключение
		КонецПопытки;
		
	КонецЦикла;
	Объект.НалоговыеДокументы.Очистить();
	
	// заполняем перерасчет текущего года определяем суммы продаж (обл. и не обл. операции)
	НачПериода = НачалоГода(Объект.Дата);
	КонПериода = КонецМесяца(Объект.Дата);
	СтруктураПродажНДСТовары = НалоговыйУчет.ПолучитьСуммыОблагаемыхПоставокПоНДС(Объект.Организация, НачПериода, КонПериода, Объект.СпецРежимНалогообложения);
	
	Объект.СуммаВсехОпераций 		 = СтруктураПродажНДСТовары.СуммаВсехОпераций;
	Объект.СуммаОблагаемыхОпераций  = СтруктураПродажНДСТовары.СуммаОблагаемыхОпераций;
	
	// Теперь получим суммы приобретений товаров, то есть суммы, включенные в декларацию в строки 15, 16.1.2, 16.1.3 + все уточненки за указанный период
	Запрос = новый Запрос();
						   
	Запрос.УстановитьПараметр("НачПериода", НачПериода);
	Запрос.УстановитьПараметр("КонПериода", КонПериода);
	Запрос.УстановитьПараметр("Организация", Объект.Организация);

	ПропорциональныеОперации = Новый Массив();
	ПропорциональныеОперации.Добавить(Справочники.СтатьиНалоговыхДеклараций.НДС_НКПропорциональноВклВКредит);
	ПропорциональныеОперации.Добавить(Справочники.СтатьиНалоговыхДеклараций.НДС_НКПропорциональноВклВКредитПоставкаОФ);
	ПропорциональныеОперации.Добавить(Справочники.СтатьиНалоговыхДеклараций.НДС_НКПропорциональноНеВклВКредит);
	ПропорциональныеОперации.Добавить(Справочники.СтатьиНалоговыхДеклараций.НДС_НКПропорциональноНеВклВКредитПоставкаОФ);
	ПропорциональныеОперации.Добавить(Справочники.СтатьиНалоговыхДеклараций.НДС_НККорректировкаПропорциональноВклВКредит);
	ПропорциональныеОперации.Добавить(Справочники.СтатьиНалоговыхДеклараций.НДС_НККорректировкаПропорциональноВклВКредитПоставкаОФ);
	ПропорциональныеОперации.Добавить(Справочники.СтатьиНалоговыхДеклараций.НДС_НККорректировкаПропорциональноНеВклВКредит);
	ПропорциональныеОперации.Добавить(Справочники.СтатьиНалоговыхДеклараций.НДС_НККорректировкаПропорциональноНеВклВКредитПоставкаОФ);	
	Запрос.УстановитьПараметр("ПропорциональныеОперации", ПропорциональныеОперации);

	МассивОблагаемыеОперации = Новый Массив();
	МассивОблагаемыеОперации.Добавить(Справочники.СтатьиНалоговыхДеклараций.НДС_НКПропорциональноВклВКредит);
	МассивОблагаемыеОперации.Добавить(Справочники.СтатьиНалоговыхДеклараций.НДС_НКПропорциональноВклВКредитПоставкаОФ);
	МассивОблагаемыеОперации.Добавить(Справочники.СтатьиНалоговыхДеклараций.НДС_НККорректировкаПропорциональноВклВКредит);
	МассивОблагаемыеОперации.Добавить(Справочники.СтатьиНалоговыхДеклараций.НДС_НККорректировкаПропорциональноВклВКредитПоставкаОФ);
	Запрос.УстановитьПараметр("МассивОблагаемыеОперации", МассивОблагаемыеОперации);
	
	Запрос.УстановитьПараметр("СпецРежимНалогообложения", Объект.СпецРежимНалогообложения);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЕСТЬNULL(СУММА(НДСНалоговыйКредит.БазаНДСОборот), 0) КАК СуммаПоставки,
	               |	ЕСТЬNULL(СУММА(НДСНалоговыйКредит.НДСОборот), 0) КАК НДСПоставки,
	               |	ЕСТЬNULL(СУММА(ВЫБОР
	               |				КОГДА НДСНалоговыйКредит.СтатьяДекларацииНДСНалоговыйКредит В (&МассивОблагаемыеОперации)
	               |					ТОГДА НДСНалоговыйКредит.НДСОборот
	               |				ИНАЧЕ 0
	               |			КОНЕЦ), 0) КАК НДСПропорциональноКредитДоПерерасчета
	               |ИЗ
	               |	РегистрНакопления.НДСНалоговыйКредит.Обороты(
	               |			&НачПериода,
	               |			&КонПериода,
	               |			Регистратор,
	               |			Организация = &Организация
	               |				И СтатьяДекларацииНДСНалоговыйКредит В (&ПропорциональныеОперации)) КАК НДСНалоговыйКредит
	               |ГДЕ
	               |	ВЫБОР
	               |			КОГДА ЕСТЬNULL(НДСНалоговыйКредит.Регистратор.ВключаетсяВУточняющийРасчет, ЛОЖЬ)
	               |				ТОГДА НДСНалоговыйКредит.Регистратор.УточняемыйПериод МЕЖДУ &НачПериода И &КонПериода
	               |			ИНАЧЕ ИСТИНА
	               |		КОНЕЦ
	               |	И (     НДСНалоговыйКредит.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС20)
				   |		ИЛИ НДСНалоговыйКредит.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС14)
				   |		ИЛИ НДСНалоговыйКредит.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС7))
				   |    И ЕстьNULL(Регистратор.СпецРежимНалогообложения, 0) = &СпецРежимНалогообложения
				   |";	    
				   
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Объект.СуммаПоставки 						 = Выборка.СуммаПоставки;
		Объект.НДСПропорциональноКредитДоПерерасчета = Выборка.НДСПропорциональноКредитДоПерерасчета;
		Объект.НДСПоставки 						  	 = Выборка.НДСПоставки;
	КонецЕсли;
	
	// рассчитаем коэффициент
	РассчитатьКоэффициент(Объект);
	
	// заполним таблицу с авансами поставщиков
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("Период", КонецМесяца(Объект.Дата));
	Запрос.УстановитьПараметр("ПериодСторноЗаписейРегистрацииАвансов", КонецМесяца(Объект.Дата) + 2);
	Запрос.УстановитьПараметр("ПропорциональныйНДС", Перечисления.ВидыДеятельностиНДС.ПропорциональноОблагаемая);
	Запрос.УстановитьПараметр("КодОперацииОжидаемыйИПодтвержденныйНДСПриобретений", Перечисления.КодыОперацийОжидаемыйИПодтвержденныйНДСПриобретений.ОтменаРегистрацииАвансов);
	
	// запрос состоит из двух частей:
	// 1. договора с простым налоговым учетом - сумму аванса определяем как превышение суммы оплаты над отгрузкой на конец периода
	// 2. Договора со сложным налоговым учетом - сумму аванса определяем по сторно движениям, которые формирует документ "Регистрация авансов в налоговом учете" (по "пропорциональным" поставкам)
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВЫБОР
	               |		КОГДА ПриобретенияНалоговыйУчетОстатки.Событие = ЗНАЧЕНИЕ(Перечисление.СобытияПриобретенияНалоговыйУчет.ВозвратОплатыПоставщиком)
	               |				ИЛИ ПриобретенияНалоговыйУчетОстатки.Событие = ЗНАЧЕНИЕ(Перечисление.СобытияПриобретенияНалоговыйУчет.ВозвратПоставщику)
	               |			ТОГДА ИСТИНА
	               |		ИНАЧЕ ЛОЖЬ
	               |	КОНЕЦ КАК ЭтоВозврат,
	               |	ВЫБОР
	               |		КОГДА ПриобретенияНалоговыйУчетОстатки.Событие = ЗНАЧЕНИЕ(Перечисление.СобытияПриобретенияНалоговыйУчет.ВозвратОплатыПоставщиком)
	               |				ИЛИ ПриобретенияНалоговыйУчетОстатки.Событие = ЗНАЧЕНИЕ(Перечисление.СобытияПриобретенияНалоговыйУчет.ОплатаПоставщику)
	               |			ТОГДА ИСТИНА
	               |		ИНАЧЕ ЛОЖЬ
	               |	КОНЕЦ КАК ЭтоОплата,
	               |	ПриобретенияНалоговыйУчетОстатки.СуммаВзаиморасчетовОстаток КАК СуммаВзаиморасчетов,
	               |	ПриобретенияНалоговыйУчетОстатки.СуммаНДСОстаток КАК СуммаНДС,
	               |	ПриобретенияНалоговыйУчетОстатки.СуммаНДСПропорциональноОстаток КАК СуммаНДСПропорционально,
	               |	ПриобретенияНалоговыйУчетОстатки.СтавкаНДС,
	               |	ПриобретенияНалоговыйУчетОстатки.Сделка,
	               |	ПриобретенияНалоговыйУчетОстатки.ДоговорКонтрагента.Владелец КАК Контрагент,
	               |	ПриобретенияНалоговыйУчетОстатки.ДоговорКонтрагента,
				   |	ПриобретенияНалоговыйУчетОстатки.Амортизируется
	               |ПОМЕСТИТЬ ПростойУчет
	               |ИЗ
	               |	РегистрНакопления.ПриобретенияНалоговыйУчет.Остатки(
	               |			&Период,
	               |			Организация = &Организация
	               |				И ВидДеятельностиНДС = &ПропорциональныйНДС
	               |				) КАК ПриобретенияНалоговыйУчетОстатки
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ПростойУчет.Контрагент,
	               |	ПростойУчет.ДоговорКонтрагента,
	               |	ПростойУчет.Сделка,
				   |	ПростойУчет.Амортизируется,
				   |	ПростойУчет.ЭтоВозврат,
	               |	ПростойУчет.СтавкаНДС,
	               |	СУММА(ВЫБОР
	               |			КОГДА ПростойУчет.ЭтоОплата = ИСТИНА
	               |				ТОГДА ПростойУчет.СуммаВзаиморасчетов
	               |			ИНАЧЕ -ПростойУчет.СуммаВзаиморасчетов
	               |		КОНЕЦ) КАК СуммаВзаиморасчетов,
	               |	СУММА(ВЫБОР
	               |			КОГДА ПростойУчет.ЭтоОплата = ИСТИНА
	               |				ТОГДА ПростойУчет.СуммаНДС
	               |			ИНАЧЕ -ПростойУчет.СуммаНДС
	               |		КОНЕЦ) КАК СуммаНДС,
	               |	СУММА(ВЫБОР
	               |			КОГДА ПростойУчет.ЭтоОплата = ИСТИНА
	               |				ТОГДА ПростойУчет.СуммаНДСПропорционально
	               |			ИНАЧЕ -ПростойУчет.СуммаНДСПропорционально
	               |		КОНЕЦ) КАК СуммаНДСПропорционально
	               |ПОМЕСТИТЬ АвансыПростойУчет
	               |ИЗ
	               |	ПростойУчет КАК ПростойУчет
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ПростойУчет.Контрагент,
	               |	ПростойУчет.ДоговорКонтрагента,
				   |	ПростойУчет.Амортизируется,
	               |	ПростойУчет.Сделка,
	               |	ПростойУчет.ЭтоВозврат,
	               |	ПростойУчет.СтавкаНДС
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВЫБОР
	               |		КОГДА ОжидаемыйИПодтвержденныйНДСПриобретений.СобытиеНДС = ЗНАЧЕНИЕ(Перечисление.СобытияОжидаемыйИПодтвержденныйНДСПриобретений.Возврат)
	               |			ТОГДА ИСТИНА
	               |		ИНАЧЕ ЛОЖЬ
	               |	КОНЕЦ КАК ЭтоВозврат,
	               |	СУММА(-ОжидаемыйИПодтвержденныйНДСПриобретений.БазаНДС - ОжидаемыйИПодтвержденныйНДСПриобретений.СуммаНДС) КАК СуммаВзаиморасчетов,
	               |	СУММА(-ОжидаемыйИПодтвержденныйНДСПриобретений.СуммаНДС) КАК СуммаНДС,
	               |	СУММА(-ОжидаемыйИПодтвержденныйНДСПриобретений.СуммаНДСПропорционально) КАК СуммаНДСПропорционально,
	               |	ОжидаемыйИПодтвержденныйНДСПриобретений.СтавкаНДС,
	               |	ОжидаемыйИПодтвержденныйНДСПриобретений.Сделка,
	               |	ОжидаемыйИПодтвержденныйНДСПриобретений.ДоговорКонтрагента.Владелец КАК Контрагент,
	               |	ОжидаемыйИПодтвержденныйНДСПриобретений.ДоговорКонтрагента,
	               |	ОжидаемыйИПодтвержденныйНДСПриобретений.Амортизируется
	               |ПОМЕСТИТЬ АвансыСложныйУчет
	               |ИЗ
	               |	РегистрНакопления.ОжидаемыйИПодтвержденныйНДСПриобретений КАК ОжидаемыйИПодтвержденныйНДСПриобретений
	               |ГДЕ
	               |	ОжидаемыйИПодтвержденныйНДСПриобретений.Период = &ПериодСторноЗаписейРегистрацииАвансов
	               |	И ОжидаемыйИПодтвержденныйНДСПриобретений.КодОперации = &КодОперацииОжидаемыйИПодтвержденныйНДСПриобретений
	               |	И ОжидаемыйИПодтвержденныйНДСПриобретений.Организация = &Организация
	               |	И ОжидаемыйИПодтвержденныйНДСПриобретений.ВидДеятельностиНДС = &ПропорциональныйНДС
	               |	И ОжидаемыйИПодтвержденныйНДСПриобретений.БазаНДС < 0
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ВЫБОР
	               |		КОГДА ОжидаемыйИПодтвержденныйНДСПриобретений.СобытиеНДС = ЗНАЧЕНИЕ(Перечисление.СобытияОжидаемыйИПодтвержденныйНДСПриобретений.Возврат)
	               |			ТОГДА ИСТИНА
	               |		ИНАЧЕ ЛОЖЬ
	               |	КОНЕЦ,
	               |	ОжидаемыйИПодтвержденныйНДСПриобретений.СтавкаНДС,
	               |	ОжидаемыйИПодтвержденныйНДСПриобретений.Сделка,
	               |	ОжидаемыйИПодтвержденныйНДСПриобретений.Амортизируется,
	               |	ОжидаемыйИПодтвержденныйНДСПриобретений.ДоговорКонтрагента,
	               |	ОжидаемыйИПодтвержденныйНДСПриобретений.ДоговорКонтрагента.Владелец
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	АвансыПростойУчет.Контрагент,
	               |	АвансыПростойУчет.ДоговорКонтрагента,
				   |	АвансыПростойУчет.Амортизируется,
				   |	АвансыПростойУчет.ДоговорКонтрагента.СложныйНалоговыйУчет КАК СложныйНалоговыйУчет,
	               |	АвансыПростойУчет.Сделка,
	               |	ВЫБОР
	               |		КОГДА АвансыПростойУчет.ЭтоВозврат = ИСТИНА
	               |			ТОГДА ЗНАЧЕНИЕ(Перечисление.РасчетыВозврат.Возврат)
	               |		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.РасчетыВозврат.Расчеты)
	               |	КОНЕЦ КАК РасчетыВозврат,
	               |	АвансыПростойУчет.СтавкаНДС,
	               |	АвансыПростойУчет.СуммаВзаиморасчетов КАК СуммаАванса,
	               |	АвансыПростойУчет.СуммаНДС КАК НДСПоставки,
	               |	АвансыПростойУчет.СуммаНДСПропорционально КАК НДСПропорциональноКредитДоПерерасчета
	               |ИЗ
	               |	АвансыПростойУчет КАК АвансыПростойУчет
	               |ГДЕ
	               |	АвансыПростойУчет.СуммаВзаиморасчетов > 0
	               |	И АвансыПростойУчет.СуммаНДСПропорционально <> 0
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	АвансыСложныйУчет.Контрагент,
	               |	АвансыСложныйУчет.ДоговорКонтрагента,
				   |	АвансыСложныйУчет.Амортизируется,
	               |	АвансыСложныйУчет.ДоговорКонтрагента.СложныйНалоговыйУчет,
	               |	АвансыСложныйУчет.Сделка,
	               |	ВЫБОР
	               |		КОГДА АвансыСложныйУчет.ЭтоВозврат = ИСТИНА
	               |			ТОГДА ЗНАЧЕНИЕ(Перечисление.РасчетыВозврат.Возврат)
	               |		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.РасчетыВозврат.Расчеты)
	               |	КОНЕЦ,
	               |	АвансыСложныйУчет.СтавкаНДС,
	               |	АвансыСложныйУчет.СуммаВзаиморасчетов,
	               |	АвансыСложныйУчет.СуммаНДС,
	               |	АвансыСложныйУчет.СуммаНДСПропорционально
	               |ИЗ
	               |	АвансыСложныйУчет КАК АвансыСложныйУчет
				   |УПОРЯДОЧИТЬ ПО 
				   |	Контрагент,
				   |	ДоговорКонтрагента,
				   |	Сделка
				   |АВТОУПОРЯДОЧИВАНИЕ";
	
	Если Объект.СпецРежимНалогообложения = 0 Тогда
					   
		ТаблицаОстатков = Запрос.Выполнить().Выгрузить();			
		Для каждого СтрокаОстатков ИЗ ТаблицаОстатков Цикл

			СтрокаАвасов = Объект.АвансыПоставщикам.Добавить();
			
		    ЗаполнитьЗначенияСвойств(СтрокаАвасов, СтрокаОстатков);
			
			СтрокаАвасов.НДСПропорциональноКредит = СтрокаАвасов.НДСПоставки * Объект.Коэффициент / 100;
			
			СтрокаАвасов.СуммаКорректировкиНДС = ?(СтрокаАвасов.РасчетыВозврат = Перечисления.РасчетыВозврат.Расчеты, СтрокаАвасов.НДСПропорциональноКредит, 			   - СтрокаАвасов.НДСПропорциональноКредит)
									 		   - ?(СтрокаАвасов.РасчетыВозврат = Перечисления.РасчетыВозврат.Расчеты, СтрокаАвасов.НДСПропорциональноКредитДоПерерасчета, - СтрокаАвасов.НДСПропорциональноКредитДоПерерасчета);
			
			СчетаУчета = БухгалтерскийУчетРасчетовСКонтрагентами.ПолучитьСчетаРасчетовСКонтрагентом(Объект.Организация, СтрокаАвасов.Контрагент, СтрокаАвасов.ДоговорКонтрагента);
			
			Если СтрокаОстатков.СложныйНалоговыйУчет = Истина Тогда
			    СтрокаАвасов.СчетУчетаНДС = СчетаУчета.СчетУчетаНДСПриобретений;
			Иначе	
				СтрокаАвасов.СчетУчетаНДС = СчетаУчета.СчетУчетаНДСПриобретенийПодтвержденный;
			КонецЕсли;
			
		КонецЦикла;
	
	Иначе	
		
		Сообщить(НСтр("ru='Табличные части:
|   ""Авансы поставщикам"" и ""Остатки по счетам капитальных инвестиций"" 
|заполняются только для документа, который не относится к спец. режиму налогообложения. Требуемую информацию необходимо вручную перенести в данный документ!';uk='Табличні частини:
|   ""Аванси постачальникам"" та ""Залишки на рахунках капітальних інвестицій"" 
|заповнюються тільки для документа, який не відноситься до спец. режиму оподаткування. Потрібну інформацію потрібно перенести в цей документ вручну.'")
				 , СтатусСообщения.Информация);
		
	КонецЕсли;				   
	
	// заполняем перерасчет ОС, по результатам 1,2,3 лет после ввода в эксплуатацию, а также для ОС, которые введены в текущем году
	ЗаполнитьДанныеПоОС();
	
	Если Объект.СпецРежимНалогообложения = 0 Тогда
	
		// Заполняем данные по остаткам на счете 15 (если был прирост остатка, его нужно переоценить на корректировку кредита
		ЗаполнитьДанныеПоОстаткам15Счета();
		
	КонецЕсли;
	
	// проводим окончательный расчет
	РассчитатьКорректировкуБУНУ(Объект);
    ЗаполнитьКолонкиПараметрыПерерасчетаОС();	
	
	ЗаполнитьНалоговыеДокументы();
	
	ПоказатьИтогСуммыКорректировкиНалоговыхДокументов(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеПоОС()
	
	// Получим данные по ОС (данные по объемам продаж - за последние три года
	ПериодИспользованияПослеГодаВводаВЭксплуатацию2Года = НачалоГода(ДобавитьМесяц(Объект.Дата, -12));
	ПериодИспользованияПослеГодаВводаВЭксплуатацию3Года = НачалоГода(ДобавитьМесяц(Объект.Дата, -24));
	
	КонПериода = КонецМесяца(Объект.Дата);
	
	СтруктураПродаж2года = НалоговыйУчет.ПолучитьСуммыОблагаемыхПоставокПоНДС(Объект.Организация, ПериодИспользованияПослеГодаВводаВЭксплуатацию2Года, КонПериода, Объект.СпецРежимНалогообложения);
	СтруктураПродаж3года = НалоговыйУчет.ПолучитьСуммыОблагаемыхПоставокПоНДС(Объект.Организация, ПериодИспользованияПослеГодаВводаВЭксплуатацию3Года, КонПериода, Объект.СпецРежимНалогообложения);
	
	Объект.СуммаВсехОпераций2года 		 = СтруктураПродаж2года.СуммаВсехОпераций;
	Объект.СуммаОблагаемыхОпераций2Года = СтруктураПродаж2года.СуммаОблагаемыхОпераций;
	РассчитатьКоэффициент2Года();
	
	Объект.СуммаВсехОпераций3Года 		 = СтруктураПродаж3года.СуммаВсехОпераций;
	Объект.СуммаОблагаемыхОпераций3Года = СтруктураПродаж3года.СуммаОблагаемыхОпераций;
	РассчитатьКоэффициент3Года();
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("КонПериода", КонПериода);
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	
	Запрос.УстановитьПараметр("Период1", НачалоГода(ДобавитьМесяц(Объект.Дата, -36)));
	Запрос.УстановитьПараметр("Период2", КонецГода(Объект.Дата));
	Запрос.УстановитьПараметр("Период3", НачалоГода(Объект.Дата));
	
	Запрос.УстановитьПараметр("СпецРежимНалогообложения", Объект.СпецРежимНалогообложения);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	СтоимостьПриобретенияОСПропорциональноОблагаемыхНДСОстатки.НеоборотныйАктив,
	               |	МИНИМУМ(СтоимостьПриобретенияОСПропорциональноОблагаемыхНДСОстатки.ДатаНачалаИспользования) КАК ДатаНачалаИспользования,
	               |	МАКСИМУМ(СтоимостьПриобретенияОСПропорциональноОблагаемыхНДСОстатки.ДатаФормированияКредита) КАК ДатаФормированияКредита,
	               |	СУММА(СтоимостьПриобретенияОСПропорциональноОблагаемыхНДСОстатки.БазаНДСОстаток) КАК СуммаПоставки,
	               |	СУММА(СтоимостьПриобретенияОСПропорциональноОблагаемыхНДСОстатки.СуммаНДСОстаток) КАК НДСПоставки,
	               |	СУММА(СтоимостьПриобретенияОСПропорциональноОблагаемыхНДСОстатки.СуммаНДСПропорциональноКредитОстаток) КАК НДСПропорциональноКредитДоПерерасчета
	               |ИЗ
	               |	РегистрНакопления.СтоимостьПриобретенияОСПропорциональноОблагаемыхНДС.Остатки(
	               |			&КонПериода,
	               |			Организация = &Организация
	               |				И СпецРежимНалогообложения = &СпецРежимНалогообложения
	               |				И ДатаНачалаИспользования >= &Период1
				   |				И ДатаНачалаИспользования <= &Период2                                                                     
				   |				И (ДатаНачалаИспользования < &Период3 ИЛИ (ДатаНачалаИспользования >=&Период3 И ДатаФормированияКредита >= &Период3))
				   |				) КАК СтоимостьПриобретенияОСПропорциональноОблагаемыхНДСОстатки
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	СтоимостьПриобретенияОСПропорциональноОблагаемыхНДСОстатки.НеоборотныйАктив
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	СтоимостьПриобретенияОСПропорциональноОблагаемыхНДСОстатки.НеоборотныйАктив
	               |АВТОУПОРЯДОЧИВАНИЕ";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если (Год(Объект.Дата) >= 2016) 
			И (Выборка.ДатаНачалаИспользования < НачалоГода(Объект.Дата)) 
			И (Выборка.ДатаФормированияКредита >= '20150701') 
			Тогда
			Продолжить;
		КонецЕсли;
	
		СтрокаТЧ = Объект.ПараметрыПерерасчетаОС.Добавить();	
		
		ЗаполнитьЗначенияСвойств(СтрокаТЧ, Выборка);
		
		Если Выборка.ДатаНачалаИспользования >= НачалоГода(Объект.Дата)  Тогда
			
			// данные по продажам = из шапки документа
			СтрокаТЧ.СуммаВсехОпераций 		 = Объект.СуммаВсехОпераций;
			СтрокаТЧ.СуммаОблагаемыхОпераций = Объект.СуммаОблагаемыхОпераций;
			СтрокаТЧ.Коэффициент 			 = Объект.Коэффициент;
			
		ИначеЕсли Выборка.ДатаНачалаИспользования >= ПериодИспользованияПослеГодаВводаВЭксплуатацию2Года  Тогда
			
			СтрокаТЧ.СуммаВсехОпераций 		 = Объект.СуммаВсехОпераций;
			СтрокаТЧ.СуммаОблагаемыхОпераций = Объект.СуммаОблагаемыхОпераций;
			СтрокаТЧ.Коэффициент 			 = Объект.Коэффициент;
			
		ИначеЕсли Выборка.ДатаНачалаИспользования >= ПериодИспользованияПослеГодаВводаВЭксплуатацию3Года  Тогда
			
			СтрокаТЧ.СуммаВсехОпераций 		 = Объект.СуммаВсехОпераций2года;
			СтрокаТЧ.СуммаОблагаемыхОпераций = Объект.СуммаОблагаемыхОпераций2Года;
			СтрокаТЧ.Коэффициент			 = Объект.Коэффициент2Года; 
			
		Иначе
			
			СтрокаТЧ.СуммаВсехОпераций 		 = Объект.СуммаВсехОпераций3Года;
			СтрокаТЧ.СуммаОблагаемыхОпераций = Объект.СуммаОблагаемыхОпераций3Года;
			СтрокаТЧ.Коэффициент			 = Объект.Коэффициент3Года; 
			
		КонецЕсли;	
		
	КонецЦикла;
	
	// заполним данные по балансовой стоимости и амортизации
	
	//1. для ОС
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("ДатаИтогов" , Объект.Дата);
	
	ТаблицаОС = Объект.ПараметрыПерерасчетаОС.Выгрузить();
	СписокОС = ТаблицаОС.ВыгрузитьКолонку("НеоборотныйАктив");
	
	Запрос.УстановитьПараметр("СписокОС"  , СписокОС);
	Запрос.УстановитьПараметр("СубконтоОС", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПредварительныйЗапрос.ОС КАК ОС,
	|	СУММА(ПредварительныйЗапрос.СтоимостьБУ) КАК СтоимостьБУ,
	|	СУММА(ПредварительныйЗапрос.АмортизацияБУ) КАК АмортизацияБУ,
	|	СУММА(ПредварительныйЗапрос.СтоимостьНУ) КАК СтоимостьНУ,
	|	СУММА(ПредварительныйЗапрос.АмортизацияНУ) КАК АмортизацияНУ
	|ИЗ
	|	(ВЫБРАТЬ
	|		СтоимостьБУ.Субконто1 КАК ОС,
	|		СтоимостьБУ.СуммаОстатокДт КАК СтоимостьБУ,
	|		0 КАК АмортизацияБУ,
	|		СтоимостьБУ.СуммаНУОстатокДт КАК СтоимостьНУ,
	|		0 КАК АмортизацияНУ
	|	ИЗ
	|		РегистрБухгалтерии.Хозрасчетный.Остатки(
	|				&ДатаИтогов,
	|				Счет В
	|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|						СчетаБухгалтерскогоУчета.СчетУчета
	|					ИЗ
	|						РегистрСведений.СчетаБухгалтерскогоУчетаОС.СрезПоследних(&ДатаИтогов, Организация = &Организация
	|							И ОсновноеСредство В (&СписокОС)) КАК СчетаБухгалтерскогоУчета),
	|				&СубконтоОС,
	|				Организация = &Организация
	|					И Субконто1 В (&СписокОС)) КАК СтоимостьБУ
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ПереоценкаОСБухгалтерскийУчет.Остатки(
	|					&ДатаИтогов,
	|					Организация = &Организация
	|						И ОсновноеСредство В (&СписокОС)) КАК ПереоценкаОС
	|			ПО СтоимостьБУ.Субконто1 = ПереоценкаОС.ОсновноеСредство
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		АмортизацияБУ.Субконто1,
	|		0,
	|		АмортизацияБУ.СуммаОстатокКт,
	|		0,
	|		АмортизацияБУ.СуммаНУОстатокКт
	|	ИЗ
	|		РегистрБухгалтерии.Хозрасчетный.Остатки(
	|				&ДатаИтогов,
	|				Счет В
	|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|						СчетаБухгалтерскогоУчета.СчетНачисленияАмортизации
	|					ИЗ
	|						РегистрСведений.СчетаБухгалтерскогоУчетаОС.СрезПоследних(&ДатаИтогов, Организация = &Организация
	|							И ОсновноеСредство В (&СписокОС)) КАК СчетаБухгалтерскогоУчета),
	|				&СубконтоОС,
	|				Организация = &Организация
	|					И Субконто1 В (&СписокОС)) КАК АмортизацияБУ) КАК ПредварительныйЗапрос
	|
	|СГРУППИРОВАТЬ ПО
	|	ПредварительныйЗапрос.ОС";
	
	ТЗ = Запрос.Выполнить().Выгрузить();
	
	Для Каждого Строка Из Объект.ПараметрыПерерасчетаОС Цикл
		
		СтрокаТЗ = ТЗ.Найти(Строка.НеоборотныйАктив, "ОС"); 
		
		Если НЕ СтрокаТЗ = Неопределено Тогда
			
			Строка.СтоимостьБУ          = СтрокаТЗ.СтоимостьБУ;
			Строка.АмортизацияБУ        = СтрокаТЗ.АмортизацияБУ;
			Строка.СтоимостьНУ          = СтрокаТЗ.СтоимостьНУ;
			Строка.АмортизацияНУ        = СтрокаТЗ.АмортизацияНУ;
			
		КонецЕсли;
		
	КонецЦикла;

	//2. для НМА
	ТаблицаНМА = Объект.ПараметрыПерерасчетаОС.Выгрузить();
	СписокНМА = ТаблицаНМА.ВыгрузитьКолонку("НеоборотныйАктив");

	Запрос   = Новый Запрос;
	Запрос.УстановитьПараметр("Организация"   , Объект.Организация);
	Запрос.УстановитьПараметр("СписокНМА"     , СписокНМА);
	Запрос.УстановитьПараметр("Период"        , Объект.Дата);
	Запрос.УстановитьПараметр("СубконтоНМА"   , ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НематериальныеАктивы);
	Запрос.УстановитьПараметр("ДатаДока"      , Объект.Дата);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПервоначальныеСведения.НематериальныйАктив КАК НематериальныйАктив,
	|	СтоимостьОстатки.СуммаОстатокДт КАК СтоимостьБУ,
	|	СтоимостьОстатки.СуммаНУОстатокДт КАК СтоимостьНУ,
	|	АмортизацияОстатки.СуммаОстатокКт КАК АмортизацияБУ,
	|	АмортизацияОстатки.СуммаНУОстатокКт КАК АмортизацияНУ
	|ИЗ
	|	РегистрСведений.ПервоначальныеСведенияНМАБухгалтерскийУчет.СрезПоследних(
	|			&Период,
	|			Организация = &Организация
	|				И НематериальныйАктив В (&СписокНМА)) КАК ПервоначальныеСведения
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.Остатки(
	|				&Период,
	|				Счет В
	|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|						СчетаБУ.СчетУчета
	|					ИЗ
	|						РегистрСведений.СчетаБухгалтерскогоУчетаНМА.СрезПоследних(&Период, Организация = &Организация
	|							И НематериальныйАктив В (&СписокНМА)) КАК СчетаБУ),
	|				&СубконтоНМА,
	|				Организация = &Организация
	|					И Субконто1 В (&СписокНМА)) КАК СтоимостьОстатки
	|		ПО ПервоначальныеСведения.НематериальныйАктив = СтоимостьОстатки.Субконто1
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.Остатки(
	|				&Период,
	|				Счет В
	|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|						СчетаБУ.СчетНачисленияАмортизации
	|					ИЗ
	|						РегистрСведений.СчетаБухгалтерскогоУчетаНМА.СрезПоследних(&Период, Организация = &Организация
	|							И НематериальныйАктив В (&СписокНМА)) КАК СчетаБУ),
	|				&СубконтоНМА,
	|				Организация = &Организация
	|					И Субконто1 В (&СписокНМА)) КАК АмортизацияОстатки
	|		ПО ПервоначальныеСведения.НематериальныйАктив = АмортизацияОстатки.Субконто1";
	ТЗ_БУ = Запрос.Выполнить().Выгрузить();
	
	Для каждого Строка Из Объект.ПараметрыПерерасчетаОС Цикл

		// В соответствующие поля строки запишем данные из запроса
		СтрокаТЗБУ = ТЗ_БУ.Найти(Строка.НеоборотныйАктив, "НематериальныйАктив");

		Если НЕ СтрокаТЗБУ = Неопределено Тогда

			Строка.СтоимостьБУ                  = СтрокаТЗБУ.СтоимостьБУ;
			Строка.СтоимостьНУ                  = СтрокаТЗБУ.СтоимостьНУ;
			Строка.АмортизацияБУ                = СтрокаТЗБУ.АмортизацияБУ;
			Строка.АмортизацияНУ                = СтрокаТЗБУ.АмортизацияНУ;

		КонецЕсли;

	КонецЦикла;
	
	// 3. Малоценка без пообъектного учета
	// такие объекты полностью амортизированы, поэтому для правильности работы алгоритма проведения приравняем стоимости и амортизации к стоимости их приобретения
	Для каждого СтрокаТЧ Из Объект.ПараметрыПерерасчетаОС Цикл
		Если ТипЗнч(СтрокаТЧ.НеоборотныйАктив) = Тип("СправочникСсылка.Номенклатура") Тогда
		
			СтрокаТЧ.СтоимостьБУ                  = СтрокаТЧ.СуммаПоставки + СтрокаТЧ.НДСПоставки - СтрокаТЧ.НДСПропорциональноКредитДоПерерасчета;
			СтрокаТЧ.СтоимостьНУ                  = СтрокаТЧ.СтоимостьБУ;
			СтрокаТЧ.АмортизацияБУ                = СтрокаТЧ.СтоимостьБУ;
			СтрокаТЧ.АмортизацияНУ                = СтрокаТЧ.СтоимостьБУ;
		
		КонецЕсли;
	КонецЦикла;
	
	// 4. пометим список тех ОС и НМА, которые уже не состоят на учете в организации (по ним не нужно пересчитывать амортизацию)
	МассивСписанныхОС = новый Массив;
	
	// 4.1 ОС
	ТаблицаОС = Объект.ПараметрыПерерасчетаОС.Выгрузить();
	СписокОС = ТаблицаОС.ВыгрузитьКолонку("НеоборотныйАктив");
	
	Запрос   = Новый Запрос;
	Запрос.УстановитьПараметр("НаДату"  , Объект.Дата);
	Запрос.УстановитьПараметр("СписокОС", СписокОС);
	Запрос.УстановитьПараметр("Списано" , Перечисления.СостоянияОС.СнятоСУчета);
	
	МассивСостояний = Новый Массив(2);
	МассивСостояний[0] = Перечисления.СостоянияОС.ВведеноВЭксплуатацию;
	МассивСостояний[1] = Перечисления.СостоянияОС.СнятоСУчета;
	Запрос.УстановитьПараметр("СписокСостояний", МассивСостояний);
	
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СостоянияОС.ОсновноеСредство КАК ОС_БУ,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА СостоянияОС.Состояние = &Списано
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ) КАК Списано
	|ИЗ
	|	РегистрСведений.СостоянияОСОрганизаций КАК СостоянияОС
	|ГДЕ
	|	СостоянияОС.Организация = &Организация
	|	И СостоянияОС.ОсновноеСредство В(&СписокОС)
	|	И СостоянияОС.Состояние В(&СписокСостояний)
	|	И СостоянияОС.ДатаСостояния <= &НаДату
	|
	|СГРУППИРОВАТЬ ПО
	|	СостоянияОС.ОсновноеСредство";
	ТаблицаСведений = Запрос.Выполнить().Выгрузить();
	
	Для каждого СтрокаТЧ Из Объект.ПараметрыПерерасчетаОС Цикл
		
		ТекОС          = СтрокаТЧ.НеоборотныйАктив;
		СтрокаСведений = ТаблицаСведений.Найти(ТекОС, "ОС_БУ");
		
		Если НЕ СтрокаСведений = Неопределено Тогда
			
			Если СтрокаСведений.Списано Тогда
				МассивСписанныхОС.Добавить(СтрокаТЧ);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// 4.2 НМА
	ТаблицаНМА = Объект.ПараметрыПерерасчетаОС.Выгрузить();
	СписокНМА = ТаблицаНМА.ВыгрузитьКолонку("НеоборотныйАктив");
	
	Запрос   = Новый Запрос;
	Запрос.УстановитьПараметр("НаДату"  ,    Объект.Дата);
	Запрос.УстановитьПараметр("СписокОС",    СписокНМА);
	Запрос.УстановитьПараметр("Списано" ,    Перечисления.ВидыСостоянийНМА.Списан);
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СостоянияНМА.НематериальныйАктив КАК НМА_БУ,
	|	ВЫБОР
	|		КОГДА СостоянияНМА.Состояние = &Списано
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Списано
	|ИЗ
	|	РегистрСведений.СостоянияНМАОрганизаций.СрезПоследних(
	|			&НаДату,
	|			НематериальныйАктив В (&СписокОС)
	|				И Организация = &Организация) КАК СостоянияНМА";
	ТаблицаСведений = Запрос.Выполнить().Выгрузить();
	
	Для каждого СтрокаТЧ Из Объект.ПараметрыПерерасчетаОС Цикл
		
		ТекНМА          = СтрокаТЧ.НеоборотныйАктив;
		СтрокаСведений = ТаблицаСведений.Найти(ТекНМА, "НМА_БУ");
		
		Если НЕ СтрокаСведений = Неопределено Тогда
			
			Если СтрокаСведений.Списано Тогда
				МассивСписанныхОС.Добавить(СтрокаТЧ);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// 4.3 пометим строки по каким не пересчитывается амортизация
	Для каждого СтрокаТЧ Из МассивСписанныхОС Цикл
		СтрокаТЧ.ОССписан = Истина;	
	КонецЦикла;
	
	
	// 5. проводим построчный расче
	Для каждого СтрокаТЧ Из Объект.ПараметрыПерерасчетаОС Цикл
		РассчитатьСуммуВключенияВКредит(СтрокаТЧ);
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеПоОстаткам15Счета()

	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("НачПериода", 		 НачалоГода(Объект.Дата));
	Запрос.УстановитьПараметр("КонПериода", 		 КонецМесяца(Объект.Дата));
	
	Запрос.УстановитьПараметр("ПропорциональныйНДС", Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_Пропорционально);
	Запрос.УстановитьПараметр("Счет15", ПланыСчетов.Хозрасчетный.КапитальныеИнвестиции);
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ХозрасчетныйОстатки.Счет,
				   
	               |	ВЫБОР
	               |		КОГДА ХозрасчетныйОстатки.Субконто1 ССЫЛКА Справочник.Склады
	               |			ТОГДА ХозрасчетныйОстатки.Субконто1
	               |		КОГДА ХозрасчетныйОстатки.Субконто2 ССЫЛКА Справочник.Склады
	               |			ТОГДА ХозрасчетныйОстатки.Субконто2
	               |		КОГДА ХозрасчетныйОстатки.Субконто3 ССЫЛКА Справочник.Склады
	               |			ТОГДА ХозрасчетныйОстатки.Субконто3
	               |		ИНАЧЕ Неопределено
	               |	КОНЕЦ КАК Склад,
				   
				   //|	ВЫБОР
				   //|		КОГДА ХозрасчетныйОстатки.Субконто1 ССЫЛКА Справочник.НоменклатурныеПозиции
				   //|			ТОГДА ХозрасчетныйОстатки.Субконто1
				   //|		КОГДА ХозрасчетныйОстатки.Субконто2 ССЫЛКА Справочник.НоменклатурныеПозиции
				   //|			ТОГДА ХозрасчетныйОстатки.Субконто2
				   //|		КОГДА ХозрасчетныйОстатки.Субконто3 ССЫЛКА Справочник.НоменклатурныеПозиции
				   //|			ТОГДА ХозрасчетныйОстатки.Субконто3
				   //|		КОГДА ХозрасчетныйОстатки.Субконто4 ССЫЛКА Справочник.НоменклатурныеПозиции
				   //|			ТОГДА ХозрасчетныйОстатки.Субконто4
				   //|		ИНАЧЕ Неопределено
				   //|	КОНЕЦ КАК НоменклатурнаяПозиция,
				   
				   |	ХозрасчетныйОстатки.Субконто1 КАК Субконто1,
				   |	ХозрасчетныйОстатки.Субконто2 КАК Субконто2,
	               |	ХозрасчетныйОстатки.Субконто3 КАК Субконто3,
				   
				   |	ХозрасчетныйОстаткиНаНачало.Счет,
				   |	ХозрасчетныйОстаткиНаНачало.Субконто1,
				   |	ХозрасчетныйОстаткиНаНачало.Субконто2,
	               |	ХозрасчетныйОстаткиНаНачало.Субконто3,
				   
				   
	               |	ХозрасчетныйОстатки.СуммаОстатокДт - ЕстьNULL(ХозрасчетныйОстаткиНаНачало.СуммаОстатокДт, 0) КАК СуммаОстаток,
				   |	ВЫБОР КОГДА ХозрасчетныйОстатки.СуммаНУОстатокДт > 0 ТОГДА ИСТИНА ИНАЧЕ ЛОЖЬ КОНЕЦ КАК КорректироватьПоНУ
	               |ИЗ
	               |	РегистрБухгалтерии.Хозрасчетный.Остатки(
	               |			&КонПериода,
	               |			Счет В ИЕРАРХИИ (&Счет15),
	               |			,
	               |			Организация = &Организация
	               |				И НалоговоеНазначение = &ПропорциональныйНДС) КАК ХозрасчетныйОстатки
				   |ЛЕВОЕ СОЕДИНЕНИЕ
	               |	РегистрБухгалтерии.Хозрасчетный.Остатки(
	               |			&НачПериода,
	               |			Счет В ИЕРАРХИИ (&Счет15),
	               |			,
	               |			Организация = &Организация
	               |				И НалоговоеНазначение = &ПропорциональныйНДС) КАК ХозрасчетныйОстаткиНаНачало
				   |ПО 
				   |	ХозрасчетныйОстатки.Счет      = ХозрасчетныйОстаткиНаНачало.Счет
				   |  И ЕстьNULL(ХозрасчетныйОстатки.Субконто1, Истина) = ЕстьNULL(ХозрасчетныйОстаткиНаНачало.Субконто1, Истина)
				   |  И ЕстьNULL(ХозрасчетныйОстатки.Субконто2, Истина) = ЕстьNULL(ХозрасчетныйОстаткиНаНачало.Субконто2, Истина)
				   |  И ЕстьNULL(ХозрасчетныйОстатки.Субконто3, Истина) = ЕстьNULL(ХозрасчетныйОстаткиНаНачало.Субконто3, Истина)
				   //|  И ЕстьNULL(ХозрасчетныйОстатки.Субконто4, Истина) = ЕстьNULL(ХозрасчетныйОстаткиНаНачало.Субконто4, Истина)
				   |
				   |ГДЕ   ХозрасчетныйОстатки.СуммаОстатокДт > ЕстьNULL(ХозрасчетныйОстаткиНаНачало.СуммаОстатокДт, 0)
				   |	И ХозрасчетныйОстатки.СуммаОстатокДт > 0
				   |УПОРЯДОЧИТЬ ПО 
				   |	ХозрасчетныйОстатки.Счет,
				   |	Субконто1,
				   |	Субконто2,
				   |	Субконто3
				   |АВТОУПОРЯДОЧИВАНИЕ";
				   
	ТипДокументы = Документы.ТипВсеСсылки();
	ТипНМА = Тип("СправочникСсылка.НематериальныеАктивы");
	ТипТов = Тип("СправочникСсылка.Номенклатура");
	ТипБА  = Тип("СправочникСсылка.БиологическиеАктивы");
	ТипОбС = Тип("СправочникСсылка.ОбъектыСтроительства");
	
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		СтрокаОстатков = Объект.Остатки15Счета.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаОстатков, Выборка);
		
		Если  ЗначениеЗаполнено(Выборка.Субконто1) 
			И ТипДокументы.СодержитТип(ТипЗнч(Выборка.Субконто1)) Тогда
			
			СтрокаОстатков.Партия = Выборка.Субконто1;
		
		ИначеЕсли  ЗначениеЗаполнено(Выборка.Субконто2) 
			И ТипДокументы.СодержитТип(ТипЗнч(Выборка.Субконто2)) Тогда
			
			СтрокаОстатков.Партия = Выборка.Субконто2;
		
		ИначеЕсли  ЗначениеЗаполнено(Выборка.Субконто3) 
			И ТипДокументы.СодержитТип(ТипЗнч(Выборка.Субконто3)) Тогда
			
			СтрокаОстатков.Партия = Выборка.Субконто3;
		
		КонецЕсли;
		
		Если  ЗначениеЗаполнено(Выборка.Субконто1) 
			И (    ТипЗнч(Выборка.Субконто1) = ТипНМА
			   ИЛИ ТипЗнч(Выборка.Субконто1) = ТипТов
			   ИЛИ ТипЗнч(Выборка.Субконто1) = ТипБА
			   ИЛИ ТипЗнч(Выборка.Субконто1) = ТипОбС) Тогда
			
			СтрокаОстатков.НеоборотныйАктив = Выборка.Субконто1;
		
		ИначеЕсли  ЗначениеЗаполнено(Выборка.Субконто2) 
			И (    ТипЗнч(Выборка.Субконто2) = ТипНМА
			   ИЛИ ТипЗнч(Выборка.Субконто2) = ТипТов
			   ИЛИ ТипЗнч(Выборка.Субконто2) = ТипБА
			   ИЛИ ТипЗнч(Выборка.Субконто2) = ТипОбС) Тогда
			
			СтрокаОстатков.НеоборотныйАктив = Выборка.Субконто2;
		
		ИначеЕсли  ЗначениеЗаполнено(Выборка.Субконто3) 
			И (    ТипЗнч(Выборка.Субконто3) = ТипНМА
			   ИЛИ ТипЗнч(Выборка.Субконто3) = ТипТов
			   ИЛИ ТипЗнч(Выборка.Субконто3) = ТипБА
			   ИЛИ ТипЗнч(Выборка.Субконто3) = ТипОбС) Тогда
			
			СтрокаОстатков.НеоборотныйАктив = Выборка.Субконто3;
		
		КонецЕсли;
		
		СтрокаОстатков.Коэффициент = Объект.Коэффициент;
		
		ПриИзмненииСуммыОстаткаНа15Счете(СтрокаОстатков);
	
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНалоговыеДокументы(Перезаполнить = Ложь)
	
	КэшП2 = Неопределено;
	КоэффициентОбратный = (100 - Объект.Коэффициент) / 100;
	
	// сформируем и заполним табличу, которой будет все входящие налоговые документы, зарегистрированные как входящий пропорциональный НДС
	// Нам под каждое такое приобретение потребуется найти сводную налоговую накладную на условную продажу, к которой мы выпишем приложение 2 на сумму корректировки НДС.
	ВходящиеНалоговыеДокументы = Новый ТаблицаЗначений();
	ВходящиеНалоговыеДокументы.Колонки.Добавить("Период", 			Новый ОписаниеТипов("Дата"));
	ВходящиеНалоговыеДокументы.Колонки.Добавить("Ссылка", 			Новый ОписаниеТипов(Документы.ТипВсеСсылки()));
	ВходящиеНалоговыеДокументы.Колонки.Добавить("СтавкаНДС", 		Новый ОписаниеТипов("ПеречислениеСсылка.СтавкиНДС"));
	ВходящиеНалоговыеДокументы.Колонки.Добавить("СуммаПоставки", 	Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	ВходящиеНалоговыеДокументы.Колонки.Добавить("НДСПоставки", 		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	ВходящиеНалоговыеДокументы.Колонки.Добавить("НДСУсловнаяПродажаДоПересчета", 		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(12, 2)));
	ВходящиеНалоговыеДокументы.Колонки.Добавить("СуммаПоставкиУсловнаяПродажаДоПересчета",Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));	
	ВходящиеНалоговыеДокументы.Колонки.Добавить("НДСУсловнаяПродажа",					Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	ВходящиеНалоговыеДокументы.Колонки.Добавить("СуммаКорректировкиНДСОбязательств",  	Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(12, 2)));
	ВходящиеНалоговыеДокументы.Колонки.Добавить("СуммаКорректировкиБазаНДСОбязательств",Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	ВходящиеНалоговыеДокументы.Колонки.Добавить("СодержаниеСтрокиНН", 					Новый ОписаниеТипов("Строка"));
	Запрос = ПолучитьЗапросПоПропорциональномуПриобретению();
	Выборка = Запрос.Выполнить().Выбрать();
	
	ОшибкаОкругления = 0;
	Пока Выборка.Следующий() Цикл
		
		Строка = ВходящиеНалоговыеДокументы.Добавить();
		ЗаполнитьЗначенияСвойств(Строка, Выборка);
		
		// приводим периоды в таблице с данными к началу месяца 
		Строка.Период = НачалоМесяца(Строка.Период);

												 // отнесли на обязательства до пересчета
		Строка.НДСУсловнаяПродажаДоПересчета 	 = Строка.НДСПоставки  - Выборка.НДСПропорциональноКредитДоПерерасчета;
		Строка.СуммаПоставкиУсловнаяПродажаДоПересчета = Строка.СуммаПоставки  - Выборка.СуммаПоставкиПропорциональноКредитДоПерерасчета;
		                                         // должны бы отнести на обязательства после пересчета
		Строка.НДСУсловнаяПродажа 				 = ОбщегоНазначенияРед12.ОкруглитьСУчетомПогрешности(Строка.НДСПоставки * КоэффициентОбратный, 2, ОшибкаОкругления);
		                                         // сумма корректировки налоговых обязательств
		Строка.СуммаКорректировкиНДСОбязательств = Строка.НДСУсловнаяПродажа - Строка.НДСУсловнаяПродажаДоПересчета;
		Строка.СуммаКорректировкиБазаНДСОбязательств = Строка.СуммаКорректировкиНДСОбязательств * 100 / УчетНДСПереопределяемый.ПолучитьСтавкуНДС(Строка.СтавкаНДС);
		
		ВидДокумента = ?(ТипЗнч(Выборка.Ссылка) = Тип("ДокументСсылка.ГТДИмпорт"), 
						"ВМД ",
						"Податкова накладна ")
						+ ?(Выборка.ВидДокумента = "-" ИЛИ НЕ ЗначениеЗаполнено(Выборка.ВидДокумента),
						"", 
						" (" + Выборка.ВидДокумента+ ")");
		
		НомерДокумента = " № " + ?(ЗначениеЗаполнено(Выборка.НомерВх), Выборка.НомерВх , "б/н");
		
		ДатаДокумента  = " від " + Формат(Выборка.ДатаВх, "ДФ=dd.MM.yyyy");
		
		ИННПоставщика  = ?(ТипЗнч(Выборка.Ссылка) = Тип("ДокументСсылка.ГТДИмпорт"),
						  "",
						  ", ІПН постачальника: " + Выборка.ИННКонтрагента);
		
		Строка.СодержаниеСтрокиНН = ВидДокумента + НомерДокумента + ДатаДокумента + ИННПоставщика;
		
	КонецЦикла;	
	
	// готовимся формировать П2 на корректировку
	Товар = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("НоменклатураДляЗаполненияНалоговыхНакладных");	
	Если НЕ ЗначениеЗаполнено(Товар) Тогда
		Сообщить(НСтр("ru='Для пользователя не указано значение ""Номенклатура для автоматического заполнения налоговых накладных"" в индивидуальных настройках!';uk='Для користувача не вказане значення ""Номенклатура для автоматичного заповнення податкових накладних"" в індивідуальних настройках!'"), СтатусСообщения.Важное);
	КонецЕсли;
	КодОрганизации 		= Объект.Организация.Код;
	ВалютаГрн 			= Константы.ВалютаРегламентированногоУчета.Получить();
	МеткаКомментарий 	= НСтр("ru='#Документ создан автоматически при заполнении документа ""Перерасчет пропорционального НДС"". #%КодОрганизации%#';uk='#Документ створений автоматично при заповненні документа ""Перерахунок пропорційного ПДВ"". #%КодОрганизации%#'");	
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ННДок.Ссылка КАК НН,
	               |	ННДок.Содержание КАК СодержаниеСтрокиНН,
				   |	ННДок.Ссылка.РеквизитыНомерСтрокиННАктуальны КАК РеквизитыНомерСтрокиННАктуальны,
				   |	ННДок.НомерСтрокиНН КАК НомерСтрокиНН,
				   |	ВЫБОР
				   |		КОГДА ННДок.Ссылка.СуммаВключаетНДС
				   |			ТОГДА ННДок.Сумма - ННДок.СуммаНДС
				   |		ИНАЧЕ ННДок.Сумма
				   |	КОНЕЦ КАК Сумма,
				   |	ННДок.СуммаНДС КАК СуммаНДС,
	               |	НАЧАЛОПЕРИОДА(ННДок.Ссылка.Дата, МЕСЯЦ) КАК Период
	               |ИЗ
	               |	Документ.НалоговаяНакладная.Услуги КАК ННДок
	               |ГДЕ
	               |	ННДок.Ссылка.Организация = &Организация
	               |	И ННДок.Ссылка.Дата МЕЖДУ &НачПериода И &КонецПериода
	               |	И ННДок.Ссылка.Проведен
	               |	И ННДок.Ссылка.ВидОперации = &ВидОперации
				   |	И (ННДок.Ссылка.ТипПричиныНевыдачиПокупателю = 9 ИЛИ ННДок.Ссылка.ТипПричиныНевыдачиПокупателю = 8)
				   |	И (ННДок.Ссылка.КодПризнакаСводной = 2 ИЛИ ННДок.Ссылка.КодПризнакаСводной = 0) 
				   |	И ННДок.Ссылка.Сводная = ИСТИНА
	               |	И ННДок.Ссылка.СпецРежимНалогообложения = &СпецРежимНалогообложения
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Период,
	               |	ННДок.Ссылка.Дата УБЫВ";
	
	Запрос.УстановитьПараметр("Организация", 	Объект.Организация);
	Запрос.УстановитьПараметр("СпецРежимНалогообложения", Объект.СпецРежимНалогообложения);
	Запрос.УстановитьПараметр("ВидОперации", 	Перечисления.ВидыОперацийНалоговаяНакладная.УсловнаяПродажа);
	Запрос.УстановитьПараметр("НачПериода", 	НачалоГода(Объект.Дата));
	Запрос.УстановитьПараметр("КонецПериода", 	КонецМесяца(Объект.Дата));
	
	НалоговыеДокументыПоСтрокам = Запрос.Выполнить().Выгрузить();
	
	ВсегоКорректировка  = 0;
	
	КэшОбъектовП2 = Новый Соответствие;	
	
	Если Перезаполнить = Истина Тогда
		Для каждого СтрокаНД Из Объект.НалоговыеДокументы Цикл
			Если Не СтрокаНД.П2.Пустая() Тогда
				КэшОбъектовП2.Вставить(СтрокаНД.НомерСтроки, СтрокаНД.П2.ПолучитьОбъект());		
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	СтруктураПоискаСтрокиНН 			= Новый Структура("СодержаниеСтрокиНН,СуммаНДС");
	СтруктураПоискаСтрокиННСокращенная 	= Новый Структура("СодержаниеСтрокиНН");
	
	Для каждого Период_ Из ВходящиеНалоговыеДокументы Цикл
		
		Период 			= Период_.Период;
		// НАЙДЕМ исходную строку и саму сводную налоговую на данную поставку.
		// в случае возвратов мы можем найти НН на саму поставку (ее период не совпадает с периодом возврата!)
		//ДанныеПоПериоду = ВходящиеНалоговыеДокументы.НайтиСтроки(Новый Структура("Период, СодержаниеСтрокиНН", Период, Период_.СодержаниеСтрокиНН));
		СтруктураПоискаСтрокиНН.СодержаниеСтрокиНН 	= Период_.СодержаниеСтрокиНН;
		СтруктураПоискаСтрокиНН.СуммаНДС 			= Период_.НДСУсловнаяПродажаДоПересчета;
		ИсходнаяСводнаяНН = НалоговыеДокументыПоСтрокам.НайтиСтроки(СтруктураПоискаСтрокиНН);
		
		НомерСтрокиНН = 0;
		Если ИсходнаяСводнаяНН.Количество() = 0 Тогда
			СтруктураПоискаСтрокиННСокращенная.СодержаниеСтрокиНН = Период_.СодержаниеСтрокиНН;
			ИсходнаяСводнаяНН = НалоговыеДокументыПоСтрокам.НайтиСтроки(СтруктураПоискаСтрокиННСокращенная);
			Если ИсходнаяСводнаяНН.Количество() = 0 Тогда 
				НН = Документы.НалоговаяНакладная.ПустаяСсылка();
				НомерСтрокиНН = 0;
				Сумма	 		= Период_.СуммаПоставкиУсловнаяПродажаДоПересчета;																				
				СуммаНДС 		= Период_.НДСУсловнаяПродажаДоПересчета;
				РеквизитыНомерСтрокиННАктуальны = Истина;
			Иначе	
			    НН 				= ИсходнаяСводнаяНН[0].НН;
				НомерСтрокиНН   = ИсходнаяСводнаяНН[0].НомерСтрокиНН;
				Период			= ИсходнаяСводнаяНН[0].Период;
				Сумма			= ИсходнаяСводнаяНН[0].Сумма;
				СуммаНДС		= ИсходнаяСводнаяНН[0].СуммаНДС;
				РеквизитыНомерСтрокиННАктуальны = ИсходнаяСводнаяНН[0].РеквизитыНомерСтрокиННАктуальны; 
			КонецЕсли;
		Иначе	
		    НН 				= ИсходнаяСводнаяНН[0].НН;
			НомерСтрокиНН   = ИсходнаяСводнаяНН[0].НомерСтрокиНН;
			Период			= ИсходнаяСводнаяНН[0].Период;
			Сумма			= ИсходнаяСводнаяНН[0].Сумма;
			СуммаНДС		= ИсходнаяСводнаяНН[0].СуммаНДС;
			РеквизитыНомерСтрокиННАктуальны = ИсходнаяСводнаяНН[0].РеквизитыНомерСтрокиННАктуальны;
		КонецЕсли;
		
		// найдем подходящую НН (и П2 за этот период)
		СтрокаНалДок = Объект.НалоговыеДокументы.НайтиСтроки(Новый Структура("Период, НН", Период, НН));
		Если СтрокаНалДок.Количество() = 0 Тогда
			// нет в базе - создадим П2
			СтрокаНалДок = Объект.НалоговыеДокументы.Добавить();
			СтрокаНалДок.Период = Период;
			СтрокаНалДок.НН     = НН;
			СтрокаНалДок.РеквизитыНомерСтрокиННАктуальны = РеквизитыНомерСтрокиННАктуальны;
		Иначе	
			СтрокаНалДок = СтрокаНалДок[0];
			СтрокаНалДок.РеквизитыНомерСтрокиННАктуальны = РеквизитыНомерСтрокиННАктуальны;
		КонецЕсли;
		
		П2 = КэшОбъектовП2[СтрокаНалДок.НомерСтроки];
		
		Если П2 = Неопределено Тогда
			
			П2 = Документы.Приложение2КНалоговойНакладной.СоздатьДокумент();
			П2.Организация = Объект.Организация;
			П2.Дата = Объект.Дата;
			П2.СпецРежимНалогообложения = Объект.СпецРежимНалогообложения;
			П2.УстановитьНовыйНомер();
			П2.Записать();
			
			СтрокаНалДок.П2 = П2.Ссылка;	
			КэшОбъектовП2.Вставить(СтрокаНалДок.НомерСтроки, П2);
			
		КонецЕсли;
		
		П2.Дата 			  = Объект.Дата;
		П2.НалоговаяНакладная = СтрокаНалДок.НН;
		
		П2.ВидОперации = Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.УсловнаяПродажаВозврат;
		П2.Комментарий = СтрЗаменить(МеткаКомментарий, "%КодОрганизации%", КодОрганизации);
		
		П2.ВалютаДокумента 			= ВалютаГрн;
		П2.КурсВзаиморасчетов 		= 1;
		П2.КратностьВзаиморасчетов 	= 1;
		
		//П2.УчитыватьНДС 			= Истина;
		П2.СуммаВключаетНДС 		= Ложь;
		П2.АвторасчетНДС 			= Ложь;
		
		Если НЕ ЗначениеЗаполнено(П2.Ответственный) Тогда
			П2.Ответственный = Пользователи.ТекущийПользователь();
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(П2.КтоВыписалНалоговуюНакладную) Тогда
			 П2.КтоВыписалНалоговуюНакладную = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("КтоВыписалНалоговуюНакладную");	
		КонецЕсли;
		
		П2.СчетНДС 		= ПланыСчетов.Хозрасчетный.РасчетыПоНДС;
		П2.СчетУчетаНДС = ПланыСчетов.Хозрасчетный.УсловнаяПродажа;
		
		П2.ТипПричиныНевыдачиПокупателю = "09";
		
		П2.ТребуетВключенияВЕдиныйРеестрНалоговыхНакладных = Истина;
		П2.ЭлектронныйДокумент 							   = Истина;
		П2.РегистрируетсяВЕРННПокупателем 				   = Ложь;
		П2.ДатаВключенияВЕдиныйРеестрНалоговыхНакладных    = П2.Дата;
		
		///////////////////////////////////////////////////////////
		// заполняем ТЧ услуги
		
		СтрокаП2 = П2.Услуги.Добавить();
		
		СтрокаП2.НомерСтрокиНН = НомерСтрокиНН;
		СтрокаП2.КодПричины = 202;
		
		СтрокаП2.Номенклатура = Товар;
		СтрокаП2.Содержание = Период_.СодержаниеСтрокиНН;
		
		СтрокаП2.Количество		  = 1;
		СтрокаП2.СтавкаНДС        = Период_.СтавкаНДС;
		
		СтрокаП2.Цена	 		  = Сумма;
		СтрокаП2.Сумма	 		  = Сумма;																				
		СтрокаП2.СуммаНДС 		  = СуммаНДС;
		
		СтрокаП2.ДатаКорректировки = П2.Дата;
		СтрокаП2.Причина		   = "Коригування податкових зобов'язань, згідно з п. 199.1 ПКУ";
		СтрокаП2.ИзменениеЦены	   = Период_.СуммаКорректировкиБазаНДСОбязательств;
		СтрокаП2.ИзменениеСуммы	   = Период_.СуммаКорректировкиБазаНДСОбязательств;
		СтрокаП2.ИзменениеСуммыНДС = Период_.СуммаКорректировкиНДСОбязательств;
		
		//Если РегламентированнаяОтчетность.ИДКонфигурации() = "УПП" Тогда
		//	СтрокаП2.СтатьяКнигиПродаж   = Справочники.СтатьиНалоговыхДеклараций.НДС_НОИзменениеСтоимости;	
		//	СтрокаП2.НалоговоеНазначение = Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_Облагаемая;	
		//Иначе
			СтрокаП2.СтатьяДекларацииНДСНалоговыеОбязательства = Справочники.СтатьиНалоговыхДеклараций.НДС_НОИзменениеСтоимости;	
		//КонецЕсли;
		
		ВсегоКорректировка  = ВсегоКорректировка + Период_.СуммаКорректировкиНДСОбязательств;
		
	КонецЦикла;
	
	Для Каждого ОбъектП2 Из КэшОбъектовП2 Цикл
		
		П2 = ОбъектП2.Значение;
		
		СтрокиДокумента = Объект.НалоговыеДокументы.НайтиСтроки(Новый Структура("НомерСтроки", ОбъектП2.Ключ));
		Если СтрокиДокумента.Количество() > 0 Тогда
			Период = СтрокиДокумента[0].Период;
		КонецЕсли;
		
		П2.Услуги.Сортировать("НомерСтрокиНН");
		
		Попытка
			П2.Записать(РежимЗаписиДокумента.Запись);
		Исключение
			Сообщить(НСтр("ru='Не удалось записать корректировку к сводной налоговой накладной за период: ';uk='Не вдалося записати коригування до зведеної податкової накладної за період: '")
						+ Формат(Период, "ДФ=MM.yyyy")
						+ Символы.ПС + Символы.Таб + ОписаниеОшибки());		
		КонецПопытки;
		
		Попытка
			
			Если П2.ПометкаУдаления Тогда
				П2.УстановитьПометкуУдаления(Ложь);
			КонецЕсли;
			
			Если Не П2.ПроверитьЗаполнение() Тогда
				ВызватьИсключение "";	
			КонецЕсли;
			
			П2.Записать(РежимЗаписиДокумента.Проведение);
			
		Исключение
			Сообщить(НСтр("ru='Не удалось провести корректировку к сводной налоговой накладной за период: ';uk='Не вдалося провести коригування до зведеної податкової накладної за період: '")
						+ Формат(Период, "ДФ=MM.yyyy")
						+ Символы.ПС + Символы.Таб + ОписаниеОшибки());		
		КонецПопытки;
		
	КонецЦикла;
	Объект.НалоговыеДокументы.Сортировать("Период");
	
	Для каждого Строка Из Объект.НалоговыеДокументы Цикл
		
		Строка.КорректировкаНДС = Строка.П2.СуммаНДСДокумента;
		
		Если ЗначениеЗаполнено(Строка.НН) И Не Строка.РеквизитыНомерСтрокиННАктуальны Тогда
			ТекстСообщения =
				НСтр("ru='Не установлены номера строк НН (или они не актуальны) в документе налоговой накладной.
                      |Номера корректируемых строк НН в документе ""Приложение 2 к налоговой накладной"" могут быть не правильными или не определены вовсе.
                      |Необходимо предварительно зайти в налоговую накладную, записать документ, после чего повторить действие!';uk= 'Не встановлені номери рядків ПН (або вони не актуальні) в документі податкової накладної.
                      |Номери рядків ПН, які коригуються документом ""Додаток 2 до податкової накладної"" можуть бути не правильними або не визначені взагалі.
                      |Необхідно попередньо зайти в податкову накладну, записати документ, після чого повторити дію!'");
					  
			Поле = "Объект.НалоговыеДокументы[" + Формат(Строка.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].НН";		  
					  
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, Поле);		  
					  
		КонецЕсли;
	
	КонецЦикла; 
	
КонецПроцедуры

&НаСервере
Функция	ПолучитьЗапросПоПропорциональномуПриобретению()
	
	//Если РегламентированнаяОтчетность.ИДКонфигурации() = "УПП" Тогда
	//	
	//	ВидОперацииЗКП =  "ВидыОперацийЗаписьКнигиПриобретения";
	//	ВидРегистраДекларацияКредит = "КнигаПриобретений"; 
	//	ВидРегистраДекларацияОбязательства = "КнигаПродаж"; 
	//	ИмяСтатьиДекларацииП2 = "СтатьяКнигиПродаж";
	//	ИмяСтатьиДекларацииЗКП = "СтатьяКнигиПриобретения";
	//	
	//	
	//Иначе
		
		ВидОперацииЗКП =  "ВидыОперацийРегистрацияВходящегоНалоговогоДокумента";
		ВидРегистраДекларацияКредит = "НДСНалоговыйКредит"; 
		ВидРегистраДекларацияОбязательства = "НДСНалоговыеОбязательства"; 
		ИмяСтатьиДекларацииП2 = "СтатьяДекларацииНДСНалоговыеОбязательства";
		ИмяСтатьиДекларацииЗКП = "СтатьяДекларацииНДСНалоговыйКредит";
		
	//КонецЕсли;
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("НачПериода",  НачалоГода(Объект.Дата));
	Запрос.УстановитьПараметр("КонПериода",  КонецМесяца(Объект.Дата));
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	
	ПропорциональныеОперации = Новый Массив();
	ПропорциональныеОперации.Добавить(Справочники.СтатьиНалоговыхДеклараций.НДС_НКПропорциональноВклВКредит);
	ПропорциональныеОперации.Добавить(Справочники.СтатьиНалоговыхДеклараций.НДС_НКПропорциональноВклВКредитПоставкаОФ);
	ПропорциональныеОперации.Добавить(Справочники.СтатьиНалоговыхДеклараций.НДС_НКПропорциональноНеВклВКредит);
	ПропорциональныеОперации.Добавить(Справочники.СтатьиНалоговыхДеклараций.НДС_НКПропорциональноНеВклВКредитПоставкаОФ);
	ПропорциональныеОперации.Добавить(Справочники.СтатьиНалоговыхДеклараций.НДС_НККорректировкаПропорциональноВклВКредит);
	ПропорциональныеОперации.Добавить(Справочники.СтатьиНалоговыхДеклараций.НДС_НККорректировкаПропорциональноВклВКредитПоставкаОФ);
	ПропорциональныеОперации.Добавить(Справочники.СтатьиНалоговыхДеклараций.НДС_НККорректировкаПропорциональноНеВклВКредит);
	ПропорциональныеОперации.Добавить(Справочники.СтатьиНалоговыхДеклараций.НДС_НККорректировкаПропорциональноНеВклВКредитПоставкаОФ);	
	Запрос.УстановитьПараметр("ПропорциональныеОперации", ПропорциональныеОперации);

	МассивОблагаемыеОперации = Новый Массив();
	МассивОблагаемыеОперации.Добавить(Справочники.СтатьиНалоговыхДеклараций.НДС_НКПропорциональноВклВКредит);
	МассивОблагаемыеОперации.Добавить(Справочники.СтатьиНалоговыхДеклараций.НДС_НКПропорциональноВклВКредитПоставкаОФ);
	МассивОблагаемыеОперации.Добавить(Справочники.СтатьиНалоговыхДеклараций.НДС_НККорректировкаПропорциональноВклВКредит);
	МассивОблагаемыеОперации.Добавить(Справочники.СтатьиНалоговыхДеклараций.НДС_НККорректировкаПропорциональноВклВКредитПоставкаОФ);
	Запрос.УстановитьПараметр("МассивОблагаемыеОперации", МассивОблагаемыеОперации);
	
	Запрос.УстановитьПараметр("СпецРежимНалогообложения", Объект.СпецРежимНалогообложения);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	НАЧАЛОПЕРИОДА(НДСНалоговыйКредит.Период, Месяц) КАК Период,
				   |	НДСНалоговыйКредит.Регистратор КАК Ссылка,
	               |	НДСНалоговыйКредит.СтавкаНДС   КАК СтавкаНДС,
	               |	ЕСТЬNULL(СУММА(НДСНалоговыйКредит.БазаНДСОборот), 0) КАК СуммаПоставки,
	               |	ЕСТЬNULL(СУММА(НДСНалоговыйКредит.НДСОборот), 0)     КАК НДСПоставки,
	               |	ЕСТЬNULL(СУММА(ВЫБОР
	               |				КОГДА НДСНалоговыйКредит."+ИмяСтатьиДекларацииЗКП+" В (&МассивОблагаемыеОперации)
	               |					ТОГДА НДСНалоговыйКредит.НДСОборот
	               |				ИНАЧЕ 0
	               |			КОНЕЦ), 0) КАК НДСПропорциональноКредитДоПерерасчета,
				   |	ЕСТЬNULL(СУММА(ВЫБОР
	               |				КОГДА НДСНалоговыйКредит."+ИмяСтатьиДекларацииЗКП+" В (&МассивОблагаемыеОперации)
	               |					ТОГДА НДСНалоговыйКредит.БазаНДСОборот
	               |				ИНАЧЕ 0
	               |			КОНЕЦ), 0) КАК СуммаПоставкиПропорциональноКредитДоПерерасчета,
				   |	МАКСИМУМ(ЕСТЬNULL(НДСНалоговыйКредит.Регистратор.ВидДокумента, """")) КАК ВидДокумента,
				   |	МАКСИМУМ(НДСНалоговыйКредит.Регистратор.Контрагент.ИНН) 			  КАК ИННКонтрагента,
				   
				   |	МАКСИМУМ(
				   |	ВЫБОР КОГДА ЕСТЬNULL(НДСНалоговыйКредит.Регистратор.ДатаВходящегоДокумента, Истина) = Истина ТОГДА НДСНалоговыйКредит.Регистратор.Дата
				   |    ИНАЧЕ
				   |		ВЫБОР
				   |			КОГДА НДСНалоговыйКредит.Регистратор.ВидОперации = ЗНАЧЕНИЕ(Перечисление." + ВидОперацииЗКП + ".РасчетКорректировкиВозврат)
				   |					ИЛИ НДСНалоговыйКредит.Регистратор.ВидОперации = ЗНАЧЕНИЕ(Перечисление." + ВидОперацииЗКП + ".РасчетКорректировкиКорректировка)
				   |				ТОГДА НДСНалоговыйКредит.Регистратор.ДатаКорректируемогоВходящегоДокумента
				   |			ИНАЧЕ НДСНалоговыйКредит.Регистратор.ДатаВходящегоДокумента
				   |		КОНЕЦ
				   |	КОНЕЦ) КАК ДатаВх,
				   
				   |	МАКСИМУМ(
				   |	ВЫБОР КОГДА ЕСТЬNULL(НДСНалоговыйКредит.Регистратор.НомерВходящегоДокумента, Истина) = Истина ТОГДА НДСНалоговыйКредит.Регистратор.НомерГТД
				   |    ИНАЧЕ
				   |		ВЫБОР
				   |			КОГДА НДСНалоговыйКредит.Регистратор.ВидОперации = ЗНАЧЕНИЕ(Перечисление." + ВидОперацииЗКП + ".РасчетКорректировкиВозврат)
				   |					ИЛИ НДСНалоговыйКредит.Регистратор.ВидОперации = ЗНАЧЕНИЕ(Перечисление." + ВидОперацииЗКП + ".РасчетКорректировкиКорректировка)
				   |				ТОГДА НДСНалоговыйКредит.Регистратор.НомерКорректируемогоВходящегоДокумента
				   |			ИНАЧЕ НДСНалоговыйКредит.Регистратор.НомерВходящегоДокумента
				   |		КОНЕЦ
				   |	КОНЕЦ) КАК НомерВх
	               |ИЗ
	               |	РегистрНакопления."+ВидРегистраДекларацияКредит+".Обороты(
	               |			&НачПериода,
	               |			&КонПериода,
	               |			Регистратор,
	               |			Организация = &Организация
	               |				И "+ИмяСтатьиДекларацииЗКП+" В (&ПропорциональныеОперации)) КАК НДСНалоговыйКредит
	               |ГДЕ
	               |	ВЫБОР
	               |			КОГДА ЕСТЬNULL(НДСНалоговыйКредит.Регистратор.ВключаетсяВУточняющийРасчет, ЛОЖЬ)
	               |				ТОГДА НДСНалоговыйКредит.Регистратор.УточняемыйПериод МЕЖДУ &НачПериода И &КонПериода
	               |			ИНАЧЕ ИСТИНА
	               |		КОНЕЦ
	               |	И (НДСНалоговыйКредит.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС20)
				   |			ИЛИ НДСНалоговыйКредит.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС14)
	               |			ИЛИ НДСНалоговыйКредит.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС7))
	               |	И ЕСТЬNULL(НДСНалоговыйКредит.Регистратор.СпецРежимНалогообложения, 0) = &СпецРежимНалогообложения
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	НАЧАЛОПЕРИОДА(НДСНалоговыйКредит.Период, Месяц),
	               |	НДСНалоговыйКредит.Регистратор,
	               |	НДСНалоговыйКредит.СтавкаНДС,
				   
				   |	ВЫБОР КОГДА ЕСТЬNULL(НДСНалоговыйКредит.Регистратор.ДатаВходящегоДокумента, Истина) = Истина ТОГДА НДСНалоговыйКредит.Регистратор.Дата
				   |    ИНАЧЕ
				   |		ВЫБОР
				   |			КОГДА НДСНалоговыйКредит.Регистратор.ВидОперации = ЗНАЧЕНИЕ(Перечисление." + ВидОперацииЗКП + ".РасчетКорректировкиВозврат)
				   |					ИЛИ НДСНалоговыйКредит.Регистратор.ВидОперации = ЗНАЧЕНИЕ(Перечисление." + ВидОперацииЗКП + ".РасчетКорректировкиКорректировка)
				   |				ТОГДА НДСНалоговыйКредит.Регистратор.ДатаКорректируемогоВходящегоДокумента
				   |			ИНАЧЕ НДСНалоговыйКредит.Регистратор.ДатаВходящегоДокумента
				   |		КОНЕЦ
				   |	КОНЕЦ,
				   
				   |	ВЫБОР КОГДА ЕСТЬNULL(НДСНалоговыйКредит.Регистратор.НомерВходящегоДокумента, Истина) = Истина ТОГДА НДСНалоговыйКредит.Регистратор.НомерГТД
				   |    ИНАЧЕ
				   |		ВЫБОР
				   |			КОГДА НДСНалоговыйКредит.Регистратор.ВидОперации = ЗНАЧЕНИЕ(Перечисление." + ВидОперацииЗКП + ".РасчетКорректировкиВозврат)
				   |					ИЛИ НДСНалоговыйКредит.Регистратор.ВидОперации = ЗНАЧЕНИЕ(Перечисление." + ВидОперацииЗКП + ".РасчетКорректировкиКорректировка)
				   |				ТОГДА НДСНалоговыйКредит.Регистратор.НомерКорректируемогоВходящегоДокумента
				   |			ИНАЧЕ НДСНалоговыйКредит.Регистратор.НомерВходящегоДокумента
				   |		КОНЕЦ
				   |	КОНЕЦ
				   |
	               |УПОРЯДОЧИТЬ ПО
	               |	НДСНалоговыйКредит.Регистратор.МоментВремени,
	               |	СтавкаНДС";	    

	Возврат Запрос;				   
				   
КонецФункции

&НаСервере
Процедура ОбновитьСуммыНалоговыхДокументовНаСервере()

	Для каждого СтрокаНД Из Объект.НалоговыеДокументы Цикл
		
		Если СтрокаНД.П2.Пустая() Тогда
			Продолжить;
		КонецЕсли;
		
		ОбъектП2 = СтрокаНД.П2.ПолучитьОбъект();
		ОбъектП2.Услуги.Очистить();
		Попытка
			ОбъектП2.Записать(РежимЗаписиДокумента.ОтменаПроведения);
		Исключение
			Сообщить(НСтр("ru='Не удалось снять проведение с документа:';uk='Не вдалося зняти з проведення документа:'") + ОбъектП2);
			Сообщить(НСтр("ru='Действие не выполнено!';uk='Дія не виконана!'"));
			Возврат;		
		КонецПопытки
		
	КонецЦикла;
	
	ЗаполнитьНалоговыеДокументы(Истина);
	
	ПоказатьИтогСуммыКорректировкиНалоговыхДокументов(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПоказатьИтогСуммыКорректировкиНалоговыхДокументов(Форма)

	Форма.Элементы.НалоговыеДокументыКорректировкаНДС.ТекстПодвала = Форма.Объект.НалоговыеДокументы.итог("КорректировкаНДС");	

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСуммуКорректировкиНДСНалоговогоДокумента(ИдентификаторСтроки = Неопределено)

	Если ИдентификаторСтроки = Неопределено Тогда
		
		МассивП2 = Новый Массив;
		Для каждого СтрокаНД Из Объект.НалоговыеДокументы Цикл
			МассивП2.Добавить(СтрокаНД.П2);	
		КонецЦикла; 
		
		ЗначенияКорректировок = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(МассивП2, "СуммаНДСДокумента");	
		
		Для каждого СтрокаНД Из Объект.НалоговыеДокументы Цикл
			СтрокаНД.КорректировкаНДС = ЗначенияКорректировок[СтрокаНД.П2];	
		КонецЦикла; 
		
	Иначе
		
		ТекСтрока = Объект.НалоговыеДокументы.НайтиПоИдентификатору(ИдентификаторСтроки);
		
		ТекСтрока.КорректировкаНДС = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекСтрока.П2, "СуммаНДСДокумента");
	
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ БСП

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти