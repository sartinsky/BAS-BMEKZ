#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	ТипДанныхЗаполнения = ТипЗнч(ДанныеЗаполнения);
	Если ДанныеЗаполнения <> Неопределено И ТипДанныхЗаполнения <> Тип("Структура")
		И Метаданные().ВводитсяНаОсновании.Содержит(ДанныеЗаполнения.Метаданные()) Тогда
		ЗаполнитьПоДокументуОснованию(ДанныеЗаполнения);
	КонецЕсли;
	
	ИНАГРО_ЭлеваторЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект);	

	ЗаполнениеДокументов.Заполнить(ЭтотОбъект, ДанныеЗаполнения);	
		
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	Перем Заголовок;
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКПроведению(ЭтотОбъект);

	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначенияБПВызовСервера.ПредставлениеДокументаПриПроведении(Ссылка);

	Если Не Отказ Тогда
		ДвиженияПоРегистуИНАГРО_РасчетыПоУслугам(Отказ, РежимПроведения);
	КонецЕсли;
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКЗаписиДвижений(ЭтотОбъект);
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКОтменеПроведения(ЭтотОбъект);
	Движения.Записать();
	
КонецПроцедуры
	
Процедура ПриКопировании(ОбъектКопирования)

	Дата = НачалоДня(ОбщегоНазначения.ТекущаяДатаПользователя());
	Ответственный = Пользователи.ТекущийПользователь();
		
КонецПроцедуры

#КонецОбласти 

#Область Проведение

Процедура ДвиженияПоРегистуИНАГРО_РасчетыПоУслугам(Отказ, РежимПроведения)
	
	// Приход
	
	Для Каждого СтрокаТабличнойЧасти Из Вывоз Цикл
		
		Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.ВидФасовки) Тогда
			Продолжить;
		КонецЕсли;
		
		Если  (СтрокаТабличнойЧасти.Сумма = 0) 
			И (СтрокаТабличнойЧасти.КоличествоТара = 0) Тогда 
			Продолжить;
		КонецЕсли;
		
		Движение = Движения.ИНАГРО_РасчетыПоУслугам.Добавить();
		Движение.ВидДвижения        = ВидДвиженияНакопления.Приход;
		Движение.Период             = Дата;
		Движение.Организация        = Организация;
		Движение.Контрагент         = Контрагент;
		Движение.ДоговорКонтрагента = ДоговорКонтрагента;
		Движение.Номенклатура       = СтрокаТабличнойЧасти.Услуга; 
		Движение.Культура           = Номенклатура;
		Движение.Склад              = Склад;
		Движение.Урожай             = Урожай;
		Движение.ВидХранения        = ВидХранения;
		Движение.ДатаРасчета        = Дата;
		Движение.Количество         = СтрокаТабличнойЧасти.КоличествоТара;
		Движение.Стоимость          = СтрокаТабличнойЧасти.Сумма;  
		Движение.ДокументРасчета    = Ссылка;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти 

#Область СлужебныеПроцедурыИФункции

Процедура ЗаполнитьПоДокументуОснованию(Основание) Экспорт
	
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ИНАГРО_Переработка") Тогда
		
		Организация                 = Основание.Организация;
		ОтражатьВБухгалтерскомУчете = Основание.ОтражатьВБухгалтерскомУчете;
		Склад                       = Основание.Склад;
		Урожай                      = Основание.Урожай;
		Контрагент                  = Основание.Владелец;
		ДоговорКонтрагента          = Основание.ДоговорКонтрагента;
		Ответственный               = Основание.Ответственный;
		Комментарий                 = Основание.Комментарий;
		
		Для Каждого СтрокаТабличнойЧасти Из Основание.Сырье Цикл
			Номенклатура = СтрокаТабличнойЧасти.Номенклатура;
			Прервать;
		КонецЦикла;	
		
	КонецЕсли;
	
КонецПроцедуры

Процедура СформироватьДокументы() Экспорт
	
	Записать();
	
	РежимЗаписи = ?(ПроводитьДокументы, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись);
	
	ТаблицаНаВывоз = Вывоз.Выгрузить();
	ТаблицаНаВывоз.Очистить();
	ТаблицаФасовки = ТаблицаНаВывоз.Скопировать();
	
	Для Каждого СтрокаТабличнойЧасти Из Вывоз Цикл
		
		Количество = СтрокаТабличнойЧасти.Количество - СтрокаТабличнойЧасти.КоличествоФасовки;
		
		Если  СтрокаТабличнойЧасти.Фасовка
			И ЗначениеЗаполнено(СтрокаТабличнойЧасти.ВидФасовки) Тогда
			
			Если (СтрокаТабличнойЧасти.Сумма <> 0) Тогда
				
				НоваяСтрока = ТаблицаФасовки.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТабличнойЧасти);
				
				НоваяСтрока = ТаблицаНаВывоз.Добавить();
				НоваяСтрока.Номенклатура   = СтрокаТабличнойЧасти.НоменклатураФасовки;
				НоваяСтрока.Склад 		   = СтрокаТабличнойЧасти.Склад;
				НоваяСтрока.Урожай 		   = СтрокаТабличнойЧасти.Урожай;
				НоваяСтрока.Количество 	   = СтрокаТабличнойЧасти.КоличествоФасовки;
				НоваяСтрока.ВидФасовки	   = СтрокаТабличнойЧасти.ВидФасовки;
				НоваяСтрока.КоличествоТара = СтрокаТабличнойЧасти.КоличествоТара;				
				
			Иначе
				
				ТекстСообщения = (Нстр("ru='Не заполнена сумма тары!';uk='Не заповнена сума тари!'"));		
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);			
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если Количество = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если НЕ СтрокаТабличнойЧасти.Фасовка Тогда
			
			НоваяСтрока = ТаблицаНаВывоз.Добавить();
			НоваяСтрока.Номенклатура = СтрокаТабличнойЧасти.Номенклатура;
			НоваяСтрока.Количество   = Количество;
			НоваяСтрока.Склад        = СтрокаТабличнойЧасти.Склад;
			НоваяСтрока.Урожай       = СтрокаТабличнойЧасти.Урожай;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Отменяем проведение всем документам
	
	Для Каждого СтрокаТабличнойЧасти Из СформированныеДокументы Цикл
		
		Попытка
			СформированныйДокумент = СтрокаТабличнойЧасти.Документ.ПолучитьОбъект();
		Исключение
			
		КонецПопытки;
		
		Если СформированныйДокумент.Проведен Тогда
			СформированныйДокумент.Записать(РежимЗаписиДокумента.ОтменаПроведения);
		КонецЕсли;
		
	КонецЦикла;
	
	ТаблицаФасовки.Сортировать("Склад, НовыйСклад, Урожай");
	ТаблицаНаВывоз.Сортировать("Склад, Урожай");
	
	// Документ ИНАГРО_АктФасовки
	
	СкладДляСравнения      = Справочники.Склады.ПустаяСсылка();
	НовыйСкладДляСравнения = Справочники.Склады.ПустаяСсылка();
	УрожайДляСравнения     = Справочники.ИНАГРО_ВидыУрожая.ПустаяСсылка();

	Для Каждого СтрокаТаблицы Из ТаблицаФасовки Цикл
		
		Если  СтрокаТаблицы.Склад = СкладДляСравнения
			И СтрокаТаблицы.НовыйСклад = НовыйСкладДляСравнения
			И СтрокаТаблицы.Урожай = УрожайДляСравнения Тогда
			Продолжить;
		КонецЕсли;
		
		СкладДляСравнения      = СтрокаТаблицы.Склад;
		НовыйСкладДляСравнения = СтрокаТаблицы.НовыйСклад;
		УрожайДляСравнения     = СтрокаТаблицы.Урожай;
		
		Отбор = Новый Структура();
		Отбор.Вставить("ТипДокумента", Строка(Тип("ДокументСсылка.ИНАГРО_АктФасовки")));
		
		МассивСтрок = СформированныеДокументы.НайтиСтроки(Отбор);
		
		Документ = Неопределено;
		
		Для Каждого СтрокаМассива из МассивСтрок Цикл			
			Если  СтрокаМассива.Документ.Склад = СкладДляСравнения
				И СтрокаМассива.Документ.НовыйСклад = НовыйСкладДляСравнения 
				И СтрокаМассива.Документ.Урожай = УрожайДляСравнения Тогда
				Документ = СтрокаМассива.Документ;
				Прервать;
			КонецЕсли;			
		КонецЦикла;
		
		ДокументАктФасовки = ?(Документ = Неопределено, Документы.ИНАГРО_АктФасовки.СоздатьДокумент(), Документ.ПолучитьОбъект());
		ДокументАктФасовки.Дата       = Дата;
		ДокументАктФасовки.Склад      = СкладДляСравнения;
		ДокументАктФасовки.НовыйСклад = НовыйСкладДляСравнения;
		ДокументАктФасовки.Урожай     = УрожайДляСравнения;
		
		СформироватьДокументИНАГРО_АктФасовки(ДокументАктФасовки, ТаблицаФасовки);
		
		ДокументАктФасовки.Записать(РежимЗаписи);
		
		Если Документ = Неопределено И ЗначениеЗаполнено(ДокументАктФасовки.Ссылка) Тогда
			
			НоваяСтрока = СформированныеДокументы.Добавить();
			НоваяСтрока.Документ     = ДокументАктФасовки.Ссылка;
			НоваяСтрока.ТипДокумента = ТипЗнч(НоваяСтрока.Документ);
			
		КонецЕсли;
		
		Записать();
		
	КонецЦикла;
	
	// Документ ИНАГРО_ПриказНаВывоз:
	
	СкладДляСравнения  = Справочники.Склады.ПустаяСсылка();
	УрожайДляСравнения = Справочники.ИНАГРО_ВидыУрожая.ПустаяСсылка();
	
	Для Каждого СтрокаТаблицы Из ТаблицаНаВывоз Цикл
		
		Если  СтрокаТаблицы.Склад = СкладДляСравнения
			И СтрокаТаблицы.Урожай = УрожайДляСравнения Тогда
			Продолжить;
		КонецЕсли;
		
		СкладДляСравнения  = СтрокаТаблицы.Склад;
		УрожайДляСравнения = СтрокаТаблицы.Урожай;
		
		Отбор = Новый Структура();
		Отбор.Вставить("ТипДокумента", Строка(Тип("ДокументСсылка.ИНАГРО_ПриказНаВывоз")));
		
		МассивСтрок = СформированныеДокументы.НайтиСтроки(Отбор);
		
		Документ = Неопределено;
		
		Для Каждого СтрокаМассива Из МассивСтрок Цикл 			
			Если  СтрокаМассива.Документ.Склад = СкладДляСравнения
				И СтрокаМассива.Документ.Урожай = УрожайДляСравнения Тогда
				Документ = СтрокаМассива.Документ;
				Прервать;
			КонецЕсли;	
		КонецЦикла;
		
		ДокументПриказНаВывоз = ?(Документ = Неопределено, Документы.ИНАГРО_ПриказНаВывоз.СоздатьДокумент(), Документ.ПолучитьОбъект());
		ДокументПриказНаВывоз.Дата   = Дата;
		ДокументПриказНаВывоз.Склад  = СкладДляСравнения;
		ДокументПриказНаВывоз.Урожай = УрожайДляСравнения;
		
		ЗаполнитьРеквизитыДоверенности(ДокументПриказНаВывоз);
		
		СформироватьДокументИНАГРО_ПриказНаВывоз(ДокументПриказНаВывоз, ТаблицаНаВывоз);
		
		ДокументПриказНаВывоз.Записать(РежимЗаписи);
		
		Если Документ = Неопределено И ЗначениеЗаполнено(ДокументПриказНаВывоз.Ссылка) Тогда
			
			НоваяСтрока = СформированныеДокументы.Добавить();
			НоваяСтрока.Документ = ДокументПриказНаВывоз.Ссылка;
			НоваяСтрока.ТипДокумента = ТипЗнч(НоваяСтрока.Документ);
			
		КонецЕсли;
		
		Записать();
		
	КонецЦикла;
	
	// Документ ИНАГРО_Переоформление:
	
	ТаблицаПереоформление = Расчеты.Выгрузить();
	ТаблицаПереоформление.Сортировать("Склад, Урожай");
	
	СкладДляСравнения  = Справочники.Склады.ПустаяСсылка();
	УрожайДляСравнения = Справочники.ИНАГРО_ВидыУрожая.ПустаяСсылка();

	Для Каждого СтрокаТаблицы Из ТаблицаПереоформление Цикл
		
		Если  СтрокаТаблицы.Склад = СкладДляСравнения
			И СтрокаТаблицы.Урожай = УрожайДляСравнения Тогда
			Продолжить;
		КонецЕсли;
		
		СкладДляСравнения  = СтрокаТаблицы.Склад;
		УрожайДляСравнения = СтрокаТаблицы.Урожай;
		
		Отбор = Новый Структура();
		Отбор.Вставить("ТипДокумента", Строка(Тип("ДокументСсылка.ИНАГРО_Переоформление")));
		
		МассивСтрок = СформированныеДокументы.НайтиСтроки(Отбор);
		
		Документ = Неопределено;
		
		Для Каждого СтрокаМассива Из МассивСтрок Цикл			
			Если  СтрокаМассива.Документ.Склад = СкладДляСравнения
				И СтрокаМассива.Документ.Урожай = УрожайДляСравнения Тогда
				Документ = СтрокаМассива.Документ;
				Прервать;
			КонецЕсли;			
		КонецЦикла;
		
		ДокументПереоформление = ?(Документ = Неопределено, Документы.ИНАГРО_Переоформление.СоздатьДокумент(), Документ.ПолучитьОбъект());
		ДокументПереоформление.Дата   = Дата;
		ДокументПереоформление.Склад  = СкладДляСравнения;
		ДокументПереоформление.Урожай = УрожайДляСравнения;		
		
		ЗаполнитьРеквизитыДоверенности(ДокументПереоформление);
		
		СформироватьДокументИНАГРО_Переоформление(ДокументПереоформление, ТаблицаПереоформление);
		
		ДокументПереоформление.Записать(РежимЗаписи);
		
		Если Документ = Неопределено И ЗначениеЗаполнено(ДокументПереоформление.Ссылка) Тогда
			
			НоваяСтрока = СформированныеДокументы.Добавить();
			НоваяСтрока.Документ     = ДокументПереоформление.Ссылка;
			НоваяСтрока.ТипДокумента = ТипЗнч(НоваяСтрока.Документ);
			
		КонецЕсли;
		
		Записать();
		
	КонецЦикла;	
	
	// Документ КорректировкаДолга:
	
	Если Расчеты.Итог("Сумма") > 0 Тогда
		
		Документ = СформированныеДокументы.Найти(Строка(Тип("ДокументСсылка.КорректировкаДолга")), "ТипДокумента");
		
		ДокументКорректировкаДолга = ?(Документ = Неопределено, Документы.КорректировкаДолга.СоздатьДокумент(), Документ.Документ.ПолучитьОбъект());
		ДокументКорректировкаДолга.Дата = Дата;
		
		СформироватьДокументКорректировкаДолга(ДокументКорректировкаДолга);
		
		ДокументКорректировкаДолга.Записать(РежимЗаписи);
		
		Если Документ = Неопределено И ЗначениеЗаполнено(ДокументКорректировкаДолга.Ссылка) Тогда
			
			НоваяСтрока = СформированныеДокументы.Добавить();
			НоваяСтрока.Документ     = ДокументКорректировкаДолга.Ссылка;
			НоваяСтрока.ТипДокумента = ТипЗнч(НоваяСтрока.Документ);
			
		КонецЕсли;
		
		Записать();
		
	КонецЕсли; 
	
КонецПроцедуры

Процедура СформироватьДокументИНАГРО_АктФасовки(ДокументАктФасовки, ТаблицаФасовки)
	
	ДокументАктФасовки.Организация                 = Организация;
	ДокументАктФасовки.ВидОперации                 = Перечисления.ИНАГРО_ВидыОперацийПереработка.ДавальческоеСырье;	
	ДокументАктФасовки.ОтражатьВБухгалтерскомУчете = ОтражатьВБухгалтерскомУчете;	
	ДокументАктФасовки.Владелец                    = Контрагент;
	ДокументАктФасовки.ДоговорКонтрагента          = ДоговорКонтрагента;
	ДокументАктФасовки.ВидХранения                 = ВидХранения;
	ДокументАктФасовки.СчетЗатрат                  = ПланыСчетов.Хозрасчетный.ПроизводствоИзДавальческогоСырья;
	
	ДокументАктФасовки.Сырье.Очистить();
	ДокументАктФасовки.Продукция.Очистить();
	
	Для Каждого СтрокаТабличнойЧасти Из ТаблицаФасовки Цикл
		
		Если    ДокументАктФасовки.Склад <> СтрокаТабличнойЧасти.Склад
			ИЛИ ДокументАктФасовки.НовыйСклад <> СтрокаТабличнойЧасти.НовыйСклад
			ИЛИ ДокументАктФасовки.Урожай <> СтрокаТабличнойЧасти.Урожай Тогда
			Продолжить;
		КонецЕсли;	
		
		НоваяСтрока = ДокументАктФасовки.Сырье.Добавить();
		НоваяСтрока.Номенклатура     = СтрокаТабличнойЧасти.Номенклатура;
		НоваяСтрока.ЕдиницаИзмерения = СтрокаТабличнойЧасти.Номенклатура.БазоваяЕдиницаИзмерения;
		НоваяСтрока.Коэффициент      = 1;
		НоваяСтрока.ФизическийВес    = СтрокаТабличнойЧасти.КоличествоФасовки;
		НоваяСтрока.ЗачетныйВес      = СтрокаТабличнойЧасти.КоличествоФасовки;			
		
		НоваяСтрока = ДокументАктФасовки.Продукция.Добавить();
		НоваяСтрока.Номенклатура     = СтрокаТабличнойЧасти.НоменклатураФасовки;
		НоваяСтрока.ЕдиницаИзмерения = СтрокаТабличнойЧасти.НоменклатураФасовки.БазоваяЕдиницаИзмерения;
		НоваяСтрока.Коэффициент      = 1;
		НоваяСтрока.Фасовка          = СтрокаТабличнойЧасти.ВидФасовки;
		НоваяСтрока.Количество       = СтрокаТабличнойЧасти.КоличествоТара;
		НоваяСтрока.ФизическийВес    = СтрокаТабличнойЧасти.КоличествоФасовки;
		НоваяСтрока.ДоляСтоимости    = 100;
		
	КонецЦикла; 
	
	Документы.ИНАГРО_АктФасовки.ЗаполнитьСчетаУчетаВТабличнойЧасти(ДокументАктФасовки, "Сырье",     Ложь);
	Документы.ИНАГРО_АктФасовки.ЗаполнитьСчетаУчетаВТабличнойЧасти(ДокументАктФасовки, "Продукция", Ложь);

КонецПроцедуры

Процедура СформироватьДокументИНАГРО_ПриказНаВывоз(ДокументПриказНаВывоз, ТаблицаНаВывоз)
	
	ДокументПриказНаВывоз.Организация        = Организация;
	ДокументПриказНаВывоз.Владелец           = Контрагент;
	ДокументПриказНаВывоз.ДоговорКонтрагента = ДоговорКонтрагента;
	ДокументПриказНаВывоз.ВидХранения        =  ВидХранения;
	
	ДокументПриказНаВывоз.Культуры.Очистить();
	
	Для Каждого СтрокаТабличнойЧасти Из ТаблицаНаВывоз Цикл
		Если    ДокументПриказНаВывоз.Склад <> СтрокаТабличнойЧасти.Склад
			ИЛИ ДокументПриказНаВывоз.Урожай <> СтрокаТабличнойЧасти.Урожай Тогда
			Продолжить;
		КонецЕсли;	
		
		НоваяСтрока = ДокументПриказНаВывоз.Культуры.Добавить();
		НоваяСтрока.Номенклатура     = СтрокаТабличнойЧасти.Номенклатура;
		НоваяСтрока.ЕдиницаИзмерения = СтрокаТабличнойЧасти.Номенклатура.БазоваяЕдиницаИзмерения;
		НоваяСтрока.Фасовка	         = СтрокаТабличнойЧасти.ВидФасовки;
		НоваяСтрока.Количество       = СтрокаТабличнойЧасти.КоличествоТара;
		НоваяСтрока.ФизическийВес    = СтрокаТабличнойЧасти.Количество;
		НоваяСтрока.ЗачетныйВес      = СтрокаТабличнойЧасти.Количество;
		
	КонецЦикла;	
	
КонецПроцедуры

Процедура СформироватьДокументИНАГРО_Переоформление(ДокументПереоформление, Расчеты)
	
	ЗаполнениеДокументов.Заполнить(ДокументПереоформление);
	
	ДокументПереоформление.ВидХранения                    = ВидХранения;
	
	ИНАГРО_ЭлеваторЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ДокументПереоформление);

	ДокументПереоформление.ОтражатьВБухгалтерскомУчете    = ОтражатьВБухгалтерскомУчете;
	ДокументПереоформление.Организация                    = Организация;
	ДокументПереоформление.Владелец                       = Контрагент;
	ДокументПереоформление.ДоговорКонтрагента             = ДоговорКонтрагента;
	ДокументПереоформление.ДоговорКонтрагентаПоставщика   = ДоговорКонтрагентаПоставщика;
	ДокументПереоформление.НовыйВладелец                  = РегистрыСведений.ИНАГРО_ДополнительныеРеквизитыОрганизации.ПолучитьПоследнее(Дата, Новый Структура("Организация", Организация)).Контрагент;
	ДокументПереоформление.НовыйДоговорКонтрагента        = ДокументПереоформление.НовыйВладелец.ОсновнойДоговорКонтрагента;
	ДокументПереоформление.НовыйСклад                     = ДокументПереоформление.Склад;
	Если НЕ ЗначениеЗаполнено(ДокументПереоформление.НовыйВидХранения) Тогда
		ДокументПереоформление.НовыйВидХранения = ВидХранения;
	КонецЕсли;
	ДокументПереоформление.ВалютаДокумента                = Константы.ВалютаРегламентированногоУчета.Получить();
	СчетаУчета = БухгалтерскийУчетРасчетовСКонтрагентами.ПолучитьСчетаРасчетовСКонтрагентом(Организация, Контрагент, ДоговорКонтрагента);	
	ДокументПереоформление.СчетУчетаРасчетовСКонтрагентом = СчетаУчета.СчетРасчетов;
	ДокументПереоформление.СчетУчетаРасчетовПоАвансам     = СчетаУчета.СчетРасчетов; 
	ДокументПереоформление.СчетУчетаНДС 				  = СчетаУчета.СчетУчетаНДСПриобретений;
	ДокументПереоформление.СчетУчетаНДСПодтвержденный     = СчетаУчета.СчетУчетаНДСПриобретенийПодтвержденный;		 

	ДокументПереоформление.Культуры.Очистить();
	
	
	Для Каждого СтрокаТабличнойЧасти Из Расчеты Цикл
		
		Если    ДокументПереоформление.Склад <> СтрокаТабличнойЧасти.Склад
			ИЛИ ДокументПереоформление.Урожай <> СтрокаТабличнойЧасти.Урожай Тогда
			Продолжить;
		КонецЕсли;	
		
		Если  ДокументПереоформление.НовыйВидХранения <> СтрокаТабличнойЧасти.ВидХранения
			И ЗначениеЗаполнено(СтрокаТабличнойЧасти.ВидХранения) Тогда
			Продолжить;
		КонецЕсли;	
		
		Если ДокументПереоформление.НовыйВидХранения <> ВидХранения
			И НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.ВидХранения) Тогда
			Продолжить;
		КонецЕсли;	
		
		НоваяСтрока = ДокументПереоформление.Культуры.Добавить();	
		НоваяСтрока.Номенклатура          = СтрокаТабличнойЧасти.Номенклатура;
		НоваяСтрока.ЕдиницаИзмерения      = НоваяСтрока.Номенклатура.БазоваяЕдиницаИзмерения;
		НоваяСтрока.ФизическийВес         = СтрокаТабличнойЧасти.Количество;
		НоваяСтрока.ЗачетныйВес           = СтрокаТабличнойЧасти.Количество;
		НоваяСтрока.Количество            = СтрокаТабличнойЧасти.Количество;
		НоваяСтрока.СтавкаНДС             = НоваяСтрока.Номенклатура.СтавкаНДС;
		НоваяСтрока.Цена                  = СтрокаТабличнойЧасти.Цена;
		НоваяСтрока.Сумма                 = СтрокаТабличнойЧасти.Сумма;
		Ставка_П                          = УчетНДС.ПолучитьСтавкуНДС(НоваяСтрока.СтавкаНДС);
		СуммаБезНДС_П                     = 100 * СтрокаТабличнойЧасти.Сумма / (100 + Ставка_П);
		НоваяСтрока.СуммаНДС              = СтрокаТабличнойЧасти.Сумма - СуммаБезНДС_П;
		НоваяСтрока.ДокументОприходования = ДокументПереоформление;		
						
	КонецЦикла; 
	
	ПоказыватьВДокументахОстатокВЗачетномВесе = ИНАГРО_ЭлеваторЗаполнениеДокументов.ПолучитьЗначениеПоУмолчанию("ПоказыватьВДокументахОстатокВЗачетномВесе");

	Документы.ИНАГРО_Переоформление.ЗаполнитьСчетаУчетаВТабличнойЧасти(ДокументПереоформление, "Культуры");
	Документы.ИНАГРО_Переоформление.ЗаполнитьОстаткиВТабличнойЧасти(ДокументПереоформление, "Культуры", ПоказыватьВДокументахОстатокВЗачетномВесе); 
	
КонецПроцедуры

Процедура СформироватьДокументКорректировкаДолга(ДокументКорректировкаДолга)
	
	ЗаполнениеДокументов.Заполнить(ДокументКорректировкаДолга);
	
	ДокументКорректировкаДолга.Организация        = Организация;
	ДокументКорректировкаДолга.ВидОперации        = Перечисления.ВидыОперацийКорректировкаДолга.ПроведениеВзаимозачета;
	ДокументКорректировкаДолга.КонтрагентДебитор  = Контрагент;
	ДокументКорректировкаДолга.КонтрагентКредитор = Контрагент;
	ДокументКорректировкаДолга.ВалютаДокумента    = Константы.ВалютаРегламентированногоУчета.Получить();
	ДокументКорректировкаДолга.КурсДокумента 	  = 1;
	ДокументКорректировкаДолга.КратностьДокумента = 1;	
	ДокументКорректировкаДолга.Ответственный      = Пользователи.ТекущийПользователь();
	ДокументКорректировкаДолга.Комментарий        = "";
	
	ДокументКорректировкаДолга.СуммыДолга.Очистить();	
	
	НоваяСтрока = ДокументКорректировкаДолга.СуммыДолга.Добавить();
	НоваяСтрока.ВидЗадолженности        = Перечисления.ВидыЗадолженности.Дебиторская;
	НоваяСтрока.ДоговорКонтрагента      = ДоговорКонтрагента;
	НоваяСтрока.Сумма                   = Расчеты.Итог("Сумма");
	НоваяСтрока.СуммаВзаиморасчетов     = Расчеты.Итог("Сумма");
	Если ДоговорКонтрагента = Перечисления.ВидыДоговоровКонтрагентов.Прочее Тогда
		НоваяСтрока.ТипКонтрагента = Перечисления.СтатусыКонтрагентов.Прочее;		
	ИначеЕсли ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком Тогда
		НоваяСтрока.ТипКонтрагента = Перечисления.СтатусыКонтрагентов.Поставщик;
	Иначе
		НоваяСтрока.ТипКонтрагента = Перечисления.СтатусыКонтрагентов.Покупатель;
	КонецЕсли;
	НоваяСтрока.РасчетыВозврат 	        = Перечисления.РасчетыВозврат.Расчеты;	
	СтруктураКурса = МодульВалютногоУчета.ПолучитьКурсВалюты(Константы.ВалютаРегламентированногоУчета.Получить(), Дата);	
	НоваяСтрока.КурсВзаиморасчетов      = СтруктураКурса.Курс;
	НоваяСтрока.КратностьВзаиморасчетов = СтруктураКурса.Кратность;
	
	Документы.КорректировкаДолга.ЗаполнитьСчетаУчетаВСтрокеТабЧасти(НоваяСтрока, ДокументКорректировкаДолга, ОтражатьВБухгалтерскомУчете);

	НоваяСтрока = ДокументКорректировкаДолга.СуммыДолга.Добавить();
	НоваяСтрока.ВидЗадолженности        = Перечисления.ВидыЗадолженности.Кредиторская;
	НоваяСтрока.ДоговорКонтрагента      = ДоговорКонтрагентаПоставщика;
	НоваяСтрока.Сумма                   = Расчеты.Итог("Сумма");
	НоваяСтрока.СуммаВзаиморасчетов     = Расчеты.Итог("Сумма");	
	Если ДоговорКонтрагентаПоставщика = Перечисления.ВидыДоговоровКонтрагентов.Прочее Тогда
		НоваяСтрока.ТипКонтрагента = Перечисления.СтатусыКонтрагентов.Прочее;		
	ИначеЕсли ДоговорКонтрагентаПоставщика.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком Тогда
		НоваяСтрока.ТипКонтрагента = Перечисления.СтатусыКонтрагентов.Поставщик;
	Иначе
		НоваяСтрока.ТипКонтрагента = Перечисления.СтатусыКонтрагентов.Покупатель;
	КонецЕсли;
	НоваяСтрока.РасчетыВозврат          = Перечисления.РасчетыВозврат.Расчеты;	
	СтруктураКурса = МодульВалютногоУчета.ПолучитьКурсВалюты(Константы.ВалютаРегламентированногоУчета.Получить(), Дата);
	НоваяСтрока.КурсВзаиморасчетов      = СтруктураКурса.Курс;
	НоваяСтрока.КратностьВзаиморасчетов = СтруктураКурса.Кратность;
	
	Документы.КорректировкаДолга.ЗаполнитьСчетаУчетаВСтрокеТабЧасти(НоваяСтрока, ДокументКорректировкаДолга, ОтражатьВБухгалтерскомУчете);

КонецПроцедуры

Процедура ЗаполнитьРеквизитыДоверенности(ДокументПриемник)
	
	Если ЗначениеЗаполнено(ДоверенностьДата) Тогда
		ДокументПриемник.ДоверенностьДата  = ДоверенностьДата;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДоверенностьНомер) Тогда
		ДокументПриемник.ДоверенностьНомер = ДоверенностьНомер;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДоверенностьСерия) Тогда
		ДокументПриемник.ДоверенностьСерия = ДоверенностьСерия;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДоверенностьЧерез) Тогда
		ДокументПриемник.ДоверенностьЧерез = ДоверенностьЧерез;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли