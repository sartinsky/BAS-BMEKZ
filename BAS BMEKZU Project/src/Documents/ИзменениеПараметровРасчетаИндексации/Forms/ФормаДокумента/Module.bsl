#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// первоначальное заполнение объекта
	Если Параметры.Ключ.Пустая() Тогда
		
		ЗначенияДляЗаполнения = Новый Структура;
		ЗначенияДляЗаполнения.Вставить("Организация",	"Объект.Организация");
		ЗначенияДляЗаполнения.Вставить("Ответственный",	"Объект.Ответственный");
		
		ЗарплатаКадры.ЗаполнитьПервоначальныеЗначенияВФорме(ЭтаФорма, ЗначенияДляЗаполнения);
		
		УстановитьФункциональныеОпцииФормы();
		
	КонецЕсли;

	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	// Обработчик подсистемы "ВерсионированиеОбъектов"
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	ОрганизацияПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура СотрудникПриИзменении(Элемент)
	
	СотрудникПриИзмененииНаСервере()	
	
КонецПроцедуры	

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()
	
	КадровыйУчетФормы.ЗаполнитьОтветственныхЛицПоОрганизации(ЭтаФорма);
	УстановитьФункциональныеОпцииФормы();


КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(
		Элемент.ТекстРедактирования,
		ЭтотОбъект,
		"Объект.Комментарий"
	);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура РассчитатьФиксированнаяИндексация(Команда)
	
	РассчитатьФиксированнаяИндексацияНаСервере();

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьФункциональныеОпцииФормы() 
	
	ГоловнаяОрганизация = ЗарплатаКадрыПовтИсп.ГоловнаяОрганизация(Объект.Организация);
	
	ПараметрыФО = Новый Структура("Организация", ГоловнаяОрганизация);
	УстановитьПараметрыФункциональныхОпцийФормы(ПараметрыФО);
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьФиксированнаяИндексацияНаСервере()
	
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ТаблицаСотрудников = Новый ТаблицаЗначений;
	ТаблицаСотрудников.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	ТаблицаСотрудников.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
	
	
	//Получаем на начало месяца данные о плановых начислениях и фиксированной индексации
	СтрокаСотрудник = ТаблицаСотрудников.Добавить();
	СтрокаСотрудник.Сотрудник = Объект.Сотрудник;
	СтрокаСотрудник.Период = НачалоМесяца(Объект.ДатаИзменения)-1;
	
	ЗарплатаКадры.СоздатьПоТаблицеЗначенийВТИмяРегистраСрезПоследних(
		Запрос.МенеджерВременныхТаблиц, 
		Истина,
		"ПлановыеНачисления",
		ТаблицаСотрудников);
		
	ЗарплатаКадры.СоздатьПоТаблицеЗначенийВТИмяРегистраСрезПоследних(
		Запрос.МенеджерВременныхТаблиц, 
		Истина,
		"ПараметрыРасчетаИндексации",
		ТаблицаСотрудников);	
		
	//Сформируем таблицы начислений и фиксированной индексации
	Запрос.УстановитьПараметр("Сотрудник", Объект.Сотрудник);
	Запрос.УстановитьПараметр("Подразделение", Объект.Подразделение);
	Запрос.УстановитьПараметр("Должность", Объект.Должность);
	Запрос.УстановитьПараметр("ФизическоеЛицо", Объект.Сотрудник.ФизическоеЛицо);
	Запрос.УстановитьПараметр("Дата", Объект.Дата);
		
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ПлановыеНачисления.Начисление,
		|	ПлановыеНачисления.Размер
		|ПОМЕСТИТЬ ВТЗарплата
		|ИЗ
		|	ВТПлановыеНачисленияСрезПоследних КАК ПлановыеНачисления
		|ГДЕ
		|	ПлановыеНачисления.Размер <> 0
		|;
		|
	    |////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	&ФизическоеЛицо КАК ФизическоеЛицо,
		|	&Сотрудник КАК Сотрудник,
		|	&Подразделение КАК Подразделение,
		|	&Должность КАК Должность,
		|	Зарплата.Размер КАК Размер,
		|	НАЧАЛОПЕРИОДА(&Дата, МЕСЯЦ) КАК ДатаНачала,
		|	КОНЕЦПЕРИОДА(&Дата, МЕСЯЦ)  КАК ДатаОкончания,
		|	Зарплата.Начисление КАК Начисление,
		|	ИСТИНА КАК Авторасчет
		|ИЗ
		|	ВТЗарплата КАК Зарплата";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ТаблицаНачисленияДо = РезультатЗапроса.Выгрузить();
	
	//получаем на дату изменения данные о плановых начислениях
	СтрокаСотрудник.Период = КонецМесяца(Объект.ДатаИзменения);
	
	Запрос.Текст = "УНИЧТОЖИТЬ ВТПлановыеНачисленияСрезПоследних";
	Запрос.Выполнить();
	
	ЗарплатаКадры.СоздатьПоТаблицеЗначенийВТИмяРегистраСрезПоследних(
		Запрос.МенеджерВременныхТаблиц, 
		Истина,
		"ПлановыеНачисления",
		ТаблицаСотрудников);

	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ПлановыеНачисления.Начисление,
		|	ПлановыеНачисления.Размер
		|ПОМЕСТИТЬ ВТНачисления
		|ИЗ
		|	ВТПлановыеНачисленияСрезПоследних КАК ПлановыеНачисления
		|ГДЕ
		|	ПлановыеНачисления.Размер <> 0
		|;
		|
	    |////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	&ФизическоеЛицо КАК ФизическоеЛицо,
		|	&Сотрудник КАК Сотрудник,
		|	&Подразделение КАК Подразделение,
		|	&Должность КАК Должность,
		|	Зарплата.Размер КАК Размер,
		|	НАЧАЛОПЕРИОДА(&Дата, МЕСЯЦ) КАК ДатаНачала,
		|	КОНЕЦПЕРИОДА(&Дата, МЕСЯЦ)  КАК ДатаОкончания,
		|	Зарплата.Начисление КАК Начисление,
		|	ИСТИНА КАК Авторасчет
		|ИЗ
		|	ВТНачисления КАК Зарплата
		|	ЛЕВОЕ СОЕДИНЕНИЕ
		|	ПланВидовРасчета.Начисления КАК Начисления
		|	ПО Зарплата.Начисление = Начисления.Ссылка
		|ГДЕ
		| 	Начисления.Ссылка.КатегорияНачисленияИлиНеоплаченногоВремени <> ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.Индексация)";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ТаблицаНачисленияПосле = РезультатЗапроса.Выгрузить();
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ПараметрыРасчетаИндексации.ФиксированнаяИндексация
		|ИЗ
		|	ВТПараметрыРасчетаИндексацииСрезПоследних КАК ПараметрыРасчетаИндексации
		|";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ТаблицаФиксированнаяИндексация = РезультатЗапроса.Выгрузить();
	
	//Расчитываем начисления до и после
	РасчетЗарплатыБазовый.РассчитатьДокументИзменениеПараметровРасчетаИндексации(Объект,ТаблицаНачисленияДо);
	РасчетЗарплатыБазовый.РассчитатьДокументИзменениеПараметровРасчетаИндексации(Объект,ТаблицаНачисленияПосле);
	
	Объект.НачисленияДо.Загрузить(ТаблицаНачисленияДо);
	Объект.НачисленияПосле.Загрузить(ТаблицаНачисленияПосле);
	
	//Расчет суммы повышения
	ВсегоДо = ТаблицаНачисленияДо.Итог("Результат");
	ВсегоПосле = ТаблицаНачисленияПосле.Итог("Результат");
	ФИДо = ТаблицаФиксированнаяИндексация.Итог("ФиксированнаяИндексация");
	ФИПосле = 0;
	БезИндексацииДо = 0;
	
	Для Каждого СтрокаНачисление из ТаблицаНачисленияДо Цикл
		Если СтрокаНачисление.Начисление.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.Индексация Тогда
			Продолжить;
		КонецЕсли;
		БезИндексацииДо = БезИндексацииДо + СтрокаНачисление.Результат;
	КонецЦикла;
	
	Повышение = (ВсегоПосле - БезИндексацииДо);
	Разница = (ВсегоДо - ВсегоПосле);
	
	Если Повышение <=0 Тогда
		//Ничего не делаем
		ФИПосле = ФИДо; 
	ИначеЕсли Разница > 0 Тогда
		//После повышения получаем меньше, чем было с индексацией
		//Устанавливаем новую ФИ
		ФИПосле = Разница;
	ИначеЕсли ФИДо <= 0 Тогда
		//После повышения получаем больше, чем было с индексацией, ФИ не было
		//Ничего делать не надо
		ФИПосле = ФИДо;
	ИначеЕсли Повышение >= ФИДо Тогда
		//После повышения получаем больше, чем было с индексацией, ФИ была меньше суммы Повышения
		//Обнуляем
		ФИПосле = 0;
	Иначе
		//Ничего делать не надо
		ФИПосле = ФИДо;
	КонецЕсли;	
	
	Объект.ФиксированнаяИндексация = ФИПосле;
	
КонецПроцедуры

&НаСервере
Процедура СотрудникПриИзмененииНаСервере()
	
	УстановитьТекущиеКадровыеДанные();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьТекущиеКадровыеДанные()
	
	СтруктураОтбораКадровыхДанных = Новый Структура("ЛевоеЗначение, ВидСравнения, ПравоеЗначение", "Регистратор", "<>", Объект.Ссылка);
	Отбор = Новый Массив;
	Отбор.Добавить(СтруктураОтбораКадровыхДанных);
	
	ПоляОтбораПериодическихДанных = Новый Структура;
	ПоляОтбораПериодическихДанных.Вставить("КадроваяИсторияСотрудников", Отбор);
	Поля = "Подразделение,Должность,Организация";
	
	ДанныеСотрудников = КадровыйУчет.КадровыеДанныеСотрудников(Ложь, Объект.Сотрудник, Поля, НачалоДня(Объект.ДатаИзменения) - 1, ПоляОтбораПериодическихДанных);
	
	Если ДанныеСотрудников.Количество() > 0 Тогда
		
		ТекущиеКадровыеДанныеСотрудника = ДанныеСотрудников[0];
		
		Объект.Организация 	= ТекущиеКадровыеДанныеСотрудника.Организация;
		Объект.Подразделение 	= ТекущиеКадровыеДанныеСотрудника.Подразделение;
		Объект.Должность 		= ТекущиеКадровыеДанныеСотрудника.Должность;
		
	КонецЕсли;	
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ БСП

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти