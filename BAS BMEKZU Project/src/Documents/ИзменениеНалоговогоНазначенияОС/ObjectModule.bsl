#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

// Процедура определяет возможный вид корректировки налогового кредита, по переданным данным
//
// Параметры
//  Данные  – Строка табличной части, структура, строка таблицы. Должна содержать реквизиты (колонки):
//  			НалоговоеНазначение, НалоговоеНазначениеНовое
//
// Возвращаемое значение:
//   ПеречислениеСсылка.ВидыКорректировокНалоговогоКредита  - вид корректировки. Если неопределен - пустая ссылка.
//
Функция ОпределитьВидКорректировкиНК(Данные) Экспорт
	
	Если    НЕ ЗначениеЗаполнено(Данные.НалоговоеНазначение)
		ИЛИ НЕ ЗначениеЗаполнено(Данные.НалоговоеНазначениеНовое) Тогда 
		
		Возврат  Перечисления.ВидыКорректировокНалоговогоКредита.ПустаяСсылка();
		
	КонецЕсли; 
	
	НалоговыйКредитВход  = Данные.НалоговоеНазначение = Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_Пропорционально ИЛИ УчетНДС.ЕстьПравоНаНалоговыйКредит(Данные.НалоговоеНазначение);
	НалоговыйКредитВыход = Данные.НалоговоеНазначениеНовое = Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_Пропорционально ИЛИ УчетНДС.ЕстьПравоНаНалоговыйКредит(Данные.НалоговоеНазначениеНовое);
	
	Если НалоговыйКредитВход = НалоговыйКредитВыход Тогда
		
		Возврат Перечисления.ВидыКорректировокНалоговогоКредита.НетКорректировок;
		
	ИначеЕсли НалоговыйКредитВход И НЕ НалоговыйКредитВыход Тогда
		
		Возврат Перечисления.ВидыКорректировокНалоговогоКредита.ПотеряПраваНаНалоговыйКредит;
		
	Иначе
		
		Возврат Перечисления.ВидыКорректировокНалоговогоКредита.ВосстановлениеПраваНаНалоговыйКредит;
		
	КонецЕсли;
	
КонецФункции

///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Процедура определяет параметры регл. учетной политики
//
Процедура ПодготовитьПараметрыУчетнойПолитики(СтруктураШапкиДокумента, Отказ, Заголовок)
	
	СтруктураШапкиДокумента.Вставить("ЕстьНалогНаПрибыль"             , УчетнаяПолитика.ПлательщикНалогаНаПрибыль(СтруктураШапкиДокумента.Организация, КонецМесяца(СтруктураШапкиДокумента.Дата)));
	СтруктураШапкиДокумента.Вставить("ЕстьНалогНаПрибыльДо2015"       , УчетнаяПолитика.ПлательщикНалогаНаПрибыльДо2015(СтруктураШапкиДокумента.Организация, КонецМесяца(СтруктураШапкиДокумента.Дата)));
	СтруктураШапкиДокумента.Вставить("ЕстьНДС"                        , УчетнаяПолитика.ПлательщикНДС(СтруктураШапкиДокумента.Организация, КонецМесяца(СтруктураШапкиДокумента.Дата)));
		
КонецПроцедуры // ПодготовитьПараметрыУчетнойПолитики

///////////////////////////////////////////////////////////////////////////////
// ДВИЖЕНИЯ ПО РЕГИСТРАМ

// Выполняет движения по регистрам 
//
Процедура ДвиженияПоРегистрам(СтруктураШапкиДокумента, ТаблицаПоОС, Отказ, Заголовок)

	ДвиженияПоРегистрамРегл(СтруктураШапкиДокумента, ТаблицаПоОС, Отказ, Заголовок);

	ДвиженияПоРегиструОжидаемыйИПодтвержденныйНДСПродаж(СтруктураШапкиДокумента, ТаблицаПоОС, Отказ, Заголовок);
	
	ПроводкиПоНДС(СтруктураШапкиДокумента, ТаблицаПоОС, Отказ, Заголовок);

КонецПроцедуры // ДвиженияПоРегистрам

Процедура ДвиженияПоРегистрамРегл(СтруктураШапкиДокумента, ТаблицаПоОС, Отказ, Заголовок)

	ДатаДока                      = Дата;
	ТекОрганизация                = СтруктураШапкиДокумента.Организация;
	ПроводкиБУ                    = Движения.Хозрасчетный;
	НазваниеДокумента             = Метаданные().Представление();

	//Получение данных о видах налоговой деятельности, к которым принадлежат ОС
	УправлениеНеоборотнымиАктивами.ДополнитьТабличнуюЧастьСведениямиОбОСБухНалогРегл(МоментВремени(), ТаблицаПоОС,
	                                                  СтруктураШапкиДокумента, 
													  Отказ, Заголовок);
													  
	ЗапросПараметрыАмортизацииОС = Новый Запрос();
	ЗапросПараметрыАмортизацииОС.УстановитьПараметр("Период", 		Новый Граница(МоментВремени(), ВидГраницы.Исключая));
	ЗапросПараметрыАмортизацииОС.УстановитьПараметр("Организация", 	ТекОрганизация);
	ЗапросПараметрыАмортизацииОС.УстановитьПараметр("СписокОС", 	ОС.ВыгрузитьКолонку("ОсновноеСредство"));
	
	ЗапросПараметрыАмортизацииОС.Текст = "ВЫБРАТЬ
	                                     |	ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.СрокПолезногоИспользования,
	                                     |	ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.ОбъемПродукцииРабот,
	                                     |	ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.СрокИспользованияДляВычисленияАмортизации,
	                                     |	ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.СтоимостьДляВычисленияАмортизации,
	                                     |	ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.ОбъемПродукцииРаботДляВычисленияАмортизации,
	                                     |	ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.ЛиквидационнаяСтоимость,
	                                     |	ПараметрыАмортизацииОСНалоговыйУчетСрезПоследних.СрокПолезногоИспользования КАК СрокПолезногоИспользованияНУ,
	                                     |	ПараметрыАмортизацииОСНалоговыйУчетСрезПоследних.СрокИспользованияДляВычисленияАмортизации КАК СрокИспользованияДляВычисленияАмортизацииНУ,
	                                     |	ПараметрыАмортизацииОСНалоговыйУчетСрезПоследних.СтоимостьДляВычисленияАмортизации КАК СтоимостьДляВычисленияАмортизацииНУ,
	                                     |	ЕстьNULL(ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство, ПараметрыАмортизацииОСНалоговыйУчетСрезПоследних.ОсновноеСредство) КАК ОсновноеСредство
	                                     |ИЗ
	                                     |	РегистрСведений.ПараметрыАмортизацииОСБухгалтерскийУчет.СрезПоследних(
	                                     |			&Период,
	                                     |			Организация = &Организация
	                                     |				И ОсновноеСредство В (&СписокОС)) КАК ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних
	                                     |		ПОЛНОЕ СОЕДИНЕНИЕ РегистрСведений.ПараметрыАмортизацииОСНалоговыйУчет.СрезПоследних(
	                                     |				&Период,
	                                     |				Организация = &Организация
	                                     |					И ОсновноеСредство В (&СписокОС)) КАК ПараметрыАмортизацииОСНалоговыйУчетСрезПоследних
	                                     |		ПО ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство = ПараметрыАмортизацииОСНалоговыйУчетСрезПоследних.ОсновноеСредство";
	
	ТекПараметрыАмортизацииОС = ЗапросПараметрыАмортизацииОС.Выполнить().Выгрузить();
	
	// Подготовим таблицу местонахождения для ТабАмортизации
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Организация",  Организация);
	Запрос.УстановитьПараметр("Период",       Новый Граница(МоментВремени(), ВидГраницы.Исключая));
	Запрос.УстановитьПараметр("ВнешнийИсточник", ТаблицаПоОС);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
   	|	ВнешнийИсточник.ОсновноеСредство
	|ПОМЕСТИТЬ ОсновныеСредства
	|ИЗ &ВнешнийИсточник КАК ВнешнийИсточник
	|;
	|ВЫБРАТЬ
	|	ОсновныеСредства.ОсновноеСредство 									КАК ОсновноеСредство,
	|	МестонахождениеОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство 	КАК ОС_БУ,
	|	МестонахождениеОСБухгалтерскийУчетСрезПоследних.Местонахождение 	КАК Местонахождение_БУ
	|ИЗ
	|	ОсновныеСредства
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МестонахождениеОСБухгалтерскийУчет.СрезПоследних(&Период, ОсновноеСредство В (ВЫБРАТЬ ОсновноеСредство ИЗ ОсновныеСредства) И Организация = &Организация) КАК МестонахождениеОСБухгалтерскийУчетСрезПоследних
	|	ПО ОсновныеСредства.ОсновноеСредство = МестонахождениеОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство";
	ТаблицаМестонахождений = Запрос.Выполнить().Выгрузить();
	
	Если Отказ Тогда
		
		Возврат
		
	КонецЕсли;
	
	// Подготовим таблицу с данными по амортизации для списания амортизации по направлениям затрат
	ТабАмортизации = Новый ТаблицаЗначений;
	ТабАмортизации.Колонки.Добавить("НаправлениеАмортизации", 	Новый ОписаниеТипов("СправочникСсылка.СпособыОтраженияРасходовПоАмортизации"));
	ТабАмортизации.Колонки.Добавить("ОбъектУчета", 				Новый ОписаниеТипов("СправочникСсылка.ОсновныеСредства"));
	ТабАмортизации.Колонки.Добавить("Сумма", 					ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповЧисла(15, 2));
	ТабАмортизации.Колонки.Добавить("СуммаНУ", 					ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповЧисла(15, 2));
	ТабАмортизации.Колонки.Добавить("СчетАмортизации", 			Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	ТабАмортизации.Колонки.Добавить("НалоговоеНазначение", 		Новый ОписаниеТипов("СправочникСсылка.НалоговыеНазначенияАктивовИЗатрат"));
	ТабАмортизации.Колонки.Добавить("Местонахождение",			Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"));
	
	Для каждого СтрокаТЧ Из ТаблицаПоОС Цикл
		
		ТекОС = СтрокаТЧ.ОсновноеСредство;
		
		// начисление амортизации за месяц
		Если    СтрокаТЧ.АмортизацияЗаМесяцБУ > 0 
			ИЛИ СтрокаТЧ.АмортизацияЗаМесяцНУ > 0 Тогда
			 
			НоваяСтрока = ТабАмортизации.Добавить();
			
			НоваяСтрока.Сумма                  	= СтрокаТЧ.АмортизацияЗаМесяцБУ;
			НоваяСтрока.СуммаНУ                	= СтрокаТЧ.АмортизацияЗаМесяцНУ;
			НоваяСтрока.ОбъектУчета            	= СтрокаТЧ.ОсновноеСредство;
			НоваяСтрока.НаправлениеАмортизации 	= СтрокаТЧ.НаправлениеБУ;
			НоваяСтрока.СчетАмортизации        	= СтрокаТЧ.СчетНачисленияАмортизацииБУ;
			НоваяСтрока.НалоговоеНазначение 	= СтрокаТЧ.НалоговоеНазначение_ОС;
			
			ТекМестонахождение 					= ТаблицаМестонахождений.Найти(СтрокаТЧ.ОсновноеСредство,"ОС_БУ");
			НоваяСтрока.Местонахождение 		= ?(ТекМестонахождение = Неопределено, Неопределено, ТекМестонахождение.Местонахождение_БУ);
			
		КонецЕсли;
		
		Если СтрокаТЧ.НалоговоеНазначение = СтрокаТЧ.НалоговоеНазначениеНовое ТОгда
			Продолжить;
		КонецЕсли;
		
		// проводки по плану счетов по изменению налогового назначения ОС: первонач. стоимость
		Проводка = ПроводкиБУ.Добавить();
		Проводка.Активность 	= Истина;
		Проводка.Организация 	= ТекОрганизация;
		Проводка.Период 		= ДатаДока;
		
		Проводка.Сумма = СтрокаТЧ.СтоимостьБУ;
		
		Проводка.СчетДт = СтрокаТЧ.СчетУчетаБУ;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ОсновныеСредства", ТекОС);
		Проводка.НалоговоеНазначениеДт = СтрокаТЧ.НалоговоеНазначениеНовое;
		
		Проводка.СчетКт = СтрокаТЧ.СчетУчетаБУ;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОсновныеСредства", ТекОС);
		Проводка.НалоговоеНазначениеКт = СтрокаТЧ.НалоговоеНазначение;
		
		Если НЕ Проводка.НалоговоеНазначениеДт = Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяНеХозДеятельность Тогда
			Проводка.СуммаНУДт = СтрокаТЧ.СтоимостьНУ;
			Если  СтрокаТЧ.НалоговоеНазначение = Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяНеХозДеятельность Тогда
				// восстановим сумму НУ - она указана руками в документе.
				Проводка.СуммаНУДт = СтрокаТЧ.СуммаНУ;	
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ Проводка.НалоговоеНазначениеКт = Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяНеХозДеятельность Тогда
			Проводка.СуммаНУКт = СтрокаТЧ.СтоимостьНУ;
		КонецЕсли;	
		
		// проводки по плану счетов по изменению налогового назначения ОС: накопленная амортизация
		Проводка = ПроводкиБУ.Добавить();
		Проводка.Активность 	= Истина;
		Проводка.Организация 	= ТекОрганизация;
		Проводка.Период 		= ДатаДока;
		
		Проводка.Сумма = СтрокаТЧ.АмортизацияБУ + СтрокаТЧ.АмортизацияЗаМесяцБУ;
		
		Проводка.СчетДт = СтрокаТЧ.СчетНачисленияАмортизацииБУ;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ОсновныеСредства", ТекОС);
		Проводка.НалоговоеНазначениеДт = СтрокаТЧ.НалоговоеНазначение;
		
		Проводка.СчетКт = СтрокаТЧ.СчетНачисленияАмортизацииБУ;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОсновныеСредства", ТекОС);
		Проводка.НалоговоеНазначениеКт = СтрокаТЧ.НалоговоеНазначениеНовое;
		
		Если НЕ Проводка.НалоговоеНазначениеДт = Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяНеХозДеятельность Тогда
			Проводка.СуммаНУДт = СтрокаТЧ.АмортизацияНУ + СтрокаТЧ.АмортизацияЗаМесяцНУ;
		КонецЕсли;	
		
		Если НЕ Проводка.НалоговоеНазначениеКт = Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяНеХозДеятельность Тогда
			Проводка.СуммаНУКт = СтрокаТЧ.АмортизацияНУ + СтрокаТЧ.АмортизацияЗаМесяцНУ;
		КонецЕсли;

		// проводки по корректировке НДС
		Если СтрокаТЧ.МетодКорректировкиНалоговогоКредита = Перечисления.МетодыКорректировкиНалоговогоКредита.НаНалоговыеОбязательства Тогда
			
			Если СтрокаТЧ.ВидКорректировкиНалоговогоКредита = Перечисления.ВидыКорректировокНалоговогоКредита.ВосстановлениеПраваНаНалоговыйКредит Тогда
					
				//Бух учет  - переоцениваем ОС на сумму НДС
				Проводка = ПроводкиБУ.Добавить();
				Проводка.Активность = Истина;
				Проводка.Организация = ТекОрганизация;
				Проводка.Период = ДатаДока;
				
				Проводка.Сумма  = - СтрокаТЧ.НДС;
				
				Проводка.СчетДт = СтрокаТЧ.СчетУчетаБУ;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт,"ОсновныеСредства", ТекОС);
				
				Проводка.НалоговоеНазначениеДт = СтрокаТЧ.НалоговоеНазначениеНовое; 
				Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыль Тогда
					Проводка.СуммаНУДт = - СтрокаТЧ.НДС;
				КонецЕсли;
				Проводка.СчетКт = СтруктураШапкиДокумента.СчетУчетаНДС_НО;
				
				// пересчитаем начисленную ранее амортизацию по ОС в связи с изменением его стоимости.
				Если ПересчитыватьНакопленнуюАмортизациюВСвязиСКорректировкойНК Тогда
					КоэффПересчетаАмортизации = -?(СтрокаТЧ.СтоимостьБУ = 0, 0, СтрокаТЧ.НДС/СтрокаТЧ.СтоимостьБУ);
				Иначе
					КоэффПересчетаАмортизации = -?((СтрокаТЧ.СтоимостьБУ - СтрокаТЧ.АмортизацияБУ) = 0, 0, СтрокаТЧ.НДС/(СтрокаТЧ.СтоимостьБУ - СтрокаТЧ.АмортизацияБУ));
				КонецЕсли;	
				
				Если КоэффПересчетаАмортизации <> 0 Тогда
					
					СуммаКоэффициентовПоНаправлениям = СпособОтраженияРасходов.Способы.Итог("Коэффициент");
					
					Если СуммаКоэффициентовПоНаправлениям > 0 Тогда
						
						ПогрешностьБУ = 0;
						ПогрешностьНУ = 0;
						
						Для Каждого НаправлениеСписания Из СпособОтраженияРасходов.Способы Цикл

							Если ПересчитыватьНакопленнуюАмортизациюВСвязиСКорректировкойНК Тогда
								СуммаПроводкиБУ = ОбщегоНазначенияРед12.ОкруглитьСУчетомПогрешности((НаправлениеСписания.Коэффициент / СуммаКоэффициентовПоНаправлениям) * КоэффПересчетаАмортизации * (СтрокаТЧ.АмортизацияБУ + СтрокаТЧ.АмортизацияЗаМесяцБУ), 2, ПогрешностьБУ);
								СуммаПроводкиНУ = ОбщегоНазначенияРед12.ОкруглитьСУчетомПогрешности((НаправлениеСписания.Коэффициент / СуммаКоэффициентовПоНаправлениям) * КоэффПересчетаАмортизации * (СтрокаТЧ.АмортизацияНУ + СтрокаТЧ.АмортизацияЗаМесяцНУ), 2, ПогрешностьНУ);
							Иначе							
								СуммаПроводкиБУ = ОбщегоНазначенияРед12.ОкруглитьСУчетомПогрешности((НаправлениеСписания.Коэффициент / СуммаКоэффициентовПоНаправлениям) * КоэффПересчетаАмортизации * (СтрокаТЧ.АмортизацияЗаМесяцБУ), 2, ПогрешностьБУ);
								СуммаПроводкиНУ = ОбщегоНазначенияРед12.ОкруглитьСУчетомПогрешности((НаправлениеСписания.Коэффициент / СуммаКоэффициентовПоНаправлениям) * КоэффПересчетаАмортизации * (СтрокаТЧ.АмортизацияЗаМесяцНУ), 2, ПогрешностьНУ);
							КонецЕсли;	
							
							Проводка = ПроводкиБУ.Добавить();
							
							Проводка.Период                     = ДатаДока;
							Проводка.Активность                 = Истина;
							Проводка.Организация                = ТекОрганизация;
							
							Проводка.Сумма                      = СуммаПроводкиБУ;
							
							Проводка.СчетДт						= НаправлениеСписания.СчетЗатрат;
							БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1 , НаправлениеСписания.Субконто1);
							БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2 , НаправлениеСписания.Субконто2);
							БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3 , НаправлениеСписания.Субконто3);
							
							Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыльДо2015 Тогда
								Если СтрокаТЧ.НалоговоеНазначение = Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяНеХозДеятельность  Тогда
									// был нехоз. ОС
									Проводка.НалоговоеНазначениеДт = Справочники.НалоговыеНазначенияАктивовИЗатрат.НКУ_НеХозДеятельность;
								Иначе	
									
									Проводка.НалоговоеНазначениеДт = СтруктураШапкиДокумента.НалоговоеНазначениеДоходовИЗатрат;
									
									Если НЕ СтруктураШапкиДокумента.НалоговоеНазначениеДоходовИЗатрат = Справочники.НалоговыеНазначенияАктивовИЗатрат.НКУ_НеХозДеятельность Тогда
										Проводка.СуммаНУДт =  СуммаПроводкиНУ;
									КонецЕсли;
									
								КонецЕсли;
							КонецЕсли;
							
							Проводка.СчетКт						= СтрокаТЧ.СчетНачисленияАмортизацииБУ;
							БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОсновныеСредства" , ТекОС);
							
							Проводка.НалоговоеНазначениеКт       = СтрокаТЧ.НалоговоеНазначениеНовое;
							Если НЕ СтрокаТЧ.НалоговоеНазначение = Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяНеХозДеятельность  Тогда
								Проводка.СуммаНУКт = СуммаПроводкиНУ;
							КонецЕсли;

							Проводка.Содержание					= НСтр("ru='Корректировка амортизации при изменении налогового назначения ОС';uk='Коригування амортизації при зміні податкового призначення ОЗ'",Локализация.КодЯзыкаИнформационнойБазы());
							
						КонецЦикла;
					
					КонецЕсли;
						
				КонецЕсли;
				
				// Движения по регистру ПараметрыАмортизации - изменена первоначальная стоимость ОС
				СтрокаПараметров = ТекПараметрыАмортизацииОС.Найти(ТекОс, "ОсновноеСредство");
				Если НЕ СтрокаПараметров = Неопределено Тогда
				
					Движение = Движения.ПараметрыАмортизацииОСБухгалтерскийУчет.Добавить();
					
					ЗаполнитьЗначенияСвойств(Движение, СтрокаПараметров);
					
					Движение.Период                                       = ДатаДока;
					Движение.ОсновноеСредство                             = ТекОС;
					Движение.Организация                                  = ТекОрганизация;
					
					Движение.СтоимостьДляВычисленияАмортизации    		  = Движение.СтоимостьДляВычисленияАмортизации - СтрокаТЧ.НДС;
					
					// Движения по регистру ПараметрыАмортизацииНУ - изменена первоначальная стоимость ОС
					Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыль Тогда
						
						Движение = Движения.ПараметрыАмортизацииОСНалоговыйУчет.Добавить();
						
						Движение.Период 									= ДатаДока;
						Движение.ОсновноеСредство 							= ТекОС;
						Движение.Организация 								= ТекОрганизация;
						
						Движение.СрокПолезногоИспользования 				= СтрокаПараметров.СрокПолезногоИспользованияНУ;
						
						Движение.СрокИспользованияДляВычисленияАмортизации 	= СтрокаПараметров.СрокИспользованияДляВычисленияАмортизацииНУ;
						
						Если СтрокаТЧ.НалоговоеНазначение = Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяНеХозДеятельность Тогда
							// ОС был непроизводственный, суммы для амортизации в регистре и на счете не было.
							Движение.СтоимостьДляВычисленияАмортизации 		= СтрокаТЧ.СуммаНУ - СтрокаТЧ.НДС;
						Иначе	
							Движение.СтоимостьДляВычисленияАмортизации 		= СтрокаПараметров.СтоимостьДляВычисленияАмортизацииНУ - СтрокаТЧ.НДС;						
						КонецЕсли;
						
					КонецЕсли;
				
				КонецЕсли;
				
				
			Иначе	
				// Проводки по условной продаже  будут сделаны в процедуре ПроводкиПоНДС();
			КонецЕсли;
			
		ИначеЕсли СтрокаТЧ.МетодКорректировкиНалоговогоКредита = Перечисления.МетодыКорректировкиНалоговогоКредита.НаНалоговыйКредит Тогда
			
			//Бух учет  - переоцениваем ОС на сумму НДС
			Проводка = ПроводкиБУ.Добавить();
			Проводка.Активность = Истина;
			Проводка.Организация = ТекОрганизация;
			Проводка.Период = ДатаДока;
			
			Проводка.Сумма  = СтрокаТЧ.НДС;
			
			Проводка.СчетКт = СтрокаТЧ.СчетУчетаБУ;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт,"ОсновныеСредства", ТекОС);
			
			Проводка.НалоговоеНазначениеКт = СтрокаТЧ.НалоговоеНазначениеНовое; 
			Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыль Тогда
				Проводка.СуммаНУКт = СтрокаТЧ.НДС;
			КонецЕсли;
			Проводка.СчетДт = СтруктураШапкиДокумента.СчетУчетаКорректировкиНДСКредит;
			
			// пересчитаем начисленную ранее амортизацию по ОС в связи с изменением его стоимости.
			// пересчет осуществим пропорционально уменьшению стоимости.
			Если ПересчитыватьНакопленнуюАмортизациюВСвязиСКорректировкойНК Тогда
				КоэффПересчетаАмортизации = - ?(СтрокаТЧ.СтоимостьБУ = 0, 0, СтрокаТЧ.НДС/СтрокаТЧ.СтоимостьБУ);
			Иначе
				КоэффПересчетаАмортизации = - ?((СтрокаТЧ.СтоимостьБУ - СтрокаТЧ.АмортизацияБУ) = 0, 0, СтрокаТЧ.НДС/(СтрокаТЧ.СтоимостьБУ - СтрокаТЧ.АмортизацияБУ));
			КонецЕсли;	
			
			Если КоэффПересчетаАмортизации <> 0 Тогда
				
				СуммаКоэффициентовПоНаправлениям = СпособОтраженияРасходов.Способы.Итог("Коэффициент");
				
				Если СуммаКоэффициентовПоНаправлениям > 0 Тогда
					
					ПогрешностьБУ = 0;
					ПогрешностьНУ = 0;
					
					Для каждого НаправлениеСписания Из СпособОтраженияРасходов.Способы Цикл

						Если ПересчитыватьНакопленнуюАмортизациюВСвязиСКорректировкойНК Тогда
							СуммаПроводкиБУ = ОбщегоНазначенияРед12.ОкруглитьСУчетомПогрешности((НаправлениеСписания.Коэффициент / СуммаКоэффициентовПоНаправлениям) * КоэффПересчетаАмортизации * (СтрокаТЧ.АмортизацияБУ + СтрокаТЧ.АмортизацияЗаМесяцБУ), 2, ПогрешностьБУ);
							СуммаПроводкиНУ = ОбщегоНазначенияРед12.ОкруглитьСУчетомПогрешности((НаправлениеСписания.Коэффициент / СуммаКоэффициентовПоНаправлениям) * КоэффПересчетаАмортизации * (СтрокаТЧ.АмортизацияНУ + СтрокаТЧ.АмортизацияЗаМесяцНУ), 2, ПогрешностьНУ);
						Иначе							
							СуммаПроводкиБУ = ОбщегоНазначенияРед12.ОкруглитьСУчетомПогрешности((НаправлениеСписания.Коэффициент / СуммаКоэффициентовПоНаправлениям) * КоэффПересчетаАмортизации * (СтрокаТЧ.АмортизацияЗаМесяцБУ), 2, ПогрешностьБУ);
							СуммаПроводкиНУ = ОбщегоНазначенияРед12.ОкруглитьСУчетомПогрешности((НаправлениеСписания.Коэффициент / СуммаКоэффициентовПоНаправлениям) * КоэффПересчетаАмортизации * (СтрокаТЧ.АмортизацияЗаМесяцНУ), 2, ПогрешностьНУ);
						КонецЕсли;	
						
						Проводка = ПроводкиБУ.Добавить();
						
						Проводка.Период                     = ДатаДока;
						Проводка.Активность                 = Истина;
						Проводка.Организация                = ТекОрганизация;
						
						Проводка.Сумма                      = СуммаПроводкиБУ;
						
						Проводка.СчетДт						= НаправлениеСписания.СчетЗатрат;
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1 , НаправлениеСписания.Субконто1);
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2 , НаправлениеСписания.Субконто2);
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3 , НаправлениеСписания.Субконто3);
						
						Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыльДо2015 Тогда
							Если СтрокаТЧ.НалоговоеНазначение = Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяНеХозДеятельность  Тогда
								// был нехоз. ОС
								Проводка.НалоговоеНазначениеДт = Справочники.НалоговыеНазначенияАктивовИЗатрат.НКУ_НеХозДеятельность;
							Иначе	
								
								Проводка.НалоговоеНазначениеДт = СтруктураШапкиДокумента.НалоговоеНазначениеДоходовИЗатрат;
								
								Если НЕ СтруктураШапкиДокумента.НалоговоеНазначениеДоходовИЗатрат = Справочники.НалоговыеНазначенияАктивовИЗатрат.НКУ_НеХозДеятельность Тогда
									Проводка.СуммаНУДт =  СуммаПроводкиНУ;
								КонецЕсли;
								
							КонецЕсли;
						КонецЕсли;
						
						Проводка.СчетКт						= СтрокаТЧ.СчетНачисленияАмортизацииБУ;
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОсновныеСредства" , ТекОС);
						
						Проводка.НалоговоеНазначениеКт       = СтрокаТЧ.НалоговоеНазначениеНовое;
						Если НЕ СтрокаТЧ.НалоговоеНазначение = Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяНеХозДеятельность  Тогда
							Проводка.СуммаНУКт = СуммаПроводкиНУ;
						КонецЕсли;

						Проводка.Содержание					= НСтр("ru='Списание амортизации при изменении налогового назначения ОС';uk='Списання амортизації при зміні податкового призначення ОЗ'",Локализация.КодЯзыкаИнформационнойБазы());
						
					КонецЦикла;
				
				КонецЕсли;
					
			КонецЕсли;
			
			// Движения по регистру ПараметрыАмортизации - изменена первоначальная стоимость ОС
			СтрокаПараметров = ТекПараметрыАмортизацииОС.Найти(ТекОс, "ОсновноеСредство");
			Если НЕ СтрокаПараметров = Неопределено Тогда
			
				Движение = Движения.ПараметрыАмортизацииОСБухгалтерскийУчет.Добавить();
				
				ЗаполнитьЗначенияСвойств(Движение, СтрокаПараметров);
				
				Движение.Период                                       = ДатаДока;
				Движение.ОсновноеСредство                             = ТекОС;
				Движение.Организация                                  = ТекОрганизация;
				
				Движение.СтоимостьДляВычисленияАмортизации    		  = Движение.СтоимостьДляВычисленияАмортизации - СтрокаТЧ.НДС;
				
				// Движения по регистру ПараметрыАмортизацииНУ - изменена первоначальная стоимость ОС
				Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыль Тогда
					
					Движение = Движения.ПараметрыАмортизацииОСНалоговыйУчет.Добавить();
					
					Движение.Период 									= ДатаДока;
					Движение.ОсновноеСредство 							= ТекОС;
					Движение.Организация 								= ТекОрганизация;
					
					Движение.СрокПолезногоИспользования 				= СтрокаПараметров.СрокПолезногоИспользованияНУ;
					
					Движение.СрокИспользованияДляВычисленияАмортизации 	= СтрокаПараметров.СрокИспользованияДляВычисленияАмортизацииНУ;
					
					Если СтрокаТЧ.НалоговоеНазначение = Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяНеХозДеятельность Тогда
						// ОС был непроизводственный, суммы для амортизации в регистре и на счете не было.
						Движение.СтоимостьДляВычисленияАмортизации 		= СтрокаТЧ.СуммаНУ - СтрокаТЧ.НДС;
					Иначе	
						Движение.СтоимостьДляВычисленияАмортизации 		= СтрокаПараметров.СтоимостьДляВычисленияАмортизацииНУ - СтрокаТЧ.НДС;						
					КонецЕсли;
					
				КонецЕсли;
			
			КонецЕсли;
			
		КонецЕсли;
 
		// Движения по регистру НалоговыеНазначенияОС
		Движение = Движения.НалоговыеНазначенияОС.Добавить();
		Движение.Период                   = ДатаДока;
		Движение.ОсновноеСредство         = ТекОС;
		Движение.Организация              = ТекОрганизация;
		Движение.НалоговоеНазначение      = СтрокаТЧ.НалоговоеНазначениеНовое;
		
		// Движения по регистру СобытияОСОрганизаций
		Движение = Движения.СобытияОСОрганизаций.Добавить();
		Движение.Период               = ДатаДока;
		Движение.ОсновноеСредство     = ТекОС;
		Движение.Организация          = ТекОрганизация;
		Движение.Событие              = СтруктураШапкиДокумента.СобытиеОС;
		Движение.НомерДокумента		  = Номер;
		Движение.НазваниеДокумента 	  = НазваниеДокумента;
		
		// Движения по регистру НачислениеАмортизацииОСНалоговыйУчет
		// при переводе ОС из/в непроизводственное
		Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыль Тогда
			
			Если  СтрокаТЧ.НалоговоеНазначение      = Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяНеХозДеятельность 
			 И НЕ СтрокаТЧ.НалоговоеНазначениеНовое = Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяНеХозДеятельность Тогда
				
				Движение = Движения.НачислениеАмортизацииОСНалоговыйУчет.Добавить();
				
				Движение.Период               = ДатаДока;
				Движение.ОсновноеСредство     = ТекОС;
				Движение.Организация          = ТекОрганизация;
				Движение.НачислятьАмортизацию = Истина;
			
			ИначеЕсли  НЕ СтрокаТЧ.НалоговоеНазначение      = Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяНеХозДеятельность 
				        И СтрокаТЧ.НалоговоеНазначениеНовое = Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяНеХозДеятельность Тогда
				
				Движение = Движения.НачислениеАмортизацииОСНалоговыйУчет.Добавить();
				
				Движение.Период               = ДатаДока;
				Движение.ОсновноеСредство     = ТекОС;
				Движение.Организация          = ТекОрганизация;
				Движение.НачислятьАмортизацию = Ложь;
			
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ТабАмортизации <> Неопределено Тогда
		
		// Вызов процедуры списания амортизации по направлениям.
		// Создаются движения по начислению амортизации.
		УправлениеНеоборотнымиАктивами.ПолучитьРаспределениеАмортизацииПоНаправлениямРегл(ПроводкиБУ,
		                                                   Отказ,
														   Заголовок,
														   ТабАмортизации,
														   СтруктураШапкиДокумента,
														   НСтр("ru='ОС';uk='ОЗ'",Локализация.КодЯзыкаИнформационнойБазы()),
														   НСтр("ru='Начисление амортизации';uk='Нарахування амортизації'",Локализация.КодЯзыкаИнформационнойБазы()));
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДвиженияПоРегиструОжидаемыйИПодтвержденныйНДСПродаж(СтруктураШапкиДокумента, 
	ПроводкиПоТоварам, Отказ, Заголовок)
	    
	Если НЕ СтруктураШапкиДокумента.ЕстьНДС Тогда
		Возврат;
	КонецЕсли;
	
	// для метода корректировки "На обязательства" отражаем в регистре НДСПРодажа, далее в книге продаж
	// отразится документом НалоговаяНалкданая (Вид операции - Условная продажа)
	НаборДвижений = Движения.ОжидаемыйИПодтвержденныйНДСПродаж;
	
	// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
	ТаблицаДвиженийОжидаемыйИПодтвержденныйНДСПродаж = НаборДвижений.ВыгрузитьКолонки();
	
	ТаблицаКопия = ПроводкиПоТоварам.Скопировать();
	ТаблицаКопия.Колонки.Добавить("СобытиеНДС");
	
	// оставим только строки с методом корректировки "на обязательства" и ненулевой суммой обязательств
	Инд = 0;
	Пока Инд < ТаблицаКопия.Количество() Цикл
		СтрокаТаблицы = ТаблицаКопия[Инд];
		
		Если  НЕ СтрокаТаблицы.МетодКорректировкиНалоговогоКредита = Перечисления.МетодыКорректировкиНалоговогоКредита.НаНалоговыеОбязательства 
			ИЛИ СтрокаТаблицы.НДС = 0 Тогда
			
			ТаблицаКопия.Удалить(СтрокаТаблицы);
			
		Иначе
			
			Если СтрокаТаблицы.ВидКорректировкиНалоговогоКредита = Перечисления.ВидыКорректировокНалоговогоКредита.ВосстановлениеПраваНаНалоговыйКредит Тогда
				СтрокаТаблицы.СобытиеНДС = Перечисления.СобытияОжидаемыйИПодтвержденныйНДСПродаж.УсловнаяПродажаВозврат;
			Иначе	
			    СтрокаТаблицы.СобытиеНДС = Перечисления.СобытияОжидаемыйИПодтвержденныйНДСПродаж.УсловнаяПродажа;
			КонецЕсли;
			
			Инд = Инд + 1;
			
		КонецЕсли;
	КонецЦикла;
	
	ТаблицаКопия.Колонки.НДС.Имя 	= "СуммаНДС";
	ТаблицаКопия.Свернуть("СтавкаНДС, СобытиеНДС","СуммаНДС, БазаНДС");
	
	// Заполним таблицу движений.
	ОбщегоНазначенияБПВызовСервера.ЗагрузитьВТаблицуЗначений(ТаблицаКопия, ТаблицаДвиженийОжидаемыйИПодтвержденныйНДСПродаж);
	
	ТаблицаДвиженийОжидаемыйИПодтвержденныйНДСПродаж.ЗаполнитьЗначения(СтруктураШапкиДокумента.Организация			  , "Организация");
	ТаблицаДвиженийОжидаемыйИПодтвержденныйНДСПродаж.ЗаполнитьЗначения(Перечисления.КодыОперацийОжидаемыйИПодтвержденныйНДСПродаж.ОжидаемыйНДС, "КодОперации");
	
	Если ТаблицаДвиженийОжидаемыйИПодтвержденныйНДСПродаж.Количество()>0 Тогда
		
		НаборДвижений.мПериод            = СтруктураШапкиДокумента.Дата;
		НаборДвижений.мТаблицаДвижений   = ТаблицаДвиженийОжидаемыйИПодтвержденныйНДСПродаж;
		
		Если Не Отказ Тогда
			Движения.ОжидаемыйИПодтвержденныйНДСПродаж.ВыполнитьПриход();
		КонецЕсли;
		
	КонецЕсли; 
	
КонецПроцедуры

Процедура ПроводкиПоНДС(СтруктураШапкиДокумента, ПроводкиПоТоварам, Отказ, Заголовок)
	
	Если НЕ СтруктураШапкиДокумента.ЕстьНДС Тогда
		Возврат;
	КонецЕсли;
	
	ПроводкиБУ = Движения.Хозрасчетный;	
	// Проводки по НДС
	
	// Суммы, по корректировкам налоговых обязательств (условная продажа)
	ТаблицаКопия = ПроводкиПоТоварам.Скопировать();
	
	ТаблицаКопия.Свернуть("ВидКорректировкиНалоговогоКредита, МетодКорректировкиНалоговогоКредита,НалоговоеНазначениеНовое","НДС");
	
	// оставим только строку с методом корректировки "на обязательства" и ненулевой суммой обязательств
	Инд = 0;
	Пока Инд < ТаблицаКопия.Количество() Цикл
		СтрокаТаблицы = ТаблицаКопия[Инд];
		
		Если  НЕ СтрокаТаблицы.МетодКорректировкиНалоговогоКредита = Перечисления.МетодыКорректировкиНалоговогоКредита.НаНалоговыеОбязательства 
			ИЛИ СтрокаТаблицы.ВидКорректировкиНалоговогоКредита = Перечисления.ВидыКорректировокНалоговогоКредита.ВосстановлениеПраваНаНалоговыйКредит
			ИЛИ СтрокаТаблицы.НДС = 0 Тогда
			
			ТаблицаКопия.Удалить(СтрокаТаблицы);
			
		Иначе
			
			Инд = Инд + 1;
			
		КонецЕсли;
	КонецЦикла;	
	
	Для каждого СтрокаТаблицы Из ТаблицаКопия Цикл
	
		Проводка = ПроводкиБУ.Добавить();
		
		Проводка.Период                     = СтруктураШапкиДокумента.Дата;
		Проводка.Активность                 = Истина;
		Проводка.Организация                = СтруктураШапкиДокумента.Организация;
		
		Проводка.Сумма                      = СтрокаТаблицы.НДС;
		
		Проводка.СчетДт						= СтруктураШапкиДокумента.СчетУчетаЗатрат;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1 , СтруктураШапкиДокумента.ЗатратыСубконто1);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2 , СтруктураШапкиДокумента.ЗатратыСубконто2);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3 , СтруктураШапкиДокумента.ЗатратыСубконто3);
		
		Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыльДо2015 Тогда
			Если СтрокаТаблицы.НалоговоеНазначениеНовое = Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяНеХозДеятельность  Тогда
				
				Проводка.НалоговоеНазначениеДт = Справочники.НалоговыеНазначенияАктивовИЗатрат.НКУ_НеХозДеятельность;
				
			Иначе	
				
				Проводка.НалоговоеНазначениеДт = СтруктураШапкиДокумента.НалоговоеНазначениеДоходовИЗатрат;
				Если НЕ СтруктураШапкиДокумента.НалоговоеНазначениеДоходовИЗатрат = Справочники.НалоговыеНазначенияАктивовИЗатрат.НКУ_НеХозДеятельность Тогда
					
					Проводка.СуммаНУДт =  СтрокаТаблицы.НДС;
				
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
		
		Проводка.СчетКт						= СтруктураШапкиДокумента.СчетУчетаНДС_НО;
		
		Проводка.Содержание					= НСтр("ru='Налоговые обязательства по НДС (условная продажа)';uk=""Податкові зобов'язання по ПДВ (умовний продаж)""",Локализация.КодЯзыкаИнформационнойБазы());
		
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОВЕРКИ ПРАВИЛЬНОСТИ ЗАПОЛНЕНИЯ


Процедура ПроверитьВозможностьКорректировки(Таблица, ИмяТабличнойЧасти, Отказ, Заголовок)

	ПредставлениеТабличнойЧасти = Метаданные().ТабличныеЧасти[ИмяТабличнойЧасти].Представление();
	
	ПропорцНДС = Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_Пропорционально;
	ОблНДС	   = Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_Облагаемая;
	
	Для каждого СтрокаТЧ  Из Таблица Цикл
		
		Префикс = "%1[%2].";
		Префикс = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Префикс,ИмяТабличнойЧасти,Формат(СтрокаТЧ.НомерСтроки - 1, "ЧН=0; ЧГ="));
		СтрокаСообщения = НСтр("ru='Корректировка между указанными налоговыми назначениями не предусмотрена!';uk='Коригування між вказаними податковими призначеннями не передбачене!'");	
		
		ВыдаватьСообщение = Ложь;
		
		Если СтрокаТЧ.НалоговоеНазначениеНовое = ПропорцНДС Тогда
		
			ВыдаватьСообщение = Истина;
			
		ИначеЕсли СтрокаТЧ.НалоговоеНазначение      = ПропорцНДС 
			    И СтрокаТЧ.НалоговоеНазначениеНовое = ОблНДС Тогда
			
			ВыдаватьСообщение = Истина;
			
		КонецЕсли;
		
		
		Если ВыдаватьСообщение Тогда
			
			Поле = Префикс + "НалоговоеНазначение";
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения, ЭтотОбъект, Поле, , Отказ);
			
		КонецЕсли;
		
	КонецЦикла; 		

КонецПроцедуры

Процедура ПроверитьЗаполнениеМетодКорректировкиНалоговогоКредитаВТабличнойЧасти(Таблица, ИмяТабличнойЧасти, Отказ, Заголовок)
	
	ПредставлениеТабличнойЧасти = Метаданные().ТабличныеЧасти[ИмяТабличнойЧасти].Представление();
	
	Для каждого СтрокаТЧ  Из Таблица Цикл
		
		СтрокаСообщения = НСтр("ru='Неверное значение метода корректировки налогового кредита (""Метод корректировки"")!';uk='Невірне значення методу коригування податкового кредиту (""Метод коригування"")!'");	
		
		Если 
			(  СтрокаТЧ.ВидКорректировкиНалоговогоКредита = Перечисления.ВидыКорректировокНалоговогоКредита.ПотеряПраваНаНалоговыйКредит
			И СтрокаТЧ.МетодКорректировкиНалоговогоКредита = Перечисления.МетодыКорректировкиНалоговогоКредита.НаНалоговыйКредит)	
			ИЛИ 
			(     СтрокаТЧ.ВидКорректировкиНалоговогоКредита = Перечисления.ВидыКорректировокНалоговогоКредита.НетКорректировок
			И НЕ СтрокаТЧ.МетодКорректировкиНалоговогоКредита = Перечисления.МетодыКорректировкиНалоговогоКредита.НеКорректировать)	 Тогда
			
			Префикс = "%1[%2].";
			Префикс = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Префикс, ИмяТабличнойЧасти, Формат(СтрокаТЧ.НомерСтроки - 1, "ЧН=0; ЧГ="));
			Поле = Префикс + "МетодКорректировкиНалоговогоКредита";
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения, ЭтотОбъект, Поле, , Отказ);
			
		КонецЕсли;
		
	КонецЦикла; 
	
КонецПроцедуры 


// Процедура формирует структуру шапки документа и дополнительных полей.
//
Процедура ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента) Экспорт

	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента = ОбщегоНазначенияРед12.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	
КонецПроцедуры // ПодготовитьСтруктуруШапкиДокумента()

// Процедура формирует таблицы документа.
//
Процедура ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоОС, Отказ, Заголовок) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаОС", ОС.Выгрузить());
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаОС.ОсновноеСредство,
	|	ТаблицаОС.НомерСтроки,
	|	ТаблицаОС.СтоимостьБУ,
	|	ТаблицаОС.АмортизацияБУ,
	|	ТаблицаОС.АмортизацияЗаМесяцБУ,
	|	ТаблицаОС.СтоимостьНУ,
	|	ТаблицаОС.АмортизацияНУ,
	|	ТаблицаОС.АмортизацияЗаМесяцНУ,
	|	ТаблицаОС.СуммаНДС КАК НДС,
	|	ТаблицаОС.НалоговоеНазначение,
	|	ТаблицаОС.НалоговоеНазначениеНовое,
	|	ТаблицаОС.МетодКорректировкиНалоговогоКредита,
	|	ТаблицаОС.СтавкаНДС,
	|	ТаблицаОС.СуммаНУ
	|ПОМЕСТИТЬ ВТ_ОсновныеСредства
	|ИЗ
	|	&ТаблицаОС КАК ТаблицаОС
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ОсновныеСредства.ОсновноеСредство,
	|	ВТ_ОсновныеСредства.НомерСтроки,
	|	ВТ_ОсновныеСредства.СтоимостьБУ,
	|	ВТ_ОсновныеСредства.АмортизацияБУ,
	|	ВТ_ОсновныеСредства.АмортизацияЗаМесяцБУ,
	|	ВТ_ОсновныеСредства.СтоимостьНУ,
	|	ВТ_ОсновныеСредства.АмортизацияНУ,
	|	ВТ_ОсновныеСредства.АмортизацияЗаМесяцНУ,
	|	ВТ_ОсновныеСредства.НДС,
	|	ВТ_ОсновныеСредства.НалоговоеНазначение,
	|	ВТ_ОсновныеСредства.НалоговоеНазначениеНовое,
	|	ВТ_ОсновныеСредства.МетодКорректировкиНалоговогоКредита,
	|	ВТ_ОсновныеСредства.СуммаНУ,
	|	ВТ_ОсновныеСредства.СтавкаНДС
	|ИЗ
	|	ВТ_ОсновныеСредства КАК ВТ_ОсновныеСредства";
	
	РезультатЗапросаПоОС = Запрос.Выполнить();

	
	// Подготовим таблицы товаров для проведения.
	ТаблицаПоОС = ПодготовитьТаблицуОС(РезультатЗапросаПоОС, СтруктураШапкиДокумента);
	
КонецПроцедуры

Функция ПодготовитьТаблицуОС(РезультатЗапросаПоОС, СтруктураШапкиДокумента)
	
	ТаблицаОС = РезультатЗапросаПоОС.Выгрузить();
	
	ТаблицаОС.Колонки.Добавить("ВидКорректировкиНалоговогоКредита",Новый ОписаниеТипов("ПеречислениеСсылка.ВидыКорректировокНалоговогоКредита"));
	ТаблицаОС.Колонки.Добавить("БазаНДС", 							ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповЧисла(15,2));
	
	Для каждого СтрокаТаблицы Из ТаблицаОС Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.СтавкаНДС) Тогда
			СтрокаТаблицы.СтавкаНДС = Перечисления.СтавкиНДС.НДС20;
		КонецЕсли;
		
		СтрокаТаблицы.ВидКорректировкиНалоговогоКредита = ОпределитьВидКорректировкиНК(СтрокаТаблицы);
		СтавкаНДСЧислом = УчетНДС.ПолучитьСтавкуНДС(СтрокаТаблицы.СтавкаНДС); 
		СтрокаТаблицы.БазаНДС  = ?(СтавкаНДСЧислом = 0, 0, СтрокаТаблицы.НДС*100/СтавкаНДСЧислом);
	КонецЦикла;
	
	Возврат ТаблицаОС;
	
КонецФункции // ПодготовитьТаблицуОС()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура вызывается перед записью документа 
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ПередЗаписью

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	Перем Заголовок, СтруктураШапкиДокумента;
	Перем ТаблицаПоОС;
	
	Заголовок = ОбщегоНазначенияБПВызовСервера.ПредставлениеДокументаПриПроведении(Ссылка);
	
	// ПОДГОТОВКА ПРОВЕДЕНИЯ ПО ДАННЫМ ДОКУМЕНТА

	ПроведениеСервер.ПодготовитьНаборыЗаписейКПроведению(ЭтотОбъект);
	Если РучнаяКорректировка Тогда
		Возврат;
	КонецЕсли;
	
	ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента);
	
	// Получим данные учетной политики
	ПодготовитьПараметрыУчетнойПолитики(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	
	ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоОС, Отказ, Заголовок);

	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	

	Если Не Отказ Тогда
		
		ДвиженияПоРегистрам(СтруктураШапкиДокумента, ТаблицаПоОС, Отказ, Заголовок);
		
	КонецЕсли;
	
	Движения.Хозрасчетный.ВыполнитьДействияПередЗаписьюДвижений();

	ПроведениеСервер.ПодготовитьНаборыЗаписейКЗаписиДвижений(ЭтотОбъект);
	
КонецПроцедуры // ОбработкаПроведения()

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКОтменеПроведения(ЭтотОбъект);
	Движения.Записать();
	
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	ЗаполнениеДокументов.Заполнить(ЭтотОбъект, ДанныеЗаполнения);
	
	//Заполним счет учета НДС по-умолчанию
	СчетУчетаНДС 		= ПланыСчетов.Хозрасчетный.РасчетыПоНДС;
	СчетУчетаНДС_НО 	= ПланыСчетов.Хозрасчетный.УсловнаяПродажа;
	СчетУчетаКорректировкиНДСКредит = ПланыСчетов.Хозрасчетный.КорректировкиНалоговогоКредита;
	НалоговоеНазначениеДоходовИЗатрат 	= Справочники.НалоговыеНазначенияАктивовИЗатрат.НКУ_ХозДеятельность;
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	Дата = НачалоДня(ОбщегоНазначенияБП.ПолучитьРабочуюДату());
	Ответственный = Пользователи.ТекущийПользователь();
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	Перем Заголовок, СтруктураШапкиДокумента,ТаблицаПоОС;
	МассивНепроверяемыхРеквизитов = Новый Массив;
	
	Заголовок = ОбщегоНазначенияБПВызовСервера.ПредставлениеДокументаПриПроведении(Ссылка);
	ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента);
	
	// Получим данные учетной политики
	ПодготовитьПараметрыУчетнойПолитики(СтруктураШапкиДокумента, Отказ, Заголовок);
    ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоОС, Отказ, Заголовок);

	Если НЕ УчетнаяПолитика.ПлательщикНДС(Организация, Дата) Тогда
		
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='На дату документа: %1 организация ""%2""%3не является плательщиком налога на прибыль или НДС.%4В этом случае документ не используется.';uk='На дату документа: %1 організація ""%2""%3не є платником податку на прибуток або ПДВ.%4В цьому випадку документ не використовується.'"), Дата, Организация, Символы.ПС, Символы.ПС);
		ТекстСообщения = ОбщегоНазначенияБПКлиентСервер.ПолучитьТекстСообщения(, "Корректность",
		НСтр("ru='Организация';uk='Організація'"),,, ТекстСообщения);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект,
		"Организация", "Объект", Отказ);
				
		Возврат;				
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыльДо2015 Тогда
		Если ЗначениеЗаполнено(СчетУчетаЗатрат) Тогда
			Для НомСубконто = 1 По 3 Цикл
				Если СчетУчетаЗатрат.ВидыСубконто.Количество()<НомСубконто Тогда
					МассивНепроверяемыхРеквизитов.Добавить("ЗатратыСубконто" + НомСубконто);
					Продолжить;
				КонецЕсли;
				
				ВидСубконто = СчетУчетаЗатрат.ВидыСубконто[НомСубконто-1].ВидСубконто;
				Если НЕ (ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат
					 ИЛИ ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиДоходов
					 ИЛИ ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиНеоперационныхРасходов) Тогда
					 МассивНепроверяемыхРеквизитов.Добавить("ЗатратыСубконто" + НомСубконто);
				КонецЕсли;
			КонецЦикла;
		Иначе 
			МассивНепроверяемыхРеквизитов.Добавить("ЗатратыСубконто1");
			МассивНепроверяемыхРеквизитов.Добавить("ЗатратыСубконто2");
			МассивНепроверяемыхРеквизитов.Добавить("ЗатратыСубконто3");
		КонецЕсли;
	Иначе 
		МассивНепроверяемыхРеквизитов.Добавить("НалоговоеНазначениеДоходовИЗатрат");
		МассивНепроверяемыхРеквизитов.Добавить("СчетУчетаЗатрат");
		МассивНепроверяемыхРеквизитов.Добавить("ЗатратыСубконто1");
		МассивНепроверяемыхРеквизитов.Добавить("ЗатратыСубконто2");
		МассивНепроверяемыхРеквизитов.Добавить("ЗатратыСубконто3");
	КонецЕсли; 
	

	ПроверитьВозможностьКорректировки(ТаблицаПоОС, "ОС", Отказ, Заголовок);
	Если НЕ Отказ Тогда
		ПроверитьЗаполнениеМетодКорректировкиНалоговогоКредитаВТабличнойЧасти(ТаблицаПоОС, "ОС", Отказ, Заголовок);
	КонецЕсли;
	Если НЕ Отказ Тогда
		//проверка, нет ли списанных ОС в табличной части
		УправлениеНеоборотнымиАктивами.ПроверитьНаСписанность(МоментВремени(), Организация, ТаблицаПоОС, Отказ, Заголовок);
		УправлениеВнеоборотнымиАктивами.ПроверитьОтсутствиеДублейВТабличнойЧасти(ЭтотОбъект, "ОС", Новый Структура("ОсновноеСредство"), Отказ);
	КонецЕсли;
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	
КонецПроцедуры

#КонецЕсли
