#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	
	Если Параметры.Ключ.Пустая() Тогда
		ПодготовитьФормуНаСервере();
	КонецЕсли;
	
	// Уведомим о появлении функционала рабочей даты
	ЭтаФорма.НастройкиПредупреждений = ОбщегоНазначенияБП.НастройкиПредупрежденийОбИзменениях("РабочаяДатаИзДокумента");
	
	// Показываем, если это новый документ и сама рабочая дата еще не установлена.
	ЭтаФорма.НастройкиПредупреждений.РабочаяДатаИзДокумента = ЭтаФорма.НастройкиПредупреждений.РабочаяДатаИзДокумента
	И ЭтаФорма.Параметры.Ключ.Пустая()
	И НЕ ЗначениеЗаполнено(БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("РабочаяДата"));
	
	Элементы.ВсегоМетодКорректировкиНДС1.Заголовок = ПредопределенноеЗначение("Перечисление.МетодыКорректировкиНалоговогоКредита.НаНалоговыеОбязательства");
	Элементы.ВсегоМетодКорректировкиНДС2.Заголовок = ПредопределенноеЗначение("Перечисление.МетодыКорректировкиНалоговогоКредита.НаНалоговыйКредит");
	
	МетодыКорректировки_ВосстановлениеПраваНаНК.Добавить(Перечисления.МетодыКорректировкиНалоговогоКредита.НаНалоговыеОбязательства);
	МетодыКорректировки_ВосстановлениеПраваНаНК.Добавить(Перечисления.МетодыКорректировкиНалоговогоКредита.НаНалоговыйКредит);
	МетодыКорректировки_ВосстановлениеПраваНаНК.Добавить(Перечисления.МетодыКорректировкиНалоговогоКредита.НеКорректировать);
	
	МетодыКорректировки_ПотеряПраваНаНК.Добавить(Перечисления.МетодыКорректировкиНалоговогоКредита.НаНалоговыеОбязательства);
	МетодыКорректировки_ПотеряПраваНаНК.Добавить(Перечисления.МетодыКорректировкиНалоговогоКредита.НеКорректировать);
	
	// Заполнить соответствие объектов ОС и их инвентарных номеров
	//СоответствиеОС_ИнвентарныйНомер = Новый Соответствие;
	//ЗаполнитьСоответствиеОС_ИнвентарныйНомер(Объект.ОС.Выгрузить(,"ОсновноеСредство").ВыгрузитьКолонку("ОсновноеСредство"));

	//СоответствиеОС_ИнвентарныйНомер
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
КонецПроцедуры // ПриСозданииНаСервере

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	ПодготовитьФормуНаСервере();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры // ПриЧтенииНаСервере

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ЗаполнитьДобавленныеКолонкиТаблиц();
	
	УстановитьСостояниеДокумента();
	
КонецПроцедуры // ПослеЗаписиНаСервере

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ИсточникВыбора.ИмяФормы = "Обработка.ПодборОсновныхСредств.Форма.Форма" Тогда
		ОбработкаВыбораНаСервере(ВыбранноеЗначение);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаВыбораНаСервере(Знач ВыбранноеЗначение)

	ДобавленныеСтроки = УчетОС.ОбработатьПодборОсновныхСредств(Объект.ОС, ВыбранноеЗначение);
	ЗаполнитьИнвентарныеНомераОС();

	//Заполнить налоговое назначение
	Для каждого СтрокаОС Из Объект.ОС Цикл
	    Если НЕ ЗначениеЗаполнено(СтрокаОС.НалоговоеНазначение) Тогда
		     	ЗаполнитьНалоговоеНазначениеОС(СтрокаОС,Объект);
		КонецЕсли; 
	КонецЦикла; 
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	Если НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДатаДокумента) Тогда
		// Изменение времени не влияет на поведение документа.
		ТекущаяДатаДокумента = Объект.Дата;
		Возврат;
	КонецЕсли;
	
	// Общие проверки условий по датам.
	ТребуетсяВызовСервера = ОбщегоНазначенияБПКлиент.ТребуетсяВызовСервераПриИзмененииДатыДокумента(Объект.Дата, 
	ТекущаяДатаДокумента);
	
	// Если определили, что изменение даты может повлиять на какие-либо параметры, 
	// то передаем обработку на сервер.
	Если ТребуетсяВызовСервера Тогда
		ДатаПриИзмененииНаСервере();
	КонецЕсли;
	
	// Запомним новую дату документа.
	ТекущаяДатаДокумента = Объект.Дата;
	
КонецПроцедуры

&НаСервере
Процедура ДатаПриИзмененииНаСервере()
	
	УстановитьФункциональныеОпцииФормы();
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		ОрганизацияПриИзмененииНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()
	
	УстановитьФункциональныеОпцииФормы();
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура СчетУчетаЗатратПриИзменении(Элемент)
	
	НастроитьСубконтоПриИзмененииСчета(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(
		Элемент.ТекстРедактирования,
		ЭтотОбъект,
		"Объект.Комментарий"
	);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗатратыСубконтоПриИзменении(Элемент)
	УстановитьПараметрыВыбораСубконто(ЭтотОбъект)
КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиСобытийТаблицыФормыОС

&НаКлиенте
Процедура ОсновныеСредстваОсновноеСредствоПриИзменении(Элемент)
	СтрокаТЧ = Элементы.ОС.ТекущиеДанные;
	ОсновноеСредство = СтрокаТЧ.ОсновноеСредство;
	
	//Заполнить инвентарный номер
	Если НЕ ЗначениеЗаполнено(ОсновноеСредство) Тогда
		СтрокаТЧ.ИнвентарныйНомер = "";
	Иначе
		СтруктураСведений 					= СведенияОбИнвентарномНомереОС(ОсновноеСредство, Объект.Организация, Объект.Дата);
		СтрокаТЧ.ИнвентарныйНомер 			= СтруктураСведений.ИнвентарныйНомер;
	КонецЕсли;
	
	//Заполнить налоговое назначение
	ДанныеСтрокиТаблицы	= ПолучитьДанныеСтрокиТаблицы(СтрокаТЧ);
	ДанныеОбъекта = ПолучитьДанныеОбъекта(ЭтаФорма);
	
	ЗаполнитьНалоговоеНазначениеОС(ДанныеСтрокиТаблицы,ДанныеОбъекта);
	
	ЗаполнитьЗначенияСвойств(СтрокаТЧ, ДанныеСтрокиТаблицы);
	
	ОбновитьИтоги(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ОСМетодКорректировкиНалоговогоКредитаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтрокаТабличнойЧасти = Элементы.ОС.ТекущиеДанные;
	
	Если СтрокаТабличнойЧасти.ВидКорректировкиНДС = ПредопределенноеЗначение("Перечисление.ВидыКорректировокНалоговогоКредита.ВосстановлениеПраваНаНалоговыйКредит") Тогда
		
		ДанныеВыбора = МетодыКорректировки_ВосстановлениеПраваНаНК;
		
	ИначеЕсли СтрокаТабличнойЧасти.ВидКорректировкиНДС = ПредопределенноеЗначение("Перечисление.ВидыКорректировокНалоговогоКредита.ПотеряПраваНаНалоговыйКредит") Тогда
		
		ДанныеВыбора = МетодыКорректировки_ПотеряПраваНаНК;
		
	Иначе
		
		ДанныеВыбора = Новый СписокЗначений;
		ДанныеВыбора.Добавить(ПредопределенноеЗначение("Перечисление.МетодыКорректировкиНалоговогоКредита.НеКорректировать"));
		
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ОСМетодКорректировкиНалоговогоКредитаПриИзменении(Элемент)
	ОбновитьИтоги(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ОСНалоговоеНазначениеПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.ОС.ТекущиеДанные;
	
	//определим Допустимые методы корректировок налогового кредита
	СтрокаТабличнойЧасти.ВидКорректировкиНДС = ОпределитьВидКорректировкиНК(Новый Структура("НалоговоеНазначение,НалоговоеНазначениеНовое",СтрокаТабличнойЧасти.НалоговоеНазначение,СтрокаТабличнойЧасти.НалоговоеНазначениеНовое));
	Если СтрокаТабличнойЧасти.ВидКорректировкиНДС = ПредопределенноеЗначение("Перечисление.ВидыКорректировокНалоговогоКредита.ВосстановлениеПраваНаНалоговыйКредит") Тогда
		ДопустимыеМетодыКорректировки = МетодыКорректировки_ВосстановлениеПраваНаНК;
	ИначеЕсли СтрокаТабличнойЧасти.ВидКорректировкиНДС = ПредопределенноеЗначение("Перечисление.ВидыКорректировокНалоговогоКредита.ПотеряПраваНаНалоговыйКредит") Тогда
		ДопустимыеМетодыКорректировки = МетодыКорректировки_ПотеряПраваНаНК;
	Иначе
		ДопустимыеМетодыКорректировки = Новый СписокЗначений();
	КонецЕсли;
	
	//Очистим метод корректировки в строке при необходимости
	Если ДопустимыеМетодыКорректировки.НайтиПоЗначению(СтрокаТабличнойЧасти.МетодКорректировкиНалоговогоКредита) = Неопределено Тогда
		Если ДопустимыеМетодыКорректировки.Количество() = 0 Тогда
			СтрокаТабличнойЧасти.МетодКорректировкиНалоговогоКредита = ПредопределенноеЗначение("Перечисление.МетодыКорректировкиНалоговогоКредита.НеКорректировать");		
		Иначе
			СтрокаТабличнойЧасти.МетодКорректировкиНалоговогоКредита = ДопустимыеМетодыКорректировки[0].Значение;
		КонецЕсли;
	КонецЕсли; 
	
	РассчитатьСуммуНДСВСтроке(СтрокаТабличнойЧасти);
	
	Если СтрокаТабличнойЧасти.СуммаНУ <> 0
		И СтрокаТабличнойЧасти.НалоговоеНазначение <> ПредопределенноеЗначение("Справочник.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяНеХозДеятельность")  Тогда
		СтрокаТабличнойЧасти.СуммаНУ = 0;
	КонецЕсли; 
	
	ОбновитьИтоги(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ОСНалоговоеНазначениеНовоеПриИзменении(Элемент)
	ОСНалоговоеНазначениеПриИзменении(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ОССуммаНДСПриИзменении(Элемент)
	ПересчитатьСуммыПоСтрокеОС()
КонецПроцедуры

&НаКлиенте
Процедура ОССтоимостьБУПриИзменении(Элемент)
	ПересчитатьСуммыПоСтрокеОС()
КонецПроцедуры

&НаКлиенте
Процедура ОССтавкаНДСПриИзменении(Элемент)
	РассчитатьСуммуНДСВСтроке();
	ОбновитьИтоги(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ОССтоимостьНУПриИзменении(Элемент)
	ПересчитатьСуммыПоСтрокеОС();
КонецПроцедуры

&НаКлиенте
Процедура ОСАмортизацияБУПриИзменении(Элемент)
	ПересчитатьСуммыПоСтрокеОС();
КонецПроцедуры

&НаКлиенте
Процедура ОСАмортизацияНУПриИзменении(Элемент)
	ПересчитатьСуммыПоСтрокеОС();
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьСуммыПоСтрокеОС()

	СтрокаТаблицы = Элементы.ОС.ТекущиеДанные;
	
	РассчитатьСуммуНДСВСтроке(СтрокаТаблицы);
	РассчитатьВычисляемыеПоляПоСтроке(СтрокаТаблицы);
	
	ОбновитьИтоги(ЭтаФорма);

КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПодборОС(Команда)
	
	ПараметрыФормы = Новый Структура;
	Если Объект.ОС.Количество() > 0 Тогда
		ПараметрыФормы.Вставить("АдресОСВХранилище", ПоместитьОСВХранилище());
	КонецЕсли;

	ОткрытьФорму("Обработка.ПодборОсновныхСредств.Форма.Форма", ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДляСпискаОС(Команда)

	Если Объект.Проведен Тогда
		ПоказатьПредупреждение( , НСтр("ru='Заполнение возможно только в непроведенном документе';uk='Заповнення можливе тільки в непроведеному документі'"), 60);
		Возврат;
	КонецЕсли;

	ОчиститьСообщения();

	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		ТекстСообщения = ОбщегоНазначенияБПКлиентСервер.ПолучитьТекстСообщения(, , НСтр("ru='Организация';uk='Організація'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Объект.Организация");
		Возврат;
	КонецЕсли;

	ТекстВопроса = НСтр("ru='При заполнении существующие данные будут пересчитаны!
|Продолжить?';uk='При заповненні існуючі дані будуть перераховані!
|Продовжити?'");
		
	Оповещение = Новый ОписаниеОповещения("ВопросЗаполнитьДляСпискаОСЗавершение", ЭтотОбъект);
	ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);

КонецПроцедуры

&НаКлиенте
Процедура ВопросЗаполнитьДляСпискаОСЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ЗаполнитьДляСпискаОССервер();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункцииБСП

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти 

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ПодготовитьФормуНаСервере()
	
	УстановитьФункциональныеОпцииФормы();
	
	ТекущаяДатаДокумента	= Объект.Дата;
	ВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	
	ЗаполнитьДобавленныеКолонкиТаблиц();
	
	ОбновитьИтоги(ЭтаФорма);
	
	УправлениеФормой(ЭтаФорма);
	
	УстановитьСостояниеДокумента();
	
КонецПроцедуры // ПодготовитьФормуНаСервере

&НаСервере
Процедура УстановитьФункциональныеОпцииФормы()
	
	ОбщегоНазначенияБПКлиентСервер.УстановитьПараметрыФункциональныхОпцийФормыДокумента(ЭтаФорма);
	
	ЕстьНалогНаПрибыль          = УчетнаяПолитика.ПлательщикНалогаНаПрибыль(Объект.Организация, Объект.Дата);
	ЕстьНалогНаПрибыльДо2015          = УчетнаяПолитика.ПлательщикНалогаНаПрибыльДо2015(Объект.Организация, Объект.Дата);
	
КонецПроцедуры // УстановитьФункциональныеОпцииФормы

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Элементы     = Форма.Элементы;
	ОбъектФормы  = Форма.Объект;
	
	НастроитьСубконтоПриПодготовкеФормыНаСервере(Форма);
	
	Элементы.НалоговоеНазначениеДоходовИЗатрат.Видимость = Форма.ЕстьНалогНаПрибыльДо2015;
	
КонецПроцедуры // УправлениеФормой

&НаСервере
Процедура ЗаполнитьДобавленныеКолонкиТаблиц() Экспорт
	
	ЗаполнитьИнвентарныеНомера();

	Для Каждого СтрокаТаблицы Из Объект.ОС Цикл
		РассчитатьВычисляемыеПоляПоСтроке(СтрокаТаблицы);
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьДобавленныеКолонкиТаблиц

&НаКлиентеНаСервереБезКонтекста
Процедура РассчитатьВычисляемыеПоляПоСтроке(СтрокаТаблицы)
	
	СтрокаТаблицы.ВидКорректировкиНДС  =  ОпределитьВидКорректировкиНК(СтрокаТаблицы);
	СтрокаТаблицы.ОстСтоимостьБУ = СтрокаТаблицы.СтоимостьБУ - СтрокаТаблицы.АмортизацияБУ;
	СтрокаТаблицы.ОстСтоимостьНУ = СтрокаТаблицы.СтоимостьНУ - СтрокаТаблицы.АмортизацияНУ;
	
КонецПроцедуры // ЗаполнитьДобавленныеКолонкиСтрокиТаблицыОС

// Процедура определяет возможный вид корректировки налогового кредита, по переданным данным
//
// Параметры
//  Данные  – Строка табличной части, структура, строка таблицы. Должна содержать реквизиты (колонки):
//  			НалоговоеНазначение, НалоговоеНазначениеНовое
//
// Возвращаемое значение:
//   ПеречислениеСсылка.ВидыКорректировокНалоговогоКредита  - вид корректировки. Если неопределен - пустая ссылка.
//
&НаКлиентеНаСервереБезКонтекста
Функция ОпределитьВидКорректировкиНК(Данные) Экспорт
	
	Если    НЕ ЗначениеЗаполнено(Данные.НалоговоеНазначение)
		ИЛИ НЕ ЗначениеЗаполнено(Данные.НалоговоеНазначениеНовое) Тогда 
		
		Возврат  ПредопределенноеЗначение("Перечисление.ВидыКорректировокНалоговогоКредита.ПустаяСсылка");
		
	КонецЕсли; 
	
	НалоговыйКредитВход  = Данные.НалоговоеНазначение = ПредопределенноеЗначение("Справочник.НалоговыеНазначенияАктивовИЗатрат.НДС_Пропорционально") ИЛИ УчетНДСВызовСервераПовтИсп.ЕстьПравоНаНалоговыйКредит(Данные.НалоговоеНазначение);
	НалоговыйКредитВыход = Данные.НалоговоеНазначениеНовое = ПредопределенноеЗначение("Справочник.НалоговыеНазначенияАктивовИЗатрат.НДС_Пропорционально") ИЛИ УчетНДСВызовСервераПовтИсп.ЕстьПравоНаНалоговыйКредит(Данные.НалоговоеНазначениеНовое);
	
	Если НалоговыйКредитВход = НалоговыйКредитВыход Тогда
		
		Возврат ПредопределенноеЗначение("Перечисление.ВидыКорректировокНалоговогоКредита.НетКорректировок");
		
	ИначеЕсли НалоговыйКредитВход И НЕ НалоговыйКредитВыход Тогда
		
		Возврат ПредопределенноеЗначение("Перечисление.ВидыКорректировокНалоговогоКредита.ПотеряПраваНаНалоговыйКредит");
		
	Иначе
		
		Возврат ПредопределенноеЗначение("Перечисление.ВидыКорректировокНалоговогоКредита.ВосстановлениеПраваНаНалоговыйКредит");
		
	КонецЕсли;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьИтоги(Форма)
	
	// При изменении данных обновим суммы в подвале.
	Форма.ВсегоМетодКорректировкиНДС1 = 0;
	Форма.ВсегоМетодКорректировкиНДС2 = 0;
	Для  каждого СтрокаТЧ Из Форма.Объект.ОС Цикл
		Если СтрокаТЧ.МетодКорректировкиНалоговогоКредита = ПредопределенноеЗначение("Перечисление.МетодыКорректировкиНалоговогоКредита.НаНалоговыеОбязательства") Тогда
			Форма.ВсегоМетодКорректировкиНДС1 = Форма.ВсегоМетодКорректировкиНДС1 + СтрокаТЧ.СуммаНДС;	
		ИначеЕсли СтрокаТЧ.МетодКорректировкиНалоговогоКредита = ПредопределенноеЗначение("Перечисление.МетодыКорректировкиНалоговогоКредита.НаНалоговыйКредит") Тогда
			Форма.ВсегоМетодКорректировкиНДС2 = Форма.ВсегоМетодКорректировкиНДС2 + СтрокаТЧ.СуммаНДС;	
		КонецЕсли; 
	КонецЦикла; 
	
КонецПроцедуры // ОбновитьИтоги

// Изменение счетов учета и их субконто

&НаКлиентеНаСервереБезКонтекста
Процедура НастроитьСубконтоПриПодготовкеФормыНаСервере(Форма)
	
	УстановитьЗаголовкиИДоступностьСубконто(Форма);
	УстановитьПараметрыВыбораСубконто(Форма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура НастроитьСубконтоПриИзмененииСчета(Форма)
	
	УстановитьЗаголовкиИДоступностьСубконто(Форма);
	УстановитьЗначенияСубконтоПриИзмененииСчета(Форма);
	УстановитьПараметрыВыбораСубконто(Форма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура НастроитьСубконтоПриИзмененииСубконто(Форма, ИмяСчета)
	
	УстановитьПараметрыВыбораСубконто(Форма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьЗаголовкиИДоступностьСубконто(Форма)
	
	ОбъектФормы = Форма.Объект;
	
	ПоляФормы = Новый Структура("Субконто1, Субконто2, Субконто3",
	"ЗатратыСубконто1",
	"ЗатратыСубконто2",
	"ЗатратыСубконто3");
	
	ЗаголовкиПолей = Новый Структура("Субконто1, Субконто2, Субконто3",
	"ЗаголовокСубконто1",
	"ЗаголовокСубконто2",
	"ЗаголовокСубконто3");
	
	БухгалтерскийУчетКлиентСервер.ПриВыбореСчета(ОбъектФормы.СчетУчетаЗатрат, Форма, ПоляФормы, ЗаголовкиПолей);
	
КонецПроцедуры // УстановитьЗаголовкиИДоступностьСубконто

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьПараметрыВыбораСубконто(Форма)
	
	ОбъектФормы = Форма.Объект;
	
	ПараметрыДокумента = ПолучитьСписокПараметров(Форма, "ЗатратыСубконто%Индекс%"); 
	БухгалтерскийУчетКлиентСервер.ИзменитьПараметрыВыбораПолейСубконто(
	Форма,
	ОбъектФормы,
	"ЗатратыСубконто%Индекс%",
	"ЗатратыСубконто%Индекс%",
	ПараметрыДокумента);
	
КонецПроцедуры // УстановитьПараметрыВыбораСубконто

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьЗначенияСубконтоПриИзмененииСчета(Форма)
	
	ОбъектФормы = Форма.Объект;
	
	ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3, Организация",
	"ЗатратыСубконто1",
	"ЗатратыСубконто2",
	"ЗатратыСубконто3",
	ОбъектФормы.Организация);
	
	БухгалтерскийУчетКлиентСервер.ПриИзмененииСчета(ОбъектФормы.СчетУчетаЗатрат, ОбъектФормы, ПоляОбъекта);
	
КонецПроцедуры // УстановитьЗначенияСубконтоПриИзмененииСчета

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьСписокПараметров(Форма, ШаблонИмяПоляОбъекта)
	
	ОбъектФормы = Форма.Объект;
	
	СписокПараметров = Новый Структура;
	СписокПараметров.Вставить("Организация", ОбъектФормы.Организация);
	
	Возврат СписокПараметров;
	
КонецФункции // ПолучитьСписокПараметров

&НаСервере
Процедура ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение, ИмяТаблицы)
	
	ДобавленныеСтроки = УчетОС.ОбработатьПодборОсновныхСредств(Объект.ОС, ВыбранноеЗначение);
	ЗаполнитьИнвентарныеНомераОС();
	
	ОбновитьИтоги(ЭтаФорма);
	
КонецПроцедуры // ОбработкаВыбораПодборНаСервере

&НаСервере
Процедура ЗаполнитьИнвентарныеНомера()

	ТаблицаОС = Объект.ОС.Выгрузить();

	ТаблицаНомеров = УчетОС.ПолучитьТаблицуИнвентарныхНомеровОС(ТаблицаОС,
		Объект.Организация, Объект.Дата);
	ТаблицаОС.ЗагрузитьКолонку(ТаблицаНомеров.ВыгрузитьКолонку("ИнвентарныйНомер"), "ИнвентарныйНомер");

	Объект.ОС.Загрузить(ТаблицаОС);

КонецПроцедуры

&НаСервереБезКонтекста
Функция СведенияОбИнвентарномНомереОС(ОсновноеСредство, Организация, Дата)

	Возврат УчетОС.СведенияОбИнвентарномНомереОС(ОсновноеСредство, Организация, Дата);

КонецФункции

&НаСервере
Функция ПоместитьОСВХранилище()

	ТаблицаОС = Объект.ОС.Выгрузить(, "НомерСтроки, ОсновноеСредство");
	Возврат ПоместитьВоВременноеХранилище(ТаблицаОС);

КонецФункции

&НаСервере
Процедура ЗаполнитьИнвентарныеНомераОС()

	ТаблицаОС = Объект.ОС.Выгрузить();

	ТаблицаНомеров = УчетОС.ПолучитьТаблицуИнвентарныхНомеровОС(ТаблицаОС,
		Объект.Организация, Объект.Дата);

	ТаблицаОС.ЗагрузитьКолонку(ТаблицаНомеров.ВыгрузитьКолонку("ИнвентарныйНомер"), "ИнвентарныйНомер");
	Объект.ОС.Загрузить(ТаблицаОС);

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДляСпискаОССервер()

	Если НЕ УчетнаяПолитика.Существует(Объект.Организация, Объект.Дата) Тогда
		ТекстСообщения = НСтр("ru='Не задана учетная политика организации %1 на %2.';uk='Не задана облікова політика організації %1 на %2.'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ТекстСообщения, Объект.Организация, Формат(Объект.Дата, "ДФ=dd.MM.yyyy"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;

	УправлениеНеоборотнымиАктивами.ЗаполнитьТабличнуюЧастьОсновныхСредств(Объект.Дата, Объект.ОС, Объект.Организация, ЕстьНалогНаПрибыль, Объект.Дата);
	
	Для каждого Строка Из Объект.ОС Цикл
		
		РассчитатьВычисляемыеПоляПоСтроке(Строка);

	КонецЦикла;

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьНалоговоеНазначениеОС(СтрокаТаблицы,ПараметрыОбъекта)
	
	СтрокаТаблицы.НалоговоеНазначение = Неопределено;
	
	Отбор 		= Новый Структура("Организация, ОсновноеСредство", ПараметрыОбъекта.Организация, СтрокаТаблицы.ОсновноеСредство);
	
	СведенияОНалоговомНазначение = РегистрыСведений.НалоговыеНазначенияОС.СрезПоследних(ПараметрыОбъекта.Дата, Отбор);
	Если СведенияОНалоговомНазначение.Количество() > 0 Тогда
		СтрокаТаблицы.НалоговоеНазначение = СведенияОНалоговомНазначение[0].НалоговоеНазначение;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьДанныеОбъекта(Форма)
	
	ДанныеОбъекта	= Новый Структура(
	"Дата, Организация,  
	|СчетУчетаЗатрат, 
	|ВалютаРегламентированногоУчета, ЕстьНалогНаПрибыль");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Форма.Объект);
	ДанныеОбъекта.ВалютаРегламентированногоУчета = Форма.ВалютаРегламентированногоУчета;
	ДанныеОбъекта.ЕстьНалогНаПрибыль             = Форма.ЕстьНалогНаПрибыль;
	
	Возврат ДанныеОбъекта;
	
КонецФункции // ПолучитьДанныеОбъекта()

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьДанныеСтрокиТаблицы(СтрокаТаблицы)
	
	ДанныеСтрокиТаблицы	= Новый Структура(
	"ОсновноеСредство,
	|НалоговоеНазначение, НалоговоеНазначениеНовое, МетодКорректировкиНалоговогоКредита, 
	|СтоимостьНУ,АмортизацияНУ,АмортизацияЗаМесяцНУ,СтоимостьБУ,АмортизацияБУ,АмортизацияЗаМесяцБУ,
	|СуммаНДС,СтавкаНДС,СуммаНУ,
	|ОстСтоимостьБУ,ОстСтоимостьНУ,ВидКорректировкиНДС");
	
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, СтрокаТаблицы);
	
	Возврат ДанныеСтрокиТаблицы;
	
КонецФункции // ПолучитьДанныеСтрокиТаблицы()

&НаКлиенте
Процедура РассчитатьСуммуНДСВСтроке(СтрокаТЧ = Неопределено)
	
	Если СтрокаТЧ = Неопределено Тогда
		СтрокаТЧ = Элементы.ОС.ТекущиеДанные;
	КонецЕсли; 

	СтрокаТЧ.СтавкаНДС = ?(СтрокаТЧ.СтавкаНДС = ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС7"),СтрокаТЧ.СтавкаНДС,ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС20"));
	
	Если ЕстьНалогНаПрибыль Тогда
		
		// от остаточной стоимости НУ
		Если УчетНДСВызовСервераПовтИсп.ЕстьПравоНаНалоговыйКредит(СтрокаТЧ.НалоговоеНазначение) Тогда
			//сумма не включет НДС                                               
			СтрокаТЧ.СуммаНДС = (СтрокаТЧ.СтоимостьНУ - СтрокаТЧ.АмортизацияНУ - СтрокаТЧ.АмортизацияЗаМесяцНУ)* УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаТЧ.СтавкаНДС) / 100;	
		Иначе
			//сумма включет НДС                                                   
			СтрокаТЧ.СуммаНДС = (СтрокаТЧ.СтоимостьНУ - СтрокаТЧ.АмортизацияНУ - СтрокаТЧ.АмортизацияЗаМесяцНУ) * УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаТЧ.СтавкаНДС) /(УчетНДС.ПолучитьСтавкуНДС(СтрокаТЧ.СтавкаНДС) + 100);		
		КонецЕсли;
		
	Иначе	
		
		// для ЕН - от остаточной стоимости БУ
		Если УчетНДСВызовСервераПовтИсп.ЕстьПравоНаНалоговыйКредит(СтрокаТЧ.НалоговоеНазначение) Тогда
			//сумма не включет НДС                                               
			СтрокаТЧ.СуммаНДС = (СтрокаТЧ.СтоимостьБУ - СтрокаТЧ.АмортизацияБУ - СтрокаТЧ.АмортизацияЗаМесяцБУ)* УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаТЧ.СтавкаНДС) / 100;	
		Иначе
			//сумма включет НДС                                                   
			СтрокаТЧ.СуммаНДС = (СтрокаТЧ.СтоимостьБУ - СтрокаТЧ.АмортизацияБУ - СтрокаТЧ.АмортизацияЗаМесяцБУ) * УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаТЧ.СтавкаНДС) /(УчетНДС.ПолучитьСтавкуНДС(СтрокаТЧ.СтавкаНДС) + 100);		
		КонецЕсли;
		
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСостояниеДокумента()
	
	СостояниеДокумента = ОбщегоНазначенияБП.СостояниеДокумента(Объект);
	
КонецПроцедуры  

#КонецОбласти
