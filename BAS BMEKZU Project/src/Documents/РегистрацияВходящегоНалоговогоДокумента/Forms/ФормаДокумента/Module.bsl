#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	
	Если Параметры.Ключ.Пустая() И ЗначениеЗаполнено(Параметры.Основание) И Не (ТипЗнч(Параметры.Основание) = Тип("Структура")) Тогда
	
		ТаблицаДоговоров   = Неопределено;
		Документы.РегистрацияВходящегоНалоговогоДокумента.ОпределитьДоговорСделку(Параметры.Основание, ТаблицаДоговоров);
		
		Если ТипЗнч(ТаблицаДоговоров) = Тип("ТаблицаЗначений") И ТаблицаДоговоров.Количество() > 1 Тогда
			ОткрытьФормуВыбораДоговораСделки = Истина;
			АдресХранилищаТаблицыДоговоровСделок = ПоместитьВоВременноеХранилище(ТаблицаДоговоров, УникальныйИдентификатор);
			
			ПараметрыФормыВыбораДоговораСделки = Новый Структура("АдресХранилищаТаблицыДоговоровСделок, Основание",
				АдресХранилищаТаблицыДоговоровСделок, Параметры.Основание);	
			
			Возврат;
		КонецЕсли;	
	КонецЕсли;  
	
	Если Параметры.Ключ.Пустая() Тогда
		ПодготовитьФормуНаСервере();
	КонецЕсли;
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	ПодготовитьФормуНаСервере();
	
	XML = ТекущийОбъект.ДанныеXML.Получить();// двоичные данные
	Если ЗначениеЗаполнено(XML) Тогда
		ИмяВременногоФайла = ПолучитьИмяВременногоФайла();
		XML.Записать(ИмяВременногоФайла);
		Текст = Новый ТекстовыйДокумент;
		Текст.Прочитать(ИмяВременногоФайла, "windows-1251");
		ДанныеXMLНаФорме = Текст.ПолучитьТекст();
	Иначе
		ДанныеXMLНаФорме = "";			
	КонецЕсли;
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если ОткрытьФормуВыбораДоговораСделки Тогда
		ПодключитьОбработчикОжидания("ОткрытьФормуВыбораДоговораСделки", 0.2, Истина);
	КонецЕсли;
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораДоговораСделки()
	
	Если ТипЗнч(ПараметрыФормыВыбораДоговораСделки) = Тип("Структура") Тогда
		ОткрытьФорму("Документ.РегистрацияВходящегоНалоговогоДокумента.Форма.ФормаВыбораДоговораСделки", ПараметрыФормыВыбораДоговораСделки);	
	КонецЕсли; 
	
	Закрыть();
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если ЗначениеЗаполнено(ДанныеXMLНаФорме) Тогда
		
		ИмяВременногоФайла = ПолучитьИмяВременногоФайла();
		Текст = Новый ТекстовыйДокумент;
		Текст.УстановитьТекст(ДанныеXMLНаФорме);
		Текст.Записать(ИмяВременногоФайла, "windows-1251");
		
		ТекущийОбъект.ДанныеXML = Новый ХранилищеЗначения(Новый ДвоичныеДанные(ИмяВременногоФайла), Новый СжатиеДанных(9));
		
	Иначе	
		
		ТекущийОбъект.ДанныеXML = Новый ХранилищеЗначения(Неопределено);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаЗаписиНового(НовыйОбъект, Источник, СтандартнаяОбработка)

	Если ТипЗнч(НовыйОбъект) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
		Объект.ДоговорКонтрагента = НовыйОбъект;
		ДоговорКонтрагентаПриИзмененииНаСервере();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ИсточникВыбора.ИмяФормы = "Обработка.ПодборНоменклатуры.Форма.Форма" Тогда
		ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение, ИсточникВыбора.ИмяТаблицы);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ОбновитьДокументИБПослеЗаполнения" И Параметр.Найти(Объект.Ссылка) <> Неопределено Тогда
		Прочитать();
	Иначе
		ОбщегоНазначенияБПКлиент.ОбработкаОповещенияФормыДокумента(ЭтаФорма, Объект.Ссылка, ИмяСобытия, Параметр, Источник);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
		
	УстановитьСостояниеДокумента();

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте            
Процедура ВидОперацииПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(Объект.ВидОперации) Тогда
		Возврат;
	КонецЕсли;
	
	ВидОперацииПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	Если НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДатаДокумента) Тогда
		// Изменение времени не влияет на поведение документа.
		ТекущаяДатаДокумента = Объект.Дата;
		Возврат;
	КонецЕсли;

	Если Год(Объект.Дата) <> Год(ТекущаяДатаДокумента) Тогда
		КоэффициентПропорциональногоНДС = Неопределено;
	КонецЕсли;
	
	// Общие проверки условий по датам.
	//ТребуетсяВызовСервера = ОбщегоНазначенияБПКлиент.ТребуетсяВызовСервераПриИзмененииДатыДокумента(Объект.Дата, 
	//	ТекущаяДатаДокумента, ВалютаРегламентированногоУчета, ВалютаРегламентированногоУчета);

   	// Если определили, что изменение даты может повлиять на какие-либо параметры, 
	// то передаем обработку на сервер.
	//Если ТребуетсяВызовСервера Тогда
		ДатаПриИзмененииНаСервере();
	//КонецЕсли;

	// Запомним новую дату документа.
	ТекущаяДатаДокумента = Объект.Дата;
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
		КонтрагентПриИзмененииНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		ОрганизацияПриИзмененииНаСервере();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДоговорКонтрагентаПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		ДоговорКонтрагентаПриИзмененииНаСервере(); 
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СделкаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыОбъекта = Новый Структура;
	ПараметрыОбъекта.Вставить("Дата",                  Объект.Дата);
	ПараметрыОбъекта.Вставить("ДоговорКонтрагента",    Объект.ДоговорКонтрагента);
	ПараметрыОбъекта.Вставить("Контрагент",            Объект.Контрагент);
	ПараметрыОбъекта.Вставить("Организация",           Объект.Организация);
	ПараметрыОбъекта.Вставить("ОстаткиОбороты",        "Дт");
	ПараметрыОбъекта.Вставить("ТипыДокументов",        "Метаданные.Документы.РегистрацияВходящегоНалоговогоДокумента.Реквизиты.Сделка.Тип");
	ПараметрыОбъекта.Вставить("СчетУчета", Неопределено);
	
	ПараметрыФормы = Новый Структура("ПараметрыОбъекта", ПараметрыОбъекта);
	ОткрытьФорму("Документ.ДокументРасчетовСКонтрагентом.ФормаВыбора", ПараметрыФормы, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура СделкаПриИзменении(Элемент)
	Объект.ДокументОснование = Неопределено;
КонецПроцедуры

&НаКлиенте
Процедура ДокументОснованиеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	
	Если НЕ ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		Сообщить(НСтр("ru='Не выбран договор контрагента!';uk='Не обраний договір контрагента!'"));
		Возврат;
	КонецЕсли;
	
	СтруктураОтбора = Новый Структура();
	СтруктураОтбора.Вставить("Организация", 		Объект.Организация);
	СтруктураОтбора.Вставить("Контрагент", 			Объект.Контрагент); 
	СтруктураОтбора.Вставить("ДоговорКонтрагента", 	Объект.ДоговорКонтрагента);
	
	Если ЗначениеЗаполнено(Объект.Сделка) Тогда
		СтруктураОтбора.Вставить("Сделка", 			   Объект.Сделка);
		СтруктураОтбора.Вставить("СделкаПоРеализации", Объект.Сделка);
	КонецЕсли;
	
	ДанныеОбъекта = Новый Структура("ВидОперации, Сделка, ДокументОснование");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
	СписокТипов = ПолучитьСписокТиповДляВыбораДокументаОснования(ДанныеОбъекта);
	
	ПоказатьВыборИзСписка(Новый ОписаниеОповещения("ДокументОснованиеНачалоВыбораЗавершение", ЭтотОбъект, Новый Структура("СтруктураОтбора, Элемент", СтруктураОтбора, Элемент)), СписокТипов, Элементы.ДокументОснование);  

КонецПроцедуры

&НаКлиенте
Процедура ДокументОснованиеНачалоВыбораЗавершение(ВыбранныйЭлемент1, ДополнительныеПараметры) Экспорт
    
    СтруктураОтбора = ДополнительныеПараметры.СтруктураОтбора;
    Элемент = ДополнительныеПараметры.Элемент;
    
    ВыбранныйЭлемент = ВыбранныйЭлемент1;
    
    Если ВыбранныйЭлемент = Неопределено Тогда // Отказ от выбора
        Возврат;
    ИначеЕсли  ВыбранныйЭлемент.Значение = Объект.Сделка Тогда
        Объект.ДокументОснование = Объект.Сделка;
        Возврат;
    КонецЕсли;
    
    ВыбранныйТип = ВыбранныйЭлемент.Значение;
    
    Если ТипЗнч(Объект.ДокументОснование) <> Тип("ДокументСсылка." + ВыбранныйТип) Тогда
        Объект.ДокументОснование = ПредопределенноеЗначение("Документ." +ВыбранныйТип+".ПустаяСсылка");
    КонецЕсли; 
	
	Если ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.ПоступлениеНаРасчетныйСчет") Или 
		 ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.СписаниеСРасчетногоСчета") Или
		 ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.ПриходныйКассовыйОрдер") Или
		 ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.РасходныйКассовыйОрдер") Тогда
		Если СтруктураОтбора.Свойство("ДоговорКонтрагента") Тогда
			СтруктураОтбора.Удалить("ДоговорКонтрагента");
		КонецЕсли;
	КонецЕсли; 
	
    ПараметрыОткрытия = Новый Структура();
    ПараметрыОткрытия.Вставить("Отбор", СтруктураОтбора);
    Если ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
        ПараметрыОткрытия.Вставить("ТекущаяСтрока", Объект.ДокументОснование);
    КонецЕсли;
    ФормаВыбора = ОткрытьФорму("Документ." +ВыбранныйТип+".ФормаВыбора", ПараметрыОткрытия, Элемент);

КонецПроцедуры

&НаКлиенте
Процедура ДокументОснованиеПриИзменении(Элемент)
	
	ДокументОснованиеПриИзмененииНаСервере();
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ДатаВходящегоДокументаПриИзменении(Элемент)
	УправлениеФормой(ЭтаФорма)
КонецПроцедуры

&НаКлиенте
Процедура ДатаВключенияВЕдиныйРеестрНалоговыхНакладныхПриИзменении(Элемент)
	УправлениеФормой(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура СчетУчетаВексельПриИзменении(Элемент)
	
	
	ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3",
		"ВексельСубконто1", "ВексельСубконто2", "ВексельСубконто3");
	ПоляОбъекта.Вставить("Организация",   Объект.Организация);
	БухгалтерскийУчетКлиентСервер.ПриИзмененииСчета(Объект.СчетУчетаВексель, Объект, ПоляОбъекта);
	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма);
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура СчетНДСПриИзменении(Элемент)
	
	
	ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3",
		"СубконтоДт1", "СубконтоДт2", "СубконтоДт3");
	ПоляОбъекта.Вставить("Организация",   Объект.Организация);
	БухгалтерскийУчетКлиентСервер.ПриИзмененииСчета(Объект.СчетНДС, Объект, ПоляОбъекта);
	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма);
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ВключаетсяВУточняющийРасчетПриИзменении(Элемент)
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ВключатьВПриложение8ДекларацииПриИзменении(Элемент)
	РасчитатьСуммыДляПриложения8();
	УправлениеФормой(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура СпецРежимНалогообложенияПриИзменении(Элемент)
	
	ЭлементСпискаЗначений = Элемент.СписокВыбора.НайтиПоЗначению(Объект.СпецРежимНалогообложения);
	РасшифровкаСпецРежимНалогообложения = ?(ЭлементСпискаЗначений = Неопределено, "", ЭлементСпискаЗначений.Представление);
	
КонецПроцедуры

&НаКлиенте
Процедура ВидДокументаПриИзменении(Элемент)
	
	ЭлементСпискаЗначений = Элемент.СписокВыбора.НайтиПоЗначению(Объект.ВидДокумента);
	РасшифровкаВидДокумента = ?(ЭлементСпискаЗначений = Неопределено, "", ЭлементСпискаЗначений.Представление);
	
КонецПроцедуры

&НаКлиенте
Процедура ИНАГРО_НаправлениеОперацииПриИзменении(Элемент) // ИНАГРО
	
	ЭлементСпискаЗначений 		  = Элементы.ИНАГРО_НаправлениеОперации.СписокВыбора.НайтиПоЗначению(Объект.ИНАГРО_НаправлениеОперации);
	РасшифровкаИНАГРО_НаправлениеОперации = ?(ЭлементСпискаЗначений = Неопределено, "", ЭлементСпискаЗначений.Представление); 

КонецПроцедуры   

#КонецОбласти

#Область ОбработчикиСобытийТабличнойЧастиТовары

&НаКлиенте
Процедура ТоварыНаименованиеТовараНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ФормаНоменклатуры = ПолучитьФорму("Справочник.Номенклатура.ФормаВыбора", ,Элемент);
	ФормаНоменклатуры.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНаименованиеТовараОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	СтрокаТабличнойЧасти.НаименованиеТовара = ВыбранноеЗначение;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКоличествоПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	
	ОбщегоНазначенияБПКлиент.ПересчитатьСумму(СтрокаТабличнойЧасти, Ложь);
	
	СтрокаТабличнойЧасти.СуммаНДС 			 = УчетНДСКлиентСервер.РассчитатьСуммуНДС(СтрокаТабличнойЧасти.Сумма, Ложь, УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));
	СтрокаТабличнойЧасти.СуммаВзаиморасчетов = СтрокаТабличнойЧасти.Сумма + СтрокаТабличнойЧасти.СуммаНДС;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЦенаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	
	ОбщегоНазначенияБПКлиент.ПересчитатьСумму(СтрокаТабличнойЧасти, Ложь);
	
	СтрокаТабличнойЧасти.СуммаНДС 			 = УчетНДСКлиентСервер.РассчитатьСуммуНДС(СтрокаТабличнойЧасти.Сумма, Ложь, УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));
	СтрокаТабличнойЧасти.СуммаВзаиморасчетов = СтрокаТабличнойЧасти.Сумма + СтрокаТабличнойЧасти.СуммаНДС;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСтавкаНДСПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	
	СтрокаТабличнойЧасти.СуммаНДС 	= УчетНДСКлиентСервер.РассчитатьСуммуНДС(СтрокаТабличнойЧасти.СуммаВзаиморасчетов, Истина, УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));
	СтрокаТабличнойЧасти.Сумма 		= СтрокаТабличнойЧасти.СуммаВзаиморасчетов - СтрокаТабличнойЧасти.СуммаНДС;
	                  
	СтрокаТабличнойЧасти.СтатьяДекларацииНДСНалоговыйКредит = ПолучитьСтатьюНалоговойДекларацииНаКлиенте(СтрокаТабличнойЧасти);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	
	СтрокаТабличнойЧасти.СуммаНДС 			 = УчетНДСКлиентСервер.РассчитатьСуммуНДС(СтрокаТабличнойЧасти.Сумма, Ложь, УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));
	СтрокаТабличнойЧасти.СуммаВзаиморасчетов = СтрокаТабличнойЧасти.Сумма + СтрокаТабличнойЧасти.СуммаНДС;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаНДСПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти					 = Элементы.Товары.ТекущиеДанные;
	СтрокаТабличнойЧасти.СуммаВзаиморасчетов = СтрокаТабличнойЧасти.Сумма + СтрокаТабличнойЧасти.СуммаНДС;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаВзаиморасчетовПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;

	СтрокаТабличнойЧасти.СуммаНДС 	= УчетНДСКлиентСервер.РассчитатьСуммуНДС(СтрокаТабличнойЧасти.СуммаВзаиморасчетов, Истина, УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));
	СтрокаТабличнойЧасти.Сумма  	= СтрокаТабличнойЧасти.СуммаВзаиморасчетов - СтрокаТабличнойЧасти.СуммаНДС;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыДляХозяйственнойДеятельностиПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	СтрокаТабличнойЧасти.СтатьяДекларацииНДСНалоговыйКредит = ПолучитьСтатьюНалоговойДекларацииНаКлиенте(СтрокаТабличнойЧасти);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыДляОперацийОблагаемыхНДСПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	СтрокаТабличнойЧасти.СтатьяДекларацииНДСНалоговыйКредит = ПолучитьСтатьюНалоговойДекларацииНаКлиенте(СтрокаТабличнойЧасти);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПропорциональныйНДСПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	СтрокаТабличнойЧасти.СтатьяДекларацииНДСНалоговыйКредит = ПолучитьСтатьюНалоговойДекларацииНаКлиенте(СтрокаТабличнойЧасти);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыАмортизируетсяПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	СтрокаТабличнойЧасти.СтатьяДекларацииНДСНалоговыйКредит = ПолучитьСтатьюНалоговойДекларацииНаКлиенте(СтрокаТабличнойЧасти);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	СтрокаТЧ = Элемент.ТекущиеДанные;
	Если НоваяСтрока И НЕ Копирование Тогда
		СтрокаТЧ.ДляХозяйственнойДеятельности = Истина;
		СтрокаТЧ.ДляОперацийОблагаемыхНДС     = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ОбновитьИтоги(ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте  
Процедура ДействиеПодбор(Команда)
	
	ПараметрыФормы = Новый Структура;

	ДатаРасчетов 	 = ?(НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДата()), Неопределено, Объект.Дата);
	ЗаголовокПодбора = НСтр("ru='Подбор номенклатуры в %1 (%2)';uk='Підбір номенклатури %1 (%2)'");

	Валюта = ВалютаРегламентированногоУчета;

	Параметрыформы.Вставить("ПоказыватьЦены", 	 Ложь);
	ПараметрыФормы.Вставить("ПоказыватьОстатки", Ложь);
	
	ПредставлениеТаблицы = НСтр("ru='Номенклатура поставки';uk='Номенклатура поставки'");

	ЗаголовокПодбора = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ЗаголовокПодбора, Объект.Ссылка, ПредставлениеТаблицы);

	ПараметрыФормы.Вставить("ЕстьЦена"          , Истина);
	ПараметрыФормы.Вставить("ЕстьКоличество"    , Истина);
	ПараметрыФормы.Вставить("ДатаРасчетов"      , Объект.Дата);
	ПараметрыФормы.Вставить("ТипЦен"            , Неопределено);
	ПараметрыФормы.Вставить("Валюта"            , ВалютаРегламентированногоУчета);
	ПараметрыФормы.Вставить("ДоговорКонтрагента", Неопределено);
	ПараметрыФормы.Вставить("Контрагент"        , Неопределено);
	ПараметрыФормы.Вставить("Организация"       , Объект.Организация);
	ПараметрыФормы.Вставить("Склад"             , Неопределено);
	ПараметрыФормы.Вставить("Заголовок"         , ЗаголовокПодбора);
	ПараметрыФормы.Вставить("ВидПодбора"        , "");
	ПараметрыФормы.Вставить("ИмяТаблицы"        , "Товары");
	ПараметрыФормы.Вставить("Услуги"            , Неопределено);
	
	
	ОткрытьФорму("Обработка.ПодборНоменклатуры.Форма.Форма", ПараметрыФормы,
			ЭтаФорма, УникальныйИдентификатор);
			
КонецПроцедуры

&НаКлиенте
Процедура XMLЗагрузитьИз1СЗвит(Команда)
	
	Перем Номер_1, Номер_2, Номер_3, КодОрганизации, ИННКонтрагента; 
	
	ИННКонтрагента = ИННКонтрагента(Объект.Контрагент);
	
	// будем искать в Звите входящую налоговую по указанным реквизитам
	Если    Не ЗначениеЗаполнено(Объект.ДатаВходящегоДокумента)
		ИЛИ Не ЗначениеЗаполнено(Объект.НомерВходящегоДокумента) 
		ИЛИ Не ЗначениеЗаполнено(Объект.Контрагент) 
		ИЛИ Не ЗначениеЗаполнено(ИННКонтрагента) 
		ИЛИ НЕ (    Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРегистрацияВходящегоНалоговогоДокумента.РасчетКорректировкиВозврат")
		        ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРегистрацияВходящегоНалоговогоДокумента.РасчетКорректировкиКорректировка")
				ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРегистрацияВходящегоНалоговогоДокумента.НалоговаяНакладная")) Тогда
	
		ПоказатьПредупреждение(, НСтр("ru='Для загрузки XML-образа входящего налогового документа из FREDO Звіт необходимо указать контрагента, дату, номер и вид операции (налоговая накладная или расчет корректировки).
|
|Для групповой загрузки XML-образов входящих документов из FREDO Звіт необходимо воспользоваться комадной ""Загрузить документы из FREDO Звіт"" в форме списка.';uk='Для завантаження XML-образу вхідного податкового документа з FREDO Звіт необхідно зазначити контрагента, дату, номер та вид операції (податкова накладна або розрахунок коригування).
|
|Для групового завантаження XML-образів вхідних документів із FREDO Звіт необхідно скористатися комадною ""Завантажити документи з FREDO Звіт"" у формі списку.'"));
	    Возврат;
		
	КонецЕсли;
	
	// получим необходимые реквизиты - номер накладной, код организации и контрагента
	ОшибкаРазбораНомера = ПолучитьКомпонентыНомераВходящейНакладной(Номер_1, Номер_2, Номер_3);
	Если ОшибкаРазбораНомера = Истина Тогда
		Возврат;
	КонецЕсли;
	
	СписокПоказателей = Новый СписокЗначений;
	СписокПоказателей.Добавить("","КодПоЕДРПОУ");
	КодОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(Объект.Организация, Объект.Дата, СписокПоказателей).КодПоЕДРПОУ;
	
	// Используем актуальный менеджер, учетем возможности поставки менеджера в виде внешней обработки
	// Выведем причины невозможности использования FREDO Звіт, в случае если менеджер не инициализирован
	Если Не РегламентированнаяОтчетностьКлиент.ПодключитьМенеджерЗвит1С() Тогда
		Возврат;
	КонецЕсли;
	
	Если Не глМенеджерЗвит1С.ЗапуститьЗвит1С(Неопределено, Объект.Организация) Тогда
		ПоказатьПредупреждение(, НСтр("ru='Не удалось запустить ""FREDO""';uk='Не вдалося запустити ""FREDO""'"));
		Возврат;
	КонецЕсли;
	
	Если    Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРегистрацияВходящегоНалоговогоДокумента.РасчетКорректировкиВозврат")
		ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРегистрацияВходящегоНалоговогоДокумента.РасчетКорректировкиКорректировка") Тогда
		Звит1С_docType = 2;
	Иначе
		Звит1С_docType = 1;
	КонецЕсли;	
	
	// очистим код документа Звита перед поиском (если не найдем в Звите XML образ никуда не денется)
	Объект.Звит1С_DOC_ID = "";
	Модифицированность = Истина;
	                                                                                 // входящие
	ТаблицаДокЗвит1С = глКомпонентаЗвит1С.GetPrimaryReestr( Звит1С_docType, 2, 			Объект.ДатаВходящегоДокумента, КонецДня(Объект.ДатаВходящегоДокумента) + 1);
	
	Если ТаблицаДокЗвит1С = Неопределено Тогда
		ПоказатьПредупреждение(, НСтр("ru='Документ с указанными параметрами не найден в FREDO Звіт';uk='Документ з зазначеними параметрами не знайдено у FREDO Звіт'"));
		Возврат;
	КонецЕсли;
	
	Если ТаблицаДокЗвит1С.First("MAIN") Тогда
		
		Если ПроверитьДанныеЗвит1С(ТаблицаДокЗвит1С, КодОрганизации, ИННКонтрагента, Номер_1, Номер_2, Номер_3) Тогда
			
			Объект.Звит1С_DOC_ID = ТаблицаДокЗвит1С.GetValue( "MAIN", "DOC_ID" );
			
		Иначе
			
			Пока ТаблицаДокЗвит1С.Next("MAIN") Цикл
				
				Если ПроверитьДанныеЗвит1С(ТаблицаДокЗвит1С, КодОрганизации, ИННКонтрагента, Номер_1, Номер_2, Номер_3) Тогда
					Объект.Звит1С_DOC_ID = ТаблицаДокЗвит1С.GetValue( "MAIN", "DOC_ID" );
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
			
	КонецЕсли; 

	УправлениеФормой(ЭтаФорма);
	
	Если Объект.Звит1С_DOC_ID = "" Тогда
		ПоказатьПредупреждение(, НСтр("ru='Документ с указанными параметрами не найден в FREDO Звіт';uk='Документ з зазначеними параметрами не знайдено у FREDO Звіт'"));
		Возврат;
	КонецЕсли;
	
	ДанныеXMLНаФорме = глКомпонентаЗвит1С.GetDocXml(Объект.Звит1С_DOC_ID);
	
	Объект.ЕстьXML   = Истина;
	Объект.ЭлектронныйДокумент = Истина;
	
	УправлениеФормой(ЭтаФорма);
	
	ПоказатьВопрос(Новый ОписаниеОповещения("XMLЗагрузитьИз1СЗвитЗавершение", ЭтотОбъект), НСтр("ru='Файл успешно загружен. Хотите открыть документ в FREDO Звіт?';uk='Файл успішно завантажений. Хочете відкрити документ в FREDO Звіт?'"), РежимДиалогаВопрос.ДаНетОтмена);
	
КонецПроцедуры

&НаКлиенте
Процедура XMLЗагрузитьИз1СЗвитЗавершение(Результат, ДопПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
	
		XMLОткрытьВЗвит1С(Неопределено);	
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура XMLЗагрузитьИзФайла(Команда)
	
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	
	Диалог.Фильтр = НСтр("ru='Документ XML (*.xml)|*.xml';uk='Документ XML (*.xml)|*.xml'");
	Диалог.МножественныйВыбор = Ложь;
	Диалог.ПроверятьСуществованиеФайла = Истина;
	
	Диалог.Показать(Новый ОписаниеОповещения("XMLЗагрузитьИзФайлаЗавершение", ЭтаФорма))
	
КонецПроцедуры

&НаКлиенте
Процедура XMLЗагрузитьИзФайлаЗавершение(Результат, ДопПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	XML = Новый ТекстовыйДокумент;
	XML.Прочитать(Результат[0], "windows-1251");
	
	ДанныеXMLНаФорме = XML.ПолучитьТекст();
	
	Объект.ЕстьXML = Истина;
	Объект.ЭлектронныйДокумент = Истина;
	Объект.Звит1С_DOC_ID = "";
	
	Модифицированность = Истина; 
	
	УправлениеФормой(ЭтаФорма);
	
	ПоказатьВопрос(Новый ОписаниеОповещения("XMLЗагрузитьИзФайлаЗавершениеРаспечатать", ЭтаФорма), НСтр("ru='Файл успешно загружен. Хотите просмотреть документ XML в печатном виде?';uk='Файл успішно завантажений. Хочете переглянути документ XML в друкованому вигляді?'"), РежимДиалогаВопрос.ДаНетОтмена)
	
КонецПроцедуры

&НаКлиенте
Процедура XMLЗагрузитьИзФайлаЗавершениеРаспечатать(Результат, ДопПараметры) Экспорт	
	
	Если  Результат = КодВозвратаДиалога.Да Тогда
		XMLРаспечатать(Неопределено);	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура XMLОткрытьВЗвит1С(Команда)
	
	Если ПустаяСтрока(Объект.Звит1С_DOC_ID) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не РегламентированнаяОтчетностьКлиент.ПодключитьМенеджерЗвит1С() Тогда
		Возврат;
	КонецЕсли;
	
	Если Не глМенеджерЗвит1С.ЗапуститьЗвит1С(Ложь, Объект.Организация) Тогда
		Возврат;
	КонецЕсли;
	
	Результат = глКомпонентаЗвит1С.ShowReport(Объект.Звит1С_DOC_ID);
	
	Если Результат = 0 Тогда
		глКомпонентаЗвит1С.Bring1CToFront();		
		Возврат;
	КонецЕсли;

	глКомпонентаЗвит1С.BringZvitToFront();
	
КонецПроцедуры

&НаКлиенте
Процедура XMLОчистить(Команда)
	
	ДанныеXMLНаФорме = "";
	Объект.ЕстьXML   = Ложь;
	Объект.ЭлектронныйДокумент = Ложь;
	Объект.Звит1С_DOC_ID = "";
	
	Модифицированность = Истина; 
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура XMLПросмотреть(Команда)
	
	Если НЕ Объект.ЕстьXML Тогда
	    ПоказатьПредупреждение(,НСтр("ru='XML не был загружен!';uk='XML не був завантажений!'"));
		Возврат;	
	КонецЕсли;
	
	// Проверим файл на корректность
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.ИгнорироватьПробелы = Истина;
	Попытка
		ЧтениеXML.УстановитьСтроку(ДанныеXMLНаФорме);
	Исключение
		ПоказатьПредупреждение(,НСтр("ru='Данный файл содерижит информацию в закодированном виде и не является стандартым текстовым XML-файлом.
|Необходимо воспользоваться специализированным программным обеспечением для его расшифровки.';uk='Зазначений файл містить інформацію в закодованому вигляді та не являє собою стандартний текстовий XML-файл.
|Необхідно скористатися спеціалізованим програмним забезбеченням для його розшифрування.'"));
							 
		Возврат;
	КонецПопытки;
	
	// перепрочтем файл, так как XML может быть записан без красивых отступов
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.Отступ = Истина;
	ЗаписьXML.УстановитьСтроку("windows-1251");
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	
	Пока ЧтениеXML.Прочитать() Цикл
		ЗаписьXML.ЗаписатьТекущий(ЧтениеXML);
	КонецЦикла;
	
	Текст = Новый ТекстовыйДокумент;
	Текст.УстановитьТекст(ЗаписьXML.Закрыть());
	
	Текст.Показать(НСтр("ru='Входящий документ в формате XML';uk='Вхідний документу форматі XML'"));
	
КонецПроцедуры

&НаКлиенте
Процедура XMLРаспечатать(Команда)
	
    Если НЕ Объект.ЕстьXML Тогда
	    ПоказатьПредупреждение(,НСтр("ru='XML не был загружен!';uk='XML не був завантажений!'"));
		Возврат;	
	КонецЕсли;
	
	// определим номер схемы документа
	C_DOC     = "";
	C_DOC_SUB = "";
	C_DOC_VER = "";
	
	ПолучитьВерсиюДокумента(ДанныеXMLНаФорме, C_DOC, C_DOC_SUB, C_DOC_VER);
	
	Если C_DOC = "" Тогда
	
		ПоказатьПредупреждение(,НСтр("ru='Сохраненный документ не соответствует формату XML!';uk='Збережений документ не відповідає формату XML!'"));
		Возврат;
	
	КонецЕсли;
	
	ВерсияДокумента = "" + C_DOC + C_DOC_SUB + C_DOC_VER;
	
	// найдем подходящую форму налоговой (регл. отчет)
	Если  (C_DOC     = "J12" ИЛИ C_DOC     = "F12")
		И (C_DOC_SUB = "010" ИЛИ C_DOC_SUB = "012") Тогда
		
		Если C_DOC_SUB = "010" Тогда
			ИмяОтчета = "РегламентированныйОтчетНалоговаяНакладная";
		ИначеЕсли C_DOC_SUB = "012" Тогда	
			ИмяОтчета = "РегламентированныйОтчетПриложение2КНалоговойНакладной";
		КонецЕсли;
		
	Иначе
		
		// не тот XML подсунули
		ПоказатьПредупреждение(,НСтр("ru='Загруженный файл не является XML образом Налоговой накладной или Приложения 2 к налоговой накладной!';uk='Завантажений файл не є XML образом Податкової накладної або Додатка 2 до податкової накладної!'"));
		Возврат;	
		
	КонецЕсли;
	
	ТекстОшибки = "";
	ИмяФормыПросмотра = ПолучитьИмяФормыДляПросмотраДокумента(ИмяОтчета, ВерсияДокумента, ТекстОшибки);
	
	Если ИмяФормыПросмотра = Неопределено Тогда
		ПоказатьПредупреждение(,ТекстОшибки);
		Возврат;
	КонецЕсли;
	
	// откроем отчет и загрузим в него данные XML
	Попытка
		ПараметрыФормы = Новый Структура();
		ПараметрыФормы.Вставить("мДатаКонцаПериодаОтчета",'00010101');
		ПараметрыФормы.Вставить("мДатаНачалаПериодаОтчета", '00010101');
		ПараметрыФормы.Вставить("Организация", Объект.Организация);
		
		ФормаПросмотра = ПолучитьФорму(ИмяФормыПросмотра, ПараметрыФормы);
	Исключение
		ТекстОшибки = НСтр("ru='Не удалось открыть для просмотра требуемую форму отчета ';uk='Не вдалося відкрити для перегляду необхідну форму звіту '")+ИмяОтчета+"""";
		ПоказатьПредупреждение(,ТекстОшибки);
		Возврат;	
	КонецПопытки;
	
	Попытка
		ТабличныйДокумент = ФормаПросмотра.ЗагрузитьТекстXMLНаФорму(ДанныеXMLНаФорме);
	Исключение
		ТекстОшибки = НСтр("ru='Не удалось открыть для просмотра требуемую форму отчета. Возможно не обновлены встроенные регламентированные отчеты';uk='Не вдалося відкрити для перегляду необхідну форму звіту. Можливе не оновлені вбудовані регламентовані звіти'")+ ": " + ИмяОтчета;
		ПоказатьПредупреждение(,ТекстОшибки);
		Возврат;	
	КонецПопытки;                            
	
	// откроем печатную форму на просмотр
	ТабличныйДокумент.Показать(НСтр("ru='ОЗНАКОМИТЕЛЬНАЯ печатная форма входящего документа';uk='ОЗНАЙОМЛЮЮЧА друкована форма вхідного документа'"));	
	
	ПоказатьПредупреждение(,НСтр("ru='Обращаем внимание, что печатная форма предназначается исключительно для ознакомления. Ее нельзя использовать в качестве бумажной налоговой накладной! 
|Печатная форма имеет отличия от официально утвержденной: например, отсутствуют квадратики в полях ИНН, формат представления дат предназначен для удобного просмотра, и т.д.';uk='Звертаємо увагу, що друкована форма призначається виключно для ознайомлення. Її не можна використовувати як паперову податкову накладну!
|Друкована форма має відмінності від офіційно затвердженої: наприклад, відсутні квадратики в полях ІПН, формат представлення дат призначений для зручного перегляду, і т.д.'"), 20, НСтр("ru='Важно: о печатной форме';uk='Важливо: про друкованій формі'"));
	

КонецПроцедуры

&НаКлиенте
Процедура XMLСохранить(Команда)
	
	Если НЕ Объект.ЕстьXML Тогда
	    ПоказатьПредупреждение(,НСтр("ru='XML не был загружен!';uk='XML не був завантажений!'"));
		Возврат;	
	КонецЕсли;
	
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
	Диалог.Фильтр = НСтр("ru='Документ XML (*.xml)|*.xml';uk='Документ XML (*.xml)|*.xml'");
	Диалог.Показать(Новый ОписаниеОповещения("XMLСохранитьЗаверешение", ЭтаФорма));
		
КонецПроцедуры

&НаКлиенте	
Процедура XMLСохранитьЗаверешение(Результат, ДопПараметры) Экспорт

	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	XML = Новый ТекстовыйДокумент;
	XML.УстановитьТекст(ДанныеXMLНаФорме);
	Попытка
		XML.Записать(Результат[0], "windows-1251");
	Исключение
		ПоказатьПредупреждение(,НСтр("ru='Не удалось записать файл:';uk='Не вдалося записати файл:'") + Символы.ПС + ОписаниеОшибки());		
	КонецПопытки
	
КонецПроцедуры

&НаКлиенте
Процедура ДействиеЗаполнитьИзXML(Команда)
	
    Если НЕ Объект.ЕстьXML Тогда
	    ПоказатьПредупреждение(,НСтр("ru='XML не был загружен!';uk='XML не був завантажений!'"));
		Возврат;	
	КонецЕсли;
	
	ЗаполнятьТабличнуюЧасть = Ложь;
	
	Если Объект.Товары.Количество() > 0 Тогда
	
		ТекстВопроса = НСтр("ru='Очистить табличную часть перед заполнением?';uk='Очистити табличну частину перед заповненням?'");
		ПоказатьВопрос(Новый ОписаниеОповещения("ДействиеЗаполнитьИзXMLПродолжение", ЭтаФорма),ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
		
	Иначе	
		
		ДействиеЗаполнитьИзXMLПродолжение(КодВозвратаДиалога.Нет, Неопределено); 
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура  ДействиеЗаполнитьИзXMLПродолжение(Результат, ДопПараметры) Экспорт

	Если Результат = КодВозвратаДиалога.Да Тогда
		
		Объект.Товары.Очистить();
		СуммаВозвратнойТары = 0;
		
	КонецЕсли;
	
	// Проверим файл на корректность
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.ИгнорироватьПробелы = Истина;
	Попытка
		ЧтениеXML.УстановитьСтроку(ДанныеXMLНаФорме);
	Исключение
		
		ПоказатьПредупреждение(,НСтр("ru='Данный файл содерижит информацию в закодированном виде и не является стандартым текстовым XML-файлом.
|Необходимо воспользоваться специализированным программным обеспечением для его расшифровки.';uk='Зазначений файл містить інформацію в закодованому вигляді та не являє собою стандартний текстовий XML-файл.
|Необхідно скористатися спеціалізованим програмним забезбеченням для його розшифрування.'"));
							 
		Возврат;
	КонецПопытки;
	
	РеквизитыXML = ПолучитьРеквизитыШапкиXMLДокумента();
	
	// определим номер схемы документа
	C_DOC     = ""; РеквизитыXML.Свойство("C_DOC",	   C_DOC);
	C_DOC_SUB = ""; РеквизитыXML.Свойство("C_DOC_SUB", C_DOC_SUB);
	C_DOC_VER = ""; РеквизитыXML.Свойство("C_DOC_VER", C_DOC_VER);

	// найдем подходящую форму налоговой (регл. отчет)
	Если  НЕ (C_DOC     = "J12" ИЛИ C_DOC     = "F12")
		И НЕ (C_DOC_SUB = "010" ИЛИ C_DOC_SUB = "012") Тогда
		
		// не тот XML подсунули
		ПоказатьПредупреждение(,НСтр("ru='Загруженный файл не является XML образом Налоговой накладной или Приложения 2 к налоговой накладной!';uk='Завантажений файл не є XML образом Податкової накладної або Додатка 2 до податкової накладної!'"));
		Возврат;	
		
	КонецЕсли;
	
	// заполним структуру показателй последней текущей версии
	// переопределим для старых версий
	
	Если C_DOC_SUB = "010" Тогда
		НовВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРегистрацияВходящегоНалоговогоДокумента.НалоговаяНакладная");	
	Иначе
		НовВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРегистрацияВходящегоНалоговогоДокумента.РасчетКорректировкиВозврат");	
	КонецЕсли;
	
	Если Объект.ВидОперации <> НовВидОперации Тогда
		
		Сообщить(НСтр("ru='При заполнении изменен вид операции докумнта!';uk='При заповненні змінений вид операції документа!'"), СтатусСообщения.Важное);
		
		Объект.ВидОперации = НовВидОперации;
		
		Объект.ВидДокумента = "-";
		Объект.ВключаетсяВУточняющийРасчет = Ложь;	
		УправлениеФормой(ЭтаФорма);
		
	КонецЕсли;
	
	// Организация
	ОрганизацияИНН = ""; РеквизитыXML.Свойство("HKBUY", ОрганизацияИНН);
	
	СписокПоказателей = Новый СписокЗначений; 
	СписокПоказателей.Добавить("","ИНН");
	Сведения = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(Объект.Организация, Объект.Дата, СписокПоказателей);
	
	Если НЕ Сведения.Свойство("ИНН") ИЛИ НЕ (ОрганизацияИНН = Сведения.ИНН) Тогда
		
		Если ЗначениеЗаполнено(Объект.Организация) Тогда
			Сообщить(НСтр("ru='ИНН Организации в документе не совпадает с ИНН Покупателя из файла!';uk='ІПН Організації в документі, не збігається з ІПН Покупця з файлу!'"), СтатусСообщения.Важное);	                                   
		КонецЕсли;
		
		ЗаполнитьОрганизациюПоИНННаСервере(ОрганизацияИНН);
		
	КонецЕсли;
	
	// контрагент
	КонтрагентИНН = ""; 		РеквизитыXML.Свойство("HKSEL", КонтрагентИНН);
	
	Если НЕ ИННКонтрагента(Объект.Контрагент) = КонтрагентИНН Тогда
		
		Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
			Сообщить(НСтр("ru='Данные контрагента (ИНН) не соответствуют данным из файла';uk='Дані контрагента (ІПН) не відповідають даним з файлу'"), СтатусСообщения.Важное);	
		КонецЕсли;
		
		ЗаполнитьКонтрагентаПоИНННаСервере(КонтрагентИНН);		
		
	КонецЕсли;

	// договор контрагента
	ДоговорКонтрагентаДата  = "";
	ДоговорКонтрагентаНомер = "";
	Если C_DOC_SUB = "010" Тогда
		РеквизитыXML.Свойство("H01G2D", ДоговорКонтрагентаДата);
		РеквизитыXML.Свойство("H01G3S", ДоговорКонтрагентаНомер);
	Иначе
		РеквизитыXML.Свойство("H01G1D", ДоговорКонтрагентаДата);
		РеквизитыXML.Свойство("H01G2S", ДоговорКонтрагентаНомер);
	КонецЕсли;
	Если ЗначениеЗаполнено(ДоговорКонтрагентаДата) Тогда
		ДоговорКонтрагентаДата = СокрЛП(ДоговорКонтрагентаДата);
		ДоговорКонтрагентаДата = Дата(Сред(ДоговорКонтрагентаДата, 5, 4), Сред(ДоговорКонтрагентаДата, 3, 2), Сред(ДоговорКонтрагентаДата, 1, 2));
	КонецЕсли;
	
	Если  ЗначениеЗаполнено(Объект.Контрагент)
		И ЗначениеЗаполнено(ДоговорКонтрагентаДата)
		И ЗначениеЗаполнено(ДоговорКонтрагентаНомер) Тогда
		
		ЗаполнитьДоговорНаСервере(ДоговорКонтрагентаДата, ДоговорКонтрагентаНомер);
		
	КонецЕсли;
	
	//номер вх. документа
	HNUM  = ""; РеквизитыXML.Свойство("HNUM",  HNUM);  HNUM  = СокрЛП(HNUM);
	HNUM1 = ""; РеквизитыXML.Свойство("HNUM1", HNUM1); HNUM1 = СокрЛП(HNUM1); HNUM1 = ?(HNUM1 = "0", "", HNUM1);
	HNUM2 = ""; РеквизитыXML.Свойство("HNUM2", HNUM2); HNUM2 = СокрЛП(HNUM2);
	НомерВходящегоДокумента = HNUM; 
	Если ЗначениеЗаполнено(HNUM1) Тогда
		НомерВходящегоДокумента = НомерВходящегоДокумента + "/" + HNUM1;
	КонецЕсли;
	Если ЗначениеЗаполнено(HNUM2) Тогда
		Если ЗначениеЗаполнено(HNUM1) Тогда
			Если C_DOC_VER > "04" Тогда
				// всего два слеша
				НомерВходящегоДокумента = НомерВходящегоДокумента + "/" + HNUM2;	
			Иначе	
			    // всего один слеш
				НомерВходящегоДокумента = НомерВходящегоДокумента + HNUM2;	
			КонецЕсли;
		Иначе
			Если C_DOC_VER > "04" Тогда
				// два слеша
				НомерВходящегоДокумента = НомерВходящегоДокумента + "//" + HNUM2;	
			Иначе	
			    // один слеш
				НомерВходящегоДокумента = НомерВходящегоДокумента + "/ " + HNUM2;	
			КонецЕсли;
		
		КонецЕсли;
	КонецЕсли;
	Объект.НомерВходящегоДокумента = НомерВходящегоДокумента;
	
	HFILL = ""; РеквизитыXML.Свойство("HFILL", HFILL);
	ДатаВходящегоДокумента = '00010101';
	Если ЗначениеЗаполнено(HFILL) Тогда
		HFILL = СокрЛП(HFILL);
		ДатаВходящегоДокумента = Дата(Сред(HFILL, 5, 4), Сред(HFILL, 3, 2), Сред(HFILL, 1, 2));
	КонецЕсли;
	Объект.ДатаВходящегоДокумента = ДатаВходящегоДокумента;
	
	// для П2 дата и номер корректируемой налоговой накладной
	Если C_DOC_SUB = "012" Тогда
		HNUM  = ""; РеквизитыXML.Свойство("HPODNUM",  HNUM);  HNUM  = СокрЛП(HNUM);
		HNUM1 = ""; РеквизитыXML.Свойство("HPODNUM1", HNUM1); HNUM1 = СокрЛП(HNUM1); HNUM1 = ?(HNUM1 = "0", "", HNUM1);
		HNUM2 = ""; РеквизитыXML.Свойство("HPODNUM2", HNUM2); HNUM2 = СокрЛП(HNUM2);
		НомерКорректируемогоВходящегоДокумента = HNUM; 
		Если ЗначениеЗаполнено(HNUM1) Тогда
			НомерКорректируемогоВходящегоДокумента = НомерКорректируемогоВходящегоДокумента + "/" + HNUM1;
		КонецЕсли;
		Если ЗначениеЗаполнено(HNUM2) Тогда
			Если ЗначениеЗаполнено(HNUM1) Тогда
				Если C_DOC_VER > "04" Тогда
					// всего два слеша
					НомерКорректируемогоВходящегоДокумента = НомерКорректируемогоВходящегоДокумента + "/" + HNUM2;	
				Иначе	
				    // всего один слеш
					НомерКорректируемогоВходящегоДокумента = НомерКорректируемогоВходящегоДокумента + HNUM2;	
				КонецЕсли;
			Иначе
				Если C_DOC_VER > "04" Тогда
					// два слеша
					НомерКорректируемогоВходящегоДокумента = НомерКорректируемогоВходящегоДокумента + "//" + HNUM2;	
				Иначе	
				    // один слеш
					НомерКорректируемогоВходящегоДокумента = НомерКорректируемогоВходящегоДокумента + "/ " + HNUM2;	
				КонецЕсли;
			
			КонецЕсли;
		КонецЕсли;

		HFILL = ""; РеквизитыXML.Свойство("HPODFILL", HFILL);
		ДатаКорректируемогоВходящегоДокумента = '00010101';
		Если ЗначениеЗаполнено(HFILL) Тогда
			HFILL = СокрЛП(HFILL);
			ДатаКорректируемогоВходящегоДокумента = Дата(Сред(HFILL, 5, 4), Сред(HFILL, 3, 2), Сред(HFILL, 1, 2));
		КонецЕсли;
		Объект.НомерКорректируемогоВходящегоДокумента = НомерКорректируемогоВходящегоДокумента;
		Объект.ДатаКорректируемогоВходящегоДокумента  = ДатаКорректируемогоВходящегоДокумента;	
		
	КонецЕсли;
	
	// суммы документа по ставкам
	БазаНДС20  = 0; СуммаНДС20 = 0;
    БазаНДС14   = 0; СуммаНДС14  = 0;
	БазаНДС7   = 0; СуммаНДС7  = 0;
	БазаНДС0   = 0;
	БазаБезНДС = 0;
	Тара = 0;
	
	// 20%
	Если C_DOC_SUB = "010" Тогда
		РеквизитыXML.Свойство("R01G7", БазаНДС20);
		РеквизитыXML.Свойство("R03G7", СуммаНДС20);
	Иначе
		РеквизитыXML.Свойство("R01G9", БазаНДС20);
		РеквизитыXML.Свойство("R02G9", СуммаНДС20);
	КонецЕсли;
    
    // 14%
    Если C_DOC_SUB = "010" Тогда
    	РеквизитыXML.Свойство("R01G14", БазаНДС14);
    	РеквизитыXML.Свойство("R03G14", СуммаНДС14);
    Иначе
    	РеквизитыXML.Свойство("R01G14", БазаНДС14);
    	РеквизитыXML.Свойство("R03G14", СуммаНДС14);
    КонецЕсли;
    
	// 7% и 0%
	Если HNUM1 = "7" Тогда
		
		Если C_DOC_SUB = "010" Тогда
			РеквизитыXML.Свойство("R01G8",  БазаНДС7);
			РеквизитыXML.Свойство("R03G8",  СуммаНДС7);
			
			// В сумме НДС по ставке 7 могут находиться ошибочно разделители триад
			СуммаНДС7 = СтрЗаменить(СуммаНДС7, " ", "");
			
		Иначе
			РеквизитыXML.Свойство("R01G10", БазаНДС7);
			РеквизитыXML.Свойство("R02G9",  СуммаНДС7);
		КонецЕсли;
		
	Иначе
		
		Если C_DOC_SUB = "010" Тогда
			РеквизитыXML.Свойство("R01G109",  БазаНДС7);
			РеквизитыXML.Свойство("R03G109",  СуммаНДС7);
			
			Если РеквизитыXML.Свойство("R01G8") Тогда
				БазаНДС0 = БазаНДС0 + РеквизитыXML.R01G8;
			КонецЕсли;
			Если РеквизитыXML.Свойство("R01G9") Тогда
				БазаНДС0 = БазаНДС0 + РеквизитыXML.R01G9;
		КонецЕсли;
		Иначе
			РеквизитыXML.Свойство("R01G111",  БазаНДС7);
			РеквизитыXML.Свойство("R02G111",  СуммаНДС7);
			
			РеквизитыXML.Свойство("R01G10",  БазаНДС0);
		КонецЕсли;
		
	КонецЕсли;
	
	// БезНДС
	Если C_DOC_SUB = "010" Тогда
		РеквизитыXML.Свойство("R01G10",  БазаБезНДС);
	Иначе
		РеквизитыXML.Свойство("R01G11", БазаБезНДС);
	КонецЕсли;
	        
	// Тара
	Если C_DOC_SUB = "010" Тогда
		РеквизитыXML.Свойство("R02G11",  Тара);
	КонецЕсли;
	
	// добавляем строки в ТЧ
	Если ЗначениеЗаполнено(БазаНДС20) И Число(БазаНДС20) <> 0 Тогда
		
		СтрокаДок = Объект.Товары.Добавить();
		
		СтрокаДок.СтавкаНДС = ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС20");
		СтрокаДок.Сумма     = БазаНДС20;
		СтрокаДок.СуммаНДС  = СуммаНДС20;
		СтрокаДок.СуммаВзаиморасчетов = СтрокаДок.Сумма + СтрокаДок.СуммаНДС;    
	
	КонецЕсли;
	
    Если ЗначениеЗаполнено(БазаНДС14) И Число(БазаНДС14) <> 0 Тогда
    	
		СтрокаДок = Объект.Товары.Добавить();
    	
    	СтрокаДок.СтавкаНДС = ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС14");
    	СтрокаДок.Сумма     = БазаНДС14;
    	СтрокаДок.СуммаНДС  = СуммаНДС14;
		СтрокаДок.СуммаВзаиморасчетов = СтрокаДок.Сумма + СтрокаДок.СуммаНДС;    
    	
    КонецЕсли;
    
	Если ЗначениеЗаполнено(БазаНДС7) И Число(БазаНДС7) <> 0 Тогда
		
		СтрокаДок = Объект.Товары.Добавить();
		
		СтрокаДок.СтавкаНДС = ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС7");
		СтрокаДок.Сумма     = БазаНДС7;
		СтрокаДок.СуммаНДС  = СуммаНДС7;
		СтрокаДок.СуммаВзаиморасчетов = СтрокаДок.Сумма + СтрокаДок.СуммаНДС;    
	
	КонецЕсли;
	
	Если ЗначениеЗаполнено(БазаНДС0) И Число(БазаНДС0) <> 0 Тогда
		
		СтрокаДок = Объект.Товары.Добавить();
		
		СтрокаДок.СтавкаНДС = ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС0");
		СтрокаДок.Сумма     = БазаНДС0;
		СтрокаДок.СуммаВзаиморасчетов = СтрокаДок.Сумма;    
	
	КонецЕсли;
	
	Если ЗначениеЗаполнено(БазаБезНДС) И Число(БазаБезНДС) <> 0 Тогда
		
		СтрокаДок = Объект.Товары.Добавить();
		
		СтрокаДок.СтавкаНДС = ПредопределенноеЗначение("Перечисление.СтавкиНДС.БезНДС");
		СтрокаДок.Сумма     = БазаБезНДС;
		СтрокаДок.СуммаВзаиморасчетов = СтрокаДок.Сумма;    
	
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Тара) И Число(Тара) <> 0 Тогда
		
		Объект.СуммаВозвратнойТары = Объект.СуммаВозвратнойТары + Число(Тара);
	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоДокументуОснованию(Команда)
	
	Если Объект.Проведен Тогда
	    ПоказатьПредупреждение(,НСтр("ru='Заполнение невозможно в проведенном документе! Перед заполнением отмените проведение документа.';uk='Заповнення неможливе у проведенному документі! Перед заповненням скасуйте проведення документа.'"));
		Возврат;
	КонецЕсли;	

	Если НЕ ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		ПоказатьПредупреждение(,НСтр("ru='Не выбран документ-основание!';uk='Не обраний документ-підстава!'"));
		Возврат;
	КонецЕсли;
	
	ЗаполнятьТабличнуюЧасть = Ложь;
	Если НЕ ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		ТекстПредупреждения = НСтр("ru='Не выбран договор. Заполнение невозможно.';uk='Не обраний договір. Заповнення неможливо.'");

	ИначеЕсли НЕ ЗначениеЗаполнено(Объект.Сделка)
		    И НЕ ВедениеВзаиморасчетовНУ  = ПредопределенноеЗначение("Перечисление.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом") Тогда
			
			ТекстПредупреждения = НСтр("ru='Не указан документ расчетов.
|Заполнение невозможно.';uk='Не зазначений документ розрахунків.
|Заповнення неможливо.'");
	Иначе
		ЗаполнятьТабличнуюЧасть = Истина;
	КонецЕсли;
	
	Если Не ЗаполнятьТабличнуюЧасть Тогда
		ПоказатьПредупреждение(,ТекстПредупреждения, , );
		Возврат;
	КонецЕсли;	
	
	Если Объект.Товары.Количество() > 0 Тогда
		
		ТекстВопроса = НСтр("ru='Очистить табличную часть перед заполнением?';uk='Очистити табличну частину перед заповненням?'");
		Оповещение = Новый ОписаниеОповещения("ЗаполнитьПоДокументуОснованиюПослеЗакрытияВопроса", ЭтотОбъект, Параметры);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		//Вызываем явно с параметром "Нет", очистка не нужна
		ЗаполнитьПоДокументуОснованиюПослеЗакрытияВопроса(КодВозвратаДиалога.Нет, Параметры)
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьСуммуЖалобы(Команда)
	РасчитатьСуммыДляПриложения8();
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоДоговору(Команда)
	
	ЗаполнятьТабличнуюЧасть = Ложь;
	Если Объект.Проведен Тогда
	    ТекстПредупреждения = НСтр("ru='Заполнение невозможно в проведенном документе! Перед заполнением отмените проведение документа.';uk='Заповнення неможливе у проведенному документі! Перед заповненням скасуйте проведення документа.'");
	ИначеЕсли НЕ ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		ТекстПредупреждения = НСтр("ru='Не выбран договор. Заполнение невозможно.';uk='Не обраний договір. Заповнення неможливо.'");
	ИначеЕсли НЕ ЗначениеЗаполнено(Объект.Сделка)
		    И НЕ ВедениеВзаиморасчетовНУ  = ПредопределенноеЗначение("Перечисление.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом") Тогда
			ТекстПредупреждения = НСтр("ru='Не указан документ расчетов.
|Заполнение невозможно.';uk='Не зазначений документ розрахунків.
|Заповнення неможливо.'");
	Иначе
		ЗаполнятьТабличнуюЧасть = Истина;
	КонецЕсли;
	
	Если    (    ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг")
			 ИЛИ ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.ВозвратТоваровПоставщику")) Тогда
			 
		ВидДоговораОснования = ПолучитьВидДоговораОснования();	 
			 
		Если ВидДоговораОснования = ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СКомитентом") Тогда
		
			ТекстПредупреждения = НСтр("ru='Для указанного документа основания данный вид заполнения не возможен!';uk='Для зазначеного документа підстави даний вид заповнення не можливий!'");
			ЗаполнятьТабличнуюЧасть = Ложь;
		
		КонецЕсли;	 
			 
	ИначеЕсли ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.ОтчетКомитентуОПродажах") Тогда
		
		ТекстПредупреждения = НСтр("ru='Для указанного документа основания данный вид заполнения не возможен!';uk='Для зазначеного документа підстави даний вид заповнення не можливий!'");
		ЗаполнятьТабличнуюЧасть = Ложь;

	КонецЕсли;		
	
	Если Не ЗаполнятьТабличнуюЧасть Тогда
		ПоказатьПредупреждение(,ТекстПредупреждения, , );
		Возврат;
	КонецЕсли;
	
	Если Объект.Товары.Количество() > 0 Тогда
		
		ТекстВопроса = НСтр("ru='Очистить табличную часть перед заполнением?';uk='Очистити табличну частину перед заповненням?'");
		Оповещение = Новый ОписаниеОповещения("ЗаполнитьПоДоговоруПослеЗакрытияВопроса", ЭтотОбъект, Параметры);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		//Вызываем явно с параметром "Нет", очистка не нужна
		ЗаполнитьПоДоговоруПослеЗакрытияВопроса(КодВозвратаДиалога.Нет, Параметры)
	КонецЕсли;

	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоДоговоруПослеЗакрытияВопроса(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Объект.Товары.Очистить();
		Объект.СуммаВозвратнойТары = 0;
	КонецЕсли; 
	
	ЗаполнитьПоОстаткамНаСервере();

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоДокументуОснованиюПослеЗакрытияВопроса(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Объект.Товары.Очистить();
		Объект.СуммаВозвратнойТары = 0;
	КонецЕсли; 

	Если    ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг")
		ИЛИ ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.ОтчетКомиссионераОПродажах") Тогда
	
		ВалютаДокументОснования = ПолучитьВалютуДокументаОснования();
	
	КонецЕсли;
	
	Если ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") И НЕ (ВалютаДокументОснования = ВалютаРегламентированногоУчета) Тогда
		
		ЗаполнитьПоРаботамОтНерезидентаНаСервере();
		
	ИначеЕсли ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.ОтчетКомиссионераОПродажах") И НЕ (ВалютаДокументОснования = ВалютаРегламентированногоУчета) Тогда
		
		ЗаполнитьПоУслугамКомиссииОтНерезидентаНаСервере();
		
	ИначеЕсли    (    ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг")
			 ИЛИ ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.ВозвратТоваровПоставщику")) Тогда
			 
		ВидДоговораОснования = ПолучитьВидДоговораОснования();	 
			 
		Если ВидДоговораОснования = ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СКомитентом") Тогда
		
			ЗаполнитьПоКомиссионнойТорговлеНалоговыйКодексНаСервере();
			
		// Если не договор комисии, то 
		Иначе
			
			ЗаполнитьПоДокументуОснованиюНаСервере();
		КонецЕсли;	 
			 
	ИначеЕсли ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.ОтчетКомитентуОПродажах") Тогда
		
		ЗаполнитьПоКомиссионнойТорговлеНалоговыйКодексНаСервере();
		
  	Иначе	
		
		ЗаполнитьПоДокументуОснованиюНаСервере();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоДокументуОснованиюСУчетомОстатков(Команда)
	
	Если Объект.Проведен Тогда
	    ПоказатьПредупреждение(,НСтр("ru='Заполнение невозможно в проведенном документе! Перед заполнением отмените проведение документа.';uk='Заповнення неможливе у проведенному документі! Перед заповненням скасуйте проведення документа.'"));
		Возврат;
	КонецЕсли;	
	
	Если НЕ ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		ПоказатьПредупреждение(,НСтр("ru='Не выбран документ-основание!';uk='Не обраний документ-підстава!'"));
		Возврат;
	КонецЕсли;
	
	ЗаполнятьТабличнуюЧасть = Ложь;
	Если НЕ ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		ТекстПредупреждения = НСтр("ru='Не выбран договор. Заполнение невозможно.';uk='Не обраний договір. Заповнення неможливо.'");

	ИначеЕсли НЕ ЗначениеЗаполнено(Объект.Сделка)
		    И НЕ ВедениеВзаиморасчетовНУ  = ПредопределенноеЗначение("Перечисление.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом") Тогда
			
			ТекстПредупреждения = НСтр("ru='Не указан документ расчетов.
|Заполнение невозможно.';uk='Не зазначений документ розрахунків.
|Заповнення неможливо.'");
	Иначе
		ЗаполнятьТабличнуюЧасть = Истина;
	КонецЕсли;
	
	Если    ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг")
		ИЛИ ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.ОтчетКомиссионераОПродажах") Тогда
	
		ВалютаДокументОснования = ПолучитьВалютуДокументаОснования();
	
	КонецЕсли;
	
	Если    ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") И НЕ (ВалютаДокументОснования = ВалютаРегламентированногоУчета)
	    ИЛИ ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.ОтчетКомиссионераОПродажах") И НЕ (ВалютаДокументОснования = ВалютаРегламентированногоУчета) Тогда
		
		ТекстПредупреждения = НСтр("ru='Для указанного документа основания данный вид заполнения не возможен!';uk='Для зазначеного документа підстави даний вид заповнення не можливий!'");
		ЗаполнятьТабличнуюЧасть = Ложь;

	КонецЕсли;	

	Если    (    ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг")
			 ИЛИ ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.ВозвратТоваровПоставщику")) Тогда
			 
		ВидДоговораОснования = ПолучитьВидДоговораОснования();	 
			 
		Если ВидДоговораОснования = ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СКомитентом") Тогда
		
			ТекстПредупреждения = НСтр("ru='Для указанного документа основания данный вид заполнения не возможен!';uk='Для зазначеного документа підстави даний вид заповнення не можливий!'");
			ЗаполнятьТабличнуюЧасть = Ложь;
		
		КонецЕсли;	 
			 
	ИначеЕсли ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.ОтчетКомитентуОПродажах") Тогда
		
		ТекстПредупреждения = НСтр("ru='Для указанного документа основания данный вид заполнения не возможен!';uk='Для зазначеного документа підстави даний вид заповнення не можливий!'");
		ЗаполнятьТабличнуюЧасть = Ложь;

	КонецЕсли;	
	
	Если Не ЗаполнятьТабличнуюЧасть Тогда
		ПоказатьПредупреждение(,ТекстПредупреждения, , );
		Возврат;
	КонецЕсли;
	
	Если Объект.Товары.Количество() > 0 Тогда
		
		ТекстВопроса = НСтр("ru='Очистить табличную часть перед заполнением?';uk='Очистити табличну частину перед заповненням?'");
		Оповещение = Новый ОписаниеОповещения("ЗаполнитьПоДокументуОснованиюПослеЗакрытияВопроса", ЭтотОбъект, Параметры);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе	
		//Вызываем явно с параметром "Нет", очистка не нужна
		ЗаполнитьПоДокументуОснованиюСУчетомОстатковПослеЗакрытияВопроса(КодВозвратаДиалога.Нет, Параметры)
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоДокументуОснованиюСУчетомОстатковПослеЗакрытияВопроса(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Объект.Товары.Очистить();
		Объект.СуммаВозвратнойТары = 0;
	КонецЕсли; 
		
	ЗаполнитьПоДокументуОснованиюСУчетомОстатковНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ВвестиПропорциональныйНДС(Команда)
	
	СтавкаНДС20 = УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС20"));
	СтавкаНДС14 = УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС14"));
	СтавкаНДС7  = УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС7"));
	
   	ВыборСтавкиНДС = Новый СписокЗначений;
	ВыборСтавкиНДС.Добавить(СтавкаНДС20);
	ВыборСтавкиНДС.Добавить(СтавкаНДС14);
	ВыборСтавкиНДС.Добавить(СтавкаНДС7);

	ВыборСтавкиНДС.ПоказатьВыборЭлемента(Новый ОписаниеОповещения("ВвестиПропорциональныйНДСЗавершениеВводаСтавкиНДС", ЭтотОбъект)
										 , НСтр("ru='Укажите ставку НДС';uk='Оберіть ставку ПДВ'"));
	
КонецПроцедуры

&НаКлиенте
Процедура РаспределитьПропорциональныйНДС(Команда)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	Если ТекущаяСтрока = Неопределено Тогда
		ПоказатьПредупреждение(,НСтр("ru='Не выбрана строка!';uk='Не обраний рядок!'"));
		Возврат;		
	КонецЕсли;
	
	Если ТекущаяСтрока.ПропорциональныйНДС Тогда
		ПоказатьПредупреждение(,НСтр("ru='Выделите строку, в которой не стоит флаг ""Пропорционально""!';uk='Виберіть рядок, в якому не встановлено прапорець ""Пропорційно""!'"));
		Возврат;		
	КонецЕсли;
	
	Если  НЕ ТекущаяСтрока.СтавкаНДС = ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС20")
		И НЕ ТекущаяСтрока.СтавкаНДС = ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС14")
		И НЕ ТекущаяСтрока.СтавкаНДС = ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС7") Тогда
		ПоказатьПредупреждение(,НСтр("ru='Выделите строку, в которой ставка НДС 20%, 14% или 7%!';uk='Виберіть рядок, в якому ставка ПДВ 20%, 14% або 7%!'"));
		Возврат;		
	КонецЕсли;
	
	РассчитатьПропорциональныйНДС(0);
	
	ТекКоэффициент = КоэффициентПропорциональногоНДС * 100;
	ПоказатьВводЧисла(Новый ОписаниеОповещения("РаспределитьПропорциональныйНДСЗавершение", ЭтотОбъект, Новый Структура("ТекущаяСтрока, ТекКоэффициент", ТекущаяСтрока, ТекКоэффициент)), ТекКоэффициент, НСтр("ru='Введите % пропорционального НДС';uk='Введіть % пропорційного ПДВ'"), 4,2);
	
КонецПроцедуры

&НаКлиенте
Процедура РаспределитьПропорциональныйНДСЗавершение(Число, ДополнительныеПараметры) Экспорт
	
	ТекущаяСтрока = ДополнительныеПараметры.ТекущаяСтрока;
	ТекКоэффициент = ?(Число = Неопределено, ДополнительныеПараметры.ТекКоэффициент, Число);
	
	Если НЕ (Число <> Неопределено) Тогда
		Возврат;	
	КонецЕсли;
	ТекКоэффициент = ТекКоэффициент/100;
	
	СтрокаКредит 		= ТекущаяСтрока;
	СтрокаОбязательства = Объект.Товары.Вставить(Объект.Товары.Индекс(ТекущаяСтрока) + 1);
	
	СтрокаОбязательства.СтавкаНДС 	= 	СтрокаКредит.СтавкаНДС;
	
	СтрокаОбязательства.Сумма 		= СтрокаКредит.Сумма;
	СтрокаКредит.Сумма 		 		= СтрокаКредит.Сумма * ТекКоэффициент;
	СтрокаОбязательства.Сумма 		= СтрокаОбязательства.Сумма - СтрокаКредит.Сумма;
	
	СтрокаОбязательства.СуммаНДС    = СтрокаКредит.СуммаНДС;
	СтрокаКредит.СуммаНДС 		 	= СтрокаКредит.СуммаНДС * ТекКоэффициент;
	СтрокаОбязательства.СуммаНДС 	= СтрокаОбязательства.СуммаНДС - СтрокаКредит.СуммаНДС;
	
	СтрокаКредит.СуммаВзаиморасчетов 		= СтрокаКредит.Сумма + СтрокаКредит.СуммаНДС;
	СтрокаОбязательства.СуммаВзаиморасчетов = СтрокаОбязательства.Сумма + СтрокаОбязательства.СуммаНДС;
	
	СтрокаКредит.ДляХозяйственнойДеятельности 		 = Истина;
	СтрокаОбязательства.ДляХозяйственнойДеятельности = Истина;
	
	СтрокаКредит.ПропорциональныйНДС 		 = Истина;
	СтрокаОбязательства.ПропорциональныйНДС  = Истина;
	
	СтрокаКредит.ДляХозяйственнойДеятельности 		 = Истина;
	СтрокаОбязательства.ДляХозяйственнойДеятельности = Истина;
	
	СтрокаКредит.ДляОперацийОблагаемыхНДС 		 = Истина;
	СтрокаОбязательства.ДляОперацийОблагаемыхНДС = Ложь;
	
	СтрокаКредит.СтатьяДекларацииНДСНалоговыйКредит			= ПолучитьСтатьюНалоговойДекларацииНаКлиенте(СтрокаКредит);
	СтрокаОбязательства.СтатьяДекларацииНДСНалоговыйКредит  = ПолучитьСтатьюНалоговойДекларацииНаКлиенте(СтрокаОбязательства);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ПодготовитьФормуНаСервере()
	
	УстановитьФункциональныеОпцииФормы();
	
	УстановитьСостояниеДокумента();
	
	// Заполнение реквизитов формы
	ТекущаяДатаДокумента           = Объект.Дата;
	ВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	ВалютаВзаиморасчетов 		   = Объект.ДоговорКонтрагента.ВалютаВзаиморасчетов;
	ВедениеВзаиморасчетовНУ	 	   = Объект.ДоговорКонтрагента.ВедениеВзаиморасчетовНУ;

	
	Если Элементы.СпецРежимНалогообложения.СписокВыбора.Количество() = 0 Тогда
		УчетНДС.ЗаполнитьСписокВыбораСпецРежимаНалогообложения(Элементы.СпецРежимНалогообложения.СписокВыбора);
	КонецЕсли;
	ЭлементСпискаЗначений 				= Элементы.СпецРежимНалогообложения.СписокВыбора.НайтиПоЗначению(Объект.СпецРежимНалогообложения);
	РасшифровкаСпецРежимНалогообложения = ?(ЭлементСпискаЗначений = Неопределено, "", ЭлементСпискаЗначений.Представление);
	
	// ИНАГРО++
	Если Элементы.ИНАГРО_НаправлениеОперации.СписокВыбора.Количество() = 0 Тогда 		
		 Элементы.ИНАГРО_НаправлениеОперации.СписокВыбора.Добавить(1, "01-Операції із зерновими та технічними культурами");
		 Элементы.ИНАГРО_НаправлениеОперации.СписокВыбора.Добавить(2, "02-Операції з продукцією тваринництва"); 
		 Элементы.ИНАГРО_НаправлениеОперации.СписокВыбора.Добавить(3, "03-операціями з сільськогосподарськими товарами/послугами (крім операцій із зерновими та технічними культурами та операцій з продукцією тваринництва"); 
	КонецЕсли;
	ЭлементСпискаЗначений 		  = Элементы.ИНАГРО_НаправлениеОперации.СписокВыбора.НайтиПоЗначению(Объект.ИНАГРО_НаправлениеОперации);
	РасшифровкаИНАГРО_НаправлениеОперации = ?(ЭлементСпискаЗначений = Неопределено, "", ЭлементСпискаЗначений.Представление); 
	// ИНАГРО--

	Если Элементы.ВидДокумента.СписокВыбора.Количество() = 0 Тогда
		// Список должен быть заполнен до НастроитьЭлементыФормы для корректного отображения СпецРежимНалогообложенияДекорация
	    ЗаполнитьСписокВыбораВидДокумента(Элементы.ВидДокумента.СписокВыбора, Объект.ВидОперации);
	КонецЕсли;
	ЭлементСпискаЗначений   = Элементы.ВидДокумента.СписокВыбора.НайтиПоЗначению(Объект.ВидДокумента);
	РасшифровкаВидДокумента = ?(ЭлементСпискаЗначений = Неопределено, "", ЭлементСпискаЗначений.Представление);
	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма);

	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокВыбораВидДокумента(СписокВыбора, ВидОперации)

	СписокВыбора.Очистить();
	Если ВидОперации = Перечисления.ВидыОперацийРегистрацияВходящегоНалоговогоДокумента.ИсправлениеОшибки Тогда
		СписокВыбора.Вставить(0, "МД", "(МД) Митна декларація");
		СписокВыбора.Вставить(0, "НП", "(НП) Придбання у неплатника");
		СписокВыбора.Вставить(0, "РК", "(РК) Розрахунок коригування");
		СписокВыбора.Вставить(0, "ПН", "(ПН) Податкова накладна");
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРегистрацияВходящегоНалоговогоДокумента.ВосстановлениеНалоговогоКредита Тогда
		СписокВыбора.Добавить("МД",  "(БОМД) Вантажна митна декларація");
		СписокВыбора.Добавить("ПН",  "(БОПН) Податкова накладна");
		СписокВыбора.Добавить("РК",  "(БОРК) Розрахунок коригування");
		СписокВыбора.Добавить("ЧК",  "(БОЧК) Касовий чек");
		СписокВыбора.Добавить("ТК",  "(БОТК) Транспортний квиток");
		СписокВыбора.Добавить("ГР",  "(БОГР) Готельний рахунок");
		СписокВыбора.Добавить("ПЗ",  "(БОПЗ) Рахунок за послуги зв'язку");
		СписокВыбора.Добавить("ПО",  "(БОПО) Послуги, вартість яких по даним приладів обліку");
		СписокВыбора.Добавить("-",   "(БО)   Бухгалтерська довідка (інше)");
	Иначе	
		СписокВыбора.Добавить("-",   "(-)  Інший документ");
		СписокВыбора.Добавить("БО",  "(БО) Документ бух. обліку");
		СписокВыбора.Добавить("ЧК",  "(ЧК) Касовий чек");
		СписокВыбора.Добавить("ТК",  "(ТК) Транспортний квиток");
		СписокВыбора.Добавить("ГР",  "(ГР) Готельний рахунок");
		СписокВыбора.Добавить("ПЗ",  "(ПЗ) Рахунок за послуги зв'язку");
		СписокВыбора.Добавить("ПО",  "(ПО) Послуги, вартість яких по даним приладів обліку");
		СписокВыбора.Добавить("ЗП",  "(ЗП) Заява платника");
	КонецЕсли;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ИзменитьПараметрыВыбораПолейСубконто(Форма)
	
	ПараметрыДокумента = СписокПараметровВыбораСубконто(Форма, Форма.Объект, "ВексельСубконто%Индекс%", "СчетУчетаВексель");
	БухгалтерскийУчетКлиентСервер.ИзменитьПараметрыВыбораПолейСубконто(
		Форма, Форма.Объект, "ВексельСубконто%Индекс%", "ВексельСубконто%Индекс%", ПараметрыДокумента);
		
	ПараметрыДокумента = СписокПараметровВыбораСубконто(Форма, Форма.Объект, "СубконтоДт%Индекс%", "СчетНДС");
	БухгалтерскийУчетКлиентСервер.ИзменитьПараметрыВыбораПолейСубконто(
		Форма, Форма.Объект, "СубконтоДт%Индекс%", "СубконтоДт%Индекс%", ПараметрыДокумента);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция СписокПараметровВыбораСубконто(Форма, ПараметрыОбъекта, ШаблонИмяПоляОбъекта, ИмяСчета)
	
	СписокПараметров = Новый Структура;
	Для Индекс = 1 По 3 Цикл
		ИмяПоля = СтрЗаменить(ШаблонИмяПоляОбъекта, "%Индекс%", Индекс);
		Если ТипЗнч(ПараметрыОбъекта[ИмяПоля]) = Тип("СправочникСсылка.Контрагенты") Тогда
			СписокПараметров.Вставить("Контрагент", ПараметрыОбъекта[ИмяПоля]);
		ИначеЕсли ТипЗнч(ПараметрыОбъекта[ИмяПоля]) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
			СписокПараметров.Вставить("ДоговорКонтрагента", ПараметрыОбъекта[ИмяПоля]);
		ИначеЕсли ТипЗнч(ПараметрыОбъекта[ИмяПоля]) = Тип("СправочникСсылка.Номенклатура") Тогда
			СписокПараметров.Вставить("Номенклатура", ПараметрыОбъекта[ИмяПоля]);
		ИначеЕсли ТипЗнч(ПараметрыОбъекта[ИмяПоля]) = Тип("СправочникСсылка.Склады") Тогда
			СписокПараметров.Вставить("Склад", ПараметрыОбъекта[ИмяПоля]);
		КонецЕсли;
	КонецЦикла;
	СписокПараметров.Вставить("Организация", Форма.Объект.Организация);
	СписокПараметров.Вставить("СчетУчета",   Форма.Объект[ИмяСчета]);
	
	Возврат СписокПараметров;
	
КонецФункции

&НаСервере
Процедура УстановитьФункциональныеОпцииФормы()

	ОбщегоНазначенияБПКлиентСервер.УстановитьПараметрыФункциональныхОпцийФормыДокумента(ЭтаФорма);

КонецПроцедуры 

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Элементы = Форма.Элементы;
	Объект   = Форма.Объект;
	
	УстановитьЗаголовкиИДоступностьСубконто(Форма, Объект.СчетНДС, "СубконтоДт");
	
	ДоступностьЗаполнения = Ложь;
	Если 	Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРегистрацияВходящегоНалоговогоДокумента.НалоговаяНакладная")
		ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРегистрацияВходящегоНалоговогоДокумента.ТоварныйЧек")
		ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРегистрацияВходящегоНалоговогоДокумента.РасчетКорректировкиВозврат")
		ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРегистрацияВходящегоНалоговогоДокумента.РасчетКорректировкиКорректировка")	Тогда
	
		ДоступностьЗаполнения = Истина;
		
	КонецЕсли;
	Форма.Элементы.Заполнить.Доступность = ДоступностьЗаполнения;

	ДоступностьВозвратнойТары =    (Форма.ВалютаВзаиморасчетов = Форма.ВалютаРегламентированногоУчета) 
							   И НЕ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРегистрацияВходящегоНалоговогоДокумента.РасчетКорректировкиВозврат")
							   И НЕ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРегистрацияВходящегоНалоговогоДокумента.РасчетКорректировкиКорректировка");
	Форма.Элементы.СуммаВозвратнойТары.Доступность = ДоступностьВозвратнойТары;
	
	ПоказыватьСчетКорректировкиНДС 	= Ложь;														
	ПоказыватьСчетУчетаНДС 			= Истина;														
	ПоказыватьСчетВекселя 			= Ложь;
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРегистрацияВходящегоНалоговогоДокумента.ПогашениеНалоговогоВекселя") Тогда
		
		УстановитьЗаголовкиИДоступностьСубконто(Форма, Объект.СчетУчетаВексель, "ВексельСубконто");
		ПоказыватьСчетВекселя 	 = Истина;
		ПоказыватьСчетУчетаНДС	 = Ложь;														
		
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРегистрацияВходящегоНалоговогоДокумента.ИсправлениеОшибки")
		  ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРегистрацияВходящегоНалоговогоДокумента.ВосстановлениеНалоговогоКредита") Тогда
		
		  ПоказыватьСчетКорректировкиНДС = Истина;
		  ПоказыватьСчетУчетаНДС 		 = Ложь;
		
	КонецЕсли;
	Если НЕ Форма.Элементы.СчетУчетаВексель.Видимость = ПоказыватьСчетВекселя Тогда
		
		Форма.Элементы.СчетУчетаВексель.Видимость 				    = ПоказыватьСчетВекселя;
		Форма.Элементы.ДекорацияЗаголовокСчетУчетаВексель.Видимость = ПоказыватьСчетВекселя;
		
		Форма.Элементы.ВексельСубконто1.Видимость = ПоказыватьСчетВекселя;
		Форма.Элементы.ВексельСубконто2.Видимость = ПоказыватьСчетВекселя;
		Форма.Элементы.ВексельСубконто3.Видимость = ПоказыватьСчетВекселя;
		Форма.Элементы.ЗаголовокВексельСубконто1.Видимость = ПоказыватьСчетВекселя;
		Форма.Элементы.ЗаголовокВексельСубконто2.Видимость = ПоказыватьСчетВекселя;
		Форма.Элементы.ЗаголовокВексельСубконто3.Видимость = ПоказыватьСчетВекселя;
	
	КонецЕсли;
	Форма.Элементы.СчетУчетаКорректировкиНДСКредит.Видимость 	    = ПоказыватьСчетКорректировкиНДС;
	Форма.Элементы.ДекорацияЗаголовокСчетКорректировкиНДС.Видимость = ПоказыватьСчетКорректировкиНДС;
	Форма.Элементы.СчетУчетаНДС.Видимость 	    			= ПоказыватьСчетУчетаНДС;
	Форма.Элементы.ДекорацияЗаголовокСчетУчетаНДС.Видимость = ПоказыватьСчетУчетаНДС;
	
	Форма.Элементы.Сделка.Доступность = (Форма.ВедениеВзаиморасчетовНУ = ПредопределенноеЗначение("Перечисление.ВедениеВзаиморасчетовПоДоговорам.ПоРасчетнымДокументам"));
	
	Корректировка = (Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРегистрацияВходящегоНалоговогоДокумента.РасчетКорректировкиВозврат") 
				 ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРегистрацияВходящегоНалоговогоДокумента.РасчетКорректировкиКорректировка"));
	Если НЕ Форма.Элементы.ГруппаРеквизитыДокументовРеквизитыКорректируемогоДокумента.Видимость = Корректировка Тогда
		Форма.Элементы.ГруппаРеквизитыДокументовРеквизитыКорректируемогоДокумента.Видимость = Корректировка;	
	КонецЕсли;			 
	
	ВидимостьВидаДокумента = Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРегистрацияВходящегоНалоговогоДокумента.ТоварныйЧек")
	 					 ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРегистрацияВходящегоНалоговогоДокумента.ИсправлениеОшибки")
						 ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРегистрацияВходящегоНалоговогоДокумента.ВосстановлениеНалоговогоКредита");
	Если НЕ Форма.Элементы.ГруппаВидДокумента.Видимость = ВидимостьВидаДокумента Тогда
		Форма.Элементы.ГруппаВидДокумента.Видимость = ВидимостьВидаДокумента;	
	КонецЕсли;			 
	
	ВключаетсяВУточняющийРасчет = Объект.ВключаетсяВУточняющийРасчет;
	ТипЖалобы				    = Объект.ВключатьВПриложение8Декларации;
	
	Если НЕ (Форма.Элементы.ГруппаЖалоба.Видимость = (НЕ ВключаетсяВУточняющийРасчет)) Тогда
		Форма.Элементы.ГруппаЖалоба.Видимость = НЕ ВключаетсяВУточняющийРасчет;	
	КонецЕсли;
	
	Если НЕ Форма.Элементы.УточняемыйПериод.Видимость = ВключаетсяВУточняющийРасчет Тогда
		Форма.Элементы.УточняемыйПериод.Видимость = ВключаетсяВУточняющийРасчет;	
	КонецЕсли;			 
	
	Если НЕ Форма.Элементы.ГруппаЖалобаСуммы.Видимость = (ТипЖалобы > 0) Тогда
		Форма.Элементы.ГруппаЖалобаСуммы.Видимость 	   = (ТипЖалобы > 0); 	
		Форма.Элементы.ГруппаЖалобаОписание.Видимость  = (ТипЖалобы > 0);
	КонецЕсли;
	
	Если НЕ Форма.Элементы.ГруппаПараметрыДокументаОтказа.Видимость = (ТипЖалобы = 1) Тогда
		Форма.Элементы.ГруппаПараметрыДокументаОтказа.Видимость = (ТипЖалобы = 1); 	
	КонецЕсли;
	
	ЗаголовокНадписиОписанияНарушения = "";
	Если ТипЖалобы = 1 Тогда
		ЗаголовокНадписиОписанияНарушения = НСтр("ru='Причина отказа продавца предоставить налоговую накладную:';uk='Причини відмови продавця надати податкову накладну:'");	
	ИначеЕсли ТипЖалобы = 2 Тогда
		ЗаголовокНадписиОписанияНарушения = НСтр("ru='Описание нарушения продавцом порядка заполнения и/или порядка регистрации в ЕРНН:';uk='Опис порушення продавцем порядку заповнення та/або порядку реєстрації в ЄРПН:'");	
	КонецЕсли;
	Форма.НадписьОписаниеНарушенияПриложение8Декларации = ЗаголовокНадписиОписанияНарушения;
	
	// заговок страницы Жалоба
	Форма.ЗаголовокСтраницыЖалоба = ?(ТипЖалобы > 0, "!", НСтр("ru='отсутствует';uk='відсутня'"));	
	
	ВидимостьНадписьОКредите2015 =   (НЕ Корректировка И Объект.ДатаВходящегоДокумента 			   >= '20150701' И Объект.Дата >= '20150701')
								 ИЛИ (   Корректировка И Объект.ДатаКорректируемогоВходящегоДокумента >= '20150701' И Объект.Дата >= '20150701'); 
	Форма.Элементы.НадписьОКредите2015.Видимость 					  = ВидимостьНадписьОКредите2015;
	Форма.Элементы.ДекорацияЗаголовокСчетНДСУсловнаяПродажа.Видимость = ВидимостьНадписьОКредите2015;
	Форма.Элементы.СчетНДСУсловнаяПродажа.Видимость 				  = ВидимостьНадписьОКредите2015;
	
	// дата получения в реестре может быть больше даты документа из-за того, что в ЕРНН НН была зарегистрирована позже. В случае же когда регистрация в ЕРНН была произведена до регистрации в системе - датой получения будет дата регистрации в системе.
	ТекДатаПолучения = ?(ЗначениеЗаполнено(Объект.ДатаВключенияВЕдиныйРеестрНалоговыхНакладных) И Объект.ДатаВключенияВЕдиныйРеестрНалоговыхНакладных > Объект.Дата, Объект.ДатаВключенияВЕдиныйРеестрНалоговыхНакладных, Объект.Дата);
	ТекДатаПолучения = Формат(ТекДатаПолучения, "ДФ=dd.MM.yyyy");
	ТекДатаКредита   = Формат(Объект.Дата, "ДФ=dd.MM.yyyy"); 
	
	Форма.Элементы.ИнформацияОДатах.Заголовок =  НСтр("ru='Дата начисления налогового кредита: ';uk='Дата нарахування податкового кредиту: '") + ТекДатаКредита;
	Если (Форма.Объект.Дата < '2014-03-01') Тогда
		Форма.Элементы.ИнформацияОДатах.Заголовок =  Форма.Элементы.ИнформацияОДатах.Заголовок
												   + Символы.ПС
												   + НСтр("ru='Дата получения, отображаемая в реестре: ';uk='Дата отримання, яка відображається в реєстрі: '") + ТекДатаПолучения;
	КонецЕсли;
	Форма.Элементы.ДатаПолучения.Видимость = (Форма.Объект.Дата >= '2014-03-01');
	
	ОбновитьИтоги(Форма);
	
	ЕстьXML = Форма.Объект.ЕстьXML;
	
	Элементы.XMLРаспечатать.Доступность = ЕстьXML;
	Элементы.XMLПросмотреть.Доступность = ЕстьXML;
	Элементы.XMLСохранить.Доступность   = ЕстьXML;
	Элементы.XMLОчистить.Доступность    = ЕстьXML;
	Элементы.XMLОткрытьВЗвит1С.Доступность    = НЕ ПустаяСтрока(Форма.Объект.Звит1С_DOC_ID);
	
	Элементы.ТоварыДействиеЗаполнитьИзXML.Доступность = ЕстьXML;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьИтоги(Форма)
	
	Форма.ИтогиВсегоБезНДС = Форма.Объект.Товары.Итог("Сумма");
	Форма.ИтогиВсегоНДС    = Форма.Объект.Товары.Итог("СуммаНДС");
	Форма.ИтогиВсегоСНДС   = Форма.Объект.Товары.Итог("СуммаВзаиморасчетов");
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьЗаголовкиИДоступностьСубконто(Форма, Счет, Префикс)
	
	ПоляФормы = Новый Структура("Субконто1, Субконто2, Субконто3",
		Префикс + "1",
		Префикс + "2",
		Префикс + "3");
	
	ЗаголовкиПолей = Новый Структура("Субконто1, Субконто2, Субконто3",
		"Заголовок" + Префикс + "1", "Заголовок" + Префикс + "2", "Заголовок" + Префикс + "3");
	
	БухгалтерскийУчетКлиентСервер.ПриВыбореСчета(Счет, Форма, ПоляФормы, ЗаголовкиПолей);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСостояниеДокумента()
	
	СостояниеДокумента = ОбщегоНазначенияБП.СостояниеДокумента(Объект);
	
КонецПроцедуры

&НаСервере
Процедура ВидОперацииПриИзмененииСервер()
	
	Объект.ВключаетсяВУточняющийРасчет = (Объект.ВидОперации = Перечисления.ВидыОперацийРегистрацияВходящегоНалоговогоДокумента.ИсправлениеОшибки);	
	
	// установим вид документа равным первому возможному значению
	ЗаполнитьСписокВыбораВидДокумента(Элементы.ВидДокумента.СписокВыбора, Объект.ВидОперации);
	НачальныйВидДокумента = Элементы.ВидДокумента.СписокВыбора[0];
	Объект.ВидДокумента 	= НачальныйВидДокумента.Значение;
	РасшифровкаВидДокумента = НачальныйВидДокумента.Представление;
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	Для каждого Строка Из ДокументОбъект.Товары Цикл
		Строка.СтатьяДекларацииНДСНалоговыйКредит = ПолучитьСтатьюНалоговойДекларацииНаСервере(Строка);
	КонецЦикла;	
	ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьСтатьюНалоговойДекларацииНаКлиенте(СтрокаТЧ)
	
	ДанныеСтрокиТЧ = Новый Структура("ДляХозяйственнойДеятельности, ДляОперацийОблагаемыхНДС, Амортизируется, ПропорциональныйНДС, СтавкаНДС");
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТЧ, СтрокаТЧ);

	Возврат ПолучитьСтатьюНалоговойДекларацииНаСервере(ДанныеСтрокиТЧ);
	
КонецФункции

&НаСервере
Функция ПолучитьСтатьюНалоговойДекларацииНаСервере(СтрокаТЧ)
	
	ВидОперации = Объект.ВидОперации;
	
	Отбор = Новый Структура("ВидОперации, ДляХозяйственнойДеятельности, ДляОперацийОблагаемыхНДС, Амортизируется, ПропорциональныйНДС, СтавкаНДС", ВидОперации);
	ЗаполнитьЗначенияСвойств(Отбор, СтрокаТЧ);
	
	Массив = КешЗначенийСтатейНалоговыхДекларацийПоУмолчанию.НайтиСтроки(Отбор);
	Если Массив.Количество() = 0 Тогда
		
		ЗначениеКеша = КешЗначенийСтатейНалоговыхДекларацийПоУмолчанию.Добавить();
		
		ЗаполнитьЗначенияСвойств(ЗначениеКеша, Отбор);
		ЗначениеКеша.СтатьяДекларацииНДСНалоговыйКредит = Документы.РегистрацияВходящегоНалоговогоДокумента.ОпределитьСтатьюНалоговойДекларации(ВидОперации, СтрокаТЧ);
		
		Массив.Добавить(ЗначениеКеша);
		
	КонецЕсли;
	
	Возврат Массив[0].СтатьяДекларацииНДСНалоговыйКредит;
	
КонецФункции

&НаСервере
Функция ПолучитьВалютуДокументаОснования()

	Возврат Объект.ДокументОснование.ВалютаДокумента;

КонецФункции 

&НаСервере
Функция ПолучитьВидДоговораОснования()

	Возврат Объект.ДокументОснование.ДоговорКонтрагента.ВидДоговора;

КонецФункции 

&НаСервере
Процедура ЗаполнитьПоОстаткамНаСервере();
	
	Документы.РегистрацияВходящегоНалоговогоДокумента.ЗаполнитьПоОстаткам(Объект);
		
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоДокументуОснованиюНаСервере();
	
	Документы.РегистрацияВходящегоНалоговогоДокумента.ЗаполнитьПоДокументуОснованию(Объект);
		
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоДокументуОснованиюСУчетомОстатковНаСервере();
	
	Документы.РегистрацияВходящегоНалоговогоДокумента.ЗаполнитьПоДокументуОснованиюСУчетомОстатков(Объект);
		
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоКомиссионнойТорговлеНалоговыйКодексНаСервере();
	
	Документы.РегистрацияВходящегоНалоговогоДокумента.ЗаполнитьПоКомиссионнойТорговлеНалоговыйКодекс(Объект);
		
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоУслугамКомиссииОтНерезидентаНаСервере();
	
	Документы.РегистрацияВходящегоНалоговогоДокумента.ЗаполнитьПоУслугамКомиссииОтНерезидента(Объект);
		
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоРаботамОтНерезидентаНаСервере();
	
	Документы.РегистрацияВходящегоНалоговогоДокумента.ЗаполнитьПоРаботамОтНерезидента(Объект);
		
КонецПроцедуры

&НаСервере
Процедура ДатаПриИзмененииНаСервере()
	
	ДатаОбработатьИзменение();
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ДатаОбработатьИзменение()
	
	УстановитьФункциональныеОпцииФормы();
	
	Если Объект.Проведен Тогда
		// дату вх. док. не меняем
		Сообщить(НСтр("ru='Проверьте дату входящего документа!';uk='Перевірте дату вхідного документа!'"));
	Иначе	
		Объект.ДатаВходящегоДокумента = Объект.Дата;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()
	
	ОрганизацияОбработатьИзменение();
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаСервере
Процедура ОрганизацияОбработатьИзменение()

	УстановитьФункциональныеОпцииФормы();

	Сделка 			  = Неопределено;
	ДокументОснование = Неопределено;
	КоэффициентПропорциональногоНДС = Неопределено;
	
	Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
		КонтрагентОбработатьИзменение();
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура КонтрагентПриИзмененииНаСервере()
	
	КонтрагентОбработатьИзменение();
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаСервере
Процедура КонтрагентОбработатьИзменение()

	БухгалтерскийУчетПереопределяемый.УстановитьДоговорКонтрагента(
		Объект.ДоговорКонтрагента, Объект.Контрагент, Объект.Организация, 
		Неопределено);

	Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		ДоговорКонтрагентаОбработатьИзменение();
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ДоговорКонтрагентаПриИзмененииНаСервере()

	ДоговорКонтрагентаОбработатьИзменение();
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ДоговорКонтрагентаОбработатьИзменение()
	
	ВалютаВзаиморасчетов 	= Объект.ДоговорКонтрагента.ВалютаВзаиморасчетов;
	ВедениеВзаиморасчетовНУ = Объект.ДоговорКонтрагента.ВедениеВзаиморасчетовНУ;
	
	//Очистим документ-основание при необходимости
	Если  Объект.ДокументОснование <> Неопределено Тогда
		Если ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.АвансовыйОтчет") Тогда
		
			Запрос = Новый Запрос();
			Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
			               |	АвансовыйОтчетВозвратнаяТара.ДоговорКонтрагента
			               |ИЗ
			               |	Документ.АвансовыйОтчет.ВозвратнаяТара КАК АвансовыйОтчетВозвратнаяТара
			               |ГДЕ
			               |	АвансовыйОтчетВозвратнаяТара.Ссылка = &Ссылка
						   | И  АвансовыйОтчетВозвратнаяТара.ДоговорКонтрагента = &ДоговорКонтрагента
						   |
			               |ОБЪЕДИНИТЬ 
			               |
			               |ВЫБРАТЬ ПЕРВЫЕ 1
			               |	АвансовыйОтчетОплатаПоставщикам.ДоговорКонтрагента
			               |ИЗ
			               |	Документ.АвансовыйОтчет.ОплатаПоставщикам КАК АвансовыйОтчетОплатаПоставщикам
			               |ГДЕ
			               |	АвансовыйОтчетОплатаПоставщикам.Ссылка = &Ссылка
						   | И  АвансовыйОтчетОплатаПоставщикам.ДоговорКонтрагента = &ДоговорКонтрагента
			               |
			               |ОБЪЕДИНИТЬ 
			               |
			               |ВЫБРАТЬ ПЕРВЫЕ 1
			               |	АвансовыйОтчетПрочее.ДоговорКонтрагента
			               |ИЗ
			               |	Документ.АвансовыйОтчет.Прочее КАК АвансовыйОтчетПрочее
			               |ГДЕ
			               |	АвансовыйОтчетПрочее.Ссылка = &Ссылка
						   | И  АвансовыйОтчетПрочее.ДоговорКонтрагента = &ДоговорКонтрагента
			               |
			               |ОБЪЕДИНИТЬ 
			               |
			               |ВЫБРАТЬ ПЕРВЫЕ 1
			               |	АвансовыйОтчетТовары.ДоговорКонтрагента
			               |ИЗ
			               |	Документ.АвансовыйОтчет.Товары КАК АвансовыйОтчетТовары
			               |ГДЕ
			               |	АвансовыйОтчетТовары.Ссылка = &Ссылка
						   | И  АвансовыйОтчетТовары.ДоговорКонтрагента = &ДоговорКонтрагента
						   |";
			Запрос.УстановитьПараметр("Ссылка", Объект.ДокументОснование);
			Запрос.УстановитьПараметр("ДоговорКонтрагента", Объект.ДоговорКонтрагента);
			Выборка = Запрос.Выполнить().Выбрать();
			
			Если НЕ Выборка.Следующий() Тогда
				// нет такого договора в документе
				Объект.ДокументОснование = Неопределено;
				
			КонецЕсли;
			
		ИначеЕсли ОбщегоНазначенияБП.ЕстьТабЧастьДокумента("РасшифровкаПлатежа", Объект.ДокументОснование.Метаданные() ) Тогда
			
			Запрос = Новый Запрос();
			Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
			                |	ПлатежныйДокумент.ДоговорКонтрагента
			                |ИЗ
			                |	Документ."+ Объект.ДокументОснование.Метаданные().Имя +".РасшифровкаПлатежа КАК ПлатежныйДокумент
			                |ГДЕ
			                |	ПлатежныйДокумент.Ссылка = &Ссылка
							| И ПлатежныйДокумент.ДоговорКонтрагента = &ДоговорКонтрагента
							|";
			Запрос.УстановитьПараметр("Ссылка", Объект.ДокументОснование);
			Запрос.УстановитьПараметр("ДоговорКонтрагента", Объект.ДоговорКонтрагента);
			
			Выборка = Запрос.Выполнить().Выбрать();
			
			Если НЕ Выборка.Следующий() Тогда
				// нет такого договора в документе
				Объект.ДокументОснование = Неопределено;
			КонецЕсли;
			
		ИначеЕсли ОбщегоНазначенияБП.ЕстьРеквизитДокумента("ДоговорКонтрагента", Объект.ДокументОснование.Метаданные())
			    И Объект.ДокументОснование.ДоговорКонтрагента <> Объект.ДоговорКонтрагента Тогда
			
			Объект.ДокументОснование = Неопределено;
			
		КонецЕсли;		
	КонецЕсли;
	
	Сделка = Неопределено;
	
	СчетаУчета   = БухгалтерскийУчетРасчетовСКонтрагентами.ПолучитьСчетаРасчетовСКонтрагентом(Объект.Организация, Объект.Контрагент, Объект.ДоговорКонтрагента);
	Объект.СчетУчетаНДС = СчетаУчета.СчетУчетаНДСПриобретений;
		
КонецПроцедуры

&НаСервере
Процедура ДокументОснованиеПриИзмененииНаСервере()
	
	ДокументОснованиеОбработатьИзменение();
	
КонецПроцедуры

&НаСервере
Процедура ДокументОснованиеОбработатьИзменение()
	
	Если  ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.ВозвратТоваровПоставщику") 
	  ИЛИ ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.ПриходныйКассовыйОрдер")
	  ИЛИ ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.ПоступлениеНаРасчетныйСчет") Тогда
		// возврат: установим соответствующий вид операции.
		Объект.ВидОперации = Перечисления.ВидыОперацийРегистрацияВходящегоНалоговогоДокумента.РасчетКорректировкиВозврат;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасчитатьСуммыДляПриложения8()
	
	СуммаПриложение8Декларации = 0;
	СуммаНДСПриложение8Декларации = 0;
	
	Для каждого СтрокаТЧ Из Объект.Товары Цикл
	
		Если  СтрокаТЧ.ДляХозяйственнойДеятельности
			И СтрокаТЧ.ДляОперацийОблагаемыхНДС Тогда
		
			СуммаПриложение8Декларации 		= СуммаПриложение8Декларации 	+ СтрокаТЧ.Сумма; 
			СуммаНДСПриложение8Декларации 	= СуммаНДСПриложение8Декларации + СтрокаТЧ.СуммаНДС;
		
		КонецЕсли;                           
	
	КонецЦикла;
	
	Объект.СуммаПриложение8Декларации    = СуммаПриложение8Декларации;
	Объект.СуммаНДСПриложение8Декларации = СуммаНДСПриложение8Декларации;
	
КонецПроцедуры

&НаКлиенте
Процедура ВвестиПропорциональныйНДСЗавершениеВводаСтавкиНДС(СтавкаНДС, ДополнительныеПараметры) Экспорт
	
	Если СтавкаНДС = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	БазаНДС   = 0;
	ПоказатьВводЧисла(Новый ОписаниеОповещения("ВвестиПропорциональныйНДСЗавершениеВводаБазаНДС", ЭтотОбъект, Новый Структура("СтавкаНДС, БазаНДС", СтавкаНДС.Значение, БазаНДС)), БазаНДС, НСтр("ru='Введите сумму без НДС';uk='Введіть суму без ПДВ'"), 15, 2);

КонецПроцедуры

&НаКлиенте
Процедура ВвестиПропорциональныйНДСЗавершениеВводаБазаНДС(Число, ДополнительныеПараметры) Экспорт
    
    СтавкаНДС = ДополнительныеПараметры.СтавкаНДС;
    БазаНДС = ?(Число = Неопределено, ДополнительныеПараметры.БазаНДС, Число);
    
    Если НЕ (Число <> Неопределено)
        ИЛИ БазаНДС = 0 Тогда
        Возврат;
    КонецЕсли;
    
    СуммаНДС = Окр(БазаНДС * СтавкаНДС / 100, 2);
	
	// сделаем паузу, чтобы ввод чисел не сливался
	А = 0;
	Для Инд = 1 По 20000 Цикл
	    А = А +1;
	КонецЦикла;
    
    ПоказатьВводЧисла(Новый ОписаниеОповещения("ВвестиПропорциональныйНДСЗавершениеВводаСуммаНДС", ЭтотОбъект, Новый Структура("БазаНДС, СуммаНДС, СтавкаНДС", БазаНДС, СуммаНДС, СтавкаНДС)), СуммаНДС, НСтр("ru='Введите сумму входящего НДС';uk='Введіть суму вхідного ПДВ'"), 15, 2);

КонецПроцедуры

&НаКлиенте
Процедура ВвестиПропорциональныйНДСЗавершениеВводаСуммаНДС(Число, ДополнительныеПараметры) Экспорт
    
    БазаНДС   = ДополнительныеПараметры.БазаНДС;
	СтавкаНДС = ДополнительныеПараметры.СтавкаНДС;
    СуммаНДС  = ?(Число = Неопределено, ДополнительныеПараметры.СуммаНДС, Число);
    
    Если НЕ (Число <> Неопределено) Тогда
        Возврат;
    КонецЕсли;
    
    ВвестиПропорциональныйНДСНаСервере(БазаНДС, СуммаНДС, СтавкаНДС); 
    СуммаНДСПропорциональныйКредит =  РассчитатьПропорциональныйНДС(СуммаНДС);

КонецПроцедуры

&НаСервере
Процедура ВвестиПропорциональныйНДСНаСервере(БазаНДС, СуммаНДС, СтавкаНДС) 
	
	СуммаНДСПропорциональныйКредит =  РассчитатьПропорциональныйНДС(СуммаНДС);
	
	СтрокаКредит 		= Объект.Товары.Добавить();
	СтрокаОбязательства = Объект.Товары.Добавить();
	
	Если СтавкаНДС = 7 Тогда
		СтрокаКредит.СтавкаНДС 			= ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС7");
		СтрокаОбязательства.СтавкаНДС 	= ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС7");
	ИначеЕсли СтавкаНДС = 14 Тогда
		СтрокаКредит.СтавкаНДС 			= ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС14");
		СтрокаОбязательства.СтавкаНДС 	= ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС14");
	Иначе	
		СтрокаКредит.СтавкаНДС 			= ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС20");
		СтрокаОбязательства.СтавкаНДС 	= ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС20");
	КонецЕсли;
	
	СтрокаКредит.Сумма 		 		= БазаНДС * (СуммаНДСПропорциональныйКредит/СуммаНДС);
	СтрокаОбязательства.Сумма 		= БазаНДС - СтрокаКредит.Сумма;
	
	СтрокаКредит.СуммаНДС 		 	= СуммаНДСПропорциональныйКредит;
	СтрокаОбязательства.СуммаНДС 	= СуммаНДС - СтрокаКредит.СуммаНДС;
	
	СтрокаКредит.СуммаВзаиморасчетов 		= СтрокаКредит.Сумма + СтрокаКредит.СуммаНДС;
	СтрокаОбязательства.СуммаВзаиморасчетов = СтрокаОбязательства.Сумма + СтрокаОбязательства.СуммаНДС;
	
	СтрокаКредит.ДляХозяйственнойДеятельности 		 = Истина;
	СтрокаОбязательства.ДляХозяйственнойДеятельности = Истина;
	
	СтрокаКредит.ПропорциональныйНДС 		 = Истина;
	СтрокаОбязательства.ПропорциональныйНДС  = Истина;
	
	СтрокаКредит.ДляХозяйственнойДеятельности 		 = Истина;
	СтрокаОбязательства.ДляХозяйственнойДеятельности = Истина;
	
	СтрокаКредит.ДляОперацийОблагаемыхНДС 		 = Истина;
	СтрокаОбязательства.ДляОперацийОблагаемыхНДС = Ложь;
	
	СтрокаКредит.СтатьяДекларацииНДСНалоговыйКредит			= ПолучитьСтатьюНалоговойДекларацииНаСервере(СтрокаКредит);
	СтрокаОбязательства.СтатьяДекларацииНДСНалоговыйКредит  = ПолучитьСтатьюНалоговойДекларацииНаСервере(СтрокаОбязательства);

	ОбновитьИтоги(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Функция РассчитатьПропорциональныйНДС(СуммаНДСВходящий)
	
	Если КоэффициентПропорциональногоНДС = Неопределено Тогда
		
		КоэффициентПропорциональногоНДС = НалоговыйУчет.ПолучитьКоэффициентПропорциональногоНДС(Объект.Организация, НачалоГода(Объект.Дата));
	
	КонецЕсли;
	
	Возврат Окр(СуммаНДСВходящий * КоэффициентПропорциональногоНДС, 2);
	
КонецФункции

&НаСервере
Процедура ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение, ИмяТаблицы)

	ТаблицаТоваров = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресПодобраннойНоменклатурыВХранилище);
	
	МетаданныеДокумента = Объект.Ссылка.Метаданные();

	ДанныеОбъекта = Новый Структура("Дата, ВидОперации, Организация, Склад");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
	СоответствиеСведенийОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОСпискеНоменклатуры(
		ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаТоваров, "Номенклатура", Истина), ДанныеОбъекта);
	
	Для Каждого СтрокаТовара Из ТаблицаТоваров Цикл
		
		Номенклатура = СтрокаТовара.Номенклатура;
		
		НоваяСтрока = Объект["Товары"].Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТовара);
		
		НоваяСтрока.НаименованиеТовара = Номенклатура;
		
		НоваяСтрока.Сумма	  = НоваяСтрока.Цена * НоваяСтрока.Количество;
		НоваяСтрока.СтавкаНДС = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Номенклатура, "СтавкаНДС");
		НоваяСтрока.СуммаНДС  = УчетНДСКлиентСервер.РассчитатьСуммуНДС(НоваяСтрока.Сумма, Ложь, УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(НоваяСтрока.СтавкаНДС));
		НоваяСтрока.СуммаВзаиморасчетов = НоваяСтрока.Сумма + НоваяСтрока.СуммаНДС;
		
		НоваяСтрока.ДляХозяйственнойДеятельности = Истина;
		НоваяСтрока.ДляОперацийОблагаемыхНДС     = Истина;
		
		СведенияОНоменклатуре = СоответствиеСведенийОНоменклатуре.Получить(СтрокаТовара.Номенклатура);
		Если СведенияОНоменклатуре = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Документы.РегистрацияВходящегоНалоговогоДокумента.ЗаполнитьСчетаУчетаВСтрокеТабЧасти(НоваяСтрока, СведенияОНоменклатуре);
		
		НоваяСтрока.СтатьяДекларацииНДСНалоговыйКредит = ПолучитьСтатьюНалоговойДекларацииНаСервере(НоваяСтрока);
		
	КонецЦикла;

 	ОбновитьИтоги(ЭтаФорма);

КонецПроцедуры

&НаСервере
Функция ПолучитьИмяФормыДляПросмотраДокумента(ИмяОтчета, ВерсияДокумента, ТекстОшибки)
	
	ТекОтчет = РегламентированнаяОтчетность.РеглОтчеты(ИмяОтчета);
	Если ТекОтчет = Неопределено Тогда
		ТекстОшибки = НСтр("ru='Не удалось открыть для просмотра отчет ';uk='Не вдалося відкрити для перегляду звіт '")+ИмяОтчета+"""";
		Возврат Неопределено;	
	КонецЕсли;
	
	Попытка
		МакетПоказателейЗвит1С = ТекОтчет.ПолучитьМакет("ПоказателиЗвит1С");
	Исключение
		ТекстОшибки = НСтр("ru='Не удалось определить для просмотра требуемую форму отчета ';uk='Не вдалося визначити для перегляду необхідну форму звіту  '")+ИмяОтчета+"""";
		Возврат Неопределено;	
	КонецПопытки;
	МакетПоказателейЗвит1С.КодЯзыкаМакета = "ru";
	
	ИмяФормыПросмотра = "";
	ОбластьСтруктура = МакетПоказателейЗвит1С.ПолучитьОбласть("Структура");
	Для сч = 1 По ОбластьСтруктура.ВысотаТаблицы Цикл
		
		ИмяСхемыЗвит1С = СокрЛП(ОбластьСтруктура.Область(сч, 1, сч, 1).Текст);
		
		Если ВерсияДокумента = ИмяСхемыЗвит1С Тогда
			ИмяФормыПросмотра = СокрЛП(ОбластьСтруктура.Область(сч, 3, сч, 3).Текст);
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	ИмяФормыПросмотра = ?(РегламентированнаяОтчетность.ЭтоВнешнийОтчет(ИмяОтчета), "ВнешнийОтчет.", "Отчет.") + ИмяОтчета  + ".Форма." + ИмяФормыПросмотра;
	
	Возврат ИмяФормыПросмотра;
	
КонецФункции

&НаСервере	
Процедура ПолучитьВерсиюДокумента(XML, C_DOC, C_DOC_SUB, C_DOC_VER)
	
	ЧтениеXML = Новый ЧтениеXML;
	Попытка
		ЧтениеXML.УстановитьСтроку(XML);
	Исключение
		Возврат;
	КонецПопытки;	
		
	ЧтениеXML.ИгнорироватьПробелы = Истина;
	Пока ЧтениеXML.Прочитать() Цикл
		
		Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			
			ТекУзел = ВРЕГ(ЧтениеXML.Имя);
			
			Если ТекУзел = "C_DOC" Тогда
				ЧтениеXML.Прочитать();
				C_DOC = ЧтениеXML.Значение;
				Продолжить;
			ИначеЕсли ТекУзел = "C_DOC_SUB" Тогда
				ЧтениеXML.Прочитать();
				C_DOC_SUB = ЧтениеXML.Значение;
				C_DOC_SUB = Формат(Число(C_DOC_SUB), "ЧЦ=3; ЧВН=");
				Продолжить;
			ИначеЕсли ТекУзел = "C_DOC_VER" Тогда                               
				ЧтениеXML.Прочитать();
				C_DOC_VER = ЧтениеXML.Значение;
				C_DOC_VER = Формат(Число(C_DOC_VER), "ЧЦ=2; ЧВН=");
				Прервать;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;		
	ЧтениеXML.Закрыть();
	
КонецПроцедуры

&НаСервере
Функция ИННКонтрагента(Контрагент)

	Возврат СокрЛП(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Контрагент, "ИНН"));	

КонецФункции // ()

&НаКлиенте
Функция ПолучитьКомпонентыНомераВходящейНакладной(НомерДокумента, СпецРежим, Филиал)
		
	ТекстОшибкиФормата = НСтр("ru='Номер входящего документа не соответсвует формату: Н, Н/С, Н/СФ или  Н/С/Ф, где Н - порядковый номер документа, С - спец.режим или пробел (один символ), Ф - номер филиала (от одного до четырех символов)';uk='Номер вхідного документа не відповідає формату: Н, Н/С або Н/СФ или  Н/С/Ф, де Н - порядковий номер документа, С - спец.режим або пробіл (один символ), Ф - номер філії (від одного до чотирьох символів)'");
							  
	ПозицияСпецСимвола = Найти(Объект.НомерВходящегоДокумента, "\");
	Если ПозицияСпецСимвола = 0 Тогда
		ПозицияСпецСимвола = Найти(Объект.НомерВходящегоДокумента, "/");
	КонецЕсли;
	
	Если ПозицияСпецСимвола > 0 Тогда
		НомерДокумента = СокрЛП(Лев(Объект.НомерВходящегоДокумента, ПозицияСпецСимвола-1));
		СпецРежимФилиал = СокрП(Сред(Объект.НомерВходящегоДокумента, ПозицияСпецСимвола + 1)); // Слева может быть пробел спец.режима
	Иначе
		НомерДокумента = СокрЛП(Объект.НомерВходящегоДокумента);
		СпецРежимФилиал = "";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(НомерДокумента) Тогда
		Попытка
			НомерДокумента = Число(НомерДокумента);
		Исключение
			Сообщить(ТекстОшибкиФормата);
			Возврат Истина;
		КонецПопытки;
		Если НомерДокумента = 0 Тогда
			Сообщить(ТекстОшибкиФормата);
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СпецРежимФилиал) Тогда					
		// формат номеров налоговых с 03.2014, с двумя слэшами
		Если Найти(СпецРежимФилиал, "/") > 0 Тогда
			
			СпецРежим = СокрЛП(Сред(СпецРежимФилиал, 1, Найти(СпецРежимФилиал, "/")-1));
			Филиал    = СокрЛП(Сред(СпецРежимФилиал,    Найти(СпецРежимФилиал, "/")+1));
			
		Иначе
			// Номер должен быть в формате ПорядковыйНомер[/СпецРежим[НомерФилиала]] где
			//  СпецРежим - число или пробел
			//  НомерФилиала - строка приводимая к числу c длиной не более 4-х символов
			Если СтрДлина(СпецРежимФилиал) > 5 Тогда
				Сообщить(ТекстОшибкиФормата);
				Возврат Истина;
			КонецЕсли;
			
			СпецРежим = СокрЛП(Лев(СпецРежимФилиал, 1)); // Если без спец.режима, то указан пробел, убираем				
			Если СпецРежим = "0" Тогда
				Сообщить(ТекстОшибкиФормата);
				Возврат Истина;
			КонецЕсли;
		
			Филиал = СокрЛП(Сред(СпецРежимФилиал, 2));
		
		КонецЕсли;
		
		Если Не ПустаяСтрока(СпецРежим) Тогда
			Попытка
				СпецРежим = Число(СпецРежим);
			Исключение
				Сообщить(ТекстОшибкиФормата);
				Возврат Истина;
			КонецПопытки;
		Иначе
			СпецРежим = 0;
		КонецЕсли;
		
		Если Не ПустаяСтрока(Филиал) Тогда
			Попытка
				Филиал = Число(Филиал);
			Исключение
				Сообщить(ТекстОшибкиФормата);
				Возврат Истина;
			КонецПопытки;
		Иначе
			Филиал = 0;
		КонецЕсли;
	Иначе
		
		СпецРежим = 0;
		Филиал 	  = 0;	
		
	КонецЕсли;	
	
	Возврат Ложь;
	
КонецФункции

&НаКлиенте
Функция ПроверитьДанныеЗвит1С(ТаблицаДокЗвит1С, КодОрганизации, ИННКонтрагента, Номер_1, Номер_2, Номер_3)
	
	НомерДокЗвит1С_1 = ТаблицаДокЗвит1С.GetValue( "MAIN", "DOC_NUM" );
	Если Не ЗначениеЗаполнено(НомерДокЗвит1С_1) Тогда
		НомерДокЗвит1С_1 = 0;
	Иначе	
		НомерДокЗвит1С_1 = Число(НомерДокЗвит1С_1);
	КонецЕсли;
	
	НомерДокЗвит1С_2 = ТаблицаДокЗвит1С.GetValue( "MAIN", "DOC_VD" );
	Если Не ЗначениеЗаполнено(НомерДокЗвит1С_2) Тогда
		НомерДокЗвит1С_2 = 0;
	Иначе
		НомерДокЗвит1С_2 = Число(НомерДокЗвит1С_2);
	КонецЕсли;
	
	НомерДокЗвит1С_3 = ТаблицаДокЗвит1С.GetValue( "MAIN", "DOC_DEPT" );
	Если Не ЗначениеЗаполнено(НомерДокЗвит1С_3) Тогда
		НомерДокЗвит1С_3 = 0;
	Иначе
		НомерДокЗвит1С_3 = Число(НомерДокЗвит1С_3);		
	КонецЕсли;
	
	ДатаДокЗвит1С  			= ТаблицаДокЗвит1С.GetValue( "MAIN", "DOC_DATE" );
	КодОрганизацииЗвит1С  	= ТаблицаДокЗвит1С.GetValue( "MAIN", "FIRM_EDRPOU" );

	Если 	СокрЛП(КодОрганизации) <> СокрЛП(КодОрганизацииЗвит1С) 
	 	ИЛИ Объект.ДатаВходящегоДокумента <> ДатаДокЗвит1С
	 	ИЛИ Номер_1 <> НомерДокЗвит1С_1
	 	ИЛИ Номер_2 <> НомерДокЗвит1С_2
	 	ИЛИ Номер_3 <> НомерДокЗвит1С_3 Тогда
	 
		Возврат Ложь
		
	КонецЕсли;
	
	ИННКонтрагентаЗвит1С  	= ТаблицаДокЗвит1С.GetValue( "MAIN", "FIRM_IPN" );
	Если 	СокрЛП(ИННКонтрагентаЗвит1С) <> СокрЛП(ИННКонтрагента)  Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;

КонецФункции

&НаСервере
Функция ПолучитьРеквизитыШапкиXMLДокумента()
	
	СтруктураПоказателейXML = Новый Структура();
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(ДанныеXMLНаФорме);
	
	Пока ЧтениеXML.Прочитать() Цикл
		
		Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			
			ТекУзел = ВРЕГ(ЧтениеXML.Имя);
			Если    ТекУзел = "DECLAR"
				ИЛИ ТекУзел = "DECLARHEAD"
				ИЛИ ТекУзел = "DECLARBODY"
				ИЛИ ТекУзел = "LINKED_DOCS" Тогда
				Продолжить;
			ИначеЕсли Найти(ТекУзел, "XXXX") > 0 Тогда
				Продолжить;
			Иначе
				Если ВРЕГ(ЧтениеXML.ЗначениеАтрибута("xsi:nil")) = "TRUE" Тогда
					Продолжить;
				КонецЕсли;
				ЧтениеXML.Прочитать();
				СтруктураПоказателейXML.Вставить(ТекУзел, ЧтениеXML.Значение);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;		
	ЧтениеXML.Закрыть();
	
	Возврат СтруктураПоказателейXML;

КонецФункции
	
&НаСервере	
Процедура ЗаполнитьОрганизациюПоИНННаСервере(ОрганизацияИНН)

	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
               |	Рег.Организация КАК Ссылка
               |ИЗ
               |	РегистрСведений.КодыОрганизации.СрезПоследних(&Дата) КАК Рег
               |ГДЕ
               |	Рег.ИНН 		  = &ОрганизацияИНН
               |
               |УПОРЯДОЧИТЬ ПО
               |	Рег.Организация.Код УБЫВ";
	
	Запрос.УстановитьПараметр("ОрганизацияИНН", 			ОрганизацияИНН);
	Запрос.УстановитьПараметр("Дата", Объект.Дата);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Объект.Организация = Выборка.Ссылка;
		Сообщить(НСтр("ru='Организация с указанными в файле ИНН найдена в информационной базе!';uk='Організація з вказаними у файлі ІПН знайдена в інформаційній базі!'"), СтатусСообщения.Важное);				
	ИначеЕсли ЗначениеЗаполнено(Объект.Организация) Тогда
		Объект.Организация = "";
		Сообщить(НСтр("ru='Организация очищена!';uk='Організація очищена!'"), СтатусСообщения.Важное);				
	КонецЕсли;
	
	Объект.ДоговорКонтрагента = "";
	Объект.Сделка = "";
	Объект.ДокументОснование = ""

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьКонтрагентаПоИНННаСервере(КонтрагентИНН)		
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
               |	Спр.Ссылка
               |ИЗ
               |	Справочник.Контрагенты КАК Спр
               |ГДЕ
               |	Спр.ИНН 		  = &КонтрагентИНН
			   //|	И Спр.КодПоЕДРПОУ = &КонтрагентКодПоЕДРПОУ
               |
               |УПОРЯДОЧИТЬ ПО
               |	Спр.Код УБЫВ";
	
	Запрос.УстановитьПараметр("КонтрагентИНН", 			КонтрагентИНН);
	//Запрос.УстановитьПараметр("КонтрагентКодПоЕДРПОУ", 	КонтрагентКодПоЕДРПОУ);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Объект.Контрагент = Выборка.Ссылка;
		Сообщить(НСтр("ru='Контрагент с указанными в файле ИНН найден в информационной базе!';uk='Контрагент із вказаними у файлі ІПН  знайдений в інформаційній базі!'"), СтатусСообщения.Важное);	
	ИначеЕсли ЗначениеЗаполнено(Объект.Контрагент) Тогда
		Объект.Контрагент = "";
		Сообщить(НСтр("ru='Контрагнет очищен!';uk='Контрагнет очищений!'"), СтатусСообщения.Важное);	
	КонецЕсли;
	
	Объект.ДоговорКонтрагента = "";
	Объект.Сделка 			   = "";
	Объект.ДокументОснование  = "";
	
КонецПроцедуры

&НаСервере	
Процедура ЗаполнитьДоговорНаСервере(ДоговорКонтрагентаДата, ДоговорКонтрагентаНомер)	
	
	Если  НЕ Объект.ДоговорКонтрагента.Дата  = ДоговорКонтрагентаДата
	  ИЛИ НЕ Объект.ДоговорКонтрагента.Номер = ДоговорКонтрагентаНомер Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
	               |	Спр.Ссылка
	               |ИЗ
	               |	Справочник.ДоговорыКонтрагентов КАК Спр
	               |ГДЕ
				   |	Спр.Владелец = &Контрагент
				   |	И Спр.Дата 	 = &ДоговорКонтрагентаДата
				   |	И Спр.Номер  = &ДоговорКонтрагентаНомер
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Спр.Код УБЫВ";
				   
		Запрос.УстановитьПараметр("Контрагент", 			 Объект.Контрагент);				   
		Запрос.УстановитьПараметр("ДоговорКонтрагентаДата",  ДоговорКонтрагентаДата);
		Запрос.УстановитьПараметр("ДоговорКонтрагентаНомер", ДоговорКонтрагентаНомер);
	
		Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
			Сообщить(НСтр("ru='Данные договора (номер, дата) не соответствуют данным из файла';uk='Дані договору (номер, дата) не відповідають даним з файлу'"), СтатусСообщения.Важное);	
		КонецЕсли;
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Объект.ДоговорКонтрагента = Выборка.Ссылка;
			Сообщить(НСтр("ru='Договор с указанными в файле номером и датой найден в информационной базе!';uk='Договір з вказаними у файлі номером і датою знайдений в інформаційній базі!'"), СтатусСообщения.Важное);	
		ИначеЕсли ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
			Объект.ДоговорКонтрагента = "";
			Сообщить(НСтр("ru='Договор очищен!';uk='Договір очищений!'"), СтатусСообщения.Важное);	
		КонецЕсли;
	
		Объект.Сделка 			   = "";
		Объект.ДокументОснование  = "";
	
	КонецЕсли;
	
КонецПроцедуры	

&НаСервереБезКонтекста
Функция ПолучитьСписокТиповДляВыбораДокументаОснования(Объект)
	
	СписокТипов = Новый СписокЗначений;
	
	МассивТиповДокументаОснования = Метаданные.Документы.РегистрацияВходящегоНалоговогоДокумента.Реквизиты["ДокументОснование"].Тип.Типы();
	
	ОграничениеТипов = Новый Массив();
	Для каждого ТипРеквизита Из МассивТиповДокументаОснования Цикл
		// документы больше не используется
		Если ТипРеквизита = Тип("ДокументСсылка.ПлатежныйОрдерПоступлениеДенежныхСредств") Или
			 ТипРеквизита = Тип("ДокументСсылка.ПлатежныйОрдерСписаниеДенежныхСредств") Тогда 	
			Продолжить;
		Иначе
			ОграничениеТипов.Добавить(ТипРеквизита);
		КонецЕсли;
		
	КонецЦикла; 
	
	Для каждого ЭлементМассива Из МассивТиповДокументаОснования Цикл
		
		Если ОграничениеТипов.Найти(ЭлементМассива) = Неопределено Тогда
			 // Тип не вписывается в полученные ограничения
			Продолжить;
		КонецЕсли; 
		
		ПустоеЗначение = Новый(ЭлементМассива);
		ОбъектОписанияМетаданных = ПустоеЗначение.Метаданные();
		
		СписокТипов.Добавить(ОбъектОписанияМетаданных.Имя, ОбъектОписанияМетаданных.Представление());
		
	КонецЦикла; 
	
	СписокТипов.СортироватьПоПредставлению();
	// добавим в список "первым номером" собственно сделку
	Если ЗначениеЗаполнено(Объект.Сделка) Тогда
		СписокТипов.Вставить(0,Объект.Сделка);	
	КонецЕсли;
	
	Возврат СписокТипов;	

КонецФункции

/////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ БСП

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти