#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
Перем мВалютаРегламентированногоУчета;


/////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА


// Процедура определяет параметры регл. учетной политики
//
Процедура ПодготовитьПараметрыУчетнойПолитикиРегл(СтруктураШапкиДокумента, Отказ, Заголовок)
	
	СтруктураШапкиДокумента.Вставить("ЕстьНДС"                        , УчетнаяПолитика.ПлательщикНДС(СтруктураШапкиДокумента.Организация, КонецМесяца(СтруктураШапкиДокумента.Дата)));
	
КонецПроцедуры // ПодготовитьПараметрыУчетнойПолитикиРегл()

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизтов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, МассивНепроверяемыхРеквизитов)
	
	Если  НЕ СтруктураШапкиДокумента.ЕстьНДС Тогда
		СтрокаСообщения = НСтр("ru='Фирма не является плательщиком НДС!';uk='Фірма не є платником ПДВ!'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения, ЭтотОбъект,"Организация",, Отказ);	
	КонецЕсли;
	
	Если ВидОперации = Перечисления.ВидыОперацийРегистрацияВходящегоНалоговогоДокумента.ПогашениеНалоговогоВекселя Тогда
		МассивНепроверяемыхРеквизитов.Добавить("СчетУчетаНДС");	
	Иначе
		МассивНепроверяемыхРеквизитов.Добавить("СчетУчетаВексель");		
	КонецЕсли;
	
	Если Дата < '2015-07-01' Тогда
		МассивНепроверяемыхРеквизитов.Добавить("СчетНДСУсловнаяПродажа");	
	КонецЕсли;
	
	Если НЕ	 ((ВидОперации = Перечисления.ВидыОперацийРегистрацияВходящегоНалоговогоДокумента.РасчетКорректировкиВозврат) 
		      ИЛИ (ВидОперации = Перечисления.ВидыОперацийРегистрацияВходящегоНалоговогоДокумента.РасчетКорректировкиКорректировка))	
		 ИЛИ (Дата < '2015-07-01')Тогда
		МассивНепроверяемыхРеквизитов.Добавить("ДатаКорректируемогоВходящегоДокумента");		 
	КонецЕсли;
	
	
	Если НЕ СтруктураШапкиДокумента.ВедениеВзаиморасчетовНУ = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоРасчетнымДокументам Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Сделка");	
	КонецЕсли;

	Если НЕ ВключаетсяВУточняющийРасчет Тогда
		МассивНепроверяемыхРеквизитов.Добавить("УточняемыйПериод");
	КонецЕсли;
	
	Если    ВидОперации = Перечисления.ВидыОперацийРегистрацияВходящегоНалоговогоДокумента.ИсправлениеОшибки 
		ИЛИ ВидОперации = Перечисления.ВидыОперацийРегистрацияВходящегоНалоговогоДокумента.ВосстановлениеНалоговогоКредита Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Сделка");
		МассивНепроверяемыхРеквизитов.Добавить("СчетУчетаНДС");
	Иначе	
		МассивНепроверяемыхРеквизитов.Добавить("СчетУчетаКорректировкиНДСКредит");
	КонецЕсли;

	Если ВидОперации = Перечисления.ВидыОперацийРегистрацияВходящегоНалоговогоДокумента.ВосстановлениеНалоговогоКредита 
		И НЕ (СуммаДокумента = 0 И СуммаНДСДокумента = 0) Тогда
	
		СтрокаСообщения = НСтр("ru='Для данного вида операции сумма документа и сумма НДС должна быть нулевой!';uk='Для даного виду операції сума документа та ПДВ повинна дорівнювати нулю!'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения, ЭтотОбъект,"ВидОперации",, Отказ);
		
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТоварам - результат запроса по табличной части "Товары",
//  СтруктураШапкиДокумента   - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблиица значений.
//
Функция ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента)

	ТаблицаТоваров = РезультатЗапросаПоТоварам.Выгрузить();
	
	ТаблицаТоваров.Колонки.Добавить("ПроводкиСуммаНДС",     ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаТоваров.Колонки.Добавить("ВидДеятельностиНДС",   Новый ОписаниеТипов("ПеречислениеСсылка.ВидыДеятельностиНДС"));
	ТаблицаТоваров.Колонки.Добавить("СуммаНДСВал",     		ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаТоваров.Колонки.Добавить("СуммаВал",     		ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаТоваров.Колонки.Добавить("СуммаНДСПропорционально", ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаТоваров.Колонки.Добавить("СуммаНДСУсловнойПродажи", ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповЧисла(15,2));
	
	Для каждого СтрокаТаблицы из ТаблицаТоваров Цикл
		
		// движения по регистру ОжидаемыйИПодтвержденныйНДСПриобретений могут быть только от резидентов
		// и только в гривне.
		СтрокаТаблицы.СуммаНДСВал = СтрокаТаблицы.СуммаНДС;
		СтрокаТаблицы.СуммаВал 	  = СтрокаТаблицы.Сумма;
		
		// Сумма налогового кредита 
		СтрокаТаблицы.ПроводкиСуммаНДС = СтрокаТаблицы.СуммаНДС;
		// Обнулим эту сумму, если отсутствует право на налоговый кредит	
		Если  НЕ (СтрокаТаблицы.ДляХозяйственнойДеятельности И СтрокаТаблицы.ДляОперацийОблагаемыхНДС) Тогда
			СтрокаТаблицы.ПроводкиСуммаНДС = 0;
		КонецЕсли;
		
		Если СтрокаТаблицы.ПропорциональныйНДС Тогда
		    СтрокаТаблицы.ВидДеятельностиНДС = Перечисления.ВидыДеятельностиНДС.ПропорциональноОблагаемая;	
			Если СтрокаТаблицы.ДляОперацийОблагаемыхНДС Тогда
				СтрокаТаблицы.СуммаНДСПропорционально =  СтрокаТаблицы.СуммаНДСВал
			КонецЕсли;
		ИначеЕсли СтрокаТаблицы.ДляОперацийОблагаемыхНДС Тогда
			СтрокаТаблицы.ВидДеятельностиНДС = Перечисления.ВидыДеятельностиНДС.Облагаемая;	
		Иначе	
			СтрокаТаблицы.ВидДеятельностиНДС = Перечисления.ВидыДеятельностиНДС.Необлагаемая;				
		КонецЕсли;
		
		// с 2015 года, если дата документ и дата вх. нал. документа после 07.2015 - на налоговый кредит относятся все суммы вх. НДС, однако
		// если приобретение осуществляется для не облагаемых/не хоз. операций, необходимо оформить условную продажу
		Если Дата >= '2015-07-01' Тогда
			
			Если СтрокаТаблицы.ВидДеятельностиНДС = Перечисления.ВидыДеятельностиНДС.Необлагаемая Тогда
			
				СтрокаТаблицы.СуммаНДСУсловнойПродажи = СтрокаТаблицы.СуммаНДС;	
				
			ИначеЕсли  СтрокаТаблицы.ВидДеятельностиНДС = Перечисления.ВидыДеятельностиНДС.ПропорциональноОблагаемая 
				     И НЕ СтрокаТаблицы.ДляОперацийОблагаемыхНДС Тогда
					 
				СтрокаТаблицы.СуммаНДСУсловнойПродажи = СтрокаТаблицы.СуммаНДС;	
				
			КонецЕсли;
		
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТаблицаТоваров;

КонецФункции // ПодготовитьТаблицуТоваров()

// Проверяет правильность заполнения строк табличной части "Товары".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТоварам        - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиТовары(СтруктураШапкиДокумента, Отказ, МассивНепроверяемыхРеквизитов)
	
	// проверим допустимость указания пропорционального ндс
	Если Не Отказ Тогда
		
		Для каждого Строка Из Товары Цикл
			
			Префикс = "Товары[%1].";
			Префикс = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Префикс, Формат(Строка.НомерСтроки - 1, "ЧН=0; ЧГ="));
				
			Если  Строка.ПропорциональныйНДС Тогда
				
				Поле = Префикс + "СтатьяДекларацииНДСНалоговыйКредит";
				Если НЕ Строка.СтавкаНДС = Перечисления.СтавкиНДС.НДС20
				   И НЕ Строка.СтавкаНДС = Перечисления.СтавкиНДС.НДС14
				   И НЕ Строка.СтавкаНДС = Перечисления.СтавкиНДС.НДС7
				   И НЕ Строка.СтавкаНДС = Перечисления.СтавкиНДС.НДС0
				   И НЕ Строка.СтавкаНДС = Перечисления.СтавкиНДС.СпецСт8 Тогда // ИНАГРО
				
					Если    Строка.СтатьяДекларацииНДСНалоговыйКредит = Справочники.СтатьиНалоговыхДеклараций.НДС_НКПропорционально 
						ИЛИ Строка.СтатьяДекларацииНДСНалоговыйКредит.Родитель = Справочники.СтатьиНалоговыхДеклараций.НДС_НКПропорционально Тогда
						
						СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='В строке ""%1"" указан признак пропорционального НДС для ставки НДС отличной от 20%, 14%, 7% или 0%! Статья декларации НДС(н/к) в этом случае не должна входить в группу ""%2""!.';uk='У рядку ""%1"" зазначена ознака пропорційного ПДВ для ставки ПДВ яка відмінна від 20%, 14%, 7% або 0%! Стаття декларації ПДВ(п/к) в цьому випадку не повинна входити в групу ""%2""!.'"), Строка.НомерСтроки, Справочники.СтатьиНалоговыхДеклараций.НДС_НКПропорционально);
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения, ЭтотОбъект, Поле, , Отказ);
						
					КонецЕсли;
					
				КонецЕсли;
				
				Поле = Префикс + "ДляХозяйственнойДеятельности";
				Если НЕ Строка.ДляХозяйственнойДеятельности Тогда
					
					СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='В строке ""%1"" указан признак пропорционального НДС! В этом случае должен быть установлен признак использования в хозяйственной деятельности!.';uk='У рядку ""%1"" зазначена ознака пропорційного ПДВ! У цьому випадку повинна бути встановлена ознака використання в господарській діяльності!'"), Строка.НомерСтроки);
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения, ЭтотОбъект, Поле, , Отказ);
					
				КонецЕсли;			
				
			КонецЕсли;	
			
		КонецЦикла; 
		
	КонецЕсли;

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиТовары()

// По результату запроса по шапке документа формируем движения по регистрам.
//
// Параметры: 
//  СтруктураШапкиДокумента   - выборка из результата запроса по шапке документа,
//  ТаблицаПоТоварам          - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ДвиженияПоРегистрам(СтруктураШапкиДокумента, ТаблицаПоТоварам, Отказ, Заголовок);
	
	// Проводки по бухгалтерскому учету НДС 
	ПроводкиБУ = Движения.Хозрасчетный;

	// ТОВАРЫ
	ТаблицаДвижений = ТаблицаПоТоварам.Скопировать();
	//ТаблицаДвижений.Свернуть("СчетУчетаНДС","ПроводкиСуммаНДС");
	//ТаблицаДвижений.Свернуть("СчетУчетаНДС","ПроводкиСуммаНДС,СуммаНДСУсловнойПродажи"); // ИН-АГРО
	ТаблицаДвижений.Свернуть("СчетУчетаНДС, СтавкаНДС", "ПроводкиСуммаНДС, СуммаНДСУсловнойПродажи"); // ИН-АГРО

	Корректировка = ((ВидОперации = Перечисления.ВидыОперацийРегистрацияВходящегоНалоговогоДокумента.РасчетКорректировкиВозврат) 
			     ИЛИ (ВидОперации = Перечисления.ВидыОперацийРегистрацияВходящегоНалоговогоДокумента.РасчетКорректировкиКорректировка));
	
	СодержаниеПроводки = НСтр("ru='НДС: налоговый кредит: ';uk='ПДВ: податковий кредит: '",Локализация.КодЯзыкаИнформационнойБазы());
	Если 	 ВидОперации = Перечисления.ВидыОперацийРегистрацияВходящегоНалоговогоДокумента.НалоговаяНакладная Тогда
		СодержаниеПроводки = СодержаниеПроводки+ НСтр("ru='налоговая накладная';uk='податкова накладна'",Локализация.КодЯзыкаИнформационнойБазы());
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРегистрацияВходящегоНалоговогоДокумента.ТоварныйЧек Тогда 
		СодержаниеПроводки = СодержаниеПроводки+ НСтр("ru='подтверждение (товарный чек)';uk='підтвердження (товарний чек)'",Локализация.КодЯзыкаИнформационнойБазы());
	ИначеЕсли  ВидОперации = Перечисления.ВидыОперацийРегистрацияВходящегоНалоговогоДокумента.РасчетКорректировкиВозврат Тогда
		СодержаниеПроводки = НСтр("ru='НДС: налоговые обязательства: расчет корректировки (возврат)';uk=""ПДВ: податкові зобов'язання: розрахунок коригування (повернення)""",Локализация.КодЯзыкаИнформационнойБазы());       	
	ИначеЕсли  ВидОперации = Перечисления.ВидыОперацийРегистрацияВходящегоНалоговогоДокумента.РасчетКорректировкиКорректировка Тогда
		СодержаниеПроводки = НСтр("ru='НДС: налоговые обязательства: расчет корректировки (изменение суммы компенсации)';uk=""ПДВ: податкові зобов'язання: розрахунок коригування (зміна суми компенсації)""",Локализация.КодЯзыкаИнформационнойБазы());       
	ИначеЕсли  ВидОперации = Перечисления.ВидыОперацийРегистрацияВходящегоНалоговогоДокумента.РаботыОтНерезидентаПрошлогоПериода Тогда
		СодержаниеПроводки = СодержаниеПроводки+ НСтр("ru='работы от нерезидента';uk='роботи від нерезидента'",Локализация.КодЯзыкаИнформационнойБазы());
	ИначеЕсли  ВидОперации = Перечисления.ВидыОперацийРегистрацияВходящегоНалоговогоДокумента.BeксeльПpoшлoгoПepиoдa Тогда		
		СодержаниеПроводки = СодержаниеПроводки+ НСтр("ru='вексель, погашенный в прошлом периоде';uk='вексель, погашений у минулому періоді'",Локализация.КодЯзыкаИнформационнойБазы());
	ИначеЕсли  ВидОперации = Перечисления.ВидыОперацийРегистрацияВходящегоНалоговогоДокумента.ИсправлениеОшибки Тогда		
	    Если СтруктураШапкиДокумента.ВключаетсяВУточняющийРасчет = Ложь Тогда
			СодержаниеПроводки = СодержаниеПроводки+ НСтр("ru='исправление ошибки в текущем периоде';uk='виправлення помилки у поточному періоді'");
		Иначе
			СодержаниеПроводки = СодержаниеПроводки+ НСтр("ru='корректировка через уточняющий расчет';uk='коригування через уточнюючий розрахункок'");			
		КонецЕсли;
	ИначеЕсли  ВидОперации = Перечисления.ВидыОперацийРегистрацияВходящегоНалоговогоДокумента.ВосстановлениеНалоговогоКредита Тогда		
	    Если СтруктураШапкиДокумента.ВключаетсяВУточняющийРасчет = Ложь Тогда
			СодержаниеПроводки = СодержаниеПроводки+ НСтр("ru='восстановление налогового кредита в текущем периоде';uk='відновлення податкового кредиту поточному періоді'");
		Иначе
			СодержаниеПроводки = СодержаниеПроводки+ НСтр("ru='восстановление налогового кредита через уточняющий расчет';uk='відновлення податкового кредиту через уточнюючий розрахункок'");			
		КонецЕсли;
	КонецЕсли;		
	
	Для Каждого СтрокаТаблицы Из ТаблицаДвижений Цикл
		
		Если    СтрокаТаблицы.ПроводкиСуммаНДС <> 0 Тогда
			
			Проводка = ПроводкиБУ.Добавить();

			Проводка.Период                     = СтруктураШапкиДокумента.Дата;
			Проводка.Активность                 = Истина;
			Проводка.Организация                = СтруктураШапкиДокумента.Организация;
			Проводка.Сумма                      = СтрокаТаблицы.ПроводкиСуммаНДС;
			Проводка.Содержание                 = СодержаниеПроводки;
			Проводка.НомерЖурнала               = "";

				
			Если ВидОперации = Перечисления.ВидыОперацийРегистрацияВходящегоНалоговогоДокумента.ПогашениеНалоговогоВекселя Тогда
					
				Проводка.СчетДт                     = СтруктураШапкиДокумента.СчетУчетаВексель;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, ВексельСубконто1);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, ВексельСубконто2);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, ВексельСубконто3);
				
				
				Проводка.СчетКт                     = СтруктураШапкиДокумента.СчетНДС;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, СубконтоДт1);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, СубконтоДт2);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3, СубконтоДт3);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "СтавкиНДС", СтрокаТаблицы.СтавкаНДС); // ИНАГРО
					
			Иначе	
					
				Проводка.СчетДт                     = СтруктураШапкиДокумента.СчетНДС;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СубконтоДт1);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, СубконтоДт2);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, СубконтоДт3);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "СтавкиНДС", СтрокаТаблицы.СтавкаНДС);  // ИНАГРО
				
			
				Если    ВидОперации = Перечисления.ВидыОперацийРегистрацияВходящегоНалоговогоДокумента.ИсправлениеОшибки
					ИЛИ ВидОперации = Перечисления.ВидыОперацийРегистрацияВходящегоНалоговогоДокумента.ВосстановлениеНалоговогоКредита  Тогда
					
					Проводка.СчетКт= СтруктураШапкиДокумента.СчетУчетаКорректировкиНДСКредит;
					
				Иначе
				
					Проводка.СчетКт                     = СтруктураШапкиДокумента.СчетУчетаНДС;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Контрагенты", СтруктураШапкиДокумента.Контрагент);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Договоры"   , СтруктураШапкиДокумента.ДоговорКонтрагента);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ДокументыРасчетовСКонтрагентами", Документы.РегистрацияВходящегоНалоговогоДокумента.ОпределитьСделкуЛокально(ЭтотОбъект));
				
				КонецЕсли;
					
			КонецЕсли;	
					
		КонецЕсли;

	КонецЦикла;
	
	ДвиженияПоРегиструОжидаемыйИПодтвержденныйНДСПриобретений(СтруктураШапкиДокумента, ТаблицаПоТоварам,  Отказ, Заголовок);
	
	ДвиженияПоРегиструНДСНалоговыйКредит( СтруктураШапкиДокумента, ТаблицаПоТоварам,  Отказ, Заголовок);

	// с 2015 года, если дата документ и дата вх. нал. документа после 07.2015 - на налоговый кредит относятся все суммы вх. НДС, однако
	// если приобретение осуществляется для не облагаемых/не хоз. операций, необходимо оформить условную продажу
	Если    (НЕ Корректировка И ДатаВходящегоДокумента 				  >= '2015-07-01' И Дата >= '2015-07-01')
		ИЛИ (   Корректировка И ДатаКорректируемогоВходящегоДокумента >= '2015-07-01' И Дата >= '2015-07-01') Тогда
		
		Для Каждого СтрокаТаблицы Из ТаблицаДвижений Цикл
			
			Если    СтрокаТаблицы.СуммаНДСУсловнойПродажи <> 0 Тогда
				
				Проводка = ПроводкиБУ.Добавить();

				Проводка.Период                     = СтруктураШапкиДокумента.Дата;
				Проводка.Активность                 = Истина;
				Проводка.Организация                = СтруктураШапкиДокумента.Организация;
				Проводка.Сумма                      = СтрокаТаблицы.СуммаНДСУсловнойПродажи;
				Проводка.Содержание                 = НСтр("ru='Налоговый кредит по операциям не обл. НДС после 07.2015';uk='Податковий кредит за операціями не опод. ПДВ після 07.2015'", Локализация.КодЯзыкаИнформационнойБазы());
				Проводка.НомерЖурнала               = "";

					
				Проводка.СчетДт                     = СтруктураШапкиДокумента.СчетНДС;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СубконтоДт1);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, СубконтоДт2);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, СубконтоДт3);

				Проводка.СчетКт= СтруктураШапкиДокумента.СчетНДСУсловнаяПродажа;
					
			КонецЕсли;

		КонецЦикла;
		
		ДвиженияПоРегиструОжидаемыйИПодтвержденныйНДСПродаж(СтруктураШапкиДокумента, ТаблицаПоТоварам,  Отказ, Заголовок);
	
	КонецЕсли;
	
КонецПроцедуры // ДвиженияПоРегистрам()

Процедура ДвиженияПоРегиструОжидаемыйИПодтвержденныйНДСПриобретений(СтруктураШапкиДокумента, ТаблицаПоТоварам,  Отказ, Заголовок)

	Если  ВидОперации <> Перечисления.ВидыОперацийРегистрацияВходящегоНалоговогоДокумента.НалоговаяНакладная 
		И ВидОперации <> Перечисления.ВидыОперацийРегистрацияВходящегоНалоговогоДокумента.ТоварныйЧек 
		И ВидОперации <> Перечисления.ВидыОперацийРегистрацияВходящегоНалоговогоДокумента.РасчетКорректировкиВозврат
		И ВидОперации <> Перечисления.ВидыОперацийРегистрацияВходящегоНалоговогоДокумента.РасчетКорректировкиКорректировка Тогда
		
		// В этом случае движения по регистру НДСПокупок этом документом не формируются
		Возврат
		
	КонецЕсли;
	
	НаборДвижений = Движения.ОжидаемыйИПодтвержденныйНДСПриобретений;
	
	// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
	ТаблицаДвижений = НаборДвижений.ВыгрузитьКолонки();
	
	ТаблицаДвиженийОплата 	  = ТаблицаДвижений.Скопировать();
	ТаблицаДвиженийТара 	  = ТаблицаДвижений.Скопировать();
	
	// ТОВАРЫ
	ТаблицаКопия = ТаблицаПоТоварам.Скопировать();                                                                                           
	ТаблицаКопия.Свернуть("СтавкаНДС,ДляХозяйственнойДеятельности,ВидДеятельностиНДС,ВозвратнаяТара,Амортизируется", "СуммаВал, СуммаНДСВал, СуммаНДСПропорционально");
	
	ТаблицаКопия.Колонки.СуммаВал.Имя    = "БазаНДС";
	ТаблицаКопия.Колонки.СуммаНДСВал.Имя = "СуммаНДС";
	ОбщегоНазначенияБПВызовСервера.ЗагрузитьВТаблицуЗначений(ТаблицаКопия, ТаблицаДвижений);
	
	ТаблицаДвижений.ЗаполнитьЗначения(Организация       , "Организация");
	ТаблицаДвижений.ЗаполнитьЗначения(ДоговорКонтрагента, "ДоговорКонтрагента");
	ТаблицаДвижений.ЗаполнитьЗначения(Документы.РегистрацияВходящегоНалоговогоДокумента.ОпределитьСделкуЛокально(ЭтотОбъект), "Сделка");
	
	Если ВидОперации =  Перечисления.ВидыОперацийРегистрацияВходящегоНалоговогоДокумента.РасчетКорректировкиВозврат Тогда
		ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СобытияОжидаемыйИПодтвержденныйНДСПриобретений.Возврат, "СобытиеНДС");
		
		ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.КодыОперацийОжидаемыйИПодтвержденныйНДСПриобретений.КорректировкаНалоговыйДокумент, "КодОперации");
		
		// Инвертируем суммы
		Для Каждого Строка Из ТаблицаДвижений Цикл
			Строка.БазаНДС	   = -Строка.БазаНДС;
			Строка.СуммаНДС    = -Строка.СуммаНДС;
			Строка.СуммаНДСПропорционально = -Строка.СуммаНДСПропорционально;
		КонецЦикла;
		
	Иначе
		ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СобытияОжидаемыйИПодтвержденныйНДСПриобретений.Поступление, "СобытиеНДС");
		ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.КодыОперацийОжидаемыйИПодтвержденныйНДСПриобретений.ПодтвержденныйНДС,  "КодОперации");
	КонецЕсли;		
	
	// ТАРА
	Если     СтруктураШапкиДокумента.СуммаВозвратнойТары <> 0 
		И НЕ ВидОперации =  Перечисления.ВидыОперацийРегистрацияВходящегоНалоговогоДокумента.РасчетКорректировкиВозврат 
		И НЕ ВидОперации =  Перечисления.ВидыОперацийРегистрацияВходящегоНалоговогоДокумента.РасчетКорректировкиКорректировка Тогда
		
		СтрокаДвиженийПоТаре = ТаблицаДвиженийТара.Добавить();
		СтрокаДвиженийПоТаре.СтавкаНДС 						= Перечисления.СтавкиНДС.НеНДС;
		СтрокаДвиженийПоТаре.ДляХозяйственнойДеятельности 	= Истина;
		СтрокаДвиженийПоТаре.ВидДеятельностиНДС 			= Перечисления.ВидыДеятельностиНДС.Необлагаемая;
		СтрокаДвиженийПоТаре.ВозвратнаяТара 				= Истина;
		СтрокаДвиженийПоТаре.БазаНДС 						= СтруктураШапкиДокумента.СуммаВозвратнойТары;
		
		ТаблицаДвиженийТара.ЗаполнитьЗначения(Организация       , "Организация");
		ТаблицаДвиженийТара.ЗаполнитьЗначения(ДоговорКонтрагента, "ДоговорКонтрагента");
		ТаблицаДвиженийТара.ЗаполнитьЗначения(Документы.РегистрацияВходящегоНалоговогоДокумента.ОпределитьСделкуЛокально(ЭтотОбъект), "Сделка");
		ТаблицаДвиженийТара.ЗаполнитьЗначения(Перечисления.СобытияОжидаемыйИПодтвержденныйНДСПриобретений.Поступление, "СобытиеНДС");
		ТаблицаДвиженийТара.ЗаполнитьЗначения(Перечисления.КодыОперацийОжидаемыйИПодтвержденныйНДСПриобретений.ПодтвержденныйНДС,  "КодОперации");
		
	КонецЕсли; 
	
	Если НЕ Отказ И ТаблицаДвижений.Количество() > 0 Тогда
		
		НаборДвижений.мПериод          = Дата;
		НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;
		
		Движения.ОжидаемыйИПодтвержденныйНДСПриобретений.ВыполнитьРасход();
	
	КонецЕсли;

	Если НЕ Отказ И ТаблицаДвиженийТара.Количество() > 0 Тогда
		
		НаборДвижений.мПериод          = Дата;
		НаборДвижений.мТаблицаДвижений = ТаблицаДвиженийТара;
		
		Движения.ОжидаемыйИПодтвержденныйНДСПриобретений.ВыполнитьРасход();
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДвиженияПоРегиструНДСНалоговыйКредит(СтруктураШапкиДокумента, ТаблицаПоТоварам,  Отказ, Заголовок);
  		
	НаборДвижений = Движения.НДСНалоговыйКредит;
	
	// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
	ТаблицаДвижений = НаборДвижений.ВыгрузитьКолонки();
	
	ТаблицаКопия = ТаблицаПоТоварам.Скопировать();

	ТаблицаКопия.Свернуть("СтавкаНДС, СтатьяДекларацииНДСНалоговыйКредит", "Сумма, СуммаНДС");
	
	ТаблицаКопия.Колонки.Сумма   .Имя = "БазаНДС";
	ТаблицаКопия.Колонки.СуммаНДС.Имя = "НДС";
	
	ОбщегоНазначенияБПВызовСервера.ЗагрузитьВТаблицуЗначений(ТаблицаКопия, ТаблицаДвижений);
	
	ТаблицаДвижений.ЗаполнитьЗначения(Организация       , "Организация");
	ТаблицаДвижений.ЗаполнитьЗначения(ДоговорКонтрагента, "ДоговорКонтрагента");
	ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.КодыОперацийНДСНалоговыйКредит.ПервичныйДокумент, "КодОперации");
	
	Если НЕ Отказ И ТаблицаДвижений.Количество() > 0 Тогда
		
		НаборДвижений.мПериод          = Дата;
		НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;
		
		Движения.НДСНалоговыйКредит.ДобавитьДвижение();
	
	КонецЕсли;
	
КонецПроцедуры

Процедура ДвиженияПоРегиструОжидаемыйИПодтвержденныйНДСПродаж(СтруктураШапкиДокумента, ТаблицаПоТоварам,  Отказ, Заголовок)

	Если  ВидОперации <> Перечисления.ВидыОперацийРегистрацияВходящегоНалоговогоДокумента.НалоговаяНакладная 
		И ВидОперации <> Перечисления.ВидыОперацийРегистрацияВходящегоНалоговогоДокумента.ТоварныйЧек 
		И ВидОперации <> Перечисления.ВидыОперацийРегистрацияВходящегоНалоговогоДокумента.РасчетКорректировкиВозврат
		И ВидОперации <> Перечисления.ВидыОперацийРегистрацияВходящегоНалоговогоДокумента.РаботыОтНерезидентаПрошлогоПериода
		И ВидОперации <> Перечисления.ВидыОперацийРегистрацияВходящегоНалоговогоДокумента.РасчетКорректировкиКорректировка
		И ВидОперации <> Перечисления.ВидыОперацийРегистрацияВходящегоНалоговогоДокумента.ИсправлениеОшибки		Тогда
		
		// В этом случае движения по регистру НДСПокупок этом документом не формируются
		Возврат
		
	КонецЕсли;
	
	НаборДвижений = Движения.ОжидаемыйИПодтвержденныйНДСПродаж;
	
	// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
	ТаблицаДвижений = НаборДвижений.ВыгрузитьКолонки();
	
	// ТОВАРЫ
	ТаблицаКопия = ТаблицаПоТоварам.Скопировать();                                                                                          
	Сч = 0;
	Пока Сч < ТаблицаКопия.Количество() Цикл
	
		СтрокаТоваров = ТаблицаКопия[Сч];	
		Если СтрокаТоваров.СуммаНДСУсловнойПродажи = 0 Тогда
			ТаблицаКопия.Удалить(СтрокаТоваров);                      
		Иначе
			Сч = Сч + 1;
		КонецЕсли;	
	
	КонецЦикла;
	
	ТаблицаКопия.Свернуть("СтавкаНДС", "СуммаВал, СуммаНДСУсловнойПродажи");
	
	ТаблицаКопия.Колонки.СуммаВал.Имя    			 = "БазаНДС";
	ТаблицаКопия.Колонки.СуммаНДСУсловнойПродажи.Имя = "СуммаНДС";
	
	ОбщегоНазначенияБПВызовСервера.ЗагрузитьВТаблицуЗначений(ТаблицаКопия, ТаблицаДвижений);
	
	ТаблицаДвижений.ЗаполнитьЗначения(Организация       , "Организация");
	
	Если ВидОперации =  Перечисления.ВидыОперацийРегистрацияВходящегоНалоговогоДокумента.РасчетКорректировкиВозврат Тогда
		
		ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СобытияОжидаемыйИПодтвержденныйНДСПродаж.УсловнаяПродажаВозврат, "СобытиеНДС");
		ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.КодыОперацийОжидаемыйИПодтвержденныйНДСПродаж.ОжидаемыйНДС, "КодОперации");
		
		// Инвертируем суммы
		Для Каждого Строка Из ТаблицаДвижений Цикл
			Строка.БазаНДС	   = -Строка.БазаНДС;
			Строка.СуммаНДС    = -Строка.СуммаНДС;
		КонецЦикла;
		
	ИначеЕсли ВидОперации =  Перечисления.ВидыОперацийРегистрацияВходящегоНалоговогоДокумента.ИсправлениеОшибки Тогда
		
		Для каждого Строка Из ТаблицаДвижений Цикл
			
			Если Строка.БазаНДС < 0 Тогда
				Строка.БазаНДС	   = -Строка.БазаНДС;
				Строка.СуммаНДС    = -Строка.СуммаНДС;
				Строка.СобытиеНДС  = Перечисления.СобытияОжидаемыйИПодтвержденныйНДСПродаж.УсловнаяПродажаВозврат;
			Иначе	
				Строка.СобытиеНДС  = Перечисления.СобытияОжидаемыйИПодтвержденныйНДСПродаж.УсловнаяПродажа;
			КонецЕсли;
		
		КонецЦикла;
		
		ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.КодыОперацийОжидаемыйИПодтвержденныйНДСПродаж.ОжидаемыйНДС, "КодОперации");
		
	Иначе
		
		ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СобытияОжидаемыйИПодтвержденныйНДСПродаж.УсловнаяПродажа,    "СобытиеНДС");
		ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.КодыОперацийОжидаемыйИПодтвержденныйНДСПродаж.ОжидаемыйНДС,  "КодОперации");
		
	КонецЕсли;		
	
	Если НЕ Отказ И ТаблицаДвижений.Количество() > 0 Тогда
		
		НаборДвижений.мПериод          = Дата;
		НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;
		
		Движения.ОжидаемыйИПодтвержденныйНДСПродаж.ВыполнитьПриход();
	
	КонецЕсли;
	
КонецПроцедуры

// Процедура формирует структуру шапки документа и дополнительных полей.
//
Процедура ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента) Экспорт
	
	// Дерево значений, содержащее имена необходимых полей в запросе по шапке.
	Перем ДеревоПолейЗапросаПоШапке;
	
	
	СтруктураШапкиДокумента = ОбщегоНазначенияРед12.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);

	// Заполним по шапке документа дерево параметров, нужных при проведении.
	ДеревоПолейЗапросаПоШапке      = ОбщегоНазначенияРед12.СформироватьДеревоПолейЗапросаПоШапке();
	ОбщегоНазначенияРед12.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке( ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "Организация"         , "ДоговорОрганизация");
	ОбщегоНазначенияРед12.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке( ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "ВидДоговора"         , "ВидДоговора");
	ОбщегоНазначенияРед12.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "ВедениеВзаиморасчетов"                   , "ВедениеВзаиморасчетов");
	ОбщегоНазначенияРед12.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "ВедениеВзаиморасчетовНУ"                 , "ВедениеВзаиморасчетовНУ");
	ОбщегоНазначенияРед12.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "СложныйНалоговыйУчет"					   , "СложныйНалоговыйУчет");

	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа
	СтруктураШапкиДокумента = УправлениеЗапасами.СформироватьЗапросПоДеревуПолей(ЭтотОбъект, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета);
	
КонецПроцедуры // ПодготовитьСтруктуруШапкиДокумента()

// Процедура формирует таблицы документа.
//
Процедура ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоТоварам, Отказ, Заголовок) Экспорт
	
	// Получим необходимые данные для проведения и проверки заполенения по табличной части "Товары".
	СтруктураПолей = Новый Структура();
	СтруктураПростыхПолей = Новый Структура();
	СтруктураСложныхПолей = Новый Структура();
	
	СтруктураПолей.Вставить("Сумма"                     , "Сумма");
	СтруктураПолей.Вставить("СтавкаНДС"                 , "СтавкаНДС");
	СтруктураПолей.Вставить("СуммаНДС"					, "СуммаНДС");
	СтруктураПолей.Вставить("ДляХозяйственнойДеятельности", "ДляХозяйственнойДеятельности");
	СтруктураПолей.Вставить("ДляОперацийОблагаемыхНДС"	, "ДляОперацийОблагаемыхНДС");
	СтруктураПолей.Вставить("Амортизируется"			, "Амортизируется");
	СтруктураПолей.Вставить("ПропорциональныйНДС"		, "ПропорциональныйНДС");
	СтруктураПолей.Вставить("СтатьяДекларацииНДСНалоговыйКредит"  	, "СтатьяДекларацииНДСНалоговыйКредит");
	СтруктураПростыхПолей.Вставить("ВозвратнаяТара"     , Ложь);
	СтруктураПолей.Вставить("СчетУчетаНДС"    	, "Ссылка.СчетУчетаНДС");
	
	РезультатЗапросаПоТоварам = ОбщегоНазначенияРед12.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураПолей, СтруктураПростыхПолей, СтруктураСложныхПолей);

	// Подготовим таблицу товаров для проведения.
	ТаблицаПоТоварам = ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ


// Процедура - обработчик события "ОбработкаЗаполнения".
//
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)

	ТипДанныхЗаполнения = ТипЗнч(ДанныеЗаполнения);
	Если ДанныеЗаполнения <> Неопределено И ТипДанныхЗаполнения <> Тип("Структура")
		И Метаданные().ВводитсяНаОсновании.Содержит(ДанныеЗаполнения.Метаданные()) Тогда
		ЗаполнитьПоДокументуОснованию(ДанныеЗаполнения);
	ИначеЕсли ДанныеЗаполнения <> Неопределено 
		И ТипДанныхЗаполнения = Тип("Структура") 
		И ДанныеЗаполнения.Свойство("Основание") 
		И Метаданные().ВводитсяНаОсновании.Содержит(ДанныеЗаполнения.Основание.Метаданные()) Тогда
		
		Если ДанныеЗаполнения.Свойство("ДоговорСделка") Тогда
			ДоговорСделка = ДанныеЗаполнения.ДоговорСделка;
		Иначе	
		    ДоговорСделка = Неопределено;
		КонецЕсли; 
		ДанныеЗаполнения = ДанныеЗаполнения.Основание;
		
		ЗаполнитьПоДокументуОснованию(ДанныеЗаполнения, ДоговорСделка);
	КонецЕсли;
	// Предварительно необходимо предоставить возможность пользователю выбрать договор и сделку, по которым необходимо сформировать документ
	Если ЭтотОбъект.ДополнительныеСвойства.Свойство("НесколькоДоговоровСделок") И ЭтотОбъект.ДополнительныеСвойства.НесколькоДоговоровСделок Тогда
		Возврат;
	КонецЕсли; 

	ЗаполнениеДокументов.Заполнить(ЭтотОбъект, ДанныеЗаполнения);
	
	Если ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Если НЕ ЗначениеЗаполнено(ОбособленноеПодразделение) Тогда
			
			ОбособленноеПодразделение = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновноеОбособленноеПодразделениеОрганизации");	
			
			Если НЕ ОбособленноеПодразделение.Владелец = Организация Тогда
				ОбособленноеПодразделение = Неопределено;				
			КонецЕсли; 
		КонецЕсли;
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(Организация)
		И ЗначениеЗаполнено(Контрагент)
		И ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
		Документы.РегистрацияВходящегоНалоговогоДокумента.ЗаполнитьСчетаУчетаРасчетов(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПоДокументуОснованию(Основание, ДоговорСделка = Неопределено)	
	
	Если ДоговорСделка = Неопределено Тогда
		ТаблицаДоговоров   = Неопределено;
		ДоговорСделка 	   = Документы.РегистрацияВходящегоНалоговогоДокумента.ОпределитьДоговорСделку(Основание, ТаблицаДоговоров);
		Если ТипЗнч(ТаблицаДоговоров) = Тип("ТаблицаЗначений") И ТаблицаДоговоров.Количество() > 1 Тогда
			// Если несколько договоров, то необходимо предоставить выбор договора и сделки, по которой формировать документ
			ЭтотОбъект.ДополнительныеСвойства.Вставить("НесколькоДоговоровСделок", Истина);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	// Заполним реквизиты из стандартного набора по документу основанию.
	ЗаполнениеДокументов.ЗаполнитьПоОснованию(ЭтотОбъект, Основание);
	ДокументОснование  = Основание;
	
	ДоговорКонтрагента = ДоговорСделка.ДоговорКонтрагента;
	Сделка 			   = ДоговорСделка.Сделка;
	
	// в случае Авансового отчета контрагент может быть переопределен
	Контрагент = ДоговорКонтрагента.Владелец;

	Если  ТипЗнч(Основание) = Тип("ДокументСсылка.КорректировкаОжидаемогоИПодтвержденногоНДС")  Тогда
	  
	  ВидОперации = Перечисления.ВидыОперацийРегистрацияВходящегоНалоговогоДокумента.ИсправлениеОшибки;	
	  ВключаетсяВУточняющийРасчет = истина;
	  Возврат;
	  
  	ИначеЕсли  ТипЗнч(Основание) = Тип("ДокументСсылка.ИзменениеНалоговогоНазначенияЗапасов") 
	  	 ИЛИ ТипЗнч(Основание) = Тип("ДокументСсылка.ИзменениеНалоговогоНазначенияТЗР") Тогда
	  
	  ВидОперации = Перечисления.ВидыОперацийРегистрацияВходящегоНалоговогоДокумента.ВосстановлениеНалоговогоКредита;	
	  Возврат;
	  
	ИначеЕсли  ТипЗнч(Основание) = Тип("ДокументСсылка.ПриходныйКассовыйОрдер")
		ИЛИ ТипЗнч(Основание) = Тип("ДокументСсылка.ПоступлениеНаРасчетныйСчет") Тогда
		// возврат
		ВидОперации = Перечисления.ВидыОперацийРегистрацияВходящегоНалоговогоДокумента.РасчетКорректировкиВозврат;
		
	ИначеЕсли (ТипЗнч(Основание) = Тип("ДокументСсылка.ВозвратТоваровПоставщику")
		   ИЛИ Основание.Метаданные().Имя = "ИНАГРО_ВозвратБиологическихАктивовПоставщику") // ИНАГРО
		   И (НЕ Основание.ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом) Тогда

		ВидОперации = Перечисления.ВидыОперацийРегистрацияВходящегоНалоговогоДокумента.РасчетКорректировкиВозврат;
	
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.РасходныйКассовыйОрдер")
		  ИЛИ ТипЗнч(Основание) = Тип("ДокументСсылка.СписаниеСРасчетногоСчета") Тогда
		  
		ВидОперации = Перечисления.ВидыОперацийРегистрацияВходящегоНалоговогоДокумента.НалоговаяНакладная;
		
	ИначеЕсли (ТипЗнч(Основание) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг")
		   ИЛИ Основание.Метаданные().Имя = "ИНАГРО_ПоступлениеБиологическихАктивов") // ИНАГРО
		   И НЕ (Основание.ВалютаДокумента = мВалютаРегламентированногоУчета) Тогда	
		
		ВидОперации = Перечисления.ВидыОперацийРегистрацияВходящегоНалоговогоДокумента.РаботыОтНерезидентаПрошлогоПериода;
		
		Документы.РегистрацияВходящегоНалоговогоДокумента.ЗаполнитьПоРаботамОтНерезидента(ЭтотОбъект);
		// стандартного заполнения не будет.
		Возврат;
		
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ОтчетКомиссионераОПродажах")  
		 И НЕ (Основание.ВалютаДокумента = мВалютаРегламентированногоУчета) Тогда	
		
		ВидОперации = Перечисления.ВидыОперацийРегистрацияВходящегоНалоговогоДокумента.РаботыОтНерезидентаПрошлогоПериода;
		
		Документы.РегистрацияВходящегоНалоговогоДокумента.ЗаполнитьПоУслугамКомиссииОтНерезидента(ЭтотОбъект);
		// стандартнго заполнения не будет.
		Возврат;
		
	ИначеЕсли (ТипЗнч(Основание) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг")
		   ИЛИ Основание.Метаданные().Имя = "ИНАГРО_ПоступлениеБиологическихАктивов") // ИНАГРО
		   И Основание.ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда

		ВидОперации = Перечисления.ВидыОперацийРегистрацияВходящегоНалоговогоДокумента.НалоговаяНакладная;
		
		Документы.РегистрацияВходящегоНалоговогоДокумента.ЗаполнитьПоКомиссионнойТорговлеНалоговыйКодекс(ЭтотОбъект);
		// стандартнго заполнения не будет.
		Возврат;
		
	ИначеЕсли (ТипЗнч(Основание) = Тип("ДокументСсылка.ВозвратТоваровПоставщику")
		   ИЛИ Основание.Метаданные().Имя = "ИНАГРО_ВозвратБиологическихАктивовПоставщику") // ИНАГРО
		   И Основание.ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда

		ВидОперации = Перечисления.ВидыОперацийРегистрацияВходящегоНалоговогоДокумента.РасчетКорректировкиВозврат;
		
		Документы.РегистрацияВходящегоНалоговогоДокумента.ЗаполнитьПоКомиссионнойТорговлеНалоговыйКодекс(ЭтотОбъект);
		// стандартнго заполнения не будет.
		Возврат;
		
		
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ОтчетКомитентуОПродажах") Тогда
		
		ВидОперации = Перечисления.ВидыОперацийРегистрацияВходящегоНалоговогоДокумента.РасчетКорректировкиКорректировка;
		
		Документы.РегистрацияВходящегоНалоговогоДокумента.ЗаполнитьПоКомиссионнойТорговлеНалоговыйКодекс(ЭтотОбъект);
		
		Возврат	
		
	Иначе
		
		ПлательщикНДС = ЗначениеЗаполнено(Контрагент.ИНН);
		
		Если ПлательщикНДС Тогда
			ВидОперации = Перечисления.ВидыОперацийРегистрацияВходящегоНалоговогоДокумента.НалоговаяНакладная;
		Иначе
			//покупка у неплательщика НДС. Основание включения в книгу - товарний чек (п. 10.2 Порядка)
			ВидОперации = Перечисления.ВидыОперацийРегистрацияВходящегоНалоговогоДокумента.ТоварныйЧек;
		КонецЕсли;
		
	КонецЕсли;
	
	Дата = Основание.Дата;
	
	ДатаВходящегоДокумента = Дата;
	
	Документы.РегистрацияВходящегоНалоговогоДокумента.ЗаполнитьПоДокументуОснованиюСУчетомОстатков(ЭтотОбъект);
	
КонецПроцедуры // ОбработкаЗаполнения()

// Процедура вызывается перед записью документа 
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)

	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	// Посчитать суммы документа и записать ее в соответствующий реквизит шапки для показа в журналах
	СуммаДокумента 	  = Товары.Итог("СуммаВзаиморасчетов");
	СуммаНДСДокумента = Товары.Итог("СуммаНДС");

	Если ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
		Если ДоговорКонтрагента.ВалютаВзаиморасчетов <> мВалютаРегламентированногоУчета Тогда
			// Договор - внешнеэкономический
			СуммаВозвратнойТары = 0
		КонецЕсли;
	КонецЕсли;
	
	Если СчетНДСУсловнаяПродажа.Пустая() Тогда
		СчетНДСУсловнаяПродажа = ПланыСчетов.Хозрасчетный.УсловнаяПродажа;
	КонецЕсли;
	
КонецПроцедуры // ПередЗаписью

Процедура ПриКопировании(ОбъектКопирования)
	
	Дата = НачалоДня(ОбщегоНазначенияБП.ПолучитьРабочуюДату());
	Ответственный = Пользователи.ТекущийПользователь();
	
	ДатаПолучения = '0001-01-01';
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	Перем Заголовок, СтруктураШапкиДокумента;
	Перем ТаблицаПоТоварам;

	// Заголовок для сообщений об ошибках проведения.
	Заголовок = НСтр("ru='Проведение документа ""';uk='Проведення документа ""'") + СокрЛП(Ссылка) + """: ";

	ПроведениеСервер.ПодготовитьНаборыЗаписейКПроведению(ЭтотОбъект);
	Если РучнаяКорректировка Тогда
		Возврат;
	КонецЕсли;

	ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента);
	
	// Получим данные учетной политики
	ПодготовитьПараметрыУчетнойПолитикиРегл(СтруктураШапкиДокумента, Отказ, Заголовок);
		
    ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоТоварам, Отказ, Заголовок);

	// Движения по документу
	Если Не Отказ Тогда
		ДвиженияПоРегистрам(СтруктураШапкиДокумента, ТаблицаПоТоварам, Отказ, Заголовок);
	КонецЕсли;
	
	Движения.Хозрасчетный.ВыполнитьДействияПередЗаписьюДвижений();
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКЗаписиДвижений(ЭтотОбъект);

КонецПроцедуры // ОбработкаПроведения()

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКОтменеПроведения(ЭтотОбъект);
	Движения.Записать();
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	МассивНепроверяемыхРеквизитов = Новый Массив();
	
	СтруктураШапкиДокумента		  = Новый Структура;
	
	СтруктураШапкиДокумента.Вставить("ЕстьНДС",					 УчетнаяПолитика.ПлательщикНДС(Организация, Дата));
	СтруктураШапкиДокумента.Вставить("ВедениеВзаиморасчетовНУ",  ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДоговорКонтрагента, "ВедениеВзаиморасчетовНУ"));
	
	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, МассивНепроверяемыхРеквизитов);
	
	ПроверитьЗаполнениеТабличнойЧастиТовары(СтруктураШапкиДокумента, Отказ, МассивНепроверяемыхРеквизитов);
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	
КонецПроцедуры

мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();

#КонецЕсли