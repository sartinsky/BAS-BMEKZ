#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда


Функция ОпределитьСтатьюНалоговойДекларации(ВидОперации, ПараметрыОперации) Экспорт
	
	СтрокаТЧ = ПараметрыОперации;
	
	СтатьиДеклараций = Справочники.СтатьиНалоговыхДеклараций;

	Если  ВидОперации = Перечисления.ВидыОперацийРегистрацияВходящегоНалоговогоДокумента.ПогашениеНалоговогоВекселя Тогда			
		
	    Возврат  СтатьиДеклараций.ПустаяСсылка();
		
	Иначе
		// НалоговаяНакладная 
		// ТоварныйЧек 
		// РасчетКорректировки
		// РаботыОтНерезидентаПрошлогоПериода 
		// BeксeльПpoшлoгoПepиoдa 
		
		// Определим, имеется ли право на налоговый кредит	
		Если  СтрокаТЧ.ДляХозяйственнойДеятельности
			И СтрокаТЧ.ДляОперацийОблагаемыхНДС Тогда
			// Уплаченный НДС имеем право включать в налоговый кредит 
			
			Если    СтрокаТЧ.СтавкаНДС = Перечисления.СтавкиНДС.НДС0 
				ИЛИ СтрокаТЧ.СтавкаНДС = Перечисления.СтавкиНДС.НДС20
				ИЛИ СтрокаТЧ.СтавкаНДС = Перечисления.СтавкиНДС.НДС14
				ИЛИ СтрокаТЧ.СтавкаНДС = Перечисления.СтавкиНДС.НДС7
				ИЛИ СтрокаТЧ.СтавкаНДС = Перечисления.СтавкиНДС.СпецСт8 // ИНАГРО
				Тогда
				// приобретение с уплатой НДС
				
				Если    ВидОперации = Перечисления.ВидыОперацийРегистрацияВходящегоНалоговогоДокумента.НалоговаяНакладная
					ИЛИ ВидОперации = Перечисления.ВидыОперацийРегистрацияВходящегоНалоговогоДокумента.ИсправлениеОшибки
					ИЛИ ВидОперации = Перечисления.ВидыОперацийРегистрацияВходящегоНалоговогоДокумента.ТоварныйЧек Тогда
					
					// 10.1 Декларации,
					Если СтрокаТЧ.Амортизируется Тогда
						
						Если СтрокаТЧ.ПропорциональныйНДС Тогда
						    Возврат  СтатьиДеклараций.НДС_НКПропорциональноВклВКредитПоставкаОФ;
						Иначе	
							Возврат  СтатьиДеклараций.НДС_НКПокупкаСНДСвВРОблагПриобрОФ;
						КонецЕсли;
						
					Иначе
						
						Если СтрокаТЧ.ПропорциональныйНДС Тогда
						    Возврат  СтатьиДеклараций.НДС_НКПропорциональноВклВКредит;
						Иначе	
							Возврат  СтатьиДеклараций.НДС_НКПокупкаСНДСвВРОблаг;
						КонецЕсли;
						
					КонецЕсли;
					
				ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРегистрацияВходящегоНалоговогоДокумента.ВосстановлениеНалоговогоКредита Тогда
					
					Если СтрокаТЧ.ПропорциональныйНДС Тогда
					    Возврат  СтатьиДеклараций.НДС_НККорректировкаВосстановлениеКредитаПропорциональноВклВКредит;
					Иначе	
						Возврат  СтатьиДеклараций.НДС_НККорректировкаВосстановлениеКредита;
					КонецЕсли;

				ИначеЕсли   ВидОперации = Перечисления.ВидыОперацийРегистрацияВходящегоНалоговогоДокумента.РасчетКорректировкиВозврат
						ИЛИ ВидОперации = Перечисления.ВидыОперацийРегистрацияВходящегоНалоговогоДокумента.РасчетКорректировкиКорректировка	Тогда

					Если СтрокаТЧ.ПропорциональныйНДС Тогда
						Если СтрокаТЧ.Амортизируется Тогда
							Возврат  СтатьиДеклараций.НДС_НККорректировкаПропорциональноВклВКредитПоставкаОФ;						
						Иначе
							Возврат  СтатьиДеклараций.НДС_НККорректировкаПропорциональноВклВКредит;						
						КонецЕсли;
					Иначе	
						Если СтрокаТЧ.Амортизируется Тогда
							Возврат  СтатьиДеклараций.НДС_НКИзменениеСтоимостиОФ;						
						Иначе
							Возврат  СтатьиДеклараций.НДС_НКИзменениеСтоимости;						
						КонецЕсли;
					КонецЕсли;
					
				ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРегистрацияВходящегоНалоговогоДокумента.РаботыОтНерезидентаПрошлогоПериода Тогда
					
					Если СтрокаТЧ.ПропорциональныйНДС Тогда
						Возврат  СтатьиДеклараций.НДС_НКПропорциональноВклВКредит;
					Иначе	
						Возврат  СтатьиДеклараций.НДС_НКИмпортВРОблагУслугиНерезидента;
					КонецЕсли;
					
				ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРегистрацияВходящегоНалоговогоДокумента.BeксeльПpoшлoгoПepиoдa Тогда
					
					Возврат  СтатьиДеклараций.НДС_НКИмпортВРОблагВексель;
					
				ИначеЕсли  ВидОперации = Перечисления.ВидыОперацийРегистрацияВходящегоНалоговогоДокумента.ТаможенноеОформлениеТоваровКомитента Тогда
					
					Если СтрокаТЧ.ПропорциональныйНДС Тогда
						Возврат  СтатьиДеклараций.НДС_НКПропорциональноВклВКредит;
					Иначе	
						Возврат  СтатьиДеклараций.НДС_НКИмпортВРОблагНДСТамож;
					КонецЕсли;
					
				КонецЕсли;
				
			Иначе
				
				// приобретение без НДС
				Если    ВидОперации = Перечисления.ВидыОперацийРегистрацияВходящегоНалоговогоДокумента.НалоговаяНакладная
					ИЛИ ВидОперации = Перечисления.ВидыОперацийРегистрацияВходящегоНалоговогоДокумента.ИсправлениеОшибки
					ИЛИ ВидОперации = Перечисления.ВидыОперацийРегистрацияВходящегоНалоговогоДокумента.ВосстановлениеНалоговогоКредита
					ИЛИ ВидОперации = Перечисления.ВидыОперацийРегистрацияВходящегоНалоговогоДокумента.ТоварныйЧек Тогда
					
					// 11.1 Декларации,
					Возврат  СтатьиДеклараций.НДС_НКПокупкаБезНДСвВРОблаг;
					
				ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРегистрацияВходящегоНалоговогоДокумента.РасчетКорректировкиВозврат
					  ИЛИ ВидОперации = Перечисления.ВидыОперацийРегистрацияВходящегоНалоговогоДокумента.РасчетКорректировкиКорректировка	Тогда
					  
					 Возврат  СтатьиДеклараций.НДС_НККорректировкаБезНК;

				Иначе
					// Импорт
					
					Если ВидОперации = Перечисления.ВидыОперацийРегистрацияВходящегоНалоговогоДокумента.РаботыОтНерезидентаПрошлогоПериода Тогда
						
						// странно, услуги от нерезидента успользуемые на территории Украины облагаются по ставке 20%
						Возврат  СтатьиДеклараций.ПустаяСсылка();
						
					ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРегистрацияВходящегоНалоговогоДокумента.BeксeльПpoшлoгoПepиoдa Тогда
						
						// странно, был оформлен  вексель по ГТД не предусматривающей уплаты НДС
						Возврат  СтатьиДеклараций.ПустаяСсылка();
						
					ИначеЕсли  ВидОперации = Перечисления.ВидыОперацийРегистрацияВходящегоНалоговогоДокумента.ТаможенноеОформлениеТоваровКомитента Тогда
					
						Возврат  СтатьиДеклараций.НДС_НКИмпортВРОблагБезНДС;
						
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;	
			
		Иначе 
			//нет права на налоговый кредит
			
			Если  СтрокаТЧ.ДляХозяйственнойДеятельности Тогда
				// относятся к хоз. деятельности, но будет использоваться в необлагаемых операциях
				
				Если    СтрокаТЧ.СтавкаНДС = Перечисления.СтавкиНДС.НДС0 
					ИЛИ СтрокаТЧ.СтавкаНДС = Перечисления.СтавкиНДС.НДС20
					ИЛИ СтрокаТЧ.СтавкаНДС = Перечисления.СтавкиНДС.НДС14
					ИЛИ СтрокаТЧ.СтавкаНДС = Перечисления.СтавкиНДС.НДС7
					ИЛИ СтрокаТЧ.СтавкаНДС = Перечисления.СтавкиНДС.СпецСт8 // ИНАГРО
					Тогда
					// приобретение с уплатой НДС
					
					Если    ВидОперации = Перечисления.ВидыОперацийРегистрацияВходящегоНалоговогоДокумента.НалоговаяНакладная
						ИЛИ ВидОперации = Перечисления.ВидыОперацийРегистрацияВходящегоНалоговогоДокумента.ИсправлениеОшибки
						ИЛИ ВидОперации = Перечисления.ВидыОперацийРегистрацияВходящегоНалоговогоДокумента.ТоварныйЧек 
						ИЛИ ВидОперации = Перечисления.ВидыОперацийРегистрацияВходящегоНалоговогоДокумента.РасчетКорректировкиВозврат
						ИЛИ ВидОперации = Перечисления.ВидыОперацийРегистрацияВходящегоНалоговогоДокумента.РасчетКорректировкиКорректировка	Тогда
						
						Если СтрокаТЧ.ПропорциональныйНДС Тогда
							
							Если ВидОперации = Перечисления.ВидыОперацийРегистрацияВходящегоНалоговогоДокумента.РасчетКорректировкиВозврат
							 ИЛИ ВидОперации = Перечисления.ВидыОперацийРегистрацияВходящегоНалоговогоДокумента.РасчетКорректировкиКорректировка Тогда
								Если СтрокаТЧ.Амортизируется Тогда
									Возврат  СтатьиДеклараций.НДС_НККорректировкаПропорциональноНеВклВКредитПоставкаОФ;						
								Иначе
									Возврат  СтатьиДеклараций.НДС_НККорректировкаПропорциональноНеВклВКредит;						
								КонецЕсли;
							Иначе
								Если СтрокаТЧ.Амортизируется Тогда
									Возврат  СтатьиДеклараций.НДС_НКПропорциональноНеВклВКредитПоставкаОФ;		
								Иначе
									Возврат  СтатьиДеклараций.НДС_НКПропорциональноНеВклВКредит;		
								КонецЕсли;
							КонецЕсли;
							
						ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРегистрацияВходящегоНалоговогоДокумента.РасчетКорректировкиВозврат
							  ИЛИ ВидОперации = Перечисления.ВидыОперацийРегистрацияВходящегоНалоговогоДокумента.РасчетКорректировкиКорректировка Тогда	
						
							Если СтрокаТЧ.Амортизируется Тогда
								Возврат  СтатьиДеклараций.НДС_НКИзменениеСтоимостиОФ;						
							Иначе
								Возврат  СтатьиДеклараций.НДС_НКИзменениеСтоимости;						
							КонецЕсли;
							
						Иначе
							
							Если СтрокаТЧ.Амортизируется Тогда
								Возврат  СтатьиДеклараций.НДС_НКПокупкаСНДСвВРНеОблагПриобрОФ;
							Иначе
								Возврат  СтатьиДеклараций.НДС_НКПокупкаСНДСвВРНеОблаг;
							КонецЕсли;
							
						КонецЕсли;	
						
					ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРегистрацияВходящегоНалоговогоДокумента.ВосстановлениеНалоговогоКредита Тогда	
						Если СтрокаТЧ.ПропорциональныйНДС Тогда
							Возврат СтатьиДеклараций.НДС_НККорректировкаВосстановлениеКредитаПропорциональноНеВклВКредит;	
						Иначе
							Возврат СтатьиДеклараций.НДС_НКПокупкаСНДСвВРНеОблаг;	
						КонецЕсли
					ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРегистрацияВходящегоНалоговогоДокумента.РаботыОтНерезидентаПрошлогоПериода Тогда
						
						// 13.3  Декларации,
						Если СтрокаТЧ.ПропорциональныйНДС Тогда
							Если СтрокаТЧ.Амортизируется Тогда
								Возврат  СтатьиДеклараций.НДС_НКПропорциональноНеВклВКредитПоставкаОФ;		
							Иначе
								Возврат  СтатьиДеклараций.НДС_НКПропорциональноНеВклВКредит;		
							КонецЕсли;
						Иначе	
							Возврат  СтатьиДеклараций.НДС_НКИмпортВРНеОблагНеОбъектУслугиНерезидента;
						КонецЕсли;
						
					ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРегистрацияВходящегоНалоговогоДокумента.BeксeльПpoшлoгoПepиoдa Тогда
						
						    Возврат  СтатьиДеклараций.ПустаяСсылка();
						
					ИначеЕсли  ВидОперации = Перечисления.ВидыОперацийРегистрацияВходящегоНалоговогоДокумента.ТаможенноеОформлениеТоваровКомитента Тогда
					
						Если СтрокаТЧ.ПропорциональныйНДС Тогда
							Если СтрокаТЧ.Амортизируется Тогда
								Возврат  СтатьиДеклараций.НДС_НКПропорциональноНеВклВКредитПоставкаОФ;		
							Иначе
								Возврат  СтатьиДеклараций.НДС_НКПропорциональноНеВклВКредит;		
							КонецЕсли;
						Иначе	
							Возврат  СтатьиДеклараций.НДС_НКИмпортВРНеОблагНеОбъектНДСТамож;
						КонецЕсли;
						
					КонецЕсли;
					
				Иначе
					// приобретение без НДС					 

					Если    ВидОперации = Перечисления.ВидыОперацийРегистрацияВходящегоНалоговогоДокумента.НалоговаяНакладная
						ИЛИ ВидОперации = Перечисления.ВидыОперацийРегистрацияВходящегоНалоговогоДокумента.ИсправлениеОшибки
						ИЛИ ВидОперации = Перечисления.ВидыОперацийРегистрацияВходящегоНалоговогоДокумента.ТоварныйЧек Тогда
						
						Возврат  СтатьиДеклараций.НДС_НКПокупкаБезНДСвВРНеОблаг;
						
					ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРегистрацияВходящегоНалоговогоДокумента.РасчетКорректировкиВозврат
						  ИЛИ ВидОперации = Перечисления.ВидыОперацийРегистрацияВходящегоНалоговогоДокумента.РасчетКорректировкиКорректировка	Тогда
						
						Возврат  СтатьиДеклараций.НДС_НККорректировкаБезНК;
						
					Иначе
						// Импорт
						Если ВидОперации = Перечисления.ВидыОперацийРегистрацияВходящегоНалоговогоДокумента.РаботыОтНерезидентаПрошлогоПериода Тогда
							
							// странно, услуги от нерезидента успользуемые на территории Украины облагаются по ставке 20%
							Возврат  СтатьиДеклараций.ПустаяСсылка();
							
						ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРегистрацияВходящегоНалоговогоДокумента.BeксeльПpoшлoгoПepиoдa Тогда
							
							// странно, был оформлен  вексель по ГТД не предусматривающей уплаты НДС
							Возврат  СтатьиДеклараций.ПустаяСсылка();
							
						ИначеЕсли  ВидОперации = Перечисления.ВидыОперацийРегистрацияВходящегоНалоговогоДокумента.ТаможенноеОформлениеТоваровКомитента Тогда
					
							Возврат  СтатьиДеклараций.НДС_НКИмпортВРНеОблагНеОбъектБезНДС;
						
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЕсли;	
				
			Иначе 
				//не относятся к хоз деятельности 
				
				Если    СтрокаТЧ.СтавкаНДС = Перечисления.СтавкиНДС.НДС0 
					ИЛИ СтрокаТЧ.СтавкаНДС = Перечисления.СтавкиНДС.НДС20
					ИЛИ СтрокаТЧ.СтавкаНДС = Перечисления.СтавкиНДС.НДС14
					ИЛИ СтрокаТЧ.СтавкаНДС = Перечисления.СтавкиНДС.НДС7
					ИЛИ СтрокаТЧ.СтавкаНДС = Перечисления.СтавкиНДС.СпецСт8 // ИНАГРО
					Тогда
					
					// приобретение с уплатой НДС
					
					Если ВидОперации = Перечисления.ВидыОперацийРегистрацияВходящегоНалоговогоДокумента.РасчетКорректировкиВозврат
						  ИЛИ ВидОперации = Перечисления.ВидыОперацийРегистрацияВходящегоНалоговогоДокумента.РасчетКорректировкиКорректировка Тогда	
					
						Если СтрокаТЧ.Амортизируется Тогда
							Возврат  СтатьиДеклараций.НДС_НКИзменениеСтоимостиОФ;						
						Иначе
							Возврат  СтатьиДеклараций.НДС_НКИзменениеСтоимости;						
						КонецЕсли;
						
					Иначе	
						
						Если СтрокаТЧ.Амортизируется Тогда
							Возврат  СтатьиДеклараций.НДС_НКПокупкаБезНДСнеВРОФ;						
						Иначе
							Возврат  СтатьиДеклараций.НДС_НКПокупкаСНДСнеВР_;						
						КонецЕсли;
						
					КонецЕсли;
					
				Иначе
					// приобретение без уплаты НДС
					
					Если ВидОперации = Перечисления.ВидыОперацийРегистрацияВходящегоНалоговогоДокумента.РасчетКорректировкиВозврат
						  ИЛИ ВидОперации = Перечисления.ВидыОперацийРегистрацияВходящегоНалоговогоДокумента.РасчетКорректировкиКорректировка Тогда	
					
					    Возврат  СтатьиДеклараций.НДС_НККорректировкаБезНКНеХоз;
						
					Иначе	
						
						Возврат  СтатьиДеклараций.НДС_НКПокупкаБезНДСнеВР_;
						
					КонецЕсли;
					
				КонецЕсли;			
				
			КонецЕсли;
			
		КонецЕсли;		
		
	КонецЕсли;			
	
КонецФункции                    

#Область ПрограммныйИнтерфейс

Процедура ЗаполнитьСчетаУчетаВСтрокеТабЧасти(СтрокаТЧ, СведенияОНоменклатуре) Экспорт

	Если СведенияОНоменклатуре = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если СведенияОНоменклатуре.Свойство("СчетаУчета") Тогда
		// СведенияОНоменклатуре - структура сведений номенклатуры
		СчетаУчета = СведенияОНоменклатуре.СчетаУчета;
	ИначеЕсли СведенияОНоменклатуре.Свойство("СчетУчетаБУ") Тогда
		// СведенияОНоменклатуре - структура счетов учета номенклатуры
		СчетаУчета = СведенияОНоменклатуре;
	Иначе
		Возврат;
	КонецЕсли;
	
	НалоговоеНазначение = СчетаУчета.НалоговоеНазначение;
	Если ЗначениеЗаполнено(НалоговоеНазначение) Тогда
		
		СтрокаТЧ.ДляХозяйственнойДеятельности = НЕ (НалоговоеНазначение.ВидНалоговойДеятельности = Справочники.ВидыНалоговойДеятельности.НеОблагаемая);
		СтрокаТЧ.ДляОперацийОблагаемыхНДС 	  = НЕ (НалоговоеНазначение.ВидДеятельностиНДС = Перечисления.ВидыДеятельностиНДС.Необлагаемая);
		СтрокаТЧ.Амортизируется 	  		  = НалоговоеНазначение.Амортизируется;
		
	КонецЕсли;
	
КонецПроцедуры 

// Производит заполнение документа по данным регистра ОжидаемыйИПодтвержденныйНДСПриобретений
//
Процедура ЗаполнитьПоОстаткам(Объект) Экспорт
	
	Если Объект.ДоговорКонтрагента.СложныйНалоговыйУчет Тогда
		
		ЗаполнитьПоОстаткамСложныйНалоговыйУчет(Объект);

	Иначе
		
		ЗаполнитьПоОстаткамУпрощенныйНалоговыйУчет(Объект);
	
	КонецЕсли;
	
КонецПроцедуры

// Производит заполнение документа по движениям документа-основания по регистру ОжидаемыйИПодтвержденныйНДСПриобретений
//
Процедура ЗаполнитьПоДокументуОснованию(Объект = Неопределено) Экспорт
	Если Объект = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	мВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();	
	
	Если    Объект.ДокументОснование = Неопределено 
		ИЛИ Объект.ДокументОснование.Пустая() Тогда
	
		// нет данных для заполнения
		Возврат;	
	
	КонецЕсли;
	
	ОснованиеАвансовыйОтчет    = (ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.АвансовыйОтчет"));
	ОснованиеСчет		       = (ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.СчетНаОплатуПоставщика"));
	ОснованиеПлатежныйДокумент = ОбщегоНазначенияБП.ЕстьТабЧастьДокумента("РасшифровкаПлатежа", Объект.ДокументОснование.Метаданные());
	
	СложныйНалоговыйУчет = Объект.ДоговорКонтрагента.СложныйНалоговыйУчет;
	
	Если    (ОснованиеПлатежныйДокумент И СложныйНалоговыйУчет)
		ИЛИ ОснованиеАвансовыйОтчет Тогда
		
		// платежные документы
		ВалютаОснования = Объект.ДокументОснование.ВалютаДокумента; 
		Данные = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаОснования, Объект.ДокументОснование.Дата);
		
		ПогрешностиОкругления = Новый Соответствие();
		
		Если ОснованиеАвансовыйОтчет Тогда
		    ТабЧасть = Объект.ДокументОснование.ОплатаПоставщикам;
			ИмяРеквизитаСуммы = "Сумма";
		Иначе	
		 	ТабЧасть = Объект.ДокументОснование.РасшифровкаПлатежа;
			ИмяРеквизитаСуммы = "СуммаПлатежа";
		КонецЕсли;
		
		Для каждого СтрокаОснования Из ТабЧасть Цикл
			
			Если НЕ СтрокаОснования.ДоговорКонтрагента = Объект.ДоговорКонтрагента Тогда
			
				Продолжить;	
			
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Объект.Сделка) И НЕ (СтрокаОснования.Сделка = Объект.Сделка или Объект.Сделка = Объект.ДокументОснование) Тогда
			
				Продолжить;	
			
			КонецЕсли;
			
			Если СтрокаОснования.ЗаТару Тогда
				
				Объект.СуммаВозвратнойТары = Объект.СуммаВозвратнойТары + 
									  МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаОснования[ИмяРеквизитаСуммы],
									  							 ВалютаОснования, мВалютаРегламентированногоУчета,
																 Данные.Курс, 1,
																 Данные.Кратность, 1,
																 ,ПогрешностиОкругления, "СуммаТара");
				
			Иначе	
				
				СтрокаТЧ = Объект.Товары.Добавить();
				СтрокаТЧ.СтавкаНДС 	= СтрокаОснования.СтавкаНДС;
				СтрокаТЧ.СуммаНДС  	= МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаОснования.СуммаНДС,
									  							 ВалютаОснования, мВалютаРегламентированногоУчета,
																 Данные.Курс, 1,
																 Данные.Кратность, 1,
																 ,ПогрешностиОкругления, "СуммаНДС");
																 
																 
				СтрокаТЧ.СуммаВзаиморасчетов = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаОснования[ИмяРеквизитаСуммы],
									  							 ВалютаОснования, мВалютаРегламентированногоУчета,
																 Данные.Курс, 1,
																 Данные.Кратность, 1,
																 ,ПогрешностиОкругления, "Сумма");

				СтрокаТЧ.Сумма 		= СтрокаТЧ.СуммаВзаиморасчетов - СтрокаТЧ.СуммаНДС;
									 
				Если Объект.ВидОперации = Перечисления.ВидыОперацийРегистрацияВходящегоНалоговогоДокумента.РасчетКорректировкиВозврат Тогда
				
					СтрокаТЧ.Сумма 	  = - СтрокаТЧ.Сумма;
					СтрокаТЧ.СуммаНДС = - СтрокаТЧ.СуммаНДС;
					СтрокаТЧ.СуммаВзаиморасчетов = -СтрокаТЧ.СуммаВзаиморасчетов;
					
				КонецЕсли;
				
				СтрокаТЧ.СтатьяДекларацииНДСНалоговыйКредит = ОпределитьСтатьюНалоговойДекларации(Объект.ВидОперации, СтрокаТЧ);
			
			КонецЕсли; 
			
		КонецЦикла; 	
		
	КонецЕсли;
	
	Если ОснованиеСчет Тогда
		
		Запрос = Новый Запрос;
		
		Запрос.Текст = "ВЫБРАТЬ
		               |	СчетНаОплатуПоставщикаТовары.СтавкаНДС КАК СтавкаНДС,
		               |	СчетНаОплатуПоставщикаТовары.СуммаНДС КАК СуммаНДС,
		               |	СчетНаОплатуПоставщикаТовары.Сумма КАК Сумма,
		               |	0 КАК СуммаТара
		               |ИЗ
		               |	Документ.СчетНаОплатуПоставщика.Товары КАК СчетНаОплатуПоставщикаТовары
		               |ГДЕ
		               |	СчетНаОплатуПоставщикаТовары.Ссылка = &Счет
		               |
		               |ОБЪЕДИНИТЬ ВСЕ
		               |
		               |ВЫБРАТЬ
		               |	СчетНаОплатуПоставщикаУслуги.СтавкаНДС,
		               |	СчетНаОплатуПоставщикаУслуги.СуммаНДС,
		               |	СчетНаОплатуПоставщикаУслуги.Сумма,
		               |	0
		               |ИЗ
		               |	Документ.СчетНаОплатуПоставщика.Услуги КАК СчетНаОплатуПоставщикаУслуги
		               |ГДЕ
		               |	СчетНаОплатуПоставщикаУслуги.Ссылка = &Счет
		               |
		               |ОБЪЕДИНИТЬ ВСЕ
		               |
		               |ВЫБРАТЬ
		               |	СчетНаОплатуПоставщикаОборудование.СтавкаНДС,
		               |	СчетНаОплатуПоставщикаОборудование.СуммаНДС,
		               |	СчетНаОплатуПоставщикаОборудование.Сумма,
		               |	0
		               |ИЗ
		               |	Документ.СчетНаОплатуПоставщика.Оборудование КАК СчетНаОплатуПоставщикаОборудование
		               |ГДЕ
		               |	СчетНаОплатуПоставщикаОборудование.Ссылка = &Счет
		               |
		               |ОБЪЕДИНИТЬ ВСЕ
		               |
		               |ВЫБРАТЬ
		               |	СчетНаОплатуПоставщикаОбъектыСтроительства.СтавкаНДС,
		               |	СчетНаОплатуПоставщикаОбъектыСтроительства.СуммаНДС,
		               |	СчетНаОплатуПоставщикаОбъектыСтроительства.Сумма,
		               |	0
		               |ИЗ
		               |	Документ.СчетНаОплатуПоставщика.ОбъектыСтроительства КАК СчетНаОплатуПоставщикаОбъектыСтроительства
		               |ГДЕ
		               |	СчетНаОплатуПоставщикаОбъектыСтроительства.Ссылка = &Счет
		               |
		               |ОБЪЕДИНИТЬ ВСЕ
		               |
		               |ВЫБРАТЬ
		               |	0,
		               |	0,
		               |	0,
		               |	СчетНаОплатуПоставщикаВозвратнаяТара.Сумма
		               |ИЗ
		               |	Документ.СчетНаОплатуПоставщика.ВозвратнаяТара КАК СчетНаОплатуПоставщикаВозвратнаяТара
		               |ГДЕ
		               |	СчетНаОплатуПоставщикаВозвратнаяТара.Ссылка = &Счет
		               |ИТОГИ
		               |	СУММА(СуммаНДС),
		               |	СУММА(Сумма),
		               |	СУММА(СуммаТара)
		               |ПО
		               |	СтавкаНДС";
					   
		Запрос.УстановитьПараметр("Счет", Объект.ДокументОснование);
		
		Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		ВалютаОснования = Объект.ДокументОснование.ВалютаДокумента; 
		Данные = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаОснования, Объект.ДокументОснование.Дата);
		
		ОснованиеУчитыватьНДС 		= УчетнаяПолитика.ПлательщикНДС(Объект.ДокументОснование.Организация, Объект.ДокументОснование.Дата);
		ОснованиеСуммаВключаетНДС 	= Объект.ДокументОснование.СуммаВключаетНДС;
		
		ПогрешностиОкругления = Новый Соответствие();
		
		Пока Выборка.Следующий() Цикл
			
			Если Выборка.СуммаТара > 0 Тогда
				
				Объект.СуммаВозвратнойТары = Объект.СуммаВозвратнойТары + 
									  МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Выборка.СуммаТара,
									  							 ВалютаОснования, мВалютаРегламентированногоУчета,
																 Данные.Курс, 1,
																 Данные.Кратность, 1,
																 ,ПогрешностиОкругления, "СуммаТара");
				
			Иначе	
				
				СтрокаТЧ = Объект.Товары.Добавить();
				СтрокаТЧ.СтавкаНДС 	= Выборка.СтавкаНДС;
				СтрокаТЧ.СуммаНДС  	= МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Выборка.СуммаНДС,
									  							 ВалютаОснования, мВалютаРегламентированногоУчета,
																 Данные.Курс, 1,
																 Данные.Кратность, 1,
																 ,ПогрешностиОкругления, "СуммаНДС");
																 
																 
				ВремСумма = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Выборка.Сумма,
									  							 ВалютаОснования, мВалютаРегламентированногоУчета,
																 Данные.Курс, 1,
																 Данные.Кратность, 1,
																 ,ПогрешностиОкругления, "Сумма");
																 
				Если ОснованиеУчитыватьНДС И НЕ ОснованиеСуммаВключаетНДС Тогда
					СтрокаТЧ.СуммаВзаиморасчетов = ВремСумма + СтрокаТЧ.СуммаНДС;
				Иначе													 
					СтрокаТЧ.СуммаВзаиморасчетов = ВремСумма;
				КонецЕсли;
				
				СтрокаТЧ.Сумма 		= СтрокаТЧ.СуммаВзаиморасчетов - СтрокаТЧ.СуммаНДС;
									 
				Если Объект.ВидОперации = Перечисления.ВидыОперацийРегистрацияВходящегоНалоговогоДокумента.РасчетКорректировкиВозврат Тогда
				
					СтрокаТЧ.Сумма 	  = - СтрокаТЧ.Сумма;
					СтрокаТЧ.СуммаНДС = - СтрокаТЧ.СуммаНДС;
					СтрокаТЧ.СуммаВзаиморасчетов = -СтрокаТЧ.СуммаВзаиморасчетов;
					
				КонецЕсли;
				
				СтрокаТЧ.СтатьяДекларацииНДСНалоговыйКредит = ОпределитьСтатьюНалоговойДекларации(Объект.ВидОперации, СтрокаТЧ);
			
			КонецЕсли; 
			
		КонецЦикла;		
					   
	ИначеЕсли НЕ ОснованиеПлатежныйДокумент
          ИЛИ НЕ СложныйНалоговыйУчет Тогда
		
		Запрос = Новый Запрос;
		
		Запрос.УстановитьПараметр("ДокументОснование", Объект.ДокументОснование);
		Запрос.УстановитьПараметр("ДоговорКонтрагента", Объект.ДоговорКонтрагента);
		Запрос.УстановитьПараметр("Сделка", 			ОпределитьСделкуЛокально(Объект));

		
		Если Объект.ВидОперации = Перечисления.ВидыОперацийРегистрацияВходящегоНалоговогоДокумента.РасчетКорректировкиВозврат Тогда
			Запрос.УстановитьПараметр("ЗнакСуммы", -1);
		Иначе
			Запрос.УстановитьПараметр("ЗнакСуммы",  1);
		КонецЕсли;
		
		Запрос.УстановитьПараметр("ОблагаемыйВидДеятельностиНДС", Перечисления.ВидыДеятельностиНДС.Облагаемая);
		
		Запрос.Текст =
		"ВЫБРАТЬ Разрешенные
		|	ОжидаемыйИПодтвержденныйНДСПриобретений.СтавкаНДС,
		|	ОжидаемыйИПодтвержденныйНДСПриобретений.ДляХозяйственнойДеятельности,
		|	ВЫБОР
		|		КОГДА ОжидаемыйИПодтвержденныйНДСПриобретений.ВидДеятельностиНДС = &ОблагаемыйВидДеятельностиНДС
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ДляОперацийОблагаемыхНДС,
		|  ОжидаемыйИПодтвержденныйНДСПриобретений.ВидДеятельностиНДС КАК ВидДеятельностиНДС,
		|	Амортизируется КАК Амортизируется,
		|	ОжидаемыйИПодтвержденныйНДСПриобретений.ВозвратнаяТара,
		|	&ЗнакСуммы * ОжидаемыйИПодтвержденныйНДСПриобретений.СуммаНДС КАК СуммаНДС,
		|	&ЗнакСуммы * ОжидаемыйИПодтвержденныйНДСПриобретений.СуммаНДСПропорционально КАК СуммаНДСПропорционально,
		|	&ЗнакСуммы * ОжидаемыйИПодтвержденныйНДСПриобретений.БазаНДС КАК Сумма
		|ИЗ
		|	РегистрНакопления.ОжидаемыйИПодтвержденныйНДСПриобретений КАК ОжидаемыйИПодтвержденныйНДСПриобретений
		|ГДЕ
		|	  ОжидаемыйИПодтвержденныйНДСПриобретений.Регистратор = &ДокументОснование
		|	И ОжидаемыйИПодтвержденныйНДСПриобретений.ДоговорКонтрагента = &ДоговорКонтрагента
		|	И ОжидаемыйИПодтвержденныйНДСПриобретений.Сделка 			 = &Сделка
		|";
		
		// сохраним имеющиеся строки в табличной части
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
		
			Если Выборка.ВозвратнаяТара = Истина Тогда
				
				Объект.СуммаВозвратнойТары = Объект.СуммаВозвратнойТары + Выборка.Сумма;
				
			Иначе
				
				СтрокаТоваров = Объект.Товары.Добавить();
				СтрокаТоваров.СтавкаНДС 					= Выборка.СтавкаНДС;
				СтрокаТоваров.ДляХозяйственнойДеятельности 	= Выборка.ДляХозяйственнойДеятельности;
				СтрокаТоваров.ДляОперацийОблагаемыхНДС 		= Выборка.ДляОперацийОблагаемыхНДС;
				СтрокаТоваров.Амортизируется 				= Выборка.Амортизируется;
				СтрокаТоваров.СуммаНДС 						= Выборка.СуммаНДС;
				СтрокаТоваров.Сумма 						= Выборка.Сумма;
				СтрокаТоваров.СуммаВзаиморасчетов			= Выборка.Сумма + Выборка.СуммаНДС;
				Если Выборка.ВидДеятельностиНДС = Перечисления.ВидыДеятельностиНДС.ПропорциональноОблагаемая Тогда
					
					СтрокаТоваров.ПропорциональныйНДС	= Истина;
					
					Если  Выборка.СуммаНДСПропорционально <> 0
						И Выборка.СуммаНДС <> 0 Тогда
						
						//	Здесь нужно разбить строку на две - одна по включаемому НДС в кредит, вторую на остаток (не вкл. в кредит)
						Строка2 = Объект.Товары.Добавить();
						ЗаполнитьЗначенияСвойств(Строка2, СтрокаТоваров);
						
						СтрокаТоваров.ДляОперацийОблагаемыхНДС = Истина;
						Строка2.ДляОперацийОблагаемыхНДС       = Ложь;
						
						СтрокаТоваров.СуммаНДС  = Выборка.СуммаНДСПропорционально;
						
						// если док. основание - прошлого года - то сумма пропорционального НДС по документу должна быть пересчитана по коэффициенту прошлого года!
						
						Строка2.СуммаНДС = Строка2.СуммаНДС - СтрокаТоваров.СуммаНДС;
						
						Если СтрокаТоваров.Сумма <> 0 Тогда
							СтрокаТоваров.Сумма  = СтрокаТоваров.Сумма *  (Выборка.СуммаНДСПропорционально/Выборка.СуммаНДС);	
						КонецЕсли;
						Строка2.Сумма = Строка2.Сумма - СтрокаТоваров.Сумма;
						
						Строка2.СуммаВзаиморасчетов = Строка2.Сумма + Строка2.СуммаНДС;

						Строка2.СтатьяДекларацииНДСНалоговыйКредит	= ОпределитьСтатьюНалоговойДекларации(Объект.ВидОперации, Строка2);
						
						СтрокаТоваров.СуммаВзаиморасчетов			= СтрокаТоваров.Сумма + СтрокаТоваров.СуммаНДС;
						
					Иначе			
						
						СтрокаТоваров.ДляОперацийОблагаемыхНДС  = Ложь;

					КонецЕсли;
					
				КонецЕсли;
				
				СтрокаТоваров.СтатьяДекларацииНДСНалоговыйКредит	= ОпределитьСтатьюНалоговойДекларации(Объект.ВидОперации, СтрокаТоваров);
				
			КонецЕсли; 
		
		КонецЦикла; 
		
	КонецЕсли; 		
	
КонецПроцедуры

// Производит заполнение документа по данным регистра ОжидаемыйИПодтвержденныйНДСПриобретений
// с учетом движений документа-основания по тому же регистру, либо (для платежных документов)
// данных расшифровки платежа.
//
Процедура ЗаполнитьПоДокументуОснованиюСУчетомОстатков(Объект = Неопределено) Экспорт
	
	Если Объект = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ОснованиеПлатежныйДокумент = (ОбщегоНазначенияБП.ЕстьТабЧастьДокумента("РасшифровкаПлатежа", Объект.ДокументОснование.Метаданные()));
	ОснованиеСчет		       = (ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.СчетНаОплатуПоставщика"));	
	
	// Сохраним данные табличной части
	ТоварыДоЗаполнения		= Объект.Товары.Выгрузить();
	СуммаТарыДоЗаполнения 	= Объект.СуммаВозвратнойТары;
	
	Объект.Товары.Очистить();
	Объект.СуммаВозвратнойТары = 0;
	
	//Получим данные по документу
	ЗаполнитьПоДокументуОснованию(Объект);
	ТоварыПоДокументу 		= Объект.Товары.Выгрузить();
	СуммаТарыПоДокументу 	= Объект.СуммаВозвратнойТары;
	
	Объект.Товары.Очистить();
	Объект.СуммаВозвратнойТары = 0;
	
	//Получим остатки по договору
	ЗаполнитьПоОстаткам(Объект);
	ТоварыОстатки	 = Объект.Товары.Выгрузить();
	СуммаТарыОстатки = Объект.СуммаВозвратнойТары;
	
	Объект.Товары.Очистить();
	Объект.СуммаВозвратнойТары = 0;
	
	// ТОВАРЫ
	// сначала восстановим данные до заполнения.
	Объект.Товары.Загрузить(ТоварыДоЗаполнения);
	
	
	// свернем таблицы по ключевым измерениям                                                                  
	ТоварыПоДокументу.Свернуть("СтавкаНДС,ДляХозяйственнойДеятельности,ДляОперацийОблагаемыхНДС,Амортизируется,ПропорциональныйНДС", "Сумма, СуммаНДС");	
	ТоварыОстатки.Свернуть("СтавкаНДС,ДляХозяйственнойДеятельности,ДляОперацийОблагаемыхНДС,Амортизируется,ПропорциональныйНДС", "Сумма, СуммаНДС,СуммаВзаиморасчетов");	

	Для каждого СтрокаДокумент Из ТоварыПоДокументу Цикл
		
		//Если ОснованиеПлатежныйДокумент ИЛИ ОснованиеСчет Тогда
		Если     ОснованиеСчет
			ИЛИ (ОснованиеПлатежныйДокумент И Объект.ДоговорКонтрагента.СложныйНалоговыйУчет) Тогда
			СтрокаОстатков = ТоварыОстатки.НайтиСтроки(Новый Структура("СтавкаНДС",  СтрокаДокумент.СтавкаНДС));
		Иначе
			СтрокаОстатков = ТоварыОстатки.НайтиСтроки(Новый Структура("СтавкаНДС,
																		|ДляХозяйственнойДеятельности,
																		|ДляОперацийОблагаемыхНДС,
																		|Амортизируется
																		|,ПропорциональныйНДС", 
																		СтрокаДокумент.СтавкаНДС,
																		СтрокаДокумент.ДляХозяйственнойДеятельности,
																		СтрокаДокумент.ДляОперацийОблагаемыхНДС,
																		СтрокаДокумент.Амортизируется
																		,СтрокаДокумент.ПропорциональныйНДС));
		КонецЕсли; 
		
		Если СтрокаОстатков.Количество()>0 Тогда
			
			СтрокаОстатков = СтрокаОстатков[0];
			
			СтрокаТЧ = Объект.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТЧ, СтрокаОстатков);
			
			Если СтрокаДокумент.СуммаНДС < 0 Тогда
				//возврат
				СтрокаТЧ.СуммаНДС = Макс(СтрокаОстатков.СуммаНДС, СтрокаДокумент.СуммаНДС);
				СтрокаТЧ.Сумма 	  = Макс(СтрокаОстатков.Сумма, 	 СтрокаДокумент.Сумма);
			Иначе	
				СтрокаТЧ.СуммаНДС = МИН(СтрокаОстатков.СуммаНДС, СтрокаДокумент.СуммаНДС);
				СтрокаТЧ.Сумма 	  = МИН(СтрокаОстатков.Сумма, 	 СтрокаДокумент.Сумма);
			КонецЕсли;
			СтрокаТЧ.СуммаВзаиморасчетов = СтрокаТЧ.Сумма + СтрокаТЧ.СуммаНДС;
			
			СтрокаТЧ.СтатьяДекларацииНДСНалоговыйКредит = ОпределитьСтатьюНалоговойДекларации(Объект.ВидОперации, СтрокаТЧ);
			
			// уменьшим суммы для дальнешего учета аванса
			СтрокаДокумент.Сумма 	= СтрокаДокумент.Сумма - СтрокаТЧ.Сумма; 
			СтрокаДокумент.СуммаНДС = СтрокаДокумент.СуммаНДС - СтрокаТЧ.СуммаНДС; 
			
		КонецЕсли;
	
	КонецЦикла;
	
	// оставим строки из данных документа, которые могут быть добавлены учитывая аванс
	ПустыеСтроки = ТоварыПоДокументу.НайтиСтроки(Новый Структура("Сумма",0));
	Для каждого ПустяСтрока ИЗ ПустыеСтроки  Цикл
		ТоварыПоДокументу.Удалить(ПустяСтрока);	
	КонецЦикла;
	
	СуммаПоДокументу = ТоварыПоДокументу.Итог("Сумма") + ТоварыПоДокументу.Итог("СуммаНДС");
	
	//Перенесем данные из документа учитывая остатки
	// получим сумму аванса, которую можно закрыть любыми ставками по данным отргузки.
	СуммаАванса = ТоварыОстатки.НайтиСтроки(Новый Структура("СтавкаНДС", Перечисления.СтавкиНДС.ПустаяСсылка()));
	Если СуммаАванса.Количество() = 0 Тогда
		СуммаАванса = 0;	
	Иначе
		СуммаАванса = СуммаАванса[0].СуммаВзаиморасчетов;
	КонецЕсли;
	
	Если СуммаПоДокументу >= 0 Тогда
		СуммаКРаспределению = Мин(СуммаАванса, СуммаПоДокументу);
	Иначе
		СуммаКРаспределению = Макс(СуммаАванса, СуммаПоДокументу);		
	КонецЕсли;
	
	Если СуммаКРаспределению <> 0 И СуммаАванса <> 0 И СуммаПоДокументу <> 0 Тогда
	
		Коэфф = СуммаКРаспределению / СуммаПоДокументу;
		
		Погрешность = 0;
		
		Для каждого СтрокаДокумент Из ТоварыПоДокументу Цикл
		
			СтрокаТЧ = Объект.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТЧ, СтрокаДокумент);
			
			СтрокаТЧ.Сумма 	  = ОбщегоНазначенияРед12.ОкруглитьСУчетомПогрешности(Коэфф*СтрокаТЧ.Сумма, 2, Погрешность);
			СтрокаТЧ.СуммаНДС = ОбщегоНазначенияРед12.ОкруглитьСУчетомПогрешности(Коэфф*СтрокаТЧ.СуммаНДС, 2, Погрешность);
			СтрокаТЧ.СуммаВзаиморасчетов = СтрокаТЧ.Сумма + СтрокаТЧ.СуммаНДС; 

			СтрокаТЧ.СтатьяДекларацииНДСНалоговыйКредит = ОпределитьСтатьюНалоговойДекларации(Объект.ВидОперации, СтрокаТЧ);
		
		КонецЦикла; 
		
	КонецЕсли;
	
	// ВОЗВРАТНАЯ ТАРА
	Объект.СуммаВозвратнойТары = СуммаТарыДоЗаполнения + ?(СуммаТарыПоДокументу > 0, Мин(СуммаТарыПоДокументу, СуммаТарыОстатки), Макс(СуммаТарыПоДокументу, СуммаТарыОстатки));

КонецПроцедуры

// Производит заполнение табличной части документа по услугам, полученным от нерезидента(на территории Украины)
//
Процедура ЗаполнитьПоРаботамОтНерезидента(Объект = Неопределено) Экспорт
	
	Если Объект = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	мВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();	
	
	ПогрешностиОкругления = Новый Соответствие;
	ВидДокументаОснования = Объект.ДокументОснование.Метаданные().Имя;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", Объект.ДокументОснование);
	Запрос.УстановитьПараметр("ОблагаемыйВидДеятельностиНДС", Перечисления.ВидыДеятельностиНДС.Облагаемая);
	Запрос.УстановитьПараметр("НеоблагаемыйВидНалоговойДеятельности",  Справочники.ВидыНалоговойДеятельности.НеОблагаемая);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Основание.Номенклатура,
	|	Основание.Номенклатура.СтавкаНДС КАК СтавкаНДС,
	|	Основание.Количество,
	|	Основание.Сумма,
	|	ВЫРАЗИТЬ(Основание.Содержание КАК СТРОКА(1000)) КАК Содержание,                                
	|	ВЫБОР
	|		КОГДА Основание.НалоговоеНазначение.ВидДеятельностиНДС = &ОблагаемыйВидДеятельностиНДС
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ДляОперацийОблагаемыхНДС,
	|	ВЫБОР
	|		КОГДА Основание.НалоговоеНазначение.ВидНалоговойДеятельности = &НеоблагаемыйВидНалоговойДеятельности
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА 
	|	КОНЕЦ КАК ДляХозяйственнойДеятельности,
	|	Основание.НалоговоеНазначение.Амортизируется КАК Амортизируется,
	|	Основание.Ссылка.ВалютаДокумента КАК ВалютаДокумента,
	|	ВЫБОР КОГДА Основание.Ссылка.ВалютаДокумента = Основание.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов ТОГДА
	|		Основание.Ссылка.КурсВзаиморасчетов
	|	ИНАЧЕ
	|		1
	|	КОНЕЦ                                           КАК КурсДокумента,
	|	ВЫБОР КОГДА Основание.Ссылка.ВалютаДокумента = Основание.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов ТОГДА
	|		Основание.Ссылка.КратностьВзаиморасчетов
	|	ИНАЧЕ
	|		1
	|	КОНЕЦ                                           КАК КратностьДокумента
	|ИЗ
	|	Документ."+ВидДокументаОснования+".Услуги КАК Основание
	|
	|ГДЕ
	|	Основание.Ссылка = &ДокументОснование";
	
	Запрос.Текст = ТекстЗапроса;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НоваяСтрока = Объект.Товары.Добавить();
		НоваяСтрока.НаименованиеТовара         = Выборка.Содержание;
		НоваяСтрока.Количество                 = Выборка.Количество;
		
		НоваяСтрока.СтавкаНДС = Выборка.СтавкаНДС;

		// расчет сумм будем вести по алгоритму расчета гривневых сумм из налоговой накладной - для борьбы с ошибками округления.
		// при поступлении НДС указываться не должен. В любом случае налог насчитывается сверху на сумму услуг. 
		СуммаСНДСВал  = УчетНДСКлиентСервер.ПересчитатьЦенуПриИзмененииФлаговНалогов(Выборка.Сумма, Ложь, Истина, УчетНДС.ПолучитьСтавкуНДС(НоваяСтрока.СтавкаНДС));
		СуммаСНДСВал  = Окр(СуммаСНДСВал,2);
		СуммаСНДСРегл = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СуммаСНДСВал, Выборка.ВалютаДокумента, мВалютаРегламентированногоУчета,
												   Выборка.КурсДокумента, 1,
										   		   Выборка.КратностьДокумента, 1,
												   , ПогрешностиОкругления, "СуммаСНДСРегл");
		НоваяСтрока.СуммаВзаиморасчетов = СуммаСНДСРегл;
		НоваяСтрока.СуммаНДС = УчетНДСКлиентСервер.РассчитатьСуммуНДСсУчетомПогрешности(СуммаСНДСРегл, Истина, Истина, НоваяСтрока.СтавкаНДС, ПогрешностиОкругления);
		НоваяСтрока.Сумма = НоваяСтрока.СуммаВзаиморасчетов - НоваяСтрока.СуммаНДС; 
				
		НоваяСтрока.Цена = 	НоваяСтрока.Сумма / ?(НоваяСтрока.Количество = 0, 1, НоваяСтрока.Количество);
																			
		НоваяСтрока.ДляХозяйственнойДеятельности    = Выборка.ДляХозяйственнойДеятельности;
		НоваяСтрока.ДляОперацийОблагаемыхНДС    	= Выборка.ДляОперацийОблагаемыхНДС;
		НоваяСтрока.Амортизируется    				= Выборка.Амортизируется;
        НоваяСтрока.СтатьяДекларацииНДСНалоговыйКредит = ОпределитьСтатьюНалоговойДекларации(Объект.ВидОперации, НоваяСтрока);
		
	КонецЦикла;	

КонецПроцедуры

// Производит заполнение табличной части документа по услугам комиссии, оказанным нерезидентом
// (считаются полученными на территории Украины)
//
Процедура ЗаполнитьПоУслугамКомиссииОтНерезидента(Объект = Неопределено) Экспорт
	
	Если Объект = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	мВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();	
	
	ПогрешностиОкругления = Новый Соответствие;
	ВидДокументаОснования = Объект.ДокументОснование.Метаданные().Имя;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", Объект.ДокументОснование);
	Запрос.УстановитьПараметр("ОблагаемыйВидДеятельностиНДС", Перечисления.ВидыДеятельностиНДС.Облагаемая);
	Запрос.УстановитьПараметр("НеоблагаемыйВидНалоговойДеятельности",  Справочники.ВидыНалоговойДеятельности.НеОблагаемая);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Основание.Номенклатура,
	|	""Продажа "" + ВЫРАЗИТЬ(Основание.Номенклатура.Наименование КАК СТРОКА(100)) КАК Содержание,
	|	1 КАК Количество,
	|	Основание.СуммаВознаграждения КАК Сумма,
	|	ВЫБОР
	|		КОГДА Основание.Ссылка.НалоговоеНазначение.ВидДеятельностиНДС = &ОблагаемыйВидДеятельностиНДС
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ДляОперацийОблагаемыхНДС,
	|	ВЫБОР
	|		КОГДА Основание.Ссылка.НалоговоеНазначение.ВидНалоговойДеятельности = &НеоблагаемыйВидНалоговойДеятельности
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА 
	|	КОНЕЦ КАК ДляХозяйственнойДеятельности,
	|	Основание.Ссылка.НалоговоеНазначение.Амортизируется КАК Амортизируется,
	|	Основание.Ссылка.ВалютаДокумента КАК ВалютаДокумента,
	|	ВЫБОР КОГДА Основание.Ссылка.ВалютаДокумента = Основание.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов ТОГДА
	|		Основание.Ссылка.КурсВзаиморасчетов
	|	ИНАЧЕ
	|		1
	|	КОНЕЦ                                           КАК КурсДокумента,
	|	ВЫБОР КОГДА Основание.Ссылка.ВалютаДокумента = Основание.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов ТОГДА
	|		Основание.Ссылка.КратностьВзаиморасчетов
	|	ИНАЧЕ
	|		1
	|	КОНЕЦ                                           КАК КратностьДокумента
	|ИЗ
	|	Документ."+ВидДокументаОснования+".Товары КАК Основание
	|
	|ГДЕ
	|	Основание.Ссылка = &ДокументОснование";
	
	Запрос.Текст = ТекстЗапроса;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НоваяСтрока = Объект.Товары.Добавить();
		НоваяСтрока.НаименованиеТовара         = Выборка.Содержание;
		НоваяСтрока.Количество                 = Выборка.Количество;
		
		НоваяСтрока.СтавкаНДС = Перечисления.СтавкиНДС.НДС20;

		// расчет сумм будем вести по алгоритму расчета гривневых сумм из налоговой накладной - для борьбы с ошибками округления.
		// при поступлении НДС указываться не должен. В любом случае налог насчитывается сверху на сумму услуг. 
		СуммаСНДСВал  = УчетНДСКлиентСервер.ПересчитатьЦенуПриИзмененииФлаговНалогов(Выборка.Сумма, Ложь, Истина, УчетНДС.ПолучитьСтавкуНДС(НоваяСтрока.СтавкаНДС));
		СуммаСНДСВал  = Окр(СуммаСНДСВал,2);
		СуммаСНДСРегл = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СуммаСНДСВал, Выборка.ВалютаДокумента, мВалютаРегламентированногоУчета,
												   Выборка.КурсДокумента, 1,
										   		   Выборка.КратностьДокумента, 1,
												   , ПогрешностиОкругления, "СуммаСНДСРегл");
		НоваяСтрока.СуммаВзаиморасчетов = СуммаСНДСРегл;
		НоваяСтрока.СуммаНДС = УчетНДСКлиентСервер.РассчитатьСуммуНДСсУчетомПогрешности(СуммаСНДСРегл, Истина, Истина, НоваяСтрока.СтавкаНДС, ПогрешностиОкругления);
		НоваяСтрока.Сумма = НоваяСтрока.СуммаВзаиморасчетов - НоваяСтрока.СуммаНДС; 
				
		НоваяСтрока.Цена = 	НоваяСтрока.Сумма / ?(НоваяСтрока.Количество = 0, 1, НоваяСтрока.Количество);
																			
		НоваяСтрока.ДляХозяйственнойДеятельности    = Выборка.ДляХозяйственнойДеятельности;
		НоваяСтрока.ДляОперацийОблагаемыхНДС    	= Выборка.ДляОперацийОблагаемыхНДС;
		НоваяСтрока.Амортизируется			    	= Выборка.Амортизируется;
		НоваяСтрока.СтатьяДекларацииНДСНалоговыйКредит = ОпределитьСтатьюНалоговойДекларации(Объект.ВидОперации, НоваяСтрока);
		
	КонецЦикла;	

КонецПроцедуры

// копия общей процедуры НалоговыйУчет.ОпределитьСделкуНалоговыйУчет(). С одним отличием - Упрощ. нал. учет по расчетным документом в 
// качестве сделки всегда возвращает указанную в документе сделку
// 
Функция ОпределитьСделкуЛокально(Объект) Экспорт

	Если Объект.ДоговорКонтрагента.ВедениеВзаиморасчетовНУ = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом Тогда		
		
		Возврат Неопределено;

	Иначе// по расчетным документам
			
		Возврат Объект.Сделка;
		
	КонецЕсли;
   
КонецФункции // УправлениеВзаиморасчетами.ОпределитьДокументРасчетовСКонтрагентом()

Процедура ЗаполнитьСчетаУчетаРасчетов(Объект) Экспорт

	СчетаУчета   	 	= БухгалтерскийУчетРасчетовСКонтрагентами.ПолучитьСчетаРасчетовСКонтрагентом(Объект.Организация, Объект.Контрагент, Объект.ДоговорКонтрагента);
	Объект.СчетУчетаНДС = СчетаУчета.СчетУчетаНДСПриобретений;

КонецПроцедуры

// В случае, когда документ-основание является документом оплаты или Авансовым отчетом (то есть документом,
// в которм могут быть указаны несколько Договоров/сделок) - возвращает один из договоров/сделку.
// Также во входящем параметре ТабДоговора возвращает полную таблицу договоров/сделок
// Параметры
//   Основание - Документ основание
//	 ТабДоговора - Полная таблица договоров/сделок
// Возвращаемое значение:
//  Структура 
//		<СправочникСсылка.ДоговорыКонтрагентов>   – выбранный/определенный договор
//		<ДокументСсылка>   						  – выбранная сделка
//
Функция ОпределитьДоговорСделку(Основание, ТабДоговора) Экспорт	
	
	Перем ПредпочтительныйДоговорСделка;
	
	ПустойДоговорСделка = Новый Структура("ДоговорКонтрагента,Сделка");
	
	Если Основание = Неопределено Тогда
		
		Возврат ПустойДоговорСделка;
		
	КонецЕсли;	
	
	МетаданныеДокумента = Основание.Метаданные();
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.АвансовыйОтчет") Тогда
		
		Запрос = Новый Запрос();
		Запрос.Текст = "ВЫБРАТЬ
		                |	АвансовыйОтчетВозвратнаяТара.ДоговорКонтрагента,
		                |	АвансовыйОтчетВозвратнаяТара.Контрагент КАК Контрагент,
						|	АвансовыйОтчетВозвратнаяТара.Сделка КАК Сделка
		                |ИЗ
		                |	Документ.АвансовыйОтчет.ВозвратнаяТара КАК АвансовыйОтчетВозвратнаяТара
		                |ГДЕ
		                |	 АвансовыйОтчетВозвратнаяТара.Ссылка = &Ссылка
		                |	 И НЕ АвансовыйОтчетВозвратнаяТара.ДоговорКонтрагента = &ПустойДоговор
		                |
		                |ОБЪЕДИНИТЬ
		                |
		                |ВЫБРАТЬ
		                |	АвансовыйОтчетОплатаПоставщикам.ДоговорКонтрагента,
		                |	АвансовыйОтчетОплатаПоставщикам.Контрагент,
						|	АвансовыйОтчетОплатаПоставщикам.Сделка
		                |ИЗ
		                |	Документ.АвансовыйОтчет.ОплатаПоставщикам КАК АвансовыйОтчетОплатаПоставщикам
		                |ГДЕ
		                |	АвансовыйОтчетОплатаПоставщикам.Ссылка = &Ссылка
		                |	И НЕ АвансовыйОтчетОплатаПоставщикам.ДоговорКонтрагента = &ПустойДоговор
		                |
		                |ОБЪЕДИНИТЬ
		                |
		                |ВЫБРАТЬ
		                |	АвансовыйОтчетПрочее.ДоговорКонтрагента,
		                |	АвансовыйОтчетПрочее.Контрагент,
						|	АвансовыйОтчетПрочее.Сделка
		                |ИЗ
		                |	Документ.АвансовыйОтчет.Прочее КАК АвансовыйОтчетПрочее
		                |ГДЕ
		                |	АвансовыйОтчетПрочее.Ссылка = &Ссылка
		                |	И НЕ АвансовыйОтчетПрочее.ДоговорКонтрагента = &ПустойДоговор
		                |
		                |ОБЪЕДИНИТЬ
		                |
		                |ВЫБРАТЬ
		                |	АвансовыйОтчетТовары.ДоговорКонтрагента,
		                |	АвансовыйОтчетТовары.Контрагент,
						|	АвансовыйОтчетТовары.Сделка
		                |ИЗ
		                |	Документ.АвансовыйОтчет.Товары КАК АвансовыйОтчетТовары
		                |ГДЕ
		                |	 АвансовыйОтчетТовары.Ссылка = &Ссылка
		                |	 И НЕ АвансовыйОтчетТовары.ДоговорКонтрагента = &ПустойДоговор
		                |
		                |ОБЪЕДИНИТЬ
		                |
		                |ВЫБРАТЬ
		                |	РегистрНДС.ДоговорКонтрагента,
		                |	РегистрНДС.ДоговорКонтрагента.Владелец,
						|	РегистрНДС.Сделка
		                |ИЗ
		                |	РегистрНакопления.ОжидаемыйИПодтвержденныйНДСПриобретений КАК РегистрНДС
		                |ГДЕ
		                |	    РегистрНДС.Регистратор = &Ссылка
						|  И НЕ РегистрНДС.ДоговорКонтрагента.СложныйНалоговыйУчет
						|";
						
		Запрос.УстановитьПараметр("Ссылка", Основание);
		Запрос.УстановитьПараметр("ПустойДоговор", Справочники.ДоговорыКонтрагентов.ПустаяСсылка());
		ТабДоговора = Запрос.Выполнить().Выгрузить();
		
		Если ТабДоговора.Количество() = 0 Тогда
			
			Возврат ПустойДоговорСделка;
			
		КонецЕсли;
		
		// первый указанный в документе договор
		ПредпочтительныйДоговорСделка = Новый Структура("ДоговорКонтрагента, Сделка", ТабДоговора[0].ДоговорКонтрагента, ТабДоговора[0].Сделка);
		
		ТабДоговора.Свернуть("Контрагент, ДоговорКонтрагента, Сделка", "");
		ТабДоговора.Сортировать("Контрагент, ДоговорКонтрагента, Сделка");
		
	ИначеЕсли ОбщегоНазначенияБП.ЕстьТабЧастьДокумента("РасшифровкаПлатежа", МетаданныеДокумента) Тогда
		
		Запрос = Новый Запрос();
		Запрос.Текст = "ВЫБРАТЬ
		                |	ПлатежныйДокумент.ДоговорКонтрагента,
						|	ПлатежныйДокумент.Сделка
		                |ИЗ
		                |	Документ."+ МетаданныеДокумента.Имя +".РасшифровкаПлатежа КАК ПлатежныйДокумент
		                |ГДЕ
		                |	ПлатежныйДокумент.Ссылка = &Ссылка
						|
						|ОБЪЕДИНИТЬ 
						|
						|ВЫБРАТЬ
		                |	РегистрНДС.ДоговорКонтрагента,
						|	РегистрНДС.Сделка
		                |ИЗ
		                |	РегистрНакопления.ОжидаемыйИПодтвержденныйНДСПриобретений КАК РегистрНДС
		                |ГДЕ
		                |	    РегистрНДС.Регистратор = &Ссылка
						|  И НЕ РегистрНДС.ДоговорКонтрагента.СложныйНалоговыйУчет";
						
		Запрос.УстановитьПараметр("Ссылка", Основание);
		ТабДоговора = Запрос.Выполнить().Выгрузить();
		
		Если ТабДоговора.Количество() = 0 Тогда
			
			Возврат ПустойДоговорСделка;
			
		КонецЕсли;
		
		// первый указанный в документе договор
		ПредпочтительныйДоговорСделка = Новый Структура("ДоговорКонтрагента, Сделка", ТабДоговора[0].ДоговорКонтрагента, ТабДоговора[0].Сделка);
		
		ТабДоговора.Свернуть("ДоговорКонтрагента,Сделка", "");		
		ТабДоговора.Сортировать("ДоговорКонтрагента,Сделка");
		
	ИначеЕсли ОбщегоНазначенияБП.ЕстьТабЧастьДокумента("СуммыДолга", МетаданныеДокумента) Тогда
		
		Запрос = Новый Запрос();
		Запрос.Текст = "ВЫБРАТЬ
		                |	КорректировкаДолга.ДоговорКонтрагента,
						|	КорректировкаДолга.Сделка
		                |ИЗ
		                |	Документ."+ МетаданныеДокумента.Имя +".СуммыДолга КАК КорректировкаДолга
		                |ГДЕ
		                |	КорректировкаДолга.Ссылка = &Ссылка
						|
						|ОБЪЕДИНИТЬ 
						|
						|ВЫБРАТЬ
		                |	РегистрНДС.ДоговорКонтрагента,
						|	РегистрНДС.Сделка
		                |ИЗ
		                |	РегистрНакопления.ОжидаемыйИПодтвержденныйНДСПриобретений КАК РегистрНДС
		                |ГДЕ
		                |	    РегистрНДС.Регистратор = &Ссылка
						|  И НЕ РегистрНДС.ДоговорКонтрагента.СложныйНалоговыйУчет";
						
		Запрос.УстановитьПараметр("Ссылка", Основание);
		ТабДоговора = Запрос.Выполнить().Выгрузить();
		
		Если ТабДоговора.Количество() = 0 Тогда
			
			Возврат ПустойДоговорСделка;
			
		КонецЕсли;
		
		// первый указанный в документе договор
		ПредпочтительныйДоговорСделка = Новый Структура("ДоговорКонтрагента, Сделка", ТабДоговора[0].ДоговорКонтрагента, ТабДоговора[0].Сделка);
		
		ТабДоговора.Свернуть("ДоговорКонтрагента,Сделка", "");		
		ТабДоговора.Сортировать("ДоговорКонтрагента,Сделка");
		
	
	ИначеЕсли ОбщегоНазначенияБП.ЕстьРеквизитДокумента("ДоговорКонтрагента",  МетаданныеДокумента) Тогда
		
		ПараметрыДокументаОснования = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Основание, 
				"ДоговорКонтрагента,ДоговорКонтрагента.ВедениеВзаиморасчетовНУ,Проведен");
				
		ПредпочтительныйДоговорСделка = Новый Структура("ДоговорКонтрагента, Сделка", ПараметрыДокументаОснования.ДоговорКонтрагента, Неопределено);
		
		Если  ПараметрыДокументаОснования.ДоговорКонтрагентаВедениеВзаиморасчетовНУ = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоРасчетнымДокументам
			И ТипЗнч(Основание) = Тип("ДокументСсылка.СчетНаОплатуПоставщика") Тогда		
			
			// сам документ и будет сделкой
			ПредпочтительныйДоговорСделка.Вставить("Сделка", Основание);	
			
			Возврат ПредпочтительныйДоговорСделка;

		ИначеЕсли ОбщегоНазначенияБП.ЕстьРеквизитДокумента("Сделка",  			  МетаданныеДокумента)
			  ИЛИ ОбщегоНазначенияБП.ЕстьРеквизитДокумента("СделкаПоПриобретению",  МетаданныеДокумента) Тогда
			  
			ИмяРеквизитаСделка = ?(ОбщегоНазначенияБП.ЕстьРеквизитДокумента("СделкаПоПриобретению",  МетаданныеДокумента), 
								   "СделкаПоПриобретению", 
								   "Сделка");
								   
			Если ПараметрыДокументаОснования.ДоговорКонтрагентаВедениеВзаиморасчетовНУ = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоРасчетнымДокументам Тогда
				  
				  ПредпочтительныйДоговорСделка.Вставить("Сделка", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Основание, ИмяРеквизитаСделка));	 					   		
				  
				  Если ПараметрыДокументаОснования.Проведен Тогда
						Запрос = Новый Запрос();
						Запрос.Текст = "ВЫБРАТЬ
						                |	РегистрНДС.ДоговорКонтрагента,
										|	РегистрНДС.Сделка
						                |ИЗ
						                |	РегистрНакопления.ОжидаемыйИПодтвержденныйНДСПриобретений КАК РегистрНДС
						                |ГДЕ
						                |	РегистрНДС.Регистратор = &Ссылка";
										
						Запрос.УстановитьПараметр("Ссылка", Основание);
						ТабДоговора = Запрос.Выполнить().Выгрузить();
						
						Если ТабДоговора.Количество() = 0 Тогда
							// это очень странно
							Возврат ПредпочтительныйДоговорСделка;
							
						КонецЕсли;
						
						// первый указанный в документе договор
						ПредпочтительныйДоговорСделка = Новый Структура("ДоговорКонтрагента, Сделка", ТабДоговора[0].ДоговорКонтрагента, ТабДоговора[0].Сделка);
						
						ТабДоговора.Свернуть("ДоговорКонтрагента,Сделка", "");		
						ТабДоговора.Сортировать("ДоговорКонтрагента,Сделка");
					  
				  КонецЕсли;
			Иначе	  
				
				Возврат ПредпочтительныйДоговорСделка;
			
			КонецЕсли;
			
		Иначе
			
			Возврат ПредпочтительныйДоговорСделка;
			
		КонецЕсли;
				
	Иначе
		
		Возврат ПустойДоговорСделка;	
		
	КонецЕсли; 

	Возврат  ПредпочтительныйДоговорСделка; 
	
КонецФункции // ОпределитьДоговорСделку()

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#Область ПроцедурыИФункцииПечати

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	// Реестр документов
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "Реестр";
	КомандаПечати.Представление = НСтр("ru='Реестр документов';uk='Реєстр документів'");
	КомандаПечати.ЗаголовокФормы= НСтр("ru='Реестр документов ""Регистрация входящего налогового документа""';uk='Реєстр документів ""Реєстрація вхідного податкового документа""'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечатиРеестраДокументов";
	КомандаПечати.СписокФорм    = "ФормаСписка";
	КомандаПечати.Порядок       = 100;
	
	
КонецПроцедуры

Функция ПолучитьДополнительныеРеквизитыДляРеестра() Экспорт
	
	Результат = Новый Структура("Информация", "Контрагент");
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ЗаполнитьПоОстаткамСложныйНалоговыйУчет(Объект = Неопределено)
	
	Если Объект = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос();
	
	Запрос.УстановитьПараметр("ДоговорКонтрагента", Объект.ДоговорКонтрагента);
	Запрос.УстановитьПараметр("Организация", 		Объект.Организация);
	Запрос.УстановитьПараметр("Сделка", 			ОпределитьСделкуЛокально(Объект));
	Запрос.УстановитьПараметр("МоментВремени", 		Новый Граница(Объект.Дата, ВидГраницы.Включая));
	
	СобытияПриобретенияНалоговыйУчет	= Новый СписокЗначений();
	СобытияОжидаемыйИПодтвержденныйНДС 	= Новый СписокЗначений();
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийРегистрацияВходящегоНалоговогоДокумента.РасчетКорректировкиВозврат Тогда
		
		СобытияПриобретенияНалоговыйУчет = Новый СписокЗначений();
		СобытияПриобретенияНалоговыйУчет.Добавить(Перечисления.СобытияПриобретенияНалоговыйУчет.ВозвратПоставщику);
		СобытияПриобретенияНалоговыйУчет.Добавить(Перечисления.СобытияПриобретенияНалоговыйУчет.ВозвратОплатыПоставщиком);
		Запрос.УстановитьПараметр("СобытияПриобретенияНалоговыйУчет", СобытияПриобретенияНалоговыйУчет);
		Запрос.УстановитьПараметр("ПриобретенияНалоговыйУчетОплата", Перечисления.СобытияПриобретенияНалоговыйУчет.ВозвратОплатыПоставщиком);
		
		СобытияОжидаемыйИПодтвержденныйНДС.Добавить(Перечисления.СобытияОжидаемыйИПодтвержденныйНДСПриобретений.Возврат);
		Запрос.УстановитьПараметр("СобытияОжидаемыйИПодтвержденныйНДС", СобытияОжидаемыйИПодтвержденныйНДС);
		
	Иначе
		
		СобытияПриобретенияНалоговыйУчет = Новый СписокЗначений();
		СобытияПриобретенияНалоговыйУчет.Добавить(Перечисления.СобытияПриобретенияНалоговыйУчет.ПоступлениеОтПоставщика);
		СобытияПриобретенияНалоговыйУчет.Добавить(Перечисления.СобытияПриобретенияНалоговыйУчет.ОплатаПоставщику);
		Запрос.УстановитьПараметр("СобытияПриобретенияНалоговыйУчет", СобытияПриобретенияНалоговыйУчет);
		Запрос.УстановитьПараметр("ПриобретенияНалоговыйУчетОплата", Перечисления.СобытияПриобретенияНалоговыйУчет.ОплатаПоставщику);
		
		СобытияОжидаемыйИПодтвержденныйНДС.Добавить(Перечисления.СобытияОжидаемыйИПодтвержденныйНДСПриобретений.Поступление);
		Запрос.УстановитьПараметр("СобытияОжидаемыйИПодтвержденныйНДС", СобытияОжидаемыйИПодтвержденныйНДС);
		
	КонецЕсли;
	
	Запрос.Текст = "ВЫБРАТЬ
				   |	ВЫБОР КОГДА ОжидаемыйИПодтвержденныйНДС.ДоговорКонтрагента ЕСТЬ NULL ТОГДА 
				   |		ВЫБОР КОГДА ПриобретенияНалоговыйУчет.ВозвратнаяТара = Истина ТОГДА ПриобретенияНалоговыйУчет.ДоговорКонтрагента.СхемаНалоговогоУчетаПоТаре.МоментОпределенияБазыНДСПоПокупкам ИНАЧЕ ПриобретенияНалоговыйУчет.ДоговорКонтрагента.СхемаНалоговогоУчета.МоментОпределенияБазыНДСПоПокупкам КОНЕЦ 
			   	   |	  ИНАЧЕ
				   |		ВЫБОР КОГДА ОжидаемыйИПодтвержденныйНДС.ВозвратнаяТара = Истина ТОГДА ОжидаемыйИПодтвержденныйНДС.ДоговорКонтрагента.СхемаНалоговогоУчетаПоТаре.МоментОпределенияБазыНДСПоПокупкам ИНАЧЕ ОжидаемыйИПодтвержденныйНДС.ДоговорКонтрагента.СхемаНалоговогоУчета.МоментОпределенияБазыНДСПоПокупкам КОНЕЦ 
				   |	КОНЕЦ КАК Схема,
	               |	ВЫБОР КОГДА ОжидаемыйИПодтвержденныйНДС.ДоговорКонтрагента ЕСТЬ NULL ТОГДА 
				   |		ПриобретенияНалоговыйУчет.ВозвратнаяТара 
				   |	 ИНАЧЕ
				   |		ОжидаемыйИПодтвержденныйНДС.ВозвратнаяТара 
				   |	КОНЕЦ КАК ЗаТару,
				   |    ОжидаемыйИПодтвержденныйНДС.ДляХозяйственнойДеятельности 	КАК ДляХозяйственнойДеятельности,
				   |    ОжидаемыйИПодтвержденныйНДС.ВидДеятельностиНДС 				КАК ВидДеятельностиНДС,
				   |    ОжидаемыйИПодтвержденныйНДС.Амортизируется	 				КАК Амортизируется,
				   |	ОжидаемыйИПодтвержденныйНДС.СтавкаНДС 	  					КАК СтавкаНДС,
				   |	ВЫБОР КОГДА ОжидаемыйИПодтвержденныйНДС.БазаНДСОстаток ЕСТЬ NULL ТОГДА
				   |		0
				   |	 ИНАЧЕ
				   |		ВЫБОР КОГДА ОжидаемыйИПодтвержденныйНДС.БазаНДСОстаток < 0 ТОГДА
				   |			0
				   |		 ИНАЧЕ 
				   |			ОжидаемыйИПодтвержденныйНДС.БазаНДСОстаток
				   |		КОНЕЦ
				   |	КОНЕЦ КАК СуммаОтгрузки,
				   |	ВЫБОР КОГДА ОжидаемыйИПодтвержденныйНДС.СуммаНДСОстаток ЕСТЬ NULL ТОГДА
				   |		0
				   |	 ИНАЧЕ
				   |		ВЫБОР КОГДА ОжидаемыйИПодтвержденныйНДС.СуммаНДСОстаток < 0 ТОГДА
				   |			0
				   |		 ИНАЧЕ 
				   |			ОжидаемыйИПодтвержденныйНДС.СуммаНДСОстаток
				   |		КОНЕЦ
				   |	КОНЕЦ КАК СуммаНДСОтгрузки,
				   |	ВЫБОР КОГДА ОжидаемыйИПодтвержденныйНДС.СуммаНДСПропорциональноОстаток ЕСТЬ NULL ТОГДА
				   |		0
				   |	 ИНАЧЕ
				   |		ВЫБОР КОГДА ОжидаемыйИПодтвержденныйНДС.СуммаНДСПропорциональноОстаток < 0 ТОГДА
				   |			0
				   |		 ИНАЧЕ 
				   |			ОжидаемыйИПодтвержденныйНДС.СуммаНДСПропорциональноОстаток
				   |		КОНЕЦ
				   |	КОНЕЦ КАК СуммаНДСПропорциональноОстаток,
				   |	ПриобретенияНалоговыйУчет.Аванс 						  КАК СуммаПревышенияОплатНадОтгрузкой
				   |ИЗ
	               |	РегистрНакопления.ОжидаемыйИПодтвержденныйНДСПриобретений.Остатки(&МоментВремени, Организация = &Организация И ДоговорКонтрагента = &ДоговорКонтрагента И Сделка = &Сделка И СобытиеНДС В (&СобытияОжидаемыйИПодтвержденныйНДС)) КАК ОжидаемыйИПодтвержденныйНДС
				   |    ПРАВОЕ СОЕДИНЕНИЕ
				   |        (ВЫБРАТЬ 
				   |            ПриобретенияНалоговыйУчет.ДоговорКонтрагента 	КАК ДоговорКонтрагента,
				   |            ПриобретенияНалоговыйУчет.ВозвратнаяТара		КАК ВозвратнаяТара,
				   |            СУММА(ВЫБОР КОГДА ПриобретенияНалоговыйУчет.Событие = &ПриобретенияНалоговыйУчетОплата ТОГДА ПриобретенияНалоговыйУчет.СуммаВзаиморасчетовОстаток ИНАЧЕ - ПриобретенияНалоговыйУчет.СуммаВзаиморасчетовОстаток КОНЕЦ) КАК Аванс
				   |
				   |         ИЗ РегистрНакопления.ПриобретенияНалоговыйУчет.Остатки(&МоментВремени, Организация = &Организация И ДоговорКонтрагента = &ДоговорКонтрагента И Сделка = &Сделка И Событие В (&СобытияПриобретенияНалоговыйУчет)) КАК ПриобретенияНалоговыйУчет
				   |
				   |		 СГРУППИРОВАТЬ ПО
				   |			ПриобретенияНалоговыйУчет.ДоговорКонтрагента,
				   |			ПриобретенияНалоговыйУчет.ВозвратнаяТара) КАК ПриобретенияНалоговыйУчет
				   |    ПО 
				   |       ОжидаемыйИПодтвержденныйНДС.ДоговорКонтрагента 	= ПриобретенияНалоговыйУчет.ДоговорКонтрагента
				   |     И ОжидаемыйИПодтвержденныйНДС.ВозвратнаяТара 		= ПриобретенияНалоговыйУчет.ВозвратнаяТара
				   |
				   |ИТОГИ
				   |	МАКСИМУМ(Схема),
				   |	МАКСИМУМ(СуммаПревышенияОплатНадОтгрузкой),
				   |	СУММА(СуммаОтгрузки),
				   |	СУММА(СуммаНДСПропорциональноОстаток),
				   |	СУММА(СуммаНДСОтгрузки)
				   |ПО
				   |	ЗаТару,
				   |    ДляХозяйственнойДеятельности,
				   |    ВидДеятельностиНДС,
				   |	Амортизируется
				   |";	
	
	Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока Выборка.Следующий() Цикл // ЗаТару
					
		СуммаНеПодтвержденнойОтгрузки    = ?(Выборка.СуммаОтгрузки = NULL, 0, Выборка.СуммаОтгрузки + Выборка.СуммаНДСОтгрузки);
		СуммаПревышенияОплатНадОтгрузкой = ?(Выборка.СуммаПревышенияОплатНадОтгрузкой = NULL, 0, Выборка.СуммаПревышенияОплатНадОтгрузкой);
					
		Если Выборка.Схема = Перечисления.МоментыОпределенияНалоговойБазы.НеОпределять Тогда
							
			// ничего не делаем
			Возврат;
							
		ИначеЕсли Выборка.Схема = Перечисления.МоментыОпределенияНалоговойБазы.ПоОплате Тогда
						
			Аванс = Макс(0, СуммаНеПодтвержденнойОтгрузки + СуммаПревышенияОплатНадОтгрузкой);
						
			Если Аванс > 0 Тогда
				ДобавитьСтрокуАванс(Объект, Выборка, Аванс);
			КонецЕсли;
							
		ИначеЕсли Выборка.Схема = Перечисления.МоментыОпределенияНалоговойБазы.ПоОтгрузке Тогда
							
			// Все неподтвержденные отгрузки 
			ДобавитьСтроку(Объект, Выборка);
							
		ИначеЕсли Выборка.Схема = Перечисления.МоментыОпределенияНалоговойБазы.ПоПервомуСобытию Тогда
						
			// Все неподтвержденные отгрузки
			ДобавитьСтроку(Объект, Выборка);	
						
			//Дополнительно добавим аванс
			Аванс = Макс(0, СуммаПревышенияОплатНадОтгрузкой);
						
			Если Аванс > 0 Тогда
				// дополнительно добавим аванс
				ДобавитьСтрокуАванс(Объект, Выборка, Аванс);
			КонецЕсли;
							
		Иначе
			
			Если Выборка.ЗаТару Тогда
				ТекстСообщения = НСтр("ru='Не указана схема налогового учета по таре, либо в схеме не указан Момент определения базы НДС по покупкам!';uk='Не зазначена схема податкового обліку по тарі, або в схемі не зазначений Момент визначення бази ПДВ по покупках!'");
			Иначе	
				ТекстСообщения = НСтр("ru='Не указана схема налогового учета, либо в схеме не указан Момент определения базы НДС по покупкам!';uk='Не зазначена схема податкового обліку, або в схемі не зазначений Момент визначення бази ПДВ по покупках!'");
			КонецЕсли;	
				
			Сообщить(ТекстСообщения, СтатусСообщения.Важное);

		КонецЕсли;					
		
	КонецЦикла;	
	
КонецПроцедуры

Процедура ЗаполнитьПоОстаткамУпрощенныйНалоговыйУчет(Объект = Неопределено)
	
	Если Объект = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос();
	
	Запрос.УстановитьПараметр("ДоговорКонтрагента", Объект.ДоговорКонтрагента);
	Запрос.УстановитьПараметр("Организация", 		Объект.Организация);
	Запрос.УстановитьПараметр("Сделка", 			ОпределитьСделкуЛокально(Объект));
	Запрос.УстановитьПараметр("МоментВремени", 		Новый Граница(Объект.Дата, ВидГраницы.Включая));
	
	СобытияОжидаемыйИПодтвержденныйНДС 	= Новый СписокЗначений();
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийРегистрацияВходящегоНалоговогоДокумента.РасчетКорректировкиВозврат Тогда
		
		СобытияОжидаемыйИПодтвержденныйНДС.Добавить(Перечисления.СобытияОжидаемыйИПодтвержденныйНДСПриобретений.Возврат);
		Запрос.УстановитьПараметр("СобытияОжидаемыйИПодтвержденныйНДС", СобытияОжидаемыйИПодтвержденныйНДС);
		
	Иначе
		
		СобытияОжидаемыйИПодтвержденныйНДС.Добавить(Перечисления.СобытияОжидаемыйИПодтвержденныйНДСПриобретений.Поступление);
		Запрос.УстановитьПараметр("СобытияОжидаемыйИПодтвержденныйНДС", СобытияОжидаемыйИПодтвержденныйНДС);
		
	КонецЕсли;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ОжидаемыйИПодтвержденныйНДС.ВозвратнаяТара КАК ЗаТару,
	               |	ОжидаемыйИПодтвержденныйНДС.СтавкаНДС,
	               |	ОжидаемыйИПодтвержденныйНДС.ДляХозяйственнойДеятельности,
	               |	ОжидаемыйИПодтвержденныйНДС.ВидДеятельностиНДС,
	               |	ОжидаемыйИПодтвержденныйНДС.Амортизируется,
	               |	ОжидаемыйИПодтвержденныйНДС.БазаНДСОстаток,
	               |	ОжидаемыйИПодтвержденныйНДС.СуммаНДСОстаток,
				   |	ОжидаемыйИПодтвержденныйНДС.СуммаНДСПропорциональноОстаток,
				   |	ОжидаемыйИПодтвержденныйНДС.СуммаНДСОстаток
	               |ИЗ
	               |	РегистрНакопления.ОжидаемыйИПодтвержденныйНДСПриобретений.Остатки(
	               |		&МоментВремени,
	               |		Организация = &Организация
	               |		    И ДоговорКонтрагента = &ДоговорКонтрагента
	               |		    И Сделка = &Сделка
	               |		    И СобытиеНДС В (&СобытияОжидаемыйИПодтвержденныйНДС)) КАК ОжидаемыйИПодтвержденныйНДС";	
				   
	
	Знак = +1;
	Если Объект.ВидОперации = Перечисления.ВидыОперацийРегистрацияВходящегоНалоговогоДокумента.РасчетКорректировкиВозврат Тогда
		Знак = -1;
	КонецЕсли;
				   
				   
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл 
		
		Если  Выборка.БазаНДСОстаток <= 0 Тогда
		  Возврат
		КонецЕсли;
		
		Если Выборка.ЗаТару Тогда
				
			Объект.СуммаВозвратнойТары = Объект.СуммаВозвратнойТары + Знак*Выборка.БазаНДСОстаток;
				
		Иначе
				
			Строка = Объект.Товары.Добавить();
				
			Строка.СтавкаНДС 					= Выборка.СтавкаНДС;
			Строка.ДляХозяйственнойДеятельности = Выборка.ДляХозяйственнойДеятельности;
			Если НЕ Выборка.ВидДеятельностиНДС 	= Перечисления.ВидыДеятельностиНДС.Необлагаемая тогда
				Строка.ДляОперацийОблагаемыхНДС	= Истина;
			КонецЕсли;
			Строка.Амортизируется 				= Выборка.Амортизируется;
			
			Строка.Сумма 	= Знак*Выборка.БазаНДСОстаток;
			Строка.СуммаНДС	= Знак*Выборка.СуммаНДСОстаток;
			Если Выборка.ВидДеятельностиНДС = Перечисления.ВидыДеятельностиНДС.ПропорциональноОблагаемая Тогда
				
				Строка.ПропорциональныйНДС	= Истина;
				
				Если Выборка.СуммаНДСОстаток <> 0 
				   И Выборка.СуммаНДСПропорциональноОстаток <> 0 Тогда
					
					//	Здесь нужно разбить строку на две - одна по включаемому НДС в кредит, вторую на остаток (не вкл. в кредит)
					Строка2 = Объект.Товары.Добавить();
					ЗаполнитьЗначенияСвойств(Строка2, Строка);
					
					//Строка.ДляОперацийОблагаемыхНДС = Истина;
					Строка2.ДляОперацийОблагаемыхНДС  = Ложь;
					
					Строка.СуммаНДС  = Знак*Выборка.СуммаНДСПропорциональноОстаток;
					Строка2.СуммаНДС = Строка2.СуммаНДС - Строка.СуммаНДС;
					
					Если Строка.Сумма <> 0 Тогда
						Строка.Сумма  = Строка.Сумма *  (Выборка.СуммаНДСПропорциональноОстаток/Выборка.СуммаНДСОстаток);
					КонецЕсли;
					Строка2.Сумма = Строка2.Сумма - Строка.Сумма;
					
					Строка2.СуммаВзаиморасчетов = Строка2.Сумма + Строка2.СуммаНДС;

					Строка2.СтатьяДекларацииНДСНалоговыйКредит	= ОпределитьСтатьюНалоговойДекларации(Объект.ВидОперации, Строка2);
					
				Иначе			
					
					Строка.ДляОперацийОблагаемыхНДС  = Ложь;
	
				КонецЕсли;
				
			КонецЕсли;
			
			Строка.СуммаВзаиморасчетов = Строка.Сумма + Строка.СуммаНДС;

			Строка.СтатьяДекларацииНДСНалоговыйКредит	= ОпределитьСтатьюНалоговойДекларации(Объект.ВидОперации, Строка);
			
		КонецЕсли;					
		
	КонецЦикла;	
	
КонецПроцедуры

Процедура ДобавитьСтроку(Объект, Выборка)
	
	ВыборкаХозДеятельность = Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаХозДеятельность.Следующий() Цикл
		
		ВыборкаВидДеятельностиНДС = ВыборкаХозДеятельность.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаВидДеятельностиНДС.Следующий() Цикл 
			
			ВыборкаАмортизируется = ВыборкаВидДеятельностиНДС.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаАмортизируется.Следующий() Цикл 
			
				ВыборкаСтавкаНДС = ВыборкаАмортизируется.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				Пока ВыборкаСтавкаНДС.Следующий() Цикл 
					ДобавитьСтрокуОтгрузка(Объект, ВыборкаСтавкаНДС);	
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЦикла;		
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьСтрокуОтгрузка(Объект, Выборка)
	
	Если  Выборка.СуммаОтгрузки = NULL 
	  Или Выборка.СуммаОтгрузки + Выборка.СуммаНДСОтгрузки <= 0 Тогда
	  Возврат
	КонецЕсли;
	
	Знак = +1;
	Если Объект.ВидОперации = Перечисления.ВидыОперацийРегистрацияВходящегоНалоговогоДокумента.РасчетКорректировкиВозврат Тогда
		Знак = -1;
	КонецЕсли;
	
	Если Выборка.ЗаТару Тогда
		
		Объект.СуммаВозвратнойТары = Объект.СуммаВозвратнойТары + Знак*Выборка.СуммаОтгрузки;
		
	Иначе
		
		Строка = Объект.Товары.Добавить();
		
		Строка.СтавкаНДС 					= Выборка.СтавкаНДС;
		Строка.ДляХозяйственнойДеятельности = Выборка.ДляХозяйственнойДеятельности;
		Если НЕ Выборка.ВидДеятельностиНДС 	= Перечисления.ВидыДеятельностиНДС.Необлагаемая тогда
			Строка.ДляОперацийОблагаемыхНДС	= Истина;
		КонецЕсли;
		Строка.Амортизируется 				= Выборка.Амортизируется;
		
		Строка.Сумма 	= Знак*Выборка.СуммаОтгрузки;
		Строка.СуммаНДС	= Знак*Выборка.СуммаНДСОтгрузки;
		Если Выборка.ВидДеятельностиНДС = Перечисления.ВидыДеятельностиНДС.ПропорциональноОблагаемая Тогда
			
			Строка.ПропорциональныйНДС	= Истина;
			
			Если  Выборка.СуммаНДСПропорциональноОстаток <> 0
				И Выборка.СуммаНДСОтгрузки <> 0 Тогда
				
				//	Здесь нужно разбить строку на две - одна по включаемому НДС в кредит, вторую на остаток (не вкл. в кредит)
				Строка2 = Объект.Товары.Добавить();
				ЗаполнитьЗначенияСвойств(Строка2, Строка);
				
				//Строка.ДляОперацийОблагаемыхНДС = Истина;
				Строка2.ДляОперацийОблагаемыхНДС  = Ложь;
				
				Строка.СуммаНДС  = Знак*Выборка.СуммаНДСПропорциональноОстаток;
				Строка2.СуммаНДС = Строка2.СуммаНДС - Строка.СуммаНДС;
				
				Если Строка.Сумма <> 0 Тогда
					Строка.Сумма  = Строка.Сумма *  (Выборка.СуммаНДСПропорциональноОстаток/Выборка.СуммаНДСОтгрузки);
				КонецЕсли;
				Строка2.Сумма = Строка2.Сумма - Строка.Сумма;
				
				Строка2.СуммаВзаиморасчетов = Строка2.Сумма + Строка2.СуммаНДС;

				Строка2.СтатьяДекларацииНДСНалоговыйКредит	= ОпределитьСтатьюНалоговойДекларации(Объект.ВидОперации, Строка2);
				
			Иначе			
				
				Строка.ДляОперацийОблагаемыхНДС  = Ложь;

			КонецЕсли;
			
		КонецЕсли;
		
		Строка.СуммаВзаиморасчетов = Строка.Сумма + Строка.СуммаНДС;

		Строка.СтатьяДекларацииНДСНалоговыйКредит	= ОпределитьСтатьюНалоговойДекларации(Объект.ВидОперации, Строка);
	
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьСтрокуАванс(Объект, Выборка, Аванс)
	
	Знак = +1;
	Если Объект.ВидОперации = Перечисления.ВидыОперацийРегистрацияВходящегоНалоговогоДокумента.РасчетКорректировкиВозврат Тогда
		Знак = -1;
	КонецЕсли;

	Если Выборка.ЗаТару Тогда
		
		Объект.СуммаВозвратнойТары = Объект.СуммаВозвратнойТары + Знак * Выборка.СуммаОтгрузки;
		
	Иначе
		
		Строка = Объект.Товары.Добавить();
		Строка.СуммаВзаиморасчетов = Знак * Аванс;

	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

Процедура ЗаполнитьПоКомиссионнойТорговлеНалоговыйКодекс(Объект = Неопределено) Экспорт
	
	Если Объект = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВалютаОснования = Объект.ДокументОснование.ВалютаДокумента; 
	Данные = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаОснования, Объект.ДокументОснование.Дата);
	
	Если    Объект.ДокументОснование = Неопределено 
		ИЛИ Объект.ДокументОснование.Пустая() Тогда
	
		// нет данных для заполнения
		Возврат;	
	
	КонецЕсли;

	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ДокументОснование", Объект.ДокументОснование);
	Запрос.УстановитьПараметр("Курс", 				Данные.Курс/Данные.Кратность);
	
	Запрос.УстановитьПараметр("ОблагаемыйВидДеятельностиНДС", Перечисления.ВидыДеятельностиНДС.Облагаемая);
	
	Запрос.Текст =
	"ВЫБРАТЬ Разрешенные
	|	ОжидаемыйИПодтвержденныйНДСПриобретений.СтавкаНДС,
	|	ОжидаемыйИПодтвержденныйНДСПриобретений.ДляХозяйственнойДеятельности,
	|	ВЫБОР
	|		КОГДА ОжидаемыйИПодтвержденныйНДСПриобретений.ВидДеятельностиНДС = &ОблагаемыйВидДеятельностиНДС
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ДляОперацийОблагаемыхНДС,
	|	Амортизируется КАК Амортизируется,
	|	ОжидаемыйИПодтвержденныйНДСПриобретений.ВозвратнаяТара,
	|	&Курс * ОжидаемыйИПодтвержденныйНДСПриобретений.СуммаНДС КАК СуммаНДС,
	|	&Курс * ОжидаемыйИПодтвержденныйНДСПриобретений.БазаНДС КАК Сумма
	|ИЗ
	|	РегистрНакопления.ОжидаемыйИПодтвержденныйНДСПриобретений КАК ОжидаемыйИПодтвержденныйНДСПриобретений
	|ГДЕ
	|	  ОжидаемыйИПодтвержденныйНДСПриобретений.Регистратор 		 = &ДокументОснование
	|";
	
	// сохраним имеющиеся строки в табличной части
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
	
		Если Выборка.ВозвратнаяТара = Истина Тогда
			
			Объект.СуммаВозвратнойТары = Объект.СуммаВозвратнойТары + Выборка.Сумма;
			
		Иначе
			
			СтрокаТоваров = Объект.Товары.Добавить();
			СтрокаТоваров.СтавкаНДС 					= Выборка.СтавкаНДС;
			СтрокаТоваров.ДляХозяйственнойДеятельности 	= Выборка.ДляХозяйственнойДеятельности;
			СтрокаТоваров.ДляОперацийОблагаемыхНДС 		= Выборка.ДляОперацийОблагаемыхНДС;
			СтрокаТоваров.Амортизируется 				= Выборка.Амортизируется;
			СтрокаТоваров.СуммаНДС 						= Выборка.СуммаНДС;
			СтрокаТоваров.Сумма 						= Выборка.Сумма;
			СтрокаТоваров.СуммаВзаиморасчетов			= Выборка.Сумма + Выборка.СуммаНДС;

			Если ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.ВозвратТоваровПоставщику") Тогда
			
				СтрокаТоваров.Сумма 						= - СтрокаТоваров.Сумма;
				СтрокаТоваров.СуммаНДС 						= - СтрокаТоваров.СуммаНДС; // ИНАГРО
				СтрокаТоваров.СуммаВзаиморасчетов			= - СтрокаТоваров.СуммаВзаиморасчетов;	
			
			КонецЕсли;
			
			СтрокаТоваров.СтатьяДекларацииНДСНалоговыйКредит	= ОпределитьСтатьюНалоговойДекларации(Объект.ВидОперации, СтрокаТоваров);
			
		КонецЕсли; 
	
	КонецЦикла; 

КонецПроцедуры

#КонецЕсли
