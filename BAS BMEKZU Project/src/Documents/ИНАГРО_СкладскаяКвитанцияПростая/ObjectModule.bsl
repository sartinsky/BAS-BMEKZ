#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда  

#Область ОбработчикиСобытий

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	ТипДанныхЗаполнения = ТипЗнч(ДанныеЗаполнения);
	Если (ДанныеЗаполнения <> Неопределено И (ТипДанныхЗаполнения <> Тип("Структура")
		И Метаданные().ВводитсяНаОсновании.Содержит(ДанныеЗаполнения.Метаданные())))
		ИЛИ (ТипДанныхЗаполнения = Тип("Структура") И ДанныеЗаполнения.Свойство("Ссылка")) Тогда
		ЗаполнитьПоДокументуОснованию(ДанныеЗаполнения);
	КонецЕсли;
	
	ИНАГРО_ЭлеваторЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект);

	ЗаполнениеДокументов.Заполнить(ЭтотОбъект, ДанныеЗаполнения);	
	
	Если НЕ ЗначениеЗаполнено(ДатаВыдачи) Тогда
		ПечатьДоВостребования = ХранилищеОбщихНастроек.Загрузить("ИНАГРО_СкладскаяКвитанцияПростая_ПечатьДоВостребования", "Элеватор");
	КонецЕсли;
	
	ПечатьВесаКВыдаче = ХранилищеОбщихНастроек.Загрузить("ИНАГРО_СкладскаяКвитанцияДвойная_ПечатьВесаКВыдачи", "Элеватор");	
			
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
		
	ХранилищеОбщихНастроек.Сохранить("ИНАГРО_СкладскаяКвитанцияПростая_ПечатьДоВостребования", "Элеватор", ПечатьДоВостребования);
	ХранилищеОбщихНастроек.Сохранить("ИНАГРО_СкладскаяКвитанцияПростая_ПечатьВесаКВыдаче", "Элеватор", ПечатьВесаКВыдаче);	
		
КонецПроцедуры 

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	Перем Заголовок, СтруктураШапкиДокумента;
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКПроведению(ЭтотОбъект);
		   
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначенияБПВызовСервера.ПредставлениеДокументаПриПроведении(Ссылка);

	ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента);	

	Если ДокументОснование <> Неопределено И ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ИНАГРО_РеестрТТНВвоз") Тогда		
		ИНАГРО_РеестрТТНВвоз  = ДокументОснование.ПолучитьОбъект();			
		ИНАГРО_РеестрТТНВвоз.СкладскаяКвитанция = Ссылка;
		ИНАГРО_РеестрТТНВвоз.Записать();			
	ИначеЕсли ДокументОснование <> Неопределено И (ТипЗнч(ДокументОснование)=Тип("ДокументСсылка.ИНАГРО_Переоформление")) Тогда
		ИНАГРО_Переоформление = ДокументОснование.ПолучитьОбъект();
		СтрокаТабличнойЧастиКультуры = ИНАГРО_Переоформление.Культуры.Найти(Ссылка.НомерСтроки, "НомерСтроки");
		Если СтрокаТабличнойЧастиКультуры <> Неопределено Тогда
			СтрокаТабличнойЧастиКультуры.СкладскаяКвитанция = Ссылка;
			ИНАГРО_Переоформление.Записать();
		КонецЕсли;
	КонецЕсли;	
	
	Если НЕ Отказ И Состояние = Перечисления.ИНАГРО_СостояниеСК.Зарегистрирована И НЕ НеРассчитыватьУслугуПоВыпискеСкладскогоДокумента Тогда		
		ТаблицаУслуг = СформироватьТаблицуУслуг();
		Если ТаблицаУслуг.Количество() > 0 Тогда
			ИНАГРО_Элеватор.ДвиженияПоРегиструРасчетыПоУслугам(Движения, ТаблицаУслуг, "Приход");
		КонецЕсли;
	КонецЕсли;

	ПроведениеСервер.ПодготовитьНаборыЗаписейКЗаписиДвижений(ЭтотОбъект); 	

КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКОтменеПроведения(ЭтотОбъект);
	Движения.Записать();
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)

	Дата = НачалоДня(ОбщегоНазначения.ТекущаяДатаПользователя());
	Ответственный = Пользователи.ТекущийПользователь();
	
	ДокументОснование = Неопределено;
		
КонецПроцедуры

#КонецОбласти

#Область Проведение

// Процедура формирует структуру шапки документа и дополнительных полей.
//
Процедура ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента) Экспорт

	// Дерево значений, содержащее имена необходимых полей в запросе по шапке.
	Перем ДеревоПолейЗапросаПоШапке;	
	
	СтруктураШапкиДокумента   = ОбщегоНазначенияРед12.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);	
	
	// Заполним по шапке документа дерево параметров, нужных при проведении.
	ДеревоПолейЗапросаПоШапке = ОбщегоНазначенияРед12.СформироватьДеревоПолейЗапросаПоШапке();
	ОбщегоНазначенияРед12.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "Организация", "ДоговорОрганизация");
	ОбщегоНазначенияРед12.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Владелец",             "Ссылка",      "Владелец");
	ОбщегоНазначенияРед12.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Номенклатура",         "Ссылка",      "Номенклатура");
	ОбщегоНазначенияРед12.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Склад",                "Ссылка",      "Склад");	
	ОбщегоНазначенияРед12.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Урожай",               "Ссылка",      "Урожай");
	
	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа.
	СтруктураШапкиДокумента   = УправлениеЗапасами.СформироватьЗапросПоДеревуПолей(ЭтотОбъект, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, );

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ЗаполнитьПоДокументуОснованию(Основание)

	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ИНАГРО_РеестрТТНВвоз") Тогда
		
		Если НЕ ЗначениеЗаполнено(Основание.СкладскаяКвитанция)
			ИЛИ Основание.СкладскаяКвитанция.Состояние = Перечисления.ИНАГРО_СостояниеСК.Испорчена
			ИЛИ Основание.СкладскаяКвитанция.ПометкаУдаления = Истина Тогда
			
			Если ИНАГРО_Элеватор.ПолучитьПараметрУчетаЭлеватора(Дата, "ОдинаковаяДатаФормСкладскойИРеестра", Ложь) Тогда			
				Дата = Основание.Дата;
			Иначе 
				Дата = ТекущаяДата();				
			КонецЕсли;
			
			ДокументОснование       = Основание; 
			НомерДокументаОснования = Основание.Номер;
			Состояние               = Перечисления.ИНАГРО_СостояниеСК.Зарегистрирована;			
			Организация             = Основание.Организация;
			Владелец                = Основание.Владелец;			
			ДоговорКонтрагента      = Основание.ДоговорКонтрагента;
			ДатаДоговора            = Основание.ДоговорКонтрагента.Дата;
			НомерДоговора           = Основание.ДоговорКонтрагента.Номер;
			Если ЗначениеЗаполнено(ДоговорКонтрагента) Тогда				
				Если ЗначениеЗаполнено(ДоговорКонтрагента.ИНАГРО_СрокДействия) Тогда
					ПечатьДоВостребования = Истина;
					ДатаВыдачи            = ДоговорКонтрагента.ИНАГРО_СрокДействия; 					
				КонецЕсли;
			КонецЕсли;
			Склад                   = Основание.Склад;
			ВидХранения             = Основание.ВидХранения;
			Номенклатура            = Основание.Номенклатура;
			Урожай                  = Основание.Урожай;
			Вес                     = Основание.ОбщийФизическийВес;
			ФизическийВес           = Основание.ОбщийФизическийВес;
			ЗачетныйВес             = Основание.ЗачетныйВес;
			ЛабораторныйАнализ      = Основание.ЛабораторныйАнализ;			
			Влажность               = Основание.Влажность;
			СорнаяПримесь           = Основание.СорнаяПримесь;
			ЗерноваяПримесь         = Основание.ЗерноваяПримесь;			
					
			ЗаполнитьДанныеЛабораторногоАнализа();
			
		Иначе  					
			
			СерияИНомер = "( " + Основание.СкладскаяКвитанция.Серия + " - " + Основание.СкладскаяКвитанция.НомерВходящий + " )";
			СерияИНомер = ?(СерияИНомер = "(  -  )", "", СерияИНомер);
			СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='На основании данного реестра уже создана складская квитанция № %1 %2 от %3 на культуру %4.';uk='На підставі даного реєстру вже створена складська квитанція № %1 %2 від %3 на культуру %4.'"),
				Основание.СкладскаяКвитанция.Номер, СерияИНомер, Основание.СкладскаяКвитанция.Дата, Основание.СкладскаяКвитанция.Номенклатура);
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения);
			
		КонецЕсли;
			
		ИначеЕсли ТипЗнч(Основание.Ссылка) = Тип("ДокументСсылка.ИНАГРО_Переоформление") Тогда		
			
			
			ДокументОснование    = Основание.Ссылка;
			СтрокаТабличнойЧасти = Основание.СтрокаТабличнойЧасти;
			
			Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.СкладскаяКвитанция)
				ИЛИ СтрокаТабличнойЧасти.СкладскаяКвитанция.Состояние = Перечисления.ИНАГРО_СостояниеСК.Испорчена 
				ИЛИ СтрокаТабличнойЧасти.СкладскаяКвитанция.ПометкаУдаления = Истина Тогда								
				
				Дата                    = Основание.Дата;
				Основание       = Основание;
				НомерДокументаОснования = ДокументОснование.Номер;
				Состояние               = Перечисления.ИНАГРО_СостояниеСК.Зарегистрирована;				
				Организация             = Основание.Организация;
				Владелец                = Основание.НовыйВладелец;				
				ДоговорКонтрагента      = Основание.НовыйДоговорКонтрагента;
				ДатаДоговора            = Основание.НовыйДоговорКонтрагента.Дата;
				НомерДоговора           = Основание.НовыйДоговорКонтрагента.Номер;
				Если ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
					Если ЗначениеЗаполнено(ДоговорКонтрагента.ИНАГРО_СрокДействия) Тогда
						ПечатьДоВостребования = Истина;				
						ДатаВыдачи            = ДоговорКонтрагента.ИНАГРО_СрокДействия;
					КонецЕсли;
				КонецЕсли;				
				Склад                   = Основание.НовыйСклад;
				ВидХранения             = Основание.НовыйВидХранения;					
				Номенклатура            = СтрокаТабличнойЧасти.НоваяНоменклатура;
				Урожай                  = Основание.Урожай; 					
				Вес                     = СтрокаТабличнойЧасти.ФизическийВес;
				ЗачетныйВес             = СтрокаТабличнойЧасти.ЗачетныйВес;
				ФизическийВес           = СтрокаТабличнойЧасти.ФизическийВес;				
				Серия                   = Основание.ДоверенностьСерия;					
				Комментарий             = "Переоформлення з " + Основание.Владелец.НаименованиеПолное + ", " + ?(Основание.Владелец.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо, "Код ІПН: " + Строка(Основание.Владелец.ИНН), "Код ЕДРПОУ: " + Основание.Владелец.КодПоЕДРПОУ);
				НомерСтроки             = СтрокаТабличнойЧасти.НомерСтроки; 
				ЛабораторныйАнализ      = СтрокаТабличнойЧасти.ЛабораторныйАнализ;
				Влажность               = СтрокаТабличнойЧасти.Влажность;
				СорнаяПримесь           = СтрокаТабличнойЧасти.СорнаяПримесь;
				ЗерноваяПримесь         = СтрокаТабличнойЧасти.ЗерноваяПримесь;
				
				ЗаполнитьДанныеЛабораторногоАнализа();
				
			Иначе
				
				СерияИНомер = "( " + СтрокаТабличнойЧасти.СкладскаяКвитанция.Серия + " - " + СтрокаТабличнойЧасти.СкладскаяКвитанция.НомерВходящий + " )";
				СерияИНомер = ?(СерияИНомер = "(  -  )", "", СерияИНомер);
				СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='На основании данного переоформления уже создана складская квитанция № %1 %2 от %3 на культуру %4.';uk='На підставі даного переоформлення вже створена складська квитанція № %1 %2 від %3 на культуру %4.'"),
					СтрокаТабличнойЧасти.СкладскаяКвитанция.Номер, СерияИНомер, СтрокаТабличнойЧасти.СкладскаяКвитанция.Дата, СтрокаТабличнойЧасти.СкладскаяКвитанция.Номенклатура);
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения);
				
			КонецЕсли;
			
		КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьДанныеЛабораторногоАнализа() Экспорт 
	
	Если ЗначениеЗаполнено(ЛабораторныйАнализ) Тогда
		
		НомерАнализа = ИНАГРО_Элеватор.ПолучитьНомерЛабАнализаИзЛабАнализа(ЛабораторныйАнализ);
		
		Для Каждого СтрокаТабличнойЧасти Из ЛабораторныйАнализ.Результаты Цикл
			
			Если СтрокаТабличнойЧасти.Характеристика.ПоказыватьВСК Тогда
				
				Если ТипЗнч(СтрокаТабличнойЧасти.Значение) = Тип("Число") 
					И  (СтрокаТабличнойЧасти.Характеристика = ПланыВидовХарактеристик.ИНАГРО_ХарактеристикиВидовКультур.Влажность
					ИЛИ СтрокаТабличнойЧасти.Характеристика = ПланыВидовХарактеристик.ИНАГРО_ХарактеристикиВидовКультур.СорнаяПримесь 
					ИЛИ СтрокаТабличнойЧасти.Характеристика = ПланыВидовХарактеристик.ИНАГРО_ХарактеристикиВидовКультур.ЗерноваяПримесь) Тогда
					//ЗначениеХарактеристики = СтрокаТабличнойЧасти.Значение;
					ЗначениеХарактеристики = Окр(СтрокаТабличнойЧасти.Значение, 1);
				Иначе 
					ЗначениеХарактеристики = СтрокаТабличнойЧасти.Значение;
				КонецЕсли;
				
				НоваяСтрока = Характеристики.Добавить();
				НоваяСтрока.Характеристика   = СтрокаТабличнойЧасти.Характеристика;
				НоваяСтрока.ЕдиницаИзмерения = СтрокаТабличнойЧасти.ЕдиницаИзмерения;
				НоваяСтрока.Значение         =  ЗначениеХарактеристики;
				
				Если СтрокаТабличнойЧасти.Характеристика = ПланыВидовХарактеристик.ИНАГРО_ХарактеристикиВидовКультур.Влажность Тогда
					Влажность       = ЗначениеХарактеристики;
				КонецЕсли;
				
				Если СтрокаТабличнойЧасти.Характеристика = ПланыВидовХарактеристик.ИНАГРО_ХарактеристикиВидовКультур.СорнаяПримесь Тогда
					СорнаяПримесь   = ЗначениеХарактеристики;
				КонецЕсли;
				
				Если СтрокаТабличнойЧасти.Характеристика = ПланыВидовХарактеристик.ИНАГРО_ХарактеристикиВидовКультур.ЗерноваяПримесь Тогда
					ЗерноваяПримесь = ЗначениеХарактеристики;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;	
	
КонецПроцедуры

Функция СформироватьТаблицуУслуг()
	
	ТаблицаУслуг = Новый ТаблицаЗначений;
	ТаблицаУслуг.Колонки.Добавить("ДатаРасчета");
	ТаблицаУслуг.Колонки.Добавить("Ссылка"); 
	ТаблицаУслуг.Колонки.Добавить("Организация");
	ТаблицаУслуг.Колонки.Добавить("Контрагент");
	ТаблицаУслуг.Колонки.Добавить("ДоговорКонтрагента");
	ТаблицаУслуг.Колонки.Добавить("Номенклатура");
	ТаблицаУслуг.Колонки.Добавить("Культура");
	ТаблицаУслуг.Колонки.Добавить("Склад");
	ТаблицаУслуг.Колонки.Добавить("ВидХранения");
	ТаблицаУслуг.Колонки.Добавить("Урожай");
	ТаблицаУслуг.Колонки.Добавить("Количество");
	ТаблицаУслуг.Колонки.Добавить("Стоимость"); 
	
	Номенклатура_СкладскаяКвитанцияПростая = ИНАГРО_Элеватор.ПолучитьПредопределеннуюНоменклатуру("СкладскаяКвитанцияПростая");
	ВидКультурыДляРасчетаСтоимостиУслуги   = ИНАГРО_Элеватор.ПолучитьДополнительныйРеквизитНоменклатуры(Номенклатура, "ВидКультуры").ВидКультурыДляРасчетаСтоимостиУслуги;
	СобственноеПодразделение               = ИНАГРО_Элеватор.ПолучитьДополнительныйРеквизитКонтрагента(Владелец, "СобственноеПодразделение");
	ТекущаяЦена                            = ИНАГРО_Элеватор.ПолучитьЦенуУслугиЭлеватора(Организация, Дата, Владелец, ДоговорКонтрагента, ВидКультурыДляРасчетаСтоимостиУслуги, Урожай,	Номенклатура_СкладскаяКвитанцияПростая);
		
	Если ТекущаяЦена <> 0 И НЕ СобственноеПодразделение Тогда 													 
		
		НоваяСтрока = ТаблицаУслуг.Добавить();
		НоваяСтрока.ДатаРасчета        = Дата;
		НоваяСтрока.Ссылка             = Ссылка; 
		НоваяСтрока.Организация        = Организация;
		НоваяСтрока.Контрагент         = Владелец;
		НоваяСтрока.ДоговорКонтрагента = ДоговорКонтрагента;
		НоваяСтрока.Номенклатура       = Номенклатура_СкладскаяКвитанцияПростая;
		НоваяСтрока.Культура           = Номенклатура;
		НоваяСтрока.Склад              = Склад;
		НоваяСтрока.ВидХранения        = ВидХранения;
		НоваяСтрока.Урожай             = Урожай;
		НоваяСтрока.Количество         = 1;
		НоваяСтрока.Стоимость          = НоваяСтрока.Количество * ТекущаяЦена;
		
	КонецЕсли;
	
	Возврат ТаблицаУслуг;
	
КонецФункции	 

#КонецОбласти

#КонецЕсли