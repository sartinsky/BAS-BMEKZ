#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды 

	КадровыйУчетФормы.ФормаКадровогоДокументаПриСозданииНаСервере(ЭтаФорма);
	
	Если Параметры.Ключ.Пустая() Тогда
		
		// Заполним реквизиты из значений заполнения
		Если Параметры.Свойство("Организация") И ЗначениеЗаполнено(Параметры.Организация) Тогда 
			Объект.Организация = Параметры.Организация;
		КонецЕсли;
		Если Параметры.Свойство("Подразделение") И ЗначениеЗаполнено(Параметры.Подразделение) Тогда 
			Объект.Подразделение = Параметры.Подразделение;
		КонецЕсли;
		
		УстановитьФункциональныеОпцииФормы();
		
	КонецЕсли;
			
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)

	ОбщегоНазначенияБПКлиент.ОбработкаОповещенияФормыДокумента(ЭтаФорма, Объект.Ссылка, ИмяСобытия, Параметр, Источник);

КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	ПодготовитьФормуНаСервере(); 

КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	УстановитьСостояниеДокумента();	
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(
		Элемент.ТекстРедактирования,
		ЭтотОбъект,
		"Объект.Комментарий");

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыШтатныеЕдиницы

&НаКлиенте
Процедура ШтатныеЕдиницыКоличествоСтавокРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Направление = 1 Тогда // увеличиваем значение
		Элементы.ШтатныеЕдиницы.ТекущиеДанные.КоличествоСтавок = Элементы.ШтатныеЕдиницы.ТекущиеДанные.КоличествоСтавок + 0.5
	Иначе // = -1 - уменьшаем значение
		Элементы.ШтатныеЕдиницы.ТекущиеДанные.КоличествоСтавок = Элементы.ШтатныеЕдиницы.ТекущиеДанные.КоличествоСтавок - 0.5
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ШтатныеЕдиницыОсновноеНачислениеПриИзменении(Элемент)
	
	ОсновноеНачисление = Элементы.ШтатныеЕдиницы.ТекущиеДанные.ОсновноеНачисление;
	Если ЗначениеЗаполнено(ОсновноеНачисление) Тогда
		СпособОтражения = ЗначениеРеквизита(ОсновноеНачисление, "СпособОтраженияВБухучете");
		Элементы.ШтатныеЕдиницы.ТекущиеДанные.СпособОтраженияВБухучете = СпособОтражения;
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыНадбавки

&НаКлиенте
Процедура НадбавкиВидНадбавкиПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Надбавки.ТекущиеДанные;
	
	УстановитьВидимостьПоказателей(ТекущиеДанные);
	
	Для СчПоказателей = 1 По 6 Цикл
		ТекущиеДанные["Показатель" + СчПоказателей] = 0;
	КонецЦикла;
	
	// для ночных и вечерних определим "процент отплаты"
	Если ТекущиеДанные.ВидРасчета = ПредопределенноеЗначение("ПланВидовРасчета.ИНАГРО_Начисления.ДоплатаЗаВечерниеЧасы") Тогда
		СтавкаВечерних = ПодучитьСтавкуВечерних(Объект.Организация);
		ТекущиеДанные.Показатель2 = 100*СтавкаВечерних;
	ИначеЕсли ТекущиеДанные.ВидРасчета = ПредопределенноеЗначение("ПланВидовРасчета.ИНАГРО_Начисления.ДоплатаЗаНочныеЧасы") Тогда
		СтавкаНочных = ПодучитьСтавкуНочных(Объект.Организация);
		ТекущиеДанные.Показатель2 = 100*СтавкаНочных;
	КонецЕсли;	

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ПодготовитьФормуНаСервере()
	
	УстановитьСостояниеДокумента();
	УправлениеФормой(ЭтаФорма);
			
КонецПроцедуры

&НаСервере
Процедура УправлениеФормой(Форма)
	
	Для Каждого ТекСтрока Из Объект.Надбавки Цикл
	
		СведенияОВидеРасчета = ПолучитьСведенияОВидеРасчета(ТекСтрока.ВидРасчета);
		ЕстьПоказатели = Ложь;
		Для СчПоказателей = 1 По 6 Цикл
			ТекСтрока["Показатель" + СчПоказателей + "Видимость"] = Ложь;
			Если СчПоказателей <= СведенияОВидеРасчета["КоличествоПоказателей"] Тогда
				Если СведенияОВидеРасчета["Показатель" + СчПоказателей + "Видимость"] Тогда
					ТекСтрока.ЕстьПоказатели = Истина;
					ТекСтрока["Показатель" + СчПоказателей + "Видимость"] = Истина;
					ТекСтрока["ИмяПоказатель" + СчПоказателей] = СведенияОВидеРасчета["Показатель" + СчПоказателей + "Наименование"];
				Иначе
					ТекСтрока["Показатель" + СчПоказателей + "Видимость"] = Ложь;

				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
			
КонецПроцедуры

&НаСервере
Процедура УстановитьФункциональныеОпцииФормы()
	
	ПараметрыФО = Новый Структура("Организация, Период", Объект.Организация, Объект.Дата);
	УстановитьПараметрыФункциональныхОпцийФормы(ПараметрыФО);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСостояниеДокумента()
	
	СостояниеДокумента = ОбщегоНазначенияБП.СостояниеДокумента(Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьПоказателей(ТекСтрока)
	
	СведенияОВидеРасчета = ПолучитьСведенияОВидеРасчета(ТекСтрока.ВидРасчета);
	ЕстьПоказатели = Ложь;
	Для СчПоказателей = 1 По 6 Цикл
		ТекСтрока["Показатель" + СчПоказателей + "Видимость"] = Ложь;
		Если СчПоказателей <= СведенияОВидеРасчета["КоличествоПоказателей"] Тогда
			Если СведенияОВидеРасчета["Показатель" + СчПоказателей + "Видимость"] Тогда
				ТекСтрока.ЕстьПоказатели = Истина;
				ТекСтрока["Показатель" + СчПоказателей + "Видимость"] = Истина;
				ТекСтрока["ИмяПоказатель" + СчПоказателей] = СведенияОВидеРасчета["Показатель" + СчПоказателей + "Наименование"];
			Иначе
				ТекСтрока["Показатель" + СчПоказателей + "Видимость"] = Ложь;

			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
		
КонецПроцедуры

&НаСервере
Функция ЗначениеРеквизита(ОсновноеНачисление, ВидОбъекта)
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОсновноеНачисление, ВидОбъекта); 
	
КонецФункции

&НаСервере
Функция ПодучитьСтавкуВечерних(Организация)
	
	Возврат 100*РегистрыСведений.ИНАГРО_УчетнаяПолитикаПоПерсоналу.Получить(Новый Структура ("Организация", Организация)).КоэффициентВечерних;
	
КонецФункции

&НаСервере
Функция ПодучитьСтавкуНочных(Организация)
	
	Возврат 100*РегистрыСведений.ИНАГРО_УчетнаяПолитикаПоПерсоналу.Получить(Новый Структура ("Организация", Организация)).КоэффициентНочных;
	
КонецФункции

&НаСервере
Функция ПолучитьСведенияОВидеРасчета(ВидРасчета)
	
	Возврат ИНАГРО_ЗарплатаКадрыРасширенныйПовтИсп.ПолучитьСведенияОВидеРасчетаСхемыМотивации(ВидРасчета);
	
КонецФункции

#КонецОбласти 

#Область СлужебныеПроцедурыИФункцииБСП

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти 