#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды 
		
	Если Параметры.Ключ.Пустая() Тогда
		ПодготовитьФормуНаСервере();		
	КонецЕсли;
	
	// Уведомим о появлении функционала рабочей даты
	ЭтаФорма.НастройкиПредупреждений = ОбщегоНазначенияБП.НастройкиПредупрежденийОбИзменениях("РабочаяДатаИзДокумента");
	 
	// Показываем, если это новый документ и сама рабочая дата еще не установлена.
	ЭтаФорма.НастройкиПредупреждений.РабочаяДатаИзДокумента = ЭтаФорма.НастройкиПредупреждений.РабочаяДатаИзДокумента
	 	И ЭтаФорма.Параметры.Ключ.Пустая()
	  	И НЕ ЗначениеЗаполнено(БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("РабочаяДата"));
		
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

	УстановитьВидимостьКомандПечати();	
		
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если  ТипЗнч(Параметр) = Тип("Структура") 
		И Параметр.Свойство("ИдентификаторВызывающейФормы")
		И Параметр.ИдентификаторВызывающейФормы = УникальныйИдентификатор Тогда
		
		Если ИмяСобытия = "СозданЛабораторныйАнализ" ИЛИ ИмяСобытия = "ИзмененЛабораторныйАнализ" Тогда
			
			ТекущиеДанные = Элементы.Культуры.ТекущиеДанные;
			
			Если ИНАГРО_Элеватор.ЛабораторныйАнализПроверкаЗаполнения(Параметр.ДокументСсылка, ПолучитьПараметрыДляПроверкиЗаполнения(ТекущиеДанные)) Тогда				
				ТекущиеДанные.ЛабораторныйАнализ = Параметр.ДокументСсылка;
				КультурыЛабораторныйАнализПриИзменении(Неопределено);
				Модифицированность = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		ОбщегоНазначенияБПКлиент.ОбработкаОповещенияФормыДокумента(ЭтаФорма, Объект.Ссылка, ИмяСобытия, Параметр, Источник);
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	ПодготовитьФормуНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	УстановитьСостояниеДокумента();
	
	СформированныеДокументы.Параметры.УстановитьЗначениеПараметра("Ссылка", Объект.Ссылка);
	
КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	Если НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДатаДокумента) Тогда
		// Изменение времени не влияет на поведение документа.
		ТекущаяДатаДокумента = Объект.Дата;
		Возврат;
	КонецЕсли;
	
	// Общие проверки условий по датам.
	ТребуетсяВызовСервера = ИНАГРО_ЭлеваторКлиент.ТребуетсяВызовСервераПриИзмененииДатыДокумента(Объект.Дата, ТекущаяДатаДокумента);

	// Если определили, что изменение даты может повлиять на какие-либо параметры, 
	// то передаем обработку на сервер.
	Если ТребуетсяВызовСервера Тогда
		ДатаПриИзмененииНаСервере();
	КонецЕсли;
	
	// Запомним новую дату документа.
	ТекущаяДатаДокумента = Объект.Дата;

КонецПроцедуры

&НаСервере
Процедура ДатаПриИзмененииНаСервере()
	
	УстановитьФункциональныеОпцииФормы();
	
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)

	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		ОрганизацияПриИзмененииНаСервере();
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()
	
	ЗаполнитьОстаткиВТабличнойЧасти();

	УстановитьФункциональныеОпцииФормы();
	
	Если ЗначениеЗаполнено(Объект.Владелец) Тогда
		ВладелецПриИзмененииНаСервере();
	КонецЕсли;
	
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ОтражатьВБухгалтерскомУчетеПриИзменении(Элемент)
	
	Если Объект.Культуры.Количество() > 0 Тогда
		
		Если Объект.ОтражатьВБухгалтерскомУчете Тогда		
			ТекстВопроса = НСтр("ru='Установить счета бухгалтерского учета в соответствии со значениями по умолчанию?';uk='Встановити рахунки бухгалтерського обліку відповідно до значень за замовчуванням?'");
		Иначе
			ТекстВопроса = НСтр("ru='Очистить счета бухгалтерского учета?';uk='Очистити рахунки бухгалтерського обліку?'");
		КонецЕсли;
		
		Оповещение = Новый ОписаниеОповещения("ОтражатьВБухгалтерскомУчетеПриИзмененииЗавершение", ЭтотОбъект, Параметры);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);	
		
		Возврат;
		
	КонецЕсли;	
	
	УправлениеФормой(ЭтаФорма); 
	
КонецПроцедуры

&НаКлиенте
Процедура ОтражатьВБухгалтерскомУчетеПриИзмененииЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		УправлениеФормой(ЭтаФорма);
		Возврат;
	КонецЕсли; 	
	
	ОтражатьВБухгалтерскомУчетеПриИзмененииЗавершениеНаСервере();
   
КонецПроцедуры

&НаСервере
Процедура ОтражатьВБухгалтерскомУчетеПриИзмененииЗавершениеНаСервере()
	
	ЗаполнитьСчетаУчетаВТабличнойЧасти();
	
	УправлениеФормой(ЭтаФорма);
   
КонецПроцедуры

&НаКлиенте
Процедура ЦеныИВалютаНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОбработатьИзмененияПоКнопкеЦеныИВалюты();
	
КонецПроцедуры

&НаКлиенте
Процедура ВладелецПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.Владелец) Тогда				
		
		ПараметрыОтбораДоговора = ПолучитьПараметрыДляДоговоров();
		
		ИНАГРО_ЭлеваторЗаполнениеДокументов.ПриИзмененииЗначенияКонтрагента(Объект.Дата, Объект.Организация, Объект.Владелец, Объект.ДоговорКонтрагента, ПараметрыОтбораДоговора);				

		ВладелецПриИзмененииНаСервере();		
				
	КонецЕсли; 	
		
КонецПроцедуры

&НаСервере
Процедура ВладелецПриИзмененииНаСервере()
	
	УстановитьФункциональныеОпцииФормы();
		
	ДоговорКонтрагентаОбработатьИзменение();
	
	ЗаполнитьСчетаУчетаВТабличнойЧасти();
	
	ЗаполнитьОстаткиВТабличнойЧасти();
		
	Объект.ВидОперации = ИНАГРО_Элеватор.ПолучитьОперациюПереоформления(Объект);
		
	УправлениеФормой(ЭтаФорма); 	
	
	УстановитьВидимостьКомандПечати();
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорКонтрагентаПриИзменении(Элемент)

	Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		ДоговорКонтрагентаПриИзмененииНаСервере();
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ДоговорКонтрагентаПриИзмененииНаСервере()

	ДоговорКонтрагентаОбработатьИзменение();	
	
	ЗаполнитьОстаткиВТабличнойЧасти();

	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаСервере
Процедура ДоговорКонтрагентаОбработатьИзменение()
	
	ВалютаДоИзменения 	 = Объект.ВалютаДокумента;
	КурсДоИзменения 	 = Объект.КурсВзаиморасчетов;
	КратностьДоИзменения = Объект.КратностьВзаиморасчетов;
	
	ПерезаполнитьЦены    = Ложь;
	ПересчитатьЦены      = Ложь;
	ПересчитатьНДС       = Ложь;
	
	ДоговорУказан 	  = ЗначениеЗаполнено(Объект.ДоговорКонтрагента);
	РеквизитыДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		Объект.ДоговорКонтрагента,
		"ВалютаВзаиморасчетов, Владелец, ТипЦен, ВидДоговора, ВедениеВзаиморасчетов");
			
	Если ДоговорУказан Тогда
		ВалютаВзаиморасчетов   = РеквизитыДоговора.ВалютаВзаиморасчетов;
		ВедениеВзаиморасчетов  = РеквизитыДоговора.ВедениеВзаиморасчетов;
		
		Объект.ВалютаДокумента 		= ВалютаВзаиморасчетов;
		Если НЕ ЗначениеЗаполнено(Объект.Владелец) Тогда
			Объект.Владелец = РеквизитыДоговора.Владелец;
		КонецЕсли;
	Иначе
		Объект.ВалютаДокумента = ВалютаРегламентированногоУчета;
		ВедениеВзаиморасчетов  = ПредопределенноеЗначение("Перечисление.ВедениеВзаиморасчетовПоДоговорам.ПустаяСсылка");
	КонецЕсли;
		
	УстановитьФункциональныеОпцииФормы();	
	
	Если ВалютаДоИзменения <> Объект.ВалютаДокумента Тогда
		СтруктураКурсаДокумента        = РаботаСКурсамиВалют.ПолучитьКурсВалюты(Объект.ВалютаДокумента, Объект.Дата);
		Объект.КурсВзаиморасчетов      = СтруктураКурсаДокумента.Курс;
		Объект.КратностьВзаиморасчетов = СтруктураКурсаДокумента.Кратность;
	КонецЕсли;
	
	НовыйТипЦен = Объект.ТипЦен;
	Если ДоговорУказан И ЗначениеЗаполнено(РеквизитыДоговора.ТипЦен) Тогда
		НовыйТипЦен = РеквизитыДоговора.ТипЦен;
	КонецЕсли;
	
	ЕстьСтроки = ЕстьСтрокиВТабличныхЧастях();
	
	Если Объект.ВалютаДокумента <> ВалютаДоИзменения
		ИЛИ КурсДоИзменения <> Объект.КурсВзаиморасчетов 
		ИЛИ Объект.ТипЦен <> НовыйТипЦен Тогда
		ПересчитатьЦены = ЕстьСтроки;
	КонецЕсли;
	
	ПрежнийСуммаВключаетНДС = Объект.СуммаВключаетНДС;
	Если ДоговорУказан И ЗначениеЗаполнено(НовыйТипЦен) Тогда
		Объект.ТипЦен 			= НовыйТипЦен;
		Объект.СуммаВключаетНДС = НовыйТипЦен.ЦенаВключаетНДС;
		ПересчитатьНДС 			= Объект.СуммаВключаетНДС <> ПрежнийСуммаВключаетНДС;
	КонецЕсли;	
	
	Объект.ВидОперации = ИНАГРО_Элеватор.ПолучитьОперациюПереоформления(Объект);
	
	Документы.ИНАГРО_Переоформление.ЗаполнитьСчетаУчетаРасчетов(Объект); 
	
	Если ЕстьСтроки И (ПерезаполнитьЦены ИЛИ ПересчитатьЦены ИЛИ ПересчитатьНДС) Тогда
		ЗаполнитьРассчитатьСуммы(ВалютаДоИзменения, КурсДоИзменения, КратностьДоИзменения, ПерезаполнитьЦены, ПересчитатьЦены, ПересчитатьНДС);
	ИначеЕсли ПересчитатьНДС Тогда
		УстановитьЗаголовкиКолонок();
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура СкладПриИзменении(Элемент)

	Если ЗначениеЗаполнено(Объект.Склад) Тогда
		СкладПриИзмененииНаСервере(); 			
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура СкладПриИзмененииНаСервере()
		
	Объект.МестоХранения = Справочники.ИНАГРО_МестаХранения.ПустаяСсылка();
	
	Если НЕ ЗначениеЗаполнено(Объект.НовыйСклад) Тогда
		Объект.НовыйСклад = Объект.Склад;		
	КонецЕсли;
	
	ЗаполнитьОстаткиВТабличнойЧасти();

	УстановитьФункциональныеОпцииФормы();
	
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ВидХраненияПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.ВидХранения) Тогда
		
		ПараметрыОтбораДоговора = ПолучитьПараметрыДляДоговоров();
		
		ИНАГРО_ЭлеваторЗаполнениеДокументов.ПриИзмененииЗначенияКонтрагента(Объект.Дата, Объект.Организация, Объект.Владелец, Объект.ДоговорКонтрагента, ПараметрыОтбораДоговора);
		
		Если НЕ ЗначениеЗаполнено(Объект.НовыйВидХранения) Тогда
			Объект.НовыйВидХранения= Объект.ВидХранения;		
		КонецЕсли;	
		
		ЗаполнитьОстаткиВТабличнойЧасти();
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура НовыйВладелецПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.НовыйВладелец) Тогда				
		
		ПараметрыОтбораДоговора = ПолучитьПараметрыДляДоговоров();
	
		ИНАГРО_ЭлеваторЗаполнениеДокументов.ПриИзмененииЗначенияКонтрагента(Объект.Дата, Объект.Организация, Объект.НовыйВладелец, Объект.НовыйДоговорКонтрагента, ПараметрыОтбораДоговора);				

		НовыйВладелецПриИзмененииНаСервере();
		
	КонецЕсли; 	

КонецПроцедуры

&НаСервере
Процедура НовыйВладелецПриИзмененииНаСервере()
		
	УстановитьФункциональныеОпцииФормы();
	
	ДоговорКонтрагентаОбработатьИзменение();
	
	ЗаполнитьСчетаУчетаВТабличнойЧасти();
	
	ЗаполнитьОстаткиВТабличнойЧасти();

	Объект.ВидОперации = ИНАГРО_Элеватор.ПолучитьОперациюПереоформления(Объект);
	
	УправлениеФормой(ЭтаФорма); 
	
	УстановитьВидимостьКомандПечати()
	
КонецПроцедуры

&НаКлиенте
Процедура НовыйДоговорКонтрагентаПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.НовыйДоговорКонтрагента) Тогда
		НовыйДоговорКонтрагентаПриИзмененииНаСервере();
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура НовыйДоговорКонтрагентаПриИзмененииНаСервере()

	Если НЕ ЗначениеЗаполнено(Объект.НовыйВладелец) Тогда
		Объект.НовыйВладелец = Объект.НовыйДоговорКонтрагента.Владелец;
	КонецЕсли;

	ДоговорКонтрагентаОбработатьИзменение();	
		
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура НовыйСкладПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.НовыйСклад) Тогда
		НовыйСкладПриИзмененииНаСервере();
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура НовыйСкладПриИзмененииНаСервере()
	
	УстановитьФункциональныеОпцииФормы();
	
	УправлениеФормой(ЭтаФорма); 	

КонецПроцедуры

&НаКлиенте
Процедура ПриказНаПереоформлениеПриИзменении(Элемент)
	
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ПриказНаПереоформлениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;

	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Организация", Объект.Организация);
	
	Если ЗначениеЗаполнено(Объект.Владелец) Тогда
		ПараметрыОтбора.Вставить("Владелец",           Объект.Владелец);
	КонецЕсли;	
	Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		ПараметрыОтбора.Вставить("ДоговорКонтрагента", Объект.ДоговорКонтрагента);
	КонецЕсли;
	Если ЗначениеЗаполнено(Объект.НовыйВладелец) Тогда
		ПараметрыОтбора.Вставить("Получатель",         Объект.НовыйВладелец);
	КонецЕсли;	
	Если ЗначениеЗаполнено(Объект.Склад) Тогда
		ПараметрыОтбора.Вставить("Склад",              Объект.Склад);
	КонецЕсли;
	Если ЗначениеЗаполнено(Объект.Урожай) Тогда
		ПараметрыОтбора.Вставить("Урожай",             Объект.Урожай);
	КонецЕсли;
	Если ЗначениеЗаполнено(Объект.ВидХранения) Тогда
		ПараметрыОтбора.Вставить("ВидХранения",        Объект.ВидХранения);
	КонецЕсли;	
		
	ПараметрыОтбора.Вставить("ВидОперации", ПредопределенноеЗначение("Перечисление.ИНАГРО_ВидыОперацийПриказ.Переоформление"));
				
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Отбор",       ПараметрыОтбора);
	ПараметрыФормы.Вставить("Ссылка",      Объект.Ссылка);
	ПараметрыФормы.Вставить("Дата",        Объект.Дата);		
	ПараметрыФормы.Вставить("РежимВыбора", Истина); 
				
	ОткрытьФорму("Документ.ИНАГРО_ПриказНаВывоз.Форма.ФормаВыбораПриказа", ПараметрыФормы, Элемент);

КонецПроцедуры

&НаКлиенте
Процедура ПриказНаПереоформлениеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Объект.ПриказНаПереоформление = ВыбранноеЗначение;
	
	ПолучитьНоменклатуруИзПриказа(ВыбранноеЗначение);	
	
КонецПроцедуры

&НаКлиенте
Процедура ОписаниеДвиженияФормы36НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(
		Элемент.ТекстРедактирования,
		ЭтотОбъект,
		"Объект.ОписаниеДвиженияФормы36",
		НСтр("ru='Описание движения формы 36';uk='Опис руху форми 36'"));

КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(
		Элемент.ТекстРедактирования,
		ЭтотОбъект,
		"Объект.Комментарий");

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыКультуры

&НаКлиенте
Процедура КультурыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущиеДанные = Элементы.Культуры.ТекущиеДанные;
	
	УстановитьДоступностьПоказателейКачества(ТекущиеДанные);

КонецПроцедуры

&НаКлиенте
Процедура КультурыНоменклатураПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Культуры.ТекущиеДанные;
	
	ДанныеСтрокиТаблицы = Новый Структура(
		"Номенклатура, НоваяНоменклатура, ЕдиницаИзмерения,
		|Остаток, СчетУчетаБУ, НовыйСчетУчетаБУ, СтавкаНДС,
		|НалоговоеНазначение, СхемаРеализации, ДокументОприходования
		|");
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, ТекущиеДанные);
	
	ДанныеОбъекта = Новый Структура(
		"Ссылка, Дата, Организация,
		|Владелец, НовыйВладелец, ДоговорКонтрагента, 
		|Склад, НовыйСклад, ВидХранения,
		|Урожай, ТипЦен, ОтражатьВБухгалтерскомУчете
		|");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	ДанныеОбъекта.Вставить("СобственноеПодразделение",                  СобственноеПодразделение);
	ДанныеОбъекта.Вставить("ПоказыватьВДокументахОстатокВЗачетномВесе", ПоказыватьВДокументахОстатокВЗачетномВесе);
	
	КультурыНоменклатураПриИзмененииНаСервере(ДанныеСтрокиТаблицы, ДанныеОбъекта);

	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтрокиТаблицы);	
		
КонецПроцедуры

&НаСервереБезКонтекста
Процедура КультурыНоменклатураПриИзмененииНаСервере(СтрокаТабличнойЧасти, Знач ДанныеОбъекта)
	
	СведенияОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОНоменклатуре(СтрокаТабличнойЧасти.Номенклатура, ДанныеОбъекта);
	Если СведенияОНоменклатуре = Неопределено Тогда
		Возврат;
	КонецЕсли;

	СтрокаТабличнойЧасти.ЕдиницаИзмерения       = СтрокаТабличнойЧасти.Номенклатура.БазоваяЕдиницаИзмерения;	
	СтрокаТабличнойЧасти.СтавкаНДС				= СтрокаТабличнойЧасти.НоваяНоменклатура.СтавкаНДС;	
	СтрокаТабличнойЧасти.ДокументОприходования  = ДанныеОбъекта.Ссылка;
	
	Документы.ИНАГРО_Переоформление.ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(ДанныеОбъекта, СтрокаТабличнойЧасти, СведенияОНоменклатуре);
	Документы.ИНАГРО_Переоформление.ЗаполнитьОстаткиВСтрокеТабличнойЧасти(ДанныеОбъекта, СтрокаТабличнойЧасти);

	Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.НоваяНоменклатура) Тогда
		СтрокаТабличнойЧасти.НоваяНоменклатура = СтрокаТабличнойЧасти.Номенклатура;	
		Документы.ИНАГРО_Переоформление.ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(ДанныеОбъекта, СтрокаТабличнойЧасти, , СведенияОНоменклатуре);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура КультурыНоваяНоменклатураПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Культуры.ТекущиеДанные;		
	
	ДанныеСтрокиТаблицы = Новый Структура(
		"Номенклатура, НоваяНоменклатура, ЕдиницаИзмерения,
		|Остаток, СчетУчетаБУ, НовыйСчетУчетаБУ, СтавкаНДС,
		|НалоговоеНазначение, СхемаРеализации, ДокументОприходования
		|");
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, ТекущиеДанные);
	
	ДанныеОбъекта = Новый Структура(
		"Дата, Организация, Владелец,
		|НовыйВладелец, Склад, ТипЦен,
		|ОтражатьВБухгалтерскомУчете");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
	Если НЕ ЗначениеЗаполнено(ДанныеСтрокиТаблицы.НоваяНоменклатура) Тогда
		ДанныеСтрокиТаблицы.НоваяНоменклатура = ДанныеСтрокиТаблицы.Номенклатура;
		ДанныеОбъекта.Вставить("Склад", Объект.Склад);
	Иначе
		ДанныеОбъекта.Вставить("Склад", Объект.НовыйСклад);
	КонецЕсли;

	ДанныеОбъекта.Вставить("СобственноеПодразделение", СобственноеПодразделение);
		
	КультурыНоваяНоменклатураПриИзмененииНаСервере(ДанныеСтрокиТаблицы, ДанныеОбъекта);
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтрокиТаблицы);	
		
КонецПроцедуры

&НаСервереБезКонтекста
Процедура КультурыНоваяНоменклатураПриИзмененииНаСервере(СтрокаТабличнойЧасти, Знач ДанныеОбъекта)
	
	СведенияОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОНоменклатуре(СтрокаТабличнойЧасти.НоваяНоменклатура, ДанныеОбъекта);
	Если СведенияОНоменклатуре = Неопределено Тогда
		Возврат;
	КонецЕсли;		
	
	Документы.ИНАГРО_Переоформление.ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(ДанныеОбъекта, СтрокаТабличнойЧасти, , СведенияОНоменклатуре);

КонецПроцедуры

&НаКлиенте
Процедура КультурыКоличествоФасовкиПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Культуры.ТекущиеДанные;
	
	Если ЗначениеЗаполнено(ТекущиеДанные.Фасовка) Тогда
		
		ДанныеСтрокиТаблицы = Новый Структура(
			"Фасовка, КоличествоФасовки, ФизическийВес,
			|ЗачетныйВес");
		ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, ТекущиеДанные); 
		
		КультурыКоличествоФасовкиПриИзмененииНаСервере(ДанныеСтрокиТаблицы);
		
		ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтрокиТаблицы); 
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура КультурыКоличествоФасовкиПриИзмененииНаСервере(СтрокаТабличнойЧасти)
	
	СтрокаТабличнойЧасти.ФизическийВес = СтрокаТабличнойЧасти.Фасовка.Вес * СтрокаТабличнойЧасти.КоличествоФасовки;
	СтрокаТабличнойЧасти.ЗачетныйВес   = СтрокаТабличнойЧасти.ФизическийВес;
	
КонецПроцедуры

&НаКлиенте
Процедура КультурыФизическийВесПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Культуры.ТекущиеДанные;

	ТекущиеДанные.Количество  = ТекущиеДанные.ФизическийВес; 
	ТекущиеДанные.ЗачетныйВес = ТекущиеДанные.ФизическийВес;
	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(ТекущиеДанные);
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(ТекущиеДанные, Объект.СуммаВключаетНДС);

КонецПроцедуры

&НаКлиенте
Процедура КультурыЛабораторныйАнализПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Культуры.ТекущиеДанные;	
	
	ДанныеСтрокиТаблицы = Новый Структура(
		"ЛабораторныйАнализ, НомерАнализа, Влажность,
		|СорнаяПримесь, ЗерноваяПримесь, ЗачетныйВес,
		|Масличность");
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, ТекущиеДанные); 
		
	ПараметрыДляРасчетаЗачетногоВеса = ПолучитьПараметрыДляРасчетаЗачетногоВеса(ТекущиеДанные);

	ИНАГРО_Элеватор.ЛабораторныйАнализПриИзмененииНаСервере(ДанныеСтрокиТаблицы, ПараметрыДляРасчетаЗачетногоВеса);
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтрокиТаблицы);
		
	УстановитьДоступностьПоказателейКачества(ТекущиеДанные);

	УправлениеФормой(ЭтаФорма);
		
КонецПроцедуры

&НаКлиенте
Процедура КультурыЛабораторныйАнализНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыОтбора = Новый Структура;
	
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		ПараметрыОтбора.Вставить("Организация",        Объект.Организация);		
	КонецЕсли;	
	Если ЗначениеЗаполнено(Объект.Владелец) Тогда
		ПараметрыОтбора.Вставить("Владелец",           Объект.Владелец);
	КонецЕсли;	
	Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		ПараметрыОтбора.Вставить("ДоговорКонтрагента", Объект.ДоговорКонтрагента);		
	КонецЕсли;	
	Если ЗначениеЗаполнено(Объект.Склад) Тогда
		ПараметрыОтбора.Вставить("Склад",              Объект.Склад);
	КонецЕсли;	
	Если ЗначениеЗаполнено(Объект.ВидХранения) Тогда
		ПараметрыОтбора.Вставить("ВидХранения",        Объект.ВидХранения);
	КонецЕсли;
	
	ТекущиеДанные = Элементы.Культуры.ТекущиеДанные;
	Если ЗначениеЗаполнено(ТекущиеДанные.Номенклатура) Тогда
		ПараметрыОтбора.Вставить("Номенклатура",       ТекущиеДанные.Номенклатура);
	КонецЕсли;	
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Отбор",  ПараметрыОтбора);
	ПараметрыФормы.Вставить("Ссылка", Объект.Ссылка);
	
	ОткрытьФорму("Документ.ИНАГРО_ЛабораторныйАнализ.Форма.ФормаВыбора", ПараметрыФормы, Элемент, УникальныйИдентификатор, , , , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура КультурыВлажностьПриИзменении(Элемент)
	
	КультурыПоказателиКачестваПриИзменении();

КонецПроцедуры

&НаКлиенте
Процедура КультурыСорнаяПримесьПриИзменении(Элемент)
	
	КультурыПоказателиКачестваПриИзменении();
	
КонецПроцедуры

&НаКлиенте
Процедура КультурыЗерноваяПримесьПриИзменении(Элемент)
	
	КультурыПоказателиКачестваПриИзменении();

КонецПроцедуры

&НаКлиенте
Процедура КультурыПоказателиКачестваПриИзменении()
	
	ТекущиеДанные = Элементы.Культуры.ТекущиеДанные;
	
	ТекущиеДанные.ЗачетныйВес = ТекущиеДанные.ФизическийВес;

КонецПроцедуры

&НаКлиенте
Процедура КультурыЦенаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Культуры.ТекущиеДанные;
	
	ТекущиеДанные.Количество  = ТекущиеДанные.ФизическийВес;
	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(ТекущиеДанные);
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(ТекущиеДанные, Объект.СуммаВключаетНДС);

КонецПроцедуры

&НаКлиенте
Процедура КультурыСуммаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Культуры.ТекущиеДанные;
		
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(ТекущиеДанные, Объект.СуммаВключаетНДС);

КонецПроцедуры

&НаКлиенте
Процедура КультурыСтавкаНДСПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Культуры.ТекущиеДанные;
		
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(ТекущиеДанные, Объект.СуммаВключаетНДС);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыУслуги

&НаКлиенте
Процедура УслугиНоменклатураПриИзменении(Элемент)
	
	Для Каждого СтрокаТабличнойЧасти Из Объект.Услуги Цикл
		Объект.Номенклатура = СтрокаТабличнойЧасти.Номенклатура;
		Прервать;
	КонецЦикла;	

	ТекущиеДанные = Элементы.Услуги.ТекущиеДанные;
	
	ВидКультурыДляРасчетаСтоимостиУслуги = УслугиНоменклатураПриИзмененииНаСервере(Объект.Номенклатура);

	ТекущиеДанные.Цена = ИНАГРО_Элеватор.ПолучитьЦенуУслугиЭлеватора(Объект.Организация, Объект.Дата, Объект.Владелец,
																	 Объект.ДоговорКонтрагента, ВидКультурыДляРасчетаСтоимостиУслуги, Объект.Урожай,
																	 ТекущиеДанные.Номенклатура);
	
	УслугиКоличествоЦенаПриИзменении();

КонецПроцедуры

&НаСервереБезКонтекста
Функция УслугиНоменклатураПриИзмененииНаСервере(Номенклатура)
	
	Возврат ИНАГРО_Элеватор.ПолучитьДополнительныйРеквизитНоменклатуры(Номенклатура, "ВидКультуры").ВидКультурыДляРасчетаСтоимостиУслуги; 	
	
КонецФункции

&НаКлиенте
Процедура УслугиЦенаПриИзменении(Элемент)
	
	УслугиКоличествоЦенаПриИзменении();
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиКоличествоЦенаПриИзменении()
	
	ТекущиеДанные = Элементы.Услуги.ТекущиеДанные;
	
	ТекущиеДанные.Сумма = ТекущиеДанные.Количество * ТекущиеДанные.Цена;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСформированныеДокументы

&НаКлиенте
Процедура СформированныеДокументыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДокументСсылка = Элемент.ТекущиеДанные.ТиповыйДокумент;
	
	Если ДокументСсылка <> Неопределено Тогда 	
		
		ИмяТиповогоДокумента = СформированныеДокументыВыборНаСервере(ДокументСсылка);
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Ключ", ДокументСсылка);
		
		ОткрытьФорму("Документ." + ИмяТиповогоДокумента + ".Форма.ФормаДокументаОбщая", ПараметрыФормы);
		
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Функция СформированныеДокументыВыборНаСервере(ДокументСсылка)
	
	ИмяТиповогоДокумента = ДокументСсылка.Метаданные().Имя;
	
	Возврат ИмяТиповогоДокумента;
	
КонецФункции

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура СоздатьЛабораторныйАнализ(Команда)
	
	Если ТекущийЭлемент = Элементы.Культуры Тогда
		
		ТекущиеДанные = Элементы.Культуры.ТекущиеДанные;
		
		Если Объект.Культуры.Количество() = 0 ИЛИ ТекущиеДанные = Неопределено Тогда			
			Возврат;
		Иначе
			
			ЗначенияЗаполнения = Новый Структура;
			ЗначенияЗаполнения.Вставить("Ссылка",             ПредопределенноеЗначение("Документ.ИНАГРО_ЛабораторныйАнализ.ПустаяСсылка"));
			ЗначенияЗаполнения.Вставить("Дата",               Объект.Дата);
			ЗначенияЗаполнения.Вставить("Организация",        Объект.Организация);
			ЗначенияЗаполнения.Вставить("Владелец",           Объект.Владелец);
			ЗначенияЗаполнения.Вставить("ДоговорКонтрагента", Объект.ДоговорКонтрагента);
			ЗначенияЗаполнения.Вставить("Склад",        	  Объект.Склад);
			ЗначенияЗаполнения.Вставить("ВидХранения",        Объект.ВидХранения);
			ЗначенияЗаполнения.Вставить("Урожай",             Объект.Урожай);
			ЗначенияЗаполнения.Вставить("Номенклатура",       ТекущиеДанные.Номенклатура);
			ЗначенияЗаполнения.Вставить("Влажность",          ТекущиеДанные.Влажность);
			ЗначенияЗаполнения.Вставить("СорнаяПримесь",      ТекущиеДанные.СорнаяПримесь);
			ЗначенияЗаполнения.Вставить("ЗерноваяПримесь",    ТекущиеДанные.ЗерноваяПримесь);
			
			ЗначенияЗаполнения.Вставить("МассаПартии",        ТекущиеДанные.ФизическийВес); 
			
			ЗначенияЗаполнения.Вставить("СтанцияОтправления", СокрЛП(Объект.Владелец));
			ЗначенияЗаполнения.Вставить("СтанцияНазначения",  СокрЛП(Объект.НовыйВладелец)); 	

			ИНАГРО_ЭлеваторКлиент.СоздатьДокументНаОсновании(ЭтаФорма, ЗначенияЗаполнения);
			
		КонецЕсли;
		
	Иначе	
		
		ТекстСообщения = НСтр("ru='Лабораторный анализ можно создать только для строки табличной части!';uk='Лабораторний аналіз можна створити тільки для рядка табличної частини!'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Объект.Культуры");
		ТекущийЭлемент = Элементы.Культуры;
		
		Возврат;	
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СоздатьСкладскуюКвитанцию(Команда)
	
	ЗначенияЗаполнения = Новый Структура;
	ЗначенияЗаполнения.Вставить("Ссылка",     ПредопределенноеЗначение("Документ.ИНАГРО_СкладскаяКвитанция.ПустаяСсылка"));
	
	ИНАГРО_ЭлеваторКлиент.СоздатьДокументНаОсновании(ЭтаФорма, ЗначенияЗаполнения);

КонецПроцедуры

&НаКлиенте
Процедура СоздатьСкладскуюКвитанциюЗавершение(ИмяДокумента) Экспорт
	
	Для Каждого СтрокаТабличнойЧасти Из Объект.Культуры Цикл
		СоздатьСкладскуюКвитанциюСоздание(СтрокаТабличнойЧасти, ИмяДокумента);		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьСкладскуюКвитанциюСоздание(Знач СтрокаТабличнойЧасти, ИмяДокумента)
			
	ЗначенияЗаполнения = Новый Структура(
		"Ссылка, Дата, Организация,
		|Владелец, НовыйВладелец, НовыйДоговорКонтрагента,
		|НовыйСклад, НовыйВидХранения, Урожай,
		|ДоверенностьСерия");
	ЗаполнитьЗначенияСвойств(ЗначенияЗаполнения, Объект);
	
	ДанныеСтрокиТаблицы = Новый Структура(
		"СкладскаяКвитанция, НомерСтроки, НоваяНоменклатура, 
		|ФизическийВес, ЗачетныйВес, ЛабораторныйАнализ, 
		|Влажность, СорнаяПримесь, ЗерноваяПримесь
		|");	
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, СтрокаТабличнойЧасти);
	
	ЗначенияЗаполнения.Вставить("СтрокаТабличнойЧасти", ДанныеСтрокиТаблицы);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения); 
	ПараметрыФормы.Вставить("IDСтроки",  		  СтрокаТабличнойЧасти.IDСтроки);

	ОповещениеОЗакрытии = Новый ОписаниеОповещения("СоздатьСкладскуюКвитанциюЗакрытие", ЭтотОбъект);

	ОткрытьФорму("Документ." + ИмяДокумента + ".Форма.ФормаДокумента", ПараметрыФормы, , Новый УникальныйИдентификатор(), , , ОповещениеОЗакрытии, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьСкладскуюКвитанциюЗакрытие(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	ЭтаФорма.Прочитать();

КонецПроцедуры

&НаКлиенте
Процедура СоздатьПереоформлениеЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если РезультатЗакрытия <> Неопределено Тогда
		
		ЗначенияЗаполнения = Новый Структура;
		ЗначенияЗаполнения.Вставить("Ссылка",             Объект.Ссылка);	
		ЗначенияЗаполнения.Вставить("Организация",        Объект.Организация);
		ЗначенияЗаполнения.Вставить("ВидОперации",        Объект.ВидОперации);
		ЗначенияЗаполнения.Вставить("Владелец",           Объект.Владелец);
		ЗначенияЗаполнения.Вставить("ДоговорКонтрагента", Объект.ДоговорКонтрагента);	
		ЗначенияЗаполнения.Вставить("Получатель", 		  Объект.Получатель);
		ЗначенияЗаполнения.Вставить("ДоговорПолучателя",  Объект.ДоговорПолучателя);
		ЗначенияЗаполнения.Вставить("Склад",        	  Объект.Склад);	
		ЗначенияЗаполнения.Вставить("МестоХранения",      Объект.МестоХранения);	
		ЗначенияЗаполнения.Вставить("Урожай",             Объект.Урожай);
		ЗначенияЗаполнения.Вставить("ВидХранения",        Объект.ВидХранения);
		ЗначенияЗаполнения.Вставить("ВидПеревозки",       Объект.ВидПеревозки);
		ЗначенияЗаполнения.Вставить("ПунктНазначения",    Объект.ПунктНазначения);
		
		ЗначенияЗаполнения.Вставить("Номенклатура",       РезультатЗакрытия.Номенклатура);
		
		Если Объект.Культуры.Количество() > 0 Тогда
			СтруктураОтбора = Новый Структура("Номенклатура", РезультатЗакрытия.Номенклатура);
			СтрокаТабличнойЧасти = ОбработкаТабличныхЧастейКлиентСервер.НайтиСтрокуТабЧасти(Объект, "Культуры", СтруктураОтбора);
			Если СтрокаТабличнойЧасти <> Неопределено Тогда
				ЗначенияЗаполнения.Вставить("ЛабораторныйАнализ", СтрокаТабличнойЧасти.ЛабораторныйАнализ);
				ЗначенияЗаполнения.Вставить("НомерАнализа",       СтрокаТабличнойЧасти.НомерАнализа);
				ЗначенияЗаполнения.Вставить("Влажность",          СтрокаТабличнойЧасти.Влажность);
				ЗначенияЗаполнения.Вставить("СорнаяПримесь",      СтрокаТабличнойЧасти.СорнаяПримесь);
				ЗначенияЗаполнения.Вставить("ЗерноваяПримесь",    СтрокаТабличнойЧасти.ЗерноваяПримесь);
			КонецЕсли;
		КонецЕсли;
		
		ЗначенияЗаполнения.Вставить("ДоверенностьДата",   Объект.ДоверенностьДата);
		ЗначенияЗаполнения.Вставить("ДоверенностьНомер",  Объект.ДоверенностьНомер);
		ЗначенияЗаполнения.Вставить("ДоверенностьСерия",  Объект.ДоверенностьСерия);
		ЗначенияЗаполнения.Вставить("ДоверенностьЧерез",  Объект.ДоверенностьЧерез);
		ЗначенияЗаполнения.Вставить("Комментарий",        Объект.Комментарий);	
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения); 
		
		ОткрытьФорму("Документ.ИНАГРО_Переоформление.Форма.ФормаДокумента", ПараметрыФормы, ЭтаФорма, УникальныйИдентификатор); 

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СоздатьСкладскуюКвитанциюДвойную(Команда)
	
	ЗначенияЗаполнения = Новый Структура;
	ЗначенияЗаполнения.Вставить("Ссылка",  ПредопределенноеЗначение("Документ.ИНАГРО_СкладскаяКвитанцияДвойная.ПустаяСсылка"));
	
	ИНАГРО_ЭлеваторКлиент.СоздатьДокументНаОсновании(ЭтаФорма, ЗначенияЗаполнения);

КонецПроцедуры

&НаКлиенте
Процедура СоздатьСкладскуюКвитанциюПростую(Команда)
	
	ЗначенияЗаполнения = Новый Структура;
	ЗначенияЗаполнения.Вставить("Ссылка",  ПредопределенноеЗначение("Документ.ИНАГРО_СкладскаяКвитанцияПростая.ПустаяСсылка"));
	
	ИНАГРО_ЭлеваторКлиент.СоздатьДокументНаОсновании(ЭтаФорма, ЗначенияЗаполнения);

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоПриказу(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.ПриказНаПереоформление) Тогда
		ТекстСообщения = НСтр("ru='Не выбран приказ на переоформление';uk='Не обраний наказ на переоформлення'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Элементы.ПриказНаПереоформление");				
		Возврат;
	КонецЕсли;
	
	ПолучитьНоменклатуруИзПриказа(Объект.ПриказНаПереоформление);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьУслуги(Команда)
	
	ЗаполнитьУслугиНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьУслугиНаСервере()
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");	
	ДокументОбъект.ЗаполнитьУслуги(); 	
	ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьДокументы(Команда)
	
	Если ФормироватьБухДокументыПереоформленияОтражением Тогда
		ТекстСообщения = НСтр("ru='Типовые документы по переоформлению формируются ""Отражением ввоза/вывоза собственного зерна в регламентированном учете"" (Параметры учета (элеватор)';uk='Типові документи по переоформленню формуються ""Відображенням ввезення/вивезення власноо зерна в регламентованому обліку"" (Параметри обліку (елеватор)'");			
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;

	Если Объект.Культуры.Количество() > 0 Тогда	
		
		Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ИНАГРО_ВидыОперацийПереоформления.Поступление") Тогда
			ВидОперацииФормирования = НСтр("ru='поступления';uk='надходження'");   		
		ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ИНАГРО_ВидыОперацийПереоформления.Реализация") Тогда
			ВидОперацииФормирования = НСтр("ru='реализации';uk='реалізації'");
		Иначе
			ТекстСообщения = НСтр("ru='Типовые документы реализации или поступления можно формировать, если один из владелец являестся собственным подразделением!';uk='Типові документи реалізації або надходження можна формувать, якщо один власник є власним підрозділом'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			Возврат;
		КонецЕсли;
		
		Отказ = Ложь;
		
		Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
			Отказ = Истина;
		ИначеЕсли ЗначениеЗаполнено(Объект.Ссылка) И НЕ Объект.Проведен Тогда	
			Отказ = Истина;
		ИначеЕсли Объект.Проведен И Модифицированность Тогда
			Отказ = Истина;
		КонецЕсли; 	
		
		Если Отказ Тогда			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Перед формированием %1 документ необходимо провести!';uk='Перед формуванням %1 документ необхідно провести!'"), ВидОперацииФормирования);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);					
			Возврат;		
		Иначе
			
			СформироватьДокументыНаСервере(Отказ);
			
			Если  Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ИНАГРО_ВидыОперацийПереоформления.Поступление")
				И Объект.ОткрыватьФормуПоступления Тогда
				
				ПоступлениеТоваровУслуг  = ПолучитьПоступлениеТоваровУслуг(Объект.Ссылка);
				
				ПараметрыФормы = Новый Структура;
				ПараметрыФормы.Вставить("Ключ", ПоступлениеТоваровУслуг);
				
				ОткрытьФорму("Документ.ПоступлениеТоваровУслуг.Форма.ФормаДокументаОбщая", ПараметрыФормы, , УникальныйИдентификатор, , , , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
				
			КонецЕсли;

		КонецЕсли;
		
	Иначе
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Нет документов для обработки.';uk='Немає документів для обробки.'"));
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьДокументыНаСервере(Отказ)
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");	
	ИНАГРО_Элеватор.СформироватьПодчиненныеДокументы(ДокументОбъект, Отказ); 	
	ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");	

	Элементы.СформированныеДокументы.Обновить();
	
КонецПроцедуры

&НаКлиенте
Процедура Обновить(Команда)
	
	Элементы.СформированныеДокументы.Обновить();

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ПодготовитьФормуНаСервере()
	
	ТекущаяДатаДокумента = Объект.Дата;
	
	ВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
		
	УстановитьФункциональныеОпцииФормы();
	
	ПоказыватьВДокументахОстатокВЗачетномВесе = ИНАГРО_ЭлеваторЗаполнениеДокументов.ПолучитьЗначениеПоУмолчанию("ПоказыватьВДокументахОстатокВЗачетномВесе");	
	
	УправлениеФормой(ЭтаФорма);
	
	УстановитьЗаголовкиКолонок();
	
	УстановитьСостояниеДокумента();
	
	СформированныеДокументы.Параметры.УстановитьЗначениеПараметра("Ссылка", Объект.Ссылка);
	
КонецПроцедуры 

&НаСервере
Процедура УстановитьФункциональныеОпцииФормы()

	ОбщегоНазначенияБПКлиентСервер.УстановитьПараметрыФункциональныхОпцийФормыДокумента(ЭтаФорма);
	
	ПараметрыУчетаЭлеватора                         = ИНАГРО_Элеватор.ПолучитьПараметрыУчетаЭлеватора(Объект.Дата);
	ЛабораторияРаботаетВСистеме                     = ПараметрыУчетаЭлеватора.ЛабораторияРаботаетВСистеме;
	РассчитыватьХранениеПоФизическомуВесу           = ПараметрыУчетаЭлеватора.РассчитыватьХранениеПоФизическомуВесу;
	ФормироватьБухДокументыПереоформленияОтражением = ПараметрыУчетаЭлеватора.ФормироватьБухДокументыПереоформленияОтражением;
	
	СобственноеПодразделение                        = ИНАГРО_Элеватор.ПолучитьДополнительныйРеквизитКонтрагента(Объект.НовыйВладелец, "СобственноеПодразделение");
	ВидимостьМестаХранения                          = ИНАГРО_Элеватор.ПолучитьДополнительныйРеквизитСклада(Объект.Склад, "ВестиУчетПоМестамХранения");
	ВидимостьНовогоМестаХранения                    = ИНАГРО_Элеватор.ПолучитьДополнительныйРеквизитСклада(Объект.НовыйСклад, "ВестиУчетПоМестамХранения");

	ВидимостьМасличность                            = ИНАГРО_Элеватор.ПолучитьВидимостьМасличность(Объект.Дата);
	
	ПлательщикНДС			                        = УчетнаяПолитика.ПлательщикНДС(Объект.Организация, Объект.Дата);
	ПлательщикНалогаНаПрибыльДо2015                 = УчетнаяПолитика.ПлательщикНалогаНаПрибыльДо2015(Объект.Организация, Объект.Дата);

КонецПроцедуры 

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)

	Элементы = Форма.Элементы;
	Объект   = Форма.Объект;	
		
	Элементы.ПереоформлениеПоФизическомуВесу.Видимость = Форма.РассчитыватьХранениеПоФизическомуВесу;	
		
	ЕстьПриказНаПереоформление = ЗначениеЗаполнено(Объект.ПриказНаПереоформление);
	
	Элементы.Владелец.Доступность                = НЕ ЕстьПриказНаПереоформление;
	Элементы.Склад.Доступность                   = НЕ ЕстьПриказНаПереоформление;
	Элементы.ДоговорКонтрагента.Доступность      = НЕ ЕстьПриказНаПереоформление;
	Элементы.ВидХранения.Доступность             = НЕ ЕстьПриказНаПереоформление;
	Элементы.НовыйВладелец.Доступность           = НЕ ЕстьПриказНаПереоформление;
	Элементы.НовыйДоговорКонтрагента.Доступность = НЕ ЕстьПриказНаПереоформление;
	Элементы.НовыйСклад.Доступность              = НЕ ЕстьПриказНаПереоформление;
	Элементы.НовыйВидХранения.Доступность        = НЕ ЕстьПриказНаПереоформление;
	
	Элементы.МестоХранения.Видимость             = Форма.ВидимостьМестаХранения;
	Элементы.НовоеМестоХранения.Видимость        = Форма.ВидимостьНовогоМестаХранения;
	
	Элементы.ГруппаРеквизитыДоверенностиЛевая.Видимость = НЕ Объект.ПолучилПоДругомуДокументу; 
	Элементы.ДокументПодтверждающийПолномочия.Видимость = Объект.ПолучилПоДругомуДокументу;	
	
	Элементы.КультурыЛабораторныйАнализ.Видимость = Форма.ЛабораторияРаботаетВСистеме;	
	Элементы.КультурыСчетУчетаБУ.Видимость        = Объект.ОтражатьВБухгалтерскомУчете;
	Элементы.КультурыНовыйСчетУчетаБУ.Видимость   = Объект.ОтражатьВБухгалтерскомУчете;
	Элементы.КультурыСхемаРеализации.Видимость    = Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ИНАГРО_ВидыОперацийПереоформления.Реализация");

	СформироватьНадписьЦеныИВалюта(Форма);
	
	// Масличность
	Элементы.КультурыМасличность.Видимость = Форма.ВидимостьМасличность;

КонецПроцедуры

&НаСервере
Процедура УстановитьЗаголовкиКолонок()
	
	ЗаголовокЦена  = ?(ПлательщикНДС, ?(Объект.СуммаВключаетНДС, НСтр("ru='Цена с НДС';uk='Ціна з ПДВ'"), НСтр("ru='Цена без НДС';uk='Ціна без ПДВ'")), НСтр("ru='Цена';uk='Ціна'"));
	ЗаголовокСумма = ?(ПлательщикНДС, ?(Объект.СуммаВключаетНДС, НСтр("ru='Сумма с НДС';uk='Сума з ПДВ'"), НСтр("ru='Сумма без НДС';uk='Сума без ПДВ'")), НСтр("ru='Сумма';uk='Сума'"));
		
	Элементы.КультурыЦена.Заголовок  = ЗаголовокЦена;
	Элементы.КультурыСумма.Заголовок = ЗаголовокСумма;	

КонецПроцедуры

&НаСервере
Процедура УстановитьСостояниеДокумента()
	
	СостояниеДокумента = ОбщегоНазначенияБП.СостояниеДокумента(Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппаСтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	Элементы.СформированныеДокументы.Обновить(); 

КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьПоказателейКачества(СтрокаТабличнойЧасти)
	
	СписокРеквизитов = Новый Структура("Влажность, СорнаяПримесь, ЗерноваяПримесь");	
	ИНАГРО_ЭлеваторКлиентСервер.УстановитьДоступностьРеквизитовПоНастройке(ЭтаФорма, СписокРеквизитов, ЛабораторияРаботаетВСистеме, ЗначениеЗаполнено(СтрокаТабличнойЧасти.ЛабораторныйАнализ), "Культуры");

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСчетаУчетаВТабличнойЧасти()
	
	Документы.ИНАГРО_Переоформление.ЗаполнитьСчетаУчетаВТабличнойЧасти(Объект, "Культуры");
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОстаткиВТабличнойЧасти()

	Документы.ИНАГРО_Переоформление.ЗаполнитьОстаткиВТабличнойЧасти(Объект, "Культуры", ПоказыватьВДокументахОстатокВЗачетномВесе);

КонецПроцедуры

&НаКлиенте
Процедура ПолучитьНоменклатуруИзПриказа(ВыбранноеЗначение)
	
	СписокВыбора = Новый СписокЗначений;
	
	СписокВыбора = ПолучитьНоменклатуруИзПриказаНаСервере(СписокВыбора, ВыбранноеЗначение);
		
	Если СписокВыбора.Количество() > 1 Тогда
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("СписокВыбора", СписокВыбора); 
		
		ОткрытьФорму("ОбщаяФорма.ИНАГРО_ФормаВыбораКультуры", ПараметрыФормы, ЭтаФорма, УникальныйИдентификатор, , , , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	ИначеЕсли СписокВыбора.Количество() = 1 Тогда
		
		Объект.Номенклатура = СписокВыбора.Получить(0).Значение;
		ПолучитьНоменклатуруИзПриказаНаСервереЗаверешение(ВыбранноеЗначение);
		
	КонецЕсли;	
	              	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьНоменклатуруИзПриказаНаСервере(СписокВыбора, Ссылка)
			
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ИНАГРО_ПриказНаВывозКультуры.Номенклатура
		|ИЗ
		|	Документ.ИНАГРО_ПриказНаВывоз.Культуры КАК ИНАГРО_ПриказНаВывозКультуры
		|ГДЕ
		|	ИНАГРО_ПриказНаВывозКультуры.Ссылка = &Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	ИНАГРО_ПриказНаВывозКультуры.Номенклатура";
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		СписокВыбора.Добавить(ВыборкаДетальныеЗаписи.Номенклатура);
	КонецЦикла;	

	Возврат СписокВыбора;

КонецФункции

&НаСервере
Процедура ПолучитьНоменклатуруИзПриказаНаСервереЗаверешение(Ссылка)
	
	Объект.Культуры.Очистить();
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");	
	ДокументОбъект.ЗаполнитьПоДокументуОснованию(Ссылка, Объект.Номенклатура); 	
	ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
	
	УстановитьФункциональныеОпцииФормы();
		
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьПараметрыДляДоговоров()

	ПараметрыОтбора = Новый Структура("ВидХранения, Урожай");
	ЗаполнитьЗначенияСвойств(ПараметрыОтбора, Объект);

	Возврат ПараметрыОтбора;

КонецФункции

&НаКлиенте
Функция ПолучитьПараметрыДляПроверкиЗаполнения(СтрокаТабличнойЧасти)
	
	ПараметрыДляПроверкиЗаполнения = Новый Структура("Склад, ВидХранения, Урожай");
	ЗаполнитьЗначенияСвойств(ПараметрыДляПроверкиЗаполнения, Объект);
	ПараметрыДляПроверкиЗаполнения.Вставить("Номенклатура", СтрокаТабличнойЧасти.Номенклатура);

	Возврат ПараметрыДляПроверкиЗаполнения; 

КонецФункции

&НаКлиенте
Функция ПолучитьПараметрыДляРасчетаЗачетногоВеса(СтрокаТабличнойЧасти)
	
	ПараметрыДляРасчетаЗачетногоВеса = Новый Структура(
		"Ссылка, Дата, Организация,
		|Владелец, ДоговорКонтрагента, Номенклатура,
		|Склад, Влажность, СорнаяПримесь,
		|ФизическийВес, ЗачетныйВес");
	ЗаполнитьЗначенияСвойств(ПараметрыДляРасчетаЗачетногоВеса, Объект);
	ЗаполнитьЗначенияСвойств(ПараметрыДляРасчетаЗачетногоВеса, СтрокаТабличнойЧасти);

	Возврат ПараметрыДляРасчетаЗачетногоВеса; 

КонецФункции

&НаСервере
Функция ЕстьСтрокиВТабличныхЧастях()

	ЕстьСтроки = Объект.Культуры.Количество() > 0;		
	
	Возврат ЕстьСтроки; 	
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьПоступлениеТоваровУслуг(ДокументИсточник)
	
	Запрос = Новый Запрос;	
	
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ТаблицаРегистра.ДокументИсточник КАК ДокументИсточник,
		|	ТаблицаРегистра.ИмяТиповогоДокумента КАК ИмяТиповогоДокумента,
		|	ТаблицаРегистра.ПорядковыйНомерТиповогоДокумента КАК ПорядковыйНомерТиповогоДокумента,
		|	ТаблицаРегистра.ТиповыйДокумент КАК ТиповыйДокумент,
		|	ТаблицаРегистра.ЗапретРедактирования КАК ЗапретРедактирования
		|ИЗ
		|	РегистрСведений.ИНАГРО_СформированныеДокументы КАК ТаблицаРегистра
		|ГДЕ
		|	ТаблицаРегистра.ДокументИсточник = &ДокументИсточник
		|	И ТаблицаРегистра.ИмяТиповогоДокумента = &ИмяТиповогоДокумента";
	
	Запрос.УстановитьПараметр("ДокументИсточник",     ДокументИсточник);
	Запрос.УстановитьПараметр("ИмяТиповогоДокумента", "ПоступлениеТоваровУслуг");	
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Реализация = ?(Результат.Количество() > 0, Результат[0].ТиповыйДокумент, Документы.ПоступлениеТоваровУслуг.ПустаяСсылка());

	Возврат Реализация;

КонецФункции

&НаСервере
Процедура УстановитьВидимостьКомандПечати()
	
	СобственноеПодразделение      = ИНАГРО_Элеватор.ОпределитьПринадлежностьКонтрагента(Объект.Владелец);
	НовыйСобственноеПодразделение = ИНАГРО_Элеватор.ОпределитьПринадлежностьКонтрагента(Объект.НовыйВладелец);
	
	Для Каждого Команда Из Команды Цикл   
		ИмяКомандыПечати = Элементы.Найти(Команда.Имя);
		Если Команда.Заголовок = НСтр("ru='Расходная накладная';uk='Видаткова накладна'")Тогда
			ИмяКомандыПечати.Видимость = СобственноеПодразделение;
		ИначеЕсли Команда.Заголовок =  НСтр("ru='Приходная накладная';uk='Прибуткова накладна'")Тогда
			ИмяКомандыПечати.Видимость = НовыйСобственноеПодразделение;
		КонецЕсли;  		
	КонецЦикла;
				
КонецПроцедуры 

#Область ЦеныИВалюта

&НаКлиентеНаСервереБезКонтекста
Процедура СформироватьНадписьЦеныИВалюта(Форма)
	
	Объект = Форма.Объект;
	СтруктураНадписи = Новый Структура(
		"ТипЦен, ВалютаДокумента, Курс, Кратность, ВалютаРегламентированногоУчета",
		Объект.ТипЦен,
		Объект.ВалютаДокумента,
		Объект.КурсВзаиморасчетов,
		Объект.КратностьВзаиморасчетов,
		Форма.ВалютаРегламентированногоУчета);
	
	Если Форма.ПлательщикНДС Тогда 
		СтруктураНадписи.Вставить("СуммаВключаетНДС", Объект.СуммаВключаетНДС);
	КонецЕсли;
	
	Форма.ЦеныИВалюта = ОбщегоНазначенияБПКлиентСервер.СформироватьНадписьЦеныИВалюта(СтруктураНадписи);

КонецПроцедуры 

&НаКлиенте
Процедура ОбработатьИзмененияПоКнопкеЦеныИВалюты(ПересчитатьЦены = Ложь, ПерезаполнитьЦены = Ложь)

	// 1. Формируем структуру параметров для заполнения формы "Цены и Валюта".
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ВалютаДокумента",      Объект.ВалютаДокумента);
	СтруктураПараметров.Вставить("Курс",                 Объект.КурсВзаиморасчетов);
	СтруктураПараметров.Вставить("Кратность",            Объект.КратностьВзаиморасчетов);
	СтруктураПараметров.Вставить("СуммаВключаетНДС",     Объект.СуммаВключаетНДС);
	СтруктураПараметров.Вставить("Контрагент",           Объект.Владелец);
	СтруктураПараметров.Вставить("Договор",              Объект.ДоговорКонтрагента);
	СтруктураПараметров.Вставить("Организация",          Объект.Организация);
	СтруктураПараметров.Вставить("ДатаДокумента",        Объект.Дата);
	СтруктураПараметров.Вставить("ПерезаполнитьЦены",    ПерезаполнитьЦены);
	СтруктураПараметров.Вставить("ПересчитатьЦены",      ПересчитатьЦены);
	СтруктураПараметров.Вставить("БылиВнесеныИзменения", Ложь);
	СтруктураПараметров.Вставить("ТипЦен",               Объект.ТипЦен);

	// 2. Открываем форму "Цены и Валюта".
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ОбработатьИзмененияПоКнопкеЦеныИВалютыЗавершение", ЭтотОбъект);
	
	ОткрытьФорму("ОбщаяФорма.ФормаЦеныИВалюта", СтруктураПараметров,,,,,ОповещениеОЗакрытии);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьИзмененияПоКнопкеЦеныИВалютыЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	СтруктураЦеныИВалюта = РезультатЗакрытия;
	
	// 3. Перезаполняем табличную часть если были внесены изменения в форме "Цены и Валюта".
	Если ТипЗнч(СтруктураЦеныИВалюта) = Тип("Структура") И СтруктураЦеныИВалюта.БылиВнесеныИзменения Тогда

		ВалютаДоИзменения    = Объект.ВалютаДокумента;
		КурсДоИзменения 	 = Объект.КурсВзаиморасчетов;
		КратностьДоИзменения = Объект.КратностьВзаиморасчетов;
		
		Объект.ТипЦен = СтруктураЦеныИВалюта.ТипЦен;
		Объект.ВалютаДокумента = СтруктураЦеныИВалюта.ВалютаДокумента;
		Объект.КурсВзаиморасчетов = СтруктураЦеныИВалюта.Курс;
		Объект.КратностьВзаиморасчетов = СтруктураЦеныИВалюта.Кратность;
		Объект.СуммаВключаетНДС = СтруктураЦеныИВалюта.СуммаВключаетНДС;
		
		Модифицированность = Истина;
		
		ПересчитатьНДС = СтруктураЦеныИВалюта.СуммаВключаетНДС <> СтруктураЦеныИВалюта.ПредСуммаВключаетНДС;
		Если СтруктураЦеныИВалюта.ПерезаполнитьЦены ИЛИ СтруктураЦеныИВалюта.ПересчитатьЦены ИЛИ ПересчитатьНДС Тогда
			ЗаполнитьРассчитатьСуммы(
				ВалютаДоИзменения, 
				КурсДоИзменения,
				КратностьДоИзменения,
				СтруктураЦеныИВалюта.ПерезаполнитьЦены,
				СтруктураЦеныИВалюта.ПересчитатьЦены,
				ПересчитатьНДС);
			КонецЕсли;
			
		СформироватьНадписьЦеныИВалюта(ЭтаФорма);
		
	КонецЕсли;
		 	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРассчитатьСуммы(Знач ВалютаДоИзменения, КурсДоИзменения, КратностьДоИзменения, ПерезаполнитьЦены = Ложь, ПересчитатьЦены = Ложь, ПересчитатьНДС = Ложь)

	Если ПерезаполнитьЦены Тогда
		
		ТаблицаЦенНоменклатуры	= Ценообразование.ПолучитьТаблицуЦенНоменклатуры(
			ОбщегоНазначения.ВыгрузитьКолонку(Объект.Услуги, "Номенклатура", Истина),
			Объект.ТипЦен,
			Объект.Дата);
		
	ИначеЕсли ПересчитатьЦены Тогда
		Если КурсДоИзменения <> 0 И КратностьДоИзменения <> 0 Тогда
			СтруктураКурса = Новый Структура("Курс, Кратность", КурсДоИзменения, КратностьДоИзменения);
		Иначе
			СтруктураКурса = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаДоИзменения, Объект.Дата);
		КонецЕсли;
	КонецЕсли;
	
	Для Каждого СтрокаТабличнойЧасти Из Объект.Культуры Цикл
		ЗаполнитьРассчитатьСуммыВСтроке(СтрокаТабличнойЧасти, ТаблицаЦенНоменклатуры, ВалютаДоИзменения,
		СтруктураКурса, ПерезаполнитьЦены, ПересчитатьЦены, ПересчитатьНДС, Истина, 1);
	КонецЦикла;
		
	ПерерасчетПроизведен = Ложь;

	Если ПересчитатьНДС Тогда
		УстановитьЗаголовкиКолонок();
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРассчитатьСуммыВСтроке(СтрокаТабличнойЧасти, ТаблицаЦенНоменклатуры, ВалютаПередИзменением, СтруктураКурса, ПерезаполнитьЦены, ПересчитатьЦены, ПересчитатьНДС, ЕстьНДС, ЗначениеПустогоКоличества)
		
	Если ПерезаполнитьЦены Тогда
		
		НайденнаяСтрока	= ТаблицаЦенНоменклатуры.Найти(СтрокаТабличнойЧасти.Номенклатура, "Номенклатура");
		Если НайденнаяСтрока <> Неопределено Тогда
			Цена = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(
			НайденнаяСтрока.Цена, НайденнаяСтрока.Валюта, Объект.ВалютаДокумента, НайденнаяСтрока.Курс,
			Объект.КурсВзаиморасчетов, НайденнаяСтрока.Кратность, Объект.КратностьВзаиморасчетов);
		Иначе
			Цена = 0;
		КонецЕсли;
		
		// Признак того, что цена включает НДС, хранится в реквизите ЦенаВключаетНДС типа цен
		ЦенаВключаетНДС = ?(ЗначениеЗаполнено(Объект.ТипЦен), Объект.ТипЦен.ЦенаВключаетНДС, Ложь);
		
	Иначе
		Если ПересчитатьЦены Тогда
			
			Цена = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(
			СтрокаТабличнойЧасти.Цена, ВалютаПередИзменением, Объект.ВалютаДокумента, СтруктураКурса.Курс,
			Объект.КурсВзаиморасчетов, СтруктураКурса.Кратность, Объект.КратностьВзаиморасчетов);
			
		Иначе
			Цена = СтрокаТабличнойЧасти.Цена;
		КонецЕсли;
		// Признак того, что цена включает НДС, хранится в реквизите СуммаВключаетНДС документа
		ЦенаВключаетНДС = ?(ПересчитатьНДС, НЕ Объект.СуммаВключаетНДС, Объект.СуммаВключаетНДС);
	КонецЕсли;
	
	Если ЕстьНДС Тогда
		
		СтрокаТабличнойЧасти.Цена     = УчетНДСКлиентСервер.ПересчитатьЦенуПриИзмененииФлаговНалогов(Цена,
			ЦенаВключаетНДС, Объект.СуммаВключаетНДС, УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));
		
		СтрокаТабличнойЧасти.Сумма    = СтрокаТабличнойЧасти.Цена * ?(СтрокаТабличнойЧасти.Количество = 0, ЗначениеПустогоКоличества, СтрокаТабличнойЧасти.Количество);
		
		СтрокаТабличнойЧасти.СуммаНДС = УчетНДСКлиентСервер.РассчитатьСуммуНДС(
		СтрокаТабличнойЧасти.Сумма,
		Объект.СуммаВключаетНДС,
		УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС)); 		
		
	Иначе
		
		СтрокаТабличнойЧасти.Цена  = Цена;
		СтрокаТабличнойЧасти.Сумма = СтрокаТабличнойЧасти.Цена * ?(СтрокаТабличнойЧасти.Количество = 0, ЗначениеПустогоКоличества, СтрокаТабличнойЧасти.Количество);
		
	КонецЕсли;

КонецПроцедуры 

#КонецОбласти

#КонецОбласти  

#Область СлужебныеПроцедурыИФункцииБСП

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти