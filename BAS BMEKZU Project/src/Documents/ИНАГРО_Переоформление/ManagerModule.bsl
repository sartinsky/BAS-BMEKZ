#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПроцедурыИФункцииПечати

Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
			
	// Приказ
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ПриказНаПереоформление";
	КомандаПечати.Представление = НСтр("ru='Приказ';uk='Наказ'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечати";
	КомандаПечати.СписокФорм    = "ФормаДокумента,ФормаСписка";
	
	// Пропуск
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "Пропуск";
	КомандаПечати.Представление = НСтр("ru='Пропуск';uk='Пропуск'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечати";
	КомандаПечати.СписокФорм    = "ФормаДокумента,ФормаСписка";

	// АктНаПереоформление
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "АктНаПереоформление";
	КомандаПечати.Представление = НСтр("ru='Акт на переоформление';uk='Акт на переоформлення'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечати";
	КомандаПечати.СписокФорм    = "ФормаДокумента,ФормаСписка";
	
	// РасходнаяНакладная
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "РасходнаяНакладная";
	КомандаПечати.Представление = НСтр("ru='Расходная накладная';uk='Видаткова накладна'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечати";
	КомандаПечати.СписокФорм    = "ФормаДокумента,ФормаСписка";	
	
	// ПриходнаяНакладная
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ПриходнаяНакладная";
	КомандаПечати.Представление = НСтр("ru='Приходная накладная';uk='Прибуткова накладна'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечати";
	КомандаПечати.СписокФорм    = "ФормаДокумента,ФормаСписка";		
	
	// АктПерерасчета
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "АктПерерасчета";
	КомандаПечати.Представление = НСтр("ru='Акт перерасчета';uk='Акт перерахунку'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечати";
	КомандаПечати.СписокФорм    = "ФормаДокумента,ФормаСписка";
	
	// ПриказФ16
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ПФ_MXL_ПриказФ16";
	КомандаПечати.Представление = НСтр("ru='Приказ на переофомление (Приложение2)';uk='Наказ на переофомлення (Додаток2)'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечати";
	КомандаПечати.СписокФорм    = "ФормаДокумента,ФормаСписка";
	
	// ПриказФ16
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ПФ_MXL_ПриказФ16_2021";
	КомандаПечати.Представление = НСтр("ru='Приказ на переофомление (2021)';uk='Наказ на переофомлення (2021)'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечати";
	КомандаПечати.СписокФорм    = "ФормаДокумента,ФормаСписка";

	// Реестр документов
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "Реестр";
	КомандаПечати.Представление = НСтр("ru='Реестр документов';uk='Реєстр документів'");
	КомандаПечати.ЗаголовокФормы= НСтр("ru='Реестр документов ""Переоформление""';uk='Реєстр документів ""Переоформлення""'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечатиРеестраДокументов";
	КомандаПечати.СписокФорм    = "ФормаСписка";
	КомандаПечати.Порядок       = 100;

КонецПроцедуры

Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПриказНаПереоформление") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "ПриказНаПереоформление", НСтр("ru='Приказ';uk='Наказ'"), ПечатьПриказНаПереоформление(МассивОбъектов, ОбъектыПечати, ПараметрыВывода), , "Документ.ИНАГРО_Переоформление.Приказ", , Истина);
	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "Пропуск") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "Пропуск", НСтр("ru='Пропуск';uk='Пропуск'"), ПечатьПропуск(МассивОбъектов, ОбъектыПечати, ПараметрыВывода), , "Документ.ИНАГРО_Переоформление.Пропуск", , Истина);
	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "АктНаПереоформление") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "АктНаПереоформление", НСтр("ru='Акт на переоформление';uk='Акт на переоформлення'"), ПечатьАктНаПереоформление(МассивОбъектов, ОбъектыПечати, ПараметрыВывода), , "Документ.ИНАГРО_Переоформление.ПФ_MXL_АктНаПереоформление", , Истина);
	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "РасходнаяНакладная") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "РасходнаяНакладная", НСтр("ru='Расходная накладная';uk='Видаткова накладна'"), ПечатьРасходнаяНакладная(МассивОбъектов, ОбъектыПечати, ПараметрыВывода), , "Документ.ИНАГРО_Переоформление.РасходнаяНакладная", , Истина);
	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПриходнаяНакладная") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "ПриходнаяНакладная", НСтр("ru='Приходная накладная';uk='Прибуткова накладна'"), ПечатьПриходнаяНакладная(МассивОбъектов, ОбъектыПечати, ПараметрыВывода), , "Документ.ИНАГРО_Переоформление.ПриходнаяНакладная", , Истина);
	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "АктПерерасчета") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "АктПерерасчета", НСтр("ru='Акт перерасчета';uk='Акт перерахунку'"), ПечатьАктПерерасчета(МассивОбъектов, ОбъектыПечати, ПараметрыВывода), , "Документ.ИНАГРО_Переоформление.АктПерерасчета", , Истина);
	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПФ_MXL_ПриказФ16") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "ПФ_MXL_ПриказФ16", НСтр("ru='Приказ на переофомление (Приложение2)';uk='Наказ на переофомлення (Додаток2)'"), ПечатьПриказФ16(МассивОбъектов, ОбъектыПечати, ПараметрыВывода), , "Документ.ИНАГРО_Переоформление.ПФ_MXL_ПриказФ16", , Истина);
	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПФ_MXL_ПриказФ16_2021") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "ПФ_MXL_ПриказФ16_2021", НСтр("ru='Приказ на переофомление (2021)';uk='Наказ на переофомлення (2021)'"), ПечатьПриказФ16_2021(МассивОбъектов, ОбъектыПечати, ПараметрыВывода), , "Документ.ИНАГРО_Переоформление.ПФ_MXL_ПриказФ16_2021", , Истина);
	КонецЕсли;
	
КонецПроцедуры

Функция ПечатьПриказНаПереоформление(МассивОбъектов, ОбъектыПечати, ПараметрыВывода)
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ИНАГРО_Переоформление_Приказ";
	
	Для Каждого Ссылка Из МассивОбъектов Цикл
		
		Макет = ПолучитьМакет("Приказ");
		
		КодЯзыкаПечать = ПараметрыВывода.КодЯзыкаДляМногоязычныхПечатныхФорм;
		Макет.КодЯзыкаМакета = КодЯзыкаПечать;
			
		Руководители = ИНАГРО_Элеватор.ОтветственныеЛицаОрганизации(Ссылка.Организация, Ссылка.Дата);
		
		Шапка = Макет.ПолучитьОбласть("Шапка");
		Шапка.Параметры.Фирма = Ссылка.Организация.НаименованиеПолное;
		Шапка.Параметры.НомерДок = Ссылка.Номер;
		Шапка.Параметры.Владелец = Ссылка.Владелец;
		Шапка.Параметры.НовыйВладелец = Ссылка.НовыйВладелец;
		Шапка.Параметры.ДатаДок = Формат(Ссылка.Дата, "ДЛФ=D");
		Шапка.Параметры.ДовСерия = Ссылка.ДоверенностьСерия;
		Шапка.Параметры.ДовНомер = Ссылка.ДоверенностьНомер;
		Шапка.Параметры.ДовДата = Ссылка.ДоверенностьДата;
		Шапка.Параметры.ДовЧерез = Ссылка.ДоверенностьЧерез;
		Шапка.Параметры.Урожай = Ссылка.Урожай;
		
		ТабДокумент.Вывести(Шапка);
		
		ИтогВес = 0;
		Для Каждого Стр ИЗ Ссылка.Культуры Цикл
			ОблСтр = Макет.ПолучитьОбласть("Строка");
			ОблСтр.Параметры.Заполнить(Стр);
			ТабДокумент.Вывести(ОблСтр);
			ИтогВес = ИтогВес + Стр.ФизическийВес;
		КонецЦикла;
		
		ОблДно = Макет.ПолучитьОбласть("Дно");
		ОблДно.Параметры.ИтогВес = ИтогВес;
		ОблДно.Параметры.ДолжностьДиректора = Руководители.ДолжностьРуководителя;
		ТабДокумент.Вывести(ОблДно);
		
	КонецЦикла;
	
	Возврат ТабДокумент;
	
КонецФункции  

Функция ПечатьПропуск(МассивОбъектов, ОбъектыПечати, ПараметрыВывода)
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ИНАГРО_Переоформление_Пропуск";
	
	Для Каждого Ссылка Из МассивОбъектов Цикл
		
		Макет = ПолучитьМакет("Пропуск");
		
		КодЯзыкаПечать = ПараметрыВывода.КодЯзыкаДляМногоязычныхПечатныхФорм;
		Макет.КодЯзыкаМакета = КодЯзыкаПечать;
		
		Шапка = Макет.ПолучитьОбласть("Шапка");
		
		Шапка.Параметры.Фирма = Ссылка.Организация.НаименованиеПолное;
		Шапка.Параметры.НомерДок = Ссылка.Номер;
		Шапка.Параметры.НовыйВладелец = Ссылка.НовыйВладелец.НаименованиеПолное;
		Шапка.Параметры.ДатаДок = Формат(Ссылка.Дата, "ДФ='дд ММММ гггг';Л="+ Локализация.ОпределитьКодЯзыкаДляФормат(КодЯзыкаПечать));
		Шапка.Параметры.Через = Ссылка.ДоверенностьЧерез;
		Шапка.Параметры.НовыйВладелец = Ссылка.Владелец;
		ИНАГРО_Элеватор.ПолучитьНаименованияКонтрагента(Шапка.Параметры.НовыйВладелец);
		ТабДокумент.Вывести(Шапка);
		
		Для Каждого Стр ИЗ Ссылка.Культуры Цикл
			ОблСтр = Макет.ПолучитьОбласть("Строка");
			ОблСтр.Параметры.Заполнить(Стр);
			ТабДокумент.Вывести(ОблСтр);
		КонецЦикла;
		
		ОблДно = Макет.ПолучитьОбласть("Дно");
		ТабДокумент.Вывести(ОблДно);
	КонецЦикла;	
	
	Возврат ТабДокумент;
	
КонецФункции

Функция ПечатьАктНаПереоформление(МассивОбъектов, ОбъектыПечати, ПараметрыВывода)
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ИНАГРО_Переоформление_Акт";
	
	Для Каждого Ссылка Из МассивОбъектов Цикл
		
		Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ИНАГРО_Переоформление.ПФ_MXL_АктНаПереоформление");
		
		КодЯзыкаПечать = ПараметрыВывода.КодЯзыкаДляМногоязычныхПечатныхФорм;
		Макет.КодЯзыкаМакета = КодЯзыкаПечать;
		
		//Шапка
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Ссылка",Ссылка);
		Запрос.Текст = "ВЫБРАТЬ
		|	ИНАГРО_ПриказНаПередачу.Организация.НаименованиеПолное КАК Организация,
		|	ИНАГРО_ПриказНаПередачу.Номер КАК НомерДок,
		|	ИНАГРО_ПриказНаПередачу.Дата КАК ДатаДок,
		|	ИНАГРО_ПриказНаПередачу.Владелец.НаименованиеПолное КАК Владелец,
		|	ИНАГРО_ПриказНаПередачу.ПредставительВладельца,
		|	ИНАГРО_ПриказНаПередачу.НовыйВладелец.НаименованиеПолное КАК НовыйВладелец,
		|	ИНАГРО_ПриказНаПередачу.ПредставительНовогоВладельца,
		|	ИНАГРО_ПриказНаПередачу.Урожай
		|ИЗ
		|	Документ.ИНАГРО_Переоформление КАК ИНАГРО_ПриказНаПередачу
		|ГДЕ
		|	ИНАГРО_ПриказНаПередачу.Ссылка = &Ссылка";
		Шапка = Запрос.Выполнить().Выбрать();
		Шапка.Следующий();
		
		ОблШапка = Макет.ПолучитьОбласть("Шапка");
		ОблШапка.Параметры.Заполнить(Шапка);
		ОблШапка.Параметры.ДатаДок = Формат(Ссылка.Дата, "ДФ='дд ММММ гггг';Л="+ Локализация.ОпределитьКодЯзыкаДляФормат(КодЯзыкаПечать));
		ОблШапка.Параметры.АктРасчет = "" + Ссылка.АктРасчетаНомер + " " + Формат(Ссылка.АктРасчетаДата, "ДФ='дд ММММ гггг';Л="+ Локализация.ОпределитьКодЯзыкаДляФормат(КодЯзыкаПечать));
		ТабДокумент.Вывести(ОблШапка);
		
		//Строка
		Запрос = новый Запрос;
		Запрос.УстановитьПараметр("Ссылка",Ссылка);
		Запрос.Текст = "ВЫБРАТЬ
		|	ИНАГРО_ПриказНаПередачуКультуры.НомерСтроки,
		|	ИНАГРО_ПриказНаПередачуКультуры.Номенклатура,
		|	ИНАГРО_ПриказНаПередачуКультуры.ЕдиницаИзмерения КАК Ед,
		|	ИНАГРО_ПриказНаПередачуКультуры.ФизическийВес КАК ФизВес,
		|	ИНАГРО_ПриказНаПередачуКультуры.ЗачетныйВес,
		|	ИНАГРО_ПриказНаПередачуКультуры.Влажность,
		|	ИНАГРО_ПриказНаПередачуКультуры.СорнаяПримесь,
		|	ИНАГРО_ПриказНаПередачуКультуры.ЗерноваяПримесь,
		|	ИНАГРО_ПриказНаПередачуКультуры.СкладскаяКвитанция КАК Квитанция
		|ИЗ
		|	Документ.ИНАГРО_Переоформление.Культуры КАК ИНАГРО_ПриказНаПередачуКультуры
		|ГДЕ
		|	ИНАГРО_ПриказНаПередачуКультуры.Ссылка = &Ссылка";
		Стр = Запрос.Выполнить().Выбрать();
		
		СписКвитанций = "";
		ОблСтрока = Макет.ПолучитьОбласть("Строка");
		Пока Стр.Следующий()Цикл
			ОблСтрока.Параметры.Заполнить(Стр);
			Если ПустаяСтрока(Стр.Квитанция) Тогда
				Квитанция = "";
			Иначе
				Квитанция = ""+СокрЛП(Стр.Квитанция.Серия)+" - "+СокрЛП(Стр.Квитанция.НомерВходящий);
				СписКвитанций = ""+СписКвитанций+Квитанция+", ";
			КонецЕсли;
			ОБлСтрока.Параметры.Квитанция = Квитанция;		
			ТабДокумент.Вывести(ОблСтрока);
		КонецЦикла;
		
		//ДНо
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Ссылка",Ссылка);
		Запрос.УстановитьПараметр("Дата",Ссылка.Дата);
		Запрос.УстановитьПараметр("Руководитель",Перечисления.ОтветственныеЛицаОрганизаций.Руководитель);
		Запрос.Текст = "ВЫБРАТЬ
		|	ИНАГРО_ПриказНаПередачу.Организация,
		|	ИНАГРО_ПриказНаПередачуКультуры.СкладскаяКвитанция КАК СписСк,
		|	ИНАГРО_ПриказНаПередачу.Владелец,
		|	ИНАГРО_ПриказНаПередачу.НовыйВладелец,
		|	ИНАГРО_ПриказНаПередачу.ПредставительВладельца,
		|	ИНАГРО_ПриказНаПередачу.ПредставительНовогоВладельца
		|ПОМЕСТИТЬ Приказ
		|ИЗ
		|	Документ.ИНАГРО_Переоформление.Культуры КАК ИНАГРО_ПриказНаПередачуКультуры
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ИНАГРО_Переоформление КАК ИНАГРО_ПриказНаПередачу
		|		ПО ИНАГРО_ПриказНаПередачуКультуры.Ссылка = ИНАГРО_ПриказНаПередачу.Ссылка
		|ГДЕ
		|	ИНАГРО_ПриказНаПередачу.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ОтветственныеЛицаОрганизацийСрезПоследних.Должность КАК ДолжностьДиректора,
		|	ОтветственныеЛицаОрганизацийСрезПоследних.ФизическоеЛицо КАК ФИОДиректора,
		|	Приказ.Организация,
		|	Приказ.СписСк,
		|	Приказ.Владелец,
		|	Приказ.НовыйВладелец,
		|	Приказ.ПредставительВладельца,
		|	Приказ.ПредставительНовогоВладельца
		|ИЗ
		|	Приказ КАК Приказ,
		|	РегистрСведений.ОтветственныеЛицаОрганизаций.СрезПоследних(&Дата, ОтветственноеЛицо = &Руководитель) КАК ОтветственныеЛицаОрганизацийСрезПоследних";
		
		Дно = Запрос.Выполнить().Выбрать();
		
		ОблДно = Макет.ПолучитьОбласть("Дно");
		Если Дно.Следующий() Тогда
			ОблДно.Параметры.ДолжностьДиректора = НРег(Дно.ДолжностьДиректора);
			ОблДно.Параметры.Заполнить(Дно);
			ОблДно.Параметры.СписКвитанций = СокрЛП(СписКвитанций);
			ОблДно.Параметры.Владелец = Дно.Владелец.НаименованиеПолное;
			ОблДно.Параметры.НовыйВладелец = Дно.НовыйВладелец.НаименованиеПолное;
			ОблДно.Параметры.Организация = Дно.Организация.НаименованиеПолное;
		КонецЕсли;
		
		ТабДокумент.Вывести(ОблДно);
		
	КонецЦикла;
	
	Возврат ТабДокумент;
	
КонецФункции

Функция ПечатьРасходнаяНакладная(МассивОбъектов, ОбъектыПечати, ПараметрыВывода)
	
	Для Каждого Ссылка Из МассивОбъектов Цикл
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ТекущийДокумент", Ссылка);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Переоформление.Номер,
		|	Переоформление.Дата,
		|	Переоформление.ДоговорКонтрагента,
		|	Переоформление.ДоговорКонтрагента.Дата КАК ДоговорДата,
		|	Переоформление.ДоговорКонтрагента.Номер КАК ДоговорНомер,
		|	Переоформление.ДоговорКонтрагента.Наименование КАК ДоговорНаименованиеДляПечати,
		|	Переоформление.ДоговорКонтрагента.ВидДоговора КАК ВидДоговораКонтрагента,
		|	Переоформление.Организация,
		|	Переоформление.ДоверенностьНомер КАК ДоверенностьНомер,
		|	Переоформление.ДоверенностьДата КАК ДоверенностьДата,
		|	Переоформление.НовыйВладелец КАК Покупатель,
		|	Переоформление.Владелец КАК Поставщик,
		|	Переоформление.Склад,
		|	Переоформление.ВалютаДокумента,
		|	Переоформление.СуммаВключаетНДС,
		|	Переоформление.Организация.ОсновнойБанковскийСчет КАК БанковскийСчетОрганизации
		|ИЗ
		|	Документ.ИНАГРО_Переоформление КАК Переоформление
		|ГДЕ
		|	Переоформление.Ссылка = &ТекущийДокумент";
		Шапка = Запрос.Выполнить().Выбрать();
		Шапка.Следующий();
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ТекущийДокумент", Ссылка);
		
		ЧастьЗапросаДляВыбораСодержанияУслуг = ОбщегоНазначенияБПВызовСервера.ПолучитьЧастьЗапросаДляВыбораСодержанияУслуг("ИНАГРО_Переоформление");
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ВложенныйЗапросПоТоварам.Номенклатура,
		|	ВЫРАЗИТЬ(ВложенныйЗапросПоТоварам.Номенклатура.НаименованиеПолное КАК СТРОКА(1000)) КАК Товар,
		|	ВложенныйЗапросПоТоварам.Номенклатура.Код КАК Код,
		|	ВложенныйЗапросПоТоварам.Количество,
		|	ВложенныйЗапросПоТоварам.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	ВложенныйЗапросПоТоварам.Цена,
		|	ВложенныйЗапросПоТоварам.Сумма,
		|	ВложенныйЗапросПоТоварам.СуммаНДС,
		|	ВложенныйЗапросПоТоварам.НомерСтроки КАК НомерСтроки,
		|	1 КАК ID
		|ИЗ
		|	(ВЫБРАТЬ
		|		Переоформление.Номенклатура КАК Номенклатура,
		|		Переоформление.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|		Переоформление.Цена КАК Цена,
		|		Переоформление.СтавкаНДС КАК СтавкаНДС,
		|		СУММА(Переоформление.ФизическийВес) КАК Количество,
		|		СУММА(Переоформление.Сумма) КАК Сумма,
		|		СУММА(Переоформление.СуммаНДС) КАК СуммаНДС,
		|		МИНИМУМ(Переоформление.НомерСтроки) КАК НомерСтроки
		|	ИЗ
		|		Документ.ИНАГРО_Переоформление.Культуры КАК Переоформление
		|	ГДЕ
		|		Переоформление.Ссылка = &ТекущийДокумент
		|	
		|	СГРУППИРОВАТЬ ПО
		|		Переоформление.Номенклатура,
		|		Переоформление.ЕдиницаИзмерения,
		|		Переоформление.Цена,
		|		Переоформление.СтавкаНДС) КАК ВложенныйЗапросПоТоварам
		|
		|УПОРЯДОЧИТЬ ПО
		|	ID,
		|	НомерСтроки";
		ЗапросТовары = Запрос.Выполнить().Выгрузить();
		
		ТабДокумент = Новый ТабличныйДокумент;
		ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ИНАГРО_Переоформление_РасходнаяНакладная";
		
		Макет = ПолучитьМакет("РасходнаяНакладная");
		
		КодЯзыкаПечать = ПараметрыВывода.КодЯзыкаДляМногоязычныхПечатныхФорм;
		Макет.КодЯзыкаМакета = КодЯзыкаПечать;
		
		ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
		Если Шапка.ВидДоговораКонтрагента = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером  Тогда
			ОбластьМакета.Параметры.ТекстЗаголовка = ОбщегоНазначенияБПВызовСервера.СформироватьЗаголовокДокумента(Шапка, НСтр("ru='Расходная накладная (на комиссию)';uk='Видаткова накладна (на комісію)'",КодЯзыкаПечать),КодЯзыкаПечать);
		Иначе	
			ОбластьМакета.Параметры.ТекстЗаголовка = ОбщегоНазначенияБПВызовСервера.СформироватьЗаголовокДокумента(Шапка, НСтр("ru='Расходная накладная';uk='Видаткова накладна'",КодЯзыкаПечать),КодЯзыкаПечать);
		КонецЕсли; 
		
		ТабДокумент.Вывести(ОбластьМакета);
		
		СведенияОПокупателе = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Шапка.Покупатель, Шапка.Дата,,,КодЯзыкаПечать);
		СведенияОПоставщике = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Шапка.Поставщик, Шапка.Дата,,,КодЯзыкаПечать);
		
		Если ЗначениеЗаполнено(Шапка.БанковскийСчетОрганизации) Тогда
			НомерСчета = Шапка.БанковскийСчетОрганизации.НомерСчета;
			Банк       = Шапка.БанковскийСчетОрганизации.Банк;
			МФО		   = Шапка.БанковскийСчетОрганизации.Банк.Код;
			
			СведенияОПоставщике.Вставить("НомерСчета",       НомерСчета);
			СведенияОПоставщике.Вставить("Банк",             Банк);
			СведенияОПоставщике.Вставить("МФО",              МФО);
		КонецЕсли;
		
		ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");
		ОбластьМакета.Параметры.Заполнить(Шапка);
		ОбластьМакета.Параметры.ПредставлениеПоставщика = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОПоставщике, "ПолноеНаименование,",,КодЯзыкаПечать);	
		ОбластьМакета.Параметры.РеквизитыПоставщика =     ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОПоставщике, "НомерСчета,Банк,МФО,/,ЮридическийАдрес,Телефоны,/,КодПоЕДРПОУ,КодПоДРФО,ИНН,НомерСвидетельства,/,ПлательщикНалогаНаПрибыль,",,КодЯзыкаПечать);
		ТабДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Покупатель");
		ОбластьМакета.Параметры.Заполнить(Шапка);
		ОбластьМакета.Параметры.ПредставлениеПокупателя = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОПокупателе, "ПолноеНаименование,",,КодЯзыкаПечать);
		ОбластьМакета.Параметры.РеквизитыПокупателя		= ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОПокупателе,"ФактическийАдрес,Телефоны,",,КодЯзыкаПечать);
		ТабДокумент.Вывести(ОбластьМакета);
		
		// Выводим дополнительно информацию о договоре и сделке
		СписокДополнительныхПараметров = "ДоговорНаименованиеДляПечати,Сделка,Склад,АдресДоставки,";
		МассивСтруктурСтрок = ОбщегоНазначенияБПВызовСервера.ДополнительнаяИнформация(Шапка,СписокДополнительныхПараметров,КодЯзыкаПечать);
		ОбластьМакета = Макет.ПолучитьОбласть("ДопИнформация");
		Для каждого СтруктураСтроки Из МассивСтруктурСтрок Цикл
			ОбластьМакета.Параметры.Заполнить(СтруктураСтроки);
			ТабДокумент.Вывести(ОбластьМакета);
		КонецЦикла;
		
		ОбластьШапки  = "ШапкаТаблицы";
		ОбластьСтроки = "Строка";
		ОбластьИтого  = "Итого";
		// Вывести табличную часть
		ОбластьМакета = Макет.ПолучитьОбласть(ОбластьШапки);
		
		Суффикс = "";
		Если Шапка.СуммаВключаетНДС Тогда
			Суффикс  = Суффикс  + НСтр("ru=' с ';uk=' з '",КодЯзыкаПечать);
		Иначе	
			Суффикс  = Суффикс  + НСтр("ru=' без ';uk=' без '",КодЯзыкаПечать);
		КонецЕсли;
		Суффикс = Суффикс  + НСтр("ru='НДС';uk='ПДВ'",КодЯзыкаПечать);
		
		ОбластьМакета.Параметры.Цена  = НСтр("ru='Цена';uk='Ціна'",КодЯзыкаПечать) + Суффикс;
		ОбластьМакета.Параметры.Сумма = НСтр("ru='Сумма';uk='Сума'",КодЯзыкаПечать)+ Суффикс;
		ТабДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть(ОбластьСтроки);
		
		Сумма    		= 0;
		СуммаНДС 		= 0;
		
		Для каждого ВыборкаСтрокТовары Из ЗапросТовары Цикл 
			
			Если НЕ ЗначениеЗаполнено(ВыборкаСтрокТовары.Номенклатура) Тогда
				ТекстСообщения =НСтр("ru='В одной из строк не заполнено значение номенклатуры - строка при печати будет пропущена.';uk='В одному з рядків не заповнене значення номенклатури - рядок під час друку буде пропущений.'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
				Продолжить;
			КонецЕсли;
			
			ОбластьМакета.Параметры.Заполнить(ВыборкаСтрокТовары);
			ОбластьМакета.Параметры.Товар 		= СокрЛП(ВыборкаСтрокТовары.Товар);
			ОбластьМакета.Параметры.НомерСтроки = ЗапросТовары.Индекс(ВыборкаСтрокТовары) + 1;
			ТабДокумент.Вывести(ОбластьМакета);
			
			Сумма          = Сумма       + ВыборкаСтрокТовары.Сумма;
			СуммаНДС       = СуммаНДС    + ВыборкаСтрокТовары.СуммаНДС;
			
		КонецЦикла;
		
		// Вывести Итого
		ОбластьМакета = Макет.ПолучитьОбласть(ОбластьИтого);
		ОбластьМакета.Параметры.Всего = ОбщегоНазначенияБПВызовСервера.ФорматСумм(Сумма);
		
		ТабДокумент.Вывести(ОбластьМакета);
		
		// Вывести ИтогоНДС
		Если Шапка.СуммаВключаетНДС Тогда 
			// НДС
			ОбластьМакета = Макет.ПолучитьОбласть("ИтогоНДС");
			ОбластьМакета.Параметры.ВсегоНДС = ОбщегоНазначенияБПВызовСервера.ФорматСумм(СуммаНДС);
			ОбластьМакета.Параметры.НДС      = ?(Шапка.СуммаВключаетНДС, НСтр("ru='В том числе НДС:';uk='У тому числі ПДВ:'",КодЯзыкаПечать), НСтр("ru='Сумма НДС:';uk='Сума ПДВ:'",КодЯзыкаПечать));
			ТабДокумент.Вывести(ОбластьМакета);
		Иначе
			// всего с НДС (если сумма не включает НДС)
			ОбластьМакета = Макет.ПолучитьОбласть("ИтогоНДС");
			ОбластьМакета.Параметры.ВсегоНДС = ОбщегоНазначенияБПВызовСервера.ФорматСумм(Сумма + СуммаНДС);
			ОбластьМакета.Параметры.НДС      = НСтр("ru='Всего с НДС:';uk='Всього із ПДВ:'",КодЯзыкаПечать);
			ТабДокумент.Вывести(ОбластьМакета);
		КонецЕсли;
		
		// Вывести Сумму прописью
		ОбластьМакета = Макет.ПолучитьОбласть("СуммаПрописью");
		СуммаКПрописи = Сумма + ?(Шапка.СуммаВключаетНДС, 0, СуммаНДС);
		
		ОбластьМакета.Параметры.ИтоговаяСтрока = НСтр("ru='Всего наименований ';uk='Всього найменувань '",КодЯзыкаПечать) + ЗапросТовары.Количество() + "," +
		НСтр("ru=' на сумму ';uk=' на суму '",КодЯзыкаПечать)  + ОбщегоНазначенияБПВызовСервера.ФорматСумм(СуммаКПрописи, Шапка.ВалютаДокумента)
		+  ".";
		
		ОбластьМакета.Параметры.СуммаПрописью  = ОбщегоНазначенияБПВызовСервера.СформироватьСуммуПрописью(СуммаКПрописи, Шапка.ВалютаДокумента,КодЯзыкаПечать)
		+ ?(НЕ Шапка.СуммаВключаетНДС, "", Символы.ПС + НСтр("ru='В т.ч. НДС: ';uk='У т.ч. ПДВ: '",КодЯзыкаПечать) + ОбщегоНазначенияБПВызовСервера.СформироватьСуммуПрописью(СуммаНДС, Шапка.ВалютаДокумента, КодЯзыкаПечать));
		
		ТабДокумент.Вывести(ОбластьМакета);
		
		// Вывести подписи
		ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
		ОбластьМакета.Параметры.Заполнить(Шапка);
		ТабДокумент.Вывести(ОбластьМакета);
		
	КонецЦикла;
	
	Возврат ТабДокумент;
	
КонецФункции

Функция ПечатьПриходнаяНакладная(МассивОбъектов, ОбъектыПечати, ПараметрыВывода)
	
	Для Каждого Ссылка Из МассивОбъектов Цикл
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ТекущийДокумент", Ссылка);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Переоформление.Номер,
		|	Переоформление.Дата,
		|	Переоформление.ДоговорКонтрагента,
		|	Переоформление.ДоговорКонтрагента.Дата КАК ДоговорДата,
		|	Переоформление.ДоговорКонтрагента.Номер КАК ДоговорНомер,
		|	Переоформление.ДоговорКонтрагента.Наименование КАК ДоговорНаименованиеДляПечати,
		|	Переоформление.ДоговорКонтрагента.ВидДоговора КАК ВидДоговораКонтрагента,
		|	Переоформление.Организация,
		|	Переоформление.Склад,
		|	Переоформление.Склад.ТипСклада КАК ВидСклада,
		|	Переоформление.Владелец КАК Поставщик,
		|	Переоформление.НовыйВладелец КАК Покупатель,
		|	Переоформление.ВалютаДокумента,
		|	Переоформление.СуммаВключаетНДС
		|ИЗ
		|	Документ.ИНАГРО_Переоформление КАК Переоформление
		|ГДЕ
		|	Переоформление.Ссылка = &ТекущийДокумент";
		Шапка = Запрос.Выполнить().Выбрать();
		Шапка.Следующий();
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ТекущийДокумент", Ссылка);
		Запрос.УстановитьПараметр("ПустаяЕдиницаИзмерения", Справочники.КлассификаторЕдиницИзмерения.ПустаяСсылка());
		
		ЧастьЗапросаДляВыбораСодержанияУслуг = ОбщегоНазначенияБПВызовСервера.ПолучитьЧастьЗапросаДляВыбораСодержанияУслуг("ИНАГРО_Переоформление");
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ВложенныйЗапросПоТоварам.Номенклатура,
		|	ВЫРАЗИТЬ(ВложенныйЗапросПоТоварам.Номенклатура.НаименованиеПолное КАК СТРОКА(1000)) КАК Товар,
		|	ВложенныйЗапросПоТоварам.Номенклатура.Код КАК Код,
		|	ВложенныйЗапросПоТоварам.Количество,
		|	ВложенныйЗапросПоТоварам.ЕдиницаИзмерения.Наименование КАК ЕдиницаИзмерения,
		|	ВложенныйЗапросПоТоварам.Цена,
		|	ВложенныйЗапросПоТоварам.Сумма,
		|	ВложенныйЗапросПоТоварам.СуммаНДС,
		|	ВложенныйЗапросПоТоварам.НомерСтроки КАК НомерСтроки,
		|	1 КАК ID
		|ИЗ
		|	(ВЫБРАТЬ
		|		Переоформление.Номенклатура КАК Номенклатура,
		|		Переоформление.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|		Переоформление.Цена КАК Цена,
		|		Переоформление.СтавкаНДС КАК СтавкаНДС,
		|		СУММА(Переоформление.ФизическийВес) КАК Количество,
		|		СУММА(Переоформление.Сумма) КАК Сумма,
		|		СУММА(Переоформление.СуммаНДС) КАК СуммаНДС,
		|		МИНИМУМ(Переоформление.НомерСтроки) КАК НомерСтроки
		|	ИЗ
		|		Документ.ИНАГРО_Переоформление.Культуры КАК Переоформление
		|	ГДЕ
		|		Переоформление.Ссылка = &ТекущийДокумент
		|	
		|	СГРУППИРОВАТЬ ПО
		|		Переоформление.Номенклатура,
		|		Переоформление.ЕдиницаИзмерения,
		|		Переоформление.Цена,
		|		Переоформление.СтавкаНДС) КАК ВложенныйЗапросПоТоварам
		|
		|УПОРЯДОЧИТЬ ПО
		|	ID,
		|	НомерСтроки";
		ЗапросТовары = Запрос.Выполнить().Выгрузить();
		
		ТабДокумент = Новый ТабличныйДокумент;
		ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ИНАГРО_Переоформление_ПриходнаяНакладная";
		
		Макет = ПолучитьМакет("ПриходнаяНакладная");
		
		// печать производится на языке, указанном в настройках пользователя
		КодЯзыкаПечать = ПараметрыВывода.КодЯзыкаДляМногоязычныхПечатныхФорм;
		Макет.КодЯзыкаМакета = КодЯзыкаПечать;
		
		ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
		Если Шапка.ВидДоговораКонтрагента = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом  Тогда
			ОбластьМакета.Параметры.ТекстЗаголовка = ОбщегоНазначенияБПВызовСервера.СформироватьЗаголовокДокумента(Шапка, НСтр("ru='Приходная накладная (на комиссию)';uk='Прибуткова накладна (на комісію)'",КодЯзыкаПечать),КодЯзыкаПечать);
		Иначе	
			ОбластьМакета.Параметры.ТекстЗаголовка = ОбщегоНазначенияБПВызовСервера.СформироватьЗаголовокДокумента(Шапка, НСтр("ru='Приходная накладная';uk='Прибуткова накладна'",КодЯзыкаПечать),КодЯзыкаПечать);
		КонецЕсли; 
		
		ТабДокумент.Вывести(ОбластьМакета);
		СведенияОПокупателе = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Шапка.Покупатель, Шапка.Дата,,,КодЯзыкаПечать);
		СведенияОПоставщике = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Шапка.Поставщик, Шапка.Дата,,,КодЯзыкаПечать);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");
		ОбластьМакета.Параметры.Заполнить(Шапка);
		ОбластьМакета.Параметры.ПредставлениеПоставщика = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОПоставщике, "ПолноеНаименование,",,КодЯзыкаПечать);	
		ОбластьМакета.Параметры.РеквизитыПоставщика =     ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОПоставщике, "НомерСчета,Банк,МФО,/,ЮридическийАдрес,Телефоны,/,КодПоЕДРПОУ,КодПоДРФО,ИНН,НомерСвидетельства,",,КодЯзыкаПечать);
		ТабДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Покупатель");
		ОбластьМакета.Параметры.Заполнить(Шапка);
		ОбластьМакета.Параметры.ПредставлениеПокупателя = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОПокупателе, "ПолноеНаименование,",,КодЯзыкаПечать);
		ОбластьМакета.Параметры.РеквизитыПокупателя		= ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОПокупателе, "НомерСчета,Банк,МФО,/,ЮридическийАдрес,Телефоны,/,КодПоЕДРПОУ,КодПоДРФО,ИНН,НомерСвидетельства,/,ПлательщикНалогаНаПрибыль,",,КодЯзыкаПечать);
		ТабДокумент.Вывести(ОбластьМакета);
		
		// Выводим дополнительно информацию о договоре и сделке
		СписокДополнительныхПараметров = "ДоговорНаименованиеДляПечати,Сделка,Склад,";
		МассивСтруктурСтрок = ОбщегоНазначенияБПВызовСервера.ДополнительнаяИнформация(Шапка,СписокДополнительныхПараметров,КодЯзыкаПечать);
		ОбластьМакета = Макет.ПолучитьОбласть("ДопИнформация");
		Для каждого СтруктураСтроки Из МассивСтруктурСтрок Цикл
			ОбластьМакета.Параметры.Заполнить(СтруктураСтроки);
			ТабДокумент.Вывести(ОбластьМакета);
		КонецЦикла;
		
		ОбластьШапки  = "ШапкаТаблицы";
		ОбластьСтроки = "Строка";
		
		// Вывести табличную часть
		ОбластьМакета = Макет.ПолучитьОбласть(ОбластьШапки);
		Суффикс = "";
		
		Если Шапка.СуммаВключаетНДС Тогда
			Суффикс  = Суффикс  + НСтр("ru=' с ';uk=' з '",КодЯзыкаПечать);
		Иначе	
			Суффикс  = Суффикс  + НСтр("ru=' без ';uk=' без '",КодЯзыкаПечать);
		КонецЕсли;
		
		Суффикс = Суффикс  + НСтр("ru='НДС';uk='ПДВ'",КодЯзыкаПечать);
		ОбластьМакета.Параметры.Цена  = НСтр("ru='Цена';uk='Ціна'",КодЯзыкаПечать) + Суффикс;
		ОбластьМакета.Параметры.Сумма = НСтр("ru='Сумма';uk='Сума'",КодЯзыкаПечать)+ Суффикс;
		ТабДокумент.Вывести(ОбластьМакета);
		ОбластьМакета = Макет.ПолучитьОбласть(ОбластьСтроки);
		
		Сумма    = 0;
		СуммаНДС = 0;
		
		ЭтоНТТ = (Шапка.ВидСклада = Перечисления.ТипыСкладов.НеавтоматизированнаяТорговаяТочка);
		
		Для каждого ВыборкаСтрокТовары Из ЗапросТовары Цикл 
						
			ОбластьМакета.Параметры.Заполнить(ВыборкаСтрокТовары);
			ОбластьМакета.Параметры.Товар 		= СокрЛП(ВыборкаСтрокТовары.Товар);
			ОбластьМакета.Параметры.НомерСтроки = ЗапросТовары.Индекс(ВыборкаСтрокТовары) + 1;
			
			Если НЕ ЗначениеЗаполнено(ВыборкаСтрокТовары.Номенклатура) Тогда
				Если НЕ ЭтоНТТ Тогда
					ТекстСообщения = НСтр("ru='В одной из строк не заполнено значение номенклатуры - строка при печати будет пропущена.';uk='В одному з рядків не заповнене значення номенклатури - рядок під час друку буде пропущений.'");
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
					Продолжить;
				Иначе	
					// для НТТ при отсутствии номенклатуры печатаем некий текст
					ОбластьМакета.Параметры.Товар = НСтр("ru='Товары в ассортименте';uk='Товари в асортименті'",КодЯзыкаПечать);
				КонецЕсли;
			КонецЕсли;
			
			ТабДокумент.Вывести(ОбластьМакета);
			
			Сумма          = Сумма       + ВыборкаСтрокТовары.Сумма;
			СуммаНДС       = СуммаНДС    + ВыборкаСтрокТовары.СуммаНДС;
			
		КонецЦикла;
		
		// Вывести Итого
		ОбластьМакета = Макет.ПолучитьОбласть("Итого");
		ОбластьМакета.Параметры.Всего = ОбщегоНазначенияБПВызовСервера.ФорматСумм(Сумма);
		ТабДокумент.Вывести(ОбластьМакета);
		
		// Вывести ИтогоНДС
		Если Шапка.СуммаВключаетНДС Тогда 
			// НДС
			ОбластьМакета = Макет.ПолучитьОбласть("ИтогоНДС");
			ОбластьМакета.Параметры.ВсегоНДС = ОбщегоНазначенияБПВызовСервера.ФорматСумм(СуммаНДС);
			ОбластьМакета.Параметры.НДС      = ?(Шапка.СуммаВключаетНДС, НСтр("ru='В том числе НДС:';uk='У тому числі ПДВ:'",КодЯзыкаПечать), НСтр("ru='Сумма НДС:';uk='Сума ПДВ:'",КодЯзыкаПечать));
			ТабДокумент.Вывести(ОбластьМакета);
		Иначе
			// всего с НДС (если сумма не включает НДС)
			ОбластьМакета = Макет.ПолучитьОбласть("ИтогоНДС");
			ОбластьМакета.Параметры.ВсегоНДС = ОбщегоНазначенияБПВызовСервера.ФорматСумм(Сумма + СуммаНДС);
			ОбластьМакета.Параметры.НДС      = НСтр("ru='Всего с НДС:';uk='Всього із ПДВ:'",КодЯзыкаПечать);
			ТабДокумент.Вывести(ОбластьМакета);
		КонецЕсли;
		
		// Вывести Сумму прописью
		ОбластьМакета = Макет.ПолучитьОбласть("СуммаПрописью");
		СуммаКПрописи = Сумма + ?(Шапка.СуммаВключаетНДС, 0, СуммаНДС);
		
		ОбластьМакета.Параметры.ИтоговаяСтрока = НСтр("ru='Всего наименований ';uk='Всього найменувань '",КодЯзыкаПечать) + ЗапросТовары.Количество() + "," +
		НСтр("ru=' на сумму ';uk=' на суму '",КодЯзыкаПечать)  + ОбщегоНазначенияБПВызовСервера.ФорматСумм(СуммаКПрописи, Шапка.ВалютаДокумента)
		+  ".";
		
		ОбластьМакета.Параметры.СуммаПрописью  = ОбщегоНазначенияБПВызовСервера.СформироватьСуммуПрописью(СуммаКПрописи, Шапка.ВалютаДокумента,КодЯзыкаПечать)
		+ ?(НЕ Шапка.СуммаВключаетНДС, "", Символы.ПС + НСтр("ru='В т.ч. НДС: ';uk='У т.ч. ПДВ: '",КодЯзыкаПечать) + ОбщегоНазначенияБПВызовСервера.СформироватьСуммуПрописью(СуммаНДС, Шапка.ВалютаДокумента, КодЯзыкаПечать));
		
		
		ТабДокумент.Вывести(ОбластьМакета);
		
		// Вывести подписи
		ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
		ОбластьМакета.Параметры.Заполнить(Шапка);
		ТабДокумент.Вывести(ОбластьМакета);
		
	КонецЦикла;
	
	Возврат ТабДокумент;
	
КонецФункции

Функция ПечатьАктПерерасчета(МассивОбъектов, ОбъектыПечати, ПараметрыВывода)
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ИНАГРО_Переоформление_АктПерерасчета";
	
	Для Каждого Ссылка Из МассивОбъектов Цикл
		
		Макет = ПолучитьМакет("АктПерерасчета");
		
		КодЯзыкаПечать = ПараметрыВывода.КодЯзыкаДляМногоязычныхПечатныхФорм;
		Макет.КодЯзыкаМакета = КодЯзыкаПечать;
		
		Для Каждого Стр ИЗ Ссылка.Культуры Цикл
			Шапка = Макет.ПолучитьОбласть("Шапка");
			
			Шапка.Параметры.Заполнить(Ссылка);
			Шапка.Параметры.Организация = Ссылка.Организация.НаименованиеПолное;
			Шапка.Параметры.Дата = Формат(Ссылка.Дата, "ДФ='дд ММММ гггг';Л="+ Локализация.ОпределитьКодЯзыкаДляФормат(КодЯзыкаПечать));
			Шапка.Параметры.ДовДата = Формат(Ссылка.ДоверенностьДата, "ДФ='дд ММММ гггг';Л="+ Локализация.ОпределитьКодЯзыкаДляФормат(КодЯзыкаПечать));
			Шапка.Параметры.ДовЧерез = Ссылка.ДоверенностьЧерез;
			Шапка.Параметры.ДовСерия = Ссылка.ДоверенностьСерия;
			
			ДиректорТОВ = РегистрыСведений.ОтветственныеЛицаОрганизаций.ПолучитьПоследнее(Ссылка.Дата,Новый Структура("СтруктурнаяЕдиница,ОтветственноеЛицо",Ссылка.Организация,Перечисления.ОтветственныеЛицаОрганизаций.Руководитель)).ФизическоеЛицо;
			ГлавныйБухгалтер = РегистрыСведений.ОтветственныеЛицаОрганизаций.ПолучитьПоследнее(Ссылка.Дата,Новый Структура("СтруктурнаяЕдиница,ОтветственноеЛицо",Ссылка.Организация,Перечисления.ОтветственныеЛицаОрганизаций.ГлавныйБухгалтер)).ФизическоеЛицо;
			
			Шапка.Параметры.ДиректорТОВ = ДиректорТОВ;
			Шапка.Параметры.ГлавныйБухгалтер = ГлавныйБухгалтер;
			
			Шапка.Параметры.Владелец = Ссылка.Владелец.НаименованиеПолное;
			
			ВидПерерасчета = ИНАГРО_Элеватор.ОпределитьПринадлежностьКонтрагента(Ссылка.Владелец);
			НовыйВидПерерасчета = ИНАГРО_Элеватор.ОпределитьПринадлежностьКонтрагента(Ссылка.НовыйВладелец);
			Шапка.Параметры.ВидПерерасчета = ?(ВидПерерасчета = Истина,?(КодЯзыкаПечать = "ru","Собственная продукция","Власна продукція"),?(КодЯзыкаПечать = "ru","Платное хранения","Платне зберігання"));
			Шапка.Параметры.НовыйВидПерерасчета = ?(НовыйВидПерерасчета = Истина,?(КодЯзыкаПечать = "ru","Собственная продукция","Власна продукція"),?(КодЯзыкаПечать = "ru","Платное хранения","Платне зберігання"));
			
			Шапка.Параметры.НовыйВладелец = Ссылка.НовыйВладелец.НаименованиеПолное;
			
			Если Стр.СкладскаяКвитанция <> Неопределено Тогда
				Шапка.Параметры.НомерСК = СокрЛП(?(ЗначениеЗаполнено(Стр.СкладскаяКвитанция.НомерВходящий), Стр.СкладскаяКвитанция.НомерВходящий, "______"));
				Шапка.Параметры.СерияСК = СокрЛП(?(ЗначениеЗаполнено(Стр.СкладскаяКвитанция.Серия), Стр.СкладскаяКвитанция.Серия, "______"));
				Шапка.Параметры.ДатаСК 	= Формат(Стр.СкладскаяКвитанция.Дата, "ДФ='дд ММММ гггг';Л="+ Локализация.ОпределитьКодЯзыкаДляФормат(КодЯзыкаПечать));
			КонецЕсли;
			Шапка.Параметры.Заполнить(Стр);
			
			ТабДокумент.Вывести(Шапка);
			
		КонецЦикла;
	КонецЦикла;
	
	Возврат ТабДокумент;
	
КонецФункции

Функция ПечатьПриказФ16(МассивОбъектов, ОбъектыПечати, ПараметрыВывода)
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ИНАГРО_Переоформление_ПриказФ16";
	
	Для Каждого Ссылка Из МассивОбъектов Цикл
		
		Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ИНАГРО_Переоформление.ПФ_MXL_ПриказФ16");
		КодЯзыкаПечать = ПараметрыВывода.КодЯзыкаДляМногоязычныхПечатныхФорм;
		
		Макет.КодЯзыкаМакета = КодЯзыкаПечать;
		
		Руководители = ИНАГРО_Элеватор.ОтветственныеЛицаОрганизации(Ссылка.Организация,Ссылка.Дата);
		
		ОблШапка 		= Макет.ПолучитьОбласть("Шапка");
		ОблШапкаТаблицы = Макет.ПолучитьОбласть("ШапкаТаблицы");
		ОблСтрока 		= Макет.ПолучитьОбласть("Строка");
		ОблИтог 		= Макет.ПолучитьОбласть("Итог");
		ОблПодписи 		= Макет.ПолучитьОбласть("Подписи");
		
		ОблШапка.Параметры.Заполнить(Ссылка);
		ОблШапка.Параметры.Фирма 	= Ссылка.Организация.НаименованиеПолное;	
		ОблШапка.Параметры.Номер 	= Ссылка.Номер;
		ОблШапка.Параметры.Дата 	= Формат(Ссылка.Дата, "ДФ='дд ММММ гггг';Л="+ Локализация.ОпределитьКодЯзыкаДляФормат(КодЯзыкаПечать));
		ОблШапка.Параметры.СтрокДействияПриказа = "до " + Формат(Ссылка.Дата, "ДЛФ=D");
		ОблШапка.Параметры.Склад = "" + Ссылка.Склад + " " + ИНАГРО_Элеватор.ОтветственныеЛица(Ссылка.Организация, Ссылка.Дата, Ссылка.Склад);
		ОблШапка.Параметры._Владелец = Ссылка.Владелец.НаименованиеПолное;	
		ОблШапка.Параметры._НовыйВладелец = Ссылка.НовыйВладелец.НаименованиеПолное;
		
		ОблШапка.Параметры.ДовЧерез = Ссылка.ДоверенностьЧерез;		
		ОблШапка.Параметры.ДовДата = Формат(Ссылка.ДоверенностьДата, "ДЛФ=D");
		ОблШапка.Параметры.ДовНомер = Ссылка.ДоверенностьСерия + " " + Ссылка.ДоверенностьНомер;
		ОблШапка.Параметры.ПисьмоНомер = ?(СокрЛП(Ссылка.ПисьмоНомер) = "", "_________", Ссылка.ПисьмоНомер);
		ОблШапка.Параметры.ПисьмоДата = ?(Ссылка.ПисьмоДата = '00010101', "________________", Формат(Ссылка.ПисьмоДата, "ДЛФ=D"));
		
		ТабДокумент.Вывести(ОблШапка);
		ТабДокумент.Вывести(ОблШапкаТаблицы);
		
		Запрос=Новый запрос;
		Запрос.Текст="ВЫБРАТЬ
		|	ИНАГРО_ПереоформлениеКультуры.Влажность,
		|	ИНАГРО_ПереоформлениеКультуры.Номенклатура,
		|	ИНАГРО_ПереоформлениеКультуры.Фасовка,
		|	ИНАГРО_ПереоформлениеКультуры.Количество,
		|	ИНАГРО_ПереоформлениеКультуры.ФизическийВес,
		|	ИНАГРО_ПереоформлениеКультуры.ЗерноваяПримесь,
		|	ИНАГРО_ПереоформлениеКультуры.СорнаяПримесь,
		|	ИНАГРО_ПереоформлениеКультуры.НомерАнализа
		|ИЗ
		|	Документ.ИНАГРО_Переоформление.Культуры КАК ИНАГРО_ПереоформлениеКультуры
		|ГДЕ
		|	ИНАГРО_ПереоформлениеКультуры.Ссылка = &Ссылка";
		Запрос.УстановитьПараметр("Ссылка",Ссылка);				 
		ТаблицаРезультат=Запрос.Выполнить().Выгрузить();
		
		Ном = 1;
		Для Каждого Стр ИЗ ТаблицаРезультат Цикл
			ОблСтрока.Параметры.Заполнить(Стр);
			ОблСтрока.Параметры.Ном = Ном;
			ТабДокумент.Вывести(ОблСтрока);
			Ном = Ном + 1;
		КонецЦикла;
		
		ВсегоКоличество	   = ТаблицаРезультат.Итог("Количество");
		ОблИтог.Параметры.ВсегоКоличество = ВсегоКоличество;
		ВсегоФизическийВес = ТаблицаРезультат.Итог("ФизическийВес");	
		ОблИтог.Параметры.ВсегоФизическийВес = ВсегоФизическийВес;
		ОблИтог.Параметры.ВсегоФизическийВесПрописью = ИНАГРО_Элеватор.ВернутьВесПрописью("uk_UA",ВсегоФизическийВес);
		ТабДокумент.Вывести(ОблИтог);
		
		Руководители = ИНАГРО_Элеватор.ОтветственныеЛицаОрганизации(Ссылка.Организация, Ссылка.Дата);
		ОблПодписи.Параметры.ДолжностьРуководителя = Руководители.ДолжностьРуководителя;
		ОблПодписи.Параметры.Директор = Руководители.Руководитель;
		ОблПодписи.Параметры.ГлавныйБухгалтер = Руководители.ГлавныйБухгалтер;
		ОблПодписи.Параметры.ЗавЛабораторией = Руководители.НачальникВТЛ;
		
		ТабДокумент.Вывести(ОблПодписи);
		
	КонецЦикла;
	
	Возврат ТабДокумент;
	
КонецФункции

Функция ПечатьПриказФ16_2021(МассивОбъектов, ОбъектыПечати, ПараметрыВывода)
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ИНАГРО_Переоформление_ПриказФ16";
	
	Для Каждого Ссылка Из МассивОбъектов Цикл
		
		Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ИНАГРО_Переоформление.ПФ_MXL_ПриказФ16_2021");
		КодЯзыкаПечать = "uk";
		
		Макет.КодЯзыкаМакета = КодЯзыкаПечать;
		
		//Руководители = ИНАГРО_Элеватор.ОтветственныеЛицаОрганизацииИмяФамилия(Ссылка.Организация,Ссылка.Дата);
		
		ОблШапка 		= Макет.ПолучитьОбласть("Шапка");
		ОблШапкаТаблицы = Макет.ПолучитьОбласть("ШапкаТаблицы");
		ОблСтрока 		= Макет.ПолучитьОбласть("Строка");
		ОблПодписи 		= Макет.ПолучитьОбласть("Подписи");
		ОблСтраница2 	= Макет.ПолучитьОбласть("Страница2");
		
		ОблШапка.Параметры.Заполнить(Ссылка);
		ОблШапка.Параметры.Фирма 	= Ссылка.Организация.НаименованиеПолное;
		ОблШапка.Параметры.ЕДРПОУ 	= Ссылка.Организация.КодПоЕДРПОУ;
		ОблШапка.Параметры.Номер 	= Ссылка.Номер;
		ОблШапка.Параметры.Дата 	= Формат(Ссылка.Дата, "ДФ='дд ММММ гггг';Л="+ Локализация.ОпределитьКодЯзыкаДляФормат(КодЯзыкаПечать));
		ОблШапка.Параметры.СтрокДействияПриказа = "до " + Формат(Ссылка.Дата, "ДЛФ=D");
		ОблШапка.Параметры.Склад = "" + Ссылка.Склад + " " + ИНАГРО_Элеватор.ОтветственныеЛица(Ссылка.Организация, Ссылка.Дата, Ссылка.Склад);
		ОблШапка.Параметры.НовыйВладелец = Ссылка.НовыйВладелец.НаименованиеПолное;
		
		ОблШапка.Параметры.ДовЧерез = Ссылка.ДоверенностьЧерез;		
		ОблШапка.Параметры.ДовДата = Формат(Ссылка.ДоверенностьДата, "ДЛФ=D");
		ОблШапка.Параметры.ДовНомер = Ссылка.ДоверенностьСерия + " " + Ссылка.ДоверенностьНомер;
		ОблШапка.Параметры.ПисьмоНомер = ?(СокрЛП(Ссылка.ПисьмоНомер) = "", "_________", Ссылка.ПисьмоНомер);
				
		Запрос=Новый запрос;
		Запрос.Текст="ВЫБРАТЬ
		|	ИНАГРО_ПереоформлениеКультуры.Влажность,
		|	ИНАГРО_ПереоформлениеКультуры.Номенклатура,
		|	ИНАГРО_ПереоформлениеКультуры.Фасовка,
		|	ИНАГРО_ПереоформлениеКультуры.Количество,
		|	ИНАГРО_ПереоформлениеКультуры.ФизическийВес,
		|	ИНАГРО_ПереоформлениеКультуры.ЗерноваяПримесь,
		|	ИНАГРО_ПереоформлениеКультуры.СорнаяПримесь
		|ИЗ
		|	Документ.ИНАГРО_Переоформление.Культуры КАК ИНАГРО_ПереоформлениеКультуры
		|ГДЕ
		|	ИНАГРО_ПереоформлениеКультуры.Ссылка = &Ссылка";
		Запрос.УстановитьПараметр("Ссылка",Ссылка);				 
		ТаблицаРезультат=Запрос.Выполнить().Выгрузить();
		
		ВсегоФизическийВес = ТаблицаРезультат.Итог("ФизическийВес");	
		ОблШапка.Параметры.ВсегоФизическийВесПрописью = ИНАГРО_Элеватор.ВернутьВесПрописью("uk",ВсегоФизическийВес);
		
		ТабДокумент.Вывести(ОблШапка);
		ТабДокумент.Вывести(ОблШапкаТаблицы);
		
		Для Каждого Стр ИЗ ТаблицаРезультат Цикл
			ОблСтрока.Параметры.Заполнить(Стр);
			ТабДокумент.Вывести(ОблСтрока);
		КонецЦикла;
		
		Руководители = ИНАГРО_Элеватор.ОтветственныеЛицаОрганизацииИмяФамилия(Ссылка.Организация, Ссылка.Дата);
		ОблПодписи.Параметры.Директор = Руководители.Руководитель;
		ОблПодписи.Параметры.ГлавныйБухгалтер = Руководители.ГлавныйБухгалтер;
		ОблПодписи.Параметры.НачальникВТЛ = Руководители.НачальникВТЛ;
		
		
		ТабДокумент.Вывести(ОблПодписи);
		ТабДокумент.Вывести(ОблСтраница2);
		
	КонецЦикла;
	
	Возврат ТабДокумент;
	
КонецФункции

Функция ПолучитьДополнительныеРеквизитыДляРеестра() Экспорт
	
	Результат = Новый Структура;	
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти 
	
#Область ПрограммныйИнтерфейс

// Процедура заполняет счета учета расчетов в строке табличной части документа
//
//  Параметры:
//  	Объект - ДокументОбъект, ДанныеФормыСтруктура
//
Процедура ЗаполнитьСчетаУчетаРасчетов(Объект) Экспорт
	
	СчетаУчета = БухгалтерскийУчетРасчетовСКонтрагентами.ПолучитьСчетаРасчетовСКонтрагентом(Объект.Организация, Объект.Владелец, Объект.ДоговорКонтрагента);
	
	Если Объект.ВидОперации = Перечисления.ИНАГРО_ВидыОперацийПереоформления.Реализация Тогда		
		Объект.СчетУчетаРасчетовСКонтрагентом = СчетаУчета.СчетРасчетовПокупателя;
		Объект.СчетУчетаРасчетовПоАвансам     = СчетаУчета.СчетАвансовПокупателя;	
		Объект.СчетУчетаНДС 			      = СчетаУчета.СчетУчетаНДСПродаж;
		Объект.СчетУчетаНДСПодтвержденный     = СчетаУчета.СчетУчетаНДСПродажПодтвержденный;
	ИначеЕсли Объект.ВидОперации = Перечисления.ИНАГРО_ВидыОперацийПереоформления.Поступление Тогда
		Объект.СчетУчетаРасчетовСКонтрагентом = СчетаУчета.СчетРасчетов;
		Объект.СчетУчетаРасчетовПоАвансам     = СчетаУчета.СчетРасчетов; 
		Объект.СчетУчетаНДС 				  = СчетаУчета.СчетУчетаНДСПриобретений;
		Объект.СчетУчетаНДСПодтвержденный     = СчетаУчета.СчетУчетаНДСПриобретенийПодтвержденный;
	Иначе
		Объект.СчетУчетаРасчетовСКонтрагентом = СчетаУчета.СчетРасчетов;
		Объект.СчетУчетаРасчетовПоАвансам     = СчетаУчета.СчетАвансов;
		Объект.СчетУчетаНДС 				  = СчетаУчета.СчетУчетаНДСПриобретений;
		Объект.СчетУчетаНДСПодтвержденный     = СчетаУчета.СчетУчетаНДСПриобретенийПодтвержденный;		
	КонецЕсли;
	
КонецПроцедуры

// Заполняет счета БУ и НУ в табличной части документа
//
//  Параметры:
//  	Объект            - ДанныеФормыСтруктура
//  	ИмяТабличнойЧасти - Строка - имя табличной части
//
Процедура ЗаполнитьСчетаУчетаВТабличнойЧасти(Объект, ИмяТабличнойЧасти) Экспорт

	ТабличнаяЧасть = Объект[ИмяТабличнойЧасти];
	
	ДанныеОбъекта  = Новый Структура(
		"Дата, Организация, Владелец, 
		|НовыйВладелец, Склад, НовыйСклад,
		|ОтражатьВБухгалтерскомУчете");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
	ИмяНоменклатуры      = "Номенклатура";
	
	СоответствиеСчетовУчета = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаУчетаСпискаНоменклатуры(
		ДанныеОбъекта.Организация, ОбщегоНазначения.ВыгрузитьКолонку(ТабличнаяЧасть, ИмяНоменклатуры, Истина), ДанныеОбъекта.Склад, ДанныеОбъекта.Дата);
		
	ИмяНовойНоменклатуры = "НоваяНоменклатура";

	СоответствиеНовыхСчетовУчета = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаУчетаСпискаНоменклатуры(
		ДанныеОбъекта.Организация, ОбщегоНазначения.ВыгрузитьКолонку(ТабличнаяЧасть, ИмяНовойНоменклатуры, Истина), ДанныеОбъекта.НовыйСклад, ДанныеОбъекта.Дата);
	
	Для Каждого СтрокаТабличнойЧасти Из ТабличнаяЧасть Цикл
		СведенияОНоменклатуре      = СоответствиеСчетовУчета.Получить(СтрокаТабличнойЧасти[ИмяНоменклатуры]);
		СведенияОНовойНоменклатуре = СоответствиеНовыхСчетовУчета.Получить(СтрокаТабличнойЧасти[ИмяНовойНоменклатуры]);
		ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(ДанныеОбъекта, СтрокаТабличнойЧасти, СведенияОНоменклатуре, СведенияОНовойНоменклатуре);
	КонецЦикла;

КонецПроцедуры

// Заполняет счета учета номенклатуры в строке табличной части документа
//
// Параметры:
//  ДанныеОбъекта              - структура данных объекта, используемых при заполнении счетов учета (вид операции,
//                               вид договора контрагента, признак комиссионной торговли и т.п.)
//  СтрокаТабличнойЧасти       - строка табличной части документа
//  СведенияОНоменклатуре      - структура сведений о номенклатуре, либо структура счетов учета
//  СведенияОНовойНоменклатуре - структура сведений о новой номенклатуре, либо структура счетов учета
//
Процедура ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(ДанныеОбъекта, СтрокаТабличнойЧасти, СведенияОНоменклатуре = Неопределено, СведенияОНовойНоменклатуре = Неопределено) Экспорт
	
	СчетаУчета      = Неопределено;
	Если СведенияОНоменклатуре <> Неопределено Тогда
		Если СведенияОНоменклатуре.Свойство("СчетаУчета") Тогда
			// СведенияОНоменклатуре - структура сведений номенклатуры
			СчетаУчета = СведенияОНоменклатуре.СчетаУчета;
		ИначеЕсли СведенияОНоменклатуре.Свойство("СчетУчетаБУ") Тогда
			// СведенияОНоменклатуре - структура счетов учета номенклатуры
			СчетаУчета = СведенияОНоменклатуре;
		Иначе
			Возврат;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СчетаУчета.СхемаРеализации) Тогда
			СтрокаТабличнойЧасти.СхемаРеализации = СчетаУчета.СхемаРеализации;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СчетаУчета.НалоговоеНазначение) Тогда
			СтрокаТабличнойЧасти.НалоговоеНазначение = СчетаУчета.НалоговоеНазначение;
		КонецЕсли;
		
	КонецЕсли;
	
	НовыеСчетаУчета = Неопределено;
	Если СведенияОНовойНоменклатуре <> Неопределено Тогда
		Если СведенияОНовойНоменклатуре.Свойство("СчетаУчета") Тогда
			// СведенияОНоменклатуре - структура сведений номенклатуры
			НовыеСчетаУчета = СведенияОНовойНоменклатуре.СчетаУчета;
		ИначеЕсли СведенияОНовойНоменклатуре.Свойство("СчетУчетаБУ") Тогда
			// СведенияОНоменклатуре - структура счетов учета номенклатуры
			НовыеСчетаУчета = СведенияОНовойНоменклатуре;
		Иначе
			Возврат;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(НовыеСчетаУчета.СхемаРеализации) Тогда
			СтрокаТабличнойЧасти.СхемаРеализации = НовыеСчетаУчета.СхемаРеализации;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(НовыеСчетаУчета.НалоговоеНазначение) Тогда
			СтрокаТабличнойЧасти.НалоговоеНазначение = НовыеСчетаУчета.НалоговоеНазначение;
		КонецЕсли;
		
	КонецЕсли;

	ЗаполнитьСчетаБУ(ДанныеОбъекта, СтрокаТабличнойЧасти, СчетаУчета, НовыеСчетаУчета);

КонецПроцедуры

// Заполняет остатки номенклатуры в табличной части документа
//
//  Параметры:
//  	Объект                                    - ДанныеФормыСтруктура
//  	ИмяТабличнойЧасти                         - Строка - имя табличной части
//      ПоказыватьВДокументахОстатокВЗачетномВесе - Булево - если Истина, то показывать остатки в зачетном весе 
//
Процедура ЗаполнитьОстаткиВТабличнойЧасти(Объект, ИмяТабличнойЧасти, ПоказыватьВДокументахОстатокВЗачетномВесе) Экспорт

	ТабличнаяЧасть = Объект[ИмяТабличнойЧасти];
	
	ДанныеОбъекта = Новый Структура(
		"Организация, Владелец, ДоговорКонтрагента, 
		|Склад, ВидХранения, Урожай,
		|Дата");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);	
	ДанныеОбъекта.Вставить("ПоказыватьВДокументахОстатокВЗачетномВесе", ПоказыватьВДокументахОстатокВЗачетномВесе);
		
	Для Каждого СтрокаТабличнойЧасти Из ТабличнаяЧасть Цикл
		ЗаполнитьОстаткиВСтрокеТабличнойЧасти(ДанныеОбъекта, СтрокаТабличнойЧасти);
	КонецЦикла;

КонецПроцедуры

// Заполняет остатки номенклатуры в строке табличной части документа
//
// Параметры:
//  ДанныеОбъекта        - структура данных объекта, используемых при заполнении остатков номенклатуры
//  СтрокаТабличнойЧасти - строка табличной части документа
//
Процедура ЗаполнитьОстаткиВСтрокеТабличнойЧасти(ДанныеОбъекта, СтрокаТабличнойЧасти) Экспорт
	
	ДанныеОбъекта.Вставить("Номенклатура", СтрокаТабличнойЧасти.Номенклатура);
	
	СтруктураПоОстаткам = ИНАГРО_Элеватор.ПроверкаНаличияЗерна(ДанныеОбъекта);	
	
	Если ДанныеОбъекта.ПоказыватьВДокументахОстатокВЗачетномВесе Тогда
		СтрокаТабличнойЧасти.Остаток = ?(СтруктураПоОстаткам.ЗачетныйВесОстаток > 0, СтруктураПоОстаткам.ЗачетныйВесОстаток, 0);
	Иначе
		СтрокаТабличнойЧасти.Остаток = ?(СтруктураПоОстаткам.ВесОстаток > 0, СтруктураПоОстаткам.ВесОстаток, 0);
	КонецЕсли;	
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции
	
// Заполняет счета БУ в строке табличной части.
//
Процедура ЗаполнитьСчетаБУ(Объект, СтрокаТабличнойЧасти, СчетаУчета, НовыеСчетаУчета)

	Если Объект.ОтражатьВБухгалтерскомУчете Тогда
		
		Если СчетаУчета <> Неопределено Тогда
			
			Если ИНАГРО_Элеватор.ОпределитьПринадлежностьКонтрагента(Объект.Владелец) Тогда 			
				СтрокаТабличнойЧасти.СчетУчетаБУ      = СчетаУчета.СчетУчетаБУ;			
			Иначе			
				СтрокаТабличнойЧасти.СчетУчетаБУ      = СчетаУчета.СчетУчетаДоп;			
			КонецЕсли;
			
		КонецЕсли; 
		
		Если НовыеСчетаУчета <> Неопределено Тогда
			
			Если ИНАГРО_Элеватор.ОпределитьПринадлежностьКонтрагента(Объект.НовыйВладелец) Тогда			
				СтрокаТабличнойЧасти.НовыйСчетУчетаБУ = НовыеСчетаУчета.СчетУчетаБУ;			
			Иначе			
				СтрокаТабличнойЧасти.НовыйСчетУчетаБУ = НовыеСчетаУчета.СчетУчетаДоп;			
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		СтрокаТабличнойЧасти.СчетУчетаБУ      = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
		СтрокаТабличнойЧасти.НовыйСчетУчетаБУ = ПланыСчетов.Хозрасчетный.ПустаяСсылка();		
				
	КонецЕсли;	 

КонецПроцедуры

#КонецОбласти

#Область ФормированиеТиповыхДокументов

Функция ПолучитьФормируемыеДокументы(ДокументСсылка) Экспорт

	Если ДокументСсылка.ВидОперации = Перечисления.ИНАГРО_ВидыОперацийПереоформления.Поступление Тогда
		Возврат Новый Структура("ПоступлениеТоваровУслуг", ПолучитьТаблицуДляФормированияПоступлениеРеализацияТоваровУслуг(ДокументСсылка));
	ИначеЕсли ДокументСсылка.ВидОперации = Перечисления.ИНАГРО_ВидыОперацийПереоформления.Реализация Тогда
		Возврат Новый Структура("РеализацияТоваровУслуг", ПолучитьТаблицуДляФормированияПоступлениеРеализацияТоваровУслуг(ДокументСсылка));
	КонецЕсли;

КонецФункции

Функция ПолучитьТаблицуДляФормированияПоступлениеРеализацияТоваровУслуг(ДокументСсылка)
	
	ВидОперации = ДокументСсылка.ВидОперации;
	
	Если ВидОперации = Перечисления.ИНАГРО_ВидыОперацийПереоформления.Поступление Тогда		
		ВидОперацииДокумента = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ПокупкаКомиссия;
		ВидПоступления 		 = Перечисления.ИНАГРО_ВидыПоступленияТоваров.НаСклад;
	ИначеЕсли ВидОперации = Перечисления.ИНАГРО_ВидыОперацийПереоформления.Реализация Тогда
		ВидОперацииДокумента = Перечисления.ВидыОперацийРеализацияТоваров.ПродажаКомиссия;
		ВидПередачи 		 = Перечисления.ИНАГРО_ВидыПередачиТоваров.СоСклада;
	КонецЕсли;

	Запрос = Новый Запрос;
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ИНАГРО_ПереоформлениеКультуры.Ссылка.Дата КАК Дата,
		|	ИНАГРО_ПереоформлениеКультуры.Ссылка.ВалютаДокумента КАК ВалютаДокумента,
		|	ИНАГРО_ПереоформлениеКультуры.Ссылка.ДоверенностьДата КАК ДоверенностьДата,
		|	ИНАГРО_ПереоформлениеКультуры.Ссылка.ДоверенностьНомер КАК ДоверенностьНомер,
		|	ИНАГРО_ПереоформлениеКультуры.Ссылка.ДоверенностьСерия КАК ДоверенностьСерия,
		|	ИНАГРО_ПереоформлениеКультуры.Ссылка.ДоверенностьЧерез КАК ДоверенностьЧерез,
		|	ИНАГРО_ПереоформлениеКультуры.Ссылка.ДокументПодтверждающийПолномочия КАК ДокументПодтверждающийПолномочия,
		|	ИНАГРО_ПереоформлениеКультуры.Ссылка.Комментарий КАК Комментарий,
		|	ИНАГРО_ПереоформлениеКультуры.Ссылка.КратностьВзаиморасчетов КАК КратностьВзаиморасчетов,
		|	ИНАГРО_ПереоформлениеКультуры.Ссылка.КурсВзаиморасчетов КАК КурсВзаиморасчетов,
		|	ИНАГРО_ПереоформлениеКультуры.Ссылка.Организация КАК Организация,
		|	ИНАГРО_ПереоформлениеКультуры.Ссылка.ПолучилПоДругомуДокументу КАК ПолучилПоДругомуДокументу,
		|	ИНАГРО_ПереоформлениеКультуры.Ссылка.СуммаВключаетНДС КАК СуммаВключаетНДС,
		|	ИНАГРО_ПереоформлениеКультуры.Ссылка.СчетУчетаНДС КАК СчетУчетаНДС,
		|	ИНАГРО_ПереоформлениеКультуры.Ссылка.СчетУчетаНДСПодтвержденный КАК СчетУчетаНДСПодтвержденный,
		|	ИНАГРО_ПереоформлениеКультуры.Ссылка.СчетУчетаРасчетовПоАвансам КАК СчетУчетаРасчетовПоАвансам,
		|	ИНАГРО_ПереоформлениеКультуры.Ссылка.СчетУчетаРасчетовСКонтрагентом КАК СчетУчетаРасчетовСКонтрагентом,
		|	ИНАГРО_ПереоформлениеКультуры.Ссылка.ТипЦен КАК ТипЦен,
		|	ИНАГРО_ПереоформлениеКультуры.Номенклатура КАК Номенклатура,
		|	ИНАГРО_ПереоформлениеКультуры.НоваяНоменклатура КАК НоваяНоменклатура,
		|	ИНАГРО_ПереоформлениеКультуры.Количество КАК Количество,
		|	ИНАГРО_ПереоформлениеКультуры.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	ИНАГРО_ПереоформлениеКультуры.Коэффициент КАК Коэффициент,
		|	ИНАГРО_ПереоформлениеКультуры.Цена КАК Цена,
		|	ИНАГРО_ПереоформлениеКультуры.Сумма КАК Сумма,
		|	ИНАГРО_ПереоформлениеКультуры.СтавкаНДС КАК СтавкаНДС,
		|	ИНАГРО_ПереоформлениеКультуры.СуммаНДС КАК СуммаНДС,
		|	ИНАГРО_ПереоформлениеКультуры.СчетУчетаБУ КАК СчетУчетаБУ,
		|	ИНАГРО_ПереоформлениеКультуры.НовыйСчетУчетаБУ КАК НовыйСчетУчетаБУ,
		|	ИНАГРО_ПереоформлениеКультуры.СхемаРеализации КАК СхемаРеализации,
		|	ИНАГРО_ПереоформлениеКультуры.НалоговоеНазначение КАК НалоговоеНазначение,
		|	ИНАГРО_ПереоформлениеКультуры.ДокументОприходования КАК ДокументОприходования,
		|	ИНАГРО_ПереоформлениеКультуры.Себестоимость КАК Себестоимость
		|ИЗ
		|	Документ.ИНАГРО_Переоформление.Культуры КАК ИНАГРО_ПереоформлениеКультуры
		|ГДЕ
		|	ИНАГРО_ПереоформлениеКультуры.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
		
	ТаблицаКультуры = Запрос.Выполнить().Выгрузить();	

	ТаблицаКультуры.Колонки.Добавить("ВидОперации");	
	ТаблицаКультуры.Колонки.Добавить("Контрагент");
	ТаблицаКультуры.Колонки.Добавить("ДоговорКонтрагента");
	ТаблицаКультуры.Колонки.Добавить("Склад");
	ТаблицаКультуры.Колонки.Добавить("Ответственный");
	ТаблицаКультуры.Колонки.Добавить("КодФормирования");
	ТаблицаКультуры.Колонки.Добавить("СчетУчетаРасчетовПоТаре");
	ТаблицаКультуры.Колонки.Добавить("СчетУчетаРасчетовПоТареПоАвансам"); 
	ТаблицаКультуры.Колонки.Добавить("ИНАГРО_ВидПоступления");
	ТаблицаКультуры.Колонки.Добавить("ИНАГРО_ВидПередачи");

	ТаблицаКультуры.Колонки.Добавить("ИНАГРО_Склад");

	ТаблицаКультуры.ЗаполнитьЗначения(ВидОперацииДокумента,                      "ВидОперации");
	ТаблицаКультуры.ЗаполнитьЗначения(Пользователи.ТекущийПользователь(),        "Ответственный");
	ТаблицаКультуры.ЗаполнитьЗначения(Перечисления.ИНАГРО_КодФормирования.Общий, "КодФормирования");	
	ТаблицаКультуры.ЗаполнитьЗначения(ВидПоступления,                            "ИНАГРО_ВидПоступления");
	ТаблицаКультуры.ЗаполнитьЗначения(ВидПередачи,                               "ИНАГРО_ВидПередачи");	
	
	ВладелецСобственный      = ИНАГРО_Элеватор.ОпределитьПринадлежностьКонтрагента(ДокументСсылка.Владелец);
	НовыйВладелецСобственный = ИНАГРО_Элеватор.ОпределитьПринадлежностьКонтрагента(ДокументСсылка.НовыйВладелец);		
	
	Если ВладелецСобственный Тогда			
		КонтрагентДляТиповогоДокумента         = ДокументСсылка.НовыйВладелец;
		ДоговорКонтрагентаДляТиповогоДокумента = ДокументСсылка.НовыйДоговорКонтрагента;		
		СкладДляТиповогоДокумента              = ДокументСсылка.Склад;			
	ИначеЕсли НовыйВладелецСобственный Тогда
		КонтрагентДляТиповогоДокумента         = ДокументСсылка.Владелец;
		ДоговорКонтрагентаДляТиповогоДокумента = ДокументСсылка.ДоговорКонтрагента;		
		СкладДляТиповогоДокумента              = ДокументСсылка.НовыйСклад;
	КонецЕсли;
		
	ТаблицаКультуры.ЗаполнитьЗначения(КонтрагентДляТиповогоДокумента,         "Контрагент");
	ТаблицаКультуры.ЗаполнитьЗначения(ДоговорКонтрагентаДляТиповогоДокумента, "ДоговорКонтрагента");
	ТаблицаКультуры.ЗаполнитьЗначения(СкладДляТиповогоДокумента,              "Склад");

	СчетаУчета = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаРасчетовСКонтрагентом(
		ДокументСсылка.Организация, КонтрагентДляТиповогоДокумента, ДоговорКонтрагентаДляТиповогоДокумента);

	Если ВидОперации = Перечисления.ИНАГРО_ВидыОперацийПереоформления.Поступление Тогда
		
		Если НЕ ЗначениеЗаполнено(ДокументСсылка.СчетУчетаРасчетовСКонтрагентом) Тогда
			ТаблицаКультуры.ЗаполнитьЗначения(СчетаУчета.СчетРасчетов, "СчетУчетаРасчетовСКонтрагентом");
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ДокументСсылка.СчетУчетаРасчетовПоАвансам) Тогда
			ТаблицаКультуры.ЗаполнитьЗначения(СчетаУчета.СчетАвансов, "СчетУчетаРасчетовПоАвансам");
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ДокументСсылка.СчетУчетаНДС) Тогда
			ТаблицаКультуры.ЗаполнитьЗначения(СчетаУчета.СчетУчетаНДСПриобретений, "СчетУчетаНДС");
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ДокументСсылка.СчетУчетаНДСПодтвержденный) Тогда
			ТаблицаКультуры.ЗаполнитьЗначения(СчетаУчета.СчетУчетаНДСПриобретенийПодтвержденный, "СчетУчетаНДСПодтвержденный");
		КонецЕсли;
		
		ТаблицаКультуры.ЗаполнитьЗначения(СчетаУчета.СчетУчетаТары, "СчетУчетаРасчетовПоТаре");
		ТаблицаКультуры.ЗаполнитьЗначения(СчетаУчета.СчетАвансовПоТаре, "СчетУчетаРасчетовПоТареПоАвансам");
		
	ИначеЕсли ВидОперации = Перечисления.ИНАГРО_ВидыОперацийПереоформления.Реализация Тогда
		
		Если НЕ ЗначениеЗаполнено(ДокументСсылка.СчетУчетаРасчетовСКонтрагентом) Тогда
			ТаблицаКультуры.ЗаполнитьЗначения(СчетаУчета.СчетРасчетовПокупателя, "СчетУчетаРасчетовСКонтрагентом");
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ДокументСсылка.СчетУчетаРасчетовПоАвансам) Тогда
			ТаблицаКультуры.ЗаполнитьЗначения(СчетаУчета.СчетАвансовПокупателя, "СчетУчетаРасчетовПоАвансам");
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ДокументСсылка.СчетУчетаНДС) Тогда
			ТаблицаКультуры.ЗаполнитьЗначения(СчетаУчета.СчетУчетаНДСПродаж, "СчетУчетаНДС");
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ДокументСсылка.СчетУчетаНДСПодтвержденный) Тогда
			ТаблицаКультуры.ЗаполнитьЗначения(СчетаУчета.СчетУчетаНДСПродажПодтвержденный, "СчетУчетаНДСПодтвержденный");
		КонецЕсли;
		
		ТаблицаКультуры.ЗаполнитьЗначения(СчетаУчета.СчетУчетаТарыПокупателя, "СчетУчетаРасчетовПоТаре");
		ТаблицаКультуры.ЗаполнитьЗначения(СчетаУчета.СчетАвансовПоТареПокупателя, "СчетУчетаРасчетовПоТареПоАвансам");
		
	КонецЕсли;
	
	ЗаполнитьКолонкиТаблицыКультуры(ДокументСсылка, ТаблицаКультуры, ВладелецСобственный, НовыйВладелецСобственный);		
		
	ТаблицаШапки = ТаблицаКультуры.Скопировать();
	Если ВидОперации = Перечисления.ИНАГРО_ВидыОперацийВвозаВывозаСобственногоЗерна.ПоступлениеТоваров Тогда	
		ТаблицаШапки.Свернуть(РеквизитыШапкиФормируемогоДокумента("ПоступлениеТоваровУслуг")); 
	ИначеЕсли ВидОперации = Перечисления.ИНАГРО_ВидыОперацийВвозаВывозаСобственногоЗерна.РеализацияТоваровУслуг Тогда
		ТаблицаШапки.Свернуть(РеквизитыШапкиФормируемогоДокумента("РеализацияТоваровУслуг"));
	КонецЕсли;
	
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("Шапка",  ТаблицаШапки);	
	СтруктураВозврата.Вставить("Товары", ТаблицаКультуры);
	
	Возврат СтруктураВозврата;
	
КонецФункции

Процедура ЗаполнитьКолонкиТаблицыКультуры(ДокументСсылка, ТаблицаКультуры, ВладелецСобственный, НовыйВладелецСобственный)
		
	Для Каждого СтрокаТаблицы Из ТаблицаКультуры Цикл		
		
		Если ВладелецСобственный Тогда
			СтрокаТаблицы.СчетУчетаБУ      = СтрокаТаблицы.СчетУчетаБУ;
			СтрокаТаблицы.Номенклатура     = СтрокаТаблицы.Номенклатура;
			СтрокаТаблицы.ЕдиницаИзмерения = СтрокаТаблицы.Номенклатура.БазоваяЕдиницаИзмерения;
			СтрокаТаблицы.Коэффициент      = 1;
		ИначеЕсли НовыйВладелецСобственный Тогда			
			СтрокаТаблицы.СчетУчетаБУ      = СтрокаТаблицы.НовыйСчетУчетаБУ;
			СтрокаТаблицы.Номенклатура     = СтрокаТаблицы.НоваяНоменклатура;  					
			СтрокаТаблицы.ЕдиницаИзмерения = СтрокаТаблицы.НоваяНоменклатура.БазоваяЕдиницаИзмерения;
			СтрокаТаблицы.Коэффициент      = 1;
		КонецЕсли;

		СтрокаТаблицы.ИНАГРО_Склад = ДокументСсылка.Склад;
		
	КонецЦикла;

КонецПроцедуры

Функция ПроверитьУсловияФормирования(ДокументСсылка) Экспорт
	
	Возврат ДокументСсылка.ВидОперации = Перечисления.ИНАГРО_ВидыОперацийПереоформления.Поступление
		ИЛИ ДокументСсылка.ВидОперации = Перечисления.ИНАГРО_ВидыОперацийПереоформления.Реализация;
		
КонецФункции

Функция РеквизитыШапкиФормируемогоДокумента(ИмяДокумента) Экспорт
	
	СтрокаРеквизитовШапки = "Дата, ВалютаДокумента, ДоверенностьДата, 
	                        |ДоверенностьНомер, ДоверенностьСерия, ДоговорКонтрагента,
							|ДокументПодтверждающийПолномочия, Комментарий, КратностьВзаиморасчетов,
							|КурсВзаиморасчетов, Организация, ПолучилПоДругомуДокументу,
							|СуммаВключаетНДС, СчетУчетаНДС, СчетУчетаНДСПодтвержденный, 
							|СчетУчетаРасчетовПоАвансам, СчетУчетаРасчетовСКонтрагентом, ТипЦен,
							|ВидОперации, Контрагент, ДоговорКонтрагента,
							|Склад, Ответственный, КодФормирования,
							|СчетУчетаРасчетовПоТаре, СчетУчетаРасчетовПоТареПоАвансам";
	
	Если ИмяДокумента = "ПоступлениеТоваровУслуг" Тогда		
		СтрокаРеквизитовШапки = СтрокаРеквизитовШапки + ", ИНАГРО_ВидПоступления";		
	ИначеЕсли ИмяДокумента = "РеализацияТоваровУслуг" Тогда		
		СтрокаРеквизитовШапки = СтрокаРеквизитовШапки + ", ИНАГРО_ВидПередачи";		
	Иначе		
		Возврат Неопределено;		
	КонецЕсли;
	
	Возврат СтрокаРеквизитовШапки;
	
КонецФункции 

#КонецОбласти

#КонецЕсли