#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда  

#Область ОбработчикиСобытий

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)

	ТипДанныхЗаполнения = ТипЗнч(ДанныеЗаполнения);
	Если ДанныеЗаполнения <> Неопределено И ТипДанныхЗаполнения <> Тип("Структура")
		И Метаданные().ВводитсяНаОсновании.Содержит(ДанныеЗаполнения.Метаданные()) Тогда
		ЗаполнитьПоДокументуОснованию(ДанныеЗаполнения);		
	ИначеЕсли ТипДанныхЗаполнения = Тип("Структура")
		И ДанныеЗаполнения.Свойство("Номенклатура") Тогда			
		ЗаполнитьПоДокументуОснованию(ДанныеЗаполнения);
	КонецЕсли;
	
	ИНАГРО_ЭлеваторЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект);	

	ЗаполнениеДокументов.Заполнить(ЭтотОбъект, ДанныеЗаполнения);	
	
	Если НЕ ЗначениеЗаполнено(НовыйСклад) Тогда
		НовыйСклад       = ИНАГРО_ЭлеваторЗаполнениеДокументов.ПолучитьЗначениеПоУмолчанию("ОсновнойСкладЭлеватора");
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(НовыйВидХранения) Тогда
		НовыйВидХранения = ИНАГРО_ЭлеваторЗаполнениеДокументов.ПолучитьЗначениеПоУмолчанию("ВидХранения");
	КонецЕсли;	
	
	Документы.ИНАГРО_Переоформление.ЗаполнитьСчетаУчетаРасчетов(ЭтотОбъект);
		
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	МассивНепроверяемыхРеквизитов = Новый Массив; 	
	
	Если ВидОперации = Перечисления.ИНАГРО_ВидыОперацийПереоформления.Переоформление Тогда 		
		МассивНепроверяемыхРеквизитов.Добавить("СчетУчетаНДС");					
	КонецЕсли;  	
		
	Если ОтражатьВБухгалтерскомУчете Тогда
		
		СобственноеПодразделение      = ИНАГРО_Элеватор.ОпределитьПринадлежностьКонтрагента(Владелец);
		НовыйСобственноеПодразделение = ИНАГРО_Элеватор.ОпределитьПринадлежностьКонтрагента(НовыйВладелец);
		
		Если  НЕ СобственноеПодразделение
			И НЕ НовыйСобственноеПодразделение Тогда
			
			МассивНепроверяемыхРеквизитов.Добавить("Культуры.Цена");
			МассивНепроверяемыхРеквизитов.Добавить("Культуры.Сумма");
			МассивНепроверяемыхРеквизитов.Добавить("Культуры.СтавкаНДС");
		
		КонецЕсли; 
		
	Иначе
		
		МассивНепроверяемыхРеквизитов.Добавить("Культуры.СчетУчетаБУ");
		МассивНепроверяемыхРеквизитов.Добавить("Культуры.НовыйСчетУчетаБУ");
		МассивНепроверяемыхРеквизитов.Добавить("Культуры.Цена");
		МассивНепроверяемыхРеквизитов.Добавить("Культуры.Сумма");
		МассивНепроверяемыхРеквизитов.Добавить("Культуры.СтавкаНДС");		
		
	КонецЕсли;
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);	

КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ЕстьЛабораторныйАнализ = Ложь;
	Для Каждого СтрокаТабличнойЧасти Из Культуры Цикл
		Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.ЛабораторныйАнализ) Тогда
			ЕстьЛабораторныйАнализ = Истина;
			Прервать;
		КонецЕсли;			
	КонецЦикла;
	
	ЕстьСкладскаяКвитанция = Ложь;
	Для Каждого СтрокаТабличнойЧасти Из Культуры Цикл
		Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.СкладскаяКвитанция) Тогда
			ЕстьСкладскаяКвитанция = Истина;
			Прервать;
		КонецЕсли;			
	КонецЦикла;
	
	ВидОперации = ИНАГРО_Элеватор.ПолучитьОперациюПереоформления(ЭтотОбъект);			
		
	ПараметрыДляРасчетаЗачетногоВеса = Новый Структура(
		"Ссылка, Дата, Организация,
		|Владелец, ДоговорКонтрагента, Номенклатура,
		|Склад, Влажность, СорнаяПримесь,
		|ФизическийВес, ЗачетныйВес");
	ЗаполнитьЗначенияСвойств(ПараметрыДляРасчетаЗачетногоВеса, ЭтотОбъект);
	
	Для Каждого СтрокаТабличнойЧасти Из Культуры Цикл 			
		
		ЗаполнитьЗначенияСвойств(ПараметрыДляРасчетаЗачетногоВеса, СтрокаТабличнойЧасти);
		
		СтрокаТабличнойЧасти.ЗачетныйВес = ИНАГРО_Элеватор.ЗачетныйВесПриПроведении(ПараметрыДляРасчетаЗачетногоВеса);
		
		Номенклатура = СтрокаТабличнойЧасти.Номенклатура;

	КонецЦикла;

	ВесПоПереоформлению = Культуры.Итог("ФизическийВес");
	ВесДляСписка        = Культуры.Итог("ЗачетныйВес");

	Если НЕ ИНАГРО_Элеватор.ПолучитьПараметрУчетаЭлеватора(Дата, "ОтключитьАвтоматическоеНачислениеУслуг", Ложь) Тогда 
		ЗаполнитьУслуги();
	КонецЕсли;	
	
КонецПроцедуры 

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	Перем Заголовок, СтруктураШапкиДокумента;
	Перем ТаблицаПоКультурам;
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКПроведению(ЭтотОбъект);
		   
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначенияБПВызовСервера.ПредставлениеДокументаПриПроведении(Ссылка);

	ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента);	
	
	ПодготовитьПараметрыУчетнойПолитики(СтруктураШапкиДокумента, Отказ, Заголовок);	
	
	ПодготовитьТаблицуПоКультурам(СтруктураШапкиДокумента, ТаблицаПоКультурам, Отказ, Заголовок);
		
	// Движения по документу
	Если НЕ Отказ Тогда		
		ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоКультурам, Отказ, Заголовок);
	КонецЕсли; 		
	
	Движения.Хозрасчетный.ВыполнитьДействияПередЗаписьюДвижений();

	ПроведениеСервер.ПодготовитьНаборыЗаписейКЗаписиДвижений(ЭтотОбъект); 	

КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКОтменеПроведения(ЭтотОбъект);
	Движения.Записать();
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)

	Дата = НачалоДня(ОбщегоНазначения.ТекущаяДатаПользователя());
	Ответственный = Пользователи.ТекущийПользователь();
	
	Для Каждого СтрокаТабличнойЧасти Из Культуры Цикл
		СтрокаТабличнойЧасти.СкладскаяКвитанция = Неопределено;
	КонецЦикла;    
	
КонецПроцедуры

#КонецОбласти

#Область Проведение

// Процедура формирует структуру шапки документа и дополнительных полей.
//
Процедура ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента) Экспорт

	// Дерево значений, содержащее имена необходимых полей в запросе по шапке.
	Перем ДеревоПолейЗапросаПоШапке;	
	
	СтруктураШапкиДокумента   = ОбщегоНазначенияРед12.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	
	// Заполним по шапке документа дерево параметров, нужных при проведении.
	ДеревоПолейЗапросаПоШапке = ОбщегоНазначенияРед12.СформироватьДеревоПолейЗапросаПоШапке();
	
	ОбщегоНазначенияРед12.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "Организация",             "ДоговорОрганизация");
	ОбщегоНазначенияРед12.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "ВидДоговора",             "ВидДоговора");
	ОбщегоНазначенияРед12.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Склад",                "ТипСклада",               "ТипСклада");
	ОбщегоНазначенияРед12.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "СложныйНалоговыйУчет",    "СложныйНалоговыйУчет");
	ОбщегоНазначенияРед12.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "ВедениеВзаиморасчетовНУ", "ВедениеВзаиморасчетовНУ"); 
	
	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа.
	СтруктураШапкиДокумента   = УправлениеЗапасами.СформироватьЗапросПоДеревуПолей(ЭтотОбъект, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, "");

КонецПроцедуры

// Процедура определяет параметры учетной политики
//
Процедура ПодготовитьПараметрыУчетнойПолитики(СтруктураШапкиДокумента, Отказ, Заголовок)
	
	РазрешитьУчетУслугБезПлановыхЦен = НЕ УчетнаяПолитика.ПорядокРаспределенияРасходовНаОказаниеУслуг(СтруктураШапкиДокумента.Организация, СтруктураШапкиДокумента.Дата) = Перечисления.ПорядокРаспределенияРасходовНаОказаниеУслуг.ПоПлановымЦенам;
	
	СтруктураШапкиДокумента.Вставить("ЕстьНалогНаПрибыльДо2015",         УчетнаяПолитика.ПлательщикНалогаНаПрибыльДо2015(СтруктураШапкиДокумента.Организация, СтруктураШапкиДокумента.Дата));
	СтруктураШапкиДокумента.Вставить("ЕстьНДС",                          УчетнаяПолитика.ПлательщикНДС(СтруктураШапкиДокумента.Организация, СтруктураШапкиДокумента.Дата));
	СтруктураШапкиДокумента.Вставить("СпособОценкиТоваровВРознице",      УчетнаяПолитика.СпособОценкиТоваровВРознице(СтруктураШапкиДокумента.Организация, СтруктураШапкиДокумента.Дата));
	СтруктураШапкиДокумента.Вставить("РазрешитьУчетУслугБезПлановыхЦен", РазрешитьУчетУслугБезПлановыхЦен);
	
КонецПроцедуры

Процедура ПодготовитьТаблицуПоКультурам(СтруктураШапкиДокумента, ТаблицаПоКультурам, Отказ, Заголовок) Экспорт
	
	ПогрешностиОкругления     = Новый Соответствие;
	
	СтруктураПолей = Новый Структура;
	СтруктураПростыхПолей = Новый Структура;
	СтруктураСложныхПолей = Новый Структура;
	
	СтруктураПолей.Вставить("Номенклатура",                             "Номенклатура");
	СтруктураПолей.Вставить("НоваяНоменклатура",                        "НоваяНоменклатура");
	СтруктураПолей.Вставить("Количество",                               "ФизическийВес");
	СтруктураПолей.Вставить("Вес",                                      "ФизическийВес");
	СтруктураПолей.Вставить("Сумма",                                    "Сумма");
	СтруктураПолей.Вставить("СтавкаНДС",                                "СтавкаНДС");
	СтруктураПолей.Вставить("НДС",                                      "СуммаНДС");
	СтруктураПолей.Вставить("ДокументОприходования",                    "ДокументОприходования");
	СтруктураПолей.Вставить("Себестоимость" ,                           "Себестоимость");
	СтруктураПолей.Вставить("СхемаРеализации",                          "СхемаРеализации");
	СтруктураПолей.Вставить("СчетДоходовБУ",                            "СхемаРеализации.СчетДоходов");
	СтруктураПолей.Вставить("СубконтоДоходовБУ1",                       "СхемаРеализации.СубконтоДоходов1");
	СтруктураПолей.Вставить("СубконтоДоходовБУ2",                       "СхемаРеализации.СубконтоДоходов2");
	СтруктураПолей.Вставить("СубконтоДоходовБУ3",                       "СхемаРеализации.СубконтоДоходов3");
	СтруктураПолей.Вставить("СчетРасходовБУ",                           "СхемаРеализации.СчетСебестоимости");
	СтруктураПолей.Вставить("СубконтоРасходовБУ1",                      "СхемаРеализации.СубконтоСебестоимости1");
	СтруктураПолей.Вставить("СубконтоРасходовБУ2",                      "СхемаРеализации.СубконтоСебестоимости2");
	СтруктураПолей.Вставить("СубконтоРасходовБУ3",                      "СхемаРеализации.СубконтоСебестоимости3");
	СтруктураПолей.Вставить("НоменклатурнаяГруппа",                     "Номенклатура.НоменклатурнаяГруппа");
	СтруктураПолей.Вставить("СчетУчетаБУ",                              "СчетУчетаБУ");
	СтруктураПолей.Вставить("СчетУчетаБУНоменклатура",                  "СчетУчетаБУ");
	СтруктураПолей.Вставить("НовыйСчетУчетаБУ",                         "НовыйСчетУчетаБУ");
	СтруктураПолей.Вставить("СчетУчетаБУНоваяНоменклатура",             "НовыйСчетУчетаБУ");
	СтруктураПолей.Вставить("СчетУчетаБУНоменклатураЗабалансовый",      "СчетУчетаБУ.Забалансовый");
	СтруктураПолей.Вставить("СчетУчетаБУНоваяНоменклатураЗабалансовый", "НовыйСчетУчетаБУ.Забалансовый");
	СтруктураПолей.Вставить("Склад",                                    "Ссылка.Склад");	
	СтруктураПолей.Вставить("НалоговоеНазначение",                      "НалоговоеНазначение");
	СтруктураПолей.Вставить("СчетУчетаНДС",                             "Ссылка.СчетУчетаНДС");
	СтруктураПолей.Вставить("ДокументОприходования",                    "Ссылка");

	Если ВидОперации = Перечисления.ИНАГРО_ВидыОперацийПереоформления.Поступление Тогда 
		
		СтруктураПростыхПолей.Вставить("ВидОперацииВвозаВывозаСобственногоЗерна", Перечисления.ИНАГРО_ВидыОперацийВвозаВывозаСобственногоЗерна.ПоступлениеТоваров);
		СтруктураПолей.Вставить("ПоставщикПолучатель", "Ссылка.Владелец");
		
	ИначеЕсли ВидОперации = Перечисления.ИНАГРО_ВидыОперацийПереоформления.Реализация Тогда
		
		СтруктураПростыхПолей.Вставить("ВидОперацииВвозаВывозаСобственногоЗерна", Перечисления.ИНАГРО_ВидыОперацийВвозаВывозаСобственногоЗерна.РеализацияТоваровУслуг);
		СтруктураПолей.Вставить("ПоставщикПолучатель", "Ссылка.НовыйВладелец");
		
	КонецЕсли;
	
	СтруктураПолей.Вставить("ВидДеятельностиНДС",       "НалоговоеНазначение.ВидДеятельностиНДС");
	СтруктураПолей.Вставить("ВидНалоговойДеятельности", "НалоговоеНазначение.ВидНалоговойДеятельности");

	РезультатЗапросаПоКультурам = ОбщегоНазначенияРед12.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Культуры", СтруктураПолей, СтруктураПростыхПолей, СтруктураСложныхПолей);
	ТаблицаПоКультурам = РезультатЗапросаПоКультурам.Выгрузить(); 
	
	ТаблицаПоКультурам.Колонки.СчетРасходовБУ.Имя	   = "КорСчетСписанияБУ";
	ТаблицаПоКультурам.Колонки.СубконтоРасходовБУ1.Имя = "КорСубконтоСписанияБУ1";
	ТаблицаПоКультурам.Колонки.СубконтоРасходовБУ2.Имя = "КорСубконтоСписанияБУ2";
	ТаблицаПоКультурам.Колонки.СубконтоРасходовБУ3.Имя = "КорСубконтоСписанияБУ3";
	ТаблицаПоКультурам.Колонки.Добавить("Регистратор");	
	ТаблицаПоКультурам.Колонки.Добавить("Организация");
	ТаблицаПоКультурам.Колонки.Добавить("ДоговорКонтрагента");
	ТаблицаПоКультурам.ЗаполнитьЗначения(ЭтотОбъект,                                 "Регистратор");
	ТаблицаПоКультурам.ЗаполнитьЗначения(СтруктураШапкиДокумента.Склад,              "Склад");
	ТаблицаПоКультурам.ЗаполнитьЗначения(СтруктураШапкиДокумента.Организация,        "Организация");
	ТаблицаПоКультурам.ЗаполнитьЗначения(СтруктураШапкиДокумента.ДоговорКонтрагента, "ДоговорКонтрагента");	
		
	НалоговыйУчет.ДобавитьКолонкиТоваровРегл(ТаблицаПоКультурам, СтруктураШапкиДокумента, ПогрешностиОкругления, Истина); 
		
КонецПроцедуры

Процедура ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоКультурам, Отказ, Заголовок)
	
	СтруктураШапкиДокументаЭлеватор = Новый Структура;
	Для Каждого текЭлемент Из СтруктураШапкиДокумента Цикл
		СтруктураШапкиДокументаЭлеватор.Вставить(текЭлемент.Ключ, текЭлемент.Значение);
	КонецЦикла;	
	
	ТаблицаПоКультурамЭлеватор = ТаблицаПоКультурам.Скопировать();
	
	ПровестиПоРегистрамЭлеватора(РежимПроведения, Движения, СтруктураШапкиДокументаЭлеватор, ТаблицаПоКультурамЭлеватор, Отказ, Заголовок);
	
	Если ИНАГРО_Элеватор.ПолучитьПараметрУчетаЭлеватора(СтруктураШапкиДокумента.Дата, "ОтражениеВвозаВывозаСобственногоЗернаВРегламентированномУчете", Ложь) Тогда
		ДвижениеПоРегиструКонтрольОтраженияВвозаВывозаСобственногоЗернаВРегламентированомУчете(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоКультурам, Отказ, Заголовок);
	КонецЕсли;
	
	ИнтерактивноеФормированиеТиповыхДокументов = ИНАГРО_ЭлеваторЗаполнениеДокументов.ПолучитьЗначениеПоУмолчанию("ИнтерактивноеФормированиеТиповыхДокументов");	
	Если ИнтерактивноеФормированиеТиповыхДокументов Тогда						
		ИНАГРО_Элеватор.СформироватьПодчиненныеДокументы(ЭтотОбъект, Отказ);
	КонецЕсли;

КонецПроцедуры	

Процедура ПровестиПоРегистрамЭлеватора(РежимПроведения, Движения, СтруктураШапкиДокумента, ТаблицаПоКультурам, Отказ, Заголовок)
	
	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("ЛабораторныйАнализ");
	Таблица.Колонки.Добавить("Вес");  
	
	СтруктураШапкиДокумента.Вставить("ИмяТабЧасти", "Культуры");
	
	Колонки = 0;	
	
	СобственноеПодразделение = ИНАГРО_Элеватор.ПолучитьДополнительныйРеквизитКонтрагента(НовыйВладелец, "СобственноеПодразделение"); 
	
	ДавальческоеСырье = Ложь;
	Если НЕ ИНАГРО_Элеватор.ОпределитьПринадлежностьКонтрагента(Владелец) Тогда  							 
		ДавальческоеСырье = Истина;
	КонецЕсли;
	
	Для Каждого СтрокаТабличнойЧасти Из Культуры Цикл    
		
		СтруктураШапкиДокумента.Владелец           = Владелец;
		СтруктураШапкиДокумента.ДоговорКонтрагента = ДоговорКонтрагента;		
		СтруктураШапкиДокумента.Склад              = Склад;
		СтруктураШапкиДокумента.ВидХранения        = ВидХранения;
		СтруктураШапкиДокумента.Номенклатура       = СтрокаТабличнойЧасти.Номенклатура;
		
		СтруктураШапкиДокумента.Вставить("Номенклатура",       СтрокаТабличнойЧасти.Номенклатура);					
		СтруктураШапкиДокумента.Вставить("ФизическийВес",      СтрокаТабличнойЧасти.ФизическийВес);
		СтруктураШапкиДокумента.Вставить("ЛабораторныйАнализ", СтрокаТабличнойЧасти.ЛабораторныйАнализ);					
		СтруктураШапкиДокумента.Вставить("НомерАнализа",       СтрокаТабличнойЧасти.НомерАнализа);		
		СтруктураШапкиДокумента.Вставить("Влажность",          СтрокаТабличнойЧасти.Влажность);					
		СтруктураШапкиДокумента.Вставить("СорнаяПримесь",      СтрокаТабличнойЧасти.СорнаяПримесь);
		СтруктураШапкиДокумента.Вставить("ЗерноваяПримесь",    СтрокаТабличнойЧасти.ЗерноваяПримесь);				
		СтруктураШапкиДокумента.Вставить("ЗачетныйВес",        СтрокаТабличнойЧасти.ЗачетныйВес);		
		СтруктураШапкиДокумента.Вставить("ВесОбразцов",        0);		
		СтруктураШапкиДокумента.Вставить("Количество",         СтрокаТабличнойЧасти.КоличествоФасовки);								
		СтруктураШапкиДокумента.Вставить("КоличествоМест",     СтрокаТабличнойЧасти.КоличествоФасовки);								
		СтруктураШапкиДокумента.Вставить("Поставщик",          Справочники.Контрагенты.ПустаяСсылка());								
		СтруктураШапкиДокумента.Вставить("Откуда",             "");											                                                  
		СтруктураШапкиДокумента.Вставить("ВидФасовки",         СтрокаТабличнойЧасти.Фасовка);
		
		Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.ЛабораторныйАнализ) Тогда
			НоваяСтрока                    = Таблица.Добавить();
			НоваяСтрока.ЛабораторныйАнализ = СтрокаТабличнойЧасти.ЛабораторныйАнализ;
			НоваяСтрока.Вес                = СтрокаТабличнойЧасти.ФизическийВес;
		КонецЕсли;
		
		Колонки = Колонки + 1;
		
		ИНАГРО_Элеватор.ДвиженияПоРегиструОстаткиРасход(Движения, СтруктураШапкиДокумента);
		ИНАГРО_Элеватор.ДвиженияПоРегиструОстаткиСводнаяРасход(Движения, СтруктураШапкиДокумента);
		
		Проводить = ИНАГРО_Элеватор.ПроверкаЗаполненияКачества(Дата, СтрокаТабличнойЧасти.ЛабораторныйАнализ, СтрокаТабличнойЧасти.Влажность, СтрокаТабличнойЧасти.Номенклатура);
		
		Если Проводить Тогда 			
			
			ИНАГРО_Элеватор.ДвиженияПоРегиструФорма36Расход(Движения, СтруктураШапкиДокумента);
		   
			СтруктураШапкиДокумента.Вставить("НомерАнализа", СтрокаТабличнойЧасти.НомерАнализа);

			Если    Склад <> НовыйСклад
				ИЛИ СтрокаТабличнойЧасти.Номенклатура <> СтрокаТабличнойЧасти.НоваяНоменклатура 
				ИЛИ (ВидХранения <> НовыйВидХранения И НЕ ИНАГРО_Элеватор.ПолучитьПараметрУчетаЭлеватора(СтруктураШапкиДокумента.Дата, "НеВестиУчетПоВидуХраненияВККУ", Ложь)) Тогда
				ИНАГРО_Элеватор.ДвиженияПоРегиструФорма36СводнаяРасход(Движения, СтруктураШапкиДокумента);
			КонецЕсли;
			
		Иначе
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Документ: %1 в строке № %2 не заполнены показатели качества. По этой строке проводка по форме 36 не выполнена!';uk='Документ: %1 в рядку № %2 не заповнені показники якості. За цим рядком проводка за формою 36 не виконано!'"),
				Ссылка, Колонки);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			
		КонецЕсли;
		
		СтруктураШапкиДокумента.Владелец           = НовыйВладелец;
		СтруктураШапкиДокумента.ДоговорКонтрагента = НовыйДоговорКонтрагента;
		СтруктураШапкиДокумента.Склад              = НовыйСклад;
		СтруктураШапкиДокумента.МестоХранения      = НовоеМестоХранения;
		СтруктураШапкиДокумента.ВидХраНения        = НовыйВидХранения;
		СтруктураШапкиДокумента.Откуда             = Склад;	
		СтруктураШапкиДокумента.Номенклатура       = СтрокаТабличнойЧасти.НоваяНоменклатура;
		
		ИНАГРО_Элеватор.ДвиженияПоРегиструОстаткиПриход(Движения, СтруктураШапкиДокумента);
		ИНАГРО_Элеватор.ДвиженияПоРегиструОстаткиСводнаяПриход(Движения, СтруктураШапкиДокумента);
		
		Если Проводить Тогда 						
			
			ИНАГРО_Элеватор.ДвиженияПоРегиструФорма36Приход(Движения, СтруктураШапкиДокумента);		
			
			Если    Склад <> НовыйСклад
				ИЛИ СтрокаТабличнойЧасти.Номенклатура <> СтрокаТабличнойЧасти.НоваяНоменклатура  
				ИЛИ (ВидХранения <> НовыйВидХранения И НЕ ИНАГРО_Элеватор.ПолучитьПараметрУчетаЭлеватора(СтруктураШапкиДокумента.Дата, "НеВестиУчетПоВидуХраненияВККУ", Ложь)) Тогда
				ИНАГРО_Элеватор.ДвиженияПоРегиструФорма36СводнаяПриход(Движения, СтруктураШапкиДокумента);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;	
	
	Если Таблица.Количество() > 0 Тогда
		Таблица.Свернуть("ЛабораторныйАнализ", "Вес");
	КонецЕсли;
	
	Для Каждого СтрокаТаблицы Из Таблица Цикл
		
		СтруктураШапкиДокумента.ФизическийВес = СтрокаТаблицы.Вес;
		СтруктураШапкиДокумента.Вставить("ЛабораторныйАнализ", СтрокаТаблицы.ЛабораторныйАнализ);
		
		ИНАГРО_Элеватор.ДвиженияПоРегиструЖурналЛабораторныхАнализов(Движения, СтруктураШапкиДокумента);	
		ИНАГРО_Элеватор.ДвиженияПоРегиструФорма49(Движения, СтруктураШапкиДокумента);
		
	КонецЦикла;
	
	ТаблицаУслуг = СформироватьТаблицуУслуг();
	
	Если ТаблицаУслуг.Количество() > 0 Тогда
		ИНАГРО_Элеватор.ДвиженияПоРегиструРасчетыПоУслугам(Движения, ТаблицаУслуг, "Приход");
	КонецЕсли;
	
	ПровестиПоРегиструДанныеПоКачествуПартийЗерна();
	
КонецПроцедуры	

Процедура ПровестиПоРегиструДанныеПоКачествуПартийЗерна()
	
	// Подготовим таблицу для проведения по регистру "ИНАГРО_ДанныеПоКачествуПартийЗерна".
	ТаблицаПоПартиям = ПодготовитьТаблицуПоПартиям();
	
	// Движения по регистру ДанныеПоКачетсвуПартийЗерна
	Если ТаблицаПоПартиям <> Неопределено Тогда
		//Если Не мПараметрыУчета = Неопределено Тогда
			Если ИНАГРО_Элеватор.ПолучитьПараметрУчетаЭлеватора(Дата, "ИспользоватьСистемуКонтроляКачестваПартийЗерна", Ложь) Тогда
				НаборДвижений                  = Движения.ИНАГРО_ДанныеПоКачествуПартийЗерна;
				ТаблицаДвижений                = НаборДвижений.Выгрузить();
				ОбщегоНазначенияБПВызовСервера.ЗагрузитьВТаблицуЗначений(ТаблицаПоПартиям, ТаблицаДвижений);
				// Движения по регистру ДанныеПоКачетсвуПартийЗерна
				Если ПереоформлениеПоФизическомуВесу Тогда
					ТаблицаДвиженийДопом                = НаборДвижений.Выгрузить();
					ОбщегоНазначенияБПВызовСервера.ЗагрузитьВТаблицуЗначений(ТаблицаПоПартиям, ТаблицаДвиженийДопом);
					Для Каждого Стр Из ТаблицаДвижений Цикл
						Стр.Посушено = Истина;
						Стр.Очищено = Истина;   
						Стр.ВесНаОчистку = 0;  
						Стр.ВесНаСушку = 0;
						Стр.ВыставленыУслугиСушки = Истина;
						Стр.ВыставленыУслугиОчистки = Истина;
					КонецЦикла;	
					Для Каждого Стр Из ТаблицаДвиженийДопом Цикл
						Строка = ТаблицаДвижений.Добавить();
						Строка.Организация = Стр.Организация;
						Строка.Склад = НовыйСклад;
						Строка.Силос = Стр.Силос;
						Строка.Контрагент = НовыйВладелец;
						Строка.ДоговорКонтрагента = НовыйДоговорКонтрагента;
						Строка.Номенклатура = Стр.Номенклатура;
						Строка.ЛабораторныйАнализ = Стр.ЛабораторныйАнализ.Ссылка;
						Строка.Урожай = Урожай;
						Строка.ВидХранения = НовыйВидХранения;
						Строка.Регистратор = Ссылка;
						Строка.ПартияЗерна = Ссылка;
						Строка.Сушить = Стр.Сушить;
						Строка.Чистить = Стр.Чистить;
						Строка.ФизическийВес = Стр.Вывезено;
						Строка.ВлажностьВходящая = Стр.ВлажностьВходящая;
						Строка.СорнаяПримесьВходящая = Стр.СорнаяПримесьВходящая;
						Строка.ЗерноваяПримесьВходящая = Стр.ЗерноваяПримесьВходящая;
						Строка.ФизическийВесТекущий = Стр.Вывезено;
						Строка.ВлажностьТекущая = Стр.ВлажностьТекущая;
						Строка.СорнаяПримесьТекущая = Стр.СорнаяПримесьТекущая;
						Строка.ЗерноваяПримесьТекущая = Стр.ЗерноваяПримесьТекущая;
						Строка.ФизическийВесИтоговый = Стр.Вывезено;
						Строка.ВлажностьИтоговая = Стр.ВлажностьИтоговая;
						Строка.СорнаяПримесьИтоговая = Стр.СорнаяПримесьИтоговая;
						Строка.ЗерноваяПримесьИтоговая = Стр.ЗерноваяПримесьИтоговая;
						Строка.ВыставленыУслугиСушки = Стр.ВыставленыУслугиСушки;
						Строка.ВыставленыУслугиОчистки = Стр.ВыставленыУслугиОчистки;
						Строка.ВлажностьВыставленныхУслуг = Стр.ВлажностьВыставленныхУслуг;
						Строка.СорнаяПримесьВыставленныхУслуг = Стр.СорнаяПримесьВыставленныхУслуг;
						Строка.ЗерноваяПримесьВыставленныхУслуг = Стр.ЗерноваяПримесьВыставленныхУслуг;
						Строка.ВесНаОчистку = Стр.ВесНаОчистку;
						Строка.ВесНаСушку = Стр.ВесНаСушку;
					КонецЦикла;	
				Иначе	
					Для Каждого Стр Из Культуры Цикл 
						Строка = ТаблицаДвижений.Добавить();
						Строка.Организация = Организация;
						Строка.Склад = НовыйСклад;
						Строка.Контрагент = НовыйВладелец;
						Строка.ДоговорКонтрагента = НовыйДоговорКонтрагента;
						Строка.Номенклатура = Стр.НоваяНоменклатура;
						Строка.ЛабораторныйАнализ = Стр.ЛабораторныйАнализ.Ссылка;
						Строка.Урожай = Урожай;
						Строка.ВидХранения = НовыйВидХранения;
						Строка.Регистратор = Ссылка;
						Строка.ПартияЗерна = Ссылка;
						ВидКультуры     = ИНАГРО_Элеватор.ПолучитьДополнительныйРеквизитНоменклатуры(Стр.НоваяНоменклатура,"ВидКультуры");
						Строка.Сушить = Ложь;
						Строка.Чистить = Ложь;
						Строка.ФизическийВес = Стр.ФизическийВес;
						Строка.ВлажностьВходящая = Стр.Влажность;
						Строка.СорнаяПримесьВходящая = Стр.СорнаяПримесь;
						Строка.ЗерноваяПримесьВходящая = Стр.ЗерноваяПримесь;
						Строка.ФизическийВесТекущий = Стр.ФизическийВес;
						Строка.ВлажностьТекущая = Стр.Влажность;
						Строка.СорнаяПримесьТекущая = Стр.СорнаяПримесь;
						Строка.ЗерноваяПримесьТекущая = Стр.ЗерноваяПримесь;
						Строка.ФизическийВесИтоговый = Стр.ФизическийВес;
						Строка.ВлажностьИтоговая = Стр.Влажность;
						Строка.СорнаяПримесьИтоговая = Стр.СорнаяПримесь;
						Строка.ЗерноваяПримесьИтоговая = Стр.ЗерноваяПримесь;
						Строка.ВыставленыУслугиСушки = Истина;
						Строка.ВыставленыУслугиОчистки = Истина;
						Строка.ВлажностьВыставленныхУслуг = Стр.Влажность;
						Строка.СорнаяПримесьВыставленныхУслуг = Стр.СорнаяПримесь;
						Строка.ЗерноваяПримесьВыставленныхУслуг = Стр.ЗерноваяПримесь;
					КонецЦикла;
				КонецЕсли;
				
				НаборДвижений.мПериод          = Дата;
				НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;
				Движения.ИНАГРО_ДанныеПоКачествуПартийЗерна.ВыполнитьДвижения();
				
				
				
				//  для Акта Очистки Сушки
				Если ПереоформлениеПоФизическомуВесу Тогда
					НаборДвижений                  = Движения.ИНАГРО_ДанныеПоКачествуЗерна;
					ТаблицаДвижений                = НаборДвижений.Выгрузить();
					ОбщегоНазначенияБПВызовСервера.ЗагрузитьВТаблицуЗначений(ТаблицаПоПартиям, ТаблицаДвижений);
					ТаблицаДвиженийДопом                = НаборДвижений.Выгрузить();
					ОбщегоНазначенияБПВызовСервера.ЗагрузитьВТаблицуЗначений(ТаблицаПоПартиям, ТаблицаДвиженийДопом);
					Для Каждого Стр Из ТаблицаДвижений Цикл
						Стр.Посушено = Истина;
						Стр.Очищено = Истина;   
						Стр.ВесНаОчистку = 0;  
						Стр.ВесНаСушку = 0;
						Стр.ВыставленыУслугиСушки = Истина;
						Стр.ВыставленыУслугиОчистки = Истина;
					КонецЦикла;	
					Для Каждого Стр Из ТаблицаДвиженийДопом Цикл
						Строка = ТаблицаДвижений.Добавить();
						Строка.Организация = Стр.Организация;
						Строка.Склад = НовыйСклад;
						Строка.Силос = Стр.Силос;  
						Строка.МестоХранения = Стр.Силос;
						Строка.Контрагент = НовыйВладелец;
						Строка.ДоговорКонтрагента = НовыйДоговорКонтрагента;
						Строка.Номенклатура = Стр.Номенклатура;
						Строка.ЛабораторныйАнализ = Стр.ЛабораторныйАнализ.Ссылка;
						Строка.Урожай = Урожай;
						Строка.ВидХранения = НовыйВидХранения;
						Строка.Регистратор = Ссылка;
						Строка.ПартияЗерна = Ссылка;
						Строка.Сушить = Стр.Сушить;
						Строка.Чистить = Стр.Чистить;
						Строка.ФизическийВес = Стр.Вывезено;
						Строка.ВлажностьВходящая = Стр.ВлажностьВходящая;
						Строка.СорнаяПримесьВходящая = Стр.СорнаяПримесьВходящая;
						Строка.ЗерноваяПримесьВходящая = Стр.ЗерноваяПримесьВходящая;
						Строка.ФизическийВесТекущий = Стр.Вывезено;
						Строка.ВлажностьТекущая = Стр.ВлажностьТекущая;
						Строка.СорнаяПримесьТекущая = Стр.СорнаяПримесьТекущая;
						Строка.ЗерноваяПримесьТекущая = Стр.ЗерноваяПримесьТекущая;
						Строка.ФизическийВесИтоговый = Стр.Вывезено;
						Строка.ВлажностьИтоговая = Стр.ВлажностьИтоговая;
						Строка.СорнаяПримесьИтоговая = Стр.СорнаяПримесьИтоговая;
						Строка.ЗерноваяПримесьИтоговая = Стр.ЗерноваяПримесьИтоговая;
						Строка.ВыставленыУслугиСушки = Стр.ВыставленыУслугиСушки;
						Строка.ВыставленыУслугиОчистки = Стр.ВыставленыУслугиОчистки;
						Строка.ВлажностьВыставленныхУслуг = Стр.ВлажностьВыставленныхУслуг;
						Строка.СорнаяПримесьВыставленныхУслуг = Стр.СорнаяПримесьВыставленныхУслуг;
						Строка.ЗерноваяПримесьВыставленныхУслуг = Стр.ЗерноваяПримесьВыставленныхУслуг;
						Строка.ВесНаОчистку = Стр.ВесНаОчистку;
						Строка.ВесНаСушку = Стр.ВесНаСушку;
					КонецЦикла;	
					НаборДвижений.мПериод          = Дата;
					НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;
					Движения.ИНАГРО_ДанныеПоКачествуЗерна.ВыполнитьДвижения();
					Движения.ИНАГРО_ДанныеПоКачествуЗерна.Записать(); //МАСЛО - для возможности дописать масличность в движение в подписке на событие ИНАГРО_ОбработкаПроведения_ЭлеваторМасло
				КонецЕсли;
			//КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры	

Процедура ДвижениеПоРегиструКонтрольОтраженияВвозаВывозаСобственногоЗернаВРегламентированомУчете(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, Отказ, Заголовок)
	
	ВыполнитьДвижения = Ложь;
	
	СобственноеПодразделениеВладелец      = ИНАГРО_Элеватор.ОпределитьПринадлежностьКонтрагента(Владелец);
	СобственноеПодразделениеНовыйВладелец = ИНАГРО_Элеватор.ОпределитьПринадлежностьКонтрагента(НовыйВладелец);
	
	Если    (ВидОперации = Перечисления.ИНАГРО_ВидыОперацийПереоформления.Поступление И СобственноеПодразделениеНовыйВладелец И Владелец <> НовыйВладелец) 
		ИЛИ (ВидОперации = Перечисления.ИНАГРО_ВидыОперацийПереоформления.Реализация И СобственноеПодразделениеВладелец И Владелец <> НовыйВладелец) Тогда 
		
		ВыполнитьДвижения = Истина
		
	КонецЕсли;
	
	Если ВыполнитьДвижения Тогда
		
		// Приход
		
		НаборДвижений = Движения.ИНАГРО_КонтрольОтраженияВвозаВывозаСобственногоЗернаВРегламентированномУчете;
		
		СтруктТаблицДокумента = Новый Структура;
		СтруктТаблицДокумента.Вставить("ТаблицаПоТоварам", ТаблицаПоТоварам);
		
		ТаблицыДанныхДокумента = ИНАГРО_Общий.ЗагрузитьТаблицыДокументаВСтруктуру(НаборДвижений, СтруктТаблицДокумента);
		
		ИНАГРО_Общий.ЗаписатьТаблицыДокументаВРегистр(НаборДвижений, ВидДвиженияНакопления.Приход, ТаблицыДанныхДокумента, Дата);
		
		// Расход
		
		Если НЕ ИНАГРО_Элеватор.ПолучитьПараметрУчетаЭлеватора(СтруктураШапкиДокумента.Дата, "ФормироватьБухДокументыПереоформленияОтражением", Ложь) Тогда
				
			ИНАГРО_Общий.ЗаписатьТаблицыДокументаВРегистр(НаборДвижений, ВидДвиженияНакопления.Расход, ТаблицыДанныхДокумента, Дата);
			
		КонецЕсли;		
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции	

Процедура ЗаполнитьПоДокументуОснованию(Основание, НоменклатураПриВыбореПриказа = Неопределено) Экспорт
	
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ИНАГРО_АктРасчет310") Тогда
		
		ВидОперации                 = ИНАГРО_Элеватор.ПолучитьОперациюПереоформления(ЭтотОбъект);
		Организация                 = Основание.Организация;
		Владелец                    = Основание.Владелец;
		ДоговорКонтрагента          = Основание.ДоговорКонтрагента;
		Склад                       = Основание.Склад;
		НовыйСклад                  = Основание.Склад;
		ВидХранения                 = Основание.ВидХранения;
		НовыйВидХранения            = Основание.ВидХранения;				
		Урожай                      = Основание.Урожай;
		АктРасчета                  = Основание.Ссылка;
		АктРасчетаНомер             = Основание.Номер;
		АктРасчетаДата              = Основание.Дата;
		ОтражатьВБухгалтерскомУчете = Основание.ОтражатьВБухгалтерскомУчете;
		
		НоваяСтрока = Культуры.Добавить();
		НоваяСтрока.Номенклатура       = Основание.Номенклатура;
		НоваяСтрока.ЕдиницаИзмерения   = НоваяСтрока.Номенклатура.БазоваяЕдиницаИзмерения;
		НоваяСтрока.ФизическийВес      = Основание.ФизическийВес8;
		НоваяСтрока.ЗачетныйВес        = Основание.ФизическийВес8;
		НоваяСтрока.Количество         = Основание.ФизическийВес8;
		НоваяСтрока.ЛабораторныйАнализ = Основание.ЛабораторныйАнализ;
		НоваяСтрока.НомерАнализа       = Основание.НомерАнализа;
		НоваяСтрока.Влажность          = Основание.Влажность8;
		НоваяСтрока.СорнаяПримесь      = Основание.СорнаяПримесь8;
		НоваяСтрока.ЗерноваяПримесь    = Основание.ЗерноваяПримесь8;

		Документы.ИНАГРО_Переоформление.ЗаполнитьСчетаУчетаВТабличнойЧасти(ЭтотОбъект, "Культуры");

	ИначеЕсли ТипЗнч(Основание.Ссылка) = Тип("ДокументСсылка.ИНАГРО_ПриказНаВывоз") Тогда		

		Дата                    = Основание.Ссылка.Дата;
		Организация             = Основание.Организация;
		Владелец                = Основание.Владелец;
		ДоговорКонтрагента      = Основание.ДоговорКонтрагента;
		Склад                   = Основание.Склад;		
		МестоХранения           = Основание.МестоХранения;		
		ВидХранения             = Основание.ВидХранения;		
		НовыйВладелец           = Основание.Получатель;
		НовыйДоговорКонтрагента = Основание.ДоговорПолучателя;
		НовыйСклад              = Основание.Склад;
		НовоеМестоХранения      = Основание.МестоХранения;                        
		НовыйВидХранения        = Основание.ВидХранения;		
		Урожай                  = Основание.Урожай;
		ПриказНаПереоформление  = Основание.Ссылка;		
		ДоверенностьДата        = Основание.ДоверенностьДата;
		ДоверенностьНомер       = Основание.ДоверенностьНомер;
		ДоверенностьСерия       = Основание.ДоверенностьСерия;
		ДоверенностьЧерез       = Основание.ДоверенностьЧерез;		
		Комментарий             = Основание.Комментарий; 
		
		Если НоменклатураПриВыбореПриказа <> Неопределено Тогда
			Номенклатура = НоменклатураПриВыбореПриказа;
		Иначе
			Номенклатура = Основание.Номенклатура;
		КонецЕсли;
		
		ПоказыватьВДокументахОстатокВЗачетномВесе = ИНАГРО_ЭлеваторЗаполнениеДокументов.ПолучитьЗначениеПоУмолчанию("ПоказыватьВДокументахОстатокВЗачетномВесе");
		
		ДанныеОбъекта = Новый Структура(
			"Организация, Владелец, ДоговорКонтрагента, 
			|Склад, ВидХранения, Урожай,
			|Дата");
		ЗаполнитьЗначенияСвойств(ДанныеОбъекта, ЭтотОбъект);
	    ДанныеОбъекта.Вставить("ПоказыватьВДокументахОстатокВЗачетномВесе", ПоказыватьВДокументахОстатокВЗачетномВесе);

		Для Каждого СтрокаТабличнойЧасти Из Основание.Ссылка.Культуры Цикл
			
			Если СтрокаТабличнойЧасти.Номенклатура = Номенклатура Тогда
				
				НоваяСтрока = Культуры.Добавить();				
				НоваяСтрока.Номенклатура          = СтрокаТабличнойЧасти.Номенклатура;
				НоваяСтрока.НоваяНоменклатура     = СтрокаТабличнойЧасти.Номенклатура;
				НоваяСтрока.ЕдиницаИзмерения      = СтрокаТабличнойЧасти.ЕдиницаИзмерения;
				НоваяСтрока.ЗачетныйВес           = СтрокаТабличнойЧасти.ЗачетныйВес;
				НоваяСтрока.ФизическийВес         = СтрокаТабличнойЧасти.ФизическийВес;
				НоваяСтрока.ЛабораторныйАнализ    = СтрокаТабличнойЧасти.ЛабораторныйАнализ;
				НоваяСтрока.НомерАнализа          = СтрокаТабличнойЧасти.НомерАнализа;
				НоваяСтрока.Влажность             = СтрокаТабличнойЧасти.Влажность;
				НоваяСтрока.СорнаяПримесь         = СтрокаТабличнойЧасти.СорнаяПримесь;
				НоваяСтрока.ЗерноваяПримесь       = СтрокаТабличнойЧасти.ЗерноваяПримесь; 				
				НоваяСтрока.СтавкаНДС             = НоваяСтрока.НоваяНоменклатура.СтавкаНДС;
				НоваяСтрока.ДокументОприходования = Ссылка;				
				
				Документы.ИНАГРО_Переоформление.ЗаполнитьОстаткиВСтрокеТабличнойЧасти(ДанныеОбъекта, НоваяСтрока);
								
			КонецЕсли;
			
		КонецЦикла;
		
		Документы.ИНАГРО_Переоформление.ЗаполнитьСчетаУчетаВТабличнойЧасти(ЭтотОбъект, "Культуры");
		
	КонецЕсли; 
			
КонецПроцедуры

Процедура ЗаполнитьУслуги() Экспорт
	
	ТаблицаУслуг = Новый ТаблицаЗначений;
	ТаблицаУслуг.Колонки.Добавить("Номенклатура");
	ТаблицаУслуг.Колонки.Добавить("Количество");
	ТаблицаУслуг.Колонки.Добавить("Сумма"); 
	ТаблицаУслуг.Колонки.Добавить("Культура");
	
	Если ИНАГРО_Элеватор.ПолучитьПараметрУчетаЭлеватора(Дата, "ЗаПереоформлениеПлатитНовыйВладелец", Ложь) Тогда
		ВладелецУслуги = НовыйВладелец;
	Иначе		
		ВладелецУслуги = Владелец;
	КонецЕсли;
	
	Если НЕ ИНАГРО_Элеватор.ОпределитьПринадлежностьКонтрагента(ВладелецУслуги) Тогда
		
		Номенклатура_Переоформление = ИНАГРО_Элеватор.ПолучитьПредопределеннуюНоменклатуру("Переоформление");
		   
		Если ЗначениеЗаполнено(Номенклатура_Переоформление) Тогда  
			
			Если ВидХранения.ТипДоговора = Справочники.ВидыВзаиморасчетов.ДоговорХранения Тогда
				
				Для Каждого СтрокаТабличнойЧасти Из Культуры Цикл
					
					ВидКультурыДляРасчетаСтоимостиУслуги = ИНАГРО_Элеватор.ПолучитьДополнительныйРеквизитНоменклатуры(СтрокаТабличнойЧасти.НоваяНоменклатура,"ВидКультуры").ВидКультурыДляРасчетаСтоимостиУслуги;
					
					ТекущаяЦена = ИНАГРО_Элеватор.ПолучитьЦенуУслугиЭлеватора(Организация,
					                                                          Дата,
																			  ВладелецУслуги,
																			  ДоговорКонтрагента,
																			  ВидКультурыДляРасчетаСтоимостиУслуги,
																			  Урожай,
																			  Номенклатура_Переоформление);
					
					Если ТекущаяЦена <> 0 И СтрокаТабличнойЧасти.ФизическийВес <> 0 Тогда 													 
						НоваяСтрока              = ТаблицаУслуг.Добавить();
						НоваяСтрока.Номенклатура = Номенклатура_Переоформление;
						НоваяСтрока.Количество   = 1;
						НоваяСтрока.Сумма        = НоваяСтрока.Количество * ТекущаяЦена;
						НоваяСтрока.культура     = СтрокаТабличнойЧасти.Номенклатура
					Иначе
						ПараметрыОтбора = Новый Структура;
						ПараметрыОтбора.Вставить("Номенклатура", Номенклатура_Переоформление);
						НайденныеСтроки = Услуги.НайтиСтроки(ПараметрыОтбора);
						Для Каждого Строк_Усл из НайденныеСтроки Цикл
							Услуги.Удалить(Строк_Усл);
						КонецЦикла;
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;	
	
	ТаблицаУслуг.Свернуть("Номенклатура, Культура", "Количество, Сумма");
	Для Каждого Строка_Услуг Из ТаблицаУслуг Цикл
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("Номенклатура", Строка_Услуг.Номенклатура);
		НайденныеСтроки = Услуги.НайтиСтроки(ПараметрыОтбора);
		Если НайденныеСтроки.Количество() = 0 Тогда
			Если ЗначениеЗаполнено(Строка_Услуг.Номенклатура) Тогда
				НоваяСтрока              = Услуги.Добавить();
				НоваяСтрока.Номенклатура = Строка_Услуг.Номенклатура;
				НоваяСтрока.Количество   = Строка_Услуг.Количество;
				НоваяСтрока.Цена         = Строка_Услуг.Сумма / Строка_Услуг.Количество;
				НоваяСтрока.Сумма        = Строка_Услуг.Сумма;
				НоваяСтрока.Культура     = Строка_Услуг.культура;
			КонецЕсли;
		Иначе
			Для каждого Строк_Усл из НайденныеСтроки Цикл
				Строк_Усл.Количество = Строка_Услуг.Количество;
				Строк_Усл.Цена       = Строка_Услуг.Сумма / Строка_Услуг.Количество;
				Строк_Усл.Сумма      = Строка_Услуг.Сумма;
				Строк_Усл.Культура   = Строка_Услуг.культура;
				Прервать;
			КонецЦикла;	
		КонецЕсли;	
	КонецЦикла;
		
КонецПроцедуры

Функция СформироватьТаблицуУслуг()
	
	ТаблицаУслуг = Новый ТаблицаЗначений;
	ТаблицаУслуг.Колонки.Добавить("ДатаРасчета");
	ТаблицаУслуг.Колонки.Добавить("Ссылка"); 
	ТаблицаУслуг.Колонки.Добавить("Организация");
	ТаблицаУслуг.Колонки.Добавить("Контрагент");
	ТаблицаУслуг.Колонки.Добавить("ДоговорКонтрагента");
	ТаблицаУслуг.Колонки.Добавить("Номенклатура");
	ТаблицаУслуг.Колонки.Добавить("Культура");
	ТаблицаУслуг.Колонки.Добавить("Склад");
	ТаблицаУслуг.Колонки.Добавить("ВидХранения");
	ТаблицаУслуг.Колонки.Добавить("Урожай");
	ТаблицаУслуг.Колонки.Добавить("Количество");
	ТаблицаУслуг.Колонки.Добавить("Стоимость"); 
	
	ЗаПереоформлениеПлатитНовыйВладелец = ИНАГРО_Элеватор.ПолучитьПараметрУчетаЭлеватора(Дата, "ЗаПереоформлениеПлатитНовыйВладелец", Ложь);
	Если ЗаПереоформлениеПлатитНовыйВладелец Тогда
		ВладелецУслуги         = НовыйВладелец;
		ДоговорВладельцаУслуги = НовыйДоговорКонтрагента;
	Иначе		
		ВладелецУслуги         = Владелец;
		ДоговорВладельцаУслуги = ДоговорКонтрагента;
	КонецЕсли; 	
	
	Для Каждого СтрокаТабличнойЧасти Из Услуги Цикл
		
		НоваяСтрока = ТаблицаУслуг.Добавить();
		НоваяСтрока.ДатаРасчета        = Дата;
		НоваяСтрока.Ссылка             = Ссылка; 
		НоваяСтрока.Организация        = Организация;
		НоваяСтрока.Контрагент         = ВладелецУслуги;
		НоваяСтрока.ДоговорКонтрагента = договорВладельцаУслуги;
		НоваяСтрока.Номенклатура       = СтрокаТабличнойЧасти.Номенклатура;
		НоваяСтрока.Культура           = Номенклатура;
		НоваяСтрока.Склад              = Склад;
		НоваяСтрока.ВидХранения        = ВидХранения;
		НоваяСтрока.Урожай             = Урожай;
		НоваяСтрока.Количество         = СтрокаТабличнойЧасти.Количество;
		НоваяСтрока.Стоимость          = СтрокаТабличнойЧасти.Сумма;
		
	КонецЦикла;  
	
	Возврат ТаблицаУслуг;
	
КонецФункции	 

Функция ПодготовитьТаблицуПоПартиям()
	
	резТаблица = Неопределено;
	
	СписокНоменклатур   = Новый СписокЗначений;
	СписокХарактеристик = Новый СписокЗначений;
	
	Для Каждого СтрокаТабличнойЧасти ИЗ Культуры Цикл
		СписокНоменклатур.Добавить(СтрокаТабличнойЧасти.Номенклатура);
	КонецЦикла;
	
	Запрос = Новый Запрос;
		
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаРегистра.*
		|ИЗ
		|	РегистрСведений.ИНАГРО_ДанныеПоКачествуПартийЗерна.СрезПоследних(
		|			&МоментВремени,
		|			Организация = &Организация
		|				И Контрагент = &Контрагент
		|				И ДоговорКонтрагента = &ДоговорКонтрагента
		|				И Номенклатура В (&СписокНоменклатур)
		|				И Склад = &Склад
		|				И ВидХранения = &ВидХранения
		|				И Урожай = &Урожай) КАК ТаблицаРегистра
		|
		|УПОРЯДОЧИТЬ ПО
		|	ТаблицаРегистра.ПартияЗерна.Дата";
	
	Запрос.УстановитьПараметр("МоментВремени",       МоментВремени());
	Запрос.УстановитьПараметр("Организация",         Организация);
	Запрос.УстановитьПараметр("Контрагент",          Владелец);
	Запрос.УстановитьПараметр("ДоговорКонтрагента",  ДоговорКонтрагента);
	Запрос.УстановитьПараметр("СписокНоменклатур",   СписокНоменклатур);
	Запрос.УстановитьПараметр("Склад",               Склад);
	Запрос.УстановитьПараметр("ВидХранения",         ВидХранения);
	Запрос.УстановитьПараметр("Урожай",              Урожай);
	Запрос.УстановитьПараметр("СписокХарактеристик", СписокХарактеристик);

	ТаблицаРезультатаЗапроса = Запрос.Выполнить().Выгрузить();			   
	
	Если ТаблицаРезультатаЗапроса.Количество() > 0 Тогда 
		
		резТаблица = ТаблицаРезультатаЗапроса.Скопировать();
		резТаблица.Очистить();
		
		Для Каждого СтрокаТабличнойЧасти Из Культуры Цикл
			
			ОбщийВесПереоформления = СтрокаТабличнойЧасти.ФизическийВес;
			
			СтруктураОтбора = Новый Структура;
			СтруктураОтбора.Вставить("Номенклатура", СтрокаТабличнойЧасти.Номенклатура);
			
			СтрокиПартий = ТаблицаРезультатаЗапроса.НайтиСтроки(СтруктураОтбора);
			
			Если СтрокиПартий.Количество() > 0 Тогда
				
				Для Каждого СтрокаПартии Из СтрокиПартий Цикл
					
					Если ОбщийВесПереоформления > 0 Тогда
						
						ОстатокПартии = СтрокаПартии.ФизическийВесИтоговый - СтрокаПартии.Вывезено;
						
						Если ОстатокПартии > 0 Тогда
							НоваяСтрока = резТаблица.Добавить();
							ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаПартии);
							НоваяСтрока.Вывезено   = СтрокаПартии.Вывезено + МИН(ОстатокПартии, ОбщийВесПереоформления);
							ОбщийВесПереоформления = ОбщийВесПереоформления - МИН(ОстатокПартии, ОбщийВесПереоформления);
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если резТаблица.Количество() = 0 Тогда
			резТаблица = Неопределено;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат резТаблица;
	
КонецФункции	

#КонецОбласти

#КонецЕсли