#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда  
	
Перем ПараметрыУчетаЭлеватора;

#Область ОбработчикиСобытий

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	ТипДанныхЗаполнения = ТипЗнч(ДанныеЗаполнения);
	Если ДанныеЗаполнения <> Неопределено И ТипДанныхЗаполнения <> Тип("Структура")
		И Метаданные().ВводитсяНаОсновании.Содержит(ДанныеЗаполнения.Метаданные()) Тогда
		ЗаполнитьПоДокументуОснованию(ДанныеЗаполнения);
	КонецЕсли;
	
	ИНАГРО_ЭлеваторЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект);

	ЗаполнениеДокументов.Заполнить(ЭтотОбъект, ДанныеЗаполнения);
	
	Если  ТипДанныхЗаполнения = Тип("Структура")
		И ДанныеЗаполнения.Свойство("ВидОперации") Тогда
		ВидОперации = ДанныеЗаполнения.ВидОперации;
	КонецЕсли;	
		
	Если ВидОперации = Перечисления.ИНАГРО_ВидыОперацийАктРасчет310.ПредварительныйРасчет Тогда
		
		СпособРасчетаПредварительногоАктаРасчета = ИНАГРО_Элеватор.ПолучитьПараметрУчетаЭлеватора(Дата, "СпособРасчетаПредварительногоАктаРасчета", Перечисления.ИНАГРО_СпособыРасчетаПредварительногоАктаРасчета.ПараллельныйПодборВесаЗернаИВесаОтходов);
		
		Если НЕ ЗначениеЗаполнено(СпособРасчетаПредварительногоАктаРасчета) Тогда
			СпособРасчетаПредварительногоАктаРасчета = Перечисления.ИНАГРО_СпособыРасчетаПредварительногоАктаРасчета.ПараллельныйПодборВесаЗернаИВесаОтходов;
		КонецЕсли;
		
	КонецЕсли;
		
	Если ИНАГРО_Элеватор.ПолучитьПараметрУчетаЭлеватора(Дата, "НеВестиУчетПоВидуХраненияВККУ", Ложь) Тогда
		ВидХранения = Справочники.ИНАГРО_ВидыХранения.ПустаяСсылка();
	КонецЕсли;
	
	ПроводилиОчистку               = Истина;
	ПроводилиСушку                 = Истина;
	
	СпособРасчетаПобочногоПродукта = Истина;
	СпособРасчетаОтходов3Категории = Истина;
	
	ПечататьОкончательныйАкт       = ХранилищеОбщихНастроек.Загрузить("ИНАГРО_АктРасчет310_ПечататьОкончательныйАкт", "Элеватор");
			
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	МассивНепроверяемыхРеквизитов = Новый Массив; 	
	
	Если ИНАГРО_Элеватор.ПолучитьПараметрУчетаЭлеватора(Дата, "НеВестиУчетПоВидуХраненияВККУ", Ложь) Тогда		
		МассивНепроверяемыхРеквизитов.Добавить("ВидХранения");						
	КонецЕсли;
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);	

КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ОбновитьПараметрыУчетаЭлеватора();
	
	Если ВидОперации = Перечисления.ИНАГРО_ВидыОперацийАктРасчет310.РасчетПоФакту Тогда
		Дата = КонецДня(Дата);
	КонецЕсли;

	Усушка = ДвиженияДокумента.Итог("УбыльВесаПриСушке");
	
	ХранилищеОбщихНастроек.Сохранить("ИНАГРО_АктРасчет310_ПечататьОкончательныйАкт", "Элеватор", ПечататьОкончательныйАкт);
	
КонецПроцедуры 

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	Перем Заголовок, СтруктураШапкиДокумента;
	Перем ТаблицаПоПартиям;
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКПроведению(ЭтотОбъект);
		   
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначенияБПВызовСервера.ПредставлениеДокументаПриПроведении(Ссылка);

	ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента);	
		
	// Движения по документу
	Если НЕ Отказ Тогда
		ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоПартиям, Отказ, Заголовок);
	КонецЕсли;
	
	Движения.Хозрасчетный.ВыполнитьДействияПередЗаписьюДвижений();

	ПроведениеСервер.ПодготовитьНаборыЗаписейКЗаписиДвижений(ЭтотОбъект); 	

КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКОтменеПроведения(ЭтотОбъект);
	Движения.Записать();
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)

	Дата = НачалоДня(ОбщегоНазначения.ТекущаяДатаПользователя());
	Ответственный = Пользователи.ТекущийПользователь();
		
КонецПроцедуры

#КонецОбласти

#Область Проведение

// Процедура формирует структуру шапки документа и дополнительных полей.
//
Процедура ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента) Экспорт

	// Дерево значений, содержащее имена необходимых полей в запросе по шапке.
	Перем ДеревоПолейЗапросаПоШапке;	
	
	СтруктураШапкиДокумента   = ОбщегоНазначенияРед12.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	
	// Заполним по шапке документа дерево параметров, нужных при проведении.
	ДеревоПолейЗапросаПоШапке = ОбщегоНазначенияРед12.СформироватьДеревоПолейЗапросаПоШапке(); 	
	ОбщегоНазначенияРед12.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "Организация", "ДоговорОрганизация");
	ОбщегоНазначенияРед12.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Владелец",             "Ссылка",      "Владелец");
	ОбщегоНазначенияРед12.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Номенклатура",         "Ссылка",      "Номенклатура");
	ОбщегоНазначенияРед12.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Склад",                "Ссылка",      "Склад");
	ОбщегоНазначенияРед12.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Урожай",               "Ссылка",      "Урожай");
	ОбщегоНазначенияРед12.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Откуда",               "Ссылка",      "Откуда");

	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа.
	СтруктураШапкиДокумента   = УправлениеЗапасами.СформироватьЗапросПоДеревуПолей(ЭтотОбъект, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, "");
	СтруктураШапкиДокумента   = ИНАГРО_Элеватор.ЗаполнитьСтруктуруШапкиДокументаОстаткамиФормы36(
		СтруктураШапкиДокумента, Документы.ИНАГРО_АктРасчет310.СформироватьФильтрДокумента(ЭтотОбъект)); 	
		
КонецПроцедуры

// Процедура выполняет движения по регистрам
//
Процедура ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоПартиям, Отказ, Заголовок)
	
	Если ВидОперации = Перечисления.ИНАГРО_ВидыОперацийАктРасчет310.ПредварительныйРасчет Тогда
		
		Если СписатьЗачетныйВес или КорректироватьЗачетныйВес Тогда
			СтруктураШапкиДокумента = ОбщегоНазначенияРед12.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
			СтруктураШапкиДокумента.Вставить("ЗачетныйВес",       0);
			СтруктураШапкиДокумента.Вставить("Количество",        0);
			СтруктураШапкиДокумента.Вставить("ФизическийВес",     0);
			СтруктураШапкиДокумента.Вставить("УбыльВесаПриСушке", 0);
			ИНАГРО_Элеватор.ДвиженияПоРегиструОстаткиРасход(Движения, СтруктураШапкиДокумента,истина);
		КонецЕсли;
		
		Если КорректироватьЗачетныйВес Тогда 
			СтруктураШапкиДокумента = ОбщегоНазначенияРед12.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
			СтруктураШапкиДокумента.Вставить("ЗачетныйВес",       0);
			СтруктураШапкиДокумента.Вставить("Количество",        0);
			СтруктураШапкиДокумента.Вставить("ФизическийВес",     0);
			СтруктураШапкиДокумента.Вставить("УбыльВесаПриСушке", 0);
			ИНАГРО_Элеватор.ДвиженияПоРегиструОстаткиПриход(Движения, СтруктураШапкиДокумента, КорректироватьЗачетныйВес);
		КонецЕсли;
		
		ТаблицаПоПартиям = ПодготовитьТаблицуПоПартиям();
		
		ПровестиПоРегиструДанныеПоКачествуПартийЗерна(ТаблицаПоПартиям);
		
		Если ВыставитьУслугиОчисткиСушки Тогда
			ПровестиПоРегиструДанныеПоРасчетуУслуг(ТаблицаПоПартиям);
		КонецЕсли;
		
		Возврат;
		
	Иначе
		
		ТаблицаПоПартиям = ПодготовитьТаблицуПоПартиямОР();
		
		ПровестиПоРегиструДанныеПоКачествуПартийЗернаОР(ТаблицаПоПартиям);
				
	КонецЕсли;
	
	ПровестиПоРегистрамЭлеватора(РежимПроведения, СтруктураШапкиДокумента, Отказ, Заголовок);

КонецПроцедуры 

Функция ПодготовитьТаблицуПоПартиям()
	
	резТаблица = Неопределено;
	
	СписокПартий = Новый СписокЗначений;
	
	Для Каждого СтрокаТабличнойЧасти Из ДвиженияДокумента Цикл
		
		Если    ТипЗнч(СтрокаТабличнойЧасти.Документ) = Тип("ДокументСсылка.ИНАГРО_РеестрТТНВвоз")
			ИЛИ ТипЗнч(СтрокаТабличнойЧасти.Документ) = Тип("ДокументСсылка.ИНАГРО_РеестрТТНВвозЖД") Тогда 
			СписокПартий.Добавить(СтрокаТабличнойЧасти.Документ);
		КонецЕсли;
		
	КонецЦикла;	
	
	Если СписокПартий.Количество() > 0 Тогда 
		
		Запрос = Новый Запрос; 		
				
		Запрос.Текст =
			"ВЫБРАТЬ
			|	ТаблицаРегистра.*
			|ИЗ
			|	РегистрСведений.ИНАГРО_ДанныеПоКачествуПартийЗерна.СрезПоследних(&МоментВремени, ПартияЗерна В (&СписокПартий)) КАК ТаблицаРегистра";
		
		Запрос.УстановитьПараметр("МоментВремени", МоментВремени());
		Запрос.УстановитьПараметр("СписокПартий",  СписокПартий);

		резТаблица = Запрос.Выполнить().Выгрузить();
		
		резТаблица.Колонки.Добавить("НатСкидкаВлажность");
		резТаблица.Колонки.Добавить("НатСкидкаСорнаяПримесь");
		резТаблица.Колонки.Добавить("КоличествоСушки");
		резТаблица.Колонки.Добавить("ЦенаСушки");
		резТаблица.Колонки.Добавить("СтоимостьСушки");
		резТаблица.Колонки.Добавить("КоличествоОчистки");
		резТаблица.Колонки.Добавить("ЦенаОчистки");
		резТаблица.Колонки.Добавить("СтоимостьОчистки");
		резТаблица.Колонки.Добавить("Стоимость");
		резТаблица.Колонки.Добавить("СтоимостьНДС");
		
		резТаблица.ЗаполнитьЗначения(0,                "НатСкидкаВлажность");
		резТаблица.ЗаполнитьЗначения(0,                "НатСкидкаСорнаяПримесь");
		резТаблица.ЗаполнитьЗначения(0,                "КоличествоСушки");
		резТаблица.ЗаполнитьЗначения(0,                "ЦенаСушки");
		резТаблица.ЗаполнитьЗначения(0,                "СтоимостьСушки");
		резТаблица.ЗаполнитьЗначения(0,                "КоличествоОчистки");
		резТаблица.ЗаполнитьЗначения(0,                "ЦенаОчистки");
		резТаблица.ЗаполнитьЗначения(0,                "СтоимостьОчистки");
		резТаблица.ЗаполнитьЗначения(0,                "Стоимость");
		резТаблица.ЗаполнитьЗначения(0,                "СтоимостьНДС");
		резТаблица.ЗаполнитьЗначения(Влажность8,       "ВлажностьИтоговая");
		резТаблица.ЗаполнитьЗначения(СорнаяПримесь8,   "СорнаяПримесьИтоговая");
		резТаблица.ЗаполнитьЗначения(ЗерноваяПримесь8, "ЗерноваяПримесьИтоговая");
		
		ОбщийВес = ФизическийВес8 + ФизическийВес4 - ФизическийВес7 - ФизическийВесВнутрРасход;
		
		Для Каждого СтрокаТаблицы Из резТаблица Цикл
			СтрокаТаблицы.ФизическийВесИтоговый = ОбщийВес * (СтрокаТаблицы.ФизическийВес / ФизическийВес3);
			РассчитатьУслугиПоСтроке(СтрокаТаблицы);
		КонецЦикла;	
		
	КонецЕсли;
	
	Возврат резТаблица;
	
КонецФункции	

Функция ПодготовитьТаблицуПоПартиямОР()
	
	резТаблица = Неопределено;
	
	СписокПартий = Новый СписокЗначений;
	
	Для Каждого СтрокаТабличнойЧасти Из ДвиженияДокумента Цикл
		
		Если    ТипЗнч(СтрокаТабличнойЧасти.Документ) = Тип("ДокументСсылка.ИНАГРО_РеестрТТНВвоз")
			ИЛИ ТипЗнч(СтрокаТабличнойЧасти.Документ) = Тип("ДокументСсылка.ИНАГРО_РеестрТТНВвозЖД") Тогда 
			СписокПартий.Добавить(СтрокаТабличнойЧасти.Документ);
		КонецЕсли;
		
	КонецЦикла;	
	
	Если СписокПартий.Количество() > 0 Тогда 
		
		Запрос = Новый Запрос;
				
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ТаблицаРегистра.*
			|ИЗ
			|	РегистрСведений.ИНАГРО_ДанныеПоКачествуПартийЗерна.СрезПоследних(&МоментВремени, ПартияЗерна В (&СписокПартий)) КАК ТаблицаРегистра";
		
		Запрос.УстановитьПараметр("МоментВремени", МоментВремени());
		Запрос.УстановитьПараметр("СписокПартий",  СписокПартий);

		резТаблица = Запрос.Выполнить().Выгрузить();
		
		резТаблица.Колонки.Добавить("НатСкидкаВлажность");
		резТаблица.Колонки.Добавить("НатСкидкаСорнаяПримесь");
		резТаблица.Колонки.Добавить("КоличествоСушки");
		резТаблица.Колонки.Добавить("ЦенаСушки");
		резТаблица.Колонки.Добавить("СтоимостьСушки");
		резТаблица.Колонки.Добавить("КоличествоОчистки");
		резТаблица.Колонки.Добавить("ЦенаОчистки");
		резТаблица.Колонки.Добавить("СтоимостьОчистки");
		резТаблица.Колонки.Добавить("Стоимость");
		резТаблица.Колонки.Добавить("СтоимостьНДС");
		
		резТаблица.ЗаполнитьЗначения(0, "НатСкидкаВлажность");
		резТаблица.ЗаполнитьЗначения(0, "НатСкидкаСорнаяПримесь");
		резТаблица.ЗаполнитьЗначения(0, "КоличествоСушки");
		резТаблица.ЗаполнитьЗначения(0, "ЦенаСушки");
		резТаблица.ЗаполнитьЗначения(0, "СтоимостьСушки");
		резТаблица.ЗаполнитьЗначения(0, "КоличествоОчистки");
		резТаблица.ЗаполнитьЗначения(0, "ЦенаОчистки");
		резТаблица.ЗаполнитьЗначения(0, "СтоимостьОчистки");
		резТаблица.ЗаполнитьЗначения(0, "Стоимость");
		резТаблица.ЗаполнитьЗначения(0, "СтоимостьНДС");
		
	КонецЕсли;
	
	Возврат резТаблица;
	
КонецФункции	

Процедура ПровестиПоРегиструДанныеПоКачествуПартийЗерна(ТаблицаПоПартиям)
	
	Если ТаблицаПоПартиям <> Неопределено Тогда
		Если ПараметрыУчетаЭлеватора <> Неопределено Тогда
			Если ПараметрыУчетаЭлеватора.ИспользоватьСистемуКонтроляКачестваПартийЗерна Тогда
				НаборДвижений = Движения.ИНАГРО_ДанныеПоКачествуПартийЗерна;
				ТаблицаДвижений                = НаборДвижений.Выгрузить();
				ОбщегоНазначенияБПВызовСервера.ЗагрузитьВТаблицуЗначений(ТаблицаПоПартиям, ТаблицаДвижений);
				НаборДвижений.мПериод          = Дата;
				НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;
				Движения.ИНАГРО_ДанныеПоКачествуПартийЗерна.ВыполнитьДвижения();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры	

Процедура ПровестиПоРегиструДанныеПоКачествуПартийЗернаОР(ТаблицаПоПартиям)
	
	Если ТаблицаПоПартиям <> Неопределено Тогда
		Если ПараметрыУчетаЭлеватора <> Неопределено Тогда
			Если ПараметрыУчетаЭлеватора.ИспользоватьСистемуКонтроляКачестваПартийЗерна Тогда
				НаборДвижений                  = Движения.ИНАГРО_ДанныеПоКачествуПартийЗерна;
				ТаблицаДвижений                = НаборДвижений.Выгрузить();
				ОбщегоНазначенияБПВызовСервера.ЗагрузитьВТаблицуЗначений(ТаблицаПоПартиям, ТаблицаДвижений);
				Для Каждого СтрокП Из ТаблицаДвижений Цикл
					СтрокП.Вывезено = СтрокП.ФизическийВесИтоговый;
				КонецЦикла;	
				НаборДвижений.мПериод          = Дата;
				НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;
				Движения.ИНАГРО_ДанныеПоКачествуПартийЗерна.ВыполнитьДвижения();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры	

Процедура ПровестиПоРегиструДанныеПоРасчетуУслуг(ТаблицаПоПартиям)
	
	Если НЕ ТаблицаПоПартиям = Неопределено Тогда
		Если Не ПараметрыУчетаЭлеватора = Неопределено Тогда
			Если ПараметрыУчетаЭлеватора.ВыставлятьУслугиОчисткиСушкиПоФактическимПоказателям Тогда
				ТаблицаПоУслугам = Новый ТаблицаЗначений;
				СформироватьТаблицуУслуг(ТаблицаПоУслугам, ТаблицаПоПартиям);
				Если ТаблицаПоУслугам.Количество() > 0 Тогда
					ИНАГРО_Элеватор.ДвиженияПоРегиструРасчетыПоУслугам(Движения, ТаблицаПоУслугам, "Приход");
				КонецЕсли;				
			КонецЕсли;			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры	

// Процедура выполняет движения по регистрам подсистемы Элеватор
//
Процедура ПровестиПоРегистрамЭлеватора(РежимПроведения, СтруктураШапкиДокумента, Отказ, Заголовок)
	
	// проводка по остаткам Форма37
	СписанаяУбыльВесаПриСушке = ДвиженияДокумента.Итог("УбыльВесаПриСушке");
	Начисления                = ПовышениеПоВлажности + ПовышениеПоСорнойПримеси;	
	Убыль                     = УбыльПоВлажности + УбыльПоСорнойПримеси + УбыльПоПрочей + УбыльПоЕстественной - Начисления;
	
	Если НеСписыватьНеиспользованноеПраво И ФизическийВес8 < 0 Тогда
		Убыль = Убыль + ФизическийВес8;
	КонецЕсли;
	
	СтруктураШапкиДокумента.Вставить("ЗачетныйВес",        0);
	СтруктураШапкиДокумента.Вставить("Количество",         0);
	СписыватьУсушкуПоСкладскомуУчету = ИНАГРО_Элеватор.ПолучитьПараметрУчетаЭлеватора(Дата, "СписыватьУсушкуПоСкладскомуУчету", Ложь);
	Если СписыватьУсушкуПоСкладскомуУчету Тогда				
		СтруктураШапкиДокумента.Вставить("ФизическийВес", Убыль - СписанаяУбыльВесаПриСушке - Начисления);
	Иначе
		СтруктураШапкиДокумента.Вставить("ФизическийВес", Убыль);
	КонецЕсли;
	СтруктураШапкиДокумента.Вставить("УбыльВесаПриСушке", СписанаяУбыльВесаПриСушке);	
	ИНАГРО_Элеватор.ДвиженияПоРегиструОстаткиРасход(Движения, СтруктураШапкиДокумента, Истина);
	
	СтруктураШапкиДокумента.Вставить("ЗачетныйВес",         ОстатокПоПеревзвешиванию);
	СтруктураШапкиДокумента.Вставить("Количество",          0);
	СтруктураШапкиДокумента.Вставить("ФизическийВес",       0);
	СтруктураШапкиДокумента.Вставить("УбыльВесаПриСушке",   0);
	СтруктураШапкиДокумента.Вставить("УбыльВесаПоЗачистке", Убыль);
	ИНАГРО_Элеватор.ДвиженияПоРегиструОстаткиПриход(Движения, СтруктураШапкиДокумента);
	
	// убыль
	СтруктураШапкиДокумента.Вставить("ФизическийВес",       Убыль);
	СтруктураШапкиДокумента.УбыльВесаПриСушке  = 0;
	СтруктураШапкиДокумента.Вставить("Влажность",           0);
	СтруктураШапкиДокумента.Вставить("СорнаяПримесь",       0);
	СтруктураШапкиДокумента.Вставить("ЗерноваяПримесь",     0);
	ИНАГРО_Элеватор.ДвиженияПоРегиструФорма36Расход(Движения, СтруктураШапкиДокумента);
    СтруктураШапкиДокумента.Вставить("НомерАнализа",        НомерАнализа);
	
	// усушка
	СтруктураШапкиДокумента.ФизическийВес     = 0;
	СтруктураШапкиДокумента.Вставить("УбыльВесаПриСушке",   СписанаяУбыльВесаПриСушке);
	ИНАГРО_Элеватор.ДвиженияПоРегиструФорма36Расход(Движения, СтруктураШапкиДокумента, "Расход");
	
	// в приходные ресурсы
	СтруктураШапкиДокумента.УбыльВесаПриСушке = 0;
	СтруктураШапкиДокумента.ФизическийВес     = ФизическийВес3;
	СтруктураШапкиДокумента.Влажность         = Влажность3;
	СтруктураШапкиДокумента.СорнаяПримесь     = СорнаяПримесь3;
	СтруктураШапкиДокумента.ЗерноваяПримесь   = ЗерноваяПримесь3;
	ИНАГРО_Элеватор.ДвиженияПоРегиструФорма36Приход(Движения, СтруктураШапкиДокумента, "Расход", 1);
	
	// в расходные ресурсы
	СтруктураШапкиДокумента.УбыльВесаПриСушке = 0;
	СтруктураШапкиДокумента.ФизическийВес     = ФизическийВес4;
	СтруктураШапкиДокумента.Влажность         = Влажность4;
	СтруктураШапкиДокумента.СорнаяПримесь     = СорнаяПримесь4;
	СтруктураШапкиДокумента.ЗерноваяПримесь   = ЗерноваяПримесь4;
	ИНАГРО_Элеватор.ДвиженияПоРегиструФорма36Расход(Движения, СтруктураШапкиДокумента, "Расход", 1);
	
	СтруктураШапкиДокумента.ФизическийВес     = Убыль;
	СтруктураШапкиДокумента.Влажность         = 0;
	СтруктураШапкиДокумента.СорнаяПримесь     = 0;
	СтруктураШапкиДокумента.ЗерноваяПримесь   = 0;
	ИНАГРО_Элеватор.ДвиженияПоРегиструФорма36Расход(Движения, СтруктураШапкиДокумента, "Расход");
	
	// оприходуем остаток
	Если ФизическийВес8 > 0 Тогда 
		СтруктураШапкиДокумента.УбыльВесаПриСушке = 0;
		СтруктураШапкиДокумента.ФизическийВес     = ФизическийВес8;
		СтруктураШапкиДокумента.Влажность         = Влажность8;
		СтруктураШапкиДокумента.СорнаяПримесь     = СорнаяПримесь8;
		СтруктураШапкиДокумента.ЗерноваяПримесь   = ЗерноваяПримесь8;
		ИНАГРО_Элеватор.ДвиженияПоРегиструФорма36Приход(Движения, СтруктураШапкиДокумента);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ОбновитьПараметрыУчетаЭлеватора()

	ПараметрыУчетаЭлеватора = ИНАГРО_Элеватор.ПолучитьПараметрыУчетаЭлеватора(Дата);
			
КонецПроцедуры

Процедура ЗаполнитьПоДокументуОснованию(Основание)
		
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ИНАГРО_ПриказНаВывоз") Тогда
		ВидОперации        = Перечисления.ИНАГРО_ВидыОперацийАктРасчет310.ПредварительныйРасчет;
		Организация        = Основание.Организация;
		Владелец           = Основание.Владелец;
		ДоговорКонтрагента = Основание.ДоговорКонтрагента;
		Склад              = Основание.Склад;
		ВидХранения        = Основание.ВидХранения;
		Урожай             = Основание.Урожай;
	КонецЕсли;
			
КонецПроцедуры

Процедура РассчитатьУслугиПоСтроке(СтрокаТаблицы)
	
	ВидКультурыДляРасчетаСтоимостиУслуги = ИНАГРО_Элеватор.ПолучитьДополнительныйРеквизитНоменклатуры(СтрокаТаблицы.Номенклатура, "ВидКультуры").ВидКультурыДляРасчетаСтоимостиУслуги;
	
	ИНАГРО_Элеватор.РасчетНатуральныхСкидок(ЭтотОбъект, , СтрокаТаблицы);
	
	Если ПроводилиСушку И НЕ СтрокаТаблицы.ВыставленыУслугиСушки И СтрокаТаблицы.Сушить Тогда
		
		СтрокаТаблицы.КоличествоСушки = СтрокаТаблицы.НатСкидкаВлажность * СтрокаТаблицы.ФизическийВес / 1000;
		
		Если (СтрокаТаблицы.ЦенаСушки = 0) И (СтрокаТаблицы.КоличествоСушки <> 0) Тогда
			СтрокаТаблицы.ЦенаСушки = ИНАГРО_Элеватор.ПолучитьЦенуУслугиЭлеватора(Организация,
			                                                                      Дата,
																				  СтрокаТаблицы.Контрагент,
																				  СтрокаТаблицы.ДоговорКонтрагента,
																				  ВидКультурыДляРасчетаСтоимостиУслуги,
																				  ?(ЗначениеЗаполнено(Урожай), Урожай, СтрокаТаблицы.ПартияЗерна.Урожай),
																				  ИНАГРО_Элеватор.ПолучитьПредопределеннуюНоменклатуру("Сушка"));
		КонецЕсли;	
		
		СтрокаТаблицы.СтоимостьСушки = СтрокаТаблицы.КоличествоСушки * СтрокаТаблицы.ЦенаСушки;
		
		Если СтрокаТаблицы.СтоимостьСушки <> 0 Тогда 
			СтрокаТаблицы.ВыставленыУслугиСушки      = Истина;
			СтрокаТаблицы.ВлажностьВыставленныхУслуг = СтрокаТаблицы.ВлажностьИтоговая;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПроводилиОчистку И НЕ СтрокаТаблицы.ВыставленыУслугиОчистки И СтрокаТаблицы.Чистить Тогда
		
		СтрокаТаблицы.КоличествоОчистки = СтрокаТаблицы.НатСкидкаСорнаяПримесь * СтрокаТаблицы.ФизическийВес / 1000;
		
		Если (СтрокаТаблицы.ЦенаОчистки = 0) И (СтрокаТаблицы.КоличествоОчистки <> 0) Тогда
			СтрокаТаблицы.ЦенаОчистки = ИНАГРО_Элеватор.ПолучитьЦенуУслугиЭлеватора(Организация,
			                                                                        Дата,СтрокаТаблицы.Контрагент,
																					СтрокаТаблицы.ДоговорКонтрагента,
																					ВидКультурыДляРасчетаСтоимостиУслуги,
																					?(ЗначениеЗаполнено(Урожай), Урожай, СтрокаТаблицы.ПартияЗерна.Урожай),
																					ИНАГРО_Элеватор.ПолучитьПредопределеннуюНоменклатуру("Очистка"));
		КонецЕсли;
		
		СтрокаТаблицы.СтоимостьОчистки = СтрокаТаблицы.КоличествоОчистки * СтрокаТаблицы.ЦенаОчистки;
		
		Если СтрокаТаблицы.СтоимостьОчистки <> 0 Тогда 
			СтрокаТаблицы.ВыставленыУслугиОчистки          = Истина;
			СтрокаТаблицы.СорнаяПримесьВыставленныхУслуг   = СтрокаТаблицы.СорнаяПримесьИтоговая;
			СтрокаТаблицы.ЗерноваяПримесьВыставленныхУслуг = СтрокаТаблицы.ЗерноваяПримесьИтоговая;
		КонецЕсли;
		
	КонецЕсли;
	
	СтрокаТаблицы.Стоимость    = СтрокаТаблицы.СтоимостьОчистки + СтрокаТаблицы.СтоимостьСушки;
	СтрокаТаблицы.СтоимостьНДС = УчетНДСКлиентСервер.РассчитатьСуммуНДС(СтрокаТаблицы.Стоимость, Истина, 20);
	
КонецПроцедуры

Процедура СформироватьТаблицуУслуг(ТаблицаПоУслугам, ТаблицаПоПартиям)
	
	ТаблицаПоУслугам.Колонки.Добавить("ДатаРасчета");
	ТаблицаПоУслугам.Колонки.Добавить("Ссылка"); 
	ТаблицаПоУслугам.Колонки.Добавить("Организация");
	ТаблицаПоУслугам.Колонки.Добавить("Контрагент");
	ТаблицаПоУслугам.Колонки.Добавить("ДоговорКонтрагента");
	ТаблицаПоУслугам.Колонки.Добавить("Номенклатура");
	ТаблицаПоУслугам.Колонки.Добавить("Культура");
	ТаблицаПоУслугам.Колонки.Добавить("Склад");
	ТаблицаПоУслугам.Колонки.Добавить("ВидХранения");
	ТаблицаПоУслугам.Колонки.Добавить("Урожай");
	ТаблицаПоУслугам.Колонки.Добавить("Количество");
	ТаблицаПоУслугам.Колонки.Добавить("Стоимость");
	ТаблицаПоУслугам.Колонки.Добавить("ДокументРасчета");
	
	Номенклатура_Сушка   = ИНАГРО_Элеватор.ПолучитьПредопределеннуюНоменклатуру("Сушка");
	Номенклатура_Очистка = ИНАГРО_Элеватор.ПолучитьПредопределеннуюНоменклатуру("Очистка");
	
	Для Каждого СтрокаТаблицы Из ТаблицаПоПартиям Цикл
		
		Если СтрокаТаблицы.ЦенаСушки <> 0 И СтрокаТаблицы.КоличествоСушки <> 0 Тогда 	
			
			НоваяСтрока = ТаблицаПоУслугам.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
			НоваяСтрока.Контрагент   = СтрокаТаблицы.Контрагент; 
			НоваяСтрока.Склад        = ?(ЗначениеЗаполнено(Склад), Склад, СтрокаТаблицы.ПартияЗерна.Склад);
			НоваяСтрока.Урожай       = ?(ЗначениеЗаполнено(Урожай), Урожай, СтрокаТаблицы.ПартияЗерна.Урожай);
			НоваяСтрока.Культура     = СтрокаТаблицы.Номенклатура;
			НоваяСтрока.Номенклатура = Номенклатура_Сушка;
			НоваяСтрока.Количество   = СтрокаТаблицы.КоличествоСушки;
			НоваяСтрока.Стоимость    = СтрокаТаблицы.СтоимостьСушки;
			
		КонецЕсли;
		
		Если СтрокаТаблицы.ЦенаОчистки <> 0 И СтрокаТаблицы.КоличествоОчистки <> 0 Тогда 
			
			НоваяСтрока = ТаблицаПоУслугам.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
			НоваяСтрока.Контрагент   = СтрокаТаблицы.Контрагент;
			НоваяСтрока.Склад        = ?(ЗначениеЗаполнено(Склад), Склад, СтрокаТаблицы.ПартияЗерна.Склад);
			НоваяСтрока.Урожай       = ?(ЗначениеЗаполнено(Урожай), Урожай, СтрокаТаблицы.ПартияЗерна.Урожай);
			НоваяСтрока.Культура     = СтрокаТаблицы.Номенклатура;
			НоваяСтрока.Номенклатура = Номенклатура_Очистка;
			НоваяСтрока.Количество   = СтрокаТаблицы.КоличествоОчистки;
			НоваяСтрока.Стоимость    = СтрокаТаблицы.СтоимостьОчистки;
			
		КонецЕсли;
		
	КонецЦикла;	
	
	ТаблицаПоУслугам.ЗаполнитьЗначения(Дата,        "ДатаРасчета");
	ТаблицаПоУслугам.ЗаполнитьЗначения(Ссылка,      "Ссылка"); 
	ТаблицаПоУслугам.ЗаполнитьЗначения(Организация, "Организация");
	ТаблицаПоУслугам.ЗаполнитьЗначения(Ссылка,      "ДокументРасчета");
	
	ТаблицаПоУслугам.Свернуть("ДатаРасчета, Ссылка, Организация, Контрагент, ДоговорКонтрагента, Номенклатура, Культура, Склад, ВидХранения, Урожай, ДокументРасчета", "Количество, Стоимость");
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли