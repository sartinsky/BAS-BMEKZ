#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
			
	Если Параметры.Ключ.Пустая() Тогда
		ПодготовитьФормуНаСервере();		
	КонецЕсли;
	
	// Уведомим о появлении функционала рабочей даты
	ЭтаФорма.НастройкиПредупреждений = ОбщегоНазначенияБП.НастройкиПредупрежденийОбИзменениях("РабочаяДатаИзДокумента");
	 
	// Показываем, если это новый документ и сама рабочая дата еще не установлена.
	ЭтаФорма.НастройкиПредупреждений.РабочаяДатаИзДокумента = ЭтаФорма.НастройкиПредупреждений.РабочаяДатаИзДокумента
	 	И ЭтаФорма.Параметры.Ключ.Пустая()
	  	И НЕ ЗначениеЗаполнено(БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("РабочаяДата"));	  
		
	УстановитьПараметрыВыбораВидОперации();
	
	// Если форма вызвана в режиме смена вида операции - модифицируем сразу при открытии, 
	// чтобы можно было подтвердить или отказаться от изменения путем сохранения или 
	// отказа от сохранения документа.
	Если Параметры.Свойство("ИзменитьВидОперации")
		И Параметры.ИзменитьВидОперации Тогда
		
		// Не кэшируем переменную Объект, т.к. может вызываться Форма.ИзменитьРеквизиты(),
		// которая меняет Объект.
		Объект.ВидОперации = Параметры.ЗначенияЗаполнения.ВидОперации;
		
		УстановитьЗаголовокФормы();		
		УправлениеФормой(ЭтаФорма);
		
		Модифицированность = Истина;
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если  ТипЗнч(Параметр) = Тип("Структура") 
		И Параметр.Свойство("ИдентификаторВызывающейФормы")
		И Параметр.ИдентификаторВызывающейФормы = УникальныйИдентификатор Тогда
		Если ИмяСобытия = "СозданЛабораторныйАнализ" ИЛИ ИмяСобытия = "ИзмененЛабораторныйАнализ" Тогда
			Если ИНАГРО_Элеватор.ЛабораторныйАнализПроверкаЗаполнения(Параметр.ДокументСсылка, ПолучитьПараметрыДляПроверкиЗаполнения()) Тогда
				Объект.ЛабораторныйАнализ = Параметр.ДокументСсылка;
				ЛабораторныйАнализПриИзмененииНаСервере();
				Модифицированность = Истина;
			КонецЕсли;
		КонецЕсли;
	Иначе
		ОбщегоНазначенияБПКлиент.ОбработкаОповещенияФормыДокумента(ЭтаФорма, Объект.Ссылка, ИмяСобытия, Параметр, Источник);
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	ПодготовитьФормуНаСервере();

КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
		
	УстановитьЗаголовокФормы();	
		
	УстановитьСостояниеДокумента();
	
КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)

	Если НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДатаДокумента) Тогда
		// Изменение времени не влияет на поведение документа.
		ТекущаяДатаДокумента = Объект.Дата;
		Возврат;
	КонецЕсли;
	
	// Общие проверки условий по датам.
	ТребуетсяВызовСервера = ИНАГРО_ЭлеваторКлиент.ТребуетсяВызовСервераПриИзмененииДатыДокумента(Объект.Дата, ТекущаяДатаДокумента);

	// Если определили, что изменение даты может повлиять на какие-либо параметры, 
	// то передаем обработку на сервер.
	Если ТребуетсяВызовСервера Тогда
		ДатаПриИзмененииНаСервере();
	КонецЕсли;
		
	// Запомним новую дату документа.
	ТекущаяДатаДокумента = Объект.Дата;

КонецПроцедуры

&НаСервере
Процедура ДатаПриИзмененииНаСервере()
	
	УстановитьФункциональныеОпцииФормы();
	
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ВидОперацииПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.ВидОперации) Тогда
		
		Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ИНАГРО_ВидыОперацийАктРасчет310.РасчетПоФакту") Тогда 			
			ОчиститьПрогнозПобочногоПродуктаИОтходов();			
			Объект.СписатьЗачетныйВес = Ложь;			
		КонецЕсли;

		ВидОперацииПриИзмененииНаСервере();
		
	КонецЕсли; 	
		
КонецПроцедуры

&НаСервере
Процедура ВидОперацииПриИзмененииНаСервере()
	
	УстановитьЗаголовокФормы();
	
	УправлениеФормой(ЭтаФорма);		
	
КонецПроцедуры

&НаКлиенте
Процедура ОтражатьВБухгалтерскомУчетеПриИзменении(Элемент)
	
	УправлениеФормой(ЭтаФорма); 
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)

	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		УстановитьОтражатьВБухгалтерскомУчете();
		ОрганизацияПриИзмененииНаСервере();
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()

	УстановитьФункциональныеОпцииФормы();	

	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ВладелецПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.Владелец) Тогда
		
		Объект.ОтражатьПоЗатратам = ИНАГРО_Элеватор.ОпределитьПринадлежностьКонтрагента(Объект.Владелец);

		ПараметрыОтбораДоговора = ПолучитьПараметрыДляДоговоров();
		
		ИНАГРО_ЭлеваторЗаполнениеДокументов.ПриИзмененииЗначенияКонтрагента(Объект.Дата, Объект.Организация, Объект.Владелец, Объект.ДоговорКонтрагента, ПараметрыОтбораДоговора);
		
		УстановитьОтражатьВБухгалтерскомУчете();

		ВладелецПриИзмененииНаСервере();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВладелецПриИзмененииНаСервере()
	
	УстановитьФункциональныеОпцииФормы();
	
	УправлениеФормой(ЭтаФорма); 	

	ПолучитьОстатки();

КонецПроцедуры

&НаКлиенте
Процедура СкладПриИзменении(Элемент)

	Если ЗначениеЗаполнено(Объект.Склад) Тогда
		ПолучитьОстатки();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВидХраненияПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.ВидХранения) Тогда
		
		ПараметрыОтбораДоговора = ПолучитьПараметрыДляДоговоров();
		
		ИНАГРО_ЭлеваторЗаполнениеДокументов.ПриИзмененииЗначенияКонтрагента(Объект.Дата, Объект.Организация, Объект.Владелец, Объект.ДоговорКонтрагента, ПараметрыОтбораДоговора);
		
		ПолучитьОстатки();

	КонецЕсли; 	
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорКонтрагентаПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		ДоговорКонтрагентаПриИзмененииНаСервере();
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ДоговорКонтрагентаПриИзмененииНаСервере()
	
	Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента.ВидВзаиморасчетов) Тогда
		НайденВидХранения = Справочники.ИНАГРО_ВидыХранения.НайтиПоРеквизиту("ТипДоговора", Объект.ДоговорКонтрагента.ВидВзаиморасчетов); 
		Если НайденВидХранения <> Неопределено Тогда
			Объект.ВидХранения = НайденВидХранения.Ссылка;
		КонецЕсли;	
	КонецЕсли;
	
	ПолучитьОстатки();
	
КонецПроцедуры

&НаКлиенте
Процедура НоменклатураПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.Номенклатура) Тогда				
		ПолучитьОстатки();
	КонецЕсли;	

КонецПроцедуры

&НаКлиенте
Процедура УрожайПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.Урожай) Тогда				
		
		ПараметрыОтбораДоговора = ПолучитьПараметрыДляДоговоров();
		
		ИНАГРО_ЭлеваторЗаполнениеДокументов.ПриИзмененииЗначенияКонтрагента(Объект.Дата, Объект.Организация, Объект.Владелец, Объект.ДоговорКонтрагента, ПараметрыОтбораДоговора);
		
		ПолучитьОстатки();

	КонецЕсли;	

КонецПроцедуры

&НаКлиенте
Процедура ЛабораторныйАнализПриИзменении(Элемент)
		
	ЛабораторныйАнализПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ЛабораторныйАнализПриИзмененииНаСервере()
	
	ЛабораторныйАнализ = Объект.ЛабораторныйАнализ;

	Объект.НомерАнализа     = ИНАГРО_Элеватор.ПолучитьНомерЛабАнализаИзЛабАнализа(ЛабораторныйАнализ);	
	Объект.Влажность8       = ЛабораторныйАнализ.Влажность;
	Объект.СорнаяПримесь8   = ЛабораторныйАнализ.СорнаяПримесь;
	Объект.ЗерноваяПримесь8 = ЛабораторныйАнализ.ЗерноваяПримесь;	
	
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ЛабораторныйАнализНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыОтбора = Новый Структура;
	
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		ПараметрыОтбора.Вставить("Организация",        Объект.Организация);		
	КонецЕсли;	
	Если ЗначениеЗаполнено(Объект.Владелец) Тогда
		ПараметрыОтбора.Вставить("Владелец",           Объект.Владелец);
	КонецЕсли;	
	Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		ПараметрыОтбора.Вставить("ДоговорКонтрагента", Объект.ДоговорКонтрагента);		
	КонецЕсли;	
	Если ЗначениеЗаполнено(Объект.Склад) Тогда
		ПараметрыОтбора.Вставить("Склад",              Объект.Склад);
	КонецЕсли;	
	Если ЗначениеЗаполнено(Объект.ВидХранения) Тогда
		ПараметрыОтбора.Вставить("ВидХранения",        Объект.ВидХранения);
	КонецЕсли;	
	Если ЗначениеЗаполнено(Объект.Номенклатура) Тогда
		ПараметрыОтбора.Вставить("Номенклатура",       Объект.Номенклатура);
	КонецЕсли;	
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Отбор",  ПараметрыОтбора);
	ПараметрыФормы.Вставить("Ссылка", Объект.Ссылка);
	
	ОткрытьФорму("Документ.ИНАГРО_ЛабораторныйАнализ.Форма.ФормаВыбора", ПараметрыФормы, Элемент, УникальныйИдентификатор, , , , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры

&НаКлиенте
Процедура СписатьЗачетныйВесПриИзменении(Элемент)
	
	Если Объект.СписатьЗачетныйВес Тогда
		Объект.КорректироватьЗачетныйВес = Ложь;
		Элементы.КорректироватьЗачетныйВес.Доступность = Ложь;
	Иначе
		Объект.КорректироватьЗачетныйВес = Ложь;
		Элементы.КорректироватьЗачетныйВес.Доступность = истина;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура КорректироватьЗачетныйВесПриИзменении(Элемент)
	
	Если Объект.КорректироватьЗачетныйВес Тогда
		Объект.СписатьЗачетныйВес = Ложь;
		Элементы.СписатьЗачетныйВес.Доступность = Ложь;
	Иначе
		Объект.СписатьЗачетныйВес = Ложь;
		Элементы.СписатьЗачетныйВес.Доступность = Истина;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СпособРасчетаПредварительногоАктаРасчетаПриИзменении(Элемент)
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура СпособРасчетаПобочногоПродуктаПриИзменении(Элемент)
	
	Если Объект.СпособРасчетаПобочногоПродукта      = 2 Тогда
		// ПрогнозируемыПроцентПобочногоПродукта = 0;
	ИначеЕсли Объект.СпособРасчетаПобочногоПродукта = 3 Тогда
		Объект.ПрогнозируемыйВесПобочныхПродуктов	        = 0;
	Иначе
		// ПрогнозируемыПроцентПобочногоПродукта = 0;
		Объект.ПрогнозируемыйВесПобочныхПродуктов           = 0;
		Объект.ПрогнозируемаяВлажностьПобочныхПродуктов     = 0;
		Объект.ПрогнозируемаяСорнаяПримесьПобочныхПродуктов = 0;
	КонецЕсли;

	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура СпособРасчетаОтходов3КатегорииПриИзменении(Элемент)
	
	Если Объект.СпособРасчетаОтходов3Категории      = 2 Тогда
		Объект.ПрогнозируемыйПроцентОтходов3Категории       = 0;
	ИначеЕсли Объект.СпособРасчетаОтходов3Категории = 3 Тогда
		Объект.ПрогнозируемыйВесОтходов3Категории	        = 0;
	ИначеЕсли Объект.СпособРасчетаОтходов3Категории = 1 Тогда
		Объект.ПрогнозируемыйПроцентОтходов3Категории       = 0;
		Объект.ПрогнозируемыйВесОтходов3Категории           = 0;
		Объект.ПрогнозируемаяВлажностьОтходов3Категории     = 0;
		Объект.ПрогнозируемаяСорнаяПримесьОтходов3Категории = 0;
	КонецЕсли;
	
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

#Область ОбработчикиСобытийПанелиОтклонения

&НаКлиенте
Процедура УбыльВлажностиПриИзменении(Элемент)
	
	Объект.УбыльПоВлажности = Объект.ФизическийВес3 * Объект.УбыльВлажности / 100;
	
	УбыльВсего();

КонецПроцедуры

&НаКлиенте
Процедура УбыльСорнойПримесиПриИзменении(Элемент)
	
	Объект.УбыльПоСорнойПримеси = Объект.ФизическийВес3 * Объект.УбыльСорнойПримеси / 100;
	
	УбыльВсего();

КонецПроцедуры

&НаКлиенте
Процедура УбыльПрочаяПриИзменении(Элемент)
	
	УбыльПрочаяПриИзмененииНаСервере();

КонецПроцедуры

&НаСервере
Процедура УбыльПрочаяПриИзмененииНаСервере()
	
	Объект.УбыльПоПрочей = Объект.ФизическийВес3 * Объект.УбыльПрочая / 100;
	
	УбыльВсего();

КонецПроцедуры

&НаКлиенте
Процедура УбыльЕстественнаяПриИзменении(Элемент)
	
	УбыльЕстественнаяПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура УбыльЕстественнаяПриИзмененииНаСервере()
		
	Если Объект.ВидОперации = Перечисления.ИНАГРО_ВидыОперацийАктРасчет310.ПредварительныйРасчет Тогда 
		ВесРасхода = Объект.ФизическийВес4
		           + Объект.ФизическийВес8
				   + Объект.ПрогнозируемыйВесПобочныхПродуктов
				   + Объект.ПрогнозируемыйВесОтходов1Категории
				   + Объект.ПрогнозируемыйВесОтходов2Категории
				   + Объект.ПрогнозируемыйВесОтходов3Категории;
	Иначе		
		ВесРасхода = Объект.ФизическийВес4;
	КонецЕсли;	
		
	Объект.УбыльПоЕстественной = ?(Объект.НеРассчитыватьУбыльПриХранении, 0, ВесРасхода * Объект.УбыльЕстественная / 100);
	
	УбыльВсего();

КонецПроцедуры

&НаКлиенте
Процедура УбыльПоВлажностиПриИзменении(Элемент)
	
	Объект.УбыльВлажности = ?(Объект.ФизическийВес3 = 0, 0, Объект.УбыльПоВлажности * 100 / Объект.ФизическийВес3);
	
	УбыльВсего();

КонецПроцедуры

&НаКлиенте
Процедура УбыльПоСорнойПримесиПриИзменении(Элемент)
	
	Объект.УбыльСорнойПримеси = ?(Объект.ФизическийВес3 = 0, 0, Объект.УбыльПоСорнойПримеси * 100 / Объект.ФизическийВес3);
	
	УбыльВсего();

КонецПроцедуры

&НаКлиенте
Процедура УбыльПоПрочейПриИзменении(Элемент)
	
	Объект.УбыльПрочая = ?(Объект.ФизическийВес3 = 0, 0, Объект.УбыльПоПрочей * 100 / Объект.ФизическийВес3);
	
	УбыльВсего();

КонецПроцедуры

&НаКлиенте
Процедура УбыльПоЕстественнойПриИзменении(Элемент)
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ИНАГРО_ВидыОперацийАктРасчет310.ПредварительныйРасчет") Тогда
		ВесРасхода = Объект.ФизическийВес11
		                  + Объект.ФизическийВес8
						  + Объект.ПрогнозируемыйВесПобочныхПродуктов
						  + Объект.ПрогнозируемыйВесОтходов1Категории
						  + Объект.ПрогнозируемыйВесОтходов2Категории
						  + Объект.ПрогнозируемыйВесОтходов3Категории;
	Иначе		
		ВесРасхода = Объект.ФизическийВес11;
	КонецЕсли;	
	
	Объект.УбыльЕстественная = ?(ВесРасхода = 0, 0, Объект.УбыльПоЕстественной * 100 / ВесРасхода);
	
	УбыльВсего();

КонецПроцедуры

&НаКлиенте
Процедура ПовышениеВлажностиПриИзменении(Элемент)
	
	Объект.ПовышениеПоВлажности = Объект.ФизическийВес3 * Объект.ПовышениеВлажности / 100;
	
	ПовышениеВсего();

КонецПроцедуры

&НаКлиенте
Процедура ПовышениеСорнойПримесиПриИзменении(Элемент)
	
	Объект.ПовышениеПоСорнойПримеси = Объект.ФизическийВес3 * Объект.ПовышениеСорнойПримеси / 100;
	
	ПовышениеВсего();
	
КонецПроцедуры

&НаКлиенте
Процедура ПовышениеПоВлажностиПриИзменении(Элемент)
	
	ПовышениеВсего();

КонецПроцедуры

&НаКлиенте
Процедура ПовышениеПоСорнойПримесиПриИзменении(Элемент)
	
	ПовышениеВсего();

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийПанелиУчетЗатрат

&НаКлиенте
Процедура СчетЗатратПриИзменении(Элемент)
	
	УстановитьЗаголовкиИДоступностьСубконто(ЭтаФорма, Объект.СчетЗатрат, Истина, "");
	
	ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3",
		"Субконто1", "Субконто2", "Субконто3");
	
	БухгалтерскийУчетКлиентСервер.ПриИзмененииСчета(Объект.СчетЗатрат, Объект, ПоляОбъекта);
	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "", "СчетЗатрат");	
				
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура СчетЗатратОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = БухгалтерскийУчетКлиент.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение);

КонецПроцедуры

&НаКлиенте
Процедура СубконтоПриИзменении(Элемент)

	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "", "СчетЗатрат");
	
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура СубконтоНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	СписокПараметров = СписокПараметровВыбораСубконто(ЭтаФорма, Объект, "Субконто%Индекс%", "СчетЗатрат");
	ОбщегоНазначенияБПКлиент.НачалоВыбораЗначенияСубконто(ЭтаФорма, Элемент, СтандартнаяОбработка, СписокПараметров);

КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ОписаниеДвиженияФормы36НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(
		Элемент.ТекстРедактирования,
		ЭтотОбъект,
		"Объект.ОписаниеДвиженияФормы36",
		НСтр("ru='Описание движения формы 36';uk='Опис руху форми 36'"));

КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(
		Элемент.ТекстРедактирования,
		ЭтотОбъект,
		"Объект.Комментарий");

КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПодобратьПериодРасчетаДокумента(Команда)
	
	ПодобратьПериодРасчетаДокументаНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПодобратьПериодРасчетаДокументаНаСервере()
	
	Запрос = Новый Запрос;
	
	Если ЗначениеЗаполнено(Объект.Урожай.ДатаНачала) Тогда
		ДатаНачалаЗаготовки = Объект.Урожай.ДатаНачала;
	Иначе
		ДатаНачалаЗаготовки = '00010101';
	КонецЕсли;	
		
	Фильтр = "";
	Фильтр = Фильтр + ?(ЗначениеЗаполнено(Объект.Организация),        " Организация = &Организация ","");
	Фильтр = Фильтр + ?(ЗначениеЗаполнено(Объект.Склад),              " И Склад = &Склад ","");
	Фильтр = Фильтр + ?(ЗначениеЗаполнено(Объект.Урожай),             " И Урожай = &Урожай ","");
	Если НЕ НеВестиУчетПоВидуХраненияВККУ Тогда
		Фильтр = Фильтр + ?(ЗначениеЗаполнено(Объект.ВидХранения), " И ВидХранения = &ВидХранения ","");
	КонецЕсли;
	Фильтр = Фильтр + ?(ЗначениеЗаполнено(Объект.Номенклатура),       " И Номенклатура = &Номенклатура ","");
	Фильтр = Фильтр + ?(ЗначениеЗаполнено(Объект.Владелец),           " И Владелец = &Владелец ","");
	Фильтр = Фильтр + ?(ЗначениеЗаполнено(Объект.ДоговорКонтрагента), " И Договор = &Договор ","");
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ИНАГРО_Форма36Обороты.Регистратор,
		|	ИНАГРО_Форма36Обороты.Регистратор.Дата КАК РегистраторДата,
		|	СУММА(ЕСТЬNULL(ИНАГРО_Форма36Обороты.ВесПриходОборот, 0)) КАК ВесПриходОборот,
		|	СУММА(ЕСТЬNULL(ИНАГРО_Форма36Обороты.ВесРасходОборот, 0)) КАК ВесРасходОборот,
		|	ИНАГРО_Форма36Обороты.Организация,
		|	ИНАГРО_Форма36Обороты.Номенклатура,
		|	ИНАГРО_Форма36Обороты.Владелец,
		|	ИНАГРО_Форма36Обороты.Договор,
		|	ИНАГРО_Форма36Обороты.Склад,
		|	ИНАГРО_Форма36Обороты.Урожай,
		|	ИНАГРО_Форма36Обороты.ВидХранения
		|ИЗ
		|	РегистрНакопления.ИНАГРО_Форма36.Обороты(&ДатаНачалаЗаготовки, &ДатаДок, Регистратор, " + Фильтр + ") КАК ИНАГРО_Форма36Обороты
		|
		|СГРУППИРОВАТЬ ПО
		|	ИНАГРО_Форма36Обороты.Регистратор,
		|	ИНАГРО_Форма36Обороты.Регистратор.Дата,
		|	ИНАГРО_Форма36Обороты.Организация,
		|	ИНАГРО_Форма36Обороты.Номенклатура,
		|	ИНАГРО_Форма36Обороты.Владелец,
		|	ИНАГРО_Форма36Обороты.Договор,
		|	ИНАГРО_Форма36Обороты.Склад,
		|	ИНАГРО_Форма36Обороты.Урожай,
		|	ИНАГРО_Форма36Обороты.ВидХранения
		|
		|УПОРЯДОЧИТЬ ПО
		|	РегистраторДата";
	
	Запрос.УстановитьПараметр("ДатаНачалаЗаготовки", Новый Граница(НачалоДня(ДатаНачалаЗаготовки), ВидГраницы.Включая));
	Запрос.УстановитьПараметр("ДатаДок",             Новый Граница(КонецДня(Объект.Дата), ВидГраницы.Включая));	
	Запрос.УстановитьПараметр("Организация",         Объект.Организация);
	Запрос.УстановитьПараметр("Склад",               Объект.Склад);
	Запрос.УстановитьПараметр("Урожай",              Объект.Урожай);
	Если НЕ НеВестиУчетПоВидуХраненияВККУ Тогда
		Запрос.УстановитьПараметр("ВидХранения", Объект.ВидХранения);	
	КонецЕсли;
	Запрос.УстановитьПараметр("Номенклатура",        Объект.Номенклатура);
	Запрос.УстановитьПараметр("Владелец",            Объект.Владелец);
	Запрос.УстановитьПараметр("Договор",             Объект.ДоговорКонтрагента);	
	
	ТаблицаДокументов = Запрос.Выполнить().Выгрузить();
	
	Объект.ДатаНачала    = '00010101';
	Объект.ДатаОкончания = КонецДня(Объект.Дата) - 1;
	
	Для Каждого СтрокаТаблицы Из ТаблицаДокументов Цикл
		Если Объект.ДатаНачала = '00010101' Тогда
			Объект.ДатаНачала = НачалоДня(СтрокаТаблицы.РегистраторДата);
		ИначеЕсли ТипЗнч(СтрокаТаблицы.Регистратор) = Тип("ДокументСсылка.ИНАГРО_АктРасчет310") Тогда
			Если СтрокаТаблицы.Регистратор <> Объект.Ссылка Тогда
				Объект.ДатаНачала = КонецДня(СтрокаТаблицы.РегистраторДата) + 1;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если Объект.ДатаНачала = '00010101' Тогда
		Объект.ДатаНачала = ДатаНачалаЗаготовки;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьПериод(Команда)

	ПараметрыФормыВыбора = Новый Структура("НачалоПериода, КонецПериода", Объект.ДатаНачала, Объект.ДатаОкончания);
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыбратьПериодЗавершение", ЭтотОбъект);
	ОткрытьФорму("ОбщаяФорма.ВыборСтандартногоПериода", ПараметрыФормыВыбора, Элементы.ВыбратьПериод, , , , ОписаниеОповещения);
	
КонецПроцедуры 

&НаКлиенте
Процедура ВыбратьПериодЗавершение(РезультатВыбора, ДопПараметры) Экспорт
	
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Объект.ДатаНачала	 = РезультатВыбора.НачалоПериода;
	Объект.ДатаОкончания = РезультатВыбора.КонецПериода;		
		
КонецПроцедуры

&НаКлиенте
Процедура СоздатьЛабораторныйАнализ(Команда)
	
	ЗначенияЗаполнения = Новый Структура;	
	ЗначенияЗаполнения.Вставить("Дата",               Объект.Дата);
	ЗначенияЗаполнения.Вставить("Ссылка",             ПредопределенноеЗначение("Документ.ИНАГРО_ЛабораторныйАнализ.ПустаяСсылка"));
	ЗначенияЗаполнения.Вставить("Организация",        Объект.Организация);
	ЗначенияЗаполнения.Вставить("Владелец",           Объект.Владелец);
	ЗначенияЗаполнения.Вставить("ДоговорКонтрагента", Объект.ДоговорКонтрагента);
	ЗначенияЗаполнения.Вставить("Склад",        	  Объект.Склад);
	ЗначенияЗаполнения.Вставить("ВидХранения",        Объект.ВидХранения);
	ЗначенияЗаполнения.Вставить("Урожай",             Объект.Урожай);
	ЗначенияЗаполнения.Вставить("Номенклатура",       Объект.Номенклатура);
	ЗначенияЗаполнения.Вставить("Влажность",          Объект.Влажность8);
	ЗначенияЗаполнения.Вставить("СорнаяПримесь",      Объект.СорнаяПримесь8);
	ЗначенияЗаполнения.Вставить("ЗерноваяПримесь",    Объект.ЗерноваяПримесь8);

	ЗначенияЗаполнения.Вставить("МассаПартии",        Объект.ФизическийВес8);	
	
	ИНАГРО_ЭлеваторКлиент.СоздатьДокументНаОсновании(ЭтаФорма, ЗначенияЗаполнения);

КонецПроцедуры

&НаКлиенте
Процедура Рассчитать(Команда)
	
	ПодобратьОстаток();
		
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьОстаткамиИОборотами(Команда)
	
	ПроверитьПередЗаполнением();

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьОборотами(Команда)
	
	ПроверитьПередЗаполнением(Истина);

КонецПроцедуры

&НаКлиенте
Процедура ПроверитьПередЗаполнением(ПоОборотам = Ложь)

	Если  Объект.ДатаНачала > Объект.ДатаОкончания 		
		И Объект.ДатаОкончания <> '00010101000000' Тогда
		ТекстСообщения = НСтр("ru='Дата начала периода не может быть больше даты окончания периода';uk='Дата початку періоду не може бути більше дати закінчення періоду'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Объект.ДатаНачала");
		Возврат;		
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура("ПоОборотам", ПоОборотам);
	
	Если Объект.Ссылка.Пустая() Тогда				
		ТекстВопроса = НСтр("ru='Для заполнения необходимо записать документ. Записать?';uk='Для заповнення необхідно записати документ. Записати?'");			
		ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьПередЗаполнениемПодтверждениеЗаписи", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);						
	Иначе
		Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ИНАГРО_ВидыОперацийАктРасчет310.РасчетПоФакту") Тогда 		
			Если Объект.Проведен Тогда			
				ТекстВопроса = НСтр("ru='Для заполнения необходимо отменить проведение документа. Отменить проведение?';uk='Для заповнення необхідно відмінити проведення документу. Відмінити проведення?'");
				Оповещение = Новый ОписаниеОповещения("ОтменитьПроведениеЗавершение", ЭтотОбъект, ДополнительныеПараметры);
				ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);	
			Иначе
				ПроверитьПередЗаполнениемПодтверждениеЗаписи(КодВозвратаДиалога.ОК, ДополнительныеПараметры);				
			КонецЕсли;
		Иначе
			ПроверитьПередЗаполнениемПодтверждениеЗаписи(КодВозвратаДиалога.ОК, ДополнительныеПараметры);			
		КонецЕсли;
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьПередЗаполнениемПодтверждениеЗаписи(РезультатВопроса, ДополнительныеПараметры) Экспорт
		
	Если РезультатВопроса = КодВозвратаДиалога.ОК Тогда
		Записать();
		Если Объект.Ссылка.Пустая() ИЛИ Модифицированность Тогда
			Возврат; // запись не удалась, сообщения о причинах выводит платформа
		КонецЕсли;
	ИначеЕсли РезультатВопроса = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;	
		
	ЗаполнитьДокумент(ДополнительныеПараметры.ПоОборотам);
		
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьПроведениеЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
   	
    Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда		
		Возврат;
	КонецЕсли;	
	
	ОтменитьПроведениеЗавершениеНаСервере(ДополнительныеПараметры.ПоОборотам);

КонецПроцедуры

&НаСервере
Процедура ОтменитьПроведениеЗавершениеНаСервере(ПоОборотам)
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	ДокументОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
	ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
	
	УстановитьСостояниеДокумента();

	ЗаполнитьДокумент(ПоОборотам);

КонецПроцедуры

#Область ФормированиеОтчетов

&НаКлиенте
Процедура СформироватьФорма36Сводная(Команда)
    
    СтруктураПараметровОтбора = СформироватьСтруктуруПараметровОтбора("Форма36Сводная");
	
	ПараметрыОткрытия = Новый Структура("СтруктураПараметровОтбора, ИмяКоманды", СтруктураПараметровОтбора, "Форма36Сводная");
	
	ОткрытьФорму("Отчет.ИНАГРО_Форма36.Форма.ФормаОтчета", ПараметрыОткрытия);
    
КонецПроцедуры

&НаКлиенте
Процедура СформироватьФорма36ПоВладельцам(Команда)
   
    СтруктураПараметровОтбора = СформироватьСтруктуруПараметровОтбора("Форма36ПоВладельцу");
	
	ПараметрыОткрытия = Новый Структура("СтруктураПараметровОтбора, ИмяКоманды", СтруктураПараметровОтбора, "Форма36ПоВладельцу");
	
	ОткрытьФорму("Отчет.ИНАГРО_Форма36.Форма.ФормаОтчета", ПараметрыОткрытия);
    
КонецПроцедуры
 
&НаКлиенте
Процедура СформироватьФорма37Общая(Команда)
	
    СтруктуруОтбораПараметров = СформироватьСтруктуруПараметровОтбора("Форма37Общая");
    СтруктуруОтбораПараметров.Вставить("ВидФормы", "Форма37Общая");
	
    ПараметрыОткрытия = Новый Структура("СтруктураПараметровОтбора, ИмяКоманды, СформироватьПриОткрытии", СтруктуруОтбораПараметров, "Форма37Общая", Истина);
	
	ОткрытьФорму("Отчет.ИНАГРО_Форма37.Форма.ФормаОтчета", ПараметрыОткрытия);
    
КонецПроцедуры   

&НаКлиенте
Процедура СформироватьФорма37ПоВладельцам(Команда)
    
    СтруктуруОтбораПараметров   = СформироватьСтруктуруПараметровОтбора("РеестрДвиженийЗернаПоВладельцам");
    СтруктуруОтбораПараметров.Вставить("ВидФормы", "РеестрДвиженийЗернаПоВладельцам");
	
	ПараметрыОткрытия = Новый Структура("СтруктураПараметровОтбора, ИмяКоманды, СформироватьПриОткрытии", СтруктуруОтбораПараметров, "РеестрДвиженийЗернаПоВладельцам", Истина);
	
	ОткрытьФорму("Отчет.ИНАГРО_Форма37.Форма.ФормаОтчета", ПараметрыОткрытия);
    
КонецПроцедуры

&НаКлиенте
Процедура СформироватьФорма37(Команда)
    
    СтруктуруОтбораПараметров   = СформироватьСтруктуруПараметровОтбора("Форма37");
    СтруктуруОтбораПараметров.Вставить("ВидФормы", "Форма37");
	
    ПараметрыОткрытия = Новый Структура("СтруктураПараметровОтбора, ИмяКоманды, СформироватьПриОткрытии", СтруктуруОтбораПараметров, "Форма37", Истина);
	
	ОткрытьФорму("Отчет.ИНАГРО_Форма37.Форма.ФормаОтчета",ПараметрыОткрытия);
    
КонецПроцедуры

&НаКлиенте
Процедура СформироватьФорма37Усушка(Команда)
    
    СтруктуруОтбораПараметров   = СформироватьСтруктуруПараметровОтбора("Форма37Усушка");
    СтруктуруОтбораПараметров.Вставить("ВидФормы", "Форма37Усушка");
	
	ПараметрыОткрытия = Новый Структура("СтруктураПараметровОтбора, ИмяКоманды, СформироватьПриОткрытии", СтруктуруОтбораПараметров, "Форма37Усушка", Истина);
	
	ОткрытьФорму("Отчет.ИНАГРО_Форма37.Форма.ФормаОтчета", ПараметрыОткрытия);
    
КонецПроцедуры

&НаКлиенте
Процедура СформироватьУниверсальныйАнализЗерна(Команда)
	
	ПользовательскиеНастройки = ВернутьНастройкиКомпоновщика("ИНАГРО_УниверсальныйАнализЗерна", "АнализЗернаОборотка", "Основной");
	
    ПараметрыОткрытия = Новый Структура("ПользовательскиеНастройки, СформироватьПриОткрытии, КлючВарианта, ИмяКоманды", ПользовательскиеНастройки, Истина, "Основной", "УнивАнализЗерна");
	
	ОткрытьФорму("Отчет.ИНАГРО_УниверсальныйАнализЗерна.Форма.ФормаОтчета", ПараметрыОткрытия);

КонецПроцедуры                                                         

&НаКлиенте
Процедура СформироватьУниверсальныйАнализЗернаСводПоДвижению(Команда)
	
	ПользовательскиеНастройки = ВернутьНастройкиКомпоновщика("ИНАГРО_УниверсальныйАнализЗерна", "АнализЗернаСвод", "Вариант1");
	
	ПараметрыОткрытия = Новый Структура("ПользовательскиеНастройки, СформироватьПриОткрытии, КлючВарианта, ИмяКоманды", ПользовательскиеНастройки, Истина, "Вариант1", "ПоДвижениям");
	
	ОткрытьФорму("Отчет.ИНАГРО_УниверсальныйАнализЗерна.Форма.ФормаОтчета", ПараметрыОткрытия);

КонецПроцедуры  

&НаКлиенте
Процедура СформироватьУниверсальныйАнализЗернаСводПоДвижениюВЗачетномВесе(Команда)
    
    ПользовательскиеНастройки = ВернутьНастройкиКомпоновщика("ИНАГРО_УниверсальныйАнализЗерна", "СводПоДвижениюЗачВесе", "Вариант2");
	
	ПараметрыОткрытия = Новый Структура("ПользовательскиеНастройки, СформироватьПриОткрытии, КлючВарианта, ИмяКоманды", ПользовательскиеНастройки, Истина, "Вариант2", "СводПоДвижениюЗачВесе");
	
	ОткрытьФорму("Отчет.ИНАГРО_УниверсальныйАнализЗерна.Форма.ФормаОтчета", ПараметрыОткрытия);
    
КонецПроцедуры  

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ПодготовитьФормуНаСервере()

	ТекущаяДатаДокумента = Объект.Дата;			

	УстановитьФункциональныеОпцииФормы();
	
	УстановитьЗаголовкиИДоступностьСубконто(ЭтаФорма, Объект.СчетЗатрат, Истина, "");
	
	УстановитьЗаголовокФормы();	

	УправлениеФормой(ЭтаФорма);	
	
	УстановитьСостояниеДокумента();
	
	ПолучитьОстатки();
	
	ОбновитьСообщенияНаФорме();
	
КонецПроцедуры 

&НаСервере
Процедура УстановитьФункциональныеОпцииФормы()

	ОбщегоНазначенияБПКлиентСервер.УстановитьПараметрыФункциональныхОпцийФормыДокумента(ЭтаФорма);	
	
	ПараметрыУчетаЭлеватора                              = ИНАГРО_Элеватор.ПолучитьПараметрыУчетаЭлеватора(Объект.Дата);
	ВыставлятьУслугиОчисткиСушкиПоФактическимПоказателям = ПараметрыУчетаЭлеватора.ВыставлятьУслугиОчисткиСушкиПоФактическимПоказателям;
	НеВестиУчетПоВидуХраненияВККУ                        = ПараметрыУчетаЭлеватора.НеВестиУчетПоВидуХраненияВККУ;

	СобственныйКонтрагент                                = ИНАГРО_Элеватор.ПолучитьДополнительныйРеквизитОрганизации(Объект.Организация, "Контрагент", Объект.Дата);
			
КонецПроцедуры 

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)

	Элементы = Форма.Элементы;
	Объект   = Форма.Объект;
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ИНАГРО_ВидыОперацийАктРасчет310.ПредварительныйРасчет") Тогда
		
		Элементы.СпособРасчетаПобочногоПродукта.Видимость   = Истина;
		Элементы.СпособРасчетаОтходов3Категории.Видимость   = Истина;

		Элементы.ПечататьОкончательныйАкт.Видимость         = Истина;		
		Элементы.ПрогнозПобочныхПродуктовИОтходов.Видимость = Истина;		
		Элементы.ФормаРассчитать.Доступность                = Истина;
				
		Если Объект.СпособРасчетаПредварительногоАктаРасчета = ПредопределенноеЗначение("Перечисление.ИНАГРО_СпособыРасчетаПредварительногоАктаРасчета.ПодборВесаОтходов") Тогда
			
			Элементы.ПрогнозируемыйПроцентПобочныхПродуктов.Видимость         = Ложь;
			Элементы.ПрогнозируемыйВесПобочныхПродуктов.Доступность           = Истина;
			Элементы.ПрогнозируемаяВлажностьПобочныхПродуктов.Доступность     = Истина;
			Элементы.ПрогнозируемаяСорнаяПримесьПобочныхПродуктов.Доступность = Истина;			
			Элементы.СпособРасчетаПобочногоПродукта.Видимость                 = Ложь;

			Элементы.ПрогнозируемыйПроцентОтходов3Категории.Доступность       = Истина;
			Элементы.ПрогнозируемыйВесОтходов3Категории.Доступность           = Истина;
			Элементы.ПрогнозируемаяВлажностьОтходов3Категории.Доступность     = Истина;	
			Элементы.ПрогнозируемаяСорнаяПримесьОтходов3Категории.Доступность = Истина;			
			Элементы.СпособРасчетаОтходов3Категории.Видимость                 = Ложь;
						
		Иначе
			
			Если Объект.СпособРасчетаПобочногоПродукта = 2 Тогда
				Элементы.ПрогнозируемыйПроцентПобочныхПродуктов.Доступность       = Ложь;
				Элементы.ПрогнозируемыйВесПобочныхПродуктов.Доступность           = Истина;
				Элементы.ПрогнозируемаяВлажностьПобочныхПродуктов.Доступность     = Истина;
				Элементы.ПрогнозируемаяСорнаяПримесьПобочныхПродуктов.Доступность = Истина;
			ИначеЕсли Объект.СпособРасчетаПобочногоПродукта = 3 Тогда
				Элементы.ПрогнозируемыйПроцентПобочныхПродуктов.Доступность       = Истина;
				Элементы.ПрогнозируемыйВесПобочныхПродуктов.Доступность           = Ложь;
				Элементы.ПрогнозируемаяВлажностьПобочныхПродуктов.Доступность     = Истина;
				Элементы.ПрогнозируемаяСорнаяПримесьПобочныхПродуктов.Доступность = Истина;			
			Иначе
				Элементы.ПрогнозируемыйПроцентПобочныхПродуктов.Доступность       = Ложь;
				Элементы.ПрогнозируемыйВесПобочныхПродуктов.Доступность           = Ложь;
				Элементы.ПрогнозируемаяВлажностьПобочныхПродуктов.Доступность     = Ложь;
				Элементы.ПрогнозируемаяСорнаяПримесьПобочныхПродуктов.Доступность = Ложь;			
			КонецЕсли;
			
			Если Объект.СпособРасчетаОтходов3Категории = 2 ИЛИ Объект.СпособРасчетаОтходов3Категории = 4 Тогда
				Элементы.ПрогнозируемыйПроцентОтходов3Категории.Доступность       = Ложь;
				Элементы.ПрогнозируемыйВесОтходов3Категории.Доступность           = Истина;
				Элементы.ПрогнозируемаяВлажностьОтходов3Категории.Доступность     = Истина;	
				Элементы.ПрогнозируемаяСорнаяПримесьОтходов3Категории.Доступность = Истина;
			ИначеЕсли Объект.СпособРасчетаОтходов3Категории = 3 Тогда
				Элементы.ПрогнозируемыйПроцентОтходов3Категории.Доступность       = Истина;
				Элементы.ПрогнозируемыйВесОтходов3Категории.Доступность           = Ложь;
				Элементы.ПрогнозируемаяВлажностьОтходов3Категории.Доступность     = Истина;	
				Элементы.ПрогнозируемаяСорнаяПримесьОтходов3Категории.Доступность = Истина;
			Иначе
				Элементы.ПрогнозируемыйПроцентОтходов3Категории.Доступность       = Ложь;
				Элементы.ПрогнозируемыйВесОтходов3Категории.Доступность           = Ложь;
				Элементы.ПрогнозируемаяВлажностьОтходов3Категории.Доступность     = Ложь;	
				Элементы.ПрогнозируемаяСорнаяПримесьОтходов3Категории.Доступность = Ложь;
			КонецЕсли;
			
		КонецЕсли;
		
		Элементы.СписатьЗачетныйВес.Видимость               = Истина;
		Элементы.НеСписыватьНеиспользованноеПраво.Видимость = Ложь;
		
	Иначе		
		
		Элементы.СписатьЗачетныйВес.Видимость               = Ложь;
		Элементы.НеСписыватьНеиспользованноеПраво.Видимость = Истина;
		Элементы.ПечататьОкончательныйАкт.Видимость         = Ложь;

		Элементы.ПрогнозПобочныхПродуктовИОтходов.Видимость = Ложь;
		
		Элементы.ФормаРассчитать.Доступность = Ложь;
		
	КонецЕсли;
	
	Элементы.ГруппаУчетЗатрат.Видимость            = Объект.ОтражатьВБухгалтерскомУчете И Объект.ОтражатьПоЗатратам;
		
	Элементы.ВыставитьУслугиОчисткиСушки.Видимость = Форма.ВыставлятьУслугиОчисткиСушкиПоФактическимПоказателям;
					
КонецПроцедуры

&НаСервере
Процедура УстановитьПараметрыВыбораВидОперации()
	
	МассивВидовОпераций = Документы.ИНАГРО_АктРасчет310.ПолучитьФиксированныйМассивВидовОпераций();
	
	ПараметрМассивВидовОпераций = Новый ПараметрВыбора("Отбор.Ссылка", МассивВидовОпераций);
	
	НовыйМассив = Новый Массив();
	НовыйМассив.Добавить(ПараметрМассивВидовОпераций);
	НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);
	
	Элементы.ВидОперации.ПараметрыВыбора = НовыеПараметры;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗаголовокФормы()
	
	ОбъектФормы = ЭтаФорма.Объект;

	ТекстЗаголовка = НСтр("ru='Акт расчета (и-№310)';uk='Акт розрахунку (і-№310)'");
	
	Если ЗначениеЗаполнено(ОбъектФормы.Ссылка) Тогда
		ТекстЗаголовка = ТекстЗаголовка + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru=' %1 от %2';uk=' %1 від %2'"), ОбъектФормы.Номер, ОбъектФормы.Дата);
	Иначе
		ТекстЗаголовка = ТекстЗаголовка + НСтр("ru=' (создание)';uk=' (створення)'");
	КонецЕсли;
	
	ЭтаФорма.Заголовок = ТекстЗаголовка + " (" + Строка(ОбъектФормы.ВидОперации) + ")";

КонецПроцедуры

&НаСервере
Процедура УстановитьСостояниеДокумента()
	
	СостояниеДокумента = ОбщегоНазначенияБП.СостояниеДокумента(Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтражатьВБухгалтерскомУчете()
	
	Объект.ОтражатьВБухгалтерскомУчете = НЕ СобственныйКонтрагент = Объект.Владелец;
	
	Элементы.ОтражатьВБухгалтерскомУчете.Доступность = Объект.ОтражатьВБухгалтерскомУчете;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьЗаголовкиИДоступностьСубконто(Форма, Счет, ЕстьПодразделение, Постфикс = "")

	ПоляФормы = Новый Структура("Субконто1, Субконто2, Субконто3",
		"Субконто" + Постфикс + "1",
		"Субконто" + Постфикс + "2",
		"Субконто" + Постфикс + "3");
		
	Если ЕстьПодразделение Тогда
		ПоляФормы.Вставить("Подразделение", "ПодразделениеЗатрат" + Постфикс);
	КонецЕсли;
	
	ЗаголовкиПолей = Новый Структура("Субконто1, Субконто2, Субконто3",
		"ЗаголовокСубконто" + Постфикс + "1",
		"ЗаголовокСубконто" + Постфикс + "2",
		"ЗаголовокСубконто" + Постфикс + "3");
	
	Если ЕстьПодразделение Тогда
		ЗаголовкиПолей.Вставить("Подразделение", "ЗаголовокПодразделение" + Постфикс);
	КонецЕсли;
	
	БухгалтерскийУчетКлиентСервер.ПриВыбореСчета(Счет, Форма, ПоляФормы, ЗаголовкиПолей);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ИзменитьПараметрыВыбораПолейСубконто(Форма, Суффикс, ИмяСчета)

	ПараметрыДокумента = СписокПараметровВыбораСубконто(Форма, Форма.Объект,
		"Субконто" + Суффикс + "%Индекс%", ИмяСчета);
	
	БухгалтерскийУчетКлиентСервер.ИзменитьПараметрыВыбораПолейСубконто(
		Форма, 
		Форма.Объект, 
		"Субконто" + Суффикс + "%Индекс%", 
		"Субконто" + Суффикс + "%Индекс%", 
		ПараметрыДокумента);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция СписокПараметровВыбораСубконто(Форма, ПараметрыОбъекта, ШаблонИмяПоляОбъекта, ИмяСчета)

	СписокПараметров = Новый Структура;
	Для Индекс = 1 По 3 Цикл
		ИмяПоля = СтрЗаменить(ШаблонИмяПоляОбъекта, "%Индекс%", Индекс);
		Если ТипЗнч(ПараметрыОбъекта[ИмяПоля]) = Тип("СправочникСсылка.Контрагенты") Тогда
			СписокПараметров.Вставить("Контрагент", ПараметрыОбъекта[ИмяПоля]);
		ИначеЕсли ТипЗнч(ПараметрыОбъекта[ИмяПоля]) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
			СписокПараметров.Вставить("ДоговорКонтрагента", ПараметрыОбъекта[ИмяПоля]);
		ИначеЕсли ТипЗнч(ПараметрыОбъекта[ИмяПоля]) = Тип("СправочникСсылка.Номенклатура") Тогда
			СписокПараметров.Вставить("Номенклатура", ПараметрыОбъекта[ИмяПоля]);
		ИначеЕсли ТипЗнч(ПараметрыОбъекта[ИмяПоля]) = Тип("СправочникСсылка.Склады") Тогда
			СписокПараметров.Вставить("Склад", ПараметрыОбъекта[ИмяПоля]);
		КонецЕсли;
	КонецЦикла;
	СписокПараметров.Вставить("Организация", Форма.Объект.Организация);
	СписокПараметров.Вставить("СчетУчета"  , Форма.Объект[ИмяСчета]);
	
	Возврат СписокПараметров;

КонецФункции

&НаСервере
Процедура ПолучитьОстатки()
	
	ДанныеОбъекта = Новый Структура(
		"Организация, Владелец, ДоговорКонтрагента, 
		|Склад, ВидХранения, Номенклатура,
		|Урожай, Дата");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);	
	
	СтруктураПоОстаткам = ИНАГРО_Элеватор.ПроверкаНаличияЗерна(ДанныеОбъекта);	
		
	Синий   = Новый Цвет(47, 95, 237);
	Красный = Новый Цвет(255, 0, 0);	
	
	Элементы.НадписьОстаток.Заголовок  = НСтр("ru = 'Остаток: '; uk = 'Залишок: '") + СтруктураПоОстаткам.ВесОстаток;
	Элементы.НадписьОстаток.ЦветТекста = ?(СтруктураПоОстаткам.ВесОстаток > 0, Синий, Красный);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСообщенияНаФорме()
	
	Красный = Новый Цвет(255, 0, 0);	
		
	Элементы.НадписьПовышениеВсего.Заголовок   = НСтр("ru = 'Итого повышение: '; uk = 'Всього підвищення: '")       + Объект.ВесПовышениеВсего;	
	Элементы.НадписьУбыльВсего.Заголовок       = НСтр("ru = 'Итого убыль: '; uk = 'Всього зменшення: '")            + Объект.ВесУбыльВсего;
	Элементы.НадписьНедостачаОстаток.Заголовок = НСтр("ru = 'Недостача (остаток): '; uk = 'Недостача (залишок): '") + Объект.ФизическийВес8;
	
	Если Объект.УбыльСорнойПримеси > 0.2 Тогда
		Элементы.УбыльСорнойПримеси.ЦветФона = Красный;
		Элементы.НадписьКритичноеСнижениеСорнойПримеси.Заголовок  = НСтр("ru = 'Снижение сорной примеси превышает 0.2'; uk = 'Зниження смітної домішки перевищує 0.2'");;
		Элементы.НадписьКритичноеСнижениеСорнойПримеси.ЦветТекста = Красный;
	Иначе
		Элементы.УбыльСорнойПримеси.ЦветФона = ЦветаСтиля.ЦветФонаПоля;
		Элементы.НадписьКритичноеСнижениеСорнойПримеси.Заголовок  = "";
		Элементы.НадписьКритичноеСнижениеСорнойПримеси.ЦветТекста = ЦветаСтиля.ЦветТекстаПоля;	
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьПараметрыДляДоговоров()

	ПараметрыОтбора = Новый Структура("ВидХранения, Урожай");
	ЗаполнитьЗначенияСвойств(ПараметрыОтбора, Объект);

	Возврат ПараметрыОтбора;

КонецФункции

&НаКлиенте
Функция ПолучитьПараметрыДляПроверкиЗаполнения()
	
	ПараметрыДляПроверкиЗаполнения = Новый Структура(
		"Склад, ВидХранения, Урожай, 
		|Номенклатура");
	ЗаполнитьЗначенияСвойств(ПараметрыДляПроверкиЗаполнения, Объект);
	
	Возврат ПараметрыДляПроверкиЗаполнения; 

КонецФункции

&НаКлиенте
Процедура ОчиститьПрогнозПобочногоПродуктаИОтходов()
	
	// п.п
	СпособРасчетаПобочногоПродукта               = 1;
	ПрогнозируемыйПроцентПобочныхПродуктов       = 0;
	ПрогнозируемыйВесПобочныхПродуктов           = 0;
	ПрогнозируемаяВлажностьПобочныхПродуктов     = 0;
	ПрогнозируемаяСорнаяПримесьПобочныхПродуктов = 0;
	
	// отходы 3 кат.
	СпособРасчетаОтходов3Категории               = 1;
	ПрогнозируемыйВесОтходов3Категории           = 0;
	ПрогнозируемаяВлажностьОтходов3Категории     = 0;
	ПрогнозируемаяСорнаяПримесьОтходов3Категории = 0;
	
КонецПроцедуры

&НаСервере
Процедура УбыльВсего()
	
	Объект.ВесУбыльВсего = Объект.УбыльПоВлажности + Объект.УбыльПоСорнойПримеси + Объект.УбыльПоПрочей + Объект.УбыльПоЕстественной;
	
	ПодлежитВозврату();
	
	ОбновитьСообщенияНаФорме();
	
КонецПроцедуры 

&НаСервере
Процедура ПовышениеВсего()
	
	Объект.ВесПовышениеВсего = Объект.ПовышениеПоВлажности + Объект.ПовышениеПоСорнойПримеси;
	
	ПодлежитВозврату();
	
	ОбновитьСообщенияНаФорме();
	
КонецПроцедуры

&НаСервере
Процедура ПодлежитВозврату()
	
	Объект.ФизическийВес8 = Объект.ФизическийВес3
	                      - Объект.ФизическийВес4
						  -	Объект.ПрогнозируемыйВесПобочныхПродуктов
						  - Объект.ПрогнозируемыйВесОтходов1Категории
						  - Объект.ПрогнозируемыйВесОтходов2Категории
						  - Объект.ПрогнозируемыйВесОтходов3Категории
						  -	Объект.ВесУбыльВсего
						  +	Объект.ВесПовышениеВсего;
	
КонецПроцедуры 

&НаСервере
Процедура ПодобратьОстаток()
	
	Если Объект.ВидОперации = Перечисления.ИНАГРО_ВидыОперацийАктРасчет310.ПредварительныйРасчет Тогда
		
		Если Объект.СпособРасчетаПредварительногоАктаРасчета = ПредопределенноеЗначение("Перечисление.ИНАГРО_СпособыРасчетаПредварительногоАктаРасчета.ПодборВесаОтходов") Тогда
			ПодобратьОстатокПодборомВесаОтходов();
		Иначе
			ПодобратьОстатокПараллельнымПодборомВесаЗернаВесаОтходов();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПодобратьОстатокПодборомВесаОтходов()
	
	СнижениеСорнойПримеси                                      = Объект.СорнаяПримесь3 - Объект.СорнаяПримесь8;
	ПрогнозноеКоличествоОтходов                                = Окр(СнижениеСорнойПримеси * Объект.ФизическийВес3 / 100);
	
	Объект.ФизическийВес8                                      = Объект.ФизическийВес3 - Объект.ФизическийВес4 - ПрогнозноеКоличествоОтходов;
	
	ВесПоСорнойПримесиОстатка                                  = Окр(Объект.ФизическийВес8 * Объект.СорнаяПримесь8 / 100, 0);
	ВесПоСорнойПримесиРасхода                                  = Окр(Объект.ФизическийВес4 * Объект.СорнаяПримесь4 / 100, 0);
	ВесПоСорнойПримесиВсегоРасхода                             = ВесПоСорнойПримесиОстатка + ВесПоСорнойПримесиРасхода;
	
	ВесПоСорнойПримесиПрихода                                  = Окр(Объект.ФизическийВес3 * Объект.СорнаяПримесь3/ 100, 0);
	
	ВесПоСорнойПримесиПрогнозногоКоличестваОтходов             = ВесПоСорнойПримесиПрихода - ВесПоСорнойПримесиВсегоРасхода;
	
	РаспределитьВесПоСорнойПримесиПрогнозногоКоличестваОтходов = ВесПоСорнойПримесиПрогнозногоКоличестваОтходов - Окр(Объект.БалансСора * Объект.ФизическийВес3 / 100, 0);
	
	СорнаяПримесьОтходов                                       = ?(ПрогнозноеКоличествоОтходов = 0, 0, Окр(ВесПоСорнойПримесиПрогнозногоКоличестваОтходов / ПрогнозноеКоличествоОтходов * 100, 2));
	
	Объект.ПрогнозируемыйВесОтходов3Категории                  = Окр(ПрогнозноеКоличествоОтходов * Объект.ПрогнозируемыйПроцентОтходов3Категории / 100);
	Объект.ПрогнозируемыйВесПобочныхПродуктов                  = ПрогнозноеКоличествоОтходов - (Объект.ПрогнозируемыйВесОтходов1Категории
	                                                                                         + Объект.ПрогнозируемыйВесОтходов2Категории
																							 + Объект.ПрогнозируемыйВесОтходов3Категории);
	
	РассчитатьСнижениеВлажности();
	РассчитатьСнижениеСорнойПримеси();			
	
	Выход = 0;
	Ключ  = 0;
	
	Пока Выход = 0 Цикл
		
		РассчитатьСнижениеВлажности();
		РассчитатьСнижениеСорнойПримеси();			
		
		ВесПоСорнойПримесиПобочныхПродуктов            = Окр(Объект.ПрогнозируемыйВесПобочныхПродуктов * Объект.ПрогнозируемаяСорнаяПримесьПобочныхПродуктов / 100, 0);
		ВесПоСорнойПримесиОтходов1Категории            = Окр(Объект.ПрогнозируемыйВесОтходов1Категории * Объект.ПрогнозируемаяСорнаяПримесьОтходов1Категории / 100, 0);
		ВесПоСорнойПримесиОтходов2Категории            = Окр(Объект.ПрогнозируемыйВесОтходов2Категории * Объект.ПрогнозируемаяСорнаяПримесьОтходов2Категории / 100, 0);
		ВесПоСорнойПримесиОтходов3Категории            = Окр(Объект.ПрогнозируемыйВесОтходов3Категории * Объект.ПрогнозируемаяСорнаяПримесьОтходов3Категории / 100, 0);

		ПрогнозноеКоличествоОтходов                    = Объект.ПрогнозируемыйВесПобочныхПродуктов
		                                               + Объект.ПрогнозируемыйВесОтходов1Категории
													   + Объект.ПрогнозируемыйВесОтходов2Категории
													   + Объект.ПрогнозируемыйВесОтходов3Категории;
		ВесПоСорнойПримесиПрогнозногоКоличестваОтходов = ВесПоСорнойПримесиПобочныхПродуктов
		                                               + ВесПоСорнойПримесиОтходов1Категории
													   + ВесПоСорнойПримесиОтходов2Категории
													   + ВесПоСорнойПримесиОтходов3Категории;
		СорнаяПримесьОтходов                           = ?(ПрогнозноеКоличествоОтходов = 0, 0, Окр(ВесПоСорнойПримесиПрогнозногоКоличестваОтходов / ПрогнозноеКоличествоОтходов * 100, 2));
		
		ОбщийРасход                                    = Объект.ФизическийВес4
											           + Объект.ФизическийВес8
													   + Объект.ПрогнозируемыйВесПобочныхПродуктов
													   + Объект.ПрогнозируемыйВесОтходов1Категории
													   + Объект.ПрогнозируемыйВесОтходов2Категории
													   + Объект.ПрогнозируемыйВесОтходов3Категории;
		Остаток = Объект.ФизическийВес3 - ОбщийРасход - Объект.ВесУбыльВсего + Объект.ВесПовышениеВсего;
		
		Если Объект.ПрогнозируемыйПроцентОтходов3Категории = 100 Тогда
			ВесПоправкиПобочногоПродукта = 0;
			ВесПоправкиОтходов           = ?(Объект.ПрогнозируемаяСорнаяПримесьОтходов3Категории = 0, 0, Окр((РаспределитьВесПоСорнойПримесиПрогнозногоКоличестваОтходов - ВесПоСорнойПримесиПрогнозногоКоличестваОтходов) * 100 / Объект.ПрогнозируемаяСорнаяПримесьОтходов3Категории))
		Иначе
			ВесПоправкиПобочногоПродукта = ?(ВесПоСорнойПримесиПобочныхПродуктов = 0, 0, Окр((РаспределитьВесПоСорнойПримесиПрогнозногоКоличестваОтходов - ВесПоСорнойПримесиПрогнозногоКоличестваОтходов) * 100 / ВесПоСорнойПримесиПобочныхПродуктов));			
			ВесПоправкиОтходов           = 0;
		КонецЕсли;
		
		Если ((Остаток = 0) И (ВесПоправкиОтходов + ВесПоправкиПобочногоПродукта = 0)) ИЛИ (Ключ > 50) Тогда
			Выход = 1;
			// закончим и больше не будем изменять прогноз
			Прервать;
		КонецЕсли;				
		
		Объект.ПрогнозируемыйВесПобочныхПродуктов      = Объект.ПрогнозируемыйВесПобочныхПродуктов + ВесПоправкиПобочногоПродукта;
		Объект.ПрогнозируемыйВесОтходов3Категории      = Объект.ПрогнозируемыйВесОтходов3Категории + ВесПоправкиОтходов;
		
		Ключ = Ключ + 1;
		
	КонецЦикла
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьСнижениеВлажности()
	
	Если Объект.ПроводилиСушку Тогда
		
		Если Объект.ВидОперации = Перечисления.ИНАГРО_ВидыОперацийАктРасчет310.ПредварительныйРасчет Тогда			
			
			БудущийПобочныйПродуктПоВлажности  = Окр(Объект.ПрогнозируемыйВесПобочныхПродуктов * Объект.ПрогнозируемаяВлажностьПобочныхПродуктов / 100);
			БудущиеОтходы1КатегорииПоВлажности = Окр(Объект.ПрогнозируемыйВесОтходов1Категории * Объект.ПрогнозируемаяВлажностьОтходов1Категории / 100);
			БудущиеОтходы2КатегорииПоВлажности = Окр(Объект.ПрогнозируемыйВесОтходов2Категории * Объект.ПрогнозируемаяВлажностьОтходов2Категории / 100);
			БудущиеОтходы3КатегорииПоВлажности = Окр(Объект.ПрогнозируемыйВесОтходов3Категории * Объект.ПрогнозируемаяВлажностьОтходов3Категории / 100);
			
			ФизическийВесРасходаПоВлажности    = Окр(Объект.ФизическийВес4 * Объект.Влажность4 / 100);			
			ФизическийВесОстаткаПоВлажности    = Окр(Объект.ФизическийВес8 * Объект.Влажность8 / 100);
			
			ОбщийРасход                        = Объект.ФизическийВес4
			                                   + Объект.ФизическийВес8
											   + Объект.ПрогнозируемыйВесПобочныхПродуктов
											   + Объект.ПрогнозируемыйВесОтходов1Категории
											   + Объект.ПрогнозируемыйВесОтходов2Категории
											   + Объект.ПрогнозируемыйВесОтходов3Категории;
			ОбщийРасходПоВлажности             = ФизическийВесРасходаПоВлажности
			                                   + ФизическийВесОстаткаПоВлажности
											   + БудущийПобочныйПродуктПоВлажности
											   + БудущиеОтходы1КатегорииПоВлажности
											   + БудущиеОтходы2КатегорииПоВлажности
											   + БудущиеОтходы3КатегорииПоВлажности;
			ВлажностьРасхода                   = ?(ОбщийРасход = 0, 0, Окр(ОбщийРасходПоВлажности * 100 / ОбщийРасход, 2));
			
			СнижениеВлажности(Объект.ФизическийВес3, Объект.Влажность3, ВлажностьРасхода);
			
		ИначеЕсли Объект.ВидОперации = Перечисления.ИНАГРО_ВидыОперацийАктРасчет310.РасчетПоФакту Тогда			
			
			СнижениеВлажности(Объект.ФизическийВес3, Объект.Влажность3, Объект.Влажность4)
			
		КонецЕсли;
		
	Иначе
		
		Объект.УбыльВлажности       = 0;
		Объект.УбыльПоВлажности     = 0;
		Объект.ПовышениеВлажности   = 0;
		Объект.ПовышениеПоВлажности = 0;
		
	КонецЕсли;
	
	УбыльВсего();
	
	ПовышениеВсего();
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьСнижениеСорнойПримеси()
	
	СорнаяПримесьРасхода = Объект.СорнаяПримесь4;
	
	Если  Объект.ПроводилиОчистку Тогда
		
		Если Объект.ВидОперации = Перечисления.ИНАГРО_ВидыОперацийАктРасчет310.ПредварительныйРасчет Тогда
			
			БудущийПобочныйПродуктПоСорнойПримеси  = Окр(Объект.ПрогнозируемыйВесПобочныхПродуктов * Объект.ПрогнозируемаяСорнаяПримесьПобочныхПродуктов / 100);
			БудущиеОтходы1КатегорииПоСорнойПримеси = Окр(Объект.ПрогнозируемыйВесОтходов1Категории * Объект.ПрогнозируемаяСорнаяПримесьОтходов1Категории / 100);
			БудущиеОтходы2КатегорииПоСорнойПримеси = Окр(Объект.ПрогнозируемыйВесОтходов2Категории * Объект.ПрогнозируемаяСорнаяПримесьОтходов2Категории / 100);
			БудущиеОтходы3КатегорииПоСорнойПримеси = Окр(Объект.ПрогнозируемыйВесОтходов3Категории * Объект.ПрогнозируемаяСорнаяПримесьОтходов3Категории / 100);
			
			ФизическийВесРасходаПоСорнойПримеси    = Окр(Объект.ФизическийВес4 * Объект.СорнаяПримесь4 / 100);			
			ФизическийВесОстаткаПоСорнойПримеси    = Окр(Объект.ФизическийВес8 * Объект.СорнаяПримесь8 / 100);
			
			ОбщийРасход                            = Объект.ФизическийВес4
			                                       + Объект.ФизическийВес8
												   + Объект.ПрогнозируемыйВесПобочныхПродуктов
												   + Объект.ПрогнозируемыйВесОтходов1Категории
												   + Объект.ПрогнозируемыйВесОтходов2Категории
												   + Объект.ПрогнозируемыйВесОтходов3Категории;
			ОбщийРасходПоСорнойПримеси             = ФизическийВесРасходаПоСорнойПримеси
			                                       + ФизическийВесОстаткаПоСорнойПримеси
												   + БудущийПобочныйПродуктПоСорнойПримеси
												   + БудущиеОтходы1КатегорииПоСорнойПримеси
												   + БудущиеОтходы2КатегорииПоСорнойПримеси
												   + БудущиеОтходы3КатегорииПоСорнойПримеси;
			СорнаяПримесьРасхода = ?(ОбщийРасход = 0, 0, Окр(ОбщийРасходПоСорнойПримеси * 100 / ОбщийРасход, 2));
			
			СнижениеСорнойПримеси(Объект.ФизическийВес3, Объект.СорнаяПримесь3, СорнаяПримесьРасхода);
			
		ИначеЕсли Объект.ВидОперации = Перечисления.ИНАГРО_ВидыОперацийАктРасчет310.РасчетПоФакту Тогда			
			
			СнижениеСорнойПримеси(Объект.ФизическийВес3, Объект.СорнаяПримесь3, Объект.СорнаяПримесь4);
			
		КонецЕсли;
		
	Иначе
		
		Объект.УбыльСорнойПримеси       = 0;
		Объект.УбыльПоСорнойПримеси     = 0;
		Объект.ПовышениеСорнойПримеси   = 0;
		Объект.ПовышениеПоСорнойПримеси = 0;
		
	КонецЕсли;
	
	УбыльВсего();
	
	ПовышениеВсего();
	
КонецПроцедуры

&НаСервере
Процедура СнижениеВлажности(ВесПрихода, ВлажностьПрихода, ВлажностьРасхода)
	
	Если (ВлажностьПрихода - ВлажностьРасхода) > 0 Тогда
		Объект.УбыльВлажности       = (ВлажностьПрихода - ВлажностьРасхода) * 100 / (100 - ВлажностьРасхода);
		Объект.УбыльПоВлажности     = Объект.УбыльВлажности * ВесПрихода / 100;
		Объект.ПовышениеВлажности   = 0;
		Объект.ПовышениеПоВлажности = 0;
	Иначе
		Объект.УбыльВлажности       = 0;
		Объект.УбыльПоВлажности     = 0;
		Объект.ПовышениеВлажности   = (ВлажностьРасхода - ВлажностьПрихода) * 100 / (100 - ВлажностьРасхода);
		Объект.ПовышениеПоВлажности = Объект.ПовышениеВлажности * ВесПрихода / 100;		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СнижениеСорнойПримеси(ВесПрихода, СорнаяПримесьПрихода, СорнаяПримесьРасхода)
	
	Если (СорнаяПримесьПрихода - СорнаяПримесьРасхода) > 0 Тогда
		Объект.УбыльСорнойПримеси       = ((СорнаяПримесьПрихода - СорнаяПримесьРасхода) * (100 - Объект.УбыльВлажности))/(100 - СорнаяПримесьРасхода);
		Объект.УбыльПоСорнойПримеси     = Объект.УбыльСорнойПримеси * ВесПрихода / 100;		
		Объект.ПовышениеСорнойПримеси   = 0;
		Объект.ПовышениеПоСорнойПримеси = 0;
	Иначе
		Объект.УбыльСорнойПримеси       = 0;
		Объект.УбыльПоСорнойПримеси     = 0;
		Объект.ПовышениеСорнойПримеси   = ((СорнаяПримесьРасхода - СорнаяПримесьПрихода) * (100 - Объект.УбыльВлажности))/(100 - СорнаяПримесьРасхода);
		Объект.ПовышениеПоСорнойПримеси = Объект.ПовышениеСорнойПримеси * ВесПрихода / 100;		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПодобратьОстатокПараллельнымПодборомВесаЗернаВесаОтходов()
	
	Выход = 0;
	Ключ  = 0;
	
	СпрогнозироватьВесОтходов();
	
	Пока Выход = 0 Цикл
		
		СпрогнозироватьВесПобочныхПродуктов(Объект.ФизическийВес8);
		
		Выход2 = 0;
		Ключ2  = 0;
		
		Если Объект.СпособРасчетаОтходов3Категории <> 4 Тогда
			Объект.ПрогнозируемыйВесОтходов3Категории = Объект.ПрогнозируемыйВесОтходов3Категории * 2;
			НачальныйВесОтходов3Категории             = Объект.ПрогнозируемыйВесОтходов3Категории * 2;
		КонецЕсли;
		
		Поправка   = 0;                       
		ЛевоеЗнач  = 0;
		ПравоеЗнач = Объект.ПрогнозируемыйВесОтходов3Категории;
		
		РассчитатьСнижениеВлажности();
		РассчитатьСнижениеСорнойПримеси();			
		
		Пока Выход2 = 0 Цикл
			
			РассчитатьСнижениеВлажности();
			РассчитатьСнижениеСорнойПримеси();
			УбыльЕстественнаяПриИзмененииНаСервере();
			
			ОбщийРасход = Объект.ФизическийВес4
			            + Объект.ФизическийВес8
						+ Объект.ПрогнозируемыйВесПобочныхПродуктов
						+ Объект.ПрогнозируемыйВесОтходов1Категории
						+  Объект.ПрогнозируемыйВесОтходов2Категории
						+  Объект.ПрогнозируемыйВесОтходов3Категории;
			
			// Подбор веса отходов методом половинного деления между 0...2*НачальныйВесОтходов3кат
			Если (Объект.СорнаяПримесь3 - СорнаяПримесьРасхода) = Объект.БалансСора
				ИЛИ Ключ2 > 20
				ИЛИ Объект.ПрогнозируемыйВесОтходов3Категории = 0 Тогда
				Выход2 = 1;
			Иначе				
				Если Объект.ПовышениеСорнойПримеси > 0 Тогда
					ПравоеЗнач = Объект.ПрогнозируемыйВесОтходов3Категории;
					Если Объект.СпособРасчетаОтходов3Категории <> 4 Тогда
						Объект.ПрогнозируемыйВесОтходов3Категории = ЛевоеЗнач + Окр((ПравоеЗнач - ЛевоеЗнач) / 2, 0);	
					КонецЕсли;	
				Иначе					
					Если Объект.УбыльСорнойПримеси > Объект.БалансСора Тогда
						ЛевоеЗнач = Объект.ПрогнозируемыйВесОтходов3Категории;
						Если Объект.СпособРасчетаОтходов3Категории <> 4 Тогда
							Объект.ПрогнозируемыйВесОтходов3Категории = ЛевоеЗнач + Окр((ПравоеЗнач - ЛевоеЗнач) / 2,0);
						КонецЕсли;	
					Иначе
						ПравоеЗнач = Объект.ПрогнозируемыйВесОтходов3Категории;
						Если Объект.СпособРасчетаОтходов3Категории <> 4 Тогда
							Объект.ПрогнозируемыйВесОтходов3Категории = ЛевоеЗнач + Окр((ПравоеЗнач - ЛевоеЗнач) / 2,0);
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			// Если перебрали все возможные варианты из правого интервала будем подбирать из левого интервала
			Если ЛевоеЗнач + 1 = ПравоеЗнач И (Объект.СорнаяПримесь3 - СорнаяПримесьРасхода) < 0 Тогда
				ЛевоеЗнач = 0;
			КонецЕсли;
			// Если перебрали все возможные варианты из левого интервала будем подбирать из правого интервала
			Если ЛевоеЗнач + 1 = ПравоеЗнач И (Объект.СорнаяПримесь3 - СорнаяПримесьРасхода) > 0 Тогда
				ПравоеЗнач = НачальныйВесОтходов3Категории;
			КонецЕсли;			
			
			Если Объект.СпособРасчетаОтходов3Категории <> 4 Тогда
				Ключ2 = Ключ2 + 1;
			Иначе
				Ключ2 = Ключ2 + 50;
			КонецЕсли;	
			
		КонецЦикла;
		
		Остаток                        = Объект.ФизическийВес3 - ОбщийРасход - Объект.ВесУбыльВсего + Объект.ВесПовышениеВсего;
		ВесОстаткаДляСледующейИтерации = Объект.ФизическийВес8 + Остаток;
		
		Если Остаток <> 0 Тогда
			Объект.ФизическийВес8 = ?(ВесОстаткаДляСледующейИтерации < 0, -1 * ВесОстаткаДляСледующейИтерации, ВесОстаткаДляСледующейИтерации);
		КонецЕсли;
		
		РассчитатьСнижениеВлажности();
		РассчитатьСнижениеСорнойПримеси();
		УбыльЕстественнаяПриИзмененииНаСервере();
		
		Если ((Остаток = 0) И ((Объект.СорнаяПримесь3 - СорнаяПримесьРасхода) = Объект.БалансСора))
			ИЛИ Ключ > 20 Тогда
			Выход = 1;
		КонецЕсли;
		
		Если Объект.СпособРасчетаОтходов3Категории <> 4 Тогда
			Ключ = Ключ + 1;
		Иначе
			Ключ = Ключ + 10;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура СпрогнозироватьВесОтходов(Вес = 0)
	
	Если Объект.СпособРасчетаОтходов3Категории = 2 Тогда
		// рассчитать
		Объект.ПрогнозируемыйВесОтходов3Категории           = 0;
		
		Если Объект.ПрогнозируемаяСорнаяПримесьОтходов3Категории = 0 Тогда
			Объект.ПрогнозируемаяСорнаяПримесьОтходов3Категории = 98; 
		КонецЕсли;
		
		Если Объект.ПрогнозируемаяВлажностьОтходов3Категории = 0 Тогда
			Объект.ПрогнозируемаяВлажностьОтходов3Категории     = Объект.Влажность3;
		КонецЕсли;
		
		Объект.ПрогнозируемыйВесОтходов3Категории           = Окр((Объект.СорнаяПримесь3 - Объект.СорнаяПримесь8 - Объект.БалансСора) * Объект.ФизическийВес3 / Объект.ПрогнозируемаяСорнаяПримесьОтходов3Категории, 0) - Объект.ФизическийВес7;
		
	ИначеЕсли Объект.СпособРасчетаОтходов3Категории = 3 Тогда
		// процентом от веса
		Объект.ПрогнозируемыйВесОтходов3Категории           = 0;
		
		Если Объект.ПрогнозируемыйПроцентОтходов3Категории <> 0 Тогда
			
			Если Объект.ПрогнозируемаяВлажностьОтходов3Категории = 0 Тогда
				Объект.ПрогнозируемаяВлажностьОтходов3Категории     = Объект.Влажность3;
			КонецЕсли;
			
			Если Объект.ПрогнозируемаяСорнаяПримесьОтходов3Категории = 0 Тогда
				Объект.ПрогнозируемаяСорнаяПримесьОтходов3Категории = Объект.СорнаяПримесь7;
			КонецЕсли;
			
			Объект.ПрогнозируемыйВесОтходов3Категории           = Окр(Вес * Объект.ПрогнозируемыйПроцентОтходов3Категории / 100);
			
		Иначе
			
			Объект.ПрогнозируемаяВлажностьПобочныхПродуктов     = 0;
			Объект.ПрогнозируемаяСорнаяПримесьПобочныхПродуктов = 0;
			
		КонецЕсли;
		
	ИначеЕсли Объект.СпособРасчетаОтходов3Категории = 1 Тогда
		
		Объект.ПрогнозируемыйВесОтходов3Категории           = 0;
		Объект.ПрогнозируемаяВлажностьОтходов3Категории     = 0;
		Объект.ПрогнозируемаяСорнаяПримесьОтходов3Категории = 0;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СпрогнозироватьВесПобочныхПродуктов (Вес)
	
	Если Объект.СпособРасчетаПобочногоПродукта = 2 Тогда
		// вес по умолчанию
		
		Если Объект.ПрогнозируемыйВесПобочныхПродуктов <> 0 Тогда
			
			Если Объект.ПрогнозируемаяВлажностьПобочныхПродуктов = 0 Тогда
				Объект.ПрогнозируемаяВлажностьПобочныхПродуктов     = Объект.Влажность3;
			КонецЕсли;
			
			Если Объект.ПрогнозируемаяСорнаяПримесьПобочныхПродуктов = 0 Тогда
				Объект.ПрогнозируемаяСорнаяПримесьПобочныхПродуктов = Объект.СорнаяПримесь41;
			КонецЕсли;
			
		Иначе
			
			Объект.ПрогнозируемаяВлажностьПобочныхПродуктов     = 0;
			Объект.ПрогнозируемаяСорнаяПримесьПобочныхПродуктов = 0;			
			
		КонецЕсли;
		
	ИначеЕсли Объект.СпособРасчетаПобочногоПродукта = 3 Тогда
		// процентом от веса
		Объект.ПрогнозируемыйВесПобочныхПродуктов           = 0;
		
		Если Объект.ПрогнозируемыйПроцентПобочныхПродуктов <> 0 Тогда
			
			Если Объект.ПрогнозируемаяВлажностьПобочныхПродуктов = 0 Тогда
				Объект.ПрогнозируемаяВлажностьПобочныхПродуктов     = Объект.Влажность3;
			КонецЕсли;
			
			Если Объект.ПрогнозируемаяСорнаяПримесьПобочныхПродуктов = 0 Тогда
				Объект.ПрогнозируемаяСорнаяПримесьПобочныхПродуктов = Объект.СорнаяПримесь41;
			КонецЕсли;
			
			Объект.ПрогнозируемыйВесПобочныхПродуктов           = Окр(Вес * Объект.ПрогнозируемыйПроцентПобочныхПродуктов / 100);
			
		Иначе
			
			Объект.ПрогнозируемаяВлажностьПобочныхПродуктов     = 0;
			Объект.ПрогнозируемаяСорнаяПримесьПобочныхПродуктов = 0;
			
		КонецЕсли;
		
	Иначе
		
		Объект.ПрогнозируемыйВесПобочныхПродуктов           = 0;
		Объект.ПрогнозируемаяВлажностьПобочныхПродуктов     = 0;
		Объект.ПрогнозируемаяСорнаяПримесьПобочныхПродуктов = 0;		
		
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДокумент(ПоОборотам = Ложь)
	
	Если НЕ ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;	
	
	ОчиститьФорму();
	ОчиститьУбыли();
	ОчиститьОтходыИПобочныйПродукт();
	
	Объект.НачалоПриход                  = 0; 				
	Объект.ОкончаниеПриход               = 0;
	Объект.НачалоРасход                  = 0; 				
	Объект.ОкончаниеРасход               = 0;
	Объект.НачалоПереоформленияПриход    = 0; 
	Объект.ОкончаниеПереоформленияПриход = 0;
	Объект.НачалоПереоформленияРасход    = 0; 
	Объект.ОкончаниеПереоформленияРасход = 0;
	Объект.НачалоВнутрПриход             = 0; 
	Объект.ОкончаниеВнутрПриход          = 0;
	Объект.НачалоВнутрРасход             = 0; 
	Объект.ОкончаниеВнутрРасход          = 0;
	
	Запрос = Новый Запрос;
	
	Фильтр = Документы.ИНАГРО_АктРасчет310.СформироватьФильтрДокумента(Объект);	
	Фильтр = " ИСТИНА " + Фильтр;
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ИНАГРО_Форма36ОстаткиИОбороты.Период КАК Период,
		|	ЕСТЬNULL(ИНАГРО_Форма36ОстаткиИОбороты.ВесПриходПриход, 0) КАК ВесПриход,
		|	ЕСТЬNULL(ИНАГРО_Форма36ОстаткиИОбороты.ВесПоВлажностиПриходПриход, 0) КАК ВесПоВлажностиПриход,
		|	ЕСТЬNULL(ИНАГРО_Форма36ОстаткиИОбороты.ВесПоСорнойПримесиПриходПриход, 0) КАК ВесПоСорнойПримесиПриход,
		|	ЕСТЬNULL(ВЫБОР
		|			КОГДА ИНАГРО_Форма36ОстаткиИОбороты.ВесПриходПриход > 0
		|				ТОГДА 100 * ИНАГРО_Форма36ОстаткиИОбороты.ВесПоВлажностиПриходПриход / ИНАГРО_Форма36ОстаткиИОбороты.ВесПриходПриход
		|			ИНАЧЕ 0
		|		КОНЕЦ, 0) КАК ВлажностьПриход,
		|	ЕСТЬNULL(ВЫБОР
		|			КОГДА ИНАГРО_Форма36ОстаткиИОбороты.ВесПриходПриход > 0
		|				ТОГДА 100 * ИНАГРО_Форма36ОстаткиИОбороты.ВесПоСорнойПримесиПриходПриход / ИНАГРО_Форма36ОстаткиИОбороты.ВесПриходПриход
		|			ИНАЧЕ 0
		|		КОНЕЦ, 0) КАК СорнаяПримесьПриход,
		|	ЕСТЬNULL(ВЫБОР
		|			КОГДА ИНАГРО_Форма36ОстаткиИОбороты.ВесПриходПриход > 0
		|				ТОГДА 100 * ИНАГРО_Форма36ОстаткиИОбороты.ВесПоЗерновойПримесиПриходПриход / ИНАГРО_Форма36ОстаткиИОбороты.ВесПриходПриход
		|			ИНАЧЕ 0
		|		КОНЕЦ, 0) КАК ЗерноваяПримесьПриход,
		|	ЕСТЬNULL(ИНАГРО_Форма36ОстаткиИОбороты.ВесРасходПриход, 0) КАК ВесРасход,
		|	ЕСТЬNULL(ИНАГРО_Форма36ОстаткиИОбороты.ВесПоВлажностиРасходПриход, 0) КАК ВесПоВлажностиРасход,
		|	ЕСТЬNULL(ИНАГРО_Форма36ОстаткиИОбороты.ВесПоСорнойПримесиРасходПриход, 0) КАК ВесПоСорнойПримесиРасход,
		|	ЕСТЬNULL(ВЫБОР
		|			КОГДА ИНАГРО_Форма36ОстаткиИОбороты.ВесРасходПриход > 0
		|				ТОГДА 100 * ИНАГРО_Форма36ОстаткиИОбороты.ВесПоВлажностиРасходПриход / ИНАГРО_Форма36ОстаткиИОбороты.ВесРасходПриход
		|			ИНАЧЕ 0
		|		КОНЕЦ, 0) КАК ВлажностьРасход,
		|	ЕСТЬNULL(ВЫБОР
		|			КОГДА ИНАГРО_Форма36ОстаткиИОбороты.ВесРасходПриход > 0
		|				ТОГДА 100 * ИНАГРО_Форма36ОстаткиИОбороты.ВесПоСорнойПримесиРасходПриход / ИНАГРО_Форма36ОстаткиИОбороты.ВесРасходПриход
		|			ИНАЧЕ 0
		|		КОНЕЦ, 0) КАК СорнаяПримесьРасход,
		|	ЕСТЬNULL(ВЫБОР
		|			КОГДА ИНАГРО_Форма36ОстаткиИОбороты.ВесРасходПриход > 0
		|				ТОГДА 100 * ИНАГРО_Форма36ОстаткиИОбороты.ВесПоЗерновойПримесиРасходПриход / ИНАГРО_Форма36ОстаткиИОбороты.ВесРасходПриход
		|			ИНАЧЕ 0
		|		КОНЕЦ, 0) КАК ЗерноваяПримесьРасход,
		|	ИНАГРО_Форма36ОстаткиИОбороты.Регистратор.Ссылка КАК Регистратор,
		|	ЕСТЬNULL(ВЫБОР
		|			КОГДА ИНАГРО_Форма36ОстаткиИОбороты.Регистратор В (&РегистраторыПереоформление)
		|				ТОГДА ИНАГРО_Форма36ОстаткиИОбороты.ВесПриходПриход
		|			ИНАЧЕ 0
		|		КОНЕЦ, 0) КАК ВесПриходПереоформление,
		|	ЕСТЬNULL(ВЫБОР
		|			КОГДА ВЫБОР
		|					КОГДА ИНАГРО_Форма36ОстаткиИОбороты.Регистратор В (&РегистраторыПереоформление)
		|						ТОГДА ИНАГРО_Форма36ОстаткиИОбороты.ВесПриходПриход
		|					ИНАЧЕ 0
		|				КОНЕЦ > 0
		|				ТОГДА 100 * ИНАГРО_Форма36ОстаткиИОбороты.ВесПоВлажностиПриходПриход / ИНАГРО_Форма36ОстаткиИОбороты.ВесПриходПриход
		|			ИНАЧЕ 0
		|		КОНЕЦ, 0) КАК ВлажностьПриходПереоформление,
		|	ЕСТЬNULL(ВЫБОР
		|			КОГДА ВЫБОР
		|					КОГДА ИНАГРО_Форма36ОстаткиИОбороты.Регистратор В (&РегистраторыПереоформление)
		|						ТОГДА ИНАГРО_Форма36ОстаткиИОбороты.ВесПриходПриход
		|					ИНАЧЕ 0
		|				КОНЕЦ > 0
		|				ТОГДА 100 * ИНАГРО_Форма36ОстаткиИОбороты.ВесПоСорнойПримесиПриходПриход / ИНАГРО_Форма36ОстаткиИОбороты.ВесПриходПриход
		|			ИНАЧЕ 0
		|		КОНЕЦ, 0) КАК СорнаяПримесьПриходПереоформление,
		|	ЕСТЬNULL(ВЫБОР
		|			КОГДА ИНАГРО_Форма36ОстаткиИОбороты.Регистратор В (&РегистраторыПереоформление)
		|				ТОГДА ИНАГРО_Форма36ОстаткиИОбороты.ВесПоВлажностиПриходПриход
		|			ИНАЧЕ 0
		|		КОНЕЦ, 0) КАК ВесПоВлажностиПриходПереоформление,
		|	ЕСТЬNULL(ВЫБОР
		|			КОГДА ИНАГРО_Форма36ОстаткиИОбороты.Регистратор В (&РегистраторыПереоформление)
		|				ТОГДА ИНАГРО_Форма36ОстаткиИОбороты.ВесПоСорнойПримесиПриходПриход
		|			ИНАЧЕ 0
		|		КОНЕЦ, 0) КАК ВесПоСорнойПримесиПриходПереоформление,
		|	ЕСТЬNULL(ВЫБОР
		|			КОГДА ИНАГРО_Форма36ОстаткиИОбороты.Регистратор В (&РегистраторыПереоформление)
		|				ТОГДА ИНАГРО_Форма36ОстаткиИОбороты.ВесПоЗерновойПримесиПриходПриход
		|			ИНАЧЕ 0
		|		КОНЕЦ, 0) КАК ВесПоЗерновойПримесиПриходПереоформление,
		|	ЕСТЬNULL(ВЫБОР
		|			КОГДА ИНАГРО_Форма36ОстаткиИОбороты.Регистратор В (&РегистраторыПереоформление)
		|				ТОГДА ИНАГРО_Форма36ОстаткиИОбороты.ВесРасходПриход
		|			ИНАЧЕ 0
		|		КОНЕЦ, 0) КАК ВесРасходПереоформление,
		|	ЕСТЬNULL(ВЫБОР
		|			КОГДА ВЫБОР
		|					КОГДА ИНАГРО_Форма36ОстаткиИОбороты.Регистратор В (&РегистраторыПереоформление)
		|						ТОГДА ИНАГРО_Форма36ОстаткиИОбороты.ВесРасходПриход
		|					ИНАЧЕ 0
		|				КОНЕЦ > 0
		|				ТОГДА 100 * ИНАГРО_Форма36ОстаткиИОбороты.ВесПоВлажностиРасходПриход / ИНАГРО_Форма36ОстаткиИОбороты.ВесРасходПриход
		|			ИНАЧЕ 0
		|		КОНЕЦ, 0) КАК ВлажностьРасходПереоформление,
		|	ЕСТЬNULL(ВЫБОР
		|			КОГДА ВЫБОР
		|					КОГДА ИНАГРО_Форма36ОстаткиИОбороты.Регистратор В (&РегистраторыПереоформление)
		|						ТОГДА ИНАГРО_Форма36ОстаткиИОбороты.ВесРасходПриход
		|					ИНАЧЕ 0
		|				КОНЕЦ > 0
		|				ТОГДА 100 * ИНАГРО_Форма36ОстаткиИОбороты.ВесПоСорнойПримесиРасходПриход / ИНАГРО_Форма36ОстаткиИОбороты.ВесРасходПриход
		|			ИНАЧЕ 0
		|		КОНЕЦ, 0) КАК СорнаяПримесьРасходПереоформление,
		|	ЕСТЬNULL(ВЫБОР
		|			КОГДА ИНАГРО_Форма36ОстаткиИОбороты.Регистратор В (&РегистраторыПереоформление)
		|				ТОГДА ИНАГРО_Форма36ОстаткиИОбороты.ВесПоВлажностиРасходПриход
		|			ИНАЧЕ 0
		|		КОНЕЦ, 0) КАК ВесПоВлажностиРасходПереоформление,
		|	ЕСТЬNULL(ВЫБОР
		|			КОГДА ИНАГРО_Форма36ОстаткиИОбороты.Регистратор В (&РегистраторыПереоформление)
		|				ТОГДА ИНАГРО_Форма36ОстаткиИОбороты.ВесПоСорнойПримесиРасходПриход
		|			ИНАЧЕ 0
		|		КОНЕЦ, 0) КАК ВесПоСорнойПримесиРасходПереоформление,
		|	ЕСТЬNULL(ВЫБОР
		|			КОГДА НЕ ИНАГРО_Форма36ОстаткиИОбороты.Регистратор В (&РегистраторыПереоформление)
		|					И НЕ ИНАГРО_Форма36ОстаткиИОбороты.Регистратор В (&РегистраторыФорма34)
		|					И НЕ ИНАГРО_Форма36ОстаткиИОбороты.Регистратор В (&РегистраторыСПеревесом)
		|					И НЕ ИНАГРО_Форма36ОстаткиИОбороты.Регистратор ССЫЛКА Документ.ИНАГРО_ТТНВнутр
		|					И НЕ ИНАГРО_Форма36ОстаткиИОбороты.Регистратор ССЫЛКА Документ.ИНАГРО_РеестрТТНВнутр
		|					И НЕ ИНАГРО_Форма36ОстаткиИОбороты.Регистратор ССЫЛКА Документ.ИНАГРО_Перемещение
		|					И НЕ ИНАГРО_Форма36ОстаткиИОбороты.Регистратор ССЫЛКА Документ.ИНАГРО_АктРаспределения
		|				ТОГДА ИНАГРО_Форма36ОстаткиИОбороты.ВесРасходПриход
		|			ИНАЧЕ 0
		|		КОНЕЦ, 0) КАК ВесРасходРеализация,
		|	ЕСТЬNULL(ВЫБОР
		|			КОГДА ВЫБОР
		|					КОГДА НЕ ИНАГРО_Форма36ОстаткиИОбороты.Регистратор В (&РегистраторыПереоформление)
		|							И НЕ ИНАГРО_Форма36ОстаткиИОбороты.Регистратор В (&РегистраторыФорма34)
		|							И НЕ ИНАГРО_Форма36ОстаткиИОбороты.Регистратор В (&РегистраторыСПеревесом)
		|						ТОГДА ИНАГРО_Форма36ОстаткиИОбороты.ВесРасходПриход
		|					ИНАЧЕ 0
		|				КОНЕЦ > 0
		|				ТОГДА 100 * ИНАГРО_Форма36ОстаткиИОбороты.ВесПоВлажностиРасходПриход / ИНАГРО_Форма36ОстаткиИОбороты.ВесРасходПриход
		|			ИНАЧЕ 0
		|		КОНЕЦ, 0) КАК ВлажностьРасходРеализация,
		|	ЕСТЬNULL(ВЫБОР
		|			КОГДА ВЫБОР
		|					КОГДА НЕ ИНАГРО_Форма36ОстаткиИОбороты.Регистратор В (&РегистраторыПереоформление)
		|							И НЕ ИНАГРО_Форма36ОстаткиИОбороты.Регистратор В (&РегистраторыФорма34)
		|							И НЕ ИНАГРО_Форма36ОстаткиИОбороты.Регистратор В (&РегистраторыСПеревесом)
		|						ТОГДА ИНАГРО_Форма36ОстаткиИОбороты.ВесРасходПриход
		|					ИНАЧЕ 0
		|				КОНЕЦ > 0
		|				ТОГДА 100 * ИНАГРО_Форма36ОстаткиИОбороты.ВесПоСорнойПримесиРасходПриход / ИНАГРО_Форма36ОстаткиИОбороты.ВесРасходПриход
		|			ИНАЧЕ 0
		|		КОНЕЦ, 0) КАК СорнаяПримесьРасходРеализация,
		|	ЕСТЬNULL(ВЫБОР
		|			КОГДА НЕ ИНАГРО_Форма36ОстаткиИОбороты.Регистратор В (&РегистраторыПереоформление)
		|					И НЕ ИНАГРО_Форма36ОстаткиИОбороты.Регистратор В (&РегистраторыФорма34)
		|					И НЕ ИНАГРО_Форма36ОстаткиИОбороты.Регистратор В (&РегистраторыСПеревесом)
		|					И НЕ ИНАГРО_Форма36ОстаткиИОбороты.Регистратор ССЫЛКА Документ.ИНАГРО_ТТНВнутр
		|					И НЕ ИНАГРО_Форма36ОстаткиИОбороты.Регистратор ССЫЛКА Документ.ИНАГРО_РеестрТТНВнутр
		|					И НЕ ИНАГРО_Форма36ОстаткиИОбороты.Регистратор ССЫЛКА Документ.ИНАГРО_Перемещение
		|					И НЕ ИНАГРО_Форма36ОстаткиИОбороты.Регистратор ССЫЛКА Документ.ИНАГРО_АктРаспределения
		|				ТОГДА ИНАГРО_Форма36ОстаткиИОбороты.ВесПоВлажностиРасходПриход
		|			ИНАЧЕ 0
		|		КОНЕЦ, 0) КАК ВесПоВлажностиРасходРеализация,
		|	ЕСТЬNULL(ВЫБОР
		|			КОГДА НЕ ИНАГРО_Форма36ОстаткиИОбороты.Регистратор В (&РегистраторыПереоформление)
		|					И НЕ ИНАГРО_Форма36ОстаткиИОбороты.Регистратор В (&РегистраторыФорма34)
		|					И НЕ ИНАГРО_Форма36ОстаткиИОбороты.Регистратор В (&РегистраторыСПеревесом)
		|					И НЕ ИНАГРО_Форма36ОстаткиИОбороты.Регистратор ССЫЛКА Документ.ИНАГРО_ТТНВнутр
		|					И НЕ ИНАГРО_Форма36ОстаткиИОбороты.Регистратор ССЫЛКА Документ.ИНАГРО_РеестрТТНВнутр
		|					И НЕ ИНАГРО_Форма36ОстаткиИОбороты.Регистратор ССЫЛКА Документ.ИНАГРО_Перемещение
		|					И НЕ ИНАГРО_Форма36ОстаткиИОбороты.Регистратор ССЫЛКА Документ.ИНАГРО_АктРаспределения
		|				ТОГДА ИНАГРО_Форма36ОстаткиИОбороты.ВесПоСорнойПримесиРасходПриход
		|			ИНАЧЕ 0
		|		КОНЕЦ, 0) КАК ВесПоСорнойПримесиРасходРеализация,
		|	ЕСТЬNULL(ИНАГРО_Форма36ОстаткиИОбороты.ВесПоЗерновойПримесиПриходПриход, 0) КАК ВесПоЗерновойПримесиПриход,
		|	ЕСТЬNULL(ИНАГРО_Форма36ОстаткиИОбороты.ВесПоЗерновойПримесиРасходПриход, 0) КАК ВесПоЗерновойПримесиРасход,
		|	ЕСТЬNULL(ИНАГРО_Форма36ОстаткиИОбороты.УбыльВесаПриСушкеПриход, 0) КАК УбыльВесаПриСушке,
		|	0 КАК ВесПриходНачальныйОстаток,
		|	0 КАК ВесПоВлажностиПриходНачальныйОстаток,
		|	0 КАК ВесПоСорнойПримесиПриходНачальныйОстаток,
		|	0 КАК ВесПоЗерновойПримесиПриходНачальныйОстаток,
		|	ВЫБОР
		|		КОГДА НЕ ИНАГРО_Форма36ОстаткиИОбороты.Регистратор В (&РегистраторыПереоформление)
		|				И НЕ ИНАГРО_Форма36ОстаткиИОбороты.Регистратор ССЫЛКА Документ.ИНАГРО_РеестрТТНВнутр
		|				И НЕ ИНАГРО_Форма36ОстаткиИОбороты.Регистратор ССЫЛКА Документ.ИНАГРО_ТТНВнутр
		|				И НЕ ИНАГРО_Форма36ОстаткиИОбороты.Регистратор ССЫЛКА Документ.ИНАГРО_Перемещение
		|			ТОГДА ЕСТЬNULL(ИНАГРО_Форма36ОстаткиИОбороты.ВесПриходПриход, 0)
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК ВесПриходБезПереоформления,
		|	ВЫБОР
		|		КОГДА ИНАГРО_Форма36ОстаткиИОбороты.Регистратор ССЫЛКА Документ.ИНАГРО_РеестрТТНВнутр
		|				ИЛИ ИНАГРО_Форма36ОстаткиИОбороты.Регистратор ССЫЛКА Документ.ИНАГРО_ТТНВнутр
		|				ИЛИ ИНАГРО_Форма36ОстаткиИОбороты.Регистратор ССЫЛКА Документ.ИНАГРО_Перемещение
		|			ТОГДА ЕСТЬNULL(ИНАГРО_Форма36ОстаткиИОбороты.ВесПриходПриход, 0)
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК ВесПриходВнутр,
		|	ЕСТЬNULL(ВЫБОР
		|			КОГДА ИНАГРО_Форма36ОстаткиИОбороты.Регистратор ССЫЛКА Документ.ИНАГРО_РеестрТТНВнутр
		|					ИЛИ ИНАГРО_Форма36ОстаткиИОбороты.Регистратор ССЫЛКА Документ.ИНАГРО_ТТНВнутр
		|					ИЛИ ИНАГРО_Форма36ОстаткиИОбороты.Регистратор ССЫЛКА Документ.ИНАГРО_Перемещение
		|				ТОГДА ИНАГРО_Форма36ОстаткиИОбороты.ВесПоВлажностиПриходПриход
		|			ИНАЧЕ 0
		|		КОНЕЦ, 0) КАК ВесПоВлажностиПриходВнутр,
		|	ЕСТЬNULL(ВЫБОР
		|			КОГДА ИНАГРО_Форма36ОстаткиИОбороты.Регистратор ССЫЛКА Документ.ИНАГРО_РеестрТТНВнутр
		|					ИЛИ ИНАГРО_Форма36ОстаткиИОбороты.Регистратор ССЫЛКА Документ.ИНАГРО_ТТНВнутр
		|					ИЛИ ИНАГРО_Форма36ОстаткиИОбороты.Регистратор ССЫЛКА Документ.ИНАГРО_Перемещение
		|				ТОГДА ИНАГРО_Форма36ОстаткиИОбороты.ВесПоСорнойПримесиПриходПриход
		|			ИНАЧЕ 0
		|		КОНЕЦ, 0) КАК ВесПоСорнойПримесиПриходВнутр,
		|	ЕСТЬNULL(ВЫБОР
		|			КОГДА ИНАГРО_Форма36ОстаткиИОбороты.Регистратор ССЫЛКА Документ.ИНАГРО_РеестрТТНВнутр
		|					ИЛИ ИНАГРО_Форма36ОстаткиИОбороты.Регистратор ССЫЛКА Документ.ИНАГРО_ТТНВнутр
		|					ИЛИ ИНАГРО_Форма36ОстаткиИОбороты.Регистратор ССЫЛКА Документ.ИНАГРО_Перемещение
		|				ТОГДА ИНАГРО_Форма36ОстаткиИОбороты.ВесПоЗерновойПримесиПриходПриход
		|			ИНАЧЕ 0
		|		КОНЕЦ, 0) КАК ВесПоЗерновойПримесиПриходВнутр,
		|	ВЫБОР
		|		КОГДА ИНАГРО_Форма36ОстаткиИОбороты.Регистратор ССЫЛКА Документ.ИНАГРО_РеестрТТНВнутр
		|				ИЛИ ИНАГРО_Форма36ОстаткиИОбороты.Регистратор ССЫЛКА Документ.ИНАГРО_ТТНВнутр
		|				ИЛИ ИНАГРО_Форма36ОстаткиИОбороты.Регистратор ССЫЛКА Документ.ИНАГРО_Перемещение
		|			ТОГДА ЕСТЬNULL(ИНАГРО_Форма36ОстаткиИОбороты.ВесРасходПриход, 0)
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК ВесРасходВнутр,
		|	ЕСТЬNULL(ВЫБОР
		|			КОГДА ИНАГРО_Форма36ОстаткиИОбороты.Регистратор ССЫЛКА Документ.ИНАГРО_РеестрТТНВнутр
		|					ИЛИ ИНАГРО_Форма36ОстаткиИОбороты.Регистратор ССЫЛКА Документ.ИНАГРО_ТТНВнутр
		|					ИЛИ ИНАГРО_Форма36ОстаткиИОбороты.Регистратор ССЫЛКА Документ.ИНАГРО_Перемещение
		|				ТОГДА ИНАГРО_Форма36ОстаткиИОбороты.ВесПоВлажностиРасходПриход
		|			ИНАЧЕ 0
		|		КОНЕЦ, 0) КАК ВесПоВлажностиРасходВнутр,
		|	ЕСТЬNULL(ВЫБОР
		|			КОГДА ИНАГРО_Форма36ОстаткиИОбороты.Регистратор ССЫЛКА Документ.ИНАГРО_РеестрТТНВнутр
		|					ИЛИ ИНАГРО_Форма36ОстаткиИОбороты.Регистратор ССЫЛКА Документ.ИНАГРО_ТТНВнутр
		|					ИЛИ ИНАГРО_Форма36ОстаткиИОбороты.Регистратор ССЫЛКА Документ.ИНАГРО_Перемещение
		|				ТОГДА ИНАГРО_Форма36ОстаткиИОбороты.ВесПоСорнойПримесиРасходПриход
		|			ИНАЧЕ 0
		|		КОНЕЦ, 0) КАК ВесПоСорнойПримесиРасходВнутр,
		|	ВЫБОР
		|		КОГДА НЕ ИНАГРО_Форма36ОстаткиИОбороты.Регистратор В (&РегистраторыПереоформление)
		|				И НЕ ИНАГРО_Форма36ОстаткиИОбороты.Регистратор ССЫЛКА Документ.ИНАГРО_РеестрТТНВнутр
		|				И НЕ ИНАГРО_Форма36ОстаткиИОбороты.Регистратор ССЫЛКА Документ.ИНАГРО_ТТНВнутр
		|				И НЕ ИНАГРО_Форма36ОстаткиИОбороты.Регистратор ССЫЛКА Документ.ИНАГРО_Перемещение
		|			ТОГДА ЕСТЬNULL(ИНАГРО_Форма36ОстаткиИОбороты.ВесПоВлажностиПриходПриход, 0)
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК ВесПоВлажностиПриходБезПереоформления,
		|	ВЫБОР
		|		КОГДА НЕ ИНАГРО_Форма36ОстаткиИОбороты.Регистратор В (&РегистраторыПереоформление)
		|				И НЕ ИНАГРО_Форма36ОстаткиИОбороты.Регистратор ССЫЛКА Документ.ИНАГРО_РеестрТТНВнутр
		|				И НЕ ИНАГРО_Форма36ОстаткиИОбороты.Регистратор ССЫЛКА Документ.ИНАГРО_ТТНВнутр
		|				И НЕ ИНАГРО_Форма36ОстаткиИОбороты.Регистратор ССЫЛКА Документ.ИНАГРО_Перемещение
		|			ТОГДА ЕСТЬNULL(ИНАГРО_Форма36ОстаткиИОбороты.ВесПоСорнойПримесиПриходПриход, 0)
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК ВесПоСорнойПримесиПриходБезПереоформления,
		|	ВЫБОР
		|		КОГДА НЕ ИНАГРО_Форма36ОстаткиИОбороты.Регистратор В (&РегистраторыПереоформление)
		|				И НЕ ИНАГРО_Форма36ОстаткиИОбороты.Регистратор ССЫЛКА Документ.ИНАГРО_РеестрТТНВнутр
		|				И НЕ ИНАГРО_Форма36ОстаткиИОбороты.Регистратор ССЫЛКА Документ.ИНАГРО_ТТНВнутр
		|				И НЕ ИНАГРО_Форма36ОстаткиИОбороты.Регистратор ССЫЛКА Документ.ИНАГРО_Перемещение
		|			ТОГДА ЕСТЬNULL(ИНАГРО_Форма36ОстаткиИОбороты.ВесПоЗерновойПримесиПриходПриход, 0)
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК ВесПоЗерновойПримесиПриходБезПереоформления,
		|	ВЫБОР
		|		КОГДА ИНАГРО_Форма36ОстаткиИОбороты.Регистратор В (&РегистраторыСПеревесом)
		|			ТОГДА ИНАГРО_Форма36ОстаткиИОбороты.ВесРасходПриход
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК ФизическийВесКонОст,
		|	ВЫБОР
		|		КОГДА ИНАГРО_Форма36ОстаткиИОбороты.Регистратор В (&РегистраторыСПеревесом)
		|			ТОГДА ИНАГРО_Форма36ОстаткиИОбороты.ВесПоВлажностиРасходПриход
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК ВесПоВлажностиКонОст,
		|	ВЫБОР
		|		КОГДА ИНАГРО_Форма36ОстаткиИОбороты.Регистратор В (&РегистраторыСПеревесом)
		|			ТОГДА ИНАГРО_Форма36ОстаткиИОбороты.ВесПоСорнойПримесиРасходПриход
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК ВесПоСорнойПримесиКонОст,
		|	ВЫБОР
		|		КОГДА ИНАГРО_Форма36ОстаткиИОбороты.Регистратор В (&РегистраторыСПеревесом)
		|			ТОГДА ИНАГРО_Форма36ОстаткиИОбороты.ВесПоЗерновойПримесиРасходПриход
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК ВесПоЗерновойПримесиКонОст,
		|	ВЫБОР
		|		КОГДА ИНАГРО_Форма36ОстаткиИОбороты.Регистратор В (&РегистраторыСПеревесом)
		|			ТОГДА ИНАГРО_Форма36ОстаткиИОбороты.ВесПриходПриход
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК ВесПриходПеревзвешивание,
		|	ВЫБОР
		|		КОГДА ИНАГРО_Форма36ОстаткиИОбороты.Регистратор В (&РегистраторыСПеревесом)
		|			ТОГДА ИНАГРО_Форма36ОстаткиИОбороты.ВесПоВлажностиПриходПриход
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК ВесПоВлажностиПриходПеревзвешивание,
		|	ВЫБОР
		|		КОГДА ИНАГРО_Форма36ОстаткиИОбороты.Регистратор В (&РегистраторыСПеревесом)
		|			ТОГДА ИНАГРО_Форма36ОстаткиИОбороты.ВесПоСорнойПримесиПриходПриход
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК ВесПоСорнойПримесиПриходПеревзвешивание,
		|	ВЫБОР
		|		КОГДА ИНАГРО_Форма36ОстаткиИОбороты.Регистратор В (&РегистраторыСПеревесом)
		|			ТОГДА ИНАГРО_Форма36ОстаткиИОбороты.ВесПоЗерновойПримесиПриходПриход
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК ВесПоЗерновойПримесиПриходПеревзвешивание
		|ИЗ
		|	РегистрНакопления.ИНАГРО_Форма36.ОстаткиИОбороты(
		|			&Начало,
		|			&Конец,
		|			Регистратор,
		|			,
		|			Организация = &Организация
		|				И &фильтр) КАК ИНАГРО_Форма36ОстаткиИОбороты
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	0,
		|	0,
		|	0,
		|	0,
		|	0,
		|	0,
		|	0,
		|	0,
		|	0,
		|	0,
		|	0,
		|	0,
		|	0,
		|	NULL,
		|	0,
		|	0,
		|	0,
		|	0,
		|	0,
		|	0,
		|	0,
		|	0,
		|	0,
		|	0,
		|	0,
		|	0,
		|	0,
		|	0,
		|	0,
		|	0,
		|	0,
		|	0,
		|	0,
		|	ЕСТЬNULL(ИНАГРО_Форма36ОстаткиИОбороты.ВесПриходНачальныйОстаток, 0),
		|	ЕСТЬNULL(ИНАГРО_Форма36ОстаткиИОбороты.ВесПоВлажностиПриходНачальныйОстаток, 0),
		|	ЕСТЬNULL(ИНАГРО_Форма36ОстаткиИОбороты.ВесПоСорнойПримесиПриходНачальныйОстаток, 0),
		|	ЕСТЬNULL(ИНАГРО_Форма36ОстаткиИОбороты.ВесПоЗерновойПримесиПриходНачальныйОстаток, 0),
		|	0,
		|	0,
		|	0,
		|	0,
		|	0,
		|	0,
		|	0,
		|	0,
		|	0,
		|	0,
		|	0,
		|	0,
		|	0,
		|	0,
		|	0,
		|	0,
		|	0,
		|	0,
		|	0
		|ИЗ
		|	РегистрНакопления.ИНАГРО_Форма36.ОстаткиИОбороты(
		|			&Начало,
		|			&Конец,
		|			Авто,
		|			,
		|			Организация = &Организация
		|				И &фильтр) КАК ИНАГРО_Форма36ОстаткиИОбороты
		|
		|УПОРЯДОЧИТЬ ПО
		|	Период
		|ИТОГИ
		|	СУММА(ВесПриход),
		|	СУММА(ВесПоВлажностиПриход),
		|	СУММА(ВесПоСорнойПримесиПриход),
		|	СУММА(ВлажностьПриход),
		|	СУММА(СорнаяПримесьПриход),
		|	СУММА(ЗерноваяПримесьПриход),
		|	СУММА(ВесРасход),
		|	СУММА(ВесПоВлажностиРасход),
		|	СУММА(ВесПоСорнойПримесиРасход),
		|	СУММА(ВлажностьРасход),
		|	СУММА(СорнаяПримесьРасход),
		|	СУММА(ЗерноваяПримесьРасход),
		|	СУММА(ВесПриходПереоформление),
		|	СУММА(ВлажностьПриходПереоформление),
		|	СУММА(СорнаяПримесьПриходПереоформление),
		|	СУММА(ВесПоВлажностиПриходПереоформление),
		|	СУММА(ВесПоСорнойПримесиПриходПереоформление),
		|	СУММА(ВесПоЗерновойПримесиПриходПереоформление),
		|	СУММА(ВесРасходПереоформление),
		|	СУММА(ВлажностьРасходПереоформление),
		|	СУММА(СорнаяПримесьРасходПереоформление),
		|	СУММА(ВесПоВлажностиРасходПереоформление),
		|	СУММА(ВесПоСорнойПримесиРасходПереоформление),
		|	СУММА(ВесРасходРеализация),
		|	СУММА(ВлажностьРасходРеализация),
		|	СУММА(СорнаяПримесьРасходРеализация),
		|	СУММА(ВесПоВлажностиРасходРеализация),
		|	СУММА(ВесПоСорнойПримесиРасходРеализация),
		|	СУММА(ВесПоЗерновойПримесиПриход),
		|	СУММА(ВесПоЗерновойПримесиРасход),
		|	СУММА(УбыльВесаПриСушке),
		|	СУММА(ВесПриходНачальныйОстаток),
		|	СУММА(ВесПоВлажностиПриходНачальныйОстаток),
		|	СУММА(ВесПоСорнойПримесиПриходНачальныйОстаток),
		|	СУММА(ВесПоЗерновойПримесиПриходНачальныйОстаток),
		|	СУММА(ВесПриходБезПереоформления),
		|	СУММА(ВесПриходВнутр),
		|	СУММА(ВесПоВлажностиПриходВнутр),
		|	СУММА(ВесПоСорнойПримесиПриходВнутр),
		|	СУММА(ВесПоЗерновойПримесиПриходВнутр),
		|	СУММА(ВесРасходВнутр),
		|	СУММА(ВесПоВлажностиРасходВнутр),
		|	СУММА(ВесПоСорнойПримесиРасходВнутр),
		|	СУММА(ВесПоВлажностиПриходБезПереоформления),
		|	СУММА(ВесПоСорнойПримесиПриходБезПереоформления),
		|	СУММА(ВесПоЗерновойПримесиПриходБезПереоформления),
		|	СУММА(ФизическийВесКонОст),
		|	СУММА(ВесПоВлажностиКонОст),
		|	СУММА(ВесПоСорнойПримесиКонОст),
		|	СУММА(ВесПоЗерновойПримесиКонОст),
		|	СУММА(ВесПриходПеревзвешивание),
		|	СУММА(ВесПоВлажностиПриходПеревзвешивание),
		|	СУММА(ВесПоСорнойПримесиПриходПеревзвешивание),
		|	СУММА(ВесПоЗерновойПримесиПриходПеревзвешивание)
		|ПО
		|	ОБЩИЕ";
	
	Запрос.УстановитьПараметр("Начало",                     Новый Граница(Объект.ДатаНачала, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("Конец",                      Новый Граница(Объект.ДатаОкончания, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("Организация",                Объект.Организация);	
	Запрос.УстановитьПараметр("Владелец",                   Объект.Владелец);
	Запрос.УстановитьПараметр("Договор",                    Объект.ДоговорКонтрагента);
	Запрос.УстановитьПараметр("Склад",                      Объект.Склад);
	Если НЕ НеВестиУчетПоВидуХраненияВККУ Тогда
		Запрос.УстановитьПараметр("ВидХранения", Объект.ВидХранения);
	КонецЕсли;	                                            
	Запрос.УстановитьПараметр("Номенклатура",               Объект.Номенклатура);
	Запрос.УстановитьПараметр("Урожай",                     Объект.Урожай);
	Запрос.УстановитьПараметр("РегистраторыПереоформление", РегистраторыПереоформление(Объект.Ссылка));
	Запрос.УстановитьПараметр("РегистраторыФорма34",        ИНАГРО_Элеватор.РегистраторыФорма34(Объект.Ссылка));
	Запрос.УстановитьПараметр("РегистраторыСПеревесом",     ИНАГРО_Элеватор.РегистраторыСПеревесом(Объект.Ссылка));
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&фильтр", Фильтр);
	
	ВыборкаОбщие = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);	
	
	Если ВыборкаОбщие.Количество() > 0 Тогда
		
		Пока ВыборкаОбщие.Следующий() Цикл
			
			// начальный остаток
			ОстатокЕсть = Ложь;
			ВыборкаНачальныйОстаток              = ВыборкаОбщие.Выбрать();
			ВесПоВлажностиНачальныйОстаток       = 0;
			ВесПоСорнойПримесиНачальныйОстаток   = 0;
			ВесПоЗерновойПримесиНачальныйОстаток = 0;
			
			Если НЕ ПоОборотам Тогда
				
				ВесПоВлажностиНачальныйОстаток        = ВыборкаОбщие.ВесПоВлажностиПриходНачальныйОстаток;
				ВесПоСорнойПримесиНачальныйОстаток    = ВыборкаОбщие.ВесПоСорнойПримесиПриходНачальныйОстаток;
				ВесПоЗерновойПримесиНачальныйОстаток  = ВыборкаОбщие.ВесПоЗерновойПримесиПриходНачальныйОстаток;
				// вес остаток						
				Объект.ОстатокНаНачало                = ВыборкаОбщие.ВесПриходНачальныйОстаток;						
				Объект.ВлажностьОстаткаНаНачало       = ИНАГРО_Элеватор.Процент(ВыборкаОбщие.ВесПриходНачальныйОстаток, ВесПоВлажностиНачальныйОстаток, 2);
				Объект.СорнаяПримесьОстаткаНаНачало   = ИНАГРО_Элеватор.Процент(ВыборкаОбщие.ВесПриходНачальныйОстаток, ВесПоСорнойПримесиНачальныйОстаток, 2);
				Объект.ЗерноваяПримесьОстаткаНаНачало = ИНАГРО_Элеватор.Процент(ВыборкаОбщие.ВесПриходНачальныйОстаток, ВесПоЗерновойПримесиНачальныйОстаток, 2);				
				
			КонецЕсли;
			
			// Вес приход по перевзвешиванию
			
			//ВСЕГО ПРИХОД
			Объект.ФизическийВес3                          = ВыборкаОбщие.ВесПриход + Объект.ОстатокНаНачало;
			Объект.Влажность3                              = ИНАГРО_Элеватор.Процент(Объект.ФизическийВес3, ВыборкаОбщие.ВесПоВлажностиПриход + ВесПоВлажностиНачальныйОстаток, 2);
			Объект.СорнаяПримесь3                          = ИНАГРО_Элеватор.Процент(Объект.ФизическийВес3, ВыборкаОбщие.ВесПоСорнойПримесиПриход + ВесПоСорнойПримесиНачальныйОстаток, 2);
			Объект.ЗерноваяПримесь3                        = ИНАГРО_Элеватор.Процент(Объект.ФизическийВес3, ВыборкаОбщие.ВесПоЗерновойПримесиПриход + ВесПоЗерновойПримесиНачальныйОстаток, 2);
			
			// вес приход
			Объект.ФизическийВесПриход                     = ВыборкаОбщие.ВесПриходБезПереоформления;
			Объект.ВлажностьФизическийВесПриход            = ИНАГРО_Элеватор.Процент(ВыборкаОбщие.ВесПриходБезПереоформления, ВыборкаОбщие.ВесПоВлажностиПриходБезПереоформления, 2);
			Объект.СорнаяПримесьФизическийВесПриход        = ИНАГРО_Элеватор.Процент(ВыборкаОбщие.ВесПриходБезПереоформления, ВыборкаОбщие.ВесПоСорнойПримесиПриходБезПереоформления, 2);
			Объект.ЗерноваяПримесьФизическийВесПриход      = ИНАГРО_Элеватор.Процент(ВыборкаОбщие.ВесПриходБезПереоформления, ВыборкаОбщие.ВесПоЗерновойПримесиПриходБезПереоформления, 2);			
			
			// приход Переоформление
			Объект.ФизическийВесПереоформленияПриход       = ВыборкаОбщие.ВесПриходПереоформление;
			Объект.ВлажностьПереоформленияПриход           = ?(ВыборкаОбщие.ВесПриходПереоформление > 0, 100 * ВыборкаОбщие.ВесПоВлажностиПриходПереоформление / ВыборкаОбщие.ВесПриходПереоформление, 0);
			Объект.СорнаяПримесьПереоформленияПриход       = ?(ВыборкаОбщие.ВесПриходПереоформление > 0, 100 * ВыборкаОбщие.ВесПоСорнойПримесиПриходПереоформление / ВыборкаОбщие.ВесПриходПереоформление, 0);
			Объект.ЗерноваяПримесьПереоформленияПриход     = ?(ВыборкаОбщие.ВесПриходПереоформление > 0, 100 * ВыборкаОбщие.ВесПоЗерновойПримесиПриходПереоформление / ВыборкаОбщие.ВесПриходПереоформление, 0);
			
			// приход внутр
			Объект.ФизическийВесВнутрПриход                = ВыборкаОбщие.ВесПриходВнутр;
			Объект.ВлажностьВнутрПриход                    = ИНАГРО_Элеватор.Процент(ВыборкаОбщие.ВесПриходВнутр, ВыборкаОбщие.ВесПоВлажностиПриходВнутр);			
			Объект.СорнаяПримесьВнутрПриход                = ИНАГРО_Элеватор.Процент(ВыборкаОбщие.ВесПриходВнутр, ВыборкаОбщие.ВесПоСорнойПримесиПриходВнутр);			
			Объект.ЗерноваяПримесьВнутрПриход              = ИНАГРО_Элеватор.Процент(ВыборкаОбщие.ВесПриходВнутр, ВыборкаОбщие.ВесПоЗерновойПримесиПриходВнутр);			
			
			// Расход внутр
			Объект.ФизическийВесВнутрРасход                = ВыборкаОбщие.ВесРасходВнутр;
			Объект.ВлажностьВнутрРасход                    = ИНАГРО_Элеватор.Процент(ВыборкаОбщие.ВесРасходВнутр, ВыборкаОбщие.ВесПоВлажностиРасходВнутр);			
			Объект.СорнаяПримесьВнутрРасход                = ИНАГРО_Элеватор.Процент(ВыборкаОбщие.ВесРасходВнутр, ВыборкаОбщие.ВесПоСорнойПримесиРасходВнутр);						
			
			// вес расход
			Объект.ФизическийВес4                          = ВыборкаОбщие.ВесРасход;
			Объект.ВесПоВлажностиРасход                    = ВыборкаОбщие.ВесПоВлажностиРасход;
			Объект.ВесПоСорнойПримесиРасход                = ВыборкаОбщие.ВесПоСорнойПримесиРасход;
			Объект.Влажность4                              = ?(ВыборкаОбщие.ВесРасход > 0, 100 * ВыборкаОбщие.ВесПоВлажностиРасход / ВыборкаОбщие.ВесРасход, 0);
			Объект.СорнаяПримесь4                          = ?(ВыборкаОбщие.ВесРасход > 0, 100 * ВыборкаОбщие.ВесПоСорнойПримесиРасход / ВыборкаОбщие.ВесРасход, 0);
			Объект.ЗерноваяПримесь4                        = ?(ВыборкаОбщие.ВесРасход > 0, 100 * ВыборкаОбщие.ВесПоЗерновойПримесиРасход / ВыборкаОбщие.ВесРасход, 0);
			
			// вес расход Переоформление
			Объект.ФизическийВесПереоформленияРасход       = ВыборкаОбщие.ВесРасходПереоформление;
			Объект.ВлажностьПереоформленияРасход           = ?(ВыборкаОбщие.ВесРасходПереоформление >0, 100 * ВыборкаОбщие.ВесПоВлажностиРасходПереоформление / ВыборкаОбщие.ВесРасходПереоформление, 0);
			Объект.СорнаяПримесьПереоформленияРасход       = ?(ВыборкаОбщие.ВесРасходПереоформление >0, 100 * ВыборкаОбщие.ВесПоСорнойПримесиРасходПереоформление / ВыборкаОбщие.ВесРасходПереоформление, 0);
			
			// вес расход реализация
			Объект.ФизическийВес11                         = ВыборкаОбщие.ВесРасходРеализация;
			Объект.Влажность11                             = ?(ВыборкаОбщие.ВесРасходРеализация > 0, 100 * ВыборкаОбщие.ВесПоВлажностиРасходРеализация / ВыборкаОбщие.ВесРасходРеализация, 0);
			Объект.СорнаяПримесь11                         = ?(ВыборкаОбщие.ВесРасходРеализация > 0, 100 * ВыборкаОбщие.ВесПоСорнойПримесиРасходРеализация / ВыборкаОбщие.ВесРасходРеализация, 0);
			
			Объект.ОстатокПоПеревзвешиванию                = ВыборкаОбщие.ФизическийВесКонОст;
			Объект.ВлажностьОстатокПоПеревзвешиванию       = ИНАГРО_Элеватор.Процент(ВыборкаОбщие.ФизическийВесКонОст, ВыборкаОбщие.ВесПоВлажностиКонОст);
			Объект.СорнаяПримесьОстатокПоПеревзвешиванию   = ИНАГРО_Элеватор.Процент(ВыборкаОбщие.ФизическийВесКонОст, ВыборкаОбщие.ВесПоСорнойПримесиКонОст);
			Объект.ЗерноваяПримесьОстатокПоПеревзвешиванию = ИНАГРО_Элеватор.Процент(ВыборкаОбщие.ФизическийВесКонОст, ВыборкаОбщие.ВесПоЗерновойПримесиКонОст);
			
			// этап 2
			РассчитатьСнижениеВлажности();			
			РассчитатьСнижениеСорнойПримеси();
			
			тмцКонОст = 0; // ВыборкаОбщие.ВесНачальныйОстаток;
			тмцПриход = 0;
			д1        = Объект.ДатаНачала;
			в1        = тмцКонОст;
			ТДни      = 0;
			СДни      = 0;
			
			Объект.ДвиженияДокумента.Очистить();
			
			ВыборкаРег = ВыборкаОбщие.Выбрать();
			
			Пока ВыборкаРег.Следующий() Цикл					
				
				Если ВыборкаРег.Регистратор <> Null Тогда
					НоваяСтрока = Объект.ДвиженияДокумента.Добавить();
					НоваяСтрока.Документ        = ВыборкаРег.Регистратор;
					НоваяСтрока.ВесПриход       = ВыборкаРег.ВесПриход;
					НоваяСтрока.ВесРасход       = ВыборкаРег.ВесРасход;
					НоваяСтрока.Влажность       = ?(ВыборкаРег.ВлажностьПриход > 0, ВыборкаРег.ВлажностьПриход, ВыборкаРег.ВлажностьРасход);
					НоваяСтрока.СорнаяПримесь   = ?(ВыборкаРег.СорнаяПримесьПриход > 0, ВыборкаРег.СорнаяПримесьПриход, ВыборкаРег.СорнаяПримесьРасход);
					НоваяСтрока.ЗерноваяПримесь = ?(ВыборкаРег.ЗерноваяПримесьПриход > 0, ВыборкаРег.ЗерноваяПримесьПриход, ВыборкаРег.ЗерноваяПримесьРасход);					
					Попытка
						НоваяСтрока.УбыльВесаПриСушке = ВыборкаРег.УбыльВесаПриСушке;
					Исключение
					КонецПопытки;
					
					тмцКонОст = тмцКонОст + ВыборкаРег.ВесПриход - ВыборкаРег.ВесРасход;
					д2        = ВыборкаРег.Регистратор.Дата;
					в2        = тмцКонОст;                                        
					ТДни      = ТДни + в1 * (НачалоДня(д2) - НачалоДня(д1)) / 86400;
					д1        = д2;
					в1        = в2;
					
					// Дата начала конца ПРИХОДА
					Если ВыборкаРег.ВесПриходБезПереоформления<>0 Тогда
						// вне зависимости от вида документа
						Если Объект.НачалоПриход = Дата('00010101') Тогда
							Объект.НачалоПриход = ВыборкаРег.Регистратор.Дата;
						КонецЕсли;
						Объект.ОкончаниеПриход = ВыборкаРег.Регистратор.Дата;
					КонецЕсли;
					
					// Дата начала конца РАСХОДА
					Если ВыборкаРег.ВесРасходРеализация<>0 Тогда
						// вне зависимости от вида документа
						Если Объект.НачалоРасход = Дата('00010101') Тогда
							Объект.НачалоРасход = ВыборкаРег.Регистратор.Дата;
						КонецЕсли;
						Объект.ОкончаниеРасход = ВыборкаРег.Регистратор.Дата;
					КонецЕсли;										
					
					// Дата начала конца ПЕРЕОФОРМЛЕНИЯ ПО ПРИХОДУ					
					Если ВыборкаРег.ВесПриходПереоформление<>0 Тогда
						// вне зависимости от вида документа
						Если Объект.НачалоПереоформленияПриход = Дата('00010101') Тогда
							Объект.НачалоПереоформленияПриход = ВыборкаРег.Регистратор.Дата;
						КонецЕсли;
						Объект.ОкончаниеПереоформленияПриход = ВыборкаРег.Регистратор.Дата;
					КонецЕсли;					
					
					// Дата начала конца ПЕРЕОФОРМЛЕНИЯ ПО РАСХОДУ
					Если ВыборкаРег.ВесРасходПереоформление<>0 Тогда
						// вне зависимости от вида документа
						Если Объект.НачалоПереоформленияРасход = Дата('00010101') Тогда
							Объект.НачалоПереоформленияРасход = ВыборкаРег.Регистратор.Дата;
						КонецЕсли;
						Объект.ОкончаниеПереоформленияРасход = ВыборкаРег.Регистратор.Дата;
					КонецЕсли;					
					
					// Дата начала конца ВНУТР ПО ПРИХОДУ					
					Если ВыборкаРег.ВесПриходВнутр<>0 Тогда
						// вне зависимости от вида документа
						Если Объект.НачалоВнутрПриход = Дата('00010101') Тогда
							Объект.НачалоВнутрПриход = ВыборкаРег.Регистратор.Дата;
						КонецЕсли;
						Объект.ОкончаниеВнутрПриход = ВыборкаРег.Регистратор.Дата;
					КонецЕсли;					
					
					// Дата начала конца Внутр ПО РАСХОДУ
					Если ВыборкаРег.ВесРасходВнутр<>0 Тогда
						// вне зависимости от вида документа
						Если Объект.НачалоВнутрРасход = Дата('00010101') Тогда
							Объект.НачалоВнутрРасход = ВыборкаРег.Регистратор.Дата;
						КонецЕсли;
						Объект.ОкончаниеВнутрРасход = ВыборкаРег.Регистратор.Дата;
					КонецЕсли;					
					
					Если ТипЗнч(ВыборкаРег.Регистратор) = Тип("ДокументСсылка.ИНАГРО_АктРасчет310") Тогда
						ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='За указанный период уже выполнялся ""%1""';uk='За вказаний період вже виконувався ""%1""'"), ВыборкаРег.Регистратор.Ссылка);
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);		
					КонецЕсли;
					
				КонецЕсли;				
				
			КонецЦикла;
			
			д2   = Объект.ДатаОкончания;
			в2   = тмцКонОст;
			ТДни = ТДни + в1 * (НачалоДня(д2) - НачалоДня(д1) + 1) / 86400;
			
			Если Объект.ФизическийВес3 <> 0 Тогда
				СрокХранения               = Окр(ТДни / Объект.ФизическийВес3);
				Объект.СрокХраненияМесяцев = Цел(СрокХранения / 30);
				Объект.СрокХраненияДней    = СрокХранения - Объект.СрокХраненияМесяцев * 30;
			Иначе
				СрокХранения               = 0;
				Объект.СрокХраненияМесяцев = 0;
				Объект.СрокХраненияДней    = 0;
			КонецЕсли;
			
			Объект.УбыльЕстественная = ИНАГРО_Элеватор.ПолучитьПроцентЕстественнойУбыли(Объект.Дата, Объект.Номенклатура, СрокХранения, Объект.СпособХранения, Объект.Склад);
			УбыльЕстественнаяПриИзмененииНаСервере();			
			
			Объект.УбыльПрочая       = 0; //0.2;
			УбыльПрочаяПриИзмененииНаСервере();
			
			УбыльВсего();
			ПовышениеВсего();
			
		КонецЦикла;
		
	Иначе
		
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='У владельца %1 за период %2 - %3 с видом хранения %4 с урожаем %5 на складе %6 нет такой номенклатуры: %7';uk='У власника %1 за період %2 - %3 з видом зберігання %4 з урожаєм %5 на складі %6 немає такої номенклатури: %7'"),
																					  Объект.Владелец, Объект.ДатаНачала, Объект.ДатаОкончания, Объект.ВидХранения, Объект.Урожай, Объект.Склад, Объект.Номенклатура);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);

	КонецЕсли;
	
	РассчитатьОтходыИПобочныйПродукт();
	
	ПодобратьОстаток();
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьФорму()
	
	//
	Объект.ФизическийВес3                      = 0; 
	Объект.Влажность3                          = 0; 
	Объект.СорнаяПримесь3                      = 0; 
	Объект.ЗерноваяПримесь3                    = 0;
	Объект.ОстатокНаНачало                     = 0; 
	Объект.ВлажностьОстаткаНаНачало            = 0; 
	Объект.СорнаяПримесьОстаткаНаНачало        = 0; 
	Объект.ЗерноваяПримесьОстаткаНаНачало      = 0;
	Объект.ФизическийВесПриход                 = 0; 
	Объект.ВлажностьФизическийВесПриход        = 0; 
	Объект.СорнаяПримесьФизическийВесПриход    = 0; 
	Объект.ЗерноваяПримесьФизическийВесПриход  = 0;
	Объект.ФизическийВесПереоформленияПриход   = 0; 
	Объект.ВлажностьПереоформленияПриход       = 0; 
	Объект.СорнаяПримесьПереоформленияПриход   = 0; 
	Объект.ЗерноваяПримесьПереоформленияПриход = 0;
	Объект.ФизическийВесВнутрПриход            = 0; 
	Объект.ВлажностьВнутрПриход                = 0; 
	Объект.СорнаяПримесьВнутрПриход            = 0; 
	Объект.ЗерноваяПримесьВнутрПриход          = 0;	
	//
	Объект.ФизическийВес4                      = 0; 
	Объект.Влажность4                          = 0; 
	Объект.СорнаяПримесь4                      = 0; 
	Объект.ЗерноваяПримесь4                    = 0;
	Объект.ФизическийВес41                     = 0; 
	Объект.Влажность41                         = 0; 
	Объект.СорнаяПримесь41                     = 0;
	Объект.ФизическийВес5                      = 0; 
	Объект.Влажность5                          = 0; 
	Объект.СорнаяПримесь5                      = 0;
	Объект.ФизическийВес6                      = 0; 
	Объект.Влажность6                          = 0; 
	Объект.СорнаяПримесь6                      = 0;
	Объект.ФизическийВес7                      = 0; 
	Объект.Влажность7                          = 0; 
	Объект.СорнаяПримесь7                      = 0;
	Объект.ФизическийВес11                     = 0; 
	Объект.Влажность11                         = 0; 
	Объект.СорнаяПримесь11                     = 0;
	Объект.ФизическийВесПереоформленияРасход   = 0; 
	Объект.ВлажностьПереоформленияРасход       = 0; 
	Объект.СорнаяПримесьПереоформленияРасход   = 0;
		
КонецПроцедуры

&НаСервере
Процедура ОчиститьУбыли()
	
	Объект.УбыльВлажности       = 0;
	Объект.УбыльПоВлажности     = 0;
	
	Объект.УбыльСорнойПримеси   = 0;
	Объект.УбыльПоСорнойПримеси = 0;
	
	Объект.УбыльПрочая          = 0;
	Объект.УбыльПоПрочей        = 0;
	
	Объект.УбыльПоЕстественной  = 0;
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьОтходыИПобочныйПродукт ()
	
	// побочный продукт
	Объект.ФизическийВес41 = 0;
	Объект.Влажность41     = 0;
	Объект.СорнаяПримесь41 = 0;
	
	// отходы 1 категории
	Объект.ФизическийВес5  = 0;
	Объект.Влажность5      = 0;
	Объект.СорнаяПримесь5  = 0;
	
	// отходы 2 категории
	Объект.ФизическийВес6  = 0;
	Объект.Влажность6      = 0;
	Объект.СорнаяПримесь6  = 0;
	
	// отходы 3 категории
	Объект.ФизическийВес7  = 0;
	Объект.Влажность7      = 0;
	Объект.СорнаяПримесь7  = 0;
	
КонецПроцедуры

&НаСервере
Функция РегистраторыПереоформление(Ссылка)
	
	Запрос = Новый запрос;
		
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ИНАГРО_Переоформление.Ссылка
		|ИЗ
		|	Документ.ИНАГРО_Переоформление КАК ИНАГРО_Переоформление
		|ГДЕ
		|	ИНАГРО_Переоформление.Дата МЕЖДУ &ДатаНач И &ДатаКон";
	
	Запрос.УстановитьПараметр("ДатаНач", Объект.ДатаНачала);
	Запрос.УстановитьПараметр("ДатаКон", Объект.ДатаОкончания);

	Выборка = Запрос.Выполнить().Выгрузить();
	
	Массив = Новый Массив(1);
	Массив = Выборка.ВыгрузитьКолонку("Ссылка");
	
	РегистраторыПереоформление = Новый СписокЗначений;
	РегистраторыПереоформление.ЗагрузитьЗначения(Массив);
	
	Возврат РегистраторыПереоформление;
	
КонецФункции

&НаСервере
Процедура РассчитатьОтходыИПобочныйПродукт()
	
	Запрос = Новый Запрос;		
	
	Фильтр = "";	

	Если ЗначениеЗаполнено(Объект.Владелец) Тогда
		Фильтр = Фильтр + " И ИНАГРО_Форма36.Владелец=&Владелец ";
	КонецЕсли;	
	Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		Фильтр = Фильтр + " И ИНАГРО_Форма36.Договор=&ДоговорКонтрагента ";
	КонецЕсли;
	Если ЗначениеЗаполнено(Объект.Склад) Тогда
		Фильтр = Фильтр + " И ИНАГРО_Форма36.Склад=&Склад ";
	КонецЕсли;
	Если НЕ НеВестиУчетПоВидуХраненияВККУ Тогда
		Если ЗначениеЗаполнено(Объект.ВидХранения) Тогда
			Фильтр = Фильтр + " И ИНАГРО_Форма36.ВидХранения=&ВидХранения ";
		КонецЕсли;
	КонецЕсли;
	Если ЗначениеЗаполнено(Объект.Номенклатура) Тогда
		Фильтр = Фильтр + " И ИНАГРО_Форма36.Номенклатура=&Номенклатура ";
	КонецЕсли;	
	Если ЗначениеЗаполнено(Объект.Урожай) Тогда
		Фильтр = Фильтр + " И ИНАГРО_Форма36.Урожай=&Урожай ";
	КонецЕсли;
	Если Объект.ДатаНачала <> '00010101000000' И Объект.ДатаОкончания <> '00010101000000' Тогда
		Фильтр = Фильтр + " И ИНАГРО_Форма36.Период >= &ДатаНач ";
		Фильтр = Фильтр + " И ИНАГРО_Форма36.Период <= &ДатаКон ";
	ИначеЕсли Объект.ДатаНачала <> '00010101000000' Тогда
		Фильтр = Фильтр + " И ИНАГРО_Форма36.Период >= &ДатаНач ";
	ИначеЕсли Объект.ДатаОкончания <> '00010101000000' Тогда
		Фильтр = Фильтр + " И ИНАГРО_Форма36.Период <= &ДатаКон ";
	КонецЕсли;	
	
	ФильтрРегистраторов = "И ИНАГРО_Форма36.Регистратор.Дата МЕЖДУ &ДатаНач И &ДатаКон
	|	И (ИНАГРО_Форма36.Регистратор ССЫЛКА Документ.ИНАГРО_Форма34Сводная
	|	ИЛИ ИНАГРО_Форма36.Регистратор ССЫЛКА Документ.ИНАГРО_АктРаспределения)";		
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА ИНАГРО_Форма36.КодРасхода = &Кат1
		|			ТОГДА ЕСТЬNULL(ИНАГРО_Форма36.ВесРасход, 0)
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК ФизическийВесОтходы1Категории,
		|	ВЫБОР
		|		КОГДА ИНАГРО_Форма36.КодРасхода = &Кат2
		|			ТОГДА ЕСТЬNULL(ИНАГРО_Форма36.ВесРасход, 0)
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК ФизическийВесОтходы2Категории,
		|	ВЫБОР
		|		КОГДА ИНАГРО_Форма36.КодРасхода = &Кат3
		|			ТОГДА ЕСТЬNULL(ИНАГРО_Форма36.ВесРасход, 0)
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК ФизическийВесОтходы3Категории,
		|	ВЫБОР
		|		КОГДА ИНАГРО_Форма36.КодРасхода = &Побочный
		|			ТОГДА ЕСТЬNULL(ИНАГРО_Форма36.ВесРасход, 0)
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК ФизическийВесПобочногоПродукта,
		|	ВЫБОР
		|		КОГДА ИНАГРО_Форма36.КодРасхода = &Кат1
		|			ТОГДА ЕСТЬNULL(ИНАГРО_Форма36.ВесПоВлажностиРасход, 0)
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК ВесПоВлажности1Категории,
		|	ВЫБОР
		|		КОГДА ИНАГРО_Форма36.КодРасхода = &Кат1
		|			ТОГДА ЕСТЬNULL(ИНАГРО_Форма36.ВесПоСорнойПримесиРасход, 0)
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК ВесПоСорнойПримеси1Категории,
		|	ВЫБОР
		|		КОГДА ИНАГРО_Форма36.КодРасхода = &Кат2
		|			ТОГДА ЕСТЬNULL(ИНАГРО_Форма36.ВесПоВлажностиРасход, 0)
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК ВесПоВлажности2Категории,
		|	ВЫБОР
		|		КОГДА ИНАГРО_Форма36.КодРасхода = &Кат2
		|			ТОГДА ЕСТЬNULL(ИНАГРО_Форма36.ВесПоСорнойПримесиРасход, 0)
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК ВесПоСорнойПримеси2Категории,
		|	ВЫБОР
		|		КОГДА ИНАГРО_Форма36.КодРасхода = &Кат3
		|			ТОГДА ЕСТЬNULL(ИНАГРО_Форма36.ВесПоВлажностиРасход, 0)
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК ВесПоВлажности3Категории,
		|	ВЫБОР
		|		КОГДА ИНАГРО_Форма36.КодРасхода = &Кат3
		|			ТОГДА ЕСТЬNULL(ИНАГРО_Форма36.ВесПоСорнойПримесиРасход, 0)
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК ВесПоСорнойПримеси3Категории,
		|	ВЫБОР
		|		КОГДА ИНАГРО_Форма36.КодРасхода = &Побочный
		|			ТОГДА ЕСТЬNULL(ИНАГРО_Форма36.ВесПоВлажностиРасход, 0)
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК ВесПоВлажностиПобочногоПродукта,
		|	ВЫБОР
		|		КОГДА ИНАГРО_Форма36.КодРасхода = &Побочный
		|			ТОГДА ЕСТЬNULL(ИНАГРО_Форма36.ВесПоСорнойПримесиРасход, 0)
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК ВесПоСорнойПримесиПобочногоПродукта,
		|	ИНАГРО_Форма36.Регистратор.Ссылка КАК Регистратор
		|ИЗ
		|	РегистрНакопления.ИНАГРО_Форма36 КАК ИНАГРО_Форма36
		|ГДЕ
		|	ИНАГРО_Форма36.Организация = &Организация
		|" + ФильтрРегистраторов + Фильтр + "
		|ИТОГИ
		|	СУММА(ФизическийВесОтходы1Категории),
		|	СУММА(ФизическийВесОтходы2Категории),
		|	СУММА(ФизическийВесОтходы3Категории),
		|	СУММА(ФизическийВесПобочногоПродукта),
		|	СУММА(ВесПоВлажности1Категории),
		|	СУММА(ВесПоСорнойПримеси1Категории),
		|	СУММА(ВесПоВлажности2Категории),
		|	СУММА(ВесПоСорнойПримеси2Категории),
		|	СУММА(ВесПоВлажности3Категории),
		|	СУММА(ВесПоСорнойПримеси3Категории),
		|	СУММА(ВесПоВлажностиПобочногоПродукта),
		|	СУММА(ВесПоСорнойПримесиПобочногоПродукта)
		|ПО
		|	ОБЩИЕ,
		|	Регистратор";
	
	Запрос.УстановитьПараметр("ДатаНач",            Объект.ДатаНачала);
	Запрос.УстановитьПараметр("ДатаКон",            Объект.ДатаОкончания);
	Запрос.УстановитьПараметр("Организация",        Объект.Организация);
	Запрос.УстановитьПараметр("Владелец",           Объект.Владелец); 	
	Запрос.УстановитьПараметр("ДоговорКонтрагента", Объект.ДоговорКонтрагента);	
	Запрос.УстановитьПараметр("Склад",              Объект.Склад);	
	Если НЕ НеВестиУчетПоВидуХраненияВККУ Тогда
		Запрос.УстановитьПараметр("ВидХранения",    Объект.ВидХранения);
	КонецЕсли;
	Запрос.УстановитьПараметр("Номенклатура",       Объект.Номенклатура);
	Запрос.УстановитьПараметр("Урожай",             Объект.Урожай);
	Запрос.УстановитьПараметр("Кат1",               Перечисления.ИНАГРО_КодыРасхода.Кат1);		
	Запрос.УстановитьПараметр("Кат2",               Перечисления.ИНАГРО_КодыРасхода.Кат2);		
	Запрос.УстановитьПараметр("Кат3",               Перечисления.ИНАГРО_КодыРасхода.Кат3);		
	Запрос.УстановитьПараметр("Побочный",           Перечисления.ИНАГРО_КодыРасхода.Побочный);	
	
	рез = Запрос.Выполнить().Выгрузить();
	
	Фильтр = "";
	
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		Фильтр = Фильтр + " И ИНАГРО_Форма34СводнаяРасчетПоВладельцам.Ссылка.Организация=&Организация ";
	КонецЕсли;
	Если ЗначениеЗаполнено(Объект.Владелец) Тогда
		Фильтр = Фильтр + " И ИНАГРО_Форма34СводнаяРасчетПоВладельцам.Владелец=&Владелец ";
	КонецЕсли;
	Если НЕ НеВестиУчетПоВидуХраненияВККУ Тогда
		Если ЗначениеЗаполнено(Объект.ВидХранения) Тогда
			Фильтр = Фильтр + " И ИНАГРО_Форма34СводнаяРасчетПоВладельцам.ВидХранения=&ВидХранения ";
		КонецЕсли;
	КонецЕсли;
	Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		Фильтр = Фильтр + " И ИНАГРО_Форма34СводнаяРасчетПоВладельцам.ДоговорКонтрагента=&ДоговорКонтрагента ";
	КонецЕсли;
	Если ЗначениеЗаполнено(Объект.Склад) Тогда
		Фильтр = Фильтр + " И ИНАГРО_Форма34СводнаяРасчетПоВладельцам.Ссылка.Склад=&Склад ";
	КонецЕсли;
	Если ЗначениеЗаполнено(Объект.Номенклатура) Тогда
		Фильтр = Фильтр + " И ИНАГРО_Форма34СводнаяРасчетПоВладельцам.Ссылка.Номенклатура=&Номенклатура ";
	КонецЕсли;	
	Если ЗначениеЗаполнено(Объект.Урожай) Тогда
		Фильтр = Фильтр + " И ИНАГРО_Форма34СводнаяРасчетПоВладельцам.Ссылка.Урожай=&Урожай ";
	КонецЕсли;
	Если Объект.ДатаНачала <> '00010101000000' И Объект.ДатаОкончания <> '00010101000000' Тогда
		Фильтр = Фильтр + " И ИНАГРО_Форма34СводнаяРасчетПоВладельцам.Ссылка.Дата >= &ДатаНач ";
		Фильтр = Фильтр + " И ИНАГРО_Форма34СводнаяРасчетПоВладельцам.Ссылка.Дата <= &ДатаКон ";
	ИначеЕсли Объект.ДатаНачала <> '00010101000000' Тогда
		Фильтр = Фильтр + " И ИНАГРО_Форма34СводнаяРасчетПоВладельцам.Ссылка.Дата >= &ДатаНач ";
	ИначеЕсли Объект.ДатаОкончания <> '00010101000000' Тогда
		Фильтр = Фильтр + " И ИНАГРО_Форма34СводнаяРасчетПоВладельцам.Ссылка.Дата <= &ДатаКон ";
	КонецЕсли;	
	
	ЗапросДляТЧДвижений = Новый Запрос;
	
	ЗапросДляТЧДвижений.Текст =
		"ВЫБРАТЬ
		|	СУММА(ИНАГРО_Форма34СводнаяРасчетПоВладельцам.ФизическийВес1) КАК ВесЗернаДо,
		|	СУММА(ИНАГРО_Форма34СводнаяРасчетПоВладельцам.ФизическийВес2) КАК ВесЗерна,
		|	СУММА(ИНАГРО_Форма34СводнаяРасчетПоВладельцам.УбыльОтСушки) КАК УбыльОтСушки,
		|	ИНАГРО_Форма34СводнаяРасчетПоВладельцам.Ссылка
		|ИЗ
		|	Документ.ИНАГРО_Форма34Сводная.РасчетПоВладельцам КАК ИНАГРО_Форма34СводнаяРасчетПоВладельцам
		|ГДЕ
		|	ИНАГРО_Форма34СводнаяРасчетПоВладельцам.Ссылка В(&РегистраторыФорма34)" + Фильтр + "
		|
		|СГРУППИРОВАТЬ ПО
		|	ИНАГРО_Форма34СводнаяРасчетПоВладельцам.Ссылка";
	
	ЗапросДляТЧДвижений.УстановитьПараметр("ДатаНач",             Объект.ДатаНачала);
	ЗапросДляТЧДвижений.УстановитьПараметр("ДатаКон",             Объект.ДатаОкончания);
	ЗапросДляТЧДвижений.УстановитьПараметр("Организация",         Объект.Организация);
	ЗапросДляТЧДвижений.УстановитьПараметр("Владелец",            Объект.Владелец);
	Если НЕ НеВестиУчетПоВидуХраненияВККУ Тогда
		ЗапросДляТЧДвижений.УстановитьПараметр("ВидХранения", Объект.ВидХранения);
	КонецЕсли;
	ЗапросДляТЧДвижений.УстановитьПараметр("Склад",               Объект.Склад);
	ЗапросДляТЧДвижений.УстановитьПараметр("Номенклатура",        Объект.Номенклатура);
	ЗапросДляТЧДвижений.УстановитьПараметр("Урожай",              Объект.Урожай);
	ЗапросДляТЧДвижений.УстановитьПараметр("Организация",         Объект.Организация);	
	ЗапросДляТЧДвижений.УстановитьПараметр("ДоговорКонтрагента",  Объект.ДоговорКонтрагента);	
	ЗапросДляТЧДвижений.УстановитьПараметр("РегистраторыФорма34", ИНАГРО_Элеватор.РегистраторыФорма34(Объект.Ссылка));
	
	ВыборкаДляТЧДвижений = ЗапросДляТЧДвижений.Выполнить().Выбрать();
	
	рез1 = ЗапросДляТЧДвижений.Выполнить().Выгрузить();
	
	Объект.АктыСушкиИОчистки.Очистить();
	
	ВыборкаОбщ=Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаОбщ.Следующий() Цикл
		
		// побочный продукт
		Объект.ФизическийВес41 = ВыборкаОбщ.ФизическийВесПобочногоПродукта;
		Объект.Влажность41     = ИНАГРО_Элеватор.Процент(ВыборкаОбщ.ФизическийВесПобочногоПродукта,ВыборкаОбщ.ВесПоВлажностиПобочногоПродукта,2);
		Объект.СорнаяПримесь41 = ИНАГРО_Элеватор.Процент(ВыборкаОбщ.ФизическийВесПобочногоПродукта,ВыборкаОбщ.ВесПоСорнойПримесиПобочногоПродукта,2);
		
		// отходы 1 категории
		Объект.ФизическийВес5  = ВыборкаОбщ.ФизическийВесОтходы1Категории;
		Объект.Влажность5      = ИНАГРО_Элеватор.Процент(ВыборкаОбщ.ФизическийВесОтходы1Категории,ВыборкаОбщ.ВесПоВлажности1Категории, 2);
		Объект.СорнаяПримесь5  = ИНАГРО_Элеватор.Процент(ВыборкаОбщ.ФизическийВесОтходы1Категории,ВыборкаОбщ.ВесПоСорнойПримеси1Категории, 2);
		
		// отходы 2 категории
		Объект.ФизическийВес6  = ВыборкаОбщ.ФизическийВесОтходы2Категории;
		Объект.Влажность6      = ИНАГРО_Элеватор.Процент(ВыборкаОбщ.ФизическийВесОтходы2Категории,ВыборкаОбщ.ВесПоВлажности2Категории, 2);
		Объект.СорнаяПримесь6  = ИНАГРО_Элеватор.Процент(ВыборкаОбщ.ФизическийВесОтходы2Категории,ВыборкаОбщ.ВесПоСорнойПримеси2Категории, 2);
		
		// отходы 3 категории
		Объект.ФизическийВес7  = ВыборкаОбщ.ФизическийВесОтходы3Категории;
		Объект.Влажность7      = ИНАГРО_Элеватор.Процент(ВыборкаОбщ.ФизическийВесОтходы3Категории,ВыборкаОбщ.ВесПоВлажности3Категории, 2);
		Объект.СорнаяПримесь7  = ИНАГРО_Элеватор.Процент(ВыборкаОбщ.ФизическийВесОтходы3Категории,ВыборкаОбщ.ВесПоСорнойПримеси3Категории, 2);
				
		ВыборкаРег = ВыборкаОбщ.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);		
		
		Пока ВыборкаРег.Следующий() Цикл
			
			Если ВыборкаРег.Регистратор<>Null Тогда
				
				СтрокаТЧ = Объект.АктыСушкиИОчистки.Добавить();
				СтрокаТЧ.Акт = ВыборкаРег.Регистратор;
				
				Если ТипЗнч(ВыборкаРег.Регистратор)=Тип("ДокументСсылка.ИНАГРО_Форма34Сводная") Тогда
					СтрокаТЧ.ВидОчисткиСушки=ВыборкаРег.Регистратор.СпособПодработки;
				КонецЕсли;
				
				СтрокаТЧ.ВесЗерна = 0;
				СтрокаТЧ.ВесЗернаДо = 0;
				СтрокаТЧ.УбыльОтСушки = 0;
				СтрокаТЧ.ВесПобочногоПродукта = ВыборкаРег.ФизическийВесПобочногоПродукта;
				СтрокаТЧ.ВесОтходов1Категории = ВыборкаРег.ФизическийВесОтходы1Категории;
				СтрокаТЧ.ВесОтходов2Категории = ВыборкаРег.ФизическийВесОтходы2Категории;
				СтрокаТЧ.ВесОтходов3Категории = ВыборкаРег.ФизическийВесОтходы3Категории;				
				
				ВыборкаДляТЧДвижений.Сбросить();
				
				СтруктураПоиска = Новый Структура("Ссылка", ВыборкаРег.Регистратор);
				
				Если ВыборкаДляТЧДвижений.НайтиСледующий(СтруктураПоиска) Тогда
					СтрокаТЧ.ВесЗернаДо = ВыборкаДляТЧДвижений.ВесЗернаДо;					
					СтрокаТЧ.ВесЗерна = ВыборкаДляТЧДвижений.ВесЗерна;					
					СтрокаТЧ.УбыльОтСушки = ВыборкаДляТЧДвижений.УбыльОтСушки;					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция СформироватьСтруктуруПараметровОтбора(ИмяФормыОтчета = "")
		
	СтруктураПараметровОтбора = Новый Структура;	
	СтруктураПараметровОтбора.Вставить("Номенклатура", Объект.Номенклатура);
	СтруктураПараметровОтбора.Вставить("Организация",  Объект.Организация);
	СтруктураПараметровОтбора.Вставить("ВидХранения",  Объект.ВидХранения);
	СтруктураПараметровОтбора.Вставить("Склад",        Объект.Склад);
	СтруктураПараметровОтбора.Вставить("Урожай",       Объект.Урожай);
    
    Если ИмяФормыОтчета <> "Форма36Сводная" Тогда
        СтруктураПараметровОтбора.Вставить("Владелец",           Объект.Владелец);
    КонецЕсли;
    
    Если ИмяФормыОтчета =  "Форма36ПоВладельцу" Тогда
        СтруктураПараметровОтбора.Вставить("ДоговорКонтрагента", Объект.ДоговорКонтрагента);
    КонецЕсли;  
    
    СтруктураПараметровОтбора.Вставить("ПериодОтчета",  Новый СтандартныйПериод(Объект.ДатаНачала,Объект.ДатаОкончания));
	
	Возврат СтруктураПараметровОтбора;
	
КонецФункции

&НаСервере
Функция ВернутьНастройкиКомпоновщика(ИмяОтчета, ИмяФормыОтчета, ИмяВариантаОтчета)
        
    ОтчетОбъект               = Отчеты[ИмяОтчета].Создать();
    НовыйКомпоновщикНастроек  = Новый КомпоновщикНастроекКомпоновкиДанных;
    НовыйКомпоновщикНастроек.ЗагрузитьНастройки(ОтчетОбъект.СхемаКомпоновкиДанных.ВариантыНастроек[ИмяВариантаОтчета].Настройки);
    
    СтруктуруОтбораПараметров = СформироватьСтруктуруПараметровОтбора(ИмяФормыОтчета);
    ВложенныйОтчет            = НовыйКомпоновщикНастроек.Настройки.Структура.Количество() = 1;
    ПользовательскиеНастройки = Отчеты.ИНАГРО_УниверсальныйАнализЗерна.ЗаполнитьПользовательскиеНастройкиОтчета(НовыйКомпоновщикНастроек, СтруктуруОтбораПараметров, ВложенныйОтчет);
    
    Возврат ПользовательскиеНастройки;
	
КонецФункции

#КонецОбласти  

#Область СлужебныеПроцедурыИФункцииБСП

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти
