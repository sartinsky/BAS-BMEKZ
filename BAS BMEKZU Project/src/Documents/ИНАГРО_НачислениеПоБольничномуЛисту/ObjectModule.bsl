#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда	

#Область ОбработчикиСобытий

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)

	ТипДанныхЗаполнения = ТипЗнч(ДанныеЗаполнения);
	Если ДанныеЗаполнения <> Неопределено И ТипДанныхЗаполнения <> Тип("Структура") 
		И Метаданные().ВводитсяНаОсновании.Содержит(ДанныеЗаполнения.Метаданные()) Тогда
		ЗаполнитьПоДокументуОснованию(ДанныеЗаполнения);
	КонецЕсли;
	ЗаполнениеДокументов.Заполнить(ЭтотОбъект, ДанныеЗаполнения);
    	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, Режим)
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКПроведению(ЭтотОбъект);
	Заголовок = ОбщегоНазначенияБПВызовСервера.ПредставлениеДокументаПриПроведении(Ссылка);
	
	ВыборкаПоШапкеДокумента = СформироватьЗапросПоШапке().Выбрать();
	ВыборкаПоШапкеДокумента.Следующий();
	ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ);
	Если Отказ  Тогда
		Возврат;
	КонецЕсли;	
		
	// основные Начисления
	ВыборкаПоНачислениям = СформироватьЗапросПоНачислениям().Выбрать();
	Пока ВыборкаПоНачислениям.Следующий() Цикл 
		
		Если НЕ Отказ Тогда
			ДобавитьСтрокуОсновныхНачислений(ВыборкаПоНачислениям, Движения.ИНАГРО_Начисления);
			ИспользуетсяЕСВ = ИНАГРО_ПроведениеРасчетов.ИспользуетсяЕСВ(ПериодРегистрации); 
			Если НЕ ИспользуетсяЕСВ И Дата >= Дата(2016,1,1) Тогда
				ДобавитьСтрокуВДвиженияПоРегистрамНакопления(ВыборкаПоНачислениям);
			Иначе
				Если  НЕ ВыборкаПоНачислениям.ВидРасчета.НачислениеЗаСчетФСС И Дата >= Дата(2016,1,1) Тогда
					ДобавитьСтрокуВДвиженияПоРегистрамНакопления(ВыборкаПоНачислениям);
				КонецЕсли;
            КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	// Расчет средней
	ВыборкаПоСредним = СформироватьЗапросПоРасчетСреднего().Выбрать();
	Пока ВыборкаПоСредним.Следующий() Цикл
		
		ПроверитьЗаполнениеСтрокиРасчетСреднего(ВыборкаПоСредним, Отказ);
		Если НЕ Отказ Тогда
			ДобавитьСтрокуРасчетаСреднего(ВыборкаПоСредним, Движения.ИНАГРО_РасчетСреднегоЗаработка);
		КонецЕсли;
		
	КонецЦикла;
	
	// Состояния работников
	// получим реквизиты табличной части.
	Выборка = СформироватьЗапросСостояния().Выбрать();
	Пока Выборка.Следующий() Цикл 
		ПроверитьЗаполнениеСтрокиСостояния(Выборка, Отказ);
		Если НЕ Отказ Тогда
			ДобавитьСтрокуСостояний(ВыборкаПоШапкеДокумента, Выборка);
		КонецЕсли;
	КонецЦикла;
			
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКОтменеПроведения(ЭтотОбъект);
	Движения.Записать();

КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)

	Дата = НачалоДня(ОбщегоНазначения.ТекущаяДатаПользователя());
	Ответственный = Пользователи.ТекущийПользователь();
	
КонецПроцедуры

#КонецОбласти

#Область Проведение

// Формирует запрос по шапке документа
//
//
// Возвращаемое значение:
//  Результат запроса
//
Функция СформироватьЗапросПоШапке() 
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументСсылка",	Ссылка);
	
	ТекстЗапроса = "
	|	ВЫБРАТЬ
	|		Основной.Организация,
	|		Основной.Ссылка,
	|		Основной.Дата,
	|		Основной.ПериодРегистрации,
	|		Основной.Организация,
	|		Основной.Сотрудник,
	|		Основной.СуммаСредней, 
	|		Основной.ПроцентОплаты,
	|		Основной.СуммаПределаСредней, 
	|		Основной.ПричинаНетрудоспособности,
	|		Основной.ПервичныйБольничныйЛист,
	|		Основной.ДатаНачала,
	|		Основной.ДатаОкончания,
	|		Основной.ПериодРасчетаСреднегоНачало,
	|		Основной.ПериодРасчетаСреднегоКонец,
	|		Основной.ВидУчетаВремениДляСредней,
	|		Основной.ОплачивалВзносыМеньше6Месяцев	
	|	ИЗ Документ.ИНАГРО_НачислениеПоБольничномуЛисту КАК Основной
	|
	|	ГДЕ Основной.Ссылка = &ДокументСсылка	
	|";
	
	Запрос.Текст = ТекстЗапроса;

	Возврат Запрос.Выполнить();
	
КонецФункции // СформироватьЗапросПоШапке()

Функция СформироватьЗапросПоНачислениям()

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументСсылка" , Ссылка);
	Запрос.УстановитьПараметр("парамСписокПочасовыхОтклонений", ИнАгро_ПроведениеРасчетов.ПолучитьСписокНачисленийПочасовыхОтклонений());
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СтрокиНачисления.Ссылка.Организация,
	|	СтрокиНачисления.Ссылка.ПериодРегистрации,
	|	СтрокиНачисления.НомерСтроки,  
	|	СтрокиНачисления.Авторасчет,
	|   ЗНАЧЕНИЕ(Перечисление.КодыОперацийВзаиморасчетыСРаботникамиОрганизаций.Начисления) КАК КодОперации,
	|
	|	СтрокиНачисления.Сотрудник,
	|	СтрокиНачисления.Сотрудник.ФизическоеЛицо		КАК ФизическоеЛицо,
	|	СтрокиНачисления.Назначение,
	|	СтрокиНачисления.ВидРасчета,
	|	СтрокиНачисления.ВидРасчета.СпособРасчета		КАК СпособРасчета,
    |
	|	КОНЕЦПЕРИОДА(СтрокиНачисления.Ссылка.ПериодРегистрации, МЕСЯЦ)	КАК Период,
	|	СтрокиНачисления.Ссылка.ПериодРегистрации						КАК ПериодВзаиморасчетов,
	|	СтрокиНачисления.ВидРасчета.СчетУчета			КАК СчетУчета,
	|	СтрокиНачисления.Результат						КАК СуммаВзаиморасчетов,
	|
	|	СтрокиНачисления.ДатаНачала,
	|	СтрокиНачисления.ДатаОкончания,
	|	СтрокиНачисления.БазовыйПериодНачало,
	|	СтрокиНачисления.БазовыйПериодКонец,
	|	СтрокиНачисления.ДатаНачала			КАК ПериодДействияНачало,
	|	СтрокиНачисления.ДатаОкончания		КАК ПериодДействияКонец,
	|
	|	СтрокиНачисления.Результат,
	|	СтрокиНачисления.ОплаченоДнейЧасов,
	|	СтрокиНачисления.ОтработаноДней,
	|	СтрокиНачисления.ОтработаноЧасов,
	|	СтрокиНачисления.НормаДней,
	|	СтрокиНачисления.НормаЧасов,
	|	СтрокиНачисления.КалендарныеДни,
	|
	|	СтрокиНачисления.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	|	СтрокиНачисления.ПодразделениеОрганизации КАК Подразделение,
	|	СтрокиНачисления.ГрафикРаботы,
	|   ВЫБОР	КОГДА СтрокиНачисления.ГрафикРаботы ССЫЛКА Справочник.ИНАГРО_ГрафикиРаботы
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка)
	|			ИНАЧЕ СтрокиНачисления.Сотрудник
	|	КОНЕЦ						КАК ГрафикРаботыСотрудник,
	|	СтрокиНачисления.ГрафикРаботы.СуммированныйУчетРабочегоВремени КАК СуммированныйУчетРабочегоВремени,
	|	СтрокиНачисления.ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени КАК ВидИспользованияРабочегоВремени, 
	|	СтрокиНачисления.Показатель1,
	|	СтрокиНачисления.Показатель2,
	|	СтрокиНачисления.Показатель3,
	|	СтрокиНачисления.НормаЧасовЗаМесяц,
	|	СтрокиНачисления.НормаДнейЗаМесяц,
	|	СтрокиНачисления.ВидУчетаВремениДляСредней,
	|	СтрокиНачисления.СпособОтраженияВБухучете,
	|	СтрокиНачисления.Сторно
	|
	|ИЗ Документ."+Ссылка.Метаданные().Имя+".Начисления КАК СтрокиНачисления
	|
	|ГДЕ СтрокиНачисления.Ссылка = &ДокументСсылка
	|";

	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоНачислениям()

Функция СформироватьЗапросПоРасчетСреднего()

	ИмяРегистратора = Ссылка.Метаданные().Имя;
	Запрос = Новый Запрос;
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка", Ссылка);
	Запрос.УстановитьПараметр("ПустаяДата", Дата('00010101'));
	
	Запрос.Текст = "ВЫБРАТЬ
		|	СтрокаРасчетСреднего.Ссылка.ПериодРегистрации КАК ПериодРегистрации,
		|	СтрокаРасчетСреднего.Ссылка.Сотрудник КАК Сотрудник,
		|	СтрокаРасчетСреднего.Ссылка.Организация КАК Организация,
		
		|	СтрокаРасчетСреднего.НомерСтроки,
		|	СтрокаРасчетСреднего.Авторасчет,
		|	СтрокаРасчетСреднего.ВидРасчета,
		|	СтрокаРасчетСреднего.БазовыйПериодНачало,
		|	СтрокаРасчетСреднего.БазовыйПериодКонец,
		|	СтрокаРасчетСреднего.КоэффициентПовышенияОкладов,
		|	СтрокаРасчетСреднего.СуммаПредела,
		|	СтрокаРасчетСреднего.КалендарныеДни,
	
		|	СтрокаРасчетСреднего.Результат,
		|	СтрокаРасчетСреднего.РезультатПолный
		|ИЗ Документ."+Ссылка.Метаданные().Имя+".РасчетСреднего КАК СтрокаРасчетСреднего
		|
		|ГДЕ СтрокаРасчетСреднего.Ссылка = &ДокументСсылка
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки
		|";

	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоРасчетСреднего()

// Формируем и выполняем запрос по ТЧ Начисления
//
Функция СформироватьЗапросСостояния()
	
	Запрос = Новый Запрос;
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка", Ссылка);
	Запрос.УстановитьПараметр("ПустаяДата", Дата('00010101'));
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ 
	|	ТЧНачисления.НомерСтроки КАК НомерСтроки,
	|	ТЧНачисления.Сотрудник КАК Сотрудник,
	|	ТЧНачисления.Назначение КАК Назначение,
	|	ТЧНачисления.Приказ КАК Приказ,
	|	ТЧНачисления.ДатаНачала КАК ДатаНачала,
	|	ВЫБОР КОГДА ТЧНачисления.ДатаОкончания <> &ПустаяДата ТОГДА КОНЕЦПЕРИОДА(ТЧНачисления.ДатаОкончания, ДЕНЬ) ИНАЧЕ &ПустаяДата КОНЕЦ КАК ДатаОкончания,
	|	ТЧНачисления.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	|	ТЧНачисления.Сторно КАК Сторно,
	|	ТЧНачисления.Состояние КАК Состояние,
	|	ВЫБОР КОГДА (ПродолжениеИнтервала.НомерСтроки) ЕСТЬ NULL  ТОГДА  ТЧНачисления.ПроизошедшееСобытие ИНАЧЕ ЛОЖЬ КОНЕЦ КАК ПроизошедшееСобытие
	|
	|ИЗ	Документ.ИНАГРО_НачислениеПоБольничномуЛисту.Начисления КАК ТЧНачисления
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ 
	|(ВЫБРАТЬ ПЕРВЫЕ 1
	|   Строки.НомерСтроки,
	|   Строки.Сотрудник,
	|   Строки.ДатаНачала
	|ИЗ Документ.ИНАГРО_НачислениеПоБольничномуЛисту.Начисления КАК Строки
	|ГДЕ	Строки.Ссылка = &ДокументСсылка	) КАК ДругиеСтроки
	|ПО	ДругиеСтроки.Сотрудник = ТЧНачисления.Сотрудник 
	| И	ДругиеСтроки.НомерСтроки < ТЧНачисления.НомерСтроки
	| И	ДругиеСтроки.ДатаНачала = ТЧНачисления.ДатаНачала
	|ЛЕВОЕ СОЕДИНЕНИЕ 
	|(ВЫБРАТЬ 
	|   Строки.НомерСтроки,
	|   Строки.Сотрудник,
	|   Строки.Состояние,
	|   Строки.ДатаНачала
	
	|ИЗ Документ.ИНАГРО_НачислениеПоБольничномуЛисту.Начисления КАК Строки
	|ГДЕ	Строки.Ссылка = &ДокументСсылка	) КАК ПродолжениеИнтервала
	|ПО	ПродолжениеИнтервала.Сотрудник = ТЧНачисления.Сотрудник 
	| И	ПродолжениеИнтервала.НомерСтроки > ТЧНачисления.НомерСтроки
	| И	ПродолжениеИнтервала.Состояние = ТЧНачисления.Состояние	
    | И	ПродолжениеИнтервала.ДатаНачала = НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(ТЧНачисления.ДатаОкончания,ДЕНЬ,1),ДЕНЬ)
	|
	|ГДЕ	ТЧНачисления.Ссылка = &ДокументСсылка
	|" ;
	
	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос.Выполнить();
	
КонецФункции	

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизитов шапки, влияющий на проведение, не заполнен или
// заполнен некорректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса по шапке,
// все проверяемые реквизиты должны быть включены в выборку по шапке.
//
// Параметры: 
//  ВыборкаПоШапкеДокумента	- выборка из результата запроса по шапке документа,
//  Отказ 					- флаг отказа в проведении.
//
Процедура ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ) Экспорт
	//
	Если ВыборкаПоШапкеДокумента.ДатаОкончания < ВыборкаПоШапкеДокумента.ДатаНачала Тогда
		ОбщегоНазначенияБПКлиентСервер.СообщитьОбОшибке(НСтр("ru='Дата окончания оплачиваемого события не должна быть меньше даты начала!';uk='Дата закінчення оплачуваної події не повинна бути меншою дати початку!'"), Отказ);
	КонецЕсли; 
	
КонецПроцедуры // ПроверитьЗаполнениеШапки()

Процедура ПроверитьЗаполнениеСтрокиРасчетСреднего(ВыборкаПоСтрокамДокумента, Отказ)
	
	СтрокаНачалаСообщенияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='В строке номер ""%1"" табл. части ""Расчет среднего"": ';uk='У рядку номер ""%1"" табл. частини ""Розрахунок середнього"": '"), СокрЛП(ВыборкаПоСтрокамДокумента.НомерСтроки));
	
	Если ВыборкаПоСтрокамДокумента.БазовыйПериодКонец < ВыборкаПоСтрокамДокумента.БазовыйПериодНачало Тогда
		ТекстСообщения = СтрокаНачалаСообщенияОбОшибке + НСтр("ru='дата начала базового периода не может быть больше даты окончания базового периода!';uk='дата початку базового періоду не може бути більшою ніж дата закінчення базового періоду!'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,ЭтотОбъект,,,Отказ);
	КонецЕсли; 
	
КонецПроцедуры // ПроверитьЗаполнениеСтрокиРасчетСреднего()

// Проверяет правильность заполнения реквизитов в строке Начисления документа
// Если какой-то из реквизитов, влияющий на проведение, не заполнен или
// заполнен некорректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса к ТЧ документа,
// все проверяемые реквизиты должны быть включены в выборку.
//
// Параметры: 
//  ВыборкаПоСтрокамДокумента	- позиционированная на определенной строке выборка 
//  							  из результата запроса к ТЧ документа, 
//  Отказ 						- флаг отказа в проведении.
// 
Процедура ПроверитьЗаполнениеСтрокиСостояния(ВыборкаПоСтрокамДокумента, Отказ)
	
	СтрокаНачалаСообщенияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='В строке номер ""%1"" табл. части ""Начисления"": ';uk='У рядку номер ""%1"" табл. частини ""Нарахування"": '"), СокрЛП(ВыборкаПоСтрокамДокумента.НомерСтроки));

	Если Не ВыборкаПоСтрокамДокумента.Сторно Тогда
		Уволен = Ложь;
		УжеРаботает = РегистрыСведений.ИНАГРО_РаботникиОрганизаций.СрезПоследних(ВыборкаПоСтрокамДокумента.ДатаНачала, Новый Структура("Сотрудник, Организация", ВыборкаПоСтрокамДокумента.Сотрудник, Организация));
		Для каждого Место Из УжеРаботает Цикл
			Если Место.ЗанимаемыхСтавок = 0 Тогда
				Уволен = Истина;
			КонецЕсли;
		КонецЦикла;
		Если УжеРаботает.Количество()=0 ИЛИ Уволен Тогда
			ТекстСообщения = СтрокаНачалаСообщенияОбОшибке + НСтр("ru='работник не принят на работу в организацию!';uk='працівник не прийнятий на роботу в організацію!'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,ЭтотОбъект,,,Отказ);
		КонецЕсли;
		
		Если ВыборкаПоСтрокамДокумента.Состояние <> Перечисления.ИНАГРО_СостоянияРаботникаОрганизации.НеИзменять Тогда
			События = РегистрыСведений.ИНАГРО_СостояниеРаботниковОрганизаций.СрезПоследних(ВыборкаПоСтрокамДокумента.ДатаНачала +1, Новый Структура("Сотрудник, Организация", ВыборкаПоСтрокамДокумента.Сотрудник, Организация));
			Если События.Количество()>0 Тогда
				Если События[0].Период = ВыборкаПоСтрокамДокумента.ДатаНачала Тогда 
					ТекстСообщения = СтрокаНачалаСообщенияОбОшибке + НСтр("ru='в кадровом учете начало события противоречит документу ';uk='в кадровому обліку початок події суперечить документу '")+ События[0].Регистратор+"!";
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,ЭтотОбъект,,,Отказ);
				КонецЕсли;	
			КонецЕсли;
			
			Если ВыборкаПоСтрокамДокумента.ПроизошедшееСобытие Тогда
				События = РегистрыСведений.ИНАГРО_СостояниеРаботниковОрганизаций.СрезПоследних(КонецДня(ВыборкаПоСтрокамДокумента.ДатаОкончания), Новый Структура("Сотрудник, Организация",ВыборкаПоСтрокамДокумента.Сотрудник,Организация));
				Если События.Количество()>0 Тогда
					Если События[0].Период = КонецДня(ВыборкаПоСтрокамДокумента.ДатаОкончания) Тогда
						ТекстСообщения = СтрокаНачалаСообщенияОбОшибке + НСтр("ru='в кадровом учете окончание события противоречит документу ';uk='в кадровому обліку закінчення події суперечить документу '")+ События[0].Регистратор+"!";
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,ЭтотОбъект,,,Отказ);
					КонецЕсли;	
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьСтрокуОсновныхНачислений(Выборка, НаборОсновныеНачисления)
	
	Движения.ИНАГРО_Начисления.Записывать = Истина;
	
	Движение = НаборОсновныеНачисления.Добавить();
	ЗаполнитьЗначенияСвойств(Движение, Выборка);
	
 	Движение.ВидУчетаВремени = ИнАгро_ПроведениеРасчетов.ПолучитьВидУчетаВремени(Выборка.ВидРасчета, Выборка.СуммированныйУчетРабочегоВремени,Движение.ВидУчетаВремениДляСредней);

КонецПроцедуры // ДобавитьСтрокуОсновныхНачислений

Процедура ДобавитьСтрокуРасчетаСреднего(ВыборкаПоСтрокамДокумента, НаборСредних)
	
	Движения.ИНАГРО_РасчетСреднегоЗаработка.Записывать = Истина;
	
	Движение = НаборСредних.Добавить();
	ЗаполнитьЗначенияСвойств(Движение,ВыборкаПоСтрокамДокумента);
	
КонецПроцедуры 

// По строке выборок из результатов запроса по документу формируем движения по регистрам сведений.
//
// Параметры: 
//  Выборка				- спозиционированная на определенной строке выборка 
//				  							  из результата запроса к ТЧ документа, 
// Возвращаемое значение:
//  Нет.
//
Процедура ДобавитьСтрокуСостояний(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента)
	
	Если ВыборкаПоСтрокамДокумента.Сторно Тогда
		Возврат;
	КонецЕсли;
		
	Если ВыборкаПоСтрокамДокумента.Состояние = Перечисления.ИНАГРО_СостоянияРаботникаОрганизации.НеИзменять Тогда
		Возврат;
	КонецЕсли;
	
	Движения.ИНАГРО_СостояниеРаботниковОрганизаций.Записывать = Истина;
	Движение = Движения.ИНАГРО_СостояниеРаботниковОрганизаций.Добавить();

	// Свойства
	Движение.Период = НачалоДня(ВыборкаПоСтрокамДокумента.ДатаНачала)+2;

	// Измерения
	Движение.Сотрудник = ВыборкаПоСтрокамДокумента.Назначение;
	Движение.Организация = ВыборкаПоШапкеДокумента.Организация;

	// Ресурсы
	Движение.Состояние = ВыборкаПоСтрокамДокумента.Состояние;
	
	
	Если ВыборкаПоСтрокамДокумента.ПроизошедшееСобытие Тогда
		Движение = Движения.ИНАГРО_СостояниеРаботниковОрганизаций.Добавить();

		// Свойства
		Движение.Период = КонецДня(ВыборкаПоСтрокамДокумента.ДатаОкончания)-2;
	
		// Измерения
		Движение.Сотрудник = ВыборкаПоСтрокамДокумента.Назначение;
		Движение.Организация = ВыборкаПоШапкеДокумента.Организация;

		// Ресурсы
		Движение.Состояние = Перечисления.ИНАГРО_СостоянияРаботникаОрганизации.Работает;
	КонецЕсли;			
	
КонецПроцедуры // ДобавитьСтрокуОсновныхНачислений

Процедура ДобавитьСтрокуВДвиженияПоРегистрамНакопления(ВыборкаПоСтрокамДокумента)
	
	Движения.ВзаиморасчетыССотрудниками.Записывать = Истина;
	
	Движение = Движения.ВзаиморасчетыССотрудниками.Добавить();
	ЗаполнитьЗначенияСвойств(Движение, ВыборкаПоСтрокамДокумента);
	
	Движение.ВидДвижения			= ВидДвиженияНакопления.Приход;

КонецПроцедуры // ДобавитьСтрокуВДвиженияПоРегистрамНакопления()

#КонецОбласти

#Область АвтозаполнениеРасчет

// Получение данных
//
Функция АвтозаполнениеРасчетСреднего() Экспорт
	Перем ДатаПриемаПервыйРабочийДень;

	// Проверим есть ли каки-либо начисления за последние 10 месяце
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр( "парамСотрудник", Сотрудник );
	Запрос.УстановитьПараметр( "ПериодРасчетаСреднегоНачало", ПериодРасчетаСреднегоНачало );
	Запрос.УстановитьПараметр( "ПериодРасчетаСреднегоКонец", ПериодРасчетаСреднегоКонец );
	
	ТекстЗапроса = "
	|	ВЫБРАТЬ
	|		СУММА( ЕСТЬNULL(Начисления.Результат, 0) ) КАК СуммаНачислений,
	|		СУММА( ВЫБОР КОГДА Начисления.ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени.УважительнаяПричинаДляБольничных = ИСТИНА
	|			ТОГДА 1
	|		КОНЕЦ )	КАК ЕстьДопустимыеНевыходы
	|	ИЗ РегистрРасчета.ИНАГРО_Начисления КАК Начисления
	|	ГДЕ		Начисления.Сотрудник = &парамСотрудник
	|		И	Начисления.ПериодДействия МЕЖДУ &ПериодРасчетаСреднегоНачало И &ПериодРасчетаСреднегоКонец
	|";
	
	Запрос.Текст = ТекстЗапроса;
	
	Выборка = Запрос.Выполнить().Выбрать();
	ЕстьНачисления = Ложь;
	ЕстьДопустимыеНевыходы = Ложь;
	Если Выборка.Следующий() Тогда
		ЕстьНачисления = ?(Выборка.СуммаНачислений= NULL ИЛИ Выборка.СуммаНачислений <= 0, Ложь,Истина);
		ЕстьДопустимыеНевыходы = ?(Выборка.ЕстьДопустимыеНевыходы= NULL ИЛИ Выборка.ЕстьДопустимыеНевыходы <= 0, Ложь,Истина);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр( "парамПериодРегистрации"		, ПериодРегистрации );
	
	//	ВТПределы
	Если Истина Тогда
		//	Описание:
		// 		Суммы пределов
		//		
		ТекстЗапросаВТ = "
		|	ВЫБРАТЬ
		|		ДанныеОНалогах.Предел	КАК СуммаПредела,
		|		ДанныеОНалогах.Период	КАК ПериодНачало,
		|		МИНИМУМ( ВЫБОР	КОГДА ДанныеОНалогах1.Период ЕСТЬ NULL 
		|					ТОГДА  КОНЕЦПЕРИОДА(&парамПериодРегистрации, МЕСЯЦ)
		|				ИНАЧЕ ДОБАВИТЬКДАТЕ( ДанныеОНалогах1.Период, СЕКУНДА, -1 )	
		|				КОНЕЦ )			КАК ПериодКонец
		|ПОМЕСТИТЬ ВТПределы	
		|	ИЗ	РегистрСведений.ПределыСтраховыхВзносов КАК ДанныеОНалогах
		|
		|   ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПределыСтраховыхВзносов КАК ДанныеОНалогах1
		|	ПО		ДанныеОНалогах1.ВидЕСВ = ЗНАЧЕНИЕ(Перечисление.ВидыЕСВ.ОсновнаяЗарплата) 
		|		И   ДанныеОНалогах1.Период > ДанныеОНалогах.Период
		|		
		|	ГДЕ   ДанныеОНалогах.ВидЕСВ = ЗНАЧЕНИЕ(Перечисление.ВидыЕСВ.ОсновнаяЗарплата) 
		|		
		|   СГРУППИРОВАТЬ ПО
		|		ДанныеОНалогах.Предел,
		|		ДанныеОНалогах.Период
		|";
		Запрос.Текст = ТекстЗапросаВТ;
		Запрос.Выполнить();
		ТекстЗапросаВТПределы = "ВТПределы";
	КонецЕсли;
	
	ДатаПриема = ПолучитьДанныеОПриеме(ДатаПриемаПервыйРабочийДень);
	
	Если  ПериодРасчетаСреднегоНачало = ПериодРасчетаСреднегоКонец // на больничный в первый рабочий день
		// были разрешенные невыходы 6 месяцев 
		ИЛИ НЕ ЕстьНачисления И ЕстьДопустимыеНевыходы 
		// на больничный в первый месяц работы еще нет начисленной ЗП
		ИЛИ  ДатаПриема = ПериодРасчетаСреднегоНачало И ПериодРасчетаСреднегоКонец < НачалоДня(КонецМесяца(ДатаПриема))	И НачалоМесяца(ДатаПриема) = ПериодРегистрации	Тогда
		
		// Проработал меньше целого месяца
		// если есть за что платить, пользователю прийдется заполнить эти суммы вручную.
		//
		ВидРасчетаСЗ = ПланыВидовРасчета.ИНАГРО_СреднийЗаработок.ПоОкладу;
		ВидРасчетаСЗ1 = "";
		
		//	ВТВремя
		Если Истина Тогда
			//	Описание:
			// 		таблица периодов для расчета средней.
			//		
			Начало = ПериодРасчетаСреднегоНачало;
			Запрос.УстановитьПараметр("парамНачало1", 	НачалоМесяца(ПериодРасчетаСреднегоКонец) );
			Запрос.УстановитьПараметр("парамКонец1", 	КонецМесяца(ПериодРасчетаСреднегоКонец) );
			ТекстЗапросаВТ = " 
			|		ВЫБРАТЬ
			|			&парамНачало1	КАК БазовыйПериодНачало,
			|			&парамКонец1	КАК БазовыйПериодКонец
			|ПОМЕСТИТЬ ВТВремя	
			|";
			Запрос.Текст = ТекстЗапросаВТ;
			Запрос.Выполнить();
			ТекстЗапросаВТВремя = "ВТВремя";
		КонецЕсли;
		
		Если ПричинаНетрудоспособности = Справочники.ИНАГРО_ПричиныНетрудоспособности.ПоБеременностиИРодам Тогда
			СуммаНижнейГраницыСредней = Окр(ОграничениеПоМинимальнойЗарплате / 30.44, 2);
		КонецЕсли;
		
	Иначе
		
		ВидРасчетаСЗ = ПланыВидовРасчета.ИНАГРО_СреднийЗаработок.ПоЗаработкуБЛФСС;
		//	ВТВремя
		Если Истина Тогда
			//	Описание:
			// 		таблица периодов для расчета средней.
			//		
			Начало = ПериодРасчетаСреднегоНачало;
			Конец = ПериодРасчетаСреднегоКонец;
			Запрос.УстановитьПараметр( "парамНачало1", Начало );
			Запрос.УстановитьПараметр( "парамКонец1", Мин( КонецМесяца(Начало), Конец ) );
			ТекстЗапросаВТ = " 
			|		ВЫБРАТЬ
			|			&парамНачало1	КАК БазовыйПериодНачало,
			|			&парамКонец1	КАК БазовыйПериодКонец
			|ПОМЕСТИТЬ ВТВремя	
			|";
			
			Начало = ДобавитьМесяц(НачалоМесяца(Начало),1);
			Инд = 2;
			Пока Начало <= Конец Цикл
				
				Запрос.УстановитьПараметр( "парамНачало"+Инд    , Начало );
				Запрос.УстановитьПараметр( "парамКонец"+Инд    , Мин( КонецМесяца(Начало), Конец ) );
				ТекстЗапросаВТ = ТекстЗапросаВТ + " 
				|	ОБЪЕДИНИТЬ ВСЕ	  
				|	ВЫБРАТЬ
				|		&парамНачало"+Инд+"	КАК БазовыйПериодНачало,
				|		&парамКонец"+Инд+"	КАК БазовыйПериодКонец
				|";	  
				Инд = Инд + 1;
				Начало = ДобавитьМесяц(НачалоМесяца(Начало),1);
				
			КонецЦикла;
			
			Запрос.Текст = ТекстЗапросаВТ;
			Запрос.Выполнить();
			ТекстЗапросаВТВремя = "ВТВремя";
		КонецЕсли;
		
		Если ПричинаНетрудоспособности = Справочники.ИНАГРО_ПричиныНетрудоспособности.ПоБеременностиИРодам Тогда
			СуммаНижнейГраницыСредней = Окр(ОграничениеПоМинимальнойЗарплате / 30.44, 2);
		КонецЕсли;
		
	КонецЕсли;
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	Время.БазовыйПериодНачало		КАК БазовыйПериодНачало,
	|	Время.БазовыйПериодКонец		КАК БазовыйПериодКонец,
	|	ДанныеОПределе.СуммаПредела		КАК СуммаПредела
	|ИЗ "+ТекстЗапросаВТВремя+" КАК Время			
	|			
	|ЛЕВОЕ СОЕДИНЕНИЕ	"+ТекстЗапросаВТПределы+" КАК ДанныеОПределе		
	|ПО   ДанныеОПределе.ПериодНачало <= Время.БазовыйПериодКонец
	|	И Время.БазовыйПериодНачало <= ДанныеОПределе.ПериодКонец  
	|";			
	
	Запрос.Текст = ТекстЗапроса;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		СоздатьСтрокуРасчетСреднего( ВидРасчетаСЗ, Выборка.СуммаПредела, Выборка.БазовыйПериодНачало, Выборка.БазовыйПериодКонец);
		
	КонецЦикла;
	
	Записать();
	
КонецФункции  // ЗаполнитьРасчетаСреднего_Заполнение()

// Получение данных
//
Процедура АвтозаполнениеНачисления() Экспорт
	
	// запрос по всем назначениям включая внутреннее совместительство
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("парамРегистратор",	Ссылка);
	Запрос.УстановитьПараметр("парамОрганизация",	Организация);
	Запрос.УстановитьПараметр("ДатаНачалаСобытия",	ПолучитьДатуНачалаСобытия());
	Запрос.УстановитьПараметр("парамСотрудник",		Сотрудник);
	Запрос.УстановитьПараметр("парамФизлицо",		Сотрудник.ФизическоеЛицо);
	Запрос.УстановитьПараметр("парамВидРасчета",					ПричинаНетрудоспособности.ВидРасчета);
	Запрос.УстановитьПараметр("парамВидРасчетаЗаСчетОрганизации",	ПричинаНетрудоспособности.ВидРасчетаЗаСчетОрганизации);
	Запрос.УстановитьПараметр("парамКвоДнейЗаСчетОрганизации",		ПричинаНетрудоспособности.КвоДнейЗаСчетОрганизации);
	
	ТекстЗапроса = "ВЫБРАТЬ
	               |	Основной.Дата,
	               |	Основной.Организация,
	               |	Основной.Ссылка,
	               |	Основной.Сотрудник,
	               |	Основной.ПроцентОплаты,
	               |	Основной.СуммаПределаСредней,
	               |	Основной.ПричинаНетрудоспособности,
	               |	Основной.ПервичныйБольничныйЛист,
	               |	Основной.ДатаНачала,
	               |	Основной.ДатаОкончания,
	               |	Основной.СуммаСредней,
	               |	Основной.ПроцентОплаты КАК ПроцентОплаты1,
	               |	Основной.ВидУчетаВремениДляСредней,
	               |	Основной.ПериодРасчетаСреднегоНачало КАК ПериодРасчетаСреднегоНачало,
	               |	Основной.ПериодРасчетаСреднегоКонец КАК ПериодРасчетаСреднегоКонец,
	               |	&парамВидРасчета КАК ВидРасчета,
	               |	&парамВидРасчетаЗаСчетОрганизации КАК ВидРасчетаЗаСчетОрганизации,
	               |	&парамКвоДнейЗаСчетОрганизации КАК КвоДнейЗаСчетОрганизации,
	               |	РАЗНОСТЬДАТ(&ДатаНачалаСобытия, Основной.ДатаНачала, ДЕНЬ) КАК КвоДнейЗаСчетОрганизацииОплачено,
	               |	ЕСТЬNULL(РаботникиОрганизацииСрезПоследних.Сотрудник, Основной.Сотрудник) КАК Назначение,
	               |	РаботникиОрганизацииСрезПоследних.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	               |	РаботникиОрганизацииСрезПоследних.ГрафикРаботы,
	               |	РаботникиОрганизацииСрезПоследних.ГрафикРаботы.СуммированныйУчетРабочегоВремени КАК СуммированныйУчетРабочегоВремени,
	               |	ВЫБОР
	               |		КОГДА РаботникиОрганизацииСрезПоследних.Сотрудник ЕСТЬ NULL
	               |			ТОГДА Основной.Сотрудник.ИНАГРО_ВидЗанятости
	               |		ИНАЧЕ РаботникиОрганизацииСрезПоследних.Сотрудник.ИНАГРО_ВидЗанятости
	               |	КОНЕЦ КАК ВидЗанятости
	               |ИЗ
	               |	Документ.ИНАГРО_НачислениеПоБольничномуЛисту КАК Основной
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИНАГРО_РаботникиОрганизаций.СрезПоследних(
	               |				&ДатаНачалаСобытия,
	               |				Сотрудник = &парамСотрудник
	               |					ИЛИ Сотрудник.ОсновноеНазначение = &парамСотрудник) КАК РаботникиОрганизацииСрезПоследних
	               |		ПО (ИСТИНА)
	               |ГДЕ
	               |	Основной.Ссылка = &парамРегистратор
	               |	И ЕСТЬNULL(РаботникиОрганизацииСрезПоследних.ЗанимаемыхСтавок, 1) > 0";
	
	Запрос.Текст = ТекстЗапроса;

	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НачисленияВыборка = ИНАГРО_ПроведениеРасчетов.ЗапросСпособОтражения(ДатаНачала, Выборка.ВидРасчета, Сотрудник, Организация ).Выбрать();
		Если НачисленияВыборка.Следующий() Тогда
			// вверху основное начисление
			мВидРасчетаСпособОтраженияВБухучете = НачисленияВыборка.СпособОтраженияВБухучете;
		КонецЕсли;
		
		// 2.
		НачисленияВыборка = ИНАГРО_ПроведениеРасчетов.ЗапросСпособОтражения(ДатаНачала, Выборка.ВидРасчетаЗаСчетОрганизации, Сотрудник, Организация ).Выбрать();
		Если НачисленияВыборка.Следующий() Тогда
			// вверху основное начисление
			мВидРасчетаЗаСчетОрганизацииСпособОтраженияВБухучете = НачисленияВыборка.СпособОтраженияВБухучете;
		КонецЕсли;
		
		КвоДнейЗаСчетОрганизации = 0;
		КвоДнейЗаСчетОрганизации = Выборка.КвоДнейЗаСчетОрганизации;
		Если ЗначениеЗаполнено(ПервичныйБольничныйЛист) Тогда
			ТекущаяДатаОкончанияЗаСчетОрганизации	= КонецДня(ПервичныйБольничныйЛист.ДатаНачала + 86400*Макс(0, КвоДнейЗаСчетОрганизации - 1));
			КвоДнейЗаСчетОрганизации = ?(Выборка.КвоДнейЗаСчетОрганизацииОплачено > Выборка.КвоДнейЗаСчетОрганизации, 0, Выборка.КвоДнейЗаСчетОрганизации - Выборка.КвоДнейЗаСчетОрганизацииОплачено);
		Иначе
			КвоДнейЗаСчетОрганизации = ?(Выборка.КвоДнейЗаСчетОрганизацииОплачено > Выборка.КвоДнейЗаСчетОрганизации, 0, Выборка.КвоДнейЗаСчетОрганизации - Выборка.КвоДнейЗаСчетОрганизацииОплачено);
			ТекущаяДатаОкончанияЗаСчетОрганизации	= КонецДня(ДатаНачала + 86400*Макс(0, КвоДнейЗаСчетОрганизации - 1));
		КонецЕсли;
	
		ТекущаяДатаНачала						= ДатаНачала;
		ТекущаяДатаОкончания 					= КонецДня(Мин(КонецМесяца(ТекущаяДатаНачала), ДатаОкончания, ?(КвоДнейЗаСчетОрганизации = 0, ДатаОкончания, ТекущаяДатаОкончанияЗаСчетОрганизации) ));
		
		Пока ТекущаяДатаНачала <= ТекущаяДатаОкончания Цикл
			// строка движений
			НоваяСтрока = Начисления.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
			
			Если Выборка.СуммированныйУчетРабочегоВремени = Истина  Тогда
				ВидУчетаВремени = Перечисления.ИНАГРО_ВидыУчетаВремени.ПоЧасам;
			Иначе
				ВидУчетаВремени = Перечисления.ИНАГРО_ВидыУчетаВремени.ПоДням;
			КонецЕсли;
			
			// Свойства
			НоваяСтрока.Авторасчет          		= Истина;
			НоваяСтрока.ДатаНачала       			= НачалоДня(ТекущаяДатаНачала);
			НоваяСтрока.ДатаОкончания				= КонецДня(ТекущаяДатаОкончания);
			НоваяСтрока.БазовыйПериодНачало       	= ПериодРегистрации;
			НоваяСтрока.БазовыйПериодКонец			= КонецМесяца(ПериодРегистрации);
			
			Если ТекущаяДатаОкончания <= ТекущаяДатаОкончанияЗаСчетОрганизации И Выборка.КвоДнейЗаСчетОрганизации > 0 Тогда
				НоваяСтрока.ВидРасчета					= Выборка.ВидРасчетаЗаСчетОрганизации;
				НоваяСтрока.СпособОтраженияВБухучете	= мВидРасчетаЗаСчетОрганизацииСпособОтраженияВБухучете;			
			Иначе
				НоваяСтрока.ВидРасчета					= Выборка.ВидРасчета;
				НоваяСтрока.СпособОтраженияВБухучете	= мВидРасчетаСпособОтраженияВБухучете;			
			КонецЕсли; 
			
			// Измерения
			НоваяСтрока.Сотрудник                   = Сотрудник;
			НоваяСтрока.Назначение					= Выборка.Назначение;
			
			// Реквизиты
			ИнАгро_ПроведениеРасчетов.ПроставитьДанныеСтроки(Сотрудник, Выборка.Назначение, НоваяСтрока.ДатаНачала, Ссылка, НоваяСтрока);
			Показатели = ОграничениеСУчетомСтажаМеньше6Мес(Выборка.Назначение);
			НоваяСтрока.Показатель1 = Показатели.Показатель1;
			НоваяСтрока.Показатель2 = Показатели.Показатель2;
			НоваяСтрока.ВидУчетаВремениДляСредней	= Выборка.ВидУчетаВремениДляСредней;
			
			Если НоваяСтрока.ВидРасчета = ПланыВидовРасчета.ИНАГРО_Начисления.ОплатаПоСреднемуБЛПоБеременностиИРодам Тогда
				НоваяСтрока.Состояние			= Перечисления.ИНАГРО_СостоянияРаботникаОрганизации.ОтпускПоБеременностиИРодам;
			ИначеЕсли НоваяСтрока.ВидРасчета = ПланыВидовРасчета.ИНАГРО_Начисления.ОтпускПоУходуЗаРебенком Тогда
				НоваяСтрока.Состояние			= Перечисления.ИНАГРО_СостоянияРаботникаОрганизации.ОтпускПоУходуЗаРебенкомДо3Лет;
			Иначе	
				НоваяСтрока.Состояние			= Перечисления.ИНАГРО_СостоянияРаботникаОрганизации.Заболевание;
			КонецЕсли;	
			НоваяСтрока.ПроизошедшееСобытие		= Истина;
			
			ТекущаяДатаНачала = ТекущаяДатаОкончания + 1;
			Если ТекущаяДатаОкончания < ТекущаяДатаОкончанияЗаСчетОрганизации Тогда
				ТекущаяДатаОкончания = Мин(КонецМесяца(ТекущаяДатаНачала), ДатаОкончания, ТекущаяДатаОкончанияЗаСчетОрганизации);
			Иначе
				ТекущаяДатаОкончания = Мин(КонецМесяца(ТекущаяДатаНачала), ДатаОкончания );
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Записать();
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" причины нетрудоспособности
Процедура РассчитатьПараметрыСреднейДокумента() Экспорт
	
	Перем тДень, тМесяц, тГод;
	
	Если Не ЗначениеЗаполнено(Сотрудник) Тогда
		Возврат;
	КонецЕсли;
	
	ЧислоМесяцев = ПричинаНетрудоспособности.ЧислоМесяцев04072015;
	Если ПервичныйБольничныйЛист <> Документы.ИНАГРО_НачислениеПоБольничномуЛисту.ПустаяСсылка() Тогда
		ПериодРасчетаСреднегоНачало	= ПервичныйБольничныйЛист.ПериодРасчетаСреднегоНачало;
		ПериодРасчетаСреднегоКонец	= ПервичныйБольничныйЛист.ПериодРасчетаСреднегоКонец;
		ПроцентОплаты				= ПервичныйБольничныйЛист.ПроцентОплаты;
		СуммаНижнейГраницыСредней	= ПервичныйБольничныйЛист.СуммаНижнейГраницыСредней;
		ТекстСредняяЗППоВсемВидамЭД	= ПервичныйБольничныйЛист.ТекстСредняяЗППоВсемВидамЭД;
		СуммаПределаСредней			= ПервичныйБольничныйЛист.СуммаПределаСредней;
		ОплачивалВзносыМеньше6Месяцев	= ПервичныйБольничныйЛист.ОплачивалВзносыМеньше6Месяцев;
		Стаж = ПервичныйБольничныйЛист.Стаж;
	Иначе
		ПолучитьПериодИПрочиеПараметрыСреднейПоРаботнику();
	КонецЕсли;
		
КонецПроцедуры

// Получение данных
//
Функция РассчитатьСреднююПорядок1266( КомментироватьРасчет = Ложь ) Экспорт	
	
	// очистить расчитываемые поля в ТЧ РасчетСреднего
	Для каждого ТекущаяСтрока Из РасчетСреднего Цикл
		Если ТекущаяСтрока.Авторасчет Тогда
			ТекущаяСтрока.ОтработаноДней = 0;
			ТекущаяСтрока.ОтработаноЧасов = 0;
			ТекущаяСтрока.КалендарныеДни = 0;
			ТекущаяСтрока.Результат = 0;
			ТекущаяСтрока.РезультатПолный = 0;
		КонецЕсли;
	КонецЦикла;
	
	Если  РасчетСреднего.Количество() > 0
		И РасчетСреднего[0].ВидРасчета = ПланыВидовРасчета.ИНАГРО_СреднийЗаработок.ПоОкладу
		И РасчетСреднего[0].Авторасчет Тогда
		
		ПараметрыОклада = ИНАГРО_ПроведениеРасчетов.ПолучитьПараметрыОклада(ДатаНачала, Сотрудник, ПериодРасчетаСреднегоНачало, ПериодРасчетаСреднегоКонец);
		РасчетСреднего[0].Результат			= ПараметрыОклада["Оклад"];
		РасчетСреднего[0].ОтработаноДней	= ПараметрыОклада["НормаДней"];
		РасчетСреднего[0].ОтработаноЧасов	= ПараметрыОклада["НормаЧасов"];
		РасчетСреднего[0].КалендарныеДни	= ПараметрыОклада["КалендарныеДни"];
		
		Возврат Истина;
	КонецЕсли;
	
	// Описание:
	//		1. В колонку Сумма (полная) заполняем все суммы 
	//		соответственно с базами видов расчета средних (больничные, больничные пропорционально)
	//		их сумма должна дать полный доход для расчета средней
	//		2. Больничные пропорционально надо уменьшить относительно отработанного времени
	//		3. И Больничные и Больничные Пропорционально (уже уменьшенные) надо ограничить сверху Суммой предела.
	//
	
	
	Запрос = Новый Запрос;     
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр( "Регистратор",                 Ссылка );
	Запрос.УстановитьПараметр( "ПарамСотрудник",              Сотрудник );
	Запрос.УстановитьПараметр( "ПериодРасчетаСреднегоНачало", ПериодРасчетаСреднегоНачало );
	Запрос.УстановитьПараметр( "ПериодРасчетаСреднегоКонец",  ПериодРасчетаСреднегоКонец );
	
	ДопустимыеНеявки = Новый СписокЗначений;
	
	ЗапросДопустимыеНеявки = Новый Запрос;
	ЗапросДопустимыеНеявки.Текст = 
		"ВЫБРАТЬ
		|	ИНАГРО_Начисления.Ссылка КАК Ссылка
		|ИЗ
		|	ПланВидовРасчета.ИНАГРО_Начисления КАК ИНАГРО_Начисления
		|ГДЕ
		|	ИНАГРО_Начисления.ОбозначениеВТабелеУчетаРабочегоВремени.УважительнаяПричинаДляБольничных";
	
	РезультатДопустимыеНеявки = ЗапросДопустимыеНеявки.Выполнить();
	ВыборкаДопустимыеНеявки   = РезультатДопустимыеНеявки.Выбрать();
	
	Пока ВыборкаДопустимыеНеявки.Следующий() Цикл
		ДопустимыеНеявки.Добавить(ВыборкаДопустимыеНеявки.Ссылка);		
	КонецЦикла;
	
	Запрос.УстановитьПараметр("СписокДопустимыхНеявок", ДопустимыеНеявки);
	
	мНеУчитыватьСовместителейДляСредних = Ложь;
	
    ВидыНалогов = Новый Массив();
	ВидыНалогов.Добавить(Справочники.Налоги.ЕСВИнвалидыУТОГУТОС);
	ВидыНалогов.Добавить(Справочники.Налоги.ЕСВЛетчики);
	ВидыНалогов.Добавить(Справочники.Налоги.ЕСВРаботники);
	ВидыНалогов.Добавить(Справочники.Налоги.ЕСВРаботникиСР);
	Запрос.УстановитьПараметр( "парамНалог", ВидыНалогов);

	//	ВТБазаСреднегоПолная
	Если Истина Тогда
		//	Описание:
		// 		1. Заполняем все базовые суммы.
		//		
		ТекстЗапросаВТ = "
		|	ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|		Основной.НомерСтроки				КАК НомерСтроки,
		|		Основной.Авторасчет					КАК Авторасчет,
		|		Основной.ВидРасчета					КАК ВидРасчета,
		|		Основной.СуммаПредела				КАК СуммаПредела,
		|		Основной.БазовыйПериодНачало		КАК БазовыйПериодНачало,
		|		Основной.БазовыйПериодКонец			КАК БазовыйПериодКонец,
		|		СУММА(Основной.База)				КАК База,
		|		СУММА(Основной.БазаВзноса)			КАК БазаВзноса,
		|		СУММА(Основной.Результат)			КАК Результат,
		|		СУММА(Основной.РезультатПолный)		КАК РезультатПолный,
		|		СУММА(Основной.КалендарныеДниСПраздниками)	КАК КалендарныеДниСПраздниками";
		Если КомментироватьРасчет Тогда
			ТекстЗапросаВТ = ТекстЗапросаВТ + ",
			|       Основной.ВидРасчетаРазрез		КАК ВидРасчетаРазрез
			|ПОМЕСТИТЬ ВТБазаСреднегоПолнаяСКомментариями";
		Иначе
			ТекстЗапросаВТ = ТекстЗапросаВТ + "
			|ПОМЕСТИТЬ ВТБазаСреднегоПолная";
		КонецЕсли;
		ТекстЗапросаВТ = ТекстЗапросаВТ + "
		|	ИЗ (
		|		ВЫБРАТЬ
		|			Начисления.НомерСтроки				КАК НомерСтроки,
		|			Начисления.Авторасчет				КАК Авторасчет,
		|			Начисления.ВидРасчета				КАК ВидРасчета,
		|			Начисления.СуммаПредела				КАК СуммаПредела,
		|			Начисления.БазовыйПериодНачало		КАК БазовыйПериодНачало,
		|			Начисления.БазовыйПериодКонец		КАК БазовыйПериодКонец,
		|			0	КАК База,
		|			0	КАК БазаВзноса,
		|			ВЫБОР КОГДА Начисления.Авторасчет ТОГДА Начисления.РезультатБаза ИНАЧЕ Начисления.Результат КОНЕЦ		КАК Результат,
		|			ВЫБОР КОГДА Начисления.Авторасчет ТОГДА Начисления.РезультатБаза ИНАЧЕ Начисления.РезультатПолный КОНЕЦ	КАК РезультатПолный,
		|			0   КАК КалендарныеДниСПраздниками";
		Если КомментироватьРасчет Тогда
			ТекстЗапросаВТ = ТекстЗапросаВТ + ",
			|			Начисления.ВидРасчетаРазрез КАК ВидРасчетаРазрез
			|		ИЗ РегистрРасчета.ИНАГРО_РасчетСреднегоЗаработка.БазаИНАГРО_Начисления(&парамИзмеренияОсновного,&парамИзмеренияБазового,
			|			&парамРазрезыБазовогоВидРасчета,Регистратор = &Регистратор ) КАК Начисления";
		Иначе
			ТекстЗапросаВТ = ТекстЗапросаВТ + "
			|		ИЗ РегистрРасчета.ИНАГРО_РасчетСреднегоЗаработка.БазаИНАГРО_Начисления(&парамИзмеренияОсновного,&парамИзмеренияБазового
			|			"+ ?(мНеУчитыватьСовместителейДляСредних,",&парамРазрезыБазового",",")+",Регистратор = &Регистратор ) КАК Начисления";
		КонецЕсли;
		ТекстЗапросаВТ = ТекстЗапросаВТ + "
		|		ГДЕ ИСТИНА
		|		// фильтр в случае если не надо учитывать внутренние совмещения: или основное назначение или замена			
		|		"+ ?(мНеУчитыватьСовместителейДляСредних,"И Начисления.НазначениеРазрез.ОсновноеНазначение <> Начисления.Сотрудник","")+"
		|		// -время-календарные без вычета праздников-------------------------------------------	
		|		ОБЪЕДИНИТЬ ВСЕ	
		|		ВЫБРАТЬ
		|			Средняя.НомерСтроки				КАК НомерСтроки,
		|			Средняя.Авторасчет				КАК Авторасчет,
		|			Средняя.ВидРасчета				КАК ВидРасчета,
		|			Средняя.СуммаПредела			КАК СуммаПредела,
		|			Средняя.БазовыйПериодНачало		КАК БазовыйПериодНачало,
		|			Средняя.БазовыйПериодКонец		КАК БазовыйПериодКонец,
		|			0	КАК База,
		|			0	КАК БазаВзноса,
		|			0	КАК Результат,
		|			0	КАК РезультатПолный,
		|			СУММА( ВЫБОР КОГДА Начисления.Сторно 
		|			      ТОГДА -Начисления.ПроизводственныйКалендарьКалендарныеДниСПраздникамиФактическийПериодДействия
		|			      ИНАЧЕ Начисления.ПроизводственныйКалендарьКалендарныеДниСПраздникамиФактическийПериодДействия
		|			КОНЕЦ)       КАК КалендарныеДниСПраздниками
		|"+ ?(КомментироватьРасчет,",
		|			NULL","")+"
		|		ИЗ РегистрРасчета.ИНАГРО_РасчетСреднегоЗаработка КАК Средняя
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.ИНАГРО_Начисления.ДанныеГрафика(
		|		Назначение = &парамСотрудник И ПериодДействияНачало <= &ПериодРасчетаСреднегоКонец И ПериодДействияКонец >= &ПериодРасчетаСреднегоНачало
		|		) КАК Начисления
		|		ПО		Начисления.ПериодДействияНачало <= Средняя.БазовыйПериодКонец  
		|			И	Начисления.ПериодДействияКонец >= Средняя.БазовыйПериодНачало  
		|			И	Начисления.ВидРасчета.УчитыватьКалендарные  
		|			И	Начисления.Сотрудник = Начисления.Назначение  
		|			И   Начисления.ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени.УважительнаяПричинаДляБольничных = ЛОЖЬ		
		|
		|		ГДЕ		Средняя.Авторасчет		
		|			И	Средняя.Регистратор = &Регистратор			
		|			И	Средняя.ВидРасчета = ЗНАЧЕНИЕ(ПланВидовРасчета.ИНАГРО_СреднийЗаработок.ПоЗаработкуБЛФСС)
		|
		|		СГРУППИРОВАТЬ ПО
		|			Средняя.НомерСтроки,
		|			Средняя.Авторасчет,
		|			Средняя.ВидРасчета,
		|			Средняя.СуммаПредела,
		|			Средняя.БазовыйПериодНачало,
		|			Средняя.БазовыйПериодКонец
		|
		|		// - база взносов --------------------------------------------	
		|		ОБЪЕДИНИТЬ ВСЕ	
		|		ВЫБРАТЬ
		|			Средняя.НомерСтроки				КАК НомерСтроки,
		|			Средняя.Авторасчет				КАК Авторасчет,
		|			Средняя.ВидРасчета				КАК ВидРасчета,
		|			Средняя.СуммаПредела			КАК СуммаПредела,
		|			Средняя.БазовыйПериодНачало		КАК БазовыйПериодНачало,
		|			Средняя.БазовыйПериодКонец		КАК БазовыйПериодКонец,
		|			СУММА(Взносы.База)				КАК База,
		|			СУММА(Взносы.БазаВзноса)		КАК БазаВзноса,
		|			0	КАК Результат,
		|			0	КАК РезультатПолный,
		|			0   КАК КалендарныеДниСПраздниками
		|"+ ?(КомментироватьРасчет,",
		|			NULL","")+"
		|		ИЗ РегистрРасчета.ИНАГРО_РасчетСреднегоЗаработка КАК Средняя
		|			
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.ИНАГРО_ВзносыВФонды КАК Взносы
		|		ПО		НАЧАЛОПЕРИОДА(Взносы.БазовыйПериодНачало, МЕСЯЦ) = НАЧАЛОПЕРИОДА(Средняя.БазовыйПериодНачало, МЕСЯЦ)
		|			И	Взносы.Сотрудник = &ПарамСотрудник	
		|			И	Взносы.Налог В (&парамНалог)	
		|			И	Взносы.ПериодРегистрации <	Средняя.ПериодРегистрации
		|			
		|		ГДЕ Средняя.Регистратор = &Регистратор			
		|		СГРУППИРОВАТЬ ПО
		|			Средняя.НомерСтроки,
		|			Средняя.Авторасчет,
		|			Средняя.ВидРасчета,
		|			Средняя.СуммаПредела,
		|			Средняя.БазовыйПериодНачало,
		|			Средняя.БазовыйПериодКонец
		|"+ ?(КомментироватьРасчет,",
		|			NULL","")+"
		|	) КАК Основной	
		|	СГРУППИРОВАТЬ ПО
		|		Основной.НомерСтроки,
		|		Основной.Авторасчет,
		|		Основной.ВидРасчета,
		|		Основной.СуммаПредела,
		|		Основной.БазовыйПериодНачало,
		|		Основной.БазовыйПериодКонец
		
		|ИНДЕКСИРОВАТЬ ПО			
		|	НомерСтроки		
		|";

		Измерения = Новый Массив(2);
		Измерения[0] = "Сотрудник";
		Измерения[1] = "Организация";
		Разрезы = Новый Массив(1);
		Разрезы[0] = "Назначение";
		// Для начислений сопоставляемые измерения основного и базового регистров совпадают.
		Запрос.УстановитьПараметр("парамИзмеренияОсновного", Измерения);
		Запрос.УстановитьПараметр("парамИзмеренияБазового", Измерения);
		Запрос.УстановитьПараметр("парамРазрезыБазового", Разрезы);
		Если мНеУчитыватьСовместителейДляСредних Тогда
			РазрезыВидРасчета = Новый Массив(2);
			РазрезыВидРасчета[0] = "Назначение";
			РазрезыВидРасчета[1] = "ВидРасчета";
		Иначе
			РазрезыВидРасчета = Новый Массив(1);
			РазрезыВидРасчета[0] = "ВидРасчета";
		КонецЕсли;	
		Если КомментироватьРасчет Тогда
			Запрос.УстановитьПараметр("парамРазрезыБазовогоВидРасчета", РазрезыВидРасчета);
		КонецЕсли;
		
		Запрос.Текст = ТекстЗапросаВТ;
		Запрос.Выполнить();

		Если КомментироватьРасчет Тогда
			ТекстЗапросаВТ = "ВЫБРАТЬ
			|	БазаСКомментариями.НомерСтроки КАК НомерСтроки,
			|	БазаСКомментариями.Авторасчет КАК Авторасчет,
			|	БазаСКомментариями.ВидРасчета КАК ВидРасчета,
			|	БазаСКомментариями.СуммаПредела КАК СуммаПредела,
			|	БазаСКомментариями.БазовыйПериодНачало КАК БазовыйПериодНачало,
			|	БазаСКомментариями.БазовыйПериодКонец КАК БазовыйПериодКонец,
			|	СУММА(БазаСКомментариями.База) КАК База,
			|	СУММА(БазаСКомментариями.БазаВзноса) КАК БазаВзноса,
			|	СУММА(БазаСКомментариями.Результат) КАК Результат,
			|	СУММА(БазаСКомментариями.РезультатПолный) КАК РезультатПолный,
			|	СУММА(БазаСКомментариями.КалендарныеДни) КАК КалендарныеДни,
			|	СУММА(БазаСКомментариями.КалендарныеДниСПраздниками) КАК КалендарныеДниСПраздниками
			|ПОМЕСТИТЬ	ВТБазаСреднегоПолная
			|ИЗ
			|	ВТБазаСреднегоПолнаяСКомментариями КАК БазаСКомментариями
			|
			|СГРУППИРОВАТЬ ПО
			|	БазаСКомментариями.НомерСтроки,
			|	БазаСКомментариями.Авторасчет,
			|	БазаСКомментариями.ВидРасчета,
			|	БазаСКомментариями.СуммаПредела,
			|	БазаСКомментариями.БазовыйПериодНачало,
			|	БазаСКомментариями.БазовыйПериодКонец";
			Запрос.Текст = ТекстЗапросаВТ;
			Запрос.Выполнить();
		КонецЕсли;	
		ТекстЗапросаВТБазаСреднегоПолная = "ВТБазаСреднегоПолная";
	КонецЕсли;
	Запрос.Текст = "ВЫБРАТЬ * ИЗ ВТБазаСреднегоПолная";
	
	//	ВТРезультат
 	Если Истина Тогда
		//	Описание:
		//		
		ТекстЗапросаВТ = "
		|	ВЫБРАТЬ
		|		Основной.НомерСтроки			КАК НомерСтроки,
		|		Основной.БазовыйПериодНачало	КАК БазовыйПериодНачало,
		|		Основной.БазовыйПериодКонец		КАК БазовыйПериодКонец,
		|			
		|		ВЫБОР	КОГДА		НЕ Основной.Авторасчет 	
		|					ТОГДА	Основной.Результат
		|				КОГДА		Основной.СуммаПредела < Начисления.Результат 	
		|			        	И	ЕСТЬNULL(Начисления.Результат, 0) <> 0
		|					ТОГДА	ВЫРАЗИТЬ( Основной.Результат * (Основной.СуммаПредела - ЕСТЬNULL(НачисленияНеАвторасчет.Результат,0))/(Начисления.Результат - ЕСТЬNULL(НачисленияНеАвторасчет.Результат,0))  КАК ЧИСЛО(16, 2))
		|				ИНАЧЕ		Основной.Результат
		|		КОНЕЦ								КАК Результат
		|ПОМЕСТИТЬ ВТРезультат	
		|	ИЗ " + ТекстЗапросаВТБазаСреднегоПолная + " КАК Основной
		|			
		|	ЛЕВОЕ СОЕДИНЕНИЕ (		
		|		ВЫБРАТЬ
		|			Основной.БазовыйПериодНачало		КАК БазовыйПериодНачало,
		|			Основной.БазовыйПериодКонец			КАК БазовыйПериодКонец,
		|			СУММА(Основной.Результат)			КАК Результат
		|		ИЗ " + ТекстЗапросаВТБазаСреднегоПолная + " КАК Основной
		|		СГРУППИРОВАТЬ ПО
		|			Основной.БазовыйПериодНачало,
		|			Основной.БазовыйПериодКонец
		|	) КАК Начисления		
		|	ПО		Основной.БазовыйПериодНачало = Начисления.БазовыйПериодНачало
		|		И	Основной.БазовыйПериодКонец = Начисления.БазовыйПериодКонец
		|			
		|	ЛЕВОЕ СОЕДИНЕНИЕ (		
		|		ВЫБРАТЬ
		|			Основной.БазовыйПериодНачало		КАК БазовыйПериодНачало,
		|			Основной.БазовыйПериодКонец			КАК БазовыйПериодКонец,
		|			СУММА(Основной.Результат)			КАК Результат
		|		ИЗ " + ТекстЗапросаВТБазаСреднегоПолная + " КАК Основной
		|		ГДЕ НЕ Основной.Авторасчет
		|		СГРУППИРОВАТЬ ПО
		|			Основной.БазовыйПериодНачало,
		|			Основной.БазовыйПериодКонец
		|	) КАК НачисленияНеАвторасчет		
		|	ПО		Основной.БазовыйПериодНачало = Начисления.БазовыйПериодНачало
		|		И	Основной.БазовыйПериодКонец = Начисления.БазовыйПериодКонец
		|			
		|ИНДЕКСИРОВАТЬ ПО			
		|	НомерСтроки		
		|";
		Запрос.Текст = ТекстЗапросаВТ;
		Запрос.Выполнить();
		ТекстЗапросаВТРезультат = "ВТРезультат";
	КонецЕсли;

	//	ВТКопейкиОкругления
	Если Истина Тогда
		//	Описание:
		// 		3.1 В этой таблице будут только копейки - ошибки округления.
		//		
		ТекстЗапросаВТ = "
		|	ВЫБРАТЬ
		|		Основной.НомерСтрокиКопейки				КАК НомерСтрокиКопейки,
		|		Основной.БазовыйПериодНачало			КАК БазовыйПериодНачало,
		|		Основной.БазовыйПериодКонец				КАК БазовыйПериодКонец,
		|		Основной.Результат-Начисления.Результат	КАК Копейка
		|		
		|ПОМЕСТИТЬ ВТКопейкиОкругления	
		|	ИЗ (		
		|		ВЫБРАТЬ
		|			Результаты.БазовыйПериодНачало		КАК БазовыйПериодНачало,
		|			Результаты.БазовыйПериодКонец		КАК БазовыйПериодКонец,
		|			МИНИМУМ(Результаты.НомерСтроки)		КАК НомерСтрокиКопейки,
		|			СУММА(Результаты.Результат)			КАК Результат
		|		ИЗ " + ТекстЗапросаВТРезультат + " КАК Результаты
		|		СГРУППИРОВАТЬ ПО
		|			Результаты.БазовыйПериодНачало,
		|			Результаты.БазовыйПериодКонец
		|		) КАК Основной		
		|			
		|	ЛЕВОЕ СОЕДИНЕНИЕ (		
		|		ВЫБРАТЬ
		|			БазаСреднегоПолная.БазовыйПериодНачало			КАК БазовыйПериодНачало,
		|			БазаСреднегоПолная.БазовыйПериодКонец			КАК БазовыйПериодКонец,
		|			СУММА(БазаСреднегоПолная.Результат)			КАК Результат
		|		ИЗ " + ТекстЗапросаВТБазаСреднегоПолная + " КАК БазаСреднегоПолная
		|		СГРУППИРОВАТЬ ПО
		|			БазаСреднегоПолная.БазовыйПериодНачало,
		|			БазаСреднегоПолная.БазовыйПериодКонец
		|	) КАК Начисления		
		|	ПО		Основной.БазовыйПериодНачало = Начисления.БазовыйПериодНачало
		|		И	Основной.БазовыйПериодКонец = Начисления.БазовыйПериодКонец
		|			
		|";
		Запрос.Текст = ТекстЗапросаВТ;
		Запрос.Выполнить();
		ТекстЗапросаВТКопейкиОкругления = "ВТКопейкиОкругления";
	КонецЕсли;

	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	Основной.НомерСтроки			КАК НомерСтроки,
	|	Основной.Авторасчет				КАК Авторасчет,
	|	Основной.БазовыйПериодНачало	КАК БазовыйПериодНачало,
	|	Основной.БазовыйПериодКонец		КАК БазовыйПериодКонец,
	|
	|	Основной.База		КАК База,
	|	Основной.БазаВзноса	КАК БазаВзноса,
	|
	|	ВЫБОР КОГДА ЕСТЬNULL(Основной.КалендарныеДниСПраздниками,0) <> 0 ТОГДА Начисления.Результат	ИНАЧЕ 0 КОНЕЦ КАК Результат,
	|
	|	ЕСТЬNULL(КопейкиОкругления.Копейка, 0)	КАК Копейка,
	|
	|	ВЫБОР КОГДА ЕСТЬNULL(Основной.КалендарныеДниСПраздниками,0) <> 0 ТОГДА Основной.РезультатПолный	ИНАЧЕ 0 КОНЕЦ КАК РезультатПолный,
	|	Основной.КалендарныеДниСПраздниками	КАК КалендарныеДни,
	|	Основной.КалендарныеДниСПраздниками	КАК КалендарныеДниСПраздниками,
	|	Неявки.ДопустимыеНеявки	КАК ДопустимыеНеявки
	|ИЗ " + ТекстЗапросаВТБазаСреднегоПолная + " КАК Основной
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ " + ТекстЗапросаВТРезультат + " КАК Начисления
	|ПО		Основной.НомерСтроки = Начисления.НомерСтроки
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ " + ТекстЗапросаВТКопейкиОкругления + " КАК КопейкиОкругления
	|ПО		Основной.НомерСтроки = КопейкиОкругления.НомерСтрокиКопейки
	
	////////////////////////////////////////////
	|ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|	ИНАГРО_НачисленияДанныеГрафика.ПериодРегистрации КАК ПериодРегистрации,
	|		НАЧАЛОПЕРИОДА(ИНАГРО_НачисленияДанныеГрафика.ПериодДействияНачало, МЕСЯЦ) КАК ПериодДействияНачало,
	|		КОНЕЦПЕРИОДА(ИНАГРО_НачисленияДанныеГрафика.ПериодДействияКонец, МЕСЯЦ) КАК ПериодДействияКонец,
	|		СУММА(ИНАГРО_НачисленияДанныеГрафика.ПроизводственныйКалендарьКалендарныеДниСПраздникамиФактическийПериодДействия) КАК ДопустимыеНеявки
	|	ИЗ
	|		РегистрРасчета.ИНАГРО_Начисления.ДанныеГрафика(
	|				Сотрудник = &парамСотрудник
	|					И ВидРасчета В (&СписокДопустимыхНеявок)) КАК ИНАГРО_НачисленияДанныеГрафика
	|	СГРУППИРОВАТЬ ПО
	|		ИНАГРО_НачисленияДанныеГрафика.ПериодРегистрации,
	|		НАЧАЛОПЕРИОДА(ИНАГРО_НачисленияДанныеГрафика.ПериодДействияНачало, МЕСЯЦ),
	|		КОНЕЦПЕРИОДА(ИНАГРО_НачисленияДанныеГрафика.ПериодДействияКонец, МЕСЯЦ)) КАК Неявки	
	|ПО Основной.БазовыйПериодНачало <= Неявки.ПериодДействияКонец
	|	И Основной.БазовыйПериодКонец >= Неявки.ПериодДействияНачало
	//////////////////////////////////////////////////
	|
	|УПОРЯДОЧИТЬ ПО НомерСтроки
	|";

	Запрос.Текст = ТекстЗапроса;
	Выборка = Запрос.Выполнить().Выбрать();
	тБазовыйПериодНачало = Дата('00010101');
	Если КомментироватьРасчет Тогда
		ЗапросКомментарии = Новый Запрос;
		ЗапросКомментарии.МенеджерВременныхТаблиц = Запрос.МенеджерВременныхТаблиц;
		ЗапросКомментарии.Текст = "ВЫБРАТЬ * ИЗ ВТБазаСреднегоПолнаяСКомментариями";
    	ВыборкаКомментарии = ЗапросКомментарии.Выполнить().Выбрать();
		СуммаПределаКомментарий = 0;
	КонецЕсли;	
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.БазовыйПериодНачало <> тБазовыйПериодНачало Тогда
			тБазовыйПериодНачало = Выборка.БазовыйПериодНачало;
			Копейка = Выборка.Копейка;
			КалендарныеДниИзКалендаря  = 1 + День(Выборка.БазовыйПериодКонец) - День(Выборка.БазовыйПериодНачало);
		КонецЕсли;
		
		Если НЕ Выборка.Авторасчет Тогда
			Продолжить;
		КонецЕсли;
	
		СтрокаТабличнойЧасти = РасчетСреднего.Получить( Выборка.НомерСтроки - 1 );
		
		СтрокаТабличнойЧасти.Результат			= Выборка.Результат;  
		СтрокаТабличнойЧасти.РезультатПолный	= Выборка.РезультатПолный;
		
		СтрокаТабличнойЧасти.База				= Выборка.База;
		СтрокаТабличнойЧасти.БазаВзноса			= Выборка.БазаВзноса;
		
		КалендарныеДниИзКалендаря = КалендарныеДниИзКалендаря - ?(Выборка.ДопустимыеНеявки = NULL, 0, Выборка.ДопустимыеНеявки);
		СтрокаТабличнойЧасти.КалендарныеДни	= КалендарныеДниИзКалендаря;
		
		Копейка = 0;
		
	КонецЦикла;
	
	РассчитатьСреднюю();
	
	Записать();
	
КонецФункции  // ЗаполнитьРасчетаСреднего_Заполнение()

// Получение данных
//
Функция РассчитатьРасчетСреднего() Экспорт
	
	// очистить расчитываемые поля в ТЧ РасчетСреднего
	Для каждого ТекущаяСтрока Из РасчетСреднего Цикл
		Если ТекущаяСтрока.Авторасчет Тогда
			ТекущаяСтрока.ОтработаноДней = 0;
			ТекущаяСтрока.ОтработаноЧасов = 0;
			ТекущаяСтрока.КалендарныеДни = 0;
			ТекущаяСтрока.Результат = 0;
			ТекущаяСтрока.РезультатПолный = 0;
		КонецЕсли;
	КонецЦикла;
	
	Записать();
	
	Если  РасчетСреднего.Количество() > 0 
		И РасчетСреднего[0].ВидРасчета = ПланыВидовРасчета.ИНАГРО_СреднийЗаработок.ПоОкладу 
		И РасчетСреднего[0].Авторасчет Тогда
		
		ПараметрыОклада = ИНАГРО_ПроведениеРасчетов.ПолучитьПараметрыОклада(ДатаНачала, Сотрудник, ПериодРасчетаСреднегоНачало, ПериодРасчетаСреднегоКонец, ПричинаНетрудоспособности = Справочники.ИНАГРО_ПричиныНетрудоспособности.ПоБеременностиИРодам);
		РасчетСреднего[0].Результат			= ПараметрыОклада["Оклад"];
		РасчетСреднего[0].РезультатПолный	= ПараметрыОклада["Оклад"];
		РасчетСреднего[0].КалендарныеДни	= 30.44;
		
		РассчитатьСреднюю();
		
		Записать();
		
		Возврат Истина;
		
	КонецЕсли;
	
	НачатьТранзакцию();
	Прочитать();
	ВыборкаПоСредним = СформироватьЗапросПоРасчетСреднего().Выбрать();
	ЗафиксироватьТранзакцию();
	
	// Создадим рабочие наборы записей
	Отказ = Ложь;
	НаборСредних = РегистрыРасчета.ИНАГРО_РасчетСреднегоЗаработка.СоздатьНаборЗаписей();
	НаборСредних.Отбор.Регистратор.Значение = Ссылка;
	Пока ВыборкаПоСредним.Следующий() Цикл
		
		ПроверитьЗаполнениеСтрокиРасчетСреднего(ВыборкаПоСредним, Отказ);
		Если НЕ Отказ Тогда
			// Заполним записи в наборах записей регистров
			ДобавитьСтрокуРасчетаСреднего(ВыборкаПоСредним, НаборСредних);
		КонецЕсли;
		
	КонецЦикла;
	НаборСредних.Записать();
	
	Если Отказ Тогда
		
		// Если есть какие-то проблемы - удаляем движения (тут нет транзакции) 
		// Удаляем движения.
		НаборСредних.Очистить();
		НаборСредних.Записать();
		
		Возврат Не Отказ;
		
	КонецЕсли;
	
	РассчитатьСреднююПорядок1266();
	
	НаборСредних.Очистить();
	НаборСредних.Записать();
	
	РассчитатьСреднюю();
	
	Записать();
	
КонецФункции

// Рассчитываем величину средней
//
Функция РассчитатьСреднюю() Экспорт
		
	СуммаСредней = 0;
	ОплачиваемоеВремя = 0;
	
	Если ВидУчетаВремениДляСредней = Перечисления.ИНАГРО_ВидыУчетаВремениДляСредней.ПоРабочимДням Тогда
		ОплачиваемоеВремя = РасчетСреднего.Итог("ОтработаноДней");
		
	ИначеЕсли ВидУчетаВремениДляСредней = Перечисления.ИНАГРО_ВидыУчетаВремениДляСредней.ПоРабочимЧасам Тогда
		ОплачиваемоеВремя = РасчетСреднего.Итог("ОтработаноЧасов");
		
	Иначе
		ОплачиваемоеВремя = РасчетСреднего.Итог("КалендарныеДни");
		
	КонецЕсли;
	
	СуммаСреднейПолная = ?(ОплачиваемоеВремя = 0 , 0, РасчетСреднего.Итог("Результат") / ОплачиваемоеВремя);
	
	Если ОплачивалВзносыМеньше6Месяцев Тогда
		Если ПричинаНетрудоспособности = Справочники.ИНАГРО_ПричиныНетрудоспособности.ПоБеременностиИРодам Тогда
			СуммаСредней = Макс(СуммаСреднейПолная, СуммаНижнейГраницыСредней);
		Иначе
			СуммаСредней = СуммаСреднейПолная;
		КонецЕсли;
	Иначе
		Если ПричинаНетрудоспособности = Справочники.ИНАГРО_ПричиныНетрудоспособности.ПоБеременностиИРодам Тогда
			СуммаСредней = Макс(Мин(СуммаСреднейПолная,СуммаПределаСредней), СуммаНижнейГраницыСредней);
		Иначе
			СуммаСредней = Мин(СуммаСреднейПолная,СуммаПределаСредней);
		КонецЕсли;	
	КонецЕсли;	
		
КонецФункции  // ЗаполнитьРасчетаСреднего_Заполнение()

// Получение данных
//
Процедура РассчитатьНачисления(Сотрудники, КомментироватьРасчет = Ложь ) Экспорт
	
	// Массивы для хранения индексов строк табличных частей,
	// используются для расчета по одному сотруднику.
	МассивИндексыСтрокНачисления = Новый Массив();
	
	Отказ = Ложь;
	// Перечитаем объект и соберем данные для заполнения наборов записей регистров.
	НачатьТранзакцию();
	Прочитать();
	ВыборкаПоШапкеДокумента = СформироватьЗапросПоШапке().Выбрать();
	
	// позиционируем выборку
	ВыборкаПоШапкеДокумента.Следующий();
	ВыборкаПоНачислениям = СформироватьЗапросПоНачислениям().Выбрать();
	ЗафиксироватьТранзакцию();
	
	// Создадим рабочие наборы записей
	НаборОсновныеНачисления = РегистрыРасчета.ИНАГРО_Начисления.СоздатьНаборЗаписей();
	НаборОсновныеНачисления.Отбор.Регистратор.Значение = Ссылка;
	
	Пока ВыборкаПоНачислениям.Следующий() Цикл
		
		Если НЕ Отказ Тогда
			// Заполним записи в наборах записей регистров
			ДобавитьСтрокуОсновныхНачислений(ВыборкаПоНачислениям, НаборОсновныеНачисления);

			МассивИндексыСтрокНачисления.Добавить(ВыборкаПоНачислениям.НомерСтроки-1);
			
		КонецЕсли;
		
	КонецЦикла;
	НаборОсновныеНачисления.Записать();
	
	Если Отказ Тогда
		
		// Если есть какие-то проблемы - удаляем движения (тут нет транзакции) 
		// Удаляем движения.
		НаборОсновныеНачисления.Очистить();
		НаборОсновныеНачисления.Записать();
		
		Возврат;
		
	КонецЕсли;
	
	// Получим дополнительные записи, имеющие признак сторно, которые необходимо добавить 
	// в текущий набор для того, чтобы в результате сохранения получился максимальный 
	// фактический период действия.
	ТаблицаСторноЗаписей = НаборОсновныеНачисления.ПолучитьДополнение();
	ТаблицаСторноЗаписей.Колонки.Удалить("ПериодРегистрации");
	ТаблицаСторноЗаписей.Колонки.ПериодРегистрацииСторно.Имя = "ПериодРегистрации";
	ТаблицаСторноЗаписей.Колонки.Удалить("ПериодДействияНачало");
	ТаблицаСторноЗаписей.Колонки.ПериодДействияНачалоСторно.Имя = "ПериодДействияНачало";
	ТаблицаСторноЗаписей.Колонки.Удалить("ПериодДействияКонец");
	ТаблицаСторноЗаписей.Колонки.ПериодДействияКонецСторно.Имя = "ПериодДействияКонец";
	Для каждого СтрокаСторно Из ТаблицаСторноЗаписей Цикл
		
		// Заполним записи в наборе записей регистра
		Движение = НаборОсновныеНачисления.Добавить();
		ЗаполнитьЗначенияСвойств(Движение, СтрокаСторно);
		Движение.Сторно						= Истина;
		Движение.Авторасчет					= Истина;
		
		// и в табличной части
		Движение = Начисления.Добавить();
		ЗаполнитьЗначенияСвойств(Движение, СтрокаСторно);
		Движение.ДатаНачала		= СтрокаСторно.ПериодДействияНачало;   
		Если Час(СтрокаСторно.ПериодДействияНачало)=0 И Минута(СтрокаСторно.ПериодДействияНачало)=0 И Секунда(СтрокаСторно.ПериодДействияНачало)=1 Тогда
			// Если это первая секунда дня - начнем с следующего.
			Движение.ДатаНачала = СтрокаСторно.ПериодДействияНачало+86400;
		КонецЕсли;
		Движение.ДатаОкончания	= СтрокаСторно.ПериодДействияКонец; 
		Движение.Сторно						= Истина;
		Движение.Авторасчет					= Истина;

		МассивИндексыСтрокНачисления.Добавить(Движение.НомерСтроки-1);
		
	КонецЦикла;
	НаборОсновныеНачисления.Записать();
		
	// Рассчитываем записи
	// при этом передаем не только набор записей регистра расчета, но и набор записей регисра 
	// накопления со сведениями об отработанном времени.
	ИнАгро_ПроведениеРасчетов.РассчитатьЗаписиРегистраРасчета("ИНАГРО_Начисления", 
														НаборОсновныеНачисления, 
														Начисления, 
														МассивИндексыСтрокНачисления, 
														Сотрудники, 
														КомментироватьРасчет);
	
	// Удаляем движения
	НаборОсновныеНачисления.Очистить();
	НаборОсновныеНачисления.Записать();
	
	Записать();
	
КонецПроцедуры  // РассчитатьНачисления

#КонецОбласти

#Область СлужебныеПроцедурыИФункции 

Процедура ЗаполнитьПоДокументуОснованию(Основание)
	
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ИНАГРО_НачислениеПоБольничномуЛисту") Тогда
		
		// Скопируем параметры начисления
		ПервичныйБольничныйЛист          = Основание;
		ДатаНачала                       = КонецДня(Основание.ДатаОкончания) + 1;
		ДатаОкончания                    = ДатаНачала;
		Организация                      = Основание.Организация;
		Сотрудник                        = Основание.Сотрудник;
		ПричинаНетрудоспособности        = Основание.ПричинаНетрудоспособности;		
		СуммаСредней                     = Основание.СуммаСредней;
		ПериодРасчетаСреднегоНачало      = Основание.ПериодРасчетаСреднегоНачало;
		ПериодРасчетаСреднегоКонец       = Основание.ПериодРасчетаСреднегоКонец;
		ВидУчетаВремениДляСредней        = Основание.ВидУчетаВремениДляСредней;
		ПроцентОплаты                    = Основание.ПроцентОплаты;
		СуммаПределаСредней              = Основание.СуммаПределаСредней;
		ЧислоМесяцев                     = Основание.ЧислоМесяцев;
		Стаж                             = Основание.Стаж;
		СтажВМесяцах 					 = Основание.СтажВМесяцах;
		СтажЗа12МесяцевВМесяцах 		 = Основание.СтажЗа12МесяцевВМесяцах;
		ОграничениеПоМинимальнойЗарплате = Основание.ОграничениеПоМинимальнойЗарплате;
		ОплачивалВзносыМеньше6Месяцев    = Основание.ОплачивалВзносыМеньше6Месяцев;
		
		// Скопируем средний заработок
		РасчетСреднего.Загрузить(Основание.РасчетСреднего.Выгрузить());
		
	КонецЕсли;
	
КонецПроцедуры 

// Получение данных
//
Функция	ПолучитьОграниченияНаСреднюю() Экспорт

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("парамСотрудник",		Сотрудник );
	Запрос.УстановитьПараметр("ДатаНачалаСобытия",	ПериодРасчетаСреднегоКонец ); // 27573
	Запрос.УстановитьПараметр("ДатаНачала",	ДатаНачала ); 
	
	Запрос.УстановитьПараметр("КалендарныхДнейСПраздниками", День(КонецМесяца(ПериодРасчетаСреднегоКонец)) ); // 27573
	Запрос.УстановитьПараметр("КалендарныхДнейСПраздникамиМесяцНачалаБЛ", День(КонецМесяца(ДатаНачала)) );  
	Запрос.УстановитьПараметр("ДатаСобытияДляСрелЗППоЭепоказателям", ДобавитьМесяц(НачалоМесяца(ДатаНачала),-1) ); // 27573
	Запрос.УстановитьПараметр("парамНалог",	Перечисления.ВидыЕСВ.ОсновнаяЗарплата);
	
	//	ВТДанныеГрафика
	Если Истина Тогда
		//	Описание:
		// 		График и норма за месяц дней, часов и календарных дней.
		//		
		ТекстЗапросаВТ = "
	  	|	ВЫБРАТЬ 
	  	|		Работники.ГрафикРаботы    	КАК ГрафикРаботы,
	  	|		СУММА(ГрафикиРаботыПоВидамВремени.ОсновноеЗначение)			КАК НормаДнейЗаМесяц,
	  	|		СУММА(ГрафикиРаботыПоВидамВремени.ДополнительноеЗначение)	КАК НормаЧасовЗаМесяц,
	  	|		СУММА(ГрафикиРаботыПоВидамВремени.ПроизводственныйКалендарьКалендарныеДни)	КАК КалендарныеДни
		|ПОМЕСТИТЬ ВТДанныеГрафика	
	  	|	ИЗ РегистрСведений.ИНАГРО_РаботникиОрганизаций.СрезПоследних(&ДатаНачалаСобытия, Сотрудник = &парамСотрудник) КАК Работники 
	  	|		   
	  	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИНАГРО_ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботыПоВидамВремени
	  	|	ПО		ГрафикиРаботыПоВидамВремени.Дата МЕЖДУ НАЧАЛОПЕРИОДА(&ДатаНачалаСобытия, МЕСЯЦ) И КОНЕЦПЕРИОДА(&ДатаНачалаСобытия, МЕСЯЦ)
		|		И	ГрафикиРаботыПоВидамВремени.ГрафикРаботы = Работники.ГрафикРаботы
	  	|		И	ГрафикиРаботыПоВидамВремени.ВидУчетаВремени = ЗНАЧЕНИЕ(Перечисление.ИНАГРО_ВидыУчетаВремени.ПоДням)
	  	|	СГРУППИРОВАТЬ ПО 
	  	|		Работники.ГрафикРаботы
		|";
		Запрос.Текст = ТекстЗапросаВТ;
		Запрос.Выполнить();
		ТекстЗапросаВТДанныеГрафика = "ВТДанныеГрафика";
	КонецЕсли;
	Запрос.Текст = "ВЫБРАТЬ * ИЗ ВТДанныеГрафика";
	
	МинусДней = "
	|   ВЫБОР	КОГДА ЕСТЬNULL(Дней,0)=0 ТОГДА 0 ИНАЧЕ -Дней КОНЕЦ
	|   "; 
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ДанныеКалендаряБЛ.ГрафикРаботы			КАК ГрафикРаботы,   
	|	ДанныеОМинимальнойЗарплате.Размер/&КалендарныхДнейСПраздниками		КАК МинимальнаяЗПЗаМесяц,   
	|	ЕСТЬNULL(СредняяЗППоВсемВидамЭкономическойДеятельности.Размер,0)	КАК СредняяЗППоВсемВидамЭкономическойДеятельности,   
	|	ЕСТЬNULL(СредняяЗППоВсемВидамЭкономическойДеятельности.Размер/&КалендарныхДнейСПраздниками,0)	КАК СредняяЗППоВсемВидамЭДЗаКлендДень,   
	|   " + ?(ОплачивалВзносыМеньше6Месяцев,"
	|	ВЫБОР	КОГДА ДанныеКалендаряБЛ.НормаДнейЗаМесяц	ЕСТЬ NULL ИЛИ ДанныеКалендаряБЛ.НормаДнейЗаМесяц = 0 ИЛИ ДанныеОПределе.Предел ЕСТЬ NULL 
	|			ТОГДА 0
	|			ИНАЧЕ ДанныеОМинимальнойЗарплате.Размер / ДанныеКалендаряБЛ.НормаДнейЗаМесяц
	|   КОНЕЦ", "
	|	ВЫБОР	КОГДА ДанныеКалендаряБЛ.НормаДнейЗаМесяц	ЕСТЬ NULL ИЛИ ДанныеКалендаряБЛ.НормаДнейЗаМесяц = 0 ИЛИ ДанныеОПределе.Предел ЕСТЬ NULL 
	|			ТОГДА 0
	|			ИНАЧЕ ДанныеОПределе.Предел / ДанныеКалендаряБЛ.НормаДнейЗаМесяц
	|   КОНЕЦ ")+"
    |  											КАК СуммаПределаСредней,
	|   " + ?(ОплачивалВзносыМеньше6Месяцев,"
	|	ВЫБОР	КОГДА ДанныеКалендаряБЛ.НормаЧасовЗаМесяц	ЕСТЬ NULL ИЛИ ДанныеКалендаряБЛ.НормаЧасовЗаМесяц = 0 ИЛИ ДанныеОПределе.Предел ЕСТЬ NULL 
	|			ТОГДА 0
	|			ИНАЧЕ ДанныеОМинимальнойЗарплате.Размер / ДанныеКалендаряБЛ.НормаЧасовЗаМесяц
	|   КОНЕЦ", "
	|	ВЫБОР	КОГДА ДанныеКалендаряБЛ.НормаЧасовЗаМесяц	ЕСТЬ NULL ИЛИ ДанныеКалендаряБЛ.НормаЧасовЗаМесяц = 0 ИЛИ ДанныеОПределе.Предел ЕСТЬ NULL 
	|			ТОГДА 0
	|			ИНАЧЕ ДанныеОПределе.Предел / ДанныеКалендаряБЛ.НормаЧасовЗаМесяц
	|   КОНЕЦ ")+"
    |  											КАК СуммаПределаСреднейПоЧасам
	|
	|
	|// данные о минимальной зарплате
	|ИЗ РегистрСведений.МинимальнаяОплатаТруда.СрезПоследних( НАЧАЛОПЕРИОДА(&ДатаНачалаСобытия, МЕСЯЦ), ) КАК ДанныеОМинимальнойЗарплате
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИНАГРО_СредняяЗППоВсемВидамЭкономическойДеятельности.СрезПоследних(&ДатаСобытияДляСрелЗППоЭепоказателям) КАК СредняяЗППоВсемВидамЭкономическойДеятельности
	|ПО Истина
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ " + ТекстЗапросаВТДанныеГрафика + " КАК ДанныеКалендаряБЛ
	|ПО	ИСТИНА
	|
	|// данные для расчета предела
	|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПределыСтраховыхВзносов.СрезПоследних( НАЧАЛОПЕРИОДА(&ДатаНачалаСобытия, МЕСЯЦ), Налог = &парамНалог) КАК ДанныеОПределе
	|ПО	ИСТИНА
	|";
	
	Запрос.Текст = ТекстЗапроса;
		
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции // ПолучитьОграниченияНаСреднюю()

Функция ПолучитьДанныеОПриеме(ДатаПриемаПервыйРабочийДень)
	
	ЭтоПервыйРабочийДень = Ложь;
	ДатаПриема = Дата('00010101');
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("парамСотрудник",		Сотрудник );
	Запрос.УстановитьПараметр("парамФизЛицо",		Сотрудник.ФизическоеЛицо);
		
	ТекстЗапроса = "
	|	ВЫБРАТЬ
	|       ПриемРаботников.ДатаПриема КАК ДатаПриема,
	|		СУММА(ЕСТЬNULL(Графики.ОсновноеЗначение,0)) КАК ОтработаноДнейСНачалаМесяца
	|   ИЗ (
	|		ВЫБРАТЬ 
	|          	МИНИМУМ(Работники.Период) КАК ДатаПриема
	|		ИЗ РегистрСведений.ИНАГРО_РаботникиОрганизаций КАК Работники
	|   	ГДЕ Работники.Сотрудник = &парамСотрудник
	|       ) КАК ПриемРаботников
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИНАГРО_РаботникиОрганизаций КАК Работники 
	|   	ПО		Работники.Сотрудник = &парамСотрудник
	|			И	Работники.Период = ПриемРаботников.ДатаПриема
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИНАГРО_ГрафикиРаботыПоВидамВремени КАК Графики
	|   	ПО  	Графики.Дата >= НАЧАЛОПЕРИОДА(Работники.Период, МЕСЯЦ)
	|			И	Графики.Дата < Работники.Период
	|			И	Графики.ВидУчетаВремени = ЗНАЧЕНИЕ(Перечисление.ИНАГРО_ВидыУчетаВремени.ПоДням)
	|			// индивидуальные графики и табели не анализируем, так как нас интерисует только норма времени
	|			И	ВЫБОР КОГДА Работники.ГрафикРаботы.ГрафикРаботыНормыВремени <> ЗНАЧЕНИЕ(Справочник.ИНАГРО_ГрафикиРаботы.ПустаяСсылка)
	|						ТОГДА  Работники.ГрафикРаботы.ГрафикРаботыНормыВремени
	|                     ИНАЧЕ Работники.ГрафикРаботы
	|				КОНЕЦ = Графики.ГрафикРаботы
	|    СГРУППИРОВАТЬ ПО
	|       ПриемРаботников.ДатаПриема
	|";
				
	Запрос.Текст = ТекстЗапроса;
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ДатаПриема = Выборка.ДатаПриема;
		ДатаПриемаПервыйРабочийДень = Выборка.ОтработаноДнейСНачалаМесяца = 0;
	КонецЕсли;

	Возврат ДатаПриема;
	
КонецФункции  // ПолучитьДанныеОПриеме()

Функция	ПолучитьГрафикВыслугуПредел()
	
	Перем ДатаПриемаПервыйРабочийДень;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ДатаНачалаСобытия",	ДатаНачала );
	Запрос.УстановитьПараметр("парамСотрудник",		Сотрудник );
	Запрос.УстановитьПараметр("парамФизЛицо",		Сотрудник.ФизическоеЛицо );
	Запрос.УстановитьПараметр("парамОрганизация",	Организация );
	Запрос.УстановитьПараметр("ОтпускПоУходуЗаРебенком", ПланыВидовРасчета.ИНАГРО_Начисления.ОтпускПоУходуЗаРебенком ); 
	Запрос.УстановитьПараметр("парамВидЕСВ",		Перечисления.ВидыЕСВ.ОсновнаяЗарплата);
	Запрос.УстановитьПараметр("парамНалог",			Справочники.Налоги.ЕСВФОТРаботники);

	
	ДатаПриема = ПолучитьДанныеОПриеме(ДатаПриемаПервыйРабочийДень);
	
	СтруктураСтажа = ИНАГРО_ПроведениеРасчетов.РасчетСтраховогоСтажа(ДатаНачала, Организация, Сотрудник);
	
	//	ВТПараметрыВыслуги
	Если Истина Тогда
		//	Описание:
		// 		
		//		
		ТекстЗапросаВТ = "
		|	ВЫБРАТЬ 
		|		ПараметрыВыслуги.Ставка  			КАК Ставка,
		|		ПараметрыВыслуги.Порог   		 	КАК Порог,
		|		МАКСИМУМ(ЕСТЬNULL(Выслуга.Порог,0))	КАК НижнийПорог
		|
		|ПОМЕСТИТЬ ВТПараметрыВыслуги	
		|	ИЗ РегистрСведений.ИНАГРО_ШкалаВыслугиЛет.СрезПоследних(&ДатаНачалаСобытия, ВидСтажа = ЗНАЧЕНИЕ(Справочник.ИНАГРО_ВидыСтажа.СтраховойСтажДляБольничного) 
		|      ) КАК ПараметрыВыслуги
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИНАГРО_ШкалаВыслугиЛет.СрезПоследних(&ДатаНачалаСобытия, 
		|		ВидСтажа	= ЗНАЧЕНИЕ(Справочник.ИНАГРО_ВидыСтажа.СтраховойСтажДляБольничного)
		|       ) КАК Выслуга
		|	ПО		Выслуга.Порог < ПараметрыВыслуги.Порог
		|   
		|   ГДЕ  ПараметрыВыслуги.ВидСтажа = ЗНАЧЕНИЕ(Справочник.ИНАГРО_ВидыСтажа.СтраховойСтажДляБольничного)
		|
		|	СГРУППИРОВАТЬ ПО 
		|		ПараметрыВыслуги.Ставка,
		|		ПараметрыВыслуги.Порог
		|";
		Запрос.Текст = ТекстЗапросаВТ;
		Запрос.Выполнить();
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ЛетОбщегоСтажа", СтруктураСтажа.ЛетОбщегоСтажа);
	Запрос.УстановитьПараметр("МесяцевОбщегоСтажа", СтруктураСтажа.МесяцевОбщегоСтажа);
	Запрос.УстановитьПараметр("ДнейОбщегоСтажа", СтруктураСтажа.ДнейОбщегоСтажа);
	Запрос.УстановитьПараметр("ЛетСтажаЗа12Месяцев",СтруктураСтажа.ЛетСтажаЗа12Месяцев); 
	Запрос.УстановитьПараметр("МесяцевСтажаЗа12Месяцев", СтруктураСтажа.МесяцевСтажаЗа12Месяцев); 
	ТекстЗапроса = "ВЫБРАТЬ
		|	Работники.ГрафикРаботы КАК ГрафикРаботы,
		|	ОсновноеНачисление.ВидРасчета КАК ОсновнойВидРасчета,
		|	СтавкиВыслуги.Ставка * 100 КАК ПроцентОплаты,
		|	&ЛетОбщегоСтажа КАК ЛетОбщегоСтажа,
		|	&МесяцевОбщегоСтажа КАК МесяцевОбщегоСтажа,
		|	&ДнейОбщегоСтажа КАК ДнейОбщегоСтажа,
		|	&ЛетСтажаЗа12Месяцев КАК ЛетСтажаЗа12Месяцев,
		|	&МесяцевСтажаЗа12Месяцев КАК МесяцевСтажаЗа12Месяцев
		|ИЗ
		|	РегистрСведений.ИНАГРО_РаботникиОрганизаций.СрезПоследних(&ДатаНачалаСобытия, Сотрудник = &парамСотрудник) КАК Работники
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИНАГРО_ПлановыеНачисленияРаботниковОрганизаций.СрезПоследних(
		|				&ДатаНачалаСобытия,
		|				Сотрудник = &парамСотрудник
		|					И ВидНачисления = ЗНАЧЕНИЕ(Перечисление.ИНАГРО_ВидыНачисленийРаботникаОрганизации.Основное)) КАК ОсновноеНачисление
		|		ПО (ИСТИНА)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПараметрыВыслуги КАК СтавкиВыслуги
		|		ПО (&ЛетОбщегоСтажа >= СтавкиВыслуги.НижнийПорог)
		|			И (&ЛетОбщегоСтажа < СтавкиВыслуги.Порог)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПределыСтраховыхВзносов.СрезПоследних(
		|				&ДатаНачалаСобытия,
		|				ВидЕСВ = &парамВидЕСВ
		|					И ИНАГРО_Налог = &парамНалог) КАК ДанныеОПределе
		|		ПО (ИСТИНА)";
		
	Запрос.Текст = ТекстЗапроса;
		
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции  // ПолучитьГрафикВыслугуПредел()

// Новый порядок расчета средней
// постановление Кабмина №439 от 26.06.15.
Функция	ПолучитьОграниченияНаСреднюю04072015() Экспорт

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("парамСотрудник",		Сотрудник);
	Запрос.УстановитьПараметр("ПериодРасчетаСреднегоКонец",	ПериодРасчетаСреднегоКонец);
	Запрос.УстановитьПараметр("ДатаНачала",	ДатаНачала); 
	
	Запрос.УстановитьПараметр("СреднемесячныеКалендарныеДни", 30.44);
	
	Запрос.УстановитьПараметр("парамНалог",	Перечисления.ВидыЕСВ.ОсновнаяЗарплата);
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ВЫБОР	КОГДА ДанныеОПределе.Предел ЕСТЬ NULL 
	|			ТОГДА 0
	|			ИНАЧЕ ДанныеОПределе.Предел / &СреднемесячныеКалендарныеДни
	|   КОНЕЦ   КАК  СуммаПределаСредней
	|
	|// данные для расчета предела
	|ИЗ РегистрСведений.ПределыСтраховыхВзносов.СрезПоследних( НАЧАЛОПЕРИОДА(&ПериодРасчетаСреднегоКонец, МЕСЯЦ), ВидЕСВ = &парамНалог) КАК ДанныеОПределе
	|";
	
	Запрос.Текст = ТекстЗапроса;
		
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции // ПолучитьОграниченияНаСреднюю04072015()

// Получает дату начала события
//
Функция	ПолучитьДатуНачалаСобытия()
	
	ДатаНачСоб = ДатаНачала;
	ДокПервичныйБольничныйЛист = ПервичныйБольничныйЛист;        		
	Пока ДокПервичныйБольничныйЛист <> Документы.ИНАГРО_НачислениеПоБольничномуЛисту.ПустаяСсылка() Цикл
		ДатаНачСоб = ПервичныйБольничныйЛист.ДатаНачала;
		ДокПервичныйБольничныйЛист = ДокПервичныйБольничныйЛист.ПервичныйБольничныйЛист;
	КонецЦикла; 
	
	Возврат ДатаНачСоб;
	
КонецФункции 

// Получение данных
//
Функция ОграничениеСУчетомСтажаМеньше6Мес(Назначение) Экспорт
	
	Если ОплачивалВзносыМеньше6Месяцев Тогда
		СуммаСреднейСУчетомПроцента = СуммаСредней * ПроцентОплаты / 100;
		СуммаМинимальнойИзРасчетаНаМесяц = Окр(ОграничениеПоМинимальнойЗарплате*?(ПричинаНетрудоспособности = Справочники.ИНАГРО_ПричиныНетрудоспособности.ПоБеременностиИРодам,2,1) / 30.44,2);
		Если СуммаСреднейСУчетомПроцента > СуммаМинимальнойИзРасчетаНаМесяц Тогда 
			Показатель1 = ?(Сотрудник = Назначение,СуммаМинимальнойИзРасчетаНаМесяц,0);
			Показатель2 = 100;
		Иначе
			Показатель1 = ?(Сотрудник = Назначение,СуммаСредней,0);
			Показатель2 = ПроцентОплаты;
		КонецЕсли
	Иначе	
		Показатель1  	        	= ?(Сотрудник = Назначение,СуммаСредней,0); // только для основного назначения
		Показатель2  	        	= ПроцентОплаты;
	КонецЕсли;
	Показатели = Новый Структура;
	Показатели.Вставить("Показатель1", Показатель1);
	Показатели.Вставить("Показатель2", Показатель2);
	
	Возврат Показатели;

КонецФункции

Функция СоздатьСтрокуРасчетСреднего( ВидРасч, СуммаПредела, Начало, Конец ) 
	
	СтрокаТабличнойЧасти =  РасчетСреднего.Добавить();
	
	СтрокаТабличнойЧасти.Авторасчет 			= Истина;
	СтрокаТабличнойЧасти.ВидРасчета 			= ВидРасч;
	СтрокаТабличнойЧасти.БазовыйПериодНачало 	= Начало;
	СтрокаТабличнойЧасти.БазовыйПериодКонец 	= Конец;
	СтрокаТабличнойЧасти.СуммаПредела 			= СуммаПредела;
	СтрокаТабличнойЧасти.КоэффициентПовышенияОкладов = 1;
	
КонецФункции  // СоздатьСтрокуРасчетСреднего()

Процедура ПолучитьПериодИПрочиеПараметрыСреднейПоРаботнику() 
	Перем ДатаОкончанияСобытия, ДатаПриемаПервыйРабочийДень;
	Перем тДень, тМесяц, тГод;
	Перем тДень12, тМесяц12, тГод12;
	// -1- работает дольше 12-и месяцев
	// -2- работает меньше 12 месяцев, но дольше 1-го месяца
	// -3- работает меньше целого месяца, но на больничный не в первый рабочий день
	// -4- на больничный в первый рабочий день, нет начисленной зарплаты.
	ДатаНачалаСобытия = ДатаНачала;
	ДатаПриема = ПолучитьДанныеОПриеме(ДатаПриемаПервыйРабочийДень);
	НеПроработалЦелогоМесяца = Ложь;
	Если НЕ ЗначениеЗаполнено(ДатаПриема) Тогда
		Возврат;
	КонецЕсли;
	
	Если ДобавитьМесяц(НачалоМесяца(ДатаНачалаСобытия), -ЧислоМесяцев)>= ДатаПриема Тогда
		// -1- работает дольше 12-и месяцев
		ПериодРасчетаСреднегоНачало	= ДобавитьМесяц(НачалоМесяца(ДатаНачалаСобытия), -ЧислоМесяцев);
		ПериодРасчетаСреднегоКонец	= НачалоДня(НачалоМесяца(ДатаНачалаСобытия)-1);
		
	ИначеЕсли КонецМесяца(ДобавитьМесяц(ДатаНачалаСобытия, -1)) >= ДатаПриема Тогда
		// -2-3-
		Если День(ДатаПриема) = 1 Тогда
			// -2- работает меньше 12-и месяцев, но дольше 1-го месяца
			// если дата приема первый рабочий день месяца, то месяц считаем целым.
			ПериодРасчетаСреднегоНачало	= ДатаПриема;	
			ПериодРасчетаСреднегоКонец	= НачалоДня(НачалоМесяца(ДатаНачалаСобытия)-1);
		ИначеЕсли ДобавитьМесяц(НачалоМесяца(ДатаНачалаСобытия), -1) > ДатаПриема Тогда
			// -2- работает меньше 12-и месяцев, но дольше 1-го месяца
			// если дата приема не первый календарный день месяца, но есть целые отработанные месяцы.
			ПериодРасчетаСреднегоНачало	= ДобавитьМесяц(НачалоМесяца(ДатаПриема),1);
			ПериодРасчетаСреднегоКонец	= НачалоДня(НачалоМесяца(ДатаНачалаСобытия)-1);
		Иначе
			// -3- работает меньше целого месяца, но на больничный не в первый календарный день месяца 
			//    - заполняем реальный период с даты приема.
			ПериодРасчетаСреднегоНачало	= ДатаПриема;	
			ПериодРасчетаСреднегоКонец	= НачалоДня(ДатаНачалаСобытия-1);
			НеПроработалЦелогоМесяца = Истина;
		КонецЕсли;
		
	ИначеЕсли ДатаНачалаСобытия = ДатаПриема Тогда
		// -4- на больничный в первый рабочий день, нет начисленной зарплаты
		ПериодРасчетаСреднегоНачало	= ДатаПриема;
		ПериодРасчетаСреднегоКонец	= ДатаПриема;
		НеПроработалЦелогоМесяца = Истина;
		
	Иначе
		// -3- работает меньше целого месяца, но на больничный не в первый календарный день месяца 
		//    - заполняем реальный период с даты приема
		// прием в месяце начала события.
		ПериодРасчетаСреднегоНачало	= ДатаПриема;	
		ПериодРасчетаСреднегоКонец	= НачалоДня(ДатаНачалаСобытия-1);
		НеПроработалЦелогоМесяца = Истина;
		
	КонецЕсли;
	ВыборкаПараметры = ПолучитьГрафикВыслугуПредел();
	Если ВыборкаПараметры.Следующий() Тогда
 		// - Процент оплаты
		Если ПричинаНетрудоспособности = Справочники.ИНАГРО_ПричиныНетрудоспособности.COVID_19 Тогда
			ПроцентОплаты = 50
		Иначе	
			ПроцентОплаты	= ?(ПричинаНетрудоспособности = Справочники.ИНАГРО_ПричиныНетрудоспособности.ПоБеременностиИРодам ИЛИ ПричинаНетрудоспособности = Справочники.ИНАГРО_ПричиныНетрудоспособности.ТравмаНаПроизводстве, 100, ВыборкаПараметры.ПроцентОплаты);
		КонецЕсли;
		// - Стаж
		тДень12 = 0; тМесяц12 = 0; тГод12 = 0;
		СтажВМесяцах = 0; СтажЗа12МесяцевВМесяцах = 0;
		СтажВМесяцах = ?((ВыборкаПараметры.ЛетОбщегоСтажа*12 + ВыборкаПараметры.МесяцевОбщегоСтажа)>=96,96,(ВыборкаПараметры.ЛетОбщегоСтажа*12 + ВыборкаПараметры.МесяцевОбщегоСтажа));

		Стаж12 = ""; 
		Если ВыборкаПараметры.ЛетСтажаЗа12Месяцев = 0 И ВыборкаПараметры.МесяцевСтажаЗа12Месяцев < 6 Тогда
			Если Стаж = "" И ДатаНачала >= '20150101000000' Тогда 
				ОплачивалВзносыМеньше6Месяцев = Истина
			КонецЕсли; 
			Стаж12 = Символы.ПС + НСтр("ru='(стаж за последние 12 мес. меньше 182 дн.)';uk='(стаж за останні 12 міс. менше 182 дн.)'");   
			СтажЗа12МесяцевВМесяцах = ВыборкаПараметры.МесяцевСтажаЗа12Месяцев;
		Иначе
			ОплачивалВзносыМеньше6Месяцев = Ложь;
			Если ВыборкаПараметры.ЛетСтажаЗа12Месяцев > 0 Тогда 
				СтажЗа12МесяцевВМесяцах = 12;
			Иначе
				СтажЗа12МесяцевВМесяцах = ВыборкаПараметры.МесяцевСтажаЗа12Месяцев;
			КонецЕсли;	
		КонецЕсли;
		Стаж = НСтр("ru='Стаж для больничного: ';uk='Стаж для лікарняного: '") + ВыборкаПараметры.ЛетОбщегоСтажа + НСтр("ru='г.';uk='р.'") + ВыборкаПараметры.МесяцевОбщегоСтажа + НСтр("ru='мес.';uk='міс.'") +ВыборкаПараметры.ДнейОбщегоСтажа+НСтр("ru='д.';uk='д.'"); 

		ОсновнойВидРасчета = ВыборкаПараметры.ОсновнойВидРасчета;
		
		ВидУчетаВремениДляСредней = Перечисления.ИНАГРО_ВидыУчетаВремениДляСредней.ПоКалендарнымДнямСПраздниками; 
		// - Пределы средней
		ВыборкаОграниченя	= ПолучитьОграниченияНаСреднюю04072015();
		Если ВыборкаОграниченя.Следующий() Тогда
			СуммаПределаСредней = ВыборкаОграниченя.СуммаПределаСредней;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ПолучитьПериодПоРаботнику()

Процедура ВыполнитьОтменуПроведенияДокумента() Экспорт
	
	ЭтотОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
	
КонецПроцедуры

#КонецОбласти 

#КонецЕсли
