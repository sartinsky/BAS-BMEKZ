#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда  
	
Перем ПараметрыУчетаЭлеватора;
Перем СобственноеПодразделение;

#Область ОбработчикиСобытий

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	ТипДанныхЗаполнения = ТипЗнч(ДанныеЗаполнения);
	Если ДанныеЗаполнения <> Неопределено И ТипДанныхЗаполнения <> Тип("Структура")
		И Метаданные().ВводитсяНаОсновании.Содержит(ДанныеЗаполнения.Метаданные()) Тогда
		ЗаполнитьПоДокументуОснованию(ДанныеЗаполнения);
	КонецЕсли;
	
	ИНАГРО_ЭлеваторЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект);	

	ЗаполнениеДокументов.Заполнить(ЭтотОбъект, ДанныеЗаполнения);	
		
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда		
		Возврат;		
	КонецЕсли;
	
	ОбновитьПараметрыУчетаЭлеватора();

	ЕстьЛабораторныйАнализ = Ложь;
	Для Каждого СтрокаТабличнойЧасти Из СписокТТН Цикл
		Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.ЛабораторныйАнализ) Тогда
			ЕстьЛабораторныйАнализ = Истина;
			Прервать;
		КонецЕсли;			
	КонецЦикла;
	
	Если НЕ Отказ Тогда
		
		ПараметрыДляРасчетаЗачетногоВеса = Новый Структура(
			"Ссылка, Дата, Организация,
			|Владелец, ДоговорКонтрагента, Номенклатура,
			|Склад, Влажность, СорнаяПримесь,
			|ФизическийВес, ЗачетныйВес,     
			|");
		ЗаполнитьЗначенияСвойств(ПараметрыДляРасчетаЗачетногоВеса, ЭтотОбъект);

		Для Каждого СтрокаТабличнойЧасти Из СписокТТН Цикл
		
			ЗаполнитьЗначенияСвойств(ПараметрыДляРасчетаЗачетногоВеса, СтрокаТабличнойЧасти);

			СтрокаТабличнойЧасти.ЗачетныйВес = ИНАГРО_Элеватор.ЗачетныйВесПриПроведении(ПараметрыДляРасчетаЗачетногоВеса);
			
		КонецЦикла;
		
		ФизическийВес = СписокТТН.Итог("ФизическийВес");
		
	КонецЕсли;
	
	Для Каждого СтрокаТабличнойЧасти Из СписокТТН Цикл
		Номенклатура = СтрокаТабличнойЧасти.Номенклатура;
		Прервать;
	КонецЦикла;
	
	//Если НЕ ПараметрыУчетаЭлеватора.ОтключитьАвтоматическоеНачислениеУслуг Тогда		
	Если НЕ НеПереформировыватьАвтоматически Тогда		
		ЗаполнитьУслуги();		
	КонецЕсли;	
	
КонецПроцедуры 

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	Перем Заголовок, СтруктураШапкиДокумента;
	Перем ТаблицаПоКультурам;
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКПроведению(ЭтотОбъект);
	Если РучнаяКорректировка Тогда
		Возврат;
	КонецЕсли; 
	   
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначенияБПВызовСервера.ПредставлениеДокументаПриПроведении(Ссылка);
	
	Если РежимПроведения = РежимПроведенияДокумента.Неоперативный Тогда		
		Если НЕ ПроверитьЗаполнение() Тогда
			Отказ = Истина;
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(МестоХранения) И МестоХранения.Владелец <> Склад Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Место хранения %2 не принадлежит складу %1!';uk='Місце зберігання %2 не належить складу %1!'"), Склад, МестоХранения);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , , , Отказ);
	КонецЕсли;
	
	ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента);	

	ПодготовитьПараметрыУчетнойПолитики(СтруктураШапкиДокумента, Отказ, Заголовок);	
	
	ДополнитьСтруктуруШапкиНужнымиДанными(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	ПодготовитьТаблицуПоКультурам(СтруктураШапкиДокумента, ТаблицаПоКультурам, Отказ, Заголовок);
	
	// Движения по документу
	Если НЕ Отказ Тогда
		ПроводкиПоРегистрамЭлеватора(РежимПроведенияДокумента, СтруктураШапкиДокумента, ТаблицаПоКультурам, Отказ, Заголовок);		
	КонецЕсли;

	Движения.Хозрасчетный.ВыполнитьДействияПередЗаписьюДвижений();

	ПроведениеСервер.ПодготовитьНаборыЗаписейКЗаписиДвижений(ЭтотОбъект);	

КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКОтменеПроведения(ЭтотОбъект);
	Движения.Записать();
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)

	Дата = НачалоДня(ОбщегоНазначения.ТекущаяДатаПользователя());
	Ответственный = Пользователи.ТекущийПользователь(); 	
		
КонецПроцедуры

#КонецОбласти

#Область Проведение

// Процедура формирует структуру шапки документа и дополнительных полей.
//
Процедура ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента) Экспорт

	// Дерево значений, содержащее имена необходимых полей в запросе по шапке.
	Перем ДеревоПолейЗапросаПоШапке;	
	
	СтруктураШапкиДокумента = ОбщегоНазначенияРед12.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	
КонецПроцедуры

// Процедура определяет параметры учетной политики
//
Процедура ПодготовитьПараметрыУчетнойПолитики(СтруктураШапкиДокумента, Отказ, Заголовок)
	
	СтруктураШапкиДокумента.Вставить("ЕстьНалогНаПрибыльДо2015", УчетнаяПолитика.ПлательщикНалогаНаПрибыльДо2015(СтруктураШапкиДокумента.Организация, СтруктураШапкиДокумента.Дата));
	СтруктураШапкиДокумента.Вставить("ЕстьНДС",                  УчетнаяПолитика.ПлательщикНДС(СтруктураШапкиДокумента.Организация, СтруктураШапкиДокумента.Дата));
	
КонецПроцедуры

Процедура ДополнитьСтруктуруШапкиНужнымиДанными(СтруктураШапкиДокумента, Отказ, Заголовок)
	
	СтруктураШапкиДокумента.Вставить("Количество", 0);
	СтруктураШапкиДокумента.Вставить("Поставщик",  Справочники.Контрагенты.ПустаяСсылка());	
	СтруктураШапкиДокумента.Вставить("Откуда",     Склад);			
		
КонецПроцедуры

Процедура ПодготовитьТаблицуПоКультурам(СтруктураШапкиДокумента, ТаблицаПоКультурам, Отказ, Заголовок);
	
	СтруктураПолей = Новый Структура();
	СтруктураПростыхПолей = Новый Структура();
	СтруктураСложныхПолей = Новый Структура();
	
	СтруктураПолей.Вставить("Ссылка", "Ссылка");
	СтруктураПолей.Вставить("Дата",                        "Ссылка.Дата");	                                             
	СтруктураПолей.Вставить("Организация",                 "Ссылка.Организация");
	СтруктураПолей.Вставить("ОтражатьВБухгалтерскомУчете", "Ссылка.ОтражатьВБухгалтерскомУчете");	                                                                                             
	СтруктураПолей.Вставить("Владелец",                    "Ссылка.Владелец");	
	СтруктураПолей.Вставить("ДоговорКонтрагента",          "Ссылка.ДоговорКонтрагента");
	СтруктураПолей.Вставить("ВидХранения",                 "Ссылка.ВидХранения");
	СтруктураПолей.Вставить("Склад" ,                      "Ссылка.Склад");
	СтруктураПолей.Вставить("МестоХранения",               "Ссылка.МестоХранения");
	СтруктураПолей.Вставить("Период",                      "Ссылка.Дата");	                                             
	СтруктураПолей.Вставить("Получатель",                  "Ссылка.Получатель");      
	СтруктураПолей.Вставить("ДоговорПолучателя",           "Ссылка.ДоговорПолучателя");
	СтруктураПолей.Вставить("Номенклатура",                "Номенклатура");
	СтруктураПолей.Вставить("Урожай",                      "Ссылка.Урожай");
	СтруктураПолей.Вставить("ФизическийВес",               "ФизическийВес");
	СтруктураПолей.Вставить("Вес",                         "ФизическийВес");
	СтруктураПолей.Вставить("ЛабораторныйАнализ",          "ЛабораторныйАнализ");	
	СтруктураПолей.Вставить("НомерАнализа",                "НомерАнализа");
	СтруктураПолей.Вставить("Влажность",                   "Влажность");                     
	СтруктураПолей.Вставить("СорнаяПримесь",               "СорнаяПримесь");
	СтруктураПолей.Вставить("ЗерноваяПримесь",             "ЗерноваяПримесь");
	СтруктураПолей.Вставить("ЗачетныйВес",                 "ЗачетныйВес");
	СтруктураПолей.Вставить("Услуга",                      "Номенклатура.Услуга");
	СтруктураПолей.Вставить("Количество",                  "ФизическийВес");
	СтруктураПолей.Вставить("СчетУчетаБУ",                 "СчетУчетаБУ");	
	СтруктураПолей.Вставить("НоменклатурнаяГруппа",        "Номенклатура.НоменклатурнаяГруппа");      
	
	//СтруктураПолей.Вставить("БланкСтрогогоУчета"			  , "Номенклатура.БланкСтрогогоУчета");				
	//СтруктураПолей.Вставить("НалоговоеНазначение"			  , "Номенклатура.НоменклатурнаяГруппа.НалоговоеНазначениеВПроизводстве");	
	//СтруктураПолей.Вставить("ВидНалоговойДеятельности"		  , "Номенклатура.НоменклатурнаяГруппа.НалоговоеНазначениеВПроизводстве.ВидНалоговойДеятельности");	
	//СтруктураПолей.Вставить("ВидДеятельностиНДС"			  , "Номенклатура.НоменклатурнаяГруппа.НалоговоеНазначениеВПроизводстве.ВидДеятельностиНДС");
	//СтруктураПолей.Вставить("Амортизируется"     			  , "Номенклатура.НоменклатурнаяГруппа.НалоговоеНазначениеВПроизводстве.Амортизируется");		
	////СтруктураПростыхПолей.Вставить("ДокументОприходования"    ,Неопределено );
	
	СтруктураПростыхПолей.Вставить("Откуда",                      Справочники.Склады.ПустаяСсылка());
	СтруктураПростыхПолей.Вставить("Поставщик",                   Справочники.Контрагенты.ПустаяСсылка());
	СтруктураПростыхПолей.Вставить("ВидДокумента",                СтруктураШапкиДокумента.ВидДокумента);		
	СтруктураПростыхПолей.Вставить("Себестоимость",               0);
	СтруктураПростыхПолей.Вставить("ВходящийНДС",                 0 );	
	СтруктураПростыхПолей.Вставить("Валюта",                      Неопределено );	
	СтруктураПростыхПолей.Вставить("КоэффОплаты",                 1 );
	СтруктураПростыхПолей.Вставить("ОтражатьВМеждународномУчете", Ложь);
	// для УПП
	СтруктураПростыхПолей.Вставить("ПроводкиСуммаБезНДСРегл",     0);
	СтруктураПростыхПолей.Вставить("КоличествоМест",              0);
	
	СтруктураПростыхПолей.Вставить("ВидОперацииВвозаВывозаСобственногоЗерна", Перечисления.ИНАГРО_ВидыОперацийВвозаВывозаСобственногоЗерна.РеализацияТоваровУслуг);
	СтруктураПолей.Вставить("ПоставщикПолучатель", "Ссылка.Владелец");
	СтруктураСложныхПолей.Вставить("ДокументОприходования", " ЕСТЬNULL(Док.ТТН, Док.Ссылка)");
	
	РезультатЗапросаПоСырью = ОбщегоНазначенияРед12.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "СписокТТН", СтруктураПолей, СтруктураПростыхПолей, СтруктураСложныхПолей);	
	
	ТаблицаПоКультурам = РезультатЗапросаПоСырью.Выгрузить();
	
	ТаблицаПоКультурам.Колонки.Добавить("Регистратор");	
	ТаблицаПоКультурам.ЗаполнитьЗначения(ЭтотОбъект,   "Регистратор");
	
КонецПроцедуры

Процедура ПроводкиПоРегистрамЭлеватора(РежимПроведенияДокумента, СтруктураШапкиДокумента, ТаблицаПоКультурам, Отказ, Заголовок)
	
	// обнуляем количество
	ТаблицаПоКультурам.ЗаполнитьЗначения(0, "Количество");
	
	ТаблицаПоКультурам.Колонки.Добавить("ИмяТабЧасти");
	ТаблицаПоКультурам.ЗаполнитьЗначения("СписокТТН", "ИмяТабЧасти"); 	
	
	КонтрольПриказов = ПараметрыУчетаЭлеватора.КонтрольПриказов;
	
	Колонки = 0;	
	
	Для Каждого СтрокаТаблицы Из ТаблицаПоКультурам Цикл	
		
		Колонки = Колонки + 1;
		
		ПроводитьККУ = ИНАГРО_Элеватор.ПроверкаЗаполненияКачества(Дата, СтрокаТаблицы.ЛабораторныйАнализ, СтрокаТаблицы.Влажность, СтрокаТаблицы.Номенклатура);
		
		СтруктураШапкиДокумента.Вставить("НомерАнализа", СтрокаТаблицы.НомерАнализа);

		Если ПроводитьККУ Тогда 
			ИНАГРО_Элеватор.ДвиженияПоРегиструФорма36Расход(Движения, СтрокаТаблицы);
			ИНАГРО_Элеватор.ДвиженияПоРегиструФорма36СводнаяРасход(Движения, СтрокаТаблицы);
		Иначе
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Документ: %1 в строке %2 не заполнены показатели качества, движения по форме 36 не выполнены!';uk='Документ: %1 в строке %2 не заповнені показники якості, рухи за формою 36 не виконані!'"), Ссылка);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
				
	КонецЦикла;
	
	// ВР необходимо свернуть таблицу проведения по номенклатуре без анализов
	ТаблицаПоКультурамКопия = ТаблицаПоКультурам.Скопировать();
	ТаблицаПоКультурамКопия.Свернуть("Дата, Ссылка, ИмяТабЧасти, ВидДокумента, Организация, Номенклатура, Владелец, ДоговорКонтрагента, Склад, Урожай, ВидХранения, ОтражатьВБухгалтерскомУчете, ОтражатьВМеждународномУчете, МестоХранения, СчетУчетаБУ", "ФизическийВес, ЗачетныйВес, Количество, КоличествоМест");  
	
	Если ПараметрыУчетаЭлеватора.КонтрольОстатковВЗачетномВесе Тогда 	
		
		ЗачетныйВесДляКонтроля = 0;	
		
		Для Каждого Строка из СписокТТН цикл 
			ЗачетныйВесДляКонтроляВагон = ИНАГРО_Элеватор.РассчитатьКонтрольныйЗачетныйВес(Ссылка, Строка.ФизическийВес, Строка.Номенклатура,Строка.Влажность,Строка.СорнаяПримесь,
			                                                                               Организация, Владелец, ДоговорКонтрагента);
			ЗачетныйВесДляКонтроля      = ЗачетныйВесДляКонтроля + ЗачетныйВесДляКонтроляВагон;
		КонецЦикла;
		
		ТаблицаПоКультурамКопия.Колонки.Добавить("ЗачетныйВесДляКонтроля");
		ТаблицаПоКультурамКопия.ЗаполнитьЗначения(ЗачетныйВесДляКонтроля,"ЗачетныйВесДляКонтроля");
		
	КонецЕсли;	
	
	Для Каждого СтрокаТаблицы Из ТаблицаПоКультурамКопия Цикл
		ИНАГРО_Элеватор.ДвиженияПоРегиструОстаткиРасход(Движения, СтрокаТаблицы);
		ИНАГРО_Элеватор.ДвиженияПоРегиструОстаткиСводнаяРасход(Движения, СтрокаТаблицы);     
	КонецЦикла;
	
	Если ПараметрыУчетаЭлеватора.ОтражениеВвозаВывозаСобственногоЗернаВРегламентированномУчете Тогда
		ДвижениеПоРегиструКонтрольОтраженияВвозаВывозаСобственногоЗернаВРегламентированомУчете(РежимПроведенияДокумента, СтруктураШапкиДокумента, ТаблицаПоКультурам, Отказ, Заголовок);
	КонецЕсли;
	
	КолонкиГруппировокУПП = "";
	ТаблицаПоКультурамКопия = ТаблицаПоКультурам.Скопировать();
	ТаблицаПоКультурамКопия.Свернуть(КолонкиГруппировокУПП + "Ссылка, Регистратор, Дата, Период, ВидДокумента, Организация, Откуда, Получатель, Поставщик, Урожай, Склад, ВидХранения, Номенклатура, НоменклатурнаяГруппа, Владелец, ДоговорКонтрагента, ДоговорПолучателя, ЛабораторныйАнализ, НомерАнализа, Влажность, ЗерноваяПримесь, СорнаяПримесь", "Вес, Количество, ЗачетныйВес, ФизическийВес");
	
	ТабФормы49 = ТаблицаПоКультурам.Скопировать();
	
	Для Каждого СтрокаТаблицы Из ТаблицаПоКультурамКопия Цикл
		Если ЗначениеЗаполнено(СтрокаТаблицы.ЛабораторныйАнализ) Тогда
			ИНАГРО_Элеватор.ДвиженияПоРегиструЖурналЛабораторныхАнализов(Движения, СтрокаТаблицы);
		КонецЕсли;
	КонецЦикла;
	
	ТабФормы49.Свернуть("Номенклатура, ЛабораторныйАнализ","ФизическийВес");
	
	Для Каждого СтрокФорма49 Из ТабФормы49 Цикл
		Если ЗначениеЗаполнено(СтрокФорма49.ЛабораторныйАнализ) Тогда
			СтруктураШапкиДокумента.Вставить("Номенклатура",       СтрокФорма49.Номенклатура);	
			СтруктураШапкиДокумента.Вставить("ЛабораторныйАнализ", СтрокФорма49.ЛабораторныйАнализ);	
			СтруктураШапкиДокумента.Вставить("ФизическийВес",      СтрокФорма49.ФизическийВес);	
			ИНАГРО_Элеватор.ДвиженияПоРегиструФорма49(Движения, СтруктураШапкиДокумента);
		КонецЕсли;	
	КонецЦикла;
	
	ТаблицаУслуг = СформироватьТаблицуУслуг();
	
	Если ТаблицаУслуг.Количество() > 0 Тогда
		ИНАГРО_Элеватор.ДвиженияПоРегиструРасчетыПоУслугам(Движения, ТаблицаУслуг, "Приход");
	КонецЕсли;
	
	ПровестиПоРегиструДанныеПоКачествуПартийЗерна();
	
КонецПроцедуры

Процедура ДвижениеПоРегиструКонтрольОтраженияВвозаВывозаСобственногоЗернаВРегламентированомУчете(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, Отказ, Заголовок)
	
	ВыполнитьДвижения = Ложь;	
	
	Если  СобственноеПодразделение
		И Владелец <> Получатель
		И Получатель <> Справочники.Контрагенты.ПустаяСсылка() Тогда 
		
		ВыполнитьДвижения = Истина
		
	КонецЕсли;
	
	Для Каждого Стр ИЗ ТаблицаПоТоварам Цикл	
		Если НЕ ЗначениеЗаполнено(Стр.ДокументОприходования) Тогда			
			Стр.ДокументОприходования = Ссылка;
		КонецЕсли;
	КонецЦикла;
	
	Если ВыполнитьДвижения Тогда
		
		// Приход

		НаборДвижений = Движения.ИНАГРО_КонтрольОтраженияВвозаВывозаСобственногоЗернаВРегламентированномУчете;
		
		СтруктТаблицДокумента = Новый Структура;
		СтруктТаблицДокумента.Вставить("ТаблицаПоТоварам", ТаблицаПоТоварам);
		
		ТаблицыДанныхДокумента = ИНАГРО_Общий.ЗагрузитьТаблицыДокументаВСтруктуру(НаборДвижений, СтруктТаблицДокумента);
		
		ИНАГРО_Общий.ЗаписатьТаблицыДокументаВРегистр(НаборДвижений, ВидДвиженияНакопления.Приход, ТаблицыДанныхДокумента, Дата);		
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПровестиПоРегиструДанныеПоКачествуПартийЗерна()
	
	// Подготовим таблицу для проведения по регистру "ИНАГРО_ДанныеПоКачествуПартийЗерна".
	ТаблицаПоПартиям = ПодготовитьТаблицуПоПартиям();
	
	// Движения по регистру ИНАГРО_ДанныеПоКачествуПартийЗерна
	Если ТаблицаПоПартиям <> Неопределено Тогда
		Если ПараметрыУчетаЭлеватора.ИспользоватьСистемуКонтроляКачестваПартийЗерна Тогда
			НаборДвижений                  = Движения.ИНАГРО_ДанныеПоКачествуПартийЗерна;
			ТаблицаДвижений                = НаборДвижений.Выгрузить();
			ОбщегоНазначенияБПВызовСервера.ЗагрузитьВТаблицуЗначений(ТаблицаПоПартиям, ТаблицаДвижений);
			НаборДвижений.мПериод          = Дата;
			НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;
			Движения.ИНАГРО_ДанныеПоКачествуПартийЗерна.ВыполнитьДвижения();
		КонецЕсли;
	КонецЕсли; 
	
КонецПроцедуры	

#КонецОбласти

#Область СлужебныеПроцедурыИФункции	

Процедура ОбновитьПараметрыУчетаЭлеватора()

	ПараметрыУчетаЭлеватора  = ИНАГРО_Элеватор.ПолучитьПараметрыУчетаЭлеватора(Дата);
	СобственноеПодразделение = ИНАГРО_Элеватор.ПолучитьДополнительныйРеквизитКонтрагента(Владелец, "СобственноеПодразделение");
		
КонецПроцедуры

Процедура ЗаполнитьПоДокументуОснованию(Основание) Экспорт
	
	Если ТипЗнч(Основание.Ссылка) = Тип("ДокументСсылка.ИНАГРО_ПриказНаВывоз") Тогда		
				
		ПриказНаВывоз      = Основание.Ссылка;
		ПриказНомер        = Основание.Ссылка.Номер;
		ПриказДата         = Основание.Ссылка.Дата;
		Организация        = Основание.Организация;
		Владелец           = Основание.Владелец;
		ДоговорКонтрагента = Основание.ДоговорКонтрагента;		
		Склад              = Основание.Склад;		
		МестоХранения      = Основание.МестоХранения;				
		Урожай             = Основание.Урожай;		
		ВидХранения        = Основание.ВидХранения;		
		ДоверенностьДата   = Основание.ДоверенностьДата;
		ДоверенностьНомер  = Основание.ДоверенностьНомер;
		ДоверенностьСерия  = Основание.ДоверенностьСерия;
		ДоверенностьЧерез  = Основание.ДоверенностьЧерез;		
		Комментарий        = Основание.Комментарий;
		
		ПунктНазначения    = Основание.ПунктНазначения;
		Если СокрЛП(ПунктНазначения) = "" Тогда
			ПунктНазначения = БухгалтерскийУчетПереопределяемый.ПолучитьАдресИзКонтактнойИнформации(Получатель, "Фактический");
			Если СокрЛП(ПунктНазначения) = "" Тогда
				ПунктНазначения = БухгалтерскийУчетПереопределяемый.ПолучитьАдресИзКонтактнойИнформации(Получатель, "Юридический");
			КонецЕсли;
		КонецЕсли;		
	
		Для Каждого СтрокаТабличнойЧасти Из Основание.Культуры Цикл
			
			ВидКультуры     = ИНАГРО_Элеватор.ПолучитьДополнительныйРеквизитНоменклатуры(СтрокаТабличнойЧасти.Номенклатура,"ВидКультуры"); 		
			ЗначенияБазисов = ИНАГРО_Элеватор.ПолучитьБазисныеЗначения(ВидКультуры, Ссылка.Дата, Организация, Владелец, ДоговорКонтрагента, Склад);
			
			СтрСписокТТН = СписокТТН.Добавить();
			СтрСписокТТН.Номенклатура       = СтрокаТабличнойЧасти.Номенклатура;
			СтрСписокТТН.ЕдиницаИзмерения   = СтрокаТабличнойЧасти.ЕдиницаИзмерения;
			СтрСписокТТН.ЗачетныйВес        = СтрокаТабличнойЧасти.ЗачетныйВес;
			СтрСписокТТН.ФизическийВес      = СтрокаТабличнойЧасти.ФизическийВес;
			СтрСписокТТН.ЛабораторныйАнализ = СтрокаТабличнойЧасти.ЛабораторныйАнализ;
			СтрСписокТТН.НомерАнализа       = СтрокаТабличнойЧасти.НомерАнализа;
			СтрСписокТТН.Влажность          = СтрокаТабличнойЧасти.Влажность;
			СтрСписокТТН.СорнаяПримесь      = СтрокаТабличнойЧасти.СорнаяПримесь;			
			СтрСписокТТН.ЗерноваяПримесь    = СтрокаТабличнойЧасти.ЗерноваяПримесь;
			СтрСписокТТН.Влажность1         = ЗначенияБазисов.Влажность;
			СтрСписокТТН.СорнаяПримесь1     = ЗначенияБазисов.СорнаяПримесь; 			
			СтрСписокТТН.ЗерноваяПримесь1   = ЗначенияБазисов.ЗерноваяПримесь;
			
		КонецЦикла;
		
	КонецЕсли;
			
КонецПроцедуры

Процедура ЗаполнитьУслуги() Экспорт
	
	ОбновитьПараметрыУчетаЭлеватора();

	Если НеПереформировыватьАвтоматически Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаУслуг = Новый ТаблицаЗначений;
	ТаблицаУслуг.Колонки.Добавить("Номенклатура");
	ТаблицаУслуг.Колонки.Добавить("Количество");
	ТаблицаУслуг.Колонки.Добавить("Сумма");
	
	Если НЕ СобственноеПодразделение Тогда
		
		НеРассчитыватьУслугиЛабАнализаПриВывозе = ПараметрыУчетаЭлеватора.НеРассчитыватьУслугиЛабАнализаПриВывозе;
		СпособРасчета                           = ПараметрыУчетаЭлеватора.СпособНачисленияОплатыЗаУслугуЛабАнализа;
		
		Номенклатура_Анализ                     = ИНАГРО_Элеватор.ПолучитьПредопределеннуюНоменклатуру("Анализ");
		Номенклатура_ПогрузкаЖд                 = ИНАГРО_Элеватор.ПолучитьПредопределеннуюНоменклатуру("ПогрузкаЖД");		
		Номенклатура_ПодачаВагона               = ИНАГРО_Элеватор.ПолучитьПредопределеннуюНоменклатуру("ПодачаВагона");		
		Номенклатура_ВзвешиваниеЖД              = ИНАГРО_Элеватор.ПолучитьПредопределеннуюНоменклатуру("ВзвешиваниеЖД");

		Для Каждого СтрокаТабличнойЧасти Из СписокТТН Цикл
			
			//   лабораторный анализ
			
			ВидКультурыДляРасчетаСтоимостиУслуги = ИНАГРО_Элеватор.ПолучитьДополнительныйРеквизитНоменклатуры(СтрокаТабличнойЧасти.Номенклатура, "ВидКультуры").ВидКультурыДляРасчетаСтоимостиУслуги;
			
			Если НЕ НеРассчитыватьУслугиЛабАнализаПриВывозе Тогда
				
				//ВидКультурыДляРасчетаСтоимостиУслуги = ИНАГРО_Элеватор.ПолучитьДополнительныйРеквизитНоменклатуры(СтрокаТабличнойЧасти.Номенклатура, "ВидКультуры").ВидКультурыДляРасчетаСтоимостиУслуги;
				
				Если ЗначениеЗаполнено(Номенклатура_Анализ) Тогда  
					
					Если СтрокаТабличнойЧасти.ЗачетныйВес <> 0 Тогда
						ТекущаяЦена = ИНАГРО_Элеватор.ПолучитьЦенуУслугиЭлеватора(Организация, Дата, Владелец, ДоговорКонтрагента, ВидКультурыДляРасчетаСтоимостиУслуги, Урожай, Номенклатура_Анализ);
					Иначе
						ТекущаяЦена = 0;
					КонецЕсли;	
							
					Если    СпособРасчета = Перечисления.ИНАГРО_СпособыНачисленияОплатыЗаАнализ.ЗаЕдиницу
						ИЛИ СпособРасчета = Перечисления.ИНАГРО_СпособыНачисленияОплатыЗаАнализ.ПустаяСсылка() Тогда 
						КоличествоУслуги = 1;
					ИначеЕсли СпособРасчета = Перечисления.ИНАГРО_СпособыНачисленияОплатыЗаАнализ.ЗаТоннуЗачВеса Тогда 
						КоличествоУслуги = СтрокаТабличнойЧасти.ЗачетныйВес / 1000;
					ИначеЕсли СпособРасчета = Перечисления.ИНАГРО_СпособыНачисленияОплатыЗаАнализ.ЗаТоннуФизВеса Тогда
						КоличествоУслуги = СтрокаТабличнойЧасти.ФизическийВес / 1000;
					ИначеЕсли СпособРасчета = Перечисления.ИНАГРО_СпособыНачисленияОплатыЗаАнализ.Нет Тогда
						КоличествоУслуги = 0;
					КонецЕсли;					
										
					Если ТекущаяЦена <> 0 И КоличествоУслуги <> 0 Тогда 													 
						НоваяСтрока              = ТаблицаУслуг.Добавить();
						НоваяСтрока.Номенклатура = Номенклатура_Анализ;
						НоваяСтрока.Количество   = КоличествоУслуги;
						НоваяСтрока.Сумма        = НоваяСтрока.Количество * ТекущаяЦена;
					Иначе
						ПараметрыОтбора = Новый Структура;
						ПараметрыОтбора.Вставить("Номенклатура", Номенклатура_Анализ);
						НайденныеСтроки = Услуги.НайтиСтроки(ПараметрыОтбора);
						Для Каждого Строк_Усл Из НайденныеСтроки Цикл
							Услуги.Удалить(Строк_Усл);
						КонецЦикла;
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли; 	
			
			
			// погрузка
			
			ТекущаяЦена = ИНАГРО_Элеватор.ПолучитьЦенуУслугиЭлеватора(Организация, Дата, Владелец, ДоговорКонтрагента, ВидКультурыДляРасчетаСтоимостиУслуги, Урожай, Номенклатура_ПогрузкаЖд);
									
			Если ЗначениеЗаполнено(Номенклатура_ПогрузкаЖд) Тогда     
				
				Если ТекущаяЦена <> 0 И СтрокаТабличнойЧасти.ФизическийВес <> 0 Тогда 													 
					НоваяСтрока              = ТаблицаУслуг.Добавить();
					НоваяСтрока.Номенклатура = Номенклатура_ПогрузкаЖд;
					НоваяСтрока.Количество   = СтрокаТабличнойЧасти.ФизическийВес / 1000;
					НоваяСтрока.Сумма        = НоваяСтрока.Количество * ТекущаяЦена;
				Иначе
					ПараметрыОтбора = Новый Структура;
					ПараметрыОтбора.Вставить("Номенклатура", Номенклатура_ПогрузкаЖд);
					НайденныеСтроки = Услуги.НайтиСтроки(ПараметрыОтбора);
					Для Каждого Строк_Усл Из НайденныеСтроки Цикл
						Услуги.Удалить(Строк_Усл);
					КонецЦикла;
				КонецЕсли;
				
			КонецЕсли;
			
			// подача вагона
			
			ТекущаяЦена = ИНАГРО_Элеватор.ПолучитьЦенуУслугиЭлеватора(Организация, Дата, Владелец, ДоговорКонтрагента, ВидКультурыДляРасчетаСтоимостиУслуги, Урожай, Номенклатура_ПодачаВагона);
					
			Если ЗначениеЗаполнено(Номенклатура_ПодачаВагона) Тогда     
				
				Если ТекущаяЦена <> 0 Тогда 													 
					НоваяСтрока              = ТаблицаУслуг.Добавить();
					НоваяСтрока.Номенклатура = Номенклатура_ПодачаВагона;
					НоваяСтрока.Количество   = 1;
					НоваяСтрока.Сумма        = НоваяСтрока.Количество * ТекущаяЦена;
				Иначе
					ПараметрыОтбора = Новый Структура;
					ПараметрыОтбора.Вставить("Номенклатура", Номенклатура_ПодачаВагона);
					НайденныеСтроки = Услуги.НайтиСтроки(ПараметрыОтбора);
					Для Каждого Строк_Усл Из НайденныеСтроки Цикл
						Услуги.Удалить(Строк_Усл);
					КонецЦикла;
				КонецЕсли;
				
			КонецЕсли;
		
			// взвешивание
			
			ТекущаяЦена = ИНАГРО_Элеватор.ПолучитьЦенуУслугиЭлеватора(Организация, Дата, Владелец, ДоговорКонтрагента, ВидКультурыДляРасчетаСтоимостиУслуги, Урожай, Номенклатура_ВзвешиваниеЖД);
		
			Если ЗначениеЗаполнено(Номенклатура_ВзвешиваниеЖД) Тогда     
				Если ТекущаяЦена <> 0 И СтрокаТабличнойЧасти.ФизическийВес <> 0 Тогда 													 
					НоваяСтрока              = ТаблицаУслуг.Добавить();
					НоваяСтрока.Номенклатура = Номенклатура_ВзвешиваниеЖД;
					НоваяСтрока.Количество   = СтрокаТабличнойЧасти.ФизическийВес / 1000;
					НоваяСтрока.Сумма        = НоваяСтрока.Количество * ТекущаяЦена;
				Иначе
					ПараметрыОтбора = Новый Структура;
					ПараметрыОтбора.Вставить("Номенклатура", Номенклатура_ВзвешиваниеЖД);
					НайденныеСтроки = Услуги.НайтиСтроки(ПараметрыОтбора);
					Для Каждого Строк_Усл Из НайденныеСтроки Цикл
						Услуги.Удалить(Строк_Усл);
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
		
		КонецЦикла; 		
			
	КонецЕсли;	
	
	ТаблицаУслуг.Свернуть("Номенклатура", "Количество, Сумма");
	Для Каждого Строка_Услуг Из ТаблицаУслуг Цикл
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("Номенклатура", Строка_Услуг.Номенклатура);
		НайденныеСтроки = Услуги.НайтиСтроки(ПараметрыОтбора);
		Если НайденныеСтроки.Количество() = 0 Тогда
			Если ЗначениеЗаполнено(Строка_Услуг.Номенклатура) Тогда
				НоваяСтрока              = Услуги.Добавить();
				НоваяСтрока.Номенклатура = Строка_Услуг.Номенклатура;
				НоваяСтрока.Количество   = Строка_Услуг.Количество;
				НоваяСтрока.Цена         = Строка_Услуг.Сумма / Строка_Услуг.Количество;
				НоваяСтрока.Сумма        = Строка_Услуг.Сумма;
			КонецЕсли;
		Иначе
			Для каждого Строк_Усл из НайденныеСтроки Цикл
				Строк_Усл.Количество = Строка_Услуг.Количество;
				Строк_Усл.Цена       = Строка_Услуг.Сумма / Строка_Услуг.Количество;
				Строк_Усл.Сумма      = Строка_Услуг.Сумма;
				Прервать;
			КонецЦикла;	
		КонецЕсли;	
	КонецЦикла;
	
КонецПроцедуры

Функция СформироватьТаблицуУслуг()
	
	ТаблицаУслуг = Новый ТаблицаЗначений;
	ТаблицаУслуг.Колонки.Добавить("ДатаРасчета");
	ТаблицаУслуг.Колонки.Добавить("Ссылка"); 
	ТаблицаУслуг.Колонки.Добавить("Организация");
	ТаблицаУслуг.Колонки.Добавить("Контрагент");
	ТаблицаУслуг.Колонки.Добавить("ДоговорКонтрагента");
	ТаблицаУслуг.Колонки.Добавить("Номенклатура");
	ТаблицаУслуг.Колонки.Добавить("Культура");
	ТаблицаУслуг.Колонки.Добавить("Склад");
	ТаблицаУслуг.Колонки.Добавить("ВидХранения");
	ТаблицаУслуг.Колонки.Добавить("Урожай");
	ТаблицаУслуг.Колонки.Добавить("Количество");
	ТаблицаУслуг.Колонки.Добавить("Стоимость"); 
	
	Для каждого СтрокаТабУслуги Из Услуги Цикл
		НоваяСтрока                    = ТаблицаУслуг.Добавить();
		НоваяСтрока.ДатаРасчета        = Дата;
		НоваяСтрока.Ссылка             = Ссылка; 
		НоваяСтрока.Организация        = Организация;
		НоваяСтрока.Контрагент         = Владелец;
		НоваяСтрока.ДоговорКонтрагента = ДоговорКонтрагента;
		НоваяСтрока.Номенклатура       = СтрокаТабУслуги.Номенклатура;
		НоваяСтрока.Культура           = Номенклатура;
		НоваяСтрока.Склад              = Склад;
		НоваяСтрока.ВидХранения        = ВидХранения;
		НоваяСтрока.Урожай             = Урожай;
		НоваяСтрока.Количество         = СтрокаТабУслуги.Количество;
		НоваяСтрока.Стоимость          = СтрокаТабУслуги.Сумма;	
	КонецЦикла;  
	
	Возврат ТаблицаУслуг;
	
КонецФункции

Функция ПодготовитьТаблицуПоПартиям()
	
	РезТаблица = Неопределено;
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("МоментВремени"      , МоментВремени());
	Запрос.УстановитьПараметр("Организация"        , Организация);
	Запрос.УстановитьПараметр("Контрагент"         , Владелец);
	Запрос.УстановитьПараметр("ДоговорКонтрагента" , ДоговорКонтрагента);
	Запрос.УстановитьПараметр("Номенклатура"       , Номенклатура);
	Запрос.УстановитьПараметр("Склад"              , Склад);
	Запрос.УстановитьПараметр("ВидХранения"        , ВидХранения);
	Запрос.УстановитьПараметр("Урожай"             , Урожай);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ТаблицаРегистра.*
		|ИЗ
		|	РегистрСведений.ИНАГРО_ДанныеПоКачествуПартийЗерна.СрезПоследних(
		|			&МоментВремени,
		|			Организация = &Организация
		|				И Контрагент = &Контрагент
		|				И ДоговорКонтрагента = &ДоговорКонтрагента
		|				И Номенклатура = &Номенклатура
		|				И Склад = &Склад
		|				И ВидХранения = &ВидХранения
		|				И Урожай = &Урожай) КАК ТаблицаРегистра
		|
		|УПОРЯДОЧИТЬ ПО
		|	ТаблицаРегистра.ПартияЗерна.Дата";
	
	ТаблицаРезультатаЗапроса = Запрос.Выполнить().Выгрузить();			   
	
	Если ТаблицаРезультатаЗапроса.Количество() > 0 Тогда 
		
		РезТаблица = ТаблицаРезультатаЗапроса.Скопировать();
		РезТаблица.Очистить();
		
		ОбщийВесПереоформления = СписокТТН.Итог("ФизическийВес");
		Для Каждого СтрокаПартии Из ТаблицаРезультатаЗапроса Цикл
			Если ОбщийВесПереоформления > 0 Тогда
				ОстатокПартии = СтрокаПартии.ФизическийВесИтоговый - СтрокаПартии.Вывезено;
				Если ОстатокПартии > 0 Тогда
					НоваяСтрока = РезТаблица.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаПартии);
					НоваяСтрока.Вывезено   = СтрокаПартии.Вывезено + МИН(ОстатокПартии, ОбщийВесПереоформления);
					ОбщийВесПереоформления = ОбщийВесПереоформления - МИН(ОстатокПартии, ОбщийВесПереоформления);
				КонецЕсли;	
			КонецЕсли;
		КонецЦикла;	
		
		Если РезТаблица.Количество() = 0 Тогда
			РезТаблица = Неопределено;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат РезТаблица;
	
КонецФункции	

#КонецОбласти

#КонецЕсли