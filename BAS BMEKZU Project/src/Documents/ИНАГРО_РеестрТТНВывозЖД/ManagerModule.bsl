#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПроцедурыИФункцииПечати

Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт

	// Вывоз
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "Вывоз";
	КомандаПечати.Представление = НСтр("ru = 'Реестр ж/д накладных на вывоз'; uk = 'Реєстр ж/д накладних на вивіз'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечати";
	КомандаПечати.СписокФорм    = "ФормаДокумента,ФормаСписка";
	
	// Ведомость
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "Ведомость";
	КомандаПечати.Представление = НСтр("ru = 'Ведомость ж/д и водных накладных на вывоз (ф. №20)'; uk = 'Відомість ж/д і водних накладних на вивіз (ф. № 20)'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечати";
	КомандаПечати.СписокФорм    = "ФормаДокумента,ФормаСписка";
	
	// Реестр документов
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "Реестр";
	КомандаПечати.Представление = НСтр("ru='Реестр документов';uk='Реєстр документів'");
	КомандаПечати.ЗаголовокФормы= НСтр("ru='Реестр документов ""Реестр товарно-транспортных накладных (вывоз) (железнодорожная)""';uk='Реєстр документів ""Реєстр товарно-транспортних накладних (вивезення) (залізнична)""'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечатиРеестраДокументов";
	КомандаПечати.СписокФорм    = "ФормаСписка";
	КомандаПечати.Порядок       = 100;

КонецПроцедуры		

Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	// Устанавливаем признак доступности печати покомплектно.
	ПараметрыВывода.ДоступнаПечатьПоКомплектно = Истина;
	
	// Проверяем, нужно ли для макета СчетЗаказа формировать табличный документ.
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "Вывоз") Тогда
		
		// Формируем табличный документ и добавляем его в коллекцию печатных форм.
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "Вывоз", НСтр("ru = 'Реестр ж/д накладных на вывоз'; uk = 'Реєстр ж/д накладних на вивіз'"), 
		ПечатьВывоз(МассивОбъектов, ОбъектыПечати, ПараметрыВывода), , "Документ.ИНАГРО_РеестрТТНВывозЖД.ПФ_MXL_Вывоз", ,Истина);
		
	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "Ведомость") Тогда
		
		// Формируем табличный документ и добавляем его в коллекцию печатных форм.
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "Ведомость", НСтр("ru = 'Ведомость ж/д и водных накладных на вывоз (ф. №20)'; uk = 'Відомість ж/д і водних накладних на вивіз (ф. № 20)'"), 
		ПечатьВедомость(МассивОбъектов, ОбъектыПечати, ПараметрыВывода), , "Документ.ИНАГРО_РеестрТТНВывозЖД.ПФ_MXL_Ведомость", ,Истина);
		
	КонецЕсли; 	

КонецПроцедуры

Функция ПечатьВывоз(МассивОбъектов, ОбъектыПечати, ПараметрыВывода)
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ИНАГРО_РеестрТТНВывозЖД_Вывоз";
	
	Макет = ПолучитьМакет("ПФ_MXL_Вывоз");
	
	КодЯзыкаПечать = ПараметрыВывода.КодЯзыкаДляМногоязычныхПечатныхФорм;
	Макет.КодЯзыкаМакета = КодЯзыкаПечать;
	
	ПервыйДокумент = Истина;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ИНАГРО_РеестрТТНВывозЖД.Ссылка КАК Ссылка,
		|	ИНАГРО_РеестрТТНВывозЖД.Номер КАК НомерДок,
		|	ИНАГРО_РеестрТТНВывозЖД.ВидХранения КАК ВидХранения,
		|	ИНАГРО_РеестрТТНВывозЖД.Владелец КАК Владелец,
		|	ИНАГРО_РеестрТТНВывозЖД.Куда КАК Куда,
		|	ИНАГРО_РеестрТТНВывозЖД.Организация.НаименованиеПолное КАК Организация,
		|	ИНАГРО_РеестрТТНВывозЖД.ПунктНазначения КАК ПунктНазначения,
		|	ИНАГРО_РеестрТТНВывозЖД.Склад КАК Склад,
		|	ИНАГРО_РеестрТТНВывозЖД.Урожай КАК Урожай,
		|	ИНАГРО_РеестрТТНВывозЖД.Дата КАК Дата
		|ИЗ
		|	Документ.ИНАГРО_РеестрТТНВывозЖД КАК ИНАГРО_РеестрТТНВывозЖД
		|ГДЕ
		|	ИНАГРО_РеестрТТНВывозЖД.Ссылка В(&МассивОбъектов)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ИНАГРО_РеестрТТНВывозЖДСписокТТН.Ссылка КАК Ссылка,
		|	ИНАГРО_РеестрТТНВывозЖДСписокТТН.НомерСтроки КАК НомерСтроки,
		|	ИНАГРО_РеестрТТНВывозЖДСписокТТН.Брутто КАК Брутто,
		|	ИНАГРО_РеестрТТНВывозЖДСписокТТН.Влажность КАК Влажность,
		|	ИНАГРО_РеестрТТНВывозЖДСписокТТН.Влажность1 КАК БазисВлажности,
		|	ИНАГРО_РеестрТТНВывозЖДСписокТТН.ЕдиницаИзмерения КАК Ед,
		|	ИНАГРО_РеестрТТНВывозЖДСписокТТН.ЗачетныйВес КАК ЗачетныйВес,
		|	ИНАГРО_РеестрТТНВывозЖДСписокТТН.ЗерноваяПримесь КАК ЗерноваяПримесь,
		|	ИНАГРО_РеестрТТНВывозЖДСписокТТН.ЗерноваяПримесь1 КАК БазисЗерноваяПримесь,
		|	ИНАГРО_РеестрТТНВывозЖДСписокТТН.Номенклатура КАК Номенклатура,
		|	ИНАГРО_РеестрТТНВывозЖДСписокТТН.НомерВагона КАК НомерТранспорта,
		|	ИНАГРО_РеестрТТНВывозЖДСписокТТН.НомерТТН КАК НомерТТН,
		|	ИНАГРО_РеестрТТНВывозЖДСписокТТН.СорнаяПримесь КАК СорнаяПримесь,
		|	ИНАГРО_РеестрТТНВывозЖДСписокТТН.СорнаяПримесь1 КАК БазисСорнаяПримесь,
		|	ИНАГРО_РеестрТТНВывозЖДСписокТТН.Тара КАК Тара,
		|	ИНАГРО_РеестрТТНВывозЖДСписокТТН.ФизическийВес КАК ФизическийВес
		|ИЗ
		|	Документ.ИНАГРО_РеестрТТНВывозЖД.СписокТТН КАК ИНАГРО_РеестрТТНВывозЖДСписокТТН
		|ГДЕ
		|	ИНАГРО_РеестрТТНВывозЖДСписокТТН.Ссылка В(&МассивОбъектов)";
	
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	ВыборкаШапка = МассивРезультатов[0].Выбрать();
	
	ВыборкаТЧ    =  МассивРезультатов[1].Выгрузить();
	
	Пока ВыборкаШапка.Следующий() Цикл
		
		Если Не ПервыйДокумент Тогда
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		// Запомним номер строки, с которой начали выводить текущий документ.
		НомерСтрокиНачало = ТабДокумент.ВысотаТаблицы + 1;
		
		//шапка
		ОблШапка = Макет.ПолучитьОбласть("Шапка");
		ОблШапка.Параметры.Заполнить(ВыборкаШапка);
		ИНАГРО_Элеватор.ПолучитьНаименованияКонтрагента(ОблШапка.Параметры.Владелец);
		ОблШапка.Параметры.ДатаДок = Формат(ВыборкаШапка.Дата, "ДФ='дд ММММ гггг';Л="+ Локализация.ОпределитьКодЯзыкаДляФормат(КодЯзыкаПечать));
		ТабДокумент.Вывести(ОблШапка);
		
		//Строка
		СписокТТН = ВыборкаТЧ.Скопировать(Новый Структура("Ссылка",ВыборкаШапка.Ссылка));
		Для Каждого Стр Из СписокТТН Цикл
			ОблСтрока = Макет.ПолучитьОбласть("Строка");
			ОблСтрока.Параметры.Заполнить(Стр);
			ТабДокумент.Вывести(ОблСтрока);	
		КонецЦикла; 	
		
		//Итого
		ОблИтого = Макет.ПолучитьОбласть("Итого");
		ОблИтого.Параметры.ИтогФизВес = СписокТТН.Итог("ФизическийВес");
		ОблИтого.Параметры.ИтогЗачВес = СписокТТН.Итог("ЗачетныйВес");
		ОблИтого.Параметры.ИтогБрутто = СписокТТН.Итог("Брутто");
		ОблИтого.Параметры.ИтогТара   = СписокТТН.Итог("Тара");
		ТабДокумент.Вывести(ОблИтого);
		
	КонецЦикла;
	
	Возврат ТабДокумент;

КонецФункции

Функция ПечатьВедомость(МассивОбъектов, ОбъектыПечати, ПараметрыВывода)
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ИНАГРО_РеестрТТНВывозЖД_Ведомость";
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	
	Макет = ПолучитьМакет("ПФ_MXL_Ведомость");
	
	КодЯзыкаПечать = ПараметрыВывода.КодЯзыкаДляМногоязычныхПечатныхФорм;
	Макет.КодЯзыкаМакета = КодЯзыкаПечать;
	
	ПервыйДокумент = Истина;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ИНАГРО_РеестрТТНВывозЖД.Ссылка КАК Ссылка,
		|	ИНАГРО_РеестрТТНВывозЖД.Номер КАК НомерДок,
		|	ИНАГРО_РеестрТТНВывозЖД.Организация.НаименованиеПолное КАК Организация,
		|	ИНАГРО_РеестрТТНВывозЖД.Дата КАК ДатаДок,
		|	ИНАГРО_РеестрТТНВывозЖД.ПриказДата КАК ДатаПриказа,
		|	ИНАГРО_РеестрТТНВывозЖД.ПриказНомер КАК НомерПриказа,
		|	ИНАГРО_РеестрТТНВывозЖД.Склад КАК Склад,
		|	ИНАГРО_РеестрТТНВывозЖД.ДоверенностьДата КАК ДовДата,
		|	ИНАГРО_РеестрТТНВывозЖД.ДоверенностьНомер КАК ДовНомер,
		|	ИНАГРО_РеестрТТНВывозЖД.ДоверенностьСерия КАК ДовСерия,
		|	ИНАГРО_РеестрТТНВывозЖД.ДоверенностьЧерез КАК ДовЧерез,
		|	ИНАГРО_РеестрТТНВывозЖД.Организация КАК ОрганизацияСсылка
		|ИЗ
		|	Документ.ИНАГРО_РеестрТТНВывозЖД КАК ИНАГРО_РеестрТТНВывозЖД
		|ГДЕ
		|	ИНАГРО_РеестрТТНВывозЖД.Ссылка В(&МассивОбъектов)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ИНАГРО_РеестрТТНВывозЖДСписокТТН.Ссылка КАК Ссылка,
		|	ИНАГРО_РеестрТТНВывозЖДСписокТТН.НомерСтроки КАК НомерСтроки,
		|	ИНАГРО_РеестрТТНВывозЖДСписокТТН.Ссылка.ПунктНазначения КАК ПунктНазначения,
		|	ИНАГРО_РеестрТТНВывозЖДСписокТТН.Ссылка.Владелец КАК Владелец,
		|	ИНАГРО_РеестрТТНВывозЖДСписокТТН.Номенклатура КАК Номенклатура,
		|	ИНАГРО_РеестрТТНВывозЖДСписокТТН.НомерТТН КАК НомерТТН,
		|	ИНАГРО_РеестрТТНВывозЖДСписокТТН.НомерВагона КАК НомерТранспорта,
		|	ИНАГРО_РеестрТТНВывозЖДСписокТТН.ФизическийВес КАК ФизическийВес,
		|	ИНАГРО_РеестрТТНВывозЖДСписокТТН.НомерАнализа КАК НомерАнализа,
		|	ИНАГРО_РеестрТТНВывозЖДСписокТТН.Влажность КАК Влажность,
		|	ИНАГРО_РеестрТТНВывозЖДСписокТТН.Влажность1 КАК ТонноПроцентыПоВлажности,
		|	ИНАГРО_РеестрТТНВывозЖДСписокТТН.СорнаяПримесь КАК СорнаяПримесь,
		|	ИНАГРО_РеестрТТНВывозЖДСписокТТН.СорнаяПримесь1 КАК ТонноПроцентыПоСорнойПримеси
		|ИЗ
		|	Документ.ИНАГРО_РеестрТТНВывозЖД.СписокТТН КАК ИНАГРО_РеестрТТНВывозЖДСписокТТН
		|ГДЕ
		|	ИНАГРО_РеестрТТНВывозЖДСписокТТН.Ссылка В(&МассивОбъектов)";
	
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	ВыборкаШапка = МассивРезультатов[0].Выбрать();
	
	ВыборкаТЧ    =  МассивРезультатов[1].Выгрузить();
	
	Пока ВыборкаШапка.Следующий() Цикл
		
		Если Не ПервыйДокумент Тогда
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		// Запомним номер строки, с которой начали выводить текущий документ.
		НомерСтрокиНачало = ТабДокумент.ВысотаТаблицы + 1;
		
		Руководители = ИНАГРО_Элеватор.ОтветственныеЛицаОрганизации(ВыборкаШапка.ОрганизацияСсылка, ВыборкаШапка.ДатаДок);
		
		ОблШапка = Макет.ПолучитьОбласть("Шапка");
		ОблШапка.Параметры.Заполнить(ВыборкаШапка);
		ОблШапка.Параметры.ДатаДок = Формат(ВыборкаШапка.ДатаДок, "ДФ='дд ММММ гггг';Л="+ Локализация.ОпределитьКодЯзыкаДляФормат(КодЯзыкаПечать));
		Облшапка.Параметры.ДатаПриказа = Формат(ВыборкаШапка.ДатаПриказа,"ДЛФ = D");
		Облшапка.Параметры.ДовДата = Формат(ВыборкаШапка.ДовДата,"ДЛФ = D");
		ТабДокумент.Вывести(Облшапка);
		
		//Строка
		ВсегоФизическийВес = 0;
		СписокТТН = ВыборкаТЧ.Скопировать(Новый Структура("Ссылка",ВыборкаШапка.Ссылка));
		Для Каждого Стр Из СписокТТН Цикл
			ОблСтрока = Макет.ПолучитьОбласть("Строка");
			ПроцПоВлажности     = Стр.ФизическийВес * Стр.Влажность / 100;
			ПроцПоСорнойПримеси = Стр.ФизическийВес * Стр.СорнаяПримесь / 100;
			ОблСтрока.Параметры.ПроцПоВлажности     = ПроцПоВлажности;
			ОблСтрока.Параметры.ПроцПоСорнойПримеси = ПроцПоСорнойПримеси;
			ВсегоФизическийВес = ВсегоФизическийВес + Стр.ФизическийВес;
			ОблСтрока.Параметры.Заполнить(Стр);
			ТабДокумент.Вывести(ОблСтрока);
		КонецЦикла; 	
		
		//Дно
		ОблДно = Макет.ПолучитьОбласть("Дно");
		ОблДно.Параметры.ВсегоФизическийВес = ВсегоФизическийВес;
		
		ДанныеОтветственногоЛица = Неопределено;
		МОЛФизическоеЛицо = ИНАГРО_Элеватор.ОтветственныеЛица(ВыборкаШапка.ОрганизацияСсылка, ВыборкаШапка.ДатаДок, ВыборкаШапка.Склад, ДанныеОтветственногоЛица);
		Если ЗначениеЗаполнено(ДанныеОтветственногоЛица) Тогда
			ОблДно.Параметры.ЗавСкладом = ДанныеОтветственногоЛица.ФИО;
		Иначе
			ОблДно.Параметры.ЗавСкладом = МОЛФизическоеЛицо;
		КонецЕсли;
		
		ОблДно.Параметры.НачальникВТЛ = Руководители.НачальникВТЛ;
		ТабДокумент.Вывести(ОблДно);
		
	КонецЦикла;
	
	Возврат ТабДокумент;

КонецФункции

Функция ПолучитьДополнительныеРеквизитыДляРеестра() Экспорт
	
	Результат = Новый Структура;	
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти 

#Область ПрограммныйИнтерфейс

// Заполняет счета учета номенклатуры в табличной части документа
//
// Параметры:
// Объект - СправочникСсылка - объект контактной информации
// ИмяТабличнойЧасти - имя табличной части
// СобственноеПодразделение - собственное подразделение.
//
Процедура ЗаполнитьСчетаУчетаВТабличнойЧасти(Объект, ИмяТабличнойЧасти, СобственноеПодразделение) Экспорт

	ТабличнаяЧасть = Объект[ИмяТабличнойЧасти];
	
	ДанныеОбъекта = Новый Структура("Дата, Организация, Склад, ОтражатьВБухгалтерскомУчете");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	ДанныеОбъекта.Вставить("СобственноеПодразделение", СобственноеПодразделение);

	СведенияОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОНоменклатуре(
		Объект.Номенклатура, ДанныеОбъекта);
	
	Для Каждого СтрокаТабличнойЧасти Из ТабличнаяЧасть Цикл
		ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(ДанныеОбъекта, СтрокаТабличнойЧасти, СведенияОНоменклатуре);
	КонецЦикла;

КонецПроцедуры

// Заполняет счета учета номенклатуры в строке табличной части документа
//
// Параметры:
//  ДанныеОбъекта         - структура данных объекта, используемых при заполнении счетов учета (вид операции,
//                          вид договора контрагента, признак комиссионной торговли и т.п.)
//  СтрокаТабличнойЧасти  - Строка - строка табличной части документа
//  СведенияОНоменклатуре - Структура - структура сведений о номенклатуре, либо структура счетов учета.
//
Процедура ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(ДанныеОбъекта, СтрокаТабличнойЧасти, СведенияОНоменклатуре) Экспорт
	
	Если СведенияОНоменклатуре = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если СведенияОНоменклатуре.Свойство("СчетаУчета") Тогда
		// СведенияОНоменклатуре - структура сведений номенклатуры
		СчетаУчета = СведенияОНоменклатуре.СчетаУчета;
	ИначеЕсли СведенияОНоменклатуре.Свойство("СчетУчетаБУ") Тогда
		// СведенияОНоменклатуре - структура счетов учета номенклатуры
		СчетаУчета = СведенияОНоменклатуре;
	Иначе
		Возврат;
	КонецЕсли;

	Если ДанныеОбъекта.ОтражатьВБухгалтерскомУчете Тогда
		
		Если ДанныеОбъекта.СобственноеПодразделение Тогда
			СтрокаТабличнойЧасти.СчетУчетаБУ = СчетаУчета.СчетУчетаБУ;				
		Иначе
			СтрокаТабличнойЧасти.СчетУчетаБУ = СчетаУчета.СчетУчетаДоп;				
		КонецЕсли;	
		
	Иначе
		
		СтрокаТабличнойЧасти.СчетУчетаБУ         = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
		
	КонецЕсли;	

КонецПроцедуры

#КонецОбласти

#КонецЕсли