#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
				
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды 
	
	Если Параметры.Ключ.Пустая() Тогда
		
		ЗначенияДляЗаполнения = Новый Структура("Месяц, Организация, Ответственный", 
		"Объект.ПериодРегистрации",
		"Объект.Организация",
		"Объект.Ответственный");
		
		ЗарплатаКадры.ЗаполнитьПервоначальныеЗначенияВФорме(ЭтаФорма, ЗначенияДляЗаполнения);
		
		УстановитьФункциональныеОпцииФормы();
		
		ЗарплатаКадрыКлиентСервер.ЗаполнитьМесяцПоДате(ЭтаФорма, "Объект.ПериодРегистрации", "ПериодРегистрацииСтрокой");
		
		УправлениеФормой(ЭтаФорма);
		ПодготовитьФормуНаСервере();
		
	КонецЕсли;
	
	// Уведомим о появлении функционала рабочей даты
	НастройкиПредупреждений = ОбщегоНазначенияБП.НастройкиПредупрежденийОбИзменениях("РабочаяДатаИзДокумента");
	
	УстановитьОтображениеПредупрежденийПриИзмененииКлючевыхРеквизитов();
	
	// Показываем, если это новый документ и сама рабочая дата еще не установлена.
	НастройкиПредупреждений.РабочаяДатаИзДокумента = НастройкиПредупреждений.РабочаяДатаИзДокумента
		И Параметры.Ключ.Пустая()
		И НЕ ЗначениеЗаполнено(БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("РабочаяДата"));
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
КонецПроцедуры 

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)

	ОбщегоНазначенияБПКлиент.ОбработкаОповещенияФормыДокумента(ЭтаФорма, Объект.Ссылка, ИмяСобытия, Параметр, Источник);
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	
	ЗарплатаКадрыКлиентСервер.ЗаполнитьМесяцПоДате(ЭтаФорма, "Объект.ПериодРегистрации", "ПериодРегистрацииСтрокой");
	
	УстановитьОтображениеПредупрежденийПриИзмененииКлючевыхРеквизитов();
	
	ПодготовитьФормуНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Документы.ИНАГРО_ЗаявлениеРасчетВФСС.РассчитатьИтоговыеСуммы(ТекущийОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	УстановитьСостояниеДокумента();
	
КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	УправлениеФормой(ЭтаФорма);
	
	Если Объект.Дата >= Дата(2018,10,1) И ТекущаяДатаДокумента < Дата(2018,10,1) Тогда
		Объект.ДокументыПоНачислениям.Очистить();
	ИначеЕсли  ТекущаяДатаДокумента >= Дата(2018,10,1) И Объект.Дата < Дата(2018,10,1) Тогда
		Объект.Больничные.Очистить();
		Объект.БольничныеНС.Очистить();
		Объект.Декретные.Очистить();
	КонецЕсли;
	
	ТекущаяДатаДокумента = Объект.Дата;
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ОрганизацияПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()
	
	ОчиститьТабличныеЧасти();
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(
		Элемент.ТекстРедактирования,
		ЭтотОбъект,
		"Объект.Комментарий");

КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиСобытийЭлементовТаблицыФормыДокументыПоНачислениям

&НаКлиенте
Процедура ДокументыПоНачислениямПослеУдаления(Элемент)
	ДокументыПоНачислениямПослеУдаленияНаСервере();
КонецПроцедуры

&НаСервере
Процедура ДокументыПоНачислениямПослеУдаленияНаСервере()
	
	Документы.ИНАГРО_ЗаявлениеРасчетВФСС.РассчитатьИтоговыеСуммы(Объект);
	
	УстановитьОтображениеПредупрежденийПриИзмененииКлючевыхРеквизитов();
	
КонецПроцедуры

&НаСервере
Процедура ДокументыПоНачислениямПриОкончанииРедактированияНаСервере()
	
	Документы.ИНАГРО_ЗаявлениеРасчетВФСС.РассчитатьИтоговыеСуммы(Объект);
	
	УстановитьОтображениеПредупрежденийПриИзмененииКлючевыхРеквизитов();
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументыПоНачислениямПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
 	ДокументыПоНачислениямПриОкончанииРедактированияНаСервере()
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыБольничные

&НаКлиенте
Процедура БольничныеДокументПриИзменении(Элемент)	
	
	ТекущаяСтрока = Элементы.Больничные.ТекущиеДанные;
	
	УстановитьПараметрыОтбораДокумента("Больничные");

	Если ЗначениеЗаполнено(ТекущаяСтрока.Документ) Тогда
				
		ДанныеСотрудника = Новый Структура ("Документ, Сотрудник, Сумма, Дни");		
		ЗаполнитьЗначенияСвойств(ДанныеСотрудника, ТекущаяСтрока);
		
		БольничныеДокументПриИзмененииНаСервере(ДанныеСотрудника);
		
		ЗаполнитьЗначенияСвойств(ТекущаяСтрока, ДанныеСотрудника);
		
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура БольничныеДокументПриИзмененииНаСервере(ДанныеСотрудника)
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СУММА(НачислениеПоБольничномуЛистуНачисления.ОплаченоДнейЧасов) КАК Дни,
		|	СУММА(НачислениеПоБольничномуЛистуНачисления.Результат) КАК Сумма,
		|	НачислениеПоБольничномуЛистуНачисления.Ссылка.Сотрудник КАК Сотрудник
		|ИЗ
		|	Документ.ИНАГРО_НачислениеПоБольничномуЛисту.Начисления КАК НачислениеПоБольничномуЛистуНачисления
		|ГДЕ
		|	НачислениеПоБольничномуЛистуНачисления.Ссылка = &Ссылка
		|	И НачислениеПоБольничномуЛистуНачисления.ВидРасчета.НачислениеЗаСчетФСС = ИСТИНА
		|
		|СГРУППИРОВАТЬ ПО
		|	НачислениеПоБольничномуЛистуНачисления.Ссылка.Сотрудник";
	
	Запрос.УстановитьПараметр("Ссылка", ДанныеСотрудника.Документ);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		ДанныеСотрудника.Сотрудник = Выборка.Сотрудник;
		ДанныеСотрудника.Сумма = Выборка.Сумма;
		ДанныеСотрудника.Дни = Выборка.Дни;
	КонецЕсли;
	
	Документы.ИНАГРО_ЗаявлениеРасчетВФСС.РассчитатьИтоговыеСуммы(Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура БольничныеДокументНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	  УстановитьПараметрыОтбораДокумента("Больничные");
	  
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДекретные

&НаКлиенте
Процедура ДекретныеДокументПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Декретные.ТекущиеДанные;
	
	УстановитьПараметрыОтбораДокумента("Декретные");

	Если ЗначениеЗаполнено(ТекущаяСтрока.Документ) Тогда
				
		ДанныеСотрудника = Новый Структура ("Документ, Сотрудник, Сумма, Дни");
		
		ЗаполнитьЗначенияСвойств(ДанныеСотрудника, ТекущаяСтрока);
		ДекретныеДокументПриИзмененииНаСервере(ДанныеСотрудника);
		ЗаполнитьЗначенияСвойств(ТекущаяСтрока, ДанныеСотрудника);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДекретныеДокументПриИзмененииНаСервере(ДанныеСотрудника)
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СУММА(НачислениеПоБольничномуЛистуНачисления.ОплаченоДнейЧасов) КАК Дни,
		|	СУММА(НачислениеПоБольничномуЛистуНачисления.Результат) КАК Сумма,
		|	НачислениеПоБольничномуЛистуНачисления.Ссылка.Сотрудник КАК Сотрудник
		|ИЗ
		|	Документ.ИНАГРО_НачислениеПоБольничномуЛисту.Начисления КАК НачислениеПоБольничномуЛистуНачисления
		|ГДЕ
		|	НачислениеПоБольничномуЛистуНачисления.Ссылка = &Ссылка
		|	И НачислениеПоБольничномуЛистуНачисления.ВидРасчета.НачислениеЗаСчетФСС = ИСТИНА
		|
		|СГРУППИРОВАТЬ ПО
		|	НачислениеПоБольничномуЛистуНачисления.Ссылка.Сотрудник";
	
	Запрос.УстановитьПараметр("Ссылка", ДанныеСотрудника.Документ);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		ДанныеСотрудника.Сотрудник = Выборка.Сотрудник;
		ДанныеСотрудника.Сумма     = Выборка.Сумма;
		ДанныеСотрудника.Дни       = Выборка.Дни;
	КонецЕсли;
	
	Документы.ИНАГРО_ЗаявлениеРасчетВФСС.РассчитатьИтоговыеСуммы(Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекретныеДокументНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	УстановитьПараметрыОтбораДокумента("Декретные");

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыБольничныеНС

&НаКлиенте
Процедура БольничныеНСДокументПриИзменении(Элемент)	

	ТекущаяСтрока = Элементы.БольничныеНС.ТекущиеДанные;
	
	УстановитьПараметрыОтбораДокумента("БольничныеНС");	

	Если ЗначениеЗаполнено(ТекущаяСтрока.Документ) Тогда
						
		ДанныеСотрудника = Новый Структура ("Документ, Сотрудник, Сумма, Дни");		
		ЗаполнитьЗначенияСвойств(ДанныеСотрудника, ТекущаяСтрока);
		
		БольничныеНСДокументПриИзмененииНаСервере(ДанныеСотрудника);
		
		ЗаполнитьЗначенияСвойств(ТекущаяСтрока, ДанныеСотрудника);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура БольничныеНСДокументПриИзмененииНаСервере(ДанныеСотрудника)
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СУММА(НачислениеПоБольничномуЛистуНачисления.ОплаченоДнейЧасов) КАК Дни,
		|	СУММА(НачислениеПоБольничномуЛистуНачисления.Результат) КАК Сумма,
		|	НачислениеПоБольничномуЛистуНачисления.Ссылка.Сотрудник КАК Сотрудник
		|ИЗ
		|	Документ.ИНАГРО_НачислениеПоБольничномуЛисту.Начисления КАК НачислениеПоБольничномуЛистуНачисления
		|ГДЕ
		|	НачислениеПоБольничномуЛистуНачисления.Ссылка = &Ссылка
		|	И НачислениеПоБольничномуЛистуНачисления.ВидРасчета.НачислениеЗаСчетФСС = ИСТИНА
		|
		|СГРУППИРОВАТЬ ПО
		|	НачислениеПоБольничномуЛистуНачисления.Ссылка.Сотрудник";
	
	Запрос.УстановитьПараметр("Ссылка", ДанныеСотрудника.Документ);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		ДанныеСотрудника.Сотрудник = Выборка.Сотрудник;
		ДанныеСотрудника.Сумма     = Выборка.Сумма;
		ДанныеСотрудника.Дни       = Выборка.Дни;
	КонецЕсли;
	
	Документы.ИНАГРО_ЗаявлениеРасчетВФСС.РассчитатьИтоговыеСуммы(Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура БольничныеНСДокументНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	УстановитьПараметрыОтбораДокумента("БольничныеНС");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПогребение

&НаКлиенте
Процедура ПогребениеДокументПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Погребение.ТекущиеДанные;
		
	Если ЗначениеЗаполнено(ТекущаяСтрока.Документ) Тогда
				
		ДанныеСотрудника = Новый Структура ("Документ, Сотрудник, Сумма, Дни");
		
		ЗаполнитьЗначенияСвойств(ДанныеСотрудника, ТекущаяСтрока);
		ПогребениеДокументПриИзмененииНаСервере(ДанныеСотрудника);
		ЗаполнитьЗначенияСвойств(ТекущаяСтрока, ДанныеСотрудника);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПогребениеДокументПриИзмененииНаСервере(ДанныеСотрудника)
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СУММА(НачислениеПоБольничномуЛистуНачисления.Результат) КАК Сумма,
		|	НачислениеПоБольничномуЛистуНачисления.Сотрудник КАК Сотрудник
		|ИЗ
		|	Документ.ИНАГРО_НачислениеЕдиновременныхПособийЗаСчетФСС.Начисления КАК НачислениеПоБольничномуЛистуНачисления
		|ГДЕ
		|	НачислениеПоБольничномуЛистуНачисления.Ссылка = &Ссылка
		|	И НачислениеПоБольничномуЛистуНачисления.ВидРасчета.НачислениеЗаСчетФСС = ИСТИНА
		|
		|СГРУППИРОВАТЬ ПО
		|	НачислениеПоБольничномуЛистуНачисления.Сотрудник";
	
	Запрос.УстановитьПараметр("Ссылка", ДанныеСотрудника.Документ);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		ДанныеСотрудника.Сотрудник = Выборка.Сотрудник;
		ДанныеСотрудника.Сумма     = Выборка.Сумма;
	КонецЕсли;	
	
	Документы.ИНАГРО_ЗаявлениеРасчетВФСС.РассчитатьИтоговыеСуммы(Объект);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Заполнить(Команда)
	
	Если Объект.ДокументыПоНачислениям.Количество() > 0 Тогда
		 
		ТекстВопроса = НСтр("ru='Перед заполнением табличная часть будет очищена. Продолжить?';uk='Перед заповненням таблична частина буде очищена. Продовжити?'");
		Оповещение = Новый ОписаниеОповещения("ОчиститьТаблицыЗавершение", ЭтотОбъект, Параметры);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
		
		Возврат;
		
	КонецЕсли;
	
	АвтозаполнениеДокументаНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура БольничныеЗаполнить(Команда)
	
	АвтозаполнениеТЧ2018(Истина, Ложь, Ложь, Ложь, Ложь)
	
КонецПроцедуры

&НаКлиенте
Процедура ДекретныеЗаполнить(Команда)
	
	АвтозаполнениеТЧ2018(Ложь, Ложь, Истина, Ложь, Ложь)
	
КонецПроцедуры

&НаКлиенте
Процедура БольничныеНСЗаполнить(Команда)
	
	АвтозаполнениеТЧ2018(Ложь, Истина, Ложь, Ложь, Ложь)
	
КонецПроцедуры

&НаКлиенте
Процедура ПогребениеЗаполнить(Команда)
	
	АвтозаполнениеТЧ2018(Ложь, Ложь, Ложь, Истина, Ложь)
	
КонецПроцедуры

&НаКлиенте
Процедура ВсеЗаполнить(Команда)
	
	АвтозаполнениеТЧ2018(Ложь, Ложь, Ложь, Ложь, Истина)
	
КонецПроцедуры

#КонецОбласти 

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ПодготовитьФормуНаСервере()

	УстановитьФункциональныеОпцииФормы();
	
	ТекущаяДатаДокумента = Объект.Дата;
	
	УправлениеФормой(ЭтаФорма);
	
	УстановитьСостояниеДокумента();

КонецПроцедуры

&НаСервере
Процедура УстановитьФункциональныеОпцииФормы()

	ОбщегоНазначенияБПКлиентСервер.УстановитьПараметрыФункциональныхОпцийФормыДокумента(ЭтаФорма); 	
	
КонецПроцедуры 

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)

	Элементы = Форма.Элементы;
	Объект	 = Форма.Объект;
	
	Если Объект.Дата < Дата(2018,10,1) Тогда 
		Элементы.ГруппаОбщая.ТекущаяСтраница = Элементы.До2018Года;
	Иначе
		Элементы.ГруппаОбщая.ТекущаяСтраница = Элементы.С2018Года;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСостояниеДокумента()
	
	СостояниеДокумента = ОбщегоНазначенияБП.СостояниеДокумента(Объект);
	
КонецПроцедуры

&НаСервере
Процедура АвтозаполнениеДокументаНаСервере()
	
	Запрос = ПолучитьЗапросДокументовПособий();
	
	Объект.ДокументыПоНачислениям.Загрузить(Запрос.Выполнить().Выгрузить());
	
	Документы.ИНАГРО_ЗаявлениеРасчетВФСС.РассчитатьИтоговыеСуммы(Объект);
	
	УстановитьОтображениеПредупрежденийПриИзмененииКлючевыхРеквизитов();
	
КонецПроцедуры

&НаСервере
Функция ПолучитьЗапросДокументовПособий()
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ПериодРегистрации", НачалоМесяца(Объект.ПериодРегистрации));
	Запрос.УстановитьПараметр("Ссылка",            Объект.Ссылка);
	Запрос.УстановитьПараметр("Приход",            ВидДвиженияНакопления.Приход);
	Запрос.УстановитьПараметр("Организация",       Объект.Организация);
	Запрос.УстановитьПараметр("СтатьяНС",          Справочники.СтатьиНалоговыхДеклараций.ФССНесчСлуч_ВремНетрудосп);
	
	Если Объект.ЗаСчетФССОтНС Тогда
		
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			|	НачислениеПоБольничномуЛисту.Ссылка КАК Документ
			|ИЗ
			|	Документ.ИНАГРО_НачислениеПоБольничномуЛисту.Начисления КАК НачислениеПоБольничномуЛисту
			|ГДЕ
			|	НачислениеПоБольничномуЛисту.Ссылка.ПериодРегистрации = &ПериодРегистрации
			|	И НачислениеПоБольничномуЛисту.Ссылка.ПричинаНетрудоспособности.СтатьяРасчетовСФСС = &СтатьяНС
			|	И НачислениеПоБольничномуЛисту.Ссылка.Организация = &Организация
			|	И НачислениеПоБольничномуЛисту.Результат > 0
			|	И НачислениеПоБольничномуЛисту.ВидРасчета.НачислениеЗаСчетФСС = ИСТИНА
			|	И НЕ НачислениеПоБольничномуЛисту.Ссылка В
			|				(ВЫБРАТЬ
			|					ВзаиморасчетыПоНачислениямЗаСчетФСС.Документ
			|				ИЗ
			|					РегистрНакопления.ИНАГРО_ВзаиморасчетыПоНачислениямЗаСчетФСС КАК ВзаиморасчетыПоНачислениямЗаСчетФСС
			|				ГДЕ
			|					ВзаиморасчетыПоНачислениямЗаСчетФСС.Период = &ПериодРегистрации
			|					И ВзаиморасчетыПоНачислениямЗаСчетФСС.ВидДвижения = &Приход
			|					И ВзаиморасчетыПоНачислениямЗаСчетФСС.Документ.Ссылка <> &Ссылка
			|					И ВзаиморасчетыПоНачислениямЗаСчетФСС.Регистратор <> &Ссылка)
			|	И НачислениеПоБольничномуЛисту.Ссылка.Проведен = ИСТИНА";


	Иначе
		
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	Пособия.Документ КАК Документ
			|ИЗ
			|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
			|		ЕдиновременныеПособия.Ссылка КАК Документ
			|	ИЗ
			|		Документ.ИНАГРО_НачислениеЕдиновременныхПособийЗаСчетФСС КАК ЕдиновременныеПособия
			|	ГДЕ
			|		ЕдиновременныеПособия.Начисления.ВидРасчета.НачислениеЗаСчетФСС = ИСТИНА
			|		И ЕдиновременныеПособия.ПериодРегистрации = &ПериодРегистрации
			|		И ЕдиновременныеПособия.Организация = &Организация
			|	
			|	ОБЪЕДИНИТЬ ВСЕ
			|	
			|	ВЫБРАТЬ РАЗЛИЧНЫЕ
			|		НачислениеПоБольничномуЛисту.Ссылка
			|	ИЗ
			|		Документ.ИНАГРО_НачислениеПоБольничномуЛисту.Начисления КАК НачислениеПоБольничномуЛисту
			|	ГДЕ
			|		НачислениеПоБольничномуЛисту.Ссылка.ПериодРегистрации = &ПериодРегистрации
			|		И НачислениеПоБольничномуЛисту.Ссылка.ПричинаНетрудоспособности.СтатьяРасчетовСФСС <> &СтатьяНС
			|		И НачислениеПоБольничномуЛисту.Ссылка.Организация = &Организация
			|		И НачислениеПоБольничномуЛисту.Результат > 0
			|		И НачислениеПоБольничномуЛисту.ВидРасчета.НачислениеЗаСчетФСС = ИСТИНА) КАК Пособия
			|ГДЕ
			|	НЕ Пособия.Документ В
			|				(ВЫБРАТЬ
			|					ВзаиморасчетыПоНачислениямЗаСчетФСС.Документ
			|				ИЗ
			|					РегистрНакопления.ИНАГРО_ВзаиморасчетыПоНачислениямЗаСчетФСС КАК ВзаиморасчетыПоНачислениямЗаСчетФСС
			|				ГДЕ
			|					ВзаиморасчетыПоНачислениямЗаСчетФСС.ПериодВзаиморасчетов = &ПериодРегистрации
			|					И ВзаиморасчетыПоНачислениямЗаСчетФСС.ВидДвижения = &Приход
			|					И ВзаиморасчетыПоНачислениямЗаСчетФСС.Регистратор <> &Ссылка)
			|	И Пособия.Документ.Проведен = ИСТИНА";
		
	КонецЕсли;
			   
	Возврат Запрос;
	
КонецФункции

&НаКлиенте
Процедура ОчиститьТаблицыЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
    Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
        Возврат;
	КонецЕсли;
	
	Объект.ДокументыПоНачислениям.Очистить();
	
	АвтозаполнениеДокументаНаСервере();
		     
КонецПроцедуры

&НаСервере
Процедура ОчиститьТабличныеЧасти()
	
	Объект.ДокументыПоНачислениям.Очистить();
	УстановитьОтображениеПредупрежденийПриИзмененииКлючевыхРеквизитов();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтображениеПредупрежденийПриИзмененииКлючевыхРеквизитов()
	
	Если Объект.ДокументыПоНачислениям.Количество() > 0 Тогда
		ОтображениеПредупреждения = ОтображениеПредупрежденияПриРедактировании.Отображать;
	Иначе
		ОтображениеПредупреждения = ОтображениеПредупрежденияПриРедактировании.НеОтображать;
	КонецЕсли;
	
	Элементы.Организация.ОтображениеПредупрежденияПриРедактировании = ОтображениеПредупреждения;
	Элементы.ПериодРегистрацииСтрокой.ОтображениеПредупрежденияПриРедактировании = ОтображениеПредупреждения;
	
КонецПроцедуры

&НаКлиенте
Процедура АвтозаполнениеТЧ2018(Больничные, БольничныеНС, Декретные, ПособиеНаПогребение, ЗаполнитьВсе) 

	Если Объект.Ссылка = ПредопределенноеЗначение("Документ.ИНАГРО_НачислениеЗарплатыРаботникамОрганизаций.ПустаяСсылка") Тогда
		
		СтруктураЗаполнения = Новый Структура;
		СтруктураЗаполнения.Вставить("Больничные",           Больничные);
		СтруктураЗаполнения.Вставить("БольничныеНС",         БольничныеНС);
		СтруктураЗаполнения.Вставить("Декретные",            Декретные);
		СтруктураЗаполнения.Вставить("ПособиеНаПогребение",  ПособиеНаПогребение);
		СтруктураЗаполнения.Вставить("ЗаполнитьВсе",         ЗаполнитьВсе);

		ТекстВопроса =НСтр("ru='Перед заполнением документ необходимо записать. Продолжить?';uk='Перед заповненням документ потрібно записати. Продовжити?'");
		Обработчик = Новый ОписаниеОповещения("АвтозаполнениеПослеОтветаНаВопросЗаписать", ЭтотОбъект, СтруктураЗаполнения);
		ПоказатьВопрос(Обработчик, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
		
		Возврат;
		
	КонецЕсли;

	ЗаполнитьТЧДляДокументовПособий2018(Больничные, БольничныеНС, Декретные, ПособиеНаПогребение, ЗаполнитьВсе);
	
КонецПроцедуры	

&НаКлиенте
Процедура АвтозаполнениеПослеОтветаНаВопросЗаписать(Ответ, ПараметрыВыполнения) Экспорт
	
	Если Ответ <> КодВозвратаДиалога.ОК Тогда
		Возврат;
	КонецЕсли;
	
	Записать();
	
	ЗаполнитьТЧДляДокументовПособий2018(ПараметрыВыполнения.Больничные, ПараметрыВыполнения.БольничныеНС, ПараметрыВыполнения.Декретные, ПараметрыВыполнения.ПособиеНаПогребение, ПараметрыВыполнения.ЗаполнитьВсе);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТЧДляДокументовПособий2018(Больничные, БольничныеНС, Декретные, ПособиеНаПогребение, ЗаполнитьВсе)
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ПериодРегистрации",              НачалоМесяца(Объект.ПериодРегистрации));
	Запрос.УстановитьПараметр("Ссылка",                         Объект.Ссылка);
	Запрос.УстановитьПараметр("Приход",                         ВидДвиженияНакопления.Приход);
	Запрос.УстановитьПараметр("Организация",                    Объект.Организация);
	Запрос.УстановитьПараметр("СтатьяНС",                       Справочники.СтатьиНалоговыхДеклараций.ФССНесчСлуч_ВремНетрудосп);
	Запрос.УстановитьПараметр("БольничныйПоБеременностиИРодам", Справочники.ИНАГРО_ПричиныНетрудоспособности.ПоБеременностиИРодам);
	
	МенеджерВременныхТаблиц	= Новый МенеджерВременныхТаблиц;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Если Больничные ИЛИ БольничныеНС ИЛИ Декретные ИЛИ ЗаполнитьВсе Тогда	
		
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			|	НачислениеПоБольничномуЛисту.Ссылка КАК Документ,
			|	НачислениеПоБольничномуЛисту.Сотрудник КАК Сотрудник,
			|	СУММА(НачислениеПоБольничномуЛисту.ОплаченоДнейЧасов) КАК Дни,
			|	СУММА(НачислениеПоБольничномуЛисту.Результат) КАК Сумма,
			|	НачислениеПоБольничномуЛисту.Ссылка.ПричинаНетрудоспособности.СтатьяРасчетовСФСС КАК СтатьяРасчетовСФСС,
			|	НачислениеПоБольничномуЛисту.Ссылка.ПричинаНетрудоспособности КАК ПричинаНетрудоспособности
			|ПОМЕСТИТЬ ВТБольничныеЛисты
			|ИЗ
			|	Документ.ИНАГРО_НачислениеПоБольничномуЛисту.Начисления КАК НачислениеПоБольничномуЛисту
			|ГДЕ
			|	НачислениеПоБольничномуЛисту.Ссылка.ПериодРегистрации = &ПериодРегистрации
			|	И НачислениеПоБольничномуЛисту.Ссылка.Организация = &Организация
			|	И НачислениеПоБольничномуЛисту.Результат > 0
			|	И НачислениеПоБольничномуЛисту.ВидРасчета.НачислениеЗаСчетФСС = ИСТИНА
			|	И НЕ НачислениеПоБольничномуЛисту.Ссылка В
			|				(ВЫБРАТЬ
			|					РегистрНакопления.ИНАГРО_ВзаиморасчетыПоНачислениямЗаСчетФСС.Документ
			|				ИЗ
			|					РегистрНакопления.ИНАГРО_ВзаиморасчетыПоНачислениямЗаСчетФСС
			|				ГДЕ
			|					РегистрНакопления.ИНАГРО_ВзаиморасчетыПоНачислениямЗаСчетФСС.ПериодВзаиморасчетов = &ПериодРегистрации
			|					И РегистрНакопления.ИНАГРО_ВзаиморасчетыПоНачислениямЗаСчетФСС.ВидДвижения = &Приход
			|					И РегистрНакопления.ИНАГРО_ВзаиморасчетыПоНачислениямЗаСчетФСС.Документ.Ссылка <> &Ссылка
			|					И РегистрНакопления.ИНАГРО_ВзаиморасчетыПоНачислениямЗаСчетФСС.Регистратор <> &Ссылка)
			|	И НачислениеПоБольничномуЛисту.Ссылка.Проведен = ИСТИНА
			|
			|СГРУППИРОВАТЬ ПО
			|	НачислениеПоБольничномуЛисту.Ссылка,
			|	НачислениеПоБольничномуЛисту.Сотрудник,
			|	НачислениеПоБольничномуЛисту.Ссылка.ПричинаНетрудоспособности.СтатьяРасчетовСФСС,
			|	НачислениеПоБольничномуЛисту.Ссылка.ПричинаНетрудоспособности";
		
		Запрос.Выполнить();
		
	КонецЕсли;	  
	
	Если БольничныеНС ИЛИ ЗаполнитьВсе Тогда 
		
		Запрос.Текст =
			"ВЫБРАТЬ
			|	НачислениеПоБольничномуЛисту.Документ КАК Документ,
			|	НачислениеПоБольничномуЛисту.Сотрудник КАК Сотрудник,
			|	НачислениеПоБольничномуЛисту.Дни КАК Дни,
			|	НачислениеПоБольничномуЛисту.Сумма КАК Сумма
			|ИЗ
			|	ВТБольничныеЛисты КАК НачислениеПоБольничномуЛисту
			|ГДЕ
			|	НачислениеПоБольничномуЛисту.СтатьяРасчетовСФСС = &СтатьяНС";
		
		Объект.БольничныеНС.Загрузить(Запрос.Выполнить().Выгрузить());				   
		
	КонецЕсли;
	
	Если Декретные ИЛИ ЗаполнитьВсе Тогда 
		
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			|	НачислениеПоБольничномуЛисту.Документ КАК Документ,
			|	НачислениеПоБольничномуЛисту.Сотрудник КАК Сотрудник,
			|	НачислениеПоБольничномуЛисту.Дни КАК Дни,
			|	НачислениеПоБольничномуЛисту.Сумма КАК Сумма
			|ИЗ
			|	ВТБольничныеЛисты КАК НачислениеПоБольничномуЛисту
			|ГДЕ
			|	НачислениеПоБольничномуЛисту.ПричинаНетрудоспособности = &БольничныйПоБеременностиИРодам";
		
		Объект.Декретные.Загрузить(Запрос.Выполнить().Выгрузить());				   
		
	КонецЕсли;
	
	Если Больничные ИЛИ ЗаполнитьВсе Тогда
		
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			|	НачислениеПоБольничномуЛисту.Документ КАК Документ,
			|	НачислениеПоБольничномуЛисту.Сотрудник КАК Сотрудник,
			|	НачислениеПоБольничномуЛисту.Дни КАК Дни,
			|	НачислениеПоБольничномуЛисту.Сумма КАК Сумма
			|ИЗ
			|	ВТБольничныеЛисты КАК НачислениеПоБольничномуЛисту
			|ГДЕ
			|	НачислениеПоБольничномуЛисту.ПричинаНетрудоспособности <> &БольничныйПоБеременностиИРодам
			|	И НачислениеПоБольничномуЛисту.СтатьяРасчетовСФСС <> &СтатьяНС";
		
		Объект.Больничные.Загрузить(Запрос.Выполнить().Выгрузить());				   
		
	КонецЕсли;
	
	Если ПособиеНаПогребение ИЛИ ЗаполнитьВсе Тогда
		
		Запрос.Текст =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			|	ЕдиновременныеПособия.Ссылка КАК Документ,
			|	ЕдиновременныеПособия.Сотрудник КАК Сотрудник,
			|	ЕдиновременныеПособия.Результат КАК Сумма,
			|	ЕдиновременныеПособия.ФамилияУмершего КАК ФамилияУмершего,
			|	ЕдиновременныеПособия.ИмяУмершего КАК ИмяУмершего,
			|	ЕдиновременныеПособия.ОтчествоУмершего КАК ОтчествоУмершего
			|ИЗ
			|	Документ.ИНАГРО_НачислениеЕдиновременныхПособийЗаСчетФСС.Начисления КАК ЕдиновременныеПособия
			|ГДЕ
			|	ЕдиновременныеПособия.ВидРасчета.НачислениеЗаСчетФСС = ИСТИНА
			|	И ЕдиновременныеПособия.Ссылка.ПериодРегистрации = &ПериодРегистрации
			|	И ЕдиновременныеПособия.Ссылка.Организация = &Организация
			|	И НЕ ЕдиновременныеПособия.Ссылка В
			|				(ВЫБРАТЬ
			|					РегистрНакопления.ИНАГРО_ВзаиморасчетыПоНачислениямЗаСчетФСС.Документ
			|				ИЗ
			|					РегистрНакопления.ИНАГРО_ВзаиморасчетыПоНачислениямЗаСчетФСС
			|				ГДЕ
			|					РегистрНакопления.ИНАГРО_ВзаиморасчетыПоНачислениямЗаСчетФСС.ПериодВзаиморасчетов = &ПериодРегистрации
			|					И РегистрНакопления.ИНАГРО_ВзаиморасчетыПоНачислениямЗаСчетФСС.ВидДвижения = &Приход
			|					И РегистрНакопления.ИНАГРО_ВзаиморасчетыПоНачислениямЗаСчетФСС.Регистратор <> &Ссылка)
			|	И ЕдиновременныеПособия.Ссылка.Проведен = ИСТИНА";
		
		Объект.Погребение.Загрузить(Запрос.Выполнить().Выгрузить());				   
		
	КонецЕсли;
	
	Документы.ИНАГРО_ЗаявлениеРасчетВФСС.РассчитатьИтоговыеСуммы(Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеУдаленияСтрокиТЧ(Элемент)
	
	ПослеУдаленияСтрокиТЧНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПослеУдаленияСтрокиТЧНаСервере()
	
	Документы.ИНАГРО_ЗаявлениеРасчетВФСС.РассчитатьИтоговыеСуммы(Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПараметрыОтбораДокумента(ИмяТабличнойЧасти)
	
	ТекущиеДанные = Элементы[ИмяТабличнойЧасти].ТекущиеДанные;	
	
	Если ТекущиеДанные.Документ <> Неопределено Тогда
		
		МассивПараметров = Новый Массив();
		
		НовыйПараметр = Новый ПараметрВыбора("Отбор.Организация", Объект.Организация);
		МассивПараметров.Добавить(НовыйПараметр);
		
		НовыйПараметр = Новый ПараметрВыбора("Отбор.ПричинаНетрудоспособности", СписокПричинНетрудоспособности(ИмяТабличнойЧасти));
		МассивПараметров.Добавить(НовыйПараметр);
				
		Элементы[ИмяТабличнойЧасти + "Документ"].ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СписокПричинНетрудоспособности(ИмяТабличнойЧасти)
	
	СписокПричинНетрудоспособности = Новый СписокЗначений;

	Если ИмяТабличнойЧасти = "Больничные" ИЛИ ИмяТабличнойЧасти = "БольничныеНС" Тогда 
		
		Запрос = Новый Запрос;
		
		Запрос.Текст =
			"ВЫБРАТЬ
			|	ПричиныНетрудоспособности.Ссылка КАК ПричинаНетрудоспособности
			|ИЗ
			|	Справочник.ИНАГРО_ПричиныНетрудоспособности КАК ПричиныНетрудоспособности
			|ГДЕ
			|	ПричиныНетрудоспособности.СтатьяРасчетовСФСС В(&СтатьиРасчетовСФСС)
			|	И ПричиныНетрудоспособности.Ссылка <> &БольничныйПоБеременностиИРодам";
		
		СтатьиРасчетовСФСС = Новый СписокЗначений; 		
		
		Если ИмяТабличнойЧасти = "Больничные" Тогда
			СтатьиРасчетовСФСС.Добавить(Справочники.СтатьиНалоговыхДеклараций.ФССУтрТрудосп_ВремНетрудосп);
			СтатьиРасчетовСФСС.Добавить(Справочники.СтатьиНалоговыхДеклараций.ФССУтрТрудосп_ВремНетрудоспУход);
		Иначе	
			СтатьиРасчетовСФСС = Справочники.СтатьиНалоговыхДеклараций.ФССНесчСлуч_ВремНетрудосп;
		КонецЕсли;
		
		Запрос.УстановитьПараметр("СтатьиРасчетовСФСС",             СтатьиРасчетовСФСС);
		Запрос.УстановитьПараметр("БольничныйПоБеременностиИРодам", Справочники.ИНАГРО_ПричиныНетрудоспособности.ПоБеременностиИРодам);
		
		МассивПричинНетрудоспособности = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ПричинаНетрудоспособности");
		
		Для Каждого ЭлементМассива Из МассивПричинНетрудоспособности Цикл
			СписокПричинНетрудоспособности.Добавить(ЭлементМассива);	
		КонецЦикла;
		
	ИначеЕсли ИмяТабличнойЧасти = "Декретные" Тогда
		
		СписокПричинНетрудоспособности = Справочники.ИНАГРО_ПричиныНетрудоспособности.ПоБеременностиИРодам;
		
	КонецЕсли;
	
	Возврат СписокПричинНетрудоспособности;         
		
КонецФункции

#Область ПериодРегистрацииСтрокой

&НаКлиенте
Процедура ПериодРегистрацииСтрокойПриИзменении(Элемент)
	
	ЗарплатаКадрыКлиент.ВводМесяцаПриИзменении(ЭтаФорма, "Объект.ПериодРегистрации", "ПериодРегистрацииСтрокой", Модифицированность);

	УстановитьФункциональныеОпцииФормы();
		
	Если Объект.ДокументыПоНачислениям.Количество() > 0 Тогда
		Объект.ДокументыПоНачислениям.Очистить();
	КонецЕсли; 

КонецПроцедуры

&НаКлиенте
Процедура ПериодРегистрацииСтрокойНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ЗарплатаКадрыКлиент.ВводМесяцаНачалоВыбора(ЭтаФорма, ЭтаФорма, "Объект.ПериодРегистрации", "ПериодРегистрацииСтрокой");
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодРегистрацииСтрокойРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	ЗарплатаКадрыКлиент.ВводМесяцаРегулирование(ЭтаФорма, "Объект.ПериодРегистрации", "ПериодРегистрацииСтрокой", Направление, Модифицированность);

КонецПроцедуры

&НаКлиенте
Процедура ПериодРегистрацииСтрокойАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	ЗарплатаКадрыКлиент.ВводМесяцаАвтоПодборТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура ПериодРегистрацииСтрокойОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	ЗарплатаКадрыКлиент.ВводМесяцаОкончаниеВводаТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);

КонецПроцедуры

#КонецОбласти

#Область ПрочийФункционал

&НаКлиенте
Процедура ВыгрузкаПервичныхДокументовВЗвит1С(Команда)
		
	Если Не РегламентированнаяОтчетностьКлиент.ПодключитьМенеджерЗвит1С(Истина) Тогда
		Возврат;
	КонецЕсли;

	Если Объект.Ссылка.Пустая() ИЛИ Модифицированность Тогда
		Если Объект.Ссылка.Пустая() Тогда
			
			ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Выполнение действия ""%1"" возможно только после записи данных. Данные будут записаны.';uk='Виконання дії ""%1"" можливо тільки після запису даних. Дані будуть записані.'"),
				НСтр("ru = 'выгрузки'; uk = 'вивантаження'"));
				
			ОписаниеОповещения = Новый ОписаниеОповещения("ВыполнитьВыгрузку", ЭтаФорма);
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
			
		КонецЕсли;
	Иначе
		ВыполнитьВыгрузку(КодВозвратаДиалога.ОК, Неопределено);	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьВыгрузку(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.ОК Тогда
		Записать();
		Если Объект.Ссылка.Пустая() ИЛИ Модифицированность Тогда
			Возврат; // запись не удалась, сообщения о причинах выводит платформа
		КонецЕсли;
	ИначеЕсли РезультатВопроса = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;
	
	ЕстьПодключениеКЗвит1С = глМенеджерЗвит1С.ЗапуститьЗвит1С(Ложь, Объект.Организация);
	Если Не ЕстьПодключениеКЗвит1С Тогда
		Возврат;
	КонецЕсли;
	
	ВыборкаШапка = ПолучитьВыборкуШапка();
	ВыборкаТЧ = ПолучитьВыборкуТЧ();
	
	глКомпонентаЗвит1С.Bring1CToFront();
	
	ВерсияОтчета = "01";
	
	// Создаем основной документ C11001..
	ТипПериода	   = 0; 
	НомерВПериоде  = Месяц(Объект.ПериодРегистрации);
	Год			   = Год(Объект.ПериодРегистрации);
	ИмяСхемыЗвит1С = "C11001"+ВерсияОтчета;
	
	ИдГоловнойОтчет = СтрЗаменить("" + Объект.Ссылка.УникальныйИдентификатор(), "-", "");
	Попытка
		ГоловнойОтчет = глКомпонентаЗвит1С.OpenCreateReport(ВыборкаШапка.КодПоЕДРПОУ, ИмяСхемыЗвит1С, ТипПериода, НомерВПериоде, Год, ИдГоловнойОтчет);
	Исключение
		ТекстСообщения = НСтр("ru='Ошибка создания отчета %1: %2. Формирование отчета прервано!';uk='Помилка створення звіту %1: %2. Формування звіту перервано!'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения,ИмяСхемыЗвит1С,ОписаниеОшибки()));
		Возврат;
	КонецПопытки;

	ДобавитьПоказательВОтчетЗвит1С(ГоловнойОтчет, , "FIRM_NAME",    ВыборкаШапка.НаименованиеПолное);
	ДобавитьПоказательВОтчетЗвит1С(ГоловнойОтчет, , "FIRM_EDRPOU",  ВыборкаШапка.КодПоЕДРПОУ);
	ДобавитьПоказательВОтчетЗвит1С(ГоловнойОтчет, , "CODE_FSSU",    ВыборкаШапка.НомерФССУ);
	ДобавитьПоказательВОтчетЗвит1С(ГоловнойОтчет, , "FIRM_ADR", 	ВыборкаШапка.АдресОрганизации);
	ДобавитьПоказательВОтчетЗвит1С(ГоловнойОтчет, , "FIRM_TELORG", 	ВыборкаШапка.Телефон);
	ДобавитьПоказательВОтчетЗвит1С(ГоловнойОтчет, , "FIRM_FSSUACC", ВыборкаШапка.НомерСчета);	
	ДобавитьПоказательВОтчетЗвит1С(ГоловнойОтчет, , "FIRM_FSSUBANK",ВыборкаШапка.БанкНаименование);
	ДобавитьПоказательВОтчетЗвит1С(ГоловнойОтчет, , "FIRM_FSSUMFO", ВыборкаШапка.БанкКод);
	
		//СтрокаВремНетрудоспособность
	ДобавитьПоказательВОтчетЗвит1С(ГоловнойОтчет, , "A1_3",  Объект.Больничные.Итог("Дни"));
	ДобавитьПоказательВОтчетЗвит1С(ГоловнойОтчет, , "A1_4",  Объект.Больничные.Итог("Сумма"));
	Если Объект.Больничные.Итог("Дни") > 0 Тогда
		ДобавитьПоказательВОтчетЗвит1С(ГоловнойОтчет, , "N16", 1);
	КонецЕсли;
	ДобавитьПоказательВОтчетЗвит1С(ГоловнойОтчет, , "A11_3",  Объект.Больничные.Итог("ДниЧАЭС"));
	ДобавитьПоказательВОтчетЗвит1С(ГоловнойОтчет, , "A11_4",  Объект.Больничные.Итог("СуммаЧАЭС"));
	
	
	//СтрокаВремНетрудоспособностьБерем
	ДобавитьПоказательВОтчетЗвит1С(ГоловнойОтчет, , "A2_3",  Объект.Декретные.Итог("Дни"));
	ДобавитьПоказательВОтчетЗвит1С(ГоловнойОтчет, , "A2_4",  Объект.Декретные.Итог("Сумма"));
	Если Объект.Декретные.Итог("Дни") > 0 Тогда
		ДобавитьПоказательВОтчетЗвит1С(ГоловнойОтчет, , "N17", 1);
	КонецЕсли;
	ДобавитьПоказательВОтчетЗвит1С(ГоловнойОтчет, , "A21_3",  Объект.Декретные.Итог("ДниЧАЭС"));
	ДобавитьПоказательВОтчетЗвит1С(ГоловнойОтчет, , "A21_4",  Объект.Декретные.Итог("СуммаЧАЭС"));
	
	//СтрокаВремНетрудоспособностьПогребение 
	ДобавитьПоказательВОтчетЗвит1С(ГоловнойОтчет, , "A3_3",  Объект.Погребение.Количество());
	ДобавитьПоказательВОтчетЗвит1С(ГоловнойОтчет, , "A3_4",  Объект.Погребение.Итог("Сумма"));
	Если Объект.Погребение.Количество() > 0 Тогда
		ДобавитьПоказательВОтчетЗвит1С(ГоловнойОтчет, , "N18", 1);
	КонецЕсли;
	
		//СтрокаВремНетрудоспособностьНС
	ДобавитьПоказательВОтчетЗвит1С(ГоловнойОтчет, , "A4_3",  Объект.БольничныеНС.Итог("Дни"));
	ДобавитьПоказательВОтчетЗвит1С(ГоловнойОтчет, , "A4_4",  Объект.БольничныеНС.Итог("Сумма"));
	Если Объект.БольничныеНС.Итог("Дни") > 0 Тогда
		ДобавитьПоказательВОтчетЗвит1С(ГоловнойОтчет, , "N19", 1);
	КонецЕсли;
	
	//Итог
	СуммаИтог = Объект.Больничные.Итог("Сумма") + Объект.БольничныеНС.Итог("Сумма") + Объект.Декретные.Итог("Сумма") + Объект.Погребение.Итог("Сумма"); 
	ДобавитьПоказательВОтчетЗвит1С(ГоловнойОтчет, , "A7_4",  Объект.Больничные.Итог("Сумма") + Объект.БольничныеНС.Итог("Сумма") + Объект.Декретные.Итог("Сумма") + Объект.Погребение.Итог("Сумма"));
	
	// подписи приложений
	Если Объект.Больничные.Итог("Дни") > 0 ИЛИ Объект.Декретные.Итог("Дни") > 0 Тогда
		ДобавитьПоказательВОтчетЗвит1С(ГоловнойОтчет, , "N1", ВыборкаШапка.ИсполнительДолжность);	
		ДобавитьПоказательВОтчетЗвит1С(ГоловнойОтчет, , "N2", ВыборкаШапка.Исполнитель);	
		ДобавитьПоказательВОтчетЗвит1С(ГоловнойОтчет, , "N3", ВыборкаШапка.Телефон);	
	КонецЕсли;	
	Если Объект.Погребение.Количество() > 0 Тогда
		ДобавитьПоказательВОтчетЗвит1С(ГоловнойОтчет, , "N4", ВыборкаШапка.ИсполнительДолжность);	
		ДобавитьПоказательВОтчетЗвит1С(ГоловнойОтчет, , "N5", ВыборкаШапка.Исполнитель);	
		ДобавитьПоказательВОтчетЗвит1С(ГоловнойОтчет, , "N6", ВыборкаШапка.Телефон);	
	КонецЕсли;	
	Если Объект.БольничныеНС.Итог("Дни") > 0 Тогда
		ДобавитьПоказательВОтчетЗвит1С(ГоловнойОтчет, , "N7", ВыборкаШапка.ИсполнительДолжность);	
		ДобавитьПоказательВОтчетЗвит1С(ГоловнойОтчет, , "N8", ВыборкаШапка.Исполнитель);
		ДобавитьПоказательВОтчетЗвит1С(ГоловнойОтчет, , "N9", ВыборкаШапка.Телефон);
	КонецЕсли;
	
	// Приложение 1.1
	НомерСтроки = 1;
	Для каждого Выборка ИЗ ВыборкаТЧ.ТЧ11 Цикл
		
		Если ЗначениеЗаполнено(Выборка.РезультатФСС) Тогда
				
			ДобавитьСтрокуВОтчетЗвит1С(ГоловнойОтчет, "TAB1");
				
			ДобавитьПоказательВОтчетЗвит1С(ГоловнойОтчет, "TAB1", "TAB1_A1", НомерСтроки);
			ДобавитьПоказательВОтчетЗвит1С(ГоловнойОтчет, "TAB1", "TAB1_A2", Выборка.Фамилия);
			ДобавитьПоказательВОтчетЗвит1С(ГоловнойОтчет, "TAB1", "TAB1_A3", Выборка.Имя);
			ДобавитьПоказательВОтчетЗвит1С(ГоловнойОтчет, "TAB1", "TAB1_A4", Выборка.Отчество);
			ДобавитьПоказательВОтчетЗвит1С(ГоловнойОтчет, "TAB1", "TAB1_A5", Выборка.ДРФО);
			ДобавитьПоказательВОтчетЗвит1С(ГоловнойОтчет, "TAB1", "TAB1_A6", Выборка.ВидЗанятости);
			ДобавитьПоказательВОтчетЗвит1С(ГоловнойОтчет, "TAB1", "TAB1_A7", Выборка.Серия);
			ДобавитьПоказательВОтчетЗвит1С(ГоловнойОтчет, "TAB1", "TAB1_A8", Выборка.Номер);
			ДобавитьПоказательВОтчетЗвит1С(ГоловнойОтчет, "TAB1", "TAB1_A9", Выборка.ЭтоПродолжениеБольничного);
			ДобавитьПоказательВОтчетЗвит1С(ГоловнойОтчет, "TAB1", "TAB1_A10", Выборка.ПричинаНетрудоспособности);
			ДобавитьПоказательВОтчетЗвит1С(ГоловнойОтчет, "TAB1", "TAB1_A11", Выборка.ПериодНачало);
			ДобавитьПоказательВОтчетЗвит1С(ГоловнойОтчет, "TAB1", "TAB1_A12", Выборка.ПериодКонец);
			ДобавитьПоказательВОтчетЗвит1С(ГоловнойОтчет, "TAB1", "TAB1_A13", Выборка.КоличествоДней);
			ДобавитьПоказательВОтчетЗвит1С(ГоловнойОтчет, "TAB1", "TAB1_A14", Выборка.КоличествоДнейФСС);
			ДобавитьПоказательВОтчетЗвит1С(ГоловнойОтчет, "TAB1", "TAB1_A15", Выборка.Результат);
			ДобавитьПоказательВОтчетЗвит1С(ГоловнойОтчет, "TAB1", "TAB1_A16", Выборка.РезультатФСС);
			ДобавитьПоказательВОтчетЗвит1С(ГоловнойОтчет, "TAB1", "TAB1_A17", Выборка.ДниЧАЭС);
			ДобавитьПоказательВОтчетЗвит1С(ГоловнойОтчет, "TAB1", "TAB1_A18", Выборка.СуммаЧАЭС);
			ДобавитьПоказательВОтчетЗвит1С(ГоловнойОтчет, "TAB1", "TAB1_A19", "");
			ДобавитьПоказательВОтчетЗвит1С(ГоловнойОтчет, "TAB1", "TAB1_A21", Выборка.СтажВМесяцах);
			ДобавитьПоказательВОтчетЗвит1С(ГоловнойОтчет, "TAB1", "TAB1_A22", Выборка.СтажЗа12МесяцевВМесяцах);
				
			НомерСтроки = НомерСтроки +1;
				
		КонецЕсли;
	КонецЦикла;

	// Приложение 1.2
	НомерСтроки = 1;
	Для каждого Выборка ИЗ ВыборкаТЧ.ТЧ12 Цикл
		
		Если ЗначениеЗаполнено(Выборка.Сумма) Тогда
				
			ДобавитьСтрокуВОтчетЗвит1С(ГоловнойОтчет, "TAB2");
				
			ДобавитьПоказательВОтчетЗвит1С(ГоловнойОтчет, "TAB2", "TAB2_A1", НомерСтроки);
			ДобавитьПоказательВОтчетЗвит1С(ГоловнойОтчет, "TAB2", "TAB2_A1_1", 1); //получатель физ.лицо
			ДобавитьПоказательВОтчетЗвит1С(ГоловнойОтчет, "TAB2", "TAB2_A2", Выборка.Фамилия);
			ДобавитьПоказательВОтчетЗвит1С(ГоловнойОтчет, "TAB2", "TAB2_A3", Выборка.Имя);
			ДобавитьПоказательВОтчетЗвит1С(ГоловнойОтчет, "TAB2", "TAB2_A4", Выборка.Отчество);
			ДобавитьПоказательВОтчетЗвит1С(ГоловнойОтчет, "TAB2", "TAB2_A5", Выборка.ДРФО);
			ДобавитьПоказательВОтчетЗвит1С(ГоловнойОтчет, "TAB2", "TAB2_A6", Выборка.ФамилияУмершего);
			ДобавитьПоказательВОтчетЗвит1С(ГоловнойОтчет, "TAB2", "TAB2_A7", Выборка.ИмяУмершего);
			ДобавитьПоказательВОтчетЗвит1С(ГоловнойОтчет, "TAB2", "TAB2_A8", Выборка.ОтчествоУмершего);
			ДобавитьПоказательВОтчетЗвит1С(ГоловнойОтчет, "TAB2", "TAB2_A9", Выборка.СвидетельствоСерия);
			ДобавитьПоказательВОтчетЗвит1С(ГоловнойОтчет, "TAB2", "TAB2_A10", Выборка.СвидетельствоНомер);
			ДобавитьПоказательВОтчетЗвит1С(ГоловнойОтчет, "TAB2", "TAB2_A11", Выборка.Сумма);
				
			НомерСтроки = НомерСтроки +1;
				
		КонецЕсли;
	КонецЦикла;
	
	// Приложение 1.3
	НомерСтроки = 1;
	Для каждого Выборка ИЗ ВыборкаТЧ.ТЧ13 Цикл
		
		Если ЗначениеЗаполнено(Выборка.РезультатФСС) Тогда
				
			ДобавитьСтрокуВОтчетЗвит1С(ГоловнойОтчет, "TAB3");
				
			ДобавитьПоказательВОтчетЗвит1С(ГоловнойОтчет, "TAB3", "TAB3_A1", НомерСтроки);
			ДобавитьПоказательВОтчетЗвит1С(ГоловнойОтчет, "TAB3", "TAB3_A2", Выборка.Фамилия);
			ДобавитьПоказательВОтчетЗвит1С(ГоловнойОтчет, "TAB3", "TAB3_A3", Выборка.Имя);
			ДобавитьПоказательВОтчетЗвит1С(ГоловнойОтчет, "TAB3", "TAB3_A4", Выборка.Отчество);
			ДобавитьПоказательВОтчетЗвит1С(ГоловнойОтчет, "TAB3", "TAB3_A5", Выборка.ДРФО);
			ДобавитьПоказательВОтчетЗвит1С(ГоловнойОтчет, "TAB3", "TAB3_A6", Выборка.ВидЗанятости);
			ДобавитьПоказательВОтчетЗвит1С(ГоловнойОтчет, "TAB3", "TAB3_A9", Выборка.Серия);
			ДобавитьПоказательВОтчетЗвит1С(ГоловнойОтчет, "TAB3", "TAB3_A10", Выборка.Номер);
			ДобавитьПоказательВОтчетЗвит1С(ГоловнойОтчет, "TAB3", "TAB3_A11", Выборка.ПричинаНетрудоспособности);
			ДобавитьПоказательВОтчетЗвит1С(ГоловнойОтчет, "TAB3", "TAB3_A12", Выборка.ПериодНачало);
			ДобавитьПоказательВОтчетЗвит1С(ГоловнойОтчет, "TAB3", "TAB3_A13", Выборка.ПериодКонец);
			ДобавитьПоказательВОтчетЗвит1С(ГоловнойОтчет, "TAB3", "TAB3_A14", Выборка.КоличествоДнейФСС);
			ДобавитьПоказательВОтчетЗвит1С(ГоловнойОтчет, "TAB3", "TAB3_A15", Выборка.РезультатФСС);
				
			НомерСтроки = НомерСтроки +1;
				
		КонецЕсли;
		
	КонецЦикла;
	
	ДобавитьПоказательВОтчетЗвит1С(ГоловнойОтчет, , "REP_DATE", Объект.Дата);	

	ДобавитьПоказательВОтчетЗвит1С(ГоловнойОтчет, , "FIRM_RUK", ВыборкаШапка.Руководитель);	
	ДобавитьПоказательВОтчетЗвит1С(ГоловнойОтчет, , "FIRM_BUH", ВыборкаШапка.ГлавныйБухгалтер);	
	
	глКомпонентаЗвит1С.SaveReportEx(ГоловнойОтчет, 1);
	
	ПоказатьПредупреждение(,НСтр("ru='Заявление успешно выгружено во FREDO!';uk='Заяву успішно вивантажено у FREDO!'"));
	
	глКомпонентаЗвит1С.BringZvitToFront();
	
КонецПроцедуры

&НаСервере
Функция ПолучитьВыборкуТЧ()
	
	ВыборкаТЧ = Новый Структура;
	РезультатыПоТЧ = Документы.ИНАГРО_ЗаявлениеРасчетВФСС.СформироватьДанныеДляВыгрузки(Объект.Ссылка);

	ВыборкаТЧ.Вставить("ТЧ11", ОбщегоНазначения.ТаблицаЗначенийВМассив(РезультатыПоТЧ.ТЧ11));
	ВыборкаТЧ.Вставить("ТЧ12", ОбщегоНазначения.ТаблицаЗначенийВМассив(РезультатыПоТЧ.ТЧ12));
	ВыборкаТЧ.Вставить("ТЧ13", ОбщегоНазначения.ТаблицаЗначенийВМассив(РезультатыПоТЧ.ТЧ13));
	
	Возврат ВыборкаТЧ;
	
КонецФункции	

&НаСервере
Функция ПолучитьВыборкуШапка()
	
	Шапка = Новый Структура;
	Шапка.Вставить("Организация", Объект.Организация);
	Шапка.Вставить("НаименованиеПолное", Объект.Организация.НаименованиеПолное);
	Шапка.Вставить("КодПоЕДРПОУ", Объект.Организация.КодПоЕДРПОУ);
	
	Сведения = Новый СписокЗначений;
	Сведения.Добавить("", "НомерФССУ");
	Коды 	= РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(Объект.Организация, Объект.Дата, Сведения);
	Шапка.Вставить("НомерФССУ", Коды.НомерФССУ);
	
	Исполнитель = ОтветственныеЛицаБП.ОтветственныеЛица(Объект.Организация, Объект.Дата);
	Шапка.Вставить("ИсполнительДолжность", Исполнитель.ИсполнительДолжность);
	Шапка.Вставить("Исполнитель", Исполнитель.Исполнитель);
	
	Шапка.Вставить("НомерСчета", Объект.Организация.БанковскийСчетДляРасчетовСФСС.НомерСчета);	
	Шапка.Вставить("БанкНаименование", Объект.Организация.БанковскийСчетДляРасчетовСФСС.Банк.Наименование);
	Шапка.Вставить("БанкКод", Объект.Организация.БанковскийСчетДляРасчетовСФСС.Банк.Код);

	Шапка.Вставить("Руководитель", Исполнитель.Руководитель);
	Шапка.Вставить("ГлавныйБухгалтер", Исполнитель.ГлавныйБухгалтер);
	
	// Получим данные из РС КонтактнаяИнформация для адреса организации
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	КонтактнаяИнформация.Представление КАК Адрес
	               |ИЗ
	               |	Справочник.Организации.КонтактнаяИнформация КАК КонтактнаяИнформация
	               |ГДЕ
	               |	КонтактнаяИнформация.Тип = &Тип
	               |	И КонтактнаяИнформация.Вид = &Вид
	               |	И КонтактнаяИнформация.Ссылка = &Объект";
	
	Запрос.УстановитьПараметр("Объект", Объект.Организация);
	Запрос.УстановитьПараметр("Тип", Перечисления.ТипыКонтактнойИнформации.Адрес);
	Запрос.УстановитьПараметр("Вид", Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
							
	Если Выборка.Следующий() Тогда
		Шапка.Вставить("АдресОрганизации", Выборка.Адрес);
	Иначе
		Шапка.Вставить("АдресОрганизации", НСтр("ru='<Не заполнен>';uk='<Не заповнений>'"));
	КонецЕсли;
							
	// Получим данные из РС КонтактнаяИнформация для телефона организации
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КонтактнаяИнформация.Представление КАК Телефон
	|ИЗ
	|	Справочник.Организации.КонтактнаяИнформация КАК КонтактнаяИнформация
	|ГДЕ
	|	КонтактнаяИнформация.Ссылка = &Объект
	|	И КонтактнаяИнформация.Тип = &Тип
	|	И КонтактнаяИнформация.Вид = &Вид";
	
	Запрос.УстановитьПараметр("Объект", Объект.Организация);
	Запрос.УстановитьПараметр("Тип", Перечисления.ТипыКонтактнойИнформации.Телефон);
	Запрос.УстановитьПараметр("Вид", Справочники.ВидыКонтактнойИнформации.ТелефонОрганизации);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		Шапка.Вставить("Телефон", ОбщегоНазначенияБПВызовСервера.ПолучитьТелефонДляНалоговойНакладной(Выборка.Телефон));
	Иначе
		Шапка.Вставить("Телефон", НСтр("ru='<Не заполнен>';uk='<Не заповнений>'"));
	КонецЕсли;

	Возврат Шапка;
	
КонецФункции	

&НаКлиенте
Процедура ДобавитьПоказательВОтчетЗвит1С(Отчет, ИмяТаблицыЗвит1С = "", ИмяЗвит1С, Значение, ЗаписыватьПустое = Ложь)
	
	Если НЕ ЗаписыватьПустое И НЕ ЗначениеЗаполнено(Значение) Тогда
		Возврат;	
	КонецЕсли;
	
	Попытка
		Отчет.SetValue(ИмяТаблицыЗвит1С, ИмяЗвит1С, Значение); 
	Исключение
		Если глМенеджерЗвит1С.ФлагОтладки Тогда
			Если ПустаяСтрока(ИмяТаблицыЗвит1С) Тогда
				ТекстСообщения = НСтр("ru='FREDO. Ошибка установки показателя (схема ""%1"", поле ""%2"", тип значения ""%3"", значение ""%4"")';
									  |uk='FREDO. Помилка встановлення показника (схема ""%1"", поле ""%2"", тип значення ""%3"", значення ""%4"")'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения,Отчет.CharCode,ИмяЗвит1С,ТипЗнч(Значение),Значение));
			Иначе	
			     ТекстСообщения = НСтр("ru='FREDO. Ошибка установки показателя (схема ""%1"", имя таблицы ""%2"", поле ""%3"", тип значения ""%4"", значение ""%5"")';
									  |uk='FREDO. Помилка встановлення показника (схема ""%1"", ім'я таблиці ""%2"", поле ""%3"", тип значення ""%4"", значення ""%5"")'");
				 ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения,Отчет.CharCode,ИмяТаблицыЗвит1С,ИмяЗвит1С,ТипЗнч(Значение),Значение));
			КонецЕсли;	
		КонецЕсли;
	КонецПопытки;
		
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСтрокуВОтчетЗвит1С(Отчет, ИмяТаблицыЗвит1С)

	Отчет.NewRow(ИмяТаблицыЗвит1С);

КонецПроцедуры

#КонецОбласти

#КонецОбласти 

#Область СлужебныеПроцедурыИФункцииБСП

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти
