#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ ПРОВЕДЕНИЯ
Перем мВалютаРегламентированногоУчета;
Перем ПартионныйУчетБУ;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ПРОВЕДЕНИЯ - ПОДГОТОВКА ДАННЫХ ИНФОРМАЦИОННОЙ БАЗЫ

// Процедура формирует структуру шапки документа и дополнительных полей.
//
Процедура ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента) Экспорт
	
	// Дерево значений, содержащее имена необходимых полей в запросе по шапке.
	Перем ДеревоПолейЗапросаПоШапке;

	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента = ОбщегоНазначенияРед12.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);

   	// Заполним по шапке документа дерево параметров, нужных при проведении.
	ДеревоПолейЗапросаПоШапке = ОбщегоНазначенияРед12.СформироватьДеревоПолейЗапросаПоШапке();
	ОбщегоНазначенияРед12.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов",     "Организация"          , "ДоговорОрганизация");
	ОбщегоНазначенияРед12.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов",     "ВидДоговора"          , "ВидДоговора");
	ОбщегоНазначенияРед12.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов",     "ВедениеВзаиморасчетов", "ВедениеВзаиморасчетов");
	ОбщегоНазначенияРед12.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", 	 "НеОтноситьНаЗатратыПоНУ", "НеОтноситьНаЗатратыПоНУ");
	
	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа
	СтруктураШапкиДокумента = УправлениеЗапасами.СформироватьЗапросПоДеревуПолей(ЭтотОбъект, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета);
	
КонецПроцедуры // ПодготовитьСтруктуруШапкиДокумента()

Процедура ПодготовитьПараметрыУчетнойПолитики(СтруктураШапкиДокумента, Отказ)

	СпособОценкиМПЗ = УчетнаяПолитика.СпособОценкиМПЗ(СтруктураШапкиДокумента.Организация, СтруктураШапкиДокумента.Дата);
	ПартионныйУчетБУ = (СпособОценкиМПЗ = Перечисления.СпособыОценки.ФИФО) ИЛИ (СпособОценкиМПЗ = Перечисления.СпособыОценки.ЛИФО);

	СтруктураШапкиДокумента.Вставить("ЕстьНалогНаПрибыльДо2015", УчетнаяПолитика.ПлательщикНалогаНаПрибыльДо2015(СтруктураШапкиДокумента.Организация, СтруктураШапкиДокумента.Дата));
	СтруктураШапкиДокумента.Вставить("ЕстьНДС"           , УчетнаяПолитика.ПлательщикНДС(СтруктураШапкиДокумента.Организация, СтруктураШапкиДокумента.Дата));

КонецПроцедуры

// Процедура формирует таблицы документа.
//
Процедура ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоОборудованию, Отказ, Заголовок) Экспорт
	
	// Получим необходимые данные для проверки и проведения по табличной части "Товары".
	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("НомерРаздела"              , "НомерРаздела");
	СтруктураПолей.Вставить("Номенклатура"              , "Номенклатура");
	СтруктураПолей.Вставить("Количество"                , "Количество * Коэффициент");
	СтруктураПолей.Вставить("ФактурнаяСтоимость"        , "ФактурнаяСтоимость");
	СтруктураПолей.Вставить("НДС"                       , "СуммаНДС");
	СтруктураПолей.Вставить("Пошлина"                   , "СуммаПошлины");
	СтруктураПолей.Вставить("Акциз"                   	, "СуммаАкциза");
	СтруктураПолей.Вставить("Услуга"               		, "Номенклатура.Услуга");
	СтруктураПолей.Вставить("БланкСтрогогоУчета"		, "Номенклатура.БланкСтрогогоУчета");
	СтруктураПолей.Вставить("ДокументОприходования"		, "ДокументПартии");
	//СтруктураПолей.Вставить("Склад"						, "ДокументПартии.Склад");
	//СтруктураПолей.Вставить("ТипСклада"					, "ДокументПартии.Склад.ТипСклада");
	// ИНАГРО++
	СтруктураПолей.Вставить("Склад"                 	, "ИНАГРО_Склад");
	СтруктураПолей.Вставить("ТипСклада"                 , "ИНАГРО_Склад.ТипСклада");
	// ИНАГРО--
	СтруктураПолей.Вставить("ДокументПартииВидОперации" , "ДокументПартии.ВидОперации");
	СтруктураПолей.Вставить("ДокументПартииКонтрагент"  , "ДокументПартии.Контрагент");
	СтруктураПолей.Вставить("ДокументПартииДоговор"  	, "ДокументПартии.ДоговорКонтрагента");
	СтруктураПолей.Вставить("ДокументПартииВидДоговора"	, "ДокументПартии.ДоговорКонтрагента.ВидДоговора");
	
	СтруктураПолей.Вставить("СчетУчетаБУ"             	, "СчетУчетаБУ");
	СтруктураПолей.Вставить("Забалансовый"            	, "СчетУчетаБУ.Забалансовый");
	СтруктураПолей.Вставить("НалоговоеНазначение"     	, "НалоговоеНазначение");
	СтруктураПолей.Вставить("ВидДеятельностиНДС"     	, "НалоговоеНазначение.ВидДеятельностиНДС");
	СтруктураПолей.Вставить("СтатьяДекларацииНДСНалоговыйКредит"	, "СтатьяДекларацииНДСНалоговыйКредит");
    СтруктураПолей.Вставить("СчетУчетаНДС"             	, "СчетУчетаНДС");

	РезультатЗапросаПоТоварам = ОбщегоНазначенияРед12.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураПолей);

	// Получим необходимые данные для проверки и проведения по табличной части "Оборудование".
	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("НомерРаздела"              , "НомерРаздела");
	СтруктураПолей.Вставить("Номенклатура"              , "Номенклатура");
	СтруктураПолей.Вставить("Количество"                , "Количество * Коэффициент");
	СтруктураПолей.Вставить("ФактурнаяСтоимость"        , "ФактурнаяСтоимость");
	СтруктураПолей.Вставить("НДС"                       , "СуммаНДС");
	СтруктураПолей.Вставить("Пошлина"                   , "СуммаПошлины");
	СтруктураПолей.Вставить("Акциз"                   	, "СуммаАкциза");
	СтруктураПолей.Вставить("Услуга"               		, "Номенклатура.Услуга");
	СтруктураПолей.Вставить("БланкСтрогогоУчета"		, "Номенклатура.БланкСтрогогоУчета");
	СтруктураПолей.Вставить("ДокументОприходования"		, "ДокументПартии");
	СтруктураПолей.Вставить("Склад"						, "ДокументПартии.Склад");
	СтруктураПолей.Вставить("ТипСклада"					, "ДокументПартии.Склад.ТипСклада");
	СтруктураПолей.Вставить("ДокументПартииВидОперации" , "ДокументПартии.ВидОперации");
	СтруктураПолей.Вставить("ДокументПартииКонтрагент"  , "ДокументПартии.Контрагент");
	СтруктураПолей.Вставить("ДокументПартииДоговор"  	, "ДокументПартии.ДоговорКонтрагента");
	СтруктураПолей.Вставить("ДокументПартииВидДоговора"	, "ДокументПартии.ДоговорКонтрагента.ВидДоговора");
	СтруктураПолей.Вставить("СчетУчетаБУ"             	, "СчетУчетаБУ");
	СтруктураПолей.Вставить("Забалансовый"            	, "СчетУчетаБУ.Забалансовый");
	
	СтруктураПолей.Вставить("НалоговоеНазначение"     	, "НалоговоеНазначение");
	СтруктураПолей.Вставить("ВидДеятельностиНДС"     	, "НалоговоеНазначение.ВидДеятельностиНДС");
	
	СтруктураПолей.Вставить("СтатьяДекларацииНДСНалоговыйКредит"	, "СтатьяДекларацииНДСНалоговыйКредит");
    СтруктураПолей.Вставить("СчетУчетаНДС"             	, "СчетУчетаНДС");
	
	РезультатЗапросаПоОборудованию = ОбщегоНазначенияРед12.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Оборудование", СтруктураПолей);
	
	ОбработатьТабличнуюЧастьРазделы(СтруктураШапкиДокумента);
	
	ТаблицаПоТоварам = РезультатЗапросаПоТоварам.Выгрузить();
	ТаблицаПоОборудованию = РезультатЗапросаПоОборудованию.Выгрузить();
	
	РаспределитьСуммыИзШапки(ТаблицаПоТоварам,ТаблицаПоОборудованию,СтруктураШапкиДокумента);

	ПогрешностиОкругления     = Новый Соответствие;
	
	ПодготовитьТаблицуТоваров(ТаблицаПоТоварам, СтруктураШапкиДокумента, ПогрешностиОкругления);
	ПодготовитьТаблицуОборудование(ТаблицаПоОборудованию, СтруктураШапкиДокумента, ПогрешностиОкругления);

КонецПроцедуры

Процедура ОбработатьТабличнуюЧастьРазделы(СтруктураШапкиДокумента)

	// Для проведения по взаиморасчетам посчитаем долг таможне (в регламентированной валюте).
	СуммаВзаиморасчетов    = ТаможенныйСбор;
	Для каждого СтрокаТабличнойЧасти Из Разделы Цикл
	
		СуммаВзаиморасчетов = СуммаВзаиморасчетов + СтрокаТабличнойЧасти.СуммаПошлины;
		
		СуммаВзаиморасчетов = СуммаВзаиморасчетов + СтрокаТабличнойЧасти.СуммаАкциза;
		
		Если НЕ СтруктураШапкиДокумента.ОформленНалоговыйВексельПоНДС Тогда
			
			// если оформлен вексель, то сумма НДС не идет во взаиморасчеты
			СуммаВзаиморасчетов = СуммаВзаиморасчетов + СтрокаТабличнойЧасти.СуммаНДС;	
		
		КонецЕсли; 
		
		
	КонецЦикла;

	СтруктураШапкиДокумента.Вставить("СуммаВзаиморасчетов",    СуммаВзаиморасчетов);

КонецПроцедуры //ОбработатьТабличнуюЧастьРазделы()

Процедура РаспределитьСуммыИзШапки(ТаблицаПоТоварам,ТаблицаПоОборудованию,СтруктураШапкиДокумента)
	
	// Распределим таможенный сбор по товарам и оборудованию
	ТаблицаПоТоварам.Колонки.Добавить("ТаможенныйСбор", ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаПоТоварам.Колонки.Добавить("ТаможеннаяСтоимость", ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповЧисла(15,2));
	
	ТаблицаПоОборудованию.Колонки.Добавить("ТаможенныйСбор", ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаПоОборудованию.Колонки.Добавить("ТаможеннаяСтоимость", ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповЧисла(15,2));
	
	ОшибкаОкругленияТаможенныйСбор = 0;
	ВсегоСтоимостьПоГТД = ТаблицаПоТоварам.Итог("ФактурнаяСтоимость") + ТаблицаПоОборудованию.Итог("ФактурнаяСтоимость");
	
	Для каждого ТекРаздел Из Разделы Цикл
		
		СтрокиТоваровПоРазделу 		= ТаблицаПоТоварам.НайтиСтроки(Новый Структура("НомерРаздела", Разделы.Индекс(ТекРаздел) + 1)); 
		СтрокиОборудованияПоРазделу = ТаблицаПоОборудованию.НайтиСтроки(Новый Структура("НомерРаздела", Разделы.Индекс(ТекРаздел) + 1)); 
		
		ОшибкаОкругленияТаможеннаяСтоимость = 0;
		ТаможеннаяСтоимость = ТекРаздел.ТаможеннаяСтоимость;
		
		ВсегоСтоимостьПоРазделу = 0;
		
		Для каждого СтрокаРаздела Из СтрокиТоваровПоРазделу Цикл
			ВсегоСтоимостьПоРазделу = ВсегоСтоимостьПоРазделу + СтрокаРаздела.ФактурнаяСтоимость;
		КонецЦикла;
	
		Для каждого СтрокаРаздела Из СтрокиОборудованияПоРазделу Цикл
			ВсегоСтоимостьПоРазделу = ВсегоСтоимостьПоРазделу + СтрокаРаздела.ФактурнаяСтоимость;
		КонецЦикла;
		
		Если ВсегоСтоимостьПоРазделу = 0 Тогда
			// распределять нечего
			Продолжить;
		КонецЕсли;
		
		Для каждого СтрокаРаздела Из СтрокиТоваровПоРазделу Цикл
			// таможенный сбор распределяем пропорционально строкам всех разделов
			СтрокаРаздела.ТаможенныйСбор 	  = ОбщегоНазначенияРед12.ОкруглитьСУчетомПогрешности(ТаможенныйСбор      * (СтрокаРаздела.ФактурнаяСтоимость/ВсегоСтоимостьПоГТД), 2, ОшибкаОкругленияТаможенныйСбор);
			// таможенную стоимость распределяем только в рамках раздела, для которого она указана.
			СтрокаРаздела.ТаможеннаяСтоимость = ОбщегоНазначенияРед12.ОкруглитьСУчетомПогрешности(ТаможеннаяСтоимость * (СтрокаРаздела.ФактурнаяСтоимость/ВсегоСтоимостьПоРазделу), 2, ОшибкаОкругленияТаможеннаяСтоимость);
		КонецЦикла;
	
		Для каждого СтрокаРаздела Из СтрокиОборудованияПоРазделу Цикл
			// таможенный сбор распределяем пропорционально строкам всех разделов
			СтрокаРаздела.ТаможенныйСбор 	  = ОбщегоНазначенияРед12.ОкруглитьСУчетомПогрешности(ТаможенныйСбор      * (СтрокаРаздела.ФактурнаяСтоимость/ВсегоСтоимостьПоГТД), 2, ОшибкаОкругленияТаможенныйСбор);
			// таможенную стоимость распределяем только в рамках раздела, для которого она указана.
			СтрокаРаздела.ТаможеннаяСтоимость = ОбщегоНазначенияРед12.ОкруглитьСУчетомПогрешности(ТаможеннаяСтоимость * (СтрокаРаздела.ФактурнаяСтоимость/ВсегоСтоимостьПоРазделу), 2, ОшибкаОкругленияТаможеннаяСтоимость);
		КонецЦикла;
		
	КонецЦикла;
	
	
КонецПроцедуры

Процедура ПодготовитьТаблицуТоваров(ТаблицаТоваров, СтруктураШапкиДокумента, ПогрешностиОкругления)

	// Ставку НДС возьмём из разделов
	ТаблицаТоваров.Колонки.Добавить("СтавкаНДС");

	// Суммы в документе в валюте регл. учета
	ТаблицаТоваров.Колонки.Добавить("СуммаСНДСРегл"        	 		 , ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаТоваров.Колонки.Добавить("БазаНДС"        	 		 	 , ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаТоваров.Колонки.Добавить("ПроводкиСуммаБезНДС" 	 		 , ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаТоваров.Колонки.Добавить("ПроводкиСуммаНДСКредит"       	 , ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаТоваров.Колонки.Добавить("ПроводкиСуммаНДССебестоимость"  , ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаТоваров.Колонки.Добавить("ПроводкиСуммаСНДСРегл"  		 , ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаТоваров.Колонки.Добавить("СуммаНДСИсходный"			 	 , ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаТоваров.Колонки.Добавить("СуммаНДСУсловнойПродажи"		 , ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповЧисла(15,2));
	
	ТаблицаТоваров.Колонки.Добавить("ДляХозяйственнойДеятельности", Новый ОписаниеТипов("Булево"));
	// для товаров колонка Амортизируется = Ложь
	ТаблицаТоваров.Колонки.Добавить("Амортизируется", Новый ОписаниеТипов("Булево"));
	
	ВидДеятельностиНДСНеоблагаемый 		= Перечисления.ВидыДеятельностиНДС.Необлагаемая;
	ВидДеятельностиНДСПропорциональный 	= Перечисления.ВидыДеятельностиНДС.ПропорциональноОблагаемая;
	НалоговоеНазначениеНДС_НеоблагаемаяНеХозДеятельность = Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяНеХозДеятельность;
	
	Для каждого СтрокаТаблицы Из ТаблицаТоваров Цикл
		
		Если СтрокаТаблицы.НалоговоеНазначение = НалоговоеНазначениеНДС_НеоблагаемаяНеХозДеятельность Тогда
			СтрокаТаблицы.ДляХозяйственнойДеятельности = Ложь;
		Иначе
			СтрокаТаблицы.ДляХозяйственнойДеятельности = Истина;
		КонецЕсли;
		
		СтрокаТаблицы.СуммаСНДСРегл			= СтрокаТаблицы.Пошлина + СтрокаТаблицы.Акциз 
												+ СтрокаТаблицы.ТаможенныйСбор + СтрокаТаблицы.НДС;
		СтрокаТаблицы.БазаНДС				= СтрокаТаблицы.Пошлина + СтрокаТаблицы.Акциз 
												+ СтрокаТаблицы.ТаможеннаяСтоимость;
		
		СтрокаТаблицы.ПроводкиСуммаСНДСРегл 	= СтрокаТаблицы.СуммаСНДСРегл;
		// подкорректируем ПроводкиСуммаСНДСРегл - для зачета аванса. При оформлении налогового векселя - нет задолженности по НДС перед таможней
		Если СтруктураШапкиДокумента.ОформленНалоговыйВексельПоНДС Тогда
			СтрокаТаблицы.ПроводкиСуммаСНДСРегл = СтрокаТаблицы.ПроводкиСуммаСНДСРегл - СтрокаТаблицы.НДС;
		КонецЕсли;
		
		// Определим значение НДС в проводках
		// Ставку НДС получим из разделов
		СтрокаТаблицы.СтавкаНДС = Разделы[СтрокаТаблицы.НомерРаздела-1].СтавкаНДС;
		 
		Если СтрокаТаблицы.ВидДеятельностиНДС = ВидДеятельностиНДСНеоблагаемый Тогда
			
			// нет налогового кредита
			СтрокаТаблицы.ПроводкиСуммаНДСКредит = 0;
			СтрокаТаблицы.СуммаНДСУсловнойПродажи = СтрокаТаблицы.НДС;
			
		ИначеЕсли СтрокаТаблицы.ВидДеятельностиНДС = ВидДеятельностиНДСПропорциональный Тогда
			Если СтруктураШапкиДокумента.СуммаНДСПропорциональноВсего = 0 Тогда
				
				СтрокаТаблицы.ПроводкиСуммаНДСКредит = 0;
				СтрокаТаблицы.СуммаНДСУсловнойПродажи = СтрокаТаблицы.НДС;
			
			Иначе	
				
				СтрокаТаблицы.ПроводкиСуммаНДСКредит = ОбщегоНазначенияРед12.ОкруглитьСУчетомПогрешности(СтрокаТаблицы.НДС * (СтруктураШапкиДокумента.СуммаНДСПропорциональноКредит / СтруктураШапкиДокумента.СуммаНДСПропорциональноВсего), 2, , ПогрешностиОкругления, "СуммаНДСПропорциональноВал");
				СтрокаТаблицы.СуммаНДСУсловнойПродажи = СтрокаТаблицы.НДС - СтрокаТаблицы.ПроводкиСуммаНДСКредит;
				
			КонецЕсли;
		Иначе
			СтрокаТаблицы.ПроводкиСуммаНДСКредит = СтрокаТаблицы.НДС;
		КонецЕсли;
				
		
		СтрокаТаблицы.ПроводкиСуммаНДССебестоимость = СтрокаТаблицы.НДС - СтрокаТаблицы.ПроводкиСуммаНДСКредит;
		
		СтрокаТаблицы.ПроводкиСуммаБезНДС 		    = СтрокаТаблицы.СуммаСНДСРегл - СтрокаТаблицы.ПроводкиСуммаНДСКредит;
		
	КонецЦикла;

КонецПроцедуры // ПодготовитьТаблицуТоваровРегл()	

Процедура ПодготовитьТаблицуОборудование(ТаблицаТоваров, СтруктураШапкиДокумента, ПогрешностиОкругления)

	// Ставку НДС возьмём из разделов
	ТаблицаТоваров.Колонки.Добавить("СтавкаНДС");

	// Суммы в документе в валюте регл. учета
	ТаблицаТоваров.Колонки.Добавить("СуммаСНДСРегл"        	 		 , ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаТоваров.Колонки.Добавить("БазаНДС"        	 		 	 , ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаТоваров.Колонки.Добавить("ПроводкиСуммаБезНДС" 	 		 , ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаТоваров.Колонки.Добавить("ПроводкиСуммаНДСКредит"       	 , ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаТоваров.Колонки.Добавить("ПроводкиСуммаНДССебестоимость"  , ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаТоваров.Колонки.Добавить("ПроводкиСуммаСНДСРегл"			 , ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаТоваров.Колонки.Добавить("СуммаНДСУсловнойПродажи"		 , ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповЧисла(15,2));

	ТаблицаТоваров.Колонки.Добавить("ДляХозяйственнойДеятельности");	
	
	// для оборудования колонка Амортизируется = Истина
	ТаблицаТоваров.Колонки.Добавить("Амортизируется", Новый ОписаниеТипов("Булево"));
	
	ВидДеятельностиНДСНеоблагаемый 		= Перечисления.ВидыДеятельностиНДС.Необлагаемая;
	ВидДеятельностиНДСПропорциональный 	= Перечисления.ВидыДеятельностиНДС.ПропорциональноОблагаемая;
	НалоговоеНазначениеНДС_НеоблагаемаяНеХозДеятельность = Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяНеХозДеятельность;

	Для каждого СтрокаТаблицы Из ТаблицаТоваров Цикл
		
		СтрокаТаблицы.Амортизируется = Истина;
		Если СтрокаТаблицы.НалоговоеНазначение = НалоговоеНазначениеНДС_НеоблагаемаяНеХозДеятельность Тогда
			СтрокаТаблицы.ДляХозяйственнойДеятельности = Ложь;
		Иначе
			СтрокаТаблицы.ДляХозяйственнойДеятельности = Истина;
		КонецЕсли;

		СтрокаТаблицы.СуммаСНДСРегл			= СтрокаТаблицы.Пошлина + СтрокаТаблицы.Акциз 
												+ СтрокаТаблицы.ТаможенныйСбор + СтрокаТаблицы.НДС;
		СтрокаТаблицы.БазаНДС				= СтрокаТаблицы.Пошлина + СтрокаТаблицы.Акциз 
												+ СтрокаТаблицы.ТаможеннаяСтоимость;
		
		СтрокаТаблицы.ПроводкиСуммаСНДСРегл 	= СтрокаТаблицы.СуммаСНДСРегл;
		// подкорректируем ПроводкиСуммаСНДСРегл - для зачета аванса. При оформлении налогового векселя - нет задолженности по НДС перед таможней
		Если СтруктураШапкиДокумента.ОформленНалоговыйВексельПоНДС Тогда
			СтрокаТаблицы.ПроводкиСуммаСНДСРегл = СтрокаТаблицы.ПроводкиСуммаСНДСРегл - СтрокаТаблицы.НДС;
		КонецЕсли;
		
		// Определим значение НДС в проводках
		// Ставку НДС получим из разделов
		СтрокаТаблицы.СтавкаНДС = Разделы[СтрокаТаблицы.НомерРаздела-1].СтавкаНДС;
		 
		Если СтрокаТаблицы.ВидДеятельностиНДС = ВидДеятельностиНДСНеоблагаемый Тогда
			
			// нет налогового кредита
			СтрокаТаблицы.ПроводкиСуммаНДСКредит = 0;
			СтрокаТаблицы.СуммаНДСУсловнойПродажи = СтрокаТаблицы.НДС;
			
		ИначеЕсли СтрокаТаблицы.ВидДеятельностиНДС = ВидДеятельностиНДСПропорциональный Тогда
			Если СтруктураШапкиДокумента.СуммаНДСПропорциональноВсего = 0 Тогда
				
				СтрокаТаблицы.ПроводкиСуммаНДСКредит = 0;
				СтрокаТаблицы.СуммаНДСУсловнойПродажи = СтрокаТаблицы.НДС;
				
			Иначе	
				
				СтрокаТаблицы.ПроводкиСуммаНДСКредит = ОбщегоНазначенияРед12.ОкруглитьСУчетомПогрешности(СтрокаТаблицы.НДС * (СтруктураШапкиДокумента.СуммаНДСПропорциональноКредит / СтруктураШапкиДокумента.СуммаНДСПропорциональноВсего), 2, , ПогрешностиОкругления, "СуммаНДСПропорциональноВал");
				СтрокаТаблицы.СуммаНДСУсловнойПродажи = СтрокаТаблицы.НДС - СтрокаТаблицы.ПроводкиСуммаНДСКредит;
				
			КонецЕсли;
		Иначе
			СтрокаТаблицы.ПроводкиСуммаНДСКредит = СтрокаТаблицы.НДС;
		КонецЕсли;
		СтрокаТаблицы.ПроводкиСуммаНДССебестоимость = СтрокаТаблицы.НДС - СтрокаТаблицы.ПроводкиСуммаНДСКредит;
		
		СтрокаТаблицы.ПроводкиСуммаБезНДС 	= СтрокаТаблицы.СуммаСНДСРегл - СтрокаТаблицы.ПроводкиСуммаНДСКредит;
		
	КонецЦикла;

КонецПроцедуры // ПодготовитьТаблицуОборудованиеРегл()	

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ПРОВЕДЕНИЯ - ФОРМИРОВАНИЕ ДВИЖЕНИЙ

// Формируем движения по регистрам.
//
// Параметры: 
//  СтруктураШапкиДокумента   - структура, содержащая рексвизиты шапки документа и результаты запроса по шапке
//  ТаблицаПоТоварам          - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  Отказ                     - флаг отказа в проведении
//
Процедура ДвиженияПоРегистрам(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоОборудованию, Отказ,Заголовок)
 
	ДатаДок    = Дата;
	ПроводкиБУ = Движения.Хозрасчетный;
	
	// Зачтем аванс
	ТаблицыДокумента = Новый Структура();
    ТаблицыДокумента.Вставить("ТаблицаПоТоварам",ТаблицаПоТоварам);
    ТаблицыДокумента.Вставить("ТаблицаПоОборудованию",ТаблицаПоОборудованию);
    ТаблицаАвансов = БухгалтерскийУчетРасчетовСКонтрагентами.ЗачетАванса(ЭтотОбъект, СтруктураШапкиДокумента , мВалютаРегламентированногоУчета, ТаблицыДокумента , Отказ, Заголовок, "АВ");

	ПоставщикКомитент = (СтруктураШапкиДокумента.ДоговорПоставщикаТоваров.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом);
	
	// Проводки по товарам и оборудованию
	МассивСтрок = Новый Массив;
	// занесём все строки в один массив, чтобы работать с ними единообразно
	Для каждого СтрокаТаблицы Из ТаблицаПоТоварам Цикл
		МассивСтрок.Добавить(СтрокаТаблицы);
	КонецЦикла;
	Для каждого СтрокаТаблицы Из ТаблицаПоОборудованию Цикл
		МассивСтрок.Добавить(СтрокаТаблицы);
	КонецЦикла;
	
	Для каждого СтрокаТаблицы Из МассивСтрок Цикл
		
		// Бухгалтерский учет
		// Пошлина
		Если НЕ СтрокаТаблицы.Пошлина = 0 Тогда
		
			Проводка = ПроводкиБУ.Добавить();

			Проводка.Период                     = ДатаДок;
			Проводка.Активность                 = Истина;
			Проводка.Организация                = СтруктураШапкиДокумента.Организация;
			Проводка.Сумма                      = СтрокаТаблицы.Пошлина;
			Проводка.Содержание                 = НСтр("ru='Таможенная пошлина';uk='Мито'",Локализация.КодЯзыкаИнформационнойБазы());
			Проводка.НомерЖурнала               = "";

			Если НЕ ПоставщикКомитент Тогда
				
				Проводка.СчетДт                     = СтрокаТаблицы.СчетУчетаБУ;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Номенклатура", СтрокаТаблицы.Номенклатура);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Склады",       СтрокаТаблицы.Склад);
				Если ПартионныйУчетБУ Тогда 
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Партии", СтрокаТаблицы.ДокументОприходования);
				КонецЕсли;
				Проводка.КоличествоДт               = 0;
				
				Проводка.НалоговоеНазначениеДт		= СтрокаТаблицы.НалоговоеНазначение;
				Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыльДо2015 И 
					СтруктураШапкиДокумента.НеОтноситьНаЗатратыПоНУ = Ложь И 
					СтрокаТаблицы.НалоговоеНазначение <> Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяНеХозДеятельность Тогда
					
					Проводка.СуммаНУДт = Проводка.Сумма;
					
				КонецЕсли;

			Иначе	
				
				// ГТД от комитента - все на затраты
				Проводка.СчетДт                     = СтруктураШапкиДокумента.СчетЗатрат;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1 , СтруктураШапкиДокумента.ЗатратСубконто1);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2 , СтруктураШапкиДокумента.ЗатратСубконто2);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3 , СтруктураШапкиДокумента.ЗатратСубконто3);
				
				Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыльДо2015 Тогда
					Проводка.НалоговоеНазначениеДт		= СтруктураШапкиДокумента.НалоговоеНазначениеДоходовИЗатрат;
				    Если СтруктураШапкиДокумента.НеОтноситьНаЗатратыПоНУ = Ложь И 
							СтруктураШапкиДокумента.НалоговоеНазначениеДоходовИЗатрат <> Справочники.НалоговыеНазначенияАктивовИЗатрат.НКУ_НеХозДеятельность Тогда
					
						Проводка.СуммаНУДт = Проводка.Сумма;
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли; 

			Проводка.СчетКт                     = СтруктураШапкиДокумента.СчетУчетаПошлины;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1 , СтруктураШапкиДокумента.ПошлинаСубконто1);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2 , СтруктураШапкиДокумента.ПошлинаСубконто2);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3 , СтруктураШапкиДокумента.ПошлинаСубконто3);
		
		КонецЕсли; 
		
		// Акциз
		Если НЕ СтрокаТаблицы.Акциз = 0 Тогда
			
			Проводка = ПроводкиБУ.Добавить();

			Проводка.Период                     = ДатаДок;
			Проводка.Активность                 = Истина;
			Проводка.Организация                = СтруктураШапкиДокумента.Организация;
			Проводка.Сумма                      = СтрокаТаблицы.Акциз;
			Проводка.Содержание                 = НСтр("ru='Акциз';uk='Акциз'",Локализация.КодЯзыкаИнформационнойБазы());
			Проводка.НомерЖурнала               = "";
			
			Если НЕ ПоставщикКомитент Тогда
				
				Проводка.СчетДт                     = СтрокаТаблицы.СчетУчетаБУ;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Номенклатура", СтрокаТаблицы.Номенклатура);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Склады",       СтрокаТаблицы.Склад);
				Если ПартионныйУчетБУ Тогда 
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Партии", СтрокаТаблицы.ДокументОприходования);
				КонецЕсли;
				Проводка.КоличествоДт               = 0;

				Проводка.НалоговоеНазначениеДт		= СтрокаТаблицы.НалоговоеНазначение;
				Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыльДо2015 И 
					СтруктураШапкиДокумента.НеОтноситьНаЗатратыПоНУ = Ложь И 
					СтрокаТаблицы.НалоговоеНазначение <> Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяНеХозДеятельность Тогда
					
					Проводка.СуммаНУДт = Проводка.Сумма;
					
				КонецЕсли;
				
			Иначе	
				
				// ГТД от комитента - все на затраты
				Проводка.СчетДт                     = СтруктураШапкиДокумента.СчетЗатрат;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1 , СтруктураШапкиДокумента.ЗатратСубконто1);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2 , СтруктураШапкиДокумента.ЗатратСубконто2);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3 , СтруктураШапкиДокумента.ЗатратСубконто3);
			
				Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыльДо2015 Тогда
					Проводка.НалоговоеНазначениеДт		= СтруктураШапкиДокумента.НалоговоеНазначениеДоходовИЗатрат;
				    Если СтруктураШапкиДокумента.НеОтноситьНаЗатратыПоНУ = Ложь И 
							СтруктураШапкиДокумента.НалоговоеНазначениеДоходовИЗатрат <> Справочники.НалоговыеНазначенияАктивовИЗатрат.НКУ_НеХозДеятельность Тогда
					
						Проводка.СуммаНУДт = Проводка.Сумма;
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли; 

			Проводка.СчетКт                     = СтруктураШапкиДокумента.СчетУчетаАкциза;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1 , СтруктураШапкиДокумента.АкцизСубконто1);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2 , СтруктураШапкиДокумента.АкцизСубконто2);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3 , СтруктураШапкиДокумента.АкцизСубконто3);
			
		КонецЕсли; 
				
		// Таможенный сбор
		Если НЕ СтрокаТаблицы.ТаможенныйСбор = 0 Тогда
			
			Проводка = ПроводкиБУ.Добавить();

			Проводка.Период                     = ДатаДок;
			Проводка.Активность                 = Истина;
			Проводка.Организация                = СтруктураШапкиДокумента.Организация;
			Проводка.Сумма                      = СтрокаТаблицы.ТаможенныйСбор;
			Проводка.Содержание                 = НСтр("ru='Таможенный сбор';uk='Митний збір'",Локализация.КодЯзыкаИнформационнойБазы());
			Проводка.НомерЖурнала               = "";

			Если НЕ ПоставщикКомитент Тогда

				Проводка.СчетДт                     = СтрокаТаблицы.СчетУчетаБУ;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Номенклатура", СтрокаТаблицы.Номенклатура);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Склады",       СтрокаТаблицы.Склад);
				Если ПартионныйУчетБУ Тогда 
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Партии", СтрокаТаблицы.ДокументОприходования);
				КонецЕсли;
				Проводка.КоличествоДт               = 0;

				Проводка.НалоговоеНазначениеДт		= СтрокаТаблицы.НалоговоеНазначение;
				Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыльДо2015 И 
					СтруктураШапкиДокумента.НеОтноситьНаЗатратыПоНУ = Ложь И 
					СтрокаТаблицы.НалоговоеНазначение <> Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяНеХозДеятельность Тогда
					
					Проводка.СуммаНУДт = Проводка.Сумма;
					
				КонецЕсли;
				
			Иначе	
				
				// ГТД от комитента - все на затраты
				Проводка.СчетДт                     = СтруктураШапкиДокумента.СчетЗатрат;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1 , СтруктураШапкиДокумента.ЗатратСубконто1);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2 , СтруктураШапкиДокумента.ЗатратСубконто2);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3 , СтруктураШапкиДокумента.ЗатратСубконто3);
				
				Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыльДо2015 Тогда
					Проводка.НалоговоеНазначениеДт		= СтруктураШапкиДокумента.НалоговоеНазначениеДоходовИЗатрат;
				    Если СтруктураШапкиДокумента.НеОтноситьНаЗатратыПоНУ = Ложь И 
							СтруктураШапкиДокумента.НалоговоеНазначениеДоходовИЗатрат <> Справочники.НалоговыеНазначенияАктивовИЗатрат.НКУ_НеХозДеятельность Тогда
					
						Проводка.СуммаНУДт = Проводка.Сумма;
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли; 
			
			Проводка.СчетКт                     = СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Контрагенты", СтруктураШапкиДокумента.Контрагент);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Договоры",    СтруктураШапкиДокумента.ДоговорКонтрагента);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ДокументыРасчетовСКонтрагентами", УправлениеВзаиморасчетами.ОпределитьДокументРасчетовСКонтрагентом(Ссылка));
	
		КонецЕсли; 
		
		// НДС (если он идет на себестоимость)
		Если НЕ СтрокаТаблицы.ПроводкиСуммаНДССебестоимость = 0 Тогда
			
			Проводка = ПроводкиБУ.Добавить();

			Проводка.Период                     = ДатаДок;
			Проводка.Активность                 = Истина;
			Проводка.Организация                = СтруктураШапкиДокумента.Организация;
			Проводка.Сумма                      = СтрокаТаблицы.ПроводкиСуммаНДССебестоимость;
			Если НЕ ПоставщикКомитент Тогда
				Проводка.Содержание                 = НСтр("ru='НДС: на себестоимость запасов';uk='ПДВ: на собівартість запасів'",Локализация.КодЯзыкаИнформационнойБазы());
			Иначе
				Проводка.Содержание                 = НСтр("ru='НДС: на затраты';uk='ПДВ: на витрати'",Локализация.КодЯзыкаИнформационнойБазы());
			КонецЕсли;
			Проводка.НомерЖурнала               = "";
			
			Если НЕ ПоставщикКомитент Тогда

				Проводка.СчетДт                     = СтрокаТаблицы.СчетУчетаБУ;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Номенклатура", СтрокаТаблицы.Номенклатура);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Склады",       СтрокаТаблицы.Склад);
				Если ПартионныйУчетБУ Тогда 
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Партии", СтрокаТаблицы.ДокументОприходования);
				КонецЕсли;
				Проводка.КоличествоДт               = 0;
				
				Проводка.НалоговоеНазначениеДт		= СтрокаТаблицы.НалоговоеНазначение;
				Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыльДо2015 И 
					СтруктураШапкиДокумента.НеОтноситьНаЗатратыПоНУ = Ложь И 
					СтрокаТаблицы.НалоговоеНазначение <> Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяНеХозДеятельность Тогда
					
					Проводка.СуммаНУДт = Проводка.Сумма;
					
				КонецЕсли;

			Иначе	
				
				// ГТД от комитента - все на затраты
				Проводка.СчетДт                     = СтруктураШапкиДокумента.СчетЗатрат;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1 , СтруктураШапкиДокумента.ЗатратСубконто1);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2 , СтруктураШапкиДокумента.ЗатратСубконто2);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3 , СтруктураШапкиДокумента.ЗатратСубконто3);
			
				Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыльДо2015 Тогда
					Проводка.НалоговоеНазначениеДт		= СтруктураШапкиДокумента.НалоговоеНазначениеДоходовИЗатрат;
				    Если СтруктураШапкиДокумента.НеОтноситьНаЗатратыПоНУ = Ложь И 
							СтруктураШапкиДокумента.НалоговоеНазначениеДоходовИЗатрат <> Справочники.НалоговыеНазначенияАктивовИЗатрат.НКУ_НеХозДеятельность Тогда
					
						Проводка.СуммаНУДт = Проводка.Сумма;
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли; 
			
			Если СтруктураШапкиДокумента.ОформленНалоговыйВексельПоНДС Тогда
				
				Проводка.СчетКт                     = СтруктураШапкиДокумента.СчетУчетаВексель;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1 , СтруктураШапкиДокумента.ВексельСубконто1);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2 , СтруктураШапкиДокумента.ВексельСубконто2);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3 , СтруктураШапкиДокумента.ВексельСубконто3);
				
			Иначе
				
				Проводка.СчетКт                     = СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Контрагенты", СтруктураШапкиДокумента.Контрагент);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Договоры",    СтруктураШапкиДокумента.ДоговорКонтрагента);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт,"ДокументыРасчетовСКонтрагентами", УправлениеВзаиморасчетами.ОпределитьДокументРасчетовСКонтрагентом(Ссылка));
			
			КонецЕсли; 
				
		КонецЕсли; 
		
	КонецЦикла; // Проводки по товарам и оборудованию
	
	// Взаиморасчетам с таможней по пошлине
	ВсегоПошлина = ТаблицаПоТоварам.Итог("Пошлина")+ТаблицаПоОборудованию.Итог("Пошлина");
	Если НЕ ВсегоПошлина = 0 Тогда
	
		Проводка = ПроводкиБУ.Добавить();

		Проводка.Период                     = ДатаДок;
		Проводка.Активность                 = Истина;
		Проводка.Организация                = СтруктураШапкиДокумента.Организация;
		Проводка.Сумма                      = ВсегоПошлина;
		Проводка.Содержание                 = НСтр("ru='Таможенная пошлина';uk='Мито'",Локализация.КодЯзыкаИнформационнойБазы());
		Проводка.НомерЖурнала               = "";

		Проводка.СчетДт                     = СтруктураШапкиДокумента.СчетУчетаПошлины;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1 , СтруктураШапкиДокумента.ПошлинаСубконто1);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2 , СтруктураШапкиДокумента.ПошлинаСубконто2);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3 , СтруктураШапкиДокумента.ПошлинаСубконто3);
		
		Проводка.СчетКт                     = СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Контрагенты", СтруктураШапкиДокумента.Контрагент);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Договоры",    СтруктураШапкиДокумента.ДоговорКонтрагента);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт,  "ДокументыРасчетовСКонтрагентами", УправлениеВзаиморасчетами.ОпределитьДокументРасчетовСКонтрагентом(Ссылка));
		
	КонецЕсли;
	
	// Взаиморасчетам с таможней по акцизу
	ВсегоАкциз = ТаблицаПоТоварам.Итог("Акциз") + ТаблицаПоОборудованию.Итог("Акциз");
	Если НЕ ВсегоАкциз = 0 Тогда
		
		Проводка = ПроводкиБУ.Добавить();

		Проводка.Период                     = ДатаДок;
		Проводка.Активность                 = Истина;
		Проводка.Организация                = СтруктураШапкиДокумента.Организация;
		Проводка.Сумма                      = ВсегоАкциз;
		Проводка.Содержание                 = НСтр("ru='Акциз';uk='Акциз'",Локализация.КодЯзыкаИнформационнойБазы());
		Проводка.НомерЖурнала               = "";
		
		Проводка.СчетДт                     = СтруктураШапкиДокумента.СчетУчетаАкциза;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1 , СтруктураШапкиДокумента.АкцизСубконто1);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2 , СтруктураШапкиДокумента.АкцизСубконто2);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3 , СтруктураШапкиДокумента.АкцизСубконто3);
		
		Проводка.СчетКт                     = СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Контрагенты", СтруктураШапкиДокумента.Контрагент);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Договоры",    СтруктураШапкиДокумента.ДоговорКонтрагента);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт,  "ДокументыРасчетовСКонтрагентами", УправлениеВзаиморасчетами.ОпределитьДокументРасчетовСКонтрагентом(Ссылка));
		
	КонецЕсли;
	
	// налоговый кредит по НДС
	ВсегоНДСКредит = ТаблицаПоТоварам.Итог("ПроводкиСуммаНДСКредит") + ТаблицаПоОборудованию.Итог("ПроводкиСуммаНДСКредит");
	
	Если НЕ ВсегоНДСКредит = 0 Тогда

		Если СтруктураШапкиДокумента.ОформленНалоговыйВексельПоНДС Тогда
			
			ТаблицаКопия = ТаблицаПоТоварам.Скопировать();
			ТаблицаКопия.Свернуть("СчетУчетаНДС", "ПроводкиСуммаНДСКредит");
			
			ТаблицаКопияОборудование = ТаблицаПоОборудованию.Скопировать();
			ТаблицаКопияОборудование.Свернуть("СчетУчетаНДС", "ПроводкиСуммаНДСКредит");
			
			ОбщегоНазначенияБПВызовСервера.ЗагрузитьВТаблицуЗначений(ТаблицаКопияОборудование,ТаблицаКопия);
			ТаблицаКопия.Свернуть("СчетУчетаНДС", "ПроводкиСуммаНДСКредит");
			
			Для каждого Строка Из ТаблицаКопия Цикл
			
				Проводка = ПроводкиБУ.Добавить();

				Проводка.Период                     = ДатаДок;
				Проводка.Активность                 = Истина;
				Проводка.Организация                = СтруктураШапкиДокумента.Организация;
				Проводка.Сумма                      = Строка.ПроводкиСуммаНДСКредит;
				Проводка.Содержание                 = НСтр("ru='НДС: оформлен вексель';uk='ПДВ: оформлений вексель'",Локализация.КодЯзыкаИнформационнойБазы());
				Проводка.НомерЖурнала               = "";

				Проводка.СчетДт                     = Строка.СчетУчетаНДС;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты", СтруктураШапкиДокумента.ПоставщикТоваров);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Договоры"   , СтруктураШапкиДокумента.ДоговорПоставщикаТоваров);
					
				Проводка.СчетКт                     = СтруктураШапкиДокумента.СчетУчетаВексель;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1 , СтруктураШапкиДокумента.ВексельСубконто1);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2 , СтруктураШапкиДокумента.ВексельСубконто2);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3 , СтруктураШапкиДокумента.ВексельСубконто3);
			
			КонецЦикла; 
			
		Иначе
			
			Проводка = ПроводкиБУ.Добавить();

			Проводка.Период                     = ДатаДок;
			Проводка.Активность                 = Истина;
			Проводка.Организация                = СтруктураШапкиДокумента.Организация;
			Проводка.Сумма                      = ВсегоНДСКредит;
			Проводка.Содержание                 = НСтр("ru='НДС: налоговый кредит';uk='ПДВ: податковий кредит'",Локализация.КодЯзыкаИнформационнойБазы());
			Проводка.НомерЖурнала               = "";

			Проводка.СчетДт                     = СтруктураШапкиДокумента.СчетУчетаНДС;
			Если НЕ ПоставщикКомитент Тогда
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1 , СтруктураШапкиДокумента.НДССубконто1);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2 , СтруктураШапкиДокумента.НДССубконто2);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3 , СтруктураШапкиДокумента.НДССубконто3);
			Иначе
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты", СтруктураШапкиДокумента.ПоставщикТоваров);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Договоры",    СтруктураШапкиДокумента.ДоговорПоставщикаТоваров);
			КонецЕсли;
				
			Проводка.СчетКт                     = СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Контрагенты", СтруктураШапкиДокумента.Контрагент);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Договоры",    СтруктураШапкиДокумента.ДоговорКонтрагента);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,  "ДокументыРасчетовСКонтрагентами", УправлениеВзаиморасчетами.ОпределитьДокументРасчетовСКонтрагентом(Ссылка));
		КонецЕсли; 
		
	КонецЕсли;
	
	// налоговый кредит по НДС для товаров, не относящихся к обл. деятельности после 07.2015
	СуммаНДСУсловнойПродажи = ТаблицаПоТоварам.Итог("СуммаНДСУсловнойПродажи") + ТаблицаПоОборудованию.Итог("СуммаНДСУсловнойПродажи");
	
	Если СтруктураШапкиДокумента.ЕстьНДС 
		  И НЕ СуммаНДСУсловнойПродажи = 0
		  И Дата >='2015-07-01' Тогда
 			
		Проводка = ПроводкиБУ.Добавить();

		Проводка.Период                     = ДатаДок;
		Проводка.Активность                 = Истина;
		Проводка.Организация                = СтруктураШапкиДокумента.Организация;
		Проводка.Сумма                      = СуммаНДСУсловнойПродажи;
		Проводка.Содержание                 = НСтр("ru='Налоговый кредит по операциям не обл. НДС после 07.2015';uk='Податковий кредит за операціями не опод. ПДВ після 07.2015'", Локализация.КодЯзыкаИнформационнойБазы());
		Проводка.НомерЖурнала               = "";

		Проводка.СчетДт                     = СтруктураШапкиДокумента.СчетУчетаНДС;
		Если НЕ ПоставщикКомитент Тогда
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1 , СтруктураШапкиДокумента.НДССубконто1);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2 , СтруктураШапкиДокумента.НДССубконто2);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3 , СтруктураШапкиДокумента.НДССубконто3);
		Иначе
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты", СтруктураШапкиДокумента.ПоставщикТоваров);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Договоры",    СтруктураШапкиДокумента.ДоговорПоставщикаТоваров);
		КонецЕсли;
			
		Проводка.СчетКт                     = СтруктураШапкиДокумента.СчетНДСУсловнаяПродажа;
		
		// ожидаемый и подтвержденный НДС на условную продажу того кредита, который был показан по товарам, не относящимся к облагаемой деятельности по НДС
		Если СтруктураШапкиДокумента.ЕстьНДС Тогда
		
			НаборДвижений = Движения.ОжидаемыйИПодтвержденныйНДСПродаж;
			
			// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
			ТаблицаДвижений = НаборДвижений.ВыгрузитьКолонки();
			
			// ТОВАРЫ
			ТаблицаКопия = ТаблицаПоТоварам.Скопировать();                                                                                          
			Сч = 0;
			Пока Сч < ТаблицаКопия.Количество() Цикл
			
				СтрокаТоваров = ТаблицаКопия[Сч];	
				Если СтрокаТоваров.СуммаНДСУсловнойПродажи = 0 Тогда
					ТаблицаКопия.Удалить(СтрокаТоваров);                      
				Иначе
					Сч = Сч + 1;
				КонецЕсли;	
			
			КонецЦикла;
			
			ТаблицаКопия.Свернуть("СтавкаНДС", "БазаНДС, СуммаНДСУсловнойПродажи");
			ТаблицаКопия.Колонки.СуммаНДСУсловнойПродажи.Имя = "СуммаНДС";
			
			ОбщегоНазначенияБПВызовСервера.ЗагрузитьВТаблицуЗначений(ТаблицаКопия, ТаблицаДвижений);
			
			// Оборудование
			ТаблицаКопия = ТаблицаПоОборудованию.Скопировать();                                                                                          
			Сч = 0;
			Пока Сч < ТаблицаКопия.Количество() Цикл
			
				СтрокаТоваров = ТаблицаКопия[Сч];	
				Если СтрокаТоваров.СуммаНДСУсловнойПродажи = 0 Тогда
					ТаблицаКопия.Удалить(СтрокаТоваров);                      
				Иначе
					Сч = Сч + 1;
				КонецЕсли;	
			
			КонецЦикла;
			
			ТаблицаКопия.Свернуть("СтавкаНДС", "БазаНДС, СуммаНДСУсловнойПродажи");
			ТаблицаКопия.Колонки.СуммаНДСУсловнойПродажи.Имя = "СуммаНДС";
			
			ОбщегоНазначенияБПВызовСервера.ЗагрузитьВТаблицуЗначений(ТаблицаКопия, ТаблицаДвижений);
			
			ТаблицаДвижений.ЗаполнитьЗначения(Организация       , "Организация");
			
			ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СобытияОжидаемыйИПодтвержденныйНДСПродаж.УсловнаяПродажа,    "СобытиеНДС");
			ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.КодыОперацийОжидаемыйИПодтвержденныйНДСПродаж.ОжидаемыйНДС,  "КодОперации");
				
			Если НЕ Отказ И ТаблицаДвижений.Количество() > 0 Тогда
				
				НаборДвижений.мПериод          = Дата;
				НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;
				
				Движения.ОжидаемыйИПодтвержденныйНДСПродаж.ВыполнитьПриход();
			
			КонецЕсли;
		
		КонецЕсли;
		
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.ЕстьНДС Тогда
		
		// поскольку ГТД является налоговым документом, то пишем сразу в книгу приобретений (НДСНалоговыйКредит)
		
		// Движения по регистру "Книга приобретений"
		НаборДвижений = Движения.НДСНалоговыйКредит;
		
		// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
		ТаблицаДвижений = НаборДвижений.ВыгрузитьКолонки();
		
		ТаблицаКопия = ТаблицаПоТоварам.Скопировать();
		
		ИсходноеКоличествоСтрок = ТаблицаКопия.Количество();
		Для НомСтроки = 1 По ИсходноеКоличествоСтрок Цикл
			ТекСтрока = ТаблицаКопия[НомСтроки-1];
			Если НЕ ТекСтрока.ВидДеятельностиНДС = Перечисления.ВидыДеятельностиНДС.ПропорциональноОблагаемая Тогда
				Продолжить;
			КонецЕсли;
			
			// добавим строку по пропорц. НДС, относящемуся на кредит, текущая строка останется такой, что не относится на кредит
			ДобавленнаяСтрока = ТаблицаКопия.Добавить();
			ЗаполнитьЗначенияСвойств(ДобавленнаяСтрока, ТекСтрока);
			
			ПроводкиСуммаНДСКредит = ТекСтрока.ПроводкиСуммаНДСКредит;
			Если Дата >= '2015-07-01' Тогда
				ПроводкиСуммаНДСКредит = ТекСтрока.НДС - ТекСтрока.СуммаНДСУсловнойПродажи;	
			КонецЕсли;
			//ДобавленнаяСтрока.БазаНДС = ?(ТекСтрока.НДС = 0, 0, ТекСтрока.БазаНДС * (ТекСтрока.ПроводкиСуммаНДСКредит / ТекСтрока.НДС));
			//ДобавленнаяСтрока.НДС     = ТекСтрока.ПроводкиСуммаНДСКредит;
			ДобавленнаяСтрока.БазаНДС = ?(ТекСтрока.НДС = 0, 0, ТекСтрока.БазаНДС * (ПроводкиСуммаНДСКредит / ТекСтрока.НДС));			
			ДобавленнаяСтрока.НДС     = ПроводкиСуммаНДСКредит;
			
			ДобавленнаяСтрока.СтатьяДекларацииНДСНалоговыйКредит = Справочники.СтатьиНалоговыхДеклараций.НДС_НКПропорциональноВклВКредит;
			
			ТекСтрока.НДС     = ТекСтрока.НДС 	  - ДобавленнаяСтрока.НДС;
			ТекСтрока.БазаНДС = ТекСтрока.БазаНДС - ДобавленнаяСтрока.БазаНДС;
			ТекСтрока.СтатьяДекларацииНДСНалоговыйКредит = Справочники.СтатьиНалоговыхДеклараций.НДС_НКПропорциональноНеВклВКредит;
		
		КонецЦикла;
		
		ТаблицаКопия.Свернуть("СтатьяДекларацииНДСНалоговыйКредит,СтавкаНДС","БазаНДС,НДС");
		ОбщегоНазначенияБПВызовСервера.ЗагрузитьВТаблицуЗначений(ТаблицаКопия, ТаблицаДвижений);
		
		//оборудование
		ТаблицаКопия = ТаблицаПоОборудованию.Скопировать();
		
		ИсходноеКоличествоСтрок = ТаблицаКопия.Количество();
		Для НомСтроки = 1 По ИсходноеКоличествоСтрок Цикл
			ТекСтрока = ТаблицаКопия[НомСтроки-1];
			Если НЕ ТекСтрока.ВидДеятельностиНДС = Перечисления.ВидыДеятельностиНДС.ПропорциональноОблагаемая Тогда
				Продолжить;
			КонецЕсли;
			
			// добавим строку по пропорц. НДС, относящемуся на кредит, текущая строка останется такой, что не относится на кредит
			ДобавленнаяСтрока = ТаблицаКопия.Добавить();
			ЗаполнитьЗначенияСвойств(ДобавленнаяСтрока, ТекСтрока);
			
			ПроводкиСуммаНДСКредит = ТекСтрока.ПроводкиСуммаНДСКредит;
			Если Дата >= '2015-07-01' Тогда
				ПроводкиСуммаНДСКредит = ТекСтрока.НДС - ТекСтрока.СуммаНДСУсловнойПродажи;	
			КонецЕсли;
			//ДобавленнаяСтрока.БазаНДС = ?(ТекСтрока.НДС = 0, 0, ТекСтрока.БазаНДС * (ТекСтрока.ПроводкиСуммаНДСКредит / ТекСтрока.НДС));
			//ДобавленнаяСтрока.НДС     = ТекСтрока.ПроводкиСуммаНДСКредит;
			ДобавленнаяСтрока.БазаНДС = ?(ТекСтрока.НДС = 0, 0, ТекСтрока.БазаНДС * (ПроводкиСуммаНДСКредит / ТекСтрока.НДС));			
			ДобавленнаяСтрока.НДС     = ПроводкиСуммаНДСКредит;
			ДобавленнаяСтрока.СтатьяДекларацииНДСНалоговыйКредит = Справочники.СтатьиНалоговыхДеклараций.НДС_НКПропорциональноВклВКредитПоставкаОФ;
			
			ТекСтрока.НДС     = ТекСтрока.НДС 	  - ДобавленнаяСтрока.НДС;
			ТекСтрока.БазаНДС = ТекСтрока.БазаНДС - ДобавленнаяСтрока.БазаНДС;
			ТекСтрока.СтатьяДекларацииНДСНалоговыйКредит = Справочники.СтатьиНалоговыхДеклараций.НДС_НКПропорциональноНеВклВКредит;
			
		КонецЦикла;
		
		ТаблицаКопия.Свернуть("СтатьяДекларацииНДСНалоговыйКредит,СтавкаНДС","БазаНДС,НДС");
		ОбщегоНазначенияБПВызовСервера.ЗагрузитьВТаблицуЗначений(ТаблицаКопия, ТаблицаДвижений);
		
		ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.Организация		, "Организация");
		ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.ДоговорПоставщикаТоваров, "ДоговорКонтрагента");
		
		ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.КодыОперацийНДСНалоговыйКредит.ПервичныйДокумент, "КодОперации");
		
		НаборДвижений.мПериод          = Дата;
		НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;
		
		Если Не Отказ Тогда
			НаборДвижений.ДобавитьДвижение();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры
	
////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)

	ТипДанныхЗаполнения = ТипЗнч(ДанныеЗаполнения);
	Если ДанныеЗаполнения <> Неопределено И ТипДанныхЗаполнения <> Тип("Структура")
		И Метаданные().ВводитсяНаОсновании.Содержит(ДанныеЗаполнения.Метаданные()) Тогда
		ЗаполнитьПоДокументуОснованию(ДанныеЗаполнения);
	Иначе
		// Документ только в регламетировананной валюте
		ВалютаДокумента	        = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
		
		СтруктураКурсаДокумента = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаДокумента, ТекущаяДата());
		КурсДокумента           = СтруктураКурсаДокумента.Курс;
		КратностьДокумента      = СтруктураКурсаДокумента.Кратность;
	КонецЕсли;
	ЗаполнениеДокументов.Заполнить(ЭтотОбъект, ДанныеЗаполнения);

	Если ЗначениеЗаполнено(Организация)
		И ЗначениеЗаполнено(Контрагент)
		И ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
		СчетаУчета = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаРасчетовСКонтрагентом(Организация, Контрагент, ДоговорКонтрагента);
		СчетУчетаРасчетовСКонтрагентом = СчетаУчета.СчетРасчетов;
		СчетУчетаРасчетовПоАвансам     = СчетаУчета.СчетАвансов;
	КонецЕсли;
	СчетУчетаАкциза 	= ПланыСчетов.Хозрасчетный.РасчетыПоАкцизу;
	СчетУчетаПошлины	= ПланыСчетов.Хозрасчетный.РасчетыПоОбязательнымПлатежам;
		
	СчетНДСУсловнаяПродажа = ПланыСчетов.Хозрасчетный.УсловнаяПродажа;

	Документы.ГТДИмпорт.УстановитьСчетУчетаНДСилиСчетУчетаВексель(ЭтотОбъект);

	Если Разделы.Количество() = 0 Тогда
		Раздел = ДобавитьРаздел();
	КонецЕсли;
	

КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)

	МассивНепроверяемыхРеквизитов = Новый Массив;

	ПлательщикНДС = УчетнаяПолитика.ПлательщикНДС(Организация, Дата);
	ПоставщикКомитент = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
		ДоговорПоставщикаТоваров, "ВидДоговора") = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом;
		
	СпособОценкиТоваровВРознице = УчетнаяПолитика.СпособОценкиТоваровВРознице(Организация, Дата);
	УчетВПродажныхЦенах = (СпособОценкиТоваровВРознице = Перечисления.СпособыОценкиТоваровВРознице.ПоПродажнойСтоимости);

	// Условные проверки реквизитов шапки:

	Если Дата < '2015-07-01' Тогда
		МассивНепроверяемыхРеквизитов.Добавить("СчетНДСУсловнаяПродажа");	
	КонецЕсли;
	Если ОформленНалоговыйВексельПоНДС Тогда
		МассивНепроверяемыхРеквизитов.Добавить("СчетУчетаНДС")
	Иначе
		МассивНепроверяемыхРеквизитов.Добавить("СчетУчетаВексель")
	КонецЕсли;
	
	Если Не ПоставщикКомитент Тогда
		МассивНепроверяемыхРеквизитов.Добавить("СчетЗатрат")
	КонецЕсли;
	
	Если Не ВключаетсяВУточняющийРасчет Тогда
		МассивНепроверяемыхРеквизитов.Добавить("УточняемыйПериод")
	КонецЕсли;

	// Условные проверки реквизитов табличных частей:
	Если ПоставщикКомитент Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Товары.СчетУчетаБУ");
		МассивНепроверяемыхРеквизитов.Добавить("Оборудование.СчетУчетаБУ");
	КонецЕсли;
	
	Если Не ПлательщикНДС ИЛИ Не ОформленНалоговыйВексельПоНДС Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Товары.СчетУчетаНДС");
		МассивНепроверяемыхРеквизитов.Добавить("Оборудование.СчетУчетаНДС");
	КонецЕсли;
	
	Если Не ПлательщикНДС Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Товары.НалоговоеНазначение");
		МассивНепроверяемыхРеквизитов.Добавить("Оборудование.НалоговоеНазначение");
	КонецЕсли;
	
	Если Не ПлательщикНДС ИЛИ ПоставщикКомитент Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Товары.СтатьяДекларацииНДСНалоговыйКредит");
		МассивНепроверяемыхРеквизитов.Добавить("Оборудование.СтатьяДекларацииНДСНалоговыйКредит");
	КонецЕсли;

	ТаблицыДокумента = ПолучитьТаблицыДляПроверкиЗаполнения();

	ВыборкаДокументов = ТаблицыДокумента.ТаблицаРазделов.Выбрать();
	Пока ВыборкаДокументов.Следующий() Цикл

		Префикс = "Разделы[%1].";
		Префикс = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			Префикс, Формат(ВыборкаДокументов.НомерСтроки - 1, "ЧН=0; ЧГ="));
		ИмяСписка = НСтр("ru='Разделы';uk='Розділи'");

		Если ВыборкаДокументов.ТоварыКоличествоСтрок = 0 Тогда
			ТекстСообщения = НСтр("ru='По разделу ""%1"" отсутствуют строки с номенклатурой';uk='По розділу ""%1"" відсутні рядки з номенклатурою'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения,
														Формат(ВыборкаДокументов.НомерСтроки, "ЧН=0; ЧГ="));
			ТекстСообщения = ОбщегоНазначенияБПКлиентСервер.ПолучитьТекстСообщения("Список", "Корректность", , ,
				ИмяСписка, ТекстСообщения);
			Поле = Префикс+"НомерСтроки";
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
			Продолжить;
		КонецЕсли;

		Если ВыборкаДокументов.ТоварыСуммаПошлины <> ВыборкаДокументов.СуммаПошлины Тогда
			ТекстСообщения = НСтр("ru='По разделу ""%1"" сумма пошлины не совпадает с итогом по товарам и оборудованию раздела';uk='По розділу ""%1"" сума мита не збігається з підсумком за товарами і устаткуванням розділу'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения,
														Формат(ВыборкаДокументов.НомерСтроки, "ЧН=0; ЧГ="));

			ТекстСообщения = ОбщегоНазначенияБПКлиентСервер.ПолучитьТекстСообщения("Колонка", "Корректность", НСтр("ru='Сумма пошлины';uk='Сума мита'"),
				ВыборкаДокументов.НомерСтроки, ИмяСписка, ТекстСообщения);
			Поле = Префикс + "СуммаПошлины";
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
		КонецЕсли;

		Если ВыборкаДокументов.ТоварыСуммаАкциза <> ВыборкаДокументов.СуммаАкциза Тогда
			ТекстСообщения = НСтр("ru='По разделу ""%1"" сумма акциза не совпадает с итогом по товарам и оборудованию раздела';uk='По розділу ""%1"" сума акцизу не збігається з підсумком за товарами і устаткуванню розділу'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения,
														Формат(ВыборкаДокументов.НомерСтроки, "ЧН=0; ЧГ="));

			ТекстСообщения = ОбщегоНазначенияБПКлиентСервер.ПолучитьТекстСообщения("Колонка", "Корректность", НСтр("ru='Сумма акциза';uk='Сума акцизу'"),
				ВыборкаДокументов.НомерСтроки, ИмяСписка, ТекстСообщения);
			Поле = Префикс + "СуммаАкциза";
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
		КонецЕсли;

		Если ВыборкаДокументов.ТоварыСуммаНДС <> ВыборкаДокументов.СуммаНДС Тогда
			ТекстСообщения = НСтр("ru='По разделу ""%1"" сумма НДС не совпадает с итогом по товарам и оборудованию раздела';uk='По розділу ""%1"" сума ПДВ не збігається з підсумком за товарами і устаткуванню розділу'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения,
														Формат(ВыборкаДокументов.НомерСтроки, "ЧН=0; ЧГ="));

			ТекстСообщения = ОбщегоНазначенияБПКлиентСервер.ПолучитьТекстСообщения("Колонка", "Корректность", НСтр("ru='Сумма НДС';uk='Сума ПДВ'"),
				ВыборкаДокументов.НомерСтроки, ИмяСписка, ТекстСообщения);
			Поле = Префикс + "СуммаНДС";
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
		КонецЕсли;

		Если ЗначениеЗаполнено(ВыборкаДокументов.СуммаНДС) И НЕ ЗначениеЗаполнено(ВыборкаДокументов.СтавкаНДС) Тогда
			ТекстСообщения = ОбщегоНазначенияБПКлиентСервер.ПолучитьТекстСообщения("Колонка", "Заполнение", НСтр("ru='Ставка НДС';uk='Ставка ПДВ'"),
				ВыборкаДокументов.НомерСтроки, ИмяСписка);
			Поле = Префикс + "СтавкаНДС";
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
		КонецЕсли;

		Если НЕ ЗначениеЗаполнено(ВыборкаДокументов.СуммаНДС)
			И ВыборкаДокументов.СтавкаНДС <> Перечисления.СтавкиНДС.БезНДС
			И ВыборкаДокументов.СтавкаНДС <> Перечисления.СтавкиНДС.НеНДС
			И ВыборкаДокументов.СтавкаНДС <> Перечисления.СтавкиНДС.НДС0 Тогда
			ТекстСообщения = ОбщегоНазначенияБПКлиентСервер.ПолучитьТекстСообщения("Колонка", "Заполнение", НСтр("ru='Сумма НДС';uk='Сума ПДВ'"),
				ВыборкаДокументов.НомерСтроки, ИмяСписка);
			Поле = Префикс + "СуммаНДС";
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
		КонецЕсли;

	КонецЦикла;

	ВыборкаДокументов = ТаблицыДокумента.ТаблицаТоваров.Выбрать();
	Пока ВыборкаДокументов.Следующий() Цикл

		Префикс = "Товары[%1].";
		Префикс = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			Префикс, Формат(ВыборкаДокументов.НомерСтроки - 1, "ЧН=0; ЧГ="));
		ИмяСписка = НСтр("ru='Товары';uk='Товари'");

		Если ЗначениеЗаполнено(ВыборкаДокументов.ДокументПартии) 
		   И УчетВПродажныхЦенах И ВыборкаДокументов.ДокументПартииЭтоРозничныйСклад Тогда
			ТекстСообщения = ОбщегоНазначенияБПКлиентСервер.ПолучитьТекстСообщения("Колонка", "Корректность", НСтр("ru='Документ партии';uk='Документ партії'"),
				ВыборкаДокументов.НомерСтроки, ИмяСписка,
				НСтр("ru='Указан документ партии осуществляющий приходование на розничный склад (учет в рознице ведется в продажных ценах)';uk='Зазначений документ партії здійснює прибуткування на роздрібний склад (облік в роздрібобі ведеться в продажних цінах)'"));
			Поле = Префикс + "ДокументПартии";
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
		КонецЕсли;

	КонецЦикла;

	ВыборкаДокументов = ТаблицыДокумента.ТаблицаОборудования.Выбрать();
	Пока ВыборкаДокументов.Следующий() Цикл

		Префикс = "Оборудование[%1].";
		Префикс = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			Префикс, Формат(ВыборкаДокументов.НомерСтроки - 1, "ЧН=0; ЧГ="));
		ИмяСписка = НСтр("ru='Оборудование';uk='Устаткування'");

		Если ЗначениеЗаполнено(ВыборкаДокументов.ДокументПартии) 
		   И УчетВПродажныхЦенах И ВыборкаДокументов.ДокументПартииЭтоРозничныйСклад Тогда
			ТекстСообщения = ОбщегоНазначенияБПКлиентСервер.ПолучитьТекстСообщения("Колонка", "Корректность", НСтр("ru='Документ партии';uk='Документ партії'"),
				ВыборкаДокументов.НомерСтроки, ИмяСписка,
				НСтр("ru='Указан документ партии осуществляющий приходование на розничный склад (учет в рознице ведется в продажных ценах)';uk='Зазначений документ партії здійснює прибуткування на роздрібний склад (облік в роздрібобі ведеться в продажних цінах)'"));
			Поле = Префикс + "ДокументПартии";
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
		КонецЕсли;
		
	КонецЦикла;
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);

КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)

	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ПлательщикНДС = УчетнаяПолитика.ПлательщикНДС(Организация, Дата);
	ПоставщикКомитент = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
		ДоговорПоставщикаТоваров, "ВидДоговора") = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом;
		
	Если ПоставщикКомитент Тогда
		Если ЗначениеЗаполнено(СуммаНДСПропорциональноКредит) Тогда
			СуммаНДСПропорциональноКредит = Неопределено;			
		КонецЕсли;
		Если ЗначениеЗаполнено(СуммаНДСПропорциональноВсего) Тогда
			СуммаНДСПропорциональноВсего = Неопределено;			
		КонецЕсли;

	Иначе
		Если ЗначениеЗаполнено(СчетЗатрат) Тогда
			СчетЗатрат = Неопределено;
		КонецЕсли;	
		Для сч=1 По 3 Цикл
			Если ЗначениеЗаполнено(ЭтотОбъект["ЗатратСубконто"+сч]) Тогда
				ЭтотОбъект["ЗатратСубконто"+сч] = Неопределено;
			КонецЕсли;				
		КонецЦикла;
		Если ЗначениеЗаполнено(НалоговоеНазначениеДоходовИЗатрат) Тогда
			НалоговоеНазначениеДоходовИЗатрат = Неопределено;
		КонецЕсли;	
		
	КонецЕсли;
	
	Если ОформленНалоговыйВексельПоНДС Тогда
		Если ЗначениеЗаполнено(СчетУчетаНДС) Тогда
			СчетУчетаНДС = Неопределено;
		КонецЕсли;	
		Для сч=1 По 3 Цикл
			Если ЗначениеЗаполнено(ЭтотОбъект["НДССубконто"+сч]) Тогда
				ЭтотОбъект["НДССубконто"+сч] = Неопределено;
			КонецЕсли;				
		КонецЦикла;
		
	Иначе
		Если ЗначениеЗаполнено(ДатаВыдачиВекселя) Тогда
			ДатаВыдачиВекселя = Неопределено;
		КонецЕсли;	
		
		Если ЗначениеЗаполнено(СчетУчетаВексель) Тогда
			СчетУчетаВексель = Неопределено;
		КонецЕсли;	
		Для сч=1 По 3 Цикл
			Если ЗначениеЗаполнено(ЭтотОбъект["ВексельСубконто"+сч]) Тогда
				ЭтотОбъект["ВексельСубконто"+сч] = Неопределено;
			КонецЕсли;				
		КонецЦикла;
		
	КонецЕсли;
		
	Если Не ВключаетсяВУточняющийРасчет И ЗначениеЗаполнено(УточняемыйПериод) Тогда
		УточняемыйПериод = Неопределено;
	КонецЕсли;
	
	Если НЕ ПлательщикНДС Тогда
		// организация - не плательщик НДС. Установим во всех ТЧ признак "НДС включен в стоимость"
		НеОБлНДСДеятельность = Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяХозДеятельность;
		
		Для каждого СтрокаТЧ  Из Товары Цикл
		    СтрокаТЧ.НалоговоеНазначение = НеОБлНДСДеятельность;
		КонецЦикла; 
		Для каждого СтрокаТЧ  Из Оборудование Цикл
		    СтрокаТЧ.НалоговоеНазначение = НеОБлНДСДеятельность;
		КонецЦикла; 

	КонецЕсли; 
	
	Если СчетНДСУсловнаяПродажа.Пустая() Тогда
		СчетНДСУсловнаяПродажа = ПланыСчетов.Хозрасчетный.УсловнаяПродажа;
	КонецЕсли;
	
	ДополнительныеСвойства.Вставить("РежимЗаписи", РежимЗаписи);

КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)

	Дата = НачалоДня(ОбщегоНазначенияБП.ПолучитьРабочуюДату());
	Ответственный = Пользователи.ТекущийПользователь();

	СтруктураКурсаВзаиморасчетов = РаботаСКурсамиВалют.ПолучитьКурсВалюты(
	ВалютаДокумента, Дата);
	
	КурсВзаиморасчетов      = СтруктураКурсаВзаиморасчетов.Курс;
	КратностьВзаиморасчетов = СтруктураКурсаВзаиморасчетов.Кратность;
	
	Если Год(ОбъектКопирования.Дата) <> Год(Дата) Тогда
		Документы.ГТДИмпорт.РассчитатьПропорциональныйНДС(ЭтотОбъект,
			УчетнаяПолитика.ПлательщикНДС(Организация, Дата),
			НалоговыйУчет.ПолучитьКоэффициентПропорциональногоНДС(Организация, Дата)
			);
	КонецЕсли;

КонецПроцедуры


Процедура ОбработкаПроведения(Отказ, РежимПроведения)

	Перем Заголовок, СтруктураШапкиДокумента;
	Перем ТаблицаПоТоварам, ТаблицаПоОборудованию;

	// ПОДГОТОВКА ПРОВЕДЕНИЯ ПО ДАННЫМ ДОКУМЕНТА
	ПроведениеСервер.ПодготовитьНаборыЗаписейКПроведению(ЭтотОбъект);
	Если РучнаяКорректировка Тогда
		Возврат;
	КонецЕсли;

    мВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначенияБПВызовСервера.ПредставлениеДокументаПриПроведении(Ссылка);
	
	ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента);
	ПодготовитьПараметрыУчетнойПолитики(СтруктураШапкиДокумента, Отказ);
	ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоОборудованию, Отказ, Заголовок);
	
	Если НЕ Отказ Тогда
		
		ДвиженияПоРегистрам(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоОборудованию, Отказ,Заголовок);
		
	КонецЕсли;
	
	Движения.Хозрасчетный.ВыполнитьДействияПередЗаписьюДвижений();

	ПроведениеСервер.ПодготовитьНаборыЗаписейКЗаписиДвижений(ЭтотОбъект);
	
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)

	ПроведениеСервер.ПодготовитьНаборыЗаписейКОтменеПроведения(ЭтотОбъект);
	Движения.Записать();

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Процедура ЗаполнитьПоДокументуОснованию(Основание)
	
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
		Если НЕ Основание.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ПокупкаКомиссия
			И НЕ Основание.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Оборудование Тогда
			Возврат;
		КонецЕсли;
		
		ЗаполнениеДокументов.ЗаполнитьПоОснованию(ЭтотОбъект, Основание);
		
		ПоставщикТоваров   		 = Контрагент;
		ДоговорПоставщикаТоваров = ДоговорКонтрагента;
	
		// Контрагент у нас другой
		Контрагент         = Неопределено;
		ДоговорКонтрагента = Неопределено;
		Сделка             = Неопределено;
		
		// Документ только в регламетировананной валюте
		ВалютаДокумента	        = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
		
		СтруктураКурсаДокумента = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаДокумента, ТекущаяДата());
		КурсДокумента           = СтруктураКурсаДокумента.Курс;
		КратностьДокумента      = СтруктураКурсаДокумента.Кратность;
		
		// Заполним Табличную часть
		Раздел = ДобавитьРаздел();
		
		ДанныеОбъекта = Новый Структура( // ИНАГРО Склад,
			"Дата, Организация, 
			|ВалютаДокумента, КурсДокумента, КратностьДокумента,
			|ОформленНалоговыйВексельПоНДС"
		);		
		Если НЕ Основание.ИНАГРО_СкладВТЧ Тогда // ИНАГРО
			ДанныеОбъекта.Вставить("Склад");
		КонецЕсли; 
		ЗаполнитьЗначенияСвойств(ДанныеОбъекта, ЭтотОбъект);
					  
		ДанныеПоступления = Документы.ГТДИмпорт.ТоварыПоДаннымПоступления(ДанныеОбъекта, Основание, 1, Раздел.СтавкаНДС);
		ТоварыПоДаннымПоступления       = ДанныеПоступления.Товары;
		ОборудованиеПоДаннымПоступления = ДанныеПоступления.Оборудование;
		Если ТоварыПоДаннымПоступления.Количество() > 0 Тогда
			Товары.Загрузить(ТоварыПоДаннымПоступления);
		КонецЕсли;
		Если ОборудованиеПоДаннымПоступления.Количество() > 0 Тогда
			Оборудование.Загрузить(ОборудованиеПоДаннымПоступления);
		КонецЕсли;
		
		ВсегоСтоимость = 0;
		ВсегоПошлина   = 0;
		ВсегоАкциз     = 0;
		ВсегоНДС       = 0;
		
		ПосчитатьИтогиПоРазделу(1, ВсегоСтоимость, ВсегоПошлина, ВсегоАкциз, ВсегоНДС);
		
		Раздел.ТаможеннаяСтоимость = ВсегоСтоимость;
		// Расчитывать прочие показатели нет смысла:
		// - Ставки пошлины, акциза и НДС не заполнены. 
		// - После ручного ввода ставок будет произведен расчет.
		
		Документы.ГТДИмпорт.РассчитатьПропорциональныйНДС(
			ЭтотОбъект, 
			УчетнаяПолитика.ПлательщикНДС(Организация, Дата),
			НалоговыйУчет.ПолучитьКоэффициентПропорциональногоНДС(Организация, Дата)
		);

	КонецЕсли;
	
КонецПроцедуры

Функция ДобавитьРаздел() Экспорт
	
	НовыйРаздел = Разделы.Добавить();
	
	НовыйРаздел.СтавкаНДС      = Перечисления.СтавкиНДС.ПустаяСсылка(); // Заполняется пользователем вручную, после выполняется пересчет суммы НДС
	
	Возврат НовыйРаздел;
	
КонецФункции

Процедура ПосчитатьИтогиПоРазделу(НомерРаздела, ВсегоСтоимость, ВсегоПошлина, ВсегоАкциз, ВсегоНДС)  Экспорт
	
	ВсегоСтоимость = 0;
	ВсегоПошлина   = 0;
	ВсегоАкциз     = 0;
	ВсегоНДС       = 0;
	МассивСтрок    = Товары.НайтиСтроки(Новый Структура("НомерРаздела", НомерРаздела));
	
	Для каждого ЭлементМассива Из МассивСтрок Цикл
		ВсегоСтоимость = ВсегоСтоимость + ЭлементМассива.ФактурнаяСтоимость;
		ВсегоПошлина   = ВсегоПошлина   + ЭлементМассива.СуммаПошлины;
		ВсегоАкциз     = ВсегоАкциз     + ЭлементМассива.СуммаАкциза;
		ВсегоНДС       = ВсегоНДС       + ЭлементМассива.СуммаНДС;
	КонецЦикла;
	
	МассивСтрок    = Оборудование.НайтиСтроки(Новый Структура("НомерРаздела", НомерРаздела));
	Для каждого ЭлементМассива Из МассивСтрок Цикл
		ВсегоСтоимость = ВсегоСтоимость + ЭлементМассива.ФактурнаяСтоимость;
		ВсегоПошлина   = ВсегоПошлина   + ЭлементМассива.СуммаПошлины;
		ВсегоАкциз     = ВсегоАкциз     + ЭлементМассива.СуммаАкциза;
		ВсегоНДС       = ВсегоНДС       + ЭлементМассива.СуммаНДС;
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьТаблицыДляПроверкиЗаполнения()

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Разделы", Разделы.Выгрузить(, "НомерСтроки, СуммаПошлины, СуммаАкциза, СуммаНДС, СтавкаНДС, ТаможеннаяСтоимость"));
	Запрос.УстановитьПараметр("Товары",             Товары.Выгрузить(, "НомерСтроки, Номенклатура, НомерРаздела, СчетУчетаНДС, СуммаНДС, СуммаПошлины, СуммаАкциза, ФактурнаяСтоимость, ДокументПартии"));
	Запрос.УстановитьПараметр("Оборудование", Оборудование.Выгрузить(, "НомерСтроки, Номенклатура, НомерРаздела, СчетУчетаНДС, СуммаНДС, СуммаПошлины, СуммаАкциза, ФактурнаяСтоимость, ДокументПартии"));
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВремТаблица.НомерСтроки,
	|	ВремТаблица.Номенклатура,
	|	ВремТаблица.НомерРаздела,
	|	ВремТаблица.СчетУчетаНДС,
	|	ВремТаблица.СуммаНДС,
	|	ВремТаблица.СуммаПошлины,
	|	ВремТаблица.СуммаАкциза,
	|	ВремТаблица.ФактурнаяСтоимость,
	|	ВЫРАЗИТЬ(ВремТаблица.ДокументПартии КАК Документ.ПоступлениеТоваровУслуг) КАК ДокументПартии // ВЫРАЗИТЬ - для компиляции запроса
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	&Товары КАК ВремТаблица
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ВремТаблица.НомерРаздела,
	|	ВремТаблица.НомерСтроки
	|;
	|
	|ВЫБРАТЬ
	|	ВремТаблица.НомерСтроки,
	|	ВремТаблица.Номенклатура,
	|	ВремТаблица.НомерРаздела,
	|	ВремТаблица.СчетУчетаНДС,
	|	ВремТаблица.СуммаНДС,
	|	ВремТаблица.СуммаПошлины,
	|	ВремТаблица.СуммаАкциза,
	|	ВремТаблица.ФактурнаяСтоимость,
	|	ВЫРАЗИТЬ(ВремТаблица.ДокументПартии КАК Документ.ПоступлениеТоваровУслуг) КАК ДокументПартии
	|ПОМЕСТИТЬ Оборудование
	|ИЗ
	|	&Оборудование КАК ВремТаблица
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ВремТаблица.НомерРаздела,
	|	ВремТаблица.НомерСтроки
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВремТаблица.НомерСтроки,
	|	ВремТаблица.ТаможеннаяСтоимость,
	|	ВремТаблица.СуммаПошлины,
	|	ВремТаблица.СуммаАкциза,
	|	ВремТаблица.СуммаНДС,
	|	ВремТаблица.СтавкаНДС
	|ПОМЕСТИТЬ Разделы
	|ИЗ
	|	&Разделы КАК ВремТаблица
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ВремТаблица.НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Разделы.НомерСтроки,
	|	Разделы.СуммаПошлины,
	|	Разделы.СуммаАкциза,
	|	Разделы.ТаможеннаяСтоимость,
	|	Разделы.СуммаНДС,
	|	Разделы.СтавкаНДС,
	|	ЕСТЬNULL(Товары.ТоварыКоличествоСтрок, 0) КАК ТоварыКоличествоСтрок,
	|	Товары.ТоварыСуммаПошлины,
	|	Товары.ТоварыСуммаАкциза,
	|	Товары.ТоварыСуммаНДС,
	|	Товары.ФактурнаяСтоимость
	|ИЗ
	|	Разделы КАК Разделы
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			Товары.НомерРаздела КАК НомерРаздела,
	|			СУММА(Товары.СуммаПошлины) КАК ТоварыСуммаПошлины,
	|			СУММА(Товары.СуммаАкциза) КАК ТоварыСуммаАкциза,
	|			СУММА(Товары.ФактурнаяСтоимость) КАК ФактурнаяСтоимость,
	|			КОЛИЧЕСТВО(*) КАК ТоварыКоличествоСтрок,
	|			СУММА(Товары.СуммаНДС) КАК ТоварыСуммаНДС
	|		ИЗ
	|			(ВЫБРАТЬ 
	|				Товары.НомерРаздела, 
	|				Товары.СуммаПошлины, 
	|				Товары.СуммаАкциза, 
	|				Товары.ФактурнаяСтоимость, 
	|				Товары.Номенклатура, 
	|				Товары.СуммаНДС 
	|           ИЗ
	|           	Товары
	|
	|           ОБЪЕДИНИТЬ ВСЕ
	|
	|			ВЫБРАТЬ 
	|				Оборудование.НомерРаздела, 
	|				Оборудование.СуммаПошлины, 
	|				Оборудование.СуммаАкциза, 
	|				Оборудование.ФактурнаяСтоимость, 
	|				Оборудование.Номенклатура, 
	|				Оборудование.СуммаНДС 
	|           ИЗ
	|           	Оборудование) КАК Товары
	|
	|		СГРУППИРОВАТЬ ПО
	|			Товары.НомерРаздела) КАК Товары
	|		ПО Разделы.НомерСтроки = Товары.НомерРаздела
	|ГДЕ
	|	(Разделы.СуммаНДС <> Товары.ТоварыСуммаНДС
	|			ИЛИ Разделы.СуммаПошлины <> Товары.ТоварыСуммаПошлины
	|			ИЛИ Разделы.СуммаАкциза <> Товары.ТоварыСуммаАкциза
	|			ИЛИ Разделы.СуммаНДС > 0
	|				И Разделы.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.ПустаяСсылка))
	|			ИЛИ ЕСТЬNULL(Товары.ТоварыКоличествоСтрок, 0) = 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.НомерСтроки,
	|	Товары.ДокументПартии КАК ДокументПартии,
	|	Товары.ДокументПартии.Склад.ТипСклада КАК ДокументПартииТипСклада,
	|	ВЫБОР
	|   	КОГДА Товары.ДокументПартии.Склад.ТипСклада = ЗНАЧЕНИЕ(Перечисление.ТипыСкладов.НеавтоматизированнаяТорговаяТочка)
	|         ИЛИ Товары.ДокументПартии.Склад.ТипСклада = ЗНАЧЕНИЕ(Перечисление.ТипыСкладов.РозничныйМагазин)
	|			ТОГДА ИСТИНА
	|       ИНАЧЕ
	|       	ЛОЖЬ
	|	КОНЕЦ КАК ДокументПартииЭтоРозничныйСклад
	|ИЗ
	|	Товары КАК Товары
	|
	|УПОРЯДОЧИТЬ ПО
	|	Товары.НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Оборудование.НомерСтроки,
	|	Оборудование.ДокументПартии КАК ДокументПартии,
	|	ВЫБОР
	|   	КОГДА Оборудование.ДокументПартии.Склад.ТипСклада = ЗНАЧЕНИЕ(Перечисление.ТипыСкладов.НеавтоматизированнаяТорговаяТочка)
	|         ИЛИ Оборудование.ДокументПартии.Склад.ТипСклада = ЗНАЧЕНИЕ(Перечисление.ТипыСкладов.РозничныйМагазин)
	|			ТОГДА ИСТИНА
	|       ИНАЧЕ
	|       	ЛОЖЬ
	|	КОНЕЦ КАК ДокументПартииЭтоРозничныйСклад
	|ИЗ
	|	Оборудование КАК Оборудование
	|
	|УПОРЯДОЧИТЬ ПО
	|	Оборудование.НомерСтроки";

	РезультатыЗапроса = Запрос.ВыполнитьПакет();

	Таблицы = Новый Структура;
	Таблицы.Вставить("ТаблицаРазделов", РезультатыЗапроса[3]);
	Таблицы.Вставить("ТаблицаТоваров", РезультатыЗапроса[4]);
	Таблицы.Вставить("ТаблицаОборудования", РезультатыЗапроса[5]);

	Возврат Таблицы;

КонецФункции

#КонецЕсли