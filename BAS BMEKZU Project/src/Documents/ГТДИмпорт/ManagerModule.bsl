#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Заполняет счета учета номенклатуры в табличной части документа
//
Процедура ЗаполнитьСчетаУчетаВТабличнойЧасти(Объект, ИмяТабличнойЧасти) Экспорт

	СоответствиеРазделовИСтавокНДС = Новый Соответствие;
	Для каждого СтрокаРаздел Из Объект.Разделы Цикл
		СоответствиеРазделовИСтавокНДС[СтрокаРаздел.НомерСтроки] = СтрокаРаздел.СтавкаНДС;
	КонецЦикла;		

	ТабличнаяЧасть = Объект[ИмяТабличнойЧасти];
	
	ДанныеОбъекта = Новый Структура("Дата, Организация, Склад, ОформленНалоговыйВексельПоНДС");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
	СоответствиеСчетовУчета = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаУчетаСпискаНоменклатуры(
		ДанныеОбъекта.Организация, ОбщегоНазначения.ВыгрузитьКолонку(ТабличнаяЧасть, "Номенклатура", Истина), ДанныеОбъекта.Склад, ДанныеОбъекта.Дата);
	
	Для каждого СтрокаТабличнойЧасти Из ТабличнаяЧасть Цикл
		СчетаУчета = СоответствиеСчетовУчета.Получить(СтрокаТабличнойЧасти.Номенклатура);
		ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(ДанныеОбъекта, СтрокаТабличнойЧасти, ИмяТабличнойЧасти, СчетаУчета, СоответствиеРазделовИСтавокНДС[СтрокаТабличнойЧасти.НомерРаздела]);
	КонецЦикла;

КонецПроцедуры

// Заполняет счета учета номенклатуры в строке табличной части документа
//
// Параметры:
//  ДанныеОбъекта         - структура данных объекта, используемых при заполнении счетов учета (вид операции,
//                          вид договора контрагента, признак комиссионной торговли и т.п.)
//  СтрокаТабличнойЧасти  - строка табличной части документа
//  ИмяТабличнойЧасти     - имя табличной части документа
//  СведенияОНоменклатуре - структура сведений о номенклатуре, либо стуктура счетов учета
//
Процедура ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(ДанныеОбъекта, СтрокаТабличнойЧасти, ИмяТабличнойЧасти, СведенияОНоменклатуре, СтавкаНДС) Экспорт
	
	Если СведенияОНоменклатуре = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если СведенияОНоменклатуре.Свойство("СчетаУчета") Тогда
		// СведенияОНоменклатуре - структура сведений номенклатуры
		СчетаУчета = СведенияОНоменклатуре.СчетаУчета;
	ИначеЕсли СведенияОНоменклатуре.Свойство("СчетУчетаБУ") Тогда
		// СведенияОНоменклатуре - структура счетов учета номенклатуры
		СчетаУчета = СведенияОНоменклатуре;
	Иначе
		Возврат;
	КонецЕсли;
	
	Если ИмяТабличнойЧасти = "Товары" ИЛИ ИмяТабличнойЧасти = "Оборудование" Тогда
		
		Если ЗначениеЗаполнено(СчетаУчета.СчетУчетаБУ) Тогда
			СтрокаТабличнойЧасти.СчетУчетаБУ   = СчетаУчета.СчетУчетаБУ;
		КонецЕсли;
		
		СтрокаТабличнойЧасти.СчетУчетаНДС = ПланыСчетов.Хозрасчетный.НалоговыеОбязательстваНеподтвержденные;
		
		Если ЗначениеЗаполнено(СчетаУчета.НалоговоеНазначение) Тогда
			СтрокаТабличнойЧасти.НалоговоеНазначение = СчетаУчета.НалоговоеНазначение;
		КонецЕсли;
		
		СтрокаТабличнойЧасти.СтатьяДекларацииНДСНалоговыйКредит = ПолучитьСтатьюНалоговойДекларации(
			СтавкаНДС, 
			СтрокаТабличнойЧасти.НалоговоеНазначение, 
			ДанныеОбъекта.ОформленНалоговыйВексельПоНДС
		);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура РассчитатьПропорциональныйНДС(Объект, ПлательщикНДС, КоэффициентПропорциональногоНДС) Экспорт 
	
	МассивИменТабличныхЧастей = Новый Массив();
	МассивИменТабличныхЧастей.Добавить("Товары");
	МассивИменТабличныхЧастей.Добавить("Оборудование");
	
	УчетНДСКлиентСервер.РассчитатьПропорциональныйНДС(Объект,МассивИменТабличныхЧастей,ПлательщикНДС,КоэффициентПропорциональногоНДС);
	
КонецПроцедуры

Функция ПолучитьСтатьюНалоговойДекларации(Знач СтавкаНДС, Знач НалоговоеНазначение, Знач ОформленНалоговыйВексельПоНДС) Экспорт
	
	ДляХозяйственнойДеятельности = НалоговоеНазначение <> Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяНеХозДеятельность;
	ДляОперацийОблагаемыхНДС 	 = НалоговоеНазначение.ВидДеятельностиНДС <> Перечисления.ВидыДеятельностиНДС.Необлагаемая;
	
	// Определим, имеется ли право на налоговый кредит	
	Если  ДляХозяйственнойДеятельности
		И ДляОперацийОблагаемыхНДС Тогда
		
		Если ОформленНалоговыйВексельПоНДС Тогда
			Возврат Справочники.СтатьиНалоговыхДеклараций.ПустаяСсылка();
		Иначе
			Если СтавкаНДС =  Перечисления.СтавкиНДС.НДС0 
				ИЛИ СтавкаНДС = Перечисления.СтавкиНДС.СпецСт8 // ИНАГРО
				ИЛИ СтавкаНДС = Перечисления.СтавкиНДС.НДС7
				ИЛИ СтавкаНДС = Перечисления.СтавкиНДС.НДС14
				ИЛИ СтавкаНДС = Перечисления.СтавкиНДС.НДС20 Тогда
				// ст 12.1 Декларации
				Возврат Справочники.СтатьиНалоговыхДеклараций.НДС_НКИмпортВРОблагНДСТамож;
			Иначе
				// ст 12.3 Декларации
				Возврат Справочники.СтатьиНалоговыхДеклараций.НДС_НКИмпортВРОблагБезНДС;
			КонецЕсли; 
		КонецЕсли; 
	ИначеЕсли ДляХозяйственнойДеятельности Тогда
			// И НЕ ДляОперацийОблагаемыхНДС
		Если ОформленНалоговыйВексельПоНДС Тогда
			Возврат Справочники.СтатьиНалоговыхДеклараций.ПустаяСсылка();
		Иначе
			Если СтавкаНДС =  Перечисления.СтавкиНДС.НДС0
				ИЛИ СтавкаНДС = Перечисления.СтавкиНДС.СпецСт8 // ИНАГРО
				ИЛИ СтавкаНДС = Перечисления.СтавкиНДС.НДС7
				ИЛИ СтавкаНДС = Перечисления.СтавкиНДС.НДС14
				ИЛИ СтавкаНДС = Перечисления.СтавкиНДС.НДС20 Тогда
				// ст 13.1.1 Декларации
				Возврат Справочники.СтатьиНалоговыхДеклараций.НДС_НКИмпортВРНеОблагНеОбъектНДСТамож;
			Иначе
				// ст 13.1.2 Декларации
				Возврат Справочники.СтатьиНалоговыхДеклараций.НДС_НКИмпортВРНеОблагНеОбъектБезНДС;
			КонецЕсли; 
		КонецЕсли; 
	Иначе
		Если ОформленНалоговыйВексельПоНДС Тогда
			Возврат Справочники.СтатьиНалоговыхДеклараций.ПустаяСсылка();
		Иначе		
			Если СтавкаНДС =  Перечисления.СтавкиНДС.НДС0 
				ИЛИ СтавкаНДС = Перечисления.СтавкиНДС.СпецСт8 // ИНАГРО
				ИЛИ СтавкаНДС = Перечисления.СтавкиНДС.НДС7
				ИЛИ СтавкаНДС = Перечисления.СтавкиНДС.НДС14
				ИЛИ СтавкаНДС = Перечисления.СтавкиНДС.НДС20 Тогда
				// ст 13.1.1 Декларации
				Возврат Справочники.СтатьиНалоговыхДеклараций.НДС_НКПокупкаСНДСнеВР_;
			Иначе
				// ст 13.1.2 Декларации
				Возврат Справочники.СтатьиНалоговыхДеклараций.НДС_НКПокупкаБезНДСнеВР_;
			КонецЕсли; 
		КонецЕсли;
	КонецЕсли; 

КонецФункции

Процедура УстановитьСчетУчетаНДСилиСчетУчетаВексель(Объект) Экспорт
	
	Если Объект.ОформленНалоговыйВексельПоНДС Тогда
		Объект.СчетУчетаВексель = ПланыСчетов.Хозрасчетный.КраткосрочныеВекселяВыданныеВНациональнойВалюте;
	Иначе
		Если (ЗначениеЗаполнено(Объект.ДоговорПоставщикаТоваров) И Объект.ДоговорПоставщикаТоваров.ВидДоговора <> Перечисления.ВидыДоговоровКонтрагентов.СКомитентом)
		 ИЛИ Объект.Дата >= '20110101'
			Тогда
			Объект.СчетУчетаНДС = ПланыСчетов.Хозрасчетный.РасчетыПоНДС;
		Иначе
			Объект.СчетУчетаНДС = ПланыСчетов.Хозрасчетный.НалоговыйКредитНеподтвержденный;	
		КонецЕсли;		
	КонецЕсли;

КонецПроцедуры

#Область ЗаполнениеДокумента

Функция ТоварыПоДаннымПоступления(ДанныеОбъекта, ДокументПоступления, НомерРаздела, СтавкаНДС) Экспорт
	
	ВалютаРеглУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	ОснованиеВидОперации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументПоступления, "ВидОперации");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументПоступления", ДокументПоступления);
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	ИСТИНА КАК ЭтоТовары,
		|	ПоступлениеТоваровУслугТовары.Номенклатура,
		|	ПоступлениеТоваровУслугТовары.ЕдиницаИзмерения,
		|	ПоступлениеТоваровУслугТовары.Коэффициент,
		|	ПоступлениеТоваровУслугТовары.Количество,
		|	ПоступлениеТоваровУслугТовары.Сумма,
		|	ПоступлениеТоваровУслугТовары.Ссылка.ИНАГРО_СкладВТЧ КАК СкладВТЧ, // ИНАГРО
		|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК ФактурнаяСтоимость,
		|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК СуммаПошлины,
		|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК СуммаНДС,
		|	ПоступлениеТоваровУслугТовары.СчетУчетаБУ,
		|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка) КАК СчетУчетаНДС,
		|	ПоступлениеТоваровУслугТовары.НалоговоеНазначение,
		|	ЗНАЧЕНИЕ(Справочник.СтатьиНалоговыхДеклараций.ПустаяСсылка) КАК СтатьяДекларацииНДСНалоговыйКредит,
		|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(2, 0)) КАК НомерРаздела,
		|	ЗНАЧЕНИЕ(Документ.ПоступлениеТоваровУслуг.ПустаяСсылка) КАК ДокументПартии,
		|	ВЫБОР // ИНАГРО
		|		КОГДА ПоступлениеТоваровУслугТовары.Ссылка.ИНАГРО_ВидПоступления = ЗНАЧЕНИЕ(Перечисление.ИНАГРО_ВидыПоступленияТоваров.НаСклад)
		|			ТОГДА ВЫБОР
		|					КОГДА ПоступлениеТоваровУслугТовары.Ссылка.ИНАГРО_СкладВТЧ
		|						ТОГДА ПоступлениеТоваровУслугТовары.ИНАГРО_Склад
		|					ИНАЧЕ ПоступлениеТоваровУслугТовары.Ссылка.Склад
		|				КОНЕЦ
		|		ИНАЧЕ NULL
		|	КОНЕЦ КАК ИНАГРО_Склад
		|ИЗ
		|	Документ.ПоступлениеТоваровУслуг.Товары КАК ПоступлениеТоваровУслугТовары
		|ГДЕ
		|	ПоступлениеТоваровУслугТовары.Ссылка = &ДокументПоступления";
	
	Если ОснованиеВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Оборудование Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|" + "ВЫБРАТЬ
		     |	ЛОЖЬ КАК ЭтоТовары,
		     |	ПоступлениеТоваровУслугОборудование.Номенклатура,
		     |	ПоступлениеТоваровУслугОборудование.ЕдиницаИзмерения,
		     |	ПоступлениеТоваровУслугОборудование.Коэффициент,
		     |	ПоступлениеТоваровУслугОборудование.Количество,
		     |	ПоступлениеТоваровУслугОборудование.Сумма,
			 |	Ложь КАК СкладВТЧ, // ИНАГРО
		     |	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК Поле1,
		     |	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК Поле2,
		     |	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК Поле3,
		     |	ПоступлениеТоваровУслугОборудование.СчетУчетаБУ,
		     |	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка) КАК СчетУчетаНДС,
		     |	ПоступлениеТоваровУслугОборудование.НалоговоеНазначение,
		     |	ЗНАЧЕНИЕ(Справочник.СтатьиНалоговыхДеклараций.ПустаяСсылка) КАК Поле4,
		     |	ВЫРАЗИТЬ(0 КАК ЧИСЛО(2, 0)) КАК Поле5,
		     |	ЗНАЧЕНИЕ(Документ.ПоступлениеТоваровУслуг.ПустаяСсылка) КАК Поле6,
		     |	NULL КАК ИНАГРО_Склад // ИНАГРО
		     |ИЗ
		     |	Документ.ПоступлениеТоваровУслуг.Оборудование КАК ПоступлениеТоваровУслугОборудование
		     |ГДЕ
		     |	ПоступлениеТоваровУслугОборудование.Ссылка = &ДокументПоступления";
	ИначеЕсли ОснованиеВидОперации <> Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ПокупкаКомиссия Тогда
		Возврат Новый Структура("Товары, Оборудование", Новый ТаблицаЗначений, Новый ТаблицаЗначений);
	КонецЕсли;

	Запрос.Текст = ТекстЗапроса;
	ТаблицаЗначенийТовары = Запрос.Выполнить().Выгрузить();
	
	// ИНАГРО++
	Если ДанныеОбъекта.Свойство("Склад") Тогда 
		
		ДанныеОбъекта.Склад = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументПоступления, "Склад");
		
		СоответствиеСчетовУчета = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаУчетаСпискаНоменклатуры(
			ДанныеОбъекта.Организация,
			ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаЗначенийТовары, "Номенклатура", Истина),
			ДанныеОбъекта.Склад,
			ДанныеОбъекта.Дата);
		
	КонецЕсли;
	// ИНАГРО--
	
	КурсДокумента      = ЗаполнениеДокументов.КурсДокумента(ДокументПоступления,      ВалютаРеглУчета);
	КратностьДокумента = ЗаполнениеДокументов.КратностьДокумента(ДокументПоступления, ВалютаРеглУчета);
	Для каждого СтрокаТоваров Из ТаблицаЗначенийТовары Цикл
		СтрокаТоваров.НомерРаздела   = НомерРаздела;
		СтрокаТоваров.ДокументПартии = ДокументПоступления;		
		
		// ИНАГРО++
		Если НЕ СтрокаТоваров.СкладВТЧ Тогда
			
			СчетаУчета = СоответствиеСчетовУчета.Получить(СтрокаТоваров.Номенклатура);
			
		Иначе			
			
			СчетаУчета = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаУчетаНоменклатуры(
				ДанныеОбъекта.Организация,
				СтрокаТоваров.Номенклатура,
				СтрокаТоваров.ИНАГРО_Склад,
				ДанныеОбъекта.Дата);
			
		КонецЕсли;
	    // ИНАГРО--
		
		СчетУчетаБУИзДокументаОснования = СтрокаТоваров.СчетУчетаБУ;
		
		Документы.ГТДИмпорт.ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(
			ДанныеОбъекта, СтрокаТоваров, "Товары", СчетаУчета, СтавкаНДС);
			
		Если ЗначениеЗаполнено(СчетУчетаБУИзДокументаОснования) Тогда
			СтрокаТоваров.СчетУчетаБУ = СчетУчетаБУИзДокументаОснования;
		КонецЕсли;
		
		СтрокаТоваров.ФактурнаяСтоимость = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(
			СтрокаТоваров.Сумма,
			ДокументПоступления.ВалютаДокумента, ДанныеОбъекта.ВалютаДокумента,
			КурсДокумента,                       ДанныеОбъекта.КурсДокумента,
			КратностьДокумента,                  ДанныеОбъекта.КратностьДокумента);
		
	КонецЦикла;
	
	ТаблицаЗначенийТовары.Колонки.Удалить("Сумма");
	
	Возврат Новый Структура("Товары, Оборудование", 
		ТаблицаЗначенийТовары.Скопировать(Новый Структура("ЭтоТовары", Истина)), 
		ТаблицаЗначенийТовары.Скопировать(Новый Структура("ЭтоТовары", Ложь))
	);
	
КонецФункции

#КонецОбласти

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#Область ПроцедурыИФункцииПечати

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	// Реестр документов
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор  = "Реестр";
	КомандаПечати.Представление  = НСтр("ru='Реестр документов';uk='Реєстр документів'");
	КомандаПечати.ЗаголовокФормы = НСтр("ru='Реестр документов ""ГТД по импорту""';uk='Реєстр документів ""ВМД по імпорту""'");
	КомандаПечати.Обработчик     = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечатиРеестраДокументов";
	КомандаПечати.СписокФорм     = "ФормаСписка";
	КомандаПечати.Порядок        = 100;
	
КонецПроцедуры

Функция ПолучитьДополнительныеРеквизитыДляРеестра() Экспорт
	
	Результат = Новый Структура("Информация", "Контрагент");
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецЕсли