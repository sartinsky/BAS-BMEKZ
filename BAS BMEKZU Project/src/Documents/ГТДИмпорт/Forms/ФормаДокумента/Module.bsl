#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	
	Если Параметры.Ключ.Пустая() Тогда
		ПодготовитьФормуНаСервере();
	КонецЕсли;
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом

	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	ПодготовитьФормуНаСервере();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	
	УстановитьСостояниеДокумента();

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)

	Если ИсточникВыбора.ИмяФормы = "Обработка.ПодборНоменклатуры.Форма.Форма" Тогда
		ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение, ИсточникВыбора.ИмяТаблицы, Объект.Разделы.Индекс(Элементы.Разделы.ТекущиеДанные) + 1);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)

	ОбщегоНазначенияБПКлиент.ОбработкаОповещенияФормыДокумента(ЭтаФорма, Объект.Ссылка, ИмяСобытия, Параметр, Источник);

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)

	Если НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДатаДокумента) Тогда
		// Изменение времени не влияет на поведение документа.
		ТекущаяДатаДокумента = Объект.Дата;
		Возврат;
	КонецЕсли;

	// Общие проверки условий по датам.
	ТребуетсяВызовСервера = ОбщегоНазначенияБПКлиент.ТребуетсяВызовСервераПриИзмененииДатыДокумента(Объект.Дата, 
		ТекущаяДатаДокумента, Объект.ВалютаДокумента, ВалютаРегламентированногоУчета);
	
		
	// Если определили, что изменение даты может повлиять на какие-либо параметры, 
	// то передаем обработку на сервер.
	Если ТребуетсяВызовСервера Тогда
		ДатаПриИзмененииСервер();
	КонецЕсли;
	
	// Запомним новую дату документа.
	ТекущаяДатаДокумента = Объект.Дата;

КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)

	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		ОрганизацияПриИзмененииСервер();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)

	Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
		КонтрагентПриИзмененииСервер();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДоговорКонтрагентаПриИзменении(Элемент)

	Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		ДоговорКонтрагентаПриИзмененииСервер();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПоставщикТоваровПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.ПоставщикТоваров) Тогда
		ПоставщикТоваровПриИзмененииСервер();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорПоставщикаТоваровПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.ДоговорПоставщикаТоваров) Тогда
		ДоговорПоставщикаПриИзмененииСервер();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОформленНалоговыйВексельПоНДСПриИзменении(Элемент)
	
	ОформленНалоговыйВексельПоНДСПриИзмененииСервер();
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ВключаетсяВУточняющийРасчетПриИзменении(Элемент)
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура СпецРежимНалогообложенияПриИзменении(Элемент)
	ЭлементСпискаЗначений = Элементы.СпецРежимНалогообложения.СписокВыбора.НайтиПоЗначению(Объект.СпецРежимНалогообложения);
	Элементы.СпецРежимНалогообложенияДекорация.Заголовок = ?(ЭлементСпискаЗначений = Неопределено, "", ЭлементСпискаЗначений.Представление);
КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(
		Элемент.ТекстРедактирования,
		ЭтотОбъект,
		"Объект.Комментарий"
	);

КонецПроцедуры

&НаКлиенте
Процедура СчетУчетаПриИзменении(Элемент)
	
	НастроитьСубконтоПриИзмененииСчета(ЭтаФорма, Элемент.Имя);

КонецПроцедуры

&НаКлиенте
Процедура ПошлинаСубконтоПриИзменении(Элемент)
	НастроитьСубконтоПриИзмененииСубконто(ЭтаФорма, "СчетУчетаПошлины");
КонецПроцедуры

&НаКлиенте
Процедура АкцизСубконтоПриИзменении(Элемент)
	НастроитьСубконтоПриИзмененииСубконто(ЭтаФорма, "СчетУчетаАкциза");
КонецПроцедуры

&НаКлиенте
Процедура НДССубконтоПриИзменении(Элемент)
	НастроитьСубконтоПриИзмененииСубконто(ЭтаФорма, "СчетУчетаНДС");
КонецПроцедуры

&НаКлиенте
Процедура ВексельСубконтоПриИзменении(Элемент)
	НастроитьСубконтоПриИзмененииСубконто(ЭтаФорма, "СчетУчетаВексель");
КонецПроцедуры

&НаКлиенте
Процедура ЗатратСубконтоПриИзменении(Элемент)
	НастроитьСубконтоПриИзмененииСубконто(ЭтаФорма, "СчетЗатрат");
КонецПроцедуры

&НаКлиенте
Процедура ИНАГРО_НаправлениеОперацииПриИзменении(Элемент) // ИНАГРО
	
	ЭлементСпискаЗначений = Элементы.ИНАГРО_НаправлениеОперации.СписокВыбора.НайтиПоЗначению(Объект.ИНАГРО_НаправлениеОперации);
	Элементы.ИНАГРО_НаправлениеОперацииДекорация.Заголовок = ?(ЭлементСпискаЗначений = Неопределено, "", ЭлементСпискаЗначений.Представление);

КонецПроцедуры   

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыРазделы

&НаКлиенте
Процедура РазделыПриАктивизацииСтроки(Элемент)

	Если Элементы.Разделы.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;

	НомерРаздела = Объект.Разделы.Индекс(Элементы.Разделы.ТекущиеДанные) + 1;

	Элементы.Разделы.ТекущаяСтрока = Объект.Разделы[НомерРаздела - 1].ПолучитьИдентификатор();
	
	ФиксированныйОтбор = Новый ФиксированнаяСтруктура("НомерРаздела",НомерРаздела);
	Элементы.Товары.ОтборСтрок = ФиксированныйОтбор;
	Элементы.Оборудование.ОтборСтрок = ФиксированныйОтбор;

КонецПроцедуры

&НаКлиенте
Процедура РазделыПередУдалением(Элемент, Отказ)

	НомерРаздела = Объект.Разделы.Индекс(Элементы.Разделы.ТекущиеДанные) + 1;
	УдалитьТоварыРаздела(НомерРаздела);

КонецПроцедуры

&НаКлиенте
Процедура РазделыПриИзменении(Элемент)

	Если Объект.Разделы.Количество() = 0 Тогда
		Объект.Разделы.Добавить();
		Элементы.Разделы.ТекущаяСтрока = Объект.Разделы[0].ПолучитьИдентификатор();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура РазделыТаможеннаяСтоимостьПриИзменении(Элемент)

	НомерРаздела = Объект.Разделы.Индекс(Элементы.Разделы.ТекущиеДанные) + 1;
	ПриИзмененииСтоимостиСтавкиПошлиныСтавкиАкциза(НомерРаздела);

КонецПроцедуры

&НаКлиенте
Процедура РазделыСтавкаПошлиныПриИзменении(Элемент)

	НомерРаздела = Объект.Разделы.Индекс(Элементы.Разделы.ТекущиеДанные) + 1;
	ПриИзмененииСтоимостиСтавкиПошлиныСтавкиАкциза(НомерРаздела);

КонецПроцедуры

&НаКлиенте
Процедура РазделыСуммаПошлиныПриИзменении(Элемент)

	ПриИзмененииСуммыПошлиныАкцизаСтавкиНДС(Элементы.Разделы.ТекущиеДанные);

КонецПроцедуры

&НаКлиенте
Процедура РазделыСтавкаАкцизаПриИзменении(Элемент)

	НомерРаздела = Объект.Разделы.Индекс(Элементы.Разделы.ТекущиеДанные) + 1;
	ПриИзмененииСтоимостиСтавкиПошлиныСтавкиАкциза(НомерРаздела);

КонецПроцедуры

&НаКлиенте
Процедура РазделыСуммаАкцизаПриИзменении(Элемент)

	ПриИзмененииСуммыПошлиныАкцизаСтавкиНДС(Элементы.Разделы.ТекущиеДанные);

КонецПроцедуры

&НаКлиенте
Процедура РазделыСтавкаНДСПриИзменении(Элемент)

	ПриИзмененииСуммыПошлиныАкцизаСтавкиНДС(Элементы.Разделы.ТекущиеДанные);
	
	НомерРаздела = Объект.Разделы.Индекс(Элементы.Разделы.ТекущиеДанные) + 1;
	ЗаполнитьСтатьиНалоговойДекларацииПоРазделу(НомерРаздела);

КонецПроцедуры

&НаКлиенте
Процедура РазделыСуммаНДСПриИзменении(Элемент)

	РаспределитьИтоговыеСуммыПоРазделуСервер(Объект.Разделы.Индекс(Элементы.Разделы.ТекущиеДанные) + 1);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТовары

&НаКлиенте
Процедура ТоварыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)

	Если НоваяСтрока Тогда
		Элемент.ТекущиеДанные.НомерРаздела = Объект.Разделы.Индекс(Элементы.Разделы.ТекущиеДанные) + 1;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриИзменении(Элемент)

	РассчитатьПропорциональныйНДС(Объект, ПлательщикНДС, КоэффициентПропорциональногоНДС);

КонецПроцедуры

&НаКлиенте
Процедура ТоварыПослеУдаления(Элемент)

	РассчитатьПропорциональныйНДС(Объект, ПлательщикНДС, КоэффициентПропорциональногоНДС);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	СтрокаРаздела = Объект.Разделы.Получить(ТекущиеДанные.НомерРаздела - 1);	

	ДанныеСтрокиТаблицы = Новый Структура(
		"Номенклатура, Количество, ЕдиницаИзмерения, Коэффициент, ДокументПартии,
		|СчетУчетаБУ, СчетУчетаНДС, 
		|НалоговоеНазначение, СтатьяДекларацииНДСНалоговыйКредит");
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, ТекущиеДанные);
	
	ДанныеОбъекта = Новый Структура("Дата, Организация, ОформленНалоговыйВексельПоНДС");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
	ТоварыНоменклатураПриИзмененииСервер(ДанныеСтрокиТаблицы, ДанныеОбъекта, "Товары", СтрокаРаздела.СтавкаНДС);
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтрокиТаблицы);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЕдиницаИзмеренияПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	ДанныеСтрокиТаблицы = Новый Структура(
		"Номенклатура, ЕдиницаИзмерения, Коэффициент");
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, ТекущиеДанные);
	
	ТоварыЕдиницаИзмеренияПриИзмененииСервер(ДанныеСтрокиТаблицы, "Товары");
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтрокиТаблицы);

КонецПроцедуры

&НаКлиенте
Процедура ТоварыНалоговоеНазначениеПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	СтрокаРаздела = Объект.Разделы[ТекущиеДанные.НомерРаздела - 1];
	
	ТекущиеДанные.СтатьяДекларацииНДСНалоговыйКредит = ЗаполнитьСтатьюНалоговойДекларации(
			СтрокаРаздела.СтавкаНДС, 
			ТекущиеДанные.НалоговоеНазначение, 
			Объект.ОформленНалоговыйВексельПоНДС
		);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыДокументПартииПриИзменении(Элемент) // ИНАГРО
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	ДанныеСтрокиТаблицы = Новый Структура("Склад, ДокументПартии");
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, ТекущиеДанные);

	ТоварыДокументПартииПриИзмененииНаСервере(ДанныеСтрокиТаблицы);
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтрокиТаблицы);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыОборудование

&НаКлиенте
Процедура ОборудованиеПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)

	Если НоваяСтрока Тогда
		Элемент.ТекущиеДанные.НомерРаздела = Объект.Разделы.Индекс(Элементы.Разделы.ТекущиеДанные) + 1;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОборудованиеПриИзменении(Элемент)

	РассчитатьПропорциональныйНДС(Объект, ПлательщикНДС, КоэффициентПропорциональногоНДС);

КонецПроцедуры

&НаКлиенте
Процедура ОборудованиеПослеУдаления(Элемент)
	
	РассчитатьПропорциональныйНДС(Объект, ПлательщикНДС, КоэффициентПропорциональногоНДС);
	
КонецПроцедуры

&НаКлиенте
Процедура ОборудованиеНоменклатураПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Оборудование.ТекущиеДанные;
	
	СтрокаРаздела = Объект.Разделы.Получить(ТекущиеДанные.НомерРаздела - 1);	

	ДанныеСтрокиТаблицы = Новый Структура(
		"Номенклатура, Количество, ЕдиницаИзмерения, Коэффициент, ДокументПартии,
		|СчетУчетаБУ, СчетУчетаНДС, 
		|НалоговоеНазначение, СтатьяДекларацииНДСНалоговыйКредит");
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, ТекущиеДанные);
	
	ДанныеОбъекта = Новый Структура("Дата, Организация, ОформленНалоговыйВексельПоНДС");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
	ТоварыНоменклатураПриИзмененииСервер(ДанныеСтрокиТаблицы, ДанныеОбъекта, "Оборудование", СтрокаРаздела.СтавкаНДС);
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтрокиТаблицы);
	
КонецПроцедуры

&НаКлиенте
Процедура ОборудованиеЕдиницаИзмеренияПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Оборудование.ТекущиеДанные;
	
	ДанныеСтрокиТаблицы = Новый Структура(
		"Номенклатура, ЕдиницаИзмерения, Коэффициент");
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, ТекущиеДанные);
	
	ТоварыЕдиницаИзмеренияПриИзмененииСервер(ДанныеСтрокиТаблицы, "Оборудование");
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтрокиТаблицы);

КонецПроцедуры

&НаКлиенте
Процедура ОборудованиеНалоговоеНазначениеПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Оборудование.ТекущиеДанные;
	СтрокаРаздела = Объект.Разделы[ТекущиеДанные.НомерРаздела - 1];
	
	ТекущиеДанные.СтатьяДекларацииНДСНалоговыйКредит = ЗаполнитьСтатьюНалоговойДекларации(
			СтрокаРаздела.СтавкаНДС, 
			ТекущиеДанные.НалоговоеНазначение, 
			Объект.ОформленНалоговыйВексельПоНДС
		);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ДействиеПодбор(Команда)

	ОткрытьФорму(
		"Обработка.ПодборНоменклатуры.Форма.Форма",
		ПолучитьПараметрыПодбора(),
		ЭтаФорма,
		УникальныйИдентификатор);

КонецПроцедуры

&НаКлиенте
Процедура Распределить(Команда)

	РаспределитьИтоговыеСуммыПоРазделуСервер(Объект.Разделы.Индекс(Элементы.Разделы.ТекущиеДанные) + 1);

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзПоступления(Команда)
	
	НомерРаздела = Объект.Разделы.Индекс(Элементы.Разделы.ТекущиеДанные) + 1;
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Отбор", Новый Структура("Организация", Объект.Организация));
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("НомерРаздела", НомерРаздела);
	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ДобавитьИзПоступленияЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ОткрытьФорму(
		"Документ.ПоступлениеТоваровУслуг.Форма.ФормаВыбора",
		ПараметрыФормы,
		ЭтаФорма,,,,ОповещениеОЗакрытии);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзПоступленияЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	НомерРаздела = ДополнительныеПараметры.НомерРаздела;
	
	ДокументПоступления = РезультатЗакрытия;
	
	Если ДокументПоступления <> Неопределено Тогда
		ЗаполнитьПоПоступлению(ДокументПоступления, НомерРаздела);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Функция  ЗаполнитьСтатьюНалоговойДекларации(СтавкаНДС, НалоговоеНазначение, ОформленНалоговыйВексельПоНДС)
	
	Возврат Документы.ГТДИмпорт.ПолучитьСтатьюНалоговойДекларации(СтавкаНДС, НалоговоеНазначение, ОформленНалоговыйВексельПоНДС);
	
КонецФункции

&НаСервере
Процедура ПодготовитьФормуНаСервере()

	УстановитьФункциональныеОпцииФормы();
	
	УстановитьСостояниеДокумента();

	// Заполнение реквизитов формы

	ТекущаяДатаДокумента			= Объект.Дата;

	ВалютаРегламентированногоУчета  = Константы.ВалютаРегламентированногоУчета.Получить();

	ДоговорПоставщикаУказан = ЗначениеЗаполнено(Объект.ДоговорПоставщикаТоваров);
	ВидДоговораПоставщика = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ДоговорПоставщикаТоваров, "ВидДоговора");
	ПоставщикКомитент = ДоговорПоставщикаУказан И (ВидДоговораПоставщика = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом);
	
	Если Элементы.СпецРежимНалогообложения.СписокВыбора.Количество() = 0 Тогда
		// Список должен быть заполнен до УправлениеФормой для корректного отображения СпецРежимНалогообложенияДекорация
	    УчетНДС.ЗаполнитьСписокВыбораСпецРежимаНалогообложения(Элементы.СпецРежимНалогообложения.СписокВыбора);
	КонецЕсли;
	
	НастроитьСубконтоПриПодготовкеФормыНаСервере(ЭтаФорма, "СчетУчетаАкциза");
	НастроитьСубконтоПриПодготовкеФормыНаСервере(ЭтаФорма, "СчетУчетаПошлины");
	НастроитьСубконтоПриПодготовкеФормыНаСервере(ЭтаФорма, "СчетУчетаНДС");
	НастроитьСубконтоПриПодготовкеФормыНаСервере(ЭтаФорма, "СчетУчетаВексель");
	НастроитьСубконтоПриПодготовкеФормыНаСервере(ЭтаФорма, "СчетЗатрат");
	
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаСервере
Процедура УстановитьСостояниеДокумента()
	
	СостояниеДокумента = ОбщегоНазначенияБП.СостояниеДокумента(Объект);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)

	Элементы = Форма.Элементы;
	Объект   = Форма.Объект;

	Элементы.ВключаетсяВУточняющийРасчет.Видимость                    = Форма.ПлательщикНДС;
	Элементы.УточняемыйПериод.Видимость                               = Форма.ПлательщикНДС;
	
	Элементы.ДатаВыдачиВекселя.Доступность = Объект.ОформленНалоговыйВексельПоНДС;

	Элементы.УточняемыйПериод.Доступность  = Объект.ВключаетсяВУточняющийРасчет;
	
	ДействуетНалоговыйКодекс = (Объект.Дата >= '20110101');
	Элементы.СпецРежимНалогообложения.Видимость 			= Форма.ПлательщикНДС И ДействуетНалоговыйКодекс;
	Элементы.СпецРежимНалогообложенияДекорация.Видимость 	= Форма.ПлательщикНДС И ДействуетНалоговыйКодекс;
	
	ЭлементСпискаЗначений = Элементы.СпецРежимНалогообложения.СписокВыбора.НайтиПоЗначению(Объект.СпецРежимНалогообложения);
	Элементы.СпецРежимНалогообложенияДекорация.Заголовок = ?(ЭлементСпискаЗначений = Неопределено, "", ЭлементСпискаЗначений.Представление);
	
	// ИНАГРО++
	Если Элементы.ИНАГРО_НаправлениеОперации.СписокВыбора.Количество() = 0 Тогда 		
		 Элементы.ИНАГРО_НаправлениеОперации.СписокВыбора.Добавить(1, "01-Операції із зерновими та технічними культурами");
		 Элементы.ИНАГРО_НаправлениеОперации.СписокВыбора.Добавить(2, "02-Операції з продукцією тваринництва"); 
		 Элементы.ИНАГРО_НаправлениеОперации.СписокВыбора.Добавить(3, "03-операціями з сільськогосподарськими товарами/послугами (крім операцій із зерновими та технічними культурами та операцій з продукцією тваринництва"); 
	КонецЕсли;
	ЭлементСпискаЗначений = Элементы.ИНАГРО_НаправлениеОперации.СписокВыбора.НайтиПоЗначению(Объект.ИНАГРО_НаправлениеОперации);
	Элементы.ИНАГРО_НаправлениеОперацииДекорация.Заголовок = ?(ЭлементСпискаЗначений = Неопределено, "", ЭлементСпискаЗначений.Представление);
	// ИНАГРО--
	
	Элементы.ДекорацияЗаголовокСчетУчетаНДС.Видимость = Не Объект.ОформленНалоговыйВексельПоНДС;
	Элементы.ЗаголовокНДССубконто1.Видимость          = Не Объект.ОформленНалоговыйВексельПоНДС;
	Элементы.ЗаголовокНДССубконто2.Видимость          = Не Объект.ОформленНалоговыйВексельПоНДС;
	Элементы.ЗаголовокНДССубконто3.Видимость          = Не Объект.ОформленНалоговыйВексельПоНДС;
	Элементы.СчетУчетаНДС.Видимость                   = Не Объект.ОформленНалоговыйВексельПоНДС;
	Элементы.НДССубконто1.Видимость                   = Не Объект.ОформленНалоговыйВексельПоНДС;
	Элементы.НДССубконто2.Видимость                   = Не Объект.ОформленНалоговыйВексельПоНДС;
	Элементы.НДССубконто3.Видимость                   = Не Объект.ОформленНалоговыйВексельПоНДС;

	Элементы.ДекорацияЗаголовокСчетУчетаВексель.Видимость = Объект.ОформленНалоговыйВексельПоНДС;
	Элементы.ЗаголовокВексельСубконто1.Видимость          = Объект.ОформленНалоговыйВексельПоНДС;
	Элементы.ЗаголовокВексельСубконто2.Видимость          = Объект.ОформленНалоговыйВексельПоНДС;
	Элементы.ЗаголовокВексельСубконто3.Видимость          = Объект.ОформленНалоговыйВексельПоНДС;
	Элементы.СчетУчетаВексель.Видимость                   = Объект.ОформленНалоговыйВексельПоНДС;
	Элементы.ВексельСубконто1.Видимость                   = Объект.ОформленНалоговыйВексельПоНДС;
	Элементы.ВексельСубконто2.Видимость                   = Объект.ОформленНалоговыйВексельПоНДС;
	Элементы.ВексельСубконто3.Видимость                   = Объект.ОформленНалоговыйВексельПоНДС;
	
	Элементы.ГруппаСчетЗатрат.Доступность                                    = Форма.ПоставщикКомитент;
	Элементы.ДекорацияЗаголовокСчетЗатрат.Доступность                        = Форма.ПоставщикКомитент;
	Элементы.ЗаголовокЗатратСубконто1.Доступность                            = Форма.ПоставщикКомитент;
	Элементы.ЗаголовокЗатратСубконто2.Доступность                            = Форма.ПоставщикКомитент;
	Элементы.ЗаголовокЗатратСубконто3.Доступность                            = Форма.ПоставщикКомитент;
	Элементы.ДекорацияЗаголовокНалоговоеНазначениеДоходовИЗатрат.Доступность = Форма.ПоставщикКомитент;
	Элементы.СчетЗатрат.Доступность                                          = Форма.ПоставщикКомитент;
	Элементы.ЗатратСубконто1.Доступность                                     = Форма.ПоставщикКомитент;
	Элементы.ЗатратСубконто2.Доступность                                     = Форма.ПоставщикКомитент;
	Элементы.ЗатратСубконто3.Доступность                                     = Форма.ПоставщикКомитент;
	Элементы.НалоговоеНазначениеДоходовИЗатрат.Доступность                   = Форма.ПоставщикКомитент;

	Элементы.СуммаНДСПропорциональноКредит.Видимость                  = Форма.ПлательщикНДС;
	Элементы.ВалютаРеглУчетаСуммаНДСПропорциональноКредит.Видимость   = Форма.ПлательщикНДС;
	Элементы.СуммаНДСПропорциональноВсего.Видимость                   = Форма.ПлательщикНДС;
	Элементы.ВалютаРеглУчетаСуммаНДСПропорциональноВсего.Видимость    = Форма.ПлательщикНДС;	
	
	Элементы.СуммаНДСПропорциональноКредит.Доступность                = Не Форма.ПоставщикКомитент;
	Элементы.ВалютаРеглУчетаСуммаНДСПропорциональноКредит.Доступность = Не Форма.ПоставщикКомитент;
	Элементы.СуммаНДСПропорциональноВсего.Доступность                 = Не Форма.ПоставщикКомитент; // Только просмотр - всегда
	Элементы.ВалютаРеглУчетаСуммаНДСПропорциональноВсего.Доступность  = Не Форма.ПоставщикКомитент;	
	
	Элементы.СчетНДСУсловнаяПродажа.Видимость = (Объект.Дата >= '2015-07-01');
	

КонецПроцедуры

&НаСервере
Процедура УстановитьФункциональныеОпцииФормы()

	ОбщегоНазначенияБПКлиентСервер.УстановитьПараметрыФункциональныхОпцийФормыДокумента(ЭтаФорма);
	ПлательщикНДС                   = УчетнаяПолитика.ПлательщикНДС(Объект.Организация, Объект.Дата);
	КоэффициентПропорциональногоНДС = НалоговыйУчет.ПолучитьКоэффициентПропорциональногоНДС(Объект.Организация, Объект.Дата);

КонецПроцедуры 

&НаСервере
Процедура ПересчитатьИтогиРаздела(НомерРаздела)

	Если НомерРаздела = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеРаздела = Объект.Разделы.Получить(НомерРаздела - 1);
	СтараяТаможеннаяСтоимость = ДанныеРаздела.ТаможеннаяСтоимость;

	ДанныеРаздела.СуммаПошлины = 0;
	ДанныеРаздела.СуммаАкциза  = 0;
	ДанныеРаздела.СуммаНДС     = 0;
	ДанныеРаздела.ТаможеннаяСтоимость = 0;

	ТоварыРаздела = Объект.Товары.НайтиСтроки(Новый Структура("НомерРаздела", НомерРаздела));
	Для Каждого СтрокаТаблицы Из ТоварыРаздела Цикл

		ДанныеРаздела.СуммаПошлины = ДанныеРаздела.СуммаПошлины + СтрокаТаблицы.СуммаПошлины;
		ДанныеРаздела.СуммаАкциза  = ДанныеРаздела.СуммаАкциза  + СтрокаТаблицы.СуммаАкциза;
		ДанныеРаздела.СуммаНДС     = ДанныеРаздела.СуммаНДС     + СтрокаТаблицы.СуммаНДС;

		ДанныеРаздела.ТаможеннаяСтоимость = ДанныеРаздела.ТаможеннаяСтоимость + СтрокаТаблицы.ФактурнаяСтоимость;

	КонецЦикла;
	ОборудованиеРаздела = Объект.Оборудование.НайтиСтроки(Новый Структура("НомерРаздела", НомерРаздела));
	Для Каждого СтрокаТаблицы Из ОборудованиеРаздела Цикл

		ДанныеРаздела.СуммаПошлины = ДанныеРаздела.СуммаПошлины + СтрокаТаблицы.СуммаПошлины;
		ДанныеРаздела.СуммаАкциза  = ДанныеРаздела.СуммаАкциза  + СтрокаТаблицы.СуммаАкциза;
		ДанныеРаздела.СуммаНДС     = ДанныеРаздела.СуммаНДС     + СтрокаТаблицы.СуммаНДС;

		ДанныеРаздела.ТаможеннаяСтоимость = ДанныеРаздела.ТаможеннаяСтоимость + СтрокаТаблицы.ФактурнаяСтоимость;

	КонецЦикла;
	
	Если СтараяТаможеннаяСтоимость <> ДанныеРаздела.ТаможеннаяСтоимость Тогда
		ПриИзмененииСтоимостиСтавкиПошлиныСтавкиАкциза(НомерРаздела);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоПоступлению(ДокументПоступления, НомерРаздела) Экспорт
	
	ДанныеОбъекта = Новый Структура("Дата, Организация, Склад, ВалютаДокумента, КурсДокумента, КратностьДокумента, ОформленНалоговыйВексельПоНДС");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
		
	ДанныеРаздела = Объект.Разделы.Получить(НомерРаздела - 1);
	
	ДанныеПоступления = Документы.ГТДИмпорт.ТоварыПоДаннымПоступления(ДанныеОбъекта, ДокументПоступления, НомерРаздела, ДанныеРаздела.СтавкаНДС);
	ТоварыПоДаннымПоступления       = ДанныеПоступления.Товары;
	ОборудованиеПоДаннымПоступления = ДанныеПоступления.Оборудование;

	Для каждого ДанныеНовойСтроки Из ТоварыПоДаннымПоступления Цикл
		НоваяСтрока = Объект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеНовойСтроки);
	КонецЦикла;
	Для каждого ДанныеНовойСтроки Из ОборудованиеПоДаннымПоступления Цикл
		НоваяСтрока = Объект.Оборудование.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеНовойСтроки);
	КонецЦикла;
	
	РассчитатьПропорциональныйНДС(Объект, ПлательщикНДС, КоэффициентПропорциональногоНДС);
	
	ПересчитатьИтогиРаздела(НомерРаздела);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция РассчитатьСуммуНДСГТД(Знач ДанныеСтроки)
	
	БазаНДС = ДанныеСтроки.ТаможеннаяСтоимость + ДанныеСтроки.СуммаПошлины + ДанныеСтроки.СуммаАкциза;

	Возврат УчетНДСКлиентСервер.РассчитатьСуммуНДС(БазаНДС, Ложь, УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(ДанныеСтроки.СтавкаНДС));

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция РассчитатьСуммуПошлиныГТД(Знач ДанныеСтроки)
	
	Возврат ДанныеСтроки.ТаможеннаяСтоимость * ДанныеСтроки.СтавкаПошлины / 100;

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция РассчитатьСуммуАкцизаГТД(Знач ДанныеСтроки)

	Возврат ДанныеСтроки.ТаможеннаяСтоимость * ДанныеСтроки.СтавкаАкциза / 100;

КонецФункции

&НаСервере
Процедура РаспределитьИтоговыеСуммыПоРазделуСервер(НомерРаздела)

	// Проверим, есть ли что распределять.
	СтрокаРаздела = Объект.Разделы.Получить(НомерРаздела - 1);
	ТаможеннаяСтоимость = СтрокаРаздела.ТаможеннаяСтоимость;
	СуммаПошлины        = СтрокаРаздела.СуммаПошлины;
	СуммаАкциза         = СтрокаРаздела.СуммаАкциза;
	СуммаНДС            = СтрокаРаздела.СуммаНДС;

	МассивСтрок  = Объект.Товары.НайтиСтроки(Новый Структура("НомерРаздела", НомерРаздела));
	МассивСтрокОборудование = Объект.Оборудование.НайтиСтроки(Новый Структура("НомерРаздела", НомерРаздела));
	// добавим оборудование в общий массив
	Для каждого ЭлементМассива Из МассивСтрокОборудование Цикл
		МассивСтрок.Добавить(ЭлементМассива);
	КонецЦикла; 

	БазисРаспределения = Новый Массив();

	ВсегоСтоимость = 0;
	Для каждого ЭлементМассива Из МассивСтрок Цикл
		ВсегоСтоимость = ВсегоСтоимость + ЭлементМассива.ФактурнаяСтоимость;
		БазисРаспределения.Добавить(ЭлементМассива.ФактурнаяСтоимость);
	КонецЦикла;

	Всего        = ВсегоСтоимость;
	ВсегоПошлина = СуммаПошлины;
	ВсегоАкциз   = СуммаАкциза;
	ВсегоНДС     = СуммаНДС;

	Если ВсегоСтоимость = 0 Тогда

		Если МассивСтрок.Количество() > 0 Тогда
			ТекстСообщения = НСтр("ru='Общая сумма фактурной стоимости раздела %1 нулевая!
|Распределение невозможно.';uk='Загальна сума фактурної вартості розділу %1 нульова!
|Розподіл неможливий.'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, НомерРаздела);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "Товары", "Объект");
		КонецЕсли;

		Возврат;

	КонецЕсли;

	Если не СуммаПошлины = 0 Тогда
		МассивРезультатаРаспределения_Пошлина = ОбщегоНазначенияБПКлиентСервер.РаспределитьПропорционально(СуммаПошлины, БазисРаспределения);
	КонецЕсли;
	Если не СуммаАкциза = 0 Тогда
		МассивРезультатаРаспределения_Акциз = ОбщегоНазначенияБПКлиентСервер.РаспределитьПропорционально(СуммаАкциза, БазисРаспределения);
	КонецЕсли;
	Если не СуммаНДС = 0 Тогда
		МассивРезультатаРаспределения_НДС = ОбщегоНазначенияБПКлиентСервер.РаспределитьПропорционально(СуммаНДС, БазисРаспределения);
	КонецЕсли;

	Для ИндексСтроки = 0 по МассивСтрок.Количество()-1 Цикл
		Если не СуммаПошлины = 0 Тогда
			МассивСтрок[ИндексСтроки].СуммаПошлины = МассивРезультатаРаспределения_Пошлина[ИндексСтроки];
		Иначе
			МассивСтрок[ИндексСтроки].СуммаПошлины = 0;
		КонецЕсли;
		Если не СуммаАкциза = 0 Тогда
			МассивСтрок[ИндексСтроки].СуммаАкциза = МассивРезультатаРаспределения_Акциз[ИндексСтроки];
		Иначе
			МассивСтрок[ИндексСтроки].СуммаАкциза = 0;
		КонецЕсли;
		Если не СуммаНДС = 0 Тогда
			МассивСтрок[ИндексСтроки].СуммаНДС = МассивРезультатаРаспределения_НДС[ИндексСтроки];
		Иначе
			МассивСтрок[ИндексСтроки].СуммаНДС = 0;
		КонецЕсли;
	КонецЦикла;
	
	РассчитатьПропорциональныйНДС(Объект, ПлательщикНДС, КоэффициентПропорциональногоНДС);
	
КонецПроцедуры

// Обслуживание процедур подбора

&НаКлиенте
Функция ПолучитьПараметрыПодбора()

	ЗаголовокПодбора = НСтр("ru='Подбор номенклатуры в документ %1 (Товары)';uk='Підбір номенклатури в документ %1 (Товари)'");
	ЗаголовокПодбора = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ЗаголовокПодбора, Объект.Ссылка);

	СписокПодборов = Новый СписокЗначений();
	СписокПодборов.Добавить("", НСтр("ru='По справочнику';uk='З довідника'"));

	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Организация"   , Объект.Организация);
	ПараметрыФормы.Вставить("Валюта"        , ВалютаРегламентированногоУчета);
	ПараметрыФормы.Вставить("ЕстьЦена"      , Ложь);
	ПараметрыФормы.Вставить("ЕстьКоличество", Истина);
	ПараметрыФормы.Вставить("ЕстьСерия"     , Истина);
	ПараметрыФормы.Вставить("Услуги"        , Ложь);
	ПараметрыФормы.Вставить("Заголовок"     , ЗаголовокПодбора);
	ПараметрыФормы.Вставить("СписокПодборов", СписокПодборов);
	ПараметрыФормы.Вставить("ИмяТаблицы"    , "Товары");

	Возврат ПараметрыФормы;

КонецФункции

&НаСервере
Процедура ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение, ИмяТаблицы, НомерРаздела)
	
	ТаблицаТоваров = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресПодобраннойНоменклатурыВХранилище);
	
	СтрокаРаздела = Объект.Разделы.Получить(НомерРаздела - 1);
	
	ДанныеОбъекта = Новый Структура("Дата, Организация, ОформленНалоговыйВексельПоНДС");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
	СоответствиеСведенийОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОСпискеНоменклатуры(
		ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаТоваров, "Номенклатура", Истина), ДанныеОбъекта);
		
	Для каждого СтрокаТовара Из ТаблицаТоваров Цикл
		
		СтрокаТабличнойЧасти = Объект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтрокаТовара);
		
		СтрокаТабличнойЧасти.НомерРаздела = НомерРаздела;
		
		СведенияОНоменклатуре = СоответствиеСведенийОНоменклатуре.Получить(СтрокаТовара.Номенклатура);
		Если СведенияОНоменклатуре = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Документы.ГТДИмпорт.ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(
			ДанныеОбъекта, СтрокаТабличнойЧасти, ИмяТаблицы, СведенияОНоменклатуре, СтрокаРаздела.СтавкаНДС);
		
	КонецЦикла;
	
	ПересчитатьИтогиРаздела(НомерРаздела);
	
КонецПроцедуры

// Изменение связанных реквизитов

&НаСервереБезКонтекста
Функция ПолучитьПараметрыДляДоговоров(ВалютаРеглУчета)

	ПараметрыОтбора = Новый СТруктура;

	СписокВидовДоговоров = Новый СписокЗначений;
	СписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.Прочее);
	ПараметрыОтбора.Вставить("ВидыДоговоров", СписокВидовДоговоров);

	СтруктураОтбора = Новый Структура();
	СтруктураОтбора.Вставить("ЗначениеОтбора",     ВалютаРеглУчета);
	СтруктураОтбора.Вставить("ВидСравненияОтбора", ВидСравнения.Равно);
	СтруктураДополнительныхПараметров = Новый Структура("ВалютаВзаиморасчетов", СтруктураОтбора);
	
	СтруктураОтбора = Новый Структура();
	СтруктураОтбора.Вставить("ЗначениеОтбора",     Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом);
	СтруктураОтбора.Вставить("ВидСравненияОтбора", ВидСравнения.Равно);
	СтруктураДополнительныхПараметров.Вставить("ВедениеВзаиморасчетов", СтруктураОтбора);

	ПараметрыОтбора.Вставить("СтруктураДополнительныхПараметров", СтруктураДополнительныхПараметров);


	Возврат ПараметрыОтбора;

КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьПараметрыДляДоговоровПоставщикаТоваров(ВалютаРеглУчета)

	ПараметрыОтбора = Новый Структура;

	СписокВидовДоговоров = Новый СписокЗначений;
	СписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком);
	СписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомитентом);
	ПараметрыОтбора.Вставить("ВидыДоговоров", СписокВидовДоговоров);

	Возврат ПараметрыОтбора;

КонецФункции

&НаСервере
Функция ДатаПриИзмененииСервер()


	УстановитьФункциональныеОпцииФормы();

	Если Год(Объект.Дата) <> Год(ТекущаяДатаДокумента) Тогда
		РассчитатьПропорциональныйНДС(Объект, ПлательщикНДС, КоэффициентПропорциональногоНДС);
	КонецЕсли;
	
	Если Объект.ОформленНалоговыйВексельПоНДС Тогда
		Если (Объект.Дата >= '20110101') <> (ТекущаяДатаДокумента >= '20110101') Тогда
			Документы.ГТДИмпорт.УстановитьСчетУчетаНДСилиСчетУчетаВексель(Объект);
			НастроитьСубконтоПриИзмененииСчета(ЭтаФорма, "СчетУчетаНДС");		
		КонецЕсли;		
	КонецЕсли;
	
	// Видимость элементов в зависимости от того действует или не действует налоговый кодекс 
	УправлениеФормой(ЭтаФорма);

КонецФункции

&НаСервере
Функция ОрганизацияПриИзмененииСервер()

	УстановитьФункциональныеОпцииФормы();
	
	КонтрагентПриИзмененииСервер();
	ПоставщикТоваровПриИзмененииСервер();
	
	ЗаполнитьСчетаУчетаВТабличнойЧастиНаСервере();
	
	РассчитатьПропорциональныйНДС(Объект, ПлательщикНДС, КоэффициентПропорциональногоНДС);
	
	УправлениеФормой(ЭтаФорма);

КонецФункции

&НаСервере
Процедура ЗаполнитьСчетаУчетаВТабличнойЧастиНаСервере(ИмяТабличнойЧасти = "")

	Если ПустаяСтрока(ИмяТабличнойЧасти) ИЛИ ИмяТабличнойЧасти = "Товары" Тогда
		Документы.ГТДИмпорт.ЗаполнитьСчетаУчетаВТабличнойЧасти(Объект, "Товары");
	КонецЕсли;

	Если ПустаяСтрока(ИмяТабличнойЧасти) ИЛИ ИмяТабличнойЧасти = "Оборудование" Тогда
		Документы.ГТДИмпорт.ЗаполнитьСчетаУчетаВТабличнойЧасти(Объект, "Оборудование");
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция КонтрагентПриИзмененииСервер()

	ПараметрыОтбораДоговора = ПолучитьПараметрыДляДоговоров(ВалютаРегламентированногоУчета);

	БухгалтерскийУчетПереопределяемый.УстановитьДоговорКонтрагента(Объект.ДоговорКонтрагента, Объект.Контрагент, Объект.Организация,
			ПараметрыОтбораДоговора.ВидыДоговоров, ПараметрыОтбораДоговора.СтруктураДополнительныхПараметров);

	ДоговорКонтрагентаПриИзмененииСервер();

КонецФункции

&НаСервере
Функция ДоговорКонтрагентаПриИзмененииСервер()


	РеквизитыДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		Объект.ДоговорКонтрагента,
		"ВалютаВзаиморасчетов,Владелец,ТипЦен,ВидДоговора");

	Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда


		Если НЕ ЗначениеЗаполнено(Объект.Контрагент) Тогда
			Объект.Контрагент = РеквизитыДоговора.Владелец;
		КонецЕсли;

		СтруктураКурсаДокумента = РаботаСКурсамиВалют.ПолучитьКурсВалюты(РеквизитыДоговора.ВалютаВзаиморасчетов, Объект.Дата);
		Объект.КурсВзаиморасчетов      = СтруктураКурсаДокумента.Курс;
		Объект.КратностьВзаиморасчетов = СтруктураКурсаДокумента.Кратность;

		СчетаУчета = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаРасчетовСКонтрагентом(Объект.Организация, Объект.Контрагент, Объект.ДоговорКонтрагента);
		Объект.СчетУчетаРасчетовСКонтрагентом = СчетаУчета.СчетРасчетов;
		Объект.СчетУчетаРасчетовПоАвансам     = СчетаУчета.СчетАвансов;
	КонецЕсли;


КонецФункции

&НаСервере
Функция ПоставщикТоваровПриИзмененииСервер()

	ПараметрыОтбораДоговора = ПолучитьПараметрыДляДоговоров(ВалютаРегламентированногоУчета);

	БухгалтерскийУчетПереопределяемый.УстановитьДоговорКонтрагента(Объект.ДоговорКонтрагента, Объект.Контрагент, Объект.Организация,
			ПараметрыОтбораДоговора.ВидыДоговоров, ПараметрыОтбораДоговора.СтруктураДополнительныхПараметров);

	ДоговорПоставщикаПриИзмененииСервер();

КонецФункции

&НаСервере
Процедура ДоговорПоставщикаПриИзмененииСервер()

	Если Не ЗначениеЗаполнено(Объект.ДоговорПоставщикаТоваров) Тогда
		Возврат;
	КонецЕсли;

	РеквизитыДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		Объект.ДоговорПоставщикаТоваров,
		"Владелец, ВидДоговора"
	);
	Если НЕ ЗначениеЗаполнено(Объект.ПоставщикТоваров) Тогда
		Объект.ПоставщикТоваров = РеквизитыДоговора.Владелец;
	КонецЕсли;

	Если Не Объект.ОформленНалоговыйВексельПоНДС Тогда
		Документы.ГТДИмпорт.УстановитьСчетУчетаНДСилиСчетУчетаВексель(Объект);
		НастроитьСубконтоПриИзмененииСчета(ЭтаФорма, "СчетУчетаНДС");
	КонецЕсли;
	
	// Заполним реквизиты формы
	ПоставщикКомитент = (РеквизитыДоговора.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом);

	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаСервере
Процедура ОформленНалоговыйВексельПоНДСПриИзмененииСервер();
	
	Документы.ГТДИмпорт.УстановитьСчетУчетаНДСилиСчетУчетаВексель(Объект);
	Если Объект.ОформленНалоговыйВексельПоНДС Тогда
		НастроитьСубконтоПриИзмененииСчета(ЭтаФорма, "СчетУчетаВексель");
	Иначе
		НастроитьСубконтоПриИзмененииСчета(ЭтаФорма, "СчетУчетаНДС");
	КонецЕсли;

	Для каждого Раздел Из Объект.Разделы Цикл
		ЗаполнитьСтатьиНалоговойДекларацииПоРазделу(Раздел.НомерСтроки);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииСтоимостиСтавкиПошлиныСтавкиАкциза(НомерРаздела)
	
	СтрокаРаздела = Объект.Разделы.Получить(НомерРаздела - 1);
	
	ДанныеСтроки = Новый Структура("ТаможеннаяСтоимость, СтавкаПошлины, СуммаПошлины, СтавкаАкциза, СуммаАкциза, СтавкаНДС, СуммаНДС, НомерСтроки");
	ЗаполнитьЗначенияСвойств(ДанныеСтроки, СтрокаРаздела);
	
	СтрокаРаздела.СуммаПошлины = РассчитатьСуммуПошлиныГТД(ДанныеСтроки);
	ДанныеСтроки.СуммаПошлины  = СтрокаРаздела.СуммаПошлины;
	
	СтрокаРаздела.СуммаАкциза  = РассчитатьСуммуАкцизаГТД(ДанныеСтроки);
	ДанныеСтроки.СуммаАкциза   = СтрокаРаздела.СуммаАкциза;
	
	СтрокаРаздела.СуммаНДС     = РассчитатьСуммуНДСГТД(ДанныеСтроки);
	
	РаспределитьИтоговыеСуммыПоРазделуСервер(НомерРаздела);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииСуммыПошлиныАкцизаСтавкиНДС(СтрокаРаздела)

	ДанныеСтроки = Новый Структура("ТаможеннаяСтоимость, СтавкаПошлины, СуммаПошлины, СтавкаАкциза, СуммаАкциза, СтавкаНДС, СуммаНДС, НомерСтроки");
	ЗаполнитьЗначенияСвойств(ДанныеСтроки, СтрокаРаздела);
	СтрокаРаздела.СуммаНДС = РассчитатьСуммуНДСГТД(ДанныеСтроки);

	РаспределитьИтоговыеСуммыПоРазделуСервер(Объект.Разделы.Индекс(СтрокаРаздела) + 1);

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ТоварыНоменклатураПриИзмененииСервер(СтрокаТабличнойЧасти, Знач ДанныеОбъекта, Знач ИмяТабличнойЧасти, Знач СтавкаНДС)
	
	Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.ДокументПартии) Тогда
		ДанныеОбъекта.Вставить("Склад", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаТабличнойЧасти.ДокументПартии, "Склад"));
	КонецЕсли;
	
	СведенияОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОНоменклатуре(
		СтрокаТабличнойЧасти.Номенклатура, ДанныеОбъекта);
	Если СведенияОНоменклатуре = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаТабличнойЧасти.ЕдиницаИзмерения    = СведенияОНоменклатуре.БазоваяЕдиницаИзмерения;
	СтрокаТабличнойЧасти.Коэффициент         = СведенияОНоменклатуре.Коэффициент;
	
	Документы.ГТДИмпорт.ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(
		ДанныеОбъекта, СтрокаТабличнойЧасти, ИмяТабличнойЧасти, СведенияОНоменклатуре, СтавкаНДС);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ТоварыЕдиницаИзмеренияПриИзмененииСервер(СтрокаТабличнойЧасти, Знач ИмяТабличнойЧасти)
	
	ОбработкаТабличныхЧастей.ЗаполнитьКоэффициентТабЧасти(СтрокаТабличнойЧасти, Неопределено, ИмяТабличнойЧасти, Метаданные.Документы.ГТДИмпорт);
		
КонецПроцедуры

&НаСервере
Процедура УдалитьТоварыРаздела(НомерРаздела)

	МассивСтрок = Объект.Товары.НайтиСтроки(Новый Структура("НомерРаздела", НомерРаздела));
	Для Каждого СтрокаРаздела Из МассивСтрок Цикл
		Объект.Товары.Удалить(СтрокаРаздела);
	КонецЦикла;
	
	МассивСтрок = Объект.Оборудование.НайтиСтроки(Новый Структура("НомерРаздела", НомерРаздела));
	Для Каждого СтрокаРаздела Из МассивСтрок Цикл
		Объект.Оборудование.Удалить(СтрокаРаздела);
	КонецЦикла;

	Если Объект.Разделы.Количество() > НомерРаздела Тогда
		ПересчитатьНомераРазделов(НомерРаздела);
	КонецЕсли;
	РассчитатьПропорциональныйНДС(Объект, ПлательщикНДС, КоэффициентПропорциональногоНДС);

КонецПроцедуры

&НаСервере
Процедура ПересчитатьНомераРазделов(НомерУдаленногоРаздела)

	Для каждого СтрокаТовары Из Объект.Товары Цикл
		Если СтрокаТовары.НомерРаздела > НомерУдаленногоРаздела Тогда
			СтрокаТовары.НомерРаздела = СтрокаТовары.НомерРаздела - 1;
		КонецЕсли;
	КонецЦикла;
	
	Для каждого СтрокаОборудование Из Объект.Оборудование Цикл
		Если СтрокаОборудование.НомерРаздела > НомерУдаленногоРаздела Тогда
			СтрокаОборудование.НомерРаздела = СтрокаОборудование.НомерРаздела - 1;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтатьиНалоговойДекларацииПоРазделу(НомерРаздела)
	
	СтрокаРаздела = Объект.Разделы.Получить(НомерРаздела - 1);
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	
	МассивСтрокТоваров = ДокументОбъект.Товары.НайтиСтроки(Новый Структура("НомерРаздела", НомерРаздела));
	Для Каждого СтрокаТовары Из МассивСтрокТоваров Цикл
		СтрокаТовары.СтатьяДекларацииНДСНалоговыйКредит = Документы.ГТДИмпорт.ПолучитьСтатьюНалоговойДекларации(
			СтрокаРаздела.СтавкаНДС, 
			СтрокаТовары.НалоговоеНазначение, 
			Объект.ОформленНалоговыйВексельПоНДС
		);
	КонецЦикла;
	
	МассивСтрокОборудование = ДокументОбъект.Оборудование.НайтиСтроки(Новый Структура("НомерРаздела", НомерРаздела));
	Для Каждого СтрокаОборудование Из МассивСтрокОборудование Цикл
		СтрокаОборудование.СтатьяДекларацииНДСНалоговыйКредит = Документы.ГТДИмпорт.ПолучитьСтатьюНалоговойДекларации(
			СтрокаРаздела.СтавкаНДС, 
			СтрокаОборудование.НалоговоеНазначение, 
			Объект.ОформленНалоговыйВексельПоНДС
		);
	КонецЦикла;
	
	ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РассчитатьПропорциональныйНДС(Объект, ПлательщикНДС, КоэффициентПропорциональногоНДС)

	МассивИменТабличныхЧастей = Новый Массив();
	МассивИменТабличныхЧастей.Добавить("Товары");
	МассивИменТабличныхЧастей.Добавить("Оборудование");
	
	УчетНДСКлиентСервер.РассчитатьПропорциональныйНДС(
		Объект,
		МассивИменТабличныхЧастей, 
		ПлательщикНДС,
		КоэффициентПропорциональногоНДС
	);
		
КонецПроцедуры

// Изменение счетов учета и их субконто

&НаКлиентеНаСервереБезКонтекста
Процедура НастроитьСубконтоПриПодготовкеФормыНаСервере(Форма, ИмяСчета);
	
	ИмяПоля = ОпределитьИмяСубконтоПоИмениСчета(ИмяСчета);	
	
	УстановитьЗаголовкиИДоступностьСубконто(Форма, ИмяСчета, ИмяПоля);
	УстановитьПараметрыВыбораСубконто(Форма, ИмяСчета, ИмяПоля);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура НастроитьСубконтоПриИзмененииСчета(Форма, ИмяСчета);
	
	ИмяПоля = ОпределитьИмяСубконтоПоИмениСчета(ИмяСчета);	
	
	УстановитьЗаголовкиИДоступностьСубконто(Форма, ИмяСчета, ИмяПоля);
	УстановитьЗначенияСубконтоПриИзмененииСчета(Форма, ИмяСчета, ИмяПоля);
	УстановитьПараметрыВыбораСубконто(Форма, ИмяСчета, ИмяПоля);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура НастроитьСубконтоПриИзмененииСубконто(Форма, ИмяСчета);
	
	ИмяПоля = ОпределитьИмяСубконтоПоИмениСчета(ИмяСчета);	

	УстановитьПараметрыВыбораСубконто(Форма, ИмяСчета, ИмяПоля);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьЗаголовкиИДоступностьСубконто(Форма, ИмяСчета, ИмяПоля)

	Объект = Форма.Объект;
	
	ПоляФормы = Новый Структура("Субконто1, Субконто2, Субконто3",
		ИмяПоля+"1",
		ИмяПоля+"2",
		ИмяПоля+"3");
	ЗаголовкиПолей = Новый Структура("Субконто1, Субконто2, Субконто3",
		"Заголовок"+ИмяПоля+"1",
		"Заголовок"+ИмяПоля+"2",
		"Заголовок"+ИмяПоля+"3");
	БухгалтерскийУчетКлиентСервер.ПриВыбореСчета(Объект[ИмяСчета], Форма, ПоляФормы, ЗаголовкиПолей);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьПараметрыВыбораСубконто(Форма, ИмяСчета, ИмяПоля)

	Объект = Форма.Объект;
	
	ПараметрыДокумента = ПолучитьСписокПараметров(Форма, ИмяПоля+"%Индекс%"); 
	БухгалтерскийУчетКлиентСервер.ИзменитьПараметрыВыбораПолейСубконто(
		Форма,
		Объект,
		ИмяПоля+"%Индекс%",
		ИмяПоля+"%Индекс%",
		ПараметрыДокумента);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьЗначенияСубконтоПриИзмененииСчета(Форма, ИмяСчета, ИмяПоля)

	Объект = Форма.Объект;
	
	ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3, Организация",
		ИмяПоля+"1",
		ИмяПоля+"2",
		ИмяПоля+"3",
		Объект.Организация);
	БухгалтерскийУчетКлиентСервер.ПриИзмененииСчета(Объект[ИмяСчета], Объект, ПоляОбъекта);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ОпределитьИмяСубконтоПоИмениСчета(ИмяСчета)
	
	Если ИмяСчета = "СчетУчетаАкциза" Тогда
		Возврат "АкцизСубконто"
	ИначеЕсли ИмяСчета = "СчетУчетаПошлины" Тогда
		Возврат "ПошлинаСубконто" 
	ИначеЕсли ИмяСчета = "СчетУчетаНДС" Тогда
		Возврат "НДССубконто"
	ИначеЕсли ИмяСчета = "СчетУчетаВексель" Тогда
		Возврат "ВексельСубконто"
	ИначеЕсли ИмяСчета = "СчетЗатрат" Тогда
		Возврат "ЗатратСубконто"
	КонецЕсли;
	
	ВызватьИсключение "Неверное обращение к функции ОпределитьИмяСубконтоПоИмениСчета";
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьСписокПараметров(Форма, ШаблонИмяПоляОбъекта)
	
	Объект = Форма.Объект;
	
	СписокПараметров = Новый Структура;
	Для Индекс = 1 По 3 Цикл
		ИмяПоля = СтрЗаменить(ШаблонИмяПоляОбъекта, "%Индекс%", Индекс);
		Если ТипЗнч(Объект[ИмяПоля]) = Тип("СправочникСсылка.Контрагенты") Тогда
			СписокПараметров.Вставить("Контрагент", Объект[ИмяПоля]);
		ИначеЕсли ТипЗнч(Объект[ИмяПоля]) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
			СписокПараметров.Вставить("ДоговорКонтрагента", Объект[ИмяПоля]);
		ИначеЕсли ТипЗнч(Объект[ИмяПоля]) = Тип("СправочникСсылка.Склады") Тогда
			СписокПараметров.Вставить("Склад", Объект[ИмяПоля]);
		КонецЕсли;
	КонецЦикла;
	СписокПараметров.Вставить("Организация", Объект.Организация);

	Возврат СписокПараметров;

КонецФункции

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ БСП

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ТоварыДокументПартииПриИзмененииНаСервере(СтрокаТабличнойЧасти) // ИНАГРО
		
	Если НЕ (ОбщегоНазначенияБП.ЕстьРеквизитДокумента("ИНАГРО_СкладВТЧ", СтрокаТабличнойЧасти.ДокументПартии.Метаданные())
		И СтрокаТабличнойЧасти.ДокументПартии.ИНАГРО_СкладВТЧ) Тогда
		СтрокаТабличнойЧасти.Склад = СтрокаТабличнойЧасти.ДокументПартии.Склад;
	КонецЕсли; 

КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

