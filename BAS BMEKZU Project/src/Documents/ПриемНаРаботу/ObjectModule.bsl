#Если Не ТолстыйКлиентУправляемоеПриложение Или Сервер Тогда

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

// Подсистема "Управление доступом"

// Процедура ЗаполнитьНаборыЗначенийДоступа по свойствам объекта заполняет наборы значений доступа
// в таблице с полями:
//    НомерНабора     - Число                                     (необязательно, если набор один),
//    ВидДоступа      - ПланВидовХарактеристикСсылка.ВидыДоступа, (обязательно),
//    ЗначениеДоступа - Неопределено, СправочникСсылка или др.    (обязательно),
//    Чтение          - Булево (необязательно, если набор для всех прав) устанавливается для одной строки набора,
//    Добавление      - Булево (необязательно, если набор для всех прав) устанавливается для одной строки набора,
//    Изменение       - Булево (необязательно, если набор для всех прав) устанавливается для одной строки набора,
//    Удаление        - Булево (необязательно, если набор для всех прав) устанавливается для одной строки набора,
//
//  Вызывается из процедуры УправлениеДоступомСлужебный.ЗаписатьНаборыЗначенийДоступа(),
// если объект зарегистрирован в "ПодпискаНаСобытие.ЗаписатьНаборыЗначенийДоступа" и
// из таких же процедур объектов, у которых наборы значений доступа зависят от наборов этого
// объекта (в этом случае объект зарегистрирован в "ПодпискаНаСобытие.ЗаписатьЗависимыеНаборыЗначенийДоступа").
//
// Параметры:
//  Таблица      - ТабличнаяЧасть,
//                 РегистрСведенийНаборЗаписей.НаборыЗначенийДоступа,
//                 ТаблицаЗначений, возвращаемая УправлениеДоступом.ТаблицаНаборыЗначенийДоступа().
//
Процедура ЗаполнитьНаборыЗначенийДоступа(Таблица) Экспорт
	
	ЗарплатаКадры.ЗаполнитьНаборыПоОрганизацииИФизическимЛицам(ЭтотОбъект, Таблица, "Организация", "ФизическоеЛицо");
	
КонецПроцедуры

// Подсистема "Управление доступом"

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	ДанныеДляПроведения = ПолучитьДанныеДляПроведения();
	
	КадровыйУчет.СформироватьКадровыеДвижения(ЭтотОбъект, Движения, ДанныеДляПроведения.КадровыеДвижения);
	
	СтруктураПлановыхНачислений = Новый Структура;
	СтруктураПлановыхНачислений.Вставить("ДанныеОПлановыхНачислениях", ДанныеДляПроведения.ПлановыеНачисления);
	
	РасчетЗарплаты.СформироватьДвиженияПлановыхНачислений(ЭтотОбъект, Движения, СтруктураПлановыхНачислений);
	
	СтруктураПлановыхУдержаний = Новый Структура;
	СтруктураПлановыхУдержаний.Вставить("ДанныеОПлановыхУдержаниях", ДанныеДляПроведения.ПлановыеУдержания);
	
	РасчетЗарплаты.СформироватьДвиженияПлановыхУдержаний(ЭтотОбъект, Движения, СтруктураПлановыхУдержаний);
	
	СтруктураЕСВСотрудников = Новый Структура;
	СтруктураЕСВСотрудников.Вставить("ДанныеОЕСВСотрудников", ДанныеДляПроведения.ЕСВСотрудников);
	
	РасчетЗарплаты.СформироватьДвиженияЕСВСотрудников(ЭтотОбъект, Движения, СтруктураЕСВСотрудников);

	
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	ДатаПриема = ТекущаяДатаСеанса();
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("СправочникСсылка.Сотрудники") Тогда
		ЗарплатаКадры.ЗаполнитьПоОснованиюСотрудником(ЭтотОбъект, ДанныеЗаполнения, Истина, Ложь)
	КонецЕсли;
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
		
		Если ДанныеЗаполнения.Свойство("Сотрудник") Тогда
			Сотрудник = ДанныеЗаполнения.Сотрудник;
		КонецЕсли;
		
		Если ДанныеЗаполнения.Свойство("ДатаПриема") Тогда
			ДатаПриема = ДанныеЗаполнения.ДатаПриема;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	КадровыйУчет.ПроверитьВозможностьПроведенияПоКадровомуУчету(
		ЭтотОбъект.ДатаПриема,
		ЭтотОбъект.Сотрудник,
		ЭтотОбъект.Ссылка,
		Отказ,
		Перечисления.ВидыКадровыхСобытий.Прием);
		
	КадровыйУчет.ПроверитьСоответствиеСотрудниковОрганизации(ЭтотОбъект.Организация, ЭтотОбъект.Сотрудник, Отказ);
	
	СообщениеПроверкиВидЗанятости = СотрудникиФормы.СообщениеОКонфликтеВидаЗанятостиНовогоСотрудникаССуществующими(
		Сотрудник,
		ФизическоеЛицо,
		Организация,
		ВидЗанятости,
		ДатаПриема);
		
	Если Не ПустаяСтрока(СообщениеПроверкиВидЗанятости) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СообщениеПроверкиВидЗанятости, , "ВидЗанятости", "Объект", Отказ);
	КонецЕсли;
		
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Получает данные для формирования движений
// Возвращает Структуру с полями
//		КадровыеДвижения - данные, необходимые для формирования 
//				- кадровой истории (см. КадровыйУчетРасширенный.СформироватьКадровыеДвижения)
//				- авансов (см. РасчетЗарплатыРасширенный.СформироватьДвиженияПлановыхВыплат)
//				- истрии применяемых графиков работы (см. КадровыйУчетРасширенный.СформироватьИсториюИзмененияГрафиков)
//		ПлановыеНачисления - данные, необходимые для формирования истрии плановых начислений 
//		(см. РасчетЗарплатыРасширенный.СформироватьДвиженияПлановыхНачислений)
//		ЗначенияПоказателей (см. там же)
//
Функция ПолучитьДанныеДляПроведения()
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПриемНаРаботу.ДатаПриема КАК ДатаСобытия,
	|	ПриемНаРаботу.Сотрудник КАК Сотрудник,
	|	ПриемНаРаботу.Сотрудник.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
	|	ПриемНаРаботу.Организация КАК Организация,
	|	ПриемНаРаботу.Подразделение КАК Подразделение,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Прием) КАК ВидСобытия,
	|	ПриемНаРаботу.Должность КАК Должность,
	|	ПриемНаРаботу.ВидЗанятости КАК ВидЗанятости,
	|	ПриемНаРаботу.ФизическоеЛицо,
	|	ПриемНаРаботу.ПринятНаНовоеРабочееМесто КАК ПринятНаНовоеРабочееМесто,
	|	ПриемНаРаботу.ДатаСозданияРабочегоМеста КАК ДатаСозданияРабочегоМеста
	|ИЗ
	|	Документ.ПриемНаРаботу КАК ПриемНаРаботу
	|ГДЕ
	|	ПриемНаРаботу.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПриемНаРаботуНачисления.Ссылка.ДатаПриема КАК ДатаСобытия,
	|	ПриемНаРаботуНачисления.Ссылка.Сотрудник КАК Сотрудник,
	|	ПриемНаРаботуНачисления.Ссылка.Организация КАК Организация,
	|	ПриемНаРаботуНачисления.Начисление,
	|	ПриемНаРаботуНачисления.Начисление.КатегорияНачисленияИлиНеоплаченногоВремени КАК КатегорияНачисления,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Прием) КАК ВидСобытия,
	|   ВЫБОР 
	|	КОГДА ПриемНаРаботуНачисления.Размер = 0
	|	 ТОГДА 1
	|	 ИНАЧЕ ПриемНаРаботуНачисления.Размер
	|	КОНЕЦ КАК Размер,
	|	ПриемНаРаботуНачисления.Ссылка.ФизическоеЛицо,
	|	ПриемНаРаботуНачисления.Ссылка.ВидЗанятости КАК ВидЗанятости
	|ИЗ
	|	Документ.ПриемНаРаботу.Начисления КАК ПриемНаРаботуНачисления
	|ГДЕ
	|	ПриемНаРаботуНачисления.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПриемНаРаботуУдержания.Ссылка.ДатаПриема КАК ДатаСобытия,
	|	ПриемНаРаботуУдержания.Ссылка.Сотрудник КАК Сотрудник,
	|	ПриемНаРаботуУдержания.Удержание,
	|	ПриемНаРаботуУдержания.Контрагент,
	|	ПриемНаРаботуУдержания.Размер,
	|	ПриемНаРаботуУдержания.Ссылка.ФизическоеЛицо
	|ИЗ
	|	Документ.ПриемНаРаботу.Удержания КАК ПриемНаРаботуУдержания
	|ГДЕ
	|	ПриемНаРаботуУдержания.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПриемНаРаботу.ДатаПриема КАК ДатаСобытия,
	|	ПриемНаРаботу.Сотрудник КАК Сотрудник,
	|	ПриемНаРаботу.Организация КАК Организация,
	|	ПриемНаРаботу.КатегорияЕСВ КАК КатегорияЕСВ,
	|	ПриемНаРаботу.ФизическоеЛицо
	|ИЗ
	|	Документ.ПриемНаРаботу КАК ПриемНаРаботу
	|ГДЕ
	|	ПриемНаРаботу.Ссылка = &Ссылка
	|   И ПриемНаРаботу.КатегорияЕСВ <> ЗНАЧЕНИЕ(Справочник.КатегорииЗастрахованныхЛицЕСВ.ПустаяСсылка)";
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	ДанныеДляПроведения = Новый Структура;
		
	// Первый набор данных для проведения - таблица для формирования кадровых движений, истрии графиков, авансов
	ДанныеДляПроведения.Вставить("КадровыеДвижения", РезультатыЗапроса[0].Выгрузить());
	
	// Второй набор данных для проведения - таблица для формирования плановых начислений
	ДанныеДляПроведения.Вставить("ПлановыеНачисления", РезультатыЗапроса[1].Выгрузить());
	
	// Третий набор данных для проведения - таблица для формирования плановых удержаний
	ДанныеДляПроведения.Вставить("ПлановыеУдержания", РезультатыЗапроса[2].Выгрузить());
	
	// Четвертый набор данных для проведения - таблица для формирования ЕСВ
	ДанныеДляПроведения.Вставить("ЕСВСотрудников", РезультатыЗапроса[3].Выгрузить());
	
	Возврат ДанныеДляПроведения;
	
КонецФункции

#КонецЕсли