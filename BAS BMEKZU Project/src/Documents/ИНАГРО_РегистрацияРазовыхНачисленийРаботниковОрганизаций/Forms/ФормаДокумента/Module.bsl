#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
					
	// СтандартныеПодсистемы.Печать
	УправлениеПечатью.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Печать

	// ДополнительныеОтчетыИОбработки
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец ДополнительныеОтчетыИОбработки
	
	Если Параметры.Ключ.Пустая() Тогда
		
		ЗначенияДляЗаполнения = Новый Структура("Месяц, Организация, Ответственный", 
		"Объект.ПериодРегистрации",
		"Объект.Организация",
		"Объект.Ответственный");
		
		ЗарплатаКадры.ЗаполнитьПервоначальныеЗначенияВФорме(ЭтаФорма, ЗначенияДляЗаполнения);
		
		//УстановитьФункциональныеОпцииФормы();
		
		ЗарплатаКадрыКлиентСервер.ЗаполнитьМесяцПоДате(ЭтаФорма, "Объект.ПериодРегистрации", "МесяцСтрока");
		
		УстановитьВидимостьКолонок(ЭтаФорма);
		
	КонецЕсли;
	
	// Уведомим о появлении функционала рабочей даты
	НастройкиПредупреждений = ОбщегоНазначенияБП.НастройкиПредупрежденийОбИзменениях("РабочаяДатаИзДокумента");
	
	//УстановитьОтображениеПредупрежденийПриИзмененииКлючевыхРеквизитов();
	
	// Показываем, если это новый документ и сама рабочая дата еще не установлена.
	НастройкиПредупреждений.РабочаяДатаИзДокумента = НастройкиПредупреждений.РабочаяДатаИзДокумента
		И Параметры.Ключ.Пустая()
		И НЕ ЗначениеЗаполнено(БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("РабочаяДата"));
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов 	

КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	
	ЗарплатаКадрыКлиентСервер.ЗаполнитьМесяцПоДате(ЭтаФорма, "Объект.ПериодРегистрации", "МесяцСтрока");
	
	//УстановитьОтображениеПредупрежденийПриИзмененииКлючевыхРеквизитов();
	
	ПодготовитьФормуНаСервере();

КонецПроцедуры

&НаСервере
Процедура ПодготовитьФормуНаСервере()
	
	ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	
	//УправлениеФормой(ЭтаФорма);
	
	УправлениеВидимостьюПоказателей();
	УстановитьВидимостьКолонок(ЭтаФорма);
	//ЗаполнитьДобавленныеКолонкиТаблицФормы();
	
	УстановитьСостояниеДокумента();

КонецПроцедуры

&НаСервере
Процедура УстановитьСостояниеДокумента()
	
	СостояниеДокумента = ОбщегоНазначенияБП.СостояниеДокумента(Объект);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	УстановитьСостояниеДокумента();
	
	УправлениеВидимостьюПоказателей();
	
	//ЗаполнитьДобавленныеКолонкиТаблиц("НачисленияПроводки");
		
	//УправлениеФормой(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	//РассчитатьИтогиПоДокументу();
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ГрупповоеЗаполнение" И ТипЗнч(Параметр) = Тип("Структура") 
		И Параметр.Свойство("ИдентификаторВызывающейФормы")
		И Параметр.ИдентификаторВызывающейФормы = УникальныйИдентификатор Тогда
		
		ВыполнитьГрупповоеЗаполнение(Параметр);
		Модифицированность = Истина;
		
	КонецЕсли;

	ОбщегоНазначенияБПКлиент.ОбработкаОповещенияФормыДокумента(ЭтаФорма, Объект.Ссылка, ИмяСобытия, Параметр, Источник);
	//УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьГрупповоеЗаполнение(Параметр)
	
	ТаблицаСотрудников = ПолучитьИзВременногоХранилища(Параметр.АдресТЗ);
	
	Для Каждого Строка Из ТаблицаСотрудников Цикл
		Если Не Строка.ВидЗанятости = Перечисления.ВидыЗанятости.ВнутреннееСовместительство Тогда
			ТекСтрока = Объект.Начисления.Добавить();
			ТекСтрока.Сотрудник = Строка.Сотрудник;
			ЗаполнитьЗначенияСвойств(ТекСтрока, Параметр);
			СведенияОВидеРасчета = ПолучитьСведенияОВидеРасчета(ТекСтрока.ВидРасчета);
			ЕстьПоказатели = Ложь;
			Для СчПоказателей = 1 По 6 Цикл
				ТекСтрока["Показатель" + СчПоказателей + "Видимость"] = Ложь;
				ТекСтрока["Показатель" + СчПоказателей] = 0;
				Если СчПоказателей <= СведенияОВидеРасчета["КоличествоПоказателей"] Тогда
					Если СведенияОВидеРасчета["Показатель" + СчПоказателей + "Видимость"] Тогда
						ТекСтрока.ЕстьПоказатели = Истина;
						ТекСтрока["Показатель" + СчПоказателей + "Видимость"] = Истина;
						ТекСтрока["ИмяПоказатель" + СчПоказателей] = СведенияОВидеРасчета["Показатель" + СчПоказателей + "Наименование"];
					Иначе
						ТекСтрока["Показатель" + СчПоказателей + "Видимость"] = Ложь;
					КонецЕсли;
				КонецЕсли;
				
			КонецЦикла;
			Для СчПоказателей = 1 По 6 Цикл
				Если ТекСтрока["Показатель" + СчПоказателей + "Видимость"] = Истина Тогда
					ТекСтрока["Показатель" + СчПоказателей] = Параметр.Показатель1;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			//ТекСтрока.ДатаНачала = Макс(ТекСтрока.ДатаНачала,ТекСтрока.ДатаПриема)
			ДанныеСтрокиСтруктура = Новый Структура("ФизЛицо, ПодразделениеОрганизации, ГрафикРаботы, НормаДнейЗаМесяц, НормаЧасовЗаМесяц");
			ЗаполнитьДанныеСтрокиНаСервере(ТекСтрока.Сотрудник, ТекСтрока.ДатаОкончания, ДанныеСтрокиСтруктура);
			ЗаполнитьЗначенияСвойств(ТекСтрока, ДанныеСтрокиСтруктура);
			мВидРасчетаСпособОтраженияВБухучете = Неопределено;
			ЗаполнитьСпособОтраженияНаСервере(мВидРасчетаСпособОтраженияВБухучете, ТекСтрока.ДатаОкончания, ТекСтрока.Сотрудник, ТекСтрока.ВидРасчета, 1);
			ТекСтрока.СпособОтраженияВБухучете = мВидРасчетаСпособОтраженияВБухучете;
			ТекСтрока.Авторасчет	= Истина;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

#КонецОбласти 


#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура МесяцСтрокаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Оповещение = Новый ОписаниеОповещения("МесяцНачисленияСтрокойНачалоВыбораЗавершение", ЭтотОбъект);
	ИНАГРО_ЗарплатаКадрыРасширенныйКлиент.ВводМесяцаНачалоВыбора(ЭтаФорма, ЭтаФорма, "Объект.ПериодРегистрации", "МесяцСтрока", , Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура МесяцСтрокаРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	ИНАГРО_ЗарплатаКадрыРасширенныйКлиент.ВводМесяцаРегулирование(ЭтаФорма, "Объект.ПериодРегистрации", "МесяцСтрока", Направление, Модифицированность);
	ПриИзмененииМесяцаНачисления();
	
КонецПроцедуры

&НаКлиенте
Процедура МесяцСтрокаАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	ИНАГРО_ЗарплатаКадрыРасширенныйКлиент.ВводМесяцаАвтоПодборТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура МесяцСтрокаОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	ИНАГРО_ЗарплатаКадрыРасширенныйКлиент.ВводМесяцаОкончаниеВводаТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура МесяцНачисленияСтрокойНачалоВыбораЗавершение(ЗначениеВыбрано, ДополнительныеПараметры) Экспорт
	
	ПриИзмененииМесяцаНачисления();
	
КонецПроцедуры

&НаСервере
Процедура МесяцСтрокаПриИзмененииНаСервере()
	//ОчиститьТабличныеЧасти(Ложь);
КонецПроцедуры

&НаКлиенте
Процедура МесяцСтрокаПриИзменении()
	МесяцСтрокаПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииМесяцаНачисления()
	
	ИНАГРО_ЗарплатаКадрыРасширенныйКлиент.ВводМесяцаПриИзменении(ЭтаФорма, "Объект.ПериодРегистрации", "МесяцСтрока", Модифицированность);
	МесяцСтрокаПриИзменении();
	
КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()
	//ОчиститьТабличныеЧасти();
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	ОрганизацияПриИзмененииНаСервере();
КонецПроцедуры

#КонецОбласти 


#Область ОбработчикиСобытийТаблицыФормыНачисления

&НаКлиенте
Процедура НачисленияВидРасчетаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Начисления.ТекущиеДанные;
	
	УстановитьВидимостьПоказателей(ТекущиеДанные);
	
	Для СчПоказателей = 1 По 6 Цикл
		ТекущиеДанные["Показатель" + СчПоказателей] = 0;
	КонецЦикла;  ;
	мВидРасчетаСпособОтраженияВБухучете = Неопределено;
	ДатаСобытия = ?(ЗначениеЗаполнено(ТекущиеДанные.ДатаОкончания), ТекущиеДанные.ДатаОкончания, Объект.Дата);
	ЧислоМесяцев = 1;
	ЗаполнитьСпособОтраженияНаСервере(мВидРасчетаСпособОтраженияВБухучете, ДатаСобытия, ТекущиеДанные.Сотрудник, ТекущиеДанные.ВидРасчета, ЧислоМесяцев);
	ТекущиеДанные.СпособОтраженияВБухучете = мВидРасчетаСпособОтраженияВБухучете;
	Если ЗначениеЗаполнено(ТекущиеДанные.ДатаНачала) И ЗначениеЗаполнено(ТекущиеДанные.ДатаОкончания) Тогда
		ТекущиеДанные.БазовыйПериодНачало = ДобавитьМесяц(НачалоМесяца(ТекущиеДанные.ДатаНачала), -ЧислоМесяцев);
		ТекущиеДанные.БазовыйПериодКонец = КонецМесяца(ДобавитьМесяц(НачалоМесяца(ТекущиеДанные.ДатаНачала), -Мин(ЧислоМесяцев, 1)));
	КонецЕсли;
	                                                                                                         
КонецПроцедуры

&НаСервере
Процедура  ЗаполнитьСпособОтраженияНаСервере(мВидРасчетаСпособОтраженияВБухучете, ДатаСобытия, Сотрудник, ВидРасчета, ЧислоМесяцев)
	НачисленияВыборка = ИНАГРО_ПроведениеРасчетов.ЗапросСпособОтражения(ДатаСобытия, ВидРасчета, Сотрудник, Объект.Организация ).Выбрать();
	Если НачисленияВыборка.Следующий() Тогда
		// мвверху основное начисление
		мВидРасчетаСпособОтраженияВБухучете = НачисленияВыборка.СпособОтраженияВБухучете;
	КонецЕсли;
	ЧислоМесяцев = ВидРасчета.ЧислоМесяцев;
КонецПроцедуры	

&НаКлиенте
Процедура ПоказатьБазовыйПериодПриИзменении(Элемент)
	
	УстановитьВидимостьКолонок(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьПериодДействияПриИзменении(Элемент)
	
	УстановитьВидимостьКолонок(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьОтработанноеВремяПриИзменении(Элемент)
	
	УстановитьВидимостьКолонок(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьГрафикРаботыПриИзменении(Элемент)
	
	УстановитьВидимостьКолонок(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьНормуВремениПриИзменении(Элемент)
	
	УстановитьВидимостьКолонок(ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти 

&НаСервере
Процедура УстановитьВидимостьПоказателейНаСервере(ТекСтрока)
	
	СведенияОВидеРасчета = ПолучитьСведенияОВидеРасчета(ТекСтрока.ВидРасчета);
	ЕстьПоказатели = Ложь;
	Для СчПоказателей = 1 По 6 Цикл
		ТекСтрока["Показатель" + СчПоказателей + "Видимость"] = Ложь;
		Если СчПоказателей <= СведенияОВидеРасчета["КоличествоПоказателей"] Тогда
			Если СведенияОВидеРасчета["Показатель" + СчПоказателей + "Видимость"] Тогда
				ТекСтрока.ЕстьПоказатели = Истина;
				ТекСтрока["Показатель" + СчПоказателей + "Видимость"] = Истина;
				ТекСтрока["ИмяПоказатель" + СчПоказателей] = СведенияОВидеРасчета["Показатель" + СчПоказателей + "Наименование"];
			Иначе
				ТекСтрока["Показатель" + СчПоказателей + "Видимость"] = Ложь;

			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
		
КонецПроцедуры


&НаКлиенте
Процедура УстановитьВидимостьПоказателей(ТекСтрока)
	
	СведенияОВидеРасчета = ПолучитьСведенияОВидеРасчета(ТекСтрока.ВидРасчета);
	ЕстьПоказатели = Ложь;
	Для СчПоказателей = 1 По 6 Цикл
		ТекСтрока["Показатель" + СчПоказателей + "Видимость"] = Ложь;
		Если СчПоказателей <= СведенияОВидеРасчета["КоличествоПоказателей"] Тогда
			Если СведенияОВидеРасчета["Показатель" + СчПоказателей + "Видимость"] Тогда
				ТекСтрока.ЕстьПоказатели = Истина;
				ТекСтрока["Показатель" + СчПоказателей + "Видимость"] = Истина;
				ТекСтрока["ИмяПоказатель" + СчПоказателей] = СведенияОВидеРасчета["Показатель" + СчПоказателей + "Наименование"];
			Иначе
				ТекСтрока["Показатель" + СчПоказателей + "Видимость"] = Ложь;

			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
		
КонецПроцедуры

&НаСервере
Процедура УправлениеВидимостьюПоказателей()
	
	Для Каждого ТекСтрока Из Объект.Начисления Цикл
		УстановитьВидимостьПоказателейНаСервере(ТекСтрока);
	КонецЦикла;
	
	//Для Каждого ТекСтрока Из Объект.Удержания Цикл
	//	УстановитьВидимостьПоказателейНаСервере(ТекСтрока);
	//КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСведенияОВидеРасчета(ВидРасчета)
	
	Возврат ИНАГРО_ЗарплатаКадрыРасширенныйПовтИсп.ПолучитьСведенияОВидеРасчетаСхемыМотивации(ВидРасчета);
	
КонецФункции

&НаКлиенте
Процедура НачисленияПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока И Не Копирование Тогда
		Элемент.ТекущиеДанные.Авторасчет = Истина;
		
		ТекущаяСтрока = Элементы.Начисления.ТекущиеДанные;
		ТекущаяСтрока.ДатаНачала			= НачалоМесяца(Объект.ПериодРегистрации);
		ТекущаяСтрока.ДатаОкончания			= КонецМесяца(Объект.ПериодРегистрации);
		ТекущаяСтрока.БазовыйПериодНачало	= НачалоМесяца(Объект.ПериодРегистрации);
		ТекущаяСтрока.БазовыйПериодКонец	= КонецМесяца(Объект.ПериодРегистрации);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура НачисленияДатаНачалаПриИзменении(Элемент)
	ТекущаяСтрока = Элементы.Начисления.ТекущиеДанные;
		
	Если НЕ ЗначениеЗаполнено(ТекущаяСтрока.ДатаНачала) Тогда
		ТекущаяСтрока.ДатаНачала = Объект.ПериодРегистрации;
		ТекущаяСтрока.ДатаОкончания	= КонецМесяца(Объект.ПериодРегистрации);
	Иначе
		ТекущаяСтрока.ДатаОкончания			= Макс(КонецМесяца(ТекущаяСтрока.ДатаНачала), Мин(КонецМесяца(ТекущаяСтрока.ДатаНачала), ТекущаяСтрока.ДатаОкончания));
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ТекущаяСтрока.БазовыйПериодНачало) 
		ИЛИ НЕ ЗначениеЗаполнено(ТекущаяСтрока.БазовыйПериодКонец)
		Тогда
		ТекущаяСтрока.БазовыйПериодНачало	= ТекущаяСтрока.ДатаНачала;
		ТекущаяСтрока.БазовыйПериодКонец	= ТекущаяСтрока.ДатаОкончания;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура НачисленияДатаОкончанияПриИзменении(Элемент)
	ТекущаяСтрока = Элементы.Начисления.ТекущиеДанные;
	Если НЕ ЗначениеЗаполнено(ТекущаяСтрока.ДатаОкончания) Тогда
		ТекущаяСтрока.ДатаНачала = Объект.ПериодРегистрации;
		ТекущаяСтрока.ДатаОкончания	= КонецМесяца(Объект.ПериодРегистрации);
	Иначе
		ТекущаяСтрока.ДатаНачала			= Мин(ТекущаяСтрока.ДатаНачала, ТекущаяСтрока.ДатаОкончания);
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ТекущаяСтрока.БазовыйПериодНачало) 
		ИЛИ НЕ ЗначениеЗаполнено(ТекущаяСтрока.БазовыйПериодКонец)
		Тогда
		ТекущаяСтрока.БазовыйПериодНачало	= ТекущаяСтрока.ДатаНачала;
		ТекущаяСтрока.БазовыйПериодКонец	= ТекущаяСтрока.ДатаОкончания;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура НачисленияБазовыйПериодНачалоПриИзменении(Элемент)
	ТекущаяСтрока = Элементы.Начисления.ТекущиеДанные;
	Если НЕ ЗначениеЗаполнено(ТекущаяСтрока.БазовыйПериодНачало) Тогда
		ТекущаяСтрока.БазовыйПериодНачало = ТекущаяСтрока.ДатаНачала;
		ТекущаяСтрока.БазовыйПериодКонец	= ТекущаяСтрока.ДатаОкончания;
	Иначе
		ТекущаяСтрока.БазовыйПериодКонец	= Макс(ТекущаяСтрока.БазовыйПериодНачало, ТекущаяСтрока.БазовыйПериодКонец);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура НачисленияБазовыйПериодКонецПриИзменении(Элемент)
	ТекущаяСтрока = Элементы.Начисления.ТекущиеДанные;
	Если НЕ ЗначениеЗаполнено(ТекущаяСтрока.БазовыйПериодКонец) Тогда
		ТекущаяСтрока.БазовыйПериодНачало = ТекущаяСтрока.ДатаНачала;
		ТекущаяСтрока.БазовыйПериодКонец = ТекущаяСтрока.ДатаОкончания;
	Иначе
		ТекущаяСтрока.БазовыйПериодНачало	= Мин(ТекущаяСтрока.БазовыйПериодНачало, ТекущаяСтрока.БазовыйПериодКонец);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура НачисленияСотрудникПриИзменении(Элемент)
	ДанныеСтроки = Элементы.Начисления.ТекущиеДанные;
	ДатаСобытия = ?(ЗначениеЗаполнено(ДанныеСтроки.ДатаОкончания), ДанныеСтроки.ДатаОкончания, Объект.Дата);
	
	//ОснНазначение = ?(ЗначениеЗаполнено(ДанныеСтроки.Сотрудник.ОсновноеНазначение), ДанныеСтроки.Сотрудник.ОсновноеНазначение, ДанныеСтроки.Сотрудник);
	ДанныеСтрокиСтруктура = Новый Структура("ФизЛицо, ПодразделениеОрганизации, ГрафикРаботы, НормаДнейЗаМесяц, НормаЧасовЗаМесяц");
	ЗаполнитьДанныеСтрокиНаСервере(ДанныеСтроки.Сотрудник, ДатаСобытия, ДанныеСтрокиСтруктура);
	ЗаполнитьЗначенияСвойств(ДанныеСтроки, ДанныеСтрокиСтруктура);
	//ИнАгро_ПроведениеРасчетов.ПроставитьДанныеСтроки(ОснНазначение,  ДанныеСтроки.Сотрудник, ДанныеСтроки.ДатаНачала, Объект.Ссылка, ДанныеСтроки);
	//Если ЗначениеЗаполнено(ДанныеСтроки.Сотрудник) Тогда
	//	ДанныеСтроки.ДатаНачала = Макс(ДанныеСтроки.ДатаНачала,ДанныеСтроки.Сотрудник.ДатаПриемаНаРаботу);	
	//КонецЕсли;	
	//ДанныеСтроки.ФизЛицо = ДанныеСтроки.Сотрудник.ФизЛицо;
	ДанныеСтроки.Авторасчет	= Истина;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеСтрокиНаСервере(Сотрудник, ДатаСобытия, ДанныеСтрокиСтруктура)
	ОснНазначение = ?(ЗначениеЗаполнено(Сотрудник.ОсновноеНазначение), Сотрудник.ОсновноеНазначение, Сотрудник);
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РаботникиОрганизации.Сотрудник,
	|	РаботникиОрганизации.Сотрудник.ФизическоеЛицо КАК ФизЛицо,
	|	РаботникиОрганизации.ПодразделениеОрганизации,
	|	РаботникиОрганизации.ГрафикРаботы,
	|	ДанныеКалендаря.НормаДнейЗаМесяц,
	|	ДанныеКалендаря.НормаЧасовЗаМесяц
	|ИЗ
	|	РегистрСведений.ИНАГРО_РаботникиОрганизаций.СрезПоследних(&парамДатаСобытия, Сотрудник = &парамНазначение) КАК РаботникиОрганизации
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ГрафикиРаботы.ГрафикРаботы КАК ГрафикРаботы,
	|			СУММА(ГрафикиРаботы.ОсновноеЗначение) КАК НормаДнейЗаМесяц,
	|			СУММА(ГрафикиРаботы.ДополнительноеЗначение) КАК НормаЧасовЗаМесяц
	|		ИЗ
	|			РегистрСведений.ИНАГРО_ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботы
	|		ГДЕ
	|			НАЧАЛОПЕРИОДА(ГрафикиРаботы.Дата, МЕСЯЦ) = НАЧАЛОПЕРИОДА(&парамДатаСобытия, МЕСЯЦ)
	|			И ГрафикиРаботы.ВидУчетаВремени = ЗНАЧЕНИЕ(Перечисление.ИНАГРО_ВидыУчетаВремени.ПоДням)
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ГрафикиРаботы.ГрафикРаботы) КАК ДанныеКалендаря
	|		ПО (ДанныеКалендаря.ГрафикРаботы = ВЫБОР
	|				КОГДА РаботникиОрганизации.ГрафикРаботы.УчетНормыВремениПоОтдельномуГрафику
	|					ТОГДА РаботникиОрганизации.ГрафикРаботы.ГрафикРаботыНормыВремени
	|				ИНАЧЕ РаботникиОрганизации.ГрафикРаботы
	|			КОНЕЦ)";
	Запрос.УстановитьПараметр("парамНазначение", Сотрудник);
	Запрос.УстановитьПараметр("парамДатаСобытия", ДатаСобытия);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(ДанныеСтрокиСтруктура, Выборка);
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура РаботникиОрганизацииЗаполнить(Команда)
	
	Если Объект.Начисления.Количество()>0 Тогда
		
		ТекстВопроса =НСтр("ru='Перед заполнением табличная часть ""Начисления"" будет очищена. Продолжить?';uk='Перед заповненням таблична частина ""Нарахування"" буде очищена. Продовжити?'");
		Обработчик = Новый ОписаниеОповещения("АвтозаполнениеРаботникиПослеОтветаНаВопрос", ЭтотОбъект);
		ПоказатьВопрос(Обработчик, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
		Возврат;
	КонецЕсли;
	
	ИНАГРО_ЗарплатаКадрыРасширенныйКлиент.ОткрытьФормуОтбораСпискаРаботников(ЭтаФорма, Истина, , , Истина, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура АвтозаполнениеРаботникиПослеОтветаНаВопрос(Ответ, ПараметрыВыполнения) Экспорт
	Если Ответ <> КодВозвратаДиалога.ОК Тогда
		Возврат;
	КонецЕсли;
	Объект.Начисления.Очистить();
	ИНАГРО_ЗарплатаКадрыРасширенныйКлиент.ОткрытьФормуОтбораСпискаРаботников(ЭтаФорма, Истина, , , Истина, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	//Вставить содержимое обработчика
КонецПроцедуры

&НаКлиенте
Процедура НачисленияРассчитать(Команда)
	
	СписокСотрудников = Новый СписокЗначений;
	
	Для Каждого Строка Из Объект.Начисления Цикл
		СписокСотрудников.Добавить(Строка.Сотрудник);
	КонецЦикла;
	
	СтруктураЗаполнения = Новый Структура;
	//СтруктураЗаполнения.Вставить("ТолькоПроводки", Ложь);
	СтруктураЗаполнения.Вставить("СписокСотрудников", СписокСотрудников);
	
	Если Объект.Проведен Тогда 
		ТекстВопроса =НСтр("ru='Автоматически заполнить табличную часть можно только после отмены его проведения. Выполнить отмену проведения документа?';uk='Автоматично заповнити табличну частину можна тільки після скасування його проведення. Виконати скасування проведення документа?'");
		Обработчик = Новый ОписаниеОповещения("АвторассчетНачисленияПослеОтветаНаВопросЗаписать", ЭтотОбъект, СтруктураЗаполнения);
		ПоказатьВопрос(Обработчик, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
		Возврат;
	ИначеЕсли Объект.Ссылка = ПредопределенноеЗначение("Документ.ИНАГРО_НачислениеЗарплатыРаботникамОрганизаций.ПустаяСсылка") Тогда
		ТекстВопроса =НСтр("ru='Автоматически заполнить табличную часть можно только после его записи. Выполнить запись документа?';uk='Автоматично заповнити табличну частину можна тільки після його запису. Виконати запис документа?'");
		Обработчик = Новый ОписаниеОповещения("АвторассчетНачисленияПослеОтветаНаВопросЗаписать", ЭтотОбъект, СтруктураЗаполнения);
		ПоказатьВопрос(Обработчик, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
		Возврат;
	КонецЕсли;
	
  	ИНАГРО_ПроведениеРасчетовКлиент.УдалитьСтрокиСторноПоУсловию(Объект.Начисления, СписокСотрудников); 
	//ИНАГРО_ПроведениеРасчетовКлиент.УдалитьСтрокиПоУсловию(Объект.НачисленияПроводки, СписокСотрудников ); 
	Записать();
	
	НачисленияРассчитатьНаСервере(СписокСотрудников);
	
КонецПроцедуры

&НаСервере
Процедура НачисленияРассчитатьНаСервере(СписокСотрудников)
	
	Документ = РеквизитФормыВЗначение("Объект");
	Документ.Записать(РежимЗаписиДокумента.ОтменаПроведения);
  	Документ.РассчитатьНачисления(СписокСотрудников);
	////Если НЕ Объект.ПредварительныйРасчет Тогда
	////	Документ.РассчитатьНачисленияПроводки(СписокСотрудников);
	////КонецЕсли;

  	ЗначениеВРеквизитФормы(Документ, "Объект");	
	УправлениеВидимостьюПоказателей();
	УстановитьВидимостьКолонок(ЭтаФорма);
	//ЗаполнитьДобавленныеКолонкиТаблиц("НачисленияПроводки");	
	
	ИНАГРО_ЗарплатаКадрыРасширенныйКлиентСервер.ИтогиТабличнойЧасти(ЭтаФорма, Объект, "Начисления", "ВидРасчета", "Результат", "ИтогиНачислено");
	
КонецПроцедуры

&НаКлиенте
Процедура АвторассчетНачисленияПослеОтветаНаВопросЗаписать(Ответ, ПараметрыВыполнения) Экспорт
	
	Если Ответ <> КодВозвратаДиалога.ОК Тогда
		Возврат;
	КонецЕсли;
	
	
	 	ИНАГРО_ПроведениеРасчетовКлиент.УдалитьСтрокиСторноПоУсловию(Объект.Начисления, ПараметрыВыполнения.СписокСотрудников); 
		//ИНАГРО_ПроведениеРасчетовКлиент.УдалитьСтрокиПоУсловию(Объект.НачисленияПроводки, ПараметрыВыполнения.СписокСотрудников ); 
		Записать();
		
		НачисленияРассчитатьНаСервере(ПараметрыВыполнения.СписокСотрудников);
	Модифицированность = Истина;
		
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьВидимостьКолонок(Форма)

	Элементы = Форма.Элементы;
	Объект	 = Форма.Объект; 
	
	Элементы.НачисленияГруппаПериод.Видимость 				= Объект.ПоказатьПериодДействия;
	Элементы.НачисленияГруппаБазовыйПериод.Видимость 		= Объект.ПоказатьБазовыйПериод;
	Элементы.НачисленияГруппаОтработано.Видимость 			= Объект.ПоказатьОтработанноеВремя;
	Элементы.НачисленияГруппаНорма.Видимость 				= Объект.ПоказатьНормуВремени;
	Элементы.НачисленияКалендарныеДни.Видимость 			= Объект.ПоказатьНормуВремени;
	Элементы.НачисленияГруппаНормаЗаМесяц.Видимость 		= Объект.ПоказатьНормуВремени;	
	Элементы.НачисленияГрафикРаботы.Видимость 				= Объект.ПоказатьГрафикРаботы;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьВсе(Команда)
	
	Объект.ПоказатьБазовыйПериод            	= Истина;
	//Объект.ПоказатьВидУчетаВремениДляСредней	= Истина;
	Объект.ПоказатьГрафикРаботы					= Истина;
	Объект.ПоказатьДополнительныеДанные        	= Истина;
	Объект.ПоказатьНормуВремени				 	= Истина;
	Объект.ПоказатьОтработанноеВремя		 	= Истина;
	Объект.ПоказатьПериодДействия			 	= Истина;
	
	УстановитьВидимостьКолонок(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура СкрытьВсе(Команда)
	
	Объект.ПоказатьБазовыйПериод            	= Ложь;
	//Объект.ПоказатьВидУчетаВремениДляСредней	= Ложь;
	Объект.ПоказатьГрафикРаботы					= Ложь;
	Объект.ПоказатьДополнительныеДанные        	= Ложь;
	Объект.ПоказатьНормуВремени				 	= Ложь;
	Объект.ПоказатьОтработанноеВремя		 	= Ложь;
	Объект.ПоказатьПериодДействия			 	= Ложь;
	
	УстановитьВидимостьКолонок(ЭтаФорма);
	
КонецПроцедуры



