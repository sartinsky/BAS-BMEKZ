#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ОбработкаПроведения( Отказ, Режим )
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКПроведению(ЭтотОбъект);
	Заголовок = ОбщегоНазначенияБПВызовСервера.ПредставлениеДокументаПриПроведении(Ссылка);
	
	
	// Получим реквизиты шапки из запроса
	ВыборкаПоШапкеДокумента = СформироватьЗапросПоШапке().Выбрать();
		
	Если ВыборкаПоШапкеДокумента.Следующий() Тогда

		// Надо позвать проверку заполнения реквизитов шапки
		ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ);
 		мСотрудники = Начисления.ВыгрузитьКолонку("Сотрудник");

		// по всем заплненным работникам
		// Движения стоит добавлять, если в проведении еще не отказано (отказ =ложь)
		Если НЕ Отказ Тогда

			////////////////////////////////////////////////////////////////////////
			// Начисления
			// получим реквизиты табличной части.
			
			ВыборкаПоНачислениям = СформироватьЗапросПоНачислениям(мСотрудники).Выбрать();
			Пока ВыборкаПоНачислениям.Следующий() Цикл 
				
				// проверим очередную строку табличной части
				ПроверитьЗаполнениеСтрокиНачисления(ВыборкаПоНачислениям, Отказ, Заголовок);
				Если НЕ Отказ Тогда
					// Заполним записи в наборах записей регистров
					ДобавитьСтрокуНачислений(ВыборкаПоНачислениям, Движения.ИНАГРО_Начисления);
				КонецЕсли;
			КонецЦикла;
							
			СформироватьВзаиморасчетыСРаботниками( Движения.ВзаиморасчетыССотрудниками, мСотрудники)
		КонецЕсли;

	КонецЕсли;
	
	// При получении учетной политики произошли ошибки
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ИНАГРО_ПроведениеРасчетов.СформироватьКраткийСоставСотрудников(ЭтотОбъект, "Начисления");
	
КонецПроцедуры

#КонецОбласти

// Производится расчет.
//
Функция РассчитатьНачисления(Сотрудники = Неопределено, КомментироватьРасчет = Ложь) Экспорт
	
	// Массивы для хранения индексов строк табличных частей,
	// используются для расчета по одному сотруднику.
	МассивИндексыСтрокНачисления = Новый Массив();
	
	Отказ = Ложь;
	// Перечитаем объект и соберем данные для заполнения наборов записей регистров
	НачатьТранзакцию();
	Прочитать();
	ВыборкаПоШапкеДокумента = СформироватьЗапросПоШапке().Выбрать();
	
	// позиционируем выборку
	ВыборкаПоШапкеДокумента.Следующий();
	ВыборкаПоНачислениям = СформироватьЗапросПоНачислениям(Сотрудники).Выбрать();
	ЗафиксироватьТранзакцию();
	
	// Создадим рабочие наборы записей
	НаборОсновныеНачисления = РегистрыРасчета.ИНАГРО_Начисления.СоздатьНаборЗаписей();
	НаборОсновныеНачисления.Отбор.Регистратор.Значение = Ссылка;
	
	Пока ВыборкаПоНачислениям.Следующий() Цикл
		
		ПроверитьЗаполнениеСтрокиНачисления(ВыборкаПоНачислениям, Отказ);
		Отказ = Ложь;
		
		Если НЕ Отказ Тогда
			// Заполним записи в наборах записей регистров
			ДобавитьСтрокуНачислений(ВыборкаПоНачислениям, НаборОсновныеНачисления, Истина);
			МассивИндексыСтрокНачисления.Добавить(ВыборкаПоНачислениям.НомерСтроки-1);
			
		КонецЕсли;
		
	КонецЦикла;
	НаборОсновныеНачисления.Записать();
	
	Если Отказ Тогда
		
		// Если есть какие-то проблемы - удаляем движения (тут нет транзакции) 
		// Удаляем движения.
		НаборОсновныеНачисления.Очистить();
		НаборОсновныеНачисления.Записать();
				
		Возврат Не Отказ;
		
	КонецЕсли;
	
	// Рассчитываем записи
	// при этом передаем не только набор записей регистра расчета, но и набор записей регисра 
	// накопления со сведениями об отработанном времени.
	ИНАГРО_ПроведениеРасчетов.РассчитатьЗаписиРегистраРасчета("ИНАГРО_Начисления", 
														НаборОсновныеНачисления, 
														Начисления, 
														МассивИндексыСтрокНачисления, 
														Сотрудники, 
														КомментироватьРасчет);
	
	// Удаляем движения
	НаборОсновныеНачисления.Очистить();
	НаборОсновныеНачисления.Записать();
	
	Записать();
	
	Возврат Не Отказ;
	
КонецФункции // РассчитатьНачисления()

Функция СформироватьЗапросПоШапке() Экспорт
	
	Запрос = Новый Запрос;
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка" , Ссылка);
	Запрос.УстановитьПараметр("парамПустаяОрганизация", Справочники.Организации.ПустаяСсылка());
	
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ //<< Ин-Агро - добавлено Разрешенные 
	|	Дата                                               КАК Дата, 
	|	ПериодРегистрации                                  КАК ПериодРегистрации, 
	|	ВЫБОР КОГДА Организация.ГоловнаяОрганизация = &парамПустаяОрганизация 
	|			ТОГДА Организация 
	|			ИНАЧЕ Организация.ГоловнаяОрганизация 
	|		  КОНЕЦ                                         КАК ГоловнаяОрганизация, 
	|	Организация                                         КАК Организация, 
	|	Организация                                         КАК ОбособленноеПодразделение, 
	| 	Ссылка                                              КАК Ссылка
	|ИЗ 
	|	Документ.ИНАГРО_РегистрацияРазовыхНачисленийРаботниковОрганизаций
	|ГДЕ 
	|	Ссылка = &ДокументСсылка
	|";
	
	Возврат Запрос.Выполнить();
	
КонецФункции // СформироватьЗапросПоШапке()

Функция СформироватьЗапросПоНачислениям(Сотрудники)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументСсылка", Ссылка);

	Если НЕ (Сотрудники = Неопределено) Тогда
		Запрос.УстановитьПараметр("парамСотрудники", Сотрудники);
		УсловиеНаФизлицоТекст = " И СтрокиНачисления.Сотрудник В (&парамСотрудники) ";
	Иначе
		УсловиеНаФизлицоТекст="";
	КонецЕсли;

	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	// Свойства
	|	СтрокиНачисления.Ссылка.ПериодРегистрации	КАК ПериодРегистрации,
	|	СтрокиНачисления.ДатаНачала					КАК ПериодДействияНачало,
	|	СтрокиНачисления.ДатаОкончания				КАК ПериодДействияКонец,
	|	СтрокиНачисления.БазовыйПериодНачало,
	|	СтрокиНачисления.БазовыйПериодКонец,
	|	СтрокиНачисления.ВидРасчета,
	|	СтрокиНачисления.Сторно,
	|
	// Измерения
	|	СтрокиНачисления.Ссылка.Организация КАК организация,
	|	ВЫБОР КОГДА СтрокиНачисления.Сотрудник.ИНАГРО_ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.ВнутреннееСовместительство) 
	|         ТОГДА СтрокиНачисления.Сотрудник.ОсновноеНазначение
	|         ИНАЧЕ СтрокиНачисления.Сотрудник
	|	КОНЕЦ КАК Сотрудник,
	|	СтрокиНачисления.Сотрудник КАК Назначение,
	|
	// Ресурсы
	|	СтрокиНачисления.Результат,
	|	СтрокиНачисления.ОплаченоДнейЧасов,
	|	СтрокиНачисления.ОтработаноДней,
	|	СтрокиНачисления.ОтработаноЧасов,
	|	СтрокиНачисления.НормаДней,
	|	СтрокиНачисления.НормаЧасов,
	|	СтрокиНачисления.КалендарныеДни,
	|
	// Реквизиты
	|	СтрокиНачисления.Авторасчет,
	|	СтрокиНачисления.НомерСтроки,
	|	СтрокиНачисления.ПодразделениеОрганизации,
	|	СтрокиНачисления.ПодразделениеОрганизации КАК Подразделение,
	|	СтрокиНачисления.СпособОтраженияВБухучете,
	//|	СтрокиНачисления.ДокументОснование,
	|	СтрокиНачисления.Показатель1,
	|	СтрокиНачисления.Показатель2,
	|	СтрокиНачисления.Показатель3,
	|	СтрокиНачисления.Показатель4,
	|	СтрокиНачисления.Показатель5,
	|	СтрокиНачисления.Показатель6,
	|	СтрокиНачисления.НормаДнейЗаМесяц,
	|	СтрокиНачисления.НормаЧасовЗаМесяц,
	|	СтрокиНачисления.ГрафикРаботы,
	|   ВЫБОР	КОГДА СтрокиНачисления.ГрафикРаботы ССЫЛКА Справочник.ИНАГРО_ГрафикиРаботы
	|			ТОГДА NULL
	|			ИНАЧЕ СтрокиНачисления.Сотрудник
	|	КОНЕЦ						КАК ГрафикРаботыСотрудник,
	//|	СтрокиНачисления.ВидУчетаВремениДляСредней,
	|
	// Специализированные параметры для регистра Взаиморасчеты с работников организации и др.
	|	Прием.ДатаПриема							КАК ДатаПриема,
	|	СтрокиНачисления.ВидРасчета.СпособРасчета	КАК СпособРасчета,
	|	СтрокиНачисления.ВидРасчета.СчетУчета		КАК СчетУчета,
	|	ЕСТЬNULL(СтрокиНачисления.ГрафикРаботы.СуммированныйУчетРабочегоВремени, ЛОЖЬ) КАК СуммированныйУчетРабочегоВремени,
	|	СтрокиНачисления.ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени	КАК ВидИспользованияРабочегоВремени,
	|
	// Проверки
	|	СтрокиНачисления.ДатаНачала,
	|	СтрокиНачисления.ДатаОкончания,
	|	ВЫБОР
	|		КОГДА СтрокиНачисления.Сотрудник.ГоловнаяОрганизация = СтрокиНачисления.Ссылка.Организация
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ОшибкаНеСоответствиеСотрудникаИОрганизации
	//|   ВЫБОР
	//|   	КОГДА СтрокиНачисления.ВидРасчета.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаНачислений.ИндексацияЗарплаты)
	//|       ТОГДА СтрокиНачисления.Должность
	//|       ИНАЧЕ NULL
	//|	КОНЕЦ КАК Должность
	|ИЗ Документ."+Ссылка.Метаданные().Имя+".Начисления КАК СтрокиНачисления
	|
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ (  
	|   ВЫБРАТЬ
	|       РаботникиОрганизации.Сотрудник КАК Сотрудник,
	|       МИНИМУМ(ПриемРаботников.Период) КАК ДатаПриема
	|	ИЗ Документ.ИНАГРО_НачислениеЗарплатыРаботникамОрганизаций.РаботникиОрганизации КАК РаботникиОрганизации
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИНАГРО_РаботникиОрганизаций КАК ПриемРаботников
	|   ПО  ПриемРаботников.Сотрудник = РаботникиОрганизации.Сотрудник
	|   СГРУППИРОВАТЬ ПО
	|       РаботникиОрганизации.Сотрудник
	|) КАК Прием
	|ПО Прием.Сотрудник = СтрокиНачисления.Сотрудник
	|
	|ГДЕ СтрокиНачисления.Ссылка = &ДокументСсылка" + УсловиеНаФизлицоТекст + "
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|";

	Возврат Запрос.Выполнить();

	
КонецФункции // СформироватьЗапросПоНачислениям()

Процедура СформироватьВзаиморасчетыСРаботниками(НаборЗаписей, Сотрудники = Неопределено)
	
	Если Сотрудники = Неопределено Тогда
		Сотрудники = Начисления.ВыгрузитьКолонку("Сотрудник");
	КонецЕсли;

	НачисленияРаботниковТекст = 
		"ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА Доходы.Сотрудник.ИНАГРО_ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.ВнутреннееСовместительство)
		|			ТОГДА Доходы.Сотрудник.ОсновноеНазначение
		|		ИНАЧЕ Доходы.Сотрудник
		|	КОНЕЦ КАК Сотрудник,
		|	Доходы.Сотрудник КАК Назначение,
		|	Доходы.СчетУчета КАК СчетУчета,
		|	СУММА(Доходы.СуммаДохода) КАК СуммаДохода
		|ИЗ
		|	(ВЫБРАТЬ
		|		Основные.Сотрудник КАК Сотрудник,
		|		Основные.ВидРасчета.СчетУчета КАК СчетУчета,
		|		Основные.Результат КАК СуммаДохода
		|	ИЗ
		|		Документ.ИНАГРО_РегистрацияРазовыхНачисленийРаботниковОрганизаций.Начисления КАК Основные
		|	ГДЕ
		|		Основные.Ссылка = &парамСсылка
		|		И Основные.Сотрудник В(&парамСотрудники)
		|		И Основные.Результат <> 0
		|		И НЕ Основные.ВидРасчета.ЯвляетсяДоходомВНатуральнойФорме) КАК Доходы
		|
		|СГРУППИРОВАТЬ ПО
		|	Доходы.Сотрудник,
		|	Доходы.СчетУчета,
		|	ВЫБОР
		|		КОГДА Доходы.Сотрудник.ИНАГРО_ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.ВнутреннееСовместительство)
		|			ТОГДА Доходы.Сотрудник.ОсновноеНазначение
		|		ИНАЧЕ Доходы.Сотрудник
		|	КОНЕЦ";
		
	Запрос = Новый Запрос(НачисленияРаботниковТекст);
		
	// Установим параметры запроса
	Запрос.УстановитьПараметр("парамСсылка" , Ссылка);
	Запрос.УстановитьПараметр("парамСотрудники" , Сотрудники);
	
	Доходы = Запрос.Выполнить().Выбрать();
	// сформируем движения ВзаиморасчетыСРаботникамиОрганизаций
	Пока Доходы.Следующий() Цикл
		Движение = НаборЗаписей.Добавить();
		
		// свойства
		Движение.Период					= КонецМесяца(ПериодРегистрации);
		Движение.ВидДвижения			= ВидДвиженияНакопления.Приход;
		
		// измерения 
		Движение.Сотрудник				= Доходы.Сотрудник;
		Движение.ФизическоеЛицо			= Доходы.Сотрудник.ФизическоеЛицо;
		Движение.Организация			= Организация;
		Движение.ПериодВзаиморасчетов	= ПериодРегистрации;
		Движение.СчетУчета			  	= Доходы.СчетУчета;
		
		// ресурсы
		Движение.СуммаВзаиморасчетов	= Доходы.СуммаДохода;
		
		Движение.КодОперации = Перечисления.КодыОперацийВзаиморасчетыСРаботникамиОрганизаций.Начисления;
		
	КонецЦикла;
	
КонецПроцедуры // СформироватьВзаиморасчетыСРаботниками()

Процедура ПроверитьЗаполнениеШапки( ВыборкаПоШапкеДокумента, Отказ )
	
	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.Организация) Тогда
		ОбщегоНазначенияБПКлиентСервер.СообщитьОбОшибке(НСтр("ru='Не задана организация!';uk='Не задана організація!'"), Отказ);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ПериодРегистрации) Тогда
		ОбщегоНазначенияБПКлиентСервер.СообщитьОбОшибке(НСтр("ru='Не задан период за который выполняется отражение начислений в бухгалтерском учете!';uk='Не заданий період за який виконується відображення нарахувань у бухгалтерському обліку!'"), Отказ);
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаполнениеШапки()

Процедура ПроверитьЗаполнениеСтрокиНачисления( ВыборкаПоСтрокамДокумента, Отказ, Заголовок = "")
	
	СтрокаНачалаСообщенияОбОшибке = НСтр("ru='В строке номер ""';uk='У рядку номер ""'")+ СокрЛП(ВыборкаПоСтрокамДокумента.НомерСтроки) +
	НСтр("ru='"" табл. части ""Начисления"": ';uk='"" табл. частини ""Нарахування"": '");
	
	// Сотрудник
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.Сотрудник) Тогда
		ОбщегоНазначенияБПКлиентСервер.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + НСтр("ru='не выбран сотрудник!';uk='не обраний працівник!'"), Отказ, Заголовок);
	КонецЕсли;
	
	// Организация сотрудника должна совпадать с организацией документа
	Если ВыборкаПоСтрокамДокумента.ОшибкаНеСоответствиеСотрудникаИОрганизации Тогда
		ОбщегоНазначенияБПКлиентСервер.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + НСтр("ru='указанный сотрудник оформлен на другую организацию!';uk='зазначений співробітник оформлений на іншу організацію!'"), Отказ, Заголовок);
	КонецЕсли;
	
	// ВидРасчета
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ВидРасчета) Тогда
		ОбщегоНазначенияБПКлиентСервер.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + НСтр("ru='не указан вид расчета!';uk='не зазначений вид розрахунку!'"), Отказ, Заголовок);
	КонецЕсли;
	
	// Дата начала
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ДатаНачала) Тогда
		ОбщегоНазначенияБПКлиентСервер.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + НСтр("ru='не указана дата начала начисления!';uk='не зазначена дата початку нарахування!'"), Отказ, Заголовок);
	КонецЕсли;
	
	// Дата окончания
	Если Не ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ДатаОкончания) Тогда
		ОбщегоНазначенияБПКлиентСервер.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + НСтр("ru='не указана дата окончания начисления!';uk='не зазначена дата закінчення нарахування!'"), Отказ, Заголовок);
	КонецЕсли;
	
	// Дата начала
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.БазовыйПериодНачало) Тогда
		ОбщегоНазначенияБПКлиентСервер.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + НСтр("ru='не указана дата начала базового периода начисления!';uk='не зазначена дата початку базового періоду нарахування!'"), Отказ, Заголовок);
	КонецЕсли;
	
	// Дата окончания
	Если Не ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.БазовыйПериодКонец) Тогда
		ОбщегоНазначенияБПКлиентСервер.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + НСтр("ru='не указана дата окончания базового периода начисления!';uk='не зазначена дата закінчення базового періоду нарахування!'"), Отказ, Заголовок);
	КонецЕсли;
	
	Если Не ВыборкаПоСтрокамДокумента.ДатаПриема = NULL Тогда
		// Проверка дат
		Если ВыборкаПоСтрокамДокумента.ДатаНачала < ВыборкаПоСтрокамДокумента.ДатаПриема Тогда
			ОбщегоНазначенияБПКлиентСервер.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + НСтр("ru=' дата начала начисления меньше даты приема!';uk='дата початку нарахування меньша за дату прийому!'"), Отказ, Заголовок);
		ИначеЕсли ВыборкаПоСтрокамДокумента.ДатаНачала > ВыборкаПоСтрокамДокумента.ДатаОкончания Тогда	
			ОбщегоНазначенияБПКлиентСервер.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + НСтр("ru=' дата начала начисления больше даты окончания!';uk='дата початку нарахування меньша за дату закінчення!'"), Отказ, Заголовок);
		ИначеЕсли ВыборкаПоСтрокамДокумента.Базовыйпериодначало  < ВыборкаПоСтрокамДокумента.ДатаПриема Тогда	
			ОбщегоНазначенияБПКлиентСервер.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + НСтр("ru=' дата начала базового периода начисления меньше даты приема!';uk='дата початку базового періоду нарахування меньша за дату прийому!'"), Отказ, Заголовок);
		ИначеЕсли ВыборкаПоСтрокамДокумента.БазовыйПериодНачало > ВыборкаПоСтрокамДокумента.БазовыйПериодКонец Тогда	
			ОбщегоНазначенияБПКлиентСервер.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + НСтр("ru=' дата начала базового периода начисления больше даты окончания!';uk='дата початку базового періоду нарахування меньша за дату закінчення!'"), Отказ, Заголовок);
		КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаполнениеСтрокиНачисления()

Процедура ДобавитьСтрокуНачислений( ВыборкаПоСтрокамДокумента, НаборЗаписей, ОбнулитьРезультат = Ложь )
	
	Движение = НаборЗаписей.Добавить();
	ЗаполнитьЗначенияСвойств(Движение, ВыборкаПоСтрокамДокумента);
 	Движение.ВидУчетаВремени = ИНАГРО_ПроведениеРасчетов.ПолучитьВидУчетаВремени(ВыборкаПоСтрокамДокумента, ВыборкаПоСтрокамДокумента.СуммированныйУчетРабочегоВремени);
	Если ОбнулитьРезультат И ВыборкаПоСтрокамДокумента.Авторасчет Тогда
		Движение.Результат = 0;
		Движение.ОплаченоДнейЧасов = 0;
	КонецЕсли;
	
КонецПроцедуры // ДобавитьСтрокуОсновныхНачислений()

#КонецЕсли
