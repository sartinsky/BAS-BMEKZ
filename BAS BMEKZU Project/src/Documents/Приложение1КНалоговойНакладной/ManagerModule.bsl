#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

Функция ПодготовитьСтруктуруШапкиДокумента(Объект) Экспорт
	// Дерево значений, содержащее имена необходимых полей в запросе по шапке.
	Перем ДеревоПолейЗапросаПоШапке;

	мВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	
	СтруктураШапкиДокумента = ОбщегоНазначенияРед12.СформироватьСтруктуруШапкиДокумента(Объект);

	// Заполним по шапке документа дерево параметров, нужных при проведении.
	ДеревоПолейЗапросаПоШапке      = ОбщегоНазначенияРед12.СформироватьДеревоПолейЗапросаПоШапке();

	ОбщегоНазначенияРед12.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "Организация"                      , "ДоговорОрганизация");

	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа
	Возврат УправлениеЗапасами.СформироватьЗапросПоДеревуПолей(Объект, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета);
	
КонецФункции

Процедура ПодготовитьТаблицыДокумента(Объект, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоУслугам, ТаблицаПоОС, ТаблицаПоНМА) Экспорт
	
	// ТОВАРЫ
	// Получим необходимые для проведения и проверки заполнения данные по табличной части "Товары".
	СтруктураПолей        = Новый Структура();
	
	СтруктураПолей.Вставить("Номенклатура"              , "Номенклатура.НаименованиеПолное");
	СтруктураПолей.Вставить("КодУКТВЭД"              	, "КодУКТВЭД");
	СтруктураПолей.Вставить("НомерГТД"              	, "НомерГТД.Код");
	СтруктураПолей.Вставить("ДатаГТД"              	    , "НомерГТД.Дата");
	СтруктураПолей.Вставить("ЕдиницаИзмерения"   		, "ЕдиницаИзмерения.Наименование");
	СтруктураПолей.Вставить("ЕдиницаИзмеренияКод"   	, "ЕдиницаИзмерения.Код");
	СтруктураПолей.Вставить("Количество"            	, "Количество");	
	СтруктураПолей.Вставить("Сумма"                     , "Сумма");
	СтруктураПолей.Вставить("СтавкаНДС"                 , "СтавкаНДС");
	СтруктураПолей.Вставить("НДС"                       , "СуммаНДС");
	СтруктураПолей.Вставить("КоличествоОтгружено"  		, "КоличествоОтгружено");
	СтруктураПолей.Вставить("КоличествоОсталось"  		, "КоличествоОсталось");
	
	РезультатЗапросаПоТоварам = ОбщегоНазначенияРед12.СформироватьЗапросПоТабличнойЧасти(Объект, "Товары", СтруктураПолей);

	// Подготовим таблицу товаров для проведения.
	ТаблицаПоТоварам = ПодготовитьТаблицуТоваров(Объект, РезультатЗапросаПоТоварам, СтруктураШапкиДокумента);

	// УСЛУГИ
	// Получим необходимые для проведения и проверки заполнения данные 
	// по табличной части "Услуги".
	СтруктураПолей        = Новый Структура();
	СтруктураПростыхПолей = Новый Структура();
	
	СтруктураПолей.Вставить("Номенклатура"              , "Содержание");
	СтруктураПростыхПолей.Вставить("КодУКТВЭД"  		, "");
	СтруктураПростыхПолей.Вставить("НомерГТД"  		    , "");
	СтруктураПростыхПолей.Вставить("ДатаГТД"  		    , "");
	СтруктураПолей.Вставить("ЕдиницаИзмерения"          , "Номенклатура.БазоваяЕдиницаИзмерения.Наименование");
	СтруктураПолей.Вставить("Количество"            	, "Количество");
	СтруктураПолей.Вставить("Сумма"                     , "Сумма");
	СтруктураПолей.Вставить("СтавкаНДС"                 , "СтавкаНДС");
	СтруктураПолей.Вставить("НДС"                       , "СуммаНДС");
  	СтруктураПолей.Вставить("КоличествоОтгружено"  		, "КоличествоОтгружено");
	СтруктураПолей.Вставить("КоличествоОсталось"  		, "КоличествоОсталось");
	
	РезультатЗапросаПоУслугам = ОбщегоНазначенияРед12.СформироватьЗапросПоТабличнойЧасти(Объект, "Услуги", СтруктураПолей, СтруктураПростыхПолей);
	
	// Подготовим таблицу Услуг для проведения или печати
	ТаблицаПоУслугам = ПодготовитьТаблицуУслуг(Объект, РезультатЗапросаПоУслугам, СтруктураШапкиДокумента);

	
	// ОСНОВНЫЕ СРЕДСТВА
	// Получим необходимые для проведения и проверки заполнения данные 
	// по табличной части "ОС".
	СтруктураПолей        = Новый Структура();
	СтруктураПростыхПолей = Новый Структура();
	
	СтруктураПолей.Вставить("Номенклатура"              , "ОсновноеСредство.НаименованиеПолное");
	СтруктураПолей.Вставить("КодУКТВЭД"              	, "КодУКТВЭД");
	СтруктураПолей.Вставить("НомерГТД"              	, "НомерГТД.Код");
	СтруктураПолей.Вставить("ДатаГТД"              	    , "НомерГТД.Дата");
	СтруктураПолей.Вставить("Сумма"                     , "Сумма");
	СтруктураПолей.Вставить("СтавкаНДС"                 , "СтавкаНДС");
	СтруктураПолей.Вставить("НДС"                       , "СуммаНДС");
  	СтруктураПолей.Вставить("КоличествоОтгружено"  		, "КоличествоОтгружено");
	СтруктураПолей.Вставить("КоличествоОсталось"  		, "КоличествоОсталось");
	СтруктураПростыхПолей.Вставить("ЕдиницаИзмерения", "шт.");
	СтруктураПростыхПолей.Вставить("Количество"  , 1);	
	
	РезультатЗапросаПоОС = ОбщегоНазначенияРед12.СформироватьЗапросПоТабличнойЧасти(Объект, "ОС", СтруктураПолей, СтруктураПростыхПолей);
	
	// Подготовим таблицу Основных средств для проведения или печати
	ТаблицаПоОС = ПодготовитьТаблицуОС(Объект, РезультатЗапросаПоОС, СтруктураШапкиДокумента);

	// НЕМАТЕРИАЛЬНЫЕ АКТИВЫ
	// Получим необходимые для проведения и проверки заполнения данные 
	// по табличной части "НМА".
	СтруктураПолей        = Новый Структура();
	СтруктураПростыхПолей = Новый Структура();
	
	СтруктураПолей.Вставить("Номенклатура"              , "НематериальныйАктив.НаименованиеПолное");
	СтруктураПолей.Вставить("КодУКТВЭД"              	, "КодУКТВЭД");
	СтруктураПолей.Вставить("НомерГТД"              	, "НомерГТД.Код");
	СтруктураПолей.Вставить("ДатаГТД"              	    , "НомерГТД.Дата");
	СтруктураПолей.Вставить("Сумма"                     , "Сумма");
	СтруктураПолей.Вставить("СтавкаНДС"                 , "СтавкаНДС");
	СтруктураПолей.Вставить("НДС"                       , "СуммаНДС");
  	СтруктураПолей.Вставить("КоличествоОтгружено"  		, "КоличествоОтгружено");
	СтруктураПолей.Вставить("КоличествоОсталось"  		, "КоличествоОсталось");
	СтруктураПростыхПолей.Вставить("ЕдиницаИзмерения", "шт.");
	СтруктураПростыхПолей.Вставить("Количество"  , 1);	
	
	РезультатЗапросаПоНМА = ОбщегоНазначенияРед12.СформироватьЗапросПоТабличнойЧасти(Объект, "НМА", СтруктураПолей, СтруктураПростыхПолей);
	
	// Подготовим таблицу Нематериальных активов для проведения или печати
	ТаблицаПоНМА = ПодготовитьТаблицуНМА(Объект, РезультатЗапросаПоНМА, СтруктураШапкиДокумента);


КонецПроцедуры

Функция ОпределитьДопустимыеСтавкиНДС(ВидОперации) Экспорт
	
	СписокСтавокНДС = Новый СписокЗначений();
	
	Если ВидОперации = Перечисления.ВидыОперацийПриложение1КНалоговойНакладной.ОблагаемыеОперации Тогда
		СписокСтавокНДС.Добавить(Перечисления.СтавкиНДС.НДС20);
		СписокСтавокНДС.Добавить(Перечисления.СтавкиНДС.НДС0);
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПриложение1КНалоговойНакладной.НеНДСОперации Тогда
		СписокСтавокНДС.Добавить(Перечисления.СтавкиНДС.НеНДС);
	ИначеЕсли  ВидОперации = Перечисления.ВидыОперацийПриложение1КНалоговойНакладной.ОсвобожденныеОперации Тогда
		СписокСтавокНДС.Добавить(Перечисления.СтавкиНДС.БезНДС);
	КонецЕсли;
		
	Возврат СписокСтавокНДС;
	
КонецФункции

Процедура УстановитьКодУКТВЭДВстрокеТоваров(СтрокаТЧ) Экспорт
	
	Если ЗначениеЗаполнено(СтрокаТЧ.Номенклатура) Тогда
		ЗначениеНоменклатураГТД = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаТЧ.Номенклатура, "НоменклатураГТД");
		Если ТипЗнч(ЗначениеНоменклатураГТД) = Тип("СправочникСсылка.НоменклатураГТД") Тогда
			СтрокаТЧ.КодУКТВЭД = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЗначениеНоменклатураГТД, "КодУКТВЭД");
		ИначеЕсли ТипЗнч(ЗначениеНоменклатураГТД) = Тип("СправочникСсылка.КлассификаторУКТВЭД") Тогда
			СтрокаТЧ.КодУКТВЭД = ЗначениеНоменклатураГТД;
		КонецЕсли; 
	КонецЕсли; 
		
КонецПроцедуры

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти
	
#Область ПроцедурыИФункцииПечати

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	// Приходная накладная
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "Приложение1КНалоговойНакладной";
	КомандаПечати.Представление = НСтр("ru='Приложение 1 к налоговой накладной';uk='Додаток 1 до податкової накладної'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечати";
	КомандаПечати.СписокФорм    = "ФормаСписка,ФормаВыбора,ФормаДокумента";

	// Реестр документов
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "Реестр";
	КомандаПечати.Представление = НСтр("ru='Реестр документов';uk='Реєстр документів'");
	КомандаПечати.ЗаголовокФормы= НСтр("ru='Реестр документов ""Приложение 1 к налоговой накладной""';uk='Реєстр документів ""Додаток 1 до податкової накладної""'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечатиРеестраДокументов";
	КомандаПечати.СписокФорм    = "ФормаСписка";
	КомандаПечати.Порядок       = 100;
	
КонецПроцедуры

Функция ПечатьДокументаНалоговыйКодекс2016(Ссылка, ОбъектыПечати, ПараметрыВывода) Экспорт	
		
	Перем СтруктураШапкиДокумента;
	Перем ТаблицаНоменклатуры, ТаблицаПоУслугам, ТаблицаПоОС, ТаблицаПоНМА;
 
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Дата КАК Дата,
	|	Организация КАК Организация,
	|	ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ДоговорКонтрагента.НаименованиеДляПечати КАК ДоговорНаименованиеДляПечати,	
	|   ДоговорКонтрагента.Номер КАК НомерДоговора,
	|   ДоговорКонтрагента.Дата  КАК ДатаДоговора,
	|	НалоговаяНакладная.Номер КАК НомерНалоговойНакладной,
	|	НалоговаяНакладная.СпецРежимНалогообложения КАК СпецРежимНалогообложения,
	|	НалоговаяНакладная.ОбособленноеПодразделение.НаименованиеДляНалоговыхДокументов КАК НаименованиеФилиала,
	|	НалоговаяНакладная.ОбособленноеПодразделение.Префикс КАК Префикс,
	|	НалоговаяНакладная,
	|	НалоговаяНакладная.Дата КАК ДатаНалоговойНакладной,
	|	КтоВыписалНалоговуюНакладную КАК КтоВыписалНалоговуюНакладную
	|ИЗ
	|	Документ.Приложение1КНалоговойНакладной КАК Приложение1
	|
	|ГДЕ
	|	Приложение1.Ссылка = &ТекущийДокумент";
	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();
	
	// Подготовим таблицы
	Объект = Ссылка.ПолучитьОбъект();
	СтруктураШапкиДокумента = ПодготовитьСтруктуруШапкиДокумента(Объект); 
	ПодготовитьТаблицыДокумента(Объект, СтруктураШапкиДокумента, ТаблицаНоменклатуры, ТаблицаПоУслугам, ТаблицаПоОС, ТаблицаПоНМА);

	// Загрузим все таблицы (кроме тары) в одну таблицу
	ОбщегоНазначенияБПВызовСервера.ЗагрузитьВТаблицуЗначений(ТаблицаПоУслугам, ТаблицаНоменклатуры);	
	ОбщегоНазначенияБПВызовСервера.ЗагрузитьВТаблицуЗначений(ТаблицаПоОС	  , ТаблицаНоменклатуры);	
	ОбщегоНазначенияБПВызовСервера.ЗагрузитьВТаблицуЗначений(ТаблицаПоНМА	  , ТаблицаНоменклатуры);	
	
	// переименуем колонки
	ТаблицаНоменклатуры.Колонки.ЦенаМеста.Имя 					     = "ЦенаБезНДС";
	ТаблицаНоменклатуры.Колонки.СуммаБезНДСРегл.Имя 	 			 = "СуммаБезНДС";
	
	ТабДокумент = Новый ТабличныйДокумент;                                                             
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_Приложени1КНалоговойНакладной_Приложение1_2016";
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	
 	СведенияОПродавце	= БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Шапка.Организация, Шапка.Дата);
	НазваниеОрганизации	= ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОПродавце,    "ПолноеНаименование,",Ложь);
	                                                         
	Макет = ПолучитьМакет("ПФ_MXL_UK_Приложение1КНалоговойНакладной2016");
	Макет.КодЯзыкаМакета = "ru";
		
	Для Страница = 1 По 1 Цикл
		
		// Выводим отступ
		ОбластьМакета = Макет.ПолучитьОбласть("Пробел");
		ТабДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Оригинал");
		
		ТабДокумент.Вывести(ОбластьМакета);

		// Выводим заголовок накладной
		ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
		
		ОбластьМакета.Параметры.Заполнить(Шапка);
		
		//Дата налоговой
		ТекДатаНалоговой = Формат(Шапка.ДатаНалоговойНакладной, "ДФ=ddMMyyyy");
		Для Инд = 1 По 8 Цикл
			ОбластьМакета.Параметры["ДатаНалоговой_"+Инд]    = Сред(ТекДатаНалоговой, Инд, 1);
		КонецЦикла; 
		
		// Номер налоговой
		ТекНомерНалоговой = Прав("       " + СокрЛП(ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(Шапка.НалоговаяНакладная.Номер,Истина,Истина)), 7);
 		
		Для Инд = 1 По 7 Цикл                                                                 
			ОбластьМакета.Параметры["НомерНалоговой_"+Инд]    = Сред(ТекНомерНалоговой, Инд, 1);
		КонецЦикла; 
		
		// филиал/спецрежим налоговой
		ТекНомерФилиал = "";
		КодСпецРежима = ?(ЗначениеЗаполнено(Шапка.СпецРежимНалогообложения), "" + Шапка.СпецРежимНалогообложения, " "); //или пробел или одна цифра
		ОбластьМакета.Параметры.СпецРежим = КодСпецРежима; 
		
		ТабДокумент.Вывести(ОбластьМакета);

		// Выводим шапку накладной
		ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
		ТабДокумент.Вывести(ОбластьМакета);

		НомерПП = 0;
		// Выводим табличную часть
		ОбластьМакета = Макет.ПолучитьОбласть("Строка");
		Для каждого СтрокаТаблицы Из ТаблицаНоменклатуры Цикл
			// Теперь заполним
			ОбластьМакета.Параметры.Заполнить(СтрокаТаблицы);
			
			ОбластьМакета.Параметры.КодУКТВЭД = СтрЗаменить(ОбластьМакета.Параметры.КодУКТВЭД, " ", "");
			
			НомерПП = НомерПП + 1;
			ОбластьМакета.Параметры.НомерПП = НомерПП;
			
			ОбластьМакета.Параметры.ЕдиницаИзмеренияКод = УчетНДС.КодЕдиницыИзмеренияДляПечатиНалоговых(ОбластьМакета.Параметры.ЕдиницаИзмеренияКод);

			ОбластьМакета.Параметры.Номенклатура = СокрЛП("" + СтрокаТаблицы.Номенклатура);
			
			ТабДокумент.Вывести(ОбластьМакета);
			                                          	
		КонецЦикла;
		
		// Выводим подвал накладной
		ОбластьМакета = Макет.ПолучитьОбласть("Подвал");
		
		ОбластьМакета.Параметры.Заполнить(Шапка);
		ОбластьМакета.Параметры.ИтогСуммаБезНДС = ТаблицаНоменклатуры.Итог("СуммаБезНДС");
		
		ТабДокумент.Вывести(ОбластьМакета);

		Если Страница <> 2 Тогда
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
	КонецЦикла; 

	// В табличном документе зададим имя области, в которую был ¶
	// выведен объект. Нужно для возможности печати покомплектно.¶
	УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабДокумент, 
	1, ОбъектыПечати, Ссылка);
 	
	
	Возврат ТабДокумент;

КонецФункции // ПечатьДокумента()

Функция ПечатьДокументаНалоговыйКодекс2015(Ссылка, ОбъектыПечати, ПараметрыВывода) Экспорт	
		
	Перем СтруктураШапкиДокумента;
	Перем ТаблицаНоменклатуры, ТаблицаПоУслугам, ТаблицаПоОС, ТаблицаПоНМА;
 
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Дата КАК Дата,
	|	Организация КАК Организация,
	|	ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ДоговорКонтрагента.НаименованиеДляПечати КАК ДоговорНаименованиеДляПечати,	
	|   ДоговорКонтрагента.Номер КАК НомерДоговора,
	|   ДоговорКонтрагента.Дата  КАК ДатаДоговора,
	|	НалоговаяНакладная.Номер КАК НомерНалоговойНакладной,
	|	НалоговаяНакладная.СпецРежимНалогообложения КАК СпецРежимНалогообложения,
	|	НалоговаяНакладная.ОбособленноеПодразделение.НаименованиеДляНалоговыхДокументов КАК НаименованиеФилиала,
	|	НалоговаяНакладная.ОбособленноеПодразделение.Префикс КАК Префикс,
	|	НалоговаяНакладная,
	|	НалоговаяНакладная.Дата КАК ДатаНалоговойНакладной,
	|	КтоВыписалНалоговуюНакладную КАК КтоВыписалНалоговуюНакладную
	|ИЗ
	|	Документ.Приложение1КНалоговойНакладной КАК Приложение1
	|
	|ГДЕ
	|	Приложение1.Ссылка = &ТекущийДокумент";
	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();
	
	// Подготовим таблицы
	Объект = Ссылка.ПолучитьОбъект();
	СтруктураШапкиДокумента = ПодготовитьСтруктуруШапкиДокумента(Объект); 
	ПодготовитьТаблицыДокумента(Объект, СтруктураШапкиДокумента, ТаблицаНоменклатуры, ТаблицаПоУслугам, ТаблицаПоОС, ТаблицаПоНМА);

	// Загрузим все таблицы (кроме тары) в одну таблицу
	ОбщегоНазначенияБПВызовСервера.ЗагрузитьВТаблицуЗначений(ТаблицаПоУслугам, ТаблицаНоменклатуры);	
	ОбщегоНазначенияБПВызовСервера.ЗагрузитьВТаблицуЗначений(ТаблицаПоОС	  , ТаблицаНоменклатуры);	
	ОбщегоНазначенияБПВызовСервера.ЗагрузитьВТаблицуЗначений(ТаблицаПоНМА	  , ТаблицаНоменклатуры);	
	
	// переименуем колонки
	ТаблицаНоменклатуры.Колонки.ЦенаМеста.Имя 					     = "ЦенаБезНДС";
	ТаблицаНоменклатуры.Колонки.СуммаБезНДСРегл.Имя 	 			 = "СуммаБезНДС";
	
	ТабДокумент = Новый ТабличныйДокумент;                                                             
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_Приложени1КНалоговойНакладной_Приложение1_2015";
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	
 	СведенияОПродавце	= БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Шапка.Организация, Шапка.Дата);
	НазваниеОрганизации	= ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОПродавце,    "ПолноеНаименование,",Ложь);
	Макет = ПолучитьМакет("ПФ_MXL_UK_Приложение1КНалоговойНакладной2015");
	Макет.КодЯзыкаМакета = "ru";
		
	СписокДополнительныхПараметров = "ДоговорНаименованиеДляПечати,";
 	МассивСтруктурСтрок = ОбщегоНазначенияБПВызовСервера.ДополнительнаяИнформация(Шапка,СписокДополнительныхПараметров, "uk");
	Если МассивСтруктурСтрок.Количество() > 0 Тогда
		ДоговорНаименованиеДляПечати = МассивСтруктурСтрок[0].ЗначениеПараметра;
	Иначе	
    	ДоговорНаименованиеДляПечати = "";
	КонецЕсли;
	
	// кто выписал налоговую накладную нужно формировать в виде "И.О. Фамилия"
	ПечКтоВыписалНалоговуюНакладную = "";
	ФИОКтоВыписалНалоговуюНакладную = РегистрыСведений.ФИОФизическихЛиц.СрезПоследних(ссылка.Дата, Новый Структура("ФизическоеЛицо", Шапка.КтоВыписалНалоговуюНакладную));
	Если ФИОКтоВыписалНалоговуюНакладную.Количество() > 0 Тогда
		ПечКтоВыписалНалоговуюНакладную =  ВРег(Лев(СокрЛ(ФИОКтоВыписалНалоговуюНакладную[0].Имя), 1))
										 + ". "
										 + ВРег(Лев(СокрЛ(ФИОКтоВыписалНалоговуюНакладную[0].Отчество), 1))
										 + ". "
										 + СокрЛП(ФИОКтоВыписалНалоговуюНакладную[0].Фамилия); 
	Иначе
		ПечКтоВыписалНалоговуюНакладную = "" + Шапка.КтоВыписалНалоговуюНакладную;									 
	КонецЕсли;

	Для Страница = 1 По 1 Цикл
		
		// Выводим отступ
		ОбластьМакета = Макет.ПолучитьОбласть("Пробел");
		ТабДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Оригинал");
		
		ТабДокумент.Вывести(ОбластьМакета);

		// Выводим заголовок накладной
		ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
		
		ОбластьМакета.Параметры.Заполнить(Шапка);
		
		//Дата налоговой
		ТекДатаНалоговой = Формат(Шапка.ДатаНалоговойНакладной, "ДФ=ddMMyyyy");
		Для Инд = 1 По 8 Цикл
			ОбластьМакета.Параметры["ДатаНалоговой_"+Инд]    = Сред(ТекДатаНалоговой, Инд, 1);
		КонецЦикла; 
		
		// Номер налоговой
		ТекНомерНалоговой = Прав("       " + СокрЛП(ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(Шапка.НалоговаяНакладная.Номер,Истина,Истина)), 7);
 		
		Для Инд = 1 По 7 Цикл                                                                 
			ОбластьМакета.Параметры["НомерНалоговой_"+Инд]    = Сред(ТекНомерНалоговой, Инд, 1);
		КонецЦикла; 
		
		// филиал/спецрежим налоговой
		ТекНомерФилиал = "";
		КодСпецРежима = ?(ЗначениеЗаполнено(Шапка.СпецРежимНалогообложения), "" + Шапка.СпецРежимНалогообложения, " "); //или пробел или одна цифра
		НомерФилиала  = ?(ЗначениеЗаполнено(Шапка.Префикс), Прав("    " + Формат(Число(Шапка.Префикс),"ЧЦ=4; ЧГ=0"), 4), "");  //число  4 символа, без лидирующих нулей
		Если ЗначениеЗаполнено(КодСпецРежима + НомерФилиала) Тогда
			ТекНомерФилиал	= ТекНомерФилиал + КодСпецРежима + НомерФилиала; 
		КонецЕсли;
		Для Инд = 1 По 5 Цикл                                                                 
			ОбластьМакета.Параметры["НомерФилиалНалоговой_"+Инд]    = Сред(ТекНомерФилиал, Инд, 1);
		КонецЦикла;			
		
		//Дата
		ТекДата = Формат(Шапка.Дата, "ДФ=ddMMyyyy");
		Для Инд = 1 По 8 Цикл
			ОбластьМакета.Параметры["Дата_"+Инд]    = Сред(ТекДата, Инд, 1);
		КонецЦикла; 
		
		ТабДокумент.Вывести(ОбластьМакета);

		// Выводим шапку накладной
		ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
		ТабДокумент.Вывести(ОбластьМакета);

		НомерПП = 0;
		// Выводим табличную часть
		ОбластьМакета = Макет.ПолучитьОбласть("Строка");
		Для каждого СтрокаТаблицы Из ТаблицаНоменклатуры Цикл
			// Теперь заполним
			ОбластьМакета.Параметры.Заполнить(СтрокаТаблицы);
			
			ОбластьМакета.Параметры.КодУКТВЭД = СтрЗаменить(ОбластьМакета.Параметры.КодУКТВЭД, " ", "");
			
			НомерПП = НомерПП + 1;
			ОбластьМакета.Параметры.НомерПП = НомерПП;
			
			ОбластьМакета.Параметры.ЕдиницаИзмеренияКод = УчетНДС.КодЕдиницыИзмеренияДляПечатиНалоговых(ОбластьМакета.Параметры.ЕдиницаИзмеренияКод);

			ОбластьМакета.Параметры.ДоговорКонтрагента = СокрЛП("" + ДоговорНаименованиеДляПечати + ", " + НазваниеОрганизации);
			
			ОбластьМакета.Параметры.Номенклатура = СокрЛП("" + СтрокаТаблицы.Номенклатура);
			
			ТабДокумент.Вывести(ОбластьМакета);
			                                          	
		КонецЦикла;
		
		// Выводим подвал накладной
		ОбластьМакета = Макет.ПолучитьОбласть("Подвал");
		
		ОбластьМакета.Параметры.Заполнить(Шапка);
		ОбластьМакета.Параметры.ИтогСуммаБезНДС = ТаблицаНоменклатуры.Итог("СуммаБезНДС");
		ОбластьМакета.Параметры.КтоВыписалНалоговуюНакладную = ПечКтоВыписалНалоговуюНакладную;
		
		ТабДокумент.Вывести(ОбластьМакета);

		Если Страница <> 2 Тогда
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
	КонецЦикла; 

	// В табличном документе зададим имя области, в которую был ¶
	// выведен объект. Нужно для возможности печати покомплектно.¶
	УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабДокумент, 
	1, ОбъектыПечати, Ссылка);
 	
	
	Возврат ТабДокумент;

КонецФункции // ПечатьДокумента()

Функция ПечатьДокументаНалоговыйКодекс2012(Ссылка, ОбъектыПечати, ПараметрыВывода) Экспорт	
		
	Перем СтруктураШапкиДокумента;
	Перем ТаблицаНоменклатуры, ТаблицаПоУслугам, ТаблицаПоОС, ТаблицаПоНМА;

	УстановитьПривилегированныйРежим(Истина);
	
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Дата КАК Дата,
	|	Контрагент.НаименованиеПолное КАК Контрагент,
	|	Организация КАК Организация,
	|	ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ДоговорКонтрагента.НаименованиеДляПечати КАК ДоговорНаименованиеДляПечати,	
	|   ДоговорКонтрагента.Номер КАК НомерДоговора,
	|   ДоговорКонтрагента.Дата  КАК ДатаДоговора,
	|	НалоговаяНакладная.Номер КАК НомерНалоговойНакладной,
	|	НалоговаяНакладная.СпецРежимНалогообложения КАК СпецРежимНалогообложения,
	|	НалоговаяНакладная.ОбособленноеПодразделение.НаименованиеДляНалоговыхДокументов КАК НаименованиеФилиала,
	|	НалоговаяНакладная.ОбособленноеПодразделение.Префикс КАК Префикс,
	|	НалоговаяНакладная,
	|	НалоговаяНакладная.Дата КАК ДатаНалоговойНакладной,
	|	КтоВыписалНалоговуюНакладную.Представление КАК КтоВыписалНалоговуюНакладную
	|ИЗ
	|	Документ.Приложение1КНалоговойНакладной КАК Приложение1
	|
	|ГДЕ
	|	Приложение1.Ссылка = &ТекущийДокумент";
	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();
	
	ПечататьКодУКТВЭДБезПробелов = Ложь;
	ПечататьДатыБезРазделителей = Ложь;
	ДополнитьНазваниеНомеромГТД = Ложь;
	УчетнаяПолитикаНеЗадана = Ложь;
	НастройкиПечати = РегистрыСведений.НастройкаПечатиНалоговыхДокументов.СрезПоследних(Ссылка.Дата, Новый Структура("Организация", Ссылка.Организация));
	Если НастройкиПечати.Количество() = 0 Тогда
		УчетнаяПолитикаНеЗадана	= Истина;
	Иначе
		НастройкиПечати = НастройкиПечати[0];	
	КонецЕсли;
	
	Если НЕ УчетнаяПолитикаНеЗадана тогда
		ПечататьКодУКТВЭДБезПробелов	 = НастройкиПечати.ПечататьКодУКТВЭДБезПробелов; 
		ПечататьДатыБезРазделителей    	 = НЕ НастройкиПечати.ПечататьДатыВНалоговыхНакладныхСРазделителями; 
		ДополнитьНазваниеНомеромГТД    	 = НЕ НастройкиПечати.НеДополнятьНаименованиеНомеромГТДВНалоговыхДокументах; 
	КонецЕсли;

	Объект = Ссылка.ПолучитьОбъект();
	
	// Подготовим таблицы
	СтруктураШапкиДокумента = ПодготовитьСтруктуруШапкиДокумента(Объект); 
	ПодготовитьТаблицыДокумента(Объект, СтруктураШапкиДокумента, ТаблицаНоменклатуры, ТаблицаПоУслугам, ТаблицаПоОС, ТаблицаПоНМА);

	// Загрузим все таблицы (кроме тары) в одну таблицу
	ОбщегоНазначенияБПВызовСервера.ЗагрузитьВТаблицуЗначений(ТаблицаПоУслугам, ТаблицаНоменклатуры);	
	ОбщегоНазначенияБПВызовСервера.ЗагрузитьВТаблицуЗначений(ТаблицаПоОС	    , ТаблицаНоменклатуры);	
	ОбщегоНазначенияБПВызовСервера.ЗагрузитьВТаблицуЗначений(ТаблицаПоНМА	, ТаблицаНоменклатуры);	
	
	// переименуем колонки
	ТаблицаНоменклатуры.Колонки.ЦенаМеста.Имя 					     = "ЦенаБезНДС";
	ТаблицаНоменклатуры.Колонки.СуммаБезНДСРегл.Имя 	 			 = "СуммаБезНДС";
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_Приложени1КНалоговойНакладной_Приложение1";
	
	СведенияОПродавце	= БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Шапка.Организация, Шапка.Дата);
	НазваниеОрганизации	= ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОПродавце,    "ПолноеНаименование,",Ложь);
	
	Макет = ПолучитьМакет("ПФ_MXL_UK_Приложение1КНалоговойНакладной2012");
	Макет.КодЯзыкаМакета = "ru";
		
	СписокДополнительныхПараметров = "ДоговорНаименованиеДляПечати,";
	МассивСтруктурСтрок = ОбщегоНазначенияБПВызовСервера.ДополнительнаяИнформация(Шапка,СписокДополнительныхПараметров, "uk");
	Если МассивСтруктурСтрок.Количество() > 0 Тогда
		ДоговорНаименованиеДляПечати = МассивСтруктурСтрок[0].ЗначениеПараметра;
	Иначе	
    	 ДоговорНаименованиеДляПечати = "";
	КонецЕсли;

	Для Страница = 1 По 2 Цикл
	
		// Выводим отступ
		ОбластьМакета = Макет.ПолучитьОбласть("Пробел");
		ТабДокумент.Вывести(ОбластьМакета);

		// Выводим область оригинал/копия
		Если Страница = 1 Тогда
			ОбластьМакета = Макет.ПолучитьОбласть("Оригинал");
			ТабДокумент.Вывести(ОбластьМакета);
		ИначеЕсли Страница = 2 Тогда
			ОбластьМакета = Макет.ПолучитьОбласть("ПерваяКопия");
			ТабДокумент.Вывести(ОбластьМакета);
		КонецЕсли;

		// Выводим заголовок накладной
		ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
		
		ОбластьМакета.Параметры.Заполнить(Шапка);
		
		//Дата налоговой
		ТекДатаНалоговой = Формат(Шапка.ДатаНалоговойНакладной, "ДФ=ddMMyyyy");
		Для Инд = 1 По 8 Цикл
			ОбластьМакета.Параметры["ДатаНалоговой_"+Инд]    = Сред(ТекДатаНалоговой, Инд, 1);
		КонецЦикла; 
		
		// Номер налоговой
	 	ТекНомерНалоговой = Прав("0000000" + СокрЛП(ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(Шапка.НалоговаяНакладная.Номер,Истина,Истина)), 7);
		Для Инд = 1 По 7 Цикл                                                                 
			ОбластьМакета.Параметры["НомерНалоговой_"+Инд]    = Сред(ТекНомерНалоговой, Инд, 1);
		КонецЦикла; 
		
		// филиал/спецрежим налоговой
		ТекНомерФилиал = "";
		КодСпецРежима = ?(ЗначениеЗаполнено(Шапка.СпецРежимНалогообложения), "" + Шапка.СпецРежимНалогообложения, " "); //или пробел или одна цифра
		НомерФилиала  = ?(ЗначениеЗаполнено(Шапка.Префикс), Прав("0000" + СокрЛП(Шапка.Префикс), 4), "");  //число, сведущими нулями, 4 символа 
		Если ЗначениеЗаполнено(КодСпецРежима + НомерФилиала) Тогда
			ТекНомерФилиал	= ТекНомерФилиал + КодСпецРежима + НомерФилиала; 
		КонецЕсли;
		Для Инд = 1 По 5 Цикл                                                                 
			ОбластьМакета.Параметры["НомерФилиалНалоговой_"+Инд]    = Сред(ТекНомерФилиал, Инд, 1);
		КонецЦикла;			
		
		//Дата
		ТекДата = Формат(Шапка.Дата, "ДФ=ddMMyyyy");
		Для Инд = 1 По 8 Цикл
			ОбластьМакета.Параметры["Дата_"+Инд]    = Сред(ТекДата, Инд, 1);
		КонецЦикла; 
		
		ТабДокумент.Вывести(ОбластьМакета);

		// Выводим шапку накладной
		ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
		ТабДокумент.Вывести(ОбластьМакета);

		НомерПП = 0;
		// Выводим табличную часть
		ОбластьМакета = Макет.ПолучитьОбласть("Строка");
		Для каждого СтрокаТаблицы Из ТаблицаНоменклатуры Цикл
			// Теперь заполним
			ОбластьМакета.Параметры.Заполнить(СтрокаТаблицы);
			
			Если ПечататьКодУКТВЭДБезПробелов Тогда
				ОбластьМакета.Параметры.КодУКТВЭД = СтрЗаменить(ОбластьМакета.Параметры.КодУКТВЭД, " ", "");
			КонецЕсли;
			
			НомерПП = НомерПП + 1;
			ОбластьМакета.Параметры.НомерПП = НомерПП;

			// Договор + продавец
			ОбластьМакета.Параметры.ДоговорКонтрагента = "" + ДоговорНаименованиеДляПечати + ", " + НазваниеОрганизации;
			ОбластьМакета.Параметры.ДоговорКонтрагента = СокрЛП(ОбластьМакета.Параметры.ДоговорКонтрагента);
			
			// номенклатура с учетом харакетристики
			ОбластьМакета.Параметры.Номенклатура = СокрП("" + СтрокаТаблицы.Номенклатура) 
												 + ?(ДополнитьНазваниеНомеромГТД И ЗначениеЗаполнено(СтрокаТаблицы.НомерГТД), ". ВМД №: " + СтрокаТаблицы.НомерГТД + ", дата ВМД: " + Формат(СтрокаТаблицы.ДатаГТД, ?(ПечататьДатыБезРазделителей,"ДФ=ddMMyyyy","ДФ=dd.MM.yyyy")), "");
												 ;
			ОбластьМакета.Параметры.Номенклатура = СокрЛП(ОбластьМакета.Параметры.Номенклатура);
			
			ТабДокумент.Вывести(ОбластьМакета);
		КонецЦикла;
		
		
		// Выводим подвал накладной
		ОбластьМакета = Макет.ПолучитьОбласть("Подвал");
		
		ОбластьМакета.Параметры.Заполнить(Шапка);
		ОбластьМакета.Параметры.ИтогСуммаБезНДС = ТаблицаНоменклатуры.Итог("СуммаБезНДС");
		
		ТабДокумент.Вывести(ОбластьМакета);

		Если Страница <> 2 Тогда
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
	КонецЦикла; 
	
	// В табличном документе зададим имя области, в которую был 
	// выведен объект. Нужно для возможности печати покомплектно.
	УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабДокумент, 
		1, ОбъектыПечати, Ссылка);

	Возврат ТабДокумент;

КонецФункции // ПечатьДокумента()

Функция ПечатьДокументаНалоговыйКодекс(Ссылка, ОбъектыПечати, ПараметрыВывода) Экспорт	
		
	Перем СтруктураШапкиДокумента;
	Перем ТаблицаНоменклатуры, ТаблицаПоУслугам, ТаблицаПоОС, ТаблицаПоНМА;

	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Дата КАК Дата,
	|	Контрагент.НаименованиеПолное КАК Контрагент,
	|	Организация КАК Организация,
	|	ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ДоговорКонтрагента.НаименованиеДляПечати КАК ДоговорНаименованиеДляПечати,	
	|   ДоговорКонтрагента.Номер КАК НомерДоговора,
	|   ДоговорКонтрагента.Дата  КАК ДатаДоговора,
	|	НалоговаяНакладная.Номер КАК НомерНалоговойНакладной,
	|	НалоговаяНакладная.СпецРежимНалогообложения КАК СпецРежимНалогообложенияНалоговойНакладной,
	|	НалоговаяНакладная,
	|	НалоговаяНакладная.Дата КАК ДатаНалоговойНакладной,
	|	КтоВыписалНалоговуюНакладную.Представление КАК КтоВыписалНалоговуюНакладную
	|ИЗ
	|	Документ.Приложение1КНалоговойНакладной КАК Приложение1
	|
	|ГДЕ
	|	Приложение1.Ссылка = &ТекущийДокумент";
	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();
	
	Объект = Ссылка.ПолучитьОбъект();

	// Подготовим таблицы
	СтруктураШапкиДокумента = ПодготовитьСтруктуруШапкиДокумента(Объект); 
	ПодготовитьТаблицыДокумента(Объект, СтруктураШапкиДокумента, ТаблицаНоменклатуры, ТаблицаПоУслугам, ТаблицаПоОС, ТаблицаПоНМА);

	// Загрузим все таблицы (кроме тары) в одну таблицу
	ОбщегоНазначенияБПВызовСервера.ЗагрузитьВТаблицуЗначений(ТаблицаПоУслугам, ТаблицаНоменклатуры);	
	ОбщегоНазначенияБПВызовСервера.ЗагрузитьВТаблицуЗначений(ТаблицаПоОС	  , ТаблицаНоменклатуры);	
	ОбщегоНазначенияБПВызовСервера.ЗагрузитьВТаблицуЗначений(ТаблицаПоНМА	  , ТаблицаНоменклатуры);	
	
	// переименуем колонки
	ТаблицаНоменклатуры.Колонки.ЦенаМеста.Имя 					     = "ЦенаБезНДС";
	ТаблицаНоменклатуры.Колонки.СуммаБезНДСРегл.Имя 	 			 = "СуммаБезНДС";
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_Приложени1КНалоговойНакладной_Приложение1";
	
	СведенияОПродавце	= БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Шапка.Организация, Шапка.Дата);
	НазваниеОрганизации	= ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОПродавце,    "ПолноеНаименование,",Ложь);
	
	Макет = ПолучитьМакет("ПФ_MXL_UK_Приложение1КНалоговойНакладной");
	
	Если Ссылка.Дата >= '20110110' Тогда
		Макет = ПолучитьМакет("ПФ_MXL_UK_Приложение1КНалоговойНакладной2011");
	КонецЕсли;
	
	СписокДополнительныхПараметров = "ДоговорНаименованиеДляПечати,";
	МассивСтруктурСтрок = ОбщегоНазначенияБПВызовСервера.ДополнительнаяИнформация(Шапка,СписокДополнительныхПараметров, "uk");
	Если МассивСтруктурСтрок.Количество() > 0 Тогда
		ДоговорНаименованиеДляПечати = МассивСтруктурСтрок[0].ЗначениеПараметра;
	Иначе	
    	 ДоговорНаименованиеДляПечати = "";
	КонецЕсли;

	Для Страница = 1 По 2 Цикл
	
		// Выводим отступ
		ОбластьМакета = Макет.ПолучитьОбласть("Пробел");
		ТабДокумент.Вывести(ОбластьМакета);

		// Выводим область оригинал/копия
		Если Страница = 1 Тогда
			ОбластьМакета = Макет.ПолучитьОбласть("Оригинал");
			ТабДокумент.Вывести(ОбластьМакета);
		ИначеЕсли Страница = 2 Тогда
			ОбластьМакета = Макет.ПолучитьОбласть("ПерваяКопия");
			ТабДокумент.Вывести(ОбластьМакета);
		КонецЕсли;

		// Выводим заголовок накладной
		ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
		
		ОбластьМакета.Параметры.Заполнить(Шапка);
		
		Если Ссылка.Дата <'20110110' Тогда
			ОбластьМакета.Параметры.ДатаНалоговойНакладной  = Формат(Шапка.ДатаНалоговойНакладной, "ДФ=dd.MM.yy" );
			ОбластьМакета.Параметры.НомерНалоговойНакладной = ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(Шапка.НалоговаяНакладная);
		Иначе	
		
			//Дата налоговой
			ТекДатаНалоговой = Формат(Шапка.ДатаНалоговойНакладной, "ДФ=ddMMyyyy");
			Для Инд = 1 По 8 Цикл
				ОбластьМакета.Параметры["ДатаНалоговой_"+Инд]    = Сред(ТекДатаНалоговой, Инд, 1);
			КонецЦикла; 
			
			// Номер налоговой
			ТекНомерНалоговой = Прав("       " + СокрЛП(ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(Шапка.НалоговаяНакладная)), 7);
			Для Инд = 1 По 7 Цикл                                                                 
				ОбластьМакета.Параметры["НомерНалоговой_"+Инд]    = Сред(ТекНомерНалоговой, Инд, 1);
			КонецЦикла; 
			
			// филиал/спецрежим налоговой
			ТекНомерФилиалНалоговой = "";
			Если ЗначениеЗаполнено(Шапка.СпецРежимНалогообложенияНалоговойНакладной) Тогда
				ТекНомерФилиалНалоговой	= "" + Шапка.СпецРежимНалогообложенияНалоговойНакладной + ТекНомерФилиалНалоговой; 
			КонецЕсли;
			Для Инд = 1 По 4 Цикл                                                                 
				ОбластьМакета.Параметры["НомерФилиалНалоговой_"+Инд]    = Сред(ТекНомерФилиалНалоговой, Инд, 1);
			КонецЦикла;			
			
			//Дата
			ТекДата = Формат(Шапка.Дата, "ДФ=ddMMyyyy");
			Для Инд = 1 По 8 Цикл
				ОбластьМакета.Параметры["Дата_"+Инд]    = Сред(ТекДата, Инд, 1);
			КонецЦикла; 
		
		КонецЕсли;
		
		ТабДокумент.Вывести(ОбластьМакета);

		// Выводим шапку накладной
		ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
		ТабДокумент.Вывести(ОбластьМакета);

		НомерПП = 0;
		// Выводим табличную часть
		ОбластьМакета = Макет.ПолучитьОбласть("Строка");
		Для каждого СтрокаТаблицы Из ТаблицаНоменклатуры Цикл
			// Теперь заполним
			ОбластьМакета.Параметры.Заполнить(СтрокаТаблицы);
			
			НомерПП = НомерПП + 1;
			ОбластьМакета.Параметры.НомерПП = НомерПП;

			// Договор + продавец
			ОбластьМакета.Параметры.ДоговорКонтрагента = "" + ДоговорНаименованиеДляПечати + ", " + НазваниеОрганизации;
			ОбластьМакета.Параметры.ДоговорКонтрагента = СокрЛП(ОбластьМакета.Параметры.ДоговорКонтрагента);
			
			// номенклатура с учетом харакетристики
			ОбластьМакета.Параметры.Номенклатура = "" + СтрокаТаблицы.Номенклатура;
			ОбластьМакета.Параметры.Номенклатура = СокрЛП(ОбластьМакета.Параметры.Номенклатура);
			
			ТабДокумент.Вывести(ОбластьМакета);
		КонецЦикла;
		
		
		// Выводим подвал накладной
		ОбластьМакета = Макет.ПолучитьОбласть("Подвал");
		
		ОбластьМакета.Параметры.Заполнить(Шапка);
		ОбластьМакета.Параметры.ИтогСуммаБезНДС = ТаблицаНоменклатуры.Итог("СуммаБезНДС");
		
		ТабДокумент.Вывести(ОбластьМакета);

		Если Страница <> 2 Тогда
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
	КонецЦикла; 
	
	// В табличном документе зададим имя области, в которую был 
	// выведен объект. Нужно для возможности печати покомплектно.
	УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабДокумент, 
		1, ОбъектыПечати, Ссылка);

	Возврат ТабДокумент;

КонецФункции // ПечатьДокумента()

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходмое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	ПараметрыВывода.ДоступнаПечатьПоКомплектно = Истина;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "Приложение1КНалоговойНакладной") Тогда
			
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,
		    			"Приложение1КНалоговойНакладной", 
						НСтр("ru='Приложение 1 к налоговой накладной';uk='Додаток 1 до податкової накладної'"),
						ПечатьДокумента(МассивОбъектов, ОбъектыПечати, ПараметрыВывода),,
						Истина);
			
	КонецЕсли;	
 	
КонецПроцедуры // Печать

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходмое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Функция  ПечатьДокумента(МассивОбъектов, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	
	ПервыйДокумент = Истина;
		
	Для Каждого Ссылка Из МассивОбъектов  Цикл
		
		Если Не ПервыйДокумент Тогда
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		// Запомним номер строки, с которой начали выводить текущий документ.
		НомерСтрокиНачало = ТабДокумент.ВысотаТаблицы + 1;
	
		ТекРабочаяДата = ТекущаяДата();
		ТабДокументСформирован = Ложь;
		Если ТекРабочаяДата >= '2016-04-01' Тогда
			
			// начиная с 04.2016 выгрузка в ЕРНН должна осуществляется по форме НА ДАТУ РЕГИСТРАЦИИ??!!
			// проверим соответствующую настройку (возможно данное положение со временем будет отменено)
			НастройкаПечати = НалоговыйУчетПовтИсп.НастройкаПечатиНалоговыхДокументов(Ссылка.Организация, ТекРабочаяДата);
			ВыгрузкаПечатьНН_ПоФормеНаДатуДокумента = НастройкаПечати.ВыгрузкаПечатьНН_ПоФормеНаДатуДокумента; 
			
			Если НЕ ВыгрузкаПечатьНН_ПоФормеНаДатуДокумента = Истина Тогда
				// печатную форму выбираем в зависимости не от даты док, а от рабочей даты
				Если ТекРабочаяДата >= '2016-04-01' Тогда
					
					НовТабДокумент = ПечатьДокументаНалоговыйКодекс2016(Ссылка, ОбъектыПечати, ПараметрыВывода);
					ТабДокументСформирован = Истина;
					
				КонецЕсли;	
				
			КонецЕсли;
			
		КонецЕсли;	
		
		Если НЕ ТабДокументСформирован Тогда
			
			НовТабДокумент = ?(Ссылка.Дата >= '20160401',
					ПечатьДокументаНалоговыйКодекс2016(Ссылка, ОбъектыПечати, ПараметрыВывода),
				?(Ссылка.Дата >= '20150101', 
						ПечатьДокументаНалоговыйКодекс2015(Ссылка, ОбъектыПечати, ПараметрыВывода), 
					?(Ссылка.Дата >= '20111216', 
							ПечатьДокументаНалоговыйКодекс2012(Ссылка, ОбъектыПечати, ПараметрыВывода), 
							ПечатьДокументаНалоговыйКодекс(Ссылка, ОбъектыПечати, ПараметрыВывода))));
							
		КонецЕсли;
								
		ТабДокумент.Вывести(НовТабДокумент);
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабДокумент, НомерСтрокиНачало, ОбъектыПечати, Ссылка);
								
	КонецЦикла;

	Возврат ТабДокумент;
 	
КонецФункции // ПечатьДокумента

Функция ПолучитьДополнительныеРеквизитыДляРеестра() Экспорт
	
	Результат = Новый Структура("Информация", "Контрагент");
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти 

#Область СлужебныеПроцедурыИФункции

// Процедура заполняет колонки таблицы товаров, которые будут в дальнейшем использоваться
// для формирования движений  и печати
Процедура ДобавитьКолонкиТоваровРеглЛокально(Объект, ТаблицаТоваров, СтруктураШапкиДокумента) 
	
	мВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	
	// Суммы в документе в валюте документа
	ТаблицаТоваров.Колонки.Добавить("СуммаБезНДСВал"        , ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаТоваров.Колонки.Добавить("СуммаНДСВал"           , ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаТоваров.Колонки.Добавить("СуммаСНДСВал"          , ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповЧисла(15,2));
	
	// Суммы в документе в валюте регл. учета
	ТаблицаТоваров.Колонки.Добавить("СуммаБезНДСРегл"        , ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаТоваров.Колонки.Добавить("СуммаНДСРегл"           , ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаТоваров.Колонки.Добавить("СуммаСНДСРегл"          , ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповЧисла(15,2));
	
	// Колонки, необходимые для печати документа
	ТаблицаТоваров.Колонки.Добавить("ЦенаМеста", ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповЧисла(18,5));
	
	
	Для каждого СтрокаТаблицы Из ТаблицаТоваров Цикл
		
		// Рассчитаем суммы в документе в валюте документа
		СтрокаТаблицы.СуммаСНДСВал    = СтрокаТаблицы.Сумма + ?(Объект.СуммаВключаетНДС, 0, СтрокаТаблицы.НДС);
		СтрокаТаблицы.СуммаНДСВал     = СтрокаТаблицы.НДС;
		СтрокаТаблицы.СуммаБезНДСВал  = СтрокаТаблицы.СуммаСНДСВал - СтрокаТаблицы.СуммаНДСВал;
		
		// Рассчитаем суммы в документе в валюте регл. учета
		Если СтруктураШапкиДокумента.ВалютаДокумента = СтруктураШапкиДокумента.ВалютаРегламентированногоУчета Тогда
			СтрокаТаблицы.СуммаСНДСРегл = СтрокаТаблицы.СуммаСНДСВал;
			СтрокаТаблицы.СуммаНДСРегл  = СтрокаТаблицы.СуммаНДСВал;
		Иначе
			СтрокаТаблицы.СуммаСНДСРегл = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.СуммаСНДСВал, 
												СтруктураШапкиДокумента.ВалютаДокумента,
												СтруктураШапкиДокумента.ВалютаРегламентированногоУчета, 
												ЗаполнениеДокументов.КурсДокумента(Объект, мВалютаРегламентированногоУчета), 
												1,
												ЗаполнениеДокументов.КратностьДокумента(Объект, мВалютаРегламентированногоУчета),
												1);
			СтрокаТаблицы.СуммаНДСРегл  = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.СуммаНДСВал, 
												СтруктураШапкиДокумента.ВалютаДокумента,
												СтруктураШапкиДокумента.ВалютаРегламентированногоУчета, 
												ЗаполнениеДокументов.КурсДокумента(Объект, мВалютаРегламентированногоУчета), 
												1,
												ЗаполнениеДокументов.КратностьДокумента(Объект, мВалютаРегламентированногоУчета),
												1);
		КонецЕсли;
		СтрокаТаблицы.СуммаБезНДСРегл = СтрокаТаблицы.СуммаСНДСРегл - СтрокаТаблицы.СуммаНДСРегл;
		
	
		СтрокаТаблицы.ЦенаМеста 	  = СтрокаТаблицы.СуммаБезНДСРегл /?(СтрокаТаблицы.Количество = 0, 1, СтрокаТаблицы.Количество);
	КонецЦикла;
	
КонецПроцедуры

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТоварам - результат запроса по табличной части "Товары",
//  СтруктураШапкиДокумента   - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблиица значений.
//
Функция ПодготовитьТаблицуТоваров(Объект, РезультатЗапросаПоТоварам, СтруктураШапкиДокумента)

	ТаблицаТоваров = РезультатЗапросаПоТоварам.Выгрузить();
	
	ДобавитьКолонкиТоваровРеглЛокально(Объект, ТаблицаТоваров, СтруктураШапкиДокумента);

	Возврат ТаблицаТоваров;

КонецФункции // ПодготовитьТаблицуТоваров()

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТоварам - результат запроса по табличной части "Товары",
//  СтруктураШапкиДокумента   - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблиица значений.
//
Функция ПодготовитьТаблицуУслуг(Объект, РезультатЗапросаПоУслугам, СтруктураШапкиДокумента)

	ТаблицаПоУслугам = РезультатЗапросаПоУслугам.Выгрузить();
	
	ДобавитьКолонкиТоваровРеглЛокально(Объект, ТаблицаПоУслугам, СтруктураШапкиДокумента);

	Возврат ТаблицаПоУслугам;

КонецФункции // ПодготовитьТаблицуТоваров()

Функция ПодготовитьТаблицуОС(Объект, РезультатЗапросаПоОС, СтруктураШапкиДокумента)

	ТаблицаПоОС = РезультатЗапросаПоОС.Выгрузить();
	
	ДобавитьКолонкиТоваровРеглЛокально(Объект, ТаблицаПоОС, СтруктураШапкиДокумента);

	Возврат ТаблицаПоОС;

КонецФункции // ПодготовитьТаблицуОС()

Функция ПодготовитьТаблицуНМА(Объект, РезультатЗапросаПоНМА, СтруктураШапкиДокумента)

	ТаблицаПоНМА = РезультатЗапросаПоНМА.Выгрузить();
	
	ДобавитьКолонкиТоваровРеглЛокально(Объект, ТаблицаПоНМА, СтруктураШапкиДокумента);

	Возврат ТаблицаПоНМА;

КонецФункции // ПодготовитьТаблицуНМА()

#КонецОбласти

#КонецЕсли