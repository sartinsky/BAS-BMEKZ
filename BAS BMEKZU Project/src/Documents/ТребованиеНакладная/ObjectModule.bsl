#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

Перем мВалютаРегламентированногоУчета;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА







////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА


Процедура ПодготовитьПараметрыУчетнойПолитики(СтруктураШапкиДокумента, Отказ, Заголовок)

	СтруктураШапкиДокумента.Вставить("ЕстьНалогНаПрибыльДо2015"       , УчетнаяПолитика.ПлательщикНалогаНаПрибыльДо2015(Организация, Дата));
	СтруктураШапкиДокумента.Вставить("ЕстьНДС"                        , УчетнаяПолитика.ПлательщикНДС(Организация, Дата));
	
КонецПроцедуры // ПодготовитьПараметрыУчетнойПолитики()

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТоварам - результат запроса по табличной части "Товары",
//  СтруктураШапкиДокумента   - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблиица значений.
//
Функция ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента)

	ТаблицаМатериалов = РезультатЗапросаПоТоварам.Выгрузить();

//	ТаблицаМатериалов.Колонки.Добавить("ДокументОприходования");
	ТаблицаМатериалов.Колонки.Добавить("Регистратор");
	ТаблицаМатериалов.Колонки.Добавить("Склад");
	ТаблицаМатериалов.Колонки.Добавить("Организация");
	ТаблицаМатериалов.Колонки.Добавить("ДоговорКонтрагента");
	ТаблицаМатериалов.Колонки.Добавить("Валюта");
	ТаблицаМатериалов.Колонки.Добавить("ВходящийНДС");
	ТаблицаМатериалов.Колонки.Добавить("КоэффОплаты");
	
	КоэффОплаты      = 1;
	
	ТаблицаМатериалов.ЗаполнитьЗначения(КоэффОплаты,   							"КоэффОплаты");
	ТаблицаМатериалов.ЗаполнитьЗначения(ЭтотОбъект,    							"Регистратор");
	ТаблицаМатериалов.ЗаполнитьЗначения(СтруктураШапкиДокумента.Склад,      	"Склад");
	ТаблицаМатериалов.ЗаполнитьЗначения(СтруктураШапкиДокумента.Организация,	"Организация");
	Если НЕ СчетаУчетаЗатратВТаблице  Тогда
		ТаблицаМатериалов.Колонки.Добавить("КорСчетСписанияБУ");
		ТаблицаМатериалов.Колонки.Добавить("КорСубконтоСписанияБУ1");
		ТаблицаМатериалов.Колонки.Добавить("КорСубконтоСписанияБУ2");
		ТаблицаМатериалов.Колонки.Добавить("КорСубконтоСписанияБУ3"); 
		ТаблицаМатериалов.Колонки.Добавить("НалоговоеНазначениеНовое");
		
		// ИНАГРО++
		ТаблицаМатериалов.Колонки.Добавить("Субконто1");
		ТаблицаМатериалов.Колонки.Добавить("Субконто2");
		ТаблицаМатериалов.Колонки.Добавить("Субконто3");		
		ТаблицаМатериалов.ЗаполнитьЗначения(Субконто1, "Субконто1");
		ТаблицаМатериалов.ЗаполнитьЗначения(Субконто2, "Субконто2");
		ТаблицаМатериалов.ЗаполнитьЗначения(Субконто3, "Субконто3");
		// ИНАГРО--
		
		ТаблицаМатериалов.ЗаполнитьЗначения(СчетЗатрат,    				"КорСчетСписанияБУ");
		ТаблицаМатериалов.ЗаполнитьЗначения(Субконто1,     				"КорСубконтоСписанияБУ1");
		ТаблицаМатериалов.ЗаполнитьЗначения(Субконто2,     				"КорСубконтоСписанияБУ2");
		ТаблицаМатериалов.ЗаполнитьЗначения(Субконто3,     				"КорСубконтоСписанияБУ3");
		ТаблицаМатериалов.ЗаполнитьЗначения(НалоговоеНазначениеДоходовИЗатрат,"НалоговоеНазначениеНовое");
		
	КонецЕсли;
	
	ТаблицаМатериалов.Колонки.Добавить("ХарактерЗатрат");
	Для Каждого Строка Из ТаблицаМатериалов Цикл
		
		// заполним ХарактерЗатрат, НалоговоеНазначениеНовое
		
		НалоговыйУчет.ОпределениеАналитикиНалоговогоУчетаВПроводкахДляЗатрат(Строка, Строка.КорСчетСписанияБУ, Строка.ХарактерЗатрат,
														       	Строка.НалоговоеНазначениеНовое, ,                                                   
																Строка.НалоговоеНазначение, Строка.НалоговоеНазначениеНовое, "КорСубконтоСписанияБУ",Дата
																,,СтруктураШапкиДокумента.ЕстьНДС
																);
		
	КонецЦикла;	
	
	Возврат ТаблицаМатериалов;

КонецФункции // ПодготовитьТаблицуТоваров()

 // Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТоварам - результат запроса по табличной части "Товары",
//  СтруктураШапкиДокумента   - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблиица значений.
//
Функция ПодготовитьТаблицуМатериалыЗаказчика(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента)

	ТаблицаМатериалов = РезультатЗапросаПоТоварам.Выгрузить();

	ТаблицаМатериалов.Колонки.Добавить("ДокументОприходования");
	ТаблицаМатериалов.Колонки.Добавить("Регистратор");
	ТаблицаМатериалов.Колонки.Добавить("Склад");
	ТаблицаМатериалов.Колонки.Добавить("Организация");
	ТаблицаМатериалов.Колонки.Добавить("ДоговорКонтрагента");
	//ТаблицаМатериалов.Колонки.Добавить("ОтражениеВНУ");
	ТаблицаМатериалов.Колонки.Добавить("Валюта");
	ТаблицаМатериалов.Колонки.Добавить("ВходящийНДС");
	ТаблицаМатериалов.Колонки.Добавить("КоэффОплаты");
	
	ТаблицаМатериалов.Колонки.Добавить("КорСубконтоСписанияБУ1");
	ТаблицаМатериалов.Колонки.Добавить("КорСубконтоСписанияБУ2");
	ТаблицаМатериалов.Колонки.Добавить("КорСубконтоСписанияБУ3");
	
	ТаблицаМатериалов.Колонки.Добавить("СчетУчетаНУ");

	КоэффОплаты      = 1;
	
	
	ТаблицаМатериалов.ЗаполнитьЗначения(КоэффОплаты,   							"КоэффОплаты");
	ТаблицаМатериалов.ЗаполнитьЗначения(ЭтотОбъект,    							"Регистратор");
	ТаблицаМатериалов.ЗаполнитьЗначения(СтруктураШапкиДокумента.Склад,       	"Склад");
	ТаблицаМатериалов.ЗаполнитьЗначения(СтруктураШапкиДокумента.Организация, 	"Организация");
	ТаблицаМатериалов.ЗаполнитьЗначения(Контрагент,     						"КорСубконтоСписанияБУ1");
	ТаблицаМатериалов.ЗаполнитьЗначения(Субконто2,     							"КорСубконтоСписанияБУ2");
	ТаблицаМатериалов.ЗаполнитьЗначения(Субконто3,     							"КорСубконтоСписанияБУ3");
	

	Возврат ТаблицаМатериалов;

КонецФункции // ПодготовитьТаблицуТоваров()

// Функция списания материалов с регистра ТоварыНаСкладе
//
Процедура ДвиженияПоРегистрам(СтруктураШапкиДокумента, ТаблицаМатериалов, ТаблицаДавальческихМатериалов, Отказ, Заголовок, РежимПроведения)

	УправлениеЗапасамиПартионныйУчет.ДвижениеПартийТоваров(ТаблицаМатериалов, Отказ);
	
	Если ВидОперации = Перечисления.ВидыОперацийТребованиеНакладная.Материалы Тогда
		УправлениеЗапасамиПартионныйУчет.ДвижениеПартийТоваров(ТаблицаДавальческихМатериалов, Отказ);
	КонецЕсли;
	
	// ИНАГРО++
	ИНАГРО_Общий.ИНАГРО_ДвиженияЗатратыОрганизации_Приход(СтруктураШапкиДокумента, Движения);
	
	Если СтруктураШапкиДокумента.ИНАГРО_УказатьОС Тогда
		ИНАГРО_Транспорт.ИНАГРО_ДвижениеПоМатериаламСписаннымНаТранспорт(Движения, ТаблицаМатериалов, СтруктураШапкиДокумента);
	КонецЕсли;	
	
	Если ИНАГРО_ОбщийВызовСервераПовтИсп.ЕстьБСПУ() Тогда
		КопияТаблицаПоТоварам = ТаблицаМатериалов.Скопировать();
		КопияТаблицаПоТоварам.Колонки.Добавить("НаправлениеДвижения");
		КопияТаблицаПоТоварам.ЗаполнитьЗначения(Справочники.ИНАГРО_ВидыДвиженийВедомости.ВПроизводство, "НаправлениеДвижения");
		ИНАГРО_Общий.ИНАГРО_ВедомостьДвиженийРасход(Движения, КопияТаблицаПоТоварам, СтруктураШапкиДокумента);
	КонецЕсли;	   
	// ИНАГРО-- 
	
КонецПроцедуры

// Процедура формирует структуру шапки документа и дополнительных полей.
//
Процедура ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента) Экспорт
	
	// Дерево значений, содержащее имена необходимых полей в запросе по шапке.
	Перем ДеревоПолейЗапросаПоШапке;
	

	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента = ОбщегоНазначенияРед12.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	
	СтруктураШапкиДокумента.Вставить("СписаниеНаОбъектСтроительства", Ложь);
	Субконто = Неопределено;
	
	Для Н = 1 По 3 Цикл
		
		Если СтруктураШапкиДокумента.Свойство("Субконто" + Н, Субконто) Тогда
			
			Если ТипЗнч(Субконто) = Тип("СправочникСсылка.ОбъектыСтроительства") Тогда
				
				 СтруктураШапкиДокумента.СписаниеНаОбъектСтроительства = Истина;
				 СтруктураШапкиДокумента.Вставить("ОбъектСтроительства", Субконто);
				 НалоговоеНазначениеОС = Субконто.НалоговоеНазначение;
				 СтруктураШапкиДокумента.Вставить("НалоговоеНазначениеОС"     , НалоговоеНазначениеОС);
				 СтруктураШапкиДокумента.Вставить("ВидНалоговойДеятельностиОС", НалоговоеНазначениеОС.ВидНалоговойДеятельности);
				 Прервать
				
			КонецЕсли;
			
		КонецЕсли;	
	
	КонецЦикла;
	
	// Заполним по шапке документа дерево параметров, нужных при проведении.
	ДеревоПолейЗапросаПоШапке = ОбщегоНазначенияРед12.СформироватьДеревоПолейЗапросаПоШапке();
	ОбщегоНазначенияРед12.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Склад" , "ТипСклада" , "ТипСклада");

	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа
	СтруктураШапкиДокумента = УправлениеЗапасами.СформироватьЗапросПоДеревуПолей(ЭтотОбъект, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета);
	
КонецПроцедуры // ПодготовитьСтруктуруШапкиДокумента()

// Процедура формирует таблицы документа.
//
Процедура ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаМатериалов, ТаблицаДавальческихМатериалов, Отказ, Заголовок) Экспорт
	
	СтруктураПолей = Новый Структура();
	СтруктураПолей.Вставить("НомерСтроки"				, "НомерСтроки");
	СтруктураПолей.Вставить("Номенклатура"				, "Номенклатура");
	СтруктураПолей.Вставить("Услуга"					, "Номенклатура.Услуга");
	СтруктураПолей.Вставить("БланкСтрогогоУчета"		, "Номенклатура.БланкСтрогогоУчета");
	СтруктураПолей.Вставить("Количество"				, "Количество * Коэффициент");
	СтруктураПолей.Вставить("СчетУчетаБУ"				, "Счет");
	
	СтруктураПолей.Вставить("НалоговоеНазначение"		, "НалоговоеНазначение");
	СтруктураПолей.Вставить("ВидДеятельностиНДС"		, "НалоговоеНазначение.ВидДеятельностиНДС");
	СтруктураПолей.Вставить("ДокументОприходования"		, "ДокументОприходования");
	СтруктураПолей.Вставить("Себестоимость"		   		, "Себестоимость");
	СтруктураПолей.Вставить("СебестоимостьНУ"		   	, "СебестоимостьНУ");
	
	Если СчетаУчетаЗатратВТаблице Тогда
		СтруктураПолей.Вставить("КорСчетСписанияБУ"      , "СчетЗатрат");
		СтруктураПолей.Вставить("КорСубконтоСписанияБУ1" , "СтатьяЗатрат");
		СтруктураПолей.Вставить("КорСубконтоСписанияБУ2" , "НоменклатурнаяГруппа"); 				
		СтруктураПолей.Вставить("КорСубконтоСписанияБУ3" , "Ссылка.ПодразделениеОрганизации");
		СтруктураПолей.Вставить("НалоговоеНазначениеНовое" , "НалоговоеНазначениеДоходовИЗатрат");
	КонецЕсли;
	
	// ИНАГРО++
	Если ИНАГРО_УказатьОС Тогда  
		Если ИНАГРО_ВТабличнойЧасти Тогда
			СтруктураПолей.Вставить("ОсновноеСредство", "ИНАГРО_ОсновноеСредство");
		Иначе	
			СтруктураПолей.Вставить("ОсновноеСредство", "Ссылка.ИНАГРО_ОсновноеСредство");
		КонецЕсли;
	КонецЕсли;
	// ИНАГРО--
	
	РезультатЗапросаПоМатериалам = ОбщегоНазначенияРед12.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Материалы", СтруктураПолей);

	// Подготовим таблицу товаров для проведения.
	ТаблицаМатериалов = ПодготовитьТаблицуТоваров(РезультатЗапросаПоМатериалам, СтруктураШапкиДокумента);
	
	Если ВидОперации = Перечисления.ВидыОперацийТребованиеНакладная.Материалы Тогда
		
		СтруктураПолей = Новый Структура();
		СтруктураПолей.Вставить("НомерСтроки"      , "НомерСтроки");
		СтруктураПолей.Вставить("Номенклатура"     , "Номенклатура");
		СтруктураПолей.Вставить("Количество"       , "Количество  * Коэффициент");
		СтруктураПолей.Вставить("СчетУчетаБУ"      , "Счет");
		СтруктураПолей.Вставить("КорСчетСписанияБУ", "СчетПередачи");
		
		
		РезультатЗапросаПоМатериалам = ОбщегоНазначенияРед12.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "МатериалыЗаказчика", СтруктураПолей);
		// Подготовим таблицу товаров для проведения.
		ТаблицаДавальческихМатериалов = ПодготовитьТаблицуМатериалыЗаказчика(РезультатЗапросаПоМатериалам, СтруктураШапкиДокумента);
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура - обработчик события "ОбработкаЗаполнения"
//
Процедура ОбработкаЗаполнения(ДанныеЗаполнения)
	
	ТипДанныхЗаполнения = ТипЗнч(ДанныеЗаполнения);
	Если ДанныеЗаполнения <> Неопределено
			И ТипДанныхЗаполнения <> Тип("Структура")
			И Метаданные().ВводитсяНаОсновании.Содержит(ДанныеЗаполнения.Метаданные()) Тогда
		ЗаполнитьПоДокументуОснованию(ДанныеЗаполнения);
	КонецЕсли;
	ЗаполнениеДокументов.Заполнить(ЭтотОбъект, ДанныеЗаполнения);
	
КонецПроцедуры


// Процедура вызывается перед записью документа 
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)

	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ УчетнаяПолитика.ПлательщикНДС(Организация, Дата) Тогда
		// организация - не плательщик НДС. Установим во всех ТЧ признак соответствующего учета НДС
		НеОБлНДСДеятельность = Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяХозДеятельность;
		
		Для каждого СтрокаТЧ  Из Материалы Цикл
		    СтрокаТЧ.НалоговоеНазначение = НеОБлНДСДеятельность;
		КонецЦикла;
	КонецЕсли; 
	
КонецПроцедуры // ПередЗаписью

// Процедура - обработчик события "ОбработкаПроведения"
//
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	Перем Заголовок, СтруктураШапкиДокумента;
	Перем ТаблицаМатериалов, ТаблицаДавальческихМатериалов;

	Заголовок = ОбщегоНазначенияБПВызовСервера.ПредставлениеДокументаПриПроведении(Ссылка);
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКПроведению(ЭтотОбъект);
	Если РучнаяКорректировка Тогда
		Возврат;
	КонецЕсли; 
	
    ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента);
	
	ПодготовитьПараметрыУчетнойПолитики(СтруктураШапкиДокумента,Отказ,Заголовок);

	

	ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаМатериалов, ТаблицаДавальческихМатериалов, Отказ, Заголовок);
	
	
	Если НЕ Отказ Тогда
		// Формирование движения регистров
		ДвиженияПоРегистрам(СтруктураШапкиДокумента, ТаблицаМатериалов, ТаблицаДавальческихМатериалов, Отказ, Заголовок, РежимПроведения);
	КонецЕсли;
	
	Движения.Хозрасчетный.ВыполнитьДействияПередЗаписьюДвижений();
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКЗаписиДвижений(ЭтотОбъект);

КонецПроцедуры // ОбработкаПроведения()

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКОтменеПроведения(ЭтотОбъект);
	Движения.Записать();
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)

	Дата = НачалоДня(ОбщегоНазначенияБП.ПолучитьРабочуюДату());
	Ответственный = Пользователи.ТекущийПользователь();

	ДокументОснование = Неопределено;
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)

	// Документ без данных о движении материалов не считаем заполненным корректно.
	// Следует заполнить данные в любой из табличных частей.
	ОбщегоНазначенияБП.ИсключитьИзПроверкиОсновныеТабличныеЧасти(
		ЭтотОбъект, 
		"Материалы,МатериалыЗаказчика",
		ПроверяемыеРеквизиты);
		
	ПлательщикНДС = УчетнаяПолитика.ПлательщикНДС(Организация, Дата);
	ПлательщикНалогаНаПрибыльДо2015  = УчетнаяПолитика.ПлательщикНалогаНаПрибыльДо2015(Организация, Дата);
	
	МассивНепроверяемыхРеквизитов = Новый Массив;

	Если СчетаУчетаЗатратВТаблице Тогда
		МассивНепроверяемыхРеквизитов.Добавить("СчетЗатрат");
		МассивНепроверяемыхРеквизитов.Добавить("Субконто1");
		МассивНепроверяемыхРеквизитов.Добавить("Субконто2");
		МассивНепроверяемыхРеквизитов.Добавить("Субконто3");
	Иначе
		МассивНепроверяемыхРеквизитов.Добавить("ПодразделениеОрганизации");
		МассивНепроверяемыхРеквизитов.Добавить("Материалы.СчетЗатрат");
		МассивНепроверяемыхРеквизитов.Добавить("Материалы.ПодразделениеОрганизации");
		МассивНепроверяемыхРеквизитов.Добавить("Материалы.НоменклатурнаяГруппа");
		МассивНепроверяемыхРеквизитов.Добавить("Материалы.СтатьяЗатрат");
		Если ЗначениеЗаполнено(СчетЗатрат) Тогда
			ДанныеСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(СчетЗатрат);
			Если ДанныеСчета.КоличествоСубконто < 3 Тогда
				МассивНепроверяемыхРеквизитов.Добавить("Субконто3");
			КонецЕсли;
			Если ДанныеСчета.КоличествоСубконто < 2 Тогда
				МассивНепроверяемыхРеквизитов.Добавить("Субконто2");
			КонецЕсли;
			Если ДанныеСчета.КоличествоСубконто < 1 Тогда
				МассивНепроверяемыхРеквизитов.Добавить("Субконто1");
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;

	Если МатериалыЗаказчика.Количество() = 0 Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Контрагент");
	КонецЕсли;

	Если Материалы.Количество() = 0 Тогда
		МассивНепроверяемыхРеквизитов.Добавить("СчетЗатрат"); // Счет важен только для собственных материалов
		МассивНепроверяемыхРеквизитов.Добавить("Субконто1");
		МассивНепроверяемыхРеквизитов.Добавить("Субконто2");
		МассивНепроверяемыхРеквизитов.Добавить("Субконто3");
	КонецЕсли;

	Если ИНАГРО_УказатьОС И НЕ ИНАГРО_ВТабличнойЧасти Тогда // ИНАГРО
		ПроверяемыеРеквизиты.Добавить("ИНАГРО_ОсновноеСредство");
	КонецЕсли;	

	// Проверка табличных частей:

	МассивНепроверяемыхРеквизитов.Добавить("Материалы.НоменклатурнаяГруппа");
	
	Если ИНАГРО_УказатьОС И ИНАГРО_ВТабличнойЧасти Тогда // ИНАГРО
		ПроверяемыеРеквизиты.Добавить("Материалы.ИНАГРО_ОсновноеСредство");
	КонецЕсли;	
	
	Для Каждого СтрокаТаблицы Из Материалы Цикл
		Префикс = "Материалы[%1].";
		Префикс = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			Префикс, Формат(СтрокаТаблицы.НомерСтроки - 1, "ЧН=0; ЧГ="));

		ИмяСписка = НСтр("ru='Материалы';uk='Матеріали'");

		Если СчетаУчетаЗатратВТаблице Тогда
			ДанныеСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(СтрокаТаблицы.СчетЗатрат);
			Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.НоменклатурнаяГруппа) И СчетСодержитИмяСубконто(ДанныеСчета, "НоменклатурныеГруппы") Тогда
				ТекстСообщения = ОбщегоНазначенияБПКлиентСервер.ПолучитьТекстСообщения("Колонка",, НСтр("ru='Номенклатурная группа';uk='Номенклатурна група'"),
					СтрокаТаблицы.НомерСтроки, ИмяСписка);
				Поле = Префикс + "НоменклатурнаяГруппа";
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;

	ЭтоОборудование = (ВидОперации = Перечисления.ВидыОперацийТребованиеНакладная.Оборудование);
	НеоблагаемыйВНД = Справочники.ВидыНалоговойДеятельности.НеОблагаемая;
	
	Если СчетаУчетаЗатратВТаблице Тогда
		Для каждого СтрокаТЧ Из Материалы Цикл
			Префикс = "Материалы[" + Формат(СтрокаТЧ.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].";

			Если НЕ Отказ  
				 И  ПлательщикНалогаНаПрибыльДо2015 Тогда
				 
				ХарактерЗатрат = Неопределено;
				НалоговаяАналитикаВПроводке = Неопределено;
				СтруктураСубконто = Новый Структура("Субконто1,Субконто2,Субконто3", ?(СчетаУчетаЗатратВТаблице,СтрокаТЧ.СтатьяЗатрат,Субконто1), ?(СчетаУчетаЗатратВТаблице,СтрокаТЧ.НоменклатурнаяГруппа,Субконто2), ?(СчетаУчетаЗатратВТаблице,ПодразделениеОрганизации,Субконто3));
				НалоговыйУчет.ОпределениеАналитикиНалоговогоУчетаВПроводкахДляЗатрат(
					СтруктураСубконто, 
					?(СчетаУчетаЗатратВТаблице,СтрокаТЧ.СчетЗатрат,СчетЗатрат), 
					ХарактерЗатрат,
					НалоговаяАналитикаВПроводке, 
					, 
					СтрокаТЧ.НалоговоеНазначение, 
					СтрокаТЧ.НалоговоеНазначениеДоходовИЗатрат,
					,
					Дата,
					,
					ПлательщикНДС
				);
			
				Если НЕ ЗначениеЗаполнено(НалоговаяАналитикаВПроводке) Тогда
					Если СчетаУчетаЗатратВТаблице И ХарактерЗатрат = "Затраты" Тогда
						ТекстСообщения = НСтр("ru='не указано ""Налоговое назначение затрат""!';uk='не зазначено ""Податкове призначення витрат""!'");
						Поле = Префикс + "НалоговоеНазначениеДоходовИЗатрат";
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);

					ИначеЕсли СчетаУчетаЗатратВТаблице И ХарактерЗатрат = "Строительство" Тогда
						ТекстСообщения = НСтр("ru='не указано налоговое назначение для объекта строительства или НМА!';uk=""не зазначено податкове призначення для об'єкта будівництва або НМА!""");
						Поле = Префикс + "НалоговоеНазначениеДоходовИЗатрат";
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
					ИначеЕсли СчетаУчетаЗатратВТаблице И ХарактерЗатрат = "Производство" Тогда
						ТекстСообщения = НСтр("ru='не указано налоговое назначение для номенклатурной группы!';uk='не зазначено податкове призначення для номенклатурної групи!'");
						Поле = Префикс + "НалоговоеНазначениеДоходовИЗатрат";
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);			
					ИначеЕсли СчетаУчетаЗатратВТаблице И ХарактерЗатрат = "РБП" Тогда
						ТекстСообщения = НСтр("ru='не указано налоговое назначение для расходов будущих периодов!';uk='не зазначено податкове призначення для витрат майбутніх періодів!'");
						Поле = Префикс + "НалоговоеНазначениеДоходовИЗатрат";
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);			
					Иначе
						//Для ТЗР определить НалоговоеНазначение можно только в строке, даже если счет затрат в указывается шапке
						ТекстСообщения = НСтр("ru='Невозможно определить налоговое назначение затрат для указанного счета затрат!';uk='неможливо визначити податкове призначення витрат для вказанного рахунку витрат!'");
						Поле = Префикс + "НалоговоеНазначениеДоходовИЗатрат";
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект");			
					КонецЕсли;
				КонецЕсли;
				 
				// нельзя по НДС указывать нехоз. деятельность, а по НП - хоз. деятельность
				Если НЕ Отказ  
					И  ПлательщикНДС Тогда
					
					НехозДеятельностьНДС = (СтрокаТЧ.НалоговоеНазначение = Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяНеХозДеятельность);
					НехозДеятельностьНКУ = (НалоговаяАналитикаВПроводке = Справочники.НалоговыеНазначенияАктивовИЗатрат.НКУ_НеХозДеятельность);
					
					Если НЕ СтрокаТЧ.НалоговоеНазначение = НалоговаяАналитикаВПроводке
						  И НехозДеятельностьНДС <> НехозДеятельностьНКУ Тогда 
						ТекстСообщения = НСтр("ru=' ошибочно указано нехозяйственное налоговое назначение (НДС) и одновременно хозяйственную деятельность по затратам (и наоборот)!';uk=' помилково зазначено негосподарське податкове призначення (ПДВ) і одночасно господарську діяльність по витратам (та навпаки)!'");
						Поле = Префикс + "НалоговоеНазначение";
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
					КонецЕсли;
					
				КонецЕсли;
			КонецЕсли;
			
			Если НЕ Отказ  
				 И  ПлательщикНДС Тогда
			
				Если  ХарактерЗатрат = "ОПЗ"
					И СтрокаТЧ.НалоговоеНазначение = Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяНеХозДеятельность Тогда
				
					ТекстСообщения = НСтр("ru=' указано нехозяйственное налоговое назначение. Списание на счет ОПЗ - невозможно!';uk=' зазначене негосподарське податкове призначення. Списання на рахунок ЗВВ - неможливе!'");	
					
					Поле = Префикс + "НалоговоеНазначение";
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
				
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	Если ПлательщикНДС Тогда	
		БухгалтерскийУчет.ПроверитьСоответствиеАналитикиЗатратНалоговомуНазначению(ЭтотОбъект, "Материалы", НСтр("ru='Прочее';uk='Інше'"), СчетаУчетаЗатратВТаблице, Отказ);
		
	КонецЕсли;

	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

////////////////////////////////////////////////////////////////////////////////
// Проверка заполнения

Функция СчетСодержитИмяСубконто(ДанныеСчета, ИмяСубконто)

	ИскомыйВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные[ИмяСубконто];

	Для Индекс = 1 По ДанныеСчета.КоличествоСубконто Цикл
		Если ДанныеСчета["ВидСубконто" + Индекс] = ИскомыйВидСубконто Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;

	Возврат Ложь;

КонецФункции

Процедура ЗаполнитьПоДокументуОснованию(Основание)
	
	Если Не Документы.ТипВсеСсылки().СодержитТип(ТипЗнч(Основание)) ИЛИ Основание = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДокументОснование = Основание;	
	
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда

		// Заполнение шапки
		Организация                 = Основание.Организация;
		Склад                       = Основание.Склад;
		Если Основание.ВидОперации  = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ВПереработку Тогда
			Контрагент               = Основание.Контрагент;
			СтрокаТЧ                 = МатериалыЗаказчика;
			ИмяТабличнойЧасти        = "МатериалыЗаказчика"; 
		Иначе
			СтрокаТЧ                 = Материалы;
			ИмяТабличнойЧасти        = "Материалы";  
		КонецЕсли;
		Если Основание.ВидОперации  = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Оборудование Тогда
			ВидОперации				= Перечисления.ВидыОперацийТребованиеНакладная.Оборудование;
		Иначе
			ВидОперации				= Перечисления.ВидыОперацийТребованиеНакладная.Материалы;
		КонецЕсли;

		Для Каждого ТекСтрокаТовары Из Основание.Товары Цикл

			НоваяСтрока = СтрокаТЧ.Добавить();
			НоваяСтрока.Номенклатура     	= ТекСтрокаТовары.Номенклатура;
			НоваяСтрока.Количество       	= ТекСтрокаТовары.Количество;
			НоваяСтрока.ЕдиницаИзмерения 	= ТекСтрокаТовары.ЕдиницаИзмерения;
			НоваяСтрока.Коэффициент      	= ТекСтрокаТовары.Коэффициент;
			
			Если НЕ Основание.ВидОперации  = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ВПереработку Тогда
				НоваяСтрока.НалоговоеНазначение = ТекСтрокаТовары.НалоговоеНазначение;
			КонецЕсли;
			
		КонецЦикла;
		Документы.ТребованиеНакладная.ЗаполнитьСчетаУчетаВТабличнойЧасти(ЭтотОбъект,ИмяТабличнойЧасти);
		
	КонецЕсли;

	Если (ТипЗнч(Основание)=Тип("ДокументСсылка.ОтчетПроизводстваЗаСмену") Или (ТипЗнч(Основание)=Тип("ДокументСсылка.АктОбОказанииПроизводственныхУслуг"))) Тогда

		Организация                 = Основание.Организация;
		СчетаУчетаЗатратВТаблице    = Истина;
		ПодразделениеОрганизации    = Основание.ПодразделениеОрганизации;
		СчетЗатрат                  = Основание.СчетЗатрат;
		Субконто1                   = Основание.ПодразделениеОрганизации;
		Субконто2                   = Основание.НоменклатурнаяГруппа; 
		Субконто3                   = Справочники.СтатьиЗатрат.ПустаяСсылка(); 
		ВидОперации					= Перечисления.ВидыОперацийТребованиеНакладная.Материалы;
		
		РезультатУслуги = Неопределено;
		
		Если ТипЗнч(Основание)=Тип("ДокументСсылка.ОтчетПроизводстваЗаСмену") Тогда
			Склад  = Основание.Склад;
			Результат       = УправлениеПроизводством.РассчитатьРасходСырьяПоСпецификации(Основание.Ссылка);
			РезультатУслуги = УправлениеПроизводством.РассчитатьРасходСырьяПоСпецификации(Основание.Ссылка, "Услуги");
			СписокКолонок = "Номенклатура,ЕдиницаИзмерения,Коэффициент,НоменклатурнаяГруппа";
			
		Иначе
			НоменклатурнаяГрупп         = Основание.НоменклатурнаяГруппа;  
			Результат = УправлениеПроизводством.РассчитатьРасходСырьяПоСпецификации(Основание.Ссылка);
			СписокКолонок = "Номенклатура,ЕдиницаИзмерения,Коэффициент";
			
		КонецЕсли;
	
		ТаблицаМатериалов = Результат.Выгрузить();
		
        ТаблицаМатериалов.Свернуть(СписокКолонок,"Количество");
		Материалы.Загрузить(ТаблицаМатериалов);
		Для Каждого Стр Из Материалы Цикл
	    	Стр.СтатьяЗатрат     = Стр.Номенклатура.СтатьяЗатрат;
	    	Стр.СчетЗатрат       = Основание.СчетЗатрат;	    	
			Если ТипЗнч(Основание)=Тип("ДокументСсылка.АктОбОказанииПроизводственныхУслуг") Тогда
				Стр.НоменклатурнаяГруппа = Основание.НоменклатурнаяГруппа;
			КонецЕсли;
		КонецЦикла;
		
		Если НЕ РезультатУслуги = Неопределено Тогда
			ТаблицаМатериалов = РезультатУслуги.Выгрузить();
			ТаблицаМатериалов.Свернуть(СписокКолонок,"Количество");
			Для Каждого Стр Из ТаблицаМатериалов Цикл
				НоваяСтрока = Материалы.Добавить();
				НоваяСтрока.Номенклатура = Стр.Номенклатура;
				НоваяСтрока.ЕдиницаИзмерения = Стр.ЕдиницаИзмерения;
				НоваяСтрока.Коэффициент = Стр.Коэффициент;
				НоваяСтрока.НоменклатурнаяГруппа = Стр.НоменклатурнаяГруппа;
				НоваяСтрока.Количество = Стр.Количество;
				НоваяСтрока.СтатьяЗатрат     = ?(ЗначениеЗаполнено(Стр.Номенклатура), Стр.Номенклатура.СтатьяЗатрат, " ");
				НоваяСтрока.СчетЗатрат       = Основание.СчетЗатрат;				
			КонецЦикла;
		КонецЕсли;
		Документы.ТребованиеНакладная.ЗаполнитьСчетаУчетаВТабличнойЧасти(ЭтотОбъект,"Материалы");
	КонецЕсли;
	
	
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.РеализацияУслугПоПереработке") Тогда
		// Заполнение шапки
		Комментарий = Основание.Комментарий;
		Контрагент = Основание.Контрагент;
		Организация = Основание.Организация;
		Ответственный = Основание.Ответственный;
		ВидОперации	= Перечисления.ВидыОперацийТребованиеНакладная.Материалы;
		Для Каждого ТекСтрокаМатериалыЗаказчика Из Основание.МатериалыЗаказчика Цикл
			НоваяСтрока = МатериалыЗаказчика.Добавить();
			НоваяСтрока.Количество = ТекСтрокаМатериалыЗаказчика.Количество;
			НоваяСтрока.ЕдиницаИзмерения = ТекСтрокаМатериалыЗаказчика.ЕдиницаИзмерения;
			НоваяСтрока.Коэффициент = ТекСтрокаМатериалыЗаказчика.Коэффициент;
			НоваяСтрока.Номенклатура = ТекСтрокаМатериалыЗаказчика.Номенклатура;
			НоваяСтрока.Счет = ПланыСчетов.Хозрасчетный.МатериалыПринятыеВПереработку;
			НоваяСтрока.СчетПередачи = ТекСтрокаМатериалыЗаказчика.СчетУчетаБУ;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
#КонецЕсли 