#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

Функция ПечатьМ11(МассивОбъектов, ОбъектыПечати)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ТребованиеНакладная_М11";
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("ОбщийМакет.ПФ_MXL_UK_М11");
	
	ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	
	ПервыйДокумент = Истина;
	
	Для Каждого Ссылка Из МассивОбъектов Цикл	
		
		Если Не ПервыйДокумент Тогда
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ПервыйДокумент = Ложь;
		// Запомним номер строки, с которой начали выводить текущий документ.
		НомерСтрокиНачало = ТабДокумент.ВысотаТаблицы + 1;
	
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ТекущийДокумент", Ссылка);
		Запрос.УстановитьПараметр("НаДату"         , Ссылка.Дата);
		Запрос.УстановитьПараметр("Организация"      , Ссылка.Организация);
		Запрос.УстановитьПараметр("ГлавныйБухгалтер" , Перечисления.ОтветственныеЛицаОрганизаций.ГлавныйБухгалтер);
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Док.Номер КАК НомерДокумента,
		|	Док.Дата КАК ДатаДокумента,
		|	Док.Организация КАК Организация,
		|	Док.Организация.НаименованиеПолное КАК ПредставлениеОрганизации,
		|	Док.Склад КАК Склад,
		|	Док.Организация.КодПоЕДРПОУ КАК КодПоЕДРПОУ,
		|	ФИОГлавныйБухгалтер.Фамилия + "" "" + ПОДСТРОКА(ФИОГлавныйБухгалтер.Имя, 1, 1) + "". "" + ПОДСТРОКА(ФИОГлавныйБухгалтер.Отчество, 1, 1) + ""."" КАК ГлавныйБухгалтер,
		|	Док.ИНАГРО_ОтпускРазрешил КАК ОтпускРазрешил,
		|	Док.ИНАГРО_Отпустил КАК Отпустил,
		|	Док.ИНАГРО_ЧерезКого КАК ЧерезКого,
		|	Док.ИНАГРО_Кому КАК Кому,
		|	Док.ИНАГРО_Основание КАК Основание,
		|	Док.ИНАГРО_ЧерезКого КАК Получил
		|ИЗ
		|	Документ.ТребованиеНакладная КАК Док
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизическихЛиц.СрезПоследних(
		|				&НаДату,
		|				ФизическоеЛицо В
		|					(ВЫБРАТЬ
		|						ОтветственныеЛица.ФизическоеЛицо
		|					ИЗ
		|						РегистрСведений.ОтветственныеЛицаОрганизаций.СрезПоследних(&НаДату, СтруктурнаяЕдиница = &Организация
		|							И ОтветственноеЛицо = &ГлавныйБухгалтер) КАК ОтветственныеЛица)) КАК ФИОГлавныйБухгалтер
		|		ПО (ИСТИНА)
		|ГДЕ
		|	Док.Ссылка = &ТекущийДокумент";

		Шапка = Запрос.Выполнить().Выбрать();
		Шапка.Следующий();
		                            
		Область = Макет.ПолучитьОбласть("Шапка");
		Область.Параметры.Заполнить(Шапка);
		Область.Параметры.КодОперации 	 = "Відпуск";
			
		ТабДокумент.Вывести(Область);
		
		ВысотаШапки   = ТабДокумент.ВысотаТаблицы;
		ШиринаТаблицы = ТабДокумент.ШиринаТаблицы;
		ТабДокумент.ПовторятьПриПечатиСтроки = ТабДокумент.Область("R" + ВысотаШапки);
		ТабДокумент.ОбластьПечати            = ТабДокумент.Область("C2:C" + ШиринаТаблицы);
		
		СтруктураПолей = Новый Структура;
		СтруктураПолей.Вставить("СчетПередачи",                 "СчетЗатрат");
		СтруктураПолей.Вставить("Материал",                     "Номенклатура");
		СтруктураПолей.Вставить("МатериалНаименование",         "Номенклатура.НаименованиеПолное");
		СтруктураПолей.Вставить("НоменклатурныйНомер",          "Номенклатура.Код");
		СтруктураПолей.Вставить("ЕдиницаИзмеренияНаименование", "ЕдиницаИзмерения");
		СтруктураПолей.Вставить("ЕдиницаИзмеренияКод",          "ЕдиницаИзмерения.Код");
		СтруктураПолей.Вставить("Коэффициент",          		"Коэффициент");
		СтруктураПолей.Вставить("Количество",                   "Количество");

		Область = Макет.ПолучитьОбласть("Строка");
		
		ТаблицаМатериалов = ОбщегоНазначенияРед12.СформироватьЗапросПоТабличнойЧасти(Ссылка, "Материалы", СтруктураПолей).Выгрузить();
		ТаблицаМатериалов.Свернуть("Материал, МатериалНаименование, СчетПередачи, НоменклатурныйНомер,ЕдиницаИзмеренияКод,ЕдиницаИзмеренияНаименование,Коэффициент", "Количество");
		Если Не Ссылка.СчетаУчетаЗатратВТаблице Тогда
			ТаблицаМатериалов.ЗаполнитьЗначения(Ссылка.СчетЗатрат, "СчетПередачи");
		КонецЕсли;
		
		СтруктураПолей.Вставить("СчетПередачи",                 "СчетПередачи");
		ТаблицаМатериаловЗаказчика = ОбщегоНазначенияРед12.СформироватьЗапросПоТабличнойЧасти(Ссылка, "МатериалыЗаказчика", СтруктураПолей).Выгрузить();

		// Поиск сумм списания активов для заполнения Цены и Суммы
		МассивСсылок = Новый Массив;
		МассивСсылок.Добавить(Ссылка);
		ТаблицаСуммСписания = БухгалтерскийУчетПереопределяемый.ПолучитьСуммуСписанияАктивов(МассивСсылок, Шапка.ДатаДокумента, Шапка.ДатаДокумента);
		
		ОбластьПодвал   = Макет.ПолучитьОбласть("Подвал");
		ПараметрыПодвал = ОбластьПодвал.Параметры;
		ПараметрыПодвал.Заполнить(Шапка);
		
		КоличествоВТаблице = ТаблицаМатериалов.Количество() + ТаблицаМатериаловЗаказчика.Количество();
		КоличествоОбработанных = 1;
		// В форме сказано "Кількість найменувань". Будет выводится количество позиций.
		ПараметрыПодвал.ИтогоКоличествоПрописью = ЧислоПрописью(КоличествоВТаблице, "Л=uk_UA;НП=Ложь;НД=Ложь;", ",,,,,,,,0");
																
		// сумму прописью выводим всегда на украинском - печатная форма регламенированная
		ПараметрыПодвал.ИтогоСуммаПрописью = ЧислоПрописью(ТаблицаСуммСписания.Итог("Сумма"), "Л=uk_UA; ДП=Ложь", ВалютаРегламентированногоУчета.ПараметрыПрописиНаУкраинском);
	    
		Для Каждого СтрокаТЧ Из ТаблицаМатериалов Цикл

			Область = Макет.ПолучитьОбласть("Строка");
			Область.Параметры.Заполнить(СтрокаТЧ);
			
			СтрокаСуммСписания =  ТаблицаСуммСписания.Найти(СтрокаТЧ.Материал, "Номенклатура");
			Если СтрокаСуммСписания = Неопределено Тогда
				 Область.Параметры.Цена = 0;
				 Область.Параметры.Стоимость = 0;
			 Иначе
				 Цена = ?(СтрокаСуммСписания.Количество = 0, 0, СтрокаСуммСписания.Сумма / СтрокаСуммСписания.Количество * СтрокаТЧ.Коэффициент);
				 Область.Параметры.Цена		 = Цена;
				 Область.Параметры.Стоимость = Цена * СтрокаТЧ.Количество;
			 КонецЕсли;
			 
			Если КоличествоОбработанных = КоличествоВТаблице Тогда
				// Последняя запись. Ее не следует отрывать от подписей.
				
				МассивТаблиц = Новый Массив(2);
				МассивТаблиц[0] = Область;
				МассивТаблиц[1] = ОбластьПодвал;
				
				Если НЕ ТабДокумент.ПроверитьВывод(МассивТаблиц) Тогда
					
					ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
					
				КонецЕсли;
				
			КонецЕсли;
			
			ТабДокумент.Вывести(Область);
			КоличествоОбработанных = КоличествоОбработанных + 1;

		КонецЦикла;
		
		Для Каждого СтрокаТЧ Из ТаблицаМатериаловЗаказчика Цикл

			Область = Макет.ПолучитьОбласть("Строка");
			Область.Параметры.Заполнить(СтрокаТЧ);
			
			СтрокаСуммСписания =  ТаблицаСуммСписания.Найти(СтрокаТЧ.Материал, "Номенклатура");
			Если СтрокаСуммСписания = Неопределено Тогда
				 Область.Параметры.Цена = 0;
				 Область.Параметры.Стоимость = 0;
			 Иначе
				 Цена = ?(СтрокаСуммСписания.Количество = 0, 0, СтрокаСуммСписания.Сумма / СтрокаСуммСписания.Количество * СтрокаТЧ.Коэффициент);
				 Область.Параметры.Цена		 = Цена;
				 Область.Параметры.Стоимость = Цена * СтрокаТЧ.Количество;
			 КонецЕсли;
			 
			Если КоличествоОбработанных = КоличествоВТаблице Тогда
				// Последняя запись. Ее не следует отрывать от подписей.
				
				МассивТаблиц = Новый Массив(2);
				МассивТаблиц[0] = Область;
				МассивТаблиц[1] = ОбластьПодвал;
				
				Если НЕ ТабДокумент.ПроверитьВывод(МассивТаблиц) Тогда
					
					ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
					
				КонецЕсли;
				
			КонецЕсли;
			
			ТабДокумент.Вывести(Область);
			КоличествоОбработанных = КоличествоОбработанных + 1;

		КонецЦикла;
		
		// << ИН-АГРО  
	//	Область = Макет.ПолучитьОбласть("Итог");
	//	Область.Параметры.Стоимость = ТаблицаСуммСписания.Итог("Сумма");
	//	ТабДокумент.Вывести(Область);
	//
		ТабДокумент.Вывести(ОбластьПодвал);
	
		// В табличном документе зададим имя области, в которую был 
		// выведен объект. Нужно для возможности печати покомплектно.
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабДокумент,НомерСтрокиНачало, ОбъектыПечати, Ссылка);
		
	КонецЦикла;
	
	Возврат ТабДокумент;

КонецФункции

#Область ПрограммныйИнтерфейс

// Заполняет счета учета номенклатуры в табличной части документа
//
Процедура ЗаполнитьСчетаУчетаВТабличнойЧасти(Объект, ИмяТабличнойЧасти) Экспорт

	ТабличнаяЧасть = Объект[ИмяТабличнойЧасти];
	
	ДанныеОбъекта = Новый Структура("Дата, Организация, Склад");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
	СоответствиеСчетовУчета = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаУчетаСпискаНоменклатуры(
		ДанныеОбъекта.Организация, ОбщегоНазначения.ВыгрузитьКолонку(ТабличнаяЧасть, "Номенклатура", Истина), ДанныеОбъекта.Склад, ДанныеОбъекта.Дата);
	
	Для каждого СтрокаТабличнойЧасти Из ТабличнаяЧасть Цикл
		СчетаУчета = СоответствиеСчетовУчета.Получить(СтрокаТабличнойЧасти.Номенклатура);
		ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(ДанныеОбъекта, СтрокаТабличнойЧасти, ИмяТабличнойЧасти, СчетаУчета);
	КонецЦикла;

КонецПроцедуры

// Заполняет счета учета номенклатуры в строке табличной части документа
//
// Параметры:
//  ДанныеОбъекта         - структура данных объекта, используемых при заполнении счетов учета (вид операции,
//                          вид договора контрагента, признак комиссионной торговли и т.п.)
//  СтрокаТабличнойЧасти  - строка табличной части документа
//  ИмяТабличнойЧасти     - имя табличной части документа
//  СведенияОНоменклатуре - структура сведений о номенклатуре, либо стуктура счетов учета
//
Процедура ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(ДанныеОбъекта, СтрокаТабличнойЧасти, ИмяТабличнойЧасти, СведенияОНоменклатуре) Экспорт

	Если СведенияОНоменклатуре = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если СведенияОНоменклатуре.Свойство("СчетаУчета") Тогда
		// СведенияОНоменклатуре - структура сведений номенклатуры
		СчетаУчета = СведенияОНоменклатуре.СчетаУчета;
	ИначеЕсли СведенияОНоменклатуре.Свойство("СчетУчетаБУ") Тогда
		// СведенияОНоменклатуре - структура счетов учета номенклатуры
		СчетаУчета = СведенияОНоменклатуре;
	Иначе
		Возврат;
	КонецЕсли;
	
	Если ИмяТабличнойЧасти = "Материалы" Тогда
		
		Если ЗначениеЗаполнено(СчетаУчета.СчетУчетаБУ) Тогда
			СтрокаТабличнойЧасти.Счет = СчетаУчета.СчетУчетаБУ;
		КонецЕсли;
		
		СтрокаТабличнойЧасти.НалоговоеНазначение 		= СчетаУчета.НалоговоеНазначение;
		
	ИначеЕсли ИмяТабличнойЧасти = "МатериалыЗаказчика" Тогда
	
		Если ЗначениеЗаполнено(СчетаУчета.СчетУчетаДавСырья) Тогда
			СтрокаТабличнойЧасти.Счет = СчетаУчета.СчетУчетаДавСырья;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СчетаУчета.СчетПередачиЗабБУ) Тогда
			СтрокаТабличнойЧасти.СчетПередачи = БухгалтерскийУчетВызовСервераПовтИсп.СчетУчетаМатериалыПринятыеВПереработкуВПроизводстве(
				СчетаУчета.СчетПередачиЗабБУ);
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#Область ПроцедурыИФункцииПечати

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	// Требование-накладная
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ТребованиеНакладная";
	КомандаПечати.Представление = НСтр("ru='Требование-накладная';uk='Вимога-накладна'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечати";
	
	// Требование-накладная (М-11)
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "М11";
	КомандаПечати.Представление = НСтр("ru='Требование-накладная (М-11)';uk='Вимога-накладна (М-11)'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечати";
	
	// Реестр документов
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "Реестр";
	КомандаПечати.Представление = НСтр("ru='Реестр документов';uk='Реєстр документів'");
	КомандаПечати.ЗаголовокФормы= НСтр("ru='Реестр документов ""Требование-накладная""';uk='Реєстр документів ""Вимога-накладна""'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечатиРеестраДокументов";
	КомандаПечати.СписокФорм    = "ФормаСписка";
	КомандаПечати.Порядок       = 100;
	
	
КонецПроцедуры

Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм,ОбъектыПечати, ПараметрыВывода) Экспорт

	// Устанавливаем признак доступности печати покомплектно.
	ПараметрыВывода.ДоступнаПечатьПоКомплектно = Истина;

	// Проверяем, нужно ли для макета ПКО формировать табличный документ.
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ТребованиеНакладная") Тогда
		// Формируем табличный документ и добавляем его в коллекцию печатных форм.
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию( КоллекцияПечатныхФорм, "ТребованиеНакладная", НСтр("ru='Требование-накладная';uk='Вимога-накладна'"),
			ПечатьТребованиеНакладная(МассивОбъектов, ОбъектыПечати, ПараметрыВывода), , "Документ.ТребованиеНакладная.ПФ_MXL_ТребованиеНакладная", , Истина);
	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "М11") Тогда
		// Формируем табличный документ и добавляем его в коллекцию печатных форм.
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "М11", НСтр("ru='M-11 (Требование-накладная)';uk='M-11 (Вимога-накладна)'"),
			ПечатьМ11(МассивОбъектов, ОбъектыПечати), , "ОбщийМакет.ПФ_MXL_UK_М11");
	КонецЕсли;

КонецПроцедуры

Функция ПечатьТребованиеНакладная(МассивОбъектов, ОбъектыПечати, ПараметрыВывода)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ТребованиеНакладная_ТН";
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ТребованиеНакладная.ПФ_MXL_ТребованиеНакладная");
	
	// печать производится на языке, указанном в настройках пользователя
	КодЯзыкаПечать = ПараметрыВывода.КодЯзыкаДляМногоязычныхПечатныхФорм;;
	Макет.КодЯзыкаМакета = КодЯзыкаПечать;
	
	ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	
	ПервыйДокумент = Истина;
	
	Для Каждого Ссылка Из МассивОбъектов Цикл
		
		Если Не ПервыйДокумент Тогда
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ПервыйДокумент = Ложь;
		// Запомним номер строки, с которой начали выводить текущий документ.
		НомерСтрокиНачало = ТабДокумент.ВысотаТаблицы + 1;
		
		ДопКолонка = Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
		Если ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул Тогда
			ВыводитьКоды    = Истина;
			Колонка         = "Артикул";
			ТекстКодАртикул = "Артикул";
		ИначеЕсли ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Код Тогда
			ВыводитьКоды    = Истина;
			Колонка         = "Код";
			ТекстКодАртикул = "Код";
		Иначе
			ВыводитьКоды    = Ложь;
			Колонка         = "";
			ТекстКодАртикул = "Код";
		КонецЕсли;
		
		Если ВыводитьКоды Тогда
			ОбластьШапки  = "ШапкаСКодом";
			ОбластьСтроки = "СтрокаСКодом";
		Иначе
			ОбластьШапки  = "ШапкаТаблицы";
			ОбластьСтроки = "Строка";
		КонецЕсли;
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ТекущийДокумент", Ссылка);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Номер,
		|	Дата,
		|	Ответственный.ФизическоеЛицо.Наименование КАК Получил,
		|	Организация,
		|	Организация КАК Поставщик,
		|	Склад
		|ИЗ
		|	Документ.ТребованиеНакладная КАК ТребованиеНакладная
		|
		|ГДЕ
		|	ТребованиеНакладная.Ссылка = &ТекущийДокумент";
		Шапка = Запрос.Выполнить().Выбрать();
		Шапка.Следующий();

		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ТекущийДокумент", Ссылка);
		Запрос.УстановитьПараметр("ПустаяЕдиницаИзмерения", Справочники.КлассификаторЕдиницИзмерения.ПустаяСсылка());
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Номенклатура,
		|	Номенклатура.НаименованиеПолное КАК Товар,
		|	Номенклатура." + ТекстКодАртикул + " КАК КодАртикул,
		|	Количество,
		|	ЕдиницаИзмерения.Наименование КАК ЕдиницаИзмерения,
		|   НомерСтроки,
		|	1 КАК ID
		|ИЗ 
		|	(ВЫБРАТЬ
		|		Номенклатура         КАК Номенклатура,
		|		ЕдиницаИзмерения  КАК ЕдиницаИзмерения,
		|		СУММА(Количество)    КАК Количество,
		|		МИНИМУМ(НомерСтроки) КАК НомерСтроки
		|	ИЗ
		|		Документ.ТребованиеНакладная.Материалы КАК Материалы
		|
		|	ГДЕ
		|		Материалы.Ссылка = &ТекущийДокумент
		|	СГРУППИРОВАТЬ ПО
		|		Номенклатура,
		|		ЕдиницаИзмерения
		|	) КАК ВложенныйЗапросПоТоварам
		| ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Номенклатура,
		|	Номенклатура.НаименованиеПолное КАК Товар,
		|	Номенклатура." + ТекстКодАртикул + " КАК Код,
		|	Количество,
		|	ЕдиницаИзмерения.Наименование КАК ЕдиницаИзмерения,
		|   НомерСтроки,
		|	2 КАК ID
		|ИЗ 
		|	(ВЫБРАТЬ
		|		Номенклатура         КАК Номенклатура,
		|		ЕдиницаИзмерения  КАК ЕдиницаИзмерения,
		|		СУММА(Количество)    КАК Количество,
		|		МИНИМУМ(НомерСтроки) КАК НомерСтроки
		|	ИЗ
		|		Документ.ТребованиеНакладная.МатериалыЗаказчика КАК МатериалыЗаказчика
		|
		|	ГДЕ
		|		МатериалыЗаказчика.Ссылка = &ТекущийДокумент
		|	СГРУППИРОВАТЬ ПО
		|		Номенклатура,
		|		ЕдиницаИзмерения
		|	) КАК ВложенныйЗапросПоТоварам
		|
		|УПОРЯДОЧИТЬ ПО
		|	ID,
		|	НомерСтроки";
		ЗапросТовары = Запрос.Выполнить().Выгрузить();

		ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
		ОбластьМакета.Параметры.ТекстЗаголовка = ОбщегоНазначенияБПВызовСервера.СформироватьЗаголовокДокумента(Шапка, НСтр("ru='Требование-накладная';uk='Вимога-накладна'",КодЯзыкаПечать),КодЯзыкаПечать);

		ТабДокумент.Вывести(ОбластьМакета);

		СведенияОПоставщике = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Шапка.Поставщик, Шапка.Дата,,,КодЯзыкаПечать);

		ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");
		ОбластьМакета.Параметры.Заполнить(Шапка);
		ОбластьМакета.Параметры.ПредставлениеПоставщика = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОПоставщике, "ПолноеНаименование,",,КодЯзыкаПечать);	
		ОбластьМакета.Параметры.РеквизитыПоставщика =     ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОПоставщике, "ЮридическийАдрес,Телефоны,/,КодПоЕДРПОУ,КодПоДРФО,",,КодЯзыкаПечать);
	    ТабДокумент.Вывести(ОбластьМакета);
		
		// Выводим дополнительно информацию о договоре и сделке
		СписокДополнительныхПараметров = "Склад,";
		МассивСтруктурСтрок = ОбщегоНазначенияБПВызовСервера.ДополнительнаяИнформация(Шапка,СписокДополнительныхПараметров,КодЯзыкаПечать);
		ОбластьМакета = Макет.ПолучитьОбласть("ДопИнформация");
	    Для каждого СтруктураСтроки Из МассивСтруктурСтрок Цикл
			ОбластьМакета.Параметры.Заполнить(СтруктураСтроки);
			ТабДокумент.Вывести(ОбластьМакета);
		КонецЦикла;
		
		// Вывести табличную часть
		ОбластьМакета = Макет.ПолучитьОбласть(ОбластьШапки);
	    Если ВыводитьКоды Тогда
			ОбластьМакета.Параметры.ИмяКолонкиКодов = ТекстКодАртикул;
		КонецЕсли;
		
		ТабДокумент.Вывести(ОбластьМакета);

		ОбластьМакета = Макет.ПолучитьОбласть(ОбластьСтроки);
		Для каждого ВыборкаСтрокТовары Из ЗапросТовары Цикл 

			Если НЕ ЗначениеЗаполнено(ВыборкаСтрокТовары.Номенклатура) Тогда
				Сообщить(НСтр("ru='В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.';uk='В одному з рядків не заповнене значення номенклатури - рядок під час друку буде пропущений.'"), СтатусСообщения.Важное);
				Продолжить;
			КонецЕсли;

			ОбластьМакета.Параметры.Заполнить(ВыборкаСтрокТовары);
			ОбластьМакета.Параметры.Товар 		= СокрЛП(ВыборкаСтрокТовары.Товар);
			ОбластьМакета.Параметры.НомерСтроки = ЗапросТовары.Индекс(ВыборкаСтрокТовары) + 1;
			ТабДокумент.Вывести(ОбластьМакета);

		КонецЦикла;

		// Вывести Итого
		ОбластьМакета = Макет.ПолучитьОбласть("Итого");
		ТабДокумент.Вывести(ОбластьМакета);

		// Вывести подписи
		ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
		ОбластьМакета.Параметры.Заполнить(Шапка);
		ТабДокумент.Вывести(ОбластьМакета);

	
		// В табличном документе зададим имя области, в которую был 
		// выведен объект. Нужно для возможности печати покомплектно.
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабДокумент, 
			НомерСтрокиНачало, ОбъектыПечати, Ссылка);
		
	КонецЦикла;
	
	Возврат ТабДокумент;
	
КонецФункции

Функция ПолучитьДополнительныеРеквизитыДляРеестра() Экспорт
	
	Результат = Новый Структура("Информация", "Склад");
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецЕсли