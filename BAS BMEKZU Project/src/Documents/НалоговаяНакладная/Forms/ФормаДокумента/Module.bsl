#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("Основание") И ЗначениеЗаполнено(Параметры.Основание) Тогда
		
		НеОткрыватьФорму = Истина;
		ВыполнитьЗаполнениеНаОсновании(Параметры);
		
	Иначе
		
		ПриСозданииНаСервереОсновыеДействия(Параметры);	
		
	КонецЕсли;
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервереОсновыеДействия(ПараметрыФормы)

	Если ПараметрыФормы.Свойство("СлужебноеСообщение") Тогда
		СлужебноеСообщение = ПараметрыФормы.СлужебноеСообщение;
	КонецЕсли;
	
	// СтандартныеПодсистемы.Печать
	УправлениеПечатью.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Печать

	// ДополнительныеОтчетыИОбработки
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец ДополнительныеОтчетыИОбработки
	
	Если ПараметрыФормы.Ключ.Пустая() Тогда
		ПодготовитьФормуНаСервере();
	КонецЕсли;

	// Уведомим о появлении функционала рабочей даты
	НастройкиПредупреждений = ОбщегоНазначенияБП.НастройкиПредупрежденийОбИзменениях("РабочаяДатаИзДокумента");
	
	// Показываем, если это новый документ и сама рабочая дата еще не установлена.
	НастройкиПредупреждений.РабочаяДатаИзДокумента =  НастройкиПредупреждений.РабочаяДатаИзДокумента
													И ПараметрыФормы.Ключ.Пустая()
													И НЕ ЗначениеЗаполнено(БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("РабочаяДата"));
	
	// Активизировать первую непустую табличную часть
	АктивизироватьТабличнуюЧасть = ОбщегоНазначенияБПВызовСервера.ПолучитьПервуюНепустуюВидимуюТабличнуюЧасть(
		ЭтаФорма, СписокВидимыхТабличныхЧастей());
	ОбщегоНазначенияБПВызовСервера.АктивизироватьЭлементФормы(ЭтаФорма, АктивизироватьТабличнуюЧасть);
	
	// Авторасчет НДС
	ПерерасчетПроизведен = Истина;
	ДатаВступленияВСилуПриказа1379 = НалоговыйУчетПовтИсп.ДатаВступленияВСилуПриказа1379();
	Если Объект.РеквизитыНомерСтрокиННАктуальны Тогда
		// доверяй, но проверяй
		Объект.РеквизитыНомерСтрокиННАктуальны = Документы.НалоговаяНакладная.ПроверитьРеквизитыНомерСтрокиННАктуальны(ДанныеФормыВЗначение(Объект, Тип("Документобъект.НалоговаяНакладная")));
	КонецЕсли; 
	
	УстановитьЭлементыФормыПоВидуОперации(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если НЕ ПустаяСтрока(СлужебноеСообщение) Тогда
		
		ПодключитьОбработчикОжидания("СообщитьПользователюЛокально", 0.75, Истина);
	
	КонецЕсли;
	
	// открываем основную форму налоговой, ту, в которой стоит галочка "Продажа ниже обычной цены"
	Если ЗначениеЗаполнено(Объект.ОсновнаяНалоговаяПриРезервеНомераПриПродажаНижеОбычнойЦены) Тогда
		
		ПараметрыОткрытия = Новый Структура();
		ПараметрыОткрытия.Вставить("СлужебноеСообщение", НСтр("ru='Данная налоговая накладная является служебной! Будет открыта основная налоговая накладная, с установленным флагом ""Продажа ниже обычной цены"".';uk='Обрана податкова накладна є службовою! Буде відкрита основна податкова накладна з встановленим прапорцем ""Продаж нижче звичайної ціни"".'"));
		ПараметрыОткрытия.Вставить("Ключ", Объект.ОсновнаяНалоговаяПриРезервеНомераПриПродажаНижеОбычнойЦены);
		
		НоваяФорма = ОткрытьФорму("Документ.НалоговаяНакладная.ФормаОбъекта", ПараметрыОткрытия);
		
		Отказ = Истина;
		Возврат;
	
	КонецЕсли;
	
	Если НеОткрыватьФорму = Ложь Тогда
		Возврат;
	КонецЕсли;
	
	Для Сч = 1 По ЭтотОбъект["КоличествоОбъектовДляОткрытия"] Цикл
		
		ФормаНовогоОбъекта = ПолучитьФорму(ЭтотОбъект["ИмяФормы" + Формат(Сч, "ЧГ=")], , , Новый УникальныйИдентификатор);	
		
		КопироватьДанныеФормы(ЭтотОбъект["ОбъектДляОткрытия" + Формат(Сч, "ЧГ=")], ФормаНовогоОбъекта.Объект); 
		ФормаНовогоОбъекта.Модифицированность = Истина;
		
		Если ФормаНовогоОбъекта.ИмяФормы = "Документ.НалоговаяНакладная.Форма.ФормаДокумента" Тогда
			ФормаНовогоОбъекта.ПодготовитьФормуНаСервере();
		КонецЕсли;
		ФормаНовогоОбъекта.Открыть();
		
		Если Найти(ЭтотОбъект["ИмяФормы" + Формат(Сч, "ЧГ=")], "Обработка.ФормированиеНалоговыхНакладных.") > 0  Тогда
		    ФормаНовогоОбъекта.ТекущийЭлемент = ФормаНовогоОбъекта.Элементы.ГруппаСтраницаДанные;
		КонецЕсли;
		
	КонецЦикла;
	
	// эту форму - не открываем
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)

	Если ИсточникВыбора.ИмяФормы = "Обработка.ПодборНоменклатуры.Форма.Форма" Тогда
		ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение, ИсточникВыбора.ИмяТаблицы);
		
		ЗаполнитьДобавленныеКолонкиТаблиц(ИсточникВыбора.ИмяТаблицы);
		
		ОбновитьИтоги(ЭтаФорма);
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение, ИмяТаблицы) Экспорт
	
	ДобавленныеИзмененныеСтроки = Новый Структура;
	ДобавленныеИзмененныеСтроки.Вставить("Товары", 		Новый Массив());
	ДобавленныеИзмененныеСтроки.Вставить("Услуги", 		Новый Массив());
	ДобавленныеИзмененныеСтроки.Вставить("ВозвратнаяТара",Новый Массив());

	ТаблицаТоваров = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресПодобраннойНоменклатурыВХранилище);
	
	ДанныеОбъекта = Новый Структура("Дата, Организация, ВидОперации, Реализация, ДоговорКонтрагента, ВалютаВзаиморасчетов, НеЯвляетсяРезидентом, ТипПричиныНевыдачиПокупателю");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	ДанныеОбъекта.Реализация  = Истина;
	ДанныеОбъекта.ВалютаВзаиморасчетов = ЭтаФорма.ВалютаВзаиморасчетов;
	ДанныеОбъекта.НеЯвляетсяРезидентом = ЭтаФорма.НеЯвляетсяРезидентом;
	
	СоответствиеСведенийОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОСпискеНоменклатуры(
		ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаТоваров, "Номенклатура", Истина), ДанныеОбъекта);
	
	Если ЗначениеЗаполнено(Объект.ТипЦен) Тогда
		ЦенаВключаетНДС	= ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ТипЦен, "ЦенаВключаетНДС");
	Иначе
		ЦенаВключаетНДС	= Объект.СуммаВключаетНДС;
	КонецЕсли;
	
	
	Для каждого СтрокаТовара Из ТаблицаТоваров Цикл
		
		СтруктураОтбора = Новый Структура("Номенклатура, Цена", СтрокаТовара.Номенклатура, СтрокаТовара.Цена);
		Если ИмяТаблицы = "Товары" Тогда
			СтруктураОтбора.Вставить("ЕдиницаИзмерения",СтрокаТовара.ЕдиницаИзмерения)
		КонецЕсли; 
		СтрокаТабличнойЧасти = НайтиСтрокуТабличнойЧасти(ЭтаФорма, ИмяТаблицы, СтруктураОтбора);
		
		Если СтрокаТабличнойЧасти <> Неопределено Тогда
			// Нашли - увеличиваем количество.
			СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + СтрокаТовара.Количество;
			
			Если ИмяТаблицы = "Товары" Тогда
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, Объект.СуммаВключаетНДС);
				
				Если Объект.ПродажаНижеОбычнойЦены 
					ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.СводнаяНаПревышениеБазыНадЦенойПоставки
					Тогда
					РассчитатьПревышение(Объект, СтрокаТабличнойЧасти, Истина);
					РассчитатьНДСПревышения(СтрокаТабличнойЧасти);
				КонецЕсли;
				
			ИначеЕсли ИмяТаблицы = "Услуги" Тогда
				// Рассчитываем реквизиты табличной части
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, Объект.СуммаВключаетНДС);
				
				Если Объект.ПродажаНижеОбычнойЦены 
					ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.СводнаяНаПревышениеБазыНадЦенойПоставки
					Тогда
					РассчитатьПревышение(Объект, СтрокаТабличнойЧасти, Истина);
					РассчитатьНДСПревышения(СтрокаТабличнойЧасти);
				КонецЕсли;
				
			ИначеЕсли ИмяТаблицы = "ВозвратнаяТара" Тогда
				// Рассчитываем реквизиты табличной части
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
			КонецЕсли;
			
		Иначе
			
			СтрокаТабличнойЧасти = Объект[ИмяТаблицы].Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтрокаТовара);
			
			СведенияОНоменклатуре = СоответствиеСведенийОНоменклатуре.Получить(СтрокаТовара.Номенклатура);
			Если СведенияОНоменклатуре = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Документы.НалоговаяНакладная.ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(
								ДанныеОбъекта, СтрокаТабличнойЧасти, ИмяТаблицы, СведенияОНоменклатуре);
			
			Если ИмяТаблицы = "Товары" Тогда
				
				//СтрокаТабличнойЧасти.СтавкаНДС           = СведенияОНоменклатуре.СтавкаНДС;
				ЗаполнитьСтавкуНДС(СтрокаТабличнойЧасти);
				
				СтрокаТабличнойЧасти.Цена = УчетНДСКлиентСервер.ПересчитатьЦенуПриИзмененииФлаговНалогов(
													СтрокаТабличнойЧасти.Цена, ЦенаВключаетНДС, Объект.СуммаВключаетНДС,
													УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));
				
				// Рассчитываем реквизиты табличной части
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, Объект.СуммаВключаетНДС);
				
				Документы.НалоговаяНакладная.ОбновитьЗначениеЛьготыНДС(Объект, СтрокаТабличнойЧасти);
				
				Документы.НалоговаяНакладная.ЗаполнитьСтатьюДекларацииНДСНалоговыеОбязательства(
													ДанныеОбъекта, СтрокаТабличнойЧасти, "Товары", Неопределено);
													
				Документы.НалоговаяНакладная.УстановитьКодУКТВЭДВстрокеТоваров(СтрокаТабличнойЧасти);
				
			ИначеЕсли ИмяТаблицы = "Услуги" Тогда
				
				// Заполняем реквизиты табличной части
				СтрокаТабличнойЧасти.Содержание	= СведенияОНоменклатуре.НаименованиеПолное;
				//СтрокаТабличнойЧасти.СтавкаНДС           = СведенияОНоменклатуре.СтавкаНДС;
				ЗаполнитьСтавкуНДС(СтрокаТабличнойЧасти);
				
				СтрокаТабличнойЧасти.Цена = УчетНДСКлиентСервер.ПересчитатьЦенуПриИзмененииФлаговНалогов(
													СтрокаТабличнойЧасти.Цена, ЦенаВключаетНДС, Объект.СуммаВключаетНДС,
													УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));
				
				// Рассчитываем реквизиты табличной части
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, Объект.СуммаВключаетНДС);
				
				Документы.НалоговаяНакладная.ОбновитьЗначениеЛьготыНДС(Объект, СтрокаТабличнойЧасти);
				
				Документы.НалоговаяНакладная.ЗаполнитьСтатьюДекларацииНДСНалоговыеОбязательства(
													ДанныеОбъекта, СтрокаТабличнойЧасти, "Услуги", Неопределено);
													
				Документы.НалоговаяНакладная.УстановитьКодУКТВЭДВстрокеТоваров(СтрокаТабличнойЧасти);
													
			ИначеЕсли ИмяТаблицы = "ВозвратнаяТара" Тогда
				
				СтрокаТабличнойЧасти.Цена = УчетНДСКлиентСервер.ПересчитатьЦенуПриИзмененииФлаговНалогов(
				СтрокаТабличнойЧасти.Цена, ЦенаВключаетНДС, Истина,
				УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СведенияОНоменклатуре.СтавкаНДС));
				
				// Рассчитываем реквизиты табличной части
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
				
			КонецЕсли;
			
		КонецЕсли;
		
		ДобавленныеИзмененныеСтроки[ИмяТаблицы].Добавить(СтрокаТабличнойЧасти);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)

	ОбщегоНазначенияБПКлиент.ОбработкаОповещенияФормыДокумента(ЭтаФорма, Объект.Ссылка, ИмяСобытия, Параметр, Источник);

КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	ПодготовитьФормуНаСервере();

КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если  ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение 
		И Объект.ПродажаНижеОбычнойЦены 
		И НЕ ИдетПринудительнаяЗапись Тогда
		
		ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Запись;
		ПодключитьОбработчикОжидания("ПовторнаяЗаписьДокументаСПроведением", 0.7, Истина);
		ИдетПринудительнаяЗапись = Истина;
				
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	ЗаполнитьДобавленныеКолонкиТаблиц();
	ОбновитьИтоги(ЭтотОбъект);
	
	УстановитьЗаголовокФормы(ЭтаФорма);
	
	УстановитьСостояниеДокумента();
	
	// Авторасчет НДС
	ПерерасчетПроизведен = Истина;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	Если НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДатаДокумента) Тогда
		// Изменение времени не влияет на поведение документа.
		ТекущаяДатаДокумента = Объект.Дата;
		Возврат;
	КонецЕсли;

	// Общие проверки условий по датам.
	ТребуетсяВызовСервера = ОбщегоНазначенияБПКлиент.ТребуетсяВызовСервераПриИзмененииДатыДокумента(Объект.Дата, 
		ТекущаяДатаДокумента, Объект.ВалютаДокумента, ВалютаРегламентированногоУчета);
	
	// Если определили, что изменение даты может повлиять на какие-либо параметры, 
	// то передаем обработку на сервер.
	Если ТребуетсяВызовСервера Тогда
		ДатаПриИзмененииНаСервере();
	КонецЕсли;
	
	ПроверитьНомерНалоговогоДокументаНаСервере();
	
	// Запомним новую дату документа.
	ТекущаяДатаДокумента = Объект.Дата;
	
	// Покажем оповещение о появлении механизма рабочей даты.
	Если НастройкиПредупреждений.РабочаяДатаИзДокумента 
		И НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ОбщегоНазначенияБПКлиент.ПоказатьПредупреждениеОбИзменениях("РабочаяДатаИзДокумента", , НастройкиПредупреждений);
	КонецЕсли;

	ПроверитьСтатьюДекларацииНДС22(Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)

	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		ОрганизацияПриИзмененииНаСервере();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении()

	Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
		КонтрагентПриИзмененииНаСервере();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДоговорКонтрагентаПриИзменении(Элемент)

	Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		ДоговорКонтрагентаПриИзмененииНаСервере();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СделкаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;

	ПараметрыОбъекта = Новый Структура;
	ПараметрыОбъекта.Вставить("Дата"                 , Объект.Дата);
	ПараметрыОбъекта.Вставить("ДоговорКонтрагента"   , Объект.ДоговорКонтрагента);
	ПараметрыОбъекта.Вставить("Контрагент"           , Объект.Контрагент);
	//ПараметрыОбъекта.Вставить("СчетУчета"            , Объект.СчетУчетаРасчетовПоАвансам);
	ПараметрыОбъекта.Вставить("Организация"          , Объект.Организация);
	//ПараметрыОбъекта.Вставить("ОстаткиОбороты"       , "Кт");
	ПараметрыОбъекта.Вставить("ТипыДокументов"       , "Метаданные.Документы.НалоговаяНакладная.Реквизиты.Сделка.Тип");

	ПараметрыФормы = Новый Структура("ПараметрыОбъекта", ПараметрыОбъекта);
	ОткрытьФорму("Документ.ДокументРасчетовСКонтрагентом.ФормаВыбора", ПараметрыФормы, Элемент);
		
КонецПроцедуры

&НаКлиенте
Процедура СделкаПриИзменении(Элемент)
	
	Объект.ДокументОснование = Неопределено;
	
	ДанныеОбъекта = Новый Структура("УсловиеПродажи, ДокументОснование, ДоговорКонтрагента, ВидОперации, Сделка");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
	ЗаполнитьУсловиеПродажиНаСервере(ДанныеОбъекта);
	
	Объект.УсловиеПродажи = ДанныеОбъекта.УсловиеПродажи;
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура СпецРежимНалогообложенияПриИзменении(Элемент)
	
	ЭлементСпискаЗначений = Элемент.СписокВыбора.НайтиПоЗначению(Объект.СпецРежимНалогообложения);
	РасшифровкаСпецРежимНалогообложения = ?(ЭлементСпискаЗначений = Неопределено, "", ЭлементСпискаЗначений.Представление); 
	
КонецПроцедуры

&НаКлиенте
Процедура ТипПричиныНевыдачиПокупателюПриИзменении(Элемент)
	
	ПроверитьСтатьюДекларацииНДС22(Объект);
	
	УправлениеФормой(ЭтаФорма);	

КонецПроцедуры

&НаКлиенте
Процедура ТипПричиныНевыдачиПокупателюПриПродажеНижеОбычнойЦеныПриИзменении(Элемент)
	
	ЭлементСпискаЗначений = Элемент.СписокВыбора.НайтиПоЗначению(Объект.ТипПричиныНевыдачиПокупателюПриПродажеНижеОбычнойЦены);
	РасшифровкаТипПричиныНевыдачиПриПродажеНижеОбычнойЦены = ?(ЭлементСпискаЗначений = Неопределено, "", ЭлементСпискаЗначений.Представление);
	
	УстановитьТекстДополнения();
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(
		Элемент.ТекстРедактирования,
		ЭтотОбъект,
		"Объект.Комментарий"
	);

КонецПроцедуры

&НаСервере
Процедура ДатаПриИзмененииНаСервере()
	
	УстановитьФункциональныеОпцииФормы();
	
	Если (Объект.ВалютаДокумента <> ЭтаФорма.ВалютаРегламентированногоУчета) Тогда
		СтруктураКурсаДокумента        = РаботаСКурсамиВалют.ПолучитьКурсВалюты(Объект.ВалютаДокумента, Объект.Дата);
		Объект.КурсВзаиморасчетов      = СтруктураКурсаДокумента.Курс;
		Объект.КратностьВзаиморасчетов = СтруктураКурсаДокумента.Кратность;
	КонецЕсли;
	
	УстановитьЗаголовкиКолонок();
	
	УправлениеФормойНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()
	
	Объект.ОбособленноеПодразделение = Неопределено;
	Объект.Сделка 					= Неопределено;
	Объект.ДокументОснование 		= Неопределено;	
	
	ПроверитьНомерНалоговогоДокументаНаСервере();		
	
	УстановитьФункциональныеОпцииФормы();
	
	КонтрагентОбработатьИзменение(ЭтаФорма);
	
	УстановитьЗаголовкиКолонок();
	УправлениеФормойНаСервере();
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура КонтрагентОбработатьИзменение(Форма)
	
	Объект 		= Форма.Объект;
	Элементы 	= Форма.Элементы;
	
	Объект.Сделка = Неопределено;

	Если НЕ ЗначениеЗаполнено(Объект.Контрагент) Тогда
		Возврат;
	КонецЕсли;
	
	БухгалтерскийУчетПереопределяемый.УстановитьДоговорКонтрагента(
		Объект.ДоговорКонтрагента, Объект.Контрагент, Объект.Организация, 
		Форма.ПолучитьМассивВидовДоговоров());
		
	НеЯвляетсяРезидентом = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Контрагент, "НеЯвляетсяРезидентом");
	Форма.НеЯвляетсяРезидентом = НеЯвляетсяРезидентом;
		
	Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		ДоговорКонтрагентаОбработатьИзменение(Форма);
	КонецЕсли;
	
	ЗаполнитьСчетаУчетаВТабЧасти(Форма);
	
	ДокументВводаНаОсновании = Неопределено;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ДоговорКонтрагентаОбработатьИзменение(Форма)
	
	Объект = Форма.Объект;

	ВалютаДоИзменения 			= Объект.ВалютаДокумента;
	КурсДоИзменения   			= Объект.КурсВзаиморасчетов;
	КратностьДоИзменения 		= Объект.КратностьВзаиморасчетов;
	ТипЦенДоИзменения 			= Объект.ТипЦен;
	СуммаВключаетНДСДоИзменения = Объект.СуммаВключаетНДС;
	
	ДоговорУказан     = ЗначениеЗаполнено(Объект.ДоговорКонтрагента);
	РеквизитыДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
							Объект.ДоговорКонтрагента, "ВалютаВзаиморасчетов, Владелец, ТипЦен, ВидДоговора, ВедениеВзаиморасчетовНУ");
	
	Если ДоговорУказан Тогда
		Форма.ВалютаВзаиморасчетов = РеквизитыДоговора.ВалютаВзаиморасчетов;
		Объект.ВалютаДокумента     = Форма.ВалютаВзаиморасчетов;
		Если НЕ ЗначениеЗаполнено(Объект.Контрагент) Тогда
			Объект.Контрагент = РеквизитыДоговора.Владелец;
		КонецЕсли;
	Иначе
		Объект.ВалютаДокумента     = Форма.ВалютаРегламентированногоУчета;
	КонецЕсли;
	
	Если ВалютаДоИзменения <> Объект.ВалютаДокумента Тогда
		СтруктураКурсаДокумента        = РаботаСКурсамиВалют.ПолучитьКурсВалюты(Объект.ВалютаДокумента, Объект.Дата);
		Объект.КурсВзаиморасчетов      = СтруктураКурсаДокумента.Курс;
		Объект.КратностьВзаиморасчетов = СтруктураКурсаДокумента.Кратность;
	КонецЕсли;
	
	Если ДоговорУказан И ЗначениеЗаполнено(РеквизитыДоговора.ТипЦен) Тогда
		Объект.ТипЦен           = РеквизитыДоговора.ТипЦен;
		Объект.СуммаВключаетНДС = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(РеквизитыДоговора.ТипЦен, "ЦенаВключаетНДС");
	КонецЕсли;
	
	ПересчитатьЦены = Объект.ВалютаДокумента <> ВалютаДоИзменения
		ИЛИ Объект.КурсВзаиморасчетов <> КурсДоИзменения
		ИЛИ Объект.ТипЦен <> ТипЦенДоИзменения;
	ПересчитатьНДС = Объект.СуммаВключаетНДС <> СуммаВключаетНДСДоИзменения;
	Если ЕстьСтрокиВТабличныхЧастях(Форма) И (ПересчитатьЦены ИЛИ ПересчитатьНДС) Тогда
		ЗаполнитьРассчитатьСуммы(Форма, ВалютаДоИзменения, КурсДоИзменения, КратностьДоИзменения, Ложь, ПересчитатьЦены, ПересчитатьНДС);
	ИначеЕсли ПересчитатьНДС Тогда
		Форма.УстановитьЗаголовкиКолонок();
	КонецЕсли;
	
	ВедениеВзаиморасчетовПоРасчетнымДокументам = ДоговорУказан И РеквизитыДоговора.ВедениеВзаиморасчетовНУ = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоРасчетнымДокументам;
	Внешнеэкономический = ДоговорУказан И РеквизитыДоговора.ВалютаВзаиморасчетов <> Форма.ВалютаРегламентированногоУчета;
	НеЯвляетсяРезидентом = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Контрагент, "НеЯвляетсяРезидентом");
	
	Форма.ВедениеВзаиморасчетовПоРасчетнымДокументам = ВедениеВзаиморасчетовПоРасчетнымДокументам;
	Форма.Внешнеэкономический                        = Внешнеэкономический;
	Форма.НеЯвляетсяРезидентом                       = НеЯвляетсяРезидентом;
	
	
	Если  Объект.ДокументОснование <> Неопределено Тогда
		Если ОбщегоНазначенияБП.ЕстьТабЧастьДокумента("РасшифровкаПлатежа", Объект.ДокументОснование.Метаданные() ) Тогда
			
			Запрос = Новый Запрос();
			Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
			                |	ПлатежныйДокумент.ДоговорКонтрагента
			                |ИЗ
			                |	Документ."+ Объект.ДокументОснование.Метаданные().Имя +".РасшифровкаПлатежа КАК ПлатежныйДокумент
			                |ГДЕ
			                |	ПлатежныйДокумент.Ссылка = &Ссылка
							| И ПлатежныйДокумент.ДоговорКонтрагента = &ДоговорКонтрагента
							|";
			Запрос.УстановитьПараметр("Ссылка", Объект.ДокументОснование);
			Запрос.УстановитьПараметр("ДоговорКонтрагента", Объект.ДоговорКонтрагента);
			
			Выборка = Запрос.Выполнить().Выбрать();
			
			Если НЕ Выборка.Следующий() Тогда
				// нет такого договора в документе
				Объект.ДокументОснование = Неопределено;
			КонецЕсли;
			
		ИначеЕсли ОбщегоНазначенияБП.ЕстьРеквизитДокумента("ДоговорКонтрагента", Объект.ДокументОснование.Метаданные())
			    И Объект.ДокументОснование.ДоговорКонтрагента <> Объект.ДоговорКонтрагента Тогда
			
			Объект.ДокументОснование = Неопределено;
			
		КонецЕсли;		
	КонецЕсли;

	Если Не ВедениеВзаиморасчетовПоРасчетнымДокументам Тогда
		Если ЗначениеЗаполнено(Объект.Сделка) Тогда
			Объект.Сделка = Неопределено;
		КонецЕсли;	
	КонецЕсли;
	
	Если Внешнеэкономический Тогда
		Если Объект.ВозвратнаяТара.Количество() > 0 Тогда
			Объект.ВозвратнаяТара.Очистить();
		КонецЕсли;	
	КонецЕсли;
	
	СчетаУчета   = БухгалтерскийУчетРасчетовСКонтрагентами.ПолучитьСчетаРасчетовСКонтрагентом(Объект.Организация, Объект.Контрагент, Объект.ДоговорКонтрагента);
	Если Объект.ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.РаботыОтНерезидента Тогда
		Объект.СчетУчетаНДС = ПланыСчетов.Хозрасчетный.НалоговыйКредитНеподтвержденный;		
	Иначе
		Объект.СчетУчетаНДС = СчетаУчета.СчетУчетаНДСПродаж;
	КонецЕсли;	
	
	
КонецПроцедуры

&НаСервере
Процедура КонтрагентПриИзмененииНаСервере()
	
	КонтрагентОбработатьИзменение(ЭтаФорма);
	
	// заполним тип причины невыдачи
	ДанныеОбъекта = Новый Структура("Дата, ВидОперации, Контрагент, ВалютаДокумента, ТипПричиныНевыдачиПокупателю, ТребуетВключенияВЕдиныйРеестрНалоговыхНакладных");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	ДанныеОбъекта.Вставить("ДокументОснование", Объект.ДокументОснование); // ИНАГРО
	
	УстановитьТипПричиныНевыдачиПокупателюПоУмолчаниюНаСервере(ДанныеОбъекта);
	
	Объект.ТипПричиныНевыдачиПокупателю 					= ДанныеОбъекта.ТипПричиныНевыдачиПокупателю;
	Объект.ТребуетВключенияВЕдиныйРеестрНалоговыхНакладных  = ДанныеОбъекта.ТребуетВключенияВЕдиныйРеестрНалоговыхНакладных;
	ПроверитьСтатьюДекларацииНДС22(Объект);
	
	УправлениеФормойНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ДоговорКонтрагентаПриИзмененииНаСервере()
	
	ДоговорКонтрагентаОбработатьИзменение(ЭтаФорма);
	
	ЗаполнитьСчетаУчетаВТабЧасти(ЭтаФорма);

	ДанныеОбъекта = Новый Структура("УсловиеПродажи, ДокументОснование, ДоговорКонтрагента, ВидОперации, Сделка");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	ЗаполнитьУсловиеПродажиНаСервере(ДанныеОбъекта);
	Объект.УсловиеПродажи = ДанныеОбъекта.УсловиеПродажи;
	
	Документы.НалоговаяНакладная.ЗаполнитьВидДоговора(Объект);
	
	Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента.ФормаРасчетов) Тогда
	    Объект.ФормаРасчетов = Объект.ДоговорКонтрагента.ФормаРасчетов;  	
		Если Объект.Дата >= '2014-03-01' И Объект.Дата < '2015-01-01' Тогда
			Если Объект.ФормаРасчетов = "Оплата з поточного рахунка" Тогда
				Объект.ФормаРасчетов = "Оплата з поточного рахунку";
			КонецЕсли;
		ИначеЕсли Объект.Дата >= '2015-01-01' Тогда
			Если Объект.ФормаРасчетов = "Оплата з поточного рахунку" Тогда
				Объект.ФормаРасчетов = "Оплата з поточного рахунка";
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли Объект.ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.Бартерный Тогда
		Объект.ФормаРасчетов = "Бартер";  	
	Иначе		
		Объект.ФормаРасчетов = "Оплата з поточного рахунку";                            
		Если ДатаВступленияВСилуПриказа1379 <= Объект.Дата И Объект.Дата < '2014-03-01' ИЛИ Объект.Дата >= '2015-01-01'Тогда
			ФормаРасчетов = "Оплата з поточного рахунка";
		КонецЕсли;
	КонецЕсли;
	
	УправлениеФормойНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбособленноеПодразделениеПриИзменении(Элемент)
	ОбособленноеПодразделениеПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ОбособленноеПодразделениеОчистка(Элемент, СтандартнаяОбработка)
	ОбособленноеПодразделениеПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура ОбособленноеПодразделениеПриИзмененииНаСервере()
	
	ПроверитьНомерНалоговогоДокументаНаСервере();	
	
КонецПроцедуры

&НаКлиенте
Процедура ВидОперацииПриИзменении(Элемент)
	
	ВидОперацииОбработатьИзменение();
	УстановитьКодПризнакаСводной();
	
	УправлениеФормой(ЭтаФорма);
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ВидОперацииОбработатьИзменение() Экспорт
	
	Если Не ЗначениеЗаполнено(Объект.ВидОперации) Тогда
		Возврат;
	КонецЕсли;
	
	Если    Объект.ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.ИтоговаяРозницаОблагаемыеОперации
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.ИтоговаяРозницаОсвобожденныеОперации
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.УсловнаяПродажа
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.СводнаяНаПревышениеБазыНадЦенойПоставки
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.УсловнаяПродажаСписаниеОС Тогда
		
		Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
			Объект.Контрагент = Неопределено;
		КонецЕсли;
		Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
			Объект.ДоговорКонтрагента = Неопределено;
		КонецЕсли;
		Если ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
			Объект.ДокументОснование = Неопределено;
		КонецЕсли;
		
		Объект.ВалютаДокумента = ВалютаРегламентированногоУчета;
		Объект.КратностьВзаиморасчетов = 1;
		Объект.КурсВзаиморасчетов = 1;
		
		Если НЕ Объект.Сделка = Неопределено Тогда
			Объект.Сделка = Неопределено;
		КонецЕсли;
		
		Если Объект.ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.СводнаяНаПревышениеБазыНадЦенойПоставки Тогда
			Объект.Сводная 			      = Истина;
			Объект.ПродажаНижеОбычнойЦены = Ложь;
		КонецЕсли;
		
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.РозницаКонрагентуОблагаемыеОперации
		  ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.РозницаКонрагентуОсвобожденныеОперации Тогда
		  
		Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
			Объект.ДоговорКонтрагента = Неопределено;
		КонецЕсли;
		Если ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
			ДокументОснование = 0;
		КонецЕсли;
		Если НЕ Объект.Сделка = Неопределено Тогда
			Объект.Сделка = Неопределено;
		КонецЕсли;
		
		Объект.ВалютаДокумента = ВалютаРегламентированногоУчета;
		Объект.КратностьВзаиморасчетов = 1;
		Объект.КурсВзаиморасчетов = 1; 	
		
	Иначе

		МассивВидовДоговоров = ПолучитьМассивВидовДоговоров();
		РеквизитыДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
								Объект.ДоговорКонтрагента, "ВидДоговора");

		Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
			Если МассивВидовДоговоров.Найти(РеквизитыДоговора.ВидДоговора) = Неопределено Тогда
				Объект.ДоговорКонтрагента = Неопределено;
				Объект.Сделка = Неопределено;
				Объект.ДокументОснование = Неопределено;
			КонецЕсли;
		КонецЕсли;

		Если ЗначениеЗаполнено(Объект.Контрагент) И ЗначениеЗаполнено(Объект.Организация) Тогда
			БухгалтерскийУчетПереопределяемый.УстановитьДоговорКонтрагента(Объект.ДоговорКонтрагента,
				Объект.Контрагент, Объект.Организация, МассивВидовДоговоров);
		КонецЕсли;

		Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
			ДоговорКонтрагентаОбработатьИзменение(ЭтаФорма);
		КонецЕсли;

	КонецЕсли;
		
	// Очистим при необходимости Флаг Сводная
	Если   НЕ (Объект.ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.ОблагаемыеОперации
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.ОсвобожденныеОперации
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.УсловнаяПродажа
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.СводнаяНаПревышениеБазыНадЦенойПоставки
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.УсловнаяПродажаСписаниеОС) Тогда
		
		Объект.Сводная = Ложь;
		
	КонецЕсли;
	
	// Очистим при необходимости документ-основание
	Если  Объект.ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.РаботыОтНерезидента Тогда
		Если НЕ ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
		 	Объект.ДокументОснование = Неопределено;
			Объект.Сделка = Неопределено;
		КонецЕсли;
	Иначе		
		Если ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
		 	Объект.ДокументОснование = Неопределено;
			Объект.Сделка = Неопределено;
		КонецЕсли;
	КонецЕсли;	

	ДанныеОбъекта = Новый Структура("Дата, ВидОперации, Организация, СуммаВключаетНДС, ДоговорКонтрагента, ВалютаВзаиморасчетов, НеЯвляетсяРезидентом, ТипПричиныНевыдачиПокупателю");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, ЭтаФорма);
	
	Для каждого СтрокаТабличнойЧасти из Объект.Товары Цикл
		
		ЗаполнитьСтавкуНДС(СтрокаТабличнойЧасти);
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, Объект.СуммаВключаетНДС);
		ЗаполнитьСтатьюНалоговыхОбязательств("Товары", СтрокаТабличнойЧасти, ДанныеОбъекта);
		Если Объект.ПродажаНижеОбычнойЦены
			ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.СводнаяНаПревышениеБазыНадЦенойПоставки
			Тогда
			РассчитатьПревышение(Объект, СтрокаТабличнойЧасти);
			РассчитатьНДСПревышения(СтрокаТабличнойЧасти);
		КонецЕсли;

	КонецЦикла;

	Для каждого СтрокаТабличнойЧасти из Объект.Услуги Цикл
		
		ЗаполнитьСтавкуНДС(СтрокаТабличнойЧасти);
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, Объект.СуммаВключаетНДС);
		ЗаполнитьСтатьюНалоговыхОбязательств("Услуги", СтрокаТабличнойЧасти, ДанныеОбъекта);
		Если Объект.ПродажаНижеОбычнойЦены
			ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.СводнаяНаПревышениеБазыНадЦенойПоставки
			Тогда
			РассчитатьПревышение(Объект, СтрокаТабличнойЧасти);
			РассчитатьНДСПревышения(СтрокаТабличнойЧасти);
		КонецЕсли;

	КонецЦикла;

	Для каждого СтрокаТабличнойЧасти из Объект.ОС Цикл
		//необходимо перезаполнить ставки НДС в табличных частях
		ЗаполнитьСтавкуНДС(СтрокаТабличнойЧасти);
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, Объект.СуммаВключаетНДС);
		ЗаполнитьСтатьюНалоговыхОбязательств("ОС", СтрокаТабличнойЧасти, ДанныеОбъекта);
		Если Объект.ПродажаНижеОбычнойЦены 
			ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.СводнаяНаПревышениеБазыНадЦенойПоставки
			Тогда
			РассчитатьПревышение(Объект, СтрокаТабличнойЧасти, Ложь);
			РассчитатьНДСПревышения(СтрокаТабличнойЧасти);
		КонецЕсли;
	КонецЦикла;
	 
	Для каждого СтрокаТабличнойЧасти из Объект.НМА Цикл
		//необходимо перезаполнить ставки НДС в табличных частях
		ЗаполнитьСтавкуНДС(СтрокаТабличнойЧасти);
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, Объект.СуммаВключаетНДС);
		ЗаполнитьСтатьюНалоговыхОбязательств("НМА", СтрокаТабличнойЧасти, ДанныеОбъекта);
		Если Объект.ПродажаНижеОбычнойЦены 
			ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.СводнаяНаПревышениеБазыНадЦенойПоставки
			Тогда
			РассчитатьПревышение(Объект, СтрокаТабличнойЧасти, Ложь);
			РассчитатьНДСПревышения(СтрокаТабличнойЧасти);
		КонецЕсли;

	КонецЦикла;
 
	Если  Объект.ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.ИтоговаяРозницаОсвобожденныеОперации
	  ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.ИтоговаяРозницаОблагаемыеОперации 
	  ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.РозницаКонрагентуОблагаемыеОперации 
	  ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.РозницаКонрагентуОсвобожденныеОперации Тогда
		Объект.СчетУчетаНДС = ПланыСчетов.Хозрасчетный.НалоговыеОбязательстваРозница;
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.УсловнаяПродажа Тогда
		Объект.СчетУчетаНДС = ПланыСчетов.Хозрасчетный.УсловнаяПродажа;
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.РаботыОтНерезидента Тогда
		Объект.СчетУчетаНДС = ПланыСчетов.Хозрасчетный.НалоговыйКредитНеподтвержденный;		
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.УсловнаяПродажаСписаниеОС Тогда
		Объект.СчетУчетаНДС = ПланыСчетов.Хозрасчетный.ПустаяСсылка();		
	Иначе
		СчетаУчета   = БухгалтерскийУчетРасчетовСКонтрагентами.ПолучитьСчетаРасчетовСКонтрагентом(Объект.Организация, Объект.Контрагент, Объект.ДоговорКонтрагента);
		Объект.СчетУчетаНДС = СчетаУчета.СчетУчетаНДСПродаж;
	КонецЕсли;	

	Документы.НалоговаяНакладная.ОбновитьЗначениеЛьготыНДС(Объект);

	// заполним тип причины невыдачи
	ДанныеОбъекта = Новый Структура("Дата, ВидОперации, Контрагент, ВалютаДокумента, ТипПричиныНевыдачиПокупателю, ТребуетВключенияВЕдиныйРеестрНалоговыхНакладных");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	ДанныеОбъекта.Вставить("ДокументОснование", Объект.ДокументОснование); // ИНАГРО
	УстановитьТипПричиныНевыдачиПокупателюПоУмолчаниюНаСервере(ДанныеОбъекта);
	Объект.ТипПричиныНевыдачиПокупателю 					= ДанныеОбъекта.ТипПричиныНевыдачиПокупателю;
	Объект.ТребуетВключенияВЕдиныйРеестрНалоговыхНакладных  = ДанныеОбъекта.ТребуетВключенияВЕдиныйРеестрНалоговыхНакладных;
	ПроверитьСтатьюДекларацииНДС22(Объект);

	ПроверитьНомерНалоговогоДокументаНаСервере();
	
	УстановитьЗаголовокФормы(ЭтаФорма);
	
	//Изменим параметры выбора, зависящие от вида операции
	УстановитьПараметрыВыбора();
	
КонецПроцедуры

&НаКлиенте
Процедура ФормаРасчетовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	// Подготовим список для выбора из часто встречающихся вариантов заполнения этого реквизита
	ФормыОплаты = Новый СписокЗначений();
	ФормыОплаты.Добавить("Готівка");                                                    
	Если ДатаВступленияВСилуПриказа1379 <= Объект.Дата И Объект.Дата < '2014-03-01' ИЛИ Объект.Дата >= '2015-01-01'  Тогда
		ФормыОплаты.Добавить("Оплата з поточного рахунка");
	Иначе
	    ФормыОплаты.Добавить("Оплата з поточного рахунку");
	КонецЕсли;
	ФормыОплаты.Добавить("Бартер");
	ФормыОплаты.Добавить("Чек");
	
	//РезультатВыбора = ВыбратьИзСписка(ФормыОплаты, Элемент);
	
	ОповещениеВыбора = Новый ОписаниеОповещения("ВыборИзСпискаЗавершение", ЭтаФорма);
	ПоказатьВыборИзСписка(ОповещениеВыбора, ФормыОплаты, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборИзСпискаЗавершение(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныйЭлемент <> Неопределено Тогда
		
		Объект.ФормаРасчетов = ВыбранныйЭлемент.Значение;
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументОснованиеПриИзменении(Элемент)
	
	ДанныеОбъекта = Новый Структура("УсловиеПродажи, ДокументОснование, ДоговорКонтрагента, ВидОперации, Сделка");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
	ЗаполнитьУсловиеПродажиНаСервере(ДанныеОбъекта);
	
	Объект.УсловиеПродажи = ДанныеОбъекта.УсловиеПродажи;
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументОснованиеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если НЕ ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		Сообщить(НСтр("ru='Не выбран договор контрагента!';uk='Не обраний договір контрагента!'"));
		Возврат;
	КонецЕсли;
	
	СтруктураОтбора = Новый Структура();
	СтруктураОтбора.Вставить("Организация", 		Объект.Организация);
	СтруктураОтбора.Вставить("Контрагент", 			Объект.Контрагент);
	СтруктураОтбора.Вставить("ДоговорКонтрагента", 	Объект.ДоговорКонтрагента);
	
	Если ЗначениеЗаполнено(Объект.Сделка) Тогда
		СтруктураОтбора.Вставить("Сделка", 			   Объект.Сделка);
		СтруктураОтбора.Вставить("СделкаПоРеализации", Объект.Сделка);
	КонецЕсли;
	
	ДанныеОбъекта = Новый Структура("ВидОперации, Сделка, ДокументОснование");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
	СписокТипов = ПолучитьСписокТиповДляВыбораДокументаОснования(ДанныеОбъекта);
	
	ЭтаФорма.ПоказатьВыборИзСписка(Новый ОписаниеОповещения("ДокументОснованиеНачалоВыбораЗавершение", ЭтотОбъект, Новый Структура("СтруктураОтбора, Элемент", СтруктураОтбора, Элемент)), СписокТипов, Элементы.ДокументОснование);
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументОснованиеНачалоВыбораЗавершение(ВыбранныйЭлемент1, ДополнительныеПараметры) Экспорт
    
    СтруктураОтбора = ДополнительныеПараметры.СтруктураОтбора;
    Элемент = ДополнительныеПараметры.Элемент;
    
    
    ВыбранныйЭлемент = ВыбранныйЭлемент1;
    
    Если ВыбранныйЭлемент = Неопределено Тогда // Отказ от выбора
        Возврат;
    ИначеЕсли  ВыбранныйЭлемент.Значение = Объект.Сделка Тогда
        Объект.ДокументОснование = Объект.Сделка;
        Модифицированность = Истина;
        Возврат;
    КонецЕсли;
    
    ВыбранныйТип = ВыбранныйЭлемент.Значение;
    
    Если ТипЗнч(Объект.ДокументОснование) <> Тип("ДокументСсылка." + ВыбранныйТип) Тогда
        Объект.ДокументОснование = ПредопределенноеЗначение("Документ." +ВыбранныйТип+".ПустаяСсылка");
    КонецЕсли; 
	
	Если ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.ПоступлениеНаРасчетныйСчет") Или 
		 ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.ПриходныйКассовыйОрдер") Тогда
		Если СтруктураОтбора.Свойство("ДоговорКонтрагента") Тогда
			СтруктураОтбора.Удалить("ДоговорКонтрагента");
		КонецЕсли;
	КонецЕсли; 
	
    ПараметрыОткрытия = Новый Структура();
	//Если НЕ (ВыбранныйТип = "ИНАГРО_ВедомостьРеализация" ИЛИ ВыбранныйТип = "ИНАГРО_ВедомостьРеализацияБиологическихАктивов") Тогда
		
	    ПараметрыОткрытия.Вставить("Отбор", СтруктураОтбора);
	    Если ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
	        ПараметрыОткрытия.Вставить("ТекущаяСтрока", Объект.ДокументОснование);
	    КонецЕсли;
	
	//КонецЕсли;
	
    ФормаВыбора = ОткрытьФорму("Документ." +ВыбранныйТип+".ФормаВыбора", ПараметрыОткрытия, Элемент);

КонецПроцедуры

&НаКлиенте
Процедура ТекстДополненияКНаименованиюПриПродажеНижеОбычнойЦеныНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандрартнаяОбработка = Ложь;
	
	Если НЕ ЗначениеЗаполнено(Объект.Номер) Тогда
		
		ПоказатьВопрос(Новый ОписаниеОповещения("ОбработкаВопросаТекстДополненияКНаименованиюПриПродажеНижеОбычнойЦеныНачалоВыбора", ЭтотОбъект, Новый Структура("Элемент", Элемент)), НСтр("ru='Перед началом выбора документ будет записан. Продолжить?';uk='Перед початком вибору документ буде записаний. Продовжити?'"), РежимДиалогаВопрос.ДаНетОтмена);
        Возврат;
		
	КонецЕсли;
	
	ТекстДополненияКНаименованиюПриПродажеНижеОбычнойЦеныНачалоВыбораОкончание(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВопросаТекстДополненияКНаименованиюПриПродажеНижеОбычнойЦеныНачалоВыбора(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Элемент = ДополнительныеПараметры.Элемент;
    
    
    Если НЕ РезультатВопроса = КодВозвратаДиалога.Да Тогда
        
        Возврат;
        
    КонецЕсли;
    
    Записать();
    
    
    ТекстДополненияКНаименованиюПриПродажеНижеОбычнойЦеныНачалоВыбораОкончание(Элемент);

КонецПроцедуры

&НаКлиенте
Процедура ТекстДополненияКНаименованиюПриПродажеНижеОбычнойЦеныНачалоВыбораОкончание(Знач Элемент)
    
    Перем ДанныеОбъекта, МассивВариантов, РезультатВыбора, СписокВариантов;
    
    ДанныеОбъекта = Новый Структура("Дата, Номер, СпецРежимНалогообложения, ОбособленноеПодразделение");
    ЗаполнитьЗначенияСвойств(ДанныеОбъекта,Объект);
	СписокВариантов = Новый СписокЗначений();
	МассивВариантов = ВариантыДополненияКНаименованиюПриПродажеНижеОбычнойЦены(ДанныеОбъекта);
	СписокВариантов.ЗагрузитьЗначения(МассивВариантов);

    ПоказатьВыборИзСписка(Новый ОписаниеОповещения("ТекстДополненияКНаименованиюПриПродажеНижеОбычнойЦеныПослеВыбора", ЭтотОбъект), СписокВариантов, Элемент);

КонецПроцедуры

&НаКлиенте
Процедура ТекстДополненияКНаименованиюПриПродажеНижеОбычнойЦеныПослеВыбора(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
    
    РезультатВыбора = ВыбранныйЭлемент;
    Если Не РезультатВыбора = Неопределено Тогда
        
        Объект.ТекстДополненияКНаименованиюПриПродажеНижеОбычнойЦены = РезультатВыбора.Значение;
        Модифицированность = Истина;
        
    КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Функция ВариантыДополненияКНаименованиюПриПродажеНижеОбычнойЦены(Объект)
	
	Список = новый Массив;
	
	Если Объект.Дата < '2015-01-01' Тогда

		// удаляем префиксы нумерации налоговых
		НомерДокумента = ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(Объект.Номер,Истина,Истина);
		Префикс = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ОбособленноеПодразделение, "Префикс");
		
		ФилиалПрефикс = "";
		СпецРежим = СокрЛП(Объект.СпецРежимНалогообложения);
		Если ЗначениеЗаполнено(Объект.СпецРежимНалогообложения) И НЕ Объект.СпецРежимНалогообложения = "0" Тогда
			КодСпецРежима = "" + СпецРежим;
		Иначе
			КодСпецРежима = " ";//как и в реестре
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Префикс) Тогда
			Если Объект.Дата >= '2014-03-01' Тогда
			    НомерФилиала = "/" + Прав("" + СокрЛП(Формат(Число(Префикс),"ЧЦ=4; ЧГ=0")),4);
			Иначе	
				НомерФилиала = Прав("0000" + СокрЛП(Префикс),4);
			КонецЕсли;
		Иначе
			НомерФилиала = "";	
		КонецЕсли;
		
		Если ЗначениеЗаполнено(КодСпецРежима + НомерФилиала) Тогда
			ФилиалПрефикс = "/" + КодСпецРежима + НомерФилиала;
		КонецЕсли;			
	    НомерДокумента = НомерДокумента + ФилиалПрефикс;
		
		Список.Добавить("(перевищення звичайної ціни над фактичною за товарами,  послугами, указаними  в  податковій  накладній №"+ НомерДокумента +")");
		Список.Добавить("(перевищення звичайної ціни над фактичною за товарами,  послугами, указаними  в  податковій  накладній №"+ НомерДокумента +"; сума процентів нарахованих або таких, що мають бути нараховані на суму номіналу процентного векселя)");
		Список.Добавить("(звичайна ціна за товарами, послугами, указаними  в  податковій  накладній №"+ НомерДокумента +")");
		
	Иначе
		СписокВариантов = Новый СписокЗначений;
		УчетНДС.ЗаполнитьСписокВыбораТекстДополненияКНаименованиюПриПродажеНижеОбычнойЦены(СписокВариантов);
		Для каждого Вариант Из СписокВариантов Цикл
			Список.Добавить(Вариант.Представление);
		КонецЦикла; 
	КонецЕсли;
	
	Возврат Список;
	
КонецФункции

&НаКлиенте
Процедура ПродажаНижеОбычнойЦеныПриИзменении(Элемент)
	
	УправлениеФормой(ЭтаФорма);
	
	Если НЕ Объект.ПродажаНижеОбычнойЦены Тогда
		Объект.ТекстДополненияКНаименованиюПриПродажеНижеОбычнойЦены = "";
		Объект.ТипПричиныНевыдачиПокупателюПриПродажеНижеОбычнойЦены = 0;
	КонецЕсли; 

	ДанныеОбъекта = Новый Структура("Дата, ВидОперации, Контрагент, ВалютаДокумента, ТипПричиныНевыдачиПокупателю, ТребуетВключенияВЕдиныйРеестрНалоговыхНакладных");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	ДанныеОбъекта.Вставить("ДокументОснование", Объект.ДокументОснование); // ИНАГРО
	
	УстановитьТипПричиныНевыдачиПокупателюПоУмолчаниюНаСервере(ДанныеОбъекта);
	
	Объект.ТипПричиныНевыдачиПокупателю 					= ДанныеОбъекта.ТипПричиныНевыдачиПокупателю;
	Объект.ТребуетВключенияВЕдиныйРеестрНалоговыхНакладных  = ДанныеОбъекта.ТребуетВключенияВЕдиныйРеестрНалоговыхНакладных;
	ПроверитьСтатьюДекларацииНДС22(Объект);
	
	
	Если Объект.Дата >= '2015-01-01' Тогда
		
		Объект.ТипПричиныНевыдачиПокупателюПриПродажеНижеОбычнойЦены = 15;
		
		ТипПричиныНевыдачиПокупателюПриПродажеНижеОбычнойЦеныПриИзменении(Элементы.ТипПричиныНевыдачиПокупателюПриПродажеНижеОбычнойЦены);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УстановитьТипПричиныНевыдачиПокупателюПоУмолчаниюНаСервере(Объект)

	Документы.НалоговаяНакладная.УстановитьТипПричиныНевыдачиПокупателюПоУмолчанию(Объект);	

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ИзменитьПараметрыВыбораПолейСубконто(Форма,ИмяСчета="СчетНДС")
	
	Если ИмяСчета="СчетНДС" Тогда
		ПараметрыДокумента = СписокПараметровВыбораСубконто(Форма, Форма.Объект, "СубконтоКт%Индекс%", "СчетНДС");
		БухгалтерскийУчетКлиентСервер.ИзменитьПараметрыВыбораПолейСубконто(
			Форма, Форма.Объект, "СубконтоКт%Индекс%", "СубконтоКт%Индекс%", ПараметрыДокумента);
	Иначе
		ПараметрыДокумента = СписокПараметровВыбораСубконто(Форма, Форма.Объект, "СубконтоДт%Индекс%", "СчетДт");
		БухгалтерскийУчетКлиентСервер.ИзменитьПараметрыВыбораПолейСубконто(
			Форма, Форма.Объект, "СубконтоДт%Индекс%", "СубконтоДт%Индекс%", ПараметрыДокумента);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура СчетНДСПриИзменении(Элемент)
	
	
	ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3",
		"СубконтоКт1", "СубконтоКт2", "СубконтоКт3");
	ПоляОбъекта.Вставить("Организация",   Объект.Организация);
	БухгалтерскийУчетКлиентСервер.ПриИзмененииСчета(Объект.СчетНДС, Объект, ПоляОбъекта);
	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма,"СчетНДС");
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура СчетДтПриИзменении(Элемент)
	
	ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3",
		"СубконтоДт1", "СубконтоДт2", "СубконтоДт3");
	ПоляОбъекта.Вставить("Организация",   Объект.Организация);
	БухгалтерскийУчетКлиентСервер.ПриИзмененииСчета(Объект.СчетДт, Объект, ПоляОбъекта);
	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма,"СчетДт");
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоКтПриИзменении(Элемент)
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма,"СчетНДС");
КонецПроцедуры

&НаКлиенте
Процедура СубконтоДтПриИзменении(Элемент)
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма,"СчетДт");
КонецПроцедуры

&НаКлиенте
Процедура ПодтверждаетсяГТДПриИзменении(Элемент)
	
	Если НЕ Объект.ПодтверждаетсяГТД Тогда
		
		Объект.НомерГТД = "";	
		
	КонецЕсли;
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ВключаетсяВУточняющийРасчетПриИзменении(Элемент)
	УправлениеФормой(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ВидДоговораНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормыВыбора = Новый Структура("ТекущаяСтрока", ПолучитьСсылкуНаВидДоговораПоГКПоНаименованию(Объект.ВидДоговора));
	
	ОткрытьФорму("Справочник.ВидыДоговоровПоГК.ФормаВыбора", ПараметрыФормыВыбора, Элемент);

КонецПроцедуры

&НаКлиенте
Процедура ЦеныИВалютаНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОбработатьИзмененияПоКнопкеЦеныИВалюты();
	
КонецПроцедуры

&НаКлиенте
Процедура СводнаяПриИзменении(Элемент)
	
	УстановитьКодПризнакаСводной();
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура КодПризнакаСводнойПриИзменении(Элемент)
	УправлениеФормой(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ИНАГРО_НаправлениеОперацииПриИзменении(Элемент) // ИНАГРО
	
	ЭлементСпискаЗначений 		  = Элементы.ИНАГРО_НаправлениеОперации.СписокВыбора.НайтиПоЗначению(Объект.ИНАГРО_НаправлениеОперации);
	РасшифровкаИНАГРО_НаправлениеОперации = ?(ЭлементСпискаЗначений = Неопределено, "", ЭлементСпискаЗначений.Представление); 

КонецПроцедуры   

#КонецОбласти

#Область ОбработчикиСобытийТаблицыФормыТовары

&НаКлиенте
Процедура ТоварыПриИзменении(Элемент)

	ОбновитьИтоги(ЭтаФорма);
	
	// Авторасчет НДС
	ПерерасчетПроизведен = Ложь;
	Объект.РеквизитыНомерСтрокиННАктуальны = Ложь;

КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если НоваяСтрока И ОтменаРедактирования Тогда
		ОбновитьИтоги(ЭтаФорма);
		// Авторасчет НДС
		ПерерасчетПроизведен = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	Если НЕ ЗначениеЗаполнено(ТекущиеДанные.Номенклатура) Тогда // ИНАГРО
		Возврат
	КонецЕсли;
	
	ДанныеСтрокиТаблицы = Новый Структура(
		"Номенклатура, ЕдиницаИзмерения, Коэффициент, Количество,
		|Цена, Сумма, СтавкаНДС, СуммаНДС,
		|КодУКТВЭД, НомерГТД,
		|СуммаБезСкидки, СуммаСкидки,
		|СтатьяДекларацииНДСНалоговыеОбязательства");
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, ТекущиеДанные);
	
	// заполняем ставку НДС
	ЗаполнитьСтавкуНДС(ДанныеСтрокиТаблицы);
	
	ДанныеОбъекта = Новый Структура(
		"Дата, ВидОперации, Организация,
		|ТипЦен, ВалютаДокумента, КурсВзаиморасчетов, КратностьВзаиморасчетов,
		|ВалютаВзаиморасчетов, НеЯвляетсяРезидентом,
		|ТипПричиныНевыдачиПокупателю,
		|ЛьготаНДС,ЛьготаНДСОписание,
		|СуммаВключаетНДС, ДоговорКонтрагента,
		|ЭтоКомиссия, Реализация");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, ЭтотОбъект);
	ДанныеОбъекта.ЭтоКомиссия = Ложь;
	ДанныеОбъекта.Реализация  = Истина;
	
	ПараметрыОбработки = Новый Структура();
	ПараметрыОбработки.Вставить("ДанныеСтрокиТаблицы", 	ДанныеСтрокиТаблицы);
	ПараметрыОбработки.Вставить("ДанныеОбъекта", 		ДанныеОбъекта);
	
	// Дополнительные поля, требующиеся для заполнения добавленных колонок табличного поля текущей формы.
	ПараметрыОбработки.ДанныеСтрокиТаблицы.Вставить("Всего", ТекущиеДанные.Всего);
	
	ТоварыНоменклатураПриИзмененииНаСервере(
		ПараметрыОбработки.ДанныеСтрокиТаблицы, ПараметрыОбработки.ДанныеОбъекта);
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ПараметрыОбработки.ДанныеСтрокиТаблицы);
	
	Объект.ЛьготаНДС 		 = ПараметрыОбработки.ДанныеОбъекта.ЛьготаНДС;
	Объект.ЛьготаНДСОписание = ПараметрыОбработки.ДанныеОбъекта.ЛьготаНДСОписание;
	
	// рассчитываем суммы превышений
	Если Объект.ПродажаНижеОбычнойЦены
		ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийНалоговаяНакладная.СводнаяНаПревышениеБазыНадЦенойПоставки")
		Тогда
		РассчитатьПревышение(Объект, ТекущиеДанные, Ложь);
		РассчитатьНДСПревышения(ТекущиеДанные);
	КонецЕсли;

	УстановитьСвязиПараметровВыбораЕдиницыИзмерения(ТекущиеДанные.Номенклатура); // ИНАГРО
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЕдиницаИзмеренияПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	ДанныеСтрокиТаблицы = Новый Структура(
		"Номенклатура, ЕдиницаИзмерения, Коэффициент, Количество,
		|Цена, Сумма, СтавкаНДС, СуммаНДС,
		|СуммаБезСкидки, СуммаСкидки,
		|СтатьяДекларацииНДСНалоговыеОбязательства");
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, ТекущиеДанные);
	
	ДанныеОбъекта = Новый Структура(
		"Дата, ВидОперации, Организация,
		|ТипЦен, ВалютаДокумента, КурсВзаиморасчетов, КратностьВзаиморасчетов,
		|СуммаВключаетНДС, ДоговорКонтрагента,
		|ЭтоКомиссия, Реализация");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	ДанныеОбъекта.ЭтоКомиссия = Ложь;
	ДанныеОбъекта.Реализация  = Истина;
	
	ПараметрыОбработки = Новый Структура();
	ПараметрыОбработки.Вставить("ДанныеСтрокиТаблицы", 	ДанныеСтрокиТаблицы);
	ПараметрыОбработки.Вставить("ДанныеОбъекта", 		ДанныеОбъекта);
	
	// Дополнительные поля, требующиеся для заполнения добавленных колонок табличного поля текущей формы.
	ПараметрыОбработки.ДанныеСтрокиТаблицы.Вставить("Всего", ТекущиеДанные.Всего);
	
	ТоварыЕдиницаИзмеренияПриИзмененииНаСервере(
		ПараметрыОбработки.ДанныеСтрокиТаблицы, ПараметрыОбработки.ДанныеОбъекта);
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ПараметрыОбработки.ДанныеСтрокиТаблицы);
	
	// рассчитываем суммы превышений
	Если Объект.ПродажаНижеОбычнойЦены
		ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийНалоговаяНакладная.СводнаяНаПревышениеБазыНадЦенойПоставки")
		Тогда
		РассчитатьПревышение(Объект, ТекущиеДанные, Ложь);
		РассчитатьНДСПревышения(ТекущиеДанные);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКоличествоПриИзменении(Элемент)

	ОбработкаТабличныхЧастейКлиентСервер.ПриИзмененииКоличествоЦена(ЭтаФорма, "Товары");
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;

	// рассчитываем суммы превышений
	Если Объект.ПродажаНижеОбычнойЦены
		ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийНалоговаяНакладная.СводнаяНаПревышениеБазыНадЦенойПоставки")
		Тогда
		РассчитатьПревышение(Объект, ТекущиеДанные, Ложь);
		РассчитатьНДСПревышения(ТекущиеДанные);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ТоварыЦенаПриИзменении(Элемент)

	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	ОбработкаТабличныхЧастейКлиентСервер.ПриИзмененииКоличествоЦена(ЭтаФорма, "Товары");
	
	// рассчитываем суммы превышений
	Если Объект.ПродажаНижеОбычнойЦены
		ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийНалоговаяНакладная.СводнаяНаПревышениеБазыНадЦенойПоставки")
		Тогда
		РассчитатьПревышение(Объект, ТекущиеДанные, Ложь);
		РассчитатьНДСПревышения(ТекущиеДанные);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаБезСкидкиПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	ОбработкаТабличныхЧастейКлиентСервер.ПриИзмененииСуммаБезСкидки(ЭтаФорма, "Товары");
	
	// рассчитываем суммы превышений
	Если Объект.ПродажаНижеОбычнойЦены
		ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийНалоговаяНакладная.СводнаяНаПревышениеБазыНадЦенойПоставки")
		Тогда
		РассчитатьПревышение(Объект, ТекущиеДанные, Ложь);
		РассчитатьНДСПревышения(ТекущиеДанные);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаСкидкиПриИзменении(Элемент)
	
	ОбработкаТабличныхЧастейКлиентСервер.ПриИзмененииСуммаСкидки(ЭтаФорма, "Товары");
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;

	// рассчитываем суммы превышений
	Если Объект.ПродажаНижеОбычнойЦены
		ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийНалоговаяНакладная.СводнаяНаПревышениеБазыНадЦенойПоставки")
		Тогда
		РассчитатьПревышение(Объект, ТекущиеДанные, Ложь);
		РассчитатьНДСПревышения(ТекущиеДанные);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаСкидкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбработкаТабличныхЧастейКлиентСервер.СуммаСкидкиНачалоВыбора(ЭтаФорма, "Товары", Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаПриИзменении(Элемент)

	ОбработкаТабличныхЧастейКлиентСервер.ПриИзмененииСумма(ЭтаФорма, "Товары");

	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;

	// рассчитываем суммы превышений
	Если Объект.ПродажаНижеОбычнойЦены
		ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийНалоговаяНакладная.СводнаяНаПревышениеБазыНадЦенойПоставки")
		Тогда
		РассчитатьПревышение(Объект, ТекущиеДанные, Ложь);
		РассчитатьНДСПревышения(ТекущиеДанные);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСтавкаНДСПриИзменении(Элемент)

	ОбработкаТабличныхЧастейКлиентСервер.ПриИзмененииСтавкаНДС(ЭтаФорма, "Товары");
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	// заполняем статью декларации
	ДанныеСтрокиТаблицы = Новый Структура("СтавкаНДС, СтатьяДекларацииНДСНалоговыеОбязательства");
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, ТекущиеДанные);
	
	ДанныеОбъекта = Новый Структура("Дата, ВидОперации, Организация, СуммаВключаетНДС, ДоговорКонтрагента, ВалютаВзаиморасчетов, НеЯвляетсяРезидентом, ТипПричиныНевыдачиПокупателю");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, ЭтаФорма);
	
	ЗаполнитьСтатьюНалоговыхОбязательств("Товары", ДанныеСтрокиТаблицы, ДанныеОбъекта);
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтрокиТаблицы);
	
	// рассчитываем суммы превышений
	Если Объект.ПродажаНижеОбычнойЦены
		ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийНалоговаяНакладная.СводнаяНаПревышениеБазыНадЦенойПоставки")
		Тогда
		РассчитатьПревышение(Объект, ТекущиеДанные, Ложь);
		РассчитатьНДСПревышения(ТекущиеДанные);
	КонецЕсли;
	
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаНДСПриИзменении(Элемент)

	ОбработкаТабличныхЧастейКлиентСервер.ПриИзмененииСуммаНДС(ЭтаФорма, "Товары");

КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаПревышенияПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	РассчитатьНДСПревышения(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЦенаОбычнаяПриИзменении(Элемент)

	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	РассчитатьПревышение(Объект, ТекущиеДанные, Ложь);
	РассчитатьНДСПревышения(ТекущиеДанные);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ТоварыНоменклатураПриИзмененииНаСервере(СтрокаТабличнойЧасти, ДанныеОбъекта)

	// ИНАГРО++
	Если ТипЗнч(СтрокаТабличнойЧасти.Номенклатура) = Тип("СправочникСсылка.Номенклатура") Тогда
		
		СведенияОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОНоменклатуре(
							СтрокаТабличнойЧасти.Номенклатура, ДанныеОбъекта);
							
	ИначеЕсли ТипЗнч(СтрокаТабличнойЧасти.Номенклатура) = Тип("СправочникСсылка.БиологическиеАктивы") Тогда
		
		Если ИНАГРО_ОбщийВызовСервераПовтИсп.ЕстьБСПУ() Тогда
			МодульИНАГРО_БиологическиеАктивы = ОбщегоНазначения.ОбщийМодуль("ИНАГРО_БиологическиеАктивы");		
			СведенияОНоменклатуре = МодульИНАГРО_БиологическиеАктивы.ПолучитьСведенияОБА(СтрокаТабличнойЧасти.Номенклатура, ДанныеОбъекта);
		КонецЕсли;
	
	КонецЕсли;
	// ИНАГРО--

	Если СведенияОНоменклатуре = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаТабличнойЧасти.ЕдиницаИзмерения		= СведенияОНоменклатуре.БазоваяЕдиницаИзмерения;
	СтрокаТабличнойЧасти.Коэффициент			= СведенияОНоменклатуре.Коэффициент;
	СтрокаТабличнойЧасти.Цена					= СведенияОНоменклатуре.Цена;
	
	Документы.НалоговаяНакладная.ОбновитьЗначениеЛьготыНДС(ДанныеОбъекта, СтрокаТабличнойЧасти);	
	
	Документы.НалоговаяНакладная.ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(
										ДанныеОбъекта, СтрокаТабличнойЧасти, "Товары", СведенияОНоменклатуре);
				
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ДанныеОбъекта.СуммаВключаетНДС);
	
	Документы.НалоговаяНакладная.УстановитьКодУКТВЭДВстрокеТоваров(СтрокаТабличнойЧасти);	
	
	ЗаполнитьДобавленныеКолонкиСтрокиТаблицы(СтрокаТабличнойЧасти, ДанныеОбъекта);

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ТоварыЕдиницаИзмеренияПриИзмененииНаСервере(СтрокаТабличнойЧасти, Знач ДанныеОбъекта)
	
	// ИНАГРО++
	Если ТипЗнч(СтрокаТабличнойЧасти.Номенклатура) = Тип("СправочникСсылка.Номенклатура") Тогда
		
		ОбработкаТабличныхЧастей.ЗаполнитьКоэффициентТабЧасти(
						СтрокаТабличнойЧасти, ДанныеОбъекта, "Товары", Метаданные.Документы.НалоговаяНакладная);
						
	ИначеЕсли ТипЗнч(СтрокаТабличнойЧасти.Номенклатура) = Тип("СправочникСсылка.БиологическиеАктивы") Тогда
		
		Если ИНАГРО_ОбщийВызовСервераПовтИсп.ЕстьБСПУ() Тогда
			МодульИНАГРО_БиологическиеАктивы = ОбщегоНазначения.ОбщийМодуль("ИНАГРО_БиологическиеАктивы");		
			МодульИНАГРО_БиологическиеАктивы.ЗаполнитьКоэффициентТабЧасти(СтрокаТабличнойЧасти, ДанныеОбъекта, "Товары", Метаданные.Документы.НалоговаяНакладная);
		КонецЕсли;
	
	КонецЕсли;
	// ИНАГРО--
	
	ОбработкаТабличныхЧастей.ЗаполнитьКоэффициентТабЧасти(СтрокаТабличнойЧасти, ДанныеОбъекта, "Товары", Метаданные.Документы.НалоговаяНакладная);
	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ДанныеОбъекта.СуммаВключаетНДС);
	
	ЗаполнитьДобавленныеКолонкиСтрокиТаблицы(СтрокаТабличнойЧасти, ДанныеОбъекта);

КонецПроцедуры

&НаКлиенте
Процедура ТоварыКодУКТВЭДНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	НачалоВыбораНоменклатурыГТД(Элемент, СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура ТоварыКодУКТВЭДОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.НоменклатураГТД") Тогда
	
		ТекущаяСтрокаТоваров = Элементы.Товары.ТекущиеДанные;
		Если НЕ ТекущаяСтрокаТоваров = Неопределено Тогда
			ТекущаяСтрокаТоваров.НомерГТД = ПолучитьРеквизитНоменклатурыГТДНаСервере(ВыбранноеЗначение, "НомерГТД");
		КонецЕсли;

		ВыбранноеЗначение = ПолучитьРеквизитНоменклатурыГТДНаСервере(ВыбранноеЗначение, "КодУКТВЭД");	
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНомерГТДОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.НоменклатураГТД") Тогда
	
		ТекущаяСтрокаТоваров = Элементы.Товары.ТекущиеДанные;
		Если НЕ ТекущаяСтрокаТоваров = Неопределено Тогда
			ТекущаяСтрокаТоваров.КодУКТВЭД = ПолучитьРеквизитНоменклатурыГТДНаСервере(ВыбранноеЗначение, "КодУКТВЭД");
		КонецЕсли;

		ВыбранноеЗначение = ПолучитьРеквизитНоменклатурыГТДНаСервере(ВыбранноеЗначение, "НомерГТД");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНомерГТДНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	НачалоВыбораНоменклатурыГТД(Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНомерСтрокиННПриИзменении(Элемент)
	Объект.РеквизитыНомерСтрокиННАктуальны = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЕдиницаИзмеренияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка) // ИНАГРО
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	УстановитьСвязиПараметровВыбораЕдиницыИзмерения(ТекущиеДанные.Номенклатура);
	
КонецПроцедуры 

#КонецОбласти

#Область ОбработчикиСобытийТаблицыФормыВозвратнаяТара

&НаКлиенте
Процедура ВозвратнаяТараПриИзменении(Элемент)

	ОбновитьИтоги(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ВозвратнаяТараПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если НоваяСтрока И ОтменаРедактирования Тогда
		ОбновитьИтоги(ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВозвратнаяТараНоменклатураПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ВозвратнаяТара.ТекущиеДанные;
	
	ДанныеСтрокиТаблицы = Новый Структура("Номенклатура, Количество, Цена, Сумма");
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, ТекущиеДанные);
	
	ДанныеОбъекта = Новый Структура("Ссылка, Дата, ВидОперации, Организация,
		|ТипЦен, ВалютаДокумента, КурсВзаиморасчетов, КратностьВзаиморасчетов,
		|СуммаВключаетНДС, ДоговорКонтрагента, ЭтоКомиссия, Реализация");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	ДанныеОбъекта.СуммаВключаетНДС = Истина;
	ДанныеОбъекта.ЭтоКомиссия      = Ложь;
	ДанныеОбъекта.Реализация       = Истина;
	
	ВозвратнаяТараНоменклатураПриИзмененииНаСервере(ДанныеСтрокиТаблицы, ДанныеОбъекта);
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтрокиТаблицы);
	
КонецПроцедуры

&НаКлиенте
Процедура ВозвратнаяТараКоличествоПриИзменении(Элемент)

	ОбработкаТабличныхЧастейКлиентСервер.ПриИзмененииКоличествоЦена(ЭтаФорма, "ВозвратнаяТара");

КонецПроцедуры

&НаКлиенте
Процедура ВозвратнаяТараЦенаПриИзменении(Элемент)

	ОбработкаТабличныхЧастейКлиентСервер.ПриИзмененииКоличествоЦена(ЭтаФорма, "ВозвратнаяТара");

КонецПроцедуры

&НаКлиенте
Процедура ВозвратнаяТараСуммаПриИзменении(Элемент)

	ОбработкаТабличныхЧастейКлиентСервер.ПриИзмененииСумма(ЭтаФорма, "ВозвратнаяТара");

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ВозвратнаяТараНоменклатураПриИзмененииНаСервере(СтрокаТабличнойЧасти, Знач ДанныеОбъекта)

	СведенияОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОНоменклатуре(
									СтрокаТабличнойЧасти.Номенклатура, ДанныеОбъекта);
	Если СведенияОНоменклатуре = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаТабличнойЧасти.Цена = УчетНДСКлиентСервер.ПересчитатьЦенуПриИзмененииФлаговНалогов(
									СведенияОНоменклатуре.Цена, СведенияОНоменклатуре.ЦенаВключаетНДС, ДанныеОбъекта.СуммаВключаетНДС,
									УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СведенияОНоменклатуре.СтавкаНДС));
	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицыФормыУслуги

&НаКлиенте
Процедура УслугиПриИзменении(Элемент)

	ОбновитьИтоги(ЭтаФорма);
	
	// Авторасчет НДС
	ПерерасчетПроизведен = Ложь;
	Объект.РеквизитыНомерСтрокиННАктуальны = Ложь;

КонецПроцедуры

&НаКлиенте
Процедура УслугиПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если НоваяСтрока И ОтменаРедактирования Тогда
		ОбновитьИтоги(ЭтаФорма);
		
		// Авторасчет НДС
		ПерерасчетПроизведен = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиНоменклатураПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Услуги.ТекущиеДанные;

	// Получим общие параметры обработки для реквизитов документа
	ДанныеСтрокиТаблицы = Новый Структура("Номенклатура, Содержание, Количество,
		|Цена, Сумма, СтавкаНДС, СуммаНДС,
		|КодУКТВЭД,
		|СуммаБезСкидки, СуммаСкидки,
		|СтатьяДекларацииНДСНалоговыеОбязательства");
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, ТекущиеДанные);
	
	// заполняем ставку НДС
	ЗаполнитьСтавкуНДС(ДанныеСтрокиТаблицы);
	
	ДанныеОбъекта = Новый Структура("Ссылка, Дата, ВидОперации, Организация,
		|ТипЦен, ВалютаДокумента, КурсВзаиморасчетов, КратностьВзаиморасчетов,
		|ВалютаВзаиморасчетов, НеЯвляетсяРезидентом,
		|ТипПричиныНевыдачиПокупателю,
		|СуммаВключаетНДС, ДоговорКонтрагента,
		|ЛьготаНДС,ЛьготаНДСОписание,
		|ЭтоКомиссия, Реализация");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, ЭтотОбъект);
	ДанныеОбъекта.ЭтоКомиссия = Ложь;
	ДанныеОбъекта.Реализация  = Истина;
	
	ПараметрыОбработки = Новый Структура();
	ПараметрыОбработки.Вставить("ДанныеСтрокиТаблицы", 	ДанныеСтрокиТаблицы);
	ПараметрыОбработки.Вставить("ДанныеОбъекта", 		ДанныеОбъекта);
	
	// Дополнительные поля, требующиеся для заполнения добавленных колонок табличного поля текущей формы.
	ПараметрыОбработки.ДанныеСтрокиТаблицы.Вставить("Всего", ТекущиеДанные.Всего);
	
	УслугиНоменклатураПриИзмененииНаСервере(
		ПараметрыОбработки.ДанныеСтрокиТаблицы, ПараметрыОбработки.ДанныеОбъекта);
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ПараметрыОбработки.ДанныеСтрокиТаблицы);
	
	Объект.ЛьготаНДС 		 = ПараметрыОбработки.ДанныеОбъекта.ЛьготаНДС;
	Объект.ЛьготаНДСОписание = ПараметрыОбработки.ДанныеОбъекта.ЛьготаНДСОписание;
	
	// рассчитываем суммы превышений
	Если Объект.ПродажаНижеОбычнойЦены
		ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийНалоговаяНакладная.СводнаяНаПревышениеБазыНадЦенойПоставки")
		Тогда
		РассчитатьПревышение(Объект, ТекущиеДанные, Ложь);
		РассчитатьНДСПревышения(ТекущиеДанные);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиКодУКТВЭДНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	НачалоВыбораНоменклатурыГТДУслуги(Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиКодУКТВЭДОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.НоменклатураГТД") Тогда
				
		ВыбранноеЗначение = ПолучитьРеквизитНоменклатурыГТДНаСервере(ВыбранноеЗначение, "КодУКТВЭД");	
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиКоличествоПриИзменении(Элемент)

	ТекущиеДанные = Элементы.Услуги.ТекущиеДанные;
	
	ОбработкаТабличныхЧастейКлиентСервер.ПриИзмененииКоличествоЦена(ЭтаФорма, "Услуги", 1);
	
	// рассчитываем суммы превышений
	Если Объект.ПродажаНижеОбычнойЦены
		ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийНалоговаяНакладная.СводнаяНаПревышениеБазыНадЦенойПоставки")
		Тогда
		РассчитатьПревышение(Объект, ТекущиеДанные, Ложь);
		РассчитатьНДСПревышения(ТекущиеДанные);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиЦенаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Услуги.ТекущиеДанные;
	
	ОбработкаТабличныхЧастейКлиентСервер.ПриИзмененииКоличествоЦена(ЭтаФорма, "Услуги", 1);
	
	// рассчитываем суммы превышений
	Если Объект.ПродажаНижеОбычнойЦены
		ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийНалоговаяНакладная.СводнаяНаПревышениеБазыНадЦенойПоставки")
		Тогда
		РассчитатьПревышение(Объект, ТекущиеДанные, Ложь);
		РассчитатьНДСПревышения(ТекущиеДанные);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура УслугиСуммаБезСкидкиПриИзменении(Элемент)
	
	ОбработкаТабличныхЧастейКлиентСервер.ПриИзмененииСуммаБезСкидки(ЭтаФорма, "Услуги", 1);
	
	ТекущиеДанные = Элементы.Услуги.ТекущиеДанные;

	// рассчитываем суммы превышений
	Если Объект.ПродажаНижеОбычнойЦены
		ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийНалоговаяНакладная.СводнаяНаПревышениеБазыНадЦенойПоставки")
		Тогда
		РассчитатьПревышение(Объект, ТекущиеДанные, Ложь);
		РассчитатьНДСПревышения(ТекущиеДанные);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиСуммаСкидкиПриИзменении(Элемент)
	
	ОбработкаТабличныхЧастейКлиентСервер.ПриИзмененииСуммаСкидки(ЭтаФорма, "Услуги");
	
	ТекущиеДанные = Элементы.Услуги.ТекущиеДанные;

	// рассчитываем суммы превышений
	Если Объект.ПродажаНижеОбычнойЦены
		ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийНалоговаяНакладная.СводнаяНаПревышениеБазыНадЦенойПоставки")
		Тогда
		РассчитатьПревышение(Объект, ТекущиеДанные, Ложь);
		РассчитатьНДСПревышения(ТекущиеДанные);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиСуммаСкидкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбработкаТабличныхЧастейКлиентСервер.СуммаСкидкиНачалоВыбора(ЭтаФорма, "Услуги", Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиСуммаПриИзменении(Элемент)

	ТекущиеДанные = Элементы.Услуги.ТекущиеДанные;
	
	ОбработкаТабличныхЧастейКлиентСервер.ПриИзмененииСумма(ЭтаФорма, "Услуги", 1);
	
	// рассчитываем суммы превышений
	Если Объект.ПродажаНижеОбычнойЦены
		ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийНалоговаяНакладная.СводнаяНаПревышениеБазыНадЦенойПоставки")
		Тогда
		РассчитатьПревышение(Объект, ТекущиеДанные, Ложь);
		РассчитатьНДСПревышения(ТекущиеДанные);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура УслугиСтавкаНДСПриИзменении(Элемент)

	ТекущиеДанные = Элементы.Услуги.ТекущиеДанные;
	
	ОбработкаТабличныхЧастейКлиентСервер.ПриИзмененииСтавкаНДС(ЭтаФорма, "Услуги");
	
	// заполняем статью декларации
	ДанныеСтрокиТаблицы = Новый Структура("СтавкаНДС, СтатьяДекларацииНДСНалоговыеОбязательства");
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, ТекущиеДанные);
	
	ДанныеОбъекта = Новый Структура("Дата, ВидОперации, Организация, СуммаВключаетНДС, ДоговорКонтрагента, ВалютаВзаиморасчетов, НеЯвляетсяРезидентом, ТипПричиныНевыдачиПокупателю");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, ЭтаФорма);
	
	ЗаполнитьСтатьюНалоговыхОбязательств("Услуги", ДанныеСтрокиТаблицы, ДанныеОбъекта);
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтрокиТаблицы);
	
	// рассчитываем суммы превышений
	Если Объект.ПродажаНижеОбычнойЦены
		ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийНалоговаяНакладная.СводнаяНаПревышениеБазыНадЦенойПоставки")
		Тогда
		РассчитатьПревышение(Объект, ТекущиеДанные, Ложь);
		РассчитатьНДСПревышения(ТекущиеДанные);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура УслугиСуммаНДСПриИзменении(Элемент)

	ОбработкаТабличныхЧастейКлиентСервер.ПриИзмененииСуммаНДС(ЭтаФорма, "Услуги");

КонецПроцедуры

&НаКлиенте
Процедура УслугиЦенаОбычнаяПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Услуги.ТекущиеДанные;
	
	РассчитатьПревышение(Объект, ТекущиеДанные, Ложь);
	РассчитатьНДСПревышения(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиСуммаПревышенияПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Услуги.ТекущиеДанные;
	
	РассчитатьНДСПревышения(ТекущиеДанные);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УслугиНоменклатураПриИзмененииНаСервере(СтрокаТабличнойЧасти, ДанныеОбъекта)

	СведенияОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОНоменклатуре(
		СтрокаТабличнойЧасти.Номенклатура, ДанныеОбъекта);
	Если СведенияОНоменклатуре = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаТабличнойЧасти.Содержание	= СведенияОНоменклатуре.НаименованиеПолное;
	СтрокаТабличнойЧасти.Цена		= СведенияОНоменклатуре.Цена;
	
	Документы.НалоговаяНакладная.ОбновитьЗначениеЛьготыНДС(ДанныеОбъекта, СтрокаТабличнойЧасти);	
	
	Документы.НалоговаяНакладная.ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(
										ДанныеОбъекта, СтрокаТабличнойЧасти, "Услуги", СведенияОНоменклатуре);
	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ДанныеОбъекта.СуммаВключаетНДС);
	
	Документы.НалоговаяНакладная.УстановитьКодУКТВЭДВстрокеТоваров(СтрокаТабличнойЧасти);
	
	ЗаполнитьДобавленныеКолонкиСтрокиТаблицы(СтрокаТабличнойЧасти, ДанныеОбъекта);

КонецПроцедуры

&НаКлиенте
Процедура УслугиНомерСтрокиННПриИзменении(Элемент)
	Объект.РеквизитыНомерСтрокиННАктуальны = Ложь;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицыФормыОС

&НаКлиенте
Процедура ОСОсновноеСредствоПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ОС.ТекущиеДанные;
	
	// заполняем ставку НДС
	ДанныеСтроки = Новый Структура("СтавкаНДС");
	ЗаполнитьСтавкуНДС(ДанныеСтроки);
	ТекущиеДанные.СтавкаНДС = ДанныеСтроки.СтавкаНДС;
	
	// Рассчитываем суммы
	ОбработкаТабличныхЧастейКлиентСервер.ПриИзмененииСтавкаНДС(ЭтаФорма, "ОС");
	
	// заполняем статью декларации
	ДанныеСтрокиТаблицы = Новый Структура("СтавкаНДС, СтатьяДекларацииНДСНалоговыеОбязательства");
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, ТекущиеДанные);
	
	ДанныеОбъекта = Новый Структура("Дата, ВидОперации, Организация, СуммаВключаетНДС, ДоговорКонтрагента, ВалютаВзаиморасчетов, НеЯвляетсяРезидентом, ТипПричиныНевыдачиПокупателю");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, ЭтаФорма);
	
	ЗаполнитьСтатьюНалоговыхОбязательств("ОС", ДанныеСтрокиТаблицы, ДанныеОбъекта);
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтрокиТаблицы);
	
	// рассчитываем суммы превышений
	Если Объект.ПродажаНижеОбычнойЦены
		ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийНалоговаяНакладная.СводнаяНаПревышениеБазыНадЦенойПоставки")
		Тогда
		РассчитатьПревышение(Объект, ТекущиеДанные, Ложь);
		РассчитатьНДСПревышения(ТекущиеДанные);
	КонецЕсли;
	
КонецПроцедуры	

&НаКлиенте
Процедура ОССтавкаНДСПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ОС.ТекущиеДанные;
	
	// Рассчитываем суммы
	ОбработкаТабличныхЧастейКлиентСервер.ПриИзмененииСтавкаНДС(ЭтаФорма, "ОС");
	
	// заполняем статью декларации
	ДанныеСтрокиТаблицы = Новый Структура("СтавкаНДС, СтатьяДекларацииНДСНалоговыеОбязательства");
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, ТекущиеДанные);
	
	ДанныеОбъекта = Новый Структура("Дата, ВидОперации, Организация, СуммаВключаетНДС, ДоговорКонтрагента, ВалютаВзаиморасчетов, НеЯвляетсяРезидентом, ТипПричиныНевыдачиПокупателю");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, ЭтаФорма);
	
	ЗаполнитьСтатьюНалоговыхОбязательств("ОС", ДанныеСтрокиТаблицы, ДанныеОбъекта);
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтрокиТаблицы);
	
	// рассчитываем суммы превышений
	Если Объект.ПродажаНижеОбычнойЦены
		ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийНалоговаяНакладная.СводнаяНаПревышениеБазыНадЦенойПоставки")
		Тогда
		РассчитатьПревышение(Объект, ТекущиеДанные, Ложь);
		РассчитатьНДСПревышения(ТекущиеДанные);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОССуммаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ОС.ТекущиеДанные;
	
	// Рассчитываем суммы
	ОбработкаТабличныхЧастейКлиентСервер.ПриИзмененииСтавкаНДС(ЭтаФорма, "ОС");
	
	// рассчитываем суммы превышений
	Если Объект.ПродажаНижеОбычнойЦены
		ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийНалоговаяНакладная.СводнаяНаПревышениеБазыНадЦенойПоставки")
		Тогда
		РассчитатьПревышение(Объект, ТекущиеДанные, Ложь);
		РассчитатьНДСПревышения(ТекущиеДанные);
	КонецЕсли;
	
	// при изменении суммы считаем, что цена ОС если и задана - то не меняется, то есть пересчитываем количество (для частичной поставки)
	ПриИзмененииЦеныНА(Элементы.ОС);
	
КонецПроцедуры

&НаКлиенте
Процедура ОСПриИзменении(Элемент)

	ОбновитьИтоги(ЭтаФорма);
	
	// Авторасчет НДС
	ПерерасчетПроизведен = Ложь;
	Объект.РеквизитыНомерСтрокиННАктуальны = Ложь;

КонецПроцедуры

&НаКлиенте
Процедура ОСПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если НоваяСтрока И ОтменаРедактирования Тогда
		ОбновитьИтоги(ЭтаФорма);
		// Авторасчет НДС
		ПерерасчетПроизведен = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОСЦенаОбычнаяПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ОС.ТекущиеДанные;
	
	РассчитатьПревышение(Объект, ТекущиеДанные, Ложь);
	РассчитатьНДСПревышения(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ОССуммаПревышенияПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ОС.ТекущиеДанные;
	
	РассчитатьНДСПревышения(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ОСКоличествоПриИзменении(Элемент)
	ПриИзмененииКоличестваНА(Элементы.ОС);
КонецПроцедуры

&НаКлиенте
Процедура ОСКоличествоОчистка(Элемент, СтандартнаяОбработка)
	ПриИзмененииКоличестваНА(Элементы.ОС);
КонецПроцедуры

&НаКлиенте
Процедура ОСЦенаПриИзменении(Элемент)
	ПриИзмененииЦеныНА(Элементы.ОС);
КонецПроцедуры

&НаКлиенте
Процедура ОСЦенаОчистка(Элемент, СтандартнаяОбработка)
	ПриИзмененииЦеныНА(Элементы.ОС);
КонецПроцедуры

&НаКлиенте
Процедура ОСНомерСтрокиННПриИзменении(Элемент)
	Объект.РеквизитыНомерСтрокиННАктуальны = Ложь;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицыФормыНМА

&НаКлиенте
Процедура НМАНематериальныйАктивПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.НМА.ТекущиеДанные;
	
	// заполняем ставку НДС
	ДанныеСтроки = Новый Структура("СтавкаНДС");
	ЗаполнитьСтавкуНДС(ДанныеСтроки);
	ТекущиеДанные.СтавкаНДС = ДанныеСтроки.СтавкаНДС;
	
	// Рассчитываем суммы
	ОбработкаТабличныхЧастейКлиентСервер.ПриИзмененииСтавкаНДС(ЭтаФорма, "НМА");
	
	// заполняем статью декларации
	ДанныеСтрокиТаблицы = Новый Структура("СтавкаНДС, СтатьяДекларацииНДСНалоговыеОбязательства");
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, ТекущиеДанные);
	
	ДанныеОбъекта = Новый Структура("Дата, ВидОперации, Организация, СуммаВключаетНДС, ДоговорКонтрагента, ВалютаВзаиморасчетов, НеЯвляетсяРезидентом, ТипПричиныНевыдачиПокупателю");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, ЭтаФорма);
	
	ЗаполнитьСтатьюНалоговыхОбязательств("НМА", ДанныеСтрокиТаблицы, ДанныеОбъекта);
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтрокиТаблицы);
	
	// рассчитываем суммы превышений
	Если Объект.ПродажаНижеОбычнойЦены
		ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийНалоговаяНакладная.СводнаяНаПревышениеБазыНадЦенойПоставки")
		Тогда
		РассчитатьПревышение(Объект, ТекущиеДанные, Ложь);
		РассчитатьНДСПревышения(ТекущиеДанные);
	КонецЕсли;
	
КонецПроцедуры	

&НаКлиенте
Процедура НМАСтавкаНДСПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.НМА.ТекущиеДанные;
	
	// Рассчитываем суммы
	ОбработкаТабличныхЧастейКлиентСервер.ПриИзмененииСтавкаНДС(ЭтаФорма, "НМА");
	
	// заполняем статью декларации
	ДанныеСтрокиТаблицы = Новый Структура("СтавкаНДС, СтатьяДекларацииНДСНалоговыеОбязательства");
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, ТекущиеДанные);
	
	ДанныеОбъекта = Новый Структура("Дата, ВидОперации, Организация, СуммаВключаетНДС, ДоговорКонтрагента, ВалютаВзаиморасчетов, НеЯвляетсяРезидентом, ТипПричиныНевыдачиПокупателю");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, ЭтаФорма);
	
	ЗаполнитьСтатьюНалоговыхОбязательств("НМА", ДанныеСтрокиТаблицы, ДанныеОбъекта);
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтрокиТаблицы);
	
	// рассчитываем суммы превышений
	Если Объект.ПродажаНижеОбычнойЦены
		ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийНалоговаяНакладная.СводнаяНаПревышениеБазыНадЦенойПоставки")
		Тогда
		РассчитатьПревышение(Объект, ТекущиеДанные, Ложь);
		РассчитатьНДСПревышения(ТекущиеДанные);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура НМАСуммаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.НМА.ТекущиеДанные;
	
	// Рассчитываем суммы
	ОбработкаТабличныхЧастейКлиентСервер.ПриИзмененииСтавкаНДС(ЭтаФорма, "НМА");
	
	// рассчитываем суммы превышений
	Если Объект.ПродажаНижеОбычнойЦены
		ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийНалоговаяНакладная.СводнаяНаПревышениеБазыНадЦенойПоставки")
		Тогда
		РассчитатьПревышение(Объект, ТекущиеДанные, Ложь);
		РассчитатьНДСПревышения(ТекущиеДанные);
	КонецЕсли;
	
	// при изменении суммы считаем, что цена НМА если и задана - то не меняется, то есть пересчитываем количество (для частичной поставки)
	ПриИзмененииЦеныНА(Элементы.НМА);
	
КонецПроцедуры

&НаКлиенте
Процедура НМАПриИзменении(Элемент)

	ОбновитьИтоги(ЭтаФорма);
	
	// Авторасчет НДС
	ПерерасчетПроизведен = Ложь;
	Объект.РеквизитыНомерСтрокиННАктуальны = Ложь;

КонецПроцедуры

&НаКлиенте
Процедура НМАПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если НоваяСтрока И ОтменаРедактирования Тогда
		ОбновитьИтоги(ЭтаФорма);
		// Авторасчет НДС
		ПерерасчетПроизведен = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НМАЦенаОбычнаяПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.НМА.ТекущиеДанные;
	
	РассчитатьПревышение(Объект, ТекущиеДанные, Ложь);
	РассчитатьНДСПревышения(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура НМАСуммаПревышенияПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.НМА.ТекущиеДанные;
	
	РассчитатьНДСПревышения(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура НМАКоличествоПриИзменении(Элемент)
	ПриИзмененииКоличестваНА(Элементы.НМА);
КонецПроцедуры

&НаКлиенте
Процедура НМАКоличествоОчистка(Элемент, СтандартнаяОбработка)
	ПриИзмененииКоличестваНА(Элементы.НМА);
КонецПроцедуры

&НаКлиенте
Процедура НМАЦенаПриИзменении(Элемент)
	ПриИзмененииЦеныНА(Элементы.НМА);
КонецПроцедуры

&НаКлиенте
Процедура НМАЦенаОчистка(Элемент, СтандартнаяОбработка)
	ПриИзмененииЦеныНА(Элементы.НМА);
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииКоличестваНА(Элемент)
	
	ТекущаяСтрока = Элемент.ТекущиеДанные;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущаяСтрока.Количество <= 0 Тогда
		ТекущаяСтрока.Количество = 0;
		ТекущаяСтрока.Цена		 = 0;
	ИначеЕсли ТекущаяСтрока.Количество > 1 Тогда
		ТекущаяСтрока.Количество = 1;	
		ТекущаяСтрока.Цена 		 = ТекущаяСтрока.Сумма;	
	Иначе
		ТекущаяСтрока.Цена = ТекущаяСтрока.Сумма/ТекущаяСтрока.Количество;	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииЦеныНА(Элемент)
	
	ТекущаяСтрока = Элемент.ТекущиеДанные;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущаяСтрока.Цена <= 0 Тогда
		ТекущаяСтрока.Количество = 0;
		ТекущаяСтрока.Цена		 = 0;
	ИначеЕсли ТекущаяСтрока.Цена < ТекущаяСтрока.Сумма Тогда
		ТекущаяСтрока.Цена 		 = ТекущаяСтрока.Сумма;	
		ТекущаяСтрока.Количество = 1;	
	Иначе
		ТекущаяСтрока.Количество = ТекущаяСтрока.Сумма/ТекущаяСтрока.Цена;	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НМАНомерСтрокиННПриИзменении(Элемент)
	Объект.РеквизитыНомерСтрокиННАктуальны = Ложь;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПровестиИЗакрыть(Команда)
	
	ПараметрыЗаписи = Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение);
	Если ЭтаФорма.Записать(ПараметрыЗаписи) Тогда
		ЭтаФорма.Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборТовары(Команда)

	ПодборНоменклатуры(ЭтаФорма, "Товары", Команда);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборУслуги(Команда)

	ПодборНоменклатуры(ЭтаФорма, "Услуги", Команда);

КонецПроцедуры

&НаКлиенте
Процедура ПодборВозвратнаяТара(Команда)

	ПодборНоменклатуры(ЭтаФорма, "ВозвратнаяТара", Команда);
	
КонецПроцедуры

&НаКлиенте
Процедура РазрешитьРедактированиеНомерСтрокиНН(Команда)
	ЭтаФорма.Элементы.ТоварыНомерСтрокиНН.ТолькоПросмотр = Ложь;
	ЭтаФорма.Элементы.УслугиНомерСтрокиНН.ТолькоПросмотр = Ложь;
	ЭтаФорма.Элементы.ОСНомерСтрокиНН.ТолькоПросмотр = Ложь;
	ЭтаФорма.Элементы.НМАНомерСтрокиНН.ТолькоПросмотр = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСводнуюПоУсловнойПродажеУслугиПропорциональноОблагаемая(Команда)	

	ЗаполнитьСводнуюПоУсловнойПродаже("ПропорциональноОблагаемая");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСводнуюПоУсловнойПродажеУслугиНеоблагаемаяХозДеятельность(Команда)	 
	
	ЗаполнитьСводнуюПоУсловнойПродаже("НеоблагаемаяХозДеятельность");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСводнуюПоУсловнойПродажеУслугиНеоблагаемаяНеХозДеятельность(Команда)	 
	
	ЗаполнитьСводнуюПоУсловнойПродаже("НеоблагаемаяНеХозДеятельность");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСводнуюНаПревышенияБазыНадЦенойПоставкиУслуги(Команда)
	
	Если Не ЗначениеЗаполнено(Объект.ТипЦен) Тогда
		Сообщить(НСтр("ru='Необходимо указать тип цен базы!';uk='Необхідно вказати тип цін бази!'"));	
		Возврат;	
	КонецЕсли; 
	
	Если Объект.Услуги.Количество() > 0 Тогда
		Оповещение = Новый ОписаниеОповещения("ЗаполнитьСводнуюНаПревышенияБазыНадЦенойПоставкиЗавершение", ЭтотОбъект, "Услуги");
		
		ТекстВопроса = НСтр("ru='Перед заполнением табличная часть будет очищена. Продолжить?';uk='Перед заповненням таблична частина буде очищена. Продовжити?'");
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
		
		Возврат;	
	КонецЕсли;
	
	ЗаполнитьСводнуюНаПревышенияБазыНадЦенойПоставкиНаСервере("Услуги");
		
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСводнуюНаПревышенияБазыНадЦенойПоставкиТовары(Команда)

	Если Не ЗначениеЗаполнено(Объект.ТипЦен) Тогда
		Сообщить(НСтр("ru='Необходимо указать тип цен базы!';uk='Необхідно вказати тип цін бази!'"));	
		Возврат;	
	КонецЕсли; 
	
	Если Объект.Товары.Количество() > 0 Тогда
		Оповещение = Новый ОписаниеОповещения("ЗаполнитьСводнуюНаПревышенияБазыНадЦенойПоставкиЗавершение", ЭтотОбъект, "Товары");
		
		ТекстВопроса = НСтр("ru='Перед заполнением табличная часть будет очищена. Продолжить?';uk='Перед заповненням таблична частина буде очищена. Продовжити?'");
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
		
		Возврат;	
	КонецЕсли;
	
	ЗаполнитьСводнуюНаПревышенияБазыНадЦенойПоставкиНаСервере("Товары");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполниитьСводнуюПоУсловнойПродажеТовары(Команда)

	ПоказатьПредупреждение(Неопределено, НСтр("ru='Заполнение сводной налоговой накладной по условной продаже необходимо осуществлять на закладке ""Услуги""!';uk='Заповнення зведеної податкової накладної щодо умовного продажу необхідно здійснювати на закладці ""Послуги""!'"));
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоОстаткамТовары(Команда)
	
	ЗаполнитьПоОстаткам("Товары");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоОстаткамВозвратнаяТара(Команда)
	
	ЗаполнитьПоОстаткам("ВозвратнаяТара");

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоДокументуОснованиюТовары(Команда)
	
	ЗаполнитьТабличнуюЧасть("Товары");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоДокументуОснованиюВозвратнаяТара(Команда)
	
	ЗаполнитьТабличнуюЧасть("ВозвратнаяТара");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоДокументуОснованиюУслуги(Команда)
	
	ЗаполнитьТабличнуюЧасть("Услуги");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоДокументуОснованиюНМА(Команда)
	
	ЗаполнитьТабличнуюЧасть("НМА");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоДокументуОснованиюОС(Команда)
	
	ЗаполнитьТабличнуюЧасть("ОС");
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////
// процедуры обслуживающие ввода на основании без открытия формы

&НаСервере
Процедура ВыполнитьЗаполнениеНаОсновании(ПараметрыФормы)

	НалоговаяНакладная = ДанныеФормыВЗначение(Объект, Тип("Документобъект.НалоговаяНакладная"));
	ДанныеЗаполнения  = Параметры.Основание;
	
	// заполняем реквизиты шапки
	ЗаполнениеДокументов.Заполнить(НалоговаяНакладная, ДанныеЗаполнения);
	// проводим заполнение
	РезультатЗаполнения = НалоговаяНакладная.ЗаполнитьПоДокументуОснованию(ДанныеЗаполнения);
	
	
	Если РезультатЗаполнения = Неопределено Тогда
		
		//ПараметрыФормыСтруктура = ДанныеФормыВЗначение(ПараметрыФормы, Тип("Структура"));
		//ПараметрыФормы.Вставить(СлужебноеСообщение, "Ввод на основании не состоялся. Подробная информация находится в окне, из которого осуществлялся ввод на основании");
		//ЗначениеВДанныеФормы(ПараметрыФормыСтруктура, ПараметрыФормы);
		ПараметрыФормы.СлужебноеСообщение = НСтр("ru='Ввод на основании не состоялся. Подробная информация находится в окне, из которого осуществлялся ввод на основании';uk='Введення на підставі не відбулося. Детальніша інформація знаходиться у вікні, з якого здійснювалося введення на підставі'");
		
		ЭтаФорма.НеОткрыватьФорму = Ложь;
		
		// ввод на основании не состоялся
		ЗаполнениеДокументов.ЗаполнитьПоОснованию(НалоговаяНакладная, ДанныеЗаполнения);
		НалоговаяНакладная.ЗаполнитьШапкуДокумента(ДанныеЗаполнения); 
		
		ЗначениеВРеквизитФормы(НалоговаяНакладная,"Объект");
		ПриСозданииНаСервереОсновыеДействия(ПараметрыФормы);
		
		Возврат;
		
	ИначеЕсли НЕ ТипЗнч(РезультатЗаполнения) = Тип("Массив") Тогда
		
		МассивОбъектовДляОткрытияФорм = Новый Массив;
		МассивОбъектовДляОткрытияФорм.Добавить(РезультатЗаполнения);
		
	Иначе
		
		МассивОбъектовДляОткрытияФорм = РезультатЗаполнения;
		
	КонецЕсли;
		
	// создаем для каждого объекта, для которого нужно открыть форму - реквизит этой формы
	ДобавляемыеРеквизиты = Новый Массив();
		
	Сч = 1;
	Для каждого ОбъектДляОткрытия Из МассивОбъектовДляОткрытияФорм Цикл
		
		МассивТипов = Новый Массив();
		МассивТипов.Добавить(ТипЗнч(ОбъектДляОткрытия));
		
		Реквизит = Новый РеквизитФормы("ОбъектДляОткрытия" + Формат(Сч, "ЧГ="), Новый ОписаниеТипов(МассивТипов));
		ДобавляемыеРеквизиты.Добавить(Реквизит);
		
		Реквизит = Новый РеквизитФормы("ИмяФормы" + Формат(Сч, "ЧГ="), Новый ОписаниеТипов("Строка"));
		ДобавляемыеРеквизиты.Добавить(Реквизит);
		
		Сч = Сч + 1;
	
	КонецЦикла;
	
	Реквизит = Новый РеквизитФормы("КоличествоОбъектовДляОткрытия", Новый ОписаниеТипов("Число"));
	ДобавляемыеРеквизиты.Добавить(Реквизит);
	
	ИзменитьРеквизиты(ДобавляемыеРеквизиты);

	// заполняем реквизиты формы - объектами
	ЭтотОбъект["КоличествоОбъектовДляОткрытия"] = МассивОбъектовДляОткрытияФорм.Количество();	
	
	Сч = 1;
	Для каждого ОбъектДляОткрытия Из МассивОбъектовДляОткрытияФорм Цикл
		
		ЗначениеВРеквизитФормы(ОбъектДляОткрытия, "ОбъектДляОткрытия" + Формат(Сч, "ЧГ="));
		
		ТипОбъекта = Метаданные.НайтиПоТипу(ТипЗнч(ОбъектДляОткрытия)).ПолноеИмя();
		ЭтотОбъект["ИмяФормы" + Формат(Сч, "ЧГ=")] = ТипОбъекта + ?(Найти(ТипОбъекта, "Обработка") >0 , ".Форма", ".ФормаОбъекта");
		
		Сч = Сч + 1;
	                 
	КонецЦикла;	

КонецПроцедуры

&НаКлиенте
Процедура СообщитьПользователюЛокально()

	ПоказатьОповещениеПользователя(,,СлужебноеСообщение);	

КонецПроцедуры

&НаСервереБезКонтекста
Функция НайтиСтрокуТабличнойЧасти(Форма, ИмяТабличнойЧасти, СтруктураОтбора)

	Объект = Форма.Объект;

	СтрокаТабличнойЧасти = Неопределено;

	МассивНайденныхСтрок = Объект[ИмяТабличнойЧасти].НайтиСтроки(СтруктураОтбора);
	Если МассивНайденныхСтрок.Количество() > 0 Тогда
		// Нашли. Вернем первую найденную строку.
		СтрокаТабличнойЧасти = МассивНайденныхСтрок[0];
	КонецЕсли;

	Возврат СтрокаТабличнойЧасти;

КонецФункции

&НаСервереБезКонтекста
Функция ЕстьСтрокиВТабличныхЧастях(Форма)

	Объект = Форма.Объект;

	Возврат (Объект.Товары.Количество() > 0 ИЛИ Объект.Услуги.Количество() > 0 
		ИЛИ Объект.ОС.Количество() > 0 ИЛИ Объект.НМА.Количество() > 0);

КонецФункции

&НаКлиенте
Процедура ПодборНоменклатуры(Форма, ИмяТаблицы, Команда) Экспорт

	ПараметрыПодбора = ПолучитьПараметрыПодбора(ИмяТаблицы);
	Если ПараметрыПодбора <> Неопределено Тогда
		ОткрытьФорму("Обработка.ПодборНоменклатуры.Форма.Форма", ПараметрыПодбора,
			ЭтаФорма, УникальныйИдентификатор);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Функция ПолучитьПараметрыПодбора(ИмяТаблицы)

	ПараметрыФормы = Новый Структура;

	ДатаРасчетов 	 = ?(НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДата()), Неопределено, Объект.Дата);
	ЗаголовокПодбора = НСтр("ru='Подбор номенклатуры в %1 (%2)';uk='Підбір номенклатури %1 (%2)'");

	Валюта = Объект.ВалютаДокумента;

	Если ЗначениеЗаполнено(Объект.ТипЦен) Тогда
		Параметрыформы.Вставить("ПоказыватьЦены", Истина);
	КонецЕсли;

	Если ИмяТаблицы = "Товары" Тогда
		ПредставлениеТаблицы = НСтр("ru='Товары';uk='Товари'");

		ПараметрыФормы.Вставить("ПоказыватьОстатки"  , Ложь);
		ПараметрыФормы.Вставить("ПоказыватьСчетУчета", Ложь);
	ИначеЕсли ИмяТаблицы = "ВозвратнаяТара" Тогда
		ПредставлениеТаблицы = НСтр("ru='Возвратная тара';uk='Зворотна тара'");


		ПараметрыФормы.Вставить("ПоказыватьОстатки"  , Ложь);
		ПараметрыФормы.Вставить("ПоказыватьСчетУчета", Ложь);
	ИначеЕсли ИмяТаблицы = "Услуги" Тогда
		ПредставлениеТаблицы = НСтр("ru='Услуги';uk='Послуги'");
	КонецЕсли;
	ЗаголовокПодбора = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		ЗаголовокПодбора, Объект.Ссылка, ПредставлениеТаблицы);

	ПараметрыФормы.Вставить("ЕстьЦена"			, Истина);
	ПараметрыФормы.Вставить("ЕстьКоличество"	, Истина);
	ПараметрыФормы.Вставить("ДатаРасчетов"		, ДатаРасчетов);
	ПараметрыФормы.Вставить("ТипЦен"            , Объект.ТипЦен);
	ПараметрыФормы.Вставить("Валюта"            , Валюта);
	ПараметрыФормы.Вставить("ДоговорКонтрагента", Объект.ДоговорКонтрагента);
	ПараметрыФормы.Вставить("Контрагент"        , Объект.Контрагент);
	ПараметрыФормы.Вставить("Организация"       , Объект.Организация);
	ПараметрыФормы.Вставить("Склад"             , Неопределено);
	ПараметрыФормы.Вставить("Заголовок"         , ЗаголовокПодбора);
	ПараметрыФормы.Вставить("ВидПодбора"        , "");
	ПараметрыФормы.Вставить("ИмяТаблицы"        , ИмяТаблицы);
	ПараметрыФормы.Вставить("Услуги"            , ИмяТаблицы = "Услуги");

	Возврат ПараметрыФормы;

КонецФункции

&НаКлиенте
Функция ОбработатьИзмененияПоКнопкеЦеныИВалюты(ПересчитатьЦены = Ложь, ПерезаполнитьЦены = Ложь)
	
	// 1. Формируем структуру параметров для заполнения формы "Цены и Валюта".
	СтруктураПараметров = Новый Структура;
	Если  Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийНалоговаяНакладная.ИтоговаяРозницаОсвобожденныеОперации")
	  ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийНалоговаяНакладная.ИтоговаяРозницаОблагаемыеОперации")
	  ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийНалоговаяНакладная.РозницаКонрагентуОблагаемыеОперации")
	  ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийНалоговаяНакладная.РозницаКонрагентуОсвобожденныеОперации") 
	  ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийНалоговаяНакладная.УсловнаяПродажа")
	  ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийНалоговаяНакладная.УсловнаяПродажаСписаниеОС") 
	  ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийНалоговаяНакладная.СводнаяНаПревышениеБазыНадЦенойПоставки")
	  Тогда
	Иначе
		СтруктураПараметров.Вставить("Контрагент",           Объект.Контрагент);
		СтруктураПараметров.Вставить("Договор",              Объект.ДоговорКонтрагента);
		СтруктураПараметров.Вставить("ВалютаДокумента",      Объект.ВалютаДокумента);
		СтруктураПараметров.Вставить("Курс",                 Объект.КурсВзаиморасчетов);
		СтруктураПараметров.Вставить("Кратность",            Объект.КратностьВзаиморасчетов);
	КонецЕсли;
	СтруктураПараметров.Вставить("СуммаВключаетНДС",     Объект.СуммаВключаетНДС);
	СтруктураПараметров.Вставить("Организация",          Объект.Организация);
	СтруктураПараметров.Вставить("ДатаДокумента",        Объект.Дата);
	СтруктураПараметров.Вставить("ПерезаполнитьЦены",    ПерезаполнитьЦены);
	СтруктураПараметров.Вставить("ПересчитатьЦены",      ПересчитатьЦены);
	СтруктураПараметров.Вставить("БылиВнесеныИзменения", Ложь);
	СтруктураПараметров.Вставить("ТипЦен",               Объект.ТипЦен);
	СтруктураПараметров.Вставить("АвторасчетНДС",        Объект.АвторасчетНДС);
	
	// 2. Открываем форму "Цены и Валюта".
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ОбработатьИзмененияПоКнопкеЦеныИВалютыЗавершение", ЭтотОбъект);
	
	ОткрытьФорму("ОбщаяФорма.ФормаЦеныИВалюта", СтруктураПараметров,,,,,ОповещениеОЗакрытии);
	
КонецФункции

&НаКлиенте
Процедура ОбработатьИзмененияПоКнопкеЦеныИВалютыЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	СтруктураЦеныИВалюта = РезультатЗакрытия;
	
	// Перезаполняем табличную часть если были внесены изменения в форме "Цены и Валюта".
	Если ТипЗнч(СтруктураЦеныИВалюта) = Тип("Структура") 
		И СтруктураЦеныИВалюта.БылиВнесеныИзменения Тогда
		
		ВалютаДоИзменения    = Объект.ВалютаДокумента;
		КурсДоИзменения		 = Объект.КурсВзаиморасчетов;
		КратностьДоИзменения = Объект.КратностьВзаиморасчетов;
		Объект.ТипЦен                  = СтруктураЦеныИВалюта.ТипЦен;
		
		Если  Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийНалоговаяНакладная.ИтоговаяРозницаОсвобожденныеОперации")
		  ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийНалоговаяНакладная.ИтоговаяРозницаОблагаемыеОперации")
		  ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийНалоговаяНакладная.РозницаКонрагентуОблагаемыеОперации")
		  ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийНалоговаяНакладная.РозницаКонрагентуОсвобожденныеОперации") 
		  ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийНалоговаяНакладная.УсловнаяПродажа")
		  ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийНалоговаяНакладная.УсловнаяПродажаСписаниеОС") 
		  ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийНалоговаяНакладная.СводнаяНаПревышениеБазыНадЦенойПоставки")
		  Тогда
		Иначе
			Объект.ВалютаДокумента         = СтруктураЦеныИВалюта.ВалютаДокумента;
			Объект.КурсВзаиморасчетов      = СтруктураЦеныИВалюта.Курс;
			Объект.КратностьВзаиморасчетов = СтруктураЦеныИВалюта.Кратность;
		КонецЕсли;
		
		Объект.СуммаВключаетНДС        = СтруктураЦеныИВалюта.СуммаВключаетНДС;
		Объект.АвторасчетНДС           = СтруктураЦеныИВалюта.АвторасчетНДС;
		
		Модифицированность = Истина;

		ПересчитатьНДС = СтруктураЦеныИВалюта.СуммаВключаетНДС <> СтруктураЦеныИВалюта.ПредСуммаВключаетНДС;

		ПриИзмененииЦеныИВалюты(ВалютаДоИзменения, 
			КурсДоИзменения,
			КратностьДоИзменения,
			СтруктураЦеныИВалюта.ПерезаполнитьЦены, 
			СтруктураЦеныИВалюта.ПересчитатьЦены, 
			ПересчитатьНДС);
				
		Если Объект.АвторасчетНДС Тогда
			// соответствие для хранения погрешностей округлений
			ПогрешностиОкругления = Новый Соответствие();
			УчетНДСКлиентСервер.ПересчитатьНДСсУчетомПогрешностиОкругления(Объект.Товары, Объект.Ссылка, Объект.СуммаВключаетНДС, ПогрешностиОкругления, "Товары", Строка(Объект.ВалютаДокумента));
			УчетНДСКлиентСервер.ПересчитатьНДСсУчетомПогрешностиОкругления(Объект.Услуги, Объект.Ссылка, Объект.СуммаВключаетНДС, ПогрешностиОкругления, "Услуги", Строка(Объект.ВалютаДокумента));
			УчетНДСКлиентСервер.ПересчитатьНДСсУчетомПогрешностиОкругления(Объект.Услуги, Объект.Ссылка, Объект.СуммаВключаетНДС, ПогрешностиОкругления, "ОС",     Строка(Объект.ВалютаДокумента));
			УчетНДСКлиентСервер.ПересчитатьНДСсУчетомПогрешностиОкругления(Объект.Услуги, Объект.Ссылка, Объект.СуммаВключаетНДС, ПогрешностиОкругления, "НМА",    Строка(Объект.ВалютаДокумента));
			// Установим признак перерасчета сумм НДС
			ПерерасчетПроизведен = ИСТИНА;
			ЗаполнитьДобавленныеКолонкиТаблиц();
			ОбновитьИтоги(ЭтотОбъект);
		КонецЕсли;
		
		// заполним тип причины невыдачи
		ДанныеОбъекта = Новый Структура("Дата, ВидОперации, Контрагент, ВалютаДокумента, ТипПричиныНевыдачиПокупателю, ТребуетВключенияВЕдиныйРеестрНалоговыхНакладных");
		ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
		ДанныеОбъекта.Вставить("ДокументОснование", Объект.ДокументОснование); // ИНАГРО
		УстановитьТипПричиныНевыдачиПокупателюПоУмолчаниюНаСервере(ДанныеОбъекта);
		Объект.ТипПричиныНевыдачиПокупателю 					= ДанныеОбъекта.ТипПричиныНевыдачиПокупателю;
		Объект.ТребуетВключенияВЕдиныйРеестрНалоговыхНакладных  = ДанныеОбъекта.ТребуетВключенияВЕдиныйРеестрНалоговыхНакладных;
		ПроверитьСтатьюДекларацииНДС22(Объект);

	КонецЕсли;
	
		 	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииЦеныИВалюты(Знач ВалютаДоИзменения, КурсДоИзменения, КратностьДоИзменения, ПерезаполнитьЦены = Ложь, ПересчитатьЦены = Ложь, ПересчитатьНДС = Ложь) Экспорт

	Если ПерезаполнитьЦены ИЛИ ПересчитатьЦены ИЛИ ПересчитатьНДС Тогда
		ПриИзмененииЦеныИВалютыНаСервере(ВалютаДоИзменения, КурсДоИзменения, КратностьДоИзменения, ПерезаполнитьЦены, ПересчитатьЦены, ПересчитатьНДС);
	Иначе
		ОбновитьИтоги(ЭтаФорма);
		УправлениеФормой(ЭтаФорма);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПриИзмененииЦеныИВалютыНаСервере(Знач ВалютаДоИзменения, КурсДоИзменения, КратностьДоИзменения, ПерезаполнитьЦены = Ложь, ПересчитатьЦены = Ложь, ПересчитатьНДС = Ложь)

	Если ПерезаполнитьЦены Тогда
		
	СписокНоменклатуры	= ОбщегоНазначения.ВыгрузитьКолонку(Объект.Товары, "Номенклатура", Истина);
	ОбщегоНазначения.ЗаполнитьМассивУникальнымиЗначениями(СписокНоменклатуры,
		ОбщегоНазначения.ВыгрузитьКолонку(Объект.Услуги, "Номенклатура"));
	ОбщегоНазначения.ЗаполнитьМассивУникальнымиЗначениями(СписокНоменклатуры,
		ОбщегоНазначения.ВыгрузитьКолонку(Объект.ВозвратнаяТара, "Номенклатура"));
	ТаблицаЦенНоменклатуры	= Ценообразование.ПолучитьТаблицуЦенНоменклатуры(
		СписокНоменклатуры,
		Объект.ТипЦен,
		Объект.Дата);
		
	ИначеЕсли ПересчитатьЦены Тогда
		Если КурсДоИзменения <> 0 И КратностьДоИзменения <> 0 Тогда
			СтруктураКурса = Новый Структура("Курс, Кратность", КурсДоИзменения, КратностьДоИзменения);
		Иначе
			СтруктураКурса = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаДоИзменения, Объект.Дата);
		КонецЕсли;
	КонецЕсли;
	
	Для Каждого Строка Из Объект.Товары Цикл
		ЗаполнитьРассчитатьСуммыВСтроке(
			ЭтаФорма, Строка, ТаблицаЦенНоменклатуры, ВалютаДоИзменения, СтруктураКурса, ПерезаполнитьЦены, ПересчитатьЦены, ПересчитатьНДС, Истина, 0, Истина);
			
		Если Объект.ПродажаНижеОбычнойЦены 
			ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.СводнаяНаПревышениеБазыНадЦенойПоставки
			Тогда
			РассчитатьПревышение(Объект, Строка, Ложь);
			РассчитатьНДСПревышения(Строка);
		КонецЕсли;
			
	КонецЦикла;
	Для Каждого Строка Из Объект.ВозвратнаяТара Цикл
		ЗаполнитьРассчитатьСуммыВСтроке(
			ЭтаФорма, Строка, ТаблицаЦенНоменклатуры, ВалютаДоИзменения, СтруктураКурса, ПерезаполнитьЦены, ПересчитатьЦены, ПересчитатьНДС, Ложь, 0, Ложь);
			
		Если Объект.ПродажаНижеОбычнойЦены
			ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.СводнаяНаПревышениеБазыНадЦенойПоставки
			Тогда
			РассчитатьПревышение(Объект, Строка, Ложь);
			РассчитатьНДСПревышения(Строка);
		КонецЕсли;
		
	КонецЦикла;
	Для Каждого Строка Из Объект.Услуги Цикл
		ЗаполнитьРассчитатьСуммыВСтроке(
			ЭтаФорма, Строка, ТаблицаЦенНоменклатуры, ВалютаДоИзменения, СтруктураКурса, ПерезаполнитьЦены, ПересчитатьЦены, ПересчитатьНДС, Истина, 1, Истина);
			
		Если Объект.ПродажаНижеОбычнойЦены
			ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.СводнаяНаПревышениеБазыНадЦенойПоставки
			Тогда
			РассчитатьПревышение(Объект, Строка, Ложь);
			РассчитатьНДСПревышения(Строка);
		КонецЕсли;
		
	КонецЦикла;
	
	// при пересчете в связи с появлением реквизитов цена и количество для частичной оплаты, необходимо заполнить эти реквизиты для всех строк
	// после пересчета мы очистим реквизиты частичной оплаты, если количество = 1;
	Для Каждого Строка Из Объект.ОС Цикл
		
		Если Строка.Количество = 0 Тогда
			Строка.Количество = 1;
			Строка.Цена = Строка.Сумма;
		КонецЕсли;	
		
		ЗаполнитьРассчитатьСуммыВСтроке(
			ЭтаФорма, Строка, ТаблицаЦенНоменклатуры, ВалютаДоИзменения, СтруктураКурса, Ложь, ПересчитатьЦены, ПересчитатьНДС, Истина, 1, Ложь);
			
		Если Строка.Количество = 1 Тогда
			Строка.Количество = 0;
			Строка.Цена 		= 0;
		КонецЕсли;	
		
		// Рассчитать реквизиты табличной части.
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(Строка, Объект.СуммаВключаетНДС);
		Если Объект.ПродажаНижеОбычнойЦены
			ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.СводнаяНаПревышениеБазыНадЦенойПоставки
			Тогда
			РассчитатьПревышение(Объект, Строка, Ложь);
			РассчитатьНДСПревышения(Строка);
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого Строка Из Объект.НМА Цикл
		
		Если Строка.Количество = 0 Тогда
			Строка.Количество = 1;
			Строка.Цена = Строка.Сумма;
		КонецЕсли;	
		
		ЗаполнитьРассчитатьСуммыВСтроке(
			ЭтаФорма, Строка, ТаблицаЦенНоменклатуры, ВалютаДоИзменения, СтруктураКурса, Ложь, ПересчитатьЦены, ПересчитатьНДС, Истина, 1, Ложь);
			
		Если Строка.Количество = 1 Тогда
			Строка.Количество = 0;
			Строка.Цена 	  = 0;
		КонецЕсли;	
		
		// Рассчитать реквизиты табличной части.
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(Строка, Объект.СуммаВключаетНДС);
		Если Объект.ПродажаНижеОбычнойЦены
			ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.СводнаяНаПревышениеБазыНадЦенойПоставки
			Тогда
			РассчитатьПревышение(Объект, Строка, Ложь);
			РассчитатьНДСПревышения(Строка);
		КонецЕсли;
		
	КонецЦикла;
	
	ЗаполнитьДобавленныеКолонкиТаблиц();

	УстановитьЗаголовкиКолонок();

	ОбновитьИтоги(ЭтаФорма);
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаСервере
Функция ПолучитьМассивВидовДоговоров() Экспорт

	СписокВидовДоговоров = Новый Массив;
	Если Объект.ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.РаботыОтНерезидента Тогда
		СписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком);
	Иначе	
		СписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПокупателем);
		СписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером);
		СписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомитентом);
		СписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.Бартерный);
		СписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.ИНАГРО_АрендаЗемли);
		СписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.ИНАГРО_АрендаИмущества);
	КонецЕсли;
	
	Возврат СписокВидовДоговоров;

КонецФункции

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЙ ПРОГРАММНЫЙ ИНТЕРФЕЙС

&НаСервере
Процедура ЗаполнитьДобавленныеКолонкиТаблиц(ИмяТаблицы = "") Экспорт

	ПараметрыОбъекта = Неопределено;
	ЗаполнитьПараметрыОбъектаДляЗаполненияДобавленныхКолонок(ЭтаФорма, ПараметрыОбъекта);

	Если ПустаяСтрока(ИмяТаблицы) ИЛИ ИмяТаблицы = "Товары" Тогда
		Для каждого СтрокаТаблицы Из Объект.Товары Цикл
			ЗаполнитьДобавленныеКолонкиСтрокиТаблицы(СтрокаТаблицы, ПараметрыОбъекта);
		КонецЦикла;
	КонецЕсли;
	
	Если ПустаяСтрока(ИмяТаблицы) ИЛИ ИмяТаблицы = "Услуги" Тогда
		Для каждого СтрокаТаблицы Из Объект.Услуги Цикл
			ЗаполнитьДобавленныеКолонкиСтрокиТаблицы(СтрокаТаблицы, ПараметрыОбъекта);
		КонецЦикла;
	КонецЕсли;
	
	Если ПустаяСтрока(ИмяТаблицы) ИЛИ ИмяТаблицы = "ОС" Тогда
		Для каждого СтрокаТаблицы Из Объект.ОС Цикл
			ЗаполнитьДобавленныеКолонкиСтрокиТаблицы(СтрокаТаблицы, ПараметрыОбъекта);
		КонецЦикла;
	КонецЕсли;
	
	Если ПустаяСтрока(ИмяТаблицы) ИЛИ ИмяТаблицы = "НМА" Тогда
		Для каждого СтрокаТаблицы Из Объект.НМА Цикл
			ЗаполнитьДобавленныеКолонкиСтрокиТаблицы(СтрокаТаблицы, ПараметрыОбъекта);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьИтогиНаСервере() Экспорт

	ОбновитьИтоги(ЭтаФорма);

КонецПроцедуры
        
&НаСервере
Процедура ПодготовитьФормуНаСервере() Экспорт
	
	ТекущаяДатаДокумента          = Объект.Дата;
	
	УстановитьФункциональныеОпцииФормы();
	
	Если Элементы.СпецРежимНалогообложения.СписокВыбора.Количество() = 0 Тогда
		УчетНДС.ЗаполнитьСписокВыбораСпецРежимаНалогообложения(Элементы.СпецРежимНалогообложения.СписокВыбора);
	КонецЕсли;
	ЭлементСпискаЗначений 				= Элементы.СпецРежимНалогообложения.СписокВыбора.НайтиПоЗначению(Объект.СпецРежимНалогообложения);
	РасшифровкаСпецРежимНалогообложения = ?(ЭлементСпискаЗначений = Неопределено, "", ЭлементСпискаЗначений.Представление);
	
	Если Элементы.ТипПричиныНевыдачиПокупателю.СписокВыбора.Количество() = 0 Тогда
		УчетНДС.ЗаполнитьСписокВыбораТипПричиныНевыдачиПокупателю(Элементы.ТипПричиныНевыдачиПокупателю.СписокВыбора);
	КонецЕсли;
	
	// ИНАГРО++
	Если Элементы.ИНАГРО_НаправлениеОперации.СписокВыбора.Количество() = 0 Тогда 		
		Элементы.ИНАГРО_НаправлениеОперации.СписокВыбора.Добавить(1, "01-Операції із зерновими та технічними культурами");
		Элементы.ИНАГРО_НаправлениеОперации.СписокВыбора.Добавить(2, "02-Операції з продукцією тваринництва"); 
		Элементы.ИНАГРО_НаправлениеОперации.СписокВыбора.Добавить(3, "03-операціями з сільськогосподарськими товарами/послугами (крім операцій із зерновими та технічними культурами та операцій з продукцією тваринництва"); 
	КонецЕсли;
	ЭлементСпискаЗначений 		  = Элементы.ИНАГРО_НаправлениеОперации.СписокВыбора.НайтиПоЗначению(Объект.ИНАГРО_НаправлениеОперации);
	РасшифровкаИНАГРО_НаправлениеОперации = ?(ЭлементСпискаЗначений = Неопределено, "", ЭлементСпискаЗначений.Представление); 
	// ИНАГРО--

	Если Элементы.ТипПричиныНевыдачиПокупателюПриПродажеНижеОбычнойЦены.СписокВыбора.Количество() = 0 Тогда
		УчетНДС.ЗаполнитьСписокВыбораТипПричиныНевыдачиПокупателюПриПродажеНижеОбычнойЦены(Элементы.ТипПричиныНевыдачиПокупателюПриПродажеНижеОбычнойЦены.СписокВыбора);
	КонецЕсли;
	ЭлементСпискаЗначений 		  = Элементы.ТипПричиныНевыдачиПокупателю.СписокВыбора.НайтиПоЗначению(Объект.ТипПричиныНевыдачиПокупателю);
	РасшифровкаТипПричиныНевыдачи = ?(ЭлементСпискаЗначений = Неопределено, "", ЭлементСпискаЗначений.Представление);
	Если Элементы.КодПризнакаСводной.СписокВыбора.Количество() = 0 Тогда
		УчетНДС.ЗаполнитьСписокВыбораКодПризнакаСводной(Элементы.КодПризнакаСводной.СписокВыбора);
	КонецЕсли;
	ЭлементСпискаЗначений 		  = Элементы.КодПризнакаСводной.СписокВыбора.НайтиПоЗначению(Объект.КодПризнакаСводной);
	РасшифровкаКодПризнакаСводной = ?(ЭлементСпискаЗначений = Неопределено, "", ЭлементСпискаЗначений.Представление);
	
	ПлательщикНДС     = Истина;
	ПлательщикПрибыльДо2015 = УчетнаяПолитика.ПлательщикНалогаНаПрибыльДо2015(Объект.Организация, Объект.Дата);	
	
	ВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	
	ДоговорУказан     = ЗначениеЗаполнено(Объект.ДоговорКонтрагента);
	РеквизитыДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
	Объект.ДоговорКонтрагента, "ВидДоговора, ВалютаВзаиморасчетов, ВедениеВзаиморасчетовНУ");
	
	Если ДоговорУказан Тогда
		ВалютаВзаиморасчетов = РеквизитыДоговора.ВалютаВзаиморасчетов;
	КонецЕсли;
	
	ВедениеВзаиморасчетовПоРасчетнымДокументам = ДоговорУказан И РеквизитыДоговора.ВедениеВзаиморасчетовНУ = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоРасчетнымДокументам;
	Внешнеэкономический = ДоговорУказан И РеквизитыДоговора.ВалютаВзаиморасчетов <> ВалютаРегламентированногоУчета;
	НеЯвляетсяРезидентом = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Контрагент, "НеЯвляетсяРезидентом");
	
	УстановитьПараметрыВыбора();
	
	ЗаполнитьДобавленныеКолонкиТаблиц();
	
	УстановитьЗаголовокФормы(ЭтаФорма);
	
	УстановитьЗаголовкиКолонок();
	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма,"СчетНДС");
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма,"СчетДт");
	
	УправлениеФормой(ЭтаФорма);
	
	УстановитьСостояниеДокумента();
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УстановитьЗаголовокФормы(Форма) Экспорт
	
	Объект = Форма.Объект;

	ТекстЗаголовка	= НСтр("ru='Налоговая накладная';uk='Податкова накладна'");
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ТекстЗаголовка = ТекстЗаголовка + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru=' %1 от %2';uk=' %1 від %2'"), Объект.Номер, Объект.Дата);
	Иначе
		ТекстЗаголовка = ТекстЗаголовка + НСтр("ru=' (создание)';uk=' (створення)'");
	КонецЕсли;
	
	Форма.Заголовок = ТекстЗаголовка + " (" + Строка(Объект.ВидОперации) + ")";

КонецПроцедуры

&НаСервере
Процедура УправлениеФормойНаСервере() Экспорт
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗаголовкиКолонок() Экспорт
	
	ЗаголовокЦена  = ?(Объект.СуммаВключаетНДС, НСтр("ru='Цена с НДС';uk='Ціна з ПДВ'"), НСтр("ru='Цена без НДС';uk='Ціна без ПДВ'"));
	ЗаголовокСумма = ?(Объект.СуммаВключаетНДС, НСтр("ru='Сумма с НДС';uk='Сума з ПДВ'"), НСтр("ru='Сумма без НДС';uk='Сума без ПДВ'"));
	
	Элементы.ТоварыЦена.Заголовок = ЗаголовокЦена;
	Элементы.ТоварыСумма.Заголовок = ЗаголовокСумма;
	
	Элементы.УслугиЦена.Заголовок = ЗаголовокЦена;
	Элементы.УслугиСумма.Заголовок = ЗаголовокСумма;
	
	Элементы.ОСЦена.Заголовок = ЗаголовокЦена;
	Элементы.ОССумма.Заголовок = ЗаголовокСумма;
	
	Элементы.НМАЦена.Заголовок = ЗаголовокЦена;
	Элементы.НМАСумма.Заголовок = ЗаголовокСумма;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьФункциональныеОпцииФормы() Экспорт

	ОбщегоНазначенияБПКлиентСервер.УстановитьПараметрыФункциональныхОпцийФормыДокумента(ЭтаФорма);
	ПлательщикПрибыльДо2015 = УчетнаяПолитика.ПлательщикНалогаНаПрибыльДо2015(Объект.Организация, Объект.Дата);	
	ИспользоватьВозвратнуюТару = ПолучитьФункциональнуюОпцию("ИспользоватьВозвратнуюТару");
	
КонецПроцедуры 

&НаСервере
Процедура УстановитьПараметрыВыбора()

	МассивВидовДоговоров = Новый ФиксированныйМассив(ПолучитьМассивВидовДоговоров());
	НовыйПараметр = Новый ПараметрВыбора("Отбор.ВидДоговора", МассивВидовДоговоров);
	НовыйМассивПараметров = Новый Массив();
	НовыйМассивПараметров.Добавить(НовыйПараметр);

	НовыеПараметрыВыбора = Новый ФиксированныйМассив(НовыйМассивПараметров);
	Элементы.ДоговорКонтрагента.ПараметрыВыбора = НовыеПараметрыВыбора;
	
	МассивДопустимыхСтавокНДС = Документы.НалоговаяНакладная.ОпределитьДопустимыеСтавкиНДС(Объект).ВыгрузитьЗначения();
	
	Элементы.ТоварыСтавкаНДС.СписокВыбора.ЗагрузитьЗначения(МассивДопустимыхСтавокНДС);
	Элементы.УслугиСтавкаНДС.СписокВыбора.ЗагрузитьЗначения(МассивДопустимыхСтавокНДС);
	Элементы.ОССтавкаНДС.СписокВыбора.ЗагрузитьЗначения(МассивДопустимыхСтавокНДС);
	Элементы.НМАСтавкаНДС.СписокВыбора.ЗагрузитьЗначения(МассивДопустимыхСтавокНДС);

КонецПроцедуры

&НаСервере
Процедура УстановитьСостояниеДокумента()
	
	СостояниеДокумента = ОбщегоНазначенияБП.СостояниеДокумента(Объект);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Объект = Форма.Объект;
	Элементы = Форма.Элементы;
	
	// ИНАГРО++
	ЭтоРеализацияБиологическихАктивов = Ложь;
	
	Если ИНАГРО_ОбщийВызовСервераПовтИсп.ЕстьБСПУ() Тогда
		
		Если ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
			ЭтоРеализацияБиологическихАктивов = ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.ИНАГРО_РеализацияБиологическихАктивов")
			                                ИЛИ ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.ИНАГРО_ВедомостьРеализацияБиологическихАктивов");
		КонецЕсли;
		
	КонецЕсли;
	
	Элементы.ТоварыИНАГРО_Голов.Видимость = ЭтоРеализацияБиологическихАктивов;
	// ИНАГРО--
	
	УстановитьЗаголовкиИДоступностьСубконто(Форма, Объект.СчетНДС, "СубконтоКт");
	УстановитьЗаголовкиИДоступностьСубконто(Форма, Объект.СчетДт, "СубконтоДт");
	
	Элементы.НалоговоеНазначениеДоходовИЗатрат.Видимость = Форма.ПлательщикПрибыльДо2015 И (Объект.ПродажаНижеОбычнойЦены ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийНалоговаяНакладная.УсловнаяПродажаСписаниеОС"));
	Элементы.ДекорацияНалоговоеНазначение.Видимость = Форма.ПлательщикПрибыльДо2015 И (Объект.ПродажаНижеОбычнойЦены ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийНалоговаяНакладная.УсловнаяПродажаСписаниеОС"));
	
	Если Объект.ПродажаНижеОбычнойЦены 
	 ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийНалоговаяНакладная.УсловнаяПродажаСписаниеОС")
	 ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийНалоговаяНакладная.СводнаяНаПревышениеБазыНадЦенойПоставки")
	 Тогда					   
		Элементы.ГруппаБУПравоСчетДтЗаголовоки.Видимость 	= Истина;
		Элементы.ГруппаБУПравоСчетДтЗначения.Видимость		= Истина;
	Иначе
		//Установим реквизиты счета вычета из доходов невидимыми
		Элементы.ГруппаБУПравоСчетДтЗаголовоки.Видимость 	= Ложь;
		Элементы.ГруппаБУПравоСчетДтЗначения.Видимость		= Ложь;
	КонецЕсли;
	
	Элементы.Сделка.Видимость 				= Элементы.ДоговорКонтрагента.Видимость;
	Элементы.Сделка.Доступность 			= Форма.ВедениеВзаиморасчетовПоРасчетнымДокументам;
	
	Элементы.ДокументВводаНаОсновании.Видимость = ЗначениеЗаполнено(Объект.ДокументВводаНаОсновании);
	
	Элементы.ТоварыОсновнаяНН.Видимость = Ложь;
	Элементы.УслугиОсновнаяНН.Видимость = Ложь;
	
	Элементы.ТоварыЗаполнитьСводнуюНаПревышенияБазыНадЦенойПоставкиТовары.Доступность   = Ложь;
	Элементы.УслугиЗаполнитьСводнуюНаПревышенияБазыНадЦенойПоставкиУслуги.Доступность   = Ложь;
	
	УстановитьЭлементыФормыПоВидуОперации(Форма);
	
	// Тары по внешнеэкономическому договору нет.
	Элементы.ГруппаВозвратнаяТара.Видимость =   Элементы.ГруппаВозвратнаяТара.Видимость
														 И	НЕ (Форма.Внешнеэкономический)
														 И ?(Объект.ВозвратнаяТара.Количество() = 0, Форма.ИспользоватьВозвратнуюТару, Истина);
	
	Элементы.ТекстДополненияКНаименованиюПриПродажеНижеОбычнойЦены.Видимость  = Объект.ПродажаНижеОбычнойЦены;
	
	Элементы.ТипПричиныНевыдачиПокупателюПриПродажеНижеОбычнойЦены.Видимость = Объект.ПродажаНижеОбычнойЦены И Объект.Дата >= '2015-01-01';
	Элементы.РасшифровкаТипПричиныНевыдачиПокупателюПриПродажеНижеОбычнойЦены.Видимость = Объект.ПродажаНижеОбычнойЦены И Объект.Дата >= '2015-01-01';
	
	Элементы.ЭлектронныйДокумент.Доступность = (Объект.Дата < '2015-01-01');
	Если Объект.Дата >= '2015-01-01' Тогда
		Элементы.ТребуетВключенияВЕдиныйРеестрНалоговыхНакладных.Доступность = Ложь;
	КонецЕсли;

	
	Элементы.НомерГТД.Доступность = Объект.ПодтверждаетсяГТД;	
	
	Элементы.УточняемыйПериод.Видимость = Объект.ВключаетсяВУточняющийРасчет;
	Элементы.НомерДляРеестра.Видимость  = Объект.ВключаетсяВУточняющийРасчет;
	Элементы.ДатаДляРеестра.Видимость   = Объект.ВключаетсяВУточняющийРасчет;
	
	Элементы.ТребуетВключенияВЕдиныйРеестрНалоговыхНакладных.Доступность = НЕ (Объект.ТипПричиныНевыдачиПокупателю = 0) И (Объект.Дата < '2014-03-01');
	
	Элементы.ТоварыЗаполниитьСводнуюПоУсловнойПродажеТовары.Доступность   = Ложь;
	Элементы.УслугиЗаполнитьСводнуюПоУсловнойПродажеУслугиПропорциональноОблагаемая.Доступность 	= Ложь;
	Элементы.УслугиЗаполнитьСводнуюПоУсловнойПродажеУслугиНеоблагаемаяХозДеятельность.Доступность 	= Ложь;
	Элементы.УслугиЗаполнитьСводнуюПоУсловнойПродажеУслугиНеоблагаемаяНеХозДеятельность.Доступность	= Ложь;
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийНалоговаяНакладная.УсловнаяПродажа") Тогда 
		Элементы.ТоварыЗаполниитьСводнуюПоУсловнойПродажеТовары.Доступность   = Истина;
		Элементы.УслугиЗаполнитьСводнуюПоУсловнойПродажеУслугиПропорциональноОблагаемая.Доступность 	= Истина;
		Элементы.УслугиЗаполнитьСводнуюПоУсловнойПродажеУслугиНеоблагаемаяХозДеятельность.Доступность 	= Истина;
		Элементы.УслугиЗаполнитьСводнуюПоУсловнойПродажеУслугиНеоблагаемаяНеХозДеятельность.Доступность	= Истина;
	КонецЕсли;
	
	Элементы.ПоставкаДипПредставительству.Видимость = (Объект.Дата >= '2014-12-01')
														 И (Объект.ТипПричиныНевыдачиПокупателю <= 2)
														 И (Объект.Дата < '2016-04-01')
														 ;
	
	СводнаяПродажаНижеОбычнойЦены = (Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийНалоговаяНакладная.СводнаяНаПревышениеБазыНадЦенойПоставки"));
	Элементы.ГруппаПродажаНижеОЦ.Видимость = Не СводнаяПродажаНижеОбычнойЦены;
	Элементы.ТипПричиныНевыдачиПокупателю.Доступность = НЕ СводнаяПродажаНижеОбычнойЦены;	
	
	Элементы.КодПризнакаСводной.Доступность = Объект.Сводная И НЕ СводнаяПродажаНижеОбычнойЦены;
	Элементы.РасшифровкаКодПризнакаСводной.Доступность = Объект.Сводная И НЕ СводнаяПродажаНижеОбычнойЦены;
	
	ЭлементСпискаЗначений 		= Элементы.СпецРежимНалогообложения.СписокВыбора.НайтиПоЗначению(Объект.СпецРежимНалогообложения);
	Форма.РасшифровкаСпецРежимНалогообложения = ?(ЭлементСпискаЗначений = Неопределено, "", ЭлементСпискаЗначений.Представление);
	
	ЭлементСпискаЗначений 		= Элементы.ТипПричиныНевыдачиПокупателю.СписокВыбора.НайтиПоЗначению(Объект.ТипПричиныНевыдачиПокупателю);
	Форма.РасшифровкаТипПричиныНевыдачи = ?(ЭлементСпискаЗначений = Неопределено, "", ЭлементСпискаЗначений.Представление);
	
	ЭлементСпискаЗначений 		= Элементы.КодПризнакаСводной.СписокВыбора.НайтиПоЗначению(Объект.КодПризнакаСводной);
	Форма.РасшифровкаКодПризнакаСводной = ?(ЭлементСпискаЗначений = Неопределено, "", ЭлементСпискаЗначений.Представление);	
	
	ОбновитьИтоги(Форма);
	СформироватьНадписьЦеныИВалюта(Форма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьЭлементыФормыПоВидуОперации(Форма)

	ПоказыватьЛьготу = (    Форма.Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийНалоговаяНакладная.ОсвобожденныеОперации")
						ИЛИ Форма.Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийНалоговаяНакладная.ИтоговаяРозницаОсвобожденныеОперации")
						ИЛИ Форма.Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийНалоговаяНакладная.НеНДСОперации")
						ИЛИ Форма.Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийНалоговаяНакладная.РозницаКонрагентуОсвобожденныеОперации"));
						
	Форма.Элементы.ЛьготаНДСОписание.Видимость = ПоказыватьЛьготу;
	Форма.Элементы.ЛьготаНДС.Видимость 		 = ПоказыватьЛьготу;
		
	Если    Форма.Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийНалоговаяНакладная.ИтоговаяРозницаОблагаемыеОперации") 
		ИЛИ Форма.Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийНалоговаяНакладная.ИтоговаяРозницаОсвобожденныеОперации") Тогда
		
		Форма.Элементы.Контрагент.Видимость 						= Ложь;
		Форма.Элементы.ДоговорКонтрагента.Видимость 				= Ложь;
		Форма.Элементы.ДокументОснование.Видимость 				= Ложь;
		
		Форма.Элементы.ГруппаТовары.Видимость	              = Истина;
		Форма.Элементы.ГруппаВозвратнаяТара.Видимость	      = Ложь;
		Форма.Элементы.ГруппаУслуги.Видимость  			  = Ложь;
		Форма.Элементы.ГруппаОсновныеСредства.Видимость  	  = Ложь;
		Форма.Элементы.ГруппаНематериальныеАктивы.Видимость = Ложь;
		
		Форма.Элементы.ТоварыЗаполнитьПоДокументуОснованиюТовары.Доступность 	= Ложь;
		Форма.Элементы.ТоварыЗаполнитьПоОстаткамТовары.Доступность 			= Истина;
		
	ИначеЕсли Форма.Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийНалоговаяНакладная.РозницаКонрагентуОблагаемыеОперации")
		  ИЛИ Форма.Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийНалоговаяНакладная.РозницаКонрагентуОсвобожденныеОперации") Тогда
		  
		Форма.Элементы.Контрагент.Видимость 						= Истина;
		Форма.Элементы.ДоговорКонтрагента.Видимость 				= Ложь;
		Форма.Элементы.ДокументОснование.Видимость 				= Ложь;
		
		Форма.Элементы.ГруппаТовары.Видимость	              = Истина;
		Форма.Элементы.ГруппаВозвратнаяТара.Видимость	      = Ложь;
		Форма.Элементы.ГруппаУслуги.Видимость  			  = Истина;
		Форма.Элементы.ГруппаОсновныеСредства.Видимость  	  = Ложь;
		Форма.Элементы.ГруппаНематериальныеАктивы.Видимость = Ложь;
		
		Форма.Элементы.ТоварыЗаполнитьПоДокументуОснованиюТовары.Доступность 	= Ложь;
		Форма.Элементы.ТоварыЗаполнитьПоОстаткамТовары.Доступность			= Ложь;
		Форма.Элементы.УслугиЗаполнитьПоДокументуОснованиюУслуги.Доступность  = Ложь;
		
		
	ИначеЕсли Форма.Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийНалоговаяНакладная.УсловнаяПродажа") Тогда
		
		Форма.Элементы.Контрагент.Видимость 						= Ложь;
		Форма.Элементы.ДоговорКонтрагента.Видимость 				= Ложь;
		Форма.Элементы.ДокументОснование.Видимость 				= Ложь;
		
		Форма.Элементы.ГруппаТовары.Видимость	              = Истина;
		Форма.Элементы.ГруппаВозвратнаяТара.Видимость	      = Ложь;
		Форма.Элементы.ГруппаУслуги.Видимость  			  = Истина;
		Форма.Элементы.ГруппаОсновныеСредства.Видимость  	  = Истина;
		Форма.Элементы.ГруппаНематериальныеАктивы.Видимость = Истина;
		
		Форма.Элементы.ТоварыЗаполнитьПоДокументуОснованиюТовары.Доступность 	= Ложь;
		Форма.Элементы.ТоварыЗаполнитьПоОстаткамТовары.Доступность 			= Ложь;
		Форма.Элементы.УслугиЗаполнитьПоДокументуОснованиюУслуги.Доступность  = Ложь;		
		Форма.Элементы.ОСЗаполнитьПоДокументуОснованиюОС.Доступность  		= Ложь;		
		Форма.Элементы.НМАЗаполнитьПоДокументуОснованиюНМА.Доступность  		= Ложь;		
		        
	ИначеЕсли Форма.Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийНалоговаяНакладная.УсловнаяПродажаСписаниеОС") Тогда
		
		Форма.Элементы.Контрагент.Видимость 						= Ложь;
		Форма.Элементы.ДоговорКонтрагента.Видимость 				= Ложь;
		Форма.Элементы.ДокументОснование.Видимость 				= Ложь;
		
		Форма.Элементы.ГруппаТовары.Видимость	              = Истина;
		Форма.Элементы.ГруппаВозвратнаяТара.Видимость	      = Ложь;
		Форма.Элементы.ГруппаУслуги.Видимость  			  = Ложь;
		Форма.Элементы.ГруппаОсновныеСредства.Видимость  	  = Истина;
		Форма.Элементы.ГруппаНематериальныеАктивы.Видимость = Истина;
		
		Форма.Элементы.ТоварыЗаполнитьПоДокументуОснованиюТовары.Доступность 	= Ложь;
		Форма.Элементы.ТоварыЗаполнитьПоОстаткамТовары.Доступность 			= Ложь;
		Форма.Элементы.УслугиЗаполнитьПоДокументуОснованиюУслуги.Доступность  = Ложь;		
		Форма.Элементы.ОСЗаполнитьПоДокументуОснованиюОС.Доступность  		= Ложь;		
		Форма.Элементы.НМАЗаполнитьПоДокументуОснованиюНМА.Доступность  		= Ложь;		
		
		
	ИначеЕсли Форма.Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийНалоговаяНакладная.РаботыОтНерезидента") Тогда
		
		Форма.Элементы.Контрагент.Видимость 						= Истина;
		Форма.Элементы.ДоговорКонтрагента.Видимость 				= Истина;
		Форма.Элементы.ДокументОснование.Видимость 				= Истина;
		
		Форма.Элементы.ГруппаТовары.Видимость	              = Ложь;
		Форма.Элементы.ГруппаВозвратнаяТара.Видимость	      = Ложь;
		Форма.Элементы.ГруппаУслуги.Видимость  			  = Истина;
		Форма.Элементы.ГруппаОсновныеСредства.Видимость  	  = Ложь;
		Форма.Элементы.ГруппаНематериальныеАктивы.Видимость = Ложь;
		
		Форма.Элементы.УслугиЗаполнитьПоДокументуОснованиюУслуги.Доступность  = Истина;
		
	ИначеЕсли Форма.Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийНалоговаяНакладная.СводнаяНаПревышениеБазыНадЦенойПоставки") Тогда
		
		Форма.Элементы.Контрагент.Видимость 					= Ложь;
		Форма.Элементы.ДоговорКонтрагента.Видимость 			= Ложь;
		Форма.Элементы.ДокументОснование.Видимость 				= Ложь;
		
		Форма.Элементы.ГруппаТовары.Видимость	              	= Истина;
		Форма.Элементы.ГруппаВозвратнаяТара.Видимость	      	= Ложь;
		Форма.Элементы.ГруппаУслуги.Видимость  			  		= Истина;
		Форма.Элементы.ГруппаОсновныеСредства.Видимость  	  	= Истина;
		Форма.Элементы.ГруппаНематериальныеАктивы.Видимость 	= Истина;
		
		Форма.Элементы.ТоварыЗаполнитьПоДокументуОснованиюТовары.Доступность 	= Ложь;
		Форма.Элементы.ТоварыЗаполнитьПоОстаткамТовары.Доступность 				= Ложь;
		Форма.Элементы.УслугиЗаполнитьПоДокументуОснованиюУслуги.Доступность  	= Ложь;		
		Форма.Элементы.ОСЗаполнитьПоДокументуОснованиюОС.Доступность  			= Ложь;		
		Форма.Элементы.НМАЗаполнитьПоДокументуОснованиюНМА.Доступность  		= Ложь;
		
		Форма.Элементы.ТоварыОсновнаяНН.Видимость = Истина;
		Форма.Элементы.УслугиОсновнаяНН.Видимость = Истина;
		
		Форма.Элементы.ТоварыЗаполнитьСводнуюНаПревышенияБазыНадЦенойПоставкиТовары.Доступность   = Истина;
		Форма.Элементы.УслугиЗаполнитьСводнуюНаПревышенияБазыНадЦенойПоставкиУслуги.Доступность   = Истина;
	
		
	Иначе
		
		Форма.Элементы.Контрагент.Видимость 						= Истина;
		Форма.Элементы.ДоговорКонтрагента.Видимость 				= Истина;
		Форма.Элементы.ДокументОснование.Видимость 				= Истина;
		
		Форма.Элементы.ГруппаТовары.Видимость	              = Истина;
		Форма.Элементы.ГруппаВозвратнаяТара.Видимость	      = Истина;
		Форма.Элементы.ГруппаУслуги.Видимость  			  = Истина;
		Форма.Элементы.ГруппаОсновныеСредства.Видимость  	  = Истина;
		Форма.Элементы.ГруппаНематериальныеАктивы.Видимость = Истина;
		
		Форма.Элементы.ТоварыЗаполнитьПоДокументуОснованиюТовары.Доступность 	= Истина;
		Форма.Элементы.ТоварыЗаполнитьПоОстаткамТовары.Доступность 			= Истина;
		Форма.Элементы.УслугиЗаполнитьПоДокументуОснованиюУслуги.Доступность  = Истина;		
		Форма.Элементы.ОСЗаполнитьПоДокументуОснованиюОС.Доступность  		= Истина;		
		Форма.Элементы.НМАЗаполнитьПоДокументуОснованиюНМА.Доступность  		= Истина;		
		
	КонецЕсли;	
	
	Форма.Элементы.СчетУчетаНДС.Видимость 					= НЕ Форма.Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийНалоговаяНакладная.УсловнаяПродажаСписаниеОС");
	Форма.Элементы.ДекорацияЗаголовокСчетУчетаНДС.Видимость = Форма.Элементы.СчетУчетаНДС.Видимость;
	
	Форма.Элементы.УслугиНерезидентаДляНехозДеят.Видимость = Форма.Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийНалоговаяНакладная.РаботыОтНерезидента")
															И Форма.Объект.Дата < '2016-04-01';
															
	Форма.Элементы.Сводная.Видимость =   (Форма.Объект.Дата >= '2016-04-01') 
									  И (    Форма.Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийНалоговаяНакладная.ОблагаемыеОперации")
									  	 ИЛИ Форма.Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийНалоговаяНакладная.ОсвобожденныеОперации")
										 ИЛИ Форма.Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийНалоговаяНакладная.УсловнаяПродажа")
										 ИЛИ Форма.Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийНалоговаяНакладная.СводнаяНаПревышениеБазыНадЦенойПоставки")
										 ИЛИ Форма.Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийНалоговаяНакладная.УсловнаяПродажаСписаниеОС"));
										 
	
	Форма.Элементы.Сводная.Доступность = НЕ Форма.Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийНалоговаяНакладная.СводнаяНаПревышениеБазыНадЦенойПоставки");
	
	Форма.Элементы.Сделка.Видимость 			= Форма.Элементы.ДоговорКонтрагента.Видимость;
	Форма.Элементы.Сделка.Доступность 			= Форма.ВедениеВзаиморасчетовПоРасчетнымДокументам;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СформироватьНадписьЦеныИВалюта(Форма) Экспорт
	
	Объект = Форма.Объект;
	СтруктураНадписи = Новый Структура(
		"ТипЦен, ВалютаДокумента, Курс, Кратность, ВалютаРегламентированногоУчета",
		Объект.ТипЦен,
		Объект.ВалютаДокумента,
		Объект.КурсВзаиморасчетов,
		Объект.КратностьВзаиморасчетов,
		Форма.ВалютаРегламентированногоУчета);
		
	СтруктураНадписи.Вставить("СуммаВключаетНДС", Объект.СуммаВключаетНДС);
	СтруктураНадписи.Вставить("АвторасчетНДС", 	  Объект.АвторасчетНДС);
	
	Форма.ЦеныИВалюта = ОбщегоНазначенияБПКлиентСервер.СформироватьНадписьЦеныИВалюта(СтруктураНадписи);
	
КонецПроцедуры 

&НаСервереБезКонтекста
Процедура ЗаполнитьРассчитатьСуммы(Форма, 
					Знач ВалютаДоИзменения, 
					КурсДоИзменения, 
					КратностьДоИзменения, 
					ПерезаполнитьЦены = Ложь, 
					ПересчитатьЦены = Ложь, 
					ПересчитатьНДС = Ложь,
					РассчитатьНДССУчетомОшибокОкругления = Ложь) Экспорт

	Объект = Форма.Объект;

	Если ПерезаполнитьЦены Тогда
		
		СписокНоменклатуры	= ОбщегоНазначения.ВыгрузитьКолонку(Объект.Товары, "Номенклатура", Истина);
		ОбщегоНазначения.ЗаполнитьМассивУникальнымиЗначениями(СписокНоменклатуры,
			ОбщегоНазначения.ВыгрузитьКолонку(Объект.Услуги, "Номенклатура"));
		ОбщегоНазначения.ЗаполнитьМассивУникальнымиЗначениями(СписокНоменклатуры,
			ОбщегоНазначения.ВыгрузитьКолонку(Объект.ВозвратнаяТара, "Номенклатура"));
		ОбщегоНазначения.ЗаполнитьМассивУникальнымиЗначениями(СписокНоменклатуры,
			ОбщегоНазначения.ВыгрузитьКолонку(Объект.Оборудование, "Номенклатура"));
		ОбщегоНазначения.ЗаполнитьМассивУникальнымиЗначениями(СписокНоменклатуры,
			ОбщегоНазначения.ВыгрузитьКолонку(Объект.БланкиСтрогогоУчета, "Номенклатура"));
		
		ТаблицаЦенНоменклатуры	= Ценообразование.ПолучитьТаблицуЦенНоменклатуры(
			СписокНоменклатуры,
			Объект.ТипЦен,
			Объект.Дата);
		
	ИначеЕсли ПересчитатьЦены Тогда
		Если КурсДоИзменения <> 0 И КратностьДоИзменения <> 0 Тогда
			СтруктураКурса = Новый Структура("Курс, Кратность", КурсДоИзменения, КратностьДоИзменения);
		Иначе
			СтруктураКурса = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаДоИзменения, Объект.Дата);
		КонецЕсли;
	КонецЕсли;

	Для Каждого СтрокаТаблицы Из Объект.Товары Цикл
		ЗаполнитьРассчитатьСуммыВСтроке(Форма, СтрокаТаблицы, ТаблицаЦенНоменклатуры, ВалютаДоИзменения,
			СтруктураКурса, ПерезаполнитьЦены, ПересчитатьЦены, ПересчитатьНДС, Истина, 0, Истина);
	КонецЦикла;
	Для Каждого СтрокаТаблицы Из Объект.ВозвратнаяТара Цикл
		ЗаполнитьРассчитатьСуммыВСтроке(Форма, СтрокаТаблицы, ТаблицаЦенНоменклатуры, ВалютаДоИзменения,
			СтруктураКурса, ПерезаполнитьЦены, ПересчитатьЦены, ПересчитатьНДС, Ложь, 0, Ложь);
	КонецЦикла;
	Для Каждого СтрокаТаблицы Из Объект.Услуги Цикл
		ЗаполнитьРассчитатьСуммыВСтроке(Форма, СтрокаТаблицы, ТаблицаЦенНоменклатуры, ВалютаДоИзменения,
			СтруктураКурса, ПерезаполнитьЦены, ПересчитатьЦены, ПересчитатьНДС, Истина, 1, Истина);
	КонецЦикла;
	Для Каждого СтрокаТаблицы Из Объект.ОС Цикл
		ЗаполнитьРассчитатьСуммыВСтроке(Форма, СтрокаТаблицы, ТаблицаЦенНоменклатуры, ВалютаДоИзменения,
			СтруктураКурса, ПерезаполнитьЦены, ПересчитатьЦены, ПересчитатьНДС, Истина, 1, Ложь);
	КонецЦикла;
	Для Каждого СтрокаТаблицы Из Объект.НМА Цикл
		ЗаполнитьРассчитатьСуммыВСтроке(Форма, СтрокаТаблицы, ТаблицаЦенНоменклатуры, ВалютаДоИзменения,
			СтруктураКурса, ПерезаполнитьЦены, ПересчитатьЦены, ПересчитатьНДС, Истина, 1, Ложь);
	КонецЦикла;
	
	Если РассчитатьНДССУчетомОшибокОкругления Тогда
		
		ДанныеОбъекта = Новый Структура("УчитыватьНДС, СуммаВключаетНДС, ВалютаДокумента", Форма.ПлательщикНДС, Объект.СуммаВключаетНДС, Объект.ВалютаДокумента);
		
		// соответствие для хранения погрешностей округлений
		ПогрешностиОкругления = Новый Соответствие();
		// пересчет сумм НДС с учетом ошибок округления
		УчетНДСКлиентСервер.ПересчитатьНДСсУчетомПогрешностиОкругления(Объект.Товары, 			  ДанныеОбъекта, ПогрешностиОкругления, "Товары");
		// пересчет сумм НДС с учетом ошибок округления
		УчетНДСКлиентСервер.ПересчитатьНДСсУчетомПогрешностиОкругления(Объект.БланкиСтрогогоУчета,  ДанныеОбъекта, ПогрешностиОкругления, "БланкиСтрогогоУчета");
		// пересчет сумм НДС с учетом ошибок округления
		УчетНДСКлиентСервер.ПересчитатьНДСсУчетомПогрешностиОкругления(Объект.Услуги, 			  ДанныеОбъекта, ПогрешностиОкругления, "Услуги");
		// пересчет сумм НДС с учетом ошибок округления
		УчетНДСКлиентСервер.ПересчитатьНДСсУчетомПогрешностиОкругления(Объект.Оборудование, 		  ДанныеОбъекта, ПогрешностиОкругления, "Оборудование");
		// пересчет сумм НДС с учетом ошибок округления
		УчетНДСКлиентСервер.ПересчитатьНДСсУчетомПогрешностиОкругления(Объект.ОбъектыСтроительства, ДанныеОбъекта, ПогрешностиОкругления, "ОбъектыСтроительства");
		
	КонецЕсли;
	
	Форма.ЗаполнитьДобавленныеКолонкиТаблиц();
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьСчетаУчетаВТабЧасти(Форма, ИмяТабличнойЧасти = "") Экспорт

	Объект = Форма.Объект;
	
	Если ПустаяСтрока(ИмяТабличнойЧасти) ИЛИ ИмяТабличнойЧасти = "Товары" Тогда
		Документы.НалоговаяНакладная.ЗаполнитьСчетаУчетаВТабЧасти(Объект, "Товары");
		Форма.ЗаполнитьДобавленныеКолонкиТаблиц("Товары");
	КонецЕсли;
	
	Если ПустаяСтрока(ИмяТабличнойЧасти) ИЛИ ИмяТабличнойЧасти = "Услуги" Тогда
		Документы.НалоговаяНакладная.ЗаполнитьСчетаУчетаВТабЧасти(Объект, "Услуги");
		Форма.ЗаполнитьДобавленныеКолонкиТаблиц("Услуги");
	КонецЕсли;
	
	Если ПустаяСтрока(ИмяТабличнойЧасти) ИЛИ ИмяТабличнойЧасти = "ОС" Тогда
		Документы.НалоговаяНакладная.ЗаполнитьСчетаУчетаВТабЧасти(Объект, "ОС");
		Форма.ЗаполнитьДобавленныеКолонкиТаблиц("ОС");
	КонецЕсли;
	
	Если ПустаяСтрока(ИмяТабличнойЧасти) ИЛИ ИмяТабличнойЧасти = "НМА" Тогда
		Документы.НалоговаяНакладная.ЗаполнитьСчетаУчетаВТабЧасти(Объект, "НМА");
		Форма.ЗаполнитьДобавленныеКолонкиТаблиц("НМА");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьИтоги(Форма)
	
	Объект = Форма.Объект;
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийНалоговаяНакладная.СводнаяНаПревышениеБазыНадЦенойПоставки") Тогда
		
		ВсегоНДС = Объект.Товары.Итог("СуммаНДСПревышения")+Объект.Услуги.Итог("СуммаНДСПревышения")+Объект.ОС.Итог("СуммаНДСПревышения")+Объект.НМА.Итог("СуммаНДСПревышения");
		// суммы превышения всегда без НДС
		Всего    = Объект.Товары.Итог("СуммаПревышения")+Объект.Услуги.Итог("СуммаПревышения")+Объект.ОС.Итог("СуммаПревышения")+Объект.НМА.Итог("СуммаПревышения");
		Если Объект.СуммаВключаетНДС Тогда
			Всего = Всего + ВсегоНДС;	
		КонецЕсли;
		
		Форма.ИтогиВсего    = Всего;
		Форма.ИтогиВсегоНДС = ВсегоНДС;
		
	Иначе
		Форма.ИтогиВсего    = Объект.Товары.Итог("Всего")    + Объект.Услуги.Итог("Всего")    + Объект.ОС.Итог("Всего")    + Объект.НМА.Итог("Всего");
		Форма.ИтогиВсегоНДС = Объект.Товары.Итог("СуммаНДС") + Объект.Услуги.Итог("СуммаНДС") + Объект.ОС.Итог("СуммаНДС") + Объект.НМА.Итог("СуммаНДС");	
	КонецЕсли; 
	
	Форма.ЕстьСтрокиВозвратнойТары   = Объект.ВозвратнаяТара.Количество() > 0;
	
КонецПроцедуры

&НаСервере
Функция СписокВидимыхТабличныхЧастей()

	СписокТЧ = Новый СписокЗначений;
	
	СписокТЧ.Добавить("Товары", "Товары");
	Если ?(Объект.ВозвратнаяТара.Количество() = 0, ИспользоватьВозвратнуюТару, Истина) И Не Внешнеэкономический Тогда
		СписокТЧ.Добавить("ВозвратнаяТара", "ВозвратнаяТара");
	КонецЕсли;
	СписокТЧ.Добавить("Услуги", "Услуги");
	СписокТЧ.Добавить("ОС", "ОС");
	СписокТЧ.Добавить("НМА", "НМА");
	
	Возврат СписокТЧ;

КонецФункции

&НаСервереБезКонтекста
Процедура ЗаполнитьДобавленныеКолонкиСтрокиТаблицы(СтрокаТаблицы, Знач ПараметрыОбъекта)

	СтрокаТаблицы.Всего = СтрокаТаблицы.Сумма + ?(ПараметрыОбъекта.СуммаВключаетНДС, 0, СтрокаТаблицы.СуммаНДС);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьПараметрыОбъектаДляЗаполненияДобавленныхКолонок(Знач Форма, ПараметрыОбъекта)

	Объект = Форма.Объект;
	
	Если ТипЗнч(ПараметрыОбъекта) <> Тип("Структура") Тогда
		ПараметрыОбъекта = Новый Структура;
	КонецЕсли;
	
	ПараметрыОбъекта.Вставить("СуммаВключаетНДС", 	Объект.СуммаВключаетНДС);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьРассчитатьСуммыВСтроке(Форма, Строка, ТаблицаЦенНоменклатуры, ВалютаПередИзменением, СтруктураКурса,
										ПерезаполнитьЦены, ПересчитатьЦены, ПересчитатьНДС, ЕстьНДС,
										ЗначениеПустогоКоличества, ЕстьСкидки)

	Объект = Форма.Объект;

	Если ПерезаполнитьЦены Тогда
		
		НайденнаяСтрока	= ТаблицаЦенНоменклатуры.Найти(Строка.Номенклатура, "Номенклатура");
		Если НайденнаяСтрока <> Неопределено Тогда
			Цена = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(
				НайденнаяСтрока.Цена, НайденнаяСтрока.Валюта, Объект.ВалютаДокумента, НайденнаяСтрока.Курс,
				Объект.КурсВзаиморасчетов, НайденнаяСтрока.Кратность, Объект.КратностьВзаиморасчетов);
			Если ЕстьСкидки Тогда
				СуммаСкидки = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(
					Строка.СуммаСкидки, НайденнаяСтрока.Валюта, Объект.ВалютаДокумента, НайденнаяСтрока.Курс,
					Объект.КурсВзаиморасчетов, НайденнаяСтрока.Кратность, Объект.КратностьВзаиморасчетов);
			Иначе
				СуммаСкидки = 0;
			КонецЕсли;
		Иначе
			Цена = 0;
			СуммаСкидки = 0;
		КонецЕсли;
		
		// Признак того, что цена включает НДС, хранится в реквизите ЦенаВключаетНДС типа цен
		ЦенаВключаетНДС = ?(ЗначениеЗаполнено(Объект.ТипЦен), Объект.ТипЦен.ЦенаВключаетНДС, Ложь);
		
	Иначе
		Если ПересчитатьЦены Тогда

			Цена = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(
				Строка.Цена, ВалютаПередИзменением, Объект.ВалютаДокумента, СтруктураКурса.Курс,
				Объект.КурсВзаиморасчетов, СтруктураКурса.Кратность, Объект.КратностьВзаиморасчетов);
			Если ЕстьСкидки Тогда
				СуммаСкидки = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(
					Строка.СуммаСкидки, ВалютаПередИзменением, Объект.ВалютаДокумента, СтруктураКурса.Курс,
					Объект.КурсВзаиморасчетов, СтруктураКурса.Кратность, Объект.КратностьВзаиморасчетов);
			Иначе
				СуммаСкидки = 0;
			КонецЕсли;

		Иначе
			Цена = Строка.Цена;
			Если ЕстьСкидки Тогда
				СуммаСкидки = Строка.СуммаСкидки;
			Иначе
				СуммаСкидки = 0;
			КонецЕсли;
		КонецЕсли;
		// Признак того, что цена включает НДС, хранится в реквизите СуммаВключаетНДС документа
		ЦенаВключаетНДС = ?(ПересчитатьНДС, НЕ Объект.СуммаВключаетНДС, Объект.СуммаВключаетНДС);
	КонецЕсли;

	Если ЕстьНДС Тогда

		Строка.Цена = УчетНДСКлиентСервер.ПересчитатьЦенуПриИзмененииФлаговНалогов(
			Цена, ЦенаВключаетНДС, Объект.СуммаВключаетНДС, УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(Строка.СтавкаНДС));

		СуммаБезСкидки = Строка.Цена * ?(Строка.Количество = 0, ЗначениеПустогоКоличества, Строка.Количество);
		Если ЕстьСкидки Тогда
			Строка.СуммаБезСкидки = СуммаБезСкидки;
			Если (СуммаСкидки <> 0) И (Цена <> Строка.Цена) И (Цена <> 0) Тогда
				СуммаСкидки = Окр(СуммаСкидки * Строка.Цена / Цена, 2, 1);
			КонецЕсли;
			Строка.СуммаСкидки = СуммаСкидки;
		КонецЕсли;
		Строка.Сумма = СуммаБезСкидки - СуммаСкидки;
		Строка.СуммаНДС = УчетНДСКлиентСервер.РассчитатьСуммуНДС(Строка.Сумма, Объект.СуммаВключаетНДС, УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(Строка.СтавкаНДС));

	Иначе
		Строка.Цена = Цена;
		СуммаБезСкидки = Строка.Цена * ?(Строка.Количество = 0, ЗначениеПустогоКоличества, Строка.Количество);
		Если ЕстьСкидки Тогда
			Строка.СуммаБезСкидки = СуммаБезСкидки;
			Строка.СуммаСкидки = СуммаСкидки;
		КонецЕсли;
		Строка.Сумма = СуммаБезСкидки - СуммаСкидки;
	КонецЕсли;

КонецПроцедуры
	
&НаКлиенте
Процедура ЗаполнитьПоОстаткам(ИмяТЧ)
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПоказатьПредупреждение(Неопределено, НСтр("ru='Заполнить документ можно только после его записи';uk='Заповнити документ можна тільки після його запису'"));
		Возврат;
	КонецЕсли;	
	
	ЗаполнятьТабличнуюЧасть = Истина;
	Если  НЕ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийНалоговаяНакладная.ИтоговаяРозницаОблагаемыеОперации")
	    И НЕ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийНалоговаяНакладная.ИтоговаяРозницаОсвобожденныеОперации")
		И НЕ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийНалоговаяНакладная.РозницаКонрагентуОблагаемыеОперации")
		И НЕ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийНалоговаяНакладная.РозницаКонрагентуОсвобожденныеОперации")
		И НЕ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийНалоговаяНакладная.УсловнаяПродажа")
		И НЕ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийНалоговаяНакладная.УсловнаяПродажаСписаниеОС") Тогда
	
		Если НЕ ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
			ТекстПредупреждения = НСтр("ru='Не выбран договор. Заполнение невозможно.';uk='Не обраний договір. Заповнення неможливо.'");
			ЗаполнятьТабличнуюЧасть = Ложь;
		ИначеЕсли НЕ ЗначениеЗаполнено(Объект.Сделка)
			    И ВедениеВзаиморасчетовПоРасчетнымДокументам Тогда
				
				ТекстПредупреждения = НСтр("ru='Не указан документ расчетов.
|Заполнение невозможно.';uk='Не зазначений документ розрахунків.
|Заповнення неможливо.'");
			ЗаполнятьТабличнуюЧасть = Ложь;
		КонецЕсли;
	
	КонецЕсли; 
	
	Если Не ЗаполнятьТабличнуюЧасть Тогда
		ПоказатьПредупреждение(Неопределено, ТекстПредупреждения, , );
		Возврат;
	КонецЕсли;	
	
	Если Объект[ИмяТЧ].Количество() > 0 Тогда
		
		ТекстВопроса = НСтр("ru='Очистить табличную часть перед заполнением?';uk='Очистити табличну частину перед заповненням?'");
		ПоказатьВопрос(Новый ОписаниеОповещения("ЗаполнитьПоОстаткамЗавершение", ЭтотОбъект, Новый Структура("ИмяТЧ", ИмяТЧ)), ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да, НСтр("ru='Заполнение';uk='Заповнення'"));
        Возврат; 
		
	КонецЕсли;

    ЗаполнитьПоОстаткамНаСервере(ИмяТЧ);
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоОстаткамЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    ИмяТЧ = ДополнительныеПараметры.ИмяТЧ;
    
    
    Ответ = РезультатВопроса;
    Если Ответ = КодВозвратаДиалога.Да Тогда
        Объект[ИмяТЧ].Очистить();
    КонецЕсли; 
    
    ЗаполнитьПоОстаткамНаСервере(ИмяТЧ);

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоОстаткамНаСервере(ИмяТЧ)

	Документ = РеквизитФормыВЗначение("Объект", Тип("ДокументОбъект.НалоговаяНакладная"));
	
	Документ.ЗаполнитьПоОстаткам(Документ[ИмяТч]);
	
	ЗначениеВРеквизитФормы(Документ, "Объект");

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТабличнуюЧасть(ИмяТЧ)

	ЗаполнятьТабличнуюЧасть = Ложь;
	Если НЕ ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		ТекстПредупреждения = НСтр("ru='Не выбран документ-основание. Заполнение невозможно.';uk='Не обраний документ-підстава. Заповнення неможливо.'");
	ИначеЕсли ИмяТЧ = "Товары" И ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.ОтчетКомитентуОПродажах") Тогда
		ТекстПредупреждения = НСтр("ru='Заполнять документ на основании документа ""Отчет комитенту о продажах"" необходимо на закладке ""Услуги""!';uk='Заповнювати документ на підставі документа ""Звіт комітенту про продажі"" необхідно на закладці ""Послуги""!'");	
	Иначе
		ЗаполнятьТабличнуюЧасть = Истина;
	КонецЕсли;

	Если Не ЗаполнятьТабличнуюЧасть Тогда
		ПоказатьПредупреждение(Неопределено, ТекстПредупреждения, , НСтр("ru='Заполнение';uk='Заповнення'"));
		Возврат;
	КонецЕсли;

	Если Объект[ИмяТЧ].Количество() > 0 Тогда
		
		ТекстВопроса = НСтр("ru='Очистить табличную часть перед заполнением?';uk='Очистити табличну частину перед заповненням?'");
		Ответ = Неопределено;

		ПоказатьВопрос(Новый ОписаниеОповещения("ЗаполнитьТабличнуюЧастьЗавершение", ЭтотОбъект, Новый Структура("ИмяТЧ", ИмяТЧ)), ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да, НСтр("ru='Заполнение';uk='Заповнення'"));
        Возврат; 
		
	КонецЕсли;
	
    ЗаполнитьТабличнуюЧастьНаСервере(ИмяТЧ);
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТабличнуюЧастьЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    ИмяТЧ = ДополнительныеПараметры.ИмяТЧ;
    
    Ответ = РезультатВопроса;
    Если Ответ = КодВозвратаДиалога.Да Тогда
        Объект[ИмяТЧ].Очистить();
    КонецЕсли; 
    
    ЗаполнитьТабличнуюЧастьНаСервере(ИмяТЧ);

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТабличнуюЧастьНаСервере(ИмяТЧ)
	
	Документ = РеквизитФормыВЗначение("Объект", Тип("ДокументОбъект.НалоговаяНакладная"));
	
	Если ИмяТЧ = "Товары" Тогда
		Документ.СкопироватьТовары();
	ИначеЕсли ИмяТЧ = "ВозвратнаяТара" Тогда
		Документ.СкопироватьВозвратнуюТару();
	ИначеЕсли ИмяТЧ = "Услуги" Тогда
		Если ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.ОтчетКомитентуОПродажах") Тогда
			Документ.СкопироватьУслугуПоКомиссии();
		ИначеЕсли ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.ОтчетКомиссионераОПродажах")
  	         И НЕ Объект.ДокументОснование.ВалютаДокумента = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета() Тогда
			Документ.СкопироватьУслугиКомиссииОтНерезидента();
		Иначе
			Документ.СкопироватьУслуги();
		КонецЕсли;
	ИначеЕсли ИмяТЧ = "ОС" Тогда
		Документ.СкопироватьОС();
	ИначеЕсли ИмяТЧ = "НМА" Тогда
		Документ.СкопироватьНематериальныеАктивы();
	КонецЕсли;
	
	Если НЕ ИмяТЧ = "ВозвратнаяТара" Тогда
		 Документ.РеквизитыНомерСтрокиННАктуальны = Ложь;
	КонецЕсли;

	ЗначениеВРеквизитФормы(Документ, "Объект");
	
КонецПроцедуры

&НаСервере
Процедура ЗаполниитьСводнуюПоУсловнойПродажеНаСервере(ВидНалоговогоНазначения)	
	
	Объект.ТипПричиныНевыдачиПокупателю = ?(ВидНалоговогоНазначения = "НеоблагаемаяНеХозДеятельность", 13, 9);	 
	Объект.АвторасчетНДС = Ложь;
	Объект.Сводная = Истина;
	Объект.КодПризнакаСводной = ?(ВидНалоговогоНазначения = "ПропорциональноОблагаемая", 2, 1);
	
	Документ = РеквизитФормыВЗначение("Объект", Тип("ДокументОбъект.НалоговаяНакладная"));
	
	Документ.ЗаполнитьСводуюУсловнуюПродажу(ВидНалоговогоНазначения);
	
	ЗначениеВРеквизитФормы(Документ, "Объект");

КонецПроцедуры

&НаКлиенте
Процедура ЗаполниитьСводнуюПоУсловнойПродажеЗавершение(РезультатВопроса, ВидНалоговогоНазначения) Экспорт	
	
    Ответ = РезультатВопроса;
    Если Ответ = КодВозвратаДиалога.Да Тогда

		Объект.Услуги.Очистить();
			
	КонецЕсли;
	
	ЗаполниитьСводнуюПоУсловнойПродажеНаСервере(ВидНалоговогоНазначения);
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСводнуюПоУсловнойПродаже(ВидНалоговогоНазначения)
	
	Если Объект.Услуги.Количество() > 0 Тогда
		
		ТекстВопроса = НСтр("ru='Очистить табличную часть перед заполнением?';uk='Очистити табличну частину перед заповненням?'");
		ПоказатьВопрос(Новый ОписаниеОповещения("ЗаполниитьСводнуюПоУсловнойПродажеЗавершение", ЭтотОбъект, ВидНалоговогоНазначения), ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да, НСтр("ru='Заполнение';uk='Заповнення'"));
        Возврат; 
	КонецЕсли;
	
	ЗаполниитьСводнуюПоУсловнойПродажеНаСервере(ВидНалоговогоНазначения);
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСводнуюНаПревышенияБазыНадЦенойПоставкиНаСервере(ИмяТЧ)
		
	Документ = РеквизитФормыВЗначение("Объект", Тип("ДокументОбъект.НалоговаяНакладная"));
	
	Документ.ЗаполнитьСводнуюНаПревышенияБазыНадЦенойПоставки(ИмяТЧ);
	
	ЗначениеВРеквизитФормы(Документ, "Объект");

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСводнуюНаПревышенияБазыНадЦенойПоставкиЗавершение(РезультатВопроса, ИмяТЧ) Экспорт
	
    Ответ = РезультатВопроса;
	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		Объект[ИмяТЧ].Очистить();
		ЗаполнитьСводнуюНаПревышенияБазыНадЦенойПоставкиНаСервере(ИмяТЧ);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РассчитатьПревышение(Объект, СтрокаТабличнойЧасти, ЕстьКоличество = Истина)
	
	Если СтрокаТабличнойЧасти.Количество = 0 Тогда
		ТекКоличество = 1;		
	Иначе
		ТекКоличество = СтрокаТабличнойЧасти.Количество;		
	КонецЕсли;
	ОбычнаяСтоимость = СтрокаТабличнойЧасти.ЦенаОбычная*ТекКоличество;
	
	СтрокаТабличнойЧасти.СуммаПревышения = Макс(0, ОбычнаяСтоимость  - 
				?(Объект.СуммаВключаетНДС, СтрокаТабличнойЧасти.Сумма - СтрокаТабличнойЧасти.СуммаНДС, СтрокаТабличнойЧасти.Сумма));
				
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РассчитатьНДСПревышения(СтрокаТабличнойЧасти)

	СтрокаТабличнойЧасти.СуммаНДСПревышения = УчетНДС.РассчитатьСуммуНДС(СтрокаТабличнойЧасти.СуммаПревышения,
	                                                   Истина, Ложь,
	                                                   УчетНДС.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтавкуНДС(СтрокаТабличнойЧасти)

	// СтавкаНДС прироритетно определеятся видом операции документа
	СписокДопустимыхСтавокНДС = Документы.НалоговаяНакладная.ОпределитьДопустимыеСтавкиНДС(Объект);	
	
	Если СписокДопустимыхСтавокНДС.Количество() > 1 Тогда
		
		
		Если СтрокаТабличнойЧасти.Свойство("Номенклатура") Тогда
			СтавкаНДСТовара = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаТабличнойЧасти.Номенклатура, "СтавкаНДС");
			Если СписокДопустимыхСтавокНДС.НайтиПоЗначению(СтавкаНДСТовара) = Неопределено Тогда 
				// в карточке товара указана недопустимая в данном контексте ставка НДС
				СтрокаТабличнойЧасти.СтавкаНДС = Перечисления.СтавкиНДС.ПустаяСсылка();
			Иначе
				СтрокаТабличнойЧасти.СтавкаНДС = СтавкаНДСТовара;
			КонецЕсли;
		Иначе
			СтрокаТабличнойЧасти.СтавкаНДС = СписокДопустимыхСтавокНДС[0].Значение;	
		КонецЕсли;
		
	Иначе
		СтрокаТабличнойЧасти.СтавкаНДС = СписокДопустимыхСтавокНДС[0].Значение;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПроверитьНомерНалоговогоДокументаНаСервере()
	
	СтруктураДанныхОбъекта = Новый Структура("Дата, Номер, Ссылка, Организация, ОбособленноеПодразделение, ВидОперации, СпецРежимНалогообложения");
	ЗаполнитьЗначенияСвойств(СтруктураДанныхОбъекта, Объект);
	НалоговыйУчет.ПроверитьНомерНалоговогоДокумента(СтруктураДанныхОбъекта);
	Объект.Номер = СтруктураДанныхОбъекта.Номер;
	
КонецПроцедуры

&НаКлиенте
Процедура НачалоВыбораНоменклатурыГТД(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	
	ТекущаяСтрокаТоваров = Элементы.Товары.ТекущиеДанные;
	Если ТекущаяСтрокаТоваров = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВариантыВыбора = Новый СписокЗначений();
	ВариантыВыбора.Добавить(Ложь,   НСтр("ru='Выбрать по данным номенклатуры';uk='Вибрати по даним номенклатури'"));
	ВариантыВыбора.Добавить(Истина, НСтр("ru='Произвольный выбор';uk='Довільний вибір'"));
	
	ПоказатьВыборИзСписка(Новый ОписаниеОповещения("НачалоВыбораНоменклатурыГТДЗавершение", ЭтотОбъект, Новый Структура("Элемент", Элемент)), ВариантыВыбора, Элемент, 0);

КонецПроцедуры

&НаКлиенте
Процедура НачалоВыбораНоменклатурыГТДЗавершение(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
    
    Элемент = ДополнительныеПараметры.Элемент;
	
    РезультатВыбора = ВыбранныйЭлемент;
    
    Если РезультатВыбора = Неопределено Тогда
        Возврат;
	КонецЕсли; 
	
	ТекущаяСтрокаТоваров = Элементы.Товары.ТекущиеДанные;
	
	Если РезультатВыбора.Значение = Истина Тогда
		ПараметрыФормыВыбора = Новый Структура("ТекущаяСтрока");
		Если ТекущаяСтрокаТоваров <> Неопределено И ЗначениеЗаполнено(ТекущаяСтрокаТоваров.КодУКТВЭД) Тогда
			ПараметрыФормыВыбора.Вставить("ТекущаяСтрока", ТекущаяСтрокаТоваров.КодУКТВЭД);	
		КонецЕсли;  
		ОткрытьФорму("Справочник.КлассификаторУКТВЭД.Форма.ФормаВыбора", ПараметрыФормыВыбора, Элемент);
	Иначе
	    ДанныеСтроки = Новый Структура("КодУКТВЭД, НомерГТД, Номенклатура");
	    ЗаполнитьЗначенияСвойств(ДанныеСтроки, ТекущаяСтрокаТоваров); 
	    ПараметрыФормыВыбора = ЗаполнитьПараметрыВыбораНоменклатурыГТД(ДанныеСтроки);
		
		ОткрытьФорму("Справочник.НоменклатураГТД.Форма.ФормаВыбора", ПараметрыФормыВыбора, Элемент);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура НачалоВыбораНоменклатурыГТДУслуги(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	
	ТекущаяСтрокаУслуг = Элементы.Услуги.ТекущиеДанные;
	Если ТекущаяСтрокаУслуг = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВариантыВыбора = Новый СписокЗначений();
	ВариантыВыбора.Добавить(Ложь,   НСтр("ru='Выбрать по данным номенклатуры';uk='Вибрати по даним номенклатури'"));
	ВариантыВыбора.Добавить(Истина, НСтр("ru='Произвольный выбор';uk='Довільний вибір'"));
		
	ПоказатьВыборИзСписка(Новый ОписаниеОповещения("НачалоВыбораНоменклатурыГТДУслугиЗавершение", ЭтотОбъект, Новый Структура("Элемент", Элемент)), ВариантыВыбора, Элемент, 0); 

КонецПроцедуры

&НаКлиенте
Процедура НачалоВыбораНоменклатурыГТДУслугиЗавершение(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
    
    Элемент = ДополнительныеПараметры.Элемент;
    
    РезультатВыбора = ВыбранныйЭлемент;
    
    Если РезультатВыбора = Неопределено Тогда
        Возврат;
    КонецЕсли;
	
	ТекущаяСтрокаУслуг = Элементы.Услуги.ТекущиеДанные;
	
    Если РезультатВыбора.Значение = Истина Тогда
		ПараметрыФормыВыбора = Новый Структура("ТекущаяСтрока");
		Если ТекущаяСтрокаУслуг <> Неопределено И ЗначениеЗаполнено(ТекущаяСтрокаУслуг.КодУКТВЭД) Тогда
			ПараметрыФормыВыбора.Вставить("ТекущаяСтрока", ТекущаяСтрокаУслуг.КодУКТВЭД);	
		КонецЕсли;
		ОткрытьФорму("Справочник.КлассификаторУКТВЭД.Форма.ФормаВыбора", ПараметрыФормыВыбора, Элемент);
	Иначе
	    ДанныеСтроки = Новый Структура("КодУКТВЭД, Номенклатура");
	    ЗаполнитьЗначенияСвойств(ДанныеСтроки, ТекущаяСтрокаУслуг); 
	    ПараметрыФормыВыбора = ЗаполнитьПараметрыВыбораНоменклатурыГТДУслуги(ДанныеСтроки);
		
		ОткрытьФорму("Справочник.НоменклатураГТД.Форма.ФормаВыбора", ПараметрыФормыВыбора, Элемент);
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗаполнитьПараметрыВыбораНоменклатурыГТД(ТекущаяСтрокаТоваров)
	
	Параметры = Новый Структура("Отбор, ТекущаяСтрока");
	
	Параметры.Отбор = Новый Структура("Владелец", ТекущаяСтрокаТоваров.Номенклатура); 
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("КодУКТВЭД", ТекущаяСтрокаТоваров.КодУКТВЭД);
	Запрос.УстановитьПараметр("НомерГТД",  ТекущаяСтрокаТоваров.НомерГТД);
	Запрос.УстановитьПараметр("Владелец",  ТекущаяСтрокаТоваров.Номенклатура);
	
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	               |	НоменклатураГТД.Ссылка
	               |ИЗ
	               |	Справочник.НоменклатураГТД КАК НоменклатураГТД
	               |ГДЕ
	               |	НоменклатураГТД.КодУКТВЭД  = &КодУКТВЭД
	               |	И НоменклатураГТД.НомерГТД = &НомерГТД
	               |	И НоменклатураГТД.Владелец = &Владелец";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Параметры.ТекущаяСтрока = Выборка.Ссылка;	
	КонецЕсли;
	
	Возврат Параметры; 
	
КонецФункции

&НаСервереБезКонтекста
Функция ЗаполнитьПараметрыВыбораНоменклатурыГТДУслуги(ТекущаяСтрокаТоваров)
	
	Параметры = Новый Структура("Отбор, ТекущаяСтрока");
	
	Параметры.Отбор = Новый Структура("Владелец", ТекущаяСтрокаТоваров.Номенклатура); 
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("КодУКТВЭД", ТекущаяСтрокаТоваров.КодУКТВЭД);
	Запрос.УстановитьПараметр("Владелец",  ТекущаяСтрокаТоваров.Номенклатура);
	
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	               |	НоменклатураГТД.Ссылка
	               |ИЗ
	               |	Справочник.НоменклатураГТД КАК НоменклатураГТД
	               |ГДЕ
	               |	НоменклатураГТД.КодУКТВЭД  = &КодУКТВЭД
	               |	И НоменклатураГТД.Владелец = &Владелец";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Параметры.ТекущаяСтрока = Выборка.Ссылка;	
	КонецЕсли;
	
	Возврат Параметры; 
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьРеквизитНоменклатурыГТДНаСервере(Ссылка, ИмяРекзвизита)

	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, ИмяРекзвизита);	

КонецФункции 

&НаСервереБезКонтекста
Функция ПолучитьСсылкуНаВидДоговораПоГКПоНаименованию(ВидДоговора)

	Возврат Справочники.ВидыДоговоровПоГК.НайтиПоНаименованию(ВидДоговора, Истина);		

КонецФункции // ()

&НаКлиентеНаСервереБезКонтекста
Функция СписокПараметровВыбораСубконто(Форма, ПараметрыОбъекта, ШаблонИмяПоляОбъекта, ИмяСчета)
	
	СписокПараметров = Новый Структура;
	Для Индекс = 1 По 3 Цикл
		ИмяПоля = СтрЗаменить(ШаблонИмяПоляОбъекта, "%Индекс%", Индекс);
		Если ТипЗнч(ПараметрыОбъекта[ИмяПоля]) = Тип("СправочникСсылка.Контрагенты") Тогда
			СписокПараметров.Вставить("Контрагент", ПараметрыОбъекта[ИмяПоля]);
		ИначеЕсли ТипЗнч(ПараметрыОбъекта[ИмяПоля]) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
			СписокПараметров.Вставить("ДоговорКонтрагента", ПараметрыОбъекта[ИмяПоля]);
		ИначеЕсли ТипЗнч(ПараметрыОбъекта[ИмяПоля]) = Тип("СправочникСсылка.Номенклатура") Тогда
			СписокПараметров.Вставить("Номенклатура", ПараметрыОбъекта[ИмяПоля]);
		ИначеЕсли ТипЗнч(ПараметрыОбъекта[ИмяПоля]) = Тип("СправочникСсылка.Склады") Тогда
			СписокПараметров.Вставить("Склад", ПараметрыОбъекта[ИмяПоля]);
		КонецЕсли;
	КонецЦикла;
	СписокПараметров.Вставить("Организация", Форма.Объект.Организация);
	СписокПараметров.Вставить("СчетУчета",   Форма.Объект[ИмяСчета]);
	
	Возврат СписокПараметров;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьЗаголовкиИДоступностьСубконто(Форма, Счет, Префикс)
	
	ПоляФормы = Новый Структура("Субконто1, Субконто2, Субконто3",
		Префикс + "1",
		Префикс + "2",
		Префикс + "3");
	
	ЗаголовкиПолей = Новый Структура("Субконто1, Субконто2, Субконто3",
		"Заголовок" + Префикс + "1", "Заголовок" + Префикс + "2", "Заголовок" + Префикс + "3");
	
	БухгалтерскийУчетКлиентСервер.ПриВыбореСчета(Счет, Форма, ПоляФормы, ЗаголовкиПолей);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьУсловиеПродажиНаСервере(Объект)
	
	Документы.НалоговаяНакладная.ЗаполнитьУсловиеПродажи(Объект);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСписокТиповДляВыбораДокументаОснования(Объект)
	
	СписокТипов = Новый СписокЗначений;
	
	МассивТиповДокументаОснования = Метаданные.Документы.НалоговаяНакладная.Реквизиты["ДокументОснование"].Тип.Типы();

	ОграничениеТипов = Новый Массив();
	Если Объект.ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.РаботыОтНерезидента Тогда
		ОграничениеТипов.Добавить(Тип("ДокументСсылка.ПоступлениеТоваровУслуг"));
	Иначе
		Для каждого ТипРеквизита Из МассивТиповДокументаОснования Цикл
		
			Если ТипРеквизита = Тип("ДокументСсылка.ПоступлениеТоваровУслуг")
				// документ больше не используется
				Или ТипРеквизита = Тип("ДокументСсылка.ПлатежныйОрдерПоступлениеДенежныхСредств") Тогда	
				Продолжить;
			Иначе
				ОграничениеТипов.Добавить(ТипРеквизита);
			КонецЕсли;
			
		КонецЦикла; 
	КонецЕсли;    

	Для каждого ЭлементМассива Из МассивТиповДокументаОснования Цикл
			
		Если ОграничениеТипов.Найти(ЭлементМассива) = Неопределено Тогда
			 // Тип не вписывается в полученные ограничения
			Продолжить;
		КонецЕсли; 
		ПустоеЗначение = Новый(ЭлементМассива);
		ОбъектОписанияМетаданных = ПустоеЗначение.Метаданные();
		
		СписокТипов.Добавить(ОбъектОписанияМетаданных.Имя, ОбъектОписанияМетаданных.Представление());

	КонецЦикла; 

	СписокТипов.СортироватьПоПредставлению();
	Если НЕ Объект. ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.РаботыОтНерезидента Тогда
		
		// добавим в список "первым номером" собственно сделку
		Если ЗначениеЗаполнено(Объект.Сделка) Тогда
			СписокТипов.Вставить(0,Объект.Сделка);	
		КонецЕсли;
		
	КонецЕсли;	
	
	Возврат СписокТипов;	

КонецФункции // ()

&НаСервереБезКонтекста
Процедура ЗаполнитьСтатьюНалоговыхОбязательств(ИмяТабличнойЧасти, СтрокаТабличнойЧасти, ДанныеОбъекта)

	Документы.НалоговаяНакладная.ЗаполнитьСтатьюДекларацииНДСНалоговыеОбязательства(ДанныеОбъекта, СтрокаТабличнойЧасти, ИмяТабличнойЧасти, Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьТекстДополнения();

	СписокВариантов = Новый СписокЗначений;
	УчетНДС.ЗаполнитьСписокВыбораТекстДополненияКНаименованиюПриПродажеНижеОбычнойЦены(СписокВариантов);
	
	ПодходящееЗначение = СписокВариантов.НайтиПоЗначению(Объект.ТипПричиныНевыдачиПокупателюПриПродажеНижеОбычнойЦены);	
	Если НЕ ПодходящееЗначение = Неопределено Тогда
		Объект.ТекстДополненияКНаименованиюПриПродажеНижеОбычнойЦены = ПодходящееЗначение.Представление;	
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	Если ИдетПринудительнаяЗапись = Истина Тогда
		ОтключитьОбработчикОжидания("ПовторнаяЗаписьДокументаСПроведением");
		ПовторнаяЗаписьДокументаСПроведением();
		Если ОшибкаПринудительнойЗаписи = Истина Тогда
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	
	// ИНАГРО++	
	Если ИНАГРО_ОбщийВызовСервераПовтИсп.ЕстьБЭМКЗУ() Тогда  
		
		Если  ЗначениеЗаполнено(Объект.ДокументОснование)
			И ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
			
			Если ПередЗакрытиемНаСервере(Объект.ДокументОснование) Тогда
				Оповестить("РеализацияУслуг_СозданаНалоговаяНакладная");	
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	// ИНАГРО--

КонецПроцедуры

&НаКлиенте
Процедура ПовторнаяЗаписьДокументаСПроведением() Экспорт
	
	Попытка
		ПараметрыЗаписи = Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение);
		Записать(ПараметрыЗаписи);		
		ОшибкаПринудительнойЗаписи = Ложь;
	Исключение
		ПоказатьПредупреждение(,НСтр("ru='Операция не выполнена!';uk='Операція не виконана!'"));	
		ОшибкаПринудительнойЗаписи = Истина;
	КонецПопытки;
	ИдетПринудительнаяЗапись = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьКодПризнакаСводной()
	СтароеЗначениеКодПризнакаСводной = Объект.КодПризнакаСводной;
	Если НЕ Объект.Сводная Тогда
		Объект.КодПризнакаСводной = 0;
	Иначе 
		Если ( Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийНалоговаяНакладная.УсловнаяПродажа")
			  ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийНалоговаяНакладная.УсловнаяПродажаСписаниеОС")) Тогда
			  
			// не изменяем, если уже был установлен подходящий признак 
			Если НЕ (СтароеЗначениеКодПризнакаСводной = 1 ИЛИ СтароеЗначениеКодПризнакаСводной = 2) Тогда 
			  	Объект.КодПризнакаСводной =  1;
			КонецЕсли;
			  
		ИначеЕсли (Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийНалоговаяНакладная.ОблагаемыеОперации")
			  ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийНалоговаяНакладная.ОсвобожденныеОперации")) Тогда
			  
			Если НЕ (СтароеЗначениеКодПризнакаСводной = 4) Тогда 
			  	Объект.КодПризнакаСводной =  4;
			КонецЕсли;
			  
		 ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийНалоговаяНакладная.СводнаяНаПревышениеБазыНадЦенойПоставки") Тогда
			  
			Если НЕ (СтароеЗначениеКодПризнакаСводной = 3) Тогда 
			  	Объект.КодПризнакаСводной = 3;
			КонецЕсли;			
			  
	    КонецЕсли;
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПроверитьСтатьюДекларацииНДС22(Объект)
	
	СтруктураТабличныйЧастей = Новый Структура("Товары, Услуги, ОС, НМА");
	
	Для каждого ЭлементСтруктуры ИЗ СтруктураТабличныйЧастей Цикл
		Для каждого СтрокаТабличнойЧасти Из Объект[ЭлементСтруктуры.Ключ] Цикл
			ПроверитьСтатьюДекларацииНДС22ВСтроке(Объект, СтрокаТабличнойЧасти);
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПроверитьСтатьюДекларацииНДС22ВСтроке(Объект, ТекущаяСтрока)
	
	Если Объект.Дата >= '2020-01-01' И Объект.ТипПричиныНевыдачиПокупателю = 7 Тогда
		Если ТекущаяСтрока.СтатьяДекларацииНДСНалоговыеОбязательства = ПредопределенноеЗначение("Справочник.СтатьиНалоговыхДеклараций.НДС_НООсвобожден") Тогда
			ТекущаяСтрока.СтатьяДекларацииНДСНалоговыеОбязательства = ПредопределенноеЗначение("Справочник.СтатьиНалоговыхДеклараций.НДС_НОНеОблагЭкспорт");
		КонецЕсли;
	Иначе
		Если ТекущаяСтрока.СтатьяДекларацииНДСНалоговыеОбязательства = ПредопределенноеЗначение("Справочник.СтатьиНалоговыхДеклараций.НДС_НОНеОблагЭкспорт") Тогда
			ТекущаяСтрока.СтатьяДекларацииНДСНалоговыеОбязательства = ПредопределенноеЗначение("Справочник.СтатьиНалоговыхДеклараций.НДС_НООсвобожден");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ БСП

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПередЗакрытиемНаСервере(ДокументОснование) // ИНАГРО
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ИНАГРО_СформированныеДокументы.ДокументИсточник КАК ДокументИсточник,
		|	ИНАГРО_СформированныеДокументы.ИмяТиповогоДокумента КАК ИмяТиповогоДокумента,
		|	ИНАГРО_СформированныеДокументы.ТиповыйДокумент КАК ТиповыйДокумент
		|ИЗ
		|	РегистрСведений.ИНАГРО_СформированныеДокументы КАК ИНАГРО_СформированныеДокументы
		|ГДЕ
		|	ИНАГРО_СформированныеДокументы.ТиповыйДокумент = &ТиповыйДокумент
		|	И ТИПЗНАЧЕНИЯ(ИНАГРО_СформированныеДокументы.ДокументИсточник) = ТИП(Документ.ИНАГРО_РасчетУслуг)";
	
	Запрос.УстановитьПараметр("ТиповыйДокумент", ДокументОснование);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
		
КонецФункции

&НаСервере
Процедура УстановитьСвязиПараметровВыбораЕдиницыИзмерения(Номенклатура) // ИНАГРО
	
	СвязиПараметровВыбора = Новый Массив;
	Если ЗначениеЗаполнено(Номенклатура) Тогда
		Если ТипЗнч(Номенклатура) = Тип("СправочникСсылка.Номенклатура") Тогда
			Связь = Новый СвязьПараметраВыбора("Номенклатура", "Элементы.Товары.ТекущиеДанные.Номенклатура", РежимИзмененияСвязанногоЗначения.Очищать);		
		ИначеЕсли ТипЗнч(Номенклатура) = Тип("СправочникСсылка.БиологическиеАктивы") Тогда
			Связь = Новый СвязьПараметраВыбора("БиологическиеАктивы", "Элементы.Товары.ТекущиеДанные.Номенклатура", РежимИзмененияСвязанногоЗначения.Очищать);
		КонецЕсли; 
		СвязиПараметровВыбора.Добавить(Связь);
	КонецЕсли; 
	
	Элементы.ТоварыЕдиницаИзмерения.СвязиПараметровВыбора = Новый ФиксированныйМассив(СвязиПараметровВыбора);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти