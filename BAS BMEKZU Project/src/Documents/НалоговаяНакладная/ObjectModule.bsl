#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда


Процедура ЗаполнитьПоОстаткам(ТабличнаяЧасть, МоментВремени = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	
	Если МоментВремени = Неопределено Тогда
		Запрос.УстановитьПараметр("МоментВремени", МоментВремени());
	Иначе	
		Запрос.УстановитьПараметр("МоментВремени", МоментВремени);
	КонецЕсли;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ДоговорКонтрагента", ДоговорКонтрагента);
	
	Запрос.УстановитьПараметр("Сделка", Документы.НалоговаяНакладная.ОпределитьСделкуЛокально(ЭтотОбъект));
	                                                                                      
	Если ТабличнаяЧасть = Товары Тогда
		Запрос.УстановитьПараметр("ВозвратнаяТара", Ложь);
		Запрос.УстановитьПараметр("СтавкиНДС", Документы.НалоговаяНакладная.ОпределитьДопустимыеСтавкиНДС(ЭтотОбъект));
	Иначе
		Запрос.УстановитьПараметр("ВозвратнаяТара", Истина);
		Запрос.УстановитьПараметр("СтавкиНДС", Перечисления.СтавкиНДС.НеНДС);
	КонецЕсли;
	
	СобытиеНДС = Перечисления.СобытияОжидаемыйИПодтвержденныйНДСПродаж.Реализация; 
	ВалютаВзаиморасчетовНУ = ДоговорКонтрагента.ВалютаВзаиморасчетов;
	
	Если ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.УсловнаяПродажа Тогда	
		// в регистре информация по НДС начисленному при условной продаже хранится отдельно
		
		СобытиеНДС = Перечисления.СобытияОжидаемыйИПодтвержденныйНДСПродаж.УсловнаяПродажа; 
		Запрос.УстановитьПараметр("ДоговорКонтрагента", Справочники.ДоговорыКонтрагентов.ПустаяСсылка());
		Запрос.УстановитьПараметр("Сделка", 			Неопределено);
		ВалютаВзаиморасчетовНУ = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.ИтоговаяРозницаОблагаемыеОперации 
		  ИЛИ ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.ИтоговаяРозницаОсвобожденныеОперации Тогда	
		  
		СобытиеНДС = Перечисления.СобытияОжидаемыйИПодтвержденныйНДСПродаж.РеализацияРозница; 
		Запрос.УстановитьПараметр("ДоговорКонтрагента", Справочники.ДоговорыКонтрагентов.ПустаяСсылка());
		Запрос.УстановитьПараметр("Сделка", 			Неопределено);
		ВалютаВзаиморасчетовНУ = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	  
	КонецЕсли; 
	
	Запрос.УстановитьПараметр("СобытиеНДС", СобытиеНДС);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СтавкаНДС,
	|	СуммаНДСОстаток,
	|	БазаНДСОстаток
	|ИЗ
	|	РегистрНакопления.ОжидаемыйИПодтвержденныйНДСПродаж.Остатки(&МоментВремени, 
	|											  			Организация 		= &Организация 
	|											 		  И ДоговорКонтрагента 	= &ДоговорКонтрагента 
	|													  И СтавкаНДС 			В (&СтавкиНДС)
	|													  И СобытиеНДС  		= &СобытиеНДС 
	|													  И Сделка		  		= &Сделка 
	|													  И ВозвратнаяТара 		= &ВозвратнаяТара) КАК НДСПриобретенийОстатки
	|ГДЕ
	|	  СуммаНДСОстаток >= 0
	|   И БазаНДСОстаток  >= 0
	|";
	
	Выборка = Запрос.Выполнить().Выбрать();
	ДанныеОВалютеВзаиморасчетовНУ = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаВзаиморасчетовНУ, Дата);
	
	ДанныеОбъекта = Новый Структура("ВидОперации, ДоговорКонтрагента, ВалютаВзаиморасчетов, НеЯвляетсяРезидентом, Дата, ТипПричиныНевыдачиПокупателю");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, ЭтотОбъект);
	ДанныеОбъекта.ВалютаВзаиморасчетов = ДоговорКонтрагента.ВалютаВзаиморасчетов;
	ДанныеОбъекта.НеЯвляетсяРезидентом = Контрагент.НеЯвляетсяРезидентом;
	
	Пока Выборка.Следующий() Цикл
		
		Если ТабличнаяЧасть = Товары Тогда
			СтрокаТабличнойЧасти = Товары.Добавить();
				
			Товар = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("НоменклатураДляЗаполненияНалоговыхНакладных");	
			Если НЕ ЗначениеЗаполнено(Товар) Тогда
				Сообщить(НСтр("ru='Для пользователя не указано значение ""Номенклатура для автоматического заполнения налоговых накладных"" в индивидуальных настройках!';uk='Для користувача не вказане значення ""Номенклатура для автоматичного заповнення податкових накладних"" в індивідуальних настройках!'"), СтатусСообщения.Важное);
			КонецЕсли; 
			
			СтрокаТабличнойЧасти.Номенклатура	  = Товар;
			
			СтрокаТабличнойЧасти.ЕдиницаИзмерения = СтрокаТабличнойЧасти.Номенклатура.БазоваяЕдиницаИзмерения;
			СтрокаТабличнойЧасти.Коэффициент	  = 1;
			СтрокаТабличнойЧасти.Количество		  = 1;
			
			СтрокаТабличнойЧасти.СтавкаНДС       	 	 	= Выборка.СтавкаНДС;
			
			СуммаНДС 	= МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Выборка.СуммаНДСОстаток, 
													ВалютаВзаиморасчетовНУ, ВалютаДокумента, 
													ДанныеОВалютеВзаиморасчетовНУ.Курс, ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета()),
													ДанныеОВалютеВзаиморасчетовНУ.Кратность, ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета()));
													
			СтрокаТабличнойЧасти.СуммаНДС = СуммаНДС;										
			
			СуммаБезНДС = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Выборка.БазаНДСОстаток, 
													ВалютаВзаиморасчетовНУ, ВалютаДокумента, 
													ДанныеОВалютеВзаиморасчетовНУ.Курс, ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета()),
													ДанныеОВалютеВзаиморасчетовНУ.Кратность, ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета()));
			
			СтрокаТабличнойЧасти.Сумма 			= СуммаБезНДС + ?(СуммаВключаетНДС, СуммаНДС, 0);
			СтрокаТабличнойЧасти.СуммаБезСкидки = СтрокаТабличнойЧасти.Сумма;
			
			Документы.НалоговаяНакладная.ЗаполнитьСтатьюДекларацииНДСНалоговыеОбязательства(ДанныеОбъекта, СтрокаТабличнойЧасти, "Товары", Неопределено);
			
			Документы.НалоговаяНакладная.ОбновитьЗначениеЛьготыНДС(ЭтотОбъект, СтрокаТабличнойЧасти);
			
			Документы.НалоговаяНакладная.УстановитьКодУКТВЭДВстрокеТоваров(СтрокаТабличнойЧасти);
			
		Иначе
			
			СтрокаТабличнойЧасти = ВозвратнаяТара.Добавить();
			
			СтрокаТабличнойЧасти.Сумма = Выборка.БазаНДСОстаток;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ТабличнаяЧасть = Товары Тогда
		РеквизитыНомерСтрокиННАктуальны = Ложь;
	КонецЕсли;	
	
КонецПроцедуры

Процедура ЗаполнитьСводуюУсловнуюПродажу(ВидНалоговогоНазначения) Экспорт	
	
	мВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	
	Запрос = Новый Запрос;
	
	СтатьиДеклараций = Справочники.СтатьиНалоговыхДеклараций;	
	МассивСтатей = Новый Массив;
	
	Если ВидНалоговогоНазначения = "ПропорциональноОблагаемая" Тогда
		МассивСтатей.Добавить(СтатьиДеклараций.НДС_НКПропорциональноНеВклВКредитПоставкаОФ);
		МассивСтатей.Добавить(СтатьиДеклараций.НДС_НКПропорциональноНеВклВКредит);
	ИначеЕсли ВидНалоговогоНазначения = "НеоблагаемаяХозДеятельность" Тогда	
		МассивСтатей.Добавить(СтатьиДеклараций.НДС_НКПокупкаСНДСвВРНеОблаг);
		МассивСтатей.Добавить(СтатьиДеклараций.НДС_НКПокупкаСНДСвВРНеОблагПриобрОФ);
		МассивСтатей.Добавить(СтатьиДеклараций.НДС_НКИмпортВРНеОблагНеОбъектНДСТамож);
	ИначеЕсли ВидНалоговогоНазначения = "НеоблагаемаяНеХозДеятельность" Тогда	
		МассивСтатей.Добавить(СтатьиДеклараций.НДС_НКПокупкаСНДСнеВР_);
		МассивСтатей.Добавить(СтатьиДеклараций.НДС_НКПокупкаБезНДСнеВРОФ);
	КонецЕсли;
	
	СтавкиНДС = Новый Массив;
	СтавкиНДС.Добавить(Перечисления.СтавкиНДС.НДС20);
	СтавкиНДС.Добавить(Перечисления.СтавкиНДС.НДС14);
	СтавкиНДС.Добавить(Перечисления.СтавкиНДС.НДС7);
	СтавкиНДС.Добавить(Перечисления.СтавкиНДС.СпецСт8); // ИНАГРО
	
	Запрос.УстановитьПараметр("НачМесяца", НачалоМесяца(Дата));
	Запрос.УстановитьПараметр("КонМесяца", КонецМесяца(Дата));
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("МассивСтатей", МассивСтатей);
	Запрос.УстановитьПараметр("СтавкиНДС", 		СтавкиНДС);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЕСТЬNULL(НДСНалоговыйКредит.Регистратор.ВидДокумента, """") КАК ВидДокумента,
	|	НДСНалоговыйКредит.Регистратор.Контрагент.ИНН КАК ИННКонтрагента,
	|	НДСНалоговыйКредит.Регистратор,
	|	ЕСТЬNULL(НДСНалоговыйКредит.Регистратор.ДатаВходящегоДокумента, НДСНалоговыйКредит.Регистратор.Дата) КАК ДатаВх,
	|	ЕСТЬNULL(НДСНалоговыйКредит.Регистратор.НомерВходящегоДокумента, НДСНалоговыйКредит.Регистратор.НомерГТД) КАК НомерВх,
	|	НДСНалоговыйКредит.СтавкаНДС,
	|	НДСНалоговыйКредит.БазаНДСОборот,
	|	НДСНалоговыйКредит.НДСОборот КАК СуммаНДСОборот
	|ИЗ
	|	РегистрНакопления.НДСНалоговыйКредит.Обороты(
	|			&НачМесяца,
	|			&КонМесяца,
	|			Регистратор,
	|			Организация = &Организация
	|				И СтавкаНДС В (&СтавкиНДС)
	|				И СтатьяДекларацииНДСНалоговыйКредит В (&МассивСтатей)) КАК НДСНалоговыйКредит
	|ГДЕ
	|	(НДСНалоговыйКредит.Регистратор ССЫЛКА Документ.РегистрацияВходящегоНалоговогоДокумента
	|			ИЛИ НДСНалоговыйКредит.Регистратор ССЫЛКА Документ.ГТДИмпорт)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ДанныеОбъекта = Новый Структура("ВидОперации, ДоговорКонтрагента, ВалютаВзаиморасчетов, НеЯвляетсяРезидентом, Дата, ТипПричиныНевыдачиПокупателю");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, ЭтотОбъект);
	ДанныеОбъекта.ВалютаВзаиморасчетов = ДоговорКонтрагента.ВалютаВзаиморасчетов;
	ДанныеОбъекта.НеЯвляетсяРезидентом = Ложь;
	
	Пока Выборка.Следующий() Цикл
		
		СтрокаТабличнойЧасти = Услуги.Добавить();
			
		Товар = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("НоменклатураДляЗаполненияНалоговыхНакладных");	
		Если НЕ ЗначениеЗаполнено(Товар) Тогда
			Сообщить(НСтр("ru='Для пользователя не указано значение ""Номенклатура для автоматического заполнения налоговых накладных"" в индивидуальных настройках!';uk='Для користувача не вказане значення ""Номенклатура для автоматичного заповнення податкових накладних"" в індивідуальних настройках!'"), СтатусСообщения.Важное);
		КонецЕсли; 
		
		СтрокаТабличнойЧасти.Номенклатура	  = Товар;
		
		ВидДокумента = ?(ТипЗнч(Выборка.Регистратор) = Тип("ДокументСсылка.ГТДИмпорт"), 
							"ВМД ",
							"Податкова накладна ")
					 + ?(Выборка.ВидДокумента = "-" ИЛИ НЕ ЗначениеЗаполнено(Выборка.ВидДокумента),
							"", 
							" (" + Выборка.ВидДокумента+ ")");
							
		НомерДокумента = " № " + ?(ЗначениеЗаполнено(Выборка.НомерВх), Выборка.НомерВх , "б/н");
												  
		ДатаДокумента  = " від " + Формат(Выборка.ДатаВх, "ДФ=dd.MM.yyyy");
		
		ИННПоставщика  = ?(ТипЗнч(Выборка.Регистратор) = Тип("ДокументСсылка.ГТДИмпорт"),
							  "",
							  ", ІПН постачальника: " + Выборка.ИННКонтрагента);
		
		СтрокаТабличнойЧасти.Содержание = ВидДокумента + НомерДокумента + ДатаДокумента + ИННПоставщика;
												
		СтрокаТабличнойЧасти.Количество		  = 1;
		
		СтрокаТабличнойЧасти.СтавкаНДС        = Выборка.СтавкаНДС;
		
		СуммаНДС 	= МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Выборка.СуммаНДСОборот, 
												мВалютаРегламентированногоУчета, ВалютаДокумента, 
												1, ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета),
												1, ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета));
												
		СтрокаТабличнойЧасти.СуммаНДС = СуммаНДС;										
		
		СуммаБезНДС = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Выборка.БазаНДСОборот, 
												мВалютаРегламентированногоУчета, ВалютаДокумента, 
												1, ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета),
												1, ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета));
		
		СтрокаТабличнойЧасти.Сумма 			= СуммаБезНДС + ?(СуммаВключаетНДС, СуммаНДС, 0);
		СтрокаТабличнойЧасти.СуммаБезСкидки = СтрокаТабличнойЧасти.Сумма;
		СтрокаТабличнойЧасти.Цена	  		= СтрокаТабличнойЧасти.Сумма;										
		
		Документы.НалоговаяНакладная.ЗаполнитьСтатьюДекларацииНДСНалоговыеОбязательства(ДанныеОбъекта, СтрокаТабличнойЧасти, "Услуги", Неопределено);
		
	КонецЦикла;
	
	РеквизитыНомерСтрокиННАктуальны = Ложь;
	
КонецПроцедуры

Процедура ЗаполнитьСводнуюНаПревышенияБазыНадЦенойПоставки(ИмяТЧ) Экспорт
	
	мВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	
	Если ИмяТЧ = "Товары" Тогда
		ТекстЗапросаНоменклатуры = 
		"ВЫБРАТЬ
		|	НалоговаяНакладнаяТовары.Ссылка КАК ОсновнаяНН,
		|	НалоговаяНакладнаяТовары.Номенклатура,
		|	НалоговаяНакладнаяТовары.ЕдиницаИзмерения,
		|	НалоговаяНакладнаяТовары.Коэффициент,
		|	НалоговаяНакладнаяТовары.Количество,
		|	ВЫБОР
		|		КОГДА &СуммаВключаетНДС
		|			ТОГДА ВЫБОР
		|					КОГДА НалоговаяНакладнаяТовары.Ссылка.СуммаВключаетНДС
		|						ТОГДА НалоговаяНакладнаяТовары.Цена
		|					ИНАЧЕ ВЫБОР
		|							КОГДА НалоговаяНакладнаяТовары.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС20)
		|								ТОГДА ВЫРАЗИТЬ(НалоговаяНакладнаяТовары.Цена * 120 / 100 КАК ЧИСЛО(15, 2))
		|							КОГДА НалоговаяНакладнаяТовары.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС14)
		|								ТОГДА ВЫРАЗИТЬ(НалоговаяНакладнаяТовары.Цена * 114 / 100 КАК ЧИСЛО(15, 2))
		|							КОГДА НалоговаяНакладнаяТовары.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС7)
		|								ТОГДА ВЫРАЗИТЬ(НалоговаяНакладнаяТовары.Цена * 107 / 100 КАК ЧИСЛО(15, 2))
		|							ИНАЧЕ НалоговаяНакладнаяТовары.Цена
		|						КОНЕЦ
		|				КОНЕЦ
		|		ИНАЧЕ ВЫБОР
		|				КОГДА НЕ НалоговаяНакладнаяТовары.Ссылка.СуммаВключаетНДС
		|					ТОГДА НалоговаяНакладнаяТовары.Цена
		|				ИНАЧЕ ВЫБОР
		|						КОГДА НалоговаяНакладнаяТовары.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС20)
		|							ТОГДА ВЫРАЗИТЬ(НалоговаяНакладнаяТовары.Цена * 100 / 120 КАК ЧИСЛО(15, 2))
		|						КОГДА НалоговаяНакладнаяТовары.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС14)
		|							ТОГДА ВЫРАЗИТЬ(НалоговаяНакладнаяТовары.Цена * 100 / 114 КАК ЧИСЛО(15, 2))
		|						КОГДА НалоговаяНакладнаяТовары.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС7)
		|							ТОГДА ВЫРАЗИТЬ(НалоговаяНакладнаяТовары.Цена * 100 / 107 КАК ЧИСЛО(15, 2))
		|						ИНАЧЕ НалоговаяНакладнаяТовары.Цена
		|					КОНЕЦ
		|			КОНЕЦ
		|	КОНЕЦ КАК Цена,
		|	ВЫБОР
		|		КОГДА НЕ НалоговаяНакладнаяТовары.Ссылка.СуммаВключаетНДС
		|			ТОГДА НалоговаяНакладнаяТовары.Цена
		|		ИНАЧЕ ВЫБОР
		|				КОГДА НалоговаяНакладнаяТовары.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС20)
		|					ТОГДА ВЫРАЗИТЬ(НалоговаяНакладнаяТовары.Цена * 100 / 120 КАК ЧИСЛО(15, 2))
		|				КОГДА НалоговаяНакладнаяТовары.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС14)
		|					ТОГДА ВЫРАЗИТЬ(НалоговаяНакладнаяТовары.Цена * 100 / 114 КАК ЧИСЛО(15, 2))
		|				КОГДА НалоговаяНакладнаяТовары.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС7)
		|					ТОГДА ВЫРАЗИТЬ(НалоговаяНакладнаяТовары.Цена * 100 / 107 КАК ЧИСЛО(15, 2))
		|				ИНАЧЕ НалоговаяНакладнаяТовары.Цена
		|			КОНЕЦ
		|	КОНЕЦ КАК ЦенаБезНДС,
		|	НалоговаяНакладнаяТовары.СуммаНДС,
		|	ВЫБОР
		|		КОГДА &СуммаВключаетНДС
		|			ТОГДА ВЫБОР
		|					КОГДА НалоговаяНакладнаяТовары.Ссылка.СуммаВключаетНДС
		|						ТОГДА НалоговаяНакладнаяТовары.Сумма
		|					ИНАЧЕ ВЫБОР
		|							КОГДА НалоговаяНакладнаяТовары.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС20)
		|								ТОГДА ВЫРАЗИТЬ(НалоговаяНакладнаяТовары.Сумма * 120 / 100 КАК ЧИСЛО(15, 2))
		|							КОГДА НалоговаяНакладнаяТовары.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС14)
		|								ТОГДА ВЫРАЗИТЬ(НалоговаяНакладнаяТовары.Сумма * 114 / 100 КАК ЧИСЛО(15, 2))
		|							КОГДА НалоговаяНакладнаяТовары.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС7)
		|								ТОГДА ВЫРАЗИТЬ(НалоговаяНакладнаяТовары.Сумма * 107 / 100 КАК ЧИСЛО(15, 2))
		|							ИНАЧЕ НалоговаяНакладнаяТовары.Сумма
		|						КОНЕЦ
		|				КОНЕЦ
		|		ИНАЧЕ ВЫБОР
		|				КОГДА НЕ НалоговаяНакладнаяТовары.Ссылка.СуммаВключаетНДС
		|					ТОГДА НалоговаяНакладнаяТовары.Сумма
		|				ИНАЧЕ ВЫБОР
		|						КОГДА НалоговаяНакладнаяТовары.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС20)
		|							ТОГДА ВЫРАЗИТЬ(НалоговаяНакладнаяТовары.Сумма * 100 / 120 КАК ЧИСЛО(15, 2))
		|						КОГДА НалоговаяНакладнаяТовары.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС14)
		|							ТОГДА ВЫРАЗИТЬ(НалоговаяНакладнаяТовары.Сумма * 100 / 114 КАК ЧИСЛО(15, 2))
		|						КОГДА НалоговаяНакладнаяТовары.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС7)
		|							ТОГДА ВЫРАЗИТЬ(НалоговаяНакладнаяТовары.Сумма * 100 / 107 КАК ЧИСЛО(15, 2))
		|						ИНАЧЕ НалоговаяНакладнаяТовары.Сумма
		|					КОНЕЦ
		|			КОНЕЦ
		|	КОНЕЦ КАК Сумма,
		|	ВЫБОР
		|		КОГДА &СуммаВключаетНДС
		|			ТОГДА ВЫБОР
		|					КОГДА НалоговаяНакладнаяТовары.Ссылка.СуммаВключаетНДС
		|						ТОГДА НалоговаяНакладнаяТовары.СуммаБезСкидки
		|					ИНАЧЕ ВЫБОР
		|							КОГДА НалоговаяНакладнаяТовары.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС20)
		|								ТОГДА ВЫРАЗИТЬ(НалоговаяНакладнаяТовары.СуммаБезСкидки * 120 / 100 КАК ЧИСЛО(15, 2))
		|							КОГДА НалоговаяНакладнаяТовары.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС14)
		|								ТОГДА ВЫРАЗИТЬ(НалоговаяНакладнаяТовары.СуммаБезСкидки * 114 / 100 КАК ЧИСЛО(15, 2))
		|							КОГДА НалоговаяНакладнаяТовары.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС7)
		|								ТОГДА ВЫРАЗИТЬ(НалоговаяНакладнаяТовары.СуммаБезСкидки * 107 / 100 КАК ЧИСЛО(15, 2))
		|							ИНАЧЕ НалоговаяНакладнаяТовары.СуммаБезСкидки
		|						КОНЕЦ
		|				КОНЕЦ
		|		ИНАЧЕ ВЫБОР
		|				КОГДА НЕ НалоговаяНакладнаяТовары.Ссылка.СуммаВключаетНДС
		|					ТОГДА НалоговаяНакладнаяТовары.СуммаБезСкидки
		|				ИНАЧЕ ВЫБОР
		|						КОГДА НалоговаяНакладнаяТовары.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС20)
		|							ТОГДА ВЫРАЗИТЬ(НалоговаяНакладнаяТовары.СуммаБезСкидки * 100 / 120 КАК ЧИСЛО(15, 2))
		|						КОГДА НалоговаяНакладнаяТовары.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС14)
		|							ТОГДА ВЫРАЗИТЬ(НалоговаяНакладнаяТовары.СуммаБезСкидки * 100 / 114 КАК ЧИСЛО(15, 2))
		|						КОГДА НалоговаяНакладнаяТовары.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС7)
		|							ТОГДА ВЫРАЗИТЬ(НалоговаяНакладнаяТовары.СуммаБезСкидки * 100 / 107 КАК ЧИСЛО(15, 2))
		|						ИНАЧЕ НалоговаяНакладнаяТовары.СуммаБезСкидки
		|					КОНЕЦ
		|			КОНЕЦ
		|	КОНЕЦ КАК СуммаБезСкидки,
		|	НалоговаяНакладнаяТовары.СтавкаНДС,
		|	НалоговаяНакладнаяТовары.ДатаОтгрузкиОплаты,
		|	НалоговаяНакладнаяТовары.СтатьяДекларацииНДСНалоговыеОбязательства,
		|	НалоговаяНакладнаяТовары.КодУКТВЭД,
		|	НалоговаяНакладнаяТовары.НомерГТД
		|ПОМЕСТИТЬ ВТТовары
		|ИЗ
		|	Документ.НалоговаяНакладная.Товары КАК НалоговаяНакладнаяТовары
		|ГДЕ
		|	НалоговаяНакладнаяТовары.Ссылка.Дата МЕЖДУ &НачалоПериода И &КонецПериода
		|	И НалоговаяНакладнаяТовары.Ссылка.Проведен
		|	И НалоговаяНакладнаяТовары.Ссылка.ВидОперации В(&ВидыОпераций)
		|	И НалоговаяНакладнаяТовары.Ссылка.Организация = &Организация
		|	И НалоговаяНакладнаяТовары.Ссылка.ОбособленноеПодразделение = &ОбособленноеПодразделение";
	Иначе
		ТекстЗапросаНоменклатуры =
		"ВЫБРАТЬ
		|	НалоговаяНакладнаяУслуги.Ссылка КАК ОсновнаяНН,
		|	НалоговаяНакладнаяУслуги.Номенклатура,
		|	НалоговаяНакладнаяУслуги.Содержание КАК Содержание,
		|	НалоговаяНакладнаяУслуги.Количество,
		|	ВЫБОР
		|		КОГДА &СуммаВключаетНДС
		|			ТОГДА ВЫБОР
		|					КОГДА НалоговаяНакладнаяУслуги.Ссылка.СуммаВключаетНДС
		|						ТОГДА НалоговаяНакладнаяУслуги.Цена
		|					ИНАЧЕ ВЫБОР
		|							КОГДА НалоговаяНакладнаяУслуги.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС20)
		|								ТОГДА ВЫРАЗИТЬ(НалоговаяНакладнаяУслуги.Цена * 120 / 100 КАК ЧИСЛО(15, 2))
		|							КОГДА НалоговаяНакладнаяУслуги.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС14)
		|								ТОГДА ВЫРАЗИТЬ(НалоговаяНакладнаяУслуги.Цена * 114 / 100 КАК ЧИСЛО(15, 2))
		|							КОГДА НалоговаяНакладнаяУслуги.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС7)
		|								ТОГДА ВЫРАЗИТЬ(НалоговаяНакладнаяУслуги.Цена * 107 / 100 КАК ЧИСЛО(15, 2))
		|							ИНАЧЕ НалоговаяНакладнаяУслуги.Цена
		|						КОНЕЦ
		|				КОНЕЦ
		|		ИНАЧЕ ВЫБОР
		|				КОГДА НЕ НалоговаяНакладнаяУслуги.Ссылка.СуммаВключаетНДС
		|					ТОГДА НалоговаяНакладнаяУслуги.Цена
		|				ИНАЧЕ ВЫБОР
		|						КОГДА НалоговаяНакладнаяУслуги.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС20)
		|							ТОГДА ВЫРАЗИТЬ(НалоговаяНакладнаяУслуги.Цена * 100 / 120 КАК ЧИСЛО(15, 2))
		|						КОГДА НалоговаяНакладнаяУслуги.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС14)
		|							ТОГДА ВЫРАЗИТЬ(НалоговаяНакладнаяУслуги.Цена * 100 / 114 КАК ЧИСЛО(15, 2))
		|						КОГДА НалоговаяНакладнаяУслуги.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС7)
		|							ТОГДА ВЫРАЗИТЬ(НалоговаяНакладнаяУслуги.Цена * 100 / 107 КАК ЧИСЛО(15, 2))
		|						ИНАЧЕ НалоговаяНакладнаяУслуги.Цена
		|					КОНЕЦ
		|			КОНЕЦ
		|	КОНЕЦ КАК Цена,
		|	ВЫБОР
		|		КОГДА НЕ НалоговаяНакладнаяУслуги.Ссылка.СуммаВключаетНДС
		|			ТОГДА НалоговаяНакладнаяУслуги.Цена
		|		ИНАЧЕ ВЫБОР
		|				КОГДА НалоговаяНакладнаяУслуги.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС20)
		|					ТОГДА ВЫРАЗИТЬ(НалоговаяНакладнаяУслуги.Цена * 100 / 120 КАК ЧИСЛО(15, 2))
		|				КОГДА НалоговаяНакладнаяУслуги.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС14)
		|					ТОГДА ВЫРАЗИТЬ(НалоговаяНакладнаяУслуги.Цена * 100 / 114 КАК ЧИСЛО(15, 2))
		|				КОГДА НалоговаяНакладнаяУслуги.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС7)
		|					ТОГДА ВЫРАЗИТЬ(НалоговаяНакладнаяУслуги.Цена * 100 / 107 КАК ЧИСЛО(15, 2))
		|				ИНАЧЕ НалоговаяНакладнаяУслуги.Цена
		|			КОНЕЦ
		|	КОНЕЦ КАК ЦенаБезНДС,
		|	НалоговаяНакладнаяУслуги.СуммаНДС,
		|	ВЫБОР
		|		КОГДА &СуммаВключаетНДС
		|			ТОГДА ВЫБОР
		|					КОГДА НалоговаяНакладнаяУслуги.Ссылка.СуммаВключаетНДС
		|						ТОГДА НалоговаяНакладнаяУслуги.Сумма
		|					ИНАЧЕ ВЫБОР
		|							КОГДА НалоговаяНакладнаяУслуги.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС20)
		|								ТОГДА ВЫРАЗИТЬ(НалоговаяНакладнаяУслуги.Сумма * 120 / 100 КАК ЧИСЛО(15, 2))
		|							КОГДА НалоговаяНакладнаяУслуги.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС14)
		|								ТОГДА ВЫРАЗИТЬ(НалоговаяНакладнаяУслуги.Сумма * 114 / 100 КАК ЧИСЛО(15, 2))
		|							КОГДА НалоговаяНакладнаяУслуги.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС7)
		|								ТОГДА ВЫРАЗИТЬ(НалоговаяНакладнаяУслуги.Сумма * 107 / 100 КАК ЧИСЛО(15, 2))
		|							ИНАЧЕ НалоговаяНакладнаяУслуги.Сумма
		|						КОНЕЦ
		|				КОНЕЦ
		|		ИНАЧЕ ВЫБОР
		|				КОГДА НЕ НалоговаяНакладнаяУслуги.Ссылка.СуммаВключаетНДС
		|					ТОГДА НалоговаяНакладнаяУслуги.Сумма
		|				ИНАЧЕ ВЫБОР
		|						КОГДА НалоговаяНакладнаяУслуги.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС20)
		|							ТОГДА ВЫРАЗИТЬ(НалоговаяНакладнаяУслуги.Сумма * 100 / 120 КАК ЧИСЛО(15, 2))
		|						КОГДА НалоговаяНакладнаяУслуги.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС14)
		|							ТОГДА ВЫРАЗИТЬ(НалоговаяНакладнаяУслуги.Сумма * 100 / 114 КАК ЧИСЛО(15, 2))
		|						КОГДА НалоговаяНакладнаяУслуги.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС7)
		|							ТОГДА ВЫРАЗИТЬ(НалоговаяНакладнаяУслуги.Сумма * 100 / 107 КАК ЧИСЛО(15, 2))
		|						ИНАЧЕ НалоговаяНакладнаяУслуги.Сумма
		|					КОНЕЦ
		|			КОНЕЦ
		|	КОНЕЦ КАК Сумма,
		|	ВЫБОР
		|		КОГДА &СуммаВключаетНДС
		|			ТОГДА ВЫБОР
		|					КОГДА НалоговаяНакладнаяУслуги.Ссылка.СуммаВключаетНДС
		|						ТОГДА НалоговаяНакладнаяУслуги.СуммаБезСкидки
		|					ИНАЧЕ ВЫБОР
		|							КОГДА НалоговаяНакладнаяУслуги.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС20)
		|								ТОГДА ВЫРАЗИТЬ(НалоговаяНакладнаяУслуги.СуммаБезСкидки * 120 / 100 КАК ЧИСЛО(15, 2))
		|							КОГДА НалоговаяНакладнаяУслуги.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС14)
		|								ТОГДА ВЫРАЗИТЬ(НалоговаяНакладнаяУслуги.СуммаБезСкидки * 114 / 100 КАК ЧИСЛО(15, 2))
		|							КОГДА НалоговаяНакладнаяУслуги.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС7)
		|								ТОГДА ВЫРАЗИТЬ(НалоговаяНакладнаяУслуги.СуммаБезСкидки * 107 / 100 КАК ЧИСЛО(15, 2))
		|							ИНАЧЕ НалоговаяНакладнаяУслуги.СуммаБезСкидки
		|						КОНЕЦ
		|				КОНЕЦ
		|		ИНАЧЕ ВЫБОР
		|				КОГДА НЕ НалоговаяНакладнаяУслуги.Ссылка.СуммаВключаетНДС
		|					ТОГДА НалоговаяНакладнаяУслуги.СуммаБезСкидки
		|				ИНАЧЕ ВЫБОР
		|						КОГДА НалоговаяНакладнаяУслуги.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС20)
		|							ТОГДА ВЫРАЗИТЬ(НалоговаяНакладнаяУслуги.СуммаБезСкидки * 100 / 120 КАК ЧИСЛО(15, 2))
		|						КОГДА НалоговаяНакладнаяУслуги.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС14)
		|							ТОГДА ВЫРАЗИТЬ(НалоговаяНакладнаяУслуги.СуммаБезСкидки * 100 / 114 КАК ЧИСЛО(15, 2))
		|						КОГДА НалоговаяНакладнаяУслуги.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС7)
		|							ТОГДА ВЫРАЗИТЬ(НалоговаяНакладнаяУслуги.СуммаБезСкидки * 100 / 107 КАК ЧИСЛО(15, 2))
		|						ИНАЧЕ НалоговаяНакладнаяУслуги.СуммаБезСкидки
		|					КОНЕЦ
		|			КОНЕЦ
		|	КОНЕЦ КАК СуммаБезСкидки,
		|	НалоговаяНакладнаяУслуги.СтавкаНДС,
		|	НалоговаяНакладнаяУслуги.ДатаОтгрузкиОплаты,
		|	НалоговаяНакладнаяУслуги.СтатьяДекларацииНДСНалоговыеОбязательства,
		|	НалоговаяНакладнаяУслуги.КодУКТВЭД
		|ПОМЕСТИТЬ ВТТовары
		|ИЗ
		|	Документ.НалоговаяНакладная.Услуги КАК НалоговаяНакладнаяУслуги
		|ГДЕ
		|	НалоговаяНакладнаяУслуги.Ссылка.Дата МЕЖДУ &НачалоПериода И &КонецПериода
		|	И НалоговаяНакладнаяУслуги.Ссылка.Проведен
		|	И НалоговаяНакладнаяУслуги.Ссылка.ВидОперации В(&ВидыОпераций)
		|	И НалоговаяНакладнаяУслуги.Ссылка.Организация = &Организация
		|	И НалоговаяНакладнаяУслуги.Ссылка.ОбособленноеПодразделение = &ОбособленноеПодразделение";
	КонецЕсли;
	
	ТекстЗапросаЦеныПоставкиНижеБазы = "
	|ВЫБРАТЬ
	|	ЦеныНоменклатурыСрезПоследних.Номенклатура,
	|	ЦеныНоменклатурыСрезПоследних.Цена,
	|	ЦеныНоменклатурыСрезПоследних.ТипЦен.ЦенаВключаетНДС КАК ЦенаВключаетНДС
	|ПОМЕСТИТЬ ВТЦеныВалюты
	|ИЗ
	|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	|			&КонецПериода,
	|			ТипЦен = &ТипЦен
	|				И Валюта = &ВалютаРегламентированногоУчета
	|				И Номенклатура В
	|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|						ВТТовары.Номенклатура
	|					ИЗ
	|						ВТТовары КАК ВТТовары)) КАК ЦеныНоменклатурыСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТТовары.ОсновнаяНН,
	|	ВТТовары.Номенклатура,
	|	ВТТовары.Количество,
	|	ВЫБОР
	|		КОГДА НЕ ВТЦеныВалюты.ЦенаВключаетНДС
	|			ТОГДА ВТЦеныВалюты.Цена
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ВТТовары.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС20)
	|					ТОГДА ВЫРАЗИТЬ(ВТЦеныВалюты.Цена * 100 / 120 КАК ЧИСЛО(15, 2))
	|				КОГДА ВТТовары.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС14)
	|					ТОГДА ВЫРАЗИТЬ(ВТЦеныВалюты.Цена * 100 / 114 КАК ЧИСЛО(15, 2))
	|				КОГДА ВТТовары.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС7)
	|					ТОГДА ВЫРАЗИТЬ(ВТЦеныВалюты.Цена * 100 / 107 КАК ЧИСЛО(15, 2))
	|				ИНАЧЕ ВТЦеныВалюты.Цена
	|			КОНЕЦ
	|	КОНЕЦ КАК ЦенаОбычная,
	|	ВТТовары.Цена,
	|	ВТТовары.СуммаНДС,
	|	ВТТовары.Сумма,
	|	ВТТовары.СуммаБезСкидки,
	|	ВТТовары.СтавкаНДС,
	|	ВТТовары.ДатаОтгрузкиОплаты,
	|	ВТТовары.СтатьяДекларацииНДСНалоговыеОбязательства,
	|	ВТТовары.КодУКТВЭД,
	| //НесовпадающиеРеквизитыТЧ
	|ИЗ
	|	ВТЦеныВалюты КАК ВТЦеныВалюты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТТовары КАК ВТТовары
	|		ПО ВТЦеныВалюты.Номенклатура = ВТТовары.Номенклатура
	|			И (ВТТовары.ЦенаБезНДС < ВЫБОР
	|				КОГДА НЕ ВТЦеныВалюты.ЦенаВключаетНДС
	|					ТОГДА ВТЦеныВалюты.Цена
	|				ИНАЧЕ ВЫБОР
	|						КОГДА ВТТовары.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС20)
	|							ТОГДА ВЫРАЗИТЬ(ВТЦеныВалюты.Цена * 100 / 120 КАК ЧИСЛО(15, 2))
	|						КОГДА ВТТовары.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС14)
	|							ТОГДА ВЫРАЗИТЬ(ВТЦеныВалюты.Цена * 100 / 114 КАК ЧИСЛО(15, 2))
	|						КОГДА ВТТовары.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС7)
	|							ТОГДА ВЫРАЗИТЬ(ВТЦеныВалюты.Цена * 100 / 107 КАК ЧИСЛО(15, 2))
	|						ИНАЧЕ ВТЦеныВалюты.Цена
	|					КОНЕЦ
	|			КОНЕЦ)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ОсновнаяНН";
	
	ТекстЗапроса = ТекстЗапросаНоменклатуры + Символы.ПС + ";" + ТекстЗапросаЦеныПоставкиНижеБазы;
	
	Если ИмяТЧ = "Товары" Тогда
		НесовпадающиеРеквизитыТЧ = 
		"	ВТТовары.ЕдиницаИзмерения,
		|	ВТТовары.Коэффициент,
		|	ВТТовары.НомерГТД";
	Иначе
		НесовпадающиеРеквизитыТЧ = 
		"	ВТТовары.Содержание";
	КонецЕсли; 
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//НесовпадающиеРеквизитыТЧ", НесовпадающиеРеквизитыТЧ);
	
	ВидыОпераций = Новый Массив;
	ВидыОпераций.Добавить(Перечисления.ВидыОперацийНалоговаяНакладная.ИтоговаяРозницаОблагаемыеОперации);
	ВидыОпераций.Добавить(Перечисления.ВидыОперацийНалоговаяНакладная.ОблагаемыеОперации);
	ВидыОпераций.Добавить(Перечисления.ВидыОперацийНалоговаяНакладная.РозницаКонрагентуОблагаемыеОперации);
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр("НачалоПериода", НачалоМесяца(Дата));
	Запрос.УстановитьПараметр("КонецПериода", КонецМесяца(Дата));
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ОбособленноеПодразделение", ОбособленноеПодразделение);
	Запрос.УстановитьПараметр("ВидыОпераций", ВидыОпераций);
	Запрос.УстановитьПараметр("ТипЦен", ТипЦен);
	Запрос.УстановитьПараметр("СуммаВключаетНДС", СуммаВключаетНДС);
	Запрос.УстановитьПараметр("ВалютаРегламентированногоУчета", мВалютаРегламентированногоУчета);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Сообщить(НСтр("ru='Нет данных для заполнения!';uk='Немає даних для заповнення!'"));
		Возврат;
	КонецЕсли; 
	
	ТЧ = ЭтотОбъект[ИмяТЧ];
	ТЧ.Загрузить(РезультатЗапроса.Выгрузить());
	
	//Рассчитаем сумму превышения и НДС преаышения для заполненных строк
	Для каждого СтрокаТЧ Из ТЧ Цикл
		
		СтрокаТЧ.СуммаПревышения = Макс(0, СтрокаТЧ.ЦенаОбычная * СтрокаТЧ.Количество  - 
					?(СуммаВключаетНДС, СтрокаТЧ.Сумма - СтрокаТЧ.СуммаНДС, СтрокаТЧ.Сумма));
					
		СтрокаТЧ.СуммаНДСПревышения = УчетНДС.РассчитатьСуммуНДС(СтрокаТЧ.СуммаПревышения,
		            Истина, Ложь, УчетНДС.ПолучитьСтавкуНДС(СтрокаТЧ.СтавкаНДС));	
	КонецЦикла; 
	
	ЭтотОбъект.РеквизитыНомерСтрокиННАктуальны = Ложь;
	
КонецПроцедуры

Процедура СкопироватьТовары(Основание = Неопределено) Экспорт
	
	Если Основание = Неопределено Тогда
		Основание = ДокументОснование;
	КонецЕсли;
		
	Если Основание.Метаданные().ТабличныеЧасти.Найти("Товары") = Неопределено Тогда
		// нет такой табличной части
		Возврат
	КонецЕсли;
	
	ЕстьСкидки			= Основание.Метаданные().ТабличныеЧасти.Товары.Реквизиты.Найти("СуммаСкидки") <> Неопределено;
	
	ЕстьДоговор			= Основание.Метаданные().Реквизиты.Найти("ДоговорКонтрагента") <> Неопределено;
	ЕстьВалюта			= Основание.Метаданные().Реквизиты.Найти("ВалютаДокумента") <> Неопределено;
	
	ЕстьСтавкаНДС       = Не ТипЗнч(Основание) = Тип("ДокументСсылка.ИзменениеНалоговогоНазначенияЗапасов");
	
	// ИНАГРО
	ЕстьГоловы			= Ложь;
	Если ИНАГРО_ОбщийВызовСервераПовтИсп.ЕстьБСПУ() Тогда
		ЕстьГоловы = Основание.Метаданные().ТабличныеЧасти.Товары.Реквизиты.Найти("Голов") <> Неопределено;
	КонецЕсли;
	
	ПогрешностиОкругления = Новый Соответствие;
	ВидДокумента = Основание.Метаданные().Имя;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", 	Основание);
	Запрос.УстановитьПараметр("ДопустимыеСтавкиНДС",Документы.НалоговаяНакладная.ОпределитьДопустимыеСтавкиНДС(ЭтотОбъект));
	Запрос.УстановитьПараметр("ВалютаРеглУчета", 	ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета());
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Основание.ЕдиницаИзмерения,
	//|	Основание.Количество, // ИНАГРО
	|	Основание.Коэффициент,
	|	Основание.Номенклатура,
	|	Основание.Цена,
	|	Основание.Сумма,";
		
	Если ЕстьГоловы Тогда
		ТекстЗапроса = ТекстЗапроса + "Основание.Голов,";
	КонецЕсли;
	
	Если Основание.Метаданные().Реквизиты.Найти("ПрименитьЦенуККоличествуГолов") <> Неопределено И Основание.ПрименитьЦенуККоличествуГолов Тогда
		ТекстЗапроса = ТекстЗапроса + "Основание.Голов КАК Количество,";
	ИначеЕсли Основание.Метаданные().Реквизиты.Найти("РасхождениеКоличества") <> Неопределено И Основание.РасхождениеКоличества Тогда
		ТекстЗапроса = ТекстЗапроса + "Основание.НовоеКоличество КАК Количество,";
	ИначеЕсли Основание.Метаданные().Реквизиты.Найти("ИНАГРО_РасхождениеКоличества") <> Неопределено И Основание.ИНАГРО_РасхождениеКоличества Тогда
		ТекстЗапроса = ТекстЗапроса + "Основание.ИНАГРО_НовоеКоличество КАК Количество,";
	Иначе
		ТекстЗапроса = ТекстЗапроса + "Основание.Количество КАК Количество,";
	КонецЕсли;
	// ИНАГРО--

	Если ЕстьСкидки Тогда
		ТекстЗапроса = ТекстЗапроса +"
	|	Основание.СуммаСкидки,
	|	Основание.СуммаБезСкидки,";
	КонецЕсли;
	Если ЕстьВалюта Тогда
		ТекстЗапроса = ТекстЗапроса +"
	|	Основание.Ссылка.ВалютаДокумента КАК ВалютаДокумента,";
	Иначе
		ТекстЗапроса = ТекстЗапроса +"
	|	&Гривна КАК ВалютаДокумента,";
	КонецЕсли;
	Если ЕстьДоговор Тогда
		ТекстЗапроса = ТекстЗапроса +"
	|	ВЫБОР КОГДА Основание.Ссылка.ВалютаДокумента = Основание.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов ТОГДА
	|		Основание.Ссылка.КурсВзаиморасчетов
	|	ИНАЧЕ
	|		1
	|	КОНЕЦ                                           КАК КурсДокумента,
	|	ВЫБОР КОГДА Основание.Ссылка.ВалютаДокумента = Основание.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов ТОГДА
	|		Основание.Ссылка.КратностьВзаиморасчетов
	|	ИНАЧЕ
	|		1
	|	КОНЕЦ                                           КАК КратностьДокумента,"
	Иначе
		Если ЕстьВалюта Тогда
			ТекстЗапроса = ТекстЗапроса +"
	|	Основание.Ссылка.КурсДокумента 					КАК КурсДокумента,
	|	Основание.Ссылка.КратностьДокумента		 		КАК КратностьДокумента,";
		Иначе
	    	ТекстЗапроса = ТекстЗапроса +"
	|	1 					КАК КурсДокумента,
	|	1			 		КАК КратностьДокумента,";
		КонецЕсли;
	КонецЕсли;
	Если ЕстьСтавкаНДС Тогда
		ТекстЗапроса = ТекстЗапроса +"
	|	Основание.СтавкаНДС,
	|	Основание.СуммаНДС,
	|	Основание.Ссылка.СуммаВключаетНДС      КАК СуммаВключаетНДС,";
	Иначе
	    ТекстЗапроса = ТекстЗапроса +"
	|	Основание.Номенклатура.СтавкаНДС	   КАК СтавкаНДС,
	|	Основание.СуммаНДС,
	|	Ложь      							   КАК СуммаВключаетНДС,";
	КонецЕсли;
    ТекстЗапроса = ТекстЗапроса +"
	|	Основание.Ссылка.Дата КАК ДатаОтгрузки
	|ИЗ
	|	Документ."+ВидДокумента+".Товары КАК Основание
	|
	|ГДЕ
	|	  Основание.Ссылка = &ДокументОснование";	
	Если ЕстьСтавкаНДС Тогда
		ТекстЗапроса = ТекстЗапроса +"
	|   И Основание.СтавкаНДС В (&ДопустимыеСтавкиНДС)";
	Иначе
	    ТекстЗапроса = ТекстЗапроса +"
	|   И Основание.Номенклатура.СтавкаНДС В (&ДопустимыеСтавкиНДС)"
	КонецЕсли;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Гривна", ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета());
	
	ДанныеОбъекта = Новый Структура("ВидОперации, ДоговорКонтрагента, ВалютаВзаиморасчетов, НеЯвляетсяРезидентом, Дата, ТипПричиныНевыдачиПокупателю");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, ЭтотОбъект);
	ДанныеОбъекта.ВалютаВзаиморасчетов = ДоговорКонтрагента.ВалютаВзаиморасчетов;
	ДанныеОбъекта.НеЯвляетсяРезидентом = Контрагент.НеЯвляетсяРезидентом;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = Товары.Добавить();
		НоваяСтрока.Номенклатура               = Выборка.Номенклатура;
		НоваяСтрока.ЕдиницаИзмерения           = Выборка.ЕдиницаИзмерения;
		НоваяСтрока.Коэффициент                = Выборка.Коэффициент;
		НоваяСтрока.Количество                 = Выборка.Количество;
				
		Если ЕстьГоловы Тогда // ИНАГРО
			НоваяСтрока.ИНАГРО_Голов = Выборка.Голов;
		КонецЕсли;		

		НоваяСтрока.СтавкаНДС                  = Выборка.СтавкаНДС;

		НоваяСтрока.Сумма = УчетНДСКлиентСервер.ПересчитатьЦенуПриИзмененииФлаговНалогов(
											МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Выборка.Сумма, Выборка.ВалютаДокумента, ВалютаДокумента,
											Выборка.КурсДокумента, ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета()),
											Выборка.КратностьДокумента, ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета())),
											Выборка.СуммаВключаетНДС,
											СуммаВключаетНДС,
											УчетНДС.ПолучитьСтавкуНДС(НоваяСтрока.СтавкаНДС));
											
		Если ЕстьСкидки Тогда
			
			НоваяСтрока.СуммаСкидки = УчетНДСКлиентСервер.ПересчитатьЦенуПриИзмененииФлаговНалогов(
											МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Выборка.СуммаСкидки, Выборка.ВалютаДокумента, ВалютаДокумента,
											Выборка.КурсДокумента, ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета()),
											Выборка.КратностьДокумента, ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета())),
											Выборка.СуммаВключаетНДС,
											СуммаВключаетНДС,
											УчетНДС.ПолучитьСтавкуНДС(НоваяСтрока.СтавкаНДС));
			
		
		КонецЕсли; 											
		
		НоваяСтрока.СуммаБезСкидки = НоваяСтрока.Сумма + НоваяСтрока.СуммаСкидки;
		
		Если НоваяСтрока.Количество <> 0 Тогда
			НоваяСтрока.Цена = НоваяСтрока.СуммаБезСкидки/НоваяСтрока.Количество;
		КонецЕсли;	
		
		НоваяСтрока.СуммаНДС  = УчетНДСКлиентСервер.РассчитатьСуммуНДСсУчетомПогрешности(Выборка.Сумма,
																		 Истина,
																		 СуммаВключаетНДС,
																		 Выборка.СтавкаНДС,
																		 ПогрешностиОкругления);
		
		Документы.НалоговаяНакладная.ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(ДанныеОбъекта, НоваяСтрока, "Товары", Неопределено);
		Документы.НалоговаяНакладная.УстановитьКодУКТВЭДВстрокеТоваров(НоваяСтрока);	
		
	КонецЦикла;

КонецПроцедуры // СкопироватьТовары()

Процедура СкопироватьТоварыИзИзмененияНалоговогоНазначенияЗапасов(Основание)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", Основание);
	Запрос.УстановитьПараметр("Метод",Перечисления.МетодыКорректировкиНалоговогоКредита.НаНалоговыеОбязательства);
	
	// Добавлен запрос по ТЧ ИНАГРО_БА
	ТекстЗапроса =	
	"ВЫБРАТЬ
	|	Основание.Номенклатура КАК Номенклатура,
	|	Основание.Номенклатура.НоменклатураГТД.КодУКТВЭД КАК КодУКТВЭД,
	|	Основание.Номенклатура.НоменклатураГТД.НомерГТД КАК НомерГТД,
	|	Основание.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	Основание.Коэффициент КАК Коэффициент,
	|	Основание.Количество КАК Количество,
	|	Основание.СуммаНДС КАК СуммаНДС,
	|	Основание.СтавкаНДС КАК СтавкаНДС,
	|	Основание.Ссылка.Дата КАК ДатаОтгрузки
	|ИЗ
	|	Документ.ИзменениеНалоговогоНазначенияЗапасов.Товары КАК Основание
	|ГДЕ
	|	Основание.Ссылка = &ДокументОснование
	|	И Основание.СуммаНДС > 0
	|	И Основание.МетодКорректировкиНалоговогоКредита = &Метод
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Основание.Номенклатура,
	|	Основание.Номенклатура.НоменклатураГТД.КодУКТВЭД,
	|	Основание.Номенклатура.НоменклатураГТД.НомерГТД,
	|	Основание.ЕдиницаИзмерения,
	|	Основание.Коэффициент,
	|	Основание.Количество,
	|	Основание.СуммаНДС,
	|	Основание.СтавкаНДС,
	|	Основание.Ссылка.Дата
	|ИЗ
	|	Документ.ИзменениеНалоговогоНазначенияЗапасов.ИНАГРО_БА КАК Основание
	|ГДЕ
	|	Основание.Ссылка = &ДокументОснование
	|	И Основание.СуммаНДС > 0
	|	И Основание.МетодКорректировкиНалоговогоКредита = &Метод"; 

	Запрос.Текст = ТекстЗапроса;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ДанныеОбъекта = Новый Структура("ВидОперации, ДоговорКонтрагента, ВалютаВзаиморасчетов, НеЯвляетсяРезидентом, Дата, ТипПричиныНевыдачиПокупателю");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, ЭтотОбъект);
	ДанныеОбъекта.ВалютаВзаиморасчетов = ДоговорКонтрагента.ВалютаВзаиморасчетов;
	ДанныеОбъекта.НеЯвляетсяРезидентом = Контрагент.НеЯвляетсяРезидентом;
	
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = Товары.Добавить();
		НоваяСтрока.Номенклатура = Выборка.Номенклатура;
		Документы.НалоговаяНакладная.УстановитьКодУКТВЭДВстрокеТоваров(НоваяСтрока);
		
		НоваяСтрока.ЕдиницаИзмерения           = Выборка.ЕдиницаИзмерения;
		НоваяСтрока.Коэффициент                = Выборка.Коэффициент;
		
		НоваяСтрока.Количество                 = Выборка.Количество;
		Если НоваяСтрока.Количество = 0  Тогда
			НоваяСтрока.Количество = 1;
		КонецЕсли; 
		
		НоваяСтрока.СтавкаНДС                  = Выборка.СтавкаНДС;
		Если НЕ ЗначениеЗаполнено(НоваяСтрока.СтавкаНДС) Тогда
			НоваяСтрока.СтавкаНДС = Перечисления.СтавкиНДС.НДС20;
		КонецЕсли;

		НоваяСтрока.СуммаНДС 				   = Выборка.СуммаНДС;
		СуммаБезНДС = Окр(НоваяСтрока.СуммаНДС*100/УчетНДС.ПолучитьСтавкуНДС(НоваяСтрока.СтавкаНДС), 2);
		
		НоваяСтрока.Сумма = СуммаБезНДС + ?(СуммаВключаетНДС, НоваяСтрока.СуммаНДС, 0);
		НоваяСтрока.СуммаБезСкидки = НоваяСтрока.Сумма;
		НоваяСтрока.Цена = НоваяСтрока.Сумма/НоваяСтрока.Количество;
			
		Документы.НалоговаяНакладная.ЗаполнитьСтатьюДекларацииНДСНалоговыеОбязательства(ДанныеОбъекта, НоваяСтрока, "Товары", Неопределено);
			
	КонецЦикла;

КонецПроцедуры

Процедура СкопироватьТоварыИзИзменениеНалоговогоНазначенияТЗР(Основание)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", Основание);
	Запрос.УстановитьПараметр("Метод",Перечисления.МетодыКорректировкиНалоговогоКредита.НаНалоговыеОбязательства);
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|   ""Умовне постачання ТЗВ"" КАК Затрата,
	|	Основание.СуммаНДС,
	|	Основание.СтавкаНДС,
	|	Основание.Ссылка.Дата КАК ДатаОтгрузки
	|ИЗ
	|	Документ.ИзменениеНалоговогоНазначенияТЗР.Затраты КАК Основание
	|
	|ГДЕ
	|	  Основание.Ссылка = &ДокументОснование
	|   И Основание.СуммаНДС > 0
	|	И Основание.МетодКорректировкиНалоговогоКредита = &Метод 
	|";

	Запрос.Текст = ТекстЗапроса;
	
	Товар = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("НоменклатураДляЗаполненияНалоговыхНакладных");	
	Если НЕ ЗначениеЗаполнено(Товар) Тогда
		Сообщить(НСтр("ru='Для пользователя не указано значение ""Номенклатура для автоматического заполнения налоговых накладных"" в индивидуальных настройках!';uk='Для користувача не вказане значення ""Номенклатура для автоматичного заповнення податкових накладних"" в індивідуальних настройках!'"), СтатусСообщения.Важное);
	КонецЕсли; 
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ДанныеОбъекта = Новый Структура("ВидОперации, ДоговорКонтрагента, ВалютаВзаиморасчетов, НеЯвляетсяРезидентом, Дата, ТипПричиныНевыдачиПокупателю");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, ЭтотОбъект);
	ДанныеОбъекта.ВалютаВзаиморасчетов = ДоговорКонтрагента.ВалютаВзаиморасчетов;
	ДанныеОбъекта.НеЯвляетсяРезидентом = Контрагент.НеЯвляетсяРезидентом;
	
	Пока Выборка.Следующий() Цикл
		
		НоваяСтрока = Услуги.Добавить();
		
		НоваяСтрока.Номенклатура               = Товар;
		НоваяСтрока.Содержание                 = Выборка.Затрата;
		НоваяСтрока.Количество				   = 1;
		
		НоваяСтрока.СтавкаНДС                  = Выборка.СтавкаНДС;
		Если НЕ ЗначениеЗаполнено(НоваяСтрока.СтавкаНДС) Тогда
			НоваяСтрока.СтавкаНДС = Перечисления.СтавкиНДС.НДС20;
		КонецЕсли;

		НоваяСтрока.СуммаНДС 				   = Выборка.СуммаНДС;
		СуммаБезНДС = Окр(НоваяСтрока.СуммаНДС*100/УчетНДС.ПолучитьСтавкуНДС(НоваяСтрока.СтавкаНДС), 2);
		
		НоваяСтрока.Сумма = СуммаБезНДС + ?(СуммаВключаетНДС, НоваяСтрока.СуммаНДС, 0);
		НоваяСтрока.СуммаБезСкидки = НоваяСтрока.Сумма;
		НоваяСтрока.Цена = НоваяСтрока.Сумма/НоваяСтрока.Количество;
			
		Документы.НалоговаяНакладная.ЗаполнитьСтатьюДекларацииНДСНалоговыеОбязательства(ДанныеОбъекта, НоваяСтрока, "Услуги", Неопределено);
			
	КонецЦикла;

КонецПроцедуры

Процедура СкопироватьТоварыИзИзмененияНалоговогоНазначенияОС(Основание)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", Основание);
	Запрос.УстановитьПараметр("Метод",Перечисления.МетодыКорректировкиНалоговогоКредита.НаНалоговыеОбязательства);
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Основание.ОсновноеСредство,
	|	Основание.СуммаНДС,
	|	Основание.СтавкаНДС,
	|	Основание.Ссылка.Дата КАК ДатаОтгрузки
	|ИЗ
	|	Документ.ИзменениеНалоговогоНазначенияОС.ОС КАК Основание
	|
	|ГДЕ
	|	  Основание.Ссылка = &ДокументОснование
	|   И Основание.СуммаНДС > 0
	|	И Основание.МетодКорректировкиНалоговогоКредита = &Метод 
	|";

	Запрос.Текст = ТекстЗапроса;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ДанныеОбъекта = Новый Структура("ВидОперации, ДоговорКонтрагента, ВалютаВзаиморасчетов, НеЯвляетсяРезидентом, Дата, ТипПричиныНевыдачиПокупателю");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, ЭтотОбъект);
	ДанныеОбъекта.ВалютаВзаиморасчетов = ДоговорКонтрагента.ВалютаВзаиморасчетов;
	ДанныеОбъекта.НеЯвляетсяРезидентом = Контрагент.НеЯвляетсяРезидентом;
	
	Пока Выборка.Следующий() Цикл
		
		НоваяСтрока = ОС.Добавить();
		НоваяСтрока.ОсновноеСредство		   = Выборка.ОсновноеСредство;

		НоваяСтрока.СтавкаНДС                  = Выборка.СтавкаНДС;
		Если НЕ ЗначениеЗаполнено(НоваяСтрока.СтавкаНДС) Тогда
			НоваяСтрока.СтавкаНДС = Перечисления.СтавкиНДС.НДС20;
		КонецЕсли;

		НоваяСтрока.СуммаНДС 				   = Выборка.СуммаНДС;
		СуммаБезНДС = Окр(НоваяСтрока.СуммаНДС*100/УчетНДС.ПолучитьСтавкуНДС(НоваяСтрока.СтавкаНДС), 2);
		
		НоваяСтрока.Сумма = СуммаБезНДС + ?(СуммаВключаетНДС, НоваяСтрока.СуммаНДС, 0);
			
		Документы.НалоговаяНакладная.ЗаполнитьСтатьюДекларацииНДСНалоговыеОбязательства(ДанныеОбъекта, НоваяСтрока, "ОС", Неопределено);
			
	КонецЦикла;

КонецПроцедуры

Процедура СкопироватьВозвратнуюТару(Основание = Неопределено) Экспорт
		
	Если Основание = Неопределено Тогда
		Основание = ДокументОснование;
	КонецЕсли;
	
	Если Основание.Метаданные().ТабличныеЧасти.Найти("ВозвратнаяТара") = Неопределено Тогда
		// нет такой табличной части
		Возврат
	КонецЕсли;
	
	ВидДокумента = Основание.Метаданные().Имя;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", Основание);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Основание.Количество,
	|	Основание.Номенклатура,
	|	Основание.Сумма,
	|	Основание.Цена,
	|	Основание.Ссылка.ВалютаДокумента	КАК ВалютаДокумента,
	|	ВЫБОР КОГДА Основание.Ссылка.ВалютаДокумента = Основание.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов ТОГДА
	|		Основание.Ссылка.КурсВзаиморасчетов
	|	ИНАЧЕ
	|		1
	|	КОНЕЦ                                           КАК КурсДокумента,
	|	ВЫБОР КОГДА Основание.Ссылка.ВалютаДокумента = Основание.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов ТОГДА
	|		Основание.Ссылка.КратностьВзаиморасчетов
	|	ИНАЧЕ
	|		1
	|	КОНЕЦ                                           КАК КратностьДокумента
	|ИЗ
	|	Документ."+ВидДокумента+".ВозвратнаяТара КАК Основание
	|
	|ГДЕ
	|	Основание.Ссылка = &ДокументОснование
	|";

	Запрос.Текст = ТекстЗапроса;
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл

		НоваяСтрока = ВозвратнаяТара.Добавить();
		НоваяСтрока.Номенклатура = Выборка.Номенклатура;
		НоваяСтрока.Количество   = Выборка.Количество;
		НоваяСтрока.Цена  = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Выборка.Цена, Выборка.ВалютаДокумента, ВалютаДокумента, Выборка.КурсДокумента, ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета()),
							Выборка.КратностьДокумента, ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета()));
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(НоваяСтрока);
		
	КонецЦикла;

КонецПроцедуры // СкопироватьВозвратнуюТару()

Процедура СкопироватьУслуги(Основание = Неопределено) Экспорт
	
	Если Основание = Неопределено Тогда
		Основание = ДокументОснование;
	КонецЕсли;

	Если Основание.Метаданные().ТабличныеЧасти.Найти("Услуги") = Неопределено Тогда
		// нет такой табличной части
		Возврат
	КонецЕсли;
	
	ЭтоРаботыОтНерезидента = (ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.РаботыОтНерезидента);
	ЕстьСодержаниеУслуги = Основание.Метаданные().ТабличныеЧасти.Услуги.Реквизиты.Найти("Содержание")   <> Неопределено; 
	ЕстьСкидки 	 		 = Основание.Метаданные().ТабличныеЧасти.Услуги.Реквизиты.Найти("СуммаСкидки") <> Неопределено; 
	
	ПогрешностиОкругления = Новый Соответствие;
	ВидДокумента = Основание.Метаданные().Имя;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", Основание);
	Запрос.УстановитьПараметр("ДопустимыеСтавкиНДС", Документы.НалоговаяНакладная.ОпределитьДопустимыеСтавкиНДС(ЭтотОбъект));
	Запрос.УстановитьПараметр("ВалютаРеглУчета", 	ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета());
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Основание.Количество,
	|	Основание.Номенклатура,
	|	Основание.Цена,
	|	Основание.Сумма,";
	Если ЕстьСкидки Тогда
		ТекстЗапроса = ТекстЗапроса +"
	|	Основание.СуммаСкидки,
	|	Основание.СуммаБезСкидки,";
	КонецЕсли;
	Если ЕстьСодержаниеУслуги Тогда
		ТекстЗапроса = ТекстЗапроса +"
	|	ВЫРАЗИТЬ(Основание.Содержание КАК СТРОКА(1000)) КАК Содержание,";
	Иначе
		ТекстЗапроса = ТекстЗапроса +"
	|	Основание.Номенклатура.Представление КАК Содержание,";
	КонецЕсли;
	ТекстЗапроса = ТекстЗапроса +"
	|	Основание.Ссылка.ВалютаДокумента КАК ВалютаДокумента,
	|	ВЫБОР КОГДА Основание.Ссылка.ВалютаДокумента = Основание.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов ТОГДА
	|		Основание.Ссылка.КурсВзаиморасчетов
	|	ИНАЧЕ
	|		1
	|	КОНЕЦ                                           КАК КурсДокумента,
	|	ВЫБОР КОГДА Основание.Ссылка.ВалютаДокумента = Основание.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов ТОГДА
	|		Основание.Ссылка.КратностьВзаиморасчетов
	|	ИНАЧЕ
	|		1
	|	КОНЕЦ                                           КАК КратностьДокумента,
	|	Основание.СтавкаНДС,
	|	Основание.СуммаНДС,";
	Если ЭтоРаботыОтНерезидента Тогда
		// НДС на стоимость услуг начисляется исходя из их стоимости.
		// Документ поступления не должен учитывать НДС.
		ТекстЗапроса = ТекстЗапроса +"
	|	ЛОЖЬ КАК СуммаВключаетНДС,";
	Иначе
		ТекстЗапроса = ТекстЗапроса +"
	|	Основание.Ссылка.СуммаВключаетНДС      КАК СуммаВключаетНДС,";
	КонецЕсли;
	ТекстЗапроса = ТекстЗапроса +"
	|	Основание.Ссылка.Дата			       КАК ДатаОтгрузки
	|ИЗ
	|	Документ."+ВидДокумента+".Услуги КАК Основание
	|
	|ГДЕ
	|	Основание.Ссылка = &ДокументОснование";
	Если НЕ ЭтоРаботыОтНерезидента Тогда
		ТекстЗапроса = ТекстЗапроса +"
	|   И Основание.СтавкаНДС В (&ДопустимыеСтавкиНДС)";
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	
	ДанныеОбъекта = Новый Структура("ВидОперации, ДоговорКонтрагента, ВалютаВзаиморасчетов, НеЯвляетсяРезидентом, Дата, ТипПричиныНевыдачиПокупателю");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, ЭтотОбъект);
	ДанныеОбъекта.ВалютаВзаиморасчетов = ДоговорКонтрагента.ВалютаВзаиморасчетов;
	ДанныеОбъекта.НеЯвляетсяРезидентом = Контрагент.НеЯвляетсяРезидентом;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НоваяСтрока = Услуги.Добавить();
		НоваяСтрока.Номенклатура               = Выборка.Номенклатура;
		НоваяСтрока.Содержание                 = Выборка.Содержание;
		НоваяСтрока.Количество                 = Выборка.Количество;

		Если ЭтоРаботыОтНерезидента Тогда
			НоваяСтрока.СтавкаНДС = Выборка.Номенклатура.СтавкаНДС;
		Иначе
			НоваяСтрока.СтавкаНДС = Выборка.СтавкаНДС;
		КонецЕсли;

		НоваяСтрока.Сумма = УчетНДСКлиентСервер.ПересчитатьЦенуПриИзмененииФлаговНалогов(
										МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Выборка.Сумма, Выборка.ВалютаДокумента, ВалютаДокумента,
										Выборка.КурсДокумента, ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета()),
										Выборка.КратностьДокумента, ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета())),
										Выборка.СуммаВключаетНДС,
										СуммаВключаетНДС,
										УчетНДС.ПолучитьСтавкуНДС(НоваяСтрока.СтавкаНДС));
										
										
		Если ЕстьСкидки Тогда
		
			НоваяСтрока.СуммаСкидки = УчетНДСКлиентСервер.ПересчитатьЦенуПриИзмененииФлаговНалогов(
											МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Выборка.СуммаСкидки, Выборка.ВалютаДокумента, ВалютаДокумента,
											Выборка.КурсДокумента, ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета()),
											Выборка.КратностьДокумента, ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета())),
											Выборка.СуммаВключаетНДС,
											СуммаВключаетНДС,
											УчетНДС.ПолучитьСтавкуНДС(НоваяСтрока.СтавкаНДС));
		
		КонецЕсли; 								
		
		НоваяСтрока.СуммаБезСкидки = НоваяСтрока.Сумма + НоваяСтрока.СуммаСкидки;
		
		Если НоваяСтрока.Количество <> 0 Тогда
			НоваяСтрока.Цена = НоваяСтрока.СуммаБезСкидки/НоваяСтрока.Количество;
		КонецЕсли;	
		
		Если ЭтоРаботыОтНерезидента Тогда
			НоваяСтрока.СуммаНДС = УчетНДСКлиентСервер.РассчитатьСуммуНДСсУчетомПогрешности(НоваяСтрока.Сумма,
																		Истина,
																		СуммаВключаетНДС,
																		НоваяСтрока.СтавкаНДС,
																		ПогрешностиОкругления);
		Иначе	
			НоваяСтрока.СуммаНДС = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Выборка.СуммаНДС, Выборка.ВалютаДокумента, ВалютаДокумента,
															  Выборка.КурсДокумента, ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета()),
															  Выборка.КратностьДокумента, ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета()));
		КонецЕсли;
		
		
		Документы.НалоговаяНакладная.ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(ДанныеОбъекта, НоваяСтрока, "Услуги", Неопределено);
		
		Документы.НалоговаяНакладная.УстановитьКодУКТВЭДВстрокеТоваров(НоваяСтрока);
		
	КонецЦикла;

	
КонецПроцедуры // СкопироватьУслуги()

Процедура СкопироватьОС(Основание = Неопределено) Экспорт
	
	Если Основание = Неопределено Тогда
		Основание = ДокументОснование;
	КонецЕсли;
	
	Если Основание.Метаданные().ТабличныеЧасти.Найти("ОС") = Неопределено Тогда
		// нет такой табличной части
		Возврат
	КонецЕсли;
	
	
	ВидДокумента = Основание.Метаданные().Имя;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", Основание);
	Запрос.УстановитьПараметр("ДопустимыеСтавкиНДС", Документы.НалоговаяНакладная.ОпределитьДопустимыеСтавкиНДС(ЭтотОбъект));
	Запрос.УстановитьПараметр("ВалютаРеглУчета", 	ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета());
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Основание.ОсновноеСредство,";
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ИзменениеНалоговогоНазначенияОС") Тогда
	ТекстЗапроса = ТекстЗапроса +"
	|	&ВалютаРеглУчета 	КАК ВалютаДокумента,
	|	1 					КАК КурсДокумента,
	|	1					КАК КратностьДокумента,";
	Иначе
	ТекстЗапроса = ТекстЗапроса +"
	|	Основание.Ссылка.ВалютаДокумента 	   КАК ВалютаДокумента,
	|	ВЫБОР КОГДА Основание.Ссылка.ВалютаДокумента = Основание.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов ТОГДА
	|		Основание.Ссылка.КурсВзаиморасчетов
	|	ИНАЧЕ
	|		1
	|	КОНЕЦ                                  КАК КурсДокумента,
	|	ВЫБОР КОГДА Основание.Ссылка.ВалютаДокумента = Основание.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов ТОГДА
	|		Основание.Ссылка.КратностьВзаиморасчетов
	|	ИНАЧЕ
	|		1
	|	КОНЕЦ                                  КАК КратностьДокумента,";
	КонецЕсли; 
	
	ТекстЗапроса = ТекстЗапроса +"
	|	Основание.Сумма,
	|	Основание.СтавкаНДС,
	|	Основание.СуммаНДС,
	|	Основание.Ссылка.Дата			       КАК ДатаОтгрузки,
	|	Основание.Ссылка.СуммаВключаетНДС      КАК СуммаВключаетНДС
	|ИЗ
	|	Документ."+ВидДокумента+".ОС 	   КАК Основание
	|
	|ГДЕ
	|	Основание.Ссылка = &ДокументОснование
	|   И Основание.СтавкаНДС В (&ДопустимыеСтавкиНДС)
	|";
	
	Запрос.Текст = ТекстЗапроса;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ДанныеОбъекта = Новый Структура("ВидОперации, ДоговорКонтрагента, ВалютаВзаиморасчетов, НеЯвляетсяРезидентом, Дата, ТипПричиныНевыдачиПокупателю");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, ЭтотОбъект);
	ДанныеОбъекта.ВалютаВзаиморасчетов = ДоговорКонтрагента.ВалютаВзаиморасчетов;
	ДанныеОбъекта.НеЯвляетсяРезидентом = Контрагент.НеЯвляетсяРезидентом;
	
	Пока Выборка.Следующий() Цикл
		
		НоваяСтрока = ОС.Добавить();
		НоваяСтрока.ОсновноеСредство           = Выборка.ОсновноеСредство;
		НоваяСтрока.СтавкаНДС                  = Выборка.СтавкаНДС;

		НоваяСтрока.Сумма = УчетНДСКлиентСервер.ПересчитатьЦенуПриИзмененииФлаговНалогов(
				МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Выборка.Сумма, Выборка.ВалютаДокумента, ВалютаДокумента,
				Выборка.КурсДокумента, ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета()),
				Выборка.КратностьДокумента, ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета())),
				Выборка.СуммаВключаетНДС,
				СуммаВключаетНДС,
				УчетНДС.ПолучитьСтавкуНДС(НоваяСтрока.СтавкаНДС));
				
		НоваяСтрока.СуммаНДС = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Выборка.СуммаНДС, Выборка.ВалютаДокумента, ВалютаДокумента,
														  Выборка.КурсДокумента, ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета()),
														  Выборка.КратностьДокумента, ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета()));
													  
	
		Документы.НалоговаяНакладная.ЗаполнитьСтатьюДекларацииНДСНалоговыеОбязательства(ДанныеОбъекта, НоваяСтрока, "ОС", Неопределено);
	
	КонецЦикла;
	
КонецПроцедуры // СкопироватьОС()

Процедура СкопироватьНематериальныеАктивы(Основание = Неопределено) Экспорт
	
	Если Основание = Неопределено Тогда
		Основание = ДокументОснование;
	КонецЕсли;

	Если Основание.Метаданные().ТабличныеЧасти.Найти("НМА") = Неопределено Тогда
		// нет такой табличной части
		Возврат
	КонецЕсли;
	
	ВидДокумента = Основание.Метаданные().Имя;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", Основание);
	Запрос.УстановитьПараметр("ДопустимыеСтавкиНДС", Документы.НалоговаяНакладная.ОпределитьДопустимыеСтавкиНДС(ЭтотОбъект));
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Основание.НематериальныйАктив,";
	ТекстЗапроса = ТекстЗапроса +"
	|	Основание.Ссылка.ВалютаДокумента 	   КАК ВалютаДокумента,
	|	ВЫБОР КОГДА Основание.Ссылка.ВалютаДокумента = Основание.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов ТОГДА
	|		Основание.Ссылка.КурсВзаиморасчетов
	|	ИНАЧЕ
	|		1
	|	КОНЕЦ                                  КАК КурсДокумента,
	|	ВЫБОР КОГДА Основание.Ссылка.ВалютаДокумента = Основание.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов ТОГДА
	|		Основание.Ссылка.КратностьВзаиморасчетов
	|	ИНАЧЕ
	|		1
	|	КОНЕЦ                                  КАК КратностьДокумента,
	|	Основание.Сумма,
	|	Основание.СтавкаНДС,
	|	Основание.СуммаНДС,
	|	Основание.Ссылка.Дата			       КАК ДатаОтгрузки,
	|	Основание.Ссылка.СуммаВключаетНДС      КАК СуммаВключаетНДС
	|ИЗ
	|	Документ."+ВидДокумента+".НМА 	   КАК Основание
	|
	|ГДЕ
	|	Основание.Ссылка = &ДокументОснование
	|   И Основание.СтавкаНДС В (&ДопустимыеСтавкиНДС)
	|";
	
	Запрос.Текст = ТекстЗапроса;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ДанныеОбъекта = Новый Структура("ВидОперации, ДоговорКонтрагента, ВалютаВзаиморасчетов, НеЯвляетсяРезидентом, Дата, ТипПричиныНевыдачиПокупателю");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, ЭтотОбъект);
	ДанныеОбъекта.ВалютаВзаиморасчетов = ДоговорКонтрагента.ВалютаВзаиморасчетов;
	ДанныеОбъекта.НеЯвляетсяРезидентом = Контрагент.НеЯвляетсяРезидентом;
	
	Пока Выборка.Следующий() Цикл
		
		НоваяСтрока = НМА.Добавить();
		НоваяСтрока.НематериальныйАктив        = Выборка.НематериальныйАктив;
		НоваяСтрока.СтавкаНДС                  = Выборка.СтавкаНДС;

		НоваяСтрока.Сумма = УчетНДСКлиентСервер.ПересчитатьЦенуПриИзмененииФлаговНалогов(
				МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Выборка.Сумма, Выборка.ВалютаДокумента, ВалютаДокумента,
				Выборка.КурсДокумента, ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета()),
				Выборка.КратностьДокумента, ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета())),
				Выборка.СуммаВключаетНДС,
				СуммаВключаетНДС,
				УчетНДС.ПолучитьСтавкуНДС(НоваяСтрока.СтавкаНДС));
				
		НоваяСтрока.СуммаНДС = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Выборка.СуммаНДС, Выборка.ВалютаДокумента, ВалютаДокумента,
														  Выборка.КурсДокумента, ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета()),
														  Выборка.КратностьДокумента, ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета()));
													  
		
		Документы.НалоговаяНакладная.ЗаполнитьСтатьюДекларацииНДСНалоговыеОбязательства(ДанныеОбъекта, НоваяСтрока, "НМА", Неопределено);
	
	КонецЦикла;
	
КонецПроцедуры // СкопироватьНематериальныеАктивы()

Процедура СкопироватьУслугуПоКомиссии(Основание = Неопределено) Экспорт
		
		Если Основание = Неопределено Тогда
			Основание = ДокументОснование;
		КонецЕсли;
		
		Если НЕ ТипЗнч(Основание) = Тип("ДокументСсылка.ОтчетКомитентуОПродажах") Тогда
			Возврат;
		КонецЕсли; 
	
		СтрокаУслуг = Услуги.Добавить();
		
		СтрокаУслуг.Номенклатура = Основание.УслугаПоВознаграждению;
		СтрокаУслуг.Содержание 	 = Основание.УслугаПоВознаграждению.НаименованиеПолное;
		
		СтрокаУслуг.Количество 		= 1;
		СтрокаУслуг.СтавкаНДС  		= Основание.СтавкаНДСВознаграждения;
		
		СтрокаУслуг.Цена 			= УчетНДСКлиентСервер.ПересчитатьЦенуПриИзмененииФлаговНалогов(
												МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Основание.Товары.Итог("СуммаВознаграждения"), Основание.ВалютаДокумента, ВалютаДокумента,
																		   Основание.КурсВзаиморасчетов, ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета()),
																		   Основание.КратностьВзаиморасчетов, ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета())),
												Основание.СуммаВключаетНДС,
												СуммаВключаетНДС,
												УчетНДС.ПолучитьСтавкуНДС(СтрокаУслуг.СтавкаНДС));

		
		СтрокаУслуг.Сумма 			= СтрокаУслуг.Цена;
		СтрокаУслуг.СуммаБезСкидки	= СтрокаУслуг.Цена;
		СтрокаУслуг.СуммаНДС 		= МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Основание.Товары.Итог("СуммаНДСВознаграждения"), Основание.ВалютаДокумента, ВалютаДокумента,
																 Основание.КурсВзаиморасчетов, ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета()),
																 Основание.КратностьВзаиморасчетов, ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета()));
											  
		ДанныеОбъекта = Новый Структура("ВидОперации, ДоговорКонтрагента, ВалютаВзаиморасчетов, НеЯвляетсяРезидентом, Дата, ТипПричиныНевыдачиПокупателю");
		ЗаполнитьЗначенияСвойств(ДанныеОбъекта, ЭтотОбъект);
		ДанныеОбъекта.ВалютаВзаиморасчетов = ДоговорКонтрагента.ВалютаВзаиморасчетов;
		ДанныеОбъекта.НеЯвляетсяРезидентом = Контрагент.НеЯвляетсяРезидентом;

		Документы.НалоговаяНакладная.ЗаполнитьСтатьюДекларацииНДСНалоговыеОбязательства(ДанныеОбъекта, СтрокаУслуг, "Услуги", Неопределено);
		
		Документы.НалоговаяНакладная.УстановитьКодУКТВЭДВстрокеТоваров(СтрокаУслуг);
		
КонецПроцедуры

Процедура СкопироватьУслугиКомиссииОтНерезидента(Основание = Неопределено) Экспорт
	
	Если Основание = Неопределено Тогда
		Основание = ДокументОснование;
	КонецЕсли;

	Если НЕ ТипЗнч(Основание) = Тип("ДокументСсылка.ОтчетКомиссионераОПродажах") Тогда
		// эта процедура работет только с документом  ОтчетКомиссионераОПродажах
		Возврат
	КонецЕсли;
	
	ПогрешностиОкругления = Новый Соответствие;
	ВидДокумента = Основание.Метаданные().Имя;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", Основание);
	Запрос.УстановитьПараметр("ВалютаРеглУчета", 	ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета());
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Основание.Номенклатура,
	|	1 КАК Количество,
	|	Основание.СуммаВознаграждения КАК Цена,
	|	Основание.СуммаВознаграждения КАК Сумма,
	|	""Продажа "" + ВЫРАЗИТЬ(Основание.Номенклатура.Наименование КАК СТРОКА(1000)) КАК Содержание,
	|	Основание.Ссылка.ВалютаДокумента КАК ВалютаДокумента,
	|	ВЫБОР КОГДА Основание.Ссылка.ВалютаДокумента = Основание.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов ТОГДА
	|		Основание.Ссылка.КурсВзаиморасчетов
	|	ИНАЧЕ
	|		1
	|	КОНЕЦ  КАК КурсДокумента,
	|	ВЫБОР КОГДА Основание.Ссылка.ВалютаДокумента = Основание.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов ТОГДА
	|		Основание.Ссылка.КратностьВзаиморасчетов
	|	ИНАЧЕ
	|		1
	|	КОНЕЦ КАК КратностьДокумента,
	|	ЛОЖЬ  КАК СуммаВключаетНДС,
	|	Основание.Ссылка.Дата КАК ДатаОтгрузки
	|ИЗ
	|	Документ."+ВидДокумента+".Товары КАК Основание
	|
	|ГДЕ
	|	Основание.Ссылка = &ДокументОснование";
	
	Запрос.Текст = ТекстЗапроса;
	
	Товар = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("НоменклатураДляЗаполненияНалоговыхНакладных");	
	Если НЕ ЗначениеЗаполнено(Товар) Тогда
		Сообщить(НСтр("ru='Для пользователя не указано значение ""Номенклатура для автоматического заполнения налоговых накладных"" в индивидуальных настройках!';uk='Для користувача не вказане значення ""Номенклатура для автоматичного заповнення податкових накладних"" в індивідуальних настройках!'"), СтатусСообщения.Важное);
	КонецЕсли; 
	
	ДанныеОбъекта = Новый Структура("ВидОперации, ДоговорКонтрагента, ВалютаВзаиморасчетов, НеЯвляетсяРезидентом, Дата, ТипПричиныНевыдачиПокупателю");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, ЭтотОбъект);
	ДанныеОбъекта.ВалютаВзаиморасчетов = ДоговорКонтрагента.ВалютаВзаиморасчетов;
	ДанныеОбъекта.НеЯвляетсяРезидентом = Контрагент.НеЯвляетсяРезидентом;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НоваяСтрока = Услуги.Добавить();
		НоваяСтрока.Номенклатура               = Товар;
		НоваяСтрока.Содержание                 = Выборка.Содержание;
		НоваяСтрока.Количество                 = Выборка.Количество;

		НоваяСтрока.СтавкаНДС = Перечисления.СтавкиНДС.НДС20;

		НоваяСтрока.Сумма = УчетНДСКлиентСервер.ПересчитатьЦенуПриИзмененииФлаговНалогов(
										МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Выборка.Сумма, Выборка.ВалютаДокумента, ВалютаДокумента,
										Выборка.КурсДокумента, ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета()),
										Выборка.КратностьДокумента, ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета())),
										Выборка.СуммаВключаетНДС,
										СуммаВключаетНДС,
										УчетНДС.ПолучитьСтавкуНДС(НоваяСтрока.СтавкаНДС));
										
		НоваяСтрока.СуммаБезСкидки = НоваяСтрока.Сумма;										
		
		ОбработкаТабличныхЧастейКлиентСервер.ПриИзмененииСуммыТабЧасти(НоваяСтрока, Истина);
		
		НоваяСтрока.СуммаНДС = УчетНДСКлиентСервер.РассчитатьСуммуНДСсУчетомПогрешности(НоваяСтрока.Сумма,
																	Истина,
																	СуммаВключаетНДС,
																	НоваяСтрока.СтавкаНДС,
																	ПогрешностиОкругления);
															  
		
		Документы.НалоговаяНакладная.ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(ДанныеОбъекта, НоваяСтрока, "Услуги", Неопределено);
		
		Документы.НалоговаяНакладная.УстановитьКодУКТВЭДВстрокеТоваров(НоваяСтрока);
		
	КонецЦикла;

	
КонецПроцедуры // СкопироватьУслуги()

Процедура ЗаполнитьОСПоСписаниюОС(Основание)
	
	Если Основание.Метаданные().ТабличныеЧасти.Найти("ОС") = Неопределено Тогда
		// странно, нет такой табличной части
		Возврат
	КонецЕсли;
	
	ВидДокумента = Основание.Метаданные().Имя;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", Основание);
	Запрос.УстановитьПараметр("ВалютаРеглУчета", ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета());
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Основание.ОсновноеСредство	КАК ОсновноеСредство,
	|	&ВалютаРеглУчета 			КАК ВалютаДокумента,
	|	1							КАК КурсДокумента,
	|	1							КАК КратностьДокумента,
	|	Основание.СтоимостьБУ - Основание.АмортизацияБУ - Основание.АмортизацияЗаМесяцБУ КАК Сумма,
	|	Основание.Ссылка.Дата		КАК ДатаОтгрузки
	|ИЗ
	|	Документ."+ВидДокумента+".ОС КАК Основание
	|
	|ГДЕ
	|	Основание.Ссылка = &ДокументОснование
	|";
	
	Запрос.Текст = ТекстЗапроса;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ДанныеОбъекта = Новый Структура("ВидОперации, ДоговорКонтрагента, ВалютаВзаиморасчетов, НеЯвляетсяРезидентом, Дата, ТипПричиныНевыдачиПокупателю");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, ЭтотОбъект);
	ДанныеОбъекта.ВалютаВзаиморасчетов = ДоговорКонтрагента.ВалютаВзаиморасчетов;
	ДанныеОбъекта.НеЯвляетсяРезидентом = Контрагент.НеЯвляетсяРезидентом;
	
	Пока Выборка.Следующий() Цикл
		
		НоваяСтрока = ОС.Добавить();
		НоваяСтрока.ОсновноеСредство = Выборка.ОсновноеСредство;
		НоваяСтрока.СтавкаНДС        = Перечисления.СтавкиНДС.НДС20;
		НоваяСтрока.Сумма 			 = УчетНДСКлиентСервер.ПересчитатьЦенуПриИзмененииФлаговНалогов(
											 МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Выборка.Сумма, Выборка.ВалютаДокумента, ВалютаДокумента,
																		Выборка.КурсДокумента, ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета()),
																		Выборка.КратностьДокумента, ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета())),
											Ложь,
											СуммаВключаетНДС,
											УчетНДС.ПолучитьСтавкуНДС(НоваяСтрока.СтавкаНДС));
											
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(НоваяСтрока, СуммаВключаетНДС);
		

		Документы.НалоговаяНакладная.ЗаполнитьСтатьюДекларацииНДСНалоговыеОбязательства(ДанныеОбъекта, НоваяСтрока, "ОС", Неопределено);
	
	КонецЦикла;

КонецПроцедуры

Процедура ЗаполнитьНМАПоСписаниюНМА(Основание)
	
	Если Основание.Метаданные().ТабличныеЧасти.Найти("НМА") = Неопределено Тогда
		// странно, нет такой табличной части
		Возврат
	КонецЕсли;
	
	ВидДокумента = Основание.Метаданные().Имя;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", Основание);
	Запрос.УстановитьПараметр("ВалютаРеглУчета", ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета());
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Основание.НематериальныйАктив	КАК НематериальныйАктив,
	|	&ВалютаРеглУчета 			КАК ВалютаДокумента,
	|	1							КАК КурсДокумента,
	|	1							КАК КратностьДокумента,
	|	Основание.СтоимостьБУ - Основание.АмортизацияБУ - Основание.АмортизацияЗаМесяцБУ КАК Сумма,
	|	Основание.Ссылка.Дата		КАК ДатаОтгрузки
	|ИЗ
	|	Документ."+ВидДокумента+".НМА КАК Основание
	|
	|ГДЕ
	|	Основание.Ссылка = &ДокументОснование
	|";
	
	Запрос.Текст = ТекстЗапроса;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ДанныеОбъекта = Новый Структура("ВидОперации, ДоговорКонтрагента, ВалютаВзаиморасчетов, НеЯвляетсяРезидентом, Дата, ТипПричиныНевыдачиПокупателю");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, ЭтотОбъект);
	ДанныеОбъекта.ВалютаВзаиморасчетов = ДоговорКонтрагента.ВалютаВзаиморасчетов;
	ДанныеОбъекта.НеЯвляетсяРезидентом = Контрагент.НеЯвляетсяРезидентом;
	
	Пока Выборка.Следующий() Цикл
		
		НоваяСтрока = НМА.Добавить();
		НоваяСтрока.НематериальныйАктив = Выборка.НематериальныйАктив;
		НоваяСтрока.СтавкаНДС        = Перечисления.СтавкиНДС.НДС20;
		НоваяСтрока.Сумма 			 = УчетНДСКлиентСервер.ПересчитатьЦенуПриИзмененииФлаговНалогов(
											 МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Выборка.Сумма, Выборка.ВалютаДокумента, ВалютаДокумента,
																		Выборка.КурсДокумента, ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета()),
																		Выборка.КратностьДокумента, ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета())),
											Ложь,
											СуммаВключаетНДС,
											УчетНДС.ПолучитьСтавкуНДС(НоваяСтрока.СтавкаНДС));
											
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(НоваяСтрока, СуммаВключаетНДС);

		Документы.НалоговаяНакладная.ЗаполнитьСтатьюДекларацииНДСНалоговыеОбязательства(ДанныеОбъекта, НоваяСтрока, "НМА", Неопределено);
	
	КонецЦикла;

КонецПроцедуры

Процедура ЗаполнитьТоварыПоСписаниюМалоценныхАктивовИзЭксплуатации(Основание)

	Если Основание.Метаданные().ТабличныеЧасти.Найти("МалоценныеАктивы") = Неопределено Тогда
		// странно нет такой табличной части
		Возврат
	КонецЕсли;
	
	ВидДокумента = Основание.Метаданные().Имя;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", 	Основание);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Основание.Номенклатура,
	|	Основание.Количество,
	|	Основание.ЕдиницаИзмерения КАК ЕдиницаИзмерения,                                   
	|	Основание.Коэффициент  КАК Коэффициент,
	|	Основание.Ссылка.Дата  КАК ДатаОтгрузки
	|ИЗ
	|	Документ."+ВидДокумента+".МалоценныеАктивы КАК Основание
	|
	|ГДЕ
	|	  Основание.Ссылка = &ДокументОснование";
	
	Запрос.Текст = ТекстЗапроса;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ДанныеОбъекта = Новый Структура("ВидОперации, ДоговорКонтрагента, ВалютаВзаиморасчетов, НеЯвляетсяРезидентом, Дата, ТипПричиныНевыдачиПокупателю");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, ЭтотОбъект);
	ДанныеОбъекта.ВалютаВзаиморасчетов = ДоговорКонтрагента.ВалютаВзаиморасчетов;
	ДанныеОбъекта.НеЯвляетсяРезидентом = Контрагент.НеЯвляетсяРезидентом;
	
	Пока Выборка.Следующий() Цикл
		
		НоваяСтрока = Товары.Добавить();
		НоваяСтрока.Номенклатура               = Выборка.Номенклатура;
		НоваяСтрока.ЕдиницаИзмерения           = Выборка.ЕдиницаИзмерения;
		НоваяСтрока.Коэффициент                = Выборка.Коэффициент;
		НоваяСтрока.Количество                 = Выборка.Количество;

		НоваяСтрока.СтавкаНДС                  = НоваяСтрока.Номенклатура.СтавкаНДС;
		Если  НЕ НоваяСтрока.СтавкаНДС = Перечисления.СтавкиНДС.НДС20
			И НЕ НоваяСтрока.СтавкаНДС = Перечисления.СтавкиНДС.НДС14
			И НЕ НоваяСтрока.СтавкаНДС = Перечисления.СтавкиНДС.НДС7
			И НЕ НоваяСтрока.СтавкаНДС = Перечисления.СтавкиНДС.СпецСт8 Тогда // ИНАГРО
		   НоваяСтрока.СтавкаНДС = Перечисления.СтавкиНДС.НДС20;
		КонецЕсли;
		
		
		Документы.НалоговаяНакладная.ЗаполнитьСтатьюДекларацииНДСНалоговыеОбязательства(ДанныеОбъекта, НоваяСтрока, "Товары", Неопределено);
			
	КонецЦикла;	

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА


// Процедура заполняет колонки таблицы товаров, которые будут в дальнейшем использоваться
// для формирования движений  и печати
Процедура ДобавитьКолонкиТоваровРеглЛокально(ТаблицаТоваров, СтруктураШапкиДокумента, ПогрешностиОкругления, ПогрешностиОкругленияПревышение) Экспорт
	
	Если ТаблицаТоваров.Колонки.Найти("ТекстДляПечатиВКолонкеКоличество") = Неопределено Тогда
		ТаблицаТоваров.Колонки.Добавить("ТекстДляПечатиВКолонкеКоличество", ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповСтроки(150));	
		ТаблицаТоваров.ЗаполнитьЗначения("", "ТекстДляПечатиВКолонкеКоличество");	
	КонецЕсли;
	
	// Суммы в документе в валюте документа
	ТаблицаТоваров.Колонки.Добавить("СуммаБезНДСВал"        , ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаТоваров.Колонки.Добавить("СуммаНДСВал"           , ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаТоваров.Колонки.Добавить("СуммаСНДСВал"          , ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповЧисла(15,2));
	
	// Суммы в документе в валюте регл. учета
	ТаблицаТоваров.Колонки.Добавить("СуммаБезНДСРегл"        , ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаТоваров.Колонки.Добавить("СуммаНДСРегл"           , ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаТоваров.Колонки.Добавить("СуммаСНДСРегл"          , ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповЧисла(15,2));
	
	// Суммы в документе в валюте регл. учета
	ТаблицаТоваров.Колонки.Добавить("СуммаБезНДСПревышенияРегл" , ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаТоваров.Колонки.Добавить("СуммаНДСПревышенияРегл"    , ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаТоваров.Колонки.Добавить("СуммаСНДСПревышенияРегл"   , ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповЧисла(15,2));
	
	// Колонки, необходимые для печати документа
	ТаблицаТоваров.Колонки.Добавить("ЦенаМестаБезНДСБезСкидкиРегл", ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповЧисла(18,5));
	ТаблицаТоваров.Колонки.Добавить("СуммаСкидкиБезНДСРегл"   	  , ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаТоваров.Колонки.Добавить("СуммаБезНДСБезСкидкиРегл"	  , ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповЧисла(15,2));	
	
	ТаблицаТоваров.Колонки.Добавить("ЦенаБезНДСРегл", ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповЧисла(18,2));
	
	Для каждого СтрокаТаблицы Из ТаблицаТоваров Цикл
		
		// Рассчитаем суммы в документе в валюте документа
		СтрокаТаблицы.СуммаСНДСВал    = СтрокаТаблицы.Сумма + ?(СуммаВключаетНДС, 0, СтрокаТаблицы.НДС);
		СтрокаТаблицы.СуммаНДСВал     = СтрокаТаблицы.НДС;
		СтрокаТаблицы.СуммаБезНДСВал  = СтрокаТаблицы.СуммаСНДСВал - СтрокаТаблицы.СуммаНДСВал;
		
		// Рассчитаем суммы в документе в валюте регл. учета
		Если СтруктураШапкиДокумента.ВалютаДокумента = СтруктураШапкиДокумента.ВалютаРегламентированногоУчета Тогда
			СтрокаТаблицы.СуммаСНДСРегл = СтрокаТаблицы.СуммаСНДСВал;
			СтрокаТаблицы.СуммаНДСРегл  = СтрокаТаблицы.СуммаНДСВал;
		Иначе
			
			// для услуг от нерезидента - база сумма без НДС, поэтому НДС в строке (в валюте) игнорируем
			Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.РаботыОтНерезидента Тогда
				
				СтрокаТаблицы.СуммаБезНДСРегл = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.СуммаБезНДСВал, 
																СтруктураШапкиДокумента.ВалютаДокумента,
																ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета(), 
																ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета()), 
																1,
																ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета()),
																1,
																, ПогрешностиОкругления, "СуммаБезНДСРегл");			
																
				// НДС строго расчетный, если цены не включат НДС, то НДС из строки игнорируется	
				СтрокаТаблицы.СуммаНДСРегл  = УчетНДСКлиентСервер.РассчитатьСуммуНДСсУчетомПогрешности(СтрокаТаблицы.СуммаБезНДСРегл,
													Истина,
													Ложь,
													СтрокаТаблицы.СтавкаНДС,
													ПогрешностиОкругления);
				
			    СтрокаТаблицы.СуммаСНДСРегл = СтрокаТаблицы.СуммаБезНДСРегл + СтрокаТаблицы.СуммаНДСРегл;
			
			Иначе
				
				СтрокаТаблицы.СуммаСНДСРегл = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.СуммаСНДСВал, 
													СтруктураШапкиДокумента.ВалютаДокумента,
													ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета(), 
													ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета()), 
													1,
													ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета()),
													1,
													, ПогрешностиОкругления, "СуммаСНДСРегл");
											
				// не правильно рассчитывать НДС "от обратного" исходя из суммы СНДС уже пересчитанной в грн
				// правильно - рассчитывать от валютной суммы с учетом округления
				//СтрокаТаблицы.СуммаНДСРегл  = УчетНДСКлиентСервер.РассчитатьСуммуНДСсУчетомПогрешности(СтрокаТаблицы.СуммаСНДСРегл,
				//									СтруктураШапкиДокумента.УчитыватьНДС,
				//									Истина,
				//									СтрокаТаблицы.СтавкаНДС,
				//									ПогрешностиОкругления);
				СтрокаТаблицы.СуммаНДСРегл = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.СуммаНДСВал, 
													СтруктураШапкиДокумента.ВалютаДокумента,
													ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета(), 
													ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета()), 
													1,
													ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета()),
													1,
													, ПогрешностиОкругления, СтрокаТаблицы.СтавкаНДС);
			КонецЕсли;				
				
		КонецЕсли;
		СтрокаТаблицы.СуммаБезНДСРегл = СтрокаТаблицы.СуммаСНДСРегл - СтрокаТаблицы.СуммаНДСРегл;
		
		// Рассчитаем суммы превыешния в документе в валюте регл. учета
		Если СтруктураШапкиДокумента.ВалютаДокумента = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета() Тогда
			СтрокаТаблицы.СуммаСНДСПревышенияРегл = СтрокаТаблицы.СуммаПревышения + СтрокаТаблицы.СуммаНДСПревышения;
			СтрокаТаблицы.СуммаНДСПревышенияРегл = СтрокаТаблицы.СуммаНДСПревышения;
		Иначе
			
			СтрокаТаблицы.СуммаСНДСПревышенияРегл = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.СуммаПревышения + СтрокаТаблицы.СуммаНДСПревышения, 
												СтруктураШапкиДокумента.ВалютаДокумента,
												ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета(), 
												ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета()), 
												1,
												ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета()),
												1,
												, ПогрешностиОкругленияПревышение, "СуммаСНДСРегл");
			
			// не правильно рассчитывать НДС "от обратного" исходя из суммы СНДС уже пересчитанной в грн
			// правильно - рассчитывать от валютной суммы с учетом округления
			//СтрокаТаблицы.СуммаНДСПревышенияРегл  = УчетНДСКлиентСервер.РассчитатьСуммуНДСсУчетомПогрешности(СтрокаТаблицы.СуммаНДСПревышения,
			//									СтруктураШапкиДокумента.УчитыватьНДС,
			//									Истина,
			//									СтрокаТаблицы.СтавкаНДС,
			//									ПогрешностиОкругленияПревышение);
			СтрокаТаблицы.СуммаНДСПревышенияРегл = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.СуммаНДСПревышения, 
												СтруктураШапкиДокумента.ВалютаДокумента,
												ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета(), 
												ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета()), 
												1,
												ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета()),
												1,
												, ПогрешностиОкругленияПревышение, СтрокаТаблицы.СтавкаНДС);
			
		КонецЕсли;
		СтрокаТаблицы.СуммаБезНДСПревышенияРегл = СтрокаТаблицы.СуммаСНДСПревышенияРегл - СтрокаТаблицы.СуммаНДСПревышенияРегл;
		
		Если СтруктураШапкиДокумента.ВалютаДокумента = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета() Тогда

 			СуммаСкидкиБезНДСРегл = УчетНДСКлиентСервер.ПересчитатьЦенуПриИзмененииФлаговНалогов(
																					СтрокаТаблицы.СуммаСкидки,
																					СуммаВключаетНДС,
																					Ложь,
																					УчетНДС.ПолучитьСтавкуНДС(СтрокаТаблицы.СтавкаНДС));
											
		Иначе
											
			СуммаСкидкиБезНДСРегл = УчетНДСКлиентСервер.ПересчитатьЦенуПриИзмененииФлаговНалогов(
																					МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(
																											СтрокаТаблицы.СуммаСкидки, СтруктураШапкиДокумента.ВалютаДокумента,
																											ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета(), 
																											ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета()), 
																											1,
																											ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета()),
																											1,
																											, ПогрешностиОкругления, "СуммаСкидки"),
																					СуммаВключаетНДС,
																					Ложь,
																					УчетНДС.ПолучитьСтавкуНДС(СтрокаТаблицы.СтавкаНДС));
			
		КонецЕсли;											
		
		СтрокаТаблицы.СуммаСкидкиБезНДСРегл = ОбщегоНазначенияРед12.ОкруглитьСУчетомПогрешности(СуммаСкидкиБезНДСРегл, 2, ,ПогрешностиОкругления, "СуммаСкидкиБезНДСРегл");
		
		// Суммы
		СтрокаТаблицы.СуммаБезНДСБезСкидкиРегл 		= СтрокаТаблицы.СуммаБезНДСРегл + СтрокаТаблицы.СуммаСкидкиБезНДСРегл;
		Если  СтруктураШапкиДокумента.ВалютаДокумента = СтруктураШапкиДокумента.ВалютаРегламентированногоУчета 
			И НЕ СтруктураШапкиДокумента.СуммаВключаетНДС Тогда
			СтрокаТаблицы.ЦенаМестаБезНДСБезСкидкиРегл = СтрокаТаблицы.Цена;
		Иначе
			СтрокаТаблицы.ЦенаМестаБезНДСБезСкидкиРегл 	= СтрокаТаблицы.СуммаБезНДСБезСкидкиРегл /?(СтрокаТаблицы.Количество = 0, 1, СтрокаТаблицы.Количество);	 
		КонецЕсли;
		
		Если СтрокаТаблицы.Количество = 0 Тогда
			СтрокаТаблицы.ЦенаБезНДСРегл = СтрокаТаблицы.СуммаБезНДСРегл; 
		Иначе	
			Если     СтруктураШапкиДокумента.ВалютаДокумента = СтруктураШапкиДокумента.ВалютаРегламентированногоУчета 
				И НЕ СтруктураШапкиДокумента.СуммаВключаетНДС
				И    СтрокаТаблицы.СуммаСкидки = 0 Тогда
				СтрокаТаблицы.ЦенаБезНДСРегл = 	СтрокаТаблицы.Цена;
			Иначе	
				СтрокаТаблицы.ЦенаБезНДСРегл = СтрокаТаблицы.СуммаБезНДСРегл / СтрокаТаблицы.Количество; 
			КонецЕсли;
		КонецЕсли;
				
	КонецЦикла;
	
КонецПроцедуры

// По результату запроса по шапке документа формируем движения по регистрам.
//
// Параметры: 
//  РежимПроведения           - режим проведения документа (оперативный или неоперативный),
//  СтруктураШапкиДокумента   - выборка из результата запроса по шапке документа,
//  ТаблицаПоТоварам          - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  ТаблицаПоТаре             - таблица значений, содержащая данные для проведения и проверки ТЧ "Возвратная тара",
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, 
	                          ТаблицаПоТоварам, ТаблицаПоТаре, ТаблицаПоУслугам, ТаблицаПоОС, ТаблицаПоНМА,
							  Отказ, Заголовок)

	ПроводкиПоНДС(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоУслугам, ТаблицаПоТаре, ТаблицаПоОС, ТаблицаПоНМА, Отказ);

	ДвиженияПоРегиструОжидаемыйИПодтвержденныйНДСПродаж(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоТаре, ТаблицаПоУслугам, ТаблицаПоОС, ТаблицаПоНМА, Отказ);
	
	ДвиженияПоРегиструНДСНалоговыеОбязательства(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоТаре, ТаблицаПоУслугам, ТаблицаПоОС, ТаблицаПоНМА, Отказ);
	
						  
КонецПроцедуры // ДвиженияПоРегистрам()

Процедура ПроводкиПоНДС(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоУслугам, ТаблицаПоТаре, ТаблицаПоОС, ТаблицаПоНМА, Отказ)
	
	Если  НЕ ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.ОблагаемыеОперации 
	    И НЕ ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.ИтоговаяРозницаОблагаемыеОперации 
		И НЕ ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.РозницаКонрагентуОблагаемыеОперации
		И НЕ ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.УсловнаяПродажа 
		И НЕ ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.УсловнаяПродажаСписаниеОС
		И НЕ ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.СводнаяНаПревышениеБазыНадЦенойПоставки
		И НЕ ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.РаботыОтНерезидента Тогда
		
		// По необлагаемым и освобожденным от НДС операциям проводки не формируются
		
		Возврат
	КонецЕсли;
	
	ПроводкиБУ = Движения.Хозрасчетный;

	// ТОВАРЫ
	ТаблицаКопия = ТаблицаПоТоварам.Скопировать();
	ТаблицаКопия.Свернуть("СчетУчетаНДС, СтавкаНДС", "СуммаНДСРегл, СуммаНДСПревышенияРегл"); // ИНАГРО
	ТаблицаДвижений = ТаблицаКопия.Скопировать();
	
	// УСЛУГИ
	ТаблицаКопия = ТаблицаПоУслугам.Скопировать();
	ТаблицаКопия.Свернуть("СчетУчетаНДС, СтавкаНДС", "СуммаНДСРегл, СуммаНДСПревышенияРегл"); // ИНАГРО
	ОбщегоНазначенияБПВызовСервера.ЗагрузитьВТаблицуЗначений(ТаблицаКопия, ТаблицаДвижений);
	
	// ОС
	ТаблицаКопия = ТаблицаПоОС.Скопировать();
	ТаблицаКопия.Свернуть("СчетУчетаНДС, СтавкаНДС", "СуммаНДСРегл, СуммаНДСПревышенияРегл"); // ИНАГРО
	ОбщегоНазначенияБПВызовСервера.ЗагрузитьВТаблицуЗначений(ТаблицаКопия, ТаблицаДвижений);
	
	// НМА
	ТаблицаКопия = ТаблицаПоНМА.Скопировать();
	ТаблицаКопия.Свернуть("СчетУчетаНДС, СтавкаНДС", "СуммаНДСРегл, СуммаНДСПревышенияРегл"); // ИНАГРО
	ОбщегоНазначенияБПВызовСервера.ЗагрузитьВТаблицуЗначений(ТаблицаКопия, ТаблицаДвижений);
	
	ТаблицаДвижений.Свернуть("СчетУчетаНДС, СтавкаНДС", "СуммаНДСРегл, СуммаНДСПревышенияРегл"); // ИНАГРО
	
	Если НЕ ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.СводнаяНаПревышениеБазыНадЦенойПоставки Тогда
	
		Для Каждого СтрокаТаблицы Из ТаблицаДвижений Цикл
			
			Если    СтрокаТаблицы.СуммаНДСРегл <> 0 Тогда
				
				Проводка = ПроводкиБУ.Добавить();

				Проводка.Период                     = СтруктураШапкиДокумента.Дата;
				Проводка.Активность                 = Истина;
				Проводка.Организация                = СтруктураШапкиДокумента.Организация;
				Проводка.Сумма                      = СтрокаТаблицы.СуммаНДСРегл;
				Проводка.Содержание                 = НСтр("ru='НДС: налоговое обязательство: налоговая накладная';uk=""ПДВ: податкове зобов'язання: податкова накладна""",Локализация.КодЯзыкаИнформационнойБазы());
				Проводка.НомерЖурнала               = "";

				Если НЕ ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.УсловнаяПродажаСписаниеОС Тогда
					Проводка.СчетДт                     = СтрокаТаблицы.СчетУчетаНДС;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты", СтруктураШапкиДокумента.Контрагент);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Договоры"   , СтруктураШапкиДокумента.ДоговорКонтрагента);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ДокументыРасчетовСКонтрагентами", Документы.НалоговаяНакладная.ОпределитьСделкуЛокально(ЭтотОбъект));

				Иначе
					Проводка.СчетДт                     = СтруктураШапкиДокумента.СчетДт;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтруктураШапкиДокумента.СубконтоДт1);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, СтруктураШапкиДокумента.СубконтоДт2);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, СтруктураШапкиДокумента.СубконтоДт3);
					
					Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыльДо2015 Тогда
						Проводка.НалоговоеНазначениеДт = СтруктураШапкиДокумента.НалоговоеНазначениеДоходовИЗатрат;
						Если НЕ СтруктураШапкиДокумента.НалоговоеНазначениеДоходовИЗатрат = Справочники.НалоговыеНазначенияАктивовИЗатрат.НКУ_НеХозДеятельность Тогда
							Проводка.СуммаНУДт = СтрокаТаблицы.СуммаНДСПревышенияРегл;
						КонецЕсли;
					КонецЕсли;
					
				КонецЕсли;
				
				Проводка.СчетКт                     = СтруктураШапкиДокумента.СчетНДС;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, СтруктураШапкиДокумента.СубконтоКт1);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, СтруктураШапкиДокумента.СубконтоКт2);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3, СтруктураШапкиДокумента.СубконтоКт3);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "СтавкиНДС", СтрокаТаблицы.СтавкаНДС); // ИНАГРО
				
			КонецЕсли;

		КонецЦикла;
	
	КонецЕсли;
	
	// проводки на сумму начисленых обязательств по НДС в связи с продажей по цене ниже обычной
	Если ПродажаНижеОбычнойЦены 
		ИЛИ ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.СводнаяНаПревышениеБазыНадЦенойПоставки
		Тогда
		 ТаблицаДвижений.Свернуть("СтавкаНДС", "СуммаНДСПревышенияРегл"); // ИНАГРО
		 Для каждого СтрокаТаблицы Из ТаблицаДвижений Цикл
			Если  СтрокаТаблицы.СуммаНДСПревышенияРегл <> 0 Тогда
				
				Проводка = ПроводкиБУ.Добавить();

				Проводка.Период                     = СтруктураШапкиДокумента.Дата;
				Проводка.Активность                 = Истина;
				Проводка.Организация                = СтруктураШапкиДокумента.Организация;
				Проводка.Сумма                      = СтрокаТаблицы.СуммаНДСПревышенияРегл;
				Проводка.Содержание                 = НСтр("ru='НДС: налоговое обязательство: продажа ниже ОЦ';uk=""ПДВ: податкове зобов'язання: продаж нижче ЗЦ""",Локализация.КодЯзыкаИнформационнойБазы());
				Проводка.НомерЖурнала               = "";

				Проводка.СчетДт                     = СтруктураШапкиДокумента.СчетДт;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтруктураШапкиДокумента.СубконтоДт1);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, СтруктураШапкиДокумента.СубконтоДт2);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, СтруктураШапкиДокумента.СубконтоДт3);

				Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыльДо2015 Тогда
					Проводка.НалоговоеНазначениеДт = СтруктураШапкиДокумента.НалоговоеНазначениеДоходовИЗатрат;
					Если НЕ СтруктураШапкиДокумента.НалоговоеНазначениеДоходовИЗатрат = Справочники.НалоговыеНазначенияАктивовИЗатрат.НКУ_НеХозДеятельность Тогда
						Проводка.СуммаНУДт = СтрокаТаблицы.СуммаНДСПревышенияРегл;
					КонецЕсли;
				КонецЕсли;
				
				Проводка.СчетКт                     = СтруктураШапкиДокумента.СчетНДС;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, СтруктураШапкиДокумента.СубконтоКт1);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, СтруктураШапкиДокумента.СубконтоКт2);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3, СтруктураШапкиДокумента.СубконтоКт3);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "СтавкиНДС", СтрокаТаблицы.СтавкаНДС); // ИНАГРО
				
			КонецЕсли;
		 КонецЦикла; 
	КонецЕсли;
	
КонецПроцедуры

Процедура ДвиженияПоРегиструОжидаемыйИПодтвержденныйНДСПродаж(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоТаре, ТаблицаПоУслугам, ТаблицаПоОС, ТаблицаПоНМА, Отказ)

	Если  ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.УсловнаяПродажаСписаниеОС
		ИЛИ ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.СводнаяНаПревышениеБазыНадЦенойПоставки
		ИЛИ ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.РаботыОтНерезидента Тогда
		// при данных операциях регистр не двигается
		Возврат;
	КонецЕсли;	
	
	НаборДвижений = Движения.ОжидаемыйИПодтвержденныйНДСПродаж;
	
	// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
	ТаблицаДвижений = НаборДвижений.ВыгрузитьКолонки();
	
	ТаблицаДвиженийТара 	  = ТаблицаДвижений.Скопировать();
	ТаблицаДвиженийОплата 	  = ТаблицаДвижений.Скопировать();
	
	
	// ТОВАРЫ
	ТаблицаКопия = ТаблицаПоТоварам.Скопировать();
	ТаблицаКопия.Свернуть("СтавкаНДС","СуммаБезНДСВал,СуммаНДСВал");
	ТаблицаПродаж = ТаблицаКопия.Скопировать();
	
	// УСЛУГИ
	ТаблицаКопия = ТаблицаПоУслугам.Скопировать();
	ТаблицаКопия.Свернуть("СтавкаНДС","СуммаБезНДСВал,СуммаНДСВал");
	ОбщегоНазначенияБПВызовСервера.ЗагрузитьВТаблицуЗначений(ТаблицаКопия, ТаблицаПродаж);
	
	// ОС
	ТаблицаКопия = ТаблицаПоОС.Скопировать();
	ТаблицаКопия.Свернуть("СтавкаНДС","СуммаБезНДСВал,СуммаНДСВал");
	ОбщегоНазначенияБПВызовСервера.ЗагрузитьВТаблицуЗначений(ТаблицаКопия, ТаблицаПродаж);

	// НМА
	ТаблицаКопия = ТаблицаПоНМА.Скопировать();
	ТаблицаКопия.Свернуть("СтавкаНДС","СуммаБезНДСВал,СуммаНДСВал");
	ОбщегоНазначенияБПВызовСервера.ЗагрузитьВТаблицуЗначений(ТаблицаКопия, ТаблицаПродаж);
	
	ТаблицаПродаж.Свернуть("СтавкаНДС","СуммаБезНДСВал,СуммаНДСВал");
	ТаблицаПродаж.Колонки.СуммаБезНДСВал.Имя = "БазаНДС";
	ТаблицаПродаж.Колонки.СуммаНДСВал   .Имя = "СуммаНДС";
	ОбщегоНазначенияБПВызовСервера.ЗагрузитьВТаблицуЗначений(ТаблицаПродаж, ТаблицаДвижений);
	ТаблицаДвижений.ЗаполнитьЗначения(Организация       , "Организация");
	ТаблицаДвижений.ЗаполнитьЗначения(ДоговорКонтрагента, "ДоговорКонтрагента");
	ТаблицаДвижений.ЗаполнитьЗначения(Документы.НалоговаяНакладная.ОпределитьСделкуЛокально(ЭтотОбъект), "Сделка");	
	
	Если ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.УсловнаяПродажа Тогда
		
		СобытиеНДС = Перечисления.СобытияОжидаемыйИПодтвержденныйНДСПродаж.УсловнаяПродажа;
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.ИтоговаяРозницаОблагаемыеОперации 
		  ИЛИ ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.РозницаКонрагентуОблагаемыеОперации 
		  ИЛИ ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.ИтоговаяРозницаОсвобожденныеОперации 
		  ИЛИ ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.РозницаКонрагентуОсвобожденныеОперации Тогда
		
		СобытиеНДС = Перечисления.СобытияОжидаемыйИПодтвержденныйНДСПродаж.РеализацияРозница;

	Иначе	
		
		СобытиеНДС = Перечисления.СобытияОжидаемыйИПодтвержденныйНДСПродаж.Реализация;
		
	КонецЕсли; 
	ТаблицаДвижений.ЗаполнитьЗначения(СобытиеНДС, "СобытиеНДС");
	
	ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.КодыОперацийОжидаемыйИПодтвержденныйНДСПродаж.ПодтвержденныйНДС, "КодОперации");
	
	// ТАРА
	ТаблицаКопия = ТаблицаПоТаре.Скопировать();
	ТаблицаКопия.Свернуть("СтавкаНДС","СуммаБезНДСВал");
	ТаблицаКопия.Колонки.СуммаБезНДСВал.Имя = "БазаНДС";
	ОбщегоНазначенияБПВызовСервера.ЗагрузитьВТаблицуЗначений(ТаблицаКопия, ТаблицаДвиженийТара);
	ТаблицаДвиженийТара.ЗаполнитьЗначения(Организация       , "Организация");
	ТаблицаДвиженийТара.ЗаполнитьЗначения(ДоговорКонтрагента, "ДоговорКонтрагента");
	ТаблицаДвиженийТара.ЗаполнитьЗначения(Документы.НалоговаяНакладная.ОпределитьСделкуЛокально(ЭтотОбъект), "Сделка");
	ТаблицаДвиженийТара.ЗаполнитьЗначения(Истина            , "ВозвратнаяТара");
	ТаблицаДвиженийТара.ЗаполнитьЗначения(Перечисления.СобытияОжидаемыйИПодтвержденныйНДСПродаж.Реализация, "СобытиеНДС");
	
	ТаблицаДвиженийТара.ЗаполнитьЗначения(Перечисления.КодыОперацийОжидаемыйИПодтвержденныйНДСПродаж.ПодтвержденныйНДС, "КодОперации");

	Если НЕ Отказ И ТаблицаДвижений.Количество() > 0 Тогда
		
		НаборДвижений.мПериод          = Дата;
		НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;
	
		Движения.ОжидаемыйИПодтвержденныйНДСПродаж.ВыполнитьРасход();
		Движения.ОжидаемыйИПодтвержденныйНДСПродаж.Записать();
		
	КонецЕсли;
	
	Если НЕ Отказ И ТаблицаДвиженийТара.Количество() > 0 Тогда
		
		НаборДвижений.мПериод          = Дата;
		НаборДвижений.мТаблицаДвижений = ТаблицаДвиженийТара;
	
		Движения.ОжидаемыйИПодтвержденныйНДСПродаж.ВыполнитьРасход();
		Движения.ОжидаемыйИПодтвержденныйНДСПродаж.Записать();
		
	КонецЕсли;
	
КонецПроцедуры // ДвиженияПоРегиструОжидаемыйИПодтвержденныйНДСПродаж()							  

Процедура ДвиженияПоРегиструНДСНалоговыеОбязательства(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоТаре, ТаблицаПоУслугам, ТаблицаПоОС, ТаблицаПоНМА, Отказ)
			
	НаборДвижений = Движения.НДСНалоговыеОбязательства;
	
	// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
	ТаблицаДвижений = НаборДвижений.ВыгрузитьКолонки();
	
	Если НЕ ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.СводнаяНаПревышениеБазыНадЦенойПоставки Тогда
	
		// ТОВАРЫ
		ТаблицаКопия = ТаблицаПоТоварам.Скопировать();
	    ТаблицаКопия.Свернуть("СтавкаНДС, СтатьяДекларацииНДСНалоговыеОбязательства", "СуммаБезНДСРегл, СуммаНДСРегл");
		ТаблицаКопия.Колонки.СуммаБезНДСРегл.Имя = "БазаНДС";
		ТаблицаКопия.Колонки.СуммаНДСРегл	.Имя = "НДС";
		ОбщегоНазначенияБПВызовСервера.ЗагрузитьВТаблицуЗначений(ТаблицаКопия, ТаблицаДвижений);
		
		// УСЛУГИ
		ТаблицаКопия = ТаблицаПоУслугам.Скопировать();
	    ТаблицаКопия.Свернуть("СтавкаНДС, СтатьяДекларацииНДСНалоговыеОбязательства", "СуммаБезНДСРегл, СуммаНДСРегл");
		ТаблицаКопия.Колонки.СуммаБезНДСРегл.Имя = "БазаНДС";
		ТаблицаКопия.Колонки.СуммаНДСРегл	.Имя = "НДС";
		ОбщегоНазначенияБПВызовСервера.ЗагрузитьВТаблицуЗначений(ТаблицаКопия, ТаблицаДвижений);
		
		// ОС
		ТаблицаКопия = ТаблицаПоОС.Скопировать();
	    ТаблицаКопия.Свернуть("СтавкаНДС, СтатьяДекларацииНДСНалоговыеОбязательства", "СуммаБезНДСРегл, СуммаНДСРегл");
		ТаблицаКопия.Колонки.СуммаБезНДСРегл.Имя = "БазаНДС";
		ТаблицаКопия.Колонки.СуммаНДСРегл	.Имя = "НДС";
		ОбщегоНазначенияБПВызовСервера.ЗагрузитьВТаблицуЗначений(ТаблицаКопия, ТаблицаДвижений);
		
		// НМА
		ТаблицаКопия = ТаблицаПоНМА.Скопировать();
	    ТаблицаКопия.Свернуть("СтавкаНДС, СтатьяДекларацииНДСНалоговыеОбязательства", "СуммаБезНДСРегл, СуммаНДСРегл");
		ТаблицаКопия.Колонки.СуммаБезНДСРегл.Имя = "БазаНДС";
		ТаблицаКопия.Колонки.СуммаНДСРегл	.Имя = "НДС";
		ОбщегоНазначенияБПВызовСервера.ЗагрузитьВТаблицуЗначений(ТаблицаКопия, ТаблицаДвижений);	
	КонецЕсли;
	
	Если ПродажаНижеОбычнойЦены 
		ИЛИ ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.СводнаяНаПревышениеБазыНадЦенойПоставки
		Тогда
		// ТОВАРЫ
		ТаблицаКопия = ТаблицаПоТоварам.Скопировать();
	    ТаблицаКопия.Свернуть("СтавкаНДС, СтатьяДекларацииНДСНалоговыеОбязательства", "СуммаБезНДСПревышенияРегл, СуммаНДСПревышенияРегл");
		ТаблицаКопия.Колонки.СуммаБезНДСПревышенияРегл	.Имя = "БазаНДС";
		ТаблицаКопия.Колонки.СуммаНДСПревышенияРегл		.Имя = "НДС";
		ТаблицаКопия.Колонки.Добавить("ПродажаНижеОбычнойЦены", Новый ОписаниеТипов("Булево"));
		ТаблицаКопия.ЗаполнитьЗначения(Истина,"ПродажаНижеОбычнойЦены");
		ОбщегоНазначенияБПВызовСервера.ЗагрузитьВТаблицуЗначений(ТаблицаКопия, ТаблицаДвижений);
	
		// УСЛУГИ
		ТаблицаКопия = ТаблицаПоУслугам.Скопировать();
	    ТаблицаКопия.Свернуть("СтавкаНДС, СтатьяДекларацииНДСНалоговыеОбязательства", "СуммаБезНДСПревышенияРегл, СуммаНДСПревышенияРегл");
		ТаблицаКопия.Колонки.СуммаБезНДСПревышенияРегл	.Имя = "БазаНДС";
		ТаблицаКопия.Колонки.СуммаНДСПревышенияРегл		.Имя = "НДС";
		ТаблицаКопия.Колонки.Добавить("ПродажаНижеОбычнойЦены", Новый ОписаниеТипов("Булево"));
		ТаблицаКопия.ЗаполнитьЗначения(Истина,"ПродажаНижеОбычнойЦены");
		ОбщегоНазначенияБПВызовСервера.ЗагрузитьВТаблицуЗначений(ТаблицаКопия, ТаблицаДвижений);
		
		// ОС
		ТаблицаКопия = ТаблицаПоОС.Скопировать();
	    ТаблицаКопия.Свернуть("СтавкаНДС, СтатьяДекларацииНДСНалоговыеОбязательства", "СуммаБезНДСПревышенияРегл, СуммаНДСПревышенияРегл");
		ТаблицаКопия.Колонки.СуммаБезНДСПревышенияРегл	.Имя = "БазаНДС";
		ТаблицаКопия.Колонки.СуммаНДСПревышенияРегл		.Имя = "НДС";
		ТаблицаКопия.Колонки.Добавить("ПродажаНижеОбычнойЦены", Новый ОписаниеТипов("Булево"));
		ТаблицаКопия.ЗаполнитьЗначения(Истина,"ПродажаНижеОбычнойЦены");
		ОбщегоНазначенияБПВызовСервера.ЗагрузитьВТаблицуЗначений(ТаблицаКопия, ТаблицаДвижений);
		
		// НМА
		ТаблицаКопия = ТаблицаПоНМА.Скопировать();
	    ТаблицаКопия.Свернуть("СтавкаНДС, СтатьяДекларацииНДСНалоговыеОбязательства", "СуммаБезНДСПревышенияРегл, СуммаНДСПревышенияРегл");
		ТаблицаКопия.Колонки.СуммаБезНДСПревышенияРегл	.Имя = "БазаНДС";
		ТаблицаКопия.Колонки.СуммаНДСПревышенияРегл		.Имя = "НДС";
		ТаблицаКопия.Колонки.Добавить("ПродажаНижеОбычнойЦены", Новый ОписаниеТипов("Булево"));
		ТаблицаКопия.ЗаполнитьЗначения(Истина,"ПродажаНижеОбычнойЦены");
		ОбщегоНазначенияБПВызовСервера.ЗагрузитьВТаблицуЗначений(ТаблицаКопия, ТаблицаДвижений);
	КонецЕсли;	
	
	ТаблицаДвижений.ЗаполнитьЗначения(Организация       , "Организация");
	ТаблицаДвижений.ЗаполнитьЗначения(ДоговорКонтрагента, "ДоговорКонтрагента");
	
	
	Если НЕ Отказ И ТаблицаДвижений.Количество() > 0 Тогда
		
		НаборДвижений.мПериод          = Дата;
		НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;
		
		Движения.НДСНалоговыеОбязательства.ДобавитьДвижение();
	
	КонецЕсли;
	
КонецПроцедуры

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТоварам - результат запроса по табличной части "Товары",
//  СтруктураШапкиДокумента   - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблиица значений.
//
Функция ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента, ПогрешностиОкругления, ПогрешностиОкругленияПревышение)

	ТаблицаТоваров = РезультатЗапросаПоТоварам.Выгрузить();
	
	ДобавитьКолонкиТоваровРеглЛокально(ТаблицаТоваров, СтруктураШапкиДокумента, ПогрешностиОкругления, ПогрешностиОкругленияПревышение);

	Возврат ТаблицаТоваров;

КонецФункции // ПодготовитьТаблицуТоваров()

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТоварам - результат запроса по табличной части "Товары",
//  СтруктураШапкиДокумента   - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблиица значений.
//
Функция ПодготовитьТаблицуУслуг(РезультатЗапросаПоУслугам, СтруктураШапкиДокумента, ПогрешностиОкругления, ПогрешностиОкругленияПревышение)

	ТаблицаПоУслугам = РезультатЗапросаПоУслугам.Выгрузить();
	
	ДобавитьКолонкиТоваровРеглЛокально(ТаблицаПоУслугам, СтруктураШапкиДокумента, ПогрешностиОкругления, ПогрешностиОкругленияПревышение);

	Если ВидОперации = перечисления.ВидыОперацийНалоговаяНакладная.УсловнаяПродажа
		И Дата >= '2015-07-01'
		И Дата < '2016-04-01'
		Тогда
		
		Для каждого Строка Из ТаблицаПоУслугам Цикл
		
			Строка.Количество = 0;	
			Строка.ЦенаБезНДСРегл = 0;
			Строка.ЕдиницаИзмеренияКод = "";
			Строка.ЕдиницаИзмерения = "грн";
		
		КонецЦикла;
	
	КонецЕсли;
	
	Возврат ТаблицаПоУслугам;

КонецФункции // ПодготовитьТаблицуТоваров()

Функция ПодготовитьТаблицуОС(РезультатЗапросаПоОС, СтруктураШапкиДокумента, ПогрешностиОкругления, ПогрешностиОкругленияПревышение)

	ТаблицаПоОС = РезультатЗапросаПоОС.Выгрузить();
	
	ДобавитьКолонкиТоваровРеглЛокально(ТаблицаПоОС, СтруктураШапкиДокумента, ПогрешностиОкругления, ПогрешностиОкругленияПревышение);

	Возврат ТаблицаПоОС;

КонецФункции // ПодготовитьТаблицуОС()

Функция ПодготовитьТаблицуНМА(РезультатЗапросаПоНМА, СтруктураШапкиДокумента, ПогрешностиОкругления, ПогрешностиОкругленияПревышение)

	ТаблицаПоНМА = РезультатЗапросаПоНМА.Выгрузить();
	
	ДобавитьКолонкиТоваровРеглЛокально(ТаблицаПоНМА, СтруктураШапкиДокумента, ПогрешностиОкругления, ПогрешностиОкругленияПревышение);

	Возврат ТаблицаПоНМА;

КонецФункции // ПодготовитьТаблицуНМА()

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТаре  - результат запроса по табличной части "ВозвратнаяТара",
//  СтруктураШапкиДокумента - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблиица значений.
//
Функция ПодготовитьТаблицуТары(РезультатЗапросаПоТаре, СтруктураШапкиДокумента, ПогрешностиОкругления)

	ТаблицаТары = РезультатЗапросаПоТаре.Выгрузить();
	
	ТаблицаТары.Колонки.Добавить("СтавкаНДС", 	  Новый ОписаниеТипов("ПеречислениеСсылка.СтавкиНДС"));
	ТаблицаТары.Колонки.Добавить("СуммаСНДСРегл", ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаТары.Колонки.Добавить("СуммаСНДСВал", ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаТары.Колонки.Добавить("СуммаБезНДСРегл", ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаТары.Колонки.Добавить("СуммаБезНДСВал", ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповЧисла(15,2));
	
	// Надо заполнить новые колонки.
	ТаблицаТары.ЗаполнитьЗначения(Перечисления.СтавкиНДС.НеНДС, "СтавкаНДС");
	
	Для каждого СтрокаТаблицы Из ТаблицаТары Цикл
		
		СтрокаТаблицы.СуммаСНДСВал   = СтрокаТаблицы.Сумма;

		Если СтруктураШапкиДокумента.ВалютаДокумента = СтруктураШапкиДокумента.ВалютаРегламентированногоУчета Тогда
			СтрокаТаблицы.СуммаСНДСРегл = СтрокаТаблицы.Сумма;
		Иначе
			СтрокаТаблицы.СуммаСНДСРегл = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.Сумма, 
												СтруктураШапкиДокумента.ВалютаДокумента,
												СтруктураШапкиДокумента.ВалютаРегламентированногоУчета, 
												ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета()), 
												1,
												ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета()),
												1,
												,ПогрешностиОкругления, "СуммаСНДСРегл");
		КонецЕсли;

		СтрокаТаблицы.СуммаБезНДСРегл = СтрокаТаблицы.СуммаСНДСРегл;
		СтрокаТаблицы.СуммаБезНДСВал  = СтрокаТаблицы.СуммаСНДСВал;
		
	КонецЦикла;
	
	Возврат ТаблицаТары;

КонецФункции // ПодготовитьТаблицуТары()
	
Функция ПодготовитьСтруктуруШапкиДокумента(Отказ, Заголовок = "") Экспорт
	// Дерево значений, содержащее имена необходимых полей в запросе по шапке.
	Перем ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента;

	СтруктураШапкиДокумента = ОбщегоНазначенияРед12.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	
	// Заполним по шапке документа дерево параметров, нужных при проведении.
	ДеревоПолейЗапросаПоШапке      = ОбщегоНазначенияРед12.СформироватьДеревоПолейЗапросаПоШапке();

	ОбщегоНазначенияРед12.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "Организация"                      , "ДоговорОрганизация");
	ОбщегоНазначенияРед12.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "ВидДоговора"                      , "ВидДоговора");		
	ОбщегоНазначенияРед12.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "ВедениеВзаиморасчетов"                   , "ВедениеВзаиморасчетов");
	ОбщегоНазначенияРед12.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "ВедениеВзаиморасчетовНУ"                 , "ВедениеВзаиморасчетовНУ");
	ОбщегоНазначенияРед12.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "СложныйНалоговыйУчет"					   , "СложныйНалоговыйУчет");
	
	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа
	УправлениеЗапасами.СформироватьЗапросПоДеревуПолей(ЭтотОбъект, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета());

	// дополним структуру значением виртуального реквизита
	СтруктураШапкиДокумента.Вставить("ОтражатьВНалоговомУчете", Истина);
	
	Возврат СтруктураШапкиДокумента;
	
КонецФункции

Процедура ПодготовитьТаблицы(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоТаре, ТаблицаПоУслугам, ТаблицаПоОС, ТаблицаПоНМА) Экспорт
	
	
	ПогрешностиОкругления     		= Новый Соответствие;
	ПогрешностиОкругленияПревышение = Новый Соответствие;
	ПогрешностиОкругленияТара 		= Новый Соответствие;

	
	// ТОВАРЫ
	// Получим необходимые для проведения и проверки заполнения данные по табличной части "Товары".
	СтруктураПолей        = Новый Структура();
    СтруктураПростыхПолей = Новый Структура();
	СтруктураСложныхПолей = Новый Структура();
	
	СтруктураПолей.Вставить("Номенклатура"              , "Номенклатура.НаименованиеПолное");
	СтруктураПолей.Вставить("КодУКТВЭД"              	, "КодУКТВЭД");
	СтруктураПолей.Вставить("КодВид"              	    , "КодУКТВЭД.Вид");
	СтруктураПолей.Вставить("КодСХ"              	    , "КодУКТВЭД.КодСХДеятельности");
	
	СтруктураПолей.Вставить("НомерГТД"              	, "НомерГТД.Код");
	СтруктураПолей.Вставить("ДатаГТД"              	    , "НомерГТД.Дата");
	СтруктураПолей.Вставить("ЕдиницаИзмерения"          , "ЕдиницаИзмерения.Наименование");
	СтруктураПолей.Вставить("ЕдиницаИзмеренияКод"          , "ЕдиницаИзмерения.Код");
	СтруктураПолей.Вставить("КодЛьготы"          , "Номенклатура.КодЛьготы");
	СтруктураПолей.Вставить("БланкСтрогогоУчета"		, "Номенклатура.БланкСтрогогоУчета");
	СтруктураПолей.Вставить("Количество"            	, "Количество");	
	СтруктураПолей.Вставить("Цена"                      , "Цена");	
	СтруктураПолей.Вставить("Сумма"                     , "Сумма");
	СтруктураПолей.Вставить("СуммаСкидки"               , "СуммаСкидки");
	СтруктураПолей.Вставить("СтавкаНДС"                 , "СтавкаНДС");
	СтруктураПолей.Вставить("НДС"                       , "СуммаНДС");
	СтруктураПолей.Вставить("ДатаОтгрузкиОплаты"  		, "ДатаОтгрузкиОплаты");
	СтруктураПолей.Вставить("СтатьяДекларацииНДСНалоговыеОбязательства" , "СтатьяДекларацииНДСНалоговыеОбязательства");
	СтруктураПолей.Вставить("СуммаПревышения"           , "СуммаПревышения");
	СтруктураПолей.Вставить("СуммаНДСПревышения"        , "СуммаНДСПревышения");
	СтруктураПолей.Вставить("ТекстДляПечатиВКолонкеКоличество", "Номенклатура.ТекстДляПечатиВКолонкеКоличествоНалоговойНакладной");
	СтруктураПолей.Вставить("СчетУчетаНДС"    	, "Ссылка.СчетУчетаНДС");
	СтруктураПростыхПолей.Вставить("ИмяТЧ"           	, "Товары");
	СтруктураПолей.Вставить("НомерСтрокиТЧ"    			, "НомерСтроки");
	СтруктураПолей.Вставить("НомерСтрокиНН"    			, "НомерСтрокиНН");	
	
	РезультатЗапросаПоТоварам = ОбщегоНазначенияРед12.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураПолей, СтруктураПростыхПолей, СтруктураСложныхПолей);
	
	// Подготовим таблицу товаров для проведения.
	ТаблицаПоТоварам = ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента, ПогрешностиОкругления, ПогрешностиОкругленияПревышение);
	
	Если    ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.ИтоговаяРозницаОблагаемыеОперации 
		ИЛИ ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.ИтоговаяРозницаОсвобожденныеОперации Тогда
		Если Дата < '2015-01-01' Тогда
			ТаблицаПоТоварам.ЗаполнитьЗначения("", "Количество,ЕдиницаИзмерения,ЕдиницаИзмеренияКод, ЦенаМестаБезНДСБезСкидкиРегл");
		КонецЕсли;
	КонецЕсли;

	// УСЛУГИ
	// Получим необходимые для проведения и проверки заполнения данные 
	// по табличной части "Услуги".
	СтруктураПолей        = Новый Структура();
	СтруктураПростыхПолей = Новый Структура();
	СтруктураСложныхПолей = Новый Структура();
	
	СтруктураПолей.Вставить("Номенклатура"              , "Содержание");
	//СтруктураПростыхПолей.Вставить("КодУКТВЭД"  		, "");
	СтруктураПолей.Вставить("КодУКТВЭД"					, "КодУКТВЭД");
	СтруктураПолей.Вставить("КодВид"              	    , "КодУКТВЭД.Вид");
	СтруктураПростыхПолей.Вставить("КодСХ"				, "");
	
	СтруктураПростыхПолей.Вставить("НомерГТД"           , "");
	СтруктураПростыхПолей.Вставить("ДатаГТД"            , "");
	СтруктураПолей.Вставить("ЕдиницаИзмерения"          , "Номенклатура.БазоваяЕдиницаИзмерения.Наименование");
	СтруктураПолей.Вставить("ЕдиницаИзмеренияКод"          , "Номенклатура.БазоваяЕдиницаИзмерения.Код");
	СтруктураПолей.Вставить("КодЛьготы"          		, "Номенклатура.КодЛьготы");
	СтруктураПолей.Вставить("БланкСтрогогоУчета"		, "Номенклатура.БланкСтрогогоУчета");
	СтруктураПолей.Вставить("Количество"            	, "Количество");
	СтруктураПолей.Вставить("Цена"                      , "Цена");		
	СтруктураПолей.Вставить("Сумма"                     , "Сумма");
	СтруктураПолей.Вставить("СуммаСкидки"               , "СуммаСкидки");
	СтруктураПолей.Вставить("СтавкаНДС"                 , "СтавкаНДС");
	СтруктураПолей.Вставить("НДС"                       , "СуммаНДС");
	СтруктураПолей.Вставить("ДатаОтгрузкиОплаты"  		, "ДатаОтгрузкиОплаты");
	СтруктураПолей.Вставить("СтатьяДекларацииНДСНалоговыеОбязательства"  		, "СтатьяДекларацииНДСНалоговыеОбязательства");	
	СтруктураПолей.Вставить("СуммаПревышения"           , "СуммаПревышения");
	СтруктураПолей.Вставить("СуммаНДСПревышения"        , "СуммаНДСПревышения");
	СтруктураПолей.Вставить("ТекстДляПечатиВКолонкеКоличество", "Номенклатура.ТекстДляПечатиВКолонкеКоличествоНалоговойНакладной");
	СтруктураПолей.Вставить("СчетУчетаНДС"    	, "Ссылка.СчетУчетаНДС");
	СтруктураПростыхПолей.Вставить("ИмяТЧ"           	, "Услуги");
	СтруктураПолей.Вставить("НомерСтрокиТЧ"    			, "НомерСтроки");	
	СтруктураПолей.Вставить("НомерСтрокиНН"    			, "НомерСтрокиНН");

	РезультатЗапросаПоУслугам = ОбщегоНазначенияРед12.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Услуги", СтруктураПолей, СтруктураПростыхПолей, СтруктураСложныхПолей);
	
	// Подготовим таблицу Услуг для проведения или печати
	ТаблицаПоУслугам = ПодготовитьТаблицуУслуг(РезультатЗапросаПоУслугам, СтруктураШапкиДокумента, ПогрешностиОкругления, ПогрешностиОкругленияПревышение);

	
	// ОСНОВНЫЕ СРЕДСТВА
	// Получим необходимые для проведения и проверки заполнения данные 
	// по табличной части "ОС".
	СтруктураПолей        = Новый Структура();
	СтруктураПростыхПолей = Новый Структура();
	СтруктураСложныхПолей = Новый Структура();
	
	СтруктураПолей.Вставить("Номенклатура"              , "ОсновноеСредство.НаименованиеПолное");
	СтруктураПолей.Вставить("КодУКТВЭД"              	, "КодУКТВЭД");
	СтруктураПолей.Вставить("КодВид"              	    , "КодУКТВЭД.Вид");
	СтруктураПростыхПолей.Вставить("КодСХ"				, "");
	
	СтруктураПолей.Вставить("НомерГТД"              	, "НомерГТД.Код");
	СтруктураПолей.Вставить("ДатаГТД"              	    , "НомерГТД.Дата");
	//СтруктураПолей.Вставить("Цена"                      , "Сумма");			
	СтруктураСложныхПолей.Вставить("Цена"                      , "ВЫБОР КОГДА Цена = 0 ТОГДА Сумма ИНАЧЕ Цена КОНЕЦ");			
	СтруктураПолей.Вставить("Сумма"                     , "Сумма");
	СтруктураПолей.Вставить("СтавкаНДС"                 , "СтавкаНДС");
	СтруктураПолей.Вставить("НДС"                       , "СуммаНДС");
	СтруктураПолей.Вставить("ДатаОтгрузкиОплаты"  		, "ДатаОтгрузкиОплаты");
	СтруктураПолей.Вставить("СтатьяДекларацииНДСНалоговыеОбязательства"  		, "СтатьяДекларацииНДСНалоговыеОбязательства");	
	СтруктураПолей.Вставить("СуммаПревышения"           , "СуммаПревышения");
	СтруктураПолей.Вставить("СуммаНДСПревышения"        , "СуммаНДСПревышения");
	СтруктураПростыхПолей.Вставить("ЕдиницаИзмерения", "шт");
	СтруктураПростыхПолей.Вставить("ЕдиницаИзмеренияКод"          , "2009");
	СтруктураПростыхПолей.Вставить("КодЛьготы", "");
	
	//СтруктураПростыхПолей.Вставить("Количество"  , 1);	
	СтруктураСложныхПолей.Вставить("Количество", "ВЫБОР КОГДА Количество = 0 ТОГДА 1 ИНАЧЕ Количество Конец");
	
	СтруктураПростыхПолей.Вставить("СуммаСкидки" , 0);	
	СтруктураПолей.Вставить("СчетУчетаНДС"    	, "Ссылка.СчетУчетаНДС");
	СтруктураПростыхПолей.Вставить("ИмяТЧ"           	, "ОС");
	СтруктураПолей.Вставить("НомерСтрокиТЧ"    			, "НомерСтроки");	
	СтруктураПолей.Вставить("НомерСтрокиНН"    			, "НомерСтрокиНН");
	
	РезультатЗапросаПоОС = ОбщегоНазначенияРед12.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "ОС", СтруктураПолей, СтруктураПростыхПолей, СтруктураСложныхПолей);
	
	// Подготовим таблицу Основных Средств для проведения или печати
	ТаблицаПоОС = ПодготовитьТаблицуОС(РезультатЗапросаПоОС, СтруктураШапкиДокумента, ПогрешностиОкругления, ПогрешностиОкругленияПревышение);

	// НЕМАТЕРИАЛЬНЫЕ АКТИВЫ
	// Получим необходимые для проведения и проверки заполнения данные 
	// по табличной части "НМА".
	СтруктураПолей        = Новый Структура();
	СтруктураПростыхПолей = Новый Структура();
	СтруктураСложныхПолей = Новый Структура();
	
	СтруктураПолей.Вставить("Номенклатура"              , "НематериальныйАктив.НаименованиеПолное");
	СтруктураПолей.Вставить("КодУКТВЭД"              	, "КодУКТВЭД");
	СтруктураПолей.Вставить("КодВид"              	    , "КодУКТВЭД.Вид");
	СтруктураПростыхПолей.Вставить("КодСХ"				, "");
	
	СтруктураПолей.Вставить("НомерГТД"              	, "НомерГТД.Код");
	СтруктураПолей.Вставить("ДатаГТД"              	    , "НомерГТД.Дата");
	//СтруктураПолей.Вставить("Цена"                      , "Сумма");			
	СтруктураСложныхПолей.Вставить("Цена"                      , "ВЫБОР КОГДА Цена = 0 ТОГДА Сумма ИНАЧЕ Цена КОНЕЦ");
	СтруктураПолей.Вставить("Сумма"                     , "Сумма");
	СтруктураПолей.Вставить("СтавкаНДС"                 , "СтавкаНДС");
	СтруктураПолей.Вставить("НДС"                       , "СуммаНДС");
	СтруктураПолей.Вставить("ДатаОтгрузкиОплаты"  		, "ДатаОтгрузкиОплаты");
	СтруктураПолей.Вставить("СтатьяДекларацииНДСНалоговыеОбязательства"  		, "СтатьяДекларацииНДСНалоговыеОбязательства");	
	СтруктураПолей.Вставить("СуммаПревышения"           , "СуммаПревышения");
	СтруктураПолей.Вставить("СуммаНДСПревышения"        , "СуммаНДСПревышения");
	СтруктураПростыхПолей.Вставить("ЕдиницаИзмерения", "шт");
	СтруктураПростыхПолей.Вставить("ЕдиницаИзмеренияКод", "2009");
	СтруктураПростыхПолей.Вставить("КодЛьготы", "");
	//СтруктураПростыхПолей.Вставить("Количество"  , 1);	
	СтруктураСложныхПолей.Вставить("Количество", "ВЫБОР КОГДА Количество = 0 ТОГДА 1 ИНАЧЕ Количество Конец");
	СтруктураПростыхПолей.Вставить("СуммаСкидки" , 0);	
	СтруктураПолей.Вставить("СчетУчетаНДС"    	, "Ссылка.СчетУчетаНДС");
	СтруктураПростыхПолей.Вставить("ИмяТЧ"           	, "НМА");
	СтруктураПолей.Вставить("НомерСтрокиТЧ"    			, "НомерСтроки");	
	СтруктураПолей.Вставить("НомерСтрокиНН"    			, "НомерСтрокиНН");
	
	РезультатЗапросаПоНМА = ОбщегоНазначенияРед12.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "НМА", СтруктураПолей, СтруктураПростыхПолей, СтруктураСложныхПолей);
	
	// Подготовим таблицу Нематериальных активов для проведения или печати
	ТаблицаПоНМА = ПодготовитьТаблицуНМА(РезультатЗапросаПоНМА, СтруктураШапкиДокумента, ПогрешностиОкругления, ПогрешностиОкругленияПревышение);

	// ТАРА
	// Получим необходимые для проведения и проверки заполнения данные 
	// по табличной части "ВозвратнаяТара".
	СтруктураПолей        = Новый Структура();
	СтруктураПростыхПолей = Новый Структура();
	СтруктураСложныхПолей = Новый Структура();
	
	СтруктураПолей.Вставить("Сумма"         , "Сумма");
	СтруктураПростыхПолей.Вставить("СчетУчетаНДС"  , ПланыСчетов.Хозрасчетный.ПустаяСсылка());
	
	СтруктураПолей.Вставить("Номенклатура"              , "Номенклатура.НаименованиеПолное");
	СтруктураПолей.Вставить("БланкСтрогогоУчета"		, "Номенклатура.БланкСтрогогоУчета");
	
	РезультатЗапросаПоТаре = ОбщегоНазначенияРед12.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "ВозвратнаяТара", СтруктураПолей, СтруктураПростыхПолей, СтруктураСложныхПолей);

	// Подготовим таблицу тары для проведения или печати.
	ТаблицаПоТаре = ПодготовитьТаблицуТары(РезультатЗапросаПоТаре, СтруктураШапкиДокумента, ПогрешностиОкругленияТара);
	
КонецПроцедуры

// Процедура определяет параметры учетной политики
//
Процедура ПодготовитьПараметрыУчетнойПолитики(СтруктураШапкиДокумента, Отказ, Заголовок)
	
	Отказ = НЕ УчетнаяПолитика.Существует(СтруктураШапкиДокумента.Организация, СтруктураШапкиДокумента.Дата, Истина, Ссылка);
	
	СтруктураШапкиДокумента.Вставить("ЕстьНалогНаПрибыльДо2015"       , УчетнаяПолитика.ПлательщикНалогаНаПрибыльДо2015(СтруктураШапкиДокумента.Организация, СтруктураШапкиДокумента.Дата));
	СтруктураШапкиДокумента.Вставить("ЕстьНДС"                        , УчетнаяПолитика.ПлательщикНДС(СтруктураШапкиДокумента.Организация, СтруктураШапкиДокумента.Дата));
	
КонецПроцедуры // ПодготовитьПараметрыУчетнойПолитики()

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизтов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, МассивНепроверяемыхРеквизитов)

	Если  НЕ СтруктураШапкиДокумента.ЕстьНДС Тогда
		// по фирме не ведется учет НДС, проводить документ не имеет смысла
		СтрокаСообщения = НСтр("ru='Фирма не является плательщиком НДС!';uk='Фірма не є платником ПДВ!'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения, ЭтотОбъект,"Организация",, Отказ);		

	КонецЕсли;
	
	// Укажем, что надо проверить:
	Если    ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.ИтоговаяРозницаОсвобожденныеОперации
		ИЛИ ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.ИтоговаяРозницаОблагаемыеОперации 
		ИЛИ ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.УсловнаяПродажа 
		ИЛИ ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.УсловнаяПродажаСписаниеОС 
	  	ИЛИ ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.СводнаяНаПревышениеБазыНадЦенойПоставки Тогда
		
		МассивНепроверяемыхРеквизитов.Добавить("Контрагент");
		МассивНепроверяемыхРеквизитов.Добавить("ДоговорКонтрагента");
		МассивНепроверяемыхРеквизитов.Добавить("КурсВзаиморасчетов");
		МассивНепроверяемыхРеквизитов.Добавить("КратностьВзаиморасчетов");
		МассивНепроверяемыхРеквизитов.Добавить("Сделка");
		
		Если ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.УсловнаяПродажаСписаниеОС Тогда
			МассивНепроверяемыхРеквизитов.Добавить("СчетУчетаНДС");
		КонецЕсли;
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.РозницаКонрагентуОблагаемыеОперации
		  ИЛИ ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.РозницаКонрагентуОсвобожденныеОперации Тогда 
		
		МассивНепроверяемыхРеквизитов.Добавить("ДоговорКонтрагента");  
		МассивНепроверяемыхРеквизитов.Добавить("КурсВзаиморасчетов");
		МассивНепроверяемыхРеквизитов.Добавить("КратностьВзаиморасчетов");
		МассивНепроверяемыхРеквизитов.Добавить("Сделка");
		
	Иначе
		
		Если  НЕ СтруктураШапкиДокумента.ВедениеВзаиморасчетовНУ = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоРасчетнымДокументам Тогда
			МассивНепроверяемыхРеквизитов.Добавить("Сделка");
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ (ПродажаНижеОбычнойЦены И Дата >= '2015-01-01') Тогда
		МассивНепроверяемыхРеквизитов.Добавить("ТипПричиныНевыдачиПокупателюПриПродажеНижеОбычнойЦены");	
	КонецЕсли;
	
	Если ПродажаНижеОбычнойЦены 
		ИЛИ ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.СводнаяНаПревышениеБазыНадЦенойПоставки
		ИЛИ ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.УсловнаяПродажаСписаниеОС Тогда					   
		
		Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыльДо2015 Тогда
			
			//проверим указание субконто для заполнения декларации по прибыли
			Если ЗначениеЗаполнено(СчетДт) Тогда
				
				ЕстьСубконтоСтатьяЗатратДоходов = Ложь;
				Для НомСубконто = 1 По 3 Цикл
					Если СчетДт.ВидыСубконто.Количество()<НомСубконто Тогда
						Прервать;
					КонецЕсли;
					
					ВидСубконто = СчетДт.ВидыСубконто[НомСубконто-1].ВидСубконто;
					Если     ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат
						 ИЛИ ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиДоходов
						 ИЛИ ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиНеоперационныхРасходов Тогда
						ЕстьСубконтоСтатьяЗатратДоходов = Истина;
						Прервать;
					КонецЕсли;
					
				КонецЦикла;
				
				Если ЕстьСубконтоСтатьяЗатратДоходов Тогда
					
					Если НомСубконто = 1 Тогда
						МассивНепроверяемыхРеквизитов.Добавить("СубконтоДт2");	
						МассивНепроверяемыхРеквизитов.Добавить("СубконтоДт3");	
					ИначеЕсли НомСубконто = 2 Тогда	
						МассивНепроверяемыхРеквизитов.Добавить("СубконтоДт1");	
						МассивНепроверяемыхРеквизитов.Добавить("СубконтоДт3");	
					ИначеЕсли НомСубконто = 3 Тогда		
						МассивНепроверяемыхРеквизитов.Добавить("СубконтоДт1");	
						МассивНепроверяемыхРеквизитов.Добавить("СубконтоДт2");	
					КонецЕсли;
					
				Иначе
					
					МассивНепроверяемыхРеквизитов.Добавить("СубконтоДт1");	
					МассивНепроверяемыхРеквизитов.Добавить("СубконтоДт2");	
					МассивНепроверяемыхРеквизитов.Добавить("СубконтоДт3");	
					
				КонецЕсли;
				
			КонецЕсли;
		Иначе
			МассивНепроверяемыхРеквизитов.Добавить("СубконтоДт1");	
			МассивНепроверяемыхРеквизитов.Добавить("СубконтоДт2");	
			МассивНепроверяемыхРеквизитов.Добавить("СубконтоДт3");	
			МассивНепроверяемыхРеквизитов.Добавить("НалоговоеНазначениеДоходовИЗатрат");		
		КонецЕсли;
	Иначе
		МассивНепроверяемыхРеквизитов.Добавить("СчетДт");	
		МассивНепроверяемыхРеквизитов.Добавить("СубконтоДт1");	
		МассивНепроверяемыхРеквизитов.Добавить("СубконтоДт2");	
		МассивНепроверяемыхРеквизитов.Добавить("СубконтоДт3");	
		МассивНепроверяемыхРеквизитов.Добавить("НалоговоеНазначениеДоходовИЗатрат");		
	КонецЕсли;
	
	Если НЕ ВключаетсяВУточняющийРасчет Тогда
		МассивНепроверяемыхРеквизитов.Добавить("УточняемыйПериод");	
	КонецЕсли;
	
	Если  ЗначениеЗаполнено(Организация) 
		И ЗначениеЗаполнено(ДоговорКонтрагента)
		И НЕ ДоговорКонтрагента.Организация = Организация Тогда
		
		//Организация в документе должна совпадать с организацией, указанной в договоре взаиморасчетов.
		СтрокаСообщения = НСтр("ru='Выбран договор контрагента, не соответствующий организации, указанной в документе!';uk='Обрано договір контрагента, що не відповідає організації, вибраній в документі!'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения, ЭтотОбъект, "ДоговорКонтрагента",, Отказ);		

	КонецЕсли;
	
	Если Дата >= '2015-01-01'
		И Дата < '2016-04-01'
		Тогда
		Если ПродажаНижеОбычнойЦены Тогда
			Если ТипПричиныНевыдачиПокупателюПриПродажеНижеОбычнойЦены = 1 И СуммаДокумента = 0 Тогда                                                                                                                                                    // разрешаем проводить
				СтрокаСообщения = НСтр("ru='Указан неверное значение реквизита ""Тип причины (01,12,15,16)"". Значение должно быть 12!';uk='У реквізита ""Тип причини (01, 12, 15, 16)"" невірне значення. Значення має бути 12!'");				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения, ЭтотОбъект, "ТипПричиныНевыдачиПокупателюПриПродажеНижеОбычнойЦены");
			ИначеЕсли ТипПричиныНевыдачиПокупателюПриПродажеНижеОбычнойЦены = 12 И СуммаДокумента <> 0 Тогда	                                                                                                                                       // разрешаем проводить
				СтрокаСообщения = НСтр("ru='Указан неверное значение реквизита ""Тип причины (01,12,15,16)"". Значение должно быть 1!';uk='У реквізита ""Тип причини (01, 12, 15, 16)"" невірне значення. Значення має бути 1!'");				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения, ЭтотОбъект, "ТипПричиныНевыдачиПокупателюПриПродажеНижеОбычнойЦены");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Проверяет правильность заполнения строк табличной части "Товары".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТоварам        - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиТовары(СтруктураШапкиДокумента, Отказ, МассивНепроверяемыхРеквизитов)

	
	Если УчетНДС.ПолучитьСуммуДокументаСНДС(ЭтотОбъект) = 0 Тогда
		// разрешаем налоговую накладную на безоплатную передачу
		МассивНепроверяемыхРеквизитов.Добавить("Товары.Сумма");
	КонецЕсли;
	
	// в итоговых розниных накладных количество может быть и не указано
	Если    ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.ИтоговаяРозницаОсвобожденныеОперации 
		ИЛИ ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.ИтоговаяРозницаОблагаемыеОперации Тогда
		
		МассивНепроверяемыхРеквизитов.Добавить("Товары.Количество");
		
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиТовары()

// Проверяет правильность заполнения строк табличной части "Услуги".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТоварам        - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиУслуги(СтруктураШапкиДокумента, Отказ, МассивНепроверяемыхРеквизитов)

	Если УчетНДС.ПолучитьСуммуДокументаСНДС(ЭтотОбъект) = 0 Тогда
		// разрешаем налоговую накладную на безоплатную передачу
		МассивНепроверяемыхРеквизитов.Добавить("Услуги.Сумма");
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиУслуги()

// Проверяет правильность заполнения строк табличной части "Возвратная тара".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТаре           - таблица значений, содержащая данные для проведения и проверки ТЧ "Возвратная тара",
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиВозвратнаяТара(СтруктураШапкиДокумента, Отказ, МассивНепроверяемыхРеквизитов)

	Возврат;
	
КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиВозвратнаяТара()

Процедура ПроверитьЗаполнениеТабличнойЧастиОС(СтруктураШапкиДокумента, Отказ, МассивНепроверяемыхРеквизитов)
   	ИмяТабличнойЧасти = "ОС";

	Если УчетНДС.ПолучитьСуммуДокументаСНДС(ЭтотОбъект) = 0 Тогда
		// разрешаем налоговую накладную на безоплатную передачу
		МассивНепроверяемыхРеквизитов.Добавить("ОС.Сумма");
	КонецЕсли;
	
	Если НЕ (ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.ОблагаемыеОперации
		 Или ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.СводнаяНаПревышениеБазыНадЦенойПоставки) Тогда
		МассивНепроверяемыхРеквизитов.Добавить("ОС.СтавкаНДС");
	КонецЕсли;	
	
КонецПроцедуры

Процедура ПроверитьЗаполнениеТабличнойЧастиНематериальныеАктивы(СтруктураШапкиДокумента, Отказ, МассивНепроверяемыхРеквизитов)
	
	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("НематериальныйАктив, Сумма, СтатьяДекларацииНДСНалоговыеОбязательства");
	
	Если УчетНДС.ПолучитьСуммуДокументаСНДС(ЭтотОбъект) = 0 Тогда
		// разрешаем налоговую накладную на безоплатную передачу
		МассивНепроверяемыхРеквизитов.Добавить("НМА.Сумма");
	КонецЕсли;
	
	Если НЕ (ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.ОблагаемыеОперации
		 Или ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.СводнаяНаПревышениеБазыНадЦенойПоставки) Тогда
		МассивНепроверяемыхРеквизитов.Добавить("НМА.СтавкаНДС");
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ


Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	МассивНепроверяемыхРеквизитов = Новый Массив(); 	
	
	// ИНАГРО++
	Если ЗначениеЗаполнено(ДокументОснование) Тогда
		Если    ДокументОснование.Метаданные().Имя = "ИНАГРО_ВедомостьРеализация"
			ИЛИ ДокументОснование.Метаданные().Имя = "ИНАГРО_ВедомостьРеализацияБиологическихАктивов" Тогда		
			МассивНепроверяемыхРеквизитов.Добавить("Сделка");			
		КонецЕсли;
	КонецЕсли;
	// ИНАГРО--
	
	СтруктураШапкиДокумента		  = Новый Структура;
	
	СтруктураШапкиДокумента.Вставить("ЕстьНДС",								УчетнаяПолитика.ПлательщикНДС(Организация, Дата));
	СтруктураШапкиДокумента.Вставить("ЕстьНалогНаПрибыльДо2015",			УчетнаяПолитика.ПлательщикНалогаНаПрибыльДо2015(Организация, Дата));
	СтруктураШапкиДокумента.Вставить("ВалютаРегламентированногоУчета", 		ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета());
	СтруктураШапкиДокумента.Вставить("ВедениеВзаиморасчетовНУ", 		    ДоговорКонтрагента.ВедениеВзаиморасчетовНУ);
	
	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, МассивНепроверяемыхРеквизитов);
	
	ПроверитьЗаполнениеТабличнойЧастиТовары(СтруктураШапкиДокумента, Отказ, МассивНепроверяемыхРеквизитов);
	ПроверитьЗаполнениеТабличнойЧастиУслуги(СтруктураШапкиДокумента, Отказ, МассивНепроверяемыхРеквизитов);
	ПроверитьЗаполнениеТабличнойЧастиОС(СтруктураШапкиДокумента, Отказ, МассивНепроверяемыхРеквизитов);
	ПроверитьЗаполнениеТабличнойЧастиНематериальныеАктивы(СтруктураШапкиДокумента, Отказ, МассивНепроверяемыхРеквизитов);
	ПроверитьЗаполнениеТабличнойЧастиВозвратнаяТара(СтруктураШапкиДокумента, Отказ, МассивНепроверяемыхРеквизитов);
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);

КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
 	ТипДанныхЗаполнения = ТипЗнч(ДанныеЗаполнения);
	Если ДанныеЗаполнения <> Неопределено И ТипДанныхЗаполнения <> Тип("Структура")
		И Метаданные().ВводитсяНаОсновании.Содержит(ДанныеЗаполнения.Метаданные()) Тогда
		
		
		Возврат;
		
	КонецЕсли;
	
	ЗаполнениеДокументов.Заполнить(ЭтотОбъект, ДанныеЗаполнения);
	ЗаполнитьШапкуДокумента(ДанныеЗаполнения); 
	
КонецПроцедуры

Процедура ЗаполнитьШапкуДокумента(ДанныеЗаполнения) Экспорт
	
	Если ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Если НЕ ЗначениеЗаполнено(ОбособленноеПодразделение) Тогда
			// ИНАГРО++
			Если ИНАГРО_ОбщийВызовСервераПовтИсп.ЕстьБСПУ()
				И НЕ (ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ИНАГРО_ВедомостьРеализация") ИЛИ
			 	ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ИНАГРО_ВедомостьРеализацияБиологическихАктивов")) Тогда
				
				ОбособленноеПодразделение = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновноеОбособленноеПодразделениеОрганизации");	
				
				Если НЕ ОбособленноеПодразделение.Владелец = Организация Тогда
					ОбособленноеПодразделение = Неопределено;				
				КонецЕсли;
				
			КонецЕсли;
			// ИНАГРО--
		КонецЕсли;
	КонецЕсли;	
	
	СчетНДС = ПланыСчетов.Хозрасчетный.РасчетыПоНДС;
	СчетДт  = ПланыСчетов.Хозрасчетный.ВычетыИзДохода;
	Если СчетУчетаНДС.Пустая() Тогда
		Если  ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.ИтоговаяРозницаОсвобожденныеОперации
		  ИЛИ ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.ИтоговаяРозницаОблагаемыеОперации 
		  ИЛИ ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.РозницаКонрагентуОблагаемыеОперации 
		  ИЛИ ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.РозницаКонрагентуОсвобожденныеОперации Тогда
			СчетУчетаНДС = ПланыСчетов.Хозрасчетный.НалоговыеОбязательстваРозница;
		ИначеЕсли ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.РаботыОтНерезидента Тогда
			СчетУчетаНДС = ПланыСчетов.Хозрасчетный.НалоговыйКредитНеподтвержденный;		
		ИначеЕсли ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.УсловнаяПродажа Тогда
			СчетУчетаНДС = ПланыСчетов.Хозрасчетный.УсловнаяПродажа;	
		ИначеЕсли НЕ ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.УсловнаяПродажаСписаниеОС Тогда
			СчетаУчета   = БухгалтерскийУчетРасчетовСКонтрагентами.ПолучитьСчетаРасчетовСКонтрагентом(Организация, Контрагент, ДоговорКонтрагента);
			СчетУчетаНДС = СчетаУчета.СчетУчетаНДСПродаж;
		КонецЕсли;
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.УсловнаяПродажаСписаниеОС Тогда
        СчетУчетаНДС = ПланыСчетов.Хозрасчетный.ПустаяСсылка();		
    КонецЕсли;	
	
	НалоговоеНазначениеДоходовИЗатрат = Справочники.НалоговыеНазначенияАктивовИЗатрат.НКУ_ХозДеятельность;
	
	Документы.НалоговаяНакладная.УстановитьТипПричиныНевыдачиПокупателюПоУмолчанию(ЭтотОбъект);
	
	КтоВыписалНалоговуюНакладную = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("КтоВыписалНалоговуюНакладную");	
	
КонецПроцедуры

// Процедура - обработчик события "ОбработкаЗаполнения".
//
Функция ЗаполнитьПоДокументуОснованию(Основание) Экспорт

	Если Не Документы.ТипВсеСсылки().СодержитТип(ТипЗнч(Основание)) ИЛИ Основание = Неопределено Тогда
		ЗаполнитьШапкуДокумента(Основание);
		Возврат ЭтотОбъект;
	КонецЕсли;

	ТипОснования = ТипЗнч(Основание);
	
	ДокументВводаНаОсновании = Основание;
	
	// ИНАГРО++
	Если    Основание.Метаданные().Имя = "ИНАГРО_ВедомостьРеализация"
		ИЛИ Основание.Метаданные().Имя = "ИНАГРО_ВедомостьРеализацияБиологическихАктивов" Тогда
		
		Если (Основание.ВидОперации = Перечисления.ИНАГРО_ВидыОперацийРеализации.ВСчетПая		
			ИЛИ Основание.ВидОперации = Перечисления.ИНАГРО_ВидыОперацийРеализации.ВСчетПаяРаст
			ИЛИ Основание.ВидОперации = Перечисления.ИНАГРО_ВидыОперацийРеализации.РеализацияПрочая
			ИЛИ Основание.ВидОперации = Перечисления.ИНАГРО_ВидыОперацийРеализации.РеализацияПрочаяРаст)
			И НЕ Основание.ФормироватьОднуНН Тогда
			
			МассивСозданныхОбъектов = Новый Массив;
			
			ИНАГРО_ЗаполнитьПоВедомостиРеализации(Основание, МассивСозданныхОбъектов);
						
			Возврат МассивСозданныхОбъектов; 
		
		КонецЕсли;
		
	КонецЕсли;
	// ИНАГРО--

	Если ТипОснования = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда	
		
		Если Основание.ВалютаДокумента = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета() Тогда
			
			ТекстПредупреждения = НСтр("ru='На основании документа ""Поступление товаров и услуг"" можно вводить ""Налоговую накладную"" только при поставке от нерезидента!';uk='На підставі документа ""Надходження товарів і послуг"" можна вводити ""Податкову накладну"" тільки при постачанні від нерезидента!'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстПредупреждения, ЭтотОбъект);
			
			Возврат Неопределено;
			
		КонецЕсли;	
		
		ЗаполнениеДокументов.ЗаполнитьПоОснованию(ЭтотОбъект, Основание);
		
		ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.РаботыОтНерезидента;
		
		ДокументОснование = Основание;
		
		//Заполним ТЧ
		СкопироватьУслуги(Основание);
		
		Документы.НалоговаяНакладная.УстановитьТипПричиныНевыдачиПокупателюПоУмолчанию(ЭтотОбъект);

		ЗаполнитьШапкуДокумента(Основание);
		
		МассивСозданныхОбъектов = Новый Массив;
		МассивСозданныхОбъектов.Добавить(ЭтотОбъект);
		
		
		Возврат МассивСозданныхОбъектов;
		
	ИначеЕсли ТипОснования = Тип("ДокументСсылка.ОтчетКомиссионераОПродажах") 
		    И НЕ Основание.ВалютаДокумента = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета() Тогда
			
		ЗаполнениеДокументов.ЗаполнитьПоОснованию(ЭтотОбъект, Основание);
			
		ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.РаботыОтНерезидента;
		
		СчетНДС = ПланыСчетов.Хозрасчетный.РасчетыПоНДС;	
		
		//Заполним ТЧ
		СкопироватьУслугиКомиссииОтНерезидента(Основание);
		
		Документы.НалоговаяНакладная.УстановитьТипПричиныНевыдачиПокупателюПоУмолчанию(ЭтотОбъект);
		
		ЗаполнитьШапкуДокумента(Основание);
		
		МассивСозданныхОбъектов = Новый Массив;
		МассивСозданныхОбъектов.Добавить(ЭтотОбъект);
		
		
		Возврат МассивСозданныхОбъектов;
		
	ИначеЕсли ТипОснования = Тип("ДокументСсылка.ИзменениеНалоговогоНазначенияЗапасов")
		  ИЛИ ТипОснования = Тип("ДокументСсылка.ИзменениеНалоговогоНазначенияТЗР") Тогда	
		  
		ЗаполнениеДокументов.ЗаполнитьПоОснованию(ЭтотОбъект, Основание);
		  
		ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.УсловнаяПродажа;
		
		СчетНДС = ПланыСчетов.Хозрасчетный.РасчетыПоНДС;	
		
		ВалютаДокумента = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
		КурсВзаиморасчетов = 1;
		КратностьВзаиморасчетов = 1;
		
		//Заполним ТЧ
		Если ТипОснования = Тип("ДокументСсылка.ИзменениеНалоговогоНазначенияЗапасов") Тогда
			СкопироватьТоварыИзИзмененияНалоговогоНазначенияЗапасов(Основание);
		Иначе	
			СкопироватьТоварыИзИзменениеНалоговогоНазначенияТЗР(Основание);
		КонецЕсли; 
		
		Документы.НалоговаяНакладная.УстановитьТипПричиныНевыдачиПокупателюПоУмолчанию(ЭтотОбъект);
		
		ЗаполнитьШапкуДокумента(Основание);
		
		МассивСозданныхОбъектов = Новый Массив;
		МассивСозданныхОбъектов.Добавить(ЭтотОбъект);
		
		
		Возврат МассивСозданныхОбъектов;
		
	ИначеЕсли ТипОснования = Тип("ДокументСсылка.ИзменениеНалоговогоНазначенияОС") Тогда	
		
		ЗаполнениеДокументов.ЗаполнитьПоОснованию(ЭтотОбъект, Основание);
		
		ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.УсловнаяПродажа;

		СуммаВключаетНДС = Ложь;

		ДокументОснование = Основание;
		СчетНДС = ПланыСчетов.Хозрасчетный.РасчетыПоНДС;	
		
		ВалютаДокумента = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
		КурсВзаиморасчетов = 1;
		КратностьВзаиморасчетов = 1;
		
		//Заполним ТЧ
		СкопироватьТоварыИзИзмененияНалоговогоНазначенияОС(Основание);
		
		ТипПричиныНевыдачиПокупателю = 6;
		
		ЗаполнитьШапкуДокумента(Основание);
		
		МассивСозданныхОбъектов = Новый Массив;
		МассивСозданныхОбъектов.Добавить(ЭтотОбъект);
		
		
		Возврат МассивСозданныхОбъектов;
	
	ИначеЕсли ТипОснования = Тип("ДокументСсылка.СписаниеОС") 
		  ИЛИ ТипОснования = Тип("ДокументСсылка.СписаниеМалоценныхАктивовИзЭксплуатации")
		  ИЛИ ТипОснования = Тип("ДокументСсылка.СписаниеНМА") Тогда	
		  
		ЗаполнениеДокументов.ЗаполнитьПоОснованию(ЭтотОбъект, Основание);
		  
		ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.УсловнаяПродажаСписаниеОС;
		
		СуммаВключаетНДС = Ложь;
		
		ДокументОснование = Основание;
		СчетНДС = ПланыСчетов.Хозрасчетный.РасчетыПоНДС;	
		
		ВалютаДокумента = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
		КурсВзаиморасчетов = 1;
		КратностьВзаиморасчетов = 1;
		
		//Заполним в ТЧ номенклатуру
		Если ТипОснования = Тип("ДокументСсылка.СписаниеОС") Тогда
			ЗаполнитьОСПоСписаниюОС(Основание);
		ИначеЕсли ТипОснования = Тип("ДокументСсылка.СписаниеНМА") Тогда
			ЗаполнитьНМАПоСписаниюНМА(Основание);
		Иначе
			ЗаполнитьТоварыПоСписаниюМалоценныхАктивовИзЭксплуатации(Основание);
		КонецЕсли;
		
		Документы.НалоговаяНакладная.УстановитьТипПричиныНевыдачиПокупателюПоУмолчанию(ЭтотОбъект);
		
		ЗаполнитьШапкуДокумента(Основание);
		
		МассивСозданныхОбъектов = Новый Массив;
		МассивСозданныхОбъектов.Добавить(ЭтотОбъект);
		
		
		Возврат МассивСозданныхОбъектов;
		
	ИначеЕсли (ТипОснования = Тип("ДокументСсылка.ПриходныйКассовыйОрдер") И Основание.ВидОперации = Перечисления.ВидыОперацийПКО.ПриходДенежныхСредствРозничнаяВыручка)
	       ИЛИ ТипОснования = Тип("ДокументСсылка.ОтчетОРозничныхПродажах") Тогда	
			
		
		ОбработкаФормированияНН = Обработки.ФормированиеНалоговыхНакладныхПоРознице.Создать();
		
		ОбработкаФормированияНН.Организация = Основание.Организация;
		ОбработкаФормированияНН.ДатаНачала 	  = Основание.Дата;
		ОбработкаФормированияНН.ДатаОкончания = Основание.Дата;
		
		Возврат ОбработкаФормированияНН;
		
	ИначеЕсли (ТипОснования = Тип("ДокументСсылка.РеализацияТоваровУслуг")
			   И Основание.ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером)
		       ИЛИ Основание.Метаданные().Имя = "ИНАГРО_ВедомостьРеализация"		       
		       ИЛИ Основание.Метаданные().Имя = "ИНАГРО_РеализацияБиологическихАктивов"
			   ИЛИ Основание.Метаданные().Имя = "ИНАГРО_ВедомостьРеализацияБиологическихАктивов" Тогда // ИНАГРО								
		// налоговые обязательства возникают по поставке.
		// заполним документ на основании.
		
		// возможно, в документе указаны облагаемые и не облагаемые НДС товары
		ЕстьОблагаемыеОперации = Истина;
		ЕстьНеОблагаемыеОперации = Истина;
		ЕстьНеНДСперации = Истина;
		ЕстьТЧУслуги = Ложь;
		
		СтавкиНДС = Новый Массив();
		СтавкиНДСУслуги = Новый Массив();
		
		Если Основание.Метаданные().ТабличныеЧасти.Найти("Услуги") <> Неопределено Тогда 
			ЕстьТЧУслуги = Истина;
			СтавкиНДСУслуги = Основание.Услуги.ВыгрузитьКолонку("СтавкаНДС");
		КонецЕсли;	
		
		Если Основание.Метаданные().Имя = "ИНАГРО_ВедомостьРеализация" Тогда
			Если Основание.Номенклатура.Услуга Тогда
				СтавкиНДСУслуги = Основание.Услуги.ВыгрузитьКолонку("СтавкаНДС");
            Иначе
				СтавкиНДС       = Основание.Товары.ВыгрузитьКолонку("СтавкаНДС");
			КонецЕсли;
		Иначе
			СтавкиНДС = Основание.Товары.ВыгрузитьКолонку("СтавкаНДС");
		КонецЕсли; 

		Если  СтавкиНДС.Найти(Перечисления.СтавкиНДС.НДС20) = Неопределено
			И СтавкиНДС.Найти(Перечисления.СтавкиНДС.НДС14) = Неопределено			
			И СтавкиНДС.Найти(Перечисления.СтавкиНДС.НДС7) = Неопределено
			И СтавкиНДС.Найти(Перечисления.СтавкиНДС.НДС0) = Неопределено 
			И СтавкиНДС.Найти(Перечисления.СтавкиНДС.СпецСт8) = Неопределено Тогда 
			ЕстьОблагаемыеОперации = Ложь;	
		КонецЕсли;
		Если  СтавкиНДС.Найти(Перечисления.СтавкиНДС.БезНДС) = Неопределено Тогда
			ЕстьНеОблагаемыеОперации = Ложь;	
		КонецЕсли;
		Если  СтавкиНДС.Найти(Перечисления.СтавкиНДС.НеНДС) = Неопределено Тогда
			ЕстьНеНДСперации = Ложь;	
		КонецЕсли;
		
		// Ищем в ТЧ Услуги
		Если НЕ ЕстьОблагаемыеОперации И ЕстьТЧУслуги И СтавкиНДСУслуги.Количество() > 0 Тогда 
			Если СтавкиНДСУслуги.Найти(Перечисления.СтавкиНДС.НДС20)    = Неопределено
				И СтавкиНДС.Найти(Перечисления.СтавкиНДС.НДС14) 		= Неопределено			
				И СтавкиНДС.Найти(Перечисления.СтавкиНДС.НДС7)          = Неопределено
				И СтавкиНДСУслуги.Найти(Перечисления.СтавкиНДС.НДС0)    = Неопределено 
				И СтавкиНДСУслуги.Найти(Перечисления.СтавкиНДС.СпецСт8) = Неопределено Тогда
				ЕстьОблагаемыеОперации = Ложь;
			Иначе	
				ЕстьОблагаемыеОперации = Истина;
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ ЕстьНеОблагаемыеОперации И ЕстьТЧУслуги И СтавкиНДСУслуги.Количество() > 0 Тогда
			ЕстьНеОблагаемыеОперации = НЕ СтавкиНДСУслуги.Найти(Перечисления.СтавкиНДС.БезНДС) = Неопределено; 
		КонецЕсли; 		
		Если НЕ ЕстьНеНДСперации И ЕстьТЧУслуги И СтавкиНДСУслуги.Количество() > 0 Тогда
			ЕстьНеНДСперации         = НЕ СтавкиНДСУслуги.Найти(Перечисления.СтавкиНДС.НеНДС)  = Неопределено;
		КонецЕсли;
		
		Если  НЕ ЕстьОблагаемыеОперации 
			И НЕ ЕстьНеОблагаемыеОперации
			И НЕ ЕстьНеНДСперации Тогда
		
			//Сообщить("Нет данных для заполнения документа!");
			
			Возврат Неопределено;
		
		КонецЕсли;
			
		МассивСозданныхОбъектов = Новый Массив;
		
		ТекущийДокументЗаполнен = Ложь;
		Если ЕстьОблагаемыеОперации Тогда
		
			ЗаполнениеДокументов.ЗаполнитьПоОснованию(ЭтотОбъект, Основание);
			
			ДокументОснование = Основание;
			ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.ОблагаемыеОперации;
			Дата = Основание.Дата;
			
			СчетНДС = ПланыСчетов.Хозрасчетный.РасчетыПоНДС;	
									
			//Заполним ТЧ
			Если Основание.Метаданные().Имя = "ИНАГРО_ВедомостьРеализация" Тогда
				Если Основание.ЭтоУслуга Тогда
					СкопироватьУслуги(Основание);
				Иначе
					СкопироватьТовары(Основание);
				КонецЕсли;
			Иначе
				СкопироватьТовары(Основание);
				Если ЕстьТЧУслуги Тогда   
					СкопироватьУслуги(Основание);
				КонецЕсли;
			КонецЕсли;
			
			Если НЕ ТекущийДокументЗаполнен Тогда
				ТекущийДокументЗаполнен = Истина;
				СкопироватьВозвратнуюТару(Основание);
			КонецЕсли;
			
			Документы.НалоговаяНакладная.ЗаполнитьВидДоговора(ЭтотОбъект);
			Документы.НалоговаяНакладная.ЗаполнитьУсловиеПродажи(ЭтотОбъект);
			Если ЗначениеЗаполнено(ДоговорКонтрагента.ФормаРасчетов) Тогда
				ФормаРасчетов = ДоговорКонтрагента.ФормаРасчетов;
				Если Дата >= '2014-03-01' И Дата < '2015-01-01' Тогда
					Если ФормаРасчетов = "Оплата з поточного рахунка" Тогда
						ФормаРасчетов = "Оплата з поточного рахунку";
					КонецЕсли;
				ИначеЕсли Дата >= '2015-01-01' Тогда
					Если ФормаРасчетов = "Оплата з поточного рахунку" Тогда
						ФормаРасчетов = "Оплата з поточного рахунка";
					КонецЕсли;
				КонецЕсли;
			Иначе	
				ФормаРасчетов = "Оплата з поточного рахунку";                                             
				Если НалоговыйУчетПовтИсп.ДатаВступленияВСилуПриказа1379() <= Дата И Дата < '2014-03-01'  ИЛИ Дата >= '2015-01-01' Тогда
					ФормаРасчетов = "Оплата з поточного рахунка";
				КонецЕсли;
			КонецЕсли;
			Документы.НалоговаяНакладная.УстановитьТипПричиныНевыдачиПокупателюПоУмолчанию(ЭтотОбъект);
			
			Если НЕ (Основание.Метаданные().Имя = "ИНАГРО_ВедомостьРеализация"
				 ИЛИ Основание.Метаданные().Имя = "ИНАГРО_ВедомостьРеализацияБиологическихАктивов") Тогда
				Сделка = ?(ЗначениеЗаполнено(Основание.Сделка),Основание.Сделка,Основание.Ссылка);
			КонецЕсли;

			ЗаполнитьШапкуДокумента(Основание);
			
			МассивСозданныхОбъектов.Добавить(ЭтотОбъект);
		
		КонецЕсли;
		
		Если ЕстьНеОблагаемыеОперации Тогда
			
			Если ТекущийДокументЗаполнен Тогда
				новДок = Документы.НалоговаяНакладная.СоздатьДокумент();
			Иначе
				новДок = ЭтотОбъект;
			КонецЕсли;
			
			ЗаполнениеДокументов.Заполнить(новДок, Основание);
			ЗаполнениеДокументов.ЗаполнитьПоОснованию(новДок, Основание);

			новДок.ДокументОснование = Основание;
			новДок.ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.ОсвобожденныеОперации;
			новДок.Дата = Основание.Дата;
			
			новДок.СчетНДС = ПланыСчетов.Хозрасчетный.РасчетыПоНДС;	
			
			Документы.НалоговаяНакладная.ЗаполнитьВидДоговора(новДок);
			Документы.НалоговаяНакладная.ЗаполнитьУсловиеПродажи(новДок);
			Если ЗначениеЗаполнено(новДок.ДоговорКонтрагента.ФормаРасчетов) Тогда
				новДок.ФормаРасчетов = новДок.ДоговорКонтрагента.ФормаРасчетов;
				Если новДок.Дата >= '2014-03-01' И новДок.Дата < '2015-01-01' Тогда
					Если новДок.ФормаРасчетов = "Оплата з поточного рахунка" Тогда
						новДок.ФормаРасчетов = "Оплата з поточного рахунку";
					КонецЕсли;
				ИначеЕсли новДок.Дата >= '2015-01-01' Тогда
					Если новДок.ФормаРасчетов = "Оплата з поточного рахунку" Тогда
						новДок.ФормаРасчетов = "Оплата з поточного рахунка";
					КонецЕсли;
				КонецЕсли;
			Иначе	
				новДок.ФормаРасчетов = "Оплата з поточного рахунку";                                                        
				Если НалоговыйУчетПовтИсп.ДатаВступленияВСилуПриказа1379() <= новДок.Дата  И новДок.Дата < '2014-03-01' ИЛИ новДок.Дата >= '2015-01-01' Тогда
					новДок.ФормаРасчетов = "Оплата з поточного рахунка";
				КонецЕсли;
			КонецЕсли;
			
			Документы.НалоговаяНакладная.УстановитьТипПричиныНевыдачиПокупателюПоУмолчанию(новДок);
			Если НЕ (Основание.Метаданные().Имя = "ИНАГРО_ВедомостьРеализация"
				 ИЛИ Основание.Метаданные().Имя = "ИНАГРО_ВедомостьРеализацияБиологическихАктивов") Тогда // ИНАГРО
				новДок.Сделка = Основание.Сделка;
			КонецЕсли;
		
			новДок.ЗаполнитьШапкуДокумента(Основание);
			
			//Заполним ТЧ
			новДок.СкопироватьТовары(Основание);
			Если НЕ ТекущийДокументЗаполнен Тогда
				ТекущийДокументЗаполнен = Истина;
				новДок.СкопироватьВозвратнуюТару(Основание);
			КонецЕсли;
			МассивСозданныхОбъектов.Добавить(новДок);

		КонецЕсли;
		
		Если ЕстьНеНДСперации Тогда
			
			Если ТекущийДокументЗаполнен Тогда
				новДок = Документы.НалоговаяНакладная.СоздатьДокумент();
			Иначе
				новДок = ЭтотОбъект;
			КонецЕсли;
			
			ЗаполнениеДокументов.Заполнить(новДок, Основание);
			ЗаполнениеДокументов.ЗаполнитьПоОснованию(новДок, Основание);
			новДок.ДокументОснование = Основание;
			новДок.ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.НеНДСОперации;
			новДок.Дата = Основание.Дата;
			
			новДок.СчетНДС = ПланыСчетов.Хозрасчетный.РасчетыПоНДС;	
			
			Документы.НалоговаяНакладная.ЗаполнитьВидДоговора(новДок);
			Документы.НалоговаяНакладная.ЗаполнитьУсловиеПродажи(новДок);
			Если ЗначениеЗаполнено(новДок.ДоговорКонтрагента.ФормаРасчетов) Тогда
				новДок.ФормаРасчетов = новДок.ДоговорКонтрагента.ФормаРасчетов;
				Если новДок.Дата >= '2014-03-01' И новДок.Дата < '2015-01-01' Тогда
					Если новДок.ФормаРасчетов = "Оплата з поточного рахунка" Тогда
						новДок.ФормаРасчетов = "Оплата з поточного рахунку";
					КонецЕсли;
				ИначеЕсли новДок.Дата >= '2015-01-01' Тогда
					Если новДок.ФормаРасчетов = "Оплата з поточного рахунку" Тогда
						новДок.ФормаРасчетов = "Оплата з поточного рахунка";
					КонецЕсли;
				КонецЕсли;
			Иначе	
				новДок.ФормаРасчетов = "Оплата з поточного рахунку";                                                        
				Если НалоговыйУчетПовтИсп.ДатаВступленияВСилуПриказа1379() <= новДок.Дата  И новДок.Дата < '2014-03-01' ИЛИ новДок.Дата >= '2015-01-01'  Тогда
					новДок.ФормаРасчетов = "Оплата з поточного рахунка";
				КонецЕсли;
			КонецЕсли;
			Документы.НалоговаяНакладная.УстановитьТипПричиныНевыдачиПокупателюПоУмолчанию(новДок);
			новДок.Сделка = Основание.Сделка;
			
			новДок.ЗаполнитьШапкуДокумента(Основание);
			
			//Заполним ТЧ
			новДок.СкопироватьТовары(Основание);
			Если НЕ ТекущийДокументЗаполнен Тогда
				ТекущийДокументЗаполнен = Истина;
				новДок.СкопироватьВозвратнуюТару(Основание);
			КонецЕсли;
			
			МассивСозданныхОбъектов.Добавить(новДок);
		
		КонецЕсли;
		
		Если НЕ ТекущийДокументЗаполнен Тогда
			ТекстПредупреждения = НСтр("ru='Нет данных для заполнения документа!';uk='Немає даних для заповнення документа!'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстПредупреждения, ЭтотОбъект);
			Возврат Неопределено
		КонецЕсли;
		
		Возврат МассивСозданныхОбъектов;
		
	ИначеЕсли ТипОснования = Тип("ДокументСсылка.ОтчетКомиссионераОПродажах")
		    И Основание.ВалютаДокумента = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета() Тогда
			
			ТекстПредупреждения = НСтр("ru='С 2011 года налоговые обязательства в комиссионной торговле возникают при поставке товаров на комиссию (необходимо вводить Налоговую накладную на основании документа ""Реализация товаров и услуг""!)
|По отчету комиссионера можно вводить Приложение 2 к Налоговой накладной на разницу в цене передачи и реализации товаров.';uk='З 2011 року податкові зобов''язання в комісійній торгівлі виникають при поставці товарів на комісію (необхідно вводити Податкову накладну на підставі документа ""Реалізація товарів і послуг""!)
|По звіті комісіонера можна вводити Додаток 2 до Податкової накладної на різницю в ціні передачі й реалізації товарів.'");

			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстПредупреждения, ЭтотОбъект);
			
			Возврат Неопределено;
	
	КонецЕсли;
	
	// при вводе на основании запускается специальная обработка, которая и
	// формирует налоговые накладные
	
	Если ( (ТипОснования = Тип("ДокументСсылка.ПоступлениеНаРасчетныйСчет") ИЛИ ТипОснования = Тип("ДокументСсылка.ПлатежныйОрдерПоступлениеДенежныхСредств"))
		  И НЕ Основание.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ОплатаПокупателя)
		  ИЛИ
		 (  ТипОснования = Тип("ДокументСсылка.ПриходныйКассовыйОрдер") 
		   И НЕ Основание.ВидОперации = Перечисления.ВидыОперацийПКО.ОплатаПокупателя) Тогда
		   
			ТекстПредупреждения = НСтр("ru='По данному документу не возникают налоговые обязательства!';uk=""По даному документу не виникають податкові зобов'язання!""");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстПредупреждения, ЭтотОбъект);

			Возврат Неопределено;
	КонецЕсли;
		
	ОбработкаФормированияНН = Обработки.ФормированиеНалоговыхНакладных.Создать();
	
	ОбработкаФормированияНН.ДокументВводаНаОсновании 	= Основание;
	ОбработкаФормированияНН.Дата						= Основание.Дата;
	
	Если НЕ ЗначениеЗаполнено(Основание.Организация) Тогда
		Сообщить(НСтр("ru='В документе не указана организация! Заполнение невозможно.';uk='В документі не вказана організація! Заповнення неможливо.'"));
		Возврат Неопределено;
	Иначе
		ОбработкаФормированияНН.Организация = Основание.Организация;
	КонецЕсли;
	
	// Основание может содержать номенклатуру для заполнения налоговой накладной
	ОснованиеСодержитНоменклатуру = Ложь;
  	Для каждого ДопустимыйТип Из Обработки.ФормированиеНалоговыхНакладных.ПолучитьДопустимыеТипыДокументов() Цикл
		Если ТипОснования = ДопустимыйТип Тогда
			ОснованиеСодержитНоменклатуру = Истина;
			Прервать;
  		КонецЕсли;
   	КонецЦикла; 

	ОтборДоговоров = Новый ТаблицаЗначений;
	ОтборДоговоров.Колонки.Добавить("РасчетыВозврат");
	ОтборДоговоров.Колонки.Добавить("ДоговорКонтрагента");
	ОтборДоговоров.Колонки.Добавить("Сделка");                                           
	ОтборДоговоров.Колонки.Добавить("Дата", 		Новый ОписаниеТипов("Дата"));	
	ОтборДоговоров.Колонки.Добавить("ЗаТару", 		Новый ОписаниеТипов("Булево"));
	ОтборДоговоров.Колонки.Добавить("СтавкаНДС", 	Новый ОписаниеТипов("ПеречислениеСсылка.СтавкиНДС"));
	
	Если ОснованиеСодержитНоменклатуру Тогда
		
		Если НЕ ЗначениеЗаполнено(Основание.ДоговорКонтрагента) Тогда
			
			Сообщить(НСтр("ru='В документе не указан договор контрагента! Заполнение невозможно.';uk='В документі не вказаний договір контрагента! Заповнення неможливо.'"));
			Возврат Неопределено;
			
		КонецЕсли;	
			
		СтрокаОтбора 					= ОтборДоговоров.Добавить();
		
		СтрокаОтбора.ДоговорКонтрагента = Основание.ДоговорКонтрагента;
		СтрокаОтбора.РасчетыВозврат		= Перечисления.РасчетыВозврат.Расчеты;
		СтрокаОтбора.Дата               = Основание.Дата;
		
		Если     ТипЗнч(Основание) = Тип("ДокументСсылка.СчетНаОплатуПокупателю") Тогда
			
			СделкаНалоговыйУчет  = Основание;	
			СтрокаОтбора.Дата 	 = '00010101';	
			ОбработкаФормированияНН.Дата = '00010101';	
			
		ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ОтчетКомиссионераОПродажах") Тогда
				
			СделкаНалоговыйУчет = Основание.СделкаПоРеализации;
			// налоговые обязательства - по оплате
			СтрокаОтбора.Дата 	 		 = '00010101';	
			ОбработкаФормированияНН.Дата = '00010101';	
				
		Иначе
					
			Если ТипЗнч(Основание) = Тип("ДокументСсылка.ОтчетКомитентуОПродажах") Тогда
				
				СделкаНалоговыйУчет = Основание.Ссылка;		
				
			Иначе				
				
				Если НЕ Основание.Метаданные().Имя = "ИНАГРО_ВедомостьРеализация" И
					 НЕ (ИНАГРО_ОбщийВызовСервераПовтИсп.ЕстьБСПУ()
					 И  Основание.Метаданные().Имя = "ИНАГРО_ВедомостьРеализацияБиологическихАктивов") Тогда
					СделкаНалоговыйУчет = Основание.Сделка;
				КонецЕсли;	
			КонецЕсли;
			
					
		КонецЕсли;
					
		Если  Основание.ДоговорКонтрагента.ВедениеВзаиморасчетовНУ = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоРасчетнымДокументам 
			И ТипЗнч(СделкаНалоговыйУчет) = Тип("ДокументСсылка.СчетНаОплатуПокупателю") Тогда
					
			СтрокаОтбора.Сделка = СделкаНалоговыйУчет
					
		ИначеЕсли Основание.ДоговорКонтрагента.ВедениеВзаиморасчетовНУ = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом ТОгда
					
			СтрокаОтбора.Сделка = Неопределено;
					
		Иначе  // по расчетным документа, и сделка это не счет
			 
			СтрокаОтбора.Сделка = СделкаНалоговыйУчет;
			
			Если НЕ ЗначениеЗаполнено(СтрокаОтбора.Сделка) Тогда
				// остатков по пустой сделке быть не может при расчетах по расчетным документам
				ОтборДоговоров.Удалить(СтрокаОтбора);
			КонецЕсли;
			
			// по документу может быть два "первых события" по расчетному документу и по ссылке.
			СтрокаОтбора = ОтборДоговоров.Добавить();
			СтрокаОтбора.РасчетыВозврат		= Перечисления.РасчетыВозврат.Расчеты;
			СтрокаОтбора.ДоговорКонтрагента = Основание.ДоговорКонтрагента;
			СтрокаОтбора.Сделка 			= Основание;
			СтрокаОтбора.Дата 				= Основание.Дата;
				
		КонецЕсли;
		
		Если ИНАГРО_ОбщийВызовСервераПовтИсп.ЕстьБСПУ() Тогда
			
			Если ТипЗнч(Основание) = Тип("ДокументСсылка.ИНАГРО_РеализацияКоммунальныхУслуг") Тогда
				
				ОтборДоговоров.Очистить();
				
				МассивДоговоров = Основание.Услуги.ВыгрузитьКолонку("ДоговорКонтрагента");
				ОбщегоНазначенияБПВызовСервера.УдалитьПовторяющиесяЭлементыМассива(МассивДоговоров);
				
				Для Каждого Договор Из МассивДоговоров Цикл
					
					СтрокаОтбора = ОтборДоговоров.Добавить();
					СтрокаОтбора.РасчетыВозврат		= Перечисления.РасчетыВозврат.Расчеты;
					СтрокаОтбора.ДоговорКонтрагента = Договор;
					СтрокаОтбора.Сделка 			= Основание.Ссылка;
					СтрокаОтбора.Дата 				= Основание.Дата;
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;	
			
	Иначе
		
	   Если НЕ Основание.Метаданные().ТабличныеЧасти.Найти("РасшифровкаПлатежа") = Неопределено Тогда
				
			// платежные документы
			Для каждого СтрокаТЧ Из Основание.РасшифровкаПлатежа  Цикл
				СтрокаОтбора = ОтборДоговоров.Добавить();
									
				СтрокаОтбора.РасчетыВозврат		= Перечисления.РасчетыВозврат.Расчеты;
				СтрокаОтбора.ДоговорКонтрагента = СтрокаТЧ.ДоговорКонтрагента;
				СтрокаОтбора.Дата 				= Основание.Дата;
					
				СделкаНалоговыйУчет 			= СтрокаТЧ.Сделка;	
					
				Если  СтрокаТЧ.ДоговорКонтрагента.ВедениеВзаиморасчетовНУ = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоРасчетнымДокументам 
					И ТипЗнч(СделкаНалоговыйУчет) = Тип("ДокументСсылка.СчетНаОплатуПокупателю") Тогда
					
					СтрокаОтбора.Сделка = СделкаНалоговыйУчет
					
				ИначеЕсли СтрокаТЧ.ДоговорКонтрагента.ВедениеВзаиморасчетовНУ = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом Тогда
					
					СтрокаОтбора.Сделка = Неопределено;
					
				Иначе // по расчетным документам, и сделка это не счет
					
					Если НЕ ЗначениеЗаполнено(СделкаНалоговыйУчет) Тогда
						
						СтрокаОтбора.Сделка = Основание;
						
					Иначе
						
						СтрокаОтбора.Сделка = СделкаНалоговыйУчет;	
						
						// добавим еще строку по ссылке - по ней тоже может быть 1-е событие
						СтрокаОтбора = ОтборДоговоров.Добавить();
						СтрокаОтбора.РасчетыВозврат		= Перечисления.РасчетыВозврат.Расчеты;
						СтрокаОтбора.ДоговорКонтрагента = СтрокаТЧ.ДоговорКонтрагента;
						СтрокаОтбора.Сделка 			= Основание;
						СтрокаОтбора.Дата 				= Основание.Дата;
						
					КонецЕсли;
					
				КонецЕсли;
					
			КонецЦикла;
			
			ОтборДоговоров.Свернуть("Сделка, ДоговорКонтрагента, РасчетыВозврат, Дата, Затару, СтавкаНДС","");
			
		Иначе
			
			Сообщить(НСтр("ru='В документе не указан договор контрагента! Заполнение невозможно.';uk='В документі не вказаний договір контрагента! Заповнення неможливо.'"));
			
			Возврат Неопределено;
				
		КонецЕсли;		
		
	КонецЕсли;

	// получим данные регистра ОжидаемыйИПодтвержденныйНДСПродаж на текущий момент
	Обработки.ФормированиеНалоговыхНакладных.ОбновитьДоговора(ОбработкаФормированияНН, ОтборДоговоров);
	
	// укажем номенклатурный состав
	Для каждого СтрокаОтбора Из ОтборДоговоров Цикл
		
		ДокументИсточникНоменклатуры = Неопределено;
	
		Если ОснованиеСодержитНоменклатуру Тогда
				
			ДокументИсточникНоменклатуры = Основание; 	
				
		Иначе
				
			СделкаСодержитНоменклатуру = Ложь;
				
			Для каждого ДопустимыйТип Из Обработки.ФормированиеНалоговыхНакладных.ПолучитьДопустимыеТипыДокументов() Цикл
				Если ТипЗнч(СтрокаОтбора.Сделка) = ДопустимыйТип Тогда
					СделкаСодержитНоменклатуру = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
				
			Если СделкаСодержитНоменклатуру Тогда
				ДокументИсточникНоменклатуры = СтрокаОтбора.Сделка;
			КонецЕсли;
				
		КонецЕсли;
						
		СтруктураОтбора = Новый Структура();
		СтруктураОтбора.Вставить("Документ", 			ДокументИсточникНоменклатуры);
		СтруктураОтбора.Вставить("ДоговорКонтрагента", 	СтрокаОтбора.ДоговорКонтрагента);
		СтруктураОтбора.Вставить("Сделка", 				СтрокаОтбора.Сделка);
		СтруктураОтбора.Вставить("РасчетыВозврат", 		СтрокаОтбора.РасчетыВозврат);
		СтруктураОтбора.Вставить("Дата", 				СтрокаОтбора.Дата);
		
		Если НЕ ДокументИсточникНоменклатуры = Неопределено Тогда
			
			СтрокаИсточниковНоменклатуры = ОбработкаФормированияНН.ИсточникиНоменклатуры.Добавить();
			СтрокаИсточниковНоменклатуры.Документ 			= ДокументИсточникНоменклатуры;
			СтрокаИсточниковНоменклатуры.ДоговорКонтрагента = СтрокаОтбора.ДоговорКонтрагента;
			СтрокаИсточниковНоменклатуры.Сделка 			= СтрокаОтбора.Сделка;
			СтрокаИсточниковНоменклатуры.РасчетыВозврат 	= СтрокаОтбора.РасчетыВозврат;
			СтрокаИсточниковНоменклатуры.Дата			 	= СтрокаОтбора.Дата;
				
			Обработки.ФормированиеНалоговыхНакладных.ЗаполнитьТабличныеЧасти(ОбработкаФормированияНН, СтруктураОтбора);
			
		КонецЕсли;
			
	КонецЦикла;	
	
	МожноФормироватьНалоговыеНакладные  = Истина;
	БудутСформированыНалоговыеНакладные = Истина;

	// Проверим, можно ли не открывать форму обработки для корректировок
	Для каждого СтрокаОтбора Из ОтборДоговоров Цикл
						
		СтруктураОтбора = Новый Структура();
		СтруктураОтбора.Вставить("ДоговорКонтрагента", 	СтрокаОтбора.ДоговорКонтрагента);
		СтруктураОтбора.Вставить("Сделка", 				СтрокаОтбора.Сделка);
		СтруктураОтбора.Вставить("РасчетыВозврат", 		СтрокаОтбора.РасчетыВозврат);
		СтруктураОтбора.Вставить("Дата", 				СтрокаОтбора.Дата);
		
		ТаблицаЧастичнойОтгрузки = Неопределено;
		ОбязательствБольшеЧемНоменклатуры = Обработки.ФормированиеНалоговыхНакладных.МожноФормироватьНалоговыеНакладные(ОбработкаФормированияНН, СтруктураОтбора, ТаблицаЧастичнойОтгрузки);
		
		Если  ТаблицаЧастичнойОтгрузки.Количество() = 0 Тогда
			
			// вообще нет номенклатуры для заполнения
			МожноФормироватьНалоговыеНакладные = Ложь;
			Прервать;
			
		ИначеЕсли НЕ ОбязательствБольшеЧемНоменклатуры Тогда                     
			
			МожноФормироватьНалоговыеНакладные  = Ложь;
			
			// есть номенклатурный состав для заполнения
			Если НЕ Обработки.ФормированиеНалоговыхНакладных.БудутСформированыНалоговыеНакладные(ТаблицаЧастичнойОтгрузки) Тогда
				
				БудутСформированыНалоговыеНакладные = Ложь;
				
			КонецЕсли;
			
			Прервать;
			
		КонецЕсли;	
		
	КонецЦикла;	
	
	
	Если МожноФормироватьНалоговыеНакладные Тогда
			
	ИначеЕсли НЕ БудутСформированыНалоговыеНакладные Тогда
				  
		ТекстПредупреждения = НСтр("ru='По данному документу не возникают налоговые обязательства!';uk=""По даному документу не виникають податкові зобов'язання!""");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстПредупреждения, ЭтотОбъект);				

		Возврат Неопределено;
		
	Иначе
		ТекстПредупреждения = НСтр("ru='Заполнить налоговую накладную номенклатурным составом невозможно!';uk='Заповнити податкову накладну номенклатурним складом неможливо!'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстПредупреждения, ЭтотОбъект);				
	КонецЕсли;
	
	// сюда мы попадаем только, если по всем договорам можно сформировать налоговые накладные
	Если МожноФормироватьНалоговыеНакладные Тогда
				
		ОбработкаФормированияНН.ОткрыватьДокументы = Истина;
				
		// сформированные документы не будут записаны в базу
		ОбработкаФормированияНН.НеЗаписыватьДокументы = Истина;
				
		МассивСозданныхОбъектов = Обработки.ФормированиеНалоговыхНакладных.СформироватьНалоговыеДокументы(ОбработкаФормированияНН);
		Возврат МассивСозданныхОбъектов;	

	КонецЕсли;	
	
	// необходимо подкорректировать номенклатурный состав.
	// откроем обработку. Но в ТЧ Договора может не быть строк - если остатков по регистру НДСПродаж не текущий момент нет
	// Добавим строки при необходимости
	Для каждого СтрокаОтбораДоговоров Из ОтборДоговоров Цикл
		
		Если ОбработкаФормированияНН.Договора.НайтиСтроки(Новый Структура("ДоговорКонтрагента, Сделка",СтрокаОтбораДоговоров.ДоговорКонтрагента,СтрокаОтбораДоговоров.Сделка)).Количество() = 0 Тогда
			
			СтрокаДоговоров = ОбработкаФормированияНН.Договора.Добавить();
			СтрокаДоговоров.ДоговорКонтрагента 	= СтрокаОтбораДоговоров.ДоговорКонтрагента;
			СтрокаДоговоров.Сделка 				= СтрокаОтбораДоговоров.Сделка;
			СтрокаДоговоров.РасчетыВозврат 		= СтрокаОтбораДоговоров.РасчетыВозврат;
			СтрокаДоговоров.Дата 				= СтрокаОтбораДоговоров.Дата;

			
			СтрокаИсточниковНоменклатуры = ОбработкаФормированияНН.ИсточникиНоменклатуры.Добавить();
			СтрокаИсточниковНоменклатуры.ДоговорКонтрагента 	= СтрокаОтбораДоговоров.ДоговорКонтрагента;
			СтрокаИсточниковНоменклатуры.Сделка 				= СтрокаОтбораДоговоров.Сделка;
			СтрокаИсточниковНоменклатуры.РасчетыВозврат 		= СтрокаОтбораДоговоров.РасчетыВозврат;
			СтрокаИсточниковНоменклатуры.Дата 					= СтрокаОтбораДоговоров.Дата;
			
		КонецЕсли; 
		
	КонецЦикла; 
	
	Возврат ОбработкаФормированияНН;
	
КонецФункции

Процедура ПриКопировании(ОбъектКопирования)
	
	Дата = НачалоДня(ОбщегоНазначенияБП.ПолучитьРабочуюДату());
	Ответственный = Пользователи.ТекущийПользователь();

	НалоговаяДляРезерваНомераПриПродажаНижеОбычнойЦены = Неопределено;	
	ОсновнаяНалоговаяПриРезервеНомераПриПродажаНижеОбычнойЦены = Неопределено;
	ВключенаВЕдиныйРеестрНалоговыхНакладных = Ложь;
		
	РеквизитыНомерСтрокиННАктуальны = Ложь;
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	Перем СтруктураШапкиДокумента;
	Перем ТаблицаПоТоварам, ТаблицаПоТаре, ТаблицаПоУслугам, ТаблицаПоОС, ТаблицаПоНМА;
	
	Если ЗначениеЗаполнено(ОсновнаяНалоговаяПриРезервеНомераПриПродажаНижеОбычнойЦены) Тогда
		Возврат;
	КонецЕсли;
	
	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = НСтр("ru='Проведение документа ""';uk='Проведення документа ""'") + СокрЛП(Ссылка) + """: ";
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКПроведению(ЭтотОбъект);
	Если РучнаяКорректировка Тогда
		Возврат;
	КонецЕсли;
	
	// Подготовим структуру шапки документа
	СтруктураШапкиДокумента = ПодготовитьСтруктуруШапкиДокумента(Отказ, Заголовок); 
	
	// Получим данные учетной политики
	ПодготовитьПараметрыУчетнойПолитики(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	// Подготовим таблицы
	ПодготовитьТаблицы(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоТаре, ТаблицаПоУслугам, ТаблицаПоОС, ТаблицаПоНМА);
	
	// Движения по документу
	Если Не Отказ Тогда
		ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоТаре,
							ТаблицаПоУслугам, ТаблицаПоОС, ТаблицаПоНМА, Отказ, Заголовок);
	КонецЕсли;
	
	Движения.Хозрасчетный.ВыполнитьДействияПередЗаписьюДвижений();
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКЗаписиДвижений(ЭтотОбъект);

КонецПроцедуры // ОбработкаПроведения()

// Процедура вызывается перед записью документа 
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)

	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОсновнаяНалоговаяПриРезервеНомераПриПродажаНижеОбычнойЦены) Тогда
		Возврат;
	КонецЕсли;
	
	Если  Товары.Количество() > 0
		И (ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.РаботыОтНерезидента) Тогда

		Товары.Очистить();

	КонецЕсли;

	// Если это спец операции -  надо почистить закладки
	Если ВозвратнаяТара.Количество() > 0
		И (ДоговорКонтрагента.ВалютаВзаиморасчетов <> ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета() 
		ИЛИ ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.ИтоговаяРозницаОблагаемыеОперации
		ИЛИ ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.ИтоговаяРозницаОсвобожденныеОперации
		ИЛИ ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.РозницаКонрагентуОблагаемыеОперации
		ИЛИ ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.РозницаКонрагентуОсвобожденныеОперации
		ИЛИ ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.УсловнаяПродажа
		ИЛИ ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.РаботыОтНерезидента
		ИЛИ ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.СводнаяНаПревышениеБазыНадЦенойПоставки
		ИЛИ ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.УсловнаяПродажаСписаниеОС) Тогда

		ВозвратнаяТара.Очистить();

	КонецЕсли;
	Если Услуги.Количество() > 0
		И ( ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.ИтоговаяРозницаОблагаемыеОперации
		ИЛИ ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.ИтоговаяРозницаОсвобожденныеОперации
		ИЛИ ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.УсловнаяПродажаСписаниеОС) Тогда

		Услуги.Очистить();

	КонецЕсли;	
	Если ОС.Количество() > 0
		И ( ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.ИтоговаяРозницаОблагаемыеОперации
		ИЛИ ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.ИтоговаяРозницаОсвобожденныеОперации
		ИЛИ ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.РозницаКонрагентуОблагаемыеОперации
		ИЛИ ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.РаботыОтНерезидента
		ИЛИ ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.РозницаКонрагентуОсвобожденныеОперации) Тогда

		ОС.Очистить();

	КонецЕсли;	
	Если НМА.Количество() > 0
		И ( ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.ИтоговаяРозницаОблагаемыеОперации
		ИЛИ ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.ИтоговаяРозницаОсвобожденныеОперации
		ИЛИ ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.РозницаКонрагентуОблагаемыеОперации
		ИЛИ ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.РозницаКонрагентуОсвобожденныеОперации
		ИЛИ ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.РаботыОтНерезидента) Тогда
		//ИЛИ ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.УсловнаяПродажаСписаниеОС) Тогда

		НМА.Очистить();

	КонецЕсли;	
		
	Если НЕ ПродажаНижеОбычнойЦены 
		И НЕ ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.СводнаяНаПревышениеБазыНадЦенойПоставки
		Тогда
		
		Для каждого СтрокаТЧ Из Товары Цикл
			СтрокаТЧ.ЦенаОбычная = 0;
			СтрокаТЧ.СуммаПревышения = 0;
			СтрокаТЧ.СуммаНДСПревышения = 0;
		КонецЦикла; 
		Для каждого СтрокаТЧ Из Услуги Цикл
			СтрокаТЧ.ЦенаОбычная = 0;
			СтрокаТЧ.СуммаПревышения = 0;
			СтрокаТЧ.СуммаНДСПревышения = 0;
		КонецЦикла; 
		Для каждого СтрокаТЧ Из ОС Цикл
			СтрокаТЧ.ЦенаОбычная = 0;
			СтрокаТЧ.СуммаПревышения = 0;
			СтрокаТЧ.СуммаНДСПревышения = 0;
		КонецЦикла; 
		Для каждого СтрокаТЧ Из НМА Цикл
			СтрокаТЧ.ЦенаОбычная = 0;
			СтрокаТЧ.СуммаПревышения = 0;
			СтрокаТЧ.СуммаНДСПревышения = 0;
		КонецЦикла; 
		
	КонецЕсли;
	
	Если АвторасчетНДС Тогда
		// соответствие для хранения погрешностей округлений
		ПогрешностиОкругления = Новый Соответствие();
		// пересчет сумм НДС с учетом ошибок округления
		
		УчетНДСКлиентСервер.ПересчитатьНДСсУчетомПогрешностиОкругления(Товары, Ссылка, СуммаВключаетНДС, ПогрешностиОкругления, "Товары", Строка(ВалютаДокумента));
		УчетНДСКлиентСервер.ПересчитатьНДСсУчетомПогрешностиОкругления(Услуги, Ссылка, СуммаВключаетНДС, ПогрешностиОкругления, "Услуги", Строка(ВалютаДокумента));
		УчетНДСКлиентСервер.ПересчитатьНДСсУчетомПогрешностиОкругления(ОС, 	   Ссылка, СуммаВключаетНДС, ПогрешностиОкругления, "ОС", 	  Строка(ВалютаДокумента));
		УчетНДСКлиентСервер.ПересчитатьНДСсУчетомПогрешностиОкругления(НМА,    Ссылка, СуммаВключаетНДС, ПогрешностиОкругления, "НМА", 	  Строка(ВалютаДокумента));
		
	КонецЕсли;

	// Посчитать суммы документа и записать их в соответствующие реквизиты шапки для показа в журналах
	Если ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.СводнаяНаПревышениеБазыНадЦенойПоставки Тогда
		СуммаНДСДокумента = Товары.Итог("СуммаНДСПревышения")+Услуги.Итог("СуммаНДСПревышения")+ОС.Итог("СуммаНДСПревышения")+НМА.Итог("СуммаНДСПревышения");
		// суммы превышения всегда без НДС
		СуммаДокумента    = Товары.Итог("СуммаПревышения")+Услуги.Итог("СуммаПревышения")+ОС.Итог("СуммаПревышения")+НМА.Итог("СуммаПревышения");
		Если СуммаВключаетНДС Тогда
			СуммаДокумента = СуммаДокумента + СуммаНДСДокумента;	
		КонецЕсли;
	Иначе	
		СуммаДокумента 	  = УчетНДС.ПолучитьСуммуДокументаСНДС(ЭтотОбъект); //с учетом стоимости возвратнонй тары
		СуммаНДСДокумента = УчетНДС.ПолучитьНДСДокумента(ЭтотОбъект);
	КонецЕсли;
	
	НастройкаНумерации = НалоговыйУчетПовтИсп.НастройкаНумерацииНалоговыхДокументов(Организация, НачалоМесяца(Дата));
	
	Если Отказ 
		ИЛИ ((  Дата < '2015-01-01'
			 И НЕ НастройкаНумерации.ВестиРаздельнуюНумерациюНалоговыхНакладныхПоОбычнымЦенам = Истина))
			 Тогда
		// манипуляций со служебной налоговой не делаем
	ИначеЕсли ПродажаНижеОбычнойЦены Тогда
		
		Если ЗначениеЗаполнено(НалоговаяДляРезерваНомераПриПродажаНижеОбычнойЦены)  Тогда
			Если НалоговаяДляРезерваНомераПриПродажаНижеОбычнойЦены.ПолучитьОбъект() = Неопределено Тогда
				НалоговаяДляРезерваНомераПриПродажаНижеОбычнойЦены = Неопределено;	
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(НалоговаяДляРезерваНомераПриПродажаНижеОбычнойЦены) Тогда
			
			
			// в начале получим номер, если его еще нет, т.к. хорошо бы номер основной налоговой был меньше налоговой по ОЦ
			Если НЕ ЗначениеЗаполнено(Номер) Тогда
				УстановитьНовыйНомер();
			КонецЕсли;	
			
			Док = Документы.НалоговаяНакладная.СоздатьДокумент();	
			ЗаполнитьЗначенияСвойств(Док, ЭтотОбъект);
			
			Док.СуммаНДСДокумента =   Товары.Итог("СуммаНДСПревышения") 
									+ Услуги.Итог("СуммаНДСПревышения") 
									+ ОС.Итог("СуммаНДСПревышения") 
									+ НМА.Итог("СуммаНДСПревышения");
									
			Док.СуммаДокумента 	  =   Товары.Итог("СуммаПревышения") 
									+ Услуги.Итог("СуммаПревышения") 
									+ ОС.Итог("СуммаПревышения") 
									+ НМА.Итог("СуммаПревышения");
									
			Если НЕ Док.СуммаВключаетНДС Тогда
				Док.СуммаДокумента = Док.СуммаДокумента + Док.СуммаНДСДокумента;
			КонецЕсли;								
						
            Док.ЭлектронныйДокумент = Истина;
			Док.ТребуетВключенияВЕдиныйРеестрНалоговыхНакладных = Истина;
			Док.ПродажаНижеОбычнойЦены = Ложь;
			
			Док.Номер = "";
			Док.ПродажаНижеОбычнойЦены = Ложь;
			Док.ПодтверждаетсяГТД = Ложь;
			Док.Проведен = Ложь;
			Док.ОсновнаяНалоговаяПриРезервеНомераПриПродажаНижеОбычнойЦены = Неопределено;
			Док.НалоговаяДляРезерваНомераПриПродажаНижеОбычнойЦены 		   = Неопределено;
			
			Док.УстановитьНовыйНомер();
			Док.ОбменДанными.Загрузка = Истина;
			Док.Записать(РежимЗаписиДокумента.Запись);
			
			// пропишем вспомогательный документ для номера в реквизит
			НалоговаяДляРезерваНомераПриПродажаНижеОбычнойЦены = Док.Ссылка; 
			
		Иначе	
			
			// возможно нужно изменить номер документа (при изменении даты/организации)
			Док = НалоговаяДляРезерваНомераПриПродажаНижеОбычнойЦены.ПолучитьОбъект();	
			// синхронизируем пометки
			Док.УстановитьПометкуУдаления(ПометкаУдаления);
			Док.Записать(РежимЗаписи);
			Док.Дата = Дата;
			
			ЗаполнитьЗначенияСвойств(Док, ЭтотОбъект, , "Номер,ПометкаУдаления,Проведен");
			НалоговыйУчет.ПроверитьНомерНалоговогоДокумента(Док, "НалоговаяНакладная");
			
			Док.СуммаНДСДокумента =   Товары.Итог("СуммаНДСПревышения") 
									+ Услуги.Итог("СуммаНДСПревышения") 
									+ ОС.Итог("СуммаНДСПревышения") 
									+ НМА.Итог("СуммаНДСПревышения");
									
			Док.СуммаДокумента 	  =   Товары.Итог("СуммаПревышения") 
									+ Услуги.Итог("СуммаПревышения") 
									+ ОС.Итог("СуммаПревышения") 
									+ НМА.Итог("СуммаПревышения");
			
	        Док.ЭлектронныйДокумент = Истина;
			Док.ТребуетВключенияВЕдиныйРеестрНалоговыхНакладных = Истина;
			Док.ПродажаНижеОбычнойЦены = Ложь;
			
			Если Не ЗначениеЗаполнено(Док.Номер) Тогда
				Док.УстановитьНовыйНомер();
			КонецЕсли;
			
			Док.ОбменДанными.Загрузка = Истина;
			Док.Записать(РежимЗаписиДокумента.Запись);
			
		КонецЕсли;
		
	Иначе
		
		Если ЗначениеЗаполнено(НалоговаяДляРезерваНомераПриПродажаНижеОбычнойЦены) Тогда
		    // "освободим" сформированную налоговую
			Док = НалоговаяДляРезерваНомераПриПродажаНижеОбычнойЦены.ПолучитьОбъект();	
			Если НЕ Док = Неопределено Тогда
			
				Док.СуммаДокумента 	  = УчетНДС.ПолучитьСуммуДокументаСНДС(Док); //с учетом стоимости возвратнонй тары
				Док.СуммаНДСДокумента = УчетНДС.ПолучитьНДСДокумента(Док);
				
				Док.ПродажаНижеОбычнойЦены = Ложь;
				Док.ТипПричиныНевыдачиПокупателюПриПродажеНижеОбычнойЦены = 0;

				Док.ОсновнаяНалоговаяПриРезервеНомераПриПродажаНижеОбычнойЦены = Неопределено;
				Док.НалоговаяДляРезерваНомераПриПродажаНижеОбычнойЦены 		   = Неопределено;
				Док.ОбменДанными.Загрузка = Истина;
				Док.Записать(РежимЗаписиДокумента.Запись);
			КонецЕсли;
		КонецЕсли;
		
		НалоговаяДляРезерваНомераПриПродажаНижеОбычнойЦены = Неопределено;
		
	КонецЕсли;
	
	Если ТипПричиныНевыдачиПокупателю > 1
		И Дата >= '2014-03-01' Тогда
		
		Если НЕ ПодтверждаетсяГТД Тогда
			ЭлектронныйДокумент = Ложь;
		КонецЕсли; 
		
	    ТребуетВключенияВЕдиныйРеестрНалоговыхНакладных = Ложь;
		
	КонецЕсли;
	
	
	Если Дата >= '2015-01-01' Тогда
		ТребуетВключенияВЕдиныйРеестрНалоговыхНакладных = Истина;
		ЭлектронныйДокумент = Истина;
		Если ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.НеНДСОперации Тогда
			ТребуетВключенияВЕдиныйРеестрНалоговыхНакладных = Ложь;
			ЭлектронныйДокумент = Ложь;
		КонецЕсли;
	
	// поставим флаг "Требует регистрация в реестре"
	ИначеЕсли ТипПричиныНевыдачиПокупателю > 0 Тогда
		// мы не управляем флажком ТребуетВключенияВЕдиныйРеестрНалоговыхНакладных
		// для налоговых накладных, которые не выдаются покупателю
		// согласно разъяснению ЕБНЗ такие налоговые не должны регистрироваться в Едином реестре
		
	ИначеЕсли ЭлектронныйДокумент = Истина Тогда
		
		ТребуетВключенияВЕдиныйРеестрНалоговыхНакладных = истина;	
		
	Иначе	
		
		ТребуетВключенияВЕдиныйРеестрНалоговыхНакладных = Ложь;
		Если ВалютаДокумента = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета() Тогда
			НДСРегл = СуммаНДСДокумента;	
		Иначе 
			НДСРегл = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СуммаНДСДокумента, ВалютаДокумента,
												ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета(), 
												ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета()), 
												1,
												ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета()));
		КонецЕсли;
		Если Дата >= '20120101' Тогда
			// или сумма НДС в документе больше 10 000 грн
			Если НДСРегл > 10000 Тогда
				ТребуетВключенияВЕдиныйРеестрНалоговыхНакладных = Истина;
				
			// или имеются подакцизные/импортированные товары
			// этот факт определим так - если в строке указан код УКТЗЭД - считаем что условие выполняется.
			ИначеЕсли   Товары.НайтиСтроки(Новый Структура("КодУКТВЭД", Справочники.КлассификаторУКТВЭД.ПустаяСсылка())).Количество() 	<> Товары.Количество()
					ИЛИ ОС.    НайтиСтроки(Новый Структура("КодУКТВЭД", Справочники.КлассификаторУКТВЭД.ПустаяСсылка())).Количество() 	<> ОС.Количество()
					ИЛИ НМА.   НайтиСтроки(Новый Структура("КодУКТВЭД", Справочники.КлассификаторУКТВЭД.ПустаяСсылка())).Количество() 	<> НМА.Количество() Тогда
				ТребуетВключенияВЕдиныйРеестрНалоговыхНакладных = Истина;
			КонецЕсли;
		ИначеЕсли Дата >= '20110701' Тогда
			// сумма НДС в документе больше 100 000 грн
			Если НДСРегл > 100000 Тогда
				ТребуетВключенияВЕдиныйРеестрНалоговыхНакладных = Истина;
			КонецЕсли;
		ИначеЕсли Дата >= '20110401' Тогда
			// сумма НДС в документе больше 500 000 грн
			Если НДСРегл > 500000 Тогда
				ТребуетВключенияВЕдиныйРеестрНалоговыхНакладных = Истина;
			КонецЕсли;
		ИначеЕсли Дата >= '20110101' Тогда
			// сумма НДС в документе больше 1 000 000 грн
			Если НДСРегл > 1000000 Тогда
				ТребуетВключенияВЕдиныйРеестрНалоговыхНакладных = Истина;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	
КонецПроцедуры // ПередЗаписью

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если (НЕ Отказ) Тогда
		
		ДокументИзмененПриЗаписи = Ложь;
		Если НЕ ЭтотОбъект.РеквизитыНомерСтрокиННАктуальны Тогда 
			// проверяем, а может и нормальная 
			РезультатПроверки = Документы.НалоговаяНакладная.ПроверитьРеквизитыНомерСтрокиННАктуальны(ЭтотОбъект, Истина);
			Если РезультатПроверки = Истина Тогда
				ЭтотОбъект.РеквизитыНомерСтрокиННАктуальны = РезультатПроверки;
				ДокументИзмененПриЗаписи = Истина;
			КонецЕсли; 
		КонецЕсли;
		
		Если НЕ ЭтотОбъект.РеквизитыНомерСтрокиННАктуальны Тогда 
			Документы.НалоговаяНакладная.ПроизвестиУстановкуНомерСтрокиНН(ЭтотОбъект);
			ДокументИзмененПриЗаписи = Истина;
		КонецЕсли;
		
		Если ДокументИзмененПриЗаписи Тогда 
			// записываем, только если были изменения
			ЭтотОбъект.ОбменДанными.Загрузка = Истина;
			ЭтотОбъект.Записать();
			ЭтотОбъект.ОбменДанными.Загрузка = Ложь;
		КонецЕсли;
		
	КонецЕсли; 	
	
	НастройкаНумерации = НалоговыйУчетПовтИсп.НастройкаНумерацииНалоговыхДокументов(Организация, НачалоМесяца(Дата));
	
	Если НЕ Отказ 
		 И ПродажаНижеОбычнойЦены 
		 И (Дата >= '2015-01-01'
		    ИЛИ (	 Дата < '2015-01-01'
				   И (НастройкаНумерации.ВестиРаздельнуюНумерациюНалоговыхНакладныхПоОбычнымЦенам = Истина)))
		Тогда
	   
	   // установим в служебном документе ссылку на текущую накладную.
		Если ЗначениеЗаполнено(НалоговаяДляРезерваНомераПриПродажаНижеОбычнойЦены) Тогда
			
			Док = НалоговаяДляРезерваНомераПриПродажаНижеОбычнойЦены.ПолучитьОбъект();	
			
			Если НЕ Док.ОсновнаяНалоговаяПриРезервеНомераПриПродажаНижеОбычнойЦены = Ссылка Тогда
				Док.ОсновнаяНалоговаяПриРезервеНомераПриПродажаНижеОбычнойЦены = Ссылка;
				Док.ОбменДанными.Загрузка = Истина;
				Док.Записать(РежимЗаписиДокумента.Запись);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКОтменеПроведения(ЭтотОбъект);
	Движения.Записать();
	
КонецПроцедуры

Процедура ИНАГРО_ЗаполнитьПоВедомостиРеализации(Основание, МассивСозданныхОбъектов) // ИНАГРО

	ТипОснования = ТипЗнч(Основание);
	ИмяТЧ = "";
	
	ЕстьСодержание = Ложь;
	
	Если  Основание.Метаданные().Имя = "ИНАГРО_ВедомостьРеализация" Тогда
		Если Основание.ЭтоУслуга Тогда
			ИмяТЧ = "Услуги";
			ТЧ = Основание.Услуги;
			ЕстьСодержание = Истина;
		Иначе
			ИмяТЧ = "Товары";
			ТЧ = Основание.Товары;
		КонецЕсли;
	Иначе
		ИмяТЧ = "Товары";
		ТЧ = Основание.Товары;
	КонецЕсли;
	
	ВидДокумента = Основание.Метаданные().Имя;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", 	Основание);
	
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ *
		|ИЗ 
		|	Документ." + ВидДокумента + "." + ИмяТЧ + " КАК Основание
		|
		|ГДЕ
		|	  Основание.Ссылка = &ДокументОснование";	
	
	ТЧ = Запрос.Выполнить().Выгрузить();
	
	Если ТЧ.Количество()=0 Тогда
		Возврат;
	КонецЕсли;
	
	ЕстьГоловы  = Ложь;
	Если ИмяТЧ = "Товары" Тогда
		Голов = ""; 
		Если Основание.Метаданные().Имя = "ИНАГРО_ВедомостьРеализацияБиологическихАктивов" Тогда
			Голов      = "Голов"; 	
			ЕстьГоловы = Истина;
		КонецЕсли;
		ТЧ.Свернуть("Контрагент, ДоговорКонтрагента, СтавкаНДС, НалоговоеНазначение, НалоговоеНазначениеДоходовИЗатрат, Номенклатура, ЕдиницаИзмерения, Коэффициент, Цена",
					"Количество, Сумма, НовоеКоличество, СуммаНДС," + Голов + ", Всего"); 		
	Иначе
		ТЧ.Свернуть("Контрагент, ДоговорКонтрагента, СтавкаНДС, НалоговоеНазначение, НалоговоеНазначениеДоходовИЗатрат, Номенклатура, Цена, Содержание",
					"Количество, Сумма, СуммаНДС, Всего");		
		ЕстьГоловы  = Ложь;
	КонецЕсли; 	
	
	ЕстьОблагаемыеОперации   = Ложь;
	ЕстьНеОблагаемыеОперации = Ложь;
	ЕстьНеНДСперации         = Ложь;
	
	ТекущийДокументЗаполнен  = Ложь; 	
		
	Для Каждого СтрокаТЧ Из ТЧ Цикл
		// налоговые обязательства возникают по поставке.
		// заполним документ на основании.
		
		СтавкиНДС = СтрокаТЧ.СтавкаНДС;
		// возможно, в документе указаны облагаемые и не облагаемые НДС товары
		Если  СтавкиНДС = Перечисления.СтавкиНДС.НДС20
			ИЛИ СтавкиНДС = Перечисления.СтавкиНДС.НДС14  
			ИЛИ СтавкиНДС = Перечисления.СтавкиНДС.НДС0  
			ИЛИ СтавкиНДС = Перечисления.СтавкиНДС.СпецСт8 Тогда
			ЕстьОблагаемыеОперации = Истина;	
			ВидОперацииДок = Перечисления.ВидыОперацийНалоговаяНакладная.ОблагаемыеОперации;
		ИначеЕсли  СтавкиНДС = Перечисления.СтавкиНДС.БезНДС Тогда
			ЕстьНеОблагаемыеОперации = Истина;	
			ВидОперацииДок = Перечисления.ВидыОперацийНалоговаяНакладная.ОсвобожденныеОперации;
		ИначеЕсли  СтавкиНДС = Перечисления.СтавкиНДС.НеНДС Тогда
			ЕстьНеНДСперации = Истина;	
			ВидОперацииДок = Перечисления.ВидыОперацийНалоговаяНакладная.НеНДСОперации;
		КонецЕсли;
		
		Если  НЕ ЕстьОблагаемыеОперации 
			И НЕ ЕстьНеОблагаемыеОперации
			И НЕ ЕстьНеНДСперации Тогда
			Продолжить; 			
		КонецЕсли;
		
		Если ТЧ.Индекс(СтрокаТЧ) = 0 Тогда
			новДок = ЭтотОбъект;
		Иначе
			новДок = Документы.НалоговаяНакладная.СоздатьДокумент();
		КонецЕсли;
		
		ЗаполнениеДокументов.ЗаполнитьПоОснованию(новДок, Основание);
		
		ЗаполнитьШапкуДокумента(Основание);
		
		Если Основание.ВидОперации = Перечисления.ИНАГРО_ВидыОперацийРеализации.ВСчетЗарплаты
			ИЛИ Основание.ВидОперации = Перечисления.ИНАГРО_ВидыОперацийРеализации.ВСчетЗарплатыРаст Тогда
			новДок.Контрагент               = Основание.Контрагент;
			новДок.ДоговорКонтрагента       = Основание.ДоговорКонтрагента;
		Иначе	
			новДок.Контрагент               = СтрокаТЧ.Контрагент;
			новДок.ДоговорКонтрагента       = СтрокаТЧ.ДоговорКонтрагента;
		КонецЕсли;
		новДок.ДокументОснование        = Основание;
		новДок.ДокументВводаНаОсновании = Основание;
		новДок.Дата                     = Основание.Дата;
		новДок.ВидОперации              = ВидОперацииДок;
		новДок.СчетНДС                  = ПланыСчетов.Хозрасчетный.РасчетыПоНДС;	
		
		СчетаУчета   = БухгалтерскийУчетРасчетовСКонтрагентами.ПолучитьСчетаРасчетовСКонтрагентом(Основание.Организация, СтрокаТЧ.Контрагент, СтрокаТЧ.ДоговорКонтрагента);
		новДок.СчетУчетаНДС = СчетаУчета.СчетУчетаНДСПродаж;
		новДок.КтоВыписалНалоговуюНакладную = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("КтоВыписалНалоговуюНакладную");	
		новДок.Ответственный = Пользователи.ТекущийПользователь();
		
		Документы.НалоговаяНакладная.ЗаполнитьВидДоговора(новДок);
		Документы.НалоговаяНакладная.ЗаполнитьУсловиеПродажи(новДок);
		
		Если ЗначениеЗаполнено(новДок.ДоговорКонтрагента.ФормаРасчетов) Тогда
			новДок.ФормаРасчетов = новДок.ДоговорКонтрагента.ФормаРасчетов;
		Иначе	
			новДок.ФормаРасчетов = "Оплата з поточного рахунку";
			Если НалоговыйУчетПовтИсп.ДатаВступленияВСилуПриказа1379() <= новДок.Дата Тогда
				новДок.ФормаРасчетов = "Оплата з поточного рахунка";
			КонецЕсли;
		КонецЕсли;
		
		Документы.НалоговаяНакладная.УстановитьТипПричиныНевыдачиПокупателюПоУмолчанию(новДок);
		
		//Заполним ТЧ
		Если ИмяТЧ = "Товары" Тогда
			НоваяСтрока = новДок.Товары.Добавить();
			Если Основание.НоменклатураВТЧ Тогда
				НоваяСтрока.ЕдиницаИзмерения = СтрокаТЧ.ЕдиницаИзмерения; 
				НоваяСтрока.Коэффициент      = ?(ЗначениеЗаполнено(СтрокаТЧ.Коэффициент), СтрокаТЧ.Коэффициент, 1);
			Иначе
				НоваяСтрока.ЕдиницаИзмерения = Основание.ЕдиницаИзмерения; 
				НоваяСтрока.Коэффициент      = ?(ЗначениеЗаполнено(Основание.Коэффициент), Основание.Коэффициент,1);
			КонецЕсли;
		Иначе
			НоваяСтрока = новДок.Услуги.Добавить();
		КонецЕсли;
		
		Если Основание.НоменклатураВТЧ Тогда
			НоваяСтрока.Номенклатура = СтрокаТЧ.Номенклатура;
		Иначе
			НоваяСтрока.Номенклатура = Основание.Номенклатура;
		КонецЕсли;
		
		Если Основание.РасхождениеКоличества Тогда
			НоваяСтрока.Количество		= СтрокаТЧ.НовоеКоличество;
		Иначе	
			НоваяСтрока.Количество		= СтрокаТЧ.Количество;
		КонецЕсли;
		
		НоваяСтрока.СтавкаНДС		= СтрокаТЧ.СтавкаНДС;
		НоваяСтрока.Сумма 			= СтрокаТЧ.Сумма;
		НоваяСтрока.СуммаБезСкидки 	= НоваяСтрока.Сумма;
		НоваяСтрока.СуммаНДС 		= СтрокаТЧ.СуммаНДС;
		
		Если НоваяСтрока.Количество <> 0 Тогда
			НоваяСтрока.Цена = НоваяСтрока.СуммаБезСкидки/НоваяСтрока.Количество;
		КонецЕсли;	
		
		Если ЕстьГоловы Тогда
			НоваяСтрока.ИНАГРО_Голов = СтрокаТЧ.Голов;
		КонецЕсли;
		
		Если ЕстьСодержание Тогда
			НоваяСтрока.Содержание   = СтрокаТЧ.Содержание;
		КонецЕсли;
		
		Если Основание.Дата < Дата Тогда
			НоваяСтрока.ДатаОтгрузкиОплаты = Основание.Дата;
		Иначе
			НоваяСтрока.ДатаОтгрузкиОплаты = Дата;
		КонецЕсли;
		
		Документы.НалоговаяНакладная.ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(новДок, НоваяСтрока, ИмяТЧ, Неопределено);			
		Документы.НалоговаяНакладная.УстановитьКодУКТВЭДВстрокеТоваров(НоваяСтрока);		
				
		Если НЕ ТекущийДокументЗаполнен Тогда
			ТекущийДокументЗаполнен = Истина; 			
		КонецЕсли;
		МассивСозданныхОбъектов.Добавить(новДок); 
		
	КонецЦикла;		
	
	Если НЕ ТекущийДокументЗаполнен Тогда
		ТекстПредупреждения = НСтр("ru='Нет данных для заполнения документа!';uk='Немає даних для заповнення документа!'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстПредупреждения, ЭтотОбъект);
		МассивСозданныхОбъектов = Неопределено;
	КонецЕсли;
		
КонецПроцедуры // ОбработкаЗаполнения()
#КонецЕсли