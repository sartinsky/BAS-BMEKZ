#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Процедура определяет параметры учетной политики
//
Процедура ПодготовитьПараметрыУчетнойПолитики(СтруктураШапкиДокумента, Отказ, Заголовок)
	
	СтруктураШапкиДокумента.Вставить("ЕстьНалогНаПрибыль"             , УчетнаяПолитика.ПлательщикНалогаНаПрибыль(СтруктураШапкиДокумента.Организация, КонецМесяца(СтруктураШапкиДокумента.Дата)));
	СтруктураШапкиДокумента.Вставить("ЕстьНалогНаПрибыльДо2015"		  , УчетнаяПолитика.ПлательщикНалогаНаПрибыльДо2015(СтруктураШапкиДокумента.Организация, КонецМесяца(СтруктураШапкиДокумента.Дата)));
	СтруктураШапкиДокумента.Вставить("ЕстьНДС"                        , УчетнаяПолитика.ПлательщикНДС(СтруктураШапкиДокумента.Организация, КонецМесяца(СтруктураШапкиДокумента.Дата)));
	
КонецПроцедуры // ПодготовитьПараметрыУчетнойПолитики()

// Выполняет движения по регистрам 
//
Процедура ДвиженияПоРегистрам(СтруктураШапкиДокумента, ТаблицаПоОС, Отказ, Заголовок);

	ДатаДок = СтруктураШапкиДокумента.Дата;

	УправлениеНеоборотнымиАктивами.ДополнитьТабличнуюЧастьСведениямиОбОСБухНалогРегл(МоментВремени(), ТаблицаПоОС,
	                                                  СтруктураШапкиДокумента, 
													  Отказ, Заголовок, , Истина);
													  
	Если Отказ Тогда
		
		Возврат;
		
	КонецЕсли;								
													  
	ПараметрыАмортизацииБУ 	= Движения.ПараметрыАмортизацииОСБухгалтерскийУчет;
	ПереоценкаОСБУ 			= Движения.ПереоценкаОСБухгалтерскийУчет;
	ПроводкиБУ 				= Движения.Хозрасчетный;
	ОперацииОС 				= Движения.СобытияОСОрганизаций;
	
	Для Каждого СтрокаТЧ Из ТаблицаПоОС Цикл
		
		ТекОС = СтрокаТЧ.ОсновноеСредство;
		
		// ПараметрыАмортизацииОСБухгалтерскийУчет
		СтрокаДвижений = ПараметрыАмортизацииБУ.Добавить();
		
		СтрокаДвижений.Период           = ДатаДок;
		СтрокаДвижений.ОсновноеСредство = ТекОС;
		СтрокаДвижений.Организация      = СтруктураШапкиДокумента.Организация;
		
		СтрокаДвижений.СрокПолезногоИспользования                  = СтрокаТЧ.СрокПолезногоИспользованияБУ;
		СтрокаДвижений.ОбъемПродукцииРабот                         = СтрокаТЧ.ОбъемПродукцииРаботБУ;
		СтрокаДвижений.СрокИспользованияДляВычисленияАмортизации   = СтрокаТЧ.СрокИспользованияДляВычисленияАмортизацииБУ;
		СтрокаДвижений.СтоимостьДляВычисленияАмортизации           = СтрокаТЧ.СтоимостьДляВычисленияАмортизацииБУ;
		СтрокаДвижений.ОбъемПродукцииРаботДляВычисленияАмортизации = СтрокаТЧ.ОбъемПродукцииРаботДляВычисленияАмортизацииБУ;
		СтрокаДвижений.ЛиквидационнаяСтоимость                     = СтрокаТЧ.ЛиквидационнаяСтоимостьБУ;
		
		// ПереоценкаОСБухгалтерскийУчет
		Если СтрокаТЧ.СуммаПереоценкиОстаточнойСтоимостиБУ > 0 Тогда // Дооценка
			
			СтрокаДвижений = ПереоценкаОСБУ.ДобавитьПриход();
			
			СтрокаДвижений.Период           = ДатаДок;
			СтрокаДвижений.ОсновноеСредство = ТекОС;
			СтрокаДвижений.Организация      = СтруктураШапкиДокумента.Организация;
			
			СтрокаДвижений.СуммаПереоценки 	= СтрокаТЧ.СуммаПереоценкиОстаточнойСтоимостиБУ;
			
		ИначеЕсли СтрокаТЧ.СуммаПереоценкиОстаточнойСтоимостиБУ < 0 Тогда // Уценка	
			
			СтрокаДвижений = ПереоценкаОСБУ.ДобавитьРасход();
			
			СтрокаДвижений.Период           = ДатаДок;
			СтрокаДвижений.ОсновноеСредство = ТекОС;
			СтрокаДвижений.Организация      = СтруктураШапкиДокумента.Организация;
			
			СтрокаДвижений.СуммаПереоценки 	= - СтрокаТЧ.СуммаПереоценкиОстаточнойСтоимостиБУ;
			
		КонецЕсли;	
		
		// СобытияОСОрганизаций
		СтрокаДвижений = ОперацииОС.Добавить();

		СтрокаДвижений.Период            = ДатаДок;
		СтрокаДвижений.ОсновноеСредство  = ТекОС;
		СтрокаДвижений.Организация       = СтруктураШапкиДокумента.Организация;
		СтрокаДвижений.Событие           = СтруктураШапкиДокумента.СобытиеОС;
		СтрокаДвижений.НазваниеДокумента = Строка(СтруктураШапкиДокумента.Ссылка.Метаданные());
		СтрокаДвижений.НомерДокумента    = СтруктураШапкиДокумента.Номер;
		
		// Хозрасчетный
		Если СтрокаТЧ.СуммаПереоценкиОстаточнойСтоимостиБУ > 0 Тогда 
			// Дооценка 
			
			Если СтрокаТЧ.СуммаПереоценкиНакопленнойАмортизацииБУ > 0 Тогда
				
				Проводка = ПроводкиБУ.Добавить();
				
				Проводка.Период       = ДатаДок;
				Проводка.Организация  = СтруктураШапкиДокумента.Организация;
				Проводка.Содержание   = НСтр("ru='Переоценка ОС ""';uk='Переоцінка ОЗ ""'",Локализация.КодЯзыкаИнформационнойБазы()) + ТекОС + """";
				Проводка.НомерЖурнала = НСтр("ru='ОС';uk='ОЗ'",Локализация.КодЯзыкаИнформационнойБазы());
				Проводка.Сумма        = СтрокаТЧ.СуммаПереоценкиНакопленнойАмортизацииБУ;
				
				Проводка.СчетДт       = СтрокаТЧ.СчетУчетаБУ;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ОсновныеСредства", ТекОС);
				
				Проводка.СчетКт       = СтрокаТЧ.СчетНачисленияАмортизацииБУ;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОсновныеСредства", ТекОС);
				
				Проводка.НалоговоеНазначениеДт = СтрокаТЧ.НалоговоеНазначение_ОС;
				Проводка.НалоговоеНазначениеКт = СтрокаТЧ.НалоговоеНазначение_ОС;
				
			КонецЕсли;	
			
			ПревышениеСуммДооценокНадСуммамиУценокБУ = -СтрокаТЧ.ПревышениеСуммДооценокНадСуммамиУценокБУ;
			
			Если ПревышениеСуммДооценокНадСуммамиУценокБУ > 0 Тогда
				
				СуммаПроводкиДоходов = Мин(ПревышениеСуммДооценокНадСуммамиУценокБУ, СтрокаТЧ.СуммаПереоценкиОстаточнойСтоимостиБУ);
				
				Если СуммаПроводкиДоходов > 0 Тогда
					
					// Дт СчетУчетаОС Кт СчетДоходов
					Проводка = ПроводкиБУ.Добавить();
					
					Проводка.Период       = ДатаДок;
					Проводка.Организация  = СтруктураШапкиДокумента.Организация;
					Проводка.Содержание   = НСтр("ru='Переоценка ОС ""';uk='Переоцінка ОЗ ""'",Локализация.КодЯзыкаИнформационнойБазы()) + ТекОС + """";
					Проводка.НомерЖурнала = НСтр("ru='ОС';uk='ОЗ'",Локализация.КодЯзыкаИнформационнойБазы());
					Проводка.Сумма        = СуммаПроводкиДоходов;
					
					Проводка.СчетДт       = СтрокаТЧ.СчетУчетаБУ;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ОсновныеСредства", ТекОС);
					
					Проводка.НалоговоеНазначениеДт = СтрокаТЧ.НалоговоеНазначение_ОС;
					
					Проводка.СчетКт       = СтруктураШапкиДокумента.СчетДоходов;
					
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, ДоходыСубконто1);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, ДоходыСубконто2);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3, ДоходыСубконто3);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОсновныеСредства", ТекОС);
					
					Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыльДо2015 Тогда
						Проводка.НалоговоеНазначениеКт = Справочники.НалоговыеНазначенияАктивовИЗатрат.НКУ_НеХозДеятельность;
					КонецЕсли;	
					
				КонецЕсли;	
				
				Если СтрокаТЧ.СуммаПереоценкиОстаточнойСтоимостиБУ - СуммаПроводкиДоходов > 0 Тогда
				
					// Дт СчетУчетаОС Кт СчетУчетаДооценокОС (423)
					Проводка = ПроводкиБУ.Добавить();
					
					Проводка.Период       = ДатаДок;
					Проводка.Организация  = СтруктураШапкиДокумента.Организация;
					Проводка.Содержание   = НСтр("ru='Переоценка ОС ""';uk='Переоцінка ОЗ ""'",Локализация.КодЯзыкаИнформационнойБазы()) + ТекОС + """";
					Проводка.НомерЖурнала = НСтр("ru='ОС';uk='ОЗ'",Локализация.КодЯзыкаИнформационнойБазы());
					Проводка.Сумма        = СтрокаТЧ.СуммаПереоценкиОстаточнойСтоимостиБУ - СуммаПроводкиДоходов;
					
					Проводка.СчетДт       = СтрокаТЧ.СчетУчетаБУ;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ОсновныеСредства", ТекОС);
					
					Проводка.НалоговоеНазначениеДт = СтрокаТЧ.НалоговоеНазначение_ОС;
					
					//Проводка.СчетКт       = ПланыСчетов.Хозрасчетный.ДооценкаОсновныхСредств;
					Проводка.СчетКт       = СтрокаТЧ.СчетУчетаДооценокОС;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОсновныеСредства", ТекОС);
					
				КонецЕсли;	
				
			Иначе	
				
				// Дт СчетУчетаОС Кт СчетУчетаДооценокОС (423)
				Проводка = ПроводкиБУ.Добавить();
				
				Проводка.Период       = ДатаДок;
				Проводка.Организация  = СтруктураШапкиДокумента.Организация;
				Проводка.Содержание   = НСтр("ru='Переоценка ОС ""';uk='Переоцінка ОЗ ""'",Локализация.КодЯзыкаИнформационнойБазы()) + ТекОС + """";
				Проводка.НомерЖурнала = НСтр("ru='ОС';uk='ОЗ'",Локализация.КодЯзыкаИнформационнойБазы());
				Проводка.Сумма        = СтрокаТЧ.СуммаПереоценкиОстаточнойСтоимостиБУ;
				
				Проводка.СчетДт       = СтрокаТЧ.СчетУчетаБУ;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ОсновныеСредства", ТекОС);
				
				Проводка.НалоговоеНазначениеДт = СтрокаТЧ.НалоговоеНазначение_ОС;
				
				//Проводка.СчетКт       = ПланыСчетов.Хозрасчетный.ДооценкаОсновныхСредств;
				Проводка.СчетКт       = СтрокаТЧ.СчетУчетаДооценокОС;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОсновныеСредства", ТекОС);
				
			КонецЕсли;	
			
			
		ИначеЕсли СтрокаТЧ.СуммаПереоценкиОстаточнойСтоимостиБУ < 0 Тогда 
			// Уценка	
			
			Если СтрокаТЧ.СуммаПереоценкиНакопленнойАмортизацииБУ < 0 Тогда
				
				Проводка = ПроводкиБУ.Добавить();
				
				Проводка.Период       = ДатаДок;
				Проводка.Организация  = СтруктураШапкиДокумента.Организация;
				Проводка.Содержание   = НСтр("ru='Переоценка ОС ""';uk='Переоцінка ОЗ ""'",Локализация.КодЯзыкаИнформационнойБазы()) + ТекОС + """";
				Проводка.НомерЖурнала = НСтр("ru='ОС';uk='ОЗ'",Локализация.КодЯзыкаИнформационнойБазы());
				Проводка.Сумма        = - СтрокаТЧ.СуммаПереоценкиНакопленнойАмортизацииБУ;
				
				Проводка.СчетДт       = СтрокаТЧ.СчетНачисленияАмортизацииБУ;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ОсновныеСредства", ТекОС);
				
				Проводка.СчетКт       = СтрокаТЧ.СчетУчетаБУ;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОсновныеСредства", ТекОС);
				
				Проводка.НалоговоеНазначениеДт = СтрокаТЧ.НалоговоеНазначение_ОС;
				Проводка.НалоговоеНазначениеКт = СтрокаТЧ.НалоговоеНазначение_ОС;
				
			КонецЕсли;	
			
			ПревышениеСуммДооценокНадСуммамиУценокБУ = СтрокаТЧ.ПревышениеСуммДооценокНадСуммамиУценокБУ;
			
			Если ПревышениеСуммДооценокНадСуммамиУценокБУ > 0 Тогда
				
				СуммаПроводкиДооценкаОС = Мин(ПревышениеСуммДооценокНадСуммамиУценокБУ, - СтрокаТЧ.СуммаПереоценкиОстаточнойСтоимостиБУ);
				
				Если СуммаПроводкиДооценкаОС > 0 Тогда
					
					// Дт СчетУчетаДооценокОС (423) Кт СчетУчетаОС
					Проводка = ПроводкиБУ.Добавить();
					
					Проводка.Период       = ДатаДок;
					Проводка.Организация  = СтруктураШапкиДокумента.Организация;
					Проводка.Содержание   = НСтр("ru='Переоценка ОС ""';uk='Переоцінка ОЗ ""'",Локализация.КодЯзыкаИнформационнойБазы()) + ТекОС + """";
					Проводка.НомерЖурнала = НСтр("ru='ОС';uk='ОЗ'",Локализация.КодЯзыкаИнформационнойБазы());
					Проводка.Сумма        = СуммаПроводкиДооценкаОС;
					
					//Проводка.СчетДт       = ПланыСчетов.Хозрасчетный.ДооценкаОсновныхСредств;
					Проводка.СчетДт       = СтрокаТЧ.СчетУчетаДооценокОС;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ОсновныеСредства", ТекОС);
					
					Проводка.СчетКт       = СтрокаТЧ.СчетУчетаБУ;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОсновныеСредства", ТекОС);
					
					Проводка.НалоговоеНазначениеКт = СтрокаТЧ.НалоговоеНазначение_ОС;
					
				КонецЕсли;	
				
				Если -СтрокаТЧ.СуммаПереоценкиОстаточнойСтоимостиБУ - СуммаПроводкиДооценкаОС > 0 Тогда
				
					// Дт СчетЗатрат Кт СчетУчетаОС
					Проводка = ПроводкиБУ.Добавить();
					
					Проводка.Период       = ДатаДок;
					Проводка.Организация  = СтруктураШапкиДокумента.Организация;
					Проводка.Содержание   = НСтр("ru='Переоценка ОС ""';uk='Переоцінка ОЗ ""'",Локализация.КодЯзыкаИнформационнойБазы()) + ТекОС + """";
					Проводка.НомерЖурнала = НСтр("ru='ОС';uk='ОЗ'",Локализация.КодЯзыкаИнформационнойБазы());
					Проводка.Сумма        = -СтрокаТЧ.СуммаПереоценкиОстаточнойСтоимостиБУ - СуммаПроводкиДооценкаОС;
					
					Проводка.СчетДт       = СтруктураШапкиДокумента.СчетЗатрат;
					
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, ЗатратыСубконто1);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, ЗатратыСубконто2);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, ЗатратыСубконто3);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ОсновныеСредства", ТекОС);
					
					Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыльДо2015 Тогда
						Проводка.НалоговоеНазначениеДт = Справочники.НалоговыеНазначенияАктивовИЗатрат.НКУ_НеХозДеятельность;
					КонецЕсли;	
					
					Проводка.СчетКт       = СтрокаТЧ.СчетУчетаБУ;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОсновныеСредства", ТекОС);
					
					Проводка.НалоговоеНазначениеКт = СтрокаТЧ.НалоговоеНазначение_ОС;
					
				КонецЕсли;	
				
			Иначе	
				
				// Дт СчетЗатрат Кт СчетУчетаОС
				Проводка = ПроводкиБУ.Добавить();
				
				Проводка.Период       = ДатаДок;
				Проводка.Организация  = СтруктураШапкиДокумента.Организация;
				Проводка.Содержание   = НСтр("ru='Переоценка ОС ""';uk='Переоцінка ОЗ ""'",Локализация.КодЯзыкаИнформационнойБазы()) + ТекОС + """";
				Проводка.НомерЖурнала = НСтр("ru='ОС';uk='ОЗ'",Локализация.КодЯзыкаИнформационнойБазы());
				Проводка.Сумма        = - СтрокаТЧ.СуммаПереоценкиОстаточнойСтоимостиБУ;
				
				Проводка.СчетДт       = СтруктураШапкиДокумента.СчетЗатрат;
				
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, ЗатратыСубконто1);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, ЗатратыСубконто2);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, ЗатратыСубконто3);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ОсновныеСредства", ТекОС);
				
				Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыльДо2015 Тогда
					Проводка.НалоговоеНазначениеДт = Справочники.НалоговыеНазначенияАктивовИЗатрат.НКУ_НеХозДеятельность;
				КонецЕсли;	
				
				Проводка.СчетКт       = СтрокаТЧ.СчетУчетаБУ;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОсновныеСредства", ТекОС);
				
				Проводка.НалоговоеНазначениеКт = СтрокаТЧ.НалоговоеНазначение_ОС;
				
			КонецЕсли;	
			
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры // ДвиженияПоРегистрам

Процедура ДополнитьСтруктуруПолейТабличнойЧастиОСРегл(СтруктураШапкиДокумента, СтруктураПолей)
	
	СтруктураПолей.Вставить("СрокПолезногоИспользованияБУ"                 	, "СрокПолезногоИспользованияБУ");
	СтруктураПолей.Вставить("СрокИспользованияДляВычисленияАмортизацииБУ"  	, "СрокИспользованияДляВычисленияАмортизацииБУ");
	СтруктураПолей.Вставить("ОбъемПродукцииРаботБУ"                        	, "ОбъемПродукцииРаботБУ");
	СтруктураПолей.Вставить("ОбъемПродукцииРаботДляВычисленияАмортизацииБУ" , "ОбъемПродукцииРаботДляВычисленияАмортизацииБУ");
	СтруктураПолей.Вставить("СтоимостьДляВычисленияАмортизацииБУ"          	, "СтоимостьДляВычисленияАмортизацииБУ");
	СтруктураПолей.Вставить("ЛиквидационнаяСтоимостьБУ"                    	, "ЛиквидационнаяСтоимостьБУ");
	СтруктураПолей.Вставить("ОстаточнаяСтоимостьБУ"                    		, "ОстаточнаяСтоимостьБУ");
	
	СтруктураПолей.Вставить("СуммаПереоценкиОстаточнойСтоимостиБУ" 			, "СуммаПереоценкиОстаточнойСтоимостиБУ");
	СтруктураПолей.Вставить("СуммаПереоценкиНакопленнойАмортизацииБУ" 		, "СуммаПереоценкиНакопленнойАмортизацииБУ");
	
	СтруктураПолей.Вставить("ПревышениеСуммДооценокНадСуммамиУценокБУ" 		, "ПревышениеСуммДооценокНадСуммамиУценокБУ");
	
КонецПроцедуры

// Процедура формирует структуру шапки документа и дополнительных полей.
//
Процедура ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента) Экспорт

	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента = ОбщегоНазначенияРед12.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	СтруктураШапкиДокумента.Вставить("ВидСобытияОС",СтруктураШапкиДокумента.СобытиеОС.ВидСобытияОС);
	
КонецПроцедуры // ПодготовитьСтруктуруШапкиДокумента()

// Процедура формирует таблицы документа.
//
Процедура ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоОС, Отказ, Заголовок) Экспорт
	
	// Сформируем структуру табличной части
	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("ОсновноеСредство" , "ОсновноеСредство");

	ДополнитьСтруктуруПолейТабличнойЧастиОСРегл(СтруктураШапкиДокумента,СтруктураПолей);

	РезультатЗапросаПоОС = ОбщегоНазначенияРед12.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "ОС", СтруктураПолей);
	ТаблицаПоОС          = РезультатЗапросаПоОС.Выгрузить();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ
//

Процедура ЗаполнитьПоДокументуОснованию(Основание)

	// Заполним реквизиты из стандартного набора по документу основанию.
	ЗаполнениеДокументов.ЗаполнитьПоОснованию(ЭтотОбъект, Основание);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура - обработчик события "ОбработкаЗаполнения".
//
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)

	ТипДанныхЗаполнения = ТипЗнч(ДанныеЗаполнения);
	Если ДанныеЗаполнения <> Неопределено И ТипДанныхЗаполнения <> Тип("Структура")
		И Метаданные().ВводитсяНаОсновании.Содержит(ДанныеЗаполнения.Метаданные()) Тогда
		ЗаполнитьПоДокументуОснованию(ДанныеЗаполнения);
	КонецЕсли;
	ЗаполнениеДокументов.Заполнить(ЭтотОбъект, ДанныеЗаполнения);
	
	// Специфические для конкретного документа действия
	Если НЕ ЗначениеЗаполнено(СобытиеОС) Тогда
		СобытиеОС = УчетОС.ПолучитьСобытиеПоОСИзСправочника(Перечисления.ВидыСобытийОС.Прочее);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СчетДоходов) Тогда
		СчетДоходов = ПланыСчетов.Хозрасчетный.ДругиеДоходыОтОбычнойДеятельности;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СчетЗатрат) Тогда
		СчетЗатрат = ПланыСчетов.Хозрасчетный.УценкаНеоборотныхАктивовИФинансовыхИнвестиций;
	КонецЕсли;
	
КонецПроцедуры // ОбработкаЗаполнения()

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)

	УправлениеВнеоборотнымиАктивами.ПроверитьОтсутствиеДублейВТабличнойЧасти(ЭтотОбъект, "ОС", Новый Структура("ОсновноеСредство"), Отказ);

	Для Каждого Строка Из ОС Цикл
		Если Строка.ОстаточнаяСтоимостьБУ = 0 И Строка.ЛиквидационнаяСтоимостьБУ = 0 Тогда
			
			ТекстСообщения = НСтр("ru='В строке номер ""%1"" табличной части ""Основные средства"": Остаточная стоимость ОС равна нулю, необходимо указать его ликвидационную стоимость';uk='У рядку номер ""%1"" табличної частини ""Основні засоби"": Залишкова вартість ОЗ дорівнює нулю, необхідно вказати його ліквідаційну вартість'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Строка.НомерСтроки);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, "ОС[" + (Формат(Строка.НомерСтроки, "ЧН=; ЧГ=") - 1) + "].ЛиквидационнаяСтоимостьБУ", "Объект", Отказ);
			
		КонецЕсли;	
	КонецЦикла;		
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ)

	Перем Заголовок, СтруктураШапкиДокумента;
	Перем ТаблицаПоОС;
	
	Заголовок = ОбщегоНазначенияБПВызовСервера.ПредставлениеДокументаПриПроведении(Ссылка);

	// ПОДГОТОВКА ПРОВЕДЕНИЯ ПО ДАННЫМ ДОКУМЕНТА

	ПроведениеСервер.ПодготовитьНаборыЗаписейКПроведению(ЭтотОбъект);
	Если РучнаяКорректировка Тогда
		Возврат;
	КонецЕсли;
	
	ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента);
	
	// Получим данные учетной политики
	ПодготовитьПараметрыУчетнойПолитики(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоОС, Отказ, Заголовок);

	//проверка, нет ли списанных ОС в табличной части
	УправлениеНеоборотнымиАктивами.ПроверитьНаСписанность(МоментВремени(), Организация, ТаблицаПоОС, Отказ, Заголовок);
	

	Если Не Отказ Тогда
		ДвиженияПоРегистрам(СтруктураШапкиДокумента, ТаблицаПоОС, Отказ, Заголовок);
	КонецЕсли;

	ПроведениеСервер.ПодготовитьНаборыЗаписейКЗаписиДвижений(ЭтотОбъект);
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКОтменеПроведения(ЭтотОбъект);
	Движения.Записать();
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)

	Дата = НачалоДня(ОбщегоНазначенияБП.ПолучитьРабочуюДату());
	Ответственный = Пользователи.ТекущийПользователь();

КонецПроцедуры

#КонецЕсли
