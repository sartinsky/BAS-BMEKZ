#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	
	Если Параметры.Ключ.Пустая() Тогда
		ПодготовитьФормуНаСервере();
	КонецЕсли;
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	ПодготовитьФормуНаСервере();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Если ТипЗнч(ВладелецФормы) = Тип("УправляемаяФорма")
		И ВладелецФормы.ИмяФормы = "Справочник.ОсновныеСредства.Форма.ФормаЭлемента" Тогда
		
		Если ПараметрыЗаписи.РежимЗаписи <> РежимЗаписиДокумента.Запись Тогда
			Оповестить("ИзмененаИнформацияОС", ВладелецФормы.Параметры.Ключ);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ИсточникВыбора.ИмяФормы = "Обработка.ПодборОсновныхСредств.Форма.Форма" Тогда
		ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ПодготовитьФормуНаСервере();
	
	УстановитьСостояниеДокумента();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	ОбщегоНазначенияБПКлиент.ОбработкаОповещенияФормыДокумента(ЭтаФорма, Объект.Ссылка, ИмяСобытия, Параметр, Источник);
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.Организация) И Объект.ОС.Количество() > 0 Тогда
		ЗаполнитьИнвентарныеНомераОС();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	Если НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДатаДокумента) Тогда
		// Изменение времени не влияет на поведение документа.
		ТекущаяДатаДокумента = Объект.Дата;
		Возврат;
	КонецЕсли;

	ТребуетсяВызовСервера = Ложь;

	// Проверим наличие строк в табличной части.
	Если Объект.ОС.Количество() > 0 Тогда
		ТребуетсяВызовСервера = НЕ ЗначениеЗаполнено(МаксПериодПервоначальныхСведенийОС) 
			ИЛИ (МаксПериодПервоначальныхСведенийОС >= Объект.Дата);
	КонецЕсли;
		
	// Если определили, что изменение даты может повлиять на какие-либо параметры, 
	// то передаем обработку на сервер.
	Если ТребуетсяВызовСервера Тогда
		ДатаПриИзмененииНаСервере();
	КонецЕсли;
	
	// Запомним новую дату документа.
	ТекущаяДатаДокумента = Объект.Дата;
	
КонецПроцедуры

&НаКлиенте
Процедура СчетЗатратПриИзменении(Элемент)
	
	УстановитьЗаголовкиИДоступностьСубконто(ЭтаФорма, Объект.СчетЗатрат, "Затраты");
	
	ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3",
		"ЗатратыСубконто1", "ЗатратыСубконто2", "ЗатратыСубконто3");
	ПоляОбъекта.Вставить("Организация",   Объект.Организация);
	
	БухгалтерскийУчетКлиентСервер.ПриИзмененииСчета(Объект.СчетЗатрат, Объект, ПоляОбъекта);
	
КонецПроцедуры

&НаКлиенте
Процедура СчетДоходовПриИзменении(Элемент)
	
	УстановитьЗаголовкиИДоступностьСубконто(ЭтаФорма, Объект.СчетЗатрат, "Доходы");
	
	ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3",
		"ДоходыСубконто1", "ДоходыСубконто2", "ДоходыСубконто3");
	ПоляОбъекта.Вставить("Организация",   Объект.Организация);
	
	БухгалтерскийУчетКлиентСервер.ПриИзмененииСчета(Объект.СчетЗатрат, Объект, ПоляОбъекта);
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования,ЭтотОбъект,"Объект.Комментарий");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицыФормыОС

&НаКлиенте
Процедура ОСОсновноеСредствоПриИзменении(Элемент)
	
	СтрокаТЧ = Элементы.ОС.ТекущиеДанные;
	ОсновноеСредство = СтрокаТЧ.ОсновноеСредство;
	Если НЕ ЗначениеЗаполнено(ОсновноеСредство) Тогда
		СтрокаТЧ.ИнвентарныйНомер = "";
	Иначе
		СтруктураСведений 					= СведенияОбИнвентарномНомереОС(ОсновноеСредство, Объект.Организация, Объект.Дата);
		СтрокаТЧ.ИнвентарныйНомер 			= СтруктураСведений.ИнвентарныйНомер;
		МаксПериодПервоначальныхСведенийОС 	= Макс(МаксПериодПервоначальныхСведенийОС, СтруктураСведений.Период);
		
		ПараметрыОС = СведенияОПараметрахОС(ОсновноеСредство, Объект.Организация, Объект.Дата);
		
		Если ЗначениеЗаполнено(ПараметрыОС) Тогда
			ЗаполнитьЗначенияСвойств(СтрокаТЧ, ПараметрыОС);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОССправедливаяСтоимостьБУПриИзменении(Элемент)
	СтрокаТЧ = Элементы.ОС.ТекущиеДанные;
	РассчитатьИндексИСуммыПереоценки(СтрокаТЧ);
КонецПроцедуры

&НаКлиенте
Процедура ОСПервоначальнаяСтоимостьБУПриИзменении(Элемент)
	СтрокаТЧ = Элементы.ОС.ТекущиеДанные;
	РассчитатьИндексИСуммыПереоценки(СтрокаТЧ);
КонецПроцедуры

&НаКлиенте
Процедура ОСНакопленнаяАмортизацияБУПриИзменении(Элемент)
	СтрокаТЧ = Элементы.ОС.ТекущиеДанные;
	РассчитатьИндексИСуммыПереоценки(СтрокаТЧ);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗаполнитьПоНаименованию(Команда)
	
	ОсновноеСредство = УправлениеВнеоборотнымиАктивамиКлиент.ПолучитьОСДляЗаполнениеПоНаименованию(
		ПараметрыЗаполненияПоНаименованию(ЭтаФорма));
	
	Если ЗначениеЗаполнено(ОсновноеСредство) Тогда
		
		ЗаполнитьПоНаименованиюСервер(ОсновноеСредство);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДляСпискаОС(Команда)

	Если Объект.Проведен Тогда
		ПоказатьПредупреждение(Неопределено, НСтр("ru='Заполнение возможно только в непроведенном документе';uk='Заповнення можливе тільки в непроведеному документі'"), 60);
		Возврат;
	КонецЕсли;

	ОчиститьСообщения();

	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		ТекстСообщения = ОбщегоНазначенияБПКлиентСервер.ПолучитьТекстСообщения(, , НСтр("ru='Организация';uk='Організація'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Объект.Организация");
		Возврат;
	КонецЕсли;

	ТекстВопроса = НСтр("ru='При заполнении существующие данные будут пересчитаны!
|Продолжить?';uk='При заповненні існуючі дані будуть перераховані!
|Продовжити?'");
	ПоказатьВопрос(Новый ОписаниеОповещения("ЗаполнитьДляСпискаОСЗавершение", ЭтотОбъект), ТекстВопроса, РежимДиалогаВопрос.ДаНет);

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДляСпискаОСЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Ответ = РезультатВопроса;
    Если Ответ = КодВозвратаДиалога.Нет Тогда
        Возврат;
    КонецЕсли;
    
    ЗаполнитьДляСпискаОССервер();

КонецПроцедуры

&НаКлиенте
Процедура Подбор(Команда)
	
	ПараметрыФормы = Новый Структура;
	Если Объект.ОС.Количество() > 0 Тогда
		ПараметрыФормы.Вставить("АдресОСВХранилище", ПоместитьОСВХранилище());
	КонецЕсли;
	
	ОткрытьФорму("Обработка.ПодборОсновныхСредств.Форма.Форма", ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#Область CлужебныеПроцедурыИФункции

&НаСервере
Процедура ПодготовитьФормуНаСервере()
	
	ТекущаяДатаДокумента = Объект.Дата;

	УстановитьЗаголовкиИДоступностьСубконто(ЭтаФорма, Объект.СчетЗатрат, 	"Затраты");
	УстановитьЗаголовкиИДоступностьСубконто(ЭтаФорма, Объект.СчетДоходов, 	"Доходы");
	
	ЗаполнитьИнвентарныеНомераОС();
	
	УстановитьСостояниеДокумента();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСостояниеДокумента()
	
	СостояниеДокумента = ОбщегоНазначенияБП.СостояниеДокумента(Объект);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьЗаголовкиИДоступностьСубконто(Форма, Счет, Префикс = "")
	
	ПоляФормы = Новый Структура("Субконто1, Субконто2, Субконто3",
		Префикс + "Субконто1", Префикс + "Субконто2", Префикс + "Субконто3");

	ЗаголовкиПолей = Новый Структура("Субконто1, Субконто2, Субконто3",
		"Заголовок" + Префикс + "Субконто1", "Заголовок" + Префикс + "Субконто2", "Заголовок" + Префикс + "Субконто3");
	
	БухгалтерскийУчетКлиентСервер.ПриВыбореСчета(Счет, Форма, ПоляФормы, ЗаголовкиПолей);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьИнвентарныеНомераОС()
	
	ТаблицаОС = Объект.ОС.Выгрузить();

	ТаблицаНомеров = УчетОС.ПолучитьТаблицуИнвентарныхНомеровОС(ТаблицаОС,
		Объект.Организация, Объект.Дата);

	ТаблицаОС.ЗагрузитьКолонку(ТаблицаНомеров.ВыгрузитьКолонку("ИнвентарныйНомер"), "ИнвентарныйНомер");
	Объект.ОС.Загрузить(ТаблицаОС);
	
	// Запомним максимальную дату первоначальных сведений ОС
	ТаблицаНомеров.Сортировать("Период");
	Если ТаблицаНомеров.Количество() > 0 Тогда
		МаксПериодПервоначальныхСведенийОС = ТаблицаНомеров[ТаблицаНомеров.Количество() - 1].Период;
	Иначе
		МаксПериодПервоначальныхСведенийОС = '0001-01-01';
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СведенияОбИнвентарномНомереОС(ОсновноеСредство, Организация, Дата)

	Возврат УчетОС.СведенияОбИнвентарномНомереОС(ОсновноеСредство, Организация, Дата);

КонецФункции

&НаСервереБезКонтекста
Функция СведенияОПараметрахОС(ОсновноеСредство, Организация, Дата)

	// "Невидимые" на форме параметры ОС
	ПараметрыОС = Новый Структура("СрокПолезногоИспользованияБУ, ОбъемПродукцииРаботБУ, СрокИспользованияДляВычисленияАмортизацииБУ, ОбъемПродукцииРаботДляВычисленияАмортизацииБУ");
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ОсновноеСредство", ОсновноеСредство);
	Запрос.УстановитьПараметр("Организация",      Организация);
	Запрос.УстановитьПараметр("Дата",             Дата);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство КАК ОсновноеСредство,
	|	ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.СрокПолезногоИспользования КАК СрокПолезногоИспользованияБУ,
	|	ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.ОбъемПродукцииРабот КАК ОбъемПродукцииРаботБУ,
	|	ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.СрокИспользованияДляВычисленияАмортизации КАК СрокИспользованияДляВычисленияАмортизацииБУ,
	|	ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.ОбъемПродукцииРаботДляВычисленияАмортизации КАК ОбъемПродукцииРаботДляВычисленияАмортизацииБУ
	|ИЗ
	|	РегистрСведений.ПараметрыАмортизацииОСБухгалтерскийУчет.СрезПоследних(&Дата, Организация = &Организация И ОсновноеСредство В (&ОсновноеСредство)) КАК ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних";
	
	Результат = Запрос.Выполнить().Выбрать();
	
	Если Результат.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(ПараметрыОС, Результат);
	КонецЕсли;	
	
	Возврат ПараметрыОС;

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПараметрыЗаполненияПоНаименованию(Форма)
	
	Результат = Новый Структура;
	Результат.Вставить("Форма", Форма);
	Результат.Вставить("Объект", Форма.Объект);
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьПоНаименованиюСервер(Знач ОсновноеСредство)
	
	УчетОС.ДозаполнитьТабличнуюЧастьОсновнымиСредствамиПоНаименованию(
		ПараметрыЗаполненияПоНаименованию(ЭтаФорма), ОсновноеСредство);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДляСпискаОССервер()

	ТаблицаОС = Объект.ОС.Выгрузить();
	СписокОС = ТаблицаОС.ВыгрузитьКолонку("ОсновноеСредство");

	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("СписокОС"	, СписокОС);
	Запрос.УстановитьПараметр("СубконтоОС" 	, ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства);
	Запрос.УстановитьПараметр("Организация"	, Объект.Организация);
	Запрос.УстановитьПараметр("Период"		, Объект.Дата);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПараметрыАмортизацииБУ.ОсновноеСредство КАК ОсновноеСредство,
		|	ПараметрыАмортизацииБУ.СрокПолезногоИспользования КАК СрокПолезногоИспользованияБУ,
		|	ПараметрыАмортизацииБУ.ОбъемПродукцииРабот КАК ОбъемПродукцииРаботБУ,
		|	ПараметрыАмортизацииБУ.СрокИспользованияДляВычисленияАмортизации КАК СрокИспользованияДляВычисленияАмортизацииБУ,
		|	ПараметрыАмортизацииБУ.СтоимостьДляВычисленияАмортизации КАК СтоимостьДляВычисленияАмортизацииБУ,
		|	ПараметрыАмортизацииБУ.ОбъемПродукцииРаботДляВычисленияАмортизации КАК ОбъемПродукцииРаботДляВычисленияАмортизацииБУ,
		|	ПараметрыАмортизацииБУ.ЛиквидационнаяСтоимость КАК ЛиквидационнаяСтоимостьБУ,
		|	СтоимостьОстатки.СуммаОстатокДт КАК ПервоначальнаяСтоимостьБУ,
		|	АмортизацияОстатки.СуммаОстатокКт КАК НакопленнаяАмортизацияБУ,
		|	ПереоценкаОСБухгалтерскийУчетОстатки.СуммаПереоценкиОстаток КАК ПревышениеСуммДооценокНадСуммамиУценокБУ
		|ИЗ
		|	РегистрСведений.ПараметрыАмортизацииОСБухгалтерскийУчет.СрезПоследних(
		|			&Период,
		|			Организация = &Организация
		|				И ОсновноеСредство В (&СписокОС)) КАК ПараметрыАмортизацииБУ
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.Остатки(
		|				&Период,
		|				Счет В
		|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|						СчетаБУ.СчетУчета
		|					ИЗ
		|						РегистрСведений.СчетаБухгалтерскогоУчетаОС.СрезПоследних(&Период, Организация = &Организация
		|							И ОсновноеСредство В (&СписокОС)) КАК СчетаБУ),
		|				&СубконтоОС,
		|				Организация = &Организация
		|					И Субконто1 В (&СписокОС)) КАК СтоимостьОстатки
		|		ПО ПараметрыАмортизацииБУ.ОсновноеСредство = СтоимостьОстатки.Субконто1
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.Остатки(
		|				&Период,
		|				Счет В
		|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|						СчетаБУ.СчетНачисленияАмортизации
		|					ИЗ
		|						РегистрСведений.СчетаБухгалтерскогоУчетаОС.СрезПоследних(&Период, Организация = &Организация
		|							И ОсновноеСредство В (&СписокОС)) КАК СчетаБУ),
		|				&СубконтоОС,
		|				Организация = &Организация
		|					И Субконто1 В (&СписокОС)) КАК АмортизацияОстатки
		|		ПО ПараметрыАмортизацииБУ.ОсновноеСредство = АмортизацияОстатки.Субконто1
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ПереоценкаОСБухгалтерскийУчет.Остатки(&Период, Организация = &Организация
		|							И ОсновноеСредство В (&СписокОС)) КАК ПереоценкаОСБухгалтерскийУчетОстатки
		|		ПО ПараметрыАмортизацииБУ.ОсновноеСредство = ПереоценкаОСБухгалтерскийУчетОстатки.ОсновноеСредство
		|			И ПараметрыАмортизацииБУ.Организация = ПереоценкаОСБухгалтерскийУчетОстатки.Организация";
	ТЗ = Запрос.Выполнить().Выгрузить();

	Для каждого СтрокаТЧ Из Объект.ОС Цикл

		СтрокаТЗ = ТЗ.Найти(СтрокаТЧ.ОсновноеСредство,"ОсновноеСредство");

		Если СтрокаТЗ = Неопределено Тогда
			
			СтрокаТЧ.СрокПолезногоИспользованияБУ                  = 0;
			СтрокаТЧ.СрокИспользованияДляВычисленияАмортизацииБУ   = 0;
			СтрокаТЧ.ОбъемПродукцииРаботБУ                         = 0;
			СтрокаТЧ.ОбъемПродукцииРаботДляВычисленияАмортизацииБУ = 0;
			СтрокаТЧ.СтоимостьДляВычисленияАмортизацииБУ           = 0;
			СтрокаТЧ.ЛиквидационнаяСтоимостьБУ                     = 0;
			
		Иначе

			ЗаполнитьЗначенияСвойств(СтрокаТЧ, СтрокаТЗ);
			
			РассчитатьИндексИСуммыПереоценки(СтрокаТЧ);
			
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РассчитатьИндексИСуммыПереоценки(СтрокаТЧ)
	
	СтрокаТЧ.ОстаточнаяСтоимостьБУ = СтрокаТЧ.ПервоначальнаяСтоимостьБУ - СтрокаТЧ.НакопленнаяАмортизацияБУ;
	
	Если СтрокаТЧ.ОстаточнаяСтоимостьБУ > 0 Тогда
		СтрокаТЧ.ИндексПереоценки = СтрокаТЧ.СправедливаяСтоимостьБУ / СтрокаТЧ.ОстаточнаяСтоимостьБУ;
	Иначе		
		СтрокаТЧ.ИндексПереоценки = 1;
	КонецЕсли;	
	
	СтрокаТЧ.СуммаПереоценкиПервоначальнойСтоимостиБУ 	= СтрокаТЧ.ПервоначальнаяСтоимостьБУ * (СтрокаТЧ.ИндексПереоценки - 1);
	СтрокаТЧ.СуммаПереоценкиНакопленнойАмортизацииБУ 	= СтрокаТЧ.НакопленнаяАмортизацияБУ * (СтрокаТЧ.ИндексПереоценки - 1);
	СтрокаТЧ.СуммаПереоценкиОстаточнойСтоимостиБУ 		= СтрокаТЧ.СправедливаяСтоимостьБУ - СтрокаТЧ.ОстаточнаяСтоимостьБУ; // СтрокаТЧ.ОстаточнаяСтоимостьБУ * (СтрокаТЧ.ИндексПереоценки - 1);
	
	СтрокаТЧ.СтоимостьДляВычисленияАмортизацииБУ 	= СтрокаТЧ.ПервоначальнаяСтоимостьБУ + СтрокаТЧ.СуммаПереоценкиОстаточнойСтоимостиБУ + СтрокаТЧ.СуммаПереоценкиНакопленнойАмортизацииБУ;
	
КонецПроцедуры                                                         

&НаСервере
Функция ПоместитьОСВХранилище()
	
	ТаблицаОС = Объект.ОС.Выгрузить(, "НомерСтроки, ОсновноеСредство");
	Возврат ПоместитьВоВременноеХранилище(ТаблицаОС);
	
КонецФункции

&НаСервере
Процедура ОбработкаВыбораПодборНаСервере(Знач ВыбранноеЗначение)
	
	ДобавленныеСтроки = УчетОС.ОбработатьПодборОсновныхСредств(Объект.ОС, ВыбранноеЗначение);
	
	ЗаполнитьИнвентарныеНомераОС();
	
КонецПроцедуры

&НаСервере
Процедура ДатаПриИзмененииНаСервере()

	ЗаполнитьИнвентарныеНомераОС();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ БСП

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти
