#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ОбработкаПроведения( Отказ, Режим )
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКПроведению(ЭтотОбъект);
	Заголовок = ОбщегоНазначенияБПВызовСервера.ПредставлениеДокументаПриПроведении(Ссылка);
	
	Если ПредварительныйРасчет Тогда
		// Никаких движений не формируем
		Возврат;
	КонецЕсли;	
	
	// Получим реквизиты шапки из запроса
	ВыборкаПоШапкеДокумента = СформироватьЗапросПоШапке().Выбрать();
		
	Если ВыборкаПоШапкеДокумента.Следующий() Тогда

		// Надо позвать проверку заполнения реквизитов шапки
		ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ);
 		мСотрудники = РаботникиОрганизации.ВыгрузитьКолонку("Сотрудник");

		// По всем заполненным работникам
		// Движения стоит добавлять, если в проведении еще не отказано (отказ =ложь)
		Если НЕ Отказ Тогда

			////////////////////////////////////////////////////////////////////////
			// Начисления
			// Получим реквизиты табличной части.
			
			ВыборкаПоНачислениям = СформироватьЗапросПоНачислениям(мСотрудники).Выбрать();
			Пока ВыборкаПоНачислениям.Следующий() Цикл 
				
				// проверим очередную строку табличной части
				ПроверитьЗаполнениеСтрокиНачисления(ВыборкаПоНачислениям, Отказ, Заголовок);
				Если НЕ Отказ Тогда
					// Заполним записи в наборах записей регистров
					ДобавитьСтрокуНачислений(ВыборкаПоНачислениям, Движения.ИНАГРО_Начисления);
				КонецЕсли;
			КонецЦикла;

			
			////////////////////////////////////////////////////////////////////////
			// Взносы
			ВыборкаПоВзносы = СформироватьЗапросПоВзносы("Взносы",мСотрудники).Выбрать();
			Пока ВыборкаПоВзносы.Следующий() Цикл 
				// Проверим очередную строку табличной части
				ПроверитьЗаполнениеСтрокиВзносы(ВыборкаПоВзносы, Отказ, Заголовок);
				Если НЕ Отказ Тогда
					// Заполним записи в наборах записей регистров
					ДобавитьСтрокуВзносы(ВыборкаПоВзносы, Движения.ИНАГРО_ВзносыВФонды);
					ДобавитьСтрокуВзаиморасчетыВзносы(ВыборкаПоВзносы );
				КонецЕсли;
			КонецЦикла;
			
			////////////////////////////////////////////////////////////////////////
			// Взносы ФОТ
			ВыборкаПоВзносыФОТ = СформироватьЗапросПоВзносы("ВзносыФОТ",мСотрудники).Выбрать();
			Пока ВыборкаПоВзносыФОТ.Следующий() Цикл 
				
				// Проверим очередную строку табличной части
				ПроверитьЗаполнениеСтрокиВзносы(ВыборкаПоВзносыФОТ, Отказ, Заголовок);
				Если НЕ Отказ Тогда
					
					// Заполним записи в наборах записей регистров
					ДобавитьСтрокуВзносы(ВыборкаПоВзносыФОТ, Движения.ИНАГРО_ВзносыВФонды);
					ДобавитьСтрокуВзаиморасчетыВзносы( ВыборкаПоВзносыФОТ );
					
				КонецЕсли;
			КонецЦикла;
			
			////////////////////////////////////////////////////////////////////////
			// Исчисленный НДФЛ
			ВыборкаПоНДФЛ = СформироватьЗапросПоНДФЛ(мСотрудники ).Выбрать();
			Пока ВыборкаПоНДФЛ.Следующий() Цикл 
				
				// Проверим очередную строку табличной части
				ПроверитьЗаполнениеСтрокиНДФЛ(ВыборкаПоНДФЛ, Отказ, Заголовок);
				Если НЕ Отказ Тогда
					// Заполним записи в наборах записей регистров
					ДобавитьСтрокуНДФЛ(ВыборкаПоНДФЛ, Движения.ВзаиморасчетыПоНДФЛ);
				КонецЕсли;
			КонецЦикла;
							
			////////////////////////////////////////////////////////////////////////
			// Удержания
			ВыборкаПоУдержаниям = СформироватьЗапросПоУдержания(мСотрудники).Выбрать();
			Пока ВыборкаПоУдержаниям.Следующий() Цикл 
				
				// Проверим очередную строку табличной части
				ПроверитьЗаполнениеСтрокиУдержания(ВыборкаПоУдержаниям, Отказ, Заголовок);
				Если НЕ Отказ Тогда
					// Заполним записи в наборах записей регистров
					ДобавитьСтрокуУдержаний(ВыборкаПоУдержаниям, Движения.ИНАГРО_Удержания);
				КонецЕсли;
			КонецЦикла;
			СформироватьВзаиморасчетыСРаботниками(мСотрудники, Движения.ВзаиморасчетыССотрудниками)
		КонецЕсли;

	КонецЕсли;
	
	// При получении учетной политики произошли ошибки
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	////////////////////////////////////////////////////////////////////////
	// По регистру расчета ОтражениеЗарплатыОрганизацийВРеглУчете
	Выборка = СформироватьЗапросПоОтражениюПроводки().Выбрать();
	Пока Выборка.Следующий() Цикл 
		
		ПроверитьЗаполнениеСтрокиОтраженийПроводки(Выборка, Отказ );
		Если НЕ Отказ Тогда
			ДобавитьСтрокуОтраженийПроводки(Выборка, Движения.ИНАГРО_Отражение);
		КонецЕсли;
	КонецЦикла;
	
	
	////////////////////////////////////////////////////////////////////////
	// По регистру бухгалтерии
	ВыборкаПоОтражениюВУчете = СформироватьЗапросПоОтражениюВУчете().Выбрать();
	ВалютаРеглУчета  = Константы.ВалютаРегламентированногоУчета.Получить();
	Пока ВыборкаПоОтражениюВУчете.Следующий() Цикл
		
		ПроверитьЗаполнениеСтрокиОтраженияВУчете(ВыборкаПоОтражениюВУчете, Отказ, Заголовок);
		
		Если Не Отказ Тогда
			ДобавитьСтрокуВДвиженияПоОтражениюВУчете(ВыборкаПоШапкеДокумента, ВыборкаПоОтражениюВУчете, ВалютаРеглУчета);
		КонецЕсли;
		
	КонецЦикла;
	Движения.Хозрасчетный.ВыполнитьДействияПередЗаписьюДвижений();
	
	ЭтотОбъект.Записать();
	
	ИНАГРО_Общий.ИНАГРО_ДвиженияЗатратыОрганизации_Приход(ВыборкаПоШапкеДокумента, Движения);
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если КраткийСоставДокумента = "" Тогда 
		ИНАГРО_ПроведениеРасчетов.СформироватьКраткийСоставСотрудников(ЭтотОбъект, "РаботникиОрганизации");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Проведение

// Формирует запрос по шапке документа
//
// Параметры: 
//  нет
//
// Возвращаемое значение:
//  Результат запроса
//
Функция СформироватьЗапросПоШапке() Экспорт
	
	Запрос = Новый Запрос;
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка" , Ссылка);
	Запрос.УстановитьПараметр("парамПустаяОрганизация", Справочники.Организации.ПустаяСсылка());
	
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ //<< Ин-Агро - добавлено Разрешенные 
	|	Дата                                               КАК Дата, 
	|	ПериодРегистрации                                  КАК ПериодРегистрации, 
	|	ВЫБОР КОГДА Организация.ГоловнаяОрганизация = &парамПустаяОрганизация 
	|			ТОГДА Организация 
	|			ИНАЧЕ Организация.ГоловнаяОрганизация 
	|		  КОНЕЦ                                         КАК ГоловнаяОрганизация, 
	|	Организация                                         КАК Организация, 
	|	Организация                                         КАК ОбособленноеПодразделение, 
	| 	Ссылка                                              КАК Ссылка
	|ИЗ 
	|	Документ.ИНАГРО_НачислениеЗарплатыРаботникамОрганизаций
	|ГДЕ 
	|	Ссылка = &ДокументСсылка
	|";
	
	Возврат Запрос.Выполнить();
	
КонецФункции // СформироватьЗапросПоШапке()

Функция СформироватьЗапросПоНачислениям(Сотрудники)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументСсылка", Ссылка);

	Если НЕ (Сотрудники = Неопределено) Тогда
		Запрос.УстановитьПараметр("парамСотрудники", Сотрудники);
		УсловиеНаФизлицоТекст = " И СтрокиНачисления.Сотрудник В (&парамСотрудники) ";
	Иначе
		УсловиеНаФизлицоТекст="";
	КонецЕсли;

	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	// Свойства
	|	СтрокиНачисления.Ссылка.ПериодРегистрации	КАК ПериодРегистрации,
	|	СтрокиНачисления.ДатаНачала					КАК ПериодДействияНачало,
	|	СтрокиНачисления.ДатаОкончания				КАК ПериодДействияКонец,
	|	СтрокиНачисления.БазовыйПериодНачало,
	|	СтрокиНачисления.БазовыйПериодКонец,
	|	СтрокиНачисления.ВидРасчета,
	|	СтрокиНачисления.Сторно,
	|
	// Измерения
	|	СтрокиНачисления.Ссылка.Организация КАК организация,
	|	СтрокиНачисления.Сотрудник,
	|	СтрокиНачисления.Назначение,
	|
	// Ресурсы
	|	СтрокиНачисления.Результат,
	|	СтрокиНачисления.ОплаченоДнейЧасов,
	|	СтрокиНачисления.ОтработаноДней,
	|	СтрокиНачисления.ОтработаноЧасов,
	|	СтрокиНачисления.НормаДней,
	|	СтрокиНачисления.НормаЧасов,
	|	СтрокиНачисления.КалендарныеДни,
	|
	// Реквизиты
	|	СтрокиНачисления.Авторасчет,
	|	СтрокиНачисления.НомерСтроки,
	|	СтрокиНачисления.ПодразделениеОрганизации,
	|	СтрокиНачисления.ПодразделениеОрганизации КАК Подразделение,
	|	СтрокиНачисления.СпособОтраженияВБухучете,
	|	СтрокиНачисления.ДокументОснование,
	|	СтрокиНачисления.Показатель1,
	|	СтрокиНачисления.Показатель2,
	|	СтрокиНачисления.Показатель3,
	|	СтрокиНачисления.Показатель4,
	|	СтрокиНачисления.Показатель5,
	|	СтрокиНачисления.Показатель6,
	|	СтрокиНачисления.НормаДнейЗаМесяц,
	|	СтрокиНачисления.НормаЧасовЗаМесяц,
	|	СтрокиНачисления.ГрафикРаботы,
	|   ВЫБОР	КОГДА СтрокиНачисления.ГрафикРаботы ССЫЛКА Справочник.ИНАГРО_ГрафикиРаботы
	|			ТОГДА NULL
	|			ИНАЧЕ СтрокиНачисления.Сотрудник
	|	КОНЕЦ						КАК ГрафикРаботыСотрудник,
	|	СтрокиНачисления.ВидУчетаВремениДляСредней,
	|
	// Специализированные параметры для регистра Взаиморасчеты с работников организации и др.
	|	Прием.ДатаПриема							КАК ДатаПриема,
	|	СтрокиНачисления.ВидРасчета.СпособРасчета	КАК СпособРасчета,
	|	СтрокиНачисления.ВидРасчета.СчетУчета		КАК СчетУчета,
	|	ЕСТЬNULL(СтрокиНачисления.ГрафикРаботы.СуммированныйУчетРабочегоВремени, ЛОЖЬ) КАК СуммированныйУчетРабочегоВремени,
	|	СтрокиНачисления.ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени	КАК ВидИспользованияРабочегоВремени,
	|
	// Проверки
	|	СтрокиНачисления.ДатаНачала,
	|	СтрокиНачисления.ДатаОкончания,
	|	ВЫБОР
	|		КОГДА СтрокиНачисления.Сотрудник.ГоловнаяОрганизация = СтрокиНачисления.Ссылка.Организация
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ОшибкаНеСоответствиеСотрудникаИОрганизации,
    |   ВЫБОР
	|   	КОГДА СтрокиНачисления.ВидРасчета.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаНачислений.ИндексацияЗарплаты)
	|       ТОГДА СтрокиНачисления.Должность
	|       ИНАЧЕ NULL
	|	КОНЕЦ КАК Должность
	|ИЗ Документ."+Ссылка.Метаданные().Имя+".Начисления КАК СтрокиНачисления
	|
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ (  
	|   ВЫБРАТЬ
	|       РаботникиОрганизации.Сотрудник КАК Сотрудник,
	|       МИНИМУМ(ПриемРаботников.Период) КАК ДатаПриема
	|	ИЗ Документ.ИНАГРО_НачислениеЗарплатыРаботникамОрганизаций.РаботникиОрганизации КАК РаботникиОрганизации
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИНАГРО_РаботникиОрганизаций КАК ПриемРаботников
	|   ПО  ПриемРаботников.Сотрудник = РаботникиОрганизации.Сотрудник
	|   СГРУППИРОВАТЬ ПО
	|       РаботникиОрганизации.Сотрудник
	|) КАК Прием
	|ПО Прием.Сотрудник = СтрокиНачисления.Сотрудник
	|
	|ГДЕ СтрокиНачисления.Ссылка = &ДокументСсылка" + УсловиеНаФизлицоТекст + "
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|";

	Возврат Запрос.Выполнить();

	
КонецФункции // СформироватьЗапросПоНачислениям()

Функция СформироватьЗапросПоВзносы(ИмяТаблицы = "Взносы", Сотрудники = Неопределено )

	Запрос = Новый Запрос;
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка",				Ссылка);
	УсловиеНаФизлицоТекст="";
	Если Сотрудники <> Неопределено Тогда
		Запрос.УстановитьПараметр("парамСотрудники", Сотрудники);
		УсловиеНаФизлицоТекст = Символы.ПС + " И СтрокиВзносы.Сотрудник В (&парамСотрудники) ";	
	КонецЕсли;
	
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СтрокиВзносы.Ссылка.Организация		КАК Организация,
	|	СтрокиВзносы.Сотрудник,
	|	СтрокиВзносы.Сотрудник.ФизическоеЛицо КАК ФизическоеЛицо,
	|	СтрокиВзносы.ВидРасчета,
	|	СтрокиВзносы.Ссылка.ПериодРегистрации КАК ПериодРегистрации,
	|	СтрокиВзносы.Ссылка.ПериодРегистрации КАК Период,
	|	СтрокиВзносы.Ссылка.ПериодРегистрации КАК ПериодВзаиморасчетов,
	|	СтрокиВзносы.НомерСтроки			КАК НомерСтроки,
	|	СтрокиВзносы.НомерСтроки			КАК НомерСтрокиТЧ,
	|	СтрокиВзносы.БазовыйПериодНачало	КАК БазовыйПериодНачало,
	|	СтрокиВзносы.БазовыйПериодКонец		КАК БазовыйПериодКонец,
	|	СтрокиВзносы.ДатаНачала				КАК ДатаНачала,
	|	СтрокиВзносы.ДатаОкончания			КАК ДатаОкончания,
	|	СтрокиВзносы.Предел,
	|	СтрокиВзносы.Налог,
	|	СтрокиВзносы.СтатьяНалоговойДекларации,
	|	СтрокиВзносы.Ставка,
	|	СтрокиВзносы.СтавкаПолная,
	|	СтрокиВзносы.РезультатПолная,
	|	СтрокиВзносы.КоэффициентСтавки,
	|	СтрокиВзносы.МинимальнаяБаза,
	|	СтрокиВзносы.НомерПорога,
	|	СтрокиВзносы.База,
	|	СтрокиВзносы.БазаОтпускные,
	|	СтрокиВзносы.БазаВзноса,
	|	СтрокиВзносы.БазаВычет,
	|	СтрокиВзносы.Результат КАК Сумма,
	|	СтрокиВзносы.Результат КАК Результат,
	|	СтрокиВзносы.БазаДоначисление,
	|	СтрокиВзносы.РезультатДоначисление,
	|	СтрокиВзносы.Сторно,
	|	СтрокиВзносы.ОтработаноДней,
	|	СтрокиВзносы.ОтработаноДнейВсего,
	|	СтрокиВзносы.ВидРасчета.СпособРасчета КАК СпособРасчета,
	|	СтрокиВзносы.КодКатегорииЗЛ КАК КодКатегорииЗЛ,
	|	СтрокиВзносы.ТипНачисления  КАК ТипНачисления,
	|	СтрокиВзносы.Авторасчет КАК Авторасчет
	|ИЗ
	|	Документ.ИНАГРО_НачислениеЗарплатыРаботникамОрганизаций."+ИмяТаблицы+" КАК СтрокиВзносы
	|ГДЕ
	|	СтрокиВзносы.Ссылка = &ДокументСсылка " + УсловиеНаФизлицоТекст + "
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоВзносы()

Функция СформироватьЗапросПоНДФЛ( Сотрудники = Неопределено )
	
	Запрос = Новый Запрос;
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка", Ссылка);
	Если НЕ (Сотрудники = Неопределено) Тогда
		Запрос.УстановитьПараметр("парамСотрудники", Сотрудники);
		УсловиеНаФизлицоТекст = " И СтрокиНДФЛ.Сотрудник В (&парамСотрудники) ";	
	Иначе
		УсловиеНаФизлицоТекст="";
	КонецЕсли;
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ 
	|	СтрокиНДФЛ.Ссылка.Организация КАК Организация,
	|	СтрокиНДФЛ.Ссылка.ПериодРегистрации КАК Период,
	|	СтрокиНДФЛ.Ссылка.ПериодРегистрации КАК ПериодВзаиморасчетов,	
	|	СтрокиНДФЛ.НомерСтроки,
	|	СтрокиНДФЛ.Сотрудник КАК Контрагент,
	|	СтрокиНДФЛ.ВидСтавки,
	|	СтрокиНДФЛ.ДоходНДФЛ,
	|	НАЧАЛОПЕРИОДА(СтрокиНДФЛ.НалоговыйПериод, МЕСЯЦ) КАК НалоговыйПериод,
	|	СтрокиНДФЛ.Льгота,
	|	СтрокиНДФЛ.Налог,
	|	СтрокиНДФЛ.Доход,
	|	СтрокиНДФЛ.КоличествоЛьгот,
	|	СтрокиНДФЛ.УвеличеннаяСтавка,
	|	СтрокиНДФЛ.ДоходПолный,
	|	СтрокиНДФЛ.Авторасчет КАК Авторасчет
	|ИЗ
	|	Документ.ИНАГРО_НачислениеЗарплатыРаботникамОрганизаций.НДФЛ КАК СтрокиНДФЛ
	|ГДЕ
	|	СтрокиНДФЛ.Ссылка = &ДокументСсылка" + УсловиеНаФизлицоТекст + "
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Возврат Запрос.Выполнить();
	
КонецФункции // СформироватьЗапросПоНДФЛ()

Функция СформироватьЗапросПоУдержания( Сотрудники = Неопределено )

	Запрос = Новый Запрос;
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка",	Ссылка);
	
	УсловиеНаСотрудникаТекст="";
	Если Сотрудники <> Неопределено Тогда
		Запрос.УстановитьПараметр("парамСотрудник", Сотрудники);
		УсловиеНаСотрудникаТекст = " И СтрокиУдержания.Сотрудник В (&парамСотрудник) ";	
	КонецЕсли;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СтрокиУдержания.Сотрудник,
	|	СтрокиУдержания.ВидРасчета,
	|	СтрокиУдержания.ДатаНачала,
	|	СтрокиУдержания.ДатаОкончания,
	|	СтрокиУдержания.ДокументОснование,
	|	СтрокиУдержания.ДатаНачала КАК БазовыйПериодНачало,
	|	КОНЕЦПЕРИОДА(СтрокиУдержания.ДатаОкончания, ДЕНЬ) КАК БазовыйПериодКонец,
	|	СтрокиУдержания.НомерСтроки КАК НомерСтроки,
	|	СтрокиУдержания.Показатель1,
	|	СтрокиУдержания.Показатель2,
	|	СтрокиУдержания.Показатель3,
	|	СтрокиУдержания.Результат,
	|	СтрокиУдержания.Сторно,
	|	СтрокиУдержания.СпособОтраженияВБухУчете,
	|	СтрокиУдержания.ВидРасчета.СпособРасчета КАК СпособРасчета,
	|	СтрокиУдержания.Авторасчет КАК Авторасчет
	|ИЗ
	|	Документ.ИНАГРО_НачислениеЗарплатыРаботникамОрганизаций.Удержания КАК СтрокиУдержания
	|ГДЕ
	|	СтрокиУдержания.Ссылка = &ДокументСсылка " + УсловиеНаСотрудникаТекст + "
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоУдержания()

Функция СформироватьЗапросПоНачислениямПроводки(Сотрудники)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументСсылка", Ссылка);
 	Запрос.УстановитьПараметр("парамСотрудники", Сотрудники);

	Запрос.Текст =
	"ВЫБРАТЬ
	// Свойства
	|	СтрокиНачисления.Ссылка.ПериодРегистрации	КАК ПериодРегистрации,
	// Фактически это период действия, но у регистра мы не можем использовать 
	// реквизиты ПериодДействия без графиков и т.п. потому берем Базовый период, 
	// но подразумеваем, что это период действия.
	|	НАЧАЛОПЕРИОДА(СтрокиНачисления.ДатаНачала, МЕСЯЦ) КАК БазовыйПериодНачало, 
	|	НАЧАЛОПЕРИОДА(СтрокиНачисления.ДатаОкончания, МЕСЯЦ) КАК БазовыйПериодКонец,
	|	ЗНАЧЕНИЕ(ПланВидовРасчета.ИНАГРО_Отражение.Начисление) КАК ВидРасчета,
	|	СтрокиНачисления.ВидРасчета КАК ВидРасчетаБазы,
	|
	// Измерения
	|	СтрокиНачисления.Ссылка.Организация КАК организация,
	|	СтрокиНачисления.Сотрудник,
	|	СтрокиНачисления.Назначение,
	|
	// Ресурсы
	|	СтрокиНачисления.Результат,
	|
	// Реквизиты
	|	СтрокиНачисления.ПодразделениеОрганизации,
	|	СтрокиНачисления.НомерСтроки,
	|	СтрокиНачисления.НалоговоеНазначениеДоходовИЗатрат,
	|	СтрокиНачисления.НалоговоеНазначение,
	|	СтрокиНачисления.ВзносыОсновногоНачисления,
	|	СтрокиНачисления.СпособОтраженияЕСВФОТ,
	|	СтрокиНачисления.СтатьяЗатрат,
	|	СтрокиНачисления.НоменклатурнаяГруппа,
	|	СтрокиНачисления.ОбъектСтроительства,
	|	СтрокиНачисления.СчетДт,
	|	СтрокиНачисления.СубконтоДт1,
	|	СтрокиНачисления.СубконтоДт2,
	|	СтрокиНачисления.СубконтоДт3,
	|	СтрокиНачисления.СчетКт,
	|	СтрокиНачисления.СубконтоКт1,
	|	СтрокиНачисления.СубконтоКт2,
	|	СтрокиНачисления.СубконтоКт3
	|
	|ИЗ Документ."+Ссылка.Метаданные().Имя+".НачисленияПроводки КАК СтрокиНачисления
	|
	|ГДЕ	СтрокиНачисления.Ссылка = &ДокументСсылка
	|	И	СтрокиНачисления.Сотрудник В (&парамСотрудники)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|";

	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоНачислениямПроводки()

Функция СформироватьЗапросПоОтражениюВУчете()
	
	Запрос = Новый Запрос();
	
	Запрос.УстановитьПараметр("парамРегистратор", Ссылка);
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ОтражениеЗарплаты.НомерСтроки				КАК НомерСтроки,
	|
	|	ОтражениеЗарплаты.НалоговоеНазначениеДоходовИЗатрат 							КАК НалоговоеНазначениеДоходовИЗатрат,
	|	ОтражениеЗарплаты.НалоговоеНазначениеДоходовИЗатрат.ВидНалоговойДеятельности 	КАК ВидНалоговойДеятельности,
	|	ОтражениеЗарплаты.НалоговоеНазначение				 							КАК НалоговоеНазначение,
	|
	|	ВЫБОР	КОГДА ОтражениеЗарплаты.СубконтоДт1 ССЫЛКА Справочник.ПодразделенияОрганизаций 
	|				ТОГДА ОтражениеЗарплаты.СубконтоДт1 
	|			КОГДА ОтражениеЗарплаты.СубконтоДт2 ССЫЛКА Справочник.ПодразделенияОрганизаций 
	|				ТОГДА ОтражениеЗарплаты.СубконтоДт2 
	|			КОГДА ОтражениеЗарплаты.СубконтоДт3 ССЫЛКА Справочник.ПодразделенияОрганизаций 
	|				ТОГДА ОтражениеЗарплаты.СубконтоДт3 
	|			ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка) 
	|	КОНЕЦ 	КАК ПодразделениеОрганизации,
	|
	|	ВЫБОР	КОГДА ОтражениеЗарплаты.СубконтоДт1 ССЫЛКА Справочник.СтатьиЗатрат 
	|				ТОГДА ОтражениеЗарплаты.СубконтоДт1 
	|			КОГДА ОтражениеЗарплаты.СубконтоДт2 ССЫЛКА Справочник.СтатьиЗатрат 
	|				ТОГДА ОтражениеЗарплаты.СубконтоДт2 
	|			КОГДА ОтражениеЗарплаты.СубконтоДт3 ССЫЛКА Справочник.СтатьиЗатрат 
	|				ТОГДА ОтражениеЗарплаты.СубконтоДт3 
	|			ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СтатьиЗатрат.ПустаяСсылка) 
	|	КОНЕЦ 	КАК СтатьяЗатрат,
	|
	|	ВЫБОР	КОГДА ОтражениеЗарплаты.СубконтоДт1 ССЫЛКА Справочник.НоменклатурныеГруппы 
	|				ТОГДА ОтражениеЗарплаты.СубконтоДт1 
	|			КОГДА ОтражениеЗарплаты.СубконтоДт2 ССЫЛКА Справочник.НоменклатурныеГруппы 
	|				ТОГДА ОтражениеЗарплаты.СубконтоДт2 
	|			КОГДА ОтражениеЗарплаты.СубконтоДт3 ССЫЛКА Справочник.НоменклатурныеГруппы 
	|				ТОГДА ОтражениеЗарплаты.СубконтоДт3 
	|			ИНАЧЕ ЗНАЧЕНИЕ(Справочник.НоменклатурныеГруппы.ПустаяСсылка) 
	|	КОНЕЦ	КАК НоменклатурнаяГруппа,
	|
	|	ОтражениеЗарплаты.СчетДт				КАК СчетДт,
	|	ОтражениеЗарплаты.СчетДт.Наименование	КАК НаименованиеСчетДт,
	|	ОтражениеЗарплаты.СубконтоДт1			КАК СубконтоДт1,
	|	ОтражениеЗарплаты.СубконтоДт2			КАК СубконтоДт2,
	|	ОтражениеЗарплаты.СубконтоДт3			КАК СубконтоДт3,
	|	ВидСубконтоДт1.ВидСубконто				КАК ВидСубконтоДт1,
	|	ВидСубконтоДт2.ВидСубконто 				КАК ВидСубконтоДт2,
	|	ВидСубконтоДт3.ВидСубконто 				КАК ВидСубконтоДт3,
	|
	|	ОтражениеЗарплаты.СчетКт				КАК СчетКт,
	|	ОтражениеЗарплаты.СубконтоКт1			КАК СубконтоКт1,
	|	ОтражениеЗарплаты.СубконтоКт2			КАК СубконтоКт2,
	|	ОтражениеЗарплаты.СубконтоКт3			КАК СубконтоКт3,
	|	ВидСубконтоКт1.ВидСубконто 				КАК ВидСубконтоКт1,
	|	ВидСубконтоКт2.ВидСубконто 				КАК ВидСубконтоКт2,
	|	ВидСубконтоКт3.ВидСубконто 				КАК ВидСубконтоКт3,
    |
	|	ОтражениеЗарплаты.НеОтражатьВБУ			КАК НеОтражатьВБУ,
	|	ОтражениеЗарплаты.Сумма					КАК Сумма
	|
	|ИЗ	Документ."+Метаданные().Имя+".ОтражениеВРеглУчете КАК ОтражениеЗарплаты
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Хозрасчетный.ВидыСубконто КАК ВидСубконтоДт1
	|ПО ВидСубконтоДт1.Ссылка = ОтражениеЗарплаты.СчетДт И (ВидСубконтоДт1.НомерСтроки = 1)
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Хозрасчетный.ВидыСубконто КАК ВидСубконтоДт2
	|ПО ВидСубконтоДт2.Ссылка = ОтражениеЗарплаты.СчетДт И (ВидСубконтоДт2.НомерСтроки = 2)
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Хозрасчетный.ВидыСубконто КАК ВидСубконтоДт3
	|ПО ВидСубконтоДт3.Ссылка = ОтражениеЗарплаты.СчетДт И (ВидСубконтоДт3.НомерСтроки = 3)
	|
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Хозрасчетный.ВидыСубконто КАК ВидСубконтоКт1
	|ПО ВидСубконтоКт1.Ссылка = ОтражениеЗарплаты.СчетКт И (ВидСубконтоКт1.НомерСтроки = 1)
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Хозрасчетный.ВидыСубконто КАК ВидСубконтоКт2
	|ПО ВидСубконтоКт2.Ссылка = ОтражениеЗарплаты.СчетКт И (ВидСубконтоКт2.НомерСтроки = 2)
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Хозрасчетный.ВидыСубконто КАК ВидСубконтоКт3
	|ПО ВидСубконтоКт3.Ссылка = ОтражениеЗарплаты.СчетКт И (ВидСубконтоКт3.НомерСтроки = 3)
	|
	|
	|ГДЕ	ОтражениеЗарплаты.Ссылка = &парамРегистратор
	|";
	
	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос.Выполнить();
	
КонецФункции  // СформироватьЗапросПоОтражениюВУчете()

Функция СформироватьЗапросНачисленияПроводки(Сотрудники)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("парамПериодРегистрации"		, ПериодРегистрации);
	Запрос.УстановитьПараметр("парамСотрудники"				, Сотрудники);
	
	ТекстСпособОтраженияФСС ="ЗНАЧЕНИЕ(Справочник.СпособыОтраженияЗарплатыВРеглУчете.ОтражениеБольничныхЗаСчетФСС)";
	
	// Основная таблица
	ТекстЗапросаВТ = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
         |	Основной.Регистратор КАК Регистратор,
         |	Основной.НомерСтроки КАК НомерСтроки,
         |	Основной.Сотрудник КАК Сотрудник,
         |	Основной.Назначение КАК Назначение,
         |	Основной.ДокументОснование КАК ДокументОснование,
         |	Основной.ВидРасчета КАК ВидРасчета,
         |	Основной.Результат КАК Результат,
         |	Основной.ПериодДействияНачало КАК ПериодДействияНачало,
         |	Основной.ПериодДействияКонец КАК ПериодДействияКонец,
         |	Основной.БазовыйПериодНачало КАК БазовыйПериодНачало,
         |	Основной.БазовыйПериодКонец КАК БазовыйПериодКонец,
         |	Основной.СпособОтраженияВБухучете КАК СпособОтраженияВБухучете,
         |	Основной.ПодразделениеОрганизации КАК ПодразделениеОрганизации
		 |ПОМЕСТИТЬ ВТОсновнаяТаблица
         |ИЗ
         |	РегистрРасчета.ИНАГРО_Начисления КАК Основной
         |ГДЕ
         |	Основной.Сотрудник В(&парамСотрудники)
         |	И НАЧАЛОПЕРИОДА(Основной.ПериодРегистрации, МЕСЯЦ) = &парамПериодРегистрации
         |  И (НЕ Основной.Регистратор ССЫЛКА Документ.УдалитьИНАГРО_ВводЛюбогоРасчета)	                 
		 |ИНДЕКСИРОВАТЬ ПО
		 |	Регистратор,
		 |	НомерСтроки,
		 |	Сотрудник,
		 |	Назначение,
		 |	ВидРасчета
		 |  ";
	Запрос.Текст = ТекстЗапросаВТ;
	Запрос.Выполнить();

	
	//	ВТПлановыеНачисления
	Если Истина Тогда
		//	Описание:
		// 		РеглУчетПлановыхНачисленийРаботниковОрганизаций.
		//
		ТекстЗапросаВТ = "ВЫБРАТЬ
             |	ОсновнойПериод.Регистратор,
             |	ОсновнойПериод.НомерСтроки,
             |	ОсновнойПериод.Сотрудник,
             |	ОсновнойПериод.Назначение,
             |	ОсновнойПериод.ВидРасчета,
             |	ПлановыеНачисления.СпособОтраженияВБухучете
			 |ПОМЕСТИТЬ ВТПлановыеНачисления
             |ИЗ
             |	(ВЫБРАТЬ
             |		Основной.Регистратор КАК Регистратор,
             |		Основной.НомерСтроки КАК НомерСтроки,
             |		Основной.Сотрудник КАК Сотрудник,
             |		Основной.Назначение КАК Назначение,
             |		Основной.ДокументОснование КАК ДокументОснование,
             |		Основной.ВидРасчета КАК ВидРасчета,
             |		ПлановыеНачисления.ВидРасчета КАК ВидРасчета1,
             |		МАКСИМУМ(ПлановыеНачисления.Период) КАК Период
             |	ИЗ
             |		ВТОсновнаяТаблица КАК Основной
             |			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИНАГРО_ПлановыеНачисленияРаботниковОрганизаций КАК ПлановыеНачисления
             |			ПО Основной.Назначение = ПлановыеНачисления.Сотрудник
             |				И Основной.ДокументОснование = ПлановыеНачисления.ДокументОснование
             |				И (Основной.ВидРасчета = ПлановыеНачисления.ВидРасчета)
             |				И (ПлановыеНачисления.Действует)
             |				И (ПлановыеНачисления.Период <= Основной.БазовыйПериодНачало
             |					ИЛИ ПлановыеНачисления.ДокументОснование ССЫЛКА Документ.ИНАГРО_ДоговорНаВыполнениеРаботСФизЛицом
             |						И ПлановыеНачисления.ДокументОснование <> ЗНАЧЕНИЕ(Документ.ИНАГРО_ДоговорНаВыполнениеРаботСФизЛицом.ПустаяСсылка))
             |	
             |	СГРУППИРОВАТЬ ПО
             |		Основной.Регистратор,
             |		Основной.НомерСтроки,
             |		Основной.Сотрудник,
             |		Основной.Назначение,
             |		Основной.ДокументОснование,
             |		Основной.ВидРасчета,
             |		ПлановыеНачисления.ВидРасчета) КАК ОсновнойПериод
             |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИНАГРО_ПлановыеНачисленияРаботниковОрганизаций КАК ПлановыеНачисления
             |		ПО ОсновнойПериод.Назначение = ПлановыеНачисления.Сотрудник
             |			И ОсновнойПериод.ВидРасчета = ПлановыеНачисления.ВидРасчета
             |			И ОсновнойПериод.ДокументОснование = ПлановыеНачисления.ДокументОснование
             |			И ОсновнойПериод.Период = ПлановыеНачисления.Период";
	
		Запрос.Текст = ТекстЗапросаВТ;
		Запрос.Выполнить();
		ТекстЗапросаВТПлановыеНачисления = "ВТПлановыеНачисления";
	КонецЕсли;
	Запрос.Текст = "ВЫБРАТЬ * ИЗ ВТПлановыеНачисления";
	
	//	ВТПлановыеНачисленияОсновные
	Если Истина Тогда
		//	Описание:
		// 		РеглУчетПлановыхНачисленийРаботниковОрганизаций.
		//
		ТекстЗапросаВТ = "
		|		ВЫБРАТЬ
		|			ОсновнойПериод.Регистратор,
		|			ОсновнойПериод.НомерСтроки,
		|			ОсновнойПериод.Сотрудник,
		|			ОсновнойПериод.Назначение,
		|			РаботникиОрганизаций.СпособОтраженияВБухучете
		|ПОМЕСТИТЬ ВТПлановыеНачисленияОсновные	
		|		ИЗ(
		|			ВЫБРАТЬ
		|				Основной.Регистратор,
		|				Основной.НомерСтроки,
		|				Основной.Сотрудник,
		|				Основной.Назначение,
		|				МАКСИМУМ(РаботникиОрганизаций.Период)	КАК Период
		|			ИЗ ВТОсновнаяТаблица КАК Основной
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИНАГРО_РаботникиОрганизаций КАК РаботникиОрганизаций
		|			ПО		Основной.Назначение = РаботникиОрганизаций.Сотрудник 
		|				И	РаботникиОрганизаций.Период <= Основной.БазовыйПериодНачало
		|			СГРУППИРОВАТЬ ПО
		|				Основной.Регистратор,
		|				Основной.НомерСтроки,
		|				Основной.Сотрудник,
		|				Основной.Назначение
		|		) КАК ОсновнойПериод
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИНАГРО_РаботникиОрганизаций КАК РаботникиОрганизаций
		|		ПО		ОсновнойПериод.Назначение = РаботникиОрганизаций.Сотрудник 
		|			И	ОсновнойПериод.Период = РаботникиОрганизаций.Период
		|
		|
		|";
		Запрос.Текст = ТекстЗапросаВТ;
		Запрос.Выполнить();
		ТекстЗапросаВТПлановыеНачисленияОсновные = "ВТПлановыеНачисленияОсновные";
	КонецЕсли;
	Запрос.Текст = "ВЫБРАТЬ * ИЗ ВТПлановыеНачисленияОсновные";

	// ВТОсновныеНачисления
	Если Истина Тогда
		//	Описание:
		// 		РегистрРасчета.ИНАГРО_Начисления.
		//		
		
		// Вначале тот способ который мы выбрали в документе, 
		// потом при приеме на работу лично виду расчета конкретного Сотрудника
		// потом при приеме на работу сотруднику в ТЧ РаботникиОрганизации
		// и наиболее низкий приоритет - в плане видов расчета.
		ТекстПараметра = "		 
		|				
		|	ВЫБОР
		|   	КОГДА		Начисления.СпособОтраженияВБухУчете <> ЗНАЧЕНИЕ(Справочник.СпособыОтраженияЗарплатыВРеглУчете.ПустаяСсылка)
		|		 	ТОГДА 	ВЫБОР КОГДА Начисления.СпособОтраженияВБухУчете <> ЗНАЧЕНИЕ(Справочник.СпособыОтраженияЗарплатыВРеглУчете.ОтражениеБольничныхЗаСчетФСС)
		|		 	              ТОГДА Начисления.СпособОтраженияВБухУчете.ИмяПараметра
		|		 	              ИНАЧЕ СпособОтраженияФСС.ИмяПараметра
		|		 	              КОНЕЦ
		|		КОГДА		ПлановыеНачисления.СпособОтраженияВБухучете <> ЗНАЧЕНИЕ(Справочник.СпособыОтраженияЗарплатыВРеглУчете.ПустаяСсылка)
		|			ТОГДА		ПлановыеНачисления.СпособОтраженияВБухучете.ИмяПараметра 		 
		|		КОГДА		Начисления.ВидРасчета.СпособОтраженияВБухучете <> ЗНАЧЕНИЕ(Справочник.СпособыОтраженияЗарплатыВРеглУчете.ПустаяСсылка)
		|			ТОГДА	ВЫБОР КОГДА Начисления.ВидРасчета.СпособОтраженияВБухУчете <> ЗНАЧЕНИЕ(Справочник.СпособыОтраженияЗарплатыВРеглУчете.ОтражениеБольничныхЗаСчетФСС)
		|		 	              ТОГДА Начисления.ВидРасчета.СпособОтраженияВБухУчете.ИмяПараметра
		|		 	              ИНАЧЕ СпособОтраженияФСС.ИмяПараметра
		|		 	              КОНЕЦ
		|		КОГДА		УчетОсновногоЗаработка.СпособОтраженияВБухучете <> ЗНАЧЕНИЕ(Справочник.СпособыОтраженияЗарплатыВРеглУчете.ПустаяСсылка)
		|			ТОГДА	УчетОсновногоЗаработка.СпособОтраженияВБухучете.ИмяПараметра 
		|		ИНАЧЕ ОтражениеНачисленийПоУмолчанию.ИмяПараметра 
		|	КОНЕЦ ";
		
		
		ТекстЗапросаВТ = "
		|	ВЫБРАТЬ
		|		Начисления.Регистратор					КАК Регистратор,
		|		Начисления.НомерСтроки					КАК НомерСтроки,
		|		Начисления.Сотрудник					КАК Сотрудник,
		|		Начисления.Назначение					КАК Назначение,
		|		Начисления.ПодразделениеОрганизации		КАК ПодразделениеОрганизации,
		|		           
		|   	" + СтрЗаменить(ТекстПараметра,"ИмяПараметра","СчетДт")+"						КАК СчетДт,
		|   	" + СтрЗаменить(ТекстПараметра,"ИмяПараметра","СубконтоДт1")+"					КАК СубконтоДт1,
		|   	" + СтрЗаменить(ТекстПараметра,"ИмяПараметра","СубконтоДт2")+"					КАК СубконтоДт2,
		|   	" + СтрЗаменить(ТекстПараметра,"ИмяПараметра","СубконтоДт3")+"					КАК СубконтоДт3,
		|		
		|   	ВЫБОР КОГДА Начисления.ВидРасчета.СчетУчета <> ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)
		|				ТОГДА Начисления.ВидРасчета.СчетУчета
		|   			ИНАЧЕ (" + СтрЗаменить(ТекстПараметра,"ИмяПараметра","СчетКт")+")						
		|		КОНЕЦ                                                                                 КАК СчетКт,
		|		
		|   	" + СтрЗаменить(ТекстПараметра,"ИмяПараметра","СубконтоКт1")+"					КАК СубконтоКт1,
		|   	" + СтрЗаменить(ТекстПараметра,"ИмяПараметра","СубконтоКт2")+"					КАК СубконтоКт2,
		|   	" + СтрЗаменить(ТекстПараметра,"ИмяПараметра","СубконтоКт3")+"					КАК СубконтоКт3,
		|   	" + СтрЗаменить(ТекстПараметра,"ИмяПараметра","ИНАГРО_ВзносыОсновногоНачисления")+"	КАК ВзносыОсновногоНачисления,
		|   	" + СтрЗаменить(ТекстПараметра,"ИмяПараметра","СпособОтраженияЕСВФОТ")+"		КАК СпособОтраженияЕСВФОТ,
		|		" + СтрЗаменить(ТекстПараметра,"ИмяПараметра","НалоговоеНазначениеДоходовИЗатрат")+"			КАК НалоговоеНазначениеДоходовИЗатрат,
		|		" + СтрЗаменить(ТекстПараметра,"ИмяПараметра","НалоговоеНазначение")+"			КАК НалоговоеНазначение,
		|		
		|		Начисления.ВидРасчета				КАК ВидРасчета,
		|		Начисления.Результат				КАК Результат,
		|		Начисления.ПериодДействияНачало		КАК ДатаНачала,
		|		Начисления.ПериодДействияКонец		КАК ДатаОкончания
		|	
		|ПОМЕСТИТЬ ВТОсновныеНачисления	
		|	ИЗ	ВТОсновнаяТаблица КАК Начисления
		|				
		|	// Начисления у которых прописана своя проводка		
		|	ЛЕВОЕ СОЕДИНЕНИЕ " + ТекстЗапросаВТПлановыеНачисления + " КАК ПлановыеНачисления
		|	ПО		Начисления.Регистратор = ПлановыеНачисления.Регистратор	
		|		И	Начисления.НомерСтроки = ПлановыеНачисления.НомерСтроки	
		|	ЛЕВОЕ СОЕДИНЕНИЕ "+ТекстЗапросаВТПлановыеНачисленияОсновные+" КАК УчетОсновногоЗаработка
		|	ПО		Начисления.Регистратор = УчетОсновногоЗаработка.Регистратор	
		|		И	Начисления.НомерСтроки = УчетОсновногоЗаработка.НомерСтроки	
       	|				
		|	// способ отражения по умолчанию		
		|	ЛЕВОЕ СОЕДИНЕНИЕ (	ВЫБРАТЬ * ИЗ Справочник.СпособыОтраженияЗарплатыВРеглУчете 
		|						ГДЕ Ссылка = ЗНАЧЕНИЕ(Справочник.СпособыОтраженияЗарплатыВРеглУчете.ОтражениеНачисленийПоУмолчанию)
		|					) КАК ОтражениеНачисленийПоУмолчанию
		|	ПО ИСТИНА			
		|				
		|				
		|	// способ отражения больничных ФСС		
		|	ЛЕВОЕ СОЕДИНЕНИЕ (	ВЫБРАТЬ * ИЗ Справочник.СпособыОтраженияЗарплатыВРеглУчете 
		|						ГДЕ Ссылка = ЗНАЧЕНИЕ(Справочник.СпособыОтраженияЗарплатыВРеглУчете.ОтражениеБольничныхЗаСчетФСС)
		|					) КАК СпособОтраженияФСС
		|	ПО ИСТИНА
        |
		|ГДЕ	ИСТИНА 
		|	И	"+СтрЗаменить(ТекстПараметра,"ИмяПараметра","Ссылка")+" <> ЗНАЧЕНИЕ(Справочник.СпособыОтраженияЗарплатыВРеглУчете.НеОтражатьВБухучете)
		|";
		Запрос.Текст = ТекстЗапросаВТ;
		Запрос.Выполнить();
		ТекстЗапросаВТОсновныеНачисления = "ВТОсновныеНачисления";
		
	КонецЕсли;
	Запрос.Текст = "ВЫБРАТЬ * ИЗ ВТОсновныеНачисления";
	
	ТекстЗапроса = 
	"ВЫБРАТЬ      
	|	ДанныеУчета.НомерСтроки,
	|	ДанныеУчета.Сотрудник.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ДанныеУчета.Сотрудник,
	|	ДанныеУчета.Назначение,
	|	ДанныеУчета.ДатаНачала			КАК ДатаНачала,
	|	ДанныеУчета.ДатаОкончания		КАК ДатаОкончания,
	|
	|	ДанныеУчета.ВидРасчета,
	|	ДанныеУчета.ПодразделениеОрганизации,
	|	ДанныеУчета.Результат,
	|	ДанныеУчета.СчетДт,
	|	ДанныеУчета.СубконтоДт1,
	|	ДанныеУчета.СубконтоДт2,
	|	ДанныеУчета.СубконтоДт3,
	|	ДанныеУчета.СчетКт,
	|	ДанныеУчета.СубконтоКт1,
	|	ДанныеУчета.СубконтоКт2,
	|	ДанныеУчета.СубконтоКт3,
	|	ДанныеУчета.НалоговоеНазначениеДоходовИЗатрат,
	|	ДанныеУчета.НалоговоеНазначение,
	|
	|	ДанныеУчета.ВзносыОсновногоНачисления,
	|	ДанныеУчета.СпособОтраженияЕСВФОТ,
	|	ВЫБОР
	|	 КОГДА ДанныеУчета.Регистратор ССЫЛКА Документ.ИНАГРО_НачислениеПоБольничномуЛисту
	|	  ТОГДА ДанныеУчета.Регистратор.ПричинаНетрудоспособности.СтатьяРасчетовСФСС
	|	  ИНАЧЕ 0
	|	КОНЕЦ КАК СтатьяРасчетовСФСС,
	|	
	|// --- ДЕБЕТ	
	|	ЕСТЬNULL(ВидыСубконтоСотрудникиДт.НомерСтроки, 0) КАК НомерСубконтоСотрудникиДт,
	|	ЕСТЬNULL(ВидыСубконтоПодразделенияДт.НомерСтроки, 0) КАК НомерСубконтоПодразделенияДт,
	|	ЕСТЬNULL(ВидыСубконтоСтатьиНалоговыхДекларацийДт.НомерСтроки, 0) КАК НомерСубконтоСтатьиНалоговыхДекларацийДт,
	|	
	|// --- КРЕДИТ	
	|	ЕСТЬNULL(ВидыСубконтоСотрудникиКт.НомерСтроки, 0) КАК НомерСубконтоСотрудникиКт
	|	
	|
	|ИЗ	" + ТекстЗапросаВТОсновныеНачисления + " КАК ДанныеУчета
	|	
	|ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Хозрасчетный.ВидыСубконто КАК ВидыСубконтоСотрудникиДт
	|ПО   ДанныеУчета.СчетДт <> ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка) 
	|	И ДанныеУчета.СчетДт = ВидыСубконтоСотрудникиДт.Ссылка 
	|	И ВидыСубконтоСотрудникиДт.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.РаботникиОрганизаций)
	|	
	|ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Хозрасчетный.ВидыСубконто КАК ВидыСубконтоПодразделенияДт
	|ПО   ДанныеУчета.СчетДт <> ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка) 
	|	И ДанныеУчета.СчетДт = ВидыСубконтоПодразделенияДт.Ссылка 
	|	И ВидыСубконтоПодразделенияДт.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Подразделения)
	|	
	|ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Хозрасчетный.ВидыСубконто КАК ВидыСубконтоСтатьиНалоговыхДекларацийДт
	|ПО   ДанныеУчета.СчетДт <> ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка) 
	|	И ДанныеУчета.СчетДт = ВидыСубконтоСтатьиНалоговыхДекларацийДт.Ссылка 
	|	И ВидыСубконтоСтатьиНалоговыхДекларацийДт.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиНалоговыхДеклараций)
	|	
	|ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Хозрасчетный.ВидыСубконто КАК ВидыСубконтоСотрудникиКт
	|ПО   ДанныеУчета.СчетКт <> ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка) 
	|	И ДанныеУчета.СчетКт = ВидыСубконтоСотрудникиКт.Ссылка 
	|	И ВидыСубконтоСотрудникиКт.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.РаботникиОрганизаций)
	|                                            
	|УПОРЯДОЧИТЬ ПО
	|	Сотрудник,
	|	Назначение,
	|	ВидРасчета
	|";
	
	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос.Выполнить();
	
КонецФункции

// Формирует часть текста запроса.
//
Функция СформироватьЗапросПоОтражениюПроводки() Экспорт
	
	
	Записать();  // запишем документ
	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("парамРегистратор", Ссылка);
	
	ТекстПараметрыНачисления = "
	|	Основной.НомерСтроки,
	|	Основной.НалоговоеНазначениеДоходовИЗатрат,
	|	Основной.НалоговоеНазначение,
	|
	|	Основной.СчетДт,
	|	Основной.СубконтоДт1,
	|	Основной.СубконтоДт2,
	|	Основной.СубконтоДт3,
	|	Основной.СчетКт,
	|	Основной.СубконтоКт1,
	|	Основной.СубконтоКт2,
	|	Основной.СубконтоКт3    
	|";
	
	ТекстПараметрыУдержания = "
	|		Основной.НомерСтроки,
	|		NULL				КАК НалоговоеНазначениеДоходовИЗатрат,
	|		NULL				КАК НалоговоеНазначение,
	|
	|		Основной.СчетДт,
	|		Основной.СубконтоДт1,
	|		Основной.СубконтоДт2,
	|		Основной.СубконтоДт3,
	|		Основной.СчетКт,
	|		Основной.СубконтоКт1,
	|		Основной.СубконтоКт2,
	|		Основной.СубконтоКт3    
	|";
	
	ТекстЗапроса  = "
	|   // --- Начисления
	|	ВЫБРАТЬ
	|		ЗНАЧЕНИЕ(ПланВидовРасчета.ИНАГРО_Отражение.Начисление) КАК ВидРасчета,
	|	
	|		Основной.Ссылка.ПериодРегистрации	КАК ПериодРегистрации,
	|		Основной.ДатаНачала					КАК БазовыйПериодНачало,
	|		Основной.ДатаОкончания				КАК БазовыйПериодКонец,
	|		NULL								КАК ПериодСтавки,
	|	
	|		Основной.Ссылка.Организация	КАК Организация,
	|		Основной.Сотрудник			КАК Сотрудник,
	|		Основной.ВидРасчета			КАК ВидРасчетаБазы,
	|		NULL						КАК Налог,
	|	
	|		Основной.ВзносыОсновногоНачисления	КАК ВзносыОсновногоНачисления,
	|		Основной.СпособОтраженияЕСВФОТ		КАК СпособОтраженияЕСВФОТ,
	|	
	|		"+ТекстПараметрыНачисления+",
	|		Основной.Результат
	|	ИЗ	Документ.ИНАГРО_НачислениеЗарплатыРаботникамОрганизаций.НачисленияПроводки КАК Основной
	|	ГДЕ Основной.Ссылка = &парамРегистратор
	|
	|   // --- ВзносыФОТ
	|	ОБЪЕДИНИТЬ ВСЕ
	|	ВЫБРАТЬ
	|		ЗНАЧЕНИЕ(ПланВидовРасчета.ИНАГРО_Отражение.ВзносыФОТ) КАК ВидРасчета,
	|	
	|		Основной.Ссылка.ПериодРегистрации	КАК ПериодРегистрации,
	|		Основной.БазовыйПериодНачало		КАК БазовыйПериодНачало,
	|		КОНЕЦПЕРИОДА(Основной.БазовыйПериодНачало, МЕСЯЦ)	КАК БазовыйПериодКонец,
	|		Основной.ПериодСтавки				КАК ПериодСтавки,
	|	
	|		Основной.Ссылка.Организация	КАК Организация,
	|		Основной.Сотрудник			КАК Сотрудник,
	|		Основной.ВидРасчетаБазы		КАК ВидРасчетаБазы,
	|		Основной.Налог				КАК Налог,
	|	
	|		ЛОЖЬ	КАК ВзносыОсновногоНачисления,
	|		NULL	КАК СпособОтраженияЕСВФОТ,
	|	
	|		"+ТекстПараметрыНачисления+",
	|		Основной.Результат
	|	ИЗ	Документ.ИНАГРО_НачислениеЗарплатыРаботникамОрганизаций.ВзносыФОТПроводки КАК Основной
	|	ГДЕ Основной.Ссылка = &парамРегистратор
	|
	|
	|
	|   // --- Взносы
	|	ОБЪЕДИНИТЬ ВСЕ
	|	ВЫБРАТЬ
	|		ЗНАЧЕНИЕ(ПланВидовРасчета.ИНАГРО_Отражение.Взносы) КАК ВидРасчета,
	|	
	|		Основной.Ссылка.ПериодРегистрации				КАК ПериодРегистрации,
	|		Основной.БазовыйПериодНачало						КАК БазовыйПериодНачало,
	|		КОНЕЦПЕРИОДА(Основной.БазовыйПериодНачало, МЕСЯЦ)	КАК БазовыйПериодКонец,
	|		NULL												КАК ПериодСтавки,
	|	
	|		Основной.Ссылка.Организация	КАК Организация,
	|		Основной.Сотрудник			КАК Сотрудник,
	|		NULL						КАК ВидРасчетаБазы,
	|		Основной.Налог				КАК Налог,
	|	
	|		ЛОЖЬ	КАК ВзносыОсновногоНачисления,
	|		NULL	КАК СпособОтраженияЕСВФОТ,
	|	
	|		"+ТекстПараметрыУдержания+",
	|		Основной.Результат
	|	ИЗ	Документ.ИНАГРО_НачислениеЗарплатыРаботникамОрганизаций.ВзносыПроводки КАК Основной
	|	ГДЕ Основной.Ссылка = &парамРегистратор
	|
	|   // --- НДФЛ
	|	ОБЪЕДИНИТЬ ВСЕ
	|	ВЫБРАТЬ
	|		ЗНАЧЕНИЕ(ПланВидовРасчета.ИНАГРО_Отражение.НДФЛ) КАК ВидРасчета,
	|	
	|		Основной.Ссылка.ПериодРегистрации				КАК ПериодРегистрации,
	|		Основной.БазовыйПериодНачало						КАК БазовыйПериодНачало,
	|		КОНЕЦПЕРИОДА(Основной.БазовыйПериодНачало, МЕСЯЦ)	КАК БазовыйПериодКонец,
	|		NULL												КАК ПериодСтавки,
	|	
	|		Основной.Ссылка.Организация	КАК Организация,
	|		Основной.Сотрудник			КАК Сотрудник,
	|		NULL						КАК ВидРасчетаБазы,
	|		NULL						КАК Налог,
	|	
	|		ЛОЖЬ	КАК ВзносыОсновногоНачисления,
	|		NULL	КАК СпособОтраженияЕСВФОТ,
	|	
	|		"+ТекстПараметрыУдержания+",
	|		Основной.Результат
	|	ИЗ	Документ.ИНАГРО_НачислениеЗарплатыРаботникамОрганизаций.НДФЛПроводки КАК Основной
	|	ГДЕ Основной.Ссылка = &парамРегистратор
	|
	|   // --- Удержания
	|	ОБЪЕДИНИТЬ ВСЕ
	|	ВЫБРАТЬ
	|		ЗНАЧЕНИЕ(ПланВидовРасчета.ИНАГРО_Отражение.Удержание) КАК ВидРасчета,
	|	
	|		Основной.Ссылка.ПериодРегистрации	КАК ПериодРегистрации,
	|		НАЧАЛОПЕРИОДА(Основной.НалоговыйПериод, МЕСЯЦ)	КАК БазовыйПериодНачало,
	|		КОНЕЦПЕРИОДА(Основной.НалоговыйПериод, МЕСЯЦ)	КАК БазовыйПериодКонец,
	|		NULL											КАК ПериодСтавки,
	|	
	|		Основной.Ссылка.Организация	КАК Организация,
	|		Основной.Сотрудник			КАК Сотрудник,
	|		Основной.ВидРасчета			КАК ВидРасчетаБазы,
	|		NULL						КАК Налог,
	|	
	|		ЛОЖЬ	КАК ВзносыОсновногоНачисления,
	|		NULL	КАК СпособОтраженияЕСВФОТ,
	|	
	|		"+ТекстПараметрыУдержания+",
	|		Основной.Результат
	|	ИЗ	Документ.ИНАГРО_НачислениеЗарплатыРаботникамОрганизаций.УдержанияПроводки КАК Основной
	|	ГДЕ Основной.Ссылка = &парамРегистратор
	|";
	
	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос.Выполнить();
	
КонецФункции  // АвтозаполнениеПроводок

Процедура СформироватьВзаиморасчетыСРаботниками(Сотрудники, НаборЗаписей)
	
	ИспользуетсяЕСВ = ИНАГРО_ПроведениеРасчетов.ИспользуетсяЕСВ(ПериодРегистрации);
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("парамПериодРегистрации",	ПериодРегистрации);
	Запрос.УстановитьПараметр("парамСсылка",			Ссылка);
	Запрос.УстановитьПараметр("парамОрганизация",		Организация);
	
	Если Сотрудники = Неопределено Тогда
		Сотрудники = РаботникиОрганизации.ВыгрузитьКолонку("Сотрудник");
	КонецЕсли;
	Запрос.УстановитьПараметр("парамСотрудники",		Сотрудники);
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	// ВТНачисления
	Если Истина Тогда
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	Начисления.Сотрудник КАК Сотрудник,
		               |	Начисления.КодОперации КАК КодОперации,
		               |	Начисления.СчетУчета КАК СчетУчета,
		               |	Начисления.Сумма КАК Сумма,
		               |	Начисления.СуммаДокумента КАК СуммаДокумента,
		               |	Начисления.Подразделение
		               |ПОМЕСТИТЬ ВТНачисления
		               |ИЗ
		               |	(ВЫБРАТЬ
		               |		Взаиморасчеты.Сотрудник КАК Сотрудник,
		               |		Взаиморасчеты.КодОперации КАК КодОперации,
		               |		Взаиморасчеты.СчетУчета КАК СчетУчета,
		               |		ВЫБОР
		               |			КОГДА Взаиморасчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		               |				ТОГДА Взаиморасчеты.СуммаВзаиморасчетов
		               |			ИНАЧЕ -Взаиморасчеты.СуммаВзаиморасчетов
		               |		КОНЕЦ КАК Сумма,
		               |		0 КАК СуммаДокумента,
		               |		Взаиморасчеты.Подразделение КАК Подразделение
		               |	ИЗ
		               |		РегистрНакопления.ВзаиморасчетыССотрудниками КАК Взаиморасчеты
		               |	ГДЕ
		               |		Взаиморасчеты.Регистратор <> &парамСсылка
		               |		И Взаиморасчеты.Организация = &парамОрганизация
		               |		И НАЧАЛОПЕРИОДА(Взаиморасчеты.Период, МЕСЯЦ) = &парамПериодРегистрации
		               |		И Взаиморасчеты.Сотрудник В(&парамСотрудники)
		               |		И Взаиморасчеты.КодОперации = ЗНАЧЕНИЕ(Перечисление.КодыОперацийВзаиморасчетыСРаботникамиОрганизаций.Начисления)
		               |	
		               |	ОБЪЕДИНИТЬ ВСЕ
		               |	
		               |	ВЫБРАТЬ
		               |		Взаиморасчеты.Сотрудник,
		               |		ЗНАЧЕНИЕ(Перечисление.КодыОперацийВзаиморасчетыСРаботникамиОрганизаций.Начисления),
		               |		Взаиморасчеты.СчетУчета,
		               |		ВЫБОР
		               |			КОГДА Взаиморасчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
		               |				ТОГДА -Взаиморасчеты.СуммаВзаиморасчетов
		               |			ИНАЧЕ Взаиморасчеты.СуммаВзаиморасчетов
		               |		КОНЕЦ,
		               |		0,
		               |		Взаиморасчеты.Подразделение
		               |	ИЗ
		               |		РегистрНакопления.ВзаиморасчетыССотрудниками КАК Взаиморасчеты
		               |	ГДЕ
		               |		Взаиморасчеты.Регистратор <> &парамСсылка
		               |		И Взаиморасчеты.Организация = &парамОрганизация
		               |		И НАЧАЛОПЕРИОДА(Взаиморасчеты.Период, МЕСЯЦ) = &парамПериодРегистрации
		               |		И Взаиморасчеты.Сотрудник В(&парамСотрудники)
		               |		И Взаиморасчеты.КодОперации = ЗНАЧЕНИЕ(Перечисление.КодыОперацийВзаиморасчетыСРаботникамиОрганизаций.Выплата)
		               |		И Взаиморасчеты.ПериодВзаиморасчетов = &парамПериодРегистрации
		               |	
		               |	ОБЪЕДИНИТЬ ВСЕ
		               |	
		               |	ВЫБРАТЬ
		               |		ВзаиморасчетыФСС.Сотрудник,
		               |		ЗНАЧЕНИЕ(Перечисление.КодыОперацийВзаиморасчетыСРаботникамиОрганизаций.Начисления),
		               |		ВзаиморасчетыФСС.СчетУчета,
		               |		ВЫБОР
		               |			КОГДА ВзаиморасчетыФСС.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		               |				ТОГДА ВзаиморасчетыФСС.Сумма
		               |			ИНАЧЕ -ВзаиморасчетыФСС.Сумма
		               |		КОНЕЦ,
		               |		0,
		               |		NULL
		               |	ИЗ
		               |		РегистрНакопления.ИНАГРО_ВзаиморасчетыПоНачислениямЗаСчетФСС КАК ВзаиморасчетыФСС
		               |	ГДЕ
		               |		ВзаиморасчетыФСС.Организация = &парамОрганизация
		               |		И НАЧАЛОПЕРИОДА(ВзаиморасчетыФСС.Период, МЕСЯЦ) = &парамПериодРегистрации
		               |		И ВзаиморасчетыФСС.Документ.ПериодРегистрации = &парамПериодРегистрации
		               |		И ВзаиморасчетыФСС.Сотрудник В(&парамСотрудники)
		               |	
		               |	ОБЪЕДИНИТЬ ВСЕ
		               |	
		               |	ВЫБРАТЬ
		               |		Основной.Сотрудник,
		               |		ЗНАЧЕНИЕ(Перечисление.КодыОперацийВзаиморасчетыСРаботникамиОрганизаций.Начисления),
		               |		ВЫБОР
		               |			КОГДА Основной.ВидРасчета.СчетУчета = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)
		               |				ТОГДА ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыПоЗаработнойПлате)
		               |			ИНАЧЕ Основной.ВидРасчета.СчетУчета
		               |		КОНЕЦ,
		               |		Основной.Результат,
		               |		Основной.Результат,
		               |		Основной.ПодразделениеОрганизации
		               |	ИЗ
		               |		Документ.ИНАГРО_НачислениеЗарплатыРаботникамОрганизаций.Начисления КАК Основной
		               |	ГДЕ
		               |		Основной.Ссылка = &парамСсылка
		               |		И НЕ Основной.ВидРасчета.ЯвляетсяДоходомВНатуральнойФорме) КАК Начисления" ;
		Запрос.Выполнить();
	КонецЕсли;
	Запрос.Текст = "ВЫБРАТЬ * ИЗ ВТНачисления";
	
	// ВТУдержания
	Если Истина Тогда
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	Удержания.Сотрудник КАК Сотрудник,
		               |	Удержания.КодОперации КАК КодОперации,
		               |	Удержания.СчетУчета КАК СчетУчета,
		               |	Удержания.Сумма КАК Сумма,
		               |	Удержания.СуммаДокумента КАК СуммаДокумента,
		               |	Удержания.Подразделение
		               |ПОМЕСТИТЬ ВТУдержания
		               |ИЗ
		               |	(ВЫБРАТЬ
		               |		Взаиморасчеты.Сотрудник КАК Сотрудник,
		               |		ЗНАЧЕНИЕ(Перечисление.КодыОперацийВзаиморасчетыСРаботникамиОрганизаций.Начисления) КАК КодОперации,
		               |		Взаиморасчеты.СчетУчета КАК СчетУчета,
		               |		ВЫБОР
		               |			КОГДА Взаиморасчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		               |				ТОГДА Взаиморасчеты.СуммаВзаиморасчетов
		               |			ИНАЧЕ -Взаиморасчеты.СуммаВзаиморасчетов
		               |		КОНЕЦ КАК Сумма,
		               |		0 КАК СуммаДокумента,
		               |		Взаиморасчеты.Подразделение КАК Подразделение
		               |	ИЗ
		               |		РегистрНакопления.ВзаиморасчетыССотрудниками КАК Взаиморасчеты
		               |	ГДЕ
		               |		Взаиморасчеты.Регистратор <> &парамСсылка
		               |		И Взаиморасчеты.Организация = &парамОрганизация
		               |		И НАЧАЛОПЕРИОДА(Взаиморасчеты.Период, МЕСЯЦ) = &парамПериодРегистрации
		               |		И Взаиморасчеты.Сотрудник В(&парамСотрудники)
		               |		И Взаиморасчеты.КодОперации = ЗНАЧЕНИЕ(Перечисление.КодыОперацийВзаиморасчетыСРаботникамиОрганизаций.Удержания)
		               |	
		               |	ОБЪЕДИНИТЬ ВСЕ
		               |	
		               |	ВЫБРАТЬ
		               |		Основной.Сотрудник,
		               |		ЗНАЧЕНИЕ(Перечисление.КодыОперацийВзаиморасчетыСРаботникамиОрганизаций.Удержания),
		               |		NULL,
		               |		0,
		               |		Основной.Результат,
		               |		NULL
		               |	ИЗ
		               |		Документ.ИНАГРО_НачислениеЗарплатыРаботникамОрганизаций.Удержания КАК Основной
		               |	ГДЕ
		               |		Основной.Ссылка = &парамСсылка) КАК Удержания";
		Запрос.Выполнить();
	КонецЕсли;
	Запрос.Текст = "ВЫБРАТЬ * ИЗ ВТУдержания";
	
	// ВТВзносы
	Если Истина Тогда
		Запрос.Текст = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Взносы.Сотрудник		КАК Сотрудник,
		|	Взносы.КодОперации		КАК КодОперации,
		|	Взносы.СчетУчета		КАК СчетУчета,
		|	Взносы.Сумма			КАК Сумма,
		|	Взносы.СуммаДокумента	КАК СуммаДокумента
		|ПОМЕСТИТЬ ВТВзносы
		|	
		|ИЗ
		|(
		|	//-----------------------
		|	// Взносы - начало
		|	//
		|	ВЫБРАТЬ
		|		Взаиморасчеты.Сотрудник,
		|		ЗНАЧЕНИЕ(Перечисление.КодыОперацийВзаиморасчетыСРаботникамиОрганизаций.Начисления)	КАК КодОперации,
		|		Взаиморасчеты.СчетУчета,
		|	    ВЫБОР	КОГДА Взаиморасчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|	    		ТОГДА Взаиморасчеты.СуммаВзаиморасчетов
		|	    		ИНАЧЕ - Взаиморасчеты.СуммаВзаиморасчетов
		|	    КОНЕЦ			КАК Сумма,
		|		0				КАК СуммаДокумента
		|	ИЗ  РегистрНакопления.ВзаиморасчетыССотрудниками КАК Взаиморасчеты
		|	ГДЕ		Взаиморасчеты.Регистратор <> &парамСсылка
		|		И	Взаиморасчеты.Организация = &парамОрганизация
		|		И	НАЧАЛОПЕРИОДА(Взаиморасчеты.Период,МЕСЯЦ) = &парамПериодРегистрации 
		|		И	Сотрудник В (&парамСотрудники)
		|		И	Взаиморасчеты.КодОперации = ЗНАЧЕНИЕ(Перечисление.КодыОперацийВзаиморасчетыСРаботникамиОрганизаций.Взносы)
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	ВЫБРАТЬ
		|		Основной.Сотрудник 		КАК Сотрудник,
		|		ЗНАЧЕНИЕ(Перечисление.КодыОперацийВзаиморасчетыСРаботникамиОрганизаций.Взносы) КАК КодОперации,
		|		"+?(ИспользуетсяЕСВ,"Основной.ВидРасчета.СпособОтраженияВБухУчете.СчетДт","NULL")+"	КАК СчетУчета,
		|		0				 		КАК Сумма,
		|		Основной.Результат 		КАК СуммаДокумента
		|	ИЗ	Документ.ИНАГРО_НачислениеЗарплатыРаботникамОрганизаций.Взносы КАК Основной
		|	ГДЕ	  Основной.Ссылка = &парамСсылка
		|	// 
		|	// Взносы - конец
		|	//-----------------------
		|) КАК Взносы
		|";
		Запрос.Выполнить();
	КонецЕсли;
	Запрос.Текст = "ВЫБРАТЬ * ИЗ ВТВзносы";
	
	// ВТНДФЛ
	Если Истина Тогда
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	НДФЛ.Сотрудник КАК Сотрудник,
		               |	НДФЛ.КодОперации КАК КодОперации,
		               |	НДФЛ.СчетУчета КАК СчетУчета,
		               |	НДФЛ.Сумма КАК Сумма,
		               |	НДФЛ.СуммаДокумента КАК СуммаДокумента,
		               |	НДФЛ.Подразделение
		               |ПОМЕСТИТЬ ВТНДФЛ
		               |ИЗ
		               |	(ВЫБРАТЬ
		               |		Взаиморасчеты.Сотрудник КАК Сотрудник,
		               |		ЗНАЧЕНИЕ(Перечисление.КодыОперацийВзаиморасчетыСРаботникамиОрганизаций.Начисления) КАК КодОперации,
		               |		Взаиморасчеты.СчетУчета КАК СчетУчета,
		               |		ВЫБОР
		               |			КОГДА Взаиморасчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		               |				ТОГДА Взаиморасчеты.СуммаВзаиморасчетов
		               |			ИНАЧЕ -Взаиморасчеты.СуммаВзаиморасчетов
		               |		КОНЕЦ КАК Сумма,
		               |		0 КАК СуммаДокумента,
		               |		Взаиморасчеты.Подразделение КАК Подразделение
		               |	ИЗ
		               |		РегистрНакопления.ВзаиморасчетыССотрудниками КАК Взаиморасчеты
		               |	ГДЕ
		               |		Взаиморасчеты.Регистратор <> &парамСсылка
		               |		И Взаиморасчеты.Организация = &парамОрганизация
		               |		И НАЧАЛОПЕРИОДА(Взаиморасчеты.Период, МЕСЯЦ) = &парамПериодРегистрации
		               |		И Взаиморасчеты.Сотрудник В(&парамСотрудники)
		               |		И Взаиморасчеты.КодОперации = ЗНАЧЕНИЕ(Перечисление.КодыОперацийВзаиморасчетыСРаботникамиОрганизаций.НДФЛ)
		               |	
		               |	ОБЪЕДИНИТЬ ВСЕ
		               |	
		               |	ВЫБРАТЬ
		               |		Основной.Сотрудник,
		               |		ЗНАЧЕНИЕ(Перечисление.КодыОперацийВзаиморасчетыСРаботникамиОрганизаций.НДФЛ),
		               |		Основной.ДоходНДФЛ.СпособОтраженияВРеглУчете.СчетДт,
		               |		0,
		               |		Основной.Налог,
		               |		NULL
		               |	ИЗ
		               |		Документ.ИНАГРО_НачислениеЗарплатыРаботникамОрганизаций.НДФЛ КАК Основной
		               |	ГДЕ
		               |		Основной.Ссылка = &парамСсылка) КАК НДФЛ";	
		Запрос.Выполнить();
	КонецЕсли;
	Запрос.Текст = "ВЫБРАТЬ * ИЗ ВТНДФЛ";
	
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Доходы.Сотрудник				КАК Сотрудник,
	|	Доходы.Сотрудник.ФизическоеЛицо	КАК ФизическоеЛицо,
	|	ВЫБОР	КОГДА Доходы.СчетУчета = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыПоЗаработнойПлате)
	|				ТОГДА -1
	|			КОГДА Доходы.СчетУчета = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыПоДругимВыплатам)
	|				ТОГДА 0
	|			ИНАЧЕ 1
	|	КОНЕЦ				КАК ПорядокСчетУчета,
	|	Доходы.СчетУчета				КАК СчетУчета,
	|	Доходы.КодОперации				КАК КодОперации,
	|	Доходы.Подразделение				КАК Подразделение,
	|	СУММА(Доходы.ПриходСумма)			КАК ПриходСумма,
	|	СУММА(Доходы.ПриходСуммаДокумента)		КАК ПриходСуммаДокумента,
	|	СУММА(Доходы.РасходСуммаДокумента)		КАК РасходСуммаДокумента
	|ИЗ 
	|(
	|	
	|	ВЫБРАТЬ
	|		Начисления.Сотрудник		КАК Сотрудник,
	|		Начисления.КодОперации		КАК КодОперации,
	|		Начисления.СчетУчета		КАК СчетУчета,
	|		Начисления.Сумма				КАК ПриходСумма,
	|		Начисления.СуммаДокумента		КАК ПриходСуммаДокумента,
	|		0								КАК РасходСуммаДокумента,
	|		Начисления.Подразделение		КАК Подразделение
	|	ИЗ ВТНачисления КАК Начисления
	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	ВЫБРАТЬ
	|		Удержания.Сотрудник			КАК Сотрудник,
	|		Удержания.КодОперации		КАК КодОперации,
	|		Удержания.СчетУчета			КАК СчетУчета,
	|		-Удержания.Сумма			КАК ПриходСумма,
	|		0							КАК ПриходСуммаДокумента,
	|		Удержания.СуммаДокумента	КАК РасходСуммаДокумента,
	|		Удержания.Подразделение		КАК Подразделение
	|	ИЗ ВТУдержания КАК Удержания
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|	ВЫБРАТЬ
	|		Взносы.Сотрудник		КАК Сотрудник,
	|		Взносы.КодОперации		КАК КодОперации,
	|		Взносы.СчетУчета		КАК СчетУчета,
	|		-Взносы.Сумма				КАК ПриходСумма,
	|		0							КАК ПриходСуммаДокумента,
	|		Взносы.СуммаДокумента		КАК РасходСуммаДокумента,
	|	    NULL
	|	ИЗ ВТВзносы КАК Взносы
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|	ВЫБРАТЬ
	|		НДФЛ.Сотрудник		КАК Сотрудник,
	|		НДФЛ.КодОперации	КАК КодОперации,
	|		НДФЛ.СчетУчета		КАК СчетУчета,
	|		- НДФЛ.Сумма			КАК ПриходСумма,
	|		0						КАК ПриходСуммаДокумента,
	|		НДФЛ.СуммаДокумента		КАК РасходСуммаДокумента,
	|	    NULL
	|	ИЗ ВТНДФЛ КАК НДФЛ
	|	
	|) КАК Доходы
	|
	|СГРУППИРОВАТЬ ПО
	|	Доходы.Сотрудник,
	|	ВЫБОР	КОГДА Доходы.СчетУчета = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыПоЗаработнойПлате)
	|				ТОГДА -1
	|			КОГДА Доходы.СчетУчета = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыПоДругимВыплатам)
	|				ТОГДА 0
	|			ИНАЧЕ 1
	|	КОНЕЦ,
	|	Доходы.СчетУчета,
	|	Доходы.КодОперации,
	|	Доходы.Подразделение
	|
	|УПОРЯДОЧИТЬ ПО
	|	Сотрудник,
	|	ПорядокСчетУчета,
	|	СчетУчета,
	|	КодОперации.Порядок
	|
	|ИТОГИ    
	|	СУММА(ПриходСумма), 
	|	СУММА(ПриходСуммаДокумента),
	|	СУММА(РасходСуммаДокумента)
	|ПО
	|	Сотрудник,  
	|	СчетУчета
	|";
	
	Запрос.Текст = ТекстЗапроса;
	
	ВыборкаСотрудники = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	СчетУчетаПоУмолчанию = ПланыСчетов.Хозрасчетный.РасчетыПоЗаработнойПлате;
	СчетУчета663 = ПланыСчетов.Хозрасчетный.РасчетыПоДругимВыплатам;
	Приход = ВидДвиженияНакопления.Приход;
	Расход = ВидДвиженияНакопления.Расход;
	
	тбНачисления = Новый ТаблицаЗначений;
	тбНачисления.Колонки.Добавить("ПорядокСчетУчета");
	тбНачисления.Колонки.Добавить("СчетУчета");
	тбНачисления.Колонки.Добавить("ПриходСумма");
	
	тбУдержания = Новый ТаблицаЗначений;
	тбУдержания.Колонки.Добавить("КодОперации");
	тбУдержания.Колонки.Добавить("РасходСумма");
	
	// сформируем движения ВзаиморасчетыСРаботникамиОрганизаций
	Пока ВыборкаСотрудники.Следующий() Цикл
		
		мСотрудник = ВыборкаСотрудники.Сотрудник;
		тбНачисления.Очистить();
		тбУдержания.Очистить();
		
		// Шаг 1. В этом цикле сделаем движения по Начислениям 
		// и сформируем таблицу для определения счетов учета других удержаний.
		ВыборкаСчетУчета = ВыборкаСотрудники.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаСчетУчета.Следующий() Цикл
			СуммаУдержаний = 0;  
			СуммаУдержанийУпр = 0;  
			ПриходСумма = ВыборкаСчетУчета.ПриходСумма;
			Выборка = ВыборкаСчетУчета.Выбрать(ОбходРезультатаЗапроса.Прямой);
			Пока Выборка.Следующий() Цикл
				
				// 1. Начисления по документу двигаем всегда, если сумма по документу не равна нулю
				// 2. Удержания.
				Если Выборка.КодОперации = Перечисления.КодыОперацийВзаиморасчетыСРаботникамиОрганизаций.Начисления Тогда
					// Начисления по документу двигаем всегда, если сумма по документу не равна нулю
					Если Выборка.ПриходСуммаДокумента <> 0 Тогда
						ДобавитьСтрокуВзаиморасчеты(НаборЗаписей, Приход, мСотрудник, Выборка.СчетУчета, Выборка.ПриходСуммаДокумента, Выборка.КодОперации, Выборка.Подразделение);
						
						СтрокаТб = тбНачисления.Добавить();
						СтрокаТб.ПорядокСчетУчета = ВыборкаСчетУчета.ПорядокСчетУчета;
						СтрокаТб.СчетУчета = ВыборкаСчетУчета.СчетУчета;
						СтрокаТб.ПриходСумма = Выборка.ПриходСумма;
					Иначе
						СтрокаТб = тбНачисления.Добавить();
						СтрокаТб.ПорядокСчетУчета = ВыборкаСчетУчета.ПорядокСчетУчета;
						СтрокаТб.СчетУчета = ВыборкаСчетУчета.СчетУчета;
						СтрокаТб.ПриходСумма = Выборка.ПриходСумма;
					КонецЕсли;
					
				Иначе
					// Удержания может быть два варианта:
					Если Выборка.СчетУчета = NULL Тогда
						// 	- Счет учета не определен - 
						Если Выборка.РасходСуммаДокумента <> 0 Тогда
							// запомним его сразу в таблицу удержаний
							СтрокаТб = тбУдержания.Добавить();
							СтрокаТб.КодОперации = Выборка.КодОперации;
							СтрокаТб.РасходСумма = Выборка.РасходСуммаДокумента;
						КонецЕсли;
						
					Иначе
						//  - Счет учета определен
						Если Выборка.РасходСуммаДокумента < 0 Тогда
							// Счет учета определен и это сторно - списываем все с указанного счета
							// в таблице начислений фиксируем, то что мы эту сумму списали списали.
							ДобавитьСтрокуВзаиморасчеты(НаборЗаписей, Расход, мСотрудник, Выборка.СчетУчета, Выборка.РасходСуммаДокумента, Выборка.КодОперации, Выборка.Подразделение);
							
							СтрокаТб = тбНачисления.Добавить();
							СтрокаТб.ПорядокСчетУчета = ВыборкаСчетУчета.ПорядокСчетУчета;
							СтрокаТб.СчетУчета = ВыборкаСчетУчета.СчетУчета;
							СтрокаТб.ПриходСумма = - Выборка.РасходСуммаДокумента;
							
						ИначеЕсли ПриходСумма > 0 Тогда  
							// самый нормальный сценарий
							РасходСумма = Мин(ПриходСумма - СуммаУдержаний, Выборка.РасходСуммаДокумента);
							СуммаУдержаний = СуммаУдержаний + РасходСумма;
							ДобавитьСтрокуВзаиморасчеты(НаборЗаписей, Расход, мСотрудник, Выборка.СчетУчета, РасходСумма, Выборка.КодОперации, Выборка.Подразделение);
							
							// уменьшим начисления
							СтрокаТб = тбНачисления.Добавить();
							СтрокаТб.ПорядокСчетУчета = ВыборкаСчетУчета.ПорядокСчетУчета;
							СтрокаТб.СчетУчета = ВыборкаСчетУчета.СчетУчета;
							СтрокаТб.ПриходСумма = - РасходСумма;
							
							// если списали не весь расход, запомним его в таблицу удержаний
							Если Выборка.РасходСуммаДокумента - РасходСумма > 0 Тогда
								СтрокаТб = тбУдержания.Добавить();
								СтрокаТб.КодОперации = Выборка.КодОперации;
								СтрокаТб.РасходСумма = Выборка.РасходСуммаДокумента - РасходСумма;
							КонецЕсли;
							
							
						Иначе // Если ПриходСумма <= 0 И Выборка.РасходСуммаДокумента > 0 Тогда
							
							// запомним его сразу в таблицу удержаний
							СтрокаТб = тбУдержания.Добавить();
							СтрокаТб.КодОперации = Выборка.КодОперации;
							СтрокаТб.РасходСумма = Выборка.РасходСуммаДокумента;
							
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
		тбНачисления.Свернуть("ПорядокСчетУчета, СчетУчета","ПриходСумма");
		тбНачисления.Сортировать("ПорядокСчетУчета, СчетУчета");
		
		тбУдержания.Свернуть("КодОперации","РасходСумма");
		тбУдержания.Сортировать("РасходСумма"); // от - к +
		
		// Шаг 2. Сначала списываем в таблице те удержания, которые явно поместились в начисления + или -
		// сами начисления уже проведены либо другими документами, либо текущим документом в обходе запроса выше.
		Для каждого СтрокаТб Из тбУдержания Цикл
			Для каждого СтрокаТбНач Из тбНачисления Цикл
				// Н(+)У(+) - спишем сколько можно и нач. и уд.
				// Н(-)У(-) - спишем сколько можно и нач. и уд.
				// другие варианты.
				Если СтрокаТбНач.ПриходСумма > 0 И СтрокаТб.РасходСумма > 0 Тогда
					РасходСумма = Мин(СтрокаТбНач.ПриходСумма,СтрокаТб.РасходСумма);
					СтрокаТбНач.ПриходСумма = СтрокаТбНач.ПриходСумма - РасходСумма;
					СтрокаТб.РасходСумма = СтрокаТб.РасходСумма - РасходСумма;
					
					ДобавитьСтрокуВзаиморасчеты(НаборЗаписей, Расход, мСотрудник, СтрокаТбНач.СчетУчета, РасходСумма, СтрокаТб.КодОперации);
					
				ИначеЕсли СтрокаТбНач.ПриходСумма < 0 И СтрокаТб.РасходСумма < 0 Тогда
					РасходСумма = - Мин(-СтрокаТбНач.ПриходСумма,-СтрокаТб.РасходСумма);
					СтрокаТбНач.ПриходСумма = СтрокаТбНач.ПриходСумма - РасходСумма;
					СтрокаТб.РасходСумма = СтрокаТб.РасходСумма - РасходСумма;
					
					ДобавитьСтрокуВзаиморасчеты(НаборЗаписей, Расход, мСотрудник, СтрокаТбНач.СчетУчета, РасходСумма, СтрокаТб.КодОперации);
					
				КонецЕсли;
				
			КонецЦикла;
		КонецЦикла;
		
		// Шаг 3 "хвост" кидаем на счет по умолчанию (661)
		Для каждого СтрокаТб Из тбУдержания Цикл
			
			Если СтрокаТб.РасходСумма <> 0 Тогда
				ДобавитьСтрокуВзаиморасчеты(НаборЗаписей, Расход, мСотрудник, СчетУчетаПоУмолчанию, СтрокаТб.РасходСумма, СтрокаТб.КодОперации);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры   // СформироватьВзаиморасчетыСРаботниками

Процедура ПроверитьЗаполнениеШапки( ВыборкаПоШапкеДокумента, Отказ )
	
	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.Организация) Тогда
		ОбщегоНазначенияБПКлиентСервер.СообщитьОбОшибке(НСтр("ru='Не задана организация!';uk='Не задана організація!'"), Отказ);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ПериодРегистрации) Тогда
		ОбщегоНазначенияБПКлиентСервер.СообщитьОбОшибке(НСтр("ru='Не задан период за который выполняется отражение начислений в бухгалтерском учете!';uk='Не заданий період за який виконується відображення нарахувань у бухгалтерському обліку!'"), Отказ);
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаполнениеШапки()

Процедура ПроверитьЗаполнениеСтрокиНачисления( ВыборкаПоСтрокамДокумента, Отказ, Заголовок = "")
	
	СтрокаНачалаСообщенияОбОшибке = НСтр("ru='В строке номер ""';uk='У рядку номер ""'")+ СокрЛП(ВыборкаПоСтрокамДокумента.НомерСтроки) +
	НСтр("ru='"" табл. части ""Начисления"": ';uk='"" табл. частини ""Нарахування"": '");
	
	// Сотрудник
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.Сотрудник) Тогда
		ОбщегоНазначенияБПКлиентСервер.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + НСтр("ru='не выбран сотрудник!';uk='не обраний працівник!'"), Отказ, Заголовок);
	КонецЕсли;
	
	// Организация сотрудника должна совпадать с организацией документа
	Если ВыборкаПоСтрокамДокумента.ОшибкаНеСоответствиеСотрудникаИОрганизации Тогда
		ОбщегоНазначенияБПКлиентСервер.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + НСтр("ru='указанный сотрудник оформлен на другую организацию!';uk='зазначений співробітник оформлений на іншу організацію!'"), Отказ, Заголовок);
	КонецЕсли;
	
	// ВидРасчета
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ВидРасчета) Тогда
		ОбщегоНазначенияБПКлиентСервер.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + НСтр("ru='не указан вид расчета!';uk='не зазначений вид розрахунку!'"), Отказ, Заголовок);
	КонецЕсли;
	
	// Дата начала
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ДатаНачала) Тогда
		ОбщегоНазначенияБПКлиентСервер.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + НСтр("ru='не указана дата начала начисления!';uk='не зазначена дата початку нарахування!'"), Отказ, Заголовок);
	КонецЕсли;
	
	// Дата окончания
	Если Не ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ДатаОкончания) Тогда
		ОбщегоНазначенияБПКлиентСервер.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + НСтр("ru='не указана дата окончания начисления!';uk='не зазначена дата закінчення нарахування!'"), Отказ, Заголовок);
	КонецЕсли;
	
	// Дата начала
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.БазовыйПериодНачало) Тогда
		ОбщегоНазначенияБПКлиентСервер.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + НСтр("ru='не указана дата начала базового периода начисления!';uk='не зазначена дата початку базового періоду нарахування!'"), Отказ, Заголовок);
	КонецЕсли;
	
	// Дата окончания
	Если Не ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.БазовыйПериодКонец) Тогда
		ОбщегоНазначенияБПКлиентСервер.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + НСтр("ru='не указана дата окончания базового периода начисления!';uk='не зазначена дата закінчення базового періоду нарахування!'"), Отказ, Заголовок);
	КонецЕсли;
	
	Если Не ВыборкаПоСтрокамДокумента.ДатаПриема = NULL Тогда
		// Проверка дат
		Если ВыборкаПоСтрокамДокумента.ДатаНачала < ВыборкаПоСтрокамДокумента.ДатаПриема Тогда
			ОбщегоНазначенияБПКлиентСервер.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + НСтр("ru=' дата начала начисления меньше даты приема!';uk='дата початку нарахування менше дати прийому!'"), Отказ, Заголовок);
		ИначеЕсли ВыборкаПоСтрокамДокумента.ДатаНачала > ВыборкаПоСтрокамДокумента.ДатаОкончания Тогда	
			ОбщегоНазначенияБПКлиентСервер.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + НСтр("ru=' дата начала начисления больше даты окончания!';uk='дата початку нарахування менше дати закінчення!'"), Отказ, Заголовок);
		ИначеЕсли ВыборкаПоСтрокамДокумента.БазовыйПериодНачало  < ВыборкаПоСтрокамДокумента.ДатаПриема Тогда	
			ОбщегоНазначенияБПКлиентСервер.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + НСтр("ru=' дата начала базового периода начисления меньше даты приема!';uk='дата початку базового періоду нарахування менше дати прийому!'"), Отказ, Заголовок);
		ИначеЕсли (ВыборкаПоСтрокамДокумента.БазовыйПериодНачало > ВыборкаПоСтрокамДокумента.БазовыйПериодКонец) И НЕ (ВыборкаПоСтрокамДокумента.ВидРасчета.СпособРасчета = Перечисления.СпособыРасчетаНачислений.ИндексацияЗарплаты) Тогда
			ОбщегоНазначенияБПКлиентСервер.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + НСтр("ru=' дата начала базового периода начисления больше даты окончания!';uk='дата початку базового періоду нарахування менше дати закінчення!'"), Отказ, Заголовок);
		КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаполнениеСтрокиНачисления()

Процедура ПроверитьЗаполнениеСтрокиВзносы( ВыборкаПоСтрокамДокумента, Отказ, Заголовок = "" )
	
	СтрокаНачалаСообщенияОбОшибке = НСтр("ru='В строке номер ""';uk='У рядку номер ""'")+ СокрЛП(ВыборкаПоСтрокамДокумента.НомерСтроки) +
	НСтр("ru='"" табл. части ""Взносы"": ';uk='"" табл. частини ""Внески"": '");
	
	// Сотрудник
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.Сотрудник) Тогда
		ОбщегоНазначенияБПКлиентСервер.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + НСтр("ru='не выбрано физическое лицо!';uk='не обрана фізична особа!'"), Отказ, Заголовок);
	КонецЕсли;
	
	// месяц налогового периода
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.Налог) Тогда
		ОбщегоНазначенияБПКлиентСервер.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + НСтр("ru='не задан вид взноса!';uk='не заданий вид внеску!'"), Отказ, Заголовок);
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаполнениеСтрокиНДФЛ()

Процедура ПроверитьЗаполнениеСтрокиНДФЛ( ВыборкаПоСтрокамДокумента, Отказ, Заголовок = "" )
	
	СтрокаНачалаСообщенияОбОшибке = НСтр("ru='В строке номер ""';uk='У рядку номер ""'")+ СокрЛП(ВыборкаПоСтрокамДокумента.НомерСтроки) +
	НСтр("ru='"" табл. части ""НДФЛ"": ';uk='"" табл. частини ""ПДФО"": '");
	
	// Сотрудник
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.Контрагент) Тогда
		ОбщегоНазначенияБПКлиентСервер.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + НСтр("ru='не выбрано физическое лицо!';uk='не обрана фізична особа!'"), Отказ, Заголовок);
	КонецЕсли;
	
	// месяц налогового периода
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.НалоговыйПериод) Тогда
		ОбщегоНазначенияБПКлиентСервер.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + НСтр("ru='не задан налоговый период!';uk='не заданий податковий період!'"), Отказ, Заголовок);
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаполнениеСтрокиНДФЛ()

Процедура ПроверитьЗаполнениеСтрокиУдержания( ВыборкаПоСтрокамДокумента, Отказ, Заголовок = "" )

	СтрокаНачалаСообщенияОбОшибке = НСтр("ru='В строке номер ""';uk='У рядку номер ""'")+ СокрЛП(ВыборкаПоСтрокамДокумента.НомерСтроки) +
									НСтр("ru='"" табл. части ""Удержания"": ';uk='"" табл. частини ""Утримання"": '");
	
	// Сотрудник
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.Сотрудник) Тогда
		ОбщегоНазначенияБПКлиентСервер.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + НСтр("ru='не выбран сотрудник!';uk='не обраний співробітник!'"), Отказ, Заголовок);
	КонецЕсли;

	// ВидРасчета
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ВидРасчета) Тогда
		ОбщегоНазначенияБПКлиентСервер.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + НСтр("ru='не указан вид расчета!';uk='не зазначений вид розрахунку!'"), Отказ, Заголовок);	
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаполнениеСтрокиУдержания()

Процедура ПроверитьЗаполнениеСтрокиНачисленияПроводки( ВыборкаПоСтрокамДокумента, Отказ, Заголовок = "" )

	СтрокаНачалаСообщенияОбОшибке = НСтр("ru='В строке номер ""';uk='У рядку номер ""'")+ СокрЛП(ВыборкаПоСтрокамДокумента.НомерСтроки) +
									НСтр("ru='"" табл. части ""Начисления проводки"": ';uk='"" табл. частини ""Нарахування проведення"": '");
	
	// Сотрудник
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.Сотрудник) Тогда
		Отказ = Истина;
		Возврат;
		ОбщегоНазначенияБПКлиентСервер.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + НСтр("ru='не выбран сотрудник!';uk='не обраний співробітник!'"), Отказ, Заголовок);
	КонецЕсли;
	
	// ВидРасчетаБазы
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ВидРасчетаБазы) Тогда
		ОбщегоНазначенияБПКлиентСервер.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + НСтр("ru='не указан вид расчета!';uk='не зазначений вид розрахунку!'"), Отказ, Заголовок);
	КонецЕсли;
	
	// Дата начала
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.БазовыйПериодНачало) Тогда
		ОбщегоНазначенияБПКлиентСервер.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + НСтр("ru='не указана дата начала базового периода!';uk='не зазначена дата початку базового періоду!'"), Отказ, Заголовок);
	КонецЕсли;

	// Дата окончания
	Если Не ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.БазовыйПериодКонец) Тогда
		ОбщегоНазначенияБПКлиентСервер.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + НСтр("ru='не указана дата окончания базового периода!';uk='не зазначена дата закінчення базового періоду!'"), Отказ, Заголовок);
	КонецЕсли;

	// Дата начала
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.СчетДт) Тогда
		ОбщегоНазначенияБПКлиентСервер.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + НСтр("ru='не указан Счет Дт!';uk='не зазначений Рахунок Дт!'"), Отказ, Заголовок);
	КонецЕсли;

	// Дата окончания
	Если Не ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.СчетКт) Тогда
		ОбщегоНазначенияБПКлиентСервер.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + НСтр("ru='не указан Счет Кт!';uk='не зазначений Рахунок Кт!'"), Отказ, Заголовок);
	КонецЕсли;

КонецПроцедуры // ПроверитьЗаполнениеСтрокиНачисления()

Процедура ПроверитьЗаполнениеСтрокиОтраженийПроводки( ВыборкаПоСтрокамДокумента, Отказ, Заголовок = "" )

	СтрокаНачалаСообщенияОбОшибке = НСтр("ru='В строке номер ""';uk='У рядку номер ""'")+ СокрЛП(ВыборкаПоСтрокамДокумента.НомерСтроки) +
									НСтр("ru='"" табл. части ""';uk='"" табл. частини ""'")+ СокрЛП(ВыборкаПоСтрокамДокумента.ВидРасчета) + """: ";
	
	// Сотрудник
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.Сотрудник) Тогда
		Отказ = Истина;
		Возврат;
		ОбщегоНазначенияБПКлиентСервер.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + НСтр("ru='не выбран сотрудник!';uk='не обраний співробітник!'"), Отказ, Заголовок);
	КонецЕсли;
	
	// Дата начала
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.БазовыйПериодНачало) Тогда
		ОбщегоНазначенияБПКлиентСервер.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + НСтр("ru='не указана дата начала базового периода!';uk='не зазначена дата початку базового періоду!'"), Отказ, Заголовок);
	КонецЕсли;

	// СчетДт
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.СчетДт) Тогда
		ОбщегоНазначенияБПКлиентСервер.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + НСтр("ru='не указан Счет Дт!';uk='не зазначений Рахунок Дт!'"), Отказ, Заголовок);
	КонецЕсли;

	// СчетКт
	Если Не ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.СчетКт) Тогда
		ОбщегоНазначенияБПКлиентСервер.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + НСтр("ru='не указан Счет Кт!';uk='не зазначений Рахунок Кт!'"), Отказ, Заголовок);
	КонецЕсли;

КонецПроцедуры // ПроверитьЗаполнениеСтрокиНачисления()

Процедура ПроверитьЗаполнениеСтрокиОтраженияВУчете( ВыборкаПоДоходам, Отказ, Заголовок = "" )
	
	СтрокаНачалаСообщенияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='В строке номер ""%1"" табл. части ""Проводки"": ';uk='У рядку номер ""%1"" табл. частини ""Проводки"": '"), СокрЛП(ВыборкаПоДоходам.НомерСтроки));
	
	Если НЕ ЗначениеЗаполнено(ВыборкаПоДоходам.СчетДт) Тогда
		ОбщегоНазначенияБПКлиентСервер.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + НСтр("ru='Не указан счет дебета!';uk='Не зазначений рахунок дебету!'"), Отказ);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ВыборкаПоДоходам.СчетКт) Тогда
		ОбщегоНазначенияБПКлиентСервер.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + НСтр("ru='Не указан счет кредита!';uk='Не зазначений рахунок кредиту!'"), Отказ);
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаполнениеСтрокиОтраженияВУчете()

Процедура ДобавитьСтрокуНачислений( ВыборкаПоСтрокамДокумента, НаборЗаписей, ОбнулитьРезультат = Ложь )
	
	Движение = НаборЗаписей.Добавить();
	ЗаполнитьЗначенияСвойств(Движение, ВыборкаПоСтрокамДокумента);
 	Движение.ВидУчетаВремени = ИНАГРО_ПроведениеРасчетов.ПолучитьВидУчетаВремени(ВыборкаПоСтрокамДокумента, ВыборкаПоСтрокамДокумента.СуммированныйУчетРабочегоВремени);
	Если ОбнулитьРезультат И ВыборкаПоСтрокамДокумента.Авторасчет Тогда
		Движение.Результат = 0;
		Движение.ОплаченоДнейЧасов = 0;
	КонецЕсли;
	
КонецПроцедуры // ДобавитьСтрокуОсновныхНачислений()

Процедура ДобавитьСтрокуВзносы( ВыборкаПоСтрокамДокумента, НаборЗаписей )
	
	Движение = НаборЗаписей.Добавить();

	ЗаполнитьЗначенияСвойств(Движение,ВыборкаПоСтрокамДокумента);	// БазовыйПериодНачало, БазовыйПериодКонец, ВидРасчета, Сторно
																	// Сотрудник, Сотрудник, Результат
																	// Размер,ЧислоМесяцев,ПодразделениеОрганизации,
																	// Авторасчет,
 																	// ПериодРасчетаСреднегоЗаработкаНачало,ПериодРасчетаСреднегоЗаработкаОкончание.
																	
	Движение.ПериодРегистрации			= ПериодРегистрации;
	Движение.Организация				= Организация;
	
КонецПроцедуры // ДобавитьСтрокуДоговора

Процедура ДобавитьСтрокуНДФЛ( ВыборкаПоСтрокамДокумента, НаборЗаписей )

	Движение = НаборЗаписей.Добавить();

	ЗаполнитьЗначенияСвойств(Движение, ВыборкаПоСтрокамДокумента);	// БазовыйПериодНачало, БазовыйПериодКонец, ВидРасчета, Сторно
																	// Сотрудник, Сотрудник, Результат
																	// Размер,ЧислоМесяцев,ПодразделениеОрганизации,
																	// Авторасчет,
 																	// ПериодРасчетаСреднегоЗаработкаНачало,ПериодРасчетаСреднегоЗаработкаОкончание,
	// Свойства.
	Движение.Период	= ПериодРегистрации;
	Движение.ВидДвижения = ВидДвиженияНакопления.Приход;
	
КонецПроцедуры // ДобавитьСтрокуНДФЛ

Процедура ДобавитьСтрокуУдержаний( ВыборкаПоСтрокамДокумента, НаборЗаписей )

	Движение = НаборЗаписей.Добавить();

	ЗаполнитьЗначенияСвойств(Движение,ВыборкаПоСтрокамДокумента);	// БазовыйПериодНачало, БазовыйПериодКонец, ВидРасчета, Сторно
																	// Сотрудник, Организация,
																	// Результат, Размер, ДокументОснование, Авторасчет, ПорядокРасчетаБазы.
	Движение.ПериодРегистрации			= ПериодРегистрации;
	Движение.Организация				= Организация;
 																	// ДатаНачалаСобытия,ПериодРасчетаСреднегоЗаработкаНачало,ПериодРасчетаСреднегоЗаработкаОкончание.
КонецПроцедуры // ДобавитьСтрокуУдержаний

Процедура ДобавитьСтрокуНачисленийПроводки( ВыборкаПоСтрокамДокумента, НаборЗаписей )
	
	Движение = НаборЗаписей.Добавить();
	ЗаполнитьЗначенияСвойств(Движение, ВыборкаПоСтрокамДокумента);

КонецПроцедуры // ДобавитьСтрокуНачислений()

Процедура ДобавитьСтрокуОтраженийПроводки( ВыборкаПоСтрокамДокумента, НаборЗаписей )
	
	Движение = НаборЗаписей.Добавить();
	ЗаполнитьЗначенияСвойств(Движение, ВыборкаПоСтрокамДокумента);

КонецПроцедуры // ДобавитьСтрокуНачислений()

Процедура ДобавитьСтрокуВДвиженияПоОтражениюВУчете( СтруктураШапкиДокумента, ВыборкаПоДоходам, ВалютаРеглУчета )
	
	Если ВыборкаПоДоходам.Сумма = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// проводка по бухгалтерскому регистру
	Проводка = Движения.Хозрасчетный.Добавить();
	
	Проводка.Активность = Истина;
	Проводка.Период     = СтруктураШапкиДокумента.Дата;
	
	Проводка.Организация	= Организация;
	Проводка.Сумма			= ВыборкаПоДоходам.Сумма;
	Проводка.НомерЖурнала	= НСтр("ru='ЗП';uk='ЗП'",Локализация.КодЯзыкаИнформационнойБазы());
	
	// бухучет
	Проводка.СчетДт       = ВыборкаПоДоходам.СчетДт;
	Проводка.СчетКт       = ВыборкаПоДоходам.СчетКт;
	Проводка.СубконтоДт[ВыборкаПоДоходам.ВидСубконтоДт1] = ВыборкаПоДоходам.СубконтоДт1;
	Проводка.СубконтоДт[ВыборкаПоДоходам.ВидСубконтоДт2] = ВыборкаПоДоходам.СубконтоДт2;
	Проводка.СубконтоДт[ВыборкаПоДоходам.ВидСубконтоДт3] = ВыборкаПоДоходам.СубконтоДт3;
	Проводка.СубконтоКт[ВыборкаПоДоходам.ВидСубконтоКт1] = ВыборкаПоДоходам.СубконтоКт1;
	Проводка.СубконтоКт[ВыборкаПоДоходам.ВидСубконтоКт2] = ВыборкаПоДоходам.СубконтоКт2;
	Проводка.СубконтоКт[ВыборкаПоДоходам.ВидСубконтоКт3] = ВыборкаПоДоходам.СубконтоКт3;
	
	Если Проводка.СчетДт.НалоговыйУчет Тогда
		
		ХарактерЗатрат = Неопределено;
		ХарактерЗатратРБП = Неопределено;
		ЦелевоеНалоговоеНазначение = Неопределено;
		НалоговыйУчет.ОпределениеАналитикиНалоговогоУчетаВПроводкахДляЗатрат(ВыборкаПоДоходам, ВыборкаПоДоходам.СчетДт, ХарактерЗатрат,
													       	ЦелевоеНалоговоеНазначение, , 
															ВыборкаПоДоходам.НалоговоеНазначение, ВыборкаПоДоходам.НалоговоеНазначениеДоходовИЗатрат,
															"СубконтоДт",
															Дата,
															ХарактерЗатратРБП);
															
		Если Проводка.СчетДт.УчетПоНалоговымНазначениямНДС Тогда
	        Проводка.НалоговоеНазначениеДт =  ЦелевоеНалоговоеНазначение;
		КонецЕсли;
																
	КонецЕсли;
	
КонецПроцедуры  // ДобавитьСтрокуВДвиженияПоОтражениюВУчете()

Процедура ДобавитьСтрокуВзаиморасчеты(НаборЗаписей, ВидДвижения, Сотрудник, СчетУчета, Сумма, КодОперации, Подразделение = Неопределено)
	
	Если Сумма = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Движение = НаборЗаписей.Добавить();
	
	// свойства                              
	Движение.Период	= ПериодРегистрации;
	Движение.ВидДвижения			= ВидДвижения;
	
	// измерения 
	Движение.Организация 			= Организация;          
	Движение.ПериодВзаиморасчетов 	= ПериодРегистрации;
	Движение.Сотрудник				= Сотрудник;
	Движение.ФизическоеЛицо			= Сотрудник.ФизическоеЛицо;
	Движение.СчетУчета  			= СчетУчета;
	
	// ресурсы
	Движение.СуммаВзаиморасчетов 	= Сумма;
	
	// реквизиты
	Движение.КодОперации = КодОперации;
	
КонецПроцедуры // ДобавитьСтрокуВДвиженияПоРегистрамНакопления()

Процедура ДобавитьСтрокуВзаиморасчетыВзносы( ВыборкаПоСтрокамДокумента  )
	
	Если ВыборкаПоСтрокамДокумента.Сумма = 0 Тогда
	   Возврат;
	КонецЕсли;

	Движение = Движения.ВзаиморасчетыПоВзносамВФонды.Добавить();
	ЗаполнитьЗначенияСвойств(Движение,ВыборкаПоСтрокамДокумента);
	
	// Свойства
	Движение.Период	= ПериодРегистрации;
	Движение.ВидДвижения = ВидДвиженияНакопления.Приход;
	
	// Ресурсы ИНАГРО
	Движение.ИНАГРО_База		= ВыборкаПоСтрокамДокумента.База;
	Движение.ИНАГРО_БазаВзноса 	= ВыборкаПоСтрокамДокумента.БазаВзноса;
	Движение.ИНАГРО_Сотрудник 	= ВыборкаПоСтрокамДокумента.Сотрудник;
	
	
КонецПроцедуры // ДобавитьСтрокуВзаиморасчетыПоВзносамВФонды

#КонецОбласти

#Область АвтозаполнениеРасчет

//// Заполняет табличную часть РаботникиОрганизации, всеми физ лицами,
//// которые числятся на конец периода по указанным координатам, 
//// их движения и внутреннее совместительство 
//// Всех не уволенных на конец ПериодаРасчета документа.
////
Функция АвтозаполнениеРаботникиОрганизации() Экспорт
	
	Запрос = Новый Запрос;
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("парамСсылка"	, Ссылка);
	Запрос.УстановитьПараметр("парамНачало"	, НачалоМесяца(ПериодРегистрации));
	Запрос.УстановитьПараметр("парамКонец"	, КонецМесяца(ПериодРегистрации));
	Запрос.УстановитьПараметр("парамОрганизация"	, Организация);
	Запрос.УстановитьПараметр("парамПодразделение"	, ПодразделениеОрганизации);
	
	Запрос.УстановитьПараметр("парамУвольнение"		, Перечисления.ПричиныИзмененияСостояния.Увольнение);
	
	// Проверим ответственного - является ли он расчетчиком вообще и для заданного 
	// подразделения (если оно задано).
	
	ПустоеПодразделение = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
	ПустойОтветственный = Справочники.Пользователи.ПустаяСсылка();
	
	ПустоеПодразделение = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
	ПустойОтветственный = Справочники.Пользователи.ПустаяСсылка();
	
	// Описание условий	
	Если ПодразделениеОрганизации = ПустоеПодразделение И Ответственный = ПустойОтветственный Тогда
		ПоВсемПодразделениямОрганизации = Истина;
		УсловиеНаПодразделение = "ПодразделениеОрганизации.Владелец = &парамОрганизация";
	ИначеЕсли ПодразделениеОрганизации = ПустоеПодразделение Тогда
		ПоВсемПодразделениямОрганизации = Истина;
		УсловиеНаПодразделение = "ПодразделениеОрганизации.Владелец = &парамОрганизация";
	Иначе
		ПоВсемПодразделениямОрганизации = Ложь;
		УсловиеНаПодразделение = "ПодразделениеОрганизации В ИЕРАРХИИ (&парамПодразделение)";
	КонецЕсли;
	
	// Текст запроса: срез работников на конец месяца
	ТекстЗапросаАвтозаполнениеРаботники = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ //<< Ин-Агро - добавлено Разрешенные
	|	Сотрудники.Сотрудник КАК Сотрудник,  
	|	РаботникиРассчитанныеДругимиДокументами.Сотрудник  КАК Сотрудник1
	|ИЗ (
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		Работники.Сотрудник КАК Сотрудник
	|	ИЗ	РегистрСведений.ИНАГРО_РаботникиОрганизаций.СрезПоследних(&парамКонец, Организация = &парамОрганизация И ПричинаИзмененияСостояния<>&парамУвольнение
	|	И (НЕ Сотрудник В
	|		(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|			Работники.Сотрудник
	|		ИЗ
	|			РегистрСведений.ИНАГРО_РаботникиОрганизаций КАК Работники
	|		ГДЕ
	|			Работники.ПричинаИзмененияСостояния = &парамУвольнение
	|			И Работники.Организация = &парамОрганизация
	|			И Работники.Период <= &парамНачало
	|			И Работники.ПодразделениеОрганизации В ИЕРАРХИИ (&парамПодразделение)))	
	|	) КАК Работники
	|	ГДЕ		Работники.ЗанимаемыхСтавок > 0 
	// Будем заполнять только основными, ВнутреннееСовместительство учтется при расчетах 
	|			И	Работники.Сотрудник.ОсновноеНазначение = ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка)
	|		И	Работники." + УсловиеНаПодразделение + "
	|	
	|	ОБЪЕДИНИТЬ ВСЕ  // вытащим всех уволенных за месяц, конечно основных и совместителей
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		Работники.Сотрудник КАК Сотрудник
	|	ИЗ	РегистрСведений.ИНАГРО_РаботникиОрганизаций КАК Работники
	|	ГДЕ		Работники.ЗанимаемыхСтавок = 0 
	|		И	Работники.Регистратор.ВидЗанятости <> ЗНАЧЕНИЕ (Перечисление.ВидыЗанятости.ВнутреннееСовместительство)
	|		И	Работники.Регистратор ССЫЛКА Документ.ИНАГРО_УвольнениеИзОрганизаций
	|		И	Работники.Организация = &парамОрганизация
	|		И	Работники.Период >= &парамНачало
	|		И	Работники." + УсловиеНаПодразделение + "	
	
	|) КАК Сотрудники		
	|		
	|ЛЕВОЕ СОЕДИНЕНИЕ (		
	|	ВЫБРАТЬ
	|		Работники.Сотрудник КАК Сотрудник
	|	ИЗ  Документ.ИНАГРО_НачислениеЗарплатыРаботникамОрганизаций.РаботникиОрганизации КАК Работники
	|	ГДЕ		Работники.Ссылка <> &парамСсылка И Работники.Ссылка.Проведен
	|		И	Работники.Ссылка.ПериодРегистрации = &парамНачало
	|		И	Работники.Ссылка.Организация = &парамОрганизация
	|		И	Работники.Ссылка.ПометкаУдаления = ЛОЖЬ
	|		И	Работники.Ссылка.ПредварительныйРасчет = ЛОЖЬ
	|) КАК РаботникиРассчитанныеДругимиДокументами		
	|ПО РаботникиРассчитанныеДругимиДокументами.Сотрудник = Сотрудники.Сотрудник 		
	|		
	|ГДЕ РаботникиРассчитанныеДругимиДокументами.Сотрудник ЕСТЬ NULL		
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		ДоговорникиОрганизаций.Сотрудник,
	|       NULL
	|	ИЗ  Документ.ИНАГРО_ДоговорНаВыполнениеРаботСФизЛицом КАК ДоговорникиОрганизаций
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.ИНАГРО_Начисления КАК ИНАГРО_Начисления
	|	ПО (ИНАГРО_Начисления.ПериодРегистрации <> &парамНачало)
	|		И ДоговорникиОрганизаций.Сотрудник = ИНАГРО_Начисления.Сотрудник
	|	ГДЕ ДоговорникиОрганизаций.Проведен
	|		И ДоговорникиОрганизаций.ДатаОкончания >= &парамНачало
	|		И ДоговорникиОрганизаций.ДатаНачала <= КОНЕЦПЕРИОДА(&парамНачало, МЕСЯЦ)
	|		И ДоговорникиОрганизаций.Организация = &парамОрганизация
	|		И ДоговорникиОрганизаций." + УсловиеНаПодразделение + "	
	|";
	
	Запрос.Текст = ТекстЗапросаАвтозаполнениеРаботники;
	
	РаботникиОрганизации.Загрузить(Запрос.Выполнить().Выгрузить());
	
КонецФункции

// Производится расчет.
//
Процедура АвтозаполнениеНачисления(СписокСотрудников) Экспорт
			
	ЕстьПерерассчитываемыйДокумент	= ЗначениеЗаполнено(ПерерассчитываемыйДокумент);
	мПериодРегистрации	= ?(ЗначениеЗаполнено(ПерерассчитываемыйДокумент), ПерерассчитываемыйДокумент.ПериодРегистрации, ПериодРегистрации);
	мПерерассчитываемыйДокумент	= ПерерассчитываемыйДокумент;
	
	// Запрос собирает данные по следующей схеме:
	// 
	// 1. Движения ВСЕХ сотрудников за месяц (ДатаНачала, ДатаОкончания)   
	//    	(ВСЕХ = Просто сотрудники, внутренние совместители и сотрудники которых заменяли )
	//	  	+ Значение "Оклада" на каждую дату начала  (по пустому реквизиту ВидРасчетаИзмерение в регистре 
	// 		ПлановыеНачисленияРаботниковОрганизаций)
	//		+ Значение надбавок по ШР на каждую дату начала
	// 2. Начисления Сотрудников ТЧ РаботникиОрганизации (Основные, совместители и внутренние совместители) 
	// 3. Сотрудники ТЧ РаботникиОрганизации 
	//                      + Договора подряда (ДатаНачала, ДатаОкончания).
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("парамПериодРегистрации" , ПериодРегистрации);
	Запрос.УстановитьПараметр("парамСотрудник",СписокСотрудников); 
	Запрос.УстановитьПараметр("парамПустойСотрудник",Справочники.Сотрудники.ПустаяСсылка());
	
	Запрос.УстановитьПараметр("парамНачало" , ПериодРегистрации);
	Запрос.УстановитьПараметр("парамКонец" , КонецМесяца(ПериодРегистрации));
	
	Запрос.УстановитьПараметр("парамОрганизация" , Организация);
	Запрос.УстановитьПараметр("парамРегистратор" , Ссылка);

	МассивДействий = Новый Массив(2);
	МассивДействий[0] = Перечисления.ВидыДействияСНачислением.Изменить;
	МассивДействий[1] = Перечисления.ВидыДействияСНачислением.Начать;
	Запрос.УстановитьПараметр("парамДействиеНачатьИзменить", МассивДействий);
	Запрос.УстановитьПараметр("парамПрекратить", Перечисления.ВидыДействияСНачислением.Прекратить);
	Запрос.УстановитьПараметр("парамПоДням"     , Перечисления.ИНАГРО_ВидыУчетаВремени.ПоДням);
	
	Запрос.УстановитьПараметр("Ежемесячно", Перечисления.ИНАГРО_ХарактерВыплатыПоДоговору.Ежемесячно);
	Запрос.УстановитьПараметр("парамИндивидуальныйПоказатель",Перечисления.ИНАГРО_ВидыПоказателейСхемМотивации.Индивидуальный);		
	Запрос.УстановитьПараметр("парамПоПодразделению",Перечисления.ИНАГРО_ВидыПоказателейСхемМотивации.ПоПодразделению);
	
	
	//	ВТСписокРаботникиИЗамены
	Если Истина Тогда 
		//	Описание:
		// 		Все сотрудники из табличной части, их внутренние совместительства и все сотрудники которых замещали
		//		Для п.1.
		ТекстЗапроса = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ВЫБОР КОГДА Сотрудники.ОсновноеНазначение=ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка) ТОГДА Сотрудники.Ссылка ИНАЧЕ Сотрудники.ОсновноеНазначение КОНЕЦ КАК Сотрудник,
		|	Сотрудники.Ссылка КАК Назначение
		|ПОМЕСТИТЬ ВТСписокРаботникиИЗамены	
		|ИЗ Справочник.Сотрудники КАК Сотрудники
		|ГДЕ	ВЫБОР КОГДА Сотрудники.ОсновноеНазначение=&парамПустойСотрудник ТОГДА Сотрудники.Ссылка ИНАЧЕ Сотрудники.ОсновноеНазначение КОНЕЦ В ( &парамСотрудник )
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Замены.Сотрудник КАК Сотрудник,
		|	Замены.ЗаменаСотрудник КАК Назначение
		|ИЗ Документ.ИНАГРО_ЗаменыРаботниковОрганизаций КАК Замены
		|ГДЕ	Замены.Сотрудник В ( &парамСотрудник )
		|	И	НАЧАЛОПЕРИОДА(Замены.ДатаНачала,МЕСЯЦ)<= &парамНачало
		|	И	КОНЕЦПЕРИОДА(Замены.ДатаОкончания,МЕСЯЦ)>= &парамНачало
		|	И	Замены.Проведен
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Сотрудник
		|";
		Запрос.Текст = ТекстЗапроса;
		Запрос.Выполнить();
		ТекстЗапросаВТСписокРаботникиИЗамены = "ВТСписокРаботникиИЗамены";
	КонецЕсли; 
	Запрос.Текст = "ВЫБРАТЬ * ИЗ ВТСписокРаботникиИЗамены";
	
	//	ВТЗамены
	Если Истина Тогда 
		//	Описание:
		// 		Все сотрудники из табличной части РаботникиОрганизации которые кого-либо заменяли
		//		Для п.1.
		ТекстЗапроса = "
		|ВЫБРАТЬ
		|	Замены.Сотрудник КАК Сотрудник,
		|	Замены.ЗаменаСотрудник КАК Назначение,
		|	Замены.Ссылка			КАК ДокументОснование,
		|	ВЫБОР КОГДА Замены.ДатаНачала < &парамНачало ТОГДА &парамНачало ИНАЧЕ Замены.ДатаНачала КОНЕЦ КАК ДатаНачала,
		|	ВЫБОР КОГДА Замены.ДатаОкончания > &парамКонец ТОГДА &парамКонец ИНАЧЕ Замены.ДатаОкончания КОНЕЦ КАК ДатаОкончания,
		|	Замены.ВидРасчета					КАК ВидРасчета,
		|	Замены.ЗаменаГрафикРаботы				КАК ГрафикРаботы,
		|	Замены.ЗаменаПодразделениеОрганизации	КАК ПодразделениеОрганизации,
		|	Замены.ЗаменаДолжность					КАК Должность
		|ПОМЕСТИТЬ ВТЗамены	
		|ИЗ Документ.ИНАГРО_ЗаменыРаботниковОрганизаций КАК Замены
		|
		|ГДЕ	Замены.Сотрудник В ( &парамСотрудник )                             
		|	И	Замены.ДатаНачала <= &парамКонец
		|	И	Замены.ДатаОкончания >= &парамНачало
		|	И	Замены.Проведен
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Сотрудник
		|";
		Запрос.Текст = ТекстЗапроса;
		Запрос.Выполнить();
		ТекстЗапросаВТЗамены = "ВТЗамены";
	КонецЕсли;
	Запрос.Текст = "ВЫБРАТЬ * ИЗ ВТЗамены";
	
	//	ВТСписокРаботники
	Если Истина Тогда 
		//	Описание:
		// 		Все сотрудники из табличной части, их внутренние совместительства БЕЗ ЗАМЕН
		//		Для п.1.
		ТекстЗапроса = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ВЫБОР КОГДА Сотрудники.ОсновноеНазначение=&парамПустойСотрудник ТОГДА Сотрудники.Ссылка ИНАЧЕ Сотрудники.ОсновноеНазначение КОНЕЦ КАК Сотрудник,
		|	Сотрудники.Ссылка КАК Назначение
		|ПОМЕСТИТЬ ВТСписокРаботники	
		|ИЗ Справочник.Сотрудники КАК Сотрудники
		|ГДЕ	ВЫБОР КОГДА Сотрудники.ОсновноеНазначение=ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка) ТОГДА Сотрудники.Ссылка ИНАЧЕ Сотрудники.ОсновноеНазначение КОНЕЦ
		|			В ( &парамСотрудник )
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Сотрудник
		|";
		Запрос.Текст = ТекстЗапроса;
		Запрос.Выполнить();
		ТекстЗапросаВТСписокРаботники = "ВТСписокРаботники";
	КонецЕсли; 
	Запрос.Текст = "ВЫБРАТЬ * ИЗ ВТСписокРаботники";
	
	//	ВТДвиженияРегл
	Если Истина Тогда 
		//	Описание:
		// 		Получим движения по регистру РаботникиОрганизации (Сотрудники из ВТСписокРаботникиИЗамены)
		//		Начало дня - это начало события, Конец дня это закрытие события
		//		Для п.1.
		ТекстЗапроса = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Работники.Сотрудник					КАК Сотрудник,
		|	Работники.ДатаНачала				КАК ДатаНачала,
		|	МИНИМУМ (
		|   	ВЫБОР	КОГДА  Окончания.Период ЕСТЬ NULL									// работник никуда не перемещался по регистру
		|         					ТОГДА КОНЕЦПЕРИОДА(&парамНачало, МЕСЯЦ)
		|         				КОГДА НАЧАЛОПЕРИОДА(Окончания.Период, ДЕНЬ) = Окончания.Период	// начало дня это кадровое перемещение, значит надо закрыть предыдущим днем
		|                           ТОГДА  ДОБАВИТЬКДАТЕ(Окончания.Период, СЕКУНДА, -1)
		|                       ИНАЧЕ  КОНЕЦПЕРИОДА(&парамНачало, МЕСЯЦ)							// непонятная ситуация, но поставим конец месяца
		|				КОНЕЦ)					КАК ДатаОкончания,
		|	Работники.ПодразделениеОрганизации	КАК ПодразделениеОрганизации,
		|	Работники.ГрафикРаботы				КАК ГрафикРаботы,
		|	Работники.Должность					КАК Должность
		|ПОМЕСТИТЬ ВТДвиженияРегл	
		|ИЗ (
		|	ВЫБРАТЬ 
		|		РаботникиОрганизаций.Организация				КАК Организация,
		|		РаботникиОрганизаций.Сотрудник					КАК Сотрудник,
		|		&парамНачало									КАК ДатаНачала,
		|		РаботникиОрганизаций.ПодразделениеОрганизации	КАК ПодразделениеОрганизации,
		|		РаботникиОрганизаций.ГрафикРаботы				КАК ГрафикРаботы,
		|		РаботникиОрганизаций.Должность					КАК Должность
		|	ИЗ РегистрСведений.ИНАГРО_РаботникиОрганизаций.СрезПоследних(&парамНачало, Организация = &парамОрганизация И Сотрудник В ( ВЫБРАТЬ Назначение ИЗ " + ТекстЗапросаВТСписокРаботникиИЗамены + " КАК СписокРаботников )
		|			) КАК РаботникиОрганизаций
		|	ГДЕ	РаботникиОрганизаций.ЗанимаемыхСтавок > 0
		|
		|	ОБЪЕДИНИТЬ ВСЕ
		|	ВЫБРАТЬ
		|		РаботникиОрганизаций.Организация				КАК Организация,
		|		РаботникиОрганизаций.Сотрудник					КАК Сотрудник,
		|		РаботникиОрганизаций.Период						КАК ДатаНачала,
		|		РаботникиОрганизаций.ПодразделениеОрганизации	КАК ПодразделениеОрганизации,
		|		РаботникиОрганизаций.ГрафикРаботы				КАК ГрафикРаботы,
		|		РаботникиОрганизаций.Должность					КАК Должность
		|	ИЗ РегистрСведений.ИНАГРО_РаботникиОрганизаций КАК РаботникиОрганизаций
		|	ГДЕ		РаботникиОрганизаций.Сотрудник В ( ВЫБРАТЬ Назначение ИЗ " + ТекстЗапросаВТСписокРаботники + " КАК СписокРаботников )
		|		И	РаботникиОрганизаций.Организация = &парамОрганизация
		|		И	НАЧАЛОПЕРИОДА(РаботникиОрганизаций.Период, МЕСЯЦ) = &парамНачало
		|		И	РаботникиОрганизаций.Период > &парамНачало
		|		И	РаботникиОрганизаций.ЗанимаемыхСтавок > 0
		|   ) КАК Работники
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИНАГРО_РаботникиОрганизаций КАК Окончания
		|ПО  НАЧАЛОПЕРИОДА(Окончания.Период, МЕСЯЦ) = &парамНачало // все движения за месяц
		|	И	Окончания.Организация = Работники.Организация
		|	И	Окончания.Сотрудник = Работники.Сотрудник
		|	И	Работники.ДатаНачала < Окончания.Период 
		|       
		|СГРУППИРОВАТЬ ПО
		|	Работники.Сотрудник,
		|	Работники.ДатаНачала,
		|	Работники.ПодразделениеОрганизации,
		|	Работники.ГрафикРаботы,
		|	Работники.Должность
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Сотрудник,
		|	ДатаНачала
		|";
		Запрос.Текст = ТекстЗапроса;
		Запрос.Выполнить();
		ТекстЗапросаВТДвиженияРаботников = "ВТДвиженияРегл";
	КонецЕсли;
	
	
	//	ВТДвиженияРаботников
	Если Истина Тогда 
		//	Описание:
		// 		Получим движения по регистру РаботникиОрганизации (Сотрудники из ВТСписокРаботникиИЗамены)
		//		Начало дня - это начало события, Конец дня это закрытие события
		//		Для п.1.
		ТекстЗапроса = "
		|ВЫБРАТЬ
		|	Работники.Сотрудник					КАК Сотрудник,
		|	Работники.Назначение				КАК Назначение,
		|	Работники.ДатаНачала				КАК ДатаНачала,
		|	МИНИМУМ(Окончание.ДатаОкончания)	КАК ДатаОкончания
		|ПОМЕСТИТЬ ВТДвижения	
		|ИЗ (
		|	ВЫБРАТЬ
		|		РаботникиПоДокументу.Сотрудник		КАК Сотрудник,
		|		РаботникиПоДокументу.Назначение		КАК Назначение,
		|		РаботникиРегл.ДатаНачала				КАК ДатаНачала
		|	ИЗ ВТСписокРаботники КАК РаботникиПоДокументу
		|	ЛЕВОЕ СОЕДИНЕНИЕ ВТДвиженияРегл КАК РаботникиРегл
		|	ПО РаботникиРегл.Сотрудник = РаботникиПоДокументу.Назначение
		|
		| ) КАК Работники
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ (
		|		ВЫБРАТЬ
		|			РаботникиПоДокументу.Сотрудник		КАК Сотрудник,
		|			РаботникиПоДокументу.Назначение		КАК Назначение,
		|			РаботникиРегл.ДатаОкончания				КАК ДатаОкончания
		|		ИЗ ВТСписокРаботники КАК РаботникиПоДокументу
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДвиженияРегл КАК РаботникиРегл
		|		ПО РаботникиРегл.Сотрудник = РаботникиПоДокументу.Назначение
		|
		|   ) Окончание
		|   ПО		Работники.Назначение = Окончание.Назначение
		|   	И	Работники.ДатаНачала <= Окончание.ДатаОкончания
		|
		|СГРУППИРОВАТЬ ПО
		|	Работники.Сотрудник,
		|	Работники.Назначение,
		|	Работники.ДатаНачала
		| ";
		Запрос.Текст = ТекстЗапроса;
		Запрос.Выполнить();

		
		
		ТекстЗапроса = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ДатыДвижения.Сотрудник				КАК Сотрудник,
		|	ДатыДвижения.Назначение				КАК Назначение,
		|	ДатыДвижения.ДатаНачала				КАК ДатаНачала,
		|	ДатыДвижения.ДатаОкончания			КАК ДатаОкончания,
		|	РаботникиРегл.ПодразделениеОрганизации	КАК ПодразделениеОрганизации,
		|	РаботникиРегл.ГрафикРаботы	КАК ГрафикРаботы,
		|	РаботникиРегл.Должность		КАК Должность
		|ПОМЕСТИТЬ ВТДвиженияРаботников	
		|ИЗ ВТДвижения КАК ДатыДвижения
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ ВТДвиженияРегл КАК РаботникиРегл
		|ПО		ДатыДвижения.Назначение = РаботникиРегл.Сотрудник
		|	И	ДатыДвижения.ДатаНачала <= РаботникиРегл.ДатаОкончания 
		|	И	РаботникиРегл.ДатаНачала <= ДатыДвижения.ДатаОкончания 
		|
		|";
		Запрос.Текст = ТекстЗапроса;
		Запрос.Выполнить();
		ТекстЗапросаВТДвиженияРаботников = "ВТДвиженияРаботников";
	КонецЕсли; 
	Запрос.Текст = "ВЫБРАТЬ * ИЗ ВТДвиженияРаботников";
		
	//	ВТПлановыеНачисления
	Если Истина Тогда 
		//	Описание:
		// 		Получим движения по регистру ПлановыеНачисленияРаботниковОрганизаций (Сотрудники из ВТСписокРаботникиИЗамены)
		//		Начало дня - это начало события, Конец дня это закрытие события
		//		Для п.1.
		ПеременнаяОкончания = "
		|   	ВЫБОР	КОГДА  Окончания.Период ЕСТЬ NULL									// работник никуда не перемещался по регистру
		|         					ТОГДА КОНЕЦПЕРИОДА(&парамНачало, МЕСЯЦ)
		|         				КОГДА НАЧАЛОПЕРИОДА(Окончания.Период, ДЕНЬ) = Окончания.Период	// начало дня это кадровое перемещение, значит надо закрыть предыдущим днем
		|                           ТОГДА  ДОБАВИТЬКДАТЕ(Окончания.Период, СЕКУНДА, -1)
		|         				КОГДА КОНЕЦПЕРИОДА(Окончания.Период, ДЕНЬ) = Окончания.Период		// это увольнение, значит надо закрыть предыдущим днем
		|                           ТОГДА  Окончания.Период
		|                       ИНАЧЕ  КОНЕЦПЕРИОДА(&парамНачало, МЕСЯЦ)							// непонятная ситуация, но поставим конец месяца
		|				КОНЕЦ";
		ТекстЗапроса = "
		|	ВЫБРАТЬ
		|		ПлановыеНачисления.Сотрудник 				КАК Сотрудник,
		|		ПлановыеНачисления.ДатаНачала				КАК ДатаНачала,
		|		МИНИМУМ (" + ПеременнаяОкончания + ")	КАК ДатаОкончания,
		|		ПлановыеНачисления.ОсновноеНачисление 		КАК ОсновноеНачисление, // Истина = Оклад
		|		ПлановыеНачисления.ВидНачисления			КАК ВидНачисления, 
		|		ПлановыеНачисления.ВидРасчета 				КАК ВидРасчета,
		|		ПлановыеНачисления.Действие,
		|		ПлановыеНачисления.ДокументОснование,
		|		ПлановыеНачисления.Показатель1,
		|		ПлановыеНачисления.Показатель2,
		|		ПлановыеНачисления.Показатель3,
		|		ПлановыеНачисления.Показатель4,
		|		ПлановыеНачисления.Показатель5,
		|		ПлановыеНачисления.Показатель6,
		|		ПлановыеНачисления.ВидУчетаВремениДляСредней
		|	ПОМЕСТИТЬ ВТПлановыеНачисления	
		|	ИЗ (
		|		ВЫБРАТЬ
		|			Начисления.Организация			КАК Организация,
		|			Начисления.Сотрудник			КАК Сотрудник,
		|			Начисления.ВидРасчета 			КАК ВидРасчетаИзмерение,
		|			Начисления.ВидНачисления		КАК ВидНачисления,
		|			&парамНачало					КАК ДатаНачала,
		|			ВЫБОР	КОГДА Начисления.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.ИНАГРО_ВидыНачисленийРаботникаОрганизации.Основное) 
		|						ТОГДА ИСТИНА
		|					ИНАЧЕ ЛОЖЬ
		|			КОНЕЦ							КАК ОсновноеНачисление, // Оклад
		|			Начисления.ВидРасчета			КАК ВидРасчета,
		|			Начисления.Действие				КАК Действие,
		|			Начисления.ДокументОснование	КАК ДокументОснование,
		|			Начисления.Показатель1	КАК Показатель1,
		|			Начисления.Показатель2	КАК Показатель2,
		|			Начисления.Показатель3	КАК Показатель3,
		|			Начисления.Показатель4	КАК Показатель4,
		|			Начисления.Показатель5	КАК Показатель5,
		|			Начисления.Показатель6	КАК Показатель6,
		|			Начисления.ВидУчетаВремениДляСредней	КАК ВидУчетаВремениДляСредней
		|
		|			ИЗ РегистрСведений.ИНАГРО_ПлановыеНачисленияРаботниковОрганизаций.СрезПоследних(
		|					&парамНачало, Организация = &парамОрганизация И  
		|			    	Сотрудник В (ВЫБРАТЬ Назначение ИЗ " + ТекстЗапросаВТСписокРаботникиИЗамены + " КАК Работники)
		|				) КАК Начисления
		|	
		|			ГДЕ Начисления.Действует
		|			
		|			ОБЪЕДИНИТЬ ВСЕ
		|			ВЫБРАТЬ
		|				Начисления.Организация			КАК Организация,
		|				Начисления.Сотрудник			КАК Сотрудник,
		|				Начисления.ВидРасчета			КАК ВидРасчетаИзмерение,
		|				Начисления.ВидНачисления		КАК ВидНачисления,
		|				Начисления.Период				КАК ДатаНачала,
		|				ВЫБОР	КОГДА Начисления.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.ИНАГРО_ВидыНачисленийРаботникаОрганизации.Основное) 
		|							ТОГДА ИСТИНА
		|						ИНАЧЕ ЛОЖЬ
		|				КОНЕЦ 							КАК ОсновноеНачисление,
		|				Начисления.ВидРасчета			КАК ВидРасчета,
		|				Начисления.Действие				КАК Действие,
		|				Начисления.ДокументОснование	КАК ДокументОснование,
		|				Начисления.Показатель1	КАК Показатель1,
		|				Начисления.Показатель2	КАК Показатель2,
		|				Начисления.Показатель3	КАК Показатель3,
		|				Начисления.Показатель4	КАК Показатель4,
		|				Начисления.Показатель5	КАК Показатель5,
		|				Начисления.Показатель6	КАК Показатель6,
		|				Начисления.ВидУчетаВремениДляСредней	КАК ВидУчетаВремениДляСредней
		|			ИЗ РегистрСведений.ИНАГРО_ПлановыеНачисленияРаботниковОрганизаций КАК Начисления
		|
		|			ГДЕ		
		|					Начисления.Действует И
		|					Начисления.Организация = &парамОрганизация
		|				И	Начисления.Период > &парамНачало
		|				И	Начисления.Период <= &парамКонец
		|				И	Начисления.Сотрудник В ( ВЫБРАТЬ Назначение ИЗ " + ТекстЗапросаВТСписокРаботникиИЗамены + " КАК СписокРаботников )
		|	) КАК ПлановыеНачисления		
		|			
		|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИНАГРО_ПлановыеНачисленияРаботниковОрганизаций КАК Окончания
		|	ПО		НАЧАЛОПЕРИОДА(Окончания.Период, Месяц) = &парамНачало // все движения за месяц
		|		И	Окончания.Организация = ПлановыеНачисления.Организация
		|		И	Окончания.Сотрудник = ПлановыеНачисления.Сотрудник
		|		И	Окончания.ВидРасчета = ПлановыеНачисления.ВидРасчетаИзмерение
		|		И	Окончания.Период > ПлановыеНачисления.ДатаНачала
		|	СГРУППИРОВАТЬ ПО
		|		ПлановыеНачисления.Сотрудник,
		|		ПлановыеНачисления.ДатаНачала,
		|		ПлановыеНачисления.ОсновноеНачисление, 
		|		ПлановыеНачисления.ВидНачисления,
		|		ПлановыеНачисления.ВидРасчета,
		|		ПлановыеНачисления.Действие,
		|		ПлановыеНачисления.ДокументОснование,
		|		ПлановыеНачисления.Показатель1,
		|		ПлановыеНачисления.Показатель2,
		|		ПлановыеНачисления.Показатель3,
		|		ПлановыеНачисления.Показатель4,
		|		ПлановыеНачисления.Показатель5,
		|		ПлановыеНачисления.Показатель6,
		|		ПлановыеНачисления.ВидУчетаВремениДляСредней
		|ИНДЕКСИРОВАТЬ ПО
		|	Сотрудник,
		|	ОсновноеНачисление,
		|	ДатаНачала,
		|	ДатаОкончания,
		|	ВидРасчета
		|";
		Запрос.Текст = ТекстЗапроса;
		Запрос.Выполнить();
		ТекстЗапросаВТПлановыеНачисления = "ВТПлановыеНачисления";
	КонецЕсли; 
	Запрос.Текст = "ВЫБРАТЬ * ИЗ ВТПлановыеНачисления";
	
	//	ВТШтатноеРасписание
	Если Истина Тогда 
		//	Описание:
		// 		Получим движения по регистру НадбавкиПоШтатномуРасписаниюОрганизаций 
		//		(по всем подразделениям которые принадлежат организации)
		//		Начало дня - это начало события, Конец дня это закрытие события
		//		Для п.1.
		ТекстЗапроса = "
		|	ВЫБРАТЬ РАЗЛИЧНЫЕ
		|		ШтатныеНадбавки.Должность					КАК Должность,
		|		ШтатныеНадбавки.ПодразделениеОрганизации	КАК ПодразделениеОрганизации,
		|		ШтатныеНадбавки.ДатаНачала					КАК ДатаНачала,
		|	МИНИМУМ (
		|   	ВЫБОР	КОГДА  Окончания.Период ЕСТЬ NULL									// работник никуда не перемещался по регистру
		|         					ТОГДА КОНЕЦПЕРИОДА(&парамНачало, МЕСЯЦ)
		|         				КОГДА НАЧАЛОПЕРИОДА(Окончания.Период, ДЕНЬ) = Окончания.Период	// начало дня это кадровое перемещение, значит надо закрыть предыдущим днем
		|                           ТОГДА  ДОБАВИТЬКДАТЕ(Окончания.Период, СЕКУНДА, -1)
		|                       ИНАЧЕ  КОНЕЦПЕРИОДА(&парамНачало, МЕСЯЦ)							// непонятная ситуация, но поставим конец месяца
		|				КОНЕЦ)					КАК ДатаОкончания,
		|		ШтатныеНадбавки.ВидНадбавки	КАК ВидРасчета,
		|		ШтатныеНадбавки.Показатель1	КАК Показатель1,
		|		ШтатныеНадбавки.Показатель2	КАК Показатель2,
		|		ШтатныеНадбавки.Показатель3	КАК Показатель3,
		|		ШтатныеНадбавки.Показатель4	КАК Показатель4,		
		|		ШтатныеНадбавки.Показатель5	КАК Показатель5,		
		|		ШтатныеНадбавки.Показатель6	КАК Показатель6		
		|
		|	ПОМЕСТИТЬ ВТШтатноеРасписание	
		|	ИЗ (
		|			ВЫБРАТЬ
		|				Надбавки.Должность					КАК Должность,
		|				Надбавки.ПодразделениеОрганизации	КАК ПодразделениеОрганизации,
		|				Надбавки.ВидНадбавки				КАК ВидНадбавки,
		|				&парамНачало			КАК ДатаНачала,
		|				Надбавки.Показатель1	КАК Показатель1,
		|				Надбавки.Показатель2	КАК Показатель2,
		|				Надбавки.Показатель3	КАК Показатель3,
		|				Надбавки.Показатель4	КАК Показатель4,		
		|				Надбавки.Показатель5	КАК Показатель5,		
		|				Надбавки.Показатель6	КАК Показатель6		
		|			ИЗ РегистрСведений.ИНАГРО_НадбавкиПоШтатномуРасписаниюОрганизаций.СрезПоследних(&парамНачало, ПодразделениеОрганизации.Владелец = &парамОрганизация) КАК Надбавки
		|			ГДЕ		Надбавки.Показатель1 > 0 
		|				ИЛИ	Надбавки.Показатель2 > 0 
		|				ИЛИ	Надбавки.Показатель3 > 0 		
		|				ИЛИ	Надбавки.Показатель4 > 0
		|
		|			ОБЪЕДИНИТЬ ВСЕ
		|			ВЫБРАТЬ
		|				Надбавки.Должность		КАК Должность,
		|				Надбавки.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
		|				Надбавки.ВидНадбавки	КАК ВидНадбавки,
		|				Надбавки.Период			КАК ДатаНачала,
		|				Надбавки.Показатель1	КАК Показатель1,
		|				Надбавки.Показатель2	КАК Показатель2,
		|				Надбавки.Показатель3	КАК Показатель3,
		|				Надбавки.Показатель4	КАК Показатель4,		
		|				Надбавки.Показатель5	КАК Показатель5,		
		|				Надбавки.Показатель6	КАК Показатель6		
		|			ИЗ РегистрСведений.ИНАГРО_НадбавкиПоШтатномуРасписаниюОрганизаций КАК Надбавки
		|			ГДЕ		НАЧАЛОПЕРИОДА(Надбавки.Период,МЕСЯЦ) = &парамНачало И Надбавки.Период > &парамНачало
		|				И	Надбавки.ПодразделениеОрганизации.Владелец = &парамОрганизация
		|				И	(Надбавки.Показатель1 > 0 
		|				ИЛИ	Надбавки.Показатель2 > 0 
		|				ИЛИ	Надбавки.Показатель3 > 0 		
		|				ИЛИ	Надбавки.Показатель4 > 0  )
		|	) КАК ШтатныеНадбавки
		|			
		|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИНАГРО_НадбавкиПоШтатномуРасписаниюОрганизаций КАК Окончания
		|	ПО		НАЧАЛОПЕРИОДА(Окончания.Период) = &парамНачало // все движения за месяц
		|		И	Окончания.ПодразделениеОрганизации.Владелец = &парамОрганизация
		|		И	ШтатныеНадбавки.ДатаНачала < Окончания.Период
		|			
		|	СГРУППИРОВАТЬ ПО
		|		ШтатныеНадбавки.Должность,
		|		ШтатныеНадбавки.ПодразделениеОрганизации,
		|		ШтатныеНадбавки.ВидНадбавки,
		|		ШтатныеНадбавки.ДатаНачала,
		|		ШтатныеНадбавки.Показатель1,
		|		ШтатныеНадбавки.Показатель2,
		|		ШтатныеНадбавки.Показатель3,
		|		ШтатныеНадбавки.Показатель4,		
		|		ШтатныеНадбавки.Показатель5,		
		|		ШтатныеНадбавки.Показатель6		
		|";			
		Запрос.Текст = ТекстЗапроса;
		Запрос.Выполнить();
		ТекстЗапросаВТШтатноеРасписание = "ВТШтатноеРасписание";
	КонецЕсли;
	Запрос.Текст = "ВЫБРАТЬ * ИЗ ВТШтатноеРасписание";

	//	ВТВсеНачисленияБезИзмененияОкладов
	Если Истина Тогда
		ТекстЗапросаВТ = "
		|// (п.1.2.3.) Оклады по назначениям (основные, совместители) и штатные надбавки
		|	ВЫБРАТЬ
		|		1 КАК НомерЗапроса,
		|		РаботникиОрганизации.Сотрудник,
		|		РаботникиОрганизации.Назначение,
		|		ОсновныеНачисления.ВидРасчета,
		|		ИСТИНА											КАК ОсновноеНачисление,
		|		ВЫБОР КОГДА ДвиженияРаботников.ДатаНачала <= ОсновныеНачисления.ДатаНачала			ТОГДА ОсновныеНачисления.ДатаНачала		ИНАЧЕ ДвиженияРаботников.ДатаНачала		КОНЕЦ КАК ДатаНачала,
		|		ВЫБОР КОГДА ДвиженияРаботников.ДатаОкончания <= ОсновныеНачисления.ДатаОкончания	ТОГДА ДвиженияРаботников.ДатаОкончания	ИНАЧЕ ОсновныеНачисления.ДатаОкончания	КОНЕЦ КАК ДатаОкончания,
		|		ДвиженияРаботников.ПодразделениеОрганизации,
		|		ДвиженияРаботников.ГрафикРаботы,
		|		ДвиженияРаботников.Должность,
		|
		|		ОсновныеНачисления.ДокументОснование,
		|		ОсновныеНачисления.Показатель1,
		|		ОсновныеНачисления.Показатель2,
		|		ОсновныеНачисления.Показатель3,
		|		ОсновныеНачисления.Показатель4,
		|		ОсновныеНачисления.Показатель5,
		|		ОсновныеНачисления.Показатель6,
		|		ОсновныеНачисления.ВидУчетаВремениДляСредней	КАК ВидУчетаВремениДляСредней
		|ПОМЕСТИТЬ ВТВсеНачисленияБезИзмененияОкладов	
		|	ИЗ " + ТекстЗапросаВТСписокРаботники + " КАК РаботникиОрганизации
		|	
		|	ЛЕВОЕ СОЕДИНЕНИЕ " + ТекстЗапросаВТДвиженияРаботников + " КАК ДвиженияРаботников	
		|	ПО		РаботникиОрганизации.Назначение = ДвиженияРаботников.Назначение	
		|
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ " + ТекстЗапросаВТПлановыеНачисления + " КАК ОсновныеНачисления	
		|	ПО		РаботникиОрганизации.Назначение = ОсновныеНачисления.Сотрудник	
		|		И	ОсновныеНачисления.ОсновноеНачисление
		|		И	ДвиженияРаботников.ДатаНачала <= ОсновныеНачисления.ДатаОкончания
		|		И	ОсновныеНачисления.ДатаНачала <= ДвиженияРаботников.ДатаОкончания
		|	
		|	
		|	
		|//-----------------------
		|	ОБЪЕДИНИТЬ ВСЕ
		|// (п.1.2.3.) Оклады заменам
		|	ВЫБРАТЬ
		|		2 КАК НомерЗапроса,
		|		Замены.Сотрудник,
		|		Замены.Назначение,
		|		ОсновныеНачисления.ВидРасчета,
		|		ИСТИНА							КАК ОсновноеНачисление,
		|		Замены.ДатаНачала				КАК ДатаНачала,
		|		Замены.ДатаОкончания			КАК ДатаОкончания,
		|		Замены.ПодразделениеОрганизации,
		|		Замены.ГрафикРаботы,
		|		Замены.Должность,
		|		Замены.ДокументОснование		КАК ДокументОснование,
		|		ОсновныеНачисления.Показатель1,
		|		ОсновныеНачисления.Показатель2,
		|		ОсновныеНачисления.Показатель3,
		|		ОсновныеНачисления.Показатель4,
		|		ОсновныеНачисления.Показатель5,
		|		ОсновныеНачисления.Показатель6,
		|		ОсновныеНачисления.ВидУчетаВремениДляСредней	КАК ВидУчетаВремениДляСредней
		|	ИЗ ВТЗамены КАК Замены
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ " + ТекстЗапросаВТПлановыеНачисления + " КАК ОсновныеНачисления	
		|	ПО		Замены.Назначение = ОсновныеНачисления.Сотрудник	
		|		И	ОсновныеНачисления.ОсновноеНачисление
		|       // данные на начало замены
		|		И	Замены.ДатаНачала <= ОсновныеНачисления.ДатаОкончания
		|		И	ОсновныеНачисления.ДатаНачала <= Замены.ДатаНачала
		|	
		|	
		|	
		|//-----------------------
		|	ОБЪЕДИНИТЬ ВСЕ
		|// (п.1.) Основные, совместители и их штатные надбавки
		|	ВЫБРАТЬ
		|		3 КАК НомерЗапроса,
		|		Штатные.Сотрудник,
		|		Штатные.Назначение,
		|		Штатные.ВидРасчета,
		|		Штатные.ОсновноеНачисление,
		|		Штатные.ДатаНачала,
		|		Штатные.ДатаОкончания,
		|		Штатные.ПодразделениеОрганизации,
		|		Штатные.ГрафикРаботы,
		|		Штатные.Должность,
		|
		|		NULL КАК ДокументОснование,
		|		Штатные.Показатель1,
		|		Штатные.Показатель2,
		|		Штатные.Показатель3,
		|		Штатные.Показатель4,
		|		Штатные.Показатель5,
		|		Штатные.Показатель6,
		|		NULL	КАК ВидУчетаВремениДляСредней
		|   ИЗ ( 
		|		ВЫБРАТЬ
		|			РаботникиОрганизации.Сотрудник,
		|			РаботникиОрганизации.Назначение,
		|			ШтатныеНадбавки.ВидРасчета,
		|			ЛОЖЬ											КАК ОсновноеНачисление,
		|
		|			ВЫБОР 
		|				КОГДА ПлановыеНачисления.НомерТочки	ЕСТЬ NULL ИЛИ ПлановыеНачисления.НомерТочки = 1		
		|					ТОГДА	ВЫБОР 
		|							КОГДА ДвиженияРаботников.ДатаНачала <= ШтатныеНадбавки.ДатаНачала			
		|									ТОГДА ШтатныеНадбавки.ДатаНачала		
		|								ИНАЧЕ ДвиженияРаботников.ДатаНачала 
		|							КОНЕЦ 
		|				ИНАЧЕ // ПлановыеНачисления.НомерТочки = 2
		|					ВЫБОР 
		|						КОГДА ДОБАВИТЬКДАТЕ(НачалоПЕРИОДА(ПлановыеНачисления.ДатаОкончания,ДЕНЬ), ДЕНЬ,1) >= ШтатныеНадбавки.ДатаНачала			
		|							ИЛИ ДОБАВИТЬКДАТЕ(НачалоПЕРИОДА(ПлановыеНачисления.ДатаОкончания,ДЕНЬ), ДЕНЬ,1) >= ДвиженияРаботников.ДатаНачала			
		|							ТОГДА ДОБАВИТЬКДАТЕ(НачалоПЕРИОДА(ПлановыеНачисления.ДатаОкончания,ДЕНЬ), ДЕНЬ,1)		
		|						КОГДА ДвиженияРаботников.ДатаНачала <= ШтатныеНадбавки.ДатаНачала			
		|							ТОГДА ШтатныеНадбавки.ДатаНачала		
		|						ИНАЧЕ ДвиженияРаботников.ДатаНачала 
		|					КОНЕЦ 
		|			КОНЕЦ 
		|			КАК ДатаНачала,
		|
		|			ВЫБОР 
		|				КОГДА ПлановыеНачисления.НомерТочки ЕСТЬ NULL ИЛИ ПлановыеНачисления.НомерТочки = 2		
		|					ТОГДА	ВЫБОР 
		|								КОГДА ДвиженияРаботников.ДатаОкончания <= ШтатныеНадбавки.ДатаОкончания	
		|									ТОГДА ДвиженияРаботников.ДатаОкончания	
		|								ИНАЧЕ ШтатныеНадбавки.ДатаОкончания	
		|							КОНЕЦ 
 		|				ИНАЧЕ // ПлановыеНачисления.НомерТочки = 1 
		|					ВЫБОР 
		|						КОГДА ДОБАВИТЬКДАТЕ(НачалоПЕРИОДА(ПлановыеНачисления.ДатаНачала,ДЕНЬ), ДЕНЬ,-1) <= ШтатныеНадбавки.ДатаОкончания			
		|							ИЛИ ДОБАВИТЬКДАТЕ(НачалоПЕРИОДА(ПлановыеНачисления.ДатаНачала,ДЕНЬ), ДЕНЬ,-1) <= ДвиженияРаботников.ДатаОкончания			
		|							ТОГДА ДОБАВИТЬКДАТЕ(НачалоПЕРИОДА(ПлановыеНачисления.ДатаНачала,ДЕНЬ), ДЕНЬ,-1)		
		|						КОГДА ДвиженияРаботников.ДатаОкончания <= ШтатныеНадбавки.ДатаОкончания	
		|							ТОГДА ДвиженияРаботников.ДатаОкончания	
		|						ИНАЧЕ ШтатныеНадбавки.ДатаОкончания	
		|					КОНЕЦ 
		|			КОНЕЦ 
		|			КАК ДатаОкончания,
		|
		|			ДвиженияРаботников.ПодразделениеОрганизации,
		|			ДвиженияРаботников.ГрафикРаботы,
		|			ДвиженияРаботников.Должность,
		|
		|			ШтатныеНадбавки.Показатель1,
		|			ШтатныеНадбавки.Показатель2,
		|			ШтатныеНадбавки.Показатель3,
		|			ШтатныеНадбавки.Показатель4,
		|			ШтатныеНадбавки.Показатель5,
		|			ШтатныеНадбавки.Показатель6
		|
		|		ИЗ " + ТекстЗапросаВТСписокРаботники + " КАК РаботникиОрганизации
		|	
		|		ЛЕВОЕ СОЕДИНЕНИЕ " + ТекстЗапросаВТДвиженияРаботников + " КАК ДвиженияРаботников	
		|		ПО		РаботникиОрганизации.Назначение = ДвиженияРаботников.Назначение	
		|
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ " + ТекстЗапросаВТШтатноеРасписание + " КАК ШтатныеНадбавки	
		|		ПО		ШтатныеНадбавки.ПодразделениеОрганизации = ДвиженияРаботников.ПодразделениеОрганизации
		|			И	ШтатныеНадбавки.Должность = ДвиженияРаботников.Должность
		|			И	ДвиженияРаботников.ДатаНачала <= ШтатныеНадбавки.ДатаОкончания
		|			И	ШтатныеНадбавки.ДатаНачала <= ДвиженияРаботников.ДатаОкончания
		|
		|   	// отрезок вытеснения
		|		ЛЕВОЕ СОЕДИНЕНИЕ (	
		|			ВЫБРАТЬ
		|     	      1 КАК НомерТочки,
		|     	      ПлановыеНач.Сотрудник,
		|     	      ПлановыеНач.ОсновноеНачисление,
		|     	      ПлановыеНач.ДатаНачала	КАК ДатаНачала,
		|     	      &парамКонец 			КАК ДатаОкончания,
		|     	      ПлановыеНач.ВидРасчета
		|			ИЗ " + ТекстЗапросаВТПлановыеНачисления + " КАК ПлановыеНач
		|			ГДЕ НЕ ПлановыеНач.ОсновноеНачисление
		|
		|
		|       	ОБЪЕДИНИТЬ ВСЕ
		|			ВЫБРАТЬ
		|       	    2 КАК НомерТочки,
		|       	    ПлановыеНач.Сотрудник,
		|       	    ПлановыеНач.ОсновноеНачисление,
		|        	   &парамКонец					КАК ДатаНачала,
		|        	   ПлановыеНач.ДатаОкончания	КАК ДатаОкончания,
		|        	   ПлановыеНач.ВидРасчета
		|			ИЗ " + ТекстЗапросаВТПлановыеНачисления + " КАК ПлановыеНач
		|			ГДЕ НЕ ПлановыеНач.ОсновноеНачисление
		|
		|			) КАК ПлановыеНачисления	
		|		ПО		РаботникиОрганизации.Назначение = ПлановыеНачисления.Сотрудник	
		|			И	ДвиженияРаботников.ДатаНачала <= ПлановыеНачисления.ДатаОкончания
		|			И	ПлановыеНачисления.ДатаНачала <= ДвиженияРаботников.ДатаОкончания
		|			И	ШтатныеНадбавки.ВидРасчета = ПлановыеНачисления.ВидРасчета
		|			И	(ВЫБОР КОГДА ДвиженияРаботников.ДатаНачала <= ШтатныеНадбавки.ДатаНачала ТОГДА ШтатныеНадбавки.ДатаНачала ИНАЧЕ ДвиженияРаботников.ДатаНачала КОНЕЦ
		|				<= ПлановыеНачисления.ДатаНачала
		|			ИЛИ	ПлановыеНачисления.ДатаОкончания
		|				<= ВЫБОР КОГДА ДвиженияРаботников.ДатаОкончания <= ШтатныеНадбавки.ДатаОкончания ТОГДА ДвиженияРаботников.ДатаОкончания	ИНАЧЕ ШтатныеНадбавки.ДатаОкончания  КОНЕЦ)
		|
		|   ) КАК Штатные
		|	ГДЕ Штатные.ДатаНачала <= Штатные.ДатаОкончания			
		|	
		|	
		|	
		|//-----------------------
		|	ОБЪЕДИНИТЬ ВСЕ
		|// (п.1.) Замены и их штатные надбавки
		|	ВЫБРАТЬ
		|		4 КАК НомерЗапроса,
		|		Замены.Сотрудник,
		|		Замены.Назначение,
		|		ШтатныеНадбавки.ВидРасчета,
		|		ЛОЖЬ							КАК ОсновноеНачисление,
		|		Замены.ДатаНачала				КАК ДатаНачала,
		|		Замены.ДатаОкончания			КАК ДатаОкончания,
		|		Замены.ПодразделениеОрганизации,
		|		Замены.ГрафикРаботы,
		|		Замены.Должность,
		|
		|		NULL,
		|		ШтатныеНадбавки.Показатель1,
		|		ШтатныеНадбавки.Показатель2,
		|		ШтатныеНадбавки.Показатель3,
		|		ШтатныеНадбавки.Показатель4,
		|		ШтатныеНадбавки.Показатель5,
		|		ШтатныеНадбавки.Показатель6,
		|		NULL	КАК ВидУчетаВремениДляСредней
		|	ИЗ ВТЗамены КАК Замены
		|
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ " + ТекстЗапросаВТШтатноеРасписание + " КАК ШтатныеНадбавки	
		|	ПО		ШтатныеНадбавки.ПодразделениеОрганизации = Замены.ПодразделениеОрганизации
		|		И	ШтатныеНадбавки.Должность = Замены.Должность
		|		И	Замены.ДатаНачала <= ШтатныеНадбавки.ДатаОкончания
		|		И	ШтатныеНадбавки.ДатаНачала <= Замены.ДатаНачала
		|	
		|	
		|	
		|//-----------------------
		|	ОБЪЕДИНИТЬ ВСЕ
		|// (п.2.) Прочие плановые начисления по работникам кроме начислений по которым заменяли
		|	ВЫБРАТЬ
		|		5 КАК НомерЗапроса,
		|		РаботникиОрганизации.Сотрудник,
		|		РаботникиОрганизации.Назначение			КАК Назначение,
		|		Начисления.ВидРасчета,
		|		ЛОЖЬ									КАК ОсновноеНачисление,
		|		Начисления.ДатаНачала,
		|		Начисления.ДатаОкончания,
		|   	ДвиженияРаботников.ПодразделениеОрганизации,
		|
		|		ДвиженияРаботников.ГрафикРаботы,
		|		ДвиженияРаботников.Должность,
		|
		|		Начисления.ДокументОснование,
		|		Начисления.Показатель1,
		|		Начисления.Показатель2,
		|		Начисления.Показатель3,
		|		Начисления.Показатель4,
		|		Начисления.Показатель5,
		|		Начисления.Показатель6,
		|		Начисления.ВидУчетаВремениДляСредней
		|
		|	ИЗ " + ТекстЗапросаВТСписокРаботники + " КАК РаботникиОрганизации
		|	
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ " + ТекстЗапросаВТПлановыеНачисления + " КАК Начисления	
		|	ПО		РаботникиОрганизации.Назначение = Начисления.Сотрудник	
		|		И	НЕ Начисления.ОсновноеНачисление
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ (	
		|		ВЫБРАТЬ
		|			ПлановыеНачисления.Сотрудник  КАК Сотрудник,
		|			ПлановыеНачисления.ВидРасчета  КАК ВидРасчета,
		|			ПлановыеНачисления.ДатаНачала  КАК ДатаНачала,
		|			МАКСИМУМ(Движения.ДатаНачала)  КАК АктуальнаяДата
		|		ИЗ " + ТекстЗапросаВТПлановыеНачисления + " КАК ПлановыеНачисления	
		|		ЛЕВОЕ СОЕДИНЕНИЕ  " + ТекстЗапросаВТДвиженияРаботников + " КАК Движения
		|   	ПО		Движения.Назначение = ПлановыеНачисления.Сотрудник
		|			И	Движения.ДатаНачала <= ПлановыеНачисления.ДатаНачала
		|		ГДЕ	НЕ ПлановыеНачисления.ОсновноеНачисление
		|		СГРУППИРОВАТЬ ПО
		|			ПлановыеНачисления.Сотрудник,
		|			ПлановыеНачисления.ВидРасчета,
		|			ПлановыеНачисления.ДатаНачала
		|	) КАК ПериодАктуальногоДвижения
		|	ПО 		ПериодАктуальногоДвижения.Сотрудник = Начисления.Сотрудник
		|		И	ПериодАктуальногоДвижения.ВидРасчета = Начисления.ВидРасчета		
		|		И	ПериодАктуальногоДвижения.ДатаНачала = Начисления.ДатаНачала		
		|	
		|	ЛЕВОЕ СОЕДИНЕНИЕ  " + ТекстЗапросаВТДвиженияРаботников + " КАК ДвиженияРаботников
		|	ПО		ДвиженияРаботников.Назначение = РаботникиОрганизации.Назначение
		|		И	ПериодАктуальногоДвижения.АктуальнаяДата = ДвиженияРаботников.ДатаНачала
		|	
		|	
		|	
		|//-----------------------
		|	ОБЪЕДИНИТЬ ВСЕ 
		|// (п.2.) Прочие плановые начисления только по работникам которых заменяли
		|	ВЫБРАТЬ
		|		5 КАК НомерЗапроса,
		|		Замены.Сотрудник,
		|		Замены.Назначение			КАК Назначение,
		|		Начисления.ВидРасчета,
		|		ЛОЖЬ									КАК ОсновноеНачисление,
		|		Замены.ДатаНачала				КАК ДатаНачала,
		|		Замены.ДатаОкончания			КАК ДатаОкончания,
		|   	Замены.ПодразделениеОрганизации,
		|
		|		Замены.ГрафикРаботы,
		|		Замены.Должность,
		|
		|		Замены.ДокументОснование,
		|		Начисления.Показатель1,
		|		Начисления.Показатель2,
		|		Начисления.Показатель3,
		|		Начисления.Показатель4,
		|		Начисления.Показатель5,
		|		Начисления.Показатель6,
		|		Начисления.ВидУчетаВремениДляСредней
		|
		|	ИЗ ВТЗамены КАК Замены
		|	
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ " + ТекстЗапросаВТПлановыеНачисления + " КАК Начисления	
		|	ПО		Замены.Назначение = Начисления.Сотрудник	
		|		И	Начисления.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.ИНАГРО_ВидыНачисленийРаботникаОрганизации.Надбавка)
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ (	
		|		ВЫБРАТЬ
		|			ПлановыеНачисления.Сотрудник  КАК Сотрудник,
		|			ПлановыеНачисления.ВидРасчета  КАК ВидРасчета,
		|			ПлановыеНачисления.ДатаНачала  КАК ДатаНачала,
		|			МАКСИМУМ(Движения.ДатаНачала)  КАК АктуальнаяДата
		|		ИЗ " + ТекстЗапросаВТПлановыеНачисления + " КАК ПлановыеНачисления	
		|		ЛЕВОЕ СОЕДИНЕНИЕ  " + ТекстЗапросаВТДвиженияРаботников + " КАК Движения
		|   	ПО		Движения.Назначение = ПлановыеНачисления.Сотрудник
		|			И	Движения.ДатаНачала <= ПлановыеНачисления.ДатаНачала
		|		ГДЕ	ПлановыеНачисления.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.ИНАГРО_ВидыНачисленийРаботникаОрганизации.Надбавка) 
		|		СГРУППИРОВАТЬ ПО
		|			ПлановыеНачисления.Сотрудник,
		|			ПлановыеНачисления.ВидРасчета,
		|			ПлановыеНачисления.ДатаНачала
		|	) КАК ПериодАктуальногоДвижения
		|	ПО 		ПериодАктуальногоДвижения.Сотрудник = Начисления.Сотрудник
		|		И	ПериодАктуальногоДвижения.ВидРасчета = Начисления.ВидРасчета		
		|		И	ПериодАктуальногоДвижения.ДатаНачала = Начисления.ДатаНачала		
		|	
		|	ЛЕВОЕ СОЕДИНЕНИЕ  " + ТекстЗапросаВТДвиженияРаботников + " КАК ДвиженияРаботников
		|	ПО		ДвиженияРаботников.Назначение = Замены.Назначение
		|		И	ПериодАктуальногоДвижения.АктуальнаяДата = ДвиженияРаботников.ДатаНачала
		|	
		|	
		|	
		|//-----------------------
		|	ОБЪЕДИНИТЬ ВСЕ
		|// (п.1.) Надо вытеснить основной оклад если было Замещение
		|	ВЫБРАТЬ
		|		6 КАК НомерЗапроса,
		|		Замены.Сотрудник КАК Сотрудник,
		|		Замены.Сотрудник КАК Назначение,
		|		Замены.ВидРасчета,
		|		ЛОЖЬ							КАК ОсновноеНачисление,
		|		Замены.ДатаНачала				КАК ДатаНачала,
		|		Замены.ДатаОкончания			КАК ДатаОкончания,
		|		Замены.ПодразделениеОрганизации,
		|		Замены.ГрафикРаботы,
		|		Замены.Должность,
		|
		|		NULL,
		|		NULL КАК Показатель1,
		|		NULL КАК Показатель2,
		|		NULL КАК Показатель3,
		|		NULL КАК Показатель4,
		|		NULL КАК Показатель5,
		|		NULL КАК Показатель6,
		|		NULL КАК ВидУчетаВремениДляСредней
		|
		|	ИЗ ВТЗамены КАК Замены
		|	
		|	ГДЕ Замены.ВидРасчета = ЗНАЧЕНИЕ(ПланВидовРасчета.ИНАГРО_Начисления.Замещение)
		|";
		Запрос.Текст = ТекстЗапросаВТ;
		Запрос.Выполнить();
	КонецЕсли;
	Запрос.Текст = "ВЫБРАТЬ * ИЗ ВТВсеНачисленияБезИзмененияОкладов";
	
	//	ВТОкладТариф
	Если Истина Тогда 
		//	Описание:
		// 		Все оклады сотрудников
		//		Для п.1.
		ТекстЗапроса = "
		|ВЫБРАТЬ
		|	Начисления.Организация	КАК Организация,
		|	Начисления.Сотрудник	КАК Назначение,
		|	Начисления.ВидРасчета	КАК ВидРасчета,
		|
		|	ВЫБОР	КОГДА 		Начисления.ВидРасчета.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаНачислений.ПоМесячнойТарифнойСтавкеПоДням)
		|					ИЛИ Начисления.ВидРасчета.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаНачислений.ПоМесячнойТарифнойСтавкеПоЧасам)
		|					ИЛИ	НаборПоказателей.Показатель = ЗНАЧЕНИЕ(Справочник.ИНАГРО_ПоказателиСхемМотивации.НормаВремениВДнях)
		|					ИЛИ	НаборПоказателей.Показатель = ЗНАЧЕНИЕ(Справочник.ИНАГРО_ПоказателиСхемМотивации.НормаВремениВЧасах)
		|					ИЛИ	НаборПоказателей.Показатель = ЗНАЧЕНИЕ(Справочник.ИНАГРО_ПоказателиСхемМотивации.НормаВремениЗаМесяцВДнях)		
		|					ИЛИ	НаборПоказателей.Показатель = ЗНАЧЕНИЕ(Справочник.ИНАГРО_ПоказателиСхемМотивации.НормаВремениЗаМесяцВЧасах)
		|				ТОГДА ""ЗА МЕСЯЦ""
		|			КОГДА 	Начисления.ВидРасчета.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаНачислений.ПоДневнойТарифнойСтавке)
		|			ТОГДА ""ЗА ДЕНЬ""
		|			ИНАЧЕ ""ЗА ЧАС""
		|	КОНЕЦ					КАК СпособУчетаВремени,
		|
		|	Начисления.Показатель1 КАК ОкладТариф,
		|
		|	Начисления.Период		КАК ДатаНачала,
		|	МИНИМУМ(Окончания.Период)	КАК ДатаОкончания
		|ПОМЕСТИТЬ ВТОкладТариф	
		|ИЗ РегистрСведений.ИНАГРО_ПлановыеНачисленияРаботниковОрганизаций КАК Начисления
		|
		|
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИНАГРО_ПлановыеНачисленияРаботниковОрганизаций КАК Окончания
		|ПО Начисления.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.ИНАГРО_ВидыНачисленийРаботникаОрганизации.Основное)
		|	И	Начисления.Действует 
		|	И	Начисления.Организация = &парамОрганизация
		|	И	Начисления.Сотрудник = Окончания.Сотрудник
		|	И	Начисления.ВидРасчета = Окончания.ВидРасчета
		|	И	Начисления.Период < Окончания.Период
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ(
		|	ВЫБРАТЬ ПЕРВЫЕ 1
		|   НаборПоказателей.Ссылка	КАК ВидРасчета,
		|   НаборПоказателей.Показатель	КАК Показатель
		|	ИЗ ПланВидовРасчета.ИНАГРО_Начисления.Показатели КАК НаборПоказателей
		|	ГДЕ		НаборПоказателей.Показатель = ЗНАЧЕНИЕ(Справочник.ИНАГРО_ПоказателиСхемМотивации.НормаВремениВДнях)
		|		ИЛИ	НаборПоказателей.Показатель = ЗНАЧЕНИЕ(Справочник.ИНАГРО_ПоказателиСхемМотивации.НормаВремениВЧасах)
		|		ИЛИ	НаборПоказателей.Показатель = ЗНАЧЕНИЕ(Справочник.ИНАГРО_ПоказателиСхемМотивации.НормаВремениЗаМесяцВДнях)		
		|		ИЛИ	НаборПоказателей.Показатель = ЗНАЧЕНИЕ(Справочник.ИНАГРО_ПоказателиСхемМотивации.НормаВремениЗаМесяцВЧасах)
		|) КАК НаборПоказателей
		|ПО Начисления.ВидРасчета = НаборПоказателей.ВидРасчета
		|
		|ГДЕ		Начисления.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.ИНАГРО_ВидыНачисленийРаботникаОрганизации.Основное)
		|	И	Начисления.Действует 
		|	И	Начисления.Организация = &парамОрганизация
		|	И	Начисления.Сотрудник В (ВЫБРАТЬ Назначение ИЗ " + ТекстЗапросаВТСписокРаботникиИЗамены + " КАК Работники)
		|
		|СГРУППИРОВАТЬ ПО
		|	Начисления.Организация,
		|	Начисления.Сотрудник,
		|	Начисления.ВидРасчета,
		|	ВЫБОР	КОГДА 		Начисления.ВидРасчета.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаНачислений.ПоМесячнойТарифнойСтавкеПоДням)
		|					ИЛИ Начисления.ВидРасчета.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаНачислений.ПоМесячнойТарифнойСтавкеПоЧасам)
		|					ИЛИ	НаборПоказателей.Показатель = ЗНАЧЕНИЕ(Справочник.ИНАГРО_ПоказателиСхемМотивации.НормаВремениВДнях)
		|					ИЛИ	НаборПоказателей.Показатель = ЗНАЧЕНИЕ(Справочник.ИНАГРО_ПоказателиСхемМотивации.НормаВремениВЧасах)
		|					ИЛИ	НаборПоказателей.Показатель = ЗНАЧЕНИЕ(Справочник.ИНАГРО_ПоказателиСхемМотивации.НормаВремениЗаМесяцВДнях)		
		|					ИЛИ	НаборПоказателей.Показатель = ЗНАЧЕНИЕ(Справочник.ИНАГРО_ПоказателиСхемМотивации.НормаВремениЗаМесяцВЧасах)
		|				ТОГДА ""ЗА МЕСЯЦ""
		|			КОГДА 	Начисления.ВидРасчета.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаНачислений.ПоДневнойТарифнойСтавке)
		|			ТОГДА ""ЗА ДЕНЬ""
		|			ИНАЧЕ ""ЗА ЧАС""
		|	КОНЕЦ,
		|
		|	Начисления.Показатель1,
		|
		|	Начисления.Период
 		|";
		Запрос.Текст = ТекстЗапроса;
		Запрос.Выполнить();
	КонецЕсли;
	Запрос.Текст = "ВЫБРАТЬ * ИЗ ВТОкладТариф";
	
	//	ВТВсеНачисления
	Если НЕ ПредварительныйРасчет Тогда
		ТекстЗапросаВТ = "
		|	ВЫБРАТЬ 
		|		СписокНачислений1.Сотрудник			КАК Сотрудник,
		|		СписокНачислений1.Назначение		КАК Назначение,
		|		ВЫБОР КОГДА ЕСТЬNULL(Оклады1.ДатаНачала,СписокНачислений1.ДатаНачала) <= СписокНачислений1.ДатаНачала		ТОГДА СписокНачислений1.ДатаНачала	ИНАЧЕ Оклады1.ДатаНачала		КОНЕЦ			КАК ДатаНачала,
		|		ВЫБОР КОГДА ЕСТЬNULL(Оклады1.ДатаОкончания,СписокНачислений1.ДатаОкончания) < СписокНачислений1.ДатаОкончания	ТОГДА Оклады1.ДатаОкончания	ИНАЧЕ СписокНачислений1.ДатаОкончания	КОНЕЦ	КАК ДатаОкончания,
		|		СписокНачислений1.ВидРасчета		КАК ВидРасчета,
		|
		|		СписокНачислений1.НомерЗапроса,
		|		СписокНачислений1.ОсновноеНачисление,
		|		СписокНачислений1.ПодразделениеОрганизации,
		|		СписокНачислений1.ГрафикРаботы,
		|		СписокНачислений1.Должность,
		|
		|		СписокНачислений1.ДокументОснование,
		|		СписокНачислений1.Показатель1,
		|		СписокНачислений1.Показатель2,
		|		СписокНачислений1.Показатель3,
		|		СписокНачислений1.Показатель4,
		|		СписокНачислений1.Показатель5,
		|		СписокНачислений1.Показатель6,
		|		СписокНачислений1.ВидУчетаВремениДляСредней,
		|		МАКСИМУМ(Оклады2.ДатаНачала) КАК ДатаНачалаОклада
		|ПОМЕСТИТЬ ВТВсеНачисления	
		|	ИЗ ВТВсеНачисленияБезИзмененияОкладов КАК СписокНачислений1
		|	//-----------------------
		|	// данные о видах показателей
		|	ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.ИНАГРО_Начисления.Показатели КАК ТипПоказатель1
		|	ПО		ТипПоказатель1.Ссылка = СписокНачислений1.ВидРасчета И ТипПоказатель1.НомерСтроки = 1
		|	ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.ИНАГРО_Начисления.Показатели КАК ТипПоказатель2
		|	ПО		ТипПоказатель2.Ссылка = СписокНачислений1.ВидРасчета И ТипПоказатель2.НомерСтроки = 2
		|	ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.ИНАГРО_Начисления.Показатели КАК ТипПоказатель3
		|	ПО		ТипПоказатель3.Ссылка = СписокНачислений1.ВидРасчета И ТипПоказатель3.НомерСтроки = 3
		|	ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.ИНАГРО_Начисления.Показатели КАК ТипПоказатель4
		|	ПО		ТипПоказатель4.Ссылка = СписокНачислений1.ВидРасчета И ТипПоказатель4.НомерСтроки = 4
		|	ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.ИНАГРО_Начисления.Показатели КАК ТипПоказатель5
		|	ПО		ТипПоказатель5.Ссылка = СписокНачислений1.ВидРасчета И ТипПоказатель5.НомерСтроки = 5
		|	ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.ИНАГРО_Начисления.Показатели КАК ТипПоказатель6
		|	ПО		ТипПоказатель6.Ссылка = СписокНачислений1.ВидРасчета И ТипПоказатель6.НомерСтроки = 6
		|	//-----------------------
		|	// данные об окладе
		|	ЛЕВОЕ СОЕДИНЕНИЕ ВТОкладТариф КАК Оклады1
		|	ПО		СписокНачислений1.Назначение = Оклады1.Назначение
		| 		И  (СписокНачислений1.ДатаНачала <= Оклады1.ДатаОкончания ИЛИ Оклады1.ДатаОкончания ЕСТЬ NULL)
		| 		И  Оклады1.ДатаНачала <= СписокНачислений1.ДатаОкончания
		|		И	(ТипПоказатель1.Показатель = ЗНАЧЕНИЕ(Справочник.ИНАГРО_ПоказателиСхемМотивации.ОкладТарифНазначения)
		|		ИЛИ	ТипПоказатель2.Показатель = ЗНАЧЕНИЕ(Справочник.ИНАГРО_ПоказателиСхемМотивации.ОкладТарифНазначения)
		|		ИЛИ	ТипПоказатель3.Показатель = ЗНАЧЕНИЕ(Справочник.ИНАГРО_ПоказателиСхемМотивации.ОкладТарифНазначения)
		|		ИЛИ	ТипПоказатель4.Показатель = ЗНАЧЕНИЕ(Справочник.ИНАГРО_ПоказателиСхемМотивации.ОкладТарифНазначения)
		|		ИЛИ	ТипПоказатель5.Показатель = ЗНАЧЕНИЕ(Справочник.ИНАГРО_ПоказателиСхемМотивации.ОкладТарифНазначения)
		|		ИЛИ	ТипПоказатель6.Показатель = ЗНАЧЕНИЕ(Справочник.ИНАГРО_ПоказателиСхемМотивации.ОкладТарифНазначения)
		|		ИЛИ	СписокНачислений1.ВидРасчета = ЗНАЧЕНИЕ(ПланВидовРасчета.ИНАГРО_Начисления.ДоплатаЗаВечерниеЧасы)
		|		ИЛИ	СписокНачислений1.ВидРасчета = ЗНАЧЕНИЕ(ПланВидовРасчета.ИНАГРО_Начисления.ДоплатаЗаНочныеЧасы))
		|	//-----------------------
		|	// данные об окладе
		|	ЛЕВОЕ СОЕДИНЕНИЕ ВТОкладТариф КАК Оклады2
		|	ПО		СписокНачислений1.Назначение = Оклады2.Назначение
		| 		И  (СписокНачислений1.ДатаНачала <= Оклады2.ДатаОкончания ИЛИ Оклады1.ДатаОкончания ЕСТЬ NULL)
		| 		И  Оклады2.ДатаНачала <= СписокНачислений1.ДатаОкончания
		|	СГРУППИРОВАТЬ ПО 
		|		СписокНачислений1.Сотрудник,
		|		СписокНачислений1.Назначение,
		|		ВЫБОР КОГДА ЕСТЬNULL(Оклады1.ДатаНачала,СписокНачислений1.ДатаНачала) <= СписокНачислений1.ДатаНачала		ТОГДА СписокНачислений1.ДатаНачала	ИНАЧЕ Оклады1.ДатаНачала		КОНЕЦ,
		|		ВЫБОР КОГДА ЕСТЬNULL(Оклады1.ДатаОкончания,СписокНачислений1.ДатаОкончания) < СписокНачислений1.ДатаОкончания	ТОГДА Оклады1.ДатаОкончания	ИНАЧЕ СписокНачислений1.ДатаОкончания	КОНЕЦ,
		|		СписокНачислений1.ВидРасчета,
		|
		|		СписокНачислений1.НомерЗапроса,
		|		СписокНачислений1.ОсновноеНачисление,
		|		СписокНачислений1.ПодразделениеОрганизации,
		|		СписокНачислений1.ГрафикРаботы,
		|		СписокНачислений1.Должность,
		|
		|		СписокНачислений1.ДокументОснование,
		|		СписокНачислений1.Показатель1,
		|		СписокНачислений1.Показатель2,
		|		СписокНачислений1.Показатель3,
		|		СписокНачислений1.Показатель4,
		|		СписокНачислений1.Показатель5,
		|		СписокНачислений1.Показатель6,
		|		СписокНачислений1.ВидУчетаВремениДляСредней
		|";
		Запрос.Текст = ТекстЗапросаВТ;
		Запрос.Выполнить();
		ТекстЗапросаВТВсеНачисления = "ВТВсеНачисления";
		
	Иначе
		
		ТекстЗапросаВТ = "
		|	ВЫБРАТЬ 
		|		СписокНачислений1.Сотрудник			КАК Сотрудник,
		|		СписокНачислений1.Назначение		КАК Назначение,
		|		ВЫБОР КОГДА ЕСТЬNULL(Оклады1.ДатаНачала,СписокНачислений1.ДатаНачала) <= СписокНачислений1.ДатаНачала		ТОГДА СписокНачислений1.ДатаНачала	ИНАЧЕ Оклады1.ДатаНачала		КОНЕЦ			КАК ДатаНачала,
		|		ВЫБОР КОГДА ЕСТЬNULL(Оклады1.ДатаОкончания,СписокНачислений1.ДатаОкончания) < СписокНачислений1.ДатаОкончания	ТОГДА Оклады1.ДатаОкончания	ИНАЧЕ СписокНачислений1.ДатаОкончания	КОНЕЦ	КАК ДатаОкончания,
		|		СписокНачислений1.ВидРасчета		КАК ВидРасчета,
		|
		|		СписокНачислений1.НомерЗапроса,
		|		СписокНачислений1.ОсновноеНачисление,
		|		СписокНачислений1.ПодразделениеОрганизации,
		|		СписокНачислений1.ГрафикРаботы,
		|		СписокНачислений1.Должность,
		|
		|		СписокНачислений1.ДокументОснование,
		|		СписокНачислений1.Показатель1,
		|		СписокНачислений1.Показатель2,
		|		СписокНачислений1.Показатель3,
		|		СписокНачислений1.Показатель4,
		|		СписокНачислений1.Показатель5,
		|		СписокНачислений1.Показатель6,
		|		СписокНачислений1.ВидУчетаВремениДляСредней,
		|		МАКСИМУМ(Оклады2.ДатаНачала) КАК ДатаНачалаОклада
		|ПОМЕСТИТЬ ВТВсеНачисленияБезФильтра	
		|	ИЗ ВТВсеНачисленияБезИзмененияОкладов КАК СписокНачислений1
		|	//-----------------------
		|	// данные о видах показателей
		|	ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.ИНАГРО_Начисления.Показатели КАК ТипПоказатель1
		|	ПО		ТипПоказатель1.Ссылка = СписокНачислений1.ВидРасчета И ТипПоказатель1.НомерСтроки = 1
		|	ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.ИНАГРО_Начисления.Показатели КАК ТипПоказатель2
		|	ПО		ТипПоказатель2.Ссылка = СписокНачислений1.ВидРасчета И ТипПоказатель2.НомерСтроки = 2
		|	ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.ИНАГРО_Начисления.Показатели КАК ТипПоказатель3
		|	ПО		ТипПоказатель3.Ссылка = СписокНачислений1.ВидРасчета И ТипПоказатель3.НомерСтроки = 3
		|	ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.ИНАГРО_Начисления.Показатели КАК ТипПоказатель4
		|	ПО		ТипПоказатель4.Ссылка = СписокНачислений1.ВидРасчета И ТипПоказатель4.НомерСтроки = 4
		|	ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.ИНАГРО_Начисления.Показатели КАК ТипПоказатель5
		|	ПО		ТипПоказатель5.Ссылка = СписокНачислений1.ВидРасчета И ТипПоказатель5.НомерСтроки = 5
		|	ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.ИНАГРО_Начисления.Показатели КАК ТипПоказатель6
		|	ПО		ТипПоказатель6.Ссылка = СписокНачислений1.ВидРасчета И ТипПоказатель6.НомерСтроки = 6
		|	//-----------------------
		|	// данные об окладе
		|	ЛЕВОЕ СОЕДИНЕНИЕ ВТОкладТариф КАК Оклады1
		|	ПО		СписокНачислений1.Назначение = Оклады1.Назначение
		| 		И  (СписокНачислений1.ДатаНачала <= Оклады1.ДатаОкончания ИЛИ Оклады1.ДатаОкончания ЕСТЬ NULL)
		| 		И  Оклады1.ДатаНачала <= СписокНачислений1.ДатаОкончания
		|		И	(ТипПоказатель1.Показатель = ЗНАЧЕНИЕ(Справочник.ИНАГРО_ПоказателиСхемМотивации.ОкладТарифНазначения)
		|		ИЛИ	ТипПоказатель2.Показатель = ЗНАЧЕНИЕ(Справочник.ИНАГРО_ПоказателиСхемМотивации.ОкладТарифНазначения)
		|		ИЛИ	ТипПоказатель3.Показатель = ЗНАЧЕНИЕ(Справочник.ИНАГРО_ПоказателиСхемМотивации.ОкладТарифНазначения)
		|		ИЛИ	ТипПоказатель4.Показатель = ЗНАЧЕНИЕ(Справочник.ИНАГРО_ПоказателиСхемМотивации.ОкладТарифНазначения)
		|		ИЛИ	ТипПоказатель5.Показатель = ЗНАЧЕНИЕ(Справочник.ИНАГРО_ПоказателиСхемМотивации.ОкладТарифНазначения)
		|		ИЛИ	ТипПоказатель6.Показатель = ЗНАЧЕНИЕ(Справочник.ИНАГРО_ПоказателиСхемМотивации.ОкладТарифНазначения)
		|		ИЛИ	СписокНачислений1.ВидРасчета = ЗНАЧЕНИЕ(ПланВидовРасчета.ИНАГРО_Начисления.ДоплатаЗаВечерниеЧасы)
		|		ИЛИ	СписокНачислений1.ВидРасчета = ЗНАЧЕНИЕ(ПланВидовРасчета.ИНАГРО_Начисления.ДоплатаЗаНочныеЧасы))
		|	//-----------------------
		|	// данные об окладе
		|	ЛЕВОЕ СОЕДИНЕНИЕ ВТОкладТариф КАК Оклады2
		|	ПО		СписокНачислений1.Назначение = Оклады2.Назначение
		| 		И  (СписокНачислений1.ДатаНачала <= Оклады2.ДатаОкончания ИЛИ Оклады1.ДатаОкончания ЕСТЬ NULL)
		| 		И  Оклады2.ДатаНачала <= СписокНачислений1.ДатаОкончания
		|	СГРУППИРОВАТЬ ПО 
		|		СписокНачислений1.Сотрудник,
		|		СписокНачислений1.Назначение,
		|		ВЫБОР КОГДА ЕСТЬNULL(Оклады1.ДатаНачала,СписокНачислений1.ДатаНачала) <= СписокНачислений1.ДатаНачала		ТОГДА СписокНачислений1.ДатаНачала	ИНАЧЕ Оклады1.ДатаНачала		КОНЕЦ,
		|		ВЫБОР КОГДА ЕСТЬNULL(Оклады1.ДатаОкончания,СписокНачислений1.ДатаОкончания) < СписокНачислений1.ДатаОкончания	ТОГДА Оклады1.ДатаОкончания	ИНАЧЕ СписокНачислений1.ДатаОкончания	КОНЕЦ,
		|		СписокНачислений1.ВидРасчета,
		|
		|		СписокНачислений1.НомерЗапроса,
		|		СписокНачислений1.ОсновноеНачисление,
		|		СписокНачислений1.ПодразделениеОрганизации,
		|		СписокНачислений1.ГрафикРаботы,
		|		СписокНачислений1.Должность,
		|
		|		СписокНачислений1.ДокументОснование,
		|		СписокНачислений1.Показатель1,
		|		СписокНачислений1.Показатель2,
		|		СписокНачислений1.Показатель3,
		|		СписокНачислений1.Показатель4,
		|		СписокНачислений1.Показатель5,
		|		СписокНачислений1.Показатель6,
		|		СписокНачислений1.ВидУчетаВремениДляСредней
		|";
		Запрос.Текст = ТекстЗапросаВТ;
		Запрос.Выполнить();
		ТекстЗапросаВТВсеНачисления = "ВТВсеНачисления";
		
		Запрос.УстановитьПараметр("НачисленияПредварительногоРасчета",ИНАГРО_ПроведениеРасчетов.ПолучитьСписокНачисленийДляПредварительногоРасчета());
		Запрос.УстановитьПараметр("ДатаПредварительногоРасчета",Дата);
		
		ТекстЗапросаВТ = "
		|	ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|		Начисления.Сотрудник,
		|		Начисления.Назначение,
		|		Начисления.ВидРасчета,
		|		Начисления.ОсновноеНачисление,
		|		Начисления.ДатаНачала,
		|		ВЫБОР КОГДА Начисления.ДатаОкончания <= &ДатаПредварительногоРасчета	ТОГДА Начисления.ДатаОкончания	ИНАЧЕ &ДатаПредварительногоРасчета	КОНЕЦ КАК ДатаОкончания,
		|		Начисления.ПодразделениеОрганизации,

		|		Начисления.ГрафикРаботы,
		|		Начисления.Должность,
		|		Начисления.ДокументОснование,
		|		Начисления.Показатель1,
		|		Начисления.Показатель2,
		|		Начисления.Показатель3,
		|		Начисления.Показатель4,
		|		Начисления.Показатель5,
		|		Начисления.Показатель6,
		|		Начисления.ВидУчетаВремениДляСредней,
		|		Начисления.ДатаНачалаОклада
		|ПОМЕСТИТЬ ВТВсеНачисления	
		|	ИЗ ВТВсеНачисленияБезФильтра КАК Начисления
		|	ГДЕ Начисления.ВидРасчета В (&НачисленияПредварительногоРасчета)
		|     И Начисления.ДатаНачала <= &ДатаПредварительногоРасчета
		|";
		Запрос.Текст = ТекстЗапросаВТ;
		Запрос.Выполнить();
		
		ТекстЗапросаВТВсеНачисления = "ВТВсеНачисления";
		
	КонецЕсли;
	Запрос.Текст = "ВЫБРАТЬ * ИЗ ВТВсеНачисления";
		
	//	ВТЗначенияПоказателей
	Если Истина Тогда 
		//	Описание:
		// 		Все оклады сотрудников
		//		Для п.1.
		ТекстЗапроса = "
		|ВЫБРАТЬ
		|	ЗначенияПоказателей.Сотрудник,
		|	ЗначенияПоказателей.Подразделение,
		|	ЗначенияПоказателей.Показатель,
		|	НАЧАЛОПЕРИОДА(ЗначенияПоказателей.ПериодДействия, МЕСЯЦ) КАК ПериодДействия,
		|	ЗначенияПоказателей.Значение КАК Значение
		|ПОМЕСТИТЬ ВТЗначенияПоказателей
		|ИЗ РегистрСведений.ИНАГРО_ЗначенияПоказателейСхемМотивации КАК ЗначенияПоказателей
		|	
		|	
		|ГДЕ	ЗначенияПоказателей.Организация = &парамОрганизация
		|	И	НАЧАЛОПЕРИОДА(ЗначенияПоказателей.ПериодДействия, МЕСЯЦ) = &парамНачало
		|	И	(ЗначенияПоказателей.Сотрудник = ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка)
		|	ИЛИ	ЗначенияПоказателей.Сотрудник В (ВЫБРАТЬ Назначение ИЗ ВТСписокРаботникиИЗамены КАК Работники))
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Показатель
		|";
		Запрос.Текст = ТекстЗапроса;
		Запрос.Выполнить();
	КонецЕсли;
	Запрос.Текст = "ВЫБРАТЬ * ИЗ ВТЗначенияПоказателей";
	
	//	ВТПоказатели
	Если Истина Тогда 
		//	Описание:
		// 		
		//		
		ТекстЗапроса = "
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СотрудникиПодразделенияВПоказателях.Сотрудник КАК Сотрудник,
		|	СотрудникиПодразделенияВПоказателях.Подразделение КАК Подразделение,
		|	ПоказателиВидовРасчета.Ссылка КАК ВидРасчета,
		|	ПоказателиВидовРасчета.Показатель1.ТипПоказателя КАК ТипПоказателя1,
		|	ПоказателиВидовРасчета.Показатель2.ТипПоказателя КАК ТипПоказателя2,
		|	ПоказателиВидовРасчета.Показатель3.ТипПоказателя КАК ТипПоказателя3,
		|	ПоказателиВидовРасчета.Показатель4.ТипПоказателя КАК ТипПоказателя4,
		|	ПоказателиВидовРасчета.Показатель5.ТипПоказателя КАК ТипПоказателя5,
		|	ПоказателиВидовРасчета.Показатель6.ТипПоказателя КАК ТипПоказателя6,
		|	ПоказателиВидовРасчета.Показатель1.ВозможностьИзменения КАК ВозможностьИзменения1,
		|	ПоказателиВидовРасчета.Показатель2.ВозможностьИзменения КАК ВозможностьИзменения2,
		|	ПоказателиВидовРасчета.Показатель3.ВозможностьИзменения КАК ВозможностьИзменения3,
		|	ПоказателиВидовРасчета.Показатель4.ВозможностьИзменения КАК ВозможностьИзменения4,
		|	ПоказателиВидовРасчета.Показатель5.ВозможностьИзменения КАК ВозможностьИзменения5,
		|	ПоказателиВидовРасчета.Показатель6.ВозможностьИзменения КАК ВозможностьИзменения6,
		|	ЗначенияПоказателей1.Значение КАК Показатель1,
		|	ЗначенияПоказателей2.Значение КАК Показатель2,
		|	ЗначенияПоказателей3.Значение КАК Показатель3,
		|	ЗначенияПоказателей4.Значение КАК Показатель4,
		|	ЗначенияПоказателей5.Значение КАК Показатель5,
		|	ЗначенияПоказателей6.Значение КАК Показатель6
		|ПОМЕСТИТЬ ВТПоказатели
		|ИЗ (ВЫБРАТЬ РАЗЛИЧНЫЕ Подразделение, Сотрудник ИЗ ВТЗначенияПоказателей КАК ЗначенияПоказателей) КАК СотрудникиПодразделенияВПоказателях
		|
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	(ВЫБРАТЬ
		|		Показатели.Ссылка КАК Ссылка,
		|		Показатели1.Показатель КАК Показатель1,
		|		Показатели2.Показатель КАК Показатель2,
		|		Показатели3.Показатель КАК Показатель3,
		|		Показатели4.Показатель КАК Показатель4,
		|		Показатели5.Показатель КАК Показатель5,
		|		Показатели6.Показатель КАК Показатель6
		|	ИЗ ПланВидовРасчета.ИНАГРО_Начисления.Показатели КАК Показатели
		|	
		|	ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.ИНАГРО_Начисления.Показатели КАК Показатели1
		|	ПО Показатели.Ссылка = Показатели1.Ссылка И Показатели1.НомерСтроки = 1
		|	ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.ИНАГРО_Начисления.Показатели КАК Показатели2
		|	ПО Показатели.Ссылка = Показатели2.Ссылка И Показатели2.НомерСтроки = 2
		|	ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.ИНАГРО_Начисления.Показатели КАК Показатели3
		|	ПО Показатели.Ссылка = Показатели3.Ссылка И Показатели3.НомерСтроки = 3
		|	ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.ИНАГРО_Начисления.Показатели КАК Показатели4
		|	ПО Показатели.Ссылка = Показатели4.Ссылка И Показатели4.НомерСтроки = 4
		|	ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.ИНАГРО_Начисления.Показатели КАК Показатели5
		|	ПО Показатели.Ссылка = Показатели5.Ссылка И Показатели5.НомерСтроки = 5
		|	ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.ИНАГРО_Начисления.Показатели КАК Показатели6
		|	ПО Показатели.Ссылка = Показатели6.Ссылка И Показатели6.НомерСтроки = 6
		|	
		|) КАК ПоказателиВидовРасчета
		|ПО ИСТИНА
		|	
		|	
		|ЛЕВОЕ СОЕДИНЕНИЕ ВТЗначенияПоказателей КАК ЗначенияПоказателей1
		|ПО 	ПоказателиВидовРасчета.Показатель1 = ЗначенияПоказателей1.Показатель
		|	И	СотрудникиПодразделенияВПоказателях.Сотрудник = ЗначенияПоказателей1.Сотрудник
		|	И	СотрудникиПодразделенияВПоказателях.Подразделение = ЗначенияПоказателей1.Подразделение
		|ЛЕВОЕ СОЕДИНЕНИЕ ВТЗначенияПоказателей КАК ЗначенияПоказателей2
		|ПО		ПоказателиВидовРасчета.Показатель2 = ЗначенияПоказателей2.Показатель
		|	И	СотрудникиПодразделенияВПоказателях.Сотрудник = ЗначенияПоказателей2.Сотрудник
		|	И	СотрудникиПодразделенияВПоказателях.Подразделение = ЗначенияПоказателей2.Подразделение
		|ЛЕВОЕ СОЕДИНЕНИЕ ВТЗначенияПоказателей КАК ЗначенияПоказателей3
		|ПО		ПоказателиВидовРасчета.Показатель3 = ЗначенияПоказателей3.Показатель
		|	И	СотрудникиПодразделенияВПоказателях.Сотрудник = ЗначенияПоказателей3.Сотрудник
		|	И	СотрудникиПодразделенияВПоказателях.Подразделение = ЗначенияПоказателей3.Подразделение
		|ЛЕВОЕ СОЕДИНЕНИЕ ВТЗначенияПоказателей КАК ЗначенияПоказателей4
		|ПО		ПоказателиВидовРасчета.Показатель4 = ЗначенияПоказателей4.Показатель
		|	И	СотрудникиПодразделенияВПоказателях.Сотрудник = ЗначенияПоказателей4.Сотрудник
		|	И	СотрудникиПодразделенияВПоказателях.Подразделение = ЗначенияПоказателей4.Подразделение
		|ЛЕВОЕ СОЕДИНЕНИЕ ВТЗначенияПоказателей КАК ЗначенияПоказателей5
		|ПО		ПоказателиВидовРасчета.Показатель5 = ЗначенияПоказателей5.Показатель
		|	И	СотрудникиПодразделенияВПоказателях.Сотрудник = ЗначенияПоказателей5.Сотрудник
		|	И	СотрудникиПодразделенияВПоказателях.Подразделение = ЗначенияПоказателей5.Подразделение
		|ЛЕВОЕ СОЕДИНЕНИЕ ВТЗначенияПоказателей КАК ЗначенияПоказателей6
		|ПО		ПоказателиВидовРасчета.Показатель6 = ЗначенияПоказателей6.Показатель
		|	И	СотрудникиПодразделенияВПоказателях.Сотрудник = ЗначенияПоказателей6.Сотрудник
		|	И	СотрудникиПодразделенияВПоказателях.Подразделение = ЗначенияПоказателей6.Подразделение
		|
		|ГДЕ	ЗначенияПоказателей1.Значение ЕСТЬ НЕ NULL
		|	ИЛИ	ЗначенияПоказателей2.Значение ЕСТЬ НЕ NULL
		|	ИЛИ	ЗначенияПоказателей3.Значение ЕСТЬ НЕ NULL
		|	ИЛИ	ЗначенияПоказателей4.Значение ЕСТЬ НЕ NULL
		|	ИЛИ	ЗначенияПоказателей5.Значение ЕСТЬ НЕ NULL
		|	ИЛИ	ЗначенияПоказателей6.Значение ЕСТЬ НЕ NULL
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ВидРасчета
		|";
		Запрос.Текст = ТекстЗапроса;
		Запрос.Выполнить();
	КонецЕсли;
	Запрос.Текст = "ВЫБРАТЬ * ИЗ ВТПоказатели";

	// Основной текст запроса
	ОсновнойТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СписокНачислений.Сотрудник		КАК Сотрудник,
	|	СписокНачислений.Назначение		КАК Назначение,
	|	СписокНачислений.Назначение.ИНАГРО_ВидЗанятости	КАК ВидЗанятости,
	|	СписокНачислений.ДатаНачала			КАК ДатаНачала,
	|	СписокНачислений.ДатаОкончания		КАК ДатаОкончания,
	|	СписокНачислений.ДатаНачала			КАК БазовыйПериодНачало,
	|	СписокНачислений.ДатаОкончания		КАК БазовыйПериодКонец,
	|	СписокНачислений.ОсновноеНачисление КАК ОсновноеНачисление,
	|	СписокНачислений.ВидРасчета КАК ВидРасчета,
	|	СписокНачислений.ВидРасчета.Наименование КАК ВидРасчетаНаименование,
	|	СписокНачислений.ДокументОснование	КАК ДокументОснование,
	|
	|	1 КАК КурсВалюты,		
	|	";
	ТекстПоказатель1 = "
	|			ВЫБОР
	|				КОГДА ПоказателиСхемМотивацийПоСотруднику.Показатель1 ЕСТЬ НЕ NULL 
	|					ТОГДА ПоказателиСхемМотивацийПоСотруднику.Показатель1
	|				КОГДА ПоказателиСхемМотивацийПоПодразделению.Показатель1 ЕСТЬ НЕ NULL 
	|					ТОГДА ПоказателиСхемМотивацийПоПодразделению.Показатель1
	|				КОГДА ПоказателиСхемМотивацийПоОрганизации.Показатель1 ЕСТЬ НЕ NULL 
	|					ТОГДА ПоказателиСхемМотивацийПоОрганизации.Показатель1
	|				КОГДА ТипПоказатель1.Показатель = ЗНАЧЕНИЕ(Справочник.ИНАГРО_ПоказателиСхемМотивации.ОкладТарифНазначения)
	|					// СПЕЦИАЛЬНЫЕ
	|                   // для оклада валюта учтена при его получении
	|					ТОГДА	ВЫБОР	КОГДА Оклады.СпособУчетаВремени = ""ЗА МЕСЯЦ"" И ДанныеКалендаря.НормаЧасовЗаМесяц > 0
	|										ТОГДА Оклады.ОкладТариф/ДанныеКалендаря.НормаЧасовЗаМесяц
	|									КОГДА Оклады.СпособУчетаВремени = ""ЗА ДЕНЬ""
	|										ТОГДА Оклады.ОкладТариф/8
	|									ИНАЧЕ Оклады.ОкладТариф
	|							КОНЕЦ
	|				КОГДА ТипПоказатель1.Показатель = ЗНАЧЕНИЕ(Справочник.ИНАГРО_ПоказателиСхемМотивации.ОкладТариф)   
	|                   // для оклада валюта учтена при его получении
	|					ТОГДА	Оклады.ОкладТариф                                                               
	|				ИНАЧЕ ЕСТЬNULL(СписокНачислений.Показатель1, 0)
	|			КОНЕЦ
	|	";
	ТекстПоказатель2 = СтрЗаменить(ТекстПоказатель1, "1", "2");
	ТекстПоказатель3 = СтрЗаменить(ТекстПоказатель1, "1", "3");
	ТекстПоказатель4 = СтрЗаменить(ТекстПоказатель1, "1", "4");
	ТекстПоказатель5 = СтрЗаменить(ТекстПоказатель1, "1", "5");
	ТекстПоказатель6 = СтрЗаменить(ТекстПоказатель1, "1", "6");
	
	// Некоторые способы расчета имеют "виртуальный" показатель 1 "часовой тариф"
	ТекстПоказатель1 = СтрЗаменить(ТекстПоказатель1, "// СПЕЦИАЛЬНЫЕ", 
	"ИЛИ СписокНачислений.ВидРасчета.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаНачислений.ДоплатаЗаНочныеЧасы) 
	|ИЛИ СписокНачислений.ВидРасчета.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаНачислений.ДоплатаЗаВечерниеЧасы)");

	
	ОсновнойТекстЗапроса =  ОсновнойТекстЗапроса + "
	|	" + ТекстПоказатель1 + " КАК Показатель1,
	|	" + ТекстПоказатель2 + " КАК Показатель2,
	|	" + ТекстПоказатель3 + " КАК Показатель3,
	|	" + ТекстПоказатель4 + " КАК Показатель4,
	|	" + ТекстПоказатель5 + " КАК Показатель5,
	|	" + ТекстПоказатель6 + " КАК Показатель6,
	|	СписокНачислений.ВидУчетаВремениДляСредней,
	|	СписокНачислений.ГрафикРаботы		КАК ГрафикРаботы,
	|	ДанныеКалендаря.НормаДнейЗаМесяц	КАК НормаДнейЗаМесяц,
	|	ДанныеКалендаря.НормаЧасовЗаМесяц	КАК НормаЧасовЗаМесяц,
	|	ЕСТЬNULL(СписокНачислений.ГрафикРаботы.СуммированныйУчетРабочегоВремени, ЛОЖЬ) КАК СуммированныйУчетРабочегоВремени,
	|	СписокНачислений.ПодразделениеОрганизации,
	|	СписокНачислений.Должность КАК Должность,
	|	ВЫБОР
	|		КОГДА ОсновныеНачисления.Сотрудник ЕСТЬ NULL 
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК УжеПроведен,
	|	СписокНачислений.Сотрудник.Наименование КАК СотрудникНаименование
	|ИЗ " + ТекстЗапросаВТВсеНачисления + " КАК СписокНачислений
	|
	|//-----------------------
	|// Выборка сведений о уже выполненных начислениях за отработанное время 
	|ЛЕВОЕ СОЕДИНЕНИЕ (
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		ОсновныеНачисления.Сотрудник				КАК Сотрудник,
	|		ОсновныеНачисления.Назначение				КАК Назначение,
	|		ОсновныеНачисления.ПодразделениеОрганизации	КАК ПодразделениеОрганизации
	|	ИЗ РегистрРасчета.ИНАГРО_Начисления КАК ОсновныеНачисления
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ " + ТекстЗапросаВТСписокРаботникиИЗамены + " КАК ТаблицаДвиженийРаботников
	|	ПО ОсновныеНачисления.Назначение = ТаблицаДвиженийРаботников.Назначение
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|	Документ.ИНАГРО_Сторнирование КАК Сторнирование
	|	ПО Сторнирование.СторнируемыйДокумент = ОсновныеНачисления.Регистратор
	|	ГДЕ		ОсновныеНачисления.ПериодРегистрации = &парамПериодРегистрации
	|		И	ОсновныеНачисления.ПериодДействияКонец <= &парамКонец
	|		И	ОсновныеНачисления.ПериодДействияНачало >= &парамНачало
	|		И	ОсновныеНачисления.Организация = &парамОрганизация
	|		И	ОсновныеНачисления.ВидРасчета.ЗачетОтработанногоВремени
	|		И	ОсновныеНачисления.ВидРасчета.ЗачетНормыВремени
	|		И	НЕ ОсновныеНачисления.Сторно
	|		И	ОсновныеНачисления.Регистратор <> &парамРегистратор
	|		И	ОсновныеНачисления.Регистратор ССЫЛКА Документ.ИНАГРО_НачислениеЗарплатыРаботникамОрганизаций		
	|		И	ОсновныеНачисления.Организация = &парамОрганизация
	| 		"+?(ЕстьПерерассчитываемыйДокумент,"И ЛОЖЬ","")+"
 	|		И	Сторнирование.Ссылка ЕСТЬ NULL
	|) КАК ОсновныеНачисления
	|ПО		ОсновныеНачисления.Сотрудник = СписокНачислений.Сотрудник
	|	И	ОсновныеНачисления.ПодразделениеОрганизации = СписокНачислений.ПодразделениеОрганизации		
	|       
	|
	|//-----------------------
	|// данные нормы календаря
	|ЛЕВОЕ СОЕДИНЕНИЕ (
	|	ВЫБРАТЬ
	|		ГрафикиРаботы.ГрафикРаботы                 КАК ГрафикРаботы,
	|		СУММА( ГрафикиРаботы.ОсновноеЗначение  )      КАК НормаДнейЗаМесяц,
	|		СУММА( ГрафикиРаботы.ДополнительноеЗначение ) КАК НормаЧасовЗаМесяц
	|	ИЗ	РегистрСведений.ИНАГРО_ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботы
	|	ГДЕ		НАЧАЛОПЕРИОДА( ГрафикиРаботы.Дата, МЕСЯЦ ) = &парамНачало 
	|		И	ГрафикиРаботы.ВидУчетаВремени = &парамПоДням 
	|	СГРУППИРОВАТЬ ПО
	|			ГрафикиРаботы.ГрафикРаботы
	|) КАК ДанныеКалендаря
	|ПО		ВЫБОР	КОГДА СписокНачислений.ГрафикРаботы.УчетНормыВремениПоОтдельномуГрафику	
	|		     			ТОГДА ДанныеКалендаря.ГрафикРаботы = СписокНачислений.ГрафикРаботы.ГрафикРаботыНормыВремени
	|					ИНАЧЕ ДанныеКалендаря.ГрафикРаботы = СписокНачислений.ГрафикРаботы
	|		КОНЕЦ 
	|	//И	СписокНачислений.ОсновноеНачисление
	|
	|//-----------------------
	|// данные о видах показателей
	|ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.ИНАГРО_Начисления.Показатели КАК ТипПоказатель1
	|ПО		ТипПоказатель1.Ссылка = СписокНачислений.ВидРасчета И ТипПоказатель1.НомерСтроки = 1
	|ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.ИНАГРО_Начисления.Показатели КАК ТипПоказатель2
	|ПО		ТипПоказатель2.Ссылка = СписокНачислений.ВидРасчета И ТипПоказатель2.НомерСтроки = 2
	|ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.ИНАГРО_Начисления.Показатели КАК ТипПоказатель3
	|ПО		ТипПоказатель3.Ссылка = СписокНачислений.ВидРасчета И ТипПоказатель3.НомерСтроки = 3
	|ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.ИНАГРО_Начисления.Показатели КАК ТипПоказатель4
	|ПО		ТипПоказатель4.Ссылка = СписокНачислений.ВидРасчета И ТипПоказатель4.НомерСтроки = 4
	|ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.ИНАГРО_Начисления.Показатели КАК ТипПоказатель5
	|ПО		ТипПоказатель5.Ссылка = СписокНачислений.ВидРасчета И ТипПоказатель5.НомерСтроки = 5
	|ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.ИНАГРО_Начисления.Показатели КАК ТипПоказатель6
	|ПО		ТипПоказатель6.Ссылка = СписокНачислений.ВидРасчета И ТипПоказатель6.НомерСтроки = 6
	|
	|//-----------------------
	|// данные об окладах
	|ЛЕВОЕ СОЕДИНЕНИЕ ВТОкладТариф КАК Оклады
	|ПО		СписокНачислений.Назначение = Оклады.Назначение
	| 	И  Оклады.ДатаНачала = СписокНачислений.ДатаНачалаОклада
	|
	|//-----------------------
	|// данные показателей Схем Мотиваций
	|// по конкретным сотрудникам
	|ЛЕВОЕ СОЕДИНЕНИЕ ВТПоказатели КАК ПоказателиСхемМотивацийПоСотруднику
	|ПО		СписокНачислений.ВидРасчета = ПоказателиСхемМотивацийПоСотруднику.ВидРасчета
	|	И	СписокНачислений.Назначение = ПоказателиСхемМотивацийПоСотруднику.Сотрудник
	|
	|// по подразделению
	|ЛЕВОЕ СОЕДИНЕНИЕ ВТПоказатели КАК ПоказателиСхемМотивацийПоПодразделению
	|ПО		СписокНачислений.ВидРасчета = ПоказателиСхемМотивацийПоПодразделению.ВидРасчета
	|	И	СписокНачислений.ПодразделениеОрганизации = ПоказателиСхемМотивацийПоПодразделению.Подразделение
	|
	|
	|// организации
	|ЛЕВОЕ СОЕДИНЕНИЕ ВТПоказатели КАК ПоказателиСхемМотивацийПоОрганизации
	|ПО		СписокНачислений.ВидРасчета = ПоказателиСхемМотивацийПоОрганизации.ВидРасчета
	|	И	ПоказателиСхемМотивацийПоОрганизации.Сотрудник = ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка)
	|	И	ПоказателиСхемМотивацийПоОрганизации.Подразделение = ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка) 
	|
	|УПОРЯДОЧИТЬ ПО
	|	СотрудникНаименование,
	|	СписокНачислений.Сотрудник,
	|	// основные начисления должны быть вверху, а внутреннее совместительство и замены внизу
	|	ВЫБОР КОГДА СписокНачислений.Сотрудник = СписокНачислений.Назначение ТОГДА ЛОЖЬ ИНАЧЕ ИСТИНА КОНЕЦ, 
	|	СписокНачислений.Назначение,
	|	СписокНачислений.ОсновноеНачисление Убыв, // основное начисление должно встретиться в выборке первым
	|	СписокНачислений.ДатаНачала,
	|	СписокНачислений.ВидРасчета
	|";
	
	Запрос.Текст = ОсновнойТекстЗапроса;
	
	ВыборкаНачисления = Запрос.Выполнить().Выбрать();
	Пока ВыборкаНачисления.Следующий() Цикл
		
		Если  ВыборкаНачисления.УжеПроведен Тогда
			
			// Пропускаем такие записи: они уже введены другими документами или соответствуют окончанию назначения работника
			// необходимо сообщить пользователю что работник уже посчитан. 
			Продолжить;
			
		КонецЕсли;
		
		Если ТипЗнч(ВыборкаНачисления.ДокументОснование) = Тип("ДокументСсылка.ИНАГРО_ДоговорНаВыполнениеРаботСФизЛицом") Тогда
			Если ВыборкаНачисления.ДокументОснование.ХарактерОплаты = Перечисления.ИНАГРО_ХарактерВыплатыПоДоговору.ОднократноВКонцеСрока Тогда
				// Работа по договору ГПХ с однократной выплатой должна быть распределена по месяцам.
				РаспределитьОплатуГПХПоПериодам(ВыборкаНачисления);
			Иначе
				НоваяСтрока	= Начисления.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаНачисления);
				Если НЕ ЗначениеЗаполнено(НоваяСтрока.ПодразделениеОрганизации) Тогда
					НоваяСтрока.ПодразделениеОрганизации = ВыборкаНачисления.ДокументОснование.ПодразделениеОрганизации;
				КонецЕсли;	
				
				Если НоваяСтрока.ВидРасчета.ВидПремии = Перечисления.ИНАГРО_ВидыПремии.ГодоваяПремия
				ИЛИ НоваяСтрока.ВидРасчета.ВидПремии = Перечисления.ИНАГРО_ВидыПремии.Премия
				ИЛИ НоваяСтрока.ВидРасчета.ВидПремии = Перечисления.ИНАГРО_ВидыПремии.ПремияПропорционально Тогда
				
					НоваяСтрока.БазовыйПериодКонец = КонецМесяца(ДобавитьМесяц(НачалоМесяца(НоваяСтрока.БазовыйПериодНачало),-Мин(НоваяСтрока.ВидРасчета.ЧислоМесяцев, 1)));
					//НоваяСтрока.БазовыйПериодНачало = ДобавитьМесяц(НачалоМесяца(НоваяСтрока.БазовыйПериодНачало),-НоваяСтрока.ВидРасчета.ЧислоМесяцев);
				    НоваяСтрока.БазовыйПериодНачало = ДобавитьМесяц(?(НоваяСтрока.ВидРасчета.ЧислоМесяцев = 0, НоваяСтрока.БазовыйПериодНачало, НачалоМесяца(НоваяСтрока.БазовыйПериодНачало)),-НоваяСтрока.ВидРасчета.ЧислоМесяцев);
				КонецЕсли;
		
				НоваяСтрока.Авторасчет	= Истина;

			КонецЕсли;	
		Иначе	
			НоваяСтрока	= Начисления.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаНачисления);
			Если НоваяСтрока.ВидРасчета.ВидПремии = Перечисления.ИНАГРО_ВидыПремии.ГодоваяПремия
			ИЛИ НоваяСтрока.ВидРасчета.ВидПремии = Перечисления.ИНАГРО_ВидыПремии.Премия
			ИЛИ НоваяСтрока.ВидРасчета.ВидПремии = Перечисления.ИНАГРО_ВидыПремии.ПремияПропорционально Тогда
			    НоваяСтрока.БазовыйПериодКонец = КонецМесяца(ДобавитьМесяц(НачалоМесяца(НоваяСтрока.БазовыйПериодНачало),-Мин(НоваяСтрока.ВидРасчета.ЧислоМесяцев, 1)));
				НоваяСтрока.БазовыйПериодНачало = ДобавитьМесяц(?(НоваяСтрока.ВидРасчета.ЧислоМесяцев = 0, НоваяСтрока.БазовыйПериодНачало, НачалоМесяца(НоваяСтрока.БазовыйПериодНачало)),-НоваяСтрока.ВидРасчета.ЧислоМесяцев);
	        КонецЕсли;
			
			НоваяСтрока.Авторасчет	= Истина;

		КонецЕсли;
		
	КонецЦикла;
	
	НачисленияИБазовыеПериодыИндексации();
	
	Записать();

КонецПроцедуры

// Заполняет табличную часть 
//
Функция АвтозаполнениеВзносы(Сотрудники = Неопределено, ИмяТЧ = "Взносы") Экспорт
	Отказ = Ложь;
	
	// Перечитаем объект и соберем данные для заполнения наборов записей регистров
	НачатьТранзакцию();
	ВыборкаПоШапкеДокумента = СформироватьЗапросПоШапке().Выбрать();
	
	// позиционируем выборку
	ВыборкаПоШапкеДокумента.Следующий();
	ВыборкаПоНачислениям = СформироватьЗапросПоНачислениям(Сотрудники).Выбрать();
	ЗафиксироватьТранзакцию();
	
	// Создадим рабочие наборы записей
	НаборОсновныеНачисления = РегистрыРасчета.ИНАГРО_Начисления.СоздатьНаборЗаписей();
	НаборОсновныеНачисления.Отбор.Регистратор.Значение = Ссылка;
	
	Пока ВыборкаПоНачислениям.Следующий() Цикл
		
		ПроверитьЗаполнениеСтрокиНачисления(ВыборкаПоНачислениям, Отказ);
		Если НЕ Отказ Тогда
			// Заполним записи в наборах записей регистров
			ДобавитьСтрокуНачислений(ВыборкаПоНачислениям, НаборОсновныеНачисления);
		КонецЕсли;
		
	КонецЦикла;
	НаборОсновныеНачисления.Записать();
	
	// Если есть какие-то проблемы - удаляем движения (тут нет транзакции) 
	Если Отказ Тогда
		НаборОсновныеНачисления.Очистить();
		НаборОсновныеНачисления.Записать();
		Возврат Не Отказ;
	КонецЕсли;
	ЭтоВзносы = ?(ИмяТЧ = "Взносы", Истина, Ложь);
	
	ИНАГРО_ПроведениеРасчетов.АвтозаполнениеВзносы(Ссылка, ЭтотОбъект[ИмяТЧ], ЭтоВзносы, Сотрудники);
	
	// Все закончено - удаляем движения
	НаборОсновныеНачисления.Очистить();
	НаборОсновныеНачисления.Записать();
	Записать();
	
КонецФункции  // ЗаполнитьВзносы()

// Заполняет табличную часть 
//
Функция АвтозаполнениеНДФЛ(Сотрудники = Неопределено, СНачалаГода = Ложь, ГодЗаполнения = 0) Экспорт

	Отказ = Ложь;
	
	// Перечитаем объект и соберем данные для заполнения наборов записей регистров
	НачатьТранзакцию();
	ВыборкаПоШапкеДокумента = СформироватьЗапросПоШапке().Выбрать();
	
	// позиционируем выборку
	ВыборкаПоШапкеДокумента.Следующий();
	ВыборкаПоНачислениям = СформироватьЗапросПоНачислениям( Сотрудники).Выбрать();
	ЗафиксироватьТранзакцию();
	
	// Создадим рабочие наборы записей
	НаборОсновныеНачисления = РегистрыРасчета.ИНАГРО_Начисления.СоздатьНаборЗаписей();
	НаборОсновныеНачисления.Отбор.Регистратор.Значение = Ссылка;

	Пока ВыборкаПоНачислениям.Следующий() Цикл
		
		ПроверитьЗаполнениеСтрокиНачисления(ВыборкаПоНачислениям, Отказ);
		Если НЕ Отказ Тогда
			// Заполним записи в наборах записей регистров
			ДобавитьСтрокуНачислений(ВыборкаПоНачислениям, НаборОсновныеНачисления);
		КонецЕсли;
		
	КонецЦикла;
	НаборОсновныеНачисления.Записать();
	
	// Если есть какие-то проблемы - удаляем движения (тут нет транзакции) 
	Если Отказ Тогда
		НаборОсновныеНачисления.Очистить();
		НаборОсновныеНачисления.Записать();
		Возврат Не Отказ;
	КонецЕсли;
	
	ИНАГРО_ПроведениеРасчетов.АвтозаполнениеНДФЛ(Ссылка, НДФЛ, Сотрудники,,СНачалаГода, ГодЗаполнения );
	
	// Все закончено - удаляем движения
	НаборОсновныеНачисления.Очистить();
	НаборОсновныеНачисления.Записать();

	Записать();
	
КонецФункции  // ЗаполнитьНДФЛ()

// автозаполнение Удержания
//
Процедура АвтозаполнениеУдержания(Сотрудники) Экспорт
	
	// АВТОЗАПОЛНЕНИЕ ТЧ "Удержания"
	мПериодРегистрации	= ?(ЗначениеЗаполнено(ПерерассчитываемыйДокумент), ПерерассчитываемыйДокумент.ПериодРегистрации, ПериодРегистрации);
	
	// Создадим запрос и установим его параметры
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("парамСотрудники"		, Сотрудники );
	Запрос.УстановитьПараметр("парамНачало"			, мПериодРегистрации);
	Запрос.УстановитьПараметр("парамКонец"			, КонецМесяца(мПериодРегистрации));
	Запрос.УстановитьПараметр("парамРегистратор"	, Ссылка);
	
	НаименованиеДокумента = Ссылка.Метаданные().Имя + ?(Ссылка.Метаданные().ТабличныеЧасти.Найти("РаботникиОрганизации")= Неопределено, "", ".РаботникиОрганизации" );
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ИСТИНА							КАК Авторасчет,		
	|	ТабРаботники.Сотрудник			КАК Сотрудник,		
	|	ПлановыеУдержания.ДатаНачала	КАК ДатаНачала,
	|	МИНИМУМ (
	|   	ВЫБОР	КОГДА  Окончания.Период ЕСТЬ NULL									// работник никуда не перемещался по регистру
	|         					ТОГДА КОНЕЦПЕРИОДА(&парамНачало, МЕСЯЦ)
	|         				КОГДА НАЧАЛОПЕРИОДА(Окончания.Период, ДЕНЬ) = Окончания.Период	// начало дня это кадровое перемещение, значит надо закрыть предыдущим днем
	|                           ТОГДА  ДОБАВИТЬКДАТЕ(Окончания.Период, СЕКУНДА, -1)
	|         				КОГДА КОНЕЦПЕРИОДА(Окончания.Период, ДЕНЬ) = Окончания.Период		// это увольнение, значит надо закрыть предыдущим днем
	|                           ТОГДА  Окончания.Период
	|                       ИНАЧЕ  КОНЕЦПЕРИОДА(&парамНачало, МЕСЯЦ)							// непонятная ситуация, но поставим конец месяца
	|		КОНЕЦ
	|						)			КАК ДатаОкончания,
	|	ПлановыеУдержания.ВидРасчета			КАК ВидРасчета,
	|	ПлановыеУдержания.ДокументОснование		КАК ДокументОснование,
	|";
	ТекстПоказатель1 = "ПлановыеУдержания.Показатель1 
	|";
	ТекстЗапроса = ТекстЗапроса + "
	|	"+ТекстПоказатель1+" КАК Показатель1,
	|	"+СтрЗаменить(ТекстПоказатель1,"1","2")+" КАК Показатель2,
	|	"+СтрЗаменить(ТекстПоказатель1,"1","3")+" КАК Показатель3,
	|	ПлановыеУдержания.СпособОтраженияВБухучете КАК СпособОтраженияВБухучете
	|
	|	ИЗ	Документ." + НаименованиеДокумента + " КАК ТабРаботники
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ( 
	|		ВЫБРАТЬ
	|			&парамНачало КАК ДатаНачала,
	|			УдержанияРаботниковОрганизаций.ВидРасчета			КАК ВидРасчета,
	|			УдержанияРаботниковОрганизаций.ДокументОснование	КАК ДокументОснование,
	|			УдержанияРаботниковОрганизаций.Показатель1,
	|			УдержанияРаботниковОрганизаций.Показатель2,
	|			УдержанияРаботниковОрганизаций.Показатель3,
	|			УдержанияРаботниковОрганизаций.СпособОтраженияВБухучете,
	|			УдержанияРаботниковОрганизаций.Сотрудник КАК Сотрудник
	|		ИЗ	РегистрСведений.ИНАГРО_ПлановыеУдержанияРаботниковОрганизаций.СрезПоследних( &парамНачало, Сотрудник В (&парамСотрудники)) КАК УдержанияРаботниковОрганизаций
	|		ГДЕ УдержанияРаботниковОрганизаций.Сотрудник В (&парамСотрудники)
	|		И УдержанияРаботниковОрганизаций.Действует
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			УдержанияРаботниковОрганизаций.Период				КАК ДатаНачала,
	|			УдержанияРаботниковОрганизаций.ВидРасчета			КАК ВидРасчета,
	|			УдержанияРаботниковОрганизаций.ДокументОснование	КАК ДокументОснование,
	|			УдержанияРаботниковОрганизаций.Показатель1,
	|			УдержанияРаботниковОрганизаций.Показатель2,
	|			УдержанияРаботниковОрганизаций.Показатель3,
	|			УдержанияРаботниковОрганизаций.СпособОтраженияВБухучете,
	|			УдержанияРаботниковОрганизаций.Сотрудник
	|		ИЗ	РегистрСведений.ИНАГРО_ПлановыеУдержанияРаботниковОрганизаций КАК УдержанияРаботниковОрганизаций
	|		ГДЕ		УдержанияРаботниковОрганизаций.Сотрудник В (&парамСотрудники)
	|			И	УдержанияРаботниковОрганизаций.Период     >  &парамНачало
	|			И	УдержанияРаботниковОрганизаций.Период     <= &парамКонец
	|			И	УдержанияРаботниковОрганизаций.Период <> КОНЕЦПЕРИОДА(УдержанияРаботниковОрганизаций.Период, ДЕНЬ)       
	|
	|) КАК ПлановыеУдержания
	|ПО ПлановыеУдержания.Сотрудник = ТабРаботники.Сотрудник
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИНАГРО_ПлановыеУдержанияРаботниковОрганизаций КАК Окончания
	|ПО  НАЧАЛОПЕРИОДА(Окончания.Период, МЕСЯЦ) = &парамНачало // все движения за месяц
	|	И	Окончания.Сотрудник = ПлановыеУдержания.Сотрудник
	|	И	Окончания.ДокументОснование = ПлановыеУдержания.ДокументОснование
	|	И	Окончания.ВидРасчета = ПлановыеУдержания.ВидРасчета
	|	И	ПлановыеУдержания.ДатаНачала < Окончания.Период 
	|
	|//-----------------------
	|// курсы валюты 
	|
	|ГДЕ  ТабРаботники.Ссылка = &парамРегистратор   
	|	И ТабРаботники.Сотрудник В ( &парамСотрудники ) 
	|
	|СГРУППИРОВАТЬ ПО
	|	ТабРаботники.Сотрудник,		
	|	ПлановыеУдержания.ДатаНачала,
	|	ПлановыеУдержания.ВидРасчета,
	|	ПлановыеУдержания.ДокументОснование,
	|	"+ТекстПоказатель1+",
	|	"+СтрЗаменить(ТекстПоказатель1,"1","2")+",
	|	"+СтрЗаменить(ТекстПоказатель1,"1","3")+",
	|	ПлановыеУдержания.СпособОтраженияВБухучете
	|
	|УПОРЯДОЧИТЬ ПО
	|	Сотрудник,
	|	ДокументОснование,
	|	ВидРасчета,
	|	ДатаНачала
	|";	
	Запрос.Текст = ТекстЗапроса;
	УдержанияВыборка = Запрос.Выполнить().Выбрать();
	
	Пока УдержанияВыборка.Следующий() Цикл
		НоваяСтрока = Удержания.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, УдержанияВыборка);
	КонецЦикла;
	
	Записать();

КонецПроцедуры // АвтозаполнениеУдержания()

// автозаполнение субконто по данным строки 
//
Процедура АвтозаполнениеСубконто(ДанныеУчета, СтрокаДанных, тДтКт, тВидСубконто, тРеквизит = "")
Перем мПустойСчет;

    Если тРеквизит = "" Тогда
		Если тВидСубконто = "Сотрудники" Тогда
		    тРеквизит = "Сотрудник";
		ИначеЕсли тВидСубконто = "Подразделения" Тогда
			тРеквизит = "ПодразделениеОрганизации";
		ИначеЕсли тВидСубконто = "Контрагенты" Тогда
			тРеквизит = "Контрагент";
		ИначеЕсли тВидСубконто = "Договоры" Тогда
			тРеквизит = "Договоры";
		ИначеЕсли тВидСубконто = "Налоги" Тогда
			тРеквизит = "Налог";
		ИначеЕсли тВидСубконто = "СтатьиНалоговыхДеклараций" Тогда
			тРеквизит = "СтатьяНалоговойДекларации";
		ИначеЕсли тВидСубконто = "ИсполнительныеДокументы" Тогда
			тРеквизит = "ИсполнительныеДокументы";
		ИначеЕсли тВидСубконто = "СтатьяЗатрат" Тогда
			тРеквизит = "СтатьяЗатрат";
		КонецЕсли;
	КонецЕсли;
	
	Если ДанныеУчета[ "Счет" + тДтКт ] <> мПустойСчет Тогда
		// если не пустой счет - заполним "автозаполняемые" субконто
		
		тНомерСубконто = "НомерСубконто" + тВидСубконто + тДтКт;
		Если ДанныеУчета[ тНомерСубконто ] <> 0 И ДанныеУчета[ тНомерСубконто ] <> NULL Тогда
			
			тСубконто = "Субконто" + тДтКт + ДанныеУчета[ тНомерСубконто ];
			Субконто = ДанныеУчета[ тСубконто ];
			Если НЕ ЗначениеЗаполнено(Субконто) ИЛИ (тРеквизит = "СтатьяЗатрат" И ЗначениеЗаполнено(ДанныеУчета[ тРеквизит ])) Тогда
				СтрокаДанных[ тСубконто ] = ДанныеУчета[ тРеквизит ];
			КонецЕсли;
			
			Если тРеквизит = "СтатьяРасчетовСФСС" И ЗначениеЗаполнено(ДанныеУчета[ тРеквизит ]) Тогда
				СтрокаДанных[ тСубконто ] = ДанныеУчета[ тРеквизит ];
			КонецЕсли;

			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры  // АвтозаполнениеСубконто()

// автозаполнение Проводок
//
Процедура АвтозаполнениеПроводок() Экспорт
    
    ОтражениеВРеглУчете.Очистить();
    
    Записать();  // запишем документ
	
	Запрос = Новый Запрос();
    Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
    Запрос.УстановитьПараметр("парамРегистратор",       Ссылка);
    Запрос.УстановитьПараметр("парамСотрудник",         РаботникиОрганизации.ВыгрузитьКолонку("Сотрудник"));
    Запрос.УстановитьПараметр("парамПериодРегистрации", ПериодРегистрации);
    Запрос.УстановитьПараметр("парамОрганизация",       Организация);
    
    КоэффициентРезерваОтпусков = ИНАГРО_ПроведениеРасчетов.ПолучитьКоэффициентРезерваОтпусков(Организация, ПериодРегистрации);
    Запрос.УстановитьПараметр("РезервОтпусков", КоэффициентРезерваОтпусков > 0);
	
	ТекстПараметрыНачисления = "
    |	Основной.НалоговоеНазначениеДоходовИЗатрат,
    |	Основной.НалоговоеНазначение,
    |
    |	Основной.СчетДт,
    |	Основной.СубконтоДт1,
    |	Основной.СубконтоДт2,
    |	Основной.СубконтоДт3,
    |	Основной.СчетКт,
    |	Основной.СубконтоКт1,
    |	Основной.СубконтоКт2,
    |	Основной.СубконтоКт3    
    |";
    
    //	ВТВсеДвижения
    Если Истина Тогда
        //	Описание:
        // 		РеглУчетПлановыхНачисленийРаботниковОрганизаций.
        //		
        
        ТекстПараметрыУдержания = "
        |		NULL				КАК НалоговоеНазначениеДоходовИЗатрат,
        |		NULL				КАК НалоговоеНазначение,
        |
        |		Основной.СчетДт,
        |		Основной.СубконтоДт1,
        |		Основной.СубконтоДт2,
        |		Основной.СубконтоДт3,
        |		Основной.СчетКт,
        |		Основной.СубконтоКт1,
        |		Основной.СубконтоКт2,
        |		Основной.СубконтоКт3,
        |	ЛОЖЬ";
        
        ТекстЗапросаВТ = "
        |	ВЫБРАТЬ
        |		"+ТекстПараметрыНачисления+",
        |       ВЫБОР 
        |        КОГДА Основной.ВидРасчета.ЭтоОтпускные И Основной.ВидРасчета <> Значение(ПланВидовРасчета.ИНАГРО_Начисления.ОтпускЧАЭС)
        |         ТОГДА &РезервОтпусков
        |         ИНАЧЕ ЛОЖЬ
        |       КОНЕЦ КАК РезервОтпусков,
        |		1 КАК Порядок,
        |		Основной.Результат
        |ПОМЕСТИТЬ ВТВсеДвижения	
        |	ИЗ	Документ.ИНАГРО_НачислениеЗарплатыРаботникамОрганизаций.НачисленияПроводки КАК Основной
        |	ГДЕ Основной.Ссылка = &парамРегистратор
        |
        |ОБЪЕДИНИТЬ ВСЕ
        |
        |ВЫБРАТЬ
		|	РегистрОтражение.НалоговоеНазначениеДоходовИЗатрат,
		|	РегистрОтражение.НалоговоеНазначение,
		|	РегистрОтражение.СчетДт,
		|	РегистрОтражение.СубконтоДт1,
		|	РегистрОтражение.СубконтоДт2,
		|	РегистрОтражение.СубконтоДт3,
		|	РегистрОтражение.СчетКт,
		|	РегистрОтражение.СубконтоКт1,
		|	РегистрОтражение.СубконтоКт2,
		|	РегистрОтражение.СубконтоКт3,
        |   ЛОЖЬ КАК РезервОтпусков,
        |	1 КАК Порядок,
        |	РегистрОтражение.Результат
		|ИЗ
        |	РегистрРасчета.ИНАГРО_Отражение КАК РегистрОтражение
        |ГДЕ
        |	(НЕ РегистрОтражение.Регистратор ССЫЛКА Документ.ИНАГРО_НачислениеЗарплатыРаботникамОрганизаций)
        |	 И (РегистрОтражение.Сотрудник В (&парамСотрудник) ИЛИ РегистрОтражение.Сотрудник.ОсновноеНазначение В (&парамСотрудник))
        |	 И НАЧАЛОПЕРИОДА(РегистрОтражение.БазовыйПериодНачало, МЕСЯЦ) = &парамПериодРегистрации И (РегистрОтражение.ВидРасчета = Значение(ПланВидовРасчета.ИНАГРО_Отражение.Начисление) ИЛИ  РегистрОтражение.ВидРасчета = Значение(ПланВидовРасчета.ИНАГРО_Отражение.Удержание))
        |                               
        |
        |   // Корректировки
        |	ОБЪЕДИНИТЬ ВСЕ
        |	ВЫБРАТЬ
        |		"+ТекстПараметрыНачисления+",
        |   ЛОЖЬ КАК РезервОтпусков,
        |		1 КАК Порядок,
        |		Основной.Результат
        |	ИЗ	РегистрРасчета.ИНАГРО_Отражение КАК Основной
        |	ГДЕ		Основной.ПериодРегистрации = &парамПериодРегистрации
        |		И	Основной.Организация = &парамОрганизация
        |		И	Основной.Сотрудник В (&парамСотрудник)
        |		И	Основной.Регистратор ССЫЛКА Документ.ОперацияБух
        |
        |	ОБЪЕДИНИТЬ ВСЕ
        |	ВЫБРАТЬ
        |		"+ТекстПараметрыНачисления+",
        |       ВЫБОР 
        |        КОГДА Основной.ВидРасчетаБазы.ЭтоОтпускные  И Основной.ВидРасчетаБазы <> Значение(ПланВидовРасчета.ИНАГРО_Начисления.ОтпускЧАЭС)
        |         ТОГДА &РезервОтпусков
        |         ИНАЧЕ ЛОЖЬ
        |       КОНЕЦ КАК РезервОтпусков,
        |		2 КАК Порядок,
        |		Основной.Результат
        |	ИЗ	Документ.ИНАГРО_НачислениеЗарплатыРаботникамОрганизаций.ВзносыФОТПроводки КАК Основной
        |	ГДЕ Основной.Ссылка = &парамРегистратор
        |
        |   // Корректировки
        |	ОБЪЕДИНИТЬ ВСЕ
        |	ВЫБРАТЬ
        |		"+ТекстПараметрыНачисления+",
        |       ЛОЖЬ,
        |		2 КАК Порядок,
        |		Основной.Результат
        |	ИЗ	РегистрРасчета.ИНАГРО_Отражение КАК Основной
        |	ГДЕ		Основной.ПериодРегистрации = &парамПериодРегистрации
        |		И	Основной.Организация = &парамОрганизация
        |		И	Основной.Сотрудник В ( &парамСотрудник )
        |		И	Основной.Регистратор ССЫЛКА Документ.ОперацияБух
        |
        |	ОБЪЕДИНИТЬ ВСЕ
        |	ВЫБРАТЬ
        |		"+ТекстПараметрыУдержания+",
        |		3 КАК Порядок,
        |		Основной.Результат
        |	ИЗ	Документ.ИНАГРО_НачислениеЗарплатыРаботникамОрганизаций.ВзносыПроводки КАК Основной
        |	ГДЕ Основной.Ссылка = &парамРегистратор
        |
        |	ОБЪЕДИНИТЬ ВСЕ
        |	ВЫБРАТЬ
        |		"+ТекстПараметрыУдержания+",
        |		5 КАК Порядок,
        |		Основной.Результат
        |	ИЗ	Документ.ИНАГРО_НачислениеЗарплатыРаботникамОрганизаций.УдержанияПроводки КАК Основной
        |	ГДЕ Основной.Ссылка = &парамРегистратор
        |
        |	ОБЪЕДИНИТЬ ВСЕ
        |	ВЫБРАТЬ
        |		"+ТекстПараметрыУдержания+",
        |		4 КАК Порядок,
        |		Основной.Результат
        |	ИЗ	Документ.ИНАГРО_НачислениеЗарплатыРаботникамОрганизаций.НДФЛПроводки КАК Основной
        |	ГДЕ Основной.Ссылка = &парамРегистратор
        |
        |";
        Запрос.Текст = ТекстЗапросаВТ;
        Запрос.Выполнить();
        ТекстЗапросаВТВсеДвижения = "ВТВсеДвижения";
    КонецЕсли;
    
    ТекстЗапроса  = "
    |ВЫБРАТЬ
    |	"+ТекстПараметрыНачисления+",
    |	Основной.РезервОтпусков,
    |	Основной.Порядок,
    |	СУММА( Основной.Результат )			КАК Сумма
    |	
    |ИЗ	" + ТекстЗапросаВТВсеДвижения + " КАК Основной
    |
    |СГРУППИРОВАТЬ ПО
    |	"+ТекстПараметрыНачисления+",
    |	Основной.РезервОтпусков,
    |	Основной.Порядок
    |
    |УПОРЯДОЧИТЬ ПО Порядок, СчетДт.Код, СчетКт.Код, Сумма УБЫВ";
    
    Запрос.Текст = ТекстЗапроса;
    
    Выборка = Запрос.Выполнить().Выбрать();
	
	ИзмененияНК1578 = (ПериодРегистрации >= ИНАГРО_ПроведениеРасчетов.ДатаИзмененияНК1578());
	
    Пока Выборка.Следующий() Цикл
        СтрокаДанных = ОтражениеВРеглУчете.Добавить();
        ЗаполнитьЗначенияСвойств(СтрокаДанных, Выборка);
        Если Выборка.РезервОтпусков Тогда
			ДобавитьРезервОтпусков(Выборка,КоэффициентРезерваОтпусков,СтрокаДанных, ИзмененияНК1578);
        КонецЕсли;
        
    КонецЦикла;
    
КонецПроцедуры  // АвтозаполнениеПроводок

// Производится расчет.
//
Функция РассчитатьНачисления(Сотрудники = Неопределено, КомментироватьРасчет = Ложь) Экспорт
	
	// Массивы для хранения индексов строк табличных частей,
	// используются для расчета по одному сотруднику.
	МассивИндексыСтрокНачисления = Новый Массив();
	
	Отказ = Ложь;
	// Перечитаем объект и соберем данные для заполнения наборов записей регистров
	НачатьТранзакцию();
	Прочитать();
	ВыборкаПоШапкеДокумента = СформироватьЗапросПоШапке().Выбрать();
	
	// позиционируем выборку
	ВыборкаПоШапкеДокумента.Следующий();
	ВыборкаПоНачислениям = СформироватьЗапросПоНачислениям(Сотрудники).Выбрать();
	ЗафиксироватьТранзакцию();
	
	// Создадим рабочие наборы записей
	НаборОсновныеНачисления = РегистрыРасчета.ИНАГРО_Начисления.СоздатьНаборЗаписей();
	НаборОсновныеНачисления.Отбор.Регистратор.Значение = Ссылка;
	
	Пока ВыборкаПоНачислениям.Следующий() Цикл
		
		ПроверитьЗаполнениеСтрокиНачисления(ВыборкаПоНачислениям, Отказ);
		Отказ = Ложь;
		
		Если НЕ Отказ Тогда
			// Заполним записи в наборах записей регистров
			ДобавитьСтрокуНачислений(ВыборкаПоНачислениям, НаборОсновныеНачисления, Истина);
			МассивИндексыСтрокНачисления.Добавить(ВыборкаПоНачислениям.НомерСтроки-1);
			
		КонецЕсли;
		
	КонецЦикла;
	НаборОсновныеНачисления.Записать();
	
	Если Отказ Тогда
		
		// Если есть какие-то проблемы - удаляем движения (тут нет транзакции) 
		// Удаляем движения.
		НаборОсновныеНачисления.Очистить();
		НаборОсновныеНачисления.Записать();
				
		Возврат Не Отказ;
		
	КонецЕсли;
	
	// Рассчитываем записи
	// при этом передаем не только набор записей регистра расчета, но и набор записей регистра 
	// накопления со сведениями об отработанном времени.
	ИНАГРО_ПроведениеРасчетов.РассчитатьЗаписиРегистраРасчета("ИНАГРО_Начисления", 
														НаборОсновныеНачисления, 
														Начисления, 
														МассивИндексыСтрокНачисления, 
														Сотрудники, 
														КомментироватьРасчет);
	
	// Удаляем движения
	НаборОсновныеНачисления.Очистить();
	НаборОсновныеНачисления.Записать();
	
	Записать();
	
	Возврат Не Отказ;
	
КонецФункции // РассчитатьНачисления()

// Процедура рассчитывает взносы
// и заполняет реквизиты База, БазаВзноса, Результат табличных частей "Взносы" и "ВзносыФОТ".
Процедура РассчитатьВзносы(Сотрудники, ИмяТЧ) Экспорт
	
	Отказ = Ложь;
	МассивИндексыСтрокВзносыВФонды = Новый Массив();
	
	// Перечитаем объект и соберем данные для заполнения наборов записей регистров
	НачатьТранзакцию();
	Прочитать();
	ВыборкаПоШапкеДокумента = СформироватьЗапросПоШапке().Выбрать();
	// позиционируем выборку
	ВыборкаПоШапкеДокумента.Следующий();
	ВыборкаПоНачислениям = СформироватьЗапросПоНачислениям(Сотрудники).Выбрать();
	ВыборкаПоВзносам = СформироватьЗапросПоВзносы(ИмяТЧ, Сотрудники).Выбрать();
	ЗафиксироватьТранзакцию();
	
	// создадим наборы
	НаборОсновныеНачисления = РегистрыРасчета.ИНАГРО_Начисления.СоздатьНаборЗаписей();
	НаборОсновныеНачисления.Отбор.Регистратор.Значение = Ссылка;
	Пока ВыборкаПоНачислениям.Следующий() Цикл 
		ПроверитьЗаполнениеСтрокиНачисления(ВыборкаПоНачислениям, Отказ);
		Если НЕ Отказ Тогда
			ДобавитьСтрокуНачислений(ВыборкаПоНачислениям, НаборОсновныеНачисления);
		КонецЕсли;
	КонецЦикла;
	НаборОсновныеНачисления.Записать();
	
	НаборВзносыВФонды = РегистрыРасчета.ИНАГРО_ВзносыВФонды.СоздатьНаборЗаписей();
	НаборВзносыВФонды.Отбор.Регистратор.Значение = Ссылка;
	Пока ВыборкаПоВзносам.Следующий() Цикл
		ПроверитьЗаполнениеСтрокиВзносы(ВыборкаПоВзносам, Отказ);
		Если НЕ Отказ Тогда
			// Заполним записи в наборах записей регистров
			ДобавитьСтрокуВзносы(ВыборкаПоВзносам, НаборВзносыВФонды);
			МассивИндексыСтрокВзносыВФонды.Добавить(ВыборкаПоВзносам.НомерСтроки-1);
		КонецЕсли;
	КонецЦикла;
	НаборВзносыВФонды.Записать();
	
	
	// если что-то не так, то очистим созданные наборы
	Если Отказ Тогда
		
		НаборОсновныеНачисления.Очистить();
		НаборОсновныеНачисления.Записать();
		
		НаборВзносыВФонды.Очистить();
		НаборВзносыВФонды.Записать();
		
		Возврат;
	КонецЕсли;

	

	ИНАГРО_ПроведениеРасчетов.РассчитатьЗаписиРегистраРасчета("ИНАГРО_ВзносыВФонды", 
														НаборВзносыВФонды, 
														ЭтотОбъект[ИмяТЧ], 
														МассивИндексыСтрокВзносыВФонды, 
														Сотрудники, 
														Ложь);
														
	
	// Удаляем движения
	НаборОсновныеНачисления.Очистить();
	НаборОсновныеНачисления.Записать();
	
	НаборВзносыВФонды.Очистить();
	НаборВзносыВФонды.Записать();
	
	Записать();
	
КонецПроцедуры  // РассчитатьУдержания()

// Производится расчет.
//
Процедура РассчитатьНДФЛ( Сотрудники = Неопределено, КомментироватьРасчет = Ложь ) Экспорт
	
	Отказ = Ложь;
	МассивИндексыСтрокНДФЛ = Новый Массив();
	
	// Перечитаем объект и соберем данные для заполнения наборов записей регистров
	НачатьТранзакцию();
	Прочитать();
	ВыборкаПоШапкеДокумента = СформироватьЗапросПоШапке().Выбрать();
	
	// позиционируем выборку
	ВыборкаПоШапкеДокумента.Следующий();
	ВыборкаПоНачислениям = СформироватьЗапросПоНачислениям(Сотрудники).Выбрать();
	ВыборкаПоВзносам = СформироватьЗапросПоВзносы( ,Сотрудники).Выбрать();
	ВыборкаПоНДФЛ = СформироватьЗапросПоНДФЛ(Сотрудники).Выбрать();
	ВыборкаПоУдержаниям = СформироватьЗапросПоУдержания(Сотрудники).Выбрать();
	ЗафиксироватьТранзакцию();
	
	// Создадим рабочие наборы записей
	НаборОсновныеНачисления = РегистрыРасчета.ИНАГРО_Начисления.СоздатьНаборЗаписей();
	НаборОсновныеНачисления.Отбор.Регистратор.Значение = Ссылка;
	// ? // НаборОсновныеНачисления.мВыполнятьВспомогательныеРасчеты = Ложь;
	Пока ВыборкаПоНачислениям.Следующий() Цикл
		
		ПроверитьЗаполнениеСтрокиНачисления(ВыборкаПоНачислениям, Отказ);
		Если НЕ Отказ Тогда
			
			// Заполним записи в наборах записей регистров
			ДобавитьСтрокуНачислений(ВыборкаПоНачислениям, НаборОсновныеНачисления);
			
		КонецЕсли;
	КонецЦикла;
	НаборОсновныеНачисления.Записать();
	
	НаборВзносыВФонды = РегистрыРасчета.ИНАГРО_ВзносыВФонды.СоздатьНаборЗаписей();
	НаборВзносыВФонды.Отбор.Регистратор.Значение = Ссылка;
	Пока ВыборкаПоВзносам.Следующий() Цикл
		
		ПроверитьЗаполнениеСтрокиВзносы(ВыборкаПоВзносам, Отказ);
		Если НЕ Отказ Тогда
			
			// Заполним записи в наборах записей регистров
			ДобавитьСтрокуВзносы(ВыборкаПоВзносам, НаборВзносыВФонды);

		КонецЕсли;
	КонецЦикла;
	НаборВзносыВФонды.Записать();
	
	НаборНДФЛ = РегистрыНакопления.ВзаиморасчетыПоНДФЛ.СоздатьНаборЗаписей();
	НаборНДФЛ.Отбор.Регистратор.Значение = Ссылка;
	Пока ВыборкаПоНДФЛ.Следующий() Цикл
		ПроверитьЗаполнениеСтрокиНДФЛ(ВыборкаПоНДФЛ, Отказ);
		Если НЕ Отказ Тогда
			
			// Заполним записи в наборах записей регистров
			ДобавитьСтрокуНДФЛ(ВыборкаПоНДФЛ, НаборНДФЛ);
			МассивИндексыСтрокНДФЛ.Добавить(ВыборкаПоНДФЛ.НомерСтроки-1);

		КонецЕсли;
	КонецЦикла;
	НаборНДФЛ.Записать();

	Если Отказ Тогда
		
		НаборОсновныеНачисления.Очистить();
		НаборОсновныеНачисления.Записать();
		
		НаборВзносыВФонды.Очистить();
		НаборВзносыВФонды.Записать();
		
		НаборНДФЛ.Очистить();
		НаборНДФЛ.Записать();
		
		Возврат;
	КонецЕсли;
	
	ИНАГРО_ПроведениеРасчетов.РассчитатьЗаписиНДФЛ(НаборНДФЛ, НДФЛ, МассивИндексыСтрокНДФЛ, Сотрудники, КомментироватьРасчет);
	
	// Удаляем движения
	НаборОсновныеНачисления.Очистить();
	НаборОсновныеНачисления.Записать();
	
	НаборВзносыВФонды.Очистить();
	НаборВзносыВФонды.Записать();
	
	НаборНДФЛ.Очистить();
	НаборНДФЛ.Записать();
	
	Записать();
КонецПроцедуры  // РассчитатьНДФЛ()

// Процедура рассчитывает ресурсы удержаний и заполняет 
// реквизиты Результат, ПервичныйРезультат табличной части документа.
Процедура РассчитатьУдержания(Сотрудники = Неопределено, КомментироватьРасчет = Ложь ) Экспорт
	
	// Удержания - в последнюю очередь
	// перед тем как начать расчет, сформированные движения надо записать - 
	// по ним чуть позже будем получать дополнительные данные для расчетов.
	Отказ = Ложь;
	МассивИндексыСтрокУдержания = Новый Массив();
	
	// Перечитаем объект и соберем данные для заполнения наборов записей регистров
	НачатьТранзакцию();
	Прочитать();
	ВыборкаПоШапкеДокумента = СформироватьЗапросПоШапке().Выбрать();
	// позиционируем выборку
	ВыборкаПоШапкеДокумента.Следующий();
	ВыборкаПоНачислениям = СформироватьЗапросПоНачислениям(Сотрудники).Выбрать();
	ВыборкаПоВзносам = СформироватьЗапросПоВзносы(, Сотрудники).Выбрать();
	ВыборкаПоНДФЛ = СформироватьЗапросПоНДФЛ(Сотрудники).Выбрать();
	ВыборкаПоУдержаниям = СформироватьЗапросПоУдержания(Сотрудники).Выбрать();
	ЗафиксироватьТранзакцию();
	
	// сформируем движения по данным табличных частей
	НаборОсновныеНачисления = РегистрыРасчета.ИНАГРО_Начисления.СоздатьНаборЗаписей();
	НаборОсновныеНачисления.Отбор.Регистратор.Значение = Ссылка;
	Пока ВыборкаПоНачислениям.Следующий() Цикл 
		ПроверитьЗаполнениеСтрокиНачисления(ВыборкаПоНачислениям, Отказ);
		Если НЕ Отказ Тогда
			ДобавитьСтрокуНачислений(ВыборкаПоНачислениям, НаборОсновныеНачисления);
		КонецЕсли;
	КонецЦикла;
	НаборОсновныеНачисления.Записать();
	
	НаборВзносыВФонды = РегистрыРасчета.ИНАГРО_ВзносыВФонды.СоздатьНаборЗаписей();
	НаборВзносыВФонды.Отбор.Регистратор.Значение = Ссылка;
	Пока ВыборкаПоВзносам.Следующий() Цикл
		ПроверитьЗаполнениеСтрокиВзносы(ВыборкаПоВзносам, Отказ);
		Если НЕ Отказ Тогда
			// Заполним записи в наборах записей регистров
			ДобавитьСтрокуВзносы(ВыборкаПоВзносам, НаборВзносыВФонды);
		КонецЕсли;
	КонецЦикла;
	НаборВзносыВФонды.Записать();
	
	НаборНДФЛ = РегистрыНакопления.ВзаиморасчетыПоНДФЛ.СоздатьНаборЗаписей();
	НаборНДФЛ.Отбор.Регистратор.Значение = Ссылка;
	Пока ВыборкаПоНДФЛ.Следующий() Цикл
		ПроверитьЗаполнениеСтрокиНДФЛ(ВыборкаПоНДФЛ, Отказ);
		Если НЕ Отказ Тогда
			// Заполним записи в наборах записей регистров
			ДобавитьСтрокуНДФЛ(ВыборкаПоНДФЛ, НаборНДФЛ);
		КонецЕсли;
	КонецЦикла;
	НаборНДФЛ.Записать();

	НаборУдержания = РегистрыРасчета.ИНАГРО_Удержания.СоздатьНаборЗаписей();
	НаборУдержания.Отбор.Регистратор.Значение = Ссылка;
	Пока ВыборкаПоУдержаниям.Следующий() Цикл 
		ПроверитьЗаполнениеСтрокиУдержания(ВыборкаПоУдержаниям, Отказ);
		Если НЕ Отказ Тогда
			ДобавитьСтрокуУдержаний(ВыборкаПоУдержаниям, НаборУдержания);
			МассивИндексыСтрокУдержания.Добавить(ВыборкаПоУдержаниям.НомерСтроки - 1); 
		КонецЕсли;
	КонецЦикла;
	НаборУдержания.Записать();
	
	Если Отказ Тогда
		
		// Удаляем движения
		НаборОсновныеНачисления.Очистить();
		НаборОсновныеНачисления.Записать();
		НаборВзносыВФонды.Очистить();
		НаборВзносыВФонды.Записать();
		НаборНДФЛ.Очистить();
		НаборНДФЛ.Записать();
		НаборУдержания.Очистить();
		НаборУдержания.Записать();
		Возврат;
		
	КонецЕсли;
	
	// удержания - в последнюю очередь
	ИНАГРО_ПроведениеРасчетов.РассчитатьЗаписиРегистраРасчета("ИНАГРО_Удержания", НаборУдержания,Удержания, МассивИндексыСтрокУдержания, Сотрудники, КомментироватьРасчет);
	
	// Удаляем движения
	НаборОсновныеНачисления.Очистить();
	НаборОсновныеНачисления.Записать();
	
	НаборВзносыВФонды.Очистить();
	НаборВзносыВФонды.Записать();
	
	НаборНДФЛ.Очистить();
	НаборНДФЛ.Записать();
	
	НаборУдержания.Очистить();
	НаборУдержания.Записать();
	
	Записать();
	

КонецПроцедуры  // РассчитатьУдержания

// Производится расчет.
//
Процедура РассчитатьНачисленияПроводки( Сотрудники ) Экспорт
	
	
	Отказ = Ложь;
	
	// Перечитаем объект и соберем данные для заполнения наборов записей регистров
	НачатьТранзакцию();
	Прочитать();
	ВыборкаПоШапкеДокумента = СформироватьЗапросПоШапке().Выбрать();
	
	// позиционируем выборку
	ВыборкаПоШапкеДокумента.Следующий();
	ВыборкаПоНачислениям = СформироватьЗапросПоНачислениям(Сотрудники).Выбрать();
	ЗафиксироватьТранзакцию();
	
	НаборОсновныеНачисления = РегистрыРасчета.ИНАГРО_Начисления.СоздатьНаборЗаписей();
	НаборОсновныеНачисления.Отбор.Регистратор.Значение = Ссылка;
	Пока ВыборкаПоНачислениям.Следующий() Цикл
		
		ПроверитьЗаполнениеСтрокиНачисления(ВыборкаПоНачислениям, Отказ);
		Отказ = Ложь;
		Если НЕ Отказ Тогда
			// Заполним записи в наборах записей регистров
			ДобавитьСтрокуНачислений(ВыборкаПоНачислениям, НаборОсновныеНачисления);
		КонецЕсли;
		
	КонецЦикла;
	НаборОсновныеНачисления.Записать();
	
	Если Отказ Тогда
		
		// Если есть какие-то проблемы - удаляем движения (тут нет транзакции) 
		// Удаляем движения.
		НаборОсновныеНачисления.Очистить();
		НаборОсновныеНачисления.Записать();
		Возврат;
				
	КонецЕсли;	
	Записать();
	
	// основная выборка - по ней ведем обход и вводим записи движений
	Выборка = СформироватьЗапросНачисленияПроводки(Сотрудники).Выбрать();
	Пока Выборка.Следующий() Цикл
		СтрокаДанных = НачисленияПроводки.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаДанных, Выборка);
		
		АвтозаполнениеСубконто(Выборка, СтрокаДанных, "Дт", "Сотрудники");
		АвтозаполнениеСубконто(Выборка, СтрокаДанных, "Дт", "Подразделения");
		АвтозаполнениеСубконто(Выборка, СтрокаДанных, "Кт", "Сотрудники");
		
		Если Выборка.ВидРасчета.ЭтоБольничные Тогда
			АвтозаполнениеСубконто(Выборка, СтрокаДанных, "Дт", "СтатьиНалоговыхДеклараций", "СтатьяРасчетовСФСС");
		КонецЕсли;	
	КонецЦикла;
	
	НаборОсновныеНачисления.Очистить();
	НаборОсновныеНачисления.Записать();
	Записать(); 
	
КонецПроцедуры  // РассчитатьНачисленияПроводки()

// Производится расчет.
//
Процедура РассчитатьВзносыПроводки(Сотрудники = Неопределено) Экспорт
	
	Отказ = Ложь;
	
	// Перечитаем объект и соберем данные для заполнения наборов записей регистров
	НачатьТранзакцию();
		Прочитать();
		ВыборкаПоШапкеДокумента = СформироватьЗапросПоШапке().Выбрать();
		// позиционируем выборку
		ВыборкаПоШапкеДокумента.Следующий();
		ВыборкаПоНачислениям = СформироватьЗапросПоНачислениям(Сотрудники).Выбрать();
		ВыборкаПоВзносам = СформироватьЗапросПоВзносы("Взносы", Сотрудники).Выбрать();
	ЗафиксироватьТранзакцию();
	
	// создадим наборы
	НаборОсновныеНачисления = РегистрыРасчета.ИНАГРО_Начисления.СоздатьНаборЗаписей();
	НаборОсновныеНачисления.Отбор.Регистратор.Значение = Ссылка;
	Пока ВыборкаПоНачислениям.Следующий() Цикл 
		ПроверитьЗаполнениеСтрокиНачисления(ВыборкаПоНачислениям, Отказ);
		Если НЕ Отказ Тогда
			ДобавитьСтрокуНачислений(ВыборкаПоНачислениям, НаборОсновныеНачисления);
		КонецЕсли;
	КонецЦикла;
	НаборОсновныеНачисления.Записать();
	
	НаборВзносыВФонды = РегистрыРасчета.ИНАГРО_ВзносыВФонды.СоздатьНаборЗаписей();
	НаборВзносыВФонды.Отбор.Регистратор.Значение = Ссылка;
	Пока ВыборкаПоВзносам.Следующий() Цикл
		ПроверитьЗаполнениеСтрокиВзносы(ВыборкаПоВзносам, Отказ);
		Если НЕ Отказ Тогда
			// Заполним записи в наборах записей регистров
			ДобавитьСтрокуВзносы(ВыборкаПоВзносам, НаборВзносыВФонды);
		КонецЕсли;
	КонецЦикла;
	НаборВзносыВФонды.Записать();
	
	НаборВзаиморасчеты = РегистрыНакопления.ВзаиморасчетыССотрудниками.СоздатьНаборЗаписей();
	НаборВзаиморасчеты.Отбор.Регистратор.Значение = Ссылка;
	СформироватьВзаиморасчетыСРаботниками(Сотрудники, НаборВзаиморасчеты);
	НаборВзаиморасчеты.Записать();
	
	// если что-то не так, то очистим созданные наборы
	Если Отказ Тогда
		
		НаборОсновныеНачисления.Очистить();
		НаборОсновныеНачисления.Записать();
		
		НаборВзносыВФонды.Очистить();
		НаборВзносыВФонды.Записать();
		
		НаборВзаиморасчеты.Очистить();
		НаборВзаиморасчеты.Записать();
		
		Возврат;
		
	КонецЕсли;
	
	Записать();
	
	РассчитатьЗаписиВзносыПроводки(Сотрудники);
	
	
	НаборОсновныеНачисления.Очистить();
	НаборОсновныеНачисления.Записать();
	
	НаборВзносыВФонды.Очистить();
	НаборВзносыВФонды.Записать();
	
	НаборВзаиморасчеты.Очистить();
	НаборВзаиморасчеты.Записать();

КонецПроцедуры  // РассчитатьУдержания()

// Производится расчет.
//
Процедура РассчитатьЗаписиВзносыПроводки(Сотрудники = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("парамПериодРегистрации"		, ПериодРегистрации);
	Запрос.УстановитьПараметр("парамСотрудники"				, Сотрудники);
	
	//	ВТПроводки
	Если Истина Тогда
		//	Описание:
		// 		РегистрРасчета.ВзносыВФонды + Проводки Кт.
		//		
		ТекстЗапросаВТ = " 
		|		ВЫБРАТЬ
		|			ВзносыВФонды.Сотрудник.ФизическоеЛицо КАК ФизическоеЛицо,
		|			ВзносыВФонды.Сотрудник,
		|			ВзносыВФонды.Налог,
		|			ВзносыВФонды.СтатьяНалоговойДекларации,
		|			НАЧАЛОПЕРИОДА(ВзносыВФонды.БазовыйПериодНачало, МЕСЯЦ) КАК БазовыйПериодНачало,
		|			NULL КАК СчетДт,
		|			Проводки.СчетКт,
		|			Проводки.СубконтоКт1,
		|			Проводки.СубконтоКт2,
		|			Проводки.СубконтоКт3,
		|			СУММА(ВзносыВФонды.Результат)           КАК Результат
		|
		|ПОМЕСТИТЬ ВТПроводки	
		|		ИЗ	РегистрРасчета.ИНАГРО_ВзносыВФонды КАК ВзносыВФонды
		|	
		|	
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СпособыОтраженияЗарплатыВРеглУчете КАК Проводки
		|		ПО		ВзносыВФонды.ВидРасчета.СпособОтраженияВБухучете = Проводки.Ссылка 
		|	
		|
		|		ГДЕ		ВзносыВФонды.ПериодРегистрации = &парамПериодРегистрации
		|			И 	ВзносыВФонды.Сотрудник В ( &парамСотрудники )
		|			И	ВзносыВФонды.ВидРасчета.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаНачислений.Взносы)
		|    
		|		СГРУППИРОВАТЬ ПО
		|			ВзносыВФонды.Сотрудник,
		|			ВзносыВФонды.Налог,
		|			ВзносыВФонды.СтатьяНалоговойДекларации,
		|			НАЧАЛОПЕРИОДА(ВзносыВФонды.БазовыйПериодНачало, МЕСЯЦ),
		|			Проводки.СчетКт,
		|			Проводки.СубконтоКт1,
		|			Проводки.СубконтоКт2,
		|			Проводки.СубконтоКт3
		|
		|       ОБЪЕДИНИТЬ ВСЕ
		|		ВЫБРАТЬ
		|			Взаиморасчеты.Сотрудник.ФизическоеЛицо КАК ФизическоеЛицо,
		|			Взаиморасчеты.Сотрудник,
		|			NULL КАК Налог,
		|			NULL КАК СтатьяНалоговойДекларации,
		|			НАЧАЛОПЕРИОДА(Взаиморасчеты.ПериодВзаиморасчетов, МЕСЯЦ) КАК БазовыйПериодНачало,
		|			Взаиморасчеты.СчетУчета КАК СчетДт,
		|			NULL КАК СчетКт,
		|			NULL КАК СубконтоКт1,
		|			NULL КАК СубконтоКт2,
		|			NULL КАК СубконтоКт3,
		|			СУММА( ВЫБОР	КОГДА Взаиморасчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) 
		|								ТОГДА	Взаиморасчеты.СуммаВзаиморасчетов
		|							ИНАЧЕ		- Взаиморасчеты.СуммаВзаиморасчетов
		|                  КОНЕЦ )           КАК Результат
		|
		|		ИЗ	РегистрНакопления.ВзаиморасчетыССотрудниками КАК Взаиморасчеты
		|	
		|		ГДЕ		НАЧАЛОПЕРИОДА(Взаиморасчеты.Период, МЕСЯЦ) = &парамПериодРегистрации
		|			И 	Взаиморасчеты.Сотрудник В ( &парамСотрудники )
		|			И	Взаиморасчеты.КодОперации= ЗНАЧЕНИЕ(Перечисление.КодыОперацийВзаиморасчетыСРаботникамиОрганизаций.Взносы)
		|    
		|		СГРУППИРОВАТЬ ПО
		|			Взаиморасчеты.Сотрудник,
		|			НАЧАЛОПЕРИОДА(Взаиморасчеты.ПериодВзаиморасчетов, МЕСЯЦ),
		|			Взаиморасчеты.СчетУчета
		|";
		Запрос.Текст = ТекстЗапросаВТ;
		Запрос.Выполнить();
		ТекстЗапросаВТПроводки = "ВТПроводки";
	КонецЕсли;
		Запрос.Текст = "ВЫБРАТЬ * ИЗ ВТПроводки";
	
		
	ТекстЗапроса = " 
	|ВЫБРАТЬ
	|	ВзносыВФонды.Сотрудник					КАК Сотрудник,
	|	ВзносыВФонды.Налог						КАК Налог,
	|	ВзносыВФонды.СтатьяНалоговойДекларации	КАК СтатьяНалоговойДекларации,
	|	ВзносыВФонды.БазовыйПериодНачало		КАК БазовыйПериодНачало,
	|
	|	ВзносыВФонды.СчетДт КАК СчетДт,
	|	ВзносыВФонды.Сотрудник.ФизическоеЛицо 			КАК СубконтоДт1,
	|	ВзносыВФонды.СчетКт,
	|	ВзносыВФонды.СубконтоКт1,
	|	ВзносыВФонды.СубконтоКт2,
	|	ВзносыВФонды.СубконтоКт3,
	|    
	|	// --- КРЕДИТ	
	|	ЕСТЬNULL(ВидыСубконтоСтатьиНалоговыхДекларацийКт.НомерСтроки, 0) КАК НомерСубконтоСтатьиНалоговыхДекларацийКт,
	|	ЕСТЬNULL(ВидыСубконтоНалогиКт.НомерСтроки,0) КАК НомерСубконтоНалогиКт,
	|    
	|	ВзносыВФонды.Результат           КАК Результат
	|
	|ИЗ	ВТПроводки КАК ВзносыВФонды
	|
	|	
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Хозрасчетный.ВидыСубконто КАК ВидыСубконтоСтатьиНалоговыхДекларацийКт
	|ПО   ВзносыВФонды.СчетКт <> ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка) 
	|	И ВзносыВФонды.СчетКт = ВидыСубконтоСтатьиНалоговыхДекларацийКт.Ссылка 
	|	И ВидыСубконтоСтатьиНалоговыхДекларацийКт.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиНалоговыхДеклараций)
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Хозрасчетный.ВидыСубконто КАК ВидыСубконтоНалогиКт
	|ПО		ВзносыВФонды.СчетКт <> ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка) 
	|	И	ВзносыВФонды.СчетКт = ВидыСубконтоНалогиКт.Ссылка 
	|	И	ВидыСубконтоНалогиКт.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Налоги)
	|    
	|УПОРЯДОЧИТЬ ПО    
	|	Сотрудник, 
	|	ВЫБОР	КОГДА ВзносыВФонды.СчетДт = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыПоЗаработнойПлате)  ТОГДА 1
	|			КОГДА ВзносыВФонды.СчетДт = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыПоДругимВыплатам)  ТОГДА 2
	|			ИНАЧЕ ВзносыВФонды.СчетДт КОНЕЦ
	|    
	|ИТОГИ    
	|	СУММА(Результат) 
	|ПО
	|	Сотрудник,ВзносыВФонды.СчетДт  
	|";
	
	Запрос.Текст = ТекстЗапроса;
	
	СчетУчетаПоУмолчанию = ПланыСчетов.Хозрасчетный.РасчетыПоЗаработнойПлате;
	
	тбНачисления = Новый ТаблицаЗначений;
	тбНачисления.Колонки.Добавить("СчетДт");
	тбНачисления.Колонки.Добавить("Сумма");
	
	ВыборкаСотрудники = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаСотрудники.Следующий() Цикл
		мСотрудник = ВыборкаСотрудники.Сотрудник;
		тбНачисления.Очистить();
		
		// 1. В этом цикле сформируем таблицу для определения счетов учета других удержаний.
		ВыборкаСчетУчета = ВыборкаСотрудники.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаСчетУчета.Следующий() Цикл
			Если ВыборкаСчетУчета.СчетДт <> NULL Тогда
				СтрокаТб = тбНачисления.Добавить();
				СтрокаТб.СчетДт	= ВыборкаСчетУчета.СчетДт;
				СтрокаТб.Сумма	= ВыборкаСчетУчета.Результат;
			КонецЕсли;
		КонецЦикла;
		
		// 2. В этом цикле сделаем движения с учетом остатков в разрезе счетов учета по начислениям.
		тбНачисления.Сортировать("СчетДт");
		ВыборкаСчетУчета = ВыборкаСотрудники.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаСчетУчета.Следующий() Цикл
			
			Если ВыборкаСчетУчета.СчетДт = NULL Тогда
				
				Выборка = ВыборкаСчетУчета.Выбрать(ОбходРезультатаЗапроса.Прямой);
				Пока Выборка.Следующий() Цикл
					
					СуммаДокумента = Выборка.Результат;
					
					Для каждого СтрокаТб Из тбНачисления Цикл
						СуммаДвижения = Мин(СуммаДокумента, СтрокаТб.Сумма);
						Если  СуммаДвижения = 0 Тогда
							Продолжить;
						КонецЕсли;
						СтрокаТб.Сумма = СтрокаТб.Сумма - СуммаДвижения;
						СуммаДокумента = СуммаДокумента - СуммаДвижения;
						
						// Добавим строку
						СтрокаДанных = ВзносыПроводки.Добавить();
						ЗаполнитьЗначенияСвойств(СтрокаДанных, Выборка);
						СтрокаДанных.СчетДт = СтрокаТб.СчетДт;
						СтрокаДанных.Результат = СуммаДвижения;
						
						АвтозаполнениеСубконто(Выборка, СтрокаДанных, "Кт" , "Налоги");
						АвтозаполнениеСубконто(Выборка, СтрокаДанных, "Кт" , "СтатьиНалоговыхДеклараций");
						
						
						Если  СуммаДокумента = 0 Тогда
							Прервать;
						КонецЕсли;
					КонецЦикла;
					
					Если СуммаДокумента <> 0 Тогда
						// Каким-то административным документом по регистру 
						// расчета Взносы в фонды провели больше сем по взаиморасчетам, 
						// тогда бросаем сумму на 661
						// Добавим строку.
						СтрокаДанных = ВзносыПроводки.Добавить();
						ЗаполнитьЗначенияСвойств(СтрокаДанных, Выборка);
						
						СтрокаДанных.СчетДт = СчетУчетаПоУмолчанию;
						СтрокаДанных.Результат = СуммаДокумента;
						
						АвтозаполнениеСубконто(Выборка, СтрокаДанных, "Кт" , "Налоги");
						АвтозаполнениеСубконто(Выборка, СтрокаДанных, "Кт" , "СтатьиНалоговыхДеклараций");
						
					КонецЕсли;
					
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
		
	Записать();

КонецПроцедуры  // РассчитатьУдержания()

// Производится расчет.
//
Процедура РассчитатьВзносыФОТПроводки(Сотрудники = Неопределено, КомментироватьРасчет = Ложь ) Экспорт
	
	Отказ = Ложь;
	
	// Перечитаем объект и соберем данные для заполнения наборов записей регистров
	НачатьТранзакцию();
		Прочитать();
		ВыборкаПоШапкеДокумента = СформироватьЗапросПоШапке().Выбрать();
		// позиционируем выборку
		ВыборкаПоШапкеДокумента.Следующий();
		ВыборкаПоНачислениям = СформироватьЗапросПоНачислениям(Сотрудники).Выбрать();
		ВыборкаПоВзносам = СформироватьЗапросПоВзносы("ВзносыФОТ", Сотрудники).Выбрать();
		ВыборкаПоНачислениямПроводки = СформироватьЗапросПоНачислениямПроводки( Сотрудники).Выбрать();
	ЗафиксироватьТранзакцию();
	
	// создадим наборы
	НаборОсновныеНачисления = РегистрыРасчета.ИНАГРО_Начисления.СоздатьНаборЗаписей();
	НаборОсновныеНачисления.Отбор.Регистратор.Значение = Ссылка;
	Пока ВыборкаПоНачислениям.Следующий() Цикл 
		ПроверитьЗаполнениеСтрокиНачисления(ВыборкаПоНачислениям, Отказ);
		Если НЕ Отказ Тогда
			ДобавитьСтрокуНачислений(ВыборкаПоНачислениям, НаборОсновныеНачисления);
		КонецЕсли;
	КонецЦикла;
	НаборОсновныеНачисления.Записать();
	
	НаборВзносыВФонды = РегистрыРасчета.ИНАГРО_ВзносыВФонды.СоздатьНаборЗаписей();
	НаборВзносыВФонды.Отбор.Регистратор.Значение = Ссылка;
	Пока ВыборкаПоВзносам.Следующий() Цикл
		ПроверитьЗаполнениеСтрокиВзносы(ВыборкаПоВзносам, Отказ);
		Если НЕ Отказ Тогда
			// Заполним записи в наборах записей регистров
			ДобавитьСтрокуВзносы(ВыборкаПоВзносам, НаборВзносыВФонды);
		КонецЕсли;
	КонецЦикла;
	НаборВзносыВФонды.Записать();
	
	// создадим наборы
	НаборПроводки = РегистрыРасчета.ИНАГРО_Отражение.СоздатьНаборЗаписей();
	НаборПроводки.Отбор.Регистратор.Значение = Ссылка;
	Пока ВыборкаПоНачислениямПроводки.Следующий() Цикл 
		ПроверитьЗаполнениеСтрокиНачисленияПроводки(ВыборкаПоНачислениямПроводки, Отказ);
		Если НЕ Отказ Тогда
			ДобавитьСтрокуНачисленийПроводки(ВыборкаПоНачислениямПроводки, НаборПроводки);
		КонецЕсли;
	КонецЦикла;
	НаборПроводки.Записать();
	
	// если что-то не так, то очистим созданные наборы
	Если Отказ Тогда
		
		НаборОсновныеНачисления.Очистить();
		НаборОсновныеНачисления.Записать();
		
		НаборВзносыВФонды.Очистить();
		НаборВзносыВФонды.Записать();
		
		НаборПроводки.Очистить();
		НаборПроводки.Записать();
		
		Возврат;
		
	КонецЕсли;
	
	
	// Расчет
	РассчитатьВзносыФОТПроводкиЗаписи( Сотрудники );
	
	
	// Удаляем движения
	НаборОсновныеНачисления.Очистить();
	НаборОсновныеНачисления.Записать();
	
	НаборВзносыВФонды.Очистить();
	НаборВзносыВФонды.Записать();
	
	НаборПроводки.Очистить();
	НаборПроводки.Записать();
	
	Записать();

КонецПроцедуры

// Производится расчет.
//
Процедура РассчитатьВзносыФОТПроводкиЗаписи( Сотрудники ) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("парамПериодРегистрации"		, ПериодРегистрации);
	Запрос.УстановитьПараметр("парамПериодРегистрацииКонец"	, КонецМесяца(ПериодРегистрации));
	Запрос.УстановитьПараметр("парамСотрудники"				, Сотрудники);
	
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СотрудникиОрганизаций.ФизическоеЛицо
	|ИЗ
	|	Справочник.Сотрудники КАК СотрудникиОрганизаций
	|ГДЕ
	|	СотрудникиОрганизаций.Ссылка В(&парамСотрудники)";
	
	таблицаФизлиц = Запрос.Выполнить().Выгрузить();
	парамФизлица = таблицаФизлиц.ВыгрузитьКолонку("ФизическоеЛицо");
	
	Запрос.УстановитьПараметр("парамФизлица"				, парамФизлица);
	
	ИспользуетсяЕСВ = ИНАГРО_ПроведениеРасчетов.ИспользуетсяЕСВ(ПериодРегистрации);
	
	// ВТБазы
	Если Истина Тогда
		
		Если ИспользуетсяЕСВ Тогда
			
			Запрос.УстановитьПараметр("СписокДекретныеПоЕСВ",ИНАГРО_ПроведениеРасчетов.СписокДекретныеПоЕСВ());
			Запрос.УстановитьПараметр("СписокГПХПоЕСВ",ИНАГРО_ПроведениеРасчетов.СписокГПХПоЕСВ());
			
			ТекстФильтрПоПериодам = "				И	ВЫБОР КОГДА БазаИзНачислений.ВидРасчетаБазы.ЭтоБольничные // Больничные
										|			ИЛИ  БазаИзНачислений.ВидРасчетаБазы В (&СписокГПХПоЕСВ) // Оплата по договору ГПХ
										|			ИЛИ  БазаИзНачислений.ВидРасчетаБазы В (&СписокДекретныеПоЕСВ) // Декретные
										|			ИЛИ  НЕ Основной.ВидРасчета.ЕСВ // Это старый взнос
										|			ТОГДА	НАЧАЛОПЕРИОДА(БазаИзНачислений.БазовыйПериодНачало, МЕСЯЦ) = НАЧАЛОПЕРИОДА(Основной.БазовыйПериодНачало, МЕСЯЦ)
										|			    И   БазаИзНачислений.ПериодРегистрации = &парамПериодРегистрации
										|           КОГДА БазаИзНачислений.ВидРасчетаБазы.ЭтоОтпускные // Отпускные
										|               И НАЧАЛОПЕРИОДА(БазаИзНачислений.БазовыйПериодНачало, МЕСЯЦ) = &парамПериодРегистрации
										|			ТОГДА НАЧАЛОПЕРИОДА(БазаИзНачислений.БазовыйПериодНачало, МЕСЯЦ) = НАЧАЛОПЕРИОДА(Основной.БазовыйПериодНачало, МЕСЯЦ)
										|			    И   БазаИзНачислений.ПериодРегистрации = &парамПериодРегистрации
										|           КОГДА БазаИзНачислений.ВидРасчетаБазы.ЭтоОтпускные // Отпускные
										|               И БазаИзНачислений.Результат >= 0
										|			ТОГДА НАЧАЛОПЕРИОДА(БазаИзНачислений.БазовыйПериодНачало, МЕСЯЦ) = НАЧАЛОПЕРИОДА(Основной.БазовыйПериодНачало, МЕСЯЦ)
										|			    И   БазаИзНачислений.ПериодРегистрации = &парамПериодРегистрации
										|			ИНАЧЕ	((НАЧАЛОПЕРИОДА(БазаИзНачислений.БазовыйПериодНачало, МЕСЯЦ) = НАЧАЛОПЕРИОДА(Основной.БазовыйПериодНачало, МЕСЯЦ)
										|			    И   БазаИзНачислений.ПериодРегистрации = &парамПериодРегистрации
										|               И   НАЧАЛОПЕРИОДА(Основной.БазовыйПериодНачало, МЕСЯЦ) = &парамПериодРегистрации) // Начислено в текущем месяце за этот месяц
										|               ИЛИ (НАЧАЛОПЕРИОДА(БазаИзНачислений.БазовыйПериодНачало, МЕСЯЦ) < НАЧАЛОПЕРИОДА(Основной.БазовыйПериодНачало, МЕСЯЦ)
										|			    И   БазаИзНачислений.ПериодРегистрации = &парамПериодРегистрации
										|               И   НАЧАЛОПЕРИОДА(Основной.БазовыйПериодНачало, МЕСЯЦ) = &парамПериодРегистрации) // Начислено в текущем месяце за предыдущий месяц
										|               ИЛИ (НАЧАЛОПЕРИОДА(БазаИзНачислений.БазовыйПериодНачало, МЕСЯЦ) = НАЧАЛОПЕРИОДА(Основной.БазовыйПериодНачало, МЕСЯЦ)
										|			    И   БазаИзНачислений.ПериодРегистрации = &парамПериодРегистрации
										|               И   НАЧАЛОПЕРИОДА(Основной.БазовыйПериодНачало, МЕСЯЦ) = &парамПериодРегистрации)) // Начислено в предыдущем месяце за текущий месяц
										|
										|           КОНЕЦ
										|";
			
		Иначе
			
			ТекстФильтрПоПериодам = "			И	НАЧАЛОПЕРИОДА(БазаИзНачислений.БазовыйПериодНачало, МЕСЯЦ) = НАЧАЛОПЕРИОДА(Основной.БазовыйПериодНачало, МЕСЯЦ)
									|			И	БазаИзНачислений.ПериодРегистрации = &парамПериодРегистрации";	
									
		КонецЕсли;
		
		//	Описание:
		// 		Альтернатива таблице РегистрРасчета.ВзносыВФонды.БазаНачисления(
		//      так как в этом регистре нет периода действия, или он не работает.
		//
		ТекстЗапросаВТ = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ 
		|			Основной.Налог, 
		|			Основной.СтатьяНалоговойДекларации, 
		|			Основной.Сотрудник, 
		|           Основной.БазовыйПериодНачало,
		|			Основной.ДатаНачала,
		|			Основной.ВидРасчета,
		|			Основной.Результат,
		|			Основной.База,
		|			Основной.БазаВзноса,
		|			Основной.СтатьяНалоговойДекларации
		|ПОМЕСТИТЬ ВТОсновнаяТаблица
		|ИЗ РегистрРасчета.ИНАГРО_ВзносыВФонды КАК Основной
        |	ГДЕ		Основной.ВидРасчета.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаНачислений.ВзносыФОТ)
		|			И	Основной.ПериодРегистрации = &парамПериодРегистрации
		|			И	Основной.Сотрудник В (&парамСотрудники)
		|;
		|		ВЫБРАТЬ 
		|			Основной.Налог, 
		|			Основной.СтатьяНалоговойДекларации, 
		|			Основной.Сотрудник, 
		|			НАЧАЛОПЕРИОДА(Основной.БазовыйПериодНачало, МЕСЯЦ)	КАК БазовыйПериодНачало, 
		|			Основной.ДатаНачала	КАК ПериодСтавки, 
		|			Основной.ВидРасчета,
		|			ВЫБОР КОГДА Основной.Результат >= 0 ТОГДА ИСТИНА ИНАЧЕ ЛОЖЬ КОНЕЦ	КАК ЗнакСуммы, 
		|			Основной.База,
		|			Основной.БазаВзноса,
		|			Основной.Результат,
		|			БазаИзНачислений.ВидРасчетаБазы						КАК ВидРасчетаБазы, 
		|			БазаИзНачислений.ПодразделениеОрганизации,
		|			БазаИзНачислений.НоменклатурнаяГруппа,
		|			БазаИзНачислений.ОбъектСтроительства,
		|			БазаИзНачислений.ВзносыОсновногоНачисления,
		|			БазаИзНачислений.СпособОтраженияЕСВФОТ,
		|   		БазаИзНачислений.НалоговоеНазначениеДоходовИЗатрат,
		|			БазаИзНачислений.НалоговоеНазначение,
		|   		БазаИзНачислений.СчетДт,
		|   		БазаИзНачислений.СубконтоДт1,
		|   		БазаИзНачислений.СубконтоДт2,
		|   		БазаИзНачислений.СубконтоДт3,
		|			СУММА(БазаИзНачислений.Результат)		КАК РезультатБаза
		|ПОМЕСТИТЬ ВТБазы1	
		|		ИЗ ВТОсновнаяТаблица КАК Основной
		| 
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.ИНАГРО_Отражение КАК БазаИзНачислений
		|		ПО		Основной.Сотрудник = БазаИзНачислений.Сотрудник  
		|"+ТекстФильтрПоПериодам+"
		|  	
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.ИНАГРО_ВзносыВФонды.БазовыеВидыРасчета КАК БазовыеВидыРасчета
		|		ПО		Основной.ВидРасчета = БазовыеВидыРасчета.Ссылка  
		|			И	БазаИзНачислений.ВидРасчетаБазы = БазовыеВидыРасчета.ВидРасчета
		| 
		|			И   БазаИзНачислений.Результат <> 0	
		| 
		|		СГРУППИРОВАТЬ ПО 
		|			Основной.Налог, 
		|			Основной.СтатьяНалоговойДекларации, 
		|			Основной.Сотрудник, 
		|			НАЧАЛОПЕРИОДА(Основной.БазовыйПериодНачало, МЕСЯЦ), 
		|			Основной.ДатаНачала, 
		|			Основной.ВидРасчета,
		|			ВЫБОР КОГДА Основной.Результат >= 0 ТОГДА ИСТИНА ИНАЧЕ ЛОЖЬ КОНЕЦ, 
		|			Основной.База,
		|			Основной.БазаВзноса,
		|			Основной.Результат,
		|			БазаИзНачислений.ВидРасчетаБазы,
		|			БазаИзНачислений.ПодразделениеОрганизации,
		|			БазаИзНачислений.НоменклатурнаяГруппа,
		|			БазаИзНачислений.ОбъектСтроительства,
		|			БазаИзНачислений.ВзносыОсновногоНачисления,
		|			БазаИзНачислений.СпособОтраженияЕСВФОТ,
		|			БазаИзНачислений.НалоговоеНазначениеДоходовИЗатрат, 
		|			БазаИзНачислений.НалоговоеНазначение, 
		|   		БазаИзНачислений.СчетДт,
		|   		БазаИзНачислений.СубконтоДт1,
		|   		БазаИзНачислений.СубконтоДт2,
		|   		БазаИзНачислений.СубконтоДт3
		|;
		|
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ 
		|	Основной.Налог, 
		|	Основной.СтатьяНалоговойДекларации, 
		|	Основной.Сотрудник, 
		|	Основной.БазовыйПериодНачало, 
		|	Основной.ПериодСтавки, 
		|	Основной.ВидРасчета,
		|	Основной.ЗнакСуммы, 
		|	Основной.База,
		|	Основной.БазаВзноса,
		|	Основной.Результат,
		|	Основной.ВидРасчетаБазы, 
		|	Основной.ПодразделениеОрганизации, 
		|	Основной.НоменклатурнаяГруппа,
		|	Основной.ОбъектСтроительства,
		|	Основной.ВзносыОсновногоНачисления,
		|	Основной.СпособОтраженияЕСВФОТ,
	   	|	Основной.НалоговоеНазначениеДоходовИЗатрат,
	   	|	Основной.НалоговоеНазначение,
	   	|	Основной.СчетДт,
	   	|	Основной.СубконтоДт1,
	   	|	Основной.СубконтоДт2,
	   	|	Основной.СубконтоДт3,
		|	Основной.РезультатБаза 
		|ПОМЕСТИТЬ ВТБазы
		|ИЗ ВТБазы1 КАК Основной
        |
		|ОБЪЕДИНИТЬ ВСЕ
        |
		|ВЫБРАТЬ
		|	Основной.Налог,
		|	Основной.СтатьяНалоговойДекларации,
		|	Основной.Сотрудник, 
		|	НАЧАЛОПЕРИОДА(Основной.БазовыйПериодНачало, МЕСЯЦ)	КАК БазовыйПериодНачало,
		|	Основной.ДатаНачала	КАК ПериодСтавки,
		|	Основной.ВидРасчета,
		|	ВЫБОР КОГДА Основной.Результат >= 0 ТОГДА ИСТИНА ИНАЧЕ ЛОЖЬ КОНЕЦ, 
		|	Основной.База,
		|	Основной.БазаВзноса,
		|	Основной.Результат,
        |   NULL,
        |   РаботникиОрганизаций.ПодразделениеОрганизации,
        |   NULL,
		|	NULL,
        |   NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	Основной.Результат
	    |
		|ИЗ ВТОсновнаяТаблица КАК Основной		
		|   ЛЕВОЕ СОЕДИНЕНИЕ
		|   РегистрСведений.ИНАГРО_РаботникиОрганизаций.СрезПоследних(КОНЕЦПЕРИОДА(&парамПериодРегистрации,МЕСЯЦ),Сотрудник В (&парамСотрудники)) КАК РаботникиОрганизаций
		|   ПО Основной.Сотрудник = РаботникиОрганизаций.Сотрудник
		|   ЛЕВОЕ СОЕДИНЕНИЕ
		|   ВТБазы1 КАК Базы1
		|   ПО Основной.Сотрудник = Базы1.Сотрудник
		|    И Основной.ВидРасчета = Базы1.ВидРасчета
		|    И НАЧАЛОПЕРИОДА(Основной.БазовыйПериодНачало, МЕСЯЦ) = Базы1.БазовыйПериодНачало
		|ГДЕ Базы1.Сотрудник ЕСТЬ NULL	
		| ";
		
		Запрос.Текст = ТекстЗапросаВТ;
		Запрос.Выполнить();
		ТекстЗапросаВТБазы = "ВТБазы";
		
	КонецЕсли;
	
	Запрос.Текст = "ВЫБРАТЬ * ИЗ ВТБазы";
	
	// ВТБазыСИтогом
	Если Истина Тогда
		//	Описание:
		// 		Итоги по базе ВТБазы
		//
		ТекстЗапросаВТ = "
		|		ВЫБРАТЬ 
		|			Основной.Налог, 
		|			Основной.СтатьяНалоговойДекларации, 
		|			Основной.Сотрудник, 
		|			Основной.БазовыйПериодНачало, 
		|			Основной.ПериодСтавки, 
		|			Основной.ВидРасчета,
		|			Основной.ЗнакСуммы, 
		|			СУММА(Основной.РезультатБаза) КАК РезультатБазаИтог 
		|ПОМЕСТИТЬ ВТБазыСИтогом	
		|		ИЗ ВТБазы КАК Основной
		|		СГРУППИРОВАТЬ ПО 
		|			Основной.Налог, 
		|			Основной.СтатьяНалоговойДекларации, 
		|			Основной.Сотрудник, 
		|			Основной.БазовыйПериодНачало, 
		|			Основной.ПериодСтавки, 
		|			Основной.ВидРасчета,
		|			Основной.ЗнакСуммы
		| ";
		
		Запрос.Текст = ТекстЗапросаВТ;
		Запрос.Выполнить();
		ТекстЗапросаВТБазы = "ВТБазыСИтогом";
		
	КонецЕсли;
	
	Запрос.Текст = "ВЫБРАТЬ * ИЗ ВТБазыСИтогом";
	
	//	ВТПроводки
	Если Истина Тогда
		//	Описание:
		// 		РегистрРасчета.ВзносыВФонды + Проводки Кт.
		//		
		ТекстПараметра = "
		|			ВЫБОР	КОГДА		ПроводкиВзносов.СчетДт <> ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)
		|						ТОГДА	ПроводкиВзносов.ИмяПараметра 		 
		|					КОГДА		ПроводкиНачислений.ВзносыОсновногоНачисления
		|								И ПроводкиНачислений.СпособОтраженияЕСВФОТ <> ЗНАЧЕНИЕ(Справочник.СпособыОтраженияЗарплатыВРеглУчете.ПустаяСсылка)
		|						ТОГДА	ПроводкиНачислений.СпособОтраженияЕСВФОТ.ИмяПараметра
		|					КОГДА		ЕСТЬNULL(ПроводкиНачислений.ВзносыОсновногоНачисления, Истина)
		|						ТОГДА	ВЫБОР	КОГДА УчетОсновногоЗаработка.СпособОтраженияВБухучете ЕСТЬ НЕ NULL
		|                                           И УчетОсновногоЗаработка.СпособОтраженияВБухучете.СчетДт <> ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)
		|										ТОГДА	УчетОсновногоЗаработка.СпособОтраженияВБухучете.ИмяПараметра 		 
		|									ИНАЧЕ	ОтражениеНачисленийПоУмолчанию.ИмяПараметра 		 
		|                           КОНЕЦ
		|					ИНАЧЕ		ПроводкиНачислений.ИмяПараметра		 
		|			КОНЕЦ ";
		
		ТекстЗапросаВТ = " 
		|		ВЫБРАТЬ
		|			ПроводкиНачислений.Сотрудник					КАК Сотрудник,
		|			ПроводкиНачислений.ПодразделениеОрганизации		КАК ПодразделениеОрганизации,
		|			ПроводкиНачислений.НоменклатурнаяГруппа			КАК НоменклатурнаяГруппа,
		|			ПроводкиНачислений.ОбъектСтроительства			КАК ОбъектСтроительства,
		|			ПроводкиНачислений.Налог						КАК Налог,
		|			ПроводкиНачислений.СтатьяНалоговойДекларации	КАК СтатьяНалоговойДекларации,
		|			ПроводкиНачислений.ВидРасчета					КАК ВидРасчета,
		|			ПроводкиНачислений.ЗнакСуммы			КАК ЗнакСуммы, 
		|			ПроводкиНачислений.ВидРасчетаБазы				КАК ВидРасчетаБазы,
		|			ПроводкиНачислений.БазовыйПериодНачало			КАК БазовыйПериодНачало,
		|			ПроводкиНачислений.ПериодСтавки, 
		|			ПроводкиНачислений.Результат				КАК СтатьяНДРезультат,
		|           ПроводкиНачислений.ВзносыОсновногоНачисления,
		|   		" + СтрЗаменить(ТекстПараметра,"ИмяПараметра","НалоговоеНазначениеДоходовИЗатрат ")+"	КАК НалоговоеНазначениеДоходовИЗатрат,
		|   		" + СтрЗаменить(ТекстПараметра,"ИмяПараметра","НалоговоеНазначение ")+"	КАК НалоговоеНазначение,
		|           " + СтрЗаменить(ТекстПараметра,"ИмяПараметра","СчетДт")+"          		КАК СчетДт,
		|   		" + СтрЗаменить(ТекстПараметра,"ИмяПараметра","СубконтоДт1")+"			КАК СубконтоДт1,
		|   		" + СтрЗаменить(ТекстПараметра,"ИмяПараметра","СубконтоДт2")+"			КАК СубконтоДт2,
		|   		" + СтрЗаменить(ТекстПараметра,"ИмяПараметра","СубконтоДт3")+"			КАК СубконтоДт3,
		|    
		|			ПроводкиВзносов.СчетКт					КАК СчетКт,
		|			ПроводкиВзносов.СубконтоКт1				КАК СубконтоКт1,
		|			ПроводкиВзносов.СубконтоКт2				КАК СубконтоКт2,
		|			ПроводкиВзносов.СубконтоКт3				КАК СубконтоКт3,
		|    
		|			СтатьиЗатратВзносовФОТ.СтатьяЗатрат 			КАК СтатьяЗатрат,
		|           
		|			ВЫБОР	КОГДА 	ЕСТЬNULL(ПроводкиНачислений.Результат, 0) = 0  
		|						ИЛИ	ЕСТЬNULL(ПроводкиНачислений.РезультатБаза, 0) = 0 
		|						ИЛИ	ЕСТЬNULL(БазыСИтогом.РезультатБазаИтог, 0) = 0 
		|					ТОГДА 0 
		|					КОГДА 	ЕСТЬNULL(ПроводкиНачислений.Результат, 0) <> 0  
		|						И	ЕСТЬNULL(ПроводкиНачислений.РезультатБаза, 0) = 0 
		|						И	ЕСТЬNULL(БазыСИтогом.РезультатБазаИтог, 0) = 0 
		|					ТОГДА ЕСТЬNULL(ПроводкиНачислений.Результат, 0) 
		|					ИНАЧЕ 	  ПроводкиНачислений.Результат * ПроводкиНачислений.РезультатБаза / БазыСИтогом.РезультатБазаИтог			
		|	    	КОНЕЦ									КАК Результат
		|
		|ПОМЕСТИТЬ ВТПроводки	
		|		ИЗ	ВТБазы КАК ПроводкиНачислений
		|
		|	
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТБазыСИтогом КАК БазыСИтогом
		|		ПО		ПроводкиНачислений.Налог = БазыСИтогом.Налог
		|			И	ПроводкиНачислений.СтатьяНалоговойДекларации  = БазыСИтогом.СтатьяНалоговойДекларации 
		|			И	ПроводкиНачислений.Сотрудник = БазыСИтогом.Сотрудник 
		|			И	ПроводкиНачислений.БазовыйПериодНачало = БазыСИтогом.БазовыйПериодНачало 
		|			И	ПроводкиНачислений.ПериодСтавки = БазыСИтогом.ПериодСтавки 
		|			И	ПроводкиНачислений.ВидРасчета = БазыСИтогом.ВидРасчета
		|			И	ПроводкиНачислений.ЗнакСуммы = БазыСИтогом.ЗнакСуммы
		|	
		|		ЛЕВОЕ СОЕДИНЕНИЕ(		
		|			ВЫБРАТЬ
		|				ПлановеОклады.Сотрудник,
		|				Плановые.СпособОтраженияВБухучете
		|			ИЗ(
		|			ВЫБРАТЬ
		|					Плановые.Сотрудник,
		|					МАКСИМУМ(Плановые.Период) КАК ПЕРИОД
		|				ИЗ РегистрСведений.ИНАГРО_РаботникиОрганизаций КАК Плановые
		|				ГДЕ Плановые.ЗанимаемыхСтавок >0
		|					И	Плановые.Сотрудник В (&парамСотрудники)
		|					И	Плановые.ПЕРИОД <= &парамПериодРегистрацииКонец
		|				СГРУППИРОВАТЬ ПО
		|					Плановые.Сотрудник
		|			) КАК ПлановеОклады
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИНАГРО_РаботникиОрганизаций КАК Плановые
		|			ПО 		ПлановеОклады.Сотрудник = Плановые.Сотрудник
		|				И	ПлановеОклады.Период = Плановые.Период		
		|		)КАК УчетОсновногоЗаработка	
		|		ПО		УчетОсновногоЗаработка.Сотрудник	= ПроводкиНачислений.Сотрудник	
		|	
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СпособыОтраженияЗарплатыВРеглУчете КАК ПроводкиВзносов
		|		ПО   ПроводкиНачислений.ВидРасчета.СпособОтраженияВБухучете = ПроводкиВзносов.Ссылка 
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатьиЗатратПоВзносамФОТ.СрезПоследних(&парамПериодРегистрации) КАК СтатьиЗатратВзносовФОТ
		|		ПО		СтатьиЗатратВзносовФОТ.Налог = ПроводкиНачислений.Налог 
		|		И СтатьиЗатратВзносовФОТ.СчетЗатрат = 	
		|			ВЫБОР	КОГДА	ПроводкиВзносов.СчетДт <> ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)
		|						ТОГДА	ПроводкиВзносов.СчетДт 		 
		|					КОГДА		ПроводкиНачислений.ВзносыОсновногоНачисления
		|								И ПроводкиНачислений.СпособОтраженияЕСВФОТ <> ЗНАЧЕНИЕ(Справочник.СпособыОтраженияЗарплатыВРеглУчете.ПустаяСсылка)
		|						ТОГДА	ПроводкиНачислений.СпособОтраженияЕСВФОТ.СчетДт
		|					КОГДА		ЕСТЬNULL(ПроводкиНачислений.ВзносыОсновногоНачисления, Истина)
		|						ТОГДА	УчетОсновногоЗаработка.СпособОтраженияВБухучете.СчетДт
		|					ИНАЧЕ		ПроводкиНачислений.СчетДт		 
		|			КОНЕЦ
		|	// способ отражения по умолчанию		
		|	ЛЕВОЕ СОЕДИНЕНИЕ (	ВЫБРАТЬ * ИЗ Справочник.СпособыОтраженияЗарплатыВРеглУчете 
		|						ГДЕ Ссылка = ЗНАЧЕНИЕ(Справочник.СпособыОтраженияЗарплатыВРеглУчете.ОтражениеНачисленийПоУмолчанию)
		|					) КАК ОтражениеНачисленийПоУмолчанию
		|	ПО ИСТИНА
		|";
		
		Запрос.Текст = ТекстЗапросаВТ;
		Запрос.Выполнить();
		ТекстЗапросаВТПроводки = "ВТПроводки";
		
	КонецЕсли;
	
	Запрос.Текст = "ВЫБРАТЬ * ИЗ ВТПроводки";
	
	
	//	ВТПроводкиСуммы
	Если Истина Тогда
		//	Описание:
		// 		РегистрРасчета.ВзносыВФонды + Проводки Кт.
		//		
		ТекстЗапросаВТ = " 
		|		ВЫБРАТЬ
		|			Основной.Сотрудник,
		|			Основной.ПодразделениеОрганизации	КАК ПодразделениеОрганизации,
		|			Основной.НоменклатурнаяГруппа,
		|			Основной.ОбъектСтроительства,
		|			Основной.Налог,
		|			Основной.СтатьяНалоговойДекларации,
		|			Основной.ВидРасчета,
		|			Основной.ЗнакСуммы			КАК ЗнакСуммы, 
		|			Основной.ВидРасчетаБазы				КАК ВидРасчетаБазы,
		|			Основной.БазовыйПериодНачало,
		|			Основной.ПериодСтавки, 
		|			Основной.Результат,
		|           Основной.ВзносыОсновногоНачисления,
		|   		Основной.НалоговоеНазначениеДоходовИЗатрат,
		|   		Основной.НалоговоеНазначение,
		|   		Основной.СчетДт,
		|   		Основной.СубконтоДт1,
		|   		Основной.СубконтоДт2,
		|   		Основной.СубконтоДт3,
		|    
		|			Основной.СчетКт,
		|			Основной.СубконтоКт1,
		|			Основной.СубконтоКт2,
		|			Основной.СубконтоКт3,
		|    
		|			Основной.СтатьяЗатрат,
		|    
		|			0									КАК РезультатНалог,
		|			Основной.Результат					КАК Результат
		|
		|ПОМЕСТИТЬ ВТПроводкиСуммы	
		|		ИЗ	"+ТекстЗапросаВТПроводки+" КАК Основной
		|
		|       ОБЪЕДИНИТЬ ВСЕ
		|		ВЫБРАТЬ
		|			Основной.Сотрудник,
		|			Основной.ПодразделениеОрганизации,
		|			Основной.НоменклатурнаяГруппа,
		|			Основной.ОбъектСтроительства,
		|			Основной.Налог,
		|			Основной.СтатьяНалоговойДекларации,
		|			Основной.ВидРасчета,
		|			Основной.ЗнакСуммы			КАК ЗнакСуммы, 
		|           // нам нужны итоги по налогу без разреза на базовые виды расчета
		|			NULL								КАК ВидРасчетаБазы,
		|			Основной.БазовыйПериодНачало,
		|			Основной.ПериодСтавки, 
		|			Основной.Результат,
		|           NULL,
		|   		Основной.НалоговоеНазначениеДоходовИЗатрат,
		|   		Основной.НалоговоеНазначение,
		|   		Основной.СчетДт,
		|   		Основной.СубконтоДт1,
		|   		Основной.СубконтоДт2,
		|   		Основной.СубконтоДт3,
		|    
		|			Основной.СчетКт,
		|			Основной.СубконтоКт1,
		|			Основной.СубконтоКт2,
		|			Основной.СубконтоКт3,
		|    
		|			Основной.СтатьяЗатрат,
		|    
		|			СУММА(Основной.Результат)			КАК РезультатНалог,
		|			0									КАК Результат
		|		ИЗ	"+ТекстЗапросаВТПроводки+" КАК Основной
		|
		|		СГРУППИРОВАТЬ ПО
		|			Основной.Сотрудник,
		|			Основной.ПодразделениеОрганизации,
		|			Основной.НоменклатурнаяГруппа,
		|			Основной.ОбъектСтроительства,
		|			Основной.Налог,
		|			Основной.СтатьяНалоговойДекларации,
		|			Основной.ВидРасчета,
		|			Основной.ЗнакСуммы,
		|
		|			Основной.БазовыйПериодНачало,
		|			Основной.ПериодСтавки, 
		|			Основной.Результат,
		|           Основной.ВзносыОсновногоНачисления,

		|   		Основной.НалоговоеНазначениеДоходовИЗатрат,
		|   		Основной.НалоговоеНазначение,
		|   		Основной.СчетДт,
		|   		Основной.СубконтоДт1,
		|   		Основной.СубконтоДт2,
		|   		Основной.СубконтоДт3,
		|    
		|			Основной.СчетКт,
		|			Основной.СубконтоКт1,
		|			Основной.СубконтоКт2,
		|			Основной.СубконтоКт3,
		|    
		|			Основной.СтатьяЗатрат
		|";
		Запрос.Текст = ТекстЗапросаВТ;
		Запрос.Выполнить();
		ТекстЗапросаВТПроводкиСуммы = "ВТПроводкиСуммы";
	КонецЕсли;
	Запрос.Текст = "ВЫБРАТЬ * ИЗ ВТПроводкиСуммы";
	
	ТекстЗапроса = " 
	|ВЫБРАТЬ
	|	Основной.Сотрудник					КАК Сотрудник,
	|	Основной.ПодразделениеОрганизации	КАК ПодразделениеОрганизации,
	|	Основной.НоменклатурнаяГруппа		КАК НоменклатурнаяГруппа,
	|	Основной.ОбъектСтроительства		КАК ОбъектСтроительства,
	|	Основной.Налог						КАК Налог,
	|	Основной.СтатьяНалоговойДекларации	КАК СтатьяНалоговойДекларации,
	|	Основной.ВидРасчета					КАК ВидРасчета,
	|	Основной.ЗнакСуммы			КАК ЗнакСуммы, 
	|	Основной.ВидРасчетаБазы				КАК ВидРасчетаБазы,
	|	Основной.БазовыйПериодНачало		КАК БазовыйПериодНачало,
	|	Основной.ПериодСтавки, 
	|
	|	Основной.НалоговоеНазначениеДоходовИЗатрат,
	|	Основной.НалоговоеНазначение,
	|	Основной.СчетДт,
	|	Основной.СубконтоДт1,
	|	Основной.СубконтоДт2,
	|	Основной.СубконтоДт3,
	|	Основной.СчетКт,
	|	Основной.СубконтоКт1,
	|	Основной.СубконтоКт2,
	|	Основной.СубконтоКт3,
	|    
	|	Основной.СтатьяЗатрат,
	|	Основной.ВзносыОсновногоНачисления,
	|	
	|	Основной.РезультатНалог							КАК РезультатНалог,// нужен чтобы получить правильную сумму по статье налоговой декларации
	|	Основной.Результат								КАК РезультатТочный,
	|	ВЫБОР КОГДА ВЫРАЗИТЬ(Основной.Результат КАК ЧИСЛО(18, 2)) > Основной.Результат
	|	      ТОГДА ВЫРАЗИТЬ(Основной.Результат КАК ЧИСЛО(18, 2)) - Основной.Результат
	|	      ИНАЧЕ Основной.Результат - ВЫРАЗИТЬ(Основной.Результат КАК ЧИСЛО(18, 2))
	|	      КОНЕЦ										КАК Дельта,
	|	ВЫРАЗИТЬ( Основной.Результат КАК ЧИСЛО (18,2))	КАК Результат,
	|	
	|	// --- ДЕБЕТ	
	|	ЕСТЬNULL(ВидыСубконтоСтатьяЗатратДт.НомерСтроки, 0)  КАК НомерСубконтоСтатьяЗатратДт,
	|	ЕСТЬNULL(ВидыСубконтоПодразделенияДт.НомерСтроки, 0)  КАК НомерСубконтоПодразделенияДт,
	|	ЕСТЬNULL(ВидыСубконтоСтатьиНалоговыхДекларацийДт.НомерСтроки, 0)  КАК НомерСубконтоСтатьиНалоговыхДекларацийДт,
	|	ЕСТЬNULL(ВидыСубконтоНалогиДт.НомерСтроки, 0)  КАК НомерСубконтоНалогиДт,
	|    
	|	// --- КРЕДИТ	
	|	ЕСТЬNULL(ВидыСубконтоСтатьиНалоговыхДекларацийКт.НомерСтроки, 0)  КАК НомерСубконтоСтатьиНалоговыхДекларацийКт,
	|	ЕСТЬNULL(ВидыСубконтоНалогиКт.НомерСтроки, 0)  КАК НомерСубконтоНалогиКт
	|
	|ИЗ	"+ТекстЗапросаВТПроводкиСуммы+" КАК Основной
	|
	|
	|	
	|// --- ДЕБЕТ	
	|ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Хозрасчетный.ВидыСубконто КАК ВидыСубконтоСтатьяЗатратДт
	|ПО		Основной.СчетДт <> ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)
	|	И	Основной.СчетДт = ВидыСубконтоСтатьяЗатратДт.Ссылка 
	|	И	ВидыСубконтоСтатьяЗатратДт.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат)
	|	
	|ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Хозрасчетный.ВидыСубконто КАК ВидыСубконтоПодразделенияДт
	|ПО		Основной.СчетДт <> ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)
	|	И	Основной.СчетДт = ВидыСубконтоПодразделенияДт.Ссылка 
	|	И	ВидыСубконтоПодразделенияДт.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Подразделения)
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Хозрасчетный.ВидыСубконто КАК ВидыСубконтоСтатьиНалоговыхДекларацийДт
	|ПО		Основной.СчетДт <> ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)
	|	И	Основной.СчетДт = ВидыСубконтоСтатьиНалоговыхДекларацийДт.Ссылка 
	|	И	ВидыСубконтоСтатьиНалоговыхДекларацийДт.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиНалоговыхДеклараций)
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Хозрасчетный.ВидыСубконто КАК ВидыСубконтоНалогиДт
	|ПО		Основной.СчетДт <> ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)
	|	И	Основной.СчетДт = ВидыСубконтоНалогиДт.Ссылка 
	|	И	ВидыСубконтоНалогиДт.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Налоги)
	|	
	|// --- КРЕДИТ	
	|ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Хозрасчетный.ВидыСубконто КАК ВидыСубконтоСтатьиНалоговыхДекларацийКт
	|ПО		Основной.СчетКт <> ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)
	|	И	Основной.СчетКт = ВидыСубконтоСтатьиНалоговыхДекларацийКт.Ссылка 
	|	И	ВидыСубконтоСтатьиНалоговыхДекларацийКт.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиНалоговыхДеклараций)
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Хозрасчетный.ВидыСубконто КАК ВидыСубконтоНалогиКт
	|ПО		Основной.СчетКт <> ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка) 
	|	И	Основной.СчетКт = ВидыСубконтоНалогиКт.Ссылка 
	|	И	ВидыСубконтоНалогиКт.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Налоги)
	|	
	|    
	|УПОРЯДОЧИТЬ ПО    
	|	Сотрудник,
	|	СтатьяНалоговойДекларации,
	|	ЗнакСуммы,
	|	Дельта
	|    
	|ИТОГИ    
	|	СУММА(РезультатНалог), 
	|	СУММА(Результат) 
	|ПО
	|	СтатьяНалоговойДекларации,
	|	ЗнакСуммы,
	|	Сотрудник  
	|";
	
	Запрос.Текст = ТекстЗапроса;
	
	ВыборкаСтатьяНалоговойДекларации = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаСтатьяНалоговойДекларации.Следующий() Цикл
		
		ВыборкаЗнакСуммы = ВыборкаСтатьяНалоговойДекларации.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаЗнакСуммы.Следующий() Цикл
						
			ВыборкаСотрудники = ВыборкаЗнакСуммы.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаСотрудники.Следующий() Цикл
				
				Знак = ?(ВыборкаСотрудники.ЗнакСуммы, 1, -1);
				Дельта = Окр(ВыборкаСотрудники.РезультатНалог, 2) - ВыборкаСотрудники.Результат;
				
				Выборка = ВыборкаСотрудники.Выбрать(ОбходРезультатаЗапроса.Прямой);
				Пока Выборка.Следующий() Цикл
					
					Если Выборка.ВидРасчетаБазы = NULL И Выборка.Результат = 0 Тогда
						Продолжить;
					ИначеЕсли Выборка.ВидРасчетаБазы = NULL Тогда
						ЭтоБольничные = Ложь;
					Иначе
						ЭтоБольничные = Выборка.ВидРасчетаБазы.ЭтоБольничные;
					КонецЕсли;
					
					Если Дельта*Знак > 0 Тогда
						Копейка = 0.01*Знак;
					ИначеЕсли Дельта = 0 Тогда
						Копейка = 0;
					Иначе
						Копейка = -0.01*Знак;
					КонецЕсли;
					СуммаДвижения = Выборка.Результат + Копейка;
					Дельта = Дельта - Копейка;
					
					// Добавим строку
					СтрокаДанных = ВзносыФОТПроводки.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаДанных, Выборка);
					СтрокаДанных.Результат = СуммаДвижения;
					
					АвтозаполнениеСубконто(Выборка, СтрокаДанных, "Дт" , "Подразделения");
					АвтозаполнениеСубконто(Выборка, СтрокаДанных, "Дт" , "СтатьяЗатрат");
					АвтозаполнениеСубконто(Выборка, СтрокаДанных, "Дт" , "Налоги");
					АвтозаполнениеСубконто(Выборка, СтрокаДанных, "Дт" , "СтатьиНалоговыхДеклараций");
					
					АвтозаполнениеСубконто(Выборка, СтрокаДанных, "Кт" , "Налоги");
					АвтозаполнениеСубконто(Выборка, СтрокаДанных, "Кт" , "СтатьиНалоговыхДеклараций");
										
					Если НЕ ЗначениеЗаполнено(Выборка.СтатьяЗатрат)Тогда
						Если ЭтоБольничные И ЗначениеЗаполнено(Выборка.СчетДт) Тогда
							// Для больничных по умолчанию считаем, что статья затрат начислений и взносов совпадает
							// Поэтому предупреждение выдаем только если статья затрат не заполнена (или отсутствует) и у начисления.
							Если ЗначениеЗаполнено(Выборка.НомерСубконтоСтатьяЗатратДт) Тогда
								Субконто = Выборка["СубконтоДт" + Выборка.НомерСубконтоСтатьяЗатратДт ];
								Если НЕ ЗначениеЗаполнено(Субконто) Тогда
									ТекстСообщения = НСтр("ru='Не определена статья затрат взносов ФОТ для счета Дт ';uk='Не визначена стаття затрат внесків ФОП для рахунку ДТ '") + Строка(Выборка.СчетДт.Код)+ НСтр("ru=', проверьте настройки в регистре ""Статьи затрат по взносам ФОТ""!';uk=', перевірте налаштування в регістрі ""Статті витрат за внесками ФОП""!'");
									ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
								КонецЕсли;                                                                                                                                        
							Иначе
								ТекстСообщения = НСтр("ru='Не определена статья затрат взносов ФОТ для счета Дт ';uk='Не визначена стаття затрат внесків ФОП для рахунку ДТ '") + Строка(Выборка.СчетДт.Код)+ НСтр("ru=', проверьте настройки в регистре ""Статьи затрат по взносам ФОТ""!';uk=', перевірте налаштування в регістрі ""Статті витрат за внесками ФОП""!'");
								ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
							КонецЕсли;	
						ИначеЕсли Выборка.ВидРасчета = ПланыВидовРасчета.ИНАГРО_ВзносыВФонды.ЕСВФОТДекретные Тогда
							// Декретные за счет ФСС, проверять не надо
						ИначеЕсли ЗначениеЗаполнено(Выборка.СчетДт) Тогда
							ТекстСообщения = НСтр("ru='Не определена статья затрат взносов ФОТ для счета Дт ';uk='Не визначена стаття затрат внесків ФОП для рахунку ДТ '") + Строка(Выборка.СчетДт.Код)+ НСтр("ru=', проверьте настройки в регистре ""Статьи затрат по взносам ФОТ""!';uk=', перевірте налаштування в регістрі ""Статті витрат за внесками ФОП""!'");
							ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
						КонецЕсли;
					КонецЕсли;
					
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	ВзносыФОТПроводки.Сортировать("Сотрудник, Налог, БазовыйПериодНачало, ВидРасчетаБазы");
	
КонецПроцедуры  // РассчитатьВзносы()

// Производится расчет.
//
Процедура РассчитатьНДФЛПроводки( Сотрудники = Неопределено, КомментироватьРасчет = Ложь ) Экспорт
	
	Отказ = Ложь;
	
	// Перечитаем объект и соберем данные для заполнения наборов записей регистров
	НачатьТранзакцию();
		Прочитать();
		ВыборкаПоШапкеДокумента = СформироватьЗапросПоШапке().Выбрать();
		// позиционируем выборку
		ВыборкаПоШапкеДокумента.Следующий();
		ВыборкаПоНачислениям = СформироватьЗапросПоНачислениям( Сотрудники).Выбрать();
		ВыборкаПоВзносам = СформироватьЗапросПоВзносы("Взносы", Сотрудники).Выбрать();
		ВыборкаПоНДФЛ = СформироватьЗапросПоНДФЛ(Сотрудники).Выбрать();
	ЗафиксироватьТранзакцию();
	
	// Создадим рабочие наборы записей
	НаборОсновныеНачисления = РегистрыРасчета.ИНАГРО_Начисления.СоздатьНаборЗаписей();
	НаборОсновныеНачисления.Отбор.Регистратор.Значение = Ссылка;
	Пока ВыборкаПоНачислениям.Следующий() Цикл
		
		ПроверитьЗаполнениеСтрокиНачисления(ВыборкаПоНачислениям, Отказ);
		Если НЕ Отказ Тогда
			
			// Заполним записи в наборах записей регистров
			ДобавитьСтрокуНачислений(ВыборкаПоНачислениям, НаборОсновныеНачисления);
			
		КонецЕсли;
	КонецЦикла;
	НаборОсновныеНачисления.Записать();
	
	НаборВзносыВФонды = РегистрыРасчета.ИНАГРО_ВзносыВФонды.СоздатьНаборЗаписей();
	НаборВзносыВФонды.Отбор.Регистратор.Значение = Ссылка;
	Пока ВыборкаПоВзносам.Следующий() Цикл
		
		ПроверитьЗаполнениеСтрокиВзносы(ВыборкаПоВзносам, Отказ);
		Если НЕ Отказ Тогда
			
			// Заполним записи в наборах записей регистров
			ДобавитьСтрокуВзносы(ВыборкаПоВзносам, НаборВзносыВФонды);

		КонецЕсли;
	КонецЦикла;
	НаборВзносыВФонды.Записать();
	
	НаборНДФЛ = РегистрыНакопления.ВзаиморасчетыПоНДФЛ.СоздатьНаборЗаписей();
	НаборНДФЛ.Отбор.Регистратор.Значение = Ссылка;
	Пока ВыборкаПоНДФЛ.Следующий() Цикл
		ПроверитьЗаполнениеСтрокиНДФЛ(ВыборкаПоНДФЛ, Отказ);
		Если НЕ Отказ Тогда
			
			// Заполним записи в наборах записей регистров
			ДобавитьСтрокуНДФЛ(ВыборкаПоНДФЛ, НаборНДФЛ);

		КонецЕсли;
	КонецЦикла;
	НаборНДФЛ.Записать();
 	
	НаборВзаиморасчеты = РегистрыНакопления.ВзаиморасчетыССотрудниками.СоздатьНаборЗаписей();
	НаборВзаиморасчеты.Отбор.Регистратор.Значение = Ссылка;
	СформироватьВзаиморасчетыСРаботниками(Сотрудники, НаборВзаиморасчеты );
	НаборВзаиморасчеты.Записать();
	
	Если Отказ Тогда
		
		НаборОсновныеНачисления.Очистить();
		НаборОсновныеНачисления.Записать();
		
		НаборВзносыВФонды.Очистить();
		НаборВзносыВФонды.Записать();
		
		НаборНДФЛ.Очистить();
		НаборНДФЛ.Записать();
		
		НаборВзаиморасчеты.Очистить();
		НаборВзаиморасчеты.Записать();
		
		Возврат;
		
	КонецЕсли;
	
	РассчитатьЗаписиНДФЛПроводки(Сотрудники, КомментироватьРасчет );
	
	// Удаляем движения
	НаборОсновныеНачисления.Очистить();
	НаборОсновныеНачисления.Записать();
	
	НаборВзносыВФонды.Очистить();
	НаборВзносыВФонды.Записать();
	
	НаборНДФЛ.Очистить();
	НаборНДФЛ.Записать();
	
	НаборВзаиморасчеты.Очистить();
	НаборВзаиморасчеты.Записать();
	
	Записать();
	
КонецПроцедуры  // РассчитатьНДФЛПроводки

// Производится расчет.
//
Процедура РассчитатьЗаписиНДФЛПроводки( Сотрудники = Неопределено, КомментироватьРасчет = Ложь ) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("парамПериодРегистрации"		, ПериодРегистрации);
	Запрос.УстановитьПараметр("парамПериодРегистрацииКонец"	, КонецМесяца(ПериодРегистрации));
	Запрос.УстановитьПараметр("парамСотрудники"				, Сотрудники);
	Запрос.УстановитьПараметр("парамПустойСотрудник"		, Справочники.Сотрудники.ПустаяСсылка());
	Запрос.УстановитьПараметр("парамОрганизация"			, Организация);
	
	//	ВТПроводки
	Если Истина Тогда
		//	Описание:
		// 		РегистрРасчета.ВзносыВФонды + Проводки Кт.
		//		
		ТекстЗапросаВТ = " 
		|		ВЫБРАТЬ
		|			Основной.Контрагент.ФизическоеЛицо КАК ФизическоеЛицо,
		|			Основной.Контрагент КАК Сотрудник,
		|			Основной.ДоходНДФЛ,
		|			НАЧАЛОПЕРИОДА(Основной.НалоговыйПериод, МЕСЯЦ) КАК БазовыйПериодНачало,// должны всегда совпадать с .Период
		|			NULL КАК СчетДт,
		|			Основной.ДоходНДФЛ.СпособОтраженияВРеглУчете.СчетДт				КАК НДФЛСчетДт,
		|			Основной.ДоходНДФЛ.СпособОтраженияВРеглУчете.СчетКт				КАК СчетКт,
		|			Основной.ДоходНДФЛ.СпособОтраженияВРеглУчете.СубконтоКт1			КАК СубконтоКт1,
		|			Основной.ДоходНДФЛ.СпособОтраженияВРеглУчете.СубконтоКт2			КАК СубконтоКт2,
		|			Основной.ДоходНДФЛ.СпособОтраженияВРеглУчете.СубконтоКт3			КАК СубконтоКт3,
		|			NULL    КАК НалоговоеНазначениеДоходовИЗатрат,
		|			NULL    КАК НалоговоеНазначение,
		|
		|			СУММА(Основной.Налог)	КАК Результат
		|
		|ПОМЕСТИТЬ ВТПроводки	
		|		ИЗ	РегистрНакопления.ВзаиморасчетыПоНДФЛ КАК Основной
		// ИНАГРО ++
		|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИНАГРО_РаботникиОрганизаций.СрезПоследних(
		|		&парамПериодРегистрацииКонец,
		|		Организация = &парамОрганизация
		|			И Сотрудник В (&парамСотрудники)) КАК РаботникиОрганизацийСрезПоследних
		|ПО Основной.Контрагент = РаботникиОрганизацийСрезПоследних.Сотрудник
		|ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ 
		|	ВЫБОР
		|		КОГДА ИНАГРО_ДоговорНаВыполнениеРаботСФизЛицом.Сотрудник.ОсновноеНазначение = &парамПустойСотрудник
		|			ТОГДА ИНАГРО_ДоговорНаВыполнениеРаботСФизЛицом.Сотрудник
		|		ИНАЧЕ ИНАГРО_ДоговорНаВыполнениеРаботСФизЛицом.Сотрудник.ОсновноеНазначение
		|	КОНЕЦ КАК Сотрудник,
		|	ИНАГРО_ДоговорНаВыполнениеРаботСФизЛицом.ПодразделениеОрганизации.ИНАГРО_Контрагент КАК ПодразделениеОрганизацииИНАГРО_Контрагент
		|ИЗ
		|	Документ.ИНАГРО_ДоговорНаВыполнениеРаботСФизЛицом КАК ИНАГРО_ДоговорНаВыполнениеРаботСФизЛицом
		|ГДЕ
		|	ИНАГРО_ДоговорНаВыполнениеРаботСФизЛицом.Организация = &парамОрганизация
		|	И ВЫБОР
		|			КОГДА ИНАГРО_ДоговорНаВыполнениеРаботСФизЛицом.Сотрудник.ОсновноеНазначение = &парамПустойСотрудник
		|				ТОГДА ИНАГРО_ДоговорНаВыполнениеРаботСФизЛицом.Сотрудник В (&парамСотрудники)
		|			ИНАЧЕ ИНАГРО_ДоговорНаВыполнениеРаботСФизЛицом.Сотрудник.ОсновноеНазначение В (&парамСотрудники)
		|		КОНЕЦ
		|	И ИНАГРО_ДоговорНаВыполнениеРаботСФизЛицом.ДатаОкончания >= &парамПериодРегистрации
		|	И ИНАГРО_ДоговорНаВыполнениеРаботСФизЛицом.ДатаНачала <= КОНЕЦПЕРИОДА(&парамПериодРегистрации, МЕСЯЦ)) КАК ДоговораГПХ
		|ПО Основной.Контрагент = ДоговораГПХ.Сотрудник
		// ИНАГРО --
		|		ГДЕ		НАЧАЛОПЕРИОДА(Основной.Период, МЕСЯЦ) = &парамПериодРегистрации
		|			И 	Основной.Контрагент В ( &парамСотрудники )
		|			И 	Основной.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|			И	Основной.ДоходНДФЛ.СпособОтраженияВРеглУчете <> ЗНАЧЕНИЕ(Справочник.СпособыОтраженияЗарплатыВРеглУчете.НеОтражатьВБухучете)
		|    
		|		СГРУППИРОВАТЬ ПО
		|			Основной.Контрагент.ФизическоеЛицо,
		|			Основной.Контрагент,
		|			Основной.ДоходНДФЛ,
		|			НАЧАЛОПЕРИОДА(Основной.НалоговыйПериод, МЕСЯЦ),
		|			Основной.ДоходНДФЛ.СпособОтраженияВРеглУчете.СчетДт,
		|			Основной.ДоходНДФЛ.СпособОтраженияВРеглУчете.СчетКт,
		|			Основной.ДоходНДФЛ.СпособОтраженияВРеглУчете.СубконтоКт1,
		|			Основной.ДоходНДФЛ.СпособОтраженияВРеглУчете.СубконтоКт2,
		|			Основной.ДоходНДФЛ.СпособОтраженияВРеглУчете.СубконтоКт3,
		|			NULL
		|
		|
		|       ОБЪЕДИНИТЬ ВСЕ
		|		ВЫБРАТЬ
		|			Взаиморасчеты.Сотрудник.ФизическоеЛицо КАК ФизическоеЛицо,
		|			Взаиморасчеты.Сотрудник,
		|			NULL КАК ДоходНДФЛ,
		|			НАЧАЛОПЕРИОДА(Взаиморасчеты.ПериодВзаиморасчетов, МЕСЯЦ) КАК БазовыйПериодНачало,
		|			Взаиморасчеты.СчетУчета КАК СчетДт,
		|			NULL КАК НДФЛСчетДт,
		|			NULL КАК СчетКт,
		|			NULL КАК СубконтоКт1,
		|			NULL КАК СубконтоКт2,
		|			NULL КАК СубконтоКт3,
		|			NULL КАК НалоговоеНазначениеДоходовИЗатрат,
		|			NULL КАК НалоговоеНазначение,
		|			СУММА( ВЫБОР	КОГДА Взаиморасчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) 
		|								ТОГДА	Взаиморасчеты.СуммаВзаиморасчетов
		|							ИНАЧЕ		- Взаиморасчеты.СуммаВзаиморасчетов
		|                  КОНЕЦ )           КАК Результат
		|
		|		ИЗ	РегистрНакопления.ВзаиморасчетыССотрудниками КАК Взаиморасчеты
		|	
		|		ГДЕ		НАЧАЛОПЕРИОДА(Взаиморасчеты.Период, МЕСЯЦ) = &парамПериодРегистрации
		|			И 	Взаиморасчеты.Сотрудник В ( &парамСотрудники )
		|			И	Взаиморасчеты.КодОперации= ЗНАЧЕНИЕ(Перечисление.КодыОперацийВзаиморасчетыСРаботникамиОрганизаций.НДФЛ)
		|    
		|		СГРУППИРОВАТЬ ПО
		|			Взаиморасчеты.Сотрудник,
		|			НАЧАЛОПЕРИОДА(Взаиморасчеты.ПериодВзаиморасчетов, МЕСЯЦ),
		|			Взаиморасчеты.СчетУчета
		|";
		// ИНАГРО ++
		Для Инд = 0 По 2 Цикл   
			НомСубконтоКонтрагенты = Инд + 1;
			ТекстЗапросаВТ = СтрЗаменить(ТекстЗапросаВТ, Строка("Основной.ДоходНДФЛ.СпособОтраженияВРеглУчете.СубконтоКт" + НомСубконтоКонтрагенты), 
			Строка("
			|ВЫБОР
			|	КОГДА Основной.ДоходНДФЛ.СпособОтраженияВРеглУчете.СубконтоКт" + НомСубконтоКонтрагенты + " ССЫЛКА Справочник.Контрагенты
			|			И Основной.ДоходНДФЛ = ЗНАЧЕНИЕ(Справочник.ВидыДоходовНДФЛ.Код01ГПХ)
			|		ТОГДА ДоговораГПХ.ПодразделениеОрганизацииИНАГРО_Контрагент
			|	ИНАЧЕ ВЫБОР
			|			КОГДА Основной.ДоходНДФЛ.СпособОтраженияВРеглУчете.СубконтоКт" + НомСубконтоКонтрагенты + " ССЫЛКА Справочник.Контрагенты
			|				ТОГДА ВЫБОР
			|						КОГДА НЕ РаботникиОрганизацийСрезПоследних.ПодразделениеОрганизации.ИНАГРО_Контрагент = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
			|							ТОГДА РаботникиОрганизацийСрезПоследних.ПодразделениеОрганизации.ИНАГРО_Контрагент
			|						ИНАЧЕ Основной.ДоходНДФЛ.СпособОтраженияВРеглУчете.СубконтоКт" + НомСубконтоКонтрагенты + "
			|					КОНЕЦ
			|			ИНАЧЕ Основной.ДоходНДФЛ.СпособОтраженияВРеглУчете.СубконтоКт" + НомСубконтоКонтрагенты + "
			|		КОНЕЦ
			|	КОНЕЦ"));
		КонецЦикла;
		// ИНАГРО --
		Запрос.Текст = ТекстЗапросаВТ;
		Запрос.Выполнить();
		ТекстЗапросаВТПроводки = "ВТПроводки";
		
	КонецЕсли;
	Запрос.Текст = "ВЫБРАТЬ * ИЗ ВТПроводки";
	
	ТекстЗапроса = "ВЫБРАТЬ
	               |	Основной.Сотрудник КАК Сотрудник,
	               |	Основной.ДоходНДФЛ КАК ДоходНДФЛ,
	               |	Основной.БазовыйПериодНачало КАК БазовыйПериодНачало,
	               |	Основной.СчетДт КАК СчетДт,
	               |	ВЫБОР
	               |		КОГДА Основной.СчетДт = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыПоНачисленнымДивидендам)
	               |			ТОГДА ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
				   //|		КОГДА Основной.СчетДт = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыПоДругимВыплатам)
				   //|			ТОГДА ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	               |		ИНАЧЕ Основной.Сотрудник
	               |	КОНЕЦ КАК СубконтоДт1,
	               |	Основной.НДФЛСчетДт,
	               |	Основной.СчетКт,
	               |	Основной.СубконтоКт1,
	               |	Основной.СубконтоКт2,
	               |	Основной.СубконтоКт3,
	               |	Основной.НалоговоеНазначениеДоходовИЗатрат,
	               |	Основной.НалоговоеНазначение,
	               |	СУММА(Основной.Результат) КАК Результат
	               |ИЗ
	               |	ВТПроводки КАК Основной
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	Основной.ДоходНДФЛ,
	               |	Основной.БазовыйПериодНачало,
	               |	Основной.СчетДт,
	               |	Основной.НДФЛСчетДт,
	               |	Основной.СчетКт,
	               |	Основной.СубконтоКт1,
	               |	Основной.СубконтоКт2,
	               |	Основной.СубконтоКт3,
	               |	Основной.НалоговоеНазначениеДоходовИЗатрат,
	               |	Основной.НалоговоеНазначение,
	               |	Основной.Сотрудник
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Сотрудник,
	               |	ВЫБОР
	               |		КОГДА Основной.СчетДт = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыПоЗаработнойПлате)
	               |			ТОГДА 1
	               |		КОГДА Основной.СчетДт = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыПоДругимВыплатам)
	               |			ТОГДА 2
	               |		ИНАЧЕ Основной.СчетДт
	               |	КОНЕЦ
	               |ИТОГИ
	               |	СУММА(Результат)
	               |ПО
	               |	Сотрудник,
	               |	СчетДт";
	
	Запрос.Текст = ТекстЗапроса;
	
	СчетУчетаПоУмолчанию = ПланыСчетов.Хозрасчетный.РасчетыПоЗаработнойПлате;
	
	тбНачисления = Новый ТаблицаЗначений;
	тбНачисления.Колонки.Добавить("СчетДт");
	тбНачисления.Колонки.Добавить("Сумма");
	
	
	ВыборкаСотрудники = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаСотрудники.Следующий() Цикл
		
		мСотрудник = ВыборкаСотрудники.Сотрудник;
		тбНачисления.Очистить();
		
		// 1. В этом цикле сформируем таблицу для определения счетов учета других удержаний.
		ВыборкаСчетУчета = ВыборкаСотрудники.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаСчетУчета.Следующий() Цикл
			Если ВыборкаСчетУчета.СчетДт <> NULL Тогда
				СтрокаТб = тбНачисления.Добавить();
				СтрокаТб.СчетДт	= ВыборкаСчетУчета.СчетДт;
				СтрокаТб.Сумма	= ВыборкаСчетУчета.Результат;
				
			КонецЕсли;
		КонецЦикла;
		
		// 2. В этом цикле сделаем движения с учетом остатков в разрезе счетов учета по начислениям.
		тбНачисления.Сортировать("СчетДт");
		ВыборкаСчетУчета = ВыборкаСотрудники.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаСчетУчета.Следующий() Цикл
			
			Если ВыборкаСчетУчета.СчетДт = NULL Тогда
				
				Выборка = ВыборкаСчетУчета.Выбрать(ОбходРезультатаЗапроса.Прямой);
				Пока Выборка.Следующий() Цикл
					
					СуммаДокумента = Выборка.Результат;
					
					Для каждого СтрокаТб Из тбНачисления Цикл
						СуммаДвижения = Мин(СуммаДокумента, СтрокаТб.Сумма);
						Если  СуммаДвижения = 0 
							ИЛИ (ЗначениеЗаполнено(Выборка.НДФЛСчетДт) И Выборка.НДФЛСчетДт <> СтрокаТб.СчетДт)
							Тогда
							Продолжить;
						КонецЕсли;
						СтрокаТб.Сумма = СтрокаТб.Сумма - СуммаДвижения;
						СуммаДокумента = СуммаДокумента - СуммаДвижения;
						
						// Добавим строку
						СтрокаДанных = НДФЛПроводки.Добавить();
						ЗаполнитьЗначенияСвойств(СтрокаДанных, Выборка);
						СтрокаДанных.СчетДт = СтрокаТб.СчетДт;
						СтрокаДанных.Результат = СуммаДвижения;
						Если СтрокаДанных.СчетДт = ПланыСчетов.Хозрасчетный.РасчетыПоНачисленнымДивидендам Тогда
							 СтрокаДанных.СубконтоДт1 = Справочники.Контрагенты.ПустаяСсылка();
						КонецЕсли;
						
						Если  СуммаДокумента = 0 Тогда
							Прервать;
						КонецЕсли;
					КонецЦикла;
					
					Если СуммаДокумента <> 0 Тогда
						Для каждого СтрокаТб Из тбНачисления Цикл
							СуммаДвижения = Мин(СуммаДокумента, СтрокаТб.Сумма);
							Если  СуммаДвижения = 0 Тогда
								Продолжить;
							КонецЕсли;
							СтрокаТб.Сумма = СтрокаТб.Сумма - СуммаДвижения;
							СуммаДокумента = СуммаДокумента - СуммаДвижения;
							
							// Добавим строку
							СтрокаДанных = НДФЛПроводки.Добавить();
							ЗаполнитьЗначенияСвойств(СтрокаДанных, Выборка);
							СтрокаДанных.СчетДт = СтрокаТб.СчетДт;
							Если СтрокаДанных.СчетДт = ПланыСчетов.Хозрасчетный.РасчетыПоНачисленнымДивидендам Тогда
								 СтрокаДанных.СубконтоДт1 = Справочники.Контрагенты.ПустаяСсылка();
							КонецЕсли;
							СтрокаДанных.Результат = СуммаДвижения;
							
							Если  СуммаДокумента = 0 Тогда
								Прервать;
							КонецЕсли;
						КонецЦикла;
                    КонецЕсли;
					
					Если СуммаДокумента <> 0 Тогда
						// Каким-то административным документом по регистру 
						// расчета НДФЛ провели больше чем по взаиморасчетам, 
						// тогда бросаем сумму на 661
						// Добавим строку.
						СтрокаДанных = НДФЛПроводки.Добавить();
						ЗаполнитьЗначенияСвойств(СтрокаДанных, Выборка);
						
						СтрокаДанных.СчетДт = СчетУчетаПоУмолчанию;
						СтрокаДанных.Результат = СуммаДокумента;
						
					КонецЕсли;
					
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры  // РассчитатьНДФЛПроводки

// Производится расчет.
//
Процедура РассчитатьУдержанияПроводки( Сотрудники ) Экспорт
	
	Отказ = Ложь;
	МассивИндексыСтрокУдержания = Новый Массив();
	
	// Перечитаем объект и соберем данные для заполнения наборов записей регистров
	НачатьТранзакцию();
		Прочитать();
		ВыборкаПоШапкеДокумента = СформироватьЗапросПоШапке().Выбрать();
		// позиционируем выборку
		ВыборкаПоШапкеДокумента.Следующий();
		ВыборкаПоНачислениям = СформироватьЗапросПоНачислениям( Сотрудники).Выбрать();
		ВыборкаПоВзносам = СформироватьЗапросПоВзносы(, Сотрудники).Выбрать();
		ВыборкаПоНДФЛ = СформироватьЗапросПоНДФЛ(Сотрудники).Выбрать();
		ВыборкаПоУдержаниям = СформироватьЗапросПоУдержания(Сотрудники).Выбрать();
	ЗафиксироватьТранзакцию();
	
	// Сформируем движения по данным табличных частей
	НаборОсновныеНачисления = РегистрыРасчета.ИНАГРО_Начисления.СоздатьНаборЗаписей();
	НаборОсновныеНачисления.Отбор.Регистратор.Значение = Ссылка;
	Пока ВыборкаПоНачислениям.Следующий() Цикл 
		ПроверитьЗаполнениеСтрокиНачисления(ВыборкаПоНачислениям, Отказ);
		Если НЕ Отказ Тогда
			ДобавитьСтрокуНачислений(ВыборкаПоНачислениям, НаборОсновныеНачисления);
		КонецЕсли;
	КонецЦикла;
	НаборОсновныеНачисления.Записать();
	
	НаборВзносыВФонды = РегистрыРасчета.ИНАГРО_ВзносыВФонды.СоздатьНаборЗаписей();
	НаборВзносыВФонды.Отбор.Регистратор.Значение = Ссылка;
	Пока ВыборкаПоВзносам.Следующий() Цикл
		ПроверитьЗаполнениеСтрокиВзносы(ВыборкаПоВзносам, Отказ);
		Если НЕ Отказ Тогда
			// Заполним записи в наборах записей регистров
			ДобавитьСтрокуВзносы(ВыборкаПоВзносам, НаборВзносыВФонды);
		КонецЕсли;
	КонецЦикла;
	НаборВзносыВФонды.Записать();
	
	НаборНДФЛ = РегистрыНакопления.ВзаиморасчетыПоНДФЛ.СоздатьНаборЗаписей();
	НаборНДФЛ.Отбор.Регистратор.Значение = Ссылка;
	Пока ВыборкаПоНДФЛ.Следующий() Цикл
		ПроверитьЗаполнениеСтрокиНДФЛ(ВыборкаПоНДФЛ, Отказ);
		Если НЕ Отказ Тогда
			// Заполним записи в наборах записей регистров
			ДобавитьСтрокуНДФЛ(ВыборкаПоНДФЛ, НаборНДФЛ);
		КонецЕсли;
	КонецЦикла;
	НаборНДФЛ.Записать();

	НаборУдержания = РегистрыРасчета.ИНАГРО_Удержания.СоздатьНаборЗаписей();
	НаборУдержания.Отбор.Регистратор.Значение = Ссылка;
	Пока ВыборкаПоУдержаниям.Следующий() Цикл 
		ПроверитьЗаполнениеСтрокиУдержания(ВыборкаПоУдержаниям, Отказ);
		Если НЕ Отказ Тогда
			ДобавитьСтрокуУдержаний(ВыборкаПоУдержаниям, НаборУдержания);
		КонецЕсли;
	КонецЦикла;
	НаборУдержания.Записать();
	
	НаборВзаиморасчеты = РегистрыНакопления.ВзаиморасчетыССотрудниками.СоздатьНаборЗаписей();
	НаборВзаиморасчеты.Отбор.Регистратор.Значение = Ссылка;
	СформироватьВзаиморасчетыСРаботниками( Сотрудники, НаборВзаиморасчеты );
	НаборВзаиморасчеты.Записать();
	
	Если Отказ Тогда
		
		// Удаляем движения
		НаборОсновныеНачисления.Очистить();
		НаборОсновныеНачисления.Записать();
		
		НаборВзносыВФонды.Очистить();
		НаборВзносыВФонды.Записать();
		
		НаборНДФЛ.Очистить();
		НаборНДФЛ.Записать();
		
		НаборУдержания.Очистить();
		НаборУдержания.Записать();
		
		НаборВзаиморасчеты.Очистить();
		НаборВзаиморасчеты.Записать();
		
		Возврат;
		
	КонецЕсли;
	Записать();
	
	// Расчет	
	РассчитатьЗаписиУдержанияПроводки( Сотрудники );	
	
	// Расчет окончен. Удаляем движения
	НаборОсновныеНачисления.Очистить();
	НаборОсновныеНачисления.Записать();
	
	НаборУдержания.Очистить();
	НаборУдержания.Записать();
	
	НаборВзносыВФонды.Очистить();
	НаборВзносыВФонды.Записать();
	
	НаборНДФЛ.Очистить();
	НаборНДФЛ.Записать();
 	
	НаборВзаиморасчеты.Очистить();
	НаборВзаиморасчеты.Записать();
	Записать();

КонецПроцедуры  // РассчитатьУдержанияПроводки()

// Производится расчет.
//
Процедура РассчитатьЗаписиУдержанияПроводки( Сотрудники ) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("парамПериодРегистрации"		, ПериодРегистрации);
	Запрос.УстановитьПараметр("парамСотрудники"				, Сотрудники);
    Запрос.УстановитьПараметр("Регистратор", Ссылка);	
	//	ВТПлановыеУдержания
	Если Истина Тогда
		//	Описание:
		// 		РеглУчетПлановыхНачисленийРаботниковОрганизаций.
		//		
		ТекстЗапросаВТ = "
		|		ВЫБРАТЬ
		|			ОсновнойПериод.Регистратор,
		|			ОсновнойПериод.НомерСтроки,
		|			ОсновнойПериод.Сотрудник,
		|			ОсновнойПериод.ВидРасчета,
		|			ПлановыеУдержания.СпособОтраженияВБухучете
		|ПОМЕСТИТЬ ВТПлановыеУдержания
		|		ИЗ(
		|			ВЫБРАТЬ
		|				Основной.Регистратор,
		|				Основной.НомерСтроки,
		|				Основной.Сотрудник,
		|				Основной.ВидРасчета,
		|				Основной.ДокументОснование,
		|				МАКСИМУМ(ПлановыеУдержания.Период)	КАК Период
        |			ИЗ РегистрРасчета.ИНАГРО_Удержания КАК Основной
        |			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИНАГРО_ПлановыеУдержанияРаботниковОрганизаций КАК ПлановыеУдержания
        |			ПО		Основной.Сотрудник = ПлановыеУдержания.Сотрудник 
        |				И	Основной.ВидРасчета = ПлановыеУдержания.ВидРасчета 
        |				И	ПлановыеУдержания.Период <= Основной.ПериодРегистрации
        |			ГДЕ		Основной.Сотрудник В ( &парамСотрудники )
        |               И Основной.Регистратор = &Регистратор
        |				И	НАЧАЛОПЕРИОДА(Основной.ПериодРегистрации, МЕСЯЦ) = &парамПериодРегистрации 
        |			СГРУППИРОВАТЬ ПО
        |				Основной.Регистратор,
        |				Основной.НомерСтроки,
        |				Основной.Сотрудник,
		|				Основной.ВидРасчета,
		|				Основной.ДокументОснование
		|		) КАК ОсновнойПериод
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИНАГРО_ПлановыеУдержанияРаботниковОрганизаций КАК ПлановыеУдержания
		|		ПО		ОсновнойПериод.Сотрудник = ПлановыеУдержания.Сотрудник 
		|			И	ОсновнойПериод.ВидРасчета = ПлановыеУдержания.ВидРасчета 
		|			И	ОсновнойПериод.ДокументОснование = ПлановыеУдержания.ДокументОснование 
		|			И	ОсновнойПериод.Период = ПлановыеУдержания.Период
		|
		|";
		Запрос.Текст = ТекстЗапросаВТ;
		Запрос.Выполнить();
		ТекстЗапросаВТПлановыеУдержания = "ВТПлановыеУдержания";
	КонецЕсли;
	Запрос.Текст = "ВЫБРАТЬ * ИЗ ВТПлановыеУдержания";
	
	//	ВТПроводки
	Если Истина Тогда
		//	Описание:
		// 		РегистрРасчета.ВзносыВФонды + Проводки Кт.
		//		
		ТекстПараметра = "
		|		ВЫБОР
		|   			КОГДА	Основной.СпособОтраженияВБухУчете <> ЗНАЧЕНИЕ(Справочник.СпособыОтраженияЗарплатыВРеглУчете.ПустаяСсылка)
		|		 			ТОГДА	Основной.СпособОтраженияВБухУчете.ИмяПараметра
		|				КОГДА     УчетПлановыхУдержаний.СпособОтраженияВБухучете    <> ЗНАЧЕНИЕ(Справочник.СпособыОтраженияЗарплатыВРеглУчете.ПустаяСсылка)
		|					ТОГДА УчетПлановыхУдержаний.СпособОтраженияВБухучете.ИмяПараметра 		 
		|				КОГДА     Основной.ВидРасчета.СпособОтраженияВБухучете 	<> ЗНАЧЕНИЕ(Справочник.СпособыОтраженияЗарплатыВРеглУчете.ПустаяСсылка)	
		|					ТОГДА Основной.ВидРасчета.СпособОтраженияВБухучете.ИмяПараметра 		
		|				ИНАЧЕ ОтражениеПоУмолчанию.ИмяПараметра 	           
		|		КОНЕЦ ";
		ТекстЗапросаВТ = " 
		|		ВЫБРАТЬ
		|			Основной.Сотрудник.ФизическоеЛицо КАК ФизическоеЛицо,
		|			Основной.Сотрудник,
		|			Основной.ВидРасчета,
		|			Основной.ДокументОснование,
		|			НАЧАЛОПЕРИОДА(Основной.БазовыйПериодНачало, МЕСЯЦ) КАК НалоговыйПериод,
		|			NULL КАК СчетДт,
		|   		" + СтрЗаменить(ТекстПараметра,"ИмяПараметра","СчетКт")+"		КАК СчетКт,
		|   		" + СтрЗаменить(ТекстПараметра,"ИмяПараметра","СубконтоКт1")+"	КАК СубконтоКт1,
		|   		" + СтрЗаменить(ТекстПараметра,"ИмяПараметра","СубконтоКт2")+"	КАК СубконтоКт2,
		|   		" + СтрЗаменить(ТекстПараметра,"ИмяПараметра","СубконтоКт3")+"	КАК СубконтоКт3,
		|			СУММА(Основной.Результат)           КАК Результат
		|
		|ПОМЕСТИТЬ ВТПроводки	
		|		ИЗ	РегистрРасчета.ИНАГРО_Удержания КАК Основной
		|	
		|				
		|		// Удержания у которых прописана своя проводка		
		|		ЛЕВОЕ СОЕДИНЕНИЕ "+ТекстЗапросаВТПлановыеУдержания+" КАК УчетПлановыхУдержаний
		|		ПО		УчетПлановыхУдержаний.Регистратор = Основной.Регистратор 
		|			И	УчетПлановыхУдержаний.НомерСтроки = Основной.НомерСтроки 
		|	
		|		// способ отражения по умолчанию		
		|		ЛЕВОЕ СОЕДИНЕНИЕ (	ВЫБРАТЬ * ИЗ Справочник.СпособыОтраженияЗарплатыВРеглУчете 
		|						ГДЕ Ссылка = ЗНАЧЕНИЕ(Справочник.СпособыОтраженияЗарплатыВРеглУчете.ОтражениеУдержанийПоУмолчанию)
		|					) КАК ОтражениеПоУмолчанию
		|		ПО ИСТИНА			
		|
		|		ГДЕ		Основной.ПериодРегистрации = &парамПериодРегистрации
        |           И Основной.Регистратор = &Регистратор
		|			И 	Основной.Сотрудник В ( &парамСотрудники )
		|	И	"+СтрЗаменить(ТекстПараметра,"ИмяПараметра","Ссылка")+" <> ЗНАЧЕНИЕ(Справочник.СпособыОтраженияЗарплатыВРеглУчете.НеОтражатьВБухучете)
		|    
		|		СГРУППИРОВАТЬ ПО
		|			Основной.Сотрудник.ФизическоеЛицо,
		|			Основной.Сотрудник,
		|			Основной.ВидРасчета,
		|			Основной.ДокументОснование,
		|			НАЧАЛОПЕРИОДА(Основной.БазовыйПериодНачало, МЕСЯЦ),
		|   		" + СтрЗаменить(ТекстПараметра,"ИмяПараметра","СчетКт")+",
		|   		" + СтрЗаменить(ТекстПараметра,"ИмяПараметра","СубконтоКт1")+",
		|   		" + СтрЗаменить(ТекстПараметра,"ИмяПараметра","СубконтоКт2")+",
		|   		" + СтрЗаменить(ТекстПараметра,"ИмяПараметра","СубконтоКт3")+"
		|
		|       ОБЪЕДИНИТЬ ВСЕ
		|		ВЫБРАТЬ
		|			Взаиморасчеты.Сотрудник.ФизическоеЛицо КАК ФизическоеЛицо,
		|			Взаиморасчеты.Сотрудник,
		|			NULL КАК ВидРасчета,
		|			NULL КАК ДокументОснование,
		|			НАЧАЛОПЕРИОДА(Взаиморасчеты.ПериодВзаиморасчетов, МЕСЯЦ) КАК НалоговыйПериод,
		|			Взаиморасчеты.СчетУчета КАК СчетДт,
		|			NULL КАК СчетКт,
		|			NULL КАК СубконтоКт1,
		|			NULL КАК СубконтоКт2,
		|			NULL КАК СубконтоКт3,
		|			СУММА( ВЫБОР	КОГДА Взаиморасчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) 
		|								ТОГДА	Взаиморасчеты.СуммаВзаиморасчетов
		|							ИНАЧЕ		- Взаиморасчеты.СуммаВзаиморасчетов
		|                  КОНЕЦ )           КАК Результат
		|
		|		ИЗ	РегистрНакопления.ВзаиморасчетыССотрудниками КАК Взаиморасчеты
		|	
		|		ГДЕ		НАЧАЛОПЕРИОДА(Взаиморасчеты.Период, МЕСЯЦ) = &парамПериодРегистрации
		|			И 	Взаиморасчеты.Сотрудник В ( &парамСотрудники )
		|			И	Взаиморасчеты.КодОперации= ЗНАЧЕНИЕ(Перечисление.КодыОперацийВзаиморасчетыСРаботникамиОрганизаций.Удержания)
		|    
		|		СГРУППИРОВАТЬ ПО
		|			Взаиморасчеты.Сотрудник,
		|			НАЧАЛОПЕРИОДА(Взаиморасчеты.ПериодВзаиморасчетов, МЕСЯЦ),
		|			Взаиморасчеты.СчетУчета
		|";
		Запрос.Текст = ТекстЗапросаВТ;
		Запрос.Выполнить();
		ТекстЗапросаВТПроводки = "ВТПроводки";
		
	КонецЕсли;
	Запрос.Текст = "ВЫБРАТЬ * ИЗ ВТПроводки";
	
	ТекстЗапроса = " 
	|ВЫБРАТЬ
	|	Основной.Сотрудник					КАК Сотрудник,
	|	Основной.Сотрудник.ФизическоеЛицо   КАК ФизическоеЛицо,
	|	Работники.ПодразделениеОрганизации	КАК ПодразделениеОрганизации,
	|	Основной.ВидРасчета,
	|	Основной.НалоговыйПериод			КАК НалоговыйПериод,
	|
	|	Основной.СчетДт 					КАК СчетДт,
	|	Основной.Сотрудник      			КАК СубконтоДт1,
	|	Основной.СчетКт,
	|	Основной.СубконтоКт1,
	|	Основной.СубконтоКт2,
	|	Основной.СубконтоКт3,
	|	Основной.ДокументОснование КАК ИсполнительныеДокументы,
	|	Основной.ДокументОснование.Получатель КАК Контрагент,
	|	Основной.ДокументОснование.ДоговорКонтрагента КАК Договоры,
	|    
	|// --- КРЕДИТ	
	|	ЕСТЬNULL(ВидыСубконтоСотрудникиКт.НомерСтроки, 0) КАК НомерСубконтоСотрудникиКт,
	|	ЕСТЬNULL(ВидыСубконтоПодразделенияКт.НомерСтроки, 0) КАК НомерСубконтоПодразделенияКт,
	|	ЕСТЬNULL(ВидыСубконтоИсполнительныеДокументыКт.НомерСтроки, 0) КАК НомерСубконтоИсполнительныеДокументыКт,
	|	ЕСТЬNULL(ВидыСубконтоКонтрагентыКт.НомерСтроки, 0) КАК НомерСубконтоКонтрагентыКт,
	|	ЕСТЬNULL(ВидыСубконтоДоговорыКт.НомерСтроки, 0) КАК НомерСубконтоДоговорыКт,
	|    
	|	Основной.Результат           КАК Результат
	|
	|ИЗ	ВТПроводки КАК Основной
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИНАГРО_РаботникиОрганизаций.СрезПоследних( КОНЕЦПЕРИОДА(&парамПериодРегистрации, МЕСЯЦ), 
	|								 Сотрудник В (&парамСотрудники)) КАК Работники 
	|ПО   Работники.Сотрудник = Основной.Сотрудник 
	|	
	|// --- КРЕДИТ	
	|ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Хозрасчетный.ВидыСубконто КАК ВидыСубконтоСотрудникиКт
	|ПО   Основной.СчетКт <> ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка) 
	|	И Основной.СчетКт = ВидыСубконтоСотрудникиКт.Ссылка 
	|	И ВидыСубконтоСотрудникиКт.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.РаботникиОрганизаций)
	|ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Хозрасчетный.ВидыСубконто КАК ВидыСубконтоПодразделенияКт
	|ПО   Основной.СчетКт <> ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка) 
	|	И Основной.СчетКт = ВидыСубконтоПодразделенияКт.Ссылка 
	|	И ВидыСубконтоПодразделенияКт.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Подразделения)
	|ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Хозрасчетный.ВидыСубконто КАК ВидыСубконтоИсполнительныеДокументыКт
	|ПО   Основной.СчетКт <> ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка) 
	|	И Основной.СчетКт = ВидыСубконтоИсполнительныеДокументыКт.Ссылка 
	|	И ВидыСубконтоИсполнительныеДокументыКт.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ИсполнительныеДокументы)
	|ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Хозрасчетный.ВидыСубконто КАК ВидыСубконтоКонтрагентыКт
	|ПО   Основной.СчетКт <> ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка) 
	|	И Основной.СчетКт = ВидыСубконтоКонтрагентыКт.Ссылка 
	|	И ВидыСубконтоКонтрагентыКт.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты)
	|ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Хозрасчетный.ВидыСубконто КАК ВидыСубконтоДоговорыКт
	|ПО   Основной.СчетКт <> ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка) 
	|	И Основной.СчетКт = ВидыСубконтоДоговорыКт.Ссылка 
	|	И ВидыСубконтоДоговорыКт.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры)
	|    
	|УПОРЯДОЧИТЬ ПО    
	|	Сотрудник, 
	|	ВЫБОР	КОГДА Основной.СчетДт = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыПоЗаработнойПлате)  ТОГДА 1
	|			КОГДА Основной.СчетДт = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыПоДругимВыплатам)  ТОГДА 2
	|			ИНАЧЕ Основной.СчетДт КОНЕЦ
	|    
	|ИТОГИ    
	|	СУММА(Результат) 
	|ПО
	|	Сотрудник,  
	|	СчетДт
	|";
	
	Запрос.Текст = ТекстЗапроса;
	
	СчетУчетаПоУмолчанию = ПланыСчетов.Хозрасчетный.РасчетыПоЗаработнойПлате;
	
	тбНачисления = Новый ТаблицаЗначений;
	тбНачисления.Колонки.Добавить("СчетДт");
	тбНачисления.Колонки.Добавить("Сумма");
	
	ВыборкаСотрудники = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаСотрудники.Следующий() Цикл
		мСотрудник = ВыборкаСотрудники.Сотрудник;
		тбНачисления.Очистить();
		
		// 1. В этом цикле сформируем таблицу для определения счетов учета других удержаний.
		ВыборкаСчетУчета = ВыборкаСотрудники.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаСчетУчета.Следующий() Цикл
			Если ВыборкаСчетУчета.СчетДт <> NULL Тогда
				СтрокаТб = тбНачисления.Добавить();
				СтрокаТб.СчетДт	= ВыборкаСчетУчета.СчетДт;
				СтрокаТб.Сумма	= ВыборкаСчетУчета.Результат;
			КонецЕсли;
		КонецЦикла;
		
		// 2. В этом цикле сделаем движения с учетом остатков в разрезе счетов учета по начислениям.
		тбНачисления.Сортировать("СчетДт");
		ВыборкаСчетУчета = ВыборкаСотрудники.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаСчетУчета.Следующий() Цикл
			
			Если ВыборкаСчетУчета.СчетДт = NULL Тогда
				
				Выборка = ВыборкаСчетУчета.Выбрать(ОбходРезультатаЗапроса.Прямой);
				Пока Выборка.Следующий() Цикл
					
					СуммаДокумента = Выборка.Результат;
					
					Для каждого СтрокаТб Из тбНачисления Цикл
						СуммаДвижения = Мин(СуммаДокумента, СтрокаТб.Сумма);
						Если  СуммаДвижения = 0 Тогда
							Продолжить;
						КонецЕсли;
						СтрокаТб.Сумма = СтрокаТб.Сумма - СуммаДвижения;
						СуммаДокумента = СуммаДокумента - СуммаДвижения;
						
						// Добавим строку
						СтрокаДанных = УдержанияПроводки.Добавить();
						ЗаполнитьЗначенияСвойств(СтрокаДанных, Выборка);
						СтрокаДанных.СчетДт = СтрокаТб.СчетДт;
						СтрокаДанных.Результат = СуммаДвижения;
						
						АвтозаполнениеСубконто(Выборка, СтрокаДанных, "Кт" , "Сотрудники");
						АвтозаполнениеСубконто(Выборка, СтрокаДанных, "Кт" , "Подразделения");
						АвтозаполнениеСубконто(Выборка, СтрокаДанных, "Кт" , "ИсполнительныеДокументы");
						АвтозаполнениеСубконто(Выборка, СтрокаДанных, "Кт" , "Контрагенты");
						АвтозаполнениеСубконто(Выборка, СтрокаДанных, "Кт" , "Договоры");
						
						Если  СуммаДокумента = 0 Тогда
							Прервать;
						КонецЕсли;
					КонецЦикла;
					
					Если СуммаДокумента <> 0 Тогда
						// Каким-то административным документом по регистру 
						// расчета Взносы в фонды провели больше сем по взаиморасчетам, 
						// тогда бросаем сумму на 661
						// Добавим строку.
						СтрокаДанных = УдержанияПроводки.Добавить();
						ЗаполнитьЗначенияСвойств(СтрокаДанных, Выборка);
						
						СтрокаДанных.СчетДт = СчетУчетаПоУмолчанию;
						СтрокаДанных.Результат = СуммаДокумента;
						
						АвтозаполнениеСубконто(Выборка, СтрокаДанных, "Кт" , "Сотрудники");
						АвтозаполнениеСубконто(Выборка, СтрокаДанных, "Кт" , "Подразделения");
						АвтозаполнениеСубконто(Выборка, СтрокаДанных, "Кт" , "ИсполнительныеДокументы");
						АвтозаполнениеСубконто(Выборка, СтрокаДанных, "Кт" , "Контрагенты");
						АвтозаполнениеСубконто(Выборка, СтрокаДанных, "Кт" , "Договоры");
						
					КонецЕсли;
					
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры  // РассчитатьВзносы()

// заполнение всего
//
Функция ЗаполнитьВсе(Сотрудники) Экспорт
	
	АвтозаполнениеНачисления(Сотрудники);
	Если НЕ ПредварительныйРасчет Тогда
		АвтозаполнениеВзносы(Сотрудники, "Взносы");
		АвтозаполнениеНДФЛ(Сотрудники);
		АвтозаполнениеУдержания(Сотрудники);
		АвтозаполнениеВзносы(Сотрудники, "ВзносыФОТ");
	КонецЕсли;	

КонецФункции // ЗаполнитьВсе()

// Производится расчет.
//
Процедура РассчитатьВсе(Сотрудники) Экспорт 
	
	Отказ = Ложь;
	МассивИндексыСтрокУдержания = Новый Массив();
	
	// Перечитаем объект и соберем данные для заполнения наборов записей регистров
	НачатьТранзакцию();
	Прочитать();
	ВыборкаПоШапкеДокумента = СформироватьЗапросПоШапке().Выбрать();
	// позиционируем выборку
	ВыборкаПоШапкеДокумента.Следующий();
	ВыборкаПоНачислениям = СформироватьЗапросПоНачислениям(Сотрудники).Выбрать();
	ВыборкаПоВзносам = СформироватьЗапросПоВзносы(,Сотрудники).Выбрать();
	ВыборкаПоНДФЛ = СформироватьЗапросПоНДФЛ(Сотрудники).Выбрать();
	ВыборкаПоУдержаниям = СформироватьЗапросПоУдержания(Сотрудники).Выбрать();
	ЗафиксироватьТранзакцию();
	
	// Сформируем движения по данным табличных частей
	НаборОсновныеНачисления = РегистрыРасчета.ИНАГРО_Начисления.СоздатьНаборЗаписей();
	НаборОсновныеНачисления.Отбор.Регистратор.Значение = Ссылка;
	Пока ВыборкаПоНачислениям.Следующий() Цикл 
		ПроверитьЗаполнениеСтрокиНачисления(ВыборкаПоНачислениям, Отказ);
		Если НЕ Отказ Тогда
			ДобавитьСтрокуНачислений(ВыборкаПоНачислениям, НаборОсновныеНачисления);
		КонецЕсли;
	КонецЦикла;
	НаборОсновныеНачисления.Записать();
	
	НаборВзносыВФонды = РегистрыРасчета.ИНАГРО_ВзносыВФонды.СоздатьНаборЗаписей();
	НаборВзносыВФонды.Отбор.Регистратор.Значение = Ссылка;
	Пока ВыборкаПоВзносам.Следующий() Цикл
		ПроверитьЗаполнениеСтрокиВзносы(ВыборкаПоВзносам, Отказ);
		Если НЕ Отказ Тогда
			// Заполним записи в наборах записей регистров
			ДобавитьСтрокуВзносы(ВыборкаПоВзносам,НаборВзносыВФонды);
		КонецЕсли;
	КонецЦикла;
	НаборВзносыВФонды.Записать();
	
	НаборНДФЛ = РегистрыНакопления.ВзаиморасчетыПоНДФЛ.СоздатьНаборЗаписей();
	НаборНДФЛ.Отбор.Регистратор.Значение = Ссылка;
	Пока ВыборкаПоНДФЛ.Следующий() Цикл
		ПроверитьЗаполнениеСтрокиНДФЛ(ВыборкаПоНДФЛ, Отказ);
		Если НЕ Отказ Тогда
			// Заполним записи в наборах записей регистров
			ДобавитьСтрокуНДФЛ(ВыборкаПоНДФЛ,НаборНДФЛ);
		КонецЕсли;
	КонецЦикла;
	НаборНДФЛ.Записать();
	
	НаборУдержания = РегистрыРасчета.ИНАГРО_Удержания.СоздатьНаборЗаписей();
	НаборУдержания.Отбор.Регистратор.Значение = Ссылка;
	Пока ВыборкаПоУдержаниям.Следующий() Цикл 
		ПроверитьЗаполнениеСтрокиУдержания(ВыборкаПоУдержаниям, Отказ);
		Если НЕ Отказ Тогда
			ДобавитьСтрокуУдержаний(ВыборкаПоУдержаниям, НаборУдержания);
		КонецЕсли;
	КонецЦикла;
	НаборУдержания.Записать();
	
	НаборВзаиморасчеты = РегистрыНакопления.ВзаиморасчетыССотрудниками.СоздатьНаборЗаписей();
	НаборВзаиморасчеты.Отбор.Регистратор.Значение = Ссылка;
	СформироватьВзаиморасчетыСРаботниками( Сотрудники, НаборВзаиморасчеты );
	НаборВзаиморасчеты.Записать();
	
	Если Отказ Тогда
		
		// Удаляем движения
		НаборОсновныеНачисления.Очистить();
		НаборОсновныеНачисления.Записать();
		
		НаборВзносыВФонды.Очистить();
		НаборВзносыВФонды.Записать();
		
		НаборНДФЛ.Очистить();
		НаборНДФЛ.Записать();
		
		НаборУдержания.Очистить();
		НаборУдержания.Записать();
		
		НаборВзаиморасчеты.Очистить();
		НаборВзаиморасчеты.Записать();
		
		Возврат;
		
	КонецЕсли;
	Записать();
	
	// Рассчитать
	РассчитатьНачисления(Сотрудники);
	Если НЕ ПредварительныйРасчет Тогда
		РассчитатьВзносы(Сотрудники, "Взносы");
		РассчитатьНДФЛ(Сотрудники);
		РассчитатьУдержания(Сотрудники);
		РассчитатьВзносы(Сотрудники, "ВзносыФОТ");
		
		Записать();
		
		РассчитатьНачисленияПроводки(Сотрудники);
		РассчитатьВзносыПроводки(Сотрудники);
		РассчитатьНДФЛПроводки(Сотрудники);
		РассчитатьУдержанияПроводки(Сотрудники);
		РассчитатьВзносыФОТПроводки(Сотрудники);
	КонецЕсли;
	
	// Удаляем движения
	НаборОсновныеНачисления.Очистить();
	НаборОсновныеНачисления.Записать();	
	
	НаборВзносыВФонды.Очистить();
	НаборВзносыВФонды.Записать();
	
	НаборНДФЛ.Очистить();
	НаборНДФЛ.Записать();
	
	НаборУдержания.Очистить();
	НаборУдержания.Записать();
	
	НаборВзаиморасчеты.Очистить();
	НаборВзаиморасчеты.Записать();
	
	Записать();
	

КонецПроцедуры  // РассчитатьВсе()

// Производится расчет.
//
Процедура ЗаполнитьРассчитатьВсе() Экспорт
	
	АвтозаполнениеРаботникиОрганизации();
	
	Сотрудники = РаботникиОрганизации.ВыгрузитьКолонку("Сотрудник");
	
	ЗаполнитьВсе(Сотрудники);	
	РассчитатьВсе(Сотрудники);
	
	Если Не ПредварительныйРасчет Тогда
		АвтозаполнениеПроводок();
	КонецЕсли;
	
КонецПроцедуры  // РассчитатьНДФЛ()

// Производится расчет.
//
Процедура ПерезаполнитьПроводкиВсе(Сотрудники) Экспорт 
		
	РассчитатьНачисленияПроводки(Сотрудники);
	РассчитатьВзносыПроводки(Сотрудники);
	РассчитатьНДФЛПроводки(Сотрудники);
	РассчитатьУдержанияПроводки(Сотрудники);
	РассчитатьВзносыФОТПроводки(Сотрудники);

КонецПроцедуры  // РассчитатьВсе()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции	

Функция ЗаполнитьТаблицуРасчетногоЛистка(ТекущийСотрудник) Экспорт
		
	ЗапросРЛ = Новый Запрос;
	ЗапросРЛ.УстановитьПараметр("ПериодРегистрации",			ПериодРегистрации);
	ЗапросРЛ.УстановитьПараметр("КонецПериодаРегистрации",		КонецМесяца(ПериодРегистрации));
	ЗапросРЛ.УстановитьПараметр("Приход",						ВидДвиженияНакопления.Приход);
	ЗапросРЛ.УстановитьПараметр("Расход",						ВидДвиженияНакопления.Расход);					
	
	ЗапросРЛ.УстановитьПараметр("Организация",					Организация);
	ЗапросРЛ.УстановитьПараметр("ГоловнаяОрганизация",			ЗарплатаКадрыПовтИсп.ГоловнаяОрганизация(Организация));
	ЗапросРЛ.УстановитьПараметр("Работник",						ТекущийСотрудник);
	ЗапросРЛ.УстановитьПараметр("Ссылка",						Ссылка);
	
	КодыОперацииВыплата = Новый СписокЗначений;
	КодыОперацииВыплата.Добавить(Перечисления.КодыОперацийВзаиморасчетыСРаботникамиОрганизаций.Выплата);
	
	ЗапросРЛ.УстановитьПараметр("ПарамКодыОперацииВыплата", КодыОперацииВыплата);
	
	// Из запроса исключаем данные по регистратору - этот документ, если документ проведен и модифицирован.
	ИсключитьДанныеПоРегистратору = Проведен И Модифицированность();
	
	// Добавляем данные в расчетный листок из документа, если он не проведен или проведен и модифицирован.
	ДобавитьДанныеИзДокумента = Модифицированность() Или Не Проведен;
	
	Если ДобавитьДанныеИзДокумента Тогда
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Работник",ТекущийСотрудник);
		Запрос.УстановитьПараметр("Организация",Организация);
		Запрос.УстановитьПараметр("ПериодРегистрации",ПериодРегистрации);
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	НачислениеЗарплатыРаботникамОрганизацийНачисления.Ссылка
		|ИЗ
		|	Документ.ИНАГРО_НачислениеЗарплатыРаботникамОрганизаций.Начисления КАК НачислениеЗарплатыРаботникамОрганизацийНачисления
		|ГДЕ
		|	НачислениеЗарплатыРаботникамОрганизацийНачисления.Сотрудник = &Работник
		|	И НачислениеЗарплатыРаботникамОрганизацийНачисления.Ссылка.ПериодРегистрации = &ПериодРегистрации
		|	И НачислениеЗарплатыРаботникамОрганизацийНачисления.Ссылка.Проведен
		|	И НачислениеЗарплатыРаботникамОрганизацийНачисления.Ссылка.Организация = &Организация";
	КонецЕсли;
	
		
	// печать производится на языке, указанном в настройках пользователя	  
	КодЯзыкаПечать = Локализация.ПолучитьЯзыкФормированияПечатныхФорм();	
	ТекстНеоплаченоФСС = "";
	
	Если ТекстНеоплаченоФСС <> "" Тогда
		ЗапросФСС = Новый Запрос();
		ЗапросФСС.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		ЗапросФСС.УстановитьПараметр("ПериодРегистрации", 	  	    ПериодРегистрации);
		ЗапросФСС.УстановитьПараметр("КонецПериодаРегистрации", 	КонецМесяца(ПериодРегистрации));
		
		ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		| ОсновныеНачисленияРаботниковОрганизации.Регистратор КАК Документ
		|ПОМЕСТИТЬ ВТНачисленияФСС
		|ИЗ
		| РегистрРасчета.ИНАГРО_Начисления КАК ОсновныеНачисленияРаботниковОрганизации
		|ГДЕ
		| ОсновныеНачисленияРаботниковОрганизации.ПериодРегистрации МЕЖДУ &ПериодРегистрации И &КонецПериодаРегистрации
		| И ОсновныеНачисленияРаботниковОрганизации.ВидРасчета.НачислениеЗаСчетФСС
		| И ОсновныеНачисленияРаботниковОрганизации.Результат <> 0
		|";
		ЗапросФСС.Текст = ТекстЗапроса;
		ЗапросФСС.Выполнить();
		
		ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		| ВзаиморасчетыФСС.Документ КАК Документ
		|ПОМЕСТИТЬ ВТПолученоОтФСС
		|ИЗ  РегистрНакопления.ИНАГРО_ВзаиморасчетыПоНачислениямЗаСчетФСС КАК ВзаиморасчетыФСС
		|ГДЕ
		|	ВзаиморасчетыФСС.Документ.ПериодРегистрации МЕЖДУ &ПериодРегистрации И &КонецПериодаРегистрации 
		|	И ВзаиморасчетыФСС.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
		|";
		ЗапросФСС.Текст = ТекстЗапроса;
		ЗапросФСС.Выполнить();
		
		ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		| НачисленияФСС.Документ КАК Документ
		|ИЗ  ВТНачисленияФСС КАК НачисленияФСС
		| ЛЕВОЕ СОЕДИНЕНИЕ
		| ВТПолученоОтФСС КАК ПолученоОтФСС
		| ПО НачисленияФСС.Документ = ПолученоОтФСС.Документ
		|ГДЕ
		|	ПолученоОтФСС.Документ ЕСТЬ NULL
		|";
		ЗапросФСС.Текст = ТекстЗапроса;
		НеоплаченоФСС = ЗапросФСС.Выполнить().Выгрузить().ВыгрузитьКолонку("Документ");
		ТекстНеоплаченоФСС = " " + ТекстНеоплаченоФСС;
	Иначе
		НеоплаченоФСС = Новый Массив();
	КонецЕсли;	
	
	ЗапросРЛ.УстановитьПараметр("НеоплаченоФСС",  НеоплаченоФСС);
	ЗапросРЛ.УстановитьПараметр("ТекстНеоплаченоФСС",  ТекстНеоплаченоФСС);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	НачисленияУдержания.ВидДвижения КАК ВидДвижения,
	|	НачисленияУдержания.НомерСтроки КАК НомерСтроки,
	|	НачисленияУдержания.Сотрудник КАК Сотрудник,
	|	НачисленияУдержания.ВидРасчета КАК ВидРасчета,
	|	НачисленияУдержания.ПорядокВидаРасчета КАК ПорядокВидаРасчета,
	|	НачисленияУдержания.БазовыйПериодНачало КАК БазовыйПериодНачало,
	|	НачисленияУдержания.БазовыйПериодКонец КАК БазовыйПериодКонец,
	|	НачисленияУдержания.ОтработаноДней КАК ОтработаноДней,
	|	НачисленияУдержания.ОтработаноЧасов КАК ОтработаноЧасов,
	|	НачисленияУдержания.ОплаченоДней КАК ОплаченоДней,
	|	НачисленияУдержания.ОплаченоЧасов КАК ОплаченоЧасов,
	|	НачисленияУдержания.Начисления КАК Начисления,
	|	НачисленияУдержания.Удержания КАК Удержания,
	|	Сальдо.СуммаВзаиморасчетовНачальныйОстаток КАК СуммаВзаиморасчетовНачальныйОстаток,
	|	Сальдо.СуммаВзаиморасчетовКонечныйОстаток КАК СуммаВзаиморасчетовКонечныйОстаток,
	|	НачисленияУдержания.Регистратор,
	|	ПРЕДСТАВЛЕНИЕ(НачисленияУдержания.Регистратор) КАК ОписаниеРегистратора
	|ИЗ
	|	(ВЫБРАТЬ
	|		1 КАК ВидДвижения,
	|		ОсновныеНачисленияРаботниковОрганизации.Регистратор КАК Регистратор,
	|		ОсновныеНачисленияРаботниковОрганизации.Организация КАК Организация,
	|		ОсновныеНачисленияРаботниковОрганизации.ПериодРегистрации КАК ПериодРегистрации,
	|		ОсновныеНачисленияРаботниковОрганизации.Сотрудник КАК Сотрудник,
	|		ВЫБОР КОГДА ОсновныеНачисленияРаботниковОрганизации.ДокументОснование ССЫЛКА Документ.ИНАГРО_ЗаменыРаботниковОрганизаций 
	|				И ОсновныеНачисленияРаботниковОрганизации.ДокументОснование.ВидРасчета = ЗНАЧЕНИЕ(ПланВидовРасчета.ИНАГРО_Начисления.Замещение)
	|				ТОГДА ""Замена: ""
	|			 КОГДА ОсновныеНачисленияРаботниковОрганизации.ДокументОснование ССЫЛКА Документ.ИНАГРО_ЗаменыРаботниковОрганизаций 
	|				И ОсновныеНачисленияРаботниковОрганизации.ДокументОснование.ВидРасчета = ЗНАЧЕНИЕ(ПланВидовРасчета.ИНАГРО_Начисления.Совмещение)
	|				ТОГДА ""Совмещение: ""
	|				ИНАЧЕ """"
	|		КОНЕЦ
	|		+ ОсновныеНачисленияРаботниковОрганизации.ВидРасчета.Наименование + ВЫБОР
	|			КОГДА ЕСТЬNULL(ОсновныеНачисленияРаботниковОрганизации.Сотрудник.ИНАГРО_ВидЗанятости, Значение(Перечисление.ВидыЗанятости.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.ВнутреннееСовместительство)
	|				ТОГДА """"
	|			ИНАЧЕ " + НСтр("ru='"" (по внутр. совмест-ву)""';uk='"" (по внутр. сумісництву)""'") + "
	|		КОНЕЦ
	|		 + ВЫБОР
	|			КОГДА ОсновныеНачисленияРаботниковОрганизации.ВидРасчета.НачислениеЗаСчетФСС И ОсновныеНачисленияРаботниковОрганизации.Регистратор В (&НеоплаченоФСС)
	|				ТОГДА &ТекстНеоплаченоФСС
	|			ИНАЧЕ """"
	|		КОНЕЦ КАК ВидРасчета,
	|		""А"" + ОсновныеНачисленияРаботниковОрганизации.ВидРасчета.Код КАК ПорядокВидаРасчета,
	|		ОсновныеНачисленияРаботниковОрганизации.НомерСтроки КАК НомерСтроки,
	|		ОсновныеНачисленияРаботниковОрганизации.ПериодДействияНачало КАК БазовыйПериодНачало,
	|		ОсновныеНачисленияРаботниковОрганизации.ПериодДействияКонец КАК БазовыйПериодКонец,
	|		ОсновныеНачисленияРаботниковОрганизации.ОтработаноДней КАК ОтработаноДней,
	|		ОсновныеНачисленияРаботниковОрганизации.ОтработаноЧасов КАК ОтработаноЧасов,
	|		ВЫБОР
	|			КОГДА ОсновныеНачисленияРаботниковОрганизации.ВидУчетаВремениДляСредней = ЗНАЧЕНИЕ(Перечисление.ИНАГРО_ВидыУчетаВремениДляСредней.ПоРабочимДням)
	|				ИЛИ ОсновныеНачисленияРаботниковОрганизации.ВидУчетаВремениДляСредней = ЗНАЧЕНИЕ(Перечисление.ИНАГРО_ВидыУчетаВремениДляСредней.ПоКалендарнымДням)
	|				ТОГДА ОсновныеНачисленияРаботниковОрганизации.ОплаченоДнейЧасов
	|			КОГДА ОсновныеНачисленияРаботниковОрганизации.ВидУчетаВремениДляСредней = ЗНАЧЕНИЕ(Перечисление.ИНАГРО_ВидыУчетаВремениДляСредней.ПоРабочимЧасам)
	|				ТОГДА 0
	|			КОГДА ОсновныеНачисленияРаботниковОрганизации.ВидУчетаВремени = ЗНАЧЕНИЕ(Перечисление.ИНАГРО_ВидыУчетаВремени.ПоДням)
	|				ТОГДА ОсновныеНачисленияРаботниковОрганизации.ОплаченоДнейЧасов
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК ОплаченоДней,
	|		ВЫБОР
	|			КОГДА ОсновныеНачисленияРаботниковОрганизации.ВидУчетаВремениДляСредней = ЗНАЧЕНИЕ(Перечисление.ИНАГРО_ВидыУчетаВремениДляСредней.ПоРабочимДням)
	|				ИЛИ ОсновныеНачисленияРаботниковОрганизации.ВидУчетаВремениДляСредней = ЗНАЧЕНИЕ(Перечисление.ИНАГРО_ВидыУчетаВремениДляСредней.ПоКалендарнымДням)
	|				ТОГДА 0
	|			КОГДА ОсновныеНачисленияРаботниковОрганизации.ВидУчетаВремениДляСредней = ЗНАЧЕНИЕ(Перечисление.ИНАГРО_ВидыУчетаВремениДляСредней.ПоРабочимЧасам)
	|				ТОГДА ОсновныеНачисленияРаботниковОрганизации.ОплаченоДнейЧасов
	|			КОГДА ОсновныеНачисленияРаботниковОрганизации.ВидУчетаВремени = ЗНАЧЕНИЕ(Перечисление.ИНАГРО_ВидыУчетаВремени.ПоЧасам)
	|			ИЛИ ОсновныеНачисленияРаботниковОрганизации.ВидРасчета.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаНачислений.ДоплатаЗаВечерниеЧасы)
	|			ИЛИ ОсновныеНачисленияРаботниковОрганизации.ВидРасчета.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаНачислений.ДоплатаЗаНочныеЧасы)
	|				ТОГДА ОсновныеНачисленияРаботниковОрганизации.ОплаченоДнейЧасов
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК ОплаченоЧасов,
	|		ОсновныеНачисленияРаботниковОрганизации.Результат КАК Начисления, 
	|		0 КАК Удержания,	
	|		NULL КАК СуммаВзаиморасчетовНачальныйОстаток,
	|		NULL КАК СуммаВзаиморасчетовКонечныйОстаток
	|	ИЗ
	|		РегистрРасчета.ИНАГРО_Начисления КАК ОсновныеНачисленияРаботниковОрганизации
	|	ГДЕ
	|		ОсновныеНачисленияРаботниковОрганизации.ПериодРегистрации МЕЖДУ &ПериодРегистрации И &КонецПериодаРегистрации
	|		И ОсновныеНачисленияРаботниковОрганизации.Результат <> 0
	|		И ОсновныеНачисленияРаботниковОрганизации.Организация = &Организация
	|		И ОсновныеНачисленияРаботниковОрганизации.Сотрудник = &Работник";
	
	Если ИсключитьДанныеПоРегистратору Тогда
		ТекстЗапроса = ТекстЗапроса+"
		|И ОсновныеНачисленияРаботниковОрганизации.Регистратор <> &Ссылка";
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса+"
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		5,
	|		УдержанияРаботниковОрганизации.Регистратор,
	|		УдержанияРаботниковОрганизации.Организация,
	|		УдержанияРаботниковОрганизации.ПериодРегистрации,
	|		УдержанияРаботниковОрганизации.Сотрудник,
	|		УдержанияРаботниковОрганизации.ВидРасчета.Наименование,
	|		""А"" + УдержанияРаботниковОрганизации.ВидРасчета.Код,
	|		NULL,
	|		УдержанияРаботниковОрганизации.БазовыйПериодНачало,
	|		УдержанияРаботниковОрганизации.БазовыйПериодКонец,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		0,
	|		УдержанияРаботниковОрганизации.Результат КАК Результат,
	|		NULL,
	|		NULL
	|	ИЗ
	|		РегистрРасчета.ИНАГРО_Удержания КАК УдержанияРаботниковОрганизации
	|	ГДЕ
	|		УдержанияРаботниковОрганизации.ПериодРегистрации МЕЖДУ &ПериодРегистрации И &КонецПериодаРегистрации
	|		И УдержанияРаботниковОрганизации.Организация = &Организация
	|		И УдержанияРаботниковОрганизации.Сотрудник = &Работник";
	
	Если ИсключитьДанныеПоРегистратору Тогда
		ТекстЗапроса = ТекстЗапроса+"
		|И УдержанияРаботниковОрганизации.Регистратор <> &Ссылка";
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса+"
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		3,
	|		ВзносыВФонды.Регистратор,
	|		ВзносыВФонды.Организация,
	|		ВзносыВФонды.ПериодРегистрации,
	|		ВзносыВФонды.Сотрудник,
	|		ВзносыВФонды.Налог,
	|		""Б"" + ВзносыВФонды.Налог.Код,
	|		NULL,
	|		НАЧАЛОПЕРИОДА(ВзносыВФонды.БазовыйПериодНачало, МЕСЯЦ),
	|		КОНЕЦПЕРИОДА(ВзносыВФонды.БазовыйПериодНачало, МЕСЯЦ),
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		0,
	|		СУММА(ВзносыВФонды.Результат),
	|		NULL,
	|		NULL
	|	ИЗ
	|		РегистрРасчета.ИНАГРО_ВзносыВФонды КАК ВзносыВФонды
	|	ГДЕ
	|		ВзносыВФонды.ПериодРегистрации МЕЖДУ &ПериодРегистрации И &КонецПериодаРегистрации
	|		И ВзносыВФонды.ВидРасчета.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаНачислений.Взносы)
	|		И ВзносыВФонды.Организация = &Организация
	|		И ВзносыВФонды.Сотрудник = &Работник
	|		И ВзносыВФонды.Результат <> 0";
	
	Если ИсключитьДанныеПоРегистратору Тогда
		ТекстЗапроса = ТекстЗапроса+"
		|И ВзносыВФонды.Регистратор <> &Ссылка";
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса+"
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ВзносыВФонды.Организация,
	|		ВзносыВФонды.ПериодРегистрации,
	|		НАЧАЛОПЕРИОДА(ВзносыВФонды.БазовыйПериодНачало, МЕСЯЦ),
	|		КОНЕЦПЕРИОДА(ВзносыВФонды.БазовыйПериодНачало, МЕСЯЦ),
	|		ВзносыВФонды.Сотрудник,
	|		ВзносыВФонды.Налог,
	|		ВзносыВФонды.Регистратор
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		4,
	|		ВзаиморасчетыПоНДФЛ.Регистратор,
	|		ВзаиморасчетыПоНДФЛ.Организация,
	|		НАЧАЛОПЕРИОДА(ВзаиморасчетыПоНДФЛ.Период, МЕСЯЦ),
	|		ВзаиморасчетыПоНДФЛ.Контрагент,
	|		ВЫБОР 
	|		 КОГДА ВзаиморасчетыПоНДФЛ.ДоходНДФЛ.ВидСтавкиРезидента = Значение(Перечисление.ВидыСтавокНДФЛ.ВоенныйСбор)
	|		 ТОГДА """ + НСтр("ru='Военный сбор ';uk='Військовий збір '",КодЯзыкаПечать) + """
	|		 ИНАЧЕ """ + НСтр("ru='НДФЛ ';uk='ПДФО '",КодЯзыкаПечать) + """
	|       КОНЕЦ,
	|		""Б"",
	|		NULL,
	|		НАЧАЛОПЕРИОДА(ВзаиморасчетыПоНДФЛ.НалоговыйПериод, МЕСЯЦ),
	|		КОНЕЦПЕРИОДА(ВзаиморасчетыПоНДФЛ.НалоговыйПериод, МЕСЯЦ),
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		0,
	|		СУММА(ВзаиморасчетыПоНДФЛ.Налог),
	|		NULL,
	|		NULL
	|	ИЗ
	|		РегистрНакопления.ВзаиморасчетыПоНДФЛ КАК ВзаиморасчетыПоНДФЛ
	|	ГДЕ
	|		ВзаиморасчетыПоНДФЛ.Период МЕЖДУ &ПериодРегистрации И &КонецПериодаРегистрации
	|		И ВзаиморасчетыПоНДФЛ.ВидДвижения = &Приход
	|		И ВзаиморасчетыПоНДФЛ.Организация = &Организация
	|		И ВзаиморасчетыПоНДФЛ.Контрагент = &Работник";
	
	Если ИсключитьДанныеПоРегистратору Тогда
		ТекстЗапроса = ТекстЗапроса+"
		|И ВзаиморасчетыПоНДФЛ.Регистратор <> &Ссылка";
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса+"
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ВзаиморасчетыПоНДФЛ.Организация,
	|		НАЧАЛОПЕРИОДА(ВзаиморасчетыПоНДФЛ.Период, МЕСЯЦ),
	|		НАЧАЛОПЕРИОДА(ВзаиморасчетыПоНДФЛ.НалоговыйПериод, МЕСЯЦ),
	|		КОНЕЦПЕРИОДА(ВзаиморасчетыПоНДФЛ.НалоговыйПериод, МЕСЯЦ),
	|		ВзаиморасчетыПоНДФЛ.Контрагент,
	|		ВЫБОР 
	|		 КОГДА ВзаиморасчетыПоНДФЛ.ДоходНДФЛ.ВидСтавкиРезидента = Значение(Перечисление.ВидыСтавокНДФЛ.ВоенныйСбор)
	|		 ТОГДА """ + НСтр("ru='Военный сбор ';uk='Військовий збір '",КодЯзыкаПечать) + """
	|		 ИНАЧЕ """ + НСтр("ru='НДФЛ ';uk='ПДФО '",КодЯзыкаПечать) + """
	|       КОНЕЦ,
	|		ВзаиморасчетыПоНДФЛ.Регистратор";
		
	ТекстЗапроса = ТекстЗапроса+"
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		8,
	|		Взаиморасчеты.Регистратор,
	|		Взаиморасчеты.Организация,
	|		НАЧАЛОПЕРИОДА(Взаиморасчеты.Период, МЕСЯЦ),
	|		Взаиморасчеты.Сотрудник,
	|		Взаиморасчеты.Ведомость.ВидВыплаты,
	|		""Г"",
	|		NULL,
	|		НАЧАЛОПЕРИОДА(Взаиморасчеты.ПериодВзаиморасчетов, МЕСЯЦ),
	|		КОНЕЦПЕРИОДА(Взаиморасчеты.ПериодВзаиморасчетов, МЕСЯЦ),
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		0,
	|		СУММА(Взаиморасчеты.СуммаВзаиморасчетов - Взаиморасчеты.СуммаОкругления),
	|		NULL,
	|		NULL
	|	ИЗ
	|		РегистрНакопления.ВзаиморасчетыССотрудниками КАК Взаиморасчеты
	|	ГДЕ
	|		Взаиморасчеты.КодОперации В (&ПарамКодыОперацииВыплата)
	|		И Взаиморасчеты.СуммаВзаиморасчетов <> 0 
	|		И Взаиморасчеты.Период МЕЖДУ &ПериодРегистрации И &КонецПериодаРегистрации
	|		И Взаиморасчеты.Организация = &Организация
	|		И Взаиморасчеты.Сотрудник = &Работник";
	
	Если ИсключитьДанныеПоРегистратору Тогда
		ТекстЗапроса = ТекстЗапроса+"
		|И Взаиморасчеты.Регистратор <> &Ссылка";
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса+"
	|	
	|	СГРУППИРОВАТЬ ПО
	|		Взаиморасчеты.Организация,
	|		Взаиморасчеты.Сотрудник,
	|		Взаиморасчеты.Ведомость.ВидВыплаты,
	|		НАЧАЛОПЕРИОДА(Взаиморасчеты.Период, МЕСЯЦ),
	|		НАЧАЛОПЕРИОДА(Взаиморасчеты.ПериодВзаиморасчетов, МЕСЯЦ),
	|		КОНЕЦПЕРИОДА(Взаиморасчеты.ПериодВзаиморасчетов, МЕСЯЦ),
	|	    Взаиморасчеты.Регистратор) КАК НачисленияУдержания
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			СУММА(Сальдо.СуммаВзаиморасчетовНачальныйОстаток) КАК СуммаВзаиморасчетовНачальныйОстаток,
	|			СУММА(Сальдо.СуммаВзаиморасчетовКонечныйОстаток) КАК СуммаВзаиморасчетовКонечныйОстаток
	|		ИЗ
	|			(ВЫБРАТЬ
	|				ВзаиморасчетыСРаботникамиОрганизацииОстаткиИОбороты.СуммаВзаиморасчетовНачальныйОстаток КАК СуммаВзаиморасчетовНачальныйОстаток,
	|				ВзаиморасчетыСРаботникамиОрганизацииОстаткиИОбороты.СуммаВзаиморасчетовКонечныйОстаток КАК СуммаВзаиморасчетовКонечныйОстаток
	|			ИЗ
	|				РегистрНакопления.ВзаиморасчетыССотрудниками.ОстаткиИОбороты(
	|					&ПериодРегистрации,
	|					&КонецПериодаРегистрации,
	|					Месяц,
	|					,
	|					Организация = &Организация
	|						И Сотрудник = &Работник) КАК ВзаиморасчетыСРаботникамиОрганизацииОстаткиИОбороты) КАК Сальдо) КАК Сальдо
	|		ПО (ИСТИНА)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВидДвижения,
	|	ПорядокВидаРасчета,
	|	ВидРасчета,
	|	БазовыйПериодНачало";
		
	ЗапросРЛ.Текст		= ТекстЗапроса;
	РезультатЗапроса	= ЗапросРЛ.Выполнить();
	
	Макет				= УправлениеПечатью.МакетПечатнойФормы("Документ.ИНАГРО_НачислениеЗарплатыРаботникамОрганизаций.ПФ_MXL_РасчетныйЛисток");

	
	// печать производится на языке, указанном в настройках пользователя	  
	КодЯзыкаПечать = Локализация.КодЯзыкаИнформационнойБазы();
	Макет.КодЯзыкаМакета = КодЯзыкаПечать;


	ОбластьШапка				= Макет.ПолучитьОбласть("Шапка");
	ОбластьЗаголовокТЧ			= Макет.ПолучитьОбласть("Заголовок");
	ОбластьНачисленоУдержано	= Макет.ПолучитьОбласть("НачисленоУдержано");
	ОбластьНатурДоходыВыплаты	= Макет.ПолучитьОбласть("НатурДоходыВыплаты");
	ОбластьВсего				= Макет.ПолучитьОбласть("Всего");
	ОбластьНатуральныеДоходы	= Макет.ПолучитьОбласть("НатуральныеДоходы");
	ОбластьПодвал				= Макет.ПолучитьОбласть("Подвал");
	
	КолонкаНачислено		= 2;
	КолонкаПериодНачислено	= 3;
	КолонкаОтработаноДней	= 5;
	КолонкаОтработаноЧасов	= 6;
	КолонкаОплаченоДней		= 7;
	КолонкаОплаченоЧасов	= 8;
	КолонкаСуммаНачислено	= 9;
	КолонкаУдержано			= 11;
	КолонкаПериодУдержано	= 14;
	КолонкаСуммаУдержано	= 16;
	
	Линия = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 1);
	
	НеНайденыЗаписиВЗапросе	= Истина;
		
	// В этот табличный документ будет собираться данные для РЛ
	ВременныйТабличныйДокумент = Новый ТабличныйДокумент;
	ФИОФизлица = ТекущийСотрудник.Наименование;
	
	Если ДобавитьДанныеИзДокумента Тогда
		// К результату запроса необходимо добавить данные из табличных полей документа
		СтруктураПоиска    = Новый Структура("Сотрудник",ТекущийСотрудник);
		ТаблицаРезультатовЗапроса = РезультатЗапроса.Выгрузить();
		
		Если ТаблицаРезультатовЗапроса.Количество()>0 Тогда
			СуммаНаНачалоПериода = ТаблицаРезультатовЗапроса[0].СуммаВзаиморасчетовНачальныйОстаток;
			Если НЕ ЗначениеЗаполнено(СуммаНаНачалоПериода) Тогда
				СуммаНаНачалоПериода = 0;
			КонецЕсли; 
		Иначе	
			СуммаНаНачалоПериода = 0;
			ЗапросСуммаНаНачалоПериода = Новый Запрос;
			ЗапросСуммаНаНачалоПериода.УстановитьПараметр("Работник", ТекущийСотрудник);
			ЗапросСуммаНаНачалоПериода.УстановитьПараметр("ПериодРегистрации",			ПериодРегистрации);
			ЗапросСуммаНаНачалоПериода.УстановитьПараметр("КонецПериодаРегистрации",		КонецМесяца(ПериодРегистрации));
			ЗапросСуммаНаНачалоПериода.УстановитьПараметр("Организация",					Организация);

			ЗапросСуммаНаНачалоПериода.Текст =
			"ВЫБРАТЬ
			|	СУММА(Сальдо.СуммаВзаиморасчетовНачальныйОстаток) КАК СуммаВзаиморасчетовНачальныйОстаток			
			|ИЗ
			|	(ВЫБРАТЬ
			|		ВзаиморасчетыСРаботникамиОрганизацииОстаткиИОбороты.СуммаВзаиморасчетовНачальныйОстаток КАК СуммаВзаиморасчетовНачальныйОстаток
			|	ИЗ
			|		РегистрНакопления.ВзаиморасчетыССотрудниками.ОстаткиИОбороты(
			|			&ПериодРегистрации,
			|			&КонецПериодаРегистрации,
			|			Месяц,
			|			,
			|			Организация = &Организация
			|			И Сотрудник = &Работник) КАК ВзаиморасчетыСРаботникамиОрганизацииОстаткиИОбороты) КАК Сальдо    ";
			Выборка = ЗапросСуммаНаНачалоПериода.Выполнить().Выбрать();
			Пока Выборка.Следующий() Цикл
				СуммаНаНачалоПериода = 	Выборка.СуммаВзаиморасчетовНачальныйОстаток;
			КонецЦикла
			
		КонецЕсли;
		Если ЗначениеЗаполнено(СуммаНаНачалоПериода) Тогда
			СуммаНаКонецПериода = СуммаНаНачалоПериода;
		Иначе
			СуммаНаКонецПериода = 0;
			СуммаНаНачалоПериода = 0;
		КонецЕсли; 			
		ТекстПериода = Формат(ПериодРегистрации,НСтр("ru='ДФ = 'ММММ гггг ''г.''';Л=ru_RU';ua='ДФ = 'ММММ гггг ''р.''';Л=uk_UA'", КодЯзыкаПечать));
		
		// Очистим временный табличный документ
		ВременныйТабличныйДокумент.Очистить();
		
		ОбластьШапка.Параметры.Работник = НСтр("ru='Работник: ';uk='Працівник: '",КодЯзыкаПечать) + ФИОФизлица;
		ОбластьШапка.Параметры.КодПоДРФО = НСтр("ru='Код по ДРФО: ';uk='Код за ДРФО: '",КодЯзыкаПечать) + ТекущийСотрудник.ФизическоеЛицо.КодПоДРФО; 
		ВременныйТабличныйДокумент.Вывести(ОбластьШапка);

		ВременныйТабличныйДокумент.Вывести(ОбластьЗаголовокТЧ);
		ВременныйТабличныйДокумент.Вывести(ОбластьНачисленоУдержано);
			
		ВысотаТаблицы = ВременныйТабличныйДокумент.ВысотаТаблицы + 1;
			
		ВсегоНачисления = 0; КоличествоНачислений = 0;
		ВсегоУдержания = 0; КоличествоУдержаний  = 0;
		ИтогиНачисленийИУдержанийВыведены = Ложь;

		// Добавим основные начисления
		Строки = Начисления.НайтиСтроки(СтруктураПоиска);
		Для Каждого СтрокаНачислений Из Строки Цикл
			
			мВидЗанятости = "";
			Если СтрокаНачислений.Назначение.ОсновноеНазначение = СтрокаНачислений.Сотрудник Тогда
				мВидЗанятости = НСтр("ru=' (по внутр. совмест-ву)';uk=' (по внутр. суміс-ву)'",КодЯзыкаПечать)
			КонецЕсли;
				
			СтрокаТаблицы = ТаблицаРезультатовЗапроса.Добавить();
			СтрокаТаблицы.ВидДвижения			= 1;
			ДопСтрока = "";
			Если  СтрокаНачислений.ДокументОснование <> Неопределено
				И СтрокаНачислений.ДокументОснование.Метаданные().Имя = "ИНАГРО_ЗаменыРаботниковОрганизаций" Тогда
				Если СтрокаНачислений.ДокументОснование.ВидРасчета = ПланыВидовРасчета.ИНАГРО_Начисления.Замещение Тогда
					ДопСтрока = НСтр("ru='Замена: ';uk='Заміна: '",КодЯзыкаПечать);
				Иначе
					ДопСтрока = НСтр("ru='Совмещение: ';uk='Сумісництво: '",КодЯзыкаПечать);
				КонецЕсли;
			КонецЕсли;
			СтрокаТаблицы.ВидРасчета			= ДопСтрока + СтрокаНачислений.ВидРасчета.Наименование + мВидЗанятости;

			СтрокаТаблицы.ПорядокВидаРасчета	= "А" + СтрокаНачислений.ВидРасчета.Код;
			СтрокаТаблицы.БазовыйПериодНачало	= СтрокаНачислений.ДатаНачала;
			СтрокаТаблицы.БазовыйПериодКонец	= КонецДня(СтрокаНачислений.ДатаОкончания);
			СтрокаТаблицы.ОтработаноДней		= СтрокаНачислений.ОтработаноДней;
			СтрокаТаблицы.ОтработаноЧасов		= СтрокаНачислений.ОтработаноЧасов;
			Если    СтрокаНачислений.ВидРасчета.СпособРасчета = Перечисления.СпособыРасчетаНачислений.ПоМесячнойТарифнойСтавкеПоДням
				ИЛИ СтрокаНачислений.ВидРасчета.СпособРасчета = Перечисления.СпособыРасчетаНачислений.ПоДневнойТарифнойСтавке
				Тогда
				ВидУчетаВремени = Перечисления.ИНАГРО_ВидыУчетаВремени.ПоДням;
			Иначе	
				ВидУчетаВремени = ВидУчетаВремени = Перечисления.ИНАГРО_ВидыУчетаВремени.ПоЧасам;
			КонецЕсли;
			СтрокаТаблицы.ОплаченоДней			= ?(ВидУчетаВремени = Перечисления.ИНАГРО_ВидыУчетаВремени.ПоДням, СтрокаНачислений.ОплаченоДнейЧасов, 0);
			СтрокаТаблицы.ОплаченоЧасов			= ?(ВидУчетаВремени = Перечисления.ИНАГРО_ВидыУчетаВремени.ПоЧасам 
													ИЛИ СтрокаНачислений.ВидРасчета.СпособРасчета = Перечисления.СпособыРасчетаНачислений.ДоплатаЗаВечерниеЧасы
													ИЛИ СтрокаНачислений.ВидРасчета.СпособРасчета = Перечисления.СпособыРасчетаНачислений.ДоплатаЗаНочныеЧасы
													, СтрокаНачислений.ОплаченоДнейЧасов, 0);
			СтрокаТаблицы.Начисления			= СтрокаНачислений.Результат;
			СтрокаТаблицы.Удержания				= 0;
			СтрокаТаблицы.Регистратор			= Неопределено;
			
		КонецЦикла;
	
		// добавим Взносы
		СтрокиВзносы = Взносы.НайтиСтроки(СтруктураПоиска);
		Для Каждого СтрокаВзносы Из СтрокиВзносы Цикл
			
			Если СтрокаВзносы.Результат = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаТаблицы = ТаблицаРезультатовЗапроса.Добавить();
			СтрокаТаблицы.ВидДвижения			= 3;
			СтрокаТаблицы.ВидРасчета			= СтрокаВзносы.Налог;
			СтрокаТаблицы.ПорядокВидаРасчета	= "Б"+СтрокаВзносы.Налог.Код;
			СтрокаТаблицы.БазовыйПериодНачало	= СтрокаВзносы.БазовыйПериодНачало;
			СтрокаТаблицы.БазовыйПериодКонец	= КонецМесяца(СтрокаВзносы.БазовыйПериодНачало);
			СтрокаТаблицы.ОтработаноДней		= 0;
			СтрокаТаблицы.ОтработаноЧасов		= 0;
			СтрокаТаблицы.ОплаченоДней			= 0;
			СтрокаТаблицы.ОплаченоЧасов			= 0;
			СтрокаТаблицы.Начисления			= 0;
			СтрокаТаблицы.Удержания				= СтрокаВзносы.Результат;
			СтрокаТаблицы.Регистратор			= Неопределено;
			
		КонецЦикла;
			
		// добавим НДФЛ
		СтрокиНДФЛ = НДФЛ.НайтиСтроки(СтруктураПоиска);
		Для Каждого СтрокаНДФЛ Из СтрокиНДФЛ Цикл
				
			СтрокаТаблицы = ТаблицаРезультатовЗапроса.Добавить();
			
			СтрокаТаблицы.ВидДвижения			= 3;
			// ВОЕННЫЙ СБОР
			Если СтрокаНДФЛ.ДоходНДФЛ.ВидСтавкиРезидента = Перечисления.ВидыСтавокНДФЛ.ВоенныйСбор Тогда     
				СтрокаТаблицы.ВидРасчета			= НСтр("ru='Военный сбор';uk='Військовий збір'",КодЯзыкаПечать);
			Иначе	
				СтрокаТаблицы.ВидРасчета			= НСтр("ru='НДФЛ';uk='ПДФО'",КодЯзыкаПечать);
			КонецЕсли;	
			СтрокаТаблицы.ПорядокВидаРасчета	= "В";
			СтрокаТаблицы.БазовыйПериодНачало	= СтрокаНДФЛ.НалоговыйПериод;
			СтрокаТаблицы.БазовыйПериодКонец	= КонецМесяца(СтрокаНДФЛ.НалоговыйПериод);
			СтрокаТаблицы.ОтработаноДней		= 0;
			СтрокаТаблицы.ОтработаноЧасов		= 0;
			СтрокаТаблицы.ОплаченоДней			= 0;
			СтрокаТаблицы.ОплаченоЧасов			= 0;
			СтрокаТаблицы.Начисления			= 0;
			СтрокаТаблицы.Удержания				= СтрокаНДФЛ.Налог;
			СтрокаТаблицы.Регистратор			= Неопределено;
			
		КонецЦикла;
			
		// добавим удержания
		СтрокиУдержано = Удержания.НайтиСтроки(СтруктураПоиска);
		Для Каждого СтрокаУдержаний Из СтрокиУдержано Цикл
			
			СтрокаТаблицы = ТаблицаРезультатовЗапроса.Добавить();
			СтрокаТаблицы.ВидДвижения			= 4;
			СтрокаТаблицы.ВидРасчета			= СтрокаУдержаний.ВидРасчета.Наименование;
			СтрокаТаблицы.ПорядокВидаРасчета	= "Г" + СтрокаУдержаний.ВидРасчета.Код;
			СтрокаТаблицы.БазовыйПериодНачало	= СтрокаУдержаний.ДатаНачала;
			СтрокаТаблицы.БазовыйПериодКонец	= КонецДня(СтрокаУдержаний.ДатаОкончания);
			СтрокаТаблицы.ОтработаноДней		= 0;
			СтрокаТаблицы.ОтработаноЧасов		= 0;
			СтрокаТаблицы.ОплаченоДней			= 0;
			СтрокаТаблицы.ОплаченоЧасов			= 0;
			СтрокаТаблицы.Начисления			= 0;
			СтрокаТаблицы.Удержания				= СтрокаУдержаний.Результат;
			СтрокаТаблицы.Регистратор			= Неопределено;
				
		КонецЦикла;
			
		ТаблицаРезультатовЗапроса.Сортировать("ВидДвижения, ПорядокВидаРасчета, ВидРасчета, БазовыйПериодНачало"); 
		
		Для Каждого СтрокаТаблицы Из ТаблицаРезультатовЗапроса Цикл
			
			Если ЗначениеЗаполнено(СтрокаТаблицы.БазовыйПериодКонец) Тогда
				ДатаОкончанияПериода = СтрокаТаблицы.БазовыйПериодКонец
			Иначе
				ДатаОкончанияПериода = КонецМесяца(СтрокаТаблицы.БазовыйПериодНачало);
			КонецЕсли;
			
			Если СтрокаТаблицы.ВидДвижения < 3 Тогда
				НомерСтроки = ВысотаТаблицы + КоличествоНачислений;
				ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаНачислено).Текст = СтрокаТаблицы.ВидРасчета;
				
				Если СтрокаТаблицы.Регистратор <> Неопределено Тогда
					ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаНачислено).Примечание.Текст = СтрокаТаблицы.ОписаниеРегистратора;
					ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаНачислено).Расшифровка = СтрокаТаблицы.Регистратор;					
				КонецЕсли;
				
				ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаНачислено).РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Переносить;
				ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаПериодНачислено, НомерСтроки, КолонкаПериодНачислено).Текст = ОписаниеПериода(СтрокаТаблицы.БазовыйПериодНачало, ДатаОкончанияПериода);
				ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаПериодНачислено, НомерСтроки, КолонкаПериодНачислено).РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Переносить;
				ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаПериодНачислено, НомерСтроки, КолонкаПериодНачислено).ГоризонтальноеПоложение = ГоризонтальноеПоложение.Право;
				ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаПериодНачислено, НомерСтроки, КолонкаОтработаноДней - 1).Объединить();
				ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаОтработаноДней).Текст	= СтрокаТаблицы.ОтработаноДней;
				ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаОтработаноЧасов).Текст	= СтрокаТаблицы.ОтработаноЧасов;
				ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаОплаченоДней).Текст		= СтрокаТаблицы.ОплаченоДней;
				ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаОплаченоЧасов).Текст		= СтрокаТаблицы.ОплаченоЧасов;
				ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаСуммаНачислено, НомерСтроки, КолонкаСуммаНачислено).Текст = Формат(СтрокаТаблицы.Начисления,"ЧЦ=15; ЧДЦ=2");
				ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаСуммаНачислено, НомерСтроки, КолонкаСуммаНачислено).ГоризонтальноеПоложение = ГоризонтальноеПоложение.Право;
				ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаСуммаНачислено, НомерСтроки, КолонкаУдержано - 1).Объединить();
				ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаУдержано , НомерСтроки, КолонкаПериодУдержано - 1).Объединить();
				ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаПериодУдержано, НомерСтроки, КолонкаСуммаУдержано - 1).Объединить();
				ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаСуммаУдержано, НомерСтроки, КолонкаСуммаУдержано + 1).Объединить();				
				ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаСуммаУдержано, НомерСтроки, КолонкаСуммаУдержано + 1).ГраницаСправа = Линия;
				ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаСуммаУдержано, НомерСтроки, КолонкаСуммаУдержано + 1).ГраницаСнизу = Линия;				
				
				КоличествоНачислений = КоличествоНачислений + 1;
				ВсегоНачисления = ВсегоНачисления + СтрокаТаблицы.Начисления;
				Если НеоплаченоФСС.Найти(СтрокаТаблицы.Регистратор) = Неопределено Тогда  
					СуммаНаКонецПериода = СуммаНаКонецПериода + СтрокаТаблицы.Начисления;
				КонецЕсли;
				
			ИначеЕсли СтрокаТаблицы.ВидДвижения < 6 Тогда
				
				НомерСтроки = ВысотаТаблицы + КоличествоУдержаний;
				ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаУдержано , НомерСтроки, КолонкаУдержано).Текст = СтрокаТаблицы.ВидРасчета;
				
				Если СтрокаТаблицы.Регистратор <> Неопределено Тогда
					ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаУдержано , НомерСтроки, КолонкаУдержано).Примечание.Текст = СтрокаТаблицы.ОписаниеРегистратора;
					ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаНачислено).Расшифровка = СтрокаТаблицы.Регистратор;					
				КонецЕсли;
				
				ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаУдержано , НомерСтроки, КолонкаУдержано).РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Переносить;
				ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаУдержано , НомерСтроки, КолонкаУдержано).ГоризонтальноеПоложение = ГоризонтальноеПоложение.Лево;
				ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаУдержано , НомерСтроки, КолонкаПериодУдержано - 1).Объединить();
				ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаПериодУдержано, НомерСтроки, КолонкаПериодУдержано).Текст = ОписаниеПериода(СтрокаТаблицы.БазовыйПериодНачало, ДатаОкончанияПериода);
				ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаПериодУдержано, НомерСтроки, КолонкаПериодУдержано).ГоризонтальноеПоложение = ГоризонтальноеПоложение.Право;
				ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаПериодУдержано, НомерСтроки, КолонкаПериодУдержано).РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Переносить;
				ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаПериодУдержано, НомерСтроки, КолонкаСуммаУдержано - 1).Объединить();
				ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаСуммаУдержано, НомерСтроки, КолонкаСуммаУдержано).Текст = Формат(СтрокаТаблицы.Удержания,"ЧЦ=15; ЧДЦ=2");
				ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаСуммаУдержано, НомерСтроки, КолонкаСуммаУдержано).ГоризонтальноеПоложение = ГоризонтальноеПоложение.Право;
				ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаСуммаУдержано, НомерСтроки, КолонкаСуммаУдержано + 1).Объединить();
				ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаСуммаУдержано, НомерСтроки, КолонкаСуммаУдержано + 1).ГраницаСправа = Линия;
				ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаСуммаУдержано, НомерСтроки, КолонкаСуммаУдержано + 1).ГраницаСнизу = Линия;
				
				КоличествоУдержаний = КоличествоУдержаний + 1;
				ВсегоУдержания = ВсегоУдержания + СтрокаТаблицы.Удержания;
				СуммаНаКонецПериода = СуммаНаКонецПериода - СтрокаТаблицы.Удержания;
				
			Иначе
			
				// Подведем итоги раздела начислений и удержаний
				// начнем раздел доходов в натуральной форме и выплат.
				Если Не ИтогиНачисленийИУдержанийВыведены Тогда
					КоличествоРасчетов = Макс(КоличествоНачислений,КоличествоУдержаний);
					Если КоличествоРасчетов > 0 Тогда
						РасчертитьРасчетныйЛисток(ВременныйТабличныйДокумент, ВысотаТаблицы, КоличествоРасчетов)
					КонецЕсли; 
					
					ОбластьВсего.Параметры.ВсегоНачисления = ВсегоНачисления;
					ОбластьВсего.Параметры.ВсегоУдержания  = ВсегоУдержания;
					
					ВременныйТабличныйДокумент.Вывести(ОбластьВсего);
					ИтогиНачисленийИУдержанийВыведены = Не ИтогиНачисленийИУдержанийВыведены;
					
					ВременныйТабличныйДокумент.Вывести(ОбластьНатурДоходыВыплаты);
					ВысотаТаблицы = ВременныйТабличныйДокумент.ВысотаТаблицы + 1;
					ВсегоНачисления = 0; КоличествоНачислений = 0;
					ВсегоУдержания = 0; КоличествоУдержаний  = 0;
					
				КонецЕсли;
				
				Если СтрокаТаблицы.ВидДвижения < 8 Тогда
					
					НомерСтроки = ВысотаТаблицы + КоличествоНачислений;
					ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаНачислено).Текст = СтрокаТаблицы.ВидРасчета;
					
					Если СтрокаТаблицы.Регистратор <> Неопределено Тогда
						ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаНачислено).Примечание.Текст = СтрокаТаблицы.ОписаниеРегистратора;
						ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаНачислено).Расшифровка = СтрокаТаблицы.Регистратор;					
					КонецЕсли;
					
					ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаНачислено).РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Переносить;
					ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаПериодНачислено, НомерСтроки, КолонкаПериодНачислено).Текст = ОписаниеПериода(СтрокаТаблицы.БазовыйПериодНачало, ДатаОкончанияПериода);
					ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаПериодНачислено, НомерСтроки, КолонкаПериодНачислено).РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Переносить;
					ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаПериодНачислено, НомерСтроки, КолонкаПериодНачислено).ГоризонтальноеПоложение = ГоризонтальноеПоложение.Право;
					ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаПериодНачислено, НомерСтроки, КолонкаОтработаноДней - 1).Объединить();
					ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаОтработаноДней).Текст	= СтрокаТаблицы.ОтработаноДней;
					ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаОтработаноЧасов).Текст	= СтрокаТаблицы.ОтработаноЧасов;
					ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаОплаченоДней).Текст		= СтрокаТаблицы.ОплаченоДней;
					ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаОплаченоЧасов).Текст		= СтрокаТаблицы.ОплаченоЧасов;
					ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаСуммаНачислено, НомерСтроки, КолонкаСуммаНачислено).Текст = Формат(СтрокаТаблицы.Начисления,"ЧЦ=15; ЧДЦ=2");
					ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаСуммаНачислено, НомерСтроки, КолонкаСуммаНачислено).ГоризонтальноеПоложение = ГоризонтальноеПоложение.Право;
					ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаСуммаНачислено, НомерСтроки, КолонкаУдержано - 1).Объединить();
					
					КоличествоНачислений = КоличествоНачислений + 1;
					ВсегоНачисления = ВсегоНачисления + СтрокаТаблицы.Начисления;
					СуммаНаКонецПериода = СуммаНаКонецПериода + СтрокаТаблицы.Начисления;
					
				Иначе // остались выплаты
					
					НомерСтроки = ВысотаТаблицы + КоличествоУдержаний;
					ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаУдержано , НомерСтроки, КолонкаУдержано).Текст = СтрокаТаблицы.ВидРасчета;
					
					Если СтрокаТаблицы.Регистратор <> Неопределено Тогда
						ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаУдержано , НомерСтроки, КолонкаУдержано).Примечание.Текст = СтрокаТаблицы.ОписаниеРегистратора;
						ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаНачислено).Расшифровка = СтрокаТаблицы.Регистратор;					
					КонецЕсли;
					
					ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаУдержано , НомерСтроки, КолонкаУдержано).РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Переносить;
					ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаУдержано , НомерСтроки, КолонкаУдержано).ГоризонтальноеПоложение = ГоризонтальноеПоложение.Лево;
					ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаУдержано , НомерСтроки, КолонкаПериодУдержано - 1).Объединить();
					ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаПериодУдержано, НомерСтроки, КолонкаПериодУдержано).Текст = ОписаниеПериода(СтрокаТаблицы.БазовыйПериодНачало, ДатаОкончанияПериода);
					ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаПериодУдержано, НомерСтроки, КолонкаПериодУдержано).ГоризонтальноеПоложение = ГоризонтальноеПоложение.Право;
					ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаПериодУдержано, НомерСтроки, КолонкаПериодУдержано).РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Переносить;
					ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаПериодУдержано, НомерСтроки, КолонкаСуммаУдержано - 1).Объединить();
					ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаСуммаУдержано, НомерСтроки, КолонкаСуммаУдержано).Текст = Формат(СтрокаТаблицы.Удержания,"ЧЦ=15; ЧДЦ=2");
					ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаСуммаУдержано, НомерСтроки, КолонкаСуммаУдержано).ГоризонтальноеПоложение = ГоризонтальноеПоложение.Право;
					ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаСуммаУдержано, НомерСтроки, КолонкаСуммаУдержано + 1).Объединить();
					
					КоличествоУдержаний = КоличествоУдержаний + 1;
					ВсегоУдержания = ВсегоУдержания + СтрокаТаблицы.Удержания;
					СуммаНаКонецПериода = СуммаНаКонецПериода - СтрокаТаблицы.Удержания;
					
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		// расчертим линиями низ расчетного листками
		КоличествоРасчетов = Макс(КоличествоНачислений,КоличествоУдержаний);
		Если КоличествоРасчетов > 0 Тогда
			РасчертитьРасчетныйЛисток(ВременныйТабличныйДокумент, ВысотаТаблицы, КоличествоРасчетов)
		КонецЕсли;
			
		Если Не ИтогиНачисленийИУдержанийВыведены Тогда // есть только начисления и удержания
			ОбластьВсего.Параметры.ВсегоНачисления = ВсегоНачисления;
			ОбластьВсего.Параметры.ВсегоУдержания  = ВсегоУдержания;
			ВременныйТабличныйДокумент.Вывести(ОбластьВсего);
			
		ИначеЕсли КоличествоРасчетов > 0 Тогда  // остались итоги по натуральным доходам и выплатам
			ОбластьНатуральныеДоходы.Параметры.ВсегоНачисления = ВсегоНачисления;
			ОбластьНатуральныеДоходы.Параметры.ВсегоУдержания  = ВсегоУдержания;
			ВременныйТабличныйДокумент.Вывести(ОбластьНатуральныеДоходы);
			
		КонецЕсли;
			
		Если СуммаНаНачалоПериода >= 0  Тогда
			ОбластьПодвал.Параметры.ТекстДолгНаНачалоПериода = НСтр("ru='Долг за организацией на начало месяца: ';uk='Борг за організацією на початок місяця: '",КодЯзыкаПечать);
			ОбластьПодвал.Параметры.СуммаДолгНаНачалоПериода = СуммаНаНачалоПериода;
		Иначе
			ОбластьПодвал.Параметры.ТекстДолгНаНачалоПериода = НСтр("ru='Долг за работником на начало месяца: ';uk='Борг за працівником на початок місяця: '",КодЯзыкаПечать);
			ОбластьПодвал.Параметры.СуммаДолгНаНачалоПериода = 0 - СуммаНаНачалоПериода;
		КонецЕсли;
				
		Если СуммаНаКонецПериода >= 0  Тогда
			ОбластьПодвал.Параметры.ТекстДолгНаКонецПериода = НСтр("ru='Долг за организацией на конец месяца: ';uk='Борг за організацією на кінець місяця: '",КодЯзыкаПечать);
			ОбластьПодвал.Параметры.СуммаДолгНаКонецПериода  = СуммаНаКонецПериода;
		Иначе
			ОбластьПодвал.Параметры.ТекстДолгНаКонецПериода = НСтр("ru='Долг за работником на конец месяца: ';uk='Борг за працівником на кінець місяця: '",КодЯзыкаПечать);
			ОбластьПодвал.Параметры.СуммаДолгНаКонецПериода  = 0 - СуммаНаКонецПериода;
		КонецЕсли;
				
		ВременныйТабличныйДокумент.Вывести(ОбластьПодвал);
		
	Иначе // выводим в отчет только данные запроса
			
		Выборка = РезультатЗапроса.Выбрать();
		Если Выборка.Количество() = 0 Тогда
			// нет данных в запросе
			Возврат ВременныйТабличныйДокумент;	
		КонецЕсли;
		
		ТекстПериода = Формат(ПериодРегистрации, НСтр("ru='ДФ = 'ММММ гггг ''г.''';Л=ru_RU';ua='ДФ = 'ММММ гггг ''р.''';Л=uk_UA'", КодЯзыкаПечать));
		
		// Очистим временный табличный документ
		ВременныйТабличныйДокумент.Очистить();
		
		ОбластьШапка.Параметры.Работник 	   = НСтр("ru='Работник: ';uk='Працівник: '",КодЯзыкаПечать) + ФИОФизлица;
		ОбластьШапка.Параметры.КодПоДРФО 	   = НСтр("ru='Код по ДРФО: ';uk='Код за ДРФО: '",КодЯзыкаПечать) + ТекущийСотрудник.ФизическоеЛицо.КодПоДРФО; 
		ВременныйТабличныйДокумент.Вывести(ОбластьШапка);

		ВременныйТабличныйДокумент.Вывести(ОбластьЗаголовокТЧ);
		ВременныйТабличныйДокумент.Вывести(ОбластьНачисленоУдержано);
			
		ВысотаТаблицы = ВременныйТабличныйДокумент.ВысотаТаблицы + 1;
			
		ВсегоНачисления = 0; КоличествоНачислений = 0;
		ВсегоУдержания = 0; КоличествоУдержаний  = 0;
		ИтогиНачисленийИУдержанийВыведены = Ложь;

		Пока Выборка.Следующий() Цикл
			
			Если ЗначениеЗаполнено(Выборка.БазовыйПериодКонец) Тогда
				ДатаОкончанияПериода = Выборка.БазовыйПериодКонец;
			Иначе
				ДатаОкончанияПериода = КонецМесяца(Выборка.БазовыйПериодНачало);
			КонецЕсли;
			
			Если Выборка.ВидДвижения < 3 Тогда
				НомерСтроки = ВысотаТаблицы + КоличествоНачислений;
				ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаНачислено).Текст = Выборка.ВидРасчета;
				Если Выборка.Регистратор <> Ссылка Тогда
					ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаНачислено).Примечание.Текст = Выборка.Регистратор;
					ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаНачислено).Расшифровка = Выборка.Регистратор;					
				КонецЕсли;
				ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаНачислено).РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Переносить;
				ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаПериодНачислено, НомерСтроки, КолонкаПериодНачислено).Текст = ОписаниеПериода(Выборка.БазовыйПериодНачало, ДатаОкончанияПериода);
				ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаПериодНачислено, НомерСтроки, КолонкаПериодНачислено).РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Переносить;
				ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаПериодНачислено, НомерСтроки, КолонкаПериодНачислено).ГоризонтальноеПоложение = ГоризонтальноеПоложение.Право;
				ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаПериодНачислено, НомерСтроки, КолонкаОтработаноДней - 1).Объединить();
				ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаОтработаноДней).Текст	= Выборка.ОтработаноДней;
				ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаОтработаноЧасов).Текст	= Выборка.ОтработаноЧасов;
				ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаОплаченоДней).Текст		= Выборка.ОплаченоДней;
				ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаОплаченоЧасов).Текст		= Выборка.ОплаченоЧасов;
				ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаСуммаНачислено, НомерСтроки, КолонкаСуммаНачислено).Текст = Формат(Выборка.Начисления,"ЧЦ=15; ЧДЦ=2");
				ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаСуммаНачислено, НомерСтроки, КолонкаСуммаНачислено).ГоризонтальноеПоложение = ГоризонтальноеПоложение.Право;
				ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаСуммаНачислено, НомерСтроки, КолонкаУдержано - 1).Объединить();
				ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаУдержано , НомерСтроки, КолонкаПериодУдержано - 1).Объединить();
				ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаПериодУдержано, НомерСтроки, КолонкаСуммаУдержано - 1).Объединить();
				ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаСуммаУдержано, НомерСтроки, КолонкаСуммаУдержано + 1).Объединить();				
				ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаСуммаУдержано, НомерСтроки, КолонкаСуммаУдержано + 1).ГраницаСправа = Линия;
				ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаСуммаУдержано, НомерСтроки, КолонкаСуммаУдержано + 1).ГраницаСнизу = Линия;
				
				КоличествоНачислений = КоличествоНачислений + 1;
				ВсегоНачисления = ВсегоНачисления + Выборка.Начисления;
					
			ИначеЕсли Выборка.ВидДвижения < 6 Тогда
					
				НомерСтроки = ВысотаТаблицы + КоличествоУдержаний;
				ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаУдержано , НомерСтроки, КолонкаУдержано).Текст = Выборка.ВидРасчета;
				Если Выборка.Регистратор <> Ссылка Тогда
					ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаУдержано , НомерСтроки, КолонкаУдержано).Примечание.Текст = Выборка.Регистратор;
					ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаНачислено).Расшифровка = Выборка.Регистратор;					
				КонецЕсли;
				ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаУдержано , НомерСтроки, КолонкаУдержано).РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Переносить;
				ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаУдержано , НомерСтроки, КолонкаУдержано).ГоризонтальноеПоложение = ГоризонтальноеПоложение.Лево;
				ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаУдержано , НомерСтроки, КолонкаПериодУдержано - 1).Объединить();
				ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаПериодУдержано, НомерСтроки, КолонкаПериодУдержано).Текст = ОписаниеПериода(Выборка.БазовыйПериодНачало, ДатаОкончанияПериода);
				ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаПериодУдержано, НомерСтроки, КолонкаПериодУдержано).ГоризонтальноеПоложение = ГоризонтальноеПоложение.Право;
				ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаПериодУдержано, НомерСтроки, КолонкаПериодУдержано).РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Переносить;
				ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаПериодУдержано, НомерСтроки, КолонкаСуммаУдержано - 1).Объединить();
				ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаСуммаУдержано, НомерСтроки, КолонкаСуммаУдержано).Текст = Формат(Выборка.Удержания,"ЧЦ=15; ЧДЦ=2");
				ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаСуммаУдержано, НомерСтроки, КолонкаСуммаУдержано).ГоризонтальноеПоложение = ГоризонтальноеПоложение.Право;								
				ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаСуммаУдержано, НомерСтроки, КолонкаСуммаУдержано + 1).Объединить();
				ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаСуммаУдержано, НомерСтроки, КолонкаСуммаУдержано + 1).ГраницаСправа = Линия;
				ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаСуммаУдержано, НомерСтроки, КолонкаСуммаУдержано + 1).ГраницаСнизу = Линия;
					
				КоличествоУдержаний = КоличествоУдержаний + 1;
				ВсегоУдержания = ВсегоУдержания + Выборка.Удержания;
					
			Иначе
					
				// Подведем итоги раздела начислений и удержаний
				// начнем раздел доходов в натуральной форме и выплат.
				Если Не ИтогиНачисленийИУдержанийВыведены Тогда
						
					КоличествоРасчетов = Макс(КоличествоНачислений,КоличествоУдержаний);
						
					Если КоличествоРасчетов > 0 Тогда
						РасчертитьРасчетныйЛисток(ВременныйТабличныйДокумент, ВысотаТаблицы, КоличествоРасчетов)
					КонецЕсли;
						
					ОбластьВсего.Параметры.ВсегоНачисления = ВсегоНачисления;
					ОбластьВсего.Параметры.ВсегоУдержания  = ВсегоУдержания;
						
					ВременныйТабличныйДокумент.Вывести(ОбластьВсего);
					ИтогиНачисленийИУдержанийВыведены = Не ИтогиНачисленийИУдержанийВыведены;
						
					ВременныйТабличныйДокумент.Вывести(ОбластьНатурДоходыВыплаты);
					ВысотаТаблицы = ВременныйТабличныйДокумент.ВысотаТаблицы + 1;
					ВсегоНачисления = 0; КоличествоНачислений = 0;
					ВсегоУдержания = 0; КоличествоУдержаний  = 0;
						
				КонецЕсли;
					
				Если Выборка.ВидДвижения < 8 Тогда
						
					НомерСтроки = ВысотаТаблицы + КоличествоНачислений;
					ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаНачислено).Текст = Выборка.ВидРасчета;
					Если Выборка.Регистратор <> Ссылка Тогда
						ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаНачислено).Примечание.Текст = Выборка.Регистратор;
						ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаНачислено).Расшифровка = Выборка.Регистратор;					
					КонецЕсли;

					ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаНачислено).РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Переносить;
					ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаПериодНачислено, НомерСтроки, КолонкаПериодНачислено).Текст = ОписаниеПериода(Выборка.БазовыйПериодНачало, ДатаОкончанияПериода);
					ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаПериодНачислено, НомерСтроки, КолонкаПериодНачислено).РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Переносить;
					ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаПериодНачислено, НомерСтроки, КолонкаПериодНачислено).ГоризонтальноеПоложение = ГоризонтальноеПоложение.Право;
					ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаПериодНачислено, НомерСтроки, КолонкаОтработаноДней - 1).Объединить();
					ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаОтработаноДней).Текст	= Выборка.ОтработаноДней;
					ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаОтработаноЧасов).Текст	= Выборка.ОтработаноЧасов;
					ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаОплаченоДней).Текст		= Выборка.ОплаченоДней;
					ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаОплаченоЧасов).Текст		= Выборка.ОплаченоЧасов;
					ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаСуммаНачислено, НомерСтроки, КолонкаСуммаНачислено).Текст = Формат(Выборка.Начисления,"ЧЦ=15; ЧДЦ=2");
					ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаСуммаНачислено, НомерСтроки, КолонкаСуммаНачислено).ГоризонтальноеПоложение = ГоризонтальноеПоложение.Право;
					ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаСуммаНачислено, НомерСтроки, КолонкаУдержано - 1).Объединить();
						
					КоличествоНачислений = КоличествоНачислений + 1;
					ВсегоНачисления = ВсегоНачисления + Выборка.Начисления;
						
				Иначе // остались выплаты
						
					НомерСтроки = ВысотаТаблицы + КоличествоУдержаний;
					ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаУдержано , НомерСтроки, КолонкаУдержано).Текст = Выборка.ВидРасчета;
					Если Выборка.Регистратор <> Ссылка Тогда
						ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаУдержано , НомерСтроки, КолонкаУдержано).Примечание.Текст = Выборка.Регистратор;
						ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаНачислено).Расшифровка = Выборка.Регистратор;					
					КонецЕсли;
					ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаУдержано , НомерСтроки, КолонкаУдержано).РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Переносить;
					ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаУдержано , НомерСтроки, КолонкаУдержано).ГоризонтальноеПоложение = ГоризонтальноеПоложение.Лево;
					ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаУдержано , НомерСтроки, КолонкаПериодУдержано - 1).Объединить();
					ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаПериодУдержано, НомерСтроки, КолонкаПериодУдержано).Текст = ОписаниеПериода(Выборка.БазовыйПериодНачало, ДатаОкончанияПериода);
					ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаПериодУдержано, НомерСтроки, КолонкаПериодУдержано).ГоризонтальноеПоложение = ГоризонтальноеПоложение.Право;
					ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаПериодУдержано, НомерСтроки, КолонкаПериодУдержано).РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Переносить;
					ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаПериодУдержано, НомерСтроки, КолонкаСуммаУдержано - 1).Объединить();
					ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаСуммаУдержано, НомерСтроки, КолонкаСуммаУдержано).Текст = Формат(Выборка.Удержания,"ЧЦ=15; ЧДЦ=2");
					ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаСуммаУдержано, НомерСтроки, КолонкаСуммаУдержано).ГоризонтальноеПоложение = ГоризонтальноеПоложение.Право;
					ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаСуммаУдержано, НомерСтроки, КолонкаСуммаУдержано + 1).Объединить();
						
					КоличествоУдержаний = КоличествоУдержаний + 1;
					ВсегоУдержания = ВсегоУдержания + Выборка.Удержания;
					
					ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаСуммаУдержано, НомерСтроки, КолонкаСуммаУдержано + 1).ГраницаСправа = Линия;
					ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаСуммаУдержано, НомерСтроки, КолонкаСуммаУдержано + 1).ГраницаСнизу = Линия;
						
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		// Данные для подвала
		СуммаНаНачалоПериода = Выборка.СуммаВзаиморасчетовНачальныйОстаток;
		СуммаНаКонецПериода  = Выборка.СуммаВзаиморасчетовКонечныйОстаток;

		// расчертим линиями низ расчетного листками
		КоличествоРасчетов = Макс(КоличествоНачислений,КоличествоУдержаний);
		Если КоличествоРасчетов > 0 Тогда
			РасчертитьРасчетныйЛисток(ВременныйТабличныйДокумент, ВысотаТаблицы, КоличествоРасчетов)
		КонецЕсли;
			
		Если Не ИтогиНачисленийИУдержанийВыведены Тогда // есть только начисления и удержания
			ОбластьВсего.Параметры.ВсегоНачисления = ВсегоНачисления;
			ОбластьВсего.Параметры.ВсегоУдержания  = ВсегоУдержания;
			ВременныйТабличныйДокумент.Вывести(ОбластьВсего);
		ИначеЕсли КоличествоРасчетов > 0 Тогда  // остались итоги по натуральным доходам и выплатам
			ОбластьНатуральныеДоходы.Параметры.ВсегоНачисления = ВсегоНачисления;
			ОбластьНатуральныеДоходы.Параметры.ВсегоУдержания  = ВсегоУдержания;
			ВременныйТабличныйДокумент.Вывести(ОбластьНатуральныеДоходы);
		КонецЕсли;
			
		Если СуммаНаНачалоПериода = NULL Тогда
			ОбластьПодвал.Параметры.ТекстДолгНаНачалоПериода = НСтр("ru='Долг за организацией на начало месяца: ';uk='Борг за організацією на початок місяця: '", КодЯзыкаПечать);
			ОбластьПодвал.Параметры.СуммаДолгНаНачалоПериода = 0;
		Иначе
			Если СуммаНаНачалоПериода >= 0  Тогда
				ОбластьПодвал.Параметры.ТекстДолгНаНачалоПериода = НСтр("ru='Долг за организацией на начало месяца: ';uk='Борг за організацією на початок місяця: '", КодЯзыкаПечать);
				ОбластьПодвал.Параметры.СуммаДолгНаНачалоПериода = СуммаНаНачалоПериода;
			Иначе
				ОбластьПодвал.Параметры.ТекстДолгНаНачалоПериода = НСтр("ru='Долг за работником на начало месяца: ';uk='Борг за працівником на початок місяця: '", КодЯзыкаПечать);
				ОбластьПодвал.Параметры.СуммаДолгНаНачалоПериода = 0 - СуммаНаНачалоПериода;
			КонецЕсли;
				
		КонецЕсли;
		
		Если СуммаНаКонецПериода = NULL Тогда
			ОбластьПодвал.Параметры.ТекстДолгНаКонецПериода = НСтр("ru='Долг за работником на конец месяца: ';uk='Борг за працівником на кінець місяця: '", КодЯзыкаПечать);
			ОбластьПодвал.Параметры.СуммаДолгНаКонецПериода  = 0;
		Иначе
			Если СуммаНаКонецПериода >= 0  Тогда
				ОбластьПодвал.Параметры.ТекстДолгНаКонецПериода = НСтр("ru='Долг за организацией на конец месяца: ';uk='Борг за організацією на кінець місяця: '", КодЯзыкаПечать);
				ОбластьПодвал.Параметры.СуммаДолгНаКонецПериода  = СуммаНаКонецПериода;
			Иначе
				ОбластьПодвал.Параметры.ТекстДолгНаКонецПериода = НСтр("ru='Долг за работником на конец месяца: ';uk='Борг за працівником на кінець місяця: '", КодЯзыкаПечать);
				ОбластьПодвал.Параметры.СуммаДолгНаКонецПериода  = 0 - СуммаНаКонецПериода;
			КонецЕсли;
				
		КонецЕсли;
		
		ВременныйТабличныйДокумент.Вывести(ОбластьПодвал);

	КонецЕсли;
	
	Возврат ВременныйТабличныйДокумент;

		
КонецФункции // ЗаполнитьТаблицуРасчетногоЛистка()
	
Процедура РасчертитьРасчетныйЛисток(ВременныйТабличныйДокумент,СтрокПропустить,СтрокРасчертить)
	
	Линия = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 1);
	
	Для Сч = 0 По СтрокРасчертить - 1 Цикл
		
		НомерСтроки = СтрокПропустить + Сч;
		
		Для Сч1 = 2 По 17 Цикл
			
			Если Сч1 = 4 ИЛИ Сч1 = 10 ИЛИ Сч1 = 13 ИЛИ Сч1 = 15 Тогда
				Продолжить
			КонецЕсли; 
			
			ВременныйТабличныйДокумент.Область(НомерСтроки, Сч1).ГраницаСлева = Линия;
			
		КонецЦикла;
		
		ВременныйТабличныйДокумент.Область(НомерСтроки, 15).ГраницаСправа = Линия;
		ВременныйТабличныйДокумент.Область(НомерСтроки, 2, НомерСтроки, 15).ГраницаСнизу = Линия;
		
	КонецЦикла;
	
КонецПроцедуры

// Функция формирует представление периода для расчетного листка по дате начала и дате окончания.
//
// Параметры
//  ДатаНачала	   - Дата - дата начала периода.
//  ДатаОкончания  - Дата - дата окончания периода.
//  ДатаНачала	   - Булево - признак того, что описание периода будет сформирован 
//					 без указания чисел месяца.
//
// Возвращаемое значение:
//   Строка   - строковое представление периода.
//
Функция ОписаниеПериода(ДатаНачала, ДатаОкончания, БезДат = Истина, Язык = "") Экспорт
	
	ЧислоНачала		= День(ДатаНачала);
	ЧислоОкончания	= День(ДатаОкончания);
	ОписаниеМесяцаГода = Лев(Формат(ДатаНачала,  Язык+ "ДФ = 'MMMM'"),3)+" "+ Формат(ДатаНачала,    Язык+ "ДФ = 'гг'");
	ОписаниеМесяца2    = Лев(Формат(ДатаОкончания,Язык + "ДФ = 'MMMM'"),3)+" "+ Формат(ДатаОкончания, Язык+ "ДФ = 'гг'");
	
	Если Месяц(ДатаНачала) <> Месяц(ДатаОкончания) Тогда  
		
		Если (ДатаНачала = НачалоМесяца(ДатаНачала)) Тогда
			ПерваяПоловинаДат = "" + ОписаниеМесяцаГода;
		Иначе
			ПерваяПоловинаДат = ?(БезДат, "" + ЧислоНачала, "") + " " + ОписаниеМесяцаГода; 
		КонецЕсли;
		
		Если (ДатаОкончания = КонецМесяца(ДатаОкончания)) Тогда
			ВтораяПоловинаДат = ОписаниеМесяца2 ;
		Иначе
			ВтораяПоловинаДат = ?(БезДат, "" + ЧислоОкончания, "") + " " + ОписаниеМесяца2;
		КонецЕсли;
		
		Возврат ПерваяПоловинаДат + "-" + ВтораяПоловинаДат;
		
	Иначе
		
		Если (ДатаНачала = НачалоМесяца(ДатаНачала)) И (ДатаОкончания + 86399 = КонецМесяца(ДатаОкончания)) Тогда
			Возврат ОписаниеМесяцаГода;
		ИначеЕсли ЧислоНачала = ЧислоОкончания Тогда
			Возврат ?(БезДат, "" + ЧислоНачала, "") + " " + ОписаниеМесяцаГода;
		Иначе
			Возврат ?(БезДат ,"" + ЧислоНачала + "-" + ЧислоОкончания, "") + " " + ОписаниеМесяцаГода;
		КонецЕсли;
		
	КонецЕсли;
	
КонецФункции	// ОписаниеПериода 

Процедура РаспределитьОплатуГПХПоПериодам(ВыборкаНачисления)
	
	ДатаНачалаДоговор = ВыборкаНачисления.ДокументОснование.ДатаНачала;
	ДатаОтсчета = НачалоМесяца(ДатаНачалаДоговор);
	ДатаОкончанияДоговор =  ВыборкаНачисления.ДокументОснование.ДатаОкончания;
	КоличествоМесяцев = (Год(ДатаОкончанияДоговор)-Год(ДатаНачалаДоговор))*12+Месяц(ДатаОкончанияДоговор)-Месяц(ДатаНачалаДоговор)+1;
	СуммаДоговор = ВыборкаНачисления.Показатель1;
	СуммаОстаток = СуммаДоговор;
	Пока ДатаОтсчета <= ДатаОкончанияДоговор Цикл
		НоваяСтрока = Начисления.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,ВыборкаНачисления);
		Если ДатаОтсчета > ДатаНачалаДоговор Тогда
			НоваяСтрока.ДатаНачала  = ДатаОтсчета;
			НоваяСтрока.БазовыйПериодНачало = ДатаОтсчета;
		Иначе
			НоваяСтрока.ДатаНачала  = ДатаНачалаДоговор;
			НоваяСтрока.БазовыйПериодНачало = ДатаНачалаДоговор;
		КонецЕсли;
		Если КонецМесяца(ДатаОтсчета) < ДатаОкончанияДоговор Тогда
			НоваяСтрока.ДатаОкончания = КонецМесяца(ДатаОтсчета);
			НоваяСтрока.БазовыйПериодКонец = КонецМесяца(ДатаОтсчета);
		КонецЕсли;	
		НоваяСтрока.Показатель1 = Цел(СуммаДоговор/КоличествоМесяцев*100)/100;
		Если НЕ ЗначениеЗаполнено(НоваяСтрока.ПодразделениеОрганизации) Тогда
			НоваяСтрока.ПодразделениеОрганизации = ВыборкаНачисления.ДокументОснование.ПодразделениеОрганизации;
		КонецЕсли;
		
		НоваяСтрока.Авторасчет = Истина;
		
		СуммаОстаток = СуммаОстаток - НоваяСтрока.Показатель1;
		ДатаОтсчета = ДобавитьМесяц(ДатаОтсчета,1);
	КонецЦикла;
	
	Если СуммаОстаток <> 0  Тогда
		НоваяСтрока.Показатель1 = НоваяСтрока.Показатель1 + СуммаОстаток;
	КонецЕсли;	
	
КонецПроцедуры	

Процедура ДобавитьРезервОтпусков(Выборка,КоэффициентРезерваОтпусков,СтрокаДанных,ИзмененияНК1578)
	
	РезервОтпусков = Окр(СтрокаДанных.Сумма*КоэффициентРезерваОтпусков,2);
	
	Если РезервОтпусков = 0 Тогда
		Возврат;
	КонецЕсли;	
	
	Если РезервОтпусков = СтрокаДанных.Сумма Тогда
		// Отпуска полностью оплачиваются за счет резерва - тогда в бухгалтерском учете эту строку не отражаем.
		СтрокаДанных.НеОтражатьВБУ = Истина;
	Иначе
		// Частичная оплата за счет резерва
		// В исходной строке по отпускным оставляем сумму за вычетом резерва.
		СтрокаДанных.Сумма = СтрокаДанных.Сумма - РезервОтпусков;
		// За счет резерва аналогичная строка на сумму резерва и в бухгалтерском учете эту строку не отражаем. 		
		Если НЕ ИзмененияНК1578 Тогда
			СтрокаДанныхЗаСчетРезерва = ОтражениеВРеглУчете.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаДанныхЗаСчетРезерва,СтрокаДанных);
			СтрокаДанныхЗаСчетРезерва.Сумма = РезервОтпусков;
			СтрокаДанныхЗаСчетРезерва.НеОтражатьВБУ = Истина;
		КонецЕсли;	
	КонецЕсли;	
	
	// Дополнительно проводка по отражению резерва в бухгалтерском учете (счет 471)
	СтрокаДанныхРезерв = ОтражениеВРеглУчете.Добавить();
	ЗаполнитьЗначенияСвойств(СтрокаДанныхРезерв,СтрокаДанных,"СчетКт,СубконтоКт1,СубконтоКт2,СубконтоКт3");
	СтрокаДанныхРезерв.Сумма = РезервОтпусков;
	
	СтатьяЗатрат = Справочники.СтатьиЗатрат.ПустаяСсылка();
	Если ТипЗнч(СтрокаДанных.СубконтоДт1) = Тип("СправочникСсылка.СтатьиЗатрат") Тогда
		СтатьяЗатрат = СтрокаДанных.СубконтоДт1;
	ИначеЕсли ТипЗнч(СтрокаДанных.СубконтоДт2) = Тип("СправочникСсылка.СтатьиЗатрат") Тогда
		СтатьяЗатрат = СтрокаДанных.СубконтоДт2;
	ИначеЕсли ТипЗнч(СтрокаДанных.СубконтоДт3) = Тип("СправочникСсылка.СтатьиЗатрат") Тогда
		СтатьяЗатрат = СтрокаДанных.СубконтоДт3;
	КонецЕсли;
	
	СпособОтраженияРезерв = Справочники.СпособыОтраженияЗарплатыВРеглУчете.ИспользованиеРезерваОтпусков;
	СтрокаДанныхРезерв.СчетДт = СпособОтраженияРезерв.СчетДт;
	СтрокаДанныхРезерв.СубконтоДт1 = СпособОтраженияРезерв.СубконтоДт1;
	СтрокаДанныхРезерв.СубконтоДт2 = СпособОтраженияРезерв.СубконтоДт2;
	СтрокаДанныхРезерв.СубконтоДт3 = СпособОтраженияРезерв.СубконтоДт3;
	
	ВидыСубконтоСчета = СтрокаДанныхРезерв.СчетДт.ВидыСубконто;
	КоличествоСубконто = ВидыСубконтоСчета.Количество();
	Для Ном = 1 По 3 Цикл
		
		Если Ном <= КоличествоСубконто И ЗначениеЗаполнено(СтрокаДанныхРезерв.СчетДт) Тогда
			
			Если ВидыСубконтоСчета[Ном-1].ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат Тогда
				Если НЕ ЗначениеЗаполнено(СтрокаДанныхРезерв["СубконтоДт"+Ном]) Тогда
					СтрокаДанныхРезерв["СубконтоДт"+Ном] = СтатьяЗатрат;
				КонецЕсли;	
				Прервать;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	// С 01.01.2015 проводка только по НУ для резерва отпусков не нужна
	Если ИзмененияНК1578 И СтрокаДанных.НеОтражатьВБУ Тогда
		
		ОтражениеВРеглУчете.Удалить(СтрокаДанных);
		
	КонецЕсли;
	
КонецПроцедуры	

Процедура НачисленияИБазовыеПериодыИндексации() 
	РасчетИндексацииПропорционально = Константы.ИНАГРО_РасчетИндексацииПропорционально.Получить();			
	//РасчетИндексацииПропорционально = ИНАГРО_ПроведениеРасчетов.ВариантыАлгоритмовРасчетаЗарплаты().РасчетИндексацииПропорционально;
	Если НЕ РасчетИндексацииПропорционально = Перечисления.ИНАГРО_ВариантыАлгоритмовРасчетИндексацииПропорционально.ДляВсехСотрудников Тогда
		Возврат 
	КонецЕсли;
	Если ПериодРегистрации < ИНАГРО_ПроведениеРасчетов.ДатаИзмененияПорядкаИндексации() Тогда
		Возврат 
	КонецЕсли;
	
	ДанныеДляРасчета = Новый ТаблицаЗначений;
	ДанныеДляРасчета.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	ДанныеДляРасчета.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ДанныеДляРасчета.Колонки.Добавить("ПодразделениеОрганизации", Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"));
	ДанныеДляРасчета.Колонки.Добавить("Должность", Новый ОписаниеТипов("СправочникСсылка.Должности"));
	ДанныеДляРасчета.Колонки.Добавить("ДатаНачала", Новый ОписаниеТипов("Дата"));
	ДанныеДляРасчета.Колонки.Добавить("ДатаОкончания", Новый ОписаниеТипов("Дата"));
	ДанныеДляРасчета.Колонки.Добавить("ИндексВМассиве", Новый ОписаниеТипов("Число"));
	
	Для Каждого СтрокаРасчета Из Начисления Цикл
		Если НЕ СтрокаРасчета.ВидРасчета.СпособРасчета = ПредопределенноеЗначение("Перечисление.СпособыРасчетаНачислений.ИндексацияЗарплаты") Тогда 
			Продолжить;
		КонецЕсли;
		НоваяСтрока = ДанныеДляРасчета.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаРасчета);
		НоваяСтрока.Организация = Организация;
		НоваяСтрока.ДатаНачала = НачалоМесяца(НоваяСтрока.ДатаНачала);
		НоваяСтрока.ДатаОкончания = КонецМесяца(НоваяСтрока.ДатаОкончания);
		НоваяСтрока.ИндексВМассиве = Начисления.Индекс(СтрокаРасчета);
	КонецЦикла;
	
	// Если строк с нужными показателями не нашлось - ничего не запрашиваем.
	Если ДанныеДляРасчета.Количество() = 0 Тогда
		Возврат
	КонецЕсли;
		
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ДанныеДляРасчета", ДанныеДляРасчета);
	Запрос.УстановитьПараметр("парамОрганизация", Организация);
	ТекстЗапроса = 
	
	"ВЫБРАТЬ
	|	ДанныеДляРасчета.ИндексВМассиве КАК ИндексВМассиве,
	|	ДанныеДляРасчета.Организация КАК Организация,
	|	ДанныеДляРасчета.Сотрудник КАК Сотрудник,
	|	ДанныеДляРасчета.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	|	ДанныеДляРасчета.Должность КАК Должность,
	|	ДанныеДляРасчета.ДатаНачала КАК ДатаНачала,
	|	ДанныеДляРасчета.ДатаОкончания КАК ДатаОкончания
	|ПОМЕСТИТЬ ВТСтрокиРасчета
	|ИЗ
	|	&ДанныеДляРасчета КАК ДанныеДляРасчета
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	БазовыеПериодыИндексации.Сотрудник,
	|	БазовыеПериодыИндексации.ПодразделениеОрганизации,
	|	БазовыеПериодыИндексации.Должность,
	|	БазовыеПериодыИндексации.Период
	|ПОМЕСТИТЬ ВТБазовыеПериодыИндексации
	|ИЗ
	|	РегистрСведений.ИНАГРО_КоэффициентПовышенияОкладов КАК БазовыеПериодыИндексации
	|ГДЕ
	|	БазовыеПериодыИндексации.Организация = &парамОрганизация
	|	И (БазовыеПериодыИндексации.Сотрудник В
	|				(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|					СтрокиРасчета.Сотрудник
	|				ИЗ
	|					ВТСтрокиРасчета КАК СтрокиРасчета)
	|			ИЛИ БазовыеПериодыИндексации.Сотрудник = ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка))
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	БазовыеПериодыИндексации.Сотрудник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СтрокиРасчета.ИндексВМассиве,
	|	СтрокиРасчета.ДатаНачала,
	|	СтрокиРасчета.ДатаОкончания,
	|	СтрокиРасчета.Сотрудник,
	|	СтрокиРасчета.ПодразделениеОрганизации,
	|	СтрокиРасчета.Должность,
	|	МАКСИМУМ(ДОБАВИТЬКДАТЕ(ДатыИндексации.Период, ДЕНЬ, -1)) КАК БазовыйПериодИндексации
	|ПОМЕСТИТЬ ВТВыборкаБазовыеПериодыИндексации
	|ИЗ
	|	ВТСтрокиРасчета КАК СтрокиРасчета
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТБазовыеПериодыИндексации КАК ДатыИндексации
	|		ПО СтрокиРасчета.ПодразделениеОрганизации = ДатыИндексации.ПодразделениеОрганизации
	|			И СтрокиРасчета.Должность = ДатыИндексации.Должность
	|			И (СтрокиРасчета.Сотрудник = ДатыИндексации.Сотрудник
	|				ИЛИ ДатыИндексации.Сотрудник = ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка))
	|			И СтрокиРасчета.ДатаНачала <= ДатыИндексации.Период
	|			И СтрокиРасчета.ДатаОкончания >= ДатыИндексации.Период
	|
	|СГРУППИРОВАТЬ ПО
	|	СтрокиРасчета.ИндексВМассиве,
	|	СтрокиРасчета.Сотрудник,
	|	СтрокиРасчета.ДатаНачала,
	|	СтрокиРасчета.ДатаОкончания,
	|	СтрокиРасчета.ПодразделениеОрганизации,
	|	СтрокиРасчета.Должность
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	БазовыеПериодыИндексации.ИндексВМассиве,
	|	БазовыеПериодыИндексации.ДатаНачала КАК ДатаНачала,
	|	БазовыеПериодыИндексации.ДатаОкончания КАК ДатаОкончания,
	|	СтрокиРасчета.Сотрудник КАК Сотрудник,
	|	СтрокиРасчета.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	|	СтрокиРасчета.Должность КАК Должность,
	|	ЕСТЬNULL(БазовыеПериодыИндексации.БазовыйПериодИндексации, ДАТАВРЕМЯ(1, 1, 1)) КАК БазовыйПериодИндексации
	|ИЗ
	|	ВТВыборкаБазовыеПериодыИндексации КАК БазовыеПериодыИндексации
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСтрокиРасчета КАК СтрокиРасчета
	|		ПО БазовыеПериодыИндексации.Сотрудник = СтрокиРасчета.Сотрудник
	|			И БазовыеПериодыИндексации.ПодразделениеОрганизации = СтрокиРасчета.ПодразделениеОрганизации
	|			И БазовыеПериодыИндексации.Должность = СтрокиРасчета.Должность";  

	Запрос.Текст = ТекстЗапроса;
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Если Начисления[Выборка.ИндексВМассиве].ДатаНачала > Выборка.ДатаНачала Тогда
			Начисления[Выборка.ИндексВМассиве].БазовыйПериодНачало = Начисления[Выборка.ИндексВМассиве].ДатаНачала;
		Иначе 
			Начисления[Выборка.ИндексВМассиве].БазовыйПериодНачало = Выборка.ДатаНачала;
		КонецЕсли;
		
		Если Начисления[Выборка.ИндексВМассиве].ДатаОкончания < Выборка.ДатаОкончания Тогда
			Начисления[Выборка.ИндексВМассиве].БазовыйПериодКонец = Начисления[Выборка.ИндексВМассиве].ДатаОкончания;
		Иначе 
			Начисления[Выборка.ИндексВМассиве].БазовыйПериодКонец = Выборка.ДатаОкончания;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Выборка.БазовыйПериодИндексации) Тогда 
			Начисления[Выборка.ИндексВМассиве].БазовыйПериодКонец = Выборка.БазовыйПериодИндексации 
		КонецЕсли;	
	КонецЦикла;
	 
КонецПроцедуры	


#КонецОбласти

#КонецЕсли

















