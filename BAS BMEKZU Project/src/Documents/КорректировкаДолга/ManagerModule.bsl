#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

Процедура ЗаполнитьСчетаУчетаВШапке(Объект) Экспорт
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.СписаниеЗадолженности Тогда
		
		СчетУчета = БухгалтерскийУчетПереопределяемый.ПолучитьСчетУчетаПрочий(Объект.Организация, Перечисления.ВидыПрочихСчетовУчета.СчетДтСписаниеЗадолженностиКорректировкаДолга);
		Объект.СчетДт		= СчетУчета.СчетУчетаБУ;
		Объект.СубконтоДт1 	= СчетУчета.Субконто1;
		Объект.СубконтоДт2 	= СчетУчета.Субконто2;
		Объект.СубконтоДт3 	= СчетУчета.Субконто3;
		Если НЕ ЗначениеЗаполнено(Объект.СчетДт) Тогда
			Объект.СчетДт = ПланыСчетов.Хозрасчетный.СомнительныеИБезнадежныеДолги;
		КонецЕсли;
		
		СчетУчета = БухгалтерскийУчетПереопределяемый.ПолучитьСчетУчетаПрочий(Объект.Организация, Перечисления.ВидыПрочихСчетовУчета.СчетКтСписаниеЗадолженностиКорректировкаДолга);
		Объект.СчетКт		= СчетУчета.СчетУчетаБУ;
		Объект.СубконтоКт1 	= СчетУчета.Субконто1;
		Объект.СубконтоКт2 	= СчетУчета.Субконто2;
		Объект.СубконтоКт3 	= СчетУчета.Субконто3;
		Если НЕ ЗначениеЗаполнено(Объект.СчетКт) Тогда
			Объект.СчетКт = ПланыСчетов.Хозрасчетный.ДоходОтСписанияКредиторскойЗадолженности;	
		КонецЕсли;
		
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ПереносЗадолженности Тогда
		
		СчетаУчета = УправлениеВзаиморасчетами.ПолучитьСчетаРасчетовСКонтрагентом(Объект.Организация, Объект.КонтрагентКредитор, Объект.ДоговорКонтрагента);
		
		Если Объект.ТипКонтрагента = Перечисления.СтатусыКонтрагентов.Поставщик Тогда
			
			Объект.СчетДт = СчетаУчета.СчетАвансов;
			Объект.СчетКт = СчетаУчета.СчетРасчетов;
			
			Объект.СчетУчетаНДС		   		= СчетаУчета.СчетУчетаНДСПриобретений;
			Объект.СчетУчетаНДСПодтвержденный	= СчетаУчета.СчетУчетаНДСПриобретенийПодтвержденный;
			
		ИначеЕсли Объект.ТипКонтрагента = Перечисления.СтатусыКонтрагентов.Покупатель Тогда
			
			Объект.СчетДт = СчетаУчета.СчетРасчетовПокупателя;
			Объект.СчетКт = СчетаУчета.СчетАвансовПокупателя;
			
			Объект.СчетУчетаНДС		   		= СчетаУчета.СчетУчетаНДСПродаж;
			Объект.СчетУчетаНДСПодтвержденный	= СчетаУчета.СчетУчетаНДСПродажПодтвержденный;
			
		КонецЕсли;
		
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ИзменениеЗадолженности Тогда	
		
		Объект.СчетДт = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
		
	Иначе
		
		Объект.СчетДт = ПланыСчетов.Хозрасчетный.Вспомогательный;
		
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьСчетаУчетаВСтрокеТабЧасти()

Процедура ЗаполнитьСчетаУчетаВСтрокеТабЧасти(СтрокаТЧ, Объект, ЗаполнятьБУ = Истина) Экспорт

	СчетаУчета = БухгалтерскийУчетРасчетовСКонтрагентами.ПолучитьСчетаРасчетовСКонтрагентом(Объект.Организация, СтрокаТЧ.ДоговорКонтрагента.Владелец, СтрокаТЧ.ДоговорКонтрагента);

	Если СтрокаТЧ.ТипКонтрагента = Перечисления.СтатусыКонтрагентов.Поставщик Тогда
		Если ЗаполнятьБУ Тогда
			СтрокаТЧ.СчетУчетаРасчетов = СчетаУчета.СчетРасчетов;	
		КонецЕсли;
		
		СтрокаТЧ.СчетУчетаНДС		   		= СчетаУчета.СчетУчетаНДСПриобретений;
		СтрокаТЧ.СчетУчетаНДСПодтвержденный	= СчетаУчета.СчетУчетаНДСПриобретенийПодтвержденный;
		СтрокаТЧ.СтавкаНДС					= СчетаУчета.СтавкаНДСПриобретений;
		
		СтрокаТЧ.НалоговоеНазначение		= СчетаУчета.НалоговоеНазначениеПриобретений;
        Если СтрокаТЧ.ЗаТару Тогда
			СтрокаТЧ.НалоговоеНазначение	= СчетаУчета.НалоговоеНазначениеПриобретенийПоТаре;
		КонецЕсли;
		
	ИначеЕсли СтрокаТЧ.ТипКонтрагента = Перечисления.СтатусыКонтрагентов.Покупатель Тогда
		Если ЗаполнятьБУ Тогда
			СтрокаТЧ.СчетУчетаРасчетов = СчетаУчета.СчетРасчетовПокупателя;
		КонецЕсли;
		
		СтрокаТЧ.СчетУчетаНДС		   		= СчетаУчета.СчетУчетаНДСПродаж;
		СтрокаТЧ.СчетУчетаНДСПодтвержденный	= СчетаУчета.СчетУчетаНДСПродажПодтвержденный;
		СтрокаТЧ.СтавкаНДС					= СчетаУчета.СтавкаНДСПродаж;
		
		СтрокаТЧ.НалоговоеНазначение		= СчетаУчета.НалоговоеНазначениеПродаж;
        Если СтрокаТЧ.ЗаТару Тогда
			СтрокаТЧ.НалоговоеНазначение	= СчетаУчета.НалоговоеНазначениеПродажПоТаре;
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры // ЗаполнитьСчетаУчетаВСтрокеТабЧасти()

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти 	

#Область ПроцедурыИФункцииПечати

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт

	// Акт взаимозачета
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "КорректировкаДолга";
	КомандаПечати.Представление = НСтр("ru='Акт взаимозачета';uk='Акт взаємозаліку'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечати";
	
	// Реестр документов
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "Реестр";
	КомандаПечати.Представление = НСтр("ru='Реестр документов';uk='Реєстр документів'");
	КомандаПечати.ЗаголовокФормы= НСтр("ru='Реестр документов ""Корректировка долга""';uk='Реєстр документів ""Коригування боргу""'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечатиРеестраДокументов";
	КомандаПечати.СписокФорм    = "ФормаСписка";
	КомандаПечати.Порядок       = 100;
	
КонецПроцедуры

Функция ПечатьАктаВзаимозачета(МассивОбъектов, ОбъектыПечати,ПараметрыВывода)

	мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	УстановитьПривилегированныйРежим(Истина);
	
	ЗапросШапка = Новый Запрос;
	//ЗапросШапка.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	ЗапросШапка.Текст =
	"ВЫБРАТЬ
	|	КорректировкаДолга.ВидОперации,
	|	КорректировкаДолга.Номер,
	|	КорректировкаДолга.Дата,
	|	КорректировкаДолга.КонтрагентДебитор КАК Дебитор,
	|	КорректировкаДолга.КонтрагентКредитор КАК Кредитор,
	|	КорректировкаДолга.Организация,
	|	КорректировкаДолга.ВалютаДокумента,
	|	КорректировкаДолга.ДоговорКонтрагента,
	|	КорректировкаДолга.ДоговорКонтрагента.Дата  		  КАК ДоговорДата,
	|	КорректировкаДолга.ДоговорКонтрагента.Номер 		  КАК ДоговорНомер,
	|	КорректировкаДолга.ДоговорКонтрагента.НаименованиеДляПечати    КАК ДоговорНаименованиеДляПечати,
	|	КорректировкаДолга.Ответственный.ФизическоеЛицо.Наименование КАК ОтветственныйПредставление
	|ИЗ
	|	Документ.КорректировкаДолга КАК КорректировкаДолга
	|ГДЕ
	|	КорректировкаДолга.Ссылка = &ТекущийДокумент";
	//Шапка = ЗапросШапка.Выполнить().Выбрать();
	//Шапка.Следующий();
	
	
	ЗапросДолги = Новый Запрос;
	//ЗапросДолги.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	ЗапросДолги.УстановитьПараметр("ВидЗадолженностиДебиторка", Перечисления.ВидыЗадолженности.Дебиторская);
	ЗапросДолги.Текст = 
	"ВЫБРАТЬ
	|	КорректировкаДолга.ДоговорКонтрагента,
	|	КорректировкаДолга.ДоговорКонтрагента.Дата  		КАК ДоговорДата,
	|	КорректировкаДолга.ДоговорКонтрагента.Номер 		КАК ДоговорНомер,
	|	КорректировкаДолга.ДоговорКонтрагента.НаименованиеДляПечати  КАК ДоговорНаименованиеДляПечати,
	|	СУММА(ВЫБОР
	|			КОГДА КорректировкаДолга.ВидЗадолженности = &ВидЗадолженностиДебиторка
	|				ТОГДА КорректировкаДолга.Сумма
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаДебиторки,
	|	СУММА(ВЫБОР
	|			КОГДА КорректировкаДолга.ВидЗадолженности = &ВидЗадолженностиДебиторка
	|				ТОГДА КорректировкаДолга.СуммаВзаиморасчетов
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ВалютнаяСуммаДебиторки,
	|	СУММА(ВЫБОР
	|			КОГДА КорректировкаДолга.ВидЗадолженности = &ВидЗадолженностиДебиторка
	|				ТОГДА 0
	|			ИНАЧЕ КорректировкаДолга.Сумма
	|		КОНЕЦ) КАК СуммаКредиторки,
	|	СУММА(ВЫБОР
	|			КОГДА КорректировкаДолга.ВидЗадолженности = &ВидЗадолженностиДебиторка
	|				ТОГДА 0
	|			ИНАЧЕ КорректировкаДолга.СуммаВзаиморасчетов
	|		КОНЕЦ) КАК ВалютнаяСуммаКредиторки
	|ИЗ
	|	Документ.КорректировкаДолга.СуммыДолга КАК КорректировкаДолга
	|ГДЕ
	|	КорректировкаДолга.Ссылка = &ТекущийДокумент
	|
	|СГРУППИРОВАТЬ ПО
	|	КорректировкаДолга.ДоговорКонтрагента
	|";
	
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_КорректировкаДолга_Акт";
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.КорректировкаДолга.ПФ_MXL_Взаимозачет");
	
	// печать производится на языке, указанном в настройках пользователя
	КодЯзыкаПечать = ПараметрыВывода.КодЯзыкаДляМногоязычныхПечатныхФорм;
	Макет.КодЯзыкаМакета = КодЯзыкаПечать;
	
	ПервыйДокумент = Истина;
	
	Для Каждого Ссылка Из МассивОбъектов Цикл	
		
		Если Не ПервыйДокумент Тогда
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		// Запомним номер строки, с которой начали выводить текущий документ.
		НомерСтрокиНачало = ТабДокумент.ВысотаТаблицы + 1;
		
		ЗапросШапка.УстановитьПараметр("ТекущийДокумент", Ссылка);
		Шапка = ЗапросШапка.Выполнить().Выбрать();
		Шапка.Следующий();
		
		ЗапросДолги.УстановитьПараметр("ТекущийДокумент", Ссылка);
		ТаблицаЗадолженностей = ЗапросДолги.Выполнить().Выгрузить();
		
		Если  Шапка.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ПроведениеВзаимозачета Тогда 
			СтрокаШапки = ОбщегоНазначенияБПВызовСервера.СформироватьЗаголовокДокумента(Шапка, НСтр("ru='Акт взаимозачета';uk='Акт взаємозаліку'",КодЯзыкаПечать),КодЯзыкаПечать);
		ИначеЕсли Шапка.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ПереносЗадолженности Тогда
			СтрокаШапки = ОбщегоНазначенияБПВызовСервера.СформироватьЗаголовокДокумента(Шапка, НСтр("ru='Акт взаимозачета (перенос задолженности)';uk='Акт взаємозаліку (перенесення заборгованості)'",КодЯзыкаПечать),КодЯзыкаПечать);
		ИначеЕсли Шапка.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.СписаниеЗадолженности Тогда
			СтрокаШапки = ОбщегоНазначенияБПВызовСервера.СформироватьЗаголовокДокумента(Шапка, НСтр("ru='Акт списания задолженности';uk='Акт списання заборгованості'",КодЯзыкаПечать),КодЯзыкаПечать);
		ИначеЕсли Шапка.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ВводНачальныхОстатков Тогда
			СтрокаШапки = ОбщегоНазначенияБПВызовСервера.СформироватьЗаголовокДокумента(Шапка, НСтр("ru='Ввод остатков взаиморасчетов';uk='Введення залишків взаєморозрахунків'",КодЯзыкаПечать),КодЯзыкаПечать);
		ИначеЕсли Шапка.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ИзменениеЗадолженности Тогда
			СтрокаШапки = ОбщегоНазначенияБПВызовСервера.СформироватьЗаголовокДокумента(Шапка, НСтр("ru='Изменение (формирование) задолженности';uk='Зміна (формування) заборгованості'",КодЯзыкаПечать),КодЯзыкаПечать);
		КонецЕсли;
		
		ПредставлениеОрганизации 		   = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Шапка.Организация, Шапка.Дата), "ПолноеНаименование,",,КодЯзыкаПечать);
		ПредставлениеДебитора    		   = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Шапка.Дебитор, 	 Шапка.Дата), "ПолноеНаименование,",,КодЯзыкаПечать);
		ПредставлениеПереносаЗадолженности = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Шапка.Кредитор, 	 Шапка.Дата), "ПолноеНаименование,",,КодЯзыкаПечать);
		
		Если Шапка.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ПроведениеВзаимозачета Тогда
			ПредставлениеКредитора   = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Шапка.Кредитор, 	 Шапка.Дата), "ПолноеНаименование,",,КодЯзыкаПечать);
		Иначе
			ПредставлениеКредитора   = ПредставлениеДебитора;	
		КонецЕсли;
		Если Шапка.ВалютаДокумента = мВалютаРегламентированногоУчета или НЕ ЗначениеЗаполнено(Шапка.ВалютаДокумента) Тогда
			КолонкаСуммы = "Сумма";
			ПредставлениеВалюты = строка(мВалютарегламентированногоУчета);
		Иначе	
			КолонкаСуммы = "ВалютнаяСумма";
			ПредставлениеВалюты = строка(Шапка.ВалютаДокумента);
		КонецЕсли; 
		
		ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
		ОбластьМакета.Параметры.СтрокаШапки = СтрокаШапки;
		ТабДокумент.Вывести(ОбластьМакета);
		
		Нпп = 1;
		ОбластьМакета = Макет.ПолучитьОбласть("ЗаголовокДебиторки");
		СтрокаДебиторки  = Строка(НПП) + НСтр("ru='. Задолженность ';uk='. Заборгованість '",КодЯзыкаПечать)+ПредставлениеДебитора+" перед " + ПредставлениеОрганизации + НСтр("ru=' составляет ';uk=' становить '",КодЯзыкаПечать)
		+ Формат(ТаблицаЗадолженностей.Итог(КолонкаСуммы+"Дебиторки"), НСтр("ru='ЧЦ=15; ЧДЦ=2; ЧН=Ноль';uk='ЧЦ=15; ЧДЦ=2; ЧН=Нуль'",КодЯзыкаПечать))+" "+ ПредставлениеВалюты + НСтр("ru=' по следующим договорам:';uk=' по наступних договорах:'",КодЯзыкаПечать);
		
		ОбластьМакета.Параметры.СтрокаДебиторки = СтрокаДебиторки;
		
		ТабДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("СтрокаДебиторки");
		Для каждого СтрокаЗадолженности Из ТаблицаЗадолженностей Цикл
			Если СтрокаЗадолженности[КолонкаСуммы+"Дебиторки"]=0 Тогда
				Продолжить;
			КонецЕсли; 
			ОбластьМакета.Параметры.СтрокаДокументовДебДоговор = ПредставлениеДоговораДляПечати(СтрокаЗадолженности,КодЯзыкаПечать);
			ОбластьМакета.Параметры.СтрокаДокументовДебСумма   = Формат(СтрокаЗадолженности[КолонкаСуммы+"Дебиторки"], НСтр("ru='ЧЦ=15; ЧДЦ=2; ЧН=Ноль';uk='ЧЦ=15; ЧДЦ=2; ЧН=Нуль'",КодЯзыкаПечать))+" "+ПредставлениеВалюты;
			ТабДокумент.Вывести(ОбластьМакета);
		КонецЦикла;
		
		Нпп = Нпп + 1;
		ОбластьМакета = Макет.ПолучитьОбласть("ЗаголовокКредиторки");
		СтрокаКредиторки = Строка(НПП) + НСтр("ru='. Задолженность ';uk='. Заборгованість '",КодЯзыкаПечать)+ПредставлениеОрганизации+" перед " + ПредставлениеКредитора + НСтр("ru=' составляет ';uk=' становить '",КодЯзыкаПечать) +
		Формат(ТаблицаЗадолженностей.Итог(КолонкаСуммы+"Кредиторки"), НСтр("ru='ЧЦ=15; ЧДЦ=2; ЧН=Ноль';uk='ЧЦ=15; ЧДЦ=2; ЧН=Нуль'",КодЯзыкаПечать))+" "+ ПредставлениеВалюты + НСтр("ru=' по следующим договорам:';uk=' по наступних договорах:'",КодЯзыкаПечать);
		
		ОбластьМакета.Параметры.СтрокаКредиторки = СтрокаКредиторки;
		
		ТабДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("СтрокаКредиторки");
		Для каждого СтрокаЗадолженности Из ТаблицаЗадолженностей Цикл
			Если СтрокаЗадолженности[КолонкаСуммы+"Кредиторки"]=0 Тогда
				Продолжить;
			КонецЕсли; 
			ОбластьМакета.Параметры.СтрокаДокументовКредДоговор = ПредставлениеДоговораДляПечати(СтрокаЗадолженности,КодЯзыкаПечать);
			ОбластьМакета.Параметры.СтрокаДокументовКредСумма   = Формат(СтрокаЗадолженности[КолонкаСуммы+"Кредиторки"], НСтр("ru='ЧЦ=15; ЧДЦ=2; ЧН=Ноль';uk='ЧЦ=15; ЧДЦ=2; ЧН=Нуль'",КодЯзыкаПечать))+" "+ПредставлениеВалюты;
			ТабДокумент.Вывести(ОбластьМакета);
		КонецЦикла;
		
		Если Шапка.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ПереносЗадолженности Тогда
			
			Нпп = Нпп + 1;
			ОбластьМакета = Макет.ПолучитьОбласть("СтрокаПереносаЗадолженности");
			ПредставлениеДоговора = ПредставлениеДоговораДляПечати(Шапка,КодЯзыкаПечать);
			СтрокаПереноса   = Строка(НПП) + НСтр("ru='. Данным Актом указанная кредиторская и дебиторская задолженность ';uk='. Даним Актом зазначена кредиторська й дебіторська заборгованість '",КодЯзыкаПечать) + ПредставлениеОрганизации +
			НСтр("ru=' признается задолежнностью перед ';uk=' визнається заборгованістю перед '",КодЯзыкаПечать) + ПредставлениеПереносаЗадолженности + НСтр("ru=' по договору ';uk=' за договором '",КодЯзыкаПечать) + ПредставлениеДоговора;
			
			
			ОбластьМакета.Параметры.СтрокаПереноса = СтрокаПереноса;
			
			ТабДокумент.Вывести(ОбластьМакета);
			
		КонецЕсли; 
		
		ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
		ОбластьМакета.Параметры.Заполнить(Шапка);
		ТабДокумент.Вывести(ОбластьМакета);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабДокумент, 
		НомерСтрокиНачало, ОбъектыПечати, Ссылка);
		
	КонецЦикла;	
	
	Возврат ТабДокумент;

КонецФункции

Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм,ОбъектыПечати, ПараметрыВывода) Экспорт
	
	// Устанавливаем признак доступности печати покомплектно.
	ПараметрыВывода.ДоступнаПечатьПоКомплектно = Истина;
	
	// Проверяем, нужно ли для макета ОтчетККМ формировать табличный документ.
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "КорректировкаДолга") Тогда
		
		// Формируем табличный документ и добавляем его в коллекцию печатных форм.
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "КорректировкаДолга", НСтр("ru='Акт взаимозачета';uk='Акт взаємозаліку'"), 
			ПечатьАктаВзаимозачета(МассивОбъектов, ОбъектыПечати, ПараметрыВывода), , "Документ.КорректировкаДолга.ПФ_MXL_Взаимозачет", , Истина);
		
	КонецЕсли;
	
	
КонецПроцедуры

Функция ПолучитьДополнительныеРеквизитыДляРеестра() Экспорт
	
	Результат = Новый Структура("Информация", "ВидОперации");
	
	Возврат Результат;
	
КонецФункции

Функция ПредставлениеДоговораДляПечати(Данные, КодЯзыка)
	
	Значение = "";
	
	Если ЗначениеЗаполнено(Данные.ДоговорНомер) Тогда
		//заменим название договора на его настоящий номер
		Значение = "№ " + СокрП(Данные.ДоговорНомер);
	Иначе
		// названием остается наименование справочника
		Значение = Данные.ДоговорНаименованиеДляПечати;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Данные.ДоговорДата) Тогда
		// добавим дату договора
		Значение = Значение + НСтр("ru=' от ';uk=' від '",КодЯзыка) + Формат(Данные.ДоговорДата,"ДФ=dd.MM.yyyy")
	КонецЕсли;

	Возврат Значение;
	
КонецФункции // ПредставлениеДоговораДляПечати()

#КонецОбласти

#КонецЕсли
