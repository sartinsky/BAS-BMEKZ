#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	ПодготовитьФормуНаСервере();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПараметрыРазмещения = ПодключаемыеКоманды.ПараметрыРазмещения();
	ПараметрыРазмещения.КоманднаяПанель = Элементы.ГруппаВажныеКоманды;
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект, ПараметрыРазмещения);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	
	Если Параметры.Ключ.Пустая() Тогда
		ПодготовитьФормуНаСервере();
	КонецЕсли;
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	УстановитьСостояниеДокумента();	
	ЗаполнитьДобавленныеКолонкиТаблиц();
	УстановитьПараметрыВыбора();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	ОбщегоНазначенияБПКлиент.ОбработкаОповещенияФормыДокумента(ЭтаФорма, Объект.Ссылка, ИмяСобытия, Параметр, Источник);
КонецПроцедуры

&НаКлиенте
Процедура ВидОперацииНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтарыйвидОперации = Объект.ВидОперации;
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ВидОперацииПриИзменении(Элемент)

	ВидОперацииПриИзмененииСервер();

КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)

	ПриИзмененииДатыНаСервере();

КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)

	ОрганизацияПриИзмененииСервер();
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьВспомогательныйСчетПриИзменении(Элемент)
	УправлениеФормой();
КонецПроцедуры

&НаКлиенте
Процедура СчетВСПриИзменении(Элемент)
	НастроитьСубконтоПриИзмененииСчета(ЭтаФорма, Элемент.Имя);
	УправлениеФормой();
КонецПроцедуры

&НаКлиенте
Процедура СчетДтПриИзменении(Элемент)
	НастроитьСубконтоПриИзмененииСчета(ЭтаФорма, Элемент.Имя);
	УправлениеФормой();
КонецПроцедуры

&НаКлиенте
Процедура СчетКтПриИзменении(Элемент)
	НастроитьСубконтоПриИзмененииСчета(ЭтаФорма, Элемент.Имя);
	УправлениеФормой();	
КонецПроцедуры

&НаКлиенте
Процедура СчетКтСубконтоПриИзменении(Элемент)
	НастроитьСубконтоПриИзмененииСубконто(ЭтаФорма, "СчетКт");
КонецПроцедуры

&НаКлиенте
Процедура СчетДтСубконтоПриИзменении(Элемент)
	НастроитьСубконтоПриИзмененииСубконто(ЭтаФорма, "СчетДт");
КонецПроцедуры

&НаКлиенте
Процедура СчетВсСубконтоПриИзменении(Элемент)
	НастроитьСубконтоПриИзмененииСубконто(ЭтаФорма, "СчетВС");
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентДебиторПриИзменении(Элемент)
	
	// Если заполнена табличная часть, то ее надо очищать при несовпадении владельца с выбранным значением.
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийКорректировкаДолга.ПроведениеВзаимозачета") Тогда
		ОчиститьСтрокиТабЧасти(Объект,ПредопределенноеЗначение("Перечисление.ВидыЗадолженности.Дебиторская")); 
	Иначе
		ОчиститьСтрокиТабЧасти(Объект,Неопределено); 
	КонецЕсли; 

КонецПроцедуры

&НаКлиенте
Процедура КонтрагентКредиторПриИзменении(Элемент)
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийКорректировкаДолга.ПроведениеВзаимозачета") Тогда
		// Если заполнена табличная часть, то ее надо очищать при несовпадении владельца с выбранным значением.
		ОчиститьСтрокиТабЧасти(Объект,ПредопределенноеЗначение("Перечисление.ВидыЗадолженности.Кредиторская")); 
	КонецЕсли; 
	
	ДоговорКонтрагента = ПредопределенноеЗначение("Справочник.ДоговорыКонтрагентов.ПустаяСсылка");
	Сделка			   = Неопределено;
	
	ЗаполнитьСчетаУчетаВШапкеНаСервере();
	
	НастроитьСубконтоПриИзмененииСчета(ЭтаФорма, "СчетДт");
	НастроитьСубконтоПриИзмененииСчета(ЭтаФорма, "СчетКт");
	
	УправлениеФормой();
	
КонецПроцедуры

&НаКлиенте
Процедура КурсДокументаПриИзменении(Элемент)
	КурсДокументаПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура КурсДокументаПриИзмененииНаСервере()
	
	Если Не Объект.ВалютаДокумента = ВалютаРегламентированногоУчета и ЗначениеЗаполнено(Объект.ВалютаДокумента) Тогда
		
		ДанныеОбъекта = Новый Структура("ВалютаРегламентированногоУчета,ПлательщикНДС,КоэффициентПропорциональногоНДС",
		                                 ВалютаРегламентированногоУчета,ПлательщикНДС,КоэффициентПропорциональногоНДС);
		
		// Установить курс в табличной части, пересчитать суммы
		Для каждого Строка из Объект.СуммыДолга Цикл
			Строка.КурсВзаиморасчетов		= Объект.КурсДокумента;
			Строка.КратностьВзаиморасчетов	= Объект.КратностьДокумента;
			
			ПересчитатьСуммуПоСтроке(Строка,ДанныеОбъекта,Ложь);
		КонецЦикла; 
		
	КонецЕсли; 
	
	УправлениеФормой();
	
КонецПроцедуры

&НаКлиенте
Процедура ВалютаДокументаПриИзменении(Элемент)
	ВалютаДокументаПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ДоговорКонтрагентаПриИзменении(Элемент)
	ДоговорКонтрагентаПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ТипКонтрагентаПриИзменении(Элемент)
	ТипКонтрагентаПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура СделкаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;

	ПараметрыОбъекта = Новый Структура;
	ПараметрыОбъекта.Вставить("Дата"                 , Объект.Дата);
	ПараметрыОбъекта.Вставить("ДоговорКонтрагента"   , Объект.ДоговорКонтрагента);
	ПараметрыОбъекта.Вставить("Контрагент"           , Объект.КонтрагентКредитор);
	ПараметрыОбъекта.Вставить("Организация"          , Объект.Организация);
	ПараметрыОбъекта.Вставить("ТипыДокументов"       , "Метаданные.Документы.КорректировкаДолга.Реквизиты.Сделка.Тип");

	ПараметрыФормы = Новый Структура("ПараметрыОбъекта", ПараметрыОбъекта);
	ОткрытьФорму("Документ.ДокументРасчетовСКонтрагентом.ФормаВыбора", ПараметрыФормы, Элемент);

КонецПроцедуры

&НаКлиенте
Процедура СписыватьИзРезерваСомнительныхДолговПриИзменении(Элемент)
	СписыватьИзРезерваСомнительныхДолговПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура НеСторнироватьДоходыСебестоимостьВНУПриИзменении(Элемент)
	УправлениеФормой();
КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиСобытийТабличнойЧасти

&НаКлиенте
Процедура ТаблицаДебиторскаяЗадолженностьПриИзменении(Элемент)
	
	ВывестиИтогиПриИзмененииСтрокиТабличнойЧасти(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаКредиторскаяЗадолженностьПриИзменении(Элемент)
	
	ВывестиИтогиПриИзмененииСтрокиТабличнойЧасти(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаДебиторскаяЗадолженностьПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущаяСтрокаТаблицы = Элементы.ТаблицаДебиторскаяЗадолженность.ТекущиеДанные;
	
	Если НоваяСтрока И НЕ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийКорректировкаДолга.ПроведениеВзаимозачета") тогда
	     ТекущаяСтрокаТаблицы.ВидЗадолженности = ПредопределенноеЗначение("Перечисление.ВидыЗадолженности.Дебиторская");
		 ТекущаяСтрокаТаблицы.ТипКонтрагента   = ПредопределенноеЗначение("Перечисление.СтатусыКонтрагентов.Покупатель");
		 ТекущаяСтрокаТаблицы.РасчетыВозврат   = ПредопределенноеЗначение("Перечисление.РасчетыВозврат.Расчеты");	
	КонецЕсли; 

КонецПроцедуры

&НаКлиенте
Процедура ТаблицаКредиторскаяЗадолженностьПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущаяСтрокаТаблицы = Элементы.ТаблицаКредиторскаяЗадолженность.ТекущиеДанные;
	
	Если НоваяСтрока Тогда
	     ТекущаяСтрокаТаблицы.ВидЗадолженности = ПредопределенноеЗначение("Перечисление.ВидыЗадолженности.Кредиторская");
		 ТекущаяСтрокаТаблицы.ТипКонтрагента   = ПредопределенноеЗначение("Перечисление.СтатусыКонтрагентов.Поставщик");
		 ТекущаяСтрокаТаблицы.РасчетыВозврат   = ПредопределенноеЗначение("Перечисление.РасчетыВозврат.Расчеты");	 
	КонецЕсли; 

КонецПроцедуры

&НаКлиенте
Процедура ТаблицаКредиторскаяЗадолженностьДоговорКонтрагентаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийКорректировкаДолга.ПроведениеВзаимозачета") Тогда
		Контрагент = Объект.КонтрагентКредитор;
	Иначе
		Контрагент = Объект.КонтрагентДебитор;
	КонецЕсли;
	
	НовыйМассив = Новый Массив();
	
	НовыйПараметр = Новый ПараметрВыбора("Отбор.Владелец", Контрагент);
	НовыйМассив.Добавить(НовыйПараметр);
	НовыйПараметр = Новый ПараметрВыбора("Отбор.Организация", Объект.Организация);
	НовыйМассив.Добавить(НовыйПараметр);
	НовыйПараметр = Новый ПараметрВыбора("Отбор.ВалютаВзаиморасчетов", Объект.ВалютаДокумента);
	НовыйМассив.Добавить(НовыйПараметр);
	
	НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);
	Элемент.ПараметрыВыбора = НовыеПараметры;

КонецПроцедуры

&НаКлиенте
Процедура ТаблицаДебиторскаяЗадолженностьДоговорКонтрагентаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтрокаТабличнойЧасти = Элементы.ТаблицаДебиторскаяЗадолженность.ТекущиеДанные;

	Если СтрокаТабличнойЧасти.ВидЗадолженности = ПредопределенноеЗначение("Перечисление.ВидыЗадолженности.Кредиторская") Тогда
		Контрагент = Объект.КонтрагентКредитор;
	Иначе
		Контрагент = Объект.КонтрагентДебитор;
	КонецЕсли;

	НовыйМассив = Новый Массив();
	
	НовыйПараметр = Новый ПараметрВыбора("Отбор.Владелец", Контрагент);
	НовыйМассив.Добавить(НовыйПараметр);
	НовыйПараметр = Новый ПараметрВыбора("Отбор.Организация", Объект.Организация);
	НовыйМассив.Добавить(НовыйПараметр);
	НовыйПараметр = Новый ПараметрВыбора("Отбор.ВалютаВзаиморасчетов", Объект.ВалютаДокумента);
	НовыйМассив.Добавить(НовыйПараметр);
	
	НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);
	Элемент.ПараметрыВыбора = НовыеПараметры;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаДебиторскаяЗадолженностьДоговорКонтрагентаПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.ТаблицаДебиторскаяЗадолженность.ТекущиеДанные;
	
	ДанныеСтроки  = ДанныеСтрокиТабличнойЧасти(СтрокаТабличнойЧасти);
	ДанныеОбъекта = ДанныеОбъекта();
	
	ТаблицаДоговорКонтрагентаПриИзмененииНаСервере(ДанныеСтроки,ДанныеОбъекта);
	
	ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти,ДанныеСтроки);
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаКредиторскаяЗадолженностьДоговорКонтрагентаПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.ТаблицаКредиторскаяЗадолженность.ТекущиеДанные;
	
	ДанныеСтроки  = ДанныеСтрокиТабличнойЧасти(СтрокаТабличнойЧасти);
	ДанныеОбъекта = ДанныеОбъекта();
	
	ТаблицаДоговорКонтрагентаПриИзмененииНаСервере(ДанныеСтроки,ДанныеОбъекта);
	
	ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти,ДанныеСтроки);
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаДебиторскаяЗадолженностьСделкаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	СтрокаТабличнойЧасти = Элементы.ТаблицаДебиторскаяЗадолженность.ТекущиеДанные;
	
	ТаблицаСделкаНачалоВыбора(Элемент,СтрокаТабличнойЧасти);
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаКредиторскаяЗадолженностьСделкаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	СтрокаТабличнойЧасти = Элементы.ТаблицаКредиторскаяЗадолженность.ТекущиеДанные;
	
	ТаблицаСделкаНачалоВыбора(Элемент,СтрокаТабличнойЧасти);	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаКредиторскаяЗадолженностьСуммаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ТаблицаКредиторскаяЗадолженность.ТекущиеДанные;
	
	ДанныеСтроки  = ДанныеСтрокиТабличнойЧасти(СтрокаТабличнойЧасти);
	ДанныеОбъекта = ДанныеОбъекта();
	
	ТаблицаСуммаПриИзмененииНаСервере(ДанныеСтроки,ДанныеОбъекта);
	
	ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти,ДанныеСтроки);

	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаДебиторскаяЗадолженностьСуммаПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.ТаблицаДебиторскаяЗадолженность.ТекущиеДанные;
	
	ДанныеСтроки  = ДанныеСтрокиТабличнойЧасти(СтрокаТабличнойЧасти);
	ДанныеОбъекта = ДанныеОбъекта();
	
	ТаблицаСуммаПриИзмененииНаСервере(ДанныеСтроки,ДанныеОбъекта);
	
	ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти,ДанныеСтроки);
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаДебиторскаяЗадолженностьСуммаВзаиморасчетовПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.ТаблицаДебиторскаяЗадолженность.ТекущиеДанные;
	
	ДанныеСтроки  = ДанныеСтрокиТабличнойЧасти(СтрокаТабличнойЧасти);
	ДанныеОбъекта = ДанныеОбъекта();
	
	ПересчитатьСуммуПоСтроке(ДанныеСтроки,ДанныеОбъекта,Ложь);
	
	ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти,ДанныеСтроки);
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаКредиторскаяЗадолженностьСуммаВзаиморасчетовПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.ТаблицаКредиторскаяЗадолженность.ТекущиеДанные;
	
	ДанныеСтроки  = ДанныеСтрокиТабличнойЧасти(СтрокаТабличнойЧасти);
	ДанныеОбъекта = ДанныеОбъекта();
	
	ПересчитатьСуммуПоСтроке(ДанныеСтроки,ДанныеОбъекта,Ложь);
	
	ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти,ДанныеСтроки);
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаДебиторскаяЗадолженностьКурсВзаиморасчетовПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.ТаблицаДебиторскаяЗадолженность.ТекущиеДанные;
	
	ДанныеСтроки  = ДанныеСтрокиТабличнойЧасти(СтрокаТабличнойЧасти);
	ДанныеОбъекта = ДанныеОбъекта();
	
	ПересчитатьСуммуПоСтроке(ДанныеСтроки,ДанныеОбъекта,Ложь);
	
	ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти,ДанныеСтроки);
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаКредиторскаяЗадолженностьКурсВзаиморасчетовПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.ТаблицаКредиторскаяЗадолженность.ТекущиеДанные;
	
	ДанныеСтроки  = ДанныеСтрокиТабличнойЧасти(СтрокаТабличнойЧасти);
	ДанныеОбъекта = ДанныеОбъекта();
	
	ПересчитатьСуммуПоСтроке(ДанныеСтроки,ДанныеОбъекта,Ложь);
	
	ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти,ДанныеСтроки);
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаДебиторскаяЗадолженностьТипКонтрагентаПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.ТаблицаДебиторскаяЗадолженность.ТекущиеДанные;
	
	ДанныеСтроки  = ДанныеСтрокиТабличнойЧасти(СтрокаТабличнойЧасти);
	ДанныеОбъекта = ДанныеОбъекта();
	
	ЗаполнитьСчетаУчетаВСтрокеТабЧастиНаСервере(ДанныеСтроки,ДанныеОбъекта);

	ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти,ДанныеСтроки);
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаКредиторскаяЗадолженностьТипКонтрагентаПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.ТаблицаКредиторскаяЗадолженность.ТекущиеДанные;
	
	ДанныеСтроки  = ДанныеСтрокиТабличнойЧасти(СтрокаТабличнойЧасти);
	ДанныеОбъекта = ДанныеОбъекта();
	
	ЗаполнитьСчетаУчетаВСтрокеТабЧастиНаСервере(ДанныеСтроки,ДанныеОбъекта);

	ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти,ДанныеСтроки);
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаДебиторскаяЗадолженностьСтавкаНДСПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.ТаблицаДебиторскаяЗадолженность.ТекущиеДанные;
	
	ДанныеСтроки  = ДанныеСтрокиТабличнойЧасти(СтрокаТабличнойЧасти);
	ДанныеОбъекта = ДанныеОбъекта();
	
	ПересчитатьСуммыПоСтрокеРегл(ДанныеСтроки,ДанныеОбъекта);

	ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти,ДанныеСтроки);
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаКредиторскаяЗадолженностьСтавкаНДСПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.ТаблицаКредиторскаяЗадолженность.ТекущиеДанные;
	
	ДанныеСтроки  = ДанныеСтрокиТабличнойЧасти(СтрокаТабличнойЧасти);
	ДанныеОбъекта = ДанныеОбъекта();
	
	ПересчитатьСуммыПоСтрокеРегл(ДанныеСтроки,ДанныеОбъекта);

	ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти,ДанныеСтроки);
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаДебиторскаяЗадолженностьЗаТаруПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.ТаблицаДебиторскаяЗадолженность.ТекущиеДанные;
	
	ДанныеСтроки  = ДанныеСтрокиТабличнойЧасти(СтрокаТабличнойЧасти);
	ДанныеОбъекта = ДанныеОбъекта();
	
	ЗаТаруПриИзменении(ДанныеСтроки,ДанныеОбъекта);

	ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти,ДанныеСтроки);
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаКредиторскаяЗадолженностьЗаТаруПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.ТаблицаКредиторскаяЗадолженность.ТекущиеДанные;
	
	ДанныеСтроки  = ДанныеСтрокиТабличнойЧасти(СтрокаТабличнойЧасти);
	ДанныеОбъекта = ДанныеОбъекта();
	
	ЗаТаруПриИзменении(ДанныеСтроки,ДанныеОбъекта);

	ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти,ДанныеСтроки);
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаДебиторскаяЗадолженностьРасчетыВозвратПриИзменении(Элемент)
	ТаблицаДебиторскаяЗадолженностьТипКонтрагентаПриИзменении(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаКредиторскаяЗадолженностьРасчетыВозвратПриИзменении(Элемент)
	ТаблицаКредиторскаяЗадолженностьТипКонтрагентаПриИзменении(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаДебиторскаяЗадолженностьСуммаНДСПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.ТаблицаДебиторскаяЗадолженность.ТекущиеДанные;
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьПропорциональныйНДСТабЧасти(СтрокаТабличнойЧасти,ПлательщикНДС,КоэффициентПропорциональногоНДС);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаКредиторскаяЗадолженностьСуммаНДСПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.ТаблицаКредиторскаяЗадолженность.ТекущиеДанные;
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьПропорциональныйНДСТабЧасти(СтрокаТабличнойЧасти,ПлательщикНДС,КоэффициентПропорциональногоНДС);
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаДебиторскаяЗадолженностьНалоговоеНазначениеПриИзменении(Элемент)
	ТаблицаДебиторскаяЗадолженностьСуммаНДСПриИзменении(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаКредиторскаяЗадолженностьНалоговоеНазначениеПриИзменении(Элемент)
	ТаблицаКредиторскаяЗадолженностьСуммаНДСПриИзменении(Элемент);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗаполнитьДебиторку(Команда)

	ВыполнитьКомандуЗаполнения(Команда.Имя);

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьКредиторку(Команда)

	ВыполнитьКомандуЗаполнения(Команда.Имя);

КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьКомандуЗаполнения(ИмяКнопки)

	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийКорректировкаДолга.ВводНачальныхОстатков") Тогда
		ПоказатьПредупреждение( , НСтр("ru='Заполнение документа для данного вида операции не предусмотрено!';uk='Заповнення документа для даного виду операції не передбачено!'"));
		Возврат;
	КонецЕсли;
	
	Если Объект.Проведен Тогда
		ПоказатьПредупреждение( , НСтр("ru='Заполнение возможно только в непроведенном документе';uk='Заповнення можливе тільки в непроведеному документі'"));
		Возврат;
	КонецЕсли;

	ОчиститьСообщения();

	СтрокаСообщения = НСтр("ru='Заполнение невозможно!';uk='Заповнення неможливе!'") ;
	Продолжать = Истина;
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийКорректировкаДолга.ПроведениеВзаимозачета") Тогда
		
		Если НЕ ЗначениеЗаполнено(Объект.КонтрагентДебитор) Тогда
			ТекстСообщения = ОбщегоНазначенияБПКлиентСервер.ПолучитьТекстСообщения("Поле", "Заполнение",
				НСтр("ru='Дебитор';uk='Дебітор'"),,, СтрокаСообщения);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Объект.Ссылка,
				"КонтрагентДебитор", "Объект");
			Продолжать = Ложь;
		КонецЕсли;

		Если НЕ ЗначениеЗаполнено(Объект.КонтрагентКредитор) Тогда
			ТекстСообщения = ОбщегоНазначенияБПКлиентСервер.ПолучитьТекстСообщения("Поле", "Заполнение",
				НСтр("ru='Кредитор';uk='Кредитор'"),,, СтрокаСообщения);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Объект.Ссылка,
				"КонтрагентКредитор", "Объект");
			Продолжать = Ложь;
		КонецЕсли;

	Иначе
		
		Если НЕ ЗначениеЗаполнено(Объект.КонтрагентДебитор) Тогда
			ТекстСообщения = ОбщегоНазначенияБПКлиентСервер.ПолучитьТекстСообщения("Поле", "Заполнение",
				НСтр("ru='Дебитор';uk='Дебітор'"),,, СтрокаСообщения);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Объект.Ссылка,
				"КонтрагентДебитор", "Объект");
			Продолжать = Ложь;
		КонецЕсли;
		
	КонецЕсли;

	Если НЕ Продолжать Тогда
		Возврат;
	КонецЕсли;

	ТекстВопроса = "";

	Если ИмяКнопки = "ЗаполнитьДебиторку" И Объект.СуммыДолга.НайтиСтроки(Новый Структура("ВидЗадолженности", ПредопределенноеЗначение("Перечисление.ВидыЗадолженности.Дебиторская"))).Количество() > 0 Тогда
		ТекстВопроса = НСтр("ru='Перед заполнением дебиторская задолженность будет очищена. Заполнить?';uk='Перед заповненням дебіторська заборгованість буде очищена. Заповнити?'");
	ИначеЕсли ИмяКнопки = "ЗаполнитьКредиторку" И Объект.СуммыДолга.НайтиСтроки(Новый Структура("ВидЗадолженности",ПредопределенноеЗначение("Перечисление.ВидыЗадолженности.Кредиторская"))).Количество() > 0 Тогда
		ТекстВопроса = НСтр("ru='Перед заполнением кредиторская задолженность будет очищена. Заполнить?';uk='Перед заповненням кредиторська заборгованість буде очищена. Заповнити?'");
	КонецЕсли;

	Если ТекстВопроса <> "" Тогда
		ДополнительныеПараметры = Новый Структура("ИмяКнопки", ИмяКнопки);
		Оповещение = Новый ОписаниеОповещения("ВопросПередЗаполнениемТабличнойЧастиЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да );
	Иначе
		ЗаполнитьТаблицыРасчетовНаСервере(ИмяКнопки);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВопросПередЗаполнениемТабличнойЧастиЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ЗаполнитьТаблицыРасчетовНаСервере(ДополнительныеПараметры.ИмяКнопки)
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицыРасчетовНаСервере(ИмяКомандыЗаполнения)
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	
	Если ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ПроведениеВзаимозачета Тогда
			ОчиститьСтрокиТабЧасти(ДокументОбъект,Неопределено);
			ДокументОбъект.ЗаполнитьОстаткамиВзаиморасчетов(ДокументОбъект.КонтрагентДебитор, Перечисления.ВидыЗадолженности.Дебиторская);
			ДокументОбъект.ЗаполнитьОстаткамиВзаиморасчетов(ДокументОбъект.КонтрагентКредитор, Перечисления.ВидыЗадолженности.Кредиторская);
	ИначеЕсли ИмяКомандыЗаполнения = "ЗаполнитьДебиторку" Тогда
			ОчиститьСтрокиТабЧасти(ДокументОбъект,Перечисления.ВидыЗадолженности.Дебиторская);
			ДокументОбъект.ЗаполнитьОстаткамиВзаиморасчетов(ДокументОбъект.КонтрагентДебитор, Перечисления.ВидыЗадолженности.Дебиторская);
	ИначеЕсли ИмяКомандыЗаполнения = "ЗаполнитьКредиторку" Тогда
			ОчиститьСтрокиТабЧасти(ДокументОбъект,Перечисления.ВидыЗадолженности.Кредиторская);
			ДокументОбъект.ЗаполнитьОстаткамиВзаиморасчетов(ДокументОбъект.КонтрагентДебитор, Перечисления.ВидыЗадолженности.Кредиторская);
	КонецЕсли;
	
	ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
	
	ВывестиНадписи(ЭтаФорма);
	
	ЗаполнитьДобавленныеКолонкиТаблиц();

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункцииБСП

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти 

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ПодготовитьФормуНаСервере()
	
	УстановитьФункциональныеОпцииФормы();

	УстановитьСостояниеДокумента();

	// Инициализируем реквизиты формы:
	ТекущаяДатаДокумента           	= Объект.Дата;
	ВалютаРегламентированногоУчета 	= Константы.ВалютаРегламентированногоУчета.Получить();
	
	ОбновитьФлагиУсловногоОформления(ЭтаФорма);
	ЗаполнитьДобавленныеКолонкиТаблиц();
	
	УправлениеФормой();
	ВывестиНадписи(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСостояниеДокумента()
	
	СостояниеДокумента = ОбщегоНазначенияБП.СостояниеДокумента(Объект);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьФункциональныеОпцииФормы()

	ОбщегоНазначенияБПКлиентСервер.УстановитьПараметрыФункциональныхОпцийФормыДокумента(ЭтаФорма);
	
    ПлательщикНалогаНаПрибыльДо2015	= УчетнаяПолитика.ПлательщикНалогаНаПрибыльДо2015(Объект.Организация,Объект.Дата);
	ПлательщикНДС 					= УчетнаяПолитика.ПлательщикНДС(Объект.Организация,Объект.Дата);
	КоэффициентПропорциональногоНДС = НалоговыйУчет.ПолучитьКоэффициентПропорциональногоНДС(Объект.Организация, Объект.Дата);

КонецПроцедуры

&НаСервере 
Процедура УправлениеФормой()

	//Установка доступности и видимости
	ОтражениеРеквизитовНалоговогоУчета = Истина;
	
	//Управление доступностью курсом и кратностью расчетов
	КурсВалютыВШапке =  не (Объект.ВалютаДокумента = ВалютаРегламентированногоУчета или НЕ ЗначениеЗаполнено(Объект.ВалютаДокумента));
	
	Элементы.КурсДокумента.Видимость = КурсВалютыВШапке;
	
	Элементы.ТаблицаДебиторскаяЗадолженностьКурсВзаиморасчетов.Доступность = КурсВалютыВШапке; 
	Элементы.ТаблицаДебиторскаяЗадолженностьКратностьВзаиморасчетов.Доступность = КурсВалютыВШапке; 
	
	Элементы.ТаблицаКредиторскаяЗадолженностьКурсВзаиморасчетов.Доступность = КурсВалютыВШапке; 
	Элементы.ТаблицаКредиторскаяЗадолженностьКратностьВзаиморасчетов.Доступность = КурсВалютыВШапке; 
	
	Элементы.Сделка.Видимость = Ложь;
	
	Элементы.КонтрагентКредитор.Видимость = Истина;
	Элементы.КонтрагентКредитор.Заголовок = НСтр("ru='Получатель';uk='Одержувач'");
	Элементы.КонтрагентДебитор.Заголовок  = НСтр("ru='Контрагент';uk='Контрагент'");
	
	Элементы.СтраницаКредиторскаяЗадолженность.Видимость = Ложь;
	
	Элементы.ГруппаСчетДт.Заголовок = НСтр("ru='Счет списания дебиторской задолженности';uk='Рахунок списання дебіторської заборгованості'");
	Элементы.ГруппаСчетДт.Заголовок = НСтр("ru='Счет списания кредиторской задолженности';uk='Рахунок списання кредиторської заборгованості'");
	
	Элементы.СтраницаВзаиморасчеты.Заголовок  = НСтр("ru='Дебиторская задолженность';uk='Дебіторська заборгованість'");
				
	Если    Объект.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ВводНачальныхОстатков
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ИзменениеЗадолженности
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ПроведениеВзаимозачета Тогда
	
		Элементы.СтраницаВспомогательныйСчет.Видимость	= Истина;	
		Элементы.СтраницаСчетаУчета.Видимость 			= Ложь;
		
		Элементы.ИспользоватьВспомогательныйСчет.Видимость = (Объект.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ПроведениеВзаимозачета); 
		
		Элементы.ГруппаВспомогательныйСчет.Видимость 	= Объект.ИспользоватьВспомогательныйСчет ИЛИ (Объект.ВидОперации <> Перечисления.ВидыОперацийКорректировкаДолга.ПроведениеВзаимозачета);
		
		Если Объект.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ИзменениеЗадолженности Тогда
			Элементы.ДекорацияЗаголовокСчетаВС.Заголовок   = НСтр("ru='Корреспондирующий счет';uk='Кореспондуючий рахунок'");
			Элементы.СтраницаВспомогательныйСчет.Заголовок = НСтр("ru='Корреспондирующий счет';uk='Кореспондуючий рахунок'");;
		Иначе
			Элементы.СчетВС.Заголовок				       = НСтр("ru='Вспомогательный счет';uk='Допоміжний рахунок'");	
			Элементы.СтраницаВспомогательныйСчет.Заголовок = НСтр("ru='Вспомогательный счет';uk='Допоміжний рахунок'");	
		КонецЕсли;
		
		НастроитьСубконтоПриПодготовкеФормыНаСервере(ЭтаФорма, "СчетВС");
		//Для Ном = 1 по 3 Цикл
		//	Если (Ном <= Объект.СчетДт.ВидыСубконто.Количество()) и (ЗначениеЗаполнено(Объект.СчетДт)) Тогда
		//		Элементы["СубконтоВС"+Ном].Заголовок = Объект.СчетДт.ВидыСубконто[Ном-1].ВидСубконто.Наименование;
		//		Элементы["СубконтоВС"+Ном].Видимость = Объект.ИспользоватьВспомогательныйСчет ИЛИ НЕ (Объект.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ПроведениеВзаимозачета);
		//	Иначе
		//		Элементы["СубконтоВС"+Ном].Видимость = Ложь;
		//	КонецЕсли;
		//КонецЦикла;
		
	Иначе
		
		Элементы.СтраницаВспомогательныйСчет.Видимость = Ложь;	
		Элементы.СтраницаСчетаУчета.Видимость          = Истина;
		
		Если Объект.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ПереносЗадолженности Тогда
			Для Ном = 1 по 3 Цикл
				Элементы["СубконтоДт"+Ном].Доступность = Ложь;
				Элементы["СубконтоКт"+Ном].Доступность = Ложь;
			КонецЦикла;
			
			Элементы.ГруппаСчетДт.Заголовок = НСтр("ru='Счет переноса дебиторской задолженности';uk='Рахунок переносу дебіторської заборгованості'");
			Элементы.ГруппаСчетКт.Заголовок = НСтр("ru='Счет переноса кредиторской задолженности';uk='Рахунок переносу кредиторської заборгованості'");
		Иначе	
			
			НастроитьСубконтоПриПодготовкеФормыНаСервере(ЭтаФорма, "СчетДт");
			НастроитьСубконтоПриПодготовкеФормыНаСервере(ЭтаФорма, "СчетКт");
			//СуФиксы = Новый Структура("Дт,Кт",Истина,Истина);
			
			//Для каждого СуфиксСчета Из СуФиксы Цикл
			//	ТекущийСчет = Объект["Счет"+СуфиксСчета.Ключ];
			//	ВидыСубконтоСчета = ТекущийСчет.ВидыСубконто;
			//	
			//	//Для Ном = 1 по 3 Цикл
			//	//	Если (Ном <= ВидыСубконтоСчета.Количество()) и (ЗначениеЗаполнено(ТекущийСчет)) Тогда
			//	//		Элементы["Субконто"+СуфиксСчета.Ключ+Ном].Заголовок = ВидыСубконтоСчета[Ном-1].ВидСубконто.Наименование;
			//	//		Элементы["Субконто"+СуфиксСчета.Ключ+Ном].Видимость = СуфиксСчета.Значение;
			//	//	Иначе
			//	//		Элементы["Субконто"+СуфиксСчета.Ключ+Ном].Видимость = Ложь;
			//	//	КонецЕсли;
			//	//	
			//	//	
			//	//КонецЦикла;
			//	
			//КонецЦикла; 
			Элементы.ГруппаСчетДт.Заголовок = НСтр("ru='Счет списания дебиторской задолженности';uk='Рахунок списання дебіторської заборгованості'");
			Элементы.ГруппаСчетКт.Заголовок = НСтр("ru='Счет списания кредиторской задолженности';uk='Рахунок списання кредиторської заборгованості'");
		КонецЕсли;				
		
	КонецЕсли;			
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ПроведениеВзаимозачета Тогда

		Элементы.КонтрагентКредитор.Видимость        = Истина;
		Элементы.КонтрагентДебитор.Заголовок         = НСтр("ru='Дебитор';uk='Дебітор'");
		Элементы.КонтрагентКредитор.Заголовок        = НСтр("ru='Кредитор';uk='Кредитор'");
		Элементы.СтраницаКредиторскаяЗадолженность.Видимость = Ложь;
		Элементы.СтраницаВзаиморасчеты.Заголовок     = НСтр("ru='Взаиморасчеты';uk='Взаєморозрахунки'");
		Элементы.ДоговорКонтрагента.Видимость        = Ложь;
		Элементы.ТипКонтрагента.Видимость	         = Ложь;
		Элементы.НеПереноситьНОНК.Видимость			 = Ложь;
		
		Элементы.ТаблицаДебиторскаяЗадолженность.ОтборСтрок = Неопределено;
		//ЭлементыФормы.СуммыДолга.ОтборСтрок.ВидЗадолженности.Использование = Ложь;
		
		Элементы.ТаблицаДебиторскаяЗадолженностьВидЗадолженности.Видимость =  Истина;
		
	Иначе
		
		Элементы.СтраницаВзаиморасчеты.Заголовок      = НСтр("ru='Дебиторская задолженность';uk='Дебіторська заборгованість'");
		
		Если Объект.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ПереносЗадолженности Тогда
			Элементы.КонтрагентКредитор.Видимость = Истина;
			Элементы.ДоговорКонтрагента.Видимость = Истина;
			Элементы.ТипКонтрагента.Видимость     = Истина;
			Элементы.НеПереноситьНОНК.Видимость	  = Истина;
			Элементы.КонтрагентКредитор.Заголовок = НСтр("ru='Получатель';uk='Одержувач'");
			Элементы.Сделка.Видимость 			  = Истина;
		Иначе
			Элементы.КонтрагентКредитор.Видимость = Ложь;
			Элементы.ДоговорКонтрагента.Видимость = Ложь;
			Элементы.ТипКонтрагента.Видимость     = Ложь;
			Элементы.НеПереноситьНОНК.Видимость	  = Ложь;
		КонецЕсли;

		Элементы.КонтрагентДебитор.Заголовок         = НСтр("ru='Контрагент';uk='Контрагент'");
		Элементы.СтраницаКредиторскаяЗадолженность.Видимость = Истина;
		
		
	    Элементы.ТаблицаДебиторскаяЗадолженность.ОтборСтрок = Новый ФиксированнаяСтруктура("ВидЗадолженности",Перечисления.ВидыЗадолженности.Дебиторская);
		Элементы.ТаблицаКредиторскаяЗадолженность.ОтборСтрок = Новый ФиксированнаяСтруктура("ВидЗадолженности",Перечисления.ВидыЗадолженности.Кредиторская);	
		//ЭлементыФормы.СуммыДолга.ОтборСтрок.ВидЗадолженности.Использование = Истина;
		//ЭлементыФормы.СуммыДолга.ОтборСтрок.ВидЗадолженности.Значение      = Перечисления.ВидыЗадолженности.Дебиторская;
		//ЭлементыФормы.СуммыДолгаУменьшение.ОтборСтрок.ВидЗадолженности.Использование = Истина;
		//ЭлементыФормы.СуммыДолгаУменьшение.ОтборСтрок.ВидЗадолженности.Значение      = Перечисления.ВидыЗадолженности.Кредиторская;
		
		Элементы.ТаблицаДебиторскаяЗадолженностьВидЗадолженности.Видимость = Ложь;
		
	КонецЕсли;
	
	ДоступностьКнопок =   НЕ (Объект.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ИзменениеЗадолженности)
						И НЕ (Объект.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ВводНачальныхОстатков);
	
	Элементы.ТаблицаДебиторскаяЗадолженностьЗаполнитьДебиторку.Доступность   = ДоступностьКнопок;
	Элементы.ТаблицаКредиторскаяЗадолженностьЗаполнитьКредиторку.Доступность = ДоступностьКнопок;
	
	ВидимостьНалоговыхРеквизитов = ПлательщикНДС; 
	ВводОстатков 		   = (Объект.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ВводНачальныхОстатков);
	ИзменениеЗадолженности = (Объект.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ИзменениеЗадолженности);  
	СписаниеЗадолженности  = (Объект.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.СписаниеЗадолженности);  
	
	Элементы.ТаблицаКредиторскаяЗадолженностьРасчетыВозврат.Видимость = ВидимостьНалоговыхРеквизитов;
	Элементы.ТаблицаДебиторскаяЗадолженностьРасчетыВозврат.Видимость  = ВидимостьНалоговыхРеквизитов;
	
	Элементы.ТаблицаДебиторскаяЗадолженностьЗаТару.Видимость  = ВидимостьНалоговыхРеквизитов И ОтражениеРеквизитовНалоговогоУчета;
	Элементы.ТаблицаКредиторскаяЗадолженностьЗаТару.Видимость = ВидимостьНалоговыхРеквизитов И ОтражениеРеквизитовНалоговогоУчета;
	
	Элементы.ТаблицаКредиторскаяЗадолженностьНетНалоговойНакладной.Видимость = ВводОстатков И ПлательщикНДС И ОтражениеРеквизитовНалоговогоУчета;
	Элементы.ТаблицаДебиторскаяЗадолженностьНетНалоговойНакладной.Видимость  = ВводОстатков И ПлательщикНДС И ОтражениеРеквизитовНалоговогоУчета;
	
	Элементы.ТаблицаКредиторскаяЗадолженностьСтавкаНДС.Видимость = ВидимостьНалоговыхРеквизитов И ОтражениеРеквизитовНалоговогоУчета;
	Элементы.ТаблицаДебиторскаяЗадолженностьСтавкаНДС.Видимость  = ВидимостьНалоговыхРеквизитов И ОтражениеРеквизитовНалоговогоУчета;
	
	Элементы.ТаблицаКредиторскаяЗадолженностьСуммаНДС.Видимость  = ВидимостьНалоговыхРеквизитов И ОтражениеРеквизитовНалоговогоУчета;
	Элементы.ТаблицаДебиторскаяЗадолженностьСуммаНДС.Видимость 	 = ВидимостьНалоговыхРеквизитов И ОтражениеРеквизитовНалоговогоУчета;
	
	Элементы.ТаблицаКредиторскаяЗадолженностьСчетУчетаНДС.Видимость = ВидимостьНалоговыхРеквизитов И ОтражениеРеквизитовНалоговогоУчета;
	Элементы.ТаблицаДебиторскаяЗадолженностьСчетУчетаНДС.Видимость 	= ВидимостьНалоговыхРеквизитов И ОтражениеРеквизитовНалоговогоУчета;
	
	Элементы.ТаблицаКредиторскаяЗадолженностьСчетУчетаНДСПодтвержденный.Видимость 	= ВидимостьНалоговыхРеквизитов И ОтражениеРеквизитовНалоговогоУчета;
	Элементы.ТаблицаДебиторскаяЗадолженностьСчетУчетаНДСПодтвержденный.Видимость 	= ВидимостьНалоговыхРеквизитов И ОтражениеРеквизитовНалоговогоУчета;
	
	Элементы.ТаблицаКредиторскаяЗадолженностьНалоговоеНазначение.Видимость 	= ВидимостьНалоговыхРеквизитов И ОтражениеРеквизитовНалоговогоУчета;
	Элементы.ТаблицаДебиторскаяЗадолженностьНалоговоеНазначение.Видимость 	= ВидимостьНалоговыхРеквизитов И ОтражениеРеквизитовНалоговогоУчета;
	
	Элементы.НалоговоеНазначениеДоходовИЗатрат.Видимость =  Объект.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ИзменениеЗадолженности И ПлательщикНалогаНаПрибыльДо2015 И Объект.СчетДт.НалоговыйУчет;
	Элементы.ДекорацияНалоговоеНазначение.Видимость      =  Объект.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ИзменениеЗадолженности И ПлательщикНалогаНаПрибыльДо2015 И Объект.СчетДт.НалоговыйУчет;
	
	Элементы.НеСторнироватьДоходыСебестоимостьВНУ.Видимость = ПлательщикНалогаНаПрибыльДо2015
															  И Объект.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.СписаниеЗадолженности;
	
	Элементы.ПараметрыСписанияСебестоимостиНУ.Видимость 	= (Объект.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.СписаниеЗадолженности)
															  И ПлательщикНалогаНаПрибыльДо2015
															  И НЕ Объект.НеСторнироватьДоходыСебестоимостьВНУ;

	Элементы.СписыватьИзРезерваСомнительныхДолгов.Видимость = ПлательщикНалогаНаПрибыльДо2015;	
	Элементы.НалоговоеНазначениеДоходовИЗатрат1.Видимость = ПлательщикНалогаНаПрибыльДо2015;	
	
	Элементы.ТаблицаДебиторскаяЗадолженностьСуммаСебестоимостиНУ.Видимость = ПлательщикНалогаНаПрибыльДо2015
										    И Объект.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.СписаниеЗадолженности
											И Объект.СписыватьИзРезерваСомнительныхДолгов;
											
	Элементы.СчетРезерваСомнительныхДолгов.Видимость     = ПлательщикНалогаНаПрибыльДо2015 И Объект.СписыватьИзРезерваСомнительныхДолгов И Объект.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.СписаниеЗадолженности;
	Элементы.НачислятьРезервСомнительныхДолгов.Видимость = ПлательщикНалогаНаПрибыльДо2015 И Объект.СписыватьИзРезерваСомнительныхДолгов И Объект.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.СписаниеЗадолженности;
	
	Элементы.НеОтноситьНаВРСуммуНДСПриСписании.Видимость = ПлательщикНалогаНаПрибыльДо2015
														   И ПлательщикНДС
														   И Объект.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.СписаниеЗадолженности;
																
																
	Элементы.СчетУчетаНДСПодтвержденный.Видимость = НЕ Объект.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.СписаниеЗадолженности
													 И ПлательщикНДС;																
																
	Элементы.СчетУчетаНДС.Видимость = НЕ Объект.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.СписаниеЗадолженности
									   И ПлательщикНДС;																

	УстановитьПараметрыВыбора();
	ВывестиНадписи(ЭтаФорма);
	
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДобавленныеКолонкиТаблиц()

	
	Для Каждого ДанныеСтроки Из Объект.СуммыДолга Цикл

//		      ДанныеСтроки.ЭтоДебиторскаяЗадолженность = ДанныеСтроки.ВидЗадолженности = Перечисления.ВидыЗадолженности.Дебиторская;
		
	КонецЦикла; 
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста 
Процедура ОбновитьФлагиУсловногоОформления(Форма)

	Форма.КурсВалютыВШапке = Форма.Объект.ВалютаДокумента <> Форма.ВалютаРегламентированногоУчета 
		И ЗначениеЗаполнено(Форма.Объект.ВалютаДокумента);

КонецПроцедуры

&НаСервере
Процедура УстановитьПараметрыВыбора()
	

КонецПроцедуры

&НаСервере 
Процедура ПриИзмененииДатыНаСервере()
	
	// Проверка необходимости пересчета
	ФлагПересчета = Ложь;

	Для каждого СтрокаТаблицы Из Объект.СуммыДолга Цикл
		Если ЗначениеЗаполнено(СтрокаТаблицы.ДоговорКонтрагента) Тогда
			ВалютаДоговора  = СтрокаТаблицы.ДоговорКонтрагента.ВалютаВзаиморасчетов;
			СтруктураВалюты = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаДоговора, ТекущаяДатаДокумента);
			СтарыйКурс      = СтруктураВалюты.Курс;
			СтараяКратность = СтруктураВалюты.Кратность;
			СтруктураВалюты = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаДоговора, Объект.Дата);
			НовыйКурс       = СтруктураВалюты.Курс;
			НоваяКратность  = СтруктураВалюты.Кратность;

			Если НЕ (НовыйКурс = СтарыйКурс И НоваяКратность = СтараяКратность) Тогда
				ФлагПересчета = Истина;
				Прервать;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	// Если изменился курс пересчитаем взаиморасчеты
	Если ФлагПересчета Тогда
//		ТекстВопроса = НСтр("ru='На дату документа у валюты взаиморасчетов был задан другой курс."
//"Установить курс взаиморасчетов в соответствии с курсом валюты?';uk='На дату документа у валюти взаєморозрахунків був заданий інший курс."
//"Встановити курс взаєморозрахунків відповідно до курсу валюти?'");
//		Ответ        = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Да);

//		Если Ответ = КодВозвратаДиалога.Да Тогда
			Для каждого СтрокаТаблицы Из Объект.СуммыДолга Цикл
				Если ЗначениеЗаполнено(СтрокаТаблицы.ДоговорКонтрагента) Тогда
					ВалютаДоговора                        = СтрокаТаблицы.ДоговорКонтрагента.ВалютаВзаиморасчетов;
					СтруктураВалюты                       = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаДоговора, Объект.Дата);
					СтрокаТаблицы.КурсВзаиморасчетов      = СтруктураВалюты.Курс;
					СтрокаТаблицы.КратностьВзаиморасчетов = СтруктураВалюты.Кратность;
				КонецЕсли;
			КонецЦикла;
		//КонецЕсли;
	КонецЕсли;
	
	Если Год(Объект.Дата) <> Год(ТекущаяДатаДокумента) Тогда
		КоэффициентПропорциональногоНДС = НалоговыйУчет.ПолучитьКоэффициентПропорциональногоНДС(Объект.Организация, Объект.Дата);
		РассчитатьПропорциональныйНДС();
	КонецЕсли;	
	
	ТекущаяДатаДокумента = Объект.Дата; // запомним текущую дату документа для контроля номера документа
	
	УстановитьФункциональныеОпцииФормы();
	УправлениеФормой();
	
КонецПроцедуры

&НаСервере
Процедура ВидОперацииПриИзмененииСервер()
	
	ПродолжитьОбработку = Истина;
	Если НЕ ЗначениеЗаполнено(СтарыйВидОперации) тогда
		// Вид операции ранее установлен не был. Специфические действия не требуются.
	ИначеЕсли СтарыйВидОперации = Объект.ВидОперации Тогда
		// Изменения не требуются
	ИначеЕсли СтарыйВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ПроведениеВзаимозачета тогда
		// Табличная часть сзаполнена по двум видам задолженности, но по (возможно) разным контрагентам.
		// Если контрагенты различаются, необходимо зачитить табличную часть по кредиторской задолженности
		Если не Объект.КонтрагентДебитор = Объект.КонтрагентКредитор Тогда
			ОчиститьСтрокиТабЧасти(Объект,Перечисления.ВидыЗадолженности.Кредиторская); 
		КонецЕсли; 
	ИначеЕсли (		СтарыйВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ПереносЗадолженности 
				или СтарыйВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.СписаниеЗадолженности
				или СтарыйВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ВводНачальныхОстатков) Тогда
				Если  (    Объект.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ПереносЗадолженности 
					   или Объект.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.СписаниеЗадолженности
					   или Объект.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ВводНачальныхОстатков) тогда
			// По данным видам операции отборы по табличным частям совпадают. Допролнительная обработка  не требуется.
		Иначе
			// Необходимо установить контрагента кредитора равного дебитору,
			// тогда заполненные уже табличные части будут содержать корректную информацию.
			Объект.КонтрагентКредитор = Объект.КонтрагентДебитор;
		КонецЕсли;
	КонецЕсли; 

	Если не ПродолжитьОбработку Тогда
		// Отемяем изменение вида операции
		Объект.ВидОперации = СтарыйВидОперации;
	КонецЕсли; 

	Документы.КорректировкаДолга.ЗаполнитьСчетаУчетаВШапке(Объект);
	
	
	
	УправлениеФормой();

	СтарыйВидОперации = Объект.ВидОперации;
	
КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииСервер()

	ОчиститьСтрокиТабЧасти(Объект,Неопределено);
	
	КоэффициентПропорциональногоНДС = Неопределено;
	РассчитатьПропорциональныйНДС();
	
	УстановитьФункциональныеОпцииФормы();
		
	УправлениеФормой();

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ВывестиНадписи(Форма) 
	
	Элементы = Форма.Элементы;
	Объект = Форма.Объект;
	
	ТабСумм = Объект.СуммыДолга.Выгрузить();
	
	Если Объект.ВалютаДокумента = Форма.ВалютаРегламентированногоУчета или Объект.ВалютаДокумента = ПредопределенноеЗначение("Справочник.Валюты.ПустаяСсылка") Тогда
		ТабСумм.Свернуть("ВидЗадолженности","Сумма");
	Иначе
		ТабСумм.Свернуть("ВидЗадолженности","СуммаВзаиморасчетов");
		ТабСумм.Колонки.СуммаВзаиморасчетов.Имя = "Сумма";
	КонецЕсли;
	
	Объект.СуммаДтЗадолженности = 0;
	Объект.СуммаКтЗадолженности = 0;
	
	Для каждого СтрокаСумм Из ТабСумм Цикл
		Если СтрокаСумм.ВидЗадолженности = ПредопределенноеЗначение("Перечисление.ВидыЗадолженности.Дебиторская") Тогда
			Объект.СуммаДтЗадолженности = СтрокаСумм.Сумма;
		ИначеЕсли СтрокаСумм.ВидЗадолженности = ПредопределенноеЗначение("Перечисление.ВидыЗадолженности.Кредиторская") Тогда
			Объект.СуммаКтЗадолженности = СтрокаСумм.Сумма;
		КонецЕсли; 
	КонецЦикла; 
	
	Форма.Разница = Объект.СуммаДтЗадолженности - Объект.СуммаКтЗадолженности;
	
	Элементы.СуммаДтЗадолженности.Заголовок = НСтр("ru='Дебиторская задолженность';uk='Дебіторська заборгованість'")+" ("+Строка(Объект.ВалютаДокумента)+")";
	Элементы.СуммаКтЗадолженности.Заголовок = НСтр("ru='Кредиторская задолженность';uk='Кредиторська заборгованість'")+" ("+Строка(Объект.ВалютаДокумента)+")";							
	Если Форма.Разница = 0 И Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийКорректировкаДолга.ПроведениеВзаимозачета") Тогда
		Элементы.Разница.Видимость = Истина;
		Элементы.Разница.Заголовок = НСтр("ru='ВЗАИМОЗАЧЕТ';uk='ВЗАЄМОЗАЛІК'")+" ("+Строка(Объект.ВалютаДокумента)+")";
	ИначеЕсли НЕ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийКорректировкаДолга.ВводНачальныхОстатков")
			И НЕ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийКорректировкаДолга.ИзменениеЗадолженности")
			И НЕ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийКорректировкаДолга.СписаниеЗадолженности")
			И НЕ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийКорректировкаДолга.ПереносЗадолженности") Тогда
		Элементы.Разница.Видимость = Истина;
		Элементы.Разница.Заголовок = НСтр("ru='Разница';uk='Різниця'")+" ("+Строка(Объект.ВалютаДокумента)+")";
	Иначе
		Элементы.Разница.Видимость = Ложь;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВывестиИтогиПриИзмененииСтрокиТабличнойЧасти(Элемент)
	
	СуммаДтЗадолженностиИтог = 0; 
	СуммаКтЗадолженностиИтог = 0;
	
	Если Объект.ВалютаДокумента = ВалютаРегламентированногоУчета или Объект.ВалютаДокумента = ПредопределенноеЗначение("Справочник.Валюты.ПустаяСсылка") Тогда
		Для каждого СтрокаСумм Из Объект.СуммыДолга Цикл
			
			Если СтрокаСумм.ВидЗадолженности = ПредопределенноеЗначение("Перечисление.ВидыЗадолженности.Дебиторская") Тогда
				СуммаДтЗадолженностиИтог = СуммаДтЗадолженностиИтог + СтрокаСумм.Сумма;
			ИначеЕсли СтрокаСумм.ВидЗадолженности = ПредопределенноеЗначение("Перечисление.ВидыЗадолженности.Кредиторская") Тогда
				СуммаКтЗадолженностиИтог = СуммаКтЗадолженностиИтог + СтрокаСумм.Сумма;
			КонецЕсли; 
			
		КонецЦикла;
	Иначе	
		Для каждого СтрокаСумм Из Объект.СуммыДолга Цикл
			
			Если СтрокаСумм.ВидЗадолженности = ПредопределенноеЗначение("Перечисление.ВидыЗадолженности.Дебиторская") Тогда
				СуммаДтЗадолженностиИтог = СуммаДтЗадолженностиИтог + СтрокаСумм.СуммаВзаиморасчетов;
			ИначеЕсли СтрокаСумм.ВидЗадолженности = ПредопределенноеЗначение("Перечисление.ВидыЗадолженности.Кредиторская") Тогда
				СуммаКтЗадолженностиИтог = СуммаКтЗадолженностиИтог + СтрокаСумм.СуммаВзаиморасчетов;
			КонецЕсли;
		КонецЦикла;	
	КонецЕсли;
	
	Объект.СуммаДтЗадолженности = СуммаДтЗадолженностиИтог; 
	Объект.СуммаКтЗадолженности = СуммаКтЗадолженностиИтог;
	Разница = Объект.СуммаДтЗадолженности - Объект.СуммаКтЗадолженности;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПересчитатьСуммуПоСтроке(СтрокаДанных,ДанныеОбъекта,ПересчетВалютнойСуммы = Истина)

	Если СтрокаДанных = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВалютаДоговора = СтрокаДанных.ДоговорКонтрагента.ВалютаВзаиморасчетов;
	Если ПересчетВалютнойСуммы Тогда
		СтрокаДанных.СуммаВзаиморасчетов = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаДанных.Сумма,
				ДанныеОбъекта.ВалютаРегламентированногоУчета, ВалютаДоговора,
				1, СтрокаДанных.КурсВзаиморасчетов,
				1 ,СтрокаДанных.КратностьВзаиморасчетов);
	Иначе
		СтрокаДанных.Сумма = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаДанных.СуммаВзаиморасчетов,
				ВалютаДоговора,ДанныеОбъекта.ВалютаРегламентированногоУчета,
				СтрокаДанных.КурсВзаиморасчетов, 1, 
				СтрокаДанных.КратностьВзаиморасчетов, 1);
	КонецЕсли;  
			
	ПересчитатьСуммыПоСтрокеРегл(СтрокаДанных,ДанныеОбъекта);		

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПересчитатьСуммыПоСтрокеРегл(СтрокаДанных,ДанныеОбъекта)

	СтрокаДанных.СуммаНДС = СтрокаДанных.Сумма*УчетНДС.ПолучитьСтавкуНДС(СтрокаДанных.СтавкаНДС)/(100 +УчетНДС.ПолучитьСтавкуНДС(СтрокаДанных.СтавкаНДС));
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьПропорциональныйНДСТабЧасти(СтрокаДанных,ДанныеОбъекта.ПлательщикНДС,ДанныеОбъекта.КоэффициентПропорциональногоНДС);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПересчитатьКурсПоСтроке(СтрокаДанных,ДанныеОбъекта)
	
	Если СтрокаДанных = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаДанных.КурсВзаиморасчетов = ?(СтрокаДанных.СуммаВзаиморасчетов*СтрокаДанных.КратностьВзаиморасчетов <>0, СтрокаДанных.Сумма/СтрокаДанных.ВалютнаяСумма*СтрокаДанных.КратностьВзаиморасчетов, 100);
  	ПересчитатьСуммыПоСтрокеРегл(СтрокаДанных,ДанныеОбъекта);
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьПропорциональныйНДС() Экспорт
	
	
		Для каждого СтрокаРасшифровки Из Объект.СуммыДолга Цикл
			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьПропорциональныйНДСТабЧасти(СтрокаРасшифровки,ЭтаФорма.ПлательщикНДС,ЭтаФорма.КоэффициентПропорциональногоНДС);
		КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция ДанныеСтрокиТабличнойЧасти(СтрокаТабличнойЧасти = Неопределено)

	Если СтрокаТабличнойЧасти = Неопределено Тогда
		СтрокаТабличнойЧасти = Элементы.ТаблицаДебиторскаяЗадолженность.ТекущиеДанные;
	КонецЕсли; 
	
	ПараметрыСтроки = Новый Структура("ДоговорКонтрагента,КурсВзаиморасчетов,КратностьВзаиморасчетов,
	|Сделка,Сумма,СуммаВзаиморасчетов,СчетУчетаРасчетов,ВидЗадолженности,ТипКонтрагента,РасчетыВозврат,ЗаТару,
	|НалоговоеНазначение,СчетУчетаНДС,СтавкаНДС,СуммаНДС,НетНалоговойНакладной,СчетУчетаНДСПодтвержденный,Амортизируется,
	|СуммаСебестоимостиНУ,СуммаНДСПропорциональноКредит");
	
	ЗаполнитьЗначенияСвойств(ПараметрыСтроки, СтрокаТабличнойЧасти);
	
	Возврат ПараметрыСтроки;

КонецФункции

&НаКлиенте
Функция ДанныеОбъекта()
	
	ДанныеОбъекта = Новый Структура(
		"Дата,ВидОперации,Организация,
		|ПодразделениеОрганизации,ВалютаДокумента,КурсДокумента,КратностьДокумента,
		|КонтрагентДебитор,КонтрагентКредитор,ДоговорКонтрагента,
		|ИспользоватьВспомогательныйСчет,
		|СчетДт,СубконтоДт1,СубконтоДт2,СубконтоДт3,
		|СчетКт,СубконтоКт1,СубконтоКт2,СубконтоКт3,
		|Ответственный,Комментарий,ТипКонтрагента,РучнаяКорректировка,
		|СуммаКтЗадолженности,СуммаДтЗадолженности,Сделка,НеПереноситьНОНК,
		|СчетУчетаНДС,СчетУчетаНДСПодтвержденный,НеОтноситьНаВРСуммуНДСПриСписании,НалоговоеНазначениеДоходовИЗатрат,
		|СписыватьИзРезерваСомнительныхДолгов,СчетРезерваСомнительныхДолгов,НачислятьРезервСомнительныхДолгов,
		|ПараметрыСписанияСебестоимостиНУ,НеСторнироватьДоходыСебестоимостьВНУ,ПлательщикНДС,
		|ВалютаРегламентированногоУчета,КоэффициентПропорциональногоНДС");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	ДанныеОбъекта.ВалютаРегламентированногоУчета  = ЭтаФорма.ВалютаРегламентированногоУчета;
	ДанныеОбъекта.КоэффициентПропорциональногоНДС = ЭтаФорма.КоэффициентПропорциональногоНДС;
	ДанныеОбъекта.ПлательщикНДС                   = ЭтаФорма.ПлательщикНДС;
	
	Возврат ДанныеОбъекта;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьСчетаУчетаВШапкеНаСервере()

	Документы.КорректировкаДолга.ЗаполнитьСчетаУчетаВШапке(Объект);

КонецПроцедуры // ЗаполнитьСчетаУчетаВШапкеНаСервере()
 
// Параметры:
//  ВидДоговора - вид договора, для которого определить тип контрагента
//
// Возвращаемое значение:
//   Перечисления.СтатусыКонтрагентов 
//
&НаКлиентеНаСервереБезКонтекста
Функция ОпределитьТипКонтрагентаПоВидуДоговора(ВидДоговора)

	Если ВидДоговора = ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СПоставщиком") Тогда
		ТипКонтрагента = ПредопределенноеЗначение("Перечисление.СтатусыКонтрагентов.Поставщик");
	Иначе
		ТипКонтрагента = ПредопределенноеЗначение("Перечисление.СтатусыКонтрагентов.Покупатель");
	КонецЕсли;

	Возврат ТипКонтрагента;

КонецФункции // ОпределитьТипКонтрагентаПо()

&НаСервере
Процедура ДоговорКонтрагентаПриИзмененииНаСервере()
	
	Объект.ТипКонтрагента = ОпределитьТипКонтрагентаПоВидуДоговора(Объект.ДоговорКонтрагента.ВидДоговора);
	Сделка = Неопределено;
	
	Документы.КорректировкаДолга.ЗаполнитьСчетаУчетаВШапке(Объект);
	
	НастроитьСубконтоПриИзмененииСчета(ЭтаФорма, "СчетДт");
	НастроитьСубконтоПриИзмененииСчета(ЭтаФорма, "СчетКт");
	
	УправлениеФормой();
	
КонецПроцедуры

&НаСервере
Процедура ТипКонтрагентаПриИзмененииНаСервере()
	
	Документы.КорректировкаДолга.ЗаполнитьСчетаУчетаВШапке(Объект);
	
	НастроитьСубконтоПриИзмененииСчета(ЭтаФорма, "СчетДт");
	НастроитьСубконтоПриИзмененииСчета(ЭтаФорма, "СчетКт");
	
	УправлениеФормой();
КонецПроцедуры

&НаСервере
Процедура СписыватьИзРезерваСомнительныхДолговПриИзмененииНаСервере()
	УправлениеФормой();
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ТаблицаДоговорКонтрагентаПриИзмененииНаСервере(ДанныеСтроки,ДанныеОбъекта)
	
	//  Для сделки нет значения по умолчанию в договоре, поэтому заполняем ее пустым значением.
	ДанныеСтроки.Сделка = Неопределено;

	Если ДанныеСтроки.ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем Тогда
		ДанныеСтроки.ТипКонтрагента = Перечисления.СтатусыКонтрагентов.Покупатель;
	Иначе
		ДанныеСтроки.ТипКонтрагента = Перечисления.СтатусыКонтрагентов.Поставщик;
	КонецЕсли;
	ДанныеСтроки.РасчетыВозврат = Перечисления.РасчетыВозврат.Расчеты;
	
	// Курс надо тоже заполнить
	Если ЗначениеЗаполнено(ДанныеСтроки.ДоговорКонтрагента) Тогда
		КурсИКратностьВзаиморасчетов = МодульВалютногоУчета.ПолучитьКурсВалюты(ДанныеСтроки.ДоговорКонтрагента.ВалютаВзаиморасчетов, ДанныеОбъекта.Дата);
		
		ДанныеСтроки.КурсВзаиморасчетов = КурсИКратностьВзаиморасчетов.Курс;
		ДанныеСтроки.КратностьВзаиморасчетов = КурсИКратностьВзаиморасчетов.Кратность;

		Документы.КорректировкаДолга.ЗаполнитьСчетаУчетаВСтрокеТабЧасти(ДанныеСтроки, ДанныеОбъекта, Истина);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ТаблицаСделкаНачалоВыбора(Элемент,СтрокаТабличнойЧасти)
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("СправочникСсылка.Номенклатура"));
	
	Если СтрокаТабличнойЧасти.ТипКонтрагента = ПредопределенноеЗначение("Перечисление.СтатусыКонтрагентов.Покупатель") Тогда
		МассивТипов.Добавить(Тип("ДокументСсылка.АктОбОказанииПроизводственныхУслуг"));
		МассивТипов.Добавить(Тип("ДокументСсылка.ВозвратТоваровОтПокупателя"));
		МассивТипов.Добавить(Тип("ДокументСсылка.КорректировкаДолга"));
		МассивТипов.Добавить(Тип("ДокументСсылка.ОтчетКомиссионераОПродажах"));
		МассивТипов.Добавить(Тип("ДокументСсылка.СписаниеСРасчетногоСчета"));
		МассивТипов.Добавить(Тип("ДокументСсылка.ПоступлениеНаРасчетныйСчет"));
		МассивТипов.Добавить(Тип("ДокументСсылка.ПлатежныйОрдерСписаниеДенежныхСредств"));
		МассивТипов.Добавить(Тип("ДокументСсылка.ПлатежныйОрдерПоступлениеДенежныхСредств"));
		МассивТипов.Добавить(Тип("ДокументСсылка.ПриходныйКассовыйОрдер"));
		МассивТипов.Добавить(Тип("ДокументСсылка.ПередачаОС"));
		МассивТипов.Добавить(Тип("ДокументСсылка.ПередачаНМА"));
		МассивТипов.Добавить(Тип("ДокументСсылка.РасходныйКассовыйОрдер"));
		МассивТипов.Добавить(Тип("ДокументСсылка.РеализацияТоваровУслуг"));
		МассивТипов.Добавить(Тип("ДокументСсылка.СчетНаОплатуПокупателю"));
		МассивТипов.Добавить(Тип("ДокументСсылка.ДокументРасчетовСКонтрагентом"));
	ИначеЕсли СтрокаТабличнойЧасти.ТипКонтрагента = ПредопределенноеЗначение("Перечисление.СтатусыКонтрагентов.Поставщик") Тогда
		МассивТипов.Добавить(Тип("ДокументСсылка.АвансовыйОтчет"));
		МассивТипов.Добавить(Тип("ДокументСсылка.ВозвратТоваровПоставщику"));
		МассивТипов.Добавить(Тип("ДокументСсылка.ДокументРасчетовСКонтрагентом"));
		МассивТипов.Добавить(Тип("ДокументСсылка.КорректировкаДолга"));
		МассивТипов.Добавить(Тип("ДокументСсылка.ОтчетКомитентуОПродажах"));
		МассивТипов.Добавить(Тип("ДокументСсылка.СписаниеСРасчетногоСчета"));
		МассивТипов.Добавить(Тип("ДокументСсылка.ПоступлениеНаРасчетныйСчет"));
		МассивТипов.Добавить(Тип("ДокументСсылка.ПлатежныйОрдерСписаниеДенежныхСредств"));
		МассивТипов.Добавить(Тип("ДокументСсылка.ПлатежныйОрдерПоступлениеДенежныхСредств"));
		МассивТипов.Добавить(Тип("ДокументСсылка.ПриходныйКассовыйОрдер"));
		МассивТипов.Добавить(Тип("ДокументСсылка.РасходныйКассовыйОрдер"));
		МассивТипов.Добавить(Тип("ДокументСсылка.ПоступлениеДопРасходов"));
		МассивТипов.Добавить(Тип("ДокументСсылка.ПоступлениеТоваровУслуг"));
		МассивТипов.Добавить(Тип("ДокументСсылка.ПоступлениеНМА"));
		МассивТипов.Добавить(Тип("ДокументСсылка.ПоступлениеИзПереработки"));
		МассивТипов.Добавить(Тип("ДокументСсылка.СчетНаОплатуПоставщика"));
	Иначе // Прочее
		МассивТипов.Добавить(Тип("ДокументСсылка.АвансовыйОтчет"));
		МассивТипов.Добавить(Тип("ДокументСсылка.ВозвратТоваровОтПокупателя"));
		МассивТипов.Добавить(Тип("ДокументСсылка.ВозвратТоваровПоставщику"));
		МассивТипов.Добавить(Тип("ДокументСсылка.ОтчетКомиссионераОПродажах"));
		МассивТипов.Добавить(Тип("ДокументСсылка.ОтчетКомитентуОПродажах"));
		МассивТипов.Добавить(Тип("ДокументСсылка.СписаниеСРасчетногоСчета"));
		МассивТипов.Добавить(Тип("ДокументСсылка.ПоступлениеНаРасчетныйСчет"));
		МассивТипов.Добавить(Тип("ДокументСсылка.ПлатежныйОрдерСписаниеДенежныхСредств"));
		МассивТипов.Добавить(Тип("ДокументСсылка.ПлатежныйОрдерПоступлениеДенежныхСредств"));
		МассивТипов.Добавить(Тип("ДокументСсылка.ПриходныйКассовыйОрдер"));
		МассивТипов.Добавить(Тип("ДокументСсылка.ПередачаОС"));
		МассивТипов.Добавить(Тип("ДокументСсылка.ПередачаНМА"));
		МассивТипов.Добавить(Тип("ДокументСсылка.РасходныйКассовыйОрдер"));
		МассивТипов.Добавить(Тип("ДокументСсылка.РеализацияТоваровУслуг"));
		МассивТипов.Добавить(Тип("ДокументСсылка.СчетНаОплатуПокупателю"));
		МассивТипов.Добавить(Тип("ДокументСсылка.ДокументРасчетовСКонтрагентом"));
		МассивТипов.Добавить(Тип("ДокументСсылка.КорректировкаДолга"));
		МассивТипов.Добавить(Тип("ДокументСсылка.ПоступлениеДопРасходов"));
		МассивТипов.Добавить(Тип("ДокументСсылка.ПоступлениеТоваровУслуг"));
		МассивТипов.Добавить(Тип("ДокументСсылка.ПоступлениеНМА"));
		МассивТипов.Добавить(Тип("ДокументСсылка.ПоступлениеИзПереработки"));
		МассивТипов.Добавить(Тип("ДокументСсылка.СчетНаОплатуПоставщика"));
	КонецЕсли;
	ДопустимыеТипы = Новый ОписаниеТипов(МассивТипов);
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийКорректировкаДолга.ПроведениеВзаимозачета") Тогда
		Контрагент = Объект.КонтрагентКредитор;
	Иначе
		Контрагент = Объект.КонтрагентДебитор;
	КонецЕсли;
	
	ПараметрыОбъекта = Новый Структура;
	ПараметрыОбъекта.Вставить("Дата"                 , Объект.Дата);
	ПараметрыОбъекта.Вставить("ДоговорКонтрагента"   , СтрокаТабличнойЧасти.ДоговорКонтрагента);
	ПараметрыОбъекта.Вставить("Контрагент"           , Контрагент);
	ПараметрыОбъекта.Вставить("Организация"          , Объект.Организация);
	ПараметрыОбъекта.Вставить("ОстаткиОбороты"       , "Дт");
	ПараметрыОбъекта.Вставить("ТипыДокументов"       , ДопустимыеТипы);
	ПараметрыОбъекта.Вставить("СчетУчета"            , СтрокаТабличнойЧасти.СчетУчетаРасчетов);
	
	ПараметрыФормы = Новый Структура("ПараметрыОбъекта", ПараметрыОбъекта);
	ОткрытьФорму("Документ.ДокументРасчетовСКонтрагентом.ФормаВыбора", ПараметрыФормы, Элемент);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ТаблицаСуммаПриИзмененииНаСервере(ДанныеСтроки,ДанныеОбъекта)
	Если ДанныеОбъекта.ВалютаДокумента = ДанныеОбъекта.ВалютаРегламентированногоУчета Тогда
		ПересчитатьСуммуПоСтроке(ДанныеСтроки,ДанныеОбъекта);
	Иначе	
		Если ДанныеОбъекта.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ВводНачальныхОстатков ТОгда
			ПересчитатьКурсПоСтроке(ДанныеСтроки,ДанныеОбъекта);
		Иначе
			ПересчитатьСуммуПоСтроке(ДанныеСтроки,ДанныеОбъекта);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьСчетаУчетаВСтрокеТабЧастиНаСервере(ДанныеСтроки,ДанныеОбъекта)
	Документы.КорректировкаДолга.ЗаполнитьСчетаУчетаВСтрокеТабЧасти(ДанныеСтроки, ДанныеОбъекта, Истина);
КонецПроцедуры
 
&НаСервереБезКонтекста
Процедура ЗаТаруПриИзменении(ДанныеСтроки,ДанныеОбъекта)
	
	Документы.КорректировкаДолга.ЗаполнитьСчетаУчетаВСтрокеТабЧасти(ДанныеСтроки, ДанныеОбъекта, Истина);
		
		Если ДанныеСтроки.ЗаТару Тогда
			ДанныеСтроки.СтавкаНДС 		  = Перечисления.СтавкиНДС.НеНДС;
			ДанныеСтроки.СуммаНДС  	      = 0;
			ДанныеСтроки.СчетУчетаНДС 	   	  = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
			ДанныеСтроки.СчетУчетаНДСПодтвержденный = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
			ДанныеСтроки.НалоговоеНазначение = Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяХозДеятельность;
			ДанныеСтроки.Амортизируется = Ложь;
		КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьПодсказку(Команда)
	ПараметрыФормы	= Новый Структура;
	ПараметрыФормы.Вставить("ВидОперации", Объект.ВидОперации);

	ОткрытьФорму("Документ.КорректировкаДолга.Форма.ФормаСправки", ПараметрыФормы, ЭтаФорма, ВариантОткрытияОкна.ОтдельноеОкно);
КонецПроцедуры

#КонецОбласти 

#Область ИзменениеСчетовУчетаИхСубконто

&НаКлиентеНаСервереБезКонтекста
Процедура НастроитьСубконтоПриПодготовкеФормыНаСервере(Форма,Знач ИмяСчета)
	
	ИмяПоля = ОпределитьИмяСубконтоПоИмениСчета(ИмяСчета);	
	ИмяРеквизита = ОпределитьИмяРеквизитаСубконтоПоИмениСчета(ИмяСчета);	
	Если ИмяСчета = "СчетВС" Тогда
		ИмяСчета = "СчетДт";
	КонецЕсли; 

	УстановитьЗаголовкиИДоступностьСубконто(Форма, ИмяСчета, ИмяПоля, ИмяРеквизита);
	УстановитьПараметрыВыбораСубконто(Форма, ИмяСчета, ИмяПоля, ИмяРеквизита);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура НастроитьСубконтоПриИзмененииСчета(Форма,знач ИмяСчета)
	
	ИмяПоля = ОпределитьИмяСубконтоПоИмениСчета(ИмяСчета);	
	ИмяРеквизита = ОпределитьИмяРеквизитаСубконтоПоИмениСчета(ИмяСчета);	
	Если ИмяСчета = "СчетВС" Тогда
		ИмяСчета = "СчетДт";
	КонецЕсли; 
	
	УстановитьЗаголовкиИДоступностьСубконто(Форма, ИмяСчета, ИмяПоля, ИмяРеквизита);
	УстановитьЗначенияСубконтоПриИзмененииСчета(Форма, ИмяСчета, ИмяРеквизита);
	УстановитьПараметрыВыбораСубконто(Форма, ИмяСчета, ИмяПоля, ИмяРеквизита);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура НастроитьСубконтоПриИзмененииСубконто(Форма,Знач ИмяСчета)
	
	ИмяПоля = ОпределитьИмяСубконтоПоИмениСчета(ИмяСчета);	
	ИмяРеквизита = ОпределитьИмяРеквизитаСубконтоПоИмениСчета(ИмяСчета);	
	Если ИмяСчета = "СчетВС" Тогда
		ИмяСчета = "СчетДт";
	КонецЕсли; 

	УстановитьПараметрыВыбораСубконто(Форма, ИмяСчета, ИмяПоля, ИмяРеквизита);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьЗаголовкиИДоступностьСубконто(Форма, знач ИмяСчета, ИмяПоля, ИмяРеквизита)

	ОбъектФормы = Форма.Объект;
	
	ПоляФормы = Новый Структура("Субконто1, Субконто2, Субконто3",
		ИмяПоля+"1",
		ИмяПоля+"2",
		ИмяПоля+"3");
		
	ЗаголовкиПолей = Новый Структура("Субконто1, Субконто2, Субконто3",
		"Заголовок"+ИмяРеквизита+"1",
		"Заголовок"+ИмяРеквизита+"2",
		"Заголовок"+ИмяРеквизита+"3");
		
	БухгалтерскийУчетКлиентСервер.ПриВыбореСчета(ОбъектФормы[ИмяСчета], Форма, ПоляФормы, ЗаголовкиПолей);

КонецПроцедуры // УстановитьЗаголовкиИДоступностьСубконто

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьПараметрыВыбораСубконто(Форма, ИмяСчета, ИмяПоля, ИмяРеквизита)

	ОбъектФормы = Форма.Объект;
	
	ПараметрыДокумента = ПолучитьСписокПараметров(Форма, ИмяРеквизита+"%Индекс%"); 
	БухгалтерскийУчетКлиентСервер.ИзменитьПараметрыВыбораПолейСубконто(
		Форма,
		ОбъектФормы,
		ИмяРеквизита+"%Индекс%",
		ИмяПоля+"%Индекс%",
		ПараметрыДокумента);

КонецПроцедуры // УстановитьПараметрыВыбораСубконто

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьЗначенияСубконтоПриИзмененииСчета(Форма, ИмяСчета, ИмяПоля)

	ОбъектФормы = Форма.Объект;
	
	ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3, Организация",
		ИмяПоля+"1",
		ИмяПоля+"2",
		ИмяПоля+"3",
		ОбъектФормы.Организация);
		
	БухгалтерскийУчетКлиентСервер.ПриИзмененииСчета(ОбъектФормы[ИмяСчета], ОбъектФормы, ПоляОбъекта);

КонецПроцедуры // УстановитьЗначенияСубконтоПриИзмененииСчета

&НаКлиентеНаСервереБезКонтекста
Функция ОпределитьИмяСубконтоПоИмениСчета(ИмяСчета)
	
	Если ИмяСчета = "СчетДт" Тогда
		Возврат "СубконтоДт"
	ИначеЕсли ИмяСчета = "СчетКт" Тогда
		Возврат "СубконтоКт"
	ИначеЕсли ИмяСчета = "СчетВС" Тогда
		Возврат "СубконтоВС"
	КонецЕсли;
	
	ВызватьИсключение "Неверное обращение к функции ОпределитьИмяСубконтоПоИмениСчета";
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ОпределитьИмяРеквизитаСубконтоПоИмениСчета(ИмяСчета)
	
	Если ИмяСчета = "СчетДт" Тогда
		Возврат "СубконтоДт"
	ИначеЕсли ИмяСчета = "СчетКт" Тогда
		Возврат "СубконтоКт"
	ИначеЕсли ИмяСчета = "СчетВС" Тогда
		Возврат "СубконтоДт"
	КонецЕсли;
	
	ВызватьИсключение "Неверное обращение к функции ОпределитьИмяРеквизитаСубконтоПоИмениСчета";
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьСписокПараметров(Форма, ШаблонИмяПоляОбъекта)
	
	ОбъектФормы = Форма.Объект;
	
	СписокПараметров = Новый Структура;
	Для Индекс = 1 По 3 Цикл
		ИмяПоля = СтрЗаменить(ШаблонИмяПоляОбъекта, "%Индекс%", Индекс);
		Если ТипЗнч(ОбъектФормы[ИмяПоля]) = Тип("СправочникСсылка.Контрагенты") Тогда
			СписокПараметров.Вставить("Контрагент", ОбъектФормы[ИмяПоля]);
		ИначеЕсли ТипЗнч(ОбъектФормы[ИмяПоля]) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
			СписокПараметров.Вставить("ДоговорКонтрагента", ОбъектФормы[ИмяПоля]);
		ИначеЕсли ТипЗнч(ОбъектФормы[ИмяПоля]) = Тип("СправочникСсылка.Склады") Тогда
			СписокПараметров.Вставить("Склад", ОбъектФормы[ИмяПоля]);
		КонецЕсли;
	КонецЦикла;
	
	СписокПараметров.Вставить("Организация", ОбъектФормы.Организация);

	Возврат СписокПараметров;

КонецФункции // ПолучитьСписокПараметров

//Очищает табличную часть документа при смене контрагента, организации
&НаКлиентеНаСервереБезКонтекста
Процедура ОчиститьСтрокиТабЧасти(Объект,ВидЗадолженности = Неопределено)
	
	Если ВидЗадолженности = Неопределено Тогда
		ТаблицаДолгов = Объект.СуммыДолга;
	Иначе
		ТаблицаДолгов = Объект.СуммыДолга.НайтиСтроки(Новый Структура("ВидЗадолженности", ВидЗадолженности));
	КонецЕсли; 
		
	Если ТаблицаДолгов.Количество() > 0 Тогда

		Если ВидЗадолженности = Неопределено Тогда
			Объект.СуммыДолга.Очистить();
		Иначе
			Для каждого СтрокаКУдалению Из ТаблицаДолгов Цикл
				Объект.СуммыДолга.Удалить(СтрокаКУдалению);
			КонецЦикла; 
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ВалютаДокументаПриИзмененииНаСервере(ПараметрыОбработки = Неопределено)

	Если ПараметрыОбработки = Неопределено Тогда
		ПараметрыОбработки = Новый Структура;
		ПараметрыОбработки.Вставить("ВалютаРасчетовПередИзменением", Неопределено);
		ПараметрыОбработки.Вставить("КурсДоИзменения", Объект.КурсДокумента);
	КонецЕсли; 
	
	Если ПараметрыОбработки.ВалютаРасчетовПередИзменением <> Объект.ВалютаДокумента Тогда
		
		Объект.СуммыДолга.Очистить();
		
		СтруктураКурсаДокумента = РаботаСКурсамиВалют.ПолучитьКурсВалюты(Объект.ВалютаДокумента, Объект.Дата);
		Объект.КурсДокумента      = СтруктураКурсаДокумента.Курс;
		Объект.КратностьДокумента = СтруктураКурсаДокумента.Кратность;
		
	КонецЕсли; 
	
	ЕстьСтроки = Объект.СуммыДолга.Количество() > 0;
	Если ПараметрыОбработки.КурсДоИзменения <> Объект.КурсДокумента И ЕстьСтроки Тогда
		КурсДокументаПриИзмененииНаСервере();
	КонецЕсли;
	
	ОбновитьФлагиУсловногоОформления(ЭтаФорма);
	ЗаполнитьДобавленныеКолонкиТаблиц();
	УправлениеФормой();

КонецПроцедуры

#КонецОбласти