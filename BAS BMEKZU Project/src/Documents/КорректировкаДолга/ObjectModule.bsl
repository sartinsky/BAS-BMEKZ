#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
Перем мВалютаРегламентированногоУчета;

Перем НомераСубконтоРДпоСчету;


///////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Область ОбработчикиСобытий

// Процедура вызывается перед записью документа 
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)

	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ВводНачальныхОстатков Тогда
		Для каждого Строка Из СуммыДолга Цикл
			// поправим налоговые реквизииты
			Если Строка.ЗаТару Тогда
			
				Строка.СтавкаНДС 		   = Перечисления.СтавкиНДС.НеНДС;
				Строка.СуммаНДС  	       = 0;
				Строка.СчетУчетаНДС 	   = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
				Строка.Амортизируется 	   = ЛОЖЬ;
			
			КонецЕсли; 
		КонецЦикла; 
	КонецЕсли; 
	
	// заполнение реквизитов СуммаДтЗадолженности и СуммаКтЗадолженности
	ТабСумм = ЭтотОбъект.СуммыДолга.Выгрузить();
	
	Если ВалютаДокумента = мВалютаРегламентированногоУчета или ВалютаДокумента = Справочники.Валюты.ПустаяСсылка() Тогда
		ТабСумм.Свернуть("ВидЗадолженности","Сумма");
	Иначе
		ТабСумм.Свернуть("ВидЗадолженности","СуммаВзаиморасчетов");
		ТабСумм.Колонки.СуммаВзаиморасчетов.Имя = "Сумма";
	КонецЕсли; 
	
	СуммаДтЗадолженности = 0;
	СуммаКтЗадолженности = 0;
	
	Для каждого СтрокаТаблицы Из ТабСумм Цикл
		Если  СтрокаТаблицы.ВидЗадолженности = Перечисления.ВидыЗадолженности.Дебиторская Тогда
			СуммаДтЗадолженности  = СуммаДтЗадолженности+СтрокаТаблицы.Сумма;
		ИначеЕсли  СтрокаТаблицы.ВидЗадолженности = Перечисления.ВидыЗадолженности.Кредиторская Тогда
			СуммаКтЗадолженности = СуммаКтЗадолженности+СтрокаТаблицы.Сумма;
		КонецЕсли; 
	КонецЦикла; 	
	
	Если ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ВводНачальныхОстатков Тогда
		Если НЕ ЗначениеЗаполнено(СчетДт) Тогда
			СчетДт = ПланыСчетов.Хозрасчетный.Вспомогательный;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ПередЗаписью

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	Перем Заголовок, СтруктураШапкиДокумента;
	Перем ТаблицаПоСуммамДолга;

	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначенияБПВызовСервера.ПредставлениеДокументаПриПроведении(Ссылка);
	
	// Проверка ручной корректировки
	ПроведениеСервер.ПодготовитьНаборыЗаписейКПроведению(ЭтотОбъект);
	Если РучнаяКорректировка Тогда
		Возврат;
	КонецЕсли;
	
	ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента);
	
	
	ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоСуммамДолга, Отказ, Заголовок);
	
	
	// Движения по документу
	Если Не Отказ Тогда

		ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоСуммамДолга, Отказ, Заголовок);

	КонецЕсли; 
	
	Движения.Хозрасчетный.ВыполнитьДействияПередЗаписьюДвижений();

	ПроведениеСервер.ПодготовитьНаборыЗаписейКЗаписиДвижений(ЭтотОбъект);
	
КонецПроцедуры	// ОбработкаПроведения()

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКОтменеПроведения(ЭтотОбъект);
	Движения.Записать();
	
КонецПроцедуры


Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	ЗаполнениеДокументов.Заполнить(ЭтотОбъект, ДанныеЗаполнения);
	ВалютаДокумента = мВалютаРегламентированногоУчета;
	КурсДокумента 	   = 1;
	КратностьДокумента = 1;	
	
	СчетУчетаНДСКредит 		  = ПланыСчетов.Хозрасчетный.НалоговыйКредит;
	СчетУчетаНДСОбязательства = ПланыСчетов.Хозрасчетный.НалоговыеОбязательства;
	
	СписыватьИзРезерваСомнительныхДолгов = Истина;
	НачислятьРезервСомнительныхДолгов = Истина;
	
	СчетРезерваСомнительныхДолгов = ПланыСчетов.Хозрасчетный.ПоЗадолженностиЗаТоварыУслугиРаботы;
	ПараметрыСписанияСебестоимостиНУ = Справочники.СхемыРеализации.СписаниеБезнадежнойЗадолженности;
	НеОтноситьНаВРСуммуНДСПриСписании = Истина;
	
	Документы.КорректировкаДолга.ЗаполнитьСчетаУчетаВШапке(ЭтотОбъект);
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	Дата = НачалоДня(ОбщегоНазначенияБП.ПолучитьРабочуюДату());
	Ответственный = Пользователи.ТекущийПользователь();
	
	СтруктураКурсаВзаиморасчетов = РаботаСКурсамиВалют.ПолучитьКурсВалюты(
	ВалютаДокумента, Дата);
	
	КурсДокумента      = СтруктураКурсаВзаиморасчетов.Курс;
	КратностьДокумента = СтруктураКурсаВзаиморасчетов.Кратность;
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	Перем Заголовок, СтруктураШапкиДокумента;
	Перем ТаблицаПоСуммамДолга;
	МассивНепроверяемыхРеквизитов = Новый Массив;

	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначенияБПВызовСервера.ПредставлениеДокументаПриПроведении(Ссылка);
	
	ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента);
	
	ПодготовитьТаблицыДокументаДляПроверкиЗаполнения(ТаблицаПоСуммамДолга);
	
	// Проверим правильность заполнения шапки документа
	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, ТаблицаПоСуммамДолга, Отказ, Заголовок,МассивНепроверяемыхРеквизитов);  
	
	// Проверить заполнение ТЧ 
	ПроверитьЗаполнениеТабличнойЧастиСуммыДолга(ТаблицаПоСуммамДолга, СтруктураШапкиДокумента, Отказ, Заголовок,МассивНепроверяемыхРеквизитов);
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
КонецПроцедуры

#КонецОбласти 

#Область Проведение

Процедура ДвиженияПоРегистрамРегл(СтруктураШапкиДокумента, ТаблицаПоСуммамДолга, Отказ, Заголовок, ТаблицаДебиторскойЗадолженности,ТаблицаКредиторскойЗадолженности)
	
	СодержаниеПроводки = "";
	Если СтруктураШапкиДокумента.ВидОперации = перечисления.ВидыОперацийКорректировкаДолга.ПроведениеВзаимозачета Тогда
		СодержаниеПроводки = НСтр("ru='Взаимозачет';uk='Взаємозалік'",Локализация.КодЯзыкаИнформационнойБазы());
	ИначеЕсли СтруктураШапкиДокумента.ВидОперации = перечисления.ВидыОперацийКорректировкаДолга.ПереносЗадолженности Тогда
		СодержаниеПроводки = НСтр("ru='Перенос задолженности';uk='Перенесення заборгованості'",Локализация.КодЯзыкаИнформационнойБазы());
	ИначеЕсли СтруктураШапкиДокумента.ВидОперации = перечисления.ВидыОперацийКорректировкаДолга.СписаниеЗадолженности Тогда
		СодержаниеПроводки = НСтр("ru='Списание задолженности';uk='Списання заборгованості'",Локализация.КодЯзыкаИнформационнойБазы());
	ИначеЕсли СтруктураШапкиДокумента.ВидОперации = перечисления.ВидыОперацийКорректировкаДолга.ИзменениеЗадолженности Тогда
		СодержаниеПроводки = НСтр("ru='Изменение (формирование) задолженности';uk='Зміна (формування) заборгованості'");
	КонецЕсли; 
	
	КоличествоПроводокПоДебиторке = 0;
	
	Если ТаблицаДебиторскойЗадолженности.Количество()>0 Тогда
		СтруктураШапкиДокумента.Вставить("ВидЗадолженности",Перечисления.ВидыЗадолженности.Дебиторская);
		
		Если не ТаблицаДебиторскойЗадолженности.Найти(Истина,"ЭтоВозврат") = Неопределено Тогда
			Построитель_ТаблицаЗадолженности = Новый построительЗапроса();
			Построитель_ТаблицаЗадолженности.ИсточникДанных = Новый ОписаниеИсточникаДанных(ТаблицаДебиторскойЗадолженности);
			Построитель_ТаблицаЗадолженности.Отбор.Добавить("ЭтоВозврат");
			
			// Сначала по возвратам пройдемся
			Построитель_ТаблицаЗадолженности.Отбор.ЭтоВозврат.Установить(Истина,Истина);
			СтруктураШапкиДокумента.Вставить("ЭтоВозврат",Истина);
			Если БухгалтерскийУчетРасчетовСКонтрагентами.ДвижениеДенег(ЭтотОбъект,СтруктураШапкиДокумента,Истина,Отказ,Заголовок,СодержаниеПроводки,,Построитель_ТаблицаЗадолженности.Результат.Выгрузить(ОбходРезультатаЗапроса.Прямой))=Ложь тогда
				// Ошибка при списании задолженности
				Возврат;
			КонецЕсли;
			// Затем отработаем погашение задолженности
			СтруктураШапкиДокумента.Вставить("ЭтоВозврат",Ложь);
			Построитель_ТаблицаЗадолженности.Отбор.ЭтоВозврат.Установить(Ложь,Истина);
			
			Если БухгалтерскийУчетРасчетовСКонтрагентами.ДвижениеДенег(ЭтотОбъект,СтруктураШапкиДокумента,Истина,Отказ,Заголовок,СодержаниеПроводки,,Построитель_ТаблицаЗадолженности.Результат.Выгрузить(ОбходРезультатаЗапроса.Прямой))=Ложь тогда
				// Ошибка при списании задолженности
				Возврат;
			КонецЕсли;
		
		Иначе
			Если БухгалтерскийУчетРасчетовСКонтрагентами.ДвижениеДенег(ЭтотОбъект,СтруктураШапкиДокумента,Истина,Отказ,Заголовок,СодержаниеПроводки,,ТаблицаДебиторскойЗадолженности)=Ложь тогда
				// Ошибка при списании задолженности
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
		Если   СтруктураШапкиДокумента.ВидОперации = перечисления.ВидыОперацийКорректировкаДолга.ПроведениеВзаимозачета
		  и не СтруктураШапкиДокумента.ИспользоватьВспомогательныйСчет Тогда
			// Выгружаем набор движении для последующей корректировки
			НаборДвиженийДебиторка = Движения.Хозрасчетный.Выгрузить();
			КоличествоПроводокПоДебиторке = Движения.Хозрасчетный.Количество();
			
			Движения.Хозрасчетный.Очистить();

		КонецЕсли;
		
	КонецЕсли; 
	
	Если ТаблицаКредиторскойЗадолженности.Количество()>0 Тогда
		СтруктураШапкиДокумента.Вставить("ВидЗадолженности",Перечисления.ВидыЗадолженности.Кредиторская);
		
		Если не ТаблицаКредиторскойЗадолженности.Найти(Истина,"ЭтоВозврат") = Неопределено Тогда
			Построитель_ТаблицаЗадолженности = Новый построительЗапроса();
			Построитель_ТаблицаЗадолженности.ИсточникДанных = Новый ОписаниеИсточникаДанных(ТаблицаКредиторскойЗадолженности);
			Построитель_ТаблицаЗадолженности.Отбор.Добавить("ЭтоВозврат");
			
			// Сначала по возвратам пройдемся
			Построитель_ТаблицаЗадолженности.Отбор.ЭтоВозврат.Установить(Истина,Истина);
			СтруктураШапкиДокумента.Вставить("ЭтоВозврат",Истина);
			Если БухгалтерскийУчетРасчетовСКонтрагентами.ДвижениеДенег(ЭтотОбъект,СтруктураШапкиДокумента,Истина,Отказ,Заголовок,СодержаниеПроводки,,Построитель_ТаблицаЗадолженности.Результат.Выгрузить(ОбходРезультатаЗапроса.Прямой))=Ложь тогда
				// Ошибка при списании задолженности
				Возврат;
			КонецЕсли;
			// Затем отработаем погашение задолженности
			СтруктураШапкиДокумента.Вставить("ЭтоВозврат",Ложь);
			Построитель_ТаблицаЗадолженности.Отбор.ЭтоВозврат.Установить(Ложь,Истина);
			
			Если БухгалтерскийУчетРасчетовСКонтрагентами.ДвижениеДенег(ЭтотОбъект,СтруктураШапкиДокумента,Истина,Отказ,Заголовок,СодержаниеПроводки,,Построитель_ТаблицаЗадолженности.Результат.Выгрузить(ОбходРезультатаЗапроса.Прямой))=Ложь тогда
				// Ошибка при списании задолженности
				Возврат;
			КонецЕсли;
		
		Иначе
			Если БухгалтерскийУчетРасчетовСКонтрагентами.ДвижениеДенег(ЭтотОбъект,СтруктураШапкиДокумента,Истина,Отказ,Заголовок,СодержаниеПроводки,,ТаблицаКредиторскойЗадолженности)=Ложь тогда
				// Ошибка при списании задолженности
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
		Если   СтруктураШапкиДокумента.ВидОперации = перечисления.ВидыОперацийКорректировкаДолга.ПроведениеВзаимозачета 
		  и не СтруктураШапкиДокумента.ИспользоватьВспомогательныйСчет Тогда
			// Выгружаем набор движении для последующей корректировки
			НаборДвиженийКредиторка = Движения.Хозрасчетный.Выгрузить();
			
			Движения.Хозрасчетный.Очистить();

		КонецЕсли;
	КонецЕсли; 
	
	Если   СтруктураШапкиДокумента.ВидОперации = перечисления.ВидыОперацийКорректировкаДолга.ПроведениеВзаимозачета
	  и не СтруктураШапкиДокумента.ИспользоватьВспомогательныйСчет и КоличествоПроводокПоДебиторке>0 Тогда
		// Сопоставление дебета и кредита проводки
		// Сопоставление производится по сумме регламентированного учета - балансовый реквизит проводки
		ВспомогательныйСчет = ПланыСчетов.Хозрасчетный.Вспомогательный;
		
		Для каждого СтрокаДебиторки Из НаборДвиженийДебиторка Цикл
			Если не СтрокаДебиторки.СчетДт = ВспомогательныйСчет Тогда
				// Суммовые разницы или что-то подобное (проводка не самого взаимозачета)
				Проводка  = Движения.Хозрасчетный.Добавить();
				Проводка.Период			= СтрокаДебиторки.Период;
				Проводка.Организация	= СтрокаДебиторки.Организация;
				Проводка.НомерЖурнала	= СтрокаДебиторки.НомерЖурнала;
				Проводка.Содержание		= СтрокаДебиторки.Содержание;
				Проводка.Сумма			= СтрокаДебиторки.Сумма;
				
				Проводка.СчетДт			= СтрокаДебиторки.СчетДт;
				Для НомерСубконто = 1  По 3 Цикл
					Если Не СтрокаДебиторки["ВидСубконтоДт"+НомерСубконто] = Неопределено Тогда
						БухгалтерскийУчетРед12.УстановитьСубконтоПоВидуСубконто(Проводка.СчетДт, Проводка.СубконтоДт, СтрокаДебиторки["ВидСубконтоДт"+НомерСубконто], СтрокаДебиторки["СубконтоДт"+НомерСубконто]);
					КонецЕсли; 
				КонецЦикла; 
				
				Проводка.ВалютаДт		= СтрокаДебиторки.ВалютаДт;
				Проводка.ВалютнаяСуммаДт= СтрокаДебиторки.ВалютнаяСуммаДт;
				
				Проводка.СчетКт			= СтрокаДебиторки.СчетКт;
				Для НомерСубконто = 1  По 3 Цикл
					Если Не СтрокаДебиторки["ВидСубконтоКт"+НомерСубконто] = Неопределено Тогда
						БухгалтерскийУчетРед12.УстановитьСубконтоПоВидуСубконто(Проводка.СчетКт, Проводка.СубконтоКт, СтрокаДебиторки["ВидСубконтоКт"+НомерСубконто], СтрокаДебиторки["СубконтоКт"+НомерСубконто]);
					КонецЕсли; 
				КонецЦикла; 
				
				Проводка.ВалютаКт		= СтрокаДебиторки.ВалютаКт;
				Проводка.ВалютнаяСуммаКт= СтрокаДебиторки.ВалютнаяСуммаКт;
				
				Продолжить;
			КонецЕсли;
			
			Для каждого СтрокаКредиторки Из НаборДвиженийКредиторка Цикл
				Если СтрокаДебиторки.Сумма = 0 Тогда
				    Прервать;
				КонецЕсли;
				Если СтрокаКредиторки.Сумма = 0 Тогда
				    Продолжить;
				КонецЕсли;
				
				Если не СтрокаКредиторки.СчетКт = ВспомогательныйСчет Тогда
					// Суммовые разницы или что-то подобное (проводка не самого взаимозачета)
					Проводка  = Движения.Хозрасчетный.Добавить();
					Проводка.Период			= СтрокаКредиторки.Период;
					Проводка.Организация	= СтрокаКредиторки.Организация;
					Проводка.НомерЖурнала	= СтрокаКредиторки.НомерЖурнала;
					Проводка.Содержание		= СтрокаКредиторки.Содержание;
					Проводка.Сумма			= СтрокаКредиторки.Сумма;
					
					Проводка.СчетДт			= СтрокаКредиторки.СчетДт;
					Для НомерСубконто = 1  По 3 Цикл
						Если Не СтрокаКредиторки["ВидСубконтоДт"+НомерСубконто] = Неопределено Тогда
							БухгалтерскийУчетРед12.УстановитьСубконтоПоВидуСубконто(Проводка.СчетДт, Проводка.СубконтоДт, СтрокаКредиторки["ВидСубконтоДт"+НомерСубконто], СтрокаКредиторки["СубконтоДт"+НомерСубконто]);
						КонецЕсли; 
					КонецЦикла; 
					
					Проводка.ВалютаДт		= СтрокаКредиторки.ВалютаДт;
					Проводка.ВалютнаяСуммаДт= СтрокаКредиторки.ВалютнаяСуммаДт;
					
					Проводка.СчетКт			= СтрокаКредиторки.СчетКт;
					Для НомерСубконто = 1  По 3 Цикл
						Если Не СтрокаКредиторки["ВидСубконтоКт"+НомерСубконто] = Неопределено Тогда
							БухгалтерскийУчетРед12.УстановитьСубконтоПоВидуСубконто(Проводка.СчетКт, Проводка.СубконтоКт, СтрокаКредиторки["ВидСубконтоКт"+НомерСубконто], СтрокаКредиторки["СубконтоКт"+НомерСубконто]);
						КонецЕсли; 
					КонецЦикла; 
					
					Проводка.ВалютаКт		= СтрокаКредиторки.ВалютаКт;
					Проводка.ВалютнаяСуммаКт= СтрокаКредиторки.ВалютнаяСуммаКт;
					
					СтрокаКредиторки.Сумма = 0;
					СтрокаКредиторки.ВалютнаяСуммаДт = 0;
					СтрокаКредиторки.ВалютнаяСуммаКт = 0;
					Продолжить;
				КонецЕсли; 
				
				СуммаСоответствия = мин(СтрокаДебиторки.Сумма,СтрокаКредиторки.Сумма);
				
				Если СуммаСоответствия = 0 Тогда
					продолжить;
				КонецЕсли; 
				
				// Проводка взаимозачета
				Проводка  = Движения.Хозрасчетный.Добавить();
				Проводка.Период			= СтрокаДебиторки.Период;
				Проводка.Организация	= СтрокаДебиторки.Организация;
				Проводка.НомерЖурнала	= СтрокаДебиторки.НомерЖурнала;
				Проводка.Содержание		= СтрокаДебиторки.Содержание;
				Проводка.Сумма			= СуммаСоответствия;
				
				Проводка.СчетДт			= СтрокаКредиторки.СчетДт;
				Для НомерСубконто = 1  По 3 Цикл
					Если Не СтрокаКредиторки["ВидСубконтоДт"+НомерСубконто] = Неопределено Тогда
						БухгалтерскийУчетРед12.УстановитьСубконтоПоВидуСубконто(Проводка.СчетДт, Проводка.СубконтоДт, СтрокаКредиторки["ВидСубконтоДт"+НомерСубконто], СтрокаКредиторки["СубконтоДт"+НомерСубконто]);
					КонецЕсли; 
				КонецЦикла; 
				
				Проводка.ВалютаДт		= СтрокаКредиторки.ВалютаДт;
				Проводка.ВалютнаяСуммаДт= Окр(СтрокаКредиторки.ВалютнаяСуммаДт*СуммаСоответствия/СтрокаКредиторки.Сумма,2);
				
				
				Проводка.СчетКт			= СтрокаДебиторки.СчетКт;
				Для НомерСубконто = 1  По 3 Цикл
					Если Не СтрокаДебиторки["ВидСубконтоКт"+НомерСубконто] = Неопределено Тогда
						БухгалтерскийУчетРед12.УстановитьСубконтоПоВидуСубконто(Проводка.СчетКт, Проводка.СубконтоКт, СтрокаДебиторки["ВидСубконтоКт"+НомерСубконто], СтрокаДебиторки["СубконтоКт"+НомерСубконто]);
					КонецЕсли; 
				КонецЦикла; 
				
				Проводка.ВалютаКт		= СтрокаДебиторки.ВалютаКт;
				Проводка.ВалютнаяСуммаКт= Окр(СтрокаДебиторки.ВалютнаяСуммаКт*СуммаСоответствия/СтрокаДебиторки.Сумма,2);
				
				
				СтрокаДебиторки.Сумма			= СтрокаДебиторки.Сумма - СуммаСоответствия;
				СтрокаДебиторки.ВалютнаяСуммаКт = СтрокаДебиторки.ВалютнаяСуммаКт - Проводка.ВалютнаяСуммаКт;
			
				СтрокаКредиторки.Сумма			= СтрокаКредиторки.Сумма - СуммаСоответствия;
				СтрокаКредиторки.ВалютнаяСуммаДт = СтрокаКредиторки.ВалютнаяСуммаДт - Проводка.ВалютнаяСуммаДт;
				
			КонецЦикла; 
		КонецЦикла; 
	
		Для каждого СтрокаКредиторки Из НаборДвиженийКредиторка Цикл
			Если СтрокаКредиторки.Сумма = 0 и СтрокаКредиторки.ВалютнаяСуммаДт = 0 и СтрокаКредиторки.ВалютнаяСуммаКт = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			// Суммовые разницы или что-то подобное (проводка не самого взаимозачета)
			Проводка  = Движения.Хозрасчетный.Добавить();
			Проводка.Период			= СтрокаКредиторки.Период;
			Проводка.Организация	= СтрокаКредиторки.Организация;
			Проводка.НомерЖурнала	= СтрокаКредиторки.НомерЖурнала;
			Проводка.Содержание		= СтрокаКредиторки.Содержание;
			Проводка.Сумма			= СтрокаКредиторки.Сумма;
			
			Проводка.СчетДт			= СтрокаКредиторки.СчетДт;
			Для НомерСубконто = 1  По 3 Цикл
				Если Не СтрокаКредиторки["ВидСубконтоДт"+НомерСубконто] = Неопределено Тогда
					БухгалтерскийУчетРед12.УстановитьСубконтоПоВидуСубконто(Проводка.СчетДт, Проводка.СубконтоДт, СтрокаКредиторки["ВидСубконтоДт"+НомерСубконто], СтрокаКредиторки["СубконтоДт"+НомерСубконто]);
				КонецЕсли; 
			КонецЦикла; 
			
			Проводка.ВалютаДт		= СтрокаКредиторки.ВалютаДт;
			Проводка.ВалютнаяСуммаДт= СтрокаКредиторки.ВалютнаяСуммаДт;
			
			Проводка.СчетКт			= СтрокаКредиторки.СчетКт;
			Для НомерСубконто = 1  По 3 Цикл
				Если Не СтрокаКредиторки["ВидСубконтоКт"+НомерСубконто] = Неопределено Тогда
					БухгалтерскийУчетРед12.УстановитьСубконтоПоВидуСубконто(Проводка.СчетКт, Проводка.СубконтоКт, СтрокаКредиторки["ВидСубконтоКт"+НомерСубконто], СтрокаКредиторки["СубконтоКт"+НомерСубконто]);
				КонецЕсли; 
			КонецЦикла; 
			
			Проводка.ВалютаКт		= СтрокаКредиторки.ВалютаКт;
			Проводка.ВалютнаяСуммаКт= СтрокаКредиторки.ВалютнаяСуммаКт;
			
			СтрокаКредиторки.Сумма = 0;
			СтрокаКредиторки.ВалютнаяСуммаДт = 0;
			СтрокаКредиторки.ВалютнаяСуммаКт = 0;
			Продолжить;
		КонецЦикла; 
		
	КонецЕсли;
	
	Если  СтруктураШапкиДокумента.ЕстьНалогНаПрибыльДо2015
		И СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ИзменениеЗадолженности
		И СчетДт.НалоговыйУчет Тогда
		
		ЗаписыватьСуммуНУ = НЕ (СтруктураШапкиДокумента.НалоговоеНазначениеДоходовИЗатрат = Справочники.НалоговыеНазначенияАктивовИЗатрат.НКУ_НеХозДеятельность);
		
		Для каждого Строка Из Движения.Хозрасчетный Цикл
			Если Строка.СчетДт = СчетДт Тогда
				Строка.НалоговоеНазначениеДт = СтруктураШапкиДокумента.НалоговоеНазначениеДоходовИЗатрат;
				Если ЗаписыватьСуммуНУ Тогда
					Строка.СуммаНУДт = Строка.Сумма;
				КонецЕсли;
			КонецЕсли;
			
			Если Строка.СчетКт = СчетДт Тогда
				Строка.НалоговоеНазначениеКт = СтруктураШапкиДокумента.НалоговоеНазначениеДоходовИЗатрат;
				Если ЗаписыватьСуммуНУ Тогда
					Строка.СуммаНУКт = Строка.Сумма;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	//Учет курсовых разниц
	Если (ВалютаДокумента <> мВалютаРегламентированногоУчета) тогда
		БухгалтерскийУчетРед12.ПереоценкаСчетовДокументаРегл(ЭтотОбъект,СтруктураШапкиДокумента, мВалютаРегламентированногоУчета,Отказ,Заголовок);
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.ЕстьЕдиныйНалог И СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.СписаниеЗадолженности Тогда
		ДатаНачалаДействияЗУ71 = '2015 01 01';
		// проверяем только плательщика НДС, т.к. 1-2 группы ЕН не могут быть плательщиками
		Если (СтруктураШапкиДокумента.Дата < ДатаНачалаДействияЗУ71) ИЛИ (СтруктураШапкиДокумента.ЕстьНДС) Тогда
			ДвиженияПоЕдиномуНалогу(СтруктураШапкиДокумента, ТаблицаКредиторскойЗадолженности);
		КонецЕсли; 
	КонецЕсли;

КонецПроцедуры

Процедура ДвиженияПоРегистрамНалоговогоУчета(СтруктураШапкиДокумента, ТаблицаПоСуммамДолга, Отказ, Заголовок) 
	
	Если  НЕ СтруктураШапкиДокумента.ЕстьНДС Тогда
		Возврат;
	КонецЕсли; 
	
	НаборДвиженийПриобретений = Движения.ПриобретенияНалоговыйУчет; 	
	НаборДвиженийПродаж       = Движения.ПродажиНалоговыйУчет; 
	
	ВидЗадолженностиДебиторская  = Перечисления.ВидыЗадолженности.Дебиторская;
	ВидЗадолженностиКредиторская = Перечисления.ВидыЗадолженности.Кредиторская;
	
	Поставщик  = Перечисления.СтатусыКонтрагентов.Поставщик;
	Покупатель = Перечисления.СтатусыКонтрагентов.Покупатель;
	ПрочийКонтрагент = Перечисления.ВидыДоговоровКонтрагентов.Прочее;
	
	СобытияПродажи = Новый Соответствие();
	СобытияПродажи.Вставить("ВозвратОплаты", 	Перечисления.СобытияПродажиНалоговыйУчет.ВозвратОплатыПокупателю);
	СобытияПродажи.Вставить("Оплата",   		Перечисления.СобытияПродажиНалоговыйУчет.ОплатаПокупателем);
	СобытияПродажи.Вставить("Отгрузка",  		Перечисления.СобытияПродажиНалоговыйУчет.РеализацияПокупателю);
	СобытияПродажи.Вставить("ВозвратОтгрузки",  Перечисления.СобытияПродажиНалоговыйУчет.ВозвратОтПокупателя);
	
	СобытияПриобретения = Новый Соответствие();
	СобытияПриобретения.Вставить("ВозвратОплаты", 	Перечисления.СобытияПриобретенияНалоговыйУчет.ВозвратОплатыПоставщиком);
	СобытияПриобретения.Вставить("Оплата",   		Перечисления.СобытияПриобретенияНалоговыйУчет.ОплатаПоставщику);
	СобытияПриобретения.Вставить("Отгрузка",		Перечисления.СобытияПриобретенияНалоговыйУчет.ПоступлениеОтПоставщика);
	СобытияПриобретения.Вставить("ВозвратОтгрузки",	Перечисления.СобытияПриобретенияНалоговыйУчет.ВозвратПоставщику);
 	// разобъем таблицу ТаблицаПоСуммамДолга на две - соответственно для взаимоарсчетов по Поставщикам или Покупателям
	ТаблицаПриобретения = ТаблицаПоСуммамДолга.Скопировать();
	
	ТаблицаПриобретения.Колонки.Добавить("Событие");
	ТаблицаПриобретения.Колонки.Добавить("ДляХозяйственнойДеятельности");
	ТаблицаПриобретения.Колонки.Добавить("РасчетныйДокумент");
	ТаблицаПриобретения.Колонки.Добавить("СуммаНДСПропорционально", ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаПриобретения.ЗагрузитьКолонку(ТаблицаПриобретения.ВыгрузитьКолонку("СуммаНДСПропорциональноКредит"),"СуммаНДСПропорционально");
	ТаблицаПродажи = ТаблицаПриобретения.Скопировать();
	
	Счетчик = 0;
	Пока Счетчик < ТаблицаПриобретения.Количество() Цикл
		
		Строка = ТаблицаПриобретения[Счетчик];
		
		КорректировкаДолгаМетодомВозврата = Ложь;
		Если (      СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ПереносЗадолженности
			   И НЕ СтруктураШапкиДокумента.НеПереноситьНОНК) 
		 ИЛИ  (      СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ПроведениеВзаимозачета
			   И ЭтоОплата(Строка)) Тогда
		
			КорректировкаДолгаМетодомВозврата = Истина;	
		
		КонецЕсли;
		
		СоздаватьУказаннуюЗадолженность = Ложь;
		Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ИзменениеЗадолженности Тогда
			СоздаватьУказаннуюЗадолженность = Истина;
		КонецЕсли;
		
		КлючСобытия = "";
		Если  Строка.ВидДоговора    = Перечисления.ВидыДоговоровКонтрагентов.Бартерный Тогда
			
			Если  СоздаватьУказаннуюЗадолженность
				И Строка.ТипКонтрагента = Поставщик Тогда
			
				Если Строка.РасчетыВозврат = Перечисления.РасчетыВозврат.Возврат Тогда
				    КлючСобытия = "ВозвратОтгрузки";
				Иначе
					КлючСобытия = "Отгрузка";	
				КонецЕсли;				
			
			ИначеЕсли  КорректировкаДолгаМетодомВозврата
				И Строка.ТипКонтрагента = Поставщик Тогда
				
				Если Строка.РасчетыВозврат = Перечисления.РасчетыВозврат.Возврат Тогда
				    КлючСобытия = "Отгрузка";
				Иначе
					КлючСобытия = "ВозвратОтгрузки";	
				КонецЕсли;
			
			ИначеЕсли НЕ КорректировкаДолгаМетодомВозврата
				       И Строка.ТипКонтрагента = Покупатель Тогда	
					   
				// долги закрываются по противоположному регистру - поставщиков
				Если Строка.РасчетыВозврат = Перечисления.РасчетыВозврат.Возврат Тогда
				    КлючСобытия = "ВозвратОтгрузки";
				Иначе
					КлючСобытия = "Отгрузка";	
				КонецЕсли;
					   
			КонецЕсли;
			
		ИначеЕсли    Строка.ТипКонтрагента = Поставщик 
			    И НЕ Строка.ВидДоговора = ПрочийКонтрагент Тогда
			КлючСобытия = ПолучитьКлючСобытияПоНалоговомуУчету(Строка, СоздаватьУказаннуюЗадолженность, КорректировкаДолгаМетодомВозврата);
		КонецЕсли;	
		
		Если КлючСобытия = "" Тогда
			ТаблицаПриобретения.Удалить(Строка);
		Иначе
			Строка.Событие = СобытияПриобретения.Получить(КлючСобытия);
			Счетчик = Счетчик + 1;
		КонецЕсли; 
		
	КонецЦикла;
	
	Счетчик = 0;
	Пока Счетчик < ТаблицаПродажи.Количество() Цикл
		
		Строка = ТаблицаПродажи[Счетчик];
		
		КорректировкаДолгаМетодомВозврата = Ложь;
		Если (      СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ПереносЗадолженности
			   И НЕ СтруктураШапкиДокумента.НеПереноситьНОНК) 
		 ИЛИ  (      СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ПроведениеВзаимозачета
			   И ЭтоОплата(Строка)) Тогда
		
			КорректировкаДолгаМетодомВозврата = Истина;	
		
		КонецЕсли;
		
		СоздаватьУказаннуюЗадолженность = Ложь;
		Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ИзменениеЗадолженности Тогда
			СоздаватьУказаннуюЗадолженность = Истина;
		КонецЕсли;
		
		КлючСобытия = "";
		Если  Строка.ВидДоговора    = Перечисления.ВидыДоговоровКонтрагентов.Бартерный Тогда
			
			Если  СоздаватьУказаннуюЗадолженность
				И Строка.ТипКонтрагента = Покупатель Тогда
			
				Если Строка.РасчетыВозврат = Перечисления.РасчетыВозврат.Возврат Тогда
				    КлючСобытия = "ВозвратОтгрузки";
				Иначе
					КлючСобытия = "Отгрузка";	
				КонецЕсли;				
			
			ИначеЕсли  КорректировкаДолгаМетодомВозврата
				И Строка.ТипКонтрагента = Покупатель Тогда
				
				Если Строка.РасчетыВозврат = Перечисления.РасчетыВозврат.Возврат Тогда
				    КлючСобытия = "Отгрузка";
				Иначе
					КлючСобытия = "ВозвратОтгрузки";	
				КонецЕсли;
			
			ИначеЕсли НЕ КорректировкаДолгаМетодомВозврата
				       И Строка.ТипКонтрагента = Поставщик Тогда	
					   
				// долги закрываются по противоположному регистру - покупателей
				Если Строка.РасчетыВозврат = Перечисления.РасчетыВозврат.Возврат Тогда
				    КлючСобытия = "ВозвратОтгрузки";
				Иначе
					КлючСобытия = "Отгрузка";	
				КонецЕсли;
					   
			КонецЕсли;
			
		ИначеЕсли    Строка.ТипКонтрагента = Покупатель 
			    И НЕ Строка.ВидДоговора = ПрочийКонтрагент Тогда
			КлючСобытия = ПолучитьКлючСобытияПоНалоговомуУчету(Строка, СоздаватьУказаннуюЗадолженность, КорректировкаДолгаМетодомВозврата);
		КонецЕсли;	
		
		Если КлючСобытия = "" Тогда
			ТаблицаПродажи.Удалить(Строка);
		Иначе
			Строка.Событие = СобытияПродажи.Получить(КлючСобытия);
			Счетчик = Счетчик + 1;
		КонецЕсли;  
		
	КонецЦикла;
	
	Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ПереносЗадолженности Тогда
		// Необходимо показать перенос долга на конрагента-получателя
		
		// разобъем таблицу ТаблицаПоСуммамДолга на две - соответственно для взаимоарсчетов по Поставщикам или Покупателям
		ТаблицаПриобретенияКопия = ТаблицаПоСуммамДолга.Скопировать();
		ТаблицаПриобретенияКопия.Колонки.Добавить("Событие");
		ТаблицаПриобретенияКопия.Колонки.Добавить("ДляХозяйственнойДеятельности");
		ТаблицаПриобретенияКопия.Колонки.Добавить("РасчетныйДокумент");
		ТаблицаПриобретенияКопия.Колонки.Добавить("СуммаНДСПропорционально", ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповЧисла(15,2));
			
		ТаблицаПриобретенияКопия.ЗаполнитьЗначения(СтруктураШапкиДокумента.ДоговорКонтрагента, 				"ДоговорКонтрагента");
		ТаблицаПриобретенияКопия.ЗаполнитьЗначения(СтруктураШапкиДокумента.ДоговорКонтрагента.Владелец,     "Контрагент");
		ТаблицаПриобретенияКопия.ЗаполнитьЗначения(СтруктураШапкиДокумента.ДоговорКонтрагента.ВидДоговора, 	"ВидДоговора");
		
		Для каждого СтрокаТаблицы Из ТаблицаПриобретенияКопия Цикл
			
			СтрокаТаблицы.СуммаНДСПропорционально = СтрокаТаблицы.СуммаНДСПропорциональноКредит;
			
			Если СтрокаТаблицы.ТипКонтрагента = СтруктураШапкиДокумента.ТипКонтрагента Тогда
				Продолжить;	
			КонецЕсли;
			
			// если переносится оплата, например покупателя на поставщика, то новый долг будем считать не отгрузкой, а возвратом оплаты от поставщика
			СтрокаТаблицы.РасчетыВозврат = ?(СтрокаТаблицы.РасчетыВозврат = Перечисления.РасчетыВозврат.Возврат, Перечисления.РасчетыВозврат.Расчеты, Перечисления.РасчетыВозврат.Возврат);
			СтрокаТаблицы.ТипКонтрагента = СтруктураШапкиДокумента.ТипКонтрагента;
			
		КонецЦикла;
		
		ТаблицаПриобретенияКопия.ЗаполнитьЗначения(СтруктураШапкиДокумента.СложныйНалоговыйУчет,			"СложныйНалоговыйУчет");
		ТаблицаПриобретенияКопия.ЗаполнитьЗначения(НалоговыйУчет.ОпределитьСделкуНалоговыйУчет(СтруктураШапкиДокумента, Ссылка, Сделка),"Сделка");
		ТаблицаПриобретенияКопия.ЗаполнитьЗначения(НалоговыйУчет.ОпределитьСделкуНалоговыйУчет(СтруктураШапкиДокумента, Ссылка, Сделка),"СделкаНУ");
		ТаблицаПриобретенияКопия.ЗаполнитьЗначения(СтруктураШапкиДокумента.ВедениеВзаиморасчетов,			"ВедениеВзаиморасчетов");
		ТаблицаПриобретенияКопия.ЗаполнитьЗначения(СтруктураШапкиДокумента.СчетУчетаНДС,					"СчетУчетаНДС");
		ТаблицаПриобретенияКопия.ЗаполнитьЗначения(СтруктураШапкиДокумента.СчетУчетаНДСПодтвержденный,		"СчетУчетаНДСПодтвержденный");
		
		ТаблицаПриобретенияКопия.ЗаполнитьЗначения(Истина,													"ДобавленнаяСтрокаПереносаЗадолженности");
		
		ТаблицаПродажиКопия = ТаблицаПриобретенияКопия.Скопировать();
		
		// создадим указанные для переноса долги для нового контрагента
		Счетчик = 0;
		Пока Счетчик < ТаблицаПриобретенияКопия.Количество() Цикл
			
			Строка = ТаблицаПриобретенияКопия[Счетчик];
			
			КлючСобытия = "";
			Если  Строка.ВидДоговора    = Перечисления.ВидыДоговоровКонтрагентов.Бартерный Тогда
				
				Если (Строка.ТипКонтрагента = Поставщик  И НЕ ЭтоОплата(Строка)) 
				 ИЛИ (Строка.ТипКонтрагента = Покупатель И    ЭтоОплата(Строка)) Тогда
					
					Если Строка.РасчетыВозврат = Перечисления.РасчетыВозврат.Возврат Тогда
						КлючСобытия = "ВозвратОтгрузки";
					Иначе
						КлючСобытия = "Отгрузка";	
					КонецЕсли;
					
				КонецЕсли;
				
			ИначеЕсли    Строка.ТипКонтрагента = Поставщик 
					И НЕ Строка.ВидДоговора = ПрочийКонтрагент Тогда
				Если  ЭтоОплата(Строка) Тогда
					 Если Строка.РасчетыВозврат = Перечисления.РасчетыВозврат.Расчеты Тогда
						 КлючСобытия = "Оплата";
					 Иначе	
						 КлючСобытия = "ВозвратОплаты";
					 КонецЕсли;
				Иначе //отгрузка
					 Если Строка.РасчетыВозврат = Перечисления.РасчетыВозврат.Расчеты Тогда
						 КлючСобытия = "Отгрузка";	
					 Иначе	
						 КлючСобытия = "ВозвратОтгрузки";
					 КонецЕсли;
				КонецЕсли;
			КонецЕсли;	
			
			Если КлючСобытия = "" Тогда
				ТаблицаПриобретенияКопия.Удалить(Строка);
			Иначе
				Строка.Событие = СобытияПриобретения.Получить(КлючСобытия);
				Счетчик = Счетчик + 1;
			КонецЕсли;
								
		КонецЦикла;
		
		Счетчик = 0;
		Пока Счетчик < ТаблицаПродажиКопия.Количество() Цикл
			
			Строка = ТаблицаПродажиКопия[Счетчик];
			
			КлючСобытия = "";
			Если  Строка.ВидДоговора    = Перечисления.ВидыДоговоровКонтрагентов.Бартерный Тогда
				
				Если (Строка.ТипКонтрагента = Покупатель И НЕ ЭтоОплата(Строка)) 
				 ИЛИ (Строка.ТипКонтрагента = Поставщик  И    ЭтоОплата(Строка)) Тогда
					
					Если Строка.РасчетыВозврат = Перечисления.РасчетыВозврат.Возврат Тогда
						КлючСобытия = "ВозвратОтгрузки";
					Иначе
						КлючСобытия = "Отгрузка";	
					КонецЕсли;
					
				КонецЕсли;
				
			ИначеЕсли    Строка.ТипКонтрагента = Покупатель 
					И НЕ Строка.ВидДоговора = ПрочийКонтрагент Тогда
					
				Если  ЭтоОплата(Строка) Тогда
					 Если Строка.РасчетыВозврат = Перечисления.РасчетыВозврат.Расчеты Тогда
						 КлючСобытия = "Оплата";
					 Иначе	
						 КлючСобытия = "ВозвратОплаты";
					 КонецЕсли;
				Иначе //отгрузка
					 Если Строка.РасчетыВозврат = Перечисления.РасчетыВозврат.Расчеты Тогда
						 КлючСобытия = "Отгрузка";	
					 Иначе	
						 КлючСобытия = "ВозвратОтгрузки";
					 КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;	
			
			Если КлючСобытия = "" Тогда
				ТаблицаПродажиКопия.Удалить(Строка);
			Иначе
				Строка.Событие = СобытияПродажи.Получить(КлючСобытия);
				Счетчик = Счетчик + 1;
			КонецЕсли;

		КонецЦикла;		
		
		ОбщегоНазначенияБПВызовСервера.ЗагрузитьВТаблицуЗначений(ТаблицаПриобретенияКопия, ТаблицаПриобретения);
		ОбщегоНазначенияБПВызовСервера.ЗагрузитьВТаблицуЗначений(ТаблицаПродажиКопия, 	 ТаблицаПродажи);
		
	КонецЕсли;
	
	// Сформируем движения в зависимости от того как ведется налоговый учет
	ТаблицаПродажиСложныйНалоговыйУчет = ТаблицаПродажи.Скопировать();	
	ТаблицаПродажиСложныйНалоговыйУчет.Очистить();
	
	ТаблицаПриобретенияСложныйНалоговыйУчет = ТаблицаПриобретения.Скопировать();
	ТаблицаПриобретенияСложныйНалоговыйУчет.Очистить();
	
	Инд = 0;
	Пока ТаблицаПродажи.Количество() > Инд Цикл
		
		Строка = ТаблицаПродажи[Инд];
		// определеим сделки/расчетные документы
		
		Если Строка.СложныйНалоговыйУчет Тогда
		    СтрокаСложныйНалоговыйУчет = ТаблицаПродажиСложныйНалоговыйУчет.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаСложныйНалоговыйУчет, Строка);
		
			Если Строка.ДобавленнаяСтрокаПереносаЗадолженности = Ложь Тогда
				СтрокаСложныйНалоговыйУчет.Сделка = СтрокаСложныйНалоговыйУчет.СделкаНУ;
			КонецЕсли;
			
			ТаблицаПродажи.Удалить(Строка);
		Иначе
			
			// упрощенный налоговый учет
			Если НЕ СтруктураШапкиДокумента.ЕстьНДС Тогда
				Строка.СуммаНДС = 0;
				Строка.СтавкаНДС = Перечисления.СтавкиНДС.ПустаяСсылка();
			КонецЕсли;
				
			Если НЕ Строка.ВедениеВзаиморасчетовНУ = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоРасчетнымДокументам Тогда
				Строка.РасчетныйДокумент = Неопределено;
			Иначе
				Строка.РасчетныйДокумент = ?(ЗначениеЗаполнено(Строка.Сделка), Строка.Сделка, Ссылка);
			КонецЕсли;			
			
			Если Строка.ДобавленнаяСтрокаПереносаЗадолженности = Ложь Тогда
				Строка.Сделка = Строка.СделкаНУ;
			КонецЕсли;
			
			Инд = Инд + 1;
		КонецЕсли;
		
	            
	КонецЦикла;
	
	Инд = 0;
	Пока ТаблицаПриобретения.Количество() > Инд Цикл
		
		Строка = ТаблицаПриобретения[Инд];
		
		Строка.ДляХозяйственнойДеятельности = ?(Строка.НалоговоеНазначение = Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяНеХозДеятельность, Ложь, Истина);
		Если Строка.ВозвратнаяТара Тогда
			Строка.Амортизируется = Ложь;
		КонецЕсли;
		
		Если Строка.СложныйНалоговыйУчет Тогда
		    СтрокаСложныйНалоговыйУчет = ТаблицаПриобретенияСложныйНалоговыйУчет.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаСложныйНалоговыйУчет, Строка);
			
			// определим сделки/расчетные документы
			Если Строка.ДобавленнаяСтрокаПереносаЗадолженности = Ложь Тогда
				СтрокаСложныйНалоговыйУчет.Сделка = СтрокаСложныйНалоговыйУчет.СделкаНУ;
			КонецЕсли;
			
			ТаблицаПриобретения.Удалить(Строка);
		Иначе
				
			Если НЕ Строка.ВедениеВзаиморасчетовНУ = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоРасчетнымДокументам Тогда
				Строка.РасчетныйДокумент = Неопределено;
			Иначе
				Строка.РасчетныйДокумент = ?(ЗначениеЗаполнено(Строка.Сделка), Строка.Сделка, Ссылка);
			КонецЕсли;			
			
			// определим сделки/расчетные документы
			Если Строка.ДобавленнаяСтрокаПереносаЗадолженности = Ложь Тогда
				Строка.Сделка = Строка.СделкаНУ;
			КонецЕсли;
			
			Инд = Инд + 1;
			
		КонецЕсли;
	
	КонецЦикла;
	
	// Движения по регистру Продажи налоговый учет
	ТаблицаДвижений = НаборДвиженийПродаж.Выгрузить();
	ТаблицаДвижений.Очистить();
	// данные по договорам со сложным налоговым учетом
	ОбщегоНазначенияБПВызовСервера.ЗагрузитьВТаблицуЗначений(ТаблицаПродажиСложныйНалоговыйУчет, ТаблицаДвижений);
	
	ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтавкиНДС.ПустаяСсылка(), "СтавкаНДС");				
	ТаблицаДвижений.ЗаполнитьЗначения(Неопределено, "РасчетныйДокумент");				
	ТаблицаДвижений.ЗаполнитьЗначения(0, "СуммаНДС");				
	// данные по договорам с упрощенным налоговым учетом
	ОбщегоНазначенияБПВызовСервера.ЗагрузитьВТаблицуЗначений(ТаблицаПродажи, ТаблицаДвижений);
	
	ТаблицаДвижений.ЗаполнитьЗначения(Организация, "Организация");
	
	Если НЕ Отказ И ТаблицаДвижений.Количество() > 0 Тогда
		НаборДвиженийПродаж.мПериод = СтруктураШапкиДокумента.Дата;
		НаборДвиженийПродаж.мТаблицаДвижений = ТаблицаДвижений;

		НаборДвиженийПродаж.ВыполнитьПриход();
		НаборДвиженийПродаж.Записать();
	КонецЕсли;
	
	// Движения по регистру Приобретения налоговый учет
	ТаблицаДвижений = НаборДвиженийПриобретений.Выгрузить();
	ТаблицаДвижений.Очистить();
		
	ОбщегоНазначенияБПВызовСервера.ЗагрузитьВТаблицуЗначений(ТаблицаПриобретенияСложныйНалоговыйУчет, ТаблицаДвижений);
				
	ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтавкиНДС.ПустаяСсылка(), "СтавкаНДС");				
	ТаблицаДвижений.ЗаполнитьЗначения(Ложь, "ДляХозяйственнойДеятельности");				
	ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.ВидыДеятельностиНДС.ПустаяСсылка(), "ВидДеятельностиНДС");				
	ТаблицаДвижений.ЗаполнитьЗначения(Ложь, "Амортизируется");
	ТаблицаДвижений.ЗаполнитьЗначения(Неопределено, "РасчетныйДокумент");				
	ТаблицаДвижений.ЗаполнитьЗначения(0, "СуммаНДС");				
	ТаблицаДвижений.ЗаполнитьЗначения(0, "СуммаНДСПропорционально");
	// данные по договорам с упрощенным налоговым учетом
	ОбщегоНазначенияБПВызовСервера.ЗагрузитьВТаблицуЗначений(ТаблицаПриобретения, ТаблицаДвижений);
	
	ТаблицаДвижений.ЗаполнитьЗначения(Организация, "Организация");
	
	Если НЕ Отказ И ТаблицаДвижений.Количество() > 0 Тогда
		НаборДвиженийПриобретений.мПериод          = СтруктураШапкиДокумента.Дата;
		НаборДвиженийПриобретений.мТаблицаДвижений = ТаблицаДвижений;

		НаборДвиженийПриобретений.ВыполнитьПриход();
		НаборДвиженийПриобретений.Записать();
	КонецЕсли;
	
	ПроводкиПоДоговорамСУпрощеннымНалоговымУчетом(СтруктураШапкиДокумента, ТаблицаПродажи, ТаблицаПриобретения);	
	ПроводкиПоДоговорамСоСложнымНалоговымУчетом(СтруктураШапкиДокумента, ТаблицаПродажиСложныйНалоговыйУчет, ТаблицаПриобретенияСложныйНалоговыйУчет);	
	
КонецПроцедуры

Процедура ПроводкиПоДоговорамСУпрощеннымНалоговымУчетом(СтруктураШапкиДокумента, ТаблицаПродажи, ТаблицаПриобретения)

	Перем ТаблицаПоВторомуСобытиюНал;
	
	// формируем движения по по регистрам
	НалоговыйУчет.ДвиженияПоРегистрамНалоговогоУчетаУпрощенныйНалоговыйУчет(ЭтотОбъект, ТаблицаПоВторомуСобытиюНал);
	
	ЭтоПереносЗадолженности  = (СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ПереносЗадолженности);
	ЭтоСписаниеЗадолженности = (СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.СписаниеЗадолженности);
	
	Если  ЭтоПереносЗадолженности
		И СтруктураШапкиДокумента.НеПереноситьНОНК Тогда
		// делаем закрывающие движения по регистрам налогового учета - для "нормального" отражения операции в отчетах по проверке сумм НДС
		НаборДвиженийОжидаемыйИПодтвержденныйНДС = Движения.ОжидаемыйИПодтвержденныйНДСПриобретений;
		НаборДвиженийОжидаемыйИПодтвержденныйНДС.Прочитать();
		Для каждого Движение Из НаборДвиженийОжидаемыйИПодтвержденныйНДС Цикл
			Движение.ВидДвижения = ВидДвиженияНакопления.Расход;
			Движение.КодОперации = Перечисления.КодыОперацийОжидаемыйИПодтвержденныйНДСПриобретений.КорректировкаПервичныйДокумент;
		КонецЦикла;
		НаборДвиженийОжидаемыйИПодтвержденныйНДС.Записать(Ложь);
		
		НаборДвиженийОжидаемыйИПодтвержденныйНДС = Движения.ОжидаемыйИПодтвержденныйНДСПродаж;
		НаборДвиженийОжидаемыйИПодтвержденныйНДС.Прочитать();
		Для каждого Движение Из НаборДвиженийОжидаемыйИПодтвержденныйНДС Цикл
			Движение.ВидДвижения = ВидДвиженияНакопления.Расход;
			Движение.КодОперации = Перечисления.КодыОперацийОжидаемыйИПодтвержденныйНДСПродаж.ПодтвержденныйНДС;
		КонецЦикла;
		НаборДвиженийОжидаемыйИПодтвержденныйНДС.Записать(Ложь);
	
	КонецЕсли;	
	  
	// движения по НДС по событиям вида "оплата" формируем аналогично платежным документам
	СтрокиОплат    = Новый Массив;
	// движения по НДС по событиям вида "отгрузка" формируем аналогично отгрузочным документам
	СтрокиОтгрузок = Новый Массив;	
	
	Для каждого Строка Из ТаблицаПродажи Цикл
		Если    Строка.Событие = Перечисления.СобытияПродажиНалоговыйУчет.ОплатаПокупателем 
			ИЛИ Строка.Событие = Перечисления.СобытияПродажиНалоговыйУчет.ВозвратОплатыПокупателю Тогда
			СтрокиОплат.Добавить(Строка);
		Иначе
			СтрокиОтгрузок.Добавить(Строка);
		КонецЕсли;
	КонецЦикла;
	
	Для каждого Строка Из ТаблицаПриобретения Цикл
		Если    Строка.Событие = Перечисления.СобытияПриобретенияНалоговыйУчет.ВозвратОплатыПоставщиком
			ИЛИ Строка.Событие = Перечисления.СобытияПриобретенияНалоговыйУчет.ОплатаПоставщику Тогда
			СтрокиОплат.Добавить(Строка);
		Иначе
			СтрокиОтгрузок.Добавить(Строка);
		КонецЕсли;
	КонецЦикла;
	
	Для каждого Строка Из СтрокиОплат Цикл
		
		Если ЭтоПереносЗадолженности
			И СтруктураШапкиДокумента.НеПереноситьНОНК
			И Строка.ДобавленнаяСтрокаПереносаЗадолженности Тогда
			//Все движения будут сделаны для основной строки
			Продолжить;
		КонецЕсли;			  
			
		ЭтоПродажа = (    Строка.Событие = Перечисления.СобытияПродажиНалоговыйУчет.ВозвратОплатыПокупателю
					  ИЛИ Строка.Событие = Перечисления.СобытияПродажиНалоговыйУчет.ОплатаПокупателем);
					  
		ЭтоВозврат = (Строка.Событие = Перечисления.СобытияПродажиНалоговыйУчет.ВозвратОплатыПокупателю
					  ИЛИ Строка.Событие = Перечисления.СобытияПриобретенияНалоговыйУчет.ВозвратОплатыПоставщиком);
					  
		Если ЭтоПродажа Тогда
			Если ЭтоВозврат Тогда
			    СобытиеНДС = Перечисления.СобытияОжидаемыйИПодтвержденныйНДСПродаж.Возврат;
			Иначе	
				СобытиеНДС = Перечисления.СобытияОжидаемыйИПодтвержденныйНДСПродаж.Реализация;
			КонецЕсли;
		Иначе	
			Если ЭтоВозврат Тогда
			    СобытиеНДС = Перечисления.СобытияОжидаемыйИПодтвержденныйНДСПриобретений.Возврат;
			Иначе	
				СобытиеНДС = Перечисления.СобытияОжидаемыйИПодтвержденныйНДСПриобретений.Поступление;
			КонецЕсли;
		КонецЕсли;			  
		
		СуммаПроводки = НалоговыйУчет.ПолучитьСуммуПроводкиПоНДС(ТаблицаПоВторомуСобытиюНал, Строка.ПроводкиСуммаНДС, 
												    СобытиеНДС,
													Строка.ДоговорКонтрагента,
													Строка.СделкаНУ,
													Строка.РасчетныйДокумент,
													Строка.ВозвратнаяТара, 
													?(НЕ ЭтоПродажа, Строка.ДляХозяйственнойДеятельности, Неопределено), 
													?(НЕ ЭтоПродажа, Строка.ВидДеятельностиНДС		    , Неопределено),
													?(НЕ ЭтоПродажа, Строка.Амортизируется				, Неопределено));
		// для возвратов суммы отрицательные													
		Если ЭтоВозврат Тогда
			СуммаПроводки = - СуммаПроводки;
		КонецЕсли;													
		
		Если  СуммаПроводки <> 0 
			И Строка.НалоговоеНазначение <> Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяНеХозДеятельность Тогда
			
			Проводка = Движения.Хозрасчетный.Добавить();

			Проводка.Период                                 = Дата;
			Проводка.Активность                             = Истина;
			Проводка.Организация                            = Организация;
			Проводка.Сумма                                  = СуммаПроводки;
			Проводка.Содержание                             = ?(ЭтоПродажа,НСтр("ru='НДС: налоговые обязательства';uk=""ПДВ: податкові зобов'язання""", Локализация.КодЯзыкаИнформационнойБазы()), НСтр("ru='НДС: налоговый кредит';uk='ПДВ: податковий кредит'", Локализация.КодЯзыкаИнформационнойБазы())) + ?(ЭтоВозврат, НСтр("ru=', (сторно) оплата';uk=', (сторно) оплата'", Локализация.КодЯзыкаИнформационнойБазы()), НСтр("ru=', оплата';uk=', оплата'", Локализация.КодЯзыкаИнформационнойБазы()));
			Проводка.НомерЖурнала                           = "";
				
			Проводка.СчетДт                           		= ?(ЭтоПродажа, Строка.СчетУчетаНДСПодтвержденный, Строка.СчетУчетаНДС);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Контрагенты",					   Строка.Контрагент);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Договоры",					   Строка.ДоговорКонтрагента);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"ДокументыРасчетовСКонтрагентами",Строка.СделкаНУ);
			Если ЭтоПереносЗадолженности
				И СтруктураШапкиДокумента.НеПереноситьНОНК
				И НЕ ЭтоПродажа Тогда
				
				Проводка.СчетДт = СтруктураШапкиДокумента.СчетУчетаНДСПодтвержденный;
				
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Контрагенты",					   СтруктураШапкиДокумента.ДоговорКонтрагента.Владелец);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Договоры",					   СтруктураШапкиДокумента.ДоговорКонтрагента);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"ДокументыРасчетовСКонтрагентами",НалоговыйУчет.ОпределитьСделкуНалоговыйУчет(СтруктураШапкиДокумента, Ссылка, Сделка));
				
			КонецЕсли;	
			
			
			Проводка.СчетКт                           		= ?(ЭтоПродажа, Строка.СчетУчетаНДС, Строка.СчетУчетаНДСПодтвержденный);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Контрагенты",					   Строка.Контрагент);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Договоры",					   Строка.ДоговорКонтрагента);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"ДокументыРасчетовСКонтрагентами",Строка.СделкаНУ);
			Если ЭтоПереносЗадолженности
				И СтруктураШапкиДокумента.НеПереноситьНОНК
				И ЭтоПродажа Тогда
				
				Проводка.СчетКт = СтруктураШапкиДокумента.СчетУчетаНДСПодтвержденный;
				
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Контрагенты",					  СтруктураШапкиДокумента.ДоговорКонтрагента.Владелец);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Договоры",						  СтруктураШапкиДокумента.ДоговорКонтрагента);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"ДокументыРасчетовСКонтрагентами",НалоговыйУчет.ОпределитьСделкуНалоговыйУчет(СтруктураШапкиДокумента, Ссылка, Сделка));
				
			КонецЕсли;	
			
		КонецЕсли;		
			
	КонецЦикла;
	
	Для каждого Строка Из СтрокиОтгрузок Цикл
		
		Если  ЭтоПереносЗадолженности
			И СтруктураШапкиДокумента.НеПереноситьНОНК
			И Строка.ДобавленнаяСтрокаПереносаЗадолженности Тогда
			//Все движения будут сделаны для основной строки
			Продолжить;
		КонецЕсли;			  
		
		ЭтоПродажа = (    Строка.Событие = Перечисления.СобытияПродажиНалоговыйУчет.РеализацияПокупателю
					  ИЛИ Строка.Событие = Перечисления.СобытияПродажиНалоговыйУчет.ВозвратОтПокупателя);
					  
		ЭтоВозврат = (Строка.Событие = Перечисления.СобытияПродажиНалоговыйУчет.ВозвратОтПокупателя
					  ИЛИ Строка.Событие = Перечисления.СобытияПриобретенияНалоговыйУчет.ВозвратПоставщику);
					  
		Если ЭтоПродажа Тогда
			Если ЭтоВозврат Тогда
			    СобытиеНДС = Перечисления.СобытияОжидаемыйИПодтвержденныйНДСПродаж.Возврат;
			Иначе	
				СобытиеНДС = Перечисления.СобытияОжидаемыйИПодтвержденныйНДСПродаж.Реализация;
			КонецЕсли;
		Иначе	
			Если ЭтоВозврат Тогда
			    СобытиеНДС = Перечисления.СобытияОжидаемыйИПодтвержденныйНДСПриобретений.Возврат;
			Иначе	
				СобытиеНДС = Перечисления.СобытияОжидаемыйИПодтвержденныйНДСПриобретений.Поступление;
			КонецЕсли;
		КонецЕсли;			  
		
		Если СтруктураШапкиДокумента.ЕстьНДС 
			И Строка.ПроводкиСуммаНДС <> 0 
			//проводки по НДС формируются по основной строке
			И НЕ Строка.ДобавленнаяСтрокаПереносаЗадолженности Тогда
			
			СуммаПроводки = Строка.ПроводкиСуммаНДС;
			// для возвратов суммы отрицательные													
			Если ЭтоВозврат Тогда
				СуммаПроводки = - СуммаПроводки;
			КонецЕсли;				
			
			Проводка = Движения.Хозрасчетный.Добавить();

			Проводка.Период                     = СтруктураШапкиДокумента.Дата;
			Проводка.Активность                 = Истина;
			Проводка.Организация                = СтруктураШапкиДокумента.Организация;
			Проводка.Сумма                      = СуммаПроводки;
			Проводка.Содержание                 = ?(ЭтоПродажа,НСтр("ru='НДС: налоговые обязательства';uk=""ПДВ: податкові зобов'язання""", Локализация.КодЯзыкаИнформационнойБазы()), НСтр("ru='НДС: налоговый кредит';uk='ПДВ: податковий кредит'", Локализация.КодЯзыкаИнформационнойБазы())) + ?(ЭтоВозврат, НСтр("ru=', (сторно) отгрузка';uk=', (сторно) відвантаження'", Локализация.КодЯзыкаИнформационнойБазы()), НСтр("ru=', отгрузка';uk=', відвантаження'", Локализация.КодЯзыкаИнформационнойБазы()));
			Проводка.НомерЖурнала               = "";
			
			Если ЭтоПродажа Тогда
				
				ПроводкаСчетДт         = СтруктураШапкиДокумента.СчетДт;
				ВидСубконтоДт1 = 1;
				ПроводкаСубконтоДт1    = СтруктураШапкиДокумента.СубконтоДт1;
				ВидСубконтоДт2 = 2;
				ПроводкаСубконтоДт2    = СтруктураШапкиДокумента.СубконтоДт2;
				ВидСубконтоДт3 = 3;
				ПроводкаСубконтоДт3    = СтруктураШапкиДокумента.СубконтоДт3;
				
				Если ЭтоПереносЗадолженности Тогда
					
					Если СтруктураШапкиДокумента.НеПереноситьНОНК Тогда
						
						ПроводкаСчетДт = СтруктураШапкиДокумента.СчетУчетаНДСПодтвержденный;
						
					Иначе
						
						ПроводкаСчетДт = СтруктураШапкиДокумента.СчетУчетаНДС;
						
					КонецЕсли;
						
					ВидСубконтоДт1 = "Контрагенты";
					ПроводкаСубконтоДт1    = СтруктураШапкиДокумента.ДоговорКонтрагента.Владелец;
					ВидСубконтоДт2 = "Договоры" ;
					ПроводкаСубконтоДт2    = СтруктураШапкиДокумента.ДоговорКонтрагента;
					ВидСубконтоДт3 = "ДокументыРасчетовСКонтрагентами";
					ПроводкаСубконтоДт3    = НалоговыйУчет.ОпределитьСделкуНалоговыйУчет(СтруктураШапкиДокумента, Ссылка, Сделка);
					
				ИначеЕсли ЭтоСписаниеЗадолженности Тогда 	
					
					ПроводкаСчетДт         = СтруктураШапкиДокумента.СчетКт;
					ВидСубконтоДт1 = 1;
					ПроводкаСубконтоДт1    = СтруктураШапкиДокумента.СубконтоКт1;
					ВидСубконтоДт2 = 2;
					ПроводкаСубконтоДт2    = СтруктураШапкиДокумента.СубконтоКт2;
					ВидСубконтоДт3 = 3;
					ПроводкаСубконтоДт3    = СтруктураШапкиДокумента.СубконтоКт3;
					
				КонецЕсли;
				
				ПроводкаСчетКт = Строка.СчетУчетаНДС;
				ВидСубконтоКт1 = "Контрагенты";
				ПроводкаСубконтоКт1    = Строка.ДоговорКонтрагента.Владелец;
				ВидСубконтоКт2 = "Договоры" ;
				ПроводкаСубконтоКт2    = Строка.ДоговорКонтрагента;
				ВидСубконтоКт3 = "ДокументыРасчетовСКонтрагентами";
				ПроводкаСубконтоКт3    = Строка.СделкаНУ;
				
				Если ЭтоПереносЗадолженности Тогда
					
					Если СтруктураШапкиДокумента.НеПереноситьНОНК Тогда
						
						ПроводкаСчетКт = Строка.СчетУчетаНДСПодтвержденный;
						
					Иначе
						
						ПроводкаСчетКт = Строка.СчетУчетаНДС;
						
					КонецЕсли;
					
				КонецЕсли;
				
			Иначе
				
				ПроводкаСчетДт = Строка.СчетУчетаНДС;
				Если ЭтоПереносЗадолженности Тогда
					
					Если СтруктураШапкиДокумента.НеПереноситьНОНК Тогда
						
						ПроводкаСчетДт = Строка.СчетУчетаНДСПодтвержденный;
						
					Иначе
						
						ПроводкаСчетДт = Строка.СчетУчетаНДС;
						
					КонецЕсли;
					
				КонецЕсли;
				
				ВидСубконтоДт1 = "Контрагенты";
				ПроводкаСубконтоДт1    = Строка.ДоговорКонтрагента.Владелец;
				ВидСубконтоДт2 = "Договоры" ;
				ПроводкаСубконтоДт2    = Строка.ДоговорКонтрагента;
				ВидСубконтоДт3 = "ДокументыРасчетовСКонтрагентами";
				ПроводкаСубконтоДт3    = Строка.СделкаНУ;
				
				ПроводкаСчетКт    = СтруктураШапкиДокумента.СчетКт;
				ВидСубконтоКт1 = 1;
				ПроводкаСубконтоКт1    = СтруктураШапкиДокумента.СубконтоКт1;
				ВидСубконтоКт2 = 2;
				ПроводкаСубконтоКт2    = СтруктураШапкиДокумента.СубконтоКт2;
				ВидСубконтоКт3 = 3;
				ПроводкаСубконтоКт3    = СтруктураШапкиДокумента.СубконтоКт3;
				
				Если ЭтоПереносЗадолженности Тогда
					
					Если СтруктураШапкиДокумента.НеПереноситьНОНК Тогда
						
						ПроводкаСчетКт = СтруктураШапкиДокумента.СчетУчетаНДСПодтвержденный;
						
					Иначе	
						
						ПроводкаСчетКт = СтруктураШапкиДокумента.СчетУчетаНДС;
						
					КонецЕсли;
					
					ВидСубконтоКт1 = "Контрагенты";
					ПроводкаСубконтоКт1    = СтруктураШапкиДокумента.ДоговорКонтрагента.Владелец;
					ВидСубконтоКт2 = "Договоры" ;
					ПроводкаСубконтоКт2    = СтруктураШапкиДокумента.ДоговорКонтрагента;
					ВидСубконтоКт3 = "ДокументыРасчетовСКонтрагентами";
					ПроводкаСубконтоКт3    = НалоговыйУчет.ОпределитьСделкуНалоговыйУчет(СтруктураШапкиДокумента, Ссылка, Сделка);
					
				ИначеЕсли ЭтоСписаниеЗадолженности Тогда 	
						
					ПроводкаСчетКт    = СтруктураШапкиДокумента.СчетДт;
					
					Если  СтруктураШапкиДокумента.ЕстьНалогНаПрибыльДо2015
						И СписыватьИзРезерваСомнительныхДолгов Тогда
						ПроводкаСчетКт    = СтруктураШапкиДокумента.СчетРезерваСомнительныхДолгов;	
					КонецЕсли;
					
					ВидСубконтоКт1 = 1;
					ПроводкаСубконтоКт1    = СтруктураШапкиДокумента.СубконтоДт1;
					ВидСубконтоКт2 = 2;
					ПроводкаСубконтоКт2    = СтруктураШапкиДокумента.СубконтоДт2;
					ВидСубконтоКт3 = 3;
					ПроводкаСубконтоКт3    = СтруктураШапкиДокумента.СубконтоДт3;
					
				КонецЕсли;				
				
			КонецЕсли;
			
			Проводка.СчетДт                     = ПроводкаСчетДт;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, ВидСубконтоДт1, ПроводкаСубконтоДт1);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, ВидСубконтоДт2, ПроводкаСубконтоДт2);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, ВидСубконтоДт3, ПроводкаСубконтоДт3);

			Проводка.СчетКт                     = ПроводкаСчетКт;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, ВидСубконтоКт1, ПроводкаСубконтоКт1);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, ВидСубконтоКт2, ПроводкаСубконтоКт2);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, ВидСубконтоКт3, ПроводкаСубконтоКт3);
			
			Если  СтруктураШапкиДокумента.ЕстьНалогНаПрибыльДо2015 Тогда
				Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ИзменениеЗадолженности
				   И СтруктураШапкиДокумента.СчетДт.НалоговыйУчет = Истина Тогда
					
					ЗаписыватьСуммуНУ = НЕ (СтруктураШапкиДокумента.НалоговоеНазначениеДоходовИЗатрат = Справочники.НалоговыеНазначенияАктивовИЗатрат.НКУ_НеХозДеятельность);
					
					Если Проводка.СчетДт = СтруктураШапкиДокумента.СчетДт Тогда
						Проводка.НалоговоеНазначениеДт = СтруктураШапкиДокумента.НалоговоеНазначениеДоходовИЗатрат;
						Если ЗаписыватьСуммуНУ Тогда
							Проводка.СуммаНУДт = Проводка.Сумма;
						КонецЕсли;
					ИначеЕсли Проводка.СчетКт = СтруктураШапкиДокумента.СчетДт Тогда
							Проводка.НалоговоеНазначениеКт = СтруктураШапкиДокумента.НалоговоеНазначениеДоходовИЗатрат;
							Если ЗаписыватьСуммуНУ Тогда
								Проводка.СуммаНУКт = Проводка.Сумма;
							КонецЕсли;
					КонецЕсли;
				ИначеЕсли СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.СписаниеЗадолженности
					    И НЕ ЭтоПродажа 
					    И НЕ СписыватьИзРезерваСомнительныхДолгов Тогда
						
					Проводка.НалоговоеНазначениеКт = СтруктураШапкиДокумента.НалоговоеНазначениеДоходовИЗатрат;
					
				ИначеЕсли СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.СписаниеЗадолженности
					    И ЭтоПродажа 
						И СтруктураШапкиДокумента.НеОтноситьНаВРСуммуНДСПриСписании Тогда
						
					ЗаписыватьСуммуНУ = НЕ (СтруктураШапкиДокумента.НалоговоеНазначениеДоходовИЗатрат = Справочники.НалоговыеНазначенияАктивовИЗатрат.НКУ_НеХозДеятельность);
					
					Проводка.НалоговоеНазначениеДт = СтруктураШапкиДокумента.НалоговоеНазначениеДоходовИЗатрат;
					
					Если ЗаписыватьСуммуНУ Тогда
						Проводка.СуммаНУДт = Проводка.Сумма;
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
			КоличествоПроводок = Движения.Хозрасчетный.Количество();
			
			НалоговыйУчет.РазбитьПроводкуПоНДСНаПервоеВтороеСобытие(ТаблицаПоВторомуСобытиюНал, Движения.Хозрасчетный, Проводка, 
													  ?(НЕ ЭтоПродажа,"Дт","Кт"), Строка.СчетУчетаНДСПодтвержденный, 
													  Строка.ДоговорКонтрагента, 
													  Строка.СделкаНУ, Строка.РасчетныйДокумент,
													  СобытиеНДС,
													  Строка.СтавкаНДС,	
													  ?(НЕ ЭтоПродажа, Строка.ДляХозяйственнойДеятельности, Неопределено), 
													  ?(НЕ ЭтоПродажа, Строка.ВидДеятельностиНДС		  , Неопределено),
													  ?(НЕ ЭтоПродажа, Строка.Амортизируется			  , Неопределено));
													  
			Если ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.СписаниеЗадолженности Тогда
				НовоеКоличествоПроводок = Движения.Хозрасчетный.Количество();
				Для НомерПроводкиПоНДС = КоличествоПроводок По НовоеКоличествоПроводок Цикл
					ПроводкаПоНДС = Движения.Хозрасчетный[НомерПроводкиПоНДС - 1];
					ИнвертироватьПроводку(ПроводкаПоНДС);
				КонецЦикла;
			КонецЕсли;													  

		КонецЕсли;		
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроводкиПоДоговорамСоСложнымНалоговымУчетом(СтруктураШапкиДокумента, ТаблицаПродажи, ТаблицаПриобретения)

	// для договоров со сложным нал. учетом
	СтрокиОтгрузок = Новый Массив;
	СтрокиОплат    = Новый Массив;
	
	ОиПНДСПродаж 		= Движения.ОжидаемыйИПодтвержденныйНДСПродаж;
	ОиПНДСПриобретений 	= Движения.ОжидаемыйИПодтвержденныйНДСПриобретений;
	
	ЭтоСписаниеЗадолженности = (СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.СписаниеЗадолженности);
	
	Для каждого Строка Из ТаблицаПродажи Цикл
		Если    Строка.Событие = Перечисления.СобытияПродажиНалоговыйУчет.РеализацияПокупателю 
			ИЛИ Строка.Событие = Перечисления.СобытияПродажиНалоговыйУчет.ВозвратОтПокупателя Тогда
			СтрокиОтгрузок.Добавить(Строка);
		Иначе
			СтрокиОплат.Добавить(Строка);
		КонецЕсли;
	КонецЦикла;
	Для каждого Строка Из ТаблицаПриобретения Цикл
		Если    Строка.Событие = Перечисления.СобытияПриобретенияНалоговыйУчет.ПоступлениеОтПоставщика
			ИЛИ Строка.Событие = Перечисления.СобытияПриобретенияНалоговыйУчет.ВозвратПоставщику Тогда
			СтрокиОтгрузок.Добавить(Строка);
		Иначе
			СтрокиОплат.Добавить(Строка);
		КонецЕсли;
	КонецЦикла;
	
	Для каждого Строка Из СтрокиОтгрузок Цикл
		
		// продажа или поступление	
		ЭтоПродажа = (    Строка.Событие = Перечисления.СобытияПродажиНалоговыйУчет.РеализацияПокупателю
					  ИЛИ Строка.Событие = Перечисления.СобытияПродажиНалоговыйУчет.ВозвратОтПокупателя);
					  
		ЭтоВозврат = (Строка.Событие     = Перечисления.СобытияПродажиНалоговыйУчет.ВозвратОтПокупателя
					  ИЛИ Строка.Событие = Перечисления.СобытияПриобретенияНалоговыйУчет.ВозвратПоставщику);
					  
		Если ЭтоПродажа Тогда
			Если ЭтоВозврат Тогда
			    СобытиеНДС = Перечисления.СобытияОжидаемыйИПодтвержденныйНДСПродаж.Возврат;
			Иначе	
				СобытиеНДС = Перечисления.СобытияОжидаемыйИПодтвержденныйНДСПродаж.Реализация;
			КонецЕсли;
		Иначе	
			Если ЭтоВозврат Тогда
			    СобытиеНДС = Перечисления.СобытияОжидаемыйИПодтвержденныйНДСПриобретений.Возврат;
			Иначе	
				СобытиеНДС = Перечисления.СобытияОжидаемыйИПодтвержденныйНДСПриобретений.Поступление;
			КонецЕсли;
		КонецЕсли;			  
		
		// проводки по регистру ОжидаемыйИПодтвержденныйНДС
		Если    СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.СписаниеЗадолженности
			
			ИЛИ (  СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ПереносЗадолженности
			     И    СтруктураШапкиДокумента.НеПереноситьНОНК
				 И НЕ Строка.ДобавленнаяСтрокаПереносаЗадолженности)
				 
			ИЛИ (  СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ПереносЗадолженности
			     И НЕ СтруктураШапкиДокумента.НеПереноситьНОНК) 
				 
			ИЛИ СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ИзменениеЗадолженности Тогда
		
			Если ЭтоПродажа Тогда
				Движение = ОиПНДСПродаж.Добавить();
				Движение.КодОперации 			= Перечисления.КодыОперацийОжидаемыйИПодтвержденныйНДСПродаж.ОжидаемыйНДС;
			Иначе	
				Движение = ОиПНДСПриобретений.Добавить();
				Движение.КодОперации 			= Перечисления.КодыОперацийОжидаемыйИПодтвержденныйНДСПриобретений.ОжидаемыйНДС;
			КонецЕсли;
			
			ЗаполнитьЗначенияСвойств(Движение, Строка);
			
			Движение.ВидДвижения  			= ВидДвиженияНакопления.Приход;
			Движение.Период	 				= СтруктураШапкиДокумента.Дата;
			Движение.Организация 		  	= СтруктураШапкиДокумента.Организация;
			Движение.Сделка				    = Строка.СделкаНУ;
			Движение.БазаНДС  				= Строка.СуммаВзаиморасчетовБУ - Строка.СуммаНДСВал;
			Движение.СуммаНДС    			= Строка.СуммаНДСВал;
			Если НЕ ЭтоПродажа Тогда
				Движение.СуммаНДСПропорционально = Строка.СуммаНДСПропорциональноКредит;	
			КонецЕсли;
			Движение.СобытиеНДС 			= СобытиеНДС;
			
			Если  СтруктураШапкиДокумента.ЕстьНДС 
				И (    СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.СписаниеЗадолженности
				   ИЛИ СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ИзменениеЗадолженности) Тогда
			
				СуммаПроводки = Строка.ПроводкиСуммаНДС;
				
				// для возвратов суммы отрицательные													
				Если ЭтоВозврат Тогда
					СуммаПроводки = - СуммаПроводки;
				КонецЕсли;													
				
				Если  СуммаПроводки <> 0 
					И Строка.НалоговоеНазначение <> Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяНеХозДеятельность Тогда
					
					Проводка = Движения.Хозрасчетный.Добавить();

					Проводка.Период                                 = Дата;
					Проводка.Активность                             = Истина;
					Проводка.Организация                            = Организация;
					Проводка.Сумма                                  = СуммаПроводки;
					Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ИзменениеЗадолженности  Тогда
					    Проводка.Содержание                             = ?(ЭтоПродажа,НСтр("ru='НДС: Изменение задолженности: обязательства';uk=""ПДВ: Зміна заборгованості: зобов'язання""", Локализация.КодЯзыкаИнформационнойБазы()), НСтр("ru='НДС: Изменение задолженности: налоговый кредит';uk='ПДВ: Зміна заборгованості: податковий кредит'", Локализация.КодЯзыкаИнформационнойБазы())) + ?(ЭтоВозврат, НСтр("ru=', (сторно) отгрузка';uk=', (сторно) відвантаження'", Локализация.КодЯзыкаИнформационнойБазы()), НСтр("ru=', отгрузка';uk=', відвантаження'", Локализация.КодЯзыкаИнформационнойБазы()));
					Иначе//списание	
						Проводка.Содержание                             = ?(ЭтоПродажа,НСтр("ru='НДС: Списание задолженности: обязательства';uk=""ПДВ: Списання заборгованості: зобов'язання""", Локализация.КодЯзыкаИнформационнойБазы()), НСтр("ru='НДС: Списание задолженности: налоговый кредит';uk='ПДВ: Списання заборгованості: податковий кредит'", Локализация.КодЯзыкаИнформационнойБазы())) + ?(ЭтоВозврат, НСтр("ru=', (сторно) отгрузка';uk=', (сторно) відвантаження'", Локализация.КодЯзыкаИнформационнойБазы()), НСтр("ru=', отгрузка';uk=', відвантаження'", Локализация.КодЯзыкаИнформационнойБазы()));
					КонецЕсли;
					
					Проводка.НомерЖурнала                           = "";
					
					Если ЭтоПродажа Тогда
					    Если ЭтоСписаниеЗадолженности Тогда
							Проводка.СчетДт = СтруктураШапкиДокумента.СчетКт;	
						Иначе	
						    Проводка.СчетДт = СтруктураШапкиДокумента.СчетДт;	
						КонецЕсли;
					Иначе		
						Проводка.СчетДт = Строка.СчетУчетаНДС;		
					КонецЕсли;
					
					Если ЭтоПродажа Тогда
						Если ЭтоСписаниеЗадолженности Тогда
							БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,1,СтруктураШапкиДокумента.СубконтоКт1);
							БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,2,СтруктураШапкиДокумента.СубконтоКт2);
							БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,3,СтруктураШапкиДокумента.СубконтоКт3);
						Иначе	
							БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,1,СтруктураШапкиДокумента.СубконтоДт1);
							БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,2,СтруктураШапкиДокумента.СубконтоДт2);
							БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,3,СтруктураШапкиДокумента.СубконтоДт3);
						КонецЕсли;
					Иначе
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Контрагенты",					  Строка.Контрагент);
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Договоры",						  Строка.ДоговорКонтрагента);
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"ДокументыРасчетовСКонтрагентами",Строка.СделкаНУ);
					КонецЕсли;
					
					
					Если ЭтоПродажа Тогда
						Проводка.СчетКт = Строка.СчетУчетаНДС;		
					Иначе		
					    Если ЭтоСписаниеЗадолженности Тогда
							Проводка.СчетКт = СтруктураШапкиДокумента.СчетДт;
							Если  СтруктураШапкиДокумента.ЕстьНалогНаПрибыльДо2015
								И СписыватьИзРезерваСомнительныхДолгов Тогда
								Проводка.СчетКт = СтруктураШапкиДокумента.СчетРезерваСомнительныхДолгов;	
							КонецЕсли;
						Иначе	
						    Проводка.СчетКт = СтруктураШапкиДокумента.СчетКт;	
						КонецЕсли;
					КонецЕсли;
					
					Если ЭтоПродажа Тогда
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Контрагенты",					  Строка.Контрагент);
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Договоры",						  Строка.ДоговорКонтрагента);
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"ДокументыРасчетовСКонтрагентами",Строка.СделкаНУ);
					Иначе	
					    Если ЭтоСписаниеЗадолженности Тогда
							БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,1,СтруктураШапкиДокумента.СубконтоДт1);
							БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,2,СтруктураШапкиДокумента.СубконтоДт2);
							БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,3,СтруктураШапкиДокумента.СубконтоДт3);
						Иначе	
							БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,1,СтруктураШапкиДокумента.СубконтоКт1);
							БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,2,СтруктураШапкиДокумента.СубконтоКт2);
							БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,3,СтруктураШапкиДокумента.СубконтоКт3);
						КонецЕсли;
					КонецЕсли;
					
					Если  СтруктураШапкиДокумента.ЕстьНалогНаПрибыльДо2015 Тогда
						
						Если  СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ИзменениеЗадолженности
							И СтруктураШапкиДокумента.СчетДт.НалоговыйУчет = Истина Тогда
							
							ЗаписыватьСуммуНУ = НЕ (СтруктураШапкиДокумента.НалоговоеНазначениеДоходовИЗатрат = Справочники.НалоговыеНазначенияАктивовИЗатрат.НКУ_НеХозДеятельность);
							
							Если Проводка.СчетДт = СтруктураШапкиДокумента.СчетДт Тогда
								Проводка.НалоговоеНазначениеДт = СтруктураШапкиДокумента.НалоговоеНазначениеДоходовИЗатрат;
								Если ЗаписыватьСуммуНУ Тогда
									Проводка.СуммаНУДт = Проводка.Сумма;
								КонецЕсли;
							ИначеЕсли Проводка.СчетКт = СтруктураШапкиДокумента.СчетДт Тогда
									Проводка.НалоговоеНазначениеКт = СтруктураШапкиДокумента.НалоговоеНазначениеДоходовИЗатрат;
									Если ЗаписыватьСуммуНУ Тогда
										Проводка.СуммаНУКт = Проводка.Сумма;
									КонецЕсли;
							КонецЕсли;
						ИначеЕсли СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.СписаниеЗадолженности
							    И НЕ ЭтоПродажа 
							    И НЕ СписыватьИзРезерваСомнительныхДолгов Тогда
								
							Проводка.НалоговоеНазначениеКт = СтруктураШапкиДокумента.НалоговоеНазначениеДоходовИЗатрат;
							
						ИначеЕсли СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.СписаниеЗадолженности
							    И ЭтоПродажа 
								И НЕ СтруктураШапкиДокумента.НеОтноситьНаВРСуммуНДСПриСписании Тогда
						
							ЗаписыватьСуммуНУ = НЕ (СтруктураШапкиДокумента.НалоговоеНазначениеДоходовИЗатрат = Справочники.НалоговыеНазначенияАктивовИЗатрат.НКУ_НеХозДеятельность);
							
							Проводка.НалоговоеНазначениеДт = СтруктураШапкиДокумента.НалоговоеНазначениеДоходовИЗатрат;
							
							Если ЗаписыватьСуммуНУ Тогда
								Проводка.СуммаНУДт = Проводка.Сумма;
							КонецЕсли;
							
						КонецЕсли;
						
					КонецЕсли;
					
					Если ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.СписаниеЗадолженности Тогда
						ИнвертироватьПроводку(Проводка);
					КонецЕсли;
					
				КонецЕсли;		
				
			КонецЕсли;		
			
			Если  СтруктураШапкиДокумента.ЕстьНДС
				И СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ПереносЗадолженности
				И НЕ Строка.ДобавленнаяСтрокаПереносаЗадолженности Тогда
			
				СуммаПроводки = Строка.ПроводкиСуммаНДС;
				
				// для возвратов суммы отрицательные													
				Если ЭтоВозврат Тогда
					СуммаПроводки = - СуммаПроводки;
				КонецЕсли;													
				
				Если  СуммаПроводки <> 0 
					И Строка.НалоговоеНазначение <> Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяНеХозДеятельность Тогда
					
					Проводка = Движения.Хозрасчетный.Добавить();

					Проводка.Период                                 = Дата;
					Проводка.Активность                             = Истина;
					Проводка.Организация                            = Организация;
					Проводка.Сумма                                  = СуммаПроводки;
					Проводка.Содержание                             = ?(ЭтоПродажа,НСтр("ru='НДС: Перенос задолженности: обязательства';uk=""ПДВ: Перенос заборгованості: зобов'язання""", Локализация.КодЯзыкаИнформационнойБазы()), НСтр("ru='НДС: Перенос задолженности: налоговый кредит';uk='ПДВ: Перенос заборгованості: податковий кредит'")) + ?(ЭтоВозврат, НСтр("ru=', (сторно) отгрузка';uk=', (сторно) відвантаження'", Локализация.КодЯзыкаИнформационнойБазы()), НСтр("ru=', отгрузка';uk=', відвантаження'", Локализация.КодЯзыкаИнформационнойБазы()));
					Проводка.НомерЖурнала                           = "";
					
					Если ЭтоПродажа Тогда
						ПроводкаСчетДт				 = СтруктураШапкиДокумента.СчетУчетаНДС;
						КонтрагентДт		 = СтруктураШапкиДокумента.КонтрагентКредитор;
						ДоговорКонтрагентаДт = СтруктураШапкиДокумента.ДоговорКонтрагента;
						СделкаДт 			 = НалоговыйУчет.ОпределитьСделкуНалоговыйУчет(СтруктураШапкиДокумента, Ссылка, Сделка);
						
						ПроводкаСчетКт				 = Строка.СчетУчетаНДС;
						КонтрагентКт		 = Строка.Контрагент;
						ДоговорКонтрагентаКт = Строка.ДоговорКонтрагента;
						СделкаКт 			 = Строка.СделкаНУ;
					Иначе	
						ПроводкаСчетДт				 = Строка.СчетУчетаНДС;
						КонтрагентДт		 = Строка.Контрагент;
						ДоговорКонтрагентаДт = Строка.ДоговорКонтрагента;
						СделкаДт 			 = Строка.СделкаНУ;
						
						ПроводкаСчетКт				 = СтруктураШапкиДокумента.СчетУчетаНДС;
						КонтрагентКт		 = СтруктураШапкиДокумента.КонтрагентКредитор;
						ДоговорКонтрагентаКт = СтруктураШапкиДокумента.ДоговорКонтрагента;
						СделкаКт 			 = НалоговыйУчет.ОпределитьСделкуНалоговыйУчет(СтруктураШапкиДокумента, Ссылка, Сделка);
					КонецЕсли;
					
					Проводка.СчетДт = ПроводкаСчетДт;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Контрагенты",					  КонтрагентДт);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Договоры",						  ДоговорКонтрагентаДт);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"ДокументыРасчетовСКонтрагентами",СделкаДт);
					
					Проводка.СчетКт = ПроводкаСчетКт;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Контрагенты",					 КонтрагентКт);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Договоры",						 ДоговорКонтрагентаКт);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"ДокументыРасчетовСКонтрагентами",СделкаКт);
					
				КонецЕсли;		
				
			КонецЕсли;		
			
		КонецЕсли;

	КонецЦикла;
	
	Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ПереносЗадолженности
       И СтруктураШапкиДокумента.НеПереноситьНОНК Тогда
       // для перенесенной задолженности, если это оплата, нужно сфорировать проводку
	   // по ожидаемому НДС как выписка налоговой накладной, т.к. последующая отгрузка
	   // сделает проводку по этому регистру в любом случае.
	   
	   Для каждого Строка Из СтрокиОплат Цикл
		   
		   Если НЕ Строка.ДобавленнаяСтрокаПереносаЗадолженности Тогда
				Продолжить;			   
		   КонецЕсли;
		   
			// продажа или поступление	
			ЭтоПродажа = (    Строка.Событие = Перечисления.СобытияПродажиНалоговыйУчет.ОплатаПокупателем
						  ИЛИ Строка.Событие = Перечисления.СобытияПродажиНалоговыйУчет.ВозвратОплатыПокупателю);
						  
			ЭтоВозврат = (Строка.Событие     = Перечисления.СобытияПродажиНалоговыйУчет.ВозвратОплатыПокупателю
						  ИЛИ Строка.Событие = Перечисления.СобытияПриобретенияНалоговыйУчет.ВозвратОплатыПоставщиком);
						  
			Если ЭтоПродажа Тогда
				Если ЭтоВозврат Тогда
				    СобытиеНДС = Перечисления.СобытияОжидаемыйИПодтвержденныйНДСПродаж.Возврат;
				Иначе	
					СобытиеНДС = Перечисления.СобытияОжидаемыйИПодтвержденныйНДСПродаж.Реализация;
				КонецЕсли;
			Иначе	
				Если ЭтоВозврат Тогда
				    СобытиеНДС = Перечисления.СобытияОжидаемыйИПодтвержденныйНДСПриобретений.Возврат;
				Иначе	
					СобытиеНДС = Перечисления.СобытияОжидаемыйИПодтвержденныйНДСПриобретений.Поступление;
				КонецЕсли;
			КонецЕсли;			  
			
			// проводки по регистру ОжидаемыйИПодтвержденныйНДС
			Если ЭтоПродажа Тогда
				Движение = ОиПНДСПродаж.Добавить();
				Движение.КодОперации 			= Перечисления.КодыОперацийОжидаемыйИПодтвержденныйНДСПродаж.ПодтвержденныйНДС;
			Иначе	
				Движение = ОиПНДСПриобретений.Добавить();
				Движение.КодОперации 			= Перечисления.КодыОперацийОжидаемыйИПодтвержденныйНДСПриобретений.ПодтвержденныйНДС;
			КонецЕсли;
			
			ЗаполнитьЗначенияСвойств(Движение, Строка);
			
			Движение.ВидДвижения  			= ВидДвиженияНакопления.Расход;
			Движение.Период	 				= СтруктураШапкиДокумента.Дата;
			Движение.Организация 		  	= СтруктураШапкиДокумента.Организация;
			Движение.Сделка				    = Строка.СделкаНУ;
			Движение.БазаНДС  				= Строка.СуммаВзаиморасчетовБУ - Строка.СуммаНДСВал;
			Движение.СуммаНДС    			= Строка.СуммаНДСВал;
			Если НЕ ЭтоПродажа Тогда
				Движение.СуммаНДСПропорционально = Строка.СуммаНДСПропорциональноКредит;	
			КонецЕсли;
			Движение.СобытиеНДС 			= СобытиеНДС;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДвиженияПоСписаниюЗадолженнстиПоНалоговомуУчету(СтруктураШапкиДокумента, ТаблицаПоСуммамДолга, Отказ, Заголовок) 
	
	Если  НЕ СтруктураШапкиДокумента.ЕстьНалогНаПрибыльДо2015 Тогда
		Возврат;
	КонецЕсли; 
	
	Если  НЕ СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.СписаниеЗадолженности Тогда
		Возврат;
	КонецЕсли; 
	
	Для каждого Строка Из ТаблицаПоСуммамДолга Цикл
		
		// списывается дебиторская задолженность за внесенный и необслуженный аванс поставщику
		// по НУ признается в сумме списания из резерва
		// имеется временная разница по начислению расходов - в БУ в момент формирования резерва
		// по НУ - в момент признания задолженности безнадежной (списания)
		Если  Строка.ВидЗадолженности = Перечисления.ВидыЗадолженности.Дебиторская
			И Строка.ТипКонтрагента   = Перечисления.СтатусыКонтрагентов.Поставщик Тогда
			
			Если НЕ СтруктураШапкиДокумента.СписыватьИзРезерваСомнительныхДолгов Тогда
				// в НУ такое списание не признается
				Продолжить;
			КонецЕсли;
			
			Если СтруктураШапкиДокумента.НачислятьРезервСомнительныхДолгов Тогда
				// покажем в БУ начисление резерва сомнительной задолженности
				
				Проводка = Движения.Хозрасчетный.Добавить();
				
				Проводка.Период                                 = Дата;
				Проводка.Активность                             = Истина;
				Проводка.Организация                            = Организация;
				Проводка.Сумма                                  = Строка.ГривневаяСумма - ?(СтруктураШапкиДокумента.НеОтноситьНаВРСуммуНДСПриСписании, Строка.ПроводкиСуммаНДС, 0);
				Проводка.Содержание                             = НСтр("ru='Начисление резерва сомнительной задолженности';uk='Нарахування резерву сумнівної заборгованості'", Локализация.КодЯзыкаИнформационнойБазы());
				Проводка.НомерЖурнала                           = "";
				
				Проводка.СчетДт = СтруктураШапкиДокумента.СчетДт;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,1, СтруктураШапкиДокумента.СубконтоДт1);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,2, СтруктураШапкиДокумента.СубконтоДт2);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,3, СтруктураШапкиДокумента.СубконтоДт3);
				
				// не признается затратой в НУ
				Проводка.НалоговоеНазначениеДт = СтруктураШапкиДокумента.НалоговоеНазначениеДоходовИЗатрат;
				Проводка.СуммаНУДт = 0;
				
				Проводка.СчетКт = СтруктураШапкиДокумента.СчетРезерваСомнительныхДолгов;
			
			КонецЕсли;
			
			Если НЕ СтруктураШапкиДокумента.НалоговоеНазначениеДоходовИЗатрат = Справочники.НалоговыеНазначенияАктивовИЗатрат.НКУ_НеХозДеятельность Тогда
				// Проводка по затратам в НУ - только по налоговому учету, не нехоз. деятельность
				
				Проводка = Движения.Хозрасчетный.Добавить();
				
				Проводка.Период                                 = Дата;
				Проводка.Активность                             = Истина;
				Проводка.Организация                            = Организация;
				Проводка.Сумма                                  = 0; //только по НУ
				Проводка.Содержание                             = НСтр("ru='Списание на затраты по НУ дебеторской задолженности поставщика';uk='Списання на витрати по ПО дебеторської заборгованості постачальника'", Локализация.КодЯзыкаИнформационнойБазы());
				Проводка.НомерЖурнала                           = "";
				
				Проводка.СчетДт = СтруктураШапкиДокумента.СчетДт;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,1, СтруктураШапкиДокумента.СубконтоДт1);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,2, СтруктураШапкиДокумента.СубконтоДт2);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,3, СтруктураШапкиДокумента.СубконтоДт3);
				
				Проводка.НалоговоеНазначениеДт = СтруктураШапкиДокумента.НалоговоеНазначениеДоходовИЗатрат;
				Проводка.СуммаНУДт = Строка.ГривневаяСумма - ?(СтруктураШапкиДокумента.НеОтноситьНаВРСуммуНДСПриСписании, Строка.ПроводкиСуммаНДС, 0);
				
				Проводка.СчетКт = ПланыСчетов.Хозрасчетный.Вспомогательный;
				
			КонецЕсли;
			

		КонецЕсли;	
		
		// списывается дебиторская задолженность за отгруженный и неоплаченный покупателем товар
		// по НУ признается в сумме списания из резерва
		// имеется временная разница по начислению расходов - в БУ в момент формирования резерва
		// по НУ - в момент признания задолженности безнадежной (списания)
		// также (фактически еще до списания - при признании сомнительной, но мы реализуем в момент списания)
		// необходимо отсторнировать доход и себестоимость по отгрузке. Доход нам известен,
		// а себестоимость нужно вручную указать в ТЧ.
		Если  Строка.ВидЗадолженности = Перечисления.ВидыЗадолженности.Дебиторская
			И Строка.ТипКонтрагента   = Перечисления.СтатусыКонтрагентов.Покупатель Тогда
			
			// сторно доходов
			Если НЕ СтруктураШапкиДокумента.НалоговоеНазначениеДоходовИЗатрат = Справочники.НалоговыеНазначенияАктивовИЗатрат.НКУ_НеХозДеятельность
				И НЕ СтруктураШапкиДокумента.НеСторнироватьДоходыСебестоимостьВНУ = Истина
				Тогда
				
				// Проводка по только по НУ
				
				Проводка = Движения.Хозрасчетный.Добавить();
				
				Проводка.Период                                 = Дата;
				Проводка.Активность                             = Истина;
				Проводка.Организация                            = Организация;
				Проводка.Сумма                                  = 0; //только по НУ
				Проводка.Содержание                             = НСтр("ru='Сторно доходов при признании задолжености сомнительной (списании)';uk='Сторно доходів при визнанні заборгованості сумнівною (списанні)'", Локализация.КодЯзыкаИнформационнойБазы());
				Проводка.НомерЖурнала                           = "";
				
				Проводка.СчетДт = ПланыСчетов.Хозрасчетный.Вспомогательный;
				
				Проводка.СчетКт = СтруктураШапкиДокумента.ПараметрыСписанияСебестоимостиНУ.СчетДоходов;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,1, СтруктураШапкиДокумента.ПараметрыСписанияСебестоимостиНУ.СубконтоДоходов1);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,2, СтруктураШапкиДокумента.ПараметрыСписанияСебестоимостиНУ.СубконтоДоходов2);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,3, СтруктураШапкиДокумента.ПараметрыСписанияСебестоимостиНУ.СубконтоДоходов3);
				
				Проводка.НалоговоеНазначениеКт = СтруктураШапкиДокумента.НалоговоеНазначениеДоходовИЗатрат;
				Проводка.СуммаНУКт = - (Строка.ГривневаяСумма - Строка.ПроводкиСуммаНДС);
				
			КонецЕсли;
			
			
			// сторно себестоимости 
			Если НЕ СтруктураШапкиДокумента.НалоговоеНазначениеДоходовИЗатрат = Справочники.НалоговыеНазначенияАктивовИЗатрат.НКУ_НеХозДеятельность
				И НЕ СтруктураШапкиДокумента.НеСторнироватьДоходыСебестоимостьВНУ = Истина
				Тогда
				
				// Проводка по только по НУ
				
				Проводка = Движения.Хозрасчетный.Добавить();
				
				Проводка.Период                                 = Дата;
				Проводка.Активность                             = Истина;
				Проводка.Организация                            = Организация;
				Проводка.Сумма                                  = 0; //только по НУ
				Проводка.Содержание                             = НСтр("ru='Сторно себестоимости реализации при признании задолжености сомнительной (списании)';uk='Сторно собівартості реалізації при визнанні заборгованості сумнівною (списанні)'", Локализация.КодЯзыкаИнформационнойБазы());
				Проводка.НомерЖурнала                           = "";
				
				Проводка.СчетДт = СтруктураШапкиДокумента.ПараметрыСписанияСебестоимостиНУ.СчетСебестоимости;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,1, СтруктураШапкиДокумента.ПараметрыСписанияСебестоимостиНУ.СубконтоСебестоимости1);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,2, СтруктураШапкиДокумента.ПараметрыСписанияСебестоимостиНУ.СубконтоСебестоимости2);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,3, СтруктураШапкиДокумента.ПараметрыСписанияСебестоимостиНУ.СубконтоСебестоимости3);
				
				Проводка.НалоговоеНазначениеДт = СтруктураШапкиДокумента.НалоговоеНазначениеДоходовИЗатрат;
				Проводка.СуммаНУДт = - (Строка.СуммаСебестоимостиНУ);
				
				Проводка.СчетКт = ПланыСчетов.Хозрасчетный.Вспомогательный;
					
			КонецЕсли;
			
			Если НЕ СтруктураШапкиДокумента.СписыватьИзРезерваСомнительныхДолгов Тогда
				// в НУ такое списание не признается
				Продолжить;
			КонецЕсли;
			
			Если СтруктураШапкиДокумента.НачислятьРезервСомнительныхДолгов Тогда
				// покажем в БУ начисление резерва сомнительной задолженности
				
				Проводка = Движения.Хозрасчетный.Добавить();
				
				Проводка.Период                                 = Дата;
				Проводка.Активность                             = Истина;
				Проводка.Организация                            = Организация;
				Проводка.Сумма                                  = Строка.ГривневаяСумма - ?(СтруктураШапкиДокумента.НеОтноситьНаВРСуммуНДСПриСписании, Строка.ПроводкиСуммаНДС, 0);
				Проводка.Содержание                             = НСтр("ru='Начисление резерва сомнительной задолженности';uk='Нарахування резерву сумнівної заборгованості'", Локализация.КодЯзыкаИнформационнойБазы());
				Проводка.НомерЖурнала                           = "";
				
				Проводка.СчетДт = СтруктураШапкиДокумента.СчетДт;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,1, СтруктураШапкиДокумента.СубконтоДт1);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,2, СтруктураШапкиДокумента.СубконтоДт2);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,3, СтруктураШапкиДокумента.СубконтоДт3);
				
				// не признается в НУ
				Проводка.НалоговоеНазначениеДт = СтруктураШапкиДокумента.НалоговоеНазначениеДоходовИЗатрат;
				Проводка.СуммаНУДт = 0;
				
				Проводка.СчетКт = СтруктураШапкиДокумента.СчетРезерваСомнительныхДолгов;
			
			КонецЕсли;
			
			Если НЕ СтруктураШапкиДокумента.НалоговоеНазначениеДоходовИЗатрат = Справочники.НалоговыеНазначенияАктивовИЗатрат.НКУ_НеХозДеятельность Тогда
				// Проводка по затратам в НУ - только по налоговому учету, не нехоз. деятельность
				
				Проводка = Движения.Хозрасчетный.Добавить();
				
				Проводка.Период                                 = Дата;
				Проводка.Активность                             = Истина;
				Проводка.Организация                            = Организация;
				Проводка.Сумма                                  = 0; //только по НУ
				Проводка.Содержание                             = НСтр("ru='Списание на затраты по НУ дебеторской задолженности поставщика';uk='Списання на витрати по ПО дебеторської заборгованості постачальника'", Локализация.КодЯзыкаИнформационнойБазы());
				Проводка.НомерЖурнала                           = "";
				
				Проводка.СчетДт = СтруктураШапкиДокумента.СчетДт;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,1, СтруктураШапкиДокумента.СубконтоДт1);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,2, СтруктураШапкиДокумента.СубконтоДт2);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,3, СтруктураШапкиДокумента.СубконтоДт3);
				
				Проводка.НалоговоеНазначениеДт = СтруктураШапкиДокумента.НалоговоеНазначениеДоходовИЗатрат;
				Проводка.СуммаНУДт = Строка.ГривневаяСумма - ?(СтруктураШапкиДокумента.НеОтноситьНаВРСуммуНДСПриСписании, Строка.ПроводкиСуммаНДС, 0);
				
				Проводка.СчетКт = ПланыСчетов.Хозрасчетный.Вспомогательный;
					
			КонецЕсли;
			

		КонецЕсли;	
		
		// списывается кредиторская задолженность полученный и неоплаченный товар от поставщика
		// в НУ доход признается одновременно с БУ. Проводки сформированы выше. 
		// также необходимо отсторнировать себестомиость реализации данного товара только по НУ
		Если  Строка.ВидЗадолженности = Перечисления.ВидыЗадолженности.Кредиторская
			И Строка.ТипКонтрагента   = Перечисления.СтатусыКонтрагентов.Поставщик Тогда

			// отсторнируем показанные доходы на сумму НДС
			Если  СтруктураШапкиДокумента.НеОтноситьНаВРСуммуНДСПриСписании 
				И Строка.ПроводкиСуммаНДС > 0 Тогда
			
				Проводка = Движения.Хозрасчетный.Добавить();
				
				Проводка.Период                                 = Дата;
				Проводка.Активность                             = Истина;
				Проводка.Организация                            = Организация;
				Проводка.Сумма                                  = 0; //только по НУ
				Проводка.Содержание                             = НСтр("ru='Сторно расходов по НУ на сумму НДС';uk='Сторно доходів по ПО на суму ПДВ'", Локализация.КодЯзыкаИнформационнойБазы());
				Проводка.НомерЖурнала                           = "";
				
				Проводка.СчетДт = ПланыСчетов.Хозрасчетный.Вспомогательный;
				
				Проводка.СчетКт = СтруктураШапкиДокумента.СчетКт;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,1, СтруктураШапкиДокумента.СубконтоКт1);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,2, СтруктураШапкиДокумента.СубконтоКт2);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,3, СтруктураШапкиДокумента.СубконтоКт3);
				
				Проводка.НалоговоеНазначениеКт = СтруктураШапкиДокумента.НалоговоеНазначениеДоходовИЗатрат;
				Проводка.СуммаНУКт = - Строка.ПроводкиСуммаНДС;
				
			КонецЕсли;
			
			// сторно себестоимости 
			Если НЕ СтруктураШапкиДокумента.НалоговоеНазначениеДоходовИЗатрат = Справочники.НалоговыеНазначенияАктивовИЗатрат.НКУ_НеХозДеятельность
				И НЕ СтруктураШапкиДокумента.НеСторнироватьДоходыСебестоимостьВНУ = Истина
				Тогда
				
				// Проводка по только по НУ
				Проводка = Движения.Хозрасчетный.Добавить();
				
				Проводка.Период                                 = Дата;
				Проводка.Активность                             = Истина;
				Проводка.Организация                            = Организация;
				Проводка.Сумма                                  = 0; //только по НУ
				Проводка.Содержание                             = НСтр("ru='Сторно себестоимости реализации при признании задолжености сомнительной (списании)';uk='Сторно собівартості реалізації при визнанні заборгованості сумнівною (списанні)'", Локализация.КодЯзыкаИнформационнойБазы());
				Проводка.НомерЖурнала                           = "";
				
				Проводка.СчетДт = СтруктураШапкиДокумента.ПараметрыСписанияСебестоимостиНУ.СчетСебестоимости;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,1, СтруктураШапкиДокумента.ПараметрыСписанияСебестоимостиНУ.СубконтоСебестоимости1);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,2, СтруктураШапкиДокумента.ПараметрыСписанияСебестоимостиНУ.СубконтоСебестоимости2);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,3, СтруктураШапкиДокумента.ПараметрыСписанияСебестоимостиНУ.СубконтоСебестоимости3);
				
				Проводка.НалоговоеНазначениеДт = СтруктураШапкиДокумента.НалоговоеНазначениеДоходовИЗатрат;
				Проводка.СуммаНУДт = - (Строка.ГривневаяСумма - Строка.ПроводкиСуммаНДС);
				
				Проводка.СчетКт = ПланыСчетов.Хозрасчетный.Вспомогательный;
				
			КонецЕсли;
			
		КонецЕсли;	
		
		// списывается кредиторская задолженность за полученный и необслуженный аванс покупателя
		// в НУ доход признается одновременно с БУ. Проводки сформированы выше. дополнительных проводок 
		// не требуется
		Если  Строка.ВидЗадолженности = Перечисления.ВидыЗадолженности.Кредиторская
			И Строка.ТипКонтрагента   = Перечисления.СтатусыКонтрагентов.Покупатель Тогда
		КонецЕсли;	
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДвиженияПоЕдиномуНалогу(СтруктураШапкиДокумента, ТаблицаКредиторскойЗадолженности)
	
	СуммаЕН = ТаблицаКредиторскойЗадолженности.Итог("Сумма");
	
	Если СтруктураШапкиДокумента.ЕстьНДС Тогда
		СуммаЕН = СуммаЕН - ТаблицаКредиторскойЗадолженности.Итог("СуммаНДСРегл");
	КонецЕсли;
	
	Если СуммаЕН > 0 Тогда
		Движение = Движения.КнигаДоходовРасходовПоЕдиномуНалогу.Добавить();
		Движение.Период = СтруктураШапкиДокумента.Дата;
		Движение.Регистратор = СтруктураШапкиДокумента.Ссылка;
		Движение.Организация = СтруктураШапкиДокумента.Организация;
		Движение.Статья = Справочники.СтатьиНалоговыхДеклараций.ЕННК_ДоходыПросроченнаяЗадолженность;
		Движение.Сумма = СуммаЕН;
	КонецЕсли;
	
КонецПроцедуры

Процедура ДвиженияПоВводуНачальныхОстатков(СтруктураШапкиДокумента, ТаблицаПоСуммамДолга, Отказ, Заголовок)
	
	ПроводкиБУ 			= Движения.Хозрасчетный;
	
	ОиПНДСПродаж 		= Движения.ОжидаемыйИПодтвержденныйНДСПродаж;
	ОиПНДСПриобретений 	= Движения.ОжидаемыйИПодтвержденныйНДСПриобретений;
	
	НУПродаж 			= Движения.ПродажиНалоговыйУчет;
	НУПриобретений 		= Движения.ПриобретенияНалоговыйУчет;
	
	ВидЗадолженностиДебиторская  = Перечисления.ВидыЗадолженности.Дебиторская;
	ВидЗадолженностиКредиторская = Перечисления.ВидыЗадолженности.Кредиторская;

	ВспомогательныйСчет = СтруктураШапкиДокумента.СчетДт;	
	
	ДатаСторноДвижений = КонецМесяца(СтруктураШапкиДокумента.Дата)+2;
	
	Для каждого СтрокаЗадолженности Из ТаблицаПоСуммамДолга Цикл
		
		// бухгалтерские проводки  - взаиморасчеты
		Проводка = ПроводкиБУ.Добавить();
		Проводка.Период			= СтруктураШапкиДокумента.Дата;
		Проводка.Организация	= СтруктураШапкиДокумента.Организация;
		Проводка.НомерЖурнала	= "";
		Проводка.Содержание		= НСтр("ru='Ввод начальных остатков по взаиморасчетам';uk='Введення початкових залишків по взаєморозрахунках'",Локализация.КодЯзыкаИнформационнойБазы());
		Проводка.Сумма			= СтрокаЗадолженности.Сумма;
		
		Если СтрокаЗадолженности.ВидЗадолженности = ВидЗадолженностиДебиторская Тогда
			
			Проводка.СчетДт = СтрокаЗадолженности.СчетОплаты;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты", СтрокаЗадолженности.Контрагент);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Договоры", 	СтрокаЗадолженности.ДоговорКонтрагента);
					
			НомерСубконтоРД = ПолучитьНомерСубконтоРД(СтрокаЗадолженности.СчетОплаты);
			Если не НомерСубконтоРД = 0  Тогда
				Если НЕ ЗначениеЗаполнено(СтрокаЗадолженности.Сделка) Тогда
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ДокументыРасчетовСКонтрагентами", СтруктураШапкиДокумента.Ссылка);
				Иначе
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ДокументыРасчетовСКонтрагентами", СтрокаЗадолженности.Сделка);
				КонецЕсли; 
			КонецЕсли;
			
			Если Проводка.СчетДт.Валютный Тогда
				Проводка.ВалютаДт        = СтрокаЗадолженности.ВалютаВзаиморасчетов;
				Проводка.ВалютнаяСуммаДт = СтрокаЗадолженности.СуммаВзаиморасчетов;
			КонецЕсли;			
			
			Проводка.СчетКт 	= ВспомогательныйСчет;
			
		Иначе//Если СтрокаЗадолженности.ВидЗадолженности = ВидЗадолженностиКредиторская Тогда	
			
			Проводка.СчетДт 	= ВспомогательныйСчет;
			
			Проводка.СчетКт = СтрокаЗадолженности.СчетОплаты;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Контрагенты", СтрокаЗадолженности.Контрагент);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Договоры", 	СтрокаЗадолженности.ДоговорКонтрагента);
			
			НомерСубконтоРД = ПолучитьНомерСубконтоРД(СтрокаЗадолженности.СчетОплаты);
			Если не НомерСубконтоРД = 0  Тогда
				Если НЕ ЗначениеЗаполнено(СтрокаЗадолженности.Сделка) Тогда
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ДокументыРасчетовСКонтрагентами", СтруктураШапкиДокумента.Ссылка);
				Иначе
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ДокументыРасчетовСКонтрагентами", СтрокаЗадолженности.Сделка);
				КонецЕсли; 
			КонецЕсли;
			
			Если Проводка.СчетКт.Валютный Тогда
				Проводка.ВалютаКт        = СтрокаЗадолженности.ВалютаВзаиморасчетов;
				Проводка.ВалютнаяСуммаКт = СтрокаЗадолженности.СуммаВзаиморасчетов;
			КонецЕсли;			
			
		КонецЕсли;
		

		Если СтрокаЗадолженности.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.Прочее Тогда
			
			//налоговые регистры не заполняем
			Продолжить;
			
		КонецЕсли; 

		Если СтрокаЗадолженности.СложныйНалоговыйУчет Тогда
				
			// бухгалтерские проводки - НДС
			Если  СтруктураШапкиДокумента.ЕстьНДС 
				И СтрокаЗадолженности.ПроводкиСуммаНДС <> 0 Тогда
					
				Проводка = ПроводкиБУ.Добавить();
				Проводка.Период			= СтруктураШапкиДокумента.Дата;
				Проводка.Организация	= СтруктураШапкиДокумента.Организация;
				Проводка.НомерЖурнала	= "";
				Проводка.Содержание		= НСтр("ru='Ввод начальных остатков по взаиморасчетам (НДС)';uk='Введення початкових залишків по взаєморозрахунках (ПДВ)'",Локализация.КодЯзыкаИнформационнойБазы());
				Проводка.Сумма			= СтрокаЗадолженности.ПроводкиСуммаНДС;
					
				Если    ЭтоОплата(СтрокаЗадолженности)
				   И НЕ СтрокаЗадолженности.МоментОпределенияБазыНДС = Перечисления.МоментыОпределенияНалоговойБазы.ПоОтгрузке Тогда
				   // формируются проводки типа 00(6442) - 6441 на сумму НДС
					   
					Если СтрокаЗадолженности.ВидЗадолженности = ВидЗадолженностиКредиторская Тогда
						// покупатель
						Проводка.СчетДт = СтрокаЗадолженности.СчетУчетаНДСПодтвержденный;
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты", СтрокаЗадолженности.Контрагент);
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Договоры", 	СтрокаЗадолженности.ДоговорКонтрагента);
						Если СтрокаЗадолженности.НетНалоговойНакладной Тогда
							Проводка.СчетКт = СтрокаЗадолженности.СчетУчетаНДС;
							БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Контрагенты", СтрокаЗадолженности.Контрагент);
							БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Договоры", 	СтрокаЗадолженности.ДоговорКонтрагента);
						Иначе	
							Проводка.СчетКт = ВспомогательныйСчет;	
						КонецЕсли;
										
					Иначе//Если СтрокаЗадолженности.ВидЗадолженности = ВидЗадолженностиДебиторская Тогда	
						// поставщик
						Если СтрокаЗадолженности.НетНалоговойНакладной Тогда
							Проводка.СчетДт = СтрокаЗадолженности.СчетУчетаНДС;
							БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты", СтрокаЗадолженности.Контрагент);
							БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Договоры", 	СтрокаЗадолженности.ДоговорКонтрагента);
						Иначе
							Проводка.СчетДт = ВспомогательныйСчет;
						КонецЕсли;
								
						Проводка.СчетКт 	= СтрокаЗадолженности.СчетУчетаНДСПодтвержденный;
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Контрагенты", СтрокаЗадолженности.Контрагент);
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Договоры", 	СтрокаЗадолженности.ДоговорКонтрагента);
												
					КонецЕсли;
					
				ИначеЕсли НЕ ЭтоОплата(СтрокаЗадолженности)
						 И    СтрокаЗадолженности.НетНалоговойНакладной 
						И НЕ СтрокаЗадолженности.МоментОпределенияБазыНДС = Перечисления.МоментыОпределенияНалоговойБазы.ПоОплате Тогда
					   // формируются проводки типа 6442 - 00 на сумму НДС
						
					Если СтрокаЗадолженности.ВидЗадолженности = ВидЗадолженностиКредиторская Тогда
						// поставщик
						Проводка.СчетДт 	= СтрокаЗадолженности.СчетУчетаНДС;
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты", СтрокаЗадолженности.Контрагент);
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Договоры", 	СтрокаЗадолженности.ДоговорКонтрагента);
												
						Проводка.СчетКт 	= ВспомогательныйСчет;
										
					Иначе//Если СтрокаЗадолженности.ВидЗадолженности = ВидЗадолженностиДебиторская Тогда	
						// покупатель
						Проводка.СчетДт 	= ВспомогательныйСчет;
										
						Проводка.СчетКт = СтрокаЗадолженности.СчетУчетаНДС;
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Контрагенты", СтрокаЗадолженности.Контрагент);
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Договоры", 	СтрокаЗадолженности.ДоговорКонтрагента);
												
					КонецЕсли;
						
				ИначеЕсли НЕ ЭтоОплата(СтрокаЗадолженности)
						 И СтрокаЗадолженности.НетНалоговойНакладной 
						И СтрокаЗадолженности.МоментОпределенияБазыНДС = Перечисления.МоментыОпределенияНалоговойБазы.ПоОплате Тогда
					   // формируются проводки типа 00 - 6441 на -сумму НДС (для приведения остатков к учету "по отгрузке")
						   
					   Если СтрокаЗадолженности.ВидЗадолженности = ВидЗадолженностиДебиторская Тогда
						   // покупатель
						   Проводка.СчетДт 	= СтрокаЗадолженности.СчетУчетаНДСПодтвержденный;
						   БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты", СтрокаЗадолженности.Контрагент);
						   БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Договоры", 	СтрокаЗадолженности.ДоговорКонтрагента);
							   
						   Проводка.СчетКт 	= ВспомогательныйСчет;
							   
					   Иначе//Если СтрокаЗадолженности.ВидЗадолженности = ВидЗадолженностиКредиторская Тогда	
						   // поставщик
						   Проводка.СчетДт 	= ВспомогательныйСчет;
							   
						   Проводка.СчетКт 	= СтрокаЗадолженности.СчетУчетаНДСПодтвержденный;
						   БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Контрагенты", СтрокаЗадолженности.Контрагент);
						   БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Договоры", 	СтрокаЗадолженности.ДоговорКонтрагента);
							   
					   КонецЕсли;
						   
					   Проводка.Сумма = - Проводка.Сумма;
						   
				Иначе
					// в остальных случаях проводки не формируются.	   
					ПроводкиБУ.Удалить(Проводка);
						
				КонецЕсли;
					
				// сформируем проводку по регистрации авансов (отмена регистрации)
				Если  (   ЭтоОплата(СтрокаЗадолженности) И НЕ СтрокаЗадолженности.МоментОпределенияБазыНДС = Перечисления.МоментыОпределенияНалоговойБазы.ПоОтгрузке)
				  ИЛИ (НЕ ЭтоОплата(СтрокаЗадолженности) И    СтрокаЗадолженности.МоментОпределенияБазыНДС = Перечисления.МоментыОпределенияНалоговойБазы.ПоОплате) Тогда
					  
					  // формируются проводки типа 6442 - 6441 на -сумму НДС
					Проводка = ПроводкиБУ.Добавить();
					Проводка.Период			= ДатаСторноДвижений;
					Проводка.Организация	= СтруктураШапкиДокумента.Организация;
					Проводка.НомерЖурнала	= "";
					Проводка.Содержание		= НСтр("ru='Отмена регистрации авансов (НДС)';uk='Скасування реєстрації авансів (ПДВ)'",Локализация.КодЯзыкаИнформационнойБазы());
					Проводка.Сумма			=  - СтрокаЗадолженности.ПроводкиСуммаНДС;
					
					Если (СтрокаЗадолженности.ВидЗадолженности = ВидЗадолженностиКредиторская И    ЭтоОплата(СтрокаЗадолженности)) 
					  ИЛИ(СтрокаЗадолженности.ВидЗадолженности = ВидЗадолженностиДебиторская  И НЕ ЭтоОплата(СтрокаЗадолженности))	Тогда
						// покупатель
						Проводка.СчетДт 	= СтрокаЗадолженности.СчетУчетаНДСПодтвержденный;
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты", СтрокаЗадолженности.Контрагент);
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Договоры", 	СтрокаЗадолженности.ДоговорКонтрагента);
						
						Проводка.СчетКт 	= СтрокаЗадолженности.СчетУчетаНДС;
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Контрагенты", СтрокаЗадолженности.Контрагент);
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Договоры", 	СтрокаЗадолженности.ДоговорКонтрагента);
										
					Иначе//Если СтрокаЗадолженности.ВидЗадолженности = ВидЗадолженностиДебиторская Тогда	
						// поставщик
						Проводка.СчетДт 	= СтрокаЗадолженности.СчетУчетаНДС;
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты", СтрокаЗадолженности.Контрагент);
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Договоры", 	СтрокаЗадолженности.ДоговорКонтрагента);
										
						Проводка.СчетКт 	= СтрокаЗадолженности.СчетУчетаНДСПодтвержденный;
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Контрагенты", СтрокаЗадолженности.Контрагент);
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Договоры", 	СтрокаЗадолженности.ДоговорКонтрагента);
												
					КонецЕсли;
						
					Если НЕ ЭтоОплата(СтрокаЗадолженности) Тогда
						// долг по отгрузке при методе определения базы - по оплате
						Проводка.Сумма =  - Проводка.Сумма;
					КонецЕсли; 
						
				КонецЕсли;
					
			КонецЕсли; 
			
			// Налоговый учет (продаж/приобретений)
			Если  СтруктураШапкиДокумента.ЕстьНДС Тогда
				  
			  Если СтрокаЗадолженности.ТипКонтрагента 	= Перечисления.СтатусыКонтрагентов.Покупатель Тогда
					  
				  Движение = НУПродаж.Добавить();
					  
				  Если ЭтоОплата(СтрокаЗадолженности) Тогда
					  // оплата
					  Если СтрокаЗадолженности.РасчетыВозврат = Перечисления.РасчетыВозврат.Расчеты Тогда
						  // расчеты
						  Движение.Событие = Перечисления.СобытияПродажиНалоговыйУчет.ОплатаПокупателем;
					  Иначе
						  //возврат	
						  Движение.Событие = Перечисления.СобытияПродажиНалоговыйУчет.ВозвратОплатыПокупателю;
					  КонецЕсли;
				  Иначе
					  //отгрузка
					  Если СтрокаЗадолженности.РасчетыВозврат = Перечисления.РасчетыВозврат.Расчеты Тогда
						  // расчеты
						  Движение.Событие = Перечисления.СобытияПродажиНалоговыйУчет.РеализацияПокупателю;
					  Иначе
						  //возврат	
						  Движение.Событие = Перечисления.СобытияПродажиНалоговыйУчет.ВозвратОтПокупателя;
					  КонецЕсли;
				  КонецЕсли; 
					  
			  Иначе// СтрокаЗадолженности.ТипКонтрагента 	= Перечисления.СтатусыКонтрагентов.Поставщик
					  
				  Движение = НУПриобретений.Добавить();
					  
				  Если ЭтоОплата(СтрокаЗадолженности) Тогда
					  // оплата
					  Если СтрокаЗадолженности.РасчетыВозврат = Перечисления.РасчетыВозврат.Расчеты Тогда
						  // расчеты
						  Движение.Событие = Перечисления.СобытияПриобретенияНалоговыйУчет.ОплатаПоставщику;
					  Иначе
						  //возврат	
						  Движение.Событие = Перечисления.СобытияПриобретенияНалоговыйУчет.ВозвратОплатыПоставщиком;
					  КонецЕсли;
				  Иначе
					  //отгрузка
					  Если СтрокаЗадолженности.РасчетыВозврат = Перечисления.РасчетыВозврат.Расчеты Тогда
						  // расчеты
						  Движение.Событие = Перечисления.СобытияПриобретенияНалоговыйУчет.ПоступлениеОтПоставщика;
					  Иначе
						  //возврат	
						  Движение.Событие = Перечисления.СобытияПриобретенияНалоговыйУчет.ВозвратПоставщику;
					  КонецЕсли;
				  КонецЕсли; 
				  
			  КонецЕсли; 
				  
			  Движение.Период	 		  		= СтруктураШапкиДокумента.Дата;
			  Движение.Организация 		  		= СтруктураШапкиДокумента.Организация;
			  Движение.ДоговорКонтрагента 		= СтрокаЗадолженности.ДоговорКонтрагента;
			  Движение.ВозвратнаяТара	  		= СтрокаЗадолженности.ВозвратнаяТара;
			  Движение.СуммаВзаиморасчетов  	= СтрокаЗадолженности.СуммаВзаиморасчетовБУ;
				  
			КонецЕсли;			
				
			// ожидаемый и подтвержденный НДС
			Если  
				// по возвратам тары в регистарах ожидаемого и подтвержденного НДС учет не ведется
				НЕ  (СтрокаЗадолженности.ВозвратнаяТара И СтрокаЗадолженности.РасчетыВозврат = Перечисления.РасчетыВозврат.Возврат)
				И   ((СтрокаЗадолженности.ВалютаВзаиморасчетов = мВалютаРегламентированногоУчета) ИЛИ СтрокаЗадолженности.ТипКонтрагента = Перечисления.СтатусыКонтрагентов.Покупатель) Тогда
					
				   Если СтрокаЗадолженности.ТипКонтрагента 	= Перечисления.СтатусыКонтрагентов.Покупатель Тогда
						   
					   РегистрОиПНДС = ОиПНДСПродаж;
						   
					   Движение 		 = РегистрОиПНДС.Добавить();	
					   ДвижениеВыпискаНН = РегистрОиПНДС.Добавить();
					   ДвижениеСторно    = РегистрОиПНДС.Добавить();
						   
					   КодыОпераций = Перечисления.КодыОперацийОжидаемыйИПодтвержденныйНДСПродаж;
						   
					   Если СтрокаЗадолженности.РасчетыВозврат = Перечисления.РасчетыВозврат.Расчеты Тогда
						   // расчеты
						   Движение.СобытиеНДС = Перечисления.СобытияОжидаемыйИПодтвержденныйНДСПродаж.Реализация;
					   Иначе
						   //возврат	
						   Движение.СобытиеНДС = Перечисления.СобытияОжидаемыйИПодтвержденныйНДСПродаж.Возврат;
					   КонецЕсли;
						   
				   Иначе// СтрокаЗадолженности.ТипКонтрагента 	= Перечисления.СтатусыКонтрагентов.Поставщик
						   
					   РегистрОиПНДС = ОиПНДСПриобретений;

					   Движение 			= РегистрОиПНДС.Добавить();
					   ДвижениеВыпискаНН 	= РегистрОиПНДС.Добавить();
					   ДвижениеСторно 		= РегистрОиПНДС.Добавить();
						   
					   КодыОпераций = Перечисления.КодыОперацийОжидаемыйИПодтвержденныйНДСПриобретений;
						   
					   Если СтрокаЗадолженности.РасчетыВозврат = Перечисления.РасчетыВозврат.Расчеты Тогда
						   // расчеты
						   Движение.СобытиеНДС = Перечисления.СобытияОжидаемыйИПодтвержденныйНДСПриобретений.Поступление;
					   Иначе
						   //возврат	
						   Движение.СобытиеНДС = Перечисления.СобытияОжидаемыйИПодтвержденныйНДСПриобретений.Возврат;
					   КонецЕсли;
						   
					   Движение.ДляХозяйственнойДеятельности = ?(СтрокаЗадолженности.НалоговоеНазначение = Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяНеХозДеятельность, Ложь, Истина);
					   Движение.ВидДеятельностиНДС 			 = СтрокаЗадолженности.ВидДеятельностиНДС;
					   Движение.Амортизируется	 			 = СтрокаЗадолженности.Амортизируется;
					   Движение.СуммаНДСПропорционально 	 = СтрокаЗадолженности.СуммаНДСПропорциональноКредит;
					   
				   КонецЕсли;
					   
				   Если (НЕ ЭтоОплата(СтрокаЗадолженности) 
						  И СтрокаЗадолженности.МоментОпределенияБазыНДС = Перечисления.МоментыОпределенияНалоговойБазы.ПоОплате
						  И СтрокаЗадолженности.НетНалоговойНакладной) Тогда
						Движение.Период		  	= ДатаСторноДвижений;
						Движение.КодОперации 	= КодыОпераций.ОтменаРегистрацииАвансов;
				   Иначе	
						Движение.Период	 = СтруктураШапкиДокумента.Дата;
						Если ЭтоОплата(СтрокаЗадолженности) Тогда
							Движение.КодОперации = КодыОпераций.РегистрацияАвансов;
						Иначе	
							Движение.КодОперации = КодыОпераций.ОжидаемыйНДС;
						КонецЕсли;
				   КонецЕсли;
				   Движение.ВидДвижения  			= ВидДвиженияНакопления.Приход;
				   Движение.Организация 		  	= СтруктураШапкиДокумента.Организация;
				   Движение.ДоговорКонтрагента 		= СтрокаЗадолженности.ДоговорКонтрагента;
				   Движение.ВозвратнаяТара	  		= СтрокаЗадолженности.ВозвратнаяТара;
				   Движение.СтавкаНДС	  			= СтрокаЗадолженности.СтавкаНДС;
				   Движение.БазаНДС  				= СтрокаЗадолженности.СуммаВзаиморасчетовБУ - СтрокаЗадолженности.СуммаНДСВал;
				   Движение.СуммаНДС    			= СтрокаЗадолженности.СуммаНДСВал;
					   
				   Если НЕ СтрокаЗадолженности.НетНалоговойНакладной Тогда
						   
					   // сформируем движение по выписке налоговой
					   ЗаполнитьЗначенияСвойств(ДвижениеВыпискаНН,Движение,,"НомерСтроки");					   
					   ДвижениеВыпискаНН.ВидДвижения = ВидДвиженияНакопления.Расход;
					   ДвижениеВыпискаНН.КодОперации = КодыОпераций.ПодтвержденныйНДС;
						   
				   КонецЕсли;
					   
				   Если ЭтоОплата(СтрокаЗадолженности) Тогда
						   
					   // добавим движения по регистрации авансов (отмена регистрации):
					   // сторно на начало следующего месяца
					   ЗаполнитьЗначенияСвойств(ДвижениеСторно,Движение,,"НомерСтроки");
						   
					   ДвижениеСторно.СуммаНДС    = -ДвижениеСторно.СуммаНДС;
					   ДвижениеСторно.БазаНДС     = -ДвижениеСторно.БазаНДС;
					   ДвижениеСторно.Период      = ДатаСторноДвижений;
					   ДвижениеСторно.КодОперации = КодыОпераций.ОтменаРегистрацииАвансов;
						   
				   КонецЕсли; 
					   
				   // оставим только те движения, которые имеют смысл:
				   Если НЕ ЭтоОплата(СтрокаЗадолженности) ИЛИ СтрокаЗадолженности.МоментОпределенияБазыНДС = Перечисления.МоментыОпределенияНалоговойБазы.ПоОтгрузке Тогда
						   
						РегистрОиПНДС.Удалить(ДвижениеСторно);
						   
				   КонецЕсли;
					   
				  Если  (   ЭтоОплата(СтрокаЗадолженности) И СтрокаЗадолженности.МоментОпределенияБазыНДС = Перечисления.МоментыОпределенияНалоговойБазы.ПоОтгрузке)
					ИЛИ (НЕ ЭтоОплата(СтрокаЗадолженности) И СтрокаЗадолженности.МоментОпределенияБазыНДС = Перечисления.МоментыОпределенияНалоговойБазы.ПоОплате) Тогда
						
					   УдалятьДвижение = Истина;
					   Если (НЕ ЭтоОплата(СтрокаЗадолженности) 
							  И СтрокаЗадолженности.МоментОпределенияБазыНДС = Перечисления.МоментыОпределенияНалоговойБазы.ПоОплате
							  И СтрокаЗадолженности.НетНалоговойНакладной) Тогда
							   УдалятьДвижение = Ложь;	
					   КонецЕсли;
						
					  Если УдалятьДвижение Тогда
						   РегистрОиПНДС.Удалить(Движение);
					  КонецЕсли;
						  
					  РегистрОиПНДС.Удалить(ДвижениеВыпискаНН);
						   
				   ИначеЕсли СтрокаЗадолженности.НетНалоговойНакладной Тогда
						   
					  РегистрОиПНДС.Удалить(ДвижениеВыпискаНН);
						      
				   КонецЕсли;
						   
			   КонецЕсли; 
			   
	   Иначе // упрощенный налоговый учет
				
			// бухгалтерские проводки - НДС
			Если СтрокаЗадолженности.ПроводкиСуммаНДС <> 0 Тогда
					
				Проводка = ПроводкиБУ.Добавить();
				Проводка.Период			= СтруктураШапкиДокумента.Дата;
				Проводка.Организация	= СтруктураШапкиДокумента.Организация;
				Проводка.НомерЖурнала	= "";
				Проводка.Содержание		= НСтр("ru='Ввод начальных остатков по взаиморасчетам (НДС)';uk='Введення початкових залишків по взаєморозрахунках (ПДВ)'",Локализация.КодЯзыкаИнформационнойБазы());
				Проводка.Сумма			= СтрокаЗадолженности.ПроводкиСуммаНДС;
					
				Если    ЭтоОплата(СтрокаЗадолженности)
				   И НЕ СтрокаЗадолженности.МоментОпределенияБазыНДС = Перечисления.МоментыОпределенияНалоговойБазы.ПоОтгрузке Тогда
				   // формируются проводки типа 00(6442) - 6441 на сумму НДС
					   
					Если СтрокаЗадолженности.ВидЗадолженности = ВидЗадолженностиКредиторская Тогда
						// покупатель
						Проводка.СчетДт = СтрокаЗадолженности.СчетУчетаНДСПодтвержденный;
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты", СтрокаЗадолженности.Контрагент);
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Договоры", 	СтрокаЗадолженности.ДоговорКонтрагента);
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ДокументыРасчетовСКонтрагентами", СтрокаЗадолженности.СделкаНУ);
						
						Если СтрокаЗадолженности.НетНалоговойНакладной Тогда
							Проводка.СчетКт = СтрокаЗадолженности.СчетУчетаНДС;
							БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Контрагенты", СтрокаЗадолженности.Контрагент);
							БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Договоры", 	СтрокаЗадолженности.ДоговорКонтрагента);
							БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ДокументыРасчетовСКонтрагентами", СтрокаЗадолженности.СделкаНУ);								
						Иначе	
							Проводка.СчетКт = ВспомогательныйСчет;	
						КонецЕсли;
										
					Иначе//Если СтрокаЗадолженности.ВидЗадолженности = ВидЗадолженностиДебиторская Тогда	
						// поставщик
						Если СтрокаЗадолженности.НетНалоговойНакладной Тогда
							Проводка.СчетДт = СтрокаЗадолженности.СчетУчетаНДС;
							БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты", СтрокаЗадолженности.Контрагент);
							БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Договоры", 	СтрокаЗадолженности.ДоговорКонтрагента);
							БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ДокументыРасчетовСКонтрагентами", СтрокаЗадолженности.СделкаНУ);								
						Иначе
							Проводка.СчетДт = ВспомогательныйСчет;
						КонецЕсли;
								
						Проводка.СчетКт 	= СтрокаЗадолженности.СчетУчетаНДСПодтвержденный;
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Контрагенты", СтрокаЗадолженности.Контрагент);
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Договоры", 	СтрокаЗадолженности.ДоговорКонтрагента);
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ДокументыРасчетовСКонтрагентами", СтрокаЗадолженности.СделкаНУ);								
												
					КонецЕсли;
					
				ИначеЕсли НЕ ЭтоОплата(СтрокаЗадолженности)
						 И    СтрокаЗадолженности.НетНалоговойНакладной 
						 И НЕ СтрокаЗадолженности.МоментОпределенияБазыНДС = Перечисления.МоментыОпределенияНалоговойБазы.ПоОплате Тогда
						 
						 // формируются проводки типа 6442 - 00 на сумму НДС
						
					Если СтрокаЗадолженности.ВидЗадолженности = ВидЗадолженностиКредиторская Тогда
						// поставщик
						Проводка.СчетДт 	= СтрокаЗадолженности.СчетУчетаНДС;
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты", СтрокаЗадолженности.Контрагент);
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Договоры", 	СтрокаЗадолженности.ДоговорКонтрагента);
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ДокументыРасчетовСКонтрагентами", СтрокаЗадолженности.СделкаНУ);								
												
						Проводка.СчетКт 	= ВспомогательныйСчет;
										
					Иначе//Если СтрокаЗадолженности.ВидЗадолженности = ВидЗадолженностиДебиторская Тогда	
						// покупатель
						Проводка.СчетДт 	= ВспомогательныйСчет;
										
						Проводка.СчетКт = СтрокаЗадолженности.СчетУчетаНДС;
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Контрагенты", СтрокаЗадолженности.Контрагент);
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Договоры", 	СтрокаЗадолженности.ДоговорКонтрагента);
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ДокументыРасчетовСКонтрагентами", СтрокаЗадолженности.СделкаНУ);								
												
					КонецЕсли;
						
				ИначеЕсли НЕ ЭтоОплата(СтрокаЗадолженности)
						   И СтрокаЗадолженности.НетНалоговойНакладной 
						   И СтрокаЗадолженности.МоментОпределенияБазыНДС = Перечисления.МоментыОпределенияНалоговойБазы.ПоОплате Тогда
					   // формируются проводки типа 6441 - 00 на сумму НДС 
						   
					   Если СтрокаЗадолженности.ВидЗадолженности = ВидЗадолженностиКредиторская Тогда
						   // поставщик
						   Проводка.СчетДт 	= СтрокаЗадолженности.СчетУчетаНДСПодтвержденный;
						   БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты", СтрокаЗадолженности.Контрагент);
						   БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Договоры", 	СтрокаЗадолженности.ДоговорКонтрагента);
						   БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ДокументыРасчетовСКонтрагентами", СтрокаЗадолженности.СделкаНУ);								
							   
						   Проводка.СчетКт 	= ВспомогательныйСчет;
							   
					   Иначе//Если СтрокаЗадолженности.ВидЗадолженности = ВидЗадолженностиДебиторская  Тогда	
						   // покупатель
						   Проводка.СчетДт 	= ВспомогательныйСчет;
							   
						   Проводка.СчетКт 	= СтрокаЗадолженности.СчетУчетаНДСПодтвержденный;
						   БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Контрагенты", СтрокаЗадолженности.Контрагент);
						   БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Договоры", 	СтрокаЗадолженности.ДоговорКонтрагента);
						   БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ДокументыРасчетовСКонтрагентами", СтрокаЗадолженности.СделкаНУ);								
							   
					   КонецЕсли;
						   
				Иначе
					// в остальных случаях проводки не формируются.	   
					ПроводкиБУ.Удалить(Проводка);
						
				КонецЕсли;
					
			КонецЕсли; 
			
			// Налоговый учет (продаж/приобретений)
			Если  СтруктураШапкиДокумента.ЕстьНДС Тогда
				  
			  Если СтрокаЗадолженности.ТипКонтрагента 	= Перечисления.СтатусыКонтрагентов.Покупатель Тогда
					  
				  Движение = НУПродаж.Добавить();
					  
				  Если ЭтоОплата(СтрокаЗадолженности) Тогда
					  // оплата
					  Если СтрокаЗадолженности.РасчетыВозврат = Перечисления.РасчетыВозврат.Расчеты Тогда
						  // расчеты
						  Движение.Событие = Перечисления.СобытияПродажиНалоговыйУчет.ОплатаПокупателем;
					  Иначе
						  //возврат	
						  Движение.Событие = Перечисления.СобытияПродажиНалоговыйУчет.ВозвратОплатыПокупателю;
					  КонецЕсли;
				  Иначе
					  //отгрузка
					  Если СтрокаЗадолженности.РасчетыВозврат = Перечисления.РасчетыВозврат.Расчеты Тогда
						  // расчеты
						  Движение.Событие = Перечисления.СобытияПродажиНалоговыйУчет.РеализацияПокупателю;
					  Иначе
						  //возврат	
						  Движение.Событие = Перечисления.СобытияПродажиНалоговыйУчет.ВозвратОтПокупателя;
					  КонецЕсли;
				  КонецЕсли; 
				  
			  Иначе// СтрокаЗадолженности.ТипКонтрагента 	= Перечисления.СтатусыКонтрагентов.Поставщик
					  
				  Движение = НУПриобретений.Добавить();
					  
				  Если ЭтоОплата(СтрокаЗадолженности) Тогда
					  // оплата
					  Если СтрокаЗадолженности.РасчетыВозврат = Перечисления.РасчетыВозврат.Расчеты Тогда
						  // расчеты
						  Движение.Событие = Перечисления.СобытияПриобретенияНалоговыйУчет.ОплатаПоставщику;
					  Иначе
						  //возврат	
						  Движение.Событие = Перечисления.СобытияПриобретенияНалоговыйУчет.ВозвратОплатыПоставщиком;
					  КонецЕсли;
				  Иначе
					  //отгрузка
					  Если СтрокаЗадолженности.РасчетыВозврат = Перечисления.РасчетыВозврат.Расчеты Тогда
						  // расчеты
						  Движение.Событие = Перечисления.СобытияПриобретенияНалоговыйУчет.ПоступлениеОтПоставщика;
					  Иначе
						  //возврат	
						  Движение.Событие = Перечисления.СобытияПриобретенияНалоговыйУчет.ВозвратПоставщику;
					  КонецЕсли;
				  КонецЕсли; 
				  
			      Движение.ДляХозяйственнойДеятельности = ?(СтрокаЗадолженности.НалоговоеНазначение = Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяНеХозДеятельность, Ложь, Истина);

				  Движение.ВидДеятельностиНДС 			= СтрокаЗадолженности.ВидДеятельностиНДС;
				  Движение.Амортизируется 				= СтрокаЗадолженности.Амортизируется;
				  Движение.СуммаНДСПропорционально 	    = СтрокаЗадолженности.СуммаНДСПропорциональноКредит;

			  КонецЕсли; 
				  
			  Движение.Период	 		  		= СтруктураШапкиДокумента.Дата;
			  Движение.Организация 		  		= СтруктураШапкиДокумента.Организация;
			  Движение.ДоговорКонтрагента 		= СтрокаЗадолженности.ДоговорКонтрагента;
			  Движение.Сделка				    = СтрокаЗадолженности.СделкаНУ;
			  Движение.СтавкаНДС	  			= СтрокаЗадолженности.СтавкаНДС;
			  Движение.ВозвратнаяТара	  		= СтрокаЗадолженности.ВозвратнаяТара;
			  
			  Движение.СуммаВзаиморасчетов  	= СтрокаЗадолженности.СуммаВзаиморасчетовБУ;
			  Движение.СуммаНДС	  				= СтрокаЗадолженности.СуммаНДСВал;
			  
			КонецЕсли;			
			
			// ожидаемый и подтвержденный НДС
			Если  СтруктураШапкиДокумента.ЕстьНДС
				// по возвратам тары в регистарах ожидаемого и подтвержденного НДС учет не ведется
				И НЕ  (СтрокаЗадолженности.ВозвратнаяТара И СтрокаЗадолженности.РасчетыВозврат = Перечисления.РасчетыВозврат.Возврат)
				И     ((СтрокаЗадолженности.ВалютаВзаиморасчетов = мВалютаРегламентированногоУчета) ИЛИ СтрокаЗадолженности.ТипКонтрагента = Перечисления.СтатусыКонтрагентов.Покупатель) Тогда
					
				   Если СтрокаЗадолженности.ТипКонтрагента 	= Перечисления.СтатусыКонтрагентов.Покупатель Тогда
						   
					   РегистрОиПНДС = ОиПНДСПродаж;
						   
					   Движение 		 = РегистрОиПНДС.Добавить();	
					   ДвижениеВыпискаНН = РегистрОиПНДС.Добавить();
						   
					   КодыОпераций = Перечисления.КодыОперацийОжидаемыйИПодтвержденныйНДСПродаж;
						   
					   Если СтрокаЗадолженности.РасчетыВозврат = Перечисления.РасчетыВозврат.Расчеты Тогда
						   // расчеты
						   Движение.СобытиеНДС = Перечисления.СобытияОжидаемыйИПодтвержденныйНДСПродаж.Реализация;
					   Иначе
						   //возврат	
						   Движение.СобытиеНДС = Перечисления.СобытияОжидаемыйИПодтвержденныйНДСПродаж.Возврат;
					   КонецЕсли;
						   
				   Иначе// СтрокаЗадолженности.ТипКонтрагента 	= Перечисления.СтатусыКонтрагентов.Поставщик
						   
					   РегистрОиПНДС = ОиПНДСПриобретений;

					   Движение 			= РегистрОиПНДС.Добавить();
					   ДвижениеВыпискаНН 	= РегистрОиПНДС.Добавить();
						   
					   КодыОпераций = Перечисления.КодыОперацийОжидаемыйИПодтвержденныйНДСПриобретений;
						   
					   Если СтрокаЗадолженности.РасчетыВозврат = Перечисления.РасчетыВозврат.Расчеты Тогда
						   // расчеты
						   Движение.СобытиеНДС = Перечисления.СобытияОжидаемыйИПодтвержденныйНДСПриобретений.Поступление;
					   Иначе
						   //возврат	
						   Движение.СобытиеНДС = Перечисления.СобытияОжидаемыйИПодтвержденныйНДСПриобретений.Возврат;
					   КонецЕсли;
						   
					   Движение.ДляХозяйственнойДеятельности = ?(СтрокаЗадолженности.НалоговоеНазначение = Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяНеХозДеятельность, Ложь, Истина);
					   Движение.ВидДеятельностиНДС 			 = СтрокаЗадолженности.ВидДеятельностиНДС;
					   Движение.Амортизируется 			 	 = СтрокаЗадолженности.Амортизируется;
					   Движение.СуммаНДСПропорционально 	 = СтрокаЗадолженности.СуммаНДСПропорциональноКредит;
	   	
				   КонецЕсли;
				   
				   Движение.ВидДвижения  			= ВидДвиженияНакопления.Приход;
				   Движение.Период	 				= СтруктураШапкиДокумента.Дата;
				   Движение.Организация 		  	= СтруктураШапкиДокумента.Организация;
				   Движение.ДоговорКонтрагента 		= СтрокаЗадолженности.ДоговорКонтрагента;
  				   Движение.Сделка				    = СтрокаЗадолженности.СделкаНУ;
				   Движение.ВозвратнаяТара	  		= СтрокаЗадолженности.ВозвратнаяТара;
				   Движение.СтавкаНДС	  			= СтрокаЗадолженности.СтавкаНДС;
				   Движение.БазаНДС  				= СтрокаЗадолженности.СуммаВзаиморасчетов - СтрокаЗадолженности.СуммаНДСВал;
				   Движение.СуммаНДС    			= СтрокаЗадолженности.СуммаНДСВал;
				   Движение.КодОперации 			= КодыОпераций.ОжидаемыйНДС;						   
				   Если НЕ СтрокаЗадолженности.НетНалоговойНакладной Тогда
						   
					   // сформируем движение по выписке налоговой
					   ЗаполнитьЗначенияСвойств(ДвижениеВыпискаНН,Движение,,"НомерСтроки");					   
					   ДвижениеВыпискаНН.ВидДвижения = ВидДвиженияНакопления.Расход;
					   ДвижениеВыпискаНН.КодОперации = КодыОпераций.ПодтвержденныйНДС;
						   
				   КонецЕсли;
					   
				  // оставим только те движения, которые имеют смысл:
					   
				  Если  (   ЭтоОплата(СтрокаЗадолженности) И СтрокаЗадолженности.МоментОпределенияБазыНДС = Перечисления.МоментыОпределенияНалоговойБазы.ПоОтгрузке)
					ИЛИ (НЕ ЭтоОплата(СтрокаЗадолженности) И СтрокаЗадолженности.МоментОпределенияБазыНДС = Перечисления.МоментыОпределенияНалоговойБазы.ПоОплате) Тогда
						
					   РегистрОиПНДС.Удалить(Движение);
					   РегистрОиПНДС.Удалить(ДвижениеВыпискаНН);
						   
				   ИначеЕсли СтрокаЗадолженности.НетНалоговойНакладной Тогда
						   
					  РегистрОиПНДС.Удалить(ДвижениеВыпискаНН);
						      
				   КонецЕсли;
						   
			   КонецЕсли; 
			   
	   КонецЕсли;
   
	КонецЦикла;
	
КонецПроцедуры

// Процедура формирует структуру шапки документа и дополнительных полей.
//
Процедура ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента) Экспорт
	
	// Дерево значений, содержащее имена необходимых полей в запросе по шапке.
	Перем ДеревоПолейЗапросаПоШапке;

	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента = ОбщегоНазначенияРед12.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	
	//Занесем в структуру шапки дополнительный параметр для проведения 
	СтруктураШапкиДокумента.Вставить("ЭтоВозврат", Ложь);
	СтруктураШапкиДокумента.Вставить("ВидДоговора",ДоговорКонтрагента.ВидДоговора);
	
	// Заполним по шапке документа дерево параметров, нужных при проведении.
	РеквизитыДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДоговорКонтрагента,"ВедениеВзаиморасчетовНУ,ВедениеВзаиморасчетов,ВалютаВзаиморасчетов,СложныйНалоговыйУчет,ВидДоговора,Организация");
	СтруктураШапкиДокумента.Вставить("ВедениеВзаиморасчетовНУ",РеквизитыДоговора.ВедениеВзаиморасчетовНУ);
	СтруктураШапкиДокумента.Вставить("ВедениеВзаиморасчетов"  ,РеквизитыДоговора.ВедениеВзаиморасчетов);
	СтруктураШапкиДокумента.Вставить("ВалютаВзаиморасчетов"   ,РеквизитыДоговора.ВалютаВзаиморасчетов);
	СтруктураШапкиДокумента.Вставить("СложныйНалоговыйУчет"   ,РеквизитыДоговора.СложныйНалоговыйУчет);
	СтруктураШапкиДокумента.Вставить("ДоговорОрганизация"     ,РеквизитыДоговора.Организация);
	СтруктураШапкиДокумента.Вставить("ВидДоговора"            ,РеквизитыДоговора.ВидДоговора);
	
	
	
	СтруктураШапкиДокумента.Вставить("ЕстьНалогНаПрибыльДо2015", УчетнаяПолитика.ПлательщикНалогаНаПрибыльДо2015(СтруктураШапкиДокумента.Организация,СтруктураШапкиДокумента.Дата));
	СтруктураШапкиДокумента.Вставить("ЕстьНДС", УчетнаяПолитика.ПлательщикНДС(СтруктураШапкиДокумента.Организация,СтруктураШапкиДокумента.Дата));
	СтруктураШапкиДокумента.Вставить("ЕстьЕдиныйНалог", УчетнаяПолитика.ПлательщикЕдиногоНалога(СтруктураШапкиДокумента.Организация,СтруктураШапкиДокумента.Дата));
	
	Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ИзменениеЗадолженности Тогда
		
		// для общности алгоритмов перенесем данные по вспомогательному счету в счет Кт
		СтруктураШапкиДокумента.Вставить("СчетКт",      СтруктураШапкиДокумента.СчетДт);
		СтруктураШапкиДокумента.Вставить("СубконтоКт1", СтруктураШапкиДокумента.СубконтоДт1);
		СтруктураШапкиДокумента.Вставить("СубконтоКт2", СтруктураШапкиДокумента.СубконтоДт2);
		СтруктураШапкиДокумента.Вставить("СубконтоКт3", СтруктураШапкиДокумента.СубконтоДт3);
	
	КонецЕсли;
	
КонецПроцедуры // ПодготовитьСтруктуруШапкиДокумента()

// Процедура формирует таблицы документа.
//
Процедура ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоСуммамДолга, Отказ, Заголовок) Экспорт
	
	// Получим необходимые данные для проведения и проверки заполенения данные по табличной части "Суммы долга".
	СтруктураПолей = Новый Структура;
	
	СтруктураПолей.Вставить("ВидЗадолженности"                        , "ВидЗадолженности");
	СтруктураПолей.Вставить("ДоговорКонтрагента"                      , "ДоговорКонтрагента");
	СтруктураПолей.Вставить("КонтрагентДоговора"                      , "ДоговорКонтрагента.Владелец");
	СтруктураПолей.Вставить("ВалютаВзаиморасчетов"                    , "ДоговорКонтрагента.ВалютаВзаиморасчетов");
	СтруктураПолей.Вставить("ВедениеВзаиморасчетов"                   , "ДоговорКонтрагента.ВедениеВзаиморасчетов");
	СтруктураПолей.Вставить("ВедениеВзаиморасчетовНУ"                 , "ДоговорКонтрагента.ВедениеВзаиморасчетовНУ");
	СтруктураПолей.Вставить("ДоговорОрганизация"                      , "ДоговорКонтрагента.Организация");
	СтруктураПолей.Вставить("ВидДоговора"                             , "ДоговорКонтрагента.ВидДоговора");
	СтруктураПолей.Вставить("СложныйНалоговыйУчет"                    , "ДоговорКонтрагента.СложныйНалоговыйУчет");	
	
	СтруктураПолей.Вставить("Сделка"                				  , "Сделка");
	СтруктураПолей.Вставить("Сумма"              					  , "Сумма");
	СтруктураПолей.Вставить("СуммаВзаиморасчетов"              		  , "СуммаВзаиморасчетов");
	СтруктураПолей.Вставить("СуммаВзаиморасчетовБУ"              	  , "СуммаВзаиморасчетов");
	СтруктураПолей.Вставить("КурсВзаиморасчетов"                      , "КурсВзаиморасчетов");
	СтруктураПолей.Вставить("КратностьВзаиморасчетов"                 , "КратностьВзаиморасчетов");
 	СтруктураПолей.Вставить("СчетОплаты"          					  , "СчетУчетаРасчетов");
	СтруктураПолей.Вставить("СчетАванса"          					  , "СчетУчетаРасчетов");
	
	СтруктураПолей.Вставить("КоррСчет"              				  , "Ссылка.СчетДт");
	СтруктураПолей.Вставить("КоррСубконто1"              			  , "Ссылка.СубконтоДт1");
	СтруктураПолей.Вставить("КоррСубконто2"              			  , "Ссылка.СубконтоДт2");
	СтруктураПолей.Вставить("КоррСубконто3"              			  , "Ссылка.СубконтоДт3");
	
	СтруктураПолей.Вставить("ТипКонтрагента"						  , "ТипКонтрагента");
	
	СтруктураПолей.Вставить("ВозвратнаяТара"          			, "ЗаТару");
	
	СтруктураПолей.Вставить("РасчетыВозврат"          			, "РасчетыВозврат");
	СтруктураПолей.Вставить("СтавкаНДС"				  			, "СтавкаНДС");
	СтруктураПолей.Вставить("СчетУчетаНДС"						, "СчетУчетаНДС");
	СтруктураПолей.Вставить("СчетУчетаНДСПодтвержденный"		, "СчетУчетаНДСПодтвержденный");
	СтруктураПолей.Вставить("СуммаНДС"						  	, "СуммаНДС");
	СтруктураПолей.Вставить("СуммаНДСПропорциональноКредит"		, "СуммаНДСПропорциональноКредит");
	СтруктураПолей.Вставить("НетНалоговойНакладной"				, "НетНалоговойНакладной");
	
	СтруктураПолей.Вставить("СхемаНалоговогоУчета"				, "ДоговорКонтрагента.СхемаНалоговогоУчета");
	СтруктураПолей.Вставить("СхемаНалоговогоУчетаПоТаре"		, "ДоговорКонтрагента.СхемаНалоговогоУчетаПоТаре");
	
	СтруктураПолей.Вставить("НалоговоеНазначение"				, "НалоговоеНазначение");
	СтруктураПолей.Вставить("Амортизируется"     				, "Амортизируется");
	СтруктураПолей.Вставить("ВидДеятельностиНДС"		     	, "НалоговоеНазначение.ВидДеятельностиНДС");
	
	СтруктураПолей.Вставить("СуммаСебестоимостиНУ"     			, "СуммаСебестоимостиНУ");
	
	РезультатЗапросаПоСуммамДолга = ОбщегоНазначенияРед12.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "СуммыДолга", СтруктураПолей);

	// Подготовим таблицы товаров для проведения.
	ТаблицаПоСуммамДолга = ПодготовитьТаблицуСуммДолга(РезультатЗапросаПоСуммамДолга, СтруктураШапкиДокумента);

КонецПроцедуры

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТоварам - результат запроса по табличной части "СуммыДолга",
//  СтруктураШапкиДокумента   - структура, содержащая рексвизиты шапки документа и результаты запроса по шапке
//
// Возвращаемое значение:
//  Сформированная таблиица значений.
//
Функция ПодготовитьТаблицуСуммДолга(РезультатЗапросаПоСуммамДолга, СтруктураШапкиДокумента)

	ТаблицаРасчетов = РезультатЗапросаПоСуммамДолга.Выгрузить();
	
	// Добполнение таблицы расчетов полями.
	
	ТаблицаРасчетов.Колонки.Вставить(1,"Контрагент", 		Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	ТаблицаРасчетов.Колонки.Добавить("ЭтоВозврат", 			Новый ОписаниеТипов("Булево"));
	ТаблицаРасчетов.Колонки.Добавить("ДобавленнаяСтрокаПереносаЗадолженности", Новый ОписаниеТипов("Булево"));
	
	// Заполняем контрагента по значению поля КонтрагентДебитор
	ТаблицаРасчетов.ЗаполнитьЗначения(СтруктураШапкиДокумента.КонтрагентДебитор,"Контрагент");
	СтрокиКредиторки = ТаблицаРасчетов.найтиСтроки(Новый Структура("ВидЗадолженности", Перечисления.ВидыЗадолженности.Кредиторская));

	Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ПроведениеВзаимозачета Тогда
		
		// Контрагент для кредиторской задолженности устанавливается из другого поля
		Для каждого СтрокаКредиторки Из СтрокиКредиторки Цикл
			СтрокаКредиторки.Контрагент = СтруктураШапкиДокумента.КонтрагентКредитор;
		КонецЦикла; 
		
		// Если не используется вспомогательный счет, в качестве субсчета устанавливаем счет 000 для последующей корректировки (объединения)
		// движений по кредиторской и дебиторской задолженностям.
		
		Если не СтруктураШапкиДокумента.ИспользоватьВспомогательныйСчет Тогда
			ТаблицаРасчетов.ЗаполнитьЗначения(ПланыСчетов.Хозрасчетный.Вспомогательный,"КоррСчет");
			ТаблицаРасчетов.ЗаполнитьЗначения(Неопределено, "КоррСубконто1, КоррСубконто2, КоррСубконто3");
		КонецЕсли; 
		
	ИначеЕсли СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ПереносЗадолженности Тогда
		
		
		// Счет переноса для кредиторской задолженности устанавливается из другого поля
		Для каждого СтрокаКредиторки Из СтрокиКредиторки Цикл
			СтрокаКредиторки.КоррСчет = СтруктураШапкиДокумента.СчетКт;
		КонецЦикла; 
			
		ТаблицаРасчетов.ЗаполнитьЗначения(СтруктураШапкиДокумента.КонтрагентКредитор,"КоррСубконто1");
		ТаблицаРасчетов.ЗаполнитьЗначения(СтруктураШапкиДокумента.ДоговорКонтрагента,"КоррСубконто2");
			
		Если  ЗначениеЗаполнено(СтруктураШапкиДокумента.Сделка)
			И (    ТипЗнч(СтруктураШапкиДокумента.Сделка) = Тип("ДокументСсылка.СчетНаОплатуПокупателю")
			   ИЛИ ТипЗнч(СтруктураШапкиДокумента.Сделка) = Тип("ДокументСсылка.СчетНаОплатуПоставщика")) Тогда
			ТаблицаРасчетов.ЗаполнитьЗначения(СтруктураШапкиДокумента.Сделка,	"КоррСубконто3");
		Иначе	
			// При наличии аналитики по документам расчетов в конце документ перенесем из проводки по счету учета
			ТаблицаРасчетов.ЗаполнитьЗначения(СтруктураШапкиДокумента.Ссылка,	"КоррСубконто3");
		КонецЕсли;
		
	ИначеЕсли  СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.СписаниеЗадолженности Тогда
		
		Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыльДо2015 Тогда
			
			Если СтруктураШапкиДокумента.СписыватьИзРезерваСомнительныхДолгов Тогда
				Для каждого СтрокаРасчетов Из ТаблицаРасчетов Цикл
					СтрокаРасчетов.КоррСчет = СтруктураШапкиДокумента.СчетРезерваСомнительныхДолгов;
					СтрокаРасчетов.КоррСубконто1 = Неопределено;
					СтрокаРасчетов.КоррСубконто2 = Неопределено;
					СтрокаРасчетов.КоррСубконто3 = Неопределено;
				КонецЦикла; 
			КонецЕсли;
			
		КонецЕсли;
		
		// Счет и аналитику списания для кредиторской задолженности устанавливается из другого поля
		Для каждого СтрокаКредиторки Из СтрокиКредиторки Цикл
			СтрокаКредиторки.КоррСчет = СтруктураШапкиДокумента.СчетКт;
			СтрокаКредиторки.КоррСубконто1 = СтруктураШапкиДокумента.СубконтоКт1;
			СтрокаКредиторки.КоррСубконто2 = СтруктураШапкиДокумента.СубконтоКт2;
			СтрокаКредиторки.КоррСубконто3 = СтруктураШапкиДокумента.СубконтоКт3;
		КонецЦикла; 
		
	КонецЕсли;
	
	// Определим вид погашения задолженности - возврат оплаты или непосредственно погашение.
	Для каждого СтрокаРасчетов Из ТаблицаРасчетов Цикл
		
		Если    НЕ СтрокаРасчетов.НалоговоеНазначение = Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_Пропорционально
			ИЛИ НЕ СтрокаРасчетов.ТипКонтрагента = Перечисления.СтатусыКонтрагентов.Поставщик Тогда
		
			СтрокаРасчетов.СуммаНДСПропорциональноКредит = 0;	
		
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СтрокаРасчетов.Сделка) Тогда
		
			СтрокаРасчетов.Сделка = Неопределено;
		
		КонецЕсли;
		
		Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ИзменениеЗадолженности Тогда
			// по БУ задолженность будет формирвоваться метотом "как по оплате", поэтому определим в каких случаях у нас будет "возврат оплаты"
			Если  СтрокаРасчетов.ВидЗадолженности = Перечисления.ВидыЗадолженности.Дебиторская 
				И СтрокаРасчетов.ТипКонтрагента = Перечисления.СтатусыКонтрагентов.Покупатель тогда
				СтрокаРасчетов.ЭтоВозврат = Истина;
			ИначеЕсли СтрокаРасчетов.ВидЗадолженности = Перечисления.ВидыЗадолженности.Кредиторская
				    И СтрокаРасчетов.ТипКонтрагента = Перечисления.СтатусыКонтрагентов.Поставщик Тогда
				СтрокаРасчетов.ЭтоВозврат = Истина;
			КонецЕсли; 
		Иначе	
			// по БУ задолженность будет погашаться метотом "как по оплате", поэтому определим в каких случаях у нас будет "возврат оплаты"
			Если  СтрокаРасчетов.ВидЗадолженности = Перечисления.ВидыЗадолженности.Дебиторская 
				И СтрокаРасчетов.ТипКонтрагента = Перечисления.СтатусыКонтрагентов.Поставщик тогда
				//Это возврат от поставщика
				СтрокаРасчетов.ЭтоВозврат = Истина;
			ИначеЕсли СтрокаРасчетов.ВидЗадолженности = Перечисления.ВидыЗадолженности.Кредиторская
				    И СтрокаРасчетов.ТипКонтрагента = Перечисления.СтатусыКонтрагентов.Покупатель Тогда
				//Это возврат покупателю
				СтрокаРасчетов.ЭтоВозврат = Истина;
			КонецЕсли; 

		КонецЕсли; 
		
	КонецЦикла;
	
	// Дополним таблицу расчетов полями валютной сумм (для отработки стандартных механизмов движения денег)
	ТаблицаРасчетов.Колонки.Добавить("ГривневаяСумма", ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаРасчетов.Колонки.Добавить("ВалютнаяСумма", ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповЧисла(15,2));
	
	ТаблицаРасчетов.ЗагрузитьКолонку(ТаблицаРасчетов.ВыгрузитьКолонку("СуммаВзаиморасчетов"),"ВалютнаяСумма");
	
	ТаблицаРасчетов.ЗагрузитьКолонку(ТаблицаРасчетов.ВыгрузитьКолонку("Сумма"),"ГривневаяСумма");
	
	ТаблицаРасчетов.Колонки.Добавить("МоментОпределенияБазыНДС", Новый ОписаниеТипов("ПеречислениеСсылка.МоментыОпределенияНалоговойБазы"));
	
	ТаблицаРасчетов.Колонки.Добавить("СделкаНУ");
	Для каждого СтрокаРасчетов Из ТаблицаРасчетов Цикл
		Если ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ВводНачальныхОстатков Тогда
		
			СтрокаРасчетов.СделкаНУ = НалоговыйУчет.ОпределитьСделкуНалоговыйУчет(СтрокаРасчетов, ?(ЗначениеЗаполнено(СтрокаРасчетов.Сделка), СтрокаРасчетов.Сделка, Ссылка), СтрокаРасчетов.Сделка);  
			
		Иначе	
			
			СтрокаРасчетов.СделкаНУ = НалоговыйУчет.ОпределитьСделкуНалоговыйУчет(СтрокаРасчетов, Ссылка,СтрокаРасчетов.Сделка);  
		
		КонецЕсли;
		
	КонецЦикла;
	
	ТаблицаРасчетов.Колонки.Добавить("СуммаНДСРегл", ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаРасчетов.Колонки.Добавить("СуммаНДСВал", ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповЧисла(15,2));
	
	ТаблицаРасчетов.Колонки.Добавить("ПроводкиСуммаНДС", ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповЧисла(15,2));
	
	//определим имеется ли налоговый кредит по данной операции, и таким образом проводка по счету НДС.
	Для каждого СтрокаРасчетов Из ТаблицаРасчетов Цикл
		
		СтрокаРасчетов.СуммаНДСРегл = СтрокаРасчетов.СуммаНДС;
		
		Если НЕ ВалютаДокумента = мВалютаРегламентированногоУчета   Тогда
			
			СтрокаРасчетов.СуммаНДСВал  = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаРасчетов.СуммаНДС, 
											СтруктураШапкиДокумента.ВалютаРегламентированногоУчета,
											СтруктураШапкиДокумента.ВалютаДокумента,
											1,
											СтруктураШапкиДокумента.КурсДокумента, 
											1,
											СтруктураШапкиДокумента.КратностьДокумента);
										
		Иначе	
			
			СтрокаРасчетов.СуммаНДСВал = СтрокаРасчетов.СуммаНДСРегл;
			
		КонецЕсли;											
										
		Если СтрокаРасчетов.ВозвратнаяТара ИЛИ ( СтрокаРасчетов.ТипКонтрагента = Перечисления.СтатусыКонтрагентов.Поставщик  И НЕ УчетНДС.ЕстьПравоНаНалоговыйКредит(СтрокаРасчетов.НалоговоеНазначение)) Тогда
		
			СтрокаРасчетов.ПроводкиСуммаНДС = 0;	
			
		Иначе
			
			Если  СтрокаРасчетов.НалоговоеНазначение = Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_Пропорционально
				И СтрокаРасчетов.ТипКонтрагента = Перечисления.СтатусыКонтрагентов.Поставщик Тогда
				
				СтрокаРасчетов.ПроводкиСуммаНДС = СтрокаРасчетов.СуммаНДСПропорциональноКредит;	
				
			Иначе	
				
				СтрокаРасчетов.ПроводкиСуммаНДС    = СтрокаРасчетов.СуммаНДСРегл;	
				
			КонецЕсли;
			

		КонецЕсли;		
		
		Если СтрокаРасчетов.ТипКонтрагента = Перечисления.СтатусыКонтрагентов.Поставщик Тогда
			
			Если СтрокаРасчетов.ВозвратнаяТара Тогда
				СтрокаРасчетов.МоментОпределенияБазыНДС = СтрокаРасчетов.СхемаНалоговогоУчетаПоТаре.МоментОпределенияБазыНДСПоПокупкам;
			Иначе//товары	
				СтрокаРасчетов.МоментОпределенияБазыНДС = СтрокаРасчетов.СхемаНалоговогоУчета.МоментОпределенияБазыНДСПоПокупкам;
			КонецЕсли;
			
		Иначе// покупатель	
			
			Если СтрокаРасчетов.ВозвратнаяТара Тогда
				СтрокаРасчетов.МоментОпределенияБазыНДС = СтрокаРасчетов.СхемаНалоговогоУчетаПоТаре.МоментОпределенияБазыНДСПоПродажам;
			Иначе//товары	
				СтрокаРасчетов.МоментОпределенияБазыНДС = СтрокаРасчетов.СхемаНалоговогоУчета.МоментОпределенияБазыНДСПоПродажам;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТаблицаРасчетов;    

КонецФункции // ПодготовитьТаблицуСуммДолга()

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизтов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - структура, содержащая рексвизиты шапки документа и результаты запроса по шапке
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, ТаблицаПоСуммамДолга, Отказ, Заголовок, МассивНепроверяемыхРеквизитов)
	
	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура();
	Если СтруктураШапкиДокумента.ВидОперации = перечисления.ВидыОперацийКорректировкаДолга.ПроведениеВзаимозачета Тогда
		СтруктураОбязательныхПолей.Вставить("КонтрагентДебитор");
		СтруктураОбязательныхПолей.Вставить("КонтрагентКредитор");
		Если СтруктураШапкиДокумента.ИспользоватьВспомогательныйСчет Тогда
			СтруктураОбязательныхПолей.Вставить("СчетДт", НСтр("ru='Не заполнено значение реквизита ""Вспомогательный счет для проведения взаиморасчета""';uk='Не заповнене значення реквізиту ""Допоміжний рахунок для проведення взаєморозрахунку""'"));
		КонецЕсли; 
	ИначеЕсли СтруктураШапкиДокумента.ВидОперации = перечисления.ВидыОперацийКорректировкаДолга.ВводНачальныхОстатков Тогда
		СтруктураОбязательныхПолей.Вставить("КонтрагентДебитор");
		СтруктураОбязательныхПолей.Вставить("СчетДт", НСтр("ru='Не заполнено значение реквизита ""Вспомогательный счет для проведения ввода остатков""';uk='Не заповнене значення реквізиту ""Допоміжний рахунок для проведення введення залишків""'"));
	ИначеЕсли СтруктураШапкиДокумента.ВидОперации = перечисления.ВидыОперацийКорректировкаДолга.ИзменениеЗадолженности Тогда
		СтруктураОбязательныхПолей.Вставить("КонтрагентДебитор");
		СтруктураОбязательныхПолей.Вставить("СчетДт", НСтр("ru='Не заполнено значение реквизита ""Корреспондирующий счет""';uk='Не заповнене значення реквізиту ""Кореспондуючий рахунок""'"));
		
		Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыльДо2015 Тогда
			
			Если СчетДт.НалоговыйУчет = Истина Тогда
				
				СтруктураОбязательныхПолей.Вставить("НалоговоеНазначениеДоходовИЗатрат");	

				ЕстьСубконтоСтатьяЗатратДоходов = Ложь;
				Для НомСубконто = 1 По 3 Цикл
					Если СчетДт.ВидыСубконто.Количество()<НомСубконто Тогда
						Прервать;
					КонецЕсли;
					
					ВидСубконто = СчетДт.ВидыСубконто[НомСубконто-1].ВидСубконто;
					Если     ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат
						 ИЛИ ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиДоходов
						 ИЛИ ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиНеоперационныхРасходов Тогда
						ЕстьСубконтоСтатьяЗатратДоходов = Истина;
						Прервать;
					КонецЕсли;

				КонецЦикла;
				
				Если ЕстьСубконтоСтатьяЗатратДоходов Тогда
					СтруктураОбязательныхПолей.Вставить("СубконтоДт" + НомСубконто, НСтр("ru='Не заполнено значение субконто: ';uk='Не заповнене значення субконто: '") + ВидСубконто); 	
				КонецЕсли;

			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		СтруктураОбязательныхПолей.Вставить("КонтрагентДебитор",НСтр("ru='Не заполнено значение реквизита ""Контрагент для списания задолженности""';uk='Не заповнене значення реквізиту ""Контрагент для списання заборгованості""'"));
		Если СтруктураШапкиДокумента.ВидОперации = перечисления.ВидыОперацийКорректировкаДолга.ПереносЗадолженности Тогда
			
			СтруктураОбязательныхПолей.Вставить("КонтрагентКредитор",НСтр("ru='Не заполнено значение реквизита ""Контрагент для зачисления задолженности""';uk='Не заповнене значення реквізиту ""Контрагент для зарахування заборгованості""'"));
			Если  СтруктураШапкиДокумента.ЕстьНДС Тогда
				СтруктураОбязательныхПолей.Вставить("ТипКонтрагента",НСтр("ru='Не заполнено значение реквизита ""Тип контрагента для зачисления задолженности""';uk='Не заповнене значення реквізиту ""Тип контрагента для зарахування заборгованості""'"));
			КонецЕсли;
			
			Если не ТаблицаПоСуммамДолга.Найти(Перечисления.ВидыЗадолженности.Дебиторская,"ВидЗадолженности") = Неопределено Тогда
				СтруктураОбязательныхПолей.Вставить("СчетДт",НСтр("ru='Не заполнено значение реквизита ""Счет зачисления дебиторской задолженности""';uk='Не заповнене значення реквізиту ""Рахунок зарахування дебіторської заборгованості""'"));
			КонецЕсли; 
			Если не ТаблицаПоСуммамДолга.Найти(Перечисления.ВидыЗадолженности.Кредиторская,"ВидЗадолженности") = Неопределено Тогда
				СтруктураОбязательныхПолей.Вставить("СчетКт",НСтр("ru='Не заполнено значение реквизита ""Счет зачисления кредиторской задолженности""';uk='Не заповнене значення реквізиту ""Рахунок зарахування кредиторської заборгованості""'"));
			КонецЕсли;
			
			Если СтруктураШапкиДокумента.ЕстьНДС Тогда
				 СтруктураОбязательныхПолей.Вставить("СчетУчетаНДС");
				 СтруктураОбязательныхПолей.Вставить("СчетУчетаНДСПодтвержденный");
			КонецЕсли;
			
		ИначеЕсли СтруктураШапкиДокумента.ВидОперации = перечисления.ВидыОперацийКорректировкаДолга.СписаниеЗадолженности Тогда
			
			Если  СтруктураШапкиДокумента.ЕстьНалогНаПрибыльДо2015 Тогда
				
				СтруктураОбязательныхПолей.Вставить("НалоговоеНазначениеДоходовИЗатрат");
				Если НЕ НеСторнироватьДоходыСебестоимостьВНУ Тогда
					СтруктураОбязательныхПолей.Вставить("ПараметрыСписанияСебестоимостиНУ");
				КонецЕсли;
				
				Если СписыватьИзРезерваСомнительныхДолгов Тогда
					
					СтруктураОбязательныхПолей.Вставить("СчетРезерваСомнительныхДолгов");
					
					Если ЗначениеЗаполнено(СчетДт) Тогда
					
						ЕстьСубконтоСтатьяЗатратДоходов = Ложь;
						Для НомСубконто = 1 По 3 Цикл
							Если СчетДт.ВидыСубконто.Количество()<НомСубконто Тогда
								Прервать;
							КонецЕсли;
							
							ВидСубконто = СчетДт.ВидыСубконто[НомСубконто-1].ВидСубконто;
							Если     ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат
								 ИЛИ ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиДоходов
								 ИЛИ ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиНеоперационныхРасходов Тогда
								ЕстьСубконтоСтатьяЗатратДоходов = Истина;
								Прервать;
							КонецЕсли;

						КонецЦикла;
						
						Если ЕстьСубконтоСтатьяЗатратДоходов Тогда
							СтруктураОбязательныхПолей.Вставить("СубконтоДт" + НомСубконто, НСтр("ru='Не заполнено значение субконто: ';uk='Не заповнене значення субконто: '") + ВидСубконто); 	
						КонецЕсли;

					КонецЕсли;
					
				КонецЕсли;
				
				Если ЗначениеЗаполнено(СчетКт) Тогда
				
					ЕстьСубконтоСтатьяЗатратДоходов = Ложь;
					Для НомСубконто = 1 По 3 Цикл
						Если СчетКт.ВидыСубконто.Количество()<НомСубконто Тогда
							Прервать;
						КонецЕсли;
						
						ВидСубконто = СчетКт.ВидыСубконто[НомСубконто-1].ВидСубконто;
						Если     ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат
							 ИЛИ ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиДоходов
							 ИЛИ ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиНеоперационныхРасходов Тогда
							ЕстьСубконтоСтатьяЗатратДоходов = Истина;
							Прервать;
						КонецЕсли;

					КонецЦикла;
					
					Если ЕстьСубконтоСтатьяЗатратДоходов Тогда
						СтруктураОбязательныхПолей.Вставить("СубконтоКт" + НомСубконто, НСтр("ru='Не заполнено значение субконто: ';uk='Не заповнене значення субконто: '") + ВидСубконто); 	
					КонецЕсли;

				КонецЕсли;
				
			КонецЕсли;

		КонецЕсли; 
	КонецЕсли; 
	
	Если НЕ СтруктураОбязательныхПолей.Свойство("КонтрагентДебитор") Тогда МассивНепроверяемыхРеквизитов.Добавить("КонтрагентДебитор"); КонецЕсли;  
	Если НЕ СтруктураОбязательныхПолей.Свойство("КонтрагентКредитор") Тогда МассивНепроверяемыхРеквизитов.Добавить("КонтрагентКредитор"); КонецЕсли;  
	Если НЕ СтруктураОбязательныхПолей.Свойство("СчетДт") Тогда МассивНепроверяемыхРеквизитов.Добавить("СчетДт"); КонецЕсли;  
	Если НЕ СтруктураОбязательныхПолей.Свойство("СубконтоДт1") Тогда МассивНепроверяемыхРеквизитов.Добавить("СубконтоДт1"); КонецЕсли;  
	Если НЕ СтруктураОбязательныхПолей.Свойство("СубконтоДт2") Тогда МассивНепроверяемыхРеквизитов.Добавить("СубконтоДт2"); КонецЕсли;  
	Если НЕ СтруктураОбязательныхПолей.Свойство("СубконтоДт3") Тогда МассивНепроверяемыхРеквизитов.Добавить("СубконтоДт3"); КонецЕсли;  
	Если НЕ СтруктураОбязательныхПолей.Свойство("СчетКт") Тогда МассивНепроверяемыхРеквизитов.Добавить("СчетКт"); КонецЕсли;  
	Если НЕ СтруктураОбязательныхПолей.Свойство("СубконтоКт1") Тогда МассивНепроверяемыхРеквизитов.Добавить("СубконтоКт1"); КонецЕсли;  
	Если НЕ СтруктураОбязательныхПолей.Свойство("СубконтоКт2") Тогда МассивНепроверяемыхРеквизитов.Добавить("СубконтоКт2"); КонецЕсли;  
	Если НЕ СтруктураОбязательныхПолей.Свойство("СубконтоКт3") Тогда МассивНепроверяемыхРеквизитов.Добавить("СубконтоКт3"); КонецЕсли;  
	Если НЕ СтруктураОбязательныхПолей.Свойство("ТипКонтрагента") Тогда МассивНепроверяемыхРеквизитов.Добавить("ТипКонтрагента"); КонецЕсли;  
	Если НЕ СтруктураОбязательныхПолей.Свойство("СчетУчетаНДС") Тогда МассивНепроверяемыхРеквизитов.Добавить("СчетУчетаНДС"); КонецЕсли;  
	Если НЕ СтруктураОбязательныхПолей.Свойство("СчетУчетаНДСПодтвержденный") Тогда МассивНепроверяемыхРеквизитов.Добавить("СчетУчетаНДСПодтвержденный"); КонецЕсли;  
	Если НЕ СтруктураОбязательныхПолей.Свойство("НалоговоеНазначениеДоходовИЗатрат") Тогда МассивНепроверяемыхРеквизитов.Добавить("НалоговоеНазначениеДоходовИЗатрат"); КонецЕсли;  
	Если НЕ СтруктураОбязательныхПолей.Свойство("СчетРезерваСомнительныхДолгов") Тогда МассивНепроверяемыхРеквизитов.Добавить("СчетРезерваСомнительныхДолгов"); КонецЕсли;  
	Если НЕ СтруктураОбязательныхПолей.Свойство("ПараметрыСписанияСебестоимостиНУ") Тогда МассивНепроверяемыхРеквизитов.Добавить("ПараметрыСписанияСебестоимостиНУ"); КонецЕсли;  
	
	
	ТипПоставщик  = Перечисления.СтатусыКонтрагентов.Поставщик;
	ТипПокупатель = Перечисления.СтатусыКонтрагентов.Покупатель;
	ДоговорСПоставщиком = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком;
	ДоговорСПокупателем = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем;
	
	Если  СтруктураШапкиДокумента.ВидОперации = перечисления.ВидыОперацийКорректировкаДолга.ПереносЗадолженности 
		И СтруктураШапкиДокумента.ЕстьНДС 
		И (   (СтруктураШапкиДокумента.ВидДоговора = ДоговорСПоставщиком и НЕ СтруктураШапкиДокумента.ТипКонтрагента = ТипПоставщик)
		   ИЛИ(СтруктураШапкиДокумента.ВидДоговора = ДоговорСПокупателем и НЕ СтруктураШапкиДокумента.ТипКонтрагента = ТипПокупатель))	Тогда
		   
		СтрокаСообщения = НСтр("ru='Тип контрагента для зачисления задолженности не соответствует виду договора этого контрагента!';uk='Тип контрагента для зарахування заборгованості не відповідає виду договору цього контрагента!'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения, ЭтотОбъект, "ДоговорКонтрагента", , Отказ);
		
	КонецЕсли; 
	
	Если СтруктураШапкиДокумента.ВидОперации = перечисления.ВидыОперацийКорректировкаДолга.ПереносЗадолженности
		и НЕ ЗначениеЗаполнено(СтруктураШапкиДокумента.ДоговорКонтрагента)Тогда

		СтрокаСообщения = НСтр("ru='Не заполнен договор для зачисления задолженности!';uk='Не заповнений договір для зарахування заборгованості!'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения, ЭтотОбъект, "ДоговорКонтрагента", , Отказ);
	КонецЕсли; 

	
КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Проверяет правильность заполнения строк табличной части "СуммыДолга".
//
// Параметры:
// Параметры: 
//  ТаблицаПоСуммамДолга    - таблица значений, содержащая данные для проведения и проверки ТЧ СуммыДолга
//  СтруктураШапкиДокумента - структура, содержащая рексвизиты шапки документа и результаты запроса по шапке
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиСуммыДолга(ТаблицаПоСуммамДолга, СтруктураШапкиДокумента, Отказ, Заголовок,МассивНепроверяемыхРеквизитов)

	ИмяТабличнойЧасти = "СуммыДолга";

	// Укажем, что надо проверить:
	Если НЕ СтруктураШапкиДокумента.ЕстьНДС Тогда
		МассивНепроверяемыхРеквизитов.Добавить("РасчетыВозврат");
	КонецЕсли;
	
	
	
	//Организация в документе должна совпадать с организацией, указанной в договорах взаиморасчетов.
	УправлениеВзаиморасчетами.ПроверитьОрганизациюДоговораВзаиморасчетовВТабличнойЧасти(ЭтотОбъект, ИмяТабличнойЧасти, ТаблицаПоСуммамДолга, Отказ, Заголовок);

	
	// Если проведение взаимозачета - проверим на совпадение суммы дебиторской и кредиторской задолженности. 
	// Взаимозачет проводится только при полном совпадении сумм
	Если СтруктураШапкиДокумента.ВидОперации = перечисления.ВидыОперацийКорректировкаДолга.ПроведениеВзаимозачета Тогда
		
		ТабСумм         = ТаблицаПоСуммамДолга.Скопировать();
		
		Если СтруктураШапкиДокумента.ВалютаДокумента = СтруктураШапкиДокумента.ВалютаРегламентированногоУчета или СтруктураШапкиДокумента.ВалютаДокумента = Справочники.Валюты.ПустаяСсылка() Тогда
			ТабСумм.Свернуть("ВидЗадолженности","Сумма");
		Иначе
			ТабСумм.Свернуть("ВидЗадолженности","СуммаВзаиморасчетов");
			ТабСумм.Колонки.СуммаВзаиморасчетов.Имя = "Сумма";
		КонецЕсли; 
		
		СуммаДеб  = 0;
		СуммаКред = 0;
		
		Для каждого СтрокаСумм Из ТабСумм Цикл
			Если  СтрокаСумм.ВидЗадолженности = Перечисления.ВидыЗадолженности.Дебиторская Тогда
				СуммаДеб  = СтрокаСумм.Сумма;
			ИначеЕсли  СтрокаСумм.ВидЗадолженности = Перечисления.ВидыЗадолженности.Кредиторская Тогда
				СуммаКред = СтрокаСумм.Сумма;
			КонецЕсли; 
		КонецЦикла; 
		
		Разница = СуммаДеб - СуммаКред;
		
		Если не Разница =0  Тогда
			ТекстСообщения = НСтр("ru='Не совпадают суммы дебиторской и кредиторской задолженности при проведении взаимозачета. Взаимозачет не может быть проведен.';uk='Не збігаються суми дебіторської й кредиторської заборгованості при проведенні взаємозаліку. Взаємозалік не може бути проведений.'");
			ТекстСообщения = ТекстСообщения + Символы.ПС+
							 НСтр("ru='Дебиторская задолженность: ';uk='Дебіторська заборгованість: '") + Формат(СуммаДеб, "ЧЦ=15; ЧДЦ=2; ЧН=0,00")+" " +Строка(СтруктураШапкиДокумента.ВалютаДокумента);
			ТекстСообщения = ТекстСообщения + Символы.ПС+
							 НСтр("ru='Кредиторская задолженность: ';uk='Кредиторська заборгованість: '") + Формат(СуммаКред, "ЧЦ=15; ЧДЦ=2; ЧН=-")+" "+Строка(СтруктураШапкиДокумента.ВалютаДокумента);
			ТекстСообщения = ТекстСообщения + Символы.ПС+
							 НСтр("ru='Разница: ';uk='Різниця: '") + Формат(Разница, "ЧЦ=15;ЧДЦ=2")+Строка(СтруктураШапкиДокумента.ВалютаДокумента);
							 
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, , , Отказ);
		КонецЕсли; 
	КонецЕсли;
	
	ТипПоставщик  = Перечисления.СтатусыКонтрагентов.Поставщик;
	ТипПокупатель = Перечисления.СтатусыКонтрагентов.Покупатель;
			
	ДоговорСПоставщиком = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком;
	ДоговорСПокупателем = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем;
	ДоговорПрочее	    = Перечисления.ВидыДоговоровКонтрагентов.Прочее;

	Если  СтруктураШапкиДокумента.ЕстьНДС Тогда
		
		Для каждого СтрокаТаблицы Из ТаблицаПоСуммамДолга Цикл
			
			Префикс = "СуммыДолга[%1].";
			Префикс = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Префикс, Формат(СтрокаТаблицы.НомерСтроки - 1, "ЧН=0; ЧГ="));
			ИмяСписка = ?(СтрокаТаблицы.ВидЗадолженности = Перечисления.ВидыЗадолженности.Кредиторская,"Кредиторская задолженность","Дебиторкая задолженность");
			
			СтрокаНачалаСообщенияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='В строке номер ""%1"" табличной части ""Суммы долга"": ';uk='У рядку номер ""%1"" табличної частини ""Суми боргу"": '"), СокрЛП(СтрокаТаблицы.НомерСтроки));
			
			Если     СтрокаТаблицы.СложныйНалоговыйУчет
				И (    СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ВводНачальныхОстатков
				   ИЛИ СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ИзменениеЗадолженности)
				И НЕ (СтрокаТаблицы.ВозвратнаяТара И СтрокаТаблицы.РасчетыВозврат = Перечисления.РасчетыВозврат.Возврат)
				И НЕ СтрокаТаблицы.ВидДоговора = ДоговорПрочее Тогда
				
				Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.НалоговоеНазначение) 
					И СтруктураШапкиДокумента.ЕстьНДС
					И СтрокаТаблицы.ТипКонтрагента = ТипПоставщик Тогда
					ТекстСообщения = ОбщегоНазначенияБПКлиентСервер.ПолучитьТекстСообщения("Колонка", "Заполнение", 
						НСтр("ru='Налоговое назначение (НДС)';uk='Податкове призначення (ПДВ)'"),
						СтрокаТаблицы.НомерСтроки, ИмяСписка,
					);
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Префикс+"НалоговоеНазначение","Объект", Отказ);
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.СтавкаНДС) Тогда
					ТекстСообщения = ОбщегоНазначенияБПКлиентСервер.ПолучитьТекстСообщения("Колонка", "Заполнение", 
						НСтр("ru='Ставка НДС';uk='Ставка ПДВ'"),
						СтрокаТаблицы.НомерСтроки, ИмяСписка,
					);
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Префикс+"СтавкаНДС","Объект", Отказ);
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.СчетУчетаНДС) и СтрокаТаблицы.СуммаНДС <> 0 Тогда
					ТекстСообщения = ОбщегоНазначенияБПКлиентСервер.ПолучитьТекстСообщения("Колонка", "Заполнение", 
						НСтр("ru='Счет учета НДС (неподтвержденный)';uk='Рахунок ПДВ (непідтверджений)'"),
						СтрокаТаблицы.НомерСтроки, ИмяСписка,
					);
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Префикс+"СчетУчетаНДС","Объект", Отказ);
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.СчетУчетаНДСПодтвержденный) и СтрокаТаблицы.СуммаНДС <> 0 Тогда
					ТекстСообщения = ОбщегоНазначенияБПКлиентСервер.ПолучитьТекстСообщения("Колонка", "Заполнение", 
						НСтр("ru='Счет  НДС кредита (обязательств)';uk=""Рахунок ПДВ кредиту (зобов'язань)"""),
						СтрокаТаблицы.НомерСтроки, ИмяСписка,
					);
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, "СчетУчетаНДСПодтвержденный","Объект", Отказ);
				КонецЕсли;
					
			ИначеЕсли  НЕ  СтрокаТаблицы.СложныйНалоговыйУчет Тогда
				
				Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.НалоговоеНазначение) 
					И СтруктураШапкиДокумента.ЕстьНДС
					И СтрокаТаблицы.ТипКонтрагента = ТипПоставщик Тогда
					ТекстСообщения = ОбщегоНазначенияБПКлиентСервер.ПолучитьТекстСообщения("Колонка", "Заполнение", 
						НСтр("ru='Налоговое назначение';uk='Податкове призначення'"),
						СтрокаТаблицы.НомерСтроки, ИмяСписка,
					);
 					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Префикс+"НалоговоеНазначение","Объект", Отказ);
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.СтавкаНДС) Тогда
					ТекстСообщения = ОбщегоНазначенияБПКлиентСервер.ПолучитьТекстСообщения("Колонка", "Заполнение", 
						НСтр("ru='Ставка НДС';uk='Ставка ПДВ'"),
						СтрокаТаблицы.НомерСтроки, ИмяСписка,
					);
 					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Префикс+"СтавкаНДС","Объект" , Отказ);
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.СчетУчетаНДС) И НЕ СтрокаТаблицы.ВозвратнаяТара Тогда
					ТекстСообщения = ОбщегоНазначенияБПКлиентСервер.ПолучитьТекстСообщения("Колонка", "Заполнение", 
						НСтр("ru='Счет учета НДС';uk='Рахунок ПДВ'"),
						СтрокаТаблицы.НомерСтроки, ИмяСписка,
					);
 					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Префикс+"СчетУчетаНДС","Объект" , Отказ);
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.СчетУчетаНДСПодтвержденный) И НЕ СтрокаТаблицы.ВозвратнаяТара Тогда
					ТекстСообщения = ОбщегоНазначенияБПКлиентСервер.ПолучитьТекстСообщения("Колонка", "Заполнение", 
						НСтр("ru='Счет НДС кредита (обязательств)';uk=""Рахунок ПДВ кредиту (зобов'язань)"""),
						СтрокаТаблицы.НомерСтроки, ИмяСписка,
					);
 					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Префикс+"СчетУчетаНДСПодтвержденный","Объект" , Отказ);
				КонецЕсли;
					
			КонецЕсли;
			
			Если    (СтрокаТаблицы.ВидДоговора = ДоговорСПоставщиком и НЕ СтрокаТаблицы.ТипКонтрагента = ТипПоставщик)
				ИЛИ (СтрокаТаблицы.ВидДоговора = ДоговорСПокупателем и НЕ СтрокаТаблицы.ТипКонтрагента = ТипПокупатель)	Тогда
				ТекстСообщения = ОбщегоНазначенияБПКлиентСервер.ПолучитьТекстСообщения("Колонка", "Корректность", 
						НСтр("ru='Договор';uk='Договір'"),
						СтрокаТаблицы.НомерСтроки, ИмяСписка,
						НСтр("ru=' значение реквизита ""тип контрагента"" не соответствует виду договора!';uk=' значення реквізиту ""тип контрагента"" не відповідає виду договору!'")
					);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Префикс+"ДоговорКонтрагента","Объект", Отказ);
			КонецЕсли;

		КонецЦикла;
		
	КонецЕсли;	
	
	Если   СтруктураШапкиДокумента.ЕстьНДС 
		И  СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ПереносЗадолженности
		И ЗначениеЗаполнено(ТипКонтрагента) Тогда
		
		Для каждого СтрокаТаблицы Из ТаблицаПоСуммамДолга Цикл

			Если ЗначениеЗаполнено(СтрокаТаблицы.ТипКонтрагента)
				И НЕ (СтрокаТаблицы.ТипКонтрагента = ТипКонтрагента) Тогда
				
				//Если ЗначениеЗаполнено(Заголовок) Тогда
				//	Сообщить(Заголовок);
				//	Заголовок = "";
				//КонецЕсли;
				//
				ТекстСообщения = НСтр("ru='В одной из строк документа указан тип контрагента, который не совпадает с типом контрагента-получателя!
|Проводки по налоговым регистрам для контрагента-получателя будут сформированы инверсно (""как возврат"").';uk='В одному з рядків документа вказаний тип контрагента, що не співпадає з типом контрагента-отримувача!
|Проведення по податковим регистрам для контрагента-отримувача будуть сформовані інверсно (""як повернення"").'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, , , );
				
				Прервать	
			
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;	
	
КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиСуммыДолга()

// По результату запроса по шапке документа формируем движения по регистрам.
//
// Параметры: 
//  РежимПроведения           - режим проведения документа (оперативный или неоперативный),
//  СтруктураШапкиДокумента   - структура, содержащая рексвизиты шапки документа и результаты запроса по шапке
//  ТаблицаПоСуммамДолга          - таблица значений, содержащая данные для проведения и проверки табличной части "СуммыДолга"
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоСуммамДолга, Отказ, Заголовок);

	Если ТаблицаПоСуммамДолга.Количество()=0 Тогда
		 Возврат;
	КонецЕсли;  
	
	Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ВводНачальныхОстатков Тогда
	
		ДвиженияПоВводуНачальныхОстатков(СтруктураШапкиДокумента, ТаблицаПоСуммамДолга, Отказ, Заголовок);	
		
	Иначе
		
		ТаблицаДебиторскойЗадолженности = ТаблицаПоСуммамДолга.Скопировать();
		ТаблицаКредиторскойЗадолженности = ТаблицаПоСуммамДолга.Скопировать();

		ВидЗадолженностиДебиторская = Перечисления.ВидыЗадолженности.Дебиторская;
		ВидЗадолженностиКредиторская = Перечисления.ВидыЗадолженности.Кредиторская;
		
		Счетчик = 0;
		Пока Счетчик < ТаблицаДебиторскойЗадолженности.Количество() Цикл

			СтрокаТаблицы = ТаблицаДебиторскойЗадолженности.Получить(Счетчик);
			Если не СтрокаТаблицы.ВидЗадолженности = ВидЗадолженностиДебиторская Тогда
				 ТаблицаДебиторскойЗадолженности.Удалить(СтрокаТаблицы);
			Иначе
				Счетчик = Счетчик + 1;
			КонецЕсли;

		КонецЦикла;

		Счетчик = 0;
		Пока Счетчик < ТаблицаКредиторскойЗадолженности.Количество() Цикл

			СтрокаТаблицы = ТаблицаКредиторскойЗадолженности.Получить(Счетчик);
			Если не СтрокаТаблицы.ВидЗадолженности = ВидЗадолженностиКредиторская Тогда
				 ТаблицаКредиторскойЗадолженности.Удалить(СтрокаТаблицы);
			Иначе
				Счетчик = Счетчик + 1;
			КонецЕсли;

		КонецЦикла;

		// нужно изменить дебеторскую/кредиторскую задолженность для вида операции "изменение (фомрирование) задолженности"
		// так как для всех других видов операций (кроме еще ввода начальных остатков) указанная задолженность погашается,
		// а здесь наоборот, формируется.
		Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ИзменениеЗадолженности Тогда
			ВремТабл 						 = ТаблицаДебиторскойЗадолженности;
			ТаблицаДебиторскойЗадолженности  = ТаблицаКредиторскойЗадолженности;
			ТаблицаКредиторскойЗадолженности = ВремТабл;
		КонецЕсли;
		
		
		Если ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.СписаниеЗадолженности Тогда
			
			Если ТаблицаДебиторскойЗадолженности.Колонки.Найти("НалоговоеНазначение")  = Неопределено Тогда
				ТаблицаДебиторскойЗадолженности.Колонки.Добавить("НалоговоеНазначение")
			КонецЕсли;
			// заполним налоговое назначение - значением из шапки (по прибыли).
			Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыльДо2015 Тогда
				ТаблицаДебиторскойЗадолженности.ЗаполнитьЗначения(СтруктураШапкиДокумента.НалоговоеНазначениеДоходовИЗатрат, "НалоговоеНазначение");
				// суммы по списанию дебеторской задолженности в НУ не должны фигурировать
				ТаблицаДебиторскойЗадолженности.Колонки.Добавить("НеОтноситьНаЗатратыПоНУ");
				ТаблицаДебиторскойЗадолженности.ЗаполнитьЗначения(Истина, "НеОтноситьНаЗатратыПоНУ");
			КонецЕсли;
			
			
			Если ТаблицаКредиторскойЗадолженности.Колонки.Найти("НалоговоеНазначение")  = Неопределено Тогда
				ТаблицаКредиторскойЗадолженности.Колонки.Добавить("НалоговоеНазначение")
			КонецЕсли;
			// заполним налоговое назначение - значением из шапки (по прибыли).
			Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыльДо2015 Тогда
				ТаблицаКредиторскойЗадолженности.ЗаполнитьЗначения(СтруктураШапкиДокумента.НалоговоеНазначениеДоходовИЗатрат, "НалоговоеНазначение");
			КонецЕсли;
			
		Иначе
			// удаляем налоговое назначение, так как при движении денег могут ошибочно сформироваться 
			// движения по налоговому учету (по налоговому назначению по НДС).
			Если НЕ ТаблицаДебиторскойЗадолженности.Колонки.Найти("НалоговоеНазначение") = Неопределено Тогда
				ТаблицаДебиторскойЗадолженности.Колонки.Удалить("НалоговоеНазначение")
			КонецЕсли;
			//Если ТаблицаКредиторскойЗадолженности.Колонки.Найти("НалоговоеНазначение") = Неопределено Тогда
			Если НЕ ТаблицаКредиторскойЗадолженности.Колонки.Найти("НалоговоеНазначение") = Неопределено Тогда
				ТаблицаКредиторскойЗадолженности.Колонки.Удалить("НалоговоеНазначение")
			КонецЕсли;
		КонецЕсли;
		
		ДвиженияПоРегистрамРегл(СтруктураШапкиДокумента, ТаблицаПоСуммамДолга, Отказ, Заголовок, ТаблицаДебиторскойЗадолженности,ТаблицаКредиторскойЗадолженности);

		ДвиженияПоРегистрамНалоговогоУчета(СтруктураШапкиДокумента, ТаблицаПоСуммамДолга, Отказ, Заголовок);
		
		ДвиженияПоСписаниюЗадолженнстиПоНалоговомуУчету(СтруктураШапкиДокумента, ТаблицаПоСуммамДолга, Отказ, Заголовок);
		
	КонецЕсли; 
	
КонецПроцедуры // ДвиженияПоРегистрам()

#КонецОбласти 

#Область СлужебныеПроцедурыИФункции

// Заполняет документ остатками взаиморасчетов по контрагенту
//
Процедура ЗаполнитьОстаткамиВзаиморасчетов(ПоКонтрагенту, ВидЗадолженности) Экспорт

	СчетаРасчетов = Новый Массив();
	СчетаРасчетов.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСПоставщикамиИПодрядчиками);
	СчетаРасчетов.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСПокупателямиИЗаказчиками);
	СчетаРасчетов.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоВыданнымАвансам);
	СчетаРасчетов.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСДругимиДебиторами);
	СчетаРасчетов.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоАвансамПолученным);
	СчетаРасчетов.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСДругимиКредиторами);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА НаличиеНужныхСубконто.ЕстьДокументыРасчетов = 1
		|			ТОГДА Хозрасчетный.Ссылка
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ КАК СчетаПоДокументам,
		|	ВЫБОР
		|		КОГДА НаличиеНужныхСубконто.ЕстьДокументыРасчетов = 0
		|			ТОГДА Хозрасчетный.Ссылка
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ КАК СчетаБезДокументов,
		|	НаличиеНужныхСубконто.ЕстьДокументыРасчетов
		|ИЗ
		|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			ХозрасчетныйВидыСубконто.Ссылка КАК Ссылка,
		|			МАКСИМУМ(ВЫБОР
		|					КОГДА ХозрасчетныйВидыСубконто.ВидСубконто = &ВидСубконтоКонтрагенты
		|						ТОГДА 1
		|					ИНАЧЕ 0
		|				КОНЕЦ) КАК ЕстьКонтрагенты,
		|			МАКСИМУМ(ВЫБОР
		|					КОГДА ХозрасчетныйВидыСубконто.ВидСубконто = &ВидСубконтоДоговоры
		|						ТОГДА 1
		|					ИНАЧЕ 0
		|				КОНЕЦ) КАК ЕстьДоговоры,
		|			МАКСИМУМ(ВЫБОР
		|					КОГДА ХозрасчетныйВидыСубконто.ВидСубконто = &ВидСубконтоДокументыРасчетов
		|						ТОГДА 1
		|					ИНАЧЕ 0
		|				КОНЕЦ) КАК ЕстьДокументыРасчетов
		|		ИЗ
		|			ПланСчетов.Хозрасчетный.ВидыСубконто КАК ХозрасчетныйВидыСубконто
		|		
		|		СГРУППИРОВАТЬ ПО
		|			ХозрасчетныйВидыСубконто.Ссылка) КАК НаличиеНужныхСубконто
		|		ПО Хозрасчетный.Ссылка = НаличиеНужныхСубконто.Ссылка
		|ГДЕ
		|	НаличиеНужныхСубконто.ЕстьКонтрагенты = 1
		|	И НаличиеНужныхСубконто.ЕстьДоговоры = 1
		|	И Хозрасчетный.ЗапретитьИспользоватьВПроводках = ЛОЖЬ
		|	И Хозрасчетный.Ссылка В ИЕРАРХИИ(&СчетаРасчетов)";
	
	Запрос.УстановитьПараметр("СчетаРасчетов", СчетаРасчетов);
	Запрос.УстановитьПараметр("ВидСубконтоКонтрагенты", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
	Запрос.УстановитьПараметр("ВидСубконтоДоговоры", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры);
	Запрос.УстановитьПараметр("ВидСубконтоДокументыРасчетов", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ДокументыРасчетовСКонтрагентами);
	
	СчетаУчетаРасчетов = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.Прямой);
	
	СчетаРасчетовБезАналитикиПоДокументам = ОбщегоНазначенияБПВызовСервера.УдалитьПовторяющиесяЭлементыМассива(СчетаУчетаРасчетов.ВыгрузитьКолонку("СчетаБезДокументов"),Истина);
	СчетаРасчетовСАналитикойПоДокументам = ОбщегоНазначенияБПВызовСервера.УдалитьПовторяющиесяЭлементыМассива(СчетаУчетаРасчетов.ВыгрузитьКолонку("СчетаПоДокументам"),Истина);

	Запрос = Новый Запрос;
	
	Запрос.Текст = "";
	
	Если не СчетаРасчетовБезАналитикиПоДокументам.Количество() = 0 Тогда
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ХозрасчетныйОстатки.Счет,
		|	ХозрасчетныйОстатки.Субконто1 КАК Контрагент,
		|	ХозрасчетныйОстатки.Субконто2 КАК Договор,
		|	НЕОПРЕДЕЛЕНО КАК ДокументРасчетов,
		|	ХозрасчетныйОстатки.СуммаОстаток,
		|	ХозрасчетныйОстатки.ВалютнаяСуммаОстаток,
		|	ХозрасчетныйОстатки.Субконто2.ВидДоговора КАК ВидДоговора,
		|	ХозрасчетныйОстатки.Субконто2.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(
		|		&Период,
		|		Счет В (&СчетаРасчетовБезАналитикиПоДокументам),
		|		&ВидыСубконтоБезДокументов,
		|		Организация = &Организация
		|		    И Субконто1 = &Контрагент) КАК ХозрасчетныйОстатки
		|ГДЕ
		|	ХозрасчетныйОстатки.Субконто2.ВалютаВзаиморасчетов = &ВалютаДокумента	
		|	И ВЫБОР КОГДА ХозрасчетныйОстатки.Субконто2.ВалютаВзаиморасчетов В (&ВалютаРегУчета)
		|				ТОГДА ВЫБОР
		|						КОГДА &ВидЗадолженности = &ВидЗадолженностиДебиторская
		|							ТОГДА ХозрасчетныйОстатки.СуммаОстаток > 0
		|						ИНАЧЕ ХозрасчетныйОстатки.СуммаОстаток < 0
		|						КОНЕЦ
		|				ИНАЧЕ ВЫБОР
		|						КОГДА &ВидЗадолженности = &ВидЗадолженностиДебиторская
		|							ТОГДА ХозрасчетныйОстатки.ВалютнаяСуммаОстаток > 0
		|							ИНАЧЕ ХозрасчетныйОстатки.ВалютнаяСуммаОстаток < 0
		|						КОНЕЦ
		|				КОНЕЦ";
	КонецЕсли;
	
	Если не СчетаРасчетовСАналитикойПоДокументам.Количество() = 0 Тогда
	
		Запрос.Текст = ?(ПустаяСтрока(Запрос.Текст),"",Запрос.Текст + Символы.ПС + "Объединить Все" +Символы.ПС)+
		"ВЫБРАТЬ
		|	ХозрасчетныйОстатки.Счет,
		|	ХозрасчетныйОстатки.Субконто1 КАК Контрагент,
		|	ХозрасчетныйОстатки.Субконто2 КАК Договор,
		|	ХозрасчетныйОстатки.Субконто3 КАК ДокументРасчетов,
		|	ХозрасчетныйОстатки.СуммаОстаток,
		|	ХозрасчетныйОстатки.ВалютнаяСуммаОстаток,
		|	ХозрасчетныйОстатки.Субконто2.ВидДоговора КАК ВидДоговора,
		|	ХозрасчетныйОстатки.Субконто2.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(
		|		&Период,
		|		Счет В (&СчетаРасчетовСАналитикойПоДокументам),
		|		&ВидыСубконтоСДокументами,
		|		Организация = &Организация
		|		    И Субконто1 = &Контрагент) КАК ХозрасчетныйОстатки
		|ГДЕ
		|	ХозрасчетныйОстатки.Субконто2.ВалютаВзаиморасчетов = &ВалютаДокумента	
		|	И ВЫБОР КОГДА ХозрасчетныйОстатки.Субконто2.ВалютаВзаиморасчетов В (&ВалютаРегУчета)
		|				ТОГДА ВЫБОР
		|						КОГДА &ВидЗадолженности = &ВидЗадолженностиДебиторская
		|							ТОГДА ХозрасчетныйОстатки.СуммаОстаток > 0
		|						ИНАЧЕ ХозрасчетныйОстатки.СуммаОстаток < 0
		|						КОНЕЦ
		|				ИНАЧЕ ВЫБОР
		|						КОГДА &ВидЗадолженности = &ВидЗадолженностиДебиторская
		|							ТОГДА ХозрасчетныйОстатки.ВалютнаяСуммаОстаток > 0
		|							ИНАЧЕ ХозрасчетныйОстатки.ВалютнаяСуммаОстаток < 0
		|						КОНЕЦ
		|				КОНЕЦ";

	
	КонецЕсли;
	
	Если ЭтоНовый() Тогда
		Запрос.УстановитьПараметр("Период",Новый МоментВремени(КонецДня(Дата), Ссылка));
	Иначе
		Запрос.УстановитьПараметр("Период",Новый МоментВремени(Дата, Ссылка));		
	КонецЕсли;	
	Запрос.УстановитьПараметр("Организация",Организация);
	Запрос.УстановитьПараметр("Контрагент", ПоКонтрагенту);
	Запрос.УстановитьПараметр("ВидЗадолженности",ВидЗадолженности);
	Запрос.УстановитьПараметр("ВидЗадолженностиДебиторская",Перечисления.ВидыЗадолженности.Дебиторская);
	Запрос.УстановитьПараметр("ВидЗадолженностиКредиторская",Перечисления.ВидыЗадолженности.Кредиторская);
	
	ВалютыРеглУчета = Новый СписокЗначений;
	ВалютыРеглУчета.Добавить(Константы.ВалютаРегламентированногоУчета.Получить());
	ВалютыРеглУчета.Добавить(Справочники.Валюты.ПустаяСсылка());
	Запрос.УстановитьПараметр("ВалютаРегУчета",ВалютыРеглУчета);
	Запрос.УстановитьПараметр("ВалютаДокумента",ВалютаДокумента);
	
	Если ВалютыРеглУчета.НайтиПоЗначению(ВалютаДокумента) = неопределено Тогда
		//Документ в иностранной валюте. Установим отбор только по договорам в нужной валюте
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"Организация = &Организация","Организация = &Организация и Валюта = &ВалютаДокумента");
	КонецЕсли; 
	
	Запрос.УстановитьПараметр("СчетаРасчетовБезАналитикиПоДокументам",СчетаРасчетовБезАналитикиПоДокументам);
	Запрос.УстановитьПараметр("СчетаРасчетовСАналитикойПоДокументам", СчетаРасчетовСАналитикойПоДокументам);
	
	ВидыСубконтоБезДокументов = Новый Массив();
	ВидыСубконтоБезДокументов.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
	ВидыСубконтоБезДокументов.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры);
	
	Запрос.УстановитьПараметр("ВидыСубконтоБезДокументов",ВидыСубконтоБезДокументов);
	
	ВидыСубконтоСДокументами = Новый Массив();
	ВидыСубконтоСДокументами.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
	ВидыСубконтоСДокументами.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры);
	ВидыСубконтоСДокументами.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ДокументыРасчетовСКонтрагентами);
	
	Запрос.УстановитьПараметр("ВидыСубконтоСДокументами", ВидыСубконтоСДокументами);
	
	ТекущийРезультат = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.Прямой);
	Множитель = ?(ВидЗадолженности = Перечисления.ВидыЗадолженности.Дебиторская,1,-1);
	КоэффициентПропорциональногоНДС = НалоговыйУчет.ПолучитьКоэффициентПропорциональногоНДС(Организация, Дата);
	ПлательщикНДС = УчетнаяПолитика.ПлательщикНДС(Организация, Дата);
	Для каждого СтрокаОстатков Из ТекущийРезультат Цикл
	    НоваяСтрока = СуммыДолга.Добавить();
		НоваяСтрока.ВидЗадолженности = ВидЗадолженности;
		НоваяСтрока.ДоговорКонтрагента = СтрокаОстатков.Договор;
		НоваяСтрока.Сделка = СтрокаОстатков.ДокументРасчетов;
		НоваяСтрока.СчетУчетаРасчетов = СтрокаОстатков.Счет;
		Если ВалютыРеглУчета.НайтиПоЗначению(ВалютаДокумента) = неопределено Тогда
			НоваяСтрока.СуммаВзаиморасчетов = Множитель*СтрокаОстатков.ВалютнаяСуммаОстаток;
			
			НоваяСтрока.КурсВзаиморасчетов = КурсДокумента;
			НоваяСтрока.КратностьВзаиморасчетов = КратностьДокумента;
			
			НоваяСтрока.Сумма = Множитель*СтрокаОстатков.СуммаОстаток;
		Иначе	
			НоваяСтрока.СуммаВзаиморасчетов = Множитель*СтрокаОстатков.СуммаОстаток;	
			НоваяСтрока.КурсВзаиморасчетов = 1;
			НоваяСтрока.КратностьВзаиморасчетов = 1;
			                                                            
			НоваяСтрока.Сумма = Множитель*СтрокаОстатков.СуммаОстаток;
		КонецЕсли; 
		
		Если НоваяСтрока.ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем Тогда
			НоваяСтрока.ТипКонтрагента = Перечисления.СтатусыКонтрагентов.Покупатель;
		ИначеЕсли НоваяСтрока.ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком Тогда
			НоваяСтрока.ТипКонтрагента = Перечисления.СтатусыКонтрагентов.Поставщик;
        ИначеЕсли ВидЗадолженности = Перечисления.ВидыЗадолженности.Дебиторская Тогда
			НоваяСтрока.ТипКонтрагента = Перечисления.СтатусыКонтрагентов.Покупатель;
		Иначе
			НоваяСтрока.ТипКонтрагента = Перечисления.СтатусыКонтрагентов.Поставщик;
		КонецЕсли;
			
		НоваяСтрока.РасчетыВозврат = Перечисления.РасчетыВозврат.Расчеты;	
		
		Документы.КорректировкаДолга.ЗаполнитьСчетаУчетаВСтрокеТабЧасти(НоваяСтрока, ЭтотОбъект, Ложь);
		НоваяСтрока.СуммаНДС = НоваяСтрока.Сумма*УчетНДС.ПолучитьСтавкуНДС(НоваяСтрока.СтавкаНДС)/(100 +УчетНДС.ПолучитьСтавкуНДС(НоваяСтрока.СтавкаНДС));
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьПропорциональныйНДСТабЧасти(НоваяСтрока,ПлательщикНДС,КоэффициентПропорциональногоНДС);
		
	КонецЦикла; 
	
КонецПроцедуры

//Функция для получения номера субконто "Расчетные документы" по счету учета
//
// Параметры
//  Счет         - счет по которому определяетс номер субконто "Документы расчетов с контрагентами"
// Возвращаемое значение:
//   Число   – номер субконто "Документы расчетов с контрагентами" на счете. Если субконто нет - возвращается 0.
//
Функция ПолучитьНомерСубконтоРД(Счет)
    Если НомераСубконтоРДпоСчету = Неопределено Тогда
	    НомераСубконтоРДпоСчету = Новый Соответствие();
	КонецЕсли; 
	
	НомерСубконтоРД = НомераСубконтоРДпоСчету[Счет];
	
	Если  НомерСубконтоРД = Неопределено Тогда
		НомерСубконтоРД = 0;
		
		// Определим начичие субконто "Документы расчетов с контрагентами" по счету учета.
		ВидыСубконто = Счет.ВидыСубконто;
		СтрокаСубконтоРД = ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ДокументыРасчетовСКонтрагентами,"ВидСубконто");
		Если не СтрокаСубконтоРД = Неопределено Тогда
			НомераСубконтоРДпоСчету.Вставить(Счет, СтрокаСубконтоРД.НомерСтроки);
			НомерСубконтоРД = СтрокаСубконтоРД.НомерСтроки;
		КонецЕсли; 
		
	КонецЕсли; 
	
	Возврат НомерСубконтоРД;

КонецФункции // ПолучитьНомерСубконтоРД()

// Процедура формирует таблицы документа.
//
Процедура ПодготовитьТаблицыДокументаДляПроверкиЗаполнения(ТаблицаПоСуммамДолга) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаСуммыДолга", СуммыДолга.Выгрузить());
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	&Ссылка КАК Ссылка,
	|	ТаблицаСуммыДолга.НомерСтроки,
	|	ТаблицаСуммыДолга.ВидЗадолженности,
	|	ТаблицаСуммыДолга.ДоговорКонтрагента,
	|	ТаблицаСуммыДолга.Сделка,
	|	ТаблицаСуммыДолга.Сумма,
	|	ТаблицаСуммыДолга.СуммаНДС,
	|	ТаблицаСуммыДолга.СуммаНДСПропорциональноКредит,
	|	ТаблицаСуммыДолга.СуммаСебестоимостиНУ,
	|	ТаблицаСуммыДолга.СуммаВзаиморасчетов,
	|	ТаблицаСуммыДолга.ЗаТару,
	|	ТаблицаСуммыДолга.РасчетыВозврат,
	|	ТаблицаСуммыДолга.НалоговоеНазначение,
	|	ТаблицаСуммыДолга.Амортизируется,
	|	ТаблицаСуммыДолга.ТипКонтрагента,
	|	ТаблицаСуммыДолга.СтавкаНДС,
	|	ТаблицаСуммыДолга.СчетУчетаНДС,
	|	ТаблицаСуммыДолга.СчетУчетаРасчетов,
	|	ТаблицаСуммыДолга.СчетУчетаНДСПодтвержденный
	|ПОМЕСТИТЬ ВТ_ТаблицаСуммыДолга
	|ИЗ
	|	&ТаблицаСуммыДолга КАК ТаблицаСуммыДолга
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ТаблицаСуммыДолга.Ссылка,
	|	ВТ_ТаблицаСуммыДолга.НомерСтроки,
	|	ВТ_ТаблицаСуммыДолга.ВидЗадолженности,
	|	ВТ_ТаблицаСуммыДолга.ДоговорКонтрагента,
	|	ВТ_ТаблицаСуммыДолга.ДоговорКонтрагента.Организация КАК ДоговорОрганизация,
	|	ВТ_ТаблицаСуммыДолга.ДоговорКонтрагента.СложныйНалоговыйУчет КАК СложныйНалоговыйУчет,
	|	ВТ_ТаблицаСуммыДолга.ДоговорКонтрагента.ВидДоговора КАК ВидДоговора,
	|	ВТ_ТаблицаСуммыДолга.Ссылка.СчетДт КАК КоррСчет,
	|	ВТ_ТаблицаСуммыДолга.Ссылка.СубконтоДт1 КАК КоррСубконто1,
	|	ВТ_ТаблицаСуммыДолга.Ссылка.СубконтоДт2 КАК КоррСубконто2,
	|	ВТ_ТаблицаСуммыДолга.Ссылка.СубконтоДт3 КАК КоррСубконто3,
	|	ВТ_ТаблицаСуммыДолга.СчетУчетаРасчетов КАК СчетОплаты,
	|	ВТ_ТаблицаСуммыДолга.СчетУчетаРасчетов КАК СчетАванса,
	|	ВТ_ТаблицаСуммыДолга.Сделка,
	|	ВТ_ТаблицаСуммыДолга.Сумма,
	|	ВТ_ТаблицаСуммыДолга.СуммаНДС,
	|	ВТ_ТаблицаСуммыДолга.СуммаНДСПропорциональноКредит,
	|	ВТ_ТаблицаСуммыДолга.СуммаВзаиморасчетов,
	|	ВТ_ТаблицаСуммыДолга.СуммаСебестоимостиНУ,
	|	ВТ_ТаблицаСуммыДолга.ЗаТару КАК ВозвратнаяТара,
	|	ВТ_ТаблицаСуммыДолга.РасчетыВозврат,
	|	ВТ_ТаблицаСуммыДолга.НалоговоеНазначение,
	|	ВТ_ТаблицаСуммыДолга.Амортизируется,
	|	ВТ_ТаблицаСуммыДолга.НалоговоеНазначение.ВидДеятельностиНДС КАК ВидДеятельностиНДС,
	|	ВТ_ТаблицаСуммыДолга.ТипКонтрагента,
	|	ВТ_ТаблицаСуммыДолга.СтавкаНДС,
	|	ВТ_ТаблицаСуммыДолга.СчетУчетаНДС,
	|	ВТ_ТаблицаСуммыДолга.СчетУчетаНДСПодтвержденный
	|ИЗ
	|	ВТ_ТаблицаСуммыДолга КАК ВТ_ТаблицаСуммыДолга";
	
	// Подготовим таблицу для проверки заполнения.
	ТаблицаПоСуммамДолга = Запрос.Выполнить().Выгрузить();	
	
КонецПроцедуры

Процедура ИнвертироватьПроводку(Проводка)
	
	// запоминаем данные по Дт
	ДанныеПоДт = Новый Структура();
	ДанныеПоДт.Вставить("СчетДт", 					Проводка.СчетДт);
	
	ДанныеПоДт.Вставить("ВалютаДт", 				Проводка.ВалютаДт);
	ДанныеПоДт.Вставить("НалоговоеНазначениеДт", 	Проводка.НалоговоеНазначениеДт);
	
	ДанныеПоДт.Вставить("ВалютнаяСуммаДт", 			Проводка.ВалютнаяСуммаДт);
	ДанныеПоДт.Вставить("КоличествоДт", 			Проводка.КоличествоДт);
	ДанныеПоДт.Вставить("СуммаНУДт", 				Проводка.СуммаНУДт);
	
	Для Каждого СтрокаСубконто Из Проводка.СчетДт.ВидыСубконто Цикл
		МаксКоличествоСубконто = Проводка.СчетДт.ВидыСубконто.Индекс(СтрокаСубконто);
		
		ДанныеПоДт.Вставить("ВидСубконтоДт" + МаксКоличествоСубконто, СтрокаСубконто.ВидСубконто);
		ДанныеПоДт.Вставить("СубконтоДт"    + МаксКоличествоСубконто, Проводка.СубконтоДт[СтрокаСубконто.ВидСубконто]);
	КонецЦикла;

	// переносим данные из Кт в Дт
	Проводка.СчетДт 				= Проводка.СчетКт;
	
	Проводка.ВалютаДт 				= Проводка.ВалютаКт;
	Проводка.НалоговоеНазначениеДт  = Проводка.НалоговоеНазначениеКт;
	
	Проводка.ВалютнаяСуммаДт 		= - Проводка.ВалютнаяСуммаКт;
	Проводка.КоличествоДт 			= - Проводка.КоличествоКт;
	Проводка.СуммаНУДт				= - Проводка.СуммаНУКт;
	
	Проводка.СубконтоДт.Очистить();
	Для Каждого СтрокаСубконто Из Проводка.СчетКт.ВидыСубконто Цикл
		ТекНомер = Проводка.СчетКт.ВидыСубконто.Индекс(СтрокаСубконто);
		Проводка.СубконтоДт[СтрокаСубконто.ВидСубконто] = Проводка.СубконтоКт[СтрокаСубконто.ВидСубконто];
	КонецЦикла;
	
	// восстанавливаем данные по ДТ в Кт
	Проводка.СчетКт 				= ДанныеПоДт.СчетДт;
	
	Проводка.ВалютаКт 				= ДанныеПоДт.ВалютаДт;
	Проводка.НалоговоеНазначениеКт  = ДанныеПоДт.НалоговоеНазначениеДт;
	
	Проводка.ВалютнаяСуммаКт 		= - ДанныеПоДт.ВалютнаяСуммаДт;
	Проводка.КоличествоКт 			= - ДанныеПоДт.КоличествоДт;
	Проводка.СуммаНУКт				= - ДанныеПоДт.СуммаНУДт;
	
	Проводка.СубконтоКт.Очистить();
	Для ТекНомер = 0 ПО МаксКоличествоСубконто Цикл
		Проводка.СубконтоКт[ДанныеПоДт["ВидСубконтоДт" + ТекНомер]] = ДанныеПоДт["СубконтоДт" + ТекНомер];
	КонецЦикла;
	
	// конвертируем балансовые суммы
	Проводка.Сумма = -Проводка.Сумма;
	
КонецПроцедуры

// Процедура определяет тип "закрывающего/создающего" указанный долг события по налоговому учету
// Например, для долга вида "Отгрузка" закрывающим событием будет "Оплата", если не указан
// параметр ДелатьВозврат. Если параметр ДелатьВозврат = Истина, то данный долг будет
// закрыт как "Возврат отгрузки".
// Параметры:
//			Строка - Строка таблицы долга
//		    СоздаватьДолг - булево - указанный долг создается (Истина) или погашается (ЛОЖЬ)
//			ДелатьВозврат - булево - определяет метод закрытия долга
Функция ПолучитьКлючСобытияПоНалоговомуУчету(Строка, СоздаватьДолг = Ложь, ДелатьВозврат = Ложь)
	
	Если СоздаватьДолг Тогда
	
		Если ЭтоОплата(Строка) Тогда
			Если Строка.РасчетыВозврат = Перечисления.РасчетыВозврат.Расчеты Тогда
				КлючСобытия = "Оплата";	 
			Иначе	
				КлючСобытия = "ВозвратОплаты";
			КонецЕсли;
		Иначе//отгрузка	
			Если Строка.РасчетыВозврат = Перечисления.РасчетыВозврат.Расчеты Тогда
				КлючСобытия = "Отгрузка";
			Иначе	
				КлючСобытия = "ВозвратОтгрузки";
			КонецЕсли;
		КонецЕсли;
	
	Иначе
	
		Если ЭтоОплата(Строка) Тогда
			Если ДелатьВозврат Тогда
				Если Строка.РасчетыВозврат = Перечисления.РасчетыВозврат.Расчеты Тогда
					КлючСобытия = "ВозвратОплаты";
				Иначе	
					КлючСобытия = "Оплата";
				КонецЕсли;
			Иначе
				Если Строка.РасчетыВозврат = Перечисления.РасчетыВозврат.Расчеты Тогда
					КлючСобытия = "Отгрузка";	 
				Иначе	
					КлючСобытия = "ВозвратОтгрузки";
				КонецЕсли;
			КонецЕсли;
		Иначе//отгрузка	
			Если ДелатьВозврат Тогда
				Если Строка.РасчетыВозврат = Перечисления.РасчетыВозврат.Расчеты Тогда
					КлючСобытия = "ВозвратОтгрузки";	
				Иначе	
					КлючСобытия = "Отгрузка";
				КонецЕсли;
			Иначе
				Если Строка.РасчетыВозврат = Перечисления.РасчетыВозврат.Расчеты Тогда
					КлючСобытия = "Оплата";
				Иначе	
					КлючСобытия = "ВозвратОплаты";
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат КлючСобытия;	
	
КонецФункции

// Функция используется при вводе остатков взаиморасчетов. Определяет является ли долг - долгом, сформированным
// оплатой контрагента
//
Функция ЭтоОплата(ДанныеПоЗадолженности)

	ЗнакПокупатель 	= ?(ДанныеПоЗадолженности.ТипКонтрагента 	= Перечисления.СтатусыКонтрагентов.Покупатель, 1, -1);
	ЗнакРасчеты		= ?(ДанныеПоЗадолженности.РасчетыВозврат 	= Перечисления.РасчетыВозврат.Расчеты,		   1, -1);
	ЗнакДебет	    = ?(ДанныеПоЗадолженности.ВидЗадолженности	= Перечисления.ВидыЗадолженности.Дебиторская,  1, -1);

	ЗнакОтгрузки = ЗнакПокупатель * ЗнакРасчеты * ЗнакДебет;
	
	Если ЗнакОтгрузки = 1 Тогда
	
		Возврат Ложь;	
		
	Иначе
		
		Возврат Истина;	
		
	КонецЕсли;
	
КонецФункции 

#КонецОбласти 

мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
#КонецЕсли

