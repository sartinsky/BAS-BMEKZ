#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды 

	КадровыйУчетФормы.ФормаКадровогоДокументаПриСозданииНаСервере(ЭтаФорма);
	
	Если Параметры.Ключ.Пустая() Тогда
		
		// Заполним реквизиты из значений заполнения
		Если Параметры.Свойство("Организация") И ЗначениеЗаполнено(Параметры.Организация) Тогда 
			Объект.Организация = Параметры.Организация;
		КонецЕсли;
		Если Параметры.Свойство("Подразделение") И ЗначениеЗаполнено(Параметры.Подразделение) Тогда 
			Объект.Подразделение = Параметры.Подразделение;
		КонецЕсли;
		
		Если Параметры.Свойство("Сотрудник") И ЗначениеЗаполнено(Параметры.Сотрудник) Тогда 
			
			Объект.Организация = Параметры.Сотрудник.ГоловнаяОрганизация;
			СтрокаРаботник = Объект.РаботникиОрганизации.Добавить();
			СтрокаРаботник.Сотрудник = Параметры.Сотрудник;
			
			ДанныеСотрудника = Новый Структура (
				"Сотрудник, ФизическоеЛицо, ВидРасчета, 
				|ПодразделениеОрганизации, Должность, СпособОтраженияВБухучете, 
				|ПринятНаНовоеРабочееМесто, ГрафикРаботы, ЗанимаемыхСтавок
				|");
			
			ЗаполнитьЗначенияСвойств(ДанныеСотрудника, СтрокаРаботник);
			ПодучитьДанныеПоСотрудникуНаСервере(ДанныеСотрудника);
			ЗаполнитьЗначенияСвойств(СтрокаРаботник, ДанныеСотрудника);
			
			СтрокаРаботник.ДатаНачала = ДанныеСотрудника.Дата;	
			
			ДобавитьНачисленияПоСтроке(СтрокаРаботник.Сотрудник, СтрокаРаботник.ДатаНачала);  
			ДобавитьВзносыПоСтроке(СтрокаРаботник.Сотрудник, СтрокаРаботник.ДатаНачала);
			ДобавитьУдержанияПоСтроке(СтрокаРаботник.Сотрудник, СтрокаРаботник.ДатаНачала);
	
		КонецЕсли;
		
		УстановитьФункциональныеОпцииФормы();
		УправлениеФормой(ЭтаФорма);
		
	КонецЕсли;
		
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов	
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	СтандартнаяОбработка = Ложь;
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.Сотрудники") Тогда
		ДобавляемыеСотрудники = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ВыбранноеЗначение);
	Иначе
		ДобавляемыеСотрудники = ВыбранноеЗначение;
	КонецЕсли;

	ДобавитьСотрудников(ДобавляемыеСотрудники);

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ГрупповоеИзменение" И ТипЗнч(Параметр) = Тип("Структура") 
		И Параметр.Свойство("ИдентификаторВызывающейФормы")
		И Параметр.ИдентификаторВызывающейФормы = УникальныйИдентификатор Тогда

		ВыполнитьГрупповоеИзменение(Параметр);
		
	ИначеЕсли ИмяСобытия = "ГрупповоеЗаполнение" И ТипЗнч(Параметр) = Тип("Структура") 
		И Параметр.Свойство("ИдентификаторВызывающейФормы")
		И Параметр.ИдентификаторВызывающейФормы = УникальныйИдентификатор Тогда
		
		ВыполнитьГрупповоеЗаполнение(Параметр);
		
	КонецЕсли;
	
	ОбщегоНазначенияБПКлиент.ОбработкаОповещенияФормыДокумента(ЭтаФорма, Объект.Ссылка, ИмяСобытия, Параметр, Источник);
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	ПодготовитьФормуНаСервере(); 

КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	УстановитьСостояниеДокумента();	
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ИндексацияЗаработкаПриИзменении(Элемент)
	
	Если Объект.ИндексацияЗаработка И Объект.КоэффициентИндексацииЗаработка = 0 Тогда
		Объект.КоэффициентИндексацииЗаработка = 1
	КонецЕсли;

	УстановитьВидимостьКолонок();
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(
		Элемент.ТекстРедактирования,
		ЭтотОбъект,
		"Объект.Комментарий");

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыРаботникиОрганизаций

&НаКлиенте
Процедура РаботникиОрганизацииПриАктивизацииСтроки(Элемент)
	
	ОтобразитьОтборСтрок(ОтборУстановлен);
	ТЧПриАктивизацииСтроки("РаботникиОрганизации", Элемент)

КонецПроцедуры

&НаКлиенте
Процедура РаботникиОрганизацииПередУдалением(Элемент, Отказ)
	
	Сотрудник = Элементы.РаботникиОрганизации.ТекущиеДанные.Сотрудник;
	
	УдалитьПереформироватьПараметрыРасчетаПоРаботнику(Сотрудник);

КонецПроцедуры

&НаКлиенте
Процедура РаботникиОрганизацииПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	РаботникТекущейСтроки = Элементы.РаботникиОрганизации.ТекущиеДанные.Сотрудник;

КонецПроцедуры

&НаКлиенте
Процедура РаботникиОрганизацииПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ОтобразитьОтборСтрок(ОтборУстановлен);
	ТЧПриАктивизацииСтроки("РаботникиОрганизации", Элемент)

КонецПроцедуры

&НаКлиенте
Процедура РаботникиОрганизацииСотрудникПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.РаботникиОрганизации.ТекущиеДанные;
	
	Если ЗначениеЗаполнено(ТекущаяСтрока.Сотрудник) Тогда
				
		ДанныеСотрудника = Новый Структура ("Сотрудник, ФизическоеЛицо, 
		|ВидРасчета, ПодразделениеОрганизации, Должность, СпособОтраженияВБухучете, 
		|ПринятНаНовоеРабочееМесто, ГрафикРаботы, ЗанимаемыхСтавок");
		
		ЗаполнитьЗначенияСвойств(ДанныеСотрудника, ТекущаяСтрока);
		ПодучитьДанныеПоСотрудникуНаСервере(ДанныеСотрудника);
		ЗаполнитьЗначенияСвойств(ТекущаяСтрока, ДанныеСотрудника);
		
		ТекущаяСтрока.ДатаНачала = ДанныеСотрудника.Дата;
		ТекущаяСтрока.ПредыдущаяДолжность = ТекущаяСтрока.Должность;
		
		Если РаботникТекущейСтроки <> ТекущаяСтрока.Сотрудник Тогда
			УдалитьПереформироватьПараметрыРасчетаПоРаботнику(РаботникТекущейСтроки);
			ДобавитьПереформироватьПараметрыРасчетаПоРаботнику(ТекущаяСтрока.Сотрудник, ДанныеСотрудника.Дата);
		КонецЕсли;
	Иначе
		Если РаботникТекущейСтроки <> ТекущаяСтрока.Сотрудник Тогда
			УдалитьПереформироватьПараметрыРасчетаПоРаботнику(РаботникТекущейСтроки);
		КонецЕсли;
	КонецЕсли;
	
	РаботникТекущейСтроки = ТекущаяСтрока.Сотрудник;

КонецПроцедуры

&НаКлиенте
Процедура РаботникиОрганизацииДолжностьПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.РаботникиОрганизации.ТекущиеДанные;
	
	Если НЕ ТекущаяСтрока.Должность = ТекущаяСтрока.ПредыдущаяДолжность Тогда
		ТекущаяСтрока.ИзменениеДолжности = Истина;
	Иначе
		ТекущаяСтрока.ИзменениеДолжности = Ложь;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыНачисления

&НаКлиенте
Процедура НачисленияПриАктивизацииСтроки(Элемент)
	
	ТЧПриАктивизацииСтроки("Начисления", Элемент)

КонецПроцедуры

&НаКлиенте
Процедура НачисленияПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		ТабличнаяЧастьПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование);
		Если Не Элементы.РаботникиОрганизации.ТекущиеДанные = Неопределено Тогда
			Элемент.ТекущиеДанные.Назначение = Элементы.РаботникиОрганизации.ТекущиеДанные.Сотрудник;
		КонецЕсли;
	КонецЕсли;                            

КонецПроцедуры

&НаКлиенте
Процедура НачисленияПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ПриОкончанииРедактированияТЧ(Элемент, НоваяСтрока, ОтменаРедактирования, "Начисления");

КонецПроцедуры

&НаКлиенте
Процедура НачисленияВидРасчетаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Начисления.ТекущиеДанные;
	
	УстановитьВидимостьПоказателей(ТекущиеДанные);
	
	Для СчПоказателей = 1 По 6 Цикл
		ТекущиеДанные["Показатель" + СчПоказателей] = 0;
	КонецЦикла;
	
	// для ночных и вечерних определим "процент отплаты"
	Если ТекущиеДанные.ВидРасчета = ПредопределенноеЗначение("ПланВидовРасчета.ИНАГРО_Начисления.ДоплатаЗаВечерниеЧасы") Тогда
		СтавкаВечерних = ПолучитьСтавкуВечерних(Объект.Организация);
		ТекущиеДанные.Показатель2 = СтавкаВечерних;
	ИначеЕсли ТекущиеДанные.ВидРасчета = ПредопределенноеЗначение("ПланВидовРасчета.ИНАГРО_Начисления.ДоплатаЗаНочныеЧасы") Тогда
		СтавкаНочных = ПолучитьСтавкуНочных(Объект.Организация);
		ТекущиеДанные.Показатель2 = СтавкаНочных;
	КонецЕсли;	
	
	Если Не ЗначениеЗаполнено(ТекущиеДанные.ВидНачисления) Тогда
		ТекущиеДанные.ВидНачисления = ПредопределенноеЗначение("Перечисление.ИНАГРО_ВидыНачисленийРаботникаОрганизации.Индивидуальное");
	КонецЕсли;

	Если Не ЗначениеЗаполнено(ТекущиеДанные.СпособОтраженияВБухучете) Тогда
		СпособОтражения = ПолучитьЗначениеРеквизитаСправочника(ТекущиеДанные.ВидРасчета, "СпособОтраженияВБухучете");
		Если ЗначениеЗаполнено(СпособОтражения) Тогда
			ТекущиеДанные.СпособОтраженияВБухучете = СпособОтражения;
		Иначе
			ТекущиеДанные.СпособОтраженияВБухучете = Элементы.РаботникиОрганизации.ТекущиеДанные.СпособОтраженияВБухучете;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыВзносыФОТ

&НаКлиенте
Процедура ВзносыФОТПриАктивизацииСтроки(Элемент)
	
	ТЧПриАктивизацииСтроки("ВзносыФОТ", Элемент)
	
КонецПроцедуры

&НаКлиенте
Процедура ВзносыФОТПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		ТабличнаяЧастьПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	КонецЕсли;                            

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыУдержания

&НаКлиенте
Процедура УдержанияПриАктивизацииСтроки(Элемент)
	
	ТЧПриАктивизацииСтроки("Удержания", Элемент)

КонецПроцедуры

&НаКлиенте
Процедура УдержанияВидРасчетаПриИзменении(Элемент)
		
	ТекущиеДанные = Элементы.Удержания.ТекущиеДанные;
	
	УстановитьВидимостьПоказателей(ТекущиеДанные);
	
	Для СчПоказателей = 1 По 6 Цикл
		ТекущиеДанные["Показатель" + СчПоказателей] = 0;
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура УдержанияПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока И Не Элементы.РаботникиОрганизации.ТекущиеДанные = Неопределено Тогда
		Элемент.ТекущиеДанные.Сотрудник = Элементы.РаботникиОрганизации.ТекущиеДанные.Сотрудник;
		Элемент.ТекущиеДанные.Действие = ПредопределенноеЗначение("Перечисление.ВидыДействияСНачислением.Начать");
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура УдержанияПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ПриОкончанииРедактированияТЧ(Элемент, НоваяСтрока, ОтменаРедактирования, "Удержания");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыНачисленияДо

&НаКлиенте
Процедура НачисленияДоПриАктивизацииСтроки(Элемент)
	
	ТЧПриАктивизацииСтроки("НачисленияДо", Элемент)

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыНачисленияПосле

&НаКлиенте
Процедура НачисленияПослеПриАктивизацииСтроки(Элемент)
	
	ТЧПриАктивизацииСтроки("НачисленияПосле", Элемент)
	
КонецПроцедуры

&НаКлиенте
Процедура НачисленияПослеВидРасчетаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Начисления.ТекущиеДанные;
	
	УстановитьВидимостьПоказателей(ТекущиеДанные);
	
	Для СчПоказателей = 1 По 6 Цикл
		ТекущиеДанные["Показатель" + СчПоказателей] = 0;
	КонецЦикла;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗаполнитьНачисления(Команда)
	
	Если Объект.РаботникиОрганизации.Количество()= 0 Тогда
		
		ТекстСообщения = НСтр("ru='Для заполнения начислений необходимо заполнить список работников';uk='Для заповнення нарахувань необхідно заповнити список працівників'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат;
		
	КонецЕсли;
	
	Если Объект.НачисленияДо.Количество() + Объект.НачисленияПосле.Количество() > 0 Тогда
		 
		ТекстВопроса = НСтр("ru='Перед заполнением табличные части начислений будут очищены. Продолжить?';uk='Перед заповненням табличні частини нарахувань будуть очищені. Продовжити?'");
		Оповещение = Новый ОписаниеОповещения("ОчиститьТаблицыНачисленийЗавершение", ЭтотОбъект, Параметры);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
		Возврат;
	КонецЕсли;
		
	Если Объект.Ссылка.Пустая() Тогда 
		ТекстВопроса =НСтр("ru='Данные еще не записаны. Выполнение команды возможно только после записи данных. Записать?';uk='Дані ще не записані. Виконання команди можливо тільки після запису даних. Записати?'");
		Обработчик = Новый ОписаниеОповещения("АвтозаполнениеПослеОтветаНаВопросЗаписать", ЭтотОбъект);
		ПоказатьВопрос(Обработчик, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
		Возврат;
	КонецЕсли;
	
	ВыполнитьАвтозаполнениеНаСервере();
	ПодготовитьФормуНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ГрупповоеИзменение(Команда)
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Объект", Объект);
	
	ОткрытьФорму("Документ.ИНАГРО_КадровоеПеремещениеОрганизаций.Форма.ФормаГрупповаяОбработка", СтруктураПараметров, ЭтаФорма);
		
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьНачисления(Команда)
	
	Если Объект.РаботникиОрганизации.Количество() + 
		 Объект.НачисленияДо.Количество() +
		 Объект.НачисленияПосле.Количество() = 0 Тогда
		 Возврат;
	КонецЕсли;	 
	
	Если Объект.Проведен Тогда 
		ТекстВопроса =НСтр("ru='Автоматически рассчитать документ можно только после отмены его проведения. Выполнить отмену проведения документа?';uk='Автоматично розрахувати документ можна тільки після скасування його проведення. Виконати скасування проведення документа?'");
		Обработчик = Новый ОписаниеОповещения("АвторасчетПослеОтветаНаВопросЗаписать", ЭтотОбъект);
		ПоказатьВопрос(Обработчик, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
		Возврат;
	КонецЕсли;
	
	ВыполнитьРасчетНаСервере();
	ПодготовитьФормуНаСервере();

КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтбор(Команда)
		
	ОтборУстановлен = Не ОтборУстановлен;
	Если ОтборУстановлен Тогда
		Элементы.УстановитьОтбор.Картинка = БиблиотекаКартинок.СостояниеПользователя02;
	Иначе
		Элементы.УстановитьОтбор.Картинка = БиблиотекаКартинок.ЗначокФизическиеЛица32;
	КонецЕсли;
	
	ОтобразитьОтборСтрок(ОтборУстановлен);

КонецПроцедуры

&НаКлиенте
Процедура Заполнить(Команда)
	
	Если Объект.РаботникиОрганизации.Количество() > 0 Тогда
		 
		ТекстВопроса = НСтр("ru='Перед заполнением табличные части будут очищены. Продолжить?';uk='Перед заповненням табличні частини будуть очищені. Продовжити?'");
		Оповещение = Новый ОписаниеОповещения("ОчиститьТаблицыЗавершение", ЭтотОбъект, Параметры);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
		Возврат;
	КонецЕсли;
		
	Объект.РаботникиОрганизации.Очистить();
	Объект.Начисления.Очистить();
	Объект.Взносы.Очистить();
	Объект.ВзносыФОТ.Очистить();
	Объект.Удержания.Очистить();
	Объект.НачисленияДо.Очистить();
	Объект.НачисленияПосле.Очистить();
	
	ИНАГРО_ЗарплатаКадрыРасширенныйКлиент.ОткрытьФормуОтбораСпискаРаботников(ЭтаФорма)

КонецПроцедуры

&НаКлиенте
Процедура Подбор(Команда)
	
	ПодобратьСотрудников(Истина);

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ПодготовитьФормуНаСервере()
		
	УстановитьСостояниеДокумента();
	УправлениеФормой(ЭтаФорма);
			
КонецПроцедуры

&НаСервере
Процедура УстановитьФункциональныеОпцииФормы()
	
	ПараметрыФО = Новый Структура("Организация, Период", Объект.Организация, Объект.Дата);
	УстановитьПараметрыФункциональныхОпцийФормы(ПараметрыФО);
	
КонецПроцедуры

&НаСервере
Процедура УправлениеФормой(Форма)
	
	Для Каждого ТекСтрока Из Объект.Начисления Цикл
		УстановитьВидимостьПоказателейНаСервере(ТекСтрока);
	КонецЦикла;
	
	Для Каждого ТекСтрока Из Объект.Удержания Цикл
		УстановитьВидимостьПоказателейНаСервере(ТекСтрока);
	КонецЦикла;
	
	// табличная часть РаботникиОрганизации
	Форма.Элементы.РаботникиОрганизацииФиксированнаяИндексация.Видимость = Объект.ИндексацияЗаработка;
	Форма.Элементы.РаботникиОрганизацииДоходДо.Видимость = Объект.ИндексацияЗаработка;
	Форма.Элементы.РаботникиОрганизацииДоходПосле.Видимость = Объект.ИндексацияЗаработка;
	Форма.Элементы.РаботникиОрганизацииПовышение.Видимость = Объект.ИндексацияЗаработка;
	Форма.Элементы.ГруппаНачисленияДо.Видимость = Объект.ИндексацияЗаработка;
	Форма.Элементы.ГруппаНачисленияПосле.Видимость = Объект.ИндексацияЗаработка;
	Форма.Элементы.НачисленияДоПослеЗаполнить.Видимость = Объект.ИндексацияЗаработка;
	Форма.Элементы.Рассчитать.Видимость = Объект.ИндексацияЗаработка;
	ОтборУстановлен = Истина;
		
КонецПроцедуры

&НаСервере
Процедура УстановитьСостояниеДокумента()
	
	СостояниеДокумента = ОбщегоНазначенияБП.СостояниеДокумента(Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьПоказателей(ТекСтрока)
	
	СведенияОВидеРасчета = ПолучитьСведенияОВидеРасчета(ТекСтрока.ВидРасчета);
	ЕстьПоказатели = Ложь;
	Для СчПоказателей = 1 По 6 Цикл
		ТекСтрока["Показатель" + СчПоказателей + "Видимость"] = Ложь;
		Если СчПоказателей <= СведенияОВидеРасчета["КоличествоПоказателей"] Тогда
			Если СведенияОВидеРасчета["Показатель" + СчПоказателей + "Видимость"] И Не СведенияОВидеРасчета["Показатель" + СчПоказателей + "ВозможностьИзменения"] = ПредопределенноеЗначение("Перечисление.ИНАГРО_ИзменениеПоказателейСхемМотивации.ВиденНоНеРедактируетсяПриРасчете") Тогда
				ТекСтрока.ЕстьПоказатели = Истина;
				ТекСтрока["Показатель" + СчПоказателей + "Видимость"] = Истина;
				ТекСтрока["ИмяПоказатель" + СчПоказателей] = СведенияОВидеРасчета["Показатель" + СчПоказателей + "Наименование"];
			Иначе
				ТекСтрока["Показатель" + СчПоказателей + "Видимость"] = Ложь;

			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
		
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьПоказателейНаСервере(ТекСтрока)
	
	СведенияОВидеРасчета = ПолучитьСведенияОВидеРасчета(ТекСтрока.ВидРасчета);
	ЕстьПоказатели = Ложь;
	Для СчПоказателей = 1 По 6 Цикл
		ТекСтрока["Показатель" + СчПоказателей + "Видимость"] = Ложь;
		Если СчПоказателей <= СведенияОВидеРасчета["КоличествоПоказателей"] Тогда
			Если СведенияОВидеРасчета["Показатель" + СчПоказателей + "Видимость"] И Не СведенияОВидеРасчета["Показатель" + СчПоказателей + "ВозможностьИзменения"] = ПредопределенноеЗначение("Перечисление.ИНАГРО_ИзменениеПоказателейСхемМотивации.ВиденНоНеРедактируетсяПриРасчете") Тогда
				ТекСтрока.ЕстьПоказатели = Истина;
				ТекСтрока["Показатель" + СчПоказателей + "Видимость"] = Истина;
				ТекСтрока["ИмяПоказатель" + СчПоказателей] = СведенияОВидеРасчета["Показатель" + СчПоказателей + "Наименование"];
			Иначе
				ТекСтрока["Показатель" + СчПоказателей + "Видимость"] = Ложь;

			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
		
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьКолонок()
	
	// табличная часть РаботникиОрганизации
	Элементы.РаботникиОрганизацииФиксированнаяИндексация.Видимость = Объект.ИндексацияЗаработка;
	Элементы.РаботникиОрганизацииДоходДо.Видимость = Объект.ИндексацияЗаработка;
	Элементы.РаботникиОрганизацииДоходПосле.Видимость = Объект.ИндексацияЗаработка;
	Элементы.РаботникиОрганизацииПовышение.Видимость = Объект.ИндексацияЗаработка;
	Элементы.РаботникиОрганизации.КоманднаяПанель.ПодчиненныеЭлементы.ДанныеДляИндексацииГруппа.Видимость = Объект.ИндексацияЗаработка;
	Элементы.РаботникиОрганизации.КоманднаяПанель.ПодчиненныеЭлементы.ДанныеДляИндексацииГруппа.ПодчиненныеЭлементы.НачисленияДоПослеЗаполнить.Видимость = Объект.ИндексацияЗаработка;
	Элементы.РаботникиОрганизации.КоманднаяПанель.ПодчиненныеЭлементы.ДанныеДляИндексацииГруппа.ПодчиненныеЭлементы.Рассчитать.Видимость = Объект.ИндексацияЗаработка;
	Элементы.ГруппаНачисленияДо.Видимость = Объект.ИндексацияЗаработка;
	Элементы.ГруппаНачисленияПосле.Видимость = Объект.ИндексацияЗаработка;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСведенияОВидеРасчета(ВидРасчета)
	
	Возврат ИНАГРО_ЗарплатаКадрыРасширенныйПовтИсп.ПолучитьСведенияОВидеРасчетаСхемыМотивации(ВидРасчета);
	
КонецФункции

&НаСервере
Процедура ПодучитьДанныеПоСотрудникуНаСервере(ДанныеСотрудника)
	
	ДанныеСотрудника.Вставить("ТабельныйНомер", ДанныеСотрудника.Сотрудник.Код);
	ДанныеСотрудника.Вставить("Дата", ?(Не ЗначениеЗаполнено(Объект.Дата), ТекущаяДата(), Объект.Дата));
	
	ИНАГРО_ПроведениеРасчетов.ПолучитьДанныеСотрудника(Объект.Дата, ДанныеСотрудника);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтобразитьОтборСтрок(ОтборУстановлен)
	
	Если ОтборУстановлен И Элементы.РаботникиОрганизации.ТекущиеДанные <> Неопределено Тогда    
	    Элементы.Начисления.ОтборСтрок = Новый ФиксированнаяСтруктура("Сотрудник", Элементы.РаботникиОрганизации.ТекущиеДанные.Сотрудник);
	    Элементы.Взносы.ОтборСтрок = Новый ФиксированнаяСтруктура("Сотрудник", Элементы.РаботникиОрганизации.ТекущиеДанные.Сотрудник);
	    Элементы.ВзносыФОТ.ОтборСтрок = Новый ФиксированнаяСтруктура("Сотрудник", Элементы.РаботникиОрганизации.ТекущиеДанные.Сотрудник);
	    Элементы.Удержания.ОтборСтрок = Новый ФиксированнаяСтруктура("Сотрудник", Элементы.РаботникиОрганизации.ТекущиеДанные.Сотрудник);
	    Элементы.НачисленияДо.ОтборСтрок = Новый ФиксированнаяСтруктура("Сотрудник", Элементы.РаботникиОрганизации.ТекущиеДанные.Сотрудник);
	    Элементы.НачисленияПосле.ОтборСтрок = Новый ФиксированнаяСтруктура("Сотрудник", Элементы.РаботникиОрганизации.ТекущиеДанные.Сотрудник);
	Иначе
	    Элементы.Начисления.ОтборСтрок = Неопределено;
	    Элементы.Взносы.ОтборСтрок = Неопределено;
	    Элементы.ВзносыФОТ.ОтборСтрок = Неопределено;
	    Элементы.Удержания.ОтборСтрок = Неопределено;
	    Элементы.НачисленияДо.ОтборСтрок = Неопределено;
	    Элементы.НачисленияПосле.ОтборСтрок = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьЗначениеРеквизитаСправочника(Справочник, ИмяРеквизита);
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Справочник, ИмяРеквизита);
	
КонецФункции

&НаСервере
Функция ПолучитьСтавкуВечерних(Организация)
	
	Возврат 100*РегистрыСведений.ИНАГРО_УчетнаяПолитикаПоПерсоналу.Получить(Новый Структура ("Организация", Организация)).КоэффициентВечерних;
	
КонецФункции

&НаСервере
Функция ПолучитьСтавкуНочных(Организация)
	
	Возврат 100*РегистрыСведений.ИНАГРО_УчетнаяПолитикаПоПерсоналу.Получить(Новый Структура ("Организация", Организация)).КоэффициентНочных;
	
КонецФункции

&НаКлиенте
Процедура ПодобратьСотрудников(МножественныйВыбор)
	
	КадровыйУчетКлиент.ВыбратьСотрудниковРаботающихВПериоде(
		ЭтаФорма, Объект.Организация, Неопределено,
		Объект.Дата, КонецМесяца(Объект.Дата), МножественныйВыбор,
		АдресСпискаПодобранныхСотрудников());
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСотрудников(Знач СписокСотрудников)
	
	СотрудникиКДобавлению = Новый Массив;
	Для каждого ДобавляемыйСотрудник Из СписокСотрудников Цикл
		
		Если Объект.РаботникиОрганизации.НайтиСтроки(Новый Структура("Сотрудник", ДобавляемыйСотрудник)).Количество() = 0 Тогда
			ТекущаяСтрока = Объект.РаботникиОрганизации.Добавить();
			ТекущаяСтрока.Сотрудник = ДобавляемыйСотрудник;
			ТекущаяСтрока.ДатаНачала = Объект.Дата; 
			
			Если ЗначениеЗаполнено(ТекущаяСтрока.Сотрудник) Тогда
				
				ДанныеСотрудника = Новый Структура ("Сотрудник, ФизическоеЛицо, 
				|ВидРасчета, ПодразделениеОрганизации, Должность, СпособОтраженияВБухучете, 
				|ПринятНаНовоеРабочееМесто, ГрафикРаботы, ЗанимаемыхСтавок");
				
				ЗаполнитьЗначенияСвойств(ДанныеСотрудника, ТекущаяСтрока);
				ПодучитьДанныеПоСотрудникуНаСервере(ДанныеСотрудника);
				ЗаполнитьЗначенияСвойств(ТекущаяСтрока, ДанныеСотрудника);
				
			КонецЕсли;
			
			Если РаботникТекущейСтроки <> ТекущаяСтрока.Сотрудник Тогда
				ДобавитьПереформироватьПараметрыРасчетаПоРаботнику(ТекущаяСтрока.Сотрудник, ДанныеСотрудника.Дата);
			КонецЕсли;
	
			РаботникТекущейСтроки = ТекущаяСтрока.Сотрудник;
		КонецЕсли; 
		
	КонецЦикла;
		
КонецПроцедуры

&НаСервере
Функция АдресСпискаПодобранныхСотрудников()
	
	Возврат ПоместитьВоВременноеХранилище(Объект.РаботникиОрганизации.Выгрузить(,"Сотрудник").ВыгрузитьКолонку("Сотрудник"), УникальныйИдентификатор);
	
КонецФункции

#Область ПроцедурыИФункцииОбработкиТабличныхЧастей

&НаКлиенте
// Добавляет или переопределяет строку в табличной части "Начисления" при изменении сотрудника 
// или формы оплаты труда у сотрудника.
//
Процедура УдалитьПереформироватьПараметрыРасчетаПоРаботнику(Сотрудник)
	
	УдалитьПараметрыРасчетаПоРаботнику(Сотрудник, "Начисления");
	УдалитьПараметрыРасчетаПоРаботнику(Сотрудник, "Взносы");
	УдалитьПараметрыРасчетаПоРаботнику(Сотрудник, "ВзносыФОТ");
	УдалитьПараметрыРасчетаПоРаботнику(Сотрудник, "Удержания");
	УдалитьПараметрыРасчетаПоРаботнику(Сотрудник, "НачисленияДо");
	УдалитьПараметрыРасчетаПоРаботнику(Сотрудник, "НачисленияПосле");
		
КонецПроцедуры // ПереформироватьПараметрыРасчетаПоРаботнику()

&НаКлиенте
// Добавляет или переопределяет строку в табличной части "Начисления" при изменении сотрудника 
// или формы оплаты труда у сотрудника.
//
Процедура ДобавитьПереформироватьПараметрыРасчетаПоРаботнику(Сотрудник, ДатаИзменения)
		
	ДобавитьНачисленияПоСтроке(Сотрудник, ДатаИзменения);  
	ДобавитьВзносыПоСтроке(Сотрудник, ДатаИзменения);
	ДобавитьУдержанияПоСтроке(Сотрудник, ДатаИзменения);
	
КонецПроцедуры // ПереформироватьПараметрыРасчетаПоРаботнику()

&НаСервере
// Удаляет начисления по работнику, все или автоматически заполняемые
// Параметры:
//   Сотрудник - СправочникСсылка.Физлица
//   УдалятьВсе - булево, если Истина - удаляются все начисления по физлицу,
//				например, при его удалении из списка.
//				Если Ложь - удаляются только те, которые вводятся "автоматически",
//				например, при редактировании данных по строке табличной части 
//				со списком работников
Процедура УдалитьПараметрыРасчетаПоРаботнику(Сотрудник, ИмяТабЧасти)
	
	ИНАГРО_ЗарплатаКадрыРасширенный.УдалитьПараметрыРасчетаПоРаботнику(Сотрудник, ИмяТабЧасти, Объект)
	
КонецПроцедуры  // УдалитьПараметрыРасчетаПоРаботнику

&НаКлиенте
Процедура ТЧПриАктивизацииСтроки(ИмяТЧ, Элемент)
	ТекСтрокаРаботник = Элементы.РаботникиОрганизации.ТекущиеДанные;
	Если Не ТекСтрокаРаботник = Неопределено Тогда
		ТекущиеДанныеРаботник = ТекСтрокаРаботник.Сотрудник;
	Иначе
		ТекущиеДанныеРаботник = Неопределено
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущиеДанныеРаботник) Тогда
		ТекущиеДанные = Элементы[ИмяТЧ].ТекущиеДанные;
		
		Если ТекущиеДанные = Неопределено Тогда
			РаботникТекущейСтроки = Неопределено;
			Возврат;
		КонецЕсли;
		
		// запомним текущего сотрудника
		РаботникТекущейСтроки = ТекущиеДанные.Сотрудник;
		
		СинхронизируемыеТабличныеЧасти = Новый Соответствие;
		СинхронизируемыеТабличныеЧасти["РаботникиОрганизации"]	= Ложь;
		СинхронизируемыеТабличныеЧасти["Начисления"]	    	= Ложь;
		СинхронизируемыеТабличныеЧасти["Взносы"]	    		= Ложь;
		СинхронизируемыеТабличныеЧасти["ВзносыФОТ"]	    		= Ложь;
		СинхронизируемыеТабличныеЧасти["Удержания"]	    		= Ложь;
		СинхронизируемыеТабличныеЧасти["НачисленияДо"]	    	= Ложь;
		СинхронизируемыеТабличныеЧасти["НачисленияПосле"]	    = Ложь;
		
		ИНАГРО_ЗарплатаКадрыРасширенныйКлиент.СинхронизироватьСтроки(Элементы, Объект, ИмяТЧ, СинхронизируемыеТабличныеЧасти, "Сотрудник");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТабличнаяЧастьПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока И Не Элементы.РаботникиОрганизации.ТекущиеДанные = Неопределено Тогда
		Элемент.ТекущиеДанные.Сотрудник = Элементы.РаботникиОрганизации.ТекущиеДанные.Сотрудник;
		Элемент.ТекущиеДанные.Действие = ПредопределенноеЗначение("Перечисление.ВидыДействияСНачислением.Начать");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОкончанииРедактированияТЧ(Элемент, НоваяСтрока, ОтменаРедактирования, ИмяТЧ)
	
	Если ОтменаРедактирования Тогда
		Возврат
	КонецЕсли;
	Если Элементы[ИмяТЧ].ТекущиеДанные.Действие = ПредопределенноеЗначение("Перечисление.ВидыДействияСНачислением.Прекратить") Тогда
		Элементы[ИмяТЧ].ТекущиеДанные.Показатель1 = 0;
		Элементы[ИмяТЧ].ТекущиеДанные.Показатель2 = 0;
		Элементы[ИмяТЧ].ТекущиеДанные.Показатель3 = 0;
		Элементы[ИмяТЧ].ТекущиеДанные.Показатель4 = 0;
		Элементы[ИмяТЧ].ТекущиеДанные.Показатель5 = 0;
		Элементы[ИмяТЧ].ТекущиеДанные.Показатель6 = 0;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьТаблицыНачисленийЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт 
   	
    Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
        Возврат;
	Иначе 
		Объект.НачисленияДо.Очистить();
		Объект.НачисленияПосле.Очистить();
	КонецЕсли;
			
	ВыполнитьАвтозаполнениеНаСервере();
	ПодготовитьФормуНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьТаблицыЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт 
   	
    Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
        Возврат;
	Иначе 
		Объект.РаботникиОрганизации.Очистить();
		Объект.Начисления.Очистить();
		Объект.Взносы.Очистить();
		Объект.ВзносыФОТ.Очистить();
		Объект.Удержания.Очистить();
		Объект.НачисленияДо.Очистить();
		Объект.НачисленияПосле.Очистить();
	КонецЕсли;
			
	ИНАГРО_ЗарплатаКадрыРасширенныйКлиент.ОткрытьФормуОтбораСпискаРаботников(ЭтаФорма)
		     
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыИФункцииАвтозаполнение

&НаСервере
Процедура ВыполнитьАвтозаполнениеНаСервере()
	
	Если Не Записать() Тогда
		Возврат;
	КонецЕсли;
	
	Документ = РеквизитФормыВЗначение("Объект");
  	Документ.Автозаполнение();
  	ЗначениеВРеквизитФормы(Документ, "Объект");	
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьРасчетНаСервере()
	
	Документ = РеквизитФормыВЗначение("Объект");
  	Документ.РассчитатьДанные();
  	ЗначениеВРеквизитФормы(Документ, "Объект");	
	
КонецПроцедуры

&НаКлиенте
Процедура АвтозаполнениеПослеОтветаНаВопросЗаписать(Ответ, ПараметрыВыполнения) Экспорт
	Если Ответ <> КодВозвратаДиалога.ОК Тогда
		Возврат;
	КонецЕсли;
	
	Если Не Записать() Тогда
		Возврат;
	КонецЕсли;
		
	ВыполнитьАвтозаполнениеНаСервере();
	ПодготовитьФормуНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура АвторасчетПослеОтветаНаВопросЗаписать(Ответ, ПараметрыВыполнения) Экспорт
	Если Ответ <> КодВозвратаДиалога.ОК Тогда
		Возврат;
	КонецЕсли;
	
	ВыполнитьРасчетНаСервере();
	ПодготовитьФормуНаСервере();
КонецПроцедуры

&НаСервере
// Добавляет строку с начислением работника.
Процедура ДобавитьНачисленияПоСтроке(Сотрудник, ДатаИзменения, Все = Истина)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Начисления.ВидРасчета			КАК ВидРасчета,
	|	Начисления.ВидНачисления		КАК ВидНачисления,
	|   Начисления.Сотрудник			КАК Сотрудник,
	|	Начисления.Показатель1			КАК Показатель1,
	|	Начисления.Показатель2			КАК Показатель2,
	|	Начисления.Показатель3			КАК Показатель3,
	|	Начисления.Показатель4			КАК Показатель4,
	|	Начисления.Показатель5			КАК Показатель5,
	|	Начисления.Показатель6			КАК Показатель6,
	|	Начисления.СпособОтраженияВБухучете	КАК СпособОтраженияВБухучете
	|
	|ИЗ
	|	РегистрСведений.ИНАГРО_ПлановыеНачисленияРаботниковОрганизаций.СрезПоследних(&ДатаНачала, Сотрудник = &Сотрудник) КАК Начисления
	|
	|ГДЕ
	|	Начисления.ВидРасчета <> &ПустойВидРасчета
	|	И Начисления.Действует = ИСТИНА
	|";
	
	Запрос.УстановитьПараметр("ДатаНачала", ДатаИзменения);
	Запрос.УстановитьПараметр("Сотрудник",Сотрудник);
	Запрос.УстановитьПараметр("ПустойВидРасчета", ПланыВидовРасчета.ИНАГРО_Начисления.ПустаяСсылка());
	
	
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	
	Пока РезультатЗапроса.Следующий() Цикл
		// основное начисление
		СтрокаТЧ = Объект.Начисления.Добавить();	
		
		СтрокаТЧ.Сотрудник  	= РезультатЗапроса.Сотрудник;
		СтрокаТЧ.Назначение  	= РезультатЗапроса.Сотрудник;
		СтрокаТЧ.ВидРасчета		= РезультатЗапроса.ВидРасчета;
		СтрокаТЧ.ВидНачисления	= РезультатЗапроса.ВидНачисления;
		УстановитьВидимостьПоказателейНаСервере(СтрокаТЧ);
		
		Если СтрокаТЧ.ВидНачисления	= Перечисления.ИНАГРО_ВидыНачисленийРаботникаОрганизации.Индивидуальное Или Все Тогда
			СтрокаТЧ.Действие 		= Перечисления.ВидыДействияСНачислением.НеИзменять;
			СтрокаТЧ.Показатель1	= РезультатЗапроса.Показатель1;
			СтрокаТЧ.Показатель2	= РезультатЗапроса.Показатель2;
			СтрокаТЧ.Показатель3	= РезультатЗапроса.Показатель3;
			СтрокаТЧ.Показатель4	= РезультатЗапроса.Показатель4;
			СтрокаТЧ.Показатель5	= РезультатЗапроса.Показатель5;
			СтрокаТЧ.Показатель6	= РезультатЗапроса.Показатель6;
			СтрокаТЧ.СпособОтраженияВБухучете = РезультатЗапроса.СпособОтраженияВБухучете;
		Иначе
			СтрокаТЧ.Действие 		= Перечисления.ВидыДействияСНачислением.Прекратить;
		КонецЕсли;	
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
// Добавляет строку с удержаниями работника.
Процедура ДобавитьУдержанияПоСтроке(Сотрудник, ДатаИзменения)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Удержания.ВидРасчета КАК ВидРасчета,
	|	Удержания.Сотрудник КАК Сотрудник,
	|	Удержания.Показатель1 КАК Показатель1,
	|	Удержания.Показатель2 КАК Показатель2,
	|	Удержания.Показатель3 КАК Показатель3,
	|	Удержания.Показатель4 КАК Показатель4,
	|	Удержания.Показатель5 КАК Показатель5,
	|	Удержания.Показатель6 КАК Показатель6,
	|	Удержания.СпособОтраженияВБухучете КАК СпособОтраженияВБухучете
	|ИЗ
	|	РегистрСведений.ИНАГРО_ПлановыеУдержанияРаботниковОрганизаций.СрезПоследних(&ДатаНачала, Сотрудник = &Сотрудник) КАК Удержания
	|ГДЕ
	|	Удержания.Действует = ИСТИНА";
	
	Запрос.УстановитьПараметр("Сотрудник",Сотрудник);
	Запрос.УстановитьПараметр("ДатаНачала", ДатаИзменения);
	
	
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	
	Пока РезультатЗапроса.Следующий() Цикл
		// основное начисление
		СтрокаТЧ = Объект.Удержания.Добавить();	
		
		СтрокаТЧ.Сотрудник  	= РезультатЗапроса.Сотрудник;
		СтрокаТЧ.Назначение  	= РезультатЗапроса.Сотрудник;
		СтрокаТЧ.Действие 		= Перечисления.ВидыДействияСНачислением.НеИзменять;
		СтрокаТЧ.ВидРасчета		= РезультатЗапроса.ВидРасчета;
		УстановитьВидимостьПоказателейНаСервере(СтрокаТЧ);

		СтрокаТЧ.Показатель1	= РезультатЗапроса.Показатель1;
		СтрокаТЧ.Показатель2	= РезультатЗапроса.Показатель2;
		СтрокаТЧ.Показатель3	= РезультатЗапроса.Показатель3;
		СтрокаТЧ.Показатель4	= РезультатЗапроса.Показатель4;
		СтрокаТЧ.Показатель5	= РезультатЗапроса.Показатель5;
		СтрокаТЧ.Показатель6	= РезультатЗапроса.Показатель6;
		СтрокаТЧ.СпособОтраженияВБухучете = РезультатЗапроса.СпособОтраженияВБухучете;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
// Добавляет строку со взносами работника.
Процедура ДобавитьВзносыПоСтроке(Сотрудник, ДатаИзменения)
	
	ЗапросВзносы = Новый Запрос;
	ЗапросВзносы.УстановитьПараметр("Сотрудник", Сотрудник);
	ЗапросВзносы.УстановитьПараметр("Организация", Объект.Организация);
	ЗапросВзносы.УстановитьПараметр("ДатаНачала",ДатаИзменения);
	ЗапросВзносы.УстановитьПараметр("Ссылка", Объект.Ссылка);
	ЗапросВзносы.УстановитьПараметр("ПустойВзнос", Справочники.Налоги.ПустаяСсылка());
	ЗапросВзносы.УстановитьПараметр("ВзносыФОТ", Справочники.Налоги.ВзносыФОТ);
	
	ЗапросВзносы.Текст = 
	"ВЫБРАТЬ
	|	ВЫБОР КОГДА Налог.Родитель=&ВзносыФОТ ТОГДА ""ВзносыФОТ"" ИНАЧЕ ""Взносы"" КОНЕЦ КАК ВидВзносов,
	|	Взносы.Сотрудник КАК Сотрудник,
	|	&Организация	КАК Организация,
	|	Взносы.Налог	КАК Налог	
	|ИЗ
	|	РегистрСведений.ИНАГРО_ВзносыВФондыРаботниковОрганизаций.СрезПоследних(&ДатаНачала, Организация = &Организация И Сотрудник = &Сотрудник) КАК Взносы
	|
	|ГДЕ
	|	(Взносы.Налог <> &ПустойВзнос)
	|   И Взносы.Действует";
	ВыборкаВзносы = ЗапросВзносы.Выполнить().Выбрать();
		
	СтруктураПоиска = Новый Структура("Сотрудник, Налог, Действие"); 
	СтруктураПоиска.Действие   = Перечисления.ВидыДействияСНачислением.НеИзменять;
	Пока ВыборкаВзносы.Следующий() Цикл
		
		СтруктураПоиска.Сотрудник    	= ВыборкаВзносы.Сотрудник;
		СтруктураПоиска.Налог 	= ВыборкаВзносы.Налог;
		Если ВыборкаВзносы.ВидВзносов 	= "ВзносыФОТ" Тогда
			МассивВзносов = Объект.ВзносыФОТ.НайтиСтроки(СтруктураПоиска);
		Иначе	
			МассивВзносов = Объект.Взносы.НайтиСтроки(СтруктураПоиска);
		КонецЕсли; 
		
		Если МассивВзносов.Количество() <> 0 Тогда
			Продолжить;
		КонецЕсли; 

		Если ВыборкаВзносы.ВидВзносов = "ВзносыФОТ" Тогда
			НоваяСтрокаТЧ 					= Объект.ВзносыФОТ.Добавить();
		Иначе
			НоваяСтрокаТЧ 					= Объект.Взносы.Добавить();
		КонецЕсли;			
		
		НоваяСтрокаТЧ.Сотрудник	 		= ВыборкаВзносы.Сотрудник;
		НоваяСтрокаТЧ.Налог		 		= ВыборкаВзносы.Налог;
		НоваяСтрокаТЧ.Действие   		= Перечисления.ВидыДействияСНачислением.НеИзменять;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьГрупповоеЗаполнение(Параметр)
	
	ВыполнитьГрупповоеЗаполнениеНаСервере(Параметр);	//	
	
	Для Каждого ТекущаяСтрока Из Объект.РаботникиОрганизации Цикл
		ДобавитьПереформироватьПараметрыРасчетаПоРаботнику(ТекущаяСтрока.Сотрудник, ТекущаяСтрока.ДатаНачала);
	КонецЦикла;
	Если Не ТекущаяСтрока = Неопределено Тогда
		РаботникТекущейСтроки = ТекущаяСтрока.Сотрудник;
	Иначе 
		РаботникТекущейСтроки = Неопределено;
	КонецЕсли;
	
	ПодготовитьФормуНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьГрупповоеЗаполнениеНаСервере(Параметр)
	
	ТаблицаСотрудников = ПолучитьИзВременногоХранилища(Параметр.АдресТЗ);

	Объект.РаботникиОрганизации.Загрузить(ТаблицаСотрудников);
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьГрупповоеИзменение(Параметр)
	
	СписокПоказателей = ПолучитьИзВременногоХранилища(Параметр.АдресСписокПоказателей);
	
	Если Параметр.Действие = "Добавить" Тогда
		Для Каждого ТекСтрока Из Объект.РаботникиОрганизации Цикл
			СтруктураПоиска = Новый Структура("Сотрудник,ВидРасчета", ТекСтрока.Сотрудник, Параметр.ВидРасчета);
			НайденныеСтроки = Объект.Начисления.НайтиСтроки(СтруктураПоиска);
			Если НайденныеСтроки.Количество() = 0 Тогда
				НС = Объект.Начисления.Добавить();
				НС.Сотрудник = ТекСтрока.Сотрудник;
				НС.Назначение = ТекСтрока.Сотрудник;
				НС.ВидРасчета = Параметр.ВидРасчета;
				НС.ВидНачисления = Параметр.ВидНачисления;
				НС.Действие = Перечисления.ВидыДействияСНачислением.Начать;
				Для Каждого Показатель Из СписокПоказателей Цикл
					НС["Показатель"+Показатель.Номер] = Показатель.Значение;
				КонецЦикла;
			КонецЕсли;	
		КонецЦикла;
		Объект.Начисления.Сортировать("Сотрудник");
	ИначеЕсли Параметр.Действие = "Изменить" Тогда
		Для Каждого ТекСтрока Из Объект.Начисления Цикл
			Если ТекСтрока.ВидРасчета <> Параметр.ВидРасчета Тогда
				Продолжить;
			КонецЕсли;
			
			Для Каждого Показатель Из СписокПоказателей Цикл
				Если Показатель.Действие = "УстановитьЗначение" Тогда
					ТекСтрока["Показатель"+Показатель.Номер] = Показатель.Значение;
				ИначеЕсли Показатель.Действие = "Суммой" Тогда
					ТекСтрока["Показатель"+Показатель.Номер] = ТекСтрока["Показатель"+Показатель.Номер]+Показатель.Значение;	
				ИначеЕсли Показатель.Действие = "Процентом" Тогда
					ТекСтрока["Показатель"+Показатель.Номер] = ТекСтрока["Показатель"+Показатель.Номер]+ТекСтрока["Показатель"+Показатель.Номер]*Показатель.Значение/100;	
				КонецЕсли;	
			КонецЦикла;
			ТекСтрока.Действие = Перечисления.ВидыДействияСНачислением.Изменить;
		КонецЦикла;
		
	ИначеЕсли Параметр.Действие = "Удалить" Тогда
		Для Каждого ТекСтрока Из Объект.Начисления Цикл
			Если ТекСтрока.ВидРасчета <> Параметр.ВидРасчета Тогда
				Продолжить;
			КонецЕсли;
			ТекСтрока.Действие = Перечисления.ВидыДействияСНачислением.Прекратить;
		КонецЦикла;
	КонецЕсли;
	
	ПодготовитьФормуНаСервере();
	
КонецПроцедуры

#КонецОбласти 

#КонецОбласти

#Область СлужебныеПроцедурыИФункцииБСП

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти
















