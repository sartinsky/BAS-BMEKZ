
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЗаполнитьНачальныеНастройки();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	
	Если ПеренестиВДокумент Тогда
		СтруктураВозврата = ПриЗакрытииНаСервере();
		СтруктураВозврата.Вставить("ИдентификаторВызывающейФормы", ВладелецФормы.УникальныйИдентификатор);
		Оповестить("ГрупповоеИзменение", СтруктураВозврата, ВладелецФормы);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ВидРасчетаПриИзменении(Элемент)
	
	Показатели.Очистить();
	
	Если Действие = "Удалить" Тогда
		Возврат;
	КонецЕсли;	
	
	СведенияОВидеРасчета = ПолучитьСведенияОВидеРасчета(ВидРасчета);	
	
	Для СчПоказателей = 1 По СведенияОВидеРасчета.КоличествоПоказателей  Цикл
		Если СведенияОВидеРасчета["Показатель"+счПоказателей+"Видимость"] Тогда
			НС = Показатели.Добавить();
			НС.Номер = СчПоказателей;
			НС.Показатель = СведенияОВидеРасчета["Показатель"+счПоказателей+"Наименование"];
			НС.Действие = "УстановитьЗначение";
		КонецЕсли;	
	КонецЦикла;	

КонецПроцедуры

&НаКлиенте
Процедура ДействиеПриИзменении(Элемент)
	
	Если Действие = "Удалить" Тогда
		Показатели.Очистить();
	ИначеЕсли Действие = "Добавить" Тогда
		Элементы.ПоказателиДействие.Видимость = Ложь;
		Элементы.ВидНачисления.Видимость = Истина;
		УстановитьВидНачисления();
	Иначе
		Элементы.ПоказателиДействие.Видимость = Истина;
		Элементы.ВидНачисления.Видимость = Ложь;
	КонецЕсли;	

КонецПроцедуры

&НаКлиенте
Процедура СписокПоказателейДействиеПриИзменении(Элемент)
	
	Если Элементы.Показатели.ТекущиеДанные.Действие = "НеИзменять" Тогда
		 Элементы.Показатели.ТекущиеДанные.Значение = 0;
	КонецЕсли;	 

КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Отменить(Команда)
	Закрыть();
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЗаполнение(Команда)
	
	ПеренестиВДокумент = Истина;	
	Закрыть();

КонецПроцедуры

#КонецОбласти 

#Область СлужебныеПроцедурыИФункции

&НаСервере
Функция ПриЗакрытииНаСервере()
	
	СтруктураВозврата = Новый Структура;
	
	СтруктураВозврата.Вставить("ВидРасчета", 	ВидРасчета);
	СтруктураВозврата.Вставить("Действие",   	Действие);
	СтруктураВозврата.Вставить("ВидНачисления", ВидНачисления);
	
	СтруктураВозврата.Вставить("АдресСписокПоказателей",   ПоместитьПоказателиВХранилище());
	Возврат СтруктураВозврата;		
КонецФункции

&НаСервере
Процедура ЗаполнитьНачальныеНастройки()
	
	ВидРасчета = ПланыВидовРасчета.ИНАГРО_Начисления.ОкладПоДням;
	Действие = "Изменить";
	
	СведенияОВидеРасчета = ИНАГРО_ЗарплатаКадрыРасширенныйПовтИсп.ПолучитьСведенияОВидеРасчетаСхемыМотивации(ВидРасчета);	
	Для СчПоказателей = 1 По СведенияОВидеРасчета.КоличествоПоказателей Цикл
		Если СведенияОВидеРасчета["Показатель"+счПоказателей+"Видимость"] <> Неопределено Тогда
			Если СведенияОВидеРасчета["Показатель"+счПоказателей+"Видимость"] Тогда
				НС = Показатели.Добавить();
				НС.Номер = СчПоказателей;
				НС.Показатель = СведенияОВидеРасчета["Показатель"+счПоказателей+"Наименование"];
				НС.Действие = "УстановитьЗначение";
			КонецЕсли;
			
		КонецЕсли;	
	КонецЦикла;	
	
	Элементы.ВидНачисления.Видимость = Ложь;
	
КонецПроцедуры

&НаСервере
Функция ПоместитьПоказателиВХранилище()

	ТаблицаПоказатели = Показатели.Выгрузить();

	Возврат ПоместитьВоВременноеХранилище(ТаблицаПоказатели);
КонецФункции

&НаКлиенте
Процедура УстановитьВидНачисления()
	
	Если Действие <> "Добавить" Тогда
		Возврат;
	КонецЕсли;
	
	ВидНачисления = ПредопределенноеЗначение("Перечисление.ИНАГРО_ВидыНачисленийРаботникаОрганизации.Индивидуальное");	
КонецПроцедуры

&НаСервере
Функция ПолучитьСведенияОВидеРасчета(ВидРасчета)
	
	Возврат ИНАГРО_ЗарплатаКадрыРасширенныйПовтИсп.ПолучитьСведенияОВидеРасчетаСхемыМотивации(ВидРасчета);
	
КонецФункции

#КонецОбласти 



