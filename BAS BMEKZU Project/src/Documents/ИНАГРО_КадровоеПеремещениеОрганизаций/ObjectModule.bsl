#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ИНАГРО_ПроведениеРасчетов.СформироватьКраткийСоставСотрудников(ЭтотОбъект, "РаботникиОрганизации");

КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	Заголовок = ОбщегоНазначенияБПВызовСервера.ПредставлениеДокументаПриПроведении(Ссылка);
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКПроведению(ЭтотОбъект);
	
	РезультатЗапросаПоШапке = СформироватьЗапросПоШапке(РежимПроведения);
	ПрименяетсяФиксированнаяИндексация = (ИНАГРО_ПроведениеРасчетов.ДатаВводаФиксированнойИндексации() <= Дата);
	// Получим реквизиты шапки из запроса
	ВыборкаПоШапкеДокумента = РезультатЗапросаПоШапке.Выбрать();
	
	Если ВыборкаПоШапкеДокумента.Следующий() Тогда
		
		// Движения стоит добавлять, если в проведении еще не отказано (отказ = ложь)
		Если НЕ Отказ Тогда
			
			РезультатЗапросаПоРаботники	= 	СформироватьЗапросПоРаботникиОрганизаций(РежимПроведения);
			ВыборкаПоСтрокамДокумента 	= 	РезультатЗапросаПоРаботники.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			
			Пока ВыборкаПоСтрокамДокумента.Следующий() Цикл 
				
				// проверим очередную строку табличной части
				ПроверитьЗаполнениеСтрокиРаботникаОрганизации(ВыборкаПоШапкеДокумента,ВыборкаПоСтрокамДокумента, Отказ);
				
				Если НЕ Отказ Тогда
					
					// Заполним записи в наборах записей регистров
					ДобавитьСтрокуВДвиженияПоРаботникиОрганизации(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента);
					Если ИндексацияЗаработка И ПрименяетсяФиксированнаяИндексация Тогда
                    	ДобавитьСтрокуВДвиженияПоРегистрам(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента);
					КонецЕсли;	
				КонецЕсли;
				
			КонецЦикла;
			
			// Надо закрыть способы расчета по сотрудникам, 
			// если не изменился	- движения не делаем, 
			// если новый пустой	- закрываем, 
			// если другой			- просто записываем новый.
			ВыборкаПоСтрокамРаботники = СформироватьЗапросПоРаботникиОрганизацийСтарыеОтраженияЗП().Выбрать();
			
			// плановые начисления
			Если НЕ Отказ Тогда
				// выполним выборку по табличной части основных начислений				
				ВыборкаПоСтрокамДокумента = СформироватьЗапросПроверкаНачисления().Выбрать();
				Движения.ИНАГРО_ПлановыеНачисленияРаботниковОрганизаций.Записать();
				// обходим строки документа
				Пока ВыборкаПоСтрокамДокумента.Следующий() Цикл
					ПроверитьЗаполнениеСтрокиНачисления(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента, Отказ);
					Если Не Отказ Тогда
						
						Если ВыборкаПоСтрокамДокумента.Действие = Перечисления.ВидыДействияСНачислением.НеИзменять Тогда
							Продолжить;
						КонецЕсли;
						
						Если ВыборкаПоСтрокамДокумента.Действие = Перечисления.ВидыДействияСНачислением.НеИзменять Тогда
							// ничего не меняем
							Продолжить;
							
						ИначеЕсли ВыборкаПоСтрокамДокумента.Действие = Перечисления.ВидыДействияСНачислением.Изменить Тогда
							мПериод = ВыборкаПоСтрокамДокумента.ДатаНачала-1;
							мДействует	= Ложь;
							ДобавитьСтрокуВДвиженияПоНачислениям(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента,мПериод,мДействует);
							
							мПериод = ВыборкаПоСтрокамДокумента.ДатаНачала;
							мДействует	= Истина;
							ДобавитьСтрокуВДвиженияПоНачислениям(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента,мПериод,мДействует);
							
						ИначеЕсли ВыборкаПоСтрокамДокумента.Действие = Перечисления.ВидыДействияСНачислением.Начать Тогда
							мПериод = ВыборкаПоСтрокамДокумента.ДатаНачала;
							мДействует	= Истина;
							ДобавитьСтрокуВДвиженияПоНачислениям(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента,мПериод,мДействует);
							
						ИначеЕсли ВыборкаПоСтрокамДокумента.Действие = Перечисления.ВидыДействияСНачислением.Прекратить Тогда
							// движение на вечер предыдущих суток
							мПериод = ВыборкаПоСтрокамДокумента.ДатаНачала - 1;
							мДействует	= Ложь;
							ДобавитьСтрокуВДвиженияПоНачислениям(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента,мПериод,мДействует);
							
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
			// плановые удержания
			Если НЕ Отказ Тогда
				// выполним выборку по табличной части Удержания
				ВыборкаПоСтрокамДокумента = СформироватьЗапросПоУдержания().Выбрать();
				
				// обходим строки документа
				Пока ВыборкаПоСтрокамДокумента.Следующий() Цикл
					
					Если ВыборкаПоСтрокамДокумента.Действие = Перечисления.ВидыДействияСНачислением.НеИзменять Тогда
						Продолжить;
					КонецЕсли;
					
					Если ВыборкаПоСтрокамДокумента.Действие = Перечисления.ВидыДействияСНачислением.НеИзменять Тогда
						// ничего не меняем
						Продолжить;
						
					ИначеЕсли ВыборкаПоСтрокамДокумента.Действие = Перечисления.ВидыДействияСНачислением.Изменить Тогда
						мПериод = ВыборкаПоСтрокамДокумента.ДатаНачала-1;
						мДействует	= Ложь;
						ДобавитьСтрокуВДвиженияПоУдержаниям(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента,мПериод,мДействует);
						
						мПериод = ВыборкаПоСтрокамДокумента.ДатаНачала;
						мДействует	= Истина;
						ДобавитьСтрокуВДвиженияПоУдержаниям(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента,мПериод,мДействует);
						
					ИначеЕсли ВыборкаПоСтрокамДокумента.Действие = Перечисления.ВидыДействияСНачислением.Начать Тогда
						мПериод = ВыборкаПоСтрокамДокумента.ДатаНачала;
						мДействует	= Истина;
						ДобавитьСтрокуВДвиженияПоУдержаниям(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента,мПериод,мДействует);
						
					ИначеЕсли ВыборкаПоСтрокамДокумента.Действие = Перечисления.ВидыДействияСНачислением.Прекратить Тогда
						// движение на вечер предыдущих суток
						мПериод = ВыборкаПоСтрокамДокумента.ДатаНачала - 1;
						мДействует	= Ложь;
						ДобавитьСтрокуВДвиженияПоУдержаниям(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента,мПериод,мДействует);
						
					КонецЕсли;
					
				КонецЦикла;
			КонецЕсли;
			
			РезультатЗапросаПоВзносам = СформироватьЗапросПоВзносамСотрудники(РежимПроведения);
			ВыборкаПоВзносам = РезультатЗапросаПоВзносам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			
			Пока ВыборкаПоВзносам.Следующий() Цикл 
				
				// Заполним записи в наборах записей регистров
				ДобавитьСтрокуВДвиженияПоВзносамВФонды(ВыборкаПоШапкеДокумента, ВыборкаПоВзносам);
				
			КонецЦикла;
			
		КонецЕсли; 
		
	КонецЕсли;

КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКОтменеПроведения(ЭтотОбъект);
	Движения.Записать();

КонецПроцедуры

#КонецОбласти

#Область Проведение

// Формирует запрос по шапке документа
//
// Параметры: 
//  Режим - режим проведения
//
// Возвращаемое значение:
//  Результат запроса
//
Функция СформироватьЗапросПоШапке(Режим)
	
	Запрос = Новый Запрос;
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка",         ЭтотОбъект.Ссылка);
	Запрос.УстановитьПараметр("ПустаяОрганизация",      Справочники.Организации.ПустаяСсылка());
	Запрос.УстановитьПараметр("ИндексацияПоДолжностям", ИНАГРО_ПроведениеРасчетов.ДатаВводаИндексацииПоДолжностям() <= Дата);
	
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КадровоеПеремещениеОрганизаций.Дата КАК Дата,
		|	КадровоеПеремещениеОрганизаций.Организация КАК Организация,
		|	ВЫБОР
		|		КОГДА КадровоеПеремещениеОрганизаций.Организация.ГоловнаяОрганизация = &ПустаяОрганизация
		|			ТОГДА КадровоеПеремещениеОрганизаций.Организация
		|		ИНАЧЕ КадровоеПеремещениеОрганизаций.Организация.ГоловнаяОрганизация
		|	КОНЕЦ КАК ГоловнаяОрганизация,
		|	КадровоеПеремещениеОрганизаций.ИндексацияЗаработка КАК ИндексацияЗаработка,
		|	&ИндексацияПоДолжностям КАК ИндексацияПоДолжностям,
		|	КадровоеПеремещениеОрганизаций.Ссылка КАК Ссылка,
		|	КадровоеПеремещениеОрганизаций.Организация КАК ОбособленноеПодразделение,
		|	КадровоеПеремещениеОрганизаций.Дата КАК ПериодРегистрации
		|ИЗ
		|	Документ.ИНАГРО_КадровоеПеремещениеОрганизаций КАК КадровоеПеремещениеОрганизаций
		|ГДЕ
		|	КадровоеПеремещениеОрганизаций.Ссылка = &ДокументСсылка";
	
	Возврат Запрос.Выполнить();
	
КонецФункции

// Выполняет формирование запроса.
//
Функция СформироватьЗапросПоНачислениям() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТЧНачисления.Сотрудник КАК Сотрудник,
		|	ТЧНачисления.Действие КАК Действие,
		|	ТЧНачисления.ВидРасчета КАК ВидРасчета,
		|	ТЧНачисления.Показатель1 КАК Показатель1,
		|	ТЧНачисления.Показатель2 КАК Показатель2,
		|	ТЧНачисления.Показатель3 КАК Показатель3,
		|	ТЧНачисления.Показатель4 КАК Показатель4,
		|	ТЧНачисления.Показатель5 КАК Показатель5,
		|	ТЧНачисления.Показатель6 КАК Показатель6,
		|	ТЧНачисления.СпособОтраженияВБухучете КАК СпособОтраженияВБухучете,
		|	ТЧНачисления.ВидНачисления КАК ВидНачисления,
		|	КадровоеПеремещениеОрганизацийРаботникиОрганизации.ДатаНачала КАК ДатаНачала
		|ИЗ
		|	Документ.ИНАГРО_КадровоеПеремещениеОрганизаций.Начисления КАК ТЧНачисления
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ИНАГРО_КадровоеПеремещениеОрганизаций.РаботникиОрганизации КАК КадровоеПеремещениеОрганизацийРаботникиОрганизации
		|		ПО ТЧНачисления.Сотрудник = КадровоеПеремещениеОрганизацийРаботникиОрганизации.Сотрудник
		|ГДЕ
		|	КадровоеПеремещениеОрганизацийРаботникиОрганизации.Ссылка = &Регистратор
		|	И ТЧНачисления.Ссылка = &Регистратор";
	
	Запрос.УстановитьПараметр("Регистратор",Ссылка);			   
	
	Возврат Запрос.Выполнить();
	
КонецФункции

// Выполняет формирование запроса.
//
Функция СформироватьЗапросПоНачислениямДоПосле(ИмяТЧ,Сотрудники) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументСсылка", ЭтотОбъект.Ссылка);
	Запрос.УстановитьПараметр("ПериодРегистрации", НачалоМесяца(Дата));
	
	Если НЕ (Сотрудники = Неопределено) Тогда
		Запрос.УстановитьПараметр("парамСотрудники", Сотрудники);
		УсловиеНаФизлицоТекст = " И СтрокиНачисления.Сотрудник В (&парамСотрудники) ";
	Иначе
		УсловиеНаФизлицоТекст="";
	КонецЕсли;

	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	// Свойства
	|	&ПериодРегистрации	КАК ПериодРегистрации,
	|	СтрокиНачисления.ДатаНачала					КАК ПериодДействияНачало,
	|	СтрокиНачисления.ДатаОкончания				КАК ПериодДействияКонец,
	|	СтрокиНачисления.БазовыйПериодНачало,
	|	СтрокиНачисления.БазовыйПериодКонец,
	|	СтрокиНачисления.ВидРасчета,
	|	СтрокиНачисления.Сторно,
	|
	// Измерения
	|	СтрокиНачисления.Ссылка.Организация КАК организация,
	|	СтрокиНачисления.Сотрудник,
	|	СтрокиНачисления.Назначение,
	|
	// Ресурсы
	|	СтрокиНачисления.Результат,	
	|	СтрокиНачисления.ОплаченоДнейЧасов,
	|	СтрокиНачисления.ОтработаноДней,
	|	СтрокиНачисления.ОтработаноЧасов,
	|	СтрокиНачисления.НормаДней,
	|	СтрокиНачисления.НормаЧасов,
	|	СтрокиНачисления.КалендарныеДни,
	|
	// Реквизиты
	|	СтрокиНачисления.Авторасчет,
	|	СтрокиНачисления.НомерСтроки,
	|	СтрокиНачисления.ПодразделениеОрганизации,
	|	СтрокиНачисления.Должность,
	|	СтрокиНачисления.СпособОтраженияВБухучете,
	|	СтрокиНачисления.ДокументОснование,
	|	СтрокиНачисления.Показатель1,
	|	СтрокиНачисления.Показатель2,
	|	СтрокиНачисления.Показатель3,
	|	СтрокиНачисления.Показатель4,
	|	СтрокиНачисления.Показатель5,
	|	СтрокиНачисления.Показатель6,
	|	СтрокиНачисления.НормаДнейЗаМесяц,
	|	СтрокиНачисления.НормаЧасовЗаМесяц,
	|	СтрокиНачисления.ГрафикРаботы,
	|   ВЫБОР	КОГДА СтрокиНачисления.ГрафикРаботы ССЫЛКА Справочник.ИНАГРО_ГрафикиРаботы
	|			ТОГДА NULL
	|			ИНАЧЕ СтрокиНачисления.Сотрудник
	|	КОНЕЦ						КАК ГрафикРаботыСотрудник,
	|	СтрокиНачисления.ВидУчетаВремениДляСредней,
	|
	|	СтрокиНачисления.ВидРасчета.СпособРасчета	КАК СпособРасчета,
	|	СтрокиНачисления.ВидРасчета.СчетУчета		КАК СчетУчета,
	|	ЕСТЬNULL(СтрокиНачисления.ГрафикРаботы.СуммированныйУчетРабочегоВремени, ЛОЖЬ) КАК СуммированныйУчетРабочегоВремени,
	|	СтрокиНачисления.ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени	КАК ВидИспользованияРабочегоВремени,
	|
	// Проверки
	|	СтрокиНачисления.ДатаНачала,
	|	СтрокиНачисления.ДатаОкончания,
	|	ВЫБОР
	|		КОГДА СтрокиНачисления.Сотрудник.ГоловнаяОрганизация = СтрокиНачисления.Ссылка.Организация
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ОшибкаНеСоответствиеСотрудникаИОрганизации
	|ИЗ Документ."+Ссылка.Метаданные().Имя+"."+ИмяТЧ+" КАК СтрокиНачисления
	|
	|
	|
	|ГДЕ СтрокиНачисления.Ссылка = &ДокументСсылка" + УсловиеНаФизлицоТекст + "
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|";

	Возврат Запрос.Выполнить();

КонецФункции

// Формирует запрос по таблице "Начисления" документа
//
// Параметры: 
//  нет
//
// Возвращаемое значение:
//  Результат запроса.
//
Функция СформироватьЗапросПроверкаНачисления()
	
	Запрос = Новый Запрос;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТекущиеИПрежниеНачисления.НомерСтроки,
	|	ТекущиеИПрежниеНачисления.Сотрудник,
	|	ТекущиеИПрежниеНачисления.ВидРасчета,
	|	ТекущиеИПрежниеНачисления.Действие,
	|	ТекущиеИПрежниеНачисления.ВидНачисления,
	|	ТекущиеИПрежниеНачисления.СпособОтраженияВБухучете,
	|	ТекущиеИПрежниеНачисления.Показатель1,
	|	ТекущиеИПрежниеНачисления.Показатель2,
	|	ТекущиеИПрежниеНачисления.Показатель3,
	|	ТекущиеИПрежниеНачисления.Показатель4,
	|	ТекущиеИПрежниеНачисления.Показатель5,
	|	ТекущиеИПрежниеНачисления.Показатель6,
	|	ТекущиеИПрежниеНачисления.ДатаНачала,
	|	ТекущиеИПрежниеНачисления.ОрганизацияПодразделения,
	|	ТекущиеИПрежниеНачисления.ДатаДвижения,
	|	ТекущиеИПрежниеНачисления.Регистратор.Представление КАК КонфликтныйДокумент,
	|	МИНИМУМ(ДвойныеСтроки.НомерСтроки) КАК ДвойнаяСтрока,
	|	ТекущиеИПрежниеНачисления.Ссылка,
	|	Начисления.ВсегоОсновных
	|ИЗ
	|	(ВЫБРАТЬ
	|		ДатыНачислений.НомерСтроки КАК НомерСтроки,
	|		ДатыНачислений.Сотрудник КАК Сотрудник,
	|		ДатыНачислений.ВидРасчета КАК ВидРасчета,
	|		ДатыНачислений.Действие КАК Действие,
	|		ДатыНачислений.ВидНачисления КАК ВидНачисления,
	|		ДатыНачислений.СпособОтраженияВБухучете КАК СпособОтраженияВБухучете,
	|		ДатыНачислений.Показатель1 КАК Показатель1,
	|		ДатыНачислений.Показатель2 КАК Показатель2,
	|		ДатыНачислений.Показатель3 КАК Показатель3,
	|		ДатыНачислений.Показатель4 КАК Показатель4,
	|		ДатыНачислений.Показатель5 КАК Показатель5,
	|		ДатыНачислений.Показатель6 КАК Показатель6,
	|		ДатыНачислений.ДатаНачала КАК ДатаНачала,
	|		ДатыНачислений.ОрганизацияПодразделения КАК ОрганизацияПодразделения,
	|		ДатыНачислений.Период КАК ДатаДвижения,
	|		ПлановыеНачисленияРаботниковОрганизаций.Регистратор КАК Регистратор,
	|		ДатыНачислений.Ссылка КАК Ссылка
	|	ИЗ
	|		(ВЫБРАТЬ
	|			ТЧНачисления.НомерСтроки КАК НомерСтроки,
	|			ТЧНачисления.Ссылка КАК Ссылка,
	|			ТЧНачисления.Сотрудник КАК Сотрудник,
	|			ТЧНачисления.ВидРасчета КАК ВидРасчета,
	|			ТЧНачисления.СпособОтраженияВБухучете КАК СпособОтраженияВБухучете,
	|			ТЧНачисления.Показатель1 КАК Показатель1,
	|			ТЧНачисления.Показатель2 КАК Показатель2,
	|			ТЧНачисления.Показатель3 КАК Показатель3,
	|			ТЧНачисления.Показатель4 КАК Показатель4,
	|			ТЧНачисления.Показатель5 КАК Показатель5,
	|			ТЧНачисления.Показатель6 КАК Показатель6,
	|			ТЧНачисления.ДатаНачала КАК ДатаНачала,
	|			ТЧНачисления.ОрганизацияПодразделения КАК ОрганизацияПодразделения,
	|			ТЧНачисления.Действие КАК Действие,
	|			ТЧНачисления.ВидНачисления КАК ВидНачисления,
	|			МАКСИМУМ(ПлановыеНачисленияРаботниковОрганизаций.Период) КАК Период
	|		ИЗ
	|			(ВЫБРАТЬ
	|				Начисления.Ссылка КАК Ссылка,
	|				Начисления.НомерСтроки КАК НомерСтроки,
	|				Начисления.Сотрудник КАК Сотрудник,
	|				Начисления.Действие КАК Действие,
	|				Начисления.ВидНачисления КАК ВидНачисления,
	|				Начисления.ВидРасчета КАК ВидРасчета,
	|				Начисления.СпособОтраженияВБухучете КАК СпособОтраженияВБухучете,
	|				Начисления.Показатель1 КАК Показатель1,
	|				Начисления.Показатель2 КАК Показатель2,
	|				Начисления.Показатель3 КАК Показатель3,
	|				Начисления.Показатель4 КАК Показатель4,
	|				Начисления.Показатель5 КАК Показатель5,
	|				Начисления.Показатель6 КАК Показатель6,
	|				РаботникиОрганизации.ДатаНачала КАК ДатаНачала,
	|				РаботникиОрганизации.ПодразделениеОрганизации.Владелец КАК ОрганизацияПодразделения
	|			ИЗ
	|				Документ.ИНАГРО_КадровоеПеремещениеОрганизаций.Начисления КАК Начисления
	|					ЛЕВОЕ СОЕДИНЕНИЕ Документ.ИНАГРО_КадровоеПеремещениеОрганизаций.РаботникиОрганизации КАК РаботникиОрганизации
	|					ПО Начисления.Сотрудник = РаботникиОрганизации.Сотрудник
	|						И Начисления.Ссылка = РаботникиОрганизации.Ссылка
	|			ГДЕ
	|				Начисления.Ссылка = &ДокументСсылка) КАК ТЧНачисления
	|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИНАГРО_ПлановыеНачисленияРаботниковОрганизаций КАК ПлановыеНачисленияРаботниковОрганизаций
	|				ПО ТЧНачисления.Сотрудник = ПлановыеНачисленияРаботниковОрганизаций.Сотрудник
	|					И (ПлановыеНачисленияРаботниковОрганизаций.Организация = &ГоловнаяОрганизация)
	|					И ТЧНачисления.ДатаНачала >= ПлановыеНачисленияРаботниковОрганизаций.Период
	|					И (ПлановыеНачисленияРаботниковОрганизаций.ВидРасчета = ТЧНачисления.ВидРасчета)
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ТЧНачисления.Сотрудник,
	|			ТЧНачисления.ДатаНачала,
	|			ТЧНачисления.Ссылка,
	|			ТЧНачисления.НомерСтроки,
	|			ТЧНачисления.ОрганизацияПодразделения,
	|			ТЧНачисления.ВидРасчета,
	|			ТЧНачисления.СпособОтраженияВБухучете,
	|			ТЧНачисления.Показатель1,
	|			ТЧНачисления.Показатель2,
	|			ТЧНачисления.Показатель3,
	|			ТЧНачисления.Действие,
	|			ТЧНачисления.ВидНачисления,
	|			ТЧНачисления.Показатель4,
	|			ТЧНачисления.Показатель5,
	|			ТЧНачисления.Показатель6) КАК ДатыНачислений
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИНАГРО_ПлановыеНачисленияРаботниковОрганизаций КАК ПлановыеНачисленияРаботниковОрганизаций
	|			ПО ДатыНачислений.Сотрудник = ПлановыеНачисленияРаботниковОрганизаций.Сотрудник
	|				И (ПлановыеНачисленияРаботниковОрганизаций.Организация = &ГоловнаяОрганизация)
	|				И ДатыНачислений.Период = ПлановыеНачисленияРаботниковОрганизаций.Период
	|				И ДатыНачислений.ВидРасчета = ПлановыеНачисленияРаботниковОрганизаций.ВидРасчета
	|)
	|КАК ТекущиеИПрежниеНачисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ИНАГРО_КадровоеПеремещениеОрганизаций.Начисления КАК ДвойныеСтроки
	|		ПО ТекущиеИПрежниеНачисления.Ссылка = ДвойныеСтроки.Ссылка
	|			И ТекущиеИПрежниеНачисления.Сотрудник = ДвойныеСтроки.Сотрудник
	|			И ТекущиеИПрежниеНачисления.ВидРасчета = ДвойныеСтроки.ВидРасчета
	|			И ТекущиеИПрежниеНачисления.НомерСтроки < ДвойныеСтроки.НомерСтроки
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ТЧНачисления.Сотрудник КАК Сотрудник,
	|			ТЧНачисления.ВидНачисления КАК ВидНачисления,
	|			КОЛИЧЕСТВО(ТЧНачисления.НомерСтроки) КАК ВсегоОсновных
	|		ИЗ
	|			Документ.ИНАГРО_КадровоеПеремещениеОрганизаций.Начисления КАК ТЧНачисления
	|		ГДЕ
	|			ТЧНачисления.ВидНачисления = &Основное
	|			И ТЧНачисления.Ссылка = &ДокументСсылка
	|			И ТЧНачисления.Действие <> &ПрекратитьНачисление
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ТЧНачисления.Сотрудник,
	|			ТЧНачисления.ВидНачисления) КАК Начисления
	|		ПО ТекущиеИПрежниеНачисления.ВидНачисления = Начисления.ВидНачисления
	|			И ТекущиеИПрежниеНачисления.Сотрудник = Начисления.Сотрудник
	|
	|СГРУППИРОВАТЬ ПО
	|	ТекущиеИПрежниеНачисления.ДатаДвижения,
	|	ТекущиеИПрежниеНачисления.Регистратор,
	|	ТекущиеИПрежниеНачисления.ОрганизацияПодразделения,
	|	ТекущиеИПрежниеНачисления.ДатаНачала,
	|	ТекущиеИПрежниеНачисления.НомерСтроки,
	|	ТекущиеИПрежниеНачисления.Сотрудник,
	|	ТекущиеИПрежниеНачисления.ВидРасчета,
	|	ТекущиеИПрежниеНачисления.Действие,
	|	ТекущиеИПрежниеНачисления.ВидНачисления,
	|	ТекущиеИПрежниеНачисления.СпособОтраженияВБухучете,
	|	ТекущиеИПрежниеНачисления.Показатель1,
	|	ТекущиеИПрежниеНачисления.Показатель2,
	|	ТекущиеИПрежниеНачисления.Показатель3,
	|	ТекущиеИПрежниеНачисления.Ссылка,
	|	ТекущиеИПрежниеНачисления.Регистратор.Представление,
	|	Начисления.ВсегоОсновных,
	|	ТекущиеИПрежниеНачисления.Показатель4,
	|	ТекущиеИПрежниеНачисления.Показатель5,
	|	ТекущиеИПрежниеНачисления.Показатель6";
	
	Запрос.Текст = ТекстЗапроса;
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка", Ссылка);
	Запрос.УстановитьПараметр("ГоловнаяОрганизация", Организация);
	Запрос.УстановитьПараметр("Основное",Перечисления.ИНАГРО_ВидыНачисленийРаботникаОрганизации.Основное);
	Запрос.УстановитьПараметр("ПрекратитьНачисление", Перечисления.ВидыДействияСНачислением.Прекратить);
	Возврат Запрос.Выполнить();
	
КонецФункции

// Формирует запрос по таблице "РаботникиОрганизации" документа
//
// Параметры: 
//  Режим        - режим проведения.
//
// Возвращаемое значение:
//  Результат запроса.
//
Функция СформироватьЗапросПоРаботникиОрганизацийСтарыеОтраженияЗП()
	
	Запрос = Новый Запрос;
	
	// Установим параметры запроса     
	Запрос.УстановитьПараметр("ДокументСсылка", Ссылка);
	Запрос.УстановитьПараметр("парамДействие", Перечисления.ВидыДействияСНачислением.Начать);
	Запрос.УстановитьПараметр("пустойВидРасчета", ПланыВидовРасчета.ИНАГРО_Начисления.ПустаяСсылка());	
	Запрос.УстановитьПараметр("парамОрганизация", Организация);
	
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ  //<< Ин-Агро - добавлено Разрешенные                                   
	|	ТЧРаботникиОрганизаций.НомерСтроки				КАК НомерСтроки,
	|	ТЧРаботникиОрганизаций.ДатаНачала				КАК ДатаНачала,
	|	ТЧРаботникиОрганизаций.Сотрудник					КАК Сотрудник,
	|	СтарыйСпособОтражения.СпособОтраженияВБухучете	КАК СтарыйСпособОтраженияВБухучете,	
	|	ТЧРаботникиОрганизаций.СпособОтраженияВБухучете	КАК СпособОтраженияВБухучете,
	|	&парамДействие		КАК Действие,
	|	&пустойВидРасчета	КАК НовыеНачисления_ВидРасчета,
	|	NULL	КАК Показатель1,
	|	NULL	КАК Показатель2,
	|	NULL	КАК Показатель3,
	|	NULL	КАК Показатель4,
	|	NULL	КАК Показатель5,
	|	NULL	КАК Показатель6
	|		                
	|ИЗ Документ.ИНАГРО_КадровоеПеремещениеОрганизаций.РаботникиОрганизации КАК ТЧРаботникиОрганизаций
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ(  
	|	ВЫБРАТЬ                                    
	|		СтароеНазначение.Сотрудник					КАК Сотрудник,
	|		МАКСИМУМ(СтароеНазначение.Период)			КАК Период
	|
	|	ИЗ РегистрСведений.ИНАГРО_ПлановыеНачисленияРаботниковОрганизаций КАК СтароеНазначение
	|
	|	ГДЕ		СтароеНазначение.ВидРасчета = &пустойВидРасчета	
	|		И	СтароеНазначение.Организация = &парамОрганизация 
	|
	|   СГРУППИРОВАТЬ ПО
	|		СтароеНазначение.Сотрудник
	|
	|) КАК СтарыеНачисления
	|ПО		СтарыеНачисления.Сотрудник = ТЧРаботникиОрганизаций.Сотрудник
	|	И	СтарыеНачисления.Период < ТЧРаботникиОрганизаций.ДатаНачала	
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИНАГРО_ПлановыеНачисленияРаботниковОрганизаций КАК СтарыйСпособОтражения
	|ПО		СтарыйСпособОтражения.Организация = &парамОрганизация 
	|	И	СтарыйСпособОтражения.Сотрудник = ТЧРаботникиОрганизаций.Сотрудник
	|	И	СтарыйСпособОтражения.ВидРасчета = &пустойВидРасчета	
	|	И	СтарыйСпособОтражения.Период = СтарыеНачисления.Период	
	|
	|ГДЕ
	|	ТЧРаботникиОрганизаций.Ссылка = &ДокументСсылка
	|";
	
	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос.Выполнить();
	
КонецФункции // СформироватьЗапросПоРаботникиОрганизаций()

// Формирует запрос по таблице "Начисления" документа
//
// Параметры: 
//  нет
//
// Возвращаемое значение:
//  Результат запроса.
//
Функция СформироватьЗапросПоУдержания()
	
	Запрос = Новый Запрос;	
	ТекстЗапроса = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Работники.Сотрудник КАК Сотрудник,
		|	Работники.ДатаНачала КАК ДатаНачала,
		|	Работники.ВидРасчета КАК ВидРасчета,
		|	Работники.Период КАК Период,
		|	Работники.Показатель1 КАК Показатель1,
		|	Работники.Показатель2 КАК Показатель2,
		|	Работники.Показатель3 КАК Показатель3,
		|	Работники.СпособОтраженияВБухучете КАК СпособОтраженияВБухучете,
		|	Работники.Действие КАК Действие,
		|	Работники.ДокументОснование КАК ДокументОснование
		|ИЗ
		|	(ВЫБРАТЬ
		|		РаботникиПериоды.Сотрудник КАК Сотрудник,
		|		РаботникиПериоды.Организация КАК Организация,
		|		РаботникиПериоды.ДатаНачала КАК ДатаНачала,
		|		РаботникиПериоды.ВидРасчета КАК ВидРасчета,
		|		МАКСИМУМ(РаботникиПериоды.Период) КАК Период,
		|		РаботникиПериоды.Показатель1 КАК Показатель1,
		|		РаботникиПериоды.Показатель2 КАК Показатель2,
		|		РаботникиПериоды.Показатель3 КАК Показатель3,
		|		РаботникиПериоды.ДокументОснование КАК ДокументОснование,
		|		РаботникиПериоды.СпособОтраженияВБухучете КАК СпособОтраженияВБухучете,
		|		РаботникиПериоды.Действие КАК Действие
		|	ИЗ
		|		(ВЫБРАТЬ
		|			РаботникиОрганизации.Сотрудник КАК Сотрудник,
		|			РаботникиОрганизации.Ссылка.Организация КАК Организация,
		|			РаботникиОрганизации.ДатаНачала КАК ДатаНачала,
		|			НовыеУдержания.ВидРасчета КАК ВидРасчета,
		|			РаботникиОрганизации.ДатаНачала КАК Период,
		|			НовыеУдержания.Показатель1 КАК Показатель1,
		|			НовыеУдержания.Показатель2 КАК Показатель2,
		|			НовыеУдержания.Показатель3 КАК Показатель3,
		|			НовыеУдержания.СпособОтраженияВБухучете КАК СпособОтраженияВБухучете,
		|			НовыеУдержания.ДокументОснование КАК ДокументОснование,
		|			НовыеУдержания.Действие КАК Действие
		|		ИЗ
		|			Документ.ИНАГРО_КадровоеПеремещениеОрганизаций.РаботникиОрганизации КАК РаботникиОрганизации
		|				ЛЕВОЕ СОЕДИНЕНИЕ Документ.ИНАГРО_КадровоеПеремещениеОрганизаций.Удержания КАК НовыеУдержания
		|				ПО РаботникиОрганизации.Сотрудник = НовыеУдержания.Сотрудник
		|					И (НовыеУдержания.Ссылка = &ДокументСсылка)
		|		ГДЕ
		|			РаботникиОрганизации.Ссылка = &ДокументСсылка
		|			И НовыеУдержания.ВидРасчета <> &пустойВидРасчета
		|			И НовыеУдержания.Действие <> &НеИзменять) КАК РаботникиПериоды
		|	
		|	СГРУППИРОВАТЬ ПО
		|		РаботникиПериоды.Сотрудник,
		|		РаботникиПериоды.Организация,
		|		РаботникиПериоды.ДатаНачала,
		|		РаботникиПериоды.ВидРасчета,
		|		РаботникиПериоды.Показатель1,
		|		РаботникиПериоды.Показатель2,
		|		РаботникиПериоды.Показатель3,
		|		РаботникиПериоды.ДокументОснование,
		|		РаботникиПериоды.СпособОтраженияВБухучете,
		|		РаботникиПериоды.Действие) КАК Работники";
	
	Запрос.Текст = ТекстЗапроса;
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("пустойВидРасчета",        ПланыВидовРасчета.ИНАГРО_Удержания.ПустаяСсылка());	
	Запрос.УстановитьПараметр("парамДействиеПрекратить", Перечисления.ВидыДействияСНачислением.Прекратить);	
	Запрос.УстановитьПараметр("ДокументСсылка",          Ссылка);
	Запрос.УстановитьПараметр("ГоловнаяОрганизация",     Организация);
	Запрос.УстановитьПараметр("НеИзменять",              Перечисления.ВидыДействияСНачислением.НеИзменять);
	
	Возврат Запрос.Выполнить();
	
КонецФункции

// Формирует запрос по таблице "Сотрудники" документа
//
// Параметры: 
//  Режим - режим проведения
//
// Возвращаемое значение:
//  Результат запроса. В запросе данные документа дополняются значениями
//  проверяемых параметров из связанного с.
//
Функция СформироватьЗапросПоВзносамСотрудники(Режим)
	
	Запрос = Новый Запрос;
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка", Ссылка);
	
	// Описание текста запроса:
	//
	// 1. Выборка "Начисления": 
	//		Объединяются строки ТЧ Начисления. Сразу проверяем наличие строк-дублей.  
	
	ТекстЗапроса = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ТЧВзносы.НомерСтроки КАК НомерСтроки,
		|	ТЧВзносы.Сотрудник КАК Сотрудник,
		|	ТЧВзносы.Налог КАК Налог,
		|	ТЧВзносы.Действие КАК Действие,
		|	ТЧРаботникиОрганизации.ДатаНачала КАК ДатаДействия
		|ИЗ
		|	Документ.ИНАГРО_КадровоеПеремещениеОрганизаций.Взносы КАК ТЧВзносы
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ИНАГРО_КадровоеПеремещениеОрганизаций.РаботникиОрганизации КАК ТЧРаботникиОрганизации
		|		ПО (ТЧРаботникиОрганизации.Сотрудник = ТЧВзносы.Сотрудник)
		|			И (ТЧРаботникиОрганизации.Ссылка = ТЧВзносы.Ссылка)
		|ГДЕ
		|	ТЧВзносы.Ссылка = &ДокументСсылка
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТЧВзносыФОТ.НомерСтроки,
		|	ТЧВзносыФОТ.Сотрудник,
		|	ТЧВзносыФОТ.Налог,
		|	ТЧВзносыФОТ.Действие,
		|	ТЧРаботникиОрганизации.ДатаНачала
		|ИЗ
		|	Документ.ИНАГРО_КадровоеПеремещениеОрганизаций.ВзносыФОТ КАК ТЧВзносыФОТ
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ИНАГРО_КадровоеПеремещениеОрганизаций.РаботникиОрганизации КАК ТЧРаботникиОрганизации
		|		ПО (ТЧРаботникиОрганизации.Сотрудник = ТЧВзносыФОТ.Сотрудник)
		|			И (ТЧРаботникиОрганизации.Ссылка = ТЧВзносыФОТ.Ссылка)
		|ГДЕ
		|	ТЧВзносыФОТ.Ссылка = &ДокументСсылка";
	
	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос.Выполнить();
	
КонецФункции

Функция СформироватьЗапросПоРаботникиОрганизаций(Режим)
	
	Запрос = Новый Запрос;
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка", Ссылка);
	Запрос.УстановитьПараметр("ГоловнаяОрганизация", Организация);	
	Запрос.УстановитьПараметр("Дата", Дата);
	Запрос.УстановитьПараметр("ПустаяДата", Дата('00010101'));
	
	// Описание текста запроса:
	// Первая часть запроса  - вид строки запроса "ДанныеДляДвиженийКадров": 
	// 1. Выборка "ТЧРаботникиОрганизаций": 
	//		Выбираются строки документа.  
	// 2. Выборка "ПриказыОПриеме"
	//		Присоединяем данные о приказах-приемах на работу с целью проверки соответствия выбранных приказов физлицам 
	//		и организации.
	// 3. Выборка "ДанныеПоРаботникиДоНазначения": 
	//		Для каждой строки ТЧРаботникиОрганизаций выполняем срез по регистру РаботникиОрганизаций на дату ДатаНачала
	//		для выполнения движений и проверки "Работает ли работник на дату перемещения"
	//		(Использует данные выборки "ДатыПоследнихДвиженийРаботников")
	// 4. Выборка "ПересекающиесяСтроки": 
	//		Среди остальных строк документа ищем строки, имеющие пересекающийся период действия.
	//
	// Вторая часть запроса - вид строки запроса "КонфликтныйДокумент" - поиск конфликтных документов: 
	// 1. Выборка "ТЧРаботникиОрганизаций":
	//		Выбираются строки документа 
	// 2. Выборка "РаботникиОрганизации":
	//		Для каждой строки ТЧРаботникиОрганизаций ищем движения по регистру РаботникиОрганизации за период > ДатаНачала.
	
	ТекстЗапроса =
	
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	""ДанныеДляДвиженийКадров"" КАК ВидСтрокиЗапроса,
	|	ТЧРаботникиОрганизаций.НомерСтроки КАК НомерСтроки,
	|	ТЧРаботникиОрганизаций.Сотрудник КАК Сотрудник,
	|	ТЧРаботникиОрганизаций.Сотрудник.Наименование КАК СотрудникНаименование,
	|	ТЧРаботникиОрганизаций.ДатаНачала КАК ДатаНачала,
	|	ТЧРаботникиОрганизаций.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	|	ТЧРаботникиОрганизаций.ПринятНаНовоеРабочееМесто КАК ПринятНаНовоеРабочееМесто,
	|	ТЧРаботникиОрганизаций.Должность КАК Должность,
	|	ТЧРаботникиОрганизаций.ГрафикРаботы КАК ГрафикРаботы,
	|	ТЧРаботникиОрганизаций.ЗанимаемыхСтавок КАК ЗанимаемыхСтавок,
	|	ТЧРаботникиОрганизаций.ТабельныйНомер КАК ТабельныйНомер,
	|	ТЧРаботникиОрганизаций.СпособОтраженияВБухучете КАК СпособОтраженияВБухучете,
	|	ТЧРаботникиОрганизаций.ПодразделениеОрганизации.Владелец КАК ОрганизацияПодразделения,
	|	ТЧРаботникиОрганизаций.ФиксированнаяИндексация КАК ФиксированнаяИндексация,
	|	ТЧРаботникиОрганизаций.Повышение КАК Повышение,
	|	ЛОЖЬ КАК ОшибкаПодразделениеНеПринадлежитОрганизации,
	|	ЛОЖЬ КАК ОшибкаПодразделениеНеПринадлежитОбособленномуПодразделению,
	|	ДанныеПоРаботникуДоНазначения.ПодразделениеОрганизации КАК ПрежнееПодразделение,
	|	ДанныеПоРаботникуДоНазначения.ПодразделениеОрганизации.Владелец КАК ПрежняяОрганизация,
	|	ДанныеПоРаботникуДоНазначения.Должность КАК ПрежняяДолжность,
	|	ДанныеПоРаботникуДоНазначения.ГрафикРаботы КАК ПрежнийГрафикРаботы,
	|	ДанныеПоРаботникуДоНазначения.ЗанимаемыхСтавок КАК ПрежнееЗанимаемыхСтавок,
	|	ТЧРаботникиОрганизаций.Сотрудник.Код КАК ПрежнийТабельныйНомер,
	|	ДанныеПоРаботникуДоНазначения.Период КАК ДатаПоследнегоДвиженияПоРаботнику,
	|	ПересекающиесяСтроки.КонфликтнаяСтрокаНомер,
	|	ПересекающиесяСтрокиТабельныйНомер.КонфликтнаяСтрокаНомер КАК КонфликтнаяСтрокаТабельныйНомер,
	|	NULL КАК КонфликтныйДокумент,
	|	ВЫБОР
	|		КОГДА ПриказыОПриеме.Сотрудник ЕСТЬ NULL
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ОшибкаВПриказеОПриемеНетФизЛица,
	|	ЛОЖЬ КАК ОшибкаНеСоответствиеОрганизацииПриказаОПриеме,
	|	ТЧРаботникиОрганизаций.ИзменениеДолжности,
	|	ТЧРаботникиОрганизаций.ПредыдущаяДолжность КАК ПредыдущаяДолжность
	|ИЗ
	|	Документ.ИНАГРО_КадровоеПеремещениеОрганизаций.РаботникиОрганизации КАК ТЧРаботникиОрганизаций
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ИНАГРО_ПриемНаРаботуВОрганизацию.РаботникиОрганизации КАК ПриказыОПриеме
	|		ПО (ПриказыОПриеме.Сотрудник = ТЧРаботникиОрганизаций.Сотрудник)
	|			И (ПриказыОПриеме.Ссылка.Проведен)
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ТЧРаботникиОрганизаций.НомерСтроки КАК НомерСтроки,
	|			МАКСИМУМ(Работники.Период) КАК Период
	|		ИЗ
	|			Документ.ИНАГРО_КадровоеПеремещениеОрганизаций.РаботникиОрганизации КАК ТЧРаботникиОрганизаций
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИНАГРО_РаботникиОрганизаций КАК Работники
	|				ПО ТЧРаботникиОрганизаций.Сотрудник = Работники.Сотрудник
	|					И (Работники.Организация = &ГоловнаяОрганизация)
	|					И (Работники.Период <= ТЧРаботникиОрганизаций.ДатаНачала)
	|		ГДЕ
	|			ТЧРаботникиОрганизаций.Ссылка = &ДокументСсылка
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ТЧРаботникиОрганизаций.НомерСтроки) КАК ДатыПоследнихДвиженийРаботников
	|		ПО ТЧРаботникиОрганизаций.НомерСтроки = ДатыПоследнихДвиженийРаботников.НомерСтроки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИНАГРО_РаботникиОрганизаций КАК ДанныеПоРаботникуДоНазначения
	|		ПО (ДанныеПоРаботникуДоНазначения.Сотрудник = ТЧРаботникиОрганизаций.Сотрудник)
	|			И (ДанныеПоРаботникуДоНазначения.Организация = &ГоловнаяОрганизация)
	|			И (ДанныеПоРаботникуДоНазначения.Период = ДатыПоследнихДвиженийРаботников.Период)
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ТЧРаботникиОрганизаций.НомерСтроки КАК НомерСтроки,
	|			МИНИМУМ(ТЧРаботникиОрганизаций2.НомерСтроки) КАК КонфликтнаяСтрокаНомер
	|		ИЗ
	|			Документ.ИНАГРО_КадровоеПеремещениеОрганизаций.РаботникиОрганизации КАК ТЧРаботникиОрганизаций
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ИНАГРО_КадровоеПеремещениеОрганизаций.РаботникиОрганизации КАК ТЧРаботникиОрганизаций2
	|				ПО (ТЧРаботникиОрганизаций2.Ссылка = &ДокументСсылка)
	|					И ТЧРаботникиОрганизаций.Сотрудник = ТЧРаботникиОрганизаций2.Сотрудник
	|					И ТЧРаботникиОрганизаций.НомерСтроки <> ТЧРаботникиОрганизаций2.НомерСтроки
	|					И ТЧРаботникиОрганизаций.ДатаНачала <= ТЧРаботникиОрганизаций2.ДатаНачала
	|		ГДЕ
	|			ТЧРаботникиОрганизаций.Ссылка = &ДокументСсылка
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ТЧРаботникиОрганизаций.НомерСтроки) КАК ПересекающиесяСтроки
	|		ПО ТЧРаботникиОрганизаций.НомерСтроки = ПересекающиесяСтроки.НомерСтроки
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ТЧРаботникиОрганизаций.НомерСтроки КАК НомерСтроки,
	|			МИНИМУМ(ТЧРаботникиОрганизаций2.НомерСтроки) КАК КонфликтнаяСтрокаНомер
	|		ИЗ
	|			Документ.ИНАГРО_КадровоеПеремещениеОрганизаций.РаботникиОрганизации КАК ТЧРаботникиОрганизаций
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ИНАГРО_КадровоеПеремещениеОрганизаций.РаботникиОрганизации КАК ТЧРаботникиОрганизаций2
	|				ПО (ТЧРаботникиОрганизаций2.Ссылка = &ДокументСсылка)
	|					И ТЧРаботникиОрганизаций.ТабельныйНомер = ТЧРаботникиОрганизаций2.ТабельныйНомер
	|					И ТЧРаботникиОрганизаций.НомерСтроки > ТЧРаботникиОрганизаций2.НомерСтроки
	|		ГДЕ
	|			ТЧРаботникиОрганизаций.Ссылка = &ДокументСсылка
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ТЧРаботникиОрганизаций.НомерСтроки) КАК ПересекающиесяСтрокиТабельныйНомер
	|		ПО ТЧРаботникиОрганизаций.НомерСтроки = ПересекающиесяСтрокиТабельныйНомер.НомерСтроки
	|ГДЕ
	|	ТЧРаботникиОрганизаций.Ссылка = &ДокументСсылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	""КонфликтныйДокумент"",
	|	ТЧРаботникиОрганизаций.НомерСтроки,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL
	|ИЗ
	|	Документ.ИНАГРО_КадровоеПеремещениеОрганизаций.РаботникиОрганизации КАК ТЧРаботникиОрганизаций
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИНАГРО_РаботникиОрганизаций КАК Работники
	|		ПО (Работники.Сотрудник = ТЧРаботникиОрганизаций.Сотрудник)
	|			И (Работники.Организация = &ГоловнаяОрганизация)
	|			И (Работники.Период = ТЧРаботникиОрганизаций.ДатаНачала)
	|			И ТЧРаботникиОрганизаций.Ссылка <> Работники.Регистратор
	|ГДЕ
	|	ТЧРаботникиОрганизаций.Ссылка = &ДокументСсылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос.Выполнить();
	
КонецФункции 

// Проверяет правильность заполнения реквизитов в строке ТЧ "РаботникиОрганизации" документа.
// Если какой-то из реквизитов, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса по строке ТЧ документа,
// все проверяемые реквизиты должны быть включены в выборку.
//
// Параметры: 
//  ВыборкаПоШапкеДокумента		- выборка из результата запроса по шапке документа,
//  ВыборкаПоСтрокамДокумента	- спозиционированная на определенной строке выборка 
//  							  из результата запроса по товарам документа, 
//  Отказ 						- флаг отказа в проведении.
//
Процедура ПроверитьЗаполнениеСтрокиРаботникаОрганизации(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента, Отказ)
	
	СтрокаНачалаСообщенияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='В строке номер ""%1"" табл. части ""Работники"": ';uk='У рядку номер ""%1"" табл. частини ""Працівники"": '"), СокрЛП(ВыборкаПоСтрокамДокумента.НомерСтроки));
	
	Если ВыборкаПоСтрокамДокумента.ВидСтрокиЗапроса = "ДанныеДляДвиженийКадров" Тогда
				
		// Табельный номер указан дважды
		Если ВыборкаПоСтрокамДокумента.КонфликтнаяСтрокаТабельныйНомер <> NULL Тогда
			ТекстСообщения = СтрокаНачалаСообщенияОбОшибке + НСтр("ru='табельный номер указан в документе дважды (см. строку ';uk='табельний номер зазначений у документі двічі (див. рядок '");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,ЭтотОбъект,,,);
		КонецЕсли;
		
		Если ВыборкаПоСтрокамДокумента.ОшибкаПодразделениеНеПринадлежитОрганизации Тогда
			ТекстСообщения = СтрокаНачалаСообщенияОбОшибке + НСтр("ru=' указано подразделение, принадлежащее другой организации!';uk=' вказаний підрозділ належить іншій організації!'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,ЭтотОбъект,,,Отказ);
		КонецЕсли;
		
		// Приказ о приеме должен принадлежать организации
		Если ВыборкаПоСтрокамДокумента.ОшибкаНеСоответствиеОрганизацииПриказаОПриеме Тогда
			ТекстСообщения = СтрокаНачалаСообщенияОбОшибке + НСтр("ru=' указанный приказ о приеме оформлен на другую организацию!';uk=' вказаний наказ про прийом оформлений на іншу організацію!'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,ЭтотОбъект,,,Отказ);
		ИначеЕсли ВыборкаПоСтрокамДокумента.ОшибкаВПриказеОПриемеНетФизЛица Тогда
			ТекстСообщения = СтрокаНачалаСообщенияОбОшибке + НСтр("ru=' работник и приказ о приеме не соответствуют друг другу!';uk=' працівник і наказ про прийом не відповідають один одному!'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,ЭтотОбъект,,,Отказ);
		КонецЕсли;
		
		// Проверка: ранее работник должен быть принят на работу
		Если ВыборкаПоСтрокамДокумента.ПрежнийТабельныйНомер = NULL Тогда
			ТекстСообщения = СтрокаНачалаСообщенияОбОшибке + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='на %1 работник %2 еще не принят на работу!';uk='на %1 працівник %2 ще не прийнятий на роботу!'"), Формат(ВыборкаПоСтрокамДокумента.ДатаНачала, "ДЛФ=DD"), ВыборкаПоСтрокамДокумента.СотрудникНаименование);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,ЭтотОбъект,,,Отказ);
		ИначеЕсли ПустаяСтрока(ВыборкаПоСтрокамДокумента.ПрежнийТабельныйНомер) Тогда	
			ТекстСообщения = СтрокаНачалаСообщенияОбОшибке + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='на %1 работник %2 уже уволен (с %3)!';uk='на %1 працівник %2 уже звільнений (з %3)!'"), Формат(ВыборкаПоСтрокамДокумента.ДатаУвольнения, "ДЛФ=DD"), ВыборкаПоСтрокамДокумента.СотрудникНаименование, Формат(ВыборкаПоСтрокамДокумента.ДатаПоследнегоДвиженияПоРаботнику, "ДЛФ=DD"));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,ЭтотОбъект,,,Отказ);
		КонецЕсли; 
			
		// Проверка: противоречие другой строке документа
		Если ВыборкаПоСтрокамДокумента.КонфликтнаяСтрокаНомер <> NULL Тогда
			ТекстСообщения = СтрокаНачалаСообщенияОбОшибке + НСтр("ru='период действия назначения пересекается с периодом действия строки ';uk='період дії призначення перетинається з періодом дії рядка '") + ВыборкаПоСтрокамДокумента.КонфликтнаяСтрокаНомер + "!";
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,ЭтотОбъект,,,Отказ);
		КонецЕсли;
		
	ИначеЕсли ВыборкаПоСтрокамДокумента.ВидСтрокиЗапроса = "КонфликтныйДокумент" Тогда	
		// противоречие другим кадровым приказам
		ТекстСообщения = СтрокаНачалаСообщенияОбОшибке + НСтр("ru='период действия приказа противоречит кадровому приказу ';uk='період дії наказу суперечить кадровому наказу '") + Символы.ПС + Символы.Таб + ВыборкаПоСтрокамДокумента.КонфликтныйДокумент + "!";
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,ЭтотОбъект,,,Отказ);
	КонецЕсли; 
	
КонецПроцедуры

// Проверяет правильность заполнения реквизитов в строке ТЧ "Начисления" документа.
//
// Параметры: 
//  ВыборкаПоШапкеДокумента		- выборка из результата запроса по шапке документа,
//  ВыборкаПоСтрокамДокумента	- спозиционированная на определенной строке выборка 
//  							  из результата запроса, 
//  Отказ 						- флаг отказа в проведении.
//	Заголовок					- Заголовок для сообщений об ошибках проведения.
//
Процедура ПроверитьЗаполнениеСтрокиНачисления(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента, Отказ)
	
	СтрокаНачалаСообщенияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='В строке номер ""%1"" табл. части ""Начисления"": ';uk='У рядку номер ""%1"" табл. частини ""Нарахування"": '"), СокрЛП(ВыборкаПоСтрокамДокумента.НомерСтроки));
	
	// проверка на существование работника в табличной части "РаботникиОрганизации"
	Если ВыборкаПоСтрокамДокумента.ДатаНачала = NULL Тогда
		ТекстСообщения = СтрокаНачалаСообщенияОбОшибке + НСтр("ru='данный работник не введен в приказ - по нему не могут быть введены начисления!';uk='даний працівник не внесений у наказ - по ньому не можуть бути введені нарахування!'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,ЭтотОбъект,,,Отказ);
	КонецЕсли;
	
	// Проверка: противоречие другой строке документа
	Если ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ВидРасчета) И ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.Сотрудник) И (ВыборкаПоСтрокамДокумента.ДвойнаяСтрока <> NULL) И (ВыборкаПоСтрокамДокумента.ВидНачисления = Перечисления.ИНАГРО_ВидыНачисленийРаботникаОрганизации.Индивидуальное) Тогда
		ТекстСообщения = СтрокаНачалаСообщенияОбОшибке + НСтр("ru='по работнику не может быть изменено одно и тоже начисление дважды (см. строку ';uk='по працівнику не може бути змінено одне й теж нарахування двічі (див. рядок '") + ВыборкаПоСтрокамДокумента.ДвойнаяСтрока + ")!";
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,ЭтотОбъект,,,Отказ);
	КонецЕсли;	
	
	Если ВыборкаПоСтрокамДокумента.Действие = Перечисления.ВидыДействияСНачислением.Начать
		ИЛИ ВыборкаПоСтрокамДокумента.Действие = Перечисления.ВидыДействияСНачислением.Изменить Тогда
		
		Если ВыборкаПоСтрокамДокумента.Действие = Перечисления.ВидыДействияСНачислением.Начать
			И ВыборкаПоСтрокамДокумента.ВидНачисления = Перечисления.ИНАГРО_ВидыНачисленийРаботникаОрганизации.Основное Тогда	
			Конфликт = Ложь;
			Действующие = РегистрыСведений.ИНАГРО_ПлановыеНачисленияРаботниковОрганизаций.СрезПоследних(ВыборкаПоСтрокамДокумента.ДатаНачала, Новый Структура("Сотрудник,Организация",ВыборкаПоСтрокамДокумента.Сотрудник,ВыборкаПоШапкеДокумента.Организация));
			Для каждого ВР Из Действующие Цикл
				Если ВР.ВидНачисления = Перечисления.ИНАГРО_ВидыНачисленийРаботникаОрганизации.Основное Тогда
					// Проверим, не отменяется ли оно в документе
					ПараметрыОтбора = Новый Структура;
					ПараметрыОтбора.Вставить("Сотрудник", ВыборкаПоСтрокамДокумента.Сотрудник);
					ПараметрыОтбора.Вставить("ВидРасчета", ВР.ВидРасчета);
					ПараметрыОтбора.Вставить("Действие", Перечисления.ВидыДействияСНачислением.Прекратить);
					НайденныеСтроки = Начисления.НайтиСтроки(ПараметрыОтбора);
					Если НайденныеСтроки.Количество() = 0 Тогда
						Конфликт = Истина;
						Прервать;
					КонецЕсли;	
				КонецЕсли;
			КонецЦикла;
			Если Не Конфликт И ВыборкаПоСтрокамДокумента.ВсегоОсновных > 1 Тогда
				Конфликт = Истина;
			КонецЕсли;	 
			Если Конфликт Тогда
				ТекстСообщения = СтрокаНачалаСообщенияОбОшибке + НСтр("ru=' у работника может быть только одно основное начисления!';uk=' у робітника може бути лише тільки одне основне нарахування!'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,ЭтотОбъект,,,Отказ);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;	
	
КонецПроцедуры		

// По строке выборки результата запроса по документу формируем движения по регистрам.
//
// Параметры: 
//  ВыборкаПоШапкеДокумента                - выборка из результата запроса по шапке документа,
//	ВыборкаПоСтрокамДокумента
//
// Возвращаемое значение:
//  Нет.
//
Процедура ДобавитьСтрокуВДвиженияПоВзносамВФонды(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента)
	
	Если ВыборкаПоСтрокамДокумента.Действие = Перечисления.ВидыДействияСНачислением.НеИзменять Тогда
		// ничего не меняем
		Возврат;
		
	ИначеЕсли ВыборкаПоСтрокамДокумента.Действие = Перечисления.ВидыДействияСНачислением.Начать
		ИЛИ ВыборкаПоСтрокамДокумента.Действие = Перечисления.ВидыДействияСНачислением.Изменить Тогда
		мПериод = ВыборкаПоСтрокамДокумента.ДатаДействия;
		мДействует	= Истина;
		
	ИначеЕсли ВыборкаПоСтрокамДокумента.Действие = Перечисления.ВидыДействияСНачислением.Прекратить Тогда
		// движение на вечер предыдущих суток
		мПериод = ВыборкаПоСтрокамДокумента.ДатаДействия - 1;
		мДействует	= Ложь;
		
	КонецЕсли;
	Движения.ИНАГРО_ВзносыВФондыРаботниковОрганизаций.Записывать = Истина;	
	Движение = Движения.ИНАГРО_ВзносыВФондыРаботниковОрганизаций.Добавить();
	
	// Свойства
	Движение.Период       = мПериод;
	Движение.Регистратор  = ВыборкаПоШапкеДокумента.Ссылка;
	
	// Измерения
	Движение.Организация	= ВыборкаПоШапкеДокумента.Организация;
	Движение.Сотрудник		= ВыборкаПоСтрокамДокумента.Сотрудник;
	Движение.Налог			= ВыборкаПоСтрокамДокумента.Налог;
	
	// Ресурсы
	Движение.Действует	= мДействует;
	
КонецПроцедуры // ДобавитьСтрокуВДвиженияПоРегистрамСведений

Процедура ДобавитьСтрокуВДвиженияПоУдержаниям(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента, мПериод, мДействует)
	
	Движения.ИНАГРО_ПлановыеУдержанияРаботниковОрганизаций.Записывать = Истина;
	Движение = Движения.ИНАГРО_ПлановыеУдержанияРаботниковОрганизаций.Добавить();
	
	// Свойства
	Движение.Период			= мПериод;
	
	// Измерения
	Движение.Организация	= ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;
	Движение.Сотрудник		= ВыборкаПоСтрокамДокумента.Сотрудник;
	Движение.ВидРасчета		= ВыборкаПоСтрокамДокумента.ВидРасчета;
	
	// Ресурсы
	Движение.Действует		= мДействует;
	Движение.Показатель1	= ВыборкаПоСтрокамДокумента.Показатель1;
	Движение.Показатель2	= ВыборкаПоСтрокамДокумента.Показатель2;
	Движение.Показатель3	= ВыборкаПоСтрокамДокумента.Показатель3;
	
	Движение.СпособОтраженияВБухучете	= ВыборкаПоСтрокамДокумента.СпособОтраженияВБухучете;
	
КонецПроцедуры

// По строке выборки результата запроса по документу формируем движения по регистрам.
//
// Параметры: 
//  ВыборкаПоШапкеДокумента                - выборка из результата запроса по шапке документа,
//	ВыборкаПоСтрокамДокумента
//
// Возвращаемое значение:
//  Нет.
//
Процедура ДобавитьСтрокуВДвиженияПоРаботникиОрганизации(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента)
	
	Если ВыборкаПоСтрокамДокумента.ВидСтрокиЗапроса = "ДанныеДляДвиженийКадров" Тогда
		
		// отразим новое место работы
		Движения.ИНАГРО_РаботникиОрганизаций.Записывать = Истина;
		Движение = Движения.ИНАГРО_РаботникиОрганизаций.Добавить();
		
		// Свойства
		Движение.Период						= ВыборкаПоСтрокамДокумента.ДатаНачала;
		
		// Измерения
		Движение.Сотрудник					= ВыборкаПоСтрокамДокумента.Сотрудник;
		
		// Ресурсы
		Движение.ЗанимаемыхСтавок			= ВыборкаПоСтрокамДокумента.ЗанимаемыхСтавок;
		Движение.ПодразделениеОрганизации	= ВыборкаПоСтрокамДокумента.ПодразделениеОрганизации;
		Движение.Должность					= ВыборкаПоСтрокамДокумента.Должность;
		Движение.ГрафикРаботы				= ВыборкаПоСтрокамДокумента.ГрафикРаботы;
		Движение.СпособОтраженияВБухучете	= ВыборкаПоСтрокамДокумента.СпособОтраженияВБухучете;
		Движение.ПринятНаНовоеРабочееМесто	= ВыборкаПоСтрокамДокумента.ПринятНаНовоеРабочееМесто; 
		Движение.ИзменениеДолжности			= ВыборкаПоСтрокамДокумента.ИзменениеДолжности;
		Движение.ПредыдущаяДолжность		= ВыборкаПоСтрокамДокумента.ПредыдущаяДолжность; 
		
		// Реквизиты
		Движение.Организация				= ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;
		Движение.ПричинаИзмененияСостояния  = Перечисления.ПричиныИзмененияСостояния.Перемещение;
		
	КонецЕсли;
	
	// Движения по регистру "КоэффициентПовышенияОкладов" - отразим факт индексации заработка.
	Если ВыборкаПоШапкеДокумента.ИндексацияЗаработка  Тогда //И СтруктураПроведенияПоРегистрамСведений.Свойство(ИмяРегистра)
		
		Движения.ИНАГРО_КоэффициентПовышенияОкладов.Записывать = Истина;
		Движение = Движения.ИНАГРО_КоэффициентПовышенияОкладов.Добавить();
		
		// Свойства
		Движение.Период                     = ВыборкаПоСтрокамДокумента.ДатаНачала;
		
		// Измерения
		Движение.Сотрудник                    = ВыборкаПоСтрокамДокумента.Сотрудник;
		Движение.Организация                = ВыборкаПоШапкеДокумента.Организация;
		
		Если ВыборкаПоШапкеДокумента.ИндексацияПоДолжностям Тогда
			Движение.ПодразделениеОрганизации	= ВыборкаПоСтрокамДокумента.ПодразделениеОрганизации;
			Движение.Должность					= ВыборкаПоСтрокамДокумента.Должность;
		КонецЕсли;	
		
		// Ресурсы
		Движение.Коэффициент				= КоэффициентИндексацииЗаработка;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьСтрокуВДвиженияПоРегистрам(ВыборкаПоШапкеДокумента, ВыборкаПоРаботникиОрганизации)
	
	Движения.ИНАГРО_ПараметрыФиксированнойИндексации.Записывать = Истина;
	Движение = Движения.ИНАГРО_ПараметрыФиксированнойИндексации.Добавить();
	Движение.Организация  	= ВыборкаПоШапкеДокумента.Организация;
	Движение.Сотрудник    	= ВыборкаПоРаботникиОрганизации.Сотрудник;
	Если ВыборкаПоШапкеДокумента.ИндексацияПоДолжностям Тогда
		Движение.ПодразделениеОрганизации	= ВыборкаПоРаботникиОрганизации.ПодразделениеОрганизации;
		Движение.Должность					= ВыборкаПоРаботникиОрганизации.Должность;
	КонецЕсли;	
	Движение.Период       	= ВыборкаПоРаботникиОрганизации.ДатаНачала;
	Движение.Размер			= ВыборкаПоРаботникиОрганизации.ФиксированнаяИндексация;
	
КонецПроцедуры	

Процедура ДобавитьСтрокуОсновныхНачислений(ВыборкаПоСтрокамДокумента, НаборЗаписей, ОбнулитьРезультат = Ложь)
	
	Движение = НаборЗаписей.Добавить();
	ЗаполнитьЗначенияСвойств(Движение, ВыборкаПоСтрокамДокумента);
 	Движение.ВидУчетаВремени = ИНАГРО_ПроведениеРасчетов.ПолучитьВидУчетаВремени(ВыборкаПоСтрокамДокумента, ВыборкаПоСтрокамДокумента.СуммированныйУчетРабочегоВремени);
	Если ОбнулитьРезультат Тогда
		Движение.Результат = 0;
	КонецЕсли;

КонецПроцедуры // ДобавитьСтрокуОсновныхНачислений()

Процедура ДобавитьСтрокуВДвиженияПоНачислениям(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента, мПериод, мДействует)
	
	Движения.ИНАГРО_ПлановыеНачисленияРаботниковОрганизаций.Записывать = Истина;
	Движение = Движения.ИНАГРО_ПлановыеНачисленияРаботниковОрганизаций.Добавить();
	
	// Свойства
	Движение.Период						= мПериод;
	
	// Измерения
	Движение.Сотрудник					= ВыборкаПоСтрокамДокумента.Сотрудник;
	Движение.Организация				= ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;
	
	Движение.ВидРасчета					= ВыборкаПоСтрокамДокумента.ВидРасчета;
	
	// Ресурсы
	Движение.Действует		= мДействует;
	Движение.Действие		= ВыборкаПоСтрокамДокумента.Действие;
	Если мДействует Тогда
		Движение.Показатель1	= ВыборкаПоСтрокамДокумента.Показатель1;
		Движение.Показатель2	= ВыборкаПоСтрокамДокумента.Показатель2;
		Движение.Показатель3	= ВыборкаПоСтрокамДокумента.Показатель3;
		Движение.Показатель4	= ВыборкаПоСтрокамДокумента.Показатель4;
		Движение.Показатель5	= ВыборкаПоСтрокамДокумента.Показатель5;
		Движение.Показатель6	= ВыборкаПоСтрокамДокумента.Показатель6;
		
		Движение.ВидНачисления	= ВыборкаПоСтрокамДокумента.ВидНачисления;
		
		Движение.СпособОтраженияВБухучете	= ВыборкаПоСтрокамДокумента.СпособОтраженияВБухучете;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область АвтозаполнениеРасчет

// Выполняет Автозаполнение.
//
Процедура Автозаполнение() Экспорт
	
	Сотрудники = РаботникиОрганизации.ВыгрузитьКолонку("Сотрудник");
	
	Отказ = Ложь;
	Если Движения.ИНАГРО_ПлановыеНачисленияРаботниковОрганизаций.Количество() > 0 Тогда
		АвтозаполнениеНачислений(ЭтотОбъект.Ссылка, НачисленияПосле, Сотрудники);
		АвтозаполнениеНачислений(ЭтотОбъект.Ссылка, НачисленияДо, Сотрудники);		
		Возврат;
	КонецЕсли;
	// Перечитаем объект и соберем данные для заполнения наборов записей регистров
	НачатьТранзакцию();
	ВыборкаПоШапкеДокумента = СформироватьЗапросПоШапке("ПоРеквизитамДокумента").Выбрать();
	
	// позиционируем выборку
	ВыборкаПоШапкеДокумента.Следующий();
	ВыборкаПоНачислениям = СформироватьЗапросПоНачислениям().Выбрать();
	ЗафиксироватьТранзакцию();
	
	// Создадим рабочие наборы записей (
	
	Пока ВыборкаПоНачислениям.Следующий() Цикл
		Если Не Отказ Тогда
			
			Если ВыборкаПоНачислениям.Действие = Перечисления.ВидыДействияСНачислением.НеИзменять Тогда
				// ничего не меняем
				Продолжить;
				
			ИначеЕсли ВыборкаПоНачислениям.Действие = Перечисления.ВидыДействияСНачислением.Изменить Тогда
				
				мПериод = ВыборкаПоНачислениям.ДатаНачала-1;
				мДействует	= Ложь;
				ДобавитьСтрокуВДвиженияПоНачислениям(ВыборкаПоШапкеДокумента, ВыборкаПоНачислениям,мПериод,мДействует);
				
				мПериод = ВыборкаПоНачислениям.ДатаНачала;
				мДействует	= Истина;
				ДобавитьСтрокуВДвиженияПоНачислениям(ВыборкаПоШапкеДокумента, ВыборкаПоНачислениям,мПериод,мДействует);
				
			ИначеЕсли ВыборкаПоНачислениям.Действие = Перечисления.ВидыДействияСНачислением.Начать Тогда
				мПериод = ВыборкаПоНачислениям.ДатаНачала;
				мДействует	= Истина;
				ДобавитьСтрокуВДвиженияПоНачислениям(ВыборкаПоШапкеДокумента, ВыборкаПоНачислениям,мПериод,мДействует);
				
			ИначеЕсли ВыборкаПоНачислениям.Действие = Перечисления.ВидыДействияСНачислением.Прекратить Тогда
				// движение на вечер предыдущих суток
				мПериод = ВыборкаПоНачислениям.ДатаНачала-1;
				мДействует	= Ложь;
				ДобавитьСтрокуВДвиженияПоНачислениям(ВыборкаПоШапкеДокумента, ВыборкаПоНачислениям,мПериод,мДействует);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Движения.ИНАГРО_ПлановыеНачисленияРаботниковОрганизаций.Записать();
	
	// Если есть какие-то проблемы - удаляем движения (тут нет транзакции) 
	Если Отказ Тогда
		Движения.ИНАГРО_ПлановыеНачисленияРаботниковОрганизаций.Очистить();
		Движения.ИНАГРО_ПлановыеНачисленияРаботниковОрганизаций.Записать();
	КонецЕсли;

	АвтозаполнениеНачислений(ЭтотОбъект.Ссылка, НачисленияПосле, Сотрудники);
	АвтозаполнениеНачислений(ЭтотОбъект.Ссылка, НачисленияДо, Сотрудники);
		
	// Все закончено - удаляем движения
	Движения.ИНАГРО_ПлановыеНачисленияРаботниковОрганизаций.Очистить();
	Движения.ИНАГРО_ПлановыеНачисленияРаботниковОрганизаций.Записать();
    Записать();  
	
КонецПроцедуры

Процедура АвтозаполнениеНачислений(Регистратор, Начисления, Сотрудники)
	
	// Получим список видов расчета, входящих в базу индексации
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Начисления.ВидРасчета КАК ВидРасчета
		|ИЗ
		|	ПланВидовРасчета.ИНАГРО_Начисления.БазовыеВидыРасчета КАК Начисления
		|ГДЕ
		|	Начисления.Ссылка.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаНачислений.ИндексацияЗарплаты)";
		
	МассивБазаИндексации = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ВидРасчета");
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("парамПериодРегистрации" , НачалоМесяца(Дата));
	Запрос.УстановитьПараметр("парамСотрудник",Сотрудники); 
	Запрос.УстановитьПараметр("парамПустойСотрудник", Справочники.Сотрудники.ПустаяСсылка());
	
	Запрос.УстановитьПараметр("парамНачало" , НачалоМесяца(Дата));
	Запрос.УстановитьПараметр("парамКонец" , КонецМесяца(Дата));
	Если Начисления = НачисленияДо Тогда
		Запрос.УстановитьПараметр("парамСрез" , НачалоДня(НачалоМесяца(Дата)-1));
		Запрос.УстановитьПараметр("парамСРИндексация" , Перечисления.СпособыРасчетаНачислений.ИндексацияЗарплаты);
	Иначе	
        Запрос.УстановитьПараметр("парамСрез" , КонецМесяца(Дата));
		Запрос.УстановитьПараметр("парамСРИндексация" , Перечисления.СпособыРасчетаНачислений.ПустаяСсылка());
	КонецЕсли;	
	Запрос.УстановитьПараметр("парамБазаИндексации" , МассивБазаИндексации);
	Запрос.УстановитьПараметр("парамРегистратор" , Регистратор);
	Запрос.УстановитьПараметр("парамОрганизация" , Организация);

	МассивДействий = Новый Массив(2);
	МассивДействий[0] = Перечисления.ВидыДействияСНачислением.Изменить;
	МассивДействий[1] = Перечисления.ВидыДействияСНачислением.Начать;
	Запрос.УстановитьПараметр("парамДействиеНачатьИзменить", МассивДействий);
	Запрос.УстановитьПараметр("парамПрекратить", Перечисления.ВидыДействияСНачислением.Прекратить);
	Запрос.УстановитьПараметр("парамПоДням"     , Перечисления.ИНАГРО_ВидыУчетаВремени.ПоДням);
	
	Запрос.УстановитьПараметр("парамДатаВалютногоУчета" , НачалоМесяца(Дата));
	Запрос.УстановитьПараметр("парамВалютаУчета" , Константы.ВалютаРегламентированногоУчета.Получить());
	Запрос.УстановитьПараметр("Ежемесячно", Перечисления.ИНАГРО_ХарактерВыплатыПоДоговору.Ежемесячно);
	Запрос.УстановитьПараметр("парамИндивидуальныйПоказатель",Перечисления.ИНАГРО_ВидыПоказателейСхемМотивации.Индивидуальный);		
	Запрос.УстановитьПараметр("парамПоПодразделению",Перечисления.ИНАГРО_ВидыПоказателейСхемМотивации.ПоПодразделению);
	
	
	//	ВТСписокРаботникиИЗамены
	Если Истина Тогда 
		//	Описание:
		// 		Все сотрудники из табличной части, их внутренние совместительства и все сотрудники которых замещали
		//		Для п.1.
		ТекстЗапроса = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ВЫБОР КОГДА Сотрудники.ОсновноеНазначение=ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка) ТОГДА Сотрудники.Ссылка ИНАЧЕ Сотрудники.ОсновноеНазначение КОНЕЦ КАК Сотрудник,
		|	Сотрудники.Ссылка КАК Назначение
		|ПОМЕСТИТЬ ВТСписокРаботникиИЗамены	
		|ИЗ Справочник.Сотрудники КАК Сотрудники
		|ГДЕ	ВЫБОР КОГДА Сотрудники.ОсновноеНазначение=&парамПустойСотрудник ТОГДА Сотрудники.Ссылка ИНАЧЕ Сотрудники.ОсновноеНазначение КОНЕЦ В ( &парамСотрудник )
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Замены.Сотрудник КАК Сотрудник,
		|	Замены.ЗаменаСотрудник КАК Назначение
		|ИЗ Документ.ИНАГРО_ЗаменыРаботниковОрганизаций КАК Замены
		|ГДЕ	Замены.Сотрудник В ( &парамСотрудник )
		|	И	НАЧАЛОПЕРИОДА(Замены.ДатаНачала,МЕСЯЦ)<= &парамНачало
		|	И	КОНЕЦПЕРИОДА(Замены.ДатаОкончания,МЕСЯЦ)>= &парамНачало
		|	И	Замены.Проведен
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Сотрудник
		|";
		Запрос.Текст = ТекстЗапроса;
		Запрос.Выполнить();
		ТекстЗапросаВТСписокРаботникиИЗамены = "ВТСписокРаботникиИЗамены";
	КонецЕсли; 
	Запрос.Текст = "ВЫБРАТЬ * ИЗ ВТСписокРаботникиИЗамены";
	
	//	ВТЗамены
	Если Истина Тогда 
		//	Описание:
		// 		Все сотрудники из табличной части РаботникиОрганизации которые кого-либо заменяли
		//		Для п.1.
		ТекстЗапроса = "
		|ВЫБРАТЬ
		|	Замены.Сотрудник КАК Сотрудник,
		|	Замены.ЗаменаСотрудник КАК Назначение,
		|	Замены.Ссылка			КАК ДокументОснование,
		|	ВЫБОР КОГДА Замены.ДатаНачала < &парамНачало ТОГДА &парамНачало ИНАЧЕ Замены.ДатаНачала КОНЕЦ КАК ДатаНачала,
		|	ВЫБОР КОГДА Замены.ДатаОкончания > &парамКонец ТОГДА &парамКонец ИНАЧЕ Замены.ДатаОкончания КОНЕЦ КАК ДатаОкончания,
		|	Замены.ВидРасчета					КАК ВидРасчета,
		|	Замены.ЗаменаГрафикРаботы				КАК ГрафикРаботы,
		|	Замены.ЗаменаПодразделениеОрганизации	КАК ПодразделениеОрганизации,
		|	Замены.ЗаменаДолжность					КАК Должность
		|ПОМЕСТИТЬ ВТЗамены	
		|ИЗ Документ.ИНАГРО_ЗаменыРаботниковОрганизаций КАК Замены
		|
		|ГДЕ	Замены.Сотрудник В ( &парамСотрудник )                             
		|	И	Замены.ДатаНачала <= &парамКонец
		|	И	Замены.ДатаОкончания >= &парамНачало
		|	И	Замены.Проведен
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Сотрудник
		|";
		Запрос.Текст = ТекстЗапроса;
		Запрос.Выполнить();
		ТекстЗапросаВТЗамены = "ВТЗамены";
	КонецЕсли;
	Запрос.Текст = "ВЫБРАТЬ * ИЗ ВТЗамены";
	
	//	ВТСписокРаботники
	Если Истина Тогда 
		//	Описание:
		// 		Все сотрудники из табличной части, их внутренние совместительства БЕЗ ЗАМЕН
		//		Для п.1.
		ТекстЗапроса = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ВЫБОР КОГДА Сотрудники.ОсновноеНазначение=&парамПустойСотрудник ТОГДА Сотрудники.Ссылка ИНАЧЕ Сотрудники.ОсновноеНазначение КОНЕЦ КАК Сотрудник,
		|	Сотрудники.Ссылка КАК Назначение
		|ПОМЕСТИТЬ ВТСписокРаботники	
		|ИЗ Справочник.Сотрудники КАК Сотрудники
		|ГДЕ	ВЫБОР КОГДА Сотрудники.ОсновноеНазначение=ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка) ТОГДА Сотрудники.Ссылка ИНАЧЕ Сотрудники.ОсновноеНазначение КОНЕЦ
		|			В ( &парамСотрудник )
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Сотрудник
		|";
		Запрос.Текст = ТекстЗапроса;
		Запрос.Выполнить();
		ТекстЗапросаВТСписокРаботники = "ВТСписокРаботники";
	КонецЕсли; 
	Запрос.Текст = "ВЫБРАТЬ * ИЗ ВТСписокРаботники";
	
	//	ВТДвиженияРегл
	Если Истина Тогда 
		//	Описание:
		// 		Получим движения по регистру РаботникиОрганизации (Сотрудники из ВТСписокРаботникиИЗамены)
		//		Начало дня - это начало события, Конец дня это закрытие события
		//		Для п.1.
		ТекстЗапроса = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Работники.Сотрудник					КАК Сотрудник,
		|	Работники.ДатаНачала				КАК ДатаНачала,
		|	МИНИМУМ (
		|   	ВЫБОР	КОГДА  Окончания.Период ЕСТЬ NULL									// работник никуда не перемещался по регистру
		|         					ТОГДА КОНЕЦПЕРИОДА(&парамНачало, МЕСЯЦ)
		|         				КОГДА НАЧАЛОПЕРИОДА(Окончания.Период, ДЕНЬ) = Окончания.Период	// начало дня это кадровое перемещение, значит надо закрыть предыдущим днем
		|                           ТОГДА  ДОБАВИТЬКДАТЕ(Окончания.Период, СЕКУНДА, -1)
		|                       ИНАЧЕ  КОНЕЦПЕРИОДА(&парамНачало, МЕСЯЦ)							// непонятная ситуация, но поставим конец месяца
		|				КОНЕЦ)					КАК ДатаОкончания,
		|	Работники.ПодразделениеОрганизации	КАК ПодразделениеОрганизации,
		|	Работники.ГрафикРаботы				КАК ГрафикРаботы,
		|	Работники.Должность					КАК Должность
		|ПОМЕСТИТЬ ВТДвиженияРегл	
		|ИЗ (
		|	ВЫБРАТЬ 
		|		РаботникиОрганизаций.Организация				КАК Организация,
		|		РаботникиОрганизаций.Сотрудник					КАК Сотрудник,
		|		&парамНачало									КАК ДатаНачала,
		|		РаботникиОрганизаций.ПодразделениеОрганизации	КАК ПодразделениеОрганизации,
		|		РаботникиОрганизаций.ГрафикРаботы				КАК ГрафикРаботы,
		|		РаботникиОрганизаций.Должность					КАК Должность
		|	ИЗ РегистрСведений.ИНАГРО_РаботникиОрганизаций.СрезПоследних(&парамСрез, Организация = &парамОрганизация И Сотрудник В ( ВЫБРАТЬ Назначение ИЗ " + ТекстЗапросаВТСписокРаботникиИЗамены + " КАК СписокРаботников )
		|			) КАК РаботникиОрганизаций
		|	ГДЕ	РаботникиОрганизаций.ЗанимаемыхСтавок > 0
		|
		|	ОБЪЕДИНИТЬ ВСЕ
		|	ВЫБРАТЬ
		|		РаботникиОрганизаций.Организация				КАК Организация,
		|		РаботникиОрганизаций.Сотрудник					КАК Сотрудник,
		|		РаботникиОрганизаций.Период						КАК ДатаНачала,
		|		РаботникиОрганизаций.ПодразделениеОрганизации	КАК ПодразделениеОрганизации,
		|		РаботникиОрганизаций.ГрафикРаботы				КАК ГрафикРаботы,
		|		РаботникиОрганизаций.Должность					КАК Должность
		|	ИЗ РегистрСведений.ИНАГРО_РаботникиОрганизаций КАК РаботникиОрганизаций
		|	ГДЕ		РаботникиОрганизаций.Сотрудник В ( ВЫБРАТЬ Назначение ИЗ " + ТекстЗапросаВТСписокРаботники + " КАК СписокРаботников )
		|		И	РаботникиОрганизаций.Организация = &парамОрганизация
		|		И	НАЧАЛОПЕРИОДА(РаботникиОрганизаций.Период, МЕСЯЦ) = &парамНачало
		|		И	РаботникиОрганизаций.Период > &парамНачало
		|		И	РаботникиОрганизаций.ЗанимаемыхСтавок > 0
		|   ) КАК Работники
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИНАГРО_РаботникиОрганизаций КАК Окончания
		|ПО  НАЧАЛОПЕРИОДА(Окончания.Период, МЕСЯЦ) = &парамНачало // все движения за месяц
		|	И	Окончания.Организация = Работники.Организация
		|	И	Окончания.Сотрудник = Работники.Сотрудник
		|	И	Работники.ДатаНачала < Окончания.Период 
		|       
		|СГРУППИРОВАТЬ ПО
		|	Работники.Сотрудник,
		|	Работники.ДатаНачала,
		|	Работники.ПодразделениеОрганизации,
		|	Работники.ГрафикРаботы,
		|	Работники.Должность
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Сотрудник,
		|	ДатаНачала
		|";
		Запрос.Текст = ТекстЗапроса;
		Запрос.Выполнить();
		ТекстЗапросаВТДвиженияРаботников = "ВТДвиженияРегл";
	КонецЕсли;
	
	//	ВТДвиженияРаботников
	Если Истина Тогда 
		//	Описание:
		// 		Получим движения по регистру РаботникиОрганизации (Сотрудники из ВТСписокРаботникиИЗамены)
		//		Начало дня - это начало события, Конец дня это закрытие события
		//		Для п.1.
		ТекстЗапроса = "ВЫБРАТЬ
		               |	Работники.Сотрудник КАК Сотрудник,
		               |	Работники.Назначение КАК Назначение,
		               |	Работники.ДатаНачала КАК ДатаНачала,
		               |	МИНИМУМ(Окончание.ДатаОкончания) КАК ДатаОкончания
		               |ПОМЕСТИТЬ ВТДвижения
		               |ИЗ
		               |	(ВЫБРАТЬ
		               |		РаботникиПоДокументу.Сотрудник КАК Сотрудник,
		               |		РаботникиПоДокументу.Назначение КАК Назначение,
		               |		РаботникиРегл.ДатаНачала КАК ДатаНачала
		               |	ИЗ
		               |		ВТСписокРаботники КАК РаботникиПоДокументу
		               |			ЛЕВОЕ СОЕДИНЕНИЕ ВТДвиженияРегл КАК РаботникиРегл
		               |			ПО (РаботникиРегл.Сотрудник = РаботникиПоДокументу.Назначение)) КАК Работники
		               |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		               |			РаботникиПоДокументу.Сотрудник КАК Сотрудник,
		               |			РаботникиПоДокументу.Назначение КАК Назначение,
		               |			РаботникиРегл.ДатаОкончания КАК ДатаОкончания
		               |		ИЗ
		               |			ВТСписокРаботники КАК РаботникиПоДокументу
		               |				ЛЕВОЕ СОЕДИНЕНИЕ ВТДвиженияРегл КАК РаботникиРегл
		               |				ПО (РаботникиРегл.Сотрудник = РаботникиПоДокументу.Назначение)) КАК Окончание
		               |		ПО Работники.Назначение = Окончание.Назначение
		               |			И Работники.ДатаНачала <= Окончание.ДатаОкончания
		               |
		               |СГРУППИРОВАТЬ ПО
		               |	Работники.Сотрудник,
		               |	Работники.Назначение,
		               |	Работники.ДатаНачала";
		Запрос.Текст = ТекстЗапроса;
		Запрос.Выполнить();
		
		ТекстЗапроса = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ДатыДвижения.Сотрудник				КАК Сотрудник,
		|	ДатыДвижения.Назначение				КАК Назначение,
		|	ДатыДвижения.ДатаНачала				КАК ДатаНачала,
		|	ДатыДвижения.ДатаОкончания			КАК ДатаОкончания,
		|	РаботникиРегл.ПодразделениеОрганизации	КАК ПодразделениеОрганизации,
		|	РаботникиРегл.ГрафикРаботы	КАК ГрафикРаботы,
		|	РаботникиРегл.Должность		КАК Должность
		|ПОМЕСТИТЬ ВТДвиженияРаботников	
		|ИЗ ВТДвижения КАК ДатыДвижения
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ ВТДвиженияРегл КАК РаботникиРегл
		|ПО		ДатыДвижения.Назначение = РаботникиРегл.Сотрудник
		|	И	ДатыДвижения.ДатаНачала <= РаботникиРегл.ДатаОкончания 
		|	И	РаботникиРегл.ДатаНачала <= ДатыДвижения.ДатаОкончания 
		|
		|";
		Запрос.Текст = ТекстЗапроса;
		Запрос.Выполнить();
		ТекстЗапросаВТДвиженияРаботников = "ВТДвиженияРаботников";
	КонецЕсли; 
	
	Запрос.Текст = "ВЫБРАТЬ * ИЗ ВТДвиженияРаботников";
	
	//	ВТПлановыеНачисления
	Если Истина Тогда 
		//	Описание:
		// 		Получим движения по регистру ПлановыеНачисленияРаботниковОрганизаций (Сотрудники из ВТСписокРаботникиИЗамены)
		//		Начало дня - это начало события, Конец дня это закрытие события
		//		Для п.1.
		ТекстЗапроса = "
		|	ВЫБРАТЬ
		|		ПлановыеНачисления.Сотрудник 				КАК Сотрудник,
		|		&парамНачало								КАК ДатаНачала,
		|		КОНЕЦПЕРИОДА(&парамНачало, МЕСЯЦ)			КАК ДатаОкончания,
		|		ПлановыеНачисления.ОсновноеНачисление 		КАК ОсновноеНачисление, 
		|		ПлановыеНачисления.ВидНачисления			КАК ВидНачисления, 
		|		ПлановыеНачисления.ВидРасчета 				КАК ВидРасчета,
		|		ПлановыеНачисления.Действие,
		|		ПлановыеНачисления.ДокументОснование,
		|		ПлановыеНачисления.Показатель1,
		|		ПлановыеНачисления.Показатель2,
		|		ПлановыеНачисления.Показатель3,
		|		ПлановыеНачисления.Показатель4,
		|		ПлановыеНачисления.Показатель5,
		|		ПлановыеНачисления.Показатель6,
		|		ПлановыеНачисления.ВидУчетаВремениДляСредней
		|	ПОМЕСТИТЬ ВТПлановыеНачисления	
		|	ИЗ (
		|		ВЫБРАТЬ
		|			Начисления.Организация			КАК Организация,
		|			Начисления.Сотрудник			КАК Сотрудник,
		|			Начисления.ВидРасчета			КАК ВидРасчетаИзмерение,
		|			Начисления.ВидНачисления		КАК ВидНачисления,
		|			&парамНачало					КАК ДатаНачала,
		|			ВЫБОР	КОГДА Начисления.ВидНачисления = Значение (Перечисление.ИНАГРО_ВидыНачисленийРаботникаОрганизации.Основное) 
		|						ТОГДА ИСТИНА
		|					ИНАЧЕ ЛОЖЬ
		|			КОНЕЦ							КАК ОсновноеНачисление, // Оклад
		|			Начисления.ВидРасчета			КАК ВидРасчета,
		|			Начисления.Действие				КАК Действие,
		|			Начисления.ДокументОснование	КАК ДокументОснование,
		|			Начисления.Показатель1	КАК Показатель1,
		|			Начисления.Показатель2	КАК Показатель2,
		|			Начисления.Показатель3	КАК Показатель3,
		|			Начисления.Показатель4	КАК Показатель4,
		|			Начисления.Показатель5	КАК Показатель5,
		|			Начисления.Показатель6	КАК Показатель6,
		|			Начисления.ВидУчетаВремениДляСредней	КАК ВидУчетаВремениДляСредней
		|
		|			ИЗ РегистрСведений.ИНАГРО_ПлановыеНачисленияРаботниковОрганизаций.СрезПоследних(
		|					&парамСрез, Организация = &парамОрганизация И  
		|			    	Сотрудник В (ВЫБРАТЬ Назначение ИЗ " + ТекстЗапросаВТСписокРаботникиИЗамены + " КАК Работники)
		|				) КАК Начисления
		|	
		|			ГДЕ Начисления.Действует
		|	) КАК ПлановыеНачисления		

		|ИНДЕКСИРОВАТЬ ПО
		|	Сотрудник,
		|	ОсновноеНачисление,
		|	ДатаНачала,
		|	ДатаОкончания,
		|	ВидРасчета
		|";
		Запрос.Текст = ТекстЗапроса;
		Запрос.Выполнить();
		ТекстЗапросаВТПлановыеНачисления = "ВТПлановыеНачисления";
	КонецЕсли; 
	Запрос.Текст = "ВЫБРАТЬ * ИЗ ВТПлановыеНачисления";
	
	//	ВТШтатноеРасписание
	Если Истина Тогда 
		//	Описание:
		// 		Получим движения по регистру НадбавкиПоШтатномуРасписаниюОрганизаций 
		//      (по всем подразделениям которые принадлежат организации)
		//		Начало дня - это начало события, Конец дня это закрытие события
		//		Для п.1.
		ТекстЗапроса = "
		|	ВЫБРАТЬ РАЗЛИЧНЫЕ
		|		ШтатныеНадбавки.Должность					КАК Должность,
		|		ШтатныеНадбавки.ПодразделениеОрганизации	КАК ПодразделениеОрганизации,
		|		ШтатныеНадбавки.ДатаНачала					КАК ДатаНачала,
		|	МИНИМУМ (
		|   	ВЫБОР	КОГДА  Окончания.Период ЕСТЬ NULL									// работник никуда не перемещался по регистру
		|         					ТОГДА КОНЕЦПЕРИОДА(&парамНачало, МЕСЯЦ)
		|         				КОГДА НАЧАЛОПЕРИОДА(Окончания.Период, ДЕНЬ) = Окончания.Период	// начало дня это кадровое перемещение, значит надо закрыть предыдущим днем
		|                           ТОГДА  ДОБАВИТЬКДАТЕ(Окончания.Период, СЕКУНДА, -1)
		|                       ИНАЧЕ  КОНЕЦПЕРИОДА(&парамНачало, МЕСЯЦ)							// непонятная ситуация, но поставим конец месяца
		|				КОНЕЦ)					КАК ДатаОкончания,
		|		ШтатныеНадбавки.ВидНадбавки	КАК ВидРасчета,
		|		ШтатныеНадбавки.Показатель1	КАК Показатель1,
		|		ШтатныеНадбавки.Показатель2	КАК Показатель2,
		|		ШтатныеНадбавки.Показатель3	КАК Показатель3,
		|		ШтатныеНадбавки.Показатель4	КАК Показатель4,		
		|		ШтатныеНадбавки.Показатель5	КАК Показатель5,		
		|		ШтатныеНадбавки.Показатель6	КАК Показатель6		
		|
		|	ПОМЕСТИТЬ ВТШтатноеРасписание	
		|	ИЗ (
		|			ВЫБРАТЬ
		|				Надбавки.Должность					КАК Должность,
		|				Надбавки.ПодразделениеОрганизации	КАК ПодразделениеОрганизации,
		|				Надбавки.ВидНадбавки				КАК ВидНадбавки,
		|				&парамНачало			КАК ДатаНачала,
		|				Надбавки.Показатель1	КАК Показатель1,
		|				Надбавки.Показатель2	КАК Показатель2,
		|				Надбавки.Показатель3	КАК Показатель3,
		|				Надбавки.Показатель4	КАК Показатель4,		
		|				Надбавки.Показатель5	КАК Показатель5,		
		|				Надбавки.Показатель6	КАК Показатель6		
		|			ИЗ РегистрСведений.ИНАГРО_НадбавкиПоШтатномуРасписаниюОрганизаций.СрезПоследних(&парамНачало, ПодразделениеОрганизации.Владелец = &парамОрганизация) КАК Надбавки
		|			ГДЕ		Надбавки.Показатель1 > 0 
		|				ИЛИ	Надбавки.Показатель2 > 0 
		|				ИЛИ	Надбавки.Показатель3 > 0 		
		|				ИЛИ	Надбавки.Показатель4 > 0
		|
		|			ОБЪЕДИНИТЬ ВСЕ
		|			ВЫБРАТЬ
		|				Надбавки.Должность		КАК Должность,
		|				Надбавки.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
		|				Надбавки.ВидНадбавки	КАК ВидНадбавки,
		|				Надбавки.Период			КАК ДатаНачала,
		|				Надбавки.Показатель1	КАК Показатель1,
		|				Надбавки.Показатель2	КАК Показатель2,
		|				Надбавки.Показатель3	КАК Показатель3,
		|				Надбавки.Показатель4	КАК Показатель4,		
		|				Надбавки.Показатель5	КАК Показатель5,		
		|				Надбавки.Показатель6	КАК Показатель6		
		|			ИЗ РегистрСведений.ИНАГРО_НадбавкиПоШтатномуРасписаниюОрганизаций КАК Надбавки
		|			ГДЕ		НАЧАЛОПЕРИОДА(Надбавки.Период,МЕСЯЦ) = &парамНачало И Надбавки.Период > &парамНачало
		|				И	Надбавки.ПодразделениеОрганизации.Владелец = &парамОрганизация
		|				И	(Надбавки.Показатель1 > 0 
		|				ИЛИ	Надбавки.Показатель2 > 0 
		|				ИЛИ	Надбавки.Показатель3 > 0 		
		|				ИЛИ	Надбавки.Показатель4 > 0)
		|	) КАК ШтатныеНадбавки
		|			
		|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИНАГРО_НадбавкиПоШтатномуРасписаниюОрганизаций КАК Окончания
		|	ПО		НАЧАЛОПЕРИОДА(Окончания.Период) = &парамНачало // все движения за месяц
		|		И	Окончания.ПодразделениеОрганизации.Владелец = &парамОрганизация
		|		И	ШтатныеНадбавки.ДатаНачала < Окончания.Период
		|			
		|	СГРУППИРОВАТЬ ПО
		|		ШтатныеНадбавки.Должность,
		|		ШтатныеНадбавки.ПодразделениеОрганизации,
		|		ШтатныеНадбавки.ВидНадбавки,
		|		ШтатныеНадбавки.ДатаНачала,
		|		ШтатныеНадбавки.Показатель1,
		|		ШтатныеНадбавки.Показатель2,
		|		ШтатныеНадбавки.Показатель3,
		|		ШтатныеНадбавки.Показатель4,		
		|		ШтатныеНадбавки.Показатель5,		
		|		ШтатныеНадбавки.Показатель6		
		|";			
		Запрос.Текст = ТекстЗапроса;
		Запрос.Выполнить();
		ТекстЗапросаВТШтатноеРасписание = "ВТШтатноеРасписание";
	КонецЕсли;
	Запрос.Текст = "ВЫБРАТЬ * ИЗ ВТШтатноеРасписание";

	//	ВТВсеНачисленияБезИзмененияОкладов
	Если Истина Тогда
		ТекстЗапросаВТ = "
		|// (п.1.2.3.) Оклады по назначениям (основные, совместители) и штатные надбавки
		|	ВЫБРАТЬ
		|		1 КАК НомерЗапроса,
		|		РаботникиОрганизации.Сотрудник,
		|		РаботникиОрганизации.Назначение,
		|		ОсновныеНачисления.ВидРасчета,
		|		ИСТИНА											КАК ОсновноеНачисление,
		|		ВЫБОР КОГДА ДвиженияРаботников.ДатаНачала <= ОсновныеНачисления.ДатаНачала			ТОГДА ОсновныеНачисления.ДатаНачала		ИНАЧЕ ДвиженияРаботников.ДатаНачала		КОНЕЦ КАК ДатаНачала,
		|		ВЫБОР КОГДА ДвиженияРаботников.ДатаОкончания <= ОсновныеНачисления.ДатаОкончания	ТОГДА ДвиженияРаботников.ДатаОкончания	ИНАЧЕ ОсновныеНачисления.ДатаОкончания	КОНЕЦ КАК ДатаОкончания,
		|		ДвиженияРаботников.ПодразделениеОрганизации,
		|		ДвиженияРаботников.ГрафикРаботы,
		|		ДвиженияРаботников.Должность,
		|
		|		ОсновныеНачисления.ДокументОснование,
		|		ОсновныеНачисления.Показатель1,
		|		ОсновныеНачисления.Показатель2,
		|		ОсновныеНачисления.Показатель3,
		|		ОсновныеНачисления.Показатель4,
		|		ОсновныеНачисления.Показатель5,
		|		ОсновныеНачисления.Показатель6,
		|		ОсновныеНачисления.ВидУчетаВремениДляСредней	КАК ВидУчетаВремениДляСредней
		|ПОМЕСТИТЬ ВТВсеНачисленияБезИзмененияОкладов	
		|	ИЗ " + ТекстЗапросаВТСписокРаботники + " КАК РаботникиОрганизации
		|	
		|	ЛЕВОЕ СОЕДИНЕНИЕ " + ТекстЗапросаВТДвиженияРаботников + " КАК ДвиженияРаботников	
		|	ПО		РаботникиОрганизации.Назначение = ДвиженияРаботников.Назначение	
		|
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ " + ТекстЗапросаВТПлановыеНачисления + " КАК ОсновныеНачисления	
		|	ПО		РаботникиОрганизации.Назначение = ОсновныеНачисления.Сотрудник	
		|		И	ОсновныеНачисления.ОсновноеНачисление
		|		И	ДвиженияРаботников.ДатаНачала <= ОсновныеНачисления.ДатаОкончания
		|		И	ОсновныеНачисления.ДатаНачала <= ДвиженияРаботников.ДатаОкончания
		|	
		|	
		|	
		|//-----------------------
		|	ОБЪЕДИНИТЬ ВСЕ
		|// (п.1.2.3.) Оклады заменам
		|	ВЫБРАТЬ
		|		2 КАК НомерЗапроса,
		|		Замены.Сотрудник,
		|		Замены.Назначение,
		|		ОсновныеНачисления.ВидРасчета,
		|		ИСТИНА							КАК ОсновноеНачисление,
		|		Замены.ДатаНачала				КАК ДатаНачала,
		|		Замены.ДатаОкончания			КАК ДатаОкончания,
		|		Замены.ПодразделениеОрганизации,
		|		Замены.ГрафикРаботы,
		|		Замены.Должность,
		|		Замены.ДокументОснование		КАК ДокументОснование,
		|		ОсновныеНачисления.Показатель1,
		|		ОсновныеНачисления.Показатель2,
		|		ОсновныеНачисления.Показатель3,
		|		ОсновныеНачисления.Показатель4,
		|		ОсновныеНачисления.Показатель5,
		|		ОсновныеНачисления.Показатель6,
		|		ОсновныеНачисления.ВидУчетаВремениДляСредней	КАК ВидУчетаВремениДляСредней
		|	ИЗ ВТЗамены КАК Замены
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ " + ТекстЗапросаВТПлановыеНачисления + " КАК ОсновныеНачисления	
		|	ПО		Замены.Назначение = ОсновныеНачисления.Сотрудник	
		|		И	ОсновныеНачисления.ОсновноеНачисление
		|       // данные на начало замены
		|		И	Замены.ДатаНачала <= ОсновныеНачисления.ДатаОкончания
		|		И	ОсновныеНачисления.ДатаНачала <= Замены.ДатаНачала
		|	
		|	
		|	
		|//-----------------------
		|	ОБЪЕДИНИТЬ ВСЕ
		|// (п.1.) Основные, совместители и их штатные надбавки
		|	ВЫБРАТЬ
		|		3 КАК НомерЗапроса,
		|		Штатные.Сотрудник,
		|		Штатные.Назначение,
		|		Штатные.ВидРасчета,
		|		Штатные.ОсновноеНачисление,
		|		Штатные.ДатаНачала,
		|		Штатные.ДатаОкончания,
		|		Штатные.ПодразделениеОрганизации,
		|		Штатные.ГрафикРаботы,
		|		Штатные.Должность,
		|
		|		NULL КАК ДокументОснование,
		|		Штатные.Показатель1,
		|		Штатные.Показатель2,
		|		Штатные.Показатель3,
		|		Штатные.Показатель4,
		|		Штатные.Показатель5,
		|		Штатные.Показатель6,
		|		NULL	КАК ВидУчетаВремениДляСредней
		|   ИЗ ( 
		|		ВЫБРАТЬ
		|			РаботникиОрганизации.Сотрудник,
		|			РаботникиОрганизации.Назначение,
		|			ШтатныеНадбавки.ВидРасчета,
		|			ЛОЖЬ											КАК ОсновноеНачисление,
		|
		|			ВЫБОР 
		|				КОГДА ПлановыеНачисления.НомерТочки	ЕСТЬ NULL ИЛИ ПлановыеНачисления.НомерТочки = 1		
		|					ТОГДА	ВЫБОР 
		|							КОГДА ДвиженияРаботников.ДатаНачала <= ШтатныеНадбавки.ДатаНачала			
		|									ТОГДА ШтатныеНадбавки.ДатаНачала		
		|								ИНАЧЕ ДвиженияРаботников.ДатаНачала 
		|							КОНЕЦ 
		|				ИНАЧЕ // ПлановыеНачисления.НомерТочки = 2
		|					ВЫБОР 
		|						КОГДА ДОБАВИТЬКДАТЕ(НачалоПЕРИОДА(ПлановыеНачисления.ДатаОкончания,ДЕНЬ), ДЕНЬ,1) >= ШтатныеНадбавки.ДатаНачала			
		|							ИЛИ ДОБАВИТЬКДАТЕ(НачалоПЕРИОДА(ПлановыеНачисления.ДатаОкончания,ДЕНЬ), ДЕНЬ,1) >= ДвиженияРаботников.ДатаНачала			
		|							ТОГДА ДОБАВИТЬКДАТЕ(НачалоПЕРИОДА(ПлановыеНачисления.ДатаОкончания,ДЕНЬ), ДЕНЬ,1)		
		|						КОГДА ДвиженияРаботников.ДатаНачала <= ШтатныеНадбавки.ДатаНачала			
		|							ТОГДА ШтатныеНадбавки.ДатаНачала		
		|						ИНАЧЕ ДвиженияРаботников.ДатаНачала 
		|					КОНЕЦ 
		|			КОНЕЦ 
		|			КАК ДатаНачала,
		|
		|			ВЫБОР 
		|				КОГДА ПлановыеНачисления.НомерТочки ЕСТЬ NULL ИЛИ ПлановыеНачисления.НомерТочки = 2		
		|					ТОГДА	ВЫБОР 
		|								КОГДА ДвиженияРаботников.ДатаОкончания <= ШтатныеНадбавки.ДатаОкончания	
		|									ТОГДА ДвиженияРаботников.ДатаОкончания	
		|								ИНАЧЕ ШтатныеНадбавки.ДатаОкончания	
		|							КОНЕЦ 
 		|				ИНАЧЕ // ПлановыеНачисления.НомерТочки = 1 
		|					ВЫБОР 
		|						КОГДА ДОБАВИТЬКДАТЕ(НачалоПЕРИОДА(ПлановыеНачисления.ДатаНачала,ДЕНЬ), ДЕНЬ,-1) <= ШтатныеНадбавки.ДатаОкончания			
		|							ИЛИ ДОБАВИТЬКДАТЕ(НачалоПЕРИОДА(ПлановыеНачисления.ДатаНачала,ДЕНЬ), ДЕНЬ,-1) <= ДвиженияРаботников.ДатаОкончания			
		|							ТОГДА ДОБАВИТЬКДАТЕ(НачалоПЕРИОДА(ПлановыеНачисления.ДатаНачала,ДЕНЬ), ДЕНЬ,-1)		
		|						КОГДА ДвиженияРаботников.ДатаОкончания <= ШтатныеНадбавки.ДатаОкончания	
		|							ТОГДА ДвиженияРаботников.ДатаОкончания	
		|						ИНАЧЕ ШтатныеНадбавки.ДатаОкончания	
		|					КОНЕЦ 
		|			КОНЕЦ 
		|			КАК ДатаОкончания,
		|
		|			ДвиженияРаботников.ПодразделениеОрганизации,
		|			ДвиженияРаботников.ГрафикРаботы,
		|			ДвиженияРаботников.Должность,
		|
		|			ШтатныеНадбавки.Показатель1,
		|			ШтатныеНадбавки.Показатель2,
		|			ШтатныеНадбавки.Показатель3,
		|			ШтатныеНадбавки.Показатель4,
		|			ШтатныеНадбавки.Показатель5,
		|			ШтатныеНадбавки.Показатель6
		|
		|		ИЗ " + ТекстЗапросаВТСписокРаботники + " КАК РаботникиОрганизации
		|	
		|		ЛЕВОЕ СОЕДИНЕНИЕ " + ТекстЗапросаВТДвиженияРаботников + " КАК ДвиженияРаботников	
		|		ПО		РаботникиОрганизации.Назначение = ДвиженияРаботников.Назначение	
		|
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ " + ТекстЗапросаВТШтатноеРасписание + " КАК ШтатныеНадбавки	
		|		ПО		ШтатныеНадбавки.ПодразделениеОрганизации = ДвиженияРаботников.ПодразделениеОрганизации
		|			И	ШтатныеНадбавки.Должность = ДвиженияРаботников.Должность
		|			И	ДвиженияРаботников.ДатаНачала <= ШтатныеНадбавки.ДатаОкончания
		|			И	ШтатныеНадбавки.ДатаНачала <= ДвиженияРаботников.ДатаОкончания
		|
		|   	// отрезок вытеснения
		|		ЛЕВОЕ СОЕДИНЕНИЕ (	
		|			ВЫБРАТЬ
		|     	      1 КАК НомерТочки,
		|     	      ПлановыеНач.Сотрудник,
		|     	      ПлановыеНач.ОсновноеНачисление,
		|     	      ПлановыеНач.ДатаНачала	КАК ДатаНачала,
		|     	      &парамКонец 			КАК ДатаОкончания,
		|     	      ПлановыеНач.ВидРасчета
		|			ИЗ " + ТекстЗапросаВТПлановыеНачисления + " КАК ПлановыеНач
		|			ГДЕ НЕ ПлановыеНач.ОсновноеНачисление
		|
		|
		|       	ОБЪЕДИНИТЬ ВСЕ
		|			ВЫБРАТЬ
		|       	    2 КАК НомерТочки,
		|       	    ПлановыеНач.Сотрудник,
		|       	    ПлановыеНач.ОсновноеНачисление,
		|        	   &парамКонец					КАК ДатаНачала,
		|        	   ПлановыеНач.ДатаОкончания	КАК ДатаОкончания,
		|        	   ПлановыеНач.ВидРасчета
		|			ИЗ " + ТекстЗапросаВТПлановыеНачисления + " КАК ПлановыеНач
		|			ГДЕ НЕ ПлановыеНач.ОсновноеНачисление
		|
		|			) КАК ПлановыеНачисления	
		|		ПО		РаботникиОрганизации.Назначение = ПлановыеНачисления.Сотрудник	
		|			И	ДвиженияРаботников.ДатаНачала <= ПлановыеНачисления.ДатаОкончания
		|			И	ПлановыеНачисления.ДатаНачала <= ДвиженияРаботников.ДатаОкончания
		|			И	ШтатныеНадбавки.ВидРасчета = ПлановыеНачисления.ВидРасчета
		|			И	(ВЫБОР КОГДА ДвиженияРаботников.ДатаНачала <= ШтатныеНадбавки.ДатаНачала ТОГДА ШтатныеНадбавки.ДатаНачала ИНАЧЕ ДвиженияРаботников.ДатаНачала КОНЕЦ
		|				<= ПлановыеНачисления.ДатаНачала
		|			ИЛИ	ПлановыеНачисления.ДатаОкончания
		|				<= ВЫБОР КОГДА ДвиженияРаботников.ДатаОкончания <= ШтатныеНадбавки.ДатаОкончания ТОГДА ДвиженияРаботников.ДатаОкончания	ИНАЧЕ ШтатныеНадбавки.ДатаОкончания  КОНЕЦ)
		|
		|   ) КАК Штатные
		|	ГДЕ Штатные.ДатаНачала <= Штатные.ДатаОкончания			
		|	
		|	
		|	
		|//-----------------------
		|	ОБЪЕДИНИТЬ ВСЕ
		|// (п.1.) Замены и их штатные надбавки
		|	ВЫБРАТЬ
		|		4 КАК НомерЗапроса,
		|		Замены.Сотрудник,
		|		Замены.Назначение,
		|		ШтатныеНадбавки.ВидРасчета,
		|		ЛОЖЬ							КАК ОсновноеНачисление,
		|		Замены.ДатаНачала				КАК ДатаНачала,
		|		Замены.ДатаОкончания			КАК ДатаОкончания,
		|		Замены.ПодразделениеОрганизации,
		|		Замены.ГрафикРаботы,
		|		Замены.Должность,
		|
		|		NULL,
		|		ШтатныеНадбавки.Показатель1,
		|		ШтатныеНадбавки.Показатель2,
		|		ШтатныеНадбавки.Показатель3,
		|		ШтатныеНадбавки.Показатель4,
		|		ШтатныеНадбавки.Показатель5,
		|		ШтатныеНадбавки.Показатель6,
		|		NULL	КАК ВидУчетаВремениДляСредней
		|	ИЗ ВТЗамены КАК Замены
		|
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ " + ТекстЗапросаВТШтатноеРасписание + " КАК ШтатныеНадбавки	
		|	ПО		ШтатныеНадбавки.ПодразделениеОрганизации = Замены.ПодразделениеОрганизации
		|		И	ШтатныеНадбавки.Должность = Замены.Должность
		|		И	Замены.ДатаНачала <= ШтатныеНадбавки.ДатаОкончания
		|		И	ШтатныеНадбавки.ДатаНачала <= Замены.ДатаНачала
		|	
		|	
		|	
		|//-----------------------
		|	ОБЪЕДИНИТЬ ВСЕ
		|// (п.2.) Прочие плановые начисления по работникам кроме начислений по которым заменяли
		|	ВЫБРАТЬ
		|		5 КАК НомерЗапроса,
		|		РаботникиОрганизации.Сотрудник,
		|		РаботникиОрганизации.Назначение			КАК Назначение,
		|		Начисления.ВидРасчета,
		|		ЛОЖЬ									КАК ОсновноеНачисление,
		|		Начисления.ДатаНачала,
		|		Начисления.ДатаОкончания,
		|   	ДвиженияРаботников.ПодразделениеОрганизации,
		|
		|		ДвиженияРаботников.ГрафикРаботы,
		|		ДвиженияРаботников.Должность,
		|
		|		Начисления.ДокументОснование,
		|		Начисления.Показатель1,
		|		Начисления.Показатель2,
		|		Начисления.Показатель3,
		|		Начисления.Показатель4,
		|		Начисления.Показатель5,
		|		Начисления.Показатель6,
		|		Начисления.ВидУчетаВремениДляСредней
		|
		|	ИЗ " + ТекстЗапросаВТСписокРаботники + " КАК РаботникиОрганизации
		|	
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ " + ТекстЗапросаВТПлановыеНачисления + " КАК Начисления	
		|	ПО		РаботникиОрганизации.Назначение = Начисления.Сотрудник	
		|		И	НЕ Начисления.ОсновноеНачисление
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ (	
		|		ВЫБРАТЬ
		|			ПлановыеНачисления.Сотрудник  КАК Сотрудник,
		|			ПлановыеНачисления.ВидРасчета  КАК ВидРасчета,
		|			ПлановыеНачисления.ДатаНачала  КАК ДатаНачала,
		|			МАКСИМУМ(Движения.ДатаНачала)  КАК АктуальнаяДата
		|		ИЗ " + ТекстЗапросаВТПлановыеНачисления + " КАК ПлановыеНачисления	
		|		ЛЕВОЕ СОЕДИНЕНИЕ  " + ТекстЗапросаВТДвиженияРаботников + " КАК Движения
		|   	ПО		Движения.Сотрудник = ПлановыеНачисления.Сотрудник
		|			И	Движения.ДатаНачала <= ПлановыеНачисления.ДатаНачала
		|		ГДЕ	НЕ ПлановыеНачисления.ОсновноеНачисление
		|		СГРУППИРОВАТЬ ПО
		|			ПлановыеНачисления.Сотрудник,
		|			ПлановыеНачисления.ВидРасчета,
		|			ПлановыеНачисления.ДатаНачала
		|	) КАК ПериодАктуальногоДвижения
		|	ПО 		ПериодАктуальногоДвижения.Сотрудник = Начисления.Сотрудник
		|		И	ПериодАктуальногоДвижения.ВидРасчета = Начисления.ВидРасчета		
		|		И	ПериодАктуальногоДвижения.ДатаНачала = Начисления.ДатаНачала		
		|	
		|	ЛЕВОЕ СОЕДИНЕНИЕ  " + ТекстЗапросаВТДвиженияРаботников + " КАК ДвиженияРаботников
		|	ПО		ДвиженияРаботников.Назначение = РаботникиОрганизации.Назначение
		|		И	ПериодАктуальногоДвижения.АктуальнаяДата = ДвиженияРаботников.ДатаНачала
		|	
		|	
		|	
		|//-----------------------
		|	ОБЪЕДИНИТЬ ВСЕ 
		|// (п.2.) Прочие плановые начисления только по работникам которых заменяли
		|	ВЫБРАТЬ
		|		5 КАК НомерЗапроса,
		|		Замены.Сотрудник,
		|		Замены.Назначение			КАК Назначение,
		|		Начисления.ВидРасчета,
		|		ЛОЖЬ									КАК ОсновноеНачисление,
		|		Замены.ДатаНачала				КАК ДатаНачала,
		|		Замены.ДатаОкончания			КАК ДатаОкончания,
		|   	Замены.ПодразделениеОрганизации,
		|
		|		Замены.ГрафикРаботы,
		|		Замены.Должность,
		|
		|		Замены.ДокументОснование,
		|		Начисления.Показатель1,
		|		Начисления.Показатель2,
		|		Начисления.Показатель3,
		|		Начисления.Показатель4,
		|		Начисления.Показатель5,
		|		Начисления.Показатель6,
		|		Начисления.ВидУчетаВремениДляСредней
		|
		|	ИЗ ВТЗамены КАК Замены
		|	
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ " + ТекстЗапросаВТПлановыеНачисления + " КАК Начисления	
		|	ПО		Замены.Назначение = Начисления.Сотрудник	
		|		И	Начисления.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.ИНАГРО_ВидыНачисленийРаботникаОрганизации.Надбавка)
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ (	
		|		ВЫБРАТЬ
		|			ПлановыеНачисления.Сотрудник  КАК Сотрудник,
		|			ПлановыеНачисления.ВидРасчета  КАК ВидРасчета,
		|			ПлановыеНачисления.ДатаНачала  КАК ДатаНачала,
		|			МАКСИМУМ(Движения.ДатаНачала)  КАК АктуальнаяДата
		|		ИЗ " + ТекстЗапросаВТПлановыеНачисления + " КАК ПлановыеНачисления	
		|		ЛЕВОЕ СОЕДИНЕНИЕ  " + ТекстЗапросаВТДвиженияРаботников + " КАК Движения
		|   	ПО		Движения.Сотрудник = ПлановыеНачисления.Сотрудник
		|			И	Движения.ДатаНачала <= ПлановыеНачисления.ДатаНачала
		|		ГДЕ	ПлановыеНачисления.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.ИНАГРО_ВидыНачисленийРаботникаОрганизации.Надбавка) 
		|		СГРУППИРОВАТЬ ПО
		|			ПлановыеНачисления.Сотрудник,
		|			ПлановыеНачисления.ВидРасчета,
		|			ПлановыеНачисления.ДатаНачала
		|	) КАК ПериодАктуальногоДвижения
		|	ПО 		ПериодАктуальногоДвижения.Сотрудник = Начисления.Сотрудник
		|		И	ПериодАктуальногоДвижения.ВидРасчета = Начисления.ВидРасчета		
		|		И	ПериодАктуальногоДвижения.ДатаНачала = Начисления.ДатаНачала		
		|	
		|	ЛЕВОЕ СОЕДИНЕНИЕ  " + ТекстЗапросаВТДвиженияРаботников + " КАК ДвиженияРаботников
		|	ПО		ДвиженияРаботников.Назначение = Замены.Назначение
		|		И	ПериодАктуальногоДвижения.АктуальнаяДата = ДвиженияРаботников.ДатаНачала
		|	
		|	
		|	
		|//-----------------------
		|	ОБЪЕДИНИТЬ ВСЕ
		|// (п.1.) Надо вытеснить основной оклад если было Замещение
		|	ВЫБРАТЬ
		|		6 КАК НомерЗапроса,
		|		Замены.Сотрудник КАК Сотрудник,
		|		Замены.Сотрудник КАК Назначение,
		|		Замены.ВидРасчета,
		|		ЛОЖЬ							КАК ОсновноеНачисление,
		|		Замены.ДатаНачала				КАК ДатаНачала,
		|		Замены.ДатаОкончания			КАК ДатаОкончания,
		|		Замены.ПодразделениеОрганизации,
		|		Замены.ГрафикРаботы,
		|		Замены.Должность,
		|
		|		NULL,
		|		NULL КАК Показатель1,
		|		NULL КАК Показатель2,
		|		NULL КАК Показатель3,
		|		NULL КАК Показатель4,
		|		NULL КАК Показатель5,
		|		NULL КАК Показатель6,
		|		NULL КАК ВидУчетаВремениДляСредней
		|
		|	ИЗ ВТЗамены КАК Замены
		|	
		|	ГДЕ Замены.ВидРасчета = ЗНАЧЕНИЕ(ПланВидовРасчета.ИНАГРО_Начисления.Замещение)
		|";
		Запрос.Текст = ТекстЗапросаВТ;
		Запрос.Выполнить();
	КонецЕсли;
	Запрос.Текст = "ВЫБРАТЬ * ИЗ ВТВсеНачисленияБезИзмененияОкладов";
	
	//	ВТОкладТариф
	Если Истина Тогда 
		//	Описание:
		// 		Все оклады сотрудников
		//		Для п.1.
		ТекстЗапроса = "
		|ВЫБРАТЬ
		|	Начисления.Организация	КАК Организация,
		|	Начисления.Сотрудник	КАК Назначение,
		|	Начисления.ВидРасчета	КАК ВидРасчета,
		|
		|	ВЫБОР	КОГДА 		Начисления.ВидРасчета.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаНачислений.ПоМесячнойТарифнойСтавкеПоДням)
		|					ИЛИ Начисления.ВидРасчета.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаНачислений.ПоМесячнойТарифнойСтавкеПоЧасам)
		|					ИЛИ	НаборПоказателей.Показатель = ЗНАЧЕНИЕ(Справочник.ИНАГРО_ПоказателиСхемМотивации.НормаВремениВДнях)
		|					ИЛИ	НаборПоказателей.Показатель = ЗНАЧЕНИЕ(Справочник.ИНАГРО_ПоказателиСхемМотивации.НормаВремениВЧасах)
		|					ИЛИ	НаборПоказателей.Показатель = ЗНАЧЕНИЕ(Справочник.ИНАГРО_ПоказателиСхемМотивации.НормаВремениЗаМесяцВДнях)		
		|					ИЛИ	НаборПоказателей.Показатель = ЗНАЧЕНИЕ(Справочник.ИНАГРО_ПоказателиСхемМотивации.НормаВремениЗаМесяцВЧасах)	
		|				ТОГДА ""ЗА МЕСЯЦ""
		|			КОГДА 	Начисления.ВидРасчета.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаНачислений.ПоДневнойТарифнойСтавке)
		|			ТОГДА ""ЗА ДЕНЬ""
		|			ИНАЧЕ ""ЗА ЧАС""
		|	КОНЕЦ					КАК СпособУчетаВремени,
		|
		|	 Начисления.Показатель1 КАК ОкладТариф,
		|
		|	Начисления.Период		КАК ДатаНачала,
		|	МИНИМУМ(Окончания.Период)	КАК ДатаОкончания
		|ПОМЕСТИТЬ ВТОкладТариф	
		|ИЗ РегистрСведений.ИНАГРО_ПлановыеНачисленияРаботниковОрганизаций КАК Начисления
		|
		|
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИНАГРО_ПлановыеНачисленияРаботниковОрганизаций КАК Окончания
		|ПО Начисления.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.ИНАГРО_ВидыНачисленийРаботникаОрганизации.Основное)
		|	И	Начисления.Действует 
		|	И	Начисления.Организация = &парамОрганизация
		|	И	Начисления.Сотрудник = Окончания.Сотрудник
		|	И	Начисления.ВидРасчета = Окончания.ВидРасчета
		|	И	Начисления.Период < Окончания.Период
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ(
		|	ВЫБРАТЬ ПЕРВЫЕ 1
		|   НаборПоказателей.Ссылка	КАК ВидРасчета,
		|   НаборПоказателей.Показатель	КАК Показатель
		|	ИЗ ПланВидовРасчета.ИНАГРО_Начисления.Показатели КАК НаборПоказателей
		|	ГДЕ		НаборПоказателей.Показатель = ЗНАЧЕНИЕ(Справочник.ИНАГРО_ПоказателиСхемМотивации.НормаВремениВДнях)
		|		ИЛИ	НаборПоказателей.Показатель = ЗНАЧЕНИЕ(Справочник.ИНАГРО_ПоказателиСхемМотивации.НормаВремениВЧасах)
		|		ИЛИ	НаборПоказателей.Показатель = ЗНАЧЕНИЕ(Справочник.ИНАГРО_ПоказателиСхемМотивации.НормаВремениЗаМесяцВДнях)		
		|		ИЛИ	НаборПоказателей.Показатель = ЗНАЧЕНИЕ(Справочник.ИНАГРО_ПоказателиСхемМотивации.НормаВремениЗаМесяцВЧасах)	
		|) КАК НаборПоказателей
		|ПО Начисления.ВидРасчета = НаборПоказателей.ВидРасчета
		|
		|ГДЕ		
		|   Начисления.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.ИНАГРО_ВидыНачисленийРаботникаОрганизации.Основное)
		|	И	Начисления.Действует 
		|	И	Начисления.Организация = &парамОрганизация
		|	И	Начисления.Сотрудник В (ВЫБРАТЬ Назначение ИЗ " + ТекстЗапросаВТСписокРаботникиИЗамены + " КАК Работники)
		|
		|СГРУППИРОВАТЬ ПО
		|	Начисления.Организация,
		|	Начисления.Сотрудник,
		|	Начисления.ВидРасчета,
		|	ВЫБОР	КОГДА 		Начисления.ВидРасчета.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаНачислений.ПоМесячнойТарифнойСтавкеПоДням)
		|					ИЛИ Начисления.ВидРасчета.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаНачислений.ПоМесячнойТарифнойСтавкеПоЧасам)
		|					ИЛИ	НаборПоказателей.Показатель = ЗНАЧЕНИЕ(Справочник.ИНАГРО_ПоказателиСхемМотивации.НормаВремениВДнях)
		|					ИЛИ	НаборПоказателей.Показатель = ЗНАЧЕНИЕ(Справочник.ИНАГРО_ПоказателиСхемМотивации.НормаВремениВЧасах)
		|					ИЛИ	НаборПоказателей.Показатель = ЗНАЧЕНИЕ(Справочник.ИНАГРО_ПоказателиСхемМотивации.НормаВремениЗаМесяцВДнях)		
		|					ИЛИ	НаборПоказателей.Показатель = ЗНАЧЕНИЕ(Справочник.ИНАГРО_ПоказателиСхемМотивации.НормаВремениЗаМесяцВЧасах)	
		|				ТОГДА ""ЗА МЕСЯЦ""
		|			КОГДА 	Начисления.ВидРасчета.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаНачислений.ПоДневнойТарифнойСтавке)
		|			ТОГДА ""ЗА ДЕНЬ""
		|			ИНАЧЕ ""ЗА ЧАС""
		|	КОНЕЦ,
		|
		|	Начисления.Показатель1,
		|
		|	Начисления.Период
 		|";
		Запрос.Текст = ТекстЗапроса;
		Запрос.Выполнить();
	КонецЕсли;
	Запрос.Текст = "ВЫБРАТЬ * ИЗ ВТОкладТариф";
	
	//	ВТВсеНачисления
	ТекстЗапросаВТ = "
	|	ВЫБРАТЬ 
	|		СписокНачислений1.Сотрудник			КАК Сотрудник,
	|		СписокНачислений1.Назначение		КАК Назначение,
	|		ВЫБОР КОГДА ЕСТЬNULL(Оклады1.ДатаНачала,СписокНачислений1.ДатаНачала) <= СписокНачислений1.ДатаНачала		ТОГДА СписокНачислений1.ДатаНачала	ИНАЧЕ Оклады1.ДатаНачала		КОНЕЦ			КАК ДатаНачала,
	|		ВЫБОР КОГДА ЕСТЬNULL(Оклады1.ДатаОкончания,СписокНачислений1.ДатаОкончания) < СписокНачислений1.ДатаОкончания	ТОГДА Оклады1.ДатаОкончания	ИНАЧЕ СписокНачислений1.ДатаОкончания	КОНЕЦ	КАК ДатаОкончания,
	|		СписокНачислений1.ВидРасчета		КАК ВидРасчета,
	|
	|		СписокНачислений1.НомерЗапроса,
	|		СписокНачислений1.ОсновноеНачисление,
	|		СписокНачислений1.ПодразделениеОрганизации,
	|		СписокНачислений1.ГрафикРаботы,
	|		СписокНачислений1.Должность,
	|
	|		СписокНачислений1.ДокументОснование,
	|		СписокНачислений1.Показатель1,
	|		СписокНачислений1.Показатель2,
	|		СписокНачислений1.Показатель3,
	|		СписокНачислений1.Показатель4,
	|		СписокНачислений1.Показатель5,
	|		СписокНачислений1.Показатель6,
	|		СписокНачислений1.ВидУчетаВремениДляСредней,
	|		МАКСИМУМ(Оклады2.ДатаНачала) КАК ДатаНачалаОклада
	|ПОМЕСТИТЬ ВТВсеНачисления	
	|	ИЗ ВТВсеНачисленияБезИзмененияОкладов КАК СписокНачислений1
	|	//-----------------------
	|	// данные о видах показателей
	|	ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.ИНАГРО_Начисления.Показатели КАК ТипПоказатель1
	|	ПО		ТипПоказатель1.Ссылка = СписокНачислений1.ВидРасчета И ТипПоказатель1.НомерСтроки = 1
	|	ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.ИНАГРО_Начисления.Показатели КАК ТипПоказатель2
	|	ПО		ТипПоказатель2.Ссылка = СписокНачислений1.ВидРасчета И ТипПоказатель2.НомерСтроки = 2
	|	ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.ИНАГРО_Начисления.Показатели КАК ТипПоказатель3
	|	ПО		ТипПоказатель3.Ссылка = СписокНачислений1.ВидРасчета И ТипПоказатель3.НомерСтроки = 3
	|	ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.ИНАГРО_Начисления.Показатели КАК ТипПоказатель4
	|	ПО		ТипПоказатель4.Ссылка = СписокНачислений1.ВидРасчета И ТипПоказатель4.НомерСтроки = 4
	|	ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.ИНАГРО_Начисления.Показатели КАК ТипПоказатель5
	|	ПО		ТипПоказатель5.Ссылка = СписокНачислений1.ВидРасчета И ТипПоказатель5.НомерСтроки = 5
	|	ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.ИНАГРО_Начисления.Показатели КАК ТипПоказатель6
	|	ПО		ТипПоказатель6.Ссылка = СписокНачислений1.ВидРасчета И ТипПоказатель6.НомерСтроки = 6
	|	//-----------------------
	|	// данные об окладе
	|	ЛЕВОЕ СОЕДИНЕНИЕ ВТОкладТариф КАК Оклады1
	|	ПО		СписокНачислений1.Назначение = Оклады1.Назначение
	| 		И  (СписокНачислений1.ДатаНачала <= Оклады1.ДатаОкончания ИЛИ Оклады1.ДатаОкончания ЕСТЬ NULL)
	| 		И  Оклады1.ДатаНачала <= СписокНачислений1.ДатаОкончания
	|		И	(ТипПоказатель1.Показатель = ЗНАЧЕНИЕ(Справочник.ИНАГРО_ПоказателиСхемМотивации.ОкладТарифНазначения)
	|		ИЛИ	ТипПоказатель2.Показатель = ЗНАЧЕНИЕ(Справочник.ИНАГРО_ПоказателиСхемМотивации.ОкладТарифНазначения)
	|		ИЛИ	ТипПоказатель3.Показатель = ЗНАЧЕНИЕ(Справочник.ИНАГРО_ПоказателиСхемМотивации.ОкладТарифНазначения)
	|		ИЛИ	ТипПоказатель4.Показатель = ЗНАЧЕНИЕ(Справочник.ИНАГРО_ПоказателиСхемМотивации.ОкладТарифНазначения)
	|		ИЛИ	ТипПоказатель5.Показатель = ЗНАЧЕНИЕ(Справочник.ИНАГРО_ПоказателиСхемМотивации.ОкладТарифНазначения)
	|		ИЛИ	ТипПоказатель6.Показатель = ЗНАЧЕНИЕ(Справочник.ИНАГРО_ПоказателиСхемМотивации.ОкладТарифНазначения)
	|		ИЛИ	СписокНачислений1.ВидРасчета = ЗНАЧЕНИЕ(ПланВидовРасчета.ИНАГРО_Начисления.ДоплатаЗаВечерниеЧасы)
	|		ИЛИ	СписокНачислений1.ВидРасчета = ЗНАЧЕНИЕ(ПланВидовРасчета.ИНАГРО_Начисления.ДоплатаЗаНочныеЧасы))
	|	//-----------------------
	|	// данные об окладе
	|	ЛЕВОЕ СОЕДИНЕНИЕ ВТОкладТариф КАК Оклады2
	|	ПО		СписокНачислений1.Назначение = Оклады2.Назначение
	| 		И  (СписокНачислений1.ДатаНачала <= Оклады2.ДатаОкончания ИЛИ Оклады1.ДатаОкончания ЕСТЬ NULL)
	| 		И  Оклады2.ДатаНачала <= СписокНачислений1.ДатаОкончания
	|	СГРУППИРОВАТЬ ПО 
	|		СписокНачислений1.Сотрудник,
	|		СписокНачислений1.Назначение,
	|		ВЫБОР КОГДА ЕСТЬNULL(Оклады1.ДатаНачала,СписокНачислений1.ДатаНачала) <= СписокНачислений1.ДатаНачала		ТОГДА СписокНачислений1.ДатаНачала	ИНАЧЕ Оклады1.ДатаНачала		КОНЕЦ,
	|		ВЫБОР КОГДА ЕСТЬNULL(Оклады1.ДатаОкончания,СписокНачислений1.ДатаОкончания) < СписокНачислений1.ДатаОкончания	ТОГДА Оклады1.ДатаОкончания	ИНАЧЕ СписокНачислений1.ДатаОкончания	КОНЕЦ,
	|		СписокНачислений1.ВидРасчета,
	|
	|		СписокНачислений1.НомерЗапроса,
	|		СписокНачислений1.ОсновноеНачисление,
	|		СписокНачислений1.ПодразделениеОрганизации,
	|		СписокНачислений1.ГрафикРаботы,
	|		СписокНачислений1.Должность,
	|
	|		СписокНачислений1.ДокументОснование,
	|		СписокНачислений1.Показатель1,
	|		СписокНачислений1.Показатель2,
	|		СписокНачислений1.Показатель3,
	|		СписокНачислений1.Показатель4,
	|		СписокНачислений1.Показатель5,
	|		СписокНачислений1.Показатель6,
	|		СписокНачислений1.ВидУчетаВремениДляСредней
	|";
	Запрос.Текст = ТекстЗапросаВТ;
	Запрос.Выполнить();
	ТекстЗапросаВТВсеНачисления = "ВТВсеНачисления";
	
	Запрос.Текст = "ВЫБРАТЬ * ИЗ ВТВсеНачисления";
		
	//	ВТЗначенияПоказателей
	Если Истина Тогда 
		//	Описание:
		// 		Все оклады сотрудников
		//		Для п.1.
		ТекстЗапроса = "
		|ВЫБРАТЬ
		|	ЗначенияПоказателей.Сотрудник,
		|	ЗначенияПоказателей.Подразделение,
		|	ЗначенияПоказателей.Показатель,
		|	НАЧАЛОПЕРИОДА(ЗначенияПоказателей.ПериодДействия, МЕСЯЦ) КАК ПериодДействия,
		|	ЗначенияПоказателей.Значение КАК Значение
		|ПОМЕСТИТЬ ВТЗначенияПоказателей
		|ИЗ РегистрСведений.ИНАГРО_ЗначенияПоказателейСхемМотивации КАК ЗначенияПоказателей
		|	
		|ГДЕ	ЗначенияПоказателей.Организация = &парамОрганизация
		|	И	НАЧАЛОПЕРИОДА(ЗначенияПоказателей.ПериодДействия, МЕСЯЦ) = &парамНачало
		|	И	(ЗначенияПоказателей.Сотрудник = ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка)
		|	ИЛИ	ЗначенияПоказателей.Сотрудник В (ВЫБРАТЬ Назначение ИЗ ВТСписокРаботникиИЗамены КАК Работники))
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Показатель
		|";
		Запрос.Текст = ТекстЗапроса;
		Запрос.Выполнить();
	КонецЕсли;
	Запрос.Текст = "ВЫБРАТЬ * ИЗ ВТЗначенияПоказателей";
	
	//	ВТПоказатели
	Если Истина Тогда 
		//	Описание:
		// 		
		//		
		ТекстЗапроса = "
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СотрудникиПодразделенияВПоказателях.Сотрудник КАК Сотрудник,
		|	СотрудникиПодразделенияВПоказателях.Подразделение КАК Подразделение,
		|	ПоказателиВидовРасчета.Ссылка КАК ВидРасчета,
		|	ПоказателиВидовРасчета.Показатель1.ТипПоказателя КАК ТипПоказателя1,
		|	ПоказателиВидовРасчета.Показатель2.ТипПоказателя КАК ТипПоказателя2,
		|	ПоказателиВидовРасчета.Показатель3.ТипПоказателя КАК ТипПоказателя3,
		|	ПоказателиВидовРасчета.Показатель4.ТипПоказателя КАК ТипПоказателя4,
		|	ПоказателиВидовРасчета.Показатель5.ТипПоказателя КАК ТипПоказателя5,
		|	ПоказателиВидовРасчета.Показатель6.ТипПоказателя КАК ТипПоказателя6,
		|	ПоказателиВидовРасчета.Показатель1.ВозможностьИзменения КАК ВозможностьИзменения1,
		|	ПоказателиВидовРасчета.Показатель2.ВозможностьИзменения КАК ВозможностьИзменения2,
		|	ПоказателиВидовРасчета.Показатель3.ВозможностьИзменения КАК ВозможностьИзменения3,
		|	ПоказателиВидовРасчета.Показатель4.ВозможностьИзменения КАК ВозможностьИзменения4,
		|	ПоказателиВидовРасчета.Показатель5.ВозможностьИзменения КАК ВозможностьИзменения5,
		|	ПоказателиВидовРасчета.Показатель6.ВозможностьИзменения КАК ВозможностьИзменения6,
		|	ЗначенияПоказателей1.Значение КАК Показатель1,
		|	ЗначенияПоказателей2.Значение КАК Показатель2,
		|	ЗначенияПоказателей3.Значение КАК Показатель3,
		|	ЗначенияПоказателей4.Значение КАК Показатель4,
		|	ЗначенияПоказателей5.Значение КАК Показатель5,
		|	ЗначенияПоказателей6.Значение КАК Показатель6
		|ПОМЕСТИТЬ ВТПоказатели
		|ИЗ (ВЫБРАТЬ РАЗЛИЧНЫЕ Подразделение, Сотрудник ИЗ ВТЗначенияПоказателей КАК ЗначенияПоказателей) КАК СотрудникиПодразделенияВПоказателях
		|
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	(ВЫБРАТЬ
		|		Показатели.Ссылка КАК Ссылка,
		|		Показатели1.Показатель КАК Показатель1,
		|		Показатели2.Показатель КАК Показатель2,
		|		Показатели3.Показатель КАК Показатель3,
		|		Показатели4.Показатель КАК Показатель4,
		|		Показатели5.Показатель КАК Показатель5,
		|		Показатели6.Показатель КАК Показатель6
		|	ИЗ ПланВидовРасчета.ИНАГРО_Начисления.Показатели КАК Показатели
		|	
		|	ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.ИНАГРО_Начисления.Показатели КАК Показатели1
		|	ПО Показатели.Ссылка = Показатели1.Ссылка И Показатели1.НомерСтроки = 1
		|	ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.ИНАГРО_Начисления.Показатели КАК Показатели2
		|	ПО Показатели.Ссылка = Показатели2.Ссылка И Показатели2.НомерСтроки = 2
		|	ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.ИНАГРО_Начисления.Показатели КАК Показатели3
		|	ПО Показатели.Ссылка = Показатели3.Ссылка И Показатели3.НомерСтроки = 3
		|	ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.ИНАГРО_Начисления.Показатели КАК Показатели4
		|	ПО Показатели.Ссылка = Показатели4.Ссылка И Показатели4.НомерСтроки = 4
		|	ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.ИНАГРО_Начисления.Показатели КАК Показатели5
		|	ПО Показатели.Ссылка = Показатели5.Ссылка И Показатели5.НомерСтроки = 5
		|	ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.ИНАГРО_Начисления.Показатели КАК Показатели6
		|	ПО Показатели.Ссылка = Показатели6.Ссылка И Показатели6.НомерСтроки = 6
		|	
		|) КАК ПоказателиВидовРасчета
		|ПО ИСТИНА
		|	
		|	
		|ЛЕВОЕ СОЕДИНЕНИЕ ВТЗначенияПоказателей КАК ЗначенияПоказателей1
		|ПО 	ПоказателиВидовРасчета.Показатель1 = ЗначенияПоказателей1.Показатель
		|	И	СотрудникиПодразделенияВПоказателях.Сотрудник = ЗначенияПоказателей1.Сотрудник
		|	И	СотрудникиПодразделенияВПоказателях.Подразделение = ЗначенияПоказателей1.Подразделение
		|ЛЕВОЕ СОЕДИНЕНИЕ ВТЗначенияПоказателей КАК ЗначенияПоказателей2
		|ПО		ПоказателиВидовРасчета.Показатель2 = ЗначенияПоказателей2.Показатель
		|	И	СотрудникиПодразделенияВПоказателях.Сотрудник = ЗначенияПоказателей2.Сотрудник
		|	И	СотрудникиПодразделенияВПоказателях.Подразделение = ЗначенияПоказателей2.Подразделение
		|ЛЕВОЕ СОЕДИНЕНИЕ ВТЗначенияПоказателей КАК ЗначенияПоказателей3
		|ПО		ПоказателиВидовРасчета.Показатель3 = ЗначенияПоказателей3.Показатель
		|	И	СотрудникиПодразделенияВПоказателях.Сотрудник = ЗначенияПоказателей3.Сотрудник
		|	И	СотрудникиПодразделенияВПоказателях.Подразделение = ЗначенияПоказателей3.Подразделение
		|ЛЕВОЕ СОЕДИНЕНИЕ ВТЗначенияПоказателей КАК ЗначенияПоказателей4
		|ПО		ПоказателиВидовРасчета.Показатель4 = ЗначенияПоказателей4.Показатель
		|	И	СотрудникиПодразделенияВПоказателях.Сотрудник = ЗначенияПоказателей4.Сотрудник
		|	И	СотрудникиПодразделенияВПоказателях.Подразделение = ЗначенияПоказателей4.Подразделение
		|ЛЕВОЕ СОЕДИНЕНИЕ ВТЗначенияПоказателей КАК ЗначенияПоказателей5
		|ПО		ПоказателиВидовРасчета.Показатель5 = ЗначенияПоказателей5.Показатель
		|	И	СотрудникиПодразделенияВПоказателях.Сотрудник = ЗначенияПоказателей5.Сотрудник
		|	И	СотрудникиПодразделенияВПоказателях.Подразделение = ЗначенияПоказателей5.Подразделение
		|ЛЕВОЕ СОЕДИНЕНИЕ ВТЗначенияПоказателей КАК ЗначенияПоказателей6
		|ПО		ПоказателиВидовРасчета.Показатель6 = ЗначенияПоказателей6.Показатель
		|	И	СотрудникиПодразделенияВПоказателях.Сотрудник = ЗначенияПоказателей6.Сотрудник
		|	И	СотрудникиПодразделенияВПоказателях.Подразделение = ЗначенияПоказателей6.Подразделение
		|
		|ГДЕ	ЗначенияПоказателей1.Значение ЕСТЬ НЕ NULL
		|	ИЛИ	ЗначенияПоказателей2.Значение ЕСТЬ НЕ NULL
		|	ИЛИ	ЗначенияПоказателей3.Значение ЕСТЬ НЕ NULL
		|	ИЛИ	ЗначенияПоказателей4.Значение ЕСТЬ НЕ NULL
		|	ИЛИ	ЗначенияПоказателей5.Значение ЕСТЬ НЕ NULL
		|	ИЛИ	ЗначенияПоказателей6.Значение ЕСТЬ НЕ NULL
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ВидРасчета
		|";
		Запрос.Текст = ТекстЗапроса;
		Запрос.Выполнить();
	КонецЕсли;
	Запрос.Текст = "ВЫБРАТЬ * ИЗ ВТПоказатели";

	// Основной текст запроса
	ОсновнойТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|   ИСТИНА КАК Авторасчет,
	|	СписокНачислений.Сотрудник		КАК Сотрудник,
	|	СписокНачислений.Назначение		КАК Назначение,
	|	СписокНачислений.ДатаНачала			КАК ДатаНачала,
	|	СписокНачислений.ДатаОкончания		КАК ДатаОкончания,
	|	СписокНачислений.ДатаНачала			КАК БазовыйПериодНачало,
	|	СписокНачислений.ДатаОкончания		КАК БазовыйПериодКонец,
	|	СписокНачислений.ОсновноеНачисление КАК ОсновноеНачисление,
	|	СписокНачислений.ВидРасчета КАК ВидРасчета,
	|	СписокНачислений.ВидРасчета.Наименование КАК ВидРасчетаНаименование,
	|	СписокНачислений.ДокументОснование	КАК ДокументОснование,
	|
	|	";
	ТекстПоказатель1 = "
	|			ВЫБОР
	|				КОГДА ПоказателиСхемМотивацийПоСотруднику.Показатель1 ЕСТЬ НЕ NULL 
	|					ТОГДА ПоказателиСхемМотивацийПоСотруднику.Показатель1
	|				КОГДА ПоказателиСхемМотивацийПоПодразделению.Показатель1 ЕСТЬ НЕ NULL 
	|					ТОГДА ПоказателиСхемМотивацийПоПодразделению.Показатель1
	|				КОГДА ПоказателиСхемМотивацийПоОрганизации.Показатель1 ЕСТЬ НЕ NULL 
	|					ТОГДА ПоказателиСхемМотивацийПоОрганизации.Показатель1
	|				КОГДА ТипПоказатель1.Показатель = ЗНАЧЕНИЕ(Справочник.ИНАГРО_ПоказателиСхемМотивации.ОкладТарифНазначения)
	|					// СПЕЦИАЛЬНЫЕ
	|                   // для оклада валюта учтена при его получении
	|					ТОГДА	ВЫБОР	КОГДА Оклады.СпособУчетаВремени = ""ЗА МЕСЯЦ"" И ДанныеКалендаря.НормаЧасовЗаМесяц > 0
	|										ТОГДА Оклады.ОкладТариф/ДанныеКалендаря.НормаЧасовЗаМесяц
	|									КОГДА Оклады.СпособУчетаВремени = ""ЗА ДЕНЬ""
	|										ТОГДА Оклады.ОкладТариф/8
	|									ИНАЧЕ Оклады.ОкладТариф
	|							КОНЕЦ
	|				КОГДА ТипПоказатель1.Показатель = ЗНАЧЕНИЕ(Справочник.ИНАГРО_ПоказателиСхемМотивации.ОкладТариф)   
	|                   // для оклада валюта учтена при его получении
	|					ТОГДА	Оклады.ОкладТариф                                                               
	|				ИНАЧЕ ЕСТЬNULL(СписокНачислений.Показатель1, 0)
	|			КОНЕЦ
	|	";
	ТекстПоказатель2 = СтрЗаменить(ТекстПоказатель1, "1", "2");
	ТекстПоказатель3 = СтрЗаменить(ТекстПоказатель1, "1", "3");
	ТекстПоказатель4 = СтрЗаменить(ТекстПоказатель1, "1", "4");
	ТекстПоказатель5 = СтрЗаменить(ТекстПоказатель1, "1", "5");
	ТекстПоказатель6 = СтрЗаменить(ТекстПоказатель1, "1", "6");
	
	// Некоторые способы расчета имеют "виртуальный" показатель 1 "часовой тариф"
	ТекстПоказатель1 = СтрЗаменить(ТекстПоказатель1, "// СПЕЦИАЛЬНЫЕ", 
	"ИЛИ СписокНачислений.ВидРасчета.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаНачислений.ДоплатаЗаНочныеЧасы) 
	|ИЛИ СписокНачислений.ВидРасчета.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаНачислений.ДоплатаЗаВечерниеЧасы)");

	
	ОсновнойТекстЗапроса =  ОсновнойТекстЗапроса + "
	|	" + ТекстПоказатель1 + " КАК Показатель1,
	|	" + ТекстПоказатель2 + " КАК Показатель2,
	|	" + ТекстПоказатель3 + " КАК Показатель3,
	|	" + ТекстПоказатель4 + " КАК Показатель4,
	|	" + ТекстПоказатель5 + " КАК Показатель5,
	|	" + ТекстПоказатель6 + " КАК Показатель6,
	|	СписокНачислений.ВидУчетаВремениДляСредней,
	|	СписокНачислений.ГрафикРаботы		КАК ГрафикРаботы,
	|	ДанныеКалендаря.НормаДнейЗаМесяц	КАК НормаДнейЗаМесяц,
	|	ДанныеКалендаря.НормаЧасовЗаМесяц	КАК НормаЧасовЗаМесяц,
	|	ЕСТЬNULL(СписокНачислений.ГрафикРаботы.СуммированныйУчетРабочегоВремени, ЛОЖЬ) КАК СуммированныйУчетРабочегоВремени,
	|	СписокНачислений.ПодразделениеОрганизации,
	|	СписокНачислений.Должность,
	|	ВЫБОР
	|		КОГДА ОсновныеНачисления.Сотрудник ЕСТЬ NULL 
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК УжеПроведен,
	|	СписокНачислений.Сотрудник.Наименование КАК СотрудникНаименование
	|ИЗ " + ТекстЗапросаВТВсеНачисления + " КАК СписокНачислений
	|
	|//-----------------------
	|// Выборка сведений о уже выполненных начислениях за отработанное время 
	|ЛЕВОЕ СОЕДИНЕНИЕ (
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		ОсновныеНачисления.Сотрудник				КАК Сотрудник,
	|		ОсновныеНачисления.Назначение				КАК Назначение,
	|		ОсновныеНачисления.ПодразделениеОрганизации	КАК ПодразделениеОрганизации
	|	ИЗ РегистрРасчета.ИНАГРО_Начисления КАК ОсновныеНачисления
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ " + ТекстЗапросаВТСписокРаботникиИЗамены + " КАК ТаблицаДвиженийРаботников
	|	ПО ОсновныеНачисления.Назначение = ТаблицаДвиженийРаботников.Назначение
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|	Документ.ИНАГРО_Сторнирование КАК Сторнирование
	|	ПО Сторнирование.СторнируемыйДокумент = ОсновныеНачисления.Регистратор
	|	ГДЕ		ОсновныеНачисления.ПериодРегистрации = &парамПериодРегистрации
	|		И	ОсновныеНачисления.ПериодДействияКонец <= &парамКонец
	|		И	ОсновныеНачисления.ПериодДействияНачало >= &парамНачало
	|		И	ОсновныеНачисления.Организация = &парамОрганизация
	|		И	ОсновныеНачисления.ВидРасчета.ЗачетОтработанногоВремени
	|		И	ОсновныеНачисления.ВидРасчета.ЗачетНормыВремени
	|		И	НЕ ОсновныеНачисления.Сторно
	|		И	ОсновныеНачисления.Регистратор <> &парамРегистратор
	|		И	ОсновныеНачисления.Регистратор ССЫЛКА Документ.ИНАГРО_НачислениеЗарплатыРаботникамОрганизаций		
	|		И	ОсновныеНачисления.Организация = &парамОрганизация
 	|		И	Сторнирование.Ссылка ЕСТЬ NULL
	|) КАК ОсновныеНачисления
	|ПО		ОсновныеНачисления.Сотрудник = СписокНачислений.Сотрудник
	|	И	ОсновныеНачисления.ПодразделениеОрганизации = СписокНачислений.ПодразделениеОрганизации		
	|       
	|
	|//-----------------------
	|// данные нормы календаря
	|ЛЕВОЕ СОЕДИНЕНИЕ (
	|	ВЫБРАТЬ
	|		ГрафикиРаботы.ГрафикРаботы                 КАК ГрафикРаботы,
	|		СУММА( ГрафикиРаботы.ОсновноеЗначение  )      КАК НормаДнейЗаМесяц,
	|		СУММА( ГрафикиРаботы.ДополнительноеЗначение ) КАК НормаЧасовЗаМесяц
	|	ИЗ	РегистрСведений.ИНАГРО_ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботы
	|	ГДЕ		НАЧАЛОПЕРИОДА( ГрафикиРаботы.Дата, МЕСЯЦ ) = &парамНачало 
	|		И	ГрафикиРаботы.ВидУчетаВремени = &парамПоДням 
	|	СГРУППИРОВАТЬ ПО
	|			ГрафикиРаботы.ГрафикРаботы
	|) КАК ДанныеКалендаря
	|ПО		ВЫБОР	КОГДА НЕ СписокНачислений.ГрафикРаботы.УчетНормыВремениПоОтдельномуГрафику	
	|		     			ТОГДА ДанныеКалендаря.ГрафикРаботы = СписокНачислений.ГрафикРаботы 
	|					ИНАЧЕ ДанныеКалендаря.ГрафикРаботы = СписокНачислений.ГрафикРаботы.ГрафикРаботыНормыВремени
	|		КОНЕЦ 
	|	//И	СписокНачислений.ОсновноеНачисление
	|
	|//-----------------------
	|// данные о видах показателей
	|ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.ИНАГРО_Начисления.Показатели КАК ТипПоказатель1
	|ПО		ТипПоказатель1.Ссылка = СписокНачислений.ВидРасчета И ТипПоказатель1.НомерСтроки = 1
	|ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.ИНАГРО_Начисления.Показатели КАК ТипПоказатель2
	|ПО		ТипПоказатель2.Ссылка = СписокНачислений.ВидРасчета И ТипПоказатель2.НомерСтроки = 2
	|ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.ИНАГРО_Начисления.Показатели КАК ТипПоказатель3
	|ПО		ТипПоказатель3.Ссылка = СписокНачислений.ВидРасчета И ТипПоказатель3.НомерСтроки = 3
	|ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.ИНАГРО_Начисления.Показатели КАК ТипПоказатель4
	|ПО		ТипПоказатель4.Ссылка = СписокНачислений.ВидРасчета И ТипПоказатель4.НомерСтроки = 4
	|ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.ИНАГРО_Начисления.Показатели КАК ТипПоказатель5
	|ПО		ТипПоказатель5.Ссылка = СписокНачислений.ВидРасчета И ТипПоказатель5.НомерСтроки = 5
	|ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.ИНАГРО_Начисления.Показатели КАК ТипПоказатель6
	|ПО		ТипПоказатель6.Ссылка = СписокНачислений.ВидРасчета И ТипПоказатель6.НомерСтроки = 6
	|
	|//-----------------------
	|// данные об окладах
	|ЛЕВОЕ СОЕДИНЕНИЕ ВТОкладТариф КАК Оклады
	|ПО		СписокНачислений.Назначение = Оклады.Назначение
	| 	И  Оклады.ДатаНачала = СписокНачислений.ДатаНачалаОклада
	| 	И  Оклады.ВидРасчета = СписокНачислений.ВидРасчета
	|//-----------------------
	|// данные показателей Схем Мотиваций
	|// по конкретным сотрудникам
	|ЛЕВОЕ СОЕДИНЕНИЕ ВТПоказатели КАК ПоказателиСхемМотивацийПоСотруднику
	|ПО		СписокНачислений.ВидРасчета = ПоказателиСхемМотивацийПоСотруднику.ВидРасчета
	|	И	СписокНачислений.Назначение = ПоказателиСхемМотивацийПоСотруднику.Сотрудник
	|
	|// по подразделению
	|ЛЕВОЕ СОЕДИНЕНИЕ ВТПоказатели КАК ПоказателиСхемМотивацийПоПодразделению
	|ПО		СписокНачислений.ВидРасчета = ПоказателиСхемМотивацийПоПодразделению.ВидРасчета
	|	И	СписокНачислений.ПодразделениеОрганизации = ПоказателиСхемМотивацийПоПодразделению.Подразделение
	|
	|// организации
	|ЛЕВОЕ СОЕДИНЕНИЕ ВТПоказатели КАК ПоказателиСхемМотивацийПоОрганизации
	|ПО		СписокНачислений.ВидРасчета = ПоказателиСхемМотивацийПоОрганизации.ВидРасчета
	|	И	ПоказателиСхемМотивацийПоОрганизации.Сотрудник = ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка)
	|	И	ПоказателиСхемМотивацийПоОрганизации.Подразделение = ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка) 
	|ГДЕ
	|   СписокНачислений.ВидРасчета В (&парамБазаИндексации)
	|   ИЛИ СписокНачислений.ВидРасчета.СпособРасчета = &парамСРИндексация
	|УПОРЯДОЧИТЬ ПО
	|	СотрудникНаименование,
	|	СписокНачислений.Сотрудник,
	|	// основные начисления должны быть вверху, а внутреннее совместительство и замены внизу
	|	ВЫБОР КОГДА СписокНачислений.Сотрудник = СписокНачислений.Назначение ТОГДА ЛОЖЬ ИНАЧЕ ИСТИНА КОНЕЦ, 
	|	СписокНачислений.Назначение,
	|	СписокНачислений.ОсновноеНачисление Убыв, // основное начисление должно встретиться в выборке первым
	|	СписокНачислений.ДатаНачала,
	|	СписокНачислений.ВидРасчета
	|";
	
	Запрос.Текст = ОсновнойТекстЗапроса;
	
	ВыборкаНачисления = Запрос.Выполнить().Выбрать();
	Пока ВыборкаНачисления.Следующий() Цикл
		
		Если  ВыборкаНачисления.УжеПроведен Тогда
			
			// Пропускаем такие записи: они уже введены другими документами или соответствуют окончанию назначения работника
			// необходимо сообщить пользователю что работник уже посчитан. 
			Продолжить;
			
		КонецЕсли;
		
		НоваяСтрока	= Начисления.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаНачисления);
		Если НоваяСтрока.ВидРасчета.ВидПремии = Перечисления.ИНАГРО_ВидыПремии.ГодоваяПремия
			ИЛИ НоваяСтрока.ВидРасчета.ВидПремии = Перечисления.ИНАГРО_ВидыПремии.Премия
			ИЛИ НоваяСтрока.ВидРасчета.ВидПремии = Перечисления.ИНАГРО_ВидыПремии.ПремияПропорционально Тогда
			НоваяСтрока.БазовыйПериодКонец = КонецМесяца(ДобавитьМесяц(НачалоМесяца(НоваяСтрока.БазовыйПериодНачало),-Мин(НоваяСтрока.ВидРасчета.ЧислоМесяцев, 1)));
			НоваяСтрока.БазовыйПериодНачало = ДобавитьМесяц(НачалоМесяца(НоваяСтрока.БазовыйПериодНачало),-НоваяСтрока.ВидРасчета.ЧислоМесяцев);
		КонецЕсли;		

	КонецЦикла;

КонецПроцедуры	

Процедура РассчитатьДанные() Экспорт
	
	Если Проведен Тогда
		ЭтотОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения)
	КонецЕсли;
	
	Рассчитать(НачисленияДо,"НачисленияДо");
	Рассчитать(НачисленияПосле,"НачисленияПосле");
	РассчитатьИндексацию();

КонецПроцедуры

Функция Рассчитать(ТЧ, ИмяТЧ) Экспорт
	
	МассивИндексыСтрокНачисления = Новый Массив();
	
	Отказ = Ложь;
	// Перечитаем объект и соберем данные для заполнения наборов записей регистров
	НачатьТранзакцию();
	Прочитать();
	ВыборкаПоШапкеДокумента = СформироватьЗапросПоШапке("ПоРеквизитамДокумента").Выбрать();
	
	// позиционируем выборку
	ВыборкаПоШапкеДокумента.Следующий();
	
	Сотрудники = РаботникиОрганизации.ВыгрузитьКолонку("Сотрудник");
	
	ВыборкаПоНачислениям = СформироватьЗапросПоНачислениямДоПосле(ИмяТЧ,Сотрудники).Выбрать();
	ЗафиксироватьТранзакцию();
	
	// Создадим рабочие наборы записей
	НаборНачисления = РегистрыРасчета.ИНАГРО_Начисления.СоздатьНаборЗаписей();
	НаборНачисления.Отбор.Регистратор.Значение = Ссылка;
	
	Пока ВыборкаПоНачислениям.Следующий() Цикл

		Если НЕ Отказ Тогда
			// Заполним записи в наборах записей регистров
			ДобавитьСтрокуОсновныхНачислений(ВыборкаПоНачислениям, НаборНачисления, Истина);
			МассивИндексыСтрокНачисления.Добавить(ВыборкаПоНачислениям.НомерСтроки-1);
			
		КонецЕсли;
		
	КонецЦикла;
	НаборНачисления.Записать();
	
	Если Отказ Тогда
		
		// Если есть какие-то проблемы - удаляем движения (тут нет транзакции) 
		// Удаляем движения.
		НаборНачисления.Очистить();
		НаборНачисления.Записать();
		
		Возврат Не Отказ;
		
	КонецЕсли;
	
	
	
	// Рассчитываем записи
	// при этом передаем не только набор записей регистра расчета, но и набор записей регистра 
	// накопления со сведениями об отработанном времени.
	ИНАГРО_ПроведениеРасчетов.РассчитатьЗаписиРегистраРасчета("ИНАГРО_Начисления", 
														НаборНачисления, 
														ТЧ, 
														МассивИндексыСтрокНачисления, 
														Сотрудники, 
														Ложь);
	
	// Удаляем движения
	НаборНачисления.Очистить();
	НаборНачисления.Записать();
	
	Записать();
	
	Возврат Не Отказ;

КонецФункции // Рассчитать()	

// Выполняет расчет.
//
Функция РассчитатьИндексацию() Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументСсылка", ЭтотОбъект.Ссылка);
	Запрос.УстановитьПараметр("СРИндексация" , Перечисления.СпособыРасчетаНачислений.ИндексацияЗарплаты);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КадровоеПеремещениеОрганизацийНачисленияДо.Сотрудник КАК Сотрудник,
	|	СУММА(КадровоеПеремещениеОрганизацийНачисленияДо.Результат) КАК Результат
	|ПОМЕСТИТЬ ВТДоходыДо
	|ИЗ
	|	Документ.ИНАГРО_КадровоеПеремещениеОрганизаций.НачисленияДо КАК КадровоеПеремещениеОрганизацийНачисленияДо
	|ГДЕ
	|	КадровоеПеремещениеОрганизацийНачисленияДо.Ссылка = &ДокументСсылка
	|
	|СГРУППИРОВАТЬ ПО
	|	КадровоеПеремещениеОрганизацийНачисленияДо.Сотрудник
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КадровоеПеремещениеОрганизацийНачисленияДо.Сотрудник КАК Сотрудник,
	|	СУММА(КадровоеПеремещениеОрганизацийНачисленияДо.Результат) КАК Результат
	|ПОМЕСТИТЬ ВТДоходыДоБезИндексации
	|ИЗ
	|	Документ.ИНАГРО_КадровоеПеремещениеОрганизаций.НачисленияДо КАК КадровоеПеремещениеОрганизацийНачисленияДо
	|ГДЕ
	|	КадровоеПеремещениеОрганизацийНачисленияДо.Ссылка = &ДокументСсылка
	|	И КадровоеПеремещениеОрганизацийНачисленияДо.ВидРасчета.СпособРасчета <> &СРИндексация
	|
	|СГРУППИРОВАТЬ ПО
	|	КадровоеПеремещениеОрганизацийНачисленияДо.Сотрудник
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КадровоеПеремещениеОрганизацийНачисленияДо.Сотрудник КАК Сотрудник,
	|	СУММА(КадровоеПеремещениеОрганизацийНачисленияДо.ОтработаноЧасов) КАК Результат
	|ПОМЕСТИТЬ ВТФиксированнаяИндексация
	|ИЗ
	|	Документ.ИНАГРО_КадровоеПеремещениеОрганизаций.НачисленияДо КАК КадровоеПеремещениеОрганизацийНачисленияДо
	|ГДЕ
	|	КадровоеПеремещениеОрганизацийНачисленияДо.Ссылка = &ДокументСсылка
	|	И КадровоеПеремещениеОрганизацийНачисленияДо.ВидРасчета.СпособРасчета = &СРИндексация
	|
	|СГРУППИРОВАТЬ ПО
	|	КадровоеПеремещениеОрганизацийНачисленияДо.Сотрудник
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КадровоеПеремещениеОрганизацийНачисленияПосле.Сотрудник КАК Сотрудник,
	|	СУММА(КадровоеПеремещениеОрганизацийНачисленияПосле.Результат) КАК Результат
	|ПОМЕСТИТЬ ВТДоходыПосле
	|ИЗ
	|	Документ.ИНАГРО_КадровоеПеремещениеОрганизаций.НачисленияПосле КАК КадровоеПеремещениеОрганизацийНачисленияПосле
	|ГДЕ
	|	КадровоеПеремещениеОрганизацийНачисленияПосле.Ссылка = &ДокументСсылка
	|
	|СГРУППИРОВАТЬ ПО
	|	КадровоеПеремещениеОрганизацийНачисленияПосле.Сотрудник
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КадровоеПеремещениеОрганизаций.Сотрудник КАК Сотрудник,
	|	КадровоеПеремещениеОрганизаций.ДатаНачала КАК ДатаНачала,
	|	ЕСТЬNULL(ТаблицаФиксированнаяИндексация.Результат, 0) КАК ФиксированнаяИндексацияДо,
	|	ЕСТЬNULL(ДоходыДо.Результат, 0) КАК ДоходДо,
	|	ЕСТЬNULL(ДоходыПосле.Результат, 0) КАК ДоходПосле,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ДоходыПосле.Результат, 0) = 0
	|			ТОГДА 0
	|		КОГДА ЕСТЬNULL(ДоходыПосле.Результат, 0) <= ЕСТЬNULL(ДоходыДоБезИндексации.Результат, 0)
	|			ТОГДА 0
	|		ИНАЧЕ ЕСТЬNULL(ДоходыПосле.Результат, 0) - ЕСТЬNULL(ДоходыДоБезИндексации.Результат, 0)
	|	КОНЕЦ КАК Повышение,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ДоходыПосле.Результат, 0) = 0
	|			ТОГДА 0
	|		КОГДА ЕСТЬNULL(ДоходыПосле.Результат, 0) > ЕСТЬNULL(ДоходыДо.Результат, 0)
	|			ТОГДА 0
	|		КОГДА ЕСТЬNULL(ДоходыДо.Результат, 0) - ЕСТЬNULL(ДоходыПосле.Результат, 0) > ЕСТЬNULL(ТаблицаФиксированнаяИндексация.Результат, 0)
	|			ТОГДА ЕСТЬNULL(ДоходыДо.Результат, 0) - ЕСТЬNULL(ДоходыПосле.Результат, 0)
	|		ИНАЧЕ ЕСТЬNULL(ТаблицаФиксированнаяИндексация.Результат, 0)
	|	КОНЕЦ КАК ФиксированнаяИндексация,
	|	КадровоеПеремещениеОрганизаций.ПодразделениеОрганизации,
	|	КадровоеПеремещениеОрганизаций.Должность,
	|	КадровоеПеремещениеОрганизаций.СпособОтраженияВБухучете,
	|	КадровоеПеремещениеОрганизаций.ЗанимаемыхСтавок,
	|	КадровоеПеремещениеОрганизаций.ГрафикРаботы,
	|	КадровоеПеремещениеОрганизаций.ТабельныйНомер,
	|	КадровоеПеремещениеОрганизаций.ПринятНаНовоеРабочееМесто
	|ИЗ
	|	Документ.ИНАГРО_КадровоеПеремещениеОрганизаций.РаботникиОрганизации КАК КадровоеПеремещениеОрганизаций
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДоходыДо КАК ДоходыДо
	|		ПО КадровоеПеремещениеОрганизаций.Сотрудник = ДоходыДо.Сотрудник
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДоходыДоБезИндексации КАК ДоходыДоБезИндексации
	|		ПО КадровоеПеремещениеОрганизаций.Сотрудник = ДоходыДоБезИндексации.Сотрудник
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТФиксированнаяИндексация КАК ТаблицаФиксированнаяИндексация
	|		ПО КадровоеПеремещениеОрганизаций.Сотрудник = ТаблицаФиксированнаяИндексация.Сотрудник
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДоходыПосле КАК ДоходыПосле
	|		ПО КадровоеПеремещениеОрганизаций.Сотрудник = ДоходыПосле.Сотрудник
	|ГДЕ
	|	КадровоеПеремещениеОрганизаций.Ссылка = &ДокументСсылка";
	
	ТЗРаботникиОрганизации = Запрос.Выполнить().Выгрузить();
	
	Для Каждого Работник Из ТЗРаботникиОрганизации Цикл
		Если Работник.Повышение <=0 И
			Работник.ФиксированнаяИндексация > 0 Тогда
			// Что делать с фиксированной индексацией в этом случае - не известно
			// Будем считать, что она остается прежней (не увеличивается, не закрывается).
			Работник.ФиксированнаяИндексация = Работник.ФиксированнаяИндексацияДо;
		КонецЕсли;
	КонецЦикла;
	
	РаботникиОрганизации.Загрузить(ТЗРаботникиОрганизации);
		
	Записать();
	
КонецФункции

#КонецОбласти

#КонецЕсли














