#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область Печать
	
// Заполняет список команд печати.
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	// ПутевойЛист
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ПутевойЛист";
	КомандаПечати.Представление = НСтр("ru='Путевой лист';uk='Подорожній лист'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечати";
	КомандаПечати.СписокФорм    = "ФормаДокумента,ФормаСписка";
	
	// СправкаРасчетНорм
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "СправкаРасчетНорм";
	КомандаПечати.Представление = НСтр("ru='Справка - расчет норм';uk='Довідка - розрахунок норм'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечати";
	КомандаПечати.СписокФорм    = "ФормаДокумента,ФормаСписка";

	// ПутевойЛистЛегкового
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ПутевойЛистЛегкового";
	КомандаПечати.Представление = НСтр("ru='Путевой лист легкового авто';uk='Подорожній лист легкового авто'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечати";
	КомандаПечати.СписокФорм    = "ФормаДокумента,ФормаСписка";

	// ПутевойЛистРасширенный
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ПутевойЛистРасширенный";
	КомандаПечати.Представление = НСтр("ru='Путевой лист расширенный';uk='Подорожній лист розширений'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечати";
	КомандаПечати.СписокФорм    = "ФормаДокумента,ФормаСписка";
	
	// ЛимитноЗаборнаяКарта
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ЛимитноЗаборнаяКарта";
	КомандаПечати.Представление = НСтр("ru='Лимитно-заборная карта';uk='Лімітно-забірна карта'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечати";
	КомандаПечати.СписокФорм    = "ФормаДокумента,ФормаСписка";
	
	// Реестр документов
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "Реестр";
	КомандаПечати.Представление = НСтр("ru='Реестр документов';uk='Реєстр документів'");
	КомандаПечати.ЗаголовокФормы= НСтр("ru='Реестр документов ""Путевой лист грузового автомобиля""';uk='Реєстр документів ""Подорожний лист вантажного автомобіля""'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечатиРеестраДокументов";
	КомандаПечати.СписокФорм    = "ФормаСписка";
	КомандаПечати.Порядок       = 100;
	
КонецПроцедуры
 
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	// Устанавливаем признак доступности печати покомплектно.
	ПараметрыВывода.ДоступнаПечатьПоКомплектно = Истина;
	
	// Проверяем, нужно ли для макета формировать табличный документ.
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПутевойЛист")  Тогда
		
		// Формируем табличный документ и добавляем его в коллекцию печатных форм.
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "ПутевойЛист", НСтр("ru='Путевой лист';uk='Подорожній лист'"), 
		ПечатьПЛ(МассивОбъектов, ОбъектыПечати, ПараметрыВывода), , "Документ.ИНАГРО_ПутевойЛистГрузовогоАвтомобиля.ПФ_MXL_ПутевойЛист", ,Истина);
		
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "СправкаРасчетНорм")  Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "СправкаРасчетНорм", НСтр("ru='Справка - расчет норм';uk='Довідка - розрахунок норм'"), 
		ПечатьСправкаРасчетНорм(МассивОбъектов, ОбъектыПечати, ПараметрыВывода), , "Документ.ИНАГРО_ПутевойЛистГрузовогоАвтомобиля.ПФ_MXL_СправкаРасчетНорм", ,Истина);
		
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПутевойЛистЛегкового")  Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "ПутевойЛистЛегкового", НСтр("ru='Путевой лист легкового авто';uk='Подорожній лист легкового авто'"), 
		ПечатьПЛЛА(МассивОбъектов, ОбъектыПечати, ПараметрыВывода), , "Документ.ИНАГРО_ПутевойЛистГрузовогоАвтомобиля.ПФ_MXL_ПутевойЛистЛегкового", ,Истина);
		
	КонецЕсли;

	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПутевойЛистРасширенный")  Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "ПутевойЛистРасширенный", НСтр("ru='Путевой лист расширенный';uk='Подорожній лист розширений'"), 
		ПечатьПЛР(МассивОбъектов, ОбъектыПечати, ПараметрыВывода), , "Документ.ИНАГРО_ПутевойЛистГрузовогоАвтомобиля.ПФ_MXL_ПутевойЛистРасширенный", ,Истина);
		
	КонецЕсли;

	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ЛимитноЗаборнаяКарта")  Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "ЛимитноЗаборнаяКарта", НСтр("ru='Лимитно-заборная карта';uk='Лімітно-забірна карта'"), 
		ПечатьЛЗК(МассивОбъектов, ОбъектыПечати, ПараметрыВывода), , "Документ.ИНАГРО_ПутевойЛистГрузовогоАвтомобиля.ПФ_MXL_ЛимитноЗаборнаяКарта", ,Истина);
		
	КонецЕсли;

КонецПроцедуры

// Печать формы ПутевойЛист
Функция ПечатьПЛ(МассивОбъектов, ОбъектыПечати, ПараметрыВывода)
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПутевойЛистГрузовогоАвтомобиля";
	
	Для Каждого Ссылка Из МассивОбъектов Цикл
		
		// Получаем макет 
		Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ИНАГРО_ПутевойЛистГрузовогоАвтомобиля.ПФ_MXL_ПутевойЛист");
		
		// печать производится на языке, указанном в настройках пользователя
		КодЯзыкаПечать = ПараметрыВывода.КодЯзыкаДляМногоязычныхПечатныхФорм;
		Макет.КодЯзыкаМакета = КодЯзыкаПечать;
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ИНАГРО_Док.Номер КАК НомерДок,
		|	ИНАГРО_Док.Дата КАК ДатаДок,
		|	ИНАГРО_Док.Организация.НаименованиеПолное КАК Организация,
		|	ИНАГРО_Док.Водитель,
		|	ИНАГРО_Док.Автомобиль
		|ИЗ
		|	Документ.ИНАГРО_ПутевойЛистГрузовогоАвтомобиля КАК ИНАГРО_Док
		|ГДЕ
		|	ИНАГРО_Док.Ссылка = &ТекущийДокумент";
		
		Запрос.УстановитьПараметр("ТекущийДокумент", Ссылка);
		
		Шапка = Запрос.Выполнить().Выбрать();
		Шапка.Следующий();
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ИНАГРО_ТЧДок.НомерСтроки КАК Ном,
		|	ИНАГРО_ТЧДок.Субконто3 КАК Субконто3,
		|	ИНАГРО_ТЧДок.Субконто1 КАК Субконто1,
		|	ИНАГРО_ТЧДок.ТехнологическаяОперация КАК ТехнологическаяОперация,
		|	ИНАГРО_ТЧДок.Расстояние КАК Расстояние,
		|	ИНАГРО_ТЧДок.Ходок КАК Ходок,
		|	ИНАГРО_ТЧДок.ЗатратыТопливаПоНорме КАК ЗатратыТопливаПоНорме,
		|	ИНАГРО_ТЧДок.ДатаДокумента КАК ДатаДокТ,
		|	ИНАГРО_ТЧДок.ДатаПо КАК ДатаПо,
		|	ИНАГРО_ТЧДок.Время КАК Время,
		|	ИНАГРО_ТЧДок.ПробегСГрузом + ИНАГРО_ТЧДок.ПробегСГрузомЗаГородом КАК ПробегСГрузом,
		|	ИНАГРО_ТЧДок.Тоннаж КАК Тоннаж,
		|	ИНАГРО_ТЧДок.РасстояниеДоп КАК РасстояниеДоп,
		|	ИНАГРО_ТЧДок.ПробегСГрузомДоп КАК ПробегСГрузомДоп,
		|	ИНАГРО_ТЧДок.Тоннаж * ИНАГРО_ТЧДок.ПробегСГрузомДоп КАК ПробегСГрузомДопТ,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(ИНАГРО_ТЧДок.Ходок, 0) = 0
		|			ТОГДА ИНАГРО_ТЧДок.Тоннаж * (ИНАГРО_ТЧДок.ПробегСГрузом + ИНАГРО_ТЧДок.ПробегСГрузомЗаГородом)
		|		ИНАЧЕ ИНАГРО_ТЧДок.Тоннаж * (ИНАГРО_ТЧДок.ПробегСГрузом + ИНАГРО_ТЧДок.ПробегСГрузомЗаГородом) / ИНАГРО_ТЧДок.Ходок
		|	КОНЕЦ КАК ПечТКМ,
		|	ИНАГРО_ТЧДок.ЗатратыТопливаПоФакту КАК РасходТоплива,
		|	ИНАГРО_ТЧДок.Прицеп КАК Прицеп
		|ИЗ
		|	Документ.ИНАГРО_ПутевойЛистГрузовогоАвтомобиля.ПутевыеЛисты КАК ИНАГРО_ТЧДок
		|ГДЕ
		|	ИНАГРО_ТЧДок.Ссылка = &ТекущийДокумент
		|ИТОГИ
		|	СУММА(Расстояние),
		|	СУММА(Ходок),
		|	СУММА(ЗатратыТопливаПоНорме),
		|	СУММА(Время),
		|	СУММА(ПробегСГрузом),
		|	СУММА(Тоннаж),
		|	СУММА(РасстояниеДоп),
		|	СУММА(ПробегСГрузомДоп),
		|	СУММА(ПробегСГрузомДопТ),
		|	СУММА(ПечТКМ),
		|	СУММА(РасходТоплива)
		|ПО
		|	ОБЩИЕ";
		
		Запрос.УстановитьПараметр("ТекущийДокумент", Ссылка);
		
		ВыборкаПЛ = Запрос.Выполнить().Выбрать();
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ТопливоИзрасходованное.Топливо.НаименованиеПолное КАК ТопливоНаименование
		|ИЗ
		|	Документ.ИНАГРО_ПутевойЛистГрузовогоАвтомобиля.ТопливоИзрасходованное КАК ТопливоИзрасходованное
		|ГДЕ
		|	ТопливоИзрасходованное.Ссылка = &ТекущийДокумент";
		
		Запрос.УстановитьПараметр("ТекущийДокумент", Ссылка);
		
		ВыборкаТопливо = Запрос.Выполнить().Выбрать();
		
		ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
		ОбластьМакета.Параметры.Заполнить(Шапка);
		ОбластьМакета.Параметры.НомерДок = Шапка.НомерДок;
		ОбластьМакета.Параметры.ДатаДок = Формат(Ссылка.Дата,"ДФ=dd.MM.yyyy");
		
		СтрАвт = РегистрыСведений.ИНАГРО_ТранспортныеСредства.ПолучитьПоследнее(Шапка.ДатаДок, Новый Структура("ОсновноеСредство", Шапка.Автомобиль));
		ОбластьМакета.Параметры.Заполнить(СтрАвт);
		ОбластьМакета.Параметры.Водитель = Ссылка.Водитель;
		
		ОбластьМакета.Параметры.Топливо = "";
		Если ВыборкаТопливо.Количество() > 0 Тогда
			Пока ВыборкаТопливо.Следующий() Цикл
				ОбластьМакета.Параметры.Топливо = ОбластьМакета.Параметры.Топливо + ВыборкаТопливо.ТопливоНаименование + ", ";		
			КонецЦикла;
			ОбластьМакета.Параметры.Топливо = Лев(ОбластьМакета.Параметры.Топливо, СтрДлина(ОбластьМакета.Параметры.Топливо) - 2);
		КонецЕсли;
		ТабДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Строка");
		СтрНорм = ИНАГРО_Транспорт.ИНАГРО_НормыРасходаТоплива(Шапка.ДатаДок, Шапка.Автомобиль);
		
		ВыборкаПЛ.Следующий();
		ОблДно = Макет.ПолучитьОбласть("Дно");
		ОблДно.Параметры.Заполнить(ВыборкаПЛ);
		ОблДно.Параметры.ЗатратыТопливаПоНорме = Ссылка.ЗатратыТопливаПоНорме;
		ОблДно.Параметры.ЗатратыТоплива = ВыборкаПЛ.РасходТоплива;   
		
		Пока ВыборкаПЛ.Следующий() Цикл
			
			ОбластьМакета.Параметры.Заполнить(ВыборкаПЛ);
			ОбластьМакета.Параметры.Заполнить(СтрНорм);
			//Если Ссылка.ИспользоватьЗимниеНормыРасходаТоплива Тогда
			//	ОбластьМакета.Параметры.НормаРасходаТоплива = СтрНорм.НормаРасходаТопливаЗимой;
			//	ОбластьМакета.Параметры.НормаСПрицепом = СтрНорм.НормаСПрицепомЗимой;
			//Иначе
			//	ОбластьМакета.Параметры.НормаРасходаТоплива = СтрНорм.НормаРасходаТоплива;
			//	ОбластьМакета.Параметры.НормаСПрицепом = СтрНорм.НормаСПрицепом;
			//КонецЕсли;
	///////////////
	НормаРасходаТоплива			 = 0;
	НормаРасходаТопливаСПрицепом = 0;
	Если Ссылка.ИспользоватьЗимниеНормыРасходаТоплива Тогда
		НормаРасходаТоплива = СтрНорм.НормаРасходаТопливаЗимой;
		НормаРасходаТопливаСПрицепом = СтрНорм.НормаСПрицепомЗимой;
	Иначе
		НормаРасходаТоплива = СтрНорм.НормаРасходаТоплива;
		НормаРасходаТопливаСПрицепом = СтрНорм.НормаСПрицепом;
	КонецЕсли;
	СведенияОТехОперации = ИНАГРО_Транспорт.ИНАГРО_ПолучитьСтруктуруРасценок(Ссылка.Дата,
																			Ссылка.Автомобиль.Модель,
																			ВыборкаПЛ.ТехнологическаяОперация,
																			ВыборкаПЛ.Прицеп,
																			Ссылка.Организация);
	Если СведенияОТехОперации.Свойство("ТехнологическаяОперация") И СведенияОТехОперации.УказатьНормыРасходаНаВидРабот Тогда		
		Если Ссылка.ИспользоватьЗимниеНормыРасходаТоплива Тогда
			НормаРасходаТоплива = СведенияОТехОперации.НормаРасходаТопливаЗимой;
			НормаРасходаТопливаСПрицепом = СведенияОТехОперации.НормаРасходаТопливаЗимой;
		Иначе
			НормаРасходаТоплива = СведенияОТехОперации.НормаРасходаТоплива;
			НормаРасходаТопливаСПрицепом = СведенияОТехОперации.НормаРасходаТоплива;
		КонецЕсли;			
	КонецЕсли;    		
	ОбластьМакета.Параметры.НормаРасходаТоплива = НормаРасходаТоплива;
	ОбластьМакета.Параметры.НормаСПрицепом = НормаРасходаТопливаСПрицепом;

	//////////////
			Если Ссылка.СводныйПутевойЛист = Истина Тогда
				ОбластьМакета.Параметры.ДатаДок = НСтр("ru=' с ';uk=' з '",КодЯзыкаПечать) + Формат(ВыборкаПЛ.ДатаДокТ,"ДФ=dd.MM.yyyy") + НСтр("ru=' по ';uk=' по '",КодЯзыкаПечать) + Формат(ВыборкаПЛ.ДатаПо,"ДФ=dd.MM.yyyy");
			Иначе
				ОбластьМакета.Параметры.ДатаДок = Формат(Ссылка.Дата,"ДФ=dd.MM.yyyy");
			КонецЕсли;
			ТабДокумент.Вывести(ОбластьМакета);
			
		КонецЦикла;
		
		ОблДно.Параметры.Заполнить(Шапка);
		ОблДно.Параметры.СуммаЗП = Формат(Ссылка.ПутевыеЛисты.Итог("СуммаЗП"), "ЧДЦ=2");
		
		РуководителиОрганизации = ОтветственныеЛицаБП.ОтветственныеЛица(Ссылка.Организация, Ссылка.Дата);
		ОблДно.Параметры.Директор = РуководителиОрганизации.Руководитель;
		ОблДно.Параметры.ГлБух = РуководителиОрганизации.ГлавныйБухгалтер;
		
		ТабДокумент.Вывести(ОблДно);
		
	КонецЦикла;	
		
	Возврат ТабДокумент;
		
КонецФункции

Функция ПечатьСправкаРасчетНорм(МассивОбъектов, ОбъектыПечати, ПараметрыВывода)

	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_СправкаРасчетНорм";
	
	Для Каждого Ссылка Из МассивОбъектов Цикл
		
		// Получаем макет 
		Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ИНАГРО_ПутевойЛистГрузовогоАвтомобиля.ПФ_MXL_СправкаРасчетНорм");
		
		// Печать производится на языке, указанном в настройках пользователя
		КодЯзыкаПечать = ПараметрыВывода.КодЯзыкаДляМногоязычныхПечатныхФорм;
		Макет.КодЯзыкаМакета = КодЯзыкаПечать;
		
		ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
		ОбластьМакета.Параметры.НомерДок = Ссылка.Номер;
		ОбластьМакета.Параметры.ДатаДок = Формат(Ссылка.Дата,"ДФ=dd.MM.yyyy");
		
		ТабДокумент.Вывести(ОбластьМакета);
		
		НормаПоДокументу = 0;
		
		ПутевыеЛисты = Ссылка.ПутевыеЛисты;
		
		Для Каждого СтрокаТЧ Из ПутевыеЛисты Цикл
			
			ОбластьМакета = Макет.ПолучитьОбласть("Операция");
			ОбластьМакета.Параметры.Номер = СтрокаТЧ.НомерСтроки;
			ОбластьМакета.Параметры.ТехнологическаяОперация = СтрокаТЧ.ТехнологическаяОперация;
			ТабДокумент.Вывести(ОбластьМакета);
			
			ОбластьМакета = Макет.ПолучитьОбласть("Расчет");
			
			СвойстваТС = РегистрыСведений.ИНАГРО_ТранспортныеСредства.ПолучитьПоследнее(Ссылка.Дата, Новый Структура("ОсновноеСредство", Ссылка.Автомобиль));
			
			// Сведенья о нормах
			Если Ссылка.ИспользоватьЗимниеНормыРасходаТоплива Тогда
				НормаРасходаТоплива = СвойстваТС.НормаРасходаТопливаЗимой;
				ОбластьМакета.Параметры.Содержание = НСтр("ru = 'Зимняя норма расхода топлива (ТС)'; uk = 'Зимова норма витрати палива (ТЗ)'",КодЯзыкаПечать); 
				ОбластьМакета.Параметры.ФормулаПараметра = НСтр("ru = 'ТС.НормаРасходаТопливаЗимой'; uk = 'ТЗ.НормаВитратПаливаВзимку'",КодЯзыкаПечать);
			Иначе
				НормаРасходаТоплива = СвойстваТС.НормаРасходаТоплива;
				ОбластьМакета.Параметры.Содержание = НСтр("ru = 'Норма расхода топлива (ТС)'; uk = 'Норма витрати палива (ТЗ)'",КодЯзыкаПечать);
				ОбластьМакета.Параметры.ФормулаПараметра = НСтр("ru = 'ТС.НормаРасходаТоплива'; uk = 'ТЗ.НормаВитратПалива'",КодЯзыкаПечать);
			КонецЕсли;
			
			КоэффРасхода = СвойстваТС.КоэффРасхода;
			
			// Посчитаем сумму надбавок суммами
			СуммаНадбавок = СуммаНадбавокСуммой(Ссылка);                  
			НадбавкаПоСтроке = Окр(СуммаНадбавок / ПутевыеЛисты.Количество(), 3);
			НадбавкиКонтроль = 0;
			ОбщийПроцентНадбавки = СуммаНадбавокПроцентом(Ссылка);
			
			СведениеОТехОперации = ИНАГРО_Транспорт.ИНАГРО_ПолучитьСтруктуруРасценок(Ссылка.Дата, Ссылка.Автомобиль.Модель, СтрокаТЧ.ТехнологическаяОперация, СтрокаТЧ.Прицеп, Ссылка.Организация);
			
			Если СведениеОТехОперации = Неопределено ИЛИ СведениеОТехОперации.Количество() = 0 Тогда
				
				ТекстСообщения = НСтр("ru = 'Нет данных в регистре сведений ""Виды работ автотранспорта"" по модели автомобиля '; uk = 'Немає даних в регістрі відомостей ""Види робіт автотранспорту"" по моделі автомобіля '", КодЯзыкаПечать) + Ссылка.Автомобиль.Модель + НСтр("ru = ' и технологической операции '; uk = 'та технологічній операції '", КодЯзыкаПечать) + СтрокаТЧ.ТехнологическаяОперация;
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
				Продолжить
			КонецЕсли;
			
			Норма = 0;
			НормаРасходаТопливаСтроки = 0;
			
			// Определим норму расхода топлива для строки
			Если СведениеОТехОперации.УказатьНормыРасходаНаВидРабот Тогда
				     
				Если Ссылка.ИспользоватьЗимниеНормыРасходаТоплива Тогда
					НормаРасходаТопливаСтроки = СведениеОТехОперации.НормаРасходаТопливаЗимой;
					ОбластьМакета.Параметры.Содержание = НСтр("ru = 'Зимняя норма расхода топлива (ТО)'; uk = 'Зимова норма витрати палива (ТО)'",КодЯзыкаПечать);
					ОбластьМакета.Параметры.ФормулаПараметра = НСтр("ru = 'ТО.НормаРасходаТопливаЗимой'; uk = 'ТО.НормаВитратПаливаВзимку'",КодЯзыкаПечать);
				Иначе
					НормаРасходаТопливаСтроки = СведениеОТехОперации.НормаРасходаТоплива;
					ОбластьМакета.Параметры.Содержание = НСтр("ru = 'Норма расхода топлива (ТО)'; uk = 'Норма витрати палива (ТО)'",КодЯзыкаПечать);
					ОбластьМакета.Параметры.ФормулаПараметра = НСтр("ru = 'ТО.НормаРасходаТоплива'; uk = 'ТО.НормаВитратПалива'",КодЯзыкаПечать);
				КонецЕсли;
				ОбластьМакета.Параметры.ЗначениеПараметра = НормаРасходаТопливаСтроки;
				
			Иначе
				НормаРасходаТопливаСтроки = НормаРасходаТоплива;
				ОбластьМакета.Параметры.ЗначениеПараметра = НормаРасходаТоплива;
			КонецЕсли;
			
			ОбластьМакета.Параметры.Параметр = "Норма";
			ОбластьМакета.Параметры.ИтогРасчета = ОбластьМакета.Параметры.ЗначениеПараметра;
			ТабДокумент.Вывести(ОбластьМакета);
			ОбластьМакета = Макет.ПолучитьОбласть("Расчет");
			
			Если СведениеОТехОперации.УказатьНадбавкуНаНорму Тогда
				РазмерНадбавки = ?(ЗначениеЗаполнено(СведениеОТехОперации.Надбавка.РазмерНадбавки),СведениеОТехОперации.Надбавка.РазмерНадбавки,0);
				Если СведениеОТехОперации.Надбавка.ВПроцентах Тогда
					НормаРасходаТопливаСтроки = НормаРасходаТопливаСтроки * (1 + РазмерНадбавки / 100);	
					ОбластьМакета.Параметры.Содержание = Нстр("ru='Надбавка для ТО (%)';uk='Надбавка для ТО (%)'");
					ОбластьМакета.Параметры.Формула = "Норма * (1 + ТО.Надбавка / 100)";
					ОбластьМакета.Параметры.Расчет = СокрЛП(Строка(НормаРасходаТопливаСтроки)) + "*(1+" + СокрЛП(Строка(РазмерНадбавки)) + " * 0.001)";
				Иначе 
					НормаРасходаТопливаСтроки = НормаРасходаТопливаСтроки + РазмерНадбавки;		
					ОбластьМакета.Параметры.Содержание = Нстр("ru='Надбавка для ТО ';uk='Надбавка для ТО '");
					ОбластьМакета.Параметры.Формула = "Норма + ТО.Надбавка";
					ОбластьМакета.Параметры.Расчет = СокрЛП(Строка(НормаРасходаТопливаСтроки)) + " + " + СокрЛП(Строка(РазмерНадбавки));
				КонецЕсли; 
				ОбластьМакета.Параметры.Параметр = "ТО.Надбавка";
				ОбластьМакета.Параметры.ЗначениеПараметра = РазмерНадбавки;
				ОбластьМакета.Параметры.ИтогРасчета = НормаРасходаТопливаСтроки;
				ТабДокумент.Вывести(ОбластьМакета);
				ОбластьМакета = Макет.ПолучитьОбласть("Расчет");
			КонецЕсли; 
			
			
			// Использование прицепа
			Если ЗначениеЗаполнено(СтрокаТЧ.Прицеп) Тогда
				НормаРасходаТопливаСтроки = НормаРасходаТопливаСтроки + СвойстваТС.НормаНаПрицеп;
				
				ОбластьМакета.Параметры.Содержание = НСтр("ru = 'Норма на прицеп'; uk = 'Норма на причеп'",КодЯзыкаПечать);
				ОбластьМакета.Параметры.Параметр = НСтр("ru = 'ТС.НормаНаПрицеп'; uk = 'ТЗ.НормаНаПричеп'",КодЯзыкаПечать);
				ОбластьМакета.Параметры.ЗначениеПараметра = СвойстваТС.НормаНаПрицеп;
				ОбластьМакета.Параметры.Формула = НСтр("ru = 'Норма + ТС.НормаНаПрицеп'; uk = 'Норма + ТЗ.НормаНаПричеп'",КодЯзыкаПечать);
				ОбластьМакета.Параметры.Расчет = СокрЛП(Строка(НормаРасходаТопливаСтроки)) + "+" + СокрЛП(Строка(СвойстваТС.НормаНаПрицеп));
				ОбластьМакета.Параметры.ИтогРасчета = НормаРасходаТопливаСтроки;
				ТабДокумент.Вывести(ОбластьМакета);
				ОбластьМакета = Макет.ПолучитьОбласть("Расчет");
			КонецЕсли;
			
			Если СведениеОТехОперации.УказатьНормыРасходаНаВидРабот И СведениеОТехОперации.НормыК = "КЧасам" Тогда
				
				// расчет нормы от отработаных часов
				Норма = НормаРасходаТопливаСтроки * СтрокаТЧ.Время;
				ОбластьМакета.Параметры.Содержание = НСтр("ru = 'Норма от отработаных часов'; uk = 'Норма від відпрацьованого годинника'",КодЯзыкаПечать);
				ОбластьМакета.Параметры.Параметр = НСтр("ru = 'Время'; uk = 'Час'",КодЯзыкаПечать);
				ОбластьМакета.Параметры.ЗначениеПараметра = СтрокаТЧ.Время ;
				ОбластьМакета.Параметры.Формула = НСтр("ru = 'Норма * ТЧ.Время'; uk = 'Норма * ТЧ.Час'",КодЯзыкаПечать);
				ОбластьМакета.Параметры.Расчет = СокрЛП(Строка(НормаРасходаТопливаСтроки)) + "*" + СокрЛП(Строка(СтрокаТЧ.Время));
				ОбластьМакета.Параметры.ИтогРасчета = НормаРасходаТопливаСтроки;
				ТабДокумент.Вывести(ОбластьМакета);
				
			ИначеЕсли СведениеОТехОперации.УказатьНормыРасходаНаВидРабот И СведениеОТехОперации.НормыК = "НаВидРабот" Тогда
				
				// расчет нормы от Вида работ
				Норма = НормаРасходаТопливаСтроки;
				
			Иначе
				
				// расчет нормы от километража
				ЗаПеревозку = 0;
				Если НЕ СведениеОТехОперации.НеПрименятьНадбавкуЗаПеревозГруза Тогда
					
					Если НЕ СвойстваТС.НеУчитыватьПробег Тогда
						
						Если СтрокаТЧ.Ходок = 0 Тогда
							ЗаПеревозку = ((СвойстваТС.ЗаПеревозку + СвойстваТС.КоэффРасхода) * СтрокаТЧ.ПробегСГрузом + (СвойстваТС.ЗаПеревозку + СвойстваТС.КоэффЗаГородом) * СтрокаТЧ.ПробегСГрузомЗаГородом) * СтрокаТЧ.Тоннаж / 100;
							ОбластьМакета.Параметры.ФормулаПараметра = НСтр("ru = '((ТС.ЗаПеревозку+ТС.КоэффРасхода)*ТЧ.ПробегСГрузомПоГороду + (ТС.ЗаПеревозку+ТС.КоэффЗаГородом)*ТЧ.ПробегСГрузомЗаГородом)*ТЧ.Тоннаж*0.01'; uk = '((ТЗ.ЗаПеревезення+ТЗ.КоефВитрат)*ТЧ.ПробігЗВантажемПоМісту + (ТЗ.ЗаПеревезення+ТЗ.КоефЗаМістом)*ТЧ.ПробігЗВантажемЗаМістом)*ТЧ.Тоннаж*0.01'",КодЯзыкаПечать);
							ОбластьМакета.Параметры.РасчетПараметра = "((" + СокрЛП(Строка(СвойстваТС.ЗаПеревозку)) + " + " +  СокрЛП(Строка(СвойстваТС.КоэффРасхода)) + ") * " + СокрЛП(Строка(СтрокаТЧ.ПробегСГрузом)) +
							" + (" + СокрЛП(Строка(СвойстваТС.ЗаПеревозку)) + " + " +  СокрЛП(Строка(СвойстваТС.КоэффЗаГородом))+") * " + СокрЛП(Строка(СтрокаТЧ.ПробегСГрузомЗаГородом)) +") * " +  СокрЛП(Строка(СтрокаТЧ.Тоннаж)) + " * 0.01";
						Иначе	
							ЗаПеревозку = ((СвойстваТС.ЗаПеревозку + СвойстваТС.КоэффРасхода) * СтрокаТЧ.ПробегСГрузом + (СвойстваТС.ЗаПеревозку + СвойстваТС.КоэффЗаГородом) * СтрокаТЧ.ПробегСГрузомЗаГородом) * СтрокаТЧ.Тоннаж / СтрокаТЧ.Ходок / 100;
							ОбластьМакета.Параметры.ФормулаПараметра = НСтр("ru = '((ТС.ЗаПеревозку+ТС.КоэффРасхода)*ТЧ.ПробегСГрузомПоГороду + (ТС.ЗаПеревозку+ТС.КоэффЗаГородом)*ТЧ.ПробегСГрузомЗаГородом)*ТЧ.Тоннаж / ТЧ.Ходок * 0.01'; uk = '((ТЗ.ЗаПеревезення+ТЗ.КоефВитрат)*ТЧ.ПробігЗВантажемПоМісту + (ТЗ.ЗаПеревезення+ТЗ.КоефЗаМістом)*ТЧ.ПробігЗВантажемЗаМістом)*ТЧ.Тоннаж / ТЧ.Ходок * 0.01'",КодЯзыкаПечать);
							ОбластьМакета.Параметры.РасчетПараметра = "((" + СокрЛП(Строка(СвойстваТС.ЗаПеревозку)) + " + " +  СокрЛП(Строка(СвойстваТС.КоэффРасхода)) + ") * " + СокрЛП(Строка(СтрокаТЧ.ПробегСГрузом)) +
							" + (" + СокрЛП(Строка(СвойстваТС.ЗаПеревозку)) + " + " +  СокрЛП(Строка(СвойстваТС.КоэффЗаГородом))+") * " + СокрЛП(Строка(СтрокаТЧ.ПробегСГрузомЗаГородом)) +") * " +  СокрЛП(Строка(СтрокаТЧ.Тоннаж)) + " / "+СокрЛП(Строка(СтрокаТЧ.Ходок)) + "* 0.01";
						КонецЕсли; 
						
					КонецЕсли;
					
				КонецЕсли; 
				ОбластьМакета.Параметры.Содержание = НСтр("ru = 'Надбавка за перевозку груза'; uk = 'Надбавка за перевезення вантажу'",КодЯзыкаПечать);
				ОбластьМакета.Параметры.Параметр = НСтр("ru = 'ЗаПеревозку'; uk = 'ЗаПеревезення'",КодЯзыкаПечать);
				ОбластьМакета.Параметры.ЗначениеПараметра = ЗаПеревозку ;
				ТабДокумент.Вывести(ОбластьМакета);
				ОбластьМакета = Макет.ПолучитьОбласть("Расчет");
				
				// Надбавка за перевозку по грунтовой дороге
				НадбавкаГрунтовойДороги = 0;
				Если ЗначениеЗаполнено(СвойстваТС.НадбавкаПоГрунтовойДороге) Тогда
					Если ЗначениеЗаполнено(СтрокаТЧ.Расстояние) Тогда
						ПроцентГрунтовойДороги = Окр((СтрокаТЧ.ПробегПоГрунтовойДороге * 100 / СтрокаТЧ.Расстояние) * СвойстваТС.НадбавкаПоГрунтовойДороге, 2); 
						НадбавкаГрунтовойДороги = НормаРасходаТопливаСтроки * ПроцентГрунтовойДороги / 100;
						
						ОбластьМакета.Параметры.ФормулаПараметра = НСтр("ru = 'Норма * ТЧ.ПробегПоГрунтовойДороге * ТС.НадбавкаПоГрунтовойДороге / ТЧ.Расстояние'; uk = 'Норма * ТЧ.ПробігПоГрунтовійДорозі * ТЗ.НадбавкаПоГрунтовійДорозі / ТЧ.Відстань'",КодЯзыкаПечать);
						ОбластьМакета.Параметры.РасчетПараметра =  СокрЛП(Строка(Норма)) + " * " +  СокрЛП(Строка(СтрокаТЧ.ПробегПоГрунтовойДороге)) + " * "   +  СокрЛП(Строка(СвойстваТС.НадбавкаПоГрунтовойДороге)) + " / "  +  СокрЛП(Строка( СтрокаТЧ.Расстояние));
						
						ОбластьМакета.Параметры.ЗначениеПараметра = НадбавкаГрунтовойДороги ;
					КонецЕсли;
				КонецЕсли;
				ОбластьМакета.Параметры.Содержание = НСтр("ru = 'Надбавка за перевозку по грунтовой дороге'; uk = 'Надбавка за перевезення по грунтовій дорозі'",КодЯзыкаПечать);
				ОбластьМакета.Параметры.Параметр = НСтр("ru = 'НадбавкаГрунтовойДороги'; uk = 'НадбавкаГрунтовоїДороги'",КодЯзыкаПечать);
				ТабДокумент.Вывести(ОбластьМакета);
				ОбластьМакета = Макет.ПолучитьОбласть("Расчет");
				
				// Норма с учетом предыдущих надбавок 
				ОбластьМакета.Параметры.Содержание = НСтр("ru = 'Норма с учетом надбавок'; uk = 'Норма з урахуванням надбавок'",КодЯзыкаПечать); 
				Если СвойстваТС.НадбавкаЗаХодку Тогда
					ОбластьМакета.Параметры.Формула = НСтр("ru = '(Норма + НадбавкаГрунтовойДороги)/100 * ТЧ.Расстояние + ТЧ.Ходок*0.25 + ЗаПеревозку'; uk = '(Норма + НадбавкаГрунтовоїДороги)/100 * ТЧ.Відстань + ТЧ.Ходок*0.25 + ЗаПеревезення'",КодЯзыкаПечать);
					Норма = (НормаРасходаТопливаСтроки + НадбавкаГрунтовойДороги) / 100 * СтрокаТЧ.Расстояние + СтрокаТЧ.Ходок * 0.25 + ЗаПеревозку;
					ОбластьМакета.Параметры.Расчет = "(" + СокрЛП(Строка(НормаРасходаТопливаСтроки)) + " + " + СокрЛП(Строка(НадбавкаГрунтовойДороги)) + ") / 100 * " + СокрЛП(Строка(СтрокаТЧ.Расстояние)) + " + " + СокрЛП(Строка(СтрокаТЧ.Ходок)) + " * 0.25 + " + СокрЛП(Строка(ЗаПеревозку));
				Иначе	
					ОбластьМакета.Параметры.Формула = НСтр("ru = '(Норма + НадбавкаГрунтовойДороги)/100 * ТЧ.Расстояние + ЗаПеревозку'; uk = '(Норма + НадбавкаГрунтовоїДороги)/100 * ТЧ.Відстань + ЗаПеревезення'",КодЯзыкаПечать);
					Норма = (НормаРасходаТопливаСтроки + НадбавкаГрунтовойДороги) / 100 * СтрокаТЧ.Расстояние + ЗаПеревозку;
					ОбластьМакета.Параметры.Расчет = "(" + СокрЛП(Строка(НормаРасходаТопливаСтроки)) + " + " + СокрЛП(Строка(НадбавкаГрунтовойДороги)) + ") / 100 * " + СокрЛП(Строка(СтрокаТЧ.Расстояние)) + " + "  + СокрЛП(Строка(ЗаПеревозку));
				КонецЕсли;
				ОбластьМакета.Параметры.ИтогРасчета = Норма;
				ТабДокумент.Вывести(ОбластьМакета);
				ОбластьМакета = Макет.ПолучитьОбласть("Расчет");
				
				// Работы на ХПД
				Если ЗначениеЗаполнено(СведениеОТехОперации) Тогда
					Если СведениеОТехОперации.ИспользоватьНормыДляРаботНаХПД Тогда
						// особености работы на ХПД
						Норма1 = Норма;
						Норма = Норма + СтрокаТЧ.Ходок * СвойстваТС.НормаСПониженнойСкоростью + СтрокаТЧ.Ходок * СвойстваТС.НормаПриМаневрах;
						ОбластьМакета.Параметры.Содержание = НСтр("ru = 'Работы на ХПД'; uk = 'Роботи на ХПД'",КодЯзыкаПечать);
						ОбластьМакета.Параметры.Формула = НСтр("ru = 'Норма + ТЧ.Ходок * ТС.НормаСПониженнойСкоростью + ТЧ.Ходок * ТС.НормаПриМаневрах'; uk = 'Норма + ТЧ.Ходок * ТЗ.НормаЗЗнижШвидкістю + ТЧ.Ходок * ТЗ.НормаПриМаневрах'",КодЯзыкаПечать);
						ОбластьМакета.Параметры.Расчет = СокрЛП(Строка(Норма1)) + " + " + СокрЛП(Строка(СтрокаТЧ.Ходок)) + " * " + СокрЛП(Строка(СвойстваТС.НормаСПониженнойСкоростью))
						+ " + " + СокрЛП(Строка(СтрокаТЧ.Ходок)) + " * " + СокрЛП(Строка(СвойстваТС.НормаПриМаневрах));
						ОбластьМакета.Параметры.ИтогРасчета = Норма;
						ТабДокумент.Вывести(ОбластьМакета);
						ОбластьМакета = Макет.ПолучитьОбласть("Расчет");
						
						Если СвойстваТС.НадбавкаЗаХодку Тогда
							Норма2 = Норма;
							Норма = Норма + 0.25 * СтрокаТЧ.Ходок;
							ОбластьМакета.Параметры.Формула = "Норма + 0.25 * ТЧ.Ходок";
							ОбластьМакета.Параметры.Расчет = СокрЛП(Строка(Норма2)) + " + 0.25 * " + СокрЛП(Строка(СтрокаТЧ.Ходок));
							ОбластьМакета.Параметры.ИтогРасчета = Норма;
							ТабДокумент.Вывести(ОбластьМакета);
							ОбластьМакета = Макет.ПолучитьОбласть("Расчет");
						КонецЕсли;
						
					КонецЕсли;
				КонецЕсли;
				
				// Надбавка за подъем
				Если ЗначениеЗаполнено(СтрокаТЧ.КвоПодъемов) Тогда
					
					ОбластьМакета.Параметры.Содержание = НСтр("ru = 'Надбавка за подъем'; uk = 'Надбавка за підйом'",КодЯзыкаПечать);
					ОбластьМакета.Параметры.Формула = НСтр("ru = 'Норма + ТС.ЗаПодъем * ТЧ.КвоПодъемов'; uk = 'Норма + ТЗ.ЗаПідйом * ТЧ.КілПідйомів'",КодЯзыкаПечать);
					ОбластьМакета.Параметры.Расчет = СокрЛП(Строка(Норма)) + " + " +  СокрЛП(Строка(СвойстваТС.ЗаПодъем)) + " * " + СокрЛП(Строка(СтрокаТЧ.КвоПодъемов));
					Норма = Норма + СвойстваТС.ЗаПодъем * СтрокаТЧ.КвоПодъемов;
					ОбластьМакета.Параметры.ИтогРасчета = Норма;
					ТабДокумент.Вывести(ОбластьМакета);
					ОбластьМакета = Макет.ПолучитьОбласть("Расчет");
				КонецЕсли;
				
				// Надбавка за спец работы
				Если ЗначениеЗаполнено(СтрокаТЧ.КвоЕдСпецСтр) Тогда
					Если СведениеОТехОперации.УказатьНормыРасходаНаВидРабот Тогда
						
						ОбластьМакета.Параметры.Формула = НСтр("ru = 'Норма + ТО.НормаСпецРаботы * ТЧ.КвоЕдСпецСтр'; uk = 'Норма + ТО.НормаСпецРоботи * ТЧ.КілОдСпецСтр'",КодЯзыкаПечать);
						ОбластьМакета.Параметры.Расчет = СокрЛП(Строка(Норма)) + " + " + СокрЛП(Строка(СведениеОТехОперации.НормаСпецРаботы)) + " * " + СокрЛП(Строка(СтрокаТЧ.КвоЕдСпецСтр));
						Норма = Норма + СведениеОТехОперации.НормаСпецРаботы * СтрокаТЧ.КвоЕдСпецСтр;
					Иначе		
						ОбластьМакета.Параметры.Формула = НСтр("ru = 'Норма + ТС.НормаСпецТранспорта * ТЧ.КвоЕдСпецСтр'; uk = 'Норма + ТЗ.НормаСпецТранспорту * ТЧ.КілОдСпецСтр'",КодЯзыкаПечать);
						ОбластьМакета.Параметры.Расчет = СокрЛП(Строка(Норма)) + " + " + СокрЛП(Строка(СвойстваТС.НормаСпецТранспорта)) + " * " + СокрЛП(Строка(СтрокаТЧ.КвоЕдСпецСтр));
						Норма = Норма + СвойстваТС.НормаСпецТранспорта * СтрокаТЧ.КвоЕдСпецСтр;
					КонецЕсли; 
					ОбластьМакета.Параметры.Содержание = НСтр("ru = 'Надбавка за спец. работы'; uk = 'Надбавка за спец. роботи'",КодЯзыкаПечать);
					ОбластьМакета.Параметры.ИтогРасчета = Норма;
					ТабДокумент.Вывести(ОбластьМакета);
					ОбластьМакета = Макет.ПолучитьОбласть("Расчет");
				КонецЕсли;
				
			КонецЕсли;
			
			// Норма с учетом общего процента надбавки
			Если ОбщийПроцентНадбавки <> 0 Тогда
				Норма = Норма + (Норма * ОбщийПроцентНадбавки / 100);
				
				ОбластьМакета.Параметры.Содержание = НСтр("ru = 'Норма с учетом общего процента надбавки'; uk = 'Норма з урахуванням загального відсотка надбавки'",КодЯзыкаПечать);
				ОбластьМакета.Параметры.Параметр = НСтр("ru = 'ОбщийПроцентНадбавки'; uk = 'ЗагальнийВідсотокНадбавки'",КодЯзыкаПечать);
				ОбластьМакета.Параметры.ЗначениеПараметра = ОбщийПроцентНадбавки;
				ОбластьМакета.Параметры.Формула = НСтр("ru = 'Норма + (Норма * ОбщийПроцентНадбавки / 100)'; uk = 'Норма + (Норма * ЗагальнийВідсотокНадбавки / 100)'",КодЯзыкаПечать);
				ОбластьМакета.Параметры.ИтогРасчета = Норма;
				ТабДокумент.Вывести(ОбластьМакета);
				ОбластьМакета = Макет.ПолучитьОбласть("Расчет");
			КонецЕсли;
			
			// Норма с учетом надбавки по строке
			Если СтрокаТЧ.НомерСтроки = ПутевыеЛисты.Количество() - 1 Тогда
				Норма = Норма + (СуммаНадбавок - НадбавкиКонтроль);
				
				ОбластьМакета.Параметры.Содержание = НСтр("ru = 'Норма с учетом надбавки по строке'; uk = 'Норма з урахуванням надбавки по рядку'",КодЯзыкаПечать);
				ОбластьМакета.Параметры.Параметр = НСтр("ru = 'НадбавкаПоСтроке'; uk = 'НадбавкаПоРядку'",КодЯзыкаПечать);
				ОбластьМакета.Параметры.ЗначениеПараметра = СуммаНадбавок - НадбавкиКонтроль;
				ОбластьМакета.Параметры.ИтогРасчета = Норма;
				ТабДокумент.Вывести(ОбластьМакета);
				ОбластьМакета = Макет.ПолучитьОбласть("Расчет");
			Иначе
				Норма = Норма + НадбавкаПоСтроке;
				НадбавкиКонтроль = НадбавкиКонтроль + НадбавкаПоСтроке;
				
				ОбластьМакета.Параметры.Содержание = НСтр("ru = 'Норма с учетом надбавки по строке'; uk = 'Норма з урахуванням надбавки по рядку'",КодЯзыкаПечать);
				ОбластьМакета.Параметры.Параметр = НСтр("ru = 'НадбавкаПоСтроке'; uk = 'НадбавкаПоРядку'",КодЯзыкаПечать);
				ОбластьМакета.Параметры.ЗначениеПараметра = НадбавкаПоСтроке;
				ОбластьМакета.Параметры.ИтогРасчета = Норма;
				ТабДокумент.Вывести(ОбластьМакета);
			КонецЕсли;
			
			Если ПутевыеЛисты.Количество() > 1 Тогда
				ОбластьМакета = Макет.ПолучитьОбласть("ИтогПоОперации");
				ОбластьМакета.Параметры.ИтогРасчета = Норма;
				ТабДокумент.Вывести(ОбластьМакета);
			КонецЕсли; 	
			
			НормаПоДокументу = НормаПоДокументу + Норма;
		КонецЦикла;	
		
		Если ПутевыеЛисты.Количество() > 0 Тогда
			ОбластьМакета = Макет.ПолучитьОбласть("ИтогПоДокументу");
			ОбластьМакета.Параметры.ИтогРасчета = НормаПоДокументу;
			ТабДокумент.Вывести(ОбластьМакета);
		КонецЕсли; 	
		
	КонецЦикла;	
	
	Возврат ТабДокумент;
		
КонецФункции 
 
Функция ПечатьПЛЛА(МассивОбъектов, ОбъектыПечати, ПараметрыВывода)

	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПутевойЛистЛегкового";
	
	Для Каждого Ссылка Из МассивОбъектов Цикл
		
		// Получаем макет 
		Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ИНАГРО_ПутевойЛистГрузовогоАвтомобиля.ПФ_MXL_ПутевойЛистЛегкового");
		
		// Печать производится на языке, указанном в настройках пользователя
		КодЯзыкаПечать = ПараметрыВывода.КодЯзыкаДляМногоязычныхПечатныхФорм;
		Макет.КодЯзыкаМакета = КодЯзыкаПечать;

		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ИНАГРО_ПутевойЛистГрузовогоАвтомобиля.Номер КАК НомерДок,
		|	ИНАГРО_ПутевойЛистГрузовогоАвтомобиля.Дата КАК ДатаДок,
		|	ИНАГРО_ПутевойЛистГрузовогоАвтомобиля.Организация.Наименование КАК Организация,
		|	ИНАГРО_ПутевойЛистГрузовогоАвтомобиля.Автомобиль КАК Автомобиль,
		|	ИНАГРО_ПутевойЛистГрузовогоАвтомобиля.Водитель,
		|	ИНАГРО_ПутевойЛистГрузовогоАвтомобиля.БакДо,
		|	ИНАГРО_ПутевойЛистГрузовогоАвтомобиля.БакПосле,
		|	ИНАГРО_ПутевойЛистГрузовогоАвтомобиля.СпидометрДо,
		|	ИНАГРО_ПутевойЛистГрузовогоАвтомобиля.СпидометрПосле,
		|	СУММА(ТЧПутевыеЛисты.ПробегСГрузом + ТЧПутевыеЛисты.ПробегСГрузомЗаГородом) КАК Пробег,
		|	СУММА(ТЧПутевыеЛисты.СуммаЗП + ТЧПутевыеЛисты.ДоплатаЗаКлассность) КАК СуммаЗП,
		|	СУММА(ТЧПутевыеЛисты.ЗатратыТопливаПоНорме) КАК ЗатратыТопливаПоНорме,
		|	СУММА(ТЧПутевыеЛисты.ЗатратыТопливаПоФакту) КАК ЗатратыТопливаПоФакту
		|ИЗ
		|	Документ.ИНАГРО_ПутевойЛистГрузовогоАвтомобиля КАК ИНАГРО_ПутевойЛистГрузовогоАвтомобиля
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ИНАГРО_ПутевойЛистГрузовогоАвтомобиля.ПутевыеЛисты КАК ТЧПутевыеЛисты
		|		ПО ИНАГРО_ПутевойЛистГрузовогоАвтомобиля.Ссылка = ТЧПутевыеЛисты.Ссылка
		|ГДЕ
		|	ИНАГРО_ПутевойЛистГрузовогоАвтомобиля.Ссылка = &ТекущийДокумент
		|
		|СГРУППИРОВАТЬ ПО
		|	ИНАГРО_ПутевойЛистГрузовогоАвтомобиля.Номер,
		|	ИНАГРО_ПутевойЛистГрузовогоАвтомобиля.Автомобиль,
		|	ИНАГРО_ПутевойЛистГрузовогоАвтомобиля.Водитель,
		|	ИНАГРО_ПутевойЛистГрузовогоАвтомобиля.Дата,
		|	ИНАГРО_ПутевойЛистГрузовогоАвтомобиля.Организация.Наименование,
		|	ИНАГРО_ПутевойЛистГрузовогоАвтомобиля.БакДо,
		|	ИНАГРО_ПутевойЛистГрузовогоАвтомобиля.БакПосле,
		|	ИНАГРО_ПутевойЛистГрузовогоАвтомобиля.СпидометрДо,
		|	ИНАГРО_ПутевойЛистГрузовогоАвтомобиля.СпидометрПосле";
		
		Запрос.УстановитьПараметр("ТекущийДокумент", Ссылка);
	
		Шапка = Запрос.Выполнить().Выбрать();
		Шапка.Следующий();
				
		Выдано = Ссылка.ТопливоВыданное.Итог("Количество");
		
		ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
		ОбластьМакета.Параметры.Заполнить(Шапка);
		ОбластьМакета.Параметры.НомерДок = Шапка.НомерДок;
		ОбластьМакета.Параметры.ДатаДок = Формат(Ссылка.Дата,"ДФ=dd.MM.yyyy");
		ОбластьМакета.Параметры.Выдано = Выдано;
			
		ТабДокумент.Вывести(ОбластьМакета);
		
	КонецЦикла;
	
	Возврат ТабДокумент;

КонецФункции 

Функция ПечатьПЛР(МассивОбъектов, ОбъектыПечати, ПараметрыВывода)

	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПутевойЛистРасширенный";
	
	Для Каждого Ссылка Из МассивОбъектов Цикл
		
		// Получаем макет 
		Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ИНАГРО_ПутевойЛистГрузовогоАвтомобиля.ПФ_MXL_ПутевойЛистРасширенный");
		
		// Печать производится на языке, указанном в настройках пользователя
		КодЯзыкаПечать = ПараметрыВывода.КодЯзыкаДляМногоязычныхПечатныхФорм;
		Макет.КодЯзыкаМакета = КодЯзыкаПечать;
	
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
	               |	ИНАГРО_ПутевойЛистГрузовогоАвтомобиля.Номер КАК НомерДок,
	               |	ИНАГРО_ПутевойЛистГрузовогоАвтомобиля.Дата КАК ДатаДок,
	               |	ИНАГРО_ПутевойЛистГрузовогоАвтомобиля.Организация.Наименование КАК Организация,
	               |	ИНАГРО_ПутевойЛистГрузовогоАвтомобиля.Водитель,
	               |	ИНАГРО_ПутевойЛистГрузовогоАвтомобиля.Автомобиль,
	               |	ИНАГРО_ПутевойЛистГрузовогоАвтомобиля.БакДо,
	               |	ИНАГРО_ПутевойЛистГрузовогоАвтомобиля.БакПосле,
	               |	ИНАГРО_ПутевойЛистГрузовогоАвтомобиля.СпидометрДо,
	               |	ИНАГРО_ПутевойЛистГрузовогоАвтомобиля.СпидометрПосле,
	               |	СУММА(ТЧПутевыеЛисты.ПробегСГрузом + ТЧПутевыеЛисты.ПробегСГрузомЗаГородом) КАК Пробег,
	               |	СУММА(ТЧПутевыеЛисты.СуммаЗП + ТЧПутевыеЛисты.ДоплатаЗаКлассность) КАК СуммаЗП,
	               |	СУММА(ТЧПутевыеЛисты.ЗатратыТопливаПоНорме) КАК ЗатратыТопливаПоНорме,
	               |	СУММА(ТЧПутевыеЛисты.ЗатратыТопливаПоФакту) КАК ЗатратыТопливаПоФакту,
	               |	ТЧПутевыеЛисты.Прицеп,
	               |	ИНАГРО_ПутевойЛистГрузовогоАвтомобиля.Номер,
	               |	СУММА(ТЧПутевыеЛисты.ПробегСГрузом) КАК ПробегСГрузом,
	               |	СУММА(ТЧПутевыеЛисты.Тоннаж) КАК Тоннаж,
	               |	СУММА(ТЧПутевыеЛисты.ЧасовПростоя) КАК ЧасовПростоя,
	               |	СУММА(ИНАГРО_ПутевойЛистГрузовогоАвтомобиля.ОтработаноЧасов) КАК ОтработаноЧасов,
	               |	ТЧПутевыеЛисты.ТехнологическаяОперация КАК ТехнологическаяОперация,
	               |	СУММА(ТЧПутевыеЛисты.Время) КАК Время,
	               |	СУММА(ТЧПутевыеЛисты.Ходок) КАК Ходок,
	               |	СУММА(ТЧПутевыеЛисты.Расстояние) КАК Расстояние,
	               |	СУММА(ТЧПутевыеЛисты.Тоннаж / ТЧПутевыеЛисты.Ходок * (ТЧПутевыеЛисты.ПробегСГрузом + ТЧПутевыеЛисты.ПробегСГрузомЗаГородом)) КАК Тоннокилометры
	               |ИЗ
	               |	Документ.ИНАГРО_ПутевойЛистГрузовогоАвтомобиля КАК ИНАГРО_ПутевойЛистГрузовогоАвтомобиля
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ИНАГРО_ПутевойЛистГрузовогоАвтомобиля.ПутевыеЛисты КАК ТЧПутевыеЛисты
	               |		ПО ИНАГРО_ПутевойЛистГрузовогоАвтомобиля.Ссылка = ТЧПутевыеЛисты.Ссылка
	               |ГДЕ
	               |	ИНАГРО_ПутевойЛистГрузовогоАвтомобиля.Ссылка = &ТекущийДокумент
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ИНАГРО_ПутевойЛистГрузовогоАвтомобиля.Автомобиль,
	               |	ИНАГРО_ПутевойЛистГрузовогоАвтомобиля.Водитель,
	               |	ИНАГРО_ПутевойЛистГрузовогоАвтомобиля.Организация.Наименование,
	               |	ИНАГРО_ПутевойЛистГрузовогоАвтомобиля.Дата,
	               |	ИНАГРО_ПутевойЛистГрузовогоАвтомобиля.БакДо,
	               |	ИНАГРО_ПутевойЛистГрузовогоАвтомобиля.БакПосле,
	               |	ИНАГРО_ПутевойЛистГрузовогоАвтомобиля.СпидометрДо,
	               |	ИНАГРО_ПутевойЛистГрузовогоАвтомобиля.СпидометрПосле,
	               |	ТЧПутевыеЛисты.Прицеп,
	               |	ИНАГРО_ПутевойЛистГрузовогоАвтомобиля.Номер,
	               |	ТЧПутевыеЛисты.ТехнологическаяОперация,
	               |	ИНАГРО_ПутевойЛистГрузовогоАвтомобиля.Номер";
		
		Запрос.УстановитьПараметр("ТекущийДокумент", Ссылка);
		
		Шапка = Запрос.Выполнить().Выбрать();
		Шапка.Следующий();
				
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Ссылка", Ссылка);
		Запрос.Текст =  "ВЫБРАТЬ
		                |	ИНАГРО_ПутевойЛистГрузовогоАвтомобиляТопливо.Топливо,
		                |	СУММА(ИНАГРО_ПутевойЛистГрузовогоАвтомобиляТопливо.Количество) КАК Выдано
		                |ИЗ
		                |	Документ.ИНАГРО_ПутевойЛистГрузовогоАвтомобиля.ТопливоВыданное КАК ИНАГРО_ПутевойЛистГрузовогоАвтомобиляТопливо
		                |ГДЕ
		                |	ИНАГРО_ПутевойЛистГрузовогоАвтомобиляТопливо.Ссылка = &Ссылка
		                |
		                |СГРУППИРОВАТЬ ПО
		                |	ИНАГРО_ПутевойЛистГрузовогоАвтомобиляТопливо.Топливо";
		ТЗТопливо = Запрос.Выполнить().Выбрать();
		
		ОбластьШапкаНачало 			= Макет.ПолучитьОбласть("ШапкаНачало");  
		ОбластьШапкаНачало.Параметры.Заполнить(Шапка);
		ОбластьШапкаПродолжение 	= Макет.ПолучитьОбласть("ШапкаПродолжение");  
		ОбластьШапкаПродолжение.Параметры.Заполнить(Шапка);
		ОбластьШапкаКонец 			= Макет.ПолучитьОбласть("ШапкаКонец");
		ОбластьШапкаКонец.Параметры.Заполнить(Шапка);
		ОбластьШапкаСтрока 			= Макет.ПолучитьОбласть("ШапкаСтрока");
		ОбластьШапкаСтрока.Параметры.Заполнить(Шапка);
		ОбластьШапкаСтрокаТопливо 	= Макет.ПолучитьОбласть("ШапкаСтрокаТопливо");
		
		ОбластьШапкаНачало.Параметры.НомерДок = ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(Шапка.НомерДок, Истина, Истина);
		ОбластьШапкаНачало.Параметры.ДатаДок = Формат(Шапка.ДатаДок, "ДФ='дд ММММ гггг';Л="+ Локализация.ОпределитьКодЯзыкаДляФормат(КодЯзыкаПечать));
		
		ТабДокумент.Вывести(ОбластьШапкаНачало);
		
		Пока ТЗТопливо.Следующий() Цикл
		
			ОбластьШапкаСтрокаТопливо.Параметры.Заполнить(ТЗТопливо);
			ТабДокумент.Вывести(ОбластьШапкаСтрокаТопливо);
			
		КонецЦикла;
		
		ТабДокумент.Вывести(ОбластьШапкаПродолжение);
		ТабДокумент.Вывести(ОбластьШапкаСтрока);
		
		Если Шапка.Количество() > 0 Тогда
			ИтогХодок 		= Шапка.Ходок;
			ИтогРасстояние 	= Шапка.Расстояние;
			ИтогТоннаж 		= Шапка.Тоннаж;
			ИтогВремя 		= Шапка.Время;
			ИтогТоннокилометры	= Шапка.Тоннокилометры;
			ИтогЗатратыТопливаПоНорме	= Шапка.ЗатратыТопливаПоНорме;
			ИтогЗатратыТопливаПоФакту	= Шапка.ЗатратыТопливаПоФакту;
		КонецЕсли; 
		
		Пока Шапка.Следующий() Цикл
		
			ОбластьШапкаСтрока.Параметры.Заполнить(Шапка);
			ТабДокумент.Вывести(ОбластьШапкаСтрока);
		
			ИтогХодок 		= ИтогХодок 	+ Шапка.Ходок;
			ИтогРасстояние 	= ИтогРасстояние + Шапка.Расстояние;
			ИтогТоннаж 		= ИтогТоннаж 	+ Шапка.Тоннаж;
			ИтогВремя 		= ИтогВремя 	+ Шапка.Время;
			ИтогТоннокилометры	= ИтогТоннокилометры 	+ Шапка.Тоннокилометры;
			ИтогЗатратыТопливаПоНорме	= ИтогЗатратыТопливаПоНорме + Шапка.ЗатратыТопливаПоНорме;
			ИтогЗатратыТопливаПоФакту	= ИтогЗатратыТопливаПоФакту	+ Шапка.ЗатратыТопливаПоФакту;
			
		КонецЦикла;
		
		ОбластьШапкаКонец.Параметры.Ходок 		= ИтогХодок;
		ОбластьШапкаКонец.Параметры.Расстояние 	= ИтогРасстояние;
		ОбластьШапкаКонец.Параметры.Тоннаж 		= ИтогТоннаж;
		ОбластьШапкаКонец.Параметры.Время 		= ИтогВремя;
		ОбластьШапкаКонец.Параметры.Тоннокилометры	= ИтогТоннокилометры;
		ОбластьШапкаКонец.Параметры.ЗатратыТопливаПоНорме	= ИтогЗатратыТопливаПоНорме;
		ОбластьШапкаКонец.Параметры.ЗатратыТопливаПоФакту	= ИтогЗатратыТопливаПоФакту;
		ТабДокумент.Вывести(ОбластьШапкаКонец);
		
		Возврат ТабДокумент;
		
	КонецЦикла;	
		
КонецФункции 

Функция ПечатьЛЗК(МассивОбъектов, ОбъектыПечати, ПараметрыВывода)

	УстановитьПривилегированныйРежим(Истина);
	ТабДокумент = Новый ТабличныйДокумент;
	ПервыйДокумент = Истина;
	
	Для каждого Ссылка Из МассивОбъектов Цикл
		Если  Не ПервыйДокумент Тогда
			ТабДокумент.ВывестиВертикальныйРазделительСтраниц();
		КонецЕсли; 
		ПервыйДокумент = Ложь;
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ТекущийДокумент", Ссылка);
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	ПутевойЛистГрузовогоАвтомобиляТопливо.Ссылка.Номер,
		|	ПутевойЛистГрузовогоАвтомобиляТопливо.Ссылка.Дата,
		|	ПутевойЛистГрузовогоАвтомобиляТопливо.Ссылка.Водитель.Наименование КАК Получил,
		|	ПутевойЛистГрузовогоАвтомобиляТопливо.Ссылка.Организация,
		|	ПутевойЛистГрузовогоАвтомобиляТопливо.Ссылка.Организация КАК Поставщик,
		|	ПутевойЛистГрузовогоАвтомобиляТопливо.Ссылка.Организация.КодПоЕДРПОУ КАК ЕДРПОУ,
		|	ПутевойЛистГрузовогоАвтомобиляТопливо.Склад
		|ИЗ
		|	Документ.ИНАГРО_ПутевойЛистГрузовогоАвтомобиля.ТопливоВыданное КАК ПутевойЛистГрузовогоАвтомобиляТопливо
		|ГДЕ
		|	ПутевойЛистГрузовогоАвтомобиляТопливо.Ссылка = &ТекущийДокумент";
		Шапка = Запрос.Выполнить().Выбрать();
		Шапка.Следующий();
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ТекущийДокумент", Ссылка);
		Запрос.УстановитьПараметр("ПустаяЕдиницаИзмерения", Справочники.КлассификаторЕдиницИзмерения.ПустаяСсылка());
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВложенныйЗапросПоТоварам.Номенклатура,
		|	ВЫРАЗИТЬ(ВложенныйЗапросПоТоварам.Номенклатура.НаименованиеПолное КАК СТРОКА(1000)) КАК Товар,
		|	ВложенныйЗапросПоТоварам.Номенклатура.Код КАК Код,
		|	ВложенныйЗапросПоТоварам.Количество,
		|	ВложенныйЗапросПоТоварам.ЕдиницаИзмерения.Наименование КАК ЕдиницаИзмерения,
		|	ВложенныйЗапросПоТоварам.НомерСтроки КАК НомерСтроки,
		|	1 КАК ID
		|ИЗ
		|	(ВЫБРАТЬ
		|		ПутевойЛистГрузовогоАвтомобиляТопливо.Топливо КАК Номенклатура,
		|		ПутевойЛистГрузовогоАвтомобиляТопливо.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|		СУММА(ПутевойЛистГрузовогоАвтомобиляТопливо.Количество) КАК Количество,
		|		МИНИМУМ(ПутевойЛистГрузовогоАвтомобиляТопливо.НомерСтроки) КАК НомерСтроки
		|	ИЗ
		|		Документ.ИНАГРО_ПутевойЛистГрузовогоАвтомобиля.ТопливоВыданное КАК ПутевойЛистГрузовогоАвтомобиляТопливо
		|	ГДЕ
		|		ПутевойЛистГрузовогоАвтомобиляТопливо.Ссылка = &ТекущийДокумент
		|	
		|	СГРУППИРОВАТЬ ПО
		|		ПутевойЛистГрузовогоАвтомобиляТопливо.Топливо,
		|		ПутевойЛистГрузовогоАвтомобиляТопливо.ЕдиницаИзмерения) КАК ВложенныйЗапросПоТоварам
		|
		|УПОРЯДОЧИТЬ ПО
		|	ID,
		|	НомерСтроки";
		ЗапросТовары = Запрос.Выполнить().Выгрузить();
		
		// Вывод заголовка                               
		Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ИНАГРО_ПутевойЛистГрузовогоАвтомобиля.ПФ_MXL_ЛимитноЗаборнаяКарта");
		
		// печать производится на языке, указанном в настройках пользователя
		КодЯзыкаПечать = ПараметрыВывода.КодЯзыкаДляМногоязычныхПечатныхФорм;
		Макет.КодЯзыкаМакета = КодЯзыкаПечать;
		
		ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
		
		ОбластьМакета.Параметры.Заполнить(Шапка);
		ОбластьМакета.Параметры.Дата=Формат(Ссылка.Дата, "ДФ='дд ММММ гггг';Л="+ Локализация.ОпределитьКодЯзыкаДляФормат(КодЯзыкаПечать)) + НСтр("ru=' г.';uk=' р.'",КодЯзыкаПечать);
		ТабДокумент.Вывести(ОбластьМакета);
		
		// Вывести табличную часть
		ОбластьМакета = Макет.ПолучитьОбласть("ШапкаТаблицы");
		ТабДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Строка");
		Для каждого ВыборкаСтрокТовары Из ЗапросТовары Цикл 
			Если НЕ ЗначениеЗаполнено(ВыборкаСтрокТовары.Номенклатура) Тогда
				ТекстСообщения = НСтр("ru='В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.';uk='В одному з рядків не заповнене значення номенклатури - рядок під час друку буде пропущений.'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
				Продолжить;
			КонецЕсли;
			
			ОбластьМакета.Параметры.Заполнить(ВыборкаСтрокТовары);
			ОбластьМакета.Параметры.Товар 		= СокрЛП(ВыборкаСтрокТовары.Товар);
			ОбластьМакета.Параметры.НомерСтроки = ЗапросТовары.Индекс(ВыборкаСтрокТовары) + 1;
			ТабДокумент.Вывести(ОбластьМакета);
			
		КонецЦикла;
		
		// Вывести Итого
		ОбластьМакета = Макет.ПолучитьОбласть("Итого");
		ТабДокумент.Вывести(ОбластьМакета);
		
		// Вывести подписи
		ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
		ОбластьМакета.Параметры.Заполнить(Шапка);
		ТабДокумент.Вывести(ОбластьМакета);
	КонецЦикла;
	
	Возврат ТабДокумент;
		
КонецФункции 

Функция ПолучитьДополнительныеРеквизитыДляРеестра() Экспорт
	
	Результат = Новый Структура;	
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ЗаполнитьТЧВыпускПродукции(Объект) Экспорт
	
	Объект.ВыпускПродукции.Очистить();
		
	СтруктураШапкиДокумента = Новый Структура;
	СтруктураШапкиДокумента.Вставить("Ссылка", Объект.Ссылка);
	СтруктураШапкиДокумента.Вставить("Дата",   Объект.Дата);
		
	ТаблицаВыпуска = ИНАГРО_Транспорт.ИНАГРО_ПодготовитьТаблицуВыпускаПродукцииАвтотранспортПоОперациям(СтруктураШапкиДокумента);
	
	Для Каждого СтрокаТЧ Из ТаблицаВыпуска Цикл 
		
		Если СтрокаТЧ.ТКМЗаГородом <> 0 Тогда
			
			Строка = Объект.ВыпускПродукции.Добавить();
			
			Строка.Номенклатура 		   = СтрокаТЧ.НоменклатураВыпускаТКМ;
			Строка.Счет					   = СтрокаТЧ.СчетСписания; 			
			Строка.Подразделение		   = СтрокаТЧ.ПодразделениеОрганизации;
			Строка.НоменклатурнаяГруппа	   = СтрокаТЧ.НоменклатурнаяГруппа;
			Строка.ТехнологическаяОперация = СтрокаТЧ.ТехнологическаяОперация; 			
			Строка.Количество			   = СтрокаТЧ.ТКМЗаГородом;
			Строка.Сумма				   = СтрокаТЧ.ТКМЗаГородом * СтрокаТЧ.ЦенаТКМ;
			Строка.НалоговоеНазначение	   = СтрокаТЧ.НалоговоеНазначение; 
			
		КонецЕсли;
		
		Если СтрокаТЧ.ТКМГород <> 0 Тогда
			
			Строка = Объект.ВыпускПродукции.Добавить();
			
			Строка.Номенклатура 		   = СтрокаТЧ.НоменклатураВыпускаТКМ;
			Строка.Счет			 		   = СтрокаТЧ.СчетСписания; 			
			Строка.Подразделение		   = СтрокаТЧ.ПодразделениеОрганизации;
			Строка.НоменклатурнаяГруппа	   = СтрокаТЧ.НоменклатурнаяГруппа;
			Строка.ТехнологическаяОперация = СтрокаТЧ.ТехнологическаяОперация;  			
			Строка.Количество			   = СтрокаТЧ.ТКМГород;
			Строка.Сумма				   = СтрокаТЧ.ТКМГород * СтрокаТЧ.ЦенаТКМ;
			Строка.НалоговоеНазначение	   = СтрокаТЧ.НалоговоеНазначение;
			
		КонецЕсли;
		
		Если СтрокаТЧ.Расстояние - (СтрокаТЧ.ПробегСГрузом + СтрокаТЧ.ПробегСГрузомЗаГородом) > 0 Тогда
			
			Строка = Объект.ВыпускПродукции.Добавить();
			
			Строка.Номенклатура 		   = СтрокаТЧ.НоменклатураВыпускаКМ;
			Строка.Счет			 		   = СтрокаТЧ.СчетСписания; 			
			Строка.Подразделение		   = СтрокаТЧ.ПодразделениеОрганизации;
			Строка.НоменклатурнаяГруппа	   = СтрокаТЧ.НоменклатурнаяГруппа;
			Строка.ТехнологическаяОперация = СтрокаТЧ.ТехнологическаяОперация; 			
			Строка.Количество			   = СтрокаТЧ.Расстояние - (СтрокаТЧ.ПробегСГрузом + СтрокаТЧ.ПробегСГрузомЗаГородом);
			Строка.Сумма				   = (СтрокаТЧ.ТКМГород + СтрокаТЧ.ТКМЗаГородом) * СтрокаТЧ.ЦенаКМ;
			Строка.НалоговоеНазначение	   = СтрокаТЧ.НалоговоеНазначение;
			
		ИначеЕсли СтрокаТЧ.Расстояние - (СтрокаТЧ.ПробегСГрузом + СтрокаТЧ.ПробегСГрузомЗаГородом) < 0 Тогда
			ТекстСообщения = Нстр("ru=' В строке ';uk=' У рядку '") + СтрокаТЧ.НомерСтроки + Нстр("ru=': Пробег с грузом больше чем общий пробег';uk=': Пробіг з вантажем більше ніж загальний пробіг'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры	

Функция СуммаНадбавокСуммой(Объект) Экспорт
	
	СуммаНадбавок = 0;
	Для Каждого СтрокаНадбавок Из Объект.Надбавки Цикл
		Если НЕ СтрокаНадбавок.Надбавка.ВПроцентах Тогда
			СуммаНадбавок = СуммаНадбавок + СтрокаНадбавок.Размер;
		КонецЕсли;
	КонецЦикла;
	
	Возврат СуммаНадбавок;
	
КонецФункции

Функция СуммаНадбавокПроцентом(Объект) Экспорт
	
	СуммаНадбавок = 0;
	Для Каждого СтрокаНадбавок Из Объект.Надбавки Цикл
		Если СтрокаНадбавок.Надбавка.ВПроцентах Тогда
			СуммаНадбавок = СуммаНадбавок + СтрокаНадбавок.Размер;
		КонецЕсли;
	КонецЦикла;
	
	Возврат СуммаНадбавок;
		
КонецФункции

#КонецОбласти

#КонецЕсли
