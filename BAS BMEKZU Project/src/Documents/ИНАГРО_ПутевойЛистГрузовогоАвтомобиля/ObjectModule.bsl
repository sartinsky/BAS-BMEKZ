#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда  

Перем СвойстваТС Экспорт; // Хранит свойства ТС
Перем мРедактироватьАналитикуВыпускаАвтотранспорт;

#Область ОбработчикиСобытий

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	ТипДанныхЗаполнения = ТипЗнч(ДанныеЗаполнения);
		
	ЗаполнениеДокументов.Заполнить(ЭтотОбъект, ДанныеЗаполнения);	
	
	ПараметрыТехники = РегистрыСведений.ИНАГРО_УчетнаяПолитика.ПолучитьПоследнее(Дата, Новый Структура("Организация", Организация));
	
	НалоговоеНазначение  = ПараметрыТехники.НалоговоеНазначение; 
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	МассивНепроверяемыхРеквизитов = Новый Массив;
	
	Если НЕ СводныйПутевойЛист Тогда
		МассивНепроверяемыхРеквизитов.Добавить("ПутевыеЛисты.ДатаДокумента");
		МассивНепроверяемыхРеквизитов.Добавить("ПутевыеЛисты.ДатаПо"); 			
	КонецЕсли;
	
	Если НЕ Водитель.ИНАГРО_ДоговорПодряда Тогда
		МассивНепроверяемыхРеквизитов.Добавить("ДокументОснование");
	КонецЕсли;
	
	Если НЕ ВыделитьПерерасходТоплива Тогда
		МассивНепроверяемыхРеквизитов.Добавить("СчетПерерасхода");
	КонецЕсли;
	
	Если ТопливоВыданное.Количество() = 0 И ТопливоИзрасходованное.Количество() = 0 Тогда
		МассивНепроверяемыхРеквизитов.Добавить("НалоговоеНазначение");
	КонецЕсли;

	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);

КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	 	
	Если Не ЗначениеЗаполнено(ПериодРегистрации) Тогда
		ПериодРегистрации = НачалоМесяца(Дата);
	КонецЕсли;
	
	Если (ЗатратыТопливаПоФакту <= ЗатратыТопливаПоНорме) И (ВыделитьПерерасходТоплива) Тогда
		ТекстСообщения = НСтр("ru='Некорректно установлен флаг ""Выделить перерасход топлива"" - расход топлива по факту не превышает расход топлива по норме!';uk='Некоректно встановлено прапорець ""Виділити перевитрати пального"" - витрати пального фактичні не перевищують витрати пального по нормі!'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, , , Отказ);
		Отказ = Истина;
	КонецЕсли;  
	
КонецПроцедуры 

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	Перем Заголовок, СтруктураШапкиДокумента;		
	Перем ТаблицаПоПутевымЛистамДляВыполненыхТО,
		  ТаблицаПоПутевымЛистам,
		  ТаблицаПоВыпускуПродукции,
		  ТаблицаПоПутевымЛистамДляЗП,
		  ТаблицаТопливо,
		  ТаблицаТопливоСливТоплива,
		  ТаблицаТопливоИзрасходованное;
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКПроведению(ЭтотОбъект);
	Если РучнаяКорректировка Тогда
		Возврат;
	КонецЕсли; 
   	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначенияБПВызовСервера.ПредставлениеДокументаПриПроведении(Ссылка);
	
	ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента);	
	
	ПодготовитьПараметрыУчетнойПолитики(СтруктураШапкиДокумента, Отказ, Заголовок);		
	
	Если ИНАГРО_Транспорт.ПроверитьОтпускаБольничныеСотрудников(ЭтотОбъект) Тогда
		Отказ = Истина;
	КонецЕсли;
	
	СвойстваТС = РегистрыСведений.ИНАГРО_ТранспортныеСредства.ПолучитьПоследнее(Дата, Новый Структура("ОсновноеСредство", Автомобиль));	
		
	ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента,
									ТаблицаПоПутевымЛистамДляВыполненыхТО,
									ТаблицаПоПутевымЛистам, 									
									ТаблицаПоВыпускуПродукции,
									ТаблицаПоПутевымЛистамДляЗП,
									ТаблицаТопливо,
									ТаблицаТопливоСливТоплива,
									ТаблицаТопливоИзрасходованное,
									Отказ, Заголовок); 	
		
	// Движения по документу
	Если Не Отказ Тогда       
		
		ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента,
								ТаблицаПоПутевымЛистамДляВыполненыхТО,
								ТаблицаПоПутевымЛистам,								
								ТаблицаПоВыпускуПродукции,
								ТаблицаПоПутевымЛистамДляЗП,
								ТаблицаТопливо,
								ТаблицаТопливоСливТоплива,
								ТаблицаТопливоИзрасходованное,
								Отказ, Заголовок);
		
	КонецЕсли;  
	
	Движения.Хозрасчетный.ВыполнитьДействияПередЗаписьюДвижений();
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКЗаписиДвижений(ЭтотОбъект);

КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКОтменеПроведения(ЭтотОбъект);
	Движения.Записать();
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)

	Дата = НачалоДня(ОбщегоНазначения.ТекущаяДатаПользователя());
	Ответственный = Пользователи.ТекущийПользователь();

	ДокументОснование = Неопределено;
	
КонецПроцедуры

#КонецОбласти

#Область Проведение

// Процедура формирует структуру шапки документа и дополнительных полей.
//
Процедура ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента) 

	// Дерево значений, содержащее имена необходимых полей в запросе по шапке.
	Перем ДеревоПолейЗапросаПоШапке;
	
	СтруктураШапкиДокумента   = ОбщегоНазначенияРед12.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	
	// Заполним по шапке документа дерево параметров, нужных при проведении.
	ДеревоПолейЗапросаПоШапке = ОбщегоНазначенияРед12.СформироватьДеревоПолейЗапросаПоШапке();		
	
КонецПроцедуры   

// Процедура определяет параметры учетной политики
//
Процедура ПодготовитьПараметрыУчетнойПолитики(СтруктураШапкиДокумента, Отказ, Заголовок)
	
	СтруктураШапкиДокумента.Вставить("ЕстьНалогНаПрибыльДо2015", УчетнаяПолитика.ПлательщикНалогаНаПрибыльДо2015(СтруктураШапкиДокумента.Организация, СтруктураШапкиДокумента.Дата));
	СтруктураШапкиДокумента.Вставить("ЕстьНДС",                  УчетнаяПолитика.ПлательщикНДС(СтруктураШапкиДокумента.Организация, СтруктураШапкиДокумента.Дата));
	
КонецПроцедуры

// Процедура формирует таблицы документа.
//
Процедура ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента,
										ТаблицаПоПутевымЛистамДляВыполненыхТО,
										ТаблицаПоПутевымЛистам,
										ТаблицаПоВыпускуПродукции,
										ТаблицаПоПутевымЛистамДляЗП,
										ТаблицаТопливо,
										ТаблицаТопливоСливТоплива,
										ТаблицаТопливоИзрасходованное,
										Отказ, Заголовок) 	
	
	// Получим необходимые данные для проведения и проверки заполенения данные по табличной части
	// ПутевыеЛисты для регистра "ИНАГРО_ВыполненныеТехнологическиеОперации".
	СтруктураПолей = Новый Структура();
	СтруктураПростыхПолей = Новый Структура;
	
	СтруктураПолей.Вставить("ТехнологическаяОперация", "ТехнологическаяОперация");
	СтруктураПолей.Вставить("ПрицепаАгрегата",		   "Прицеп");
	СтруктураПолей.Вставить("СуммаЗП",				   "СуммаЗП");
	СтруктураПолей.Вставить("ДоплатаЗаКлассность",	   "ДоплатаЗаКлассность");
	СтруктураПолей.Вставить("СчетЗатрат",     		   "СчетСписания");
	СтруктураПолей.Вставить("Субконто1",			   "Субконто1");
	СтруктураПолей.Вставить("Субконто2",			   "Субконто2");
	СтруктураПолей.Вставить("Субконто3",			   "Субконто3");
	СтруктураПолей.Вставить("ПробегСГрузом",		   "ПробегСГрузом");
	СтруктураПолей.Вставить("ПробегСГрузомЗаГородом",  "ПробегСГрузомЗаГородом");
	СтруктураПолей.Вставить("РасстояниеОбщее",		   "Расстояние");
	СтруктураПолей.Вставить("Тоннаж",				   "Тоннаж");
	СтруктураПолей.Вставить("Часов",				   "Время");
	СтруктураПолей.Вставить("Ходок",				   "Ходок");
	
	РезультатЗапросаПоПутевымЛистамДляВыполненыхОТ = ОбщегоНазначенияРед12.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "ПутевыеЛисты", СтруктураПолей, СтруктураПростыхПолей);
	
	// Подготовим таблицу ПутевыеЛисты для проведения.
	ТаблицаПоПутевымЛистамДляВыполненыхТО = ПодготовитьТаблицуПутевыеЛистыДляВыполненыхТО(РезультатЗапросаПоПутевымЛистамДляВыполненыхОТ, СтруктураШапкиДокумента);
	
	// Получим необходимые данные для проведения и проверки заполенения данные по табличной части "ПутевыеЛисты".
	СтруктураПолей = Новый Структура();
	СтруктураПростыхПолей = Новый Структура;
	
	СтруктураПолей.Вставить("СуммаЗП",					"СуммаЗП");
	СтруктураПолей.Вставить("КорСчетСписанияБУ",     	"СчетСписания");
	СтруктураПолей.Вставить("КорСубконтоСписанияБУ1",	"Субконто1");
	СтруктураПолей.Вставить("КорСубконтоСписанияБУ2",	"Субконто2");
	СтруктураПолей.Вставить("КорСубконтоСписанияБУ3",	"Субконто3");
	СтруктураПолей.Вставить("Субконто1",                "Субконто1");
	СтруктураПолей.Вставить("Субконто2",                "Субконто2");
	СтруктураПолей.Вставить("Субконто3",                "Субконто3");
	СтруктураПолей.Вставить("НалоговоеНазначениеНовое", "НалоговоеНазначение");
	
	Если ВыделитьПерерасходТоплива И (ЗатратыТопливаПоНорме < ЗатратыТопливаПоФакту) Тогда
		СтруктураПолей.Вставить("Количество",	  "ЗатратыТопливаПоНорме");
		СтруктураПолей.Вставить("КоличествоФакт", "ЗатратыТопливаПоФакту"); 
	Иначе
		СтруктураПолей.Вставить("Количество",	  "ЗатратыТопливаПоФакту");
	КонецЕсли;
	
	РезультатЗапросаПоПутевымЛистам = ОбщегоНазначенияРед12.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "ПутевыеЛисты", СтруктураПолей, СтруктураПростыхПолей);
	
	// Подготовим таблицу ПутевыеЛисты для проведения.
	ТаблицаПоПутевымЛистам = ПодготовитьТаблицуПутевыеЛисты(РезультатЗапросаПоПутевымЛистам, СтруктураШапкиДокумента);
	
	// Проверить заполнение ТЧ .
	ПроверитьЗаполнениеТабличнойЧастиПутевыеЛисты(ТаблицаПоПутевымЛистам, СтруктураШапкиДокумента, Отказ, Заголовок);	
		
	ТаблицаПоПутевымЛистамДляЗП = ИНАГРО_Транспорт.ИНАГРО_ПодготовитьВыборкуПутевыеЛистыДляЗП_АТ(ЭтотОбъект.Ссылка);
	
	// Получим необходимые данные для проведения и проверки заполенения данные по табличной части "ТопливоВыданное".
	СтруктураПолей = Новый Структура();
	СтруктураПростыхПолей = Новый Структура;
	
	СтруктураПолей.Вставить("Номенклатура",     "Топливо");
	СтруктураПолей.Вставить("ЕдиницаИзмерения",	"ЕдиницаИзмерения");
	СтруктураПолей.Вставить("Количество",		"Количество");
	СтруктураПолей.Вставить("Склад",			"Склад");
	СтруктураПолей.Вставить("Коэффициент",		"Коэффициент");
	
	РезультатЗапросаПоТопливу = ОбщегоНазначенияРед12.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "ТопливоВыданное", СтруктураПолей, СтруктураПростыхПолей);
	
	// Подготовим таблицу Топливо для проведения.
	ТаблицаТопливо = ИНАГРО_Транспорт.ИНАГРО_ПодготовитьТаблицуТопливо(ЭтотОбъект, РезультатЗапросаПоТопливу, СтруктураШапкиДокумента, 1);
	
	// копия табл. ТаблицаТопливо для варианта СливТоплива 
	ТаблицаТопливоСливТоплива = ИНАГРО_Транспорт.ИНАГРО_ПодготовитьТаблицуТопливо(ЭтотОбъект, РезультатЗапросаПоТопливу, СтруктураШапкиДокумента);
	
	Для каждого СтрокаТаблицы Из ТаблицаТопливо Цикл
		
		Если ЗначениеЗаполнено(СтрокаТаблицы.Номенклатура) И НЕ ЗначениеЗаполнено(СтрокаТаблицы.СчетУчетаБУ) Тогда // надо ругаться
			СтрокаСообщения = Нстр("ru='В регистре сведений ""СчетаУчетаНоменклатуры"" не заполнен счет учета для номенклатуры: ';uk='У регістрі відомостей ""СчетаУчетаНоменклатуры"" не заповнен рахунок обліку для номенклатури: '") +СтрокаТаблицы.Номенклатура +
			Нстр("ru=' и склада : ';uk=' та складу : '") + СтрокаТаблицы.Склад;
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения, ЭтотОбъект, , , Отказ);
			Отказ = Истина;
		КонецЕсли;
		
	КонецЦикла; 	
		
	// Получим необходимые данные для проведения и проверки заполенения данные по табличной части "ТопливоИзрасходованное".
	СтруктураПолей = Новый Структура();
	СтруктураПростыхПолей = Новый Структура;
	
	СтруктураПолей.Вставить("Номенклатура",     "Топливо");
	СтруктураПолей.Вставить("ЕдиницаИзмерения",	"ЕдиницаИзмерения");
	СтруктураПолей.Вставить("Количество",		"Количество");
	СтруктураПолей.Вставить("Коэффициент",		"Коэффициент");
	
	РезультатЗапросаПоТопливоИзрасходованное = ОбщегоНазначенияРед12.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "ТопливоИзрасходованное", СтруктураПолей, СтруктураПростыхПолей);
	
	// Подготовим таблицу ТопливоИзрасходованное для проведения.
	ТаблицаТопливоИзрасходованное = ИНАГРО_Транспорт.ИНАГРО_ПодготовитьТаблицуТопливоИзрасходованное(ЭтотОбъект, РезультатЗапросаПоТопливоИзрасходованное, СтруктураШапкиДокумента);
	 		
	// Фактический расх. топлива по операциям и в ТЧ ТопливоИзрасходованное должно сходиться.
	Если Не Отказ Тогда
		Если НЕ(ЗатратыТопливаПоФакту = ПутевыеЛисты.Итог("ЗатратыТопливаПоФакту")) Тогда
			Отказ = Истина;
			СтрокаСообщения = НСтр("ru='Расход топлива по операциям не соответствует расходу топлива на закладке Топливо!';uk='Витрати пального по операціях не відповідає витратам пального на закладці Пальне!'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения, ЭтотОбъект, , , Отказ);
		КонецЕсли; 
	КонецЕсли; 
	
	Если Не Отказ Тогда
		Если НЕ(Начисления.Итог("Результат") = ПутевыеЛисты.Итог("СуммаЗП") + ПутевыеЛисты.Итог("ОплатаДополнительная")) Тогда
			Отказ = Истина;
			СтрокаСообщения = НСтр("ru='Сумма ЗП по операциям не соответствует сумме ЗП на закладке Начисления!';uk='Сума ЗП по операціях не відповідає сумі ЗП на закладці Нарахування!'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения, ЭтотОбъект, , , Отказ);
		КонецЕсли; 
	КонецЕсли; 
	
	// Подготовим таблицу ТаблицаПоВыпускуПродукции для проведения.
	// Если допустима корректировка аналитики выпуска - ТаблицаПоВыпускуПродукции
	// Готовится по ТЧ ВыпускПродукции, иначе по ТЧ ПутевыеЛисты
	// Всегда ТаблицаПоВыпускуПродукции будет готовиться по ТЧ ВыпускПродукции.
	
	мРедактироватьАналитикуВыпускаАвтотранспорт = РегистрыСведений.ИНАГРО_УчетнаяПолитика.ПолучитьПоследнее(Дата, Новый Структура("Организация", Организация)).РедактироватьАналитикуВыпускаАвтотранспорт;
	
	Если ЗначениеЗаполнено(мРедактироватьАналитикуВыпускаАвтотранспорт) И НЕ мРедактироватьАналитикуВыпускаАвтотранспорт Тогда 
		
		Попытка 
			ЭтотОбъект.Записать(РежимЗаписиДокумента.Запись);
		Исключение
			ТекстСообщения = НСтр("ru='Не удалось записать документ ';uk='Не вдалося записати документ '");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецПопытки;
		
		Документы.ИНАГРО_ПутевойЛистГрузовогоАвтомобиля.ЗаполнитьТЧВыпускПродукции(ЭтотОбъект); 
		
	КонецЕсли; 	
	
	ТаблицаПоВыпускуПродукции = ВыпускПродукции.Выгрузить();
	
	ТаблицаПоВыпускуПродукции.Колонки.Добавить("Период");
	ТаблицаПоВыпускуПродукции.Колонки.Добавить("Организация");
	ТаблицаПоВыпускуПродукции.Колонки.Добавить("ДокументВыпуска");
	
	ТаблицаПоВыпускуПродукции.ЗаполнитьЗначения(СтруктураШапкиДокумента.Дата,        "Период");
	ТаблицаПоВыпускуПродукции.ЗаполнитьЗначения(СтруктураШапкиДокумента.Организация, "Организация");
	ТаблицаПоВыпускуПродукции.ЗаполнитьЗначения(СтруктураШапкиДокумента.Ссылка,      "ДокументВыпуска");		
	
КонецПроцедуры

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТоварам - результат запроса по табличной части "Товары",
//  СтруктураШапкиДокумента   - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблиица значений.
//
Функция ПодготовитьТаблицуПутевыеЛисты(РезультатЗапросаПоПутевымЛистам, СтруктураШапкиДокумента)
	
	ТаблицаПутевыеЛисты = ИНАГРО_Транспорт.ИНАГРО_ПодготовитьТаблицуПутевыеЛисты_АТ(РезультатЗапросаПоПутевымЛистам, СтруктураШапкиДокумента);
	
	ТаблицаПутевыеЛисты.Колонки.Добавить("ДокументОприходования");
	ТаблицаПутевыеЛисты.Колонки.Добавить("Регистратор");
	ТаблицаПутевыеЛисты.Колонки.Добавить("Организация");
	ТаблицаПутевыеЛисты.Колонки.Добавить("Контрагент");
	ТаблицаПутевыеЛисты.Колонки.Добавить("ДоговорКонтрагента");	
	ТаблицаПутевыеЛисты.Колонки.Добавить("ВидНалоговойДеятельности");
	ТаблицаПутевыеЛисты.Колонки.Добавить("НалоговоеНазначение");
		
	ТаблицаПутевыеЛисты.ЗаполнитьЗначения(ЭтотОбъект,						           "Регистратор");
	ТаблицаПутевыеЛисты.ЗаполнитьЗначения(СтруктураШапкиДокумента.Организация,         "Организация");	
	ТаблицаПутевыеЛисты.ЗаполнитьЗначения(СтруктураШапкиДокумента.НалоговоеНазначение, "НалоговоеНазначение");

	ТаблицаПутевыеЛисты.ЗаполнитьЗначения(СтруктураШапкиДокумента.НалоговоеНазначение.ВидНалоговойДеятельности,	"ВидНалоговойДеятельности");
	
	Возврат ТаблицаПутевыеЛисты;
	
КонецФункции 

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТоварам - результат запроса по табличной части "Товары",
//  СтруктураШапкиДокумента   - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблиица значений.
//
Функция ПодготовитьТаблицуПутевыеЛистыДляВыполненыхТО(РезультатЗапросаПоПутевымЛистам, СтруктураШапкиДокумента)
	
	ТаблицаПутевыеЛисты = РезультатЗапросаПоПутевымЛистам.Выгрузить();
	
	ТаблицаПутевыеЛисты.Колонки.Добавить("Организация");
	ТаблицаПутевыеЛисты.Колонки.Добавить("ТранспортноеСредство");
	ТаблицаПутевыеЛисты.Колонки.Добавить("Подразделение");
	ТаблицаПутевыеЛисты.Колонки.Добавить("НоменклатурнаяГруппа");
	ТаблицаПутевыеЛисты.Колонки.Добавить("СтатьяЗатрат");
	ТаблицаПутевыеЛисты.Колонки.Добавить("ТонноКилометры");
	
	ТаблицаПутевыеЛисты.ЗаполнитьЗначения(СтруктураШапкиДокумента.Организация, "Организация");
	ТаблицаПутевыеЛисты.ЗаполнитьЗначения(СтруктураШапкиДокумента.Автомобиль,  "ТранспортноеСредство");
	
	Для Каждого СтрокаТЧ Из ТаблицаПутевыеЛисты Цикл
		
		// заполним подразделение
		Если ТипЗнч(СтрокаТЧ.Субконто1) = Тип("СправочникСсылка.ПодразделенияОрганизаций") Тогда
			СтрокаТЧ.Подразделение = СтрокаТЧ.Субконто1;
		ИначеЕсли ТипЗнч(СтрокаТЧ.Субконто2) = Тип("СправочникСсылка.ПодразделенияОрганизаций") Тогда
			СтрокаТЧ.Подразделение = СтрокаТЧ.Субконто2;
		ИначеЕсли ТипЗнч(СтрокаТЧ.Субконто3) = Тип("СправочникСсылка.ПодразделенияОрганизаций") Тогда
			СтрокаТЧ.Подразделение = СтрокаТЧ.Субконто3;
		КонецЕсли;
		
		// заполним НоменклатурныеГруппы
		Если ТипЗнч(СтрокаТЧ.Субконто1) = Тип("СправочникСсылка.НоменклатурныеГруппы") Тогда
			СтрокаТЧ.НоменклатурнаяГруппа = СтрокаТЧ.Субконто1;
		ИначеЕсли ТипЗнч(СтрокаТЧ.Субконто2) = Тип("СправочникСсылка.НоменклатурныеГруппы") Тогда
			СтрокаТЧ.НоменклатурнаяГруппа = СтрокаТЧ.Субконто2;
		ИначеЕсли ТипЗнч(СтрокаТЧ.Субконто3) = Тип("СправочникСсылка.НоменклатурныеГруппы") Тогда
			СтрокаТЧ.НоменклатурнаяГруппа = СтрокаТЧ.Субконто3;
		КонецЕсли;
		
		// заполним СтатьиЗатрат
		Если ТипЗнч(СтрокаТЧ.Субконто1) = Тип("СправочникСсылка.СтатьиЗатрат") Тогда
			СтрокаТЧ.СтатьяЗатрат = СтрокаТЧ.Субконто1;
		ИначеЕсли ТипЗнч(СтрокаТЧ.Субконто2) = Тип("СправочникСсылка.СтатьиЗатрат") Тогда
			СтрокаТЧ.СтатьяЗатрат = СтрокаТЧ.Субконто2;
		ИначеЕсли ТипЗнч(СтрокаТЧ.Субконто3) = Тип("СправочникСсылка.СтатьиЗатрат") Тогда
			СтрокаТЧ.СтатьяЗатрат = СтрокаТЧ.Субконто3;
		КонецЕсли;
		
		СтрокаТЧ.ПробегСГрузом  = СтрокаТЧ.ПробегСГрузом + СтрокаТЧ.ПробегСГрузомЗаГородом;
		СтрокаТЧ.ТонноКилометры = СтрокаТЧ.Тоннаж * СтрокаТЧ.ПробегСГрузом / СтрокаТЧ.Ходок;		
		СтрокаТЧ.СуммаЗП        = СтрокаТЧ.СуммаЗП + СтрокаТЧ.ДоплатаЗаКлассность;
		
	КонецЦикла;
	
	Возврат ТаблицаПутевыеЛисты;
	
КонецФункции

Функция СформироватьЗапросПоНачислениям()

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументСсылка" , Ссылка);
	Запрос.УстановитьПараметр("парамСписокПочасовыхОтклонений", ИНАГРО_ПроведениеРасчетов.ПолучитьСписокНачисленийПочасовыхОтклонений());
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СтрокиНачисления.Ссылка.Организация,
	|	СтрокиНачисления.Ссылка.ПериодРегистрации,
	|	СтрокиНачисления.НомерСтроки,  
	|	СтрокиНачисления.Авторасчет,
	|   ЗНАЧЕНИЕ(Перечисление.КодыОперацийВзаиморасчетыСРаботникамиОрганизаций.Начисления) КАК КодОперации,
	|
	|	СтрокиНачисления.Сотрудник,
	|	СтрокиНачисления.Сотрудник.ФизическоеЛицо КАК ФизическоеЛицо,
	|	СтрокиНачисления.Назначение,
	|	СтрокиНачисления.ВидРасчета,
	|	СтрокиНачисления.ВидРасчета.СпособРасчета		КАК СпособРасчета,
    |
	|	КОНЕЦПЕРИОДА(СтрокиНачисления.Ссылка.ПериодРегистрации, МЕСЯЦ)	КАК Период,
	|	СтрокиНачисления.Ссылка.ПериодРегистрации						КАК ПериодВзаиморасчетов,
	|	СтрокиНачисления.ВидРасчета.СчетУчета			КАК СчетУчета,
	|	СтрокиНачисления.Результат						КАК СуммаВзаиморасчетов,
	|
	|	СтрокиНачисления.ДатаНачала,
	|	СтрокиНачисления.ДатаОкончания,
	|	СтрокиНачисления.БазовыйПериодНачало,
	|	СтрокиНачисления.БазовыйПериодКонец,
	|	СтрокиНачисления.ДатаНачала			КАК ПериодДействияНачало,
	|	СтрокиНачисления.ДатаОкончания		КАК ПериодДействияКонец,
	|
	|	СтрокиНачисления.Результат,
	|	СтрокиНачисления.ОплаченоДнейЧасов,
	|	СтрокиНачисления.ОтработаноДней,
	|	СтрокиНачисления.ОтработаноЧасов,
	|	СтрокиНачисления.НормаДней,
	|	СтрокиНачисления.НормаЧасов,
	|	СтрокиНачисления.КалендарныеДни,
	|
	|	СтрокиНачисления.ПодразделениеОрганизации,
	|	СтрокиНачисления.ПодразделениеОрганизации КАК Подразделение,
	|	СтрокиНачисления.ГрафикРаботы,
	|   ВЫБОР	КОГДА СтрокиНачисления.ГрафикРаботы ССЫЛКА Справочник.ИНАГРО_ГрафикиРаботы
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка)
	|			ИНАЧЕ СтрокиНачисления.Сотрудник
	|	КОНЕЦ						КАК ГрафикРаботыСотрудник,
	|	СтрокиНачисления.ГрафикРаботы.СуммированныйУчетРабочегоВремени КАК СуммированныйУчетРабочегоВремени,
	|	СтрокиНачисления.ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени КАК ВидИспользованияРабочегоВремени, 
	|	СтрокиНачисления.Показатель1,
	|	СтрокиНачисления.Показатель2,
	|	СтрокиНачисления.Показатель3,
	|	СтрокиНачисления.НормаЧасовЗаМесяц,
	|	СтрокиНачисления.НормаДнейЗаМесяц,
	|	СтрокиНачисления.ВидУчетаВремениДляСредней,
	|	СтрокиНачисления.СпособОтраженияВБухучете,
	|	СтрокиНачисления.ДокументОснование,
	|	СтрокиНачисления.Сторно
	|
	|ИЗ Документ."+Ссылка.Метаданные().Имя+".Начисления КАК СтрокиНачисления
	|
	|ГДЕ СтрокиНачисления.Ссылка = &ДокументСсылка
	|";

	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоНачислениям()

Функция СформироватьЗапросПоОтражениюПроводки() Экспорт
	
	Записать();  // запишем документ
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("парамРегистратор", Ссылка);
	ПарамТех = РегистрыСведений.ИНАГРО_УчетнаяПолитика.ПолучитьПоследнее(Дата, Новый Структура("Организация", Организация));
	СтатьяЗатаратЗП = ПарамТех.СтатьяЗатратРаботы;
	Запрос.УстановитьПараметр("СтатьяЗатрат", СтатьяЗатаратЗП);
	
	ТекстЗапроса  = "ВЫБРАТЬ
	                |	ЗНАЧЕНИЕ(ПланВидовРасчета.ИНАГРО_Отражение.Начисление) КАК ВидРасчета,
	                |	Основной.Ссылка.ПериодРегистрации КАК ПериодРегистрации,
	                |	Основной.БазовыйПериодНачало КАК БазовыйПериодНачало,
	                |	Основной.БазовыйПериодКонец КАК БазовыйПериодКонец,
	                |	NULL КАК ПериодСтавки,
	                |	Основной.Ссылка.Организация КАК Организация,
	                |	Основной.Сотрудник КАК Сотрудник,
	                |	Основной.ВидРасчета КАК ВидРасчетаБазы,
	                |	NULL КАК Налог,
	                |	NULL КАК ВзносыОсновногоНачисления,
	                |	NULL КАК СпособОтраженияЕСВФОТ,
	                |	Основной.НомерСтроки,
	                |	Основной.НалоговоеНазначениеЗатрат КАК НалоговоеНазначениеДоходовИЗатрат,
	                |	Основной.НалоговоеНазначениеЗатрат КАК НалоговоеНазначение,
	                |	Основной.СчетДТ,
	                |	ВЫБОР
	                |		КОГДА Основной.Субконто1 ССЫЛКА Справочник.СтатьиЗатрат
	                |			ТОГДА ВЫБОР
	                |					КОГДА Основной.СтатьяЗатратЗП = ЗНАЧЕНИЕ(Справочник.СтатьиЗатрат.ПустаяСсылка)
	                |						ТОГДА &СтатьяЗатрат
	                |					ИНАЧЕ Основной.СтатьяЗатратЗП
	                |				КОНЕЦ
	                |		ИНАЧЕ Основной.Субконто1
	                |	КОНЕЦ КАК СубконтоДт1,
	                |	ВЫБОР
	                |		КОГДА Основной.Субконто2 ССЫЛКА Справочник.СтатьиЗатрат
	                |			ТОГДА ВЫБОР
	                |					КОГДА Основной.СтатьяЗатратЗП = ЗНАЧЕНИЕ(Справочник.СтатьиЗатрат.ПустаяСсылка)
	                |						ТОГДА &СтатьяЗатрат
	                |					ИНАЧЕ Основной.СтатьяЗатратЗП
	                |				КОНЕЦ
	                |		ИНАЧЕ Основной.Субконто2
	                |	КОНЕЦ КАК СубконтоДт2,
	                |	ВЫБОР
	                |		КОГДА Основной.Субконто3 ССЫЛКА Справочник.СтатьиЗатрат
	                |			ТОГДА ВЫБОР
	                |					КОГДА Основной.СтатьяЗатратЗП = ЗНАЧЕНИЕ(Справочник.СтатьиЗатрат.ПустаяСсылка)
	                |						ТОГДА &СтатьяЗатрат
	                |					ИНАЧЕ Основной.СтатьяЗатратЗП
	                |				КОНЕЦ
	                |		ИНАЧЕ Основной.Субконто3
	                |	КОНЕЦ КАК СубконтоДт3,
	                |	Основной.ВидРасчета.СчетУчета КАК СчетКт,
	                |	Основной.Сотрудник КАК СубконтоКт1,
	                |	Основной.Результат,
	                |	Основной.ВидРасчета.ДоходНДФЛ КАК ДоходНДФЛ,
	                |	ВЫБОР
	                |		КОГДА Основной.СтатьяЗатратЗП = ЗНАЧЕНИЕ(Справочник.СтатьиЗатрат.ПустаяСсылка)
	                |			ТОГДА &СтатьяЗатрат
	                |		ИНАЧЕ Основной.СтатьяЗатратЗП
	                |	КОНЕЦ КАК СтатьяЗатрат
	                |ИЗ
	                |	Документ.ИНАГРО_ПутевойЛистГрузовогоАвтомобиля.Начисления КАК Основной
	                |ГДЕ
	                |	Основной.Ссылка = &парамРегистратор";
	
	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос.Выполнить();
	
КонецФункции  // АвтозаполнениеПроводок

// Проверяет правильность заполнения строк табличной части "ПутевыеЛисты".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТоварам        - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиПутевыеЛисты(ТаблицаПоПутевымЛистам, СтруктураШапкиДокумента, Отказ, Заголовок) 	
		
	Если СводныйПутевойЛист Тогда
		
		Для каждого Стр Из ПутевыеЛисты Цикл
			Если Стр.ДатаДокумента < ПериодРегистрации ИЛИ Стр.ДатаПо > КонецМесяца(ПериодРегистрации) Тогда
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Строка %1: Тех.операция должна быть в пределах одного месяца!';uk='Рядок %1: Тех.операція повинна бути в межах одного місяця!'"),Стр.НомерСтроки);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, , , Отказ); 
				Отказ = Истина;	
			КонецЕсли;
		КонецЦикла; 
		
	КонецЕсли; 	
		
	СуммаОтработаноДней = ПутевыеЛисты.Итог("ОтработаноДней"); 
	СуммаВремя          = ПутевыеЛисты.Итог("Время");
	
	Если СуммаВремя > 0 Тогда
		СуммаОтработаноДнейВЧасах = ?(СуммаОтработаноДней = 0,1,СуммаОтработаноДней)* 24;
		Если СуммаВремя > СуммаОтработаноДнейВЧасах Тогда
			СтрокаНачалаСообщенияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Показатель Всего часов превышает ""%1"" час.';uk='Показник Всього годин перевищує ""%1"" год.'"), СуммаОтработаноДнейВЧасах); 
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаНачалаСообщенияОбОшибке, ЭтотОбъект, , , Отказ); 			
		КонецЕсли; 
	КонецЕсли;
	
КонецПроцедуры  

Процедура ПроверитьЗаполнениеСтрокиНачисления(ВыборкаПоСтрокамДокумента, Отказ, Заголовок = "")

	СтрокаНачалаСообщенияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='В строке номер ""%1"" табл. части ""Начисления"": ';uk='У рядку номер ""%1"" табл. частини ""Нарахування"": '"), СокрЛП(ВыборкаПоСтрокамДокумента.НомерСтроки));
	
	// Сотрудник
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.Сотрудник) Тогда
		ОбщегоНазначенияБПКлиентСервер.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + НСтр("ru='не выбран сотрудник!';uk='не обраний співробітник!'"), Отказ, Заголовок);
	КонецЕсли;
	
	// ВидРасчета
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ВидРасчета) Тогда
		ОбщегоНазначенияБПКлиентСервер.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + НСтр("ru='не указан вид расчета!';uk='не зазначений вид розрахунку!'"), Отказ, Заголовок);
	КонецЕсли;

	// Дата начала
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ДатаНачала) Тогда
		ОбщегоНазначенияБПКлиентСервер.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + НСтр("ru='не указана дата начала начисления!';uk='не зазначена дата початку нарахування!'"), Отказ, Заголовок);
	КонецЕсли;

	// Дата окончания
	Если Не ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ДатаОкончания) Тогда
		ОбщегоНазначенияБПКлиентСервер.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + НСтр("ru='не указана дата окончания начисления!';uk='не зазначена дата закінчення нарахування!'"), Отказ, Заголовок);
	КонецЕсли;
	
	Если ВыборкаПоСтрокамДокумента.ДатаНачала < ПериодРегистрации ИЛИ ВыборкаПоСтрокамДокумента.ДатаОкончания > КонецМесяца(ПериодРегистрации) Тогда
		ОбщегоНазначенияБПКлиентСервер.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + НСтр("ru='даты начисления должны быть в пределах одного месяца!';uk='дати нарахування повинні бути в межах одного місяця!'"), Отказ, Заголовок);
	КонецЕсли;
	
	// БазовыйПериодНачало
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.БазовыйПериодНачало) Тогда
		ОбщегоНазначенияБПКлиентСервер.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + НСтр("ru='не указана дата начала базового периода начисления!';uk='не зазначена дата початку базового періоду нарахування!'"), Отказ, Заголовок);
	КонецЕсли;

	// БазовыйПериодКонец
	Если Не ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.БазовыйПериодКонец) Тогда
		ОбщегоНазначенияБПКлиентСервер.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + НСтр("ru='не указана дата окончания базового периода начисления!';uk='не зазначена дата закінчення базового періоду нарахування!'"), Отказ, Заголовок);
	КонецЕсли;
	
	Если ВыборкаПоСтрокамДокумента.БазовыйПериодНачало < ПериодРегистрации ИЛИ ВыборкаПоСтрокамДокумента.БазовыйПериодКонец > КонецМесяца(ПериодРегистрации) Тогда
		ОбщегоНазначенияБПКлиентСервер.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + НСтр("ru='даты базового периода начисления должны быть в пределах одного месяца!';uk='дати базового періоду нарахування повинні бути в межах одного місяця!'"), Отказ, Заголовок);
	КонецЕсли;
	
	// ГрафикРаботы
	Если Не ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ГрафикРаботы) И Не ВыборкаПоСтрокамДокумента.Назначение.ИНАГРО_ДоговорПодряда Тогда
		ОбщегоНазначенияБПКлиентСервер.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + НСтр("ru='не указан график работы!';uk='не вказано графік роботи!'"), Отказ, Заголовок);
	КонецЕсли;


КонецПроцедуры // ПроверитьЗаполнениеСтрокиНачисления()

// Процедура выполняет движения по регистрам
//
Процедура ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, 
									ТаблицаПоПутевымЛистамДляВыполненыхТО,
									ТаблицаПоПутевымЛистам,
									ТаблицаПоВыпускуПродукции,
									ТаблицаПоПутевымЛистамДляЗП,
									ТаблицаТопливо,
									ТаблицаТопливоСливТоплива,
									ТаблицаТопливоИзрасходованное,
									Отказ, Заголовок)
	
	ИНАГРО_Транспорт.ИНАГРО_ДвиженияПоТопливу(ЭтотОбъект, СтруктураШапкиДокумента,
												ТаблицаПоПутевымЛистам, 
												ТаблицаТопливо,
												ТаблицаПоВыпускуПродукции, 
												ТаблицаТопливоСливТоплива,
												Отказ, Заголовок);
		
	Если ИНАГРО_ОбщийВызовСервераПовтИсп.ЕстьБСПУ() Тогда
		КопияТаблицаТопливо = ТаблицаТопливо.Скопировать();
		КопияТаблицаТопливо.Колонки.Добавить("НаправлениеДвижения");
		КопияТаблицаТопливо.ЗаполнитьЗначения(Справочники.ИНАГРО_ВидыДвиженийВедомости.Перемещение, "НаправлениеДвижения");
		ИНАГРО_Общий.ИНАГРО_ВедомостьДвиженийРасход(Движения, КопияТаблицаТопливо, СтруктураШапкиДокумента);
		
		КопияТаблицаТопливо.Колонки.Склад.Имя = "СкладСтарый";
		КопияТаблицаТопливо.Колонки.СкладНовый.Имя = "Склад";
		ИНАГРО_Общий.ИНАГРО_ВедомостьДвиженийПриход(Движения, КопияТаблицаТопливо, СтруктураШапкиДокумента);
		
		КопияТаблицаТопливоИзрасходовано = ТаблицаТопливоИзрасходованное.Скопировать();
		КопияТаблицаТопливоИзрасходовано.Колонки.Добавить("НаправлениеДвижения");
		КопияТаблицаТопливоИзрасходовано.ЗаполнитьЗначения(Справочники.ИНАГРО_ВидыДвиженийВедомости.ВПроизводство, "НаправлениеДвижения");
		ИНАГРО_Общий.ИНАГРО_ВедомостьДвиженийРасход(Движения, КопияТаблицаТопливоИзрасходовано, СтруктураШапкиДокумента);
	КонецЕсли;	
	
	// Основные Начисления
	ВыборкаПоНачислениям = СформироватьЗапросПоНачислениям().Выбрать();
	Пока ВыборкаПоНачислениям.Следующий() Цикл 
		
		ПроверитьЗаполнениеСтрокиНачисления(ВыборкаПоНачислениям, Отказ);
		Если НЕ Отказ Тогда
			ДобавитьСтрокуОсновныхНачислений(ВыборкаПоНачислениям, Движения.ИНАГРО_Начисления);
			ДобавитьСтрокуВДвиженияПоРегистрамНакопления(ВыборкаПоНачислениям)
		КонецЕсли;
		
	КонецЦикла;
	
	// По регистру расчета ОтражениеЗарплатыОрганизацийВРеглУчете
	Выборка = СформироватьЗапросПоОтражениюПроводки().Выбрать();
	Пока Выборка.Следующий() Цикл 
		
		Если НЕ Отказ Тогда
			ДобавитьСтрокуОтражений(Выборка, Движения.ИНАГРО_Отражение);
		КонецЕсли;
	КонецЦикла;
		
	
	ИНАГРО_Общий.ИНАГРО_ДвиженияЗатратыОрганизации_Приход(СтруктураШапкиДокумента, Движения);
	
	мРедактироватьАналитикуВыпускаАвтотранспорт = РегистрыСведений.ИНАГРО_УчетнаяПолитика.ПолучитьПоследнее(Дата, Новый Структура("Организация", Организация)).РедактироватьАналитикуВыпускаАвтотранспорт;
	
	Движения.ИНАГРО_ВыпускПродукцииОрганизации.Загрузить(ТаблицаПоВыпускуПродукции);
		
	НаборДвижений = Движения.ИНАГРО_ВыполненныеТехнологическиеОперации;
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	
	ОбщегоНазначенияБПВызовСервера.ЗагрузитьВТаблицуЗначений(ТаблицаПоПутевымЛистамДляВыполненыхТО, ТаблицаДвижений);
	
	НаборДвижений.мПериод          = СтруктураШапкиДокумента.Дата;
	НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;
	
	Если Не Отказ Тогда
		НаборДвижений.ВыполнитьДвижение();
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьСтрокуОсновныхНачислений(Выборка, НаборЗаписей)
	
	Движение = НаборЗаписей.Добавить();
	ЗаполнитьЗначенияСвойств(Движение, Выборка);
	
 	Движение.ВидУчетаВремени = ИНАГРО_ПроведениеРасчетов.ПолучитьВидУчетаВремени(Выборка.ВидРасчета, Выборка.СуммированныйУчетРабочегоВремени,Движение.ВидУчетаВремениДляСредней);

КонецПроцедуры // ДобавитьСтрокуОсновныхНачислений

Процедура ДобавитьСтрокуВДвиженияПоРегистрамНакопления(ВыборкаПоСтрокамДокумента)
	
	Движение = Движения.ВзаиморасчетыССотрудниками.Добавить();
	ЗаполнитьЗначенияСвойств(Движение, ВыборкаПоСтрокамДокумента);
	
	Движение.ВидДвижения			= ВидДвиженияНакопления.Приход;

КонецПроцедуры // ДобавитьСтрокуВДвиженияПоРегистрамНакопления()

Процедура ДобавитьСтрокуОтражений( ВыборкаПоСтрокамДокумента, НаборЗаписей )
	
	Движение = НаборЗаписей.Добавить();
	ЗаполнитьЗначенияСвойств(Движение, ВыборкаПоСтрокамДокумента);

КонецПроцедуры // ДобавитьСтрокуНачислений()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции	

Процедура АвтозаполнениеНачисления() Экспорт
	
	Если Водитель.ИНАГРО_ДоговорПодряда Тогда
		ВидРасчетаПЛ = Константы.ИНАГРО_ВидРасчетаПутевыеЛистыГПХ.Получить();
		ВидРасчетаДоплатаЗаКлассность = Константы.ИНАГРО_ВидРасчетаДоплатаЗаКлассностьГПХ.Получить();
		ВидРасчетаОплатаДополнительная = Константы.ИНАГРО_ВидРасчетаДопЗарплатыГПХ.Получить();
	Иначе
		ВидРасчетаПЛ = ПланыВидовРасчета.ИНАГРО_Начисления.ПутевыеЛисты;
	    ВидРасчетаДоплатаЗаКлассность = ПланыВидовРасчета.ИНАГРО_Начисления.ДоплатаЗаКлассность;
		ВидРасчетаОплатаДополнительная = Константы.ИНАГРО_ВидРасчетаДопЗарплаты.Получить();
	КонецЕсли;	
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("парамРегистратор",	Ссылка);
	Запрос.УстановитьПараметр("ДатаНачалаСобытия",	Дата);
	Запрос.УстановитьПараметр("парамСотрудник",		Водитель);
	Запрос.УстановитьПараметр("парамПустойСотрудник",Справочники.Сотрудники.ПустаяСсылка());
	
	ТекстЗапроса = "ВЫБРАТЬ
	               |	ИНАГРО_ПутевойЛистГрузовогоАвтомобиля.Дата,
	               |	НАЧАЛОПЕРИОДА(ИНАГРО_ПутевойЛистГрузовогоАвтомобиля.Дата, МЕСЯЦ) КАК БазовыйПериодНачало,
	               |	ИНАГРО_ПутевойЛистГрузовогоАвтомобиля.Организация,
	               |	ИНАГРО_ПутевойЛистГрузовогоАвтомобиля.Ссылка,
	               |	ВЫБОР
	               |		КОГДА ИНАГРО_ПутевойЛистГрузовогоАвтомобиля.Водитель.ОсновноеНазначение <> &ПарамПустойСотрудник
	               |			ТОГДА ИНАГРО_ПутевойЛистГрузовогоАвтомобиля.Водитель.ОсновноеНазначение
	               |		ИНАЧЕ ИНАГРО_ПутевойЛистГрузовогоАвтомобиля.Водитель
	               |	КОНЕЦ КАК Сотрудник,
	               |	ИНАГРО_ПутевойЛистГрузовогоАвтомобиля.Водитель КАК Назначение,
	               |	ВЫБОР
	               |		КОГДА ИНАГРО_ПутевойЛистГрузовогоАвтомобиля.СводныйПутевойЛист
	               |			ТОГДА Основной.ДатаДокумента
	               |		ИНАЧЕ ИНАГРО_ПутевойЛистГрузовогоАвтомобиля.Дата
	               |	КОНЕЦ КАК ДатаНачала,
	               |	ВЫБОР
	               |		КОГДА ИНАГРО_ПутевойЛистГрузовогоАвтомобиля.СводныйПутевойЛист
	               |			ТОГДА Основной.ДатаПо
	               |		ИНАЧЕ ИНАГРО_ПутевойЛистГрузовогоАвтомобиля.Дата
	               |	КОНЕЦ КАК ДатаОкончания,
	               |	ВЫБОР
	               |		КОГДА ИНАГРО_ПутевойЛистГрузовогоАвтомобиля.Водитель.ИНАГРО_ДоговорПодряда
	               |			ТОГДА ИНАГРО_ПутевойЛистГрузовогоАвтомобиля.ДокументОснование.ПодразделениеОрганизации
	               |		ИНАЧЕ Работники.ПодразделениеОрганизации
	               |	КОНЕЦ КАК ПодразделениеОрганизации,
	               |	Основной.СтатьяЗатратЗП,
	               |	ЕСТЬNULL(Основной.ДоплатаЗаКлассность, 0) КАК ДоплатаЗаКлассность,
	               |	ЕСТЬNULL(Основной.СуммаЗП, 0) КАК СуммаЗП,
	               |	ЕСТЬNULL(Основной.ОплатаДополнительная, 0) - ЕСТЬNULL(Основной.ДоплатаЗаКлассность, 0) КАК ОплатаДополнительная,
	               |	Работники.ГрафикРаботы,
	               |	ИНАГРО_ПутевойЛистГрузовогоАвтомобиля.ДокументОснование,
	               |	Основной.ОтработаноДней,
	               |	Основной.Время КАК ОтработаноЧасов,
	               |	Основной.СчетСписания КАК СчетДТ,
	               |	Основной.Субконто1,
	               |	Основной.Субконто2,
	               |	Основной.Субконто3,
	               |	Основной.НалоговоеНазначение КАК НалоговоеНазначениеЗатрат
	               |ИЗ
	               |	Документ.ИНАГРО_ПутевойЛистГрузовогоАвтомобиля.ПутевыеЛисты КАК Основной
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИНАГРО_РаботникиОрганизаций.СрезПоследних(&ДатаНачалаСобытия, Сотрудник = &парамСотрудник) КАК Работники
	               |		ПО (ИСТИНА)
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ИНАГРО_ПутевойЛистГрузовогоАвтомобиля КАК ИНАГРО_ПутевойЛистГрузовогоАвтомобиля
	               |		ПО Основной.Ссылка = ИНАГРО_ПутевойЛистГрузовогоАвтомобиля.Ссылка
	               |ГДЕ
	               |	ЕСТЬNULL(Работники.ЗанимаемыхСтавок, 1) > 0
	               |	И Основной.Ссылка = &парамРегистратор";
	
	
	
	Запрос.Текст = ТекстЗапроса;

	Выборка = Запрос.Выполнить().Выбрать();
	
	// каждый цикл это назначение
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.СуммаЗП <> 0 Тогда
			// строка движений
			НоваяСтрока = Начисления.Добавить();
			Если Водитель.ИНАГРО_ДоговорПодряда Тогда
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка,,"ОтработаноДней, ОтработаноЧасов, ОтработаноДней");
			Иначе
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
			КонецЕсли;
			
			// Свойства
			НоваяСтрока.Авторасчет			= Истина;
			НоваяСтрока.БазовыйПериодКонец	= КонецМесяца(Выборка.БазовыйПериодНачало);
			НоваяСтрока.ВидРасчета			= ВидРасчетаПЛ;
			
			// Измерения
			НоваяСтрока.СпособОтраженияВБухучете = Справочники.СпособыОтраженияЗарплатыВРеглУчете.НеОтражатьВБухучете;
			ИНАГРО_ПроведениеРасчетов.ПроставитьДанныеСтроки(Выборка.Сотрудник, Выборка.Назначение, НоваяСтрока.ДатаНачала, Ссылка, НоваяСтрока);
			// Реквизиты
			НоваяСтрока.Показатель1			= Выборка.СуммаЗП;
			Если Водитель.ИНАГРО_ДоговорПодряда Тогда
				НоваяСтрока.ДокументОснование   = ДокументОснование;
			Иначе
				НоваяСтрока.ОплаченоДнейЧасов	= Выборка.ОтработаноДней;
			КонецЕсли;
		КонецЕсли;
				
		Если  Выборка.ДоплатаЗаКлассность <> 0 Тогда
		
			// строка движений
			НоваяСтрока = Начисления.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,Выборка,,"ОтработаноДней, ОтработаноЧасов, ОтработаноДней");
			
			// Свойства
			НоваяСтрока.Авторасчет			= Истина;
			НоваяСтрока.БазовыйПериодКонец	= КонецМесяца(Выборка.БазовыйПериодНачало);
			НоваяСтрока.ВидРасчета			= ВидРасчетаДоплатаЗаКлассность;
			
			// Измерения
			НоваяСтрока.СпособОтраженияВБухучете = Справочники.СпособыОтраженияЗарплатыВРеглУчете.НеОтражатьВБухучете;
			ИНАГРО_ПроведениеРасчетов.ПроставитьДанныеСтроки(Выборка.Сотрудник, Выборка.Назначение, НоваяСтрока.ДатаНачала, Ссылка, НоваяСтрока);
			// Реквизиты
			НоваяСтрока.Показатель1			= Выборка.ДоплатаЗаКлассность;
			
			Если Водитель.ИНАГРО_ДоговорПодряда Тогда
				НоваяСтрока.ДокументОснование   = ДокументОснование;
			КонецЕсли;
		
		КонецЕсли;
		
		Если  Выборка.ОплатаДополнительная <> 0 Тогда
		
			// строка движений
			НоваяСтрока = Начисления.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,Выборка,,"ОтработаноДней, ОтработаноЧасов, ОтработаноДней");
			
			// Свойства
			НоваяСтрока.Авторасчет			= Истина;
			НоваяСтрока.БазовыйПериодКонец	= КонецМесяца(Выборка.БазовыйПериодНачало);
			НоваяСтрока.ВидРасчета			= ?(ЗначениеЗаполнено(ВидРасчетаОплатаДополнительная), ВидРасчетаОплатаДополнительная, ВидРасчетаПЛ);
			// Измерения
			НоваяСтрока.СпособОтраженияВБухучете = Справочники.СпособыОтраженияЗарплатыВРеглУчете.НеОтражатьВБухучете;
			ИНАГРО_ПроведениеРасчетов.ПроставитьДанныеСтроки(Выборка.Сотрудник, Выборка.Назначение, НоваяСтрока.ДатаНачала, Ссылка, НоваяСтрока);
			// Реквизиты
			НоваяСтрока.Показатель1			= Выборка.ОплатаДополнительная;
			
			Если Водитель.ИНАГРО_ДоговорПодряда Тогда
				НоваяСтрока.ДокументОснование   = ДокументОснование;
			КонецЕсли;
		КонецЕсли;

	КонецЦикла;
	
	Записать();
	
КонецПроцедуры  // АвтозаполнениеНачисления()

Процедура АвтозаполнениеПутевыеЛисты(СписокСотрудников, СтруктураСтроки) Экспорт
	
	мСпособОтраженияВБухучете = Справочники.СпособыОтраженияЗарплатыВРеглУчете.ПустаяСсылка();
	
	// данные нормы календаря помесячно
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Организация",		Организация);
	Запрос.УстановитьПараметр("парамСотрудник",		СписокСотрудников);
	Запрос.УстановитьПараметр("Дата",				Дата);
	Запрос.УстановитьПараметр("ДатаНачала",			Дата);
	Запрос.УстановитьПараметр("ДатаОкончания",		Дата);
	// запрос по всем назначениям, включая внутреннее совместительство
	ТекстЗапроса = "ВЫБРАТЬ
	               |	РаботникиОрганизации.Сотрудник КАК Назначение,
	               |	ДанныеКалендаря.ДатаМесяца КАК ДатаМесяца,
	               |	ДанныеКалендаря.ГрафикРаботы КАК ГрафикРаботы,
	               |	ДанныеКалендаря.НормаДнейЗаМесяц КАК НормаДнейЗаМесяц,
	               |	ДанныеКалендаря.НормаЧасовЗаМесяц КАК НормаЧасовЗаМесяц,
	               |	NULL КАК ДокументОснование,
	               |	РаботникиОрганизации.ПодразделениеОрганизации
	               |ПОМЕСТИТЬ ДанныеКалендаря
	               |ИЗ
	               |	(ВЫБРАТЬ
	               |		&ДатаНачала КАК ДатаНачала,
	               |		&ДатаОкончания КАК ДатаОкончания) КАК ГраницыБригадный
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИНАГРО_РаботникиОрганизаций.СрезПоследних(
	               |				&ДатаНачала,
	               |				Сотрудник В (&парамСотрудник)
	               |					ИЛИ Сотрудник.ОсновноеНазначение В (&парамСотрудник)) КАК РаботникиОрганизации
	               |		ПО (ИСТИНА)
	               |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	               |			ГрафикиРаботы.ГрафикРаботы КАК ГрафикРаботы,
	               |			НАЧАЛОПЕРИОДА(ГрафикиРаботы.Дата, МЕСЯЦ) КАК ДатаМесяца,
	               |			СУММА(ГрафикиРаботы.ОсновноеЗначение) КАК НормаДнейЗаМесяц,
	               |			СУММА(ГрафикиРаботы.ДополнительноеЗначение) КАК НормаЧасовЗаМесяц
	               |		ИЗ
	               |			РегистрСведений.ИНАГРО_ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботы
	               |		ГДЕ
	               |			ГрафикиРаботы.ВидУчетаВремени = ЗНАЧЕНИЕ(Перечисление.ИНАГРО_ВидыУчетаВремени.ПоДням)
	               |		
	               |		СГРУППИРОВАТЬ ПО
	               |			ГрафикиРаботы.ГрафикРаботы,
	               |			НАЧАЛОПЕРИОДА(ГрафикиРаботы.Дата, МЕСЯЦ)) КАК ДанныеКалендаря
	               |		ПО (ДанныеКалендаря.ГрафикРаботы = РаботникиОрганизации.ГрафикРаботы)
	               |			И (ДанныеКалендаря.ДатаМесяца >= НАЧАЛОПЕРИОДА(ГраницыБригадный.ДатаНачала, МЕСЯЦ))
	               |			И (ДанныеКалендаря.ДатаМесяца <= НАЧАЛОПЕРИОДА(ГраницыБригадный.ДатаОкончания, МЕСЯЦ))
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ИНАГРО_ПлановыеНачисленияРаботниковОрганизацийСрезПоследних.Сотрудник,
	               |	NULL,
	               |	NULL,
	               |	NULL,
	               |	NULL,
	               |	ИНАГРО_ПлановыеНачисленияРаботниковОрганизацийСрезПоследних.ДокументОснование,
	               |	ИНАГРО_ПлановыеНачисленияРаботниковОрганизацийСрезПоследних.ДокументОснование.ПодразделениеОрганизации
	               |ИЗ
	               |	(ВЫБРАТЬ
	               |		&ДатаНачала КАК ДатаНачала,
	               |		&ДатаОкончания КАК ДатаОкончания) КАК ГраницыБригадный
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИНАГРО_ПлановыеНачисленияРаботниковОрганизаций.СрезПоследних(
	               |				&ДатаНачала,
	               |				Сотрудник В (&парамСотрудник)
	               |					ИЛИ Сотрудник.ОсновноеНазначение В (&парамСотрудник)) КАК ИНАГРО_ПлановыеНачисленияРаботниковОрганизацийСрезПоследних
	               |		ПО (ИСТИНА)
	               |ГДЕ
	               |	ИНАГРО_ПлановыеНачисленияРаботниковОрганизацийСрезПоследних.ДокументОснование <> ЗНАЧЕНИЕ(Документ.ИНАГРО_ДоговорНаВыполнениеРаботСФизЛицом.ПустаяСсылка)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	&Дата,
	               |	НАЧАЛОПЕРИОДА(&ДатаНачала, МЕСЯЦ) КАК ПериодРегистрации,
	               |	&Организация,
	               |	&ДатаНачала,
	               |	&ДатаОкончания
				   |ПОМЕСТИТЬ ОсновнаяДок
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ИСТИНА КАК Авторасчет,
	               |	ОсновнаяДок.Дата,
	               |	ОсновнаяДок.ПериодРегистрации,
	               |	ОсновнаяДок.Организация,
	               |	ДанныеКалендаря.Назначение КАК Назначение,
	               |	ДанныеКалендаря.Назначение КАК Сотрудник,
	               |	ДанныеКалендаря.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	               |	ДанныеКалендаря.ГрафикРаботы КАК ГрафикРаботы,
	               |	ДанныеКалендаря.НормаЧасовЗаМесяц КАК НормаЧасовЗаМесяц,
	               |	ДанныеКалендаря.НормаДнейЗаМесяц КАК НормаДнейЗаМесяц,
	               |	ВЫБОР
	               |		КОГДА ЕСТЬNULL(ОсновнаяДок.ДатаНачала, ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)) = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	               |			ТОГДА НАЧАЛОПЕРИОДА(ОсновнаяДок.ПериодРегистрации, МЕСЯЦ)
	               |		ИНАЧЕ ЕСТЬNULL(ОсновнаяДок.ДатаНачала, ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0))
	               |	КОНЕЦ КАК ДатаНачала,
	               |	ВЫБОР
	               |		КОГДА ЕСТЬNULL(ОсновнаяДок.ДатаОкончания, ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)) = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	               |			ТОГДА КОНЕЦПЕРИОДА(ОсновнаяДок.ПериодРегистрации, МЕСЯЦ)
	               |		ИНАЧЕ ЕСТЬNULL(ОсновнаяДок.ДатаОкончания, ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0))
	               |	КОНЕЦ КАК ДатаОкончания,
	               |	НАЧАЛОПЕРИОДА(ОсновнаяДок.ПериодРегистрации, МЕСЯЦ) КАК БазовыйПериодНачало,
	               |	КОНЕЦПЕРИОДА(ОсновнаяДок.ПериодРегистрации, МЕСЯЦ) КАК БазовыйПериодКонец,
	               |	ДанныеКалендаря.ДокументОснование
	               |ИЗ
	               |	ДанныеКалендаря КАК ДанныеКалендаря,
	               |	ОсновнаяДок КАК ОсновнаяДок
	               |ГДЕ
	               |	НЕ ДанныеКалендаря.Назначение = """"";
	
	Запрос.Текст = ТекстЗапроса;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ЗаполнениеПоСтоке = СтруктураСтроки;

	Пока Выборка.Следующий() Цикл
		
		Если ЗаполнениеПоСтоке = Неопределено Тогда
			// строка движений
			СтруктураСтроки = Начисления.Добавить();
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(СтруктураСтроки, Выборка);
		Если Не ЗначениеЗаполнено(Выборка.ДокументОснование) Тогда
		// Реквизиты
			ИНАГРО_ПроведениеРасчетов.ПроставитьДанныеСтроки(Выборка.Сотрудник, Выборка.Назначение, СтруктураСтроки.ДатаНачала, Ссылка, СтруктураСтроки);
		КонецЕсли;
				
		НачисленияВыборка = ИНАГРО_ПроведениеРасчетов.ЗапросСпособОтражения(Дата, СтруктураСтроки.ВидРасчета, Выборка.Сотрудник, Организация).Выбрать();
		Если НачисленияВыборка.Следующий() Тогда
			// вверху основное начисление
			мСпособОтраженияВБухучете = НачисленияВыборка.СпособОтраженияВБухучете;
		КонецЕсли;
		
		Если Выборка.Сотрудник = Выборка.Назначение Тогда
			СтруктураСтроки.СпособОтраженияВБухучете	= мСпособОтраженияВБухучете;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры  // АвтозаполнениеНачисления()

// Выполняет расчет основных и дополнительных записей начислений
//
Процедура РассчитатьНачисления(Сотрудники, КомментироватьРасчет = Ложь ) Экспорт
	
	// Массивы для хранения индексов строк табличных частей,
	// используются для расчета по одному сотруднику.
	МассивИндексыСтрокНачисления = Новый Массив();
	
	Отказ = Ложь;
	
	ВыборкаПоНачислениям = СформироватьЗапросПоНачислениям().Выбрать();
	
	// Создадим рабочие наборы записей
	НаборОсновныеНачисления = РегистрыРасчета.ИНАГРО_Начисления.СоздатьНаборЗаписей();
	НаборОсновныеНачисления.Отбор.Регистратор.Значение = Ссылка;
	
	Пока ВыборкаПоНачислениям.Следующий() Цикл
		
		ПроверитьЗаполнениеСтрокиНачисления(ВыборкаПоНачислениям, Отказ);
		Если НЕ Отказ Тогда
			// Заполним записи в наборах записей регистров
			ДобавитьСтрокуОсновныхНачислений(ВыборкаПоНачислениям, НаборОсновныеНачисления);

			МассивИндексыСтрокНачисления.Добавить(ВыборкаПоНачислениям.НомерСтроки-1);
			
		КонецЕсли;
		
	КонецЦикла;
	НаборОсновныеНачисления.Записать();
	
	Если Отказ Тогда
		
		// Если есть какие-то проблемы - удаляем движения (тут нет транзакции) 
		// Удаляем движения.
		НаборОсновныеНачисления.Очистить();
		НаборОсновныеНачисления.Записать();
		
		Возврат;
		
	КонецЕсли;
	
	// Получим дополнительные записи, имеющие признак сторно, которые необходимо добавить 
	// в текущий набор для того, чтобы в результате сохранения получился максимальный 
	// фактический период действия.
	ТаблицаСторноЗаписей = НаборОсновныеНачисления.ПолучитьДополнение();
	ТаблицаСторноЗаписей.Колонки.Удалить("ПериодРегистрации");
	ТаблицаСторноЗаписей.Колонки.ПериодРегистрацииСторно.Имя = "ПериодРегистрации";
	ТаблицаСторноЗаписей.Колонки.Удалить("ПериодДействияНачало");
	ТаблицаСторноЗаписей.Колонки.ПериодДействияНачалоСторно.Имя = "ПериодДействияНачало";
	ТаблицаСторноЗаписей.Колонки.Удалить("ПериодДействияКонец");
	ТаблицаСторноЗаписей.Колонки.ПериодДействияКонецСторно.Имя = "ПериодДействияКонец";
	Для каждого СтрокаСторно Из ТаблицаСторноЗаписей Цикл
		
		// Заполним записи в наборе записей регистра
		Движение = НаборОсновныеНачисления.Добавить();
		ЗаполнитьЗначенияСвойств(Движение, СтрокаСторно);
		Движение.Сторно						= Истина;
		Движение.Авторасчет					= Истина;
		
		// и в табличной части
		Движение = Начисления.Добавить();
		ЗаполнитьЗначенияСвойств(Движение, СтрокаСторно);
		Движение.ДатаНачала		= СтрокаСторно.ПериодДействияНачало;   
		Если Час(СтрокаСторно.ПериодДействияНачало)=0 И Минута(СтрокаСторно.ПериодДействияНачало)=0 И Секунда(СтрокаСторно.ПериодДействияНачало)=1 Тогда
			// Если это первая секунда дня - начнем с следующего
			Движение.ДатаНачала = СтрокаСторно.ПериодДействияНачало+86400;
		КонецЕсли;
		Движение.ДатаОкончания	= СтрокаСторно.ПериодДействияКонец; 
		Движение.Сторно						= Истина;
		Движение.Авторасчет					= Истина;

		МассивИндексыСтрокНачисления.Добавить(Движение.НомерСтроки-1);
		
	КонецЦикла;
	НаборОсновныеНачисления.Записать();
		
	// Рассчитываем записи
	// при этом передаем не только набор записей регистра расчета, но и набор записей регисра 
	// накопления со сведениями об отработанном времени.
	ИНАГРО_ПроведениеРасчетов.РассчитатьЗаписиРегистраРасчета("ИНАГРО_Начисления", 
														НаборОсновныеНачисления, 
														Начисления, 
														МассивИндексыСтрокНачисления, 
														Сотрудники, 
														КомментироватьРасчет);
	
	// Удаляем движения
	НаборОсновныеНачисления.Очистить();
	НаборОсновныеНачисления.Записать();
	
	Записать();

КонецПроцедуры // РассчитатьНачисления()

#КонецОбласти 

#КонецЕсли