#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
				
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды 

	Если Параметры.Ключ.Пустая() Тогда
		ЗарплатаКадрыКлиентСервер.ЗаполнитьМесяцПоДате(ЭтаФорма, "Объект.ПериодРегистрации", "МесяцСтрока");
		ПодготовитьФормуНаСервере();
	КонецЕсли;
	
	// Уведомим о появлении функционала рабочей даты
	ЭтаФорма.НастройкиПредупреждений = ОбщегоНазначенияБП.НастройкиПредупрежденийОбИзменениях("РабочаяДатаИзДокумента");
	
	// Показываем, если это новый документ и сама рабочая дата еще не установлена.
	ЭтаФорма.НастройкиПредупреждений.РабочаяДатаИзДокумента = ЭтаФорма.НастройкиПредупреждений.РабочаяДатаИзДокумента
	И ЭтаФорма.Параметры.Ключ.Пустая()
	И НЕ ЗначениеЗаполнено(БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("РабочаяДата"));
		
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
			
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)	
		
	Если ИсточникВыбора.ИмяФормы = "РегистрСведений.ИНАГРО_ВидыРаботАвтотранспорта.Форма.ФормаПодбора" Тогда
		ОбработкаВыбораПодборСервер(ВыбранноеЗначение);				         
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)

	ОбщегоНазначенияБПКлиент.ОбработкаОповещенияФормыДокумента(ЭтаФорма, Объект.Ссылка, ИмяСобытия, Параметр, Источник);

КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	ЗарплатаКадрыКлиентСервер.ЗаполнитьМесяцПоДате(ЭтаФорма, "Объект.ПериодРегистрации", "МесяцСтрока");
	
	ПодготовитьФормуНаСервере(); 	
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	ЗаполнитьДобавленныеКолонкиТаблицыПутевыеЛисты();
	
	УстановитьСостояниеДокумента();	

КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)

	Если НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДатаДокумента) Тогда
		// Изменение времени не влияет на поведение документа.
		ТекущаяДатаДокумента = Объект.Дата;
		Возврат;
	КонецЕсли;

	// Общие проверки условий по датам.
	ТребуетсяВызовСервера = ОбщегоНазначенияБПКлиент.ТребуетсяВызовСервераПриИзмененииДатыДокумента(Объект.Дата, 
		ТекущаяДатаДокумента);
		
	// Если определили, что изменение даты может повлиять на какие-либо параметры, 
	// то передаем обработку на сервер.
	Если ТребуетсяВызовСервера Тогда
		ДатаПриИзмененииНаСервере();
	КонецЕсли;
	
	// Запомним новую дату документа.
	ТекущаяДатаДокумента = Объект.Дата;	
		
	Объект.ПериодРегистрации = НачалоМесяца(ТекущаяДатаДокумента);
		
	УстановкаПоказанийСпидометраИБака();

КонецПроцедуры

&НаСервере
Процедура ДатаПриИзмененииНаСервере()

	УстановитьФункциональныеОпцииФормы();

	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)

	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		ОрганизацияПриИзмененииНаСервере();
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()

	УстановитьФункциональныеОпцииФормы();
	 		
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура АвтомобильПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(ПолучитьЗначениеРеквизита(Объект.Автомобиль, "Модель")) Тогда
		ТекстСообщения = Нстр("ru='Не заполнена модель автомобиля!';uk='Не заповнена модель автомобиля!'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	АвтомобильПриИзмененииНаСервере(Объект.Автомобиль);
		
	ЗаполнитьСведенияОТС();
	
	Объект.Водитель = СвойстваТС.Водитель;
	
	УстановкаПоказанийСпидометраИБака(); 	
	
	УстановитьФункциональныеОпцииФормы();
	
	УправлениеФормой(ЭтаФорма);  	
	
	Если Объект.ПутевыеЛисты.Количество() > 0 Тогда
		ТекстВопроса = Нстр("ru='Выполнить перерасчет затрат топлива по норме?';uk='Виконати розрахунок витрат палива за нормою?'");
		Оповещение = Новый ОписаниеОповещения("АвтомобильПриИзмененииЗавершение", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да); 
	КонецЕсли;  
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура АвтомобильПриИзмененииНаСервере(Автомобиль)
	
	Если Автомобиль.Модель.ВидТехники <> Перечисления.ИНАГРО_ВидыТехники.Автотранспорт Тогда 
		ТекстСообщения = Нстр("ru='Выбран автомобиль, модель которого имеет Вид техники не Автотранспорт!';uk='Обрано автомобіль, модель якого має Вид техніки не Автотранспорт!'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Автомобиль = Справочники.ОсновныеСредства.ПустаяСсылка(); 
		Возврат;
	КонецЕсли;	
			
КонецПроцедуры

&НаКлиенте
Процедура АвтомобильПриИзмененииЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
   	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		РассчитатьНормуРасходаТоплива(); 
	КонецЕсли; 	
	
КонецПроцедуры

&НаКлиенте
Процедура АвтомобильОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если НЕ ПолучитьЗначениеРеквизита(ВыбранноеЗначение, "Автотранспорт") Тогда
		ТекстСообщения = Нстр("ru='Выбран не Автотранспорт!';uk='Обрано не Автотранспорт!'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;  
	
КонецПроцедуры

&НаКлиенте
Процедура ВодительПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(Объект.Водитель) Тогда
		Возврат;
	КонецЕсли;  	
	
	Объект.ДокументОснование = ПредопределенноеЗначение("Документ.ИНАГРО_ДоговорНаВыполнениеРаботСФизЛицом.ПустаяСсылка");  	
	
	Если ПолучитьЗначениеРеквизита(Объект.Водитель, "ИНАГРО_ДоговорПодряда") Тогда 		
		Объект.ДокументОснование = ВодительПриИзмененииНаСервере(Объект.Водитель, Объект.Дата); 		
	КонецЕсли; 

	УправлениеФормой(ЭтаФорма);
	
	Если НЕ ПараметрыТехники.ДоплачиватьВодителямЗаКлассность Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.ПутевыеЛисты.Количество() > 0 Тогда
		ТекстВопроса = Нстр("ru='Пересчитать з/п за классность?';uk='Перерахувати з/п за класність?'");
		Оповещение = Новый ОписаниеОповещения("ВодительПриИзмененииЗавершение", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да); 
	КонецЕсли; 	

КонецПроцедуры

&НаСервереБезКонтекста
Функция ВодительПриИзмененииНаСервере(Водитель, Дата)
	
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|			Договор.Ссылка КАК ДокументОснование
		|		ИЗ
		|			Документ.ИНАГРО_ДоговорНаВыполнениеРаботСФизЛицом КАК Договор
		|		ГДЕ
		|			&ДатаАктуальности МЕЖДУ Договор.ДатаНачала И Договор.ДатаОкончания
		|		    И Договор.Сотрудник = &Сотрудник";		
		Запрос.УстановитьПараметр("Сотрудник",        Водитель);
		Запрос.УстановитьПараметр("ДатаАктуальности", Дата);
		
		ТаблДоговорОснование = Запрос.Выполнить().Выгрузить();
		
		Если ТаблДоговорОснование.Количество() > 0 Тогда
			ТекДокументОснование = ТаблДоговорОснование[0].ДокументОснование;
		КонецЕсли; 
		
		Возврат ТекДокументОснование;

КонецФункции

&НаКлиенте
Процедура ВодительПриИзмененииЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
   	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли; 	
	
	Для Каждого СтрокаТабличнойЧасти Из Объект.ПутевыеЛисты Цикл 		
		РассчитатьЗПДляСтроки(СтрокаТабличнойЧасти);  		
	КонецЦикла;   
	
КонецПроцедуры 

&НаКлиенте
Процедура СводныйПутевойЛистПриИзменении(Элемент)
	
	Если НЕ Объект.СводныйПутевойЛист Тогда
		ОдинДень = 1;
		Для Каждого СтрокаТабличнойЧасти Из Объект.ПутевыеЛисты Цикл
			СтрокаТабличнойЧасти.ОтработаноДней = ОдинДень;
			ОдинДень = 0;
		КонецЦикла;	
	КонецЕсли;
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(
		Элемент.ТекстРедактирования,
		ЭтотОбъект,
		"Объект.Комментарий");

КонецПроцедуры

&НаКлиенте
Процедура МесяцСтрокаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Оповещение = Новый ОписаниеОповещения("МесяцНачисленияСтрокойНачалоВыбораЗавершение", ЭтотОбъект);
	ИНАГРО_ЗарплатаКадрыРасширенныйКлиент.ВводМесяцаНачалоВыбора(ЭтаФорма, ЭтаФорма, "Объект.ПериодРегистрации", "МесяцСтрока", , Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура МесяцСтрокаРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	ИНАГРО_ЗарплатаКадрыРасширенныйКлиент.ВводМесяцаРегулирование(ЭтаФорма, "Объект.ПериодРегистрации", "МесяцСтрока", Направление, Модифицированность);
	ПриИзмененииМесяцаНачисления();
	
КонецПроцедуры

&НаКлиенте
Процедура МесяцСтрокаАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	ИНАГРО_ЗарплатаКадрыРасширенныйКлиент.ВводМесяцаАвтоПодборТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
	ПриИзмененииМесяцаНачисления();
	
КонецПроцедуры

&НаКлиенте
Процедура МесяцСтрокаОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	ИНАГРО_ЗарплатаКадрыРасширенныйКлиент.ВводМесяцаОкончаниеВводаТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
	ПриИзмененииМесяцаНачисления();
	
КонецПроцедуры

&НаКлиенте
Процедура МесяцНачисленияСтрокойНачалоВыбораЗавершение(ЗначениеВыбрано, ДополнительныеПараметры) Экспорт
	
	ПриИзмененииМесяцаНачисления();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииМесяцаНачисления()
	
	ИНАГРО_ЗарплатаКадрыРасширенныйКлиент.ВводМесяцаПриИзменении(ЭтаФорма, "Объект.ПериодРегистрации", "МесяцСтрока", Модифицированность);
	
КонецПроцедуры

#Область ОбработчикиСобытийЭлементовСтраницыТопливо

&НаКлиенте
Процедура ИспользоватьЗимниеНормыРасходаТопливаПриИзменении(Элемент)
	
	УправлениеФормой(ЭтаФорма);
	
	РассчитатьНормуРасходаТоплива();  

КонецПроцедуры

&НаКлиенте
Процедура ВыделитьПерерасходТопливаПриИзменении(Элемент)
	
	Если НЕ Объект.ВыделитьПерерасходТоплива Тогда
		Объект.СчетПерерасхода = Неопределено; 	
		УстановитьЗаголовкиИДоступностьСубконто(ЭтаФорма, Объект.СчетПерерасхода, Истина, "");	
	КонецЕсли;
	
	УправлениеФормой(ЭтаФорма);	
	
КонецПроцедуры

&НаКлиенте
Процедура СчетПерерасходаПриИзменении(Элемент)
	
	УстановитьЗаголовкиИДоступностьСубконто(ЭтаФорма, Объект.СчетПерерасхода, Истина, "");
	
	ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3", "Субконто1", "Субконто2", "Субконто3");
	
	ПоляОбъекта.Вставить("Организация", Объект.Организация);
	БухгалтерскийУчетКлиентСервер.ПриИзмененииСчета(Объект.СчетПерерасхода, Объект, ПоляОбъекта);
	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "", "СчетПерерасхода");	
		
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура СчетПерерасходаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = БухгалтерскийУчетКлиент.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение);

КонецПроцедуры

&НаКлиенте
Процедура СубконтоПриИзменении(Элемент)

	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "", "СчетПерерасхода");
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура СубконтоНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	ПараметрыДокумента = СписокПараметровВыбораСубконто(ЭтаФорма, Объект, "Субконто%Индекс%");
	ПараметрыДокумента.Вставить("СчетУчета", Объект.СчетПерерасхода); 
	ОбщегоНазначенияБПКлиент.НачалоВыбораЗначенияСубконто(ЭтаФорма, Элемент, СтандартнаяОбработка, ПараметрыДокумента);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовСтраницыДополнительно

&НаКлиенте
Процедура СпидометрПослеПриИзменении(Элемент)
	
	ОбновитьДекорацииПоказанийСпидометраБака();
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьПоказанияСпидометра(Команда)
	
	Объект.СпидометрПосле = Объект.СпидометрДо + ПолучитьОбщееРасстояние();
	
	ОбновитьДекорацииПоказанийСпидометраБака();
	
КонецПроцедуры

&НаКлиенте
Процедура БакПослеПриИзменении(Элемент)
	
	ОбновитьДекорацииПоказанийСпидометраБака(); 	
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьПоказанияБака(Команда)
	
	Объект.БакПосле = Объект.БакДо + ПолучитьИзрасходованноеТопливо();
	
	ОбновитьДекорацииПоказанийСпидометраБака();
	
КонецПроцедуры  

#КонецОбласти  

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПутевыеЛисты

&НаКлиенте
Процедура ПутевыеЛистыПриИзменении(Элемент)
	
	ИзменитьПараметрыВыбораПолейСубконтоТЧ(ЭтаФорма);
	
	

КонецПроцедуры

&НаКлиенте
Процедура ПутевыеЛистыПередНачаломИзменения(Элемент, Отказ)
	
	ТекущиеДанные = Элементы.ПутевыеЛисты.ТекущиеДанные; 	
	
	ИзменитьПараметрыВыбораПолейСубконтоТЧ(ЭтаФорма);
	
	УстановитьЗаголовкиИДоступностьСубконтоТЧ(ЭтаФорма, ТекущиеДанные.СчетСписания, Истина, "", Истина);

КонецПроцедуры

&НаКлиенте
Процедура ПутевыеЛистыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Элемент.ТекущиеДанные.Ходок = ?(Элемент.ТекущиеДанные.Ходок = 0, 1 , Элемент.ТекущиеДанные.Ходок);
	
	Если НоваяСтрока И НЕ Копирование Тогда   
		Элемент.ТекущиеДанные.СтатьяЗатратЗП = ПараметрыТехники.СтатьяЗатратРаботы;	
	КонецЕсли; 

КонецПроцедуры 

&НаКлиенте
Процедура ПутевыеЛистыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ТекущиеДанные = Элементы.ПутевыеЛисты.ТекущиеДанные; 	
	
	Если Не ТекущиеДанные = Неопределено Тогда
		
		ТекущиеДанные.Ходок = ?(ТекущиеДанные.Ходок = 0, 1 , ТекущиеДанные.Ходок);
		ОтработаноЧасов = ТекущиеДанные.Время;
		ОтработаноДней  = ТекущиеДанные.ОтработаноДней;	
				
		РассчитатьЗПДляСтроки(ТекущиеДанные); 		
		РассчитатьФактРасходаТоплива();
		НормаРасходаТопливаПоСтроке(ТекущиеДанные); 		
		
	КонецЕсли;;	
	
	ОбновитьИтоги(ЭтаФорма); 
		
	Объект.ЗатратыТопливаПоНорме = Объект.ПутевыеЛисты.Итог("ЗатратыТопливаПоНорме");
	
		
КонецПроцедуры  

&НаКлиенте
Процедура ПутевыеЛистыПослеУдаления(Элемент)
	
	ОбновитьИтоги(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ПутевыеЛистыДатаДокументаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ПутевыеЛисты.ТекущиеДанные;
	
	Если ТекущиеДанные.ДатаДокумента < Объект.ПериодРегистрации ИЛИ ТекущиеДанные.ДатаДокумента > КонецМесяца(Объект.ПериодРегистрации) Тогда
		ТекстСообщения = Нстр("ru='Технологическая операция должна быть в пределах одного месяца!';uk='Технологічна операція повинна бути в межах одного місяця!'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		ТекущиеДанные.ДатаДокумента = Дата("00010101");
		Возврат;
	КонецЕсли;
	
	Если (НЕ ЗначениеЗаполнено(ТекущиеДанные.ДатаПо)) ИЛИ ТекущиеДанные.ДатаПо < ТекущиеДанные.ДатаДокумента Тогда 
		
		ТекущиеДанные.ДатаПо         = ТекущиеДанные.ДатаДокумента;
		ТекущиеДанные.ОтработаноДней = 1;
		
	Иначе
		СписокСотрудников = Новый СписокЗначений;
		СписокСотрудников.Добавить(Объект.Водитель);
		
		СтруктураСтроки = Новый Структура("Сотрудник, ДатаДокумента, ДатаПо, 
		|ОтработаноДней, Время, Организация"); 
		СтруктураСтроки.Организация = Объект.Организация;
		
		ЗаполнитьЗначенияСвойств(СтруктураСтроки, ТекущиеДанные);
		ПолучитьНормуВремениПоСотруднику(СписокСотрудников, СтруктураСтроки);
		ЗаполнитьЗначенияСвойств(ТекущиеДанные, СтруктураСтроки);
	КонецЕсли;
	
КонецПроцедуры 

&НаСервере
Процедура ПолучитьНормуВремениПоСотруднику(СписокСотрудников, СтруктураСтроки)
	
	ИНАГРО_ПроведениеРасчетов.ПолучитьНормуВремени(СписокСотрудников, СтруктураСтроки);

КонецПроцедуры

&НаКлиенте
Процедура ПутевыеЛистыДатаПоПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ПутевыеЛисты.ТекущиеДанные;
	
	Если ТекущиеДанные.ДатаПо < Объект.ПериодРегистрации ИЛИ ТекущиеДанные.ДатаПо > КонецМесяца(Объект.ПериодРегистрации) Тогда
		ТекстСообщения = Нстр("ru='Технологическая операция должна быть в пределах одного месяца!';uk='Технологічна операція повинна бути в межах одного місяця!'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		ТекущиеДанные.ДатаПо = Дата("00010101");
		Возврат;
	КонецЕсли;
	
	Если (НЕ ЗначениеЗаполнено(ТекущиеДанные.ДатаПо)) ИЛИ ТекущиеДанные.ДатаПо < ТекущиеДанные.ДатаДокумента Тогда 
		
		ТекущиеДанные.ДатаПо         = ТекущиеДанные.ДатаДокумента;
		ТекущиеДанные.ОтработаноДней = 1;
		
	Иначе 		
		СписокСотрудников = Новый СписокЗначений;
		СписокСотрудников.Добавить(Объект.Водитель);
		
		СтруктураСтроки = Новый Структура("Сотрудник, ДатаДокумента, ДатаПо, 
		|ОтработаноДней, Время, Организация"); 
		СтруктураСтроки.Организация = Объект.Организация;
		
		ЗаполнитьЗначенияСвойств(СтруктураСтроки, ТекущиеДанные);
		ПолучитьНормуВремениПоСотруднику(СписокСотрудников, СтруктураСтроки);
		ЗаполнитьЗначенияСвойств(ТекущиеДанные, СтруктураСтроки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПутевыеЛистыТехнологическаяОперацияПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ПутевыеЛисты.ТекущиеДанные; 	
	
	РассчитатьЗПДляСтроки(ТекущиеДанные); 
	
	НормаРасходаТопливаПоСтроке(ТекущиеДанные); 		
		
КонецПроцедуры

&НаКлиенте
Процедура ПутевыеЛистыПрицепПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ПутевыеЛисты.ТекущиеДанные; 	
		
	РассчитатьЗПДляСтроки(ТекущиеДанные); 		
		
КонецПроцедуры

&НаКлиенте
Процедура ПутевыеЛистыСчетСписанияПриИзменении(Элемент)

	ТекущиеДанные = Элементы.ПутевыеЛисты.ТекущиеДанные;
	
	УстановитьЗаголовкиИДоступностьСубконтоТЧ(ЭтаФорма, ТекущиеДанные.СчетСписания, Истина, "", Истина);

	ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3", "Субконто1", "Субконто2", "Субконто3");

	ПоляОбъекта.Вставить("Организация", Объект.Организация); 	
	
	БухгалтерскийУчетКлиентСервер.ПриИзмененииСчета(ТекущиеДанные.СчетСписания, ТекущиеДанные, ПоляОбъекта, Истина);
	
	ИзменитьПараметрыВыбораПолейСубконтоТЧ(ЭтаФорма);

	// Получим общие параметры обработки для реквизитов документа
	ПараметрыОбработки = ПодготовитьПараметрыОбработкиПутевыеЛисты(ЭтаФорма, ТекущиеДанные);
	
	// Дополнительные поля, требующиеся для заполнения добавленных колонок табличного поля текущей формы.
	ПараметрыОбработки.ДанныеСтрокиТаблицы.Вставить("Субконто1Доступность", ТекущиеДанные.Субконто1Доступность);
	ПараметрыОбработки.ДанныеСтрокиТаблицы.Вставить("Субконто2Доступность", ТекущиеДанные.Субконто2Доступность);
	ПараметрыОбработки.ДанныеСтрокиТаблицы.Вставить("Субконто3Доступность", ТекущиеДанные.Субконто3Доступность); 	
		
	ЗаполнитьДобавленныеКолонкиСтрокиТаблицыПутевыеЛисты(ПараметрыОбработки.ДанныеСтрокиТаблицы);
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ПараметрыОбработки.ДанныеСтрокиТаблицы);
	
	ПроверкаВидаСубконтоСчетаЗатрат(ТекущиеДанные);

КонецПроцедуры

&НаКлиенте
Процедура ПутевыеЛистыСубконтоПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ПутевыеЛисты.ТекущиеДанные;

	ИзменитьПараметрыВыбораПолейСубконтоТЧ(ЭтаФорма);

	// Получим общие параметры обработки для реквизитов документа
	ПараметрыОбработки = ПодготовитьПараметрыОбработкиПутевыеЛисты(ЭтаФорма, ТекущиеДанные);
	
	// Дополнительные поля, требующиеся для заполнения добавленных колонок табличного поля текущей формы.
	ПараметрыОбработки.ДанныеСтрокиТаблицы.Вставить("Субконто1Доступность", ТекущиеДанные.Субконто1Доступность);
	ПараметрыОбработки.ДанныеСтрокиТаблицы.Вставить("Субконто2Доступность", ТекущиеДанные.Субконто2Доступность);
	ПараметрыОбработки.ДанныеСтрокиТаблицы.Вставить("Субконто3Доступность", ТекущиеДанные.Субконто3Доступность);  	
		
	ЗаполнитьДобавленныеКолонкиСтрокиТаблицыПутевыеЛисты(ПараметрыОбработки.ДанныеСтрокиТаблицы);
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ПараметрыОбработки.ДанныеСтрокиТаблицы);
	
	Если ПолучитьЗначениеРеквизита(ТекущиеДанные.СчетСписания, "УчетПоНалоговымНазначениямНДС") Тогда 
		
		УстановитьНалоговоеНазаначениеВТЧ(ТекущиеДанные);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПутевыеЛистыСубконтоНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	СтрокаТаблицы = Элементы.ПутевыеЛисты.ТекущиеДанные;

	ПараметрыДокумента = СписокПараметровВыбораСубконто(ЭтаФорма, СтрокаТаблицы, "Субконто%Индекс%");
	ПараметрыДокумента.Вставить("СчетУчета", СтрокаТаблицы.СчетСписания);
	ОбщегоНазначенияБПКлиент.НачалоВыбораЗначенияСубконто(ЭтаФорма, Элемент, СтандартнаяОбработка, ПараметрыДокумента);

КонецПроцедуры

&НаКлиенте
Процедура ПутевыеЛистыПробегСГрузомПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ПутевыеЛисты.ТекущиеДанные;
	
	ТекущиеДанные.ПробегСГрузомОбщ = ТекущиеДанные.ПробегСГрузом + ТекущиеДанные.ПробегСГрузомЗаГородом;
	
КонецПроцедуры

&НаКлиенте
Процедура ПутевыеЛистыПробегСГрузомЗаГородомПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ПутевыеЛисты.ТекущиеДанные;
	
	ТекущиеДанные.ПробегСГрузомОбщ = ТекущиеДанные.ПробегСГрузом + ТекущиеДанные.ПробегСГрузомЗаГородом; 	

КонецПроцедуры

&НаКлиенте
Процедура ПутевыеЛистыРасстояниеПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ПутевыеЛисты.ТекущиеДанные;
	
	Если ТекущиеДанные.Тоннаж = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если (ТекущиеДанные.ПробегСГрузом = 0) И (ТекущиеДанные.ПробегСГрузомЗаГородом = 0) Тогда 
		ТекущиеДанные.ПробегСГрузом = ТекущиеДанные.Расстояние;
		ТекущиеДанные.ПробегСГрузомОбщ = ТекущиеДанные.ПробегСГрузом + ТекущиеДанные.ПробегСГрузомЗаГородом;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПутевыеЛистыТоннажПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ПутевыеЛисты.ТекущиеДанные;
	
	Если ТекущиеДанные.Тоннаж = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если (ТекущиеДанные.ПробегСГрузом = 0) И (ТекущиеДанные.ПробегСГрузомЗаГородом = 0) Тогда 
		ТекущиеДанные.ПробегСГрузом = ТекущиеДанные.Расстояние;
		ТекущиеДанные.ПробегСГрузомОбщ = ТекущиеДанные.ПробегСГрузом + ТекущиеДанные.ПробегСГрузомЗаГородом;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПутевыеЛистыВремяПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ПутевыеЛисты.ТекущиеДанные;	
		
	РассчитатьЗПДляСтроки(ТекущиеДанные);  	
		
КонецПроцедуры

&НаКлиенте
Процедура ПутевыеЛистыЧасовНочныхПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ПутевыеЛисты.ТекущиеДанные;
		
	РассчитатьЗПДляСтроки(ТекущиеДанные);   
	
КонецПроцедуры

&НаКлиенте
Процедура ПутевыеЛистыЧасовПраздничныхПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ПутевыеЛисты.ТекущиеДанные;
		
	РассчитатьЗПДляСтроки(ТекущиеДанные); 		
		
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТопливо

&НаКлиенте
Процедура ТопливоПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	УстановкаПоказанийСпидометраИБака(); 
	
	ОбновитьДекорацииПоказанийСпидометраБака();
	
КонецПроцедуры

&НаКлиенте
Процедура ТопливоТопливоПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Топливо.ТекущиеДанные;
	
	ДанныеСтрокиТаблицы = Новый Структура("Топливо, ЕдиницаИзмерения, Основное"); 
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, ТекущиеДанные);
	
	ДанныеОбъекта	= Новый Структура("Дата, Организация, Автомобиль"); 		
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
	ТопливоТопливоПриИзмененииНаСервере(ДанныеСтрокиТаблицы, ДанныеОбъекта);
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтрокиТаблицы);  
	
КонецПроцедуры  

&НаСервереБезКонтекста
Процедура ТопливоТопливоПриИзмененииНаСервере(СтрокаТабличнойЧасти, Знач ДанныеОбъекта)
	
	СведенияОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОНоменклатуре(СтрокаТабличнойЧасти.Топливо, ДанныеОбъекта);
	
	Если СведенияОНоменклатуре = Неопределено Тогда
		Возврат;
	КонецЕсли;

	СтрокаТабличнойЧасти.ЕдиницаИзмерения = СведенияОНоменклатуре.БазоваяЕдиницаИзмерения;
	
	Если ДанныеОбъекта.Автомобиль.Модель.ОсновноеТопливо = СтрокаТабличнойЧасти.Топливо Тогда
		СтрокаТабличнойЧасти.Основное = Истина;
	Иначе
		СтрокаТабличнойЧасти.Основное = Ложь;
	КонецЕсли;

КонецПроцедуры  

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТопливоИзрасходованное

&НаКлиенте
Процедура ТопливоИзрасходованноеПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
		
	ЗатратыТопливаПоФакту();
	
	РассчитатьФактРасходаТоплива();  
		
	УстановкаПоказанийСпидометраИБака(); 
	
	ОбновитьДекорацииПоказанийСпидометраБака();
	
КонецПроцедуры

&НаКлиенте
Процедура ТопливоИзрасходованноеПослеУдаления(Элемент)
	
	ЗатратыТопливаПоФакту();
	
	РассчитатьФактРасходаТоплива();	
	
КонецПроцедуры  

&НаКлиенте
Процедура ТопливоИзрасходованноеТопливоПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ТопливоИзрасходованное.ТекущиеДанные;
	
	ДанныеСтрокиТаблицы = Новый Структура("Топливо, ЕдиницаИзмерения, Основное"); 
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, ТекущиеДанные);
	
	ДанныеОбъекта	= Новый Структура("Дата, Организация, Автомобиль"); 		
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);

	ТопливоИзрасходованноеТопливоПриИзмененииНаСервере(ДанныеСтрокиТаблицы, ДанныеОбъекта);
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтрокиТаблицы);  

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ТопливоИзрасходованноеТопливоПриИзмененииНаСервере(СтрокаТабличнойЧасти, Знач ДанныеОбъекта)
	
	СведенияОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОНоменклатуре(СтрокаТабличнойЧасти.Топливо, ДанныеОбъекта);
	
	Если СведенияОНоменклатуре = Неопределено Тогда
		Возврат;
	КонецЕсли;

	СтрокаТабличнойЧасти.ЕдиницаИзмерения = СведенияОНоменклатуре.БазоваяЕдиницаИзмерения;
	
	Если ДанныеОбъекта.Автомобиль.Модель.ОсновноеТопливо = СтрокаТабличнойЧасти.Топливо Тогда
		СтрокаТабличнойЧасти.Основное = Истина;
	Иначе
		СтрокаТабличнойЧасти.Основное = Ложь;
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыНадбавки

&НаКлиенте
Процедура НадбавкиПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	//Объект.ЗатратыТопливаПоНорме = Объект.ПутевыеЛисты.Итог("ЗатратыТопливаПоНорме");
	РассчитатьНормуРасходаТоплива(); 
	
КонецПроцедуры

&НаКлиенте
Процедура НадбавкиНадбавкаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Надбавки.ТекущиеДанные; 
		
	Если ПолучитьЗначениеРеквизита(ТекущиеДанные.Надбавка, "ВПроцентах") Тогда
		ТекущиеДанные.ЕД = "%";
	Иначе 
		ТекущиеДанные.ЕД = "л.";
	КонецЕсли;
	
	ТекущиеДанные.Размер = ПолучитьЗначениеРеквизита(ТекущиеДанные.Надбавка, "РазмерНадбавки");
	
КонецПроцедуры   

&НаКлиенте
Процедура НадбавкиПослеУдаления(Элемент)
	
	РассчитатьНормуРасходаТоплива(); 
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыНачисления

&НаКлиенте
Процедура НачисленияПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ОбновитьИтоги(ЭтаФорма);    

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Подбор(Команда)	
	
	Если НЕ ЗначениеЗаполнено(Объект.Автомобиль) Тогда
		ТекстСообщения = НСтр("ru='Не заполнен Автомобиль!';uk='Не заповнений Автомобиль!'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;

	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Дата",                Объект.Дата);
	ПараметрыОтбора.Вставить("МаркаАвтотранспорта", ПолучитьЗначениеРеквизита(Объект.Автомобиль, "Модель"));  
		
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Отбор", 	          ПараметрыОтбора);
	ПараметрыФормы.Вставить("РежимВыбора",        Истина); 
	ПараметрыФормы.Вставить("ЗакрыватьПриВыборе", Ложь);
				
	ОткрытьФорму("РегистрСведений.ИНАГРО_ВидыРаботАвтотранспорта.Форма.ФормаПодбора", ПараметрыФормы, ЭтаФорма);	

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТопливо(Команда)
	
	Если Объект.ТопливоВыданное.Количество() > 0 Тогда
		ТекстВопроса = Нстр("ru='Табличная часть будет очищена. Продолжить?';uk='таблична частина буде очищена. Продовжити?'");
		Оповещение = Новый ОписаниеОповещения("ЗаполнитьТопливоЗавершение", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да); 		
	Иначе		
		ЗаполнитьТопливоНаСервере(); 
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТопливоЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
   	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Объект.ТопливоВыданное.Очистить();
	Объект.ЗатратыТопливаПоФакту = 0;
	
	ЗаполнитьТопливоНаСервере();

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТопливоНаСервере()
	
	Для Каждого Строка Из Объект.Автомобиль.Модель.ИспользуемоеТопливо Цикл
		
		НоваяСтрока = Объект.ТопливоВыданное.Добавить();
		НоваяСтрока.Топливо          = Строка.Топливо;
		НоваяСтрока.ЕдиницаИзмерения = НоваяСтрока.Топливо.БазоваяЕдиницаИзмерения;
		НоваяСтрока.Коэффициент      = Строка.Коэффициент;
		НоваяСтрока.Основное         = Строка.Топливо = Объект.Автомобиль.Модель.ОсновноеТопливо; 
		
	КонецЦикла; 
	
КонецПроцедуры   

&НаКлиенте
Процедура ЗаполнитьТопливоИзрасходованное(Команда)
	
	Если Объект.ТопливоИзрасходованное.Количество() > 0 Тогда
		ТекстВопроса = Нстр("ru='Табличная часть будет очищена. Продолжить?';uk='таблична частина буде очищена. Продовжити?'");
		Оповещение = Новый ОписаниеОповещения("ЗаполнитьТопливоИзрасходованноеЗавершение", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	Иначе
		ЗаполнитьТопливоИзрасходованноеНаСервере();   
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТопливоИзрасходованноеЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
   	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Объект.ТопливоИзрасходованное.Очистить();	
	
	ЗаполнитьТопливоИзрасходованноеНаСервере();

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТопливоИзрасходованноеНаСервере()
	
	Для Каждого Строка Из Объект.Автомобиль.Модель.ИспользуемоеТопливо Цикл
		
		НоваяСтрока = Объект.ТопливоИзрасходованное.Добавить();
		НоваяСтрока.Топливо          = Строка.Топливо;
		НоваяСтрока.ЕдиницаИзмерения = НоваяСтрока.Топливо.БазоваяЕдиницаИзмерения;
		НоваяСтрока.Коэффициент      = Строка.Коэффициент;
		НоваяСтрока.Основное         = Строка.Топливо = Объект.Автомобиль.Модель.ОсновноеТопливо; 
		
	КонецЦикла; 
	
КонецПроцедуры   

&НаКлиенте
Процедура ЗаполнитьВыпускПродукции(Команда)
	
	ЗаполнитьВыпускПродукцииНаСервере();

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьВыпускПродукцииНаСервере()

	ДокументОбъект = РеквизитФормыВЗначение("Объект");

	Попытка 
		ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
	Исключение
		ТекстСообщения = НСтр("ru='Не удалось записать документ';uk='Не вдалося записати документ'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецПопытки; 
	
	ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");	
	
	Документы.ИНАГРО_ПутевойЛистГрузовогоАвтомобиля.ЗаполнитьТЧВыпускПродукции(Объект);

КонецПроцедуры   

&НаКлиенте
Процедура ЗаполнитьНачисления(Команда)
	
	Если Не ЗначениеЗаполнено(Объект.Водитель) Тогда
		ТекстСообщения = НСтр("ru='Перед началом заполнения табличной части необходимо выбрать водителя';uk='Перед початком заповнення табличної частини необхідно обрати водія'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.Организация) Тогда
		ТекстСообщения = НСтр("ru='Перед началом заполнения табличной части необходимо выбрать организацию';uk='Перед початком заповнення табличної частини необхідно обрати організацію'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;

	Если Объект.Начисления.Количество()>0 Тогда
		
		ТекстВопроса =НСтр("ru='Перед заполнением табличная часть ""Начисления"" будет очищена. Продолжить?';uk='Перед заповненням таблична частина ""Нарахування"" буде очищена. Продовжити?'");
		Обработчик = Новый ОписаниеОповещения("АвтозаполнениеНачисленийПослеОтветаНаВопрос", ЭтотОбъект);
		ПоказатьВопрос(Обработчик, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
		Возврат;
	КонецЕсли;
	//
	ЗаполнитьНачисленияНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНачисленияНаСервере()
	
	Документ = РеквизитФормыВЗначение("Объект");
	Документ.Записать();
  	Документ.АвтозаполнениеНачисления();
  	ЗначениеВРеквизитФормы(Документ, "Объект");	
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьНачисления(Команда)
	
	Если Объект.Проведен Тогда 
		ТекстВопроса =НСтр("ru='Автоматически рассчитать документ можно только после отмены его проведения. Выполнить отмену проведения документа?';uk='Автоматично розрахувати документ можна тільки після скасування його проведення. Виконати скасування проведення документа?'");
		Обработчик = Новый ОписаниеОповещения("АвторасчетНачисленияПослеОтветаНаВопросПровести", ЭтотОбъект);
		ПоказатьВопрос(Обработчик, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
		Возврат;
	ИначеЕсли Модифицированность Тогда
		ТекстВопроса =НСтр("ru='Автоматически рассчитать документ можно только после его записи. Выполнить запись документа?';uk='Автоматично розрахувати документ можна тільки після його запису. Виконати запис документа?'");
		Обработчик = Новый ОписаниеОповещения("АвторасчетНачисленияПослеОтветаНаВопросПровести", ЭтотОбъект);
		ПоказатьВопрос(Обработчик, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
		Возврат;
	КонецЕсли;

	РассчитатьНачисленияНаСервере();
	
	ОбновитьИтоги(ЭтаФорма);  
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьНачисленияНаСервере()
	
	Документ = РеквизитФормыВЗначение("Объект");
	Документ.Записать(РежимЗаписиДокумента.ОтменаПроведения);
  	Документ.РассчитатьНачисления(Объект.Водитель);
  	ЗначениеВРеквизитФормы(Документ, "Объект");	
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьРассчитатьНачисления(Команда)
	
	Если Не ЗначениеЗаполнено(Объект.Водитель) Тогда
		ТекстСообщения = НСтр("ru='Перед началом заполнения табличной части необходимо выбрать водителя';uk='Перед початком заповнення табличної частини необхідно обрати водія'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.Организация) Тогда
		ТекстСообщения = НСтр("ru='Перед началом заполнения табличной части необходимо выбрать организацию';uk='Перед початком заповнення табличної частини необхідно обрати організацію'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;

	Если Объект.Начисления.Количество()>0 Тогда
		
		ТекстВопроса =НСтр("ru='Перед заполнением табличная часть ""Начисления"" будет очищена. Продолжить?';uk='Перед заповненням таблична частина ""Нарахування"" буде очищена. Продовжити?'");
		Обработчик = Новый ОписаниеОповещения("АвтозаполнениеРассчетНачисленийПослеОтветаНаВопрос", ЭтотОбъект);
		ПоказатьВопрос(Обработчик, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
		Возврат;
	КонецЕсли;
	
	Если Объект.Проведен Тогда 
		ТекстВопроса =НСтр("ru='Автоматически рассчитать документ можно только после отмены его проведения. Выполнить отмену проведения документа?';uk='Автоматично розрахувати документ можна тільки після скасування його проведення. Виконати скасування проведення документа?'");
		Обработчик = Новый ОписаниеОповещения("АвтозаполнениеРассчетНачисленияПослеОтветаНаВопросПровести", ЭтотОбъект);
		ПоказатьВопрос(Обработчик, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
		Возврат;
	ИначеЕсли Модифицированность Тогда
		ТекстВопроса =НСтр("ru='Автоматически рассчитать документ можно только после его записи. Выполнить запись документа?';uk='Автоматично розрахувати документ можна тільки після його запису. Виконати запис документа?'");
		Обработчик = Новый ОписаниеОповещения("АвтозаполнениеРассчетНачисленияПослеОтветаНаВопросПровести", ЭтотОбъект);
		ПоказатьВопрос(Обработчик, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
		Возврат;
	КонецЕсли;
	
	ЗаполнитьРассчитатьНачисленияНаСервере();
	
	ОбновитьИтоги(ЭтаФорма); 
	
КонецПроцедуры  

&НаСервере
Процедура ЗаполнитьРассчитатьНачисленияНаСервере()
	
	Документ = РеквизитФормыВЗначение("Объект");
	Документ.Записать(РежимЗаписиДокумента.ОтменаПроведения);
  	Документ.АвтозаполнениеНачисления();
  	Документ.РассчитатьНачисления(Объект.Водитель);
	
  	ЗначениеВРеквизитФормы(Документ, "Объект");	
	
КонецПроцедуры

#КонецОбласти    

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ПодготовитьФормуНаСервере()

	УстановитьФункциональныеОпцииФормы();
	
	ТекущаяДатаДокумента = Объект.Дата;		
			
	ЗаполнитьСведенияОТС();
	
	УстановкаПоказанийСпидометраИБака();	
	
	ОбновитьДекорацииПоказанийСпидометраБака(); 	
	
	УстановитьЗаголовкиИДоступностьСубконто(ЭтаФорма, Объект.СчетПерерасхода, Истина, ""); 
	
	ЗаполнитьДобавленныеКолонкиТаблицыПутевыеЛисты();
	
	ОбновитьИтоги(ЭтаФорма);
	
	УправлениеФормой(ЭтаФорма);
	
	УстановитьСостояниеДокумента();

КонецПроцедуры

&НаСервере
Процедура УстановитьФункциональныеОпцииФормы()

	ОбщегоНазначенияБПКлиентСервер.УстановитьПараметрыФункциональныхОпцийФормыДокумента(ЭтаФорма);	
			
	ПлательщикНДС                   = УчетнаяПолитика.ПлательщикНДС(Объект.Организация, Объект.Дата);
			
	ПараметрыТехники = ПолучитьПараметрыТехники(Объект.Дата, Объект.Организация);
		
КонецПроцедуры 

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)

	Элементы = Форма.Элементы;
	Объект	 = Форма.Объект; 		
	
	Если ЗначениеЗаполнено(Объект.Водитель) Тогда
		Элементы.ДокументОснование.Доступность = ПолучитьЗначениеРеквизита(Объект.Водитель, "ИНАГРО_ДоговорПодряда"); 
	КонецЕсли; 	
	
	Элементы.ПутевыеЛистыДатаДокумента.Видимость    = Объект.СводныйПутевойЛист;
	Элементы.ПутевыеЛистыДатаПо.Видимость           = Объект.СводныйПутевойЛист;
	Элементы.ПутевыеЛистыРасстояниеДоп.Видимость    = Объект.СводныйПутевойЛист;
	Элементы.ПутевыеЛистыПробегСГрузомДоп.Видимость = Объект.СводныйПутевойЛист;
			
	Элементы.ДекорацияИспользоватьЗимниеНормыРасходаТоплива.Видимость = Объект.ИспользоватьЗимниеНормыРасходаТоплива;
	Элементы.СчетПерерасхода.Доступность                              = Объект.ВыделитьПерерасходТоплива; 
	
	Элементы.ГруппаВыпускПродукции.Видимость = ?(Форма.ПараметрыТехники.РедактироватьАналитикуВыпускаАвтотранспорт = Неопределено, Ложь,
												 Форма.ПараметрыТехники.РедактироватьАналитикуВыпускаАвтотранспорт);
												 
	ОбновитьИтоги(Форма);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСостояниеДокумента()
	
	СостояниеДокумента = ОбщегоНазначенияБП.СостояниеДокумента(Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппаСтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	Если ТекущаяСтраница = Элементы.ГруппаРаботы Тогда
		ОбновитьИтоги(ЭтаФорма);  
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаВидаСубконтоСчетаЗатрат(ТекущиеДанные)
	
	СвойстваСчетСписания = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(ТекущиеДанные.СчетСписания);
	
	Для Индекс = 1 По СвойстваСчетСписания.КоличествоСубконто Цикл
		Если СвойстваСчетСписания["ВидСубконто" + Индекс] = ПредопределенноеЗначение("ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат") Тогда
			ТекущиеДанные["Субконто" + Индекс] = ПараметрыТехники.СтатьяЗатратГСМ;			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьЗаголовкиИДоступностьСубконто(Форма, Счет, ЕстьПодразделение, Постфикс = "")

	ПоляФормы = Новый Структура("Субконто1, Субконто2, Субконто3",
		"Субконто" + Постфикс + "1",
		"Субконто" + Постфикс + "2",
		"Субконто" + Постфикс + "3");
		
	Если ЕстьПодразделение Тогда
		ПоляФормы.Вставить("Подразделение", "ПодразделениеЗатрат" + Постфикс);
	КонецЕсли;
	
	ЗаголовкиПолей = Новый Структура("Субконто1, Субконто2, Субконто3",
		"ЗаголовокСубконто" + Постфикс + "1",
		"ЗаголовокСубконто" + Постфикс + "2",
		"ЗаголовокСубконто" + Постфикс + "3");
	
	Если ЕстьПодразделение Тогда
		ЗаголовкиПолей.Вставить("Подразделение", "ЗаголовокПодразделение" + Постфикс);
	КонецЕсли;
	
	БухгалтерскийУчетКлиентСервер.ПриВыбореСчета(Счет, Форма, ПоляФормы, ЗаголовкиПолей);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ИзменитьПараметрыВыбораПолейСубконто(Форма, Суффикс, ИмяСчета)

	Объект = Форма.Объект;
	
	ПараметрыДокумента = СписокПараметровВыбораСубконто(Форма, Форма.Объект, "Субконто" + Суффикс + "%Индекс%");
	ПараметрыДокумента.Вставить("СчетУчета", Объект.СчетПерерасхода);
	
	БухгалтерскийУчетКлиентСервер.ИзменитьПараметрыВыбораПолейСубконто(
		Форма, 
		Форма.Объект, 
		"Субконто" + Суффикс + "%Индекс%", 
		"Субконто" + Суффикс + "%Индекс%", 
		ПараметрыДокумента);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьЗаголовкиИДоступностьСубконтоТЧ(Форма, Счет, ЕстьПодразделение, Постфикс = "", ЭтоТаблица = Ложь)
	
	ПоляФормы = Новый Структура("Субконто1, Субконто2, Субконто3",
								"ПутевыеЛистыСубконто" + Постфикс + "1",
								"ПутевыеЛистыСубконто" + Постфикс + "2",
								"ПутевыеЛистыСубконто" + Постфикс + "3"); 

	БухгалтерскийУчетКлиентСервер.ПриВыбореСчета(Счет, Форма, ПоляФормы, Неопределено, ЭтоТаблица);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ИзменитьПараметрыВыбораПолейСубконтоТЧ(Форма)
	
	Если Форма.Элементы.ПутевыеЛисты.ТекущаяСтрока <> Неопределено Тогда 
		СтрокаТаблицы = Форма.Объект.ПутевыеЛисты.НайтиПоИдентификатору(Форма.Элементы.ПутевыеЛисты.ТекущаяСтрока);
		ПараметрыДокумента = СписокПараметровВыбораСубконто(Форма, СтрокаТаблицы, "Субконто%Индекс%");
		ПараметрыДокумента.Вставить("СчетУчета", СтрокаТаблицы.СчетСписания);
		БухгалтерскийУчетКлиентСервер.ИзменитьПараметрыВыбораПолейСубконто(Форма, СтрокаТаблицы, "Субконто%Индекс%", "ПутевыеЛистыСубконто%Индекс%", ПараметрыДокумента);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьНалоговоеНазаначениеВТЧ(ТекущиеДанные)
	
	ХарактерЗатрат = УправлениеПроизводствомВызовСервера.ПолучитьХарактерЗатратПоСчетуЗатрат(ТекущиеДанные.СчетСписания, ,Объект.Дата); 			
	НалоговоеНазначение = Неопределено;
	
	СтруктураСубконто = Новый Структура("Субконто1,Субконто2,Субконто3", ТекущиеДанные.Субконто1, ТекущиеДанные.Субконто2, ТекущиеДанные.Субконто3);
	НалоговыйУчет.ОпределениеАналитикиНалоговогоУчетаВПроводкахДляЗатрат(СтруктураСубконто, ТекущиеДанные.СчетСписания, ХарактерЗатрат,
																			НалоговоеНазначение, , , , , Объект.Дата, ,ПлательщикНДС);
	
	ТекущиеДанные.НалоговоеНазначение = НалоговоеНазначение; 	

КонецПроцедуры

&НаКлиенте
Функция ПодготовитьПараметрыОбработкиПутевыеЛисты(Форма, СтрокаТабличнойЧасти)
	
	ДанныеСтрокиТаблицы = Новый Структура("СчетСписания, Субконто1, Субконто2, Субконто3");
		
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, СтрокаТабличнойЧасти);
	
	ДанныеОбъекта = Новый Структура("Дата, Организация, ВидОперации, Склад"); 
		
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
	ПараметрыОбработки = Новый Структура();
	ПараметрыОбработки.Вставить("ДанныеСтрокиТаблицы", ДанныеСтрокиТаблицы);
	ПараметрыОбработки.Вставить("ДанныеОбъекта", 	   ДанныеОбъекта);
	
	Возврат ПараметрыОбработки;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СписокПараметровВыбораСубконто(Форма, ПараметрыОбъекта, ШаблонИмяПоляОбъекта)

	СписокПараметров = Новый Структура;
	Для Индекс = 1 По 3 Цикл
		ИмяПоля = СтрЗаменить(ШаблонИмяПоляОбъекта, "%Индекс%", Индекс);
		Если ТипЗнч(ПараметрыОбъекта[ИмяПоля]) = Тип("СправочникСсылка.Контрагенты") Тогда
			СписокПараметров.Вставить("Контрагент", ПараметрыОбъекта[ИмяПоля]);
		ИначеЕсли ТипЗнч(ПараметрыОбъекта[ИмяПоля]) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
			СписокПараметров.Вставить("ДоговорКонтрагента", ПараметрыОбъекта[ИмяПоля]);
		ИначеЕсли ТипЗнч(ПараметрыОбъекта[ИмяПоля]) = Тип("СправочникСсылка.Номенклатура") Тогда
			СписокПараметров.Вставить("Номенклатура", ПараметрыОбъекта[ИмяПоля]);
		ИначеЕсли ТипЗнч(ПараметрыОбъекта[ИмяПоля]) = Тип("СправочникСсылка.Склады") Тогда
			СписокПараметров.Вставить("Склад", ПараметрыОбъекта[ИмяПоля]);
		КонецЕсли;
	КонецЦикла;
	СписокПараметров.Вставить("Организация", Форма.Объект.Организация); 	
	
	Возврат СписокПараметров;

КонецФункции   

&НаСервере
Процедура ЗаполнитьДобавленныеКолонкиТаблицыПутевыеЛисты()	
	
	Для Каждого СтрокаТабличнойЧасти Из Объект.ПутевыеЛисты Цикл							
		СтрокаТабличнойЧасти.ПробегСГрузомОбщ = СтрокаТабличнойЧасти.ПробегСГрузом + СтрокаТабличнойЧасти.ПробегСГрузомЗаГородом;
		ЗаполнитьДобавленныеКолонкиСтрокиТаблицыПутевыеЛисты(СтрокаТабличнойЧасти);
	КонецЦикла;	
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьДобавленныеКолонкиСтрокиТаблицыПутевыеЛисты(СтрокаТаблицы)
	
	ПоляОбъектаСубконто	= Новый Структура("Субконто1, Субконто2, Субконто3", "Субконто1", "Субконто2", "Субконто3");

	БухгалтерскийУчетКлиентСервер.УстановитьДоступностьСубконто(СтрокаТаблицы.СчетСписания, СтрокаТаблицы, ПоляОбъектаСубконто);
	
КонецПроцедуры 

&НаСервере
Процедура ЗаполнитьСведенияОТС()
	
	СвойстваТС = РегистрыСведений.ИНАГРО_ТранспортныеСредства.ПолучитьПоследнее(Объект.Дата, Новый Структура("ОсновноеСредство", Объект.Автомобиль));
	
	ТехХарактеристики = Нстр("ru='Марка ';uk='Марка '") + Объект.Автомобиль.Модель.Наименование 
											  + НСтр("ru=', расход ';uk=', витрати '") 
											  + ?(Объект.ИспользоватьЗимниеНормыРасходаТоплива, СвойстваТС.НормаРасходаТопливаЗимой, СвойстваТС.НормаРасходаТоплива) 
											  + Нстр("ru=' л. на 100 км.';uk=' л. на 100 км.'");
		
КонецПроцедуры

&НаСервере
Процедура УстановкаПоказанийСпидометраИБака()
	
	ПоказанияСпидометраИБака = ИНАГРО_Транспорт.ПолучитьПоказанияСпидометраИБака(Объект.Дата, Объект.Автомобиль, Объект.Ссылка);
	
	Объект.СпидометрДо = ПоказанияСпидометраИБака.ПоказанияСпидометра;
	Объект.БакДо	   = ПоказанияСпидометраИБака.ПоказанияБака;
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьНормуРасходаТоплива()
	
	Если Объект.ПутевыеЛисты.Количество() = 0 Тогда
		Объект.ЗатратыТопливаПоНорме = 0;
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаТабличнойЧасти Из Объект.ПутевыеЛисты Цикл
		
		НормаРасходаТопливаПоСтроке(СтрокаТабличнойЧасти);		
		
	КонецЦикла;	
	
	Объект.ЗатратыТопливаПоНорме = Объект.ПутевыеЛисты.Итог("ЗатратыТопливаПоНорме");
	
КонецПроцедуры

&НаКлиенте
Процедура НормаРасходаТопливаПоСтроке(СтрокаТабличнойЧасти)
	
	ЗаполнитьСведенияОТС();
	
	// Сведенья о нормах
	Если Объект.ИспользоватьЗимниеНормыРасходаТоплива Тогда
		НормаРасходаТоплива = СвойстваТС.НормаРасходаТопливаЗимой;
		НормаРасходаТопливаПоЧасам = СвойстваТС.НормаРасходаТопливаПоЧасамЗимой;
	Иначе
		НормаРасходаТоплива = СвойстваТС.НормаРасходаТоплива;
		НормаРасходаТопливаПоЧасам = СвойстваТС.НормаРасходаТопливаПоЧасам;
	КонецЕсли;
	
	КоэффРасхода = СвойстваТС.КоэффРасхода;
	
	// Посчитаем сумму надбавок суммами""
	СуммаНадбавок        = СуммаНадбавокСуммой();                  
	НадбавкаПоСтроке     = Окр(СуммаНадбавок / Объект.ПутевыеЛисты.Количество(), 3);
	НадбавкиКонтроль     = 0;
	ОбщийПроцентНадбавки = СуммаНадбавокПроцентом();
	
	СведенияОТехОперации = ПолучитьСтруктуруРасценокВидаРабот(
			Объект.Дата,
			СтрокаТабличнойЧасти.ТехнологическаяОперация,
			СтрокаТабличнойЧасти.Прицеп);		
	
	Норма                     = 0;
	НормаРасходаТопливаСтроки = 0;
	
	// Определим норму расхода топлива для строки
	Если СведенияОТехОперации.Свойство("ТехнологическаяОперация") Тогда		

		Если СведенияОТехОперации.УказатьНормыРасходаНаВидРабот Тогда			
			Если Объект.ИспользоватьЗимниеНормыРасходаТоплива Тогда
				НормаРасходаТопливаСтроки = СведенияОТехОперации.НормаРасходаТопливаЗимой;
			Иначе
				НормаРасходаТопливаСтроки = СведенияОТехОперации.НормаРасходаТоплива;
			КонецЕсли;			
		Иначе
			Если СвойстваТС.НормыК = "КЧасам" Тогда 			
				НормаРасходаТопливаСтроки = НормаРасходаТопливаПоЧасам;
			Иначе	
				НормаРасходаТопливаСтроки = НормаРасходаТоплива; 			
			КонецЕсли;			
		КонецЕсли;    		
		
		Если СведенияОТехОперации.УказатьНадбавкуНаНорму Тогда				
			
			РазмерНадбавки = ПолучитьЗначениеРеквизита(СведенияОТехОперации.Надбавка, "РазмерНадбавки");
			Если РазмерНадбавки = Неопределено Тогда
				РазмерНадбавки = 0;						
				ТекстСообщения = НСтр("ru='В справочнике ""Надбавки"" для надбавки';uk='У довіднику ""Надбавки"" для надбавки'") + СведенияОТехОперации.Надбавка +
				НСтр("ru=' не указан размер надбавки или он равен нулю!';uk=' не вказаий розмір надбавки або він дорівнює нулю!'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
				Возврат;
			КонецЕсли; 	
			
			Если ПолучитьЗначениеРеквизита(СведенияОТехОперации.Надбавка, "ВПроцентах") Тогда
				НормаРасходаТопливаСтроки = НормаРасходаТопливаСтроки * (1 + РазмерНадбавки / 100);	
			Иначе 
				НормаРасходаТопливаСтроки = НормаРасходаТопливаСтроки + РазмерНадбавки;		
			КонецЕсли; 	 
			
		КонецЕсли; 
		
		// Учтём использование прицепа для случая, когда норма расчитывается исходя из норм на ТС (в нормах для техоперации прицеп уже учтён) 
		Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.Прицеп) И НЕ СведенияОТехОперации.УказатьНормыРасходаНаВидРабот Тогда		
			НормаРасходаТопливаСтроки = НормаРасходаТопливаСтроки + СвойстваТС.НормаНаПрицеп; 		
		КонецЕсли;
		           		
		Если СведенияОТехОперации.УказатьНормыРасходаНаВидРабот  Тогда 			
			Если СведенияОТехОперации.НормыК = "КЧасам" Тогда 			
				// расчет нормы от отработаных часов
				Норма = НормаРасходаТопливаСтроки * СтрокаТабличнойЧасти.Время; 			
			ИначеЕсли СведенияОТехОперации.НормыК = "НаВидРабот" Тогда			
				// расчет нормы от Вида работ
				Норма = НормаРасходаТопливаСтроки;			
			Иначе			
				// расчет нормы от километража
				РасчитатьНормуОтКилометража(СвойстваТС, СтрокаТабличнойЧасти, СведенияОТехОперации, НормаРасходаТопливаСтроки, Норма);			
			КонецЕсли;
		Иначе
			// расчет нормы от времени работы
			Норма = НормаРасходаТопливаСтроки * СтрокаТабличнойЧасти.Время; 			
		КонецЕсли;

	Иначе		

		Если СвойстваТС.НормыК = "КЧасам" Тогда 			
			НормаРасходаТопливаСтроки = НормаРасходаТопливаПоЧасам;
		Иначе	
			НормаРасходаТопливаСтроки = НормаРасходаТоплива; 			
		КонецЕсли;			
		
		// Проверим использование прицепа
		Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.Прицеп) Тогда		
			НормаРасходаТопливаСтроки = НормаРасходаТопливаСтроки + СвойстваТС.НормаНаПрицеп; 		
		КонецЕсли;
		
		Если СвойстваТС.НормыК = "КЧасам" Тогда 			
			// расчет нормы от времени работы
			Норма = НормаРасходаТопливаСтроки * СтрокаТабличнойЧасти.Время;
		Иначе	
			// расчет нормы от километража
			РасчитатьНормуОтКилометража(СвойстваТС, СтрокаТабличнойЧасти, СведенияОТехОперации, НормаРасходаТопливаСтроки, Норма); 	
		КонецЕсли;
		
	КонецЕсли;  	
	
	Если ОбщийПроцентНадбавки <> 0 Тогда 		
		Норма = Норма + (Норма * ОбщийПроцентНадбавки / 100);		
	КонецЕсли;
	
	Если СтрокаТабличнойЧасти.НомерСтроки = Объект.ПутевыеЛисты.Количество() - 1 Тогда
		Норма = Норма + (НадбавкаПоСтроке - НадбавкиКонтроль);
	Иначе
		Норма = Норма + НадбавкаПоСтроке;
		НадбавкиКонтроль = НадбавкиКонтроль + НадбавкаПоСтроке;
	КонецЕсли;
	
	СтрокаТабличнойЧасти.ЗатратыТопливаПоНорме = Норма;
	
КонецПроцедуры	

&НаКлиенте
Процедура РассчитатьФактРасходаТоплива()
	
	// Расчитать факт расхода топлива для строк ТЧ ПутевыеЛисты
	
	Для Каждого СтрокаТабличнойЧасти Из Объект.ПутевыеЛисты Цикл
		Если СтрокаТабличнойЧасти.РасходТопливаВручную Тогда
			Продолжить;
		КонецЕсли; 
		СтрокаТабличнойЧасти.ЗатратыТопливаПоФакту = 0;
	КонецЦикла;
	
	ЗатратыТопливаПоФакту        = 0;
	ЗатратыТопливаПоФактуПутевых = 0; 	
	Для Каждого СтрокаТабличнойЧасти Из Объект.ТопливоИзрасходованное Цикл
		ЗатратыТопливаПоФактуПутевых = ЗатратыТопливаПоФактуПутевых + (СтрокаТабличнойЧасти.Количество / ?(СтрокаТабличнойЧасти.Коэффициент = 0, 1, СтрокаТабличнойЧасти.Коэффициент));
	КонецЦикла; 
	
	ЗатратыТопливаПоНормеПутевых = 0;
	ВычестьФактТоплива           = 0;
	Для Каждого СтрокаТабличнойЧасти Из Объект.ПутевыеЛисты Цикл
		Если НЕ СтрокаТабличнойЧасти.РасходТопливаВручную Тогда
			ЗатратыТопливаПоНормеПутевых = ЗатратыТопливаПоНормеПутевых + СтрокаТабличнойЧасти.ЗатратыТопливаПоНорме;
		Иначе
			ВычестьФактТоплива = ВычестьФактТоплива + СтрокаТабличнойЧасти.ЗатратыТопливаПоФакту;
		КонецЕсли;
	КонецЦикла; 
	
	ОстатокРасхода = ЗатратыТопливаПоФактуПутевых - ВычестьФактТоплива;
	ЗатратыТопливаПоФактуПутевых = ЗатратыТопливаПоФактуПутевых - ВычестьФактТоплива;
	
	ТаблицаПутевыхЛистов = Объект.ПутевыеЛисты.НайтиСтроки(Новый Структура("РасходТопливаВручную", Ложь));
	
	Индекс = 1;
	Для Каждого СтрокаТабличнойЧасти Из ТаблицаПутевыхЛистов Цикл
		ЗатратыТопливаПоФакту = ЗатратыТопливаПоФактуПутевых * СтрокаТабличнойЧасти.ЗатратыТопливаПоНорме / ?(ЗатратыТопливаПоНормеПутевых = 0, 1, ЗатратыТопливаПоНормеПутевых);
		ЗатратыТопливаПоФакту = Окр(ЗатратыТопливаПоФакту , 3);
		Если Индекс = Объект.ПутевыеЛисты.Количество() Тогда
			СтрокаТабличнойЧасти.ЗатратыТопливаПоФакту = ОстатокРасхода;
			ОстатокРасхода = 0;
		Иначе
			СтрокаТабличнойЧасти.ЗатратыТопливаПоФакту = ЗатратыТопливаПоФакту;
			ОстатокРасхода = ОстатокРасхода - ЗатратыТопливаПоФакту;
		КонецЕсли;
		Индекс = Индекс + 1;
	КонецЦикла;
	
	Если ОстатокРасхода <> 0 Тогда
		ТекстСообщения = НСтр("ru='Расход топлива по операциям не соответствует расходу топлива на закладке Топливо!';uk='Витрати пального по операціях не відповідає витратам пального на закладці Пальне!'");		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли; 
		
КонецПроцедуры

&НаКлиенте	
Процедура РассчитатьЗПДляСтроки(СтрокаТабличнойЧасти)
	
	Если СтрокаТабличнойЧасти = Неопределено Тогда
		Возврат
	КонецЕсли;  	
		
	ТекущаяДата = ?(Объект.СводныйПутевойЛист, СтрокаТабличнойЧасти.ДатаДокумента, Объект.Дата); 	
		
	УстановитьФункциональныеОпцииФормы();  	
	
	СведенияОТехОперации = ПолучитьСтруктуруРасценокВидаРабот(
			ТекущаяДата,
			СтрокаТабличнойЧасти.ТехнологическаяОперация,
			СтрокаТабличнойЧасти.Прицеп);		
			
	СтрокаТабличнойЧасти.СуммаЗП = 0;
	
	Если СведенияОТехОперации.Свойство("ТехнологическаяОперация") Тогда
		// расчет почасовки
		СтрокаТабличнойЧасти.СуммаЗП = СтрокаТабличнойЧасти.СуммаЗП + СтрокаТабличнойЧасти.Время * СведенияОТехОперации.РасценкаЗаЧас;
		
		// расчет за тонаж
		СтрокаТабличнойЧасти.СуммаЗП = СтрокаТабличнойЧасти.СуммаЗП + СтрокаТабличнойЧасти.Тоннаж * СведенияОТехОперации.РасценкаЗаТонну;
		
		// расчет за тоннокилометры
		СтрокаТабличнойЧасти.СуммаЗП = СтрокаТабличнойЧасти.СуммаЗП + СтрокаТабличнойЧасти.Тоннаж /
			?(СведенияОТехОперации.НеУчитыватьКоличествоХодокДляЗП, 1, СтрокаТабличнойЧасти.Ходок) *
			(СтрокаТабличнойЧасти.ПробегСГрузом + СтрокаТабличнойЧасти.ПробегСГрузомЗаГородом) * СведенияОТехОперации.РасценкаЗаТКМ;
		
		// расчет за километры
		СтрокаТабличнойЧасти.СуммаЗП = СтрокаТабличнойЧасти.СуммаЗП + СтрокаТабличнойЧасти.Расстояние * СведенияОТехОперации.РасценкаЗаКМ;
		
		// расчет за подъемы
		СтрокаТабличнойЧасти.СуммаЗП = СтрокаТабличнойЧасти.СуммаЗП + СтрокаТабличнойЧасти.КвоПодъемов * СведенияОТехОперации.РасценкаЗаПодъем;
		
		// расчет за спец работы
		СтрокаТабличнойЧасти.СуммаЗП = СтрокаТабличнойЧасти.СуммаЗП + СтрокаТабличнойЧасти.КвоЕдСпецСтр * СведенияОТехОперации.РасценкаЗаСпецРаботы;
	КонецЕсли;
	
	// доплата за ночные
	ДоплатаЗаНочные = 0;
	Если (ПараметрыТехники.ДоплачиватьЗаНочные > 0) И (СтрокаТабличнойЧасти.ЧасовНочных > 0) Тогда
		ДоплатаЗаНочные = СтрокаТабличнойЧасти.СуммаЗП * (СтрокаТабличнойЧасти.ЧасовНочных) / СтрокаТабличнойЧасти.Время * ПараметрыТехники.ДоплачиватьЗаНочные / 100;
	КонецЕсли;
	
	СтрокаТабличнойЧасти.ОплатаДополнительная = ДоплатаЗаНочные;
	
	// доплата за праздничные
	ДоплатаЗаПраздничные = 0;
	Если (ПараметрыТехники.ДоплачиватьЗаПраздничные > 0) И (СтрокаТабличнойЧасти.ЧасовПраздничных > 0) Тогда
		ДоплатаЗаПраздничные = СтрокаТабличнойЧасти.СуммаЗП * (СтрокаТабличнойЧасти.ЧасовПраздничных) / СтрокаТабличнойЧасти.Время * ПараметрыТехники.ДоплачиватьЗаПраздничные / 100;
	КонецЕсли;
	
	// доплата за выполнение нормы
	// пока не реализовано
	
	// За класность
	СтрокаТабличнойЧасти.ДоплатаЗаКлассность = 0;
	
	СвойстваВодителя = ПолучитьСвойстваВодителя(ТекущаяДата, Объект.Водитель);
	
	Если ПараметрыТехники.ДоплачиватьВодителямЗаКлассность Тогда
		Если СвойстваВодителя.КлассностьВодителя = ПредопределенноеЗначение("Перечисление.ИНАГРО_КлассВодителя.ПервыйКласс") Тогда
			// За первый класс 25%
			СтрокаТабличнойЧасти.ДоплатаЗаКлассность = СтрокаТабличнойЧасти.СуммаЗП * 0.25;
		ИначеЕсли СвойстваВодителя.КлассностьВодителя = ПредопределенноеЗначение("Перечисление.ИНАГРО_КлассВодителя.ВторойКласс") Тогда
			// За второй класс 10%
			СтрокаТабличнойЧасти.ДоплатаЗаКлассность = СтрокаТабличнойЧасти.СуммаЗП * 0.1;
		КонецЕсли;		
	КонецЕсли;
	СтрокаТабличнойЧасти.ОплатаДополнительная = СтрокаТабличнойЧасти.ОплатаДополнительная + СтрокаТабличнойЧасти.ДоплатаЗаКлассность;
	
	Если СведенияОТехОперации.Свойство("ТехнологическаяОперация") Тогда 
		Если СведенияОТехОперации.Процент > 0 Тогда
			СтрокаТабличнойЧасти.СуммаЗП = СтрокаТабличнойЧасти.СуммаЗП * СведенияОТехОперации.Процент;
		КонецЕсли;
	КонецЕсли;
	
	СтрокаТабличнойЧасти.СуммаЗП = СтрокаТабличнойЧасти.СуммаЗП  + ДоплатаЗаПраздничные + СтрокаТабличнойЧасти.ДоплатаСуммой;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗатратыТопливаПоФакту()
		
	ЗатратыТопливаПоФакту = 0;
	
	Для Каждого СтрокаТабличнойЧасти Из Объект.ТопливоИзрасходованное Цикл
		
		Если СтрокаТабличнойЧасти.Коэффициент <> 0 Тогда
			ЗатратыТопливаПоФакту = ЗатратыТопливаПоФакту + СтрокаТабличнойЧасти.Количество / СтрокаТабличнойЧасти.Коэффициент;
		Иначе
			ЗатратыТопливаПоФакту = ЗатратыТопливаПоФакту + СтрокаТабличнойЧасти.Количество;
		КонецЕсли;
		
	КонецЦикла;
	
	Объект.ЗатратыТопливаПоФакту = ЗатратыТопливаПоФакту; 	 	
	
КонецПроцедуры

&НаСервере
Функция СуммаНадбавокСуммой()
	
	Возврат Документы.ИНАГРО_ПутевойЛистГрузовогоАвтомобиля.СуммаНадбавокСуммой(Объект);
	
КонецФункции

&НаСервере
Функция СуммаНадбавокПроцентом()
	
	Возврат Документы.ИНАГРО_ПутевойЛистГрузовогоАвтомобиля.СуммаНадбавокПроцентом(Объект);
	
КонецФункции  

&НаКлиенте
Процедура РасчитатьНормуОтКилометража(СвойстваТС, СтрокаТабличнойЧасти, СведенияОТехОперации, НормаРасходаТопливаСтроки, Норма)
	
	Если СвойстваТС.НеУчитыватьПробег Тогда
		ЗначПробегСГрузом          = 0;
		ЗначПробегСГрузомЗаГородом = 0;
	Иначе
		ЗначПробегСГрузом          = СтрокаТабличнойЧасти.ПробегСГрузом;
		ЗначПробегСГрузомЗаГородом = СтрокаТабличнойЧасти.ПробегСГрузомЗаГородом;
	КонецЕсли;
	
	// надбавка литров за перевозку, тоннаж и ходки
	ЗаХодку = 0;
	
	Если СвойстваТС.НадбавкаЗаХодку Тогда
		НадбЗаХод = 0.25;
	Иначе
		НадбЗаХод = 0;
	КонецЕсли;
	
	ЗаХодку = СтрокаТабличнойЧасти.Ходок * НадбЗаХод;
	
	Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.Расстояние) Тогда
		ПроцентГрунтовойДороги = Окр((СтрокаТабличнойЧасти.ПробегПоГрунтовойДороге * 100 / СтрокаТабличнойЧасти.Расстояние) * СвойстваТС.НадбавкаПоГрунтовойДороге, 2); 
	Иначе
		ПроцентГрунтовойДороги = 1;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СвойстваТС.НадбавкаПоГрунтовойДороге) Тогда
		НадбавкаЗаВидРаботы = НормаРасходаТопливаСтроки * ПроцентГрунтовойДороги / 100;
	Иначе
		НадбавкаЗаВидРаботы = 0;
	КонецЕсли;
	
	// Надбавка за перевезенные тоннокилометры
	ЗаПеревозку = 0;
	
	Если СведенияОТехОперации.Свойство("ТехнологическаяОперация") Тогда
		
		Если НЕ СведенияОТехОперации.НеПрименятьНадбавкуЗаПеревозГруза Тогда
			//ЗаПеревозку = ((СвойстваТС.ЗаПеревозку + СвойстваТС.КоэффРасхода) * ЗначПробегСГрузом +
			//				(СвойстваТС.ЗаПеревозку + СвойстваТС.КоэффЗаГородом) * ЗначПробегСГрузомЗаГородом ) *
			//				СтрокаТабличнойЧасти.Тоннаж / ?(СтрокаТабличнойЧасти.Ходок = 0, 1 , СтрокаТабличнойЧасти.Ходок) / 100;
			
			// Надбавку за "За перевезення на 100 т/км" берем в первую очередь из техоперации, если в техоперации ее нет - из надбавок на ТС
			Если СведенияОТехОперации.ЗаПеревозку <> 0 Тогда
				ЗаПеревозкуНа100км = СведенияОТехОперации.ЗаПеревозку;
			Иначе
				ЗаПеревозкуНа100км = СвойстваТС.ЗаПеревозку;
			КонецЕсли;	
			
			ЗаПеревозку = ((ЗаПеревозкуНа100км + СвойстваТС.КоэффРасхода) * ЗначПробегСГрузом +
							(ЗаПеревозкуНа100км + СвойстваТС.КоэффЗаГородом) * ЗначПробегСГрузомЗаГородом ) *
							СтрокаТабличнойЧасти.Тоннаж / ?(СтрокаТабличнойЧасти.Ходок = 0, 1 , СтрокаТабличнойЧасти.Ходок) / 100;
		КонецЕсли;
		
		Норма = (НормаРасходаТопливаСтроки + НадбавкаЗаВидРаботы) / 100 * СтрокаТабличнойЧасти.Расстояние + ЗаХодку + ЗаПеревозку;
		
		Если СведенияОТехОперации.ИспользоватьНормыДляРаботНаХПД Тогда
			// особености работы на ХПД
			Норма = Норма + (СтрокаТабличнойЧасти.Ходок * СвойстваТС.НормаСПониженнойСкоростью) + (СтрокаТабличнойЧасти.Ходок * СвойстваТС.НормаПриМаневрах); 			
			Норма = Норма + НадбЗаХод * СтрокаТабличнойЧасти.Ходок; 			
		КонецЕсли;  
		
	Иначе 
		
		ЗаПеревозку = ((СвойстваТС.ЗаПеревозку + СвойстваТС.КоэффРасхода) * ЗначПробегСГрузом +
						(СвойстваТС.ЗаПеревозку + СвойстваТС.КоэффЗаГородом) * ЗначПробегСГрузомЗаГородом ) *
						СтрокаТабличнойЧасти.Тоннаж / ?(СтрокаТабличнойЧасти.Ходок = 0, 1 , СтрокаТабличнойЧасти.Ходок) / 100;
		
		Норма = (НормаРасходаТопливаСтроки + НадбавкаЗаВидРаботы) / 100 * СтрокаТабличнойЧасти.Расстояние + ЗаХодку + ЗаПеревозку;

	КонецЕсли;	
		
	// Надбавка за подъем
	Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.КвоПодъемов) Тогда
		Норма = Норма + СвойстваТС.ЗаПодъем * СтрокаТабличнойЧасти.КвоПодъемов;
	КонецЕсли;
	
	// Надбавка за спец работы
	Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.КвоЕдСпецСтр) Тогда
		
		Если СведенияОТехОперации.Свойство("ТехнологическаяОперация") Тогда
			Если СведенияОТехОперации.УказатьНормыРасходаНаВидРабот Тогда
				Норма = Норма + СведенияОТехОперации.НормаСпецРаботы * СтрокаТабличнойЧасти.КвоЕдСпецСтр;
			Иначе	
				Норма = Норма + СвойстваТС.НормаСпецТранспорта * СтрокаТабличнойЧасти.КвоЕдСпецСтр;
			КонецЕсли; 
		Иначе	
			Норма = Норма + СвойстваТС.НормаСпецТранспорта * СтрокаТабличнойЧасти.КвоЕдСпецСтр;
		КонецЕсли;
		
	КонецЕсли;
	
	// Учтем надбавку из ТО "За перевезення на 100 т/км"	
	Если СведенияОТехОперации.Свойство("ТехнологическаяОперация") Тогда
		Норма = Норма + СведенияОТехОперации.ЗаПеревозку * СтрокаТабличнойЧасти.КвоЕдСпецСтр;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДекорацииПоказанийСпидометраБака()
	
	// Спидометра
	Если (Объект.СпидометрДо + ПолучитьОбщееРасстояние()) <> Объект.СпидометрПосле Тогда 
		Элементы.ДекорацияПоказанияСпидометра.Видимость = Истина;
	Иначе
		Элементы.ДекорацияПоказанияСпидометра.Видимость = Ложь;
	КонецЕсли;
	
	// Бака
	Если Окр((Объект.БакДо + ПолучитьИзрасходованноеТопливо()), 3) <> Объект.БакПосле Тогда 
		Элементы.ДекорацияПоказанияБака.Видимость = Истина;
	Иначе
		Элементы.ДекорацияПоказанияБака.Видимость = Ложь;
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Функция ПолучитьОбщееРасстояние()
	
	ОбщееРасстояние = 0;
	
	Для Каждого СтрокаТабличнойЧасти Из Объект.ПутевыеЛисты Цикл
		ОбщееРасстояние = ОбщееРасстояние + СтрокаТабличнойЧасти.Расстояние + СтрокаТабличнойЧасти.РасстояниеДоп;
	КонецЦикла;
	
	Возврат ОбщееРасстояние;
	
КонецФункции

&НаСервере
Функция ПолучитьИзрасходованноеТопливо()
	
	Расчет = 0;
	
	Для Каждого СтрокаТабличнойЧасти Из Объект.ТопливоВыданное Цикл
		Расчет = Расчет + ?(СтрокаТабличнойЧасти.Коэффициент = 0, 1, СтрокаТабличнойЧасти.Количество / СтрокаТабличнойЧасти.Коэффициент);
	КонецЦикла;
	
	Для Каждого СтрокаТабличнойЧасти Из Объект.ТопливоИзрасходованное Цикл
		Расчет = Расчет - ?(СтрокаТабличнойЧасти.Коэффициент = 0, 1, СтрокаТабличнойЧасти.Количество / СтрокаТабличнойЧасти.Коэффициент);
	КонецЦикла;
	
	Возврат Расчет;
	
КонецФункции

&НаСервере
Процедура ОбработкаВыбораПодборСервер(ВыбранноеЗначение)
	
	ТекущиеДанные = Объект.ПутевыеЛисты.Добавить();
	
	ДанныеСтрокиТаблицы = Новый Структура; 
	ДанныеСтрокиТаблицы.Вставить("ТехнологическаяОперация", ВыбранноеЗначение.ТехнологическаяОперация);
	ДанныеСтрокиТаблицы.Вставить("Агрегат",                  ВыбранноеЗначение.МаркаАгрегата);
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтрокиТаблицы);		

КонецПроцедуры

&НаСервере
Функция ПолучитьСтруктуруРасценокВидаРабот(ТекущаяДата, ТехнологическаяОперация, Агрегат)
	
	Возврат ИНАГРО_Транспорт.ИНАГРО_ПолучитьСтруктуруРасценок(
				ТекущаяДата,
				Объект.Автомобиль.Модель,
				ТехнологическаяОперация,
				Агрегат,
				Объект.Организация);	
		
КонецФункции
			
&НаСервереБезКонтекста
Функция ПолучитьПараметрыТехники(Дата, Организация)
	
	Возврат РегистрыСведений.ИНАГРО_УчетнаяПолитика.ПолучитьПоследнее(Дата, Новый Структура("Организация", Организация));
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьСвойстваВодителя(Дата, Водитель)
	
	Возврат РегистрыСведений.ИНАГРО_СведенияОВодителе.ПолучитьПоследнее(Дата, Новый Структура("ФизЛицо", Водитель));

КонецФункции 

&НаСервереБезКонтекста
Функция ПолучитьЗначениеРеквизита(Ссылка, Реквизит)
	
	Возврат	ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, Реквизит);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьИтоги(Форма)
	
	Объект = Форма.Объект;
	
	Форма.ПробегСГрузомОбщИтог = Объект.ПутевыеЛисты.Итог("ПробегСГрузом") + Объект.ПутевыеЛисты.Итог("ПробегСГрузомЗаГородом");
	
	СуммаЗППоРаботам     = Объект.ПутевыеЛисты.Итог("СуммаЗП") + Объект.ПутевыеЛисты.Итог("ОплатаДополнительная"); 
	СуммаЗППоНачислениям = Объект.Начисления.Итог("Результат"); 
	
	Для Каждого СтрокаТабличнойЧасти Из Объект.ПутевыеЛисты Цикл							
		СтрокаТабличнойЧасти.ПробегСГрузомОбщ = СтрокаТабличнойЧасти.ПробегСГрузом + СтрокаТабличнойЧасти.ПробегСГрузомЗаГородом;	
	КонецЦикла;	
		
КонецПроцедуры

#Область ПроцедурыИФункцииОбработкаВопросов

&НаКлиенте
Процедура АвтозаполнениеНачисленийПослеОтветаНаВопрос(Ответ, ПараметрыВыполнения) Экспорт
	Если Ответ <> КодВозвратаДиалога.ОК Тогда
		Возврат;
	КонецЕсли;
	
	Объект.Начисления.Очистить();
		//
	ЗаполнитьНачисленияНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура АвторасчетНачисленияПослеОтветаНаВопросПровести(Ответ, ПараметрыВыполнения) Экспорт
	Если Ответ <> КодВозвратаДиалога.ОК Тогда
		Возврат;
	КонецЕсли;
	
	РассчитатьНачисленияНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура АвтозаполнениеРассчетНачисленияПослеОтветаНаВопросПровести(Ответ, ПараметрыВыполнения) Экспорт
	Если Ответ <> КодВозвратаДиалога.ОК Тогда
		Возврат;
	КонецЕсли;
	
	Объект.Начисления.Очистить();
	
	ЗаполнитьРассчитатьНачисленияНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура АвтозаполнениеРассчетНачисленийПослеОтветаНаВопрос(Ответ, ПараметрыВыполнения) Экспорт
	Если Ответ <> КодВозвратаДиалога.ОК Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.Проведен Тогда 
		ТекстВопроса =НСтр("ru='Автоматически рассчитать документ можно только после отмены его проведения. Выполнить отмену проведения документа?';uk='Автоматично розрахувати документ можна тільки після скасування його проведення. Виконати скасування проведення документа?'");
		Обработчик = Новый ОписаниеОповещения("АвтозаполнениеРассчетНачисленияПослеОтветаНаВопросПровести", ЭтотОбъект);
		ПоказатьВопрос(Обработчик, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
		Возврат;
	ИначеЕсли Модифицированность Тогда
		ТекстВопроса =НСтр("ru='Автоматически рассчитать документ можно только после его записи. Выполнить запись документа?';uk='Автоматично розрахувати документ можна тільки після його запису. Виконати запис документа?'");
		Обработчик = Новый ОписаниеОповещения("АвтозаполнениеРассчетНачисленияПослеОтветаНаВопросПровести", ЭтотОбъект);
		ПоказатьВопрос(Обработчик, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
		Возврат;
	КонецЕсли;
	
	Объект.Начисления.Очистить();
		//
	ЗаполнитьРассчитатьНачисленияНаСервере();
КонецПроцедуры

#КонецОбласти    

#КонецОбласти

#Область СлужебныеПроцедурыИФункцииБСП

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти 


