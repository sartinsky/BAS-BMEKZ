#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды 
	
	ИНАГРО_КонтрольПроцессов.ПроверкаРазрешенийПередОткрытием(ЭтотОбъект, Отказ);
	
	КонтрольПриказовПередОткрытием(Отказ);
	
	Если Параметры.Ключ.Пустая() Тогда
		ПодготовитьФормуНаСервере();		
	КонецЕсли;
	
	// Уведомим о появлении функционала рабочей даты
	ЭтаФорма.НастройкиПредупреждений = ОбщегоНазначенияБП.НастройкиПредупрежденийОбИзменениях("РабочаяДатаИзДокумента");
	 
	// Показываем, если это новый документ и сама рабочая дата еще не установлена.
	ЭтаФорма.НастройкиПредупреждений.РабочаяДатаИзДокумента = ЭтаФорма.НастройкиПредупреждений.РабочаяДатаИзДокумента
	 	И ЭтаФорма.Параметры.Ключ.Пустая()
	  	И НЕ ЗначениеЗаполнено(БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("РабочаяДата"));	  
		
	УстановитьПараметрыВыбораВидОперации();
	
	// Если форма вызвана в режиме смена вида операции - модифицируем сразу при открытии, 
	// чтобы можно было подтвердить или отказаться от изменения путем сохранения или 
	// отказа от сохранения документа.
	Если Параметры.Свойство("ИзменитьВидОперации")
		И Параметры.ИзменитьВидОперации Тогда
		
		// Не кэшируем переменную Объект, т.к. может вызываться Форма.ИзменитьРеквизиты(),
		// которая меняет Объект.
		Объект.ВидОперации = Параметры.ЗначенияЗаполнения.ВидОперации;
		
		УстановитьЗаголовокФормы();		
		УправлениеФормойНаСервере();
		
		Модифицированность = Истина;
		
	КонецЕсли; 	
	
	// ПодключаемоеОборудование
	ИНАГРО_ПодключаемоеОборудованиеОбщегоНазначения.НастроитьПодключаемоеОборудование(ЭтаФорма);
	// ПодключаемоеОборудование	
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если  ТипЗнч(Параметр) = Тип("Структура") 
		И Параметр.Свойство("ИдентификаторВызывающейФормы")
		И Параметр.ИдентификаторВызывающейФормы = УникальныйИдентификатор Тогда
		Если ИмяСобытия = "СозданЛабораторныйАнализ" ИЛИ ИмяСобытия = "ИзмененЛабораторныйАнализ" Тогда
			Если ИНАГРО_Элеватор.ЛабораторныйАнализПроверкаЗаполнения(Параметр.ДокументСсылка, ПолучитьПараметрыДляПроверкиЗаполнения()) Тогда
				Объект.ЛабораторныйАнализ = Параметр.ДокументСсылка;
				ЛабораторныйАнализПриИзмененииНаСервере();
				Модифицированность = Истина;
			КонецЕсли;
		КонецЕсли;		
	Иначе
		ОбщегоНазначенияБПКлиент.ОбработкаОповещенияФормыДокумента(ЭтаФорма, Объект.Ссылка, ИмяСобытия, Параметр, Источник);
	КонецЕсли;
		
	Если Источник = "ПодключаемоеОборудование" Тогда
		Если ИмяСобытия = "WP89" Тогда
			ЗавершениеПолученияВеса(Параметр, Неопределено);	
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	ПодготовитьФормуНаСервере();

КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	РасчетВеса();		

КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// проверяем нужно ли формировать ттн
	
	Ссылка = Объект.Ссылка; 	
	
	НашаМодифицированность = Модифицированность;
	
	Если Модифицированность Тогда
		
		Если Объект.Дата                    <> Ссылка.Дата Тогда
		ИначеЕсли Объект.Организация        <> Ссылка.Организация Тогда	
		ИначеЕсли Объект.Владелец           <> Ссылка.Владелец Тогда	
		ИначеЕсли Объект.ДоговорКонтрагента <> Ссылка.ДоговорКонтрагента Тогда	
		ИначеЕсли Объект.ВидХранения        <> Ссылка.ВидХранения Тогда	
		ИначеЕсли Объект.Склад              <> Ссылка.Склад Тогда	
		ИначеЕсли Объект.Номенклатура       <> Ссылка.Номенклатура Тогда	
		ИначеЕсли Объект.Урожай             <> Ссылка.Урожай Тогда	
		ИначеЕсли Объект.ЗачетныйВес        <> Ссылка.ЗачетныйВес Тогда				
		ИначеЕсли Объект.Вес                <> Ссылка.Вес Тогда	
			НашаМодифицированность = Истина;
		Иначе
			НашаМодифицированность = Ложь;
		КонецЕсли;
		
	КонецЕсли;		
	
	Если  ИнтерактивноеФормированиеРеестровТТН
		И НашаМодифицированность
		И НЕ НеПроводитьДокументамиРеестрТТНВывоз Тогда
		
		// Если это не новый документ или присутсвует в каком-то реестре
		// Нужно переформировывать реестр по старым параметрам
		
		Если ЗначениеЗаполнено(Объект.Ссылка) И ВключенаВРеестр() Тогда
			
			ПараметрыСтарые = Новый Структура;
			ПараметрыСтарые.Вставить("ПериодС",            НачалоДня(Ссылка.Дата));
			ПараметрыСтарые.Вставить("ПериодПо",           КонецДня(Ссылка.Дата));
			ПараметрыСтарые.Вставить("Организация",        Ссылка.Организация);
			ПараметрыСтарые.Вставить("Владелец",           Ссылка.Владелец);
			ПараметрыСтарые.Вставить("ДоговорКонтрагента", Ссылка.ДоговорКонтрагента);
			ПараметрыСтарые.Вставить("ВидХранения",        Ссылка.ВидХранения);
			ПараметрыСтарые.Вставить("Склад",              Ссылка.Склад);
			ПараметрыСтарые.Вставить("Номенклатура",       Ссылка.Номенклатура);
			ПараметрыСтарые.Вставить("Урожай",             Ссылка.Урожай);
			ПараметрыСтарые.Вставить("ЛабораторныйАнализ", Ссылка.ЛабораторныйАнализ);
			
			ТекущийОбъект.ДополнительныеСвойства.Вставить("ПараметрыСтарые", ПараметрыСтарые);
			
		КонецЕсли;
		
		ПараметрыТекущие = Новый Структура;
		ПараметрыТекущие.Вставить("ПериодС",            НачалоДня(Объект.Дата));
		ПараметрыТекущие.Вставить("ПериодПо",           КонецДня(Объект.Дата));
		ПараметрыТекущие.Вставить("Организация",        Объект.Организация);
		ПараметрыТекущие.Вставить("Владелец",           Объект.Владелец);
		ПараметрыТекущие.Вставить("ДоговорКонтрагента", Объект.ДоговорКонтрагента);
		ПараметрыТекущие.Вставить("ВидХранения",        Объект.ВидХранения);
		ПараметрыТекущие.Вставить("Склад",              Объект.Склад);
		ПараметрыТекущие.Вставить("Номенклатура",       Объект.Номенклатура);
		ПараметрыТекущие.Вставить("Урожай",             Объект.Урожай);
		ПараметрыТекущие.Вставить("ЛабораторныйАнализ", Объект.ЛабораторныйАнализ);
		
		ТекущийОбъект.ДополнительныеСвойства.Вставить("ПараметрыТекущие", ПараметрыТекущие);
		
	КонецЕсли;
	
	//РасчетВеса();	
		
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ИНАГРО_КонтрольПроцессов.СохранитьЗначенияВесаТары(ТекущийОбъект, Отказ) ;
	
	Если ТекущийОбъект.ПометкаУдаления Тогда
		ИНАГРО_КонтрольПроцессов.ОчиститьЗначенияВесаТары(ТекущийОбъект);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
			
	Если ТекущийОбъект.ДополнительныеСвойства.Свойство("ПараметрыСтарые") Тогда
        ИНАГРО_Элеватор.СформироватьРеестрТТН_Вывоз(ТекущийОбъект.ДополнительныеСвойства.ПараметрыСтарые);
	КонецЕсли;
	
    Если ТекущийОбъект.ДополнительныеСвойства.Свойство("ПараметрыТекущие") Тогда
        ИНАГРО_Элеватор.СформироватьРеестрТТН_Вывоз(ТекущийОбъект.ДополнительныеСвойства.ПараметрыТекущие);
    КонецЕсли;

	УстановитьЗаголовокФормы();	
		
	УстановитьСостояниеДокумента();
	
КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	Если НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДатаДокумента) Тогда
		// Изменение времени не влияет на поведение документа.
		ТекущаяДатаДокумента = Объект.Дата;
		Возврат;
	КонецЕсли;
	
	// Общие проверки условий по датам.
	ТребуетсяВызовСервера = ИНАГРО_ЭлеваторКлиент.ТребуетсяВызовСервераПриИзмененииДатыДокумента(Объект.Дата, ТекущаяДатаДокумента);
		
	// Если определили, что изменение даты может повлиять на какие-либо параметры, 
	// то передаем обработку на сервер.
	Если ТребуетсяВызовСервера Тогда
		ДатаПриИзмененииНаСервере();
	КонецЕсли;
	
	// Запомним новую дату документа.
	ТекущаяДатаДокумента = Объект.Дата;

КонецПроцедуры

&НаСервере
Процедура ДатаПриИзмененииНаСервере()

	ИНАГРО_ЭлеваторЗаполнениеДокументов.ЗаполнитьТипНомерЖурналаВесовой(Объект);	

	УстановитьФункциональныеОпцииФормы();
	
	УправлениеФормойНаСервере();

КонецПроцедуры

&НаКлиенте
Процедура ВидОперацииПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.ВидОперации) Тогда	
		ВидОперацииПриИзмененииНаСервере();	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВидОперацииПриИзмененииНаСервере()
	
	Если Объект.ВидОперации = Перечисления.ИНАГРО_ВидыОперацийТТНВывоз.ВывозФасованного Тогда		
		
		Объект.СписокНоменклатуры.Очистить();
		
		НоваяСтрока = Объект.СписокНоменклатуры.Добавить();
		НоваяСтрока.Номенклатура      = Объект.Номенклатура;
		НоваяСтрока.Урожай            = Объект.Урожай;
		НоваяСтрока.Вес               = Объект.Вес;			
		
		ДанныеОбъекта = Новый Структура("Организация, Склад, ОтражатьВБухгалтерскомУчете");
		ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
		ДанныеОбъекта.Вставить("СобственноеПодразделение", СобственноеПодразделение);		
				 		
		
	КонецЕсли;
		
	ЗаполнитьСчетаУчетаВТабличнойЧасти();
	
	УстановитьЗаголовокФормы(); 	
	
	УправлениеФормойНаСервере();	
	
	Модифицированность = Истина;
		
КонецПроцедуры

&НаКлиенте
Процедура ОтражатьВБухгалтерскомУчетеПриИзменении(Элемент)
	
	Если Объект.СписокНоменклатуры.Количество() > 0 Тогда
		
		Если Объект.ОтражатьВБухгалтерскомУчете Тогда		
			ТекстВопроса = НСтр("ru='Установить счета бухгалтерского учета в соответствии со значениями по умолчанию?';uk='Встановити рахунки бухгалтерського обліку відповідно до значень за замовчуванням?'");
		Иначе
			ТекстВопроса = НСтр("ru='Очистить счета бухгалтерского учета?';uk='Очистити рахунки бухгалтерського обліку?'");
		КонецЕсли;
		
		Оповещение = Новый ОписаниеОповещения("ОтражатьВБухгалтерскомУчетеПриИзмененииЗавершение", ЭтотОбъект, Параметры);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);	
		
		Возврат;
		
	КонецЕсли;	
	
	УправлениеФормойНаСервере(); 
	
КонецПроцедуры

&НаКлиенте
Процедура ОтражатьВБухгалтерскомУчетеПриИзмененииЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		УправлениеФормойНаСервере(); 
		Возврат;
	КонецЕсли; 	
	
	ЗаполнитьСчетаУчетаВТабличнойЧасти();
	
	УправлениеФормойНаСервере();
   
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)

	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		ОрганизацияПриИзмененииНаСервере();
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()
	
	УстановитьФункциональныеОпцииФормы();	
	
	УправлениеФормойНаСервере();

КонецПроцедуры

&НаКлиенте
Процедура ПриказНаВывозПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.ПриказНаВывоз) Тогда
		ПриказНаВывозПриИзмененииНаСервере();
	КонецЕсли;

	УправлениеФормойНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПриказНаВывозПриИзмененииНаСервере()
	
	Объект.ОтражатьВБухгалтерскомУчете = Ложь;

	РасчетВеса();
	
	УстановитьФункциональныеОпцииФормы();	
	
	УправлениеФормойНаСервере();

КонецПроцедуры

&НаКлиенте
Процедура ПриказНаВывозНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;

	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Организация", Объект.Организация);
	
	Если ЗначениеЗаполнено(Объект.Владелец) Тогда
		ПараметрыОтбора.Вставить("Владелец",           Объект.Владелец);
	КонецЕсли;	
	Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		ПараметрыОтбора.Вставить("ДоговорКонтрагента", Объект.ДоговорКонтрагента);
	КонецЕсли;
	Если ЗначениеЗаполнено(Объект.Склад) Тогда
		ПараметрыОтбора.Вставить("Склад",              Объект.Склад);
	КонецЕсли;
	Если ЗначениеЗаполнено(Объект.Урожай) Тогда
		ПараметрыОтбора.Вставить("Урожай",             Объект.Урожай);
	КонецЕсли;
	Если ЗначениеЗаполнено(Объект.ВидХранения) Тогда
		ПараметрыОтбора.Вставить("ВидХранения",        Объект.ВидХранения);
	КонецЕсли;	
		
	ПараметрыОтбора.Вставить("ВидПеревозки", ПредопределенноеЗначение("Перечисление.ИНАГРО_ВидыПеревозки.Автотранспорт"));
				
	ПараметрыФормы = Новый Структура;
	
	Если ВывозДействителенОдинДень Тогда
		Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда			
			ПараметрыФормы.Вставить("Дата", Объект.Дата + 60 * 60 * ВремяНачалаДняПриОтгрузке);
		Иначе
			ПараметрыФормы.Вставить("Дата", Объект.Дата);
		КонецЕсли;
	Иначе
		ПараметрыФормы.Вставить("Дата", Объект.Дата);
	КонецЕсли;
	
	ПараметрыФормы.Вставить("Отбор",       ПараметрыОтбора);
	ПараметрыФормы.Вставить("Ссылка",      Объект.Ссылка);
	ПараметрыФормы.Вставить("РежимВыбора", Истина); 
				
	ОткрытьФорму("Документ.ИНАГРО_ПриказНаВывоз.Форма.ФормаВыбораПриказа", ПараметрыФормы, Элемент);

КонецПроцедуры

&НаКлиенте
Процедура ПриказНаВывозОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Объект.ПриказНаВывоз = ВыбранноеЗначение;
	
	ПолучитьНоменклатуруИзПриказа(ВыбранноеЗначение);	

КонецПроцедуры

&НаКлиенте
Процедура ВладелецПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.Владелец) Тогда
		
		ПараметрыОтбораДоговора = ПолучитьПараметрыДляДоговоров();
		
		ИНАГРО_ЭлеваторЗаполнениеДокументов.ПриИзмененииЗначенияКонтрагента(Объект.Дата, Объект.Организация, Объект.Владелец, Объект.ДоговорКонтрагента, ПараметрыОтбораДоговора);
		
		ВладелецПриИзмененииНаСервере();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВладелецПриИзмененииНаСервере()
	
	Если Объект.ВидОперации = Перечисления.ИНАГРО_ВидыОперацийТТНВывоз.ВывозФасованного Тогда 
		ЗаполнитьСчетаУчетаВТабличнойЧасти();
	КонецЕсли;
	
	УстановитьФункциональныеОпцииФормы();
	
	УправлениеФормойНаСервере();
	
	Объект.Получатель = Объект.Владелец;
	Объект.Заказчик   = Объект.Владелец;

КонецПроцедуры

&НаКлиенте
Процедура ВладелецНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если ДополнительныйКонтрольДоговоров Тогда 
		СтандартнаяОбработка = Ложь;
		ИНАГРО_ЭлеваторКлиент.ВладелецНачалоВыбораЗавершение();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СкладПриИзменении(Элемент)

	Если ЗначениеЗаполнено(Объект.Склад) Тогда
		СкладПриИзмененииНаСервере();
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура СкладПриИзмененииНаСервере()	
		
	Объект.МестоХранения = Справочники.ИНАГРО_МестаХранения.ПустаяСсылка();

	УстановитьФункциональныеОпцииФормы(); 	
	
	УправлениеФормойНаСервере();

КонецПроцедуры

&НаКлиенте
Процедура ВидХраненияПриИзменении(Элемент)
	
	ПараметрыОтбораДоговора = ПолучитьПараметрыДляДоговоров();
	
	ИНАГРО_ЭлеваторЗаполнениеДокументов.ПриИзмененииЗначенияКонтрагента(Объект.Дата, Объект.Организация, Объект.Владелец, Объект.ДоговорКонтрагента, ПараметрыОтбораДоговора);
	
КонецПроцедуры

&НаКлиенте
Процедура ТипЖурналаПриИзменении(Элемент)
		
	Если ЗначениеЗаполнено(Объект.ТипЖурнала) Тогда
		
		ДанныеОбъекта = Новый Структура("ВидЖурнала, ТипЖурнала, НомерЖурнала");		
		ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);		
	
		ТипЖурналаПриИзмененииНаСервере(ДанныеОбъекта);
		
		Объект.НомерЖурнала = ДанныеОбъекта.НомерЖурнала;
		
	КонецЕсли; 

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ТипЖурналаПриИзмененииНаСервере(ДанныеОбъекта)

	Отбор = Новый Структура("ВидЖурнала, ТипЖурнала", ДанныеОбъекта.ВидЖурнала, ДанныеОбъекта.ТипЖурнала);
	
	ДанныеОбъекта.НомерЖурнала = РегистрыСведений.ИНАГРО_НумерацияЖурналовЭлеватора.Получить(Отбор).ТекущийНомерЖурнала + 1;

КонецПроцедуры

#Область ОбработчикиСобытийЭлементовПанелиТранспортКультура

&НаКлиенте
Процедура ВодительПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.Водитель) Тогда
		
		ДанныеОбъекта = Новый Структура("Водитель, НомерТранспорта, НомерПрицепа, Автопредприятие");
		ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
		
		ДанныеОбъекта.Вставить("ВестиСправочникВодителей",   ВестиСправочникВодителей);
		ДанныеОбъекта.Вставить("ВестиСправочникАвтомобилей", ВестиСправочникАвтомобилей);
		
		ВодительПриИзмененииНаСервере(ДанныеОбъекта);
		
		ЗаполнитьЗначенияСвойств(Объект, ДанныеОбъекта);
		
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ВодительПриИзмененииНаСервере(ДанныеОбъекта)
	
	Водитель = ДанныеОбъекта.Водитель;
	
	Если ДанныеОбъекта.ВестиСправочникВодителей Тогда
		
		Если ДанныеОбъекта.ВестиСправочникАвтомобилей Тогда
			
			Если ЗначениеЗаполнено(Водитель.НомерТранспорта) Тогда
				ДанныеОбъекта.НомерТранспорта = Водитель.НомерТранспорта;
			КонецЕсли;
			Если ЗначениеЗаполнено(Водитель.НомерПрицепа) Тогда
				ДанныеОбъекта.НомерПрицепа	  = Водитель.НомерПрицепа;
			КонецЕсли;
			Если ЗначениеЗаполнено(Водитель.Автопредприятие) Тогда
				ДанныеОбъекта.Автопредприятие = Водитель.Автопредприятие;
			КонецЕсли;
			
		Иначе
			
			ДанныеОбъекта.НомерТранспорта = Строка(Водитель.НомерТранспорта);
			ДанныеОбъекта.НомерПрицепа	  = Строка(Водитель.НомерПрицепа);
			
		КонецЕсли;		
		
	КонецЕсли; 		
	
КонецПроцедуры

&НаКлиенте
Процедура УрожайПриИзменении(Элемент)
	
	ПараметрыОтбораДоговора = ПолучитьПараметрыДляДоговоров();
	
	ИНАГРО_ЭлеваторЗаполнениеДокументов.ПриИзмененииЗначенияКонтрагента(Объект.Дата, Объект.Организация, Объект.Владелец, Объект.ДоговорКонтрагента, ПараметрыОтбораДоговора);
	
КонецПроцедуры

&НаКлиенте
Процедура КачествоПриИзменении(Элемент)
	
	КачествоПриИзмененииНаСервере();

КонецПроцедуры

&НаСервере
Процедура КачествоПриИзмененииНаСервере()
			
	Если НЕ Объект.Качество Тогда
		
		Объект.Рецепт      = Документы.ИНАГРО_Рецепт.ПустаяСсылка();
		ЛабораторныйАнализ = Документы.ИНАГРО_ЛабораторныйАнализ.ПустаяСсылка();
		
		ЛабораторныйАнализПриИзмененииНаСервере();
		
	КонецЕсли;
	
	РасчетВеса();
	
	УправлениеФормойНаСервере();

КонецПроцедуры

&НаКлиенте
Процедура ЛабораторныйАнализПриИзменении(Элемент)
	
	ЛабораторныйАнализПриИзмененииНаСервере();

КонецПроцедуры

&НаСервере
Процедура ЛабораторныйАнализПриИзмененииНаСервере()
	
	ДанныеОбъекта = Новый Структура(
		"ЛабораторныйАнализ, НомерАнализа, Влажность, 
		|СорнаяПримесь, ЗерноваяПримесь, ЗачетныйВес,
		|");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект); 

	ПараметрыДляРасчетаЗачетногоВеса = ПолучитьПараметрыДляРасчетаЗачетногоВеса();

	ИНАГРО_Элеватор.ЛабораторныйАнализПриИзмененииНаСервере(ДанныеОбъекта, ПараметрыДляРасчетаЗачетногоВеса);
	
	ЗаполнитьЗначенияСвойств(Объект, ДанныеОбъекта);
	
	РасчетВеса();
	
	Если НЕ ОтключитьАвтоматическоеНачислениеУслуг Тогда		
		Если  Объект.ВидОперации <> Перечисления.ИНАГРО_ВидыОперацийТТНВывоз.ВывозФасованного
			И НеПроводитьДокументамиРеестрТТНВывоз Тогда 
			ЗаполнитьУслугиНаСервере();
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЛабораторныйАнализНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыОтбора = Новый Структура;
	
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		ПараметрыОтбора.Вставить("Организация",        Объект.Организация);		
	КонецЕсли;	
	Если ЗначениеЗаполнено(Объект.Владелец) Тогда
		ПараметрыОтбора.Вставить("Владелец",           Объект.Владелец);
	КонецЕсли;	
	Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		ПараметрыОтбора.Вставить("ДоговорКонтрагента", Объект.ДоговорКонтрагента);		
	КонецЕсли;	
	Если ЗначениеЗаполнено(Объект.Склад) Тогда
		ПараметрыОтбора.Вставить("Склад",              Объект.Склад);
	КонецЕсли;	
	Если ЗначениеЗаполнено(Объект.ВидХранения) Тогда
		ПараметрыОтбора.Вставить("ВидХранения",        Объект.ВидХранения);
	КонецЕсли;	
	Если ЗначениеЗаполнено(Объект.Номенклатура) Тогда
		ПараметрыОтбора.Вставить("Номенклатура",       Объект.Номенклатура);
	КонецЕсли;	
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Отбор",  ПараметрыОтбора);
	ПараметрыФормы.Вставить("Ссылка", Объект.Ссылка);
	
	ОткрытьФорму("Документ.ИНАГРО_ЛабораторныйАнализ.Форма.ФормаВыбора", ПараметрыФормы, Элемент, УникальныйИдентификатор, , , , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры

&НаКлиенте
Процедура ВлажностьПриИзменении(Элемент)
	
	РасчетЗачетногоВеса();
	
КонецПроцедуры

&НаКлиенте
Процедура СорнаяПримесьПриИзменении(Элемент)
	
	РасчетЗачетногоВеса();

КонецПроцедуры

&НаКлиенте
Процедура ВесБруттоПриИзменении(Элемент)
	
	ВесБруттоПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ВесБруттоПриИзмененииНаСервере()

	Если НЕ ИНАГРО_КонтрольПроцессов.ПроверитьМаксимальнуюГрузоподъемностьВесов(Объект.ВесБрутто) Тогда 
		Объект.ВесБрутто = 0;
		Возврат;
	КонецЕсли;
	
	Если НЕ ИНАГРО_КонтрольПроцессов.ПроверитьОтрицательноеНетто(Объект.ВесБрутто, Объект.ВесТары) Тогда 
		Объект.ВесБрутто = 0;
		Возврат;
	КонецЕсли;
	
	Если Объект.ВесБруттоКонтроль = 0 тогда 
		Объект.ВесБруттоКонтроль = Объект.ВесБрутто;
	КонецЕсли;

	ИНАГРО_КонтрольПроцессов.КонтрольИзмененияВесаТТН(Объект, Объект.ВесБруттоКонтроль, Объект.ВесБрутто);
	
	РасчетВеса();
	
	УправлениеПоследовательностьюВводаВеса();

	Объект.РедактировалсяВручнуюВесБрутто = Истина;

КонецПроцедуры

&НаКлиенте
Процедура ВесБрутто1ПриИзменении(Элемент)
	
	ВесБрутто1ПриИзмененииНаСервере();
		
КонецПроцедуры

&НаСервере
Процедура ВесБрутто1ПриИзмененииНаСервере()
	
	Если НЕ ИНАГРО_КонтрольПроцессов.ПроверитьМаксимальнуюГрузоподъемностьВесов(Объект.ВесБрутто1) Тогда 
		Объект.ВесБрутто1 = 0;
		Возврат;
	КонецЕсли;
	
	Если НЕ ИНАГРО_КонтрольПроцессов.ПроверитьОтрицательноеНетто(Объект.ВесБрутто1, Объект.ВесТары1) Тогда 
		Объект.ВесБрутто1 = 0;
		Возврат;
	КонецЕсли;
	
	Если Объект.ВесБрутто1Контроль = 0 Тогда 
		Объект.ВесБрутто1Контроль = Объект.ВесБрутто1;
	КонецЕсли;
	
	ИНАГРО_КонтрольПроцессов.КонтрольИзмененияВесаТТН(Объект, Объект.ВесБрутто1Контроль, Объект.ВесБрутто1);
	
	РасчетВеса();
	
	УправлениеПоследовательностьюВводаВеса();
	
	Объект.РедактировалсяВручнуюВесБрутто1 = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ВесТарыПриИзменении(Элемент)
	
	ВесТарыПриИзмененииНаСервере();

КонецПроцедуры

&НаСервере
Процедура ВесТарыПриИзмененииНаСервере()
	
	Если НЕ ИНАГРО_КонтрольПроцессов.ПроверитьМаксимальнуюГрузоподъемностьВесов(Объект.ВесТары) Тогда 
		Объект.ВесТары = 0;
		Возврат;
	КонецЕсли;	
	
	Если Объект.ВесТарыКонтроль = 0 Тогда 
		Объект.ВесТарыКонтроль = Объект.ВесТары;
	КонецЕсли;

	НаличиеПрицепа = Ложь;

	ИНАГРО_КонтрольПроцессов.КонтрольИзмененияВесаТТН(Объект,  Объект.ВесТарыКонтроль,  Объект.ВесТары);
	ИНАГРО_КонтрольПроцессов.КонтрольРасхожденияВесаТары(Объект, НаличиеПрицепа);
	
	РасчетВеса();
	
	УправлениеПоследовательностьюВводаВеса();	
	
	Объект.РедактировалсяВручнуюВесТары = Истина;		

КонецПроцедуры

&НаКлиенте
Процедура ВесТары1ПриИзменении(Элемент)
	
	ВесТары1ПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ВесТары1ПриИзмененииНаСервере()
	
	Если НЕ ИНАГРО_КонтрольПроцессов.ПроверитьМаксимальнуюГрузоподъемностьВесов(Объект.ВесТары1) Тогда 
		Объект.ВесТары1 = 0;
		Возврат;
	КонецЕсли;	
		
	Если Объект.ВесТары1Контроль = 0 Тогда 
		Объект.ВесТары1Контроль = Объект.ВесТары1;
	КонецЕсли;

	НаличиеПрицепа = Истина;

	ИНАГРО_КонтрольПроцессов.КонтрольИзмененияВесаТТН(Объект,  Объект.ВесТары1Контроль,  Объект.ВесТары1);
	ИНАГРО_КонтрольПроцессов.КонтрольРасхожденияВесаТары(Объект, НаличиеПрицепа);
	
	РасчетВеса();
	
	УправлениеПоследовательностьюВводаВеса();	
	
	Объект.РедактировалсяВручнуюВесТары1 = Истина; 

КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ПолучилПоДругомуДокументуПриИзменении(Элемент)
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ФизлицоНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь; 	
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Организация", Объект.Организация);  
		
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Отбор", ПараметрыОтбора);

	ОткрытьФорму("Справочник.ФизическиеЛица.Форма.ИНАГРО_ФормаВыбораСотрудников", ПараметрыФормы, Элемент, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура БухгалтерОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если НЕ ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли; 
	
	Объект.Бухгалтер = ВыбранноеЗначение;	

КонецПроцедуры

&НаКлиенте
Процедура ОтпускРазрешилОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если НЕ ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли; 
	
	Объект.ОтпускРазрешил = ВыбранноеЗначение;	

КонецПроцедуры

&НаКлиенте
Процедура ОписаниеДвиженияФормы36НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(
		Элемент.ТекстРедактирования,
		ЭтотОбъект,
		"Объект.ОписаниеДвиженияФормы36",
		НСтр("ru='Описание движения формы 36';uk='Опис руху форми 36'"));

КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(
		Элемент.ТекстРедактирования,
		ЭтотОбъект,
		"Объект.Комментарий");

КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписокНоменклатуры

&НаКлиенте
Процедура СписокНоменклатурыНоменклатураПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.СписокНоменклатуры.ТекущиеДанные;
		
	ДанныеСтрокиТаблицы = Новый Структура("Номенклатура, СчетУчетаБУ");
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, ТекущиеДанные);
	
	ДанныеОбъекта = Новый Структура("Дата, Организация, Склад, ОтражатьВБухгалтерскомУчете"); 
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	ДанныеОбъекта.Вставить("СобственноеПодразделение", СобственноеПодразделение);
	
	СписокНоменклатурыНоменклатураПриИзмененииНаСервере(ДанныеСтрокиТаблицы, ДанныеОбъекта);
	
	ТекущиеДанные.СчетУчетаБУ = ДанныеСтрокиТаблицы.СчетУчетаБУ;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СписокНоменклатурыНоменклатураПриИзмененииНаСервере(СтрокаТабличнойЧасти, Знач ДанныеОбъекта)
	
	СведенияОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОНоменклатуре(
		СтрокаТабличнойЧасти.Номенклатура, ДанныеОбъекта);	
		
	Если СведенияОНоменклатуре = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Документы.ИНАГРО_ТТНВывоз.ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(ДанныеОбъекта, СтрокаТабличнойЧасти, СведенияОНоменклатуре);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокНоменклатурыВидФасовкиПриИзменении(Элемент)
	
	РасчетВесаДляСтрокиТабличнойЧасти();
	
КонецПроцедуры

&НаКлиенте
Процедура СписокНоменклатурыКоличествоПриИзменении(Элемент)
	
	РасчетВесаДляСтрокиТабличнойЧасти();
	
КонецПроцедуры

&НаКлиенте
Процедура СписокНоменклатурыВесПриИзменении(Элемент)
	
	РасчетВесаДляСтрокиТабличнойЧасти();		

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыУслуги

&НаКлиенте
Процедура УслугиНоменклатураПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Услуги.ТекущиеДанные;

	ВидКультурыДляРасчетаСтоимостиУслуги = ПолучитьВидКультурыДляРасчетаСтоимостиУслуги(Объект.Номенклатура);
	
	ТекущиеДанные.Цена = ИНАГРО_Элеватор.ПолучитьЦенуУслугиЭлеватора(Объект.Организация, Объект.Дата, Объект.Владелец,
																	 Объект.ДоговорКонтрагента, ВидКультурыДляРасчетаСтоимостиУслуги,
																	 Объект.Урожай, ТекущиеДанные.Номенклатура);
																	 
	УслугиКоличествоЦенаПриИзменении();

КонецПроцедуры

&НаКлиенте
Процедура УслугиКоличествоПриИзменении(Элемент)
	
	УслугиКоличествоЦенаПриИзменении();

КонецПроцедуры

&НаКлиенте
Процедура УслугиЦенаПриИзменении(Элемент)
	
	УслугиКоличествоЦенаПриИзменении();
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиКоличествоЦенаПриИзменении()
	
	ТекущиеДанные = Элементы.Услуги.ТекущиеДанные;
	
	ТекущиеДанные.Сумма = ТекущиеДанные.Количество * ТекущиеДанные.Цена;

КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура СоздатьЛабораторныйАнализ(Команда)
			
	ЗначенияЗаполнения = Новый Структура;
	ЗначенияЗаполнения.Вставить("Дата",               Объект.Дата);
	ЗначенияЗаполнения.Вставить("Ссылка",             ПредопределенноеЗначение("Документ.ИНАГРО_ЛабораторныйАнализ.ПустаяСсылка"));
	ЗначенияЗаполнения.Вставить("Организация",        Объект.Организация);
	ЗначенияЗаполнения.Вставить("Владелец",           Объект.Владелец);
	ЗначенияЗаполнения.Вставить("ДоговорКонтрагента", Объект.ДоговорКонтрагента);
	ЗначенияЗаполнения.Вставить("Склад",        	  Объект.Склад);
	ЗначенияЗаполнения.Вставить("ВидХранения",        Объект.ВидХранения);
	ЗначенияЗаполнения.Вставить("Урожай",             Объект.Урожай);
	ЗначенияЗаполнения.Вставить("Номенклатура",       Объект.Номенклатура);
	ЗначенияЗаполнения.Вставить("Влажность",          Объект.Влажность);
	ЗначенияЗаполнения.Вставить("СорнаяПримесь",      Объект.СорнаяПримесь);
	ЗначенияЗаполнения.Вставить("ЗерноваяПримесь",    Объект.ЗерноваяПримесь);	
	
	ЗначенияЗаполнения.Вставить("МассаПартии",        Объект.Вес);
	
	ЗначенияЗаполнения.Вставить("НомерТранспорта",    Объект.НомерТранспорта);
	ЗначенияЗаполнения.Вставить("СтанцияОтправления", СокрЛП(Объект.Организация));
	ЗначенияЗаполнения.Вставить("СтанцияНазначения",  Объект.Владелец);
	
	ЗначенияЗаполнения.Вставить("Силос",              Объект.Силос);	

	ИНАГРО_ЭлеваторКлиент.СоздатьДокументНаОсновании(ЭтаФорма, ЗначенияЗаполнения);

КонецПроцедуры

&НаКлиенте
Процедура КнопкаF5(Команда)
	
	Если (НЕ ИНАГРО_ЭлеваторУправлениеПользователями.ЗапретитьАвтоматическиИзменятьВесТТН(ТекущийПользователь, Объект.Дата))
		ИЛИ (ИНАГРО_ЭлеваторУправлениеПользователями.ЗапретитьАвтоматическиИзменятьВесТТН(ТекущийПользователь, Объект.Дата) И Объект.ВесБрутто = 0) Тогда 	
	
	    ИмяНажатойКомандыПолученияВеса = Команда.Имя;
		ОповещениеПолученияВеса = Новый ОписаниеОповещения("ЗавершениеПолученияВеса", ЭтаФорма);
		
		ИНАГРО_МенеджерОборудованияКлиент.НачатьПолученияВесаСЭлектронныхВесов(ОповещениеПолученияВеса, ЭтаФорма.УникальныйИдентификатор);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КнопкаF6(Команда)
	
	Если (НЕ ИНАГРО_ЭлеваторУправлениеПользователями.ЗапретитьАвтоматическиИзменятьВесТТН(ТекущийПользователь, Объект.Дата))
		ИЛИ (ИНАГРО_ЭлеваторУправлениеПользователями.ЗапретитьАвтоматическиИзменятьВесТТН(ТекущийПользователь, Объект.Дата) И Объект.ВесТары = 0) Тогда 	
	
	    ИмяНажатойКомандыПолученияВеса = Команда.Имя;
		ОповещениеПолученияВеса = Новый ОписаниеОповещения("ЗавершениеПолученияВеса", ЭтаФорма);
		
		ИНАГРО_МенеджерОборудованияКлиент.НачатьПолученияВесаСЭлектронныхВесов(ОповещениеПолученияВеса, ЭтаФорма.УникальныйИдентификатор);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КнопкаF7(Команда)
	
	Если (НЕ ИНАГРО_ЭлеваторУправлениеПользователями.ЗапретитьАвтоматическиИзменятьВесТТН(ТекущийПользователь, Объект.Дата))
		ИЛИ (ИНАГРО_ЭлеваторУправлениеПользователями.ЗапретитьАвтоматическиИзменятьВесТТН(ТекущийПользователь, Объект.Дата) И Объект.ВесБрутто1 = 0) Тогда 	
	
	    ИмяНажатойКомандыПолученияВеса = Команда.Имя;
		ОповещениеПолученияВеса = Новый ОписаниеОповещения("ЗавершениеПолученияВеса", ЭтаФорма);
		
		ИНАГРО_МенеджерОборудованияКлиент.НачатьПолученияВесаСЭлектронныхВесов(ОповещениеПолученияВеса, ЭтаФорма.УникальныйИдентификатор);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура КнопкаF8(Команда)
	
	Если (НЕ ИНАГРО_ЭлеваторУправлениеПользователями.ЗапретитьАвтоматическиИзменятьВесТТН(ТекущийПользователь, Объект.Дата))
		ИЛИ (ИНАГРО_ЭлеваторУправлениеПользователями.ЗапретитьАвтоматическиИзменятьВесТТН(ТекущийПользователь, Объект.Дата) И Объект.ВесТары1 = 0) Тогда 	
	
	    ИмяНажатойКомандыПолученияВеса = Команда.Имя;
		ОповещениеПолученияВеса = Новый ОписаниеОповещения("ЗавершениеПолученияВеса", ЭтаФорма);
		
		ИНАГРО_МенеджерОборудованияКлиент.НачатьПолученияВесаСЭлектронныхВесов(ОповещениеПолученияВеса, ЭтаФорма.УникальныйИдентификатор);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура Выезд(Команда)
	
	Объект.ВремяВыбытия = ТекущаяДата();
	
	Элементы.Выезд.Доступность        = Ложь;
	Элементы.ВремяВыбытия.Доступность = Ложь;

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьУслуги(Команда)
	
	ЗаполнитьУслугиНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьУслугиНаСервере()
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");	
	ДокументОбъект.ЗаполнитьУслуги(); 	
	ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидПеревозки(Команда)
	
	Объект.ВидПеревозки = "Автотранспортом";
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ПодготовитьФормуНаСервере()

	ТекущаяДатаДокумента = Объект.Дата;			

	УстановитьФункциональныеОпцииФормы();
	
	Если ДополнительныйКонтрольДоговоров Тогда
		Элементы.Владелец.КнопкаСоздания        = Ложь;
		Элементы.Владелец.ИсторияВыбораПриВводе = ИсторияВыбораПриВводе.НеИспользовать;
	КонецЕсли;
	
	УстановитьЗаголовокФормы();
	
	УстановитьТипыДанныхРеквизитов();
	
	УправлениеФормойНаСервере();
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		РасчетВеса();
	КонецЕсли;

	УправлениеПоследовательностьюВводаВеса();
	
	УстановитьСостояниеДокумента();
	
КонецПроцедуры 

&НаСервере
Процедура УстановитьФункциональныеОпцииФормы()

	ОбщегоНазначенияБПКлиентСервер.УстановитьПараметрыФункциональныхОпцийФормыДокумента(ЭтаФорма);	
	
	ТекущийПользователь                         = Пользователи.ТекущийПользователь();	
	
	ПараметрыУчетаЭлеватора                     = ИНАГРО_Элеватор.ПолучитьПараметрыУчетаЭлеватора(Объект.Дата);
	ВестиСправочникАвтомобилей                  = ПараметрыУчетаЭлеватора.ВестиСправочникАвтомобилей;
	ВестиСправочникВодителей                    = ПараметрыУчетаЭлеватора.ВестиСправочникВодителей;
	ВремяНачалаДняПриОтгрузке                   = ПараметрыУчетаЭлеватора.ВремяНачалаДняПриОтгрузке;
	ВывозДействителенОдинДень                   = ПараметрыУчетаЭлеватора.ВывозДействителенОдинДень;
	ИнтерактивноеФормированиеРеестровТТН        = ПараметрыУчетаЭлеватора.ИнтерактивноеФормированиеРеестровТТН;
	ДополнительныйКонтрольДоговоров             = ПараметрыУчетаЭлеватора.ДополнительныйКонтрольДоговоров;
	КонтролироватьПоследовательностьВводаВеса   = ПараметрыУчетаЭлеватора.КонтролироватьПоследовательностьВводаВеса;
	ЛабораторияРаботаетВСистеме                 = ПараметрыУчетаЭлеватора.ЛабораторияРаботаетВСистеме;
	НеПроводитьДокументамиРеестрТТНВывоз        = ПараметрыУчетаЭлеватора.НеПроводитьДокументамиРеестрТТНВывоз;
	ОтключитьАвтоматическоеНачислениеУслуг      = ПараметрыУчетаЭлеватора.ОтключитьАвтоматическоеНачислениеУслуг;
	
	СобственноеПодразделение                    = ИНАГРО_Элеватор.ПолучитьДополнительныйРеквизитКонтрагента(Объект.Владелец, "СобственноеПодразделение");
	ВидимостьМестаХранения                      = ИНАГРО_Элеватор.ПолучитьДополнительныйРеквизитСклада(Объект.Склад, "ВестиУчетПоМестамХранения");
	
КонецПроцедуры 

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)

	Элементы = Форма.Элементы;
	Объект   = Форма.Объект;	
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ИНАГРО_ВидыОперацийТТНВывоз.Вывоз") Тогда
		
		Элементы.ЛабораторныйАнализ.Видимость   = Форма.ЛабораторияРаботаетВСистеме;
		Элементы.ЛабораторныйАнализ.Доступность = Истина;
		Элементы.Номенклатура.Доступность       = Истина;
		Элементы.Урожай.Доступность             = Истина;
		
		Элементы.ГруппаКачество.Видимость       = Объект.Качество;
		Элементы.ГруппаСписокКультур.Видимость  = Ложь;
		
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ИНАГРО_ВидыОперацийТТНВывоз.ВывозФасованного") Тогда
		
		Элементы.ЛабораторныйАнализ.Видимость   = Форма.ЛабораторияРаботаетВСистеме;
		Элементы.ЛабораторныйАнализ.Доступность = Ложь;
		Элементы.Номенклатура.Доступность       = Ложь;
		Элементы.Урожай.Доступность             = Ложь;
		
		Элементы.ГруппаКачество.Видимость       = Ложь;
		Элементы.ГруппаСписокКультур.Видимость  = Истина;
		
		Элементы.СписокНоменклатурыСчетУчетаБУ.Видимость = Объект.ОтражатьВБухгалтерскомУчете;
		
	КонецЕсли;
	
	Элементы.ДоговорПолучателя.Видимость    = Форма.СобственноеПодразделение;
	Элементы.ДоговорКонтрагента.Доступность = НЕ Форма.ДополнительныйКонтрольДоговоров; 	
	
	УстановитьДоступностьПоказателейКачества(Форма);

	Если  Объект.ВидОперации <> ПредопределенноеЗначение("Перечисление.ИНАГРО_ВидыОперацийТТНВывоз.ВывозФасованного")
		И Форма.НеПроводитьДокументамиРеестрТТНВывоз
		И НЕ Форма.СобственноеПодразделение Тогда 
		Элементы.ГруппаУслуги.Видимость = Истина ;
	Иначе
		Элементы.ГруппаУслуги.Видимость = Ложь ;
	КонецЕсли;
	
	ЕстьПриказНаВывоз = ЗначениеЗаполнено(Объект.ПриказНаВывоз);
	
	Элементы.Владелец.Доступность           = НЕ ЕстьПриказНаВывоз;
	Элементы.ДоговорКонтрагента.Доступность = НЕ ЕстьПриказНаВывоз;
	Элементы.Склад.Доступность              = НЕ ЕстьПриказНаВывоз;	
	Элементы.МестоХранения.Доступность      = НЕ ЕстьПриказНаВывоз;	
	Элементы.ВидХранения.Доступность        = НЕ ЕстьПриказНаВывоз;
	Элементы.Урожай.Доступность             = НЕ ЕстьПриказНаВывоз;

	Элементы.МестоХранения.Видимость		= Форма.ВидимостьМестаХранения;
	
	Элементы.ГруппаРеквизитыДоверенностиЛевая.Видимость = НЕ Объект.ПолучилПоДругомуДокументу; 
	Элементы.ДокументПодтверждающийПолномочия.Видимость = Объект.ПолучилПоДругомуДокументу;	
				
КонецПроцедуры

&НаСервере
Процедура УправлениеФормойНаСервере()
	
	ИНАГРО_ЭлеваторЗаполнениеДокументов.ЗаполнитьДополнительныеРеквизиты(ЭтаФорма);	
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры 

&НаСервере
Процедура УстановитьПараметрыВыбораВидОперации()
	
	МассивВидовОпераций = Документы.ИНАГРО_ТТНВывоз.ПолучитьФиксированныйМассивВидовОпераций();
	
	ПараметрМассивВидовОпераций = Новый ПараметрВыбора("Отбор.Ссылка", МассивВидовОпераций);
	
	НовыйМассив = Новый Массив();
	НовыйМассив.Добавить(ПараметрМассивВидовОпераций);
	НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);
	
	Элементы.ВидОперации.ПараметрыВыбора = НовыеПараметры;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗаголовокФормы()
	
	ОбъектФормы = ЭтаФорма.Объект;

	ТекстЗаголовка = НСтр("ru='Товарно-транспортная накладная (вывоз)';uk='Товарно-транспортна накладна (вивезення)'");
	
	Если ЗначениеЗаполнено(ОбъектФормы.Ссылка) Тогда
		ТекстЗаголовка = ТекстЗаголовка + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru=' %1 от %2';uk=' %1 від %2'"), ОбъектФормы.Номер, ОбъектФормы.Дата);
	Иначе
		ТекстЗаголовка = ТекстЗаголовка + НСтр("ru=' (создание)';uk=' (створення)'");
	КонецЕсли;
	
	ЭтаФорма.Заголовок = ТекстЗаголовка + " (" + Строка(ОбъектФормы.ВидОперации) + ")";

КонецПроцедуры

&НаСервере
Процедура УстановитьСостояниеДокумента()
	
	СостояниеДокумента = ОбщегоНазначенияБП.СостояниеДокумента(Объект);
	
КонецПроцедуры

&НаСервере
Процедура КонтрольПриказовПередОткрытием(Отказ)
		
	ПараметрыУчетаЭлеватора = ИНАГРО_Элеватор.ПолучитьПараметрыУчетаЭлеватора(Объект.Дата);
	
	Если  ПараметрыУчетаЭлеватора.ВывозДействителенОдинДень  
		И ЗначениеЗаполнено(Объект.ПриказНаВывоз)
		И НачалоДня(Объект.ПриказНаВывоз.ДатаОкончанияДействияПриказа) < НачалоДня(ТекущаяДата())
		И Параметры.Ключ.Пустая() Тогда
		
		Если ПараметрыУчетаЭлеватора.КонтрольПриказов Тогда
			ТекстСообщения = НСтр("ru='Невозможно ввести ТТН, приказ действует один день!';uk='Неможливо ввести ТТН, наказ діє один день!'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , , , Отказ);
			Возврат;
		Иначе
			ТекстСообщения = НСтр("ru='Приказ действует один день!';uk='Наказ діє один день!'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
			
	ИначеЕсли ПараметрыУчетаЭлеватора.КонтрольПриказаВБизнесПроцессах
		    И ПараметрыУчетаЭлеватора.СрокДействияПриказа <> 0
		    И ЗначениеЗаполнено(Объект.ПриказНаВывоз) И Объект.ПриказНаВывоз.ДатаОкончанияДействияПриказа < ТекущаяДата()
			И Параметры.Ключ.Пустая() Тогда 
		
		Если ПараметрыУчетаЭлеватора.КонтрольПриказов Тогда 
			ТекстСообщения = НСтр("ru='Невозможно ввести ТТН, действие приказа закончилось ';uk='Неможливо ввести ТТН, дія наказу закінчилося '") + Объект.ПриказНаВывоз.ДатаОкончанияДействияПриказа;
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , , , Отказ);
			Возврат;
		Иначе
			ТекстСообщения = НСтр("ru='Действие приказа закончилось ';uk='Дія наказу закінчилося '") + Объект.ПриказНаВывоз.ДатаОкончанияДействияПриказа;
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры 

&НаСервере
Процедура УстановитьТипыДанныхРеквизитов()
		
	// Водитель 
	
	Если ВестиСправочникВодителей Тогда
		
		ТипДанных = "СправочникСсылка.ИНАГРО_Водители";

		Элементы.Водитель.КнопкаВыпадающегоСписка        = Неопределено;
		Элементы.Водитель.КнопкаВыбора                   = Неопределено;
		Элементы.Водитель.КнопкаОчистки                  = Неопределено;
		Элементы.Водитель.КнопкаСоздания                 = Неопределено;
		Элементы.Водитель.ИсторияВыбораПриВводе          = ИсторияВыбораПриВводе.Авто;

						
	Иначе
		
		ТипДанных = "Строка";

		Элементы.Водитель.КнопкаВыпадающегоСписка        = Ложь;
		Элементы.Водитель.КнопкаВыбора                   = Ложь;
		Элементы.Водитель.КнопкаОчистки                  = Истина;
		Элементы.Водитель.КнопкаСоздания                 = Ложь;
		Элементы.Водитель.ИсторияВыбораПриВводе          = ИсторияВыбораПриВводе.НеИспользовать;
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Водитель) Тогда
		Элементы.Водитель.ОграничениеТипа        = Новый ОписаниеТипов(ТипДанных);					
		Элементы.Водитель.ВыбиратьТип            = Ложь;
	КонецЕсли;

	// Автомобиль
	
	Если ВестиСправочникАвтомобилей Тогда
		
		ТипДанных = "СправочникСсылка.ИНАГРО_ТранспортныеСредства";
		
		Элементы.НомерТранспорта.КнопкаВыпадающегоСписка = Неопределено;
		Элементы.НомерТранспорта.КнопкаВыбора            = Неопределено;		
		Элементы.НомерТранспорта.КнопкаОчистки           = Неопределено;
		Элементы.НомерТранспорта.КнопкаСоздания          = Неопределено;
		Элементы.НомерТранспорта.ИсторияВыбораПриВводе   = ИсторияВыбораПриВводе.Авто;
		
		Элементы.НомерПрицепа.КнопкаВыпадающегоСписка    = Неопределено;
		Элементы.НомерПрицепа.КнопкаВыбора               = Неопределено;
		Элементы.НомерПрицепа.КнопкаОчистки              = Неопределено;						
		Элементы.НомерПрицепа.КнопкаСоздания             = Неопределено;
		Элементы.НомерПрицепа.ИсторияВыбораПриВводе      = ИсторияВыбораПриВводе.Авто;
		
	Иначе
		
		ТипДанных = "Строка";
		
		Элементы.НомерТранспорта.КнопкаВыпадающегоСписка = Ложь;
		Элементы.НомерТранспорта.КнопкаВыбора            = Ложь;		
		Элементы.НомерТранспорта.КнопкаОчистки           = Истина;
		Элементы.НомерТранспорта.КнопкаСоздания          = Ложь;
		Элементы.НомерТранспорта.ИсторияВыбораПриВводе   = ИсторияВыбораПриВводе.НеИспользовать;
		
		Элементы.НомерПрицепа.КнопкаВыпадающегоСписка    = Ложь;
		Элементы.НомерПрицепа.КнопкаВыбора               = Ложь;
		Элементы.НомерПрицепа.КнопкаОчистки              = Истина;						
		Элементы.НомерПрицепа.КнопкаСоздания             = Ложь;
		Элементы.НомерПрицепа.ИсторияВыбораПриВводе      = ИсторияВыбораПриВводе.НеИспользовать; 		
				
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(Объект.НомерТранспорта) Тогда
		Элементы.НомерТранспорта.ОграничениеТипа = Новый ОписаниеТипов(ТипДанных);				
		Элементы.НомерТранспорта.ВыбиратьТип     = Ложь;			 				
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.НомерПрицепа) Тогда				
		Элементы.НомерПрицепа.ОграничениеТипа    = Новый ОписаниеТипов(ТипДанных);
		Элементы.НомерПрицепа.ВыбиратьТип        = Ложь					
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьПоказателейКачества(Форма)
	
	Элементы = Форма.Элементы;
	Объект   = Форма.Объект;	
	
	СписокРеквизитов = Новый Структура("Влажность, СорнаяПримесь, ЗерноваяПримесь");	
	ИНАГРО_ЭлеваторКлиентСервер.УстановитьДоступностьРеквизитовПоНастройке(Форма, СписокРеквизитов, Форма.ЛабораторияРаботаетВСистеме, ЗначениеЗаполнено(Объект.ЛабораторныйАнализ));

КонецПроцедуры

&НаСервере
Процедура УправлениеПоследовательностьюВводаВеса()
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		Если КонтролироватьПоследовательностьВводаВеса Тогда			
				
			ДоступностьКнопкиF5     = (Объект.ВесБрутто = 0  И Объект.ВесТары <> 0 И Объект.ВесБрутто1 = 0 И НЕ ЗначениеЗаполнено(Объект.НомерПрицепа))
			                      ИЛИ (Объект.ВесБрутто = 0  И Объект.ВесТары <> 0 И Объект.ВесБрутто1 = 0 И Объект.ВесТары1 <> 0);			
			ДоступностьКнопкиF6     =  Объект.ВесБрутто = 0  И Объект.ВесБрутто1 = 0 И Объект.ВесТары1 = 0;			
			ДоступностьКнопкиF7     =  Объект.ВесБрутто <> 0 И Объект.ВесТары <> 0 И Объект.ВесТары1 <> 0;			
			ДоступностьКнопкиF8     =  Объект.ВесБрутто = 0  И Объект.ВесТары <> 0 И Объект.ВесБрутто1 = 0 И ЗначениеЗаполнено(Объект.НомерПрицепа);			
			НедоступностьВсехКнопок = (Объект.ВесБрутто <> 0 И Объект.ВесТары <> 0 И Объект.ВесБрутто1 <> 0 И Объект.ВесТары1 <> 0)
			                      ИЛИ (Объект.ВесБрутто <> 0 И Объект.ВесТары <> 0 И НЕ ЗначениеЗаполнено(Объект.НомерПрицепа));
								  
			Элементы.КнопкаF5.Доступность = ДоступностьКнопкиF5 И НЕ НедоступностьВсехКнопок;
			Элементы.КнопкаF6.Доступность = ДоступностьКнопкиF6 И НЕ ДоступностьКнопкиF5 И НЕ НедоступностьВсехКнопок;
			Элементы.КнопкаF7.Доступность = ДоступностьКнопкиF7 И НЕ НедоступностьВсехКнопок;
			Элементы.КнопкаF8.Доступность = ДоступностьКнопкиF8 И НЕ НедоступностьВсехКнопок;
					  
			Если ИНАГРО_ЭлеваторУправлениеПользователями.ЗапретитьВручнуюИзменятьВесТТН(ТекущийПользователь) Тогда
				Элементы.ВесБрутто.Доступность  = Ложь;			
				Элементы.ВесБрутто1.Доступность = Ложь;
				Элементы.ВесТары.Доступность    = Ложь;
				Элементы.ВесТары1.Доступность   = Ложь;
			Иначе
				Элементы.ВесБрутто.Доступность  = Элементы.КнопкаF5.Доступность;			
				Элементы.ВесБрутто1.Доступность = Элементы.КнопкаF7.Доступность;
				Элементы.ВесТары.Доступность    = Элементы.КнопкаF6.Доступность;
				Элементы.ВесТары1.Доступность   = Элементы.КнопкаF8.Доступность;
			КонецЕсли;
		
		КонецЕсли;
	
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПолучитьНоменклатуруИзПриказа(ВыбранноеЗначение)	
	
	СписокВыбора = Новый СписокЗначений;

	СписокВыбора = ПолучитьНоменклатуруИзПриказаНаСервере(СписокВыбора, ВыбранноеЗначение);
		
	Если СписокВыбора.Количество() > 1 Тогда
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("СписокВыбора", СписокВыбора); 
		
		ОповещениеОЗакрытии = Новый ОписаниеОповещения("ПолучитьНоменклатуруИзПриказаЗавершение", ЭтотОбъект);
		
		ОткрытьФорму("ОбщаяФорма.ИНАГРО_ФормаВыбораКультуры", ПараметрыФормы, , Новый УникальныйИдентификатор(), , , ОповещениеОЗакрытии, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	ИначеЕсли СписокВыбора.Количество() = 1 Тогда
		
		ПолучитьНоменклатуруИзПриказаЗавершение(Новый Структура("Номенклатура", СписокВыбора.Получить(0).Значение), );
		
	КонецЕсли;	
	              	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьНоменклатуруИзПриказаЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если РезультатЗакрытия <> Неопределено Тогда
		
		Объект.Номенклатура = РезультатЗакрытия.Номенклатура;
		
		ПолучитьНоменклатуруИзПриказаЗавершениеНаСервере();

	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПолучитьНоменклатуруИзПриказаЗавершениеНаСервере()
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");	
	ДокументОбъект.ЗаполнитьПоДокументуОснованию(Объект.ПриказНаВывоз, Объект.Номенклатура); 	
	ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
	
	УстановитьФункциональныеОпцииФормы();
		
	УправлениеФормойНаСервере();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьНоменклатуруИзПриказаНаСервере(СписокВыбора, Ссылка)
			
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ИНАГРО_ПриказНаВывозКультуры.Номенклатура
		|ИЗ
		|	Документ.ИНАГРО_ПриказНаВывоз.Культуры КАК ИНАГРО_ПриказНаВывозКультуры
		|ГДЕ
		|	ИНАГРО_ПриказНаВывозКультуры.Ссылка = &Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	ИНАГРО_ПриказНаВывозКультуры.Номенклатура";
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		СписокВыбора.Добавить(ВыборкаДетальныеЗаписи.Номенклатура);
	КонецЦикла;	

	Возврат СписокВыбора;

КонецФункции

&НаКлиенте
Процедура ЗавершениеПолученияВеса(Результат, Параметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		Если ИмяНажатойКомандыПолученияВеса = "КнопкаF5" Тогда			
			Объект.ВесБрутто = Результат;
			ЗавершениеПолученияВесаНаСервере();			
		ИначеЕсли ИмяНажатойКомандыПолученияВеса = "КнопкаF6" Тогда			
			Объект.ВесТары = Результат;
			ЗавершениеПолученияВесаНаСервере();			
		ИначеЕсли ИмяНажатойКомандыПолученияВеса = "КнопкаF7" Тогда			
			Объект.ВесБрутто1 = Результат;
			ЗавершениеПолученияВесаНаСервере();			
		ИначеЕсли ИмяНажатойКомандыПолученияВеса = "КнопкаF8" Тогда			
			Объект.ВесТары1 = Результат;
			ЗавершениеПолученияВесаНаСервере();		
		КонецЕсли;	
	КонецЕсли;
	
	Объект.ВремяВыбытия = ТекущаяДата();
	
	РасчетВеса();
	УправлениеПоследовательностьюВводаВеса();
	
	ИмяНажатойКомандыПолученияВеса = Неопределено;
	
КонецПроцедуры

&НаСервере
Процедура ЗавершениеПолученияВесаНаСервере()
	
	Если ИмяНажатойКомандыПолученияВеса = "КнопкаF5" Тогда
		
		Если НЕ ИНАГРО_КонтрольПроцессов.ПроверитьОтрицательноеНетто(Объект.ВесБрутто, Объект.ВесТары) Тогда 
			Объект.ВесБрутто = 0;
			Возврат;
		КонецЕсли;
		
		Если Объект.ВесБруттоКонтроль = 0 Тогда 
			Объект.ВесБруттоКонтроль = Объект.ВесБрутто;
		КонецЕсли;
		
		ИНАГРО_КонтрольПроцессов.КонтрольИзмененияВесаТТН(Объект, Объект.ВесБруттоКонтроль, Объект.ВесБрутто);
	
	ИначеЕсли ИмяНажатойКомандыПолученияВеса = "КнопкаF6" Тогда
		
		Если Объект.ВесТарыКонтроль = 0 Тогда 
			Объект.ВесТарыКонтроль = Объект.ВесТары;
		КонецЕсли;
		
		ИНАГРО_КонтрольПроцессов.КонтрольИзмененияВесаТТН(Объект, Объект.ВесТарыКонтроль, Объект.ВесТары);
		ИНАГРО_КонтрольПроцессов.КонтрольРасхожденияВесаТары(Объект, Ложь);
		
	ИначеЕсли ИмяНажатойКомандыПолученияВеса = "КнопкаF7" Тогда
		
		Если НЕ ИНАГРО_КонтрольПроцессов.ПроверитьОтрицательноеНетто(Объект.ВесБрутто1, Объект.ВесТары1) Тогда 
			Объект.ВесБрутто1 = 0;
			Возврат;				
		КонецЕсли;
		
		Если Объект.ВесБрутто1Контроль = 0 тогда 
			Объект.ВесБрутто1Контроль = Объект.ВесБрутто1;
		КонецЕсли;
		
		ИНАГРО_КонтрольПроцессов.КонтрольИзмененияВесаТТН(Объект, Объект.ВесБрутто1Контроль, Объект.ВесБрутто1);

	ИначеЕсли ИмяНажатойКомандыПолученияВеса = "КнопкаF8" Тогда
		
		Если Объект.ВесТары1Контроль = 0 Тогда 
			Объект.ВесТары1Контроль = Объект.ВесТары1;				
		КонецЕсли;
								
		ИНАГРО_КонтрольПроцессов.КонтрольИзмененияВесаТТН(Объект, Объект.ВесТары1Контроль, Объект.ВесТары1);
		ИНАГРО_КонтрольПроцессов.КонтрольРасхожденияВесаТары(Объект, Ложь);			
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура РасчетВеса(СтрокаТабличнойЧасти = Неопределено)
	 	
	Объект.ВесНетто  = Объект.ВесБрутто - Объект.ВесТары;
	Объект.ВесНетто1 = Объект.ВесБрутто1 - Объект.ВесТары1;
	
	Если Объект.ВидОперации = Перечисления.ИНАГРО_ВидыОперацийТТНВывоз.ВывозФасованного Тогда
		
		Если СтрокаТабличнойЧасти <> Неопределено И ЗначениеЗаполнено(СтрокаТабличнойЧасти.ВидФасовки) Тогда			 	
			СтрокаТабличнойЧасти.Вес = СтрокаТабличнойЧасти.Количество * СтрокаТабличнойЧасти.ВидФасовки.Вес;		
		КонецЕсли;	
		
		ПересчитатьИтоги();
		
	Иначе
		
		Объект.Вес = Объект.ВесНетто + Объект.ВесНетто1;
		
		РасчетЗачетногоВеса();
		
	КонецЕсли;	
		
КонецПроцедуры

&НаСервере
Процедура РасчетЗачетногоВеса()
	
	ПараметрыДляРасчетаЗачетногоВеса = ПолучитьПараметрыДляРасчетаЗачетногоВеса();
	
	Объект.ЗачетныйВес = ИНАГРО_Элеватор.ЗачетныйВесПриПроведении(ПараметрыДляРасчетаЗачетногоВеса);
	
КонецПроцедуры

&НаКлиенте
Процедура РасчетВесаДляСтрокиТабличнойЧасти()
	
	ТекущиеДанные = Элементы.СписокНоменклатуры.ТекущиеДанные;
	
	ДанныеСтрокиТаблицы = Новый Структура("Количество, ВидФасовки, Вес");
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, ТекущиеДанные);
	
	РасчетВеса(ДанныеСтрокиТаблицы);
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтрокиТаблицы);

	ПересчитатьИтоги();

КонецПроцедуры

&НаСервере
Процедура ПересчитатьИтоги()	
	
	Объект.Вес         = Объект.СписокНоменклатуры.Итог("Вес");
	Объект.ЗачетныйВес = Объект.Вес;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСчетаУчетаВТабличнойЧасти()
	
	Если Объект.СписокНоменклатуры.Количество() > 0 Тогда
		Документы.ИНАГРО_ТТНВывоз.ЗаполнитьСчетаУчетаВТабличнойЧасти(Объект, "СписокНоменклатуры", СобственноеПодразделение);
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Функция ВключенаВРеестр()
		
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	РеестрТТН.Ссылка
		|ИЗ
		|	Документ.ИНАГРО_РеестрТТНВывоз КАК РеестрТТН
		|ГДЕ
		|	РеестрТТН.СписокТТН.ТТН.Дата МЕЖДУ &ДатаС И &ДатаПо
		|	И РеестрТТН.СписокТТН.ТТН = &ТекДок";
	
	Запрос.УстановитьПараметр("ДатаС",  НачалоДня(Объект.Дата));
	Запрос.УстановитьПараметр("ДатаПо", КонецДня(Объект.Дата));
	Запрос.УстановитьПараметр("ТекДок", Объект.Ссылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Количество() > 0 Тогда
		Возврат Истина;
	Иначе 
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ПолучитьПараметрыДляДоговоров()

	ПараметрыОтбора = Новый Структура("ВидХранения, Урожай");
	ЗаполнитьЗначенияСвойств(ПараметрыОтбора, Объект);

	Возврат ПараметрыОтбора;

КонецФункции

&НаКлиенте
Функция ПолучитьПараметрыДляПроверкиЗаполнения()
	
	ПараметрыДляПроверкиЗаполнения = Новый Структура(
		"Склад, ВидХранения, Урожай, 
		|Номенклатура");
	ЗаполнитьЗначенияСвойств(ПараметрыДляПроверкиЗаполнения, Объект);

	Возврат ПараметрыДляПроверкиЗаполнения; 

КонецФункции

&НаСервере
Функция ПолучитьПараметрыДляРасчетаЗачетногоВеса()
	
	ПараметрыДляРасчетаЗачетногоВеса = Новый Структура(
		"Ссылка, Дата, Организация,
		|Владелец, ДоговорКонтрагента, Номенклатура,
		|Склад, Влажность, СорнаяПримесь,
		|ФизическийВес, ЗачетныйВес     
		|");	
	ЗаполнитьЗначенияСвойств(ПараметрыДляРасчетаЗачетногоВеса, Объект);
	ПараметрыДляРасчетаЗачетногоВеса.Вставить("ФизическийВес", Объект.Вес);

	Возврат ПараметрыДляРасчетаЗачетногоВеса;

КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьВидКультурыДляРасчетаСтоимостиУслуги(Знач Номенклатура)
	
	ВидКультуры = ИНАГРО_Элеватор.ПолучитьДополнительныйРеквизитНоменклатуры(Номенклатура, "ВидКультуры");	

	Возврат ВидКультуры.ВидКультурыДляРасчетаСтоимостиУслуги;

КонецФункции

#КонецОбласти  

#Область СлужебныеПроцедурыИФункцииБСП

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
		
	Если ТипЗнч(Команда) = Тип("КомандаФормы") Тогда
		
		ИмяКоманды      = Команда.Имя;
		АдресНастроек   = ЭтотОбъект.ПараметрыПодключаемыхКоманд.АдресТаблицыКоманд;
		ОписаниеКоманды = ПодключаемыеКомандыКлиентПовтИсп.ОписаниеКоманды(ИмяКоманды, АдресНастроек);
		
		Если    ОписаниеКоманды.Идентификатор = "Ф1_СГ"
			ИЛИ	ОписаниеКоманды.Идентификатор = "Ф1_ТН"
			ИЛИ ОписаниеКоманды.Идентификатор = "Ф1_ТН_2014"
			ИЛИ ОписаниеКоманды.Идентификатор = "Ф1_ТН_2019"
			ИЛИ ОписаниеКоманды.Идентификатор = "Пропуск" Тогда
			
			ДополнительныеПараметры = Новый Структура;
			ДополнительныеПараметры.Вставить("Команда",              Команда);
			ДополнительныеПараметры.Вставить("ИдентификаторКоманды", ОписаниеКоманды.Идентификатор);
			
			Оповещение = Новый ОписаниеОповещения("ВводЧислаЗавершение", ЭтотОбъект, ДополнительныеПараметры); 
			ПоказатьВводЧисла(Оповещение, 0, Нстр("ru='Введите количество экземпляров';uk='Введіть кількість екземплярів'"), 15, 0);
			
		Иначе
			ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);  			
		КонецЕсли; 
		
	Иначе
		ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте 
Процедура ВводЧислаЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт 
	
	Если РезультатЗакрытия <> Неопределено Тогда
		ЗаписатьВыбранноеКоличество(РезультатЗакрытия, ДополнительныеПараметры.ИдентификаторКоманды);		
		ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, ДополнительныеПараметры.Команда, Объект);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаписатьВыбранноеКоличество(РезультатЗакрытия, ИдентификаторКоманды)
	
	Документы.ИНАГРО_ТТНВывоз.ЗаписатьВыбранноеКоличество(РезультатЗакрытия, ИдентификаторКоманды);
	
КонецПроцедуры

#КонецОбласти