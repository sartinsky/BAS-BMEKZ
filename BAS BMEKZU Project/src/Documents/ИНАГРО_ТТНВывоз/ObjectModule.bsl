#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда  
	
Перем ПараметрыУчетаЭлеватора;
Перем СобственноеПодразделение;

#Область ОбработчикиСобытий

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	ТипДанныхЗаполнения = ТипЗнч(ДанныеЗаполнения);
	
	ИНАГРО_ЭлеваторЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект);

	ЗаполнениеДокументов.Заполнить(ЭтотОбъект, ДанныеЗаполнения); 	
	
	Если ТипДанныхЗаполнения = Тип("Структура") Тогда		
		Если  ДанныеЗаполнения.Свойство("Ссылка")
			И ТипЗнч(ДанныеЗаполнения.Ссылка) = Тип("ДокументСсылка.ИНАГРО_ПриказНаВывоз")
			И ДанныеЗаполнения.Свойство("Номенклатура") Тогда			
			ЗаполнитьПоДокументуОснованию(ДанныеЗаполнения);
			Заказчик = Владелец;
		КонецЕсли;		
		Если ДанныеЗаполнения.Свойство("ВидОперации") Тогда
			ВидОперации = ДанныеЗаполнения.ВидОперации;
		КонецЕсли;
	КонецЕсли;

	ВидЖурнала    = Перечисления.ИНАГРО_ВидыЖурналов.ЖурналВесовой;	
		
	ИНАГРО_ЭлеваторЗаполнениеДокументов.ЗаполнитьТипНомерЖурналаВесовой(ЭтотОбъект);	
	
	ВремяПрибытия = ТекущаяДата();
	ВремяВыбытия  = ТекущаяДата();	
			
	Весовщик      = Пользователи.ТекущийПользователь();	
	Качество      = ХранилищеОбщихНастроек.Загрузить("ИНАГРО_ТТНВывоз_Качество", "Элеватор");
		
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	МассивНепроверяемыхРеквизитов = Новый Массив; 	
	
	Если ВидОперации = Перечисления.ИНАГРО_ВидыОперацийТТНВывоз.ВывозФасованного Тогда
		
		МассивНепроверяемыхРеквизитов.Добавить("Номенклатура");
		МассивНепроверяемыхРеквизитов.Добавить("Урожай");		
					
	КонецЕсли;
	
	КонтрольПриказов = ИНАГРО_Элеватор.ПолучитьПараметрУчетаЭлеватора(Дата, "КонтрольПриказов", Ложь);
	Если НЕ КонтрольПриказов Тогда
		МассивНепроверяемыхРеквизитов.Добавить("ПриказНаВывоз");
	КонецЕсли;
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);	

КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда		
		Возврат;		
	КонецЕсли;
	
	ОбновитьПараметрыУчетаЭлеватора();
		
	Если ЭтоНовый() Тогда
		
		ВремяНачалаДняПриОтгрузке = ИНАГРО_Элеватор.ПолучитьПараметрУчетаЭлеватора(Дата, "ВремяНачалаДняПриОтгрузке", 0);
				
		Дата = Дата + 60 * 60 * ВремяНачалаДняПриОтгрузке; 

	КонецЕсли;
	
	Если  ПараметрыУчетаЭлеватора.КонтрольПриказов
		И ПараметрыУчетаЭлеватора.ВывозДействителенОдинДень
		И ЗначениеЗаполнено(ПриказНаВывоз)
		И НачалоДня(ПриказНаВывоз.Дата) <> НачалоДня(Дата) Тогда
		
		ТекстСообщения = НСтр("ru='Дата приказа не совпадает с датой ТТН!';uk='Дата наказу не збігається з датою ТТН!'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , , , Отказ); 		
				
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПриказНомер) И НЕ ЗначениеЗаполнено(ПриказДата) Тогда
		ПриказНомер = ПриказНаВывоз.Номер;
		ПриказДата  = ПриказНаВывоз.Дата;
	КонецЕсли;	
		
	Если ВидОперации = Перечисления.ИНАГРО_ВидыОперацийТТНВывоз.ВывозФасованного Тогда
		
		ЕстьЛабораторныйАнализ = Ложь;
		
		Для Каждого СтрокаТабличнойЧасти Из СписокНоменклатуры Цикл
			Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.ЛабораторныйАнализ) Тогда
				ЕстьЛабораторныйАнализ = Истина;
				Прервать;
			КонецЕсли;			
		КонецЦикла;
		
	Иначе
		
		ЕстьЛабораторныйАнализ = ЗначениеЗаполнено(ЛабораторныйАнализ);
		
		СписокНоменклатуры.Очистить();
		
		НовСтр = СписокНоменклатуры.Добавить();
		НовСтр.Номенклатура       = Номенклатура;		
		Новстр.Урожай             = Урожай;		
		НовСтр.Вес                = Вес;
		НовСтр.ВидФасовки         = ВидФасовки;
		НовСтр.Количество         = Количество;
		НовСтр.ЛабораторныйАнализ = ЛабораторныйАнализ;
		НовСтр.Влажность          = Влажность;
		НовСтр.СорнаяПримесь      = СорнаяПримесь;
		НовСтр.ЗерноваяПримесь    = ЗерноваяПримесь;
		НовСтр.НомерАнализа       = НомерАнализа;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТипЖурнала) Тогда
		
		Отбор = Новый Структура("ВидЖурнала, ТипЖурнала");
		ЗаполнитьЗначенияСвойств(Отбор, ЭтотОбъект);
		
		ИНАГРО_Элеватор.ЗаписатьОчереднойНомер(Отбор, НомерЖурнала); 
		
	КонецЕсли;
	
	Если НЕ ИНАГРО_Элеватор.ПолучитьПараметрУчетаЭлеватора(Дата, "ОтключитьАвтоматическоеНачислениеУслуг", Ложь) Тогда		
		Если  ВидОперации <> Перечисления.ИНАГРО_ВидыОперацийТТНВывоз.ВывозФасованного
			И ИНАГРО_Элеватор.ПолучитьПараметрУчетаЭлеватора(Дата, "НеПроводитьДокументамиРеестрТТНВывоз", Ложь) Тогда 
			ЗаполнитьУслуги();
		КонецЕсли;
	КонецЕсли;	
	
	ХранилищеОбщихНастроек.Сохранить("ИНАГРО_ТТНВывоз_Качество", "Элеватор", Качество);

КонецПроцедуры 

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	Перем Заголовок, СтруктураШапкиДокумента;
	Перем ТаблицаПоКультурам;
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКПроведению(ЭтотОбъект);
		   
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначенияБПВызовСервера.ПредставлениеДокументаПриПроведении(Ссылка);

	ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента);
	
	Если ЗначениеЗаполнено(МестоХранения) И МестоХранения.Владелец <> Склад Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Место хранения %2 не принадлежит складу %1!';uk='Місце зберігання %2 не належить складу %1!'"), Склад, МестоХранения);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , , , Отказ);
	КонецЕсли;		
	
	Если  ИНАГРО_Элеватор.ПолучитьПараметрУчетаЭлеватора(Дата, "ВывозДействителенОдинДень", Ложь)
		И ЗначениеЗаполнено(ПриказНаВывоз)
		И НачалоДня(ПриказНаВывоз.Дата) <> НачалоДня(Дата) Тогда		
		ТекстСообщения = НСтр("ru='Приказ действует один день';uk='Наказ діє один день!'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , , , Отказ);		
	КонецЕсли;	
			
	// Движения по документу
	Если НЕ Отказ Тогда		
		ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоКультурам, Отказ, Заголовок);
	КонецЕсли; 		
	
	Движения.Хозрасчетный.ВыполнитьДействияПередЗаписьюДвижений();

	ПроведениеСервер.ПодготовитьНаборыЗаписейКЗаписиДвижений(ЭтотОбъект); 	

КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКОтменеПроведения(ЭтотОбъект);
	Движения.Записать();
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)

	Дата = НачалоДня(ОбщегоНазначения.ТекущаяДатаПользователя());
	Ответственный = Пользователи.ТекущийПользователь();
	
	ИНАГРО_ЭлеваторЗаполнениеДокументов.ЗаполнитьТипНомерЖурналаВесовой(ЭтотОбъект);	
		
	ВесБрутто   = 0; 
	ВесБрутто1  = 0;
	ВесТары     = 0;	 
	ВесТары1    = 0;
	ВесНетто    = 0;
	ВесНетто1   = 0;	
	ЗачетныйВес = 0;
	Вес         = 0;

	Услуги.Очистить();	
		
КонецПроцедуры

#КонецОбласти

#Область Проведение

// Процедура формирует структуру шапки документа и дополнительных полей.
//
Процедура ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента) Экспорт

	// Дерево значений, содержащее имена необходимых полей в запросе по шапке.
	Перем ДеревоПолейЗапросаПоШапке;	
	
	СтруктураШапкиДокумента   = ОбщегоНазначенияРед12.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	
	// Заполним по шапке документа дерево параметров, нужных при проведении.
	ДеревоПолейЗапросаПоШапке = ОбщегоНазначенияРед12.СформироватьДеревоПолейЗапросаПоШапке(); 	
	
	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа.
	СтруктураШапкиДокумента = УправлениеЗапасами.СформироватьЗапросПоДеревуПолей(ЭтотОбъект, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, "");
	
	СтруктураШапкиДокумента.Вставить("СобственноеПодразделение", СобственноеПодразделение);

КонецПроцедуры

// Процедура выполняет движения по регистрам
//
Процедура ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоКультурам, Отказ, Заголовок)
	
	ФормируетРеестр = Истина;
	
	ПроводимЧерезТТН                         = ИНАГРО_Элеватор.ПолучитьПараметрУчетаЭлеватора(Дата, "НеПроводитьДокументамиРеестрТТНВывоз", Ложь);	
	ВидНоменклатуры                          = ИНАГРО_Элеватор.ПолучитьДополнительныйРеквизитНоменклатуры(Номенклатура, "ВидТМЦ");
	ФормироватьРеестрыТТНВывозДляОтходов3Кат = ИНАГРО_Элеватор.ПолучитьПараметрУчетаЭлеватора(Дата, "ФормироватьРеестрыТТНВывозДляОтходов3Кат", Ложь);	
	
	Проводим = Ложь;
	Если ПроводимЧерезТТН Тогда 
		Если ФормироватьРеестрыТТНВывозДляОтходов3Кат Тогда
			Если ВидНоменклатуры <> Перечисления.ИНАГРО_ВидыТМЦ.Кат3 Тогда  	
				Проводим = Истина;
			Иначе 
				Проводим = Ложь;
			КонецЕсли;
		Иначе
			Проводим = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если ВидОперации = Перечисления.ИНАГРО_ВидыОперацийТТНВывоз.ВывозФасованного ИЛИ Проводим Тогда
		
		ПодготовитьТаблицуПоКультурам(СтруктураШапкиДокумента, ТаблицаПоКультурам, Отказ, Заголовок);			
		
		Если НЕ Отказ Тогда 
			ФормируетРеестр = Ложь;		
			ТаблицаПоКультурам.Колонки.Добавить("КоличествоМест");                               
			ТаблицаПоКультурам.ЗаполнитьЗначения(0, "КоличествоМест");
			ПроводкиПоРегистрамЭлеватора(РежимПроведенияДокумента, СтруктураШапкиДокумента, ТаблицаПоКультурам, Отказ, Заголовок);			
		КонецЕсли;
		
	Иначе
		// Если вид операции Перевоз проверка возможности проведения по весу	
		// Для автомобиля				
		Если ВесБрутто = 0 Тогда
			ТекстСообщения = НСтр("ru='Нет значения веса брутто!';uk='Немає значення ваги брутто!'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Объект.ВесБрутто", , Отказ);									
		КонецЕсли;
		
		Если ВесТары = 0 Тогда
			ТекстСообщения = НСтр("ru='Нет значения веса тары!';uk='Немає значення ваги тари!'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Объект.ВесТары", , Отказ);									
		КонецЕсли;
				
		// Для прицепа
		Если ВесБрутто1 + ВесТары1 > 0 Тогда
			
			Если ВесБрутто1 = 0 Тогда
				ТекстСообщения = НСтр("ru='Нет значения веса брутто для прицепа!';uk='Немає значення ваги брутто для причепа!'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Объект.ВесБрутто1", , Отказ);																
			КонецЕсли;
			
			Если ВесТары1 = 0 Тогда
				ТекстСообщения = НСтр("ru='Нет значения веса тары для прицепа!';uk='Немає значення ваги тари для причепа!'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Объект.ВесТары1", , Отказ);																
			КонецЕсли;
			
		КонецЕсли; 
		
		Если ФормируетРеестр =Ложь Тогда		
			Если Не Отказ Тогда
				// Проводка по регистру ЖурналЛабораторныхАнализов
				СтруктураШапкиДокумента.Вставить("ФизическийВес", Вес);			
				ИНАГРО_Элеватор.ДвиженияПоРегиструЖурналЛабораторныхАнализов(Движения, СтруктураШапкиДокумента);	
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	КонтрольПриказов                = ИНАГРО_Элеватор.ПолучитьПараметрУчетаЭлеватора(Дата, "КонтрольПриказов", Ложь);
	КонтрольПриказаВБизнесПроцессах = ИНАГРО_Элеватор.ПолучитьПараметрУчетаЭлеватора(Дата, "КонтрольПриказаВБизнесПроцессах", Ложь);
	
	Если НЕ Отказ
		И КонтрольПриказаВБизнесПроцессах
		И ЗначениеЗаполнено(СтруктураШапкиДокумента.ПриказНаВывоз) Тогда 
		
		ПодготовитьТаблицуПоКультурам(СтруктураШапкиДокумента, ТаблицаПоКультурам, Отказ, Заголовок);
		
		Для Каждого СтрокаТаблицы Из ТаблицаПоКультурам Цикл	
			
			ВидТМЦ = ИНАГРО_Элеватор.ПолучитьДополнительныйРеквизитНоменклатуры(СтрокаТаблицы.Номенклатура, "ВидТМЦ");
			Если НЕ ВидТМЦ = Перечисления.ИНАГРО_ВидыТМЦ.Кат3 Тогда 
				
				Отказ = ИНАГРО_Элеватор.ПроверитьОстатокПоПриказу(СтрокаТаблицы);
				
				Если НЕ Отказ И КонтрольПриказов Тогда 
					ИНАГРО_Элеватор.ДвиженияПоРегиструКонтрольПриказовНаВывоз(Движения, СтруктураШапкиДокумента, СтрокаТаблицы, "Расход");
					Если СобственноеПодразделение И Владелец <> Получатель И ЗначениеЗаполнено(ДоговорПолучателя) Тогда 
						ИНАГРО_Элеватор.ДвиженияПоРегиструКонтрольВывозаСобственногоЗерна(Движения, СтруктураШапкиДокумента, СтрокаТаблицы, "Приход");  			
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	ИНАГРО_КонтрольПроцессов.СохранитьЗначенияВесаТары(ЭтотОбъект,отказ) ;
	
	Если НЕ Отказ
		И КонтрольПриказов
		И КонтрольПриказаВБизнесПроцессах
		И НЕ ЗначениеЗаполнено(СтруктураШапкиДокумента.ПриказНаВывоз) Тогда
		ТекстСообщения = ("Не заполнено значение реквизита 'Приказ на вывоз'!");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);	
	КонецЕсли;	
			
КонецПроцедуры 

// Составляет таблицу по культурам и шапке документа
//
Процедура ПодготовитьТаблицуПоКультурам(СтруктураШапкиДокумента, ТаблицаПоКультурам, Отказ, Заголовок) Экспорт
	
	СтруктураПолей = Новый Структура;
	СтруктураПростыхПолей = Новый Структура;
	СтруктураСложныхПолей = Новый Структура;
	
	СтруктураПолей.Вставить("Номенклатура",                "Номенклатура");
	СтруктураПолей.Вставить("ВидФасовки",                  "ВидФасовки");
	СтруктураПолей.Вставить("Урожай",                      "Урожай");
	СтруктураПолей.Вставить("Количество",                  "Вес");
	СтруктураПолей.Вставить("Вес",                         "Вес");
	СтруктураПолей.Вставить("Количество2",                 "Количество");
	СтруктураПолей.Вставить("ФизическийВес",               "Вес");
	СтруктураПолей.Вставить("МестоХранения" , 				"Ссылка.МестоХранения");
	
	Если ВидОперации = Перечисления.ИНАГРО_ВидыОперацийТТНВывоз.ВывозФасованного Тогда
		СтруктураПолей.Вставить("ЗачетныйВес",        "Вес");
	Иначе
		СтруктураПолей.Вставить("ЗачетныйВес",        "Ссылка.ЗачетныйВес");
	КонецЕсли;

	СтруктураПолей.Вставить("Ссылка",                      "Ссылка");
	СтруктураПолей.Вставить("Дата", "Ссылка.Дата");
	СтруктураПолей.Вставить("Организация",                 "Ссылка.Организация");
	СтруктураПолей.Вставить("Владелец",                    "Ссылка.Владелец");	
	СтруктураПолей.Вставить("ДоговорКонтрагента",          "Ссылка.ДоговорКонтрагента");
	СтруктураПолей.Вставить("Получатель",                  "Ссылка.Получатель");      
	СтруктураПолей.Вставить("ДоговорПолучателя",           "Ссылка.ДоговорПолучателя"); 	
	СтруктураПолей.Вставить("Склад",                       "Ссылка.Склад");
	СтруктураПолей.Вставить("ВидХранения",                 "Ссылка.ВидХранения");
	СтруктураПолей.Вставить("ОтражатьВБухгалтерскомУчете", "Ссылка.ОтражатьВБухгалтерскомУчете");	
		
	ПроводимЧерезТТН = ИНАГРО_Элеватор.ПолучитьПараметрУчетаЭлеватора(Дата, "НеПроводитьДокументамиРеестрТТНВывоз", Ложь);	
	Если ВидОперации = Перечисления.ИНАГРО_ВидыОперацийТТНВывоз.Вывоз И ПроводимЧерезТТН Тогда
		СтруктураПолей.Вставить("ЛабораторныйАнализ", "ЛабораторныйАнализ");      
		СтруктураПолей.Вставить("НомерАнализа",       "НомерАнализа");
		СтруктураПолей.Вставить("Влажность",          "Влажность");      
		СтруктураПолей.Вставить("СорнаяПримесь",      "СорнаяПримесь");      
		СтруктураПолей.Вставить("ЗерноваяПримесь",    "ЗерноваяПримесь");      
	Иначе                  
		СтруктураПростыхПолей.Вставить("Влажность",          0);
		СтруктураПростыхПолей.Вставить("СорнаяПримесь",      0);
		СтруктураПростыхПолей.Вставить("ЗерноваяПримесь",    0);
		СтруктураПростыхПолей.Вставить("ЛабораторныйАнализ", 0);		
	КонецЕсли;
	
	СтруктураПростыхПолей.Вставить("ВидДокумента",                            СтруктураШапкиДокумента.ВидДокумента);	
	СтруктураПростыхПолей.Вставить("ВидОперацииВвозаВывозаСобственногоЗерна", Перечисления.ИНАГРО_ВидыОперацийВвозаВывозаСобственногоЗерна.РеализацияТоваровУслуг);
	
	СтруктураПолей.Вставить("ПоставщикПолучатель",         "Ссылка.Владелец");
	СтруктураПолей.Вставить("ДокументОприходования",       "Ссылка");
		
	РезультатЗапросаПоКультурам = ОбщегоНазначенияРед12.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "СписокНоменклатуры", СтруктураПолей, СтруктураПростыхПолей, СтруктураСложныхПолей);
	
	ТаблицаПоКультурам = РезультатЗапросаПоКультурам.Выгрузить();
	
КонецПроцедуры

Процедура ПроводкиПоРегистрамЭлеватора(РежимПроведенияДокумента, СтруктураШапкиДокумента, ТаблицаПоКультурам, Отказ, Заголовок)
	
	Для Каждого СтрокаТаблицы Из ТаблицаПоКультурам Цикл	
		
		СтрокаТаблицы.Количество = СтрокаТаблицы.Количество2;
		
		Если ВидОперации = Перечисления.ИНАГРО_ВидыОперацийТТНВывоз.Вывоз Тогда
			
			ИНАГРО_Элеватор.ДвиженияПоРегиструОстаткиРасход(Движения, СтрокаТаблицы);
			ИНАГРО_Элеватор.ДвиженияПоРегиструОстаткиСводнаяРасход(Движения, СтрокаТаблицы);
			
			ПроводитьККУ = ИНАГРО_Элеватор.ПроверкаЗаполненияКачества(Дата, СтрокаТаблицы.ЛабораторныйАнализ, СтрокаТаблицы.Влажность, СтрокаТаблицы.Номенклатура);
		    СтруктураШапкиДокумента.Вставить("НомерАнализа", СтрокаТаблицы.НомерАнализа);

			Если ПроводитьККУ Тогда 				
				ИНАГРО_Элеватор.ДвиженияПоРегиструФорма36Расход(Движения, СтрокаТаблицы);
				ИНАГРО_Элеватор.ДвиженияПоРегиструФорма36СводнаяРасход(Движения, СтрокаТаблицы);
			Иначе				
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='Документ: ""%1"" Не заполнены показатели качества, проведение по Форме 36 не выполнено';uk='Документ: ""%1"" Не заповнені показники якості, проведення за Формою 36 не виконано'"), Ссылка);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			КонецЕсли;
			
		Иначе
			
			ВидНоменклатуры = ИНАГРО_Элеватор.ПолучитьДополнительныйРеквизитНоменклатуры(СтрокаТаблицы.Номенклатура, "ВидТМЦ"); 
			Если ВидНоменклатуры = Перечисления.ИНАГРО_ВидыТМЦ.Кат3 Тогда
				СтрокаТаблицы.ДоговорКонтрагента = ИНАГРО_Элеватор.ПолучитьДополнительныйРеквизитОрганизации(Организация, "Договор", Дата);				
			КонецЕсли; 
			
			ИНАГРО_Элеватор.ДвиженияПоРегиструОстаткиРасход(Движения, СтрокаТаблицы);
			ИНАГРО_Элеватор.ДвиженияПоРегиструОстаткиСводнаяРасход(Движения, СтрокаТаблицы);
			ИНАГРО_Элеватор.ДвиженияПоРегиструФорма36Расход(Движения, СтрокаТаблицы);
			ИНАГРО_Элеватор.ДвиженияПоРегиструФорма36СводнаяРасход(Движения, СтрокаТаблицы);
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаТаблицы.ЛабораторныйАнализ) Тогда
			ИНАГРО_Элеватор.ДвиженияПоРегиструЖурналЛабораторныхАнализов(Движения, СтрокаТаблицы);
		КонецЕсли;
		
	КонецЦикла;	
	
	ПроводимЧерезТТН = ИНАГРО_Элеватор.ПолучитьПараметрУчетаЭлеватора(Дата, "НеПроводитьДокументамиРеестрТТНВывоз", Ложь);	
	//Если ВидОперации = Перечисления.ИНАГРО_ВидыОперацийТТНВывоз.Вывоз И ПроводимЧерезТТН Тогда 
	Если ПроводимЧерезТТН Тогда 
		
		ТаблицаУслуг = СформироватьТаблицуУслуг();
		Если  ТаблицаУслуг.Количество() > 0 
			И НЕ СобственноеПодразделение Тогда
			ИНАГРО_Элеватор.ДвиженияПоРегиструРасчетыПоУслугам(Движения, ТаблицаУслуг, "Приход");
		КонецЕсли;
		
		ПровестиПоРегиструДанныеПоКачествуПартийЗерна();
		
	КонецЕсли;
	
	Если (ВидОперации = Перечисления.ИНАГРО_ВидыОперацийТТНВывоз.Вывоз И ПроводимЧерезТТН) ИЛИ ВидОперации = Перечисления.ИНАГРО_ВидыОперацийТТНВывоз.ВывозФасованного Тогда 
		Если ИНАГРО_Элеватор.ПолучитьПараметрУчетаЭлеватора(СтруктураШапкиДокумента.Дата, "ОтражениеВвозаВывозаСобственногоЗернаВРегламентированномУчете", Ложь) Тогда
			ДвижениеПоРегиструКонтрольОтраженияВвозаВывозаСобственногоЗернаВРегламентированомУчете(РежимПроведенияДокумента, СтруктураШапкиДокумента, ТаблицаПоКультурам, Отказ, Заголовок);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПровестиПоРегиструДанныеПоКачествуПартийЗерна()
	
	// Подготовим таблицу для проведения по регистру "ИНАГРО_ДанныеПоКачествуПартийЗерна".
	ТаблицаПоПартиям = ПодготовитьТаблицуПоПартиям();
	
	// Движения по регистру ДанныеПоКачетсвуПартийЗерна
	Если ТаблицаПоПартиям <> Неопределено Тогда
		Если ИНАГРО_Элеватор.ПолучитьПараметрУчетаЭлеватора(Дата, "ИспользоватьСистемуКонтроляКачестваПартийЗерна", Ложь) Тогда
			НаборДвижений                  = Движения.ИНАГРО_ДанныеПоКачествуПартийЗерна;
			ТаблицаДвижений                = НаборДвижений.Выгрузить();
			ОбщегоНазначенияБПВызовСервера.ЗагрузитьВТаблицуЗначений(ТаблицаПоПартиям, ТаблицаДвижений);
			НаборДвижений.мПериод          = Дата;
			НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;
			Движения.ИНАГРО_ДанныеПоКачествуПартийЗерна.ВыполнитьДвижения();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры	

Процедура ДвижениеПоРегиструКонтрольОтраженияВвозаВывозаСобственногоЗернаВРегламентированомУчете(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоКультурам, Отказ, Заголовок)
	
	ВыполнитьДвижения = Ложь;
	
	Если СтруктураШапкиДокумента.СобственноеПодразделение И Владелец <> Получатель Тогда		
		ВыполнитьДвижения = Истина;		
	КонецЕсли;
	
	Если ВыполнитьДвижения Тогда
		
		// Приход
		
		НаборДвижений = Движения.ИНАГРО_КонтрольОтраженияВвозаВывозаСобственногоЗернаВРегламентированномУчете;
		
		СтруктТаблицДокумента = Новый Структура;
		СтруктТаблицДокумента.Вставить("ТаблицаПоКультурам", ТаблицаПоКультурам);
		
		ТаблицыДанныхДокумента = ИНАГРО_Общий.ЗагрузитьТаблицыДокументаВСтруктуру(НаборДвижений, СтруктТаблицДокумента);
		
		ИНАГРО_Общий.ЗаписатьТаблицыДокументаВРегистр(НаборДвижений, ВидДвиженияНакопления.Приход, ТаблицыДанныхДокумента, Дата);	
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции	

Процедура ОбновитьПараметрыУчетаЭлеватора()

	ПараметрыУчетаЭлеватора  = ИНАГРО_Элеватор.ПолучитьПараметрыУчетаЭлеватора(Дата);
	СобственноеПодразделение = ИНАГРО_Элеватор.ПолучитьДополнительныйРеквизитКонтрагента(Владелец, "СобственноеПодразделение");
		
КонецПроцедуры

Процедура ЗаполнитьПоДокументуОснованию(Основание, НоменклатураПриВыбореПриказа = Неопределено) Экспорт
		
	ПриказНаВывоз                    = Основание.Ссылка;
	ПриказНомер                      = Основание.Ссылка.Номер;
	ПриказДата                       = Основание.Ссылка.Дата;
	Организация                      = Основание.Организация;
	Владелец                         = Основание.Владелец;
	ДоговорКонтрагента               = Основание.ДоговорКонтрагента;
	
	Если НоменклатураПриВыбореПриказа <> Неопределено Тогда
		Номенклатура = НоменклатураПриВыбореПриказа;
	Иначе
		Номенклатура = Основание.Номенклатура;
	КонецЕсли;
	
	Если ТипЗнч(Основание) = Тип("Структура") Тогда
		
		Основание.Свойство("Получатель",         Получатель);
		Основание.Свойство("ДоговорПолучателя",  ДоговорПолучателя);			
		Основание.Свойство("ЛабораторныйАнализ", ЛабораторныйАнализ);
		Основание.Свойство("НомерАнализа",       НомерАнализа);
		Основание.Свойство("Влажность",          Влажность);
		Основание.Свойство("СорнаяПримесь",      СорнаяПримесь);
		Основание.Свойство("ЗерноваяПримесь",    ЗерноваяПримесь);
		Если Основание.Свойство("ЕстьФасовка") И Основание.ЕстьФасовка Тогда
			ВидОперации        = Перечисления.ИНАГРО_ВидыОперацийТТНВывоз.ВывозФасованного;
			СписокНоменклатуры.Очистить();				
			///////////
			Если Основание.Ссылка.Культуры.Количество() > 0 Тогда
				ТекСтрока = Основание.Ссылка.Культуры.Найти(Номенклатура,"Номенклатура");
				Если НЕ ТекСтрока = Неопределено Тогда
					НоваяСтрока = СписокНоменклатуры.Добавить();
					НоваяСтрока.Номенклатура	= Номенклатура;			
					НоваяСтрока.Количество   	= ТекСтрока.Количество;
					НоваяСтрока.ВидФасовки   	= ТекСтрока.Фасовка;
					НоваяСтрока.Вес				= ТекСтрока.Фасовка.Вес * ТекСтрока.Количество;			
					НоваяСтрока.ЗерноваяПримесь = ТекСтрока.ЗерноваяПримесь;
					НоваяСтрока.СорнаяПримесь   = ТекСтрока.СорнаяПримесь;
					НоваяСтрока.Влажность     	= ТекСтрока.Влажность;
					НоваяСтрока.ЛабораторныйАнализ = ТекСтрока.ЛабораторныйАнализ;
					НоваяСтрока.НомерАнализа    = ТекСтрока.НомерАнализа;
					НоваяСтрока.Урожай     		= Основание.Урожай;
				КонецЕсли;	
			КонецЕсли;	
				
			//////////////
		КонецЕсли;
		
	Иначе
		
		//СобственноеПодразделение = ИНАГРО_Элеватор.ПолучитьДополнительныйРеквизитКонтрагента(Владелец, "СобственноеПодразделение");

		//Если СобственноеПодразделение Тогда
		//	Получатель 		  = Основание.Получатель;
		//	ДоговорПолучателя = Основание.ДоговорПолучателя;
		//КонецЕсли;
		//
		//СтрокаТабличнойЧасти = Основание.Культуры.Найти(Номенклатура, "Номенклатура");
		//ЕстьФасовка = ЗначениеЗаполнено(СтрокаТабличнойЧасти.Фасовка);			
		//
		//Если ЕстьФасовка Тогда
		//	
		//	ВидОперации        = Перечисления.ИНАГРО_ВидыОперацийТТНВывоз.ВывозФасованного;
		//	СписокНоменклатуры.Очистить();				
		//	
		//Иначе
		//	
		//	ВидОперации        = Перечисления.ИНАГРО_ВидыОперацийТТНВывоз.Вывоз;				
		//	ЛабораторныйАнализ = СтрокаТабличнойЧасти.ЛабораторныйАнализ;
		//	
		//	Если ЗначениеЗаполнено(ЛабораторныйАнализ) Тогда
		//		НомерАнализа    = СтрокаТабличнойЧасти.НомерАнализа;
		//		Влажность       = СтрокаТабличнойЧасти.Влажность;
		//		СорнаяПримесь   = СтрокаТабличнойЧасти.СорнаяПримесь;							
		//		ЗерноваяПримесь = СтрокаТабличнойЧасти.ЗерноваяПримесь;
		//	КонецЕсли;	
		//	
		//КонецЕсли;	
		
	КонецЕсли;
	
	Получатель                       = ?(ЗначениеЗаполнено(Получатель), Получатель, Владелец);		
	Качество                         = ?(ЗначениеЗаполнено(ЛабораторныйАнализ), Истина, Ложь);
	
	Склад                            = Основание.Склад;		
	МестоХранения                    = Основание.МестоХранения;				
	Урожай                           = Основание.Урожай;		
	ВидХранения                      = Основание.ВидХранения;
	ПолучилПоДругомуДокументу        = Основание.ПолучилПоДругомуДокументу;
	ДоверенностьДата                 = Основание.ДоверенностьДата;
	ДоверенностьНомер                = Основание.ДоверенностьНомер;
	ДоверенностьСерия                = Основание.ДоверенностьСерия;
	ДокументПодтверждающийПолномочия = Основание.ДокументПодтверждающийПолномочия;
	ДоверенностьЧерез                = Основание.ДоверенностьЧерез;		
	Комментарий                      = Основание.Комментарий;
	
	ПунктНазначения   = Основание.ПунктНазначения;
	Если СокрЛП(ПунктНазначения) = "" Тогда
		ПунктНазначения = БухгалтерскийУчетПереопределяемый.ПолучитьАдресИзКонтактнойИнформации(Получатель, "Фактический");
		Если СокрЛП(ПунктНазначения) = "" Тогда
			ПунктНазначения = БухгалтерскийУчетПереопределяемый.ПолучитьАдресИзКонтактнойИнформации(Получатель, "Юридический");
		КонецЕсли;
	КонецЕсли;		
			
КонецПроцедуры

Процедура ЗаполнитьУслуги() Экспорт
	
	ОбновитьПараметрыУчетаЭлеватора();
	
	Если НеПереформировыватьАвтоматически Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаУслуг = Новый ТаблицаЗначений;
	ТаблицаУслуг.Колонки.Добавить("Номенклатура");
	ТаблицаУслуг.Колонки.Добавить("Количество");
	ТаблицаУслуг.Колонки.Добавить("Сумма"); 
		 
	Если НЕ СобственноеПодразделение Тогда
		
		ВидКультурыДляРасчетаСтоимостиУслуги = ИНАГРО_Элеватор.ПолучитьДополнительныйРеквизитНоменклатуры(Номенклатура, "ВидКультуры").ВидКультурыДляРасчетаСтоимостиУслуги;
		СпособРасчета                        = ПараметрыУчетаЭлеватора.СпособНачисленияОплатыЗаУслугуЛабАнализа; 
		
		Номенклатура_Анализ                  = ИНАГРО_Элеватор.ПолучитьПредопределеннуюНоменклатуру("Анализ");
		Номенклатура_Погрузка                = ИНАГРО_Элеватор.ПолучитьПредопределеннуюНоменклатуру("Погрузка");

		// лабораторный анализ
		
		Если НЕ ПараметрыУчетаЭлеватора.НеРассчитыватьУслугиЛабАнализаПриВывозе Тогда
			
			Если ЗначениеЗаполнено(ЛабораторныйАнализ) Тогда
				
				Если ЗначениеЗаполнено(Номенклатура_Анализ) Тогда  
					
					Если Вес <> 0 Тогда
						ТекущаяЦена = ИНАГРО_Элеватор.ПолучитьЦенуУслугиЭлеватора(Организация, Дата, Владелец, ДоговорКонтрагента, ВидКультурыДляРасчетаСтоимостиУслуги, Урожай, Номенклатура_Анализ);
					Иначе
						ТекущаяЦена = 0;
					КонецЕсли;										
					
					Если    СпособРасчета = Перечисления.ИНАГРО_СпособыНачисленияОплатыЗаАнализ.ЗаЕдиницу
						ИЛИ СпособРасчета = Перечисления.ИНАГРО_СпособыНачисленияОплатыЗаАнализ.ПустаяСсылка() Тогда 
						КоличествоУслуги = 1;
					ИначеЕсли СпособРасчета = Перечисления.ИНАГРО_СпособыНачисленияОплатыЗаАнализ.ЗаТоннуЗачВеса Тогда 
						КоличествоУслуги = Вес / 1000;
					ИначеЕсли СпособРасчета = Перечисления.ИНАГРО_СпособыНачисленияОплатыЗаАнализ.ЗаТоннуФизВеса Тогда
						КоличествоУслуги = Вес / 1000;
					ИначеЕсли СпособРасчета = Перечисления.ИНАГРО_СпособыНачисленияОплатыЗаАнализ.Нет Тогда
						КоличествоУслуги = 0;
					КонецЕсли;		
					
					Если ТекущаяЦена <> 0 И КоличествоУслуги <> 0 Тогда 													 
						НоваяСтрока = ТаблицаУслуг.Добавить();
						НоваяСтрока.Номенклатура = Номенклатура_Анализ;
						НоваяСтрока.Количество   = КоличествоУслуги;
						НоваяСтрока.Сумма        = НоваяСтрока.Количество * ТекущаяЦена;
					Иначе
						ПараметрыОтбора = Новый Структура;
						ПараметрыОтбора.Вставить("Номенклатура", Номенклатура_Анализ);
						НайденныеСтроки = Услуги.НайтиСтроки(ПараметрыОтбора);
						Для Каждого Строк_Усл Из НайденныеСтроки Цикл
							Услуги.Удалить(Строк_Усл);
						КонецЦикла;
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;	
	
		// отгрузка 		
				
		Если ЗначениеЗаполнено(Номенклатура_Погрузка) Тогда   
			
			ТекущаяЦена = ИНАГРО_Элеватор.ПолучитьЦенуУслугиЭлеватора(Организация, Дата, Владелец, ДоговорКонтрагента, ВидКультурыДляРасчетаСтоимостиУслуги, Урожай, Номенклатура_Погрузка);
			
			Если ТекущаяЦена <> 0 И Вес <> 0 Тогда 													 
				НоваяСтрока = ТаблицаУслуг.Добавить();
				НоваяСтрока.Номенклатура = Номенклатура_Погрузка;
				НоваяСтрока.Количество   = Вес / 1000;
				НоваяСтрока.Сумма        = НоваяСтрока.Количество * ТекущаяЦена;
			Иначе
				ПараметрыОтбора = Новый Структура;
				ПараметрыОтбора.Вставить("Номенклатура", Номенклатура_Погрузка);
				НайденныеСтроки = Услуги.НайтиСтроки(ПараметрыОтбора);
				Для Каждого Строк_Усл Из НайденныеСтроки Цикл
					Услуги.Удалить(Строк_Усл);
				КонецЦикла;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
		
	ТаблицаУслуг.Свернуть("Номенклатура", "Количество, Сумма");
	Для Каждого Строка_Услуг Из ТаблицаУслуг Цикл
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("Номенклатура", Строка_Услуг.Номенклатура);
		НайденныеСтроки = Услуги.НайтиСтроки(ПараметрыОтбора);
		Если НайденныеСтроки.Количество() = 0 Тогда
			Если ЗначениеЗаполнено(Строка_Услуг.Номенклатура) Тогда
				НоваяСтрока = Услуги.Добавить();
				НоваяСтрока.Номенклатура = Строка_Услуг.Номенклатура;
				НоваяСтрока.Количество   = Строка_Услуг.Количество;
				НоваяСтрока.Цена         = Строка_Услуг.Сумма / Строка_Услуг.Количество;
				НоваяСтрока.Сумма        = Строка_Услуг.Сумма;
			КонецЕсли;
		Иначе
			Для Каждого Строк_Усл Из НайденныеСтроки Цикл
				Строк_Усл.Количество = Строка_Услуг.Количество;
				Строк_Усл.Цена       = Строка_Услуг.Сумма/Строка_Услуг.Количество;
				Строк_Усл.Сумма      = Строка_Услуг.Сумма;
				Прервать;
			КонецЦикла;	
		КонецЕсли;	
	КонецЦикла;
	
КонецПроцедуры

Функция СформироватьТаблицуУслуг()
	
	ТаблицаУслуг = Новый ТаблицаЗначений;
	ТаблицаУслуг.Колонки.Добавить("ДатаРасчета");
	ТаблицаУслуг.Колонки.Добавить("Ссылка"); 
	ТаблицаУслуг.Колонки.Добавить("Организация");
	ТаблицаУслуг.Колонки.Добавить("Контрагент");
	ТаблицаУслуг.Колонки.Добавить("ДоговорКонтрагента");
	ТаблицаУслуг.Колонки.Добавить("Номенклатура");
	ТаблицаУслуг.Колонки.Добавить("Культура");
	ТаблицаУслуг.Колонки.Добавить("Склад");
	ТаблицаУслуг.Колонки.Добавить("ВидХранения");
	ТаблицаУслуг.Колонки.Добавить("Урожай");
	ТаблицаУслуг.Колонки.Добавить("Количество");
	ТаблицаУслуг.Колонки.Добавить("Стоимость");  
	
	Для Каждого СтрокаТабличнойЧасти Из Услуги Цикл
		НоваяСтрока = ТаблицаУслуг.Добавить();
		НоваяСтрока.ДатаРасчета        = Дата;
		НоваяСтрока.Ссылка             = Ссылка; 
		НоваяСтрока.Организация        = Организация;
		НоваяСтрока.Контрагент         = Владелец;
		НоваяСтрока.ДоговорКонтрагента = ДоговорКонтрагента;
		НоваяСтрока.Номенклатура       = СтрокаТабличнойЧасти.Номенклатура;
		НоваяСтрока.Культура           = Номенклатура;
		НоваяСтрока.Склад              = Склад;
		НоваяСтрока.ВидХранения        = ВидХранения;
		НоваяСтрока.Урожай             = Урожай;
		НоваяСтрока.Количество         = СтрокаТабличнойЧасти.Количество;
		НоваяСтрока.Стоимость          = СтрокаТабличнойЧасти.Сумма;	
	КонецЦикла;
	
	Возврат ТаблицаУслуг;
	
КонецФункции

Функция ПодготовитьТаблицуПоПартиям()
	
	РезТаблица = Неопределено;
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("МоментВремени"      , МоментВремени());
	Запрос.УстановитьПараметр("Организация"        , Организация);
	Запрос.УстановитьПараметр("Контрагент"         , Владелец);
	Запрос.УстановитьПараметр("ДоговорКонтрагента" , ДоговорКонтрагента);
	Запрос.УстановитьПараметр("Номенклатура"       , Номенклатура);
	Запрос.УстановитьПараметр("Склад"              , Склад);
	Запрос.УстановитьПараметр("ВидХранения"        , ВидХранения);
	Запрос.УстановитьПараметр("Урожай"             , Урожай);
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаРегистра.*
		|ИЗ
		|	РегистрСведений.ИНАГРО_ДанныеПоКачествуПартийЗерна.СрезПоследних(
		|			&МоментВремени,
		|			Организация = &Организация
		|				И Контрагент = &Контрагент
		|				И ДоговорКонтрагента = &ДоговорКонтрагента
		|				И Номенклатура = &Номенклатура
		|				И Склад = &Склад
		|				И ВидХранения = &ВидХранения
		|				И Урожай = &Урожай) КАК ТаблицаРегистра
		|
		|УПОРЯДОЧИТЬ ПО
		|	ТаблицаРегистра.ПартияЗерна.Дата";
	
	ТаблицаРезультатаЗапроса = Запрос.Выполнить().Выгрузить();			   
	
	Если ТаблицаРезультатаЗапроса.Количество() > 0 Тогда 
		
		РезТаблица = ТаблицаРезультатаЗапроса.Скопировать();
		РезТаблица.Очистить();
		
		ОбщийВесПереоформления = СписокНоменклатуры.Итог("Вес");
		Для Каждого СтрокаПартии Из ТаблицаРезультатаЗапроса Цикл
			Если ОбщийВесПереоформления > 0 Тогда
				ОстатокПартии = СтрокаПартии.ФизическийВесИтоговый - СтрокаПартии.Вывезено;
				Если ОстатокПартии > 0 Тогда
					НоваяСтрока = РезТаблица.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаПартии);
					НоваяСтрока.Вывезено   = СтрокаПартии.Вывезено + МИН(ОстатокПартии, ОбщийВесПереоформления);
					ОбщийВесПереоформления = ОбщийВесПереоформления - МИН(ОстатокПартии, ОбщийВесПереоформления);
				КонецЕсли;	
			КонецЕсли;
		КонецЦикла;	
		
		Если РезТаблица.Количество() = 0 Тогда
			РезТаблица = Неопределено;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат РезТаблица;
	
КонецФункции	

#КонецОбласти 

#КонецЕсли