#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА
 
// Процедура определяет параметры учетной политики
//
Процедура ПодготовитьПараметрыУчетнойПолитики(СтруктураШапкиДокумента, Отказ, Заголовок)
	
	СтруктураШапкиДокумента.Вставить("ЕстьНалогНаПрибыль"             , УчетнаяПолитика.ПлательщикНалогаНаПрибыль(СтруктураШапкиДокумента.Организация, КонецМесяца(СтруктураШапкиДокумента.Дата)));
	СтруктураШапкиДокумента.Вставить("ЕстьНалогНаПрибыльДо2015"		  , УчетнаяПолитика.ПлательщикНалогаНаПрибыльДо2015(СтруктураШапкиДокумента.Организация, КонецМесяца(СтруктураШапкиДокумента.Дата)));
	СтруктураШапкиДокумента.Вставить("ЕстьНДС"                        , УчетнаяПолитика.ПлательщикНДС(СтруктураШапкиДокумента.Организация, КонецМесяца(СтруктураШапкиДокумента.Дата)));
	
КонецПроцедуры // ПодготовитьПараметрыУчетнойПолитики()

// Выполняет движения по регистрам 
//
Процедура ДвиженияПоРегистрам(СтруктураШапкиДокумента, ТаблицаПоОС, ТаблицаМестонахождений, Отказ, Заголовок)

	ДвиженияПоРегистрамРегл(СтруктураШапкиДокумента, ТаблицаПоОС, ТаблицаМестонахождений, Отказ, Заголовок);

КонецПроцедуры // ДвиженияПоРегистрам

Процедура ДвиженияПоРегистрамРегл(СтруктураШапкиДокумента, ТаблицаПоОС, ТаблицаМестонахождений, Отказ, Заголовок)

	ДатаДока       = Дата;
	ТекОрганизация = СтруктураШапкиДокумента.Организация;
    НомерЖурнала   = НСтр("ru='ОС';uk='ОЗ'",Локализация.КодЯзыкаИнформационнойБазы());

	УправлениеНеоборотнымиАктивами.ДополнитьТабличнуюЧастьСведениямиОбОСБухНалогРегл(МоментВремени(), ТаблицаПоОС,
	                                                  СтруктураШапкиДокумента, 
													  Отказ, Заголовок);

	Если Отказ Тогда
		
		Возврат;
		
	КонецЕсли;								

	СобытияОС               = Движения.СобытияОСОрганизаций;
	НачислениеАмортизацииБУ = Движения.НачислениеАмортизацииОСБухгалтерскийУчет;
	НачислениеАмортизацииНУ = Движения.НачислениеАмортизацииОСНалоговыйУчет;
	ПроводкиБУ              = Движения.Хозрасчетный;
	СчетОС                  = ПланыСчетов.Хозрасчетный.ОсновныеСредства;
	ПереоценкаОСБУ 			= Движения.ПереоценкаОСБухгалтерскийУчет;

	// Подготовим таблицу с данными по амортизации для списания амортизации по направлениям затрат
	ТабАмортизации = Новый ТаблицаЗначений;
	ТабАмортизации.Колонки.Добавить("НаправлениеАмортизации", 
	                                Новый ОписаниеТипов("СправочникСсылка.СпособыОтраженияРасходовПоАмортизации"));
	ТабАмортизации.Колонки.Добавить("ОбъектУчета", 
	                                Новый ОписаниеТипов("СправочникСсылка.ОсновныеСредства"));
	ТабАмортизации.Колонки.Добавить("Сумма", ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповЧисла(15, 2));
	ТабАмортизации.Колонки.Добавить("СуммаНУ", ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповЧисла(15, 2));
	ТабАмортизации.Колонки.Добавить("СчетАмортизации");
	ТабАмортизации.Колонки.Добавить("НалоговоеНазначение", 		Новый ОписаниеТипов("СправочникСсылка.НалоговыеНазначенияАктивовИЗатрат"));
	ТабАмортизации.Колонки.Добавить("Местонахождение",			Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"));
	
	Для Каждого СтрокаОС Из ТаблицаПоОС Цикл
		
		Если СтрокаОС.АмортизацияЗаМесяцБУ > 0 ИЛИ СтрокаОС.АмортизацияЗаМесяцНУ > 0 Тогда
			
			НоваяСтрока = ТабАмортизации.Добавить();
			
			НоваяСтрока.Сумма                  	= СтрокаОС.АмортизацияЗаМесяцБУ;
			НоваяСтрока.СуммаНУ                	= СтрокаОС.АмортизацияЗаМесяцНУ;
			НоваяСтрока.ОбъектУчета            	= СтрокаОС.ОсновноеСредство;
			НоваяСтрока.НаправлениеАмортизации 	= СтрокаОС.НаправлениеБУ;
			НоваяСтрока.СчетАмортизации        	= СтрокаОС.СчетНачисленияАмортизацииБУ;
			НоваяСтрока.НалоговоеНазначение 	= СтрокаОС.НалоговоеНазначение_ОС;
			
			ТекМестонахождение 					= ТаблицаМестонахождений.Найти(СтрокаОС.ОсновноеСредство,"ОС_БУ");
			НоваяСтрока.Местонахождение 		= ?(ТекМестонахождение = Неопределено, Неопределено, ТекМестонахождение.Местонахождение_БУ);
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Вызов процедуры списания амортизации по направлениям.
	// Создаются движения по начислению амортизации.
	УправлениеНеоборотнымиАктивами.ПолучитьРаспределениеАмортизацииПоНаправлениямРегл(ПроводкиБУ,
	                                                   Отказ,
													   Заголовок,
													   ТабАмортизации,
													   СтруктураШапкиДокумента,
													   НомерЖурнала,
													   НСтр("ru='Начисление амортизации ОС';uk='Нарахування амортизації ОЗ'",Локализация.КодЯзыкаИнформационнойБазы()));

	НеОблНДСДеятельность = Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяХозДеятельность;
	
	// Создание движений документа по БУ	
	Для Каждого СтрокаТЧ Из ТаблицаПоОС Цикл

		ТекОС = СтрокаТЧ.ОсновноеСредство;

		НепроизводственныйОС = (СтрокаТЧ.НалоговоеНазначение_ОС = Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяНеХозДеятельность);
		
		// Движения по регистру СобытияОСОрганизаций
		Движение = СобытияОС.Добавить();
		
		Движение.Период             = ДатаДока;
		Движение.ОсновноеСредство   = ТекОС;
		Движение.Организация        = ТекОрганизация;
		Движение.Событие 			= СтруктураШапкиДокумента.СобытиеОС;
		Движение.НазваниеДокумента	= Строка(СтруктураШапкиДокумента.Ссылка.Метаданные());
		Движение.НомерДокумента		= СтруктураШапкиДокумента.Номер;
		
		// Движения по регистру НачислениеАмортизацииБУ
		Движение = НачислениеАмортизацииБУ.Добавить();
		
		Движение.Период               = ДатаДока;
		Движение.ОсновноеСредство     = ТекОС;
		Движение.Организация          = ТекОрганизация;
		Движение.НачислятьАмортизацию = Ложь;

		// Движения по регистру НачислениеАмортизацииОСНалоговыйУчет
		Движение = НачислениеАмортизацииНУ.Добавить();
		Движение.Период               = Дата;
		Движение.ОсновноеСредство     = ТекОС;
		Движение.Организация          = ТекОрганизация;
		Движение.НачислятьАмортизацию = Ложь;
		
		СчетУчетаБУ = СтрокаТЧ.СчетУчетаБУ;
		
		СчетПродажаОС = СтрокаТЧ.СчетПродажиОС;
		
		
		Если СписыватьСуммуДооценокНаНераспределеннуюПрибыль И СтрокаТЧ.ПревышениеСуммДооценокНадСуммамиУценокБУ > 0 Тогда
			
			// ПереоценкаОСБухгалтерскийУчет
			СтрокаДвижений = ПереоценкаОСБУ.ДобавитьРасход();
			
			СтрокаДвижений.Период           = ДатаДока;
			СтрокаДвижений.ОсновноеСредство = ТекОС;
			СтрокаДвижений.Организация      = ТекОрганизация;
			
			СтрокаДвижений.СуммаПереоценки 	= СтрокаТЧ.ПревышениеСуммДооценокНадСуммамиУценокБУ;
			
			// Хозрасчетный Дт 423 Кт 441
			ПроводкаБУ = ПроводкиБУ.Добавить();
			ПроводкаБУ.Период       = ДатаДока;
			ПроводкаБУ.Организация  = ТекОрганизация;
			
			ПроводкаБУ.СчетДт       = СтрокаТЧ.СчетУчетаДооценокОС;
			БухгалтерскийУчет.УстановитьСубконто(ПроводкаБУ.СчетДт, ПроводкаБУ.СубконтоДт, "ОсновныеСредства", ТекОС);

			ПроводкаБУ.СчетКт       = ПланыСчетов.Хозрасчетный.НераспределеннаяПрибыль;
			
			ПроводкаБУ.Сумма        = СтрокаТЧ.ПревышениеСуммДооценокНадСуммамиУценокБУ;
			ПроводкаБУ.Содержание   = НСтр("ru='Списана сумма дооценок ОС';uk='Списана сума дооцінок ОЗ'",Локализация.КодЯзыкаИнформационнойБазы());
			ПроводкаБУ.НомерЖурнала = НомерЖурнала;
			
		ИначеЕсли СписыватьСуммуДооценокНаНераспределеннуюПрибыль И СтрокаТЧ.ПревышениеСуммДооценокНадСуммамиУценокБУ < 0 Тогда	
			
			// ПереоценкаОСБухгалтерскийУчет
			СтрокаДвижений = ПереоценкаОСБУ.ДобавитьПриход();
			
			СтрокаДвижений.Период           = ДатаДока;
			СтрокаДвижений.ОсновноеСредство = ТекОС;
			СтрокаДвижений.Организация      = ТекОрганизация;
			
			СтрокаДвижений.СуммаПереоценки 	= -СтрокаТЧ.ПревышениеСуммДооценокНадСуммамиУценокБУ;
			
		КонецЕсли;	
		
		// списание амортизации Д СчетНачисленияАмортизации К СчетУчетаБУ
		СуммаПроводки 	= СтрокаТЧ.АмортизацияБУ + СтрокаТЧ.АмортизацияЗаМесяцБУ;
		СуммаПроводкиНУ = СтрокаТЧ.АмортизацияНУ + СтрокаТЧ.АмортизацияЗаМесяцНУ;
		
		Если СуммаПроводки <> 0 ИЛИ (СуммаПроводкиНУ <> 0  И СтруктураШапкиДокумента.ЕстьНалогНаПрибыль) Тогда
			
			Проводка = ПроводкиБУ.Добавить();
			
			Проводка.Период       = ДатаДока;
			Проводка.Активность   = Истина;
			Проводка.Организация  = ТекОрганизация;
			Проводка.Содержание   = НСтр("ru='Списана амортизация';uk='Списано амортизацію'",Локализация.КодЯзыкаИнформационнойБазы());
			Проводка.НомерЖурнала = НомерЖурнала;
			Проводка.Сумма        = СуммаПроводки;
			
			Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыль ИЛИ СтруктураШапкиДокумента.ЕстьНДС Тогда
				
				Проводка.НалоговоеНазначениеДт = СтрокаТЧ.НалоговоеНазначение_ОС;
				
			КонецЕсли;	
			
			Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыль Тогда
				
				Проводка.СуммаНУДт = СуммаПроводкиНУ;
				
			КонецЕсли;
			
			Проводка.СчетДт = СтрокаТЧ.СчетНачисленияАмортизацииБУ;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ОсновныеСредства", ТекОС);
			
			Проводка.СчетКт = СчетУчетаБУ;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОсновныеСредства", ТекОС);
			
			Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыль ИЛИ СтруктураШапкиДокумента.ЕстьНДС Тогда
				
				Проводка.НалоговоеНазначениеКт = СтрокаТЧ.НалоговоеНазначение_ОС;
				
			КонецЕсли;	
			
			Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыль Тогда
				
				Проводка.СуммаНУКт = СуммаПроводкиНУ;
				
			КонецЕсли;
			
			Если НЕ СтруктураШапкиДокумента.ЕстьНДС Тогда
				// организация - не плательщик НДС. 
				Если НепроизводственныйОС Тогда
					// Непроизводственное
					Проводка.НалоговоеНазначениеДт = СтрокаТЧ.НалоговоеНазначение_ОС;
					Проводка.НалоговоеНазначениеКт = СтрокаТЧ.НалоговоеНазначение_ОС;
				Иначе	
					Проводка.НалоговоеНазначениеДт = НеОблНДСДеятельность;
					Проводка.НалоговоеНазначениеКт = НеОблНДСДеятельность;
				КонецЕсли;	
			КонецЕсли;	
			
		КонецЕсли;
			
		// списание остаточной стоимости Д ПродажаОС К СчетУчетаОС
		СуммаПроводки = СтрокаТЧ.СтоимостьБУ - СтрокаТЧ.АмортизацияБУ - СтрокаТЧ.АмортизацияЗаМесяцБУ;
		
		Если СуммаПроводки <> 0 ИЛИ (СтрокаТЧ.ОстСтоимостьНУ <> 0 И СтруктураШапкиДокумента.ЕстьНалогНаПрибыль) Тогда
			
			Проводка = ПроводкиБУ.Добавить();
			
			Проводка.Период       = ДатаДока;
			Проводка.Активность   = Истина;
			Проводка.Организация  = ТекОрганизация;
			Проводка.Содержание   = НСтр("ru='Списана ост. стоимость';uk='Списана зал. вартість'",Локализация.КодЯзыкаИнформационнойБазы());
			Проводка.НомерЖурнала = НомерЖурнала;
			Проводка.Сумма        = СуммаПроводки;
			
			Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыль ИЛИ СтруктураШапкиДокумента.ЕстьНДС Тогда
				
				Проводка.НалоговоеНазначениеДт = СтрокаТЧ.НалоговоеНазначение_ОС;
				
			КонецЕсли;	
			
			Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыль Тогда
				
				Проводка.СуммаНУДт = СтрокаТЧ.ОстСтоимостьНУ;
				
			КонецЕсли;
			
			Проводка.СчетДт = СчетПродажаОС;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ОсновныеСредства", ТекОС);
			
			Проводка.СчетКт = СчетУчетаБУ;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОсновныеСредства", ТекОС);
			
			Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыль ИЛИ СтруктураШапкиДокумента.ЕстьНДС Тогда
				
				Проводка.НалоговоеНазначениеКт = СтрокаТЧ.НалоговоеНазначение_ОС;
				
			КонецЕсли;	
			
			Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыль Тогда
				
				Проводка.СуммаНУКт = СтрокаТЧ.ОстСтоимостьНУ;
				
			КонецЕсли;
			
			Если НЕ СтруктураШапкиДокумента.ЕстьНДС Тогда
				// организация - не плательщик НДС. 
				Если НепроизводственныйОС Тогда
					// Непроизводственное
					Проводка.НалоговоеНазначениеДт = СтрокаТЧ.НалоговоеНазначение_ОС;
					Проводка.НалоговоеНазначениеКт = СтрокаТЧ.НалоговоеНазначение_ОС;
				Иначе	
					Проводка.НалоговоеНазначениеДт = НеОблНДСДеятельность;
					Проводка.НалоговоеНазначениеКт = НеОблНДСДеятельность;
				КонецЕсли;	
			КонецЕсли;	
			
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

// Процедура формирует структуру шапки документа и дополнительных полей.
//
Процедура ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента) Экспорт

	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента = ОбщегоНазначенияРед12.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	СтруктураШапкиДокумента.Вставить("ВидСобытияОС",СтруктураШапкиДокумента.СобытиеОС.ВидСобытияОС);
	
КонецПроцедуры // ПодготовитьСтруктуруШапкиДокумента()

// Процедура формирует таблицы документа.
//
Процедура ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоОС, Отказ, Заголовок) Экспорт
	
	СтруктураПолей = Новый Структура;
	СтруктураСложныхПолей = Новый Структура;
	СтруктураПолей.Вставить("ОсновноеСредство", "ОсновноеСредство");
	
	СтруктураПолей.Вставить("СтоимостьБУ",          "СтоимостьБУ");
	СтруктураПолей.Вставить("АмортизацияБУ",        "АмортизацияБУ");
	СтруктураПолей.Вставить("АмортизацияЗаМесяцБУ", "АмортизацияЗаМесяцБУ");
	
	СтруктураПолей.Вставить("СтоимостьНУ",          "СтоимостьНУ");
	СтруктураПолей.Вставить("АмортизацияНУ"       , "АмортизацияНУ");
	СтруктураПолей.Вставить("АмортизацияЗаМесяцНУ", "АмортизацияЗаМесяцНУ");
	
	СтруктураПолей.Вставить("СчетПродажиОС", "СчетПродажиОС");
	
	СтруктураПолей.Вставить("ПревышениеСуммДооценокНадСуммамиУценокБУ",       "ПревышениеСуммДооценокНадСуммамиУценокБУ");
	
	СтруктураСложныхПолей.Вставить("ОстСтоимостьНУ"    	, "СтоимостьНУ - АмортизацияНУ - АмортизацияЗаМесяцНУ");
	
	РезультатЗапросаПоОС = ОбщегоНазначенияРед12.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "ОС", СтруктураПолей,,СтруктураСложныхПолей);
	ТаблицаПоОС          = РезультатЗапросаПоОС.Выгрузить();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ
//

Процедура ЗаполнитьПоДокументуОснованию(Основание)

	// Заполним реквизиты из стандартного набора по документу основанию.
	ЗаполнениеДокументов.ЗаполнитьПоОснованию(ЭтотОбъект, Основание);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаПроведения(Отказ)

	Перем Заголовок, СтруктураШапкиДокумента;
	Перем ТаблицаПоОС;
	
	Заголовок = ОбщегоНазначенияБПВызовСервера.ПредставлениеДокументаПриПроведении(Ссылка);
	
	// ПОДГОТОВКА ПРОВЕДЕНИЯ ПО ДАННЫМ ДОКУМЕНТА

	ПроведениеСервер.ПодготовитьНаборыЗаписейКПроведению(ЭтотОбъект);
	Если РучнаяКорректировка Тогда
		Возврат;
	КонецЕсли;
	
	ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента);
	
	// Получим данные учетной политики
	ПодготовитьПараметрыУчетнойПолитики(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоОС, Отказ, Заголовок);
	
	//проверка, нет ли списанных ОС в табличной части
	УправлениеНеоборотнымиАктивами.ПроверитьНаСписанность(МоментВремени(), Организация, ТаблицаПоОС, Отказ, Заголовок);
	
	
	// Подготовим таблицу местонахождения для ТабАмортизации
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Организация",  Организация);
	Запрос.УстановитьПараметр("Период",       Новый Граница(МоментВремени(), ВидГраницы.Исключая));
	Запрос.УстановитьПараметр("ВнешнийИсточник", ТаблицаПоОС);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
   	|	ВнешнийИсточник.ОсновноеСредство
	|ПОМЕСТИТЬ ОсновныеСредства
	|ИЗ &ВнешнийИсточник КАК ВнешнийИсточник
	|;
	|ВЫБРАТЬ
	|	ОсновныеСредства.ОсновноеСредство 									КАК ОсновноеСредство,
	|	МестонахождениеОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство 	КАК ОС_БУ,
	|	МестонахождениеОСБухгалтерскийУчетСрезПоследних.Местонахождение 	КАК Местонахождение_БУ
	|ИЗ
	|	ОсновныеСредства
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МестонахождениеОСБухгалтерскийУчет.СрезПоследних(&Период, ОсновноеСредство В (ВЫБРАТЬ ОсновноеСредство ИЗ ОсновныеСредства) И Организация = &Организация) КАК МестонахождениеОСБухгалтерскийУчетСрезПоследних
	|	ПО ОсновныеСредства.ОсновноеСредство = МестонахождениеОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство";
	ТаблицаМестонахождений = Запрос.Выполнить().Выгрузить();
	
	Если НЕ Отказ Тогда
		
		ДвиженияПоРегистрам(СтруктураШапкиДокумента, ТаблицаПоОС, ТаблицаМестонахождений, Отказ, Заголовок);
		
	КонецЕсли;
	
	Движения.Хозрасчетный.ВыполнитьДействияПередЗаписьюДвижений();
	
	ИНАГРО_Общий.ИНАГРО_ДвиженияЗатратыОрганизации_Приход(СтруктураШапкиДокумента, Движения); // ИНАГРО

	ПроведениеСервер.ПодготовитьНаборыЗаписейКЗаписиДвижений(ЭтотОбъект);
	
КонецПроцедуры // ОбработкаПроведения()

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКОтменеПроведения(ЭтотОбъект);
	Движения.Записать();
	
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)

	ТипДанныхЗаполнения = ТипЗнч(ДанныеЗаполнения);
	Если ДанныеЗаполнения <> Неопределено
			И ТипДанныхЗаполнения <> Тип("Структура")
			И Метаданные().ВводитсяНаОсновании.Содержит(ДанныеЗаполнения.Метаданные()) Тогда
		ЗаполнитьПоДокументуОснованию(ДанныеЗаполнения);
	КонецЕсли;
	ЗаполнениеДокументов.Заполнить(ЭтотОбъект, ДанныеЗаполнения);

	Если НЕ ЗначениеЗаполнено(СобытиеОС) Тогда
		СобытиеОС = УчетОС.ПолучитьСобытиеПоОСИзСправочника(Перечисления.ВидыСобытийОС.ПодготовкаКПередаче);
	КонецЕсли;

КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)

	УправлениеВнеоборотнымиАктивами.ПроверитьОтсутствиеДублейВТабличнойЧасти(ЭтотОбъект, "ОС", Новый Структура("ОсновноеСредство"), Отказ);

КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)

	Дата = НачалоДня(ОбщегоНазначенияБП.ПолучитьРабочуюДату());
	Ответственный = Пользователи.ТекущийПользователь();

КонецПроцедуры

#КонецЕсли
