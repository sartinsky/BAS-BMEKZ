#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда


Перем ДвиженияВыпускПродукцииУслугБУ;
Перем ТаблицаДвиженийВыпускБУ;

Перем ОперацияБУ;

Перем УслугиВСуммовомВыражении;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

Процедура ЗаполнитьПоДокументуОснованию(Основание)

	Если ТипЗнч(Основание) = Тип("ДокументСсылка.РеализацияУслугПоПереработке") Тогда

		// Заполнение шапки
		Комментарий = Основание.Комментарий;
		Организация = Основание.Организация;
		Ответственный = Основание.Ответственный;
		
		Для Каждого ТекСтрокаУслуги Из Основание.Услуги Цикл
			НоваяСтрока = Продукция.Добавить();
			НоваяСтрока.Количество = ТекСтрокаУслуги.Количество;
			НоваяСтрока.Номенклатура = ТекСтрокаУслуги.Номенклатура;
			НоваяСтрока.ПлановаяСтоимость = ТекСтрокаУслуги.ПлановаяСтоимость;
			НоваяСтрока.Спецификация = ТекСтрокаУслуги.Спецификация;
			НоваяСтрока.СуммаПлановая = ТекСтрокаУслуги.СуммаПлановая;
			НоваяСтрока.Счет = ТекСтрокаУслуги.СчетУчетаБУ;
		КонецЦикла;
		
	// ИНАГРО++
	ИначеЕсли Основание.Метаданные().Имя = "ИНАГРО_РегистрацияНадояМолока" Тогда
		
		// Заполнение шапки
		Комментарий           = Основание.Комментарий;
		Организация           = Основание.Организация;
		Ответственный         = Основание.Ответственный;
		СчетЗатрат            = Основание.СчетЗатрат;
		Склад                 = Основание.Склад;
		ИспользоватьМатериалы = Ложь;
		
		Если ТипЗнч(Основание.Субконто1) = ТипЗнч(Справочники.ПодразделенияОрганизаций.ПустаяСсылка()) Тогда
			ПодразделениеОрганизации = Основание.Субконто1;
		ИначеЕсли ТипЗнч(Основание.Субконто2) = ТипЗнч(Справочники.ПодразделенияОрганизаций.ПустаяСсылка()) Тогда	
			ПодразделениеОрганизации = Основание.Субконто2;
		ИначеЕсли ТипЗнч(Основание.Субконто3) = ТипЗнч(Справочники.ПодразделенияОрганизаций.ПустаяСсылка()) Тогда	
			ПодразделениеОрганизации = Основание.Субконто3;
		КонецЕсли; 
		
		Если ТипЗнч(Основание.Субконто1) = ТипЗнч(Справочники.НоменклатурныеГруппы.ПустаяСсылка()) Тогда
			НоменклатурнаяГруппа = Основание.Субконто1;
		ИначеЕсли ТипЗнч(Основание.Субконто2) = ТипЗнч(Справочники.НоменклатурныеГруппы.ПустаяСсылка()) Тогда	
			НоменклатурнаяГруппа = Основание.Субконто2;
		ИначеЕсли ТипЗнч(Основание.Субконто3) = ТипЗнч(Справочники.НоменклатурныеГруппы.ПустаяСсылка()) Тогда	
			НоменклатурнаяГруппа = Основание.Субконто3;
		КонецЕсли; 
		
		Если Основание.Продукция.Количество() > 0 Тогда
			
			НоваяСтрока = Продукция.Добавить();
			НоваяСтрока.Номенклатура         = Основание.Номенклатура;
			НоваяСтрока.НоменклатурнаяГруппа = НоменклатурнаяГруппа;
			НоваяСтрока.ЕдиницаИзмерения     = Основание.Номенклатура.БазоваяЕдиницаИзмерения;
			НоваяСтрока.Коэффициент          = 1;
			НоваяСтрока.СчетЗатрат           = СчетЗатрат;
			НоваяСтрока.Счет                 = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаУчетаНоменклатуры(Основание.Организация, Основание.Номенклатура, Основание.Склад).СчетУчетаБУ;
			
			Если ТипЗнч(Основание.Субконто1) = ТипЗнч(Справочники.СтатьиЗатрат.ПустаяСсылка()) Тогда
				НоваяСтрока.СтатьяЗатрат = Основание.Субконто1;
			ИначеЕсли ТипЗнч(Основание.Субконто2) = ТипЗнч(Справочники.СтатьиЗатрат.ПустаяСсылка()) Тогда	
				НоваяСтрока.СтатьяЗатрат = Основание.Субконто2;
			ИначеЕсли ТипЗнч(Основание.Субконто3) = ТипЗнч(Справочники.СтатьиЗатрат.ПустаяСсылка()) Тогда	
				НоваяСтрока.СтатьяЗатрат = Основание.Субконто3;
			КонецЕсли; 
			
			ТипЦенПлановойСебестоимости   = Константы.ТипЦенПлановойСебестоимостиНоменклатуры.Получить();
			ВалютаРеглментированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
			
			НоваяСтрока.Количество = Основание.Продукция.Итог("Количество");
			Если ЗначениеЗаполнено(ТипЦенПлановойСебестоимости) Тогда				
				НоваяСтрока.ПлановаяСтоимость = Ценообразование.ПолучитьЦенуНоменклатуры(НоваяСтрока.Номенклатура,
																						 ТипЦенПлановойСебестоимости, Дата,
																						 ВалютаРеглментированногоУчета, 1);
			КонецЕсли;
 
			НоваяСтрока.СуммаПлановая = НоваяСтрока.Количество * НоваяСтрока.ПлановаяСтоимость;
			
		КонецЕсли;

	КонецЕсли;
	// ИНАГРО--
	
КонецПроцедуры

//////////////////////////////////////////////////////////////////////////////////
//// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

//////////////////////////////////////////////////////////////////////////////////
//// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА



Процедура ПроверитьТабЧастьМатериалыПострочно(Отказ)
	
	ИмяСписка = НСтр("ru='Материалы';uk='Матеріали'");
	
	ВыполнятьПроверку = НЕ Отказ;
	
	Для каждого СтрокаТЧ Из Материалы Цикл

		Префикс = "Материалы[" + Формат(СтрокаТЧ.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].";
		
		ХарактерЗатрат = Неопределено;
		НалоговаяАналитикаВПроводке = Неопределено;
		СтруктураСубконто = Новый Структура("Субконто1,Субконто2,Субконто3", СтрокаТЧ.СтатьяЗатрат, СтрокаТЧ.НоменклатурнаяГруппа, ПодразделениеОрганизации);
		НалоговыйУчет.ОпределениеАналитикиНалоговогоУчетаВПроводкахДляЗатрат(
			СтруктураСубконто, 
			СчетЗатрат, 
			ХарактерЗатрат,
			НалоговаяАналитикаВПроводке, 
			, 
			СтрокаТЧ.НалоговоеНазначение, 
			СтрокаТЧ.НалоговоеНазначениеДоходовИЗатрат,
			,
			Дата,
			,
			УчетнаяПолитика.ПлательщикНДС(Организация, Дата)
		);
		
		Если ВыполнятьПроверку  
			 И  УчетнаяПолитика.ПлательщикНалогаНаПрибыльДо2015(Организация, Дата) Тогда
		
			Если НЕ ЗначениеЗаполнено(НалоговаяАналитикаВПроводке) Тогда
				Если ХарактерЗатрат = "Затраты" Тогда
					ТекстСообщения = ОбщегоНазначенияБПКлиентСервер.ПолучитьТекстСообщения("Колонка", "Заполнение", 
						НСтр("ru='Налоговое назначение (доходов и затрат)';uk='Податкове призначення (доходів і витрат)'"),
						СтрокаТЧ.НомерСтроки, ИмяСписка						
					);
					Поле = Префикс + "НалоговоеНазначениеДоходовИЗатрат";
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
				ИначеЕсли ХарактерЗатрат = "Производство" Тогда
					ТекстСообщения = ОбщегоНазначенияБПКлиентСервер.ПолучитьТекстСообщения("Колонка", "Корректность", 
						НСтр("ru='Номенкалатурная группа';uk='Номенкалатурная група'"),
						СтрокаТЧ.НомерСтроки, ИмяСписка, 
						НСтр("ru='Не указано налоговое назначение для номенклатурной группы!';uk='Не зазначено податкове призначення для номенклатурної групи!'")
					);
					Поле = Префикс + "НоменклатурнаяГруппа";
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
				Иначе
					//Для ТЗР определить НалоговоеНазначение можно только в строке, даже если счет затрат в указывается шапке
					СтрокаСообщения = НСтр("ru='Невозможно определить налоговое назначение затрат для указанного счета затрат!';uk='неможливо визначити податкове призначення витрат для вказанного рахунку витрат!'");
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения, ЭтотОбъект, "СчетЗатрат", "Объект");
				КонецЕсли;
			КонецЕсли;
			 
			// нельзя по НДС указывать нехоз. деятельность, а по НП - хоз. деятельность
			Если ВыполнятьПроверку  
				И  УчетнаяПолитика.ПлательщикНДС(Организация, Дата) Тогда
				
				НехозДеятельностьНДС = (СтрокаТЧ.НалоговоеНазначение = Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяНеХозДеятельность);
				НехозДеятельностьНКУ = (НалоговаяАналитикаВПроводке = Справочники.НалоговыеНазначенияАктивовИЗатрат.НКУ_НеХозДеятельность);
				
				Если НЕ СтрокаТЧ.НалоговоеНазначение = НалоговаяАналитикаВПроводке
					  И НехозДеятельностьНДС <> НехозДеятельностьНКУ Тогда 
					ТекстСообщения = ОбщегоНазначенияБПКлиентСервер.ПолучитьТекстСообщения("Колонка", "Корректность", 
						НСтр("ru='Налоговое назначение (НДС)';uk='Податкове призначення (ПДВ)'"),
						СтрокаТЧ.НомерСтроки, ИмяСписка, 
						НСтр("ru='Ошибочно указано нехозяйственное налоговое назначение (НДС) и одновременно хозяйственную деятельность по затратам (и наоборот)!';uk='Помилково вказане негосподарське податкове призначення (ПДВ) і одночасно господарську діяльність за витратами (і навпаки)!'")
					);
					Поле = Префикс + "НалоговоеНазначение";
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект");
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
 		
	КонецЦикла;
	
КонецПроцедуры

// Процедура формирует движения регистров по табличной части Продукция
////
Процедура ДвиженияПоТабличнойЧастиПродукция(ТаблицаПоПродукции, СтруктураШапкиДокумента)

	Если Продукция.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Строка Из ТаблицаПоПродукции Цикл

		ДвиженияПоВыпускуПродукцииОтходов(Строка, СтруктураШапкиДокумента, ОперацияБУ, ТаблицаДвиженийВыпускБУ, Истина);
		
		
	КонецЦикла;
		

	ДвиженияВыпускПродукцииУслугБУ.мПериод = Дата;
	ДвиженияВыпускПродукцииУслугБУ.мТаблицаДвижений = ТаблицаДвиженийВыпускБУ;

КонецПроцедуры // ДвиженияПоТабличнойЧастиПродукция()

// Процедура формирует движения регистров по табличной части Услуги
////
Процедура ДвиженияПоТабличнойЧастиУслуги(ТаблицаПоУслугам, СтруктураШапкиДокумента)

	Если Услуги.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Строка Из ТаблицаПоУслугам Цикл

		 ДвиженияПоВыпускуВнутрУслуг(Строка, СтруктураШапкиДокумента, ОперацияБУ, ТаблицаДвиженийВыпускБУ, Истина);

		
	КонецЦикла;
		

	ДвиженияВыпускПродукцииУслугБУ.мПериод = Дата;
	ДвиженияВыпускПродукцииУслугБУ.мТаблицаДвижений = ТаблицаДвиженийВыпускБУ;

КонецПроцедуры // ДвиженияПоТабличнойЧастиУслуги()

// Процедура формирует движения регистров по табличной части ВозвратныеОтходы
////
Процедура ДвиженияПоТабличнойЧастиОтходы(ТаблицаПоОтходам, СтруктураШапкиДокумента)

	Если ВозвратныеОтходы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;


	Для Каждого Строка Из ТаблицаПоОтходам Цикл

		ДвиженияПоВыпускуОтходов(Строка, СтруктураШапкиДокумента, ОперацияБУ, ТаблицаДвиженийВыпускБУ, Истина);
				
	КонецЦикла;
		

	ДвиженияВыпускПродукцииУслугБУ.мПериод = Дата;
	ДвиженияВыпускПродукцииУслугБУ.мТаблицаДвижений = ТаблицаДвиженийВыпускБУ;

КонецПроцедуры // ДвиженияПоТабличнойЧастиПродукция()

// Процедура формирует движения по выпуску продукции.
//
Процедура ДвиженияПоВыпускуПродукцииОтходов(Строка, СтруктураШапкиДокумента, Операция, ТаблицаДвиженийВыпуск, ВБухгалтерскомУчете)

	Счет                = Строка.Счет;
	СчетЗатратТекущий   = СчетЗатрат;
	
	// Сформируем проводку.
	Если НЕ ЗначениеЗаполнено(Счет)
	 ИЛИ НЕ ЗначениеЗаполнено(СчетЗатратТекущий) Тогда
		Возврат;
	КонецЕсли;

	НоваяПроводка = Операция.Добавить();

	НоваяПроводка.Организация = Организация;
	НоваяПроводка.Период      = Дата;

	НоваяПроводка.СчетДт = Счет;
	БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, "Номенклатура", Строка.Номенклатура);
	БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, "Склады",       Склад);
	
	// Если способ оценки ФИФО или ЛИФО и на счете ведется партионный учет,
	// то в проводке указываем в качестве партии текущий документ.
	Если УчетнаяПолитика.СпособОценкиМПЗ(Организация, Дата) <> Перечисления.СпособыОценки.ПоСредней Тогда
		БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, "Партии",       Ссылка);
	КонецЕсли; 

	НоваяПроводка.Содержание = НСтр("ru='Выпуск продукции';uk='Випуск продукції'",Локализация.КодЯзыкаИнформационнойБазы());

	НоваяПроводка.СчетКт = СчетЗатратТекущий;
	
	БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетКт, НоваяПроводка.СубконтоКт, "Подразделения",        ПодразделениеОрганизации);
	БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетКт, НоваяПроводка.СубконтоКт, "НоменклатурныеГруппы", Строка.НоменклатурнаяГруппа);
	
	НоваяПроводка.КоличествоДт = ?(НоваяПроводка.СчетДТ.Количественный, Строка.Количество, 0);
	НоваяПроводка.Сумма        = Строка.СуммаПлановая;
	
	НоваяПроводка.НалоговоеНазначениеДт = Строка.НалоговоеНазначение;
	НоваяПроводка.НалоговоеНазначениеКт = Строка.НалоговоеНазначение;
	
	Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыльДо2015
	   И Строка.НалоговоеНазначение <> Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяНеХозДеятельность Тогда
		СуммаНУ = Строка.СуммаПлановая;
		НоваяПроводка.СуммаНУДт = СуммаНУ;
		НоваяПроводка.СуммаНУКт = СуммаНУ;
	КонецЕсли;
	
	// Отражения выпуска в регистре накопления ВыпускПродукцииУслуг
	СтрокаДвижения = ТаблицаДвиженийВыпуск.Добавить();
	СтрокаДвижения.Организация           = Организация;
	СтрокаДвижения.Продукция             = Строка.Номенклатура;
	СтрокаДвижения.СчетЗатрат            = СчетЗатратТекущий;
	СтрокаДвижения.Подразделение         = ПодразделениеОрганизации;
	СтрокаДвижения.НоменклатурнаяГруппа  = Строка.НоменклатурнаяГруппа;
	СтрокаДвижения.СчетСписания          = Счет;
	
	СтрокаДвижения.НалоговоеНазначениеДоходовИЗатрат  = Строка.НалоговоеНазначение;
	
	Если Счет.ВидыСубконто.Количество() > 0 Тогда
		СтрокаДвижения.СубконтоСписания1 = НоваяПроводка.СубконтоДт[НоваяПроводка.СчетДт.ВидыСубконто[0].ВидСубконто];
	КонецЕсли; 
	
	Если Счет.ВидыСубконто.Количество() > 1 Тогда
		СтрокаДвижения.СубконтоСписания2 = НоваяПроводка.СубконтоДт[НоваяПроводка.СчетДт.ВидыСубконто[1].ВидСубконто];
	КонецЕсли;
	
	Если Счет.ВидыСубконто.Количество() > 2 Тогда
		СтрокаДвижения.СубконтоСписания3 = НоваяПроводка.СубконтоДт[НоваяПроводка.СчетДт.ВидыСубконто[2].ВидСубконто];
	КонецЕсли;
	
	СтрокаДвижения.Количество = Строка.Количество;
	СтрокаДвижения.ПлановаяСтоимость = Строка.СуммаПлановая;
	
КонецПроцедуры // ДвиженияПоВыпускуПродукцииОтходов()

// Процедура формирует движения по выпуску отходов.
//
Процедура ДвиженияПоВыпускуОтходов(Строка, СтруктураШапкиДокумента, Операция, ТаблицаДвиженийВыпуск, ВБухгалтерскомУчете)

	Счет                = Строка.Счет;
	СчетЗатратТекущий   = СчетЗатрат;
	СтатьяЗатрат        = Строка.СтатьяЗатрат;
	

	// Сформируем проводку.
	Если НЕ ЗначениеЗаполнено(Счет)
	 ИЛИ НЕ ЗначениеЗаполнено(СчетЗатратТекущий) Тогда
		Возврат;
	КонецЕсли;

	НоваяПроводка = Операция.Добавить();

	НоваяПроводка.Организация = Организация;
	НоваяПроводка.Период      = Дата;

	НоваяПроводка.СчетКт = Счет;
	БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетКт, НоваяПроводка.СубконтоКт, "Номенклатура", Строка.Номенклатура);
	БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетКт, НоваяПроводка.СубконтоКт, "Склады",       Склад);
	
	// Если способ оценки ФИФО или ЛИФО и на счете ведется партионный учет,
	// то в проводке указываем в качестве партии текущий документ.
	Если УчетнаяПолитика.СпособОценкиМПЗ(Организация, Дата) <> Перечисления.СпособыОценки.ПоСредней Тогда
		БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетКт, НоваяПроводка.СубконтоКт, "Партии",       Ссылка);
	КонецЕсли; 

	НоваяПроводка.Содержание = НСтр("ru='Выпуск возвратных отходов';uk='Випуск зворотних відходів'",Локализация.КодЯзыкаИнформационнойБазы());

	НоваяПроводка.СчетДт = СчетЗатратТекущий;
	БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, "Подразделения",        ПодразделениеОрганизации);
	БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, "НоменклатурныеГруппы", Строка.НоменклатурнаяГруппа);
	БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, "СтатьиЗатрат",         СтатьяЗатрат);
	
	НоваяПроводка.КоличествоКт = ?(НоваяПроводка.СчетКТ.Количественный, - Строка.Количество, 0);
	НоваяПроводка.Сумма        = - Строка.Сумма;
	
	НоваяПроводка.НалоговоеНазначениеДт = Строка.НалоговоеНазначение;
	НоваяПроводка.НалоговоеНазначениеКт = Строка.НалоговоеНазначение;
	
	Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыльДо2015
	   И Строка.НалоговоеНазначение <> Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяНеХозДеятельность Тогда
		СуммаНУ = - Строка.Сумма;
		НоваяПроводка.СуммаНУДт = СуммаНУ;
		НоваяПроводка.СуммаНУКт = СуммаНУ;
	КонецЕсли;
				
КонецПроцедуры // ДвиженияПоВыпускуОтходов()

Функция ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента, ТаблицаПоПродукции, ТаблицаПоУслугам, ТаблицаПоОтходам, ТаблицаНГ, Отказ = Ложь)
    		
	ТаблицаМатериалов = РезультатЗапросаПоТоварам.Выгрузить();
		
	ТаблицаМатериалов.Колонки.Добавить("Регистратор");
	ТаблицаМатериалов.Колонки.Добавить("Склад");
	ТаблицаМатериалов.Колонки.Добавить("Организация");
	ТаблицаМатериалов.Колонки.Добавить("ДоговорКонтрагента");
	ТаблицаМатериалов.Колонки.Добавить("Валюта");
	ТаблицаМатериалов.Колонки.Добавить("ВходящийНДС");
	
	ТаблицаМатериалов.Колонки.Добавить("СчетУчетаБУ");
	ТаблицаМатериалов.Колонки.Добавить("КорСчетСписанияБУ");	
	ТаблицаМатериалов.Колонки.Добавить("КорСубконтоСписанияБУ1");
	ТаблицаМатериалов.Колонки.Добавить("КорСубконтоСписанияБУ2");
	ТаблицаМатериалов.Колонки.Добавить("КорСубконтоСписанияБУ3");
	
	// ИНАГРО++ 
	ТаблицаМатериалов.Колонки.Добавить("Субконто1");
	ТаблицаМатериалов.Колонки.Добавить("Субконто2");
	ТаблицаМатериалов.Колонки.Добавить("Субконто3");
	// ИНАГРО--
	
	ТаблицаМатериалов.ЗаполнитьЗначения(ЭтотОбъект,    							"Регистратор");
	ТаблицаМатериалов.ЗаполнитьЗначения(СтруктураШапкиДокумента.Склад,      	"Склад");
	ТаблицаМатериалов.ЗаполнитьЗначения(СтруктураШапкиДокумента.Организация,	"Организация");
	ТаблицаМатериалов.ЗаполнитьЗначения(СчетЗатрат,    							"КорСчетСписанияБУ");
	
	ТаблицаМатериалов.ЗаполнитьЗначения(СтруктураШапкиДокумента.ПодразделениеОрганизации,	"КорСубконтоСписанияБУ1");
	ТаблицаМатериалов.ЗаполнитьЗначения(СтруктураШапкиДокумента.ПодразделениеОрганизации,	"Субконто1"); // ИНАГРО
	
	ТаблицаМатериалов.Колонки.Добавить("ХарактерЗатрат");
	
	Для Каждого СтрокаМатериалов ИЗ ТаблицаМатериалов Цикл
		
		СтрокаМатериалов.КорСубконтоСписанияБУ2 = СтрокаМатериалов.НоменклатурнаяГруппа;	
		СтрокаМатериалов.СчетУчетаБУ			= СтрокаМатериалов.Счет;	
		СтрокаМатериалов.КорСубконтоСписанияБУ3 = СтрокаМатериалов.СтатьяЗатрат;
		
		// ИНАГРО++
		СтрокаМатериалов.Субконто2 = СтрокаМатериалов.НоменклатурнаяГруппа;				
		СтрокаМатериалов.Субконто3 = СтрокаМатериалов.СтатьяЗатрат;
		// ИНАГРО--
		
		// заполним ХарактерЗатрат, НалоговоеНазначениеНовое
		НалоговыйУчет.ОпределениеАналитикиНалоговогоУчетаВПроводкахДляЗатрат(СтрокаМатериалов, СтрокаМатериалов.КорСчетСписанияБУ, СтрокаМатериалов.ХарактерЗатрат,
														       	СтрокаМатериалов.НалоговоеНазначениеНовое, ,                                                              
																СтрокаМатериалов.НалоговоеНазначение, СтрокаМатериалов.НалоговоеНазначениеНовое, "КорСубконтоСписанияБУ", Дата
																,,СтруктураШапкиДокумента.ЕстьНДС
																);
			
	КонецЦикла;

	Возврат ТаблицаМатериалов;
	
КонецФункции

// Процедура формирует движения по выпуску внутренних услуг производственных подразделений.
//
Процедура ДвиженияПоВыпускуВнутрУслуг(Строка, СтруктураШапкиДокумента, Операция, ТаблицаДвиженийВыпуск, ВБухгалтерскомУчете)

	
	Счет                      = Строка.Счет;
	СчетЗатратТекущий         = СчетЗатрат;

	// Сформируем проводку.
	Если НЕ ЗначениеЗаполнено(Счет)
	 ИЛИ НЕ ЗначениеЗаполнено(СчетЗатратТекущий) Тогда
		Возврат;
	КонецЕсли;
	
	Если УслугиВСуммовомВыражении Тогда
		НоваяПроводка = Операция.Добавить();

		НоваяПроводка.Организация = Организация;
		НоваяПроводка.Период      = Дата;

		НоваяПроводка.СчетДт = Счет;
		БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, 1, Строка.Субконто1);
		БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, 2, Строка.Субконто2);
		БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, 3, Строка.Субконто3);

		НоваяПроводка.Содержание = НСтр("ru='Выпуск внутр.услуг';uk='Випуск внутр.послуг'",Локализация.КодЯзыкаИнформационнойБазы());

		НоваяПроводка.СчетКт = СчетЗатратТекущий;
		БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетКт, НоваяПроводка.СубконтоКт, "НоменклатурныеГруппы", Строка.НоменклатурнаяГруппа);
		БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетКт, НоваяПроводка.СубконтоКт, "Подразделения", ПодразделениеОрганизации);
		
		//БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетКт, НоваяПроводка.СубконтоКт, "СтатьиЗатрат", );
		
		НоваяПроводка.КоличествоДт = ?(НоваяПроводка.СчетДТ.Количественный, Строка.Количество, 0);
		НоваяПроводка.Сумма        = Строка.СуммаПлановая;
		
		НоваяПроводка.НалоговоеНазначениеДт = Строка.НалоговоеНазначениеДоходовИЗатрат;
		НоваяПроводка.НалоговоеНазначениеКт = Строка.НалоговоеНазначение;
		
		Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыльДо2015
			И Строка.НалоговоеНазначение <> Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяНеХозДеятельность Тогда
			СуммаНУ = Строка.СуммаПлановая;
			НоваяПроводка.СуммаНУДт = СуммаНУ;
			НоваяПроводка.СуммаНУКт = СуммаНУ;
		КонецЕсли;
		
	КонецЕсли;
	
	// Отражения выпуска в регистре накопления ВыпускПродукцииУслуг
	СтрокаДвижения = ТаблицаДвиженийВыпуск.Добавить();
	СтрокаДвижения.Организация           = Организация;
	СтрокаДвижения.Продукция             = Строка.Номенклатура;
	СтрокаДвижения.СчетЗатрат            = СчетЗатратТекущий;
	СтрокаДвижения.Подразделение         = ПодразделениеОрганизации;
	СтрокаДвижения.НоменклатурнаяГруппа  = Строка.НоменклатурнаяГруппа;
	СтрокаДвижения.СчетСписания          = Счет;
	
	СтрокаДвижения.НалоговоеНазначениеДоходовИЗатрат   = Строка.НалоговоеНазначениеДоходовИЗатрат;
 
	Если Счет.ВидыСубконто.Количество() > 0 Тогда
		СтрокаДвижения.СубконтоСписания1 = Строка.Субконто1;
	КонецЕсли; 
	
	Если Счет.ВидыСубконто.Количество() > 1 Тогда
		СтрокаДвижения.СубконтоСписания2 = Строка.Субконто2;
	КонецЕсли;
	
	Если Счет.ВидыСубконто.Количество() > 2 Тогда
	    СтрокаДвижения.СубконтоСписания3 = Строка.Субконто3;
	КонецЕсли;
	
	
	СтрокаДвижения.ПрямыеРасходыРаспределятьПоКоличеству = Не УслугиВСуммовомВыражении;
	СтрокаДвижения.Количество = ?(УслугиВСуммовомВыражении, 1, Строка.Количество);
	СтрокаДвижения.ПлановаяСтоимость = ?(УслугиВСуммовомВыражении, Строка.СуммаПлановая, 0);
	
КонецПроцедуры // ДвиженияПоВыпускуВнутрУслуг()

//////////////////////////////////////////////////////////////////////////////////
//// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	ТипДанныхЗаполнения = ТипЗнч(ДанныеЗаполнения);
	Если ДанныеЗаполнения <> Неопределено И ТипДанныхЗаполнения <> Тип("Структура")
		И Метаданные().ВводитсяНаОсновании.Содержит(ДанныеЗаполнения.Метаданные()) Тогда
		ЗаполнитьПоДокументуОснованию(ДанныеЗаполнения);
	КонецЕсли;
	ЗаполнениеДокументов.Заполнить(ЭтотОбъект, ДанныеЗаполнения);
	Если НЕ ЗначениеЗаполнено(СчетЗатрат) Тогда
		СчетЗатрат   = ПланыСчетов.Хозрасчетный.ЗатратыТекущегоГода;
	КонецЕсли;
	ИспользоватьМатериалы = Истина;

КонецПроцедуры

// Процедура вызывается перед записью документа 
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)

	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ УчетнаяПолитика.ПлательщикНДС(Организация, Дата) Тогда
		// организация - не плательщик НДС. Установим во всех ТЧ признак соответствующего учета НДС
		НеОБлНДСДеятельность = Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяХозДеятельность;
		
		Для каждого СтрокаТЧ  Из Материалы Цикл
		    СтрокаТЧ.НалоговоеНазначение = НеОБлНДСДеятельность;
		КонецЦикла;
	КонецЕсли;
	
	Если НЕ УчетнаяПолитика.ПлательщикНалогаНаПрибыльДо2015(Организация, Дата) Тогда
		
		Для каждого СтрокаТЧ  Из Услуги Цикл
		    СтрокаТЧ.НалоговоеНазначениеДоходовИЗатрат = Неопределено;
		КонецЦикла; 
		
	КонецЕсли;
	
КонецПроцедуры // ПередЗаписью

// Процедура - обработчик события "ОбработкаПроведения"
////
Процедура ОбработкаПроведения(Отказ, РежимПроведения)

	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента = ОбщегоНазначенияРед12.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	
	СтруктураШапкиДокумента.Вставить("ЕстьНалогНаПрибыльДо2015"       , УчетнаяПолитика.ПлательщикНалогаНаПрибыльДо2015(Организация, Дата));
	СтруктураШапкиДокумента.Вставить("ЕстьНДС"                        , УчетнаяПолитика.ПлательщикНДС(Организация, Дата));

	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначенияБПВызовСервера.ПредставлениеДокументаПриПроведении(Ссылка);
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКПроведению(ЭтотОбъект);
	Если РучнаяКорректировка Тогда
		Возврат;
	КонецЕсли;
	
	
	
	СтруктураПолей = Новый Структура();
	СтруктураПростыхПолей = Новый Структура;
	
	СтруктураПолей.Вставить("Номенклатура",        "Номенклатура");
	СтруктураПолей.Вставить("НоменклатурнаяГруппа","НоменклатурнаяГруппа");
	СтруктураПолей.Вставить("Услуга"      ,        "Номенклатура.Услуга");
	СтруктураПолей.Вставить("БланкСтрогогоУчета",  "Номенклатура.БланкСтрогогоУчета");
	СтруктураПолей.Вставить("Количество"  ,        "Количество * Коэффициент");
	СтруктураПолей.Вставить("СуммаПлановая",       "СуммаПлановая");
	СтруктураПолей.Вставить("Счет",                "Счет");

	Если СтруктураШапкиДокумента.ЕстьНДС Тогда
		СтруктураПолей.Вставить("НалоговоеНазначение"     	 , "НоменклатурнаяГруппа.НалоговоеНазначениеВПроизводстве");
		СтруктураПолей.Вставить("ВидНалоговойДеятельности"   , "НоменклатурнаяГруппа.НалоговоеНазначениеВПроизводстве.ВидНалоговойДеятельности");
		СтруктураПолей.Вставить("ВидДеятельностиНДС"         , "НоменклатурнаяГруппа.НалоговоеНазначениеВПроизводстве.ВидДеятельностиНДС");
		СтруктураПолей.Вставить("Амортизируется"             , "НоменклатурнаяГруппа.НалоговоеНазначениеВПроизводстве.Амортизируется");
	Иначе
		НалоговоеНазначениеВПроизводстве = Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяХозДеятельность;
		СтруктураПростыхПолей.Вставить("НалоговоеНазначение"     	, НалоговоеНазначениеВПроизводстве);
		СтруктураПростыхПолей.Вставить("ВидНалоговойДеятельности"   , НалоговоеНазначениеВПроизводстве.ВидНалоговойДеятельности);
		СтруктураПростыхПолей.Вставить("ВидДеятельностиНДС"         , НалоговоеНазначениеВПроизводстве.ВидДеятельностиНДС);
		СтруктураПростыхПолей.Вставить("Амортизируется"             , НалоговоеНазначениеВПроизводстве.Амортизируется);
	КонецЕсли;
	
	
	РезультатЗапросаПоТаблицеПродукция = ОбщегоНазначенияРед12.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Продукция", СтруктураПолей, СтруктураПростыхПолей);	
	
	ТаблицаПоПродукции = РезультатЗапросаПоТаблицеПродукция.Выгрузить();
	
	СтруктураПолейУслуг = Новый Структура();
	СтруктураПростыхПолейУслуг = Новый Структура();
	
	СтруктураПолейУслуг.Вставить("Номенклатура",        "Номенклатура");
	СтруктураПолейУслуг.Вставить("НоменклатурнаяГруппа","НоменклатурнаяГруппа");
	СтруктураПолейУслуг.Вставить("Количество",          "Количество");
	СтруктураПолейУслуг.Вставить("Услуга"      ,        "Номенклатура.Услуга");
	СтруктураПолейУслуг.Вставить("СуммаПлановая",       "СуммаПлановая");
	СтруктураПолейУслуг.Вставить("Счет"                 , "Счет");
	СтруктураПолейУслуг.Вставить("Субконто1"            , "Субконто1");
	СтруктураПолейУслуг.Вставить("Субконто2"            , "Субконто2");
	СтруктураПолейУслуг.Вставить("Субконто3"            , "Субконто3");
	
	Если СтруктураШапкиДокумента.ЕстьНДС Тогда
		СтруктураПолейУслуг.Вставить("НалоговоеНазначение"     	  , "НоменклатурнаяГруппа.НалоговоеНазначениеВПроизводстве");
		СтруктураПолейУслуг.Вставить("ВидНалоговойДеятельности"   , "НоменклатурнаяГруппа.НалоговоеНазначениеВПроизводстве.ВидНалоговойДеятельности");
		СтруктураПолейУслуг.Вставить("ВидДеятельностиНДС"         , "НоменклатурнаяГруппа.НалоговоеНазначениеВПроизводстве.ВидДеятельностиНДС");
		СтруктураПолейУслуг.Вставить("Амортизируется"             , "НоменклатурнаяГруппа.НалоговоеНазначениеВПроизводстве.Амортизируется");
	Иначе
		НалоговоеНазначениеВПроизводстве = Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяХозДеятельность;
		СтруктураПростыхПолейУслуг.Вставить("НалоговоеНазначение"     	 , НалоговоеНазначениеВПроизводстве);
		СтруктураПростыхПолейУслуг.Вставить("ВидНалоговойДеятельности"   , НалоговоеНазначениеВПроизводстве.ВидНалоговойДеятельности);
		СтруктураПростыхПолейУслуг.Вставить("ВидДеятельностиНДС"         , НалоговоеНазначениеВПроизводстве.ВидДеятельностиНДС);
		СтруктураПростыхПолейУслуг.Вставить("Амортизируется"             , НалоговоеНазначениеВПроизводстве.Амортизируется);
	КонецЕсли;
	
	СтруктураПолейУслуг.Вставить("НалоговоеНазначениеДоходовИЗатрат", "НалоговоеНазначениеДоходовИЗатрат");
	
	РезультатЗапросаПоТаблицеУслуги = ОбщегоНазначенияРед12.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Услуги", СтруктураПолейУслуг, СтруктураПростыхПолейУслуг);
	ТаблицаПоУслугам = ПодготовитьТаблицуУслуг(РезультатЗапросаПоТаблицеУслуги, СтруктураШапкиДокумента);
	
	СтруктураПолейОтходов = Новый Структура();
	СтруктураПростыхПолейОтходов = Новый Структура();
	
	СтруктураПолейОтходов.Вставить("Номенклатура",        "Номенклатура");
	СтруктураПолейОтходов.Вставить("НоменклатурнаяГруппа","НоменклатурнаяГруппа");
	СтруктураПолейОтходов.Вставить("Услуга"      ,        "Номенклатура.Услуга");
	СтруктураПолейОтходов.Вставить("БланкСтрогогоУчета",  "Номенклатура.БланкСтрогогоУчета");
	СтруктураПолейОтходов.Вставить("Сумма",               "Сумма");
	СтруктураПолейОтходов.Вставить("Количество"  ,        "Количество * Коэффициент");
	СтруктураПолейОтходов.Вставить("Счет"                 , "Счет");
	СтруктураПолейОтходов.Вставить("СтатьяЗатрат"         , "СтатьяЗатрат");
		
	Если СтруктураШапкиДокумента.ЕстьНДС Тогда
		СтруктураПолейОтходов.Вставить("НалоговоеНазначение"        , "НоменклатурнаяГруппа.НалоговоеНазначениеВПроизводстве");
		СтруктураПолейОтходов.Вставить("ВидНалоговойДеятельности"   , "НоменклатурнаяГруппа.НалоговоеНазначениеВПроизводстве.ВидНалоговойДеятельности");
		СтруктураПолейОтходов.Вставить("ВидДеятельностиНДС"         , "НоменклатурнаяГруппа.НалоговоеНазначениеВПроизводстве.ВидДеятельностиНДС");
		СтруктураПолейОтходов.Вставить("Амортизируется"             , "НоменклатурнаяГруппа.НалоговоеНазначениеВПроизводстве.Амортизируется");
	Иначе
		НалоговоеНазначениеВПроизводстве = Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяХозДеятельность;
		СтруктураПростыхПолейОтходов.Вставить("НалоговоеНазначение"     	 , НалоговоеНазначениеВПроизводстве);
		СтруктураПростыхПолейОтходов.Вставить("ВидНалоговойДеятельности"   , НалоговоеНазначениеВПроизводстве.ВидНалоговойДеятельности);
		СтруктураПростыхПолейОтходов.Вставить("ВидДеятельностиНДС"         , НалоговоеНазначениеВПроизводстве.ВидДеятельностиНДС);
		СтруктураПростыхПолейОтходов.Вставить("Амортизируется"             , НалоговоеНазначениеВПроизводстве.Амортизируется);
	КонецЕсли;
	
	
	РезультатЗапросаПоТаблицеОтходам = ОбщегоНазначенияРед12.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "ВозвратныеОтходы", СтруктураПолейОтходов, СтруктураПростыхПолейОтходов);
	
	ТаблицаПоОтходам = РезультатЗапросаПоТаблицеОтходам.Выгрузить();
	
	Если ИспользоватьМатериалы Тогда
		
		СтруктураПолейМатериалы = Новый Структура();
		СтруктураПолейМатериалы.Вставить("Номенклатура",			"Номенклатура");
		СтруктураПолейМатериалы.Вставить("Счет",					"Счет");	
		СтруктураПолейМатериалы.Вставить("ЕдиницаИзмерения",		"ЕдиницаИзмерения");
		СтруктураПолейМатериалы.Вставить("Коэффициент",				"Коэффициент");
		СтруктураПолейМатериалы.Вставить("Количество",				"Количество * Коэффициент");	
		СтруктураПолейМатериалы.Вставить("СтатьяЗатрат",			"СтатьяЗатрат");
		СтруктураПолейМатериалы.Вставить("НалоговоеНазначение",		  "НалоговоеНазначение");
		СтруктураПолейМатериалы.Вставить("НалоговоеНазначениеНовое",  "НалоговоеНазначениеДоходовИЗатрат");
		СтруктураПолейМатериалы.Вставить("ВидДеятельностиНДС", 		  "НалоговоеНазначение.ВидДеятельностиНДС");
		СтруктураПолейМатериалы.Вставить("ДокументОприходования",	"ДокументОприходования");
		СтруктураПолейМатериалы.Вставить("Себестоимость",			"Себестоимость");
		СтруктураПолейМатериалы.Вставить("СебестоимостьНУ", 		"СебестоимостьНУ");
		СтруктураПолейМатериалы.Вставить("НоменклатурнаяГруппа",	"НоменклатурнаяГруппа");		
		СтруктураПолейМатериалы.Вставить("Услуга",                  "Номенклатура.Услуга");
		
		// Выгрузка табличной части "Материалы" в таблицу значений. В ПолученоПродукции получим общую плановую стоимость по номенклатурным группам
		ПолученоПродукции = Неопределено;
		РезультатЗапросаПоТаблицеМатериалы = ОбщегоНазначенияРед12.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Материалы", СтруктураПолейМатериалы);
		ТаблицаМатериалов = ПодготовитьТаблицуТоваров(РезультатЗапросаПоТаблицеМатериалы, СтруктураШапкиДокумента, ТаблицаПоПродукции, ТаблицаПоУслугам, ТаблицаПоОтходам, ПолученоПродукции, Отказ);
		
		// Проверим, что в табличной части материалов не указаны услуги.
		
	КонецЕсли;
	
	
	
	
	
	
	
	
	Если НЕ Отказ Тогда // Формирование движений регистров
		
		// Очистим движения регистров.
		Для Каждого Движение Из Движения Цикл
			Движение.Очистить();
			Движение.Записать(Истина);
		КонецЦикла;
		
	
	
		ОперацияБУ = Движения["Хозрасчетный"];
		
		ДвиженияВыпускПродукцииУслугБУ = Движения["ВыпускПродукцииУслугБухгалтерскийУчет"];
		ТаблицаДвиженийВыпускБУ        = ДвиженияВыпускПродукцииУслугБУ.Выгрузить();

	
		ДвиженияПоТабличнойЧастиПродукция(ТаблицаПоПродукции, СтруктураШапкиДокумента);
		ДвиженияПоТабличнойЧастиУслуги(ТаблицаПоУслугам, СтруктураШапкиДокумента);
		
		Если Продукция.Количество() <> 0 Или Услуги.Количество() <> 0 Тогда
			
			ДвиженияВыпускПродукцииУслугБУ.ДобавитьДвижение();
			
		КонецЕсли;
		
		ДвиженияПоТабличнойЧастиОтходы(ТаблицаПоОтходам, СтруктураШапкиДокумента);
		
		Если ИспользоватьМатериалы Тогда					
			ЕстьНалоговыйУчетПартий = (СтруктураШапкиДокумента.ЕстьНДС ИЛИ СтруктураШапкиДокумента.ЕстьНалогНаПрибыльДо2015);
			
			
			УправлениеЗапасамиПартионныйУчет.ДвижениеПартийТоваров(ТаблицаМатериалов, Отказ);			
		КонецЕсли;		

	КонецЕсли;
	
	Движения.Хозрасчетный.ВыполнитьДействияПередЗаписьюДвижений();
    
    // ИНАГРО++
	Движения.Хозрасчетный.Записать();
	
	ИНАГРО_Общий.ИНАГРО_ДвиженияВыпускПродукции(СтруктураШапкиДокумента, Движения);
	
	ИНАГРО_Общий.ИНАГРО_ДвиженияВыпускПродукции_Услуги(СтруктураШапкиДокумента, ТаблицаПоУслугам, Движения);
	
	ИНАГРО_Общий.ИНАГРО_ДвиженияЗатратыОрганизации_Приход(СтруктураШапкиДокумента, Движения);
	
	Если ИНАГРО_ОбщийВызовСервераПовтИсп.ЕстьБСПУ() Тогда
		
		Если ТаблицаПоПродукции.Количество() > 0 Тогда			
			ТаблицаПоПродукцииКопия = ТаблицаПоПродукции.Скопировать();
			ТаблицаПоПродукцииКопия.Колонки.Счет.Имя = "СчетУчетаБУ";
			ИНАГРО_Общий.ИНАГРО_ВедомостьДвиженийПриход(Движения, ТаблицаПоПродукцииКопия, СтруктураШапкиДокумента);	
		КонецЕсли; 
		
		Если ИспользоватьМатериалы И ТаблицаМатериалов.Количество() > 0 Тогда
			ТаблицаМатериалов.Колонки.Добавить("НаправлениеДвижения");
			ТаблицаМатериалов.ЗаполнитьЗначения(Справочники.ИНАГРО_ВидыДвиженийВедомости.ВПроизводство, "НаправлениеДвижения");
			ИНАГРО_Общий.ИНАГРО_ВедомостьДвиженийРасход(Движения, ТаблицаМатериалов, СтруктураШапкиДокумента);
		КонецЕсли;
		
	КонецЕсли;
	// ИНАГРО--   
	
	Движения.Хозрасчетный.ВыполнитьДействияПередЗаписьюДвижений();
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКЗаписиДвижений(ЭтотОбъект);

КонецПроцедуры // ОбработкаПроведения()

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКОтменеПроведения(ЭтотОбъект);
	Движения.Записать();
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)

	МассивНепроверяемыхРеквизитов = Новый Массив;

	Если Отказ Тогда
		Если ЗначениеЗаполнено(Организация) И ЗначениеЗаполнено(Дата) Тогда
			ТекстСообщения = НСтр("ru='Не задана учетная политика организации %1 на %2.';uk='Не задана облікова політика організації %1 на %2.'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ТекстСообщения, Организация, Формат(Дата, "ДФ=dd.MM.yyyy"));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект);
		КонецЕсли;
		Возврат;
	КонецЕсли;

	Если Продукция.Количество() = 0 И ВозвратныеОтходы.Количество() = 0 И Материалы.Количество() = 0 Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Склад");
	КонецЕсли;
	
	Если Услуги.Количество() = 0 
		Или УчетнаяПолитика.ПорядокРаспределенияРасходовНаОказаниеВнутреннихУслуг(Организация, Дата) <> Перечисления.ПорядокРаспределенияРасходовНаОказаниеВнутреннихУслуг.ПоПлановымЦенамИОбъемуВыпуска Тогда
		МассивНепроверяемыхРеквизитов.Добавить("ВариантВыраженияВнутреннихУслуг");
	КонецЕсли;

	Если ВариантВыраженияВнутреннихУслуг <> Перечисления.ВариантВыраженияВнутреннихУслуг.ВКоличественныхПоказателях Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Услуги.Количество");
	КонецЕсли;

	Если ВариантВыраженияВнутреннихУслуг <> Перечисления.ВариантВыраженияВнутреннихУслуг.ВПлановыхЦенах Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Услуги.СуммаПлановая");
	КонецЕсли;
	
	// Документ без данных о выпущенных товарах, услугах или возвращенных отходах
	// считаем заполненным некорректно.
	ОбщегоНазначенияБП.ИсключитьИзПроверкиОсновныеТабличныеЧасти(ЭтотОбъект, "Продукция, Услуги, ВозвратныеОтходы", ПроверяемыеРеквизиты);
	
	БухгалтерскийУчет.ПроверитьЗаполнениеАналитикиЗатратТабличнойЧасти(ЭтотОбъект, "Услуги", НСтр("ru='Услуги';uk='Послуги'"), Отказ);

	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	
	ХарактерЗатрат = УправлениеПроизводствомВызовСервера.ПолучитьХарактерЗатратПоСчетуЗатрат(СчетЗатрат);
	
	Если ХарактерЗатрат = "Строительство" Тогда
		ТекстСообщения = ОбщегоНазначенияБПКлиентСервер.ПолучитьТекстСообщения("Поле", "Корректность", 
		НСтр("ru='Счет затрат (БУ)';uk='Рахунок витрат (БО)'"),
		, , 
		НСтр("ru='Документ ""Отчет производства за смену"" не предназначен для списания затрат на строительство';uk='Документ ""Звіт виробництва за зміну"" не призначений для списання витрат на будівництво'")
		);
		Поле = "СчетЗатрат";
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
	ИначеЕсли ХарактерЗатрат = "РБП" Тогда
		ТекстСообщения = ОбщегоНазначенияБПКлиентСервер.ПолучитьТекстСообщения("Поле", "Корректность", 
		НСтр("ru='Счет затрат (БУ)';uk='Рахунок витрат (БО)'"),
		, , 
		НСтр("ru='Документ ""Отчет производства за смену"" не предназначен для списания затрат на РБП';uk='Документ ""Звіт виробництва за зміну"" не призначений для списання витрат на ВМП'")
		);
		Поле = "СчетЗатрат";
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
	КонецЕсли;
	
	ПроверитьЗаполнениеНалоговогоНазначенияВНоменклатурнойГруппе(Отказ);
	БухгалтерскийУчет.ПроверитьЗаполнениеАналитикиЗатратТабличнойЧасти(ЭтотОбъект, "Услуги", НСтр("ru='Услуги';uk='Послуги'"), Отказ);
	ПроверитьТабЧастьМатериалыПострочно(Отказ);
	ПроверитьТабЧастьУслуги(Отказ);
	
	Если НЕ Отказ И УчетнаяПолитика.ПлательщикНДС(Организация, Дата) Тогда
		БухгалтерскийУчет.ПроверитьСоответствиеАналитикиЗатратНалоговомуНазначению(ЭтотОбъект, "Материалы", НСтр("ru='Материалы';uk='Матеріали'"), Истина, Отказ);
		БухгалтерскийУчет.ПроверитьСоответствиеАналитикиЗатратНалоговомуНазначению(ЭтотОбъект, "Услуги", НСтр("ru='Услуги';uk='Послуги'"), Истина, Отказ);
	КонецЕсли;

КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)

	Дата = НачалоДня(ОбщегоНазначенияБП.ПолучитьРабочуюДату());
	Ответственный = Пользователи.ТекущийПользователь();

КонецПроцедуры

Функция ПодготовитьТаблицуУслуг(РезультатЗапросаПоТаблицеУслуги, СтруктураШапкиДокумента)
	
	ТаблицаУслуг = РезультатЗапросаПоТаблицеУслуги.Выгрузить();
	
	УслугиВСуммовомВыражении = (ВариантВыраженияВнутреннихУслуг = Перечисления.ВариантВыраженияВнутреннихУслуг.ВПлановыхЦенах);
	
	Для каждого СтрокаТаблицы Из ТаблицаУслуг Цикл
		
		Если УслугиВСуммовомВыражении Тогда
			СтрокаТаблицы.Количество = 0;
		Иначе
			СтрокаТаблицы.СуммаПлановая = 0;
		КонецЕсли;
		
		
	КонецЦикла;
	
	ТаблицаУслуг.Колонки.Добавить("ХарактерЗатрат");
	
	Для каждого Строка Из ТаблицаУслуг Цикл
		
		// заполним характер затрат, признак Амортизируется и НалоговоеНазначениеДоходовИЗатрат
		НалоговыйУчет.ОпределениеАналитикиНалоговогоУчетаВПроводкахДляЗатрат(Строка, Строка.Счет, Строка.ХарактерЗатрат,
														       	Строка.НалоговоеНазначениеДоходовИЗатрат, Строка.Амортизируется,      
																Строка.НалоговоеНазначение, Строка.НалоговоеНазначениеДоходовИЗатрат,,Дата
																,,СтруктураШапкиДокумента.ЕстьНДС
																);
		
	КонецЦикла;
	
	Возврат ТаблицаУслуг;
	
КонецФункции

Процедура ПроверитьЗаполнениеНалоговогоНазначенияВНоменклатурнойГруппе(Отказ);
	
	ИмяСписка = НСтр("ru='Продукция';uk='Продукція'");
	
	Для каждого СтрокаТЧ Из Продукция Цикл 
		
		Если НЕ ЗначениеЗаполнено(СтрокаТЧ.НоменклатурнаяГруппа.НалоговоеНазначениеВПроизводстве) Тогда
			
			Префикс = "Продукция[" + Формат(СтрокаТЧ.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].";
			
			ТекстСообщения = ОбщегоНазначенияБПКлиентСервер.ПолучитьТекстСообщения("Колонка", "Корректность", 
				НСтр("ru='Номенкалатурная группа';uk='Номенкалатурная група'"),
				СтрокаТЧ.НомерСтроки, ИмяСписка, 
				НСтр("ru='Не указано налоговое назначение для номенклатурной группы!';uk='Не зазначено податкове призначення для номенклатурної групи!'")
			);
			Поле = Префикс + "НоменклатурнаяГруппа";
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
			
		КонецЕсли; 
		
	КонецЦикла;
	
	ИмяСписка = НСтр("ru='Возвратные отходы';uk='Зворотні відходи'");
	
	Для каждого СтрокаТЧ Из ВозвратныеОтходы Цикл 
		
		Если НЕ ЗначениеЗаполнено(СтрокаТЧ.НоменклатурнаяГруппа.НалоговоеНазначениеВПроизводстве) Тогда
			
			Префикс = "ВозвратныеОтходы[" + Формат(СтрокаТЧ.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].";
			
			ТекстСообщения = ОбщегоНазначенияБПКлиентСервер.ПолучитьТекстСообщения("Колонка", "Корректность", 
				НСтр("ru='Номенкалатурная группа';uk='Номенкалатурная група'"),
				СтрокаТЧ.НомерСтроки, ИмяСписка, 
				НСтр("ru='Не указано налоговое назначение для номенклатурной группы!';uk='Не зазначено податкове призначення для номенклатурної групи!'")
			);
			Поле = Префикс + "НоменклатурнаяГруппа";
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
			
		КонецЕсли; 
		
	КонецЦикла;
	
КонецПроцедуры

// Проверяет правильность заполнения строк табличной части "Услуги".
//
// Параметры:
// Параметры: 
//  РезультатЗапросаПоУслугам - результат запроса, содержащий данные для проведения и проверки ТЧ Услуги
//  СтруктураШапкиДокумента   - структура, содержащая рексвизиты шапки документа и результаты запроса по шапке
//  Отказ                     - флаг отказа в проведении.
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьТабЧастьУслуги(Отказ)

	ИмяСписка = НСтр("ru='Услуги';uk='Послуги'");

	ВыполнятьПроверку = НЕ Отказ;
	
	Если ВыполнятьПроверку  
	   И УчетнаяПолитика.ПлательщикНалогаНаПрибыльДо2015(Организация, Дата) Тогда
	
	   Для каждого СтрокаТЧ Из Услуги Цикл
		   
			Префикс = "Услуги[" + Формат(СтрокаТЧ.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].";
			
			ХарактерЗатрат = Неопределено;
			НалоговаяАналитикаВПроводке = Неопределено;
			СтруктураСубконто = Новый Структура("Субконто1",  СтрокаТЧ.НоменклатурнаяГруппа);
			НалоговыйУчет.ОпределениеАналитикиНалоговогоУчетаВПроводкахДляЗатрат(
				СтруктураСубконто, 
				СчетЗатрат, 
				ХарактерЗатрат,
				НалоговаяАналитикаВПроводке, 
				, 
				СтрокаТЧ.НоменклатурнаяГруппа.НалоговоеНазначениеВПроизводстве,
				СтрокаТЧ.НалоговоеНазначениеДоходовИЗатрат,
				,
				Дата,
				,
				УчетнаяПолитика.ПлательщикНДС(Организация, Дата)
			);
			
			Если НЕ ЗначениеЗаполнено(НалоговаяАналитикаВПроводке) Тогда
				
				Если ХарактерЗатрат = "Затраты" Тогда
					ТекстСообщения = ОбщегоНазначенияБПКлиентСервер.ПолучитьТекстСообщения("Колонка", "Заполнение", 
						НСтр("ru='Налоговое назначение (доходов и затрат)';uk='Податкове призначення (доходів і витрат)'"),
						СтрокаТЧ.НомерСтроки, ИмяСписка						
					);
					Поле = Префикс + "НалоговоеНазначениеДоходовИЗатрат";
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
				ИначеЕсли ХарактерЗатрат = "Производство" Тогда
					ТекстСообщения = ОбщегоНазначенияБПКлиентСервер.ПолучитьТекстСообщения("Колонка", "Корректность", 
						НСтр("ru='Номенкалатурная группа';uk='Номенкалатурная група'"),
						СтрокаТЧ.НомерСтроки, ИмяСписка, 
						НСтр("ru='Не указано налоговое назначение для номенклатурной группы!';uk='Не зазначено податкове призначення для номенклатурної групи!'")
					);
					Поле = Префикс + "НоменклатурнаяГруппа";
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
				Иначе
					//Для ТЗР определить НалоговоеНазначение можно только в строке, даже если счет затрат в указывается шапке
					СтрокаСообщения = НСтр("ru='Невозможно определить налоговое назначение затрат для указанного счета затрат!';uk='неможливо визначити податкове призначення витрат для вказанного рахунку витрат!'");
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения, ЭтотОбъект, "СчетЗатрат", "Объект");					
				КонецЕсли;
				
			КонецЕсли;
			
			// нельзя по НДС указывать нехоз. деятельность, а по НП - хоз. деятельность
			Если ВыполнятьПроверку  
				И  УчетнаяПолитика.ПлательщикНДС(Организация, Дата) Тогда
				
				НехозДеятельностьНДС = (СтрокаТЧ.НоменклатурнаяГруппа.НалоговоеНазначениеВПроизводстве = Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяНеХозДеятельность);
				НехозДеятельностьНКУ = (НалоговаяАналитикаВПроводке = Справочники.НалоговыеНазначенияАктивовИЗатрат.НКУ_НеХозДеятельность);
				
				Если НЕ СтрокаТЧ.НоменклатурнаяГруппа.НалоговоеНазначениеВПроизводстве = НалоговаяАналитикаВПроводке
					  И НехозДеятельностьНДС <> НехозДеятельностьНКУ Тогда 
					ТекстСообщения = ОбщегоНазначенияБПКлиентСервер.ПолучитьТекстСообщения("Колонка", "Корректность", 
						НСтр("ru='Налоговое назначение (НДС)';uk='Податкове призначення (ПДВ)'"),
						СтрокаТЧ.НомерСтроки, ИмяСписка, 
						НСтр("ru='Ошибочно указано нехозяйственное налоговое назначение (НДС) и одновременно хозяйственную деятельность по затратам (и наоборот)!';uk='Помилково вказане негосподарське податкове призначення (ПДВ) і одночасно господарську діяльність за витратами (і навпаки)!'")
					);
					Поле = Префикс + "НалоговоеНазначение";
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект");
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;	
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиУслуги()

#КонецЕсли