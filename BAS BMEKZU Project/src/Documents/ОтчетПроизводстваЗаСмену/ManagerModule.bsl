#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Заполняет счета учета номенклатуры в табличной части документа
//
Процедура ЗаполнитьСчетаУчетаВТабличнойЧасти(Объект, ИмяТабличнойЧасти) Экспорт

	ТабличнаяЧасть = Объект[ИмяТабличнойЧасти];
	
	ДанныеОбъекта = Новый Структура("Дата, Организация, Склад");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
	СоответствиеСчетовУчета = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаУчетаСпискаНоменклатуры(
		ДанныеОбъекта.Организация, ОбщегоНазначения.ВыгрузитьКолонку(ТабличнаяЧасть, "Номенклатура", Истина), ДанныеОбъекта.Склад, ДанныеОбъекта.Дата);
	
	Для каждого СтрокаТабличнойЧасти Из ТабличнаяЧасть Цикл
		СчетаУчета = СоответствиеСчетовУчета.Получить(СтрокаТабличнойЧасти.Номенклатура);
		ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(ДанныеОбъекта, СтрокаТабличнойЧасти, ИмяТабличнойЧасти, СчетаУчета);
	КонецЦикла;

КонецПроцедуры

// Заполняет счета учета номенклатуры в строке табличной части документа
//
// Параметры:
//  ДанныеОбъекта         - структура данных объекта, используемых при заполнении счетов учета (вид операции,
//                          вид договора контрагента, признак комиссионной торговли и т.п.)
//  СтрокаТабличнойЧасти  - строка табличной части документа
//  ИмяТабличнойЧасти     - имя табличной части документа
//  СведенияОНоменклатуре - структура сведений о номенклатуре, либо стуктура счетов учета
//
Процедура ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(ДанныеОбъекта, СтрокаТабличнойЧасти, ИмяТабличнойЧасти, СведенияОНоменклатуре) Экспорт

	Если СведенияОНоменклатуре = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если СведенияОНоменклатуре.Свойство("СчетаУчета") Тогда
		// СведенияОНоменклатуре - структура сведений номенклатуры
		СчетаУчета = СведенияОНоменклатуре.СчетаУчета;
	ИначеЕсли СведенияОНоменклатуре.Свойство("СчетУчета") Тогда
		// СведенияОНоменклатуре - структура счетов учета номенклатуры
		СчетаУчета = СведенияОНоменклатуре;
	Иначе
		Возврат;
	КонецЕсли;
	
	Если ИмяТабличнойЧасти = "Услуги" Тогда
		
		Если ЗначениеЗаполнено(СчетаУчета.СчетУчетаБУ) Тогда
			СтрокаТабличнойЧасти.Счет		= СчетаУчета.СчетУчетаБУ;
			СтрокаТабличнойЧасти.Субконто1	= СчетаУчета.СубконтоБУ1;
			СтрокаТабличнойЧасти.Субконто2	= СчетаУчета.СубконтоБУ2;
			СтрокаТабличнойЧасти.Субконто3	= СчетаУчета.СубконтоБУ3;
		КонецЕсли;
		
	ИначеЕсли ИмяТабличнойЧасти = "Материалы" Тогда
			
		Если ЗначениеЗаполнено(СчетаУчета.СчетУчетаБУ) Тогда
			СтрокаТабличнойЧасти.Счет = СчетаУчета.СчетУчетаБУ;
		КонецЕсли;
		Если ЗначениеЗаполнено(СчетаУчета.НалоговоеНазначение) Тогда
			СтрокаТабличнойЧасти.НалоговоеНазначение = СчетаУчета.НалоговоеНазначение;
		КонецЕсли;
		Если ЗначениеЗаполнено(СчетаУчета.НалоговоеНазначениеДоходовИЗатрат) Тогда
			СтрокаТабличнойЧасти.НалоговоеНазначениеДоходовИЗатрат = СчетаУчета.НалоговоеНазначениеДоходовИЗатрат;
		КонецЕсли;
		
	Иначе
		
		Если ЗначениеЗаполнено(СчетаУчета.СчетУчетаБУ) Тогда
			СтрокаТабличнойЧасти.Счет = СчетаУчета.СчетУчетаБУ;
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

// Заполняет табличную часть Материалы на основании данных табличных частей Продукция и Услуги.
// Процедура добавляет строки, не очищая табличную часть перед заполнением.
//
// Параметры:
//  Материалы - ДокументТабличнаяЧасть.ОтчетПроизводстваЗаСмену.Материалы - заполняемая табличная часть.
//              Допускается передавать соответствующие данные формы 
//              или таблицу значений со совпадающей структурой.
//  Продукция - ТаблицаЗначений - структура таблицы совпадает со структурой одноименной табличной части
//  Услуги    - ТаблицаЗначений - структура таблицы совпадает со структурой одноименной табличной части
//  Организация - СправочникСсылка.Организации, 
//  Склад - СправочникСсылка.Склады - используются для заполнения счетов учета номенклатуры
// 
Процедура ЗаполнитьМатериалыПоПродукцииУслугам(Материалы, Продукция, Услуги, Организация, Склад) Экспорт
	
	// Получим данные о сырье для заполнения табличной части
	Запрос = Новый Запрос();
	Запрос.Параметры.Вставить("Продукция", Продукция);
	Запрос.Параметры.Вставить("Услуги",    Услуги);
	
	Запрос.Текст = 
	// Исходные данные
	"ВЫБРАТЬ
	|	Продукция.НоменклатурнаяГруппа,
	|	Продукция.Спецификация,
	|	Продукция.Количество,
	|	Продукция.Коэффициент
	|ПОМЕСТИТЬ Продукция
	|ИЗ
	|	&Продукция КАК Продукция
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Услуги.НоменклатурнаяГруппа,
	|	Услуги.Спецификация,
	|	Услуги.Количество,
	|	1 КАК Коэффициент
	|ПОМЕСТИТЬ Услуги
	|ИЗ
	|	&Услуги КАК Услуги
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Продукция.НоменклатурнаяГруппа,
	|	Продукция.Спецификация,
	|	Продукция.Количество КАК КоличествоПродукции,
	|	Продукция.Коэффициент
	|ПОМЕСТИТЬ Выпуск
	|ИЗ
	|	Продукция КАК Продукция
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Услуги.НоменклатурнаяГруппа,
	|	Услуги.Спецификация,
	|	Услуги.Количество,
	|	Услуги.Коэффициент
	|ИЗ
	|	Услуги КАК Услуги"
	+ ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета()
	// Данные о расходе сырья
	+ УправлениеПроизводством.ТекстЗапросаВременнаяТаблицаЗатратыСырья()
	// Преобразуем в формат получателя
	+ 
	"ВЫБРАТЬ
	|	ЗатратыСырья.НоменклатурнаяГруппа,
	|	ЗатратыСырья.НоменклатурнаяГруппа.Наименование КАК НоменклатурнаяГруппаПредставление,
	|	ЗатратыСырья.Номенклатура,
	|	ЗатратыСырья.Номенклатура.Наименование КАК НоменклатураПредставление,
	|	СУММА(ЗатратыСырья.Количество) КАК Количество,
	|	ЗатратыСырья.ЕдиницаИзмерения,
	|	ЗатратыСырья.Коэффициент КАК Коэффициент,
	|	ЗатратыСырья.СтатьяЗатрат
	|ИЗ
	|	ЗатратыСырья КАК ЗатратыСырья
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗатратыСырья.Номенклатура,
	|	ЗатратыСырья.Номенклатура.Наименование,
	|	ЗатратыСырья.НоменклатурнаяГруппа,
	|	ЗатратыСырья.НоменклатурнаяГруппа.Наименование,
	|	ЗатратыСырья.ЕдиницаИзмерения,
	|	ЗатратыСырья.Коэффициент,
	|	ЗатратыСырья.СтатьяЗатрат
	|
	|УПОРЯДОЧИТЬ ПО
	|	НоменклатурнаяГруппаПредставление,
	|	НоменклатураПредставление";
	
	ТаблицаМатериалов = Запрос.Выполнить().Выгрузить();
	
	СоответствиеСчетовУчета = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаУчетаСпискаНоменклатуры(
		Организация,
		ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаМатериалов, "Номенклатура", Истина),
		Склад);
	
	Для Каждого СтрокаТаблицы Из ТаблицаМатериалов Цикл
		
		НоваяСтрока = Материалы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
		
		СчетаУчета	= СоответствиеСчетовУчета.Получить(НоваяСтрока.Номенклатура);
		Если СчетаУчета <> Неопределено Тогда
			НоваяСтрока.Счет = СчетаУчета.СчетУчетаБУ;
			НоваяСтрока.НалоговоеНазначение = СчетаУчета.НалоговоеНазначение;
			НоваяСтрока.НалоговоеНазначениеДоходовИЗатрат = СчетаУчета.НалоговоеНазначениеДоходовИЗатрат;
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#Область ПроцедурыИФункцииПечати

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт

	// Накладная на передачу готовой продукции
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "Накладная";
	КомандаПечати.Представление = НСтр("ru='Накладная на передачу готовой продукции';uk='Накладна на передачу готової продукції'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечати";
	
	// Реестр документов
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "Реестр";
	КомандаПечати.Представление = НСтр("ru='Реестр документов';uk='Реєстр документів'");
	КомандаПечати.ЗаголовокФормы= НСтр("ru='Реестр документов ""Отчет производства за смену""';uk='Реєстр документів ""Звіт виробництва за зміну""'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечатиРеестраДокументов";
	КомандаПечати.СписокФорм    = "ФормаСписка";
	КомандаПечати.Порядок       = 100;
	
	//ИНАГРО ++
	// Требование-накладная (Ф.М-11)
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "М11";
	КомандаПечати.Представление = НСтр("ru='Требование-накладная (ф.M-11)';uk='Вимога-накладна (ф.M-11)'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечати";
	КомандаПечати.СписокФорм    = "ФормаДокумента,ФормаСписка,ФормаВыбора";
	
	// Требование-накладная 
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ТребованиеНакладная";
	КомандаПечати.Представление = НСтр("ru='Требование-накладная';uk='Вимога-накладна'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечати";
	КомандаПечати.СписокФорм    = "ФормаДокумента,ФормаСписка,ФормаВыбора";
	//ИНАГРО --
	
КонецПроцедуры

// Функция формирует табличный документ с печатной формой накладной на передачу
// готовой продукции в места хранения (ф. МХ-18).
//
// Параметры:
//  Нет.
//
// Возвращаемое значение:
//  Табличный документ - печатная форма накладной.
//
Функция ПечатьНакладнаяНаВыпуск(МассивОбъектов, ОбъектыПечати, ПараметрыВывода)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ОтчетПроизводстваЗаСмену_НакладнаяНаВыпуск";
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ОтчетПроизводстваЗаСмену.ПФ_MXL_НакладнаяНаВыпуск");
	
	// печать производится на языке, указанном в настройках пользователя
	КодЯзыкаПечать = ПараметрыВывода.КодЯзыкаДляМногоязычныхПечатныхФорм;;
	Макет.КодЯзыкаМакета = КодЯзыкаПечать;
	
	ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	
	ПервыйДокумент = Истина;
	
	Для Каждого Ссылка Из МассивОбъектов Цикл
		
		Если Не ПервыйДокумент Тогда
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ПервыйДокумент = Ложь;
		// Запомним номер строки, с которой начали выводить текущий документ.
		НомерСтрокиНачало = ТабДокумент.ВысотаТаблицы + 1;
		
		ДопКолонка = Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
		Если ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул Тогда
			ВыводитьКоды    = Истина;
			Колонка         = "Артикул";
			ТекстКодАртикул = "Артикул";
		ИначеЕсли ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Код Тогда
			ВыводитьКоды    = Истина;
			Колонка         = "Код";
			ТекстКодАртикул = "Код";
		Иначе
			ВыводитьКоды    = Ложь;
			Колонка         = "";
			ТекстКодАртикул = "Код";
		КонецЕсли;

		Если ВыводитьКоды Тогда
			ОбластьШапки  = "ШапкаСКодом";
			ОбластьСтроки = "СтрокаСКодом";
		Иначе
			ОбластьШапки  = "ШапкаТаблицы";
			ОбластьСтроки = "Строка";
		КонецЕсли;
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ТекущийДокумент", Ссылка);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Номер,
		|	Дата,
		|	Ответственный.ФизическоеЛицо.Наименование КАК Отпустил,
		|	Организация,
		|	Организация КАК Поставщик,
		|	Склад,
		|	ПодразделениеОрганизации КАК Подразделение
		|ИЗ
		|	Документ.ОтчетПроизводстваЗаСмену КАК ОтчетПроизводстваЗаСмену,
		|	Константы
		|
		|ГДЕ
		|	ОтчетПроизводстваЗаСмену.Ссылка = &ТекущийДокумент";
		Шапка = Запрос.Выполнить().Выбрать();
		Шапка.Следующий();

		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ТекущийДокумент", Ссылка);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Номенклатура,
		|	Номенклатура.НаименованиеПолное КАК Товар,
		|	Номенклатура.Код КАК Код,
		|	Номенклатура."+ ТекстКодАртикул + " КАК КодАртикул,
		|	Количество,
		|	ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|   НомерСтроки
		|ИЗ 
		|	(ВЫБРАТЬ
		|		Номенклатура         КАК Номенклатура,
		|		ЕдиницаИзмерения     КАК ЕдиницаИзмерения,
		|		СУММА(Количество)    КАК Количество,
		|		МИНИМУМ(НомерСтроки) КАК НомерСтроки
		|	ИЗ
		|		Документ.ОтчетПроизводстваЗаСмену.Продукция КАК ОтчетПроизводстваЗаСмену
		|	ГДЕ
		|		ОтчетПроизводстваЗаСмену.Ссылка = &ТекущийДокумент
		|	СГРУППИРОВАТЬ ПО
		|		Номенклатура,
		|		ЕдиницаИзмерения
		|	) КАК ВложенныйЗапросПоТоварам
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки";
		ЗапросТовары = Запрос.Выполнить().Выгрузить();

		ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
		ОбластьМакета.Параметры.ТекстЗаголовка = ОбщегоНазначенияБПВызовСервера.СформироватьЗаголовокДокумента(Шапка, НСтр("ru='Накладная на передачу готовой продукции';uk='Накладна на передачу готової продукції'",КодЯзыкаПечать),КодЯзыкаПечать);

		ТабДокумент.Вывести(ОбластьМакета);

		СведенияОПоставщике = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Шапка.Поставщик, Шапка.Дата,,,КодЯзыкаПечать);

		ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");
		ОбластьМакета.Параметры.Заполнить(Шапка);
		ОбластьМакета.Параметры.ПредставлениеПоставщика = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОПоставщике, "ПолноеНаименование,",,КодЯзыкаПечать);	
		ОбластьМакета.Параметры.РеквизитыПоставщика =     ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОПоставщике, "ЮридическийАдрес,Телефоны,/,КодПоЕДРПОУ,КодПоДРФО,",,КодЯзыкаПечать);
	    ТабДокумент.Вывести(ОбластьМакета);
		
		// Выводим дополнительно информацию о договоре и сделке
		СписокДополнительныхПараметров = "Склад,Подразделение,";
		МассивСтруктурСтрок = ОбщегоНазначенияБПВызовСервера.ДополнительнаяИнформация(Шапка,СписокДополнительныхПараметров,КодЯзыкаПечать);
		ОбластьМакета = Макет.ПолучитьОбласть("ДопИнформация");
	    Для каждого СтруктураСтроки Из МассивСтруктурСтрок Цикл
			ОбластьМакета.Параметры.Заполнить(СтруктураСтроки);
			ТабДокумент.Вывести(ОбластьМакета);
		КонецЦикла;
		
		
		// Вывести табличную часть
		ОбластьМакета = Макет.ПолучитьОбласть(ОбластьШапки);
		Если ВыводитьКоды Тогда
			ОбластьМакета.Параметры.ИмяКодАртикул = ТекстКодАртикул;
		КонецЕсли;
		ТабДокумент.Вывести(ОбластьМакета);

		ОбластьМакета = Макет.ПолучитьОбласть(ОбластьСтроки);
		Для каждого ВыборкаСтрокТовары Из ЗапросТовары Цикл 

			Если НЕ ЗначениеЗаполнено(ВыборкаСтрокТовары.Номенклатура) Тогда
				Сообщить(НСтр("ru='В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.';uk='В одному з рядків не заповнене значення номенклатури - рядок під час друку буде пропущений.'"), СтатусСообщения.Важное);
				Продолжить;
			КонецЕсли;

			ОбластьМакета.Параметры.Заполнить(ВыборкаСтрокТовары);
			ОбластьМакета.Параметры.Товар 		= СокрЛП(ВыборкаСтрокТовары.Товар);
			ОбластьМакета.Параметры.НомерСтроки = ЗапросТовары.Индекс(ВыборкаСтрокТовары) + 1;
			ТабДокумент.Вывести(ОбластьМакета);

		КонецЦикла;

		// Вывести Итого
		ОбластьМакета = Макет.ПолучитьОбласть("Итого");
		ТабДокумент.Вывести(ОбластьМакета);

		// Вывести подписи
		ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
		ОбластьМакета.Параметры.Заполнить(Шапка);
		ТабДокумент.Вывести(ОбластьМакета);

	
		// В табличном документе зададим имя области, в которую был 
		// выведен объект. Нужно для возможности печати покомплектно.
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабДокумент, 
			НомерСтрокиНачало, ОбъектыПечати, Ссылка);
		
	КонецЦикла;
	
	Возврат ТабДокумент;	
	
КонецФункции

// Сформировать печатные формы объектов
//
// ВХОДЯЩИЕ:
//   ИменаМакетов    - Строка    - Имена макетов, перечисленные через запятую
//   МассивОбъектов  - Массив    - Массив ссылок на объекты которые нужно распечатать
//   ПараметрыПечати - Структура - Структура дополнительных параметров печати
//
// ИСХОДЯЩИЕ:
//   КоллекцияПечатныхФорм - Таблица значений - Сформированные табличные документы
//   ПараметрыВывода       - Структура        - Параметры сформированных табличных документов
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт

	ПараметрыВывода.ДоступнаПечатьПоКомплектно = Истина;

	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "Накладная") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "Накладная", НСтр("ru='Накладная на передачу готовой продукции';uk='Накладна на передачу готової продукції'"),
			ПечатьНакладнаяНаВыпуск(МассивОбъектов, ОбъектыПечати, ПараметрыВывода), , "Документ.ОтчетПроизводстваЗаСмену.ПФ_MXL_НакладнаяНаВыпуск", , Истина);
	КонецЕсли;
		
	//ИНАГРО ++
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "М11") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "М11", НСтр("ru='Требование-накладная (ф.M-11)';uk='Вимога-накладна (ф.M-11)'"), 
		ПечатьМ11(МассивОбъектов, ОбъектыПечати, ПараметрыВывода), , , , Истина);
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ТребованиеНакладная") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "ТребованиеНакладная", НСтр("ru='Требование-накладная';uk='Вимога-накладна'"), 
		ПечатьТребованиеНакладная(МассивОбъектов, ОбъектыПечати, ПараметрыВывода), , "Документ.ОтчетПроизводстваЗаСмену.ПФ_MXL_ИНАГРО_ТребованиеНакладная", , Истина);
	КонецЕсли;
	//ИНАГРО --
	
КонецПроцедуры

Функция ПолучитьДополнительныеРеквизитыДляРеестра() Экспорт
	
	Результат = Новый Структура("Информация", "ПодразделениеОрганизации");
	
	Возврат Результат;
	
КонецФункции

// Функция формирует печатную форму М-11
Функция ПечатьМ11(МассивОбъектов, ОбъектыПечати, ПараметрыВывода) // ИНАГРО
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТабДокумент = Новый ТабличныйДокумент;		
	ПервыйДокумент = Истина;
	Для каждого Ссылка Из МассивОбъектов Цикл
		Если Не ПервыйДокумент Тогда
			ТабДокумент.ВывестиВертикальныйРазделительСтраниц();				
		КонецЕсли; 
		ПервыйДокумент = Ложь;	
		
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент"	, Ссылка);
	Запрос.УстановитьПараметр("НаДату"         	, Ссылка.Дата);
	Запрос.УстановитьПараметр("Организация"      , Ссылка.Организация);
	Запрос.УстановитьПараметр("ГлавныйБухгалтер" , Перечисления.ОтветственныеЛицаОрганизаций.ГлавныйБухгалтер);
	Запрос.УстановитьПараметр("ЧерезКого"        , Ссылка.ИНАГРО_ЧерезКого);  
	Запрос.УстановитьПараметр("ОтпускРазрешил"   , Ссылка.ИНАГРО_ОтпускРазрешил);
	Запрос.УстановитьПараметр("Отпустил"         , Ссылка.ИНАГРО_Отпустил);
	Запрос.УстановитьПараметр("Кому"         	 , Ссылка.ИНАГРО_Кому);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Док.Номер                          				КАК НомерДокумента,
	|	Док.Дата                           				КАК ДатаДокумента,
	|	Док.Организация                    				КАК Организация,
	|	Док.Организация.НаименованиеПолное 				КАК ПредставлениеОрганизации,
	|	Док.Склад                          				КАК Склад,
	|	КодыОрганизации.НалоговаяИнспекция.ЕДРПОУ       КАК КодПоЕДРПОУ,
	|	Док.ИНАГРО_Основание               				КАК Основание,  
	|	ФИОКому.Фамилия + "" ""
	|		+ ФИОКому.Имя + "" ""
	|		+ ФИОКому.Отчество                                 КАК Кому,   
	|	ФИОЧерезКого.Фамилия + "" ""
	|		+ ФИОЧерезКого.Имя + "" ""
	|		+ ФИОЧерезКого.Отчество                                 КАК ЧерезКого,   
	|	ФИОЧерезКого.Фамилия + "" ""
	|		+ ПОДСТРОКА(ФИОЧерезКого.Имя, 1, 1) + "". ""
	|		+ ПОДСТРОКА(ФИОЧерезКого.Отчество, 1, 1) + "".""        КАК ЧерезКогоФИО,   
	|	ФИООтпускРазрешил.Фамилия + "" ""
	|		+ ПОДСТРОКА(ФИООтпускРазрешил.Имя, 1, 1) + "". ""
	|		+ ПОДСТРОКА(ФИООтпускРазрешил.Отчество, 1, 1) + "".""   КАК ОтпускРазрешил,   
	|	ФИООтпустил.Фамилия + "" ""
	|		+ ПОДСТРОКА(ФИООтпустил.Имя, 1, 1) + "". ""
	|		+ ПОДСТРОКА(ФИООтпустил.Отчество, 1, 1) + "".""         КАК Отпустил,        
	|	ФИОГлавныйБухгалтер.Фамилия + "" ""
	|		+ ПОДСТРОКА(ФИОГлавныйБухгалтер.Имя, 1, 1) + "". ""
	|		+ ПОДСТРОКА(ФИОГлавныйБухгалтер.Отчество, 1, 1) + ""."" КАК ГлавныйБухгалтер
	|ИЗ
	|	Документ.ОтчетПроизводстваЗаСмену КАК Док                                                     
	|		ЛЕВОЕ СОЕДИНЕНИЕ 
	|			РегистрСведений.КодыОрганизации.СрезПоследних(
	|			                &НаДату, ) КАК КодыОрганизации
	|		ПО Док.Организация = КодыОрганизации.Организация
	|		ЛЕВОЕ СОЕДИНЕНИЕ 
	|			РегистрСведений.ФИОФизическихЛиц.СрезПоследних(
	|			                &НаДату,
	|			                ФизическоеЛицо = &Кому) КАК ФИОКому
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ 
	|			РегистрСведений.ФИОФизическихЛиц.СрезПоследних(
	|			                &НаДату,
	|			                ФизическоеЛицо = &ЧерезКого) КАК ФИОЧерезКого
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ
	|			РегистрСведений.ФИОФизическихЛиц.СрезПоследних(
	|			                &НаДату,
	|			                ФизическоеЛицо = &ОтпускРазрешил) КАК ФИООтпускРазрешил
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ 
	|			РегистрСведений.ФИОФизическихЛиц.СрезПоследних(
	|			                &НаДату,
	|			                ФизическоеЛицо = &Отпустил) КАК ФИООтпустил
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ 
	|			РегистрСведений.ФИОФизическихЛиц.СрезПоследних(
	|		                    &НаДату,
	|		                    ФизическоеЛицо В
	|		                        (ВЫБРАТЬ
	|		                            ОтветственныеЛица.ФизическоеЛицо
	|		                        ИЗ
	|		                            РегистрСведений.ОтветственныеЛицаОрганизаций.СрезПоследних(
	|		                                            &НаДату,
	|		                                            СтруктурнаяЕдиница = &Организация
	|		                                            И ОтветственноеЛицо = &ГлавныйБухгалтер) КАК ОтветственныеЛица)
	|		                    ) КАК ФИОГлавныйБухгалтер
	|		ПО (ИСТИНА)
	|ГДЕ
	|	Док.Ссылка = &ТекущийДокумент";

	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();
	                            
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ОтчетПроизводстваЗаСмену_М11";
	
	// Вывод заголовка
	Макет = ПолучитьОбщийМакет("ПФ_MXL_UK_М11");
	Область = Макет.ПолучитьОбласть("Шапка");
	Область.Параметры.Заполнить(Шапка);
	Область.Параметры.КодОперации 	 = "Відпуск";
	Область.Параметры.НомерДокумента = ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(Ссылка.Номер);
	СведенияОбОрганизации = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Ссылка.Организация, Ссылка.Дата);
	Область.Параметры.КодПоЕДРПОУ = БухгалтерскийУчетПереопределяемый.ПолучитьКодОрганизации(СведенияОбОрганизации);
		
	ТабДокумент.Вывести(Область);
	
	ВысотаШапки   = ТабДокумент.ВысотаТаблицы;
	ШиринаТаблицы = ТабДокумент.ШиринаТаблицы;
	ТабДокумент.ПовторятьПриПечатиСтроки = ТабДокумент.Область("R" + ВысотаШапки);
	ТабДокумент.ОбластьПечати            = ТабДокумент.Область("C2:C" + ШиринаТаблицы);
	
	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("Материал",                     "Номенклатура");
	СтруктураПолей.Вставить("МатериалНаименование",         "Номенклатура.НаименованиеПолное");
	СтруктураПолей.Вставить("НоменклатурныйНомер",          "Номенклатура.Код");
	СтруктураПолей.Вставить("ЕдиницаИзмеренияНаименование", "ЕдиницаИзмерения");
	СтруктураПолей.Вставить("ЕдиницаИзмеренияКод",          "ЕдиницаИзмерения.Код");
	СтруктураПолей.Вставить("Коэффициент",          		"Коэффициент");
	СтруктураПолей.Вставить("Количество",                   "Количество");

	Область = Макет.ПолучитьОбласть("Строка");
	
	//запрос по табличной части "материалы"	
	Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ТекущийДокумент", Ссылка);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	СУММА(ВложенныйЗапросПоТоварам.Количество) КАК Количество,
		|	ВложенныйЗапросПоТоварам.НомерСтроки,
		|	ВложенныйЗапросПоТоварам.МатериалНаименование,
		|	ВложенныйЗапросПоТоварам.ЕдиницаИзмеренияНаименование,
		|	ВложенныйЗапросПоТоварам.НоменклатурныйНомер,
		|	ВложенныйЗапросПоТоварам.ЕдиницаИзмеренияКод,
		|	ВложенныйЗапросПоТоварам.Коэффициент
		|ИЗ
		|	(ВЫБРАТЬ
		|		ОтчетМатериалы.Номенклатура КАК МатериалНаименование,
		|		ОтчетМатериалы.ЕдиницаИзмерения КАК ЕдиницаИзмеренияНаименование,
		|		СУММА(ОтчетМатериалы.Количество) КАК Количество,
		|		МИНИМУМ(ОтчетМатериалы.НомерСтроки) КАК НомерСтроки,
		|		ОтчетМатериалы.Номенклатура.Код КАК НоменклатурныйНомер,
		|		ОтчетМатериалы.ЕдиницаИзмерения.Код КАК ЕдиницаИзмеренияКод,
		|		ОтчетМатериалы.Коэффициент КАК Коэффициент
		|	ИЗ
		|		Документ.ОтчетПроизводстваЗаСмену.Материалы КАК ОтчетМатериалы
		|	ГДЕ
		|		ОтчетМатериалы.Ссылка = &ТекущийДокумент
		|	
		|	СГРУППИРОВАТЬ ПО
		|		ОтчетМатериалы.Номенклатура,
		|		ОтчетМатериалы.ЕдиницаИзмерения,
		|		ОтчетМатериалы.Номенклатура.Код,
		|		ОтчетМатериалы.ЕдиницаИзмерения.Код,
		|		ОтчетМатериалы.Коэффициент) КАК ВложенныйЗапросПоТоварам
		|
		|СГРУППИРОВАТЬ ПО
		|	ВложенныйЗапросПоТоварам.ЕдиницаИзмеренияНаименование,
		|	ВложенныйЗапросПоТоварам.ЕдиницаИзмеренияКод,
		|	ВложенныйЗапросПоТоварам.НоменклатурныйНомер,
		|	ВложенныйЗапросПоТоварам.МатериалНаименование,
		|	ВложенныйЗапросПоТоварам.НомерСтроки,
		|	ВложенныйЗапросПоТоварам.Коэффициент
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВложенныйЗапросПоТоварам.НомерСтроки";
		
	РезультатЗапроса = Запрос.Выполнить();

	ТаблицаМатериалов = РезультатЗапроса.Выгрузить();
	
	// Поиск сумм списания активов для заполнения Цены и Суммы
	ТаблицаСуммСписания = БухгалтерскийУчетПереопределяемый.ПолучитьСуммуСписанияАктивов(МассивОбъектов, Ссылка.Дата, Ссылка.Дата);
	ТаблицаМатериалов.Колонки.Добавить("СчетПередачи");
	ТаблицаМатериалов.ЗаполнитьЗначения(Ссылка.СчетЗатрат, "СчетПередачи");
	
	ОбластьПодвал   = Макет.ПолучитьОбласть("Подвал");
	ПараметрыПодвал = ОбластьПодвал.Параметры;
	ПараметрыПодвал.Заполнить(Шапка);
	
	КоличествоВТаблице = ТаблицаМатериалов.Количество();
	КоличествоОбработанных = 1;
	// В форме сказано "Кількість найменувань". Будет выводится количество позиций.
	ПараметрыПодвал.ИтогоКоличествоПрописью = ЧислоПрописью(КоличествоВТаблице, "Л=uk_UA;НП=Ложь;НД=Ложь;", ",,,,,,,,0");
															
	// сумму прописью выводим всегда на украинском - печатная форма регламенированная
	ВалютаУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	ПараметрыПодвал.ИтогоСуммаПрописью = ЧислоПрописью(ТаблицаСуммСписания.Итог("Сумма"), "Л=uk_UA; ДП=Ложь", ВалютаУчета.ПараметрыПрописиНаУкраинском);
    
	Для Каждого СтрокаТЧ Из ТаблицаМатериалов Цикл

		Область = Макет.ПолучитьОбласть("Строка");
		Область.Параметры.Заполнить(СтрокаТЧ);
		
		СтрокаСуммСписания =  ТаблицаСуммСписания.Найти(СтрокаТЧ.МатериалНаименование, "Номенклатура");
		Если СтрокаСуммСписания = Неопределено Тогда
			 Область.Параметры.Цена = 0;
			 Область.Параметры.Стоимость = 0;
		 Иначе
			 Цена = ?(СтрокаСуммСписания.Количество = 0, 0, СтрокаСуммСписания.Сумма / СтрокаСуммСписания.Количество * СтрокаТЧ.Коэффициент);
			 Область.Параметры.Цена		 = Цена;
			 Область.Параметры.Стоимость = Цена * СтрокаТЧ.Количество;
		 КонецЕсли;
		 
		Если КоличествоОбработанных = КоличествоВТаблице Тогда
			// Последняя запись. Ее не следует отрывать от подписей.
			
			МассивТаблиц = Новый Массив(2);
			МассивТаблиц[0] = Область;
			МассивТаблиц[1] = ОбластьПодвал;
			
			Если НЕ ТабДокумент.ПроверитьВывод(МассивТаблиц) Тогда
				
				ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				
			КонецЕсли;
			
		КонецЕсли;
		
		ТабДокумент.Вывести(Область);
		КоличествоОбработанных = КоличествоОбработанных + 1;

	КонецЦикла;
	
	ПараметрыПодвал.Получил = ?(ЗначениеЗаполнено(Шапка.ЧерезКого), Шапка.ЧерезКогоФИО, "");  
	
	ТабДокумент.Вывести(ОбластьПодвал);
	КонецЦикла;	
	Возврат ТабДокумент;

КонецФункции // ПечатьМ11()

// Функция формирует печатную форму документа
//
Функция ПечатьТребованиеНакладная(МассивОбъектов, ОбъектыПечати, ПараметрыВывода) // ИНАГРО
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТабДокумент = Новый ТабличныйДокумент;		
	ПервыйДокумент = Истина;
	Для каждого Ссылка Из МассивОбъектов Цикл
		Если Не ПервыйДокумент Тогда
			ТабДокумент.ВывестиВертикальныйРазделительСтраниц();				
		КонецЕсли; 
		ПервыйДокумент = Ложь;	
	
	ДопКолонка = Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
	Если ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул Тогда
		ВыводитьКоды    = Истина;
		Колонка         = "Артикул";
		ТекстКодАртикул = "Артикул";
	ИначеЕсли ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Код Тогда
		ВыводитьКоды    = Истина;
		Колонка         = "Код";
		ТекстКодАртикул = "Код";
	Иначе
		ВыводитьКоды    = Ложь;
		Колонка         = "";
		ТекстКодАртикул = "Код";
	КонецЕсли;
	
	Если ВыводитьКоды Тогда
		ОбластьШапки  = "ШапкаСКодом";
		ОбластьСтроки = "СтрокаСКодом";
	Иначе
		ОбластьШапки  = "ШапкаТаблицы";
		ОбластьСтроки = "Строка";
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТребованиеНакладная.Номер КАК Номер,
	|	ТребованиеНакладная.Дата КАК Дата,
	|	ТребованиеНакладная.Ответственный.ФизическоеЛицо.Наименование КАК Получил,
	|	ТребованиеНакладная.Организация КАК Организация,
	|	ТребованиеНакладная.Организация КАК Поставщик,
	|	ТребованиеНакладная.Склад КАК Склад
	|ИЗ
	|	Документ.ОтчетПроизводстваЗаСмену КАК ТребованиеНакладная
	|ГДЕ
	|	ТребованиеНакладная.Ссылка = &ТекущийДокумент";
	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", Ссылка);
	Запрос.УстановитьПараметр("ПустаяЕдиницаИзмерения", Справочники.КлассификаторЕдиницИзмерения.ПустаяСсылка());
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Номенклатура,
	|	ВЫРАЗИТЬ(Номенклатура.НаименованиеПолное КАК Строка(1000)) КАК Товар,
	|	Номенклатура КАК КодАртикул,
	|	Количество,
	|	ЕдиницаИзмерения.Наименование КАК ЕдиницаИзмерения,
	|   НомерСтроки,
	|	1 КАК ID
	|ИЗ 
	|	(ВЫБРАТЬ
	|		Номенклатура         КАК Номенклатура,
	|		ЕдиницаИзмерения  КАК ЕдиницаИзмерения,
	|		СУММА(Количество)    КАК Количество,
	|		МИНИМУМ(НомерСтроки) КАК НомерСтроки
	|	ИЗ
	|		Документ.ОтчетПроизводстваЗаСмену.Материалы КАК Материалы
	|
	|	ГДЕ
	|		Материалы.Ссылка = &ТекущийДокумент
	|	СГРУППИРОВАТЬ ПО
	|		Номенклатура,
	|		ЕдиницаИзмерения
	|	) КАК ВложенныйЗапросПоТоварам
	|
	|УПОРЯДОЧИТЬ ПО
	|	ID,
	|	НомерСтроки";
	ЗапросТовары = Запрос.Выполнить().Выгрузить();

	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ОтчетПроизводстваЗаСмену_ТН";
	
	// Вывод заголовка
	Макет = ПолучитьМакет("ПФ_MXL_ИНАГРО_ТребованиеНакладная");
	
	// печать производится на языке, указанном в настройках
	КодЯзыкаПечать = ПараметрыВывода.КодЯзыкаДляМногоязычныхПечатныхФорм;
	Макет.КодЯзыкаМакета = КодЯзыкаПечать;


	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	ОбластьМакета.Параметры.ТекстЗаголовка = ОбщегоНазначенияБПВызовСервера.СформироватьЗаголовокДокумента(Шапка, НСтр("ru='Требование-накладная';uk='Вимога-накладна'",КодЯзыкаПечать),КодЯзыкаПечать);

	ТабДокумент.Вывести(ОбластьМакета);

	СведенияОПоставщике = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Шапка.Поставщик, Шапка.Дата,,,КодЯзыкаПечать);

	ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ОбластьМакета.Параметры.ПредставлениеПоставщика = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОПоставщике, "ПолноеНаименование,",,КодЯзыкаПечать);	
	ОбластьМакета.Параметры.РеквизитыПоставщика =     ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОПоставщике, "ЮридическийАдрес,Телефоны,/,КодПоЕДРПОУ,КодПоДРФО,",,КодЯзыкаПечать);
    ТабДокумент.Вывести(ОбластьМакета);
	
	// Выводим дополнительно информацию о договоре и сделке
	СписокДополнительныхПараметров = "Склад,";
	МассивСтруктурСтрок = ОбщегоНазначенияБПВызовСервера.ДополнительнаяИнформация(Шапка,СписокДополнительныхПараметров,КодЯзыкаПечать);
	ОбластьМакета = Макет.ПолучитьОбласть("ДопИнформация");
    Для каждого СтруктураСтроки Из МассивСтруктурСтрок Цикл
		ОбластьМакета.Параметры.Заполнить(СтруктураСтроки);
		ТабДокумент.Вывести(ОбластьМакета);
	КонецЦикла;
	
	// Вывести табличную часть
	ОбластьМакета = Макет.ПолучитьОбласть(ОбластьШапки);
    Если ВыводитьКоды Тогда
		ОбластьМакета.Параметры.ИмяКолонкиКодов = ТекстКодАртикул;
	КонецЕсли;
	
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть(ОбластьСтроки);
	Для каждого ВыборкаСтрокТовары Из ЗапросТовары Цикл 

		Если НЕ ЗначениеЗаполнено(ВыборкаСтрокТовары.Номенклатура) Тогда
			Сообщить(НСтр("ru='В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.';uk='В одному з рядків не заповнене значення номенклатури - рядок під час друку буде пропущений.'"), СтатусСообщения.Важное);
			Продолжить;
		КонецЕсли;

		ОбластьМакета.Параметры.Заполнить(ВыборкаСтрокТовары);
		ОбластьМакета.Параметры.Товар 		= СокрЛП(ВыборкаСтрокТовары.Товар);
		ОбластьМакета.Параметры.НомерСтроки = ЗапросТовары.Индекс(ВыборкаСтрокТовары) + 1;
		ТабДокумент.Вывести(ОбластьМакета);

	КонецЦикла;

	// Вывести Итого
	ОбластьМакета = Макет.ПолучитьОбласть("Итого");
	ТабДокумент.Вывести(ОбластьМакета);

	// Вывести подписи
	ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ТабДокумент.Вывести(ОбластьМакета);
	КонецЦикла;
	Возврат ТабДокумент;
	
КонецФункции // ПечатьТребованиеНакладная()

#КонецОбласти

#КонецЕсли