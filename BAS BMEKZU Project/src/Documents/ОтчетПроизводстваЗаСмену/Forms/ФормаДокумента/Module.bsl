#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	
	Если Параметры.Ключ.Пустая() Тогда
		ПодготовитьФормуНаСервере();
		УстановитьСостояниеДокумента();
	КонецЕсли;

	// Активизировать первую непустую табличную часть
	СписокТабличныхЧастей = Новый СписокЗначений;
	СписокТабличныхЧастей.Добавить("Продукция",			"Продукция");
	СписокТабличныхЧастей.Добавить("Услуги",			"Услуги");
	СписокТабличныхЧастей.Добавить("ВозвратныеОтходы",	"ВозвратныеОтходы");
	СписокТабличныхЧастей.Добавить("Материалы",			"Материалы");
	
	АктивизироватьТабличнуюЧасть = ОбщегоНазначенияБПВызовСервера.ПолучитьПервуюНепустуюВидимуюТабличнуюЧасть(
		ЭтаФорма, СписокТабличныхЧастей);
	ОбщегоНазначенияБПВызовСервера.АктивизироватьЭлементФормы(ЭтаФорма, АктивизироватьТабличнуюЧасть);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)

	Если ИсточникВыбора.ИмяФормы = "Обработка.ПодборНоменклатуры.Форма.Форма" Тогда
		ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение, ИсточникВыбора.ИмяТаблицы);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)

	ОбщегоНазначенияБПКлиент.ОбработкаОповещенияФормыДокумента(ЭтаФорма, Объект.Ссылка, ИмяСобытия, Параметр, Источник);

КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом

	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	ПодготовитьФормуНаСервере();
	УстановитьСостояниеДокумента();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	ЗаполнитьДобавленныеКолонкиТаблиц();
	УстановитьСостояниеДокумента();

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

#КонецОбласти	//ОбработчикиСобытийФормы

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)

	Если НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДатаДокумента) Тогда
		// Изменение времени не влияет на поведение документа.
		ТекущаяДатаДокумента = Объект.Дата;
		Возврат;
	КонецЕсли;

	// Общие проверки условий по датам.
	ТребуетсяВызовСервера = ОбщегоНазначенияБПКлиент.ТребуетсяВызовСервераПриИзмененииДатыДокумента(Объект.Дата, 
		ТекущаяДатаДокумента);
		
	// Если определили, что изменение даты может повлиять на какие-либо параметры, 
	// то передаем обработку на сервер.
	Если ТребуетсяВызовСервера Тогда
		ДатаПриИзмененииНаСервере();
	КонецЕсли;
	
	// Запомним новую дату документа.
	ТекущаяДатаДокумента = Объект.Дата;
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)

	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		ОрганизацияПриИзмененииНаСервере();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СкладПриИзменении(Элемент)

	Если ЗначениеЗаполнено(Объект.Склад) Тогда
		СкладПриИзмененииНаСервере();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(
		Элемент.ТекстРедактирования,
		ЭтотОбъект,
		"Объект.Комментарий"
	);

КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьМатериалыПриИзменении(Элемент)
	
	УстановитьВидимость();
	
КонецПроцедуры

&НаКлиенте
Процедура СчетЗатратПриИзменении(Элемент)
	
	УстановитьФункциональныеОпцииФормы();
	ЗаполнитьДобавленныеКолонкиТаблиц();
	
КонецПроцедуры

#КонецОбласти	//ОбработчикиСобытийЭлементовШапкиФормы

#Область ОбработчикиСобытийЭлементовТаблицыФормыПродукция

&НаКлиенте
Процедура ПродукцияПриИзменении(Элемент)

	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ПродукцияНоменклатураПриИзменении(Элемент)

	ТекущиеДанные = Элементы.Продукция.ТекущиеДанные;
	
	ДанныеСтрокиТаблицы = Новый Структура(
		"Номенклатура, ЕдиницаИзмерения, Коэффициент, Количество,
		|ПлановаяСтоимость, СуммаПлановая,
		|Спецификация, Счет, НоменклатурнаяГруппа");
		
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, ТекущиеДанные);
	
	ДанныеОбъекта = Новый Структура("Дата, Организация, Склад");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
	ПродукцияНоменклатураПриИзмененииНаСервере(ДанныеСтрокиТаблицы, ДанныеОбъекта);
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтрокиТаблицы);

КонецПроцедуры

&НаКлиенте
Процедура ПродукцияЕдиницаИзмеренияПриИзменении(Элемент)

	ТекущиеДанные = Элементы.Продукция.ТекущиеДанные;
	ДанныеСтрокиТаблицы = Новый Структура("Номенклатура, ЕдиницаИзмерения, Коэффициент, ПлановаяСтоимость, СуммаПлановая, Количество");
	
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, ТекущиеДанные);
	ЕдиницаИзмеренияПриИзмененииНаСервере(ДанныеСтрокиТаблицы, "Продукция");
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтрокиТаблицы);

КонецПроцедуры

&НаКлиенте
Процедура ПродукцияКоличествоПриИзменении(Элемент)

	ТекущиеДанные = Элементы.Продукция.ТекущиеДанные;
	
	ОбработкаТабличныхЧастейКлиентСервер.ПересчитатьПлановуюСумму(ТекущиеДанные);

КонецПроцедуры

&НаКлиенте
Процедура ПродукцияПлановаяСтоимостьПриИзменении(Элемент)

	ТекущиеДанные = Элементы.Продукция.ТекущиеДанные;
	
	ОбработкаТабличныхЧастейКлиентСервер.ПересчитатьПлановуюСумму(ТекущиеДанные);

КонецПроцедуры

&НаКлиенте
Процедура ПродукцияСуммаПлановаяПриИзменении(Элемент)

	ТекущиеДанные = Элементы.Продукция.ТекущиеДанные;
	
	Если ТекущиеДанные.Количество <> 0 Тогда
		ТекущиеДанные.ПлановаяСтоимость = ТекущиеДанные.СуммаПлановая / ТекущиеДанные.Количество;
	КонецЕсли;

КонецПроцедуры

#КонецОбласти	//ОбработчикиСобытийЭлементовТаблицыФормыПродукция

#Область ОбработчикиСобытийЭлементовТаблицыФормыУслуги

&НаКлиенте
Процедура УслугиПриИзменении(Элемент)

	ИзменитьПараметрыВыбораПолейСубконтоТаблицыУслуги(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура УслугиПередНачаломИзменения(Элемент, Отказ)

	ТекущиеДанные = Элементы.Услуги.ТекущиеДанные;
	
	ИзменитьПараметрыВыбораПолейСубконтоТаблицыУслуги(ЭтаФорма);
	УстановитьЗаголовкиИДоступностьСубконто(ЭтаФорма, ТекущиеДанные.Счет, "Услуги", "", Истина, Истина);

КонецПроцедуры

&НаКлиенте
Процедура УслугиНоменклатураПриИзменении(Элемент)

	ТекущиеДанные	= Элементы.Услуги.ТекущиеДанные;
	
	ДанныеСтрокиТаблицы	= Новый Структура(
		"Номенклатура, НалоговоеНазначениеДоходовИЗатрат, Количество,
		|ПлановаяСтоимость, СуммаПлановая,
		|Счет, Субконто1, Субконто2, Субконто3,
		|Спецификация, НоменклатурнаяГруппа,
		|Субконто1Доступность, Субконто2Доступность, Субконто3Доступность, НалоговоеНазначениеДоходовИЗатратТолькоПросмотр, НалоговоеНазначениеДоходовИЗатратТекст");
	
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, ТекущиеДанные);
	
	
	УслугиНоменклатураПриИзмененииНаСервере(ДанныеСтрокиТаблицы, ПараметрыОбъекта);
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтрокиТаблицы);
	
	ИзменитьПараметрыВыбораПолейСубконтоТаблицыУслуги(ЭтаФорма);
	УстановитьЗаголовкиИДоступностьСубконто(ЭтаФорма, ТекущиеДанные.Счет, "Услуги", "", Истина, Истина);

КонецПроцедуры

&НаКлиенте
Процедура УслугиСчетПриИзменении(Элемент)

	ТекущиеДанные	= Элементы.Услуги.ТекущиеДанные;
	
	ДанныеСтроки	= Новый Структура("Дата, Организация, Склад,
		|Номенклатура ,Количество, 
		|ПлановаяСтоимость, СуммаПлановая,
		|Счет, Субконто1, Субконто2, Субконто3,
		|Спецификация, НоменклатурнаяГруппа,
		|Субконто1Доступность, Субконто2Доступность, Субконто3Доступность");
	
	ЗаполнитьЗначенияСвойств(ДанныеСтроки, Объект);
	ЗаполнитьЗначенияСвойств(ДанныеСтроки, ТекущиеДанные);
	
	УслугиСчетПриИзмененииНаСервере(ДанныеСтроки);
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтроки);
	
	ИзменитьПараметрыВыбораПолейСубконтоТаблицыУслуги(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура УслугиСубконтоПриИзменении(Элемент)

	ИзменитьПараметрыВыбораПолейСубконтоТаблицыУслуги(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура УслугиСубконтоНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	ТекущиеДанные = Элементы.Услуги.ТекущиеДанные;
	
	ОбщегоНазначенияБПКлиент.НачалоВыбораЗначенияСубконто(
		ЭтаФорма, Элемент, СтандартнаяОбработка,
		СписокПараметровВыбораСубконтоТаблицыУслуги(ЭтаФорма, ТекущиеДанные, "Субконто%Индекс%"));

	КонецПроцедуры
	
&НаКлиенте
Процедура УслугиНоменклатурнаяГруппаПриИзменении(Элемент)
	
	ТекущиеДанные	= Элементы.Услуги.ТекущиеДанные;
	
	ДанныеСтрокиТаблицы	= Новый Структура(
		"Номенклатура, НалоговоеНазначениеДоходовИЗатрат, Количество,
		|ПлановаяСтоимость, СуммаПлановая,
		|Счет, Субконто1, Субконто2, Субконто3,
		|Спецификация, НоменклатурнаяГруппа,
		|Субконто1Доступность, Субконто2Доступность, Субконто3Доступность, НалоговоеНазначениеДоходовИЗатратТолькоПросмотр, НалоговоеНазначениеДоходовИЗатратТекст");
	
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, ТекущиеДанные);
	
	ЗаполнитьДобавленныеКолонкиТаблицыУслуги(ДанныеСтрокиТаблицы, ПараметрыОбъекта);
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтрокиТаблицы);
	
КонецПроцедуры

#КонецОбласти	//ОбработчикиСобытийЭлементовТаблицыФормыУслуги

#Область ОбработчикиСобытийЭлементовТаблицыФормыВозвратныеОтходы

&НаКлиенте
Процедура ВозвратныеОтходыПриИзменении(Элемент)

	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ВозвратныеОтходыНоменклатураПриИзменении(Элемент)

	ТекущиеДанные	= Элементы.ВозвратныеОтходы.ТекущиеДанные;
	
	ДанныеСтрокиТаблицы	= Новый Структура(
		"Номенклатура, Количество,
		|ЕдиницаИзмерения, Коэффициент, Цена, Сумма,
		|Счет, СтатьяЗатрат,
		|НоменклатурнаяГруппа");
	
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, ТекущиеДанные);
	
	ДанныеОбъекта = Новый Структура("Дата, Организация, Склад");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
	ВозвратныеОтходыНоменклатураПриИзмененииНаСервере(ДанныеСтрокиТаблицы, ДанныеОбъекта);
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтрокиТаблицы);

КонецПроцедуры

&НаКлиенте
Процедура ВозвратныеОтходыКоличествоПриИзменении(Элемент)

	ТекущиеДанные = Элементы.ВозвратныеОтходы.ТекущиеДанные;
	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(ТекущиеДанные);

КонецПроцедуры

&НаКлиенте
Процедура ВозвратныеОтходыЦенаПриИзменении(Элемент)

	ТекущиеДанные = Элементы.ВозвратныеОтходы.ТекущиеДанные;
	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(ТекущиеДанные);

КонецПроцедуры

&НаКлиенте
Процедура ВозвратныеОтходыСуммаПриИзменении(Элемент)

	ТекущиеДанные = Элементы.ВозвратныеОтходы.ТекущиеДанные;
	
	Если ТекущиеДанные.Количество <> 0 Тогда
		ТекущиеДанные.Цена	= ТекущиеДанные.Сумма / ТекущиеДанные.Количество;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВозвратныеОтходыЕдиницаИзмеренияПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ВозвратныеОтходы.ТекущиеДанные;
	ДанныеСтрокиТаблицы = Новый Структура("Номенклатура, ЕдиницаИзмерения, Коэффициент, Цена, Сумма, Количество");
	
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, ТекущиеДанные);
	ЕдиницаИзмеренияПриИзмененииНаСервере(ДанныеСтрокиТаблицы, "ВозвратныеОтходы");
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтрокиТаблицы);
	
КонецПроцедуры

#КонецОбласти	//ОбработчикиСобытийЭлементовТаблицыФормыВозвратныеОтходы

#Область ОбработчикиСобытийЭлементовТаблицыФормыМатериалы

&НаКлиенте
Процедура МатериалыПриИзменении(Элемент)

	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура МатериалыНоменклатураПриИзменении(Элемент)

	ТекущиеДанные = Элементы.Материалы.ТекущиеДанные;
	
	ДанныеСтрокиТаблицы = Новый Структура(
		"Номенклатура, НалоговоеНазначение, НалоговоеНазначениеДоходовИЗатрат, Счет, КоличествоМест,
		|ЕдиницаИзмерения, Коэффициент, Количество,
		|ДокументОприходования, Себестоимость,
		|НоменклатурнаяГруппа, СтатьяЗатрат, НалоговоеНазначениеДоходовИЗатратТолькоПросмотр, НалоговоеНазначениеДоходовИЗатратТекст");
	
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, ТекущиеДанные);
	
	
	МатериалыНоменклатураПриИзмененииНаСервере(ДанныеСтрокиТаблицы, ПараметрыОбъекта);
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтрокиТаблицы);

КонецПроцедуры

&НаКлиенте
Процедура МатериалыДокументОприходованияПриИзменении(Элемент)

	ТекущиеДанные = Элементы.Материалы.ТекущиеДанные;
	
	Если НЕ ЗначениеЗаполнено(ТекущиеДанные.ДокументОприходования) Тогда
		ТекущиеДанные.Себестоимость	= 0;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура МатериалыДокументОприходованияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	Перем ПараметрыОбъекта;
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные	= Элементы.Материалы.ТекущиеДанные;
	
	ПараметрыОбъекта	= Новый Структура;
	ПараметрыОбъекта.Вставить("Организация",	Объект.Организация);
	ПараметрыОбъекта.Вставить("СчетУчета",		ТекущиеДанные.Счет);
	ПараметрыОбъекта.Вставить("Номенклатура",	ТекущиеДанные.Номенклатура);
	ПараметрыОбъекта.Вставить("Склад",			Объект.Склад);
	ПараметрыОбъекта.Вставить("КонецПериода",	?(Параметры.Ключ.Пустая(), КонецДня(ТекущаяДата()), Объект.Дата));
	ПараметрыОбъекта.Вставить("ТипыДокументов", "Метаданные.Документы.ОтчетПроизводстваЗаСмену.ТабличныеЧасти.Материалы.Реквизиты.ДокументОприходования.Тип"); 
	
	ПараметрыФормы = Новый Структура("ПараметрыОбъекта", ПараметрыОбъекта);
	ОткрытьФорму("Документ.Партия.ФормаВыбора", ПараметрыФормы, Элемент);

КонецПроцедуры

&НаКлиенте
Процедура МатериалыЕдиницаИзмеренияПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Материалы.ТекущиеДанные;
	ДанныеСтрокиТаблицы = Новый Структура("Номенклатура, ЕдиницаИзмерения, Коэффициент");
	
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, ТекущиеДанные);
	ЕдиницаИзмеренияПриИзмененииНаСервере(ДанныеСтрокиТаблицы, "Материалы");
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтрокиТаблицы);
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыНоменклатурнаяГруппаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Материалы.ТекущиеДанные;
	
	ДанныеСтрокиТаблицы = Новый Структура(
		"Номенклатура, НалоговоеНазначение, Счет, КоличествоМест,
		|ЕдиницаИзмерения, Коэффициент, Количество,
		|ДокументОприходования, Себестоимость,
		|НоменклатурнаяГруппа, СтатьяЗатрат, НалоговоеНазначениеДоходовИЗатратТолькоПросмотр, НалоговоеНазначениеДоходовИЗатратТекст");
	
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, ТекущиеДанные);
	
	ЗаполнитьДобавленныеКолонкиСтрокиМатериалы(ДанныеСтрокиТаблицы, ПараметрыОбъекта);
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтрокиТаблицы);	
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Заполнить(Команда)

	Если Объект.Материалы.Количество() > 0 Тогда
		ТекстВопроса	= НСтр("ru='Перед заполнением табличная часть будет очищена. Продолжить?';uk='Перед заповненням таблична частина буде очищена. Продовжити?'");
		Оповещение = Новый ОписаниеОповещения("ВопросПередЗаполнениемТабличнойЧастиЗавершение", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да, Заголовок);
	Иначе
		ЗаполнитьМатериалыПоСпецификацииНаСервере();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаПодбораПродукция(Команда)

	ОткрытьФорму("Обработка.ПодборНоменклатуры.Форма.Форма",
		ПолучитьПараметрыПодбора("Продукция"),
		ЭтаФорма,
		УникальныйИдентификатор);

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаПодбораМатериалы(Команда)

	ОткрытьФорму("Обработка.ПодборНоменклатуры.Форма.Форма",
		ПолучитьПараметрыПодбора("Материалы"),
		ЭтаФорма,
		УникальныйИдентификатор);

КонецПроцедуры

#КонецОбласти	//ОбработчикиКомандФормы

#Область СлужебныеПроцедурыИФункцииБСП

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

&НаСервере
Процедура ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(ИмяЭлемента, РезультатВыполнения)
	
	ДополнительныеОтчетыИОбработки.ВыполнитьНазначаемуюКомандуНаСервере(ЭтаФорма, ИмяЭлемента, РезультатВыполнения);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьНазначаемуюКоманду(Команда)
	
	Если НЕ ДополнительныеОтчетыИОбработкиКлиент.ВыполнитьНазначаемуюКомандуНаКлиенте(ЭтаФорма, Команда.Имя) Тогда
		РезультатВыполнения = Неопределено;
		ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(Команда.Имя, РезультатВыполнения);
		ДополнительныеОтчетыИОбработкиКлиент.ПоказатьРезультатВыполненияКоманды(ЭтаФорма, РезультатВыполнения);
	КонецЕсли;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

// СтандартныеПодсистемы.Печать
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	
	УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти	//СлужебныеПроцедурыИФункцииБСП

#Область СлужебныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаСервере
Процедура ПодготовитьФормуНаСервере()

	УстановитьФункциональныеОпцииФормы();
	
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);

	ТекущаяДатаДокумента					= Объект.Дата;
	ВалютаРегламентированногоУчета			= Константы.ВалютаРегламентированногоУчета.Получить();
	ТипЦенПлановойСебестоимостиНоменклатуры	= Константы.ТипЦенПлановойСебестоимостиНоменклатуры.Получить();
	
	ЗаполнитьДобавленныеКолонкиТаблиц();
	
	УстановитьПараметрыВыбораСчетаЗатрат(); // ИНАГРО
	
	УстановитьВидимость();
	
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаСервере
Процедура УстановитьФункциональныеОпцииФормы()

	ОбщегоНазначенияБПКлиентСервер.УстановитьПараметрыФункциональныхОпцийФормыДокумента(ЭтаФорма);
	
	ПорядокРаспределенияРасходовНаОказаниеВнутреннихУслуг =
		УчетнаяПолитика.ПорядокРаспределенияРасходовНаОказаниеВнутреннихУслуг(Объект.Организация, Объект.Дата);
	
	ПоказыватьСебестоимость	= (УчетнаяПолитика.СпособОценкиМПЗ(Объект.Организация, Объект.Дата) <>
		Перечисления.СпособыОценки.ПоСредней);
		
	ПлательщикНДС = УчетнаяПолитика.ПлательщикНДС(Объект.Организация, Объект.Дата);
	ПлательщикНалогаНаПрибыльДо2015	 = УчетнаяПолитика.ПлательщикНалогаНаПрибыльДо2015(Объект.Организация, Объект.Дата);
	ПараметрыОбъекта = Новый Структура("Дата, Организация, Склад, СчетЗатрат, ПлательщикНДС", Объект.Дата, Объект.Организация, Объект.Склад, Объект.СчетЗатрат, ПлательщикНДС);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)

	Объект		= Форма.Объект;
	Элементы	= Форма.Элементы;

	Форма.ОтметкаНезаполненногоСклад = (Объект.Продукция.Количество() > 0
		ИЛИ Объект.ВозвратныеОтходы.Количество() > 0
		ИЛИ Объект.Материалы.Количество() > 0);
		
	Элементы.УслугиНалоговоеНазначениеДоходовИЗатрат.Видимость = Форма.ПлательщикНалогаНаПрибыльДо2015;
	Элементы.МатериалыНалоговоеНазначениеДоходовИЗатрат.Видимость = Форма.ПлательщикНалогаНаПрибыльДо2015;
	
	Элементы.МатериалыНалоговоеНазначение.Видимость = Форма.ПлательщикНалогаНаПрибыльДо2015 ИЛИ Форма.ПлательщикНДС
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимость()
	
	Элементы.ВариантВыраженияВнутреннихУслуг.Видимость = (ПорядокРаспределенияРасходовНаОказаниеВнутреннихУслуг =
		Перечисления.ПорядокРаспределенияРасходовНаОказаниеВнутреннихУслуг.ПоПлановымЦенамИОбъемуВыпуска);
		
	Элементы.СтраницаМатериалы.Видимость = Объект.ИспользоватьМатериалы;
	
КонецПроцедуры

&НаСервере
Процедура ДатаПриИзмененииНаСервере()

	УстановитьФункциональныеОпцииФормы();
	
	УправлениеФормой(ЭтаФорма);
	
	УстановитьВидимость();

КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()

	УстановитьФункциональныеОпцииФормы();
	
	ЗаполнениеДокументов.ПриИзмененииЗначенияОрганизации(Объект, Пользователи.ТекущийПользователь());
	
	ЗаполнитьСчетаУчетаВТабличнойЧастиНаСервере();
	
	УправлениеФормой(ЭтаФорма);
	
	УстановитьВидимость();

КонецПроцедуры

&НаСервере
Процедура СкладПриИзмененииНаСервере()

	
	ЗаполнитьСчетаУчетаВТабличнойЧастиНаСервере();

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСчетаУчетаВТабличнойЧастиНаСервере(ИмяТабличнойЧасти = "")

	Если ПустаяСтрока(ИмяТабличнойЧасти) ИЛИ ИмяТабличнойЧасти = "Продукция" Тогда
		Документы.ОтчетПроизводстваЗаСмену.ЗаполнитьСчетаУчетаВТабличнойЧасти(Объект, "Продукция");
	КонецЕсли;
	
	Если ПустаяСтрока(ИмяТабличнойЧасти) ИЛИ ИмяТабличнойЧасти = "Услуги" Тогда
		Документы.ОтчетПроизводстваЗаСмену.ЗаполнитьСчетаУчетаВТабличнойЧасти(Объект, "Услуги");
		ЗаполнитьДобавленныеКолонкиТаблиц();
	КонецЕсли;
	
	Если ПустаяСтрока(ИмяТабличнойЧасти) ИЛИ ИмяТабличнойЧасти = "ВозвратныеОтходы" Тогда
		Документы.ОтчетПроизводстваЗаСмену.ЗаполнитьСчетаУчетаВТабличнойЧасти(Объект, "ВозвратныеОтходы");
	КонецЕсли;
	
	Если ПустаяСтрока(ИмяТабличнойЧасти) ИЛИ ИмяТабличнойЧасти = "Материалы" Тогда
		Документы.ОтчетПроизводстваЗаСмену.ЗаполнитьСчетаУчетаВТабличнойЧасти(Объект, "Материалы");
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПродукцияНоменклатураПриИзмененииНаСервере(СтрокаТабличнойЧасти, Знач ДанныеОбъекта)

	ДанныеОбъекта.Вставить("ТипЦенПлановойСебестоимости", Константы.ТипЦенПлановойСебестоимостиНоменклатуры.Получить());
	
	СведенияОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОНоменклатуре(
		СтрокаТабличнойЧасти.Номенклатура, ДанныеОбъекта);
	Если СведенияОНоменклатуре = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаТабличнойЧасти.ЕдиницаИзмерения		= СведенияОНоменклатуре.БазоваяЕдиницаИзмерения;
	СтрокаТабличнойЧасти.Коэффициент			= СведенияОНоменклатуре.Коэффициент;
	СтрокаТабличнойЧасти.ПлановаяСтоимость		= СведенияОНоменклатуре.ПлановаяСтоимость;
	СтрокаТабличнойЧасти.Спецификация			= СведенияОНоменклатуре.ОсновнаяСпецификацияНоменклатуры;
	СтрокаТабличнойЧасти.НоменклатурнаяГруппа	= СведенияОНоменклатуре.НоменклатурнаяГруппа;
	
	Документы.ОтчетПроизводстваЗаСмену.ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(
		ДанныеОбъекта, СтрокаТабличнойЧасти, "Продукция", СведенияОНоменклатуре);
		
	ОбработкаТабличныхЧастейКлиентСервер.ПересчитатьПлановуюСумму(СтрокаТабличнойЧасти);

КонецПроцедуры

&НаСервере
Процедура УслугиНоменклатураПриИзмененииНаСервере(СтрокаТабличнойЧасти, Знач ДанныеОбъекта)

	ДанныеОбъекта.Вставить("ТипЦенПлановойСебестоимости", Константы.ТипЦенПлановойСебестоимостиНоменклатуры.Получить());
	
	СведенияОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОНоменклатуре(
		СтрокаТабличнойЧасти.Номенклатура, ДанныеОбъекта);
	Если СведенияОНоменклатуре = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаТабличнойЧасти.ПлановаяСтоимость		= СведенияОНоменклатуре.ПлановаяСтоимость;
	СтрокаТабличнойЧасти.Спецификация			= СведенияОНоменклатуре.ОсновнаяСпецификацияНоменклатуры;
	СтрокаТабличнойЧасти.НоменклатурнаяГруппа	= СведенияОНоменклатуре.НоменклатурнаяГруппа;
	
	Документы.ОтчетПроизводстваЗаСмену.ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(
		ДанныеОбъекта, СтрокаТабличнойЧасти, "Услуги", СведенияОНоменклатуре);
	
	ОбработкаТабличныхЧастейКлиентСервер.ПересчитатьПлановуюСумму(СтрокаТабличнойЧасти);
	
	УслугиСчетПриИзмененииНаСервере(СтрокаТабличнойЧасти);
	ЗаполнитьДобавленныеКолонкиТаблицыУслуги(СтрокаТабличнойЧасти, ДанныеОбъекта);

КонецПроцедуры

&НаСервере
Процедура УслугиСчетПриИзмененииНаСервере(ДанныеСтроки)

	УстановитьЗаголовкиИДоступностьСубконто(ЭтаФорма, ДанныеСтроки.Счет, "Услуги", "", Истина, Истина);
	
	ПоляОбъекта = Новый Структура("Организация, Подразделение, Субконто1, Субконто2, Субконто3",
		Объект.Организация, Объект.ПодразделениеОрганизации, "Субконто1", "Субконто2", "Субконто3");
	БухгалтерскийУчетКлиентСервер.ПриИзмененииСчета(ДанныеСтроки.Счет, ДанныеСтроки, ПоляОбъекта, Истина);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ВозвратныеОтходыНоменклатураПриИзмененииНаСервере(СтрокаТабличнойЧасти, Знач ДанныеОбъекта)

	ДанныеОбъекта.Вставить("ТипЦенПлановойСебестоимости", Константы.ТипЦенПлановойСебестоимостиНоменклатуры.Получить());
	
	СведенияОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОНоменклатуре(
		СтрокаТабличнойЧасти.Номенклатура, ДанныеОбъекта);
	Если СведенияОНоменклатуре = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаТабличнойЧасти.ЕдиницаИзмерения		= СведенияОНоменклатуре.БазоваяЕдиницаИзмерения;
	СтрокаТабличнойЧасти.Коэффициент			= СведенияОНоменклатуре.Коэффициент;
	
	СтрокаТабличнойЧасти.СтатьяЗатрат			= СведенияОНоменклатуре.СтатьяЗатрат;
	СтрокаТабличнойЧасти.Цена					= СведенияОНоменклатуре.ПлановаяСтоимость;
	СтрокаТабличнойЧасти.НоменклатурнаяГруппа	= СведенияОНоменклатуре.НоменклатурнаяГруппа;
	
	Документы.ОтчетПроизводстваЗаСмену.ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(
		ДанныеОбъекта, СтрокаТабличнойЧасти, "ВозвратныеОтходы", СведенияОНоменклатуре);
		
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);

КонецПроцедуры

&НаСервереБезКонтекста
Процедура МатериалыНоменклатураПриИзмененииНаСервере(СтрокаТабличнойЧасти, Знач ДанныеОбъекта)

	СведенияОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОНоменклатуре(
		СтрокаТабличнойЧасти.Номенклатура, ДанныеОбъекта);
	Если СведенияОНоменклатуре = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаТабличнойЧасти.ЕдиницаИзмерения		= СведенияОНоменклатуре.БазоваяЕдиницаИзмерения;
	СтрокаТабличнойЧасти.Коэффициент			= СведенияОНоменклатуре.Коэффициент;
	
	СтрокаТабличнойЧасти.СтатьяЗатрат			= СведенияОНоменклатуре.СтатьяЗатрат;
	СтрокаТабличнойЧасти.НоменклатурнаяГруппа	= СведенияОНоменклатуре.НоменклатурнаяГруппа;
	
	Документы.ОтчетПроизводстваЗаСмену.ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(
		ДанныеОбъекта, СтрокаТабличнойЧасти, "Материалы", СведенияОНоменклатуре);
		
	ЗаполнитьДобавленныеКолонкиСтрокиМатериалы(СтрокаТабличнойЧасти, ДанныеОбъекта);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ
//

&НаСервере
Процедура ЗаполнитьМатериалыПоСпецификацииНаСервере()
	
	Объект.Материалы.Очистить();
	Документы.ОтчетПроизводстваЗаСмену.ЗаполнитьМатериалыПоПродукцииУслугам(
		Объект.Материалы,
		Объект.Продукция.Выгрузить(),
		Объект.Услуги.Выгрузить(),
		Объект.Организация,
		Объект.Склад);
		
	Для Каждого СтрокаТаблицы Из Объект.Материалы Цикл
		ЗаполнитьДобавленныеКолонкиСтрокиМатериалы(СтрокаТаблицы, ПараметрыОбъекта);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьПараметрыПодбора(ИмяТаблицы)

	ПараметрыФормы = Новый Структура;

	ДатаРасчетов = ?(НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДата()), Неопределено, Объект.Дата);

	ЗаголовокПодбора = НСтр("ru='Подбор номенклатуры в документ %1 (%2)';uk='Підбір номенклатури в документ %1 (%2)'");
	Если ИмяТаблицы = "Продукция" Тогда
		ПредставлениеТаблицы = НСтр("ru='Продукция';uk='Продукція'");
	ИначеЕсли ИмяТаблицы = "Материалы" Тогда
		ПредставлениеТаблицы = НСтр("ru='Материалы';uk='Матеріали'");
		ПараметрыФормы.Вставить("ПоказыватьОстатки", Истина);
	КонецЕсли;
	ЗаголовокПодбора = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ЗаголовокПодбора,
		Объект.Ссылка, ПредставлениеТаблицы);
		
	СписокПодборов = Новый СписокЗначений();
	СписокПодборов.Добавить("", НСтр("ru='По справочнику';uk='З довідника'"));
	СписокПодборов.Добавить("ОстаткиНоменклатуры",           НСтр("ru='Остатки номенклатуры';uk='Залишки номенклатури'"));
	СписокПодборов.Добавить("ОстаткиИПлановаяСебестоимость", НСтр("ru='Остатки и плановая себестоимость';uk='Залишки й планова собівартість'"));
	
	ПараметрыФормы.Вставить("ДатаРасчетов",   ДатаРасчетов);
	ПараметрыФормы.Вставить("Склад",          Объект.Склад);
	ПараметрыФормы.Вставить("Организация",    Объект.Организация);
	ПараметрыФормы.Вставить("Подразделение",  Объект.ПодразделениеОрганизации);
	ПараметрыФормы.Вставить("Валюта",         ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета());
	ПараметрыФормы.Вставить("ЕстьЦена",		  Ложь);
	ПараметрыФормы.Вставить("ЕстьКоличество", Истина);
	ПараметрыФормы.Вставить("Заголовок",      ЗаголовокПодбора);
	ПараметрыФормы.Вставить("СписокПодборов", СписокПодборов);
	ПараметрыФормы.Вставить("ИмяТаблицы",     ИмяТаблицы);
	ПараметрыФормы.Вставить("Услуги",         ИмяТаблицы = "Услуги");
	ПараметрыФормы.Вставить("ТипЦен",         ТипЦенПлановойСебестоимостиНоменклатуры);

	Возврат ПараметрыФормы;

КонецФункции

&НаСервере
Процедура ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение, ИмяТаблицы)

	ТаблицаТоваров = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресПодобраннойНоменклатурыВХранилище);
	
	ДанныеОбъекта = Новый Структура("Дата, Организация, Склад");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
	Если ИмяТаблицы = "Продукция" Тогда
		ДанныеОбъекта.Вставить("ТипЦенПлановойСебестоимости", Константы.ТипЦенПлановойСебестоимостиНоменклатуры.Получить());
	КонецЕсли;
	
	СоответствиеСведенийОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОСпискеНоменклатуры(
		ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаТоваров, "Номенклатура", Истина), ДанныеОбъекта);
	
	Для Каждого СтрокаТовара Из ТаблицаТоваров Цикл
		
		СтруктураОтбора = Новый Структура("Номенклатура, ЕдиницаИзмерения", СтрокаТовара.Номенклатура, СтрокаТовара.ЕдиницаИзмерения);
		СтрокаТабличнойЧасти = НайтиСтрокуТабличнойЧасти(ИмяТаблицы, СтруктураОтбора);
		
		Если СтрокаТабличнойЧасти <> Неопределено Тогда
			// Нашли - увеличиваем количество.
			СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + СтрокаТовара.Количество;
			
			Если ИмяТаблицы = "Продукция" Тогда
				
				ОбработкаТабличныхЧастейКлиентСервер.ПересчитатьПлановуюСумму(СтрокаТабличнойЧасти);
				
			ИначеЕсли ИмяТаблицы = "Материалы" Тогда
				
				ЗаполнитьДобавленныеКолонкиСтрокиМатериалы(СтрокаТабличнойЧасти, ПараметрыОбъекта);
				
			КонецЕсли;
			
		Иначе
			
			СтрокаТабличнойЧасти = Объект[ИмяТаблицы].Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтрокаТовара);
			
			СведенияОНоменклатуре = СоответствиеСведенийОНоменклатуре.Получить(СтрокаТовара.Номенклатура);
			Если СведенияОНоменклатуре = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			
			СтрокаТабличнойЧасти.НоменклатурнаяГруппа	= СведенияОНоменклатуре.НоменклатурнаяГруппа;
			
			Если ИмяТаблицы = "Продукция" Тогда
				
				СтрокаТабличнойЧасти.Спецификация		= СведенияОНоменклатуре.ОсновнаяСпецификацияНоменклатуры;
				СтрокаТабличнойЧасти.ПлановаяСтоимость	= СведенияОНоменклатуре.ПлановаяСтоимость;
				ОбработкаТабличныхЧастейКлиентСервер.ПересчитатьПлановуюСумму(СтрокаТабличнойЧасти);
				
			ИначеЕсли ИмяТаблицы = "Материалы" Тогда
				
				СтрокаТабличнойЧасти.СтатьяЗатрат	= СведенияОНоменклатуре.СтатьяЗатрат;
				
				ЗаполнитьДобавленныеКолонкиСтрокиМатериалы(СтрокаТабличнойЧасти, ПараметрыОбъекта);
				
			КонецЕсли;
			
			Документы.ОтчетПроизводстваЗаСмену.ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(
			ДанныеОбъекта, СтрокаТабличнойЧасти, ИмяТаблицы, СведенияОНоменклатуре);
			
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДобавленныеКолонкиТаблиц()

	Для Каждого СтрокаТаблицы Из Объект.Услуги Цикл
		ЗаполнитьДобавленныеКолонкиТаблицыУслуги(СтрокаТаблицы, ПараметрыОбъекта);
	КонецЦикла;
	
	Для Каждого СтрокаТаблицы Из Объект.Материалы Цикл
		ЗаполнитьДобавленныеКолонкиСтрокиМатериалы(СтрокаТаблицы, ПараметрыОбъекта);
	КонецЦикла;

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьДобавленныеКолонкиТаблицыУслуги(СтрокаТаблицы, ПараметрыОбъекта)

	СвойстваСчета	= БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(СтрокаТаблицы.Счет);
	
	ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3", "Субконто1", "Субконто2", "Субконто3");
	БухгалтерскийУчетКлиентСервер.УстановитьДоступностьСубконто(СтрокаТаблицы.Счет, СтрокаТаблицы, ПоляОбъекта);
	
	ХарактерЗатрат = Неопределено;
	ХарактерЗатратРБП		   = Неопределено;
	ЦелевоеНалоговоеНазначение = Неопределено;
	НалоговыйУчет.ОпределениеАналитикиНалоговогоУчетаВПроводкахДляЗатрат(СтрокаТаблицы, СтрокаТаблицы.Счет, ХарактерЗатрат,
													       	ЦелевоеНалоговоеНазначение, ,СтрокаТаблицы.НоменклатурнаяГруппа.НалоговоеНазначениеВПроизводстве,СтрокаТаблицы.НалоговоеНазначениеДоходовИЗатрат,,ПараметрыОбъекта.Дата,
															ХарактерЗатратРБП,ПараметрыОбъекта.ПлательщикНДС
															);

	Если ХарактерЗатрат <> "Затраты" И НЕ ПараметрыОбъекта.ПлательщикНДС Тогда
		СтрокаТаблицы.НалоговоеНазначениеДоходовИЗатратТолькоПросмотр = Истина;
		СтрокаТаблицы.НалоговоеНазначениеДоходовИЗатратТекст = "<"+Строка(ЦелевоеНалоговоеНазначение)+">";
	ИначеЕсли ХарактерЗатрат = "ОПЗ"
		ИЛИ ХарактерЗатрат = "ТЗР" Тогда
		СтрокаТаблицы.НалоговоеНазначениеДоходовИЗатратТолькоПросмотр = Истина; 
		СтрокаТаблицы.НалоговоеНазначениеДоходовИЗатратТекст = "<" + ЦелевоеНалоговоеНазначение + ">, " + НСтр("ru='из номенклатурной группы затрат';uk='з номенклатурної групи витрат'");
	ИначеЕсли ХарактерЗатрат = "Производство" Тогда
		СтрокаТаблицы.НалоговоеНазначениеДоходовИЗатратТолькоПросмотр = Истина; 
		СтрокаТаблицы.НалоговоеНазначениеДоходовИЗатратТекст = "<" + ЦелевоеНалоговоеНазначение + ">, " + НСтр("ru='из аналитики счета - номенклатурной группы';uk='з аналітики рахунку - номенклатурної групи'");
	ИначеЕсли ХарактерЗатрат = "Строительство" Тогда
		СтрокаТаблицы.НалоговоеНазначениеДоходовИЗатратТолькоПросмотр = Истина;
		СтрокаТаблицы.НалоговоеНазначениеДоходовИЗатратТекст = "<" + ЦелевоеНалоговоеНазначение + ">, " + НСтр("ru='из аналитики счета - объекта строительства';uk=""з аналітики рахунку - об'єкта будівництва""");
	ИначеЕсли ХарактерЗатрат = "РБП" Тогда
		Если    ХарактерЗатратРБП = "Производство"
			ИЛИ ХарактерЗатратРБП = "Строительство"
			ИЛИ ХарактерЗатратРБП = "ОПЗ"
			Тогда
			СтрокаТаблицы.НалоговоеНазначениеДоходовИЗатратТолькоПросмотр = Истина;
			СтрокаТаблицы.НалоговоеНазначениеДоходовИЗатратТекст = "<" + ЦелевоеНалоговоеНазначение + ">, " + НСтр("ru='из аналитики счета - справочника РБП';uk='з аналітики рахунку - довідника витрат майбут. періодів'");
		Иначе			
			СтрокаТаблицы.НалоговоеНазначениеДоходовИЗатратТолькоПросмотр = Истина;
			СтрокаТаблицы.НалоговоеНазначениеДоходовИЗатратТекст = "<" + ЦелевоеНалоговоеНазначение + ">, " + НСтр("ru='из номенклатурной группы затрат';uk='з номенклатурної групи витрат'");
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьДобавленныеКолонкиСтрокиМатериалы(СтрокаТаблицы, ПараметрыОбъекта)

	ХарактерЗатрат = Неопределено;
	НалоговоеНазначениеАналитика = Неопределено;
	СтруктураСубконто = Новый Структура("Субконто1,Субконто2,Субконто3",СтрокаТаблицы.НоменклатурнаяГруппа, Неопределено, Неопределено);
	НалоговыйУчет.ОпределениеАналитикиНалоговогоУчетаВПроводкахДляЗатрат(СтруктураСубконто, ПараметрыОбъекта.СчетЗатрат, ХарактерЗатрат,
													       	НалоговоеНазначениеАналитика, ,СтрокаТаблицы.НалоговоеНазначение,,,ПараметрыОбъекта.Дата
															,,ПараметрыОбъекта.ПлательщикНДС
															);
	Если (ХарактерЗатрат = "Производство" ИЛИ ХарактерЗатрат = "Строительство" ИЛИ ХарактерЗатрат = "ТЗР" ИЛИ ХарактерЗатрат = "РБП" ИЛИ ХарактерЗатрат = "ОПЗ") ИЛИ НЕ ПараметрыОбъекта.ПлательщикНДС Тогда
		СтрокаТаблицы.НалоговоеНазначениеДоходовИЗатратТолькоПросмотр = Истина;
		СтрокаТаблицы.НалоговоеНазначениеДоходовИЗатратТекст          = "<"+Строка(НалоговоеНазначениеАналитика)+">";
	КонецЕсли;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ИзменитьПараметрыВыбораПолейСубконто(Форма, Суффикс, ИмяСчета)

	ПараметрыДокумента = СписокПараметровВыбораСубконто(Форма, Форма.Объект,
		"Субконто" + Суффикс + "%Индекс%", ИмяСчета);
	
	БухгалтерскийУчетКлиентСервер.ИзменитьПараметрыВыбораПолейСубконто(
		Форма, 
		Форма.Объект, 
		"Субконто" + Суффикс + "%Индекс%", 
		"Субконто" + Суффикс + "%Индекс%", 
		ПараметрыДокумента);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция СписокПараметровВыбораСубконто(Форма, ПараметрыОбъекта, ШаблонИмяПоляОбъекта, ИмяСчета)

	СписокПараметров = Новый Структура;
	
	Для Индекс = 1 По 3 Цикл
		
		ИмяПоля = СтрЗаменить(ШаблонИмяПоляОбъекта, "%Индекс%", Индекс);
		Если ТипЗнч(ПараметрыОбъекта[ИмяПоля]) = Тип("СправочникСсылка.Контрагенты") Тогда
			СписокПараметров.Вставить("Контрагент", ПараметрыОбъекта[ИмяПоля]);
		ИначеЕсли ТипЗнч(ПараметрыОбъекта[ИмяПоля]) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
			СписокПараметров.Вставить("ДоговорКонтрагента", ПараметрыОбъекта[ИмяПоля]);
		ИначеЕсли ТипЗнч(ПараметрыОбъекта[ИмяПоля]) = Тип("СправочникСсылка.Номенклатура") Тогда
			СписокПараметров.Вставить("Номенклатура", ПараметрыОбъекта[ИмяПоля]);
		ИначеЕсли ТипЗнч(ПараметрыОбъекта[ИмяПоля]) = Тип("СправочникСсылка.Склады") Тогда
			СписокПараметров.Вставить("Склад", ПараметрыОбъекта[ИмяПоля]);
		КонецЕсли;
		
	КонецЦикла;
	СписокПараметров.Вставить("Организация", Форма.Объект.Организация);
	СписокПараметров.Вставить("СчетУчета"  , Форма.Объект[ИмяСчета]);

	Возврат СписокПараметров;

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ИзменитьПараметрыВыбораПолейСубконтоТаблицыУслуги(Форма)

	Если Форма.Элементы.Услуги.ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаТаблицы = Форма.Объект.Услуги.НайтиПоИдентификатору(Форма.Элементы.Услуги.ТекущаяСтрока);
	
	БухгалтерскийУчетКлиентСервер.ИзменитьПараметрыВыбораПолейСубконто(
		Форма, 
		СтрокаТаблицы, 
		"Субконто%Индекс%", 
		"УслугиСубконто%Индекс%", 
		СписокПараметровВыбораСубконтоТаблицыУслуги(Форма, СтрокаТаблицы, "Субконто%Индекс%"));

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция СписокПараметровВыбораСубконтоТаблицыУслуги(Форма, ПараметрыОбъекта, ШаблонИмяПоляОбъекта)

	СписокПараметров = Новый Структура;
	
	ШаблонИмяПоляОбъекта = "Субконто%Индекс%";
	
	ОбщиеПараметры = Новый Соответствие;
	ОбщиеПараметры.Вставить(Тип("СправочникСсылка.Контрагенты"),          "Контрагент");
	ОбщиеПараметры.Вставить(Тип("СправочникСсылка.ДоговорыКонтрагентов"), "ДоговорКонтрагента");
	ОбщиеПараметры.Вставить(Тип("СправочникСсылка.Номенклатура"),         "Номенклатура");
	ОбщиеПараметры.Вставить(Тип("СправочникСсылка.Склады"),               "Склад");
	
	Для Индекс = 1 По 3 Цикл
		
		ИмяПоля         = СтрЗаменить(ШаблонИмяПоляОбъекта, "%Индекс%", Индекс);
		ЗначениеПоля    = ПараметрыОбъекта[ИмяПоля];
		ТипЗначенияПоля = ТипЗнч(ЗначениеПоля);
		
		ИмяПараметра = ОбщиеПараметры[ТипЗначенияПоля];
		Если ЗначениеЗаполнено(ИмяПараметра) Тогда
			СписокПараметров.Вставить(ИмяПараметра, ЗначениеПоля);
		КонецЕсли;
		
	КонецЦикла;
	
	СписокПараметров.Вставить("Организация", Форма.Объект.Организация);
	СписокПараметров.Вставить("СчетУчета",   ПараметрыОбъекта.Счет);

	Возврат СписокПараметров;

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьЗаголовкиИДоступностьСубконто(Форма, Счет, Префикс = "", Постфикс = "", ЕстьПодразделение, ЭтоТаблица = Ложь)

	ПоляФормы = Новый Структура("Субконто1, Субконто2, Субконто3",
		Префикс + "Субконто" + Постфикс + "1",
		Префикс + "Субконто" + Постфикс + "2",
		Префикс + "Субконто" + Постфикс + "3");

	ЗаголовкиПолей = Новый Структура("Субконто1, Субконто2, Субконто3",
		Префикс + "ЗаголовокСубконто" + Постфикс + "1",
		Префикс + "ЗаголовокСубконто" + Постфикс + "2",
		Префикс + "ЗаголовокСубконто" + Постфикс + "3");

	БухгалтерскийУчетКлиентСервер.ПриВыбореСчета(Счет, Форма, ПоляФормы, ЗаголовкиПолей, ЭтоТаблица);

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЕдиницаИзмеренияПриИзмененииНаСервере(СтрокаТабличнойЧасти, Знач ИмяТабличнойЧасти)

	ОбработкаТабличныхЧастей.ЗаполнитьКоэффициентТабЧасти(СтрокаТабличнойЧасти, Неопределено, ИмяТабличнойЧасти, Метаданные.Документы.ОтчетПроизводстваЗаСмену);
	Если ИмяТабличнойЧасти = "Продукция" Тогда
		СтрокаТабличнойЧасти.СуммаПлановая = СтрокаТабличнойЧасти.ПлановаяСтоимость * СтрокаТабличнойЧасти.Количество;
	ИначеЕсли ИмяТабличнойЧасти = "ВозвратныеОтходы" Тогда
		СтрокаТабличнойЧасти.Сумма = СтрокаТабличнойЧасти.Цена * СтрокаТабличнойЧасти.Количество;
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура УстановитьСостояниеДокумента()
	
	СостояниеДокумента = ОбщегоНазначенияБП.СостояниеДокумента(Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросПередЗаполнениемТабличнойЧастиЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ЗаполнитьМатериалыПоСпецификацииНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция НайтиСтрокуТабличнойЧасти(ИмяТабличнойЧасти, СтруктураОтбора)

	СтрокаТабличнойЧасти = Неопределено;

	МассивНайденныхСтрок = Объект[ИмяТабличнойЧасти].НайтиСтроки(СтруктураОтбора);
	Если МассивНайденныхСтрок.Количество() > 0 Тогда
		// Нашли. Вернем первую найденную строку.
		СтрокаТабличнойЧасти = МассивНайденныхСтрок[0];
	КонецЕсли;

	Возврат СтрокаТабличнойЧасти;

КонецФункции

&НаСервере
Процедура УстановитьПараметрыВыбораСчетаЗатрат() // ИНАГРО
	
	СчетаОтбора = Новый Массив;
	СчетаОтбора.Добавить(ПланыСчетов.Хозрасчетный.Производство);
	
	СчетаИсключений = Новый Массив;
	СчетаИсключений.Добавить(ПланыСчетов.Хозрасчетный.ПроизводствоИзДавальческогоСырья);
	СчетаИсключений.Добавить(ПланыСчетов.Хозрасчетный.ОбслуживаниеИРемонт);
	
	СчетаЗатрат = БухгалтерскийУчет.ПолучитьМассивСчетовДенежныхСредств(СчетаОтбора, Ложь, , СчетаИсключений);
	
	НовыйМассивПараметров = Новый Массив;
	НовыйМассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Ссылка", Новый ФиксированныйМассив(СчетаЗатрат)));
	НовыйМассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.ЗапретитьИспользоватьВПроводках", Ложь));
	Элементы.СчетЗатрат.ПараметрыВыбора = Новый ФиксированныйМассив(НовыйМассивПараметров);
	 		
КонецПроцедуры

#КонецОбласти



