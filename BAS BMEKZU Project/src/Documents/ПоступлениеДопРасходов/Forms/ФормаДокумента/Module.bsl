#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	Если Параметры.Ключ.Пустая() Тогда
		Если ЗначениеЗаполнено(Параметры.Основание) Тогда // ИНАГРО
			Если Параметры.Основание.Метаданные().Имя = "ИНАГРО_ПоступлениеБиологическихАктивов" Тогда 
				ИНАГРО_ЭтоПоступлениеБА = Истина;
			КонецЕсли;
		КонецЕсли;
		ПодготовитьФормуНаСервере();
	КонецЕсли;

	// Активизировать первую непустую табличную часть
	СписокТабличныхЧастей = Новый СписокЗначений;
	СписокТабличныхЧастей.Добавить("Товары", "Товары");
	СписокТабличныхЧастей.Добавить("Оборудование", "Оборудование");
	
	АктивизироватьТабличнуюЧасть = ОбщегоНазначенияБПВызовСервера.ПолучитьПервуюНепустуюВидимуюТабличнуюЧасть(
		ЭтаФорма, СписокТабличныхЧастей);
	ОбщегоНазначенияБПВызовСервера.АктивизироватьЭлементФормы(ЭтаФорма, АктивизироватьТабличнуюЧасть);
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)

	Если ИсточникВыбора.ИмяФормы = "Обработка.ПодборНоменклатуры.Форма.Форма" Тогда
		ОбработкаВыбораПодборВставкаИзБуфераНаСервере(ВыбранноеЗначение, ИсточникВыбора.ИмяТаблицы);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)

	Если ИмяСобытия = "ДанныеСкопированыВБуферОбмена" Тогда
		
		УстановитьДоступностьКомандыВставки(ЭтотОбъект, Истина);

	Иначе
		ОбщегоНазначенияБПКлиент.ОбработкаОповещенияФормыДокумента(ЭтаФорма, Объект.Ссылка, ИмяСобытия, Параметр, Источник);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом

	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	ПодготовитьФормуНаСервере();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
		УстановитьСостояниеДокумента();
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

#КонецОбласти	//ОбработчикиСобытийФормы

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)

	Если НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДатаДокумента) Тогда
		// Изменение времени не влияет на поведение документа.
		ТекущаяДатаДокумента = Объект.Дата;
		Возврат;
	КонецЕсли;

	// Общие проверки условий по датам.
	ТребуетсяВызовСервера = ОбщегоНазначенияБПКлиент.ТребуетсяВызовСервераПриИзмененииДатыДокумента(Объект.Дата, 
		ТекущаяДатаДокумента, Объект.ВалютаДокумента, ВалютаРегламентированногоУчета);
		
	// Если определили, что изменение даты может повлиять на какие-либо параметры, 
	// то передаем обработку на сервер.
	Если ТребуетсяВызовСервера Тогда
		ДатаПриИзмененииНаСервере();
	КонецЕсли;
	
	// Запомним новую дату документа.
	ТекущаяДатаДокумента = Объект.Дата;

КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)

	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		ОрганизацияПриИзмененииНаСервере();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СуммаПриИзменении(Элемент)

	Объект.СуммаНДС = УчетНДСКлиентСервер.РассчитатьСуммуНДС(
		Объект.Сумма,
		Объект.СуммаВключаетНДС,
		УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(Объект.СтавкаНДС));
		
	РассчитатьПропорциональныйНДС(Объект, ПлательщикНДС, КоэффициентПропорциональногоНДС);

	ОбновитьИтоги(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура СтавкаНДСПриИзменении(Элемент)

	СтавкаНДСПриИзмененииНаСервере();

КонецПроцедуры

&НаКлиенте
Процедура СуммаНДСПриИзменении(Элемент)

	РассчитатьПропорциональныйНДС(Объект, ПлательщикНДС, КоэффициентПропорциональногоНДС);

	ОбновитьИтоги(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)

	Если НЕ ЗначениеЗаполнено(Объект.Контрагент) Тогда
		Возврат;
	КонецЕсли;

	КонтрагентПриИзмененииНаСервере();

КонецПроцедуры

&НаКлиенте
Процедура ДоговорКонтрагентаПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		Возврат;
	КонецЕсли;

	ДоговорКонтрагентаПриИзмененииНаСервере();

КонецПроцедуры

&НаКлиенте
Процедура СпособРаспределенияПриИзменении(Элемент)
	
	РассчитатьПропорциональныйНДС(Объект, ПлательщикНДС, КоэффициентПропорциональногоНДС);
	
КонецПроцедуры

&НаКлиенте
Процедура СделкаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;

	ПараметрыОбъекта = Новый Структура;
	ПараметрыОбъекта.Вставить("Дата"                 , Объект.Дата);
	ПараметрыОбъекта.Вставить("ДоговорКонтрагента"   , Объект.ДоговорКонтрагента);
	ПараметрыОбъекта.Вставить("Контрагент"           , Объект.Контрагент);
	ПараметрыОбъекта.Вставить("СчетУчета"            , Объект.СчетУчетаРасчетовПоАвансам);
	ПараметрыОбъекта.Вставить("Организация"          , Объект.Организация);
	ПараметрыОбъекта.Вставить("ОстаткиОбороты"       , "Дт");
	ПараметрыОбъекта.Вставить("ТипыДокументов"       , "Метаданные.Документы.ПоступлениеДопРасходов.Реквизиты.Сделка.Тип");

	ПараметрыФормы = Новый Структура("ПараметрыОбъекта", ПараметрыОбъекта);
	ОткрытьФорму("Документ.ДокументРасчетовСКонтрагентом.ФормаВыбора", ПараметрыФормы, Элемент);
		
КонецПроцедуры

&НаКлиенте
Процедура ЦеныИВалютаНажатие(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка	= Ложь;
	
	ВалютаДоИзменения			= Объект.ВалютаДокумента;
	КурсДоИзменения				= Объект.КурсВзаиморасчетов;
	КратностьДоИзменения		= Объект.КратностьВзаиморасчетов;
	СуммаВключаетНДСДоИзменения	= Объект.СуммаВключаетНДС;
	
	// 1. Формируем структуру параметров для заполнения формы "Цены и Валюта".
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Организация"         , Объект.Организация);
	СтруктураПараметров.Вставить("ДатаДокумента"       , Объект.Дата);
	СтруктураПараметров.Вставить("БылиВнесеныИзменения", Ложь);
	СтруктураПараметров.Вставить("ПересчитатьЦены"     , Ложь);
	СтруктураПараметров.Вставить("ПересчитатьНДС"      , Ложь);
	СтруктураПараметров.Вставить("ВалютаДокумента"     , Объект.ВалютаДокумента);
	СтруктураПараметров.Вставить("Курс"                , Объект.КурсВзаиморасчетов);
	СтруктураПараметров.Вставить("Кратность"           , Объект.КратностьВзаиморасчетов);
	СтруктураПараметров.Вставить("Контрагент"          , Объект.Контрагент);
	СтруктураПараметров.Вставить("Договор"             , Объект.ДоговорКонтрагента);
	СтруктураПараметров.Вставить("СуммаВключаетНДС"    , Объект.СуммаВключаетНДС);
	СтруктураПараметров.Вставить("ПерезаполнитьЦены"   , Ложь);
	
	ОткрытьФорму("ОбщаяФорма.ФормаЦеныИВалюта", СтруктураПараметров,,,,, Новый ОписаниеОповещения("ЦеныИВалютаНажатиеЗавершение", ЭтотОбъект, Новый Структура("ВалютаДоИзменения, КратностьДоИзменения, КурсДоИзменения, СуммаВключаетНДСДоИзменения", ВалютаДоИзменения, КратностьДоИзменения, КурсДоИзменения, СуммаВключаетНДСДоИзменения)), РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);

КонецПроцедуры

&НаКлиенте
Процедура ЦеныИВалютаНажатиеЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    ВалютаДоИзменения = ДополнительныеПараметры.ВалютаДоИзменения;
    КратностьДоИзменения = ДополнительныеПараметры.КратностьДоИзменения;
    КурсДоИзменения = ДополнительныеПараметры.КурсДоИзменения;
    СуммаВключаетНДСДоИзменения = ДополнительныеПараметры.СуммаВключаетНДСДоИзменения;
    
    
    // 2. Открываем форму "Цены и Валюта".
    СтруктураЦеныИВалюта = Результат;
    
    // 3. Перезаполняем табличную часть если были внесены изменения в форме "Цены и Валюта".
    Если ТипЗнч(СтруктураЦеныИВалюта) = Тип("Структура") И СтруктураЦеныИВалюта.БылиВнесеныИзменения Тогда
        
        Объект.ВалютаДокумента         = СтруктураЦеныИВалюта.ВалютаДокумента;
        Объект.КурсВзаиморасчетов      = СтруктураЦеныИВалюта.Курс;
        Объект.КратностьВзаиморасчетов = СтруктураЦеныИВалюта.Кратность;
        Объект.СуммаВключаетНДС        = СтруктураЦеныИВалюта.СуммаВключаетНДС;
        
        Модифицированность = Истина;
        
        ПересчитатьСуммы	= Объект.ВалютаДокумента <> ВалютаДоИзменения ИЛИ Объект.КурсВзаиморасчетов <> КурсДоИзменения;
        ПересчитатьНДС	= Объект.СуммаВключаетНДС <> СуммаВключаетНДСДоИзменения;
        
        Если ПересчитатьСуммы ИЛИ ПересчитатьНДС Тогда
            ПересчетСуммДокумента(ВалютаДоИзменения, КурсДоИзменения, КратностьДоИзменения, ПересчитатьСуммы, ПересчитатьНДС);
        КонецЕсли;
        
        ОбновитьИтоги(ЭтаФорма);
        
        СформироватьНадписьЦеныИВалюта(ЭтаФорма);
        
    КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЕстьАвансДо01042011ПриИзменении(Элемент)
	
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования,ЭтотОбъект,"Объект.Комментарий");

КонецПроцедуры

#КонецОбласти	//ОбработчикиСобытийЭлементовШапкиФормы

#Область ОбработчикиСобытийЭлементовТаблицыФормыТовары

&НаКлиенте
Процедура ТоварыПриИзменении(Элемент)

	ЕстьДопРасходыВТаблице = (Объект.Товары.Итог("Сумма") <> 0) ИЛИ (Объект.Оборудование.Итог("Сумма") <> 0);
	
	РассчитатьПропорциональныйНДС(Объект, ПлательщикНДС, КоэффициентПропорциональногоНДС);
	
	ОбновитьИтоги(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если НоваяСтрока И ОтменаРедактирования Тогда
		ОбновитьИтоги(ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)

	Если НЕ НоваяСтрока ИЛИ Копирование Тогда
		Возврат;
	КонецЕсли;
	

КонецПроцедуры

&НаКлиенте
Процедура ТоварыПослеУдаления(Элемент)
	
	РассчитатьПропорциональныйНДС(Объект, ПлательщикНДС, КоэффициентПропорциональногоНДС);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)

	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	ДанныеСтрокиТаблицы = Новый Структура(
		"Номенклатура, ДокументПартии,
		|ЕдиницаИзмерения, Коэффициент,
		|Количество, Сумма, СтавкаНДС, СуммаНДС,
		|СчетУчетаБУ, НалоговоеНазначение");
	
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, ТекущиеДанные);
	
	ДанныеОбъекта = Новый Структура("Организация, Дата, СуммаВключаетНДС, СтавкаНДС");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
	ТоварыНоменклатураПриИзмененииНаСервере(ДанныеСтрокиТаблицы, ДанныеОбъекта, "Товары");
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтрокиТаблицы);

КонецПроцедуры

&НаКлиенте
Процедура ТоварыЕдиницаИзмеренияПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	ДанныеСтрокиТаблицы = Новый Структура("Номенклатура, ЕдиницаИзмерения, Коэффициент");
	
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, ТекущиеДанные);
	ТоварыЕдиницаИзмеренияПриИзмененииНаСервере(ДанныеСтрокиТаблицы, "Товары");
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтрокиТаблицы);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаТовараПриИзменении(Элемент)
	
	Если Объект.СпособРаспределения = ПредопределенноеЗначение("Перечисление.СпособыРаспределенияДопРасходов.ПоСумме") Тогда
		РассчитатьПропорциональныйНДС(Объект, ПлательщикНДС, КоэффициентПропорциональногоНДС);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаПриИзменении(Элемент)

	СтрокаТаблицы = Элементы.Товары.ТекущиеДанные;

	СтрокаТаблицы.СуммаНДС = УчетНДСКлиентСервер.РассчитатьСуммуНДС(
		СтрокаТаблицы.Сумма,
		Объект.СуммаВключаетНДС,
		УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(Объект.СтавкаНДС));

	РассчитатьПропорциональныйНДС(Объект, ПлательщикНДС, КоэффициентПропорциональногоНДС);

	ОбновитьИтоги(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаНДСПриИзменении(Элемент)
	
	РассчитатьПропорциональныйНДС(Объект, ПлательщикНДС, КоэффициентПропорциональногоНДС);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыДокументПартииПриИзменении(Элемент)

	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	ДанныеСтрокиТаблицы = Новый Структура(
		"Номенклатура, ДокументПартии, СчетУчетаБУ, НалоговоеНазначение");
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, ТекущиеДанные);
	
	ДанныеОбъекта = Новый Структура("Дата, Организация");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
	ТоварыДокументПартииПриИзмененииНаСервере(ДанныеСтрокиТаблицы, ДанныеОбъекта, "Товары");
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтрокиТаблицы);

КонецПроцедуры

&НаКлиенте
Процедура ТоварыДокументПартииНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

	СтрокаТаблицы = Элементы.Товары.ТекущиеДанные;

	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("КонецПериода"                , ?(ЗначениеЗаполнено(Параметры.Ключ), Объект.Дата, КонецДня(ТекущаяДата())));
	ПараметрыФормы.Вставить("Организация"                 , Объект.Организация);
	ПараметрыФормы.Вставить("Номенклатура"                , СтрокаТаблицы.Номенклатура);
	ПараметрыФормы.Вставить("Склад"                       , Неопределено);
	ПараметрыФормы.Вставить("СчетУчета"                   , СтрокаТаблицы.СчетУчетаБУ);
	ПараметрыФормы.Вставить("ТипыДокументов"              , "Новый ОписаниеТипов(Метаданные.Документы.ПоступлениеДопРасходов.ТабличныеЧасти.Товары.Реквизиты.ДокументПартии.Тип,,""ДокументСсылка.ПеремещениеТоваров"")");
	ПараметрыФормы.Вставить("ФормироватьСписокПриОткрытии", Ложь);

	ОткрытьФорму("Документ.Партия.ФормаВыбора", Новый Структура("ПараметрыОбъекта", ПараметрыФормы), Элемент);

КонецПроцедуры

&НаКлиенте
Процедура ТоварыСчетУчетаПриИзменении(Элемент)

	СтрокаТаблицы = Элементы.Товары.ТекущиеДанные;
	

КонецПроцедуры

#КонецОбласти	//ОбработчикиСобытийЭлементовТаблицыФормыТовары

#Область ОбработчикиСобытийЭлементовТаблицыФормыОборудование

&НаКлиенте
Процедура ОборудованиеПриИзменении(Элемент)
	
	ЕстьДопРасходыВТаблице = (Объект.Товары.Итог("Сумма") <> 0) ИЛИ (Объект.Оборудование.Итог("Сумма") <> 0);
	
	РассчитатьПропорциональныйНДС(Объект, ПлательщикНДС, КоэффициентПропорциональногоНДС);
	
	ОбновитьИтоги(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ОборудованиеПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
		
	Если НоваяСтрока И ОтменаРедактирования Тогда
		ОбновитьИтоги(ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОборудованиеПослеУдаления(Элемент)
	
	РассчитатьПропорциональныйНДС(Объект, ПлательщикНДС, КоэффициентПропорциональногоНДС);
	
КонецПроцедуры

&НаКлиенте
Процедура ОборудованиеНоменклатураПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Оборудование.ТекущиеДанные;
	
	ДанныеСтрокиТаблицы = Новый Структура(
		"Номенклатура, ДокументПартии,
		|ЕдиницаИзмерения, Коэффициент,
		|Количество, Сумма, СтавкаНДС, СуммаНДС,
		|СчетУчетаБУ, НалоговоеНазначение");
	
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, ТекущиеДанные);
	
	ДанныеОбъекта = Новый Структура("Организация, Дата, СуммаВключаетНДС, СтавкаНДС");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
	ТоварыНоменклатураПриИзмененииНаСервере(ДанныеСтрокиТаблицы, ДанныеОбъекта, "Оборудование");
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтрокиТаблицы);

КонецПроцедуры

&НаКлиенте
Процедура ОборудованиеЕдиницаИзмеренияПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Оборудование.ТекущиеДанные;
	ДанныеСтрокиТаблицы = Новый Структура("Номенклатура, ЕдиницаИзмерения, Коэффициент");
	
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, ТекущиеДанные);
	ТоварыЕдиницаИзмеренияПриИзмененииНаСервере(ДанныеСтрокиТаблицы, "Оборудование");
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтрокиТаблицы);
	
КонецПроцедуры

&НаКлиенте
Процедура ОборудованиеСуммаТовараПриИзменении(Элемент)
	
	Если Объект.СпособРаспределения = ПредопределенноеЗначение("Перечисление.СпособыРаспределенияДопРасходов.ПоСумме") Тогда
		РассчитатьПропорциональныйНДС(Объект, ПлательщикНДС, КоэффициентПропорциональногоНДС);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОборудованиеСуммаПриИзменении(Элемент)
	
	СтрокаТаблицы = Элементы.Оборудование.ТекущиеДанные;

	СтрокаТаблицы.СуммаНДС = УчетНДСКлиентСервер.РассчитатьСуммуНДС(
		СтрокаТаблицы.Сумма,
		Объект.СуммаВключаетНДС,
		УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(Объект.СтавкаНДС));

	РассчитатьПропорциональныйНДС(Объект, ПлательщикНДС, КоэффициентПропорциональногоНДС);

	ОбновитьИтоги(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ОборудованиеСуммаНДСПриИзменении(Элемент)
	
	РассчитатьПропорциональныйНДС(Объект, ПлательщикНДС, КоэффициентПропорциональногоНДС);
	
КонецПроцедуры

&НаКлиенте
Процедура ОборудованиеДокументПартииПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Оборудование.ТекущиеДанные;
	
	ДанныеСтрокиТаблицы = Новый Структура(
		"Номенклатура, ДокументПартии, СчетУчетаБУ, НалоговоеНазначение");
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, ТекущиеДанные);
	
	ДанныеОбъекта = Новый Структура("Дата, Организация");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
	ТоварыДокументПартииПриИзмененииНаСервере(ДанныеСтрокиТаблицы, ДанныеОбъекта, "Оборудование");
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтрокиТаблицы);

КонецПроцедуры

&НаКлиенте
Процедура ОборудованиеДокументПартииНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

	СтрокаТаблицы = Элементы.Оборудование.ТекущиеДанные;

	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("КонецПериода"                , ?(ЗначениеЗаполнено(Параметры.Ключ), Объект.Дата, КонецДня(ТекущаяДата())));
	ПараметрыФормы.Вставить("Организация"                 , Объект.Организация);
	ПараметрыФормы.Вставить("Номенклатура"                , СтрокаТаблицы.Номенклатура);
	ПараметрыФормы.Вставить("Склад"                       , Неопределено);
	ПараметрыФормы.Вставить("СчетУчета"                   , СтрокаТаблицы.СчетУчетаБУ);
	ПараметрыФормы.Вставить("ТипыДокументов"              , "Новый ОписаниеТипов(Метаданные.Документы.ПоступлениеДопРасходов.ТабличныеЧасти.Оборудование.Реквизиты.ДокументПартии.Тип,,""ДокументСсылка.ПеремещениеТоваров"")");
	ПараметрыФормы.Вставить("ФормироватьСписокПриОткрытии", Ложь);

	ОткрытьФорму("Документ.Партия.ФормаВыбора", Новый Структура("ПараметрыОбъекта", ПараметрыФормы), Элемент);

КонецПроцедуры

#КонецОбласти	//ОбработчикиСобытийЭлементовТаблицыФормыОборудование

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ДобавитьИзПоступления(Команда)

	ЗаполнитьТабличнуюЧастьПоПоступлению("Добавить", "Товары");

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоПоступлению(Команда)

	ЗаполнитьТабличнуюЧастьПоПоступлению("Заполнить", "Товары");

КонецПроцедуры

&НаКлиенте
Процедура ПодборТовары(Команда)

	ОткрытьФорму("Обработка.ПодборНоменклатуры.Форма.Форма",
		ПолучитьПараметрыПодбора("Товары"),
		ЭтаФорма,
		УникальныйИдентификатор);

КонецПроцедуры

&НаКлиенте
Процедура ОборудованиеДобавитьИзПоступления(Команда)
	
	ЗаполнитьТабличнуюЧастьПоПоступлению("Добавить", "Оборудование");
	
КонецПроцедуры

&НаКлиенте
Процедура ОборудованиеЗаполнитьПоПоступлению(Команда)
	
	ЗаполнитьТабличнуюЧастьПоПоступлению("Заполнить", "Оборудование");
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборОборудование(Команда)

	ОткрытьФорму("Обработка.ПодборНоменклатуры.Форма.Форма",
		ПолучитьПараметрыПодбора("Оборудование"),
		ЭтаФорма,
		УникальныйИдентификатор);

КонецПроцедуры

&НаКлиенте
Процедура СкопироватьСтроки(Команда)
	
	ИмяТаблицы = ПолучитьИмяТекущейТабличнойЧасти();
	Если ПустаяСтрока(ИмяТаблицы) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	КоличествоСтрок = Элементы[ИмяТаблицы].ВыделенныеСтроки.Количество();
	Если КоличествоСтрок = 0 Тогда
		
		Возврат;
		
	КонецЕсли;
	СкопироватьСтрокиНаСервере(ИмяТаблицы);
	ОбработкаТабличныхЧастейКлиент.ОповеститьОКопированииСтрокВБуферОбмена(ЭтотОбъект, КоличествоСтрок);
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьСтроки(Команда)
	
	ИмяТаблицы = ПолучитьИмяТекущейТабличнойЧасти();
	Если ПустаяСтрока(ИмяТаблицы) Тогда
		
		Возврат;
		
	КонецЕсли;
	КоличествоСтрок = ВставитьСтрокиНаСервере(ИмяТаблицы);
	ОбработкаТабличныхЧастейКлиент.ОповеститьОВставкеСтрокИзБуфераОбмена(ЭтотОбъект, КоличествоСтрок);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзПоступленияБА(Команда) // ИНАГРО
	
	ЗаполнитьТабличнуюЧастьПоПоступлению("ДобавитьБА", "Товары");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоПоступлениюБА(Команда) // ИНАГРО
	
	ЗаполнитьТабличнуюЧастьПоПоступлению("ЗаполнитьБА", "Товары");
	
КонецПроцедуры

#КонецОбласти	//ОбработчикиКомандФормы

#Область СлужебныеПроцедурыИФункцииБСП

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

&НаСервере
Процедура ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(ИмяЭлемента, РезультатВыполнения)
	
	ДополнительныеОтчетыИОбработки.ВыполнитьНазначаемуюКомандуНаСервере(ЭтаФорма, ИмяЭлемента, РезультатВыполнения);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьНазначаемуюКоманду(Команда)
	
	Если НЕ ДополнительныеОтчетыИОбработкиКлиент.ВыполнитьНазначаемуюКомандуНаКлиенте(ЭтаФорма, Команда.Имя) Тогда
		РезультатВыполнения = Неопределено;
		ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(Команда.Имя, РезультатВыполнения);
		ДополнительныеОтчетыИОбработкиКлиент.ПоказатьРезультатВыполненияКоманды(ЭтаФорма, РезультатВыполнения);
	КонецЕсли;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

// СтандартныеПодсистемы.Печать
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	
	УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти	//СлужебныеПроцедурыИФункцииБСП

#Область СлужебныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаСервере
Процедура ПодготовитьФормуНаСервере()

	УстановитьФункциональныеОпцииФормы();
	
	ТекущаяДатаДокумента = Объект.Дата;
	
	ВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();

	РеквизитыДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		Объект.ДоговорКонтрагента, "ВидДоговора, ВедениеВзаиморасчетов, СложныйНалоговыйУчет");
		
	ЭтоКомиссия				= ЗначениеЗаполнено(Объект.ДоговорКонтрагента) И РеквизитыДоговора.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом;
	ВедениеВзаиморасчетовПоРасчетнымДокументам = ЗначениеЗаполнено(Объект.ДоговорКонтрагента) И РеквизитыДоговора.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоРасчетнымДокументам;
	СложныйНалоговыйУчет                       = ЗначениеЗаполнено(Объект.ДоговорКонтрагента) И РеквизитыДоговора.СложныйНалоговыйУчет;
	
	// Нестандартное использование заголовка, вместо использования дополнительны декораций
	Элементы.СуммаВДВРПоАвансуДо01042011.Заголовок = " " + Строка(ВалютаРегламентированногоУчета); 

	ЕстьДопРасходыВТаблице = (Объект.Товары.Итог("Сумма") <> 0) ИЛИ (Объект.Оборудование.Итог("Сумма") <> 0);

	УправлениеФормой(ЭтаФорма);

	УстановитьЗаголовкиКолонок();
	
	СформироватьНадписьЦеныИВалюта(ЭтаФорма);
	
	ОбновитьИтоги(ЭтаФорма);
	
	УстановитьСостояниеДокумента();
	
	// Проверка буфера обмена на наличие скопированных строк
	УстановитьДоступностьКомандыВставки(ЭтотОбъект, Не ОбщегоНазначения.ПустойБуферОбмена());
	
КонецПроцедуры

&НаСервере
Процедура УстановитьФункциональныеОпцииФормы()

	ОбщегоНазначенияБПКлиентСервер.УстановитьПараметрыФункциональныхОпцийФормыДокумента(ЭтаФорма);
	ПлательщикНДС		= УчетнаяПолитика.ПлательщикНДС(Объект.Организация, Объект.Дата);
	ПлательщикНалогаНаПрибыльДо2015 = УчетнаяПолитика.ПлательщикНалогаНаПрибыльДо2015(Объект.Организация, Объект.Дата);
	КоэффициентПропорциональногоНДС = НалоговыйУчет.ПолучитьКоэффициентПропорциональногоНДС(Объект.Организация, Объект.Дата);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)

	Элементы	= Форма.Элементы;
	Объект		= Форма.Объект;
	
	СформироватьНадписьЦеныИВалюта(Форма);
	
	
	// Доступность взаимосвязанных полей
	Элементы.ДоговорКонтрагента.Доступность  = ЗначениеЗаполнено(Объект.Организация) И ЗначениеЗаполнено(Объект.Контрагент);
	Элементы.Сделка.Доступность = Форма.ВедениеВзаиморасчетовПоРасчетнымДокументам;
	
	Элементы.СуммаНДС.Доступность	= НЕ Объект.СтавкаНДС = ПредопределенноеЗначение("Перечисление.СтавкиНДС.БезНДС")
		И НЕ Объект.СтавкаНДС = ПредопределенноеЗначение("Перечисление.СтавкиНДС.НеНДС")
		И НЕ Объект.СтавкаНДС = ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС0");
		
	Элементы.СчетУчетаНДС.Видимость                  = Форма.ПлательщикНДС;
	Элементы.СчетУчетаНДСПодтвержденный.Видимость    = Форма.ПлательщикНДС;
	Элементы.СчетУчетаНДСПодтвержденный.Доступность  = Не Форма.СложныйНалоговыйУчет;
	
	Элементы.СуммаНДСПропорциональноКредит.Видимость                = Форма.ПлательщикНДС;
	Элементы.ВалютаРеглУчетаСуммаНДСПропорциональноКредит.Видимость = Форма.ПлательщикНДС;
	Элементы.СуммаНДСПропорциональноВсего.Видимость                 = Форма.ПлательщикНДС; // Только просмотр - всегда
	Элементы.ВалютаРеглУчетаСуммаНДСПропорциональноВсего.Видимость  = Форма.ПлательщикНДС;	
	
	Элементы.ЕстьАвансДо01042011.Видимость = Форма.ПлательщикНалогаНаПрибыльДо2015;	
	Элементы.СуммаВДВРПоАвансуДо01042011.Видимость = Форма.ПлательщикНалогаНаПрибыльДо2015;	
	Элементы.СуммаВДВРПоАвансуДо01042011.Доступность = Форма.ПлательщикНалогаНаПрибыльДо2015 И Объект.ЕстьАвансДо01042011;	
	
	// ИНАГРО++
	ЭтоБСПУ = ИНАГРО_ОбщийВызовСервераПовтИсп.ЕстьБСПУ();
	
	Элементы.ИНАГРО_ВидОперации.Видимость     = ЭтоБСПУ;	
	Элементы.ТоварыИНАГРО_Голов.Видимость     = ЭтоБСПУ И Форма.ИНАГРО_ЭтоПоступлениеБА;
	Элементы.ТоварыЕдиницаИзмерения.Видимость = ЭтоБСПУ И НЕ Форма.ИНАГРО_ЭтоПоступлениеБА;
	Элементы.ТоварыЗаполнитьПоПоступлениюБА.Видимость     = ЭтоБСПУ;
	Элементы.ТоварыДобавитьИзПоступленияБА.Видимость     = ЭтоБСПУ;

	// ИНАГРО--
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСостояниеДокумента()
	СостояниеДокумента = ОбщегоНазначенияБП.СостояниеДокумента(Объект);
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ
//

// Облуживание типа цен - валюты - НДС:

&НаСервере
Процедура ПересчетСуммДокумента(ВалютаДоИзменения, КурсДоИзменения, КратностьДоИзменения, ПересчитатьСуммы, ПересчитатьНДС)

	УстановитьЗаголовкиКолонок();
	
	Для каждого СтрокаТаблицы Из Объект.Товары Цикл
		
		Если ПересчитатьСуммы Тогда
			СтрокаТаблицы.Сумма = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(
				СтрокаТаблицы.Сумма,
				ВалютаДоИзменения, Объект.ВалютаДокумента,
				КурсДоИзменения, Объект.КурсВзаиморасчетов,
				КратностьДоИзменения, Объект.КратностьВзаиморасчетов);
			СтрокаТаблицы.СуммаТовара = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(
				СтрокаТаблицы.СуммаТовара,
				ВалютаДоИзменения, Объект.ВалютаДокумента,
				КурсДоИзменения, Объект.КурсВзаиморасчетов,
				КратностьДоИзменения, Объект.КратностьВзаиморасчетов);
		КонецЕсли;
		
		СтрокаТаблицы.СуммаНДС = УчетНДСКлиентСервер.РассчитатьСуммуНДС(
			СтрокаТаблицы.Сумма,
			Объект.СуммаВключаетНДС,
			УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(Объект.СтавкаНДС));
		
	КонецЦикла;
	
	Для каждого СтрокаТаблицы Из Объект.Оборудование Цикл
		
		Если ПересчитатьСуммы Тогда
			СтрокаТаблицы.Сумма = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(
				СтрокаТаблицы.Сумма,
				ВалютаДоИзменения, Объект.ВалютаДокумента,
				КурсДоИзменения, Объект.КурсВзаиморасчетов,
				КратностьДоИзменения, Объект.КратностьВзаиморасчетов);
			СтрокаТаблицы.СуммаТовара = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(
				СтрокаТаблицы.СуммаТовара,
				ВалютаДоИзменения, Объект.ВалютаДокумента,
				КурсДоИзменения, Объект.КурсВзаиморасчетов,
				КратностьДоИзменения, Объект.КратностьВзаиморасчетов);
		КонецЕсли;
		
		СтрокаТаблицы.СуммаНДС = УчетНДСКлиентСервер.РассчитатьСуммуНДС(
			СтрокаТаблицы.Сумма,
			Объект.СуммаВключаетНДС,
			УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(Объект.СтавкаНДС));
		
	КонецЦикла;

	Если ПересчитатьСуммы Тогда
		Объект.Сумма = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(
			Объект.Сумма,
			ВалютаДоИзменения, Объект.ВалютаДокумента,
			КурсДоИзменения, Объект.КурсВзаиморасчетов,
			КратностьДоИзменения, Объект.КратностьВзаиморасчетов);
	КонецЕсли;
	
	Объект.СуммаНДС = УчетНДСКлиентСервер.РассчитатьСуммуНДС(
		Объект.Сумма,
		Объект.СуммаВключаетНДС,
		УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(Объект.СтавкаНДС));

	РассчитатьПропорциональныйНДС(Объект, ПлательщикНДС, КоэффициентПропорциональногоНДС);

КонецПроцедуры

// Серверная обработка изменения реквизитов:

&НаСервере
Процедура ДатаПриИзмененииНаСервере()
	
	ДатаОбработатьИзменение();
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаСервере
Процедура ДатаОбработатьИзменение()

	УстановитьФункциональныеОпцииФормы();
	
	Если (Объект.ВалютаДокумента <> ВалютаРегламентированногоУчета) Тогда
		СтруктураКурсаДокумента        = РаботаСКурсамиВалют.ПолучитьКурсВалюты(Объект.ВалютаДокумента, Объект.Дата);
		Объект.КурсВзаиморасчетов      = СтруктураКурсаДокумента.Курс;
		Объект.КратностьВзаиморасчетов = СтруктураКурсаДокумента.Кратность;
	КонецЕсли;
	
	Если Год(Объект.Дата) <> Год(ТекущаяДатаДокумента) Тогда
		РассчитатьПропорциональныйНДС(Объект, ПлательщикНДС, КоэффициентПропорциональногоНДС);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()

	УстановитьФункциональныеОпцииФормы();
	
	
	Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
		КонтрагентОбработатьИзменение();
	КонецЕсли;
	
	ЗаполнитьСчетаУчетаВТабличнойЧастиНаСервере();
	
	РассчитатьПропорциональныйНДС(Объект, ПлательщикНДС, КоэффициентПропорциональногоНДС);
	
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСчетаУчетаВТабличнойЧастиНаСервере(ИмяТабличнойЧасти = "")

	Если ПустаяСтрока(ИмяТабличнойЧасти) ИЛИ ИмяТабличнойЧасти = "Товары" Тогда
		Документы.ПоступлениеДопРасходов.ЗаполнитьСчетаУчетаВТабличнойЧасти(Объект, "Товары");
	КонецЕсли;

	Если ПустаяСтрока(ИмяТабличнойЧасти) ИЛИ ИмяТабличнойЧасти = "Оборудование" Тогда
		Документы.ПоступлениеДопРасходов.ЗаполнитьСчетаУчетаВТабличнойЧасти(Объект, "Оборудование");
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура КонтрагентПриИзмененииНаСервере()
	
	КонтрагентОбработатьИзменение();
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура КонтрагентОбработатьИзменение()

	БухгалтерскийУчетПереопределяемый.УстановитьДоговорКонтрагента(
		Объект.ДоговорКонтрагента, Объект.Контрагент, Объект.Организация, 
		ПолучитьМассивВидовДоговоров());

	Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		ДоговорКонтрагентаОбработатьИзменение();
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ДоговорКонтрагентаПриИзмененииНаСервере()
	
	ДоговорКонтрагентаОбработатьИзменение();
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ДоговорКонтрагентаОбработатьИзменение()
	
	ВалютаДоИзменения = Объект.ВалютаДокумента;
	КурсДоИзменения   = Объект.КурсВзаиморасчетов;
	КратностьДоИзменения        = Объект.КратностьВзаиморасчетов;
	СуммаВключаетНДСДоИзменения = Объект.СуммаВключаетНДС;

	РеквизитыДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		Объект.ДоговорКонтрагента, "ВалютаВзаиморасчетов,ВидДоговора,ВедениеВзаиморасчетов,СложныйНалоговыйУчет");
		
	ДоговорУказан = ЗначениеЗаполнено(Объект.ДоговорКонтрагента);
	
	ЭтоКомиссия				= ЗначениеЗаполнено(Объект.ДоговорКонтрагента) И РеквизитыДоговора.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом;
	ВедениеВзаиморасчетовПоРасчетнымДокументам = ДоговорУказан И РеквизитыДоговора.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоРасчетнымДокументам;
	СложныйНалоговыйУчет                       = ДоговорУказан И РеквизитыДоговора.СложныйНалоговыйУчет;
	
	Объект.ВалютаДокумента         = РеквизитыДоговора.ВалютаВзаиморасчетов;
	СтруктураКурсаДокумента        = РаботаСКурсамиВалют.ПолучитьКурсВалюты(Объект.ВалютаДокумента, Объект.Дата);
	Объект.КурсВзаиморасчетов      = СтруктураКурсаДокумента.Курс;
	Объект.КратностьВзаиморасчетов = СтруктураКурсаДокумента.Кратность;

	ПересчитатьСуммы	= Объект.ВалютаДокумента <> ВалютаДоИзменения ИЛИ Объект.КурсВзаиморасчетов <> КурсДоИзменения;
	ПересчитатьНДС		= Объект.СуммаВключаетНДС <> СуммаВключаетНДСДоИзменения;
	Если ПересчитатьСуммы ИЛИ ПересчитатьНДС Тогда
		ПересчетСуммДокумента(ВалютаДоИзменения, КурсДоИзменения, КратностьДоИзменения, ПересчитатьСуммы, ПересчитатьНДС);
	КонецЕсли;
	
	Документы.ПоступлениеДопРасходов.ЗаполнитьСчетаУчетаРасчетов(Объект);
		

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ТоварыНоменклатураПриИзмененииНаСервере(СтрокаТабличнойЧасти, Знач ДанныеОбъекта, Знач ИмяТабличнойЧасти)

	Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.ДокументПартии) Тогда
		ДанныеОбъекта.Вставить("Склад", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаТабличнойЧасти.ДокументПартии, "Склад"));
	КонецЕсли;
	
	СведенияОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОНоменклатуре(
		СтрокаТабличнойЧасти.Номенклатура, ДанныеОбъекта);
	Если СведенияОНоменклатуре = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаТабличнойЧасти.ЕдиницаИзмерения = СведенияОНоменклатуре.БазоваяЕдиницаИзмерения;
	СтрокаТабличнойЧасти.Коэффициент      = СведенияОНоменклатуре.Коэффициент;
	СтрокаТабличнойЧасти.СтавкаНДС	= СведенияОНоменклатуре.СтавкаНДС;
	
	Документы.ПоступлениеДопРасходов.ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(
		ДанныеОбъекта, СтрокаТабличнойЧасти, ИмяТабличнойЧасти, СведенияОНоменклатуре);
	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ДанныеОбъекта.СуммаВключаетНДС);
	

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ТоварыЕдиницаИзмеренияПриИзмененииНаСервере(СтрокаТабличнойЧасти, Знач ИмяТабличнойЧасти)

	ОбработкаТабличныхЧастей.ЗаполнитьКоэффициентТабЧасти(СтрокаТабличнойЧасти, Неопределено, ИмяТабличнойЧасти, Метаданные.Документы.ПоступлениеДопРасходов);
		
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ТоварыДокументПартииПриИзмененииНаСервере(СтрокаТабличнойЧасти, Знач ДанныеОбъекта, Знач ИмяТабличнойЧасти)

	Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.ДокументПартии) и ОбщегоНазначенияБП.ЕстьРеквизитДокумента("Склад", СтрокаТабличнойЧасти.ДокументПартии.Метаданные()) Тогда
		ДанныеОбъекта.Вставить("Склад", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаТабличнойЧасти.ДокументПартии, "Склад"));
	КонецЕсли;
	
	СведенияОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОНоменклатуре(
		СтрокаТабличнойЧасти.Номенклатура, ДанныеОбъекта);
	
	Документы.ПоступлениеДопРасходов.ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(
		ДанныеОбъекта, СтрокаТабличнойЧасти, ИмяТабличнойЧасти, СведенияОНоменклатуре);

КонецПроцедуры

&НаСервере
Процедура СтавкаНДСПриИзмененииНаСервере()

	Для каждого СтрокаТаблицы Из Объект.Товары Цикл
		СтрокаТаблицы.СуммаНДС = УчетНДСКлиентСервер.РассчитатьСуммуНДС(
			СтрокаТаблицы.Сумма,
			Объект.СуммаВключаетНДС,
			УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(Объект.СтавкаНДС));
	КонецЦикла;
	Для каждого СтрокаТаблицы Из Объект.Оборудование Цикл
		СтрокаТаблицы.СуммаНДС = УчетНДСКлиентСервер.РассчитатьСуммуНДС(
			СтрокаТаблицы.Сумма,
			Объект.СуммаВключаетНДС,
			УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(Объект.СтавкаНДС));
	КонецЦикла;

	Объект.СуммаНДС = УчетНДСКлиентСервер.РассчитатьСуммуНДС(
		Объект.Сумма,
		Объект.СуммаВключаетНДС,
		УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(Объект.СтавкаНДС));
		
	РассчитатьПропорциональныйНДС(Объект, ПлательщикНДС, КоэффициентПропорциональногоНДС);

	ОбновитьИтоги(ЭтаФорма);
	
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

// Внешний вид, содержание надписей и т.п.

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьИтоги(Форма)

	Объект = Форма.Объект;

	Форма.ИтогиВсегоНДС = Объект.Товары.Итог("СуммаНДС") + Объект.Оборудование.Итог("СуммаНДС") + Объект.СуммаНДС;

	Форма.ИтогиВсего = Объект.Товары.Итог("Сумма") + Объект.Оборудование.Итог("Сумма") + Объект.Сумма
		+ ?(Объект.СуммаВключаетНДС, 0, Форма.ИтогиВсегоНДС);

КонецПроцедуры

&НаСервере
Процедура УстановитьЗаголовкиКолонок()
	
	ЗаголовокСумма = ?(Объект.СуммаВключаетНДС, НСтр("ru='Сумма с НДС';uk='Сума з ПДВ'"), НСтр("ru='Сумма без НДС';uk='Сума без ПДВ'"));
	ЗаголовокСуммаДопРасходы = ?(Объект.СуммаВключаетНДС, НСтр("ru='Доп. расходы с НДС';uk='Дод. витрати з ПДВ'"), НСтр("ru='Доп. расходы без НДС';uk='Дод. витрати без ПДВ'"));
	
	Элементы.Сумма.Заголовок = ЗаголовокСумма;
	
	Элементы.ТоварыСумма.Заголовок = ЗаголовокСуммаДопРасходы;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СформироватьНадписьЦеныИВалюта(Форма)
	
	Объект = Форма.Объект;
	СтруктураНадписи = Новый Структура(
		"ВалютаДокумента, Курс, Кратность, СуммаВключаетНДС, ВалютаРегламентированногоУчета",
		Объект.ВалютаДокумента,
		Объект.КурсВзаиморасчетов,
		Объект.КратностьВзаиморасчетов,
		Объект.СуммаВключаетНДС,
		Форма.ВалютаРегламентированногоУчета);
	Форма.ЦеныИВалюта = ОбщегоНазначенияБПКлиентСервер.СформироватьНадписьЦеныИВалюта(СтруктураНадписи);

КонецПроцедуры 

// Заполнение документа по документам - основаниям

&НаКлиенте
Процедура ЗаполнитьТабличнуюЧастьПоПоступлению(СпособЗаполнения, Знач ИмяТабличнойЧасти)

	// ИНАГРО++
	Если СпособЗаполнения = "Заполнить" ИЛИ СпособЗаполнения = "Добавить" Тогда
		
		ПараметрыОтбора = Новый Структура("Организация", Объект.Организация);
		Если ИмяТабличнойЧасти = "Оборудование" Тогда
			ПараметрыОтбора.Вставить("ВидОперации", ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеТоваровУслуг.Оборудование"));
		КонецЕсли;
		ПараметрыФормы = Новый Структура("Отбор", ПараметрыОтбора);
		РезультатВыбора = Неопределено;
		
		ОткрытьФорму("Документ.ПоступлениеТоваровУслуг.ФормаВыбора", ПараметрыФормы, ЭтаФорма,,,, Новый ОписаниеОповещения("ЗаполнитьТабличнуюЧастьПоПоступлениюЗавершение1", ЭтотОбъект, Новый Структура("ИмяТабличнойЧасти, СпособЗаполнения", ИмяТабличнойЧасти, СпособЗаполнения)), РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
		
	ИначеЕсли СпособЗаполнения = "ЗаполнитьБА" ИЛИ СпособЗаполнения = "ДобавитьБА" Тогда
		
		ПараметрыОтбора = Новый Структура("Организация", Объект.Организация);
		Если ЗначениеЗаполнено(Объект.ИНАГРО_ВидОперации) Тогда
			ПараметрыОтбора.Вставить("ВидОперации", Объект.ИНАГРО_ВидОперации);
		КонецЕсли;
		ПараметрыФормы = Новый Структура("Отбор", ПараметрыОтбора);
		РезультатВыбора = Неопределено;
		
		ОткрытьФорму("Документ.ИНАГРО_ПоступлениеБиологическихАктивов.ФормаВыбора", ПараметрыФормы, ЭтаФорма,,,, Новый ОписаниеОповещения("ЗаполнитьТабличнуюЧастьПоПоступлениюЗавершение1", ЭтотОбъект, Новый Структура("ИмяТабличнойЧасти, СпособЗаполнения", ИмяТабличнойЧасти, СпособЗаполнения)), РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
		
	КонецЕсли;
	// ИНАГРО--
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТабличнуюЧастьПоПоступлениюЗавершение1(Результат, ДополнительныеПараметры) Экспорт
    
    ИмяТабличнойЧасти = ДополнительныеПараметры.ИмяТабличнойЧасти;
    СпособЗаполнения = ДополнительныеПараметры.СпособЗаполнения;
    
    
    РезультатВыбора = Результат;
    
    Если РезультатВыбора = Неопределено Тогда
        Возврат;
    КонецЕсли;
    
    Если Объект[ИмяТабличнойЧасти].Количество() > 0 И (СпособЗаполнения = "Заполнить" ИЛИ СпособЗаполнения = "ЗаполнитьБА") Тогда 
        Если ИмяТабличнойЧасти = "Товары" Тогда
            ПредставлениеТаблицы = НСтр("ru='Товары';uk='Товари'");
        ИначеЕсли ИмяТабличнойЧасти = "Оборудование" Тогда	
            ПредставлениеТаблицы = НСтр("ru='Оборудование';uk='Устаткування'");
        Иначе
            ПредставлениеТаблицы = "";
        КонецЕсли;
        
		ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Перед заполнением табличная часть %1 будет очищена. Заполнить?';uk='Перед заповненням таблична частина %1 буде очищена. Заповнити?'"), 
			ПредставлениеТаблицы);
        Ответ = Неопределено;
        
        ПоказатьВопрос(Новый ОписаниеОповещения("ЗаполнитьТабличнуюЧастьПоПоступлениюЗавершение", ЭтотОбъект, Новый Структура("ИмяТабличнойЧасти, РезультатВыбора", ИмяТабличнойЧасти, РезультатВыбора)), ТекстВопроса, РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Да,
        НСтр("ru='Поступление доп. расходов';uk='Надходження дод. витрат'"));
        Возврат;
    КонецЕсли;
    
    ЗаполнитьТабличнуюЧастьПоПоступлениюФрагмент(ИмяТабличнойЧасти, РезультатВыбора);

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТабличнуюЧастьПоПоступлениюЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    ИмяТабличнойЧасти = ДополнительныеПараметры.ИмяТабличнойЧасти;
    РезультатВыбора = ДополнительныеПараметры.РезультатВыбора;
    
    
    Ответ = РезультатВопроса;
    Если Ответ <> КодВозвратаДиалога.Да Тогда
        Возврат;
    КонецЕсли;
    Объект[ИмяТабличнойЧасти].Очистить();
    
    ЗаполнитьТабличнуюЧастьПоПоступлениюФрагмент(ИмяТабличнойЧасти, РезультатВыбора);

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТабличнуюЧастьПоПоступлениюФрагмент(Знач ИмяТабличнойЧасти, РезультатВыбора)
    
    ЗаполнитьТоварыПоПоступлениюТоваров(РезультатВыбора, ИмяТабличнойЧасти);

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТоварыПоПоступлениюТоваров(Поступление, Знач ИмяТабличнойЧасти)

	ДокументОбъект	= РеквизитФормыВЗначение("Объект");
	ДокументОбъект.ЗаполнитьПоПоступлению(Поступление, ИмяТабличнойЧасти);
	ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
	
	РассчитатьПропорциональныйНДС(Объект, ПлательщикНДС, КоэффициентПропорциональногоНДС);

КонецПроцедуры

// Прочий функционал

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьМассивВидовДоговоров()

	СписокВидовДоговоров = Новый Массив;
	СписокВидовДоговоров.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СПоставщиком"));
	СписокВидовДоговоров.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СКомитентом"));

	Возврат СписокВидовДоговоров;

КонецФункции

&НаКлиенте
Функция ПолучитьПараметрыПодбора(ИмяТаблицы)

	ПараметрыФормы = Новый Структура;

	ДатаРасчетов = ?(НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДата()), Неопределено, Объект.Дата);

	ЗаголовокПодбора = НСтр("ru='Подбор номенклатуры в документ %1 (%2)';uk='Підбір номенклатури в документ %1 (%2)'");
	Если ИмяТаблицы = "Товары" Тогда
		ПредставлениеТаблицы = НСтр("ru='Товары';uk='Товари'");
	ИначеЕсли ИмяТаблицы = "Оборудование" Тогда	
		ПредставлениеТаблицы = НСтр("ru='Оборудование';uk='Устаткування'");
	Иначе
		ПредставлениеТаблицы = "";
	КонецЕсли;
	ЗаголовокПодбора = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ЗаголовокПодбора,
		Объект.Ссылка, ПредставлениеТаблицы);

	ПараметрыФормы.Вставить("ДатаРасчетов"      , ДатаРасчетов);
	ПараметрыФормы.Вставить("Организация"       , Объект.Организация);
	ПараметрыФормы.Вставить("Контрагент"        , Объект.Контрагент);
	ПараметрыФормы.Вставить("ДоговорКонтрагента", Объект.ДоговорКонтрагента);
	ПараметрыФормы.Вставить("Валюта"            , Объект.ВалютаДокумента);
	ПараметрыФормы.Вставить("ЕстьЦена"          , Ложь);
	ПараметрыФормы.Вставить("ЕстьКоличество"    , Истина);
	ПараметрыФормы.Вставить("Заголовок"         , ЗаголовокПодбора);
	ПараметрыФормы.Вставить("СписокПодборов"    , ПолучитьСписокПодборов(ИмяТаблицы));
	ПараметрыФормы.Вставить("ИмяТаблицы"        , ИмяТаблицы);
	ПараметрыФормы.Вставить("Услуги"            , Ложь);

	Возврат ПараметрыФормы;

КонецФункции
 
&НаКлиенте
Функция ПолучитьСписокПодборов(ИмяТаблицы)

	СписокПодборов = Новый СписокЗначений();
	СписокПодборов.Добавить("", НСтр("ru='По справочнику';uk='З довідника'"));

	Возврат СписокПодборов;

КонецФункции

&НаСервере
Процедура ОбработкаВыбораПодборВставкаИзБуфераНаСервере(ВыбранноеЗначение, ИмяТаблицы)

	ЭтоВставкаИзБуфера = ВыбранноеЗначение.Свойство("ЭтоВставкаИзБуфера");
	СписокСвойств = Неопределено;
	Если ЭтоВставкаИзБуфера Тогда
		
		ТаблицаТоваров = ВыбранноеЗначение.Данные;
		СписокСвойств = ВыбранноеЗначение.СписокСвойств;
		
	Иначе
		
		ТаблицаТоваров = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресПодобраннойНоменклатурыВХранилище);
		
	КонецЕсли;
	
	ДанныеОбъекта = Новый Структура("Дата, Организация");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
	СоответствиеСведенийОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОСпискеНоменклатуры(
		ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаТоваров, "Номенклатура", Истина), ДанныеОбъекта);
		
	КоличествоДобавленныхСтрок = 0;
		
	Для каждого СтрокаТовара Из ТаблицаТоваров Цикл
		
		СтрокаТабличнойЧасти = Неопределено;
		Если Не ЭтоВставкаИзБуфера Тогда
		
			СтруктураОтбора = Новый Структура("Номенклатура, ЕдиницаИзмерения", СтрокаТовара.Номенклатура, СтрокаТовара.ЕдиницаИзмерения);
			СтрокаТабличнойЧасти = НайтиСтрокуТабличнойЧасти(ИмяТаблицы, СтруктураОтбора);
			
		КонецЕсли;
		
		Если СтрокаТабличнойЧасти <> Неопределено Тогда
			// Нашли - увеличиваем количество.
			СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + СтрокаТовара.Количество;
			
		Иначе
			
			СведенияОНоменклатуре = СоответствиеСведенийОНоменклатуре.Получить(СтрокаТовара.Номенклатура);
			Если ЭтоВставкаИзБуфера
				И СведенияОНоменклатуре <> Неопределено
				И ЗначениеЗаполнено(СведенияОНоменклатуре.Услуга)
				И СведенияОНоменклатуре.Услуга Тогда
				
				Продолжить;
				
			КонецЕсли;
			СтрокаТабличнойЧасти = Объект[ИмяТаблицы].Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтрокаТовара, СписокСвойств);
			КоличествоДобавленныхСтрок = КоличествоДобавленныхСтрок + 1;
			
			Если СведенияОНоменклатуре = Неопределено Тогда
				Возврат;
			КонецЕсли;
			

			Если ЗначениеЗаполнено(СведенияОНоменклатуре.СтавкаНДС) Тогда
				СтрокаТабличнойЧасти.СуммаНДС = УчетНДСКлиентСервер.РассчитатьСуммуНДС(
					СтрокаТабличнойЧасти.Сумма,
					Объект.СуммаВключаетНДС,
					УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СведенияОНоменклатуре.СтавкаНДС));
			КонецЕсли;
			
			Документы.ПоступлениеДопРасходов.ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(
				ДанныеОбъекта, СтрокаТабличнойЧасти, ИмяТаблицы, СведенияОНоменклатуре);
				
			Если ЭтоВставкаИзБуфера 
				И Найти(СписокСвойств, "СчетУчетаБУ") <> 0 
				И ЗначениеЗаполнено(СтрокаТовара["СчетУчетаБУ"]) Тогда
				СтрокаТабличнойЧасти.СчетУчетаБУ = СтрокаТовара.СчетУчетаБУ;
			КонецЕсли;
				
		КонецЕсли;
		
		
	КонецЦикла;
	
	РассчитатьПропорциональныйНДС(Объект, ПлательщикНДС, КоэффициентПропорциональногоНДС);
	
	ОбновитьИтоги(ЭтаФорма);

	Если ЭтоВставкаИзБуфера Тогда
		ВыбранноеЗначение.КоличествоДобавленныхСтрок = КоличествоДобавленныхСтрок;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РассчитатьПропорциональныйНДС(Объект, ПлательщикНДС, КоэффициентПропорциональногоНДС)

	// Дополним суммы НДС в строках суммой НДС из шапки
	Если Объект.СуммаНДС = 0 ИЛИ Не ЗначениеЗаполнено(Объект.СпособРаспределения) Тогда
		КолонкаБазиса = Неопределено;
	ИначеЕсли Объект.СпособРаспределения = ПредопределенноеЗначение("Перечисление.СпособыРаспределенияДопРасходов.ПоКоличеству") Тогда
		КолонкаБазиса = "Количество";
	ИначеЕсли Объект.СпособРаспределения = ПредопределенноеЗначение("Перечисление.СпособыРаспределенияДопРасходов.ПоСумме") Тогда
		КолонкаБазиса = "СуммаТовара";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(КолонкаБазиса) Тогда
		БазисРаспределения = Новый Массив;		
	КонецЕсли;
	МассивСтрок = Новый Массив;
	Для Каждого СтрокаТаблицы Из Объект.Товары Цикл
		СтрокаТаблицы.СуммаНДСсУчетомШапки = СтрокаТаблицы.СуммаНДС;
		Если ЗначениеЗаполнено(КолонкаБазиса) Тогда
			БазисРаспределения.Добавить(СтрокаТаблицы[КолонкаБазиса]);
		КонецЕсли;
		МассивСтрок.Добавить(СтрокаТаблицы);
	КонецЦикла;
	Для Каждого СтрокаТаблицы Из Объект.Оборудование Цикл
		СтрокаТаблицы.СуммаНДСсУчетомШапки = СтрокаТаблицы.СуммаНДС;
		Если ЗначениеЗаполнено(КолонкаБазиса) Тогда
			БазисРаспределения.Добавить(СтрокаТаблицы[КолонкаБазиса]);
		КонецЕсли;
		МассивСтрок.Добавить(СтрокаТаблицы);
	КонецЦикла;
	
	Если ЗначениеЗаполнено(КолонкаБазиса) Тогда
		МассивРезультатаРаспределения = ОбщегоНазначенияБПКлиентСервер.РаспределитьПропорционально(Объект.СуммаНДС, БазисРаспределения);
		Если МассивРезультатаРаспределения <> Неопределено Тогда
			Для Индекс = 0 По МассивСтрок.ВГраница() Цикл
				МассивСтрок[Индекс].СуммаНДСсУчетомШапки = МассивСтрок[Индекс].СуммаНДСсУчетомШапки + МассивРезультатаРаспределения[Индекс];
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	МассивИменТабличныхЧастей = Новый Массив();
	МассивИменТабличныхЧастей.Добавить("Товары");
	МассивИменТабличныхЧастей.Добавить("Оборудование");
	
	УчетНДСКлиентСервер.РассчитатьПропорциональныйНДС(
		Объект,
		МассивИменТабличныхЧастей, 
		ПлательщикНДС,
		КоэффициентПропорциональногоНДС,
		Новый Структура("ИмяКолонкиСуммаНДС", "СуммаНДСсУчетомШапки")
	);
	
КонецПроцедуры

&НаСервере
Функция НайтиСтрокуТабличнойЧасти(ИмяТабличнойЧасти, СтруктураОтбора)

	СтрокаТабличнойЧасти = Неопределено;

	МассивНайденныхСтрок = Объект[ИмяТабличнойЧасти].НайтиСтроки(СтруктураОтбора);
	Если МассивНайденныхСтрок.Количество() > 0 Тогда
		// Нашли. Вернем первую найденную строку.
		СтрокаТабличнойЧасти = МассивНайденныхСтрок[0];
	КонецЕсли;

	Возврат СтрокаТабличнойЧасти;

КонецФункции

#Область КопированиеВставкаСтрокЧерезБуферОбмена

&НаСервере
Процедура СкопироватьСтрокиНаСервере(ИмяТаблицы)
	
	ОбщегоНазначения.СкопироватьСтрокиВБуферОбмена(Объект[ИмяТаблицы], 
		Элементы[ИмяТаблицы].ВыделенныеСтроки, Объект.Ссылка.Метаданные().Имя);

КонецПроцедуры

&НаСервере
Функция ВставитьСтрокиНаСервере(ИмяТаблицы)
	
	ПараметрыВставки = ОбработкаТабличныхЧастей.ПолучитьПараметрыВставкиДанныхИзБуфераОбмена(Объект.Ссылка, ИмяТаблицы);
	ОпределитьСписокСвойствДляВставкиИзБуфера(ПараметрыВставки);
	ОбработкаВыбораПодборВставкаИзБуфераНаСервере(ПараметрыВставки, ПараметрыВставки.ИмяТаблицы);
	
	Возврат ПараметрыВставки.КоличествоДобавленныхСтрок;
	
КонецФункции

&НаКлиенте
Функция ПолучитьИмяТекущейТабличнойЧасти()
	
	ИмяТекущейСтраницы = Элементы.ГруппаСтраницы.ТекущаяСтраница.Имя;
	ИмяТаблицы = "";
	Если ИмяТекущейСтраницы = "ГруппаТовары" Тогда
		
		ИмяТаблицы = "Товары";
		
	КонецЕсли;
	
	Возврат ИмяТаблицы;
	
КонецФункции

&НаСервере
Процедура ОпределитьСписокСвойствДляВставкиИзБуфера(ПараметрыВставки)
	
	СписокСвойств = Новый Массив;
	СписокСвойств.Добавить("Номенклатура");
	СписокСвойств.Добавить("ЕдиницаИзмерения");
	СписокСвойств.Добавить("Коэффициент");
	СписокСвойств.Добавить("Количество");
	Если ПараметрыВставки.ПоказыватьВДокументахСчетаУчета Тогда
		СписокСвойств.Добавить("СчетУчетаБУ");
	КонецЕсли;
	Если ПараметрыВставки.ИсточникИДокументОдногоВида Тогда
		
		СписокСвойств.Добавить("ДокументПартии");
		СписокСвойств.Добавить("СуммаТовара");
		СписокСвойств.Добавить("СуммаНДС");
		СписокСвойств.Добавить("Сумма");
		
	КонецЕсли;
	
	ПараметрыВставки.СписокСвойств = ОбработкаТабличныхЧастей.ПолучитьСписокСвойствИмеющихсяВТаблицеДанных(
		ПараметрыВставки.Данные, СписокСвойств);
	
КонецПроцедуры
	
&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьКомандыВставки(Форма, Доступность)

	Доступность = Не Форма.ТолькоПросмотр И Доступность;
	Элементы = Форма.Элементы;
	Элементы.ТоварыВставитьСтроки.Доступность						 = Доступность;
	Элементы.ТоварыКонтекстноеМенюВставитьСтроки.Доступность		 = Доступность;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти	//СлужебныеПроцедурыИФункции
