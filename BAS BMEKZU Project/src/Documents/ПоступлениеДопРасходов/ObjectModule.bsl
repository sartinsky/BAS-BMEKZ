#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

///////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ ПРОВЕДЕНИЯ
Перем мВалютаРегламентированногоУчета;
Перем мПартионныйУчетБУ;
Перем мПартионныйУчетБА; // ИНАГРО
Перем мРазделятьПоСтавкамНДС;
	
////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ПРОВЕДЕНИЯ - ПОДГОТОВКА ДАННЫХ ИНФОРМАЦИОННОЙ БАЗЫ

// Процедура формирует структуру шапки документа и дополнительных полей.
//
Процедура ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента) Экспорт
	
	// Дерево значений, содержащее имена необходимых полей в запросе по шапке.
	Перем ДеревоПолейЗапросаПоШапке;
	

	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента = ОбщегоНазначенияРед12.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	

	// Заполним по шапке документа дерево параметров, нужных при проведении.
	ДеревоПолейЗапросаПоШапке = ОбщегоНазначенияРед12.СформироватьДеревоПолейЗапросаПоШапке();
	ОбщегоНазначенияРед12.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "Организация"          , "ДоговорОрганизация");
	ОбщегоНазначенияРед12.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "ВидДоговора"          , "ВидДоговора");

	
	ОбщегоНазначенияРед12.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "ВедениеВзаиморасчетовНУ"      , "ВедениеВзаиморасчетовНУ");
	ОбщегоНазначенияРед12.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "СложныйНалоговыйУчет"			, "СложныйНалоговыйУчет");
	
	ОбщегоНазначенияРед12.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "НеОтноситьНаЗатратыПоНУ"   , "НеОтноситьНаЗатратыПоНУ");
	
	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа
	СтруктураШапкиДокумента = УправлениеЗапасами.СформироватьЗапросПоДеревуПолей(ЭтотОбъект, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета);
	
КонецПроцедуры // ПодготовитьСтруктуруШапкиДокумента()

// Процедура определяет параметры учетной политики
//
Процедура ПодготовитьПараметрыУчетнойПолитики(СтруктураШапкиДокумента, Отказ, Заголовок)
	
	СтруктураШапкиДокумента.Вставить("ЕстьНалогНаПрибыльДо2015", УчетнаяПолитика.ПлательщикНалогаНаПрибыльДо2015(СтруктураШапкиДокумента.Организация, СтруктураШапкиДокумента.Дата));
	СтруктураШапкиДокумента.Вставить("ЕстьНДС",            УчетнаяПолитика.ПлательщикНДС(СтруктураШапкиДокумента.Организация, СтруктураШапкиДокумента.Дата));
	
КонецПроцедуры // ПодготовитьПараметрыУчетнойПолитики()

// Процедура формирует таблицы документа.
//
Процедура ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоОборудованию, Отказ, Заголовок) Экспорт
	
	// Получим необходимые данные для проведения и проверки заполенения данные по табличной части "Товары".
	СтруктураПолей = Новый Структура;
	СтруктураСложныхПолей = Новый Структура;
	СтруктураПолей.Вставить("Номенклатура", "Номенклатура");
	СтруктураПолей.Вставить("Количество"  , "Количество * Коэффициент");
	СтруктураПолей.Вставить("Сумма"       , "Сумма");
	СтруктураПолей.Вставить("НДС"         , "СуммаНДС");

	СтруктураПолей.Вставить("СтавкаНДС"         , "Ссылка.СтавкаНДС");
	
	// ИНАГРО++
    СтруктураСложныхПолей.Вставить("Услуга",             "ВЫБОР КОГДА Номенклатура ССЫЛКА Справочник.Номенклатура ТОГДА Номенклатура.Услуга ИНАЧЕ Ложь КОНЕЦ");
    СтруктураСложныхПолей.Вставить("БланкСтрогогоУчета", "ВЫБОР КОГДА Номенклатура ССЫЛКА Справочник.Номенклатура ТОГДА Номенклатура.БланкСтрогогоУчета ИНАЧЕ Ложь КОНЕЦ");
	// ИНАГРО--

	СтруктураПолей.Вставить("СуммаТовара"          , "СуммаТовара");
	СтруктураПолей.Вставить("ДокументОприходования", "ДокументПартии");
	СтруктураПолей.Вставить("Склад" ,                "ДокументПартии.Склад");
	СтруктураПолей.Вставить("ВидДоговораПартии" ,    "ДокументПартии.ДоговорКонтрагента.ВидДоговора");
	СтруктураПолей.Вставить("ДокументПартииВидОперации", "ДокументПартии.ВидОперации");
	СтруктураПолей.Вставить("СчетУчетаБУ" ,          "СчетУчетаБУ");
	СтруктураПолей.Вставить("СчетУчетаБУЗабалансовый","СчетУчетаБУ.Забалансовый");
	
	СтруктураПолей.Вставить("НалоговоеНазначение"     	, "НалоговоеНазначение");
	СтруктураПолей.Вставить("ВидДеятельностиНДС"     	, "НалоговоеНазначение.ВидДеятельностиНДС");
	
	// ИНАГРО++
	СтруктураПолей.Вставить("ТипСклада", "ИНАГРО_Склад.ТипСклада");
	СтруктураПолей.Вставить("Склад",     "ИНАГРО_Склад");
	// ИНАГРО--

    СтруктураСложныхПолей.Вставить("СчетУчетаНДС", "Ссылка.СчетУчетаНДС");
	
	РезультатЗапросаПоТоварам = ОбщегоНазначенияРед12.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураПолей,,СтруктураСложныхПолей);
	
	// ИНАГРО++
	СтруктураПолей.Удалить("ТипСклада");
	СтруктураПолей.Удалить("Склад");
	СтруктураПолей.Вставить("ТипСклада", "ДокументПартии.Склад.ТипСклада");
	СтруктураПолей.Вставить("Склад",     "ДокументПартии.Склад");
	// ИНАГРО--

	РезультатЗапросаПоОборудованию = ОбщегоНазначенияРед12.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Оборудование", СтруктураПолей,,СтруктураСложныхПолей);
	
	ПогрешностиОкругления     = Новый Соответствие;
	
	ТаблицаПоТоварам          = ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента);
	ТаблицаПоОборудованию     = ПодготовитьТаблицуОборудования(РезультатЗапросаПоОборудованию, СтруктураШапкиДокумента);
	
	РаспределитьДопРасходы(ТаблицаПоТоварам,ТаблицаПоОборудованию, СтруктураШапкиДокумента);
	
	НалоговыйУчет.ДобавитьКолонкиТоваровРегл(ТаблицаПоТоварам, СтруктураШапкиДокумента, ПогрешностиОкругления, Истина);
	НалоговыйУчет.ДобавитьКолонкиТоваровРегл(ТаблицаПоОборудованию, СтруктураШапкиДокумента, ПогрешностиОкругления, Истина);
	
КонецПроцедуры

Функция ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента)

	ТаблицаТоваров = РезультатЗапросаПоТоварам.Выгрузить();

	Если Не СтруктураШапкиДокумента.ЕстьНДС Тогда
		// для регламентного учета считаем НДС
		ТаблицаТоваров.ЗаполнитьЗначения(0                            , "НДС");
	КонецЕсли;
	
	ТаблицаТоваров.Колонки.Добавить("ДляХозяйственнойДеятельности");	
	// для товаров колонка Амортизируется = Ложь
	ТаблицаТоваров.Колонки.Добавить("Амортизируется", Новый ОписаниеТипов("Булево"));
	
	Для каждого Строка Из ТаблицаТоваров Цикл
		Если Строка.НалоговоеНазначение = Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяНеХозДеятельность Тогда
			Строка.ДляХозяйственнойДеятельности = Ложь;
		Иначе
			Строка.ДляХозяйственнойДеятельности = Истина;
		КонецЕсли; 
	КонецЦикла;
	
	ТаблицаТоваров.Колонки.Добавить("СтавкаНДСВРознице");	
	Возврат ТаблицаТоваров;

КонецФункции // ПодготовитьТаблицуТоваров()

Функция ПодготовитьТаблицуОборудования(РезультатЗапросаПоОборудованию, СтруктураШапкиДокумента)

	ТаблицаОборудования = РезультатЗапросаПоОборудованию.Выгрузить();

	Если Не СтруктураШапкиДокумента.ЕстьНДС Тогда
		// для регламентного учета считаем НДС
		ТаблицаОборудования.ЗаполнитьЗначения(0                            , "НДС");
	КонецЕсли;
	
	ТаблицаОборудования.Колонки.Добавить("ДляХозяйственнойДеятельности");	
	// для оборудования колонка Амортизируется = Истина
	ТаблицаОборудования.Колонки.Добавить("Амортизируется", Новый ОписаниеТипов("Булево"));
	
	Для каждого Строка Из ТаблицаОборудования Цикл
		Строка.Амортизируется = Истина;
		Если Строка.НалоговоеНазначение = Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяНеХозДеятельность Тогда
			Строка.ДляХозяйственнойДеятельности = Ложь;
		Иначе
			Строка.ДляХозяйственнойДеятельности = Истина;
		КонецЕсли;
	КонецЦикла; 

	Возврат ТаблицаОборудования;

КонецФункции // ПодготовитьТаблицуТоваров()

Процедура РаспределитьДопРасходы(ТаблицаПоТоварам, ТаблицаПоОборудованию, СтруктураШапкиДокумента)
	
	//соберем в одну таблицу 
	ТаблицаТоваров = ТаблицаПоТоварам.Скопировать();
	ТаблицаТоваров.Колонки.Добавить("ИмяТаблицы");
	ТаблицаТоваров.ЗаполнитьЗначения("Товары","ИмяТаблицы");
	//колонка нужна, чтобы получился идентичный набор колонок 
	ТаблицаОборудования = ТаблицаПоОборудованию.Скопировать();
	ТаблицаОборудования.Колонки.Добавить("ИмяТаблицы");
	ТаблицаОборудования.ЗаполнитьЗначения("Оборудование","ИмяТаблицы");
	ОбщегоНазначенияБПВызовСервера.ЗагрузитьВТаблицуЗначений(ТаблицаОборудования, ТаблицаТоваров);

	//распределяем внутри одной таблицы
	Если СтруктураШапкиДокумента.Сумма = 0 тогда

		Возврат; //Дополнительное распределение не требуется

	КонецЕсли;

	СуммаКРаспределению = СтруктураШапкиДокумента.Сумма;
	НДСКРаспределению   = СтруктураШапкиДокумента.СуммаНДС;
	КолонкаБазиса       = ?(СпособРаспределения = Перечисления.СпособыРаспределенияДопРасходов.ПоКоличеству, "Количество",
	                      ?(СпособРаспределения = Перечисления.СпособыРаспределенияДопРасходов.ПоСумме,      "СуммаТовара",""));

	Если НЕ ЗначениеЗаполнено(КолонкаБазиса) тогда
		//Не выбран способ распределения
		Возврат;

	ИначеЕсли ТаблицаТоваров.Итог(КолонкаБазиса) = 0 тогда 
		//Базис распределения - пустая колонка!
		Возврат;

	КонецЕсли;

	БазисРаспределения = ТаблицаТоваров.ВыгрузитьКолонку(КолонкаБазиса);
	ИтогРаспределения  = ОбщегоНазначенияБПКлиентСервер.РаспределитьПропорционально(СуммаКРаспределению,БазисРаспределения);

	Если НЕ (НДСКРаспределению = 0) тогда
		ИтогРаспределенияНДС = ОбщегоНазначенияБПКлиентСервер.РаспределитьПропорционально(НДСКРаспределению,БазисРаспределения);
	КонецЕсли;

	Для НомерСтрокиТаблицы = 0 по ИтогРаспределения.ВГраница() цикл

		Если не ИтогРаспределения[НомерСтрокиТаблицы] = 0 тогда
			ТаблицаТоваров[НомерСтрокиТаблицы].Сумма  = ТаблицаТоваров[НомерСтрокиТаблицы].Сумма + ИтогРаспределения[НомерСтрокиТаблицы];
		КонецЕсли;

		Если Не(НДСКРаспределению = 0) тогда

			Если НЕ ИтогРаспределенияНДС[НомерСтрокиТаблицы] = 0 тогда
				ТаблицаТоваров[НомерСтрокиТаблицы].НДС = ТаблицаТоваров[НомерСтрокиТаблицы].НДС + ИтогРаспределенияНДС[НомерСтрокиТаблицы];
			КонецЕсли;

		КонецЕсли;

	КонецЦикла;
	
	//возвращаем значения в отдельные таблицы
	ТаблицаПоТоварам = ТаблицаТоваров.Скопировать();
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("ИмяТаблицы", "Оборудование");
	НайденныеСтроки = ТаблицаПоТоварам.НайтиСтроки(СтруктураПоиска);
	Для Каждого Строка Из НайденныеСтроки Цикл
		ТаблицаПоТоварам.Удалить(Строка);
	КонецЦикла;
	ТаблицаПоТоварам.Колонки.Удалить("ИмяТаблицы");
	
	ТаблицаПоОборудованию = ТаблицаТоваров.Скопировать();
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("ИмяТаблицы", "Товары");
	НайденныеСтроки = ТаблицаПоОборудованию.НайтиСтроки(СтруктураПоиска);
	Для Каждого Строка Из НайденныеСтроки Цикл
		ТаблицаПоОборудованию.Удалить(Строка);
	КонецЦикла;
	ТаблицаПоОборудованию.Колонки.Удалить("ИмяТаблицы");
	
КонецПроцедуры // ПодготовитьТаблицуТоваровРегл()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ПРОВЕДЕНИЯ - ФОРМИРОВАНИЕ ДВИЖЕНИЙ

// Формируем движения по регистрам.
//
// Параметры: 
//  СтруктураШапкиДокумента   - структура, содержащая рексвизиты шапки документа и результаты запроса по шапке
//  ТаблицаПоТоварам          - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  Отказ                     - флаг отказа в проведении
//
Процедура ДвиженияПоРегистрам(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоОборудованию, Отказ,Заголовок,РежимПроведения)

	// Общие таблицы вызываемых процедур
	ТаблицаАвансов = Новый ТаблицаЗначений;
	
	ТаблицаПоВторомуСобытиюНал = ДвиженияПоРегистрамНалоговогоУчета(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоОборудованию,  Отказ);

	ДвиженияПоРегистрамБухгалтерии(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоОборудованию, ТаблицаАвансов, ТаблицаПоВторомуСобытиюНал, Отказ,Заголовок,РежимПроведения);
	
	// ИНАГРО++
	Если ИНАГРО_ОбщийВызовСервераПовтИсп.ЕстьБСПУ() Тогда
		
		МодульИНАГРО_БиологическиеАктивы = ОбщегоНазначения.ОбщийМодуль("ИНАГРО_БиологическиеАктивы");

		Если ИНАГРО_ВидОперации = Перечисления.ИНАГРО_ВидыОперацийПоступленияБА.ПокупкаКомиссияЖивотных Тогда			
			МодульИНАГРО_БиологическиеАктивы.Приход_ЖивотныхОрганизации(Движения, ТаблицаПоТоварам, СтруктураШапкиДокумента, Перечисления.ИНАГРО_КодыОперацийУчетЖивотных.Переоценка);
		КонецЕсли;
		
		Если ИНАГРО_ВидОперации = Перечисления.ИНАГРО_ВидыОперацийПоступленияБА.ПокупкаКомиссияРастений Тогда
			МодульИНАГРО_БиологическиеАктивы.Приход_РастенияОрганизации(Движения, ТаблицаПоТоварам, СтруктураШапкиДокумента, Перечисления.ИНАГРО_КодыОперацийУчетРастений.Переоценка);
		КонецЕсли; 
		
	КонецЕсли;
	// ИНАГРО--

КонецПроцедуры // ДвиженияПоРегистрам()

// Формирует бухгалтерские и налоговые проводки по регистрам бухгалтерии
// а также регистрирует НДС с распределяемых доп. расходов в регистре НДСДопРасходы
// 
Процедура ДвиженияПоРегистрамБухгалтерии(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоОборудованию, ТаблицаАвансов, ТаблицаПоВторомуСобытиюНал, Отказ,Заголовок,РежимПроведения)

	СтруктураТаблиц = Новый Структура ("ТаблицаПоТоварам,ТаблицаПоОборудованию",ТаблицаПоТоварам,ТаблицаПоОборудованию);
	
	ТаблицаАвансов = БухгалтерскийУчетРасчетовСКонтрагентами.ЗачетАванса(ЭтотОбъект,СтруктураШапкиДокумента, мВалютаРегламентированногоУчета, СтруктураТаблиц, Отказ,Заголовок,НСтр("ru='НА';uk='НА'",Локализация.КодЯзыкаИнформационнойБазы()));
	
	ДатаДока   = Дата;
	
	ПроводкиБУ = Движения.Хозрасчетный;

	ИтогоКоличество  = ТаблицаПоТоварам.Итог("Количество");
	ИтогоСуммаТовара = ТаблицаПоТоварам.Итог("СуммаТовара");
	РаспределитьДопРасходыПоСтавкамНДС(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок);
	
	// Проводки по дополнительным расходам - товары
	Для каждого СтрокаТЧ из ТаблицаПоТоварам Цикл

		СуммаВПроводку = СтрокаТЧ.ПроводкиСуммаБезНДСРегл;

		Если Не СуммаВПроводку = 0 Тогда

			Проводка = ПроводкиБУ.Добавить();

			Проводка.Период      = ДатаДока;
			Проводка.Организация = СтруктураШапкиДокумента.Организация;
			Проводка.Содержание  = НСтр("ru='Доп. расходы при поступлении товаров';uk='Дод. витрати при надходженні товарів'",Локализация.КодЯзыкаИнформационнойБазы());

			Проводка.СчетДт      = СтрокаТЧ.СчетУчетаБУ;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Номенклатура", СтрокаТЧ.Номенклатура);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Склады",       СтрокаТЧ.Склад);
			
			// ИНАГРО++
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"БиологическиеАктивы", СтрокаТЧ.Номенклатура);

			Если    (ТипЗнч(СтрокаТЧ.Номенклатура) = Тип("СправочникСсылка.Номенклатура") И мПартионныйУчетБУ)
				ИЛИ (ТипЗнч(СтрокаТЧ.Номенклатура) = Тип("СправочникСсылка.БиологическиеАктивы") И мПартионныйУчетБА) Тогда
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Партии", СтрокаТЧ.ДокументОприходования);
			КонецЕсли;
			// ИНАГРО--
			
			Если СтрокаТЧ.ТипСклада = Перечисления.ТипыСкладов.НеавтоматизированнаяТорговаяТочка И мРазделятьПоСтавкамНДС Тогда
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "СтавкиНДС",  СтрокаТЧ.СтавкаНДСВРознице);
			КонецЕсли;  			
			Проводка.Сумма = СуммаВПроводку;
			
			Проводка.НалоговоеНазначениеДт = СтрокаТЧ.НалоговоеНазначение;
			ОценкаСтоимостиВНУ = 0;
			Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыльДо2015 И
				 СтруктураШапкиДокумента.НеОтноситьНаЗатратыПоНУ = Ложь И 
				 СтрокаТЧ.НалоговоеНазначение <> Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяНеХозДеятельность Тогда
				 
				 Проводка.СуммаНУДт = НалоговыйУчет.УчестьСуммуАвансаДо01042011(СтруктураШапкиДокумента, СуммаВПроводку);
				 ОценкаСтоимостиВНУ = Проводка.СуммаНУДт;
			 КонецЕсли;

			Если СтрокаТЧ.СчетУчетаБУ.Забалансовый Тогда

				Если НЕ (СтрокаТЧ.СчетУчетаБУ.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты ,"ВидСубконто") = Неопределено) Тогда
					Проводка.СубконтоДт.Контрагенты = СтруктураШапкиДокумента.Контрагент;
				КонецЕсли;

			Иначе

				Проводка.СчетКт = СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Контрагенты",        СтруктураШапкиДокумента.Контрагент);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Договоры",           СтруктураШапкиДокумента.ДоговорКонтрагента);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"ДокументыРасчетовСКонтрагентами", УправлениеВзаиморасчетами.ОпределитьДокументРасчетовСКонтрагентом(СтруктураШапкиДокумента.Ссылка,СтруктураШапкиДокумента.Сделка));

				Если СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом.Валютный Тогда
					Проводка.ВалютаКт        = СтруктураШапкиДокумента.ВалютаВзаиморасчетов;
					Проводка.ВалютнаяСуммаКт = СтрокаТЧ.ПроводкиСуммаБезНДСВал;
				КонецЕсли;

				СпособОценкиТоваровВРознице = УчетнаяПолитика.СпособОценкиТоваровВРознице(СтруктураШапкиДокумента.Организация, СтруктураШапкиДокумента.Дата);
				Если (СпособОценкиТоваровВРознице = Перечисления.СпособыОценкиТоваровВРознице.ПоПродажнойСтоимости) И (СтрокаТЧ.ТипСклада = Перечисления.ТипыСкладов.РозничныйМагазин или СтрокаТЧ.ТипСклада = Перечисления.ТипыСкладов.НеавтоматизированнаяТорговаяТочка) Тогда
					// проводка по наценке
					Проводка = ПроводкиБУ.Добавить();
					
					Проводка.Период      = ДатаДока;
					Проводка.Организация = СтруктураШапкиДокумента.Организация;
					Проводка.Содержание  =  НСтр("ru='Доп. расходы (наценка)';uk='Дод. витрати (націнка)'",Локализация.КодЯзыкаИнформационнойБазы());
										
					Проводка.СчетДт      = СтрокаТЧ.СчетУчетаБУ;
					Проводка.СчетКт		 = ?(СтрокаТЧ.ТипСклада = Перечисления.ТипыСкладов.НеавтоматизированнаяТорговаяТочка, ПланыСчетов.Хозрасчетный.ТорговаяНаценкаНТТ, ПланыСчетов.Хозрасчетный.ТорговаяНаценкаАТТ);
					
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Номенклатура", СтрокаТЧ.Номенклатура);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Склады",       СтрокаТЧ.Склад);
					
					// ИНАГРО++
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"БиологическиеАктивы", СтрокаТЧ.Номенклатура);
					
					Если    (ТипЗнч(СтрокаТЧ.Номенклатура) = Тип("СправочникСсылка.Номенклатура") И мПартионныйУчетБУ И СтрокаТЧ.ТипСклада = Перечисления.ТипыСкладов.РозничныйМагазин)
						ИЛИ (ТипЗнч(СтрокаТЧ.Номенклатура) = Тип("СправочникСсылка.БиологическиеАктивы") И мПартионныйУчетБА И СтрокаТЧ.ТипСклада = Перечисления.ТипыСкладов.РозничныйМагазин) Тогда 
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Партии", СтрокаТЧ.ДокументОприходования);
					КонецЕсли;
					// ИНАГРО--
					
					Если СтрокаТЧ.ТипСклада = Перечисления.ТипыСкладов.НеавтоматизированнаяТорговаяТочка И мРазделятьПоСтавкамНДС Тогда
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "СтавкиНДС",  СтрокаТЧ.СтавкаНДСВРознице);
					КонецЕсли;
					
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Номенклатура", СтрокаТЧ.Номенклатура);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Склады",       СтрокаТЧ.Склад);
					
					// ИНАГРО++
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"БиологическиеАктивы", СтрокаТЧ.Номенклатура);
					
					Если    (ТипЗнч(СтрокаТЧ.Номенклатура) = Тип("СправочникСсылка.Номенклатура") И мПартионныйУчетБУ И СтрокаТЧ.ТипСклада = Перечисления.ТипыСкладов.РозничныйМагазин)
						ИЛИ (ТипЗнч(СтрокаТЧ.Номенклатура) = Тип("СправочникСсылка.БиологическиеАктивы") И мПартионныйУчетБА И СтрокаТЧ.ТипСклада = Перечисления.ТипыСкладов.РозничныйМагазин) Тогда 
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Партии", СтрокаТЧ.ДокументОприходования);
					КонецЕсли;
					// ИНАГРО--
					
					Если СтрокаТЧ.ТипСклада = Перечисления.ТипыСкладов.НеавтоматизированнаяТорговаяТочка И мРазделятьПоСтавкамНДС Тогда
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "СтавкиНДС",  СтрокаТЧ.СтавкаНДСВРознице);
					КонецЕсли;
					
					Проводка.Сумма = - СуммаВПроводку;
					
					Проводка.НалоговоеНазначениеДт = СтрокаТЧ.НалоговоеНазначение;
					Проводка.НалоговоеНазначениеКт = СтрокаТЧ.НалоговоеНазначение;
					
					Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыльДо2015 И 
						 СтруктураШапкиДокумента.НеОтноситьНаЗатратыПоНУ = Ложь И
						 СтрокаТЧ.НалоговоеНазначение <> Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяНеХозДеятельность Тогда
						 
						Проводка.СуммаНУДт = - ОценкаСтоимостиВНУ;
						Проводка.СуммаНУКт = - ОценкаСтоимостиВНУ;
						
					КонецЕсли;
					
				КонецЕсли;					
                				
				// Проводки по НДС
				Если СтруктураШапкиДокумента.ЕстьНДС И СтрокаТЧ.ПроводкиСуммаНДСРегл > 0 Тогда

					Проводка = ПроводкиБУ.Добавить();

					Проводка.Период      = ДатаДока;

					Проводка.Организация = СтруктураШапкиДокумента.Организация;
					Проводка.Содержание  = НСтр("ru='Выделен НДС';uk='Виділений ПДВ'",Локализация.КодЯзыкаИнформационнойБазы());

					Проводка.СчетДт      = СтрокаТЧ.СчетУчетаНДС;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Контрагенты",        СтруктураШапкиДокумента.Контрагент);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Договоры",           СтруктураШапкиДокумента.ДоговорКонтрагента);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"ДокументыРасчетовСКонтрагентами", НалоговыйУчет.ОпределитьСделкуНалоговыйУчет(СтруктураШапкиДокумента, Ссылка, Сделка));

					Проводка.СчетКт      = СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Контрагенты",        СтруктураШапкиДокумента.Контрагент);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Договоры",           СтруктураШапкиДокумента.ДоговорКонтрагента);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"ДокументыРасчетовСКонтрагентами", УправлениеВзаиморасчетами.ОпределитьДокументРасчетовСКонтрагентом(СтруктураШапкиДокумента.Ссылка,СтруктураШапкиДокумента.Сделка));

					Если СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом.Валютный Тогда
						Проводка.ВалютаКт        = СтруктураШапкиДокумента.ВалютаВзаиморасчетов;
						Проводка.ВалютнаяСуммаКт = СтрокаТЧ.ПроводкиСуммаНДСВал;
					КонецЕсли;

					Проводка.Сумма       = СтрокаТЧ.ПроводкиСуммаНДСРегл;
			
					НалоговыйУчет.РазбитьПроводкуПоНДСНаПервоеВтороеСобытие(ТаблицаПоВторомуСобытиюНал, ПроводкиБУ, Проводка, 
															   "Дт", СтруктураШапкиДокумента.СчетУчетаНДСПодтвержденный, 
															  СтруктураШапкиДокумента.ДоговорКонтрагента, 
															  НалоговыйУчет.ОпределитьСделкуНалоговыйУчет(СтруктураШапкиДокумента, Ссылка, Сделка), Сделка,
															  Перечисления.СобытияОжидаемыйИПодтвержденныйНДСПриобретений.Поступление,
															  СтрокаТЧ.СтавкаНДС, СтрокаТЧ.ДляХозяйственнойДеятельности, СтрокаТЧ.ВидДеятельностиНДС, ?(Дата < '20080101', Ложь, СтрокаТЧ.Амортизируется),
													  		  СтрокаТЧ.ПроводкиСуммаНДСВал);
					
				КонецЕсли; // Проводки по НДС

			КонецЕсли; // Если СтрокаТЧ.СчетУчетаБУ.Забалансовый Тогда

			// ИНАГРО++
			// В регистр ИНАГРО_ЗакупкиОрганизаций кол-во не должно попадать, потому что этот документ только с/стоимость купленного товара увеличивает.
			КопияСтрокаТЧ = СтрокаТЧ;
			КопияСтрокаТЧ.Количество = 0;
			ИНАГРО_Общий.ИНАГРО_РегистрацияЗакупки(Движения, КопияСтрокаТЧ, СтруктураШапкиДокумента);	
			// ИНАГРО--
			
		КонецЕсли; // Если Не СуммаВПроводку = 0 Тогда

	КонецЦикла; // Для каждого СтрокаТЧ из ТаблицаПоТоварам Цикл
	
	// Проводки по дополнительным расходам - Оборудование
	Для каждого СтрокаТЧ из ТаблицаПоОборудованию Цикл

		СуммаВПроводку = СтрокаТЧ.ПроводкиСуммаБезНДСРегл;

		Если Не СуммаВПроводку = 0 Тогда

			Проводка = ПроводкиБУ.Добавить();

			Проводка.Период      = ДатаДока;
			Проводка.Организация = СтруктураШапкиДокумента.Организация;
			Проводка.Содержание  = НСтр("ru='Доп. расходы при поступлении оборудования';uk='Дод. витрати при надходженні устаткування'",Локализация.КодЯзыкаИнформационнойБазы());

			Проводка.СчетДт      = СтрокаТЧ.СчетУчетаБУ;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Номенклатура", СтрокаТЧ.Номенклатура);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Склады",       СтрокаТЧ.Склад);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"БиологическиеАктивы", СтрокаТЧ.Номенклатура);   // ИНАГРО

			Если мПартионныйУчетБУ Тогда 
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Партии", СтрокаТЧ.ДокументОприходования);
			КонецЕсли;

			Проводка.Сумма = СуммаВПроводку;

			Проводка.НалоговоеНазначениеДт = СтрокаТЧ.НалоговоеНазначение;
			Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыльДо2015 И
				 СтруктураШапкиДокумента.НеОтноситьНаЗатратыПоНУ = Ложь И 
				 СтрокаТЧ.НалоговоеНазначение <> Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяНеХозДеятельность Тогда
				 
				 Проводка.СуммаНУДт = НалоговыйУчет.УчестьСуммуАвансаДо01042011(СтруктураШапкиДокумента, СуммаВПроводку);
			 КонецЕсли;
			
			Если СтрокаТЧ.СчетУчетаБУ.Забалансовый Тогда

				Если НЕ (СтрокаТЧ.СчетУчетаБУ.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты ,"ВидСубконто") = Неопределено) Тогда
					Проводка.СубконтоДт.Контрагенты = СтруктураШапкиДокумента.Контрагент;
				КонецЕсли;


			Иначе

				Проводка.СчетКт = СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Контрагенты",        СтруктураШапкиДокумента.Контрагент);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Договоры",           СтруктураШапкиДокумента.ДоговорКонтрагента);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"ДокументыРасчетовСКонтрагентами", УправлениеВзаиморасчетами.ОпределитьДокументРасчетовСКонтрагентом(СтруктураШапкиДокумента.Ссылка,СтруктураШапкиДокумента.Сделка));

				Если СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом.Валютный Тогда
					Проводка.ВалютаКт        = СтруктураШапкиДокумента.ВалютаВзаиморасчетов;
					Проводка.ВалютнаяСуммаКт = СтрокаТЧ.ПроводкиСуммаБезНДСВал;
				КонецЕсли;

				// Проводки по НДС
				Если СтруктураШапкиДокумента.ЕстьНДС И СтрокаТЧ.ПроводкиСуммаНДСРегл > 0 Тогда
					Проводка = ПроводкиБУ.Добавить();

					Проводка.Период      = ДатаДока;

					Проводка.Организация = СтруктураШапкиДокумента.Организация;
					Проводка.Содержание  = НСтр("ru='Выделен НДС';uk='Виділений ПДВ'",Локализация.КодЯзыкаИнформационнойБазы());

					Проводка.СчетДт      = СтрокаТЧ.СчетУчетаНДС;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Контрагенты",        СтруктураШапкиДокумента.Контрагент);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Договоры",           СтруктураШапкиДокумента.ДоговорКонтрагента);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"ДокументыРасчетовСКонтрагентами", НалоговыйУчет.ОпределитьСделкуНалоговыйУчет(СтруктураШапкиДокумента, Ссылка, Сделка));
					
					Проводка.СчетКт      = СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Контрагенты",        СтруктураШапкиДокумента.Контрагент);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Договоры",           СтруктураШапкиДокумента.ДоговорКонтрагента);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"ДокументыРасчетовСКонтрагентами", УправлениеВзаиморасчетами.ОпределитьДокументРасчетовСКонтрагентом(СтруктураШапкиДокумента.Ссылка,СтруктураШапкиДокумента.Сделка));

					Если СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом.Валютный Тогда
						Проводка.ВалютаКт        = СтруктураШапкиДокумента.ВалютаВзаиморасчетов;
						Проводка.ВалютнаяСуммаКт = СтрокаТЧ.ПроводкиСуммаНДСВал;
					КонецЕсли;

					Проводка.Сумма       = СтрокаТЧ.ПроводкиСуммаНДСРегл;
					
					НалоговыйУчет.РазбитьПроводкуПоНДСНаПервоеВтороеСобытие(ТаблицаПоВторомуСобытиюНал, ПроводкиБУ, Проводка, 
															   "Дт", СтруктураШапкиДокумента.СчетУчетаНДСПодтвержденный, 
															  СтруктураШапкиДокумента.ДоговорКонтрагента, 
															  НалоговыйУчет.ОпределитьСделкуНалоговыйУчет(СтруктураШапкиДокумента, Ссылка, Сделка), Сделка,
															  Перечисления.СобытияОжидаемыйИПодтвержденныйНДСПриобретений.Поступление,
															  СтрокаТЧ.СтавкаНДС, СтрокаТЧ.ДляХозяйственнойДеятельности, СтрокаТЧ.ВидДеятельностиНДС, ?(Дата < '20080101', Ложь, СтрокаТЧ.Амортизируется),
													  		  СтрокаТЧ.ПроводкиСуммаНДСВал);
					
				КонецЕсли; // Проводки по НДС

			КонецЕсли; // Если СтрокаТЧ.СчетУчетаБУ.Забалансовый Тогда

		КонецЕсли; // Если Не СуммаВПроводку = 0 Тогда

	КонецЦикла; // Для каждого СтрокаТЧ из ТаблицаПоТоварам Цикл
	
	//Учет курсовых разниц
	Если (ВалютаДокумента <> мВалютаРегламентированногоУчета) тогда
		БухгалтерскийУчетРед12.ПереоценкаСчетовДокументаРегл(ЭтотОбъект,СтруктураШапкиДокумента, мВалютаРегламентированногоУчета,Отказ,Заголовок);
	КонецЕсли; // Учет курсовых разниц

КонецПроцедуры // ДвиженияПоРегистрамБухгалтерииРегл()

Функция ДвиженияПоРегистрамНалоговогоУчета(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоОборудованию, Отказ)
	               
	ТаблицаПоВторомуСобытиюНал = НалоговыйУчет.СоздатьСтруктуруТаблицыНалоговыхСумм();

	Если Не СтруктураШапкиДокумента.ЕстьНДС Тогда
		// Если не нужно отражать в налоговом учете, тогда не отражаем и в подсистеме учета НДС
		Возврат ТаблицаПоВторомуСобытиюНал;                    
	КонецЕсли;
		
	//Отразим Продажи в регистре ПродажиНалоговыйУчет
	НаборДвижений = Движения.ПриобретенияНалоговыйУчет;
	
	// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
	ТаблицаДвижений = НаборДвижений.ВыгрузитьКолонки();
	
	// ТОВАРЫ
	ТаблицаКопия = ТаблицаПоТоварам.Скопировать();
	ТаблицаКопия.Свернуть("СтавкаНДС, ДляХозяйственнойДеятельности,ВидДеятельностиНДС,Амортизируется","СуммаСНДСВал, СуммаНДСВал, СуммаНДСВалИсходный");
	ТаблицаПриобретений = ТаблицаКопия.Скопировать();
	
	// ОБОРУДОВАНИЕ
	ТаблицаКопия = ТаблицаПоОборудованию.Скопировать();
	ТаблицаКопия.Свернуть("СтавкаНДС, ДляХозяйственнойДеятельности,ВидДеятельностиНДС,Амортизируется","СуммаСНДСВал, СуммаНДСВал, СуммаНДСВалИсходный");
	ОбщегоНазначенияБПВызовСервера.ЗагрузитьВТаблицуЗначений(ТаблицаКопия, ТаблицаПриобретений);
	
	ТаблицаПриобретений.Колонки.Добавить("СуммаНДСПропорционально");
	Для каждого СтрокаКопии Из ТаблицаПриобретений Цикл
		Если СтрокаКопии.ВидДеятельностиНДС = Перечисления.ВидыДеятельностиНДС.ПропорциональноОблагаемая Тогда
			СтрокаКопии.СуммаНДСПропорционально = СтрокаКопии.СуммаНДСВал;
			СтрокаКопии.СуммаНДСВал = СтрокаКопии.СуммаНДСВалИсходный;
		КонецЕсли;
	КонецЦикла;
		
	ТаблицаПриобретений.Колонки.СуммаСНДСВал.Имя = "СуммаВзаиморасчетов";
	ТаблицаПриобретений.Колонки.СуммаНДСВал.Имя = "СуммаНДС";
	ОбщегоНазначенияБПВызовСервера.ЗагрузитьВТаблицуЗначений(ТаблицаПриобретений, ТаблицаДвижений);
	
	ТаблицаДвижений.ЗаполнитьЗначения(Организация       , "Организация");
	ТаблицаДвижений.ЗаполнитьЗначения(ДоговорКонтрагента, "ДоговорКонтрагента");
	ТаблицаДвижений.ЗаполнитьЗначения(НалоговыйУчет.ОпределитьСделкуНалоговыйУчет(СтруктураШапкиДокумента,
																	СтруктураШапкиДокумента.Ссылка, 
																	СтруктураШапкиДокумента.Сделка),
									  "Сделка");
	ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СобытияПриобретенияНалоговыйУчет.ПоступлениеОтПоставщика, "Событие");
	
	Если СтруктураШапкиДокумента.СложныйНалоговыйУчет Тогда
		
		// очистим налоговые реквизиты
		ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтавкиНДС.ПустаяСсылка(), 			"СтавкаНДС");
		ТаблицаДвижений.ЗаполнитьЗначения(Ложь, 										   	"ДляХозяйственнойДеятельности");
		ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.ВидыДеятельностиНДС.ПустаяСсылка(), 	"ВидДеятельностиНДС");
		ТаблицаДвижений.ЗаполнитьЗначения(Ложь, 											"Амортизируется");	
		ТаблицаДвижений.ЗаполнитьЗначения(0, 												"СуммаНДС");
		ТаблицаДвижений.ЗаполнитьЗначения(0, 												"СуммаНДСПропорционально");
		
	Иначе
		
		Если СтруктураШапкиДокумента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоРасчетнымДокументам Тогда
			// взаиморасчеты по договору по расчетным документам - необходимо заполнить в регистре реквизит РасчетныйДокумент
			ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.Сделка, "РасчетныйДокумент");
		КонецЕсли;			
		
	КонецЕсли;	
	
	Если НЕ Отказ И ТаблицаДвижений.Количество() > 0 Тогда
		
		НаборДвижений.мПериод          = Дата;
		НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;
		
		Движения.ПриобретенияНалоговыйУчет.ВыполнитьПриход();
		Движения.ПриобретенияНалоговыйУчет.Записать();
		
	КонецЕсли;
	
	// Движения по регистру Ожидаемый и подтвержденный НДС приобретений
	Если НЕ СтруктураШапкиДокумента.СложныйНалоговыйУчет Тогда
		// Движения формируются по данным рассчета "первого события" 
	   НалоговыйУчет.ДвиженияПоРегистрамНалоговогоУчетаУпрощенныйНалоговыйУчет(ЭтотОбъект, ТаблицаПоВторомуСобытиюНал);
	
	ИначеЕсли  СтруктураШапкиДокумента.ВалютаВзаиморасчетов = мВалютаРегламентированногоУчета Тогда
		
		НаборДвижений = Движения.ОжидаемыйИПодтвержденныйНДСПриобретений;
		
		// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
		ТаблицаДвижений = НаборДвижений.ВыгрузитьКолонки();
		
		// ТОВАРЫ
		ТаблицаКопия = ТаблицаПоТоварам.Скопировать();
		ТаблицаКопия.Свернуть("ДляХозяйственнойДеятельности,ВидДеятельностиНДС,Амортизируется","СуммаБезНДСВал,СуммаНДСВал, СуммаНДСВалИсходный");
		ТаблицаПриобретений = ТаблицаКопия.Скопировать();
		
		// ОБОРУДОВАНИЕ
		ТаблицаКопия = ТаблицаПоОборудованию.Скопировать();
		ТаблицаКопия.Свернуть("ДляХозяйственнойДеятельности,ВидДеятельностиНДС,Амортизируется","СуммаБезНДСВал,СуммаНДСВал, СуммаНДСВалИсходный");
		ОбщегоНазначенияБПВызовСервера.ЗагрузитьВТаблицуЗначений(ТаблицаКопия, ТаблицаПриобретений);
		
		ТаблицаПриобретений.Колонки.Добавить("СуммаНДСПропорционально");
		Для каждого СтрокаКопии Из ТаблицаПриобретений Цикл
			Если СтрокаКопии.ВидДеятельностиНДС = Перечисления.ВидыДеятельностиНДС.ПропорциональноОблагаемая Тогда
				СуммаСНДСВал = СтрокаКопии.СуммаБезНДСВал  + СтрокаКопии.СуммаНДСВал;
				СтрокаКопии.СуммаНДСПропорционально = СтрокаКопии.СуммаНДСВал;
				СтрокаКопии.СуммаНДСВал 			= СтрокаКопии.СуммаНДСВалИсходный;
				СтрокаКопии.СуммаБезНДСВал 			= СуммаСНДСВал - СтрокаКопии.СуммаНДСВал;
			КонецЕсли;
		КонецЦикла;
		
		ТаблицаПриобретений.Колонки.СуммаБезНДСВал.Имя = "БазаНДС";
		ТаблицаПриобретений.Колонки.СуммаНДСВал   .Имя = "СуммаНДС";
		ОбщегоНазначенияБПВызовСервера.ЗагрузитьВТаблицуЗначений(ТаблицаПриобретений, ТаблицаДвижений);
		ТаблицаДвижений.ЗаполнитьЗначения(Организация       , "Организация");
		ТаблицаДвижений.ЗаполнитьЗначения(ДоговорКонтрагента, "ДоговорКонтрагента");
		ТаблицаДвижений.ЗаполнитьЗначения(НалоговыйУчет.ОпределитьСделкуНалоговыйУчет(СтруктураШапкиДокумента,
																		СтруктураШапкиДокумента.Ссылка, 
																		СтруктураШапкиДокумента.Сделка),
											  "Сделка");
		ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.СтавкаНДС, "СтавкаНДС");
		ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СобытияОжидаемыйИПодтвержденныйНДСПриобретений.Поступление, 			"СобытиеНДС");
		ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.КодыОперацийОжидаемыйИПодтвержденныйНДСПриобретений.ОжидаемыйНДС , 	"КодОперации");
		
		Если НЕ Отказ И ТаблицаДвижений.Количество() > 0 Тогда
			
			НаборДвижений.мПериод          = Дата;
			НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;
			
			Движения.ОжидаемыйИПодтвержденныйНДСПриобретений.ВыполнитьПриход();
			Движения.ОжидаемыйИПодтвержденныйНДСПриобретений.Записать();
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ТаблицаПоВторомуСобытиюНал;
	
КонецФункции

Процедура РаспределитьДопРасходыПоСтавкамНДС(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок);
	
	ЗапросРаспределенияПоСтавкамНДС = Новый Запрос;
	ЗапросРаспределенияПоСтавкамНДС.Текст = 
	"ВЫБРАТЬ
	|	ДокументОприходованияТовары.Ссылка КАК ДокументОприходования,
	|	ДокументОприходованияТовары.СтавкаНДСВРознице КАК СтавкаНДСВРознице,
	|	ДокументОприходованияТовары.Номенклатура КАК Номенклатура,
	|	ДокументОприходованияТовары.СчетУчетаБУ КАК СчетУчетаБУ,
	|	ДокументОприходованияТовары.НалоговоеНазначение КАК НалоговоеНазначение,
	|	ДокументОприходованияТовары.Коэффициент КАК Коэффициент,
	|	СУММА(ДокументОприходованияТовары.Количество) КАК Количество
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг.Товары КАК ДокументОприходованияТовары
	|ГДЕ
	|	ДокументОприходованияТовары.Ссылка В(&Ссылка)
	|	И ДокументОприходованияТовары.Номенклатура В(&Номенклатура)
	// ИНАГРО++
	|	И ВЫБОР
	|			КОГДА ДокументОприходованияТовары.Ссылка.ИНАГРО_СкладВТЧ 
	|				ТОГДА ДокументОприходованияТовары.ИНАГРО_Склад.ТипСклада = ЗНАЧЕНИЕ(Перечисление.ТипыСкладов.НеавтоматизированнаяТорговаяТочка)
	|			ИНАЧЕ ДокументОприходованияТовары.Ссылка.Склад.ТипСклада = ЗНАЧЕНИЕ(Перечисление.ТипыСкладов.НеавтоматизированнаяТорговаяТочка)
	|		КОНЕЦ
	// ИНАГРО--
	|
	|СГРУППИРОВАТЬ ПО
	|	ДокументОприходованияТовары.Номенклатура,
	|	ДокументОприходованияТовары.СтавкаНДСВРознице,
	|	ДокументОприходованияТовары.Коэффициент,
	|	ДокументОприходованияТовары.Ссылка,
	|	ДокументОприходованияТовары.СчетУчетаБУ,
	|	ДокументОприходованияТовары.НалоговоеНазначение
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДокументОприходованияТовары.Ссылка,
	|	ДокументОприходованияТовары.СтавкаНДСВРознице,
	|	ДокументОприходованияТовары.Номенклатура,
	|	ДокументОприходованияТовары.СчетУчетаБУ,
	|	ДокументОприходованияТовары.НалоговоеНазначение,
	|	ДокументОприходованияТовары.Коэффициент,
	|	СУММА(ДокументОприходованияТовары.Количество)
	|ИЗ
	|	Документ.ОприходованиеТоваров.Товары КАК ДокументОприходованияТовары
	|ГДЕ
	|	ДокументОприходованияТовары.Ссылка В(&Ссылка)
	|	И ДокументОприходованияТовары.Номенклатура В(&Номенклатура)
	|	И ДокументОприходованияТовары.Ссылка.Склад.ТипСклада = ЗНАЧЕНИЕ(Перечисление.ТипыСкладов.НеавтоматизированнаяТорговаяТочка)
	|
	|СГРУППИРОВАТЬ ПО
	|	ДокументОприходованияТовары.Номенклатура,
	|	ДокументОприходованияТовары.Коэффициент,
	|	ДокументОприходованияТовары.Ссылка.Склад,
	|	ДокументОприходованияТовары.СтавкаНДСВРознице,
	|	ДокументОприходованияТовары.Ссылка,
	|	ДокументОприходованияТовары.СчетУчетаБУ,
	|	ДокументОприходованияТовары.НалоговоеНазначение
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДокументОприходованияТовары.Ссылка,
	|	ДокументОприходованияТовары.СтавкаНДСВРознице,
	|	ДокументОприходованияТовары.Номенклатура,
	|	ДокументОприходованияТовары.СчетУчетаБУ,
	|	ДокументОприходованияТовары.НалоговоеНазначение,
	|	ДокументОприходованияТовары.Коэффициент,
	|	СУММА(ДокументОприходованияТовары.Количество)
	|ИЗ
	|	Документ.ПеремещениеТоваров.Товары КАК ДокументОприходованияТовары
	|ГДЕ
	|	ДокументОприходованияТовары.Ссылка В(&Ссылка)
	|	И ДокументОприходованияТовары.Номенклатура В(&Номенклатура)
	|	И ДокументОприходованияТовары.Ссылка.СкладПолучатель.ТипСклада = ЗНАЧЕНИЕ(Перечисление.ТипыСкладов.НеавтоматизированнаяТорговаяТочка)
	|
	|СГРУППИРОВАТЬ ПО
	|	ДокументОприходованияТовары.Номенклатура,
	|	ДокументОприходованияТовары.СтавкаНДСВРознице,
	|	ДокументОприходованияТовары.Коэффициент,
	|	ДокументОприходованияТовары.Ссылка,
	|	ДокументОприходованияТовары.СчетУчетаБУ,
	|	ДокументОприходованияТовары.НалоговоеНазначение";   	
	
	ОбщаяТаблица = ТаблицаПоТоварам.Скопировать();
	ОбщаяТаблица.Свернуть("ДокументОприходования, Номенклатура", "");
	
	ЗапросРаспределенияПоСтавкамНДС.УстановитьПараметр("Ссылка", ОбщаяТаблица.ВыгрузитьКолонку("ДокументОприходования"));
	ЗапросРаспределенияПоСтавкамНДС.УстановитьПараметр("Номенклатура", ОбщаяТаблица.ВыгрузитьКолонку("Номенклатура"));
		
	ТаблицаРаспределенияПоСтавкамНДС = ЗапросРаспределенияПоСтавкамНДС.Выполнить().Выгрузить();
	
	РаспределитьПоСтавкамНДС(ТаблицаПоТоварам, ТаблицаРаспределенияПоСтавкамНДС, СтруктураШапкиДокумента, Отказ, Заголовок);
 
КонецПроцедуры

Процедура РаспределитьПоСтавкамНДС(ТаблицаПоТоварам, ТаблицаРаспределенияПоСтавкамНДС, СтруктураШапкиДокумента, Отказ, Заголовок)
	
	ТаблицаПоТоварам.Колонки.Добавить("МеткаРаспределения", Новый ОписаниеТипов("Булево"));
	
	ДопСтроки = Новый ТаблицаЗначений;
	
	Для Каждого Колонка Из ТаблицаПоТоварам.Колонки Цикл
		ДопСтроки.Колонки.Добавить(Колонка.Имя, Колонка.ТипЗначения);
	КонецЦикла;	
	
	Для Каждого Строка Из ТаблицаПоТоварам Цикл
		
		Если Не Строка.ТипСклада = Перечисления.ТипыСкладов.НеавтоматизированнаяТорговаяТочка Тогда
		     Продолжить;
		КонецЕсли;  
		// В таблице распределения по ставкам могут быть записи с любыми комбинациями 
		// ДокументОприходования, Номенклатура, СерияНоменклатуры, ХарактеристикаНоменклатуры
		// Отберем нужные
		СтруктураПоиска = Новый Структура ("ДокументОприходования,
											|Номенклатура, 
											|СчетУчетаБУ",
											Строка.ДокументОприходования,
											Строка.Номенклатура,
											Строка.СчетУчетаБУ);
											
											
		Если СтруктураШапкиДокумента.ЕстьНДС Тогда
			
			СтруктураПоиска.Вставить("НалоговоеНазначение",  		Строка.НалоговоеНазначение);
			
		КонецЕсли;
											
		МассивСтрокРаспределения = ТаблицаРаспределенияПоСтавкамНДС.НайтиСтроки(СтруктураПоиска);
		
		Если МассивСтрокРаспределения.Количество() = 0 Тогда
			ТекстСообщения =  СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Не найден в документе  ""%1"" ';uk='Не знайдено в документі  ""%1""'"), Строка.ДокументОприходования) + " товар " + Строка.Номенклатура +
			?(СтруктураШапкиДокумента.ЕстьНДС, 
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru=', налоговое назначение: ""%1""';uk=', податкове призначення: ""%1""'"), Строка.НалоговоеНазначение), "");
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , , , Отказ);
			
		КонецЕсли;
		
		ИтогоКоличество = 0;
		Для Каждого Элемент Из МассивСтрокРаспределения Цикл
			ИтогоКоличество = ИтогоКоличество + Элемент.Количество * Элемент.Коэффициент;
		КонецЦикла;
		
		Распр_ПроводкиСуммаБезНДСРегл	= Строка.ПроводкиСуммаБезНДСРегл;
		Распр_ПроводкиСуммаБезНДСВал	= Строка.ПроводкиСуммаБезНДСВал;
		Распр_ПроводкиСуммаНДСРегл		= Строка.ПроводкиСуммаНДСРегл;
		Распр_ПроводкиСуммаНДСВал 		= Строка.ПроводкиСуммаНДСВал;
		Распр_СуммаНДСРегл		 		= Строка.СуммаНДСРегл;
		
		ПогрешностиОкругления = Новый Соответствие;
		
		Для Каждого Элемент Из МассивСтрокРаспределения Цикл
			
			Если ИтогоКоличество <= 0 Тогда         
				Прервать;
			КонецЕсли;
			
			Если Элемент.Количество = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			ДопСтрока = ДопСтроки.Добавить();
			ЗаполнитьЗначенияСвойств(ДопСтрока, Строка);
			
			ДопСтрока.СтавкаНДСВРознице = Элемент.СтавкаНДСВРознице;
			
			Если Элемент.Количество < ИтогоКоличество Тогда
				КоэффРаспред = Элемент.Количество * Элемент.Коэффициент/ИтогоКоличество;
			Иначе
				КоэффРаспред = 1;
			КонецЕсли;
			
			ДопСтрока.ПроводкиСуммаБезНДСРегл	= ОбщегоНазначенияРед12.ОкруглитьСУчетомПогрешности(Распр_ПроводкиСуммаБезНДСРегл* КоэффРаспред, 2, , ПогрешностиОкругления, "Сумма11");
			ДопСтрока.ПроводкиСуммаБезНДСВал	= ОбщегоНазначенияРед12.ОкруглитьСУчетомПогрешности(Распр_ПроводкиСуммаБезНДСВал * КоэффРаспред, 2, , ПогрешностиОкругления, "Сумма12");
			ДопСтрока.ПроводкиСуммаНДСРегл		= ОбщегоНазначенияРед12.ОкруглитьСУчетомПогрешности(Распр_ПроводкиСуммаНДСРегл	* КоэффРаспред, 2, , ПогрешностиОкругления, "Сумма21");
			ДопСтрока.ПроводкиСуммаНДСВал		= ОбщегоНазначенияРед12.ОкруглитьСУчетомПогрешности(Распр_ПроводкиСуммаНДСВал 	* КоэффРаспред, 2, , ПогрешностиОкругления, "Сумма22");
			ДопСтрока.СуммаНДСРегл				= ОбщегоНазначенияРед12.ОкруглитьСУчетомПогрешности(Распр_СуммаНДСРегл 			* КоэффРаспред, 2, , ПогрешностиОкругления, "Сумма23");
			
		КонецЦикла;
		// Исходная строка будет помечена
		Строка.МеткаРаспределения = Истина;
		
	КонецЦикла;
	
	// Теперь доп строки добавим в таблицу по товарам
	Для Каждого ДопСтрока Из ДопСтроки Цикл
		НоваяСтрока = ТаблицаПоТоварам.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ДопСтрока);
	КонецЦикла;
			
	// После обработки удалим распределенные строки 
	Инд=0;
	Пока Инд < ТаблицаПоТоварам.Количество() Цикл
		Если ТаблицаПоТоварам[Инд].МеткаРаспределения = Истина Тогда
			ТаблицаПоТоварам.Удалить(Инд);
		Иначе
			Инд = Инд+1;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры//РаспределитьПоСтавкамНДС

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)

	ТипДанныхЗаполнения = ТипЗнч(ДанныеЗаполнения);
	Если ДанныеЗаполнения <> Неопределено И ТипДанныхЗаполнения <> Тип("Структура")
		И Метаданные().ВводитсяНаОсновании.Содержит(ДанныеЗаполнения.Метаданные()) Тогда
		ЗаполнитьПоДокументуОснованию(ДанныеЗаполнения);
	Иначе
		СуммаВключаетНДС = Ложь;
	КонецЕсли;
	
	ЗаполнениеДокументов.Заполнить(ЭтотОбъект, ДанныеЗаполнения);
	
	Если ПустаяСтрока(Содержание) Тогда
		Содержание	= НСтр("ru='Доп. расходы';uk='Дод. витрати'");
	КонецЕсли;

КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)

	Дата = НачалоДня(ОбщегоНазначенияБП.ПолучитьРабочуюДату());
	Ответственный = Пользователи.ТекущийПользователь();
	
	Если Год(ОбъектКопирования.Дата) <> Год(Дата) Тогда
		Документы.ПоступлениеДопРасходов.РассчитатьПропорциональныйНДС(ЭтотОбъект,
			УчетнаяПолитика.ПлательщикНДС(Организация, Дата),
			НалоговыйУчет.ПолучитьКоэффициентПропорциональногоНДС(Организация, Дата)
			);
	КонецЕсли;

КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)

	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;

	СуммаДокумента = УчетНДС.ПолучитьСуммуДокументаСНДС(ЭтотОбъект);

	ПлательщикНДС = УчетнаяПолитика.ПлательщикНДС(Организация, Дата);
	
	Если НЕ ПлательщикНДС Тогда
		// организация - не плательщик НДС. Установим во всех ТЧ признак "НДС включен в стоимость"
		НеОБлНДСДеятельность = Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяХозДеятельность;
		
		Для каждого СтрокаТЧ  Из Товары Цикл
		    СтрокаТЧ.НалоговоеНазначение = НеОБлНДСДеятельность;
		КонецЦикла; 
		Для каждого СтрокаТЧ  Из Оборудование Цикл
		    СтрокаТЧ.НалоговоеНазначение = НеОБлНДСДеятельность;
		КонецЦикла; 
	КонецЕсли;
	
	Если Не ЕстьАвансДо01042011 Тогда
		СуммаВДВРПоАвансуДо01042011	= 0;
	КонецЕсли;

	ДополнительныеСвойства.Вставить("РежимЗаписи", РежимЗаписи);

КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)

	МассивНепроверяемыхРеквизитов = Новый Массив();
	
	ПлательщикНДС = УчетнаяПолитика.ПлательщикНДС(Организация, Дата);
	
	СпособОценкиМПЗ = УчетнаяПолитика.СпособОценкиМПЗ(Организация, Дата);
	ПартионныйУчетБУ = (СпособОценкиМПЗ = Перечисления.СпособыОценки.ФИФО) ИЛИ (СпособОценкиМПЗ = Перечисления.СпособыОценки.ЛИФО);

	БУ = ПланыСчетов.Хозрасчетный.Товары.ПолучитьОбъект();
	ВестиСкладскойУчетБУ  = ?(
		БУ.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады, "ВидСубконто") = Неопределено, 
		Ложь, 
		Истина);
	
	БУ = ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахНТТ.ПолучитьОбъект();
	РазделятьПоСтавкамНДС  = ?(
		БУ.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтавкиНДС, "ВидСубконто") = Неопределено,
		Ложь,
		Истина);
	
	РеквизитыДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДоговорКонтрагента, "СложныйНалоговыйУчет");
	СложныйНалоговыйУчет = ЗначениеЗаполнено(ДоговорКонтрагента) И (РеквизитыДоговора.СложныйНалоговыйУчет);
	
	Если ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
		ТекстСообщения = "";
		Если НЕ УчетВзаиморасчетов.ПроверитьВозможностьПроведенияВРеглУчете(
			ЭтотОбъект, ДоговорКонтрагента, ТекстСообщения) Тогда
			ТекстСообщения = ОбщегоНазначенияБПКлиентСервер.ПолучитьТекстСообщения(, "Корректность",
				НСтр("ru='Договор';uk='Договір'"),,, ТекстСообщения);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект,
				"ДоговорКонтрагента", "Объект", Отказ);
		КонецЕсли;
	КонецЕсли;
	
	Если (Товары.Итог("Сумма") <> 0) ИЛИ (Оборудование.Итог("Сумма") <> 0) Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Сумма");
	КонецЕсли;
	Если Сумма = 0 Тогда
		МассивНепроверяемыхРеквизитов.Добавить("СпособРаспределения");
		МассивНепроверяемыхРеквизитов.Добавить("СтавкаНДС");
	КонецЕсли;

	Если Не ПлательщикНДС Тогда
		МассивНепроверяемыхРеквизитов.Добавить("СчетУчетаНДС");		
	КонецЕсли;
	Если Не ПлательщикНДС ИЛИ СложныйНалоговыйУчет Тогда
		МассивНепроверяемыхРеквизитов.Добавить("СчетУчетаНДСПодтвержденный");		
	КонецЕсли;
	
	Если Не ЕстьАвансДо01042011 Тогда
		МассивНепроверяемыхРеквизитов.Добавить("СуммаВДВРПоАвансуДо01042011");		
	КонецЕсли;

	// Проверка заполнения табличной части "Товары"
	Если СпособРаспределения = Перечисления.СпособыРаспределенияДопРасходов.ПоСумме ИЛИ Сумма = 0 Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Товары.Количество");
		МассивНепроверяемыхРеквизитов.Добавить("Оборудование.Количество");
	КонецЕсли;
	Если СпособРаспределения = Перечисления.СпособыРаспределенияДопРасходов.ПоКоличеству ИЛИ Сумма = 0 Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Товары.СуммаТовара");
		МассивНепроверяемыхРеквизитов.Добавить("Оборудование.СуммаТовара");
	КонецЕсли;

	Если Не ПлательщикНДС Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Товары.НалоговоеНазначение");
		МассивНепроверяемыхРеквизитов.Добавить("Оборудование.НалоговоеНазначение");
	КонецЕсли;
	
	Для Каждого СтрокаТовары Из Товары Цикл
		
		Префикс = "Товары[" + Формат((СтрокаТовары.НомерСтроки - 1), "ЧН=; ЧГ=") + "].";
		ИмяСписка = НСтр("ru='Товары';uk='Товари'");
		
		ПроверятьСклад = (ПартионныйУчетБУ ИЛИ ВестиСкладскойУчетБУ) И ЗначениеЗаполнено(СтрокаТовары.ДокументПартии);
		
		Если ПроверятьСклад Тогда
			МетаданныеДокумента = СтрокаТовары.ДокументПартии.Метаданные();			
			
			// ИНАГРО++ 
			ВыдатьСообщение = Ложь;
			
			Если  ИНАГРО_ОбщийВызовСервераПовтИсп.ЕстьБСПУ()
				И СтрокаТовары.ДокументПартии.Метаданные().Имя = "ИНАГРО_Забой" Тогда
				//
			ИначеЕсли (ТипЗнч(СтрокаТовары.ДокументПартии) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг")
				   ИЛИ ТипЗнч(СтрокаТовары.ДокументПартии) = Тип("ДокументСсылка.АвансовыйОтчет")) Тогда
				Если НЕ СтрокаТовары.ДокументПартии.ИНАГРО_СкладВТЧ И НЕ ЗначениеЗаполнено(СтрокаТовары.ДокументПартии.Склад) Тогда
				    ВыдатьСообщение = Истина;
				КонецЕсли;
			ИначеЕсли НЕ (ОбщегоНазначенияБП.ЕстьРеквизитДокумента("Склад", МетаданныеДокумента))
				  ИЛИ НЕ ЗначениеЗаполнено(СтрокаТовары.ДокументПартии.Склад) Тогда
			    ВыдатьСообщение = Истина;
			КонецЕсли;
			
			Если ВыдатьСообщение Тогда
				
				ТекстСообщения = ОбщегоНазначенияБПКлиентСервер.ПолучитьТекстСообщения("Колонка", "Корректность", 
					НСтр("ru='Документ партии';uk='Документ партії'"),
					СтрокаТовары.НомерСтроки, ИмяСписка,
					НСтр("ru='По указанному документу партии невозможно определить склад. Нет реквизита ""Склад"" или реквизит не заполнен';uk='За вказаним документом партії неможливо визначити склад. Немає реквізиту ""Склад"" або реквізит не заповнений'")
				);
				Поле = Префикс + "ДокументПартии";
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);

			КонецЕсли;
			// ИНАГРО--			
						
		КонецЕсли;
		
	КонецЦикла;

	Для Каждого СтрокаОборудование Из Оборудование Цикл
		
		Префикс = "Оборудование[" + Формат((СтрокаОборудование.НомерСтроки - 1), "ЧН=; ЧГ=") + "].";
		ИмяСписка = НСтр("ru='Оборудование';uk='Устаткування'");
		
		ПроверятьСклад = (ПартионныйУчетБУ ИЛИ ВестиСкладскойУчетБУ) И ЗначениеЗаполнено(СтрокаОборудование.ДокументПартии);
		
		Если ПроверятьСклад Тогда
			МетаданныеДокумента = СтрокаОборудование.ДокументПартии.Метаданные();
			
			Если НЕ (ОбщегоНазначенияБП.ЕстьРеквизитДокумента("Склад", МетаданныеДокумента))
			 ИЛИ НЕ ЗначениеЗаполнено(СтрокаОборудование.ДокументПартии.Склад) Тогда
			
				ТекстСообщения = ОбщегоНазначенияБПКлиентСервер.ПолучитьТекстСообщения("Колонка", "Корректность", 
					НСтр("ru='Документ партии';uk='Документ партії'"),
					СтрокаОборудование.НомерСтроки, ИмяСписка,
					НСтр("ru='По указанному документу партии невозможно определить склад. Нет реквизита ""Склад"" или реквизит не заполнен';uk='За вказаним документом партії неможливо визначити склад. Немає реквізиту ""Склад"" або реквізит не заповнений'")
				);
				Поле = Префикс + "ДокументПартии";
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);

КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)

	Перем Заголовок, СтруктураШапкиДокумента;
	Перем ТаблицаПоТоварам, ТаблицаПоОборудованию;

	// ПОДГОТОВКА ПРОВЕДЕНИЯ ПО ДАННЫМ ДОКУМЕНТА
	ПроведениеСервер.ПодготовитьНаборыЗаписейКПроведению(ЭтотОбъект);
	Если РучнаяКорректировка Тогда
		Возврат;
	КонецЕсли;

    мВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	
	СпособОценкиМПЗ   = УчетнаяПолитика.СпособОценкиМПЗ(Организация, Дата);
	мПартионныйУчетБУ = (СпособОценкиМПЗ = Перечисления.СпособыОценки.ФИФО) ИЛИ (СпособОценкиМПЗ = Перечисления.СпособыОценки.ЛИФО);
	
	// ИНАГРО++
	Если ИНАГРО_ОбщийВызовСервераПовтИсп.ЕстьБСПУ() Тогда
		
		МодульИНАГРО_БиологическиеАктивы = ОбщегоНазначения.ОбщийМодуль("ИНАГРО_БиологическиеАктивы");
		
		СпособОценкиБА    = МодульИНАГРО_БиологическиеАктивы.СпособОценкиБА(Организация, НачалоМесяца(Дата)); 
		мПартионныйУчетБА = СпособОценкиБА = Перечисления.СпособыОценки.ФИФО ИЛИ СпособОценкиБА = Перечисления.СпособыОценки.ЛИФО;
		
	КонецЕсли;
	// ИНАГРО--

	мРазделятьПоСтавкамНДС = БухгалтерскийУчетВызовСервераПовтИсп.ИспользуетсяРазделениеПоСтавкамНДСВНТТ();

	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначенияБПВызовСервера.ПредставлениеДокументаПриПроведении(Ссылка);
	
	ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента);
	ПодготовитьПараметрыУчетнойПолитики(СтруктураШапкиДокумента, Отказ, Заголовок);	
	ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоОборудованию, Отказ, Заголовок);

	Если НЕ Отказ Тогда
		ДвиженияПоРегистрам(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоОборудованию, Отказ,Заголовок,РежимПроведения);
	КонецЕсли;
	
	Движения.Хозрасчетный.ВыполнитьДействияПередЗаписьюДвижений();

	ПроведениеСервер.ПодготовитьНаборыЗаписейКЗаписиДвижений(ЭтотОбъект);

		
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)

	ПроведениеСервер.ПодготовитьНаборыЗаписейКОтменеПроведения(ЭтотОбъект);
	Движения.Записать();


КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Процедура ЗаполнитьПоДокументуОснованию(ДанныеЗаполнения)

	ЗаполнениеДокументов.ЗаполнитьПоОснованию(ЭтотОбъект, ДанныеЗаполнения);
	
	Если    ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг")
		ИЛИ (ИНАГРО_ОбщийВызовСервераПовтИсп.ЕстьБСПУ() И ДанныеЗаполнения.Метаданные().Имя = "ИНАГРО_ПоступлениеБиологическихАктивов") Тогда // ИНАГРО
		ЗаполнитьПоПоступлению(ДанныеЗаполнения); 		
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.АвансовыйОтчет") Тогда
		ЗаполнитьПоАвансовомуОтчету(ДанныеЗаполнения);
	КонецЕсли;

	// Расчитывать пропорциональный НДС нет смысла, т.к. суммы доп. расходов не еще указаны
	
КонецПроцедуры

Процедура ЗаполнитьПоПоступлению(ДанныеЗаполнения, Знач ИмяТабличнойЧасти = Неопределено) Экспорт

	ВалютаРеглУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	
	// ИНАГРО++
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
		ИмяДокумента       = "ПоступлениеТоваровУслуг";
	ИначеЕсли ДанныеЗаполнения.Метаданные().Имя = "ИНАГРО_ПоступлениеБиологическихАктивов" Тогда
		ИмяДокумента       = "ИНАГРО_ПоступлениеБиологическихАктивов";				     
		ИНАГРО_ВидОперации = ДанныеЗаполнения.ВидОперации;
	КонецЕсли;
	// ИНАГРО--
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", ДанныеЗаполнения);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Док.Ссылка,
	|	Док.Организация,
	|	Док.Склад,
	|	Док.Контрагент,
	|	Док.ДоговорКонтрагента,
	|	Док.ВалютаДокумента,
	|	Док.КурсВзаиморасчетов,
	|	Док.КратностьВзаиморасчетов,
	|	Док.СуммаВключаетНДС,
	|	Док.СчетУчетаРасчетовСКонтрагентом,
	|	Док.СчетУчетаРасчетовПоАвансам,
	|	Док.СчетУчетаНДС,
	|	Док.СчетУчетаНДСПодтвержденный" + ?(ИмяДокумента = "ПоступлениеТоваровУслуг", ", // ИНАГРО
	|	Док.СчетУчетаРасчетовПоТаре", "") + "
	|ИЗ
	|	Документ." + ИмяДокумента + " КАК Док // ИНАГРО
	|ГДЕ
	|	Док.Ссылка = &ДокументОснование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	1 КАК НомерТабличнойЧасти,
	|	Док.НомерСтроки,
	|	Док.Номенклатура,
	|	Док.Ссылка,
	|	Док.Сумма,
	|	Док.СуммаНДС,
	|	Док.Количество, " + ?(ИмяДокумента = "ИНАГРО_ПоступлениеБиологическихАктивов", "  // ИНАГРО
	|	Док.Голов, ", "") + "
	|	Док.ЕдиницаИзмерения,
	|	Док.Коэффициент,
	|	Док.СчетУчетаБУ,
	|	Док.НалоговоеНазначение, " + ?(ИмяДокумента = "ИНАГРО_ПоступлениеБиологическихАктивов", " // ИНАГРО
	|	Док.Ссылка.Склад ", "
	|	ВЫБОР
	|		КОГДА Док.Ссылка.ИНАГРО_СкладВТЧ
	|			ТОГДА Док.ИНАГРО_Склад
	|		ИНАЧЕ Док.Ссылка.Склад
	|	КОНЕЦ") + "  КАК Склад
	|ИЗ
	|	Документ." + ИмяДокумента + ".Товары КАК Док // ИНАГРО
	|ГДЕ
	|	Док.Ссылка = &ДокументОснование" + ?(ИмяДокумента = "ПоступлениеТоваровУслуг", " // ИНАГРО
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	2,
	|	Док.НомерСтроки,
	|	Док.Номенклатура,
	|	Док.Ссылка,
	|	Док.Сумма,
	|	Док.СуммаНДС,
	|	Док.Количество,
	|	Док.ЕдиницаИзмерения,
	|	Док.Коэффициент,
	|	Док.СчетУчетаБУ,
	|	Док.НалоговоеНазначение,
	|	Док.Ссылка.Склад // ИНАГРО
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг.Оборудование КАК Док
	|ГДЕ
	|	Док.Ссылка = &ДокументОснование", " 
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерТабличнойЧасти,
	|	Док.НомерСтроки");
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	ВыборкаШапки = РезультатЗапроса[0].Выбрать();
	
	Если ВыборкаШапки.Следующий() Тогда
		
		Если ВалютаДокумента <> ВалютаРеглУчета Тогда
			КурсИКратность          = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаДокумента, Дата);
			КурсВзаиморасчетов      = КурсИКратность.Курс;
			КратностьВзаиморасчетов = КурсИКратность.Кратность;
		КонецЕсли;
		
		Если ДоговорКонтрагента = ВыборкаШапки.ДоговорКонтрагента Тогда
			СчетУчетаРасчетовСКонтрагентом 	= ВыборкаШапки.СчетУчетаРасчетовСКонтрагентом;
			СчетУчетаРасчетовПоАвансам 		= ВыборкаШапки.СчетУчетаРасчетовПоАвансам;
			СчетУчетаНДС 			        = ВыборкаШапки.СчетУчетаНДС;
			СчетУчетаНДСПодтвержденный      = ВыборкаШапки.СчетУчетаНДСПодтвержденный;
		КонецЕсли;
		
		Выборка = РезультатЗапроса[1].Выбрать();
		Пока Выборка.Следующий() Цикл
			
			ТекущееИмяТабличнойЧасти = ?(Выборка.НомерТабличнойЧасти = 1, "Товары", "Оборудование");
			Если ЗначениеЗаполнено(ИмяТабличнойЧасти) И ИмяТабличнойЧасти <> ТекущееИмяТабличнойЧасти Тогда
				// При заполнении из формы документа, заполнется тоьлко одна табличная часть
				Продолжить;
			КонецЕсли;
            СтрокаТабличнойЧасти = ЭтотОбъект[ТекущееИмяТабличнойЧасти].Добавить();
			
			СтрокаТабличнойЧасти.Номенклатура   = Выборка.Номенклатура;
			СтрокаТабличнойЧасти.ЕдиницаИзмерения = Выборка.ЕдиницаИзмерения;
			СтрокаТабличнойЧасти.Коэффициент    = Выборка.Коэффициент;
			СтрокаТабличнойЧасти.Количество     = Выборка.Количество;
			СтрокаТабличнойЧасти.ДокументПартии = ДанныеЗаполнения;
			СтрокаТабличнойЧасти.СуммаТовара    = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(
				Выборка.Сумма + ?(НЕ ВыборкаШапки.СуммаВключаетНДС, Выборка.СуммаНДС, 0),
				ВыборкаШапки.ВалютаДокумента,
				ВалютаДокумента,
				ВыборкаШапки.КурсВзаиморасчетов,
				КурсВзаиморасчетов,
				ВыборкаШапки.КратностьВзаиморасчетов,
				КратностьВзаиморасчетов);
			
			СтрокаТабличнойЧасти.СчетУчетаБУ   = Выборка.СчетУчетаБУ;
			СтрокаТабличнойЧасти.НалоговоеНазначение = Выборка.НалоговоеНазначение;
			Если ТекущееИмяТабличнойЧасти = "Товары" ИЛИ ИмяТабличнойЧасти = "Товары" Тогда	// ИНАГРО			
				СтрокаТабличнойЧасти.ИНАГРО_Склад  = Выборка.Склад; 
			КонецЕсли;

		КонецЦикла;
		
	КонецЕсли; 

КонецПроцедуры

Процедура ЗаполнитьПоАвансовомуОтчету(ДанныеЗаполнения) Экспорт

	ВалютаРеглУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", ДанныеЗаполнения);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Док.Ссылка,
	|	Док.Организация,
	|	Док.Склад,
	|	Док.ИНАГРО_СкладВТЧ, // ИНАГРО
	|	Док.ВалютаДокумента,
	|	Док.КурсДокумента КАК КурсВзаиморасчетов,
	|	Док.КратностьДокумента КАК КратностьВзаиморасчетов,
	|	Док.СуммаВключаетНДС
	|ИЗ
	|	Документ.АвансовыйОтчет КАК Док
	|ГДЕ
	|	Док.Ссылка = &ДокументОснование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Док.НомерСтроки,
	|	Док.Номенклатура,
	|	Док.Ссылка,
	|	Док.Сумма,
	|	Док.СуммаНДС,
	|	Док.Количество,
	|	Док.ЕдиницаИзмерения,
	|	Док.Коэффициент,
	|	Док.СчетУчетаБУ,
	|	Док.ИНАГРО_Склад, // ИНАГРО
	|	Док.НалоговоеНазначение
	|ИЗ
	|	Документ.АвансовыйОтчет.Товары КАК Док
	|ГДЕ
	|	Док.Ссылка = &ДокументОснование
	|
	|УПОРЯДОЧИТЬ ПО
	|	Док.НомерСтроки";
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	ВыборкаШапки = РезультатЗапроса[0].Выбрать();
	
	Если ВыборкаШапки.Следующий() Тогда
		
		Если ВалютаДокумента <> ВалютаРеглУчета Тогда
			КурсИКратность          = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаДокумента, Дата);
			КурсВзаиморасчетов      = КурсИКратность.Курс;
			КратностьВзаиморасчетов = КурсИКратность.Кратность;
		КонецЕсли;
		
		// Счета расчетов не могут быть заполнены так как авансовый отчет может быть оформлен по нескольким контрагентам
		
		Выборка = РезультатЗапроса[1].Выбрать();
		Пока Выборка.Следующий() Цикл
			
			СтрокаТабличнойЧасти = Товары.Добавить();
			
			СтрокаТабличнойЧасти.Номенклатура   = Выборка.Номенклатура;
			СтрокаТабличнойЧасти.ЕдиницаИзмерения = Выборка.ЕдиницаИзмерения;
			СтрокаТабличнойЧасти.Коэффициент    = Выборка.Коэффициент;
			СтрокаТабличнойЧасти.Количество     = Выборка.Количество;
			СтрокаТабличнойЧасти.ДокументПартии = ДанныеЗаполнения;
			СтрокаТабличнойЧасти.СуммаТовара    = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(
				Выборка.Сумма + ?(НЕ ВыборкаШапки.СуммаВключаетНДС, Выборка.СуммаНДС, 0),
				ВыборкаШапки.ВалютаДокумента,
				ВалютаДокумента,
				ВыборкаШапки.КурсВзаиморасчетов,
				КурсВзаиморасчетов,
				ВыборкаШапки.КратностьВзаиморасчетов,
				КратностьВзаиморасчетов);
			
			СтрокаТабличнойЧасти.СчетУчетаБУ   = Выборка.СчетУчетаБУ;
			СтрокаТабличнойЧасти.НалоговоеНазначение = Выборка.НалоговоеНазначение;
			
			// ИНАГРО++
			Если  ОбщегоНазначенияБП.ЕстьРеквизитДокумента("ИНАГРО_СкладВТЧ", ДанныеЗаполнения.Метаданные())
				И ДанныеЗаполнения.ИНАГРО_СкладВТЧ Тогда
				СтрокаТабличнойЧасти.ИНАГРО_Склад = Выборка.ИНАГРО_Склад;
			Иначе
				СтрокаТабличнойЧасти.ИНАГРО_Склад = ДанныеЗаполнения.Склад;
			КонецЕсли;
			// ИНАГРО--
		
		КонецЦикла;
		
	КонецЕсли; 

КонецПроцедуры

#КонецЕсли