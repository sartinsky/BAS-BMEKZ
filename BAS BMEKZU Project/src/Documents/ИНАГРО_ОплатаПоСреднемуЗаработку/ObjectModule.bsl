#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ОбработкаПроведения(Отказ, Режим)
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКПроведению(ЭтотОбъект);
	Заголовок = ОбщегоНазначенияБПВызовСервера.ПредставлениеДокументаПриПроведении(Ссылка);
	
	ВыборкаПоШапкеДокумента = СформироватьЗапросПоШапке().Выбрать();
	ВыборкаПоШапкеДокумента.Следующий();
	ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ);
	// Движения стоит добавлять, если в проведении еще не отказано (отказ =ложь)
	Если НЕ Отказ Тогда
		
		////////////////////////////////////////////////////////////////////////
		// основные Начисления
		Если ВыборкаПоШапкеДокумента.СпособРасчета = Перечисления.СпособыРасчетаНачислений.ДоплатаДоСреднегоЗаработка Тогда
			ДобавитьСтрокуВДвиженияПоРегистрамСведений(ВыборкаПоШапкеДокумента);
			
		Иначе
			ВыборкаПоНачислениям = СформироватьЗапросПоНачислениям().Выбрать();
			Пока ВыборкаПоНачислениям.Следующий() Цикл 
				
				ПроверитьЗаполнениеСтрокиНачисления(ВыборкаПоШапкеДокумента, ВыборкаПоНачислениям, Отказ);
				Если НЕ Отказ Тогда
					ДобавитьСтрокуОсновныхНачислений(ВыборкаПоНачислениям, Движения.ИНАГРО_Начисления);
					ДобавитьСтрокуВДвиженияПоРегистрамНакопления(ВыборкаПоНачислениям)
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
		////////////////////////////////////////////////////////////////////////
		// Расчет средней
		ВыборкаПоСредним = СформироватьЗапросПоРасчетСреднего().Выбрать();
		Пока ВыборкаПоСредним.Следующий() Цикл
			
			ПроверитьЗаполнениеСтрокиРасчетСреднего(ВыборкаПоСредним, Отказ);
			Если НЕ Отказ Тогда
				ДобавитьСтрокуРасчетаСреднего(ВыборкаПоСредним, Движения.ИНАГРО_РасчетСреднегоЗаработка);
			КонецЕсли;
			
		КонецЦикла;
		
		////////////////////////////////////////////////////////////////////////
		// Состояния работников
		// получим реквизиты табличной части.
		Выборка = СформироватьЗапросСостояния().Выбрать();
		Пока Выборка.Следующий() Цикл 
			
			// проверим очередную строку табличной части
			ПроверитьЗаполнениеСтрокиСостояния(Выборка, Отказ);
			Если НЕ Отказ Тогда
				// Заполним записи в наборах записей регистров
				ДобавитьСтрокуСостояний(ВыборкаПоШапкеДокумента, Выборка);
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли; 
	
	/// очистим движения перерассчитываемого документа???
	Если ЗначениеЗаполнено(ПерерассчитываемыйДокумент) Тогда
		ДвиженияИсходные = ПерерассчитываемыйДокумент.ПолучитьОбъект().Движения;
		Для Каждого ДвижениеИсходное Из ДвиженияИсходные Цикл
			ДвижениеИсходное.Очистить();
			ДвижениеИсходное.Записать();
		КонецЦикла;	
	КонецЕсли;
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКЗаписиДвижений(ЭтотОбъект);
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКОтменеПроведения(ЭтотОбъект);
	Движения.Записать();
	
КонецПроцедуры

#КонецОбласти

#Область Проведение

Функция СформироватьЗапросПоШапке()

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументСсылка" , Ссылка);
	
	МассивВидовВремени = Новый Массив;
	МассивВидовВремени.Добавить(Перечисления.ИНАГРО_ВидыВремени.ЧасовоеНеотработанное);
	МассивВидовВремени.Добавить(Перечисления.ИНАГРО_ВидыВремени.ЧасовоеОтработанноеВПределахНормы);
	Запрос.УстановитьПараметр("ПочасовоеОтклонение",	МассивВидовВремени);
	Запрос.УстановитьПараметр("парамПустаяОрганизация",	Справочники.Организации.ПустаяСсылка());
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ОплатаПоСреднемуЗаработку.Организация 				КАК ОбособленноеПодразделение,
	|	ОплатаПоСреднемуЗаработку.Дата						КАК Дата,
	|	ОплатаПоСреднемуЗаработку.ПериодРегистрации			КАК ПериодРегистрации,
	|	ОплатаПоСреднемуЗаработку.Организация				КАК Организация,
	|	ВЫБОР КОГДА ОплатаПоСреднемуЗаработку.Организация.ГоловнаяОрганизация = &парамПустаяОрганизация ТОГДА ОплатаПоСреднемуЗаработку.Организация ИНАЧЕ ОплатаПоСреднемуЗаработку.Организация.ГоловнаяОрганизация КОНЕЦ КАК ГоловнаяОрганизация,
	|	ОплатаПоСреднемуЗаработку.Ссылка					КАК Ссылка,
	|	ОплатаПоСреднемуЗаработку.Сотрудник					КАК Сотрудник,
	|	ОплатаПоСреднемуЗаработку.СуммаСредней				КАК СуммаСредней,
	|	ОплатаПоСреднемуЗаработку.ВидУчетаВремениДляСредней	КАК ВидУчетаВремениДляСредней,
	|	ОплатаПоСреднемуЗаработку.ВидРасчета				КАК ВидРасчета,
	|	ОплатаПоСреднемуЗаработку.ДатаНачала				КАК ДатаНачала,
	|	ОплатаПоСреднемуЗаработку.ДатаОкончания				КАК ДатаОкончания,
	|	ОплатаПоСреднемуЗаработку.ВидРасчета.СпособРасчета	КАК СпособРасчета,
	|	
	|   ОплатаПоСреднемуЗаработку.ПериодРасчетаСреднегоНачало	КАК ПериодРасчетаСреднегоЗаработкаНачало,
	|   ОплатаПоСреднемуЗаработку.ПериодРасчетаСреднегоКонец	КАК ПериодРасчетаСреднегоЗаработкаКонец
	|
	|ИЗ Документ."+Ссылка.Метаданные().Имя+" КАК ОплатаПоСреднемуЗаработку
	|
	|ГДЕ ОплатаПоСреднемуЗаработку.Ссылка = &ДокументСсылка
	|";
	
	Запрос.Текст = ТекстЗапроса;

	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоШапке()

Функция СформироватьЗапросПоНачислениям()

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументСсылка" , Ссылка);
	Запрос.УстановитьПараметр("парамСписокПочасовыхОтклонений", ИНАГРО_ПроведениеРасчетов.ПолучитьСписокНачисленийПочасовыхОтклонений());
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СтрокиНачисления.Ссылка.Организация,
	|	СтрокиНачисления.Ссылка.ПериодРегистрации,
	|	СтрокиНачисления.НомерСтроки,  
	|	СтрокиНачисления.Авторасчет,
	|   ЗНАЧЕНИЕ(Перечисление.КодыОперацийВзаиморасчетыСРаботникамиОрганизаций.Начисления) КАК КодОперации,
	|
	|	СтрокиНачисления.Сотрудник,
	|	СтрокиНачисления.Сотрудник.ФизическоеЛицо КАК ФизическоеЛицо,
	|	СтрокиНачисления.Назначение,
	|	СтрокиНачисления.ВидРасчета,
	|	СтрокиНачисления.ВидРасчета.СпособРасчета		КАК СпособРасчета,
    |
	|	КОНЕЦПЕРИОДА(СтрокиНачисления.Ссылка.ПериодРегистрации, МЕСЯЦ)	КАК Период,
	|	СтрокиНачисления.Ссылка.ПериодРегистрации						КАК ПериодВзаиморасчетов,
	|	СтрокиНачисления.ВидРасчета.СчетУчета			КАК СчетУчета,
	|	СтрокиНачисления.Результат						КАК СуммаВзаиморасчетов,
	|
	|	СтрокиНачисления.ДатаНачала,
	|	СтрокиНачисления.ДатаОкончания,
	|	СтрокиНачисления.БазовыйПериодНачало,
	|	СтрокиНачисления.БазовыйПериодКонец,
	|	СтрокиНачисления.ДатаНачала			КАК ПериодДействияНачало,
	|	СтрокиНачисления.ДатаОкончания		КАК ПериодДействияКонец,
	|
	|	СтрокиНачисления.Результат,
	|	СтрокиНачисления.ОплаченоДнейЧасов,
	|	СтрокиНачисления.ОтработаноДней,
	|	СтрокиНачисления.ОтработаноЧасов,
	|	СтрокиНачисления.НормаДней,
	|	СтрокиНачисления.НормаЧасов,
	|	СтрокиНачисления.КалендарныеДни,
	|
	|	СтрокиНачисления.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	|	СтрокиНачисления.ПодразделениеОрганизации КАК Подразделение,
	|	СтрокиНачисления.ГрафикРаботы,
	|   ВЫБОР	КОГДА СтрокиНачисления.ГрафикРаботы ССЫЛКА Справочник.ИНАГРО_ГрафикиРаботы
	|			ТОГДА NULL
	|			ИНАЧЕ СтрокиНачисления.Сотрудник
	|	КОНЕЦ						КАК ГрафикРаботыСотрудник,
	|	СтрокиНачисления.ГрафикРаботы.СуммированныйУчетРабочегоВремени КАК СуммированныйУчетРабочегоВремени,
	|	СтрокиНачисления.ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени КАК ВидИспользованияРабочегоВремени, 
	|	СтрокиНачисления.Показатель1,
	|	СтрокиНачисления.Показатель2,
	|	СтрокиНачисления.Показатель3,
	|	СтрокиНачисления.НормаЧасовЗаМесяц,
	|	СтрокиНачисления.НормаДнейЗаМесяц,
	|	СтрокиНачисления.ВидУчетаВремениДляСредней,
	|	СтрокиНачисления.СпособОтраженияВБухучете,
	|	СтрокиНачисления.Сторно
	|
	|ИЗ Документ."+Ссылка.Метаданные().Имя+".Начисления КАК СтрокиНачисления
	|
	|ГДЕ СтрокиНачисления.Ссылка = &ДокументСсылка
	|";

	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоНачислениям()

Функция СформироватьЗапросПоРасчетСреднего()

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументСсылка", Ссылка);

	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СтрокаРасчетСреднего.Ссылка.ПериодРегистрации КАК ПериодРегистрации,
	|	СтрокаРасчетСреднего.Ссылка.Сотрудник КАК Сотрудник,
	|	СтрокаРасчетСреднего.Ссылка.Организация КАК Организация,
	|
	|	СтрокаРасчетСреднего.НомерСтроки,
	|	СтрокаРасчетСреднего.Авторасчет,
	|	СтрокаРасчетСреднего.ВидРасчета,
	|	СтрокаРасчетСреднего.БазовыйПериодНачало,
	|	СтрокаРасчетСреднего.БазовыйПериодКонец,
	|	СтрокаРасчетСреднего.КоэффициентПовышенияОкладов,
	|
	|	СтрокаРасчетСреднего.ОтработаноДней,
	|	СтрокаРасчетСреднего.ОтработаноЧасов,
	|	СтрокаРасчетСреднего.НормаДней,
	|	СтрокаРасчетСреднего.НормаЧасов,
	|	СтрокаРасчетСреднего.КалендарныеДни,
	|
	|	СтрокаРасчетСреднего.Результат,
	|	СтрокаРасчетСреднего.РезультатПолный
	|ИЗ Документ."+Ссылка.Метаданные().Имя+".РасчетСреднего КАК СтрокаРасчетСреднего
	|
	|ГДЕ СтрокаРасчетСреднего.Ссылка = &ДокументСсылка
    |УПОРЯДОЧИТЬ ПО
    |	НомерСтроки
    |";

	Возврат Запрос.Выполнить();
	
КонецФункции // СформироватьЗапросПоРасчетСреднего()

Функция СформироватьЗапросСостояния()
	
	Запрос = Новый Запрос;
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка", Ссылка);
	Запрос.УстановитьПараметр("ПустаяДата", Дата('00010101'));

	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ТЧНачисления.НомерСтроки КАК НомерСтроки,
	|	ТЧНачисления.Сотрудник.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ТЧНачисления.Сотрудник КАК Сотрудник,
	|	ТЧНачисления.Назначение КАК Назначение,
	|	ТЧНачисления.ДатаНачала КАК ДатаНачала,
	|	ВЫБОР КОГДА ТЧНачисления.ДатаОкончания <> &ПустаяДата ТОГДА КОНЕЦПЕРИОДА(ТЧНачисления.ДатаОкончания, ДЕНЬ) ИНАЧЕ &ПустаяДата КОНЕЦ КАК ДатаОкончания,
	|	ТЧНачисления.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	|	ТЧНачисления.Сторно КАК Сторно,
	|	ТЧНачисления.Состояние КАК Состояние,
	|	ТЧНачисления.ПроизошедшееСобытие КАК ПроизошедшееСобытие
	|
	|ИЗ	Документ.ИНАГРО_ОплатаПоСреднемуЗаработку.Начисления КАК ТЧНачисления
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ 
	|(ВЫБРАТЬ ПЕРВЫЕ 1
	|   Строки.НомерСтроки,
	|   Строки.Сотрудник,
	|   Строки.ДатаНачала
	|ИЗ Документ.ИНАГРО_ОплатаПоСреднемуЗаработку.Начисления КАК Строки
	|ГДЕ	Строки.Ссылка = &ДокументСсылка	) КАК ДругиеСтроки
	|ПО	ДругиеСтроки.Сотрудник = ТЧНачисления.Сотрудник 
	| И	ДругиеСтроки.НомерСтроки < ТЧНачисления.НомерСтроки
	| И	ДругиеСтроки.ДатаНачала = ТЧНачисления.ДатаНачала
	|
	|ГДЕ	ТЧНачисления.Ссылка = &ДокументСсылка
	|" ;

	Запрос.Текст = ТекстЗапроса;

	Возврат Запрос.Выполнить();

	
КонецФункции	

// Проверить Заполнение Шапки
//
Процедура ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ) Экспорт

	//  Организация
	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.Организация) Тогда
		ОбщегоНазначенияБПКлиентСервер.СообщитьОбОшибке(НСтр("ru='Не указана организация, по которой выполняется начисление!';uk='Не вказана організація, по якій здійснюється нарахування!'"), Отказ);
	КонецЕсли;

	// Сотрудник
	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.Сотрудник) Тогда
		ОбщегоНазначенияБПКлиентСервер.СообщитьОбОшибке(НСтр("ru='не выбрано физическое лицо!';uk='не обрана фізична особа!'"), Отказ);
	КонецЕсли;

	// ДатаНачала
	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ДатаНачала) Тогда
		ОбщегоНазначенияБПКлиентСервер.СообщитьОбОшибке(НСтр("ru='Не указана дата начала оплачиваемого события!';uk='Не вказана дата початку оплачуваної події!'"), Отказ);
	КонецЕсли;
	
	// ДатаОкончания
	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ДатаОкончания) Тогда
		ОбщегоНазначенияБПКлиентСервер.СообщитьОбОшибке(НСтр("ru='Не указана дата окончания оплачиваемого события!';uk='Не вказана дата закінчення оплачуваної події!'"), Отказ);
	КонецЕсли;
	
	//
	Если ВыборкаПоШапкеДокумента.ДатаОкончания < ВыборкаПоШапкеДокумента.ДатаНачала Тогда
		ОбщегоНазначенияБПКлиентСервер.СообщитьОбОшибке(НСтр("ru='Дата окончания оплачиваемого события не должна быть меньше даты начала!';uk='Дата закінчення оплачуваної події не повинна бути меншою дати початку!'"), Отказ);
	КонецЕсли; 
	
	// ВидРасчета
	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ВидРасчета) Тогда
		ОбщегоНазначенияБПКлиентСервер.СообщитьОбОшибке(НСтр("ru='не указан вид расчета!';uk='не зазначений вид розрахунку!'"), Отказ);
	КонецЕсли;
	
	// ПериодРегистрации
	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ПериодРегистрации) Тогда
		ОбщегоНазначенияБПКлиентСервер.СообщитьОбОшибке(НСтр("ru='Не указан период регистрации!';uk='Не вказано період реєстрації!'"), Отказ);
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаполнениеШапки()

Процедура ПроверитьЗаполнениеСтрокиНачисления(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента, Отказ)

	СтрокаНачалаСообщенияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='В строке номер ""%1"" табл. части ""Начисления"": ';uk='У рядку номер ""%1"" табл. частини ""Нарахування"": '"), СокрЛП(ВыборкаПоСтрокамДокумента.НомерСтроки));
	
	// ВидРасчета
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ВидРасчета) Тогда
		ОбщегоНазначенияБПКлиентСервер.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + НСтр("ru='не указан вид расчета!';uk='не зазначений вид розрахунку!'"), Отказ);
	КонецЕсли;
	
	// Дата начала 
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ДатаНачала) Тогда
		ОбщегоНазначенияБПКлиентСервер.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + НСтр("ru='не указана дата начала начисления!';uk='не зазначена дата початку нарахування!'"), Отказ);
	Иначе
		// Дата окончания 
		Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ДатаОкончания) Тогда
		ОбщегоНазначенияБПКлиентСервер.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + НСтр("ru='не указана дата окончания начисления!';uk='не зазначена дата закінчення нарахування!'"), Отказ);
		Иначе
			Если ВыборкаПоСтрокамДокумента.ДатаОкончания < ВыборкаПоСтрокамДокумента.ДатаНачала Тогда
				ОбщегоНазначенияБПКлиентСервер.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + НСтр("ru='дата окончания начисления не должна быть меньше даты начала!';uk='дата закінчення нарахування не повинна бути менше дати початку!'"), Отказ);
			Иначе	
				Если НачалоМесяца(ВыборкаПоСтрокамДокумента.ДатаОкончания) <> НачалоМесяца(ВыборкаПоСтрокамДокумента.ДатаНачала) Тогда
					ОбщегоНазначенияБПКлиентСервер.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + НСтр("ru='даты начала и окончания должны принадлежать одному месяцу!';uk='дати початку і закінчення повинні належати одному місяцю!'"), Отказ);
				КонецЕсли;
			КонецЕсли; 
		КонецЕсли;
	КонецЕсли;
	
	// Подразделение
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ПодразделениеОрганизации) Тогда
		ОбщегоНазначенияБПКлиентСервер.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + НСтр("ru='не указано подразделение организации!!';uk='не вказано підрозділ організації!'"), Отказ);
	КонецЕсли;
	
	Если НЕ ВыборкаПоСтрокамДокумента.Сторно И  (ВыборкаПоСтрокамДокумента.ДатаНачала < ВыборкаПоШапкеДокумента.ДатаНачала ИЛИ ВыборкаПоСтрокамДокумента.ДатаНачала > КонецДня(ВыборкаПоШапкеДокумента.ДатаОкончания) 
		ИЛИ ВыборкаПоСтрокамДокумента.ДатаОкончания < ВыборкаПоШапкеДокумента.ДатаНачала ИЛИ ВыборкаПоСтрокамДокумента.ДатаОкончания > КонецДня(ВыборкаПоШапкеДокумента.ДатаОкончания)) Тогда
		ОбщегоНазначенияБПКлиентСервер.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + НСтр("ru='период начисления выходит за временные границы оплачиваемого события!!';uk='період нарахування виходить за межі часу оплачуваної події!'"), Ложь);
	КонецЕсли; 

КонецПроцедуры // ПроверитьЗаполнениеСтрокиНачисления()

Процедура ПроверитьЗаполнениеСтрокиРасчетСреднего(ВыборкаПоСтрокамДокумента, Отказ)

	СтрокаНачалаСообщенияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='В строке номер ""%1"" табл. части ""Расчет среднего"": ';uk='У рядку номер ""%1"" табл. частини ""Розрахунок середнього"": '"), СокрЛП(ВыборкаПоСтрокамДокумента.НомерСтроки));
	
	// Вид расчета
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ВидРасчета) Тогда
		ОбщегоНазначенияБПКлиентСервер.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + НСтр("ru='не указан вид расчета среднего заработка!';uk='не вказано вид розрахунку середнього заробітку!'"), Отказ);
	КонецЕсли;
	
	// Дата начала базового периода
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.БазовыйПериодНачало) Тогда
		ОбщегоНазначенияБПКлиентСервер.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + НСтр("ru='не указана дата начала базового периода!';uk='не зазначена дата початку базового періоду!'"), Отказ);
		// Дата окончания базового периода
	ИначеЕсли НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.БазовыйПериодКонец) Тогда
		ОбщегоНазначенияБПКлиентСервер.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + НСтр("ru='не указана дата окончания базового периода!';uk='не зазначена дата закінчення базового періоду!'"), Отказ);
	ИначеЕсли ВыборкаПоСтрокамДокумента.БазовыйПериодКонец < ВыборкаПоСтрокамДокумента.БазовыйПериодНачало Тогда
		ОбщегоНазначенияБПКлиентСервер.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + НСтр("ru='дата начала базового периода не может быть больше даты окончания базового периода!';uk='дата початку базового періоду не може бути більшою ніж дата закінчення базового періоду!'"), Отказ);
	КонецЕсли; 
	
КонецПроцедуры // ПроверитьЗаполнениеСтрокиРасчетСреднего()

Процедура ПроверитьЗаполнениеСтрокиСостояния(ВыборкаПоСтрокамДокумента, Отказ)
	
	СтрокаНачалаСообщенияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='В строке номер ""%1"" табл. части ""Начисления"": ';uk='У рядку номер ""%1"" табл. частини ""Нарахування"": '"), СокрЛП(ВыборкаПоСтрокамДокумента.НомерСтроки));

	// Состояние
	Если Не ВыборкаПоСтрокамДокумента.Сторно И НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.Состояние) Тогда
		ОбщегоНазначенияБПКлиентСервер.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + НСтр("ru='не указано состояние работника!';uk='не вказано стан працівника!'"), Отказ);
	КонецЕсли;
	
	Уволен = Ложь;
	УжеРаботает = РегистрыСведений.ИНАГРО_РаботникиОрганизаций.СрезПоследних(ВыборкаПоСтрокамДокумента.ДатаНачала, Новый Структура("Сотрудник, Организация", Сотрудник, Организация));
	Для каждого Место Из УжеРаботает Цикл
		Если Место.ЗанимаемыхСтавок = 0 Тогда
			Уволен = Истина;
		КонецЕсли;
	КонецЦикла;
	Если УжеРаботает.Количество()=0 ИЛИ Уволен Тогда
		ОбщегоНазначенияБПКлиентСервер.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + НСтр("ru='работник не принят на работу в организацию!';uk='працівник не прийнятий на роботу в організацію!'"), Отказ);
	КонецЕсли;
	
	Если ВыборкаПоСтрокамДокумента.Состояние <> Перечисления.ИНАГРО_СостоянияРаботникаОрганизации.НеИзменять Тогда
		События = РегистрыСведений.ИНАГРО_СостояниеРаботниковОрганизаций.СрезПоследних(ВыборкаПоСтрокамДокумента.ДатаНачала, Новый Структура("Сотрудник, Организация", ВыборкаПоСтрокамДокумента.Сотрудник, Организация));
		Если События.Количество()>0 Тогда
			Если События[0].Период = ВыборкаПоСтрокамДокумента.ДатаНачала Тогда 
				ОбщегоНазначенияБПКлиентСервер.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + НСтр("ru='в кадровом учете начало события противоречит документу ';uk='в кадровому обліку початок події суперечить документу '") + События[0].Регистратор+"!", Отказ);
			КонецЕсли;	
		КонецЕсли;
		
		Если ВыборкаПоСтрокамДокумента.ПроизошедшееСобытие Тогда
			События = РегистрыСведений.ИНАГРО_СостояниеРаботниковОрганизаций.СрезПоследних(КонецДня(ВыборкаПоСтрокамДокумента.ДатаОкончания), Новый Структура("Сотрудник, Организация", ВыборкаПоСтрокамДокумента.Сотрудник, Организация));
			Если События.Количество()>0 Тогда
				Если События[0].Период = КонецДня(ВыборкаПоСтрокамДокумента.ДатаОкончания) Тогда 
					ОбщегоНазначенияБПКлиентСервер.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + НСтр("ru='в кадровом учете окончание события противоречит документу ';uk='в кадровому обліку закінчення події суперечить документу '") + События[0].Регистратор+"!", Отказ);
				КонецЕсли;	
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;	
	
КонецПроцедуры

Процедура ДобавитьСтрокуОсновныхНачислений(ВыборкаПоСтрокамДокумента, НаборЗаписей)
	
	Движения.ИНАГРО_Начисления.Записывать = Истина;
	Движение = НаборЗаписей.Добавить();
	ЗаполнитьЗначенияСвойств(Движение, ВыборкаПоСтрокамДокумента);
	
 	Движение.ВидУчетаВремени = ИНАГРО_ПроведениеРасчетов.ПолучитьВидУчетаВремени(ВыборкаПоСтрокамДокумента.ВидРасчета, ВыборкаПоСтрокамДокумента.СуммированныйУчетРабочегоВремени);

КонецПроцедуры // ДобавитьСтрокуОсновныхНачислений

Процедура ДобавитьСтрокуРасчетаСреднего(ВыборкаПоСтрокамДокумента, НаборРасчетСреднего)
	
	Движения.ИНАГРО_РасчетСреднегоЗаработка.Записывать = Истина;
	Движение = НаборРасчетСреднего.Добавить();
	ЗаполнитьЗначенияСвойств(Движение,ВыборкаПоСтрокамДокумента);
	
КонецПроцедуры 

Процедура ДобавитьСтрокуВДвиженияПоРегистрамНакопления(ВыборкаПоСтрокамДокумента)
	
	Движение = Движения.ВзаиморасчетыССотрудниками.Добавить();
	ЗаполнитьЗначенияСвойств(Движение, ВыборкаПоСтрокамДокумента);
	
	Движение.ВидДвижения			= ВидДвиженияНакопления.Приход;

КонецПроцедуры // ДобавитьСтрокуВДвиженияПоРегистрамНакопления()

Процедура ДобавитьСтрокуВДвиженияПоРегистрамСведений(ВыборкаПоШапкеДокумента)
	
	// начало
	Движение = Движения.ИНАГРО_ПлановыеНачисленияРаботниковОрганизаций.Добавить();
	ЗаполнитьЗначенияСвойств(Движение, ВыборкаПоШапкеДокумента);
	
	Движение.Действует  				= Истина;
	Движение.ВидРасчета         		= ВыборкаПоШапкеДокумента.ВидРасчета;
	Движение.Период						= ВыборкаПоШапкеДокумента.ДатаНачала;
	Движение.Показатель1				= ВыборкаПоШапкеДокумента.СуммаСредней;
	Движение.Показатель2				= 100;
	Движение.СпособОтраженияВБухучете         		= ВыборкаПоШапкеДокумента.ВидРасчета.СпособОтраженияВБухучете;
	// конец
	
	Движение = Движения.ИНАГРО_ПлановыеНачисленияРаботниковОрганизаций.Добавить();
	ЗаполнитьЗначенияСвойств(Движение, ВыборкаПоШапкеДокумента);
	
	Движение.Действует  				= Ложь;
	Движение.ВидРасчета         		= ВыборкаПоШапкеДокумента.ВидРасчета;
	Движение.Период						= КонецДня(ВыборкаПоШапкеДокумента.ДатаОкончания);
	Движение.Показатель1				= ВыборкаПоШапкеДокумента.СуммаСредней;
	Движение.Показатель2				= 100;
	Движение.СпособОтраженияВБухучете         		= ВыборкаПоШапкеДокумента.ВидРасчета.СпособОтраженияВБухучете;

КонецПроцедуры // ДобавитьСтрокуВДвиженияПоРегистрамСведений()

Процедура ДобавитьСтрокуСостояний(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента)
	
	Если ВыборкаПоСтрокамДокумента.Состояние = Перечисления.ИНАГРО_СостоянияРаботникаОрганизации.НеИзменять Тогда
		Возврат;
	КонецЕсли;
	
	Движение = Движения.ИНАГРО_СостояниеРаботниковОрганизаций.Добавить();

	// Свойства
	Движение.Период = НачалоДня(ВыборкаПоСтрокамДокумента.ДатаНачала);

	// Измерения
	Движение.Сотрудник = ВыборкаПоСтрокамДокумента.Назначение;
	Движение.Организация = ВыборкаПоШапкеДокумента.Организация;

	// Ресурсы
	Движение.Состояние = ВыборкаПоСтрокамДокумента.Состояние;
	
	
	Если ВыборкаПоСтрокамДокумента.ПроизошедшееСобытие Тогда
		Движение = Движения.ИНАГРО_СостояниеРаботниковОрганизаций.Добавить();

		// Свойства
		Движение.Период = КонецДня(ВыборкаПоСтрокамДокумента.ДатаОкончания);
	
		// Измерения
		Движение.Сотрудник = ВыборкаПоСтрокамДокумента.Назначение;
		Движение.Организация = ВыборкаПоШапкеДокумента.Организация;

		// Ресурсы
		Движение.Состояние = Перечисления.ИНАГРО_СостоянияРаботникаОрганизации.Работает;
	КонецЕсли;			
	
КонецПроцедуры // ДобавитьСтрокуОсновныхНачислений

#КонецОбласти

// Производится АвтозаполнениеРасчетСреднего
//
Функция АвтозаполнениеРасчетСреднего() Экспорт
	Перем ОтработаноЗа2Мес, ОтработаноЗа4Мес, ОсновнойВидРасчета;  
	Если ДатаНачала < ИНАГРО_ПроведениеРасчетов.ДатаИзмененияПорядка100() Тогда
		//	1. Проверка если данных для расчета средней ещ нет (человек мало проработал, начисляем по окладу)
		//
		Если  НачалоДня(ДобавитьМесяц(ПериодРасчетаСреднегоНачало,1)-1) >= ПериодРасчетаСреднегоКонец Тогда
			ПолучитьДанныеОбОтработанномВремени(ОтработаноЗа2Мес, ОтработаноЗа4Мес, ОсновнойВидРасчета);
			Если ОтработаноЗа2Мес = 0 И ОтработаноЗа4Мес = 0 Тогда
				// проработал меньше целого месяца
				// если есть за что платить, пользователю прийдется заполнить эти суммы вручную
				//
				СоздатьСтрокуРасчетСреднего( ПланыВидовРасчета.ИНАГРО_СреднийЗаработок.ПоОкладу, 1, НачалоМесяца(ПериодРасчетаСреднегоНачало), КонецМесяца(ПериодРасчетаСреднегоНачало));
				
				Записать();
				Возврат Истина;
			КонецЕсли;
		КонецЕсли;

		// 2. Данные для расчета есть - рассчитываем
		//
		
		// Сначала определим коэффициент увеличения оклада 
		// если он вдруг поменялся за время пока за человеком 
		// сохранялась средняя ЗП
		КоэффициентПовышенияОкладов = 1;
		Если ДатаНачала < ИНАГРО_ПроведениеРасчетов.ДатаИзмененияПорядка100() Тогда
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр( "парамСотрудник",	Сотрудник );
			Запрос.УстановитьПараметр( "парамНачало",		КонецДня(ПериодРасчетаСреднегоКонец) + 1 );
			Запрос.УстановитьПараметр( "парамКонец",		ДатаОкончания );
			ТекстЗапроса = " 
			|ВЫБРАТЬ
			|	КоэффициентПовышения.Период,
			|	КоэффициентПовышения.Коэффициент
			|ИЗ РегистрСведений.ИНАГРО_КоэффициентПовышенияОкладов КАК	КоэффициентПовышения		
			|ГДЕ	КоэффициентПовышения.Сотрудник	= &парамСотрудник
			|	И	КоэффициентПовышения.Период >= &парамНачало
			|	И	КоэффициентПовышения.Период <= &парамКонец
			|";
			Запрос.Текст = ТекстЗапроса;
			Выборка = Запрос.Выполнить().Выбрать();
			Коэф = 1;
			Пока Выборка.Следующий() Цикл
				Коэф = Коэф * Выборка.Коэффициент;
			КонецЦикла;
			КоэффициентПовышенияОкладов = Коэф;
		КонецЕсли;	
		
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		Запрос.УстановитьПараметр( "парамСотрудник",	Сотрудник );
		Запрос.УстановитьПараметр( "парамНачало",		ПериодРасчетаСреднегоНачало );
		Запрос.УстановитьПараметр( "парамКонец",		ПериодРасчетаСреднегоКонец );
		
		//	ВТВремя
		Если Истина Тогда
			//	Описание:
			// 		таблица периодов для расчета средней
			//		
			Начало = ПериодРасчетаСреднегоНачало;
			Конец = ПериодРасчетаСреднегоКонец;
			Запрос.УстановитьПараметр( "парамНачало1", Начало );
			Запрос.УстановитьПараметр( "парамКонец1", Мин( КонецМесяца(Начало), Конец ) );
			ТекстЗапросаВТ = " 
			|	ВЫБРАТЬ
			|		&парамНачало1	КАК БазовыйПериодНачало,
			|		&парамКонец1	КАК БазовыйПериодКонец
			|ПОМЕСТИТЬ ВТВремя	
			|";
			
			Начало = ДобавитьМесяц(НачалоМесяца(Начало),1);
			Инд = 2;
			Пока Начало <= Конец Цикл
				
				Запрос.УстановитьПараметр( "парамНачало"+Инд    , Начало );
				Запрос.УстановитьПараметр( "парамКонец"+Инд    , Мин( КонецМесяца(Начало), Конец ) );
				ТекстЗапросаВТ = ТекстЗапросаВТ + " 
				|	ОБЪЕДИНИТЬ	  
				|	ВЫБРАТЬ
				|		&парамНачало"+Инд+"	КАК БазовыйПериодНачало,
				|		&парамКонец"+Инд+"	КАК БазовыйПериодКонец
				|";	  
				Инд = Инд + 1;
				Начало = ДобавитьМесяц(НачалоМесяца(Начало),1);
				
			КонецЦикла;
			
			Запрос.Текст = ТекстЗапросаВТ;
			Запрос.Выполнить();
			ТекстЗапросаВТВремя = "ВТВремя";
			
			ТекстЗапросаВТ =" 
			|	ОБЪЕДИНИТЬ *  
			|	ИЗ ВТВремя
			|";	  
			Запрос.Текст = ТекстЗапросаВТ;
		КонецЕсли;
		
		//	ВТКоэффициент
		Если Истина Тогда
			
			ТаблицаКоэф = Новый ТаблицаЗначений;
			ТаблицаКоэф.Колонки.Добавить("ПериодНачало",Новый ОписаниеТипов("Дата"));
			ТаблицаКоэф.Колонки.Добавить("ПериодКонец",Новый ОписаниеТипов("Дата"));
			ТаблицаКоэф.Колонки.Добавить("Коэффициент",Новый ОписаниеТипов("Число"));
			
			Если ДатаНачала < ИНАГРО_ПроведениеРасчетов.ДатаИзмененияПорядка100() Тогда
				//	Описание:
				// 		таблица с коффициентами для оклада и периодами (нижняя граница)
				//		
				ТекстЗапросаВТ = " 
				|	ВЫБРАТЬ
				|		КоэффициентПовышения.Период			КАК ПериодНачало,
				|		КоэффициентПовышения.Коэффициент	КАК Коэффициент,
				|		МИНИМУМ(
				|			ВЫБОР	КОГДА КоэффициентПовышения1.Период ЕСТЬ NULL 
				|						ТОГДА &парамКонец 	
				|					ИНАЧЕ ДОБАВИТЬКДАТЕ(КоэффициентПовышения1.Период,СЕКУНДА,-1) 
				|			КОНЕЦ ) КАК ПериодКонец
				|	ИЗ (
				|			ВЫБРАТЬ
				|				&парамНачало	КАК Период,
				|				1	КАК Коэффициент
				|	
				|	    	ОБЪЕДИНИТЬ 
				|			ВЫБРАТЬ
				|				КоэффициентПовышения.Период,
				|				КоэффициентПовышения.Коэффициент
				|			ИЗ РегистрСведений.ИНАГРО_КоэффициентПовышенияОкладов КАК	КоэффициентПовышения		
				|			ГДЕ		КоэффициентПовышения.Сотрудник	= &парамСотрудник
				|				И	КоэффициентПовышения.Период > &парамНачало
				|	)КАК КоэффициентПовышения
				|	
				|	
				|	ЛЕВОЕ СОЕДИНЕНИЕ  РегистрСведений.ИНАГРО_КоэффициентПовышенияОкладов 	КАК КоэффициентПовышения1
				|	ПО		КоэффициентПовышения1.Сотрудник	= &парамСотрудник
				|		И	КоэффициентПовышения1.Период > КоэффициентПовышения.Период
				|	
				|	СГРУППИРОВАТЬ ПО
				|		КоэффициентПовышения.Период,
				|		КоэффициентПовышения.Коэффициент
				|УПОРЯДОЧИТЬ ПО
				|	ПериодНачало УБЫВ		
				|";
				Запрос.Текст = ТекстЗапросаВТ;
				Выборка = Запрос.Выполнить().Выбрать();
				НачалоМесяцаПериода = Дата(1,1,1);
				КоэффициентПоНачалуМесяца = 1;
				Пока Выборка.Следующий()Цикл
					СтрокаКоэф = ТаблицаКоэф.Добавить();
					СтрокаКоэф.ПериодНачало = Выборка.ПериодНачало;
					СтрокаКоэф.ПериодКонец = Выборка.ПериодКонец;
					Если НачалоМесяца(Выборка.ПериодНачало) = НачалоМесяцаПериода Тогда
						СтрокаКоэф.Коэффициент = КоэффициентПоНачалуМесяца*Выборка.Коэффициент;
						КоэффициентПоНачалуМесяца = КоэффициентПоНачалуМесяца * Выборка.Коэффициент;
					Иначе
						СтрокаКоэф.Коэффициент = Выборка.Коэффициент;
						КоэффициентПоНачалуМесяца = Выборка.Коэффициент;
					КонецЕсли;	
					НачалоМесяцаПериода = НачалоМесяца(Выборка.ПериодНачало);
				КонецЦикла;
			Иначе
				СтрокаТаблицы = ТаблицаКоэф.Добавить();
				СтрокаТаблицы.ПериодНачало = ПериодРасчетаСреднегоНачало;
				СтрокаТаблицы.ПериодКонец = ПериодРасчетаСреднегоКонец;
				СтрокаТаблицы.Коэффициент = 1;
			КонецЕсли;			
			Запрос.УстановитьПараметр("ТаблицаКоэф",ТаблицаКоэф);
			ТекстЗапросаВТ = " 
			|	ВЫБРАТЬ
			|		КоэффициентПовышения.ПериодНачало			КАК ПериодНачало,
			|		КоэффициентПовышения.Коэффициент	КАК Коэффициент,
			|		КоэффициентПовышения.ПериодКонец			КАК ПериодКонец
			|ПОМЕСТИТЬ ВТКоэффициент	
			|ИЗ &ТаблицаКоэф КАК КоэффициентПовышения";
			Запрос.Текст = ТекстЗапросаВТ;
			Запрос.Выполнить();
			ТекстЗапросаВТКоэффициент = "ВТКоэффициент";
		КонецЕсли;
		
		ТекстЗапроса = "
		|ВЫБРАТЬ
		|	ВЫБОР КОГДА КоэффициентПериоды.ПериодНачало >= ВсеПериоды.БазовыйПериодНачало И КоэффициентПериоды.ПериодНачало <= ВсеПериоды.БазовыйПериодКонец ТОГДА КоэффициентПериоды.Коэффициент ИНАЧЕ 1 КОНЕЦ	КАК Коэффициент,
		|	НАЧАЛОПЕРИОДА(ВЫБОР КОГДА КоэффициентПериоды.ПериодНачало <= ВсеПериоды.БазовыйПериодНачало ТОГДА ВсеПериоды.БазовыйПериодНачало ИНАЧЕ КоэффициентПериоды.ПериодНачало КОНЕЦ, МЕСЯЦ)	КАК БазовыйПериодНачало,
		|	КОНЕЦПЕРИОДА(ВЫБОР КОГДА КоэффициентПериоды.ПериодКонец <= ВсеПериоды.БазовыйПериодКонец ТОГДА КоэффициентПериоды.ПериодКонец ИНАЧЕ ВсеПериоды.БазовыйПериодКонец КОНЕЦ, МЕСЯЦ)	КАК БазовыйПериодКонец
		|ПОМЕСТИТЬ ВТРасчетСредней
		|ИЗ ВТВремя КАК ВсеПериоды
		|	
		|ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТКоэффициент КАК КоэффициентПериоды
		|ПО		ВсеПериоды.БазовыйПериодНачало <= КоэффициентПериоды.ПериодКонец
		|И		КоэффициентПериоды.ПериодНачало <= ВсеПериоды.БазовыйПериодКонец	
		|	
		|;
		|ВЫБРАТЬ 
		|	МАКСИМУМ(ВТРасчетСредней.Коэффициент),
		|	ВТРасчетСредней.БазовыйПериодНачало,
		|	ВТРасчетСредней.БазовыйПериодКонец 
		|ИЗ ВТРасчетСредней КАК ВТРасчетСредней
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТРасчетСредней.БазовыйПериодНачало,
		|	ВТРасчетСредней.БазовыйПериодКонец
		|УПОРЯДОЧИТЬ ПО 
		|	ВТРасчетСредней.БазовыйПериодНачало УБЫВ";	
		Запрос.Текст = ТекстЗапроса;
		
		мЕстьПремии = РегистрыСведений.ИНАГРО_УчетнаяПолитикаПоПерсоналу.Получить(Новый Структура ("Организация", Организация)).ЕстьПремии;
		мЕстьГодоваяПремия = РегистрыСведений.ИНАГРО_УчетнаяПолитикаПоПерсоналу.Получить(Новый Структура ("Организация", Организация)).ЕстьГодоваяПремия;
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл

			СоздатьСтрокуРасчетСреднего(ПланыВидовРасчета.ИНАГРО_СреднийЗаработок.ПоЗаработку, Выборка.Коэффициент, Выборка.БазовыйПериодНачало, Выборка.БазовыйПериодКонец);
			Если мЕстьПремии  Тогда
				СоздатьСтрокуРасчетСреднего(ПланыВидовРасчета.ИНАГРО_СреднийЗаработок.ПоПремиям, 0, Выборка.БазовыйПериодНачало, Выборка.БазовыйПериодКонец);
				СоздатьСтрокуРасчетСреднего(ПланыВидовРасчета.ИНАГРО_СреднийЗаработок.ПоПремиямПропорционально, 0, Выборка.БазовыйПериодНачало, Выборка.БазовыйПериодКонец);
			КонецЕсли;
			Если мЕстьГодоваяПремия Тогда
				СоздатьСтрокуРасчетСреднего(ПланыВидовРасчета.ИНАГРО_СреднийЗаработок.ПоГодовойПремии, 0, Выборка.БазовыйПериодНачало, Выборка.БазовыйПериодКонец);
			КонецЕсли;
			
		КонецЦикла;
	Иначе
		//	1. Проверка если данных для расчета средней ещ нет (человек мало проработал, начисляем по окладу)
		//
		Если  НачалоДня(ДобавитьМесяц(ПериодРасчетаСреднегоНачало,1)-1) >= ПериодРасчетаСреднегоКонец Тогда
			ПолучитьДанныеОбОтработанномВремени(ОтработаноЗа2Мес, ОтработаноЗа4Мес, ОсновнойВидРасчета);
			Если ОтработаноЗа2Мес = 0 И ОтработаноЗа4Мес = 0 Тогда
				// проработал меньше целого месяца
				// если есть за что платить, пользователю прийдется заполнить эти суммы вручную
				//
				СоздатьСтрокуРасчетСреднего( ПланыВидовРасчета.ИНАГРО_СреднийЗаработок.ПоОкладу, 1, НачалоМесяца(ДатаНачала), КонецМесяца(ДатаНачала));
				
				Записать();
				Возврат Истина;
			КонецЕсли;
		КонецЕсли;

		// 2. Данные для расчета есть - рассчитываем
		//
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		Запрос.УстановитьПараметр( "парамСотрудник",	Сотрудник );
		Запрос.УстановитьПараметр( "парамНачало",		ПериодРасчетаСреднегоНачало );
		Запрос.УстановитьПараметр( "парамКонец",		ПериодРасчетаСреднегоКонец );
		
		//	ВТВремя
		Если Истина Тогда
			//	Описание:
			// 		таблица периодов для расчета средней
			//		
			Начало = ПериодРасчетаСреднегоНачало;
			Конец = ПериодРасчетаСреднегоКонец;
			Запрос.УстановитьПараметр( "парамНачало1", Начало );
			Запрос.УстановитьПараметр( "парамКонец1", Мин( КонецМесяца(Начало), Конец ) );
			ТекстЗапросаВТ = " 
			|	ВЫБРАТЬ
			|		&парамНачало1	КАК БазовыйПериодНачало,
			|		&парамКонец1	КАК БазовыйПериодКонец
			|ПОМЕСТИТЬ ВТВремя	
			|";
			
			Начало = ДобавитьМесяц(НачалоМесяца(Начало),1);
			Инд = 2;
			Пока Начало <= Конец Цикл
				
				Запрос.УстановитьПараметр( "парамНачало"+Инд    , Начало );
				Запрос.УстановитьПараметр( "парамКонец"+Инд    , Мин( КонецМесяца(Начало), Конец ) );
				ТекстЗапросаВТ = ТекстЗапросаВТ + " 
				|	ОБЪЕДИНИТЬ	  
				|	ВЫБРАТЬ
				|		&парамНачало"+Инд+"	КАК БазовыйПериодНачало,
				|		&парамКонец"+Инд+"	КАК БазовыйПериодКонец
				|";	  
				Инд = Инд + 1;
				Начало = ДобавитьМесяц(НачалоМесяца(Начало),1);
				
			КонецЦикла;
			
			Запрос.Текст = ТекстЗапросаВТ;
			Запрос.Выполнить();
			ТекстЗапросаВТВремя = "ВТВремя";
						
			ТекстЗапросаВТ =" 
			|	ОБЪЕДИНИТЬ *  
			|	ИЗ ВТВремя
			|";	  
			Запрос.Текст = ТекстЗапросаВТ;
		КонецЕсли;
		
		ТекстЗапроса = "
		|ВЫБРАТЬ
		|	НАЧАЛОПЕРИОДА(ВсеПериоды.БазовыйПериодНачало)	КАК БазовыйПериодНачало,
		|	КОНЕЦПЕРИОДА(ВсеПериоды.БазовыйПериодКонец)	КАК БазовыйПериодКонец
		|ИЗ ВТВремя КАК ВсеПериоды
		|	
		|СГРУППИРОВАТЬ ПО
		|	ВсеПериоды.БазовыйПериодНачало,
		|	ВсеПериоды.БазовыйПериодКонец
		|УПОРЯДОЧИТЬ ПО 
		|	ВсеПериоды.БазовыйПериодНачало УБЫВ";	
		Запрос.Текст = ТекстЗапроса;
		
		
		мЕстьПремии = РегистрыСведений.ИНАГРО_УчетнаяПолитикаПоПерсоналу.Получить(Новый Структура ("Организация", Организация)).ЕстьПремии;
		мЕстьГодоваяПремия = РегистрыСведений.ИНАГРО_УчетнаяПолитикаПоПерсоналу.Получить(Новый Структура ("Организация", Организация)).ЕстьГодоваяПремия;
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл

			СоздатьСтрокуРасчетСреднего(ПланыВидовРасчета.ИНАГРО_СреднийЗаработок.ПоЗаработку, 1, Выборка.БазовыйПериодНачало, Выборка.БазовыйПериодКонец);
			Если мЕстьПремии  Тогда
				СоздатьСтрокуРасчетСреднего(ПланыВидовРасчета.ИНАГРО_СреднийЗаработок.ПоПремиям, 0, Выборка.БазовыйПериодНачало, Выборка.БазовыйПериодКонец);
				СоздатьСтрокуРасчетСреднего(ПланыВидовРасчета.ИНАГРО_СреднийЗаработок.ПоПремиямПропорционально, 0, Выборка.БазовыйПериодНачало, Выборка.БазовыйПериодКонец);
			КонецЕсли;
			Если мЕстьГодоваяПремия Тогда
				СоздатьСтрокуРасчетСреднего(ПланыВидовРасчета.ИНАГРО_СреднийЗаработок.ПоГодовойПремии, 0, Выборка.БазовыйПериодНачало, Выборка.БазовыйПериодКонец);
			КонецЕсли;
			
		КонецЦикла;

	КонецЕсли;
	
	Записать();

КонецФункции  // АвтозаполнениеРасчетСреднего()

#Область СлужебныеПроцедурыИФункции	

Процедура ВыполнитьОтменуПроведенияДокумента() Экспорт
	
	ЭтотОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
	
КонецПроцедуры

Функция	ПолучитьДанныеОбОтработанномВремени(ОтработаноЗа2Мес, ОтработаноЗа4Мес, ОсновнойВидРасчета)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаНачалаСобытия", ДатаНачала );
	Запрос.УстановитьПараметр("парамСотрудник",	   Сотрудник );
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	ОсновноеНачисление.ВидРасчета КАК ОсновнойВидРасчета,
		|	Работники.ГрафикРаботы КАК ГрафикРаботы,
		|	ЕСТЬNULL(Время2Месяца.ОтработаноЧасов, 0) КАК ОтработаноЗа2Мес,
		|	ЕСТЬNULL(Время4Месяца.ОтработаноЧасов, 0) КАК ОтработаноЗа4Мес
		|ИЗ
		|	РегистрСведений.ИНАГРО_РаботникиОрганизаций.СрезПоследних(&ДатаНачалаСобытия, Сотрудник = &парамСотрудник) КАК Работники
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			СУММА(Начисления.ОтработаноЧасов) КАК ОтработаноЧасов
		|		ИЗ
		|			РегистрРасчета.ИНАГРО_Начисления КАК Начисления
		|		ГДЕ
		|			Начисления.Сотрудник = &парамСотрудник
		|			И Начисления.ПериодРегистрации < НАЧАЛОПЕРИОДА(&ДатаНачалаСобытия, МЕСЯЦ)
		|			И Начисления.ПериодДействия >= ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(&ДатаНачалаСобытия, МЕСЯЦ), МЕСЯЦ, -2)
		|			И Начисления.ПериодДействия < НАЧАЛОПЕРИОДА(&ДатаНачалаСобытия, МЕСЯЦ)) КАК Время2Месяца
		|		ПО (ИСТИНА)
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			СУММА(Начисления.ОтработаноЧасов) КАК ОтработаноЧасов
		|		ИЗ
		|			РегистрРасчета.ИНАГРО_Начисления КАК Начисления
		|		ГДЕ
		|			Начисления.Сотрудник = &парамСотрудник
		|			И Начисления.ПериодРегистрации < НАЧАЛОПЕРИОДА(&ДатаНачалаСобытия, МЕСЯЦ)
		|			И Начисления.ПериодДействия >= ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(&ДатаНачалаСобытия, МЕСЯЦ), МЕСЯЦ, -4)
		|			И Начисления.ПериодДействия <= КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(&ДатаНачалаСобытия, МЕСЯЦ), МЕСЯЦ, -3), МЕСЯЦ)) КАК Время4Месяца
		|		ПО (ИСТИНА)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИНАГРО_ПлановыеНачисленияРаботниковОрганизаций.СрезПоследних(
		|				&ДатаНачалаСобытия,
		|				Сотрудник = &парамСотрудник
		|					И ВидНачисления = ЗНАЧЕНИЕ(Перечисление.ИНАГРО_ВидыНачисленийРаботникаОрганизации.Основное)) КАК ОсновноеНачисление
		|		ПО (ИСТИНА)";
		
	Запрос.Текст = ТекстЗапроса;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		ОсновнойВидРасчета = Выборка.ОсновнойВидРасчета;
		ГрафикРаботы = Выборка.ГрафикРаботы;
		ОтработаноЗа2Мес = Выборка.ОтработаноЗа2Мес;
		ОтработаноЗа4Мес = Выборка.ОтработаноЗа4Мес;
    КонецЕсли;
		
	Возврат ГрафикРаботы;
	
КонецФункции

// Получение данных
//
// Получение данных
//
Процедура ПолучитьПериодПоРаботнику() Экспорт
	Перем ДатаОкончанияСобытия;
	Перем ДатаПриемаПервыйРабочийДень;
	Перем ОтработаноЗа2Мес, ОтработаноЗа4Мес, ОсновнойВидРасчета;
	
	ДатаНачалаСобытия = ДатаНачала;
	ДатаПриема = ПолучитьДанныеОПриеме(ДатаПриемаПервыйРабочийДень);
	Если ДатаПриема > ДатаНачалаСобытия Тогда
		ТекстПредупреждения = НСтр("ru='Дата начала события меньше даты приема работника в организацию!';uk='Дата початку події менше ніж дата прийому працівника в організацію!'");
		#Если Клиент Тогда
			ПоказатьПредупреждение(,ТекстПредупреждения);
		#Иначе
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстПредупреждения);
		#КонецЕсли
		Возврат
	КонецЕсли;
	
	ГрафикРаботы = ПолучитьДанныеОбОтработанномВремени(ОтработаноЗа2Мес, ОтработаноЗа4Мес, ОсновнойВидРасчета);
	ПериодПолучен = Ложь;
	
	// Получим период
	// -1- работает дольше 2-х месяцев
	// -2- работает меньше 2 месяцев, но дольше 1-го месяца
	// -3- работает меньше целого месяца, но в командировку не в первый рабочий день - заполняем реальный период с даты приема
	// -4- в командировку в первый рабочий день, нет начисленной зарплаты.
	
	Если НачалоМесяца(ДатаНачалаСобытия) = НачалоМесяца(ДатаПриема) Тогда
		// -3-4- 
		ПериодРасчетаСреднегоНачало	= ДатаПриема;	
		ПериодРасчетаСреднегоКонец	= Макс(НачалоДня(ДатаНачалаСобытия-1),ДатаПриема);
		ПериодПолучен = Истина;
	Иначе
		Если ОтработаноЗа2Мес Тогда
			ПериодПолучен = Истина;
			// -2-3-
			ПериодРасчетаСреднегоНачало	= Макс(ДобавитьМесяц(НачалоМесяца(ДатаНачалаСобытия), -ЧислоМесяцев),ДатаПриема);
			ПериодРасчетаСреднегоКонец	= НачалоДня(НачалоМесяца(ДатаНачалаСобытия)-1);
		КонецЕсли;	
		
		Если НЕ ПериодПолучен И ОтработаноЗа4Мес Тогда
			ПериодПолучен = Истина;
			
			Если ДобавитьМесяц(НачалоМесяца(ДатаНачалаСобытия), -4)>= ДатаПриема Тогда
				// -1- работает дольше 2-и месяцев
				ПериодРасчетаСреднегоНачало	= ДобавитьМесяц(НачалоМесяца(ДатаНачалаСобытия), -4);
				ПериодРасчетаСреднегоКонец	= НачалоДня(НачалоМесяца(ДобавитьМесяц(ДатаНачалаСобытия,-2))-1);
				
			ИначеЕсли КонецМесяца(ДобавитьМесяц(ДатаНачалаСобытия, -3)) >= ДатаПриема Тогда
				//-2-3-
				Если ДатаПриемаПервыйРабочийДень Тогда
					// -2- работает меньше 4 месяцев, но дольше 3-го месяца
					// если дата приема первый рабочий день месяца, то месяц считаем целым.
					ПериодРасчетаСреднегоНачало	= ДатаПриема;	
					ПериодРасчетаСреднегоКонец	= НачалоДня(НачалоМесяца(ДобавитьМесяц(ДатаНачалаСобытия,-2))-1);
					
				ИначеЕсли ДобавитьМесяц(НачалоМесяца(ДатаНачалаСобытия), -3) > ДатаПриема Тогда
					// -2- работает меньше 2 месяцев, но дольше 1-го месяца
					// если дата приема не первый рабочий день месяца, но есть целые отработанные месяцы.
					ПериодРасчетаСреднегоНачало	= ДобавитьМесяц(НачалоМесяца(ДатаПриема),1);
					ПериодРасчетаСреднегоКонец	= НачалоДня(НачалоМесяца(ДобавитьМесяц(ДатаНачалаСобытия,-2))-1);;
					
				Иначе
					// -3- работает меньше 3 ех целых месяцев, и в 2 последних месяца ничего не заработал 
					//    - заполняем период с даты приема до конца месяца приема.
					ПериодРасчетаСреднегоНачало	= ДатаПриема;	
					ПериодРасчетаСреднегоКонец	= НачалоДня(КонецМесяца(ДатаПриема));
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ ПериодПолучен Тогда
			// -4- расчет по окладу
			ПериодРасчетаСреднегоНачало	= ДатаПриема;
			ПериодРасчетаСреднегоКонец	= ДатаПриема;
			ПериодПолучен = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Получим Вид учета времени для средней
	Если ГрафикРаботы.СуммированныйУчетРабочегоВремени 
		ИЛИ ОсновнойВидРасчета = ПланыВидовРасчета.ИНАГРО_Начисления.ОкладПоЧасам
		ИЛИ ОсновнойВидРасчета = ПланыВидовРасчета.ИНАГРО_Начисления.ТарифЧасовой
		Тогда
		ВидУчетаВремениДляСредней = Перечисления.ИНАГРО_ВидыУчетаВремениДляСредней.ПоРабочимЧасам;
		
	Иначе
		ВидУчетаВремениДляСредней = Перечисления.ИНАГРО_ВидыУчетаВремениДляСредней.ПоРабочимДням;
		
	КонецЕсли;

КонецПроцедуры

Функция СоздатьСтрокуРасчетСреднего(ВидРасч, Коэффициент, БазовыйПериодНачало, БазовыйПериодКонец)
	
	// Строку вставляем на первую позицию, потому что коэффициент считали в обратном порядке.
	СтрокаТабличнойЧасти =  РасчетСреднего.Вставить(0);
	
	СтрокаТабличнойЧасти.Авторасчет 			= Истина;
	СтрокаТабличнойЧасти.ВидРасчета 			= ВидРасч;
	СтрокаТабличнойЧасти.БазовыйПериодНачало 	= БазовыйПериодНачало;
	СтрокаТабличнойЧасти.БазовыйПериодКонец 	= БазовыйПериодКонец;
	СтрокаТабличнойЧасти.КоэффициентПовышенияОкладов = Коэффициент;
	
КонецФункции  // СоздатьСтрокуРасчетСреднего()

Функция	ПолучитьДанныеОПриеме(ДатаПриемаПервыйРабочийДень)
	
	ЭтоПервыйРабочийДень = Ложь;
	ДатаПриема = Дата('00010101');
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("парамСотрудник",		Сотрудник );
	
	ТекстЗапроса = "
	|	ВЫБРАТЬ
	|       ПриемРаботников.ДатаПриема КАК ДатаПриема,
	|		СУММА(ЕСТЬNULL(Графики.ОсновноеЗначение,0)) КАК ОтработаноДнейСНачалаМесяца
	|   ИЗ (
	|		ВЫБРАТЬ 
	|          	МИНИМУМ(Работники.Период) КАК ДатаПриема
	|		ИЗ РегистрСведений.ИНАГРО_РаботникиОрганизаций КАК Работники
	|   	ГДЕ Работники.Сотрудник = &парамСотрудник
	|       ) КАК ПриемРаботников
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИНАГРО_РаботникиОрганизаций КАК Работники 
	|   	ПО		Работники.Сотрудник = &парамСотрудник
	|			И	Работники.Период = ПриемРаботников.ДатаПриема
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИНАГРО_ГрафикиРаботыПоВидамВремени КАК Графики
	|   	ПО  	Графики.Дата >= НАЧАЛОПЕРИОДА(Работники.Период, МЕСЯЦ)
	|			И	Графики.Дата < Работники.Период
	|			И	Графики.ВидУчетаВремени = ЗНАЧЕНИЕ(Перечисление.ИНАГРО_ВидыУчетаВремени.ПоДням)
	|			// индивидуальные графики и табели не анализируем, так как нас интересует только норма времени
	|			И	ВЫБОР КОГДА Работники.ГрафикРаботы.ГрафикРаботыНормыВремени <> ЗНАЧЕНИЕ(Справочник.ИНАГРО_ГрафикиРаботы.ПустаяСсылка)
	|						ТОГДА  Работники.ГрафикРаботы.ГрафикРаботыНормыВремени
	|                     ИНАЧЕ Работники.ГрафикРаботы
	|				КОНЕЦ = Графики.ГрафикРаботы
	|    СГРУППИРОВАТЬ ПО
	|       ПриемРаботников.ДатаПриема
	|";
				
	Запрос.Текст = ТекстЗапроса;
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ДатаПриема = Выборка.ДатаПриема;
		ДатаПриемаПервыйРабочийДень = Выборка.ОтработаноДнейСНачалаМесяца = 0;
	КонецЕсли;

	Возврат ДатаПриема;
	
КонецФункции  // ПолучитьДанныеОПриеме()

#КонецОбласти

#Область АвтозаполнениеРасчет

// Перем мУдалятьДвижения;
//////////////////////////////////////////////////////////////////////////////////
//// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
////
Процедура РассчитатьПараметрыСреднейДокумента() Экспорт
	
	ЧислоМесяцев = 2;
	
	Если ДатаНачала = Дата('00010101') Тогда
		ПериодРасчетаСреднегоНачало	= Дата('00010101');
		ПериодРасчетаСреднегоКонец	= Дата('00010101');
		ВидУчетаВремениДляСредней = Перечисления.ИНАГРО_ВидыУчетаВремениДляСредней.ПоРабочимДням;
	Иначе
		
		Если ДатаНачала >= ИНАГРО_ПроведениеРасчетов.ДатаИзмененияПорядка100() Тогда
			ПолучитьПериодПоРаботнику1213()
		Иначе
			ПолучитьПериодПоРаботнику();
			ГодоваяПремияБазовыйПериодНачало = НачалоГода(НачалоГода(ПериодРасчетаСреднегоНачало));
			ГодоваяПремия = ИНАГРО_ПроведениеРасчетов.РассчитатьПремияЗаГод(ГодоваяПремияБазовыйПериодНачало, Сотрудник);
		КонецЕсли;	
		
	КонецЕсли;
	
КонецПроцедуры

// Производится РасчетСреднего
//
Функция РассчитатьТЧСреднюю() Экспорт
	
	// очистить расчитываемые поля в ТЧ РасчетСреднего
	Для каждого ТекущаяСтрока Из РасчетСреднего Цикл
		
		Если ТекущаяСтрока.Авторасчет Тогда
			ТекущаяСтрока.Результат = 0;
			ТекущаяСтрока.РезультатПолный = 0;
			
			ТекущаяСтрока.ОтработаноДней = 0;
			ТекущаяСтрока.ОтработаноЧасов = 0;
			ТекущаяСтрока.КалендарныеДни = 0;
			ТекущаяСтрока.НормаДней = 0;
			ТекущаяСтрока.НормаЧасов = 0;
		КонецЕсли;
		
	КонецЦикла;  
	
	Отбор = Новый Структура;
	Отбор.Вставить("ПревышениеПремии", Ложь);
	КопияРасчетСреднего = РасчетСреднего.Выгрузить();
	ИзмКопияРасчетСреднего = КопияРасчетСреднего.Скопировать(Отбор);
	РасчетСреднего.Загрузить(ИзмКопияРасчетСреднего);
	
	Записать();

	Если ДатаНачала < ИНАГРО_ПроведениеРасчетов.ДатаИзмененияПорядка100() Тогда
	
		// 1. Если расчет по Окладу
		//
		Если  РасчетСреднего.Количество() > 0 И РасчетСреднего[0].ВидРасчета = ПланыВидовРасчета.ИНАГРО_СреднийЗаработок.ПоОкладу Тогда
			
			ПараметрыОклада = ИНАГРО_ПроведениеРасчетов.ПолучитьПараметыОклада(ДатаНачала, Сотрудник);
			РасчетСреднего[0].Результат			= ПараметрыОклада["Оклад"];
			РасчетСреднего[0].ОтработаноДней	= ПараметрыОклада["НормаДней"];
			РасчетСреднего[0].ОтработаноЧасов	= ПараметрыОклада["НормаЧасов"];
			РасчетСреднего[0].КалендарныеДни	= ПараметрыОклада["КалендарныеДни"];
			
			РассчитатьСреднюю();
			Записать();
			Возврат Истина;
			
		КонецЕсли;
		
		// 2. Стандартный расчет
	    //
		НачатьТранзакцию();
		Прочитать();
		ВыборкаПоСредним = СформироватьЗапросПоРасчетСреднего().Выбрать();
		ЗафиксироватьТранзакцию();
		
		// Создадим рабочие наборы записей
		Отказ = Ложь;
		НаборСредних = РегистрыРасчета.ИНАГРО_РасчетСреднегоЗаработка.СоздатьНаборЗаписей();
		НаборСредних.Отбор.Регистратор.Значение = Ссылка;
		Пока ВыборкаПоСредним.Следующий() Цикл
			
			ПроверитьЗаполнениеСтрокиРасчетСреднего(ВыборкаПоСредним, Отказ);
			Если НЕ Отказ Тогда
				// Заполним записи в наборах записей регистров
				ДобавитьСтрокуРасчетаСреднего(ВыборкаПоСредним, НаборСредних);
			КонецЕсли;
			
		КонецЦикла;
		НаборСредних.Записать();
		
		Если Отказ Тогда
			
			// Если есть какие-то проблемы - удаляем движения (тут нет транзакции) 
			// Удаляем движения
			НаборСредних.Очистить();
			НаборСредних.Записать();
			
			Возврат Не Отказ;
			
		КонецЕсли;
		
		ОсновнойВидРасчета = ПланыВидовРасчета.ИНАГРО_СреднийЗаработок.ПоЗаработку;
		тКоэффициентПовышенияОкладов = КоэффициентПовышенияОкладов;
		ПредыдущийПериодОсновногоВидаРасчета = Дата(1,1,1);
		нКоэффициентПовышенияОкладов = 0;
		ДанныеДляСредней = ИНАГРО_ПроведениеРасчетов.РассчитатьСреднююПорядок100(Ссылка); 
		Выборка = ДанныеДляСредней.Выборка.Выбрать();  
		Пока Выборка.Следующий() Цикл
			
			СтрокаТабличнойЧасти = РасчетСреднего.Получить( Выборка.НомерСтроки - 1 );
			
			Если НЕ СтрокаТабличнойЧасти.Авторасчет Тогда
				Продолжить;
			КонецЕсли;
			
			Если Не Выборка.ВидРасчета = ОсновнойВидРасчета И нКоэффициентПовышенияОкладов > 0 И ПредыдущийПериодОсновногоВидаРасчета = Выборка.БазовыйПериодНачало Тогда
				СтрокаТабличнойЧасти.Результат				= Окр(Выборка.Результат,2) * нКоэффициентПовышенияОкладов;
			Иначе	
				СтрокаТабличнойЧасти.Результат				= Окр(Выборка.Результат,2) * тКоэффициентПовышенияОкладов;
			КонецЕсли;
			СтрокаТабличнойЧасти.РезультатПолный		= Выборка.РезультатПолный;
			
			СтрокаТабличнойЧасти.ОтработаноДней			= Выборка.ОтработаноДней;
			СтрокаТабличнойЧасти.ОтработаноЧасов		= Выборка.ОтработаноЧасов;
			Если ВидУчетаВремениДляСредней = Перечисления.ИНАГРО_ВидыУчетаВремениДляСредней.ПоКалендарнымДнямСПраздниками
				И СтрокаТабличнойЧасти.ВидРасчета = ПланыВидовРасчета.ИНАГРО_СреднийЗаработок.ПоЗаработку Тогда
				СтрокаТабличнойЧасти.КалендарныеДни		= 1 + День(Выборка.БазовыйПериодКонец) - День(Выборка.БазовыйПериодНачало);
			Иначе
				СтрокаТабличнойЧасти.КалендарныеДни		= Выборка.КалендарныеДни;
			КонецЕсли;
			СтрокаТабличнойЧасти.НормаДней				= Выборка.НормаДней;
			СтрокаТабличнойЧасти.НормаЧасов				= Выборка.НормаЧасов;
			
			Если Выборка.ВидРасчета = ОсновнойВидРасчета Тогда
				нКоэффициентПовышенияОкладов = тКоэффициентПовышенияОкладов;
				тКоэффициентПовышенияОкладов = тКоэффициентПовышенияОкладов * Выборка.КоэффициентПовышенияОкладов;
				ПредыдущийПериодОсновногоВидаРасчета = Выборка.БазовыйПериодНачало;
			КонецЕсли;
		КонецЦикла;
	Иначе
		// 1. Если расчет по Окладу
		//
		Если  РасчетСреднего.Количество() > 0 И РасчетСреднего[0].ВидРасчета = ПланыВидовРасчета.ИНАГРО_СреднийЗаработок.ПоОкладу Тогда
			
			ПараметрыОклада = ИНАГРО_ПроведениеРасчетов.ПолучитьПараметыОклада1213(ДатаНачала, Сотрудник);
			РасчетСреднего[0].Результат			= ПараметрыОклада["Оклад"];
			РасчетСреднего[0].ОтработаноДней	= ПараметрыОклада["НормаДней"];
			РасчетСреднего[0].ОтработаноЧасов	= ПараметрыОклада["НормаЧасов"];
			РасчетСреднего[0].КалендарныеДни	= ПараметрыОклада["КалендарныеДни"];
			
			РассчитатьСреднюю();
			Записать();
			Возврат Истина;
			
		КонецЕсли;
		
		// 2. Стандартный расчет
	    //
		НачатьТранзакцию();
		Прочитать();
		ВыборкаПоСредним = СформироватьЗапросПоРасчетСреднего().Выбрать();
		ЗафиксироватьТранзакцию();
		
		// Создадим рабочие наборы записей
		Отказ = Ложь;
		НаборСредних = РегистрыРасчета.ИНАГРО_РасчетСреднегоЗаработка.СоздатьНаборЗаписей();
		НаборСредних.Отбор.Регистратор.Значение = Ссылка;
		Пока ВыборкаПоСредним.Следующий() Цикл
			
			ПроверитьЗаполнениеСтрокиРасчетСреднего(ВыборкаПоСредним, Отказ);
			Если НЕ Отказ Тогда
				// Заполним записи в наборах записей регистров
				ДобавитьСтрокуРасчетаСреднего(ВыборкаПоСредним, НаборСредних);
			КонецЕсли;
			
		КонецЦикла;
		НаборСредних.Записать();
		
		Если Отказ Тогда
			
			// Если есть какие-то проблемы - удаляем движения (тут нет транзакции) 
			// Удаляем движения
			НаборСредних.Очистить();
			НаборСредних.Записать();
			
			Возврат Не Отказ;
			
		КонецЕсли;
		
		ОсновнойВидРасчета = ПланыВидовРасчета.ИНАГРО_СреднийЗаработок.ПоЗаработку;
		ДанныеДляСредней = ИНАГРО_ПроведениеРасчетов.РассчитатьСреднююПорядок100(Ссылка); 
		ТаблицаПревышений = ДанныеДляСредней.ТаблицаПревышений;
		Выборка = ДанныеДляСредней.Выборка.Выбрать();  
		Пока Выборка.Следующий() Цикл
			
			СтрокаТабличнойЧасти = РасчетСреднего.Получить( Выборка.НомерСтроки - 1 );
			
			Если НЕ СтрокаТабличнойЧасти.Авторасчет И НЕ СтрокаТабличнойЧасти.ПревышениеПремии Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаТабличнойЧасти.Результат				= Окр(Выборка.Результат,2);
			
			СтрокаТабличнойЧасти.РезультатПолный		= Выборка.РезультатПолный;
			
			СтрокаТабличнойЧасти.ОтработаноДней			= Выборка.ОтработаноДней;
			СтрокаТабличнойЧасти.ОтработаноЧасов		= Выборка.ОтработаноЧасов;
			Если ВидУчетаВремениДляСредней = Перечисления.ИНАГРО_ВидыУчетаВремениДляСредней.ПоКалендарнымДнямСПраздниками
				И СтрокаТабличнойЧасти.ВидРасчета = ПланыВидовРасчета.ИНАГРО_СреднийЗаработок.ПоЗаработку Тогда
				СтрокаТабличнойЧасти.КалендарныеДни		= 1 + День(Выборка.БазовыйПериодКонец) - День(Выборка.БазовыйПериодНачало);
			Иначе
				СтрокаТабличнойЧасти.КалендарныеДни		= Выборка.КалендарныеДни;
			КонецЕсли;
			СтрокаТабличнойЧасти.НормаДней				= Выборка.НормаДней;
			СтрокаТабличнойЧасти.НормаЧасов				= Выборка.НормаЧасов;
			
		КонецЦикла;
		
	КонецЕсли;  
	
	Если Ссылка.ДатаНачала >= ИНАГРО_ПроведениеРасчетов.ДатаИзмененияПорядка100_486() Тогда
		Если ТаблицаПревышений.Количество() > 0 Тогда
			Для НомерСтрокиПремии = 0 По ТаблицаПревышений.Количество() - 1 Цикл 
				ДополнительнаяСтрока = РасчетСреднего.Добавить();
				ДополнительнаяСтрока.Авторасчет = Истина;
				ДополнительнаяСтрока.ПревышениеПремии = Истина;
				ДополнительнаяСтрока.БазовыйПериодНачало = ТаблицаПревышений[НомерСтрокиПремии].БазовыйПериодПремииНачало;
				ДополнительнаяСтрока.БазовыйПериодКонец = ТаблицаПревышений[НомерСтрокиПремии].БазовыйПериодПремииКонец;
				ДополнительнаяСтрока.Результат = ТаблицаПревышений[НомерСтрокиПремии].РезультатПолный - ТаблицаПревышений[НомерСтрокиПремии].Результат;
				ДополнительнаяСтрока.ВидРасчета = ТаблицаПревышений[НомерСтрокиПремии].ВидРасчета; 
			КонецЦикла;	
		КонецЕсли;
	КонецЕсли;
	
	НаборСредних.Очистить();
	НаборСредних.Записать();
	
	РассчитатьСреднюю();
	Записать();
	
КонецФункции

Функция РассчитатьСреднюю() Экспорт
	
	СуммаСредней = 0;
	ОплачиваемоеВремя = 0;
	
	Если ВидУчетаВремениДляСредней = Перечисления.ИНАГРО_ВидыУчетаВремениДляСредней.ПоРабочимДням Тогда
		ОплачиваемоеВремя = РасчетСреднего.Итог("ОтработаноДней");
		
	ИначеЕсли ВидУчетаВремениДляСредней = Перечисления.ИНАГРО_ВидыУчетаВремениДляСредней.ПоРабочимЧасам Тогда
		ОплачиваемоеВремя = РасчетСреднего.Итог("ОтработаноЧасов");
		
	Иначе
		ОплачиваемоеВремя = РасчетСреднего.Итог("КалендарныеДни");
		
	КонецЕсли;
	
	СуммаСредней = ?(ОплачиваемоеВремя = 0 , 0, РасчетСреднего.Итог("Результат") / ОплачиваемоеВремя);
		
КонецФункции

Процедура АвтозаполнениеНачисления() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("парамРегистратор",	Ссылка);
	Запрос.УстановитьПараметр("ДатаНачала",			ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания",		ДатаОкончания);
	Запрос.УстановитьПараметр("парамСотрудник",		Сотрудник);
	Запрос.УстановитьПараметр("парамВидРасчета",	ВидРасчета);
	
	//	ВТДанныеКалендаря
	Если Истина Тогда
		//	Описание:
		// 		данные календаря по месяцам 
		//		график работника на дату начала отпуска.
		//		
		ТекстЗапросаВТ = "
			|	ВЫБРАТЬ РАЗЛИЧНЫЕ
			|		ДанныеКалендаря.ДатаМесяца    		КАК ДатаМесяца,
			|		Работники.Сотрудник    				КАК Назначение,
			|		ДанныеКалендаря.ГрафикРаботы		КАК ГрафикРаботы,
			|		ДанныеКалендаря.НормаДнейЗаМесяц	КАК НормаДнейЗаМесяц,
			|		ДанныеКалендаря.НормаЧасовЗаМесяц	КАК НормаЧасовЗаМесяц
			|
			|ПОМЕСТИТЬ ВТДанныеКалендаря	
			|   ИЗ Документ."+Ссылка.Метаданные().Имя+" КАК Основной
			|
			|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИНАГРО_РаботникиОрганизаций.СрезПоследних(&ДатаНачала, Сотрудник = &парамСотрудник ИЛИ Сотрудник.ОсновноеНазначение = &парамСотрудник ) КАК Работники
			|	ПО ИСТИНА
			|
			|	ЛЕВОЕ СОЕДИНЕНИЕ (
			|		ВЫБРАТЬ
			|			ГрафикиРаботы.ГрафикРаботы						КАК ГрафикРаботы,
			|			НАЧАЛОПЕРИОДА( ГрафикиРаботы.Дата, МЕСЯЦ )		КАК ДатаМесяца,
			|			СУММА( ГрафикиРаботы.ОсновноеЗначение )			КАК НормаДнейЗаМесяц,
			|			СУММА( ГрафикиРаботы.ДополнительноеЗначение )	КАК НормаЧасовЗаМесяц
			|		ИЗ	РегистрСведений.ИНАГРО_ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботы
			|		ГДЕ ГрафикиРаботы.ВидУчетаВремени = ЗНАЧЕНИЕ(Перечисление.ИНАГРО_ВидыУчетаВремени.ПоДням) 
			|		И	ГрафикиРаботы.Дата >= НАЧАЛОПЕРИОДА( &ДатаНачала, МЕСЯЦ )	
			|		И	ГрафикиРаботы.Дата <= КОНЕЦПЕРИОДА( &ДатаОкончания, МЕСЯЦ )	
			|		СГРУППИРОВАТЬ ПО
			|			ГрафикиРаботы.ГрафикРаботы,
			|			НАЧАЛОПЕРИОДА( ГрафикиРаботы.Дата, МЕСЯЦ )
			|	) КАК ДанныеКалендаря
			|	ПО		ДанныеКалендаря.ГрафикРаботы = Работники.ГрафикРаботы	
			|
			|ГДЕ Основной.Ссылка = &парамРегистратор	
			|";
		Запрос.Текст = ТекстЗапросаВТ;
		Запрос.Выполнить();
		ТекстЗапросаВТДанныеКалендаря = "ВТДанныеКалендаря";
	КонецЕсли;
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ИСТИНА КАК Авторасчет,
	|	Основной.Дата,
	|	Основной.ПериодРегистрации,
	|	Основной.Организация,
	|	Основной.Ссылка,
	|	Основной.Сотрудник,
	|	ВЫБОР КОГДА Основной.ДатаНачала >= ДанныеКалендаря.ДатаМесяца ТОГДА Основной.ДатаНачала ИНАЧЕ ДанныеКалендаря.ДатаМесяца КОНЕЦ	КАК ДатаНачала,
	|	ВЫБОР КОГДА Основной.ДатаОкончания <= КОНЕЦПЕРИОДА(ДанныеКалендаря.ДатаМесяца, МЕСЯЦ) ТОГДА Основной.ДатаОкончания ИНАЧЕ КОНЕЦПЕРИОДА(ДанныеКалендаря.ДатаМесяца, МЕСЯЦ) КОНЕЦ	КАК ДатаОкончания,
	|	ВЫБОР КОГДА Основной.ДатаНачала >= ДанныеКалендаря.ДатаМесяца ТОГДА Основной.ДатаНачала ИНАЧЕ ДанныеКалендаря.ДатаМесяца КОНЕЦ	КАК БазовыйПериодНачало,
	|	ВЫБОР КОГДА Основной.ДатаОкончания <= КОНЕЦПЕРИОДА(ДанныеКалендаря.ДатаМесяца, МЕСЯЦ) ТОГДА Основной.ДатаОкончания ИНАЧЕ КОНЕЦПЕРИОДА(ДанныеКалендаря.ДатаМесяца, МЕСЯЦ) КОНЕЦ	КАК БазовыйПериодКонец,
	|	ВЫБОР КОГДА Работники.Сотрудник = Основной.Сотрудник ТОГДА Основной.СуммаСредней ИНАЧЕ 0 КОНЕЦ КАК СуммаСредней,
	|	Основной.ВидУчетаВремениДляСредней,
	|  	Основной.ПериодРасчетаСреднегоНачало	КАК ПериодРасчетаСреднегоНачало,
	|  	Основной.ПериодРасчетаСреднегоКонец		КАК ПериодРасчетаСреднегоКонец,
	|
	|	&парамВидРасчета						КАК ВидРасчета,
	|
	|	Работники.Сотрудник  					КАК Назначение,
	|	Работники.ПодразделениеОрганизации			КАК ПодразделениеОрганизации,
	|	ДанныеКалендаря.ГрафикРаботы 				КАК ГрафикРаботы,
	|	ДанныеКалендаря.НормаЧасовЗаМесяц         	КАК НормаЧасовЗаМесяц,
	|	ДанныеКалендаря.НормаДнейЗаМесяц         	КАК НормаДнейЗаМесяц
	|
	|ИЗ Документ."+Ссылка.Метаданные().Имя+" КАК Основной
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИНАГРО_РаботникиОрганизаций.СрезПоследних(&ДатаНачала, Сотрудник = &парамСотрудник ИЛИ Сотрудник.ОсновноеНазначение = &парамСотрудник ) КАК Работники
	|ПО		ИСТИНА
	|// данные нормы календаря
	|ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДанныеКалендаря КАК ДанныеКалендаря
	|ПО		ДанныеКалендаря.Назначение = Работники.Сотрудник	
	|
	|ГДЕ Основной.Ссылка = &парамРегистратор	
	|	И  (ЕСТЬNULL(Работники.ЗанимаемыхСтавок,1) > 0)
	|";
	
	Запрос.Текст = ТекстЗапроса;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	мСпособОтраженияВБухучете = Справочники.СпособыОтраженияЗарплатыВРеглУчете.ПустаяСсылка();
	НачисленияВыборка = ИНАГРО_ПроведениеРасчетов.ЗапросСпособОтражения(ДатаНачала, ВидРасчета, Сотрудник, Организация).Выбрать();
	Если НачисленияВыборка.Следующий() Тогда
		мСпособОтраженияВБухучете = НачисленияВыборка.СпособОтраженияВБухучете;
	КонецЕсли;
	
	// каждый цикл это назначение
	Пока Выборка.Следующий() Цикл
				
		// строка движений
		НоваяСтрока = Начисления.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		
		// Реквизиты
		Если Сотрудник = Выборка.Назначение Тогда
			
			НоваяСтрока.Показатель1	= Выборка.СуммаСредней;
			Если ВидРасчета = ПланыВидовРасчета.ИНАГРО_Начисления.Командировка Тогда
				Если ЗначениеЗаполнено(ПерерассчитываемыйДокумент) Тогда
					НоваяСтрока.Состояние	= Перечисления.ИНАГРО_СостоянияРаботникаОрганизации.НеИзменять;
				Иначе	
					НоваяСтрока.Состояние = Перечисления.ИНАГРО_СостоянияРаботникаОрганизации.Командировка;
				КонецЕсли;	
				НоваяСтрока.ПроизошедшееСобытие	= Истина;
			ИначеЕсли ВидРасчета = ПланыВидовРасчета.ИНАГРО_Начисления.ОплатаПоСреднемуМоб Тогда
				Если ЗначениеЗаполнено(ПерерассчитываемыйДокумент) Тогда
					НоваяСтрока.Состояние	= Перечисления.ИНАГРО_СостоянияРаботникаОрганизации.НеИзменять;
				Иначе	
					НоваяСтрока.Состояние = Перечисления.ИНАГРО_СостоянияРаботникаОрганизации.Мобилизован;
				КонецЕсли;	
			ИначеЕсли ВидРасчета = ПланыВидовРасчета.ИНАГРО_Начисления.ОплатаПосреднемуМобОрганизации Тогда
				Если ЗначениеЗаполнено(ПерерассчитываемыйДокумент) Тогда
					НоваяСтрока.Состояние	= Перечисления.ИНАГРО_СостоянияРаботникаОрганизации.НеИзменять;
				Иначе	
					НоваяСтрока.Состояние = Перечисления.ИНАГРО_СостоянияРаботникаОрганизации.Мобилизован;
				КонецЕсли;	
			Иначе
				Если ЗначениеЗаполнено(ПерерассчитываемыйДокумент) Тогда
					НоваяСтрока.Состояние	= Перечисления.ИНАГРО_СостоянияРаботникаОрганизации.НеИзменять;
				КонецЕсли;
			КонецЕсли;
			
			НоваяСтрока.СпособОтраженияВБухучете	= мСпособОтраженияВБухучете;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Записать();
	
КонецПроцедуры  // АвтозаполнениеНачисления()

// Получение данных
//
Процедура РассчитатьНачисления(Сотрудники, КомментироватьРасчет = Ложь ) Экспорт

	// Массивы для хранения индексов строк табличных частей,
	// используются для расчета по одному сотруднику.
	МассивИндексыСтрокНачисления = Новый Массив();
	
	Отказ = Ложь;
	// Перечитаем объект и соберем данные для заполнения наборов записей регистров
	НачатьТранзакцию();
	Прочитать();
	ВыборкаПоШапкеДокумента = СформироватьЗапросПоШапке().Выбрать();
	
	// позиционируем выборку
	ВыборкаПоШапкеДокумента.Следующий();
	ВыборкаПоНачислениям = СформироватьЗапросПоНачислениям().Выбрать();
	ЗафиксироватьТранзакцию();
	
	// Создадим рабочие наборы записей
	НаборОсновныеНачисления = РегистрыРасчета.ИНАГРО_Начисления.СоздатьНаборЗаписей();
	НаборОсновныеНачисления.Отбор.Регистратор.Значение = Ссылка;
	
	Пока ВыборкаПоНачислениям.Следующий() Цикл
		
		ПроверитьЗаполнениеСтрокиНачисления(ВыборкаПоШапкеДокумента,ВыборкаПоНачислениям, Отказ);
		Если НЕ Отказ Тогда
			// Заполним записи в наборах записей регистров
			ДобавитьСтрокуОсновныхНачислений(ВыборкаПоНачислениям, НаборОсновныеНачисления);
			МассивИндексыСтрокНачисления.Добавить(ВыборкаПоНачислениям.НомерСтроки-1);
			
		КонецЕсли;
		
	КонецЦикла;
	НаборОсновныеНачисления.Записать();
	
	Если Отказ Тогда
		
		// Если есть какие-то проблемы - удаляем движения (тут нет транзакции) 
		// Удаляем движения.
		НаборОсновныеНачисления.Очистить();
		НаборОсновныеНачисления.Записать();
		
		Возврат;
		
	КонецЕсли;
	
	// Получим дополнительные записи, имеющие признак сторно, которые необходимо добавить 
	// в текущий набор для того, чтобы в результате сохранения получился максимальный 
	// фактический период действия.
	ТаблицаСторноЗаписей = НаборОсновныеНачисления.ПолучитьДополнение();
	ТаблицаСторноЗаписей.Колонки.Удалить("ПериодРегистрации");
	ТаблицаСторноЗаписей.Колонки.ПериодРегистрацииСторно.Имя = "ПериодРегистрации";
	ТаблицаСторноЗаписей.Колонки.Удалить("ПериодДействияНачало");
	ТаблицаСторноЗаписей.Колонки.ПериодДействияНачалоСторно.Имя = "ПериодДействияНачало";
	ТаблицаСторноЗаписей.Колонки.Удалить("ПериодДействияКонец");
	ТаблицаСторноЗаписей.Колонки.ПериодДействияКонецСторно.Имя = "ПериодДействияКонец";
	Для каждого СтрокаСторно Из ТаблицаСторноЗаписей Цикл
		
		// Заполним записи в наборе записей регистра
		Движение = НаборОсновныеНачисления.Добавить();
		ЗаполнитьЗначенияСвойств(Движение, СтрокаСторно);
		Движение.Сторно						= Истина;
		Движение.Авторасчет					= Истина;
		
		// и в табличной части
		Движение = Начисления.Добавить();
		ЗаполнитьЗначенияСвойств(Движение, СтрокаСторно);
		Движение.ДатаНачала		= СтрокаСторно.ПериодДействияНачало;   
		Движение.ДатаОкончания	= СтрокаСторно.ПериодДействияКонец; 
		Движение.Сторно						= Истина;
		Движение.Авторасчет					= Истина;

		МассивИндексыСтрокНачисления.Добавить(Движение.НомерСтроки-1);
		
	КонецЦикла;
	НаборОсновныеНачисления.Записать();
		
	// Рассчитываем записи
	// при этом передаем не только набор записей регистра расчета, но и набор записей регистра 
	// накопления со сведениями об отработанном времени.
	ИНАГРО_ПроведениеРасчетов.РассчитатьЗаписиРегистраРасчета("ИНАГРО_Начисления", 
														НаборОсновныеНачисления, 
														Начисления, 
														МассивИндексыСтрокНачисления, 
														Сотрудники);
	
	// Удаляем движения
	НаборОсновныеНачисления.Очистить();
	НаборОсновныеНачисления.Записать();
	
	Записать();
	
КонецПроцедуры  // РассчитатьНачисления


Процедура ПолучитьПериодПоРаботнику1213() Экспорт
	Перем ДатаОкончанияСобытия;
	Перем ДатаПриемаПервыйРабочийДень;
	Перем ОтработаноЗа2Мес, ОтработаноЗа4Мес, ОсновнойВидРасчета;
	
	ДатаНачалаСобытия = ДатаНачала;
	ДатаПриема = ПолучитьДанныеОПриеме(ДатаПриемаПервыйРабочийДень);
	Если ДатаПриема > ДатаНачалаСобытия Тогда
		ТекстПредупреждения = НСтр("ru='Дата начала события меньше даты приема работника в организацию!';uk='Дата початку події менше дати прийняття працівника в організацію!'");
		#Если Клиент Тогда
			Предупреждение(ТекстПредупреждения);
		#Иначе
			Сообщить(ТекстПредупреждения, СтатусСообщения.Информация);
		#КонецЕсли
		Возврат
	КонецЕсли;

	ГрафикРаботы = ПолучитьДанныеОбОтработанномВремени(ОтработаноЗа2Мес, ОтработаноЗа4Мес, ОсновнойВидРасчета);
	ПериодПолучен = Ложь;
	
	Если НЕ ЗначениеЗаполнено(ДатаПриема) Тогда
		Возврат;
	КонецЕсли;	
	
	// Получим период
	// -1- работает дольше 2-х месяцев
	// -2- работает меньше 2 месяцев, но дольше 1-го месяца
	// -3- в командировку в первый рабочий месяц, оплата по окладу, даже если есть заработок
	Если НачалоМесяца(ДатаНачалаСобытия) = НачалоМесяца(ДатаПриема) Тогда
		// -3- 
		ПериодРасчетаСреднегоНачало	= ДатаПриема;	
		ПериодРасчетаСреднегоКонец	= Макс(НачалоДня(ДатаНачалаСобытия-1),ДатаПриема);
		ПериодПолучен = Истина;
	Иначе
		
		Если ОтработаноЗа2Мес Тогда
			ПериодПолучен = Истина;
			ПериодРасчетаСреднегоНачало	= Макс(ДобавитьМесяц(НачалоМесяца(ДатаНачалаСобытия), -ЧислоМесяцев),ДатаПриема);
			ПериодРасчетаСреднегоКонец	= НачалоДня(НачалоМесяца(ДатаНачалаСобытия)-1);
		КонецЕсли;
		
		Если НЕ ПериодПолучен И ОтработаноЗа4Мес Тогда
			ПериодПолучен = Истина;
			
			Если ДобавитьМесяц(НачалоМесяца(ДатаНачалаСобытия), -4)>= ДатаПриема Тогда
				// -1- работает дольше 2-и месяцев
				ПериодРасчетаСреднегоНачало	= ДобавитьМесяц(НачалоМесяца(ДатаНачалаСобытия), -4);
				ПериодРасчетаСреднегоКонец	= НачалоДня(НачалоМесяца(ДобавитьМесяц(ДатаНачалаСобытия,-2))-1);
				
			ИначеЕсли КонецМесяца(ДобавитьМесяц(ДатаНачалаСобытия, -3)) >= ДатаПриема
				И ДобавитьМесяц(НачалоМесяца(ДатаНачалаСобытия), -4) <= ДатаПриема Тогда
					ПериодРасчетаСреднегоНачало	= ДатаПриема;	
					ПериодРасчетаСреднегоКонец	= НачалоДня(НачалоМесяца(ДобавитьМесяц(ДатаНачалаСобытия,-2))-1);
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ ПериодПолучен Тогда
			// -3- расчет по окладу
			ПериодРасчетаСреднегоНачало	= ДатаПриема;
			ПериодРасчетаСреднегоКонец	= ДатаПриема;
			ПериодПолучен = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Получим Вид учета времени для средней
	Если ГрафикРаботы.СуммированныйУчетРабочегоВремени 
		ИЛИ ОсновнойВидРасчета = ПланыВидовРасчета.Начисления.ОкладПоЧасам
		ИЛИ ОсновнойВидРасчета = ПланыВидовРасчета.Начисления.ТарифЧасовой
		Тогда
		ВидУчетаВремениДляСредней = Перечисления.ИНАГРО_ВидыУчетаВремениДляСредней.ПоРабочимЧасам;
		
	Иначе
		ВидУчетаВремениДляСредней = Перечисления.ИНАГРО_ВидыУчетаВремениДляСредней.ПоРабочимДням;
		
	КонецЕсли;
	
КонецПроцедуры // ПолучитьПериодПоРаботнику()


#КонецОбласти

#КонецЕсли

