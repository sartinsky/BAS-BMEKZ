#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПроцедурыИФункцииПечати

Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	// Команда печати Удостоверения
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "Удостоверение";
	КомандаПечати.Представление = НСтр("ru='Удостоверение';uk='Посвідчення'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечати";
	КомандаПечати.СписокФорм    = "ФормаДокумента,ФормаСписка";
	
	// Команда печати Расчета средней
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "РасчетСредней";
	КомандаПечати.Представление =  НСтр("ru='Расчет средней';uk='Розрахунок середньої'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечати";
	КомандаПечати.СписокФорм    = "ФормаДокумента,ФормаСписка";
	
	// Реестр документов
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "Реестр";
	КомандаПечати.Представление = НСтр("ru='Реестр документов';uk='Реєстр документів'");
	КомандаПечати.ЗаголовокФормы= НСтр("ru='Реестр документов ""Оплата по среднему заработку""';uk='Реєстр документів ""Оплата по середньому заробітку""'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечатиРеестраДокументов";
	КомандаПечати.СписокФорм    = "ФормаСписка";
	КомандаПечати.Порядок       = 100;

КонецПроцедуры

// Процедура осуществляет печать документа 
// Можно направить печать на экран или принтер, а также распечатать необходимое количество копий.
// Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
// НазваниеМакета - строка, название макета.
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	// Устанавливаем признак доступности печати покомплектно.
	ПараметрыВывода.ДоступнаПечатьПоКомплектно = Истина;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "Удостоверение")  Тогда
		
		// Формируем табличный документ и добавляем его в коллекцию печатных форм.
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "Удостоверение", НСтр("ru='Удостоверение';uk='Посвідчення'"), 
		ПечатьУдостоверение(МассивОбъектов, ОбъектыПечати, ПараметрыВывода), , "Документ.ИНАГРО_ОплатаПоСреднемуЗаработку.ПФ_XML_Удостоверение", ,Истина);
		
	КонецЕсли; 	
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "РасчетСредней")  Тогда
		
		// Формируем табличный документ и добавляем его в коллекцию печатных форм.
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "РасчетСредней",  НСтр("ru='Расчет средней';uk='Розрахунок середньої'"), 
		ПечатьСредняя(МассивОбъектов, ОбъектыПечати, ПараметрыВывода), , "Документ.ИНАГРО_ОплатаПоСреднемуЗаработку.ПФ_XML_Средняя", ,Истина);
		
	КонецЕсли;
	
КонецПроцедуры

// Функция формирует табличный документ с печатной формой 
// командировочного удостоверения.
//
// Возвращаемое значение:
//  Табличный документ - печатная форма.
//
Функция ПечатьУдостоверение(МассивОбъектов, ОбъектыПечати, ПараметрыВывода)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_КомандировкиОрганизации_Удостоверение";
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ИНАГРО_ОплатаПоСреднемуЗаработку.ПФ_XML_Удостоверение");
	
	КодЯзыкаПечать = ПараметрыВывода.КодЯзыкаДляМногоязычныхПечатныхФорм;
	Макет.КодЯзыкаМакета = КодЯзыкаПечать;
	
	ПервыйДокумент = Истина;
	Для каждого Ссылка Из МассивОбъектов Цикл
		Если Не ПервыйДокумент Тогда
			ТабДокумент.ВывестиВертикальныйРазделительСтраниц();
		КонецЕсли; 
		ПервыйДокумент = Ложь;	 
	
	// получаем данные для печати
	ВыборкаДляШапки   = СформироватьЗапросДляПечати("ПоРеквизитамДокумента",Ссылка).Выбрать();
	ВыборкаДляШапки.Следующий();
	
	// запоминаем области макета
	ОбластьМакета		= Макет.ПолучитьОбласть("Форма");

	ОбластьМакета.Параметры.Заполнить(ВыборкаДляШапки); // данные из шапки.
	ОбластьМакета.Параметры.Продолжительность = ?(НЕ ЗначениеЗаполнено(ВыборкаДляШапки.ДатаОкончания),"",Цел((ВыборкаДляШапки.ДатаОкончания - ВыборкаДляШапки.ДатаНачала + 1) / 86400)+1);
	
	ТабДокумент.Вывести(ОбластьМакета);
	КонецЦикла;
	Возврат ТабДокумент;

КонецФункции // ПечатьУдостоверение()	

// Функция формирует табличный документ с печатной формой 
// командировочного удостоверения.
//
// Возвращаемое значение:
//  Табличный документ - печатная форма.
//
Функция ПечатьСредняя(МассивОбъектов, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_КомандировкиОрганизации_Средняя";
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ИНАГРО_ОплатаПоСреднемуЗаработку.ПФ_XML_Средняя");
	
	КодЯзыкаПечать = ПараметрыВывода.КодЯзыкаДляМногоязычныхПечатныхФорм;
	Макет.КодЯзыкаМакета = КодЯзыкаПечать;
	
	ПервыйДокумент = Истина;
	Для каждого Ссылка Из МассивОбъектов Цикл
		Если Не ПервыйДокумент Тогда
			ТабДокумент.ВывестиВертикальныйРазделительСтраниц();
		КонецЕсли; 
		ПервыйДокумент = Ложь;	 

	ТабельныйНомер = Ссылка.Сотрудник.Код;

	ОбластьШапка = Макет.ПолучитьОбласть("Шапка");
	ОбластьШапка.Параметры.Заполнить(Ссылка);
	ОбластьШапка.Параметры.ТабельныйНомер = ТабельныйНомер;
	ОбластьШапка.Параметры.КодПоДРФО = Ссылка.Сотрудник.ФизическоеЛицо.КодПоДРФО; 
	ОбластьШапка.Параметры.Дата = Формат(Ссылка.Дата,"ДФ=dd.MM.yyyy");
	ОбластьШапка.Параметры.ДатаНачала = Формат(Ссылка.ДатаНачала,"ДФ=dd.MM.yyyy");
	ОбластьШапка.Параметры.ДатаОкончания = Формат(Ссылка.ДатаОкончания,"ДФ=dd.MM.yyyy");
	ОбластьШапка.Параметры.ПериодРасчетаСреднегоНачало = Формат(Ссылка.ПериодРасчетаСреднегоНачало,"ДФ=dd.MM.yyyy");
	ОбластьШапка.Параметры.ПериодРасчетаСреднегоКонец = Формат(Ссылка.ПериодРасчетаСреднегоКонец,"ДФ=dd.MM.yyyy");
	ТабДокумент.Вывести(ОбластьШапка);
	ОбластьСтроки = Макет.ПолучитьОбласть("СтрокаСреднего");
	
	табСредняяКоэф = Ссылка.РасчетСреднего.Выгрузить();
    табСредняяКоэф.Свернуть("БазовыйПериодНачало,БазовыйПериодКонец","КоэффициентПовышенияОкладов");
    табСредняяКоэф.Сортировать("БазовыйПериодНачало Убыв");
	Коэф = Ссылка.КоэффициентПовышенияОкладов;
	КоэфТек = 1;
	Для Каждого СтрКоэф Из табСредняяКоэф Цикл
		Коэф = Коэф * КоэфТек;
		КоэфТек = СтрКоэф.КоэффициентПовышенияОкладов;
		СтрКоэф.КоэффициентПовышенияОкладов = Коэф;
	КонецЦикла;
    табСредняяКоэф.Сортировать("БазовыйПериодНачало");
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ОплатаПоСреднемуЗаработку.БазовыйПериодНачало КАК БазовыйПериодНачало,
	|	ОплатаПоСреднемуЗаработку.ВидРасчета КАК ВидРасчета,
	|	СУММА(ОплатаПоСреднемуЗаработку.Результат) КАК Результат,
	|	СУММА(ОплатаПоСреднемуЗаработку.КалендарныеДни) КАК КалендарныеДни,
	|	СУММА(ОплатаПоСреднемуЗаработку.ОтработаноДней) КАК ОтработаноДней,
	|	СУММА(ОплатаПоСреднемуЗаработку.ОтработаноЧасов) КАК ОтработаноЧасов
	|ИЗ
	|	Документ.ИНАГРО_ОплатаПоСреднемуЗаработку.РасчетСреднего КАК ОплатаПоСреднемуЗаработку
	|ГДЕ
	|	ОплатаПоСреднемуЗаработку.Ссылка.Ссылка = &парамСсылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ОплатаПоСреднемуЗаработку.ВидРасчета,
	|	ОплатаПоСреднемуЗаработку.БазовыйПериодНачало
	|УПОРЯДОЧИТЬ ПО
	|	ОплатаПоСреднемуЗаработку.ВидРасчета,
	|	ОплатаПоСреднемуЗаработку.БазовыйПериодНачало
	|ИТОГИ ПО
	|   ОБЩИЕ,
	|	БазовыйПериодНачало,
	|	ВидРасчета
	|";
	
	Запрос.УстановитьПараметр("парамСсылка", Ссылка);
	табСредняя = Запрос.Выполнить().Выгрузить();
	Рез = Запрос.Выполнить();
	Результат = Рез.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "ВидРасчета");
	
	ОбластьШапкаРасчетСреднего_Начало 	 = Макет.ПолучитьОбласть("ШапкаСредней|Начало");
	ОбластьШапкаРасчетСреднего_ВидРасчета = Макет.ПолучитьОбласть("ШапкаСредней|ВидРасчета");
	ОбластьШапкаРасчетСреднего_Конец 	 = Макет.ПолучитьОбласть("ШапкаСредней|Конец");
	
	СтрокаСреднего_Начало				 = Макет.ПолучитьОбласть("СтрокаСреднего|Начало");
	СтрокаСреднего_ВидРасчета            = Макет.ПолучитьОбласть("СтрокаСреднего|ВидРасчета");
	СтрокаСреднего_Конец                 = Макет.ПолучитьОбласть("СтрокаСреднего|Конец");
	
	ТабДокумент.Вывести(ОбластьШапкаРасчетСреднего_Начало);
	
	КоличествоВставляемыхОбластей = 0;
	Пока Результат.Следующий() Цикл
		ОбластьШапкаРасчетСреднего_ВидРасчета.Параметры.ВидРасчета = Результат.ВидРасчета;
		ТабДокумент.Присоединить(ОбластьШапкаРасчетСреднего_ВидРасчета);
		КоличествоВставляемыхОбластей = КоличествоВставляемыхОбластей + 1;
	КонецЦикла;
	ОбластьДляОбъединения = ТабДокумент.Область(15,5,15,5+КоличествоВставляемыхОбластей-1);
	ОбластьДляОбъединения.Объединить();
	
	ТабДокумент.Присоединить(ОбластьШапкаРасчетСреднего_Конец);
	
	ИндКоэф = 0;
	ВыборкаПериод = Рез.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "БазовыйПериодНачало");
	Пока ВыборкаПериод.Следующий() Цикл
		СтрКоэф = табСредняяКоэф[ИндКоэф];
		СтрокаСреднего_Начало.Параметры.Год   =	Формат(Год(ВыборкаПериод.БазовыйПериодНачало),"ЧГ=0");
		СтрокаДатыМесяца = "";
		Если СтрКоэф.БазовыйПериодНачало <> НачалоМесяца(СтрКоэф.БазовыйПериодНачало)
			ИЛИ СтрКоэф.БазовыйПериодКонец <> НачалоДня(КонецМесяца(СтрКоэф.БазовыйПериодКонец)) Тогда
			СтрокаДатыМесяца = " ("+День(СтрКоэф.БазовыйПериодНачало)+"-"+День(СтрКоэф.БазовыйПериодКонец)+")";
		КонецЕсли;
		СтрокаСреднего_Начало.Параметры.Месяц = Формат(СтрКоэф.БазовыйПериодНачало, "ДФ='ММММ'")+СтрокаДатыМесяца;
		ТабДокумент.Вывести(СтрокаСреднего_Начало);
		
		ВыборкаВидРасчета = ВыборкаПериод.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "ВидРасчета");
		Пока ВыборкаВидРасчета.Следующий() Цикл
			СтрокаСреднего_ВидРасчета.Параметры.Результат = ВыборкаВидРасчета.Результат;
			ТабДокумент.Присоединить(СтрокаСреднего_ВидРасчета);
			СтрокаСреднего_Конец.Параметры.КоэффициентПовышенияОкладов = СтрКоэф.КоэффициентПовышенияОкладов;
		КонецЦикла;
		
		СтрокаСреднего_Конец.Параметры.ОтработаноДней = ВыборкаПериод.ОтработаноДней;	
		СтрокаСреднего_Конец.Параметры.ОтработаноЧасов = ВыборкаПериод.ОтработаноЧасов;	
		СтрокаСреднего_Конец.Параметры.КалендарныеДни = ВыборкаПериод.КалендарныеДни;	
		
		ТабДокумент.Присоединить(СтрокаСреднего_Конец);	
		ИндКоэф = ИндКоэф + 1;
	КонецЦикла;
	
	ОбластьИтогиСреднего_Начало			= Макет.ПолучитьОбласть("ИтогиСреднего|Начало");
	ОбластьИтогиСреднего_ВидРасчета		= Макет.ПолучитьОбласть("ИтогиСреднего|ВидРасчета");
	ОбластьИтогиСреднего_Конец			= Макет.ПолучитьОбласть("ИтогиСреднего|КОНЕЦ");
	
	ОбластьИтогиСреднего_ВидРасчета.Параметры.Результат		= табСредняя.Итог("Результат");
	
	ТабДокумент.Вывести(ОбластьИтогиСреднего_Начало);
	Результат.Сбросить();
	ВыборкаВидРасчета = Результат;
    Пока ВыборкаВидРасчета.Следующий() Цикл
		ОбластьИтогиСреднего_ВидРасчета.Параметры.Результат = ВыборкаВидРасчета.Результат;
		ТабДокумент.Присоединить(ОбластьИтогиСреднего_ВидРасчета);
	КонецЦикла;
	
	Выборка = Рез.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "ОБЩИЕ");
	Пока Выборка.Следующий() Цикл
		ОбластьИтогиСреднего_Конец.Параметры.ОтработаноДней		= Выборка.ОтработаноДней;
		ОбластьИтогиСреднего_Конец.Параметры.ОтработаноЧасов	= Выборка.ОтработаноЧасов;
		ОбластьИтогиСреднего_Конец.Параметры.КалендарныеДни		= Выборка.КалендарныеДни;
	КонецЦикла;
	ТабДокумент.Присоединить(ОбластьИтогиСреднего_Конец);
	
	ОбластьШапка2 = Макет.ПолучитьОбласть("Шапка2");
	Если Ссылка.ВидУчетаВремениДляСредней = Перечисления.ИНАГРО_ВидыУчетаВремениДляСредней.ПоРабочимДням Тогда
		ОбластьШапка2.Параметры.СредняяТекст = НСтр ("ru = 'Среднедневная (по рабочим дням):'; uk = 'Середньоденна (по робочих днях):'",КодЯзыкаПечать);
	ИначеЕсли Ссылка.ВидУчетаВремениДляСредней = Перечисления.ИНАГРО_ВидыУчетаВремениДляСредней.ПоРабочимЧасам Тогда
		ОбластьШапка2.Параметры.СредняяТекст = НСтр ("ru = 'Среднечасовая (по рабочим часам):'; uk = 'Середньогодинна (по робочих годинах):'",КодЯзыкаПечать);
	ИначеЕсли Ссылка.ВидУчетаВремениДляСредней = Перечисления.ИНАГРО_ВидыУчетаВремениДляСредней.ПоКалендарнымДням Тогда
		ОбластьШапка2.Параметры.СредняяТекст = НСтр ("ru = 'Среднедневная (по календарным дням с вычетом праздников):'; uk = 'Середньоденна (за календарними днями з вирахуванням свят):'",КодЯзыкаПечать);
	ИначеЕсли Ссылка.ВидУчетаВремениДляСредней = Перечисления.ИНАГРО_ВидыУчетаВремениДляСредней.ПоКалендарнымДнямСПраздниками Тогда
		ОбластьШапка2.Параметры.СредняяТекст = НСтр("ru = 'Среднедневная (по календарным дням без вычета праздников):'; uk = 'Середньоденна (за календарними днями без вирахування свят):'",КодЯзыкаПечать);
	КонецЕсли;                                            
	ОбластьШапка2.Параметры.СуммаСредней = Ссылка.СуммаСредней;
	ТабДокумент.Вывести(ОбластьШапка2);
	
	ОбластьСтроки2 = Макет.ПолучитьОбласть("СтрокаНачисления");
	
	Для Каждого СтрокаТЧ Из Ссылка.Начисления Цикл
		ОбластьСтроки2.Параметры.Заполнить(СтрокаТЧ);
		ТабДокумент.Вывести(ОбластьСтроки2);
	КонецЦикла;
	
	ОбластьИтогиНачислений = Макет.ПолучитьОбласть("ИтогиНачислений");
	ОбластьИтогиНачислений.Параметры.НормаДней = Ссылка.Начисления.Итог("НормаДней");
	ОбластьИтогиНачислений.Параметры.НормаЧасов = Ссылка.Начисления.Итог("НормаЧасов");
	ОбластьИтогиНачислений.Параметры.КалендарныеДни = Ссылка.Начисления.Итог("КалендарныеДни");
	ОбластьИтогиНачислений.Параметры.Результат = Ссылка.Начисления.Итог("Результат");
    ТабДокумент.Вывести(ОбластьИтогиНачислений);

	
	ОбластьПодвал = Макет.ПолучитьОбласть("Подвал");
	ОбластьПодвал.Параметры.Ответственный = Ссылка.Ответственный.ФизическоеЛицо.Наименование;
	ТабДокумент.Вывести(ОбластьПодвал);	
	КонецЦикла;
	Возврат ТабДокумент;	
	
КонецФункции

// Формирует запрос по документу и связанным регистрам сведений
//
// Параметры: 
//  Режим - строка, может принимать значения:
//			"ПоРеквизитамДокумента"
//			"ПоТабличнойЧастиДокумента"
//
// Возвращаемое значение:
//  Результат запроса с данными об организации или о работниках из табличной части.
//
Функция СформироватьЗапросДляПечати(Режим,Ссылка)
    
	Запрос = Новый Запрос;

	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка",  Ссылка);
	Запрос.УстановитьПараметр("Руководитель",	 Перечисления.ОтветственныеЛицаОрганизаций.Руководитель);
	Запрос.УстановитьПараметр("ДатаДокумента",	 Ссылка.Дата);
	Запрос.УстановитьПараметр("Организация",	 Ссылка.Организация);
	Запрос.Текст =
		"ВЫБРАТЬ
		|	КомандировкиОрганизаций.Дата КАК ДатаДок,
		|	КомандировкиОрганизаций.Номер КАК НомерДок,
		|	ВЫБОР
		|		КОГДА ФИОФизЛиц.Фамилия ЕСТЬ NULL
		|			ТОГДА КомандировкиОрганизаций.Физлицо.Наименование
		|		ИНАЧЕ ФИОФизЛиц.Фамилия + "" "" + ФИОФизЛиц.Имя + "" "" + ФИОФизЛиц.Отчество
		|	КОНЕЦ КАК Работник,
		|	ВЫБОР
		|		КОГДА ПаспортныеДанныеФизЛицСрезПоследних.ВидДокумента.Наименование ЕСТЬ NULL
		|			ТОГДА """"
		|		ИНАЧЕ ПаспортныеДанныеФизЛицСрезПоследних.Серия
		|	КОНЕЦ КАК ДокументСерия,
		|	ВЫБОР
		|		КОГДА ПаспортныеДанныеФизЛицСрезПоследних.ВидДокумента.Наименование ЕСТЬ NULL
		|			ТОГДА """"
		|		ИНАЧЕ ПаспортныеДанныеФизЛицСрезПоследних.Номер
		|	КОНЕЦ КАК ДокументНомер,
		|	КомандировкиОрганизаций.Организация.НаименованиеПолное КАК НазваниеОрганизации,
		|	КомандировкиОрганизаций.СтранаНазначения,
		|	КомандировкиОрганизаций.ОрганизацияНазначения,
		|	КомандировкиОрганизаций.ДатаНачала,
		|	КомандировкиОрганизаций.ДатаОкончания,
		|	КомандировкиОрганизаций.Цель,
		|	ОтветственныеЛицаОрганизацийСрезПоследних.Должность.Представление КАК ДолжностьРуководителя,
		|	ВЫБОР
		|		КОГДА ФИОФизЛицСрезПоследних.ФизическоеЛицо ЕСТЬ NULL
		|			ТОГДА ОтветственныеЛицаОрганизацийСрезПоследних.ФизическоеЛицо.Наименование
		|		ИНАЧЕ ФИОФизЛицСрезПоследних.Фамилия + ВЫБОР
		|				КОГДА ПОДСТРОКА(ФИОФизЛицСрезПоследних.Имя, 1, 1) <> """"
		|					ТОГДА "" "" + ПОДСТРОКА(ФИОФизЛицСрезПоследних.Имя, 1, 1) + "".""
		|				ИНАЧЕ """"
		|			КОНЕЦ + ВЫБОР
		|				КОГДА ПОДСТРОКА(ФИОФизЛицСрезПоследних.Отчество, 1, 1) <> """"
		|					ТОГДА "" "" + ПОДСТРОКА(ФИОФизЛицСрезПоследних.Отчество, 1, 1) + "".""
		|				ИНАЧЕ """"
		|			КОНЕЦ
		|	КОНЕЦ КАК ФИОРуководителя,
		|	ОтветственныеЛицаОрганизацийСрезПоследних.ОтветственноеЛицо,
		|	Работники.Сотрудник.Код КАК ТабельныйНомер,
		|	Работники.ПодразделениеОрганизации КАК ПодразделениеРаботника,
		|	Работники.Должность
		|ИЗ
		|	Документ.ИНАГРО_ОплатаПоСреднемуЗаработку КАК КомандировкиОрганизаций
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтветственныеЛицаОрганизаций.СрезПоследних(&ДатаДокумента, ОтветственноеЛицо = &Руководитель) КАК ОтветственныеЛицаОрганизацийСрезПоследних
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизическихЛиц.СрезПоследних(&ДатаДокумента, ) КАК ФИОФизЛицСрезПоследних
		|			ПО ОтветственныеЛицаОрганизацийСрезПоследних.ФизическоеЛицо = ФИОФизЛицСрезПоследних.ФизическоеЛицо
		|		ПО КомандировкиОрганизаций.Организация = ОтветственныеЛицаОрганизацийСрезПоследних.СтруктурнаяЕдиница
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизическихЛиц.СрезПоследних(&ДатаДокумента, ) КАК ФИОФизЛиц
		|		ПО КомандировкиОрганизаций.Сотрудник.ФизическоеЛицо = ФИОФизЛиц.ФизическоеЛицо
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДокументыФизическихЛиц.СрезПоследних(&ДатаДокумента, ) КАК ПаспортныеДанныеФизЛицСрезПоследних
		|		ПО КомандировкиОрганизаций.Сотрудник.ФизическоеЛицо = ПаспортныеДанныеФизЛицСрезПоследних.Физлицо
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИНАГРО_РаботникиОрганизаций.СрезПоследних(&ДатаДокумента, ) КАК Работники
		|		ПО КомандировкиОрганизаций.Сотрудник = Работники.Сотрудник
		|ГДЕ
		|	КомандировкиОрганизаций.Ссылка = &ДокументСсылка";

	
	Возврат Запрос.Выполнить();
	
КонецФункции // СформироватьЗапросДляПечати()

Функция ПолучитьДополнительныеРеквизитыДляРеестра() Экспорт
	
	Результат = Новый Структура;	
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецЕсли
