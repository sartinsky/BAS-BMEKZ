#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды 

	КадровыйУчетФормы.ФормаКадровогоДокументаПриСозданииНаСервере(ЭтаФорма);
	
	Если Параметры.Ключ.Пустая() Тогда
		
		// создается новый документ
		ЗначенияДляЗаполнения = Новый Структура("Месяц, Организация, Ответственный", 
		"Объект.ПериодРегистрации",
		"Объект.Организация",
		"Объект.Ответственный");
		
		ЗарплатаКадры.ЗаполнитьПервоначальныеЗначенияВФорме(ЭтаФорма, ЗначенияДляЗаполнения);
		
		УстановитьФункциональныеОпцииФормы();
		
		ЗарплатаКадрыКлиентСервер.ЗаполнитьМесяцПоДате(ЭтаФорма, "Объект.ПериодРегистрации", "МесяцСтрока");
		
	КонецЕсли;
		
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	СтандартнаяОбработка = Ложь;
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.Сотрудники") Тогда
		ДобавляемыеСотрудники = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ВыбранноеЗначение);
	Иначе
		ДобавляемыеСотрудники = ВыбранноеЗначение;
	КонецЕсли;

	ДобавитьСотрудников(ДобавляемыеСотрудники);

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ГрупповоеЗаполнение" И ТипЗнч(Параметр) = Тип("Структура") 
		И Параметр.Свойство("ИдентификаторВызывающейФормы")
		И Параметр.ИдентификаторВызывающейФормы = УникальныйИдентификатор Тогда		
		ВыполнитьГрупповоеЗаполнение(Параметр);
	Иначе
		ОбщегоНазначенияБПКлиент.ОбработкаОповещенияФормыДокумента(ЭтаФорма, Объект.Ссылка, ИмяСобытия, Параметр, Источник);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	УстановитьФункциональныеОпцииФормы();
	
	ЗарплатаКадрыКлиентСервер.ЗаполнитьМесяцПоДате(ЭтаФорма, "Объект.ПериодРегистрации", "МесяцСтрока");
	
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	ПодготовитьФормуНаСервере(); 
	

КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
		
	УстановитьСостояниеДокумента();	
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(
		Элемент.ТекстРедактирования,
		ЭтотОбъект,
		"Объект.Комментарий");

КонецПроцедуры

&НаКлиенте
Процедура МесяцСтрокаРегулирование(Элемент, Направление, СтандартнаяОбработка)
		
	ИНАГРО_ЗарплатаКадрыРасширенныйКлиент.ВводМесяцаРегулирование(ЭтаФорма, "Объект.ПериодРегистрации", "МесяцСтрока", Направление, Модифицированность);
	
КонецПроцедуры

&НаКлиенте
Процедура МесяцСтрокаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Оповещение = Новый ОписаниеОповещения("МесяцНачисленияСтрокойНачалоВыбораЗавершение", ЭтотОбъект);
	ИНАГРО_ЗарплатаКадрыРасширенныйКлиент.ВводМесяцаНачалоВыбора(ЭтаФорма, ЭтаФорма, "Объект.ПериодРегистрации", "МесяцСтрока", , Оповещение);
КонецПроцедуры

&НаКлиенте
Процедура МесяцСтрокаАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	ИНАГРО_ЗарплатаКадрыРасширенныйКлиент.ВводМесяцаАвтоПодборТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура МесяцСтрокаОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	ИНАГРО_ЗарплатаКадрыРасширенныйКлиент.ВводМесяцаОкончаниеВводаТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура МесяцНачисленияСтрокойНачалоВыбораЗавершение(ЗначениеВыбрано, ДополнительныеПараметры) Экспорт
	
	ПриИзмененииМесяцаНачисления();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииМесяцаНачисления()
	ИНАГРО_ЗарплатаКадрыРасширенныйКлиент.ВводМесяцаПриИзменении(ЭтаФорма, "Объект.ПериодРегистрации", "МесяцСтрока", Модифицированность);
	ОбработатьИзменениеМесяцНачисленияНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьИзменениеМесяцНачисленияНаСервере()

	УстановитьФункциональныеОпцииФормы();
		
	Если ЕстьЗаполненныеТабличныеЧасти() Тогда
		ОчиститьТабличныеЧасти();
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ОбработатьИзменениеОрганизацииНаСервере()
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыРаботникиОрганизаций

&НаКлиенте
Процедура РаботникиОрганизацииПриАктивизацииСтроки(Элемент)
	
	ОтобразитьОтборСтрок(ОтборУстановлен);
	ТЧПриАктивизацииСтроки("РаботникиОрганизации", Элемент);
	
	Если ОтборУстановлен Тогда
		ПоказатьИтогиПоДокументу();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура РаботникиОрганизацииПередУдалением(Элемент, Отказ)
	
	Сотрудник = Элементы.РаботникиОрганизации.ТекущиеДанные.Сотрудник;
	УдалитьПереформироватьПараметрыРасчетаПоРаботнику(Сотрудник);
	
КонецПроцедуры

&НаКлиенте
Процедура РаботникиОрганизацииПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	РаботникТекущейСтроки = Элементы.РаботникиОрганизации.ТекущиеДанные.Сотрудник;
КонецПроцедуры

&НаКлиенте
Процедура РаботникиОрганизацииСотрудникПриИзменении(Элемент)
	ТекущаяСтрока = Элементы.РаботникиОрганизации.ТекущиеДанные;
	
	Если ЗначениеЗаполнено(ТекущаяСтрока.Сотрудник) Тогда
		РаботникТекущейСтроки = ТекущаяСтрока.Сотрудник;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыНачисления

&НаКлиенте
Процедура НачисленияПриАктивизацииСтроки(Элемент)
	
	ТЧПриАктивизацииСтроки("Начисления", Элемент);
	ОбновитьРезультат("Начисления", "Результат");
	
КонецПроцедуры

&НаКлиенте
Процедура НачисленияПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		ТабличнаяЧастьПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование);
	КонецЕсли;                            

КонецПроцедуры

&НаКлиенте
Процедура НачисленияСотрудникПриИзменении(Элемент)
	
	ТЧПриАктивизацииСтроки("Начисления", Элемент);
	ОбработатьИзменениеСотрудникаТЧ("Начисления");
	
КонецПроцедуры

&НаКлиенте
Процедура НачисленияРезультатПриИзменении(Элемент)
	
	ПриИзмененииРезультатаСтроки("Начисления", "Результат");
	
КонецПроцедуры

&НаКлиенте
Процедура НачисленияДатаНачалаПриИзменении(Элемент)
	ПроверитьПериод ("Начисления", "ДатаНачала")
КонецПроцедуры

&НаКлиенте
Процедура НачисленияДатаОкончанияПриИзменении(Элемент)
	ПроверитьПериод ("Начисления", "ДатаОкончания");
	ТекущиеДанные = Элементы.Начисления.ТекущиеДанные;
	Если ТекущиеДанные.ДатаОкончания < ТекущиеДанные.ДатаНачала Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Дата окончания не может быть меньше даты начала'; uk = 'Дата закінчення не може бути меншою за дату початку'"));
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура НачисленияБазовыйПериодНачалоПриИзменении(Элемент)
	ПроверитьПериод ("Начисления", "БазовыйПериодНачало")
КонецПроцедуры

&НаКлиенте
Процедура НачисленияБазовыйПериодКонецПриИзменении(Элемент)
	ПроверитьПериод ("Начисления", "БазовыйПериодКонец");
	ТекущиеДанные = Элементы.Начисления.ТекущиеДанные;
	Если ТекущиеДанные.БазовыйПериодКонец < ТекущиеДанные.БазовыйПериодНачало Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Дата окончания не может быть меньше даты начала'; uk = 'Дата закінчення не може бути меншою за дату початку'"));
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыУдержания

&НаКлиенте
Процедура УдержанияПриАктивизацииСтроки(Элемент)
	
	ТЧПриАктивизацииСтроки("Удержания", Элемент);
	ОбновитьРезультат("Удержания", "Результат");
	
КонецПроцедуры

&НаКлиенте
Процедура УдержанияПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		ТабличнаяЧастьПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	КонецЕсли;                            

КонецПроцедуры

&НаКлиенте
Процедура УдержанияСотрудникПриИзменении(Элемент)
	
	ТЧПриАктивизацииСтроки("Удержания", Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура УдержанияРезультатПриИзменении(Элемент)
	
	ПриИзмененииРезультатаСтроки("Удержания", "Результат");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыВзносы

&НаКлиенте
Процедура ВзносыПриАктивизацииСтроки(Элемент)
	
	ТЧПриАктивизацииСтроки("Взносы", Элемент);
	ОбновитьРезультат("Взносы", "Результат");
	
КонецПроцедуры

&НаКлиенте
Процедура ВзносыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		ТабличнаяЧастьПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	КонецЕсли;                            

КонецПроцедуры

&НаКлиенте
Процедура ВзносыСотрудникПриИзменении(Элемент)
	
	ТЧПриАктивизацииСтроки("Взносы", Элемент);
	ОбработатьИзменениеСотрудникаТЧ("Взносы");
	
КонецПроцедуры

&НаКлиенте
Процедура ВзносыРезультатПриИзменении(Элемент)
	
	ПриИзмененииРезультатаСтроки("Взносы", "Результат");
	
КонецПроцедуры


#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыВзносыФОТ

&НаКлиенте
Процедура ВзносыФОТПриАктивизацииСтроки(Элемент)
	
	ТЧПриАктивизацииСтроки("ВзносыФОТ", Элемент);
	ОбновитьРезультат("ВзносыФОТ", "Результат");
	
КонецПроцедуры

&НаКлиенте
Процедура ВзносыФОТПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		ТабличнаяЧастьПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	КонецЕсли;                            

КонецПроцедуры

&НаКлиенте
Процедура ВзносыФОТСотрудникПриИзменении(Элемент)
	
	ТЧПриАктивизацииСтроки("ВзносыФОТ", Элемент);
	ОбработатьИзменениеСотрудникаТЧ("ВзносыФОТ");
	
КонецПроцедуры

&НаКлиенте
Процедура ВзносыФОТРезультатПриИзменении(Элемент)
	
	ПриИзмененииРезультатаСтроки("ВзносыФОТ", "Результат");
	
КонецПроцедуры


#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Заполнить(Команда)
	Если Объект.РаботникиОрганизации.Количество() + Объект.Взносы.Количество() 
		+ Объект.ВзносыФОТ.Количество() + Объект.Начисления.Количество() 
		+ Объект.Удержания.Количество() > 0 Тогда
		 
		ТекстВопроса = НСтр("ru='Перед заполнением табличные части будут очищены. Продолжить?';uk='Перед заповненням табличні частини будуть очищені. Продовжити?'");
		Оповещение = Новый ОписаниеОповещения("ОчиститьТаблицыЗавершение", ЭтотОбъект, Параметры);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
		Возврат;
	КонецЕсли;
		
	ОчиститьТабличныеЧасти();
	
	ИНАГРО_ЗарплатаКадрыРасширенныйКлиент.ОткрытьФормуОтбораСпискаРаботников(ЭтаФорма, Истина)

КонецПроцедуры

&НаКлиенте
Процедура Подбор(Команда)
	
	ПодобратьСотрудников(Истина);

КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтбор(Команда)
		
	ОтборУстановлен = Не ОтборУстановлен;
	Если ОтборУстановлен Тогда
		Элементы.УстановитьОтбор.Картинка = БиблиотекаКартинок.СостояниеПользователя02;
	Иначе
		Элементы.УстановитьОтбор.Картинка = БиблиотекаКартинок.ЗначокФизическиеЛица32;
	КонецЕсли;
	
	ОтобразитьОтборСтрок(ОтборУстановлен);
	ПоказатьИтогиПоДокументу();
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ПодготовитьФормуНаСервере()
	
	УстановитьСостояниеДокумента();
	
	УправлениеФормой(ЭтаФорма);
			
КонецПроцедуры

&НаСервере
Процедура УстановитьФункциональныеОпцииФормы()
	
	ПараметрыФО = Новый Структура("Организация, Период", Объект.Организация, Объект.Дата);
	УстановитьПараметрыФункциональныхОпцийФормы(ПараметрыФО);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСостояниеДокумента()
	
	СостояниеДокумента = ОбщегоНазначенияБП.СостояниеДокумента(Объект);
	
КонецПроцедуры

&НаСервере
Процедура УправлениеФормой(Форма)
	
	Форма.Элементы.ГруппаНадписи.Заголовок = ?(ОтборУстановлен, РаботникТекущейСтроки, НСтр("ru='Итоги по документу';uk='Підсумки по документу'"));	
	
	Если ОтборУстановлен И Объект.РаботникиОрганизации.Количество() > 0 Тогда
		
		ТекущиеДанные = Объект.РаботникиОрганизации[0];
		
		ТекстИтоги = 
		" Начислено = "	+ТекущиеДанные.Начисления+"
		| Взносы = "	+ТекущиеДанные.Взносы+"
		| Удержания = "	+ТекущиеДанные.Удержания+"
		| Взносы на ФОТ = "	+ТекущиеДанные.ВзносыФОТ;
		
	Иначе
		ТекущиеДанные = Объект.РаботникиОрганизации;
		
		ТекстИтоги = 
		" Начислено = "	+ТекущиеДанные.Итог("Начисления")+"
		| Взносы = "	+ТекущиеДанные.Итог("Взносы")+"
		| Удержания = "	+ТекущиеДанные.Итог("Удержания")+"
		| Взносы на ФОТ = "	+ТекущиеДанные.Итог("ВзносыФОТ");
		
	КонецЕсли;
	НадписьИтоги = ТекстИтоги;
	
КонецПроцедуры 

&НаКлиенте
Процедура ОтобразитьОтборСтрок(ОтборУстановлен)
	
	Если ОтборУстановлен И Элементы.РаботникиОрганизации.ТекущиеДанные <> Неопределено Тогда    
	    Элементы.Начисления.ОтборСтрок = Новый ФиксированнаяСтруктура("Сотрудник", Элементы.РаботникиОрганизации.ТекущиеДанные.Сотрудник);
	    Элементы.Взносы.ОтборСтрок = Новый ФиксированнаяСтруктура("Сотрудник", Элементы.РаботникиОрганизации.ТекущиеДанные.Сотрудник);
	    Элементы.ВзносыФОТ.ОтборСтрок = Новый ФиксированнаяСтруктура("Сотрудник", Элементы.РаботникиОрганизации.ТекущиеДанные.Сотрудник);
	    Элементы.Удержания.ОтборСтрок = Новый ФиксированнаяСтруктура("Сотрудник", Элементы.РаботникиОрганизации.ТекущиеДанные.Сотрудник);
	Иначе
	    Элементы.Начисления.ОтборСтрок = Неопределено;
	    Элементы.Взносы.ОтборСтрок = Неопределено;
	    Элементы.ВзносыФОТ.ОтборСтрок = Неопределено;
	    Элементы.Удержания.ОтборСтрок = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьИтогиПоДокументу()
	
	Элементы.ГруппаНадписи.Заголовок = ?(ОтборУстановлен, РаботникТекущейСтроки, НСтр("ru='Итоги по документу';uk='Підсумки по документу'"));	
	
	Если ОтборУстановлен И Объект.РаботникиОрганизации.Количество() > 0 Тогда
		
		ТекущиеДанные = Элементы.РаботникиОрганизации.ТекущиеДанные;
		Если ТекущиеДанные = Неопределено И Объект.РаботникиОрганизации.Количество() > 0 Тогда
			ТекущиеДанные = Объект.РаботникиОрганизации[0];
		КонецЕсли;
		
		ТекстИтоги = 
		" Начислено = "	+ТекущиеДанные.Начисления+"
		| Взносы = "	+ТекущиеДанные.Взносы+"
		| Удержания = "	+ТекущиеДанные.Удержания+"
		| Взносы на ФОТ = "	+ТекущиеДанные.ВзносыФОТ;
		
	Иначе
		ТекущиеДанные = Объект.РаботникиОрганизации;
		
		ТекстИтоги = 
		" Начислено = "	+ТекущиеДанные.Итог("Начисления")+"
		| Взносы = "	+ТекущиеДанные.Итог("Взносы")+"
		| Удержания = "	+ТекущиеДанные.Итог("Удержания")+"
		| Взносы на ФОТ = "	+ТекущиеДанные.Итог("ВзносыФОТ");
		
	КонецЕсли;
	НадписьИтоги = ТекстИтоги;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьРезультат(ИмяТЧ, ИмяРеквизита)
	
	ТекущиеДанные = Элементы[ИмяТЧ].ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	РезультатСтроки = ТекущиеДанные[ИмяРеквизита];
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьГрупповоеЗаполнение(Параметр)
	
	ВыполнитьГрупповоеЗаполнениеНаСервере(Параметр);	//	
	
	ПодготовитьФормуНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьГрупповоеЗаполнениеНаСервере(Параметр)
	
	ТаблицаСотрудников = ПолучитьИзВременногоХранилища(Параметр.АдресТЗ);

	Объект.РаботникиОрганизации.Загрузить(ТаблицаСотрудников);
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьИзменениеОрганизацииНаСервере()

	УстановитьФункциональныеОпцииФормы();

	ОчиститьТабличныеЧасти();
	
КонецПроцедуры

&НаКлиенте
Процедура ПодобратьСотрудников(МножественныйВыбор)
	
	КадровыйУчетКлиент.ВыбратьСотрудниковРаботающихВПериоде(
		ЭтаФорма, Объект.Организация, Неопределено,
		Объект.Дата, КонецМесяца(Объект.Дата), МножественныйВыбор,
		АдресСпискаПодобранныхСотрудников());
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСотрудников(Знач СписокСотрудников)
	
	СотрудникиКДобавлению = Новый Массив;
	Для каждого ДобавляемыйСотрудник Из СписокСотрудников Цикл
		
		Если Объект.РаботникиОрганизации.НайтиСтроки(Новый Структура("Сотрудник", ДобавляемыйСотрудник)).Количество() = 0 Тогда
			ТекущаяСтрока = Объект.РаботникиОрганизации.Добавить();
			ТекущаяСтрока.Сотрудник = ДобавляемыйСотрудник;
	
		КонецЕсли; 
		
	КонецЦикла;
		
КонецПроцедуры

&НаСервере
Функция АдресСпискаПодобранныхСотрудников()
	
	Возврат ПоместитьВоВременноеХранилище(Объект.РаботникиОрганизации.Выгрузить(,"Сотрудник").ВыгрузитьКолонку("Сотрудник"), УникальныйИдентификатор);
	
КонецФункции

&НаСервере
Процедура ПодучитьДанныеПоСотрудникуНаСервере(ДанныеСотрудника)
	
	ИНАГРО_ПроведениеРасчетов.ПолучитьДанныеСотрудника(Объект.Дата, ДанныеСотрудника);
	
КонецПроцедуры

&НаКлиенте
// Процедура, проверяющая правильность периода
//
Процедура ПроверитьПериод (ИмяТЧ, ИмяРеквизита)
	
	ТекущиеДанные = Элементы[ИмяТЧ].ТекущиеДанные;
	
	Если Месяц (ТекущиеДанные[ИмяРеквизита]) <> Месяц(Объект.ПериодРегистрации) ИЛИ Год (ТекущиеДанные[ИмяРеквизита]) <> Год(Объект.ПериодРегистрации) Тогда
			
		ТекущиеДанные.ДатаНачала = НачалоМесяца(Объект.ПериодРегистрации);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Выбираемая дата должна быть в пределах месяца начисления'; uk = 'Обрана дата повинна бути в межах місяця нарахування'"));
		
	КонецЕсли; 	
КонецПроцедуры

#Область ПроцедурыИФункцииОбработкиТабличныхЧастей

&НаКлиенте
Процедура ТЧПриАктивизацииСтроки(ИмяТЧ, Элемент)
	ТекСтрокаРаботник = Элементы.РаботникиОрганизации.ТекущиеДанные;
	Если Не ТекСтрокаРаботник = Неопределено Тогда
		ТекущиеДанныеРаботник = ТекСтрокаРаботник.Сотрудник;
	Иначе
		ТекущиеДанныеРаботник = Неопределено
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущиеДанныеРаботник) Тогда
		ТекущиеДанные = Элементы[ИмяТЧ].ТекущиеДанные;
		
		Если ТекущиеДанные = Неопределено Тогда
			РаботникТекущейСтроки = Неопределено;
			Возврат;
		КонецЕсли;
		
		// запомним текущего сотрудника
		РаботникТекущейСтроки = ТекущиеДанные.Сотрудник;
			
		СинхронизируемыеТабличныеЧасти = Новый Соответствие;
		СинхронизируемыеТабличныеЧасти["РаботникиОрганизации"]	= Ложь;
		СинхронизируемыеТабличныеЧасти["Начисления"]	    	= Ложь;
		СинхронизируемыеТабличныеЧасти["Взносы"]	    		= Ложь;
		СинхронизируемыеТабличныеЧасти["ВзносыФОТ"]	    		= Ложь;
		СинхронизируемыеТабличныеЧасти["Удержания"]	    		= Ложь;
		
		ИНАГРО_ЗарплатаКадрыРасширенныйКлиент.СинхронизироватьСтроки(Элементы, Объект, ИмяТЧ, СинхронизируемыеТабличныеЧасти, "Сотрудник");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьТаблицыЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт 
   	
    Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
        Возврат;
	Иначе 
		ОчиститьТабличныеЧасти();
	КонецЕсли;
			
	ИНАГРО_ЗарплатаКадрыРасширенныйКлиент.ОткрытьФормуОтбораСпискаРаботников(ЭтаФорма, Истина)
		     
КонецПроцедуры

&НаСервере
Процедура ОчиститьТабличныеЧасти()
	
	Объект.РаботникиОрганизации.Очистить();
	Объект.Взносы.Очистить();
	Объект.ВзносыФОТ.Очистить();
	Объект.Начисления.Очистить();
	Объект.Удержания.Очистить();
	
КонецПроцедуры

&НаКлиенте
Процедура ТабличнаяЧастьПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока И Не Элементы.РаботникиОрганизации.ТекущиеДанные = Неопределено Тогда
		Элемент.ТекущиеДанные.Сотрудник = Элементы.РаботникиОрганизации.ТекущиеДанные.Сотрудник;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЕстьЗаполненныеТабличныеЧасти()
	
	ДанныеВТЧЕсть = Ложь;
	
	СписокТабличныхЧастей = СписокТабличныхЧастейДокумента();
	
	Для каждого ИмяТабличнойЧасти Из СписокТабличныхЧастей Цикл
		Если Объект[ИмяТабличнойЧасти].Количество() > 0 Тогда
			ДанныеВТЧЕсть = Истина;
			Прервать;
		КонецЕсли; 
	КонецЦикла;
	
	Возврат ДанныеВТЧЕсть;
	
КонецФункции

&НаСервере
Функция СписокТабличныхЧастейДокумента()
	
	СписокТабличныхЧастей = Новый Массив;
	
	СписокТабличныхЧастей.Добавить("РаботникиОрганизации");
	СписокТабличныхЧастей.Добавить("Начисления");
	СписокТабличныхЧастей.Добавить("Удержания");
	СписокТабличныхЧастей.Добавить("Взносы");
	СписокТабличныхЧастей.Добавить("ВзносыФОТ");
	
	Возврат СписокТабличныхЧастей;
	
КонецФункции

&НаКлиенте
Процедура ОбработатьИзменениеСотрудникаТЧ(ИмяТЧ)

	ТекущаяСтрока = Элементы[ИмяТЧ].ТекущиеДанные;
	
	Если ЗначениеЗаполнено(ТекущаяСтрока.Сотрудник) Тогда
		
		ДанныеСотрудника = Новый Структура ("Сотрудник, ФизическоеЛицо, 
		|ВидРасчета, ПодразделениеОрганизации, Должность, СпособОтраженияВБухучете, 
		|ПринятНаНовоеРабочееМесто, ГрафикРаботы, ЗанимаемыхСтавок");
		
		ЗаполнитьЗначенияСвойств(ДанныеСотрудника, ТекущаяСтрока);
		ПодучитьДанныеПоСотрудникуНаСервере(ДанныеСотрудника);
		ЗаполнитьЗначенияСвойств(ТекущаяСтрока, ДанныеСотрудника);
				
	КонецЕсли;
	
	РаботникТекущейСтроки = ТекущаяСтрока.Сотрудник;
	
КонецПроцедуры

&НаКлиенте
// Добавляет или переопределяет строку в табличной части "Начисления" при изменении сотрудника 
// или формы оплаты труда у сотрудника.
//
Процедура УдалитьПереформироватьПараметрыРасчетаПоРаботнику(Сотрудник)
	
	УдалитьПараметрыРасчетаПоРаботнику(Сотрудник, "Начисления");
	УдалитьПараметрыРасчетаПоРаботнику(Сотрудник, "Взносы");
	УдалитьПараметрыРасчетаПоРаботнику(Сотрудник, "ВзносыФОТ");
	УдалитьПараметрыРасчетаПоРаботнику(Сотрудник, "Удержания");
		
КонецПроцедуры // ПереформироватьПараметрыРасчетаПоРаботнику()

&НаСервере
// Удаляет начисления по работнику, все или автоматически заполняемые
// Параметры:
//   Сотрудник - СправочникСсылка.Физлица
//   УдалятьВсе - булево, если Истина - удаляются все начисления по физлицу,
//				например, при его удалении из списка.
//				Если Ложь - удаляются только те, которые вводятся "автоматически",
//				например, при редактировании данных по строке табличной части 
//				со списком работников
Процедура УдалитьПараметрыРасчетаПоРаботнику(Сотрудник, ИмяТабЧасти)
	
	ИНАГРО_ЗарплатаКадрыРасширенный.УдалитьПараметрыРасчетаПоРаботнику(Сотрудник, ИмяТабЧасти, Объект)
	
КонецПроцедуры  // УдалитьПараметрыРасчетаПоРаботнику

&НаКлиенте
Процедура ПриИзмененииРезультатаСтроки(ИмяТЧ, ИмяРеквизита)
	
	ТекущаяСтрока = Элементы[ИмяТЧ].ТекущиеДанные;
	Если ТекущаяСтрока[ИмяРеквизита] <> РезультатСтроки Тогда
		РассчитатьИтогиПоРеквизиту(ИмяТЧ, РезультатСтроки, ТекущаяСтрока[ИмяРеквизита]);
		РезультатСтроки = ТекущаяСтрока[ИмяРеквизита];
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьИтогиПоРеквизиту(ИмяТЧ, СтароеЗначение, НовоеЗначение)
	
	ТекущаяСтрокаРаботники = Элементы.РаботникиОрганизации.ТекущиеДанные;
	Если Не ТекущаяСтрокаРаботники = Неопределено Тогда
		ТекущаяСтрокаРаботники[ИмяТЧ] =  ТекущаяСтрокаРаботники[ИмяТЧ] - СтароеЗначение + НовоеЗначение;
		ПоказатьИтогиПоДокументу();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти 

#Область СлужебныеПроцедурыИФункцииБСП
 
// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти 












