#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКОтменеПроведения(ЭтотОбъект);
	Движения.Записать();

КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ИНАГРО_ПроведениеРасчетов.СформироватьКраткийСоставСотрудников(ЭтотОбъект, "РаботникиОрганизации");
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, Режим)

	ПроведениеСервер.ПодготовитьНаборыЗаписейКПроведению(ЭтотОбъект);
	Заголовок = ОбщегоНазначенияБПВызовСервера.ПредставлениеДокументаПриПроведении(Ссылка);
	
	ВыборкаПоШапкеДокумента = СформироватьЗапросПоШапке().Выбрать();
                        
	Если ВыборкаПоШапкеДокумента.Следующий() Тогда
		
 		Сотрудники = РаботникиОрганизации.ВыгрузитьКолонку("Сотрудник");
		////////////////////////////////////////////////////////////////////////
		// Начисления
		// получим реквизиты табличной части.
		ВыборкаПоНачислениям = СформироватьЗапросПоНачисления(Сотрудники).Выбрать();
		
		Движения.ИНАГРО_Начисления.Записывать = Истина;
		Пока ВыборкаПоНачислениям.Следующий() Цикл 

			// проверим очередную строку табличной части
			ПроверитьЗаполнениеСтрокиНачисления(ВыборкаПоНачислениям, Отказ, Заголовок);
										
			Если НЕ Отказ Тогда
				// Заполним записи в наборах записей регистров
				ДобавитьСтрокуНачислений(ВыборкаПоНачислениям);
			КонецЕсли;
		КонецЦикла;

		// Взносы в Фонды
		// получим реквизиты табличной части.
		ВыборкаПоВзносы = СформироватьЗапросПоВзносы("Взносы",Сотрудники).Выбрать();
		Движения.ИНАГРО_ВзносыВФонды.Записывать = Истина;
		Пока ВыборкаПоВзносы.Следующий() Цикл 
			// Заполним записи в наборах записей регистров
			ДобавитьСтрокуВзносы(ВыборкаПоВзносы);
		КонецЦикла;

		// Взносы ФОТ
		ВыборкаПоВзносыФОТ = СформироватьЗапросПоВзносы("ВзносыФОТ",Сотрудники).Выбрать();
		Пока ВыборкаПоВзносыФОТ.Следующий() Цикл 
			// Заполним записи в наборах записей регистров
			ДобавитьСтрокуВзносы(ВыборкаПоВзносыФОТ);
		КонецЦикла;
		
		// Удержания
		ВыборкаПоУдержаниям = СформироватьЗапросПоУдержания(Сотрудники).Выбрать();
		Движения.ИНАГРО_Удержания.Записывать = Истина;
		Пока ВыборкаПоУдержаниям.Следующий() Цикл 
			// Заполним записи в наборах записей регистров
			ДобавитьСтрокуУдержаний(ВыборкаПоУдержаниям);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Проведение

// Формирует запрос по шапке документа
//
// Параметры: 
//  нет
//
// Возвращаемое значение:
//  Результат запроса
//
Функция СформироватьЗапросПоШапке() Экспорт

	Запрос = Новый Запрос;

	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка" , Ссылка);
	Запрос.УстановитьПараметр("парамПустаяОрганизация", Справочники.Организации.ПустаяСсылка());

	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ  
	|	Дата                                               КАК Дата, 
	|	ПериодРегистрации                                  КАК ПериодРегистрации, 
	|	ВЫБОР КОГДА Организация.ГоловнаяОрганизация = &парамПустаяОрганизация 
	|			ТОГДА Организация 
	|			ИНАЧЕ Организация.ГоловнаяОрганизация 
	|		  КОНЕЦ                                         КАК ГоловнаяОрганизация, 
	|	Организация                                         КАК Организация, 
	|	Организация                                         КАК ОбособленноеПодразделение, 
	| 	Ссылка                                              КАК Ссылка
	|ИЗ 
	|	Документ.ИНАГРО_АрхивЗарплаты
	|ГДЕ 
	|	Ссылка = &ДокументСсылка
	|";

	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоШапке()

Функция СформироватьЗапросПоНачисления(Сотрудники)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументСсылка", Ссылка);

	Если НЕ (Сотрудники = Неопределено) Тогда
		Запрос.УстановитьПараметр("парамСотрудники", Сотрудники);
		УсловиеНаФизлицоТекст = " И СтрокиНачисления.Сотрудник В (&парамСотрудники) ";
	Иначе
		УсловиеНаФизлицоТекст="";
	КонецЕсли;

	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	// Свойства
	|	СтрокиНачисления.Ссылка.ПериодРегистрации	КАК ПериодРегистрации,
	|	СтрокиНачисления.ДатаНачала					КАК ПериодДействияНачало,
	|	СтрокиНачисления.ДатаОкончания				КАК ПериодДействияКонец,
	|	СтрокиНачисления.БазовыйПериодНачало,
	|	СтрокиНачисления.БазовыйПериодКонец,
	|	СтрокиНачисления.ВидРасчета,
	|	СтрокиНачисления.Сторно,
	|
	// Измерения
	|	СтрокиНачисления.Ссылка.Организация КАК Организация,
    |	ВЫБОР
    |		КОГДА СтрокиНачисления.Сотрудник.ОсновноеНазначение = ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка)
    |			ТОГДА СтрокиНачисления.Сотрудник
    |		ИНАЧЕ СтрокиНачисления.Сотрудник.ОсновноеНазначение
    |	КОНЕЦ КАК Сотрудник,
	|	СтрокиНачисления.Сотрудник КАК Назначение,
	|
	// Ресурсы
	|	СтрокиНачисления.Результат,
	|	СтрокиНачисления.ОплаченоДнейЧасов,
	|	СтрокиНачисления.ОтработаноДней,
	|	СтрокиНачисления.ОтработаноЧасов,
	|	СтрокиНачисления.НормаДней,
	|	СтрокиНачисления.НормаЧасов,
	|	СтрокиНачисления.КалендарныеДни,
	|
	// Реквизиты
	|	СтрокиНачисления.Авторасчет,
	|	СтрокиНачисления.НомерСтроки,
	|	СтрокиНачисления.ПодразделениеОрганизации,
	|	СтрокиНачисления.СпособОтраженияВБухучете,
	|	СтрокиНачисления.Показатель1,
	|	СтрокиНачисления.Показатель2,
	|	СтрокиНачисления.Показатель3,
	|	СтрокиНачисления.НормаДнейЗаМесяц,
	|	СтрокиНачисления.НормаЧасовЗаМесяц,
	|	СтрокиНачисления.ГрафикРаботы,
	|   ВЫБОР	КОГДА СтрокиНачисления.ГрафикРаботы ССЫЛКА Справочник.ИНАГРО_ГрафикиРаботы
	|			ТОГДА NULL
	|			ИНАЧЕ СтрокиНачисления.Сотрудник
	|	КОНЕЦ						КАК ГрафикРаботыСотрудник,
	|	СтрокиНачисления.ВидУчетаВремениДляСредней,
	|
	// Специализированные параметры для регистра Взаиморасчеты с работников организации и др.
	|	Прием.ДатаПриема							КАК ДатаПриема,
	|	СтрокиНачисления.ВидРасчета.СпособРасчета	КАК СпособРасчета,
	|	СтрокиНачисления.ВидРасчета.СчетУчета		КАК СчетУчета,
	|	ЕСТЬNULL(СтрокиНачисления.ГрафикРаботы.СуммированныйУчетРабочегоВремени, ЛОЖЬ) КАК СуммированныйУчетРабочегоВремени,
	|	СтрокиНачисления.ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени	КАК ВидИспользованияРабочегоВремени,
	|
	// Проверки
	|	СтрокиНачисления.ДатаНачала,
	|	СтрокиНачисления.ДатаОкончания,
	|	ВЫБОР
	|		КОГДА СтрокиНачисления.Сотрудник.ГоловнаяОрганизация = СтрокиНачисления.Ссылка.Организация
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ОшибкаНеСоответствиеСотрудникаИОрганизации,
    |   ВЫБОР
	|   	КОГДА СтрокиНачисления.ВидРасчета.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаНачислений.ИндексацияЗарплаты)
	|       ТОГДА СтрокиНачисления.Должность
	|       ИНАЧЕ NULL
	|	КОНЕЦ КАК Должность
	|ИЗ Документ."+Ссылка.Метаданные().Имя+".Начисления КАК СтрокиНачисления
	|
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ (  
	|   ВЫБРАТЬ
	|       РаботникиОрганизации.Сотрудник КАК Сотрудник,
	|       МИНИМУМ(ПриемРаботников.Период) КАК ДатаПриема
	|	ИЗ Документ.ИНАГРО_АрхивЗарплаты.РаботникиОрганизации КАК РаботникиОрганизации
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИНАГРО_РаботникиОрганизаций КАК ПриемРаботников
	|   ПО  ПриемРаботников.Сотрудник = РаботникиОрганизации.Сотрудник
	|   СГРУППИРОВАТЬ ПО
	|       РаботникиОрганизации.Сотрудник
	|) КАК Прием
	|ПО Прием.Сотрудник = СтрокиНачисления.Сотрудник
	|
	|ГДЕ СтрокиНачисления.Ссылка = &ДокументСсылка" + УсловиеНаФизлицоТекст + "
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|";

	Возврат Запрос.Выполнить();    
	
КонецФункции // СформироватьЗапросПоНачисления()

Функция СформироватьЗапросПоУдержания(Сотрудники)

	Запрос = Новый Запрос;
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка",	Ссылка);
	
	УсловиеНаСотрудникаТекст="";
	Если Сотрудники <> Неопределено Тогда
		Запрос.УстановитьПараметр("парамСотрудник", Сотрудники);
		УсловиеНаСотрудникаТекст = " И СтрокиУдержания.Сотрудник В (&парамСотрудник) ";	
	КонецЕсли;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СтрокиУдержания.Сотрудник,
	|	СтрокиУдержания.ВидРасчета,
	|	СтрокиУдержания.ДатаНачала,
	|	СтрокиУдержания.ДатаОкончания,
	|	СтрокиУдержания.ДокументОснование,
	|	СтрокиУдержания.ДатаНачала КАК БазовыйПериодНачало,
	|	КОНЕЦПЕРИОДА(СтрокиУдержания.ДатаОкончания, ДЕНЬ) КАК БазовыйПериодКонец,
	|	СтрокиУдержания.НомерСтроки КАК НомерСтроки,
	|	СтрокиУдержания.Показатель1,
	|	СтрокиУдержания.Показатель2,
	|	СтрокиУдержания.Показатель3,
	|	СтрокиУдержания.Результат,
	|	СтрокиУдержания.Сторно,
	|	СтрокиУдержания.СпособОтраженияВБухУчете,
	|	СтрокиУдержания.ВидРасчета.СпособРасчета КАК СпособРасчета,
	|	СтрокиУдержания.Авторасчет КАК Авторасчет
	|ИЗ
	|	Документ.ИНАГРО_АрхивЗарплаты.Удержания КАК СтрокиУдержания
	|ГДЕ
	|	СтрокиУдержания.Ссылка = &ДокументСсылка " + УсловиеНаСотрудникаТекст + "
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоУдержания()

Функция СформироватьЗапросПоВзносы( ИмяТаблицы = "Взносы", Сотрудники = Неопределено )

	Запрос = Новый Запрос;
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка",				Ссылка);
	УсловиеНаФизлицоТекст="";
	Если Сотрудники <> Неопределено Тогда
		Запрос.УстановитьПараметр("парамСотрудники", Сотрудники);
		УсловиеНаФизлицоТекст = Символы.ПС + " И СтрокиВзносы.Сотрудник В (&парамСотрудники) ";	
	КонецЕсли;
	
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СтрокиВзносы.Ссылка.Организация		КАК Организация,
	|	СтрокиВзносы.Сотрудник,
	|	СтрокиВзносы.ВидРасчета,
	|	СтрокиВзносы.Ссылка.ПериодРегистрации КАК ПериодРегистрации,
	|	СтрокиВзносы.Ссылка.ПериодРегистрации КАК Период,
	|	СтрокиВзносы.Ссылка.ПериодРегистрации КАК ПериодВзаиморасчетов,
	|	СтрокиВзносы.НомерСтроки			КАК НомерСтроки,
	|	СтрокиВзносы.НомерСтроки			КАК НомерСтрокиТЧ,
	|	СтрокиВзносы.БазовыйПериодНачало	КАК БазовыйПериодНачало,
	|	СтрокиВзносы.БазовыйПериодКонец		КАК БазовыйПериодКонец,
	|	СтрокиВзносы.ДатаНачала				КАК ДатаНачала,
	|	СтрокиВзносы.ДатаОкончания			КАК ДатаОкончания,
	|	СтрокиВзносы.Предел,
	|	СтрокиВзносы.Налог,
	|	СтрокиВзносы.СтатьяНалоговойДекларации,
	|	СтрокиВзносы.Ставка,
	|	СтрокиВзносы.НомерПорога,
	|	СтрокиВзносы.База,
	|	СтрокиВзносы.БазаОтпускные,
	|	СтрокиВзносы.БазаВзноса,
	|	СтрокиВзносы.БазаВычет,
	|	СтрокиВзносы.Результат,
	|	СтрокиВзносы.Сторно,
	|	СтрокиВзносы.ВидРасчета.СпособРасчета КАК СпособРасчета,
	|	СтрокиВзносы.КодКатегорииЗЛ КАК КодКатегорииЗЛ,
	|	СтрокиВзносы.ТипНачисления  КАК ТипНачисления,
	|	СтрокиВзносы.Авторасчет КАК Авторасчет
	|ИЗ
	|	Документ.ИНАГРО_АрхивЗарплаты."+ИмяТаблицы+" КАК СтрокиВзносы
	|ГДЕ
	|	СтрокиВзносы.Ссылка = &ДокументСсылка " + УсловиеНаФизлицоТекст + "
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоВзносы()

Процедура ПроверитьЗаполнениеСтрокиНачисления( ВыборкаПоСтрокамДокумента, Отказ, Заголовок = "")
	
	СтрокаНачалаСообщенияОбОшибке = НСтр("ru='В строке номер ""';uk='У рядку номер ""'")+ СокрЛП(ВыборкаПоСтрокамДокумента.НомерСтроки) +
	НСтр("ru='"" табл. части ""Начисления"": ';uk='"" табл. частини ""Нарахування"": '");
	
	// Организация сотрудника должна совпадать с организацией документа
	Если ВыборкаПоСтрокамДокумента.ОшибкаНеСоответствиеСотрудникаИОрганизации Тогда
		ТекстСообщения = СтрокаНачалаСообщенияОбОшибке + НСтр("ru='указанный сотрудник оформлен в другую организацию!';uk='зазначений співробітник оформлений в іншу організацію!'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,ЭтотОбъект,,,Отказ);
	КонецЕсли;
		
	Попытка
		// Проверка дат
		Если ВыборкаПоСтрокамДокумента.ДатаНачала < ВыборкаПоСтрокамДокумента.ДатаПриема Тогда
			ТекстСообщения = СтрокаНачалаСообщенияОбОшибке + НСтр("ru=' дата начала начисления меньше даты приема!';uk='дата початку нарахування менша за дату прийому!'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,ЭтотОбъект,,,Отказ);
		ИначеЕсли ВыборкаПоСтрокамДокумента.ДатаНачала > ВыборкаПоСтрокамДокумента.ДатаОкончания Тогда	
			ТекстСообщения = СтрокаНачалаСообщенияОбОшибке + НСтр("ru=' дата начала начисления больше даты окончания!';uk='дата початку нарахування менша за дату закінчення!'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,ЭтотОбъект,,,Отказ);
		ИначеЕсли ВыборкаПоСтрокамДокумента.БазовыйПериодНачало  < ВыборкаПоСтрокамДокумента.ДатаПриема Тогда	
			ТекстСообщения = СтрокаНачалаСообщенияОбОшибке + НСтр("ru=' дата начала базового периода начисления меньше даты приема!';uk='дата початку базового періоду нарахування менша за дату прийому!'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,ЭтотОбъект,,,Отказ);
		ИначеЕсли ВыборкаПоСтрокамДокумента.БазовыйПериодНачало > ВыборкаПоСтрокамДокумента.БазовыйПериодКонец Тогда	
			ТекстСообщения = СтрокаНачалаСообщенияОбОшибке + НСтр("ru=' дата начала базового периода начисления больше даты окончания!';uk='дата початку базового періоду нарахування менша за дату закінчення!'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,ЭтотОбъект,,,Отказ);
		КонецЕсли;
	Исключение
	КонецПопытки;
	
КонецПроцедуры // ПроверитьЗаполнениеСтрокиНачисления()

Процедура ДобавитьСтрокуНачислений( ВыборкаПоСтрокамДокумента, ОбнулитьРезультат = Ложь )
	Движение = Движения.ИНАГРО_Начисления.Добавить();
	ЗаполнитьЗначенияСвойств(Движение, ВыборкаПоСтрокамДокумента);
 	Движение.ВидУчетаВремени = ИНАГРО_ПроведениеРасчетов.ПолучитьВидУчетаВремени(ВыборкаПоСтрокамДокумента, ВыборкаПоСтрокамДокумента.СуммированныйУчетРабочегоВремени);
	Если ОбнулитьРезультат И ВыборкаПоСтрокамДокумента.Авторасчет Тогда
		Движение.Результат = 0;
		Движение.ОплаченоДнейЧасов = 0;
	КонецЕсли;
	
КонецПроцедуры // ДобавитьСтрокуОсновныхНачислений()

Процедура ДобавитьСтрокуУдержаний(ВыборкаПоСтрокамДокумента)

	Движение = Движения.ИНАГРО_Удержания.Добавить();

	ЗаполнитьЗначенияСвойств(Движение,ВыборкаПоСтрокамДокумента);	// БазовыйПериодНачало, БазовыйПериодКонец, ВидРасчета, Сторно
																	// Сотрудник, Организация,
																	// Результат, Размер, ДокументОснование, Авторасчет, ПорядокРасчетаБазы.
	Движение.ПериодРегистрации			= ПериодРегистрации;
	Движение.Организация				= Организация;
 																	// ДатаНачалаСобытия,ПериодРасчетаСреднегоЗаработкаНачало,ПериодРасчетаСреднегоЗаработкаОкончание.
КонецПроцедуры // ДобавитьСтрокуУдержаний

Процедура ДобавитьСтрокуВзносы( ВыборкаПоСтрокамДокумента)
	
	Движение = Движения.ИНАГРО_ВзносыВФонды.Добавить();

	ЗаполнитьЗначенияСвойств(Движение,ВыборкаПоСтрокамДокумента);	// БазовыйПериодНачало, БазовыйПериодКонец, ВидРасчета, Сторно
																	// Сотрудник, Сотрудник, Результат
																	// Размер,ЧислоМесяцев,ПодразделениеОрганизации,
																	// Авторасчет,
 																	// ПериодРасчетаСреднегоЗаработкаНачало,ПериодРасчетаСреднегоЗаработкаОкончание.
																	
	Движение.ПериодРегистрации			= ПериодРегистрации;
	Движение.Организация				= Организация;
	
КонецПроцедуры // ДобавитьСтрокуДоговора

#КонецОбласти

#КонецЕсли








