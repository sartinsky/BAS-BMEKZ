#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	ПоступлениеТоваровУслугФормы.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);	
	
	// Активизировать первую непустую табличную часть
	СписокТабличныхЧастей = Новый СписокЗначений;
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеТоваровУслуг.ПокупкаКомиссия") Тогда
		СписокТабличныхЧастей.Добавить("Товары", "Товары");
		Если НЕ ЭтоКомиссия Тогда
			СписокТабличныхЧастей.Добавить("Услуги", "Услуги");
		КонецЕсли;
		СписокТабличныхЧастей.Добавить("ВозвратнаяТара", "ВозвратнаяТара");
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеТоваровУслуг.ВПереработку") Тогда
		СписокТабличныхЧастей.Добавить("Товары", "Товары");
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеТоваровУслуг.Оборудование") Тогда
		СписокТабличныхЧастей.Добавить("Оборудование", "Оборудование");
		СписокТабличныхЧастей.Добавить("Товары", "Товары");
		Если НЕ ЭтоКомиссия Тогда
			СписокТабличныхЧастей.Добавить("Услуги", "Услуги");
		КонецЕсли;
		СписокТабличныхЧастей.Добавить("ВозвратнаяТара", "ВозвратнаяТара");
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеТоваровУслуг.ОбъектыСтроительства") Тогда
		СписокТабличныхЧастей.Добавить("ОбъектыСтроительства", "ОбъектыСтроительства");
		Если НЕ ЭтоКомиссия Тогда
			СписокТабличныхЧастей.Добавить("Услуги", "Услуги");
		КонецЕсли;
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеТоваровУслуг.БланкиСтрогогоУчета") И ПолучитьФункциональнуюОпцию("ИспользоватьБланкиСтрогогоУчета") Тогда
		СписокТабличныхЧастей.Добавить("БланкиСтрогогоУчета", "БланкиСтрогогоУчета");
	КонецЕсли;

	УстановитьПараметрыВыбораВидОперации();

	АктивизироватьТабличнуюЧасть = ОбщегоНазначенияБПВызовСервера.ПолучитьПервуюНепустуюВидимуюТабличнуюЧасть(
		ЭтаФорма, СписокТабличныхЧастей);
	ОбщегоНазначенияБПВызовСервера.АктивизироватьЭлементФормы(ЭтаФорма, АктивизироватьТабличнуюЧасть);
	
	УстановитьЭлементыФормыПоВидуОперации();
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом

	ПоступлениеТоваровУслугФормы.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)

	Если ИсточникВыбора.ИмяФормы = "Обработка.ПодборНоменклатуры.Форма.Форма" Тогда
		ОбработкаВыбораПодборВставкаИзБуфераНаСервере(ВыбранноеЗначение, ИсточникВыбора.ИмяТаблицы);
	// ИНАГРО++
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Документ.ИНАГРО_ПриходныйОрдерНаТовары.Форма.ФормаВыбора" Тогда
		Если ЗначениеЗаполнено(ИсточникВыбора.ИмяТаблицы) Тогда
			ОбработкаЗаполненияТабличнойЧастиНаСервере(ВыбранноеЗначение, ИсточникВыбора.ИмяТаблицы);
		Иначе
			Объект.Склад = ВыбранноеЗначение;
		КонецЕсли;
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Справочник.Склады.Форма.ФормаВыбора" Тогда
		Объект.Склад = ВыбранноеЗначение;
	// ИНАГРО-- 
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)

	Если ИмяСобытия = "ОбработанаТабличнаяЧастьТовары" И ТипЗнч(Параметр) = Тип("Структура") 
		И Параметр.Свойство("ИдентификаторВызывающейФормы")
		И Параметр.ИдентификаторВызывающейФормы = УникальныйИдентификатор Тогда
		ОбработкаОповещенияОбработкиТабличнойЧастиТоварыНаСервере(Параметр);
	ИначеЕсли ИмяСобытия = "ОбновитьДокументИБПослеЗаполнения" И Параметр.Найти(Объект.Ссылка) <> Неопределено Тогда
		Прочитать();
	ИначеЕсли ИмяСобытия = "ДанныеСкопированыВБуферОбмена" Тогда
		
		УстановитьДоступностьКомандыВставки(ЭтотОбъект, Истина);

	Иначе
		ОбщегоНазначенияБПКлиент.ОбработкаОповещенияФормыДокумента(ЭтаФорма, Объект.Ссылка, ИмяСобытия, Параметр, Источник);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	ПоступлениеТоваровУслугФормыКлиент.ПередЗаписью(
		ЭтаФорма, Отказ, ПараметрыЗаписи);
		
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	ПоступлениеТоваровУслугФормы.ПослеЗаписиНаСервере(
		ЭтаФорма, ТекущийОбъект, ПараметрыЗаписи);

	УстановитьСостояниеДокумента();

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)

	ДатаПриИзмененииНаКлиенте();
	
	// Покажем оповещение о появлении механизма рабочей даты.
	Если НастройкиПредупреждений.РабочаяДатаИзДокумента 
		И НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ОбщегоНазначенияБПКлиент.ПоказатьПредупреждениеОбИзменениях("РабочаяДатаИзДокумента", , НастройкиПредупреждений);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)

	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		ОрганизацияПриИзмененииНаСервере();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СкладПриИзменении(Элемент)
	
	ТоварыСвернуты	= Ложь;
	
	УстановитьТипСкладаОрдера(ЭтаФорма); // ИНАГРО
	
	Если ЗначениеЗаполнено(Объект.Склад) Тогда
		СкладПриИзмененииНаСервере();
	КонецЕсли;
	
	Если (Объект.ИНАГРО_СкладВТЧ И РассчитыватьСуммаВРознице) ИЛИ (НТТ И РассчитыватьСуммаВРознице) Тогда // ИНАГРО
		ТекстВопроса = НСтр("ru='Свернуть табличную часть по номенклатуре?';uk='Згорнути табличну частину по номенклатурі?'");
		ЗаголовокВопроса = НСтр("ru='Свертка по номенклатуре';uk='Згортка по номенклатурі'");
		Оповещение = Новый ОписаниеОповещения("ВопросСвернутьТабличнуюЧастьЗавершение", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , , ЗаголовокВопроса);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СкладНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка) // ИНАГРО
	
	СтандартнаяОбработка = Ложь;
	
	ВызовПроцедурыПриИзменении = Новый ОписаниеОповещения("ОбработкаКомандыЗавершения", ЭтотОбъект);
	
	Если Объект.ИНАГРО_ВидПоступления = ПредопределенноеЗначение("Перечисление.ИНАГРО_ВидыПоступленияТоваров.НаСклад") Тогда
		ОткрытьФорму("Справочник.Склады.Форма.ФормаВыбора", , ЭтаФорма, УникальныйИдентификатор, , ,ВызовПроцедурыПриИзменении , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);		
		
	Иначе
		ОткрытьФормуВыбораПриходныйОрдерНаТоварыДляЗаполнения();		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаКомандыЗавершения(РезультатВопроса,ДополнительныеПараметры) Экспорт

	ПодключитьОбработчикОжидания("ВызовСкладПриИзменении",0.1,Истина);

КонецПроцедуры

&НаКлиенте
Процедура ВызовСкладПриИзменении() Экспорт
	
	СкладПриИзменении(Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)

	Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
		КонтрагентПриИзмененииНаСервере();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДоговорКонтрагентаПриИзменении(Элемент)

	Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		ДоговорКонтрагентаПриИзмененииНаСервере();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СделкаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

	ПараметрыОбъекта = Новый Структура;
	ПараметрыОбъекта.Вставить("Дата"                 , Объект.Дата);
	ПараметрыОбъекта.Вставить("ДоговорКонтрагента"   , Объект.ДоговорКонтрагента);
	ПараметрыОбъекта.Вставить("Контрагент"           , Объект.Контрагент);
	ПараметрыОбъекта.Вставить("СчетУчета"            , Объект.СчетУчетаРасчетовПоАвансам);
	ПараметрыОбъекта.Вставить("Организация"          , Объект.Организация);
	ПараметрыОбъекта.Вставить("ОстаткиОбороты"       , "Дт");
	ПараметрыОбъекта.Вставить("ТипыДокументов"       , "Метаданные.Документы.ПоступлениеТоваровУслуг.Реквизиты.Сделка.Тип");

	ПараметрыФормы = Новый Структура("ПараметрыОбъекта", ПараметрыОбъекта);
	ОткрытьФорму("Документ.ДокументРасчетовСКонтрагентом.ФормаВыбора", ПараметрыФормы, Элемент);

КонецПроцедуры

&НаКлиенте
Процедура ЦеныИВалютаНажатие(Элемент, СтандартнаяОбработка)

	ПоступлениеТоваровУслугФормыКлиент.ЦеныИВалютаНажатие(ЭтаФорма, Элемент, СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(
		Элемент.ТекстРедактирования,
		ЭтотОбъект,
		"Объект.Комментарий"
	);

КонецПроцедуры

// ИНАГРО++
&НаКлиенте
Процедура ИНАГРО_ВидПоступленияПриИзменении(Элемент)
	
	УстановитьТипСкладаОрдера(ЭтаФорма);
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры 

&НаКлиенте
Процедура ИНАГРО_СкладВТЧПриИзменении(Элемент)
	
	Если Объект.ИНАГРО_СкладВТЧ Тогда
		Объект.Склад = ПредопределенноеЗначение("Справочник.Склады.ПустаяСсылка");
	КонецЕсли; 

	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ИНАГРО_ОрдерВТЧПриИзменении(Элемент)
	
	Если Объект.ИНАГРО_ОрдерВТЧ Тогда
		Объект.Склад = ПредопределенноеЗначение("Документ.ИНАГРО_ПриходныйОрдерНаТовары.ПустаяСсылка");
	КонецЕсли; 

	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ИНАГРО_УказатьОСПриИзменении(Элемент)
	
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ИНАГРО_ВТабличнойЧастиПриИзменении(Элемент)
	
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры 
// ИНАГРО--

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыОборудование

&НаКлиенте
Процедура ОборудованиеПриИзменении(Элемент)

	ОбновитьИтоги(ЭтаФорма);
	РассчитатьПропорциональныйНДС(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ОборудованиеПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если НоваяСтрока И ОтменаРедактирования Тогда
		ОбновитьИтоги(ЭтаФорма);
		РассчитатьПропорциональныйНДС(ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОборудованиеНоменклатураПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Оборудование.ТекущиеДанные;
	
	ДанныеСтрокиТаблицы = Новый Структура(
		"Номенклатура, ЕдиницаИзмерения, Коэффициент, Количество,
		|Цена, Сумма, СтавкаНДС, СуммаНДС,
		|СчетУчетаБУ, НалоговоеНазначение, Всего,
		|ПоставкаОсновныхФондов");
	
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, ТекущиеДанные);
	
	ДанныеОбъекта = Новый Структура(
		"Дата, Организация, Склад, ТипЦен, СуммаВключаетНДС,
		|ВалютаДокумента, КурсВзаиморасчетов, КратностьВзаиморасчетов");
	
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
	Если ЗначениеЗаполнено(ВалютаВзаиморасчетов) И НЕ (ВалютаВзаиморасчетов = ВалютаРегламентированногоУчета) Тогда
		ДанныеОбъекта.Вставить("СтавкаНДС", ПредопределенноеЗначение("Перечисление.СтавкиНДС.БезНДС"));
	КонецЕсли;
	
	ЗаполнитьПараметрыОбъектаДляЗаполненияДобавленныхКолонок(ЭтаФорма, ДанныеОбъекта);
	
	ОборудованиеНоменклатураПриИзмененииНаСервере(ДанныеСтрокиТаблицы, ДанныеОбъекта);
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтрокиТаблицы);
	
КонецПроцедуры

&НаКлиенте
Процедура ОборудованиеЕдиницаИзмеренияПриИзменении(Элемент)
	ТекущиеДанные = Элементы.Оборудование.ТекущиеДанные;
	
	ДанныеСтрокиТаблицы = Новый Структура(
		"Номенклатура, ЕдиницаИзмерения, Коэффициент, Количество,
		|Цена, Сумма, СтавкаНДС, СуммаНДС,
		|Всего,
		|ПоставкаОсновныхФондов");
	
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, ТекущиеДанные);
	
	ДанныеОбъекта = Новый Структура(
		"Дата, Организация, СуммаВключаетНДС, Ссылка");
	
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
	ЗаполнитьПараметрыОбъектаДляЗаполненияДобавленныхКолонок(ЭтаФорма, ДанныеОбъекта);
	
	ОборудованиеЕдиницаИзмеренияПриИзмененииНаСервере(ДанныеСтрокиТаблицы, ДанныеОбъекта);
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтрокиТаблицы);

КонецПроцедуры

&НаКлиенте
Процедура ОборудованиеКоличествоПриИзменении(Элемент)

	ОбработкаТабличныхЧастейКлиентСервер.ПриИзмененииКоличествоЦена(ЭтаФорма, "Оборудование");

КонецПроцедуры

&НаКлиенте
Процедура ОборудованиеЦенаПриИзменении(Элемент)

	ОбработкаТабличныхЧастейКлиентСервер.ПриИзмененииКоличествоЦена(ЭтаФорма, "Оборудование");

КонецПроцедуры

&НаКлиенте
Процедура ОборудованиеСуммаПриИзменении(Элемент)

	ОбработкаТабличныхЧастейКлиентСервер.ПриИзмененииСумма(ЭтаФорма, "Оборудование");

КонецПроцедуры

&НаКлиенте
Процедура ОборудованиеСтавкаНДСПриИзменении(Элемент)

	ОбработкаТабличныхЧастейКлиентСервер.ПриИзмененииСтавкаНДС(ЭтаФорма, "Оборудование");

КонецПроцедуры

&НаКлиенте
Процедура ОборудованиеСуммаНДСПриИзменении(Элемент)

	ОбработкаТабличныхЧастейКлиентСервер.ПриИзмененииСуммаНДС(ЭтаФорма, "Оборудование");

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыОбъектыСтроительства

&НаКлиенте
Процедура ОбъектыСтроительстваПриИзменении(Элемент)

	ОбновитьИтоги(ЭтаФорма);
	РассчитатьПропорциональныйНДС(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ОбъектыСтроительстваПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если НоваяСтрока И ОтменаРедактирования Тогда
		ОбновитьИтоги(ЭтаФорма);
		РассчитатьПропорциональныйНДС(ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбъектыСтроительстваОбъектСтроительстваПриИзменении(Элемент)

	ТекущиеДанные = Элементы.ОбъектыСтроительства.ТекущиеДанные;
	
	ДанныеСтрокиТаблицы = Новый Структура("ОбъектСтроительства, Сумма, СуммаНДС, Всего, СчетУчетаБУ, НалоговоеНазначение, ПоставкаОсновныхФондов");
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, ТекущиеДанные);
	
	ДанныеОбъекта = Новый Структура("Дата, Организация, СуммаВключаетНДС");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
	ОбъектыСтроительстваОбъектСтроительстваПриИзмененииНаСервере(ДанныеСтрокиТаблицы, ДанныеОбъекта);
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтрокиТаблицы);

КонецПроцедуры

&НаКлиенте
Процедура ОбъектыСтроительстваСуммаПриИзменении(Элемент)

	ОбработкаТабличныхЧастейКлиентСервер.ПриИзмененииСумма(ЭтаФорма, "ОбъектыСтроительства");

КонецПроцедуры

&НаКлиенте
Процедура ОбъектыСтроительстваСтавкаНДСПриИзменении(Элемент)

	ОбработкаТабличныхЧастейКлиентСервер.ПриИзмененииСтавкаНДС(ЭтаФорма, "ОбъектыСтроительства");

КонецПроцедуры

&НаКлиенте
Процедура ОбъектыСтроительстваСуммаНДСПриИзменении(Элемент)

	ОбработкаТабличныхЧастейКлиентСервер.ПриИзмененииСуммаНДС(ЭтаФорма, "ОбъектыСтроительства");

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыБланки

&НаКлиенте
Процедура БланкиСтрогогоУчетаПриИзменении(Элемент)
	
	ОбновитьИтоги(ЭтаФорма);
	РассчитатьПропорциональныйНДС(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура БланкиСтрогогоУчетаПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если НоваяСтрока И ОтменаРедактирования Тогда
		ОбновитьИтоги(ЭтаФорма);
		РассчитатьПропорциональныйНДС(ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура БланкиСтрогогоУчетаНоменклатураПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.БланкиСтрогогоУчета.ТекущиеДанные;

	ДанныеСтрокиТаблицы = Новый Структура(
		"Номенклатура, ЕдиницаИзмерения, Коэффициент, Количество,
		|Цена, Сумма, СтавкаНДС, СуммаНДС,
		|СчетУчетаБУ, НалоговоеНазначение, Всего, 
		|СчетУчетаЗабалансовыйБУ, ЦенаНоминальная, СуммаНоминальная, УчитываетсяПоНоминальнойСтоимости");
	
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, ТекущиеДанные);
	
	ДанныеОбъекта = Новый Структура(
		"Дата, Организация, Склад, ТипЦен, СуммаВключаетНДС,
		|ВалютаДокумента, КурсВзаиморасчетов, КратностьВзаиморасчетов");
	
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
	ЗаполнитьПараметрыОбъектаДляЗаполненияДобавленныхКолонок(ЭтаФорма, ДанныеОбъекта);
		
	БланкиСтрогогоУчетаНоменклатураПриИзмененииНаСервере(
		ДанныеСтрокиТаблицы, ДанныеОбъекта);
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтрокиТаблицы);
	
КонецПроцедуры

&НаКлиенте
Процедура БланкиСтрогогоУчетаЕдиницаИзмеренияПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.БланкиСтрогогоУчета.ТекущиеДанные;
	
	ДанныеСтрокиТаблицы = Новый Структура(
		"Номенклатура, ЕдиницаИзмерения, Коэффициент, Количество,
		|Цена, Сумма, СтавкаНДС, СуммаНДС,
		|Всего, 
		|СчетУчетаЗабалансовыйБУ, ЦенаНоминальная, СуммаНоминальная, УчитываетсяПоНоминальнойСтоимости");
	
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, ТекущиеДанные);
	
	ДанныеОбъекта = Новый Структура(
		"Дата, Организация, СуммаВключаетНДС, Ссылка,
		|ВалютаДокумента, КурсВзаиморасчетов, КратностьВзаиморасчетов");
	
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
	ЗаполнитьПараметрыОбъектаДляЗаполненияДобавленныхКолонок(ЭтаФорма, ДанныеОбъекта);
	
	БланкиСтрогогоУчетаЕдиницаИзмеренияПриИзмененииНаСервере(ДанныеСтрокиТаблицы, ДанныеОбъекта);
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтрокиТаблицы);

КонецПроцедуры

&НаКлиенте
Процедура БланкиСтрогогоУчетаКоличествоПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.БланкиСтрогогоУчета.ТекущиеДанные;
	
	ОбработкаТабличныхЧастейКлиентСервер.ПриИзмененииКоличествоЦена(ЭтаФорма, "БланкиСтрогогоУчета");
	
	ПересчитатьНоминальныеРеквизиты(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура БланкиСтрогогоУчетаЦенаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.БланкиСтрогогоУчета.ТекущиеДанные;
	
	ОбработкаТабличныхЧастейКлиентСервер.ПриИзмененииКоличествоЦена(ЭтаФорма, "БланкиСтрогогоУчета");
	
	ТекущиеДанные = Элементы.БланкиСтрогогоУчета.ТекущиеДанные;
    ПересчитатьНоминальныеРеквизиты(ТекущиеДанные);

КонецПроцедуры

&НаКлиенте
Процедура БланкиСтрогогоУчетаСуммаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.БланкиСтрогогоУчета.ТекущиеДанные;
	
	ОбработкаТабличныхЧастейКлиентСервер.ПриИзмененииСумма(ЭтаФорма, "БланкиСтрогогоУчета");
	
	ПересчитатьНоминальныеРеквизиты(ТекущиеДанные);

КонецПроцедуры

&НаКлиенте
Процедура БланкиСтрогогоУчетаСтавкаНДСПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.БланкиСтрогогоУчета.ТекущиеДанные;
	
	ОбработкаТабличныхЧастейКлиентСервер.ПриИзмененииСтавкаНДС(ЭтаФорма, "БланкиСтрогогоУчета");
	
	ПересчитатьНоминальныеРеквизиты(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура БланкиСтрогогоУчетаЦенаНоминальнаяПриИзменении(Элемент)

	СтрокаТаблицы = Элементы.БланкиСтрогогоУчета.ТекущиеДанные;
	СтрокаТаблицы.СуммаНоминальная = СтрокаТаблицы.Количество * СтрокаТаблицы.ЦенаНоминальная;

КонецПроцедуры

&НаКлиенте
Процедура БланкиСтрогогоУчетаСуммаНоминальнаяПриИзменении(Элемент)
	
	СтрокаТаблицы = Элементы.БланкиСтрогогоУчета.ТекущиеДанные;
	
	Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.Количество) Тогда
		СтрокаТаблицы.ЦенаНоминальная = 0;
	Иначе
		СтрокаТаблицы.ЦенаНоминальная = СтрокаТаблицы.СуммаНоминальная / СтрокаТаблицы.Количество;
	КонецЕсли;     	
	
КонецПроцедуры

&НаКлиенте
Процедура БланкиСтрогогоУчетаСуммаНДСПриИзменении(Элемент)

	ОбработкаТабличныхЧастейКлиентСервер.ПриИзмененииСуммаНДС(ЭтаФорма, "БланкиСтрогогоУчета");

КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьНоминальныеРеквизиты(ТекущиеДанные)

	
	ДанныеСтрокиТаблицы = Новый Структура(
		"Номенклатура, ЕдиницаИзмерения, Коэффициент, Количество,
		|Цена, Сумма, СтавкаНДС, СуммаНДС, НалоговоеНазначение,
		|ЦенаНоминальная, СуммаНоминальная, УчитываетсяПоНоминальнойСтоимости");
	
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, ТекущиеДанные);
	
	ДанныеОбъекта = Новый Структура(
		"Дата, Организация, СуммаВключаетНДС");
	
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
	ЗаполнитьПараметрыОбъектаДляЗаполненияДобавленныхКолонок(ЭтаФорма, ДанныеОбъекта);
	
	ПоступлениеТоваровУслугФормыКлиентСервер.БланкиСтрогоУчетаРассчитатьНоминальныеРеквизиты(ДанныеСтрокиТаблицы, ДанныеОбъекта);
		
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтрокиТаблицы);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТовары

&НаКлиенте
Процедура ТоварыПриИзменении(Элемент)

	ОбновитьИтоги(ЭтаФорма);
	РассчитатьПропорциональныйНДС(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если НоваяСтрока И ОтменаРедактирования Тогда
		ОбновитьИтоги(ЭтаФорма);
		РассчитатьПропорциональныйНДС(ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;

	// Получим общие параметры обработки для реквизитов документа
	ПараметрыОбработки = ПоступлениеТоваровУслугФормыКлиент.ПодготовитьПараметрыОбработкиТоварыНоменклатураПриИзменении(
		ЭтаФорма, ТекущиеДанные);
	
	// Дополнительные поля, добавленные в табличное поле текущей формы.
	ПараметрыОбработки.ДанныеСтрокиТаблицы.Вставить("Всего", ТекущиеДанные.Всего);
	ПараметрыОбработки.ДанныеСтрокиТаблицы.Вставить("СчетУчетаЗабалансовый", ТекущиеДанные.СчетУчетаЗабалансовый);
	
	ЗаполнитьПараметрыОбъектаДляЗаполненияДобавленныхКолонок(ЭтаФорма, ПараметрыОбработки.ДанныеОбъекта);
	
	Если  ЗначениеЗаполнено(ПараметрыОбработки.ДанныеОбъекта.Звит1С_DOC_ID) 
		И ЗначениеЗаполнено(ПараметрыОбработки.ДанныеСтрокиТаблицы.НаименованиеПоставщика) Тогда
		ОбработатьДанныеСтрокиЭДО(ПараметрыОбработки, "Товары");
	Иначе	
		ТоварыНоменклатураПриИзмененииНаСервере(ПараметрыОбработки.ДанныеСтрокиТаблицы, ПараметрыОбработки.ДанныеОбъекта);
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ПараметрыОбработки.ДанныеСтрокиТаблицы);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОбработатьДанныеСтрокиЭДО(ПараметрыОбработки, ИмяТЧ)

	СтрокаТЧ		 = ПараметрыОбработки.ДанныеСтрокиТаблицы;
	ДанныеОбъекта	 = ПараметрыОбработки.ДанныеОбъекта;
	
	Если ИмяТЧ = "Товары" Тогда
		// счет получен из Звит. При выборе "нашей" номенклатуры не нужно ничего перезаполнять и пересчитывать, кроме заполнения единицы измерения/коэффициента, если их не заполнили при загрузке
		Если НЕ ЗначениеЗаполнено(СтрокаТЧ.ЕдиницаИзмерения) Тогда
			СтрокаТЧ.ЕдиницаИзмерения = СтрокаТЧ.Номенклатура.БазоваяЕдиницаИзмерения;	
			СтрокаТЧ.Коэффициент 	  = 1;
		ИначеЕсли НЕ ЗначениеЗаполнено(СтрокаТЧ.Коэффициент) Тогда
			 // поищем коэффициент в ТЧ с единицами измерения в товаре
			 СтрокаЕдиниц = СтрокаТЧ.Номенклатура.ЕдиницыИзмерения.Найти(СтрокаТЧ.ЕдиницаИзмерения);
			 Если НЕ СтрокаЕдиниц = Неопределено Тогда
			 	СтрокаТЧ.Коэффициент = СтрокаЕдиниц.Коэффициент;
			 КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Если  ЗначениеЗаполнено(ДанныеОбъекта.Контрагент)
		И ЗначениеЗаполнено(СтрокаТЧ.Номенклатура) Тогда
		Попытка
			НоменклатураПоставщика = РегистрыСведений.НоменклатураКонтрагентов.СоздатьМенеджерЗаписи();
			НоменклатураПоставщика.Контрагент = ДанныеОбъекта.Контрагент;
			НоменклатураПоставщика.Номенклатура = СтрокаТЧ.Номенклатура;
			НоменклатураПоставщика.Прочитать();
			
			Если НЕ НоменклатураПоставщика.Выбран() Тогда
				
				НоменклатураПоставщика.Контрагент   = ДанныеОбъекта.Контрагент;
				НоменклатураПоставщика.Номенклатура = СтрокаТЧ.Номенклатура;
				
				НаименованиеПоставщика = ?(ИмяТЧ = "Товары", СтрокаТЧ.НаименованиеПоставщика, СтрокаТЧ.Содержание);
				
				НоменклатураПоставщика.НаименованиеНоменклатурыКонтрагента = НаименованиеПоставщика;	
				
				ПозКода = Найти(НаименованиеПоставщика, " (код: ");
				Если ПозКода > 0 Тогда
					НоменклатураПоставщика.КодНоменклатурыКонтрагента = Сред(НаименованиеПоставщика, ПозКода + 7); 	
					НоменклатураПоставщика.КодНоменклатурыКонтрагента = Лев(НоменклатураПоставщика.КодНоменклатурыКонтрагента, Найти(НоменклатураПоставщика.КодНоменклатурыКонтрагента, ")") - 1);
				Иначе	
					ПозАртикула = Найти(НаименованиеПоставщика, " (артикул: ");
					Если ПозАртикула > 0 Тогда
						НоменклатураПоставщика.АртикулНоменклатурыКонтрагента = Сред(НаименованиеПоставщика, ПозАртикула + 11); 	
						НоменклатураПоставщика.АртикулНоменклатурыКонтрагента = Лев(НоменклатураПоставщика.АртикулНоменклатурыКонтрагента, Найти(НоменклатураПоставщика.АртикулНоменклатурыКонтрагента, ")") - 1);
					КонецЕсли;
				КонецЕсли;
				
				НоменклатураПоставщика.Записать();
			КонецЕсли;
			
		Исключение
			ТекстОписанияОшибки = ОписаниеОшибки();
		КонецПопытки;
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОбработатьДанныеСтрокиЭДО_ЕдиницаИзмерения(ПараметрыОбработки)

	СтрокаТЧ		 = ПараметрыОбработки.ДанныеСтрокиТаблицы;
	ДанныеОбъекта	 = ПараметрыОбработки.ДанныеОбъекта;
	
	 // поищем коэффициент в ТЧ с единицами измерения в товаре
	 СтрокаЕдиниц = СтрокаТЧ.Номенклатура.ЕдиницыИзмерения.Найти(СтрокаТЧ.ЕдиницаИзмерения);
	 Если НЕ СтрокаЕдиниц = Неопределено Тогда
	 	СтрокаТЧ.Коэффициент = СтрокаЕдиниц.Коэффициент;
	 КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура НадписьДокументПолученИзЗвит1СНажатие(Элемент)
	
	Если ПустаяСтрока(Объект.Звит1С_DOC_ID) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не РегламентированнаяОтчетностьКлиент.ПодключитьМенеджерЗвит1С() Тогда
		Возврат;
	КонецЕсли;
	
	Если Не глМенеджерЗвит1С.ЗапуститьЗвит1С(Ложь, Объект.Организация) Тогда
		Возврат;
	КонецЕсли;
	
	Результат = глКомпонентаЗвит1С.ShowReport(Объект.Звит1С_DOC_ID);
	
	Если Результат = 0 Тогда
		глКомпонентаЗвит1С.Bring1CToFront();		
		Возврат;
	КонецЕсли;

	глКомпонентаЗвит1С.BringZvitToFront();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЕдиницаИзмеренияПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;

	// Получим общие параметры обработки для реквизитов документа
	ПараметрыОбработки = ПоступлениеТоваровУслугФормыКлиент.ПодготовитьПараметрыОбработкиТоварыНоменклатураПриИзменении(
		ЭтаФорма, ТекущиеДанные);
	
	// Дополнительные поля, добавленные в табличное поле текущей формы.
	ПараметрыОбработки.ДанныеСтрокиТаблицы.Вставить("Всего", ТекущиеДанные.Всего);
	ПараметрыОбработки.ДанныеСтрокиТаблицы.Вставить("СчетУчетаЗабалансовый", ТекущиеДанные.СчетУчетаЗабалансовый);
	
	ЗаполнитьПараметрыОбъектаДляЗаполненияДобавленныхКолонок(ЭтаФорма, ПараметрыОбработки.ДанныеОбъекта);
		
	Если  ЗначениеЗаполнено(ПараметрыОбработки.ДанныеОбъекта.Звит1С_DOC_ID) 
		И ЗначениеЗаполнено(ПараметрыОбработки.ДанныеСтрокиТаблицы.НаименованиеПоставщика) Тогда
		ОбработатьДанныеСтрокиЭДО_ЕдиницаИзмерения(ПараметрыОбработки);
	Иначе	
		ТоварыЕдиницаИзмеренияПриИзмененииНаСервере(ПараметрыОбработки.ДанныеСтрокиТаблицы, ПараметрыОбработки.ДанныеОбъекта);
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ПараметрыОбработки.ДанныеСтрокиТаблицы);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКоличествоПриИзменении(Элемент)

	ОбработкаТабличныхЧастейКлиентСервер.ПриИзмененииКоличествоЦена(ЭтаФорма, "Товары");

КонецПроцедуры

&НаКлиенте
Процедура ТоварыЦенаПриИзменении(Элемент)

	ОбработкаТабличныхЧастейКлиентСервер.ПриИзмененииКоличествоЦена(ЭтаФорма, "Товары");

КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаПриИзменении(Элемент)

	ОбработкаТабличныхЧастейКлиентСервер.ПриИзмененииСумма(ЭтаФорма, "Товары");

КонецПроцедуры

&НаКлиенте
Процедура ТоварыСтавкаНДСПриИзменении(Элемент)

	ОбработкаТабличныхЧастейКлиентСервер.ПриИзмененииСтавкаНДС(ЭтаФорма, "Товары");

КонецПроцедуры

&НаКлиенте
Процедура ТоварыЦенаВРозницеПриИзменении(Элемент)

	СтрокаТаблицы = Элементы.Товары.ТекущиеДанные;
	СтрокаТаблицы.СуммаВРознице = СтрокаТаблицы.Количество * СтрокаТаблицы.ЦенаВРознице;

КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаНДСПриИзменении(Элемент)

	ОбработкаТабличныхЧастейКлиентСервер.ПриИзмененииСуммаНДС(ЭтаФорма, "Товары");

КонецПроцедуры

&НаКлиенте
Процедура ТоварыСчетУчетаБУПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	ТекущиеДанные.СчетУчетаЗабалансовый = ЗначениеЗаполнено(ТекущиеДанные.СчетУчетаБУ)
		И БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(ТекущиеДанные.СчетУчетаБУ).Забалансовый;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыУслуги

&НаКлиенте
Процедура УслугиПриИзменении(Элемент)

	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма);
	ОбновитьИтоги(ЭтаФорма);
	РассчитатьПропорциональныйНДС(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура УслугиПередНачаломИзменения(Элемент, Отказ)

	СтрокаТаблицы = Элементы.Услуги.ТекущиеДанные;

	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма);
	УстановитьЗаголовкиИДоступностьСубконто(ЭтаФорма, СтрокаТаблицы.СчетЗатрат, "", Истина, Истина);

КонецПроцедуры

&НаКлиенте
Процедура УслугиПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если НоваяСтрока И ОтменаРедактирования Тогда
		ОбновитьИтоги(ЭтаФорма);
		РассчитатьПропорциональныйНДС(ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиНоменклатураПриИзменении(Элемент)

	ТекущиеДанные = Элементы.Услуги.ТекущиеДанные;

	// Получим общие параметры обработки для реквизитов документа
	ПараметрыОбработки = ПоступлениеТоваровУслугФормыКлиент.ПодготовитьПараметрыОбработкиУслугиНоменклатураПриИзменении(
		ЭтаФорма, ТекущиеДанные);
	
	// Дополнительные поля, требующиеся для заполнения добавленных колонок табличного поля текущей формы.
	ПараметрыОбработки.ДанныеСтрокиТаблицы.Вставить("Всего", ТекущиеДанные.Всего);
	ПараметрыОбработки.ДанныеСтрокиТаблицы.Вставить("Субконто1Доступность", ТекущиеДанные.Субконто1Доступность);
	ПараметрыОбработки.ДанныеСтрокиТаблицы.Вставить("Субконто2Доступность", ТекущиеДанные.Субконто2Доступность);
	ПараметрыОбработки.ДанныеСтрокиТаблицы.Вставить("Субконто3Доступность", ТекущиеДанные.Субконто3Доступность);
	
	ЗаполнитьПараметрыОбъектаДляЗаполненияДобавленныхКолонок(ЭтаФорма, ПараметрыОбработки.ДанныеОбъекта);
		
	Если  ЗначениеЗаполнено(ПараметрыОбработки.ДанныеОбъекта.Звит1С_DOC_ID) 
		И ЗначениеЗаполнено(ПараметрыОбработки.ДанныеСтрокиТаблицы.Содержание) Тогда
		ОбработатьДанныеСтрокиЭДО(ПараметрыОбработки, "Услуги");
	Иначе
		УслугиНоменклатураПриИзмененииНаСервере(ПараметрыОбработки.ДанныеСтрокиТаблицы, ПараметрыОбработки.ДанныеОбъекта);
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ПараметрыОбработки.ДанныеСтрокиТаблицы);

КонецПроцедуры

&НаКлиенте
Процедура УслугиКоличествоПриИзменении(Элемент)

	ОбработкаТабличныхЧастейКлиентСервер.ПриИзмененииКоличествоЦена(ЭтаФорма, "Услуги", 1);

КонецПроцедуры

&НаКлиенте
Процедура УслугиЦенаПриИзменении(Элемент)

	ОбработкаТабличныхЧастейКлиентСервер.ПриИзмененииКоличествоЦена(ЭтаФорма, "Услуги", 1);

КонецПроцедуры

&НаКлиенте
Процедура УслугиСуммаПриИзменении(Элемент)

	ОбработкаТабличныхЧастейКлиентСервер.ПриИзмененииСумма(ЭтаФорма, "Услуги", 1);

КонецПроцедуры

&НаКлиенте
Процедура УслугиСтавкаНДСПриИзменении(Элемент)

	ОбработкаТабличныхЧастейКлиентСервер.ПриИзмененииСтавкаНДС(ЭтаФорма, "Услуги");

КонецПроцедуры

&НаКлиенте
Процедура УслугиСчетЗатратПриИзменении(Элемент)

	ТекущиеДанные = Элементы.Услуги.ТекущиеДанные;

	УстановитьЗаголовкиИДоступностьСубконто(ЭтаФорма, ТекущиеДанные.СчетЗатрат, "", Истина, Истина);

	ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3",
								 "Субконто1", "Субконто2", "Субконто3");

	ПоляОбъекта.Вставить("Организация"  , Объект.Организация);
	
	
	БухгалтерскийУчетКлиентСервер.ПриИзмененииСчета(ТекущиеДанные.СчетЗатрат, ТекущиеДанные, ПоляОбъекта, Истина);
	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма);

	// Получим общие параметры обработки для реквизитов документа
	ПараметрыОбработки = ПоступлениеТоваровУслугФормыКлиент.ПодготовитьПараметрыОбработкиУслугиНоменклатураПриИзменении(
		ЭтаФорма, ТекущиеДанные);
	
	// Дополнительные поля, требующиеся для заполнения добавленных колонок табличного поля текущей формы.
	ПараметрыОбработки.ДанныеСтрокиТаблицы.Вставить("Всего", ТекущиеДанные.Всего);
	ПараметрыОбработки.ДанныеСтрокиТаблицы.Вставить("Субконто1Доступность", ТекущиеДанные.Субконто1Доступность);
	ПараметрыОбработки.ДанныеСтрокиТаблицы.Вставить("Субконто2Доступность", ТекущиеДанные.Субконто2Доступность);
	ПараметрыОбработки.ДанныеСтрокиТаблицы.Вставить("Субконто3Доступность", ТекущиеДанные.Субконто3Доступность);
	
	ЗаполнитьПараметрыОбъектаДляЗаполненияДобавленныхКолонок(ЭтаФорма, ПараметрыОбработки.ДанныеОбъекта);
		
	ЗаполнитьДобавленныеКолонкиСтрокиТаблицыУслуги(ПараметрыОбработки.ДанныеСтрокиТаблицы, ПараметрыОбработки.ДанныеОбъекта);
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ПараметрыОбработки.ДанныеСтрокиТаблицы);

КонецПроцедуры

&НаКлиенте
Процедура УслугиСубконтоПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Услуги.ТекущиеДанные;

	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма);

	// Получим общие параметры обработки для реквизитов документа
	ПараметрыОбработки = ПоступлениеТоваровУслугФормыКлиент.ПодготовитьПараметрыОбработкиУслугиНоменклатураПриИзменении(
		ЭтаФорма, ТекущиеДанные);
	
	// Дополнительные поля, требующиеся для заполнения добавленных колонок табличного поля текущей формы.
	ПараметрыОбработки.ДанныеСтрокиТаблицы.Вставить("Всего", ТекущиеДанные.Всего);
	ПараметрыОбработки.ДанныеСтрокиТаблицы.Вставить("Субконто1Доступность", ТекущиеДанные.Субконто1Доступность);
	ПараметрыОбработки.ДанныеСтрокиТаблицы.Вставить("Субконто2Доступность", ТекущиеДанные.Субконто2Доступность);
	ПараметрыОбработки.ДанныеСтрокиТаблицы.Вставить("Субконто3Доступность", ТекущиеДанные.Субконто3Доступность);
	
	ЗаполнитьПараметрыОбъектаДляЗаполненияДобавленныхКолонок(ЭтаФорма, ПараметрыОбработки.ДанныеОбъекта);
		
	ЗаполнитьДобавленныеКолонкиСтрокиТаблицыУслуги(ПараметрыОбработки.ДанныеСтрокиТаблицы, ПараметрыОбработки.ДанныеОбъекта);
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ПараметрыОбработки.ДанныеСтрокиТаблицы);
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиСубконтоНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	СтрокаТаблицы = Элементы.Услуги.ТекущиеДанные;

	ПараметрыДокумента = ПолучитьСписокПараметров(ЭтаФорма, СтрокаТаблицы, "Субконто%Индекс%");
	ПараметрыДокумента.Вставить("СчетУчета", СтрокаТаблицы.СчетЗатрат);
	ОбщегоНазначенияБПКлиент.НачалоВыбораЗначенияСубконто(ЭтаФорма, Элемент, СтандартнаяОбработка, ПараметрыДокумента);

КонецПроцедуры

&НаКлиенте
Процедура УслугиСуммаНДСПриИзменении(Элемент)

	ОбработкаТабличныхЧастейКлиентСервер.ПриИзмененииСуммаНДС(ЭтаФорма, "Услуги");

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыВозвратнаяТара

&НаКлиенте
Процедура ВозвратнаяТараПриИзменении(Элемент)

	ЕстьВозвратнаяТара = Объект.ВозвратнаяТара.Количество() > 0;
	ОбновитьИтоги(ЭтаФорма);
	РассчитатьПропорциональныйНДС(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ВозвратнаяТараПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если НоваяСтрока И ОтменаРедактирования Тогда
		ОбновитьИтоги(ЭтаФорма);
		РассчитатьПропорциональныйНДС(ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВозвратнаяТараНоменклатураПриИзменении(Элемент)

	ТекущиеДанные = Элементы.ВозвратнаяТара.ТекущиеДанные;
	
	ДанныеСтрокиТаблицы = Новый Структура("Номенклатура, Количество, Цена, Сумма, СчетУчетаБУ, НалоговоеНазначение");
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, ТекущиеДанные);
	
	ДанныеОбъекта = Новый Структура(
		"Дата, Организация, ВидОперации, Склад, ТипЦен, СуммаВключаетНДС,
		|ВалютаДокумента, КурсВзаиморасчетов, КратностьВзаиморасчетов, ЭтоКомиссия");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	ДанныеОбъекта.СуммаВключаетНДС = Истина;
	ДанныеОбъекта.ЭтоКомиссия = ЭтоКомиссия;
	
	ВозвратнаяТараНоменклатураПриИзмененииНаСервере(ДанныеСтрокиТаблицы, ДанныеОбъекта);
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтрокиТаблицы);

КонецПроцедуры

&НаКлиенте
Процедура ВозвратнаяТараКоличествоПриИзменении(Элемент)

	ОбработкаТабличныхЧастейКлиентСервер.ПриИзмененииКоличествоЦена(ЭтаФорма, "ВозвратнаяТара");

КонецПроцедуры

&НаКлиенте
Процедура ВозвратнаяТараЦенаПриИзменении(Элемент)

	ОбработкаТабличныхЧастейКлиентСервер.ПриИзмененииКоличествоЦена(ЭтаФорма, "ВозвратнаяТара");

КонецПроцедуры

&НаКлиенте
Процедура ВозвратнаяТараСуммаПриИзменении(Элемент)

	ОбработкаТабличныхЧастейКлиентСервер.ПриИзмененииСумма(ЭтаФорма, "ВозвратнаяТара");

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПровестиИЗакрыть(Команда)

	ПоступлениеТоваровУслугФормыКлиент.ПровестиИЗакрыть(ЭтаФорма, Команда);	
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборОборудование(Команда)

	ПоступлениеТоваровУслугФормыКлиент.ПодборНоменклатуры(ЭтаФорма, "Оборудование", Команда);

КонецПроцедуры

&НаКлиенте
Процедура ПодборТовары(Команда)

	ПоступлениеТоваровУслугФормыКлиент.ПодборНоменклатуры(ЭтаФорма, "Товары", Команда);

КонецПроцедуры

&НаКлиенте
Процедура ПодборБланки(Команда)
	
	ПоступлениеТоваровУслугФормыКлиент.ПодборНоменклатуры(ЭтаФорма, "БланкиСтрогогоУчета", Команда);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборУслуги(Команда)

	ПоступлениеТоваровУслугФормыКлиент.ПодборНоменклатуры(ЭтаФорма, "Услуги", Команда);

КонецПроцедуры

&НаКлиенте
Процедура ПодборВозвратнаяТара(Команда)

	ПоступлениеТоваровУслугФормыКлиент.ПодборНоменклатуры(ЭтаФорма, "ВозвратнаяТара", Команда);

КонецПроцедуры

&НаКлиенте
Процедура ИзменитьТовары(Команда)
	
	Если ТоварыСвернуты И НТТ Тогда
		Возврат;
	КонецЕсли;

	АдресХранилищаТовары = ПоместитьТоварыВоВременноеХранилищеНаСервере();

	ПоступлениеТоваровУслугФормыКлиент.ИзменитьТовары(ЭтаФорма, Команда, АдресХранилищаТовары);
	
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьСтроки(Команда)
	
	ИмяТаблицы = ПолучитьИмяТекущейТабличнойЧасти();
	Если ПустаяСтрока(ИмяТаблицы) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	КоличествоСтрок = Элементы[ИмяТаблицы].ВыделенныеСтроки.Количество();
	Если КоличествоСтрок = 0 Тогда
		
		Возврат;
		
	КонецЕсли;
	СкопироватьСтрокиНаСервере(ИмяТаблицы);
	ОбработкаТабличныхЧастейКлиент.ОповеститьОКопированииСтрокВБуферОбмена(ЭтотОбъект, КоличествоСтрок);
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьСтроки(Команда)
	
	ИмяТаблицы = ПолучитьИмяТекущейТабличнойЧасти();
	Если ПустаяСтрока(ИмяТаблицы) Тогда
		
		Возврат;
		
	КонецЕсли;
	КоличествоСтрок = ВставитьСтрокиНаСервере(ИмяТаблицы);
	ОбработкаТабличныхЧастейКлиент.ОповеститьОВставкеСтрокИзБуфераОбмена(ЭтотОбъект, КоличествоСтрок);
	
КонецПроцедуры

// ИНАГРО++
&НаКлиенте
Процедура ЗаполнитьПоПриходномуОрдеруТовары(Команда)
			
	ОткрытьФормуВыбораПриходныйОрдерНаТовары("Товары", "Заполнить"); 		
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзПриходногоОрдераТовары(Команда)
	
	ОткрытьФормуВыбораПриходныйОрдерНаТовары("Товары", "Добавить");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоПриходномуОрдеруТара(Команда)
	
	ОткрытьФормуВыбораПриходныйОрдерНаТовары("ВозвратнаяТара", "Заполнить"); 
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзПриходногоОрдераТара(Команда)
	
	ОткрытьФормуВыбораПриходныйОрдерНаТовары("ВозвратнаяТара", "Заполнить");
	
КонецПроцедуры 
// ИНАГРО--

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

&НаСервере
Процедура ЗаполнитьДобавленныеКолонкиТаблиц(ИмяТаблицы = "") Экспорт

	ПараметрыОбъекта = Неопределено;
	ЗаполнитьПараметрыОбъектаДляЗаполненияДобавленныхКолонок(ЭтаФорма, ПараметрыОбъекта);

	Если ПустаяСтрока(ИмяТаблицы) ИЛИ ИмяТаблицы = "Оборудование" Тогда
		Для Каждого СтрокаТаблицы Из Объект.Оборудование Цикл
			ЗаполнитьДобавленныеКолонкиСтрокиТаблицыОборудование(СтрокаТаблицы, ПараметрыОбъекта);
		КонецЦикла;
	КонецЕсли;
	
	Если ПустаяСтрока(ИмяТаблицы) ИЛИ ИмяТаблицы = "ОбъектыСтроительства" Тогда
		Для Каждого СтрокаТаблицы Из Объект.ОбъектыСтроительства Цикл
			ЗаполнитьДобавленныеКолонкиСтрокиТаблицыОбъектыСтроительства(СтрокаТаблицы, ПараметрыОбъекта);
		КонецЦикла;
	КонецЕсли;
	
	Если ПустаяСтрока(ИмяТаблицы) ИЛИ ИмяТаблицы = "Товары" Тогда
		Для Каждого СтрокаТаблицы Из Объект.Товары Цикл
			ЗаполнитьДобавленныеКолонкиСтрокиТаблицыТовары(СтрокаТаблицы, ПараметрыОбъекта);
		КонецЦикла;
	КонецЕслИ;
	
	Если ПустаяСтрока(ИмяТаблицы) ИЛИ ИмяТаблицы = "Услуги" Тогда
		Для Каждого СтрокаТаблицы Из Объект.Услуги Цикл
			ЗаполнитьДобавленныеКолонкиСтрокиТаблицыУслуги(СтрокаТаблицы, ПараметрыОбъекта);
		КонецЦикла;
		УстановитьДоступностьСубконто()
	КонецЕсли;
	Если ПустаяСтрока(ИмяТаблицы) ИЛИ ИмяТаблицы = "БланкиСтрогогоУчета" Тогда
		Для Каждого СтрокаТаблицы Из Объект.БланкиСтрогогоУчета Цикл
			ЗаполнитьДобавленныеКолонкиСтрокиТаблицыБланки(СтрокаТаблицы, ПараметрыОбъекта);
		КонецЦикла;
		УстановитьДоступностьСубконто()
	КонецЕсли;
	
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьИтогиНаСервере() Экспорт

	ОбновитьИтоги(ЭтаФорма);

КонецПроцедуры

&НаСервере
Процедура ПодготовитьФормуНаСервере() Экспорт
	
	
	ТекущаяДатаДокумента = Объект.Дата;
	
	ВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	
	
	ДоговорУказан = ЗначениеЗаполнено(Объект.ДоговорКонтрагента);
	Если ДоговорУказан Тогда
		РеквизитыДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			Объект.ДоговорКонтрагента, "ВидДоговора, ВалютаВзаиморасчетов, ВедениеВзаиморасчетов, СложныйНалоговыйУчет");
		ЭтоКомиссия           = РеквизитыДоговора.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом;
		ВедениеВзаиморасчетов = РеквизитыДоговора.ВедениеВзаиморасчетов;
		СложныйНалоговыйУчет  = РеквизитыДоговора.СложныйНалоговыйУчет;
		
		ВалютаВзаиморасчетов = РеквизитыДоговора.ВалютаВзаиморасчетов;
	Иначе
		ЭтоКомиссия          = Ложь;
	КонецЕсли;
	
	// ИНАГРО++
	Если НЕ ЗначениеЗаполнено(Объект.ИНАГРО_ВидПоступления) Тогда
		Объект.ИНАГРО_ВидПоступления = Перечисления.ИНАГРО_ВидыПоступленияТоваров.НаСклад;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Склад) Тогда
		УстановитьТипСкладаОрдера(ЭтаФорма);
	КонецЕсли; 
	// ИНАГРО--
	
	УстановитьФункциональныеОпцииФормы();
	
	УстановитьСостояниеДокумента();
	
	УстановитьПараметрыВыбора();
	Если ДоговорУказан Тогда
		УстановитьПараметрыВыбораДляСчетовУчета();
	КонецЕсли;
	
	ПоступлениеТоваровУслугФормы.ОпределитьНеобходимостьРасчетаСуммыВРознице(ЭтаФорма);
	
	Если НТТ И РассчитыватьСуммаВРознице И Объект.Товары.Количество() > 0 Тогда
		
		ТоварыСвернуты	= Истина;
		Для каждого СтрокаТовары Из Объект.Товары Цикл
			Если ЗначениеЗаполнено(СтрокаТовары.Номенклатура) Тогда
				ТоварыСвернуты	= Ложь;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	Иначе
		ТоварыСвернуты	= Ложь;
	КонецЕсли;
	
	РазделениеПоСтавкамВРознице = БухгалтерскийУчетВызовСервераПовтИсп.ИспользуетсяРазделениеПоСтавкамНДСВНТТ();
	
	ЕстьВозвратнаяТара = Объект.ВозвратнаяТара.Количество() > 0;
	
	ЗаполнитьДобавленныеКолонкиТаблиц();
	
	
	ПоступлениеТоваровУслугФормыКлиентСервер.СформироватьНадписьЦеныИВалюта(ЭтаФорма);
	
	ОбновитьИтоги(ЭтаФорма);
	
	Если НЕ ЗначениеЗаполнено(Объект.Склад) Тогда // ИНАГРО 		
		УстановитьТипСкладаОрдера(ЭтаФорма);
	КонецЕсли;

	УправлениеФормой(ЭтаФорма);
	
	ПоступлениеТоваровУслугФормы.УстановитьЗаголовокФормы(ЭтаФорма);
	
	УстановитьЗаголовкиКолонок();
	
	// Проверка буфера обмена на наличие скопированных строк	
	УстановитьДоступностьКомандыВставки(ЭтотОбъект, Не ОбщегоНазначения.ПустойБуферОбмена());
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСостояниеДокумента()
	
	СостояниеДокумента = ОбщегоНазначенияБП.СостояниеДокумента(Объект);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьМассивВидовДоговоров() Экспорт

	СписокВидовДоговоров = Новый Массив;

	Если Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ВПереработку Тогда
		СписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПокупателем);
	Иначе
		СписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком);
		СписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомитентом);
		СписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.Бартерный);
	КонецЕсли;

	Возврат СписокВидовДоговоров;

КонецФункции

&НаКлиенте
Процедура ПриИзмененииЦеныИВалюты(Знач ВалютаДоИзменения, КурсДоИзменения, КратностьДоИзменения, ПерезаполнитьЦены = Ложь, ПересчитатьЦены = Ложь, ПересчитатьНДС = Ложь, РассчитатьНДССУчетомОшибокОкругления = Ложь) Экспорт

	Если ПерезаполнитьЦены ИЛИ ПересчитатьЦены ИЛИ ПересчитатьНДС ИЛИ РассчитатьНДССУчетомОшибокОкругления Тогда
		ПриИзмененииЦеныИВалютыНаСервере(ВалютаДоИзменения, КурсДоИзменения, КратностьДоИзменения, ПерезаполнитьЦены, ПересчитатьЦены, ПересчитатьНДС, РассчитатьНДССУчетомОшибокОкругления);
	Иначе
		РассчитатьПропорциональныйНДС(ЭтаФорма);
		ОбновитьИтоги(ЭтаФорма);
		УправлениеФормой(ЭтаФорма);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура УправлениеФормойНаСервере() Экспорт
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьФункциональныеОпцииФормы() Экспорт

	ОбщегоНазначенияБПКлиентСервер.УстановитьПараметрыФункциональныхОпцийФормыДокумента(ЭтаФорма);
	
	ПлательщикНДС               = УчетнаяПолитика.ПлательщикНДС(Объект.Организация, Объект.Дата);
	
	ПлательщикНалогаНаПрибыльДо2015 = УчетнаяПолитика.ПлательщикНалогаНаПрибыльДо2015(Объект.Организация, Объект.Дата);
	СпособОценкиТоваровВРознице = УчетнаяПолитика.СпособОценкиТоваровВРознице(Объект.Организация, Объект.Дата);
	УчетВПродажныхЦенах 		= СпособОценкиТоваровВРознице = Перечисления.СпособыОценкиТоваровВРознице.ПоПродажнойСтоимости;

КонецПроцедуры

&НаСервере
Процедура УстановитьЗаголовкиКолонок() Экспорт
	
	ЗаголовокЦена 	= ?(ПлательщикНДС, ?(Объект.СуммаВключаетНДС, НСтр("ru='Цена с НДС';uk='Ціна з ПДВ'"), НСтр("ru='Цена без НДС';uk='Ціна без ПДВ'")), НСтр("ru='Цена';uk='Ціна'"));
	ЗаголовокСумма 	= ?(ПлательщикНДС, ?(Объект.СуммаВключаетНДС, НСтр("ru='Сумма с НДС';uk='Сума з ПДВ'"), НСтр("ru='Сумма без НДС';uk='Сума без ПДВ'")), НСтр("ru='Сумма';uk='Сума'"));
	
	Элементы.ОборудованиеЦена.Заголовок = ЗаголовокЦена;
	Элементы.ОборудованиеСумма.Заголовок = ЗаголовокСумма;
	
	Элементы.ОбъектыСтроительстваСумма.Заголовок = ЗаголовокСумма;
	
	Элементы.ТоварыЦена.Заголовок = ЗаголовокЦена;
	Элементы.ТоварыСумма.Заголовок = ЗаголовокСумма;
	
	Элементы.УслугиЦена.Заголовок = ЗаголовокЦена;
	Элементы.УслугиСумма.Заголовок = ЗаголовокСумма;
	
	Элементы.БланкиСтрогогоУчетаЦена.Заголовок = ЗаголовокЦена;
	Элементы.БланкиСтрогогоУчетаСумма.Заголовок = ЗаголовокСумма;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПараметрыВыбораДляСчетовУчета() Экспорт
	
	Если    Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ПокупкаКомиссия
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ВПереработку Тогда
		
		НовыйМассивПараметров = Новый Массив();
		НовыйМассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.ЗапретитьИспользоватьВПроводках", Ложь));
		Если    ЭтоКомиссия 
			ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ВПереработку Тогда
			НовыйМассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Забалансовый", Истина));
		КонецЕсли;
		
		НовыеПараметрыВыбора = Новый ФиксированныйМассив(НовыйМассивПараметров);
		Элементы.ТоварыСчетУчетаБУ.ПараметрыВыбора = НовыеПараметрыВыбора;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Элементы = Форма.Элементы;
	Объект   = Форма.Объект;
	
	ЭтоОборудование = Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеТоваровУслуг.Оборудование"); // ИНАГРО
	
	Элементы.ГруппаУслуги.Видимость =
		(Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеТоваровУслуг.ПокупкаКомиссия")
		ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеТоваровУслуг.Оборудование")
		ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеТоваровУслуг.БланкиСтрогогоУчета")
		ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеТоваровУслуг.ОбъектыСтроительства"))
		И НЕ Форма.ЭтоКомиссия;
	
	Элементы.Сделка.Доступность = (Форма.ВедениеВзаиморасчетов = ПредопределенноеЗначение("Перечисление.ВедениеВзаиморасчетовПоДоговорам.ПоРасчетнымДокументам"));
    Элементы.ГруппаПропорциональныйНДС.Видимость = Форма.ПлательщикНДС;
	
	ПоступлениеТоваровУслугФормыКлиентСервер.СформироватьНадписьЦеныИВалюта(Форма);	
	
	Элементы.ДоговорКонтрагента.Доступность = ЗначениеЗаполнено(Объект.Организация) И ЗначениеЗаполнено(Объект.Контрагент); 	
		
	ВПереработку = (Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеТоваровУслуг.ВПереработку"));
	
	Элементы.ГруппаПропорциональныйНДС.Видимость     = НЕ ВПереработку; 

	Элементы.УслугиНалоговоеНазначениеДоходовИЗатрат.Видимость = Форма.ПлательщикНалогаНаПрибыльДо2015;
	Элементы.ГруппаДоходыДо2011Года.Видимость		 = НЕ ВПереработку И Форма.ПлательщикНалогаНаПрибыльДо2015 И НЕ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеТоваровУслуг.Оборудование");
	Элементы.СуммаВДВРПоАвансуДо01042011.Доступность = Объект.ЕстьАвансДо01042011;
	Элементы.ГруппаИтогиВсегоНДС.Видимость = Форма.ПлательщикНДС;
	
	Элементы.НадписьДокументПолученИзЗвит1С.Видимость = ЗначениеЗаполнено(Объект.Звит1С_DOC_ID);
	Элементы.ТоварыНаименованиеПоставщика.Видимость   = ЗначениеЗаполнено(Объект.Звит1С_DOC_ID);
	
	// ИНАГРО++
	НаСклад  = Объект.ИНАГРО_ВидПоступления = ПредопределенноеЗначение("Перечисление.ИНАГРО_ВидыПоступленияТоваров.НаСклад"); 
	ПоОрдеру = Объект.ИНАГРО_ВидПоступления = ПредопределенноеЗначение("Перечисление.ИНАГРО_ВидыПоступленияТоваров.ПоОрдеру");
	
	Элементы.ИНАГРО_ВидПоступления.Видимость      = НЕ (Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеТоваровУслуг.ОбъектыСтроительства"));
	Элементы.ИНАГРО_ПоступлениеВРозницу.Видимость = Объект.ИНАГРО_СкладВТЧ И Форма.УчетВПродажныхЦенах;
	Элементы.ИНАГРО_СкладВТЧ.Видимость            = НаСклад И НЕ ЭтоОборудование;
	Элементы.ИНАГРО_ОрдерВТЧ.Видимость            = ПоОрдеру И НЕ ЭтоОборудование;	
	
	Если НаСклад Тогда 
		Элементы.Склад.Доступность = НЕ Объект.ИНАГРО_СкладВТЧ;
	ИначеЕсли ПоОрдеру Тогда 
		Элементы.Склад.Доступность = НЕ Объект.ИНАГРО_ОрдерВТЧ;
	КонецЕсли;
	
	Элементы.ТоварыИНАГРО_Ордер.Видимость = Объект.ИНАГРО_ОрдерВТЧ;
	Элементы.ТоварыИНАГРО_Склад.Видимость = Объект.ИНАГРО_СкладВТЧ;
	
	Элементы.ВозвратнаяТараИНАГРО_Ордер.Видимость = Объект.ИНАГРО_ОрдерВТЧ;
	Элементы.ВозвратнаяТараИНАГРО_Склад.Видимость = Объект.ИНАГРО_СкладВТЧ;

	Элементы.ТоварыДобавитьИзПриходногоОрдераТовары.Доступность       = Объект.ИНАГРО_ОрдерВТЧ;
	Элементы.ВозвратнаяТараДобавитьИзПриходногоОрдераТара.Доступность = Объект.ИНАГРО_ОрдерВТЧ;
	
	Элементы.ИНАГРО_ВТабличнойЧасти.Видимость 		 = Объект.ИНАГРО_УказатьОС;
	Элементы.ИНАГРО_ОсновноеСредство.Видимость 		 = Объект.ИНАГРО_УказатьОС И (НЕ Объект.ИНАГРО_ВТабличнойЧасти);
	Элементы.УслугиИНАГРО_ОсновноеСредство.Видимость = Объект.ИНАГРО_УказатьОС И Объект.ИНАГРО_ВТабличнойЧасти;
	// ИНАГРО--
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЭлементыФормыПоВидуОперации()

	// При создании формы сразу устанавливаем свойства элементов,
	// которые зависят от вида операции и которые в дальнейшем менять не требуется.

	Элементы.ГруппаТовары.Видимость =
		Объект.ВидОперации <> ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеТоваровУслуг.ОбъектыСтроительства");
		
	Элементы.ГруппаБланкиСтрогогоУчета.Видимость =
		Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеТоваровУслуг.БланкиСтрогогоУчета");
		
	Элементы.ГруппаВозвратнаяТара.Видимость =
		  Объект.ВидОперации <> ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеТоваровУслуг.ВПереработку")
		И Объект.ВидОперации <> ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеТоваровУслуг.ОбъектыСтроительства");
	
	Элементы.ГруппаОборудование.Видимость =
		Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеТоваровУслуг.Оборудование");
	
	Элементы.ГруппаОбъектыСтроительства.Видимость =
		Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеТоваровУслуг.ОбъектыСтроительства");
	
	Элементы.ГруппаСчетаУчета.Видимость =
		Объект.ВидОперации <> ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеТоваровУслуг.ВПереработку");
	
	Элементы.ГруппаИтогиВсегоНДС.Доступность =
		Объект.ВидОперации <> ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеТоваровУслуг.ВПереработку");
	
	Элементы.Склад.Доступность =
		Объект.ВидОперации <> ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеТоваровУслуг.ОбъектыСтроительства");
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОборудованиеНоменклатураПриИзмененииНаСервере(СтрокаТабличнойЧасти, Знач ДанныеОбъекта)
	
	СведенияОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОНоменклатуре(
		СтрокаТабличнойЧасти.Номенклатура, ДанныеОбъекта);
	Если СведенияОНоменклатуре = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Документы.ПоступлениеТоваровУслуг.ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(
		ДанныеОбъекта, СтрокаТабличнойЧасти, "Оборудование", СведенияОНоменклатуре);
	
	СтрокаТабличнойЧасти.ЕдиницаИзмерения		= СведенияОНоменклатуре.БазоваяЕдиницаИзмерения;
	СтрокаТабличнойЧасти.Коэффициент			= СведенияОНоменклатуре.Коэффициент;
	СтрокаТабличнойЧасти.Цена					= СведенияОНоменклатуре.Цена;
	СтрокаТабличнойЧасти.СтавкаНДС				= СведенияОНоменклатуре.СтавкаНДС;
	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ДанныеОбъекта.СуммаВключаетНДС);
	
	ЗаполнитьДобавленныеКолонкиСтрокиТаблицыОборудование(СтрокаТабличнойЧасти, ДанныеОбъекта);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОборудованиеЕдиницаИзмеренияПриИзмененииНаСервере(СтрокаТабличнойЧасти, Знач ДанныеОбъекта) Экспорт

	МетаданныеДокумента = ДанныеОбъекта.Ссылка.Метаданные();
	
	ОбработкаТабличныхЧастей.ЗаполнитьКоэффициентТабЧасти(СтрокаТабличнойЧасти, ДанныеОбъекта, "Оборудование", МетаданныеДокумента);
	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ДанныеОбъекта.СуммаВключаетНДС);
	
	ЗаполнитьДобавленныеКолонкиСтрокиТаблицыОборудование(СтрокаТабличнойЧасти, ДанныеОбъекта);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура БланкиСтрогогоУчетаНоменклатураПриИзмененииНаСервере(СтрокаТабличнойЧасти, Знач ДанныеОбъекта)
	
	СведенияОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОНоменклатуре(
		СтрокаТабличнойЧасти.Номенклатура, ДанныеОбъекта);
	Если СведенияОНоменклатуре = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Документы.ПоступлениеТоваровУслуг.ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(
		ДанныеОбъекта, СтрокаТабличнойЧасти, "БланкиСтрогогоУчета", СведенияОНоменклатуре);
	
	СтрокаТабличнойЧасти.ЕдиницаИзмерения		= СведенияОНоменклатуре.БазоваяЕдиницаИзмерения;
	СтрокаТабличнойЧасти.Коэффициент			= СведенияОНоменклатуре.Коэффициент;
	СтрокаТабличнойЧасти.Цена					= СведенияОНоменклатуре.Цена;
	СтрокаТабличнойЧасти.СтавкаНДС				= СведенияОНоменклатуре.СтавкаНДС;
	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ДанныеОбъекта.СуммаВключаетНДС);
	
	ЗаполнитьДобавленныеКолонкиСтрокиТаблицыБланки(СтрокаТабличнойЧасти, ДанныеОбъекта);
	
	СтрокаТабличнойЧасти.ЦенаНоминальная = Документы.ПоступлениеТоваровУслуг.БланкиСтрогогоУчетаПолучитьЦенуНоминальную(СтрокаТабличнойЧасти.Номенклатура, ДанныеОбъекта.Дата);
	ПоступлениеТоваровУслугФормыКлиентСервер.БланкиСтрогоУчетаРассчитатьНоминальныеРеквизиты(СтрокаТабличнойЧасти, ДанныеОбъекта);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура БланкиСтрогогоУчетаЕдиницаИзмеренияПриИзмененииНаСервере(СтрокаТабличнойЧасти, Знач ДанныеОбъекта) Экспорт

	МетаданныеДокумента = ДанныеОбъекта.Ссылка.Метаданные();
	
	ОбработкаТабличныхЧастей.ЗаполнитьКоэффициентТабЧасти(СтрокаТабличнойЧасти, ДанныеОбъекта, "БланкиСтрогогоУчета", МетаданныеДокумента);
	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ДанныеОбъекта.СуммаВключаетНДС);
	
	ЗаполнитьДобавленныеКолонкиСтрокиТаблицыБланки(СтрокаТабличнойЧасти, ДанныеОбъекта);	
	
	ПоступлениеТоваровУслугФормыКлиентСервер.БланкиСтрогоУчетаРассчитатьНоминальныеРеквизиты(СтрокаТабличнойЧасти, ДанныеОбъекта);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОбъектыСтроительстваОбъектСтроительстваПриИзмененииНаСервере(СтрокаТабличнойЧасти, Знач ДанныеОбъекта)


	Документы.ПоступлениеТоваровУслуг.ЗаполнитьСчетаУчетаВСтрокеТабЧастиОбъектовСтроительства(
		ДанныеОбъекта, СтрокаТабличнойЧасти);
		
	ЗаполнитьДобавленныеКолонкиСтрокиТаблицыОбъектыСтроительства(СтрокаТабличнойЧасти, ДанныеОбъекта);	
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ТоварыНоменклатураПриИзмененииНаСервере(СтрокаТабличнойЧасти, Знач ДанныеОбъекта)

	ПоступлениеТоваровУслугФормы.ТоварыНоменклатураПриИзменении(СтрокаТабличнойЧасти, ДанныеОбъекта);
		
	ЗаполнитьДобавленныеКолонкиСтрокиТаблицыТовары(СтрокаТабличнойЧасти, ДанныеОбъекта);

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ТоварыЕдиницаИзмеренияПриИзмененииНаСервере(СтрокаТабличнойЧасти, Знач ДанныеОбъекта)
	
	ПоступлениеТоваровУслугФормы.ТоварыЕдиницаИзмеренияПриИзменении(СтрокаТабличнойЧасти, ДанныеОбъекта);

	ЗаполнитьДобавленныеКолонкиСтрокиТаблицыТовары(СтрокаТабличнойЧасти, ДанныеОбъекта);	

КонецПроцедуры

&НаСервереБезКонтекста
Процедура УслугиНоменклатураПриИзмененииНаСервере(СтрокаТабличнойЧасти, Знач ДанныеОбъекта)

	ПоступлениеТоваровУслугФормы.УслугиНоменклатураПриИзменении(СтрокаТабличнойЧасти, ДанныеОбъекта);
	
	ЗаполнитьДобавленныеКолонкиСтрокиТаблицыУслуги(СтрокаТабличнойЧасти, ДанныеОбъекта);
	
	ПоляОбъектаСубконто		= Новый Структура("Субконто1, Субконто2, Субконто3", "Субконто1", "Субконто2", "Субконто3");
	
	БухгалтерскийУчетКлиентСервер.УстановитьДоступностьСубконто(СтрокаТабличнойЧасти.СчетЗатрат, СтрокаТабличнойЧасти, ПоляОбъектаСубконто);

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ВозвратнаяТараНоменклатураПриИзмененииНаСервере(СтрокаТабличнойЧасти, Знач ДанныеОбъекта)

	СведенияОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОНоменклатуре(
		СтрокаТабличнойЧасти.Номенклатура, ДанныеОбъекта);
	Если СведенияОНоменклатуре = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаТабличнойЧасти.Цена = СведенияОНоменклатуре.Цена;
	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
	
	Документы.ПоступлениеТоваровУслуг.ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(
		ДанныеОбъекта, СтрокаТабличнойЧасти, "ВозвратнаяТара", СведенияОНоменклатуре);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьЗаголовкиИДоступностьСубконто(Форма, Счет, Постфикс = "", ЕстьПодразделение, ЭтоТаблица = Ложь)

	ПоляФормы = Новый Структура("Субконто1, Субконто2, Субконто3",
								"УслугиСубконто" + Постфикс + "1",
								"УслугиСубконто" + Постфикс + "2",
								"УслугиСубконто" + Постфикс + "3");

	БухгалтерскийУчетКлиентСервер.ПриВыбореСчета(Счет, Форма, ПоляФормы, Неопределено, ЭтоТаблица);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьСписокПараметров(Форма, Объект, ШаблонИмяПоляОбъекта)

	СписокПараметров = Новый Структура;
	Для Индекс = 1 По 3 Цикл
		ИмяПоля = СтрЗаменить(ШаблонИмяПоляОбъекта, "%Индекс%", Индекс);
		Если ТипЗнч(Объект[ИмяПоля]) = Тип("СправочникСсылка.Контрагенты") Тогда
			СписокПараметров.Вставить("Контрагент", Объект[ИмяПоля]);
		ИначеЕсли ТипЗнч(Объект[ИмяПоля]) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
			СписокПараметров.Вставить("ДоговорКонтрагента", Объект[ИмяПоля]);
		ИначеЕсли ТипЗнч(Объект[ИмяПоля]) = Тип("СправочникСсылка.Номенклатура") Тогда
			СписокПараметров.Вставить("Номенклатура", Объект[ИмяПоля]);
		ИначеЕсли ТипЗнч(Объект[ИмяПоля]) = Тип("СправочникСсылка.Склады") Тогда
			СписокПараметров.Вставить("Склад", Объект[ИмяПоля]);
		КонецЕсли;
	КонецЦикла;
	СписокПараметров.Вставить("ОстаткиОбороты", "Кт");
	СписокПараметров.Вставить("Организация"   , Форма.Объект.Организация);

	Возврат СписокПараметров;

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ИзменитьПараметрыВыбораПолейСубконто(Форма)

	Если Форма.Элементы.Услуги.ТекущаяСтрока <> Неопределено Тогда
		СтрокаТаблицы = Форма.Объект.Услуги.НайтиПоИдентификатору(Форма.Элементы.Услуги.ТекущаяСтрока);
		ПараметрыДокумента = ПолучитьСписокПараметров(Форма, СтрокаТаблицы, "Субконто%Индекс%");
		БухгалтерскийУчетКлиентСервер.ИзменитьПараметрыВыбораПолейСубконто(Форма, СтрокаТаблицы, "Субконто%Индекс%", "УслугиСубконто%Индекс%", ПараметрыДокумента);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура УстановитьПараметрыВыбора()

	МассивВидовДоговоров = Новый ФиксированныйМассив(ПолучитьМассивВидовДоговоров());

	НовыйМассивПараметров = Новый Массив();
	НовыйМассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.ВидДоговора", МассивВидовДоговоров));
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ВПереработку Тогда
		НовыйМассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.ВедениеВзаиморасчетов", Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом));	
	КонецЕсли;

	НовыеПараметрыВыбора = Новый ФиксированныйМассив(НовыйМассивПараметров);
	Элементы.ДоговорКонтрагента.ПараметрыВыбора = НовыеПараметрыВыбора;

	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьИтоги(Форма)

	Объект = Форма.Объект;

	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеТоваровУслуг.ПокупкаКомиссия") Тогда
		МассивТабличныхЧастейДляРасчетаИтогов = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок("Товары,Услуги", ",");
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеТоваровУслуг.БланкиСтрогогоУчета") Тогда
		МассивТабличныхЧастейДляРасчетаИтогов = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок("Товары,Услуги,БланкиСтрогогоУчета", ",");
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеТоваровУслуг.ВПереработку") Тогда
		МассивТабличныхЧастейДляРасчетаИтогов = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок("Товары", ",");
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеТоваровУслуг.Оборудование") Тогда
		МассивТабличныхЧастейДляРасчетаИтогов = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок("Оборудование,Товары,Услуги", ",");
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеТоваровУслуг.ОбъектыСтроительства") Тогда
		МассивТабличныхЧастейДляРасчетаИтогов = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок("ОбъектыСтроительства,Услуги", ",");
	Иначе
		МассивТабличныхЧастейДляРасчетаИтогов = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок("Оборудование,ОбъектыСтроительства,Товары,Услуги,БланкиСтрогогоУчета", ",");
	КонецЕсли;

	СуммаИтогов    = 0;
	СуммаНДСИтогов = 0;

	Для Каждого ТекущаяТабличнаяЧасть Из МассивТабличныхЧастейДляРасчетаИтогов Цикл
		СуммаИтогов    = СуммаИтогов    + Объект[ТекущаяТабличнаяЧасть].Итог("Всего");
		СуммаНДСИтогов = СуммаНДСИтогов + Объект[ТекущаяТабличнаяЧасть].Итог("СуммаНДС");
	КонецЦикла;

	Форма.ИтогиВсего    = СуммаИтогов;
	Форма.ИтогиВсегоНДС = СуммаНДСИтогов;

	ЕстьМатериальныеЦенности = Объект.Товары.Количество() > 0 ИЛИ Объект.ВозвратнаяТара.Количество() > 0 ИЛИ Объект.Оборудование.Количество() > 0 ИЛИ Объект.БланкиСтрогогоУчета.Количество() > 0;
	Форма.ОтметкаНезаполненногоСклад = ЕстьМатериальныеЦенности;
	
	Форма.ЕстьСтрокиВТабличныхЧастях = ЕстьМатериальныеЦенности ИЛИ Объект.Услуги.Количество() > 0;

КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()

	ПоступлениеТоваровУслугФормы.ОрганизацияПриИзменении(ЭтаФорма);
	КоэффициентПропорциональногоНДС = Неопределено;
	РассчитатьПропорциональныйНДС(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзмененииНаКлиенте()

	Если Год(Объект.Дата) <> Год(ТекущаяДатаДокумента) Тогда
		КоэффициентПропорциональногоНДС = Неопределено;
		РассчитатьПропорциональныйНДС(ЭтаФорма);
	КонецЕсли;
	
	Если НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДатаДокумента) Тогда
		// Изменение времени не влияет на поведение документа.
		ТекущаяДатаДокумента = Объект.Дата;
		Возврат;
	КонецЕсли;

	// Общие проверки условий по датам.
	ТребуетсяВызовСервера = ОбщегоНазначенияБПКлиент.ТребуетсяВызовСервераПриИзмененииДатыДокумента(Объект.Дата, 
		ТекущаяДатаДокумента, Объект.ВалютаДокумента, ВалютаРегламентированногоУчета);
		
	// Если определили, что изменение даты может повлиять на какие-либо параметры, 
	// то передаем обработку на сервер.
	Если ТребуетсяВызовСервера Тогда
		ДатаПриИзмененииНаСервере();
	КонецЕсли;
	
	// Запомним новую дату документа.
	ТекущаяДатаДокумента = Объект.Дата;
	
КонецПроцедуры

&НаСервере     
Процедура ДатаПриИзмененииНаСервере()

	ПоступлениеТоваровУслугФормы.ДатаПриИзменении(ЭтаФорма);

КонецПроцедуры

&НаСервере
Процедура КонтрагентПриИзмененииНаСервере()

	ПоступлениеТоваровУслугФормы.КонтрагентПриИзменении(ЭтаФорма);

КонецПроцедуры

&НаСервере
Процедура ДоговорКонтрагентаПриИзмененииНаСервере()

	ПоступлениеТоваровУслугФормы.ДоговорКонтрагентаПриИзменении(ЭтаФорма);
	
	Если НЕ Объект.ВалютаДокумента = Объект.ДоговорКонтрагента.ВалютаВзаиморасчетов Тогда
		РассчитатьПропорциональныйНДС(ЭтаФорма);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура СвернутьТоварыНаСервере()

	ПоступлениеТоваровУслугФормы.СвернутьТовары(ЭтаФорма);

КонецПроцедуры

&НаСервере
Процедура СкладПриИзмененииНаСервере()

	ПоступлениеТоваровУслугФормы.СкладПриИзменении(ЭтаФорма);	
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииЦеныИВалютыНаСервере(Знач ВалютаДоИзменения, КурсДоИзменения, КратностьДоИзменения, ПерезаполнитьЦены = Ложь, ПересчитатьЦены = Ложь, ПересчитатьНДС = Ложь, РассчитатьНДССУчетомОшибокОкругления = Ложь)

	ПоступлениеТоваровУслугФормы.ЗаполнитьРассчитатьСуммы(
		ЭтаФорма,
		ВалютаДоИзменения,
		КурсДоИзменения,
		КратностьДоИзменения,
		ПерезаполнитьЦены,
		ПересчитатьЦены,
		ПересчитатьНДС,
		РассчитатьНДССУчетомОшибокОкругления);

	УстановитьЗаголовкиКолонок();

	ОбновитьИтоги(ЭтаФорма);
	УправлениеФормой(ЭтаФорма);
	
	РассчитатьПропорциональныйНДС(ЭтаФорма);

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьДобавленныеКолонкиСтрокиТаблицыОборудование(СтрокаТаблицы, Знач ПараметрыОбъекта)
	
	СтрокаТаблицы.Всего = СтрокаТаблицы.Сумма + ?(ПараметрыОбъекта.СуммаВключаетНДС, 0, СтрокаТаблицы.СуммаНДС);
	СтрокаТаблицы.ПоставкаОсновныхФондов = Истина;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьДобавленныеКолонкиСтрокиТаблицыОбъектыСтроительства(СтрокаТаблицы, Знач ПараметрыОбъекта)
	
	СтрокаТаблицы.Всего = СтрокаТаблицы.Сумма + ?(ПараметрыОбъекта.СуммаВключаетНДС, 0, СтрокаТаблицы.СуммаНДС);
	СтрокаТаблицы.ПоставкаОсновныхФондов = Истина;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьДобавленныеКолонкиСтрокиТаблицыТовары(СтрокаТаблицы, Знач ПараметрыОбъекта)
	
	СтрокаТаблицы.Всего = СтрокаТаблицы.Сумма + ?(ПараметрыОбъекта.СуммаВключаетНДС, 0, СтрокаТаблицы.СуммаНДС);
	СтрокаТаблицы.СчетУчетаЗабалансовый = ЗначениеЗаполнено(СтрокаТаблицы.СчетУчетаБУ)
		И БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(СтрокаТаблицы.СчетУчетаБУ).Забалансовый;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьДобавленныеКолонкиСтрокиТаблицыУслуги(СтрокаТаблицы, Знач ПараметрыОбъекта)
	
	ПоляОбъектаСубконто		= Новый Структура("Субконто1, Субконто2, Субконто3", "Субконто1", "Субконто2", "Субконто3");

	СтрокаТаблицы.Всего = СтрокаТаблицы.Сумма + ?(ПараметрыОбъекта.СуммаВключаетНДС, 0, СтрокаТаблицы.СуммаНДС);
	
	БухгалтерскийУчетКлиентСервер.УстановитьДоступностьСубконто(СтрокаТаблицы.СчетЗатрат, СтрокаТаблицы, ПоляОбъектаСубконто);
	
	// "собъем" старое значение характера затрат и целевого налогового назначения
	СтрокаТаблицы.ХарактерЗатрат 			 = Неопределено;
	СтрокаТаблицы.ЦелевоеНалоговоеНазначение = Неопределено;
	НалоговыйУчет.ОпределениеАналитикиНалоговогоУчетаВПроводкахДляЗатрат(СтрокаТаблицы, СтрокаТаблицы.СчетЗатрат, СтрокаТаблицы.ХарактерЗатрат,
																       	 СтрокаТаблицы.ЦелевоеНалоговоеНазначение, СтрокаТаблицы.ПоставкаОсновныхФондов, 
																		 СтрокаТаблицы.НалоговоеНазначение,СтрокаТаблицы.НалоговоеНазначениеДоходовИЗатрат,
																		,ПараметрыОбъекта.Дата,,ПараметрыОбъекта.ПлательщикНДС);	
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьДобавленныеКолонкиСтрокиТаблицыБланки(СтрокаТаблицы, Знач ПараметрыОбъекта)
	
	СтрокаТаблицы.Всего = СтрокаТаблицы.Сумма + ?(ПараметрыОбъекта.СуммаВключаетНДС, 0, СтрокаТаблицы.СуммаНДС);
	СтрокаТаблицы.УчитываетсяПоНоминальнойСтоимости = СтрокаТаблицы.Номенклатура.УчитываетсяПоНоминальнойСтоимости;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьПараметрыОбъектаДляЗаполненияДобавленныхКолонок(Знач Форма, ПараметрыОбъекта)

	Объект = Форма.Объект;
	
	Если ТипЗнч(ПараметрыОбъекта) <> Тип("Структура") Тогда
		ПараметрыОбъекта = Новый Структура;
	КонецЕсли;
	
	ПараметрыОбъекта.Вставить("СуммаВключаетНДС", Объект.СуммаВключаетНДС);
	ПараметрыОбъекта.Вставить("ПлательщикНДС", Форма.ПлательщикНДС);
	ПараметрыОбъекта.Вставить("Дата", 		   Объект.Дата);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьСубконто()
	
	Для каждого Проводка Из Объект.Услуги Цикл
		ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3",
			"Субконто1", "Субконто2", "Субконто3");
		БухгалтерскийУчетКлиентСервер.УстановитьДоступностьСубконто(Проводка.СчетЗатрат, Проводка, ПоляОбъекта);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаВыбораПодборВставкаИзБуфераНаСервере(ВыбранноеЗначение, ИмяТаблицы)

	ПоступлениеТоваровУслугФормы.ОбработкаВыбораПодборВставкаИзБуфера(ЭтаФорма, ВыбранноеЗначение, ИмяТаблицы);
	
	ЗаполнитьДобавленныеКолонкиТаблиц(ИмяТаблицы);
	
	ОбновитьИтоги(ЭтаФорма);
	РассчитатьПропорциональныйНДС(ЭтаФорма);

КонецПроцедуры

&НаСервере
Функция ПоместитьТоварыВоВременноеХранилищеНаСервере()
	
	Возврат ПоместитьВоВременноеХранилище(Объект.Товары.Выгрузить(), УникальныйИдентификатор);
	
КонецФункции

&НаСервере
Процедура ОбработкаОповещенияОбработкиТабличнойЧастиТоварыНаСервере(Параметры)

	ПоступлениеТоваровУслугФормы.ОбработкаОповещенияОбработкиТабличнойЧастиТовары(ЭтаФорма, Параметры);
	
	ЗаполнитьДобавленныеКолонкиТаблиц("Товары");
	
	ОбновитьИтоги(ЭтаФорма);
	РассчитатьПропорциональныйНДС(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ВопросСвернутьТабличнуюЧастьЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ТоварыСвернуты = Истина;
		СвернутьТоварыНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидОперацииПриИзменении(Элемент)
	
	ВидОперацииПриИзмененииНаСервере();
		
КонецПроцедуры

&НаСервере
Процедура ВидОперацииПриИзмененииНаСервере()

	ПоступлениеТоваровУслугФормы.ВидОперацииОбработатьИзменение(ЭтаФорма);
	
	УстановитьЭлементыФормыПоВидуОперации();		
	
	УстановитьПараметрыВыбора();
	
	ПоступлениеТоваровУслугФормы.УстановитьЗаголовокФормы(ЭтаФорма);
	
	ОбновитьИтогиНаСервере();
	УправлениеФормойНаСервере();
	Модифицированность = Истина;

КонецПроцедуры

&НаСервере
Процедура УстановитьПараметрыВыбораВидОперации()
	
	МассивВидовОпераций = Документы.ПоступлениеТоваровУслуг.ПолучитьФиксированныйМассивВидовОпераций();
	
	ПараметрМассивВидовОпераций = Новый ПараметрВыбора("Отбор.Ссылка", МассивВидовОпераций);
	
	НовыйМассив = Новый Массив();
	НовыйМассив.Добавить(ПараметрМассивВидовОпераций);
	НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);
	
	Элементы.ВидОперации.ПараметрыВыбора = НовыеПараметры;
	
КонецПроцедуры // УстановитьПараметрыВыбораВидОперации

&НаКлиентеНаСервереБезКонтекста
Процедура РассчитатьПропорциональныйНДС(Форма) Экспорт
	
	Объект = Форма.Объект;
	
	Если НЕ Форма.ПлательщикНДС Тогда
		Объект.СуммаНДСПропорциональноВсего = 0;
		Объект.СуммаНДСПропорциональноКредит = 0;
		Возврат;
	КонецЕсли;
	
	Если Форма.КоэффициентПропорциональногоНДС = Неопределено Тогда
		
		Форма.КоэффициентПропорциональногоНДС = НалоговыйУчет.ПолучитьКоэффициентПропорциональногоНДС(Объект.Организация, Объект.Дата);
	
	КонецЕсли;
	
	МассивИменТабличныхЧастей = Новый Массив();
	МассивИменТабличныхЧастей.Добавить("Товары");
	МассивИменТабличныхЧастей.Добавить("Услуги");
	МассивИменТабличныхЧастей.Добавить("Оборудование");
	МассивИменТабличныхЧастей.Добавить("ОбъектыСтроительства");
	МассивИменТабличныхЧастей.Добавить("БланкиСтрогогоУчета");
	
	УчетНДСКлиентСервер.РассчитатьПропорциональныйНДС(Объект,МассивИменТабличныхЧастей,Форма.ПлательщикНДС,Форма.КоэффициентПропорциональногоНДС);

	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьПропорциональныйНДСНаКлиенте() Экспорт
	                       
	РассчитатьПропорциональныйНДС(ЭтаФорма);	
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьПропорциональныйНДСНаСервере() Экспорт
	
	РассчитатьПропорциональныйНДС(ЭтаФорма);		
	
КонецПроцедуры

&НаКлиенте
Процедура ЕстьАвансДо01042011ПриИзменении(Элемент)
	
	Если НЕ Объект.ЕстьАвансДо01042011 Тогда
		
		Объект.СуммаВДВРПоАвансуДо01042011 = 0;	
		
	КонецЕсли;
	
	УправлениеФормой(ЭтаФорма);	
	
КонецПроцедуры

#Область КопированиеВставкаСтрокЧерезБуферОбмена

&НаСервере
Процедура СкопироватьСтрокиНаСервере(ИмяТаблицы)
	
	ОбщегоНазначения.СкопироватьСтрокиВБуферОбмена(Объект[ИмяТаблицы], 
		Элементы[ИмяТаблицы].ВыделенныеСтроки, Объект.Ссылка.Метаданные().Имя);

КонецПроцедуры

&НаСервере
Функция ВставитьСтрокиНаСервере(ИмяТаблицы)
	
	ПараметрыВставки = ОбработкаТабличныхЧастей.ПолучитьПараметрыВставкиДанныхИзБуфераОбмена(Объект.Ссылка, ИмяТаблицы);
	ОпределитьСписокСвойствДляВставкиИзБуфера(ПараметрыВставки);
	ОбработкаВыбораПодборВставкаИзБуфераНаСервере(ПараметрыВставки, ПараметрыВставки.ИмяТаблицы);
	
	Возврат ПараметрыВставки.КоличествоДобавленныхСтрок;
	
КонецФункции

&НаКлиенте
Функция ПолучитьИмяТекущейТабличнойЧасти()
	
	ИмяТекущейСтраницы = Элементы.Страницы.ТекущаяСтраница.Имя;
	ИмяТаблицы = "";
	Если ИмяТекущейСтраницы = "ГруппаТовары" Тогда
		
		ИмяТаблицы = "Товары";
		
	ИначеЕсли ИмяТекущейСтраницы = "ГруппаУслуги" Тогда
		
		ИмяТаблицы = "Услуги";
		
	ИначеЕсли ИмяТекущейСтраницы = "ГруппаОборудование" Тогда
		
		ИмяТаблицы = "Оборудование";
		
	КонецЕсли;
	
	Возврат ИмяТаблицы;
	
КонецФункции

&НаСервере
Процедура ОпределитьСписокСвойствДляВставкиИзБуфера(ПараметрыВставки)
	
	СписокСвойств = Новый Массив;
	
	Если ПараметрыВставки.ИмяТаблицы = "Товары" Тогда
		
		СписокСвойств.Добавить("Номенклатура");
		СписокСвойств.Добавить("ЕдиницаИзмерения");
		СписокСвойств.Добавить("Коэффициент");
		СписокСвойств.Добавить("Количество");
		СписокСвойств.Добавить("Цена");
		СписокСвойств.Добавить("ЦенаВРознице");
		СписокСвойств.Добавить("СтавкаНДСВРознице");
		СписокСвойств.Добавить("НаименованиеПоставщика");
		Если ПараметрыВставки.ПоказыватьВДокументахСчетаУчета Тогда
			СписокСвойств.Добавить("СчетУчетаБУ");
		КонецЕсли;
	
	ИначеЕсли ПараметрыВставки.ИмяТаблицы = "Услуги" Тогда
	
		СписокСвойств.Добавить("Номенклатура");
		СписокСвойств.Добавить("Содержание");
		СписокСвойств.Добавить("Количество");
		СписокСвойств.Добавить("Цена");
		Если ПараметрыВставки.ПоказыватьВДокументахСчетаУчета И ПараметрыВставки.ИсточникИДокументОдногоВида Тогда
				
			СписокСвойств.Добавить("СчетЗатрат");
			СписокСвойств.Добавить("Субконто1");
			СписокСвойств.Добавить("Субконто2");
			СписокСвойств.Добавить("Субконто3");
		
		КонецЕсли;
		
	ИначеЕсли ПараметрыВставки.ИмяТаблицы = "Оборудование" Тогда
		
		СписокСвойств.Добавить("Номенклатура");
		СписокСвойств.Добавить("ЕдиницаИзмерения");
		СписокСвойств.Добавить("Коэффициент");
		СписокСвойств.Добавить("Количество");
		СписокСвойств.Добавить("Цена");
		Если ПараметрыВставки.ПоказыватьВДокументахСчетаУчета Тогда
			СписокСвойств.Добавить("СчетУчетаБУ");
		КонецЕсли;
		
	КонецЕсли;
	
	ПараметрыВставки.СписокСвойств = ОбработкаТабличныхЧастей.ПолучитьСписокСвойствИмеющихсяВТаблицеДанных(
		ПараметрыВставки.Данные, СписокСвойств);
	
КонецПроцедуры
	
&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьКомандыВставки(Форма, Доступность)

	Доступность = Не Форма.ТолькоПросмотр И Доступность;
	Элементы = Форма.Элементы;
	Элементы.ТоварыВставитьСтроки.Доступность						 = Доступность;
	Элементы.ТоварыКонтекстноеМенюВставитьСтроки.Доступность		 = Доступность;
	Элементы.УслугиВставитьСтроки.Доступность						 = Доступность;
	Элементы.УслугиКонтекстноеМенюВставитьСтроки.Доступность		 = Доступность;
	Элементы.ОборудованиеВставитьСтроки.Доступность					 = Доступность;
	Элементы.ОборудованиеКонтекстноеМенюВставитьСтроки.Доступность	 = Доступность;

КонецПроцедуры

#КонецОбласти

// ИНАГРО++
&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьТипСкладаОрдера(Форма)

	Элементы = Форма.Элементы;
	Объект   = Форма.Объект;		

	Если Объект.ИНАГРО_ВидПоступления = ПредопределенноеЗначение("Перечисление.ИНАГРО_ВидыПоступленияТоваров.НаСклад") Тогда
		
		Объект.ИНАГРО_ОрдерВТЧ = Ложь;

		Если ТипЗнч(Объект.Склад) <> Тип("СправочникСсылка.Склады") Тогда
			Объект.Склад = ПредопределенноеЗначение("Справочник.Склады.ПустаяСсылка");
		КонецЕсли;
		
		Элементы.Склад.Подсказка = НСтр("ru='В этом поле необходимо указать склад, с которого оформляется возврат товаров.';uk='У цьому полі необхідно вказати склад, з якого оформлюється повернення товарів.'");
				
	Иначе
		
		Объект.ИНАГРО_СкладВТЧ = Ложь;

		Если ТипЗнч(Объект.Склад) <> Тип("ДокументСсылка.ИНАГРО_ПриходныйОрдерНаТовары") Тогда
			Объект.Склад = ПредопределенноеЗначение("Документ.ИНАГРО_ПриходныйОрдерНаТовары.ПустаяСсылка");
		КонецЕсли;
		
		Элементы.Склад.Подсказка = НСтр("ru='В этом поле необходимо указать приходный ордер, по которому ранее было оформлено поступление товаров.';uk='У цьому полі необхідно вказати прибутковий ордер, за яким раніше було оформлено надходження товарів.'");
				
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораПриходныйОрдерНаТовары(ТабличнаяЧасть, СпособЗаполнения) Экспорт
	
	Если Объект.ИНАГРО_ВидПоступления <> ПредопределенноеЗначение("Перечисление.ИНАГРО_ВидыПоступленияТоваров.ПоОрдеру") Тогда
		ТекстСообщения = (Нстр("ru='Заполнять поступление товаров, услуг на основании приходного ордера можно только с видом поступления ""По ордеру""!';uk='Заповнювати надходження товарів, послуг на підставі прибуткового ордера можна тільки з видом надходження ""За ордером""!'"));		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Объект.ИНАГРО_ВидПоступления"); 	
		Возврат;
	КонецЕсли;

	Если СпособЗаполнения = "Заполнить"	И Объект.Товары.Количество() > 0 Тогда
		ДополнительныеПараметры = Новый Структура("ТабличнаяЧасть", ТабличнаяЧасть);	
		ТекстВопроса = НСтр("ru='Перед заполнением табличная часть будет очищена. Заполнить?';uk='Перед заповненням таблична частина буде очищена. Заповнити?'");
		Оповещение = Новый ОписаниеОповещения("ЗаполнитьПоПриходномуОрдеруЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Да);
	Иначе
		ОткрытьФормуВыбораПриходныйОрдерНаТоварыДляЗаполнения(ТабличнаяЧасть);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоПриходномуОрдеруЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	 Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда		
		Возврат;
	КонецЕсли; 	
	
	ТабличнаяЧасть = ДополнительныеПараметры.ТабличнаяЧасть;
	
	Объект[ТабличнаяЧасть].Очистить();	

	ОткрытьФормуВыбораПриходныйОрдерНаТоварыДляЗаполнения(ТабличнаяЧасть);
			
КонецПроцедуры  

&НаКлиенте
Процедура ОткрытьФормуВыбораПриходныйОрдерНаТоварыДляЗаполнения(ТабличнаяЧасть = Неопределено)
	
	ПараметрыОтбора	= Новый Структура;
	ПараметрыОтбора.Вставить("ВидОперации",	ПредопределенноеЗначение("Перечисление.ИНАГРО_ВидыОперацийПриходныйОрдер.ОтПоставщика"));
	Если ЗначениеЗаполнено(Объект.Организация) Тогда 		
		ПараметрыОтбора.Вставить("Организация",	Объект.Организация);
	КонецЕсли;	
	Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
		ПараметрыОтбора.Вставить("Контрагент", Объект.Контрагент);
	КонецЕсли;
	
	ПараметрыФормы	= Новый Структура;
	ПараметрыФормы.Вставить("Отбор",              ПараметрыОтбора);
	ПараметрыФормы.Вставить("РежимВыбора",        Истина);
	ПараметрыФормы.Вставить("МножественныйВыбор", Ложь);
	Если ТабличнаяЧасть <> Неопределено Тогда
		ПараметрыФормы.Вставить("ИмяТаблицы", ТабличнаяЧасть);
	КонецЕсли;

	ОткрытьФорму("Документ.ИНАГРО_ПриходныйОрдерНаТовары.Форма.ФормаВыбора", ПараметрыФормы, ЭтаФорма, УникальныйИдентификатор, , , , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	                                                                                                                		
КонецПроцедуры 

&НаСервере
Процедура ОбработкаЗаполненияТабличнойЧастиНаСервере(ВыбранноеЗначение, ТабличнаяЧасть)
	
	Документы.ПоступлениеТоваровУслуг.ЗаполнитьПоПриходномуОрдеру(Объект, ТабличнаяЧасть, ВыбранноеЗначение);
				
КонецПроцедуры 
// ИНАГРО--

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ БСП

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти