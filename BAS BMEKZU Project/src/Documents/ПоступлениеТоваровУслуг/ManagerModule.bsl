#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Заполняет счета БУ и НУ в строке табличной части.
//
Процедура ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(ДанныеОбъекта, СтрокаТЧ, ИмяТабЧасти, СведенияОНоменклатуре) Экспорт
	
	Если СведенияОНоменклатуре.Свойство("СчетаУчета") Тогда
		// СведенияОНоменклатуре - структура сведений номенклатуры
		СчетаУчета = СведенияОНоменклатуре.СчетаУчета;
	ИначеЕсли СведенияОНоменклатуре.Свойство("СчетУчетаБУ") Тогда
		// СведенияОНоменклатуре - структура счетов учета номенклатуры
		СчетаУчета = СведенияОНоменклатуре;
	Иначе
		Возврат;
	КонецЕсли;

	ЗаполнитьСчетаБУ(ДанныеОбъекта, СтрокаТЧ, ИмяТабЧасти, СчетаУчета);
	
	ЗаполнитьСчетаНУ(ДанныеОбъекта, СтрокаТЧ, ИмяТабЧасти, СчетаУчета);

КонецПроцедуры // ЗаполнитьСчетаУчетаВСтрокеТабЧасти()

// Заполняет счета БУ и НУ в табличной части документа
//
Процедура ЗаполнитьСчетаУчетаВТабличнойЧасти(Объект, ИмяТабЧасти) Экспорт

	ТабличнаяЧасть = Объект[ИмяТабЧасти];
	
	ДанныеОбъекта  = Новый Структура("Дата, ВидОперации, Организация, ЭтоКомиссия");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
	ДанныеОбъекта.Вставить("Склад", Объект.Склад);
	ДанныеОбъекта.Вставить("ЭтоКомиссия", (Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ПокупкаКомиссия)
			И (ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ДоговорКонтрагента, "ВидДоговора")
				= Перечисления.ВидыДоговоровКонтрагентов.СКомитентом));
	
	ИмяНоменклатуры = "Номенклатура";
	
	СоответствиеСчетовУчета = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаУчетаСпискаНоменклатуры(
		ДанныеОбъекта.Организация, ОбщегоНазначения.ВыгрузитьКолонку(ТабличнаяЧасть, ИмяНоменклатуры, Истина), ДанныеОбъекта.Склад, ДанныеОбъекта.Дата);
	
	Для каждого СтрокаТабличнойЧасти Из ТабличнаяЧасть Цикл
		СчетаУчета = СоответствиеСчетовУчета.Получить(СтрокаТабличнойЧасти[ИмяНоменклатуры]);
		ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(ДанныеОбъекта, СтрокаТабличнойЧасти, ИмяТабЧасти, СчетаУчета);
	КонецЦикла;

КонецПроцедуры // ЗаполнитьСчетаУчетаВТабЧасти()

// Заполняет счета БУ и НУ в табличной части Объекты строительства
//
Процедура ЗаполнитьСчетаУчетаВТабЧастиПоОбъектамСтроительства(Объект) Экспорт
	
	ТабличнаяЧасть = Объект["ОбъектыСтроительства"];

	Для каждого СтрокаТабЧасти Из ТабличнаяЧасть Цикл
		ЗаполнитьСчетаУчетаВСтрокеТабЧастиОбъектовСтроительства(Объект, СтрокаТабЧасти);
	КонецЦикла;

КонецПроцедуры

// Заполняет счета БУ и НУ в строке табличной части Объекты строительства
//
Процедура ЗаполнитьСчетаУчетаВСтрокеТабЧастиОбъектовСтроительства(Объект, СтрокаТабЧасти) Экспорт

	СчетаУчета = УправлениеНеоборотнымиАктивами.ПолучитьСчетаУчетаОбъектовСтроительства(Объект.Организация, СтрокаТабЧасти.ОбъектСтроительства);

	СтрокаТабЧасти.СчетУчетаБУ  = СчетаУчета.СчетУчетаБУ;

	СтрокаТабЧасти.НалоговоеНазначение = СчетаУчета.НалоговоеНазначение;

КонецПроцедуры 

Процедура ЗаполнитьСчетаУчетаРасчетов(Объект) Экспорт
	
	СчетаУчета = БухгалтерскийУчетРасчетовСКонтрагентами.ПолучитьСчетаРасчетовСКонтрагентом(Объект.Организация, Объект.Контрагент, Объект.ДоговорКонтрагента);
	
	Если Объект.ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда
		Объект.СчетУчетаРасчетовПоТаре        		= СчетаУчета.СчетУчетаТары;
		Объект.СчетУчетаРасчетовПоТареПоАвансам 	= СчетаУчета.СчетАвансовПоТаре;
	Иначе
		Если Объект.ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.Бартерный Тогда
			Объект.СчетУчетаРасчетовСКонтрагентом 	= СчетаУчета.СчетРасчетовПриБартере;
			Объект.СчетУчетаРасчетовПоАвансам     	= СчетаУчета.СчетАвансовПриБартере;
		Иначе
			Объект.СчетУчетаРасчетовСКонтрагентом 	= СчетаУчета.СчетРасчетов;
			Объект.СчетУчетаРасчетовПоАвансам     	= СчетаУчета.СчетАвансов;
		КонецЕсли;	
		Объект.СчетУчетаРасчетовПоТаре        		= СчетаУчета.СчетУчетаТары;
		Объект.СчетУчетаРасчетовПоТареПоАвансам 	= СчетаУчета.СчетАвансовПоТаре;
	КонецЕсли;
	
	Объект.СчетУчетаНДС 			   = СчетаУчета.СчетУчетаНДСПриобретений;
	Объект.СчетУчетаНДСПодтвержденный  = СчетаУчета.СчетУчетаНДСПриобретенийПодтвержденный;
	
КонецПроцедуры

Функция БланкиСтрогогоУчетаПолучитьЦенуНоминальную(Номенклатура, Дата) Экспорт

	ЦенаНоминальная = 0;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Дата",         Дата);
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);	
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЦеныНоменклатуры.Цена	
	|ИЗ
	|	РегистрСведений.НоминальнаяСтоимостьБланковСтрогогоУчета.СрезПоследних(&Дата, Номенклатура = &Номенклатура) КАК ЦеныНоменклатуры";

	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ЦенаНоминальная = Выборка.Цена;		
	КонецЕсли;

	Возврат ЦенаНоминальная;

КонецФункции 

Функция ОпределитьВидОперацииПоДокументуОснованию(Основание) Экспорт

	Результат = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ПокупкаКомиссия;

	Возврат Результат;

КонецФункции

Функция ПолучитьФиксированныйМассивВидовОпераций() Экспорт

	МассивВидовОпераций = Новый Массив;
	СписокВидовОпераций = Новый СписокЗначений;
	
	ЗначенияПеречисления = Метаданные.Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ЗначенияПеречисления;
	Для Каждого ЗначениеПеречисления Из ЗначенияПеречисления Цикл
		ТекущийВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг[ЗначениеПеречисления.Имя];
		МассивВидовОпераций.Добавить(ТекущийВидОперации);
	КонецЦикла;
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьБланкиСтрогогоУчета") Тогда
		ИндексНайденныйЭлемент = МассивВидовОпераций.Найти(Перечисления.ВидыОперацийПоступлениеТоваровУслуг.БланкиСтрогогоУчета);
		Если ИндексНайденныйЭлемент <> Неопределено Тогда
    		МассивВидовОпераций.Удалить(ИндексНайденныйЭлемент);
		КонецЕсли;	
	КонецЕсли;
	
	Возврат Новый ФиксированныйМассив(МассивВидовОпераций);

КонецФункции // ПолучитьФиксированныйМассивВидовОпераций

Процедура РассчитатьПропорциональныйНДС(Объект, ПлательщикНДС, КоэффициентПропорциональногоНДС) Экспорт 
	
	МассивИменТабличныхЧастей = Новый Массив();
	МассивИменТабличныхЧастей.Добавить("Товары");
	МассивИменТабличныхЧастей.Добавить("Услуги");
	МассивИменТабличныхЧастей.Добавить("Оборудование");
	МассивИменТабличныхЧастей.Добавить("ОбъектыСтроительства");
	МассивИменТабличныхЧастей.Добавить("БланкиСтрогогоУчета");
	
	УчетНДСКлиентСервер.РассчитатьПропорциональныйНДС(Объект,МассивИменТабличныхЧастей,ПлательщикНДС,КоэффициентПропорциональногоНДС);
	
КонецПроцедуры

Процедура ЗаполнитьПоПриходномуОрдеру(Объект, ИмяТабличнойЧасти, ДокументОснование) Экспорт // ИНАГРО

	Запрос = Новый Запрос; 	
	    
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	    |   МИНИМУМ(ДокТовары.НомерСтроки) КАК НомерСтроки,
	    |   ДокТовары.Номенклатура," + ?(ИмяТабличнойЧасти = "Товары", "ДокТовары.Коэффициент, ДокТовары.ЕдиницаИзмерения,", "") + "
	    |   СУММА(ДокТовары.Количество) КАК КоличествоПоДокументу,
	    |   NULL КАК ЦенаВРознице,
	    |   СУММА(ДокТовары.Количество) КАК КоличествоПоСерии
	    |ИЗ
	    |   Документ.ИНАГРО_ПриходныйОрдерНаТовары." + ИмяТабличнойЧасти + " КАК ДокТовары
	    |ГДЕ
	    |   ДокТовары.Ссылка = &ДокументОснование
	    |
	    |СГРУППИРОВАТЬ ПО
	    |   ДокТовары.Номенклатура" + ?(ИмяТабличнойЧасти = "Товары", ", ДокТовары.Коэффициент, ДокТовары.ЕдиницаИзмерения", "") + "
	    |
	    |УПОРЯДОЧИТЬ ПО
	    |   НомерСтроки";
	
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Склад = ?(Объект.ИНАГРО_ВидПоступления = Перечисления.ИНАГРО_ВидыПоступленияТоваров.ПоОрдеру, ДокументОснование.Склад, Объект.Склад);	
		
	Пока Выборка.Следующий() Цикл

		Если ИмяТабличнойЧасти = "Товары" Тогда

			СтрокаТабличнойЧасти = Объект.Товары.Добавить();
			СтрокаТабличнойЧасти.Номенклатура     = Выборка.Номенклатура;
			СтрокаТабличнойЧасти.Количество       = Выборка.КоличествоПоСерии;
            СтрокаТабличнойЧасти.ЕдиницаИзмерения = Выборка.ЕдиницаИзмерения;
            СтрокаТабличнойЧасти.Коэффициент      = Выборка.Коэффициент;
            СтрокаТабличнойЧасти.СтавкаНДС        = СтрокаТабличнойЧасти.Номенклатура.СтавкаНДС;
           	СтрокаТабличнойЧасти.ИНАГРО_Ордер     = ДокументОснование;			
						
            ОбработкаТабличныхЧастей.ЗаполнитьЕдиницуЦенуПродажиТабЧасти(СтрокаТабличнойЧасти, Объект, "Товары", Объект.Ссылка.Метаданные());
            ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
            ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти);
            ОбработкаТабличныхЧастейКлиентСервер.ПриИзмененииСуммыТабЧасти(СтрокаТабличнойЧасти);
			
			Склад = ?(Объект.ИНАГРО_ВидПоступления = Перечисления.ИНАГРО_ВидыПоступленияТоваров.ПоОрдеру, ДокументОснование.Склад, Объект.Склад);
			
			ДанныеОбъекта = Новый Структура("Дата, Организация, ВидОперации");
			ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект); 
			ДанныеОбъекта.Вставить("Склад",       Склад);
			ДанныеОбъекта.Вставить("ЭтоКомиссия", (Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ПокупкаКомиссия)
					И (ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ДоговорКонтрагента, "ВидДоговора")
						= Перечисления.ВидыДоговоровКонтрагентов.СКомитентом));

			СчетаУчета = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаУчетаНоменклатуры(Объект.Организация, СтрокаТабличнойЧасти.Номенклатура, Склад);

			ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(ДанныеОбъекта, СтрокаТабличнойЧасти, "Товары", СчетаУчета);
						
    	Иначе

			СтрокаТабличнойЧасти = Объект.ВозвратнаяТара.Добавить();
			СтрокаТабличнойЧасти.Номенклатура = Выборка.Номенклатура;
			СтрокаТабличнойЧасти.Количество   = Выборка.КоличествоПоСерии;
			СтрокаТабличнойЧасти.ИНАГРО_Ордер = ДокументОснование;
			
			Склад = ?(Объект.ИНАГРО_ВидПоступления = Перечисления.ИНАГРО_ВидыПоступленияТоваров.ПоОрдеру, ДокументОснование.Склад, Объект.Склад);
			
			ДанныеОбъекта = Новый Структура("Дата, Организация, ВидОперации");
			ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект); 
			ДанныеОбъекта.Вставить("Склад", Склад);
			ДанныеОбъекта.Вставить("ЭтоКомиссия", (Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ПокупкаКомиссия)
					И (ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ДоговорКонтрагента, "ВидДоговора")
						= Перечисления.ВидыДоговоровКонтрагентов.СКомитентом));
			
			СчетаУчета = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаУчетаНоменклатуры(Объект.Организация, СтрокаТабличнойЧасти.Номенклатура, Склад);
            
			ЗаполнитьЦенуВозвратнойТарыТабЧасти(Объект, СтрокаТабличнойЧасти);
			
			ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(ДанныеОбъекта, СтрокаТабличнойЧасти, "ВозвратнаяТара", СчетаУчета);
			
			СтрокаТабличнойЧасти.Сумма = СтрокаТабличнойЧасти.Цена * СтрокаТабличнойЧасти.Количество; 
			
		КонецЕсли;

	КонецЦикла; 
	
КонецПроцедуры

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти
	
#Область ПроцедурыИФункцииПечати

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	// Приходная накладная
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "Накладная";
	КомандаПечати.Представление = НСтр("ru='Приходная накладная';uk='Прибуткова накладна'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечати";
	КомандаПечати.СписокФорм    = "ФормаСписка,ФормаВыбора,ФормаДокументаОбщая";
	
	// М-4 (приходный ордер)
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "М4";
	КомандаПечати.Представление = НСтр("ru='Приходный ордер (М-4)';uk='Прибутковий ордер (М-4)'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечати";
	КомандаПечати.СписокФорм    = "ФормаСписка,ФормаВыбора,ФормаДокументаОбщая";

	// Реестр документов
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "Реестр";
	КомандаПечати.Представление = НСтр("ru='Реестр документов';uk='Реєстр документів'");
	КомандаПечати.ЗаголовокФормы= НСтр("ru='Реестр документов ""Поступление товаров и услуг""';uk='Реєстр документів ""Надходження товарів і послуг""'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечатиРеестраДокументов";
	КомандаПечати.СписокФорм    = "ФормаСписка";
	КомандаПечати.Порядок       = 100;
	
КонецПроцедуры

// Функция формирует табличный документ с печатной формой накладной,
// разработанной методистами
//
// Возвращаемое значение:
//  Табличный документ - печатная форма накладной
//
Функция ПечатьПоступлениеТоваров(МассивОбъектов, ОбъектыПечати, ПараметрыВывода)
	УстановитьПривилегированныйРежим(Истина);
	
	ДопКолонка = Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
	Если ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул Тогда
		ВыводитьКоды    = Истина;
		Колонка         = "Артикул";
		ТекстКодАртикул = "Артикул";
	ИначеЕсли ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Код Тогда
		ВыводитьКоды    = Истина;
		Колонка         = "Код";
		ТекстКодАртикул = "Код";
	Иначе
		ВыводитьКоды    = Ложь;
		Колонка         = "";
		ТекстКодАртикул = "Код";
	КонецЕсли;

	Если ВыводитьКоды Тогда
		ОбластьШапки  = "ШапкаСКодом";
		ОбластьСтроки = "СтрокаСКодом";
	Иначе
		ОбластьШапки  = "ШапкаТаблицы";
		ОбластьСтроки = "Строка";
	КонецЕсли;
	
	ЗапросШапка = Новый Запрос;
	ЗапросШапка.Текст =
	"ВЫБРАТЬ
	|	Номер,
	|	Дата,     	
	|	ДоговорКонтрагента,
	|	ДоговорКонтрагента.Дата  		КАК ДоговорДата,
	|	ДоговорКонтрагента.Номер 		КАК ДоговорНомер,
	|	ДоговорКонтрагента.НаименованиеДляПечати КАК ДоговорНаименованиеДляПечати,
	|	ДоговорКонтрагента.ВидДоговора  КАК ВидДоговораКонтрагента,
	|	Ответственный.ФизическоеЛицо.Наименование КАК Получил,
	|	Организация,
	|	Склад,
	|	Склад.ТипСклада КАК ТипСклада,
	|	Контрагент  КАК Поставщик,
	|	Организация КАК Покупатель,
	|	Сделка,
	|	СуммаДокумента,
	|	ВалютаДокумента,
	|	СуммаВключаетНДС
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг КАК ПоступлениеТоваровУслуг
	|
	|ГДЕ
	|	ПоступлениеТоваровУслуг.Ссылка = &ТекущийДокумент";

	
	ЗапросТЧТовары = Новый Запрос;
	ЧастьЗапросаДляВыбораСодержанияУслуг = ОбщегоНазначенияБПВызовСервера.ПолучитьЧастьЗапросаДляВыбораСодержанияУслуг("ПоступлениеТоваровУслуг");
	ЗапросТЧТовары.Текст =
	"ВЫБРАТЬ
	|	Номенклатура,
	|	Номенклатура.НаименованиеПолное КАК Товар,
	|	Номенклатура.Код КАК Код,
	|	Номенклатура."+ ТекстКодАртикул + " КАК КодАртикул,
	|	Количество,
	|	ЕдиницаИзмерения.Наименование КАК ЕдиницаИзмерения,
	|	Цена,
	|	Сумма,
	|	СуммаНДС,
	|   НомерСтроки,
	|	1 КАК ID
	|ИЗ 
	|	(ВЫБРАТЬ
	|		Номенклатура         КАК Номенклатура,
	|		ЕдиницаИзмерения     КАК ЕдиницаИзмерения,
	|		Цена                 КАК Цена,
	|		СтавкаНДС            КАК СтавкаНДС,
	|		СУММА(Количество)    КАК Количество,
	|		СУММА(Сумма)         КАК Сумма,
	|		СУММА(СуммаНДС)      КАК СуммаНДС,
	|		МИНИМУМ(НомерСтроки) КАК НомерСтроки
	|	ИЗ
	|		Документ.ПоступлениеТоваровУслуг.Товары КАК ПоступлениеТоваровУслуг
	|	ГДЕ
	|		ПоступлениеТоваровУслуг.Ссылка = &ТекущийДокумент
	|	СГРУППИРОВАТЬ ПО
	|		Номенклатура,
	|		ЕдиницаИзмерения,
	|		Цена,
	|		СтавкаНДС
	|	) КАК ВложенныйЗапросПоТоварам
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	" + ЧастьЗапросаДляВыбораСодержанияУслуг + ",
	|	" + ЧастьЗапросаДляВыбораСодержанияУслуг + ",
	|	Номенклатура.Код КАК Код,
	|	Номенклатура."+ ТекстКодАртикул + " КАК КодАртикул,
	|	Количество,
	|	Номенклатура.БазоваяЕдиницаИзмерения.Наименование,
	|	Цена,
	|	Сумма,
	|	СуммаНДС,
	|	НомерСтроки,
	|	2
	|	
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг.Услуги КАК ПоступлениеТоваровУслуг
	|
	|ГДЕ
	|	ПоступлениеТоваровУслуг.Ссылка = &ТекущийДокумент
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Номенклатура,
	|	Номенклатура.НаименованиеПолное КАК Товар,
	|	Номенклатура.Код КАК Код,
	|	Номенклатура."+ ТекстКодАртикул + " КАК КодАртикул,
	|	Количество,
	|	ЕдиницаИзмерения.Наименование КАК ЕдиницаИзмерения,
	|	Цена,
	|	Сумма,
	|	СуммаНДС,
	|   НомерСтроки,
	|	3 КАК ID
	|ИЗ 
	|	(ВЫБРАТЬ
	|		Номенклатура         КАК Номенклатура,
	|		ЕдиницаИзмерения     КАК ЕдиницаИзмерения,
	|		Цена                 КАК Цена,
	|		СтавкаНДС            КАК СтавкаНДС,
	|		СУММА(Количество)    КАК Количество,
	|		СУММА(Сумма)         КАК Сумма,
	|		СУММА(СуммаНДС)      КАК СуммаНДС,
	|		МИНИМУМ(НомерСтроки) КАК НомерСтроки
	|	ИЗ
	|		Документ.ПоступлениеТоваровУслуг.Оборудование КАК ПоступлениеТоваровУслуг
	|	ГДЕ
	|		ПоступлениеТоваровУслуг.Ссылка = &ТекущийДокумент
	|	СГРУППИРОВАТЬ ПО
	|		Номенклатура,
	|		ЕдиницаИзмерения,
	|		Цена,
	|		СтавкаНДС
	|	) КАК ВложенныйЗапросПоТоварам
	|
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОбъектСтроительства,
	|	ОбъектСтроительства,
	|	NULL КАК Код,
	|	NULL КАК КодАртикул,
	|	1,
	|	NULL,
	|	Сумма,
	|	Сумма,
	|	СуммаНДС,
	|	НомерСтроки,
	|	4
	|	
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг.ОбъектыСтроительства КАК ПоступлениеТоваровУслуг
	|
	|ГДЕ
	|	ПоступлениеТоваровУслуг.Ссылка = &ТекущийДокумент
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПоступлениеТоваровУслуг.Номенклатура,
	|	ПоступлениеТоваровУслуг.Номенклатура,
	|	Номенклатура.Код КАК Код,
	|	Номенклатура."+ ТекстКодАртикул + " КАК КодАртикул,
	|	Количество,
	|	Номенклатура.БазоваяЕдиницаИзмерения.Наименование КАК ЕдиницаИзмерения,
	|	Цена,
	|	Сумма,
	|	СуммаНДС,
	|	НомерСтроки,
	|	5
	|	
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг.БланкиСтрогогоУчета КАК ПоступлениеТоваровУслуг
	|
	|ГДЕ
	|	ПоступлениеТоваровУслуг.Ссылка = &ТекущийДокумент
	|
	|УПОРЯДОЧИТЬ ПО
	|	ID,
	|	НомерСтроки
	|";

	ЗапросТЧТара = Новый Запрос;
	ЗапросТЧТара.Текст = "ВЫБРАТЬ
				   |	ВложенныйЗапрос.Номенклатура,
				   |	ВложенныйЗапрос.Номенклатура.НаименованиеПолное КАК Товар,
				   |	ВложенныйЗапрос.Номенклатура."+ ТекстКодАртикул + " КАК КодАртикул,
				   |	ВложенныйЗапрос.Количество,
				   |	ВложенныйЗапрос.ЕдиницаИзмерения,
				   |	ВложенныйЗапрос.Цена,
				   |	ВложенныйЗапрос.Сумма,
				   |	ВложенныйЗапрос.НомерСтроки КАК НомерСтроки
				   |ИЗ
				   |	(ВЫБРАТЬ
				   |		ПоступлениеТоваровУслуг.Номенклатура КАК Номенклатура,
				   |		ПоступлениеТоваровУслуг.Номенклатура.БазоваяЕдиницаИзмерения.Наименование КАК ЕдиницаИзмерения,
				   |		ПоступлениеТоваровУслуг.Цена КАК Цена,
				   |		СУММА(ПоступлениеТоваровУслуг.Количество) КАК Количество,
				   |		СУММА(ПоступлениеТоваровУслуг.Сумма) КАК Сумма,
				   |		МИНИМУМ(ПоступлениеТоваровУслуг.НомерСтроки) КАК НомерСтроки
				   |	ИЗ
				   |		Документ.ПоступлениеТоваровУслуг.ВозвратнаяТара КАК ПоступлениеТоваровУслуг
				   |	
				   |	ГДЕ
				   |		ПоступлениеТоваровУслуг.Ссылка = &ТекущийДокумент
				   |	
				   |	СГРУППИРОВАТЬ ПО
				   |		ПоступлениеТоваровУслуг.Номенклатура,
				   |		ПоступлениеТоваровУслуг.Цена) КАК ВложенныйЗапрос
				   |
				   |УПОРЯДОЧИТЬ ПО
				   |	НомерСтроки";
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПоступлениеТоваровУслуг_Накладная";

	Макет = ПолучитьМакет("ПФ_MXL_Накладная");
	
	// печать производится на языке, указанном в настройках пользователя
	КодЯзыкаПечать = ПараметрыВывода.КодЯзыкаДляМногоязычныхПечатныхФорм;
	Макет.КодЯзыкаМакета = КодЯзыкаПечать;

	
	ПервыйДокумент = Истина;
	
	Для каждого Ссылка Из МассивОбъектов Цикл	
		
		Если Не ПервыйДокумент Тогда
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		// Запомним номер строки, с которой начали выводить текущий документ.
		НомерСтрокиНачало = ТабДокумент.ВысотаТаблицы + 1;
		
        // шапка
		ЗапросШапка.УстановитьПараметр("ТекущийДокумент", Ссылка);
		Шапка = ЗапросШапка.Выполнить().Выбрать();
		Шапка.Следующий();
		// ТЧ печатной формы
		ЗапросТЧТовары.УстановитьПараметр("ТекущийДокумент", Ссылка);
		ЗапросТЧТовары.УстановитьПараметр("ПустаяЕдиницаИзмерения", Справочники.КлассификаторЕдиницИзмерения.ПустаяСсылка());
		ЗапросТовары = ЗапросТЧТовары.Выполнить().Выгрузить();
		// ТЧ тары печатной формы
		ЗапросТЧТара.УстановитьПараметр("ТекущийДокумент", Ссылка);
		ЗапросТара = ЗапросТЧТара.Выполнить().Выгрузить();	

		УчитыватьНДС = УчетнаяПолитика.ПлательщикНДС(Шапка.Организация, Шапка.Дата);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
		Если Шапка.ВидДоговораКонтрагента = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом  Тогда
			ОбластьМакета.Параметры.ТекстЗаголовка = ОбщегоНазначенияБПВызовСервера.СформироватьЗаголовокДокумента(Шапка, НСтр("ru='Приходная накладная (на комиссию)';uk='Прибуткова накладна (на комісію)'",КодЯзыкаПечать),КодЯзыкаПечать);
		Иначе	
			ОбластьМакета.Параметры.ТекстЗаголовка = ОбщегоНазначенияБПВызовСервера.СформироватьЗаголовокДокумента(Шапка, НСтр("ru='Приходная накладная';uk='Прибуткова накладна'",КодЯзыкаПечать),КодЯзыкаПечать);
		КонецЕсли; 

		ТабДокумент.Вывести(ОбластьМакета);

		СведенияОПокупателе = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Шапка.Покупатель, Шапка.Дата,,,КодЯзыкаПечать);
		СведенияОПоставщике = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Шапка.Поставщик, Шапка.Дата,,,КодЯзыкаПечать);

		ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");
		ОбластьМакета.Параметры.Заполнить(Шапка);
		ОбластьМакета.Параметры.ПредставлениеПоставщика = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОПоставщике, "ПолноеНаименование,",,КодЯзыкаПечать);	
		ОбластьМакета.Параметры.РеквизитыПоставщика =     ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОПоставщике, "НомерСчета,Банк,МФО,/,ЮридическийАдрес,Телефоны,/,КодПоЕДРПОУ,КодПоДРФО,ИНН,НомерСвидетельства,",,КодЯзыкаПечать);
		ТабДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Покупатель");
		ОбластьМакета.Параметры.Заполнить(Шапка);
	 	ОбластьМакета.Параметры.ПредставлениеПокупателя = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОПокупателе, "ПолноеНаименование,",,КодЯзыкаПечать);
		ОбластьМакета.Параметры.РеквизитыПокупателя		= ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОПокупателе, "НомерСчета,Банк,МФО,/,ЮридическийАдрес,Телефоны,/,КодПоЕДРПОУ,КодПоДРФО,ИНН,НомерСвидетельства,",,КодЯзыкаПечать);
		ТабДокумент.Вывести(ОбластьМакета);

		// Выводим дополнительно информацию о договоре и сделке
		СписокДополнительныхПараметров = "ДоговорНаименованиеДляПечати,Сделка,Склад,";
		МассивСтруктурСтрок = ОбщегоНазначенияБПВызовСервера.ДополнительнаяИнформация(Шапка,СписокДополнительныхПараметров,КодЯзыкаПечать);
		ОбластьМакета = Макет.ПолучитьОбласть("ДопИнформация");
		Для каждого СтруктураСтроки Из МассивСтруктурСтрок Цикл
			ОбластьМакета.Параметры.Заполнить(СтруктураСтроки);
			ТабДокумент.Вывести(ОбластьМакета);
		КонецЦикла;
		
		// Вывести табличную часть
		ОбластьМакета = Макет.ПолучитьОбласть(ОбластьШапки);
		Суффикс = "";
		
		Если УчитыватьНДС Тогда
			Если Шапка.СуммаВключаетНДС Тогда
				Суффикс  = Суффикс  + НСтр("ru=' с ';uk=' з '",КодЯзыкаПечать);
			Иначе	
				Суффикс  = Суффикс  + НСтр("ru=' без ';uk=' без '",КодЯзыкаПечать);
			КонецЕсли;
			Суффикс = Суффикс  + НСтр("ru='НДС';uk='ПДВ'",КодЯзыкаПечать);
		КонецЕсли;
		ОбластьМакета.Параметры.Цена  = НСтр("ru='Цена';uk='Ціна'",КодЯзыкаПечать) + Суффикс;
		ОбластьМакета.Параметры.Сумма = НСтр("ru='Сумма';uk='Сума'",КодЯзыкаПечать)+ Суффикс;
		Если ВыводитьКоды Тогда
			ОбластьМакета.Параметры.ИмяКодАртикул = ТекстКодАртикул;
		КонецЕсли;
		ТабДокумент.Вывести(ОбластьМакета);

		ОбластьМакета = Макет.ПолучитьОбласть(ОбластьСтроки);
		
		Сумма    = 0;
		СуммаНДС = 0;
		
		ЭтоНТТ = (Шапка.ТипСклада = Перечисления.ТипыСкладов.НеавтоматизированнаяТорговаяТочка);
		
		Для каждого ВыборкаСтрокТовары Из ЗапросТовары Цикл 


			ОбластьМакета.Параметры.Заполнить(ВыборкаСтрокТовары);
			ОбластьМакета.Параметры.Товар 		= СокрЛП(ВыборкаСтрокТовары.Товар);
			ОбластьМакета.Параметры.НомерСтроки = ЗапросТовары.Индекс(ВыборкаСтрокТовары) + 1;
			
			Если НЕ ЗначениеЗаполнено(ВыборкаСтрокТовары.Номенклатура) Тогда
				Если НЕ ЭтоНТТ Тогда
					Сообщить(НСтр("ru='В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.';uk='В одному з рядків не заповнене значення номенклатури - рядок під час друку буде пропущений.'"), СтатусСообщения.Важное);
					Продолжить;
				Иначе	
					// для НТТ при отсутствии номенклатуры печатаем некий текст
					ОбластьМакета.Параметры.Товар = НСтр("ru='Товары в ассортименте';uk='Товари в асортименті'",КодЯзыкаПечать);
				КонецЕсли;
			КонецЕсли;
			
			ТабДокумент.Вывести(ОбластьМакета);

			Сумма          = Сумма       + ВыборкаСтрокТовары.Сумма;
			СуммаНДС       = СуммаНДС    + ВыборкаСтрокТовары.СуммаНДС;

		КонецЦикла;

		// Вывести Итого
		ОбластьМакета = Макет.ПолучитьОбласть("Итого");
		ОбластьМакета.Параметры.Всего = ОбщегоНазначенияБПВызовСервера.ФорматСумм(Сумма);
		ТабДокумент.Вывести(ОбластьМакета);

		Если УчитыватьНДС Тогда
			// НДС
			ОбластьМакета = Макет.ПолучитьОбласть("ИтогоНДС");
			ОбластьМакета.Параметры.ВсегоНДС = ОбщегоНазначенияБПВызовСервера.ФорматСумм(СуммаНДС,,"""");
			ОбластьМакета.Параметры.НДС      = ?(Шапка.СуммаВключаетНДС, НСтр("ru='В том числе НДС:';uk='У тому числі ПДВ:'",КодЯзыкаПечать), НСтр("ru='Сумма НДС:';uk='Сума ПДВ:'",КодЯзыкаПечать));
			ТабДокумент.Вывести(ОбластьМакета);
			
			// всего с НДС (если сумма не включает НДС)
			Если НЕ Шапка.СуммаВключаетНДС Тогда
				ОбластьМакета = Макет.ПолучитьОбласть("ИтогоНДС");
				ОбластьМакета.Параметры.ВсегоНДС = ОбщегоНазначенияБПВызовСервера.ФорматСумм(Сумма + СуммаНДС);
				ОбластьМакета.Параметры.НДС      = НСтр("ru='Всего с НДС:';uk='Всього із ПДВ:'",КодЯзыкаПечать);
				ТабДокумент.Вывести(ОбластьМакета);
			КонецЕсли;
		КонецЕсли;

		// выведем таблицу с возвратной тарой
		Если ЗапросТара.Количество() > 0 Тогда
			
			Если ВыводитьКоды Тогда
				ОбластьШапки  = "ШапкаТаблицыТараСКодом";
				ОбластьСтроки = "СтрокаТараСКодом";
			Иначе
				ОбластьШапки  = "ШапкаТаблицыТара";
				ОбластьСтроки = "СтрокаТара";
			КонецЕсли;
			
			// сделаем отступ от основной таблицы
			ОбластьПробел = Макет.ПолучитьОбласть("Пробел");
			ТабДокумент.Вывести(ОбластьПробел);
			
			ОбластьМакета = Макет.ПолучитьОбласть(ОбластьШапки);
			Если ВыводитьКоды Тогда
				ОбластьМакета.Параметры.ИмяКодАртикул = ТекстКодАртикул;
			КонецЕсли;
			ТабДокумент.Вывести(ОбластьМакета);
			
			ОбластьМакета = Макет.ПолучитьОбласть(ОбластьСтроки);
			
			СуммаТара    = 0;
			
			Для каждого ВыборкаСтрокТара Из ЗапросТара Цикл 
				
				Если НЕ ЗначениеЗаполнено(ВыборкаСтрокТара.Номенклатура) Тогда
					Сообщить(НСтр("ru='В одной из строк не заполнено значение тары - строка при печати пропущена.';uk='В одному з рядків не заповнене значення тари - рядок під час друку буде пропущений.'"), СтатусСообщения.Важное);
					Продолжить;
				КонецЕсли;
				
				ОбластьМакета.Параметры.Заполнить(ВыборкаСтрокТара);
				ОбластьМакета.Параметры.НомерСтроки = ЗапросТара.Индекс(ВыборкаСтрокТара) + 1;
				ОбластьМакета.Параметры.Товар = СокрП(ВыборкаСтрокТара.Товар);			
				
				СуммаТара = СуммаТара + ВыборкаСтрокТара.Сумма;
				
				ТабДокумент.Вывести(ОбластьМакета);
				
			КонецЦикла;
			
			// Вывести Итого
			ОбластьМакета = Макет.ПолучитьОбласть("ИтогоТара");
			ОбластьМакета.Параметры.Всего = ОбщегоНазначенияБПВызовСервера.ФорматСумм(СуммаТара);
			ТабДокумент.Вывести(ОбластьМакета);
			
			// сделаем отступ 
			ТабДокумент.Вывести(ОбластьПробел);
		КонецЕсли;
		
		// Вывести Сумму прописью
		ОбластьМакета = Макет.ПолучитьОбласть("СуммаПрописью");
		СуммаКПрописи = Сумма + ?(Шапка.СуммаВключаетНДС, 0, СуммаНДС);
		ОбластьМакета.Параметры.ИтоговаяСтрока = НСтр("ru='Всего наименований ';uk='Всього найменувань '",КодЯзыкаПечать) + ЗапросТовары.Количество() + "," +
												 НСтр("ru=' на сумму ';uk=' на суму '",КодЯзыкаПечать)  + ОбщегоНазначенияБПВызовСервера.ФорматСумм(СуммаКПрописи, Шапка.ВалютаДокумента)
												 + ?(ЗапросТара.Количество() = 0, "",  НСтр("ru='; возвратная тара ';uk='; зворотна тара '",КодЯзыкаПечать) + ЗапросТара.Количество() + НСтр("ru=', на сумму ';uk=', на суму '",КодЯзыкаПечать) + ОбщегоНазначенияБПВызовСервера.ФорматСумм(СуммаТара, Шапка.ВалютаДокумента)) + ".";
												 
		ОбластьМакета.Параметры.СуммаПрописью  = ОбщегоНазначенияБПВызовСервера.СформироватьСуммуПрописью(СуммаКПрописи, Шапка.ВалютаДокумента,КодЯзыкаПечать)
																		+ ?(НЕ УчитыватьНДС, "", Символы.ПС + НСтр("ru='В т.ч. НДС: ';uk='У т.ч. ПДВ: '",КодЯзыкаПечать) + ОбщегоНазначенияБПВызовСервера.СформироватьСуммуПрописью(СуммаНДС, Шапка.ВалютаДокумента, КодЯзыкаПечать));

		ТабДокумент.Вывести(ОбластьМакета);

		// Вывести подписи
		ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
		ОбластьМакета.Параметры.Заполнить(Шапка);
		ТабДокумент.Вывести(ОбластьМакета);
		
		// В табличном документе зададим имя области, в которую был 
		// выведен объект. Нужно для возможности печати покомплектно.
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабДокумент, 
			НомерСтрокиНачало, ОбъектыПечати, Ссылка);

	КонецЦикла;	

	Возврат ТабДокумент;

КонецФункции // ПечатьПоступлениеТоваров()

// Функция формирует табличный документ унифицированной формы М-4
//
//
// Возвращаемое значение:
//  Табличный документ по форме М-4 (приходный ордер).
//
Функция ПечатьМ4(МассивОбъектов, ОбъектыПечати, ПараметрыВывода)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДопКолонка = Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
	Если Не ЗначениеЗаполнено(ДопКолонка) Тогда
		ДопКолонка = "Код";
	КонецЕсли;
	
	ЗапросШапка = Новый Запрос;
	ЗапросШапка.Текст =
	"ВЫБРАТЬ
	|	Номер,
	|	Дата,     	
	|	ДоговорКонтрагента,
	|	ДоговорКонтрагента.Дата  		КАК ДоговорДата,
	|	ДоговорКонтрагента.Номер 		КАК ДоговорНомер,
	|	НомерВходящегоДокумента    		КАК НомерСопроводительногоДокумента,
	|	ДоговорКонтрагента.НаименованиеДляПечати КАК ДоговорНаименованиеДляПечати,
	|	ДоговорКонтрагента.ВидДоговора  КАК ВидДоговораКонтрагента,
	|	Ответственный.ФизическоеЛицо.Наименование КАК Получил,
	|	Организация,
	|	Склад,
	|	Склад.ТипСклада КАК ТипСклада,
	|	Контрагент  КАК Поставщик,
	|	Организация КАК Покупатель,
	|	Сделка,
	|	СуммаДокумента,
	|	ВалютаДокумента,
	|	СуммаВключаетНДС
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг КАК ПоступлениеТоваровУслуг
	|
	|ГДЕ
	|	ПоступлениеТоваровУслуг.Ссылка = &ТекущийДокумент";
	
	ЗапросТЧТовары = Новый Запрос;
	ЧастьЗапросаДляВыбораСодержанияУслуг = ОбщегоНазначенияБПВызовСервера.ПолучитьЧастьЗапросаДляВыбораСодержанияУслуг("ПоступлениеТоваровУслуг");
	ЗапросТЧТовары.Текст =
	"ВЫБРАТЬ
	|	Номенклатура,
	|	Номенклатура.НаименованиеПолное КАК Товар,
	|	ВЫБОР КОГДА &КолонкаКодов = ""Артикул"" ТОГДА
	|		Номенклатура.Артикул
	|	ИНАЧЕ
	|		Номенклатура.Код
	|	КОНЕЦ ТоварКод,
	|	Количество КАК КоличествоПринято,
	|	ЕдиницаИзмерения.Наименование КАК ЕдиницаИзмеренияНаименование,
	|	ЕдиницаИзмерения.Код КАК ЕдиницаИзмеренияКод,
	|	Цена,
	|	Сумма,
	|	СуммаНДС,
	|   НомерСтроки,
	|	1 КАК ID
	|ИЗ 
	|	(ВЫБРАТЬ
	|		Номенклатура         КАК Номенклатура,
	|		ЕдиницаИзмерения     КАК ЕдиницаИзмерения,
	|		Цена                 КАК Цена,
	|		СтавкаНДС            КАК СтавкаНДС,
	|		СУММА(Количество)    КАК Количество,
	|		СУММА(Сумма)         КАК Сумма,
	|		СУММА(СуммаНДС)      КАК СуммаНДС,
	|		МИНИМУМ(НомерСтроки) КАК НомерСтроки
	|	ИЗ
	|		Документ.ПоступлениеТоваровУслуг.Товары КАК ПоступлениеТоваровУслуг
	|	ГДЕ
	|		ПоступлениеТоваровУслуг.Ссылка = &ТекущийДокумент
	|	СГРУППИРОВАТЬ ПО
	|		Номенклатура,
	|		ЕдиницаИзмерения,
	|		Цена,
	|		СтавкаНДС
	|	) КАК ВложенныйЗапросПоТоварам
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Номенклатура,
	|	Номенклатура.НаименованиеПолное КАК Товар,
	|	ВЫБОР КОГДА &КолонкаКодов = ""Артикул"" ТОГДА
	|		Номенклатура.Артикул
	|	ИНАЧЕ
	|		Номенклатура.Код
	|	КОНЕЦ КАК ТоварКод,
	|	Количество КАК КоличествоПринято,
	|	ЕдиницаИзмерения.Наименование КАК ЕдиницаИзмеренияНаименование,
	|	ЕдиницаИзмерения.Код КАК ЕдиницаИзмеренияКод,
	|	Цена,
	|	Сумма,
	|	СуммаНДС,
	|   НомерСтроки,
	|	2 КАК ID
	|ИЗ 
	|	(ВЫБРАТЬ
	|		Номенклатура         КАК Номенклатура,
	|		ЕдиницаИзмерения     КАК ЕдиницаИзмерения,
	|		Цена                 КАК Цена,
	|		СтавкаНДС            КАК СтавкаНДС,
	|		СУММА(Количество)    КАК Количество,
	|		СУММА(Сумма)         КАК Сумма,
	|		СУММА(СуммаНДС)      КАК СуммаНДС,
	|		МИНИМУМ(НомерСтроки) КАК НомерСтроки
	|	ИЗ
	|		Документ.ПоступлениеТоваровУслуг.Оборудование КАК ПоступлениеТоваровУслуг
	|	ГДЕ
	|		ПоступлениеТоваровУслуг.Ссылка = &ТекущийДокумент
	|	СГРУППИРОВАТЬ ПО
	|		Номенклатура,
	|		ЕдиницаИзмерения,
	|		Цена,
	|		СтавкаНДС
	|	) КАК ВложенныйЗапросПоТоварам
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Номенклатура,
	|	Номенклатура.НаименованиеПолное КАК Товар,
	|	ВЫБОР КОГДА &КолонкаКодов = ""Артикул"" ТОГДА
	|		Номенклатура.Артикул
	|	ИНАЧЕ
	|		Номенклатура.Код
	|	КОНЕЦ КАК Код,
	|	Количество КАК КоличествоПринято,
	|	ЕдиницаИзмерения.Наименование КАК ЕдиницаИзмеренияНаименование,
	|	ЕдиницаИзмерения.Код КАК ЕдиницаИзмеренияКод,
	|	Цена,
	|	Сумма,
	|	0 КАК СуммаНДС,
	|	НомерСтроки,
	|	3 КАК ID
	|ИЗ
	|	(ВЫБРАТЬ
	|		Номенклатура КАК Номенклатура,
	|		Номенклатура.БазоваяЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|		Цена КАК Цена,
	|		СУММА(Количество) КАК Количество,
	|		СУММА(Сумма) КАК Сумма,
	|		МИНИМУМ(НомерСтроки) КАК НомерСтроки
	|	ИЗ
	|		Документ.ПоступлениеТоваровУслуг.ВозвратнаяТара КАК ПоступлениеТоваровУслуг
	|	
	|	ГДЕ
	|		ПоступлениеТоваровУслуг.Ссылка = &ТекущийДокумент
	|	
	|	СГРУППИРОВАТЬ ПО
	|		Номенклатура,
	|		Цена
	|	) КАК ВложенныйЗапросПоТоварам
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПоступлениеТоваровУслуг.Номенклатура,
	|	ПоступлениеТоваровУслуг.Номенклатура,
	|	ВЫБОР КОГДА &КолонкаКодов = ""Артикул"" ТОГДА
	|		Номенклатура.Артикул
	|	ИНАЧЕ
	|		Номенклатура.Код
	|	КОНЕЦ КАК Код,
	|	Количество КАК КоличествоПринято,
	|	Номенклатура.БазоваяЕдиницаИзмерения.Наименование КАК ЕдиницаИзмеренияНаименование,
	|	Номенклатура.БазоваяЕдиницаИзмерения.Код КАК ЕдиницаИзмеренияКод,
	|	Цена,
	|	Сумма,
	|	СуммаНДС,
	|	НомерСтроки,
	|	5
	|	
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг.БланкиСтрогогоУчета КАК ПоступлениеТоваровУслуг
	|
	|ГДЕ
	|	ПоступлениеТоваровУслуг.Ссылка = &ТекущийДокумент
	|
	|УПОРЯДОЧИТЬ ПО
	|	ID,
	|	НомерСтроки
	|";
	
	// Зададим параметры макета
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	ТабДокумент.АвтоМасштаб = Истина;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_М4";
	
	КодЯзыкаПечать = "uk";
	Макет = УправлениеПечатью.МакетПечатнойФормы("ОбщийМакет.ПФ_MXL_UK_М4");
	
	ПервыйДокумент = Истина;
	
	Для каждого Ссылка Из МассивОбъектов Цикл	
		
		Если Не ПервыйДокумент Тогда
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		// Запомним номер строки, с которой начали выводить текущий документ.
		НомерСтрокиНачало = ТабДокумент.ВысотаТаблицы + 1;
		
		// шапка
		ЗапросШапка.УстановитьПараметр("ТекущийДокумент", Ссылка);
		Шапка = ЗапросШапка.Выполнить().Выбрать();
		Шапка.Следующий();
		// ТЧ печатной формы
		ЗапросТЧТовары.УстановитьПараметр("ТекущийДокумент", Ссылка);
		ЗапросТЧТовары.УстановитьПараметр("ПустаяЕдиницаИзмерения", Справочники.КлассификаторЕдиницИзмерения.ПустаяСсылка());
		ЗапросТЧТовары.УстановитьПараметр("КолонкаКодов", ДопКолонка);
		
		ЗапросТовары = ЗапросТЧТовары.Выполнить().Выгрузить();
		Если ЗапросТовары.Количество()= 0 Тогда
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='В документе %1 отсутствуют товары. Печать приходного ордера не требуется';uk='У документі %1 відсутні товари. Друк прибуткового ордера не потрібний'"),
			Ссылка);
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			Текст,
			Ссылка);
			Продолжить;
			
		КонецЕсли;	
		
		СуммаВключаетНДС = Шапка.СуммаВключаетНДС;
		СведенияОПокупателе = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Шапка.Покупатель, Шапка.Дата,,,КодЯзыкаПечать);
		СведенияОПоставщике     = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Шапка.Поставщик, Шапка.Дата,,,КодЯзыкаПечать);
		ПредставлениеПоставщика = СведенияОПоставщике.ПолноеНаименование;
		НомерДокумента = ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(Шапка.Номер, Ложь, Истина);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
		
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("ПредставлениеОрганизации", ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОПокупателе, "ПолноеНаименование,",,КодЯзыкаПечать));
		СтруктураПараметров.Вставить("КодПоЕДРПОУ", СведенияОПокупателе.КодПоЕДРПОУ);
		СтруктураПараметров.Вставить("НомерДокумента", НомерДокумента);
		
		ОбластьМакета.Параметры.Заполнить(СтруктураПараметров);
		ТабДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("ЗаголовокДокумента");
		
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("НомерДокумента", НомерДокумента);
		СтруктураПараметров.Вставить("ДатаСоставления", Шапка.Дата);
		СтруктураПараметров.Вставить("СкладНаименование", Шапка.Склад);
		СтруктураПараметров.Вставить("НомерСопроводительногоДокумента", Шапка.НомерСопроводительногоДокумента);		
		СтруктураПараметров.Вставить("ПоставщикНаименование", ПредставлениеПоставщика);
		
		ОбластьМакета.Параметры.Заполнить(СтруктураПараметров);
		
		ТабДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
		ТабДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Строка");
		
		ЭтоНТТ = (Шапка.ТипСклада = Перечисления.ТипыСкладов.НеавтоматизированнаяТорговаяТочка);
		
		Для каждого ВыборкаСтрокТовары Из ЗапросТовары Цикл 
			
			ОбластьМакета.Параметры.Заполнить(ВыборкаСтрокТовары);
			ОбластьМакета.Параметры.ТоварНаименование 		= СокрЛП(ВыборкаСтрокТовары.Товар);

			Если СуммаВключаетНДС Тогда
				ОбластьМакета.Параметры.СуммаСНДС       = ВыборкаСтрокТовары.Сумма;
			Иначе
				ОбластьМакета.Параметры.СуммаСНДС       = ВыборкаСтрокТовары.Сумма + ВыборкаСтрокТовары.СуммаНДС;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ВыборкаСтрокТовары.Номенклатура) Тогда
				Если НЕ ЭтоНТТ Тогда
					Сообщить(НСтр("ru='В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.';uk='В одному з рядків не заповнене значення номенклатури - рядок під час друку буде пропущений.'"), СтатусСообщения.Важное);
					Продолжить;
				Иначе	
					// для НТТ при отсутствии номенклатуры печатаем некий текст
					ОбластьМакета.Параметры.ТоварНаименование = НСтр("ru='Товары в ассортименте';uk='Товари в асортименті'",КодЯзыкаПечать);
				КонецЕсли;
			КонецЕсли;
			
			ТабДокумент.Вывести(ОбластьМакета);
			
		КонецЦикла;
		
		ОбластьМакета = Макет.ПолучитьОбласть("Подвал");
		ОбластьМакета.Параметры.КладовщикПринявшийТоварДолжностьФИО       = Шапка.Получил;
		ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		ТабДокумент.Вывести(ОбластьМакета);
		
	КонецЦикла;
	
	Возврат ТабДокумент;
	
КонецФункции

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходмое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	ПараметрыВывода.ДоступнаПечатьПоКомплектно = Истина;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "Накладная") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "Накладная", НСтр("ru='Приходная накладная';uk='Прибуткова накладна'"), 
			ПечатьПоступлениеТоваров(МассивОбъектов, ОбъектыПечати, ПараметрыВывода),,"Документ.ПоступлениеТоваровУслуг.ПФ_MXL_Накладная", , Истина);
	КонецЕсли;
		
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "М4") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "М4", НСтр("ru='Приходный ордер (М-4)';uk='Прибутковий ордер (М-4)'"), 
			ПечатьМ4(МассивОбъектов, ОбъектыПечати, ПараметрыВывода),,"ОбщийМакет.ПФ_MXL_UK_М4");
	КонецЕсли;
 	
КонецПроцедуры // Печать

Функция ПолучитьДополнительныеРеквизитыДляРеестра() Экспорт
	
	Результат = Новый Структура("Информация, НомерВходящегоДокумента, ДатаВходящегоДокумента",
		"Контрагент", "НомерВходящегоДокумента", "ДатаВходящегоДокумента");
	
	ПолеТовары = "Таб.Товары.Ссылка";
	Результат.Вставить("ЕстьТовары",          ПолеТовары);
	Результат.Вставить("ЕстьОборудование",    СтрЗаменить(ПолеТовары, "Товары", "Оборудование"));
	Результат.Вставить("ЕстьУслуги",          СтрЗаменить(ПолеТовары, "Товары", "Услуги"));
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПолучитьСоответствиеВидовОперацийФормам() Экспорт

	ФормыяПоступлениеТоваровУслуг = Новый Соответствие;
	ФормыяПоступлениеТоваровУслуг.Вставить(Перечисления.ВидыОперацийПоступлениеТоваровУслуг.БланкиСтрогогоУчета, 	"ФормаДокументаОбщая");
	ФормыяПоступлениеТоваровУслуг.Вставить(Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ВПереработку,	   		"ФормаДокументаОбщая");
	ФормыяПоступлениеТоваровУслуг.Вставить(Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Оборудование, 			"ФормаДокументаОбщая");
	ФормыяПоступлениеТоваровУслуг.Вставить(Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ОбъектыСтроительства, 	"ФормаДокументаОбщая");
	ФормыяПоступлениеТоваровУслуг.Вставить(Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ПокупкаКомиссия, 		"ФормаДокументаОбщая");
	
	Возврат ФормыяПоступлениеТоваровУслуг;

КонецФункции 
	
// Заполняет счета БУ в строке табличной части.
//
Процедура ЗаполнитьСчетаБУ(Объект, СтрокаТЧ, ИмяТабЧасти, СчетаУчета)

	Если ВРег(ИмяТабЧасти) = ВРег("Оборудование") Тогда
		
		СтрокаТЧ.СчетУчетаБУ  = СчетаУчета.СчетУчетаБУ;

	ИначеЕсли ВРег(ИмяТабЧасти) = ВРег("ВозвратнаяТара") Тогда
		
		СтрокаТЧ.СчетУчетаБУ  = СчетаУчета.СчетУчетаБУ;

	ИначеЕсли ВРег(ИмяТабЧасти) = ВРег("Услуги") Тогда
		
		СтрокаТЧ.СчетЗатрат   = СчетаУчета.СчетУчетаБУ;
		СтрокаТЧ.Субконто1    = СчетаУчета.СубконтоБУ1;
		СтрокаТЧ.Субконто2    = СчетаУчета.СубконтоБУ2;
		СтрокаТЧ.Субконто3    = СчетаУчета.СубконтоБУ3;
		
	ИначеЕсли ВРег(ИмяТабЧасти) = ВРег("БланкиСтрогогоУчета") Тогда
		
		СтрокаТЧ.СчетУчетаБУ  = СчетаУчета.СчетУчетаБУ;
		СтрокаТЧ.СчетУчетаЗабалансовыйБУ = СчетаУчета.СчетУчетаДоп;
	
	Иначе
		
		Если Объект.ЭтоКомиссия = Истина Тогда
			СтрокаТЧ.СчетУчетаБУ  = СчетаУчета.СчетУчетаДоп;

		ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ВПереработку Тогда
			СтрокаТЧ.СчетУчетаБУ  = СчетаУчета.СчетУчетаДавСырья;

		Иначе
			СтрокаТЧ.СчетУчетаБУ = СчетаУчета.СчетУчетаБУ;
			
		КонецЕсли;

	КонецЕсли;


КонецПроцедуры // ЗаполнитьСчетаБУ()

// Заполняет счета НУ в строке табличной части.
//
Процедура ЗаполнитьСчетаНУ(Объект, СтрокаТЧ, ИмяТабЧасти, СчетаУчета)
	
	Если    ВРег(ИмяТабЧасти) = Врег("Оборудование")
		ИЛИ ВРег(ИмяТабЧасти) = Врег("Товары")
		ИЛИ ВРег(ИмяТабЧасти) = Врег("НалоговоеНазначение")
		ИЛИ ВРег(ИмяТабЧасти) = Врег("ВозвратнаяТара")
		ИЛИ ВРег(ИмяТабЧасти) = Врег("Услуги")
		ИЛИ ВРег(ИмяТабЧасти) = Врег("БланкиСтрогогоУчета") Тогда
		СтрокаТЧ.НалоговоеНазначение 		= СчетаУчета.НалоговоеНазначение;
	КонецЕсли;
	
	Если ВРег(ИмяТабЧасти) = Врег("Услуги") Тогда
		СтрокаТЧ.НалоговоеНазначениеДоходовИЗатрат = СчетаУчета.НалоговоеНазначениеДоходовИЗатрат;
	КонецЕсли;

КонецПроцедуры // ЗаполнитьСчетаНУ()

// Процедура заполняет цену возвратной тары по ценам продажи в строке табличной части документа
//
// Параметры:
//  СтрокаТабличнойЧасти - строка табличной части документа,
//  ДокументОбъект       - объект редактируемого документа.
//
Процедура ЗаполнитьЦенуВозвратнойТарыТабЧасти(Объект, СтрокаТабличнойЧасти) // ИНАГРО

	Если НЕ ЗначениеЗаполнено(Объект.ТипЦен) Тогда 

		СтрокаТабличнойЧасти.Цена = 0;

	Иначе
		
		ДоговорКонтрагента = ?(ЗначениеЗаполнено(Объект.ДоговорКонтрагента), Объект.ДоговорКонтрагента, Справочники.ДоговорыКонтрагентов.ПустаяСсылка());
		
		// из регистра
		// Если не заполнен договор или валюта взаиморасчетов, то будем считать цену нулевой.
		Если НЕ ЗначениеЗаполнено(ДоговорКонтрагента.ВалютаВзаиморасчетов) Тогда
			Цена = 0;
		Иначе
			ЕдиницаТары = СтрокаТабличнойЧасти.Номенклатура.БазоваяЕдиницаИзмерения;

			Цена = Ценообразование.ПолучитьЦенуНоменклатуры(СтрокаТабличнойЧасти.Номенклатура,
															Объект.ТипЦен,
															Объект.Дата,
			                            					ДоговорКонтрагента.ВалютаВзаиморасчетов,
															Объект.КурсВзаиморасчетов,
			                            					Объект.КратностьВзаиморасчетов);
		КонецЕсли;

		// Если цену заполнили из регистра, то ее надо пересчитывать по флагам налогообложения
		// Считаем, что оценочную стоимость возвратной тары всегда задают с НДС
		// ставки бурутся из номенклатуры
		Если НЕ ЗначениеЗаполнено(Цена) Тогда
			СтрокаТабличнойЧасти.Цена = 0;
		Иначе
			СтрокаТабличнойЧасти.Цена = УчетНДСКлиентСервер.ПересчитатьЦенуПриИзмененииФлаговНалогов(Цена,
																									 Объект.ТипЦен.ЦенаВключаетНДС,
																									 Истина,
																									 УчетНДС.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.Номенклатура.СтавкаНДС));
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка)
	
	Если ВидФормы <> "ФормаДокумента"
		И ВидФормы <> "ФормаОбъекта" Тогда
		Возврат;
	КонецЕсли;

	ВидОперации = Неопределено; 

	Если Параметры.Свойство("Ключ") И ЗначениеЗаполнено(Параметры.Ключ) Тогда
		ВидОперации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Параметры.Ключ, "ВидОперации");
	КонецЕсли;

	// Если документ копируется, то вид формы получаем из копируемого документа.
	Если НЕ ЗначениеЗаполнено(ВидОперации) Тогда
		Если Параметры.Свойство("ЗначениеКопирования")
			И ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
			ВидОперации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
				Параметры.ЗначениеКопирования, "ВидОперации");
		КонецЕсли;
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(ВидОперации) Тогда
		Если Параметры.Свойство("ЗначенияЗаполнения") 
			И ТипЗнч(Параметры.ЗначенияЗаполнения) = Тип("Структура") Тогда
			Если Параметры.ЗначенияЗаполнения.Свойство("ВидОперации") Тогда
				ВидОперации = Параметры.ЗначенияЗаполнения.ВидОперации;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ВидОперации) Тогда
		Если Параметры.Свойство("Основание")
			И ЗначениеЗаполнено(Параметры.Основание) Тогда
			ВидОперации = ОпределитьВидОперацииПоДокументуОснованию(Параметры.Основание);
		КонецЕсли;
	КонецЕсли;

	СтандартнаяОбработка = Ложь;
	ФормыПоступлениеТоваровУслуг = ПолучитьСоответствиеВидовОперацийФормам();
	ВыбраннаяФорма = ФормыПоступлениеТоваровУслуг[ВидОперации];
	Если ВыбраннаяФорма = Неопределено Тогда
		ВыбраннаяФорма = "ФормаДокумента";
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#КонецЕсли