#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
Перем мВалютаРегламентированногоУчета;
Перем мУчетнаяПолитика;
Перем мИспользоватьОборотнуюНоменклатуру;
Перем мРазделятьПоСтавкамНДС;
Перем мУчетВПродажныхЦенах;
Перем ПартионныйУчетБУ;
Перем РозницаВПродажныхЦенах;

//////////////////////////////////////////////////////////////////////////////////
//// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА


// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТоварам - результат запроса по табличной части "Товары",
//  СтруктураШапкиДокумента   - структура, содержащая рексвизиты шапки документа и результаты запроса по шапке
//
// Возвращаемое значение:
//  Сформированная таблиица значений.
//
Функция ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента, ПогрешностиОкругления)

	ТаблицаТоваров = РезультатЗапросаПоТоварам.Выгрузить();
	
	ИНАГРО_Склад = ?(ИНАГРО_ВидПоступления = Перечисления.ИНАГРО_ВидыПоступленияТоваров.ПоОрдеру, СтруктураШапкиДокумента.Склад.Склад, СтруктураШапкиДокумента.Склад); // ИНАГРО 
	
	Если мУчетВПродажныхЦенах И (ИНАГРО_Склад.ТипСклада = Перечисления.ТипыСкладов.РозничныйМагазин) Тогда
		
		ТаблицаТоваров.Колонки.Добавить("РозничнаяЦена");
		ТаблицаТоваров.Колонки.Добавить("УчетнаяЦена");
		
		// Установим параметры запроса
		ПорядокСубконто = Новый Массив();
		ПорядокСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);
		ПорядокСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады);
		
		МассивНоменклатуры = ТаблицаТоваров.ВыгрузитьКолонку("Номенклатура");
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Склад",           СтруктураШапкиДокумента.Склад);
		Запрос.УстановитьПараметр("КонецПериода",    СтруктураШапкиДокумента.Дата);
		Запрос.УстановитьПараметр("Организация",     СтруктураШапкиДокумента.Организация);
		Запрос.УстановитьПараметр("Счет",     		 ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахАТТ);
		Запрос.УстановитьПараметр("ПорядокСубконто", ПорядокСубконто);
		Запрос.УстановитьПараметр("Номенклатура", 	 МассивНоменклатуры);
		
		Запрос.УстановитьПараметр("НалоговыеНазначения", ТаблицаТоваров.ВыгрузитьКолонку("НалоговоеНазначение"));
		
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Остатки.Субконто1 КАК Номенклатура,
		|	Остатки.НалоговоеНазначение КАК НалоговоеНазначение,
		|	СУММА(Остатки.СуммаОстатокДт) КАК СуммаОстаток,
		|	СУММА(Остатки.КоличествоОстатокДт) КАК КоличествоОстаток
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(
		|			&КонецПериода,
		|			Счет = &Счет,
		|			&ПорядокСубконто,
		|			НалоговоеНазначение В (&НалоговыеНазначения)
		|				И Организация = &Организация
		|				И Субконто1 В (&Номенклатура)
		|				И Субконто2 = &Склад) КАК Остатки
		|ГДЕ
		|	Остатки.КоличествоОстаток > 0
		|
		|СГРУППИРОВАТЬ ПО
		|	Остатки.Субконто1,
		|	Остатки.НалоговоеНазначение";
		
		ТаблицаУчетныхЦен = Запрос.Выполнить().Выгрузить();
		ТаблицаУчетныхЦен.Индексы.Добавить("Номенклатура, НалоговоеНазначение");

		Для Каждого Строка из ТаблицаТоваров Цикл
			НайденныеСтроки = ТаблицаУчетныхЦен.НайтиСтроки(Новый Структура("Номенклатура, НалоговоеНазначение", Строка.Номенклатура, Строка.НалоговоеНазначение));
			Если НайденныеСтроки.Количество()> 0 Тогда
				СтрокаТаблицыЦен = НайденныеСтроки[0];
				Строка.УчетнаяЦена = Окр(?(СтрокаТаблицыЦен.КоличествоОстаток = 0, 0, СтрокаТаблицыЦен.СуммаОстаток / СтрокаТаблицыЦен.КоличествоОстаток),2,1);
			Иначе
				Строка.УчетнаяЦена = 0;
			КонецЕсли;
			Строка.РозничнаяЦена = Ценообразование.ПолучитьЦенуНоменклатуры(Строка.Номенклатура, СтруктураШапкиДокумента.Склад.ТипЦенРозничнойТорговли, 
															СтруктураШапкиДокумента.Дата, мВалютаРегламентированногоУчета, 1, 1);
		КонецЦикла;
	КонецЕсли;
	
	// ИНАГРО++
	Если мУчетВПродажныхЦенах И ИНАГРО_СкладВТЧ И РозницаВПродажныхЦенах Тогда
		
		ТаблицаТоваров.Колонки.Добавить("РозничнаяЦена");
		ТаблицаТоваров.Колонки.Добавить("УчетнаяЦена");
		
		// Установим параметры запроса
		ПорядокСубконто = Новый Массив();
		ПорядокСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);
		ПорядокСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады);
		
		МассивНоменклатуры = ТаблицаТоваров.ВыгрузитьКолонку("Номенклатура");
		МассивСкладов = ТаблицаТоваров.ВыгрузитьКолонку("Склад");
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("КонецПериода",    СтруктураШапкиДокумента.Дата);
		Запрос.УстановитьПараметр("Организация",     СтруктураШапкиДокумента.Организация);
		Запрос.УстановитьПараметр("Счет",     		 ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахАТТ);
		Запрос.УстановитьПараметр("ПорядокСубконто", ПорядокСубконто);
		Запрос.УстановитьПараметр("Номенклатура", 	 МассивНоменклатуры);
		Запрос.УстановитьПараметр("Склад", 	 		 МассивСкладов);
		
		Запрос.УстановитьПараметр("НалоговыеНазначения", ТаблицаТоваров.ВыгрузитьКолонку("НалоговоеНазначение"));		
		
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Остатки.Субконто1 КАК Номенклатура,
		|	Остатки.НалоговоеНазначение КАК НалоговоеНазначение,
		|	СУММА(Остатки.СуммаОстатокДт) КАК СуммаОстаток,
		|	СУММА(Остатки.КоличествоОстатокДт) КАК КоличествоОстаток,
		|	Остатки.Субконто2 КАК Склад
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(
		|			&КонецПериода,
		|			Счет = &Счет,
		|			&ПорядокСубконто,
		|			НалоговоеНазначение В (&НалоговыеНазначения)
		|				И Организация = &Организация
		|				И Субконто1 В (&Номенклатура)
		|				И Субконто2 В (&Склад)) КАК Остатки
		|ГДЕ
		|	Остатки.КоличествоОстаток > 0
		|
		|СГРУППИРОВАТЬ ПО
		|	Остатки.Субконто1,
		|	Остатки.НалоговоеНазначение,
		|	Остатки.Субконто2";
		
		ТаблицаУчетныхЦен = Запрос.Выполнить().Выгрузить();
		ТаблицаУчетныхЦен.Индексы.Добавить("Номенклатура, НалоговоеНазначение");

		Для Каждого Строка из ТаблицаТоваров Цикл
			НайденныеСтроки = ТаблицаУчетныхЦен.НайтиСтроки(Новый Структура("Номенклатура, Склад, НалоговоеНазначение", Строка.Номенклатура, Строка.Склад, Строка.НалоговоеНазначение));
			Если НайденныеСтроки.Количество()> 0 Тогда
				СтрокаТаблицыЦен = НайденныеСтроки[0];
				Строка.УчетнаяЦена = Окр(?(СтрокаТаблицыЦен.КоличествоОстаток = 0, 0, СтрокаТаблицыЦен.СуммаОстаток / СтрокаТаблицыЦен.КоличествоОстаток), 2, 1);
			Иначе
				Строка.УчетнаяЦена = 0;
			КонецЕсли;
			Строка.РозничнаяЦена = Ценообразование.ПолучитьЦенуНоменклатуры(Строка.Номенклатура, Строка.Склад.ТипЦенРозничнойТорговли, 
															СтруктураШапкиДокумента.Дата, мВалютаРегламентированногоУчета, 1, 1);
		КонецЦикла;
														
	КонецЕсли;
	// ИНАГРО--
	
	//Если НЕ УчитыватьНДС Тогда
	Если НЕ СтруктураШапкиДокумента.ЕстьНДС Тогда
		// для регламентного учета считаем НДС
		ТаблицаТоваров.ЗаполнитьЗначения(Перечисления.СтавкиНДС.БезНДС, "СтавкаНДС");
		ТаблицаТоваров.ЗаполнитьЗначения(0                            , "НДС");
	КонецЕсли;
	
	ТаблицаТоваров.Колонки.Добавить("ДляХозяйственнойДеятельности", Новый ОписаниеТипов("Булево"));
	// для товаров колонка Амортизируется = Ложь
	ТаблицаТоваров.Колонки.Добавить("Амортизируется", Новый ОписаниеТипов("Булево"));
	
	Для каждого Строка Из ТаблицаТоваров Цикл
		Если Строка.НалоговоеНазначение = Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяНеХозДеятельность Тогда
			Строка.ДляХозяйственнойДеятельности = Ложь;
		Иначе
			Строка.ДляХозяйственнойДеятельности = Истина;
		КонецЕсли; 
	КонецЦикла; 
	
	НалоговыйУчет.ДобавитьКолонкиТоваровРегл(ТаблицаТоваров, СтруктураШапкиДокумента, ПогрешностиОкругления, Истина);
	
	Возврат ТаблицаТоваров;

КонецФункции // ПодготовитьТаблицуТоваров()

Функция  ПодготовитьТаблицуУслуг(РезультатЗапросаПоУслугам, СтруктураШапкиДокумента, ПогрешностиОкругления)

	ТаблицаУслуг = РезультатЗапросаПоУслугам.Выгрузить();

	//Если НЕ УчитыватьНДС Тогда
	Если НЕ СтруктураШапкиДокумента.ЕстьНДС Тогда
		// для регламентного учета считаем НДС
		ТаблицаУслуг.ЗаполнитьЗначения(Перечисления.СтавкиНДС.БезНДС, "СтавкаНДС");
		ТаблицаУслуг.ЗаполнитьЗначения(0                            , "НДС");
	КонецЕсли;
	
	ТаблицаУслуг.Колонки.Добавить("ДляХозяйственнойДеятельности", Новый ОписаниеТипов("Булево"));
	ТаблицаУслуг.Колонки.Добавить("Амортизируется", Новый ОписаниеТипов("Булево"));
	
	Для каждого Строка Из ТаблицаУслуг Цикл
		Если Строка.НалоговоеНазначение = Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяНеХозДеятельность Тогда
			Строка.ДляХозяйственнойДеятельности = Ложь;
		Иначе
			Строка.ДляХозяйственнойДеятельности = Истина;
		КонецЕсли; 
	КонецЦикла; 
	
	ТаблицаУслуг.Колонки.Добавить("ХарактерЗатрат");
	
	Для каждого Строка Из ТаблицаУслуг Цикл
		
		// заполним характер затрат, признак Амортизируется и НалоговоеНазначениеДоходовИЗатрат
		
		НалоговыйУчет.ОпределениеАналитикиНалоговогоУчетаВПроводкахДляЗатрат(Строка, Строка.СчетЗатрат, Строка.ХарактерЗатрат,
															   	Строка.НалоговоеНазначениеДоходовИЗатрат, Строка.Амортизируется, 
																Строка.НалоговоеНазначение, Строка.НалоговоеНазначениеДоходовИЗатрат,
																,Дата
																,,СтруктураШапкиДокумента.ЕстьНДС
																);

		
	КонецЦикла;	
	
	НалоговыйУчет.ДобавитьКолонкиТоваровРегл(ТаблицаУслуг, СтруктураШапкиДокумента, ПогрешностиОкругления, Истина);
	
	Возврат ТаблицаУслуг;
		
КонецФункции

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТоварам - результат запроса по табличной части "Товары",
//  СтруктураШапкиДокумента   - структура, содержащая рексвизиты шапки документа и результаты запроса по шапке
//
// Возвращаемое значение:
//  Сформированная таблиица значений.
//
Функция ПодготовитьТаблицуОборудование(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента, ПогрешностиОкругления)

	ТаблицаТоваров = РезультатЗапросаПоТоварам.Выгрузить();
	
	//Если НЕ УчитыватьНДС Тогда
	Если НЕ СтруктураШапкиДокумента.ЕстьНДС Тогда
		// для регламентного учета считаем НДС
		ТаблицаТоваров.ЗаполнитьЗначения(Перечисления.СтавкиНДС.БезНДС, "СтавкаНДС");
		ТаблицаТоваров.ЗаполнитьЗначения(0                            , "НДС");
	КонецЕсли;
	
	ТаблицаТоваров.Колонки.Добавить("ДляХозяйственнойДеятельности");	
	
	// для оборудования колонка Амортизируется = Истина
	ТаблицаТоваров.Колонки.Добавить("Амортизируется", Новый ОписаниеТипов("Булево"));
	
	Для каждого Строка Из ТаблицаТоваров Цикл
		Строка.Амортизируется = Истина;
		Если Строка.НалоговоеНазначение = Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяНеХозДеятельность Тогда
			Строка.ДляХозяйственнойДеятельности = Ложь;
		Иначе
			Строка.ДляХозяйственнойДеятельности = Истина;
		КонецЕсли; 
	КонецЦикла; 

	НалоговыйУчет.ДобавитьКолонкиТоваровРегл(ТаблицаТоваров, СтруктураШапкиДокумента, ПогрешностиОкругления, Истина);
	
	Возврат ТаблицаТоваров;

КонецФункции // ПодготовитьТаблицуОборудование()

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
// Возвращаемое значение:
//  Сформированная таблиица значений.
//
Функция ПодготовитьТаблицуОбъектовСтроительства(РезультатЗапросаПоОбъектамСтроительства, СтруктураШапкиДокумента, ПогрешностиОкругления)

	ТаблицаОбъектовСтроительства = РезультатЗапросаПоОбъектамСтроительства.Выгрузить();
	
	//Если НЕ УчитыватьНДС Тогда
	Если НЕ СтруктураШапкиДокумента.ЕстьНДС Тогда
		// для регламентного учета считаем НДС
		ТаблицаОбъектовСтроительства.ЗаполнитьЗначения(Перечисления.СтавкиНДС.БезНДС, "СтавкаНДС");
		ТаблицаОбъектовСтроительства.ЗаполнитьЗначения(0                            , "НДС");
	КонецЕсли;
	
	ТаблицаОбъектовСтроительства.Колонки.Добавить("ДляХозяйственнойДеятельности");	
	
	// для оборудования колонка Амортизируется = Истина
	ТаблицаОбъектовСтроительства.Колонки.Добавить("Амортизируется", Новый ОписаниеТипов("Булево"));
	
	Для каждого Строка Из ТаблицаОбъектовСтроительства Цикл
		Строка.Амортизируется = Истина;
		Если Строка.НалоговоеНазначение = Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяНеХозДеятельность Тогда
			Строка.ДляХозяйственнойДеятельности = Ложь;
		Иначе
			Строка.ДляХозяйственнойДеятельности = Истина;
		КонецЕсли; 
	КонецЦикла; 

	НалоговыйУчет.ДобавитьКолонкиТоваровРегл(ТаблицаОбъектовСтроительства, СтруктураШапкиДокумента, ПогрешностиОкругления, Истина);

	Возврат ТаблицаОбъектовСтроительства;

КонецФункции // ПодготовитьТаблицуОбъектовСтроительстваРегл()

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТаре  - результат запроса по табличной части "ВозвратнаяТара",
//  СтруктураШапкиДокумента - структура, содержащая рексвизиты шапки документа и результаты запроса по шапке
//
// Возвращаемое значение:
//  Сформированная таблиица значений.
//
Функция ПодготовитьТаблицуТары(РезультатЗапросаПоТаре, СтруктураШапкиДокумента, ПогрешностиОкругления)

	ТаблицаТары = РезультатЗапросаПоТаре.Выгрузить();
	
	ТаблицаТары.Колонки.Добавить("СтавкаНДС");
	ТаблицаТары.Колонки.Добавить("НДС");
	ТаблицаТары.Колонки.Добавить("ДляХозяйственнойДеятельности");	
	ТаблицаТары.Колонки.Добавить("Амортизируется");
	ТаблицаТары.Колонки.Добавить("СчетУчетаНДС");	
	
	ТаблицаТары.ЗаполнитьЗначения(Перечисления.СтавкиНДС.НеНДС	, "СтавкаНДС");
	ТаблицаТары.ЗаполнитьЗначения(0								, "НДС");
	ТаблицаТары.ЗаполнитьЗначения(ПланыСчетов.Хозрасчетный.ПустаяСсылка()			, "СчетУчетаНДС");
	Для каждого Строка Из ТаблицаТары Цикл
		Строка.ДляХозяйственнойДеятельности = Истина;
		Строка.ВидДеятельностиНДС = Перечисления.ВидыДеятельностиНДС.Необлагаемая;
	КонецЦикла; 
	
	НалоговыйУчет.ДобавитьКолонкиТоваровРегл(ТаблицаТары, СтруктураШапкиДокумента, ПогрешностиОкругления, Истина);
	
	Возврат ТаблицаТары;

КонецФункции // ПодготовитьТаблицуТары()

Функция ПодготовитьТаблицуБланков(РезультатЗапросаПоБланкам, СтруктураШапкиДокумента, ПогрешностиОкругления)

	ТаблицаБланков = РезультатЗапросаПоБланкам.Выгрузить();	
		
	//Если НЕ УчитыватьНДС Тогда
	Если НЕ СтруктураШапкиДокумента.ЕстьНДС Тогда
		ТаблицаБланков.ЗаполнитьЗначения(Перечисления.СтавкиНДС.БезНДС, "СтавкаНДС");
		ТаблицаБланков.ЗаполнитьЗначения(0                            , "НДС");
	КонецЕсли;
		
	ТаблицаБланков.Колонки.Добавить("ДляХозяйственнойДеятельности");	
	ТаблицаБланков.Колонки.Добавить("Амортизируется", Новый ОписаниеТипов("Булево"));
	
	Для каждого Строка Из ТаблицаБланков Цикл
		Строка.Амортизируется = Ложь;
		Если Строка.НалоговоеНазначение = Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяНеХозДеятельность Тогда
			Строка.ДляХозяйственнойДеятельности = Ложь;
		Иначе
			Строка.ДляХозяйственнойДеятельности = Истина;
		КонецЕсли; 
	КонецЦикла; 
	
	НалоговыйУчет.ДобавитьКолонкиТоваровРегл(ТаблицаБланков, СтруктураШапкиДокумента, ПогрешностиОкругления, Истина);
	
	Возврат ТаблицаБланков;

КонецФункции // ПодготовитьТаблицуБланков()

Функция ДвиженияПоРегистрамНалоговогоУчета(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоУслугам, ТаблицаПоТаре, ТаблицаПоОборудованию, ТаблицаПоОбъектамСтроительства, ТаблицаПоБланкам, Отказ)
	
	ТаблицаПоВторомуСобытиюНал = НалоговыйУчет.СоздатьСтруктуруТаблицыНалоговыхСумм();

	Если Не СтруктураШапкиДокумента.ЕстьНДС Тогда
		// Если не нужно отражать в налоговом учете, тогда не отражаем и в подсистеме учета НДС
		Возврат ТаблицаПоВторомуСобытиюНал;                    
	КонецЕсли;

	//Отразим Продажи в регистре ПродажиНалоговыйУчет
	НаборДвижений = Движения.ПриобретенияНалоговыйУчет;
	
	// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
	ТаблицаДвижений = НаборДвижений.ВыгрузитьКолонки();
	ТаблицаДвиженийТара = ТаблицаДвижений.Скопировать();
	
	
	Если  СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ВПереработку
	  ИЛИ СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда
		// в налоговом учете не учитываются
	Иначе
		
		// ТОВАРЫ
		ТаблицаКопия = ТаблицаПоТоварам.Скопировать();
		ТаблицаКопия.Свернуть("СтавкаНДС,  ДляХозяйственнойДеятельности,ВидДеятельностиНДС, Амортизируется","СуммаСНДСВал, СуммаНДСВал, СуммаНДСВалИсходный");
		ТаблицаПриобретений = ТаблицаКопия.Скопировать();
		
		// ОБОРУДОВАНИЕ
		ТаблицаКопия = ТаблицаПоОборудованию.Скопировать();
		ТаблицаКопия.Свернуть("СтавкаНДС,  ДляХозяйственнойДеятельности,ВидДеятельностиНДС, Амортизируется","СуммаСНДСВал, СуммаНДСВал, СуммаНДСВалИсходный");
		ОбщегоНазначенияБПВызовСервера.ЗагрузитьВТаблицуЗначений(ТаблицаКопия, ТаблицаПриобретений);
		
		// ОБЪЕКТЫ СТРОИТЕЛЬСТВА
		ТаблицаКопия = ТаблицаПоОбъектамСтроительства.Скопировать();
		ТаблицаКопия.Свернуть("СтавкаНДС,  ДляХозяйственнойДеятельности,ВидДеятельностиНДС, Амортизируется","СуммаСНДСВал, СуммаНДСВал, СуммаНДСВалИсходный");
		ОбщегоНазначенияБПВызовСервера.ЗагрузитьВТаблицуЗначений(ТаблицаКопия, ТаблицаПриобретений);
		
		// УСЛУГИ
		ТаблицаКопия = ТаблицаПоУслугам.Скопировать();                                                            
		ТаблицаКопия.Свернуть("СтавкаНДС,  ДляХозяйственнойДеятельности,ВидДеятельностиНДС, Амортизируется","СуммаСНДСВал, СуммаНДСВал, СуммаНДСВалИсходный");
		ОбщегоНазначенияБПВызовСервера.ЗагрузитьВТаблицуЗначений(ТаблицаКопия, ТаблицаПриобретений);
		
		ТаблицаКопия = ТаблицаПоБланкам.Скопировать();
		ТаблицаКопия.Свернуть("СтавкаНДС,  ДляХозяйственнойДеятельности,ВидДеятельностиНДС, Амортизируется","СуммаСНДСВал, СуммаНДСВал, СуммаНДСВалИсходный");
		ОбщегоНазначенияБПВызовСервера.ЗагрузитьВТаблицуЗначений(ТаблицаКопия, ТаблицаПриобретений);
		
		
		ТаблицаПриобретений.Колонки.Добавить("СуммаНДСПропорционально");
		Для каждого СтрокаКопии Из ТаблицаПриобретений Цикл
			Если СтрокаКопии.ВидДеятельностиНДС = Перечисления.ВидыДеятельностиНДС.ПропорциональноОблагаемая Тогда
				СтрокаКопии.СуммаНДСПропорционально = СтрокаКопии.СуммаНДСВал;
				СтрокаКопии.СуммаНДСВал = СтрокаКопии.СуммаНДСВалИсходный;
			КонецЕсли;
		КонецЦикла;
		
		ТаблицаПриобретений.Колонки.СуммаСНДСВал.Имя = "СуммаВзаиморасчетов";
		ТаблицаПриобретений.Колонки.СуммаНДСВал.Имя  = "СуммаНДС";
		ОбщегоНазначенияБПВызовСервера.ЗагрузитьВТаблицуЗначений(ТаблицаПриобретений, ТаблицаДвижений);
		
	КонецЕсли;		
	
	ТаблицаДвижений.ЗаполнитьЗначения(Организация       , "Организация");
	ТаблицаДвижений.ЗаполнитьЗначения(ДоговорКонтрагента, "ДоговорКонтрагента");
	ТаблицаДвижений.ЗаполнитьЗначения(НалоговыйУчет.ОпределитьСделкуНалоговыйУчет(СтруктураШапкиДокумента,
																	СтруктураШапкиДокумента.Ссылка, 
																	СтруктураШапкиДокумента.Сделка),
									  "Сделка");
	ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СобытияПриобретенияНалоговыйУчет.ПоступлениеОтПоставщика, "Событие");
	
	Если СтруктураШапкиДокумента.СложныйНалоговыйУчет Тогда
		
		// очистим налоговые реквизиты
		ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтавкиНДС.ПустаяСсылка(), 			"СтавкаНДС");
		ТаблицаДвижений.ЗаполнитьЗначения(Ложь, 										   	"ДляХозяйственнойДеятельности");
		ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.ВидыДеятельностиНДС.ПустаяСсылка(), 	"ВидДеятельностиНДС");
		ТаблицаДвижений.ЗаполнитьЗначения(Ложь,												"Амортизируется");
		ТаблицаДвижений.ЗаполнитьЗначения(0, 												"СуммаНДС");
		ТаблицаДвижений.ЗаполнитьЗначения(0, 												"СуммаНДСПропорционально");
		
	Иначе		
		
		Если СтруктураШапкиДокумента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоРасчетнымДокументам Тогда
			// взаиморасчеты по договору по расчетным документам - необходимо заполнить в регистре реквизит РасчетныйДокумент
			ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.Сделка, "РасчетныйДокумент");
		КонецЕсли;			
		
	КонецЕсли;
	
	//ТАРА
	ТаблицаКопия = ТаблицаПоТаре.Скопировать();
	ТаблицаКопия.Свернуть("СтавкаНДС, ДляХозяйственнойДеятельности,ВидДеятельностиНДС, Амортизируется","СуммаСНДСВал, СуммаНДСВал");
	ТаблицаКопия.Колонки.СуммаСНДСВал.Имя = "СуммаВзаиморасчетов";
	ТаблицаКопия.Колонки.СуммаНДСВал.Имя = "СуммаНДС";
	ОбщегоНазначенияБПВызовСервера.ЗагрузитьВТаблицуЗначений(ТаблицаКопия, ТаблицаДвиженийТара);
	ТаблицаДвиженийТара.ЗаполнитьЗначения(Организация       , "Организация");
	ТаблицаДвиженийТара.ЗаполнитьЗначения(ДоговорКонтрагента, "ДоговорКонтрагента");
	ТаблицаДвиженийТара.ЗаполнитьЗначения(НалоговыйУчет.ОпределитьСделкуНалоговыйУчет(СтруктураШапкиДокумента,
																	СтруктураШапкиДокумента.Ссылка, 
																	СтруктураШапкиДокумента.Сделка),
									  "Сделка");
	ТаблицаДвиженийТара.ЗаполнитьЗначения(Перечисления.СобытияПриобретенияНалоговыйУчет.ПоступлениеОтПоставщика, "Событие");
	ТаблицаДвиженийТара.ЗаполнитьЗначения(Истина, "ВозвратнаяТара");
	
	Если СтруктураШапкиДокумента.СложныйНалоговыйУчет Тогда
		
		// очистим налоговые реквизиты
		ТаблицаДвиженийТара.ЗаполнитьЗначения(Перечисления.СтавкиНДС.ПустаяСсылка(), 			"СтавкаНДС");
		ТаблицаДвиженийТара.ЗаполнитьЗначения(Ложь, 										   		"ДляХозяйственнойДеятельности");
		ТаблицаДвиженийТара.ЗаполнитьЗначения(Перечисления.ВидыДеятельностиНДС.ПустаяСсылка(), 		"ВидДеятельностиНДС");
		ТаблицаДвиженийТара.ЗаполнитьЗначения(Ложь,													"Амортизируется");
		ТаблицаДвиженийТара.ЗаполнитьЗначения(0, 												"СуммаНДС");
		
	Иначе		
		
		Если СтруктураШапкиДокумента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоРасчетнымДокументам Тогда
			// взаиморасчеты по договору по расчетным документам - необходимо заполнить в регистре реквизит РасчетныйДокумент
			ТаблицаДвиженийТара.ЗаполнитьЗначения(Сделка, "РасчетныйДокумент");
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ Отказ И ТаблицаДвижений.Количество() > 0 Тогда
			
		НаборДвижений.мПериод          = Дата;
		НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;
			
		Движения.ПриобретенияНалоговыйУчет.ВыполнитьПриход();
		Движения.ПриобретенияНалоговыйУчет.Записать();
			
	КонецЕсли;
	
	Если НЕ Отказ И ТаблицаДвиженийТара.Количество() > 0 Тогда
			
		НаборДвижений.мПериод          = Дата;
		НаборДвижений.мТаблицаДвижений = ТаблицаДвиженийТара;
			
		Движения.ПриобретенияНалоговыйУчет.ВыполнитьПриход();
		Движения.ПриобретенияНалоговыйУчет.Записать();
			
	КонецЕсли;
	
	// Движения по регистру Ожидаемый и подтвержденный НДС приобретений
	Если НЕ СтруктураШапкиДокумента.СложныйНалоговыйУчет Тогда
		// Движения формируются по данным рассчета "первого события" 
	   НалоговыйУчет.ДвиженияПоРегистрамНалоговогоУчетаУпрощенныйНалоговыйУчет(ЭтотОбъект, ТаблицаПоВторомуСобытиюНал);
	
	ИначеЕсли СтруктураШапкиДокумента.ВалютаВзаиморасчетов = мВалютаРегламентированногоУчета Тогда

		НаборДвижений = Движения.ОжидаемыйИПодтвержденныйНДСПриобретений;
		
		// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
		ТаблицаДвижений = НаборДвижений.ВыгрузитьКолонки();
		
		ТаблицаДвиженийТара = ТаблицаДвижений.Скопировать();
		
		Если  СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ВПереработку Тогда
			// в налоговом учете не учитываются
		Иначе
			// ТОВАРЫ
			ТаблицаКопия = ТаблицаПоТоварам.Скопировать();
			ТаблицаКопия.Свернуть("СтавкаНДС,ДляХозяйственнойДеятельности,ВидДеятельностиНДС, Амортизируется","СуммаБезНДСВал,СуммаНДСВал, СуммаНДСВалИсходный");
			ТаблицаПриобретений = ТаблицаКопия.Скопировать();
			
			// ОБОРУДОВАНИЕ
			ТаблицаКопия = ТаблицаПоОборудованию.Скопировать();
			ТаблицаКопия.Свернуть("СтавкаНДС,ДляХозяйственнойДеятельности,ВидДеятельностиНДС, Амортизируется","СуммаБезНДСВал,СуммаНДСВал, СуммаНДСВалИсходный");
			ОбщегоНазначенияБПВызовСервера.ЗагрузитьВТаблицуЗначений(ТаблицаКопия, ТаблицаПриобретений);
			
			// ОБЪЕКТЫ СТРОИТЕЛЬСТВА
			ТаблицаКопия = ТаблицаПоОбъектамСтроительства.Скопировать();
			ТаблицаКопия.Свернуть("СтавкаНДС,ДляХозяйственнойДеятельности,ВидДеятельностиНДС, Амортизируется","СуммаБезНДСВал,СуммаНДСВал, СуммаНДСВалИсходный");
			ОбщегоНазначенияБПВызовСервера.ЗагрузитьВТаблицуЗначений(ТаблицаКопия, ТаблицаПриобретений);
			
			// УСЛУГИ
			ТаблицаКопия = ТаблицаПоУслугам.Скопировать();
			ТаблицаКопия.Свернуть("СтавкаНДС,ДляХозяйственнойДеятельности,ВидДеятельностиНДС, Амортизируется","СуммаБезНДСВал,СуммаНДСВал,СуммаНДСВалИсходный");
			ОбщегоНазначенияБПВызовСервера.ЗагрузитьВТаблицуЗначений(ТаблицаКопия, ТаблицаПриобретений);
			
			ТаблицаКопия = ТаблицаПоБланкам.Скопировать();
			ТаблицаКопия.Свернуть("СтавкаНДС,ДляХозяйственнойДеятельности,ВидДеятельностиНДС, Амортизируется","СуммаБезНДСВал,СуммаНДСВал");
			ОбщегоНазначенияБПВызовСервера.ЗагрузитьВТаблицуЗначений(ТаблицаКопия, ТаблицаПриобретений);
			
			ТаблицаПриобретений.Колонки.Добавить("СуммаНДСПропорционально");
			Для каждого СтрокаКопии Из ТаблицаПриобретений Цикл
				Если СтрокаКопии.ВидДеятельностиНДС = Перечисления.ВидыДеятельностиНДС.ПропорциональноОблагаемая Тогда
					СуммаСНДСВал = СтрокаКопии.СуммаБезНДСВал  + СтрокаКопии.СуммаНДСВал;
					СтрокаКопии.СуммаНДСПропорционально = СтрокаКопии.СуммаНДСВал;
					СтрокаКопии.СуммаНДСВал 			= СтрокаКопии.СуммаНДСВалИсходный;
					СтрокаКопии.СуммаБезНДСВал 			= СуммаСНДСВал - СтрокаКопии.СуммаНДСВал;
				КонецЕсли;
			КонецЦикла;
			
			
			ТаблицаПриобретений.Колонки.СуммаБезНДСВал.Имя = "БазаНДС";
			ТаблицаПриобретений.Колонки.СуммаНДСВал   .Имя = "СуммаНДС";
			ОбщегоНазначенияБПВызовСервера.ЗагрузитьВТаблицуЗначений(ТаблицаПриобретений, ТаблицаДвижений);
			ТаблицаДвижений.ЗаполнитьЗначения(Организация       , "Организация");
			ТаблицаДвижений.ЗаполнитьЗначения(ДоговорКонтрагента, "ДоговорКонтрагента");
			ТаблицаДвижений.ЗаполнитьЗначения(НалоговыйУчет.ОпределитьСделкуНалоговыйУчет(СтруктураШапкиДокумента,
																			СтруктураШапкиДокумента.Ссылка, 
																			СтруктураШапкиДокумента.Сделка),
											  	"Сделка");
			ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СобытияОжидаемыйИПодтвержденныйНДСПриобретений.Поступление, 			"СобытиеНДС");
			ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.КодыОперацийОжидаемыйИПодтвержденныйНДСПриобретений.ОжидаемыйНДС , 	"КодОперации");

		КонецЕсли;

		// ТАРА
		ТаблицаКопия = ТаблицаПоТаре.Скопировать();
		ТаблицаКопия.Свернуть("СтавкаНДС,ДляХозяйственнойДеятельности,ВидДеятельностиНДС","СуммаБезНДСВал,СуммаНДСВал");
		ТаблицаКопия.Колонки.СуммаБезНДСВал.Имя = "БазаНДС";
		ТаблицаКопия.Колонки.СуммаНДСВал.Имя 	= "СуммаНДС";
		ОбщегоНазначенияБПВызовСервера.ЗагрузитьВТаблицуЗначений(ТаблицаКопия, ТаблицаДвиженийТара);
		ТаблицаДвиженийТара.ЗаполнитьЗначения(Организация       , "Организация");
		ТаблицаДвиженийТара.ЗаполнитьЗначения(ДоговорКонтрагента, "ДоговорКонтрагента");
		ТаблицаДвижений.ЗаполнитьЗначения(НалоговыйУчет.ОпределитьСделкуНалоговыйУчет(СтруктураШапкиДокумента,
																		СтруктураШапкиДокумента.Ссылка, 
																		СтруктураШапкиДокумента.Сделка),
											  "Сделка");
		ТаблицаДвиженийТара.ЗаполнитьЗначения(Истина            , "ВозвратнаяТара");
		ТаблицаДвиженийТара.ЗаполнитьЗначения(Перечисления.СобытияОжидаемыйИПодтвержденныйНДСПриобретений.Поступление, 			"СобытиеНДС");
		ТаблицаДвиженийТара.ЗаполнитьЗначения(Перечисления.КодыОперацийОжидаемыйИПодтвержденныйНДСПриобретений.ОжидаемыйНДС   , "КодОперации");
			
		Если НЕ Отказ И ТаблицаДвижений.Количество() > 0 Тогда
			
			НаборДвижений.мПериод          = Дата;
			НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;
		
			Движения.ОжидаемыйИПодтвержденныйНДСПриобретений.ВыполнитьПриход();
			Движения.ОжидаемыйИПодтвержденныйНДСПриобретений.Записать();
			
		КонецЕсли;
		
		Если НЕ Отказ И ТаблицаДвиженийТара.Количество() > 0 Тогда
			
			НаборДвижений.мПериод          = Дата;
			НаборДвижений.мТаблицаДвижений = ТаблицаДвиженийТара;
		
			Движения.ОжидаемыйИПодтвержденныйНДСПриобретений.ВыполнитьПриход();
			Движения.ОжидаемыйИПодтвержденныйНДСПриобретений.Записать();
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ТаблицаПоВторомуСобытиюНал;                    
	
КонецФункции

Процедура ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, 
							ТаблицаПоТоварам, ТаблицаПоТаре, ТаблицаПоУслугам, ТаблицаПоОборудованию,
							ТаблицаПоОбъектамСтроительства,ТаблицаПоБланкам,Отказ, Заголовок);

	ВПереработку = (ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ВПереработку);
	
	Комиссия = (ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ПокупкаКомиссия 
				И ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом);
				
	ТаблицаПоВторомуСобытиюНал = ДвиженияПоРегистрамНалоговогоУчета(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоУслугам, ТаблицаПоТаре, ТаблицаПоОборудованию, ТаблицаПоОбъектамСтроительства, ТаблицаПоБланкам, Отказ);
	
	// Проводки по взаиморасчетам - авансы
	Если НЕ ВПереработку И НЕ Комиссия Тогда

	   	ТаблицыДокумента = Новый Структура();
	   	ТаблицыДокумента.Вставить("ТаблицаПоТоварам",ТаблицаПоТоварам);
	   	ТаблицыДокумента.Вставить("ТаблицаПоУслугам",ТаблицаПоУслугам);
	   	ТаблицыДокумента.Вставить("ТаблицаПоОборудованию",ТаблицаПоОборудованию);
	   	ТаблицыДокумента.Вставить("ТаблицаПоОбъектамСтроительства",ТаблицаПоОбъектамСтроительства);
		ТаблицыДокумента.Вставить("ТаблицаПоБланкам",ТаблицаПоБланкам);

		//Возможны корректировки сумм при расчетах в валюте
		ТаблицаАвансов = БухгалтерскийУчетРасчетовСКонтрагентами.ЗачетАванса(ЭтотОбъект, СтруктураШапкиДокумента , мВалютаРегламентированногоУчета, ТаблицыДокумента , Отказ, Заголовок, "АВ");
		
	КонецЕсли; // Проводки по взаиморасчетам - авансы

	// Проводки по взаиморасчетам за тару - авансы
	Если НЕ ВПереработку Тогда
		
	   	ТаблицыДокумента = Новый Структура();
	   	ТаблицыДокумента.Вставить("ТаблицаПоТаре",ТаблицаПоТаре);

		//Возможны корректировки сумм при расчетах в валюте
		ТаблицаАвансовПоТаре = БухгалтерскийУчетРасчетовСКонтрагентами.ЗачетАванса(ЭтотОбъект, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета, ТаблицыДокумента , Отказ, Заголовок,"АВ",,,СтруктураШапкиДокумента.СчетУчетаРасчетовПоТаре, СтруктураШапкиДокумента.СчетУчетаРасчетовПоТареПоАвансам);

	КонецЕсли; // Проводки по взаиморасчетам за тару - авансы
	
		
	// Формирование проводок
	// Проводки по поступлению товаров, тары и услуг.

	ДатаДока   = СтруктураШапкиДокумента.Дата;
	ПроводкиБУ = Движения.Хозрасчетный;
	
	НТТ = (РозницаВПродажныхЦенах И (Склад.ТипСклада = Перечисления.ТипыСкладов.НеавтоматизированнаяТорговаяТочка));
	АТТ = (РозницаВПродажныхЦенах И (Склад.ТипСклада = Перечисления.ТипыСкладов.РозничныйМагазин));
	
	Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ПокупкаКомиссия
	 или СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ВПереработку
	 или СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Оборудование 
	 или СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ОбъектыСтроительства 
	 или СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.БланкиСтрогогоУчета Тогда

		// Проводки по товарам
		Для каждого СтрокаТаблицы Из ТаблицаПоТоварам Цикл

			Проводка = ПроводкиБУ.Добавить();

			Проводка.Период       = ДатаДока;
			Проводка.Организация  = СтруктураШапкиДокумента.Организация;
			Проводка.Содержание   = НСтр("ru='Оприходованы ТМЦ';uk='Оприбутковані ТМЦ'",Локализация.КодЯзыкаИнформационнойБазы());

			Проводка.НалоговоеНазначениеДт = СтрокаТаблицы.НалоговоеНазначение;
			
			ОценкаСтоимостиВНУ = 0;
			Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыльДо2015 И
				 СтруктураШапкиДокумента.НеОтноситьНаЗатратыПоНУ = Ложь И 
				 СтрокаТаблицы.НалоговоеНазначение <> Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяНеХозДеятельность Тогда
				 
				 Проводка.СуммаНУДт = НалоговыйУчет.УчестьСуммуАвансаДо01042011(СтруктураШапкиДокумента, СтрокаТаблицы.ПроводкиСуммаБезНДСРегл);
				 ОценкаСтоимостиВНУ = Проводка.СуммаНУДт;
			 КонецЕсли;
			
			Проводка.СчетДт       = СтрокаТаблицы.СчетУчетаБУ;
			Если (НЕ НТТ) ИЛИ (мИспользоватьОборотнуюНоменклатуру) Тогда
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Номенклатура", СтрокаТаблицы.Номенклатура);
			КонецЕсли;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт, "Склады", СтрокаТаблицы.Склад); // ИНАГРО
			                                                                          
			Если НТТ И мРазделятьПоСтавкамНДС Тогда
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "СтавкиНДС",  СтрокаТаблицы.СтавкаНДСВРознице);
			КонецЕсли;
					
			// Для товаров, принятых на комиссию партия прописывается всегда 
			Если (ПартионныйУчетБУ) ИЛИ (БухгалтерскийУчетВызовСервераПовтИсп.КомиссионныйТовар(СтрокаТаблицы.СчетУчетаБУ)) Тогда 
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Партии", Ссылка);
			КонецЕсли;
			
			Если (НЕ НТТ) Тогда
				Проводка.КоличествоДт = СтрокаТаблицы.Количество;
			КонецЕсли;

			Проводка.Сумма = СтрокаТаблицы.ПроводкиСуммаБезНДСРегл;

			// Проверка - вид Операции - комиссия
			Если Комиссия ИЛИ ВПереработку Тогда

				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Контрагенты",СтруктураШапкиДокумента.Контрагент);

				// кредит по НДС наступает с 2011 года в момент поставки товаров
				Если Комиссия Тогда
						
					Если СтруктураШапкиДокумента.ЕстьНДС И СтрокаТаблицы.ПроводкиСуммаНДСРегл > 0 Тогда

							Проводка = ПроводкиБУ.Добавить();

							Проводка.Период      = ДатаДока;

							Проводка.Организация = СтруктураШапкиДокумента.Организация;
							Проводка.Содержание  = НСтр("ru='НДС - налоговый кредит (товары)';uk='ПДВ - податковий кредит (товари)'", Локализация.КодЯзыкаИнформационнойБазы());

							Проводка.СчетДт      	= СтруктураШапкиДокумента.СчетУчетаНДС;
							БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Контрагенты",        СтруктураШапкиДокумента.Контрагент);
							БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Договоры",           СтруктураШапкиДокумента.ДоговорКонтрагента);
							БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"ДокументыРасчетовСКонтрагентами", НалоговыйУчет.ОпределитьСделкуНалоговыйУчет(СтруктураШапкиДокумента, Ссылка, Сделка));
							
							Проводка.СчетКт      = СтруктураШапкиДокумента.СчетУчетаНДСПодтвержденный;
							БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Контрагенты",        СтруктураШапкиДокумента.Контрагент);
							БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Договоры",           СтруктураШапкиДокумента.ДоговорКонтрагента);
							БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"ДокументыРасчетовСКонтрагентами", НалоговыйУчет.ОпределитьСделкуНалоговыйУчет(СтруктураШапкиДокумента, Ссылка, Сделка));

							Если СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом.Валютный Тогда
								Проводка.ВалютаКт        = СтруктураШапкиДокумента.ВалютаВзаиморасчетов;
								Проводка.ВалютнаяСуммаКт = СтрокаТаблицы.ПроводкиСуммаНДСВал;
							КонецЕсли;

							Проводка.Сумма       = СтрокаТаблицы.ПроводкиСуммаНДСРегл;
							
						КонецЕсли; // Проводки по НДС
				
				КонецЕсли;
				
			Иначе

				Проводка.СчетКт = СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Контрагенты",        СтруктураШапкиДокумента.Контрагент);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Договоры",           СтруктураШапкиДокумента.ДоговорКонтрагента);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"ДокументыРасчетовСКонтрагентами", УправлениеВзаиморасчетами.ОпределитьДокументРасчетовСКонтрагентом(Ссылка,Сделка));

				Если Проводка.СчетКт.Валютный Тогда
					Проводка.ВалютаКт        = СтруктураШапкиДокумента.ВалютаВзаиморасчетов;
					Проводка.ВалютнаяСуммаКт = СтрокаТаблицы.ПроводкиСуммаБезНДСВал;
				КонецЕсли;
				
				// ИНАГРО++
				Если ИНАГРО_СкладВТЧ Тогда
					СтруктураШапкиДокумента.Склад = СтрокаТаблицы.Склад;
				КонецЕсли;
				
				// Движение по рег. ИНАГРО_ЗакупкиОрганизаций
				ИНАГРО_Общий.ИНАГРО_РегистрацияЗакупки(Движения, СтрокаТаблицы, СтруктураШапкиДокумента);
				// ИНПГРО--
				
				// Проводки по НДС
				Если СтруктураШапкиДокумента.ЕстьНДС И СтрокаТаблицы.ПроводкиСуммаНДСРегл > 0 Тогда

					Проводка = ПроводкиБУ.Добавить();

					Проводка.Период      = ДатаДока;

					Проводка.Организация = СтруктураШапкиДокумента.Организация;
					Проводка.Содержание  = НСтр("ru='НДС - налоговый кредит (товары)';uk='ПДВ - податковий кредит (товари)'",Локализация.КодЯзыкаИнформационнойБазы());

					Проводка.СчетДт      = СтрокаТаблицы.СчетУчетаНДС;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Контрагенты",        СтруктураШапкиДокумента.Контрагент);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Договоры",           СтруктураШапкиДокумента.ДоговорКонтрагента);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"ДокументыРасчетовСКонтрагентами", НалоговыйУчет.ОпределитьСделкуНалоговыйУчет(СтруктураШапкиДокумента, Ссылка, Сделка));

					Проводка.СчетКт      = СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Контрагенты",        СтруктураШапкиДокумента.Контрагент);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Договоры",           СтруктураШапкиДокумента.ДоговорКонтрагента);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"ДокументыРасчетовСКонтрагентами", УправлениеВзаиморасчетами.ОпределитьДокументРасчетовСКонтрагентом(Ссылка, Сделка));

					Если СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом.Валютный Тогда
						Проводка.ВалютаКт        = СтруктураШапкиДокумента.ВалютаВзаиморасчетов;
						Проводка.ВалютнаяСуммаКт = СтрокаТаблицы.ПроводкиСуммаНДСВал;
					КонецЕсли;

					Проводка.Сумма       = СтрокаТаблицы.ПроводкиСуммаНДСРегл;
					
 					НалоговыйУчет.РазбитьПроводкуПоНДСНаПервоеВтороеСобытие(ТаблицаПоВторомуСобытиюНал, ПроводкиБУ, Проводка, 
														 	  "Дт", СтруктураШапкиДокумента.СчетУчетаНДСПодтвержденный, 
															  СтруктураШапкиДокумента.ДоговорКонтрагента, 
															  НалоговыйУчет.ОпределитьСделкуНалоговыйУчет(СтруктураШапкиДокумента, Ссылка, Сделка), Сделка,
															  Перечисления.СобытияОжидаемыйИПодтвержденныйНДСПриобретений.Поступление,
															  СтрокаТаблицы.СтавкаНДС, СтрокаТаблицы.ДляХозяйственнойДеятельности, СтрокаТаблицы.ВидДеятельностиНДС, ?(Дата < '20080101', Ложь, СтрокаТаблицы.Амортизируется),
															  СтрокаТаблицы.ПроводкиСуммаНДСВал);
					
				КонецЕсли; // Проводки по НДС
				
			КонецЕсли;
			
			Если РозницаВПродажныхЦенах Тогда
				Если АТТ Тогда
					ТорговаяНаценка = (СтрокаТаблицы.РозничнаяЦена * СтрокаТаблицы.Количество)   - СтрокаТаблицы.ПроводкиСуммаБезНДСРегл;
					ТорговаяНаценкаНУ = (СтрокаТаблицы.РозничнаяЦена * СтрокаТаблицы.Количество) - ОценкаСтоимостиВНУ;
					СчетНаценки = ПланыСчетов.Хозрасчетный.ТорговаяНаценкаАТТ;
				Иначе
					ТорговаяНаценка   = СтрокаТаблицы.СуммаВРознице - СтрокаТаблицы.ПроводкиСуммаБезНДСРегл;
					ТорговаяНаценкаНУ = СтрокаТаблицы.СуммаВРознице - ОценкаСтоимостиВНУ;
					СчетНаценки = ПланыСчетов.Хозрасчетный.ТорговаяНаценкаНТТ;
				КонецЕсли;
				
				Если    ТорговаяНаценка <> 0 Тогда
					
					Проводка = ПроводкиБУ.Добавить();
					Проводка.Период      = СтруктураШапкиДокумента.Дата;
					Проводка.Организация = СтруктураШапкиДокумента.Организация;
					Проводка.Содержание  = НСтр("ru='Торговая наценка';uk='Торгова націнка'",Локализация.КодЯзыкаИнформационнойБазы());
					
					Проводка.НалоговоеНазначениеДт = СтрокаТаблицы.НалоговоеНазначение;
					Проводка.НалоговоеНазначениеКт = СтрокаТаблицы.НалоговоеНазначение;
					
					Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыльДо2015 Тогда
						 
						Проводка.СуммаНУДт = ТорговаяНаценкаНУ;
						Проводка.СуммаНУКт = ТорговаяНаценкаНУ;
						
					КонецЕсли;
					
					Проводка.СчетДт      = СтрокаТаблицы.СчетУчетаБУ;
					Проводка.СчетКт      = СчетНаценки;
					
					// ИНАГРО++
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Склады", ?(ИНАГРО_СкладВТЧ ИЛИ ИНАГРО_ОрдерВТЧ, СтрокаТаблицы.Склад, СтруктураШапкиДокумента.Склад)); 
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Склады", ?(ИНАГРО_СкладВТЧ ИЛИ ИНАГРО_ОрдерВТЧ, СтрокаТаблицы.Склад, СтруктураШапкиДокумента.Склад)); 
					// ИНАГРО--

					Если (ПартионныйУчетБУ) Тогда
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Партии", Ссылка);
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Партии", Ссылка);
					КонецЕсли;
					
					Если (НЕ НТТ) ИЛИ (мИспользоватьОборотнуюНоменклатуру) Тогда
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Номенклатура",  СтрокаТаблицы.Номенклатура);
					КонецЕсли;
					Если НЕ НТТ Тогда
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Номенклатура",  СтрокаТаблицы.Номенклатура);
					КонецЕсли;
					Если НТТ И мРазделятьПоСтавкамНДС Тогда
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "СтавкиНДС",  СтрокаТаблицы.СтавкаНДСВРознице);
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "СтавкиНДС",  СтрокаТаблицы.СтавкаНДСВРознице);
					КонецЕсли;
										
					Проводка.Сумма       = ТорговаяНаценка;
				КонецЕсли;
							
			КонецЕсли;

		КонецЦикла; // Проводки по товарам
		
		// Проводки по бланкам стогого учета
		Для каждого СтрокаТаблицы Из ТаблицаПоБланкам Цикл

			Проводка = ПроводкиБУ.Добавить();

			Проводка.Период       = ДатаДока;
			Проводка.Организация  = СтруктураШапкиДокумента.Организация;
			Проводка.Содержание   = НСтр("ru='Оприходованы БСУ';uk='Оприбутковані БСЗ'",Локализация.КодЯзыкаИнформационнойБазы());
			
			Проводка.НалоговоеНазначениеДт = СтрокаТаблицы.НалоговоеНазначение;
			Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыльДо2015 И
			 	 СтруктураШапкиДокумента.НеОтноситьНаЗатратыПоНУ = Ложь И 
				 СтрокаТаблицы.НалоговоеНазначение <> Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяНеХозДеятельность Тогда
				 
				 Проводка.СуммаНУДт = НалоговыйУчет.УчестьСуммуАвансаДо01042011(СтруктураШапкиДокумента, СтрокаТаблицы.ПроводкиСуммаБезНДСРегл);
				 
			 КонецЕсли;

			
			Проводка.СчетДт       = СтрокаТаблицы.СчетУчетаБУ;
			
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Номенклатура", СтрокаТаблицы.Номенклатура);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Склады",       СтруктураШапкиДокумента.Склад);
			
			// Для товаров, принятых на комиссию партия прописывается всегда 
			Если (ПартионныйУчетБУ) Тогда 
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Партии", Ссылка);
			КонецЕсли;
			
			Проводка.КоличествоДт = СтрокаТаблицы.Количество;
			Проводка.Сумма = СтрокаТаблицы.ПроводкиСуммаБезНДСРегл;

			Проводка.СчетКт = СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Контрагенты",        СтруктураШапкиДокумента.Контрагент);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Договоры",           СтруктураШапкиДокумента.ДоговорКонтрагента);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"ДокументыРасчетовСКонтрагентами", УправлениеВзаиморасчетами.ОпределитьДокументРасчетовСКонтрагентом(Ссылка,Сделка));
				
			// Проводки по НДС
			Если СтруктураШапкиДокумента.ЕстьНДС И СтрокаТаблицы.ПроводкиСуммаНДСРегл > 0 Тогда

				Проводка = ПроводкиБУ.Добавить();

				Проводка.Период      = ДатаДока;

				Проводка.Организация = СтруктураШапкиДокумента.Организация;
				Проводка.Содержание  = НСтр("ru='НДС - налоговый кредит (БСУ)';uk='ПДВ - податковий кредит (БСЗ)'",Локализация.КодЯзыкаИнформационнойБазы());

				Проводка.СчетДт      = СтрокаТаблицы.СчетУчетаНДС;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Контрагенты",        СтруктураШапкиДокумента.Контрагент);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Договоры",           СтруктураШапкиДокумента.ДоговорКонтрагента);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"ДокументыРасчетовСКонтрагентами", НалоговыйУчет.ОпределитьСделкуНалоговыйУчет(СтруктураШапкиДокумента, Ссылка, Сделка));

				Проводка.СчетКт      = СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Контрагенты",        СтруктураШапкиДокумента.Контрагент);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Договоры",           СтруктураШапкиДокумента.ДоговорКонтрагента);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"ДокументыРасчетовСКонтрагентами", УправлениеВзаиморасчетами.ОпределитьДокументРасчетовСКонтрагентом(Ссылка, Сделка));

				Проводка.Сумма       = СтрокаТаблицы.ПроводкиСуммаНДСРегл;
				
				НалоговыйУчет.РазбитьПроводкуПоНДСНаПервоеВтороеСобытие(ТаблицаПоВторомуСобытиюНал, ПроводкиБУ, Проводка, 
														   "Дт", СтруктураШапкиДокумента.СчетУчетаНДСПодтвержденный, 
														  СтруктураШапкиДокумента.ДоговорКонтрагента, 
														  НалоговыйУчет.ОпределитьСделкуНалоговыйУчет(СтруктураШапкиДокумента, Ссылка, Сделка), Сделка,
														  Перечисления.СобытияОжидаемыйИПодтвержденныйНДСПриобретений.Поступление,
														  СтрокаТаблицы.СтавкаНДС, СтрокаТаблицы.ДляХозяйственнойДеятельности, СтрокаТаблицы.ВидДеятельностиНДС, ?(Дата < '20080101', Ложь, СтрокаТаблицы.Амортизируется),
														  СтрокаТаблицы.ПроводкиСуммаНДСВал);
					
			КонецЕсли; // Проводки по НДС
			
			//проводка по  счету СчетУчетаЗабалансовыйБУ
			Проводка = ПроводкиБУ.Добавить();
			Проводка.Период       = ДатаДока;
			Проводка.Организация  = СтруктураШапкиДокумента.Организация;
			Проводка.Содержание   = НСтр("ru='Оприходованы БСУ';uk='Оприбутковані БСЗ'",Локализация.КодЯзыкаИнформационнойБазы());

			Проводка.СчетДт       = СтрокаТаблицы.СчетУчетаЗабалансовыйБУ;
			
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Номенклатура", СтрокаТаблицы.Номенклатура);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Склады",       СтруктураШапкиДокумента.Склад);
			
			Проводка.КоличествоДт = СтрокаТаблицы.Количество;
			Проводка.Сумма = СтрокаТаблицы.СуммаНоминальная;
										
		КонецЦикла; // Проводки по бланкам строгого учета
		
		// Проводки по таре
		Для Каждого СтрокаТаблицы Из ТаблицаПоТаре Цикл

			// Бухгалтерский учет
			Проводка = ПроводкиБУ.Добавить();
			Проводка.Период                  = ДатаДока;
			Проводка.Организация             = СтруктураШапкиДокумента.Организация;
			
			Проводка.Содержание              = НСтр("ru='Возвратная тара';uk='Зворотна тара'",Локализация.КодЯзыкаИнформационнойБазы());
			Проводка.Сумма                   = СтрокаТаблицы.ПроводкиСуммаБезНДСРегл;

			Проводка.НалоговоеНазначениеДт   = СтрокаТаблицы.НалоговоеНазначение;
			Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыльДо2015 И
				 СтруктураШапкиДокумента.НеОтноситьНаЗатратыПоНУ = Ложь И 
				 СтрокаТаблицы.НалоговоеНазначение <> Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяНеХозДеятельность Тогда
				 
				 Проводка.СуммаНУДт = НалоговыйУчет.УчестьСуммуАвансаДо01042011(СтруктураШапкиДокумента, СтрокаТаблицы.ПроводкиСуммаБезНДСРегл);
				 
			 КонецЕсли;

			
			Проводка.СчетДт                  = СтрокаТаблицы.СчетУчетаБУ;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Номенклатура", СтрокаТаблицы.Номенклатура);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Склады",       ?(ИНАГРО_СкладВТЧ ИЛИ ИНАГРО_ОрдерВТЧ, СтрокаТаблицы.Склад, СтруктураШапкиДокумента.Склад)); // ИНАГРО
						
			// Для товаров, принятых на комиссию партия прописывается всегда 
			Если (ПартионныйУчетБУ) ИЛИ (БухгалтерскийУчетВызовСервераПовтИсп.КомиссионныйТовар(СтрокаТаблицы.СчетУчетаБУ)) Тогда 
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Партии", Ссылка);
			КонецЕсли;

			Проводка.КоличествоДт            = СтрокаТаблицы.Количество;

			// Проверка - вид Операции - комиссия
			Если СтрокаТаблицы.СчетУчетаБУ.Забалансовый Тогда

				Если НЕ (СтрокаТаблицы.СчетУчетаБУ.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты ,"ВидСубконто") = Неопределено) Тогда
					Проводка.СубконтоДт.Контрагенты = СтруктураШапкиДокумента.Контрагент;
				КонецЕсли;

			Иначе

				Проводка.СчетКт                  = СтруктураШапкиДокумента.СчетУчетаРасчетовПоТаре;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Контрагенты",        СтруктураШапкиДокумента.Контрагент);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Договоры",           СтруктураШапкиДокумента.ДоговорКонтрагента);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"ДокументыРасчетовСКонтрагентами", УправлениеВзаиморасчетами.ОпределитьДокументРасчетовСКонтрагентом(Ссылка,Сделка));

				Если СтруктураШапкиДокумента.СчетУчетаРасчетовПоТаре.Валютный Тогда
					Проводка.ВалютаКт        = СтруктураШапкиДокумента.ВалютаДокумента;
					Проводка.ВалютнаяСуммаКт = СтрокаТаблицы.ПроводкиСуммаБезНДСВал;
				КонецЕсли;

			КонецЕсли;

		КонецЦикла; // Проводки по таре
		
		// Проводки по услугам - только при покупке.
		Если НЕ СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ВПереработку Тогда
			
			Для каждого СтрокаТаблицы Из ТаблицаПоУслугам Цикл

				Проводка = ПроводкиБУ.Добавить();

				Проводка.Период       = Дата;
				Проводка.Организация  = СтруктураШапкиДокумента.Организация;
				Проводка.Содержание   = НСтр("ru='Услуги';uk='Послуги'",Локализация.КодЯзыкаИнформационнойБазы());
				Проводка.Сумма        = СтрокаТаблицы.ПроводкиСуммаБезНДСРегл;

				Проводка.НалоговоеНазначениеДт       = СтрокаТаблицы.НалоговоеНазначениеДоходовИЗатрат;
				Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыльДо2015 И
					СтруктураШапкиДокумента.НеОтноситьНаЗатратыПоНУ = Ложь И 
					СтрокаТаблицы.НалоговоеНазначениеДоходовИЗатрат  <> Справочники.НалоговыеНазначенияАктивовИЗатрат.НКУ_НеХозДеятельность
					И СтрокаТаблицы.НалоговоеНазначениеДоходовИЗатрат  <> Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяНеХозДеятельность
					Тогда
					
					Проводка.СуммаНУДт = НалоговыйУчет.УчестьСуммуАвансаДо01042011(СтруктураШапкиДокумента, СтрокаТаблицы.ПроводкиСуммаБезНДСРегл);
					
				КонецЕсли;
				
				
				Проводка.СчетДт       = СтрокаТаблицы.СчетЗатрат;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтрокаТаблицы.Субконто1);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, СтрокаТаблицы.Субконто2);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, СтрокаТаблицы.Субконто3);

				Проводка.СчетКт       = СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Контрагенты",СтруктураШапкиДокумента.Контрагент);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Договоры",СтруктураШапкиДокумента.ДоговорКонтрагента);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"ДокументыРасчетовСКонтрагентами",УправлениеВзаиморасчетами.ОпределитьДокументРасчетовСКонтрагентом(Ссылка,Сделка));

				Если СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом.Валютный Тогда
					Проводка.ВалютаКт        = СтруктураШапкиДокумента.ВалютаВзаиморасчетов;
					Проводка.ВалютнаяСуммаКт = СтрокаТаблицы.ПроводкиСуммаБезНДСВал;
				КонецЕсли;

				// Проводка по НДС
				Если СтруктураШапкиДокумента.ЕстьНДС И СтрокаТаблицы.ПроводкиСуммаНДСРегл > 0 Тогда

					Проводка = ПроводкиБУ.Добавить();

					Проводка.Период       = Дата;
					Проводка.Организация  = СтруктураШапкиДокумента.Организация;
					Проводка.Сумма        = СтрокаТаблицы.ПроводкиСуммаНДСРегл;
					Проводка.Содержание   = НСтр("ru='НДС - налоговый кредит (услуги)';uk='ПДВ - податковий кредит (послуги)'",Локализация.КодЯзыкаИнформационнойБазы());

					Проводка.СчетДт       = СтрокаТаблицы.СчетУчетаНДС;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Контрагенты",        СтруктураШапкиДокумента.Контрагент);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Договоры",           СтруктураШапкиДокумента.ДоговорКонтрагента);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"ДокументыРасчетовСКонтрагентами", НалоговыйУчет.ОпределитьСделкуНалоговыйУчет(СтруктураШапкиДокумента, Ссылка, Сделка));

					Проводка.СчетКт       = СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Контрагенты",СтруктураШапкиДокумента.Контрагент);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Договоры",СтруктураШапкиДокумента.ДоговорКонтрагента);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"ДокументыРасчетовСКонтрагентами",УправлениеВзаиморасчетами.ОпределитьДокументРасчетовСКонтрагентом(Ссылка,Сделка));
					Если СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом.Валютный Тогда
						Проводка.ВалютаКт        = СтруктураШапкиДокумента.ВалютаВзаиморасчетов;
						Проводка.ВалютнаяСуммаКт = СтрокаТаблицы.ПроводкиСуммаНДСВал;
					КонецЕсли;
					
					НалоговыйУчет.РазбитьПроводкуПоНДСНаПервоеВтороеСобытие(ТаблицаПоВторомуСобытиюНал, ПроводкиБУ, Проводка, 
														 	  "Дт", СтруктураШапкиДокумента.СчетУчетаНДСПодтвержденный, 
															  СтруктураШапкиДокумента.ДоговорКонтрагента, 
															  НалоговыйУчет.ОпределитьСделкуНалоговыйУчет(СтруктураШапкиДокумента, Ссылка, Сделка), Сделка,
															  Перечисления.СобытияОжидаемыйИПодтвержденныйНДСПриобретений.Поступление,
															  СтрокаТаблицы.СтавкаНДС, СтрокаТаблицы.ДляХозяйственнойДеятельности, СтрокаТаблицы.ВидДеятельностиНДС, ?(Дата < '20080101', Ложь, СтрокаТаблицы.Амортизируется),
															  СтрокаТаблицы.ПроводкиСуммаНДСВал);

				КонецЕсли; // Проводка по НДС
				
			КонецЦикла;
			
		КонецЕсли; // Проводки по услугам

		// Проводки по поступлению ОС
		Для каждого СтрокаТаблицы Из ТаблицаПоОборудованию Цикл

			Проводка = ПроводкиБУ.Добавить();

			Проводка.Период                  = Дата;
			Проводка.Организация             = СтруктураШапкиДокумента.Организация;
			Проводка.Содержание              = "	";
			Проводка.НомерЖурнала            = НСтр("ru='ОС';uk='ОЗ'",Локализация.КодЯзыкаИнформационнойБазы());
			Проводка.Сумма                   = СтрокаТаблицы.ПроводкиСуммаБезНДСРегл;

			Проводка.НалоговоеНазначениеДт  = СтрокаТаблицы.НалоговоеНазначение;
			Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыльДо2015 И
				 СтруктураШапкиДокумента.НеОтноситьНаЗатратыПоНУ = Ложь И 
				 СтрокаТаблицы.НалоговоеНазначение <> Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяНеХозДеятельность Тогда
				 
				 Проводка.СуммаНУДт = НалоговыйУчет.УчестьСуммуАвансаДо01042011(СтруктураШапкиДокумента, СтрокаТаблицы.ПроводкиСуммаБезНДСРегл);
				 
			 КонецЕсли;
			
			Проводка.СчетДт                  = СтрокаТаблицы.СчетУчетаБУ;
			Проводка.КоличествоДт            = СтрокаТаблицы.Количество;

			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Номенклатура",СтрокаТаблицы.Номенклатура);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Склады",СтруктураШапкиДокумента.Склад);
			Если ПартионныйУчетБУ Тогда 
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Партии",СтруктураШапкиДокумента.Ссылка);
			КонецЕсли;

			Проводка.СчетКт                  = СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Контрагенты",СтруктураШапкиДокумента.Контрагент);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Договоры",СтруктураШапкиДокумента.ДоговорКонтрагента);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"ДокументыРасчетовСКонтрагентами",УправлениеВзаиморасчетами.ОпределитьДокументРасчетовСКонтрагентом(Ссылка,Сделка));

			Если СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом.Валютный Тогда
				Проводка.ВалютаКт        = СтруктураШапкиДокумента.ВалютаВзаиморасчетов;
				Проводка.ВалютнаяСуммаКт = СтрокаТаблицы.ПроводкиСуммаБезНДСВал;
			КонецЕсли;
			
			ИНАГРО_Общий.ИНАГРО_РегистрацияЗакупки(Движения, СтрокаТаблицы, СтруктураШапкиДокумента); // ИНАГРО
			
			// Проводка по НДС
			Если СтруктураШапкиДокумента.ЕстьНДС И СтрокаТаблицы.ПроводкиСуммаНДСРегл > 0 Тогда

				Проводка = ПроводкиБУ.Добавить();

				Проводка.Период       = Дата;
				Проводка.Организация  = СтруктураШапкиДокумента.Организация;
				Проводка.Сумма        = СтрокаТаблицы.ПроводкиСуммаНДСРегл;
				Проводка.Содержание   = НСтр("ru='НДС - налоговый кредит (ОС)';uk='ПДВ - податковий кредит (ОЗ)'",Локализация.КодЯзыкаИнформационнойБазы());
				Проводка.НомерЖурнала = НСтр("ru='ОС';uk='ОЗ'",Локализация.КодЯзыкаИнформационнойБазы());

				Проводка.СчетДт       = СтрокаТаблицы.СчетУчетаНДС;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Контрагенты",        СтруктураШапкиДокумента.Контрагент);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Договоры",           СтруктураШапкиДокумента.ДоговорКонтрагента);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"ДокументыРасчетовСКонтрагентами", НалоговыйУчет.ОпределитьСделкуНалоговыйУчет(СтруктураШапкиДокумента, Ссылка, Сделка));

				Проводка.СчетКт       = СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Контрагенты",СтруктураШапкиДокумента.Контрагент);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Договоры",СтруктураШапкиДокумента.ДоговорКонтрагента);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"ДокументыРасчетовСКонтрагентами",УправлениеВзаиморасчетами.ОпределитьДокументРасчетовСКонтрагентом(Ссылка,Сделка));

				Если СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом.Валютный Тогда
					Проводка.ВалютаКт        = СтруктураШапкиДокумента.ВалютаВзаиморасчетов;
					Проводка.ВалютнаяСуммаКт = СтрокаТаблицы.ПроводкиСуммаНДСВал;
				КонецЕсли;
				
				НалоговыйУчет.РазбитьПроводкуПоНДСНаПервоеВтороеСобытие(ТаблицаПоВторомуСобытиюНал, ПроводкиБУ, Проводка, 
														 	  "Дт", СтруктураШапкиДокумента.СчетУчетаНДСПодтвержденный, 
															  СтруктураШапкиДокумента.ДоговорКонтрагента, 
															  НалоговыйУчет.ОпределитьСделкуНалоговыйУчет(СтруктураШапкиДокумента, Ссылка, Сделка), Сделка,
															  Перечисления.СобытияОжидаемыйИПодтвержденныйНДСПриобретений.Поступление,
															  СтрокаТаблицы.СтавкаНДС, СтрокаТаблицы.ДляХозяйственнойДеятельности, СтрокаТаблицы.ВидДеятельностиНДС, ?(Дата < '20080101', Ложь, СтрокаТаблицы.Амортизируется),
															  СтрокаТаблицы.ПроводкиСуммаНДСВал);

			КонецЕсли; // Проводка по НДС
						
		КонецЦикла; // Проводки по поступлению ОС
		
		// Проводки по поступлению объектов стоительства
		Для каждого СтрокаТаблицы Из ТаблицаПоОбъектамСтроительства Цикл

			Проводка = ПроводкиБУ.Добавить();

			Проводка.Период                  = Дата;
			Проводка.Организация             = СтруктураШапкиДокумента.Организация;
			Проводка.НомерЖурнала           = НСтр("ru='ОС';uk='ОЗ'",Локализация.КодЯзыкаИнформационнойБазы());
			Проводка.Содержание              = НСтр("ru='Затраты на приобретение объектов строительства';uk=""Витрати на придбання об'єктів будівництва""",Локализация.КодЯзыкаИнформационнойБазы());

			
			Проводка.НалоговоеНазначениеДт   = СтрокаТаблицы.НалоговоеНазначение;
			Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыльДо2015 И
				 СтруктураШапкиДокумента.НеОтноситьНаЗатратыПоНУ = Ложь И 
				 СтрокаТаблицы.НалоговоеНазначение <> Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяНеХозДеятельность Тогда
				 
				 Проводка.СуммаНУДт = НалоговыйУчет.УчестьСуммуАвансаДо01042011(СтруктураШапкиДокумента, СтрокаТаблицы.ПроводкиСуммаБезНДСРегл);
				 
			КонецЕсли;
			
			Проводка.СчетДт                  = СтрокаТаблицы.СчетУчетаБУ;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ОбъектыСтроительства", СтрокаТаблицы.ОбъектСтроительства);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "СтатьиЗатрат",         СтрокаТаблицы.СтатьяЗатрат);

			Проводка.СчетКт                  = СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Контрагенты",        СтруктураШапкиДокумента.Контрагент);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Договоры",           СтруктураШапкиДокумента.ДоговорКонтрагента);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"ДокументыРасчетовСКонтрагентами", УправлениеВзаиморасчетами.ОпределитьДокументРасчетовСКонтрагентом(Ссылка,Сделка));

			Проводка.Сумма = СтрокаТаблицы.ПроводкиСуммаБезНДСРегл;
			Если СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом.Валютный Тогда
				Проводка.ВалютаКт        = СтруктураШапкиДокумента.ВалютаВзаиморасчетов;
				Проводка.ВалютнаяСуммаКт = СтрокаТаблицы.ПроводкиСуммаБезНДСВал;
			КонецЕсли;

			// Проводки по НДС
			Если СтруктураШапкиДокумента.ЕстьНДС И СтрокаТаблицы.ПроводкиСуммаНДСРегл > 0 Тогда

				Проводка = ПроводкиБУ.Добавить();

				Проводка.Период      = Дата;
				Проводка.Организация = СтруктураШапкиДокумента.Организация;
				Проводка.Сумма       = СтрокаТаблицы.ПроводкиСуммаНДСРегл;
				Проводка.Содержание  = НСтр("ru='НДС - налоговый кредит (объекты строительства)';uk=""ПДВ - податковий кредит (об'єкти будівництва)""",Локализация.КодЯзыкаИнформационнойБазы());

				Проводка.СчетДт      = СтрокаТаблицы.СчетУчетаНДС;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Контрагенты",        СтруктураШапкиДокумента.Контрагент);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Договоры",           СтруктураШапкиДокумента.ДоговорКонтрагента);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"ДокументыРасчетовСКонтрагентами", НалоговыйУчет.ОпределитьСделкуНалоговыйУчет(СтруктураШапкиДокумента, Ссылка, Сделка));

				Проводка.СчетКт      = СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Контрагенты",СтруктураШапкиДокумента.Контрагент);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Договоры",СтруктураШапкиДокумента.ДоговорКонтрагента);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"ДокументыРасчетовСКонтрагентами",УправлениеВзаиморасчетами.ОпределитьДокументРасчетовСКонтрагентом(Ссылка,Сделка));

				Если СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом.Валютный Тогда
					Проводка.ВалютаКт        = СтруктураШапкиДокумента.ВалютаВзаиморасчетов;
					Проводка.ВалютнаяСуммаКт = СтрокаТаблицы.ПроводкиСуммаНДСВал;
				КонецЕсли;

				НалоговыйУчет.РазбитьПроводкуПоНДСНаПервоеВтороеСобытие(ТаблицаПоВторомуСобытиюНал, ПроводкиБУ, Проводка, 
														   "Дт", СтруктураШапкиДокумента.СчетУчетаНДСПодтвержденный, 
														  СтруктураШапкиДокумента.ДоговорКонтрагента, 
														  НалоговыйУчет.ОпределитьСделкуНалоговыйУчет(СтруктураШапкиДокумента, Ссылка, Сделка), Сделка,
														  Перечисления.СобытияОжидаемыйИПодтвержденныйНДСПриобретений.Поступление,
														  СтрокаТаблицы.СтавкаНДС, СтрокаТаблицы.ДляХозяйственнойДеятельности, СтрокаТаблицы.ВидДеятельностиНДС, ?(Дата < '20080101', Ложь, СтрокаТаблицы.Амортизируется),
														  СтрокаТаблицы.ПроводкиСуммаНДСВал);
				
			КонецЕсли; // Проводка по НДС  
						
		КонецЦикла; // Проводки по поступлению объектов стоительства
	КонецЕсли;
	
	//Учет курсовых разниц
	Если (ВалютаДокумента <> мВалютаРегламентированногоУчета) тогда
		БухгалтерскийУчетРед12.ПереоценкаСчетовДокументаРегл(ЭтотОбъект,СтруктураШапкиДокумента, мВалютаРегламентированногоУчета,Отказ,Заголовок);
	КонецЕсли; // Учет курсовых разниц
	
	// ИНАГРО++
	Движения.Хозрасчетный.ВыполнитьДействияПередЗаписьюДвижений();
	
	ИНАГРО_Общий.ИНАГРО_ДвиженияЗатратыОрганизации_Приход(СтруктураШапкиДокумента, Движения);
	
	Если ИНАГРО_ОбщийВызовСервераПовтИсп.ЕстьБСПУ() Тогда
		//Если ИНАГРО_ВидПоступления = Перечисления.ИНАГРО_ВидыПоступленияТоваров.НаСклад Тогда
			ИНАГРО_Общий.ИНАГРО_ВедомостьДвиженийПриход(Движения, ТаблицаПоТоварам, СтруктураШапкиДокумента);
		//КонецЕсли; 
	КонецЕсли; 
		
    Если ИНАГРО_ВидПоступления = Перечисления.ИНАГРО_ВидыПоступленияТоваров.ПоОрдеру Тогда
        НаборДвижений = Движения.ИНАГРО_ТоварыНаСкладах;
        
        // Получим таблицу значений, совпадающую со структурой набора записей регистра.
        ТаблицаДвижений = НаборДвижений.ВыгрузитьКолонки();
        
        // Заполним таблицу движений.
        ОбщегоНазначенияБПВызовСервера.ЗагрузитьВТаблицуЗначений(ТаблицаПоТоварам, ТаблицаДвижений);
        
        //// Недостающие поля.
        ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.Организация, "Организация");
        НаборДвижений.мПериод          = Дата;
        НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;
        
        // Проверка остатков при оперативном проведении.
        Если РежимПроведения = РежимПроведенияДокумента.Оперативный Тогда
            НаборДвижений.КонтрольОстатков(ЭтотОбъект, "Товары", СтруктураШапкиДокумента, Отказ, Заголовок);
        КонецЕсли;
        
        Если Не Отказ Тогда
            Движения.ИНАГРО_ТоварыНаСкладах.ВыполнитьРасход();
        КонецЕсли;
        
        // ТАРА ПО РЕГИСТРУ ТоварыКПолучениюНаСклады
        НаборДвижений = Движения.ИНАГРО_ТоварыНаСкладах;
        
        // Получим таблицу значений, совпадающую со структурой набора записей регистра.
        ТаблицаДвижений = НаборДвижений.ВыгрузитьКолонки();
        
        ОбщегоНазначенияБПВызовСервера.ЗагрузитьВТаблицуЗначений(ТаблицаПоТаре, ТаблицаДвижений);
        
        // Недостающие поля.
        ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.Организация, "Организация");
        ТаблицаДвижений.ЗаполнитьЗначения(Истина,                              "ВозвратнаяТара");
        
        НаборДвижений.мПериод            = Дата;
        НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;
        
        // Проверка остатков при оперативном проведении.
        Если РежимПроведения = РежимПроведенияДокумента.Оперативный  Тогда
            НаборДвижений.КонтрольОстатков(ЭтотОбъект, "ВозвратнаяТара", СтруктураШапкиДокумента, Отказ, Заголовок);
        КонецЕсли;
        
        Если Не Отказ Тогда
            Движения.ИНАГРО_ТоварыНаСкладах.ВыполнитьРасход();
        КонецЕсли;
    КонецЕсли;
	
	Если СтруктураШапкиДокумента.ИНАГРО_УказатьОС Тогда
		ИНАГРО_Транспорт.ИНАГРО_ДвижениеПоМатериаламСписаннымНаТранспорт(Движения, ТаблицаПоУслугам, СтруктураШапкиДокумента);
	КонецЕсли;
	// ИНАГРО--
	
КонецПроцедуры // ДвиженияПоРегистрам()

// Процедура формирует структуру шапки документа и дополнительных полей.
//
Процедура ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента) Экспорт
	
	// Дерево значений, содержащее имена необходимых полей в запросе по шапке.
	Перем ДеревоПолейЗапросаПоШапке;
	
	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента = ОбщегоНазначенияРед12.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);

	// Заполним по шапке документа дерево параметров, нужных при проведении.
	ДеревоПолейЗапросаПоШапке = ОбщегоНазначенияРед12.СформироватьДеревоПолейЗапросаПоШапке();
	ОбщегоНазначенияРед12.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "Организация"          , "ДоговорОрганизация");
	ОбщегоНазначенияРед12.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "ВидДоговора"          , "ВидДоговора");
	ОбщегоНазначенияРед12.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Склад"             ,   "ТипСклада"            , "ТипСклада");
	ОбщегоНазначенияРед12.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "СложныйНалоговыйУчет"	, "СложныйНалоговыйУчет");
	ОбщегоНазначенияРед12.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "ВедениеВзаиморасчетовНУ", "ВедениеВзаиморасчетовНУ");
	ОбщегоНазначенияРед12.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "СхемаНалоговогоУчета"   , "СхемаНалоговогоУчета");
	
	ОбщегоНазначенияРед12.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "НеОтноситьНаЗатратыПоНУ"   , "НеОтноситьНаЗатратыПоНУ");
	
	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа
	СтруктураШапкиДокумента = УправлениеЗапасами.СформироватьЗапросПоДеревуПолей(ЭтотОбъект, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, );
	
КонецПроцедуры // ПодготовитьСтруктуруШапкиДокумента()

// Процедура формирует таблицы документа.
//
Процедура ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоТаре, ТаблицаПоОборудованию, ТаблицаПоУслугам, ТаблицаПоОбъектамСтроительства, ТаблицаПоБланкам, Отказ, Заголовок) Экспорт
	
	// Получим необходимые данные для проведения и проверки заполенения данные по табличной части "Товары".
	СтруктураПолей = Новый Структура;
	СтруктураСложныхПолей = Новый Структура;
	СтруктураПолей.Вставить("Номенклатура", "Номенклатура");
	СтруктураПолей.Вставить("Количество"  , "Количество * Коэффициент");
	СтруктураПолей.Вставить("Сумма"       , "Сумма");
	СтруктураПолей.Вставить("СтавкаНДС"   , "СтавкаНДС");
	СтруктураПолей.Вставить("НДС"         , "СуммаНДС");
	СтруктураПолей.Вставить("Услуга"      , "Номенклатура.Услуга");
	СтруктураПолей.Вставить("БланкСтрогогоУчета", "Номенклатура.БланкСтрогогоУчета");

	// Дополним полями, нужными для регл.
	СтруктураПолей.Вставить("СчетУчетаБУ"     , "СчетУчетаБУ");
	СтруктураПолей.Вставить("СчетУчетаБУЗабалансовый", "СчетУчетаБУ.Забалансовый");
	
	Если РозницаВПродажныхЦенах Тогда
		СтруктураПолей.Вставить("СуммаВРознице", "СуммаВРознице");
		СтруктураПолей.Вставить("СтавкаНДСВРознице" , "СтавкаНДСВРознице");
	КонецЕсли;

	СтруктураПолей.Вставить("НалоговоеНазначение"     	, "НалоговоеНазначение");
	СтруктураПолей.Вставить("ВидДеятельностиНДС"     	, "НалоговоеНазначение.ВидДеятельностиНДС");
	
	СтруктураПолей.Вставить("СчетУчетаНДС"    	, "Ссылка.СчетУчетаНДС");
	
	// ИНАГРО++
	СтруктураПолей.Вставить("ДокументОприходования", "Ссылка"); // Для рег.ИНАГРО_ЗакупкиОрганизаций
	
	Если ИНАГРО_ВидПоступления = Перечисления.ИНАГРО_ВидыПоступленияТоваров.ПоОрдеру И ИНАГРО_ОрдерВТЧ Тогда
		СтруктураПолей.Вставить("Склад", "ИНАГРО_Ордер.Склад");
	ИначеЕсли ИНАГРО_ВидПоступления = Перечисления.ИНАГРО_ВидыПоступленияТоваров.ПоОрдеру Тогда
		СтруктураПолей.Вставить("Склад", "Ссылка.Склад.Склад");
	ИначеЕсли ИНАГРО_ВидПоступления = Перечисления.ИНАГРО_ВидыПоступленияТоваров.НаСклад И ИНАГРО_СкладВТЧ Тогда
		СтруктураПолей.Вставить("Склад", "ИНАГРО_Склад");
	Иначе	 
		СтруктураПолей.Вставить("Склад", "Ссылка.Склад");
	КонецЕсли; 
	// ИНАГРО--
	
	РезультатЗапросаПоТоварам = ОбщегоНазначенияРед12.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураПолей, ,СтруктураСложныхПолей);

	// Получим необходимые данные для проведения и проверки заполенения данные по табличной части "БланкиСтрогогоУчета".
	СтруктураПолей = Новый Структура;
	СтруктураСложныхПолей = Новый Структура;
	СтруктураПолей.Вставить("Номенклатура", "Номенклатура");
	СтруктураПолей.Вставить("Количество"  , "Количество * Коэффициент");
	СтруктураПолей.Вставить("Сумма"       , "Сумма");
	СтруктураПолей.Вставить("СтавкаНДС"   , "СтавкаНДС");
	СтруктураПолей.Вставить("НДС"         , "СуммаНДС");
	СтруктураПолей.Вставить("Услуга"      , "Номенклатура.Услуга");
	СтруктураПолей.Вставить("БланкСтрогогоУчета", "Номенклатура.БланкСтрогогоУчета");

	// Дополним полями, нужными для регл.
	СтруктураПолей.Вставить("СчетУчетаБУ"     , "СчетУчетаБУ");
	СтруктураПолей.Вставить("СчетУчетаЗабалансовыйБУ", "СчетУчетаЗабалансовыйБУ");
	
	СтруктураПолей.Вставить("НалоговоеНазначение"     	, "НалоговоеНазначение");
	СтруктураПолей.Вставить("ВидДеятельностиНДС"     	, "НалоговоеНазначение.ВидДеятельностиНДС");
	
	СтруктураПолей.Вставить("СуммаНоминальная", "СуммаНоминальная");
	СтруктураПолей.Вставить("СчетУчетаНДС"    	, "Ссылка.СчетУчетаНДС");

	РезультатЗапросаПоБланкам = ОбщегоНазначенияРед12.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "БланкиСтрогогоУчета", СтруктураПолей,,СтруктураСложныхПолей);
		
	
	// Получим необходимые данные для проведения и проверки заполенения данные 
	// по табличной части "Возвратная тара".
	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("Номенклатура", "Номенклатура");
	СтруктураПолей.Вставить("Услуга"      , "Номенклатура.Услуга");
	СтруктураПолей.Вставить("БланкСтрогогоУчета", "Номенклатура.БланкСтрогогоУчета");
	СтруктураПолей.Вставить("Количество"  , "Количество");
	СтруктураПолей.Вставить("Сумма"       , "Сумма");

	// Дополним полями
	СтруктураПолей.Вставить("СчетУчетаБУ", "СчетУчетаБУ");
	СтруктураПолей.Вставить("НалоговоеНазначение"     	, "НалоговоеНазначение");
	СтруктураПолей.Вставить("ВидДеятельностиНДС"     	, "НалоговоеНазначение.ВидДеятельностиНДС");
	
	// ИНАГРО++
	СтруктураПолей.Вставить("ДокументОприходования", "Ссылка"); // Для рег.ИНАГРО_ЗакупкиОрганизаций 
	
	Если ИНАГРО_ВидПоступления = Перечисления.ИНАГРО_ВидыПоступленияТоваров.ПоОрдеру И ИНАГРО_ОрдерВТЧ Тогда
		СтруктураПолей.Вставить("Склад", "ИНАГРО_Ордер.Склад");
	ИначеЕсли ИНАГРО_ВидПоступления = Перечисления.ИНАГРО_ВидыПоступленияТоваров.ПоОрдеру Тогда
		СтруктураПолей.Вставить("Склад", "Ссылка.Склад.Склад");
	ИначеЕсли ИНАГРО_ВидПоступления = Перечисления.ИНАГРО_ВидыПоступленияТоваров.НаСклад И ИНАГРО_СкладВТЧ Тогда
		СтруктураПолей.Вставить("Склад", "ИНАГРО_Склад");
	Иначе	 
		СтруктураПолей.Вставить("Склад", "Ссылка.Склад");
	КонецЕсли; 
	// ИНАГРО--
	
	РезультатЗапросаПоТаре = ОбщегоНазначенияРед12.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "ВозвратнаяТара", СтруктураПолей);

	// Получим необходимые данные для проведения и проверки заполенения данные 
	// по табличной части "Услуги".
	СтруктураПолей = Новый Структура;
	СтруктураСложныхПолей = Новый Структура;
	СтруктураПолей.Вставить("Номенклатура", "Номенклатура");
	СтруктураПолей.Вставить("Количество"  , "Количество");
	СтруктураПолей.Вставить("Сумма"       , "Сумма");
	СтруктураПолей.Вставить("СтавкаНДС"   , "СтавкаНДС");
	СтруктураПолей.Вставить("НДС"         , "СуммаНДС");
	СтруктураПолей.Вставить("Содержание"  , "Содержание");
	СтруктураПолей.Вставить("Услуга"      , "Номенклатура.Услуга");
	СтруктураПолей.Вставить("БланкСтрогогоУчета", "Номенклатура.БланкСтрогогоУчета");

	// Дополним полями
	СтруктураПолей.Вставить("СчетЗатрат",   	"СчетЗатрат" );
	СтруктураПолей.Вставить("Субконто1",    	"Субконто1");
	СтруктураПолей.Вставить("Субконто2",    	"Субконто2");
	СтруктураПолей.Вставить("Субконто3",    	"Субконто3");

	СтруктураПолей.Вставить("НалоговоеНазначение"     	, "НалоговоеНазначение");
	СтруктураПолей.Вставить("ВидДеятельностиНДС"     	, "НалоговоеНазначение.ВидДеятельностиНДС");
	СтруктураПолей.Вставить("НалоговоеНазначениеДоходовИЗатрат", "НалоговоеНазначениеДоходовИЗатрат");
	
	СтруктураПолей.Вставить("СчетУчетаНДС"    	, "Ссылка.СчетУчетаНДС");

	СтруктураПолей.Вставить("ОсновноеСредство", "ИНАГРО_ОсновноеСредство"); // ИНАГРО

	РезультатЗапросаПоУслугам = ОбщегоНазначенияРед12.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Услуги", СтруктураПолей,,СтруктураСложныхПолей);

	// Получим необходимые данные для проведения и проверки заполенения данные 
	// по табличной части "Оборудование".
	СтруктураПолей = Новый Структура;
	СтруктураСложныхПолей = Новый Структура;
	СтруктураПолей.Вставить("Номенклатура", "Номенклатура");
	СтруктураПолей.Вставить("Количество"  , "Количество * Коэффициент");
	СтруктураПолей.Вставить("Сумма"       , "Сумма");
	СтруктураПолей.Вставить("СтавкаНДС"   , "СтавкаНДС");
	СтруктураПолей.Вставить("НДС"         , "СуммаНДС");

	// Дополним полями
	СтруктураПолей.Вставить("СчетУчетаБУ",  "СчетУчетаБУ");
	
	СтруктураПолей.Вставить("НалоговоеНазначение"     	, "НалоговоеНазначение");
	СтруктураПолей.Вставить("ВидДеятельностиНДС"     	, "НалоговоеНазначение.ВидДеятельностиНДС");
	
	СтруктураПолей.Вставить("СчетУчетаНДС"    	, "Ссылка.СчетУчетаНДС");
	
	// ИНАГРО++
	СтруктураПолей.Вставить("ДокументОприходования", "Ссылка"); // Для рег.ИНАГРО_ЗакупкиОрганизаций
	
	Если ИНАГРО_ВидПоступления = Перечисления.ИНАГРО_ВидыПоступленияТоваров.ПоОрдеру Тогда 
		СтруктураПолей.Вставить("Склад", "Ссылка.Склад.Склад");
	Иначе	 
		СтруктураПолей.Вставить("Склад", "Ссылка.Склад");
	КонецЕсли; 
	// ИНАГРО--

	РезультатЗапросаПоОборудованию = ОбщегоНазначенияРед12.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Оборудование", СтруктураПолей,,СтруктураСложныхПолей);

	// Получим необходимые данные для проведения и проверки заполенения данные 
	// по табличной части "ОбъектСтроительства".
	СтруктураПолей = Новый Структура;
	СтруктураСложныхПолей = Новый Структура;
	СтруктураПолей.Вставить("ОбъектСтроительства", "ОбъектСтроительства");
	СтруктураПолей.Вставить("СтатьяЗатрат"       , "СтатьяЗатрат");
	СтруктураПолей.Вставить("Сумма"              , "Сумма");
	СтруктураПолей.Вставить("СтавкаНДС"          , "СтавкаНДС");
	СтруктураПолей.Вставить("НДС"                , "СуммаНДС");

	СтруктураПолей.Вставить("СчетУчетаБУ",  "СчетУчетаБУ");
	
	СтруктураПолей.Вставить("НалоговоеНазначение"     	, "НалоговоеНазначение");
	СтруктураПолей.Вставить("ОбъектСтроительстваНалоговоеНазначение", "ОбъектСтроительства.НалоговоеНазначение");
	
	СтруктураПолей.Вставить("ВидДеятельностиНДС"     	, "НалоговоеНазначение.ВидДеятельностиНДС");
	
	СтруктураПолей.Вставить("СчетУчетаНДС"    	, "Ссылка.СчетУчетаНДС");

	СтруктураПолей.Вставить("ДокументОприходования", "Ссылка"); // ИНАГРО Для рег.ИНАГРО_ЗакупкиОрганизаций
	
	РезультатЗапросаПоОбъектамСтроительства = ОбщегоНазначенияРед12.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "ОбъектыСтроительства", СтруктураПолей,,СтруктураСложныхПолей);

	ПогрешностиОкругления     = Новый Соответствие;
	ПогрешностиОкругленияТара = Новый Соответствие;
	
	// Подготовим таблицы товаров для проведения.
	ТаблицаПоТоварам      = ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента, ПогрешностиОкругления);
	ТаблицаПоТаре         = ПодготовитьТаблицуТары(РезультатЗапросаПоТаре, СтруктураШапкиДокумента, ПогрешностиОкругленияТара);
	ТаблицаПоОборудованию = ПодготовитьТаблицуОборудование(РезультатЗапросаПоОборудованию, СтруктураШапкиДокумента, ПогрешностиОкругления);
	
	ТаблицаПоУслугам      = ПодготовитьТаблицуУслуг(РезультатЗапросаПоУслугам, СтруктураШапкиДокумента, ПогрешностиОкругления);
	
	ТаблицаПоОбъектамСтроительства = ПодготовитьТаблицуОбъектовСтроительства(РезультатЗапросаПоОбъектамСтроительства, СтруктураШапкиДокумента, ПогрешностиОкругления);
	ТаблицаПоБланкам 	  = ПодготовитьТаблицуБланков(РезультатЗапросаПоБланкам, СтруктураШапкиДокумента, ПогрешностиОкругления);
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьВозвратнуюТару") И ТаблицаПоТаре.Количество() > 0 Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru='В настройках параметров учета отключен параметр ""Ведется учет возвратной тары"". Движения по возвратной таре не будут сформированы!';uk='В настройках параметрів обліку вимкнений параметр ""Ведеться облік зворотної тари"". Рухи по зворотній тарі не будуть сформовані!'"
			),	
			ЭтотОбъект, 
			"ВозвратнаяТара", 
			"Объект"
		);
		
		ТаблицаПоТаре.Очистить();
		
	КонецЕсли;
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьБланкиСтрогогоУчета") И ТаблицаПоБланкам.Количество() > 0 Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru='В настройках параметров учета отключен параметр ""Ведется учет бланков строгого учета"". Движения по бланкам строгого учета не будут сформированы!';uk='В настройках параметрів обліку вимкнений параметр ""Ведеться облік бланків суворого обліку"". Рухи бланків суворого обліку не будуть сформовані!'"
			),	
			ЭтотОбъект, 
			"БланкиСтрогогоУчета", 
			"Объект"
		);
		
		ТаблицаПоБланкам.Очистить();
		
	КонецЕсли;
	

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ


Процедура ОбновитьПараметрыУчетнойПолитики()

	мУчетнаяПолитика = Новый Структура;
	мУчетнаяПолитика.Вставить("ЕстьНалогНаПрибыльДо2015" , УчетнаяПолитика.ПлательщикНалогаНаПрибыльДо2015(Организация, НачалоМесяца(Дата)));
	мУчетнаяПолитика.Вставить("ЕстьНДС"            , УчетнаяПолитика.ПлательщикНДС(Организация, НачалоМесяца(Дата)));
	
	БУ = ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахНТТ.ПолучитьОбъект();
	мИспользоватьОборотнуюНоменклатуру = ?(БУ.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура, "ВидСубконто") = Неопределено, Ложь, Истина);
	мРазделятьПоСтавкамНДС  		   = ?(БУ.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтавкиНДС, 	"ВидСубконто") = Неопределено, Ложь, Истина);

	СпособОценкиТоваровВРознице = УчетнаяПолитика.СпособОценкиТоваровВРознице(Организация, НачалоМесяца(Дата));
	мУчетВПродажныхЦенах = (СпособОценкиТоваровВРознице = Перечисления.СпособыОценкиТоваровВРознице.ПоПродажнойСтоимости);
	
	СпособОценкиМПЗ  = УчетнаяПолитика.СпособОценкиМПЗ(Организация, НачалоМесяца(Дата));
	ПартионныйУчетБУ = (СпособОценкиМПЗ = Перечисления.СпособыОценки.ФИФО ИЛИ СпособОценкиМПЗ = Перечисления.СпособыОценки.ЛИФО);								
	
	РозницаВПродажныхЦенах = ОпределитьРозницаВПродажныхЦенах(); // ИНАГРО	
		
КонецПроцедуры

Процедура ЗаполнитьПоДокументуОснованию(Основание)

	Если ТипЗнч(Основание) = Тип("ДокументСсылка.СчетНаОплатуПоставщика") Тогда
		
		// Заполним реквизиты из стандартного набора по документу основанию.
		ЗаполнениеДокументов.ЗаполнитьПоОснованию(ЭтотОбъект, Основание);
		
		ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ПокупкаКомиссия;
		
		Если Основание.ВидОперации = Перечисления.ВидыОперацийСчетНаОплатуПоставщика.ОбъектыСтроительства Тогда
			ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ОбъектыСтроительства;
		ИначеЕсли Основание.ВидОперации = Перечисления.ВидыОперацийСчетНаОплатуПоставщика.Оборудование Тогда
			ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Оборудование;
		КонецЕсли;
		
		// Сделку и табличные части заполняем только если взаиморасчеты ведутся не по расчетным документам.
		Если ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоРасчетнымДокументам Тогда
			Сделка = Основание;
		КонецЕсли;		
		
		Если НЕ ЗначениеЗаполнено(Склад) Тогда
			Склад = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновнойСклад");
		КонецЕсли;
		
		СкопироватьТовары(Основание);
		СкопироватьВозвратнуюТару(Основание);
		СкопироватьУслуги(Основание);
		СкопироватьОборудование(Основание);
		СкопироватьОбъектыСтроительства(Основание);
		
		Документы.ПоступлениеТоваровУслуг.ЗаполнитьСчетаУчетаВТабличнойЧасти(ЭтотОбъект, "Оборудование");		
		Документы.ПоступлениеТоваровУслуг.ЗаполнитьСчетаУчетаВТабличнойЧасти(ЭтотОбъект, "Товары");		
		Документы.ПоступлениеТоваровУслуг.ЗаполнитьСчетаУчетаВТабличнойЧасти(ЭтотОбъект, "Услуги");		
		Документы.ПоступлениеТоваровУслуг.ЗаполнитьСчетаУчетаВТабличнойЧасти(ЭтотОбъект, "ВозвратнаяТара");		
		Документы.ПоступлениеТоваровУслуг.ЗаполнитьСчетаУчетаВТабличнойЧасти(ЭтотОбъект, "БланкиСтрогогоУчета");		
		Документы.ПоступлениеТоваровУслуг.ЗаполнитьСчетаУчетаВТабЧастиПоОбъектамСтроительства(ЭтотОбъект);
		
	// ИНАГРО++
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ИНАГРО_ПриходныйОрдерНаТовары") Тогда
		
		// Заполним реквизиты из стандартного набора по документу основанию.
		ЗаполнениеДокументов.ЗаполнитьПоОснованию(ЭтотОбъект, Основание);
		
		ВидОперации             = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ПокупкаКомиссия;			
		ИНАГРО_ВидПоступления   = Перечисления.ИНАГРО_ВидыПоступленияТоваров.ПоОрдеру;			
		Склад                   = Основание;
		
		СписокВидовДоговоров = Новый СписокЗначений;
		
		Если ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ВПереработку Тогда
			СписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПокупателем);
		Иначе
			СписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком);
			СписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомитентом);
			СписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.Бартерный);
		КонецЕсли;	
		
		ЗаполнениеДокументов.ПриИзмененииЗначенияКонтрагента(ЭтотОбъект, СписокВидовДоговоров);
		
		ТипЦен                  = ДоговорКонтрагента.ТипЦен;
		СуммаВключаетНДС        = ?(ЗначениеЗаполнено(ТипЦен), ТипЦен.ЦенаВключаетНДС, Истина);		
		ВалютаДокумента         = ДоговорКонтрагента.ВалютаВзаиморасчетов;			
		
		// Курс должен быть на дату документа основания
		СтруктураКурсаДокумента = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаДокумента, Основание.Дата);			
		КурсВзаиморасчетов      = СтруктураКурсаДокумента.Курс;
		КратностьВзаиморасчетов = СтруктураКурсаДокумента.Кратность;
		
		// Заполним табличные части по приходному ордеру на товары.
		Документы.ПоступлениеТоваровУслуг.ЗаполнитьПоПриходномуОрдеру(ЭтотОбъект, "Товары",         Основание);
		Документы.ПоступлениеТоваровУслуг.ЗаполнитьПоПриходномуОрдеру(ЭтотОбъект, "ВозвратнаяТара", Основание);
	// ИНАГРО--
		
	КонецЕсли;
	
КонецПроцедуры	

Процедура СкопироватьТовары(Основание)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Основание);
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	СчетНаОплатуПоставщика.Номенклатура,
	|	СчетНаОплатуПоставщика.ЕдиницаИзмерения,
	|	СчетНаОплатуПоставщика.Цена,
	|	СчетНаОплатуПоставщика.Сумма,
	|	СчетНаОплатуПоставщика.СтавкаНДС,
	|	СчетНаОплатуПоставщика.СуммаНДС,
	|	СчетНаОплатуПоставщика.Коэффициент,
	|	СчетНаОплатуПоставщика.Количество
	|ИЗ
	|	Документ.СчетНаОплатуПоставщика.Товары КАК СчетНаОплатуПоставщика
	|
	|ГДЕ
	|	СчетНаОплатуПоставщика.Ссылка = &Ссылка";
	Товары.Загрузить(Запрос.Выполнить().Выгрузить());

КонецПроцедуры

Процедура СкопироватьВозвратнуюТару(Основание)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Основание);
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	СчетНаОплатуПоставщика.НомерСтроки,
	|	СчетНаОплатуПоставщика.Номенклатура,
	|	СчетНаОплатуПоставщика.Количество,
	|	СчетНаОплатуПоставщика.Сумма,
	|	СчетНаОплатуПоставщика.Цена
	|ИЗ
	|	Документ.СчетНаОплатуПоставщика.ВозвратнаяТара КАК СчетНаОплатуПоставщика
	|
	|ГДЕ
	|	СчетНаОплатуПоставщика.Ссылка = &Ссылка";
	ВозвратнаяТара.Загрузить(Запрос.Выполнить().Выгрузить());

КонецПроцедуры

Процедура СкопироватьУслуги(Основание)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Основание);
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	СчетНаОплатуПоставщика.НомерСтроки,
	|	СчетНаОплатуПоставщика.Содержание,
	|	СчетНаОплатуПоставщика.Количество,
	|	СчетНаОплатуПоставщика.Цена,
	|	СчетНаОплатуПоставщика.Сумма,
	|	СчетНаОплатуПоставщика.СтавкаНДС,
	|	СчетНаОплатуПоставщика.СуммаНДС,
	|	СчетНаОплатуПоставщика.Номенклатура
	|ИЗ
	|	Документ.СчетНаОплатуПоставщика.Услуги КАК СчетНаОплатуПоставщика
	|
	|ГДЕ
	|	СчетНаОплатуПоставщика.Ссылка = &Ссылка";
	Услуги.Загрузить(Запрос.Выполнить().Выгрузить());

КонецПроцедуры

Процедура СкопироватьОборудование(Основание)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Основание);
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	СчетНаОплатуПоставщика.НомерСтроки,
	|	СчетНаОплатуПоставщика.Номенклатура,
	|	СчетНаОплатуПоставщика.ЕдиницаИзмерения,
	|	СчетНаОплатуПоставщика.Коэффициент,
	|	СчетНаОплатуПоставщика.Количество,
	|	СчетНаОплатуПоставщика.Цена,
	|	СчетНаОплатуПоставщика.Сумма,
	|	СчетНаОплатуПоставщика.СтавкаНДС,
	|	СчетНаОплатуПоставщика.СуммаНДС
	|ИЗ
	|	Документ.СчетНаОплатуПоставщика.Оборудование КАК СчетНаОплатуПоставщика
	|
	|ГДЕ
	|	СчетНаОплатуПоставщика.Ссылка = &Ссылка";
	
	Оборудование.Загрузить(Запрос.Выполнить().Выгрузить());	
	
КонецПроцедуры	

Процедура СкопироватьОбъектыСтроительства(Основание)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Основание);
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	СчетНаОплатуПоставщика.НомерСтроки,
	|	СчетНаОплатуПоставщика.ОбъектСтроительства,
	|	СчетНаОплатуПоставщика.Сумма,
	|	СчетНаОплатуПоставщика.СтавкаНДС,
	|	СчетНаОплатуПоставщика.СуммаНДС
	|ИЗ
	|	Документ.СчетНаОплатуПоставщика.ОбъектыСтроительства КАК СчетНаОплатуПоставщика
	|
	|ГДЕ
	|	СчетНаОплатуПоставщика.Ссылка = &Ссылка";
	
	ОбъектыСтроительства.Загрузить(Запрос.Выполнить().Выгрузить());	
		
КонецПроцедуры	

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизтов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - структура, содержащая рексвизиты шапки документа и результаты запроса по шапке,
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, МассивНепроверяемыхРеквизитов)

	ЭтоКомиссия = ЗначениеЗаполнено(ДоговорКонтрагента) 
				И СтруктураШапкиДокумента.ВидДоговораКонтрагента = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом
				И ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ПокупкаКомиссия;
	ЭтоПереработка = ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ВПереработку;
	
	// ИНАГРО++
	Если НЕ ИНАГРО_УказатьОС ИЛИ ИНАГРО_ВТабличнойЧасти Тогда
		МассивНепроверяемыхРеквизитов.Добавить("ИНАГРО_ОсновноеСредство");
	КонецЕсли;	
	
	Если    (ИНАГРО_ВидПоступления = Перечисления.ИНАГРО_ВидыПоступленияТоваров.ПоОрдеру И ИНАГРО_ОрдерВТЧ)
		ИЛИ (ИНАГРО_ВидПоступления = Перечисления.ИНАГРО_ВидыПоступленияТоваров.НаСклад И ИНАГРО_СкладВТЧ)
		ИЛИ (Товары.Количество() + ВозвратнаяТара.Количество() + Оборудование.Количество() + БланкиСтрогогоУчета.Количество() = 0) Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Склад");
	КонецЕсли;
	// ИНАГРО-- 

	Если Товары.Количество() + ВозвратнаяТара.Количество() + Оборудование.Количество()+ БланкиСтрогогоУчета.Количество() = 0 Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Склад");
	КонецЕсли;

	Если ЭтоКомиссия ИЛИ ЭтоПереработка Тогда
		МассивНепроверяемыхРеквизитов.Добавить("СчетУчетаРасчетовСКонтрагентом");
	КонецЕсли;
	
	Если ВозвратнаяТара.Количество() = 0 Тогда
		МассивНепроверяемыхРеквизитов.Добавить("СчетУчетаРасчетовПоТаре");
	КонецЕсли;
	
	Если ЭтоПереработка ИЛИ НЕ СтруктураШапкиДокумента.ЕстьНДС Тогда
		МассивНепроверяемыхРеквизитов.Добавить("СчетУчетаНДС");
		МассивНепроверяемыхРеквизитов.Добавить("СчетУчетаНДСПодтвержденный");
	ИначеЕсли СтруктураШапкиДокумента.СложныйНалоговыйУчет И НЕ ЭтоКомиссия Тогда
	    МассивНепроверяемыхРеквизитов.Добавить("СчетУчетаНДСПодтвержденный");
	КонецЕсли;
	
	Если  (ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.БланкиСтрогогоУчета)
		И (СтруктураШапкиДокумента.ВидДоговораКонтрагента = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом) Тогда
		
		СтрокаСообщения = НСтр("ru='Для вида операции ""бланки строгого учета"" вид договора не может быть ""с комитентом""!';uk='Для виду операції ""бланки суворого обліку"" вид договору не може бути ""з комітентом""!'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения, ЭтотОбъект,"ДоговорКонтрагента",, Отказ);		
		
	КонецЕсли;
	
	Если  СтруктураШапкиДокумента.ЕстьНДС
		И СтруктураШапкиДокумента.ВидДоговораКонтрагента = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда
		
		Если НЕ СтруктураШапкиДокумента.СхемаНалоговогоУчета = Справочники.СхемыНалоговогоУчетаПоДоговорамКонтрагентов.СКомитентом_НК Тогда
			
			СтрокаСообщения = НСтр("ru='В договоре комиссии указана неправильная схема налогового учета! Используйте схему для периода с 2011 года!';uk='У договорі комісії зазначена неправильна схема податкового обліку! Використайте схему для періоду з 2011 року!'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения, ЭтотОбъект,"ДоговорКонтрагента", ,Отказ);		
			
		ИначеЕсли НЕ СтруктураШапкиДокумента.СложныйНалоговыйУчет Тогда
			
			СтрокаСообщения = НСтр("ru='По договорам комиссии с 2011 года в конфигурации реализован только ""сложный налоговый учет"". Установите соответствующий флаг в договоре с контрагентом!';uk='По договорах комісії з 2011 року в конфігурації реалізований тільки ""складний податковий облік"". Установіть відповідний прапорець у договорі з контрагентом!'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения, ЭтотОбъект,"ДоговорКонтрагента", ,Отказ);		
			
		КонецЕсли;
		
	КонецЕсли;
	


КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Проверяет правильность заполнения строк табличной части "Товары".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТоварам        - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  СтруктураШапкиДокумента - структура, содержащая рексвизиты шапки документа и результаты запроса по шапке
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиТовары(СтруктураШапкиДокумента, Отказ, МассивНепроверяемыхРеквизитов, ПроверяемыеРеквизиты) // ИНАГРО ПроверяемыеРеквизиты 
	
	НТТ = (СтруктураШапкиДокумента.РозницаВПродажныхЦенах И (СтруктураШапкиДокумента.ТипСклада = Перечисления.ТипыСкладов.НеавтоматизированнаяТорговаяТочка));
	АТТ = (СтруктураШапкиДокумента.РозницаВПродажныхЦенах И (СтруктураШапкиДокумента.ТипСклада = Перечисления.ТипыСкладов.РозничныйМагазин));
	
	Если СтруктураШапкиДокумента.РозницаВПродажныхЦенах Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Товары.СчетУчетаБУ");		
	КонецЕсли; 
	
	Если НЕ НТТ И НЕ (ИНАГРО_СкладВТЧ И ИНАГРО_ПоступлениеВРозницу) Тогда // ИНАГРО
		МассивНепроверяемыхРеквизитов.Добавить("Товары.СуммаВРознице");
		МассивНепроверяемыхРеквизитов.Добавить("Товары.СтавкаНДСВРознице");
	Иначе
		Если НЕ СтруктураШапкиДокумента.РазделятьПоСтавкамНДС Тогда
			МассивНепроверяемыхРеквизитов.Добавить("Товары.СтавкаНДСВРознице");
		КонецЕсли;
		МассивНепроверяемыхРеквизитов.Добавить("Товары.Номенклатура");
		МассивНепроверяемыхРеквизитов.Добавить("Товары.Количество");
		МассивНепроверяемыхРеквизитов.Добавить("Товары.ЕдиницаИзмерения");
	КонецЕсли;
	
	// ИНАГРО++
	Если ИНАГРО_ВидПоступления = Перечисления.ИНАГРО_ВидыПоступленияТоваров.ПоОрдеру И ИНАГРО_ОрдерВТЧ Тогда
		ПроверяемыеРеквизиты.Добавить("Товары.ИНАГРО_Ордер");
	ИначеЕсли ИНАГРО_ВидПоступления = Перечисления.ИНАГРО_ВидыПоступленияТоваров.НаСклад И ИНАГРО_СкладВТЧ Тогда
		ПроверяемыеРеквизиты.Добавить("Товары.ИНАГРО_Склад");
	КонецЕсли;
	// ИНАГРО--  
		
	Если ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ВПереработку Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Товары.Сумма");
	КонецЕсли;

	Если НЕ СтруктураШапкиДокумента.ЕстьНДС 
		ИЛИ ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ВПереработку Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Товары.НалоговоеНазначение");	
	КонецЕсли;
	
	Если    НЕ ВалютаДокумента = СтруктураШапкиДокумента.ВалютаРегламентированногоУчета
		ИЛИ НЕ СтруктураШапкиДокумента.ЕстьНДС 
		ИЛИ ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ВПереработку Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Товары.СтавкаНДС");	
	КонецЕсли;
	
	
	Если  НТТ Тогда
		// не предполагается поступление в розницу для "необлагаемой деятельности"
		Для Каждого СтрокаТаблицы Из Товары Цикл
				
			Префикс = "Товары[%1].";
			Префикс = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Префикс, Формат(СтрокаТаблицы.НомерСтроки - 1, "ЧН=0; ЧГ="));
			
			Если ЗначениеЗаполнено(СтрокаТаблицы.НалоговоеНазначение) Тогда
				Если СтрокаТаблицы.НалоговоеНазначение = Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяНеХозДеятельность Тогда
					
					Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.Номенклатура) Тогда
						СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='В строке %1 указано налоговое назначение по нехозяйственной деятельности. 
|Передача товаров в розницу возможна только по хозяйственной деятельности.';uk='У рядку %1 вказане податкове призначення по негосподарській діяльності. 
|Передача товарів у роздріб можлива тільки по господарській діяльності.'"), (Товары.Индекс(СтрокаТаблицы)+1));
					Иначе
						СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Для товара ""%1"" указано налоговое назначение по нехозяйственной деятельности. 
|Передача товаров в розницу возможна только по хозяйственной деятельности.';uk='Для товару ""%1"" вказано податкове призначення по негосподарській діяльності. 
|Передача товарів у роздріб можлива тільки по господарській діяльності.'"), СтрокаТаблицы.Номенклатура);
					КонецЕсли;							
					
					Поле = Префикс + "НалоговоеНазначение";
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения, ЭтотОбъект, Поле, , Отказ);
					
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	// проверим счета учета при поступлении на комиссию 
	ДолженБытьЗабалансовый =    (ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ПокупкаКомиссия и (СтруктураШапкиДокумента.ВидДоговораКонтрагента = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом))
							ИЛИ (ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ВПереработку);	
	Для Каждого СтрокаТаблицы Из Товары Цикл
		
		Префикс = "Товары[%1].";
		Префикс = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Префикс, Формат(СтрокаТаблицы.НомерСтроки - 1, "ЧН=0; ЧГ="));
		
		СчетУчетаБУЗабалансовый = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(СтрокаТаблицы.СчетУчетаБУ).Забалансовый;
		
		Если СчетУчетаБУЗабалансовый = (Не ДолженБытьЗабалансовый) Тогда
			
			ОпределяющийТекст = ?(ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ВПереработку,НСтр("ru='Для вида операции ""';uk='Для виду операції ""'")+ВидОперации+"""",НСтр("ru='Для вида договора ""';uk='Для виду договору ""'")+СтруктураШапкиДокумента.ВидДоговораКонтрагента+"""");
			
			Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.Номенклатура) Тогда
				ТекНомерСтроки = Товары.Индекс(СтрокаТаблицы)+1; 
				Если ДолженБытьЗабалансовый Тогда
					СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='В строке %1 указан балансовый  счет учета.	
|%2 можно указывать только забалансовые счета.';uk='У рядку %1 вказаний балансовий  рахунок.	
|%2 можна вказувати тільки забалансові рахунки.'"), ТекНомерСтроки, ОпределяющийТекст);
				Иначе				  
					СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='В строке %1 указан забалансовый  счет учета.	
|%2 можно указывать только балансовые счета.';uk='У рядку %1 вказаний забалансовий  рахунок.	
|%2 можна вказувати тільки балансові рахунки.'"), ТекНомерСтроки, ОпределяющийТекст);
				КонецЕсли;	
			Иначе
				Если ДолженБытьЗабалансовый Тогда
					СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Для товара ""%1"" указан балансовый  счет учета.	
|%2 можно указывать только забалансовые счета.';uk='Для товару ""%1"" вказано балансовий  рахунок .	
|%2 можна вказувати тільки забалансові рахунки.'"), СтрокаТаблицы.Номенклатура, ОпределяющийТекст);
				Иначе				  
					СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Для товара ""%1"" указан забалансовый  счет учета.	
|%2 можно указывать только балансовые счета.';uk='Для товару ""%1"" вказано забалансовий  рахунок.	
|%2 можна вказувати тільки балансові рахунки.'"), СтрокаТаблицы.Номенклатура, ОпределяющийТекст);
				КонецЕсли;	
			КонецЕсли;	
			
			Поле = Префикс + "СчетУчетаБУ";
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
			
		КонецЕсли;
	КонецЦикла;
	
	Если АТТ Тогда
		
		ПорядокСубконто = Новый Массив();
		ПорядокСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);
		ПорядокСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады);
		
		МассивНоменклатуры = Товары.ВыгрузитьКолонку("Номенклатура");
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Склад",           Склад);
		Запрос.УстановитьПараметр("КонецПериода",    Дата);
		Запрос.УстановитьПараметр("Организация",     Организация);
		Запрос.УстановитьПараметр("Счет",     		 ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахАТТ);
		Запрос.УстановитьПараметр("ПорядокСубконто", ПорядокСубконто);
		Запрос.УстановитьПараметр("Номенклатура", 	 МассивНоменклатуры);
		
		Запрос.УстановитьПараметр("НалоговыеНазначения", Товары.ВыгрузитьКолонку("НалоговоеНазначение"));
		
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Остатки.Субконто1 КАК Номенклатура,
		|	Остатки.НалоговоеНазначение КАК НалоговоеНазначение,
		|	СУММА(Остатки.СуммаОстатокДт) КАК СуммаОстаток,
		|	СУММА(Остатки.КоличествоОстатокДт) КАК КоличествоОстаток
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(
		|			&КонецПериода,
		|			Счет = &Счет,
		|			&ПорядокСубконто,
		|			НалоговоеНазначение В (&НалоговыеНазначения)
		|				И Организация = &Организация
		|				И Субконто1 В (&Номенклатура)
		|				И Субконто2 = &Склад) КАК Остатки
		|ГДЕ
		|	Остатки.КоличествоОстаток > 0
		|
		|СГРУППИРОВАТЬ ПО
		|	Остатки.Субконто1,
		|	Остатки.НалоговоеНазначение";
		
		ТаблицаУчетныхЦен = Запрос.Выполнить().Выгрузить();
		ТаблицаУчетныхЦен.Индексы.Добавить("Номенклатура, НалоговоеНазначение");

		Для Каждого СтрокаТаблицы Из Товары Цикл
			
			НайденныеСтроки = ТаблицаУчетныхЦен.НайтиСтроки(Новый Структура("Номенклатура, НалоговоеНазначение", СтрокаТаблицы.Номенклатура, СтрокаТаблицы.НалоговоеНазначение));
			Если НайденныеСтроки.Количество()> 0 Тогда
				СтрокаТаблицыЦен = НайденныеСтроки[0];
				УчетнаяЦена = Окр(?(СтрокаТаблицыЦен.КоличествоОстаток = 0, 0, СтрокаТаблицыЦен.СуммаОстаток / СтрокаТаблицыЦен.КоличествоОстаток),2,1);
			Иначе
				УчетнаяЦена = 0;
			КонецЕсли;
			РозничнаяЦена = Ценообразование.ПолучитьЦенуНоменклатуры(СтрокаТаблицы.Номенклатура, СтруктураШапкиДокумента.ТипЦенРозничнойТорговли, 
															Дата, СтруктураШапкиДокумента.ВалютаРегламентированногоУчета, 1, 1);
															
															
			Префикс = "Товары[%1].";
			Префикс = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Префикс, Формат(СтрокаТаблицы.НомерСтроки - 1, "ЧН=0; ЧГ="));
			
			ДопустимоеОтклонение = УчетнаяЦена * 0.001;
			СтрокаСообщения = "";
			
			Если РозничнаяЦена = 0 Тогда
				СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Для товара ""%1"" не установлена розничная цена.';uk='Для товару ""%1"" не встановлена роздрібна ціна.'"), СтрокаТаблицы.Номенклатура);
			ИначеЕсли УчетнаяЦена = 0 Тогда
				// Учетная цена неизвестна.
			ИначеЕсли РозничнаяЦена - УчетнаяЦена > ДопустимоеОтклонение
				ИЛИ РозничнаяЦена - УчетнаяЦена < - ДопустимоеОтклонение Тогда
				СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Для товара ""%1"" розничная цена (%2) не равна учетной цене(%3).
|измените розничную цену или проведите переоценку.';uk='Для товару ""%1"" роздрібна ціна (%2) не дорівнює обліковій ціні(%3).
|змініть роздрібну ціну або проведіть переоцінку.'"), СтрокаТаблицы.Номенклатура, РозничнаяЦена, УчетнаяЦена);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтрокаСообщения) Тогда
				Поле = Префикс + "Номенклатура";
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
			КонецЕсли;

		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиТовары()
 
// Проверяет правильность заполнения строк табличной части "Услуги".
//
// Параметры:
// Параметры: 
//  РезультатЗапросаПоУслугам - результат запроса, содержащий данные для проведения и проверки ТЧ Услуги
//  СтруктураШапкиДокумента   - структура, содержащая рексвизиты шапки документа и результаты запроса по шапке
//  Отказ                     - флаг отказа в проведении.
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиУслуги(СтруктураШапкиДокумента, Отказ, МассивНепроверяемыхРеквизитов, ПроверяемыеРеквизиты)

	Если НЕ СтруктураШапкиДокумента.ЕстьНДС Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Услуги.НалоговоеНазначение");
	КонецЕсли;
	
	Если    НЕ ВалютаДокумента = СтруктураШапкиДокумента.ВалютаРегламентированногоУчета
		ИЛИ НЕ СтруктураШапкиДокумента.ЕстьНДС Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Услуги.СтавкаНДС");
	КонецЕсли;
	
	БухгалтерскийУчет.ПроверитьЗаполнениеАналитикиЗатратТабличнойЧасти(ЭтотОбъект, "Услуги", НСтр("ru='Услуги';uk='Послуги'"), Отказ);	
    
	
	Если СтруктураШапкиДокумента.ЕстьНДС Тогда
		//Проверяем соответствует ли аналитика затрат налоговым назначениям в ТЧ Услуги
		БухгалтерскийУчет.ПроверитьСоответствиеАналитикиЗатратНалоговомуНазначению(ЭтотОбъект, "Услуги", НСтр("ru='Услуги';uk='Послуги'"), , Отказ);
	КонецЕсли;	
	
	Для каждого СтрокаТаблицы Из Услуги Цикл
		
		Префикс = "Услуги[%1].";
		Префикс = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Префикс, Формат(СтрокаТаблицы.НомерСтроки - 1, "ЧН=0; ЧГ="));
		
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.Номенклатура) Тогда
			ПроверяемыеРеквизиты.Добавить(Префикс + "Содержание");		
		КонецЕсли;
		
		Поле = Префикс + "Содержание";
		Если НЕ Отказ  Тогда
			
			Если  НЕ ЗначениеЗаполнено(СтрокаТаблицы.Номенклатура)
				И НЕ ЗначениеЗаполнено(СтрокаТаблицы.Содержание) Тогда
				
				СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='В строке ""%1"" табличной части ""Услуги"" не указана ни номенклатура ни содержание услуги!';uk='У рядку ""%1"" табличної частини ""Послуги"" не вказана ні номенклатура ні зміст послуги!'"), СтрокаТаблицы.НомерСтроки);
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
				
			КонецЕсли;
			
		КонецЕсли;	
		
		ХарактерЗатрат 			   = Неопределено;
		ЦелевоеНалоговоеНазначение = Неопределено;
		НалоговыйУчет.ОпределениеАналитикиНалоговогоУчетаВПроводкахДляЗатрат(СтрокаТаблицы, СтрокаТаблицы.СчетЗатрат, ХарактерЗатрат,
															       	 ЦелевоеНалоговоеНазначение, , 
																	 СтрокаТаблицы.НалоговоеНазначение,СтрокаТаблицы.НалоговоеНазначениеДоходовИЗатрат,
																	,Дата,,СтруктураШапкиДокумента.ЕстьНДС);	
		Поле = Префикс + "НалоговоеНазначение";
		Если НЕ Отказ И СтруктураШапкиДокумента.ЕстьНДС Тогда
			
			Если   ХарактерЗатрат = "ОПЗ"
				 И СтрокаТаблицы.НалоговоеНазначение = Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяНеХозДеятельность Тогда
				СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Для услуги в строке ""%1"" нельзя указывать нехозяйственное налоговое назначение (на 91 счете такое налоговое назначение не допустимо)!';uk='Для послуги в рядку ""%1"" не можна зазначати негосподарське податкове призначення (на 91 рахунку таке податкове призначення не припустиме)!'"), СтрокаТаблицы.НомерСтроки);
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
				
			КонецЕсли;
			
		КонецЕсли;	
		
		Если НЕ Отказ И СтруктураШапкиДокумента.ЕстьНалогНаПрибыльДо2015 Тогда
		
			Если НЕ ЗначениеЗаполнено(ЦелевоеНалоговоеНазначение) Тогда
				
				Если ХарактерЗатрат = "Затраты" Тогда
					СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Для услуги в строке ""%1"" не указано налоговое назначение затрат!';uk='Для послуги в рядку ""%1"" не зазначено податкове призначення витрат!'"), СтрокаТаблицы.НомерСтроки);
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
				ИначеЕсли ХарактерЗатрат = "Строительство" Тогда
					СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Для услуги в строке ""%1"" не указано налоговое назначение для объекта строительства или НМА!';uk='Для послуги в рядку ""%1"" не зазначено податкове призначення для об''єкта будівництва або НМА!'"), СтрокаТаблицы.НомерСтроки);
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
				ИначеЕсли ХарактерЗатрат = "Производство" Тогда
					СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Для услуги в строке ""%1"" не указано налоговое назначение в производстве для номенклатурной группы!';uk='Для послуги в рядку ""%1"" не зазначено податкове призначення у виробрництві для номенклатурної групи!'"), СтрокаТаблицы.НомерСтроки);
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
				ИначеЕсли ХарактерЗатрат = "РБП" Тогда
					СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Для услуги в строке ""%1"" не указано налоговое назначение для расходов будущих периодов!';uk='Для послуги в рядку ""%1"" не зазначено податкове призначення для витрат майбутніх періодів!'"), СтрокаТаблицы.НомерСтроки);
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
				Иначе
					СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Для услуги в строке ""%1"" невозможно определить налоговое назначение затрат для указанного счета затрат!';uk='Для послуги в рядку ""%1"" неможливо визначити податкове призначення витрат для вказанного рахунку витрат!'"), СтрокаТаблицы.НомерСтроки);
 					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения, ЭтотОбъект, Поле, "Объект");
				КонецЕсли;
				
			КонецЕсли;

			// нельзя по НДС указывать нехоз. деятельность, а по НП - хоз. деятельность
			Если НЕ Отказ И  СтруктураШапкиДокумента.ЕстьНДС Тогда
				
				НехозДеятельностьНДС = (СтрокаТаблицы.НалоговоеНазначение = Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяНеХозДеятельность);
				НехозДеятельностьНКУ = (ЦелевоеНалоговоеНазначение		  = Справочники.НалоговыеНазначенияАктивовИЗатрат.НКУ_НеХозДеятельность);
				
				Если НЕ СтрокаТаблицы.НалоговоеНазначение = ЦелевоеНалоговоеНазначение  
					  И НехозДеятельностьНДС <> НехозДеятельностьНКУ Тогда 
					СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Для услуги в строке ""%1"" нельзя указывать нехозяйственное налоговое назначение и одновременно хозяйственную деятельность по затратам (и наоборот)!';uk='Для послуги в рядку ""%1"" не можна зазначати негосподарське податкове призначення по НДВ і одночасно господарську діяльність по витратам (та навпаки)!'"), СтрокаТаблицы.НомерСтроки);
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;	 
		
КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиУслуги()

// Проверяет правильность заполнения строк табличной части "Возвратная тара".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТаре           - таблица значений, содержащая данные для проведения и проверки ТЧ "Возвратная тара",
//  СтруктураШапкиДокумента - структура, содержащая рексвизиты шапки документа и результаты запроса по шапке
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиВозвратнаяТара(СтруктураШапкиДокумента, Отказ, МассивНепроверяемыхРеквизитов, ПроверяемыеРеквизиты) // ИНАГРО ПроверяемыеРеквизиты
	
	// ИНАГРО++
	Если ИНАГРО_ВидПоступления = Перечисления.ИНАГРО_ВидыПоступленияТоваров.ПоОрдеру И ИНАГРО_ОрдерВТЧ Тогда
		ПроверяемыеРеквизиты.Добавить("ВозвратнаяТара.ИНАГРО_Ордер");
	ИначеЕсли ИНАГРО_ВидПоступления = Перечисления.ИНАГРО_ВидыПоступленияТоваров.НаСклад И ИНАГРО_СкладВТЧ Тогда
		ПроверяемыеРеквизиты.Добавить("ВозвратнаяТара.ИНАГРО_Склад");
	КонецЕсли;
	// ИНАГРО--  
	
	Если НЕ СтруктураШапкиДокумента.ЕстьНДС Тогда
		МассивНепроверяемыхРеквизитов.Добавить("ВозвратнаяТара.НалоговоеНазначение");
	КонецЕсли;

	Для каждого СтрокаТЧ из ВозвратнаяТара Цикл
		
		Префикс = "ВозвратнаяТара[%1].";
		Префикс = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Префикс, Формат(СтрокаТЧ.НомерСтроки - 1, "ЧН=0; ЧГ="));

		СтрокаНачалаСообщенияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='В строке номер ""%1"" табличной части ""Возвратная тара"": ';uk='У рядку номер ""%1"" табличної частини ""Зворотна тара"": '"), СокрЛП(СтрокаТЧ.НомерСтроки));

		Поле = Префикс + "СчетУчетаБУ";
		СчетУчетаБУЗабалансовый = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(СтрокаТЧ.СчетУчетаБУ).Забалансовый;
		Если СчетУчетаБУЗабалансовый Тогда

			СтрокаСообщения = НСтр("ru='указан забалансовый счет!';uk='вказано забалансовий рахунок!'");
            ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщения, ЭтотОбъект, Поле, "Объект", Отказ);

		КонецЕсли;

		Поле = Префикс + "НалоговоеНазначение";
		Если ЗначениеЗаполнено(СтрокаТЧ.НалоговоеНазначение) И СтруктураШапкиДокумента.ЕстьНДС Тогда
			
			Если СтрокаТЧ.НалоговоеНазначение = Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяНеХозДеятельность Тогда
				
				СтрокаСообщения = НСтр("ru=' указно налоговое назначение по нехозяйственной деятельности!';uk=' вказане податкове призначення по негосподарській діяльності!'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
				
			ИначеЕсли СтрокаТЧ.НалоговоеНазначение = Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_Пропорционально Тогда
				
				СтрокаСообщения = НСтр("ru=' указно налоговое назначение по пропорциональному НДС!';uk=' вказане податкове призначення по пропорційному ПДВ!'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
				
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;


КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиВозвратнаяТара()

// Проверяет правильность заполнения строк табличной части "Оборудование".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТоварам        - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  СтруктураШапкиДокумента - структура, содержащая рексвизиты шапки документа и результаты запроса по шапке
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиОборудование(СтруктураШапкиДокумента, Отказ, МассивНепроверяемыхРеквизитов)

	Если НЕ СтруктураШапкиДокумента.ЕстьНДС Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Оборудование.НалоговоеНазначение");
	КонецЕсли;
	
	Если    НЕ ВалютаДокумента = СтруктураШапкиДокумента.ВалютаРегламентированногоУчета
		ИЛИ НЕ СтруктураШапкиДокумента.ЕстьНДС Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Оборудование.СтавкаНДС");
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиОборудование()

// Проверяет правильность заполнения строк табличной части "Оборудование".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТоварам        - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  СтруктураШапкиДокумента - структура, содержащая рексвизиты шапки документа и результаты запроса по шапке
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиОбъектыСтроительства(СтруктураШапкиДокумента, Отказ, МассивНепроверяемыхРеквизитов)

	Если НЕ СтруктураШапкиДокумента.ЕстьНДС Тогда
		МассивНепроверяемыхРеквизитов.Добавить("ОбъектыСтроительства.НалоговоеНазначение");
	КонецЕсли;
	
	Если    НЕ ВалютаДокумента = СтруктураШапкиДокумента.ВалютаРегламентированногоУчета
		ИЛИ НЕ СтруктураШапкиДокумента.ЕстьНДС Тогда
		МассивНепроверяемыхРеквизитов.Добавить("ОбъектыСтроительства.СтавкаНДС");
	КонецЕсли;
	
	Если НЕ Отказ И  СтруктураШапкиДокумента.ЕстьНДС Тогда
		
		Запрос = Новый Запрос();
		Запрос.УстановитьПараметр("ОбъектыСтроительства", ОбъектыСтроительства.Выгрузить(,"ОбъектСтроительства"));
		Запрос.Текст = "ВЫБРАТЬ
		               |	ОбъектыСтроительства.ОбъектСтроительства
		               |ПОМЕСТИТЬ ОбъектыСтроительства
		               |ИЗ
		               |	&ОбъектыСтроительства КАК ОбъектыСтроительства
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	ОбъектыСтроительства.ОбъектСтроительства КАК ОбъектСтроительства,
		               |	Справочник.НалоговоеНазначение КАК ОбъектСтроительстваНалоговоеНазначение
		               |ИЗ
		               |	ОбъектыСтроительства КАК ОбъектыСтроительства
		               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ОбъектыСтроительства КАК Справочник
		               |		ПО (Справочник.Ссылка = ОбъектыСтроительства.ОбъектСтроительства)";
					   
		ТаблицаНалоговыхНазначений = Запрос.Выполнить().Выгрузить();					   
		ТаблицаНалоговыхНазначений.Индексы.Добавить("ОбъектСтроительства");
		
		Для каждого СтрокаТаблицы Из ОбъектыСтроительства Цикл
			
			Строка =  ТаблицаНалоговыхНазначений.Найти(СтрокаТаблицы.ОбъектСтроительства, "ОбъектСтроительства");
			Если Строка = Неопределено Тогда
				ОбъектСтроительстваНалоговоеНазначение = Неопределено;
			Иначе	
				ОбъектСтроительстваНалоговоеНазначение = Строка.ОбъектСтроительстваНалоговоеНазначение;
			КонецЕсли;
			
			Префикс = "ОбъектыСтроительства[%1].";
			Префикс = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Префикс, Формат(СтрокаТаблицы.НомерСтроки - 1, "ЧН=0; ЧГ="));
			
			Поле = Префикс + "ОбъектСтроительства";
			Если НЕ ЗначениеЗаполнено(ОбъектСтроительстваНалоговоеНазначение) Тогда
			
				СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='У объекта строительства в строке ""%1"" не указан  вид налоговой деятельности!';uk='У об''єкта будівництва в рядку ""%1"" не зазначений вид податкової діяльності!'"), СтрокаТаблицы.НомерСтроки);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
			
			ИначеЕсли СтрокаТаблицы.НалоговоеНазначение = Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_Пропорционально Тогда
				
				// пропорциональный может относиться на любую ХОЗЯЙСТВЕННУЮ деятельность
				Если ОбъектСтроительстваНалоговоеНазначение = Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяНеХозДеятельность Тогда 
					СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Для объекта строительства в строке ""%1"" вид налоговой деятельности не соответствует указанному в строке документа!';uk='Для об''єкта будівництва в рядку ""%1"" вид податкової діяльності не відповідає зазначеному у рядку документа!'"), СтрокаТаблицы.НомерСтроки);
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
				КонецЕсли
				
			ИначеЕсли СтрокаТаблицы.НалоговоеНазначение <> ОбъектСтроительстваНалоговоеНазначение Тогда 
				СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Для объекта строительства в строке ""%1"" вид налоговой деятельности не соответствует указанному в строке документа!';uk='Для об''єкта будівництва в рядку ""%1"" вид податкової діяльності не відповідає зазначеному у рядку документа!'"), СтрокаТаблицы.НомерСтроки);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
			КонецЕсли;
				
		КонецЦикла;	
		
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиОбъектыСтроительства()

// Проверяет правильность заполнения строк табличной части "Товары".
//
// Параметры:
// Параметры: 
//  ТаблицаПоБланкам        - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  СтруктураШапкиДокумента - структура, содержащая рексвизиты шапки документа и результаты запроса по шапке
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиБланкиСтрогогоУчета(СтруктураШапкиДокумента, Отказ, МассивНепроверяемыхРеквизитов)

	
	Если НЕ СтруктураШапкиДокумента.ЕстьНДС Тогда
		МассивНепроверяемыхРеквизитов.Добавить("БланкиСтрогогоУчета.НалоговоеНазначение");
	КонецЕсли;
	
	Если    НЕ ВалютаДокумента = СтруктураШапкиДокумента.ВалютаРегламентированногоУчета
		ИЛИ НЕ СтруктураШапкиДокумента.ЕстьНДС Тогда
		МассивНепроверяемыхРеквизитов.Добавить("БланкиСтрогогоУчета.СтавкаНДС");
	КонецЕсли;

	
	Для Каждого СтрокаТаблицы Из БланкиСтрогогоУчета Цикл
			
		Если ЗначениеЗаполнено(СтрокаТаблицы.НалоговоеНазначение) Тогда
			
			Префикс = "БланкиСтрогогоУчета[%1].";
			Префикс = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Префикс, Формат(СтрокаТаблицы.НомерСтроки - 1, "ЧН=0; ЧГ="));
			
			Поле = Префикс + "НалоговоеНазначение";
			Если СтрокаТаблицы.НалоговоеНазначение = Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяНеХозДеятельность Тогда
				
				Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.Номенклатура) Тогда
					СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='В строке %1 указано налоговое назначение по нехозяйственной деятельности. 
|Передача товаров в розницу возможна только по хозяйственной деятельности.';uk='У рядку %1 вказане податкове призначення по негосподарській діяльності. 
|Передача товарів у роздріб можлива тільки по господарській діяльності.'"), (БланкиСтрогогоУчета.Индекс(СтрокаТаблицы)+1));
				Иначе
					СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Для товара ""%1"" указано налоговое назначение по нехозяйственной деятельности. 
|Передача товаров в розницу возможна только по хозяйственной деятельности.';uk='Для товару ""%1"" вказано податкове призначення по негосподарській діяльності. 
|Передача товарів у роздріб можлива тільки по господарській діяльності.'"), СтрокаТаблицы.Номенклатура);
				КонецЕсли;							
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения, ЭтотОбъект, Поле, "Объект", Отказ);

			КонецЕсли;
		КонецЕсли;
	КонецЦикла;	
	
КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиБланкиСтрогогоУчета()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ
                                                                                                     
Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	МассивНепроверяемыхРеквизитов = Новый Массив();
	
	СтруктураШапкиДокумента		  = Новый Структура;
	
	СтруктураШапкиДокумента.Вставить("ЕстьНДС",								УчетнаяПолитика.ПлательщикНДС(Организация, Дата));
	СтруктураШапкиДокумента.Вставить("ЕстьНалогНаПрибыльДо2015",			УчетнаяПолитика.ПлательщикНалогаНаПрибыльДо2015(Организация, Дата));
	СтруктураШапкиДокумента.Вставить("ВалютаРегламентированногоУчета", 		ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета());
	
	// ИНАГРО++
	Если НЕ ИНАГРО_СкладВТЧ ИЛИ НЕ ИНАГРО_ОрдерВТЧ Тогда
		ИНАГРО_Склад = ?(ИНАГРО_ВидПоступления = Перечисления.ИНАГРО_ВидыПоступленияТоваров.ПоОрдеру, Склад.Склад, Склад);
		СтруктураШапкиДокумента.Вставить("ТипСклада",			 	ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ИНАГРО_Склад, "ТипСклада"));
	КонецЕсли;		 
	СтруктураШапкиДокумента.Вставить("РозницаВПродажныхЦенах", 				ОпределитьРозницаВПродажныхЦенах());
	// ИНАГРО--
	
	СтруктураШапкиДокумента.Вставить("ТипЦенРозничнойТорговли", 			ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ИНАГРО_Склад, "ТипЦенРозничнойТорговли"));
	Если ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
		СтруктураШапкиДокумента.Вставить("ВидДоговораКонтрагента",  ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДоговорКонтрагента, "ВидДоговора"));
		СтруктураШапкиДокумента.Вставить("СложныйНалоговыйУчет", 	ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДоговорКонтрагента, "СложныйНалоговыйУчет"));
		СтруктураШапкиДокумента.Вставить("СхемаНалоговогоУчета", 	ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДоговорКонтрагента, "СхемаНалоговогоУчета"));
	Иначе
		СтруктураШапкиДокумента.Вставить("ВидДоговораКонтрагента",  Неопределено);
		СтруктураШапкиДокумента.Вставить("СложныйНалоговыйУчет", 	Ложь);
		СтруктураШапкиДокумента.Вставить("СхемаНалоговогоУчета", 	Неопределено);
	КонецЕсли;
	
	СтруктураШапкиДокумента.Вставить("РазделятьПоСтавкамНДС", БухгалтерскийУчетВызовСервераПовтИсп.ИспользуетсяРазделениеПоСтавкамНДСВНТТ());
	
	
	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, МассивНепроверяемыхРеквизитов);
	
	// Не проверяем заполненность табличных частей (включая реквизиты), 
	// которые не используются при определенных видах операции и будут очищены в ПередЗаписью
	НеИспользуемыеТабличныеЧасти = Новый Массив;
	
	Если НЕ ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ОбъектыСтроительства Тогда
		ПроверитьЗаполнениеТабличнойЧастиТовары(СтруктураШапкиДокумента, Отказ, МассивНепроверяемыхРеквизитов, ПроверяемыеРеквизиты); // ИНАГРО ПроверяемыеРеквизиты
	Иначе
		НеИспользуемыеТабличныеЧасти.Добавить("Товары");
	КонецЕсли;	
	
	Если НЕ(     ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ВПереработку
		    ИЛИ (ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ПокупкаКомиссия И СтруктураШапкиДокумента.ВидДоговораКонтрагента = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом)) Тогда
		ПроверитьЗаполнениеТабличнойЧастиУслуги(СтруктураШапкиДокумента, Отказ, МассивНепроверяемыхРеквизитов, ПроверяемыеРеквизиты);
	Иначе
		НеИспользуемыеТабличныеЧасти.Добавить("Услуги");
	КонецЕсли;
	
	Если  ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Оборудование Тогда
		ПроверитьЗаполнениеТабличнойЧастиОборудование(СтруктураШапкиДокумента, Отказ, МассивНепроверяемыхРеквизитов);
	Иначе
		НеИспользуемыеТабличныеЧасти.Добавить("Оборудование");
	КонецЕсли;	
	
	Если  ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ОбъектыСтроительства Тогда
		ПроверитьЗаполнениеТабличнойЧастиОбъектыСтроительства(СтруктураШапкиДокумента, Отказ, МассивНепроверяемыхРеквизитов);
	Иначе
		НеИспользуемыеТабличныеЧасти.Добавить("ОбъектыСтроительства");
	КонецЕсли;	
	
	Если ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.БланкиСтрогогоУчета И ПолучитьФункциональнуюОпцию("ИспользоватьБланкиСтрогогоУчета") Тогда
		ПроверитьЗаполнениеТабличнойЧастиБланкиСтрогогоУчета(СтруктураШапкиДокумента, Отказ, МассивНепроверяемыхРеквизитов);
	Иначе
		НеИспользуемыеТабличныеЧасти.Добавить("БланкиСтрогогоУчета");
	КонецЕсли;	
	
	Если  НЕ (    ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ВПереработку 
			  ИЛИ ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ОбъектыСтроительства)Тогда
		ПроверитьЗаполнениеТабличнойЧастиВозвратнаяТара(СтруктураШапкиДокумента, Отказ, МассивНепроверяемыхРеквизитов, ПроверяемыеРеквизиты); // ИНАГРО ПроверяемыеРеквизиты
	Иначе
		НеИспользуемыеТабличныеЧасти.Добавить("ВозвратнаяТара");
	КонецЕсли;	
	
	ОбщегоНазначенияБП.ИсключитьИзПроверкиНеиспользуемыеТабличныеЧасти(
		ПроверяемыеРеквизиты,
		НеИспользуемыеТабличныеЧасти);
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);

КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)

	Дата = НачалоДня(ОбщегоНазначенияБП.ПолучитьРабочуюДату());
	Ответственный = Пользователи.ТекущийПользователь();
	
	Если Год(ОбъектКопирования.Дата) <> Год(Дата) Тогда
		Документы.ПоступлениеТоваровУслуг.РассчитатьПропорциональныйНДС(ЭтотОбъект,
			УчетнаяПолитика.ПлательщикНДС(Организация, Дата),
			НалоговыйУчет.ПолучитьКоэффициентПропорциональногоНДС(Организация, Дата)
			);
	КонецЕсли;

	Звит1С_DOC_ID = "";
	
КонецПроцедуры

// Процедура - обработчик события "ОбработкаЗаполнения".
////
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	ТипДанныхЗаполнения = ТипЗнч(ДанныеЗаполнения);
	Если ДанныеЗаполнения <> Неопределено И ТипДанныхЗаполнения <> Тип("Структура")
		И Метаданные().ВводитсяНаОсновании.Содержит(ДанныеЗаполнения.Метаданные()) Тогда
		ЗаполнитьПоДокументуОснованию(ДанныеЗаполнения);
	КонецЕсли;
	ЗаполнениеДокументов.Заполнить(ЭтотОбъект, ДанныеЗаполнения);
	Документы.ПоступлениеТоваровУслуг.РассчитатьПропорциональныйНДС(ЭтотОбъект,
			УчетнаяПолитика.ПлательщикНДС(Организация, Дата),
			НалоговыйУчет.ПолучитьКоэффициентПропорциональногоНДС(Организация, Дата)
			);
	
	Если  ТипДанныхЗаполнения = Тип("Структура")
		И ДанныеЗаполнения.Свойство("ВидОперации") Тогда
		ВидОперации = ДанныеЗаполнения.ВидОперации;
	КонецЕсли;
	
	Если ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ВПереработку Тогда
		УчитыватьНДС         = Ложь;
		СуммаВключаетНДС     = Ложь;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Организация)
		И ЗначениеЗаполнено(Контрагент)
		И ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
		Документы.ПоступлениеТоваровУслуг.ЗаполнитьСчетаУчетаРасчетов(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры // ОбработкаЗаполнения()


// Процедура вызывается перед записью документа 
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)

	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ОбновитьПараметрыУчетнойПолитики();

	// Посчитать суммы документа и записать ее в соответствующий реквизит шапки для показа в журналах
	СуммаДокумента = УчетНДС.ПолучитьСуммуДокументаСНДС(ЭтотОбъект);
	
	Если ВидОперации <> Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Оборудование Тогда
		Оборудование.Очистить();
	КонецЕсли;
	
	Если ВидОперации <> Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ОбъектыСтроительства Тогда
		ОбъектыСтроительства.Очистить();
	Иначе
		Товары.Очистить();
		ВозвратнаяТара.Очистить();
	КонецЕсли;
	

	Если РозницаВПродажныхЦенах Тогда
		Для Каждого Строка Из Товары Цикл
			Если Склад.ТипСклада = Перечисления.ТипыСкладов.РозничныйМагазин Тогда
				Строка.СчетУчетаБУ = ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахАТТ;
			Иначе
				Строка.СчетУчетаБУ = ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахНТТ;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	Если НЕ мУчетнаяПолитика.ЕстьНДС Тогда
		// организация - не плательщик НДС. Установим во всех ТЧ признак соответствующего учета НДС
		НеОБлНДСДеятельность = Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяХозДеятельность;
		СтавкаНДСНеплательщик = Перечисления.СтавкиНДС.НеНДС;
		
		Для каждого СтрокаТЧ  Из Товары Цикл
			СтрокаТЧ.НалоговоеНазначение = НеОБлНДСДеятельность;
		    СтрокаТЧ.СтавкаНДС = СтавкаНДСНеплательщик;
		КонецЦикла; 
		Для каждого СтрокаТЧ  Из ВозвратнаяТара Цикл
			СтрокаТЧ.НалоговоеНазначение = НеОБлНДСДеятельность;
		КонецЦикла; 
		Для каждого СтрокаТЧ  Из Услуги Цикл
			СтрокаТЧ.НалоговоеНазначение = НеОБлНДСДеятельность;
		    СтрокаТЧ.СтавкаНДС = СтавкаНДСНеплательщик;
		КонецЦикла; 
		Для каждого СтрокаТЧ  Из Оборудование Цикл
			СтрокаТЧ.НалоговоеНазначение = НеОБлНДСДеятельность;
		    СтрокаТЧ.СтавкаНДС = СтавкаНДСНеплательщик;
		КонецЦикла; 
		Для каждого СтрокаТЧ  Из ОбъектыСтроительства Цикл
			СтрокаТЧ.НалоговоеНазначение = НеОБлНДСДеятельность;
		    СтрокаТЧ.СтавкаНДС = СтавкаНДСНеплательщик;
		КонецЦикла; 
		Для каждого СтрокаТЧ  Из БланкиСтрогогоУчета Цикл
			СтрокаТЧ.НалоговоеНазначение = НеОБлНДСДеятельность;
		    СтрокаТЧ.СтавкаНДС = СтавкаНДСНеплательщик;
		КонецЦикла; 
	КонецЕсли; 
	
	Если НЕ мУчетнаяПолитика.ЕстьНалогНаПрибыльДо2015 Тогда
		
		Для каждого СтрокаТЧ  Из Услуги Цикл
			СтрокаТЧ.НалоговоеНазначениеДоходовИЗатрат = Неопределено;
		КонецЦикла; 
		
	КонецЕсли; 
	
КонецПроцедуры // ПередЗаписью

// Процедура - обработчик события "ОбработкаПроведения".
//
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	Перем Заголовок, СтруктураШапкиДокумента;
	Перем ТаблицаПоТоварам, ТаблицаПоТаре, ТаблицаПоОборудованию, ТаблицаПоУслугам, ТаблицаПоОбъектамСтроительства, ТаблицаПоБланкам;
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКПроведению(ЭтотОбъект);
	Если РучнаяКорректировка Тогда
		Возврат;
	КонецЕсли;
	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначенияБПВызовСервера.ПредставлениеДокументаПриПроведении(Ссылка);
	
	ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента);
	
	СтруктураШапкиДокумента.Вставить("ЕстьНалогНаПрибыльДо2015"       , мУчетнаяПолитика.ЕстьНалогНаПрибыльДо2015);
	СтруктураШапкиДокумента.Вставить("ЕстьНДС"                        , мУчетнаяПолитика.ЕстьНДС);
	
	// Проверим правильность заполнения шапки документа
	//ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок);

	ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоТаре, ТаблицаПоОборудованию, ТаблицаПоУслугам, ТаблицаПоОбъектамСтроительства, ТаблицаПоБланкам, Отказ, Заголовок);
	
	// Проверить заполнение ТЧ 
	//ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок);
	//ПроверитьЗаполнениеТабличнойЧастиУслуги(ТаблицаПоУслугам, СтруктураШапкиДокумента, Отказ, Заголовок);
	//ПроверитьЗаполнениеТабличнойЧастиОборудование(ТаблицаПоОборудованию, СтруктураШапкиДокумента, Отказ, Заголовок);
	//ПроверитьЗаполнениеТабличнойЧастиВозвратнаяТара(ТаблицаПоТаре, СтруктураШапкиДокумента, Отказ, Заголовок);
	//ПроверитьЗаполнениеТабличнойЧастиОбъектыСтроительства(ТаблицаПоОбъектамСтроительства, СтруктураШапкиДокумента, Отказ, Заголовок);
	//ПроверитьЗаполнениеТабличнойЧастиБланкиСтрогогоУчета(ТаблицаПоБланкам, СтруктураШапкиДокумента, Отказ, Заголовок);

	//Проверим на возможность проведения в БУ и НУ
	УправлениеВзаиморасчетами.ПроверкаВозможностиПроведенияВ_БУ_НУ(СтруктураШапкиДокумента, СтруктураШапкиДокумента.ДоговорКонтрагента, Отказ, Заголовок);

	
	Если Не Отказ Тогда
		ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, 
							ТаблицаПоТоварам, ТаблицаПоТаре, ТаблицаПоУслугам, ТаблицаПоОборудованию,
							ТаблицаПоОбъектамСтроительства, ТаблицаПоБланкам, Отказ, Заголовок);
	КонецЕсли;
	
	Движения.Хозрасчетный.ВыполнитьДействияПередЗаписьюДвижений();
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКЗаписиДвижений(ЭтотОбъект);

КонецПроцедуры // ОбработкаПроведения()

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКОтменеПроведения(ЭтотОбъект);
	Движения.Записать();
	
КонецПроцедуры 

Функция ОпределитьРозницаВПродажныхЦенах() // ИНАГРО
	
	СпособОценкиТоваровВРознице = УчетнаяПолитика.СпособОценкиТоваровВРознице(Организация, НачалоМесяца(Дата));
	мУчетВПродажныхЦенах = (СпособОценкиТоваровВРознице = Перечисления.СпособыОценкиТоваровВРознице.ПоПродажнойСтоимости);
	
	Если НЕ ИНАГРО_СкладВТЧ И ЗначениеЗаполнено(Склад) Тогда
		
		ИНАГРО_Склад = ?(ИНАГРО_ВидПоступления = Перечисления.ИНАГРО_ВидыПоступленияТоваров.ПоОрдеру, Склад.Склад, Склад); 		
		
		РозницаВПродажныхЦенах = ((ИНАГРО_Склад.ТипСклада <> Перечисления.ТипыСкладов.ОптовыйСклад)
									И мУчетВПродажныхЦенах 
									И (ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ПокупкаКомиссия)
									И (НЕ ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДоговорКонтрагента, "ВидДоговора") = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом));		
				
	Иначе
			
		РозницаВПродажныхЦенах = (ИНАГРО_ПоступлениеВРозницу
									И мУчетВПродажныхЦенах 
									И (ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ПокупкаКомиссия)
									И (НЕ ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДоговорКонтрагента, "ВидДоговора") = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом));			
									
	КонецЕсли;
								
	Возврат РозницаВПродажныхЦенах;
		
КонецФункции
мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
#КонецЕсли