#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ ПРОВЕДЕНИЯ
Перем мВалютаРегламентированногоУчета;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ПРОВЕДЕНИЯ - ПОДГОТОВКА ДАННЫХ ИНФОРМАЦИОННОЙ БАЗЫ

// Процедура формирует структуру шапки документа и дополнительных полей.
//
Процедура ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента) Экспорт
	
	// Дерево значений, содержащее имена необходимых полей в запросе по шапке.
	Перем ДеревоПолейЗапросаПоШапке;
	
	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента = ОбщегоНазначенияРед12.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);

	// Заполним по шапке документа дерево параметров, нужных при проведении.
	ДеревоПолейЗапросаПоШапке = ОбщегоНазначенияРед12.СформироватьДеревоПолейЗапросаПоШапке();
	ОбщегоНазначенияРед12.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "Организация"          , "ДоговорОрганизация");
 	ОбщегоНазначенияРед12.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "ВидДоговора"          , "ВидДоговора");
   	ОбщегоНазначенияРед12.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "ВедениеВзаиморасчетов", "ВедениеВзаиморасчетов");
	ОбщегоНазначенияРед12.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "ВалютаВзаиморасчетов" , "ВалютаВзаиморасчетов");
	ОбщегоНазначенияРед12.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "ВедениеВзаиморасчетовНУ" , "ВедениеВзаиморасчетовНУ");
	ОбщегоНазначенияРед12.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "НеОтноситьНаЗатратыПоНУ" , "НеОтноситьНаЗатратыПоНУ");
	ОбщегоНазначенияРед12.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "СложныйНалоговыйУчет" , "СложныйНалоговыйУчет");
	ОбщегоНазначенияРед12.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "СхемаНалоговогоУчета" , "СхемаНалоговогоУчета");
	
	ОбщегоНазначенияРед12.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "НалоговоеНазначение", "ВидДеятельностиНДС" , "ВидДеятельностиНДС");
	
	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа
	СтруктураШапкиДокумента = УправлениеЗапасами.СформироватьЗапросПоДеревуПолей(ЭтотОбъект, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета);
	
КонецПроцедуры // ПодготовитьСтруктуруШапкиДокумента()

// Процедура определяет параметры учетной политики
//
Процедура ПодготовитьПараметрыУчетнойПолитики(СтруктураШапкиДокумента, Отказ, Заголовок)

	СтруктураШапкиДокумента.Вставить("ЕстьНалогНаПрибыльДо2015", УчетнаяПолитика.ПлательщикНалогаНаПрибыльДо2015(СтруктураШапкиДокумента.Организация, СтруктураШапкиДокумента.Дата));
	СтруктураШапкиДокумента.Вставить("ЕстьНДС",            УчетнаяПолитика.ПлательщикНДС(СтруктураШапкиДокумента.Организация, СтруктураШапкиДокумента.Дата));
	
КонецПроцедуры // ПодготовитьПараметрыУчетнойПолитики()

// Процедура формирует таблицы документа.
//
Процедура ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоУслугам, Отказ, Заголовок) Экспорт
	
	// Получим необходимые данные для проведения и проверки заполенения данные по табличной части "Товары".
	СтруктураПолей = Новый Структура();
	СтруктураПростыхПолей = Новый Структура();
	СтруктураСложныхПолей = Новый Структура();
	
	СтруктураПолей.Вставить("Номенклатура" , "Номенклатура");
	СтруктураПолей.Вставить("Услуга"       , "Номенклатура.Услуга");
	СтруктураПолей.Вставить("БланкСтрогогоУчета", "Номенклатура.БланкСтрогогоУчета");
	СтруктураПолей.Вставить("Количество"   , "Количество * Коэффициент");
	СтруктураПолей.Вставить("Сумма"        , "Сумма");
	СтруктураПолей.Вставить("СуммаПередачи", "СуммаПередачи");
	СтруктураПолей.Вставить("СтавкаНДС"    , "СтавкаНДС");
	СтруктураПолей.Вставить("НДС"          , "СуммаНДС");
	СтруктураПолей.Вставить("СчетУчетаБУ"  , "СчетУчетаБУ");
	
	СтруктураПолей.Вставить("СуммаВознаграждения"       , "СуммаВознаграждения");
	СтруктураПолей.Вставить("СтавкаНДСВознаграждения"   , "Ссылка.СтавкаНДСВознаграждения");
	СтруктураПолей.Вставить("СуммаНДСВознаграждения" 	, "СуммаНДСВознаграждения");
	
	СтруктураПолей.Вставить("СхемаРеализации"          , "СхемаРеализации");
	СтруктураПолей.Вставить("СчетДоходовБУ"            , "СхемаРеализации.СчетДоходов");
	СтруктураПолей.Вставить("СубконтоДоходовБУ1"       , "СхемаРеализации.СубконтоДоходов1");
	СтруктураПолей.Вставить("СубконтоДоходовБУ2"       , "СхемаРеализации.СубконтоДоходов2");
	СтруктураПолей.Вставить("СубконтоДоходовБУ3"       , "СхемаРеализации.СубконтоДоходов3");
	СтруктураПолей.Вставить("СчетРасходовБУ"           , "СхемаРеализации.СчетСебестоимости");
	СтруктураПолей.Вставить("СубконтоРасходовБУ1"      , "СхемаРеализации.СубконтоСебестоимости1");
	СтруктураПолей.Вставить("СубконтоРасходовБУ2"      , "СхемаРеализации.СубконтоСебестоимости2");
	СтруктураПолей.Вставить("СубконтоРасходовБУ3"      , "СхемаРеализации.СубконтоСебестоимости3");
	СтруктураПолей.Вставить("НоменклатурнаяГруппа",      "Номенклатура.НоменклатурнаяГруппа");
	
	СтруктураПолей.Вставить("НалоговоеНазначение"     		   , "НалоговоеНазначение");
	СтруктураПолей.Вставить("ВидДеятельностиНДС"     		   , "НалоговоеНазначение.ВидДеятельностиНДС");
	СтруктураПолей.Вставить("НалоговоеНазначениеДоходовИЗатрат", "НалоговоеНазначениеДоходовИЗатрат");
	СтруктураСложныхПолей.Вставить("СчетУчетаНДС"    	, "Ссылка.СчетУчетаНДСПродаж");
	СтруктураСложныхПолей.Вставить("СуммаНДСПередачи"   , "ВЫБОР КОГДА Сумма = 0 ТОГДА 0 ИНАЧЕ СуммаНДС * СуммаПередачи / Сумма КОНЕЦ");

	РезультатЗапросаПоТоварам = ОбщегоНазначенияРед12.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураПолей, СтруктураПростыхПолей, СтруктураСложныхПолей);
	
	ПогрешностиОкругления     = Новый Соответствие;
	ПогрешностиОкругленияВознаграждение = Новый Соответствие;
	
	// Подготовим таблицу товаров для проведения.
	ТаблицаПоТоварам = ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента, ПогрешностиОкругления);

	// Отдельно подготовим таблицу "с услугами" по вознаграждению
	ТаблицаПоУслугам = ПодготовитьТаблицуУслугВознаграждения(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента, ПогрешностиОкругления);

КонецПроцедуры

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТоварам - результат запроса по табличной части "Товары",
//  СтруктураШапкиДокумента   - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблиица значений.
//
Функция ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента, ПогрешностиОкругления)

	ТаблицаТоваров = РезультатЗапросаПоТоварам.Выгрузить();

	ТаблицаТоваров.Колонки.СчетРасходовБУ.Имя 	   = "КорСчетСписанияБУ";
	ТаблицаТоваров.Колонки.СубконтоРасходовБУ1.Имя = "КорСубконтоСписанияБУ1";
	ТаблицаТоваров.Колонки.СубконтоРасходовБУ2.Имя = "КорСубконтоСписанияБУ2";
	ТаблицаТоваров.Колонки.СубконтоРасходовБУ3.Имя = "КорСубконтоСписанияБУ3";

	ТаблицаТоваров.Колонки.Добавить("ДокументОприходования");
	ТаблицаТоваров.Колонки.Добавить("Регистратор");
	ТаблицаТоваров.Колонки.Добавить("Склад", Новый ОписаниеТипов("СправочникСсылка.Склады"));
	
	ТаблицаТоваров.Колонки.Добавить("Организация");
	ТаблицаТоваров.Колонки.Добавить("ДоговорКонтрагента");
	
	ТаблицаТоваров.Колонки.Добавить("Комиссионный",		 	  		Новый ОписаниеТипов("Булево"));
	
	// для списания укажем "кор. налоговое назначение" = нал. назначение доходов и затрат
	// для отражения расходов по налогу на прибыль по списанной себестоимости
	Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыльДо2015 Тогда
		
		ТаблицаТоваров.Колонки.Добавить("НалоговоеНазначениеНовое", Новый ОписаниеТипов("СправочникСсылка.НалоговыеНазначенияАктивовИЗатрат"));
		
		ТаблицаТоваров.ЗагрузитьКолонку(ТаблицаТоваров.ВыгрузитьКолонку("НалоговоеНазначениеДоходовИЗатрат") , "НалоговоеНазначениеНовое");
		
	КонецЕсли;
	
	ТаблицаТоваров.Колонки.Добавить("СуммаСНДСПередачи",			ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповЧисла(15,2));
	
	ТаблицаТоваров.ЗаполнитьЗначения(ЭтотОбъект,                                 "Регистратор");
	ТаблицаТоваров.ЗаполнитьЗначения(СтруктураШапкиДокумента.Организация,        "Организация");
	ТаблицаТоваров.ЗаполнитьЗначения(СтруктураШапкиДокумента.ДоговорКонтрагента, "ДоговорКонтрагента");
	
	Если НЕ СтруктураШапкиДокумента.ЕстьНДС Тогда
		// для регламентного учета считаем НДС
		ТаблицаТоваров.ЗаполнитьЗначения(Перечисления.СтавкиНДС.БезНДС, "СтавкаНДС");
		ТаблицаТоваров.ЗаполнитьЗначения(0                            , "НДС");
	КонецЕсли;

	Для Каждого СтрокаТаблицы Из ТаблицаТоваров Цикл
		
		СтрокаТаблицы.Комиссионный = БухгалтерскийУчетВызовСервераПовтИсп.КомиссионныйТовар(СтрокаТаблицы.СчетУчетаБУ);
		
		СтрокаТаблицы.СуммаСНДСПередачи = СтрокаТаблицы.СуммаПередачи + 
	                                      ?(СтруктураШапкиДокумента.ЕстьНДС И (Не СтруктураШапкиДокумента.СуммаВключаетНДС), СтрокаТаблицы.СуммаНДСПередачи, 0);
	
	КонецЦикла;

	НалоговыйУчет.ДобавитьКолонкиТоваровРегл(ТаблицаТоваров, СтруктураШапкиДокумента, ПогрешностиОкругления, Ложь);	
	
	Возврат ТаблицаТоваров;

КонецФункции // ПодготовитьТаблицуТоваров()

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТоварам - результат запроса по табличной части "Товары",
//  СтруктураШапкиДокумента   - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблиица значений.
//
Функция ПодготовитьТаблицуУслугВознаграждения(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента, ПогрешностиОкругления)

	ТаблицаУслуг = РезультатЗапросаПоТоварам.Выгрузить();
	
	ТаблицаУслуг.Свернуть("","СуммаВознаграждения,СуммаНДСВознаграждения");
	
	ТаблицаУслуг.Колонки.СуммаВознаграждения.Имя = "Сумма";
	ТаблицаУслуг.Колонки.СуммаНДСВознаграждения.Имя = "НДС";
	
	ТаблицаУслуг.Колонки.Добавить("СуммаБезНДС", ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповЧисла(15,2));
	Для каждого СтрокаТаблицы Из ТаблицаУслуг Цикл

		СтрокаТаблицы.СуммаБезНДС = СтрокаТаблицы.Сумма - 
		                          ?(СтруктураШапкиДокумента.СуммаВключаетНДС И СтруктураШапкиДокумента.ВалютаДокумента = мВалютаРегламентированногоУчета, СтрокаТаблицы.НДС, 0);

	КонецЦикла;

	Если НЕ (СтруктураШапкиДокумента.ВалютаДокумента = мВалютаРегламентированногоУчета) Тогда
		// для регламентного учета считаем НДС
		ТаблицаУслуг.ЗаполнитьЗначения(0, "НДС");
	КонецЕсли;
	
	ТаблицаУслуг.Колонки.Добавить("СчетЗатрат");
	ТаблицаУслуг.Колонки.Добавить("Субконто1");
	ТаблицаУслуг.Колонки.Добавить("Субконто2");
	ТаблицаУслуг.Колонки.Добавить("Субконто3");
	
	ТаблицаУслуг.Колонки.Добавить("СтавкаНДС", 						Новый ОписаниеТипов("ПеречислениеСсылка.СтавкиНДС"));
	
	ТаблицаУслуг.Колонки.Добавить("ВидНалоговойДеятельности", 		Новый ОписаниеТипов("СправочникСсылка.ВидыНалоговойДеятельности"));
	ТаблицаУслуг.Колонки.Добавить("ВидДеятельностиНДС", 			Новый ОписаниеТипов("ПеречислениеСсылка.ВидыДеятельностиНДС"));
	ТаблицаУслуг.Колонки.Добавить("Амортизируется", 				Новый ОписаниеТипов("Булево"));
	ТаблицаУслуг.Колонки.Добавить("ДляХозяйственнойДеятельности", 	Новый ОписаниеТипов("Булево"));
	ТаблицаУслуг.Колонки.Добавить("НалоговоеНазначение", 	  		Новый ОписаниеТипов("СправочникСсылка.НалоговыеНазначенияАктивовИЗатрат"));
	ТаблицаУслуг.Колонки.Добавить("НалоговоеНазначениеДоходовИЗатрат",Новый ОписаниеТипов("СправочникСсылка.НалоговыеНазначенияАктивовИЗатрат"));
	
	ТаблицаУслуг.ЗаполнитьЗначения(СтруктураШапкиДокумента.СчетУчетаЗатрат, "СчетЗатрат");
	ТаблицаУслуг.ЗаполнитьЗначения(СтруктураШапкиДокумента.Субконто1, 		"Субконто1");
	ТаблицаУслуг.ЗаполнитьЗначения(СтруктураШапкиДокумента.Субконто2, 		"Субконто2");
	ТаблицаУслуг.ЗаполнитьЗначения(СтруктураШапкиДокумента.Субконто3, 		"Субконто3");
	
	ТаблицаУслуг.ЗаполнитьЗначения(СтруктураШапкиДокумента.СтавкаНДСВознаграждения , "СтавкаНДС");
	
	ТаблицаУслуг.ЗаполнитьЗначения(СтруктураШапкиДокумента.НалоговоеНазначение, "НалоговоеНазначение");
	ТаблицаУслуг.ЗаполнитьЗначения(СтруктураШапкиДокумента.ВидДеятельностиНДС, 	"ВидДеятельностиНДС");
	ТаблицаУслуг.ЗаполнитьЗначения(СтруктураШапкиДокумента.НалоговоеНазначениеДоходовИЗатрат, "НалоговоеНазначениеДоходовИЗатрат");
	
	
	Если СтруктураШапкиДокумента.НалоговоеНазначение = Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяНеХозДеятельность Тогда
		ДляХозяйственнойДеятельности = Ложь;	
	Иначе
		ДляХозяйственнойДеятельности = Истина;	
	КонецЕсли;
	ТаблицаУслуг.ЗаполнитьЗначения(ДляХозяйственнойДеятельности , "ДляХозяйственнойДеятельности");
	
	ТаблицаУслуг.Колонки.Добавить("ХарактерЗатрат");
	
	Для каждого Строка Из ТаблицаУслуг Цикл
		
		// заполним характер затрат, признак Амортизируется и НалоговоеНазначениеДоходовИЗатрат
		
		НалоговыйУчет.ОпределениеАналитикиНалоговогоУчетаВПроводкахДляЗатрат(Строка, Строка.СчетЗатрат, Строка.ХарактерЗатрат,
														       	Строка.НалоговоеНазначениеДоходовИЗатрат, Строка.Амортизируется, 
																Строка.НалоговоеНазначение, Строка.НалоговоеНазначениеДоходовИЗатрат,
																,Дата
																,,СтруктураШапкиДокумента.ЕстьНДС
																);
		
	КонецЦикла;	
	
	НалоговыйУчет.ДобавитьКолонкиТоваровРегл(ТаблицаУслуг, СтруктураШапкиДокумента, ПогрешностиОкругления, Истина);	
	
	Возврат ТаблицаУслуг;

КонецФункции // ПодготовитьТаблицуУслугВознаграждения()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ПРОВЕДЕНИЯ - ФОРМИРОВАНИЕ ДВИЖЕНИЙ

// По результату запроса по шапке документа формируем движения по регистрам.
//
// Параметры: 
//  РежимПроведения           - режим проведения документа (оперативный или неоперативный),
//  СтруктураШапкиДокумента   - выборка из результата запроса по шапке документа,
//  ТаблицаПоТоварам          - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам,ТаблицаПоУслугам, Отказ, Заголовок)
	
	Перем ТаблицаПоВторомуСобытиюНал, ТаблицаПоВторомуСобытиюНалЗачетВознаграждения, ТаблицаЗачетаЗадолженностиЗаТовары;
	
	ДвиженияПоРегистрамНалоговогоУчета(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоУслугам, 
										ТаблицаПоВторомуСобытиюНал, 
										ТаблицаПоВторомуСобытиюНалЗачетВознаграждения, 
										ТаблицаЗачетаЗадолженностиЗаТовары, 
										Отказ, Заголовок);
	
	ДвиженияПоРеализацииТоваров(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоУслугам,
								ТаблицаПоВторомуСобытиюНал, 
								ТаблицаПоВторомуСобытиюНалЗачетВознаграждения, 
								ТаблицаЗачетаЗадолженностиЗаТовары, 
								Отказ, Заголовок);
	
	ДвиженияПоПриобретениюУслуг(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоУслугам,
								ТаблицаПоВторомуСобытиюНал,
								Отказ, Заголовок);
	
	//Учет курсовых разниц
	Если (ВалютаДокумента <> мВалютаРегламентированногоУчета) тогда
		БухгалтерскийУчетРед12.ПереоценкаСчетовДокументаРегл(ЭтотОбъект,СтруктураШапкиДокумента, мВалютаРегламентированногоУчета,Отказ,Заголовок);
	КонецЕсли;
	
КонецПроцедуры // ДвиженияПоРегистрам()

Процедура ДвиженияПоРеализацииТоваров(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоУслугам, 
										ТаблицаПоВторомуСобытиюНал, 
										ТаблицаПоВторомуСобытиюНалЗачетВознаграждения, 
										ТаблицаЗачетаЗадолженностиЗаТовары, 
										Отказ, Заголовок)
	
	ДатаДока   = Дата;
	ПроводкиБУ = Движения.Хозрасчетный;
	
	УправлениеЗапасамиПартионныйУчет.ДвижениеПартийТоваров(ТаблицаПоТоварам , Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;

	ТаблицыДокумента = Новый Структура();
   	ТаблицыДокумента.Вставить("ТаблицаПоТоварам",ТаблицаПоТоварам);

	СтруктураШапкиДокумента.Вставить("Сделка",СделкаПоРеализации);	
	ТаблицаАвансов = БухгалтерскийУчетРасчетовСКонтрагентами.ЗачетАванса(ЭтотОбъект, СтруктураШапкиДокумента , мВалютаРегламентированногоУчета, ТаблицыДокумента , Отказ, Заголовок, "АВ",,,СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом, СтруктураШапкиДокумента.СчетУчетаРасчетовПоАвансамПолученным);
	СтруктураШапкиДокумента.Удалить("Сделка");	
	
	 
	
	ТаблицаКопия = ТаблицаПоТоварам.Скопировать();
	ТаблицаКопия.Свернуть("СчетДоходовБУ,СубконтоДоходовБУ1,СубконтоДоходовБУ2,СубконтоДоходовБУ3,НоменклатурнаяГруппа"+?(СтруктураШапкиДокумента.ЕстьНалогНаПрибыльДо2015,",НалоговоеНазначениеДоходовИЗатрат",""),"ПроводкиСуммаСНДСРегл");
	Для каждого СтрокаТаблицы Из ТаблицаПоТоварам Цикл

		// Выручка
		Если СтрокаТаблицы.ПроводкиСуммаСНДСРегл = 0 Тогда
			Продолжить;
		КонецЕсли;

		Проводка = ПроводкиБУ.Добавить();

		Проводка.Период          = Дата;
		Проводка.Организация     = СтруктураШапкиДокумента.Организация;
		Проводка.Сумма           = СтрокаТаблицы.ПроводкиСуммаСНДСРегл;
		Проводка.Содержание      = НСтр("ru='Реализация товаров';uk='Реалізація товарів'",Локализация.КодЯзыкаИнформационнойБазы());
		Проводка.НомерЖурнала    = "";

		Проводка.СчетДт          = СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты", СтруктураШапкиДокумента.Контрагент);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Договоры"   , СтруктураШапкиДокумента.ДоговорКонтрагента);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ДокументыРасчетовСКонтрагентами", УправлениеВзаиморасчетами.ОпределитьДокументРасчетовСКонтрагентом(Ссылка,СделкаПоРеализации));
		
		Проводка.ВалютаДт        = СтруктураШапкиДокумента.ВалютаДокумента;
		Проводка.ВалютнаяСуммаДт = СтрокаТаблицы.ПроводкиСуммаСНДСВал;
		
		Проводка.СчетКт         = СтрокаТаблицы.СчетДоходовБУ;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, СтрокаТаблицы.СубконтоДоходовБУ1);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, СтрокаТаблицы.СубконтоДоходовБУ2);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3, СтрокаТаблицы.СубконтоДоходовБУ3);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "НоменклатурныеГруппы", СтрокаТаблицы.НоменклатурнаяГруппа);
		
		Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыльДо2015 Тогда
			
			Проводка.НалоговоеНазначениеКт  = СтрокаТаблицы.НалоговоеНазначениеДоходовИЗатрат;
		    Проводка.СуммаНУКт 				= СтрокаТаблицы.ПроводкиСуммаСНДСРегл;
			
		КонецЕсли;

	КонецЦикла;
	
	// Проводки по НДС
	// ТОВАРЫ
	ТаблицаКопия = ТаблицаПоТоварам.Скопировать();
	ТаблицаКопия.Свернуть("СтавкаНДС,СчетДоходовБУ,СубконтоДоходовБУ1,СубконтоДоходовБУ2,СубконтоДоходовБУ3,НоменклатурнаяГруппа"+?(СтруктураШапкиДокумента.ЕстьНалогНаПрибыльДо2015,",НалоговоеНазначениеДоходовИЗатрат",""),"ПроводкиСуммаНДСРегл,ПроводкиСуммаНДСВал,СуммаНДСПередачи");
			
	Для Каждого СтрокаТаблицы Из ТаблицаКопия Цикл
				
		Если    СтрокаТаблицы.ПроводкиСуммаНДСРегл <> 0 
			ИЛИ СтрокаТаблицы.ПроводкиСуммаНДСВал  <> 0 Тогда
			
			Если СтрокаТаблицы.ПроводкиСуммаНДСРегл <> СтрокаТаблицы.СуммаНДСПередачи Тогда
			    // сфорируем проводку по разнице по НДС в связи с разными ценами передачи и продажи
				
				ПроводкаКорректировки =  ПроводкиБУ.Добавить();
				
				ПроводкаКорректировки.Период                     = СтруктураШапкиДокумента.Дата;
				ПроводкаКорректировки.Организация                = СтруктураШапкиДокумента.Организация;
				ПроводкаКорректировки.Сумма                      = СтрокаТаблицы.ПроводкиСуммаНДСРегл - СтрокаТаблицы.СуммаНДСПередачи;
				ПроводкаКорректировки.Содержание                 = НСтр("ru='НДС: налоговые обязательства: корректировка по цене продажи';uk=""ПДВ: податкові зобов'язання: коригування за ціною продажу""");
				ПроводкаКорректировки.НомерЖурнала               = "";

				ПроводкаКорректировки.СчетДт = СтруктураШапкиДокумента.СчетУчетаНДСПродажПодтвержденный;
				БухгалтерскийУчет.УстановитьСубконто(ПроводкаКорректировки.СчетДт, ПроводкаКорректировки.СубконтоДт, "Контрагенты", СтруктураШапкиДокумента.Контрагент);
				БухгалтерскийУчет.УстановитьСубконто(ПроводкаКорректировки.СчетДт, ПроводкаКорректировки.СубконтоДт, "Договоры"   , СтруктураШапкиДокумента.ДоговорКонтрагента);
				БухгалтерскийУчет.УстановитьСубконто(ПроводкаКорректировки.СчетДт, ПроводкаКорректировки.СубконтоДт, "ДокументыРасчетовСКонтрагентами", НалоговыйУчет.ОпределитьСделкуНалоговыйУчет(СтруктураШапкиДокумента, Ссылка, СделкаПоРеализации));
						
				ПроводкаКорректировки.СчетКт = СтруктураШапкиДокумента.СчетУчетаНДСПродаж;
				БухгалтерскийУчет.УстановитьСубконто(ПроводкаКорректировки.СчетКт, ПроводкаКорректировки.СубконтоКт, "Контрагенты", СтруктураШапкиДокумента.Контрагент);
				БухгалтерскийУчет.УстановитьСубконто(ПроводкаКорректировки.СчетКт, ПроводкаКорректировки.СубконтоКт, "Договоры"   , СтруктураШапкиДокумента.ДоговорКонтрагента);
				БухгалтерскийУчет.УстановитьСубконто(ПроводкаКорректировки.СчетКт, ПроводкаКорректировки.СубконтоКт, "ДокументыРасчетовСКонтрагентами", НалоговыйУчет.ОпределитьСделкуНалоговыйУчет(СтруктураШапкиДокумента, Ссылка, СделкаПоРеализации));
					
			КонецЕсли;													  
			
			Проводка = ПроводкиБУ.Добавить();

			Проводка.Период                     = СтруктураШапкиДокумента.Дата;
			Проводка.Организация                = СтруктураШапкиДокумента.Организация;
			Проводка.Сумма                      = СтрокаТаблицы.ПроводкиСуммаНДСРегл;
			Проводка.Содержание                 = НСтр("ru='НДС: налоговые обязательства: отгрузка';uk=""ПДВ: податкові зобов'язання: відвантаження""",Локализация.КодЯзыкаИнформационнойБазы());
			Проводка.НомерЖурнала               = "";

			Проводка.СчетДт         = СтрокаТаблицы.СчетДоходовБУ;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтрокаТаблицы.СубконтоДоходовБУ1);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, СтрокаТаблицы.СубконтоДоходовБУ2);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, СтрокаТаблицы.СубконтоДоходовБУ3);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "НоменклатурныеГруппы", СтрокаТаблицы.НоменклатурнаяГруппа);
			
			Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыльДо2015 Тогда
				
				Проводка.НалоговоеНазначениеДт = СтрокаТаблицы.НалоговоеНазначениеДоходовИЗатрат;
				Проводка.СуммаНУДт = СтрокаТаблицы.ПроводкиСуммаНДСРегл;
				
			КонецЕсли;
			
			Проводка.СчетКт = СтруктураШапкиДокумента.СчетУчетаНДСПродажПодтвержденный;
			
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Контрагенты", СтруктураШапкиДокумента.Контрагент);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Договоры"   , СтруктураШапкиДокумента.ДоговорКонтрагента);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ДокументыРасчетовСКонтрагентами", НалоговыйУчет.ОпределитьСделкуНалоговыйУчет(СтруктураШапкиДокумента, Ссылка, СделкаПоРеализации));
			
			НалоговыйУчет.РазбитьПроводкуПоНДСНаПервоеВтороеСобытие(ТаблицаПоВторомуСобытиюНал, ПроводкиБУ, Проводка, 
													  "Кт", СтруктураШапкиДокумента.СчетУчетаНДСПродажПодтвержденный, 
													  СтруктураШапкиДокумента.ДоговорКонтрагента, 
													  НалоговыйУчет.ОпределитьСделкуНалоговыйУчет(СтруктураШапкиДокумента, Ссылка, СделкаПоРеализации), СделкаПоРеализации,
													  Перечисления.СобытияОжидаемыйИПодтвержденныйНДСПродаж.Реализация,
													  СтрокаТаблицы.СтавкаНДС);
		КонецЕсли;

	КонецЦикла;
	
	//нужно показать НДС по зачету вознаграждения, если при этом возникло первое событие (как при оплате)
	Если Не ТаблицаЗачетаЗадолженностиЗаТовары = Неопределено
	   И Не СтруктураШапкиДокумента.СложныйНалоговыйУчет Тогда
			
		Для каждого СтрокаТаблицы Из ТаблицаЗачетаЗадолженностиЗаТовары  Цикл
				
			СуммаПроводки = НалоговыйУчет.ПолучитьСуммуПроводкиПоНДС(ТаблицаПоВторомуСобытиюНалЗачетВознаграждения, СтрокаТаблицы.СуммаНДС, 
													Перечисления.СобытияОжидаемыйИПодтвержденныйНДСПродаж.Реализация,
													СтруктураШапкиДокумента.ДоговорКонтрагента,
													НалоговыйУчет.ОпределитьСделкуНалоговыйУчет(СтруктураШапкиДокумента, Ссылка, СделкаПоРеализации),
													СделкаПоРеализации,
													Ложь);
													
			Если СуммаПроводки <> 0 И СуммаВознаграждения > 0 Тогда
								
				Проводка = ПроводкиБУ.Добавить();
								
				Проводка.Период                     = СтруктураШапкиДокумента.Дата;
				Проводка.Активность                 = Истина;
				Проводка.Организация                = СтруктураШапкиДокумента.Организация;
				Проводка.Сумма                      = СуммаПроводки;
				Проводка.Содержание                 = НСтр("ru='НДС: налоговые обязательства: зачет вознаграждения';uk=""ПДВ: податкові зобов'язання: залік винагороди""",Локализация.КодЯзыкаИнформационнойБазы());
				Проводка.НомерЖурнала               = "";
									
				Проводка.СчетДт = СтруктураШапкиДокумента.СчетУчетаНДСПродажПодтвержденный;
								
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Контрагенты",					 СтруктураШапкиДокумента.Контрагент);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Договоры",						 СтруктураШапкиДокумента.ДоговорКонтрагента);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"ДокументыРасчетовСКонтрагентами",НалоговыйУчет.ОпределитьСделкуНалоговыйУчет(СтруктураШапкиДокумента, Ссылка, СделкаПоРеализации));
								
				Проводка.СчетКт  = СтрокаТаблицы.СчетУчетаНДС;
								
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Контрагенты",					 СтруктураШапкиДокумента.Контрагент);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Договоры",						 СтруктураШапкиДокумента.ДоговорКонтрагента);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"ДокументыРасчетовСКонтрагентами",НалоговыйУчет.ОпределитьСделкуНалоговыйУчет(СтруктураШапкиДокумента, Ссылка, СделкаПоРеализации));
								
			КонецЕсли;					
							
		КонецЦикла;
			
	КонецЕсли;			
			
КонецПроцедуры

Процедура ДвиженияПоПриобретениюУслуг(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоУслугам, ТаблицаПоВторомуСобытиюНал, Отказ, Заголовок)
	
	ДатаДока   = Дата;
	ПроводкиБУ = Движения.Хозрасчетный;
	
	ТаблицыДокумента = Новый Структура();
   	ТаблицыДокумента.Вставить("ТаблицаПоУслугам",ТаблицаПоУслугам);
    СтруктураШапкиДокумента.Вставить("ВидОперации", "ПоУслугам"); 
	
	Если СтруктураШапкиДокумента.УдержатьВознаграждение Тогда
		Движения.Хозрасчетный.Записать();
		СтруктураШапкиДокумента.Вставить("УчитыватьДвиженияДокумента",Истина);
		СтруктураШапкиДокумента.Вставить("Сделка",?(ЗначениеЗаполнено(СделкаПоПриобретению), СделкаПоПриобретению, Ссылка));
	КонецЕсли; 
	
	ТаблицаАвансов = БухгалтерскийУчетРасчетовСКонтрагентами.ЗачетАванса(ЭтотОбъект, СтруктураШапкиДокумента , мВалютаРегламентированногоУчета, ТаблицыДокумента , Отказ, Заголовок, "АВ",,,СтруктураШапкиДокумента.СчетУчетаРасчетовЗаПосредническиеУслуги, СтруктураШапкиДокумента.СчетУчетаРасчетовПоАвансамВыданным);
	
	Для каждого СтрокаТаблицы Из ТаблицаПоУслугам Цикл
		
		Если СтрокаТаблицы.ПроводкиСуммаБезНДСРегл = 0 Тогда
			Продолжить;
		КонецЕсли;	
		
		Проводка = ПроводкиБУ.Добавить();
		
		Проводка.Период          = Дата;
		Проводка.Организация     = СтруктураШапкиДокумента.Организация;
		Проводка.Сумма           = СтрокаТаблицы.ПроводкиСуммаБезНДСРегл;
		Проводка.Содержание      = НСтр("ru='Услуги вознаграждения';uk='Послуги винагороди'",Локализация.КодЯзыкаИнформационнойБазы());
		Проводка.НомерЖурнала    = "";
		
		Проводка.СчетДт          = СтрокаТаблицы.СчетЗатрат;
		
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтрокаТаблицы.Субконто1);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, СтрокаТаблицы.Субконто2);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, СтрокаТаблицы.Субконто3);
		
		Проводка.НалоговоеНазначениеДт = СтрокаТаблицы.НалоговоеНазначениеДоходовИЗатрат;
		Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыльДо2015 И
		 	 СтруктураШапкиДокумента.НеОтноситьНаЗатратыПоНУ = Ложь И 
			 СтрокаТаблицы.НалоговоеНазначениеДоходовИЗатрат  <> Справочники.НалоговыеНазначенияАктивовИЗатрат.НКУ_НеХозДеятельность Тогда
			 
			 Проводка.СуммаНУДт = СтрокаТаблицы.ПроводкиСуммаБезНДСРегл;
			 
		 КонецЕсли;
		
		Проводка.СчетКт          = СтруктураШапкиДокумента.СчетУчетаРасчетовЗаПосредническиеУслуги;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Контрагенты", СтруктураШапкиДокумента.Контрагент);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Договоры"   , СтруктураШапкиДокумента.ДоговорКонтрагента);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ДокументыРасчетовСКонтрагентами", УправлениеВзаиморасчетами.ОпределитьДокументРасчетовСКонтрагентом(Ссылка,СделкаПоПриобретению));
		Проводка.ВалютаКт        = СтруктураШапкиДокумента.ВалютаДокумента;
		Проводка.ВалютнаяСуммаКт = СтрокаТаблицы.ПроводкиСуммаБезНДСВал;
		
	КонецЦикла;
	
	// НДС по услугам
	Для каждого СтрокаТаблицы Из ТаблицаПоУслугам Цикл
				
		Если (СтрокаТаблицы.ПроводкиСуммаНДСРегл <> 0 
			ИЛИ СтрокаТаблицы.ПроводкиСуммаНДСВал  <> 0) Тогда
					
			Проводка = ПроводкиБУ.Добавить();
					
			Проводка.Период                     = СтруктураШапкиДокумента.Дата;
			Проводка.Организация                = СтруктураШапкиДокумента.Организация;
			Проводка.Сумма                      = СтрокаТаблицы.ПроводкиСуммаНДСРегл;
			Проводка.Содержание                 = НСтр("ru='НДС: налоговый кредит: отгрузка';uk='ПДВ: податковий кредит: відвантаження'",Локализация.КодЯзыкаИнформационнойБазы());
			Проводка.НомерЖурнала               = "";
					
			Проводка.СчетДт                     = СтруктураШапкиДокумента.СчетУчетаНДСПриобретений;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты", СтруктураШапкиДокумента.Контрагент);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Договоры"   , СтруктураШапкиДокумента.ДоговорКонтрагента);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ДокументыРасчетовСКонтрагентами", НалоговыйУчет.ОпределитьСделкуНалоговыйУчет(СтруктураШапкиДокумента, Ссылка, СделкаПоПриобретению));
					
			Проводка.СчетКт                     = СтруктураШапкиДокумента.СчетУчетаРасчетовЗаПосредническиеУслуги;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Контрагенты", СтруктураШапкиДокумента.Контрагент);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Договоры"   , СтруктураШапкиДокумента.ДоговорКонтрагента);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ДокументыРасчетовСКонтрагентами", УправлениеВзаиморасчетами.ОпределитьДокументРасчетовСКонтрагентом(Ссылка,СделкаПоПриобретению));
			Проводка.ВалютаКт                   = СтруктураШапкиДокумента.ВалютаДокумента;
			Проводка.ВалютнаяСуммаКт            = СтрокаТаблицы.ПроводкиСуммаНДСВал;
			
			
			Если НЕ СтруктураШапкиДокумента.УдержатьВознаграждение Тогда
				НалоговыйУчет.РазбитьПроводкуПоНДСНаПервоеВтороеСобытие(ТаблицаПоВторомуСобытиюНал, ПроводкиБУ, Проводка, 
														  "Дт", СтруктураШапкиДокумента.СчетУчетаНДСПриобретенийПодтвержденный, 
														  СтруктураШапкиДокумента.ДоговорКонтрагента, 
														  НалоговыйУчет.ОпределитьСделкуНалоговыйУчет(СтруктураШапкиДокумента, Ссылка, СделкаПоПриобретению), СделкаПоПриобретению,
														  Перечисления.СобытияОжидаемыйИПодтвержденныйНДСПриобретений.Поступление,
														  СтрокаТаблицы.СтавкаНДС,
														  СтрокаТаблицы.ДляХозяйственнойДеятельности, СтрокаТаблицы.ВидДеятельностиНДС, СтрокаТаблицы.Амортизируется);
			Иначе
				// проводки всегда будут по первому событию.										  
				
			КонецЕсли;				
			
		КонецЕсли;
				
	КонецЦикла;	
	
КонецПроцедуры

Процедура ДвиженияПоРегистрамНалоговогоУчета(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоУслугам, 
											ТаблицаПоВторомуСобытиюНал, 
											ТаблицаПоВторомуСобытиюНалЗачетВознаграждения, 
											ТаблицаДвиженийЗачетЗадолженности,
											Отказ, Заголовок)
											
	ТаблицаПоВторомуСобытиюНал 					  = НалоговыйУчет.СоздатьСтруктуруТаблицыНалоговыхСумм();
    ТаблицаПоВторомуСобытиюНалЗачетВознаграждения = НалоговыйУчет.СоздатьСтруктуруТаблицыНалоговыхСумм();
											
	Если Не СтруктураШапкиДокумента.ЕстьНДС Тогда
		// Если не нужно отражать в налоговом учете, тогда не отражаем и в подсистеме учета НДС
		Возврат;
	КонецЕсли;
		
	// ПО РАСЧЕТАМ ЗА ТОВАРЫ
	НаборДвижений = Движения.ПродажиНалоговыйУчет;
		
	// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
	ТаблицаДвижений = НаборДвижений.ВыгрузитьКолонки();
	
	ТаблицаКопия = ТаблицаПоТоварам.Скопировать();
	ТаблицаКопия.Свернуть("СтавкаНДС","СуммаСНДСВал, СуммаНДСВал");
	ТаблицаПродаж = ТаблицаКопия.Скопировать();
	
	Сч = 0;
	Пока Сч < ТаблицаПродаж.Количество() Цикл
		СтрокаТаблицы = ТаблицаПродаж.Получить(Сч);
		Если СтрокаТаблицы.СуммаСНДСВал + СтрокаТаблицы.СуммаНДСВал = 0 Тогда
			ТаблицаПродаж.Удалить(СтрокаТаблицы);
		Иначе
			Сч = Сч + 1;
		КонецЕсли;
	КонецЦикла;
	
	ТаблицаПродаж.Колонки.СуммаСНДСВал.Имя = "СуммаВзаиморасчетов";
	ТаблицаПродаж.Колонки.СуммаНДСВал.Имя  = "СуммаНДС";
	
	ОбщегоНазначенияБПВызовСервера.ЗагрузитьВТаблицуЗначений(ТаблицаПродаж, ТаблицаДвижений);
	ТаблицаДвижений.ЗаполнитьЗначения(Организация       , "Организация");
	ТаблицаДвижений.ЗаполнитьЗначения(ДоговорКонтрагента, "ДоговорКонтрагента");
	ТаблицаДвижений.ЗаполнитьЗначения(НалоговыйУчет.ОпределитьСделкуНалоговыйУчет(СтруктураШапкиДокумента,
																	СтруктураШапкиДокумента.Ссылка, 
																	СтруктураШапкиДокумента.СделкаПоРеализации),
									  "Сделка");
	ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СобытияПродажиНалоговыйУчет.РеализацияПокупателю, "Событие");
	
	Если СтруктураШапкиДокумента.СложныйНалоговыйУчет Тогда
		
		// очистим налоговые реквизиты
		ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтавкиНДС.ПустаяСсылка(), 			"СтавкаНДС");
		ТаблицаДвижений.ЗаполнитьЗначения(0, 												"СуммаНДС");
		
	Иначе		
		// упрощенный налоговый учет
		Если НЕ СтруктураШапкиДокумента.ЕстьНДС Тогда
			ТаблицаДвижений.ЗаполнитьЗначения(0, 												"СуммаНДС");	
			ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтавкиНДС.ПустаяСсылка(), 			"СтавкаНДС");
		КонецЕсли;
		
		Если СтруктураШапкиДокумента.ВедениеВзаиморасчетовНУ = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоРасчетнымДокументам Тогда
			// взаиморасчеты по договору по расчетным документам - необходимо заполнить в регистре реквизит РасчетныйДокумент
			ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.СделкаПоРеализации, "РасчетныйДокумент");
		КонецЕсли;			
		
	КонецЕсли;			
	
	Если НЕ Отказ И ТаблицаДвижений.Количество() > 0 Тогда
			
		НаборДвижений.мПериод          = Дата;
		НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;
		
		Движения.ПродажиНалоговыйУчет.ВыполнитьПриход();
		Движения.ПродажиНалоговыйУчет.Записать();
			
	КонецЕсли;
		
	Если СтруктураШапкиДокумента.УдержатьВознаграждение Тогда
			
		// Отразим зачет вознаграждения в регистре ПродажиНалоговыйУчет
		// Для этого последовательно "спишем суммы" из таблицы по проданным товарам,
		// уменьшив их на сумму возвнаграждения (СНДС)
		
		ТаблицаДвиженийЗачетЗадолженности = ТаблицаДвижений.СкопироватьКолонки();
		
		СуммаКСписанию 		= ТаблицаПоУслугам.Итог("СуммаСНДСВал");
		Для каждого Строка Из ТаблицаДвижений Цикл
			
			Если СуммаКСписанию <= 0 Тогда
				Прервать;
			КонецЕсли;
			
			Если Строка.СуммаВзаиморасчетов <= 0 Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаЗачета = ТаблицаДвиженийЗачетЗадолженности.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаЗачета, Строка);
			
			СуммаЗачета = Мин(СуммаКСписанию, Строка.СуммаВзаиморасчетов);
			
			Если Строка.СуммаВзаиморасчетов = СуммаКСписанию Тогда
				СуммаНДСЗачета = Строка.СуммаНДС;
			Иначе
				СуммаНДСЗачета = Строка.СуммаНДС * (СуммаКСписанию/Строка.СуммаВзаиморасчетов);
			КонецЕсли;
			
			СтрокаЗачета.СуммаВзаиморасчетов     = СуммаЗачета;
			СтрокаЗачета.СуммаНДС 				 = СуммаНДСЗачета;
			
			СуммаКСписанию = СуммаКСписанию - СуммаЗачета;
			
		КонецЦикла;
		
		Если СуммаКСписанию > 0 Тогда
		    // очень странно, конечно
			Сообщить(НСтр("ru='Внимание! Сумма вознаграждения превышает задолженность за проданный товар!';uk='Увага! Сума винагороди перевищує заборгованість за проданий товар!'"));	
		КонецЕсли;			
		
		ТаблицаДвиженийЗачетЗадолженности.ЗаполнитьЗначения(Перечисления.СобытияПродажиНалоговыйУчет.ОплатаПокупателем, "Событие");
		
		// при зачете вознаграждения при расчетах по расчетным документам в качестве расч. документа будет выступть сам документ
		Если НЕ СтруктураШапкиДокумента.СложныйНалоговыйУчет 
			И СтруктураШапкиДокумента.ВедениеВзаиморасчетовНУ = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоРасчетнымДокументам Тогда
			ТаблицаДвиженийЗачетЗадолженности.ЗаполнитьЗначения(Ссылка, "Сделка");
			ТаблицаДвиженийЗачетЗадолженности.ЗаполнитьЗначения(Ссылка, "РасчетныйДокумент");
		КонецЕсли;			
		
		Если НЕ Отказ И ТаблицаДвижений.Количество() > 0 Тогда
				
			НаборДвижений.мПериод          = Дата;
			НаборДвижений.мТаблицаДвижений = ТаблицаДвиженийЗачетЗадолженности;
			
			Движения.ПродажиНалоговыйУчет.ВыполнитьПриход();
			Движения.ПродажиНалоговыйУчет.Записать();
				
		КонецЕсли;
	КонецЕсли;
		
	// ПО РАСЧЕТАМ ЗА УСЛУГУ КОМИССИОННОГО ВОЗНАГРАЖДЕНИЯ
	НаборДвижений = Движения.ПриобретенияНалоговыйУчет;
		
	// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
	ТаблицаДвижений = НаборДвижений.ВыгрузитьКолонки();
		
	ТаблицаКопия = ТаблицаПоУслугам.Скопировать();
	ТаблицаКопия.Свернуть("СтавкаНДС, ДляХозяйственнойДеятельности,ВидДеятельностиНДС,Амортизируется","СуммаСНДСВал, СуммаНДСВал");
	ТаблицаПриобретений = ТаблицаКопия.Скопировать();
	
	Сч = 0;
	Пока Сч < ТаблицаПриобретений.Количество() Цикл
		СтрокаТаблицы = ТаблицаПриобретений.Получить(Сч);
		Если СтрокаТаблицы.СуммаСНДСВал + СтрокаТаблицы.СуммаНДСВал = 0 Тогда
			ТаблицаПриобретений.Удалить(СтрокаТаблицы);
		Иначе
			Сч = Сч + 1;
		КонецЕсли;
	КонецЦикла;
	
	ТаблицаПриобретений.Колонки.СуммаСНДСВал.Имя = "СуммаВзаиморасчетов";
	ТаблицаПриобретений.Колонки.СуммаНДСВал.Имя = "СуммаНДС";
	ОбщегоНазначенияБПВызовСервера.ЗагрузитьВТаблицуЗначений(ТаблицаПриобретений, ТаблицаДвижений);
	
	ТаблицаДвижений.ЗаполнитьЗначения(Организация       , "Организация");
	ТаблицаДвижений.ЗаполнитьЗначения(ДоговорКонтрагента, "ДоговорКонтрагента");
	ТаблицаДвижений.ЗаполнитьЗначения(НалоговыйУчет.ОпределитьСделкуНалоговыйУчет(СтруктураШапкиДокумента,
																	СтруктураШапкиДокумента.Ссылка, 
																	СтруктураШапкиДокумента.СделкаПоПриобретению),
									  "Сделка");
	ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СобытияПриобретенияНалоговыйУчет.ПоступлениеОтПоставщика, "Событие");
	
	
	Если СтруктураШапкиДокумента.СложныйНалоговыйУчет Тогда
		
		// очистим налоговые реквизиты
		ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтавкиНДС.ПустаяСсылка(), 			"СтавкаНДС");
		ТаблицаДвижений.ЗаполнитьЗначения(Ложь, 										   	"ДляХозяйственнойДеятельности");
		ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.ВидыДеятельностиНДС.ПустаяСсылка(), 	"ВидДеятельностиНДС");
		ТаблицаДвижений.ЗаполнитьЗначения(0, 												"СуммаНДС");
		ТаблицаДвижений.ЗаполнитьЗначения(Ложь, 											"Амортизируется");
	Иначе		
		// упрощенный налоговый учет
		Если НЕ СтруктураШапкиДокумента.ЕстьНДС Тогда
			ТаблицаДвижений.ЗаполнитьЗначения(0, 												"СуммаНДС");	
			ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтавкиНДС.ПустаяСсылка(), 			"СтавкаНДС");
			ТаблицаДвижений.ЗаполнитьЗначения(Ложь, 										   	"ДляХозяйственнойДеятельности");
			ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.ВидыДеятельностиНДС.ПустаяСсылка(), 	"ВидДеятельностиНДС");
		КонецЕсли;
		
		Если СтруктураШапкиДокумента.ВедениеВзаиморасчетовНУ = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоРасчетнымДокументам Тогда
			// взаиморасчеты по договору по расчетным документам - необходимо заполнить в регистре реквизит РасчетныйДокумент
			ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.СделкаПоПриобретению, "РасчетныйДокумент");
		КонецЕсли;			
		
	КонецЕсли;			
	
	Если НЕ Отказ И ТаблицаДвижений.Количество() > 0 И
	  СуммаВознаграждения > 0 Тогда  	
			
		НаборДвижений.мПериод          = Дата;
		НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;
		
		Движения.ПриобретенияНалоговыйУчет.ВыполнитьПриход();
		Движения.ПриобретенияНалоговыйУчет.Записать();
			
	КонецЕсли;
		
	Если СтруктураШапкиДокумента.УдержатьВознаграждение Тогда
		//Отразим зачет вознаграждения регистре ПриобретенияНалоговыйУчет
		ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СобытияПриобретенияНалоговыйУчет.ОплатаПоставщику, "Событие");
		
		// при зачете вознаграждения при расчетах по расчетным документам в качестве расч. документа будет выступть сам документ
		Если НЕ СтруктураШапкиДокумента.СложныйНалоговыйУчет 
			И СтруктураШапкиДокумента.ВедениеВзаиморасчетовНУ = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоРасчетнымДокументам Тогда
			ТаблицаДвижений.ЗаполнитьЗначения(Ссылка, "Сделка");
			ТаблицаДвижений.ЗаполнитьЗначения(Ссылка, "РасчетныйДокумент");
		КонецЕсли;			
			
		Если НЕ Отказ И ТаблицаДвижений.Количество() > 0 Тогда
				
			НаборДвижений.мПериод          = Дата;
			НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;
			
			Движения.ПриобретенияНалоговыйУчет.ВыполнитьПриход();
			Движения.ПриобретенияНалоговыйУчет.Записать();
				
		КонецЕсли;
	КонецЕсли;
		
	// ОжидаемыйИПодтвержденныйНДСПродаж
	Если НЕ СтруктураШапкиДокумента.СложныйНалоговыйУчет Тогда
		
		Если СтруктураШапкиДокумента.УдержатьВознаграждение Тогда
            // Сформируем отдельно движения по отчету комиссионера  
			// не будем учитывать движения по зачету задолженности
			ДвиженияПоОплатеПоставщику = Новый СписокЗначений;
			ДвиженияПоОплатеПоставщику.Добавить(Перечисления.СобытияПриобретенияНалоговыйУчет.ОплатаПоставщику);
			ДвиженияПоОплатеПоставщику.Добавить(Перечисления.СобытияПродажиНалоговыйУчет.ОплатаПокупателем);
			НалоговыйУчет.ДвиженияПоРегистрамНалоговогоУчетаУпрощенныйНалоговыйУчет(ЭтотОбъект, ТаблицаПоВторомуСобытиюНал, ,ДвиженияПоОплатеПоставщику);
			
			// и по зачету вознаграждения
			НалоговыйУчет.ДвиженияПоРегистрамНалоговогоУчетаУпрощенныйНалоговыйУчет(ЭтотОбъект, ТаблицаПоВторомуСобытиюНалЗачетВознаграждения, , ,Истина, ДвиженияПоОплатеПоставщику);
			
		Иначе		
				// Движения формируются по данным рассчета "первого события" 
			 НалоговыйУчет.ДвиженияПоРегистрамНалоговогоУчетаУпрощенныйНалоговыйУчет(ЭтотОбъект, ТаблицаПоВторомуСобытиюНал);
			   
		КонецЕсли;
	
	ИначеЕсли  СтруктураШапкиДокумента.ЕстьНДС Тогда
		
		// ПО ПРОДАЖАМ ТОВАРОВ
		НаборДвижений = Движения.ОжидаемыйИПодтвержденныйНДСПродаж;
			
		// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
		ТаблицаДвижений = НаборДвижений.ВыгрузитьКолонки();
			
		ТаблицаКопия = ТаблицаПоТоварам.Скопировать();

		ТаблицаКопия.Свернуть("СтавкаНДС","СуммаБезНДСВал,СуммаНДСВал,СуммаСНДСПередачи,СуммаНДСПередачи");
		
		// оставим в таблице только отличия между ценой передачи и ценой продажи
		Инд = 0;
		
		Пока Инд < ТаблицаКопия.Количество() Цикл
			Строка = ТаблицаКопия[Инд];
			
			Если Строка.СуммаБезНДСВал = Строка.СуммаСНДСПередачи - Строка.СуммаНДСПередачи  Тогда
				ТаблицаКопия.Удалить(Строка);
			Иначе
				
				Строка.СуммаБезНДСВал = Строка.СуммаБезНДСВал - (Строка.СуммаСНДСПередачи - Строка.СуммаНДСПередачи);
				Строка.СуммаНДСВал    = Строка.СуммаНДСВал - Строка.СуммаНДСПередачи;
				
				Инд = Инд + 1;
			КонецЕсли;
			
		
		КонецЦикла;
		
		ТаблицаПродаж = ТаблицаКопия.Скопировать();
			
		ТаблицаПродаж.Свернуть("СтавкаНДС","СуммаБезНДСВал,СуммаНДСВал");
		ТаблицаПродаж.Колонки.СуммаБезНДСВал.Имя = "БазаНДС";
		ТаблицаПродаж.Колонки.СуммаНДСВал   .Имя = "СуммаНДС";
		
		Сч = 0;
		Пока Сч < ТаблицаПродаж.Количество() Цикл
			СтрокаТаблицы = ТаблицаПродаж.Получить(Сч);
			Если СтрокаТаблицы.БазаНДС + СтрокаТаблицы.СуммаНДС = 0 Тогда
				ТаблицаПродаж.Удалить(СтрокаТаблицы);
			Иначе
				Сч = Сч + 1;
			КонецЕсли;
		КонецЦикла;
		
		ОбщегоНазначенияБПВызовСервера.ЗагрузитьВТаблицуЗначений(ТаблицаПродаж, ТаблицаДвижений);
		ТаблицаДвижений.ЗаполнитьЗначения(Организация       , "Организация");
		ТаблицаДвижений.ЗаполнитьЗначения(ДоговорКонтрагента, "ДоговорКонтрагента");
		ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СобытияОжидаемыйИПодтвержденныйНДСПродаж.Реализация, "СобытиеНДС");
		ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.КодыОперацийОжидаемыйИПодтвержденныйНДСПродаж.ОжидаемыйНДС, "КодОперации");
			
		Если НЕ Отказ И ТаблицаДвижений.Количество() > 0 Тогда
				
			НаборДвижений.мПериод          = Дата;
			НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;
			
			Движения.ОжидаемыйИПодтвержденныйНДСПродаж.ВыполнитьПриход();
			Движения.ОжидаемыйИПодтвержденныйНДСПродаж.Записать();
				
		КонецЕсли;
			
		// ПО УСЛУГЕ КОМИССИОННОГО ВОЗНАГРАЖДЕНИЯ
		// если комиссионер - нерезидент (т.е. документ не гривневый) его услуги считаются 
		// оказанными на территории Украины, а потому облагаются по ставке 20%.
		// В начале начисляются обязательства, в следующем месяце - кредит.

		Если СтруктураШапкиДокумента.ВалютаДокумента = мВалютаРегламентированногоУчета Тогда
			// Если резидент - тогда все согласно п. 4.7 Закона об НДС.
			
			НаборДвижений = Движения.ОжидаемыйИПодтвержденныйНДСПриобретений;
			// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
			ТаблицаДвижений = НаборДвижений.ВыгрузитьКолонки();
				
			ТаблицаКопия = ТаблицаПоУслугам.Скопировать();
			ТаблицаКопия.Свернуть("СтавкаНДС,ДляХозяйственнойДеятельности,ВидДеятельностиНДС,Амортизируется","СуммаБезНДСВал,СуммаНДСВал");
			ТаблицаКопия.Колонки.СуммаБезНДСВал     .Имя = "БазаНДС";
			ТаблицаКопия.Колонки.СуммаНДСВал        .Имя = "СуммаНДС";
			
			Сч = 0;
			Пока Сч < ТаблицаКопия.Количество() Цикл
				СтрокаТаблицы = ТаблицаКопия.Получить(Сч);
				Если СтрокаТаблицы.БазаНДС + СтрокаТаблицы.СуммаНДС = 0 Тогда
					ТаблицаКопия.Удалить(СтрокаТаблицы);
				Иначе
					Сч = Сч + 1;
				КонецЕсли;
			КонецЦикла;
			
			ОбщегоНазначенияБПВызовСервера.ЗагрузитьВТаблицуЗначений(ТаблицаКопия, ТаблицаДвижений);
			ТаблицаДвижений.ЗаполнитьЗначения(Организация       , "Организация");
			ТаблицаДвижений.ЗаполнитьЗначения(ДоговорКонтрагента, "ДоговорКонтрагента");
			ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СобытияОжидаемыйИПодтвержденныйНДСПриобретений.Поступление, "СобытиеНДС");
			ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.КодыОперацийОжидаемыйИПодтвержденныйНДСПриобретений.ОжидаемыйНДС      , "КодОперации");

			Если НЕ Отказ И ТаблицаДвижений.Количество() > 0 И
			  СуммаВознаграждения > 0 Тогда
					
				НаборДвижений.мПериод          = Дата;
				НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;
					
				Движения.ОжидаемыйИПодтвержденныйНДСПриобретений.ВыполнитьПриход();
				Движения.ОжидаемыйИПодтвержденныйНДСПриобретений.Записать();
					
			КонецЕсли;
		КонецЕсли;
			
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)

	ТипДанныхЗаполнения = ТипЗнч(ДанныеЗаполнения);
	Если ДанныеЗаполнения <> Неопределено И ТипДанныхЗаполнения <> Тип("Структура")
		И Метаданные().ВводитсяНаОсновании.Содержит(ДанныеЗаполнения.Метаданные()) Тогда
		ЗаполнитьПоДокументуОснованию(ДанныеЗаполнения);
	Иначе
		СуммаВключаетНДС = Ложь;
		УдержатьВознаграждение = Истина;
	КонецЕсли;
	ЗаполнениеДокументов.Заполнить(ЭтотОбъект, ДанныеЗаполнения);

	// Специфические для конкретного документа действия
	Если ЗначениеЗаполнено(Организация)
		И ЗначениеЗаполнено(Контрагент)
		И ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
		Документы.ОтчетКомиссионераОПродажах.ЗаполнитьСчетаУчетаРасчетов(, Ложь, ЭтотОбъект);
	КонецЕсли;

    Если ЗначениеЗаполнено(Организация) Тогда
		СчетУчета = БухгалтерскийУчетПереопределяемый.ПолучитьСчетУчетаПрочий(Организация, Перечисления.ВидыПрочихСчетовУчета.СчетЗатратОтчетКомиссионераОПродажах);
		СчетУчетаЗатрат	= СчетУчета.СчетУчетаБУ;
		Субконто1 		= СчетУчета.Субконто1;
		Субконто2 		= СчетУчета.Субконто2;
		Субконто3 		= СчетУчета.Субконто3;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)

	Дата = НачалоДня(ОбщегоНазначенияБП.ПолучитьРабочуюДату());

	Если НЕ Дата=НачалоДня(ОбъектКопирования.Дата) Тогда
		// Заполняем значениями по умолчанию (заполняются только пустые реквизиты):
		ЗаполнениеДокументов.Заполнить(ЭтотОбъект);
		// Заполняем реквизиты, специфичные для данного документа:
		Документы.ОтчетКомиссионераОПродажах.ЗаполнитьСчетаУчетаРасчетов(, Ложь, ЭтотОбъект);
	КонецЕсли;

	// Очищаем (перезаполняем) реквизиты, которые не могут быть скопированы:
	Ответственный = Пользователи.ТекущийПользователь();

КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)

	ВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	КомиссионерРезидент = (ВалютаДокумента = ВалютаРегламентированногоУчета);
	
	ПлательщикНДС	= УчетнаяПолитика.ПлательщикНДС(Организация, Дата);
	ПлательщикНалогаНаПрибыльДо2015 	= УчетнаяПолитика.ПлательщикНалогаНаПрибыльДо2015(Организация, Дата);
	
	РеквизитыДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДоговорКонтрагента, "СложныйНалоговыйУчет, СхемаНалоговогоУчета");
	СложныйНалоговыйУчет = ЗначениеЗаполнено(ДоговорКонтрагента) И (РеквизитыДоговора.СложныйНалоговыйУчет);
	
	МассивНепроверяемыхРеквизитов = Новый Массив;

	// Реквизиты шапки, обязательность которых зависит от значений других реквизитов:
	Если ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
		ТекстСообщения = "";
		Если НЕ УчетВзаиморасчетов.ПроверитьВозможностьПроведенияВРеглУчете(
			ЭтотОбъект, ДоговорКонтрагента, ТекстСообщения) Тогда
			ТекстСообщения = ОбщегоНазначенияБПКлиентСервер.ПолучитьТекстСообщения(, "Корректность",
				НСтр("ru='Договор';uk='Договір'"),,, ТекстСообщения);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект,
				"ДоговорКонтрагента", "Объект", Отказ);
		КонецЕсли;
	КонецЕсли;
	
	Если СпособРасчетаКомиссионногоВознаграждения = Перечисления.СпособыРасчетаКомиссионногоВознаграждения.НеРассчитывается Тогда
		МассивНепроверяемыхРеквизитов.Добавить("ПроцентКомиссионногоВознаграждения");
	КонецЕсли;
	
	Если ПлательщикНДС Тогда
	
		Если Не ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
			// Проверку не выполняем
			
		ИначеЕсли НЕ РеквизитыДоговора.СхемаНалоговогоУчета = Справочники.СхемыНалоговогоУчетаПоДоговорамКонтрагентов.СКомиссионером_НК Тогда
			ТекстСообщения = ОбщегоНазначенияБПКлиентСервер.ПолучитьТекстСообщения(, "Корректность",
			    НСтр("ru='Договор';uk='Договір'"),,,
				НСтр("ru='В договоре комиссии указана неправильная схема налогового учета! Используйте схему для периода с 2011 года!';uk='У договорі комісії зазначена неправильна схема податкового обліку! Використайте схему для періоду з 2011 року!'")
			);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, "ДоговорКонтрагента", "Объект", Отказ);
			
		ИначеЕсли НЕ СложныйНалоговыйУчет Тогда			
			ТекстСообщения = ОбщегоНазначенияБПКлиентСервер.ПолучитьТекстСообщения(, "Корректность",
			    НСтр("ru='Договор';uk='Договір'"),,,
				НСтр("ru='По договорам комиссии с 2011 года в конфигурации реализован только ""Сложный налоговый учет"". Установите соответствующий флаг в договоре с контрагентом!';uk='За договорами комісії з 2011 року в конфігурації реалізований тільки ""Складний податковий облік"". Встановіть відповідний прапор в договорі з контрагентом!'")
			);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, "ДоговорКонтрагента", "Объект", Отказ);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не ПлательщикНДС Тогда
		МассивНепроверяемыхРеквизитов.Добавить("СчетУчетаНДСПродаж");
		МассивНепроверяемыхРеквизитов.Добавить("СчетУчетаНДСПродажПодтвержденный");
	КонецЕсли;
	
	Если Не ПлательщикНДС ИЛИ Не КомиссионерРезидент Тогда
		МассивНепроверяемыхРеквизитов.Добавить("СчетУчетаНДСПриобретений");
		МассивНепроверяемыхРеквизитов.Добавить("СчетУчетаНДСПриобретенийПодтвержденный");
	КонецЕсли;
	
	Если Товары.Итог("СуммаВознаграждения") = 0 Тогда
		МассивНепроверяемыхРеквизитов.Добавить("СчетУчетаЗатрат");
		МассивНепроверяемыхРеквизитов.Добавить("НалоговоеНазначение");
		МассивНепроверяемыхРеквизитов.Добавить("НалоговоеНазначениеДоходовИЗатрат");
	Иначе
		БухгалтерскийУчет.ПроверитьЗаполнениеАналитикиЗатрат(ЭтотОбъект, Отказ, "СчетУчетаЗатрат");
		
		Отказ = Отказ ИЛИ Не ЗначениеЗаполнено(СчетУчетаЗатрат); // Предупреждение о реквизите СчетЗатрат будет выведено стандартным механизмом платформы
		
		ХарактерЗатрат = Неопределено;
		НалоговаяАналитикаВПроводке = Неопределено;
		СтруктураСубконто = Новый Структура("Субконто1,Субконто2,Субконто3", Субконто1, Субконто2, Субконто3);
		НалоговыйУчет.ОпределениеАналитикиНалоговогоУчетаВПроводкахДляЗатрат(
			СтруктураСубконто, 
			СчетУчетаЗатрат, 
			ХарактерЗатрат,
			НалоговаяАналитикаВПроводке, 
			, 
			НалоговоеНазначение, 
			НалоговоеНазначениеДоходовИЗатрат,
			,
			Дата,
			,
			ПлательщикНДС
		);
		
		МассивНепроверяемыхРеквизитов.Добавить("НалоговоеНазначениеДоходовИЗатрат"); // достаточно проверки которая идет ниже	
		Если Не Отказ И ПлательщикНалогаНаПрибыльДо2015 Тогда
			
			Если Не ЗначениеЗаполнено(НалоговаяАналитикаВПроводке) Тогда
				
				СтрокаСообщения = "";
				ОшибкаПроведения = Истина;
				Если ХарактерЗатрат = "Затраты" Тогда
					СтрокаСообщения = НСтр("ru='Не указано налоговое назначение затрат!';uk='Не вказане податкове призначення витрат!'");
				ИначеЕсли ХарактерЗатрат = "Строительство" Тогда
					СтрокаСообщения = НСтр("ru='Не указано налоговое назначение для объекта строительства или НМА!';uk=""Не зазначено податкове призначення для об'єкта будівництва або НМА!""");
				ИначеЕсли ХарактерЗатрат = "Производство" Тогда
					СтрокаСообщения = НСтр("ru='Не указано налоговое назначение в производстве для номенклатурной группы!';uk='Не вказане податкове призначення у виробництві для номенклатурної групи!'");
				ИначеЕсли ХарактерЗатрат = "РБП" Тогда
					СтрокаСообщения = НСтр("ru='Не указано налоговое назначение для расходов будущих периодов!';uk='Не зазначено податкове призначення для витрат майбутніх періодів!'");
				ИначеЕсли ХарактерЗатрат = "ТЗР" Тогда
					ОшибкаПроведения = Ложь;
				Иначе
					СтрокаСообщения = НСтр("ru='Невозможно определить налоговое назначение затрат для указанного счета затрат!';uk='неможливо визначити податкове призначення витрат для вказанного рахунку витрат!'");
					ОшибкаПроведения = Ложь;
				КонецЕсли;
			   
				ТекстСообщения = ОбщегоНазначенияБПКлиентСервер.ПолучитьТекстСообщения(, "Корректность", 
					НСтр("ru='Налоговое назначение (затрат)';uk='Податкове призначення (витрат)'"), , ,
					СтрокаСообщения
				);
				Поле = "НалоговоеНазначениеДоходовИЗатрат";
				Если ОшибкаПроведения Тогда
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
				Иначе
					Если ЗначениеЗаполнено(СтрокаСообщения) Тогда
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект");
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;

		// нельзя по НДС указывать нехоз. деятельность, а по НП - хоз. деятельность
		Если ПлательщикНДС И ПлательщикНалогаНаПрибыльДо2015 Тогда
			
			НехозДеятельностьНДС = (НалоговоеНазначение = Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяНеХозДеятельность);
			НехозДеятельностьНКУ = (НалоговаяАналитикаВПроводке = Справочники.НалоговыеНазначенияАктивовИЗатрат.НКУ_НеХозДеятельность);
			
			Если НЕ НалоговоеНазначение = НалоговаяАналитикаВПроводке
			   И НехозДеятельностьНДС <> НехозДеятельностьНКУ Тогда 
				
				 ТекстСообщения = ОбщегоНазначенияБПКлиентСервер.ПолучитьТекстСообщения(, "Корректность", 
					НСтр("ru='Налоговое назначение (НДС)';uk='Податкове призначення (ПДВ)'"), , ,
					НСтр("ru='Для затрат по комиссионному вознаграждению нельзя указывать нехозяйственное налоговое назначение и одновременно хозяйственную деятельность по затратам (и наоборот)!';uk='Для витрат за комісійної винагородою не можна вказувати негосподарське податкове призначення і одночасно господарську діяльність за витратами (і навпаки)!'")
				);
				Поле = "НалоговоеНазначение";
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
				
			КонецЕсли;
			
		КонецЕсли;	
		
		Если ПлательщикНДС Тогда
			Если НалоговоеНазначение = Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_Пропорционально Тогда
				ТекстСообщения = ОбщегоНазначенияБПКлиентСервер.ПолучитьТекстСообщения(, "Корректность", 
					НСтр("ru='Налоговое назначение (НДС)';uk='Податкове призначення (ПДВ)'"), , ,
					НСтр("ru='Пропорциональный НДС в документе не поддерживается!';uk='Пропорційний ПДВ в документі не підтримується!'")
				);
				Поле = "НалоговоеНазначение";
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
			КонецЕсли;
		Иначе
			МассивНепроверяемыхРеквизитов.Добавить("НалоговоеНазначение");
		КонецЕсли;
	КонецЕсли;

	МассивНепроверяемыхРеквизитов.Добавить("Товары.НалоговоеНазначение");
	МассивНепроверяемыхРеквизитов.Добавить("Товары.НалоговоеНазначениеДоходовИЗатрат");
	
	// Корректность заполнения табличной части "Товары":
	НехозВНД_НДС = Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяНеХозДеятельность;
	НехозВНД_НП  = Справочники.НалоговыеНазначенияАктивовИЗатрат.НКУ_НеХозДеятельность;

	ИмяСписка = НСтр("ru='Товары';uk='Товари'");
	Для каждого СтрокаТаблицы Из Товары Цикл

		Префикс = "Товары[" + Формат(СтрокаТаблицы.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].";
		Если НЕ БухгалтерскийУчетВызовСервераПовтИсп.КомиссионныйТовар(СтрокаТаблицы.СчетУчетаБУ) Тогда
			
			Если ПлательщикНалогаНаПрибыльДо2015 Тогда   
					
				Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.НалоговоеНазначениеДоходовИЗатрат) Тогда
					
					ТекстСообщения = ОбщегоНазначенияБПКлиентСервер.ПолучитьТекстСообщения("Колонка",, 
						НСтр("ru='Налоговое назначение (доходов и затрат)';uk='Податкове призначення (доходів і витрат)'"),
						СтрокаТаблицы.НомерСтроки, ИмяСписка
					);
					Поле = Префикс + "НалоговоеНазначениеДоходовИЗатрат";
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
					
				ИначеЕсли СтрокаТаблицы.НалоговоеНазначениеДоходовИЗатрат = НехозВНД_НП Тогда 
					
					ТекстСообщения = ОбщегоНазначенияБПКлиентСервер.ПолучитьТекстСообщения("Колонка", "Корректность", 
						НСтр("ru='Налоговое назначение (доходов и затрат)';uk='Податкове призначення (доходів і витрат)'"),
						СтрокаТаблицы.НомерСтроки, ИмяСписка, 
						НСтр("ru='Вид налоговой деятельности при реализации не может быть ""Не хозяйственной деятельностью"".';uk='Вид податкової діяльності при реалізації не може бути ""Не господарською діяльністю"".'")
					);
					Поле = Префикс + "НалоговоеНазначениеДоходовИЗатрат";
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
					
				КонецЕсли;

			КонецЕсли;

			Если ПлательщикНДС Тогда
					
				Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.НалоговоеНазначение) Тогда
					
					ТекстСообщения = ОбщегоНазначенияБПКлиентСервер.ПолучитьТекстСообщения("Колонка",, 
						НСтр("ru='Налоговое назначение (НДС)';uk='Податкове призначення (ПДВ)'"),
						СтрокаТаблицы.НомерСтроки, ИмяСписка
					);
					Поле = Префикс + "НалоговоеНазначение";
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
					
				ИначеЕсли СтрокаТаблицы.НалоговоеНазначение = НехозВНД_НДС Тогда	
					
					ТекстСообщения = ОбщегоНазначенияБПКлиентСервер.ПолучитьТекстСообщения("Колонка", "Корректность", 
						НСтр("ru='Налоговое назначение (НДС)';uk='Податкове призначення (ПДВ)'"),
						СтрокаТаблицы.НомерСтроки, ИмяСписка,
						НСтр("ru='Вид налоговой деятельности при реализации не может быть ""Не хозяйственной деятельностью"".';uk='Вид податкової діяльності при реалізації не може бути ""Не господарською діяльністю"".'")
					);
					Поле = Префикс + "НалоговоеНазначение";
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);

					
				Иначе
							     
					Если НЕ СтрокаТаблицы.СтавкаНДС.Пустая()
					   И НЕ СтрокаТаблицы.НалоговоеНазначение.ВидДеятельностиНДС = Перечисления.ВидыДеятельностиНДС.ПропорциональноОблагаемая
					   И НЕ СтрокаТаблицы.НалоговоеНазначение.ВидДеятельностиНДС = УчетНДС.ПолучитьВидДеятельностиНДС(СтрокаТаблицы.СтавкаНДС) Тогда
						   
						ТекстСообщения = ОбщегоНазначенияБПКлиентСервер.ПолучитьТекстСообщения("Колонка", "Корректность", 
							НСтр("ru='Налоговое назначение (НДС)';uk='Податкове призначення (ПДВ)'"),
							СтрокаТаблицы.НомерСтроки, ИмяСписка,
							НСтр("ru='Налоговое назначение не соответствует ставке НДС, указанной в строке.';uk='Податкове призначення не відповідає ставці ПДВ, вказаній в рядку.'")
						);
						Поле = Префикс + "НалоговоеНазначение";
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
						
					КонецЕсли;
						
				КонецЕсли;
					
			КонецЕсли;
			
		КонецЕсли;

	КонецЦикла;
	
	// Схемы реализации должны быть заполнены правильно
	МассивРеквизитовДляПроверки = Новый Массив;
	МассивРеквизитовДляПроверки.Добавить("СчетДоходов");
	МассивРеквизитовДляПроверки.Добавить("СчетСебестоимости");
														 
	БухгалтерскийУчет.ПроверитьСхемыРеализацииТабличнойЧастиНаЗаполненость(
		ЭтотОбъект, 
		"Товары", ИмяСписка, 
		"СхемаРеализации", НСтр("ru='Схема реализации';uk='Схема реалізації'") , 
		МассивРеквизитовДляПроверки, 
		Отказ
	);
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);

КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	КомиссионерРезидент = (ВалютаДокумента = ВалютаРегламентированногоУчета);
	
	ПлательщикНДС = УчетнаяПолитика.ПлательщикНДС(Организация, Дата);
	ПлательщикНалогаНаПрибыльДо2015  = УчетнаяПолитика.ПлательщикНалогаНаПрибыльДо2015(Организация, Дата);			   
	
	Если Не КомиссионерРезидент Тогда
		СтавкаНДСВознаграждения = Перечисления.СтавкиНДС.НеНДС;
		Для Каждого СтрокаТЧ Из Товары Цикл
			СтрокаТЧ.СуммаНДСВознаграждения = 0;
		КонецЦикла;
	КонецЕсли;

	Если Не ПлательщикНДС Тогда
		// организация - не плательщик НДС. Установим во всех ТЧ признак соответствующего учета НДС
		НеОБлНДСДеятельность = Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяХозДеятельность;
		Для каждого СтрокаТЧ  Из Товары Цикл
		    СтрокаТЧ.НалоговоеНазначение = НеОБлНДСДеятельность;
		КонецЦикла; 
	КонецЕсли; 
	
	Если Не ПлательщикНалогаНаПрибыльДо2015 Тогда
		НалоговоеНазначениеДоходовИЗатрат = Неопределено;				
		Для каждого СтрокаТЧ  Из Товары Цикл
		    СтрокаТЧ.НалоговоеНазначениеДоходовИЗатрат = Неопределено;
		КонецЦикла; 
	КонецЕсли; 
	
	// Посчитать суммы документа и записать ее в соответствующий реквизит шапки для показа в журналах
	СуммаДокумента      = УчетНДС.ПолучитьСуммуДокументаСНДС(ЭтотОбъект);
	СуммаВознаграждения = Товары.Итог("СуммаВознаграждения")
						+ ?(СуммаВключаетНДС, 0, Товары.Итог("СуммаНДСВознаграждения"));
	
	
	ДополнительныеСвойства.Вставить("РежимЗаписи", РежимЗаписи);
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)

	Перем Заголовок, СтруктураШапкиДокумента;
	Перем ТаблицаПоТоварам, ТаблицаПоУслугам;

	// ПОДГОТОВКА ПРОВЕДЕНИЯ ПО ДАННЫМ ДОКУМЕНТА

	ПроведениеСервер.ПодготовитьНаборыЗаписейКПроведению(ЭтотОбъект);
	Если РучнаяКорректировка Тогда
		Возврат;
	КонецЕсли;

    мВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = НСтр("ru='Проведение документа ""';uk='Проведення документа ""'") + СокрЛП(Ссылка) + """: ";

	ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента);
	ПодготовитьПараметрыУчетнойПолитики(СтруктураШапкиДокумента, Отказ, Заголовок);
	ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоУслугам, Отказ, Заголовок);
	
	// Движения по документу
	Если Не Отказ Тогда
		ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоУслугам, Отказ, Заголовок);
	КонецЕсли;
	
	Движения.Хозрасчетный.ВыполнитьДействияПередЗаписьюДвижений();

	ПроведениеСервер.ПодготовитьНаборыЗаписейКЗаписиДвижений(ЭтотОбъект);
	
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)

	ПроведениеСервер.ПодготовитьНаборыЗаписейКОтменеПроведения(ЭтотОбъект);
	Движения.Записать();


КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Процедура выполняет заполнение табличной части.
//
// Параметры:
//  ДокументПередачи - ссылка на документ основание.
//
Процедура ЗаполнитьТовары(ДокументПередачи = Неопределено) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументПередачи",	ДокументПередачи);
	Запрос.УстановитьПараметр("Субсчета283",		БухгалтерскийУчетВызовСервераПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.ТоварыНаКомиссии));
	Запрос.УстановитьПараметр("Субсчета0242",		БухгалтерскийУчетВызовСервераПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.ТоварыПринятыеНаКомиссиюНаСубкомиссии));
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РеализацияТоваровУслугТовары.НомерСтроки КАК НомерСтроки,
	|	РеализацияТоваровУслугТовары.Номенклатура,
	|	РеализацияТоваровУслугТовары.ЕдиницаИзмерения,
	|	РеализацияТоваровУслугТовары.Коэффициент,
	|	РеализацияТоваровУслугТовары.Количество,
	|	ВЫБОР
	|		КОГДА РеализацияТоваровУслугТовары.Ссылка.СуммаВключаетНДС
	|			ТОГДА РеализацияТоваровУслугТовары.Сумма
	|		ИНАЧЕ РеализацияТоваровУслугТовары.Сумма + РеализацияТоваровУслугТовары.СуммаНДС
	|	КОНЕЦ КАК Сумма,
	|	РеализацияТоваровУслугТовары.СтавкаНДС,
	|	РеализацияТоваровУслугТовары.ПереданныеСчетУчетаБУ КАК СчетУчетаБУ,
	|	РеализацияТоваровУслугТовары.НалоговоеНазначение
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
	|ГДЕ
	|	РеализацияТоваровУслугТовары.Ссылка = &ДокументПередачи
	|	И (РеализацияТоваровУслугТовары.ПереданныеСчетУчетаБУ В(&Субсчета283) ИЛИ
	|	   РеализацияТоваровУслугТовары.ПереданныеСчетУчетаБУ В(&Субсчета0242))
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	ТаблицаТоваров = Запрос.Выполнить().Выгрузить();
	
	ДанныеОбъекта = Новый Структура("Дата, Организация, Реализация");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, ЭтотОбъект);
	ДанныеОбъекта.Реализация = Истина;
	
	СоответствиеСведенийОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОСпискеНоменклатуры(
		ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаТоваров, "Номенклатура", Истина), ДанныеОбъекта);
	
	
	ВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	
	ВалютаВзаиморасчетов = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДоговорКонтрагента, "ВалютаВзаиморасчетов");
	
	КурсДокумента		= ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, ВалютаРегламентированногоУчета);
	КратностьДокумента	= ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, ВалютаРегламентированногоУчета);
	
	Для Каждого СтрокаТоваров Из ТаблицаТоваров Цикл
		
		СтрокаТабличнойЧасти = Товары.Добавить();
		
		Документы.ОтчетКомиссионераОПродажах.ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(
			ДанныеОбъекта, СтрокаТабличнойЧасти, "Товары", СоответствиеСведенийОНоменклатуре.Получить(СтрокаТоваров.Номенклатура));
			
		СтрокаТабличнойЧасти.Номенклатура			= СтрокаТоваров.Номенклатура;
		СтрокаТабличнойЧасти.Количество				= СтрокаТоваров.Количество;
		СтрокаТабличнойЧасти.ЕдиницаИзмерения		= СтрокаТоваров.ЕдиницаИзмерения;
		СтрокаТабличнойЧасти.Коэффициент			= СтрокаТоваров.Коэффициент;
		СтрокаТабличнойЧасти.СтавкаНДС				= СтрокаТоваров.СтавкаНДС;
		СтрокаТабличнойЧасти.СчетУчетаБУ			= СтрокаТоваров.СчетУчетаБУ;
		СтрокаТабличнойЧасти.НалоговоеНазначение	= СтрокаТоваров.НалоговоеНазначение;
		
		Сумма = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(СтрокаТоваров.Сумма,
			ВалютаВзаиморасчетов, ВалютаДокумента,
			КурсВзаиморасчетов, КурсДокумента,
			КратностьВзаиморасчетов, КратностьДокумента);
			
		СтрокаТабличнойЧасти.Сумма = УчетНДСКлиентСервер.ПересчитатьЦенуПриИзмененииФлаговНалогов(
			Сумма, Истина, СуммаВключаетНДС, УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));
		
		ОбработкаТабличныхЧастейКлиентСервер.ПриИзмененииСуммыТабЧасти(СтрокаТабличнойЧасти);
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, СуммаВключаетНДС);
		
		СтрокаТабличнойЧасти.СуммаПередачи = СтрокаТабличнойЧасти.Сумма;
		СтрокаТабличнойЧасти.ЦенаПередачи  = СтрокаТабличнойЧасти.Цена;
		
		Если СпособРасчетаКомиссионногоВознаграждения = Перечисления.СпособыРасчетаКомиссионногоВознаграждения.ПроцентОтСуммыПродажи Тогда
			
			СтрокаТабличнойЧасти.СуммаВознаграждения	= ПроцентКомиссионногоВознаграждения * СтрокаТабличнойЧасти.Сумма / 100;
			СтрокаТабличнойЧасти.СуммаНДСВознаграждения	= УчетНДСКлиентСервер.РассчитатьСуммуНДС(СтрокаТабличнойЧасти.СуммаВознаграждения,
				СуммаВключаетНДС, УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтавкаНДСВознаграждения));
			
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

Процедура ЗаполнитьПоДокументуОснованию(Основание)

	Если ТипЗнч(Основание) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда

		// Заполним реквизиты из стандартного набора по документу основанию.
		ЗаполнениеДокументов.ЗаполнитьПоОснованию(ЭтотОбъект, Основание);

		Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДоговорКонтрагента, "ВидДоговора") <> Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
			ВызватьИсключение НСтр("ru='Отчет комиссионера вводится на основании документа ""Реализация товаров и услуг"",
|в котором указан договор ""С комиссионером"".';uk='Звіт комісіонера вводиться на підставі документа ""Реалізація товарів і послуг"",
|в якому вказаний договір ""З комісіонером"".'");
		КонецЕсли;
		
		УдержатьВознаграждение                   = Истина;
		СпособРасчетаКомиссионногоВознаграждения = ДоговорКонтрагента.СпособРасчетаКомиссионногоВознаграждения;
		ПроцентКомиссионногоВознаграждения       = ДоговорКонтрагента.ПроцентКомиссионногоВознаграждения;
		СтавкаНДСВознаграждения              	 = Перечисления.СтавкиНДС.НДС20;
		
		ЗаполнитьТовары(Основание);

	КонецЕсли;

КонецПроцедуры

#КонецЕсли