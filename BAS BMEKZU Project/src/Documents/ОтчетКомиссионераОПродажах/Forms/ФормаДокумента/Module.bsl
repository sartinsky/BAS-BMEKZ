#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	

	Если Параметры.Ключ.Пустая() Тогда
		ПодготовитьФормуНаСервере();
	КонецЕсли;

	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)

	ОбщегоНазначенияБПКлиент.ОбработкаОповещенияФормыДокумента(ЭтаФорма, Объект.Ссылка, ИмяСобытия, Параметр, Источник);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)

	Если ИсточникВыбора.ИмяФормы = "Обработка.ПодборНоменклатуры.Форма.Форма" Тогда
		
		ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение, ИсточникВыбора.ИмяТаблицы);
		
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом

	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	ПодготовитьФормуНаСервере();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	
	ОбновитьИтоги(ЭтаФорма);
	

	УстановитьСостояниеДокумента();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)

	Если НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДатаДокумента) Тогда
		// Изменение времени не влияет на поведение документа.
		ТекущаяДатаДокумента = Объект.Дата;
		Возврат;
	КонецЕсли;

	// Общие проверки условий по датам.
	ТребуетсяВызовСервера = ОбщегоНазначенияБПКлиент.ТребуетсяВызовСервераПриИзмененииДатыДокумента(Объект.Дата, 
		ТекущаяДатаДокумента, Объект.ВалютаДокумента, ВалютаРегламентированногоУчета);

	// Если определили, что изменение даты может повлиять на какие-либо параметры, 
	// то передаем обработку на сервер.
	Если ТребуетсяВызовСервера Тогда
		ДатаПриИзмененииНаСервере();
	КонецЕсли;
	
	// Запомним новую дату документа.
	ТекущаяДатаДокумента = Объект.Дата;

КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)

	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		ОрганизацияПриИзмененииНаСервере();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СпособРасчетаКомиссионногоВознагражденияПриИзменении(Элемент)

	Если ЗначениеЗаполнено(Объект.СпособРасчетаКомиссионногоВознаграждения) Тогда
		СпособРасчетаКомиссионногоВознагражденияПриИзмененииНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроцентКомиссионногоВознагражденияПриИзменении(Элемент)

	Если ЗначениеЗаполнено(Объект.ПроцентКомиссионногоВознаграждения) Тогда
		ПроцентКомиссионногоВознагражденияПриИзмененииНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтавкаНДСВознагражденияПриИзменении(Элемент)

	Если ЗначениеЗаполнено(Объект.СтавкаНДСВознаграждения) Тогда
		СтавкаНДСВознагражденияПриИзмененииНаСервере();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
 
	Если ЗначениеЗаполнено(Объект.Контрагент) Тогда 
		КонтрагентПриИзмененииНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорКонтрагентаПриИзменении(Элемент)

	Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		ДоговорКонтрагентаПриИзмененииНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СделкаПоПриобретениюНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;

	ПараметрыОбъекта = Новый Структура;
	ПараметрыОбъекта.Вставить("Дата"                 , Объект.Дата);
	ПараметрыОбъекта.Вставить("ДоговорКонтрагента"   , Объект.ДоговорКонтрагента);
	ПараметрыОбъекта.Вставить("Контрагент"           , Объект.Контрагент);
	ПараметрыОбъекта.Вставить("СчетУчета"            , Объект.СчетУчетаРасчетовПоАвансамВыданным);
	ПараметрыОбъекта.Вставить("Организация"          , Объект.Организация);
	ПараметрыОбъекта.Вставить("ОстаткиОбороты"       , "Дт");
	ПараметрыОбъекта.Вставить("ТипыДокументов"       , "Метаданные.Документы.ОтчетКомиссионераОПродажах.Реквизиты.СделкаПоПриобретению.Тип");

	ПараметрыФормы = Новый Структура("ПараметрыОбъекта", ПараметрыОбъекта);
	ОткрытьФорму("Документ.ДокументРасчетовСКонтрагентом.ФормаВыбора", ПараметрыФормы, Элемент);
		
КонецПроцедуры

&НаКлиенте
Процедура СделкаПоРеализацииНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;

	ПараметрыОбъекта = Новый Структура;
	ПараметрыОбъекта.Вставить("Дата"                 , Объект.Дата);
	ПараметрыОбъекта.Вставить("ДоговорКонтрагента"   , Объект.ДоговорКонтрагента);
	ПараметрыОбъекта.Вставить("Контрагент"           , Объект.Контрагент);
	ПараметрыОбъекта.Вставить("СчетУчета"            , Объект.СчетУчетаРасчетовПоАвансамПолученным);
	ПараметрыОбъекта.Вставить("Организация"          , Объект.Организация);
	ПараметрыОбъекта.Вставить("ОстаткиОбороты"       , "Кт");
	ПараметрыОбъекта.Вставить("ТипыДокументов"       , "Метаданные.Документы.ОтчетКомиссионераОПродажах.Реквизиты.СделкаПоРеализации.Тип");

	ПараметрыФормы = Новый Структура("ПараметрыОбъекта", ПараметрыОбъекта);
	ОткрытьФорму("Документ.ДокументРасчетовСКонтрагентом.ФормаВыбора", ПараметрыФормы, Элемент);
		
КонецПроцедуры

&НаКлиенте
Процедура ЦеныИВалютаНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;	
	
	ВалютаДоИзменения	 = Объект.ВалютаДокумента;
	КурсДоИзменения 	 = Объект.КурсВзаиморасчетов;
	КратностьДоИзменения = Объект.КратностьВзаиморасчетов;
	СтруктураЦеныИВалюта = Неопределено;

	ОбработатьИзмененияПоКнопкеЦеныИВалюты(Новый ОписаниеОповещения("ЦеныИВалютаНажатиеЗавершение", ЭтотОбъект, Новый Структура("ВалютаДоИзменения, КратностьДоИзменения, КурсДоИзменения", ВалютаДоИзменения, КратностьДоИзменения, КурсДоИзменения)), ВалютаДоИзменения);
	
КонецПроцедуры

&НаКлиенте
Процедура ЦеныИВалютаНажатиеЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    ВалютаДоИзменения = ДополнительныеПараметры.ВалютаДоИзменения;
    КратностьДоИзменения = ДополнительныеПараметры.КратностьДоИзменения;
    КурсДоИзменения = ДополнительныеПараметры.КурсДоИзменения;
    
    
    СтруктураЦеныИВалюта = Результат;
    
    Если ТипЗнч(СтруктураЦеныИВалюта) = Тип("Структура") И СтруктураЦеныИВалюта.БылиВнесеныИзменения Тогда
        
        Модифицированность      = Истина;
        Объект.ТипЦен           = СтруктураЦеныИВалюта.ТипЦен;
        Объект.ВалютаДокумента  = СтруктураЦеныИВалюта.ВалютаДокумента;
        Объект.СуммаВключаетНДС = СтруктураЦеныИВалюта.СуммаВключаетНДС;
        Объект.КурсВзаиморасчетов      = СтруктураЦеныИВалюта.Курс;
        Объект.КратностьВзаиморасчетов = СтруктураЦеныИВалюта.Кратность;
        
        ПересчитатьНДС = СтруктураЦеныИВалюта.СуммаВключаетНДС <> СтруктураЦеныИВалюта.ПредСуммаВключаетНДС;
        Если СтруктураЦеныИВалюта.ПерезаполнитьЦены ИЛИ СтруктураЦеныИВалюта.ПерезаполнитьЦены ИЛИ ПересчитатьНДС Тогда
            ЗаполнитьРассчитатьСуммы(ВалютаДоИзменения, КурсДоИзменения, КратностьДоИзменения,
            СтруктураЦеныИВалюта.ПерезаполнитьЦены, СтруктураЦеныИВалюта.ПересчитатьЦены, ПересчитатьНДС);
        КонецЕсли;
        
        СформироватьНадписьЦеныИВалюта(ЭтаФорма);
        
    КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура УдержатьВознаграждениеПриИзменении(Элемент)
	
	Если Объект.УдержатьВознаграждение Тогда
		
		// Если вознаграждение удерживается, то счет расчетов с контрагентом 
		// выступает в качестве счета авансов для расчетов по вознаграждению
		Объект.СчетУчетаРасчетовПоАвансамВыданным = Объект.СчетУчетаРасчетовСКонтрагентом;
		
	Иначе
		
		ТекстВопроса = НСтр("ru='Изменить счета учета расчетов?';uk='Змінити рахунки обліку розрахунків?'");
		Ответ = Неопределено;

		ПоказатьВопрос(Новый ОписаниеОповещения("УдержатьВознаграждениеПриИзмененииЗавершение", ЭтотОбъект), ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
        Возврат;

	КонецЕсли;
	
    УправлениеФормой(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура УдержатьВознаграждениеПриИзмененииЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Ответ = РезультатВопроса;
    Если Ответ = КодВозвратаДиалога.Да Тогда
        
        ЗаполнитьСчетаВзаиморасчетов();
        
    КонецЕсли;
    
    УправлениеФормой(ЭтаФорма);

КонецПроцедуры


&НаКлиенте
Процедура СчетУчетаЗатратПриИзменении(Элемент)

	НастроитьСубконтоПриИзмененииСчета(ЭтаФорма, "СчетУчетаЗатрат");

КонецПроцедуры

&НаКлиенте
Процедура СубконтоСчетУчетаЗатратПриИзменении(Элемент)

	НастроитьСубконтоПриИзмененииСубконто(ЭтаФорма, "СчетУчетаЗатрат");

КонецПроцедуры

&НаКлиенте
Процедура НалоговоеНазначениеПриИзменении(Элемент)
	
	УстановитьВидимостьНалоговогоНазначенияДоходовИЗатрат(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура СчетУчетаРасчетовСКонтрагентомПриИзменении(Элемент)
	
	Если Объект.УдержатьВознаграждение Тогда
		
		// Если вознаграждение удерживается, то счет расчетов с контрагентом 
		// выступает в качестве счета авансов для расчетов по вознаграждению
		Объект.СчетУчетаРасчетовПоАвансамВыданным = Объект.СчетУчетаРасчетовСКонтрагентом;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования,ЭтотОбъект,"Объект.Комментарий");

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТовары

&НаКлиенте
Процедура ТоварыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ПриНачалеРедактированияСтрокиТоваровУслуг(
		Элементы.Товары.ТекущиеДанные, НоваяСтрока, Копирование);
		
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриИзменении(Элемент)
	
	
	ОбновитьИтоги(ЭтаФорма);
	
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если НоваяСтрока И ОтменаРедактирования Тогда
		ОбновитьИтоги(ЭтаФорма);
	КонецЕсли;
					
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПослеУдаления(Элемент)
	
	ОбновитьИтоги(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)

	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	ДанныеСтрокиТаблицы = Новый Структура(
		"Номенклатура, ЕдиницаИзмерения, Коэффициент, Количество,
		|Цена, Сумма, ЦенаПередачи, СуммаПередачи, СтавкаНДС, СуммаНДС,
		|СуммаВознаграждения, СуммаНДСВознаграждения,
		|СчетУчетаБУ, СхемаРеализации, НалоговоеНазначение, НалоговоеНазначениеДоходовИЗатрат");
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, ТекущиеДанные);
	
	ДанныеОбъекта = Новый Структура(
		"Дата, Организация, СуммаВключаетНДС,
		|СпособРасчетаКомиссионногоВознаграждения, ПроцентКомиссионногоВознаграждения, СтавкаНДСВознаграждения,
		|ТипЦен, ВалютаДокумента, КурсВзаиморасчетов, КратностьВзаиморасчетов,
		|Реализация");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	ДанныеОбъекта.Реализация = Истина;
	
	ТоварыНоменклатураПриИзмененииНаСервере(ДанныеСтрокиТаблицы, ДанныеОбъекта);
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтрокиТаблицы);

КонецПроцедуры

&НаКлиенте
Процедура ТоварыЕдиницаИзмеренияПриИзменении(Элемент)
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	ДанныеСтрокиТаблицы = Новый Структура(
		"Номенклатура, ЕдиницаИзмерения, Коэффициент, Количество,
		|Цена, Сумма, ЦенаПередачи, СуммаПередачи, СтавкаНДС, СуммаНДС,
		|СуммаВознаграждения, СуммаНДСВознаграждения,
		|СчетУчетаБУ, СхемаРеализации, НалоговоеНазначение, НалоговоеНазначениеДоходовИЗатрат");
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, ТекущиеДанные);
	
	ДанныеОбъекта = Новый Структура(
		"Дата, Организация, СуммаВключаетНДС,
		|СпособРасчетаКомиссионногоВознаграждения, ПроцентКомиссионногоВознаграждения, СтавкаНДСВознаграждения,
		|ТипЦен, ВалютаДокумента, КурсВзаиморасчетов, КратностьВзаиморасчетов,
		|Реализация");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	ДанныеОбъекта.Реализация = Истина;
	
	ТоварыЕдиницаИзмеренияПриИзмененииНаСервере(ДанныеСтрокиТаблицы, ДанныеОбъекта);
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтрокиТаблицы);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКоличествоПриИзменении(Элемент)

	ДанныеСтроки = Элементы.Товары.ТекущиеДанные;
	ПересчитатьСуммуСтроки(ДанныеСтроки, "Товары");

КонецПроцедуры

&НаКлиенте
Процедура ТоварыЦенаПриИзменении(Элемент)

	ДанныеСтроки = Элементы.Товары.ТекущиеДанные;
	ПересчитатьСуммуСтроки(ДанныеСтроки, "Товары");

КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаПриИзменении(Элемент)

	ДанныеСтроки = Элементы.Товары.ТекущиеДанные;
	ПересчитатьЦенуСтроки(ДанныеСтроки, "Товары");

КонецПроцедуры

&НаКлиенте
Процедура ТоварыЦенаПередачиПриИзменении(Элемент)

	ДанныеСтроки = Элементы.Товары.ТекущиеДанные;
	ДанныеСтроки.СуммаПередачи = ДанныеСтроки.Ценапередачи * ДанныеСтроки.Количество;
	Если ЗначениеЗаполнено(Объект.ПроцентКомиссионногоВознаграждения) Тогда
		РассчитатьВознаграждениеВСтроке(ДанныеСтроки, "Товары", Объект);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаПередачиПриИзменении(Элемент)

	ДанныеСтроки = Элементы.Товары.ТекущиеДанные;
	ДанныеСтроки.Ценапередачи = ДанныеСтроки.СуммаПередачи / ?(ДанныеСтроки.Количество=0, 1, ДанныеСтроки.Количество);
	Если ЗначениеЗаполнено(Объект.ПроцентКомиссионногоВознаграждения) Тогда
		РассчитатьВознаграждениеВСтроке(ДанныеСтроки, "Товары", Объект);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ТоварыСтавкаНДСПриИзменении(Элемент)

	ДанныеСтроки = Элементы.Товары.ТекущиеДанные;
	ПересчитатьСуммуНДСВСтроке(ДанныеСтроки);
	Если ЗначениеЗаполнено(Объект.ПроцентКомиссионногоВознаграждения) Тогда
		РассчитатьВознаграждениеВСтроке(ДанныеСтроки, "Товары", Объект);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаВознагражденияПриИзменении(Элемент)

	ДанныеСтроки = Элементы.Товары.ТекущиеДанные;
	ДанныеСтроки.СуммаНДСВознаграждения = УчетНДСКлиентСервер.РассчитатьСуммуНДС(
		ДанныеСтроки.СуммаВознаграждения, Объект.СуммаВключаетНДС, 
		УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(Объект.СтавкаНДСВознаграждения));

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ДобавитьТоварыИзРеализации(Команда)

	Если НЕ ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		ТекстПредупреждения = НСтр("ru='Не выбран договор! Добавление невозможно.';uk='Не вибрано договір! Додавання неможливе.'");
		ПоказатьПредупреждение(Неопределено, ТекстПредупреждения);
		Возврат;
	КонецЕсли;

	Отбор = Новый Структура;
	Отбор.Вставить("Организация", Объект.Организация);
	Отбор.Вставить("Контрагент", Объект.Контрагент);
	Отбор.Вставить("ДоговорКонтрагента", Объект.ДоговорКонтрагента);
	ПараметрыФормы = Новый Структура("Отбор", Отбор);

	ОткрытьФорму("Документ.РеализацияТоваровУслуг.ФормаВыбора", ПараметрыФормы, Элементы.Товары,,,, Новый ОписаниеОповещения("ДобавитьТоварыИзРеализацииЗавершение", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьТоварыИзРеализацииЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    ЗаполнитьПоРеализации(Результат, "Добавить");
    ОбновитьИтоги(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТоварыПоРеализации(Команда)

	Если НЕ ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		ТекстПредупреждения = НСтр("ru='Не выбран договор! Заполнение невозможно.';uk='Не вибрано договір! Заповнення неможливе.'");
		ПоказатьПредупреждение(Неопределено, ТекстПредупреждения);
		Возврат;
	КонецЕсли;

	Если Объект.Товары.Количество() > 0 Тогда

		ТекстВопроса = НСтр("ru='Перед заполнением табличная часть будет очищена. Заполнить?';uk='Перед заповненням таблична частина буде очищена. Заповнити?'") ;

		ПоказатьВопрос(Новый ОписаниеОповещения("ЗаполнитьТоварыПоРеализацииЗавершение", ЭтотОбъект), ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да, Заголовок);
        Возврат;

	КонецЕсли;

	ЗаполнитьТоварыПоРеализацииФрагмент();
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТоварыПоРеализацииЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Ответ = РезультатВопроса;
    Если Ответ <> КодВозвратаДиалога.Да Тогда
        Возврат;
    КонецЕсли;
    
    ЗаполнитьТоварыПоРеализацииФрагмент();

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТоварыПоРеализацииФрагмент()
    
    Перем Отбор, ПараметрыФормы, Результат;
    
    Отбор = Новый Структура;
    Отбор.Вставить("Организация", Объект.Организация);
    Отбор.Вставить("Контрагент", Объект.Контрагент);
    Отбор.Вставить("ДоговорКонтрагента", Объект.ДоговорКонтрагента);
    ПараметрыФормы = Новый Структура("Отбор", Отбор);
    ОткрытьФорму("Документ.РеализацияТоваровУслуг.ФормаВыбора", ПараметрыФормы, Элементы.Товары,,,, Новый ОписаниеОповещения("ЗаполнитьТоварыПоРеализацииФрагментЗавершение", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТоварыПоРеализацииФрагментЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    ЗаполнитьПоРеализации(Результат, "Заполнить");
    ОбновитьИтоги(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ПодборТовары(Команда)
	
	Отказ = Ложь;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыПодбора = ПолучитьПараметрыПодбора("Товары");
	Если ПараметрыПодбора <> Неопределено Тогда
		ОткрытьФорму("Обработка.ПодборНоменклатуры.Форма.Форма", ПараметрыПодбора,
			ЭтаФорма, УникальныйИдентификатор);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункцииБСП

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)

	Элементы = Форма.Элементы;
	Объект = Форма.Объект;

	КомиссионерРезидент = (Объект.ВалютаДокумента = Форма.ВалютаРегламентированногоУчета);

	// Вознаграждение
	Элементы.СпособРасчетаКомиссионногоВознаграждения.Доступность = ЗначениеЗаполнено(Объект.ДоговорКонтрагента);
	Элементы.СтавкаНДСВознаграждения.Доступность            = ЗначениеЗаполнено(Объект.ДоговорКонтрагента);
 	Элементы.СтавкаНДСВознаграждения.Видимость              = КомиссионерРезидент;
	Элементы.ПроцентКомиссионногоВознаграждения.Доступность = ЗначениеЗаполнено(Объект.ДоговорКонтрагента) 
		И ЗначениеЗаполнено(Объект.СпособРасчетаКомиссионногоВознаграждения)
		И Объект.СпособРасчетаКомиссионногоВознаграждения <> ПредопределенноеЗначение("Перечисление.СпособыРасчетаКомиссионногоВознаграждения.НеРассчитывается");
	
	
	Элементы.ДоговорКонтрагента.Доступность = ЗначениеЗаполнено(Объект.Организация) И ЗначениеЗаполнено(Объект.Контрагент);
	Элементы.СделкаПоПриобретению.Доступность = Форма.ВедениеВзаиморасчетовПоРасчетнымДокументам;
	Элементы.СделкаПоРеализации.Доступность   = Форма.ВедениеВзаиморасчетовПоРасчетнымДокументам;
	
	Элементы.ДекорацияНалоговоеНазначение.Видимость               = Форма.ПлательщикНДС;
	Элементы.НалоговоеНазначение.Видимость                        = Форма.ПлательщикНДС;
	
	Элементы.НалоговоеНазначениеДоходовИЗатрат.Видимость 		  = Форма.ПлательщикНалогаНаПрибыльДо2015; 
	Элементы.ДекорацияНалоговоеНазначениеДоходовИЗатрат.Видимость = Форма.ПлательщикНалогаНаПрибыльДо2015; // Невозможно отключить декорацию при помощи ФО
	
	Элементы.СчетУчетаРасчетовПоАвансамВыданным.Доступность     = Не Объект.УдержатьВознаграждение;	// Нельзя определить по данным организации и валюте
	Элементы.СчетУчетаНДСПродаж.Видимость                       = Форма.ПлательщикНДС;
	Элементы.СчетУчетаНДСПродажПодтвержденный.Видимость         = Форма.ПлательщикНДС;	
	Элементы.СчетУчетаНДСПриобретений.Видимость                 = Форма.ПлательщикНДС И КомиссионерРезидент;
	Элементы.СчетУчетаНДСПриобретенийПодтвержденный.Видимость   = Форма.ПлательщикНДС И КомиссионерРезидент; 
	Элементы.СчетУчетаНДСПриобретенийПодтвержденный.Доступность = НЕ Форма.СложныйНалоговыйУчет;	// Нельзя определить по данным организации и валюте
	
	Элементы.ТоварыИтогСуммаНДСВознаграждения.Видимость = КомиссионерРезидент;
	Элементы.ВалютаДокумента3.Видимость                 = КомиссионерРезидент;
	
	ОбновитьИтоги(Форма);
	СформироватьНадписьЦеныИВалюта(Форма);

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСчетаВзаиморасчетов()

	Документы.ОтчетКомиссионераОПродажах.ЗаполнитьСчетаУчетаРасчетов(Неопределено, Истина, Объект);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РассчитатьВознаграждениеВСтроке(СтрокаТаблицы, ИмяТабличнойЧасти, Объект)

	Если Объект.СпособРасчетаКомиссионногоВознаграждения 
		= ПредопределенноеЗначение("Перечисление.СпособыРасчетаКомиссионногоВознаграждения.НеРассчитывается") Тогда
		СтрокаТаблицы.СуммаВознаграждения = 0;
	ИначеЕсли Объект.СпособРасчетаКомиссионногоВознаграждения 
		= ПредопределенноеЗначение("Перечисление.СпособыРасчетаКомиссионногоВознаграждения.ПроцентОтСуммыПродажи") Тогда
		СтрокаТаблицы.СуммаВознаграждения = Окр(Объект.ПроцентКомиссионногоВознаграждения * СтрокаТаблицы.Сумма / 100, 2);
	ИначеЕсли Объект.СпособРасчетаКомиссионногоВознаграждения 
		= ПредопределенноеЗначение("Перечисление.СпособыРасчетаКомиссионногоВознаграждения.ПроцентОтРазностиСуммПродажиИПоступления") Тогда
		СуммаПередачи = СтрокаТаблицы.СуммаПередачи;
		СтрокаТаблицы.СуммаВознаграждения = Окр(Объект.ПроцентКомиссионногоВознаграждения 
			* (СтрокаТаблицы.Сумма - СуммаПередачи) / 100, 2);
	Иначе
		СтрокаТаблицы.СуммаВознаграждения = 0;
	КонецЕсли;

	СтрокаТаблицы.СуммаНДСВознаграждения = УчетНДСКлиентСервер.РассчитатьСуммуНДС(
		СтрокаТаблицы.СуммаВознаграждения, Объект.СуммаВключаетНДС, 
		УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(Объект.СтавкаНДСВознаграждения));

КонецПроцедуры

&НаСервере
Процедура ПересчитатьВознаграждениеВТабличнойЧасти(ИмяТабличнойЧасти = "")

	Если НЕ ЗначениеЗаполнено(ИмяТабличнойЧасти) ИЛИ ИмяТабличнойЧасти = "Товары" Тогда

		Для Каждого СтрокаДокумента Из Объект.Товары Цикл
			РассчитатьВознаграждениеВСтроке(СтрокаДокумента, "Товары", Объект);
		КонецЦикла;

	КонецЕсли;


	ОбновитьИтоги(ЭтаФорма);

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРассчитатьСуммы(Знач ВалютаДоИзменения, КурсДоИзменения, КратностьДоИзменения, ПерезаполнитьЦены = Ложь, ПересчитатьЦены = Ложь, ПересчитатьНДС = Ложь);

	Если ПерезаполнитьЦены Тогда
		
		СписокНоменклатуры	= ОбщегоНазначения.ВыгрузитьКолонку(Объект.Товары, "Номенклатура", Истина);
		
		ТаблицаЦенНоменклатуры	= Ценообразование.ПолучитьТаблицуЦенНоменклатуры(
			СписокНоменклатуры,
			Объект.ТипЦен,
			Объект.Дата);
		
	ИначеЕсли ПересчитатьЦены Тогда
		Если КурсДоИзменения <> 0 И КратностьДоИзменения <> 0 Тогда
			СтруктураКурса = Новый Структура("Курс, Кратность", КурсДоИзменения, КратностьДоИзменения);
		Иначе
			СтруктураКурса = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаДоИзменения, Объект.Дата);
		КонецЕсли;
	КонецЕсли;

	Для Каждого Строка Из Объект.Товары Цикл
		ЗаполнитьРассчитатьСуммыВСтроке(Строка, ТаблицаЦенНоменклатуры, ВалютаДоИзменения, СтруктураКурса, ПерезаполнитьЦены, ПересчитатьЦены, ПересчитатьНДС, 0);
	КонецЦикла;

	ОбновитьИтоги(ЭтаФорма);

	Если ПересчитатьНДС Тогда
		УстановитьЗаголовкиКолонок();
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРассчитатьСуммыВСтроке(Строка, ТаблицаЦенНоменклатуры, ВалютаПередИзменением, СтруктураКурса, ПерезаполнитьЦены, ПересчитатьЦены, ПересчитатьНДС, ЗначениеПустогоКоличества)

	Вознаграждение   = Строка.СуммаВознаграждения;
	Если Строка.Свойство("ЦенаПередачи") Тогда
		ЦенаПередачи = Строка.ЦенаПередачи;
	Иначе
		ЦенаПередачи = 0;
	КонецЕсли;

	Если ПерезаполнитьЦены Тогда
		
		НайденнаяСтрока	= ТаблицаЦенНоменклатуры.Найти(Строка.Номенклатура, "Номенклатура");
		Если НайденнаяСтрока <> Неопределено Тогда
			Цена = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(
				НайденнаяСтрока.Цена, НайденнаяСтрока.Валюта, Объект.ВалютаДокумента, НайденнаяСтрока.Курс,
				Объект.КурсВзаиморасчетов, НайденнаяСтрока.Кратность, Объект.КратностьВзаиморасчетов);
		Иначе
			Цена = 0;
		КонецЕсли;
		
		// Признак того, что цена включает НДС, хранится в реквизите ЦенаВключаетНДС типа цен
		ЦенаВключаетНДС = ?(ЗначениеЗаполнено(Объект.ТипЦен), Объект.ТипЦен.ЦенаВключаетНДС, Ложь);
		
	Иначе
		Если ПересчитатьЦены Тогда
			Цена = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(Строка.Цена, ВалютаПередИзменением, Объект.ВалютаДокумента,
				СтруктураКурса.Курс, Объект.КурсВзаиморасчетов, 
				СтруктураКурса.Кратность, Объект.КратностьВзаиморасчетов);
			Вознаграждение = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(Вознаграждение, ВалютаПередИзменением,
				Объект.ВалютаДокумента, СтруктураКурса.Курс, Объект.КурсВзаиморасчетов, 
				СтруктураКурса.Кратность, Объект.КратностьВзаиморасчетов);
		Иначе
			Цена = Строка.Цена;
		КонецЕсли;
		// Признак того, что цена включает НДС, хранится в реквизите СуммаВключаетНДС документа
		ЦенаВключаетНДС = ?(ПересчитатьНДС, НЕ Объект.СуммаВключаетНДС, Объект.СуммаВключаетНДС);
	КонецЕсли;

	Строка.Цена = УчетНДСКлиентСервер.ПересчитатьЦенуПриИзмененииФлаговНалогов(
		Цена, ЦенаВключаетНДС, Объект.СуммаВключаетНДС, 
		УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(Строка.СтавкаНДС));
	Строка.Сумма    = Строка.Цена * ?(Строка.Количество = 0, ЗначениеПустогоКоличества, Строка.Количество);
	Строка.СуммаНДС = УчетНДСКлиентСервер.РассчитатьСуммуНДС(
		Строка.Сумма, Объект.СуммаВключаетНДС, 
		УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(Строка.СтавкаНДС));
	Строка.СуммаВознаграждения = УчетНДСКлиентСервер.ПересчитатьЦенуПриИзмененииФлаговНалогов(
		Вознаграждение, ЦенаВключаетНДС, Объект.СуммаВключаетНДС, 
		УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(Объект.СтавкаНДСВознаграждения));
	Строка.СуммаНДСВознаграждения = УчетНДСКлиентСервер.РассчитатьСуммуНДС(
		Строка.СуммаВознаграждения, Объект.СуммаВключаетНДС, 
		УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(Объект.СтавкаНДСВознаграждения));

КонецПроцедуры

&НаКлиенте
// Процедура выполняет пересчет в табличной части документа после изменений
// в форме "Цены и валюта".Выполняется пересчет колонок: цена, скидка, сумма,
// сумма НДС, всего.
//
Процедура ОбработатьИзмененияПоКнопкеЦеныИВалюты(Знач Оповещение, Знач ВалютаДоИзменения, ПересчитатьЦены = Ложь, ПерезаполнитьЦены = Ложь)

	// 1. Формируем структуру параметров для заполнения формы "Цены и Валюта".
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ВалютаДокумента",       Объект.ВалютаДокумента);
	СтруктураПараметров.Вставить("Курс",                  Объект.КурсВзаиморасчетов);
	СтруктураПараметров.Вставить("Кратность",             Объект.КратностьВзаиморасчетов);
	СтруктураПараметров.Вставить("СуммаВключаетНДС",      Объект.СуммаВключаетНДС);
	СтруктураПараметров.Вставить("Контрагент",            Объект.Контрагент);
	СтруктураПараметров.Вставить("Договор",               Объект.ДоговорКонтрагента);
	СтруктураПараметров.Вставить("Организация",           Объект.Организация);
	СтруктураПараметров.Вставить("ДатаДокумента",         Объект.Дата);
	СтруктураПараметров.Вставить("ПерезаполнитьЦены",     ПерезаполнитьЦены);
	СтруктураПараметров.Вставить("ПересчитатьЦены",       ПересчитатьЦены);
	СтруктураПараметров.Вставить("БылиВнесеныИзменения",  Ложь);
	СтруктураПараметров.Вставить("ТипЦен",                Объект.ТипЦен);

	ОткрытьФорму("ОбщаяФорма.ФормаЦеныИВалюта", СтруктураПараметров,,,,, Новый ОписаниеОповещения("ОбработатьИзмененияПоКнопкеЦеныИВалютыЗавершение", ЭтотОбъект, Новый Структура("Оповещение", Оповещение)), РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);

КонецПроцедуры

&НаКлиенте
Процедура ОбработатьИзмененияПоКнопкеЦеныИВалютыЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    Оповещение = ДополнительныеПараметры.Оповещение;
    
    
    
    // 2. Открвыаем форму "Цены и Валюта".
    СтруктураЦеныИВалюта = Результат;
    
    ВыполнитьОбработкуОповещения(Оповещение, СтруктураЦеныИВалюта);
    Возврат;

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ТоварыНоменклатураПриИзмененииНаСервере(СтрокаТабличнойЧасти, Знач ДанныеОбъекта)

	СведенияОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОНоменклатуре(
		СтрокаТабличнойЧасти.Номенклатура, ДанныеОбъекта);
	Если СведенияОНоменклатуре = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаТабличнойЧасти.ЕдиницаИзмерения		= СведенияОНоменклатуре.БазоваяЕдиницаИзмерения;
	СтрокаТабличнойЧасти.Коэффициент			= СведенияОНоменклатуре.Коэффициент;
	СтрокаТабличнойЧасти.Цена					= СведенияОНоменклатуре.Цена;
	СтрокаТабличнойЧасти.СтавкаНДС				= СведенияОНоменклатуре.СтавкаНДС;
	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ДанныеОбъекта.СуммаВключаетНДС);
	РассчитатьВознаграждениеВСтроке(СтрокаТабличнойЧасти, "Товары", ДанныеОбъекта);
	
	Документы.ОтчетКомиссионераОПродажах.ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(
		ДанныеОбъекта, СтрокаТабличнойЧасти, "Товары", СведенияОНоменклатуре);
		

КонецПроцедуры

&НаСервере
Процедура ТоварыЕдиницаИзмеренияПриИзмененииНаСервере(СтрокаТабличнойЧасти, ДанныеОбъекта)
	
	ОбработкаТабличныхЧастей.ЗаполнитьКоэффициентТабЧасти(СтрокаТабличнойЧасти, ДанныеОбъекта, "Товары", Метаданные.Документы.ОтчетКомиссионераОПродажах);
	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ДанныеОбъекта.СуммаВключаетНДС);
	
	СтрокаТабличнойЧасти.СуммаПередачи = СтрокаТабличнойЧасти.ЦенаПередачи * СтрокаТабличнойЧасти.Количество;
	Если ЗначениеЗаполнено(ДанныеОбъекта.ПроцентКомиссионногоВознаграждения) Тогда
		РассчитатьВознаграждениеВСтроке(СтрокаТабличнойЧасти, "Товары", ДанныеОбъекта);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьСуммуНДСВСтроке(СтрокаТабличнойЧасти)

	СтрокаТабличнойЧасти.СуммаНДС = УчетНДСКлиентСервер.РассчитатьСуммуНДС(
		СтрокаТабличнойЧасти.Сумма, Объект.СуммаВключаетНДС,
		УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));

КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьСуммуСтроки(ДанныеСтроки, ИмяТабличнойЧасти)

	ОбщегоНазначенияБПКлиент.ПересчитатьСумму(ДанныеСтроки, Объект.СуммаВключаетНДС);
	ПересчитатьСуммуНДСВСтроке(ДанныеСтроки);

	Если ИмяТабличнойЧасти = "Товары" Тогда
		ДанныеСтроки.СуммаПередачи = ДанныеСтроки.Ценапередачи * ДанныеСтроки.Количество;
	КонецЕсли;

	Если ЗначениеЗаполнено(Объект.ПроцентКомиссионногоВознаграждения) Тогда
		РассчитатьВознаграждениеВСтроке(ДанныеСтроки, ИмяТабличнойЧасти, Объект);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьЦенуСтроки(ДанныеСтроки, ИмяТабличнойЧасти)

	ДанныеСтроки.Цена = ДанныеСтроки.Сумма / ?(ДанныеСтроки.Количество = 0, 1, ДанныеСтроки.Количество);

	ПересчитатьСуммуНДСВСтроке(ДанныеСтроки);
	Если ЗначениеЗаполнено(Объект.ПроцентКомиссионногоВознаграждения) Тогда
		РассчитатьВознаграждениеВСтроке(ДанныеСтроки, ИмяТабличнойЧасти, Объект);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоРеализации(Реализация, СпособЗаполнения = "Заполнить")

	Если СпособЗаполнения = "Заполнить" Тогда
		Объект.Товары.Очистить();
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(Реализация) Тогда
		Возврат;
	КонецЕсли;

	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	ДокументОбъект.ЗаполнитьТовары(Реализация);
	ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");

КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьМассивВидовДоговоров()

	МассивВидовДоговоров = Новый Массив;
	МассивВидовДоговоров.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СКомиссионером"));

	Возврат МассивВидовДоговоров;

КонецФункции

&НаСервере
Функция ЕстьСтрокиВТабличныхЧастях()

	Возврат (Объект.Товары.Количество() > 0);

КонецФункции

&НаСервере
Процедура ДатаПриИзмененииНаСервере()
	
	ДатаОбработатьИзменение();
	УправлениеФормой(ЭтаФорма);
	УстановитьЗаголовкиКолонок();
	УстановитьВидимостьНалоговогоНазначенияДоходовИЗатрат(ЭтаФорма);

КонецПроцедуры

Процедура ДатаОбработатьИзменение()
	
	УстановитьФункциональныеОпцииФормы();
	
	Если (Объект.ВалютаДокумента <> ВалютаРегламентированногоУчета) Тогда
		СтруктураКурсаДокумента        = РаботаСКурсамиВалют.ПолучитьКурсВалюты(Объект.ВалютаДокумента, Объект.Дата);
		Объект.КурсВзаиморасчетов      = СтруктураКурсаДокумента.Курс;
		Объект.КратностьВзаиморасчетов = СтруктураКурсаДокумента.Кратность;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()

	УстановитьФункциональныеОпцииФормы();
	
	
	Если ЗначениеЗаполнено(Объект.Контрагент) Тогда 
		КонтрагентОбработатьИзменение();
	КонецЕсли;
	
	СчетУчета = БухгалтерскийУчетПереопределяемый.ПолучитьСчетУчетаПрочий(Объект.Организация, Перечисления.ВидыПрочихСчетовУчета.СчетЗатратОтчетКомиссионераОПродажах);
	Объект.СчетУчетаЗатрат	= СчетУчета.СчетУчетаБУ;
	Объект.Субконто1 		= СчетУчета.Субконто1;
	Объект.Субконто2 		= СчетУчета.Субконто2;
	Объект.Субконто3 		= СчетУчета.Субконто3;
	
	НастроитьСубконтоПриИзмененииСчета(ЭтаФорма, "СчетУчетаЗатрат"); // Выполняет вызов УстановитьВидимостьНалоговогоНазначенияДоходовИЗатрат

	ЗаполнитьСчетаУчетаВТабличнойЧастиНаСервере();
	
	УправлениеФормой(ЭтаФорма);
	УстановитьЗаголовкиКолонок();

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСчетаУчетаВТабличнойЧастиНаСервере(ИмяТабличнойЧасти = "")

	Если ПустаяСтрока(ИмяТабличнойЧасти) ИЛИ ИмяТабличнойЧасти = "Товары" Тогда
		Документы.ОтчетКомиссионераОПродажах.ЗаполнитьСчетаУчетаВТабличнойЧасти(Объект, "Товары");
	КонецЕсли;
	

КонецПроцедуры

&НаСервере
Процедура КонтрагентПриИзмененииНаСервере()

	КонтрагентОбработатьИзменение();
	
	ЗаполнитьСчетаУчетаВТабличнойЧастиНаСервере();
	
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаСервере
Процедура КонтрагентОбработатьИзменение()
	
	БухгалтерскийУчетПереопределяемый.УстановитьДоговорКонтрагента(Объект.ДоговорКонтрагента,
		Объект.Контрагент, Объект.Организация, ПолучитьМассивВидовДоговоров());

	Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		ДоговорКонтрагентаОбработатьИзменение();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДоговорКонтрагентаОбработатьИзменение()
	
	ПересчитатьВознаграждение = Ложь;
	
	РеквизитыДоговорКонтрагента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		Объект.ДоговорКонтрагента, 
		"ПроцентКомиссионногоВознаграждения,СпособРасчетаКомиссионногоВознаграждения,ВалютаВзаиморасчетов,ТипЦен, 
		|ВедениеВзаиморасчетов, СложныйНалоговыйУчет");
		
	ДоговорУказан = ЗначениеЗаполнено(Объект.ДоговорКонтрагента);
	ВедениеВзаиморасчетовПоРасчетнымДокументам = ДоговорУказан И РеквизитыДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоРасчетнымДокументам;
	СложныйНалоговыйУчет                       = ДоговорУказан И РеквизитыДоговорКонтрагента.СложныйНалоговыйУчет;
	
	Если Объект.ПроцентКомиссионногоВознаграждения <> РеквизитыДоговорКонтрагента.ПроцентКомиссионногоВознаграждения
		ИЛИ Объект.СпособРасчетаКомиссионногоВознаграждения <> РеквизитыДоговорКонтрагента.СпособРасчетаКомиссионногоВознаграждения Тогда
		ПересчитатьВознаграждение  = Истина;
		Объект.ПроцентКомиссионногоВознаграждения       = РеквизитыДоговорКонтрагента.ПроцентКомиссионногоВознаграждения;
		Объект.СпособРасчетаКомиссионногоВознаграждения = РеквизитыДоговорКонтрагента.СпособРасчетаКомиссионногоВознаграждения;
		Если НЕ ЗначениеЗаполнено(Объект.СпособРасчетаКомиссионногоВознаграждения) Тогда
			Объект.СпособРасчетаКомиссионногоВознаграждения = Перечисления.СпособыРасчетаКомиссионногоВознаграждения.НеРассчитывается;
		КонецЕсли;
	КонецЕсли;
	
	ВалютаДоИзменения 	 = Объект.ВалютаДокумента;
	КурсДоИзменения   	 = Объект.КурсВзаиморасчетов;
	КратностьДоИзменения = Объект.КратностьВзаиморасчетов;
	ТипЦенДоИзменения 	 = Объект.ТипЦен;
	СуммаВключаетНДСДоИзменения = Объект.СуммаВключаетНДС;
	
	Объект.ВалютаДокумента 			= РеквизитыДоговорКонтрагента.ВалютаВзаиморасчетов;
	СтруктураКурсаДокумента 		= РаботаСКурсамиВалют.ПолучитьКурсВалюты(Объект.ВалютаДокумента, Объект.Дата);
	Объект.КурсВзаиморасчетов      	= СтруктураКурсаДокумента.Курс;
	Объект.КратностьВзаиморасчетов 	= СтруктураКурсаДокумента.Кратность;
	
	Если ЗначениеЗаполнено(РеквизитыДоговорКонтрагента.ТипЦен) Тогда
		РеквизитыТипЦен = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			РеквизитыДоговорКонтрагента.ТипЦен, 
			"ЦенаВключаетНДС");
		
		Объект.ТипЦен           = РеквизитыДоговорКонтрагента.ТипЦен;
		Объект.СуммаВключаетНДС = РеквизитыТипЦен.ЦенаВключаетНДС;
	КонецЕсли;
	

	ПересчитатьЦены = Объект.ВалютаДокумента <> ВалютаДоИзменения
		ИЛИ Объект.КурсВзаиморасчетов <> КурсДоИзменения
		ИЛИ Объект.ТипЦен <> ТипЦенДоИзменения;
	ПересчитатьНДС = Объект.СуммаВключаетНДС <> СуммаВключаетНДСДоИзменения;
	ПересчитатьВознаграждение = ПересчитатьВознаграждение ИЛИ ПересчитатьЦены ИЛИ ПересчитатьНДС;
	
	Если ЕстьСтрокиВТабличныхЧастях() И (ПересчитатьЦены ИЛИ ПересчитатьНДС) Тогда
		ЗаполнитьРассчитатьСуммы(ВалютаДоИзменения, КурсДоИзменения, КратностьДоИзменения, Ложь, ПересчитатьЦены, ПересчитатьНДС);
	ИначеЕсли ПересчитатьНДС Тогда
		УстановитьЗаголовкиКолонок();
	КонецЕсли;

	ЗаполнитьСчетаВзаиморасчетов();

	
	Если ПересчитатьВознаграждение Тогда 
		ПересчитатьВознаграждениеВТабличнойЧасти("Товары");
	КонецЕсли;
	
	СформироватьНадписьЦеныИВалюта(ЭтаФорма);

КонецПроцедуры

&НаСервере
Процедура ДоговорКонтрагентаПриИзмененииНаСервере()

	ДоговорКонтрагентаОбработатьИзменение();
	
	ЗаполнитьСчетаУчетаВТабличнойЧастиНаСервере();
	
	УправлениеФормой(ЭтаФорма);
	УстановитьЗаголовкиКолонок();

КонецПроцедуры

&НаСервере
Процедура СпособРасчетаКомиссионногоВознагражденияПриИзмененииНаСервере()
	
	ПересчитатьВознаграждениеВТабличнойЧасти("Товары");
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ПроцентКомиссионногоВознагражденияПриИзмененииНаСервере()
	
	ПересчитатьВознаграждениеВТабличнойЧасти("Товары");
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура СтавкаНДСВознагражденияПриИзмененииНаСервере()
	
	ПересчитатьВознаграждениеВТабличнойЧасти("Товары");
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьПараметрыПодбора(ИмяТаблицы)

	ПараметрыФормы = Новый Структура;

	ДатаРасчетов     = ?(НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДата()), Неопределено, Объект.Дата);
	ЗаголовокПодбора = НСтр("ru='Подбор номенклатуры в %1 (%2)';uk='Підбір номенклатури %1 (%2)'");

	Валюта = Объект.ВалютаДокумента;

	Если ЗначениеЗаполнено(Объект.ТипЦен) Тогда
		Параметрыформы.Вставить("ПоказыватьЦены", Истина);
	КонецЕсли;

	Если ИмяТаблицы = "Товары" Тогда
		ПредставлениеТаблицы = НСтр("ru='Товары';uk='Товари'");

		ПараметрыФормы.Вставить("ПоказыватьОстатки"  , Истина);
		ПараметрыФормы.Вставить("ПоказыватьСчетУчета", Истина);
	КонецЕсли;
	ЗаголовокПодбора = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ЗаголовокПодбора, Объект.Ссылка, ПредставлениеТаблицы);

	ПараметрыФормы.Вставить("ЕстьЦена"          , Истина);
	ПараметрыФормы.Вставить("ЕстьКоличество"    , Истина);
	ПараметрыФормы.Вставить("ДатаРасчетов"      , ДатаРасчетов);
	ПараметрыФормы.Вставить("ТипЦен"            , Объект.ТипЦен);
	ПараметрыФормы.Вставить("Валюта"            , Валюта);
	ПараметрыФормы.Вставить("ДоговорКонтрагента", Объект.ДоговорКонтрагента);
	ПараметрыФормы.Вставить("Контрагент"        , Объект.Контрагент);
	ПараметрыФормы.Вставить("Организация"       , Объект.Организация);
	ПараметрыФормы.Вставить("Заголовок"         , ЗаголовокПодбора);
	ПараметрыФормы.Вставить("ВидПодбора"        , ПолучитьВидПодбора(ИмяТаблицы));
	ПараметрыФормы.Вставить("ИмяТаблицы"        , ИмяТаблицы);
	ПараметрыФормы.Вставить("Услуги"            , Ложь);

	Возврат ПараметрыФормы;

КонецФункции

&НаКлиенте
Функция ПолучитьВидПодбора(ИмяТаблицы)

	ВидПодбора = "";

	Если ИмяТаблицы = "Товары" Тогда
		ВидПодбора = "Комиссионер";
	КонецЕсли;

	Возврат ВидПодбора;

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьИтоги(Форма)
	
	Объект = Форма.Объект;
	
	Форма.ИтогНДСОтгрузки   = Объект.Товары.Итог("СуммаНДС");
	Форма.ИтогСуммаОтгрузки = Объект.Товары.Итог("Сумма") 
		+ ?(Объект.СуммаВключаетНДС, 0, Форма.ИтогНДСОтгрузки);
	
	Форма.ИтогВсегоНДСВознаграждения = Объект.Товары.Итог("СуммаНДСВознаграждения");
	Форма.ИтогВсегоВознаграждение = Объект.Товары.Итог("СуммаВознаграждения") 
		+ ?(Объект.СуммаВключаетНДС, 0, Форма.ИтогВсегоНДСВознаграждения);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗаголовкиКолонок()
	
	КомиссионерРезидент = (Объект.ВалютаДокумента = ВалютаРегламентированногоУчета);

	ЗаголовокЦена = ?(ПлательщикНДС, ?(Объект.СуммаВключаетНДС, НСтр("ru='Цена с НДС';uk='Ціна з ПДВ'"), НСтр("ru='Цена без НДС';uk='Ціна без ПДВ'")), НСтр("ru='Цена';uk='Ціна'"));
	ЗаголовокСумма = ?(ПлательщикНДС, ?(Объект.СуммаВключаетНДС, НСтр("ru='Сумма с НДС';uk='Сума з ПДВ'"), НСтр("ru='Сумма без НДС';uk='Сума без ПДВ'")), НСтр("ru='Сумма';uk='Сума'"));
	ЗаголовокСуммаВознаграждения = ?(КомиссионерРезидент, ?(Объект.СуммаВключаетНДС, НСтр("ru='Сумма вознаграждения с НДС';uk='Сума винагороди з ПДВ'"), НСтр("ru='Сумма вознаграждения без НДС';uk='Сума винагороди без ПДВ'")), НСтр("ru='Сумма вознаграждения';uk='Сума винагороди'"));
	
	Элементы.ТоварыЦена.Заголовок  = ЗаголовокЦена;
	Элементы.ТоварыСумма.Заголовок = ЗаголовокСумма;
	Элементы.ТоварыСуммаВознаграждения.Заголовок = ЗаголовокСуммаВознаграждения;
	
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение, ИмяТаблицы)

	ТаблицаТоваров = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресПодобраннойНоменклатурыВХранилище);
	
	ДанныеОбъекта = Новый Структура("Дата, Организация, Реализация");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	ДанныеОбъекта.Реализация = Истина;
	
	СоответствиеСведенийОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОСпискеНоменклатуры(
		ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаТоваров, "Номенклатура", Истина), ДанныеОбъекта);
	
	Если ЗначениеЗаполнено(Объект.ТипЦен) Тогда
		ЦенаВключаетНДС = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ТипЦен, "ЦенаВключаетНДС");
	Иначе
		ЦенаВключаетНДС = Объект.СуммаВключаетНДС;
	КонецЕсли;
	
	Для каждого СтрокаТовара Из ТаблицаТоваров Цикл
		
		СтруктураОтбора = Новый Структура("Номенклатура, Цена, ЕдиницаИзмерения", СтрокаТовара.Номенклатура, СтрокаТовара.Цена, СтрокаТовара.ЕдиницаИзмерения);
		СтрокаТабличнойЧасти = НайтиСтрокуТабличнойЧасти(ИмяТаблицы, СтруктураОтбора);
		
		Если СтрокаТабличнойЧасти <> Неопределено Тогда
			// Нашли - увеличиваем количество.
			СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + СтрокаТовара.Количество;
			
			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, Объект.СуммаВключаетНДС);
			РассчитатьВознаграждениеВСтроке(СтрокаТабличнойЧасти, ИмяТаблицы, Объект);
		Иначе
			
			СтрокаТабличнойЧасти = Объект[ИмяТаблицы].Добавить();
			
			ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтрокаТовара);
			
			СведенияОНоменклатуре = СоответствиеСведенийОНоменклатуре.Получить(СтрокаТовара.Номенклатура);
			Если СведенияОНоменклатуре = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаТабличнойЧасти.СтавкаНДС = СведенияОНоменклатуре.СтавкаНДС;
			
			
			Документы.ОтчетКомиссионераОПродажах.ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(
			ДанныеОбъекта, СтрокаТабличнойЧасти, ИмяТаблицы, СведенияОНоменклатуре);
			
			СтрокаТабличнойЧасти.Цена = УчетНДСКлиентСервер.ПересчитатьЦенуПриИзмененииФлаговНалогов(
			СтрокаТабличнойЧасти.Цена, ЦенаВключаетНДС, Объект.СуммаВключаетНДС,
			УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));
			
			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, Объект.СуммаВключаетНДС);
			РассчитатьВознаграждениеВСтроке(СтрокаТабличнойЧасти, ИмяТаблицы, Объект);
			
		КонецЕсли;
		
	КонецЦикла;
	
	
	ОбновитьИтоги(ЭтаФорма);

КонецПроцедуры

&НаСервере
Процедура ПодготовитьФормуНаСервере()

	ТекущаяДатаДокумента = Объект.Дата;

	ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	
	УстановитьФункциональныеОпцииФормы();
	
	ДоговорУказан = ЗначениеЗаполнено(Объект.ДоговорКонтрагента);
	РеквизитыДоговорКонтрагента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		Объект.ДоговорКонтрагента, "ВедениеВзаиморасчетов, СложныйНалоговыйУчет");
	ВедениеВзаиморасчетовПоРасчетнымДокументам = ДоговорУказан И РеквизитыДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоРасчетнымДокументам;
	СложныйНалоговыйУчет                       = ДоговорУказан И РеквизитыДоговорКонтрагента.СложныйНалоговыйУчет;

	// Прочие подписи и реквизиты:
	НастроитьСубконтоПриПодготовкеФормыНаСервере(ЭтаФорма, "СчетУчетаЗатрат");

	
	// Настраиваем внешний вид формы:
	УправлениеФормой(ЭтаФорма);
	УстановитьЗаголовкиКолонок();

	УстановитьСостояниеДокумента();

КонецПроцедуры

&НаСервере
Процедура УстановитьФункциональныеОпцииФормы()

	ОбщегоНазначенияБПКлиентСервер.УстановитьПараметрыФункциональныхОпцийФормыДокумента(ЭтаФорма);

	ПлательщикНДС = УчетнаяПолитика.ПлательщикНДС(Объект.Организация, Объект.Дата);
	ПлательщикНалогаНаПрибыльДо2015  = УчетнаяПолитика.ПлательщикНалогаНаПрибыльДо2015(Объект.Организация, Объект.Дата);
		
КонецПроцедуры 

&НаКлиентеНаСервереБезКонтекста
Процедура СформироватьНадписьЦеныИВалюта(Форма)
	
	Объект = Форма.Объект;
	СтруктураНадписи = Новый Структура(
		"ТипЦен, ВалютаДокумента, Курс, Кратность, СуммаВключаетНДС, ВалютаРегламентированногоУчета",
		Объект.ТипЦен,
		Объект.ВалютаДокумента,
		Объект.КурсВзаиморасчетов,
		Объект.КратностьВзаиморасчетов,
		Объект.СуммаВключаетНДС,
		Форма.ВалютаРегламентированногоУчета);
	Форма.ЦеныИВалюта = ОбщегоНазначенияБПКлиентСервер.СформироватьНадписьЦеныИВалюта(СтруктураНадписи);

КонецПроцедуры

&НаКлиенте
Процедура ПриНачалеРедактированияСтрокиТоваровУслуг(ДанныеСтроки, НоваяСтрока, Копирование)
	
	Если НоваяСтрока И НЕ Копирование Тогда
		ДанныеСтроки.СтавкаНДС = УчетНДСКлиент.ПолучитьСтавкуНДСПоУмолчанию(ПлательщикНДС);
	КонецЕсли;


КонецПроцедуры 

&НаСервере
Функция НайтиСтрокуТабличнойЧасти(ИмяТабличнойЧасти, СтруктураОтбора)

	СтрокаТабличнойЧасти = Неопределено;

	МассивНайденныхСтрок = Объект[ИмяТабличнойЧасти].НайтиСтроки(СтруктураОтбора);
	Если МассивНайденныхСтрок.Количество() > 0 Тогда
		// Нашли. Вернем первую найденную строку.
		СтрокаТабличнойЧасти = МассивНайденныхСтрок[0];
	КонецЕсли;

	Возврат СтрокаТабличнойЧасти;

КонецФункции

// Изменение счетов учета и их субконто

&НаКлиентеНаСервереБезКонтекста
Процедура НастроитьСубконтоПриПодготовкеФормыНаСервере(Форма, ИмяСчета);
	
	ИмяПоля = ОпределитьИмяСубконтоПоИмениСчета(ИмяСчета);	
	
	УстановитьЗаголовкиИДоступностьСубконто(Форма, ИмяСчета, ИмяПоля);
	УстановитьПараметрыВыбораСубконто(Форма, ИмяСчета, ИмяПоля);

	УстановитьВидимостьНалоговогоНазначенияДоходовИЗатрат(Форма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура НастроитьСубконтоПриИзмененииСчета(Форма, ИмяСчета);
	
	ИмяПоля = ОпределитьИмяСубконтоПоИмениСчета(ИмяСчета);	
	
	УстановитьЗаголовкиИДоступностьСубконто(Форма, ИмяСчета, ИмяПоля);
	УстановитьЗначенияСубконтоПриИзмененииСчета(Форма, ИмяСчета, ИмяПоля);
	УстановитьПараметрыВыбораСубконто(Форма, ИмяСчета, ИмяПоля);

	УстановитьВидимостьНалоговогоНазначенияДоходовИЗатрат(Форма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура НастроитьСубконтоПриИзмененииСубконто(Форма, ИмяСчета);
	
	ИмяПоля = ОпределитьИмяСубконтоПоИмениСчета(ИмяСчета);	

	УстановитьПараметрыВыбораСубконто(Форма, ИмяСчета, ИмяПоля);

	УстановитьВидимостьНалоговогоНазначенияДоходовИЗатрат(Форма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьЗаголовкиИДоступностьСубконто(Форма, ИмяСчета, ИмяПоля)

	Объект = Форма.Объект;
	
	ПоляФормы = Новый Структура("Субконто1, Субконто2, Субконто3",
		ИмяПоля+"1",
		ИмяПоля+"2",
		ИмяПоля+"3");
	ЗаголовкиПолей = Новый Структура("Субконто1, Субконто2, Субконто3",
		"Заголовок"+ИмяПоля+"1",
		"Заголовок"+ИмяПоля+"2",
		"Заголовок"+ИмяПоля+"3");
	БухгалтерскийУчетКлиентСервер.ПриВыбореСчета(Объект[ИмяСчета], Форма, ПоляФормы, ЗаголовкиПолей);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьПараметрыВыбораСубконто(Форма, ИмяСчета, ИмяПоля)

	Объект = Форма.Объект;
	
	ПараметрыДокумента = ПолучитьСписокПараметров(Форма, ИмяПоля+"%Индекс%"); 
	БухгалтерскийУчетКлиентСервер.ИзменитьПараметрыВыбораПолейСубконто(
		Форма,
		Объект,
		ИмяПоля+"%Индекс%",
		ИмяПоля+"%Индекс%",
		ПараметрыДокумента);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьЗначенияСубконтоПриИзмененииСчета(Форма, ИмяСчета, ИмяПоля)

	Объект = Форма.Объект;
	
	ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3, Организация",
		ИмяПоля+"1",
		ИмяПоля+"2",
		ИмяПоля+"3",
		Объект.Организация);
	БухгалтерскийУчетКлиентСервер.ПриИзмененииСчета(Объект[ИмяСчета], Объект, ПоляОбъекта);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ОпределитьИмяСубконтоПоИмениСчета(ИмяСчета)
	
	Если ИмяСчета = "СчетУчетаЗатрат" Тогда
		Возврат "Субконто"
	КонецЕсли;
	
	ВызватьИсключение "Неверное обращение к функции ОпределитьИмяСубконтоПоИмениСчета";
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьСписокПараметров(Форма, ШаблонИмяПоляОбъекта)
	
	Объект = Форма.Объект;
	
	СписокПараметров = Новый Структура;
	Для Индекс = 1 По 3 Цикл
		ИмяПоля = СтрЗаменить(ШаблонИмяПоляОбъекта, "%Индекс%", Индекс);
		Если ТипЗнч(Объект[ИмяПоля]) = Тип("СправочникСсылка.Контрагенты") Тогда
			СписокПараметров.Вставить("Контрагент", Объект[ИмяПоля]);
		ИначеЕсли ТипЗнч(Объект[ИмяПоля]) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
			СписокПараметров.Вставить("ДоговорКонтрагента", Объект[ИмяПоля]);
		ИначеЕсли ТипЗнч(Объект[ИмяПоля]) = Тип("СправочникСсылка.Склады") Тогда
			СписокПараметров.Вставить("Склад", Объект[ИмяПоля]);
		КонецЕсли;
	КонецЦикла;
	СписокПараметров.Вставить("Организация", Объект.Организация);

	Возврат СписокПараметров;

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьВидимостьНалоговогоНазначенияДоходовИЗатрат(Форма)
	
	Объект = Форма.Объект;
	СтруктураСубконто = Новый Структура("Субконто1, Субконто2, Субконто3", Объект.Субконто1, Объект.Субконто2, Объект.Субконто3);
	
	Форма.ХарактерЗатрат = Неопределено;
	Форма.НалоговаяАналитикаВПроводке = Неопределено;

	НалоговыйУчет.ОпределениеАналитикиНалоговогоУчетаВПроводкахДляЗатрат(
		СтруктураСубконто, 
		Объект.СчетУчетаЗатрат, 
		Форма.ХарактерЗатрат,
		Форма.НалоговаяАналитикаВПроводке,
		, 
		Объект.НалоговоеНазначение, 
		Объект.НалоговоеНазначениеДоходовИЗатрат,
		,
		Объект.Дата,
		,
		Форма.ПлательщикНДС
	);
	
	Форма.Элементы.НалоговоеНазначениеДоходовИЗатрат.Видимость = (Форма.ХарактерЗатрат = "Затраты");
	Форма.Элементы.НалоговаяАналитикаВПроводке.Видимость = Не (Форма.ХарактерЗатрат = "Затраты");
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСостояниеДокумента()
	
	СостояниеДокумента = ОбщегоНазначенияБП.СостояниеДокумента(Объект);
	
КонецПроцедуры

#КонецОбласти
