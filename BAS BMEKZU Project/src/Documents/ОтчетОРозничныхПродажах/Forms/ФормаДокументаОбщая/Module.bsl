#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	
	Если Параметры.Ключ.Пустая() Тогда
		ПодготовитьФормуНаСервере();
	КонецЕсли;

	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);

	// Активизировать первую непустую табличную часть
	СписокТабличныхЧастей = Новый СписокЗначений;
	СписокТабличныхЧастей.Добавить("Товары",          "Товары");
	СписокТабличныхЧастей.Добавить("Оплата",          "Оплата");

	АктивизироватьТабличнуюЧасть = ОбщегоНазначенияБПВызовСервера.ПолучитьПервуюНепустуюВидимуюТабличнуюЧасть(
		ЭтаФорма, СписокТабличныхЧастей);
	ОбщегоНазначенияБПВызовСервера.АктивизироватьЭлементФормы(ЭтаФорма, АктивизироватьТабличнуюЧасть);

		// Если форма вызвана в режиме смена вида операции - модифицируем сразу при открытии, 
	// чтобы можно было подтвердить или отказаться от изменения путем сохранения или 
	// отказа от сохранения документа.
	Если Параметры.Свойство("ИзменитьВидОперации")
		И Параметры.ИзменитьВидОперации Тогда
		
		// Не кэшируем переменную Объект, т.к. может вызываться Форма.ИзменитьРеквизиты(),
		// которая меняет Объект.
		Объект.ВидОперации = Параметры.ЗначенияЗаполнения.ВидОперации;
		ВидОперацииОбработатьИзменение();
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)

	Если ИмяСобытия = "ОбработанаТабличнаяЧастьТовары" И ТипЗнч(Параметр) = Тип("Структура") 
		И Параметр.Свойство("ИдентификаторВызывающейФормы")
		И Параметр.ИдентификаторВызывающейФормы = УникальныйИдентификатор Тогда
		ОбработкаОповещенияОбработкиТабличнойЧастиТоварыНаСервере(Параметр);
	Иначе
		ОбщегоНазначенияБПКлиент.ОбработкаОповещенияФормыДокумента(ЭтаФорма, Объект.Ссылка, ИмяСобытия, Параметр, Источник);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)

	Если ИсточникВыбора.ИмяФормы = "Обработка.ПодборНоменклатуры.Форма.Форма" Тогда
		ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение, ИсточникВыбора.ИмяТаблицы);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом

	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	ПодготовитьФормуНаСервере();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	ЗаполнитьДобавленныеКолонкиТаблиц();
	
	УстановитьСостояниеДокумента();

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)

	Если НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДатаДокумента) Тогда
		// Изменение времени не влияет на поведение документа.
		ТекущаяДатаДокумента = Объект.Дата;
		Возврат;
	КонецЕсли;

	// Общие проверки условий по датам.
	ТребуетсяВызовСервера = ОбщегоНазначенияБПКлиент.ТребуетсяВызовСервераПриИзмененииДатыДокумента(Объект.Дата, 
		ТекущаяДатаДокумента, Объект.ВалютаДокумента, ВалютаРегламентированногоУчета);

		
	// Если определили, что изменение даты может повлиять на какие-либо параметры, 
	// то передаем обработку на сервер.
	Если ТребуетсяВызовСервера Тогда
		ДатаПриИзмененииНаСервере();
	КонецЕсли;
	
	// Запомним новую дату документа.
	ТекущаяДатаДокумента = Объект.Дата;
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)

	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		ОрганизацияПриИзмененииНаСервере();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СкладПриИзменении(Элемент)

	Если ЗначениеЗаполнено(Объект.Склад) Тогда
		СкладПриИзмененииНаСервере();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЦеныИВалютаНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОбработатьИзмененияПоКнопкеЦеныИВалюты(Объект.ВалютаДокумента);
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования,ЭтотОбъект,"Объект.Комментарий");

КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиСобытийТаблицыФормыТовары

&НаКлиенте
Процедура ТоварыПриИзменении(Элемент)
	
	ОбновитьИтоги(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если НоваяСтрока И ОтменаРедактирования Тогда
		ОбновитьИтоги(ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока И НЕ Копирование Тогда
		Элемент.ТекущиеДанные.СтавкаНДС = УчетНДСКлиент.ПолучитьСтавкуНДСПоУмолчанию(ПлательщикНДС);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)

	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	ДанныеСтрокиТаблицы = ПоляСтрокиТабличнойЧасти(ТекущиеДанные);
	ДанныеОбъекта = ДанныеОбъекта();
	
	ТоварыНоменклатураПриИзмененииНаСервере(ДанныеСтрокиТаблицы, ДанныеОбъекта);
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтрокиТаблицы);

КонецПроцедуры

&НаКлиенте
Процедура ТоварыКоличествоПриИзменении(Элемент)

	ПриИзмененииКоличествоЦена("Товары");

КонецПроцедуры

&НаКлиенте
Процедура ТоварыЦенаПриИзменении(Элемент)

	ПриИзмененииКоличествоЦена("Товары");

КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаПриИзменении(Элемент)

	ПриИзмененииСумма("Товары");

КонецПроцедуры

&НаКлиенте
Процедура ТоварыСтавкаНДСПриИзменении(Элемент)

	ПриИзмененииСтавкаНДС("Товары");

КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаНДСПриИзменении(Элемент)

	ПриИзмененииСуммаНДС("Товары");

КонецПроцедуры

&НаКлиенте
Процедура ТоварыСчетУчетаПриИзменении(Элемент)

	ПриИзмененииСчетаУчетаТовара("Товары");

КонецПроцедуры

&НаКлиенте
Процедура ТоварыСтатьяДекларацииПоАкцизномуНалогуПриИзменении(Элемент)
	
	ПриИзмененииСтатьяДекларацииПоАкцизномуНалогу("Товары");
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПодакцизныеТоварыДляКоммерческогоИспользованияПриИзменении(Элемент)
	
	ПриИзмененииПодакцизныеТоварыДляКоммерческогоИспользования("Товары");
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаАкцизногоНалогаПриИзменении(Элемент)
	
	ПриИзмененииСуммаАкцизногоНалога("Товары");
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыДокументОприходованияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;

	ПараметрыОбъекта = Новый Структура;
	ПараметрыОбъекта.Вставить("КонецПериода",   Объект.Дата);
	ПараметрыОбъекта.Вставить("Организация",    Объект.Организация);
	ПараметрыОбъекта.Вставить("Номенклатура",   ТекущиеДанные.Номенклатура);
	ПараметрыОбъекта.Вставить("СчетУчета",      ТекущиеДанные.СчетУчетаБУ);
	ПараметрыОбъекта.Вставить("Склад",      	  Объект.Склад);
	ПараметрыОбъекта.Вставить("ТипыДокументов", "Метаданные.Документы.ОтчетОРозничныхПродажах.ТабличныеЧасти.Товары.Реквизиты.ДокументОприходования.Тип");

	ПараметрыФормы = Новый Структура("ПараметрыОбъекта", ПараметрыОбъекта);
	ОткрытьФорму("Документ.Партия.ФормаВыбора", ПараметрыФормы, Элемент);

КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаСкидкиПриИзменении(Элемент)
	
	ОбработкаТабличныхЧастейКлиентСервер.ПриИзмененииСуммаСкидки(ЭтаФорма, "Товары");
	СтрокаТаблицы = Элементы["Товары"].ТекущиеДанные;
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСиАкцизногоНалогаТабЧасти(СтрокаТаблицы, Объект.СуммаВключаетНДС,
		ЕстьАкцизныйНалог, СуммаВключаетАкциз);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаСкидкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбработкаТабличныхЧастейКлиентСервер.СуммаСкидкиНачалоВыбора(ЭтаФорма, "Товары", Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицыФормыОплата

&НаКлиенте
Процедура ОплатаВидОплатыПриИзменении(Элемент)

	СтрокаТаблицы = Элементы.Оплата.ТекущиеДанные;

	Если ЗначениеЗаполнено(СтрокаТаблицы.ВидОплаты) Тогда
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, СведенияОВидеОплаты(СтрокаТаблицы.ВидОплаты));
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОплатаКонтрагентПриИзменении(Элемент)

	СтрокаТаблицы = Элементы.Оплата.ТекущиеДанные;
	
	ДанныеОбъекта	= Новый Структура("Организация, ВалютаРегламентированногоУчета");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	ДанныеОбъекта.ВалютаРегламентированногоУчета = ВалютаРегламентированногоУчета;
	
	ДанныеСтроки	= Новый Структура(
		"ВидОплаты, Контрагент, ДоговорКонтрагента");
	ЗаполнитьЗначенияСвойств(ДанныеСтроки, СтрокаТаблицы);
	
	ОплатаКонтрагентПриИзмененииНаСервере(ДанныеСтроки, ДанныеОбъекта);
	ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ДанныеСтроки);

КонецПроцедуры // ОплатаКонтрагентПриИзменении()

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПровестиИЗакрыть(Команда)
	
	КлючеваяОперация = "ПроведениеОтчетОРозничныхПродажах";
	ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени(КлючеваяОперация);
	
	ПараметрыЗаписи = Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение);
	Если Записать(ПараметрыЗаписи) Тогда
		Закрыть();	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоИнвентаризации(Команда)

	Если НЕ ЗначениеЗаполнено(Объект.ИнвентаризацияТоваровНаСкладе) Тогда
		ТекстПредупреждения = НСтр("ru='Документ инвентаризации товаров не выбран!
|Заполнение невозможно.';uk='Документ інвентаризації товарів не вибраний!
|Заповнення неможливе.'") ;
		ПоказатьПредупреждение(Неопределено, ТекстПредупреждения);
		Возврат;
	КонецЕсли;

	ЗаполнитьТоварыПоИнвентаризации();

	Если Объект.Товары.Количество() = 0 Тогда
		ТекстСообщения = НСтр("ru='В выбранном документе инвентаризации отсутствуют товары, учетное количество которых превышает фактическое.';uk='У обраному документі інвентаризації відсутні товари, облікова кількість яких перевищує фактичну.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ,
						"ИнвентаризацияТоваровНаСкладе", "Объект", Ложь);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПодборТовары(Команда)

	ПараметрыПодбора = ПолучитьПараметрыПодбора("Товары");
	Если ПараметрыПодбора <> Неопределено Тогда
		ОткрытьФорму("Обработка.ПодборНоменклатуры.Форма.Форма", ПараметрыПодбора,
			ЭтаФорма, УникальныйИдентификатор);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ИзменитьТовары(Команда)

	ПараметрыФормы = ПолучитьПараметрыОбработкиТабличнойЧастиТовары();
	
	Если ПараметрыФормы <> Неопределено Тогда
		ОткрытьФорму("Обработка.ИзменениеТаблицыТоваров.Форма.Форма", ПараметрыФормы,
			ЭтаФорма, УникальныйИдентификатор);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункцииБСП

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти 

#Область СлужебныеПроцедурыИФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)

	Элементы = Форма.Элементы;
	Объект   = Форма.Объект;
	
	
	Если Элементы.ИнвентаризацияТоваровНаСкладе.Доступность <> Форма.ЭтоОтчетНТТОПродажах Тогда
		Элементы.ИнвентаризацияТоваровНаСкладе.Доступность   = Форма.ЭтоОтчетНТТОПродажах;
		Элементы.ТоварыЗаполнитьПоИнвентаризации.Доступность = Форма.ЭтоОтчетНТТОПродажах;
	КонецЕсли;
	
	
	Элементы.ИнвентаризацияТоваровНаСкладе.Доступность =
		ЗначениеЗаполнено(Объект.Организация) И ЗначениеЗаполнено(Объект.Склад);
		
	ОбновитьИтоги(Форма);
	СформироватьНадписьЦеныИВалюта(Форма);

КонецПроцедуры

&НаСервере
Процедура ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение, ИмяТаблицы)

	ТипСклада	= ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Склад, "ТипСклада");
	СпособОценкиТоваровВРознице	= УчетнаяПолитика.СпособОценкиТоваровВРознице(Объект.Организация, Объект.Дата);
	
	АТТПоПродажнойСтоимости	= (СпособОценкиТоваровВРознице = Перечисления.СпособыОценкиТоваровВРознице.ПоПродажнойСтоимости)
		И Объект.ВидОперации = Перечисления.ВидыОперацийОтчетОРозничныхПродажах.ОтчетККМОПродажах
		И НЕ ТипСклада = Перечисления.ТипыСкладов.ОптовыйСклад;
	
	ТаблицаТоваров = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресПодобраннойНоменклатурыВХранилище);
	
	ДанныеОбъекта = Новый Структура(
		"Дата, ВидОперации, Организация, Склад,
		|ТипЦен, ВалютаДокумента, КурсДокумента, КратностьДокумента,
		|СуммаВключаетНДС, Реализация, АТТПоПродажнойСтоимости,
		|ТипСкладаНТТ,УчетПоПродажнойСтоимости");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	ДанныеОбъекта.АТТПоПродажнойСтоимости = АТТПоПродажнойСтоимости;
	ДанныеОбъекта.Реализация = Истина;
	ДанныеОбъекта.ТипСкладаНТТ = ТипСкладаНТТ;
	ДанныеОбъекта.УчетПоПродажнойСтоимости = УчетПоПродажнойСтоимости;
	
	СоответствиеСведенийОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОСпискеНоменклатуры(
		ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаТоваров, "Номенклатура", Истина), ДанныеОбъекта);

	Если ЗначениеЗаполнено(Объект.ТипЦен) Тогда
		ЦенаВключаетНДС	= ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ТипЦен, "ЦенаВключаетНДС");
	Иначе
		ЦенаВключаетНДС	= Объект.СуммаВключаетНДС;
	КонецЕсли;
		
	Для Каждого СтрокаТовара Из ТаблицаТоваров Цикл
		
		СтруктураОтбора = Новый Структура("Номенклатура, Цена", СтрокаТовара.Номенклатура, СтрокаТовара.Цена);
		СтрокаТабличнойЧасти = НайтиСтрокуТабличнойЧасти(ИмяТаблицы, СтруктураОтбора);
		
		Если СтрокаТабличнойЧасти <> Неопределено Тогда
			// Нашли - увеличиваем количество.
			СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + СтрокаТовара.Количество;
		Иначе
			СтрокаТабличнойЧасти = Объект[ИмяТаблицы].Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтрокаТовара);
			
			СведенияОНоменклатуре = СоответствиеСведенийОНоменклатуре.Получить(СтрокаТовара.Номенклатура);
			Если СведенияОНоменклатуре = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			// Заполняем реквизиты табличной части
			Документы.ОтчетОРозничныхПродажах.ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(
			ДанныеОбъекта, СтрокаТабличнойЧасти, СведенияОНоменклатуре);
			
			СтрокаТабличнойЧасти.Цена = УчетНДСКлиентСервер.ПересчитатьЦенуПриИзмененииФлаговНалогов(
			СтрокаТабличнойЧасти.Цена, ЦенаВключаетНДС, Объект.СуммаВключаетНДС,
			УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));
			
			СтрокаТабличнойЧасти.СтавкаНДС				= СведенияОНоменклатуре.СтавкаНДС;
			
			Если ЕстьАкцизныйНалог Тогда
				ОбработкаТабличныхЧастейКлиентСервер.ЗаполнитьСтатьюДекларацииПоАкцизномуНалогуТабЧасти(СтрокаТабличнойЧасти);
			КонецЕсли;
			
		КонецЕсли;
		
		// Рассчитываем реквизиты табличной части
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСиАкцизногоНалогаТабЧасти(СтрокаТабличнойЧасти, Объект.СуммаВключаетНДС,
		ЕстьАкцизныйНалог, СуммаВключаетАкциз);

		
		ЗаполнитьДобавленныеКолонкиСтрокиТаблицыТовары(СтрокаТабличнойЧасти, Объект.СуммаВключаетНДС, СведенияОНоменклатуре)
		
	КонецЦикла;
	
	ОбновитьИтоги(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ПодготовитьФормуНаСервере()

	ТекущаяДатаДокумента			= Объект.Дата;

	ВалютаРегламентированногоУчета 	= Константы.ВалютаРегламентированногоУчета.Получить();

	УстановитьФункциональныеОпцииФормы();

	УстановитьПараметрыВыбораСчетаКассы();

	ЭтоОтчетНТТОПродажах = 
		Объект.ВидОперации = Перечисления.ВидыОперацийОтчетОРозничныхПродажах.ОтчетНТТОПродажах;

	ЗаполнитьДобавленныеКолонкиТаблиц();

	УстановитьПараметрыВыбораСклада();
	
	УправлениеФормой(ЭтаФорма);
	
	УстановитьВидимость();
	
	УстановитьЗаголовкиКолонок();
	
	УстановитьСостояниеДокумента();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СформироватьНадписьЦеныИВалюта(Форма)
	
	Объект = Форма.Объект;
	СтруктураНадписи = Новый Структура(
		"ТипЦен, ВалютаДокумента, Курс, Кратность, ВалютаРегламентированногоУчета",
		Объект.ТипЦен,
		Объект.ВалютаДокумента,
		Объект.КурсДокумента,
		Объект.КратностьДокумента,
		Форма.ВалютаРегламентированногоУчета);
	Если Форма.ПлательщикНДС Тогда 
		СтруктураНадписи.Вставить("СуммаВключаетНДС", Объект.СуммаВключаетНДС);
	КонецЕсли;
	Форма.ЦеныИВалюта = ОбщегоНазначенияБПКлиентСервер.СформироватьНадписьЦеныИВалюта(СтруктураНадписи);
	
КонецПроцедуры
//&НаСервере

&НаСервере
Процедура УстановитьВидимость()

	ЭтоОтчетНТТОПродажах = (Объект.ВидОперации = Перечисления.ВидыОперацийОтчетОРозничныхПродажах.ОтчетНТТОПродажах);
	
	Элементы.ИнвентаризацияТоваровНаСкладе.Видимость   = ЭтоОтчетНТТОПродажах;
	Элементы.ТоварыЗаполнитьПоИнвентаризации.Видимость = ЭтоОтчетНТТОПродажах;


	
	
	
	Элементы.ТоварыСтавкаНДС.Видимость                = ПлательщикНДС;
	Элементы.ТоварыСуммаНДС.Видимость                 = ПлательщикНДС;
	
 	Элементы.ТоварыНалоговоеНазначение.Видимость 				=   ПлательщикНДС;
 	Элементы.ТоварыНалоговоеНазначениеДоходовИЗатрат.Видимость 	=   ПлательщикНалогаНаПрибыльДо2015;
		
	// счета доходов в шапке нужны только для НТТ в ценах приобретения
	Элементы.СчетДоходовРозничныхПродаж.Видимость        = ЭтоОтчетНТТОПродажах И НЕ УчетПоПродажнойСтоимости ;
	
	Элементы.СчетВычетаИзДоходовРозничныхПродаж.Видимость        = ЭтоОтчетНТТОПродажах И НЕ УчетПоПродажнойСтоимости ;
	
	Элементы.СчетУчетаНДС.Видимость        = НЕ (ЭтоОтчетНТТОПродажах И НЕ УчетПоПродажнойСтоимости ) И ПлательщикНДС;
											
	Элементы.СтраницаУчетПоКассе.Видимость = НЕ ЭтоОтчетНТТОПродажах;
	Элементы.СтраницаОплата.Видимость = НЕ ЭтоОтчетНТТОПродажах;
	
	Если НЕ ЭтоОтчетНТТОПродажах Тогда
		
		Элементы.ПоОбособленномуПодразделению.Видимость 		= УчетПоОбособленнымПодразделениям; 
		Элементы.ОбособленноеПодразделениеОрганизации.Видимость = УчетПоОбособленнымПодразделениям;
		Элементы.ОбособленноеПодразделениеОрганизации.ТолькоПросмотр = НЕ Объект.ПоОбособленномуПодразделению;
		
	КонецЕсли; 
	
	Элементы.СтатьяДекларацииПоЕдиномуНалогу.Видимость 	 = ПлательщикЕдиногоНалога И НЕ (ЭтоОтчетНТТОПродажах И УчетПоПродажнойСтоимости );

	Элементы.ТоварыЗаполнитьПоИнвентаризации.Доступность = ЭтоОтчетНТТОПродажах;
	
	///////////////////////////////////////////////////////
	//управление колонками скидок
	Элементы.ТоварыСуммаСкидки.Видимость 			= ИспользоватьСкидки;
	Элементы.ТоварыСуммаБезСкидки.Видимость 		= Элементы.ТоварыСуммаСкидки.Видимость;

	Элементы.ИтогСуммаНДС.Видимость 				= ПлательщикНДС;
	Элементы.ВалютаСуммыНДС.Видимость 				= ПлательщикНДС;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗаголовокФормы()
	
	ТекстЗаголовка = НСтр("ru='Отчет о розничных продажах';uk='Звіт про роздрібні продажі'");
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ТекстЗаголовка = ТекстЗаголовка + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru=' %1 от %2';uk=' %1 від %2'"), Объект.Номер, Формат(Объект.Дата, "ДЛФ=D"));
	Иначе
		ТекстЗаголовка = ТекстЗаголовка + НСтр("ru=' (создание)';uk=' (створення)'");
	КонецЕсли;
	
	Заголовок = ТекстЗаголовка + " (" + Строка(Объект.ВидОперации) + ")";

КонецПроцедуры

&НаСервере
Процедура ДатаПриИзмененииНаСервере()

	ДатаОбработатьИзменение();
	
	УстановитьВидимость();
	УстановитьЗаголовкиКолонок();
	
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаСервере
Процедура ДатаОбработатьИзменение()

	ПредыдущаяОрганизацияПлательщикНДС = ПлательщикНДС;	
	
	УстановитьФункциональныеОпцииФормы();
	
	// Если изменился статус плательщика НДС необходимо перезаполнить ставки НДС
	Если ПредыдущаяОрганизацияПлательщикНДС <> ПлательщикНДС Тогда
		ПересчитатьСуммыПриИзмененииПризнакаПлательщикНДС();
	КонецЕсли;
	
	
	Если (Объект.ВалютаДокумента <> ВалютаРегламентированногоУчета) Тогда
		СтруктураКурсаДокумента   = РаботаСКурсамиВалют.ПолучитьКурсВалюты(Объект.ВалютаДокумента, Объект.Дата);
		Объект.КурсДокумента      = СтруктураКурсаДокумента.Курс;
		Объект.КратностьДокумента = СтруктураКурсаДокумента.Кратность;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()

	ПредыдущаяОрганизацияПлательщикНДС = ПлательщикНДС;	
	
	УстановитьФункциональныеОпцииФормы();
	
	// Если изменился статус плательщика НДС необходимо перезаполнить ставки НДС
	Если ПредыдущаяОрганизацияПлательщикНДС <> ПлательщикНДС Тогда
		ПересчитатьСуммыПриИзмененииПризнакаПлательщикНДС();
	КонецЕсли;
	
	
	
	ЗаполнитьСчетаУчетаВТабличнойЧастиНаСервере();
	
	УстановитьВидимость();
	УстановитьЗаголовкиКолонок();
	
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаСервере
Процедура СкладПриИзмененииНаСервере()

	РеквизитыСклада = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.Склад, "ТипЦенРозничнойТорговли");
	
	Объект.ТипЦен = РеквизитыСклада.ТипЦенРозничнойТорговли;
	
	ЗаполнитьСчетаУчетаВТабличнойЧастиНаСервере();
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСчетаУчетаВТабличнойЧастиНаСервере(ИмяТабличнойЧасти = "")

	Если ПустаяСтрока(ИмяТабличнойЧасти) ИЛИ ИмяТабличнойЧасти = "Товары" Тогда
		Документы.ОтчетОРозничныхПродажах.ЗаполнитьСчетаУчетаВТабличнойЧасти(Объект, "Товары");
	КонецЕсли;
	
	ЗаполнитьДобавленныеКолонкиТаблиц(ИмяТабличнойЧасти);

КонецПроцедуры

&НаСервере
Процедура УстановитьФункциональныеОпцииФормы()

	ОбщегоНазначенияБПКлиентСервер.УстановитьПараметрыФункциональныхОпцийФормыДокумента(ЭтаФорма);
	
	СпособОценкиМПЗ = УчетнаяПолитика.СпособОценкиМПЗ(Объект.Организация, Объект.Дата);
	СпособОценкиМПЗПоСредней = (СпособОценкиМПЗ = Перечисления.СпособыОценки.ПоСредней);

	СпособОценкиТоваровВРознице    = УчетнаяПолитика.СпособОценкиТоваровВРознице(Объект.Организация, Объект.Дата);
	УчетПоПродажнойСтоимости = (СпособОценкиТоваровВРознице = 
		Перечисления.СпособыОценкиТоваровВРознице.ПоПродажнойСтоимости);

	ПлательщикНДС               = УчетнаяПолитика.ПлательщикНДС(Объект.Организация, Объект.Дата);
	ПлательщикНалогаНаПрибыльДо2015  	= УчетнаяПолитика.ПлательщикНалогаНаПрибыльДо2015(Объект.Организация, Объект.Дата);
	ПлательщикЕдиногоНалога 	= УчетнаяПолитика.ПлательщикЕдиногоНалога(Объект.Организация, Объект.Дата);
	УчетПоОбособленнымПодразделениям = УчетнаяПолитика.УчетПоОбособленнымПодразделениям(Объект.Организация, Объект.Дата);
	Если УчетПоОбособленнымПодразделениям Тогда
		СчетКассаВНациональнойВалюте = ПланыСчетов.Хозрасчетный.КассаВНациональнойВалюте;
		УчетПоОбособленнымПодразделениям = СчетКассаВНациональнойВалюте.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОбособленныеПодразделенияБезОбразованияЮрЛица, "ВидСубконто") <> Неопределено;
	КонецЕсли;
	ЕстьАкцизныйНалог = (Объект.Дата >= '2015 01 01');
	СуммаВключаетАкциз = (НЕ ПлательщикНДС) ИЛИ (ПлательщикНДС И Объект.СуммаВключаетНДС);
	
	ИспользоватьСкидки = ПолучитьФункциональнуюОпцию("ИспользоватьСкидки");
	
	ТипСкладаНТТ = НЕ Объект.Склад.Пустая() И Объект.Склад.ТипСклада = Перечисления.ТипыСкладов.НеавтоматизированнаяТорговаяТочка;
		
		
КонецПроцедуры

&НаСервере
Процедура УстановитьПараметрыВыбораСклада()

	Если ЭтоОтчетНТТОПродажах Тогда
		ТипСклада = Перечисления.ТипыСкладов.НеавтоматизированнаяТорговаяТочка;
	Иначе
		МассивТиповСкладов = Новый Массив;
		МассивТиповСкладов.Добавить(Перечисления.ТипыСкладов.РозничныйМагазин);
		МассивТиповСкладов.Добавить(Перечисления.ТипыСкладов.ОптовыйСклад);
		ТипСклада	= Новый ФиксированныйМассив(МассивТиповСкладов);
	КонецЕсли;
	НовыйМассивПараметров = Новый Массив();
	НовыйМассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.ТипСклада", ТипСклада));

	НовыеПараметрыВыбора = Новый ФиксированныйМассив(НовыйМассивПараметров);
	Элементы.Склад.ПараметрыВыбора = НовыеПараметрыВыбора;

КонецПроцедуры

// Заполняет в соответствие с переданными ограничениями список счетов учета денежных средств,
// из которых будет производиться выбор пользователем в форме документа
//
// Параметры
//  МассивСчетовОтбора		 		– <Массив> – массив счетов-групп. В результат функции попадут субсчета этих счетов
//  МассивСчетовИсключений		 		– <Массив> – массив счетов, которые будут исключены из отбора
//  ОтборПоПризнакуВалютный	 		– <Булево> – нужен ли дополнительный отбор среди выбранных счетов по признаку "Валютный"
//  СчетОтбораПоПризнакуВалютный 	– <ПланыСчетов.Хозрасчетный> – счет, в соответствие в признаком "Валютный" которого
//                              	будет ограничиваться список - результат функции
//
// Возвращаемое значение:
//   <СписокЗначений> – список счетов, среди которых будет производиться выбор в форме документа
//
&НаСервереБезКонтекста
Процедура ЗаполнитьСписокВыбораСчетовДенежныхСредств(СчетОтбора, ОтборПоПризнакуВалютный = Ложь, СчетОтбораПоПризнакуВалютный = Неопределено,МассивСчетовИсключений = Неопределено, СписокВыбора)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СчетаОтбора", БухгалтерскийУчетВызовСервераПовтИсп.СчетаВИерархии(СчетОтбора));
	Запрос.УстановитьПараметр("МассивСчетовИсключений", МассивСчетовИсключений);

	Запрос.УстановитьПараметр("ОтбиратьПоПризнакуВалютный", ОтборПоПризнакуВалютный);

	Если ТипЗнч(СчетОтбораПоПризнакуВалютный) = Тип("ПланСчетовСсылка.Хозрасчетный") Тогда
		Запрос.УстановитьПараметр("Валютный", СчетОтбораПоПризнакуВалютный.Валютный);
	Иначе
		Запрос.УстановитьПараметр("Валютный", Ложь);
	КонецЕсли;

	Запрос.Текст =
	"ВЫБРАТЬ
	|	Хозрасчетный.Ссылка КАК Счет,
	|	Хозрасчетный.Код КАК Код,
	|	Хозрасчетный.Наименование КАК Наименование
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.Ссылка В (&СчетаОтбора)
	|	И (НЕ Хозрасчетный.ЗапретитьИспользоватьВПроводках)
	|	И (НЕ &ОтбиратьПоПризнакуВалютный
	|			ИЛИ Хозрасчетный.Валютный = &Валютный)
	|   И Хозрасчетный.Ссылка Не В (&МассивСчетовИсключений)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Код";

	Результат = Запрос.Выполнить().Выбрать();
	Пока Результат.Следующий() Цикл
		СписокВыбора.Добавить(Результат.Счет, Результат.Код + " (" + Результат.Наименование + ")");
	КонецЦикла;

КонецПроцедуры // ЗаполнитьСписокВыбораСчетовДенежныхСредств()

&НаСервере
Процедура УстановитьПараметрыВыбораСчетаКассы()

	СписокСчетов = Новый СписокЗначений;

	МассивИсключений = Новый Массив;
	
	ЗаполнитьСписокВыбораСчетовДенежныхСредств(ПланыСчетов.Хозрасчетный.Касса,,, МассивИсключений, СписокСчетов);

	НовыйМассивПараметров = Новый Массив();
	НовыйМассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Ссылка", Новый ФиксированныйМассив(СписокСчетов.ВыгрузитьЗначения())));
	НовыйМассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.ЗапретитьИспользоватьВПроводках", Ложь));
	НовыйМассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Валютный", Ложь));
	НовыеПараметрыВыбора = Новый ФиксированныйМассив(НовыйМассивПараметров);
	Элементы.СчетКасса.ПараметрыВыбора = НовыеПараметрыВыбора;

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ТоварыНоменклатураПриИзмененииНаСервере(СтрокаТабличнойЧасти, Знач ДанныеОбъекта)
	
	СведенияОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОНоменклатуре(
		СтрокаТабличнойЧасти.Номенклатура, ДанныеОбъекта);
	Если СведенияОНоменклатуре = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Документы.ОтчетОРозничныхПродажах.ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(ДанныеОбъекта, СтрокаТабличнойЧасти, СведенияОНоменклатуре, Истина, Истина);
	
	СтрокаТабличнойЧасти.Цена					= СведенияОНоменклатуре.Цена;
	СтрокаТабличнойЧасти.СтавкаНДС				= СведенияОНоменклатуре.СтавкаНДС;
	СтрокаТабличнойЧасти.ЕдиницаИзмерения		= СведенияОНоменклатуре.БазоваяЕдиницаИзмерения;
	СтрокаТабличнойЧасти.Коэффициент            = СведенияОНоменклатуре.Коэффициент;
	
	Если ДанныеОбъекта.ЕстьАкцизныйНалог Тогда
		ОбработкаТабличныхЧастейКлиентСервер.ЗаполнитьСтатьюДекларацииПоАкцизномуНалогуТабЧасти(СтрокаТабличнойЧасти);
	КонецЕсли;
	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСиАкцизногоНалогаТабЧасти(СтрокаТабличнойЧасти, ДанныеОбъекта.СуммаВключаетНДС, ДанныеОбъекта.ЕстьАкцизныйНалог, ДанныеОбъекта.СуммаВключаетАкциз);
	
	ЗаполнитьДобавленныеКолонкиСтрокиТаблицыТовары(СтрокаТабличнойЧасти, ДанныеОбъекта.СуммаВключаетНДС, СведенияОНоменклатуре);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьИтоги(Форма)

	Объект = Форма.Объект;
	//Форма.ИтогВсего    = Объект.Товары.Итог("Всего") + Объект.АгентскиеУслуги.Итог("Всего");
	//Форма.ИтогСуммаНДС = Объект.Товары.Итог("СуммаНДС") + Объект.АгентскиеУслуги.Итог("СуммаНДС");
	Форма.ИтогВсего    = Объект.Товары.Итог("Всего");
	Форма.ИтогСуммаНДС = Объект.Товары.Итог("СуммаНДС");
	Форма.ИтогСуммаАкцизныйНалог = Объект.Товары.Итог("СуммаАкцизногоНалога");
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗаголовкиКолонок()
	
	ЗаголовокЦена = ?(ПлательщикНДС, ?(Объект.СуммаВключаетНДС, НСтр("ru='Цена с НДС';uk='Ціна з ПДВ'"), НСтр("ru='Цена без НДС';uk='Ціна без ПДВ'")), НСтр("ru='Цена';uk='Ціна'"));
	ЗаголовокСумма = ?(ПлательщикНДС,?(Объект.СуммаВключаетНДС, НСтр("ru='Сумма с НДС';uk='Сума з ПДВ'"), НСтр("ru='Сумма без НДС';uk='Сума без ПДВ'")), НСтр("ru='Сумма';uk='Сума'"));
	
	Элементы.ТоварыЦена.Заголовок = ЗаголовокЦена;
	Элементы.ТоварыСумма.Заголовок = ЗаголовокСумма;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииКоличествоЦена(ИмяТабЧасти)

	СтрокаТаблицы = Элементы[ИмяТабЧасти].ТекущиеДанные;

	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТаблицы);


	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСиАкцизногоНалогаТабЧасти(СтрокаТаблицы, Объект.СуммаВключаетНДС,
		ЕстьАкцизныйНалог, СуммаВключаетАкциз);

	ЗаполнитьКолонкуВсегоСтрокиТаблицыТовары(СтрокаТаблицы, (НЕ ПлательщикНДС) ИЛИ Объект.СуммаВключаетНДС);

КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииСумма(ИмяТабЧасти)

	СтрокаТаблицы = Элементы[ИмяТабЧасти].ТекущиеДанные;
	Если СтрокаТаблицы.Количество = 0 Тогда
		СтрокаТаблицы.Цена = 0;
	Иначе
		СтрокаТаблицы.Цена = СтрокаТаблицы.Сумма / СтрокаТаблицы.Количество;
	КонецЕсли;

	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСиАкцизногоНалогаТабЧасти(СтрокаТаблицы, Объект.СуммаВключаетНДС,
		ЕстьАкцизныйНалог, СуммаВключаетАкциз);

	ЗаполнитьКолонкуВсегоСтрокиТаблицыТовары(СтрокаТаблицы, (НЕ ПлательщикНДС) ИЛИ Объект.СуммаВключаетНДС);

КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииСтавкаНДС(ИмяТабЧасти)

	СтрокаТаблицы = Элементы[ИмяТабЧасти].ТекущиеДанные;

	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСиАкцизногоНалогаТабЧасти(СтрокаТаблицы, Объект.СуммаВключаетНДС,
		ЕстьАкцизныйНалог, СуммаВключаетАкциз);

	ЗаполнитьКолонкуВсегоСтрокиТаблицыТовары(СтрокаТаблицы, (НЕ ПлательщикНДС) ИЛИ Объект.СуммаВключаетНДС);

КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииСуммаНДС(ИмяТабЧасти)

	СтрокаТаблицы = Элементы[ИмяТабЧасти].ТекущиеДанные;
	ЗаполнитьКолонкуВсегоСтрокиТаблицыТовары(СтрокаТаблицы, (НЕ ПлательщикНДС) ИЛИ Объект.СуммаВключаетНДС);

КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииСтатьяДекларацииПоАкцизномуНалогу(ИмяТабЧасти)

	СтрокаТаблицы = Элементы[ИмяТабЧасти].ТекущиеДанные;

	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСиАкцизногоНалогаТабЧасти(СтрокаТаблицы, Объект.СуммаВключаетНДС,
		ЕстьАкцизныйНалог, СуммаВключаетАкциз);

	ЗаполнитьКолонкуВсегоСтрокиТаблицыТовары(СтрокаТаблицы, (НЕ ПлательщикНДС) ИЛИ Объект.СуммаВключаетНДС);

КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииПодакцизныеТоварыДляКоммерческогоИспользования(ИмяТабЧасти)

	СтрокаТаблицы = Элементы[ИмяТабЧасти].ТекущиеДанные;

	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСиАкцизногоНалогаТабЧасти(СтрокаТаблицы, Объект.СуммаВключаетНДС,
		ЕстьАкцизныйНалог, СуммаВключаетАкциз);

	ЗаполнитьКолонкуВсегоСтрокиТаблицыТовары(СтрокаТаблицы, (НЕ ПлательщикНДС) ИЛИ Объект.СуммаВключаетНДС);

КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииСуммаАкцизногоНалога(ИмяТабЧасти)

	СтрокаТаблицы = Элементы[ИмяТабЧасти].ТекущиеДанные;

	Если СуммаВключаетАкциз Тогда
		
		СуммаДляРасчетаНДС = СтрокаТаблицы.Сумма - СтрокаТаблицы.СуммаАкцизногоНалога;
		СтрокаТаблицы.СуммаНДС = УчетНДСКлиентСервер.РассчитатьСуммуНДС(
												СуммаДляРасчетаНДС,
												Объект.СуммаВключаетНДС,
												УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаТаблицы.СтавкаНДС));
	КонецЕсли;
	
	ЗаполнитьКолонкуВсегоСтрокиТаблицыТовары(СтрокаТаблицы, (НЕ ПлательщикНДС) ИЛИ Объект.СуммаВключаетНДС);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОплатаКонтрагентПриИзмененииНаСервере(ДанныеСтрокаТаблицы, Знач ПараметрыОбъекта)

	Если ЗначениеЗаполнено(ДанныеСтрокаТаблицы.ВидОплаты) Тогда
		ДанныеВидаОплаты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДанныеСтрокаТаблицы.ВидОплаты,
		   "Контрагент,ДоговорКонтрагента");
	Иначе
		ДанныеВидаОплаты = Новый Структура("Контрагент, ДоговорКонтрагента", Справочники.Контрагенты.ПустаяСсылка(), Справочники.ДоговорыКонтрагентов.ПустаяСсылка());
	КонецЕсли;
		
	Если ДанныеСтрокаТаблицы.Контрагент = ДанныеВидаОплаты.Контрагент Тогда
		ДанныеСтрокаТаблицы.ДоговорКонтрагента = ДанныеВидаОплаты.ДоговорКонтрагента;
	Иначе
		БухгалтерскийУчетПереопределяемый.УстановитьДоговорКонтрагента(ДанныеСтрокаТаблицы.ДоговорКонтрагента,
			ДанныеСтрокаТаблицы.Контрагент, ПараметрыОбъекта.Организация, Перечисления.ВидыДоговоровКонтрагентов.Прочее);
	КонецЕсли;  	

КонецПроцедуры // ОплатаКонтрагентПриИзмененииНаСервере()
 
&НаКлиенте
Процедура ПриИзмененииСчетаУчетаТовара(ИмяТабЧасти)

	СтрокаТаблицы = Элементы[ИмяТабЧасти].ТекущиеДанные;

	Если ЗначениеЗаполнено(СтрокаТаблицы.СчетУчетаБУ) Тогда
		СвойстваСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(СтрокаТаблицы.СчетУчетаБУ);
		СтрокаТаблицы.СчетУчетаЗабалансовый = СвойстваСчета.Забалансовый;
	Иначе
		СтрокаТаблицы.СчетУчетаЗабалансовый = Ложь;
	КонецЕсли;

КонецПроцедуры

// Пересчет табличной части документа после изменений в форме "Цены и валюта".
// Выполняется пересчет колонок: цена, скидка, сумма, сумма НДС, всего.
//
&НаКлиенте
Процедура ОбработатьИзмененияПоКнопкеЦеныИВалюты(Знач ВалютаДоИзменения, ПересчитатьЦены = Ложь, ПерезаполнитьЦены = Ложь)

	КурсДоИзменения 		= Объект.КурсДокумента;
	КратностьДоИзменения 	= Объект.КратностьДокумента;

	// Формирование структуры параметров для заполнения формы "Цены и Валюта".
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("СуммаВключаетНДС",	  Объект.СуммаВключаетНДС);
	СтруктураПараметров.Вставить("Организация",			  Объект.Организация);
	СтруктураПараметров.Вставить("ДатаДокумента",		  Объект.Дата);
	СтруктураПараметров.Вставить("ПерезаполнитьЦены",	  ПерезаполнитьЦены);
	СтруктураПараметров.Вставить("ПересчитатьЦены",		  ПересчитатьЦены);
	СтруктураПараметров.Вставить("БылиВнесеныИзменения",  Ложь);
	СтруктураПараметров.Вставить("ТипЦен", 				  Объект.ТипЦен);
	СтруктураПараметров.Вставить("ПлательщикНДС",         ПлательщикНДС);

	СтруктураЦеныИВалюта = Неопределено;

	ОткрытьФорму("ОбщаяФорма.ФормаЦеныИВалюта", СтруктураПараметров,,,,, Новый ОписаниеОповещения("ОбработатьИзмененияПоКнопкеЦеныИВалютыЗавершение", ЭтотОбъект, Новый Структура("ВалютаДоИзменения, КратностьДоИзменения, КурсДоИзменения", ВалютаДоИзменения, КратностьДоИзменения, КурсДоИзменения)), РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);

КонецПроцедуры

&НаКлиенте
Процедура ОбработатьИзмененияПоКнопкеЦеныИВалютыЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    ВалютаДоИзменения = ДополнительныеПараметры.ВалютаДоИзменения;
    КратностьДоИзменения = ДополнительныеПараметры.КратностьДоИзменения;
    КурсДоИзменения = ДополнительныеПараметры.КурсДоИзменения;
    
    
    СтруктураЦеныИВалюта = Результат;
    
    // Отработка изменений
    Если ТипЗнч(СтруктураЦеныИВалюта) = Тип("Структура") И СтруктураЦеныИВалюта.БылиВнесеныИзменения Тогда
        
        //Объект.ВалютаДокумента    = СтруктураЦеныИВалюта.ВалютаДокумента;
        //Объект.КурсДокумента      = СтруктураЦеныИВалюта.Курс;
        //Объект.КратностьДокумента = СтруктураЦеныИВалюта.Кратность;
        Объект.ТипЦен             = СтруктураЦеныИВалюта.ТипЦен;
        Объект.СуммаВключаетНДС   = СтруктураЦеныИВалюта.СуммаВключаетНДС;
        
        Модифицированность = Истина;
        
        ПересчитатьНДС = СтруктураЦеныИВалюта.СуммаВключаетНДС <> СтруктураЦеныИВалюта.ПредСуммаВключаетНДС;
		
		УстановитьФункциональныеОпцииФормы();
		
        Если СтруктураЦеныИВалюта.ПерезаполнитьЦены ИЛИ СтруктураЦеныИВалюта.ПересчитатьЦены ИЛИ ПересчитатьНДС Тогда
            ЗаполнитьРассчитатьСуммы(
            ВалютаДоИзменения, 
            КурсДоИзменения,
            КратностьДоИзменения,
            СтруктураЦеныИВалюта.ПерезаполнитьЦены, 
            СтруктураЦеныИВалюта.ПересчитатьЦены, 
            ПересчитатьНДС);
        КонецЕсли;
        
        СформироватьНадписьЦеныИВалюта(ЭтаФорма);
        
    КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРассчитатьСуммы(Знач ВалютаДоИзменения, КурсДоИзменения, КратностьДоИзменения, ПерезаполнитьЦены = Ложь, ПересчитатьЦены = Ложь, ПересчитатьНДС = Ложь);

	Если ПерезаполнитьЦены Тогда
		
		СписокНоменклатуры	= ОбщегоНазначения.ВыгрузитьКолонку(Объект.Товары, "Номенклатура", Истина);
		
		ТаблицаЦенНоменклатуры	= Ценообразование.ПолучитьТаблицуЦенНоменклатуры(
			СписокНоменклатуры,
			Объект.ТипЦен,
			Объект.Дата);
		
	ИначеЕсли ПересчитатьЦены Тогда
		Если КурсДоИзменения <> 0 И КратностьДоИзменения <> 0 Тогда
			СтруктураКурса = Новый Структура("Курс, Кратность", КурсДоИзменения, КратностьДоИзменения);
		Иначе
			СтруктураКурса = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаДоИзменения, Объект.Дата);
		КонецЕсли;
	КонецЕсли;

	Для Каждого Строка Из Объект.Товары Цикл
		ЗаполнитьРассчитатьСуммыВСтроке(Строка, ТаблицаЦенНоменклатуры, ВалютаДоИзменения, СтруктураКурса, ПерезаполнитьЦены, ПересчитатьЦены, ПересчитатьНДС, Истина, 0);
	КонецЦикла;

	ОбновитьИтоги(ЭтаФорма);

	Если ПересчитатьНДС Тогда
		УстановитьЗаголовкиКолонок();
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРассчитатьСуммыВСтроке(Строка, ТаблицаЦенНоменклатуры, ВалютаПередИзменением, СтруктураКурса, ПерезаполнитьЦены, ПересчитатьЦены, ПересчитатьНДС, ЕстьНДС, ЗначениеПустогоКоличества)

	Если ПерезаполнитьЦены Тогда
		
		НайденнаяСтрока	= ТаблицаЦенНоменклатуры.Найти(Строка.Номенклатура, "Номенклатура");
		Если НайденнаяСтрока <> Неопределено Тогда
			Цена = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(
			НайденнаяСтрока.Цена, НайденнаяСтрока.Валюта, Объект.ВалютаДокумента, НайденнаяСтрока.Курс,
			Объект.КурсДокумента, НайденнаяСтрока.Кратность, Объект.КратностьДокумента);
		Иначе
			Цена = 0;
		КонецЕсли;
		
		// Признак того, что цена включает НДС, хранится в реквизите ЦенаВключаетНДС типа цен
		ЦенаВключаетНДС = ?(ЗначениеЗаполнено(Объект.ТипЦен), Объект.ТипЦен.ЦенаВключаетНДС, Ложь);
		
	Иначе
		Если ПересчитатьЦены Тогда
			
			Цена = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(
			Строка.Цена, ВалютаПередИзменением, Объект.ВалютаДокумента, СтруктураКурса.Курс,
			Объект.КурсДокумента, СтруктураКурса.Кратность, Объект.КратностьДокумента);
			
		Иначе
			Цена = Строка.Цена;
		КонецЕсли;
		// Признак того, что цена включает НДС, хранится в реквизите СуммаВключаетНДС документа
		ЦенаВключаетНДС = ?(ПересчитатьНДС, НЕ Объект.СуммаВключаетНДС, Объект.СуммаВключаетНДС);
	КонецЕсли;
	
	Если ЕстьНДС Тогда
		Строка.Цена = УчетНДСКлиентСервер.ПересчитатьЦенуПриИзмененииФлаговНалогов(Цена,
		ЦенаВключаетНДС, Объект.СуммаВключаетНДС,
		УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(Строка.СтавкаНДС));
		Если Строка.Свойство("СуммаСкидки") И (Строка.СуммаСкидки <> 0) И (Цена <> Строка.Цена) И (Цена <> 0) Тогда
			Строка.СуммаСкидки = Строка.СуммаСкидки * Строка.Цена / Цена;
		КонецЕсли;
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(Строка);
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСиАкцизногоНалогаТабЧасти(Строка, Объект.СуммаВключаетНДС,
		ЕстьАкцизныйНалог, СуммаВключаетАкциз);
		ЗаполнитьКолонкуВсегоСтрокиТаблицыТовары(Строка, (НЕ ПлательщикНДС) ИЛИ Объект.СуммаВключаетНДС);
	Иначе
		Строка.Цена  = Цена;
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(Строка);
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСиАкцизногоНалогаТабЧасти(Строка, Объект.СуммаВключаетНДС,
		ЕстьАкцизныйНалог, СуммаВключаетАкциз)
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТоварыПоИнвентаризации()

	Объект.Товары.Очистить();
	Документы.ОтчетОРозничныхПродажах.ЗаполнитьТоварыПоИнвентаризацииТоваров(Объект);
	ЗаполнитьДобавленныеКолонкиТаблиц();
	ОбновитьИтоги(ЭтаФорма);

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДобавленныеКолонкиТаблиц(ИмяТаблицы = "")

	Если ПустаяСтрока(ИмяТаблицы) ИЛИ ИмяТаблицы = "Товары" Тогда
		
		ДанныеОбъекта = Новый Структура("Дата, Организация");
		ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
		СоответствиеСведенийОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОСпискеНоменклатуры(
			ОбщегоНазначения.ВыгрузитьКолонку(Объект.Товары, "Номенклатура", Истина), ДанныеОбъекта);
			
		Для каждого СтрокаТаблицы Из Объект.Товары Цикл
			СведенияОНоменклатуре = СоответствиеСведенийОНоменклатуре.Получить(СтрокаТаблицы.Номенклатура);
			ЗаполнитьДобавленныеКолонкиСтрокиТаблицыТовары(СтрокаТаблицы, Объект.СуммаВключаетНДС, СведенияОНоменклатуре);
		КонецЦикла;
		
	КонецЕсли;
	

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьКолонкуВсегоСтрокиТаблицыТовары(СтрокаТаблицы, СуммаВключаетНалоги)
	
	СтрокаТаблицы.Всего = СтрокаТаблицы.Сумма + ?(СуммаВключаетНалоги, 0 , СтрокаТаблицы.СуммаНДС + СтрокаТаблицы.СуммаАкцизногоНалога);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьДобавленныеКолонкиСтрокиТаблицыТовары(СтрокаТаблицы, СуммаВключаетНалоги, СведенияОНоменклатуре)

	ЗаполнитьКолонкуВсегоСтрокиТаблицыТовары(СтрокаТаблицы, СуммаВключаетНалоги);
	
	Если СведенияОНоменклатуре <> Неопределено Тогда
		СтрокаТаблицы.ЭтоУслуга = СведенияОНоменклатуре.Услуга;
	КонецЕсли;
	
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьПараметрыПодбора(ИмяТаблицы)
	
	ПараметрыФормы = Новый Структура;
	
	ДатаРасчетов = ?(НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДата()), Неопределено, Объект.Дата);
	ЗаголовокПодбора = НСтр("ru='Подбор номенклатуры в %1 (%2)';uk='Підбір номенклатури %1 (%2)'");
	
	Валюта = Объект.ВалютаДокумента;
	
	Если ЗначениеЗаполнено(Объект.ТипЦен) Тогда
		Параметрыформы.Вставить("ПоказыватьЦены", Истина);
	КонецЕсли;
	
	Если ИмяТаблицы = "Товары" Тогда
		ПредставлениеТаблицы = НСтр("ru='Товары';uk='Товари'");
		
		ПараметрыФормы.Вставить("ПоказыватьОстатки",   Истина);
		ПараметрыФормы.Вставить("ПоказыватьСчетУчета", Истина);
	КонецЕсли;
	
	ЗаголовокПодбора = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ЗаголовокПодбора, Объект.Ссылка, ПредставлениеТаблицы);
	
	ПараметрыФормы.Вставить("ЕстьЦена"		, Истина);
	ПараметрыФормы.Вставить("ЕстьКоличество", Истина);
	ПараметрыФормы.Вставить("ДатаРасчетов"	, ДатаРасчетов);
	ПараметрыФормы.Вставить("ТипЦен"		, Объект.ТипЦен);
	ПараметрыФормы.Вставить("Валюта"		, Валюта);
	ПараметрыФормы.Вставить("Организация"	, Объект.Организация);
	ПараметрыФормы.Вставить("Склад"			, Объект.Склад);
	ПараметрыФормы.Вставить("Заголовок"		, ЗаголовокПодбора);
	ПараметрыФормы.Вставить("ВидПодбора"	, ПолучитьВидПодбора(ИмяТаблицы));
	ПараметрыФормы.Вставить("ИмяТаблицы"	, ИмяТаблицы);
	
	Возврат ПараметрыФормы;
	
КонецФункции

&НаКлиенте
Функция ПолучитьВидПодбора(ИмяТаблицы)

	ВидПодбора = "";

	Возврат ВидПодбора;

КонецФункции

&НаСервере
Функция ПоместитьТоварыВоВременноеХранилищеНаСервере()
	
	Возврат ПоместитьВоВременноеХранилище(Объект.Товары.Выгрузить(), УникальныйИдентификатор);
	
КонецФункции

&НаКлиенте
Функция ПолучитьПараметрыОбработкиТабличнойЧастиТовары()

	ПараметрыОбработки = Новый Структура;
	
	ПараметрыОбработки.Вставить("АдресХранилищаТовары", 		ПоместитьТоварыВоВременноеХранилищеНаСервере());
	ПараметрыОбработки.Вставить("ЗаполнятьЦеныПоПокупке", 		Ложь);
	
	ПараметрыОбработки.Вставить("ДокументСсылка", 				Объект.Ссылка);
	ПараметрыОбработки.Вставить("ДокументДата", 				Объект.Дата);
	ПараметрыОбработки.Вставить("ДокументОрганизация", 			Объект.Организация);
	ПараметрыОбработки.Вставить("ДокументВалюта", 				Объект.ВалютаДокумента);
	ПараметрыОбработки.Вставить("ДокументКурс", 				Объект.КурсДокумента);
	ПараметрыОбработки.Вставить("ДокументКратность", 			Объект.КратностьДокумента);
	ПараметрыОбработки.Вставить("ДокументСуммаВключаетНДС", 	Объект.СуммаВключаетНДС);
	ПараметрыОбработки.Вставить("ДокументТипЦен", 				Объект.ТипЦен);
	ПараметрыОбработки.Вставить("ДокументСклад", 				Объект.Склад);

	Возврат ПараметрыОбработки;
	
КонецФункции 

&НаСервере
Процедура ОбработкаОповещенияОбработкиТабличнойЧастиТоварыНаСервере(Параметры)
	
	ТаблицаОбработки = ПолучитьИзВременногоХранилища(Параметры.АдресОбработаннойТабличнойЧастиТоварыВХранилище);
	ТаблицаОбработки.Индексы.Добавить("НомерСтрокиДокумента");
	
	СтруктураПоиска = Новый Структура();
	СтруктураПоиска.Вставить("НомерСтрокиДокумента", 0);
	ДобавленныеСтроки = ТаблицаОбработки.НайтиСтроки(СтруктураПоиска);
	
	ТипСклада = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Склад, "ТипСклада");
	СпособОценкиТоваровВРознице = УчетнаяПолитика.СпособОценкиТоваровВРознице(Объект.Организация, Объект.Дата);
	
	АТТПоПродажнойСтоимости	= (СпособОценкиТоваровВРознице = Перечисления.СпособыОценкиТоваровВРознице.ПоПродажнойСтоимости)
			И Объект.ВидОперации = Перечисления.ВидыОперацийОтчетОРозничныхПродажах.ОтчетККМОПродажах
			И НЕ ТипСклада = Перечисления.ТипыСкладов.ОптовыйСклад;
	
	ДанныеОбъекта = Новый Структура(
		"Дата, ВидОперации, Организация, Склад,
		|ТипЦен, ВалютаДокумента, КурсДокумента, КратностьДокумента,
		|СуммаВключаетНДС, Реализация, АТТПоПродажнойСтоимости,
		|ТипСкладаНТТ,УчетПоПродажнойСтоимости");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	ДанныеОбъекта.АТТПоПродажнойСтоимости = АТТПоПродажнойСтоимости;
	ДанныеОбъекта.Реализация = Истина;
	ДанныеОбъекта.ТипСкладаНТТ = ТипСкладаНТТ;
	ДанныеОбъекта.УчетПоПродажнойСтоимости = УчетПоПродажнойСтоимости;
	
	СоответствиеСведенийОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОСпискеНоменклатуры(
		ОбщегоНазначения.ВыгрузитьКолонку(ДобавленныеСтроки, "Номенклатура", Истина), ДанныеОбъекта);
	
	Для Каждого СтрокаТабличнойЧасти ИЗ ДобавленныеСтроки Цикл
		
		СведенияОНоменклатуре = СоответствиеСведенийОНоменклатуре.Получить(СтрокаТабличнойЧасти.Номенклатура);
		Если СведенияОНоменклатуре = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Документы.ОтчетОРозничныхПродажах.ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(
			ДанныеОбъекта, СтрокаТабличнойЧасти, СведенияОНоменклатуре);
		
		ЗаполнитьДобавленныеКолонкиСтрокиТаблицыТовары(СтрокаТабличнойЧасти, Объект.СуммаВключаетНДС, СведенияОНоменклатуре);
		
	КонецЦикла;
	
	Объект.Товары.Загрузить(ТаблицаОбработки);
	
	ОбновитьИтоги(ЭтаФорма);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СведенияОВидеОплаты(ВидОплаты)

	Возврат ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВидОплаты,
		"Контрагент,ДоговорКонтрагента,СчетДеньгиВПути");	

КонецФункции

&НаСервереБезКонтекста
Функция СведенияОНоменклатуре(Номенклатура, СписокРеквизитов)

	Возврат ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Номенклатура, СписокРеквизитов);

КонецФункции

&НаСервере
Функция НайтиСтрокуТабличнойЧасти(ИмяТабличнойЧасти, СтруктураОтбора)

	СтрокаТабличнойЧасти = Неопределено;

	МассивНайденныхСтрок = Объект[ИмяТабличнойЧасти].НайтиСтроки(СтруктураОтбора);
	Если МассивНайденныхСтрок.Количество() > 0 Тогда
		// Нашли. Вернем первую найденную строку.
		СтрокаТабличнойЧасти = МассивНайденныхСтрок[0];
	КонецЕсли;

	Возврат СтрокаТабличнойЧасти;

КонецФункции

&НаКлиенте
Функция ПоляСтрокиТабличнойЧасти(СтрокаТаблицы = Неопределено, ИмяТабличнойЧасти = "Товары")

	Если СтрокаТаблицы = Неопределено Тогда
		СтрокаТаблицы = Элементы[ИмяТабличнойЧасти].ТекущиеДанные;
	КонецЕсли; 

	Если ИмяТабличнойЧасти = "Товары" Тогда
		ПараметрыСтроки = Новый Структура("Номенклатура, ЕдиницаИзмерения, Коэффициент,
			|Количество, Цена, Сумма, СтавкаНДС, СуммаНДС, 
			|СчетУчетаБУ, СхемаРеализации, ДокументПродажи,
			|НалоговоеНазначение, НалоговоеНазначениеДоходовИЗатрат, ДокументОприходования,
			|Себестоимость, СебестоимостьНУ, СуммаБезСкидки, СуммаСкидки,
			|Всего, ЭтоУслуга, СчетУчетаЗабалансовый,
			|СтатьяДекларацииПоАкцизномуНалогу, СуммаАкцизногоНалога, ПодакцизныеТоварыДляКоммерческогоИспользования");
	Иначе
		ПараметрыСтроки = Новый Структура("ВидОплаты, Контрагент, ДоговорКонтрагента, СчетДеньгиВПути, СуммаОплаты");
	КонецЕсли; 
	
	ЗаполнитьЗначенияСвойств(ПараметрыСтроки, СтрокаТаблицы);

	Возврат ПараметрыСтроки;

КонецФункции

&НаКлиенте
Функция ДанныеОбъекта()
	
	ДанныеОбъекта = Новый Структура(
		"Дата, ВидОперации, Организация, Склад,
		|ТипЦен, ВалютаДокумента, КурсДокумента, КратностьДокумента,
		|СуммаВключаетНДС, Реализация, АТТПоПродажнойСтоимости,
		|ТипСкладаНТТ,УчетПоПродажнойСтоимости,ЕстьАкцизныйНалог, СуммаВключаетАкциз");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
	ДанныеОбъекта.УчетПоПродажнойСтоимости = УчетПоПродажнойСтоимости;
	ДанныеОбъекта.ТипСкладаНТТ = ТипСкладаНТТ;
	ДанныеОбъекта.Реализация = Истина;
	ДанныеОбъекта.ЕстьАкцизныйНалог = ЕстьАкцизныйНалог;
	ДанныеОбъекта.СуммаВключаетАкциз= СуммаВключаетАкциз;
	
	Возврат ДанныеОбъекта;
	
КонецФункции

&НаКлиенте
Процедура ТоварыЕдиницаИзмеренияПриИзменении(Элемент)
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	ДанныеСтрокиТаблицы	= ПоляСтрокиТабличнойЧасти(ТекущиеДанные);
	ДанныеОбъекта = ДанныеОбъекта();
	
	ТоварыЕдиницаИзмеренияПриИзмененииНаСервере(ДанныеСтрокиТаблицы, ДанныеОбъекта);
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтрокиТаблицы);

КонецПроцедуры //ТоварыЕдиницаИзмеренияПриИзменении

&НаСервереБезКонтекста
Процедура ТоварыЕдиницаИзмеренияПриИзмененииНаСервере(СтрокаТабличнойЧасти, ДанныеОбъекта)	
	
	ОбработкаТабличныхЧастей.ЗаполнитьКоэффициентТабЧасти(СтрокаТабличнойЧасти);
	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСиАкцизногоНалогаТабЧасти(СтрокаТабличнойЧасти, ДанныеОбъекта.СуммаВключаетНДС, ДанныеОбъекта.ЕстьАкцизныйНалог, ДанныеОбъекта.СуммаВключаетАкциз);
	
	ЗаполнитьКолонкуВсегоСтрокиТаблицыТовары(СтрокаТабличнойЧасти, ДанныеОбъекта.СуммаВключаетНДС);

КонецПроцедуры // ТоварыЕдиницаИзмеренияПриИзмененииНаСервере

&НаКлиенте
Процедура ПоОбособленномуПодразделениюПриИзменении(Элемент)
	Если Объект.ПоОбособленномуПодразделению Тогда
		Элементы.ОбособленноеПодразделениеОрганизации.ТолькоПросмотр = Ложь;
	Иначе
		Объект.ОбособленноеПодразделениеОрганизации = Неопределено;
		Элементы.ОбособленноеПодразделениеОрганизации.ТолькоПросмотр = Истина;
	КонецЕсли; 
КонецПроцедуры

&НаСервере
Процедура ВидОперацииОбработатьИзменение()

	УстановитьЗаголовокФормы();
	
	УстановитьПараметрыВыбораСклада();
	
	Если Объект.ВидОперации <> Перечисления.ВидыОперацийОтчетОРозничныхПродажах.ОтчетНТТОПродажах Тогда
		Объект.ИнвентаризацияТоваровНаСкладе = Документы.ИнвентаризацияТоваровНаСкладе.ПустаяСсылка();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Склад) Тогда
		СоотвествиеСкладаВидуОперации = ?(Объект.ВидОперации = Перечисления.ВидыОперацийОтчетОРозничныхПродажах.ОтчетНТТОПродажах,
			Объект.Склад.ТипСклада = Перечисления.ТипыСкладов.НеавтоматизированнаяТорговаяТочка,
			Объект.Склад.ТипСклада <> Перечисления.ТипыСкладов.НеавтоматизированнаяТорговаяТочка);
			
		Если Не СоотвествиеСкладаВидуОперации Тогда
			Объект.Склад = Справочники.Склады.ПустаяСсылка();
		КонецЕсли;
	КонецЕсли;		
	
	УстановитьВидимость();
	
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаСервере
Процедура УстановитьСостояниеДокумента()
	
	СостояниеДокумента = ОбщегоНазначенияБП.СостояниеДокумента(Объект);
	
КонецПроцедуры

&НаСервере
Процедура ПересчитатьСуммыПриИзмененииПризнакаПлательщикНДС()
	
	МетаданныеДокумента = Объект.Ссылка.Метаданные();
	ПараметрыОбъекта = Новый Структура("Организация, Дата, ПлательщикНДС", Объект.Организация, Объект.Дата, ПлательщикНДС);

	Если Не ПлательщикНДС Тогда
		//организацию-плательщика поменяли на неплательщика, сумма не включала НДС - надо пересчитать;
		ПересчитатьНДС = Не Объект.СуммаВключаетНДС;			
		
		Объект.СуммаВключаетНДС = Истина;
	Иначе
		//организацию-неплательщика поменяли на плательщика;
		ПересчитатьНДС = Ложь;
		
		//заполним ставки до пересчета цены
		Для Каждого Строка Из Объект.Товары Цикл
			ОбработкаТабличныхЧастей.ЗаполнитьСтавкуНДСТабЧасти(Строка, ПараметрыОбъекта, "Товары", МетаданныеДокумента);
		КонецЦикла;

	КонецЕсли;
			
	ЗаполнитьРассчитатьСуммы( 
		Объект.ВалютаДокумента, 
		Объект.КурсДокумента, 
		Объект.КратностьДокумента,
		Ложь, // ПерезаполнитьЦены
		Ложь, // ПересчитатьЦены
		ПересчитатьНДС
	);
	
	Если Не ПлательщикНДС Тогда
		//организацию-плательщика поменяли на неплательщика 
		
		//заполним ставки после пересчета цены
		// и пересчитаем зависимые от ставки колонки СуммаНДС, Всего
		Для Каждого Строка Из Объект.Товары Цикл
			ОбработкаТабличныхЧастей.ЗаполнитьСтавкуНДСТабЧасти(Строка, ПараметрыОбъекта, "Товары", МетаданныеДокумента);
			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(Строка, Объект.СуммаВключаетНДС);
		КонецЦикла;
	
		ЗаполнитьДобавленныеКолонкиТаблиц();
	
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти 