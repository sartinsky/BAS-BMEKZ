#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс 

// Заполняет счета учета номенклатуры в табличной части документа
//
Процедура ЗаполнитьСчетаУчетаВТабличнойЧасти(Объект, ИмяТабличнойЧасти) Экспорт

	ТабличнаяЧасть = Объект[ИмяТабличнойЧасти];
	
	ДанныеОбъекта = Новый Структура(
		"Дата,Организация,Склад,ТипЦен,ВалютаДокумента,СуммаВключаетНДС,ТипСкладаНТТ,УчетПоПродажнойСтоимости");
	ДанныеОбъекта.ТипСкладаНТТ = НЕ Объект.Склад.Пустая() И Объект.Склад.ТипСклада = Перечисления.ТипыСкладов.НеавтоматизированнаяТорговаяТочка;
	СпособОценкиТоваровВРознице    = УчетнаяПолитика.СпособОценкиТоваровВРознице(Объект.Организация, Объект.Дата);
	ДанныеОбъекта.УчетПоПродажнойСтоимости = (СпособОценкиТоваровВРознице = 
		Перечисления.СпособыОценкиТоваровВРознице.ПоПродажнойСтоимости);
		
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
	СоответствиеСведенийОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОСпискеНоменклатуры(
		ОбщегоНазначения.ВыгрузитьКолонку(ТабличнаяЧасть, "Номенклатура", Истина), ДанныеОбъекта);
	
	Для каждого СтрокаТабличнойЧасти Из ТабличнаяЧасть Цикл
		СведенияОНоменклатуре = СоответствиеСведенийОНоменклатуре.Получить(СтрокаТабличнойЧасти.Номенклатура);
		ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(ДанныеОбъекта, СтрокаТабличнойЧасти, СведенияОНоменклатуре);
	КонецЦикла;

КонецПроцедуры

// Заполняет счета учета номенклатуры в строке табличной части документа
//
// Параметры:
//  ДанныеОбъекта         - структура данных объекта, используемых при заполнении счетов учета (вид операции,
//                          вид договора контрагента, признак комиссионной торговли и т.п.)
//  СтрокаТабличнойЧасти  - строка табличной части документа
//  ИмяТабличнойЧасти     - имя табличной части документа
//  СведенияОНоменклатуре - структура сведений о номенклатуре, либо стуктура счетов учета
//
Процедура ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(ДанныеОбъекта, СтрокаТабличнойЧасти, СведенияОНоменклатуре = Неопределено, ЗаполнятьБУ = Истина, ЗаполнятьНУ = Истина) Экспорт

	Если СведенияОНоменклатуре = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ДанныеОбъекта.ТипСкладаНТТ И ДанныеОбъекта.УчетПоПродажнойСтоимости Тогда
		Комиссия = Истина;
	Иначе
		Комиссия = Ложь;
	КонецЕсли;
	
	Если СведенияОНоменклатуре.Свойство("СчетаУчета") Тогда
		// СведенияОНоменклатуре - структура сведений номенклатуры
		СчетаУчета = СведенияОНоменклатуре.СчетаУчета;
	Иначе
		Возврат;
	КонецЕсли;
	
	Если ЗаполнятьБУ Тогда
		ЗаполнитьСчетаБУ(СтрокаТабличнойЧасти, СчетаУчета, ЗаполнятьБУ, Комиссия);
	КонецЕсли; 
	Если ЗаполнятьНУ Тогда
		ЗаполнитьСчетаНУ(СтрокаТабличнойЧасти, СчетаУчета, ЗаполнятьНУ, Комиссия);
	КонецЕсли; 

КонецПроцедуры // ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти 

#Область ОбработчикиСобытий	

Процедура ОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка)
	
	Если ВидФормы <> "ФормаДокумента"
		И ВидФормы <> "ФормаОбъекта" Тогда
		Возврат;
	КонецЕсли;

	ВидОперации = Неопределено; 

	Если Параметры.Свойство("Ключ") И ЗначениеЗаполнено(Параметры.Ключ) Тогда
		ВидОперации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Параметры.Ключ, "ВидОперации");
	КонецЕсли;

	// Если документ копируется, то вид операции получаем из копируемого документа.
	Если НЕ ЗначениеЗаполнено(ВидОперации) Тогда
		Если Параметры.Свойство("ЗначениеКопирования")
			И ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
			ВидОперации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
				Параметры.ЗначениеКопирования, "ВидОперации");
		КонецЕсли;
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(ВидОперации) Тогда
		Если Параметры.Свойство("ЗначенияЗаполнения") 
			И ТипЗнч(Параметры.ЗначенияЗаполнения) = Тип("Структура") Тогда
			Если Параметры.ЗначенияЗаполнения.Свойство("ВидОперации") Тогда
				ВидОперации = Параметры.ЗначенияЗаполнения.ВидОперации;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// При вводе на основании счета на оплату и поступления товаров и услуг, 
	// открывается форма, содержащая только ТЧ Товары или только ТЧ Услуги, если
	// у документа-основания заполнена только соответствующая таблица.
	Если НЕ ЗначениеЗаполнено(ВидОперации) Тогда
		Если Параметры.Свойство("Основание")
			И ЗначениеЗаполнено(Параметры.Основание) Тогда
			ВидОперации = ОпределитьВидОперацииПоДокументуОснованию(Параметры.Основание);
		КонецЕсли;
	КонецЕсли;

	СтандартнаяОбработка = Ложь;
	ФормыДокумента = ПолучитьСоответствиеВидовОперацийФормам();
	ВыбраннаяФорма = ФормыДокумента[ВидОперации];
	Если ВыбраннаяФорма = Неопределено Тогда
		ВыбраннаяФорма = "ФормаДокумента";
	КонецЕсли;

КонецПроцедуры

#КонецОбласти 

#Область СлужебныеПроцедурыИФункции

Функция ПолучитьСоответствиеВидовОперацийФормам() Экспорт

	ФормыДокумента = Новый Соответствие;
	ФормыДокумента.Вставить(Перечисления.ВидыОперацийОтчетОРозничныхПродажах.ОтчетККМОПродажах, "ФормаДокументаОбщая");
	ФормыДокумента.Вставить(Перечисления.ВидыОперацийОтчетОРозничныхПродажах.ОтчетНТТОПродажах, "ФормаДокументаОбщая");
	
	Возврат ФормыДокумента;

КонецФункции

Функция ОпределитьВидОперацииПоДокументуОснованию(Основание) Экспорт

	ВидОперации = Перечисления.ВидыОперацийОтчетОРозничныхПродажах.ОтчетККМОПродажах;
	
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ИнвентаризацияТоваровНаСкладе") Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Ссылка", Основание);
		
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ИнвентаризацияТоваровНаСкладе.Склад.ТипСклада КАК ТипСклада
			|ИЗ
			|	Документ.ИнвентаризацияТоваровНаСкладе КАК ИнвентаризацияТоваровНаСкладе
			|ГДЕ
			|	ИнвентаризацияТоваровНаСкладе.Ссылка = &Ссылка";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() И Выборка.ТипСклада = Перечисления.ТипыСкладов.НеавтоматизированнаяТорговаяТочка Тогда
			ВидОперации = Перечисления.ВидыОперацийОтчетОРозничныхПродажах.ОтчетНТТОПродажах;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ВидОперации;

КонецФункции

Функция РеквизитыНеРедактируемыеВГрупповойОбработке() Экспорт
	
	МассивРеквизитов = Новый Массив();
	МассивРеквизитов.Добавить("УдалитьУчитыватьНДС");
	
	Возврат МассивРеквизитов;
	
КонецФункции

// Процедура выполняет заполниение табличной части проданными ТМЦ по инвентаризации товаров (розница).
//
// Параметры:
//  ДокументОснование - ссылка на документ основание (инвентаризация Товаров (розница)).
//
Процедура ЗаполнитьТоварыПоИнвентаризацииТоваров(ДокументОбъект) Экспорт

	ДокументОбъект.СуммаВключаетНДС = Истина;
	мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();

	ДанныеОбъекта = Новый Структура(
		"Дата, ВидОперации, Организация, Склад,
		|ТипЦен, ВалютаДокумента, КурсДокумента, КратностьДокумента,
		|СуммаВключаетНДС, 
		|ТипСкладаНТТ,УчетПоПродажнойСтоимости,ЕстьАкцизныйНалог, СуммаВключаетАкциз");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, ДокументОбъект);
	ДанныеОбъекта.ТипСкладаНТТ = НЕ ДокументОбъект.Склад.Пустая() И ДокументОбъект.Склад.ТипСклада = Перечисления.ТипыСкладов.НеавтоматизированнаяТорговаяТочка;
	
	СпособОценкиТоваровВРознице    = УчетнаяПолитика.СпособОценкиТоваровВРознице(ДокументОбъект.Организация, ДокументОбъект.Дата);
	ДанныеОбъекта.УчетПоПродажнойСтоимости = (СпособОценкиТоваровВРознице = 
		Перечисления.СпособыОценкиТоваровВРознице.ПоПродажнойСтоимости);

	ПлательщикНДС = УчетнаяПолитика.ПлательщикНДС(ДанныеОбъекта.Организация, ДанныеОбъекта.Дата);
	ДанныеОбъекта.ЕстьАкцизныйНалог = (ДанныеОбъекта.Дата >= '2015 01 01');
	ДанныеОбъекта.СуммаВключаетАкциз= (НЕ ПлательщикНДС) ИЛИ (ПлательщикНДС И ДанныеОбъекта.СуммаВключаетНДС);
		
	Запрос = Новый Запрос;

	Запрос.УстановитьПараметр("ДокументСсылка"                   , ДокументОбъект.Ссылка);
	Запрос.УстановитьПараметр("ДокументОснованиеСсылка"          , ДокументОбъект.ИнвентаризацияТоваровНаСкладе);
	Запрос.УстановитьПараметр("НеавтоматизированнаяТорговаяТочка", Перечисления.ТипыСкладов.НеавтоматизированнаяТорговаяТочка);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Док.Номенклатура,
	|	Док.СчетУчетаБУ,
	|	Док.ЕдиницаИзмерения,
	|	Док.Коэффициент,
	|	Док.Ссылка.Склад                              КАК Склад,
	|	Док.Ссылка.Склад.ТипСклада                    КАК ТипСклада,
	|	МАКСИМУМ(Док.КоличествоУчет - Док.Количество) КАК КоличествоОтклонение,
	|	ВЫБОР
	|		КОГДА СУММА(ВложенныйЗапрос.Количество) ЕСТЬ NULL ТОГДА
	|			0
	|		ИНАЧЕ
	|			СУММА(ВложенныйЗапрос.Количество/Док.Коэффициент)
	|	КОНЕЦ КАК КоличествоСписанное,
	|	Док.ЦенаВРознице КАК Цена
	|ИЗ
	|	Документ.ИнвентаризацияТоваровНаСкладе.Товары КАК Док
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	(ВЫБРАТЬ 
	|		ДокСписание.Номенклатура,
	|		ДокСписание.СчетУчетаБУ,
	|		ДокСписание.Ссылка.Склад                  КАК Склад,
	|		ДокСписание.Количество * ДокСписание.Коэффициент  КАК Количество,
	|		ДокСписание.Цена/ДокСписание.Коэффициент  КАК Цена
	|	ИЗ
	|		Документ.СписаниеТоваров.Товары КАК ДокСписание
	|	ГДЕ
	|		ДокСписание.Ссылка.Проведен
	|		И ДокСписание.Ссылка.ИнвентаризацияТоваровНаСкладе = &ДокументОснованиеСсылка
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ 
	|		ДокОтчетККМ.Номенклатура,
	|		ДокОтчетККМ.СчетУчетаБУ,
	|		ДокОтчетККМ.Ссылка.Склад                  КАК Склад,
	|		ДокОтчетККМ.Количество * ДокОтчетККМ.Коэффициент КАК Количество,
	|		ВЫРАЗИТЬ(ДокОтчетККМ.Цена / ДокОтчетККМ.Коэффициент КАК ЧИСЛО (15,2)) КАК Цена
	|	ИЗ
	|		Документ.ОтчетОРозничныхПродажах.Товары КАК ДокОтчетККМ
	|	ГДЕ
	|		ДокОтчетККМ.Ссылка <> &ДокументСсылка
	|		И ДокОтчетККМ.Ссылка.Проведен
	|		И ДокОтчетККМ.Ссылка.ИнвентаризацияТоваровНаСкладе = &ДокументОснованиеСсылка) КАК ВложенныйЗапрос
	|ПО
	|	Док.Номенклатура = ВложенныйЗапрос.Номенклатура
	|	И Док.СчетУчетаБУ = ВложенныйЗапрос.СчетУчетаБУ
	|	И Док.Ссылка.Склад = ВложенныйЗапрос.Склад
	|	И (НЕ Док.Ссылка.Склад.ТипСклада = &НеавтоматизированнаяТорговаяТочка 
	|	ИЛИ ВЫРАЗИТЬ(Док.ЦенаВРознице / Док.Коэффициент КАК ЧИСЛО(15,2))  = ВложенныйЗапрос.Цена)
	|
	|ГДЕ
	|	Док.Ссылка = &ДокументОснованиеСсылка
	|	И ((Док.КоличествоУчет - Док.Количество) > 0)
	|
	|СГРУППИРОВАТЬ ПО
	|	Док.Ссылка.Склад,
	|	Док.Номенклатура,
	|	Док.СчетУчетаБУ,
	|	Док.ЕдиницаИзмерения,
	|	Док.Коэффициент,
	|	Док.ЦенаВРознице";
	РезультатЗапроса = Запрос.Выполнить();

	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл

		КоличествоСписать = Выборка.КоличествоОтклонение - Выборка.КоличествоСписанное;
		Если КоличествоСписать <= 0 Тогда
			Продолжить;
		КонецЕсли; 

		СтрокаТабличнойЧасти = ДокументОбъект.Товары.Добавить();

		СтрокаТабличнойЧасти.Номенклатура     = Выборка.Номенклатура;
		СтрокаТабличнойЧасти.Количество       = КоличествоСписать;
		СтрокаТабличнойЧасти.ЕдиницаИзмерения = Выборка.ЕдиницаИзмерения;
		СтрокаТабличнойЧасти.Коэффициент      = Выборка.Коэффициент;

		
		СведенияОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОНоменклатуре(
		СтрокаТабличнойЧасти.Номенклатура, ДанныеОбъекта);
		Если СведенияОНоменклатуре = Неопределено Тогда
			Возврат;
		КонецЕсли;
		Документы.ОтчетОРозничныхПродажах.ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(ДанныеОбъекта, СтрокаТабличнойЧасти, СведенияОНоменклатуре, Истина, Истина);
		
		СтрокаТабличнойЧасти.Цена					= СведенияОНоменклатуре.Цена;
		СтрокаТабличнойЧасти.СтавкаНДС				= СведенияОНоменклатуре.СтавкаНДС;
		
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ДанныеОбъекта .СуммаВключаетНДС);
		
		Если ЗначениеЗаполнено(Выборка.СчетУчетаБУ) Тогда
			СтрокаТабличнойЧасти.СчетУчетаБУ      = Выборка.СчетУчетаБУ;
		КонецЕсли;
		
		Если (ДанныеОбъекта.Дата >= '2015 01 01') Тогда
			ОбработкаТабличныхЧастейКлиентСервер.ЗаполнитьСтатьюДекларацииПоАкцизномуНалогуТабЧасти(СтрокаТабличнойЧасти);
		КонецЕсли;
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСиАкцизногоНалогаТабЧасти(СтрокаТабличнойЧасти, ДанныеОбъекта.СуммаВключаетНДС, ДанныеОбъекта.ЕстьАкцизныйНалог, ДанныеОбъекта.СуммаВключаетАкциз);
		
	КонецЦикла;

КонецПроцедуры // ЗаполнитьТоварыПоИнвентаризацииТоваров()

// Заполняет счета БУ в строке табличной части.
Процедура ЗаполнитьСчетаБУ(СтрокаТабличнойЧасти, СчетаУчета, ЗаполнятьБУ, Комиссия)

	Если ЗаполнятьБУ = Истина Тогда

		СтрокаТабличнойЧасти.СчетУчетаБУ			= ?(НЕ Комиссия, СчетаУчета.СчетУчетаБУ, СчетаУчета.СчетУчетаДоп);
		СтрокаТабличнойЧасти.СхемаРеализации		= СчетаУчета.СхемаРеализации;

	ИначеЕсли ЗаполнятьБУ = Ложь Тогда

		СтрокаТабличнойЧасти.СчетУчетаБУ            = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
		СтрокаТабличнойЧасти.СхемаРеализации 		= Справочники.СхемыРеализации.ПустаяСсылка();

	КонецЕсли;

КонецПроцедуры // ЗаполнитьСчетаБУ()

// Заполняет счета НУ в строке табличной части.
Процедура ЗаполнитьСчетаНУ(СтрокаТабличнойЧасти, СчетаУчета, ЗаполнятьНУ, Комиссия)
	
	Если ЗаполнятьНУ = Истина Тогда

		СтрокаТабличнойЧасти.НалоговоеНазначение 		 		= СчетаУчета.НалоговоеНазначение;
		СтрокаТабличнойЧасти.НалоговоеНазначениеДоходовИЗатрат 	= СчетаУчета.НалоговоеНазначениеДоходовИЗатрат;
 					
	ИначеЕсли ЗаполнятьНУ = Ложь Тогда

		СтрокаТабличнойЧасти.НалоговоеНазначение  				= Справочники.СтатьиНалоговыхДеклараций.ПустаяСсылка();
		СтрокаТабличнойЧасти.НалоговоеНазначениеДоходовИЗатрат 	= Справочники.СтатьиНалоговыхДеклараций.ПустаяСсылка();

	КонецЕсли;

КонецПроцедуры // ЗаполнитьСчетаНУ()

#КонецОбласти 

#Область ПроцедурыИФункцииПечати 

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт

	//// Справка-отчет кассира (КМ-6)
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "Накладная";
	КомандаПечати.Представление = НСтр("ru='Отчет о продажах';uk='Звіт про продажі'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечати";
	КомандаПечати.СписокФорм    = "ФормаСписка,ФормаВыбора,ФормаДокументаОбщая";

	//
	// Реестр документов
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "Реестр";
	КомандаПечати.Представление = НСтр("ru='Реестр документов';uk='Реєстр документів'");
	КомандаПечати.ЗаголовокФормы= НСтр("ru='Реестр документов ""Отчет о розничных продажах""';uk='Реєстр документів ""Звіт про роздрібні продажі""'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечатиРеестраДокументов";
	КомандаПечати.СписокФорм    = "ФормаСписка";
	КомандаПечати.Порядок       = 100;        
	
КонецПроцедуры

// Функция формирует табличный документ с печатной формой, разработанной методистами
//
// Возвращаемое значение:
//  Табличный документ - печатная форма 
//
Функция ПечатьОтчетаОРозничныхПродажах(МассивОбъектов, ОбъектыПечати, ПараметрыВывода)
	УстановитьПривилегированныйРежим(Истина);
	
	ДопКолонка = Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
	Если ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул Тогда
		ВыводитьКоды    = Истина;
		Колонка         = "Артикул";
		ТекстКодАртикул = "Артикул";
	ИначеЕсли ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Код Тогда
		ВыводитьКоды    = Истина;
		Колонка         = "Код";
		ТекстКодАртикул = "Код";
	Иначе
		ВыводитьКоды    = Ложь;
		Колонка         = "";
		ТекстКодАртикул = "Код";
	КонецЕсли;
	
	ЗапросДокумент = Новый Запрос;
	ЗапросДокумент.Текст =
	"ВЫБРАТЬ
	|	Номер,
	|	Дата,
	|	Ответственный.ФизическоеЛицо.Наименование КАК Отпустил,
	|	Организация,
	|	Организация КАК Поставщик,
	|	Склад,
	|	ВидОперации,
	|	СуммаДокумента,
	|	Константы.ВалютаРегламентированногоУчета КАК ВалютаДокумента,
	|	СуммаВключаетНДС
	|ИЗ
	|	Документ.ОтчетОРозничныхПродажах КАК ОтчетОРозничныхПродажах,
	|	Константы
	|
	|ГДЕ
	|	ОтчетОРозничныхПродажах.Ссылка = &ТекущийДокумент";
	
	ЗапросТовары = Новый Запрос;
	ЗапросТовары.Текст =
	"ВЫБРАТЬ
	|	Номенклатура,
	|	Номенклатура.НаименованиеПолное КАК Товар,
	|	Номенклатура."+ ТекстКодАртикул + " КАК КодАртикул,
	|	Номенклатура.Код КАК Код,
	|	Количество,
	|	ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	Цена,
	|	Сумма,
	|	СуммаСкидки,
	|	СуммаБезСкидки,
	|	СуммаНДС,
	|	СуммаАкцизногоНалога,
	|   НомерСтроки
	|ИЗ 
	|	(ВЫБРАТЬ
	|		Номенклатура         КАК Номенклатура,
	|		ЕдиницаИзмерения     КАК ЕдиницаИзмерения,
	|		Цена                 КАК Цена,
	|		СтавкаНДС            КАК СтавкаНДС,
	|		СУММА(Количество)    КАК Количество,
	|		СУММА(Сумма)         КАК Сумма,
	|		СУММА(СуммаСкидки)		КАК СуммаСкидки,
	|		СУММА(СуммаБезСкидки)   КАК СуммаБезСкидки,
	|		СУММА(СуммаНДС)      КАК СуммаНДС,
	|		СУММА(СуммаАкцизногоНалога)	КАК СуммаАкцизногоНалога,
	|		МИНИМУМ(НомерСтроки) КАК НомерСтроки
	|	ИЗ
	|		Документ.ОтчетОРозничныхПродажах.Товары КАК ОтчетОРозничныхПродажах
	|	ГДЕ
	|		ОтчетОРозничныхПродажах.Ссылка = &ТекущийДокумент
	|	СГРУППИРОВАТЬ ПО
	|		Номенклатура,
	|		ЕдиницаИзмерения,
	|		Цена,
	|		СтавкаНДС
	|	) КАК ВложенныйЗапросПоТоварам
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ОтчетОРозничныхПродажах_Накладная";
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ОтчетОРозничныхПродажах.ПФ_MXL_Накладная");
	
	// печать производится на языке, указанном в настройках пользователя
	КодЯзыкаПечать = ПараметрыВывода.КодЯзыкаДляМногоязычныхПечатныхФорм;
	Макет.КодЯзыкаМакета = КодЯзыкаПечать;
	
	
	ПервыйДокумент = Истина;
	
	Для Каждого Ссылка Из МассивОбъектов Цикл	
		
		Если Не ПервыйДокумент Тогда
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		// Запомним номер строки, с которой начали выводить текущий документ.
		НомерСтрокиНачало = ТабДокумент.ВысотаТаблицы + 1;
		
		ЗапросДокумент.УстановитьПараметр("ТекущийДокумент", Ссылка);
		Шапка = ЗапросДокумент.Выполнить().Выбрать();
		Шапка.Следующий();
		
		ЗапросТовары.УстановитьПараметр("ТекущийДокумент", Ссылка);
		ВыгрузкаТовары = ЗапросТовары.Выполнить().Выгрузить();
		
		ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
		ОбластьМакета.Параметры.ТекстЗаголовка = ОбщегоНазначенияБПВызовСервера.СформироватьЗаголовокДокумента(Шапка, НСтр("ru='Отчет о розничных продажах';uk='Звіт про роздрібні продажі'",КодЯзыкаПечать),КодЯзыкаПечать);
		
		ТабДокумент.Вывести(ОбластьМакета);

		ЕстьНДС = УчетнаяПолитика.ПлательщикНДС(Шапка.Организация, НачалоМесяца(Шапка.Дата));
		
		СведенияОПоставщике = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Шапка.Поставщик, Шапка.Дата,,,КодЯзыкаПечать);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");
		ОбластьМакета.Параметры.Заполнить(Шапка);
		ОбластьМакета.Параметры.ПредставлениеПоставщика = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОПоставщике, "ПолноеНаименование,",,КодЯзыкаПечать);	
		ОбластьМакета.Параметры.РеквизитыПоставщика =     ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОПоставщике, "НомерСчета,Банк,МФО,/,ЮридическийАдрес,Телефоны,/,КодПоЕДРПОУ,КодПоДРФО,",,КодЯзыкаПечать);
		ТабДокумент.Вывести(ОбластьМакета);
		
		// Выводим дополнительно информацию о договоре и сделке
		СписокДополнительныхПараметров = "Склад,";
		МассивСтруктурСтрок = ОбщегоНазначенияБПВызовСервера.ДополнительнаяИнформация(Шапка,СписокДополнительныхПараметров,КодЯзыкаПечать);
		ОбластьМакета = Макет.ПолучитьОбласть("ДопИнформация");
		Для каждого СтруктураСтроки Из МассивСтруктурСтрок Цикл
			ОбластьМакета.Параметры.Заполнить(СтруктураСтроки);
			ТабДокумент.Вывести(ОбластьМакета);
		КонецЦикла;
		
		ЕстьСкидки = (ВыгрузкаТовары.Итог("СуммаСкидки") <> 0);
		
		// Вывести табличную часть
		ОбластьНомера = Макет.ПолучитьОбласть("ШапкаТаблицы|НомерСтроки");
		ОбластьКодов  = Макет.ПолучитьОбласть("ШапкаТаблицы|КолонкаКодов");
		ОбластьДанных = Макет.ПолучитьОбласть("ШапкаТаблицы|Данные");
		ОбластьСкидка = Макет.ПолучитьОбласть("ШапкаТаблицы|Скидка");
		ОбластьСуммы  = Макет.ПолучитьОбласть("ШапкаТаблицы|Сумма");
		
		ТабДокумент.Вывести(ОбластьНомера);
		Если ВыводитьКоды Тогда
			ОбластьКодов.Параметры.ИмяКодАртикул = ТекстКодАртикул;
			ТабДокумент.Присоединить(ОбластьКодов);
		КонецЕсли;
		
		Суффикс = "";
		Если ЕстьНДС Тогда
			Если Шапка.СуммаВключаетНДС Тогда
				Суффикс  = Суффикс  + НСтр("ru=' с ';uk=' з '",КодЯзыкаПечать);
			Иначе	
				Суффикс  = Суффикс  + НСтр("ru=' без ';uk=' без '",КодЯзыкаПечать);
			КонецЕсли;
			Суффикс = Суффикс  + НСтр("ru='НДС';uk='ПДВ'",КодЯзыкаПечать);
		КонецЕсли;
		
		ОбластьДанных.Параметры.Цена  = НСтр("ru='Цена';uk='Ціна'",КодЯзыкаПечать) + Суффикс;
		ТабДокумент.Присоединить(ОбластьДанных);
		Если ЕстьСкидки Тогда
			ТабДокумент.Присоединить(ОбластьСкидка);
		КонецЕсли;
		ОбластьСуммы.Параметры.Сумма = НСтр("ru='Сумма';uk='Сума'",КодЯзыкаПечать)+ Суффикс;
		ТабДокумент.Присоединить(ОбластьСуммы);
		
		ОбластьКолонкаТовар = Макет.Область("Товар");
		
		Если Не ВыводитьКоды Тогда
			ОбластьКолонкаТовар.ШиринаКолонки = ОбластьКолонкаТовар.ШиринаКолонки + 
			Макет.Область("КолонкаКодов").ШиринаКолонки;
		КонецЕсли;
		Если НЕ ЕстьСкидки Тогда
			ОбластьКолонкаТовар.ШиринаКолонки = ОбластьКолонкаТовар.ШиринаКолонки + 
			Макет.Область("СуммаБезСкидки").ШиринаКолонки +
			Макет.Область("СуммаСкидки").ШиринаКолонки;
		КонецЕсли;
		
		
		ОбластьНомера = Макет.ПолучитьОбласть("Строка|НомерСтроки");
		ОбластьКодов  = Макет.ПолучитьОбласть("Строка|КолонкаКодов");
		ОбластьДанных = Макет.ПолучитьОбласть("Строка|Данные");
		ОбластьСкидки = Макет.ПолучитьОбласть("Строка|Скидка");
		ОбластьСуммы  = Макет.ПолучитьОбласть("Строка|Сумма");
		
		Сумма    		= 0;
		СуммаБезСкидки  = 0;
		СуммаСкидки 	= 0;
		СуммаНДС 		= 0;
		СуммаАкцизногоНалога = 0;
		
		Для каждого ВыборкаСтрокТовары Из ВыгрузкаТовары Цикл 
			
			Если НЕ ЗначениеЗаполнено(ВыборкаСтрокТовары.Номенклатура) Тогда
				Сообщить(НСтр("ru='В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.';uk='В одному з рядків не заповнене значення номенклатури - рядок під час друку буде пропущений.'"), СтатусСообщения.Важное);
				Продолжить;
			КонецЕсли;
			
			ОбластьНомера.Параметры.НомерСтроки = ВыгрузкаТовары.Индекс(ВыборкаСтрокТовары) + 1;
			ТабДокумент.Вывести(ОбластьНомера);
			
			Если ВыводитьКоды Тогда
				ОбластьКодов.Параметры.Заполнить(ВыборкаСтрокТовары);
				ТабДокумент.Присоединить(ОбластьКодов);
			КонецЕсли;
			
			ОбластьДанных.Параметры.Заполнить(ВыборкаСтрокТовары);
			ОбластьДанных.Параметры.Товар 		= СокрЛП(ВыборкаСтрокТовары.Товар);
			ТабДокумент.Присоединить(ОбластьДанных);
			
			Если ЕстьСкидки Тогда
				ОбластьСкидки.Параметры.Заполнить(ВыборкаСтрокТовары);
				ТабДокумент.Присоединить(ОбластьСкидки);
			КонецЕсли;
			
			ОбластьСуммы.Параметры.Заполнить(ВыборкаСтрокТовары);
			ТабДокумент.Присоединить(ОбластьСуммы);
			
			Сумма          = Сумма       + ВыборкаСтрокТовары.Сумма;
			СуммаНДС       = СуммаНДС    + ВыборкаСтрокТовары.СуммаНДС;
			СуммаБезСкидки = СуммаБезСкидки + ВыборкаСтрокТовары.СуммаБезСкидки;
			СуммаСкидки    = СуммаСкидки    + ВыборкаСтрокТовары.СуммаСкидки;
			СуммаАкцизногоНалога = СуммаАкцизногоНалога    + ВыборкаСтрокТовары.СуммаАкцизногоНалога;
			
		КонецЦикла;
		
		// Вывести Итого
		ОбластьНомера = Макет.ПолучитьОбласть("Итого|НомерСтроки");
		ОбластьКодов  = Макет.ПолучитьОбласть("Итого|КолонкаКодов");
		ОбластьДанных = Макет.ПолучитьОбласть("Итого|Данные");
		ОбластьСкидки = Макет.ПолучитьОбласть("Итого|Скидка");
		ОбластьСуммы  = Макет.ПолучитьОбласть("Итого|Сумма");
		
		ТабДокумент.Вывести(ОбластьНомера);
		Если ВыводитьКоды Тогда
			ТабДокумент.Присоединить(ОбластьКодов);
		КонецЕсли;
		ТабДокумент.Присоединить(ОбластьДанных);
		
		Если ЕстьСкидки Тогда
			ОбластьСкидки.Параметры.ВсегоСуммаБезСкидки = ОбщегоНазначенияБПВызовСервера.ФорматСумм(СуммаБезСкидки);		
			ОбластьСкидки.Параметры.ВсегоСуммаСкидки    = ОбщегоНазначенияБПВызовСервера.ФорматСумм(СуммаСкидки);
			ТабДокумент.Присоединить(ОбластьСкидки);
		КонецЕсли;
		ОбластьСуммы.Параметры.Всего = ОбщегоНазначенияБПВызовСервера.ФорматСумм(Сумма);
		ТабДокумент.Присоединить(ОбластьСуммы);
		
		// Вывести ИтогоНДС
		Если ЕстьНДС Тогда
			// НДС
			ОбластьМакета = Макет.ПолучитьОбласть("ИтогоНДС");
			ОбластьМакета.Параметры.ВсегоНДС = ОбщегоНазначенияБПВызовСервера.ФорматСумм(СуммаНДС,,"""");
			ОбластьМакета.Параметры.НДС      = ?(Шапка.СуммаВключаетНДС, НСтр("ru='В т.ч. НДС:';uk='В т. ч. ПДВ:'",КодЯзыкаПечать), НСтр("ru='Сумма НДС:';uk='Сума ПДВ:'",КодЯзыкаПечать));

			ТабДокумент.Вывести(ОбластьМакета);
			
			Если СуммаАкцизногоНалога <> 0  Тогда
				ОбластьМакета = Макет.ПолучитьОбласть("ИтогоНДС");
				ОбластьМакета.Параметры.ВсегоНДС = ОбщегоНазначенияБПВызовСервера.ФорматСумм(СуммаАкцизногоНалога,,"""");
				ОбластьМакета.Параметры.НДС      = ?(Шапка.СуммаВключаетНДС, НСтр("ru='В т.ч. акциз:';uk='У т.ч. акциз:'",КодЯзыкаПечать), НСтр("ru='Сумма акциза:';uk='Сума акцизу:'",КодЯзыкаПечать));
				ТабДокумент.Вывести(ОбластьМакета);
			КонецЕсли; 
			
			// всего с НДС (если сумма не включает НДС)
			Если НЕ Шапка.СуммаВключаетНДС Тогда
				ОбластьМакета = Макет.ПолучитьОбласть("ИтогоНДС");
				ОбластьМакета.Параметры.ВсегоНДС = ОбщегоНазначенияБПВызовСервера.ФорматСумм(Сумма + СуммаНДС + СуммаАкцизногоНалога);
				Если СуммаАкцизногоНалога <> 0  Тогда
					ОбластьМакета.Параметры.НДС      = НСтр("ru='Всего с налогами:';uk='Всього з податками:'",КодЯзыкаПечать);
				Иначе
					ОбластьМакета.Параметры.НДС      = НСтр("ru='Всего с НДС:';uk='Всього із ПДВ:'",КодЯзыкаПечать);
				КонецЕсли;
				ТабДокумент.Вывести(ОбластьМакета);
			КонецЕсли;
		Иначе
			Если СуммаАкцизногоНалога <> 0  Тогда
				ОбластьМакета = Макет.ПолучитьОбласть("ИтогоНДС");
				ОбластьМакета.Параметры.ВсегоНДС = ОбщегоНазначенияБПВызовСервера.ФорматСумм(СуммаАкцизногоНалога,,"""");
				ОбластьМакета.Параметры.НДС      = НСтр("ru='В т.ч. акциз:';uk='У т.ч. акциз:'",КодЯзыкаПечать);
				ТабДокумент.Вывести(ОбластьМакета);
			КонецЕсли; 
		КонецЕсли;
		
		// Вывести Сумму прописью
		ОбластьМакета = Макет.ПолучитьОбласть("СуммаПрописью");
		СуммаКПрописи = Сумма + ?(Шапка.СуммаВключаетНДС, 0, СуммаНДС) + ?(ЕстьНДС И Шапка.СуммаВключаетНДС, 0, СуммаАкцизногоНалога);

		ОбластьМакета.Параметры.ИтоговаяСтрока = НСтр("ru='Всего наименований ';uk='Всього найменувань '",КодЯзыкаПечать) + ВыгрузкаТовары.Количество() + "," +
		НСтр("ru=' на сумму ';uk=' на суму '",КодЯзыкаПечать)  + ОбщегоНазначенияБПВызовСервера.ФорматСумм(СуммаКПрописи, Шапка.ВалютаДокумента)
		+ ".";
		
		
		СуммаНалоговКПрописи = СуммаНДС + СуммаАкцизногоНалога;
		Если СуммаАкцизногоНалога <> 0  Тогда
			ЗаголовокНалоговКПрописи = НСтр("ru='В т.ч. налоги:';uk='У т.ч. податки:'",КодЯзыкаПечать);
		Иначе
			ЗаголовокНалоговКПрописи = НСтр("ru='В т.ч. НДС:';uk='В т. ч. ПДВ:'",КодЯзыкаПечать);
		КонецЕсли;
	  	ОбластьМакета.Параметры.СуммаПрописью  = ОбщегоНазначенияБПВызовСервера.СформироватьСуммуПрописью(СуммаКПрописи, Шапка.ВалютаДокумента,КодЯзыкаПечать)
		 										 + ?(НЕ ЕстьНДС И СуммаНалоговКПрописи = 0, "", Символы.ПС + ЗаголовокНалоговКПрописи + ОбщегоНазначенияБПВызовСервера.СформироватьСуммуПрописью(СуммаНалоговКПрописи, Шапка.ВалютаДокумента, КодЯзыкаПечать));
		
		ТабДокумент.Вывести(ОбластьМакета);
		
		// Вывести подписи
		ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
		ОбластьМакета.Параметры.Заполнить(Шапка);
		ТабДокумент.Вывести(ОбластьМакета);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабДокумент, 
		НомерСтрокиНачало, ОбъектыПечати, Ссылка);
		
	КонецЦикла;	
	
	Возврат ТабДокумент;

КонецФункции // ПечатьОприходованиеТоваров()

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходимое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	ПараметрыВывода.ДоступнаПечатьПоКомплектно = Истина;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "Накладная") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "Накладная", НСтр("ru='Накладная на оприходование товаров';uk='Накладна на оприбуткування товарів'"), 
			ПечатьОтчетаОРозничныхПродажах(МассивОбъектов, ОбъектыПечати, ПараметрыВывода),,"Документ.ОтчетОРозничныхПродажах.ПФ_MXL_Накладная", , Истина);
	КонецЕсли;
 	
КонецПроцедуры // Печать

Функция ПолучитьДополнительныеРеквизитыДляРеестра() Экспорт
	
	Результат = Новый Структура("Информация", "Склад");
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецЕсли