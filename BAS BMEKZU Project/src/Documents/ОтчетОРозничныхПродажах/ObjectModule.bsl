#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

Перем мВалютаРегламентированногоУчета;

#Область ОбработчикиСобытий 

// Процедура - обработчик события "ОбработкаЗаполнения".
//
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)

	ТипДанныхЗаполнения = ТипЗнч(ДанныеЗаполнения);
	Если ДанныеЗаполнения <> Неопределено И ТипДанныхЗаполнения <> Тип("Структура")
		И Метаданные().ВводитсяНаОсновании.Содержит(ДанныеЗаполнения.Метаданные()) Тогда
		ЗаполнитьПоДокументуОснованию(ДанныеЗаполнения);
	Иначе
		СуммаВключаетНДС = Истина;
		СчетДоходовРозничныхПродаж 			= ПланыСчетов.Хозрасчетный.ДоходОтРозницы;
		СчетВычетаИзДоходовРозничныхПродаж  = ПланыСчетов.Хозрасчетный.ВычетыИзДоходаОтРозницы;
		СчетУчетаНДС = ПланыСчетов.Хозрасчетный.НалоговыеОбязательстваРозница;
		СчетУчетаАкцизногоНалога = ПланыСчетов.Хозрасчетный.РасчетыПоАкцизу;
		АвторасчетНДС = Ложь;
	КонецЕсли;
	ЗаполнениеДокументов.Заполнить(ЭтотОбъект, ДанныеЗаполнения);
	
	РеквизитыСклада = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Склад, "ТипСклада, ТипЦенРозничнойТорговли");
	
	// Склад может заполниться по умолчанию значением, которое не должно выбираться
	Если ЗначениеЗаполнено(Склад) Тогда
		Если ВидОперации = Перечисления.ВидыОперацийОтчетОРозничныхПродажах.ОтчетККМОПродажах Тогда
			Если РеквизитыСклада.ТипСклада = Перечисления.ТипыСкладов.НеавтоматизированнаяТорговаяТочка Тогда
				Склад = Справочники.Склады.ПустаяСсылка();
			КонецЕсли;
		Иначе
			Если РеквизитыСклада.ТипСклада <> Перечисления.ТипыСкладов.НеавтоматизированнаяТорговаяТочка Тогда
				Склад = Справочники.Склады.ПустаяСсылка();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Склад) Тогда
		ТипЦен = РеквизитыСклада.ТипЦенРозничнойТорговли;
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(СчетКасса) Тогда
		СчетКасса = ПланыСчетов.Хозрасчетный.КассаВНациональнойВалюте;
	КонецЕсли;

КонецПроцедуры // ОбработкаЗаполнения()

// Процедура вызывается перед записью документа 
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;

	ПлательщикНДС = УчетнаяПолитика.ПлательщикНДС(Организация, Дата);
	ПлательщикНалогаНаПрибыльДо2015  = УчетнаяПолитика.ПлательщикНалогаНаПрибыльДо2015(Организация, Дата);			   
	
	Если (Дата >= '2015 01 01') И АвторасчетНДС Тогда
		АвторасчетНДС = Ложь;
	КонецЕсли; 
	Если АвторасчетНДС Тогда
		// соответствие для хранения погрешностей округлений
		ПогрешностиОкругления = Новый Соответствие();
		// пересчет сумм НДС с учетом ошибок округления
		УчетНДСКлиентСервер.ПересчитатьНДСсУчетомПогрешностиОкругления(Товары, Ссылка, СуммаВключаетНДС, ПогрешностиОкругления, "Товары", Строка(ВалютаДокумента));
	КонецЕсли;

	Если НЕ ПлательщикНДС Тогда
		// организация - не плательщик НДС. Установим во всех ТЧ признак соответствующего учета НДС
		НеОБлНДСДеятельность = Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяХозДеятельность;
		
		Для каждого СтрокаТЧ  Из Товары Цикл
		    СтрокаТЧ.НалоговоеНазначение = НеОБлНДСДеятельность;
		КонецЦикла; 
	КонецЕсли; 
	
	Если НЕ ПлательщикНалогаНаПрибыльДо2015 Тогда
		
		Для каждого СтрокаТЧ  Из Товары Цикл
		    СтрокаТЧ.НалоговоеНазначениеДоходовИЗатрат = Неопределено;
			СтрокаТЧ.СебестоимостьНУ = 0;
		КонецЦикла; 
		
	КонецЕсли; 
	
	// по НТТ олата указывается в ПКО
	Если (ВидОперации = Перечисления.ВидыОперацийОтчетОРозничныхПродажах.ОтчетНТТОПродажах) И (Оплата.Количество() <> 0) Тогда
		Оплата.Очистить();
	КонецЕсли;
	
	// Посчитать суммы документа и записать ее в соответствующий реквизит шапки для показа в журналах
	СуммаДокумента = УчетНДС.ПолучитьСуммуДокументаСНДС(ЭтотОбъект, "Товары") + ?(НЕ ПлательщикНДС ИЛИ (ПлательщикНДС И СуммаВключаетНДС), 0, Товары.Итог("СуммаАкцизногоНалога"));

КонецПроцедуры // ПередЗаписью

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	Перем Заголовок, СтруктураШапкиДокумента;
	
	Перем ТаблицаПоТоварам, ТаблицаОплата;

	// Заголовок для сообщений об ошибках проведения.
	Заголовок = НСтр("ru='Проведение документа ""';uk='Проведення документа ""'") + СокрЛП(Ссылка) + """: ";
	// Проверка ручной корректировки
	ПроведениеСервер.ПодготовитьНаборыЗаписейКПроведению(ЭтотОбъект);
	Если РучнаяКорректировка Тогда
		Возврат;
	КонецЕсли;

	ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента);

	
	
	

	ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаОплата, Отказ, Заголовок);
	

	// Движения по документу
	Если НЕ Отказ Тогда
		ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаОплата, Отказ, Заголовок);
	КонецЕсли;
	
	ДвиженияПоРаспределениюОплат(СтруктураШапкиДокумента, ТаблицаОплата);
	
	Движения.Хозрасчетный.ВыполнитьДействияПередЗаписьюДвижений();

	ПроведениеСервер.ПодготовитьНаборыЗаписейКЗаписиДвижений(ЭтотОбъект);
	
КонецПроцедуры // ОбработкаПроведения()

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКОтменеПроведения(ЭтотОбъект);
	Движения.Записать();
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	Перем Заголовок, СтруктураШапкиДокумента;
	Перем ТаблицаПоТоварам, ТаблицаОплата;
	МассивНепроверяемыхРеквизитов = Новый Массив;

	// Заголовок для сообщений об ошибках проведения.
	Заголовок = НСтр("ru='Проведение документа ""';uk='Проведення документа ""'") + СокрЛП(Ссылка) + """: ";

	ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента);

	// Проверим правильность заполнения шапки документа
	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок,МассивНепроверяемыхРеквизитов);

	ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаОплата, Отказ, Заголовок);
	
	// Проверить заполнение ТЧ "Товары".
	ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок,МассивНепроверяемыхРеквизитов);
	
	ПроверитьЗаполнениеТабличнойЧастиОплата(ТаблицаОплата, СтруктураШапкиДокумента, Отказ, Заголовок,МассивНепроверяемыхРеквизитов);
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)

	Дата = НачалоДня(ОбщегоНазначенияБП.ПолучитьРабочуюДату());
	Ответственный = Пользователи.ТекущийПользователь();
	
КонецПроцедуры

#КонецОбласти 

#Область Проведение 

Процедура ДобавитьКолонкиТоваровРегл(ТаблицаТоваров, СтруктураШапкиДокумента, ПогрешностиОкругления) Экспорт
	
	// Суммы в документе в валюте регл. учета
	ТаблицаТоваров.Колонки.Добавить("СуммаБезНДСРегл"        , ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаТоваров.Колонки.Добавить("СуммаНДСРегл"           , ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаТоваров.Колонки.Добавить("СуммаСНДСРегл"          , ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповЧисла(15,2));
	
	// Суммы в документе в валюте документа
	ТаблицаТоваров.Колонки.Добавить("СуммаБезНДСВал"         , ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаТоваров.Колонки.Добавить("СуммаНДСВал"            , ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаТоваров.Колонки.Добавить("СуммаСНДСВал"           , ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповЧисла(15,2));
	
	// Суммы в проводках в валюте регл. учета
	ТаблицаТоваров.Колонки.Добавить("ПроводкиСуммаБезНДСРегл", ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаТоваров.Колонки.Добавить("ПроводкиСуммаНДСРегл"   , ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаТоваров.Колонки.Добавить("ПроводкиСуммаСНДСРегл"  , ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповЧисла(15,2));
	
	// Суммы в проводках в валюте документа
	ТаблицаТоваров.Колонки.Добавить("ПроводкиСуммаБезНДСВал" , ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаТоваров.Колонки.Добавить("ПроводкиСуммаНДСВал"    , ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаТоваров.Колонки.Добавить("ПроводкиСуммаСНДСВал"   , ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповЧисла(15,2));
	
	ТаблицаТоваров.Колонки.Добавить("ПроводкиСуммаАкцизногоНалогаРегл" , ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповЧисла(15,2));
	
	// Заполним значения в добавленых колонках 
	Для каждого СтрокаТаблицы Из ТаблицаТоваров Цикл
		
		СтрокаТаблицы.ПроводкиСуммаАкцизногоНалогаРегл    = СтрокаТаблицы.СуммаАкцизногоНалога;
		СтрокаТаблицы.Сумма = СтрокаТаблицы.Сумма - ?(НЕ СтруктураШапкиДокумента.ЕстьНДС ИЛИ (СтруктураШапкиДокумента.ЕстьНДС И СуммаВключаетНДС), СтрокаТаблицы.ПроводкиСуммаАкцизногоНалогаРегл, 0);

		// Рассчитаем суммы в документе в валюте документа
		СтрокаТаблицы.СуммаСНДСВал    = СтрокаТаблицы.Сумма + ?(СуммаВключаетНДС, 0, СтрокаТаблицы.НДС);
		СтрокаТаблицы.СуммаНДСВал     = СтрокаТаблицы.НДС;
		СтрокаТаблицы.СуммаБезНДСВал  = СтрокаТаблицы.СуммаСНДСВал - СтрокаТаблицы.СуммаНДСВал;
		
		// Рассчитаем суммы в документе в валюте регл. учета
		Если СтруктураШапкиДокумента.ВалютаДокумента = СтруктураШапкиДокумента.ВалютаРегламентированногоУчета Тогда
			СтрокаТаблицы.СуммаСНДСРегл = СтрокаТаблицы.СуммаСНДСВал;
			СтрокаТаблицы.СуммаНДСРегл  = СтрокаТаблицы.СуммаНДСВал;
		Иначе
			СтрокаТаблицы.СуммаСНДСРегл = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.СуммаСНДСВал, 
												СтруктураШапкиДокумента.ВалютаДокумента,
												СтруктураШапкиДокумента.ВалютаРегламентированногоУчета, 
												СтруктураШапкиДокумента.КурсДокумента, 
												1,
												СтруктураШапкиДокумента.КратностьДокумента,
												1,
												, ПогрешностиОкругления, "СуммаСНДСРегл");
			СтрокаТаблицы.СуммаНДСРегл  = УчетНДСКлиентСервер.РассчитатьСуммуНДСсУчетомПогрешности(СтрокаТаблицы.СуммаСНДСРегл,
												СтруктураШапкиДокумента.ЕстьНДС,
												Истина,
												СтрокаТаблицы.СтавкаНДС,
												ПогрешностиОкругления);
		КонецЕсли;
		СтрокаТаблицы.СуммаБезНДСРегл = СтрокаТаблицы.СуммаСНДСРегл - СтрокаТаблицы.СуммаНДСРегл;
		
		// Рассчитаем суммы в проводках в валюте регл. учета и валюте документа
		СтрокаТаблицы.ПроводкиСуммаСНДСРегл = СтрокаТаблицы.СуммаСНДСРегл;
		СтрокаТаблицы.ПроводкиСуммаСНДСВал  = СтрокаТаблицы.СуммаСНДСВал;
		// Определим значение НДС в проводках
		Если СтруктураШапкиДокумента.ЕстьНДС = Ложь Тогда
			// в документе НДС не указывается
			СтрокаТаблицы.ПроводкиСуммаНДСРегл = 0;
			СтрокаТаблицы.ПроводкиСуммаНДСВал  = 0;
		Иначе
			СтрокаТаблицы.ПроводкиСуммаНДСРегл = СтрокаТаблицы.СуммаНДСРегл;
			СтрокаТаблицы.ПроводкиСуммаНДСВал  = СтрокаТаблицы.СуммаНДСВал;
		КонецЕсли;
		СтрокаТаблицы.ПроводкиСуммаБезНДСРегл = СтрокаТаблицы.ПроводкиСуммаСНДСРегл - СтрокаТаблицы.ПроводкиСуммаНДСРегл;
		СтрокаТаблицы.ПроводкиСуммаБезНДСВал  = СтрокаТаблицы.ПроводкиСуммаСНДСВал  - СтрокаТаблицы.ПроводкиСуммаНДСВал;
													
	КонецЦикла;
КонецПроцедуры

// Записать суммы документа в соответствующие реквизиты шапки для показа в журналах
//
// Параметры: 
//  Нет.
//
// Возвращаемое значение:
//  Нет.
//
Процедура РасчетСуммДокумента() Экспорт

	СуммаДокумента = Товары.Итог("Сумма");

КонецПроцедуры // РасчетСуммДокумента

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТоварам - результат запроса по табличной части "Товары",
//  СтруктураШапкиДокумента   - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблиица значений.
//
Функция ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента, ПогрешностиОкругления)

	ТаблицаТоваров = РезультатЗапросаПоТоварам.Выгрузить();

	// Для корректного отражения возвратов
	ТаблицаТоваров.Колонки.Добавить("РасчетыВозврат", Новый ОписаниеТипов("ПеречислениеСсылка.РасчетыВозврат"));
	
	ТаблицаТоваров.Колонки.СчетРасходовБУ.Имя	   = "КорСчетСписанияБУ";
	ТаблицаТоваров.Колонки.СубконтоРасходовБУ1.Имя = "КорСубконтоСписанияБУ1";
	ТаблицаТоваров.Колонки.СубконтоРасходовБУ2.Имя = "КорСубконтоСписанияБУ2";
	ТаблицаТоваров.Колонки.СубконтоРасходовБУ3.Имя = "КорСубконтоСписанияБУ3";
	
//	ТаблицаТоваров.Колонки.Добавить("ДокументОприходования");
	ТаблицаТоваров.Колонки.Добавить("Регистратор");
	ТаблицаТоваров.Колонки.Добавить("Организация");
	ТаблицаТоваров.Колонки.Добавить("Склад");
	ТаблицаТоваров.Колонки.Добавить("ДоговорКонтрагента");

	ТаблицаТоваров.ЗаполнитьЗначения(ЭтотОбъект,                                 "Регистратор");
	ТаблицаТоваров.ЗаполнитьЗначения(СтруктураШапкиДокумента.Склад,              "Склад");
	ТаблицаТоваров.ЗаполнитьЗначения(СтруктураШапкиДокумента.Организация,        "Организация");
	
	ТаблицаТоваров.Колонки.Добавить("СчетУчетаНДС", Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	ТаблицаТоваров.ЗаполнитьЗначения(СчетУчетаНДС,"СчетУчетаНДС");
	
	// для списания укажем "кор. налоговое назначение" = нал. назначение доходов и затрат
	// для отражения расходов по налогу на прибыль по списанной себестоимости
	Если  СтруктураШапкиДокумента.ЕстьНалогНаПрибыльДо2015 Тогда
		ТаблицаТоваров.Колонки.Добавить("НалоговоеНазначениеНовое", Новый ОписаниеТипов("СправочникСсылка.НалоговыеНазначенияАктивовИЗатрат"));
		ТаблицаТоваров.ЗагрузитьКолонку(ТаблицаТоваров.ВыгрузитьКолонку("НалоговоеНазначениеДоходовИЗатрат") , "НалоговоеНазначениеНовое");
	КонецЕсли;
	
	Если НЕ СтруктураШапкиДокумента.ЕстьНДС Тогда
		// для регламентного учета считаем НДС
		ТаблицаТоваров.ЗаполнитьЗначения(Перечисления.СтавкиНДС.БезНДС, "СтавкаНДС");
		ТаблицаТоваров.ЗаполнитьЗначения(0                            , "НДС");
	КонецЕсли;
	
	Для Каждого СтрокаТаблицы Из ТаблицаТоваров Цикл
		Если СтрокаТаблицы.Количество < 0 Тогда
			СтрокаТаблицы.РасчетыВозврат = Перечисления.РасчетыВозврат.Возврат;
		Иначе
			СтрокаТаблицы.РасчетыВозврат = Перечисления.РасчетыВозврат.Расчеты;
		КонецЕсли;
	КонецЦикла;

	ДобавитьКолонкиТоваровРегл(ТаблицаТоваров, СтруктураШапкиДокумента, ПогрешностиОкругления);
	
	Возврат ТаблицаТоваров;

КонецФункции // ПодготовитьТаблицуТоваров()

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизтов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок, МассивНепроверяемыхРеквизитов)

	
	
	НТТ = (ВидОперации = Перечисления.ВидыОперацийОтчетОРозничныхПродажах.ОтчетНТТОПродажах);
	
	Если НЕ (НТТ И НЕ СтруктураШапкиДокумента.УчетВПродажныхЦенах) Тогда
		МассивНепроверяемыхРеквизитов.Добавить("СчетДоходовРозничныхПродаж");
		МассивНепроверяемыхРеквизитов.Добавить("СчетВычетаИзДоходовРозничныхПродаж");
	КонецЕсли;
	
	Если (НТТ И НЕ СтруктураШапкиДокумента.УчетВПродажныхЦенах)
		ИЛИ НЕ СтруктураШапкиДокумента.ЕстьНДС Тогда
			МассивНепроверяемыхРеквизитов.Добавить("СчетУчетаНДС");
	КонецЕсли;
	
	Если (НТТ И СтруктураШапкиДокумента.УчетВПродажныхЦенах) Тогда
		МассивНепроверяемыхРеквизитов.Добавить("СчетКасса");
		МассивНепроверяемыхРеквизитов.Добавить("ОбособленноеПодразделениеОрганизации");
	Иначе 
		Если НЕ СтруктураШапкиДокумента.ПоОбособленномуПодразделению Тогда
			МассивНепроверяемыхРеквизитов.Добавить("ОбособленноеПодразделениеОрганизации");
		КонецЕсли;
	КонецЕсли;
	

	
	Если Товары.Итог("СуммаАкцизногоНалога")=0 Тогда
		МассивНепроверяемыхРеквизитов.Добавить("СчетУчетаАкцизногоНалога");
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Проверяет правильность заполнения строк табличной части "Товары".
// Параметры: 
//  ТаблицаПоТоварам        - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок,МассивНепроверяемыхРеквизитов)

	ИмяТабличнойЧасти = "Товары";
	
	Если НЕ СтруктураШапкиДокумента.ЕстьНДС Тогда
		МассивНепроверяемыхРеквизитов.Добавить("СтавкаНДС");
	КонецЕсли;
	
	НТТ = (ВидОперации = Перечисления.ВидыОперацийОтчетОРозничныхПродажах.ОтчетНТТОПродажах);
	
	НехозВНД_НДС = Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяНеХозДеятельность;
	НехозВНД_НП  = Справочники.НалоговыеНазначенияАктивовИЗатрат.НКУ_НеХозДеятельность;


	Если Отказ Тогда
		Возврат;
	КонецЕсли;

	
	РазрешитьУчетУслугБезПлановыхЦен = СтруктураШапкиДокумента.РазрешитьУчетУслугБезПлановыхЦен;
	
	Для Каждого СтрокаТЧ из ТаблицаПоТоварам Цикл

		СтрокаНачалаСообщенияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='В строке номер ""%1"" табличной части ""Товары"": ';uk='У рядку номер ""%1"" табличної частини ""Товари"": '"), СокрЛП(СтрокаТЧ.НомерСтроки));

		Если НЕ СтрокаТЧ.Услуга Тогда

			Если НЕ ЗначениеЗаполнено(СтрокаТЧ.СчетУчетаБУ) Тогда
				СтрокаСообщения = НСтр("ru='Не заполнено значение реквизита ""Счет учета (БУ)""!';uk='Не заповнене значення реквізиту ""Рахунок (БО)""!'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщения, ЭтотОбъект, "Товары["+(СтрокаТЧ.НомерСтроки-1)+"].СчетУчетаБУ", "Объект",Отказ);
			КонецЕсли;
			
		КонецЕсли; // Если НЕ СтрокаТЧ.Услуга Тогда
		
		Если НЕ СтрокаТЧ.Услуга И ЗначениеЗаполнено(СтрокаТЧ.СчетУчетаБУ) И НЕ СтрокаТЧ.СчетУчетаБУЗабалансовый И НТТ И СтруктураШапкиДокумента.УчетВПродажныхЦенах Тогда
					
			СтрокаСообщения = НСтр("ru='Указан собственный товар.
|При учете продажных ценах продажи собственных товаров в неавтоматизированной торговой точке 
|отражаются документом ""Приходный кассовый ордер""!';uk='Вказано власний товар.
|При обліку в продажних цінах продажі власних товарів у неавтоматизованій торговельній точці 
|відображаються документом ""Прибутковий касовий ордер""!'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщения, ЭтотОбъект, "Товары["+(СтрокаТЧ.НомерСтроки-1)+"].Номенклатура", "Объект",Отказ);
				
		КонецЕсли;
		
		Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыльДо2015 Тогда   
			
			Если НЕ ЗначениеЗаполнено(СтрокаТЧ.НалоговоеНазначениеДоходовИЗатрат) Тогда
				СтрокаСообщения = НСтр("ru='Не заполнено значение реквизита ""Налоговое назначение (доходов и затрат) ""!';uk='Не заповнене значення реквізиту ""Податкове призначення (доходів та витрат)""!'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщения, ЭтотОбъект, "Товары["+(СтрокаТЧ.НомерСтроки-1)+"].НалоговоеНазначениеДоходовИЗатрат", "Объект",Отказ);
			ИначеЕсли СтрокаТЧ.НалоговоеНазначениеДоходовИЗатрат = НехозВНД_НП Тогда 
				СтрокаСообщения = НСтр("ru='Указано некорректное налоговое назначение доходов! Вид налоговой деятельности при реализации не может быть ""Не хозяйственной деятельностью"".';uk='Вказано некоректне податкове призначення доходів! Вид податкової діяльності при реалізації не може бути ""Не господарською діяльністю"".'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщения, ЭтотОбъект, "Товары["+(СтрокаТЧ.НомерСтроки-1)+"].НалоговоеНазначениеДоходовИЗатрат", "Объект",Отказ);
			КонецЕсли;
			
		КонецЕсли;
			
		Если  НЕ БухгалтерскийУчетВызовСервераПовтИсп.КомиссионныйТовар(СтрокаТЧ.СчетУчетаБУ)
			И НЕ СтрокаТЧ.Услуга Тогда
				
			Если  СтруктураШапкиДокумента.ЕстьНДС Тогда
					
				Если НЕ ЗначениеЗаполнено(СтрокаТЧ.НалоговоеНазначение) Тогда
					
					СтрокаСообщения = НСтр("ru='Не заполнено значение реквизита ""Налоговое назначение (НДС)""!';uk='Не заповнене значення реквізиту ""Податкове призначення (ПДВ)""!'");
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщения, ЭтотОбъект, "Товары["+(СтрокаТЧ.НомерСтроки-1)+"].НалоговоеНазначение", "Объект",Отказ);
				ИначеЕсли СтрокаТЧ.НалоговоеНазначение = НехозВНД_НДС Тогда	
					
					СтрокаСообщения = НСтр("ru='Указано некорректное налоговое назначение (НДС)!  Вид налоговой деятельности при реализации не может быть ""Не хозяйственной деятельностью"".';uk='Вказано некоректне податкове призначення (ПДВ)! Вид податкової діяльності при реалізації не може бути ""Не господарською діяльністю"".'");
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщения, ЭтотОбъект, "Товары["+(СтрокаТЧ.НомерСтроки-1)+"].НалоговоеНазначение", "Объект",Отказ);
				Иначе
							     
					Если НЕ СтрокаТЧ.СтавкаНДС.Пустая()
					   И НЕ СтрокаТЧ.ВидДеятельностиНДС = Перечисления.ВидыДеятельностиНДС.ПропорциональноОблагаемая
					   И НЕ СтрокаТЧ.ВидДеятельностиНДС = УчетНДС.ПолучитьВидДеятельностиНДС(СтрокаТЧ.СтавкаНДС) Тогда
					   
					   Если СтруктураШапкиДокумента.ЕстьНДС Тогда
						   СтрокаСообщения = НСтр("ru='Указано некорректное налоговое назначение (НДС)! Оно  не соответствует ставке НДС, указанной в строке.';uk='Вказано некоректне податкове призначення (ПДВ)! Воно не відповідає ставці ПДВ, вказаній в рядку.'");
					   Иначе	
							   СтрокаСообщения = НСтр("ru='Указано некорректное налоговое назначение! Вид деятельности НДС должен быть ""Необлагаемая""';uk='Вказано некоректне податкове призначення! Вид діяльності ПДВ повинен бути ""Неоподатковувана""'");
					   КонецЕсли;
						   
  					   ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщения, ЭтотОбъект, "Товары["+(СтрокаТЧ.НомерСтроки-1)+"].НалоговоеНазначение", "Объект",Отказ);
					   
					КонецЕсли;
						
				КонецЕсли;
					
			КонецЕсли;
			
		КонецЕсли;
		
		
	КонецЦикла; // Для Каждого СтрокаТЧ из ТаблицаПоТоварам Цикл

	Если СтруктураШапкиДокумента.ВалютаДокумента <> мВалютаРегламентированногоУчета 
		ИЛИ (СтруктураШапкиДокумента.ЕстьНДС И Не СтруктураШапкиДокумента.СуммаВключаетНДС) Тогда
	    Если СтруктураШапкиДокумента.ТипСклада = Перечисления.ТипыСкладов.НеавтоматизированнаяТорговаяТочка Тогда
			ТекстСообщения = НСтр("ru='Документ не может осуществлять реализацию с неавтоматизированной торговой точки, 
|если выбрана валюта отличная от валюты регламентированного учета или НДС не включается в сумму.';uk='Документ не може здійснювати реалізацію з неавтоматизованої торговельної точки, 
|якщо обрано валюту відмінну від валюти регламентованого обліку або ПДВ не включається в суму.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, "Склад", "Объект",Отказ);
		КонецЕсли;
	КонецЕсли;


	// Схемы реализации должны быть заполнены правильно
	МассивРеквизитовДляПроверки = Новый Массив;
	МассивРеквизитовДляПроверки.Добавить("СчетДоходов");
	МассивРеквизитовДляПроверки.Добавить("СчетСебестоимости");
	МассивРеквизитовДляПроверки.Добавить("СчетВычетовИзДоходов");
	МассивРеквизитовДляПроверки.Добавить("СчетСебестоимостиПриВозврате");
														 
	БухгалтерскийУчет.ПроверитьСхемыРеализацииТабличнойЧастиНаЗаполненость(
			ЭтотОбъект, 
			"Товары", "Товары", 
			"СхемаРеализации", НСтр("ru='Схема реализации';uk='Схема реалізації'") , 
			МассивРеквизитовДляПроверки, 
			Отказ
		);
													 
														 
														 
КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиТовары()

Процедура ПроверитьЗаполнениеТабличнойЧастиОплата(ТаблицаОплата, СтруктураШапкиДокумента, Отказ, Заголовок,МассивНепроверяемыхРеквизитов)
	
	
	Если (СуммаДокумента < ТаблицаОплата.Итог("СуммаОплаты")) И (ТаблицаОплата.Итог("СуммаОплаты") > 0) Тогда
		Сообщить(НСтр("ru='Сумма оплат платежными картами больше суммы документа.';uk='Сума оплат платіжними картами більше суми документа.'"));
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

// На основании указанного в строке документа реализации
// подбираются партии, по которым будет отражать возврат.
// Сформированная таблица партий возвращается.
//
Функция СформироватьТаблицуВозвращенныхПартийБух(СчетУчета, Номенклатура, НалоговоеНазначение, ДокументОтгрузки, ВозвратКоличество, Отказ, Заголовок)
	
	ТаблицаВозвращенныхПартий = Новый ТаблицаЗначений;
	ТаблицаВозвращенныхПартий.Колонки.Добавить("Партия");
	ТаблицаВозвращенныхПартий.Колонки.Добавить("Количество");
	ТаблицаВозвращенныхПартий.Колонки.Добавить("СуммаСписания");
	ТаблицаВозвращенныхПартий.Колонки.Добавить("СуммаСписанияНУ");
	ТаблицаВозвращенныхПартий.Колонки.Добавить("Комиссионный");
	
	МассивВидовСубконто = Новый Массив;
	МассивВидовСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Регистратор",  ДокументОтгрузки);
	Запрос.УстановитьПараметр("СчетУчета",    СчетУчета);
	Запрос.УстановитьПараметр("Товар",        Номенклатура);
	Запрос.УстановитьПараметр("НалоговоеНазначение",        НалоговоеНазначение);
	Запрос.УстановитьПараметр("ВидыСубконто", МассивВидовСубконто);
	Запрос.УстановитьПараметр("Организация",  Организация); 
	
	
	Если БухгалтерскийУчетВызовСервераПовтИсп.НаСчетеВедетсяПартионныйУчет(СчетУчета) Тогда
		
		МассивВидовСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Партии);
		
		Запрос.Текст = "ВЫБРАТЬ
		|	ОборотыДтКт.СубконтоКт2 КАК Партия,
		|	ОборотыДтКт.СуммаОборот КАК Сумма,
		|	ОборотыДтКт.СуммаНУОборотКт КАК СуммаНУ,
		|	ОборотыДтКт.КоличествоОборотКт КАК Количество
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(, , Регистратор, , , СчетКт = &СчетУчета, &ВидыСубконто, СубконтоКт1 = &Товар И Организация =&Организация"+?(СчетУчета.НалоговыйУчет," И НалоговоеНазначениеКт = &НалоговоеНазначение", "")+") КАК ОборотыДтКт
		|
		|ГДЕ
		|	ОборотыДтКт.Регистратор = &Регистратор И
		|  (ОборотыДтКт.КоличествоОборотКт >= 0)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Количество УБЫВ";
		
	Иначе
		
		Запрос.Текст = "ВЫБРАТЬ
		|	NULL КАК Партия,
		|	ОборотыДтКт.СуммаОборот КАК Сумма,
		|	ОборотыДтКт.СуммаНУОборотКт КАК СуммаНУ,
		|	ОборотыДтКт.КоличествоОборотКт КАК Количество
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(, , Регистратор, , , СчетКт = &СчетУчета, &ВидыСубконто, СубконтоКт1 = &Товар И Организация =&Организация"+?(СчетУчета.НалоговыйУчет," И НалоговоеНазначениеКт = &НалоговоеНазначение", "")+") КАК ОборотыДтКт
		|
		|ГДЕ
		|	ОборотыДтКт.Регистратор = &Регистратор И
		|	(ОборотыДтКт.КоличествоОборотКт >= 0)
		|";
		
	КонецЕсли;
	
	ТаблицаДанных = Запрос.Выполнить().Выгрузить();
	ТаблицаДанных.Свернуть("Партия","Сумма,СуммаНУ,Количество");
	ТаблицаДанных.Сортировать("Количество Убыв");
	
	КоличествоНеПодобраноПартии = ВозвратКоличество;
	
	// Подберем партии, по которым отразим возврат
	Для каждого Партия Из ТаблицаДанных Цикл
		
		НоваяСтрока = ТаблицаВозвращенныхПартий.Добавить();
		НоваяСтрока.Партия = Партия.Партия;
		
		Если КоличествоНеПодобраноПартии > Партия.Количество Тогда
			
			НоваяСтрока.СуммаСписания   = Партия.Сумма;
			НоваяСтрока.СуммаСписанияНУ = Партия.СуммаНУ;
			НоваяСтрока.Количество      = Партия.Количество;
			КоличествоНеПодобраноПартии = КоличествоНеПодобраноПартии - Партия.Количество;
			
		Иначе
			
			НоваяСтрока.СуммаСписания   = Окр(Партия.Сумма * (КоличествоНеПодобраноПартии / Партия.Количество), 2);
			НоваяСтрока.СуммаСписанияНУ = Окр(Партия.СуммаНУ * (КоличествоНеПодобраноПартии / Партия.Количество), 2);
			НоваяСтрока.Количество      = КоличествоНеПодобраноПартии;
			КоличествоНеПодобраноПартии = 0;
			
		КонецЕсли;
		
		// Если подоброны партии для всего объема товара, то выходим из цикла
		Если КоличествоНеПодобраноПартии = 0 Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	// Если в документе указан документ реалазации по которому было отгружено больше,
	// чем возвращается, то эту разницу отнесем на пустую партию.
	Если КоличествоНеПодобраноПартии > 0 Тогда
		
		СообщенияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Бух. учет. Документом %1 было реализовано %2 на %3 ед. меньше, чем возвращается.';uk='Бух. облік. Документом %1 було реалізовано %2 на %3 од. менше, ніж повертається.'"), СокрЛП(ДокументОтгрузки), Номенклатура, КоличествоНеПодобраноПартии);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СообщенияОбОшибке, ЭтотОбъект, , ,Отказ);
		
	КонецЕсли;
	
	Комиссионный = БухгалтерскийУчетВызовСервераПовтИсп.КомиссионныйТовар(СчетУчета);
	ТаблицаВозвращенныхПартий.ЗаполнитьЗначения(Комиссионный, "Комиссионный");
	
	ТаблицаВозвращенныхПартий.Колонки.Добавить("СчетУчетаБУ");
	ТаблицаВозвращенныхПартий.ЗаполнитьЗначения(СчетУчета, "СчетУчетаБУ");
	
	Возврат ТаблицаВозвращенныхПартий;
	
КонецФункции // СформироватьТаблицуВозвращенныхПартий()

// Формируются проводки по отражаению возврата товаров
// 
Процедура ВозвратПартийТоваров(СтруктураШапкиДокумента, ТаблицаПоТоварамПараметр, Отказ, Заголовок)
	
	Перем ТаблицаПоТоварам;
	
	ТаблицаПоТоварам = ТаблицаПоТоварамПараметр.Скопировать();
	
	// нужно оставить только строки с возвратами. 
	УдаляемыеСтроки = Новый Массив;
	Для каждого СтрокаТаблицы Из ТаблицаПоТоварам Цикл
		Если (СтрокаТаблицы.Количество > 0) ИЛИ (СтрокаТаблицы.Услуга) Тогда
			УдаляемыеСтроки.Добавить(СтрокаТаблицы);
		Иначе
			СтрокаТаблицы.Количество = - СтрокаТаблицы.Количество;
		КонецЕсли;
	КонецЦикла;
	Для каждого СтрокаТаблицы Из УдаляемыеСтроки Цикл
		ТаблицаПоТоварам.Удалить(СтрокаТаблицы);
	КонецЦикла;
	
	Если ТаблицаПоТоварам.Количество()=0 Тогда
		Возврат;
	КонецЕсли; 
	
	// Теперь собственно проводим
	ПроводкиБУ = Движения.Хозрасчетный;
	
	ДатаДока = Дата;
	СкладПроводок = СтруктураШапкиДокумента.Склад;
	
	ТаблицаПоТоварам.Колонки.Добавить("СписанныеПартииБУ");
	
	//Установим управляемые блокировки
	Если ОбщегоНазначенияБПВызовСервераПовтИсп.ИспользоватьУправляемыеБлокировки() Тогда
		//Установим блокировку на движения регистратора
		СтруктураПараметров = Новый Структура("ТипТаблицы, ИмяТаблицы", "РегистрБухгалтерии", "Хозрасчетный.НаборЗаписей");
		ТаблицаДокументыПродажи = ТаблицаПоТоварам.Скопировать(, "ДокументПродажи");
		Для Каждого СтрокаТаблицыДокументыПродажи из ТаблицаДокументыПродажи Цикл
			Если НЕ ЗначениеЗаполнено(СтрокаТаблицыДокументыПродажи.ДокументПродажи) Тогда
				СтрокаТаблицыДокументыПродажи.ДокументПродажи = Ссылка;
			КонецЕсли;
		КонецЦикла;
		СтруктураПараметров.Вставить("ИсточникДанных", ТаблицаДокументыПродажи);
		ОписаниеИсточника = Новый Соответствие;
		ОписаниеИсточника.Вставить("Регистратор", "ДокументПродажи");
		
		ОбщегоНазначенияБПВызовСервера.УстановитьУправляемуюБлокировку(СтруктураПараметров, , ОписаниеИсточника);
		
	КонецЕсли;
	
	Для Каждого СтрокаТЧ Из ТаблицаПоТоварам Цикл
		
		ТаблицаВозвращенныхПартий =   СформироватьТаблицуВозвращенныхПартийБух(СтрокаТЧ.СчетУчетаБУ,
		                                                                    СтрокаТЧ.Номенклатура,
		                                                                    СтрокаТЧ.НалоговоеНазначение,
		                                                                    ?(ЗначениеЗаполнено(СтрокаТЧ.ДокументПродажи), СтрокаТЧ.ДокументПродажи, Ссылка),
		                                                                    СтрокаТЧ.Количество,
		                                                                    Отказ, Заголовок);
		СтрокаТЧ.СписанныеПартииБУ = ТаблицаВозвращенныхПартий;
		
		Если Не Отказ Тогда
			
			НеПогашеннаяСтоимость = - СтрокаТЧ.ПроводкиСуммаСНДСРегл;
			
			Для каждого Партия Из ТаблицаВозвращенныхПартий Цикл
				
				Проводка = ПроводкиБУ.Добавить();
				
				Проводка.Период       = ДатаДока;
				Проводка.Активность   = Истина;
				Проводка.Организация  = СтруктураШапкиДокумента.Организация;
				Проводка.Содержание   = НСтр("ru='Возврат товаров от покупателя';uk='Повернення товарів від покупця'",Локализация.КодЯзыкаИнформационнойБазы());
				Проводка.Сумма        = - Партия.СуммаСписания;
				
				Если НЕ БухгалтерскийУчетВызовСервераПовтИсп.КомиссионныйТовар(СтрокаТЧ.СчетУчетаБУ) Тогда
					
					Проводка.СчетДт       = СтрокаТЧ.СчетВычетовИзРасходовБУ;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтрокаТЧ.СубконтоВычетовИзРасходовБУ1);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, СтрокаТЧ.СубконтоВычетовИзРасходовБУ2);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, СтрокаТЧ.СубконтоВычетовИзРасходовБУ3);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "НоменклатурныеГруппы", СтрокаТЧ.НоменклатурнаяГруппа);
					
					Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыльДо2015 Тогда
						Проводка.НалоговоеНазначениеДт = СтрокаТЧ.НалоговоеНазначениеДоходовИЗатрат;
						Проводка.СуммаНУДт = - Партия.СуммаСписанияНУ;
					КонецЕсли;
					
				КонецЕсли;
				
				Проводка.СчетКт       = СтрокаТЧ.СчетУчетаБУ;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт, "Номенклатура", СтрокаТЧ.Номенклатура);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт, "Склады",       СкладПроводок);
				Если (СтруктураШапкиДокумента.ВедетсяПартионныйУчетБУ) ИЛИ (БухгалтерскийУчетВызовСервераПовтИсп.КомиссионныйТовар(СтрокаТЧ.СчетУчетаБУ)) Тогда 
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт, "Партии",       Партия.Партия);
				КонецЕсли;	
				
				Проводка.КоличествоКт = -Партия.Количество;
				
				Проводка.НалоговоеНазначениеКт = СтрокаТЧ.НалоговоеНазначение;				
				Проводка.СуммаНУКт = - Партия.СуммаСписанияНУ;				
				
				// Возможно, нужно откорректировать наценку
				Если СтруктураШапкиДокумента.УчетВПродажныхЦенах И НЕ БухгалтерскийУчетВызовСервераПовтИсп.КомиссионныйТовар(СтрокаТЧ.СчетУчетаБУ) Тогда
					
					Если ТаблицаВозвращенныхПартий.Количество() - 1 = ТаблицаВозвращенныхПартий.Индекс(Партия) Тогда
						// последняя партия
						СтоимостьВПродажныхЦенах = НеПогашеннаяСтоимость;
					Иначе						
						СтоимостьВПродажныхЦенах = - (Партия.Количество/СтрокаТЧ.Количество)*СтрокаТЧ.ПроводкиСуммаСНДСРегл;
					КонецЕсли; 
					
					Если    (СтоимостьВПродажныхЦенах - Партия.СуммаСписания  <> 0)
						ИЛИ ((СтоимостьВПродажныхЦенах - Партия.СуммаСписанияНУ  <> 0) И СтруктураШапкиДокумента.ЕстьНалогНаПрибыльДо2015) Тогда
						
						// нужно начислить наценку
						Проводка = ПроводкиБУ.Добавить();
						
						Проводка.Период       = ДатаДока;
						Проводка.Активность   = Истина;
						Проводка.Организация  = СтруктураШапкиДокумента.Организация;
						Проводка.Содержание   = НСтр("ru='Начисление наценки';uk='Нарахування націнки'",Локализация.КодЯзыкаИнформационнойБазы());
						Проводка.Сумма        = СтоимостьВПродажныхЦенах - Партия.СуммаСписания;
						
						Проводка.СчетДт       = СтрокаТЧ.СчетУчетаБУ;
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт, "Номенклатура", СтрокаТЧ.Номенклатура);
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт, "Склады",       СкладПроводок);
						Если (СтруктураШапкиДокумента.ВедетсяПартионныйУчетБУ) Тогда 
							БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт, "Партии",       Партия.Партия);
						КонецЕсли;
					
						Проводка.СчетКт       = ПланыСчетов.Хозрасчетный.ТорговаяНаценкаАТТ;
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт, "Номенклатура", СтрокаТЧ.Номенклатура);
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт, "Склады",       СкладПроводок);
						Если (СтруктураШапкиДокумента.ВедетсяПартионныйУчетБУ) Тогда 
							БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт, "Партии",       Партия.Партия);
						КонецЕсли;
						
						Проводка.НалоговоеНазначениеДт = СтрокаТЧ.НалоговоеНазначение;
						Проводка.НалоговоеНазначениеКт = СтрокаТЧ.НалоговоеНазначение;
						Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыльДо2015 Тогда
							Проводка.СуммаНУДт = СтоимостьВПродажныхЦенах - Партия.СуммаСписанияНУ;
							Проводка.СуммаНУКт = СтоимостьВПродажныхЦенах - Партия.СуммаСписанияНУ;
						КонецЕсли;	
						
					КонецЕсли; 
					
					НеПогашеннаяСтоимость = НеПогашеннаяСтоимость - СтоимостьВПродажныхЦенах;
				КонецЕсли; 
					
			КонецЦикла; // Для каждого Партия Из ТаблицаВозвращенныхПартий Цикл
			
		КонецЕсли; // Если Не Отказ Тогда
				
	КонецЦикла; // Для Каждого СтрокаТЧ Из ТаблицаПоТоварам Цикл
	
Конецпроцедуры

Процедура ДвиженияПоРегистрамНалоговогоУчета(СтруктураШапкиДокумента, ТаблицаПоТоварам, Отказ)
	
	Если Не СтруктураШапкиДокумента.ЕстьНДС Тогда
		// Если не нужно отражать в налоговом учете, тогда не отражаем и в подсистеме учета НДС
		Возврат;
	КонецЕсли;
	
	Если НЕ СтруктураШапкиДокумента.УчетВПродажныхЦенах
		И СтруктураШапкиДокумента.Склад.ТипСклада = Перечисления.ТипыСкладов.НеавтоматизированнаяТорговаяТочка Тогда
		// движения сформировал ПКО
		Возврат;
	КонецЕсли;
	
	НаборДвижений = Движения.ОжидаемыйИПодтвержденныйНДСПродаж;
	
	ТаблицаДвижений = НаборДвижений.ВыгрузитьКолонки();
			
	ТаблицаВыручки = ТаблицаПоТоварам.Скопировать();
	ТаблицаВыручки.Свернуть("РасчетыВозврат,СтавкаНДС,СчетУчетаНДС","ПроводкиСуммаБезНДСРегл,ПроводкиСуммаНДСРегл");					
	
	ТаблицаВыручки.Колонки.ПроводкиСуммаБезНДСРегл.Имя 	= "БазаНДС";
	ТаблицаВыручки.Колонки.ПроводкиСуммаНДСРегл.Имя 	= "СуммаНДС";
	
	ТаблицаВыручки.Колонки.Добавить("СобытиеНДС", Новый ОписаниеТипов("ПеречислениеСсылка.СобытияОжидаемыйИПодтвержденныйНДСПродаж"));
	Для каждого СтрокаВыручки Из ТаблицаВыручки Цикл
		
		Если СтрокаВыручки.РасчетыВозврат = Перечисления.РасчетыВозврат.Возврат Тогда
			СтрокаВыручки.СуммаНДС 	 = -СтрокаВыручки.СуммаНДС; 
			СтрокаВыручки.БазаНДС 	 = -СтрокаВыручки.БазаНДС;
			СтрокаВыручки.СобытиеНДС = Перечисления.СобытияОжидаемыйИПодтвержденныйНДСПродаж.ВозвратРозница;
		Иначе
			СтрокаВыручки.СобытиеНДС = Перечисления.СобытияОжидаемыйИПодтвержденныйНДСПродаж.РеализацияРозница;
		КонецЕсли;
		
	КонецЦикла; 
	
	ОбщегоНазначенияБПВызовСервера.ЗагрузитьВТаблицуЗначений(ТаблицаВыручки, ТаблицаДвижений);
	
	ТаблицаДвижений.ЗаполнитьЗначения(Организация , "Организация");
	ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.КодыОперацийОжидаемыйИПодтвержденныйНДСПродаж.ОжидаемыйНДС, "КодОперации");
	
	Если НЕ Отказ И ТаблицаДвижений.Количество() > 0 Тогда
		
		НаборДвижений.мПериод          = Дата;
		НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;
		
		Движения.ОжидаемыйИПодтвержденныйНДСПродаж.ВыполнитьПриход();
		Движения.ОжидаемыйИПодтвержденныйНДСПродаж.Записать();
		
	КонецЕсли;

КонецПроцедуры

Процедура ДвиженияПоЕдиномуНалогу(СтруктураШапкиДокумента, ТаблицаПоТоварам, Отказ)
	
	Если НЕ СтруктураШапкиДокумента.ЕстьЕдиныйНалог
		 ИЛИ НЕ ЗначениеЗаполнено(СтруктураШапкиДокумента.СтатьяДекларацииПоЕдиномуНалогу) Тогда
		Возврат;
	КонецЕсли;	
	
	Если СтруктураШапкиДокумента.ЕстьНДС Тогда
		СуммаДвижения = ТаблицаПоТоварам.Итог("ПроводкиСуммаБезНДСРегл");
	Иначе
		СуммаДвижения = ТаблицаПоТоварам.Итог("ПроводкиСуммаСНДСРегл");
	КонецЕсли;
	
	Строка = Движения.КнигаДоходовРасходовПоЕдиномуНалогу.Добавить();
	Строка.Период     	  = Дата;
		
	Строка.Организация    = Организация;
	Строка.Статья    	  = СтруктураШапкиДокумента.СтатьяДекларацииПоЕдиномуНалогу;
		
	Строка.Сумма    	  = СуммаДвижения;

	Строка.НомерПлатежногоДокумента = НалоговыйУчет.НомерДокументаДляЕдиногоНалога(СтруктураШапкиДокумента);

КонецПроцедуры

Процедура ДвиженияРозничныеПродажиПодакцизныхТоваров(СтруктураШапкиДокумента, ТаблицаПоТоварам, Отказ)
	
	Если НЕ (СтруктураШапкиДокумента.Дата >= '2015 01 01') Тогда
		// в 2014 движения не нужны
		Возврат;
	КонецЕсли; 
	
	НаборДвижений = Движения.РозничныеПродажиПодакцизныхТоваров;
	
	ТаблицаДвижений = НаборДвижений.ВыгрузитьКолонки();
	
	ТаблицаАкцизныйНалог = ТаблицаПоТоварам.Скопировать();
	// возвраты свернутся с продажами по статьям
	ТаблицаАкцизныйНалог.Свернуть("СтатьяДекларацииПоАкцизномуНалогу,ПодакцизныеТоварыДляКоммерческогоИспользования","ПроводкиСуммаАкцизногоНалогаРегл,ПроводкиСуммаСНДСРегл");
	
	ТаблицаАкцизныйНалог.Колонки.ПодакцизныеТоварыДляКоммерческогоИспользования.Имя 	= "ДляКоммерческогоИспользования";
	ТаблицаАкцизныйНалог.Колонки.ПроводкиСуммаСНДСРегл.Имя 	= "БазаАкцизногоНалога";
	ТаблицаАкцизныйНалог.Колонки.ПроводкиСуммаАкцизногоНалогаРегл.Имя 	= "СуммаАкцизногоНалога";
	
	// удаляем строки без статьи (товары не подакцизные)
	Индекс = 0;

	Пока Индекс < ТаблицаАкцизныйНалог.Количество() Цикл

		СтрокаТаблицы = ТаблицаАкцизныйНалог.Получить(Индекс);

		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.СтатьяДекларацииПоАкцизномуНалогу) Тогда
			ТаблицаАкцизныйНалог.Удалить(СтрокаТаблицы);
		Иначе
			Индекс = Индекс + 1;
		КонецЕсли;

	КонецЦикла;
	
	ТаблицаАкцизныйНалог.Колонки.Добавить("Склад", Новый ОписаниеТипов("СправочникСсылка.Склады"));
	ТаблицаАкцизныйНалог.ЗаполнитьЗначения(СтруктураШапкиДокумента.Склад,"Склад");
	
	ОбщегоНазначенияБПВызовСервера.ЗагрузитьВТаблицуЗначений(ТаблицаАкцизныйНалог, ТаблицаДвижений);
	ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.Дата, "Период");
	ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.Организация, "Организация");
	ТаблицаДвижений.ЗаполнитьЗначения(Истина, "Активность");
	
	НаборДвижений.мПериод 			= СтруктураШапкиДокумента.Дата;
	НаборДвижений.мТаблицаДвижений 	= ТаблицаДвижений;
	НаборДвижений.ВыполнитьДвижения();
	
КонецПроцедуры

Процедура ДвиженияПоРаспределениюОплат(СтруктураШапкиДокумента, ТаблицаОплата)
	
	Если ТаблицаОплата.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.Склад.ТипСклада = Перечисления.ТипыСкладов.НеавтоматизированнаяТорговаяТочка Тогда
		Возврат;
	КонецЕсли;
	
	СчетКт       = ПланыСчетов.Хозрасчетный.РасчетыСРозничнымиПокупателями;
	СчетНаличные = СтруктураШапкиДокумента.СчетКасса;
	ПроводкиБУ   = Движения.Хозрасчетный;
	ДатаДока     = Дата;
	
	Для Каждого СтрокаТаблицы Из ТаблицаОплата Цикл
		
		Если СтрокаТаблицы.СуммаОплаты = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Проводка = ПроводкиБУ.Добавить();
        Проводка.Период      = ДатаДока;
		Проводка.Организация = СтруктураШапкиДокумента.Организация;
		Проводка.Сумма       = СтрокаТаблицы.СуммаОплаты;
		
		Если СтрокаТаблицы.ВидОплаты.ТипОплаты = Перечисления.ТипыОплат.Наличные Тогда
			Проводка.СчетДт = СчетНаличные;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "СтатьиДвиженияДенежныхСредств", СтруктураШапкиДокумента.СтатьяДвиженияДенежныхСредств);
			Если СтруктураШапкиДокумента.ВедетсяУчетДенежныхСредствПоОбособленнымПодразделениям Тогда
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ОбособленныеПодразделенияБезОбразованияЮрЛица", ОбособленноеПодразделениеОрганизации);
			КонецЕсли;
			Проводка.Содержание = НСтр("ru='Реализация товаров в розницу за наличную оплату';uk='Реалізація товарів у роздріб за готівкову оплату'");
			
		ИначеЕсли СтрокаТаблицы.ВидОплаты.ТипОплаты = Перечисления.ТипыОплат.БанковскийКредит Тогда
			Проводка.СчетДт = СтрокаТаблицы.СчетДеньгиВПути;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты", СтрокаТаблицы.Контрагент);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Договоры", СтрокаТаблицы.ДоговорКонтрагента);
			Проводка.Содержание = НСтр("ru='Реализация в розницу товаров, оплаченных банковским кредитом';uk='Реалізація в роздріб товарів, оплачених банківським кредитом'");
			
		ИначеЕсли СтрокаТаблицы.ВидОплаты.ТипОплаты = Перечисления.ТипыОплат.ПлатежнаяКарта Тогда
			Проводка.СчетДт = СтрокаТаблицы.СчетДеньгиВПути;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты", СтрокаТаблицы.Контрагент);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Договоры", СтрокаТаблицы.ДоговорКонтрагента);
			Проводка.Содержание = НСтр("ru='Реализация в розницу товаров, оплаченных платежной картой';uk='Реалізація в роздріб товарів, оплачених платіжною картою'");
			
		КонецЕсли;
		
		Проводка.СчетКт = СчетКт;		
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Склады", СтруктураШапкиДокумента.Склад);
		
	КонецЦикла;
	
	НаличнаяОплата = УчетНДС.ПолучитьСуммуДокументаСНДС(ЭтотОбъект, "Товары") + ?(СтруктураШапкиДокумента.ЕстьНДС И НЕ СтруктураШапкиДокумента.СуммаВключаетНДС, Товары.Итог("СуммаАкцизногоНалога"), 0) - ТаблицаОплата.Итог("СуммаОплаты");
	
	Если НаличнаяОплата <> 0 Тогда
		Проводка = ПроводкиБУ.Добавить();
        Проводка.Период      = ДатаДока;
		Проводка.Организация = СтруктураШапкиДокумента.Организация;
		Проводка.Сумма       = НаличнаяОплата;
		Проводка.СчетДт = СчетНаличные;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "СтатьиДвиженияДенежныхСредств", СтруктураШапкиДокумента.СтатьяДвиженияДенежныхСредств);
		Если СтруктураШапкиДокумента.ВедетсяУчетДенежныхСредствПоОбособленнымПодразделениям Тогда
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ОбособленныеПодразделенияБезОбразованияЮрЛица", ОбособленноеПодразделениеОрганизации);
		КонецЕсли;
		Проводка.Содержание = НСтр("ru='Реализация товаров в розницу за наличную оплату';uk='Реалізація товарів у роздріб за готівкову оплату'");
		Проводка.СчетКт = СчетКт;		
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Склады", СтруктураШапкиДокумента.Склад);
	КонецЕсли;
	
КонецПроцедуры

// По результату запроса по шапке документа формируем движения по регистрам.
//
// Параметры: 
//  РежимПроведения           - режим проведения документа (оперативный или неоперативный),
//  СтруктураШапкиДокумента   - выборка из результата запроса по шапке документа,
//  ТаблицаПоТоварам          - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаОплата, Отказ, Заголовок);

	// Формирование бухгалтерских проводок

	// По некоторым регистрам услуги проводить не нужно.
	// Подготовим отдельную таблицу.
	ТаблицаПоТоварамБезУслугИВозвратов = ТаблицаПоТоварам.Скопировать();

	Индекс = 0;

	Пока Индекс < ТаблицаПоТоварамБезУслугИВозвратов.Количество() Цикл

		СтрокаТаблицы = ТаблицаПоТоварамБезУслугИВозвратов.Получить(Индекс);

		Если СтрокаТаблицы.Услуга ИЛИ СтрокаТаблицы.РасчетыВозврат = Перечисления.РасчетыВозврат.Возврат Тогда
			ТаблицаПоТоварамБезУслугИВозвратов.Удалить(СтрокаТаблицы);
		Иначе
			Индекс = Индекс + 1;
		КонецЕсли;

	КонецЦикла;
	
	ТаблицаПоУслугам = ТаблицаПоТоварам.Скопировать();
	Если ТаблицаПоТоварамБезУслугИВозвратов.Количество()< ТаблицаПоТоварам.Количество() тогда
		Индекс = 0;

		Пока Индекс < ТаблицаПоУслугам.Количество() Цикл

			СтрокаТаблицы = ТаблицаПоУслугам.Получить(Индекс);

			Если СтрокаТаблицы.Услуга Тогда
				Индекс = Индекс + 1;
			Иначе
				ТаблицаПоУслугам.Удалить(СтрокаТаблицы);
			КонецЕсли;

		КонецЦикла;
	Иначе
		ТаблицаПоУслугам.Очистить();
	КонецЕсли;

	// Списание товаров по партиям со склада.
	УправлениеЗапасамиПартионныйУчет.ДвижениеПартийТоваров(ТаблицаПоТоварамБезУслугИВозвратов, Отказ);
	
	ПереоценкаАТТВПродажныхЦенах(СтруктураШапкиДокумента, ТаблицаПоТоварамБезУслугИВозвратов);

	//Обработка возврата для тех строк, в которых отрицательное количество
	// для корректной обработки возврата в ту же кассовую смену.
	Движения.Хозрасчетный.ВыполнитьДействияПередЗаписьюДвижений();
	Движения.Хозрасчетный.Записать();
	ВозвратПартийТоваров(СтруктураШапкиДокумента, ТаблицаПоТоварам, Отказ, Заголовок);

	ПроводкиБУ   = Движения.Хозрасчетный;
	
	// В случе НТТ в продажных ценах - проводится только списание партий комиссионных товаров 
	// и сторнирование движений ПКО по приему розничной выручки в плане списания себестоимости, списниая налоговых партий и валовых доходов
	// по продажам комиссионных товаров.
	Если СтруктураШапкиДокумента.УчетВПродажныхЦенах И СтруктураШапкиДокумента.ТипСклада = Перечисления.ТипыСкладов.НеавтоматизированнаяТорговаяТочка Тогда
		Для каждого Строка Из ТаблицаПоТоварам Цикл
			
			// сторно проводки по себестоимости (списание товаров по продажным ценам)
			Проводка = ПроводкиБУ.Добавить();
			Проводка.Период      = Дата;
			Проводка.Организация = Организация;
			Проводка.Содержание  = НСтр("ru='Сторно отражения продажи товаров';uk='Сторно віддображення продажу товарів'",Локализация.КодЯзыкаИнформационнойБазы());
			
			Проводка.СчетДт      = Строка.КорСчетСписанияБУ;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1,  Строка.КорСубконтоСписанияБУ1);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2,  Строка.КорСубконтоСписанияБУ2);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3,  Строка.КорСубконтоСписанияБУ3);
			
			Проводка.СчетКт      = ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахНТТ;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "СтавкиНДС",  Строка.СтавкаНДС);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Склады",  СтруктураШапкиДокумента.Склад);
			
			Проводка.Сумма       = -Строка.ПроводкиСуммаСНДСРегл;
			Проводка.НалоговоеНазначениеКт = Строка.НалоговоеНазначение;
			
			Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыльДо2015 Тогда
				Проводка.НалоговоеНазначениеДт = Строка.НалоговоеНазначениеДоходовИЗатрат;
				Если НЕ Строка.НалоговоеНазначение = Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяНеХозДеятельность Тогда
					
					Проводка.СуммаНУДт = Проводка.Сумма;
					Проводка.СуммаНУКт = Проводка.Сумма;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Возврат;
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ДатаДока     = Дата;
	
	Если НЕ СтруктураШапкиДокумента.УчетВПродажныхЦенах И СтруктураШапкиДокумента.Склад.ТипСклада = Перечисления.ТипыСкладов.НеавтоматизированнаяТорговаяТочка Тогда
		СчетДт = СтруктураШапкиДокумента.СчетДоходовРозничныхПродаж;	
		СчетКт = СтруктураШапкиДокумента.СчетВычетаИзДоходовРозничныхПродаж;
	Иначе
		СчетДт = СтруктураШапкиДокумента.СчетКасса;
		СчетКт = СтруктураШапкиДокумента.СчетКасса
	КонецЕсли;
	
	Если ТаблицаОплата.Количество() = 0 ИЛИ (НЕ СтруктураШапкиДокумента.УчетВПродажныхЦенах И СтруктураШапкиДокумента.Склад.ТипСклада = Перечисления.ТипыСкладов.НеавтоматизированнаяТорговаяТочка) Тогда
		СчетОтраженияДоходов 		 = СчетДт;
		СчетОтраженияВычетаИзДоходов = СчетКт;
	Иначе
		СчетОтраженияДоходов 		 = ПланыСчетов.Хозрасчетный.РасчетыСРозничнымиПокупателями;
		СчетОтраженияВычетаИзДоходов = ПланыСчетов.Хозрасчетный.РасчетыСРозничнымиПокупателями;
	КонецЕсли;
	
	
	/////////////////////////////////////////////////////////////////////
	// Записи по выручке.
	
	Для каждого СтрокаТаблицы Из ТаблицаПоТоварам Цикл
			
		// Выручка
		Если НЕ СтруктураШапкиДокумента.УчетВПродажныхЦенах И СтруктураШапкиДокумента.Склад.ТипСклада = Перечисления.ТипыСкладов.НеавтоматизированнаяТорговаяТочка Тогда
			СуммаВыручки 	= СтрокаТаблицы.ПроводкиСуммаБезНДСРегл + СтрокаТаблицы.ПроводкиСуммаАкцизногоНалогаРегл;
			СуммаНДС		= 0; // проводка по НДС в этом случае не нужна 
		Иначе
			СуммаВыручки 	= СтрокаТаблицы.ПроводкиСуммаСНДСРегл + СтрокаТаблицы.ПроводкиСуммаАкцизногоНалогаРегл;
			СуммаНДС		= СтрокаТаблицы.ПроводкиСуммаНДСРегл;
		КонецЕсли; 
		Если СуммаВыручки = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрокаТаблицы.РасчетыВозврат = Перечисления.РасчетыВозврат.Расчеты Тогда
		
			Проводка = ПроводкиБУ.Добавить();
				
			Проводка.Период          = Дата;
			Проводка.Активность      = Истина;
			Проводка.Организация     = СтруктураШапкиДокумента.Организация;
			Проводка.Сумма           = СуммаВыручки;
			Проводка.Содержание      = НСтр("ru='Доход от продаж в рознице';uk='Дохід від продажів у роздробі'",Локализация.КодЯзыкаИнформационнойБазы());
			Проводка.НомерЖурнала    = "";
				
			Проводка.СчетКт         = СтрокаТаблицы.СчетДоходовБУ;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, СтрокаТаблицы.СубконтоДоходовБУ1);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, СтрокаТаблицы.СубконтоДоходовБУ2);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3, СтрокаТаблицы.СубконтоДоходовБУ3);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "НоменклатурныеГруппы", СтрокаТаблицы.НоменклатурнаяГруппа);
			
			Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыльДо2015 Тогда
				Проводка.НалоговоеНазначениеКт = СтрокаТаблицы.НалоговоеНазначениеДоходовИЗатрат;
				Проводка.СуммаНУКт = СуммаВыручки;
			КонецЕсли;
			
			Проводка.СчетДт          = СчетОтраженияДоходов;
			
			// Попытаемся установить субконто "Статья доходов" для транзитного счета 709х
			Если НЕ (Проводка.СчетКт.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиДоходов, "ВидСубконто") = Неопределено) И
				 НЕ (Проводка.СчетДт.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиДоходов, "ВидСубконто") = Неопределено) Тогда
				   
			   БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "СтатьиДоходов", Проводка.СубконтоКт.СтатьиДоходов);
				
		    КонецЕсли; 
		   
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Склады", СтруктураШапкиДокумента.Склад);
			
			Если НЕ (СтруктураШапкиДокумента.Склад.ТипСклада = Перечисления.ТипыСкладов.НеавтоматизированнаяТорговаяТочка) Тогда
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "СтатьиДвиженияДенежныхСредств", СтатьяДвиженияДенежныхСредств);
				
				Если СтруктураШапкиДокумента.ВедетсяУчетДенежныхСредствПоОбособленнымПодразделениям Тогда
					
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ОбособленныеПодразделенияБезОбразованияЮрЛица", ОбособленноеПодразделениеОрганизации);
					
				КонецЕсли;
				
			КонецЕсли;

		Иначе
			
			Проводка = ПроводкиБУ.Добавить();
				
			Проводка.Период          = Дата;
			Проводка.Активность      = Истина;
			Проводка.Организация     = СтруктураШапкиДокумента.Организация;
			Проводка.Сумма           = - СуммаВыручки;
			Проводка.Содержание      = НСтр("ru='Вычет из доходов от продаж в рознице (возврат)';uk='Відрахування з доходів від продажів у роздробі (повернення)'",Локализация.КодЯзыкаИнформационнойБазы());
			Проводка.НомерЖурнала    = "";
				
			Проводка.СчетДт         = СтрокаТаблицы.СчетВычетовИзДоходовБУ;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтрокаТаблицы.СубконтоВычетовИзДоходовБУ1);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, СтрокаТаблицы.СубконтоВычетовИзДоходовБУ2);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, СтрокаТаблицы.СубконтоВычетовИзДоходовБУ3);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "НоменклатурныеГруппы", СтрокаТаблицы.НоменклатурнаяГруппа);
			
			Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыльДо2015 Тогда
				Проводка.НалоговоеНазначениеДт = СтрокаТаблицы.НалоговоеНазначениеДоходовИЗатрат;
				Проводка.СуммаНУДт = - СуммаВыручки;
			КонецЕсли;
			
			Проводка.СчетКт          = СчетОтраженияВычетаИзДоходов;
			// Попытаемся установить субконто "Статья доходов" для транзитного счета 709х
			Если НЕ (Проводка.СчетКт.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиДоходов, "ВидСубконто") = Неопределено) И
				 НЕ (Проводка.СчетДт.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиДоходов, "ВидСубконто") = Неопределено) Тогда
				   
			   БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "СтатьиДоходов", Проводка.СубконтоДт.СтатьиДоходов);
				
		   КонецЕсли;
		   
		   Если НЕ (Проводка.СчетКт.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады, "ВидСубконто") = Неопределено) Тогда
				   
			   БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Склады", Склад);
				
		   КонецЕсли;
		   
		   Если НЕ (СтруктураШапкиДокумента.Склад.ТипСклада = Перечисления.ТипыСкладов.НеавтоматизированнаяТорговаяТочка) Тогда
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "СтатьиДвиженияДенежныхСредств", СтатьяДвиженияДенежныхСредств);
				
				Если СтруктураШапкиДокумента.ВедетсяУчетДенежныхСредствПоОбособленнымПодразделениям Тогда
					
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОбособленныеПодразделенияБезОбразованияЮрЛица", ОбособленноеПодразделениеОрганизации);
					
				КонецЕсли;
				
			КонецЕсли;

		КонецЕсли; 
			
		// НДС - вычет из дохода
		Если НЕ СуммаНДС = 0 Тогда
		
			Проводка = ПроводкиБУ.Добавить();
			Проводка.Период       = Дата;
			Проводка.Организация  = СтруктураШапкиДокумента.Организация;
			Если СтрокаТаблицы.РасчетыВозврат = Перечисления.РасчетыВозврат.Расчеты Тогда
				
				Проводка.Содержание   = НСтр("ru='НДС';uk='ПДВ'",Локализация.КодЯзыкаИнформационнойБазы());
				Проводка.Сумма        = СуммаНДС; 

				Проводка.СчетДт       = СтрокаТаблицы.СчетДоходовБУ;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтрокаТаблицы.СубконтоДоходовБУ1);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, СтрокаТаблицы.СубконтоДоходовБУ2);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, СтрокаТаблицы.СубконтоДоходовБУ3);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "НоменклатурныеГруппы", СтрокаТаблицы.НоменклатурнаяГруппа);
			
				Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыльДо2015 Тогда
					Проводка.НалоговоеНазначениеДт = СтрокаТаблицы.НалоговоеНазначениеДоходовИЗатрат;
					Проводка.СуммаНУДт = СуммаНДС;
				КонецЕсли;
				
				Проводка.СчетКт       = СтрокаТаблицы.СчетУчетаНДС;
				
			Иначе
				//возврат
				
				Проводка.Содержание   = НСтр("ru='НДС (возврат)';uk='ПДВ (повернення)'",Локализация.КодЯзыкаИнформационнойБазы());
				Проводка.Сумма        = СуммаНДС; //сумма отрицательная

				Проводка.СчетДт       = СтрокаТаблицы.СчетВычетовИзДоходовБУ;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтрокаТаблицы.СубконтоВычетовИзДоходовБУ1);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, СтрокаТаблицы.СубконтоВычетовИзДоходовБУ2);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, СтрокаТаблицы.СубконтоВычетовИзДоходовБУ3);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "НоменклатурныеГруппы", СтрокаТаблицы.НоменклатурнаяГруппа);
				
				Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыльДо2015 Тогда
					Проводка.НалоговоеНазначениеДт = СтрокаТаблицы.НалоговоеНазначениеДоходовИЗатрат;
					Проводка.СуммаНУДт = СуммаНДС;
				КонецЕсли;
				
				Проводка.СчетКт       = СтрокаТаблицы.СчетУчетаНДС;
				
			КонецЕсли;
			
		КонецЕсли;
		
		// Акцизный налог - вычет из дохода
		Если НЕ СтрокаТаблицы.ПроводкиСуммаАкцизногоНалогаРегл = 0 Тогда
		
			Проводка = ПроводкиБУ.Добавить();
			Проводка.Период       = Дата;
			Проводка.Организация  = СтруктураШапкиДокумента.Организация;
			Если СтрокаТаблицы.РасчетыВозврат = Перечисления.РасчетыВозврат.Расчеты Тогда
				
				Проводка.Содержание   = НСтр("ru='Акцизный налог';uk='Акцизний податок'",Локализация.КодЯзыкаИнформационнойБазы());
				Проводка.Сумма        = СтрокаТаблицы.ПроводкиСуммаАкцизногоНалогаРегл; 

				Проводка.СчетДт       = СтрокаТаблицы.СчетДоходовБУ;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтрокаТаблицы.СубконтоДоходовБУ1);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, СтрокаТаблицы.СубконтоДоходовБУ2);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, СтрокаТаблицы.СубконтоДоходовБУ3);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "НоменклатурныеГруппы", СтрокаТаблицы.НоменклатурнаяГруппа);
			
				Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыльДо2015 Тогда
					Проводка.НалоговоеНазначениеДт = СтрокаТаблицы.НалоговоеНазначениеДоходовИЗатрат;
					Проводка.СуммаНУДт = Проводка.Сумма;
				КонецЕсли;
				
				Проводка.СчетКт       = СтруктураШапкиДокумента.СчетУчетаАкцизногоНалога;
				
			Иначе
				//возврат
				
				Проводка.Содержание   = НСтр("ru='Акцизный налог (возврат)';uk='Акцизний податок (повернення)'",Локализация.КодЯзыкаИнформационнойБазы());
				Проводка.Сумма        = СтрокаТаблицы.ПроводкиСуммаАкцизногоНалогаРегл; //сумма отрицательная

				Проводка.СчетДт       = СтрокаТаблицы.СчетВычетовИзДоходовБУ;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтрокаТаблицы.СубконтоВычетовИзДоходовБУ1);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, СтрокаТаблицы.СубконтоВычетовИзДоходовБУ2);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, СтрокаТаблицы.СубконтоВычетовИзДоходовБУ3);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "НоменклатурныеГруппы", СтрокаТаблицы.НоменклатурнаяГруппа);
				
				Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыльДо2015 Тогда
					Проводка.НалоговоеНазначениеДт = СтрокаТаблицы.НалоговоеНазначениеДоходовИЗатрат;
					Проводка.СуммаНУДт = Проводка.Сумма;
				КонецЕсли;
				
				Проводка.СчетКт       = СтруктураШапкиДокумента.СчетУчетаАкцизногоНалога;
				
			КонецЕсли;
			
		КонецЕсли; 
			
	КонецЦикла;
	
	ДвиженияПоРегистрамНалоговогоУчета(СтруктураШапкиДокумента, ТаблицаПоТоварам, Отказ);
	ДвиженияПоЕдиномуНалогу(СтруктураШапкиДокумента, ТаблицаПоТоварам, Отказ);
	ДвиженияРозничныеПродажиПодакцизныхТоваров(СтруктураШапкиДокумента, ТаблицаПоТоварам, Отказ);
	
	// Учет реализованных услуг
	ДвиженияПоРегиструРеализацияУслуг(СтруктураШапкиДокумента, ДатаДока, ТаблицаПоУслугам);
	
КонецПроцедуры // ДвиженияПоРегистрам()

Процедура ДвиженияПоРегиструРеализацияУслуг(СтруктураШапкиДокумента, ДатаДока, ТаблицаПоУслугам)
	
	Если НЕ СтруктураШапкиДокумента.РазрешитьУчетУслугБезПлановыхЦен Тогда
		Возврат;
	КонецЕсли;
	
	ТипСтатьяЗатрат = Тип("СправочникСсылка.СтатьиЗатрат");
	
	ДвиженияРеализацияУслуг = Движения["РеализацияУслуг"];
	
	Для Каждого СтрокаТаблицы Из ТаблицаПоУслугам Цикл
		СтрокаДвижения                       = ДвиженияРеализацияУслуг.Добавить();
		СтрокаДвижения.Период                = ДатаДока;
		СтрокаДвижения.Организация           = СтруктураШапкиДокумента.Организация;
		СтрокаДвижения.СчетРасходов          = СтрокаТаблицы.КорСчетСписанияБУ;
		СтрокаДвижения.НоменклатурнаяГруппа  = СтрокаТаблицы.НоменклатурнаяГруппа;
		СтрокаДвижения.Сумма                 = СтрокаТаблицы.СуммаБезНДСРегл;
		
		СтрокаДвижения.НалоговоеНазначениеДоходовИЗатрат  = СтрокаТаблицы.НалоговоеНазначениеДоходовИЗатрат;
		
		ЕстьСтатьяЗатрат = Ложь;
		Для Н = 1 По 3 Цикл
			Если ТипЗнч(СтрокаТаблицы["КорСубконтоСписанияБУ" + Н]) = ТипСтатьяЗатрат Тогда
				ЕстьСтатьяЗатрат = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если ЕстьСтатьяЗатрат = Истина Тогда
			СтрокаДвижения.СтатьяЗатрат = СтрокаТаблицы["КорСубконтоСписанияБУ" + Н];
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПереоценкаАТТВПродажныхЦенах(СтруктураШапкиДокумента, ТаблицаПоТоварам)
	
	Если СтруктураШапкиДокумента.УчетВПродажныхЦенах И СтруктураШапкиДокумента.Склад.ТипСклада = Перечисления.ТипыСкладов.РозничныйМагазин Тогда
		ПроводкиБУ = Движения.Хозрасчетный;
		
		Для Каждого Строка из ТаблицаПоТоварам Цикл
			
			Если БухгалтерскийУчетВызовСервераПовтИсп.КомиссионныйТовар(Строка.СчетУчетаБУ) Тогда
				Продолжить;
			КонецЕсли;
			
			Для Каждого Партия Из Строка.СписанныеПартииБУ Цикл
				Если Партия.Количество = 0 Тогда
					Продолжить;
				КонецЕсли;
				УчетнаяЦена = Партия.СуммаСписания;
				УчетнаяЦенаНУ = Партия.СуммаСписанияНУ;
				СуммаПродажи = ?(СтруктураШапкиДокумента.СуммаВключаетНДС, Строка.Сумма, Строка.Сумма + Строка.НДС);
				СуммаПереоценки = (СуммаПродажи * Партия.Количество / Строка.Количество) - (УчетнаяЦена);
				Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыльДо2015 Тогда
					СуммаПереоценкиНУ = (СуммаПродажи * Партия.Количество / Строка.Количество) - (УчетнаяЦенаНУ);
				Иначе
					СуммаПереоценкиНУ = 0;
				КонецЕсли;
				
				Если    СуммаПереоценки   <> 0
					ИЛИ СуммаПереоценкиНУ <> 0 Тогда
					
					Проводка = ПроводкиБУ.Добавить();
					Проводка.Период      = СтруктураШапкиДокумента.Дата;
					Проводка.Организация = СтруктураШапкиДокумента.Организация;
					Проводка.Содержание  = НСтр("ru='Переоценка товаров в рознице';uk='Переоцінка товарів у роздробі'",Локализация.КодЯзыкаИнформационнойБазы());
					
					Проводка.СчетДт      = Строка.СчетУчетаБУ;
					Проводка.СчетКт      = ПланыСчетов.Хозрасчетный.ТорговаяНаценкаАТТ;
					
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Склады",  СтруктураШапкиДокумента.Склад);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Склады",  СтруктураШапкиДокумента.Склад);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Номенклатура",  Строка.Номенклатура);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Номенклатура",  Строка.Номенклатура);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Партии",  Партия.Партия);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Партии",  Партия.Партия);
					
					Проводка.Сумма       = СуммаПереоценки;
					
					Проводка.НалоговоеНазначениеДт = Строка.НалоговоеНазначение;
					Проводка.НалоговоеНазначениеКт = Строка.НалоговоеНазначение;
					
					Проводка.СуммаНУДт = СуммаПереоценкиНУ;
					Проводка.СуммаНУКт = СуммаПереоценкиНУ;
					
					//Списание результата переоценки продаваемого товара
					Проводка = ПроводкиБУ.Добавить();
					Проводка.Период      = СтруктураШапкиДокумента.Дата;
					Проводка.Организация = СтруктураШапкиДокумента.Организация;
					Проводка.Содержание  = НСтр("ru='Списание результата переоценки';uk='Списання результату переоцінки'",Локализация.КодЯзыкаИнформационнойБазы());
					
					Проводка.СчетКт      = Строка.СчетУчетаБУ;
					Проводка.СчетДт      = Строка.КорСчетСписанияБУ;
					
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, Строка.КорСубконтоСписанияБУ1);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, Строка.КорСубконтоСписанияБУ2);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, Строка.КорСубконтоСписанияБУ3);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "НоменклатурныеГруппы", Строка.НоменклатурнаяГруппа);
					
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Склады",  СтруктураШапкиДокумента.Склад);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Номенклатура",  Строка.Номенклатура);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Партии",  Партия.Партия);
					
					Проводка.Сумма       = СуммаПереоценки;
					
					Проводка.НалоговоеНазначениеКт = Строка.НалоговоеНазначение;
					Проводка.СуммаНУКт = СуммаПереоценкиНУ;
					
					Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыльДо2015 Тогда
						Проводка.НалоговоеНазначениеДт = Строка.НалоговоеНазначениеДоходовИЗатрат;
						Проводка.СуммаНУДт 			   = СуммаПереоценкиНУ;
					КонецЕсли;
					
				КонецЕсли;
			КонецЦикла;
									
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры



// Процедура формирует структуру шапки документа и дополнительных полей.
//
Процедура ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента) Экспорт
	
	

	СтруктураШапкиДокумента = ОбщегоНазначенияРед12.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	// Заполним по шапке документа дерево параметров, нужных при проведении.
	
	СтруктураШапкиДокумента.Вставить("ТипСклада", Склад.ТипСклада);
	
	УчетВПродажныхЦенах	= (УчетнаяПолитика.СпособОценкиТоваровВРознице(Организация, Дата)
		= Перечисления.СпособыОценкиТоваровВРознице.ПоПродажнойСтоимости);
	СтруктураШапкиДокумента.Вставить("УчетВПродажныхЦенах",УчетВПродажныхЦенах);
	
	СтруктураШапкиДокумента.Вставить("ЕстьНалогНаПрибыльДо2015", УчетнаяПолитика.ПлательщикНалогаНаПрибыльДо2015(СтруктураШапкиДокумента.Организация,СтруктураШапкиДокумента.Дата));
	СтруктураШапкиДокумента.Вставить("ЕстьНДС", УчетнаяПолитика.ПлательщикНДС(СтруктураШапкиДокумента.Организация,СтруктураШапкиДокумента.Дата));
	СтруктураШапкиДокумента.Вставить("ЕстьЕдиныйНалог", УчетнаяПолитика.ПлательщикЕдиногоНалога(СтруктураШапкиДокумента.Организация,СтруктураШапкиДокумента.Дата));
	
	РазрешитьУчетУслугБезПлановыхЦен = Не УчетнаяПолитика.ПорядокРаспределенияРасходовНаОказаниеУслуг(СтруктураШапкиДокумента.Организация, СтруктураШапкиДокумента.Дата) = Перечисления.ПорядокРаспределенияРасходовНаОказаниеУслуг.ПоПлановымЦенам;
	СтруктураШапкиДокумента.Вставить("РазрешитьУчетУслугБезПлановыхЦен", РазрешитьУчетУслугБезПлановыхЦен);
	СтруктураШапкиДокумента.Вставить("ВедетсяПартионныйУчетБУ"		  , УчетнаяПолитика.СпособОценкиМПЗ(Организация, Дата) <> Перечисления.СпособыОценки.ПоСредней);
	БУ = ПланыСчетов.Хозрасчетный.КассаВНациональнойВалюте;
	ЕстьАналитикаПоОбособленнымПодразделениям = ?(БУ.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОбособленныеПодразделенияБезОбразованияЮрЛица, "ВидСубконто") = Неопределено, Ложь, Истина);
	СтруктураШапкиДокумента.Вставить("ВедетсяУчетДенежныхСредствПоОбособленнымПодразделениям", ЕстьАналитикаПоОбособленнымПодразделениям И УчетнаяПолитика.УчетПоОбособленнымПодразделениям(СтруктураШапкиДокумента.Организация, НачалоМесяца(СтруктураШапкиДокумента.Дата)));

КонецПроцедуры // ПодготовитьСтруктуруШапкиДокумента()

// Процедура формирует таблицы документа.
//
Процедура ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаОплата,  Отказ, Заголовок) Экспорт
	
	// Получим необходимые данные для проведения и проверки заполенения данные по табличной части "Товары".
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаТовары", Товары.Выгрузить());
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаТовары.НомерСтроки,
	|	ТаблицаТовары.Номенклатура,
	|	ТаблицаТовары.Количество,
	|	ТаблицаТовары.Коэффициент,
	|	ТаблицаТовары.Цена,
	|	ТаблицаТовары.Сумма,
	|	ТаблицаТовары.СтавкаНДС,
	|	ТаблицаТовары.СуммаНДС,
	|	ТаблицаТовары.ДокументОприходования,
	|	ТаблицаТовары.Себестоимость,
	|	ТаблицаТовары.СебестоимостьНУ,
	|	ТаблицаТовары.ДокументПродажи,
	|	ТаблицаТовары.СчетУчетаБУ,
	|	ТаблицаТовары.СхемаРеализации,
	|	ТаблицаТовары.НалоговоеНазначение,
	|	ТаблицаТовары.НалоговоеНазначениеДоходовИЗатрат,
	|	ТаблицаТовары.СтатьяДекларацииПоАкцизномуНалогу,
	|	ТаблицаТовары.ПодакцизныеТоварыДляКоммерческогоИспользования,
	|	ТаблицаТовары.СуммаАкцизногоНалога
	|ПОМЕСТИТЬ ВТ_ТаблицаТовары
	|ИЗ
	|	&ТаблицаТовары КАК ТаблицаТовары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ТаблицаТовары.НомерСтроки,
	|	ВТ_ТаблицаТовары.Номенклатура,
	|	ВТ_ТаблицаТовары.Номенклатура.Услуга КАК Услуга,
	|	ВТ_ТаблицаТовары.Номенклатура.БланкСтрогогоУчета КАК БланкСтрогогоУчета,
	|	ВТ_ТаблицаТовары.Количество * ВТ_ТаблицаТовары.Коэффициент КАК Количество,
	|	ВТ_ТаблицаТовары.Цена,
	|	ВТ_ТаблицаТовары.Сумма,
	|	ВТ_ТаблицаТовары.СтавкаНДС,
	|	ВТ_ТаблицаТовары.СуммаНДС КАК НДС,
	|	ВТ_ТаблицаТовары.ДокументОприходования,
	|	ВТ_ТаблицаТовары.Себестоимость,
	|	ВТ_ТаблицаТовары.СебестоимостьНУ,
	|	ВТ_ТаблицаТовары.ДокументПродажи,
	|	ВТ_ТаблицаТовары.Номенклатура.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	|	ВТ_ТаблицаТовары.СчетУчетаБУ,
	|	ВТ_ТаблицаТовары.СчетУчетаБУ.Забалансовый КАК СчетУчетаБУЗабалансовый,
	|	ВТ_ТаблицаТовары.СхемаРеализации,
	|	ВТ_ТаблицаТовары.СхемаРеализации.СчетДоходов КАК СчетДоходовБУ,
	|	ВТ_ТаблицаТовары.СхемаРеализации.СубконтоДоходов1 КАК СубконтоДоходовБУ1,
	|	ВТ_ТаблицаТовары.СхемаРеализации.СубконтоДоходов2 КАК СубконтоДоходовБУ2,
	|	ВТ_ТаблицаТовары.СхемаРеализации.СубконтоДоходов3 КАК СубконтоДоходовБУ3,
	|	ВТ_ТаблицаТовары.СхемаРеализации.СчетВычетовИзДоходов КАК СчетВычетовИзДоходовБУ,
	|	ВТ_ТаблицаТовары.СхемаРеализации.СубконтоВычетовИзДоходов1 КАК СубконтоВычетовИзДоходовБУ1,
	|	ВТ_ТаблицаТовары.СхемаРеализации.СубконтоВычетовИзДоходов2 КАК СубконтоВычетовИзДоходовБУ2,
	|	ВТ_ТаблицаТовары.СхемаРеализации.СубконтоВычетовИзДоходов3 КАК СубконтоВычетовИзДоходовБУ3,
	|	ВТ_ТаблицаТовары.СхемаРеализации.СчетСебестоимости КАК СчетРасходовБУ,
	|	ВТ_ТаблицаТовары.СхемаРеализации.СубконтоСебестоимости1 КАК СубконтоРасходовБУ1,
	|	ВТ_ТаблицаТовары.СхемаРеализации.СубконтоСебестоимости2 КАК СубконтоРасходовБУ2,
	|	ВТ_ТаблицаТовары.СхемаРеализации.СубконтоСебестоимости3 КАК СубконтоРасходовБУ3,
	|	ВТ_ТаблицаТовары.СхемаРеализации.СчетСебестоимостиПриВозврате КАК СчетВычетовИзРасходовБУ,
	|	ВТ_ТаблицаТовары.СхемаРеализации.СубконтоСебестоимостиПриВозврате1 КАК СубконтоВычетовИзРасходовБУ1,
	|	ВТ_ТаблицаТовары.СхемаРеализации.СубконтоСебестоимостиПриВозврате2 КАК СубконтоВычетовИзРасходовБУ2,
	|	ВТ_ТаблицаТовары.СхемаРеализации.СубконтоСебестоимостиПриВозврате3 КАК СубконтоВычетовИзРасходовБУ3,
	|	ВТ_ТаблицаТовары.НалоговоеНазначение,
	|	ВТ_ТаблицаТовары.НалоговоеНазначение.ВидДеятельностиНДС КАК ВидДеятельностиНДС,
	|	ВТ_ТаблицаТовары.НалоговоеНазначениеДоходовИЗатрат,
	|	ВТ_ТаблицаТовары.СтатьяДекларацииПоАкцизномуНалогу,
	|	ВТ_ТаблицаТовары.ПодакцизныеТоварыДляКоммерческогоИспользования,
	|	ВТ_ТаблицаТовары.СуммаАкцизногоНалога
	|ИЗ
	|	ВТ_ТаблицаТовары КАК ВТ_ТаблицаТовары";
	
	РезультатЗапросаПоТоварам = Запрос.Выполнить();
	

	ПогрешностиОкругления = Новый Соответствие;
	
	// Подготовим таблицу товаров для проведения.
	ТаблицаПоТоварам = ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента, ПогрешностиОкругления);
	
	ТаблицаОплата = Оплата.Выгрузить(,"НомерСтроки,ВидОплаты,Контрагент,ДоговорКонтрагента,СчетДеньгиВПути,СуммаОплаты");
	
КонецПроцедуры

#КонецОбласти 

#Область СлужебныеПроцедурыИФункции 

// Заполнение документа по инвентаризации товаров на розничном складе
//
Процедура ЗаполнитьПоДокументуОснованию(ДанныеЗаполнения)
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ИнвентаризацияТоваровНаСкладе") Тогда
		
		// Заполним реквизиты из стандартного набора по документу основанию.
		ЗаполнениеДокументов.ЗаполнитьПоОснованию(ЭтотОбъект, ДанныеЗаполнения);
		
		Если ДанныеЗаполнения.Склад.ТипСклада = Перечисления.ТипыСкладов.НеавтоматизированнаяТорговаяТочка Тогда
			ВидОперации	= Перечисления.ВидыОперацийОтчетОРозничныхПродажах.ОтчетНТТОПродажах;
		Иначе
			ВидОперации	= Перечисления.ВидыОперацийОтчетОРозничныхПродажах.ОтчетККМОПродажах;
		КонецЕсли;
		ИнвентаризацияТоваровНаСкладе = ДанныеЗаполнения;
		ВалютаДокумента               = мВалютаРегламентированногоУчета;
		
		Если ЗначениеЗаполнено(Склад.ТипЦенРозничнойТорговли) Тогда
			ТипЦен = Склад.ТипЦенРозничнойТорговли;
		КонецЕсли;
		
		Документы.ОтчетОРозничныхПродажах.ЗаполнитьТоварыПоИнвентаризацииТоваров(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти 

мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();

#КонецЕсли
