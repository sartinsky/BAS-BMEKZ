#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	
	Если Параметры.Ключ.Пустая() Тогда
		ПодготовитьФормуНаСервере();
	КонецЕсли;
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом

	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	ПодготовитьФормуНаСервере();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)

	Если ИсточникВыбора.ИмяФормы = "Обработка.ПодборНематериальныхАктивов.Форма.Форма" Тогда
		ОбработкаВыбораПодборСервер(ВыбранноеЗначение);
	ИначеЕсли ИсточникВыбора.ИмяФормы = "РегистрСведений.СоставКомиссий.Форма.ФормаВыбора" Тогда
		ЗаполнитьЗначенияСвойств(Объект, ВыбранноеЗначение);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	ПодготовитьФормуНаСервере();

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)

	Если НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДатаДокумента) Тогда
		// Изменение времени не влияет на поведение документа.
		ТекущаяДатаДокумента = Объект.Дата;
		Возврат;
	КонецЕсли;

	ТребуетсяВызовСервера = Ложь;

	// Проверим наличие строк в табличной части.
	Если Объект.НематериальныеАктивы.Количество() > 0 Тогда
		ТребуетсяВызовСервера = НЕ ЗначениеЗаполнено(МаксПериодПервоначальныхСведенийНМА) 
			ИЛИ (МаксПериодПервоначальныхСведенийНМА >= Объект.Дата);
	КонецЕсли;
		
	// Если определили, что изменение даты может повлиять на какие-либо параметры, 
	// то передаем обработку на сервер.
	Если ТребуетсяВызовСервера Тогда
		ДатаПриИзмененииНаСервере();
	КонецЕсли;
	
	// Запомним новую дату документа.
	ТекущаяДатаДокумента = Объект.Дата;

КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)

	Если ЗначениеЗаполнено(Объект.Организация) И Объект.НематериальныеАктивы.Количество() > 0 Тогда
		ЗаполнитьРеквизитыТЧ();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования,ЭтотОбъект,"Объект.Комментарий");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицыФормыНМА

&НаКлиенте
Процедура НМАПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)

	Если Копирование = Истина Тогда
		СтрокаТЧ = Элементы.НМА.ТекущиеДанные;
		СтрокаТЧ.СтоимостьПоДаннымУчета = 0;
		СтрокаТЧ.НаличиеПоДаннымУчета   = Ложь;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура НМАНематериальныйАктивПриИзменении(Элемент)

	СтрокаТЧ = Элементы.НМА.ТекущиеДанные;
	СтрокаТЧ.СтоимостьПоДаннымУчета = 0;
	СтрокаТЧ.НаличиеПоДаннымУчета   = Ложь;

	НематериальныйАктив = СтрокаТЧ.НематериальныйАктив;
	Если НЕ ЗначениеЗаполнено(НематериальныйАктив) Тогда
		СтрокаТЧ.МОЛ = Неопределено;
	Иначе
		ДополнительныеПоля = ПолучитьДополнительныеПоляНМА(НематериальныйАктив, Объект.Организация, Объект.Дата);
		ЗаполнитьЗначенияСвойств(СтрокаТЧ, ДополнительныеПоля);
		МаксПериодПервоначальныхСведенийНМА = Макс(МаксПериодПервоначальныхСведенийНМА, ДополнительныеПоля.Период);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура НМАНаличиеФактическоеПриИзменении(Элемент)

	ТекущаяСтрокаТЧ = Элементы.НМА.ТекущиеДанные;

	Если ТекущаяСтрокаТЧ.НаличиеФактическое Тогда
		Если ТекущаяСтрокаТЧ.СтоимостьФактическая = 0 Тогда
			ТекущаяСтрокаТЧ.СтоимостьФактическая = ТекущаяСтрокаТЧ.СтоимостьПоДаннымУчета;
		КонецЕсли;
	Иначе
		ТекущаяСтрокаТЧ.СтоимостьФактическая = 0;
	КонецЕсли;

	РассчитатьВычисляемыеПоляПоСтроке(ТекущаяСтрокаТЧ);

КонецПроцедуры

&НаКлиенте
Процедура НМАНаличиеПоДаннымУчетаПриИзменении(Элемент)

	ТекущаяСтрокаТЧ = Элементы.НМА.ТекущиеДанные;

	Если ТекущаяСтрокаТЧ.НаличиеПоДаннымУчета Тогда
		Если ТекущаяСтрокаТЧ.СтоимостьПоДаннымУчета = 0 Тогда
			ТекущаяСтрокаТЧ.СтоимостьПоДаннымУчета = ТекущаяСтрокаТЧ.СтоимостьФактическая;
		КонецЕсли;
	Иначе
		ТекущаяСтрокаТЧ.СтоимостьПоДаннымУчета = 0;
	КонецЕсли;

	РассчитатьВычисляемыеПоляПоСтроке(ТекущаяСтрокаТЧ);

КонецПроцедуры

&НаКлиенте
Процедура НМАСтоимостьФактическаяПриИзменении(Элемент)

	РассчитатьВычисляемыеПоляПоСтроке(Элементы.НМА.ТекущиеДанные);

КонецПроцедуры

&НаКлиенте
Процедура НМАСтоимостьПоДаннымУчетаПриИзменении(Элемент)

	РассчитатьВычисляемыеПоляПоСтроке(Элементы.НМА.ТекущиеДанные);

КонецПроцедуры

&НаКлиенте
Процедура НМАПриИзменении(Элемент)

	Если Элементы.НМА.ТекущиеДанные <> Неопределено Тогда
		РассчитатьВычисляемыеПоляПоСтроке(Элементы.НМА.ТекущиеДанные);
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПодборНМА(Команда)

	ПараметрыФормы = Новый Структура;
	Если Объект.НематериальныеАктивы.Количество() > 0 Тогда
		ПараметрыФормы.Вставить("АдресВХранилище", ПоместитьНМАВХранилище());
	КонецЕсли;

	ОткрытьФорму("Обработка.ПодборНематериальныхАктивов.Форма.Форма", ПараметрыФормы, ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоОстаткам(Команда)

	Если НЕ ПродолжитьЗаполнениеИзОстатков() Тогда
		Возврат;
	КонецЕсли;

	Если Объект.НематериальныеАктивы.Количество() <> 0 Тогда 
		ТекстВопроса = НСтр("ru='При заполнении существующие данные будут пересчитаны!
|Продолжить?';uk='При заповненні існуючі дані будуть перераховані!
|Продовжити?'");
		ПоказатьВопрос(Новый ОписаниеОповещения("ЗаполнитьПоОстаткамЗавершение", ЭтотОбъект), ТекстВопроса, РежимДиалогаВопрос.ДаНет);
        Возврат;
	КонецЕсли;
	
    ЗаполнитьПоОстаткамСервер();
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоОстаткамЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
	    ЗаполнитьПоОстаткамСервер();
    КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДанныеУчета(Команда)

	Если НЕ ПродолжитьЗаполнениеИзОстатков() Тогда
		Возврат;
	КонецЕсли;

	Если Объект.НематериальныеАктивы.Количество() <> 0 Тогда 
		ТекстВопроса = НСтр("ru='При заполнении существующие данные будут пересчитаны!
|Продолжить?';uk='При заповненні існуючі дані будуть перераховані!
|Продовжити?'");
		ПоказатьВопрос(Новый ОписаниеОповещения("ЗаполнитьДанныеУчетаЗавершение", ЭтотОбъект), ТекстВопроса, РежимДиалогаВопрос.ДаНет);
        Возврат;
	КонецЕсли;
	
    ЗаполнитьДанныеУчетаСервер();
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДанныеУчетаЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
	    ЗаполнитьДанныеУчетаСервер();
    КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьФактическиеДанные(Команда)

	ОчиститьСообщения();
	Если Объект.НематериальныеАктивы.Количество() = 0 Тогда
		ТекстСообщения = НСтр("ru='Табличная часть по нематериальным активам пуста';uk='Таблична частина по нематеріальних активів порожня'");
		Сообщить(ТекстСообщения);
		Возврат;
	КонецЕсли;

	ТекстВопроса = НСтр("ru='При заполнении существующие данные будут пересчитаны!
|Продолжить?';uk='При заповненні існуючі дані будуть перераховані!
|Продовжити?'");
	ПоказатьВопрос(Новый ОписаниеОповещения("ЗаполнитьФактическиеДанныеЗавершение", ЭтотОбъект), ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьФактическиеДанныеЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Для каждого СтрокаНМА Из Объект.НематериальныеАктивы Цикл
			СтрокаНМА.СтоимостьФактическая = СтрокаНМА.СтоимостьПоДаннымУчета;
			СтрокаНМА.НаличиеФактическое   = СтрокаНМА.НаличиеПоДаннымУчета;
			РассчитатьВычисляемыеПоляПоСтроке(СтрокаНМА);
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВыбратьСоставКомиссии(Команда)
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимВыбора", Истина);

	ПараметрыФормы.Вставить("Отбор", Новый Структура("Организация", Объект.Организация));
	ОткрытьФорму("РегистрСведений.СоставКомиссий.Форма.ФормаВыбора", ПараметрыФормы, ЭтаФорма);
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ПодготовитьФормуНаСервере()

	ТекущаяДатаДокумента= Объект.Дата;

	ЗаполнитьРеквизитыТЧ();

	Для каждого Строка Из Объект.НематериальныеАктивы Цикл
		РассчитатьВычисляемыеПоляПоСтроке(Строка);
	КонецЦикла;
	
	УстановитьСостояниеДокумента();

КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьТаблицуМОЛНМА(Знач ТаблицаНМА, Знач Организация, Знач Дата) Экспорт

	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ТаблицаНМА", ТаблицаНМА);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Дата", Дата);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаНМА.НематериальныйАктив КАК НематериальныйАктив,
	|	ТаблицаНМА.НомерСтроки КАК НомерСтроки
	|ПОМЕСТИТЬ ТаблицаНМА
	|ИЗ
	|	&ТаблицаНМА КАК ТаблицаНМА
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НематериальныйАктив
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	МестонахождениеНМАБухгалтерскийУчет.НематериальныйАктив КАК НематериальныйАктив,
	|	МестонахождениеНМАБухгалтерскийУчет.МОЛ,
	|	МестонахождениеНМАБухгалтерскийУчет.Период
	|ПОМЕСТИТЬ ТаблицаМОЛ
	|ИЗ
	|	РегистрСведений.МестонахождениеНМАБухгалтерскийУчет.СрезПоследних(
	|			&Дата,
	|			Организация = &Организация
	|				И НематериальныйАктив В
	|					(ВЫБРАТЬ
	|						ТаблицаНМА.НематериальныйАктив
	|					ИЗ
	|						ТаблицаНМА КАК ТаблицаНМА)) КАК МестонахождениеНМАБухгалтерскийУчет
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НематериальныйАктив
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаНМА.НомерСтроки КАК НомерСтроки,
	|	ТаблицаНМА.НематериальныйАктив КАК НематериальныйАктив,
	|	ЕСТЬNULL(ТаблицаМОЛ.МОЛ, ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)) КАК МОЛ,
	|	ЕСТЬNULL(ТаблицаМОЛ.Период, ДАТАВРЕМЯ(1, 1, 1)) КАК Период
	|ИЗ
	|	ТаблицаНМА КАК ТаблицаНМА
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаМОЛ КАК ТаблицаМОЛ
	|		ПО ТаблицаНМА.НематериальныйАктив = ТаблицаМОЛ.НематериальныйАктив
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	РезультатЗапроса = Запрос.Выполнить();

	Возврат РезультатЗапроса.Выгрузить();

КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьТаблицуСчетУчетаНМА(Знач ТаблицаНМА, Знач Организация, Знач Дата) Экспорт

	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ТаблицаНМА", ТаблицаНМА);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Дата", Дата);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаНМА.НематериальныйАктив КАК НематериальныйАктив,
	|	ТаблицаНМА.НомерСтроки КАК НомерСтроки
	|ПОМЕСТИТЬ ТаблицаНМА
	|ИЗ
	|	&ТаблицаНМА КАК ТаблицаНМА
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НематериальныйАктив
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СчетаБухгалтерскогоУчетаНМА.НематериальныйАктив КАК НематериальныйАктив,
	|	СчетаБухгалтерскогоУчетаНМА.СчетУчета,
	|	СчетаБухгалтерскогоУчетаНМА.Период
	|ПОМЕСТИТЬ ТаблицаСчетУчета
	|ИЗ
	|	РегистрСведений.СчетаБухгалтерскогоУчетаНМА.СрезПоследних(
	|			&Дата,
	|			Организация = &Организация
	|				И НематериальныйАктив В
	|					(ВЫБРАТЬ
	|						ТаблицаНМА.НематериальныйАктив
	|					ИЗ
	|						ТаблицаНМА КАК ТаблицаНМА)) КАК СчетаБухгалтерскогоУчетаНМА
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НематериальныйАктив
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаНМА.НомерСтроки КАК НомерСтроки,
	|	ТаблицаНМА.НематериальныйАктив КАК НематериальныйАктив,
	|	ЕСТЬNULL(ТаблицаСчетУчета.СчетУчета, ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)) КАК СчетУчета,
	|	ЕСТЬNULL(ТаблицаСчетУчета.Период, ДАТАВРЕМЯ(1, 1, 1)) КАК Период
	|ИЗ
	|	ТаблицаНМА КАК ТаблицаНМА
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаСчетУчета КАК ТаблицаСчетУчета
	|		ПО ТаблицаНМА.НематериальныйАктив = ТаблицаСчетУчета.НематериальныйАктив
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	РезультатЗапроса = Запрос.Выполнить();

	Возврат РезультатЗапроса.Выгрузить();

КонецФункции

&НаСервере
Процедура ЗаполнитьРеквизитыТЧ()

	ТаблицаНМА = Объект.НематериальныеАктивы.Выгрузить();

	ТаблицаМОЛ = ПолучитьТаблицуМОЛНМА(ТаблицаНМА, Объект.Организация, Объект.Дата);
	ТаблицаНМА.ЗагрузитьКолонку(ТаблицаМОЛ.ВыгрузитьКолонку("МОЛ"), "МОЛ");

	ТаблицаСчетУчета = ПолучитьТаблицуСчетУчетаНМА(ТаблицаНМА, Объект.Организация, Объект.Дата);
	ТаблицаНМА.ЗагрузитьКолонку(ТаблицаСчетУчета.ВыгрузитьКолонку("СчетУчета"), "СчетУчета");

	Объект.НематериальныеАктивы.Загрузить(ТаблицаНМА);

	// Запомним максимальную дату первоначальных сведений НМА
	Если ТаблицаМОЛ.Количество() > 0 Тогда
		ТаблицаМОЛ.Сортировать("Период");
		МаксПериодПервоначальныхСведенийНМА = Макс(МаксПериодПервоначальныхСведенийНМА, 
			ТаблицаМОЛ[ТаблицаМОЛ.Количество()-1].Период);
	КонецЕсли;
	
	Если ТаблицаСчетУчета.Количество() > 0 Тогда
		ТаблицаСчетУчета.Сортировать("Период");
		МаксПериодПервоначальныхСведенийНМА = Макс(МаксПериодПервоначальныхСведенийНМА, 
			ТаблицаСчетУчета[ТаблицаСчетУчета.Количество()-1].Период);
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьМОЛНМА(Знач НематериальныйАктив, Знач Организация, Знач Дата)

	СведенияМОЛ = Новый Структура;
	СведенияМОЛ.Вставить("МОЛ", 	Справочники.ФизическиеЛица.ПустаяСсылка());
	СведенияМОЛ.Вставить("Период", 	'0001-01-01');

	Запрос = Новый Запрос;

	Запрос.УстановитьПараметр("НематериальныйАктив", НематериальныйАктив);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Дата", Дата);

	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЕСТЬNULL(МестонахождениеНМАБухгалтерскийУчет.МОЛ, ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)) КАК МОЛ,
	|	МестонахождениеНМАБухгалтерскийУчет.Период
	|ИЗ
	|	РегистрСведений.МестонахождениеНМАБухгалтерскийУчет.СрезПоследних(
	|			&Дата,
	|			Организация = &Организация
	|				И НематериальныйАктив = &НематериальныйАктив) КАК МестонахождениеНМАБухгалтерскийУчет";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		СведенияМОЛ.МОЛ 	= Выборка.МОЛ;
		СведенияМОЛ.Период 	= Выборка.Период;
	КонецЕсли;

	Возврат СведенияМОЛ;

КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьСчетУчетаНМА(Знач НематериальныйАктив, Знач Организация, Знач Дата)

	СведенияСчетНМА = Новый Структура();
	СведенияСчетНМА.Вставить("СчетУчета", 	ПланыСчетов.Хозрасчетный.ПустаяСсылка());
	СведенияСчетНМА.Вставить("Период", 		'0001-01-01');

	Запрос = Новый Запрос;

	Запрос.УстановитьПараметр("НематериальныйАктив", НематериальныйАктив);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Дата", Дата);

	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЕСТЬNULL(СчетаБухгалтерскогоУчетаНМА.СчетУчета, ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)) КАК СчетУчета,
	|	СчетаБухгалтерскогоУчетаНМА.Период
	|ИЗ
	|	РегистрСведений.СчетаБухгалтерскогоУчетаНМА.СрезПоследних(
	|			&Дата,
	|			Организация = &Организация
	|				И НематериальныйАктив = &НематериальныйАктив) КАК СчетаБухгалтерскогоУчетаНМА";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		СведенияСчетНМА.СчетУчета 	= Выборка.СчетУчета;
		СведенияСчетНМА.Период 		= Выборка.Период;
	КонецЕсли;

	Возврат СведенияСчетНМА;

КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьДополнительныеПоляНМА(Знач НематериальныйАктив, Знач Организация, Знач Дата)

	СведенияМОЛ 	= ПолучитьМОЛНМА(НематериальныйАктив, Организация, Дата);
	СведенияСчетНМА = ПолучитьСчетУчетаНМА(НематериальныйАктив, Организация, Дата);
		
	МаксПериод = Макс(СведенияМОЛ.Период, СведенияСчетНМА.Период);

	Результат = Новый Структура;
	Результат.Вставить("МОЛ", 				СведенияМОЛ.МОЛ);
	Результат.Вставить("СчетУчета", 		СведенияСчетНМА.СчетУчета);
	Результат.Вставить("Период", 			МаксПериод);

	Возврат Результат;

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура РассчитатьВычисляемыеПоляПоСтроке(Строка)

	РазницаПоНаличию   = Число(Строка.НаличиеФактическое) - Число(Строка.НаличиеПоДаннымУчета);
	РазницаПоСтоимости = Строка.СтоимостьФактическая - Строка.СтоимостьПоДаннымУчета;

	Строка.ИзлишекКоличество = ?(РазницаПоНаличию > 0, РазницаПоНаличию, 0);
	Строка.НедостачаКоличество = ?(РазницаПоНаличию < 0, -РазницаПоНаличию, 0);
	Строка.ИзлишекСумма = ?(РазницаПоСтоимости > 0, РазницаПоСтоимости, 0);
	Строка.НедостачаСумма = ?(РазницаПоСтоимости < 0, -РазницаПоСтоимости, 0);

КонецПроцедуры

&НаСервере
Функция ОстаткиНМА(Знач СписокНМА = Неопределено)

	Запрос = Новый Запрос();

	Запрос.УстановитьПараметр("ДатаОстатков",  Объект.Дата);
	Запрос.УстановитьПараметр("Организация",   Объект.Организация);
	Запрос.УстановитьПараметр("Подразделение", Объект.ПодразделениеОрганизации);
	Запрос.УстановитьПараметр("СписокНМА",      СписокНМА);

	УсловиеНМА = ?(ЗначениеЗаполнено(СписокНМА), "И НематериальныйАктив В(&СписокНМА)", "");
	УсловиеПодразделение = ?(ЗначениеЗаполнено(Объект.ПодразделениеОрганизации), " И Местонахождение = &Подразделение", "");

	Запрос.Текст =
	"ВЫБРАТЬ
	|	МестонахождениеНМАБухгалтерскийУчет.НематериальныйАктив КАК НематериальныйАктив,
	|	МестонахождениеНМАБухгалтерскийУчет.Местонахождение КАК Местонахождение
	|ПОМЕСТИТЬ МестонахождениеНМАБУ
	|ИЗ
	|	РегистрСведений.МестонахождениеНМАБухгалтерскийУчет.СрезПоследних(&ДатаОстатков) КАК МестонахождениеНМАБухгалтерскийУчет
	|ГДЕ
	|	Организация = &Организация " + УсловиеНМА + УсловиеПодразделение + "
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МестонахождениеНМАБУ.НематериальныйАктив КАК НематериальныйАктив,
	|	МестонахождениеНМАБУ.Местонахождение КАК ПодразделениеОрганизации,
	|	СчетаБухгалтерскогоУчетаНМАСрезПоследних.СчетУчета КАК СчетУчета
	|ПОМЕСТИТЬ НематериальныеАктивы
	|	ИЗ
	|		МестонахождениеНМАБУ
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СчетаБухгалтерскогоУчетаНМА.СрезПоследних(&ДатаОстатков, Организация = &Организация
	|																				 " + УсловиеНМА + ") КАК СчетаБухгалтерскогоУчетаНМАСрезПоследних
	|		ПО МестонахождениеНМАБУ.НематериальныйАктив = СчетаБухгалтерскогоУчетаНМАСрезПоследних.НематериальныйАктив
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(ХозрасчетныйОстатки_ВосстановительнаяСтоимость.СуммаОстатокДт, 0) КАК ВосстановительнаяСтоимость,
	|	ХозрасчетныйОстатки_ВосстановительнаяСтоимость.Счет КАК СчетУчета,
	|	ВЫРАЗИТЬ(ХозрасчетныйОстатки_ВосстановительнаяСтоимость.Субконто1 КАК Справочник.НематериальныеАктивы) КАК НематериальныйАктив
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			&ДатаОстатков,
	|			Счет В
	|				(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|					НематериальныеАктивы.СчетУчета
	|				ИЗ
	|					НематериальныеАктивы),
	|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.НематериальныеАктивы),
	|			Организация = &Организация
	|				И (ВЫРАЗИТЬ(Субконто1 КАК Справочник.НематериальныеАктивы)) В
	|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|						НематериальныеАктивы.НематериальныйАктив
	|					ИЗ
	|						НематериальныеАктивы)) КАК ХозрасчетныйОстатки_ВосстановительнаяСтоимость";

	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции

&НаСервере
Процедура ЗаполнитьПоОстаткамСервер()

	Объект.НематериальныеАктивы.Очистить();

	ТаблицаНМА = ОстаткиНМА();

	Для каждого СтрокаНМА Из ТаблицаНМА Цикл
		НоваяСтрока = Объект.НематериальныеАктивы.Добавить();
		НоваяСтрока.НематериальныйАктив 	= СтрокаНМА.НематериальныйАктив;
		НоваяСтрока.СтоимостьПоДаннымУчета  = СтрокаНМА.ВосстановительнаяСтоимость;
		НоваяСтрока.СчетУчета               = СтрокаНМА.СчетУчета;
		НоваяСтрока.НаличиеПоДаннымУчета    = Истина;
		НоваяСтрока.СтоимостьФактическая    = 0;
		НоваяСтрока.НаличиеФактическое      = Ложь;
		РассчитатьВычисляемыеПоляПоСтроке(НоваяСтрока);
	КонецЦикла;

	ЗаполнитьРеквизитыТЧ();

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеУчетаСервер()

	СписокНМА = Объект.НематериальныеАктивы.Выгрузить(, "НематериальныйАктив");

	ТаблицаНМА = ОстаткиНМА(СписокНМА);
	ТаблицаНМА.Индексы.Добавить("НематериальныйАктив");

	Для каждого СтрокаНМА Из Объект.НематериальныеАктивы Цикл
		ОстатокНМА = ТаблицаНМА.Найти(СтрокаНМА.НематериальныйАктив, "НематериальныйАктив");
		Если ОстатокНМА <> Неопределено Тогда
			СтрокаНМА.СтоимостьПоДаннымУчета = ОстатокНМА.ВосстановительнаяСтоимость;
			СтрокаНМА.НаличиеПоДаннымУчета   = Истина;
			СтрокаНМА.СчетУчета   			= ОстатокНМА.СчетУчета;
		Иначе
			СтрокаНМА.СтоимостьПоДаннымУчета = 0;
			СтрокаНМА.НаличиеПоДаннымУчета   = Ложь;
		КонецЕсли;
		РассчитатьВычисляемыеПоляПоСтроке(СтрокаНМА);
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Функция ПродолжитьЗаполнениеИзОстатков()

	ОчиститьСообщения();

	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		ТекстСообщения = ОбщегоНазначенияБПКлиентСервер.ПолучитьТекстСообщения(, , НСтр("ru='Организация';uk='Організація'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Объект.Организация");
		Возврат Ложь;
	КонецЕсли;


	Возврат Истина;

КонецФункции

&НаСервере
Функция ПоместитьНМАВХранилище()

	ТаблицаНМА = Объект.НематериальныеАктивы.Выгрузить(, "НомерСтроки, НематериальныйАктив");
	Возврат ПоместитьВоВременноеХранилище(ТаблицаНМА);

КонецФункции

&НаСервере
Процедура ОбработкаВыбораПодборСервер(Знач ВыбранноеЗначение)

	ДобавленныеСтроки = УправлениеНеоборотнымиАктивами.ОбработатьПодборНематериальныхАктивов(Объект.НематериальныеАктивы, ВыбранноеЗначение);
	ЗаполнитьРеквизитыТЧ();

КонецПроцедуры

&НаСервере
Процедура ДатаПриИзмененииНаСервере()

	ЗаполнитьРеквизитыТЧ();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСостояниеДокумента()
	
	СостояниеДокумента = ОбщегоНазначенияБП.СостояниеДокумента(Объект);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ БСП

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти