#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

Функция ПечатьДокумента(МассивОбъектов, ОбъектыПечати, ПараметрыВывода, СПечатью = Ложь)

	УстановитьПривилегированныйРежим(Истина);
	
	ЗапросШапка = Новый Запрос;
	ЗапросШапка.Текст ="
	|ВЫБРАТЬ
	|	Номер,
	|	Дата,
	|	ДоговорКонтрагента,
	|	ДоговорКонтрагента.Дата  		КАК ДоговорДата,
	|	ДоговорКонтрагента.Номер 		КАК ДоговорНомер,
	|	ДоговорКонтрагента.НаименованиеДляПечати КАК ДоговорНаименованиеДляПечати,
	|	ДоговорКонтрагента.ВидДоговора  КАК ВидДоговораКонтрагента,
	|	Ответственный.ФизическоеЛицо.Наименование КАК Отпустил,
	|	Организация,
	|	Контрагент КАК Покупатель,
	|	Организация КАК Поставщик,
	|	СтруктурнаяЕдиница,
	|	СтруктурнаяЕдиница.Банк КАК СтруктурнаяЕдиницаБанк,
	|	СтруктурнаяЕдиница.Банк.Код КАК СтруктурнаяЕдиницаМФО,
	|	СтруктурнаяЕдиница.НомерСчета КАК СтруктурнаяЕдиницаНомерСчета,
	|	СуммаДокумента,
	|	ВалютаДокумента,
	|	СуммаВключаетНДС
	|ИЗ
	|	Документ.СчетНаОплатуПокупателю КАК ЗаказПокупателя
	|
	|ГДЕ
	|	ЗаказПокупателя.Ссылка = &ТекущийДокумент";


	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ЗаказПокупателя_СчетЗаказ";

	ЗапросТЧТовары = Новый Запрос;
	
	ЧастьЗапросаДляВыбораСодержанияУслуг = ОбщегоНазначенияБПВызовСервера.ПолучитьЧастьЗапросаДляВыбораСодержанияУслуг("ЗаказПокупателя");
	
	ЗапросТЧТовары.Текст = "ВЫБРАТЬ
	               |	ВложенныйЗапрос.Номенклатура,
				   |	ВложенныйЗапрос.Номенклатура.НаименованиеПолное КАК Товар,
				   |	ВложенныйЗапрос.Номенклатура.Артикул КАК Артикул,
				   |	ВложенныйЗапрос.Номенклатура.Код КАК Код,
				   |	ВложенныйЗапрос.Количество,
				   |	ВложенныйЗапрос.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	               |	ВложенныйЗапрос.Цена,
	               |	ВложенныйЗапрос.СуммаБезСкидки,
	               |	ВложенныйЗапрос.СуммаСкидки,
	               |	ВложенныйЗапрос.Сумма,
	               |	ВложенныйЗапрос.СуммаНДС,
	               |	ВложенныйЗапрос.НомерСтроки КАК НомерСтроки,
				   |    1 КАК ID
	               |ИЗ
	               |	(ВЫБРАТЬ
	               |		ЗаказПокупателя.Номенклатура КАК Номенклатура,
	               |		ЗаказПокупателя.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
				   |		ЗаказПокупателя.Цена КАК Цена,
	               |		СУММА(ЗаказПокупателя.Количество) 		КАК Количество,
	               |		СУММА(ЗаказПокупателя.СуммаБезСкидки) 	КАК СуммаБезСкидки,
	               |		СУММА(ЗаказПокупателя.СуммаСкидки) 		КАК СуммаСкидки,
	               |		СУММА(ЗаказПокупателя.Сумма) 			КАК Сумма,
	               |		СУММА(ЗаказПокупателя.СуммаНДС) 		КАК СуммаНДС,
	               |		МИНИМУМ(ЗаказПокупателя.НомерСтроки) 	КАК НомерСтроки
	               |	ИЗ
	               |		Документ.СчетНаОплатуПокупателю.Товары КАК ЗаказПокупателя
	               |	
	               |	ГДЕ
	               |		ЗаказПокупателя.Ссылка = &ТекущийДокумент
	               |	
	               |	СГРУППИРОВАТЬ ПО
	               |		ЗаказПокупателя.Номенклатура,
				   |		ЗаказПокупателя.ЕдиницаИзмерения,
	               |		ЗаказПокупателя.Цена,
				   |		ЗаказПокупателя.СтавкаНДС) КАК ВложенныйЗапрос
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	" + ЧастьЗапросаДляВыбораСодержанияУслуг + ",
				   |	" + ЧастьЗапросаДляВыбораСодержанияУслуг + ",
				   |	ЗаказПокупателя.Номенклатура.Артикул КАК Артикул,
				   |	ЗаказПокупателя.Номенклатура.Код КАК Код,
				   |	ЗаказПокупателя.Количество,
	               |	ЗаказПокупателя.Номенклатура.БазоваяЕдиницаИзмерения.Наименование,
	               |	ЗаказПокупателя.Цена,
	               |	ЗаказПокупателя.СуммаБезСкидки,
	               |	ЗаказПокупателя.СуммаСкидки,
	               |	ЗаказПокупателя.Сумма,
	               |	ЗаказПокупателя.СуммаНДС,
	               |	ЗаказПокупателя.НомерСтроки,
				   |    2
	               |ИЗ
	               |	Документ.СчетНаОплатуПокупателю.Услуги КАК ЗаказПокупателя
	               |
	               |ГДЕ
	               |	ЗаказПокупателя.Ссылка = &ТекущийДокумент
	               |
	               |УПОРЯДОЧИТЬ ПО
				   |    ID,
	               |	НомерСтроки";
    

	ЗапросТЧТара = Новый Запрос;
	ЗапросТЧТара.Текст = "ВЫБРАТЬ
	               |	ВложенныйЗапрос.Номенклатура,
	               |	ВложенныйЗапрос.Номенклатура.НаименованиеПолное КАК Товар,
				   |	ВложенныйЗапрос.Номенклатура.Артикул КАК Артикул,
				   |	ВложенныйЗапрос.Номенклатура.Код КАК Код,
				   |	ВложенныйЗапрос.Количество,
	               |	ВложенныйЗапрос.ЕдиницаИзмерения,
	               |	ВложенныйЗапрос.Цена,
	               |	ВложенныйЗапрос.Сумма,
	               |	ВложенныйЗапрос.НомерСтроки КАК НомерСтроки
	               |ИЗ
	               |	(ВЫБРАТЬ
	               |		ЗаказПокупателя.Номенклатура КАК Номенклатура,
	               |		ЗаказПокупателя.Номенклатура.БазоваяЕдиницаИзмерения.Наименование КАК ЕдиницаИзмерения,
	               |		ЗаказПокупателя.Цена КАК Цена,
	               |		СУММА(ЗаказПокупателя.Количество) КАК Количество,
	               |		СУММА(ЗаказПокупателя.Сумма) КАК Сумма,
	               |		МИНИМУМ(ЗаказПокупателя.НомерСтроки) КАК НомерСтроки
	               |	ИЗ
	               |		Документ.СчетНаОплатуПокупателю.ВозвратнаяТара КАК ЗаказПокупателя
	               |	
	               |	ГДЕ
	               |		ЗаказПокупателя.Ссылка = &ТекущийДокумент
	               |	
	               |	СГРУППИРОВАТЬ ПО
	               |		ЗаказПокупателя.Номенклатура,
	               |		ЗаказПокупателя.Цена) КАК ВложенныйЗапрос
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	НомерСтроки";
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.СчетНаОплатуПокупателю.ПФ_MXL_СчетЗаказ");

	КодЯзыкаПечать = ПараметрыВывода.КодЯзыкаДляМногоязычныхПечатныхФорм;
	Макет.КодЯзыкаМакета = КодЯзыкаПечать;
	
	Тип = "Счет"; 
	мВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	
	ДопКолонка = Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
	Если ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул Тогда
		ВыводитьКоды = Истина;
		Колонка = "Артикул";
	ИначеЕсли ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Код Тогда
		ВыводитьКоды = Истина;
		Колонка = "Код";
	Иначе
		ВыводитьКоды = Ложь;
	КонецЕсли;
	
	Если Не ВыводитьКоды Тогда
		ОбластьКолонкаТовар = Макет.Область("Товар");
		ОбластьКолонкаТовар.ШиринаКолонки = ОбластьКолонкаТовар.ШиринаКолонки + 
											Макет.Область("КолонкаКодов").ШиринаКолонки;
											
		ОбластьКолонкаТоварБезСкидок = Макет.Область("ТоварБезСкидок");
		ОбластьКолонкаТоварБезСкидок.ШиринаКолонки = ОбластьКолонкаТоварБезСкидок.ШиринаКолонки + 
											Макет.Область("КолонкаКодовБезСкидок").ШиринаКолонки;
	КонецЕсли;
	
	ПервыйДокумент = Истина;
	
	Для каждого Ссылка Из МассивОбъектов Цикл	
		
		Если Не ПервыйДокумент Тогда
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		// Запомним номер строки, с которой начали выводить текущий документ.
		НомерСтрокиНачало = ТабДокумент.ВысотаТаблицы + 1;
		
		ЗапросШапка.УстановитьПараметр("ТекущийДокумент", Ссылка);
		Шапка = ЗапросШапка.Выполнить().Выбрать();
		Шапка.Следующий();

		ЗапросТЧТовары.УстановитьПараметр("ТекущийДокумент", Ссылка);
		ЗапросТовары = ЗапросТЧТовары.Выполнить().Выгрузить();
		
		ЗапросТЧТара.УстановитьПараметр("ТекущийДокумент", Ссылка);
		ЗапросТара = ЗапросТЧТара.Выполнить().Выгрузить();	
		

		УчитыватьНДС = УчетнаяПолитика.ПлательщикНДС(Шапка.Организация, Шапка.Дата);

		// Выводим шапку счета c логотипом
		ВывестиЗаголовокПредупреждение(Шапка.Поставщик, ТабДокумент, Макет);
		
		// Выводим шапку накладной
		СведенияОПокупателе = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Шапка.Покупатель, Шапка.Дата,,,КодЯзыкаПечать);
		СведенияОПоставщике = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Шапка.Поставщик, Шапка.Дата,, Шапка.СтруктурнаяЕдиница,КодЯзыкаПечать);
		
		Если Тип = "Счет" Тогда

			Если Шапка.ВидДоговораКонтрагента <> Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером  
				И Шапка.ВалютаДокумента = мВалютаРегламентированногоУчета Тогда
				
				СтруктураПараметров = Новый Структура;
				
				Если НачалоДня(Шапка.Дата) > ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьДатуОкончанияПереходаНаСтандартIBAN() Тогда
					ОбластьМакета       						= Макет.ПолучитьОбласть("ЗаголовокСчета2020");
					СтруктураПараметров.Вставить("НомерРасчетногоСчетаОрганизации", СведенияОПоставщике.НомерСчета); 
				Иначе
					ОбластьМакета       						= Макет.ПолучитьОбласть("ЗаголовокСчета");
					СтруктураПараметров.Вставить("НомерРасчетногоСчетаОрганизации", СведенияОПоставщике.НомерСчетаСПереносом); 
				КонецЕсли;
				
				СтруктураПараметров.Вставить("НазваниеОрганизации", СведенияОПоставщике.ПолноеНаименование);
				СтруктураПараметров.Вставить("ЕДРПОУОрганизации", БухгалтерскийУчетПереопределяемый.ПолучитьКодОрганизации(СведенияОПоставщике));
				СтруктураПараметров.Вставить("БанкОрганизации", СведенияОПоставщике.Банк);
				СтруктураПараметров.Вставить("МФОБанкаОрганизации", СведенияОПоставщике.МФО_Платеж);
				
				ОбластьМакета.Параметры.Заполнить(СтруктураПараметров);
				ТабДокумент.Вывести(ОбластьМакета);
				
			КонецЕсли;

		КонецЕсли; 

		ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
		Если Шапка.ВидДоговораКонтрагента = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером  Тогда
			ОбластьМакета.Параметры.ТекстЗаголовка = ОбщегоНазначенияБПВызовСервера.СформироватьЗаголовокДокумента(Шапка, НСтр("ru='Список товаров на комиссию';uk='Список товарів на комісію'",КодЯзыкаПечать),КодЯзыкаПечать);
		Иначе	
			ОбластьМакета.Параметры.ТекстЗаголовка = ОбщегоНазначенияБПВызовСервера.СформироватьЗаголовокДокумента(Шапка, НСтр("ru='Счет на оплату';uk='Рахунок на оплату'",КодЯзыкаПечать),КодЯзыкаПечать);
		КонецЕсли; 

		ТабДокумент.Вывести(ОбластьМакета);

		ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");
		ОбластьМакета.Параметры.Заполнить(Шапка);
		ОбластьМакета.Параметры.ПредставлениеПоставщика = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОПоставщике, "ПолноеНаименование,",,КодЯзыкаПечать);	
		Если Тип = "Счет" Тогда
			ОбластьМакета.Параметры.РеквизитыПоставщика = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОПоставщике, "НомерСчета,Банк,МФО,/,ЮридическийАдрес,/,Телефоны,Факс,Email,/,КодПоЕДРПОУ,КодПоДРФО,ИНН,НомерСвидетельства,/,ИнформацияОСтатусеПлательщикаНалогов,",,КодЯзыкаПечать);	
		КонецЕсли;
	    ТабДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Покупатель");
		ОбластьМакета.Параметры.Заполнить(Шапка);
	 	ОбластьМакета.Параметры.ПредставлениеПокупателя = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОПокупателе, "ПолноеНаименование,",,КодЯзыкаПечать);
		ОбластьМакета.Параметры.РеквизитыПокупателя		= ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОПокупателе,"Телефоны,",,КодЯзыкаПечать);
		ТабДокумент.Вывести(ОбластьМакета);

		// Выводим дополнительно информацию о договоре и сделке
		СписокДополнительныхПараметров = "ДоговорНаименованиеДляПечати,";
		МассивСтруктурСтрок = ОбщегоНазначенияБПВызовСервера.ДополнительнаяИнформация(Шапка,СписокДополнительныхПараметров,КодЯзыкаПечать);
		ОбластьМакета = Макет.ПолучитьОбласть("ДопИнформация");
	    Для каждого СтруктураСтроки Из МассивСтруктурСтрок Цикл
			ОбластьМакета.Параметры.Заполнить(СтруктураСтроки);
			ТабДокумент.Вывести(ОбластьМакета);
		КонецЦикла;
		
		// Вывести табличную часть
		ОбластьИтого = "Итого";
		
		ЕстьСкидки = (ЗапросТовары.Итог("СуммаСкидки") <> 0);
		
		
		СуффиксОбластиТаблицы = ?(ЕстьСкидки, "", "БезСкидок");
		
		ОбластьНомера = Макет.ПолучитьОбласть("ШапкаТаблицы"+СуффиксОбластиТаблицы+"|НомерСтроки"+СуффиксОбластиТаблицы);
		ОбластьКодов  = Макет.ПолучитьОбласть("ШапкаТаблицы"+СуффиксОбластиТаблицы+"|КолонкаКодов"+СуффиксОбластиТаблицы);
		ОбластьДанных = Макет.ПолучитьОбласть("ШапкаТаблицы"+СуффиксОбластиТаблицы+"|Данные"+СуффиксОбластиТаблицы);
		Если ЕстьСкидки Тогда
			ОбластьСкидка = Макет.ПолучитьОбласть("ШапкаТаблицы|Скидка");
		КонецЕсли;
		ОбластьСуммы  = Макет.ПолучитьОбласть("ШапкаТаблицы"+СуффиксОбластиТаблицы+"|Сумма"+СуффиксОбластиТаблицы);
	    
		ТабДокумент.Вывести(ОбластьНомера);
		Если ВыводитьКоды Тогда
			ОбластьКодов.Параметры.ИмяКолонкиКодов = Колонка;
			ТабДокумент.Присоединить(ОбластьКодов);
		КонецЕсли;
		
		Суффикс = "";
		Если УчитыватьНДС Тогда
			Если Шапка.СуммаВключаетНДС Тогда
				Суффикс  = Суффикс  + НСтр("ru=' с ';uk=' з '",КодЯзыкаПечать);
			Иначе	
				Суффикс  = Суффикс  + НСтр("ru=' без ';uk=' без '",КодЯзыкаПечать);
			КонецЕсли;
			Суффикс = Суффикс  + НСтр("ru='НДС';uk='ПДВ'",КодЯзыкаПечать);
		КонецЕсли;
		ОбластьДанных.Параметры.Цена  = НСтр("ru='Цена';uk='Ціна'",КодЯзыкаПечать) + Суффикс;
		ТабДокумент.Присоединить(ОбластьДанных);
		Если ЕстьСкидки Тогда
			ТабДокумент.Присоединить(ОбластьСкидка);
		КонецЕсли;
		
		ОбластьСуммы.Параметры.Сумма = НСтр("ru='Сумма';uk='Сума'",КодЯзыкаПечать)+ Суффикс;
		ТабДокумент.Присоединить(ОбластьСуммы);
		
		
		СуммаБезСкидки	= 0;
		СуммаСкидки 	= 0;
		Сумма    		= 0;
		СуммаНДС 		= 0;

		ОбластьНомера = Макет.ПолучитьОбласть("Строка"+СуффиксОбластиТаблицы+"|НомерСтроки"+СуффиксОбластиТаблицы);
		ОбластьКодов  = Макет.ПолучитьОбласть("Строка"+СуффиксОбластиТаблицы+"|КолонкаКодов"+СуффиксОбластиТаблицы);
		ОбластьДанных = Макет.ПолучитьОбласть("Строка"+СуффиксОбластиТаблицы+"|Данные"+СуффиксОбластиТаблицы);
		Если ЕстьСкидки Тогда
			ОбластьСкидки = Макет.ПолучитьОбласть("Строка|Скидка");
		КонецЕсли;
		ОбластьСуммы  = Макет.ПолучитьОбласть("Строка"+СуффиксОбластиТаблицы+"|Сумма"+СуффиксОбластиТаблицы);

		Для каждого ВыборкаСтрокТовары Из ЗапросТовары Цикл 

			Если НЕ ЗначениеЗаполнено(ВыборкаСтрокТовары.Номенклатура) Тогда
				Сообщить(НСтр("ru='В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.';uk='В одному з рядків не заповнене значення номенклатури - рядок під час друку буде пропущений.'"), СтатусСообщения.Важное);
				Продолжить;
			КонецЕсли;

			ОбластьНомера.Параметры.НомерСтроки = ЗапросТовары.Индекс(ВыборкаСтрокТовары) + 1;
			ТабДокумент.Вывести(ОбластьНомера);
			
			Если ВыводитьКоды Тогда
				Если Колонка = "Артикул" Тогда
					ОбластьКодов.Параметры.Артикул = ВыборкаСтрокТовары.Артикул;
				Иначе
					ОбластьКодов.Параметры.Артикул = ВыборкаСтрокТовары.Код;
				КонецЕсли;
				ТабДокумент.Присоединить(ОбластьКодов);
			КонецЕсли;

			ОбластьДанных.Параметры.Заполнить(ВыборкаСтрокТовары);
			ОбластьДанных.Параметры.Товар = СокрЛП(ВыборкаСтрокТовары.Товар);
			ТабДокумент.Присоединить(ОбластьДанных);

			Если ЕстьСкидки Тогда
				ОбластьСкидки.Параметры.Заполнить(ВыборкаСтрокТовары);
				ТабДокумент.Присоединить(ОбластьСкидки);
			КонецЕсли;

			ОбластьСуммы.Параметры.Заполнить(ВыборкаСтрокТовары);
			ТабДокумент.Присоединить(ОбластьСуммы);
			
			СуммаБезСкидки = СуммаБезСкидки + ВыборкаСтрокТовары.СуммаБезСкидки;
			СуммаСкидки    = СуммаСкидки    + ВыборкаСтрокТовары.СуммаСкидки;
			Сумма          = Сумма       	+ ВыборкаСтрокТовары.Сумма;
			СуммаНДС       = СуммаНДС    	+ ВыборкаСтрокТовары.СуммаНДС;

		КонецЦикла;

		// Вывести Итого
		ОбластьНомера = Макет.ПолучитьОбласть("Итого"+СуффиксОбластиТаблицы+"|НомерСтроки"+СуффиксОбластиТаблицы);
		ОбластьКодов  = Макет.ПолучитьОбласть("Итого"+СуффиксОбластиТаблицы+"|КолонкаКодов"+СуффиксОбластиТаблицы);
		ОбластьДанных = Макет.ПолучитьОбласть("Итого"+СуффиксОбластиТаблицы+"|Данные"+СуффиксОбластиТаблицы);
		Если ЕстьСкидки Тогда
			ОбластьСкидки = Макет.ПолучитьОбласть("Итого|Скидка");
		КонецЕсли;
		ОбластьСуммы  = Макет.ПолучитьОбласть("Итого"+СуффиксОбластиТаблицы+"|Сумма"+СуффиксОбластиТаблицы);
		
		ТабДокумент.Вывести(ОбластьНомера);
		Если ВыводитьКоды Тогда
			ТабДокумент.Присоединить(ОбластьКодов);
		КонецЕсли;
		ТабДокумент.Присоединить(ОбластьДанных);
		
		Если ЕстьСкидки Тогда
			ОбластьСкидки.Параметры.ВсегоСуммаБезСкидки = ОбщегоНазначенияБПВызовСервера.ФорматСумм(СуммаБезСкидки);
			ОбластьСкидки.Параметры.ВсегоСуммаСкидки    = ОбщегоНазначенияБПВызовСервера.ФорматСумм(СуммаСкидки);
			ТабДокумент.Присоединить(ОбластьСкидки);
		КонецЕсли;
		
		ОбластьСуммы.Параметры.Всего = ОбщегоНазначенияБПВызовСервера.ФорматСумм(Сумма);
		ТабДокумент.Присоединить(ОбластьСуммы);

		// Вывести ИтогоНДС
		Если УчитыватьНДС Тогда
			// НДС
			ОбластьМакета = Макет.ПолучитьОбласть("ИтогоНДС");
			ОбластьМакета.Параметры.ВсегоНДС = ОбщегоНазначенияБПВызовСервера.ФорматСумм(СуммаНДС,,"""");
			ОбластьМакета.Параметры.НДС      = ?(Шапка.СуммаВключаетНДС, НСтр("ru='В том числе НДС:';uk='У тому числі ПДВ:'",КодЯзыкаПечать), НСтр("ru='Сумма НДС:';uk='Сума ПДВ:'",КодЯзыкаПечать));
			ТабДокумент.Вывести(ОбластьМакета);
			
			// всего с НДС (если сумма не включает НДС)
			Если НЕ Шапка.СуммаВключаетНДС Тогда
				ОбластьМакета = Макет.ПолучитьОбласть("ИтогоНДС");
				ОбластьМакета.Параметры.ВсегоНДС = ОбщегоНазначенияБПВызовСервера.ФорматСумм(Сумма + СуммаНДС);
				ОбластьМакета.Параметры.НДС      = НСтр("ru='Всего с НДС:';uk='Всього із ПДВ:'",КодЯзыкаПечать);
				ТабДокумент.Вывести(ОбластьМакета);
			КонецЕсли;
		КонецЕсли;

		// выведем таблицу с возвратной тарой
		Если ЗапросТара.Количество() > 0 Тогда
			// сделаем отступ от основной таблицы
			ОбластьПробел = Макет.ПолучитьОбласть("Пробел");
			ТабДокумент.Вывести(ОбластьПробел);
			
			ОбластьНомера = Макет.ПолучитьОбласть("ШапкаТаблицыТара|НомерСтрокиТара");
			ОбластьКодов  = Макет.ПолучитьОбласть("ШапкаТаблицыТара|КолонкаКодовТара");
			ОбластьДанных = Макет.ПолучитьОбласть("ШапкаТаблицыТара|ДанныеТара");
			
			ТабДокумент.Вывести(ОбластьНомера);
			Если ВыводитьКоды Тогда
				ОбластьКодов.Параметры.ИмяКолонкиКодов = Колонка;
				ТабДокумент.Присоединить(ОбластьКодов);
			КонецЕсли;
			ТабДокумент.Присоединить(ОбластьДанных);
			
			ОбластьКолонкаТара = Макет.Область("Тара");
			Если Не ВыводитьКоды Тогда
				ОбластьКолонкаТара.ШиринаКолонки = ОбластьКолонкаТара.ШиринаКолонки + 
				Макет.Область("КолонкаКодовТара").ШиринаКолонки;
			КонецЕсли;
			
	        ОбластьНомера = Макет.ПолучитьОбласть("СтрокаТара|НомерСтрокиТара");
			ОбластьКодов  = Макет.ПолучитьОбласть("СтрокаТара|КолонкаКодовТара");
			ОбластьДанных = Макет.ПолучитьОбласть("СтрокаТара|ДанныеТара");
			
			СуммаТара    = 0;
			
			Для каждого ВыборкаСтрокТара Из ЗапросТара Цикл 
				
				Если НЕ ЗначениеЗаполнено(ВыборкаСтрокТара.Номенклатура) Тогда
					Сообщить(НСтр("ru='В одной из строк не заполнено значение тары - строка при печати пропущена.';uk='В одному з рядків не заповнене значення тари - рядок під час друку буде пропущений.'"), СтатусСообщения.Важное);
					Продолжить;
				КонецЕсли;
				
				ОбластьНомера.Параметры.НомерСтроки = ЗапросТара.Индекс(ВыборкаСтрокТара) + 1;
				ТабДокумент.Вывести(ОбластьНомера);
				
				Если ВыводитьКоды Тогда
					Если Колонка = "Артикул" Тогда
						ОбластьКодов.Параметры.Артикул = ВыборкаСтрокТара.Артикул;
					Иначе
						ОбластьКодов.Параметры.Артикул = ВыборкаСтрокТара.Код;
					КонецЕсли;
					ТабДокумент.Присоединить(ОбластьКодов);
				КонецЕсли;
				
				ОбластьДанных.Параметры.Заполнить(ВыборкаСтрокТара);
				ОбластьДанных.Параметры.Товар = СокрЛП(ВыборкаСтрокТара.Товар);
				ТабДокумент.Присоединить(ОбластьДанных);
			
				СуммаТара = СуммаТара + ВыборкаСтрокТара.Сумма;
				
			КонецЦикла;
			
			// Вывести Итого
			ОбластьМакета = Макет.ПолучитьОбласть("ИтогоТара");
			ОбластьМакета.Параметры.Всего = ОбщегоНазначенияБПВызовСервера.ФорматСумм(СуммаТара);
			ТабДокумент.Вывести(ОбластьМакета);
			
			// сделаем отступ 
			ТабДокумент.Вывести(ОбластьПробел);
		КонецЕсли;
		
		// Вывести Сумму прописью
		ОбластьМакета = Макет.ПолучитьОбласть("СуммаПрописью");
		СуммаКПрописи = Сумма + ?(Шапка.СуммаВключаетНДС, 0, СуммаНДС);
		ОбластьМакета.Параметры.ИтоговаяСтрока = НСтр("ru='Всего наименований ';uk='Всього найменувань '",КодЯзыкаПечать) + ЗапросТовары.Количество() + "," +
												 НСтр("ru=' на сумму ';uk=' на суму '",КодЯзыкаПечать)  + ОбщегоНазначенияБПВызовСервера.ФорматСумм(СуммаКПрописи, Шапка.ВалютаДокумента)
												 + ?(ЗапросТара.Количество() = 0, "",  НСтр("ru='; возвратная тара ';uk='; зворотна тара '",КодЯзыкаПечать) + ЗапросТара.Количество() + НСтр("ru=', на сумму ';uk=', на суму '",КодЯзыкаПечать) + ОбщегоНазначенияБПВызовСервера.ФорматСумм(СуммаТара, Шапка.ВалютаДокумента)) + ".";
												 
		ОбластьМакета.Параметры.СуммаПрописью  = ОбщегоНазначенияБПВызовСервера.СформироватьСуммуПрописью(СуммаКПрописи, Шапка.ВалютаДокумента,КодЯзыкаПечать)
		 										 + ?(НЕ УчитыватьНДС, "", Символы.ПС + НСтр("ru='В т.ч. НДС: ';uk='У т.ч. ПДВ: '",КодЯзыкаПечать) + ОбщегоНазначенияБПВызовСервера.СформироватьСуммуПрописью(СуммаНДС, Шапка.ВалютаДокумента, КодЯзыкаПечать));

		ТабДокумент.Вывести(ОбластьМакета);

		// Вывести подписи
		Если СПечатью Тогда
			ДанныеКартинкиПечать  = Справочники.Организации.ДвоичныеДанныеКартинкиОрганизации(Шапка.Поставщик, "ФайлФаксимильнаяПечать");
			ДанныеКартинкиПодпись = Справочники.Организации.ДвоичныеДанныеКартинкиОрганизации(Шапка.Поставщик, "ФайлФаксимильнаяПодпись");
		Иначе
			ДанныеКартинкиПечать  = Неопределено;
			ДанныеКартинкиПодпись = Неопределено;
		КонецЕсли; 
		
		Если Не ЗначениеЗаполнено(ДанныеКартинкиПечать) И ЗначениеЗаполнено(ДанныеКартинкиПодпись) Тогда
			ОбластьМакета = Макет.ПолучитьОбласть("ПодвалСчетаСФаксимильнойПодписью");
			ОбластьМакета.Рисунки.ФаксимильнаяПодписьБезПечати.Картинка = Новый Картинка(ДанныеКартинкиПодпись);
		ИначеЕсли ЗначениеЗаполнено(ДанныеКартинкиПечать) Или ЗначениеЗаполнено(ДанныеКартинкиПодпись) Тогда
			ОбластьМакета = Макет.ПолучитьОбласть("ПодвалСчетаСФаксимильнойПечатьюИПодписью");
			ОбластьМакета.Рисунки.ФаксимильнаяПечать.Картинка  = Новый Картинка(ДанныеКартинкиПечать);
			ОбластьМакета.Рисунки.ФаксимильнаяПодпись.Картинка = Новый Картинка(ДанныеКартинкиПодпись);
		Иначе 
			ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
		КонецЕсли;
		
		ОбластьМакета.Параметры.Заполнить(Шапка);
		ТабДокумент.Вывести(ОбластьМакета);
	
		// В табличном документе зададим имя области, в которую был 
		// выведен объект. Нужно для возможности печати покомплектно.
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабДокумент, 
			НомерСтрокиНачало, ОбъектыПечати, Ссылка);

	КонецЦикла;	
	

	Возврат ТабДокумент;

КонецФункции // ПечатьСчетаЗаказа()

Функция ПечатьДокументаДляЭДО(ДокументСсылка) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	СтруктураПоказателей = Новый Структура();
	СтруктураПоказателей.Вставить("ПервичныйДокумент",	 Новый Структура());	   // данные шапки
	
	СтруктураПоказателей.ПервичныйДокумент.Вставить("R", Новый ТаблицаЗначений()); // данные табличной части
	СтруктураПоказателей.ПервичныйДокумент.R.Колонки.Добавить("Наименование");
	СтруктураПоказателей.ПервичныйДокумент.R.Колонки.Добавить("КодАртикул");
	СтруктураПоказателей.ПервичныйДокумент.R.Колонки.Добавить("Количество");
	СтруктураПоказателей.ПервичныйДокумент.R.Колонки.Добавить("ЕдиницаИзмерения");
	СтруктураПоказателей.ПервичныйДокумент.R.Колонки.Добавить("ЕдиницаИзмеренияКод");
	СтруктураПоказателей.ПервичныйДокумент.R.Колонки.Добавить("Цена");
	СтруктураПоказателей.ПервичныйДокумент.R.Колонки.Добавить("СуммаБезСкидки");
	СтруктураПоказателей.ПервичныйДокумент.R.Колонки.Добавить("СуммаСкидки");
	СтруктураПоказателей.ПервичныйДокумент.R.Колонки.Добавить("Сумма");
	СтруктураПоказателей.ПервичныйДокумент.R.Колонки.Добавить("СуммаНДС");
	СтруктураПоказателей.ПервичныйДокумент.R.Колонки.Добавить("ТипНоменклатуры");
	СтруктураПоказателей.ПервичныйДокумент.R.Колонки.Добавить("СтавкаНДС");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ДокументСсылка);
	Запрос.УстановитьПараметр("НДС20", Перечисления.СтавкиНДС.НДС20);
	Запрос.УстановитьПараметр("НДС7",  Перечисления.СтавкиНДС.НДС7);
	
	Запрос.Текст ="
	|ВЫБРАТЬ 
	|	СУММА(ТЧ.СуммаНДС)    КАК СуммаНДСТовары,
	|	КОЛИЧЕСТВО(*) 		  КАК КоличествоТовары,
	|	СУММА(ТЧ.СуммаБезСкидки) КАК СуммаБезСкидкиТовары,
	|	СУММА(ТЧ.СуммаСкидки) КАК СуммаСкидкиТовары
	|ПОМЕСТИТЬ ТОВАРЫ
	|ИЗ
	|	Документ.СчетНаОплатуПокупателю.Товары КАК ТЧ
	|
	|ГДЕ
	|	ТЧ.Ссылка = &ТекущийДокумент
	|;
	|ВЫБРАТЬ 
	|	СУММА(ТЧ.СуммаНДС) 		КАК СуммаНДСУслуги,
	|	КОЛИЧЕСТВО(*) 			КАК КоличествоУслуги,
	|	СУММА(ТЧ.СуммаБезСкидки) КАК СуммаБезСкидкиУслуги,
	|	СУММА(ТЧ.СуммаСкидки) 	КАК СуммаСкидкиУслуги
	|ПОМЕСТИТЬ Услуги
	|ИЗ
	|	Документ.СчетНаОплатуПокупателю.Услуги КАК ТЧ
	|
	|ГДЕ
	|	ТЧ.Ссылка = &ТекущийДокумент
	|;
	|ВЫБРАТЬ 
	|	СУММА(Сумма) КАК СуммаВозвратнойТары
	|ПОМЕСТИТЬ Тара
	|ИЗ
	|	Документ.СчетНаОплатуПокупателю.ВозвратнаяТара КАК ТЧ
	|
	|ГДЕ
	|	ТЧ.Ссылка = &ТекущийДокумент
	|;
	|ВЫБРАТЬ
	|	Номер,
	|	Дата,
	
	|	Организация КАК Организация,
	|	Организация КАК Поставщик,
	
	|	Контрагент  КАК Покупатель,
	|	Контрагент.КодФилиала  КАК ПокупательКодФилиала,
	
	|	ДоговорКонтрагента.Дата  				 КАК ДоговорДата,
	|	ДоговорКонтрагента.Номер 				 КАК ДоговорНомер,
	
	|   СтруктурнаяЕдиница, 
	|   СтруктурнаяЕдиница.Банк КАК СтруктурнаяЕдиницаБанк, 
	|   СтруктурнаяЕдиница.Банк.Код КАК СтруктурнаяЕдиницаБанкКод, 
	|   СтруктурнаяЕдиница.НомерСчета КАК СтруктурнаяЕдиницаНомерСчета, 
	
	|	Ответственный.ФизическоеЛицо.Наименование КАК Отпустил,
	
	|	СуммаДокумента,
	
	|	ЕстьNULL(СуммаНДСТовары, 0) КАК СуммаНДСТовары,
	|	ЕстьNULL(СуммаНДСУслуги, 0) КАК СуммаНДСУслуги,
	
	|	ЕстьNULL(КоличествоТовары, 0) 	  КАК КоличествоТовары,
	|	ЕстьNULL(КоличествоУслуги, 0) 	  КАК КоличествоУслуги,
	|	ЕстьNULL(СуммаБезСкидкиТовары, 0) КАК СуммаБезСкидкиТовары,
	|	ЕстьNULL(СуммаБезСкидкиУслуги, 0) КАК СуммаБезСкидкиУслуги,
	|	ЕстьNULL(СуммаСкидкиТовары, 0) 	  КАК СуммаСкидкиТовары,
	|	ЕстьNULL(СуммаСкидкиУслуги, 0) 	  КАК СуммаСкидкиУслуги,
	|	ЕстьNULL(СуммаВозвратнойТары, 0)  КАК СуммаВозвратнойТары,
	
	|	ВалютаДокумента,
	
	|	СуммаВключаетНДС
	|ИЗ
	|	Документ.СчетНаОплатуПокупателю КАК ПервичныйДокумент
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ Товары КАК Товары ПО Истина
	|ЛЕВОЕ СОЕДИНЕНИЕ Услуги КАК Услуги ПО Истина
	|ЛЕВОЕ СОЕДИНЕНИЕ Тара   КАК Тара   ПО Истина 
	|
	|ГДЕ
	|	ПервичныйДокумент.Ссылка = &ТекущийДокумент";
	
	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();
	
	КодЯзыкаПечать = "uk";	
	СведенияОПоставщике = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Шапка.Поставщик, Шапка.Дата,,Шапка.СтруктурнаяЕдиница,КодЯзыкаПечать);
	СведенияОПокупателе = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Шапка.Покупатель, Шапка.Дата,,,КодЯзыкаПечать);
	
	НазваниеОрганизации = СведенияОПоставщике.ПолноеНаименование;
	ЕДРПОУОрганизации	= БухгалтерскийУчетПереопределяемый.ПолучитьКодОрганизации(СведенияОПоставщике);
	
	
	СтруктураПоказателей.ПервичныйДокумент.Вставить("НомерДок", ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(Шапка.Номер, Истина, Истина));
	СтруктураПоказателей.ПервичныйДокумент.Вставить("ДатаДок",  Шапка.Дата);
	
	СтруктураПоказателей.ПервичныйДокумент.Вставить("ПоставщикНаименование",  СведенияОПоставщике.ПолноеНаименование);
	СтруктураПоказателей.ПервичныйДокумент.Вставить("ПоставщикКод",   	  	  ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОПоставщике, "КодПоЕДРПОУ,КодПоДРФО,",,КодЯзыкаПечать));
	СтруктураПоказателей.ПервичныйДокумент.Вставить("ПоставщикКодЧисло",	  "" + СведенияОПоставщике.КодПоЕДРПОУ + СведенияОПоставщике.КодПоДРФО);
	
	СтруктураПоказателей.ПервичныйДокумент.Вставить("ПоставщикИНН",   	  	  СведенияОПоставщике.ИНН);
	СтруктураПоказателей.ПервичныйДокумент.Вставить("ПоставщикНомерСвидетельства", СведенияОПоставщике.НомерСвидетельства);
	
	//СтруктураПоказателей.ПервичныйДокумент.Вставить("ПоставщикБанк",  		Банк);
	//СтруктураПоказателей.ПервичныйДокумент.Вставить("ПоставщикМФО",  		МФО);
	//СтруктураПоказателей.ПервичныйДокумент.Вставить("ПоставщикНомерСчета",  НомерСчета);
	СтруктураПоказателей.ПервичныйДокумент.Вставить("ПоставщикБанк",  		СведенияОПоставщике.Банк);
	СтруктураПоказателей.ПервичныйДокумент.Вставить("ПоставщикМФО",  		СведенияОПоставщике.МФО);
	СтруктураПоказателей.ПервичныйДокумент.Вставить("ПоставщикНомерСчета",  СведенияОПоставщике.НомерСчета);
	СтруктураПоказателей.ПервичныйДокумент.Вставить("ПоставщикЮридическийАдрес", СведенияОПоставщике.ЮридическийАдрес);
	СтруктураПоказателей.ПервичныйДокумент.Вставить("ПоставщикТелефоны",   		СведенияОПоставщике.Телефоны);
	СтруктураПоказателей.ПервичныйДокумент.Вставить("ПоставщикСистемаНалогообложения", СведенияОПоставщике.ИнформацияОСтатусеПлательщикаНалогов);
	
	СтруктураПоказателей.ПервичныйДокумент.Вставить("ПокупательНаименование", СведенияОПокупателе.ПолноеНаименование);
	СтруктураПоказателей.ПервичныйДокумент.Вставить("ПокупательТелефоны", 	  СведенияОПокупателе.Телефоны);
	СтруктураПоказателей.ПервичныйДокумент.Вставить("ПокупательКод", 		  ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОПокупателе, "КодПоЕДРПОУ,КодПоДРФО,",,КодЯзыкаПечать));
	ПокупательКодФилиала = СокрЛП(Шапка.ПокупательКодФилиала); 
	Если Найти(ПокупательКодФилиала, "@") > 0 Тогда
		ПокупательКодФилиала = Лев(ПокупательКодФилиала, Найти(ПокупательКодФилиала, "@") - 1);
	КонецЕсли;
	СтруктураПоказателей.ПервичныйДокумент.Вставить("ПокупательКодФилиала",     ПокупательКодФилиала);
	
	СтруктураПоказателей.ПервичныйДокумент.Вставить("ДоговорНомер",  Шапка.ДоговорНомер);
	СтруктураПоказателей.ПервичныйДокумент.Вставить("ДоговорДата",   Шапка.ДоговорДата);
	
	СтруктураПоказателей.ПервичныйДокумент.Вставить("СуммаДокБезНДС", Шапка.СуммаДокумента - Шапка.СуммаНДСТовары - Шапка.СуммаНДСУслуги);
	
	СтруктураПоказателей.ПервичныйДокумент.Вставить("СуммаДок", Шапка.СуммаДокумента);
	СтруктураПоказателей.ПервичныйДокумент.Вставить("СуммаДокПрописью", ОбщегоНазначенияБПВызовСервера.СформироватьСуммуПрописью(Шапка.СуммаДокумента, Шапка.ВалютаДокумента, КодЯзыкаПечать));
	
	СтруктураПоказателей.ПервичныйДокумент.Вставить("СуммаНДСДок", Шапка.СуммаНДСТовары + Шапка.СуммаНДСУслуги);
	СтруктураПоказателей.ПервичныйДокумент.Вставить("СуммаНДСДокПрописью", ОбщегоНазначенияБПВызовСервера.СформироватьСуммуПрописью(Шапка.СуммаНДСТовары + Шапка.СуммаНДСУслуги, Шапка.ВалютаДокумента, КодЯзыкаПечать));
	
	СтруктураПоказателей.ПервичныйДокумент.Вставить("СуммаВозвратнойТары", Шапка.СуммаВозвратнойТары);
	
	СтруктураПоказателей.ПервичныйДокумент.Вставить("КоличествоНаименований", Шапка.КоличествоТовары + Шапка.КоличествоУслуги);
	
	СтруктураПоказателей.ПервичныйДокумент.Вставить("СуммаБезСкидки", Шапка.СуммаБезСкидкиТовары + Шапка.СуммаБезСкидкиУслуги);
	СтруктураПоказателей.ПервичныйДокумент.Вставить("СуммаСкидки", Шапка.СуммаСкидкиТовары + Шапка.СуммаСкидкиУслуги);
	
	СтруктураПоказателей.ПервичныйДокумент.Вставить("ВыписалДок", Шапка.Отпустил);
	
	ЧастьЗапросаДляВыбораСодержанияУслуг = ОбщегоНазначенияБПВызовСервера.ПолучитьЧастьЗапросаДляВыбораСодержанияУслуг("ПервичныйДокумент");
	
	Запрос.Текст = "ВЫБРАТЬ
	|	ВЫРАЗИТЬ(Номенклатура.НаименованиеПолное КАК Строка(1000)) КАК Наименование,
	
	|	Номенклатура.Артикул КАК Артикул,
	|	Номенклатура.Код КАК Код,
	
	|	Количество,
	|	ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ЕдиницаИзмерения.Код КАК ЕдиницаИзмеренияКод,
	
	|	Цена 			КАК Цена,
	|	СуммаБезСкидки 	КАК СуммаБезСкидки,
	|	СуммаСкидки 	КАК СуммаСкидки,
	|	Сумма 			КАК Сумма,
	|	СуммаНДС 		КАК СуммаНДС,
	
	|	СтавкаНДС КАК СтавкаНДС,
	|	""Т"" КАК ТипНоменклатуры,
	
	|	НомерСтроки КАК НомерСтроки,
	|    1 КАК ID
	|ИЗ
	|	Документ.СчетНаОплатуПокупателю.Товары КАК ПервичныйДокумент
	|
	|ГДЕ
	|	ПервичныйДокумент.Ссылка = &ТекущийДокумент
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	" + ЧастьЗапросаДляВыбораСодержанияУслуг + ",
	|	Номенклатура.Артикул КАК Артикул,
	|	Номенклатура.Код КАК Код,
	|	Количество,
	
	|	Номенклатура.БазоваяЕдиницаИзмерения.Наименование КАК ЕдиницаИзмерения,
	|	Номенклатура.БазоваяЕдиницаИзмерения.Код КАК ЕдиницаИзмеренияКод,
	
	|	Цена 			КАК Цена,
	|	СуммаБезСкидки 	КАК СуммаБезСкидки,
	|	СуммаСкидки 	КАК СуммаСкидки,
	|	Сумма 			КАК Сумма,
	|	СуммаНДС 		КАК СуммаНДС,
	
	|	СтавкаНДС КАК СтавкаНДС,
	|	""П"" КАК ТипНоменклатуры,
	
	|	НомерСтроки КАК НомерСтроки,
	|    2 КАК ID
	|ИЗ
	|	Документ.СчетНаОплатуПокупателю.Услуги КАК ПервичныйДокумент
	|
	|ГДЕ
	|	ПервичныйДокумент.Ссылка = &ТекущийДокумент
	|
	|УПОРЯДОЧИТЬ ПО
	|    ID,
	|	НомерСтроки";
	
	ВыборкаТовары = Запрос.Выполнить().Выбрать();
	
	Если Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить() = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул Тогда
		ДопКолонка = "Артикул";
	Иначе
		ДопКолонка = "Код";
	КонецЕсли;
	СтруктураПоказателей.ПервичныйДокумент.Вставить("ТипКода", ДопКолонка);
	
	Пока ВыборкаТовары.Следующий() Цикл
		СтрокаДок = СтруктураПоказателей.ПервичныйДокумент.R.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаДок, ВыборкаТовары);
		
		СтрокаДок.СтавкаНДС = УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(ВыборкаТовары.СтавкаНДС);
		Если ВыборкаТовары.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС Тогда
			СтрокаДок.СтавкаНДС = "Б";
		ИначеЕсли ВыборкаТовары.СтавкаНДС = Перечисления.СтавкиНДС.НеНДС Тогда	
			СтрокаДок.СтавкаНДС = "Н";
		КонецЕсли;
		
		СтрокаДок.КодАртикул = ВыборкаТовары[ДопКолонка];
	КонецЦикла;
	
	Возврат СтруктураПоказателей;
		
КонецФункции 

#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Заполняет список команд отправки по электронной почте.
// 
// Параметры:
//   КомандыОтправки - ТаблицаЗначений - состав полей см. в функции ОтправкаПочтовыхСообщений.КомандыОтправки.
//
Процедура ДобавитьКомандыОтправки(КомандыОтправки) Экспорт
	
	КомандаОтправки = КомандыОтправки.Добавить();
	КомандаОтправки.Идентификатор 				= "СчетЗаказ";
	КомандаОтправки.Представление 				= НСтр("ru='Счет на оплату';uk='Рахунок на оплату'");
	КомандаОтправки.Порядок                     = 10;
	
	КомандаОтправки = КомандыОтправки.Добавить();
	КомандаОтправки.Идентификатор 				= "СчетЗаказСПечатью";
	КомандаОтправки.Представление 				= НСтр("ru='Счет на оплату (с печатью и подписями) ';uk='Рахунок на оплату (з печаткою і підписами) '");
	КомандаОтправки.Порядок                     = 20;
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыИФункцииПечати

Процедура ВывестиЗаголовокПредупреждение(Организация, ТабличныйДокумент, Макет)
	
	Если Не ЗначениеЗаполнено(Макет.Области.Найти("ЗаголовокПредупреждениеСЛоготипом")) Тогда 
		Возврат;
	КонецЕсли;
	
	ДвоичныеДанныеКартинки = Справочники.Организации.ДвоичныеДанныеКартинкиОрганизации(Организация, "ФайлЛоготип");
	
	Если ЗначениеЗаполнено(ДвоичныеДанныеКартинки) Тогда
		ОбластьМакета = Макет.ПолучитьОбласть("ЗаголовокПредупреждениеСЛоготипом");
		Попытка
			ОбластьМакета.Рисунки.Логотип.Картинка = Новый Картинка(ДвоичныеДанныеКартинки);
		Исключение
		КонецПопытки;
		ТабличныйДокумент.Вывести(ОбластьМакета);
	Иначе
		ОбластьМакета = Макет.ПолучитьОбласть("ЗаголовокПредупреждение");
		ТабличныйДокумент.Вывести(ОбластьМакета);
	КонецЕсли;

КонецПроцедуры

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	// Счет на оплату
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "СчетЗаказ";
	КомандаПечати.Представление = НСтр("ru='Счет на оплату';uk='Рахунок на оплату'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечати";
	
	// Счет на оплату (с печатью и подписями) 
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "СчетЗаказСПечатью";
	КомандаПечати.Представление = НСтр("ru='Счет на оплату (с печатью и подписями) ';uk='Рахунок на оплату (з печаткою і підписами) '");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечати";
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ДляВыгрузкиВ1СЗвит";
	КомандаПечати.Представление = НСтр("ru='Счет (для обмена через ""FREDO ДокМен"")';uk= 'Рахунок (для обміну через ""FREDO ДокМен"")'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБПКлиент.ОткрытьПечатнуюФормуПредварительногоПросмотраЭДО";
	
	// Реестр документов
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "Реестр";
	КомандаПечати.Представление = НСтр("ru='Реестр документов';uk='Реєстр документів'");
	КомандаПечати.ЗаголовокФормы= НСтр("ru='Реестр документов ""Счет на оплату покупателю""';uk='Реєстр документів ""Рахунок на оплату покупцю""'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечатиРеестраДокументов";
	КомандаПечати.СписокФорм    = "ФормаСписка";
	КомандаПечати.Порядок       = 100;
	
КонецПроцедуры

// Процедура формирования предварительной печатной формы документа (образец)
//
// Вызывается из карточки "Организации" для просмотра размещения логотипов
//
Функция ПечатьПредварительныйПросмотрСчетаНаОплату(Организация, ОбъектыПечати, ПараметрыВывода)
	УстановитьПривилегированныйРежим(Истина);
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	ЗначениеДаты = ТекущаяДатаСеанса();
	НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
	ТабличныйДокумент.АвтоМасштаб = Истина;
	ТабличныйДокумент.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_СчетЗаказ_СчетЗаказ";
	Макет = Документы.СчетНаОплатуПокупателю.ПолучитьМакет("ПФ_MXL_СчетЗаказ");
	
	КодЯзыкаПечать = ПараметрыВывода.КодЯзыкаДляМногоязычныхПечатныхФорм;
	Макет.КодЯзыкаМакета = КодЯзыкаПечать;
	
	ВывестиЗаголовокПредупреждение(Организация, ТабличныйДокумент, Макет);
	
	ОбластьМакета = Макет.ПолучитьОбласть("ЗаголовокСчета");
	СведенияОПоставщике = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Организация, ЗначениеДаты);
	ОбластьМакета.Параметры.НазваниеОрганизации = СведенияОПоставщике.ПолноеНаименование;
	ОбластьМакета.Параметры.ЕДРПОУОрганизации	= БухгалтерскийУчетПереопределяемый.ПолучитьКодОрганизации(СведенияОПоставщике);
	
	Банк		= СведенияОПоставщике.Банк;
	МФО	 		= СведенияОПоставщике.МФО;
	НомерСчета 	= СведенияОПоставщике.НомерСчета;
	
	ОбластьМакета.Параметры.БанкОрганизации					= Банк;
	ОбластьМакета.Параметры.МФОБанкаОрганизации	            = МФО;
	ОбластьМакета.Параметры.НомерРасчетногоСчетаОрганизации = НомерСчета;

	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	ОбластьМакета.Параметры.ТекстЗаголовка = ОбщегоНазначенияБПВызовСервера.СформироватьЗаголовокДокумента(Неопределено, "Счет на оплату");
	ТабличныйДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");
	ОбластьМакета.Параметры.ПредставлениеПоставщика = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОПоставщике, "ПолноеНаименование,",,КодЯзыкаПечать);	
	ОбластьМакета.Параметры.РеквизитыПоставщика =  НСтр("ru='Т/с ';uk='П/р '",КодЯзыкаПечать) + НомерСчета + НСтр("ru=', Банк ';uk=', Банк '",КодЯзыкаПечать) + Банк + НСтр("ru=', МФО ';uk=', МФО '",КодЯзыкаПечать) + МФО + Символы.ПС + 
												ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОПоставщике, "ЮридическийАдрес,Телефоны,/,КодПоЕДРПОУ,КодПоДРФО,ИНН,НомерСвидетельства,/,ИнформацияОСтатусеПлательщикаНалогов,",,КодЯзыкаПечать);
	ТабличныйДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Покупатель");
	ОбластьМакета.Параметры.ПредставлениеПокупателя = "Контрагент";
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	ОбластьМакета = Макет.ПолучитьОбласть("ШапкаТаблицы");
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	ОбластьМакета = Макет.ПолучитьОбласть("Строка");
	ОбластьМакета.Параметры.ЕдиницаИзмерения = "шт";
	ОбластьМакета.Параметры.Товар = "Товар";
	ОбластьМакета.Параметры.Цена = 120;
	ОбластьМакета.Параметры.Количество = 10;
	ОбластьМакета.Параметры.Сумма = 1200;
	ОбластьМакета.Параметры.Номенклатура = "Товар";
	ОбластьМакета.Параметры.НомерСтроки = 1;
	ОбластьМакета.Параметры.Артикул = "А-00001";
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	ОбластьМакета = Макет.ПолучитьОбласть("Итого");
	ОбластьМакета.Параметры.Всего = "1200,00";
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	ОбластьМакета = Макет.ПолучитьОбласть("ИтогоНДС");
	ОбластьМакета.Параметры.ВсегоНДС = "200,00";;
	ОбластьМакета.Параметры.НДС = НСтр("ru='В том числе НДС';uk= 'В тому числі ПДВ'", КодЯзыкаПечать);
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	ОбластьМакета = Макет.ПолучитьОбласть("СуммаПрописью");
	ОбластьМакета.Параметры.ИтоговаяСтрока = НСтр("ru='Всего наименований 10, на сумму 1200 гривен';uk= 'Всього найменувань 10, на суму 1200 гривень '", КодЯзыкаПечать);
	ОбластьМакета.Параметры.СуммаПрописью = НСтр("ru='Одна тысяча двести гривен 00 копеек';uk= 'Одна тисяча двісті гривень 00 копійок'", КодЯзыкаПечать);
	ТабличныйДокумент.Вывести(ОбластьМакета);

	ДвоичныеДанныеКартинкиПечать 	= Справочники.Организации.ДвоичныеДанныеКартинкиОрганизации(Организация, "ФайлФаксимильнаяПечать");
	ДвоичныеДанныеКартинкиПодпись	= Справочники.Организации.ДвоичныеДанныеКартинкиОрганизации(Организация, "ФайлФаксимильнаяПодпись");
	Если Не ЗначениеЗаполнено(ДвоичныеДанныеКартинкиПечать) И ЗначениеЗаполнено(ДвоичныеДанныеКартинкиПодпись) Тогда
		ОбластьМакета = Макет.ПолучитьОбласть("ПодвалСчетаСФаксимильнойПодписью");
		ОбластьМакета.Рисунки.ФаксимильнаяПодписьБезПечати.Картинка = Новый Картинка(ДвоичныеДанныеКартинкиПодпись);
	ИначеЕсли ЗначениеЗаполнено(ДвоичныеДанныеКартинкиПечать) Или ЗначениеЗаполнено(ДвоичныеДанныеКартинкиПодпись) Тогда
		ОбластьМакета = Макет.ПолучитьОбласть("ПодвалСчетаСФаксимильнойПечатьюИПодписью");
		ОбластьМакета.Рисунки.ФаксимильнаяПечать.Картинка  = Новый Картинка(ДвоичныеДанныеКартинкиПечать);
		ОбластьМакета.Рисунки.ФаксимильнаяПодпись.Картинка = Новый Картинка(ДвоичныеДанныеКартинкиПодпись);
	Иначе
		ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
	КонецЕсли;
	ТабличныйДокумент.Вывести(ОбластьМакета);
	Возврат ТабличныйДокумент;
	
КонецФункции //ПечатьПредварительныйПросмотрСчетаНаОплату()

Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	ПараметрыВывода.ДоступнаПечатьПоКомплектно = Истина;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПредварительныйПросмотрПечатнойФормыСчетНаОплату") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "ПредварительныйПросмотрПечатнойФормыСчетНаОплату", НСтр("ru='Счет на оплату';uk='Рахунок на оплату'"), 
			ПечатьПредварительныйПросмотрСчетаНаОплату(МассивОбъектов, ОбъектыПечати, ПараметрыВывода), , , , Истина);
		ЗаполнитьПараметрыЭлектроннойПочты = Ложь;
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "СчетЗаказ") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "СчетЗаказ", НСтр("ru='Счет на оплату';uk='Рахунок на оплату'"), 
			ПечатьДокумента(МассивОбъектов, ОбъектыПечати, ПараметрыВывода),,"Документ.СчетНаОплатуПокупателю.ПФ_MXL_СчетЗаказ", , Истина);
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "СчетЗаказСПечатью") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "СчетЗаказСПечатью", НСтр("ru='Счет на оплату';uk='Рахунок на оплату'"), 
			ПечатьДокумента(МассивОбъектов, ОбъектыПечати, ПараметрыВывода, Истина),,"Документ.СчетНаОплатуПокупателю.ПФ_MXL_СчетЗаказ", , Истина);
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьДополнительныеРеквизитыДляРеестра() Экспорт
	
	Результат = Новый Структура("Информация", "Контрагент");
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецЕсли