#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

Перем мВалютаРегламентированногоУчета;
Перем мУчетнаяПолитика;
Перем мИспользоватьОборотнуюНоменклатуру;
Перем мРазделятьПоСтавкамНДС;
Перем мУчетВПродажныхЦенах;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

Процедура ОбновитьПараметрыУчетнойПолитики() Экспорт

	УчетнаяПолитикаНеЗадана = Ложь;
	мУчетнаяПолитика = Новый Структура;
	мУчетнаяПолитика.Вставить("ЕстьНДС"            , УчетнаяПолитика.ПлательщикНДС(Организация, НачалоМесяца(Дата)));
	мУчетнаяПолитика.Вставить("СпособОценкиТоваровВРознице" , УчетнаяПолитика.СпособОценкиТоваровВРознице(Организация, НачалоМесяца(Дата)));
	
	мИспользоватьОборотнуюНоменклатуру = БухгалтерскийУчетВызовСервераПовтИсп.ИспользуетсяОборотнаяНоменклатураВНТТ();
	мРазделятьПоСтавкамНДС             = БухгалтерскийУчетВызовСервераПовтИсп.ИспользуетсяРазделениеПоСтавкамНДСВНТТ();

	мУчетВПродажныхЦенах = Ложь;
	Если НЕ УчетнаяПолитикаНеЗадана Тогда	
		Если (мУчетнаяПолитика.СпособОценкиТоваровВРознице = Перечисления.СпособыОценкиТоваровВРознице.ПоПродажнойСтоимости) Тогда
			мУчетВПродажныхЦенах = Истина;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры
 
// Процедура выполняет заполнение табличной части по остаткам.
//
Процедура ЗаполнитьТовары(РежимЗаполнения = "ЗаполнитьПоОстаткам") Экспорт

	Запрос = Новый Запрос;

	// Установим параметры запроса
	ПорядокСубконто = Новый Массив();
	ПорядокСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);
	ПорядокСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады);

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Склад",           Склад);
	Запрос.УстановитьПараметр("КонецПериода",    Дата);
	Запрос.УстановитьПараметр("Организация",     Организация);
	Запрос.УстановитьПараметр("Счет",     		 ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахАТТ);
	Запрос.УстановитьПараметр("ПорядокСубконто", ПорядокСубконто);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	Остатки.Субконто1 КАК Номенклатура,
	|	СУММА(Остатки.СуммаОстатокДт) КАК СуммаОстаток,
	|	СУММА(Остатки.КоличествоОстатокДт) КАК КоличествоОстаток
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(&КонецПериода, Счет = &Счет, &ПорядокСубконто, Организация = &Организация И Субконто2 = &Склад) КАК Остатки
	|
	|ГДЕ
	|	Остатки.КоличествоОстаток > 0
	|
	|СГРУППИРОВАТЬ ПО
	|	Остатки.Субконто1
	|";

	Выборка        = Запрос.Выполнить().Выбрать();
	ТипЦенСклада   = Склад.ТипЦенРозничнойТорговли;
	Валюта         = мВалютаРегламентированногоУчета;
	СтруктураКурса = МодульВалютногоУчета.ПолучитьКурсВалюты(Валюта, Дата);
	Курс           = СтруктураКурса.Курс;
	Кратность      = СтруктураКурса.Кратность;

	Пока Выборка.Следующий() Цикл

		ДобавитьСтроку     = Истина;
		Номенклатура       = Выборка.Номенклатура;
		Количество         = Выборка.КоличествоОстаток;
		ЦенаВРозницеСтарая = ?(Выборка.КоличествоОстаток = 0, 0, Выборка.СуммаОстаток / Выборка.КоличествоОстаток);

		Если РежимЗаполнения = "ЗаполнитьПоЦенам" Тогда
			ЦенаПоТипуЦен = Ценообразование.ПолучитьЦенуНоменклатуры(Номенклатура, ТипЦенСклада, Дата, Валюта, Курс, Кратность);

			Если ЦенаПоТипуЦен  > 0
			   И ЦенаПоТипуЦен <> ЦенаВРозницеСтарая 
			   И Количество > 0 Тогда
				ЦенаВРознице = ЦенаПоТипуЦен;
			Иначе
				ДобавитьСтроку = Ложь;
			КонецЕсли;
		Иначе
			ЦенаВРознице = Ценообразование.ПолучитьЦенуНоменклатуры(Номенклатура, ТипЦенСклада, Дата, Валюта, Курс, Кратность);
		КонецЕсли;

		Если ДобавитьСтроку Тогда
			СтрокаТабличнойЧасти = Товары.Добавить();

			СтрокаТабличнойЧасти.Номенклатура               = Номенклатура;
			СтрокаТабличнойЧасти.Количество                 = Количество;
			СтрокаТабличнойЧасти.ЦенаВРозницеСтарая         = ЦенаВРозницеСтарая;
			СтрокаТабличнойЧасти.ЦенаВРознице               = ЦенаВРознице;
		КонецЕсли;
	КонецЦикла;
	Документы.ПереоценкаТоваровВРознице.ЗаполнитьНалоговыеРеквизитыВТабЧастиТовары(ЭтотОбъект);

КонецПроцедуры // ЗаполнитьТовары()





////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТоварам - результат запроса по табличной части "Товары",
//  СтруктураШапкиДокумента   - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблиица значений.
//
Функция ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента)

	ТаблицаТоваров = РезультатЗапросаПоТоварам.Выгрузить();
	ТаблицаТоваров.Колонки.Добавить("МинусКоличество", ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповЧисла(15,3));
	
	ТаблицаТоваров.Колонки.Добавить("Склад");
	ТаблицаТоваров.Колонки.Добавить("Регистратор");
	ТаблицаТоваров.Колонки.Добавить("Организация");
	ТаблицаТоваров.Колонки.Добавить("СчетУчетаБУ");
	ТаблицаТоваров.Колонки.Добавить("КорСчетСписанияБУ");
	
	ТаблицаТоваров.ЗаполнитьЗначения(СтруктураШапкиДокумента.Склад,           "Склад");
	ТаблицаТоваров.ЗаполнитьЗначения(ЭтотОбъект,                              "Регистратор");
	ТаблицаТоваров.ЗаполнитьЗначения(СтруктураШапкиДокумента.Организация,     "Организация");
	
	Если Склад.ТипСклада = Перечисления.ТипыСкладов.РозничныйМагазин Тогда
		ТаблицаТоваров.ЗаполнитьЗначения(ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахАТТ, "СчетУчетаБУ");
		ТаблицаТоваров.ЗаполнитьЗначения(ПланыСчетов.Хозрасчетный.ТорговаяНаценкаАТТ,       "КорСчетСписанияБУ");
	Иначе
		ТаблицаТоваров.ЗаполнитьЗначения(ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахНТТ, "СчетУчетаБУ");
		ТаблицаТоваров.ЗаполнитьЗначения(ПланыСчетов.Хозрасчетный.ТорговаяНаценкаНТТ,                      "КорСчетСписанияБУ");
	КонецЕсли;
	
	Возврат ТаблицаТоваров;

КонецФункции // ПодготовитьТаблицуТоваров()

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизтов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок)


	
	Если СтруктураШапкиДокумента.ТипСклада = Перечисления.ТипыСкладов.ОптовыйСклад Тогда
		СтрокаСообщения = НСтр("ru='Документ не может осуществлять переоценку на оптовом складе!';uk='Документ не може здійснювати переоцінку на оптовому складі!'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения, ЭтотОбъект, "Склад", ,Отказ);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Организация) И 
			УчетнаяПолитика.СпособОценкиТоваровВРознице(Организация, Дата) <> Перечисления.СпособыОценкиТоваровВРознице.ПоПродажнойСтоимости Тогда
		СтрокаСообщения = НСтр("ru='Переоценка товаров в рознице возможна только для организации у которой установлен учет товаров в рознице по продажным ценам!';uk='Переоцінка товарів у роздробі можлива тільки для організації в якій встановлено облік товарів у роздрібній торгівлі за продажними цінами!'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения, ЭтотОбъект, , ,Отказ);		
	КонецЕсли; 

КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Проверяет правильность заполнения строк табличной части "Товары".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТоварам        - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиТовары(СтруктураШапкиДокумента, Отказ, Заголовок)

	НТТ = (Склад.ТипСклада = Перечисления.ТипыСкладов.НеавтоматизированнаяТорговаяТочка);
	
	Если Не НТТ Тогда
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ТаблицаТовары", Товары.Выгрузить());
		Запрос.УстановитьПараметр("Ссылка", Ссылка);
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаТовары.НомерСтроки,
		|	ТаблицаТовары.Номенклатура
		|ПОМЕСТИТЬ ВТ_ТаблицаТовары
		|ИЗ
		|	&ТаблицаТовары КАК ТаблицаТовары
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ТаблицаТовары.НомерСтроки,
		|	ВТ_ТаблицаТовары.Номенклатура,
		|	ВТ_ТаблицаТовары.Номенклатура.Услуга КАК Услуга,
		|	ВТ_ТаблицаТовары.Номенклатура.БланкСтрогогоУчета КАК БланкСтрогогоУчета
		|ИЗ
		|	ВТ_ТаблицаТовары КАК ВТ_ТаблицаТовары";
		
		ТаблицаПоТоварам = Запрос.Выполнить().Выгрузить();
		
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиТовары()

// По результату запроса по шапке документа формируем движения по регистрам.
//
// Параметры: 
//  РежимПроведения           - режим проведения документа (оперативный или неоперативный),
//  СтруктураШапкиДокумента   - выборка из результата запроса по шапке документа,
//  ТаблицаПоТоварам          - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  ТаблицаПоТаре             - таблица значений, содержащая данные для проведения и проверки ТЧ "Возвратная тара",
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, Отказ, Заголовок);
	
	НТТ = (Склад.ТипСклада = Перечисления.ТипыСкладов.НеавтоматизированнаяТорговаяТочка);
	АТТ = (Склад.ТипСклада = Перечисления.ТипыСкладов.РозничныйМагазин);
	
	Если АТТ Тогда
		
		УправлениеЗапасамиПартионныйУчет.ВыполнитьПереоценку(ТаблицаПоТоварам);
		
	Иначе
		
		ДатаДока   = Дата;
		ПроводкиБУ = Движения.Хозрасчетный;
		СчетУчета   = ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахНТТ;
		СчетНаценки = ПланыСчетов.Хозрасчетный.ТорговаяНаценкаНТТ;
				
		Для Каждого СтрокаТаблицы Из ТаблицаПоТоварам Цикл
			
			СуммаПереоценки = СтрокаТаблицы.СуммаПереоценки;
			
			Если СуммаПереоценки <> 0 Тогда
				
				Проводка = ПроводкиБУ.Добавить();
				Проводка.Период      = СтруктураШапкиДокумента.Дата;
				Проводка.Организация = СтруктураШапкиДокумента.Организация;
				Проводка.Содержание  = НСтр("ru='Переоценка товаров в рознице';uk='Переоцінка товарів у роздробі'",Локализация.КодЯзыкаИнформационнойБазы());
				
				Проводка.СчетДт      = СчетУчета;
				Проводка.СчетКт      = СчетНаценки;
				
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Склады",  СтруктураШапкиДокумента.Склад);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Склады",  СтруктураШапкиДокумента.Склад);
				Если мИспользоватьОборотнуюНоменклатуру Тогда
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Номенклатура",  СтрокаТаблицы.Номенклатура);
				КонецЕсли;
				
				Если мРазделятьПоСтавкамНДС Тогда
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "СтавкиНДС",  СтрокаТаблицы.СтавкаНДСВРознице);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "СтавкиНДС",  СтрокаТаблицы.СтавкаНДСВРознице);
				КонецЕсли;
				
				Проводка.Сумма       = СуммаПереоценки;
				
				Проводка.НалоговоеНазначениеДт = СтрокаТаблицы.НалоговоеНазначение;
				Проводка.НалоговоеНазначениеКт = СтрокаТаблицы.НалоговоеНазначение;
				Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыльДо2015 Тогда
					Проводка.СуммаНУДт     = СуммаПереоценки;
					Проводка.СуммаНУКт     = Проводка.СуммаНУДт;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры // ДвиженияПоРегистрам()


// Процедура формирует структуру шапки документа и дополнительных полей.
//
Процедура ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента) Экспорт
	
	// Дерево значений, содержащее имена необходимых полей в запросе по шапке.
	Перем ДеревоПолейЗапросаПоШапке;
	

	СтруктураШапкиДокумента = ОбщегоНазначенияРед12.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	СтруктураШапкиДокумента.Вставить("ТипСклада",Склад.ТипСклада);
	СтруктураШапкиДокумента.Вставить("ЕстьНалогНаПрибыльДо2015" , УчетнаяПолитика.ПлательщикНалогаНаПрибыльДо2015(ЭтотОбъект.Организация, НачалоМесяца(ЭтотОбъект.Дата)));
	СтруктураШапкиДокумента.Вставить("ЕстьНДС"            , УчетнаяПолитика.ПлательщикНДС(ЭтотОбъект.Организация, НачалоМесяца(ЭтотОбъект.Дата)));
	
КонецПроцедуры // ПодготовитьСтруктуруШапкиДокумента()

// Процедура формирует таблицы документа.
//
Процедура ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоТоварам, Отказ, Заголовок) Экспорт
	
	// Получим необходимые данные для проведения и проверки заполенения данные по табличной части "Товары".
	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("Номенклатура"              , "Номенклатура");
	СтруктураПолей.Вставить("Услуга"      				, "Номенклатура.Услуга");
	СтруктураПолей.Вставить("БланкСтрогогоУчета"		, "Номенклатура.БланкСтрогогоУчета");
	СтруктураПолей.Вставить("Количество"	            , "Количество");
	СтруктураПолей.Вставить("ЦенаВРознице"		        , "ЦенаВРознице");
	СтруктураПолей.Вставить("ЦенаВРозницеСтарая"        , "ЦенаВРозницеСтарая");
	СтруктураПолей.Вставить("СтавкаНДСВРознице"         , "СтавкаНДСВРознице");
	СтруктураПолей.Вставить("СуммаПереоценки"	        , "СуммаПереоценки");
	
	СтруктураПолей.Вставить("НалоговоеНазначение"     		   , "НалоговоеНазначение");
	СтруктураПолей.Вставить("ВидДеятельностиНДС"     		   , "НалоговоеНазначение.ВидДеятельностиНДС");
    
	РезультатЗапросаПоТоварам = ОбщегоНазначенияРед12.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураПолей);

	// Подготовим таблицу товаров для проведения.
	ТаблицаПоТоварам = ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура вызывается перед записью документа 
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)

	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ОбновитьПараметрыУчетнойПолитики();
	
	Если НЕ мУчетнаяПолитика.ЕстьНДС Тогда
		// организация - не плательщик НДС. Установим во всех ТЧ признак соответствующего учета НДС
		НеОБлНДСДеятельность = Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяХозДеятельность;
		
		Для каждого СтрокаТЧ  Из Товары Цикл
		    СтрокаТЧ.НалоговоеНазначение = НеОБлНДСДеятельность;
		КонецЦикла; 
	КонецЕсли; 

КонецПроцедуры // ПередЗаписью

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	Перем Заголовок, СтруктураШапкиДокумента;
	Перем ТаблицаПоТоварам;

	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначенияБПВызовСервера.ПредставлениеДокументаПриПроведении(Ссылка);

	// Проверка ручной корректировки
	ПроведениеСервер.ПодготовитьНаборыЗаписейКПроведению(ЭтотОбъект);
	Если РучнаяКорректировка Тогда
		Возврат;
	КонецЕсли;

	ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента);
	
	

	ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоТоварам, Отказ, Заголовок);
	

	// Движения по документу
	Если Не Отказ Тогда
		ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, Отказ, Заголовок);
	КонецЕсли;
	
	Движения.Хозрасчетный.ВыполнитьДействияПередЗаписьюДвижений();

	ПроведениеСервер.ПодготовитьНаборыЗаписейКЗаписиДвижений(ЭтотОбъект);
	
КонецПроцедуры // ОбработкаПроведения()

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКОтменеПроведения(ЭтотОбъект);
	Движения.Записать();
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	ЗаполнениеДокументов.Заполнить(ЭтотОбъект, ДанныеЗаполнения);
	Если Склад.ТипСклада = Перечисления.ТипыСкладов.ОптовыйСклад Тогда
	    Склад = Неопределено;
	КонецЕсли; 
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	Дата = НачалоДня(ОбщегоНазначенияБП.ПолучитьРабочуюДату());
	Ответственный = Пользователи.ТекущийПользователь();
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	Перем СтруктураШапкиДокумента;
	
	МассивНепроверяемыхРеквизитов = Новый Массив;

	ПодготовитьСтруктуруШапкиДокумента("", СтруктураШапкиДокумента);
	// Проверим правильность заполнения шапки документа
	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, "");
	// Проверить заполнение ТЧ "Товары".
	ПроверитьЗаполнениеТабличнойЧастиТовары(СтруктураШапкиДокумента, Отказ, "");
	
	Если СтруктураШапкиДокумента.ТипСклада = Перечисления.ТипыСкладов.НеавтоматизированнаяТорговаяТочка Тогда

		МассивНепроверяемыхРеквизитов.Добавить("Товары.Номенклатура");
		МассивНепроверяемыхРеквизитов.Добавить("Товары.Количество");
		МассивНепроверяемыхРеквизитов.Добавить("Товары.ЦенаВРозницеСтарая");
		МассивНепроверяемыхРеквизитов.Добавить("Товары.ЦенаВРознице");

		СчетУчетаТоваровВНТТ = ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахНТТ;
		СубконтоСтавкиНДС = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтавкиНДС;
		РазделятьПоСтавкамНДС = СчетУчетаТоваровВНТТ.ВидыСубконто.Найти(СубконтоСтавкиНДС, "ВидСубконто") <> Неопределено;

		Если НЕ РазделятьПоСтавкамНДС Тогда
			МассивНепроверяемыхРеквизитов.Добавить("Товары.СтавкаНДСВРознице");
		КонецЕсли;
		
		Если НЕ СтруктураШапкиДокумента.ЕстьНДС Тогда
			МассивНепроверяемыхРеквизитов.Добавить("Товары.НалоговоеНазначение");
		КонецЕсли;
	Иначе
		МассивНепроверяемыхРеквизитов.Добавить("Товары.СуммаПереоценки");
		МассивНепроверяемыхРеквизитов.Добавить("Товары.СтавкаНДСВРознице");
		МассивНепроверяемыхРеквизитов.Добавить("Товары.НалоговоеНазначение");
	КонецЕсли;

	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
КонецПроцедуры


мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
#КонецЕсли