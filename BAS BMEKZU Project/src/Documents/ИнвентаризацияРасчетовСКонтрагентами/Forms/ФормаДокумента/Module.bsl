#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПараметрыРазмещения = ПодключаемыеКоманды.ПараметрыРазмещения();
	ПараметрыРазмещения.КоманднаяПанель = Элементы.ГруппаВажныеКоманды;
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект, ПараметрыРазмещения);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	
	Если Параметры.Ключ.Пустая() Тогда
		ПодготовитьФормуНаСервере();
	КонецЕсли;
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)

	Если НЕ Отказ Тогда
		Объект.Контрагенты.Очистить();

		Для Каждого СтрокаКонтрагента Из Дебиторы Цикл
			НоваяСтрока = Объект.Контрагенты.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаКонтрагента);
			НоваяСтрока.ВидЗадолженности = ПредопределенноеЗначение("Перечисление.ВидыЗадолженности.Дебиторская");
		КонецЦикла;

		Для Каждого СтрокаКонтрагента Из Кредиторы Цикл
			НоваяСтрока = Объект.Контрагенты.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаКонтрагента);
			НоваяСтрока.ВидЗадолженности = ПредопределенноеЗначение("Перечисление.ВидыЗадолженности.Кредиторская");
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	ПодготовитьФормуНаСервере();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)

	Документы.ИнвентаризацияРасчетовСКонтрагентами.ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты, ЭтаФорма, Истина);

КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	УстановитьСостояниеДокумента();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)

	Если ИсточникВыбора.ИмяФормы = "РегистрСведений.СоставКомиссий.Форма.ФормаВыбора" Тогда
		ЗаполнитьЗначенияСвойств(Объект, ВыбранноеЗначение);
		Модифицированность = Истина;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыФункцииОбщегоНазначения

// Разделяет табличную часть "Контрагенты" на отдельные таблицы значений
//
&НаСервере
Процедура ЗагрузитьИзДокументаДебиторовИКредиторов(ВидЗадолженности = Неопределено)

	Если ВидЗадолженности = Перечисления.ВидыЗадолженности.Дебиторская Тогда
		Дебиторы.Очистить();
	ИначеЕсли ВидЗадолженности = Перечисления.ВидыЗадолженности.Кредиторская Тогда
		Кредиторы.Очистить();
	Иначе	
		Дебиторы.Очистить();
		Кредиторы.Очистить();
	КонецЕсли; 
	
	Для каждого СтрокаЗадолженности  Из Объект.Контрагенты Цикл
		Если СтрокаЗадолженности.ВидЗадолженности = Перечисления.ВидыЗадолженности.Дебиторская
		   И ВидЗадолженности <> Перечисления.ВидыЗадолженности.Кредиторская Тогда
		    НоваяСтрока = Дебиторы.Добавить();
		ИначеЕсли СтрокаЗадолженности.ВидЗадолженности = Перечисления.ВидыЗадолженности.Кредиторская
		   И ВидЗадолженности <> Перечисления.ВидыЗадолженности.Дебиторская Тогда
		    НоваяСтрока = Кредиторы.Добавить();
		Иначе 
			Продолжить;
		КонецЕсли; 
		ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаЗадолженности);
		НоваяСтрока.Всего = НоваяСтрока.Подтверждено + НоваяСтрока.НеПодтверждено;
	КонецЦикла; 

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьИтоги(Форма)

	Форма.КоличествоДебиторов        = Форма.Дебиторы.Количество();
	Форма.КоличествоКредиторов       = Форма.Кредиторы.Количество();
	Форма.ВсегоДебиторы              = Форма.Дебиторы.Итог("Всего");
	Форма.ВсегоКредиторы             = Форма.Кредиторы.Итог("Всего");
	Форма.ПодтвержденоДебиторы       = Форма.Дебиторы.Итог("Подтверждено");
	Форма.ПодтвержденоКредиторы      = Форма.Кредиторы.Итог("Подтверждено");
	Форма.НеПодтвержденоДебиторы     = Форма.Дебиторы.Итог("НеПодтверждено");
	Форма.НеПодтвержденоКредиторы    = Форма.Кредиторы.Итог("НеПодтверждено");
	Форма.ИстекСрокДавностиДебиторы  = Форма.Дебиторы.Итог("ИстекСрокДавности");
	Форма.ИстекСрокДавностиКредиторы = Форма.Кредиторы.Итог("ИстекСрокДавности");

КонецПроцедуры

// Заполняет табличную часть "СчетаРасчетов" значениями по умолчению
//
&НаСервере
Процедура ЗаполнитьСчетаПоУмолчаниюНаСервере()

	ТаблицаСчетов = УчетВзаиморасчетов.ПолучитьТаблицуСчетовУчетаВзаиморасчетов(Ложь, Истина);
	Объект.СчетаРасчетов.Загрузить(ТаблицаСчетов);

КонецПроцедуры

// Заполняет таблицу значений задолженностью указанного вида
&НаСервере
Процедура ЗаполнитьТаблицуДолговНаСервере(ИмяВидаЗадолженности)

	Если ИмяВидаЗадолженности = "Дебиторская" ИЛИ ИмяВидаЗадолженности = "Кредиторская" Тогда
		ВидЗадолженности = Перечисления.ВидыЗадолженности[ИмяВидаЗадолженности];
	Иначе
	    ВидЗадолженности = Неопределено;
	КонецЕсли; 
	
	ТекущийОбъект = ЭтаФорма.РеквизитФормыВЗначение("Объект");
	ТекущийОбъект.ЗаполнитьАктДляИнв17(ВидЗадолженности);
	ЭтаФорма.ЗначениеВРеквизитФормы(ТекущийОбъект, "Объект");
	ЗагрузитьИзДокументаДебиторовИКредиторов(ВидЗадолженности);
	
	ОбновитьИтоги(ЭтаФорма);

КонецПроцедуры

// Заполняет таблицы значений как дебиторской, так и кредиторской задолженностью
&НаСервере
Процедура ЗаполнитьВсеДолгиНаСервере()

	Дебиторы.Очистить();
	ЗаполнитьТаблицуДолговНаСервере("Дебиторская");
	Кредиторы.Очистить();
	ЗаполнитьТаблицуДолговНаСервере("Кредиторская");

КонецПроцедуры

// Проверяет готовность документа к автоматическому заполнению данными учета
//
&НаКлиенте
Функция ОбъектГотовКЗаполнению(ИмяВидаЗадолженности = Неопределено)

	Если Объект.СчетаРасчетов.Количество() = 0 Тогда
		ТекстПредупреждения = НСтр("ru='Не задан список счетов, по которым должен формироваться документ!';uk='Не заданий список рахунків, по яких повинен формуватися документ!'");
		ПоказатьПредупреждение( , ТекстПредупреждения, , Заголовок);
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;

КонецФункции

&НаКлиенте
Функция ПолучитьТекстВопроса(ИмяВидаЗадолженности)

	ТекстВопроса = "";
	Если ИмяВидаЗадолженности = Неопределено И (Дебиторы.Количество() > 0 ИЛИ Кредиторы.Количество() > 0) Тогда
		ТекстВопроса = НСтр("ru='При изменении значения реквизита все строки задолженностей будут удалены. 
|Продолжить?';uk='При зміні значення реквізиту всі рядки заборгованостей будуть вилучені. 
|Продовжити?'");
	ИначеЕсли ИмяВидаЗадолженности = "Дебиторская" И Дебиторы.Количество() > 0 Тогда
		ТекстВопроса = НСтр("ru='Перед заполнением все строки дебиторской задолженности будут удалены. 
|Продолжить?';uk='Перед заповненням всі рядки дебіторської заборгованості будуть вилучені. 
|Продовжити?'");
	ИначеЕсли ИмяВидаЗадолженности = "Кредиторская" И Кредиторы.Количество() > 0 Тогда
		ТекстВопроса = НСтр("ru='Перед заполнением все строки кредиторской задолженности будут удалены. 
|Продолжить?';uk='Перед заповненням всі рядки кредиторської заборгованості будуть вилучені. 
|Продовжити?'");
	ИначеЕсли ИмяВидаЗадолженности = "Общая" И Кредиторы.Количество() > 0 Тогда
		ТекстВопроса = НСтр("ru='Перед заполнением все строки задолженности контрагентов будут удалены. 
|Продолжить?';uk='Перед заповненням всі рядки заборгованості контрагентів будуть вилучені. 
|Продовжити?'");
	КонецЕсли;

	Возврат ТекстВопроса;

КонецФункции

&НаКлиенте
Процедура ПересчитатьСуммыВСтроке(СтрокаТаблицы, ИмяТаблицы)

	СтрокаТаблицы.Всего = СтрокаТаблицы.Подтверждено + СтрокаТаблицы.НеПодтверждено;
	Если СтрокаТаблицы.ИстекСрокДавности > СтрокаТаблицы.Всего Тогда

		// ошибка выведется только однократно, после чего поле "ИстекСрокДавности" заполнится правильными данными.
		// В обработке проверки заполнения это проверять не нужно.
		ИндексСтроки = ЭтаФорма[ИмяТаблицы].Индекс(СтрокаТаблицы);
		ИмяПоля = ИмяТаблицы + "[" + Формат(ИндексСтроки, "ЧН=0; ЧГ=") + "].ИстекСрокДавности"; 
		ТекстСообщения = НСтр("ru='Сумма с истекшим сроком давности не может быть больше общей суммы задолженности';uk='Сума з терміном давнини, що закінчився, не може бути більше загальної суми заборгованості'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , ИмяПоля);

		СтрокаТаблицы.ИстекСрокДавности = СтрокаТаблицы.Всего;

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПроверитьФлагиПредседателя(СтрокаТЧ)

	СтрокаПредседателя = ?(СтрокаТЧ <> Неопределено И СтрокаТЧ.Председатель, СтрокаТЧ, Неопределено);

	Для Каждого СтрокаКомиссии Из Объект.ИнвентаризационнаяКомиссия Цикл

		Если СтрокаКомиссии.Председатель И СтрокаПредседателя = Неопределено Тогда
			СтрокаПредседателя = СтрокаКомиссии;
			Продолжить;
		КонецЕсли;

		Если СтрокаКомиссии.Председатель И СтрокаКомиссии <> СтрокаПредседателя Тогда
			СтрокаКомиссии.Председатель = Ложь;
		КонецЕсли;

	КонецЦикла;

	Если СтрокаПредседателя = Неопределено И Объект.ИнвентаризационнаяКомиссия.Количество() > 0 Тогда
		Объект.ИнвентаризационнаяКомиссия[0].Председатель = Истина;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПодготовитьФормуНаСервере()

	УстановитьСостояниеДокумента();

	ТекущаяДатаДокумента = Объект.Дата;
	ТекущаяОрганизация 	 = Объект.Организация;
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ЗагрузитьИзДокументаДебиторовИКредиторов();
	Иначе
		Дебиторы.Очистить();
		Кредиторы.Очистить();
	КонецЕсли;
	
	ОбновитьИтоги(ЭтаФорма);
	
	КодЯзыкаИнформационнойБазы = Локализация.КодЯзыкаИнформационнойБазы();
	Элементы.ДокументОснованиеВид.СписокВыбора.Очистить();
	Элементы.ДокументОснованиеВид.СписокВыбора.Добавить(НСтр("ru='Приказ';uk='Наказ'", КодЯзыкаИнформационнойБазы));
	Элементы.ДокументОснованиеВид.СписокВыбора.Добавить(НСтр("ru='Постановление';uk='Постанова'", КодЯзыкаИнформационнойБазы));
	Элементы.ДокументОснованиеВид.СписокВыбора.Добавить(НСтр("ru='Распоряжение';uk='Розпорядження'", КодЯзыкаИнформационнойБазы));

КонецПроцедуры

&НаСервере
Процедура УстановитьСостояниеДокумента()
	
	СостояниеДокумента = ОбщегоНазначенияБП.СостояниеДокумента(Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросВсеСчетаУчетаБудутУдаленыЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ЗаполнитьСчетаПоУмолчаниюНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросОчиститьТаблицуДебиторскаяЗавершение(Результат, ДополнительныеПараметры) Экспорт

	Если Результат = КодВозвратаДиалога.Да Тогда
		Дебиторы.Очистить();
		ЗаполнитьТаблицуДолговНаСервере("Дебиторская");
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВопросОчиститьТаблицуКредиторскаяЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Кредиторы.Очистить();
		ЗаполнитьТаблицуДолговНаСервере("Кредиторская");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросОчиститьВсеТаблицыЗавершение(Результат, ДополнительныеПараметры) Экспорт

	Если Результат = КодВозвратаДиалога.Да Тогда
		ЗаполнитьВсеДолгиНаСервере();
	КонецЕсли;

КонецПроцедуры

#КонецОбласти 

#Область ПроцедурыДействияКоиандныхПанелейФормы

&НаКлиенте
Процедура ЗаполнитьДебиторскуюЗадолженность(Команда)

	Если НЕ ОбъектГотовКЗаполнению("Дебиторская") Тогда
		Возврат;
	КонецЕсли;
	ТекстВопроса = ПолучитьТекстВопроса("Дебиторская");
	
	Если ТекстВопроса = "" Тогда
		ЗаполнитьТаблицуДолговНаСервере("Дебиторская");
	Иначе
		Оповещение = Новый ОписаниеОповещения("ВопросОчиститьТаблицуДебиторскаяЗавершение", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Да);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьКредиторскуюЗадолженность(Команда)

	Если НЕ ОбъектГотовКЗаполнению("Кредиторская") Тогда
		Возврат;
	КонецЕсли;

	ТекстВопроса = ПолучитьТекстВопроса("Кредиторская");

	Если ТекстВопроса = "" Тогда
		ЗаполнитьТаблицуДолговНаСервере("Кредиторская");
	Иначе
		Оповещение = Новый ОписаниеОповещения("ВопросОчиститьТаблицуКредиторскаяЗавершение", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Да);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСчетаПоУмолчанию(Команда)

	Если Объект.СчетаРасчетов.Количество() > 0 Тогда
		ТекстВопроса = НСтр("ru='Перед заполнением все счета учета будут удалены. 
|Продолжить?';uk='Перед заповненням усі рахунки обліку будуть вилучені. 
|Продовжити?'");
		Оповещение = Новый ОписаниеОповещения("ВопросВсеСчетаУчетаБудутУдаленыЗавершение", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да, Заголовок);
	Иначе
		ЗаполнитьСчетаПоУмолчаниюНаСервере();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПодборКомиссии(Команда)

	ПараметрыФормы = Новый Структура("ЗакрыватьприВыборе,МножественныйВыбор", Ложь, Истина);
	ОткрытьФорму("Справочник.ФизическиеЛица.ФормаВыбора", ПараметрыФормы, Элементы.ИнвентаризационнаяКомиссия);

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьВсеЗадолженности(Команда)

	Если НЕ ОбъектГотовКЗаполнению("Общая") Тогда
		Возврат;
	КонецЕсли;
	
	ТекстВопроса = ПолучитьТекстВопроса("Общая");

	Если ТекстВопроса = "" Тогда
		ЗаполнитьВсеДолгиНаСервере();
	Иначе
		Оповещение = Новый ОписаниеОповещения("ВопросОчиститьВсеТаблицыЗавершение", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Да);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)

	Если НЕ ОбъектГотовКЗаполнению(Неопределено) Тогда
		Объект.Организация = ТекущаяОрганизация;
		Возврат;
	КонецЕсли;

	ТекущаяОрганизация = Объект.Организация;

	Объект.Контрагенты.Очистить();
	Дебиторы.Очистить();
	Кредиторы.Очистить();
	ОбновитьИтоги(ЭтаФорма);

КонецПроцедуры

#КонецОбласти 

#Область ПроцедурыОбработчикиСобытийРеквизитовТабличногоПоляДебиторы

&НаКлиенте
Процедура ДебиторыПриИзменении(Элемент)
	
	ОбновитьИтоги(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ДебиторыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)

	Если НоваяСтрока И ОтменаРедактирования Тогда
		ОбновитьИтоги(ЭтаФорма);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДебиторыПослеУдаления(Элемент)

	ОбновитьИтоги(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ДебиторыПодтвержденоПриИзменении(Элемент)

	ПересчитатьСуммыВСтроке(Элементы.Дебиторы.ТекущиеДанные, "Дебиторы");

КонецПроцедуры

&НаКлиенте
Процедура ДебиторыНеПодтвержденоПриИзменении(Элемент)

	ПересчитатьСуммыВСтроке(Элементы.Дебиторы.ТекущиеДанные, "Дебиторы");

КонецПроцедуры

&НаКлиенте
Процедура ДебиторыИстекСрокДавностиПриИзменении(Элемент)

	ПересчитатьСуммыВСтроке(Элементы.Дебиторы.ТекущиеДанные, "Дебиторы");

КонецПроцедуры

#КонецОбласти 

#Область ПроцедурыОбработчикиСобытийРеквизитовТабличногоПоляКредиторы

&НаКлиенте
Процедура КредиторыПриИзменении(Элемент)
	
	ОбновитьИтоги(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура КредиторыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)

	Если НоваяСтрока И ОтменаРедактирования Тогда
		ОбновитьИтоги(ЭтаФорма);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура КредиторыПослеУдаления(Элемент)

	ОбновитьИтоги(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура КредиторыПодтвержденоПриИзменении(Элемент)

	ПересчитатьСуммыВСтроке(Элементы.Кредиторы.ТекущиеДанные, "Кредиторы");

КонецПроцедуры

&НаКлиенте
Процедура КредиторыНеПодтвержденоПриИзменении(Элемент)

	ПересчитатьСуммыВСтроке(Элементы.Кредиторы.ТекущиеДанные, "Кредиторы");

КонецПроцедуры

&НаКлиенте
Процедура КредиторыИстекСрокДавностиПриИзменении(Элемент)

	ПересчитатьСуммыВСтроке(Элементы.Кредиторы.ТекущиеДанные, "Кредиторы");

КонецПроцедуры

#КонецОбласти  

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ВыбратьСоставКомиссии(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимВыбора", Истина);

	ПараметрыФормы.Вставить("Отбор", Новый Структура("Организация", Объект.Организация));
	ОткрытьФорму("РегистрСведений.СоставКомиссий.Форма.ФормаВыбора", ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры // ВыбратьСоставКомиссии

#КонецОбласти

#Область СлужебныеПроцедурыИФункцииБСП

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти
