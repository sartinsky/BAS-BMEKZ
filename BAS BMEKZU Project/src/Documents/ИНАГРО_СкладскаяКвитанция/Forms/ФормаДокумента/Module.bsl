#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды 	
	
	Если Параметры.Ключ.Пустая() Тогда
		
		Если Параметры.Основание <> Неопределено
			И (ТипЗнч(Параметры.Основание) = Тип("ДокументСсылка.ИНАГРО_РеестрТТНВвоз")
			ИЛИ ТипЗнч(Параметры.Основание) = Тип("ДокументСсылка.ИНАГРО_РеестрТТНВвозЖД")) Тогда
			
			Если ЗначениеЗаполнено(Параметры.Основание.СкладскаяКвитанция) Тогда
				Отказ = Истина;
			КонецЕсли;
			
		ИначеЕсли Параметры.Основание = Неопределено И Параметры.ЗначенияЗаполнения.Свойство("Ссылка")
			И ТипЗнч(Параметры.ЗначенияЗаполнения.Ссылка) = Тип("ДокументСсылка.ИНАГРО_Переоформление") Тогда
			
			Если ЗначениеЗаполнено(Параметры.ЗначенияЗаполнения.СтрокаТабличнойЧасти.СкладскаяКвитанция) Тогда
				Отказ = Истина;
			КонецЕсли;			
			
		КонецЕсли;	
		
		Если НЕ Отказ Тогда
			ПодготовитьФормуНаСервере(); 
		КонецЕсли;
		
	КонецЕсли;
	
	// Уведомим о появлении функционала рабочей даты
	ЭтаФорма.НастройкиПредупреждений = ОбщегоНазначенияБП.НастройкиПредупрежденийОбИзменениях("РабочаяДатаИзДокумента");
	 
	// Показываем, если это новый документ и сама рабочая дата еще не установлена.
	ЭтаФорма.НастройкиПредупреждений.РабочаяДатаИзДокумента = ЭтаФорма.НастройкиПредупреждений.РабочаяДатаИзДокумента
	 	И ЭтаФорма.Параметры.Ключ.Пустая()
	  	И НЕ ЗначениеЗаполнено(БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("РабочаяДата"));
		
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если  ТипЗнч(Параметр) = Тип("Структура") 
		И Параметр.Свойство("ИдентификаторВызывающейФормы")
		И Параметр.ИдентификаторВызывающейФормы = УникальныйИдентификатор Тогда
		Если ИмяСобытия = "СозданЛабораторныйАнализ" ИЛИ ИмяСобытия = "ИзмененЛабораторныйАнализ" Тогда
			Если ИНАГРО_Элеватор.ЛабораторныйАнализПроверкаЗаполнения(Параметр.ДокументСсылка, ПолучитьПараметрыДляПроверкиЗаполнения()) Тогда
				Объект.ЛабораторныйАнализ = Параметр.ДокументСсылка;
				ЛабораторныйАнализПриИзменении(Неопределено);
				Модифицированность = Истина;
			КонецЕсли;
		КонецЕсли;	
	Иначе
		ОбщегоНазначенияБПКлиент.ОбработкаОповещенияФормыДокумента(ЭтаФорма, Объект.Ссылка, ИмяСобытия, Параметр, Источник);
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	ПодготовитьФормуНаСервере();

КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	УстановитьСостояниеДокумента();
	
КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)

	Если НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДатаДокумента) Тогда
		// Изменение времени не влияет на поведение документа.
		ТекущаяДатаДокумента = Объект.Дата;
		Возврат;
	КонецЕсли;
	
	// Общие проверки условий по датам.
	ТребуетсяВызовСервера = ИНАГРО_ЭлеваторКлиент.ТребуетсяВызовСервераПриИзмененииДатыДокумента(Объект.Дата, ТекущаяДатаДокумента);
		
	// Если определили, что изменение даты может повлиять на какие-либо параметры, 
	// то передаем обработку на сервер.
	Если ТребуетсяВызовСервера Тогда
		ДатаПриИзмененииНаСервере();
	КонецЕсли;
	
	// Запомним новую дату документа.
	ТекущаяДатаДокумента = Объект.Дата;

КонецПроцедуры

&НаСервере
Процедура ДатаПриИзмененииНаСервере()

	УстановитьФункциональныеОпцииФормы();
	
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		ОрганизацияПриИзмененииНаСервере();
	КонецЕсли;	

КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()

	УстановитьФункциональныеОпцииФормы();
	
	УправлениеФормой(ЭтаФорма)
	
КонецПроцедуры

&НаКлиенте
Процедура НесколькоДокументовПриИзменении(Элемент)
	
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура НеРассчитыватьУслугуПоВыпискеСкладскогоДокументаПриИзменении(Элемент)
	
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

#Область ОбработчикиСобытийЭлементовПанелиОсновные

&НаКлиенте
Процедура ВладелецПриИзменении(Элемент)	
	
	Если ЗначениеЗаполнено(Объект.Владелец) Тогда
		
		ПараметрыОтбораДоговора = ПолучитьПараметрыДляДоговоров();
		
		ИНАГРО_ЭлеваторЗаполнениеДокументов.ПриИзмененииЗначенияКонтрагента(Объект.Дата, Объект.Организация, Объект.Владелец, Объект.ДоговорКонтрагента, ПараметрыОтбораДоговора);
		
		ДоговорКонтрагентаПриИзменении(Неопределено);
		
	КонецЕсли; 	
		
КонецПроцедуры

&НаКлиенте
Процедура ДоговорКонтрагентаПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда 
		
		ДанныеОбъекта = Новый Структура("ДоговорКонтрагента, НомерДоговора, ДатаДоговора");
		ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
		
		ДоговорКонтрагентаОбработатьИзменение(ДанныеОбъекта);
		
		ЗаполнитьЗначенияСвойств(Объект, ДанныеОбъекта);
		
	КонецЕсли; 	

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ДоговорКонтрагентаОбработатьИзменение(ДанныеОбъекта)
	
	ДанныеОбъекта.НомерДоговора = ДанныеОбъекта.ДоговорКонтрагента.Номер;
	ДанныеОбъекта.ДатаДоговора  = ДанныеОбъекта.ДоговорКонтрагента.Дата;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидХраненияПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.ВидХранения) Тогда
		
		ПараметрыОтбораДоговора = ПолучитьПараметрыДляДоговоров();
		
		ИНАГРО_ЭлеваторЗаполнениеДокументов.ПриИзмененииЗначенияКонтрагента(Объект.Дата, Объект.Организация, Объект.Владелец, Объект.ДоговорКонтрагента, ПараметрыОтбораДоговора);
		
	КонецЕсли; 	
	
КонецПроцедуры

&НаКлиенте
Процедура НоменклатураПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.Номенклатура) Тогда		
		РассчитатьЗачетныйВес();	
	КонецЕсли;	

КонецПроцедуры

&НаКлиенте
Процедура УрожайПриИзменении(Элемент)
	
	ПараметрыОтбораДоговора = ПолучитьПараметрыДляДоговоров();
		
	ИНАГРО_ЭлеваторЗаполнениеДокументов.ПриИзмененииЗначенияКонтрагента(Объект.Дата, Объект.Организация, Объект.Владелец, Объект.ДоговорКонтрагента, ПараметрыОтбораДоговора);	
	
КонецПроцедуры

&НаКлиенте
Процедура ФизическийВесПриИзменении(Элемент)
	
	РассчитатьЗачетныйВес();															  
	
КонецПроцедуры

&НаКлиенте
Процедура ЛабораторныйАнализПриИзменении(Элемент)
	
	ДанныеОбъекта = Новый Структура(
		"ЛабораторныйАнализ, НомерАнализа, Влажность, 
		|СорнаяПримесь, ЗерноваяПримесь, ЗачетныйВес
		|");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект); 

	ПараметрыДляРасчетаЗачетногоВеса = ПолучитьПараметрыДляРасчетаЗачетногоВеса();

	ИНАГРО_Элеватор.ЛабораторныйАнализПриИзмененииНаСервере(ДанныеОбъекта, ПараметрыДляРасчетаЗачетногоВеса);
	
	ЗаполнитьЗначенияСвойств(Объект, ДанныеОбъекта); 

	ЛабораторныйАнализПриИзмененииНаСервере();
			
КонецПроцедуры

&НаСервере
Процедура ЛабораторныйАнализПриИзмененииНаСервере()
			
	Объект.Характеристики.Очистить();
	
	Для Каждого СтрокаТабличнойЧасти Из Объект.ЛабораторныйАнализ.Результаты Цикл
		
		Если СтрокаТабличнойЧасти.Характеристика.ПоказыватьВСК Тогда
			НоваяСтрока = Объект.Характеристики.Добавить();
			НоваяСтрока.Характеристика   = СтрокаТабличнойЧасти.Характеристика;
			НоваяСтрока.ЕдиницаИзмерения = СтрокаТабличнойЧасти.ЕдиницаИзмерения;
			НоваяСтрока.Значение         = СтрокаТабличнойЧасти.Значение;
		КонецЕсли;
		
	КонецЦикла;
	
	УстановитьДоступностьПоказателейКачества(ЭтаФорма);	
	
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ЛабораторныйАнализНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыОтбора = Новый Структура;
	
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		ПараметрыОтбора.Вставить("Организация",        Объект.Организация);		
	КонецЕсли;	
	Если ЗначениеЗаполнено(Объект.Владелец) Тогда
		ПараметрыОтбора.Вставить("Владелец",           Объект.Владелец);
	КонецЕсли;	
	Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		ПараметрыОтбора.Вставить("ДоговорКонтрагента", Объект.ДоговорКонтрагента);		
	КонецЕсли;	
	Если ЗначениеЗаполнено(Объект.Склад) Тогда
		ПараметрыОтбора.Вставить("Склад",              Объект.Склад);
	КонецЕсли;	
	Если ЗначениеЗаполнено(Объект.ВидХранения) Тогда
		ПараметрыОтбора.Вставить("ВидХранения",        Объект.ВидХранения);
	КонецЕсли;	
	Если ЗначениеЗаполнено(Объект.Номенклатура) Тогда
		ПараметрыОтбора.Вставить("Номенклатура",       Объект.Номенклатура);
	КонецЕсли;	
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Отбор",  ПараметрыОтбора);
	ПараметрыФормы.Вставить("Ссылка", Объект.Ссылка);
	
	ОткрытьФорму("Документ.ИНАГРО_ЛабораторныйАнализ.Форма.ФормаВыбора", ПараметрыФормы, Элемент, Новый УникальныйИдентификатор(), , , , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры

&НаКлиенте
Процедура ВлажностьПриИзменении(Элемент)
	
	РассчитатьЗачетныйВес();
	
КонецПроцедуры

&НаКлиенте
Процедура СорнаяПримесьПриИзменении(Элемент)
	
	РассчитатьЗачетныйВес();
	
КонецПроцедуры

&НаКлиенте
Процедура УточнитьКультуруПриИзменении(Элемент)
	
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ПечатьДоВостребованияПриИзменении(Элемент)
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОписаниеДвиженияФормы36НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(
		Элемент.ТекстРедактирования,
		ЭтотОбъект,
		"Объект.ОписаниеДвиженияФормы36",
		НСтр("ru='Описание движения формы 36';uk='Опис руху форми 36'"));

КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(
		Элемент.ТекстРедактирования,
		ЭтотОбъект,
		"Объект.Комментарий");

КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиСобытийЭлементовТаблицыФормыХарактеристики

&НаКлиенте
Процедура ХарактеристикиХарактеристикаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Характеристики.ТекущиеДанные;	
	
	ДанныеСтрокиТаблицы = Новый Структура("Характеристика, ЕдиницаИзмерения, Значение");
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, ТекущиеДанные);
	
	ХарактеристикиХарактеристикаПриИзмененииНаСервере(ДанныеСтрокиТаблицы);
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтрокиТаблицы);

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ХарактеристикиХарактеристикаПриИзмененииНаСервере(СтрокаТабличнойЧасти)

	Характеристика = СтрокаТабличнойЧасти.Характеристика;
	
	Если ЗначениеЗаполнено(Характеристика) Тогда
		СтрокаТабличнойЧасти.ЕдиницаИзмерения = Характеристика.ЕдиницаИзмерения;
		СтрокаТабличнойЧасти.Значение         = Характеристика.ТипЗначения.ПривестиЗначение(СтрокаТабличнойЧасти.Значение);
	КонецЕсли;
		
КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписокДокументов

&НаКлиенте
Процедура СписокДокументовПослеУдаления(Элемент)
	
	ОбновитьИтоговыйВес();

КонецПроцедуры

&НаКлиенте
Процедура СписокДокументовДокументОснованиеПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.СписокДокументов.ТекущиеДанные;	
	
	Если ТипЗнч(ТекущиеДанные.ДокументОснование) = Тип("ДокументСсылка.ИНАГРО_РеестрТТНВвоз") Тогда
		
		ДанныеСтрокиТаблицы = Новый Структура("ДокументОснование, Вес, ЗачетныйВес");
		ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, ТекущиеДанные); 
		
		СписокДокументовДокументПриИзмененииНаСервере(ДанныеСтрокиТаблицы);
		
		ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтрокиТаблицы);	
		
	КонецЕсли;
	
	ОбновитьИтоговыйВес();

КонецПроцедуры

&НаСервереБезКонтекста
Процедура СписокДокументовДокументПриИзмененииНаСервере(СтрокаТабличнойЧасти)
	
	СтрокаТабличнойЧасти.Вес         = СтрокаТабличнойЧасти.ДокументОснование.ОбщийФизическийВес;
	СтрокаТабличнойЧасти.ЗачетныйВес = СтрокаТабличнойЧасти.ДокументОснование.ЗачетныйВес;

КонецПроцедуры

&НаКлиенте
Процедура СписокДокументовДокументОснованиеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь; 

	ТекущиеДанные = Элементы.СписокДокументов.ТекущиеДанные;	
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Организация", Объект.Организация);
	
	Если ЗначениеЗаполнено(Объект.Владелец) Тогда
		ПараметрыОтбора.Вставить("Владелец",           Объект.Владелец);
	КонецЕсли;	
	Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		ПараметрыОтбора.Вставить("ДоговорКонтрагента", Объект.ДоговорКонтрагента);
	КонецЕсли;
	Если ЗначениеЗаполнено(Объект.Склад) Тогда
		ПараметрыОтбора.Вставить("Склад",              Объект.Склад);
	КонецЕсли;
	Если ЗначениеЗаполнено(Объект.Урожай) Тогда
		ПараметрыОтбора.Вставить("Урожай",             Объект.Урожай);
	КонецЕсли;
	Если ЗначениеЗаполнено(Объект.ВидХранения) Тогда
		ПараметрыОтбора.Вставить("ВидХранения",        Объект.ВидХранения);
	КонецЕсли;
	
	СписокТипов = ПолучитьСписокТиповДляВыбораДокументаОснования();
	
	ДополнительныеПараметры = Новый Структура("ПараметрыОтбора, Элемент", ПараметрыОтбора, Элемент);
	
	Оповещение = Новый ОписаниеОповещения("СписокДокументовДокументОснованиеНачалоВыбораЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ЭтаФорма.ПоказатьВыборИзСписка(Оповещение, СписокТипов, ТекущиеДанные.ДокументОснование);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокДокументовДокументОснованиеНачалоВыбораЗавершение(ВыбранныйЭлемент1, ДополнительныеПараметры) Экспорт
	
	ТекущиеДанные = Элементы.СписокДокументов.ТекущиеДанные;

	ПараметрыОтбора = ДополнительныеПараметры.ПараметрыОтбора;
	Элемент         = ДополнительныеПараметры.Элемент;	
	
	ВыбранныйЭлемент = ВыбранныйЭлемент1;
	
	Если ВыбранныйЭлемент = Неопределено Тогда // Отказ от выбора
	    Возврат;
	КонецЕсли;
	
	ВыбранныйТип = ВыбранныйЭлемент.Значение;
	
	Если ТипЗнч(ВыбранныйТип) = Тип("ДокументСсылка.ИНАГРО_РеестрТТНВвоз") Тогда
		Если ЗначениеЗаполнено(Объект.Номенклатура) Тогда
			ПараметрыОтбора.Вставить("Номенклатура", Объект.Номенклатура);
		КонецЕсли;
	КонецЕсли;

	Если ТипЗнч(ТекущиеДанные.ДокументОснование) <> Тип("ДокументСсылка." + ВыбранныйТип) Тогда
	    ТекущиеДанные.ДокументОснование = ПредопределенноеЗначение("Документ." + ВыбранныйТип + ".ПустаяСсылка");
	КонецЕсли;
		
	ПараметрыФормы	= Новый Структура;
	ПараметрыФормы.Вставить("Отбор",              ПараметрыОтбора);
	ПараметрыФормы.Вставить("РежимВыбора",        Истина);
	ПараметрыФормы.Вставить("МножественныйВыбор", Ложь);	
	Если ЗначениеЗаполнено(ТекущиеДанные.ДокументОснование) Тогда
	    ПараметрыФормы.Вставить("ТекущаяСтрока", ТекущиеДанные.ДокументОснование);
	КонецЕсли;
	
	ОткрытьФорму("Документ." + ВыбранныйТип + ".ФормаВыбора", ПараметрыФормы, Элемент, УникальныйИдентификатор, , , , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры  

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыУслуги

&НаКлиенте
Процедура УслугиКоличествоПриИзменении(Элемент)
	
	УслугиКоличествоЦенаПриИзменении();	
		
КонецПроцедуры

&НаКлиенте
Процедура УслугиЦенаПриИзменении(Элемент)
	
	УслугиКоличествоЦенаПриИзменении();	
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиКоличествоЦенаПриИзменении()
	
	ТекущиеДанные = Элементы.Услуги.ТекущиеДанные;
	
	ТекущиеДанные.Сумма = ТекущиеДанные.Количество * ТекущиеДанные.Цена;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура СоздатьЛабораторныйАнализ(Команда)
	
	ЗначенияЗаполнения = Новый Структура;	
	ЗначенияЗаполнения.Вставить("Дата",               Объект.Дата);
	ЗначенияЗаполнения.Вставить("Ссылка",             ПредопределенноеЗначение("Документ.ИНАГРО_ЛабораторныйАнализ.ПустаяСсылка"));
	ЗначенияЗаполнения.Вставить("Организация",        Объект.Организация);
	ЗначенияЗаполнения.Вставить("Владелец",           Объект.Владелец);
	ЗначенияЗаполнения.Вставить("ДоговорКонтрагента", Объект.ДоговорКонтрагента);
	ЗначенияЗаполнения.Вставить("Склад",        	  Объект.Склад);
	ЗначенияЗаполнения.Вставить("ВидХранения",        Объект.ВидХранения);
	ЗначенияЗаполнения.Вставить("Урожай",             Объект.Урожай);
	ЗначенияЗаполнения.Вставить("Номенклатура",       Объект.Номенклатура);
	ЗначенияЗаполнения.Вставить("Влажность",          Объект.Влажность);
	ЗначенияЗаполнения.Вставить("СорнаяПримесь",      Объект.СорнаяПримесь);
	ЗначенияЗаполнения.Вставить("ЗерноваяПримесь",    Объект.ЗерноваяПримесь);

	ЗначенияЗаполнения.Вставить("МассаПартии",        Объект.ФизическийВес);
	
	ИНАГРО_ЭлеваторКлиент.СоздатьДокументНаОсновании(ЭтаФорма, ЗначенияЗаполнения);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьХарактеристики(Команда)
	
	Если Объект.Характеристики.Количество() > 0 Тогда	
		ТекстВопроса = НСтр("ru='Характеристики будут очищены! Продолжить?';uk='Характеристики будуть очищені! Продовжити?'");
		Оповещение = Новый ОписаниеОповещения("ЗаполнитьХарактеристикиЗавершение", ЭтотОбъект, Параметры);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	Иначе
		ЗаполнитьХарактеристикиНаСервере();		
		РассчитатьЗачетныйВес();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьХарактеристикиЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда  	
		Возврат;
	КонецЕсли;
	
	Объект.Характеристики.Очистить();
	
	ЗаполнитьХарактеристикиНаСервере();	
	
	РассчитатьЗачетныйВес();
		
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьХарактеристикиНаСервере()
	
	Документ = РеквизитФормыВЗначение("Объект", Тип("ДокументОбъект.ИНАГРО_СкладскаяКвитанция"));	
	Документ.ЗаполнитьДанныеЛабораторногоАнализа();	
	ЗначениеВРеквизитФормы(Документ, "Объект"); 
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьУслуги(Команда)
	
	ЗаполнитьУслугиНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьУслугиНаСервере()
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");	
	ДокументОбъект.ЗаполнитьУслуги(); 	
	ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
	
	Модифицированность = Истина;

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ПодготовитьФормуНаСервере()

	УстановитьФункциональныеОпцииФормы();
	
	ТекущаяДатаДокумента = Объект.Дата;	
	
	УправлениеФормой(ЭтаФорма);

	УстановитьСостояниеДокумента();
	
КонецПроцедуры 

&НаСервере
Процедура УстановитьФункциональныеОпцииФормы()

	ОбщегоНазначенияБПКлиентСервер.УстановитьПараметрыФункциональныхОпцийФормыДокумента(ЭтаФорма);
			
	ЛабораторияРаботаетВСистеме = ИНАГРО_Элеватор.ПолучитьПараметрУчетаЭлеватора(Объект.Дата, "ЛабораторияРаботаетВСистеме", Истина);

КонецПроцедуры 

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)

	Элементы = Форма.Элементы;
	Объект   = Форма.Объект;
	
	Элементы.ЛабораторныйАнализ.Видимость     = Форма.ЛабораторияРаботаетВСистеме;
	Элементы.УточненнаяКультура.Доступность   = Объект.УточнитьКультуру;
	Элементы.ДатаВыдачи.Доступность           = Объект.ПечатьДоВостребования;
	
	Элементы.ГруппаСписокДокументов.Видимость = Объект.НесколькоДокументов;
	Элементы.ГруппаУслуги.Видимость           = НЕ Объект.НеРассчитыватьУслугуПоВыпискеСкладскогоДокумента;
	
	УстановитьДоступностьПоказателейКачества(Форма);	                        
				
КонецПроцедуры

&НаСервере
Процедура УстановитьСостояниеДокумента()
	
	СостояниеДокумента = ОбщегоНазначенияБП.СостояниеДокумента(Объект);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьПоказателейКачества(Форма)
	
	Элементы = Форма.Элементы;
	Объект   = Форма.Объект;	
	
	СписокРеквизитов = Новый Структура("Влажность, СорнаяПримесь, ЗерноваяПримесь");	
	ИНАГРО_ЭлеваторКлиентСервер.УстановитьДоступностьРеквизитовПоНастройке(Форма, СписокРеквизитов, Форма.ЛабораторияРаботаетВСистеме, ЗначениеЗаполнено(Объект.ЛабораторныйАнализ));

КонецПроцедуры

&НаКлиенте
Процедура РассчитатьЗачетныйВес()
	
	ПараметрыДляРасчетаЗачетногоВеса = ПолучитьПараметрыДляРасчетаЗачетногоВеса();
	
	Объект.ЗачетныйВес = ИНАГРО_Элеватор.ЗачетныйВесПриПроведении(ПараметрыДляРасчетаЗачетногоВеса);

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьИтоговыйВес()
	
	Если Объект.НесколькоДокументов Тогда
		Объект.ФизическийВес = Объект.СписокДокументов.Итог("Вес");
		Объект.ЗачетныйВес   = Объект.СписокДокументов.Итог("ЗачетныйВес");		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьПараметрыДляДоговоров()
	
	ПараметрыОтбора = Новый Структура("ВидХранения, Урожай");
	ЗаполнитьЗначенияСвойств(ПараметрыОтбора, Объект);

	Возврат ПараметрыОтбора;

КонецФункции

&НаКлиенте
Функция ПолучитьПараметрыДляПроверкиЗаполнения()
	
	ПараметрыДляПроверкиЗаполнения = Новый Структура(
		"Склад, ВидХранения, Урожай, 
		|Номенклатура");
	ЗаполнитьЗначенияСвойств(ПараметрыДляПроверкиЗаполнения, Объект);
	
	Возврат ПараметрыДляПроверкиЗаполнения; 

КонецФункции

&НаКлиенте
Функция ПолучитьПараметрыДляРасчетаЗачетногоВеса()

	ПараметрыДляРасчетаЗачетногоВеса = Новый Структура(
		"Ссылка, Дата, Организация,
		|Владелец, ДоговорКонтрагента, Номенклатура,
		|Склад, Влажность, СорнаяПримесь,
		|ФизическийВес, ЗачетныйВес");
	ЗаполнитьЗначенияСвойств(ПараметрыДляРасчетаЗачетногоВеса, Объект);

	Возврат ПараметрыДляРасчетаЗачетногоВеса;

КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьСписокТиповДляВыбораДокументаОснования()
	
	СписокТипов = Новый СписокЗначений;
	
	МассивТиповДокументаОснования = Метаданные.Документы.ИНАГРО_СкладскаяКвитанция.Реквизиты["ДокументОснование"].Тип.Типы();

	ОграничениеТипов = Новый Массив();
	
	ОграничениеТипов.Добавить(Тип("ДокументСсылка.ИНАГРО_Переоформление")); 
	ОграничениеТипов.Добавить(Тип("ДокументСсылка.ИНАГРО_РеестрТТНВвоз"));
	ОграничениеТипов.Добавить(Тип("ДокументСсылка.ИНАГРО_РеестрТТНВвозЖД"));

	Для Каждого ЭлементМассива Из МассивТиповДокументаОснования Цикл
			
		Если ОграничениеТипов.Найти(ЭлементМассива) = Неопределено Тогда
			 // Тип не вписывается в полученные ограничения
			Продолжить;
		КонецЕсли; 
		
		ПустоеЗначение = Новый(ЭлементМассива);
		ОбъектОписанияМетаданных = ПустоеЗначение.Метаданные();
		
		СписокТипов.Добавить(ОбъектОписанияМетаданных.Имя, ОбъектОписанияМетаданных.Представление());

	КонецЦикла; 

	СписокТипов.СортироватьПоПредставлению();
		
	Возврат СписокТипов;	

КонецФункции

#КонецОбласти  

#Область СлужебныеПроцедурыИФункцииБСП

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти