#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА


Процедура ЗаполнитьПоДокументуОснованию(Основание)

	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
		
		// Заполним реквизиты из стандартного набора по документу основанию.
		ЗаполнениеДокументов.ЗаполнитьПоОснованию(ЭтотОбъект, Основание);
		
		ТипЦен = Основание.ТипЦен;
		
		Если НЕ ЗначениеЗаполнено(Основание.ТипЦен) Тогда
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='В документе %1 не установлен тип цен! Заполнение невозможно.';uk='В документі %1 не встановлений тип цін! Заповнення неможливо.'"), СокрЛП(Основание));
			ВызватьИсключение ТекстОшибки;
		КонецЕсли;
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ДокументОснование", Основание);
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	Док.СуммаВключаетНДС,
		|	Док.ВалютаДокумента,
		|	Док.Контрагент,
		|	Док.ТипЦен     КАК ТипЦен,
		|	Док.Товары.(
		|		Номенклатура,
		|		Цена,
		|		СтавкаНДС,
		|		ЕдиницаИзмерения,
		|		СУММА(НомерСтроки) // для того, чтобы работала группировка
		|	)
		|ИЗ
		|	Документ.ПоступлениеТоваровУслуг КАК Док
		|
		|ГДЕ
		|	Док.Ссылка = &ДокументОснование
		|
		|СГРУППИРОВАТЬ ПО
		|	Док.Товары.(Номенклатура,
		|	Цена,
		|	СтавкаНДС,
		|	ЕдиницаИзмерения)";
		
		Шапка = Запрос.Выполнить().Выбрать();
		Шапка.Следующий();
		
		Выборка = Шапка.Товары.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			Если НЕ ЗначениеЗаполнено(Выборка.Номенклатура) Тогда
				Продолжить;
			КонецЕсли;
			
			СтруктураОтбора = Новый Структура();
			СтруктураОтбора.Вставить("Номенклатура",               Выборка.Номенклатура);
			
			СтрокаТабличнойЧасти = ОбработкаТабличныхЧастейКлиентСервер.НайтиСтрокуТабЧасти(ЭтотОбъект, "Товары", СтруктураОтбора);
			
			Если СтрокаТабличнойЧасти = Неопределено Тогда
				
				СтрокаТабличнойЧасти = Товары.Добавить();
				СтрокаТабличнойЧасти.Номенклатура               = Выборка.Номенклатура;
				
			КонецЕсли;
			
			Коэффициент = Справочники.Номенклатура.ПолучитьКоэффициентЕдиницыИзмерения(Выборка.Номенклатура, Выборка.ЕдиницаИзмерения);
			ЦенаЗаБазовуюЕдиницуТовара = Выборка.Цена / Коэффициент;
			
			СтрокаТабличнойЧасти.Цена  = УчетНДСКлиентСервер.ПересчитатьЦенуПриИзмененииФлаговНалогов(
			ЦенаЗаБазовуюЕдиницуТовара,
			Шапка.СуммаВключаетНДС,
			Шапка.ТипЦен.ЦенаВключаетНДС,
			УчетНДС.ПолучитьСтавкуНДС(Выборка.СтавкаНДС));                   
			
			СтрокаТабличнойЧасти.Валюта =  Шапка.ВалютаДокумента;
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры // ЗаполнитьПоДокументуОснованию()

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТоварам - результат запроса по табличной части "Товары",
//  СтруктураШапкиДокумента   - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблиица значений.
//
Функция ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента)

	ТаблицаТоваров = РезультатЗапросаПоТоварам.Выгрузить();
	
	ТаблицаТоваров.Колонки.Добавить("ТипЦен");
    ТаблицаТоваров.ЗаполнитьЗначения(СтруктураШапкиДокумента.ТипЦен, "ТипЦен");
	
	Возврат ТаблицаТоваров;

КонецФункции // ПодготовитьТаблицуТоваров()

// Выполняет движения по регистрам 
//
Процедура ДвиженияПоРегистрам(СтруктураШапкиДокумента, ТаблицаПоТоварам, Отказ, Заголовок)
	
	НаборДвижений   = Движения.ЦеныНоменклатуры;
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	
	// Заполним таблицу движений.
	ОбщегоНазначенияБПВызовСервера.ЗагрузитьВТаблицуЗначений(ТаблицаПоТоварам, ТаблицаДвижений);
	
	НаборДвижений.мПериод          = Дата;
	НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;

	Если Не Отказ Тогда
		Движения.ЦеныНоменклатуры.ВыполнитьДвижения();
	КонецЕсли;

КонецПроцедуры // ДвиженияПоРегистрам

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура - обработчик события "ОбработкаЗаполнения".
//
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)

	ТипДанныхЗаполнения = ТипЗнч(ДанныеЗаполнения);
	Если ДанныеЗаполнения <> Неопределено И ТипДанныхЗаполнения <> Тип("Структура") 
		И Метаданные().ВводитсяНаОсновании.Содержит(ДанныеЗаполнения.Метаданные()) Тогда
		ЗаполнитьПоДокументуОснованию(ДанныеЗаполнения);
	КонецЕсли;
	ЗаполнениеДокументов.Заполнить(ЭтотОбъект, ДанныеЗаполнения);
    	
КонецПроцедуры // ОбработкаЗаполнения()

// Процедура - обработчик события "ОбработкаПроведения".
//
Процедура ОбработкаПроведения(Отказ, Режим)
	
	// ПОДГОТОВКА ПРОВЕДЕНИЯ ПО ДАННЫМ ДОКУМЕНТА
	ПроведениеСервер.ПодготовитьНаборыЗаписейКПроведению(ЭтотОбъект);
	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначенияБПВызовСервера.ПредставлениеДокументаПриПроведении(Ссылка);

	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента = ОбщегоНазначенияРед12.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);

	// Заполним по шапке документа дерево параметров, нужных при проведении.
	ДеревоПолейЗапросаПоШапке = ОбщегоНазначенияРед12.СформироватьДеревоПолейЗапросаПоШапке();
	
	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа
	СтруктураШапкиДокумента = УправлениеЗапасами.СформироватьЗапросПоДеревуПолей(ЭтотОбъект, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, "");
	
	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("Номенклатура",               "Номенклатура");
	СтруктураПолей.Вставить("Услуга"                    , "Номенклатура.Услуга");
	СтруктураПолей.Вставить("Цена",                       "Цена");
	СтруктураПолей.Вставить("Валюта",                     "Валюта");

	РезультатЗапросаПоТоварам = ОбщегоНазначенияРед12.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураПолей);
	ТаблицаПоТоварам          = ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента);

	Если СтруктураШапкиДокумента.НеПроводитьНулевыеЗначения Тогда
		Сч = 0;
		Пока Сч < ТаблицаПоТоварам.Количество() Цикл
			СтрокаТаблицы = ТаблицаПоТоварам.Получить(Сч);
			Если СтрокаТаблицы.Цена = 0 Тогда
				ТаблицаПоТоварам.Удалить(СтрокаТаблицы);
			Иначе
				Сч = Сч + 1;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	Если Не Отказ Тогда
		ДвиженияПоРегистрам(СтруктураШапкиДокумента, ТаблицаПоТоварам, Отказ, Заголовок);
	КонецЕсли;

	ПроведениеСервер.ПодготовитьНаборыЗаписейКЗаписиДвижений(ЭтотОбъект);
	
КонецПроцедуры	// ОбработкаПроведения

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКОтменеПроведения(ЭтотОбъект);
	Движения.Записать();
	
КонецПроцедуры

// Процедура - обработчик события "ПередЗаписью".
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)

	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Информация = Строка(ТипЦен);

КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	Дата 		  = НачалоДня(ОбщегоНазначенияБП.ПолучитьРабочуюДату());
	Ответственный = Пользователи.ТекущийПользователь();
	
КонецПроцедуры

#КонецЕсли
