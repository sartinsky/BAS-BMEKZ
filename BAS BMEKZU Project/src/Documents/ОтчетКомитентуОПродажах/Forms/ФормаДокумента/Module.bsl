#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	Если Параметры.Ключ.Пустая() Тогда
		ПодготовитьФормуНаСервере();
	КонецЕсли;

	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)

	Если ИсточникВыбора.ИмяФормы = "Обработка.ПодборНоменклатуры.Форма.Форма" Тогда
		
		ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение, ИсточникВыбора.ИмяТаблицы);
		
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		
		Модифицированность	= Истина;
		
		ЗаполнитьЗначенияСвойств(Объект, ВыбранноеЗначение);
	
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)

	ОбщегоНазначенияБПКлиент.ОбработкаОповещенияФормыДокумента(ЭтаФорма, Объект.Ссылка, ИмяСобытия, Параметр, Источник);

КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом

	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	ПодготовитьФормуНаСервере();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	ЗаполнитьДобавленныеКолонкиТаблиц();
	
	УстановитьСостояниеДокумента();

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

#КонецОбласти   //ОбработчикиСобытийФормы

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)

	Если НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДатаДокумента) Тогда
		// Изменение времени не влияет на поведение документа.
		ТекущаяДатаДокумента = Объект.Дата;
		Возврат;
	КонецЕсли;

	// Общие проверки условий по датам.
	ТребуетсяВызовСервера = ОбщегоНазначенияБПКлиент.ТребуетсяВызовСервераПриИзмененииДатыДокумента(Объект.Дата, 
		ТекущаяДатаДокумента, Объект.ВалютаДокумента, ВалютаРегламентированногоУчета);
		
	// Если определили, что изменение даты может повлиять на какие-либо параметры, 
	// то передаем обработку на сервер.
	Если ТребуетсяВызовСервера Тогда
		ДатаПриИзмененииНаСервере();
	КонецЕсли;
	
	// Запомним новую дату документа.
	ТекущаяДатаДокумента = Объект.Дата;

КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)

	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		ОрганизацияПриИзмененииНаСервере();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)

	Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
		КонтрагентПриИзмененииНаСервере();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДоговорКонтрагентаПриИзменении(Элемент)

	Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		ДоговорКонтрагентаПриИзмененииНаСервере();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЦеныИВалютаНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОбработатьИзмененияПоКнопкеЦеныИВалюты(Объект.ВалютаДокумента);

КонецПроцедуры

&НаКлиенте
Процедура СпособРасчетаКомиссионногоВознагражденияПриИзменении(Элемент)
	
	СпособРасчетаКомиссионногоВознагражденияПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПроцентКомиссионногоВознагражденияПриИзменении(Элемент)
	
	ПроцентКомиссионногоВознагражденияПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура СтавкаНДСВознагражденияПриИзменении(Элемент)
	
	СтавкаНДСВознагражденияПриИзмененииНаСервере();

КонецПроцедуры

&НаКлиенте
Процедура УдержатьВознаграждениеПриИзменении(Элемент)

	Если Объект.УдержатьВознаграждение Тогда
		
		// Если вознаграждение удерживается, то счет расчетов с контрагентом 
		// выступает в качестве счета авансов для расчетов по вознаграждению
		Объект.СчетУчетаРасчетовПоАвансамПолученным = Объект.СчетУчетаРасчетовСКонтрагентом;
		
	Иначе
		
		ТекстВопроса = НСтр("ru='Изменить счета учета расчетов?';uk='Змінити рахунки обліку розрахунків?'");
		
		ПоказатьВопрос(Новый ОписаниеОповещения("УдержатьВознаграждениеПриИзмененииЗавершение", ЭтотОбъект), ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
        Возврат;

	КонецЕсли;
	
	УдержатьВознаграждениеПриИзмененииФрагмент();
КонецПроцедуры

&НаКлиенте
Процедура УдержатьВознаграждениеПриИзмененииЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Ответ = РезультатВопроса;
    Если Ответ = КодВозвратаДиалога.Да Тогда
        
        ЗаполнитьСчетаВзаиморасчетов();
        
    КонецЕсли;
    
    
    УдержатьВознаграждениеПриИзмененииФрагмент();

КонецПроцедуры

&НаКлиенте
Процедура УдержатьВознаграждениеПриИзмененииФрагмент()
    
    УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура УслугаПоВознаграждениюПриИзменении(Элемент)

	Если ЗначениеЗаполнено(Объект.УслугаПоВознаграждению) Тогда
		УслугаПоВознаграждениюПриИзмененииНаСервере();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СчетУчетаРасчетовСКонтрагентомПриИзменении(Элемент)
	
	Если Объект.УдержатьВознаграждение Тогда
		
		Объект.СчетУчетаРасчетовПоАвансамПолученным = Объект.СчетУчетаРасчетовСКонтрагентом;
		
	КонецЕсли; 

КонецПроцедуры

&НаКлиенте
Процедура ПредставительКонтрагентаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	УправлениеКонтактнойИнформациейБП.ПредставительКонтрагентаНачалоВыбора(Объект.Контрагент, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования,ЭтотОбъект,"Объект.Комментарий");
	
КонецПроцедуры

#КонецОбласти	//ОбработчикиСобытийЭлементовШапкиФормы

#Область ОбработчикиСобытийЭлементовТаблицыФормыТовары

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)

	СтруктураСтроки = ПолучитьСтруктуруДанныхСтроки(Элементы.Товары.ТекущиеДанные, "Товары");
	Если СтруктураСтроки = Неопределено ИЛИ НЕ ЗначениеЗаполнено(СтруктураСтроки.Номенклатура) Тогда
		Возврат;
	КонецЕсли;

	ПриИзмененииТоварыНоменклатураНаСервере(СтруктураСтроки, "Товары", Объект, ВалютаРегламентированногоУчета);

	ЗаполнитьДанныеСтрокиИзСтруктуры(Элементы.Товары.ТекущиеДанные, СтруктураСтроки, "Товары");

КонецПроцедуры

&НаКлиенте
Процедура ТоварыЕдиницаИзмеренияПриИзменении(Элемент)
	
	ДанныеСтроки = Элементы.Товары.ТекущиеДанные;
	
	СтруктураСтроки = ПолучитьСтруктуруДанныхСтроки(ДанныеСтроки, "Товары");
	Если СтруктураСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПриИзмененииТоварыЕдиницаИзмеренияНаСервере(СтруктураСтроки);
	
	ЗаполнитьДанныеСтрокиИзСтруктуры(ДанныеСтроки, СтруктураСтроки, "Товары");
	
	ПересчитатьСуммуСтроки(ДанныеСтроки, "Товары");
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКоличествоПриИзменении(Элемент)

	ДанныеСтроки = Элементы.Товары.ТекущиеДанные;
	ПересчитатьСуммуСтроки(ДанныеСтроки, "Товары");

КонецПроцедуры

&НаКлиенте
Процедура ТоварыЦенаПоступленияПриИзменении(Элемент)

	ДанныеСтроки = Элементы.Товары.ТекущиеДанные;
	ДанныеСтроки.СуммаПоступления = ДанныеСтроки.Количество * ДанныеСтроки.ЦенаПоступления;
	Если Объект.СпособРасчетаКомиссионногоВознаграждения = ПредопределенноеЗначение("Перечисление.СпособыРасчетаКомиссионногоВознаграждения.ПроцентОтРазностиСуммПродажиИПоступления") Тогда
		РассчитатьВознаграждениеВСтроке(
			ДанныеСтроки.СуммаВознаграждения,
			ДанныеСтроки.СуммаНДСВознаграждения,
			ДанныеСтроки.ВсегоВознаграждение,
			ДанныеСтроки.Сумма,
			ДанныеСтроки.СуммаНДС,
			ДанныеСтроки.СуммаПоступления,
			Объект.ПроцентКомиссионногоВознаграждения,
			Объект.СпособРасчетаКомиссионногоВознаграждения,
			Объект.СтавкаНДСВознаграждения,
			Объект.СуммаВключаетНДС,
			"Товары");
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаПоступленияПриИзменении(Элемент)

	ДанныеСтроки = Элементы.Товары.ТекущиеДанные;
	ДанныеСтроки.ЦенаПоступления = ДанныеСтроки.СуммаПоступления / ?(ДанныеСтроки.Количество = 0, 1, ДанныеСтроки.Количество);
	Если Объект.СпособРасчетаКомиссионногоВознаграждения = ПредопределенноеЗначение("Перечисление.СпособыРасчетаКомиссионногоВознаграждения.ПроцентОтРазностиСуммПродажиИПоступления") Тогда
		РассчитатьВознаграждениеВСтроке(
			ДанныеСтроки.СуммаВознаграждения,
			ДанныеСтроки.СуммаНДСВознаграждения,
			ДанныеСтроки.ВсегоВознаграждение,
			ДанныеСтроки.Сумма,
			ДанныеСтроки.СуммаНДС,
			ДанныеСтроки.СуммаПоступления,
			Объект.ПроцентКомиссионногоВознаграждения,
			Объект.СпособРасчетаКомиссионногоВознаграждения,
			Объект.СтавкаНДСВознаграждения,
			Объект.СуммаВключаетНДС,
			"Товары");
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ТоварыЦенаПриИзменении(Элемент)

	ДанныеСтроки = Элементы.Товары.ТекущиеДанные;
	ПересчитатьСуммуСтроки(ДанныеСтроки, "Товары");

КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаПриИзменении(Элемент)

	ДанныеСтроки = Элементы.Товары.ТекущиеДанные;
	ПересчитатьЦенуСтроки(ДанныеСтроки, "Товары");

КонецПроцедуры

&НаКлиенте
Процедура ТоварыСтавкаНДСПриИзменении(Элемент)

	ДанныеСтроки = Элементы.Товары.ТекущиеДанные;
	ПересчитатьСуммуНДСВСтроке(ДанныеСтроки);
	Если ЗначениеЗаполнено(Объект.ПроцентКомиссионногоВознаграждения) Тогда
		РассчитатьВознаграждениеВСтроке(
			ДанныеСтроки.СуммаВознаграждения,
			ДанныеСтроки.СуммаНДСВознаграждения,
			ДанныеСтроки.ВсегоВознаграждение,
			ДанныеСтроки.Сумма,
			ДанныеСтроки.СуммаНДС,
			ДанныеСтроки.СуммаПоступления,
			Объект.ПроцентКомиссионногоВознаграждения,
			Объект.СпособРасчетаКомиссионногоВознаграждения,
			Объект.СтавкаНДСВознаграждения,
			Объект.СуммаВключаетНДС,
			"Товары");
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаВознагражденияПриИзменении(Элемент)

	ДанныеСтроки = Элементы.Товары.ТекущиеДанные;

	ДанныеСтроки.СуммаНДСВознаграждения = УчетНДСКлиентСервер.РассчитатьСуммуНДС(ДанныеСтроки.СуммаВознаграждения,
											  Объект.СуммаВключаетНДС,
											  УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(Объект.СтавкаНДСВознаграждения));

	ДанныеСтроки.ВсегоВознаграждение = ДанныеСтроки.СуммаВознаграждения + ?(Объект.СуммаВключаетНДС, 0, ДанныеСтроки.СуммаНДСВознаграждения);


КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриИзменении(Элемент)

	ОбновитьИтоги(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если НоваяСтрока И ОтменаРедактирования Тогда
		ОбновитьИтоги(ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти     //ОбработчикиСобытийЭлементовТаблицыФормыТовары

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗаполнитьПоДоговору(Команда)

	Если НЕ ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		ТекстПредупреждения = НСтр("ru='Не выбран договор. Заполнение невозможно.';uk='Не обраний договір. Заповнення неможливо.'") ;
		ПоказатьПредупреждение(Неопределено, ТекстПредупреждения);
		Возврат;
	КонецЕсли;

	Если Объект.Товары.Количество() > 0 Тогда
		ТекстВопроса = НСтр("ru='Перед заполнением табличная часть будет очищена. Заполнить?';uk='Перед заповненням таблична частина буде очищена. Заповнити?'") ;

		ПоказатьВопрос(Новый ОписаниеОповещения("ЗаполнитьПоДоговоруЗавершение", ЭтотОбъект), ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да, Заголовок);
        Возврат;
	КонецЕсли;

	ЗаполнитьПоДоговоруФрагмент();
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоДоговоруЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Ответ = РезультатВопроса;
    Если Ответ <> КодВозвратаДиалога.Да Тогда
        Возврат;
    КонецЕсли;
    
    ЗаполнитьПоДоговоруФрагмент();

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоДоговоруФрагмент()
    
    ЗаполнитьПоДоговоруНаСервере();
	
	ЗаполнитьДобавленныеКолонкиТаблиц();
	ОбновитьИтоги(ЭтаФорма);

КонецПроцедуры

#Область ЗаполнитьПоПоступлению

&НаКлиенте
Процедура ЗаполнитьПоПоступлению(Команда)

	Если НЕ ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		ТекстПредупреждения = НСтр("ru='Не выбран договор. Заполнение невозможно.';uk='Не обраний договір. Заповнення неможливо.'") ;
		ПоказатьПредупреждение(Неопределено, ТекстПредупреждения);
		Возврат;
	КонецЕсли;

	Если Объект.Товары.Количество() > 0 Тогда

		ТекстВопроса = НСтр("ru='Перед заполнением табличная часть будет очищена. Заполнить?';uk='Перед заповненням таблична частина буде очищена. Заповнити?'") ;
		ПоказатьВопрос(Новый ОписаниеОповещения("ЗаполнитьПоПоступлениюЗавершениеВопрос", ЭтотОбъект), ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да, Заголовок);
        Возврат;

	КонецЕсли;

	ЗаполнитьПоПоступлениюПослеВопроса();
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоПоступлениюЗавершениеВопрос(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Ответ = РезультатВопроса;
    Если Ответ <> КодВозвратаДиалога.Да Тогда
        Возврат;
    КонецЕсли;
    
    ЗаполнитьПоПоступлениюПослеВопроса();

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоПоступлениюПослеВопроса()
    
    Перем ПараметрыОтбора, ПараметрыФормы;
    
    ПараметрыОтбора = Новый Структура("Организация, Контрагент, ДоговорКонтрагента", Объект.Организация, Объект.Контрагент, Объект.ДоговорКонтрагента);
    ПараметрыФормы = Новый Структура("Отбор, МножественныйВыбор", ПараметрыОтбора, Ложь);
    
    ОткрытьФорму("Документ.ПоступлениеТоваровУслуг.ФормаВыбора", ПараметрыФормы, ЭтаФорма,,,, Новый ОписаниеОповещения("ЗаполнитьПоПоступлениюПослеВыбораДокумента", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоПоступлениюПослеВыбораДокумента(Результат, ДополнительныеПараметры) Экспорт
    
    Поступление = Результат;
    
    Если НЕ ЗначениеЗаполнено(Поступление) Тогда
        Возврат;
    КонецЕсли;
    
    ЗаполнитьПоПоступлениюНаСервере(Поступление);

	ЗаполнитьДобавленныеКолонкиТаблиц();
	ОбновитьИтоги(ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти //ЗаполнитьПоПоступлению

#Область ЗаполнитьРеализованнымПоПоступлению

&НаКлиенте
Процедура ЗаполнитьРеализованнымПоПоступлению(Команда)

	Если НЕ ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		ТекстПредупреждения = НСтр("ru='Не выбран договор. Заполнение невозможно.';uk='Не обраний договір. Заповнення неможливо.'") ;
		ПоказатьПредупреждение(Неопределено, ТекстПредупреждения);
		Возврат;
	КонецЕсли;

	Если Объект.Товары.Количество() > 0 Тогда

		ТекстВопроса = НСтр("ru='Перед заполнением табличная часть будет очищена. Заполнить?';uk='Перед заповненням таблична частина буде очищена. Заповнити?'") ;
		ПоказатьВопрос(Новый ОписаниеОповещения("ЗаполнитьРеализованнымПоПоступлениюЗавершениеВопрос", ЭтотОбъект), ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да, Заголовок);
        Возврат;

	КонецЕсли;

	ЗаполнитьРеализованнымПоПоступлениюПослеВопроса();
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьРеализованнымПоПоступлениюЗавершениеВопрос(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Ответ = РезультатВопроса;
    Если Ответ <> КодВозвратаДиалога.Да Тогда
        Возврат;
    КонецЕсли;
    
    
    ЗаполнитьРеализованнымПоПоступлениюПослеВопроса();

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьРеализованнымПоПоступлениюПослеВопроса()
    
    Перем ПараметрыОтбора, ПараметрыФормы;
    
    ПараметрыОтбора = Новый Структура("Организация, Контрагент, ДоговорКонтрагента", Объект.Организация, Объект.Контрагент, Объект.ДоговорКонтрагента);
    ПараметрыФормы = Новый Структура("Отбор, МножественныйВыбор", ПараметрыОтбора, Ложь);
    
    ОткрытьФорму("Документ.ПоступлениеТоваровУслуг.ФормаВыбора", ПараметрыФормы, ЭтаФорма,,,, Новый ОписаниеОповещения("ЗаполнитьРеализованнымПоПоступлениюПослеВыбораДокумента", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьРеализованнымПоПоступлениюПослеВыбораДокумента(Результат, ДополнительныеПараметры) Экспорт
    
    Поступление = Результат;
    
    Если НЕ ЗначениеЗаполнено(Поступление) Тогда
        Возврат;
    КонецЕсли;
    
    ЗаполнитьРеализованнымПоПоступлениюНаСервере(Поступление);
	
	ЗаполнитьДобавленныеКолонкиТаблиц();
	ОбновитьИтоги(ЭтаФорма);

КонецПроцедуры

#КонецОбласти //ЗаполнитьРеализованнымПоПоступлению

&НаКлиенте
Процедура ЗаполнитьРеализованнымПоДоговору(Команда)

	Если НЕ ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		ТекстПредупреждения = НСтр("ru='Не выбран договор. Заполнение невозможно.';uk='Не обраний договір. Заповнення неможливо.'") ;
		ПоказатьПредупреждение(Неопределено, ТекстПредупреждения);
		Возврат;
	КонецЕсли;

	Если Объект.Товары.Количество() > 0 Тогда
		ТекстВопроса = НСтр("ru='Перед заполнением табличная часть будет очищена. Заполнить?';uk='Перед заповненням таблична частина буде очищена. Заповнити?'") ;
		Ответ = Неопределено;

		ПоказатьВопрос(Новый ОписаниеОповещения("ЗаполнитьРеализованнымПоДоговоруЗавершение", ЭтотОбъект), ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да, Заголовок);
        Возврат;
	КонецЕсли;

    ЗаполнитьРеализованнымНаСервере();
	
	ЗаполнитьДобавленныеКолонкиТаблиц();
	ОбновитьИтоги(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьРеализованнымПоДоговоруЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
        Возврат;
    КонецЕсли;
    
    ЗаполнитьРеализованнымНаСервере();

	ЗаполнитьДобавленныеКолонкиТаблиц();
	ОбновитьИтоги(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборТовары(Команда)

	ПараметрыПодбора = ПолучитьПараметрыПодбора("Товары");
	Если ПараметрыПодбора <> Неопределено Тогда
		ОткрытьФорму("Обработка.ПодборНоменклатуры.Форма.Форма", ПараметрыПодбора,
			ЭтаФорма, УникальныйИдентификатор);
	КонецЕсли;

КонецПроцедуры

#КонецОбласти    // ОбработчикиКомандФормы

#Область СлужебныеПроцедурыИФункции
// Обслуживание типа цен - валюты - НДС:

&НаКлиенте
Процедура ОбработатьИзмененияПоКнопкеЦеныИВалюты(Знач ВалютаДоИзменения, ПересчитатьЦены = Ложь, ПерезаполнитьЦены = Ложь)

	КурсДоИзменения 	 = Объект.КурсВзаиморасчетов;
	КратностьДоИзменения = Объект.КратностьВзаиморасчетов;

	// 1. Формируем структуру параметров для заполнения формы "Цены и Валюта".
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ВалютаДокумента",		  Объект.ВалютаДокумента);
	СтруктураПараметров.Вставить("Курс",				  Объект.КурсВзаиморасчетов);
	СтруктураПараметров.Вставить("Кратность",			  Объект.КратностьВзаиморасчетов);
	СтруктураПараметров.Вставить("СуммаВключаетНДС",	  Объект.СуммаВключаетНДС);
	СтруктураПараметров.Вставить("Контрагент",			  Объект.Контрагент);
	СтруктураПараметров.Вставить("Договор",				  Объект.ДоговорКонтрагента);
	СтруктураПараметров.Вставить("Организация",			  Объект.Организация);
	СтруктураПараметров.Вставить("ДатаДокумента",		  Объект.Дата);
	СтруктураПараметров.Вставить("ПерезаполнитьЦены",	  ПерезаполнитьЦены);
	СтруктураПараметров.Вставить("ПересчитатьЦены",		  ПересчитатьЦены);
	СтруктураПараметров.Вставить("БылиВнесеныИзменения",  Ложь);
	СтруктураПараметров.Вставить("ТипЦен", 				  Объект.ТипЦен);

	ОткрытьФорму("ОбщаяФорма.ФормаЦеныИВалюта", СтруктураПараметров,,,,, Новый ОписаниеОповещения("ОбработатьИзмененияПоКнопкеЦеныИВалютыЗавершение", ЭтотОбъект, Новый Структура("ВалютаДоИзменения, КратностьДоИзменения, КурсДоИзменения", ВалютаДоИзменения, КратностьДоИзменения, КурсДоИзменения)), РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьИзмененияПоКнопкеЦеныИВалютыЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    ВалютаДоИзменения = ДополнительныеПараметры.ВалютаДоИзменения;
    КратностьДоИзменения = ДополнительныеПараметры.КратностьДоИзменения;
    КурсДоИзменения = ДополнительныеПараметры.КурсДоИзменения;
    
    
    // 2. Открываем форму "Цены и Валюта".
    СтруктураЦеныИВалюта = Результат;
    
    // 3. Перезаполняем табличную часть если были внесены изменения в форме "Цены и Валюта".
    Если ТипЗнч(СтруктураЦеныИВалюта) = Тип("Структура") И СтруктураЦеныИВалюта.БылиВнесеныИзменения Тогда
        
        Объект.ТипЦен = СтруктураЦеныИВалюта.ТипЦен;
        Объект.ВалютаДокумента = СтруктураЦеныИВалюта.ВалютаДокумента;
        Объект.КурсВзаиморасчетов = СтруктураЦеныИВалюта.КурсРасчетов;
        Объект.КратностьВзаиморасчетов = СтруктураЦеныИВалюта.КратностьРасчетов;
        Объект.СуммаВключаетНДС = СтруктураЦеныИВалюта.СуммаВключаетНДС;
        
        Модифицированность = Истина;
        
        ПересчитатьНДС = СтруктураЦеныИВалюта.СуммаВключаетНДС <> СтруктураЦеныИВалюта.ПредСуммаВключаетНДС;
        Если СтруктураЦеныИВалюта.ПерезаполнитьЦены ИЛИ СтруктураЦеныИВалюта.ПересчитатьЦены ИЛИ ПересчитатьНДС Тогда
            ЗаполнитьРассчитатьСуммы(
            ВалютаДоИзменения, 
            КурсДоИзменения,
            КратностьДоИзменения,
            СтруктураЦеныИВалюта.ПерезаполнитьЦены, 
            СтруктураЦеныИВалюта.ПересчитатьЦены, 
            ПересчитатьНДС);
        КонецЕсли;
        
        СформироватьНадписьЦеныИВалюта(ЭтаФорма);
        
    КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРассчитатьСуммы(Знач ВалютаДоИзменения, КурсДоИзменения, КратностьДоИзменения, ПерезаполнитьЦены = Ложь, ПересчитатьЦены = Ложь, ПересчитатьНДС = Ложь)
	
	Если ПерезаполнитьЦены Тогда
		
		ТаблицаЦенНоменклатуры	= Ценообразование.ПолучитьТаблицуЦенНоменклатуры(
			ОбщегоНазначения.ВыгрузитьКолонку(Объект.Товары, "Номенклатура", Истина),
			Объект.ТипЦен,
			Объект.Дата);
		
	ИначеЕсли ПересчитатьЦены Тогда
		Если КурсДоИзменения <> 0 И КратностьДоИзменения <> 0 Тогда
			СтруктураКурса = Новый Структура("Курс, Кратность", КурсДоИзменения, КратностьДоИзменения);
		Иначе
			СтруктураКурса = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаДоИзменения, Объект.Дата);
		КонецЕсли;
	КонецЕсли;

	Для Каждого Строка Из Объект.Товары Цикл
		ЗаполнитьРассчитатьСуммыВСтроке(Строка, ТаблицаЦенНоменклатуры, ВалютаДоИзменения, СтруктураКурса, ПерезаполнитьЦены, ПересчитатьЦены, ПересчитатьНДС, Истина, 0);
	КонецЦикла;

	ОбновитьИтоги(ЭтаФорма);

	Если ПересчитатьНДС Тогда
		УстановитьЗаголовкиКолонок();
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРассчитатьСуммыВСтроке(Строка, ТаблицаЦенНоменклатуры, ВалютаДоИзменения, СтруктураКурса, ПерезаполнитьЦены, ПересчитатьЦены, ПересчитатьНДС, ЕстьНДС, ЗначениеПустогоКоличества)

	ЦенаПоступления = Строка.ЦенаПоступления;

	Если ПерезаполнитьЦены Тогда
		
		НайденнаяСтрока	= ТаблицаЦенНоменклатуры.Найти(Строка.Номенклатура, "Номенклатура");
		Если НайденнаяСтрока <> Неопределено Тогда
			Цена = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(
				НайденнаяСтрока.Цена, 
				НайденнаяСтрока.Валюта, Объект.ВалютаДокумента, 
				НайденнаяСтрока.Курс, Объект.КурсВзаиморасчетов,
				НайденнаяСтрока.Кратность, Объект.КратностьВзаиморасчетов);
		Иначе
			Цена = 0;
		КонецЕсли;
		
		// Признак того, что цена включает НДС, хранится в реквизите ЦенаВключаетНДС типа цен
		ЦенаВключаетНДС = ?(ЗначениеЗаполнено(Объект.ТипЦен), Объект.ТипЦен.ЦенаВключаетНДС, Ложь);
		
	Иначе
		Если ПересчитатьЦены Тогда
			Цена = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(
				Строка.Цена,
				ВалютаДоИзменения, Объект.ВалютаДокумента, 
				СтруктураКурса.Курс, Объект.КурсВзаиморасчетов, 
				СтруктураКурса.Кратность, Объект.КратностьВзаиморасчетов);
			
			ЦенаПоступления = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(
				ЦенаПоступления,
				ВалютаДоИзменения, Объект.ВалютаДокумента, 
				СтруктураКурса.Курс, Объект.КурсВзаиморасчетов, 
				СтруктураКурса.Кратность, Объект.КратностьВзаиморасчетов);
			
			Строка.СуммаВознаграждения  = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(
				Строка.СуммаВознаграждения, 
				ВалютаДоИзменения, Объект.ВалютаДокумента, 
				СтруктураКурса.Курс, Объект.КурсВзаиморасчетов, 
				СтруктураКурса.Кратность, Объект.КратностьВзаиморасчетов);
		Иначе
			Цена = Строка.Цена;
		КонецЕсли;
		// Признак того, что цена включает НДС, хранится в реквизите СуммаВключаетНДС документа
		ЦенаВключаетНДС = ?(ПересчитатьНДС, НЕ Объект.СуммаВключаетНДС, Объект.СуммаВключаетНДС);
	КонецЕсли;

	Если ЕстьНДС Тогда
		Строка.Цена     = УчетНДСКлиентСервер.ПересчитатьЦенуПриИзмененииФлаговНалогов(
			Цена, ЦенаВключаетНДС, Объект.СуммаВключаетНДС, 
			УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(Строка.СтавкаНДС));
			
		Строка.ЦенаПоступления  = УчетНДСКлиентСервер.ПересчитатьЦенуПриИзмененииФлаговНалогов(
			ЦенаПоступления, ЦенаВключаетНДС, Объект.СуммаВключаетНДС, 
			УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(Строка.СтавкаНДС));
		Строка.СуммаПоступления = Строка.ЦенаПоступления * ?(Строка.Количество =0, ЗначениеПустогоКоличества, Строка.Количество);

		Строка.Сумма    = Строка.Цена * ?(Строка.Количество =0, ЗначениеПустогоКоличества, Строка.Количество);
		Строка.СуммаНДС = УчетНДСКлиентСервер.РассчитатьСуммуНДС(
			Строка.Сумма, Объект.СуммаВключаетНДС, 
			УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(Строка.СтавкаНДС));
		
		Если Строка.СуммаВознаграждения <> 0 Тогда
			РассчитатьВознаграждениеВСтроке(
				Строка.СуммаВознаграждения,
				Строка.СуммаНДСВознаграждения,
				Строка.ВсегоВознаграждение,
				Строка.Сумма,
				Строка.СуммаНДС,
				Строка.СуммаПоступления,
				Объект.ПроцентКомиссионногоВознаграждения,
				Объект.СпособРасчетаКомиссионногоВознаграждения,
				Объект.СтавкаНДСВознаграждения,
				Объект.СуммаВключаетНДС,
				"Товары");
		КонецЕсли;
	Иначе
		Строка.Цена             = Цена;
		Строка.Сумма            = Строка.Цена * ?(Строка.Количество = 0, ЗначениеПустогоКоличества, Строка.Количество);
		Строка.СуммаПоступления = Строка.ЦенаПоступления * ?(Строка.Количество = 0, ЗначениеПустогоКоличества, Строка.Количество);
	КонецЕсли;

	Строка.Всего = Строка.Сумма + ?(Объект.СуммаВключаетНДС, 0, Строка.СуммаНДС);

КонецПроцедуры

// Серверная обработка изменения реквизитов:

&НаСервере
Процедура ДатаПриИзмененииНаСервере()
	
	ДатаОбработатьИзменение();
	УправлениеФормой(ЭтаФорма);
	УстановитьЗаголовкиКолонок();
	
КонецПроцедуры

&НаСервере
Процедура ДатаОбработатьИзменение()

	ПредыдущаяОрганизацияПлательщикНДС = ПлательщикНДС;

	УстановитьФункциональныеОпцииФормы();

	// Если изменился статус плательщика НДС необходимо перезаполнить ставки НДС
	Если ПредыдущаяОрганизацияПлательщикНДС <> ПлательщикНДС Тогда
		ПересчитатьСуммуВознагражденияПриИзмененииПризнакаПлательщикНДС();
	КонецЕсли;

	Если (Объект.ВалютаДокумента <> ВалютаРегламентированногоУчета) Тогда
		СтруктураКурсаДокумента        = РаботаСКурсамиВалют.ПолучитьКурсВалюты(Объект.ВалютаДокумента, Объект.Дата);
		Объект.КурсВзаиморасчетов      = СтруктураКурсаДокумента.Курс;
		Объект.КратностьВзаиморасчетов = СтруктураКурсаДокумента.Кратность;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()

	ПредыдущаяОрганизацияПлательщикНДС = ПлательщикНДС;

	УстановитьФункциональныеОпцииФормы();
	
	// Если изменился статус плательщика НДС необходимо перезаполнить ставки НДС
	Если ПредыдущаяОрганизацияПлательщикНДС <> ПлательщикНДС Тогда
		ПересчитатьСуммуВознагражденияПриИзмененииПризнакаПлательщикНДС();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
		КонтрагентОбработатьИзменение();
	КонецЕсли;
	
	УправлениеФормой(ЭтаФорма);
	УстановитьЗаголовкиКолонок();

КонецПроцедуры

&НаСервере
Процедура КонтрагентПриИзмененииНаСервере()
	
	КонтрагентОбработатьИзменение();
	УправлениеФормой(ЭтаФорма);
	УстановитьЗаголовкиКолонок();

КонецПроцедуры

&НаСервере
Процедура КонтрагентОбработатьИзменение()

	Список = Новый СписокЗначений;
	Список.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомитентом);
	БухгалтерскийУчетПереопределяемый.УстановитьДоговорКонтрагента(
		Объект.ДоговорКонтрагента, Объект.Контрагент, Объект.Организация, Список);

	Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		ДоговорКонтрагентаОбработатьИзменение();
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ДоговорКонтрагентаПриИзмененииНаСервере()
	
	ДоговорКонтрагентаОбработатьИзменение();
	УправлениеФормой(ЭтаФорма);
	УстановитьЗаголовкиКолонок();

КонецПроцедуры

&НаСервере
Процедура ДоговорКонтрагентаОбработатьИзменение()

	ВалютаДоИзменения = Объект.ВалютаДокумента;
	КурсДоИзменения   = Объект.КурсВзаиморасчетов;
	КратностьДоИзменения   = Объект.КратностьВзаиморасчетов;
	ТипЦенДоИзменения = Объект.ТипЦен;
	СуммаВключаетНДСДоИзменения = Объект.СуммаВключаетНДС;

	РеквизитыДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		Объект.ДоговорКонтрагента, 
		"ВалютаВзаиморасчетов,ТипЦен,ВидДоговора,СложныйНалоговыйУчет,
		|СпособРасчетаКомиссионногоВознаграждения,ПроцентКомиссионногоВознаграждения");

	ДоговорУказан = ЗначениеЗаполнено(Объект.ДоговорКонтрагента);
	СложныйНалоговыйУчет = ДоговорУказан И РеквизитыДоговора.СложныйНалоговыйУчет;

	Объект.ВалютаДокумента         = РеквизитыДоговора.ВалютаВзаиморасчетов;
	СтруктураКурсаДокумента        = РаботаСКурсамиВалют.ПолучитьКурсВалюты(Объект.ВалютаДокумента, Объект.Дата);
	Объект.КурсВзаиморасчетов      = СтруктураКурсаДокумента.Курс;
	Объект.КратностьВзаиморасчетов = СтруктураКурсаДокумента.Кратность;

	Если ЗначениеЗаполнено(РеквизитыДоговора.ТипЦен) Тогда
		 Объект.ТипЦен           = РеквизитыДоговора.ТипЦен;
		 Объект.СуммаВключаетНДС = РеквизитыДоговора.ТипЦен.ЦенаВключаетНДС;
	КонецЕсли;

	ПересчитатьЦены = Объект.ВалютаДокумента <> ВалютаДоИзменения
		ИЛИ Объект.КурсВзаиморасчетов <> КурсДоИзменения
		ИЛИ Объект.ТипЦен <> ТипЦенДоИзменения;
	ПересчитатьНДС = Объект.СуммаВключаетНДС <> СуммаВключаетНДСДоИзменения;

	// Если поменялся признак КомитентРезидент, перезаполним ставки НДС в табличной части. 
	Если Объект.ВалютаДокумента <> ВалютаДоИзменения 
	   И (Объект.ВалютаДокумента = ВалютаРегламентированногоУчета ИЛИ ВалютаДоИзменения = ВалютаРегламентированногоУчета) Тогда
		КомитентРезидент = (Объект.ВалютаДокумента = ВалютаРегламентированногоУчета);
		
		Для Каждого СтрокаТабличнойЧасти Из Объект.Товары Цикл
			Если КомитентРезидент Тогда
				СтавкаНДСПоУмолчанию = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаТабличнойЧасти.Номенклатура, "СтавкаНДС");
				Если ЗначениеЗаполнено(СтавкаНДСПоУмолчанию) Тогда
					СтрокаТабличнойЧасти.СтавкаНДС = СтавкаНДСПоУмолчанию;
				Иначе
					СтрокаТабличнойЧасти.СтавкаНДС = Перечисления.СтавкиНДС.НДС20;
				КонецЕсли;
			Иначе
				СтрокаТабличнойЧасти.СтавкаНДС = Перечисления.СтавкиНДС.НеНДС;
			КонецЕсли;
			
		КонецЦикла;
		
		ПересчитатьНДС = Истина;
		
	КонецЕсли;

	Если Объект.Товары.Количество() > 0 И (ПересчитатьЦены ИЛИ ПересчитатьНДС) Тогда
		ЗаполнитьРассчитатьСуммы(ВалютаДоИзменения, КурсДоИзменения, КратностьДоИзменения, Ложь, ПересчитатьЦены, ПересчитатьНДС);
	ИначеЕсли ПересчитатьНДС Тогда
		УстановитьЗаголовкиКолонок();
	КонецЕсли;
	
	Объект.СпособРасчетаКомиссионногоВознаграждения = РеквизитыДоговора.СпособРасчетаКомиссионногоВознаграждения;
	Объект.ПроцентКомиссионногоВознаграждения       = РеквизитыДоговора.ПроцентКомиссионногоВознаграждения;
	Если НЕ ЗначениеЗаполнено(Объект.СпособРасчетаКомиссионногоВознаграждения) Тогда
		Объект.СпособРасчетаКомиссионногоВознаграждения = Перечисления.СпособыРасчетаКомиссионногоВознаграждения.НеРассчитывается;
	КонецЕсли;
	Если Объект.ВалютаДокумента <> ВалютаДоИзменения Тогда
	    // услуга оказана на территории Украины.
		Объект.СтавкаНДСВознаграждения = Перечисления.СтавкиНДС.НДС20;	
	КонецЕсли; 
	Если Объект.СпособРасчетаКомиссионногоВознаграждения <> Перечисления.СпособыРасчетаКомиссионногоВознаграждения.НеРассчитывается Тогда
		ПересчитатьВознаграждениеВТабличнойЧасти();
	КонецЕсли;
	

	СчетаУчета = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаРасчетовСКонтрагентом(
		Объект.Организация,
		Объект.Контрагент,
		Объект.ДоговорКонтрагента);

	ЗаполнитьСчетаВзаиморасчетов();

КонецПроцедуры

&НаСервере
Процедура СпособРасчетаКомиссионногоВознагражденияПриИзмененииНаСервере()

	СпособРасчетаКомиссионногоВознагражденияОбработатьИзменение();
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры 

&НаСервере
Процедура СпособРасчетаКомиссионногоВознагражденияОбработатьИзменение()

	Если Объект.СпособРасчетаКомиссионногоВознаграждения <> Перечисления.СпособыРасчетаКомиссионногоВознаграждения.НеРассчитывается Тогда
		ПересчитатьВознаграждениеВТабличнойЧасти();
	КонецЕсли;

КонецПроцедуры 

&НаСервере
Процедура ПроцентКомиссионногоВознагражденияПриИзмененииНаСервере()
	
	ПроцентКомиссионногоВознагражденияОбработатьИзменение();
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаСервере
Процедура ПроцентКомиссионногоВознагражденияОбработатьИзменение()

	Если Объект.СпособРасчетаКомиссионногоВознаграждения <> Перечисления.СпособыРасчетаКомиссионногоВознаграждения.НеРассчитывается Тогда
		ПересчитатьВознаграждениеВТабличнойЧасти();
	КонецЕсли;

КонецПроцедуры 

&НаСервере
Процедура СтавкаНДСВознагражденияПриИзмененииНаСервере()
	
	СтавкаНДСВознагражденияОбработатьИзменение();
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры 

&НаСервере
Процедура СтавкаНДСВознагражденияОбработатьИзменение()

	Если Объект.СпособРасчетаКомиссионногоВознаграждения <> Перечисления.СпособыРасчетаКомиссионногоВознаграждения.НеРассчитывается Тогда
		ПересчитатьВознаграждениеВТабличнойЧасти();
	КонецЕсли;

КонецПроцедуры 

&НаСервере
Процедура УслугаПоВознаграждениюПриИзмененииНаСервере()

	ДанныеОбъекта = Новый Структура("Дата, Организация");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
	СведенияОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОНоменклатуре(Объект.УслугаПоВознаграждению, ДанныеОбъекта);
	Если СведенияОНоменклатуре <> Неопределено Тогда
		
		СчетаПоУслуге = СведенияОНоменклатуре.СчетаУчета;
		Объект.СхемаРеализацииПоВознаграждению 				     = СчетаПоУслуге.СхемаРеализации;
		Объект.НалоговоеНазначениеДоходовИЗатратПоВознаграждению = СчетаПоУслуге.НалоговоеНазначениеДоходовИЗатрат;
		
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПриИзмененииТоварыНоменклатураНаСервере(СтрокаТабличнойЧасти, Знач ИмяТабличнойЧасти, Знач Объект, Знач ВалютаРегламентированногоУчета)

	ПараметрыКонтекста = Новый Структура();
	ПараметрыКонтекста.Вставить("Дата",                    Объект.Дата);
	ПараметрыКонтекста.Вставить("Организация",             Объект.Организация);
	ПараметрыКонтекста.Вставить("Склад",                   Неопределено);
	ПараметрыКонтекста.Вставить("ТипЦен",                  Объект.ТипЦен);
	ПараметрыКонтекста.Вставить("ВалютаДокумента",         Объект.ВалютаДокумента);
	ПараметрыКонтекста.Вставить("КурсВзаиморасчетов",      Объект.КурсВзаиморасчетов);
	ПараметрыКонтекста.Вставить("КратностьВзаиморасчетов", Объект.КратностьВзаиморасчетов);
	ПараметрыКонтекста.Вставить("СуммаВключаетНДС",        Объект.СуммаВключаетНДС);
	КомитентРезидент = (Объект.ВалютаДокумента = ВалютаРегламентированногоУчета);
	Если КомитентРезидент Тогда
		ПараметрыКонтекста.Вставить("СтавкаНДС",           СтрокаТабличнойЧасти.СтавкаНДС);
	Иначе	
		ПараметрыКонтекста.Вставить("СтавкаНДС",           Перечисления.СтавкиНДС.НеНДС);
	КонецЕсли;

	ПараметрыНоменклатуры = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОНоменклатуре(СтрокаТабличнойЧасти.Номенклатура, ПараметрыКонтекста);

	Если ЗначениеЗаполнено(ПараметрыНоменклатуры.Цена) Тогда
		СтрокаТабличнойЧасти.Цена  = ПараметрыНоменклатуры.Цена;
		СтрокаТабличнойЧасти.Сумма = СтрокаТабличнойЧасти.Цена * СтрокаТабличнойЧасти.Количество;
	КонецЕсли;

	СтрокаТабличнойЧасти.СтавкаНДС = ПараметрыНоменклатуры.СтавкаНДС;
	СтрокаТабличнойЧасти.СуммаНДС  = УчетНДСКлиентСервер.РассчитатьСуммуНДС(СтрокаТабличнойЧасти.Сумма,
		Объект.СуммаВключаетНДС, УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));

	СтрокаТабличнойЧасти.ЕдиницаИзмерения = ПараметрыНоменклатуры.БазоваяЕдиницаИзмерения;
	СтрокаТабличнойЧасти.Коэффициент      = ПараметрыНоменклатуры.Коэффициент;

	Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.Цена) И ЗначениеЗаполнено(СтрокаТабличнойЧасти.Количество) Тогда
		СтрокаТабличнойЧасти.Сумма = СтрокаТабличнойЧасти.Цена * СтрокаТабличнойЧасти.Количество;
		СтрокаТабличнойЧасти.СуммаНДС = УчетНДСКлиентСервер.РассчитатьСуммуНДС(СтрокаТабличнойЧасти.Сумма,
			Объект.СуммаВключаетНДС, УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));
		СтрокаТабличнойЧасти.Всего =  СтрокаТабличнойЧасти.Сумма + ?(ПараметрыКонтекста.СуммаВключаетНДС, 0, СтрокаТабличнойЧасти.СуммаНДС);
	КонецЕсли;

	ЗаполнитьСчетаУчетаТовары(СтрокаТабличнойЧасти, Объект);

	РассчитатьВознаграждениеВСтроке(
		СтрокаТабличнойЧасти.СуммаВознаграждения,
		СтрокаТабличнойЧасти.СуммаНДСВознаграждения,
		СтрокаТабличнойЧасти.ВсегоВознаграждение,
		СтрокаТабличнойЧасти.Сумма,
		СтрокаТабличнойЧасти.СуммаНДС,
		СтрокаТабличнойЧасти.СуммаПоступления,
		Объект.ПроцентКомиссионногоВознаграждения,
		Объект.СпособРасчетаКомиссионногоВознаграждения,
		Объект.СтавкаНДСВознаграждения,
		Объект.СуммаВключаетНДС,
		"Товары");
		
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПриИзмененииТоварыЕдиницаИзмеренияНаСервере(СтрокаТабличнойЧасти)

	ОбработкаТабличныхЧастей.ЗаполнитьКоэффициентТабЧасти(СтрокаТабличнойЧасти, Неопределено, "Товары", Метаданные.Документы.ОтчетКомитентуОПродажах);	
	
КонецПроцедуры

// Пересчеты реквизитов в строках табличных частей

&НаСервере
Процедура ПересчитатьВознаграждениеВТабличнойЧасти(ИмяТабличнойЧасти = "")

	Если НЕ ЗначениеЗаполнено(ИмяТабличнойЧасти) ИЛИ ИмяТабличнойЧасти = "Товары" Тогда
		Для Каждого СтрокаДокумента Из Объект.Товары Цикл
			РассчитатьВознаграждениеВСтроке(
				СтрокаДокумента.СуммаВознаграждения,
				СтрокаДокумента.СуммаНДСВознаграждения,
				СтрокаДокумента.ВсегоВознаграждение,
				СтрокаДокумента.Сумма,
				СтрокаДокумента.СуммаНДС,
				СтрокаДокумента.СуммаПоступления,
				Объект.ПроцентКомиссионногоВознаграждения,
				Объект.СпособРасчетаКомиссионногоВознаграждения,
				Объект.СтавкаНДСВознаграждения,
				Объект.СуммаВключаетНДС,
				"Товары");
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РассчитатьВознаграждениеВСтроке(
			Вознаграждение,
			НДСВознаграждения,
			ВсегоВознаграждение,
			Знач СуммаСтроки,
			Знач НДССтроки,
			Знач СуммаПоступления,
			Знач ПроцентВознаграждения,
			Знач СпособРасчета,
			Знач СтавкаНДСВознаграждения,
			Знач СуммаВключаетНДС,
			Знач ИмяТабличнойЧасти)

	// Вознаграждение всегда рассчитывается от сумм с НДС и вначале всегда включает НДС
	Если СпособРасчета = ПредопределенноеЗначение("Перечисление.СпособыРасчетаКомиссионногоВознаграждения.НеРассчитывается") Тогда
		Вознаграждение = Вознаграждение + ?(СуммаВключаетНДС, 0, НДСВознаграждения);
	ИначеЕсли СпособРасчета = ПредопределенноеЗначение("Перечисление.СпособыРасчетаКомиссионногоВознаграждения.ПроцентОтРазностиСуммПродажиИПоступления") Тогда
		// Сумма поступления всегда хранится с НДС, надо вычитать из нее НДС
		Если СуммаВключаетНДС = Истина Тогда
			Вознаграждение = ПроцентВознаграждения / 100 * (СуммаСтроки - СуммаПоступления);
		Иначе
			Вознаграждение = ПроцентВознаграждения / 100 * (СуммаСтроки + НДССтроки - СуммаПоступления);
		КонецЕсли;
	ИначеЕсли СпособРасчета = ПредопределенноеЗначение("Перечисление.СпособыРасчетаКомиссионногоВознаграждения.ПроцентОтСуммыПродажи") Тогда
		Вознаграждение = ПроцентВознаграждения / 100 * (СуммаСтроки + ?(СуммаВключаетНДС, 0, НДССтроки));
	Иначе
		Вознаграждение = 0;
	КонецЕсли;

	// Вознаграждение всегда рассчитывается от сумм с НДС и вначале всегда включает НДС
	// Теперь в зависимости от галочки СуммаВключаетНДС либо вычтем НДС, либо оставим
	Вознаграждение = УчетНДСКлиентСервер.ПересчитатьЦенуПриИзмененииФлаговНалогов(
		Вознаграждение,          // Цена,
		Истина,        // ЦенаВключаетНДС, (на момент расчета всегда включает НДС)
		СуммаВключаетНДС,        // СуммаВключаетНДС,
		УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтавкаНДСВознаграждения)); // СтавкаНДС

	НДСВознаграждения = УчетНДСКлиентСервер.РассчитатьСуммуНДС(
		Вознаграждение,
		СуммаВключаетНДС,
		УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтавкаНДСВознаграждения));

	ВсегоВознаграждение = Вознаграждение + ?(СуммаВключаетНДС, 0, НДСВознаграждения);

КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьСуммуНДСВСтроке(СтрокаТабличнойЧасти)

	СтрокаТабличнойЧасти.СуммаНДС = УчетНДСКлиентСервер.РассчитатьСуммуНДС(
		СтрокаТабличнойЧасти.Сумма,
		Объект.СуммаВключаетНДС, 
		УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));

КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьСуммуСтроки(ДанныеСтроки, ИмяТабличнойЧасти)

	ОбщегоНазначенияБПКлиент.ПересчитатьСумму(ДанныеСтроки, Объект.СуммаВключаетНДС);
	ПересчитатьСуммуНДСВСтроке(ДанныеСтроки);

	Если ИмяТабличнойЧасти = "Товары" Тогда
		ДанныеСтроки.СуммаПоступления = ДанныеСтроки.ЦенаПоступления * ДанныеСтроки.Количество;
	КонецЕсли;

	ДанныеСтроки.Всего = ДанныеСтроки.Сумма + ?(Объект.СуммаВключаетНДС, 0, ДанныеСтроки.СуммаНДС);

	Если ЗначениеЗаполнено(Объект.ПроцентКомиссионногоВознаграждения) Тогда
		РассчитатьВознаграждениеВСтроке(
			ДанныеСтроки.СуммаВознаграждения,
			ДанныеСтроки.СуммаНДСВознаграждения,
			ДанныеСтроки.ВсегоВознаграждение,
			ДанныеСтроки.Сумма,
			ДанныеСтроки.СуммаНДС,
			ДанныеСтроки.СуммаПоступления,
			Объект.ПроцентКомиссионногоВознаграждения,
			Объект.СпособРасчетаКомиссионногоВознаграждения,
			Объект.СтавкаНДСВознаграждения,
			Объект.СуммаВключаетНДС,
			ИмяТабличнойЧасти);
	КонецЕсли;

	ОбновитьИтоги(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьЦенуСтроки(ДанныеСтроки, ИмяТабличнойЧасти)

	ДанныеСтроки.Цена = ДанныеСтроки.Сумма / ?(ДанныеСтроки.Количество = 0, 1, ДанныеСтроки.Количество);

	ПересчитатьСуммуНДСВСтроке(ДанныеСтроки);

	ДанныеСтроки.Всего = ДанныеСтроки.Сумма + ?(Объект.СуммаВключаетНДС, 0, ДанныеСтроки.СуммаНДС);

	Если ЗначениеЗаполнено(Объект.ПроцентКомиссионногоВознаграждения) Тогда
		РассчитатьВознаграждениеВСтроке(
			ДанныеСтроки.СуммаВознаграждения,
			ДанныеСтроки.СуммаНДСВознаграждения,
			ДанныеСтроки.ВсегоВознаграждение,
			ДанныеСтроки.Сумма,
			ДанныеСтроки.СуммаНДС,
			ДанныеСтроки.СуммаПоступления,
			Объект.ПроцентКомиссионногоВознаграждения,
			Объект.СпособРасчетаКомиссионногоВознаграждения,
			Объект.СтавкаНДСВознаграждения,
			Объект.СуммаВключаетНДС,
			ИмяТабличнойЧасти);
	КонецЕсли;

	ОбновитьИтоги(ЭтаФорма);

КонецПроцедуры

// Внешний вид, содержание надписей и т.п.

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)

	Элементы = Форма.Элементы;
	Объект   = Форма.Объект;

	// если комитент - нерезидент, НДС входящего от него не предвидется, суммы НДС в продаже значения не имеют.
	КомитентРезидент = (Объект.ВалютаДокумента = Форма.ВалютаРегламентированногоУчета);
	
	// Доступность взаимосвязанных полей
	Элементы.ДоговорКонтрагента.Доступность       = ЗначениеЗаполнено(Объект.Организация) И ЗначениеЗаполнено(Объект.Контрагент);
	Элементы.СпособРасчетаКомиссионногоВознаграждения.Доступность = ЗначениеЗаполнено(Объект.ДоговорКонтрагента);
	Элементы.СтавкаНДСВознаграждения.Доступность            = ЗначениеЗаполнено(Объект.ДоговорКонтрагента);
	Элементы.СтавкаНДСВознаграждения.Видимость              = Форма.ПлательщикНДС; // не зависит от КомитентРезидент, см. процедуры проведения
	Элементы.ПроцентКомиссионногоВознаграждения.Доступность = ЗначениеЗаполнено(Объект.ДоговорКонтрагента)
		И ЗначениеЗаполнено(Объект.СпособРасчетаКомиссионногоВознаграждения)
		И Объект.СпособРасчетаКомиссионногоВознаграждения <> ПредопределенноеЗначение("Перечисление.СпособыРасчетаКомиссионногоВознаграждения.НеРассчитывается");
		
	
	Элементы.СчетУчетаРасчетовПоАвансамПолученным.Доступность = Не Объект.УдержатьВознаграждение;
	
	Элементы.СчетУчетаНДСПриобретений.Видимость               = Форма.ПлательщикНДС И КомитентРезидент;
	Элементы.СчетУчетаНДСПриобретенийПодтвержденный.Видимость = Форма.ПлательщикНДС И КомитентРезидент;
	Элементы.СчетУчетаНДСПродаж.Видимость                     = Форма.ПлательщикНДС;
	Элементы.СчетУчетаНДСПродажПодтвержденный.Видимость       = Форма.ПлательщикНДС;
	Элементы.СчетУчетаНДСПродажПодтвержденный.Доступность     = Не Форма.СложныйНалоговыйУчет; // Нельзя определить по данным организации и валюте
	
	Элементы.НалоговоеНазначениеДоходовИЗатратПоВознаграждению.Видимость = Форма.ПлательщикНалогаНаПрибыльДо2015;
	
	Элементы.ИтогиСуммаНДС.Видимость                      = КомитентРезидент;
	Элементы.ВалютаДокументаИтогиСуммаНДС.Видимость       = КомитентРезидент;
	Элементы.ИтогиНДСПоВознаграждению.Видимость           = Форма.ПлательщикНДС;
	Элементы.ВалютаДокументаНДСПоВознаграждению.Видимость = Форма.ПлательщикНДС;
	
	ОбновитьИтоги(Форма);
	СформироватьНадписьЦеныИВалюта(Форма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьИтоги(Форма)

	Объект = Форма.Объект;

	КомитентРезидент = (Объект.ВалютаДокумента = Форма.ВалютаРегламентированногоУчета);
	Если КомитентРезидент Тогда
		Форма.ИтогиВсего = Объект.Товары.Итог("Всего");		
	Иначе
		// При записи данные о ставке НДС и сумме НДС будут очищены
		Форма.ИтогиВсего = Объект.Товары.Итог("Сумма");
	КонецЕсли;
	Форма.ИтогиВознаграждение = Объект.Товары.Итог("ВсегоВознаграждение");
	Форма.ИтогиНДСПоТоварам = Объект.Товары.Итог("СуммаНДС");

КонецПроцедуры

&НаСервере
Процедура УстановитьЗаголовкиКолонок()
	
	КомитентРезидент = (Объект.ВалютаДокумента = ВалютаРегламентированногоУчета);

	ЗаголовокЦена           = ?(КомитентРезидент, ?(Объект.СуммаВключаетНДС, НСтр("ru='Цена с НДС';uk='Ціна з ПДВ'"), НСтр("ru='Цена без НДС';uk='Ціна без ПДВ'")), НСтр("ru='Цена';uk='Ціна'"));;
	ЗаголовокСумма          = ?(КомитентРезидент, ?(Объект.СуммаВключаетНДС, НСтр("ru='Сумма с НДС';uk='Сума з ПДВ'"), НСтр("ru='Сумма без НДС';uk='Сума без ПДВ'")), НСтр("ru='Сумма';uk='Сума'"));;
	ЗаголовокВознаграждение = ?(ПлательщикНДС, ?(Объект.СуммаВключаетНДС, НСтр("ru='Вознаграждение с НДС';uk='Винагорода з ПДВ'"), НСтр("ru='Вознаграждение без НДС';uk='Винагорода без ПДВ'")), НСтр("ru='Вознаграждение';uk='Винагорода'"));
	
	Элементы.ТоварыЦена.Заголовок  = ЗаголовокЦена;
	Элементы.ТоварыСумма.Заголовок = ЗаголовокСумма;
	Элементы.ТоварыСуммаВознаграждения.Заголовок = ЗаголовокВознаграждение;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СформироватьНадписьЦеныИВалюта(Форма)
	
	Объект = Форма.Объект;
	СтруктураНадписи = Новый Структура(
		"ТипЦен, ВалютаДокумента, Курс, Кратность, СуммаВключаетНДС, ВалютаРегламентированногоУчета",
		Объект.ТипЦен,
		Объект.ВалютаДокумента,
		Объект.КурсВзаиморасчетов,
		Объект.КратностьВзаиморасчетов,
		Объект.СуммаВключаетНДС,
		Форма.ВалютаРегламентированногоУчета);
	
	Форма.ЦеныИВалюта = ОбщегоНазначенияБПКлиентСервер.СформироватьНадписьЦеныИВалюта(СтруктураНадписи);

КонецПроцедуры 

// Прочий функционал:

&НаСервере
Процедура ПодготовитьФормуНаСервере()

	ТекущаяДатаДокумента			= Объект.Дата;

	ВалютаРегламентированногоУчета 	= Константы.ВалютаРегламентированногоУчета.Получить();
	
	УстановитьФункциональныеОпцииФормы();

	ДоговорУказан = ЗначениеЗаполнено(Объект.ДоговорКонтрагента);
	РеквизитыДоговорКонтрагента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		Объект.ДоговорКонтрагента, "СложныйНалоговыйУчет");
	СложныйНалоговыйУчет = ДоговорУказан И РеквизитыДоговорКонтрагента.СложныйНалоговыйУчет;

	Элементы.СтавкаНДСВознаграждения.СписокВыбора.Очистить();
	Для Каждого СтавкаНДС Из Перечисления.СтавкиНДС Цикл
		Если СтавкаНДС <> Перечисления.СтавкиНДС.НДС0 Тогда
			Элементы.СтавкаНДСВознаграждения.СписокВыбора.Добавить(СтавкаНДС);
		КонецЕсли;
	КонецЦикла;

	СписокСпособовРасчета = ОбщегоНазначенияБПКлиентСервер.СформироватьСписокСпособовРасчетаКомиссионногоВознаграждения();
	СписокВыбора = Элементы.СпособРасчетаКомиссионногоВознаграждения.СписокВыбора;
	СписокВыбора.Очистить();
	Для Каждого ЭлементСписка Из СписокСпособовРасчета Цикл
		СписокВыбора.Добавить(ЭлементСписка.Значение, ЭлементСписка.Представление);
	КонецЦикла;

	ЗаполнитьДобавленныеКолонкиТаблиц();

	УстановитьЗаголовкиКолонок();
	
	// Устанавливаем видимость, доступность и заголовоки прочих элементов:
	УправлениеФормой(ЭтаФорма);
	
	УстановитьСостояниеДокумента();
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьСтруктуруДанныхСтроки(ДанныеСтроки, ИмяТабличнойЧасти = "Товары")

	Если ДанныеСтроки = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;

	СтруктураДанных = Новый Структура;
	Для каждого Колонка из Элементы[ИмяТабличнойЧасти].ПодчиненныеЭлементы Цикл
		ИмяКолонки = СтрЗаменить(Колонка.Имя, ИмяТабличнойЧасти, "");
		Если ИмяКолонки = "НоменклатураКод"
		 ИЛИ ИмяКолонки = "НоменклатураАртикул" Тогда
			Продолжить;
		КонецЕсли;
		СтруктураДанных.Вставить(ИмяКолонки, ДанныеСтроки[ИмяКолонки]);
	КонецЦикла;
	СтруктураДанных.Вставить("ВсегоВознаграждение", ДанныеСтроки["ВсегоВознаграждение"]);

	Возврат СтруктураДанных;

КонецФункции

&НаКлиенте
Процедура ЗаполнитьДанныеСтрокиИзСтруктуры(ДанныеСтроки, СтруктураДанных, ИмяТабличнойЧасти = "Товары")

	Для Каждого КлючИЗначение Из СтруктураДанных Цикл
		Если КлючИЗначение.Ключ = "НомерСтроки" Тогда
			Продолжить;
		КонецЕсли;
		Если Элементы[ИмяТабличнойЧасти].ПодчиненныеЭлементы.Найти(ИмяТабличнойЧасти + КлючИЗначение.Ключ) <> Неопределено Тогда
			ДанныеСтроки[КлючИЗначение.Ключ] = КлючИЗначение.Значение;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоДоговоруНаСервере()

	Объект.Товары.Очистить();

	Счет0241 = ПланыСчетов.Хозрасчетный.ТоварыПринятыеНаКомиссию;
	МассивВидов = Новый Массив();
	МассивВидов.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);
	МассивВидов.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Партии);
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Организация",  Объект.Организация);
	Запрос.УстановитьПараметр("Субсчета0241", БухгалтерскийУчетВызовСервераПовтИсп.СчетаВИерархии(Счет0241));
	Запрос.УстановитьПараметр("ПустаяСсылка", ПланыСчетов.Хозрасчетный.ПустаяСсылка());
	Запрос.УстановитьПараметр("МассивВидов",  МассивВидов);
	Запрос.УстановитьПараметр("Договор",      Объект.ДоговорКонтрагента);
	Запрос.УстановитьПараметр("Период",       ?(ЗначениеЗаполнено(Объект.Ссылка), Новый МоментВремени(Объект.Дата, Объект.Ссылка), КонецДня(Объект.Дата)));
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДокументыПоДоговоруКонтрагента.Ссылка
	|ИЗ
	|	КритерийОтбора.ДокументыПоДоговоруКонтрагента(&Договор) КАК ДокументыПоДоговоруКонтрагента
	|";
	
	МассивПартий = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	ТекстЗапросаПартии = "";
	СоответствиеТипыПартий = Новый Соответствие;
	ТипыВидаСубконтоПартии = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Партии.ТипЗначения;
	
	Инд = МассивПартий.ВГраница();
	Пока Инд >= 0 Цикл
		Партия = МассивПартий[Инд];
		МожноУдалить= Ложь;
		
		Если НЕ ЗначениеЗаполнено(Партия) Тогда
			МожноУдалить = Истина;
		Иначе
			ТипПартии = ТипЗнч(Партия);
			
			Если СоответствиеТипыПартий[ТипПартии] = Неопределено Тогда
				
				Если ТипыВидаСубконтоПартии.СодержитТип(ТипПартии) = Неопределено Тогда
					МожноУдалить = Истина;
				Иначе
			
					МетаданныеДок = Метаданные.НайтиПоТипу(ТипПартии);
				
					Если НЕ ПустаяСтрока(ТекстЗапросаПартии) Тогда
						ТекстЗапросаПартии = ТекстЗапросаПартии
							+ " ОБЪЕДИНИТЬ ВСЕ " + Символы.ПС;
					КонецЕсли;
					
					ТекстЗапросаПартии = ТекстЗапросаПартии + "
					|ВЫБРАТЬ
					|	ДокПартии.Ссылка КАК Партия,
					|	ДокПартии.Дата,
					|	" + ?(МетаданныеДок.Реквизиты.Найти("ВалютаДокумента") = Неопределено, 
								"&ВалютаРегламентированногоУчета КАК ВалютаДокумента",
								"ДокПартии.ВалютаДокумента") + "			
					|ИЗ
					|	" + МетаданныеДок.ПолноеИмя() + " КАК ДокПартии
					|ГДЕ
					|	ДокПартии.Ссылка В (&МассивПартий)
					|";
				
					СоответствиеТипыПартий.Вставить(ТипПартии, Истина);
				
				КонецЕсли;
				
			КонецЕсли;

		КонецЕсли;
		
		Если МожноУдалить Тогда
			МассивПартий.Удалить(Инд);
		КонецЕсли;
		
		Инд = Инд - 1;
	
	КонецЦикла;
	
	Если МассивПартий.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Запрос.УстановитьПараметр("МассивПартий", МассивПартий);
	Запрос.УстановитьПараметр("ВалютаРегламентированногоУчета", ВалютаРегламентированногоУчета);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ХозрасчетныйОборотыДтКт.СубконтоДт1 КАК Номенклатура,
	|	ВЫРАЗИТЬ(ХозрасчетныйОборотыДтКт.СубконтоДт1 КАК Справочник.Номенклатура).БазоваяЕдиницаИзмерения КАК Единица,
	|	1 КАК Коэффициент,
	|	ХозрасчетныйОборотыДтКт.СубконтоДт2 КАК Партия,
	|	ВЫБОР
	|		КОГДА ХозрасчетныйОборотыДтКт.КоличествоОборотДт > 0
	|			ТОГДА ВЫРАЗИТЬ(ХозрасчетныйОборотыДтКт.СуммаОборот / ХозрасчетныйОборотыДтКт.КоличествоОборотДт КАК ЧИСЛО(15, 2))
	|		ИНАЧЕ ХозрасчетныйОборотыДтКт.СуммаОборот
	|	КОНЕЦ КАК Цена,
	|	ХозрасчетныйОборотыДтКт.СуммаОборот КАК Сумма,
	|	ХозрасчетныйОборотыДтКт.КоличествоОборотДт КАК Количество
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(
	|			,
	|			&Период,
	|			,
	|			СчетДт В (&Субсчета0241),
	|			&МассивВидов,
	|			СчетКт = &ПустаяСсылка,
	|			,
	|			Организация = &Организация
	|				И СубконтоДт2 В (&МассивПартий)) КАК ХозрасчетныйОборотыДтКт
	|;
	|" + ТекстЗапросаПартии;
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	Выборка 		= МассивРезультатов[0].Выбрать();
	ТаблицаПартий 	= МассивРезультатов[1].Выгрузить();
	ТаблицаПартий.Индексы.Добавить("Партия");

	МДОбъекта = Объект.Ссылка.Метаданные();
	Пока Выборка.Следующий() Цикл

		СтрокаПартии = ТаблицаПартий.Найти(Выборка.Партия);

		СтрокаТабличнойЧасти = Объект.Товары.Добавить();
		СтрокаТабличнойЧасти.Номенклатура     = Выборка.Номенклатура;
		СтрокаТабличнойЧасти.Количество       = Выборка.Количество;
		СтрокаТабличнойЧасти.ЕдиницаИзмерения = Выборка.Единица;
		СтрокаТабличнойЧасти.Коэффициент      = Выборка.Коэффициент;

		Если СтрокаПартии <> Неопределено Тогда
			СтараяВалютаДокумента   = СтрокаПартии.ВалютаДокумента;
			ДанныеОКурсе            = РаботаСКурсамиВалют.ПолучитьКурсВалюты(СтараяВалютаДокумента, СтрокаПартии.Дата);
			СтарыйКурс              = ДанныеОКурсе.Курс;
			СтараяКратность         = ДанныеОКурсе.Кратность;
		Иначе
			СтараяВалютаДокумента	= ВалютаРегламентированногоУчета;
			СтарыйКурс				= 1;
			СтараяКратность			= 1;
		КонецЕсли;

		Сумма = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(
			Выборка.Сумма,
			ВалютаРегламентированногоУчета, Объект.ВалютаДокумента,
			1, СтарыйКурс,
			1, СтараяКратность);

		// На 0241 счете товар хранится без НДС, подставлять сумму в зависимости от реквизита СуммаВключаетНДС
		// Если СуммаВключаетНДС = Ложь, то сумму подставлять из запроса
		// Если СуммаВключаетНДС = Истина, то к сумме запроса добавлять НДС
		ОбработкаТабличныхЧастей.ЗаполнитьСтавкуНДСТабЧасти(СтрокаТабличнойЧасти, Объект, "Товары", МДОбъекта);

		СуммаНДС = УчетНДСКлиентСервер.РассчитатьСуммуНДС(
			Сумма,
			Ложь, // На 0241 хранится без НДС, потом пересчитаем сумму и цену исходя из значения СуммаНДС
			УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС)
		);

		// Сумма и цена поступления - всегда с НДС
		СтрокаТабличнойЧасти.СуммаПоступления = Сумма + СуммаНДС;
		СтрокаТабличнойЧасти.ЦенаПоступления  = ?(Выборка.Количество = 0, 0, СтрокаТабличнойЧасти.СуммаПоступления / Выборка.Количество);

		СтрокаТабличнойЧасти.СуммаНДС = СуммаНДС;

		СтрокаТабличнойЧасти.Сумма = ?(Объект.СуммаВключаетНДС,
			СтрокаТабличнойЧасти.СуммаПоступления,
			СтрокаТабличнойЧасти.СуммаПоступления - СтрокаТабличнойЧасти.СуммаНДС);
		СтрокаТабличнойЧасти.Цена  = ?(СтрокаТабличнойЧасти.Количество = 0,
			0,
			СтрокаТабличнойЧасти.Сумма / СтрокаТабличнойЧасти.Количество);
		СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма + ?(Объект.СуммаВключаетНДС, 0, СтрокаТабличнойЧасти.СуммаНДС);

		ЗаполнитьСчетаУчетаТовары(СтрокаТабличнойЧасти, Объект);

		РассчитатьВознаграждениеВСтроке(
			СтрокаТабличнойЧасти.СуммаВознаграждения,
			СтрокаТабличнойЧасти.СуммаНДСВознаграждения,
			СтрокаТабличнойЧасти.ВсегоВознаграждение,
			СтрокаТабличнойЧасти.Сумма,
			СтрокаТабличнойЧасти.СуммаНДС,
			СтрокаТабличнойЧасти.СуммаПоступления,
			Объект.ПроцентКомиссионногоВознаграждения,
			Объект.СпособРасчетаКомиссионногоВознаграждения,
			Объект.СтавкаНДСВознаграждения,
			Объект.СуммаВключаетНДС,
			"Товары")

	КонецЦикла;

	ЗаполнитьДобавленныеКолонкиТаблиц();
	
	ОбновитьИтоги(ЭтаФорма);
	Модифицированность = Истина;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРеализованнымНаСервере()

	Объект.Товары.Очистить();

	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Организация",  Объект.Организация);
	Запрос.УстановитьПараметр("Контрагент",   Объект.Контрагент);
	Запрос.УстановитьПараметр("ДоговорКонтрагента", Объект.ДоговорКонтрагента);
	Запрос.УстановитьПараметр("Период", Новый Граница(?(ЗначениеЗаполнено(Объект.Ссылка), Новый МоментВремени(Объект.Дата, Объект.Ссылка), КонецДня(Объект.Дата)), ВидГраницы.Включая));

	Запрос.Текст =
	"ВЫБРАТЬ
	|	РеализованныеТоварыКомитентовОстатки.Номенклатура КАК Номенклатура,
	|	РеализованныеТоварыКомитентовОстатки.Номенклатура.БазоваяЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	СУММА(РеализованныеТоварыКомитентовОстатки.КоличествоОстаток) КАК КоличествоОстаток,
	|	СУММА(РеализованныеТоварыКомитентовОстатки.ВыручкаОстаток) КАК ВыручкаОстаток,
	|	СУММА(РеализованныеТоварыКомитентовОстатки.СуммаПоступленияОстаток) КАК СуммаПоступленияОстаток
	|ИЗ
	|	РегистрНакопления.РеализованныеТоварыКомитентов.Остатки(
	|			&Период,
	|			Организация = &Организация
	|				И Контрагент = &Контрагент
	|				И ДоговорКонтрагента = &ДоговорКонтрагента) КАК РеализованныеТоварыКомитентовОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	РеализованныеТоварыКомитентовОстатки.Номенклатура,
	|	РеализованныеТоварыКомитентовОстатки.Номенклатура.БазоваяЕдиницаИзмерения
	|
	|УПОРЯДОЧИТЬ ПО
	|	Номенклатура";

	Выборка = Запрос.Выполнить().Выбрать();

	МДОбъекта = Объект.Ссылка.Метаданные();
	
	Пока Выборка.Следующий() Цикл

		СтрокаТабличнойЧасти = Объект.Товары.Добавить();
		
		СтрокаТабличнойЧасти.Номенклатура     = Выборка.Номенклатура;
		СтрокаТабличнойЧасти.Количество       = Выборка.КоличествоОстаток;
		СтрокаТабличнойЧасти.ЕдиницаИзмерения = Выборка.ЕдиницаИзмерения;
		СтрокаТабличнойЧасти.Коэффициент      = 1;

		// В регистре РеализованныеТоварыКомитентов сумма товара хранится с НДС,
		// поэтому вставлять сумму в документ надо в зависимости от галочки СуммаВключаетНДС
		ОбработкаТабличныхЧастей.ЗаполнитьСтавкуНДСТабЧасти(СтрокаТабличнойЧасти, Объект, "Товары", МДОбъекта);

		СтрокаТабличнойЧасти.СуммаНДС = УчетНДСКлиентСервер.РассчитатьСуммуНДС(
			Выборка.ВыручкаОстаток,
			Истина, // в регистре хранится с НДС
			УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));

		// СуммаПоступления и ЦенаПоступления всегда с НДС
        СуммаНДСПоступления = УчетНДСКлиентСервер.РассчитатьСуммуНДС(
			Выборка.СуммаПоступленияОстаток,
			Ложь, // в регистре хранится без НДС
			УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));
		
		СтрокаТабличнойЧасти.СуммаПоступления =  ?(Объект.СуммаВключаетНДС, Выборка.СуммаПоступленияОстаток + СуммаНДСПоступления, Выборка.СуммаПоступленияОстаток);
		СтрокаТабличнойЧасти.ЦенаПоступления  = ?(Выборка.КоличествоОстаток = 0, 0, СтрокаТабличнойЧасти.СуммаПоступления / Выборка.КоличествоОстаток);
		СтрокаТабличнойЧасти.Сумма            = Выборка.ВыручкаОстаток - ?(Объект.СуммаВключаетНДС, 0, СтрокаТабличнойЧасти.СуммаНДС);
		СтрокаТабличнойЧасти.Цена             = ?(Выборка.КоличествоОстаток = 0, 0, СтрокаТабличнойЧасти.Сумма / Выборка.КоличествоОстаток);
		СтрокаТабличнойЧасти.Всего            = СтрокаТабличнойЧасти.Сумма + ?(Объект.СуммаВключаетНДС, 0, СтрокаТабличнойЧасти.СуммаНДС);

		ЗаполнитьСчетаУчетаТовары(СтрокаТабличнойЧасти, Объект);

		РассчитатьВознаграждениеВСтроке(
			СтрокаТабличнойЧасти.СуммаВознаграждения,
			СтрокаТабличнойЧасти.СуммаНДСВознаграждения,
			СтрокаТабличнойЧасти.ВсегоВознаграждение,
			СтрокаТабличнойЧасти.Сумма,
			СтрокаТабличнойЧасти.СуммаНДС,
			СтрокаТабличнойЧасти.СуммаПоступления,
			Объект.ПроцентКомиссионногоВознаграждения,
			Объект.СпособРасчетаКомиссионногоВознаграждения,
			Объект.СтавкаНДСВознаграждения,
			Объект.СуммаВключаетНДС,
			"Товары")

	КонецЦикла;

	ЗаполнитьДобавленныеКолонкиТаблиц();
	
	ОбновитьИтоги(ЭтаФорма);
	Модифицированность = Истина;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоПоступлениюНаСервере(Поступление)

	Объект.Товары.Очистить();

	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Поступление", Поступление);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПоступлениеТоваровУслугТовары.Номенклатура,
	|	ПоступлениеТоваровУслугТовары.ЕдиницаИзмерения,
	|	ПоступлениеТоваровУслугТовары.Коэффициент,
	|	ПоступлениеТоваровУслугТовары.Количество,
	|	ПоступлениеТоваровУслугТовары.Цена,
	|	ПоступлениеТоваровУслугТовары.СуммаНДС,
	|	ВЫБОР
	|		КОГДА ПоступлениеТоваровУслугТовары.Ссылка.СуммаВключаетНДС
	|			ТОГДА ПоступлениеТоваровУслугТовары.Сумма
	|		ИНАЧЕ ПоступлениеТоваровУслугТовары.Сумма + ПоступлениеТоваровУслугТовары.СуммаНДС
	|	КОНЕЦ КАК Сумма,
	|	ПоступлениеТоваровУслугТовары.НомерСтроки КАК НомерСтроки
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг.Товары КАК ПоступлениеТоваровУслугТовары
	|ГДЕ
	|	ПоступлениеТоваровУслугТовары.Ссылка = &Поступление
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Выборка = Запрос.Выполнить().Выбрать();

	МДОбъекта = Объект.Ссылка.Метаданные();
	Пока Выборка.Следующий() Цикл

		СтрокаТабличнойЧасти = Объект.Товары.Добавить();
		СтрокаТабличнойЧасти.Номенклатура     = Выборка.Номенклатура;
		СтрокаТабличнойЧасти.Количество       = Выборка.Количество;
		СтрокаТабличнойЧасти.ЕдиницаИзмерения = Выборка.ЕдиницаИзмерения;
		СтрокаТабличнойЧасти.Коэффициент      = Выборка.Коэффициент;

		СтрокаТабличнойЧасти.Всего            = Выборка.Сумма;
		СтрокаТабличнойЧасти.СуммаНДС         = Выборка.СуммаНДС;
		СтрокаТабличнойЧасти.СуммаПоступления = Выборка.Сумма - ?(Объект.СуммаВключаетНДС, 0, СтрокаТабличнойЧасти.СуммаНДС);
		СтрокаТабличнойЧасти.ЦенаПоступления  = ?(СтрокаТабличнойЧасти.Количество <> 0, СтрокаТабличнойЧасти.СуммаПоступления / СтрокаТабличнойЧасти.Количество, 0);

		СтрокаТабличнойЧасти.Цена             = СтрокаТабличнойЧасти.ЦенаПоступления;
		СтрокаТабличнойЧасти.Сумма            = СтрокаТабличнойЧасти.СуммаПоступления;


		ОбработкаТабличныхЧастей.ЗаполнитьСтавкуНДСТабЧасти(СтрокаТабличнойЧасти, Объект, "Товары", МДОбъекта);
		СтрокаТабличнойЧасти.СуммаНДС = УчетНДСКлиентСервер.РассчитатьСуммуНДС(СтрокаТабличнойЧасти.Сумма,
												Объект.СуммаВключаетНДС,
												УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));

		ЗаполнитьСчетаУчетаТовары(СтрокаТабличнойЧасти, Объект);

		РассчитатьВознаграждениеВСтроке(
			СтрокаТабличнойЧасти.СуммаВознаграждения,
			СтрокаТабличнойЧасти.СуммаНДСВознаграждения,
			СтрокаТабличнойЧасти.ВсегоВознаграждение,
			СтрокаТабличнойЧасти.Сумма,
			СтрокаТабличнойЧасти.СуммаНДС,
			СтрокаТабличнойЧасти.СуммаПоступления,
			Объект.ПроцентКомиссионногоВознаграждения,
			Объект.СпособРасчетаКомиссионногоВознаграждения,
			Объект.СтавкаНДСВознаграждения,
			Объект.СуммаВключаетНДС,
			"Товары")
	КонецЦикла;

	ЗаполнитьДобавленныеКолонкиТаблиц();
	
	ОбновитьИтоги(ЭтаФорма);
	Модифицированность = Истина;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРеализованнымПоПоступлениюНаСервере(Поступление)

	Объект.Товары.Очистить();

	ЗапросПоступление = Новый Запрос();
	ЗапросПоступление.УстановитьПараметр("Поступление", Поступление);
	ЗапросПоступление.Текст = "ВЫБРАТЬ
	|	ПоступлениеТоваровУслугТовары.Номенклатура,
	|	СУММА(ПоступлениеТоваровУслугТовары.Количество * ПоступлениеТоваровУслугТовары.Коэффициент) КАК Количество
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг.Товары КАК ПоступлениеТоваровУслугТовары
	|
	|ГДЕ
	|	ПоступлениеТоваровУслугТовары.Ссылка = &Поступление
	|
	|СГРУППИРОВАТЬ ПО
	|	ПоступлениеТоваровУслугТовары.Номенклатура";
	ВыборкаПоступление = ЗапросПоступление.Выполнить().Выгрузить();

	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Организация",  Объект.Организация);
	Запрос.УстановитьПараметр("Контрагент",   Объект.Контрагент);
	Запрос.УстановитьПараметр("ДоговорКонтрагента", Объект.ДоговорКонтрагента);
	Запрос.УстановитьПараметр("СписокНоменклатуры", ВыборкаПоступление.ВыгрузитьКолонку("Номенклатура"));
	Запрос.УстановитьПараметр("Период", КонецДня(Объект.Дата));
		
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	РеализованныеТоварыКомитентовОстатки.Номенклатура,
	|	РеализованныеТоварыКомитентовОстатки.Номенклатура.БазоваяЕдиницаИзмерения КАК Единица,
	|	СУММА(РеализованныеТоварыКомитентовОстатки.КоличествоОстаток) КАК КоличествоОстаток,
	|	СУММА(РеализованныеТоварыКомитентовОстатки.ВыручкаОстаток) КАК ВыручкаОстаток,
	|	СУММА(РеализованныеТоварыКомитентовОстатки.СуммаПоступленияОстаток) КАК СуммаПоступленияОстаток
	|ИЗ
	|	РегистрНакопления.РеализованныеТоварыКомитентов.Остатки(&Период
	|		,
	|		Организация = &Организация 
	|		    И Контрагент = &Контрагент 
	|		    И ДоговорКонтрагента = &ДоговорКонтрагента
	|			И Номенклатура В (&СписокНоменклатуры)) КАК РеализованныеТоварыКомитентовОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	РеализованныеТоварыКомитентовОстатки.Номенклатура";
	
	Выборка = Запрос.Выполнить().Выбрать();

	МДОбъекта = Объект.Ссылка.Метаданные();
	Пока Выборка.Следующий() Цикл

		Отбор = Новый Структура("Номенклатура");
		Отбор.Номенклатура = Выборка.Номенклатура;
		СтрокаПоступления  = ВыборкаПоступление.НайтиСтроки(Отбор)[0];
		
		СтрокаТабличнойЧасти = Объект.Товары.Добавить();
		СтрокаТабличнойЧасти.Номенклатура     = Выборка.Номенклатура;
		СтрокаТабличнойЧасти.Количество       = Мин(Выборка.КоличествоОстаток, СтрокаПоступления.Количество);
		СтрокаТабличнойЧасти.ЕдиницаИзмерения = Выборка.Единица;
		СтрокаТабличнойЧасти.Коэффициент      = 1;
		
		//ОбработкаТабличныхЧастей.ЗаполнитьСтавкуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
		
		СуммаПоступленияОстаток = ?(Выборка.КоличествоОстаток<>0, Выборка.СуммаПоступленияОстаток / Выборка.КоличествоОстаток * СтрокаТабличнойЧасти.Количество, 0);
		
		
		ОбработкаТабличныхЧастей.ЗаполнитьСтавкуНДСТабЧасти(СтрокаТабличнойЧасти, Объект, "Товары", МДОбъекта);
		СтрокаТабличнойЧасти.СуммаНДС = УчетНДСКлиентСервер.РассчитатьСуммуНДС(СуммаПоступленияОстаток,
												Ложь,
												УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));
		Сумма = ?(Объект.СуммаВключаетНДС,  СуммаПоступленияОстаток + СтрокаТабличнойЧасти.СуммаНДС,
										СуммаПоступленияОстаток);
		 
		СтрокаТабличнойЧасти.СуммаПоступления = Сумма;
					
        СтрокаТабличнойЧасти.ЦенаПоступления  = 
			?(СтрокаТабличнойЧасти.Количество<>0, Сумма / СтрокаТабличнойЧасти.Количество, 0);
			
		ВыручкаОстаток = ?(Выборка.КоличествоОстаток<>0, Выборка.ВыручкаОстаток / Выборка.КоличествоОстаток * СтрокаТабличнойЧасти.Количество, 0);
		СуммаНДСВыручка = УчетНДСКлиентСервер.РассчитатьСуммуНДС(ВыручкаОстаток,
												Истина, // в регистре хранится с НДС
												УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));
		СуммаВыручка = ?(НЕ Объект.СуммаВключаетНДС,  ВыручкаОстаток - СуммаНДСВыручка,
											   ВыручкаОстаток);
		
		СтрокаТабличнойЧасти.Сумма = СуммаВыручка;
		СтрокаТабличнойЧасти.Цена  = ?(СтрокаТабличнойЧасти.Количество<>0, СуммаВыручка / СтрокаТабличнойЧасти.Количество, 0);
		
		// Рассчитываем реквизиты табличной части.
		СтрокаТабличнойЧасти.СуммаНДС = УчетНДСКлиентСервер.РассчитатьСуммуНДС(СтрокаТабличнойЧасти.Сумма,
												Объект.СуммаВключаетНДС,
												УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));
		
		РассчитатьВознаграждениеВСтроке(
			СтрокаТабличнойЧасти.СуммаВознаграждения,
			СтрокаТабличнойЧасти.СуммаНДСВознаграждения,
			СтрокаТабличнойЧасти.ВсегоВознаграждение,
			СтрокаТабличнойЧасти.Сумма,
			СтрокаТабличнойЧасти.СуммаНДС,
			СтрокаТабличнойЧасти.СуммаПоступления,
			Объект.ПроцентКомиссионногоВознаграждения,
			Объект.СпособРасчетаКомиссионногоВознаграждения,
			Объект.СтавкаНДСВознаграждения,
			Объект.СуммаВключаетНДС,
			"Товары");
		
		
		ЗаполнитьСчетаУчетаТовары(СтрокаТабличнойЧасти, Объект);
		
	КонецЦикла;
	
КонецПроцедуры
 
&НаСервере
Процедура ЗаполнитьДобавленныеКолонкиТаблиц()
	

	Для каждого СтрокаТаблицы Из Объект.Товары Цикл
		СтрокаТаблицы.Всего = СтрокаТаблицы.Сумма + ?(Объект.СуммаВключаетНДС, 0, СтрокаТаблицы.СуммаНДС);
		СтрокаТаблицы.ВсегоВознаграждение = СтрокаТаблицы.СуммаВознаграждения + ?(Объект.СуммаВключаетНДС, 0, СтрокаТаблицы.СуммаНДСВознаграждения);
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Функция ПолучитьПараметрыПодбора(ИмяТаблицы)

	ПараметрыФормы = Новый Структура;

	ДатаРасчетов 	 = ?(НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДата()), Неопределено, Объект.Дата);
	ЗаголовокПодбора = НСтр("ru='Подбор номенклатуры в %1 (%2)';uk='Підбір номенклатури %1 (%2)'");

	Валюта = Объект.ВалютаДокумента;

	Если ИмяТаблицы = "Товары" Тогда
		ПредставлениеТаблицы = НСтр("ru='Товары';uk='Товари'");

		ПараметрыФормы.Вставить("ПоказыватьОстатки"  , Истина);
		ПараметрыФормы.Вставить("ПоказыватьСчетУчета", Истина);
	КонецЕсли;
	ЗаголовокПодбора = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ЗаголовокПодбора, Объект.Ссылка, ПредставлениеТаблицы);

	ПараметрыФормы.Вставить("ЕстьЦена"          , Истина);
	ПараметрыФормы.Вставить("ЕстьКоличество"    , Истина);
	ПараметрыФормы.Вставить("ДатаРасчетов"      , ДатаРасчетов);
	ПараметрыФормы.Вставить("ТипЦен"            , Объект.ТипЦен);
	ПараметрыФормы.Вставить("Валюта"            , Валюта);
	ПараметрыФормы.Вставить("ДоговорКонтрагента", Объект.ДоговорКонтрагента);
	ПараметрыФормы.Вставить("Контрагент"        , Объект.Контрагент);
	ПараметрыФормы.Вставить("Организация"       , Объект.Организация);
	ПараметрыФормы.Вставить("Заголовок"         , ЗаголовокПодбора);
	ПараметрыФормы.Вставить("ВидПодбора"        , ПолучитьВидПодбора(ИмяТаблицы));
	ПараметрыФормы.Вставить("ИмяТаблицы"        , ИмяТаблицы);

	Возврат ПараметрыФормы;

КонецФункции

&НаКлиенте
Функция ПолучитьВидПодбора(ИмяТаблицы)

	ВидПодбора = "Комиссионер";

	Возврат ВидПодбора;

КонецФункции

&НаСервере
Процедура ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение, ИмяТаблицы)

	ТаблицаТоваров = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресПодобраннойНоменклатурыВХранилище);
	
	ДанныеОбъекта = Новый Структура("Дата, Организация");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
	СоответствиеСведенийОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОСпискеНоменклатуры(
		ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаТоваров, "Номенклатура", Истина), ДанныеОбъекта);
	
	Если ЗначениеЗаполнено(Объект.ТипЦен) Тогда
		ЦенаВключаетНДС	= ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ТипЦен, "ЦенаВключаетНДС");
	Иначе
		ЦенаВключаетНДС	= Объект.СуммаВключаетНДС;
	КонецЕсли;
	
	Для Каждого СтрокаТовара Из ТаблицаТоваров Цикл
		
		СтруктураОтбора = Новый Структура("Номенклатура, Цена, ЕдиницаИзмерения", СтрокаТовара.Номенклатура, СтрокаТовара.Цена, СтрокаТовара.ЕдиницаИзмерения);
		СтрокаТабличнойЧасти = НайтиСтрокуТабличнойЧасти(ИмяТаблицы, СтруктураОтбора);
		
		Если СтрокаТабличнойЧасти <> Неопределено Тогда
			// Нашли - увеличиваем количество.
			СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + СтрокаТовара.Количество;
			
			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, Объект.СуммаВключаетНДС);
			
		Иначе
			СтрокаТабличнойЧасти = Объект[ИмяТаблицы].Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтрокаТовара);
			
			СведенияОНоменклатуре = СоответствиеСведенийОНоменклатуре.Получить(СтрокаТовара.Номенклатура);
			Если СведенияОНоменклатуре = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаТабличнойЧасти.СтавкаНДС		  = СведенияОНоменклатуре.СтавкаНДС;
			
			СтрокаТабличнойЧасти.Цена = УчетНДСКлиентСервер.ПересчитатьЦенуПриИзмененииФлаговНалогов(
			СтрокаТабличнойЧасти.Цена, ЦенаВключаетНДС, Объект.СуммаВключаетНДС,
			УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));
			
			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, Объект.СуммаВключаетНДС);
			
			СтрокаТабличнойЧасти.ЦенаПоступления  = СтрокаТабличнойЧасти.Цена;
			СтрокаТабличнойЧасти.СуммаПоступления = СтрокаТабличнойЧасти.Цена * СтрокаТабличнойЧасти.Количество;
			
			ЗаполнитьСчетаУчетаТовары(СтрокаТабличнойЧасти, ДанныеОбъекта);
			
		КонецЕсли;
		
		Если Объект.СпособРасчетаКомиссионногоВознаграждения
			= Перечисления.СпособыРасчетаКомиссионногоВознаграждения.ПроцентОтРазностиСуммПродажиИПоступления Тогда
			СтрокаТабличнойЧасти.СуммаВознаграждения = Объект.ПроцентКомиссионногоВознаграждения / 100
			* (СтрокаТабличнойЧасти.Сумма - СтрокаТабличнойЧасти.СуммаПоступления);
		ИначеЕсли Объект.СпособРасчетаКомиссионногоВознаграждения
			= Перечисления.СпособыРасчетаКомиссионногоВознаграждения.ПроцентОтСуммыПродажи Тогда
			СтрокаТабличнойЧасти.СуммаВознаграждения = Объект.ПроцентКомиссионногоВознаграждения / 100
			* СтрокаТабличнойЧасти.Сумма;
		КонецЕсли;
		
		РассчитатьВознаграждениеВСтроке(
		СтрокаТабличнойЧасти.СуммаВознаграждения,
		СтрокаТабличнойЧасти.СуммаНДСВознаграждения,
		СтрокаТабличнойЧасти.ВсегоВознаграждение,
		СтрокаТабличнойЧасти.Сумма,
		СтрокаТабличнойЧасти.СуммаНДС,
		СтрокаТабличнойЧасти.СуммаПоступления,
		Объект.ПроцентКомиссионногоВознаграждения,
		Объект.СпособРасчетаКомиссионногоВознаграждения,
		Объект.СтавкаНДСВознаграждения,
		Объект.СуммаВключаетНДС,
		"Товары")
		
	КонецЦикла;
	
	ЗаполнитьДобавленныеКолонкиТаблиц();
	
	ОбновитьИтоги(ЭтаФорма);

КонецПроцедуры

&НаСервере
Процедура УстановитьФункциональныеОпцииФормы()

	ОбщегоНазначенияБПКлиентСервер.УстановитьПараметрыФункциональныхОпцийФормыДокумента(ЭтаФорма);
	
	ПлательщикНДС = УчетнаяПолитика.ПлательщикНДС(Объект.Организация, Объект.Дата);
	ПлательщикНалогаНаПрибыльДо2015 = УчетнаяПолитика.ПлательщикНалогаНаПрибыльДо2015(Объект.Организация, Объект.Дата);

КонецПроцедуры

&НаСервере
Функция НайтиСтрокуТабличнойЧасти(ИмяТабличнойЧасти, СтруктураОтбора)

	СтрокаТабличнойЧасти = Неопределено;

	МассивНайденныхСтрок = Объект[ИмяТабличнойЧасти].НайтиСтроки(СтруктураОтбора);
	Если МассивНайденныхСтрок.Количество() > 0 Тогда
		// Нашли. Вернем первую найденную строку.
		СтрокаТабличнойЧасти = МассивНайденныхСтрок[0];
	КонецЕсли;

	Возврат СтрокаТабличнойЧасти;

КонецФункции

&НаСервере
Процедура ЗаполнитьСчетаВзаиморасчетов();
	
	Документы.ОтчетКомитентуОПродажах.ЗаполнитьСчетаУчетаРасчетов(Объект, СчетаУчета);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьСчетаУчетаТовары(СтрокаТабличнойЧасти, Знач ДанныеОбъекта)

	СведенияОНоменклатуре	= БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОНоменклатуре(
		СтрокаТабличнойЧасти.Номенклатура, ДанныеОбъекта);
	Если СведенияОНоменклатуре = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Документы.ОтчетКомитентуОПродажах.ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(
		ДанныеОбъекта, СтрокаТабличнойЧасти, "Товары", СведенияОНоменклатуре);

	КонецПроцедуры
	
Процедура ПересчитатьСуммуВознагражденияПриИзмененииПризнакаПлательщикНДС()
	
	Если ПлательщикНДС Тогда
		Объект.СтавкаНДСВознаграждения = Перечисления.СтавкиНДС.НДС20;
	Иначе
		Объект.СтавкаНДСВознаграждения = Перечисления.СтавкиНДС.НеНДС;
	КонецЕсли;
	СтавкаНДСВознагражденияОбработатьИзменение();
		
КонецПроцедуры

&НаСервере
Процедура УстановитьСостояниеДокумента()
	
	СостояниеДокумента = ОбщегоНазначенияБП.СостояниеДокумента(Объект);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ БСП

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти	//СлужебныеПроцедурыИФункции
