#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ ПРОВЕДЕНИЯ
Перем мВалютаРегламентированногоУчета;
	
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ПРОВЕДЕНИЯ - ПОДГОТОВКА ДАННЫХ ИНФОРМАЦИОННОЙ БАЗЫ

// Процедура формирует структуру шапки документа и дополнительных полей.
//
Процедура ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента) Экспорт
	
	// Дерево значений, содержащее имена необходимых полей в запросе по шапке.
	Перем ДеревоПолейЗапросаПоШапке;
	

	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента   = ОбщегоНазначенияРед12.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);

	// Заполним по шапке документа дерево параметров, нужных при проведении.
	ДеревоПолейЗапросаПоШапке = ОбщегоНазначенияРед12.СформироватьДеревоПолейЗапросаПоШапке();
	ОбщегоНазначенияРед12.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "Организация", "ДоговорОрганизация");
	ОбщегоНазначенияРед12.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "СхемаРеализацииПоВознаграждению", "СчетДоходов" , "СчетДоходовПоВознаграждениюБУ");
	ОбщегоНазначенияРед12.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "СхемаРеализацииПоВознаграждению", "СубконтоДоходов1" , "СубконтоДоходовПоВознаграждениюБУ1");
	ОбщегоНазначенияРед12.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "СхемаРеализацииПоВознаграждению", "СубконтоДоходов2" , "СубконтоДоходовПоВознаграждениюБУ2");
	ОбщегоНазначенияРед12.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "СхемаРеализацииПоВознаграждению", "СубконтоДоходов3" , "СубконтоДоходовПоВознаграждениюБУ3");
	ОбщегоНазначенияРед12.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "УслугаПоВознаграждению"		 , "НоменклатурнаяГруппа" , "НоменклатурнаяГруппаПоВознаграждению");
	ОбщегоНазначенияРед12.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "НалоговоеНазначениеДоходовИЗатратПоВознаграждению", "ВидНалоговойДеятельности" , "ВидНалоговойДеятельностиПоВознаграждению");
	ОбщегоНазначенияРед12.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "ВедениеВзаиморасчетовНУ" , "ВедениеВзаиморасчетовНУ");
	ОбщегоНазначенияРед12.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "СложныйНалоговыйУчет" , "СложныйНалоговыйУчет");
	ОбщегоНазначенияРед12.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "ВалютаВзаиморасчетов" , "ВалютаВзаиморасчетов");
	ОбщегоНазначенияРед12.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "СхемаНалоговогоУчета" , "СхемаНалоговогоУчета");
	
	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа
	СтруктураШапкиДокумента = УправлениеЗапасами.СформироватьЗапросПоДеревуПолей(ЭтотОбъект, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета);
	
КонецПроцедуры // ПодготовитьСтруктуруШапкиДокумента()

// Процедура определяет параметры учетной политики
//
Процедура ПодготовитьПараметрыУчетнойПолитики(СтруктураШапкиДокумента, Отказ, Заголовок)

	СтруктураШапкиДокумента.Вставить("ЕстьНалогНаПрибыльДо2015", УчетнаяПолитика.ПлательщикНалогаНаПрибыльДо2015(СтруктураШапкиДокумента.Организация, СтруктураШапкиДокумента.Дата));
	СтруктураШапкиДокумента.Вставить("ЕстьНДС",            УчетнаяПолитика.ПлательщикНДС(СтруктураШапкиДокумента.Организация, СтруктураШапкиДокумента.Дата));
	
КонецПроцедуры // ПодготовитьПараметрыУчетнойПолитики()

// Процедура формирует таблицы документа.
//
Процедура ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоУслугам, Отказ, Заголовок) Экспорт
	
	// Получим необходимые данные для проведения и проверки заполенения данные по табличной части "Товары".
	СтруктураПолей = Новый Структура();
	СтруктураПолей.Вставить("Номенклатура", "Номенклатура");
	СтруктураПолей.Вставить("Услуга"      , "Номенклатура.Услуга");
	СтруктураПолей.Вставить("БланкСтрогогоУчета", "Номенклатура.БланкСтрогогоУчета");
	СтруктураПолей.Вставить("Количество"  , "Количество * Коэффициент");
	СтруктураПолей.Вставить("СтавкаНДС"   , "Ссылка.СтавкаНДСВознаграждения");
	СтруктураПолей.Вставить("Сумма"       , "СуммаВознаграждения");
	СтруктураПолей.Вставить("НДС"         , "СуммаНДСВознаграждения");
	
	РезультатЗапросаПоУслугам = ОбщегоНазначенияРед12.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураПолей);
	
	ПогрешностиОкругленияУслуги = Новый Соответствие;
	// Подготовим услуг для проведения.
	ТаблицаПоУслугам = ПодготовитьТаблицуУслуг(РезультатЗапросаПоУслугам, СтруктураШапкиДокумента,ПогрешностиОкругленияУслуги);

	СтруктураПолей = Новый Структура();
	СтруктураПростыхПолей = Новый Структура();
	СтруктураСложныхПолей = Новый Структура();
	СтруктураПолей.Вставить("Номенклатура", "Номенклатура");
	СтруктураПолей.Вставить("Услуга"      , "Номенклатура.Услуга");
	СтруктураПолей.Вставить("БланкСтрогогоУчета", "Номенклатура.БланкСтрогогоУчета");
	СтруктураПолей.Вставить("Количество"  , "Количество");
	СтруктураПолей.Вставить("СтавкаНДС"   , "СтавкаНДС");
	СтруктураПолей.Вставить("Сумма"       , "Сумма");
	СтруктураПолей.Вставить("НДС"         , "СуммаНДС");
	
	СтруктураПолей.Вставить("НалоговоеНазначение"     	, "НалоговоеНазначение");
	СтруктураПолей.Вставить("ВидДеятельностиНДС"     	, "НалоговоеНазначение.ВидДеятельностиНДС");
	
	СтруктураПолей.Вставить("НалоговоеНазначениеДоходовИЗатрат", "НалоговоеНазначениеДоходовИЗатрат");
	
	СтруктураПолей.Вставить("СхемаРеализации"          , "СхемаРеализации");
	СтруктураПолей.Вставить("СчетВычетовИзДоходов"     , "СхемаРеализации.СчетВычетовИзДоходов");
	СтруктураПолей.Вставить("СубконтоВычетовИзДоходов1", "СхемаРеализации.СубконтоВычетовИзДоходов1");
	СтруктураПолей.Вставить("СубконтоВычетовИзДоходов2", "СхемаРеализации.СубконтоВычетовИзДоходов2");
	СтруктураПолей.Вставить("СубконтоВычетовИзДоходов3", "СхемаРеализации.СубконтоВычетовИзДоходов3");
	СтруктураПолей.Вставить("НоменклатурнаяГруппа"     , "Номенклатура.НоменклатурнаяГруппа");

	//Поля, необходимые для списания регистра реализованных товаров	
	СтруктураПолей.Вставить("СуммаПоступления" 		, "СуммаПоступления");
	СтруктураПолей.Вставить("Выручка"  				, "Сумма"); 
	СтруктураСложныхПолей.Вставить("СчетУчетаНДС"    	, "Ссылка.СчетУчетаНДСПриобретений");
	СтруктураСложныхПолей.Вставить("СуммаНДСПоступления"   , "ВЫБОР КОГДА Сумма = 0 ТОГДА 0 ИНАЧЕ СуммаНДС * СуммаПоступления / Сумма КОНЕЦ");
	
	РезультатЗапросаПоТоварам = ОбщегоНазначенияРед12.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураПолей, СтруктураПростыхПолей, СтруктураСложныхПолей);

	ПогрешностиОкругления = Новый Соответствие;
	// Подготовим таблицу товаров для проведения.
	ТаблицаПоТоварам = ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента, ПогрешностиОкругления);

КонецПроцедуры

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТоварам - результат запроса по табличной части "Товары",
//  СтруктураШапкиДокумента   - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблиица значений.
//
Функция ПодготовитьТаблицуУслуг(РезультатЗапросаПоУслугам, СтруктураШапкиДокумента, ПогрешностиОкругления)

	ТаблицаУслуг = РезультатЗапросаПоУслугам.Выгрузить();
	
	Если НЕ СтруктураШапкиДокумента.ЕстьНДС Тогда
		// для регламентного учета считаем НДС
		ТаблицаУслуг.ЗаполнитьЗначения(Перечисления.СтавкиНДС.БезНДС, "СтавкаНДС");
		ТаблицаУслуг.ЗаполнитьЗначения(0                            , "НДС");
	КонецЕсли;
	
	НалоговыйУчет.ДобавитьКолонкиТоваровРегл(ТаблицаУслуг, СтруктураШапкиДокумента, ПогрешностиОкругления, Ложь);

	Возврат ТаблицаУслуг;

КонецФункции // ПодготовитьТаблицуТоваров()

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТоварам - результат запроса по табличной части "Товары",
//  СтруктураШапкиДокумента   - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблиица значений.
//
Функция ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента, ПогрешностиОкругления)

	ТаблицаТоваров = РезультатЗапросаПоТоварам.Выгрузить();
	
	ТаблицаТоваров.Колонки.Добавить("СуммаСНДС", ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповЧисла(15,2));
	
	Если НЕ (СтруктураШапкиДокумента.ВалютаДокумента = мВалютаРегламентированногоУчета) Тогда
		// для регламентного учета считаем НДС
		ТаблицаТоваров.ЗаполнитьЗначения(Перечисления.СтавкиНДС.БезНДС, "СтавкаНДС");
		ТаблицаТоваров.ЗаполнитьЗначения(0                            , "НДС");
	КонецЕсли;
	
	ТаблицаТоваров.Колонки.Добавить("ДляХозяйственнойДеятельности", Новый ОписаниеТипов("Булево"));
	// для товаров колонка Амортизируется = Ложь
	ТаблицаТоваров.Колонки.Добавить("Амортизируется", Новый ОписаниеТипов("Булево"));
	
    Для каждого Строка Из ТаблицаТоваров Цикл
		
		Строка.СуммаСНДС = Строка.СуммаПоступления + 
		                          ?(Не СтруктураШапкиДокумента.СуммаВключаетНДС, Строка.СуммаНДСПоступления, 0);
		
		Если НЕ СтруктураШапкиДокумента.ЕстьНДС Тогда
			// эти реквизиты для учета НДС, если его нет - не заполняем (для булево = Ложь)
			Строка.ВидДеятельностиНДС 			= Перечисления.ВидыДеятельностиНДС.ПустаяСсылка();
			Строка.ДляХозяйственнойДеятельности = Ложь;
		ИначеЕсли Строка.НалоговоеНазначение = Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяНеХозДеятельность Тогда
			Строка.ДляХозяйственнойДеятельности = Ложь;
		Иначе
			Строка.ДляХозяйственнойДеятельности = Истина;
		КонецЕсли;
	КонецЦикла;
		
	НалоговыйУчет.ДобавитьКолонкиТоваровРегл(ТаблицаТоваров, СтруктураШапкиДокумента, ПогрешностиОкругления, Истина);

	Возврат ТаблицаТоваров;

КонецФункции // ПодготовитьТаблицуТоваров()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ПРОВЕДЕНИЯ - ФОРМИРОВАНИЕ ДВИЖЕНИЙ

// По результату запроса по шапке документа формируем движения по регистрам.
//
// Параметры: 
//  РежимПроведения           - режим проведения документа (оперативный или неоперативный),
//  СтруктураШапкиДокумента   - выборка из результата запроса по шапке документа,
//  ТаблицаПоТоварам          - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоУслугам, Отказ, Заголовок)

	Перем ТаблицаПоВторомуСобытиюНал, ТаблицаПоВторомуСобытиюНалЗачетВознаграждения, ТаблицаЗачетаЗадолженностиЗаТовары;
	
	ДвиженияПоРегистрамНалоговогоУчета(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоУслугам, 
										ТаблицаПоВторомуСобытиюНал, 
										ТаблицаПоВторомуСобытиюНалЗачетВознаграждения, 
										ТаблицаЗачетаЗадолженностиЗаТовары, 
										Отказ);
	
	
	ДатаДока   = СтруктураШапкиДокумента.Дата;
	ПроводкиБУ = Движения.Хозрасчетный;
	
	ТаблицыДокумента = Новый Структура();
	ТаблицыДокумента.Вставить("ТаблицаПоТоварам",ТаблицаПоТоварам);
    СтруктураШапкиДокумента.Вставить("ВидОперации", "ПоТоварам");
	ТаблицаАвансов = БухгалтерскийУчетРасчетовСКонтрагентами.ЗачетАванса(ЭтотОбъект, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета, ТаблицыДокумента , Отказ, Заголовок,"АВ",,,СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом, СтруктураШапкиДокумента.СчетУчетаРасчетовПоАвансамВыданным);
	
	ТаблицаКопия = ТаблицаПоТоварам.Скопировать();
	ТаблицаКопия.Свернуть("СчетВычетовИзДоходов, СубконтоВычетовИзДоходов1, СубконтоВычетовИзДоходов2, СубконтоВычетовИзДоходов3, НоменклатурнаяГруппа"+?(СтруктураШапкиДокумента.ЕстьНалогНаПрибыльДо2015,", НалоговоеНазначениеДоходовИЗатрат",""),"ПроводкиСуммаСНДСРегл,ПроводкиСуммаСНДСВал");
	
	// По товарам
	Для каждого СтрокаТаблицы Из ТаблицаКопия Цикл

		Если СтрокаТаблицы.ПроводкиСуммаСНДСРегл = 0 Тогда
			Продолжить;
		КонецЕсли;

		Проводка = ПроводкиБУ.Добавить();

		Проводка.Период          = Дата;
		Проводка.Активность      = Истина;
		Проводка.Организация     = СтруктураШапкиДокумента.Организация;
		Проводка.Сумма           = СтрокаТаблицы.ПроводкиСуммаСНДСРегл;
		Проводка.Содержание      = НСтр("ru='Долг за реализованные товары';uk='Борг за реалізовані товари'",Локализация.КодЯзыкаИнформационнойБазы());
		Проводка.НомерЖурнала    = "";

		Проводка.СчетДт         = СтрокаТаблицы.СчетВычетовИзДоходов;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтрокаТаблицы.СубконтоВычетовИзДоходов1);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, СтрокаТаблицы.СубконтоВычетовИзДоходов2);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, СтрокаТаблицы.СубконтоВычетовИзДоходов3);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "НоменклатурныеГруппы", СтрокаТаблицы.НоменклатурнаяГруппа);
		
		Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыльДо2015 Тогда 
			Проводка.НалоговоеНазначениеДт = СтрокаТаблицы.НалоговоеНазначениеДоходовИЗатрат;
			Проводка.СуммаНУДт		       = Проводка.Сумма;
		КонецЕсли;	
		
		Проводка.СчетКт          = СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Контрагенты", СтруктураШапкиДокумента.Контрагент);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Договоры"   , СтруктураШапкиДокумента.ДоговорКонтрагента);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт,"ДокументыРасчетовСКонтрагентами", УправлениеВзаиморасчетами.ОпределитьДокументРасчетовСКонтрагентом(Ссылка));
		Если СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом.Валютный Тогда
			Проводка.ВалютаКт        = СтруктураШапкиДокумента.ВалютаДокумента;
			Проводка.ВалютнаяСуммаКт = СтрокаТаблицы.ПроводкиСуммаСНДСВал;
		КонецЕсли; 
		
	КонецЦикла;
	
	Если СтруктураШапкиДокумента.ЕстьНДС Тогда
		
		// ТОВАРЫ
		ТаблицаКопия = ТаблицаПоТоварам.Скопировать();
		ТаблицаКопия.Свернуть("ДляХозяйственнойДеятельности,ВидДеятельностиНДС, СтавкаНДС, СчетВычетовИзДоходов, СубконтоВычетовИзДоходов1, СубконтоВычетовИзДоходов2, СубконтоВычетовИзДоходов3, НоменклатурнаяГруппа"+?(СтруктураШапкиДокумента.ЕстьНалогНаПрибыльДо2015,", НалоговоеНазначениеДоходовИЗатрат",""),"ПроводкиСуммаНДСРегл,ПроводкиСуммаНДСВал,СуммаНДСПоступления");
		ТаблицаДвижений = ТаблицаКопия.Скопировать();
		
		Для Каждого СтрокаТаблицы Из ТаблицаДвижений Цикл
			
			Если    СтрокаТаблицы.ПроводкиСуммаНДСРегл <> 0 
				ИЛИ СтрокаТаблицы.ПроводкиСуммаНДСВал  <> 0 Тогда
				
				Если СтрокаТаблицы.ПроводкиСуммаНДСРегл <> СтрокаТаблицы.СуммаНДСПоступления Тогда
				    // сфорируем проводку по разнице по НДС в связи с разными ценами передачи и продажи
					
					ПроводкаКорректировки =  ПроводкиБУ.Добавить();
					
					ПроводкаКорректировки.Период                     = СтруктураШапкиДокумента.Дата;
					ПроводкаКорректировки.Организация                = СтруктураШапкиДокумента.Организация;
					ПроводкаКорректировки.Сумма                      = СтрокаТаблицы.ПроводкиСуммаНДСРегл - СтрокаТаблицы.СуммаНДСПоступления;
					ПроводкаКорректировки.Содержание                 = НСтр("ru='НДС: налоговый кредит: корректировка по цене продажи';uk='ПДВ: податковий кредит: коригування за ціною продажу'");
					ПроводкаКорректировки.НомерЖурнала               = "";

					ПроводкаКорректировки.СчетДт = СтруктураШапкиДокумента.СчетУчетаНДСПриобретений;
					БухгалтерскийУчет.УстановитьСубконто(ПроводкаКорректировки.СчетДт, ПроводкаКорректировки.СубконтоДт, "Контрагенты", СтруктураШапкиДокумента.Контрагент);
					БухгалтерскийУчет.УстановитьСубконто(ПроводкаКорректировки.СчетДт, ПроводкаКорректировки.СубконтоДт, "Договоры"   , СтруктураШапкиДокумента.ДоговорКонтрагента);
					БухгалтерскийУчет.УстановитьСубконто(ПроводкаКорректировки.СчетДт, ПроводкаКорректировки.СубконтоДт, "ДокументыРасчетовСКонтрагентами", НалоговыйУчет.ОпределитьСделкуНалоговыйУчет(СтруктураШапкиДокумента, Ссылка));
							
					ПроводкаКорректировки.СчетКт = СтруктураШапкиДокумента.СчетУчетаНДСПриобретенийПодтвержденный;
					БухгалтерскийУчет.УстановитьСубконто(ПроводкаКорректировки.СчетКт, ПроводкаКорректировки.СубконтоКт, "Контрагенты", СтруктураШапкиДокумента.Контрагент);
					БухгалтерскийУчет.УстановитьСубконто(ПроводкаКорректировки.СчетКт, ПроводкаКорректировки.СубконтоКт, "Договоры"   , СтруктураШапкиДокумента.ДоговорКонтрагента);
					БухгалтерскийУчет.УстановитьСубконто(ПроводкаКорректировки.СчетКт, ПроводкаКорректировки.СубконтоКт, "ДокументыРасчетовСКонтрагентами", НалоговыйУчет.ОпределитьСделкуНалоговыйУчет(СтруктураШапкиДокумента, Ссылка));
						
				КонецЕсли;													  
				
				Проводка = ПроводкиБУ.Добавить();

				Проводка.Период                     = СтруктураШапкиДокумента.Дата;
				Проводка.Активность                 = Истина;
				Проводка.Организация                = СтруктураШапкиДокумента.Организация;
				Проводка.Сумма                      = СтрокаТаблицы.ПроводкиСуммаНДСРегл;
				Проводка.Содержание                 = НСтр("ru='НДС: налоговый кредит: отгрузка';uk='ПДВ: податковий кредит: відвантаження'",Локализация.КодЯзыкаИнформационнойБазы());
				Проводка.НомерЖурнала               = "";

				Проводка.СчетДт                     = СтруктураШапкиДокумента.СчетУчетаНДСПриобретенийПодтвержденный;

				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты", СтруктураШапкиДокумента.Контрагент);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Договоры"   , СтруктураШапкиДокумента.ДоговорКонтрагента);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ДокументыРасчетовСКонтрагентами", НалоговыйУчет.ОпределитьСделкуНалоговыйУчет(СтруктураШапкиДокумента, Ссылка));
				
				Проводка.СчетКт         = СтрокаТаблицы.СчетВычетовИзДоходов;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, СтрокаТаблицы.СубконтоВычетовИзДоходов1);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, СтрокаТаблицы.СубконтоВычетовИзДоходов2);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3, СтрокаТаблицы.СубконтоВычетовИзДоходов3);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "НоменклатурныеГруппы", СтрокаТаблицы.НоменклатурнаяГруппа);
				
				Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыльДо2015 Тогда 
					Проводка.НалоговоеНазначениеКт = СтрокаТаблицы.НалоговоеНазначениеДоходовИЗатрат;
					Проводка.СуммаНУКт		       = Проводка.Сумма;
				КонецЕсли;	
				
				НалоговыйУчет.РазбитьПроводкуПоНДСНаПервоеВтороеСобытие(ТаблицаПоВторомуСобытиюНал, ПроводкиБУ, Проводка, 
														  "Дт", СтруктураШапкиДокумента.СчетУчетаНДСПриобретенийПодтвержденный, 
														  СтруктураШапкиДокумента.ДоговорКонтрагента, 
														  НалоговыйУчет.ОпределитьСделкуНалоговыйУчет(СтруктураШапкиДокумента, Ссылка), ,
														  Перечисления.СобытияОжидаемыйИПодтвержденныйНДСПриобретений.Поступление,
														  СтрокаТаблицы.СтавкаНДС);
														  
			КонецЕсли;

		КонецЦикла;
		
		//нужно показать НДС по зачету вознаграждению, если при этом возникло первое событие (как при оплате)
		Если Не ТаблицаЗачетаЗадолженностиЗаТовары = Неопределено Тогда
			
			Для каждого СтрокаТаблицы Из ТаблицаЗачетаЗадолженностиЗаТовары  Цикл
				
				СуммаПроводки = НалоговыйУчет.ПолучитьСуммуПроводкиПоНДС(ТаблицаПоВторомуСобытиюНалЗачетВознаграждения, СтрокаТаблицы.СуммаНДС, 
														Перечисления.СобытияОжидаемыйИПодтвержденныйНДСПриобретений.Поступление,
														СтруктураШапкиДокумента.ДоговорКонтрагента,
														НалоговыйУчет.ОпределитьСделкуНалоговыйУчет(СтруктураШапкиДокумента, Ссылка),
														,
														Ложь, 
														СтрокаТаблицы.ДляХозяйственнойДеятельности, 
														СтрокаТаблицы.ВидДеятельностиНДС,
														СтрокаТаблицы.Амортизируется);
									
				Если  СуммаПроводки <> 0  Тогда
								
					Проводка = ПроводкиБУ.Добавить();
								
					Проводка.Период                     = СтруктураШапкиДокумента.Дата;
					Проводка.Активность                 = Истина;
					Проводка.Организация                = СтруктураШапкиДокумента.Организация;
					Проводка.Сумма                      = СуммаПроводки;
					Проводка.Содержание                 = НСтр("ru='НДС: налоговый кредит: зачет вознаграждения';uk='ПДВ: податковий кредит: залік винагороди'",Локализация.КодЯзыкаИнформационнойБазы());
					Проводка.НомерЖурнала               = "";
									
					Проводка.СчетДт = СтрокаТаблицы.СчетУчетаНДС;
								
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Контрагенты",					 СтруктураШапкиДокумента.Контрагент);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Договоры",						 СтруктураШапкиДокумента.ДоговорКонтрагента);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"ДокументыРасчетовСКонтрагентами",НалоговыйУчет.ОпределитьСделкуНалоговыйУчет(СтруктураШапкиДокумента, Ссылка));
								
					Проводка.СчетКт  = СтруктураШапкиДокумента.СчетУчетаНДСПриобретенийПодтвержденный;
								
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Контрагенты",					 СтруктураШапкиДокумента.Контрагент);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Договоры",						 СтруктураШапкиДокумента.ДоговорКонтрагента);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"ДокументыРасчетовСКонтрагентами",НалоговыйУчет.ОпределитьСделкуНалоговыйУчет(СтруктураШапкиДокумента, Ссылка));
								
				КонецЕсли;					
							
			КонецЦикла;
			
		КонецЕсли;			
		
	КонецЕсли;
	
	Движения.Хозрасчетный.Записать();
	
   	ТаблицыДокумента = Новый Структура();
	ТаблицыДокумента.Вставить("ТаблицаПоУслугам",ТаблицаПоУслугам);
	СтруктураШапкиДокумента.Вставить("ВидОперации", "ПоУслугам"); 
	Если СтруктураШапкиДокумента.УдержатьВознаграждение Тогда
		СтруктураШапкиДокумента.Вставить("УчитыватьДвиженияДокумента",Истина);
		СтруктураШапкиДокумента.Вставить("Сделка", Ссылка);
	КонецЕсли;
	ТаблицаАвансовПоУслугам = БухгалтерскийУчетРасчетовСКонтрагентами.ЗачетАванса(ЭтотОбъект, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета, ТаблицыДокумента , Отказ, Заголовок,"АВ",,,СтруктураШапкиДокумента.СчетУчетаРасчетовПоВознаграждению, СтруктураШапкиДокумента.СчетУчетаРасчетовПоАвансамПолученным);
	
	ТаблицаКопия = ТаблицаПоУслугам.Скопировать();
	ТаблицаКопия.Свернуть("","ПроводкиСуммаСНДСРегл,ПроводкиСуммаСНДСВал");
	
	// по вознаграждению
	Для каждого СтрокаТаблицы Из ТаблицаКопия Цикл

		// Выручка
		Если СтрокаТаблицы.ПроводкиСуммаСНДСРегл = 0 Тогда
			Продолжить;
		КонецЕсли;

		Проводка = ПроводкиБУ.Добавить();

		Проводка.Период          = Дата;
		Проводка.Активность      = Истина;
		Проводка.Организация     = СтруктураШапкиДокумента.Организация;
		Проводка.Сумма           = СтрокаТаблицы.ПроводкиСуммаСНДСРегл;
		Проводка.Содержание      = НСтр("ru='Услуги комиссии';uk='Послуги комісії'",Локализация.КодЯзыкаИнформационнойБазы());
		Проводка.НомерЖурнала    = "";

		Проводка.СчетДт          = СтруктураШапкиДокумента.СчетУчетаРасчетовПоВознаграждению;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты", СтруктураШапкиДокумента.Контрагент);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Договоры"   , СтруктураШапкиДокумента.ДоговорКонтрагента);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"ДокументыРасчетовСКонтрагентами", УправлениеВзаиморасчетами.ОпределитьДокументРасчетовСКонтрагентом(Ссылка));
		Если СтруктураШапкиДокумента.СчетУчетаРасчетовПоВознаграждению.Валютный Тогда
			Проводка.ВалютаДт        = СтруктураШапкиДокумента.ВалютаДокумента;
			Проводка.ВалютнаяСуммаДт = СтрокаТаблицы.ПроводкиСуммаСНДСВал;
		КонецЕсли; 
		
		Проводка.СчетКт         = СтруктураШапкиДокумента.СчетДоходовПоВознаграждениюБУ;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, СтруктураШапкиДокумента.СубконтоДоходовПоВознаграждениюБУ1);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, СтруктураШапкиДокумента.СубконтоДоходовПоВознаграждениюБУ2);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3, СтруктураШапкиДокумента.СубконтоДоходовПоВознаграждениюБУ3);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "НоменклатурныеГруппы", СтруктураШапкиДокумента.НоменклатурнаяГруппаПоВознаграждению);

		Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыльДо2015 Тогда 
			Проводка.НалоговоеНазначениеКт = СтруктураШапкиДокумента.НалоговоеНазначениеДоходовИЗатратПоВознаграждению;
			Проводка.СуммаНУКт		       = Проводка.Сумма;
		КонецЕсли;	
		
	КонецЦикла;
	
	ТаблицаКопия = ТаблицаПоУслугам.Скопировать();
	ТаблицаКопия.Свернуть("","ПроводкиСуммаНДСРегл,ПроводкиСуммаНДСВал");
	
	Если СтруктураШапкиДокумента.ЕстьНДС Тогда
		
		// НДС по вознаграждению
		Для каждого СтрокаТаблицы Из ТаблицаКопия Цикл

			// Выручка
			Если СтрокаТаблицы.ПроводкиСуммаНДСРегл = 0 Тогда
				Продолжить;
			КонецЕсли;

			Проводка = ПроводкиБУ.Добавить();

			Проводка.Период          = Дата;
			Проводка.Активность      = Истина;
			Проводка.Организация     = СтруктураШапкиДокумента.Организация;
			Проводка.Сумма           = СтрокаТаблицы.ПроводкиСуммаНДСРегл;
			Проводка.Содержание      = НСтр("ru='НДС: налоговые обязательства: отгрузка';uk=""ПДВ: податкові зобов'язання: відвантаження""",Локализация.КодЯзыкаИнформационнойБазы());
			Проводка.НомерЖурнала    = "";

			Проводка.СчетДт         = СтруктураШапкиДокумента.СчетДоходовПоВознаграждениюБУ;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтруктураШапкиДокумента.СубконтоДоходовПоВознаграждениюБУ1);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, СтруктураШапкиДокумента.СубконтоДоходовПоВознаграждениюБУ2);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, СтруктураШапкиДокумента.СубконтоДоходовПоВознаграждениюБУ3);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "НоменклатурныеГруппы", СтруктураШапкиДокумента.НоменклатурнаяГруппаПоВознаграждению);
			
			Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыльДо2015 Тогда 
				Проводка.НалоговоеНазначениеДт = СтруктураШапкиДокумента.НалоговоеНазначениеДоходовИЗатратПоВознаграждению;
				Проводка.СуммаНУДт		       = Проводка.Сумма;
			КонецЕсли;	
			
			Проводка.СчетКт          = СтруктураШапкиДокумента.СчетУчетаНДСПродаж;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Контрагенты", СтруктураШапкиДокумента.Контрагент);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Договоры"   , СтруктураШапкиДокумента.ДоговорКонтрагента);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ДокументыРасчетовСКонтрагентами", НалоговыйУчет.ОпределитьСделкуНалоговыйУчет(СтруктураШапкиДокумента, Ссылка));
			
			
			Если НЕ СтруктураШапкиДокумента.УдержатьВознаграждение Тогда
				НалоговыйУчет.РазбитьПроводкуПоНДСНаПервоеВтороеСобытие(ТаблицаПоВторомуСобытиюНал, ПроводкиБУ, Проводка, 
														  "Кт", СтруктураШапкиДокумента.СчетУчетаНДСПродажПодтвержденный, 
														  СтруктураШапкиДокумента.ДоговорКонтрагента, 
														  НалоговыйУчет.ОпределитьСделкуНалоговыйУчет(СтруктураШапкиДокумента, Ссылка),,
														  Перечисления.СобытияОжидаемыйИПодтвержденныйНДСПродаж.Реализация,
														  СтруктураШапкиДокумента.СтавкаНДСВознаграждения);
			Иначе
				// проводки всегда будут по первому событию.										  
				
			КонецЕсли;											  
			
		КонецЦикла;
	КонецЕсли;
	
	ДвиженияПоРегиструРеализованныеТовары(СтруктураШапкиДокумента, ТаблицаПоТоварам);
	
	//Учет курсовых разниц
	Если (ВалютаДокумента <> мВалютаРегламентированногоУчета) тогда
		БухгалтерскийУчетРед12.ПереоценкаСчетовДокументаРегл(ЭтотОбъект,СтруктураШапкиДокумента, мВалютаРегламентированногоУчета,Отказ,Заголовок);
	КонецЕсли; // Учет курсовых разниц

КонецПроцедуры // ДвиженияПоРегистрам()

Процедура ДвиженияПоРегиструРеализованныеТовары(СтруктураШапкиДокумента, ТаблицаПоТоварам)
	
	ТаблицаТоваров = ТаблицаПоТоварам.Скопировать();
	ТаблицаТоваров.Свернуть("Номенклатура, СтавкаНДС", "Количество, Выручка, СуммаПоступления");
	
	Для Каждого Строка Из ТаблицаТоваров Цикл
		
		СтавкаНДС = УчетНДС.ПолучитьСтавкуНДС(Строка.СтавкаНДС);
		Если СуммаВключаетНДС Тогда
			
			СуммаНДС  = УчетНДС.РассчитатьСуммуНДС(Строка.СуммаПоступления, Истина, СуммаВключаетНДС, СтавкаНДС);
			Строка.СуммаПоступления = Строка.СуммаПоступления - СуммаНДС;
			
		Иначе
			
			СуммаНДСВыручка  = УчетНДС.РассчитатьСуммуНДС(Строка.Выручка, Истина, СуммаВключаетНДС, СтавкаНДС);
			Строка.Выручка =  Строка.Выручка + СуммаНДСВыручка;
			
		КонецЕсли;
		
	КонецЦикла;
	
	НаборДвижений = Движения.РеализованныеТоварыКомитентов;
		
	// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
	ТаблицаДвижений = НаборДвижений.ВыгрузитьКолонки();
	ОбщегоНазначенияБПВызовСервера.ЗагрузитьВТаблицуЗначений(ТаблицаТоваров, ТаблицаДвижений);
	
	ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.Организация       , "Организация");
	ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.Контрагент, "Контрагент");
	ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.ДоговорКонтрагента, "ДоговорКонтрагента");
	
	НаборДвижений.мПериод          = Дата;
	НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;
	
	НаборДвижений.ВыполнитьРасход();
	НаборДвижений.Записать();

КонецПроцедуры

Процедура ДвиженияПоРегистрамНалоговогоУчета(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоУслугам, 
												ТаблицаПоВторомуСобытиюНал, 
												ТаблицаПоВторомуСобытиюНалЗачетВознаграждения, 
												ТаблицаДвиженийЗачетЗадолженности, 
												Отказ)
	
	ТаблицаПоВторомуСобытиюНал 					  = НалоговыйУчет.СоздатьСтруктуруТаблицыНалоговыхСумм();
    ТаблицаПоВторомуСобытиюНалЗачетВознаграждения = НалоговыйУчет.СоздатьСтруктуруТаблицыНалоговыхСумм();
	
	Если Не СтруктураШапкиДокумента.ЕстьНДС Тогда
		Возврат;
	КонецЕсли;
	
	// ПО РАСЧЕТАМ ЗА ТОВАРЫ
	НаборДвижений = Движения.ПриобретенияНалоговыйУчет;
		
	// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
	ТаблицаДвижений = НаборДвижений.ВыгрузитьКолонки();
	
	ТаблицаКопия = ТаблицаПоТоварам.Скопировать();
	ТаблицаКопия.Свернуть("СтавкаНДС, ДляХозяйственнойДеятельности,ВидДеятельностиНДС,Амортизируется","СуммаСНДСВал, СуммаНДСВал");
	ТаблицаПриобретений = ТаблицаКопия.Скопировать();
	
	Сч = 0;
	Пока Сч < ТаблицаПриобретений.Количество() Цикл
		СтрокаТаблицы = ТаблицаПриобретений.Получить(Сч);
		Если СтрокаТаблицы.СуммаСНДСВал + СтрокаТаблицы.СуммаНДСВал = 0 Тогда
			ТаблицаПриобретений.Удалить(СтрокаТаблицы);
		Иначе
			Сч = Сч + 1;
		КонецЕсли;
	КонецЦикла;
	
	ТаблицаПриобретений.Колонки.СуммаСНДСВал.Имя = "СуммаВзаиморасчетов";
	ТаблицаПриобретений.Колонки.СуммаНДСВал.Имя = "СуммаНДС";
	ОбщегоНазначенияБПВызовСервера.ЗагрузитьВТаблицуЗначений(ТаблицаПриобретений, ТаблицаДвижений);
	
	ТаблицаДвижений.ЗаполнитьЗначения(Организация       , "Организация");
	ТаблицаДвижений.ЗаполнитьЗначения(ДоговорКонтрагента, "ДоговорКонтрагента");
	ТаблицаДвижений.ЗаполнитьЗначения(НалоговыйУчет.ОпределитьСделкуНалоговыйУчет(СтруктураШапкиДокумента,
																	СтруктураШапкиДокумента.Ссылка),
									  "Сделка");
	ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СобытияПриобретенияНалоговыйУчет.ПоступлениеОтПоставщика, "Событие");
	
	Если СтруктураШапкиДокумента.СложныйНалоговыйУчет Тогда
		
		// очистим налоговые реквизиты
		ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтавкиНДС.ПустаяСсылка(), 			"СтавкаНДС");
		ТаблицаДвижений.ЗаполнитьЗначения(Ложь, 										   	"ДляХозяйственнойДеятельности");
		ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.ВидыДеятельностиНДС.ПустаяСсылка(), 	"ВидДеятельностиНДС");
		ТаблицаДвижений.ЗаполнитьЗначения(0, 												"СуммаНДС");
		ТаблицаДвижений.ЗаполнитьЗначения(Ложь, 											"Амортизируется");		
	Иначе		
		// упрощенный налоговый учет
		Если НЕ СтруктураШапкиДокумента.ЕстьНДС Тогда
			ТаблицаДвижений.ЗаполнитьЗначения(0, 												"СуммаНДС");	
			ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтавкиНДС.ПустаяСсылка(), 			"СтавкаНДС");
			ТаблицаДвижений.ЗаполнитьЗначения(Ложь, 										   	"ДляХозяйственнойДеятельности");
			ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.ВидыДеятельностиНДС.ПустаяСсылка(), 	"ВидДеятельностиНДС");
		КонецЕсли;
		
		Если СтруктураШапкиДокумента.ВедениеВзаиморасчетовНУ = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоРасчетнымДокументам Тогда
			// взаиморасчеты по договору по расчетным документам - необходимо заполнить в регистре реквизит РасчетныйДокумент
			ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.Ссылка, "РасчетныйДокумент");
		КонецЕсли;			
		
	КонецЕсли;
	

	Если НЕ Отказ И ТаблицаДвижений.Количество() > 0 И СуммаВознаграждения > 0 Тогда
					
		НаборДвижений.мПериод          = Дата;
		НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;
		
		Движения.ПриобретенияНалоговыйУчет.ВыполнитьПриход();
		Движения.ПриобретенияНалоговыйУчет.Записать();
			
	КонецЕсли;
		
	Если СтруктураШапкиДокумента.УдержатьВознаграждение Тогда
		//Отразим зачет вознаграждения регистре ПриобретенияНалоговыйУчет
		// Для этого последовательно "спишем суммы" из таблицы по проданным товарам,
		// уменьшив их на сумму возвнаграждения (СНДС)
		
		ТаблицаДвиженийЗачетЗадолженности = ТаблицаДвижений.СкопироватьКолонки();
		
		СуммаКСписанию 		= ТаблицаПоУслугам.Итог("СуммаСНДСВал");
		Для каждого Строка Из ТаблицаДвижений Цикл
			
			Если СуммаКСписанию <= 0 Тогда
				Прервать;
			КонецЕсли;
			
			Если Строка.СуммаВзаиморасчетов <= 0 Тогда
				Продолжить;	
			КонецЕсли;
			
			СтрокаЗачета = ТаблицаДвиженийЗачетЗадолженности.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаЗачета, Строка);				
			
			СуммаЗачета = Мин(СуммаКСписанию, Строка.СуммаВзаиморасчетов);
			
			Если Строка.СуммаВзаиморасчетов = СуммаКСписанию Тогда
				СуммаНДСЗачета = Строка.СуммаНДС;
			Иначе
				СуммаНДСЗачета = Строка.СуммаНДС * (СуммаКСписанию/Строка.СуммаВзаиморасчетов);
			КонецЕсли;
			
			СтрокаЗачета.СуммаВзаиморасчетов = СуммаЗачета;
			СтрокаЗачета.СуммаНДС 				 = СуммаНДСЗачета;
			
			СуммаКСписанию = СуммаКСписанию - СуммаЗачета; 
			
		КонецЦикла;
		
		Если СуммаКСписанию > 0 Тогда
		    // очень странно, конечно
			Сообщить(НСтр("ru='Внимание! Сумма вознаграждения превышает задолженность за проданный товар!';uk='Увага! Сума винагороди перевищує заборгованість за проданий товар!'"));	
		КонецЕсли;
		
		// при зачете вознаграждения при расчетах по расчетным документам в качестве расч. документа будет выступть сам документ
		Если НЕ СтруктураШапкиДокумента.СложныйНалоговыйУчет 
			И СтруктураШапкиДокумента.ВедениеВзаиморасчетовНУ = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоРасчетнымДокументам Тогда
			ТаблицаДвиженийЗачетЗадолженности.ЗаполнитьЗначения(Ссылка, "Сделка");
			ТаблицаДвиженийЗачетЗадолженности.ЗаполнитьЗначения(Ссылка, "РасчетныйДокумент");
		КонецЕсли;			
		
		ТаблицаДвиженийЗачетЗадолженности.ЗаполнитьЗначения(Перечисления.СобытияПриобретенияНалоговыйУчет.ОплатаПоставщику, "Событие");

		
		Если НЕ Отказ И ТаблицаДвижений.Количество() > 0 И СуммаВознаграждения > 0 Тогда
							
			НаборДвижений.мПериод          = Дата;
			НаборДвижений.мТаблицаДвижений = ТаблицаДвиженийЗачетЗадолженности;
			
			Движения.ПриобретенияНалоговыйУчет.ВыполнитьПриход();
			Движения.ПриобретенияНалоговыйУчет.Записать();
				
		КонецЕсли;
		
	КонецЕсли;
	
	// ПО РАСЧЕТАМ ЗА УСЛУГУ КОМИССИОННОГО ВОЗНАГРАЖДЕНИЯ
	НаборДвижений = Движения.ПродажиНалоговыйУчет;
		
	// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
	ТаблицаДвижений = НаборДвижений.ВыгрузитьКолонки();
		
	ТаблицаКопия = ТаблицаПоУслугам.Скопировать();
	ТаблицаКопия.Свернуть("СтавкаНДС","СуммаСНДСВал, СуммаНДСВал");
	ТаблицаПродаж = ТаблицаКопия.Скопировать();
	
	Сч = 0;
	Пока Сч < ТаблицаПродаж.Количество() Цикл
		СтрокаТаблицы = ТаблицаПродаж.Получить(Сч);
		Если СтрокаТаблицы.СуммаСНДСВал + СтрокаТаблицы.СуммаНДСВал = 0 Тогда
			ТаблицаПродаж.Удалить(СтрокаТаблицы);
		Иначе
			Сч = Сч + 1;
		КонецЕсли;
	КонецЦикла;
	
	ТаблицаПродаж.Колонки.СуммаСНДСВал.Имя = "СуммаВзаиморасчетов";
	ТаблицаПродаж.Колонки.СуммаНДСВал.Имя = "СуммаНДС";
	
	ОбщегоНазначенияБПВызовСервера.ЗагрузитьВТаблицуЗначений(ТаблицаПродаж, ТаблицаДвижений);
	ТаблицаДвижений.ЗаполнитьЗначения(Организация       , "Организация");
	ТаблицаДвижений.ЗаполнитьЗначения(ДоговорКонтрагента, "ДоговорКонтрагента");
	ТаблицаДвижений.ЗаполнитьЗначения(НалоговыйУчет.ОпределитьСделкуНалоговыйУчет(СтруктураШапкиДокумента,
																	СтруктураШапкиДокумента.Ссылка),
									  "Сделка");
	ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СобытияПродажиНалоговыйУчет.РеализацияПокупателю, "Событие");
	
	Если СтруктураШапкиДокумента.СложныйНалоговыйУчет Тогда
		
		// очистим налоговые реквизиты
		ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтавкиНДС.ПустаяСсылка(), 			"СтавкаНДС");
		ТаблицаДвижений.ЗаполнитьЗначения(0, 												"СуммаНДС");
		
	Иначе		
		// упрощенный налоговый учет
		Если НЕ СтруктураШапкиДокумента.ЕстьНДС Тогда
			ТаблицаДвижений.ЗаполнитьЗначения(0, 												"СуммаНДС");	
			ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтавкиНДС.ПустаяСсылка(), 			"СтавкаНДС");
		КонецЕсли;
		
		Если СтруктураШапкиДокумента.ВедениеВзаиморасчетовНУ = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоРасчетнымДокументам Тогда
			// взаиморасчеты по договору по расчетным документам - необходимо заполнить в регистре реквизит РасчетныйДокумент
			ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.Ссылка, "РасчетныйДокумент");
		КонецЕсли;			
		
	КонецЕсли;	
	
	Если НЕ Отказ И ТаблицаДвижений.Количество() > 0 Тогда
			
		НаборДвижений.мПериод          = Дата;
		НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;
		
		Движения.ПродажиНалоговыйУчет.ВыполнитьПриход();
		Движения.ПродажиНалоговыйУчет.Записать();
			
	КонецЕсли;
		
	Если СтруктураШапкиДокумента.УдержатьВознаграждение Тогда
			
		//Отразим зачет вознаграждения в регистре ПродажиНалоговыйУчет
		ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СобытияПродажиНалоговыйУчет.ОплатаПокупателем, "Событие");
		// при зачете вознаграждения при расчетах по расчетным документам в качестве расч. документа будет выступть сам документ
		Если НЕ СтруктураШапкиДокумента.СложныйНалоговыйУчет 
			И СтруктураШапкиДокумента.ВедениеВзаиморасчетовНУ = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоРасчетнымДокументам Тогда
			ТаблицаДвижений.ЗаполнитьЗначения(Ссылка, "Сделка");
			ТаблицаДвижений.ЗаполнитьЗначения(Ссылка, "РасчетныйДокумент");
		КонецЕсли;			
			
		Если НЕ Отказ И ТаблицаДвижений.Количество() > 0 Тогда
				
			НаборДвижений.мПериод          = Дата;
			НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;
			
			Движения.ПродажиНалоговыйУчет.ВыполнитьПриход();
			Движения.ПродажиНалоговыйУчет.Записать();
				
		КонецЕсли;
		
	КонецЕсли;
	
	// ОжидаемыйИПодтвержденныйНДСПродаж
	Если НЕ СтруктураШапкиДокумента.СложныйНалоговыйУчет Тогда
		
		Если СтруктураШапкиДокумента.УдержатьВознаграждение Тогда
            // Сформируем отдельно движения по отчету комитенту 
			// не будем учитывать движения по зачету задолженности
			ДвиженияПоОплатеПоставщику = Новый СписокЗначений;
			ДвиженияПоОплатеПоставщику.Добавить(Перечисления.СобытияПриобретенияНалоговыйУчет.ОплатаПоставщику);
			ДвиженияПоОплатеПоставщику.Добавить(Перечисления.СобытияПродажиНалоговыйУчет.ОплатаПокупателем);
			НалоговыйУчет.ДвиженияПоРегистрамНалоговогоУчетаУпрощенныйНалоговыйУчет(ЭтотОбъект, ТаблицаПоВторомуСобытиюНал, ,ДвиженияПоОплатеПоставщику);
			
			// и по зачету вознаграждения
			НалоговыйУчет.ДвиженияПоРегистрамНалоговогоУчетаУпрощенныйНалоговыйУчет(ЭтотОбъект, ТаблицаПоВторомуСобытиюНалЗачетВознаграждения, , ,Истина, ДвиженияПоОплатеПоставщику);
			
		Иначе		
				// Движения формируются по данным рассчета "первого события" 
			 НалоговыйУчет.ДвиженияПоРегистрамНалоговогоУчетаУпрощенныйНалоговыйУчет(ЭтотОбъект, ТаблицаПоВторомуСобытиюНал);
			   
		КонецЕсли;
	
	Иначе // Если  СтруктураШапкиДокумента.ЕстьНДС Тогда
		
		// если комитент-нерезидент входящего НДС не будет.
		Если СтруктураШапкиДокумента.ВалютаВзаиморасчетов = мВалютаРегламентированногоУчета Тогда
			
			// ПО ПРОДАЖАМ ТОВАРОВ	
			НаборДвижений = Движения.ОжидаемыйИПодтвержденныйНДСПриобретений;
			// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
			ТаблицаДвижений = НаборДвижений.ВыгрузитьКолонки();
				
			ТаблицаКопия = ТаблицаПоТоварам.Скопировать();
			ТаблицаКопия.Свернуть("СтавкаНДС,ДляХозяйственнойДеятельности,ВидДеятельностиНДС,Амортизируется","СуммаБезНДСВал,СуммаНДСВал,СуммаСНДС,СуммаНДСПоступления");
			
			// оставим в таблице только отличия между ценой передачи и ценой продажи
			Инд = 0;
			
			Пока Инд < ТаблицаКопия.Количество() Цикл
				Строка = ТаблицаКопия[Инд];
				
				Если Строка.СуммаБезНДСВал = Строка.СуммаСНДС - Строка.СуммаНДСПоступления  Тогда
					ТаблицаКопия.Удалить(Строка);
				Иначе
					
					Строка.СуммаБезНДСВал = Строка.СуммаБезНДСВал - (Строка.СуммаСНДС - Строка.СуммаНДСПоступления);
					Строка.СуммаНДСВал    = Строка.СуммаНДСВал - Строка.СуммаНДСПоступления;
					
					Инд = Инд + 1;
				КонецЕсли;
				
			
			КонецЦикла;
			
			ТаблицаКопия.Колонки.СуммаБезНДСВал     .Имя = "БазаНДС";
			ТаблицаКопия.Колонки.СуммаНДСВал        .Имя = "СуммаНДС";
			
			Сч = 0;
			Пока Сч < ТаблицаКопия.Количество() Цикл
				СтрокаТаблицы = ТаблицаКопия.Получить(Сч);
				Если СтрокаТаблицы.БазаНДС + СтрокаТаблицы.СуммаНДС = 0 Тогда
					ТаблицаКопия.Удалить(СтрокаТаблицы);
				Иначе
					Сч = Сч + 1;
				КонецЕсли;
			КонецЦикла;
			
			ОбщегоНазначенияБПВызовСервера.ЗагрузитьВТаблицуЗначений(ТаблицаКопия, ТаблицаДвижений);
			ТаблицаДвижений.ЗаполнитьЗначения(Организация       , "Организация");
			ТаблицаДвижений.ЗаполнитьЗначения(ДоговорКонтрагента, "ДоговорКонтрагента");
			ТаблицаДвижений.ЗаполнитьЗначения(НалоговыйУчет.ОпределитьСделкуНалоговыйУчет(СтруктураШапкиДокумента,
																			СтруктураШапкиДокумента.Ссылка),
											  	"Сделка");
												
			ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СобытияОжидаемыйИПодтвержденныйНДСПриобретений.Поступление, "СобытиеНДС");
			ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.КодыОперацийОжидаемыйИПодтвержденныйНДСПриобретений.ОжидаемыйНДС      , "КодОперации");
				
			Если НЕ Отказ И ТаблицаДвижений.Количество() > 0 И СуммаВознаграждения > 0 Тогда
					
				НаборДвижений.мПериод          = Дата;
				НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;
					
				Движения.ОжидаемыйИПодтвержденныйНДСПриобретений.ВыполнитьПриход();
				Движения.ОжидаемыйИПодтвержденныйНДСПриобретений.Записать();
					
			КонецЕсли;
			
		КонецЕсли; 
			
		// ПО УСЛУГЕ КОМИССИОННОГО ВОЗНАГРАЖДЕНИЯ
		НаборДвижений = Движения.ОжидаемыйИПодтвержденныйНДСПродаж;
			
		// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
		ТаблицаДвижений = НаборДвижений.ВыгрузитьКолонки();
			
		ТаблицаКопия = ТаблицаПоУслугам.Скопировать();
		ТаблицаКопия.Свернуть("СтавкаНДС","СуммаБезНДСВал,СуммаНДСВал");
		ТаблицаПродаж = ТаблицаКопия.Скопировать();
			
		ТаблицаПродаж.Свернуть("СтавкаНДС","СуммаБезНДСВал,СуммаНДСВал");
		ТаблицаПродаж.Колонки.СуммаБезНДСВал.Имя = "БазаНДС";
		ТаблицаПродаж.Колонки.СуммаНДСВал   .Имя = "СуммаНДС";
		
		Сч = 0;
		Пока Сч < ТаблицаПродаж.Количество() Цикл
			СтрокаТаблицы = ТаблицаПродаж.Получить(Сч);
			Если СтрокаТаблицы.БазаНДС + СтрокаТаблицы.СуммаНДС = 0 Тогда
				ТаблицаПродаж.Удалить(СтрокаТаблицы);
			Иначе
				Сч = Сч + 1;
			КонецЕсли;
		КонецЦикла;
		
		ОбщегоНазначенияБПВызовСервера.ЗагрузитьВТаблицуЗначений(ТаблицаПродаж, ТаблицаДвижений);
		ТаблицаДвижений.ЗаполнитьЗначения(Организация       , "Организация");
		ТаблицаДвижений.ЗаполнитьЗначения(ДоговорКонтрагента, "ДоговорКонтрагента");
		ТаблицаДвижений.ЗаполнитьЗначения(НалоговыйУчет.ОпределитьСделкуНалоговыйУчет(СтруктураШапкиДокумента,
																		СтруктураШапкиДокумента.Ссылка),
											  "Сделка");
		ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СобытияОжидаемыйИПодтвержденныйНДСПродаж.Реализация, "СобытиеНДС");
		ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.КодыОперацийОжидаемыйИПодтвержденныйНДСПродаж.ОжидаемыйНДС, "КодОперации");
			
		Если НЕ Отказ И ТаблицаДвижений.Количество() > 0 Тогда
				
			НаборДвижений.мПериод          = Дата;
			НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;
			
			Движения.ОжидаемыйИПодтвержденныйНДСПродаж.ВыполнитьПриход();
			Движения.ОжидаемыйИПодтвержденныйНДСПродаж.Записать();
				
		КонецЕсли;		
		
	КонецЕсли;
	
КонецПроцедуры

//////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	ТипДанныхЗаполнения = ТипЗнч(ДанныеЗаполнения);
	Если ДанныеЗаполнения <> Неопределено И ТипДанныхЗаполнения <> Тип("Структура")
		И Метаданные().ВводитсяНаОсновании.Содержит(ДанныеЗаполнения.Метаданные()) Тогда
		ЗаполнитьПоДокументуОснованию(ДанныеЗаполнения);
	Иначе
		УдержатьВознаграждение = Истина;
	КонецЕсли;
	
	ЗаполнениеДокументов.Заполнить(ЭтотОбъект, ДанныеЗаполнения);
	
	Если Не УчетнаяПолитика.ПлательщикНДС(Организация, Дата) Тогда
		СтавкаНДСВознаграждения = Перечисления.СтавкиНДС.НеНДС;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Организация)
		И ЗначениеЗаполнено(Контрагент)
		И ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
		Документы.ОтчетКомитентуОПродажах.ЗаполнитьСчетаУчетаРасчетов(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)

	Дата = НачалоДня(ОбщегоНазначенияБП.ПолучитьРабочуюДату());
	Ответственный = Пользователи.ТекущийПользователь();

	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)

	МассивНепроверяемыхРеквизитов = Новый Массив;

	ВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	КомитентРезидент = (ВалютаДокумента = ВалютаРегламентированногоУчета);
	
	ПлательщикНДС	= УчетнаяПолитика.ПлательщикНДС(Организация, Дата);
	ПлательщикНалогаНаПрибыльДо2015 	= УчетнаяПолитика.ПлательщикНалогаНаПрибыльДо2015(Организация, Дата);
	
	ДоговорУказан = ЗначениеЗаполнено(ДоговорКонтрагента);
	РеквизитыДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДоговорКонтрагента, "СложныйНалоговыйУчет, СхемаНалоговогоУчета");
	СложныйНалоговыйУчет = ДоговорУказан И РеквизитыДоговора.СложныйНалоговыйУчет;

	// Договор контрагента
	Если ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
		ТекстСообщения = "";
		Если НЕ УчетВзаиморасчетов.ПроверитьВозможностьПроведенияВРеглУчете(
			ЭтотОбъект, ДоговорКонтрагента, ТекстСообщения) Тогда
			ТекстСообщения = ОбщегоНазначенияБПКлиентСервер.ПолучитьТекстСообщения(, "Корректность",
				НСтр("ru='Договор';uk='Договір'"),,, ТекстСообщения);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект,
				"ДоговорКонтрагента", "Объект", Отказ);
		КонецЕсли;
	КонецЕсли;

	Если СпособРасчетаКомиссионногоВознаграждения = Перечисления.СпособыРасчетаКомиссионногоВознаграждения.НеРассчитывается Тогда
		МассивНепроверяемыхРеквизитов.Добавить("ПроцентКомиссионногоВознаграждения");
	КонецЕсли;

	Если Не ПлательщикНДС Тогда
		МассивНепроверяемыхРеквизитов.Добавить("СтавкаНДСВознаграждения");
	КонецЕсли;
		
	Если ПлательщикНДС Тогда
	
		Если Не ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
			// Проверку не выполняем
			
		ИначеЕсли НЕ РеквизитыДоговора.СхемаНалоговогоУчета = Справочники.СхемыНалоговогоУчетаПоДоговорамКонтрагентов.СКомитентом_НК Тогда
			ТекстСообщения = ОбщегоНазначенияБПКлиентСервер.ПолучитьТекстСообщения(, "Корректность",
			    НСтр("ru='Договор';uk='Договір'"),,,
				НСтр("ru='В договоре комиссии указана неправильная схема налогового учета! Используйте схему для периода с 2011 года!';uk='У договорі комісії зазначена неправильна схема податкового обліку! Використайте схему для періоду з 2011 року!'")
			);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, "ДоговорКонтрагента", "Объект", Отказ);
			
		ИначеЕсли НЕ СложныйНалоговыйУчет Тогда			
			ТекстСообщения = ОбщегоНазначенияБПКлиентСервер.ПолучитьТекстСообщения(, "Корректность",
			    НСтр("ru='Договор';uk='Договір'"),,,
				НСтр("ru='По договорам комиссии с 2011 года в конфигурации реализован только ""Сложный налоговый учет"". Установите соответствующий флаг в договоре с контрагентом!';uk='За договорами комісії з 2011 року в конфігурації реалізований тільки ""Складний податковий облік"". Встановіть відповідний прапор в договорі з контрагентом!'")
			);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, "ДоговорКонтрагента", "Объект", Отказ);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не ПлательщикНДС Тогда
		МассивНепроверяемыхРеквизитов.Добавить("СчетУчетаНДСПродаж");
	КонецЕсли;
	Если Не ПлательщикНДС ИЛИ СложныйНалоговыйУчет Тогда
		МассивНепроверяемыхРеквизитов.Добавить("СчетУчетаНДСПродажПодтвержденный");
	КонецЕсли;	
	Если Не ПлательщикНДС ИЛИ Не КомитентРезидент Тогда
		МассивНепроверяемыхРеквизитов.Добавить("СчетУчетаНДСПриобретений");
		МассивНепроверяемыхРеквизитов.Добавить("СчетУчетаНДСПриобретенийПодтвержденный");
	КонецЕсли;
	
	// Реквизиты НДС
	Если Товары.Итог("СуммаНДСВознаграждения") = 0 Тогда
		МассивНепроверяемыхРеквизитов.Добавить("СхемаРеализацииПоВознаграждению");
		МассивНепроверяемыхРеквизитов.Добавить("НалоговоеНазначениеДоходовИЗатратПоВознаграждению");
	Иначе
		Если Не ПлательщикНалогаНаПрибыльДо2015 Тогда
			МассивНепроверяемыхРеквизитов.Добавить("НалоговоеНазначениеДоходовИЗатратПоВознаграждению");
		Иначе
			Если НалоговоеНазначениеДоходовИЗатратПоВознаграждению.ВидНалоговойДеятельности = Справочники.ВидыНалоговойДеятельности.НеОблагаемая Тогда
				ТекстСообщения = ОбщегоНазначенияБПКлиентСервер.ПолучитьТекстСообщения(, "Корректность", 
					НСтр("ru='Налоговое назначение (доходов) по вознаграждению';uk='Податкове призначення (доходів) по винагороді'"), , ,
					НСтр("ru='Указно налоговое назначение по нехозяйственной деятельности';uk='Указно податкове призначення за негосподарської діяльності'")
				);
				Поле = "НалоговоеНазначениеДоходовИЗатратПоВознаграждению";
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	МассивНепроверяемыхРеквизитов.Добавить("Товары.НалоговоеНазначение");
	МассивНепроверяемыхРеквизитов.Добавить("Товары.НалоговоеНазначениеДоходовИЗатрат");
	
	НехозВНД_НДС = Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяНеХозДеятельность;
	НехозВНД_НП  = Справочники.НалоговыеНазначенияАктивовИЗатрат.НКУ_НеХозДеятельность;
	
	Для каждого СтрокаТаблицы Из Товары Цикл
		Префикс = "Товары[" + Формат(СтрокаТаблицы.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].";
		ИмяСписка = НСтр("ru='Товары';uk='Товари'");

		Если ПлательщикНалогаНаПрибыльДо2015 Тогда   
				
			Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.НалоговоеНазначениеДоходовИЗатрат) Тогда
				
				ТекстСообщения = ОбщегоНазначенияБПКлиентСервер.ПолучитьТекстСообщения("Колонка",, 
					НСтр("ru='Налоговое назначение (доходов и затрат)';uk='Податкове призначення (доходів і витрат)'"),
					СтрокаТаблицы.НомерСтроки, ИмяСписка
				);
				Поле = Префикс + "НалоговоеНазначениеДоходовИЗатрат";
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
				
			ИначеЕсли СтрокаТаблицы.НалоговоеНазначениеДоходовИЗатрат = НехозВНД_НП Тогда 
				
				ТекстСообщения = ОбщегоНазначенияБПКлиентСервер.ПолучитьТекстСообщения("Колонка", "Корректность", 
					НСтр("ru='Налоговое назначение (доходов и затрат)';uk='Податкове призначення (доходів і витрат)'"),
					СтрокаТаблицы.НомерСтроки, ИмяСписка, 
					НСтр("ru='Вид налоговой деятельности при реализации не может быть ""Не хозяйственной деятельностью"".';uk='Вид податкової діяльності при реалізації не може бути ""Не господарською діяльністю"".'")
				);
				Поле = Префикс + "НалоговоеНазначениеДоходовИЗатрат";
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
				
			КонецЕсли;

		КонецЕсли;

		Если ПлательщикНДС Тогда
				
			Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.НалоговоеНазначение) Тогда
				
				ТекстСообщения = ОбщегоНазначенияБПКлиентСервер.ПолучитьТекстСообщения("Колонка",, 
					НСтр("ru='Налоговое назначение (НДС)';uk='Податкове призначення (ПДВ)'"),
					СтрокаТаблицы.НомерСтроки, ИмяСписка
				);
				Поле = Префикс + "НалоговоеНазначение";
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
				
			ИначеЕсли СтрокаТаблицы.НалоговоеНазначение = НехозВНД_НДС Тогда	
				
				ТекстСообщения = ОбщегоНазначенияБПКлиентСервер.ПолучитьТекстСообщения("Колонка", "Корректность", 
					НСтр("ru='Налоговое назначение (НДС)';uk='Податкове призначення (ПДВ)'"),
					СтрокаТаблицы.НомерСтроки, ИмяСписка,
					НСтр("ru='Вид налоговой деятельности при реализации не может быть ""Не хозяйственной деятельностью"".';uk='Вид податкової діяльності при реалізації не може бути ""Не господарською діяльністю"".'")
				);
				Поле = Префикс + "НалоговоеНазначение";
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);

				
			Иначе
						     
				Если НЕ СтрокаТаблицы.СтавкаНДС.Пустая()
				   И НЕ СтрокаТаблицы.НалоговоеНазначение.ВидДеятельностиНДС = Перечисления.ВидыДеятельностиНДС.ПропорциональноОблагаемая
				   И НЕ СтрокаТаблицы.НалоговоеНазначение.ВидДеятельностиНДС = УчетНДС.ПолучитьВидДеятельностиНДС(СтрокаТаблицы.СтавкаНДС) Тогда
					   
					ТекстСообщения = ОбщегоНазначенияБПКлиентСервер.ПолучитьТекстСообщения("Колонка", "Корректность", 
						НСтр("ru='Налоговое назначение (НДС)';uk='Податкове призначення (ПДВ)'"),
						СтрокаТаблицы.НомерСтроки, ИмяСписка,
						НСтр("ru='Налоговое назначение не соответствует ставке НДС, указанной в строке.';uk='Податкове призначення не відповідає ставці ПДВ, вказаній в рядку.'")
					);
					Поле = Префикс + "НалоговоеНазначение";
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
					
				КонецЕсли;
					
			КонецЕсли;
				
		КонецЕсли;

	КонецЦикла;


	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);

КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)

	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	КомитентРезидент = (ВалютаДокумента = ВалютаРегламентированногоУчета);
	
	ПлательщикНДС = УчетнаяПолитика.ПлательщикНДС(Организация, Дата);
	ПлательщикНалогаНаПрибыльДо2015  = УчетнаяПолитика.ПлательщикНалогаНаПрибыльДо2015(Организация, Дата);			   
	
	Если Не КомитентРезидент Тогда
		Для Каждого СтрокаТЧ Из Товары Цикл
			СтрокаТЧ.СтавкаНДС = Перечисления.СтавкиНДС.НеНДС;   
			СтрокаТЧ.СуммаНДС = 0;
		КонецЦикла;
	КонецЕсли;
	
	Если Не ПлательщикНДС Тогда
		// организация - не плательщик НДС. Установим во всех ТЧ признак соответствующего учета НДС
		НеОБлНДСДеятельность = Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяХозДеятельность;
		Для каждого СтрокаТЧ  Из Товары Цикл
		    СтрокаТЧ.НалоговоеНазначение = НеОБлНДСДеятельность;
		КонецЦикла; 
	КонецЕсли; 
	
	Если Не ПлательщикНалогаНаПрибыльДо2015 Тогда
		НалоговоеНазначениеДоходовИЗатратПоВознаграждению = Неопределено;				
		Для каждого СтрокаТЧ  Из Товары Цикл
		    СтрокаТЧ.НалоговоеНазначениеДоходовИЗатрат = Неопределено;
		КонецЦикла; 
	КонецЕсли; 

	// Посчитать суммы документа и записать ее в соответствующий реквизит шапки для показа в журналах
	СуммаДокумента = УчетНДС.ПолучитьСуммуДокументаСНДС(ЭтотОбъект, "Товары");
	СуммаВознаграждения = Товары.Итог("СуммаВознаграждения") + ?(СуммаВключаетНДС, 0, Товары.Итог("СуммаНДСВознаграждения"));

	
	ДополнительныеСвойства.Вставить("РежимЗаписи", РежимЗаписи);
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)

	Перем Заголовок, СтруктураШапкиДокумента;
	Перем ТаблицаПоТоварам, ТаблицаПоУслугам;

	// ПОДГОТОВКА ПРОВЕДЕНИЯ ПО ДАННЫМ ДОКУМЕНТА

	ПроведениеСервер.ПодготовитьНаборыЗаписейКПроведению(ЭтотОбъект);
	Если РучнаяКорректировка Тогда
		Возврат;
	КонецЕсли;

    мВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = НСтр("ru='Проведение документа ""';uk='Проведення документа ""'") + СокрЛП(Ссылка) + """: ";
	
	ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента);
	ПодготовитьПараметрыУчетнойПолитики(СтруктураШапкиДокумента, Отказ, Заголовок);
	ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоУслугам, Отказ, Заголовок);
	
	// Движения по документу
	Если Не Отказ Тогда
		ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоУслугам, Отказ, Заголовок);
	КонецЕсли;
	
	Движения.Хозрасчетный.ВыполнитьДействияПередЗаписьюДвижений();

	ПроведениеСервер.ПодготовитьНаборыЗаписейКЗаписиДвижений(ЭтотОбъект);
	

КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)

	ПроведениеСервер.ПодготовитьНаборыЗаписейКОтменеПроведения(ЭтотОбъект);
	Движения.Записать();


КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Процедура ЗаполнитьПоДокументуОснованию(Основание)
	
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
		
		Если НЕ ПолучитьФункциональнуюОпцию("ВедетсяДеятельностьПоДоговорамКомиссииНаПродажу") Тогда
			ВызватьИсключение НСтр("ru='Отчет комитенту вводится на основании документа ""Поступление товаров и услуг"",
|только если в настройке параметров учета установлен флажок ""Ведется деятельность по договорам комиссии на продажу"".';uk='Звіт комітенту вводиться на підставі документа ""Надходження товарів і послуг"",
|тільки якщо в настройці параметрів обліку встановлений прапорець ""Ведеться діяльність за договорами комісії на продаж"".'");
		КонецЕсли;
		
		// Заполним реквизиты из стандартного набора по документу основанию.
		ЗаполнениеДокументов.ЗаполнитьПоОснованию(ЭтотОбъект, Основание);
		
		РеквизитыДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДоговорКонтрагента,
			"ВидДоговора, СпособРасчетаКомиссионногоВознаграждения, ПроцентКомиссионногоВознаграждения");
		
		Если РеквизитыДоговора.ВидДоговора <> Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда
			ВызватьИсключение НСтр("ru='Отчет комитенту вводится на основании документа ""Поступление товаров и услуг"",
|в котором указан договор ""С комитентом"".';uk='Звіт комітенту вводиться на підставі документа ""Надходження товарів і послуг"",
|в якому вказаний договір ""З комітентом"".'");
				
		КонецЕсли;
		
		УдержатьВознаграждение = Истина;
		СпособРасчетаКомиссионногоВознаграждения = РеквизитыДоговора.СпособРасчетаКомиссионногоВознаграждения;
		ПроцентКомиссионногоВознаграждения = РеквизитыДоговора.ПроцентКомиссионногоВознаграждения;
		
	КонецЕсли;
	
КонецПроцедуры


#КонецЕсли