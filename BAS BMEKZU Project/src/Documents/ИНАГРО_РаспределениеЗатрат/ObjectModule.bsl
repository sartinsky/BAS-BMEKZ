#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	ТипДанныхЗаполнения = ТипЗнч(ДанныеЗаполнения);
		
	ЗаполнениеДокументов.Заполнить(ЭтотОбъект, ДанныеЗаполнения);	
		
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	МассивНепроверяемыхРеквизитов = Новый Массив;	
	НеИспользуемыеТабличныеЧасти  = Новый Массив;
	
	// БазаПоВыпуску
	Если    БазаРаспределения.СпособРаспределенияЗатрат = Перечисления.ИНАГРО_СпособыРаспределенияЗатрат.ПропорциональноКоличествуВыпускаГотовойПродукции
		ИЛИ БазаРаспределения.СпособРаспределенияЗатрат = Перечисления.ИНАГРО_СпособыРаспределенияЗатрат.ПропорциональноСуммеВыпускаГотовойПродукции Тогда		
		НеИспользуемыеТабличныеЧасти.Добавить("БазаПоПлощади");
		НеИспользуемыеТабличныеЧасти.Добавить("БазаПоЗатрате");		
	// БазаПоЗатрате				
	ИначеЕсли БазаРаспределения.СпособРаспределенияЗатрат = Перечисления.ИНАГРО_СпособыРаспределенияЗатрат.ПропорциональноПрямойЗатрате 
		  ИЛИ БазаРаспределения.СпособРаспределенияЗатрат = Перечисления.ИНАГРО_СпособыРаспределенияЗатрат.ПропорциональноЗатратамПоВыпуску Тогда		
		НеИспользуемыеТабличныеЧасти.Добавить("БазаПоВыпуску");
		НеИспользуемыеТабличныеЧасти.Добавить("БазаПоПлощади");		
	// БазаПоПлощади
	Иначе
		НеИспользуемыеТабличныеЧасти.Добавить("БазаПоВыпуску");
		НеИспользуемыеТабличныеЧасти.Добавить("БазаПоЗатрате"); 		
	КонецЕсли;	
	
	ОбщегоНазначенияБП.ИсключитьИзПроверкиНеиспользуемыеТабличныеЧасти(ПроверяемыеРеквизиты,НеИспользуемыеТабличныеЧасти); 

	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);

КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	Перем Заголовок, СтруктураШапкиДокумента;		
	Перем ТаблицаПоЗатратам, ТаблицаПоБазе, ТаблицаПоРаспределению;
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКПроведению(ЭтотОбъект);
	Если РучнаяКорректировка Тогда
		Возврат;
	КонецЕсли; 
	   
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначенияБПВызовСервера.ПредставлениеДокументаПриПроведении(Ссылка);
	
	СтруктураШапкиДокумента = ОбщегоНазначенияРед12.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);		
	СтруктураШапкиДокумента.Вставить("НеРаспределятьОПЗнаСебестоимостьПродукции", УчетнаяПолитика.НеРаспределятьОПЗнаСебестоимостьПродукции(Организация, Дата));	
	
	ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента,ТаблицаПоЗатратам, ТаблицаПоБазе, ТаблицаПоРаспределению, Отказ, Заголовок); 	
	
	ПроведениеСервер.ЗаписатьНаборЗаписейБезЗамещенияТекущихДвижений(Движения.Хозрасчетный);
	ПроведениеСервер.ЗаписатьНаборЗаписейБезЗамещенияТекущихДвижений(Движения.ИНАГРО_РеализацияОрганизаций);
	
	// Движения по документу
	Если Не Отказ Тогда	
		ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоЗатратам, ТаблицаПоБазе, ТаблицаПоРаспределению, Отказ, Заголовок);		
	КонецЕсли; 
	
	Движения.Хозрасчетный.ВыполнитьДействияПередЗаписьюДвижений();
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКЗаписиДвижений(ЭтотОбъект);

КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКОтменеПроведения(ЭтотОбъект);
	Движения.Записать();
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)

	Дата = НачалоДня(ОбщегоНазначения.ТекущаяДатаПользователя());
	Ответственный = Пользователи.ТекущийПользователь();	
		
	Затраты.Очистить();	
	БазаПоВыпуску.Очистить();
	БазаПоЗатрате.Очистить();
	БазаПоПлощади.Очистить();	
	Распределение.Очистить();
			
КонецПроцедуры

#КонецОбласти

#Область Проведение

// Процедура формирует таблицы документа.
//
Процедура ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента,ТаблицаПоЗатратам, ТаблицаПоБазе, ТаблицаПоРаспределению, Отказ, Заголовок) Экспорт
	
	Если УправлениеЗатратами Тогда
		// Получим необходимые данные для проведения и проверки заполенения данные 
		// по табличной части "Затраты".
		СтруктураПолей = Новый Структура();
		СтруктураПростыхПолей = Новый Структура;
		
		СтруктураПолей.Вставить("СчетЗатрат",                "СчетЗатрат");
		СтруктураПолей.Вставить("Подразделение",             "Подразделение");
		СтруктураПолей.Вставить("НоменклатурнаяГруппа",      "НоменклатурнаяГруппа");
		СтруктураПолей.Вставить("СтатьяЗатрат",              "СтатьяЗатрат");
		СтруктураПолей.Вставить("НалоговоеНазначениеЗатрат", "НалоговоеНазначениеЗатрат");
		СтруктураПолей.Вставить("Количество",                "Количество");
		СтруктураПолей.Вставить("Сумма",                     "Сумма");
				
		РезультатЗапросаПоЗатратам = ОбщегоНазначенияРед12.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Затраты", СтруктураПолей, СтруктураПростыхПолей);
		
		// Подготовим таблицу товаров для проведения.
		ТаблицаПоЗатратам = ПодготовитьТаблицуЗатраты(РезультатЗапросаПоЗатратам, СтруктураШапкиДокумента);
		
	Иначе
		
		ТаблицаПоЗатратам = Неопределено;
		
	КонецЕсли;
	
	Если УправлениеБазойРаспределения Тогда
		// Получим необходимые данные для проведения и проверки заполенения данные 
		// по табличной части "База".
		СтруктураПолей = Новый Структура();
		СтруктураПростыхПолей = Новый Структура;
		
		СтруктураПолей.Вставить("Счет",                 "Счет");
		СтруктураПолей.Вставить("Подразделение",        "Подразделение");
		СтруктураПолей.Вставить("НоменклатурнаяГруппа", "НоменклатурнаяГруппа");
		СтруктураПолей.Вставить("База",                 "База");
		
				
		Если    БазаРаспределения.СпособРаспределенияЗатрат = Перечисления.ИНАГРО_СпособыРаспределенияЗатрат.ПропорциональноКоличествуВыпускаГотовойПродукции
			ИЛИ БазаРаспределения.СпособРаспределенияЗатрат = Перечисления.ИНАГРО_СпособыРаспределенияЗатрат.ПропорциональноСуммеВыпускаГотовойПродукции Тогда
			
			СтруктураПолей.Вставить("Номенклатура",        "Номенклатура");
			СтруктураПолей.Вставить("ОбъектСтроительства", "ОбъектСтроительства");   
			СтруктураПолей.Вставить("Склад",               "Склад");
			СтруктураПолей.Вставить("ДокументВыпуска",     "ДокументВыпуска");
			
			ИмяТЧБазы = "БазаПоВыпуску";
			
		ИначеЕсли БазаРаспределения.СпособРаспределенияЗатрат = Перечисления.ИНАГРО_СпособыРаспределенияЗатрат.ПропорциональноПрямойЗатрате 
			  ИЛИ БазаРаспределения.СпособРаспределенияЗатрат = Перечисления.ИНАГРО_СпособыРаспределенияЗатрат.ПропорциональноЗатратамПоВыпуску Тогда
			
			СтруктураПолей.Вставить("СтатьяЗатрат",        "СтатьяЗатрат");
			СтруктураПолей.Вставить("ОбъектСтроительства", "ОбъектСтроительства");  
			
			ИмяТЧБазы = "БазаПоЗатрате";
			
		Иначе
			
			ИмяТЧБазы = "БазаПоПлощади";
			
		КонецЕсли;
		
		РезультатЗапросаПоБазе = ОбщегоНазначенияРед12.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, ИмяТЧБазы, СтруктураПолей, СтруктураПростыхПолей);
		
		// Подготовим таблицу товаров для проведения.
		ТаблицаПоБазе = ПодготовитьТаблицуБаза(РезультатЗапросаПоБазе, СтруктураШапкиДокумента);
		
	Иначе
		
		ТаблицаПоБазе = Неопределено;
		
	КонецЕсли;
	
	Если УправлениеРаспределением Тогда
		// Получим необходимые данные для проведения и проверки заполенения данные 
		// по табличной части "Распределение".
		СтруктураПолей = Новый Структура();
		СтруктураПростыхПолей = Новый Структура;
		
		СтруктураПолей.Вставить("ДокументВыпуска",           "ДокументВыпуска");
		СтруктураПолей.Вставить("Количество",                "Количество");
		СтруктураПолей.Вставить("НоменклатурнаяГруппа",      "НоменклатурнаяГруппа");
		СтруктураПолей.Вставить("ОбъектСтроительства",       "ОбъектСтроительства"); 
		СтруктураПолей.Вставить("Подразделение",             "Подразделение");
		СтруктураПолей.Вставить("Продукция",                 "Продукция");
		СтруктураПолей.Вставить("Склад",                     "Склад");
		СтруктураПолей.Вставить("СтатьяЗатрат",              "СтатьяЗатрат");
		СтруктураПолей.Вставить("Субконто1",                 "Субконто1");
		СтруктураПолей.Вставить("Субконто2",                 "Субконто2");
		СтруктураПолей.Вставить("Субконто3",                 "Субконто3");
		СтруктураПолей.Вставить("Сумма",                     "Сумма");
		СтруктураПолей.Вставить("Счет",                      "Счет");
		СтруктураПолей.Вставить("СчетСписания",              "СчетСписания");
		СтруктураПолей.Вставить("СуммаПриход",               "СуммаПриход");
		СтруктураПолей.Вставить("КоличествоПриход",          "КоличествоПриход");
		СтруктураПолей.Вставить("НалоговоеНазначениеЗатрат", "НалоговоеНазначениеЗатрат");
		СтруктураПолей.Вставить("НалоговоеНазначение",       "НалоговоеНазначение");
		СтруктураПолей.Вставить("СуммаНУ",                   "СуммаНУ");
		
		РезультатЗапросаПоРаспределению = ОбщегоНазначенияРед12.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Распределение", СтруктураПолей, СтруктураПростыхПолей);
		
		// Подготовим таблицу товаров для проведения.
		ТаблицаПоРаспределению = ПодготовитьТаблицуРаспределение(РезультатЗапросаПоРаспределению, СтруктураШапкиДокумента);;
		
	Иначе
		
		ТаблицаПоРаспределению = Неопределено;
		
	КонецЕсли;
		
КонецПроцедуры

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоЗатратам  - результат запроса по табличной части "Затраты",
//  СтруктураШапкиДокумента - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблиица значений.
//
Функция ПодготовитьТаблицуЗатраты(РезультатЗапросаПоЗатратам, СтруктураШапкиДокумента)
	
	ТаблицаЗатраты = РезультатЗапросаПоЗатратам.Выгрузить();
	
	Возврат ТаблицаЗатраты;
	
КонецФункции

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоЗатратам  - результат запроса по табличной части "Базы",
//  СтруктураШапкиДокумента - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблиица значений.
//
Функция ПодготовитьТаблицуБаза(РезультатЗапросаПоБазе, СтруктураШапкиДокумента)
	
	ТаблицаБаза = РезультатЗапросаПоБазе.Выгрузить();
	
	Возврат ТаблицаБаза;
	
КонецФункции

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоЗатратам  - результат запроса по табличной части "Распределение",
//  СтруктураШапкиДокумента - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблиица значений.
//
Функция ПодготовитьТаблицуРаспределение(РезультатЗапросаПоРаспределению, СтруктураШапкиДокумента)
	
	ТаблицаРаспределение = РезультатЗапросаПоРаспределению.Выгрузить();
	
	Возврат ТаблицаРаспределение;
	
КонецФункции

Процедура ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоЗатратам, ТаблицаПоБазе, ТаблицаПоРаспределению, Отказ, Заголовок)
	
	// Затраты
	Если НЕ СтруктураШапкиДокумента.УправлениеЗатратами Тогда		
		ТаблицаПоЗатратам = ТЗЗатратыПолучить(ТаблицаПоЗатратам);		
	КонецЕсли;
	
	// База
	Если НЕ СтруктураШапкиДокумента.УправлениеБазойРаспределения Тогда 
		ТаблицаПоБазе = ТЗБазаПолучить(ТаблицаПоБазе);
	КонецЕсли;
	
	// Распределение
	Если НЕ СтруктураШапкиДокумента.УправлениеРаспределением Тогда		
		ТаблицаПоРаспределению = ТЗРаспределениеПолучить(); 		
		ЗаполнитьРаспределение(СтруктураШапкиДокумента.БазаРаспределения, ТаблицаПоЗатратам, ТаблицаПоБазе, ТаблицаПоРаспределению);		
	КонецЕсли;	
	
	ИНАГРО_Общий.ИНАГРО_ДвиженияРаспределенияЗатрат(Движения, СтруктураШапкиДокумента.БазаРаспределения, СтруктураШапкиДокумента, ТаблицаПоРаспределению, ТаблицаПоЗатратам, Отказ, Заголовок);	
	
	Если ИНАГРО_ОбщийВызовСервераПовтИсп.ЕстьБСПУ() Тогда
		МодульИНАГРО_БиологическиеАктивы = ОбщегоНазначения.ОбщийМодуль("ИНАГРО_БиологическиеАктивы");
		МодульИНАГРО_БиологическиеАктивы.Движение_ЖивотныхОрганизацииИзХозрасчетный(СтруктураШапкиДокумента, Движения);
	КонецЕсли;		
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ИНАГРО_РаспределениеЗатратРаспределение.Сумма КАК Сумма,
		|	ИНАГРО_РаспределениеЗатратРаспределение.Продукция,
		|	ИНАГРО_РаспределениеЗатратРаспределение.ДокументВыпуска
		|ПОМЕСТИТЬ Док
		|ИЗ
		|	Документ.ИНАГРО_РаспределениеЗатрат.Распределение КАК ИНАГРО_РаспределениеЗатратРаспределение
		|ГДЕ
		|	ИНАГРО_РаспределениеЗатратРаспределение.Ссылка = &Док
		|	И ИНАГРО_РаспределениеЗатратРаспределение.ДокументВыпуска ССЫЛКА Документ.АктОбОказанииПроизводственныхУслуг
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ИНАГРО_РеализацияОрганизаций.Контрагент,
		|	ИНАГРО_РеализацияОрганизаций.СтавкаНДС КАК СтавкаНДС,
		|	ИНАГРО_РеализацияОрганизаций.Номенклатура,
		|	ИНАГРО_РеализацияОрганизаций.Склад,
		|	Док.Сумма,
		|	Док.Сумма / ИНАГРО_РеализацияОрганизаций.Количество КАК СебестоимостьЦена
		|ИЗ
		|	Док КАК Док
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ИНАГРО_РеализацияОрганизаций КАК ИНАГРО_РеализацияОрганизаций
		|		ПО Док.ДокументВыпуска = ИНАГРО_РеализацияОрганизаций.Регистратор
		|			И Док.Продукция = ИНАГРО_РеализацияОрганизаций.Номенклатура
		|ГДЕ
		|	ИНАГРО_РеализацияОрганизаций.Регистратор В (Док.ДокументВыпуска)";	
	
	Запрос.УстановитьПараметр("Док", Ссылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Движение = Движения.ИНАГРО_РеализацияОрганизаций.Добавить();
		Движение.Период             = Дата;
		Движение.Номенклатура       = Выборка.Номенклатура;
		Движение.Организация        = Организация;
		Движение.Склад              = Выборка.Склад;
		Движение.СтавкаНДС          = Выборка.СтавкаНДС;
		Движение.Контрагент         = Выборка.Контрагент;
		Движение.СебестоимостьСумма = Выборка.Сумма;
		Движение.СебестоимостьЦена  = Выборка.СебестоимостьЦена;
		
	КонецЦикла;    
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ПроверитьДатыДокумента(Отказ) Экспорт	
	
	Если Дата <> '00010101' И КонецПериода <> '00010101' Тогда
		Если КонецПериода < Дата Тогда 
			КонецПериода = '00010101';
			ТекстСообщения = НСтр("ru='Дата конца периода не может быть раньше даты документа!';uk='Дата кінця періоду не може бути раніше дати документу!'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Объект.КонецПериода", , Отказ);
			Возврат;
		КонецЕсли;
		
		Если КонецПериода < НачалоПериода Тогда			
			КонецПериода = '00010101';
			ТекстСообщения = НСтр("ru='Дата конца периода не может быть раньше даты начала периода!';uk='Дата кінця періоду не може бути раніше дати початку періоду!'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Объект.КонецПериода", , Отказ);
			Возврат;
		КонецЕсли;
	КонецЕсли;
		
КонецПроцедуры

Процедура ЗаполнитьЗатраты(ТЧЗатрат = Неопределено) Экспорт
	
	Если ТЧЗатрат = Неопределено Тогда
		ТЧЗатрат = Затраты;
	КонецЕсли;
	
	Параметры = Новый Структура;
	Параметры.Вставить("СчетЗатрат",			            СчетЗатратОтборЗатрат);
	Параметры.Вставить("Подразделение", 		            ПодразделениеОтборЗатрат);
	Параметры.Вставить("НоменклатурнаяГруппа", 	            НоменклатурнаяГруппаОтборЗатрат);
	Параметры.Вставить("НалоговоеНазначениеДоходовИЗатрат",	НалоговоеНазначениеЗатрат);
	Параметры.Вставить("СтатьяЗатрат", 			            СтатьяЗатратОтборЗатрат);
	
	ПараметрыБаза = Новый Структура;
	Если БазаРаспределения.СпособРаспределенияЗатрат = Перечисления.ИНАГРО_СпособыРаспределенияЗатрат.ПропорциональноКоличествуВыпускаГотовойПродукции
		ИЛИ БазаРаспределения.СпособРаспределенияЗатрат = Перечисления.ИНАГРО_СпособыРаспределенияЗатрат.ПропорциональноСуммеВыпускаГотовойПродукции Тогда 
		ПараметрыБаза.Вставить("Счет",	     СчетОтборБаза);
	ИначеЕсли БазаРаспределения.СпособРаспределенияЗатрат = Перечисления.ИНАГРО_СпособыРаспределенияЗатрат.ПропорциональноПрямойЗатрате 
		ИЛИ БазаРаспределения.СпособРаспределенияЗатрат = Перечисления.ИНАГРО_СпособыРаспределенияЗатрат.ПропорциональноЗатратамПоВыпуску Тогда 
		ПараметрыБаза.Вставить("СчетЗатрат", СчетОтборБаза);
	КонецЕсли;
	ПараметрыБаза.Вставить("Подразделение",		   ПодразделениеОтборБаза);
	ПараметрыБаза.Вставить("НоменклатурнаяГруппа", НоменклатурнаяГруппаОтборБаза);
	ПараметрыБаза.Вставить("Номенклатура",		   НоменклатураОтборБаза);
	
	НеобходимыеДанные = Новый Структура;
	НеобходимыеДанные.Вставить("Организация",			         Организация);
	НеобходимыеДанные.Вставить("НачалоПериода",			         НачалоПериода);
	НеобходимыеДанные.Вставить("КонецПериода",			         КонецПериода);
	НеобходимыеДанные.Вставить("ПрименятьКоэффициент",	         ПрименятьКоэффициент);
	НеобходимыеДанные.Вставить("Коэффициент",			         Коэффициент);
	НеобходимыеДанные.Вставить("СписыватьВсеЗатратыПоПродукции", СписыватьВсеЗатратыПоПродукции);
	НеобходимыеДанные.Вставить("БазаРаспределения",		         БазаРаспределения);   
	НеобходимыеДанные.Вставить("Ссылка",		                 Ссылка);  
	НеобходимыеДанные.Вставить("Параметры",				         ПараметрыБаза);
	
	ИНАГРО_Общий.ИНАГРО_ЗаполнитьТЧЗатраты(Параметры, ТЧЗатрат, НеобходимыеДанные);
	
КонецПроцедуры

Процедура ЗаполнитьБазаРаспределения() Экспорт
	
	Параметры = Новый Структура;	
	Если    БазаРаспределения.СпособРаспределенияЗатрат = Перечисления.ИНАГРО_СпособыРаспределенияЗатрат.ПропорциональноКоличествуВыпускаГотовойПродукции
		ИЛИ БазаРаспределения.СпособРаспределенияЗатрат = Перечисления.ИНАГРО_СпособыРаспределенияЗатрат.ПропорциональноСуммеВыпускаГотовойПродукции Тогда 
		Параметры.Вставить("Счет",	     СчетОтборБаза);
	ИначеЕсли БазаРаспределения.СпособРаспределенияЗатрат = Перечисления.ИНАГРО_СпособыРаспределенияЗатрат.ПропорциональноПрямойЗатрате 
		ИЛИ   БазаРаспределения.СпособРаспределенияЗатрат = Перечисления.ИНАГРО_СпособыРаспределенияЗатрат.ПропорциональноЗатратамПоВыпуску Тогда 
		Параметры.Вставить("СчетЗатрат", СчетОтборБаза);
	КонецЕсли;	
	Параметры.Вставить("Подразделение",		   ПодразделениеОтборБаза);
	Параметры.Вставить("НоменклатурнаяГруппа", НоменклатурнаяГруппаОтборБаза);
	Параметры.Вставить("Номенклатура",		   НоменклатураОтборБаза);
	
	НеобходимыеДанные = Новый Структура;
	НеобходимыеДанные.Вставить("Организация",	Организация);
	НеобходимыеДанные.Вставить("НачалоПериода",	НачалоПериода);
	НеобходимыеДанные.Вставить("КонецПериода",	КонецПериода);
	НеобходимыеДанные.Вставить("Параметры",		Параметры);
	
	ИНАГРО_Общий.ИНАГРО_ЗаполнитьТЧБаза(БазаРаспределения, ТЗБазаПолучить(Неопределено), НеобходимыеДанные);
	
КонецПроцедуры

Процедура ЗаполнитьРаспределение(БазаРаспределения, ТЗЗатраты = Неопределено, ТЗБаза = Неопределено, ТЗРаспределения = Неопределено) Экспорт
	
	НеобходимыеДанные = Новый Структура;
	НеобходимыеДанные.Вставить("Затраты", 		ТЗЗатратыПолучить(ТЗЗатраты));
	НеобходимыеДанные.Вставить("База", 			ТЗБазаПолучить(ТЗБаза));
	НеобходимыеДанные.Вставить("Распределение", ТЗРаспределениеПолучить());	
	НеобходимыеДанные.Вставить("СтатьяДохода",  СтатьяДохода);	
	НеобходимыеДанные.Вставить("Объект",        ЭтотОбъект);
	
	ИНАГРО_Общий.ИНАГРО_ЗаполнитьТЧРаспределение(БазаРаспределения, НеобходимыеДанные);
	
	ТЗРаспределения = НеобходимыеДанные.Распределение;
	
КонецПроцедуры

Функция ТЗЗатратыПолучить(ТЗЗатраты)
	
	Если ТЗЗатраты <> Неопределено Тогда
		Возврат ТЗЗатраты;
	КонецЕсли;
	
	Если УправлениеЗатратами Тогда
		Возврат Затраты.Выгрузить();
		
	Иначе
		ТЧ = Затраты.Выгрузить();
		ТЧ.Очистить();
		
		ЗаполнитьЗатраты(ТЧ);
		
		Возврат ТЧ;
		
	КонецЕсли;
	
КонецФункции

Функция ТЗБазаПолучить(ТЗБаза)
	
	Если ТЗБаза <> Неопределено Тогда
		Возврат ТЗБаза;
	КонецЕсли;
	
	Если УправлениеБазойРаспределения Тогда
		
		Если    БазаРаспределения.СпособРаспределенияЗатрат = Перечисления.ИНАГРО_СпособыРаспределенияЗатрат.ПропорциональноКоличествуВыпускаГотовойПродукции
			ИЛИ БазаРаспределения.СпособРаспределенияЗатрат = Перечисления.ИНАГРО_СпособыРаспределенияЗатрат.ПропорциональноСуммеВыпускаГотовойПродукции Тогда
			Возврат БазаПоВыпуску;
		ИначеЕсли БазаРаспределения.СпособРаспределенияЗатрат = Перечисления.ИНАГРО_СпособыРаспределенияЗатрат.ПропорциональноПлощадиПолей Тогда
			Возврат БазаПоПлощади;
		ИначеЕсли БазаРаспределения.СпособРаспределенияЗатрат = Перечисления.ИНАГРО_СпособыРаспределенияЗатрат.ПропорциональноПрямойЗатрате 
			  ИЛИ БазаРаспределения.СпособРаспределенияЗатрат = Перечисления.ИНАГРО_СпособыРаспределенияЗатрат.ПропорциональноЗатратамПоВыпуску Тогда 
			Возврат БазаПоЗатрате;
		КонецЕсли;
		
	Иначе
		
		Если    БазаРаспределения.СпособРаспределенияЗатрат = Перечисления.ИНАГРО_СпособыРаспределенияЗатрат.ПропорциональноКоличествуВыпускаГотовойПродукции
			ИЛИ БазаРаспределения.СпособРаспределенияЗатрат = Перечисления.ИНАГРО_СпособыРаспределенияЗатрат.ПропорциональноСуммеВыпускаГотовойПродукции Тогда			
			ТЧ = БазаПоВыпуску.Выгрузить();
			ТЧ.Очистить();			
		ИначеЕсли БазаРаспределения.СпособРаспределенияЗатрат = Перечисления.ИНАГРО_СпособыРаспределенияЗатрат.ПропорциональноПлощадиПолей Тогда 			
			ТЧ = БазаПоПлощади.Выгрузить();
			ТЧ.Очистить();			
		ИначеЕсли БазаРаспределения.СпособРаспределенияЗатрат = Перечисления.ИНАГРО_СпособыРаспределенияЗатрат.ПропорциональноПрямойЗатрате
			  ИЛИ БазаРаспределения.СпособРаспределенияЗатрат = Перечисления.ИНАГРО_СпособыРаспределенияЗатрат.ПропорциональноЗатратамПоВыпуску Тогда				  
			ТЧ = БазаПоЗатрате.Выгрузить();
			ТЧ.Очистить();			
		КонецЕсли;
		
	КонецЕсли;
	
	Параметры = Новый Структура;	
	Если    БазаРаспределения.СпособРаспределенияЗатрат = Перечисления.ИНАГРО_СпособыРаспределенияЗатрат.ПропорциональноКоличествуВыпускаГотовойПродукции
		ИЛИ БазаРаспределения.СпособРаспределенияЗатрат = Перечисления.ИНАГРО_СпособыРаспределенияЗатрат.ПропорциональноСуммеВыпускаГотовойПродукции Тогда 
		Параметры.Вставить("Счет",	СчетОтборБаза);
	ИначеЕсли БазаРаспределения.СпособРаспределенияЗатрат = Перечисления.ИНАГРО_СпособыРаспределенияЗатрат.ПропорциональноПрямойЗатрате
		  ИЛИ БазаРаспределения.СпособРаспределенияЗатрат = Перечисления.ИНАГРО_СпособыРаспределенияЗатрат.ПропорциональноЗатратамПоВыпуску Тогда 
		Параметры.Вставить("СчетЗатрат",		СчетОтборБаза);
	КонецЕсли;	
	Параметры.Вставить("Подразделение",			ПодразделениеОтборБаза);
	Параметры.Вставить("НоменклатурнаяГруппа",	НоменклатурнаяГруппаОтборБаза);
	Параметры.Вставить("Номенклатура",			НоменклатураОтборБаза);
		
	НеобходимыеДанные = Новый Структура;
	НеобходимыеДанные.Вставить("Организация",	Организация);
	НеобходимыеДанные.Вставить("НачалоПериода",	НачалоПериода);
	НеобходимыеДанные.Вставить("КонецПериода",	КонецПериода);
	НеобходимыеДанные.Вставить("Параметры",		Параметры);
	
	ИНАГРО_Общий.ИНАГРО_ЗаполнитьТЧБаза(БазаРаспределения, ТЧ, НеобходимыеДанные);
	
	Возврат ТЧ;
	
КонецФункции

Функция ТЗРаспределениеПолучить()
	
	Если УправлениеРаспределением Тогда
		Возврат Распределение;
		
	Иначе
		ТЧ = Распределение.Выгрузить();
		ТЧ.Очистить();
		
		Возврат ТЧ;
		
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#КонецЕсли