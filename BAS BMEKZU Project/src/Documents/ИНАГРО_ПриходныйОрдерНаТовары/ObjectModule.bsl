#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

Перем мВалютаРегламентированногоУчета;

#Область ОбработчикиСобытий

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
		
	ТипДанныхЗаполнения = ТипЗнч(ДанныеЗаполнения);
	Если ДанныеЗаполнения <> Неопределено И ТипДанныхЗаполнения <> Тип("Структура")
		И Метаданные().ВводитсяНаОсновании.Содержит(ДанныеЗаполнения.Метаданные()) Тогда
		
		Если ТипДанныхЗаполнения = Тип("ДокументСсылка.СчетНаОплатуПоставщика") Тогда
			ВидОперации = Перечисления.ИНАГРО_ВидыОперацийПриходныйОрдер.ОтПоставщика;			
		ИначеЕсли ТипДанныхЗаполнения = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
			ВидОперации = Перечисления.ИНАГРО_ВидыОперацийПриходныйОрдер.ОтПокупателя;			
		КонецЕсли;
		
		ЗаполнитьТоварыПоОснованию(ДанныеЗаполнения);
		ЗаполнитьВозвратнуюТаруПоОснованию(ДанныеЗаполнения);
		
	КонецЕсли; 
	ЗаполнениеДокументов.Заполнить(ЭтотОбъект, ДанныеЗаполнения);

	Если ТипДанныхЗаполнения = Тип("Структура")
		И ДанныеЗаполнения.Свойство("ВидОперации") Тогда
		ВидОперации = ДанныеЗаполнения.ВидОперации;
		Если ВидОперации = Перечисления.ИНАГРО_ВидыОперацийПриходныйОрдер.Перемещение Тогда
			Контрагент = Неопределено;
		КонецЕсли;	
		
	КонецЕсли; 		
		
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)

	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
			
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	Перем Заголовок, СтруктураШапкиДокумента;
	Перем ТаблицаПоТоварам, ТаблицаПоТаре; 
		
	ПроведениеСервер.ПодготовитьНаборыЗаписейКПроведению(ЭтотОбъект);	
	Если РучнаяКорректировка Тогда
		Возврат;
	КонецЕсли;
	
	мВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначенияБПВызовСервера.ПредставлениеДокументаПриПроведении(Ссылка);
	
    ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента);
		
	ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоТаре, Отказ, Заголовок);
	
	// Движения по документу
	Если НЕ Отказ Тогда
		ДвиженияПоРегистрам(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоТаре, Отказ, Заголовок, РежимПроведения);
	КонецЕсли;
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКЗаписиДвижений(ЭтотОбъект);

КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКОтменеПроведения(ЭтотОбъект);
	Движения.Записать();
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)

	Дата = НачалоДня(ОбщегоНазначения.ТекущаяДатаПользователя());
	Ответственный = Пользователи.ТекущийПользователь();

	ДокументОснование = Неопределено;
	
КонецПроцедуры

#КонецОбласти

#Область Проведение

// Процедура формирует структуру шапки документа и дополнительных полей.
// 
Процедура ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента) Экспорт
	
	// Дерево значений, содержащее имена необходимых полей в запросе по шапке.
	Перем ДеревоПолейЗапросаПоШапке;

	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента = ОбщегоНазначенияРед12.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
		
	// Заполним по шапке документа дерево параметров, нужных при проведении.
	ДеревоПолейЗапросаПоШапке = ОбщегоНазначенияРед12.СформироватьДеревоПолейЗапросаПоШапке();
	ОбщегоНазначенияРед12.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Склад" , "ТипСклада" , "ТипСклада");

	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа.
	СтруктураШапкиДокумента = УправлениеЗапасами.СформироватьЗапросПоДеревуПолей(ЭтотОбъект, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета);
	
КонецПроцедуры 

// Процедура формирует таблицы документа.
//
Процедура ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоТаре, Отказ, Заголовок) Экспорт
	
	// Получим необходимые данные для проведения и проверки заполенения данные 
	// по табличной части "Товары".
	
	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("НомерСтроки"                , "НомерСтроки");
	СтруктураПолей.Вставить("Номенклатура"               , "Номенклатура");
	СтруктураПолей.Вставить("Количество"                 , "Количество");
	
	СтруктураПолей.Вставить("Услуга"                     , "Номенклатура.Услуга");
	
	СтруктураПолей.Вставить("Склад"                      , "Ссылка.Склад");
	СтруктураПолей.Вставить("ТипСклада"            		 , "Ссылка.Склад.ТипСклада");
	
	РезультатЗапросаПоТоварам = ОбщегоНазначенияРед12.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураПолей);
	
	// Получим необходимые данные для проведения и проверки заполенения данные 
	// по табличной части "Возвратная тара".
	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("НомерСтроки"               , "НомерСтроки");
	СтруктураПолей.Вставить("Номенклатура"              , "Номенклатура");
	СтруктураПолей.Вставить("Количество"                , "Количество");

	СтруктураПолей.Вставить("Услуга"                    , "Номенклатура.Услуга");
	 		
	СтруктураПолей.Вставить("Склад"            			, "Ссылка.Склад");
	СтруктураПолей.Вставить("ТипСклада"            		, "Ссылка.Склад.ТипСклада");
	
	РезультатЗапросаПоТаре = ОбщегоНазначенияРед12.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "ВозвратнаяТара", СтруктураПолей);
		
	// Подготовим таблицу товаров для проведения.
	ТаблицаПоТоварам = ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента);
	
	// Подготовим таблицу тары для проведения.
	ТаблицаПоТаре = ПодготовитьТаблицуТары(РезультатЗапросаПоТаре, СтруктураШапкиДокумента);
			
КонецПроцедуры

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТоварам - результат запроса по табличной части "Товары",
//  СтруктураШапкиДокумента   - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблица значений.
//
Функция ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента)

	ТаблицаТоваров = РезультатЗапросаПоТоварам.Выгрузить();
		
	Возврат ТаблицаТоваров;

КонецФункции

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТаре  - результат запроса по табличной части "ВозвратнаяТара",
//  СтруктураШапкиДокумента - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблиица значений.
//
Функция ПодготовитьТаблицуТары(РезультатЗапросаПоТаре, СтруктураШапкиДокумента)
	
	ТаблицаТары = РезультатЗапросаПоТаре.Выгрузить();
			
	Возврат ТаблицаТары;
	
КонецФункции

Процедура ДвиженияПоРегистрам(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоТаре, Отказ, Заголовок, РежимПроведения)
	
	// ТОВАРЫ ПО РЕГИСТРУ ИНАГРО_ТоварыНаСкладах
	Если Не Отказ И Не ВидОперации = Перечисления.ИНАГРО_ВидыОперацийПриходныйОрдер.Перемещение Тогда
		
		СтруктТаблицДокумента = Новый Структура;
		СтруктТаблицДокумента.Вставить("ТаблицаПоТоварам", ТаблицаПоТоварам);
		СтруктТаблицДокумента.Вставить("ТаблицаПоТаре",    ТаблицаПоТаре);
		
		ТаблицыДанныхДокумента = ЗагрузитьТаблицыДокументаВСтруктуру(Движения.ИНАГРО_ТоварыНаСкладах, СтруктТаблицДокумента);
		
		УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Склад",           Склад);
		УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Организация",     Организация);
		УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ВозвратнаяТара",  Истина, "ТаблицаПоТаре");
		
		ЗаписатьТаблицыДокументаВРегистр(Движения.ИНАГРО_ТоварыНаСкладах, ВидДвиженияНакопления.Приход, ТаблицыДанныхДокумента, Дата);
		
	КонецЕсли;  
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Процедура выполняет копирование табличной части заказа поставщику в документ.
//
// Процедура выполняет заполнение табличной части по документу основанию.
// При заполнении копируется состав документа-основания.
//
// Параметры:
//  ДокументОснование - ссылка на документ основание.
//
Процедура ЗаполнитьТоварыПоОснованию(ДокументОснование)
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
	
	Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.СчетНаОплатуПоставщика") Тогда
		
		ИмяТаблицы = "СчетНаОплатуПоставщика.Товары";
		
		Запрос.Текст =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ 
			|	ЕдиницаИзмерения,
			|	Количество,
			|	Коэффициент,
			|	Номенклатура 
			|ИЗ
			|	Документ." + ИмяТаблицы + "
			|
			|ГДЕ
			|	Ссылка = &ДокументОснование
			|УПОРЯДОЧИТЬ ПО
			|	НомерСтроки";
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			СтрокаТабличнойЧасти = Товары.Добавить();			
			СтрокаТабличнойЧасти.Номенклатура     = Выборка.Номенклатура;
			СтрокаТабличнойЧасти.Количество       = Выборка.Количество;
			СтрокаТабличнойЧасти.ЕдиницаИзмерения = Выборка.ЕдиницаИзмерения;			
			СтрокаТабличнойЧасти.Коэффициент      = Выборка.Коэффициент;
						
		КонецЦикла;
		
	ИначеЕсли ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
		
		ИмяТаблицы = "РеализацияТоваровУслуг.Товары";
		
		Запрос.Текст =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ 
			|	ЕдиницаИзмерения,		
			|	ИНАГРО_КоличествоМест,
			|	Количество,
			|	Коэффициент,
			|	Номенклатура
			|ИЗ
			|	Документ." + ИмяТаблицы + "
			|
			|ГДЕ
			|	Ссылка = &ДокументОснование
			|УПОРЯДОЧИТЬ ПО
			|	НомерСтроки";
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			СтрокаТабличнойЧасти = Товары.Добавить();			
			СтрокаТабличнойЧасти.Номенклатура     = Выборка.Номенклатура;
			СтрокаТабличнойЧасти.Количество       = Выборка.Количество;
			СтрокаТабличнойЧасти.ЕдиницаИзмерения = Выборка.ЕдиницаИзмерения;
			СтрокаТабличнойЧасти.Коэффициент      = Выборка.Коэффициент;
						
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура выполняет заполнение табличной части по документу основанию.
// При заполнении копируется состав документа-основания.
//
// Параметры:
//  ДокументОснование - ссылка на документ основание.
//
Процедура ЗаполнитьВозвратнуюТаруПоОснованию(ДокументОснование)
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
	
	ИмяТаблицы = СокрЛП(ДокументОснование.Метаданные().Имя) + ".ВозвратнаяТара";
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ 
		|	Количество,
		|	Номенклатура
		|ИЗ
		|	Документ." + ИмяТаблицы + "
		|
		|ГДЕ
		|	Ссылка = &ДокументОснование
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		СтрокаТабличнойЧасти = ВозвратнаяТара.Добавить();		
		СтрокаТабличнойЧасти.Номенклатура = Выборка.Номенклатура;
		СтрокаТабличнойЧасти.Количество   = Выборка.Количество;
		
	КонецЦикла;
	
КонецПроцедуры

// Функция загружает таблицы документа
//
Функция ЗагрузитьТаблицыДокументаВСтруктуру(Движение, СтруктТаблицДокумента) Экспорт
	
	ПустаяТабРегистра = Движение.Выгрузить();
	ПустаяТабРегистра.Очистить();
	
	СтруктДанных = Новый Структура;
	Для Каждого ТабЧасть Из СтруктТаблицДокумента Цикл
		
		ТабРегистра = ПустаяТабРегистра.Скопировать();
		
		Если ТабЧасть.Значение <> Неопределено И ТабЧасть.Значение.Количество() > 0 Тогда
			ОбщегоНазначенияБПВызовСервера.ЗагрузитьВТаблицуЗначений(ТабЧасть.Значение, ТабРегистра);
		КонецЕсли;
		
		СтруктДанных.Вставить( ТабЧасть.Ключ, ТабРегистра);
		
	КонецЦикла;
	
	Возврат СтруктДанных;
	
КонецФункции 

// Заполнение данных
//
Процедура УстановитьЗначениеВТаблицыДокумента(СтруктТаблицДокумента, ИмяПоля, УстанавливаемоеЗначение, СтрТабЧасти = "") Экспорт
	
	СтруктТабЧасти = ?( ПустаяСтрока(СтрТабЧасти), СтруктТаблицДокумента, Новый Структура(СтрТабЧасти));
	Для Каждого ТабЧасть Из СтруктТабЧасти Цикл
		
		Если СтруктТаблицДокумента[ТабЧасть.Ключ].Количество() > 0 Тогда
			СтруктТаблицДокумента[ТабЧасть.Ключ].ЗаполнитьЗначения( УстанавливаемоеЗначение, ИмяПоля);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры 

// Заполнение данных
//
Процедура ЗаписатьТаблицыДокументаВРегистр(Движение, ВидДвижения, СтруктТаблицДокумента, ДатаДвижения) Экспорт
	
	Движение.мПериод = ДатаДвижения;
	Для Каждого ТабЧасть Из СтруктТаблицДокумента Цикл
		
		Если ТабЧасть.Значение.Количество() = 0 Тогда
			Продолжить; // Пропускаем пустые табличные части
		КонецЕсли;
		
		Движение.мТаблицаДвижений = ТабЧасть.Значение;
		Если ВидДвижения = Неопределено Тогда // Регистр сведений
			ОбщегоНазначенияРед12.ВыполнитьДвижениеПоРегистру(Движение);
		Иначе // Регистр накопления
			ОбщегоНазначенияРед12.ВыполнитьДвижениеПоРегистру(Движение, ВидДвижения);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры 

#КонецОбласти

#КонецЕсли 