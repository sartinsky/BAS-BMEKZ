#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПроцедурыИФункцииПечати

Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт

	// Приходный ордер на товары
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "Накладная";
	КомандаПечати.Представление = НСтр("ru='Приходный ордер на товары';uk='Прибутковий ордер на товари'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечати";
	КомандаПечати.СписокФорм    = "ФормаДокумента,ФормаСписка,ФормаВыбора,ФормаДокументаОбщая";
	
	// Реестр документов
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "Реестр";
	КомандаПечати.Представление = НСтр("ru='Реестр документов';uk='Реєстр документів'");
	КомандаПечати.ЗаголовокФормы= НСтр("ru='Реестр документов ""Приходный ордер на товары""';uk='Реєстр документів ""Прибутковий ордер на товари""'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечатиРеестраДокументов";
	КомандаПечати.СписокФорм    = "ФормаСписка";
	КомандаПечати.Порядок       = 100;

КонецПроцедуры		

Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	// Устанавливаем признак доступности печати покомплектно.
	ПараметрыВывода.ДоступнаПечатьПоКомплектно = Истина;
	
	// Проверяем, нужно ли для макета Накладная формировать табличный документ.
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "Накладная") Тогда
		
		// Формируем табличный документ и добавляем его в коллекцию печатных форм.
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "Накладная", НСтр("ru='Приходный ордер на товары';uk='Прибутковий ордер на товари'"), 
			ПечатьПриходныйОрдерНаТовары(МассивОбъектов, ОбъектыПечати, ПараметрыВывода), , "Документ.ИНАГРО_ПриходныйОрдерНаТовары.ПФ_MXL_Накладная", ,Истина);
		
	КонецЕсли; 	

КонецПроцедуры

Функция ПечатьПриходныйОрдерНаТовары(МассивОбъектов, ОбъектыПечати, ПараметрыВывода)

		УстановитьПривилегированныйРежим(Истина);
		
		ТабДокумент = Новый ТабличныйДокумент();
		Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ИНАГРО_ПриходныйОрдерНаТовары.ПФ_MXL_Накладная");
		ПервыйДокумент = Истина;
		Для Каждого МассивСсылок Из МассивОбъектов Цикл 
			Если Не ПервыйДокумент Тогда
				ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			КонецЕсли;	 			
					
		ДопКолонка = Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
		Если ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул Тогда
			ВыводитьКоды = Истина;
			Колонка = "Артикул";
		ИначеЕсли ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Код Тогда
			ВыводитьКоды = Истина;
			Колонка = "Код";
		Иначе
			ВыводитьКоды = Ложь;
		КонецЕсли;  
		
		Если ВыводитьКоды Тогда
			ОбластьШапки  = "ШапкаСКодом";
			ОбластьСтроки = "СтрокаСКодом";
		Иначе
			ОбластьШапки  = "ШапкаТаблицы";
			ОбластьСтроки = "Строка";
		КонецЕсли; 
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ТекущийДокумент", МассивСсылок);
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ПриходныйОрдерНаТовары.Номер,
		|	ПриходныйОрдерНаТовары.Дата,
		|	ПриходныйОрдерНаТовары.Контрагент КАК Поставщик,
		|	ПриходныйОрдерНаТовары.Организация,
		|	ПриходныйОрдерНаТовары.ФизЛицо.Наименование КАК ФизЛицо,
		|	ПриходныйОрдерНаТовары.Ответственный.ФизическоеЛицо.Наименование КАК Получил,
		|	ПриходныйОрдерНаТовары.Организация КАК Покупатель
		|ИЗ
		|	Документ.ИНАГРО_ПриходныйОрдерНаТовары КАК ПриходныйОрдерНаТовары
		|ГДЕ
		|	ПриходныйОрдерНаТовары.Ссылка В(&ТекущийДокумент)";
		Шапка = Запрос.Выполнить().Выбрать();
		Шапка.Следующий();
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ТекущийДокумент", МассивСсылок);
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВложенныйЗапросПоТоварам.НомерСтрокиТЧ,
		|	ВложенныйЗапросПоТоварам.Номенклатура,
		|	ВЫРАЗИТЬ(ВложенныйЗапросПоТоварам.Номенклатура.НаименованиеПолное КАК СТРОКА(1000)) КАК Товар,
		|	ВложенныйЗапросПоТоварам.Номенклатура.Код КАК Код,
		|	ВложенныйЗапросПоТоварам.Номенклатура.Артикул КАК Артикул,
		|	ВложенныйЗапросПоТоварам.Количество,
		|	ВложенныйЗапросПоТоварам.ЕдиницаИзмерения.Представление КАК ЕдиницаЦены
		|ИЗ
		|	(ВЫБРАТЬ
		|		МИНИМУМ(ПриходныйОрдерНаТовары.НомерСтроки) КАК НомерСтрокиТЧ,
		|		ПриходныйОрдерНаТовары.Номенклатура КАК Номенклатура,
		|		ПриходныйОрдерНаТовары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|		СУММА(ПриходныйОрдерНаТовары.Количество) КАК Количество
		|	ИЗ
		|		Документ.ИНАГРО_ПриходныйОрдерНаТовары.Товары КАК ПриходныйОрдерНаТовары
		|	ГДЕ
		|		ПриходныйОрдерНаТовары.Ссылка В(&ТекущийДокумент)
		|	
		|	СГРУППИРОВАТЬ ПО
		|		ПриходныйОрдерНаТовары.Номенклатура,
		|		ПриходныйОрдерНаТовары.ЕдиницаИзмерения) КАК ВложенныйЗапросПоТоварам
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВложенныйЗапросПоТоварам.НомерСтрокиТЧ";
		
		ЗапросТовары = Запрос.Выполнить().Выгрузить();
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ТекущийДокумент", МассивСсылок);
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	ПриходныйОрдерНаТовары.НомерСтроки КАК НомерСтрокиТЧ,
		               |	ПриходныйОрдерНаТовары.Номенклатура,
		               |	ВЫРАЗИТЬ(ПриходныйОрдерНаТовары.Номенклатура.НаименованиеПолное КАК СТРОКА(1000)) КАК Товар,
		               |	ПриходныйОрдерНаТовары.Номенклатура.Код КАК Код,
		               |	ПриходныйОрдерНаТовары.Номенклатура.Артикул КАК Артикул,
		               |	ПриходныйОрдерНаТовары.Количество,
		               |	ПриходныйОрдерНаТовары.Номенклатура.БазоваяЕдиницаИзмерения КАК ЕдиницаЦены
		               |ИЗ
		               |	Документ.ИНАГРО_ПриходныйОрдерНаТовары.ВозвратнаяТара КАК ПриходныйОрдерНаТовары
		               |ГДЕ
		               |	ПриходныйОрдерНаТовары.Ссылка В(&ТекущийДокумент)
		               |
		               |УПОРЯДОЧИТЬ ПО
		               |	НомерСтрокиТЧ";
		
		ЗапросТара = Запрос.Выполнить().Выгрузить();
		
		ТабДокумент = Новый ТабличныйДокумент;
		ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПриходныйОрдерНаТовары_Накладная";
		
		Макет = ПолучитьМакет("ПФ_MXL_Накладная");
		
		// печать производится на языке, указанном в настройках пользователя
		КодЯзыкаПечать = ПараметрыВывода.КодЯзыкаДляМногоязычныхПечатныхФорм;
		Макет.КодЯзыкаМакета = КодЯзыкаПечать; 
					
		// Выводим шапку накладной
		СведенияОПоставщике = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Шапка.Поставщик, Шапка.Дата,,,КодЯзыкаПечать);
		СведенияОПокупателе = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Шапка.Покупатель, Шапка.Дата,,,КодЯзыкаПечать);
		  		
		ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
		ОбластьМакета.Параметры.ТекстЗаголовка = ОбщегоНазначенияБПВызовСервера.СформироватьЗаголовокДокумента(Шапка, НСтр("ru='Приходный ордер на товары';uk='Прибутковий ордер на товари'",КодЯзыкаПечать),КодЯзыкаПечать);
		ТабДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");
		ОбластьМакета.Параметры.Заполнить(Шапка);
		ОбластьМакета.Параметры.ПредставлениеПоставщика = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОПоставщике, "ПолноеНаименование,",,КодЯзыкаПечать);	
		ОбластьМакета.Параметры.РеквизитыПоставщика =     ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОПоставщике, "ЮридическийАдрес,Телефоны,/,КодПоЕДРПОУ,КодПоДРФО,",,КодЯзыкаПечать);

		ТабДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Покупатель");
		ОбластьМакета.Параметры.Заполнить(Шапка);	
		ОбластьМакета.Параметры.ПредставлениеПокупателя = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОПокупателе, "ПолноеНаименование,",,КодЯзыкаПечать);	
		ОбластьМакета.Параметры.РеквизитыПокупателя =     ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОПокупателе, "ЮридическийАдрес,Телефоны,/,КодПоЕДРПОУ,КодПоДРФО,",,КодЯзыкаПечать);

		ТабДокумент.Вывести(ОбластьМакета);
		
		// Выводим дополнительно информацию о договоре и сделке
		СписокДополнительныхПараметров = "ФизЛицо,";
		МассивСтруктурСтрок = ОбщегоНазначенияБПВызовСервера.ДополнительнаяИнформация(Шапка,СписокДополнительныхПараметров,КодЯзыкаПечать);

		ОбластьМакета = Макет.ПолучитьОбласть("ДопИнформация");
		Для каждого СтруктураСтроки Из МассивСтруктурСтрок Цикл
			ОбластьМакета.Параметры.Заполнить(СтруктураСтроки);
			ТабДокумент.Вывести(ОбластьМакета);
		КонецЦикла;
		
		// Вывести табличную часть
		ОбластьМакета = Макет.ПолучитьОбласть(ОбластьШапки);
		
		Если ВыводитьКоды Тогда 
			ОбластьМакета.Параметры.Колонка = Колонка;
		КонецЕсли;
		ТабДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть(ОбластьСтроки);
		Ном           = 0;
		
		// Товар
		Для Каждого ВыборкаСтрокТовары Из ЗапросТовары Цикл
			
			Если НЕ ЗначениеЗаполнено(ВыборкаСтрокТовары.Номенклатура) Тогда
				ТекстСообщения = Нстр("ru='В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.';uk='В одному з рядків не заповнено значення номенклатури - рядок при друку пропущений.'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
				Продолжить;
			КонецЕсли;
			
			Ном = Ном + 1;
			
			ОбластьМакета.Параметры.Заполнить(ВыборкаСтрокТовары);
			ОбластьМакета.Параметры.НомерСтроки = Ном;
			ОбластьМакета.Параметры.Товар       = СокрЛП(ВыборкаСтрокТовары.Товар); 
			
			Если ВыводитьКоды Тогда  
				Если Колонка = "Артикул" Тогда
					ОбластьМакета.Параметры.Артикул = ВыборкаСтрокТовары.Артикул;
				Иначе
					ОбластьМакета.Параметры.Артикул = ВыборкаСтрокТовары.Код;
				КонецЕсли;
			КонецЕсли;               
			
			ТабДокумент.Вывести(ОбластьМакета);
		КонецЦикла;
		
		// Вывести Итого
		ОбластьМакета = Макет.ПолучитьОбласть("Итого");
		ТабДокумент.Вывести(ОбластьМакета);
		
		// Вывести таблицу с возвратной тарой
		ОбластьШапки  = СтрЗаменить(ОбластьШапки,"Мест","")+"Тара";
		ОбластьСтроки = СтрЗаменить(ОбластьСтроки,"Мест","")+"Тара";
		
		Если ЗапросТара.Количество() > 0 Тогда
			
			// сделаем отступ от основной таблицы
			ОбластьПробел = Макет.ПолучитьОбласть("Пробел");
			ТабДокумент.Вывести(ОбластьПробел);
			
			ОбластьМакета = Макет.ПолучитьОбласть(ОбластьШапки);
			Если ВыводитьКоды Тогда  
				ОбластьМакета.Параметры.Колонка = Колонка;
			КонецЕсли;               
			
			ТабДокумент.Вывести(ОбластьМакета);
			
			ОбластьМакета = Макет.ПолучитьОбласть(ОбластьСтроки);
			
			Для каждого ВыборкаСтрокТара Из ЗапросТара Цикл 
				
				ОбластьМакета.Параметры.Заполнить(ВыборкаСтрокТара);
				ОбластьМакета.Параметры.НомерСтроки = ЗапросТара.Индекс(ВыборкаСтрокТара) + 1;
				ОбластьМакета.Параметры.Товар       = СокрЛП(ВыборкаСтрокТара.Номенклатура);
				
				Если ВыводитьКоды Тогда  
					Если Колонка = "Артикул" Тогда
						ОбластьМакета.Параметры.Артикул = ВыборкаСтрокТара.Артикул;
					Иначе
						ОбластьМакета.Параметры.Артикул = ВыборкаСтрокТара.Код;
					КонецЕсли;
				КонецЕсли;             
				
				ТабДокумент.Вывести(ОбластьМакета);
			КонецЦикла; 
			
			// Вывести Итого
			ОбластьМакета = Макет.ПолучитьОбласть("ИтогоТара");
			ТабДокумент.Вывести(ОбластьМакета);
			
		КонецЕсли; 		
		
		// Вывести Сумму прописью
		ОбластьМакета = Макет.ПолучитьОбласть("СуммаПрописью");
		ОбластьМакета.Параметры.ИтоговаяСтрока = НСтр("ru='Всего наименований ';uk='Всього найменувань '",КодЯзыкаПечать) + ЗапросТовары.Количество()
		+ ?(ЗапросТара.Количество() = 0, "",  НСтр("ru='; возвратная тара ';uk='; зворотна тара '",КодЯзыкаПечать) + ЗапросТара.Количество()) + ".";
		ТабДокумент.Вывести(ОбластьМакета);
		
		// Вывести подписи
		ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
		ОбластьМакета.Параметры.Заполнить(Шапка);
		ТабДокумент.Вывести(ОбластьМакета);
		
	КонецЦикла;
	ТабДокумент.АвтоМасштаб = Истина;
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
		Возврат ТабДокумент;
		
КонецФункции   

Функция ПолучитьДополнительныеРеквизитыДляРеестра() Экспорт
	
	Результат = Новый Структура;	
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти 

#Область ОбработчикиСобытий

Процедура ОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка)
	
	Если ВидФормы <> "ФормаДокумента"
		И ВидФормы <> "ФормаОбъекта" Тогда
		Возврат;
	КонецЕсли;

	ВидОперации = Неопределено; 

	Если Параметры.Свойство("Ключ") И ЗначениеЗаполнено(Параметры.Ключ) Тогда
		ВидОперации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Параметры.Ключ, "ВидОперации");
	КонецЕсли;

	// Если документ копируется, то вид формы получаем из копируемого документа.
	Если НЕ ЗначениеЗаполнено(ВидОперации) Тогда
		Если Параметры.Свойство("ЗначениеКопирования")
			И ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
			ВидОперации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
				Параметры.ЗначениеКопирования, "ВидОперации");
		КонецЕсли;
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(ВидОперации) Тогда
		Если Параметры.Свойство("ЗначенияЗаполнения") 
			И ТипЗнч(Параметры.ЗначенияЗаполнения) = Тип("Структура") Тогда
			Если Параметры.ЗначенияЗаполнения.Свойство("ВидОперации") Тогда
				ВидОперации = Параметры.ЗначенияЗаполнения.ВидОперации;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ВидОперации) Тогда
		Если Параметры.Свойство("Основание")
			И ЗначениеЗаполнено(Параметры.Основание) Тогда
			ВидОперации = ОпределитьВидОперацииПоДокументуОснованию(Параметры.Основание);
		КонецЕсли;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	ФормыИНАГРО_ПриходныйОрдерНаТовары = ПолучитьСоответствиеВидовОперацийФормам();
	ВыбраннаяФорма = ФормыИНАГРО_ПриходныйОрдерНаТовары[ВидОперации];
	Если ВыбраннаяФорма = Неопределено Тогда
		ВыбраннаяФорма = "ФормаДокумента";
	КонецЕсли;
	
КонецПроцедуры 

#КонецОбласти 

#Область СлужебныеПроцедурыИФункции

Функция ПолучитьСоответствиеВидовОперацийФормам() Экспорт

	ФормыИНАГРО_ПриходныйОрдерНаТовары = Новый Соответствие;
	
	ФормыИНАГРО_ПриходныйОрдерНаТовары.Вставить(Перечисления.ИНАГРО_ВидыОперацийПриходныйОрдер.ОтПоставщика, 	"ФормаДокументаОбщая");
	ФормыИНАГРО_ПриходныйОрдерНаТовары.Вставить(Перечисления.ИНАГРО_ВидыОперацийПриходныйОрдер.ОтПодотчетника, 	"ФормаДокументаОбщая");
	ФормыИНАГРО_ПриходныйОрдерНаТовары.Вставить(Перечисления.ИНАГРО_ВидыОперацийПриходныйОрдер.ОтПокупателя, 	"ФормаДокументаОбщая");
	ФормыИНАГРО_ПриходныйОрдерНаТовары.Вставить(Перечисления.ИНАГРО_ВидыОперацийПриходныйОрдер.Перемещение, 	"ФормаДокументаОбщая");
	
	Возврат ФормыИНАГРО_ПриходныйОрдерНаТовары;

КонецФункции 

Функция ОпределитьВидОперацииПоДокументуОснованию(Основание) Экспорт

	Результат = Перечисления.ИНАГРО_ВидыОперацийПриходныйОрдер.ОтПокупателя;

	Возврат Результат;

КонецФункции

Функция ПолучитьФиксированныйМассивВидовОпераций() Экспорт

	МассивВидовОпераций = Новый Массив;
	СписокВидовОпераций = Новый СписокЗначений;
	
	ЗначенияПеречисления = Метаданные.Перечисления.ИНАГРО_ВидыОперацийПриходныйОрдер.ЗначенияПеречисления;
	Для Каждого ЗначениеПеречисления Из ЗначенияПеречисления Цикл
		ТекущийВидОперации = Перечисления.ИНАГРО_ВидыОперацийПриходныйОрдер[ЗначениеПеречисления.Имя];
		МассивВидовОпераций.Добавить(ТекущийВидОперации);
	КонецЦикла;
	 		
	Возврат Новый ФиксированныйМассив(МассивВидовОпераций);

КонецФункции

#КонецОбласти 

#КонецЕсли

