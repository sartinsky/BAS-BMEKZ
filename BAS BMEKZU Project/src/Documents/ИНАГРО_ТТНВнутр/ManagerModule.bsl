#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПроцедурыИФункцииПечати

Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт

	// Краткая
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "Краткая";
	КомандаПечати.Представление = НСтр("ru='Краткая';uk='Стисла'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечати";
	КомандаПечати.СписокФорм    = "ФормаДокументаОбщая,ФормаСписка";
	
	// Ф1_СГ
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "Ф1_СГ";
	КомандаПечати.Представление = НСтр("ru='Ф1-СГ';uk='Ф1-СГ'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечати";
	КомандаПечати.СписокФорм    = "ФормаДокументаОбщая,ФормаСписка";

	// Накладная
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "Накладная";
	КомандаПечати.Представление = НСтр("ru='Накладная';uk='Накладна'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечати";
	КомандаПечати.СписокФорм    = "ФормаДокументаОбщая,ФормаСписка"; 
	
	// Пропуск
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "Пропуск";
	КомандаПечати.Представление = НСтр("ru='Пропуск';uk='Пропуск'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечати";
	КомандаПечати.СписокФорм    = "ФормаДокументаОбщая,ФормаСписка"; 

	// Реестр документов
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "Реестр";
	КомандаПечати.Представление = НСтр("ru='Реестр документов';uk='Реєстр документів'");
	КомандаПечати.ЗаголовокФормы= НСтр("ru='Реестр документов ""Товарно-транспортная накладная (внутренняя)""';uk='Реєстр документів ""Товарно-транспортна накладна (внутрішня)""'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечатиРеестраДокументов";
	КомандаПечати.СписокФорм    = "ФормаСписка";
	КомандаПечати.Порядок       = 100;

КонецПроцедуры		

Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	// Устанавливаем признак доступности печати покомплектно.
	ПараметрыВывода.ДоступнаПечатьПоКомплектно = Истина;
	
	// Проверяем, нужно ли для макета формировать табличный документ.
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "Краткая") Тогда		
		// Формируем табличный документ и добавляем его в коллекцию печатных форм.
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "Краткая", НСтр("ru='Краткая';uk='Стисла'"), 
		ПечатьКраткая(МассивОбъектов, ОбъектыПечати, ПараметрыВывода),, "Документ.ИНАГРО_ТТНВнутр.ПФ_MXL_Краткая", ,Истина);  
		
	КонецЕсли;
	
	// Проверяем, нужно ли для макета формировать табличный документ.
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "Накладная") Тогда		
		// Формируем табличный документ и добавляем его в коллекцию печатных форм.
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "Накладная", НСтр("ru='Накладная';uk='Накладна'"), 
		ПечатьНакладная(МассивОбъектов, ОбъектыПечати, ПараметрыВывода),, "Документ.ИНАГРО_ТТНВнутр.ПФ_MXL_Накладная", ,Истина);
		
	КонецЕсли; 	
	
	// Проверяем, нужно ли для макета формировать табличный документ.
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "Ф1_СГ") Тогда		
		// Формируем табличный документ и добавляем его в коллекцию печатных форм.
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "Ф1_СГ", НСтр("ru='Ф1-СГ';uk='Ф1-СГ'"), 
		ПечатьФ1СГТТН(МассивОбъектов, ОбъектыПечати, ПараметрыВывода),, "Документ.ИНАГРО_ТТНВнутр.ПФ_MXL_Ф1_СГ", , Истина);
		
	КонецЕсли; 
	
		// Проверяем, нужно ли для макета формировать табличный документ.
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "Пропуск") Тогда		
		// Формируем табличный документ и добавляем его в коллекцию печатных форм.
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "Пропуск", НСтр("ru='Пропуск';uk='Пропуск'"), 
		ПечатьПропускФ196(МассивОбъектов, ОбъектыПечати, ПараметрыВывода),, "ОбщийМакет.ИНАГРО_ПФ_MXL_Пропуск_Ф196", , Истина);		
	КонецЕсли;
	
КонецПроцедуры

Функция ПечатьКраткая (МассивОбъектов, ОбъектыПечати, ПараметрыВывода)
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ИНАГРО_ТТНВнутр_Краткая";
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ИНАГРО_ТТНВнутр.ПФ_MXL_Краткая");
	
	// печать производится на языке, указанном в настройках
	КодЯзыкаПечать = ПараметрыВывода.КодЯзыкаДляМногоязычныхПечатныхФорм;
	Макет.КодЯзыкаМакета = КодЯзыкаПечать;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ИНАГРО_ТТНВнутр.Номер КАК НомерДок,
		|	ИНАГРО_ТТНВнутр.Дата КАК ДатаДок,
		|	ИНАГРО_ТТНВнутр.Вес КАК Вес,
		|	ИНАГРО_ТТНВнутр.ВесБрутто КАК ВесБрутто,
		|	ИНАГРО_ТТНВнутр.ВесБрутто1 КАК ВесБрутто1,
		|	ИНАГРО_ТТНВнутр.ВесНетто КАК ВесНетто,
		|	ИНАГРО_ТТНВнутр.ВесНетто1 КАК ВесНетто1,
		|	ИНАГРО_ТТНВнутр.ВесТары КАК ВесТары,
		|	ИНАГРО_ТТНВнутр.ВесТары1 КАК ВесТары1,
		|	ИНАГРО_ТТНВнутр.Владелец КАК Владелец,
		|	ИНАГРО_ТТНВнутр.ВидХранения КАК ВидХранения,
		|	ИНАГРО_ТТНВнутр.Урожай КАК Урожай,
		|	ИНАГРО_ТТНВнутр.Водитель КАК Водитель,
		|	ИНАГРО_ТТНВнутр.НомерТранспорта КАК Транспорт,
		|	ИНАГРО_ТТНВнутр.Склад КАК Склад,
		|	ИНАГРО_ТТНВнутр.НовыйСклад КАК НовыйСклад,
		|	&ТекущаяДата КАК ТекущаяДата,
		|	ИНАГРО_ТТНВнутр.Организация.НаименованиеПолное КАК Организация,
		|	ИНАГРО_ТТНВнутр.Номенклатура КАК Номенклатура,
		|	ИНАГРО_ТТНВнутрСписокНоменклатуры.Номенклатура КАК Номенклатура1,
		|	ИНАГРО_ТТНВнутрСписокНоменклатуры.Урожай КАК Урожай1,
		|	ИНАГРО_ТТНВнутрСписокНоменклатуры.Вес КАК Вес1,
		|	ИНАГРО_ТТНВнутрСписокНоменклатуры.НомерСтроки КАК Ном,
		|	ИНАГРО_ТТНВнутр.ВидОперации КАК ВидОперации,
		|	ИНАГРО_ТТНВнутр.ВремяВыбытия КАК ВремяВыбытия
		|ИЗ
		|	Документ.ИНАГРО_ТТНВнутр КАК ИНАГРО_ТТНВнутр
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ИНАГРО_ТТНВнутр.СписокНоменклатуры КАК ИНАГРО_ТТНВнутрСписокНоменклатуры
		|		ПО (ИНАГРО_ТТНВнутрСписокНоменклатуры.Ссылка = ИНАГРО_ТТНВнутр.Ссылка)
		|ГДЕ
		|	ИНАГРО_ТТНВнутр.Ссылка = &Ссылка";	
	
	ПервыйДокумент = Истина;	
	
	Для каждого Ссылка Из МассивОбъектов Цикл 
		
		Если Не ПервыйДокумент Тогда
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		// Запомним номер строки, с которой начали выводить текущий документ.
		НомерСтрокиНачало = ТабДокумент.ВысотаТаблицы + 1; 		
		
		Запрос.УстановитьПараметр("Ссылка",Ссылка);
		Запрос.УстановитьПараметр("ТекущаяДата",ТекущаяДата());
		Выборка = Запрос.Выполнить().Выбрать();
		Выборка.Следующий();
		Дата = Выборка.ДатаДок;
		
		ОблШапка = Макет.ПолучитьОбласть("Шапка");	
		ОблСтрока = Макет.ПолучитьОбласть("Строка");	
		ОблСтрокаДляНесколькихТМЦ = Макет.ПолучитьОбласть("СтрокаДляНесколькихТМЦ");	
		ОблИтог = Макет.ПолучитьОбласть("Итог");		
		
		ОблШапка.Параметры.Заполнить(Выборка);
		ОблШапка.Параметры.Владелец = Выборка.Владелец;
		ИНАГРО_Элеватор.ПолучитьНаименованияКонтрагента(ОблШапка.Параметры.Владелец);
		ВремяНачалаДняПриОтгрузке = ИНАГРО_Элеватор.ПолучитьПараметрУчетаЭлеватора(Дата, "ВремяНачалаДняПриОтгрузке", 0);
		Если ВремяНачалаДняПриОтгрузке <> 0 Тогда
			ОблШапка.Параметры.ДатаДок = Формат(Выборка.ВремяВыбытия, "ДФ='дд ММММ гггг';Л="+ Локализация.ОпределитьКодЯзыкаДляФормат(КодЯзыкаПечать));
		Иначе
			ОблШапка.Параметры.ДатаДок = Формат(Выборка.ДатаДок, "ДФ='дд ММММ гггг';Л="+ Локализация.ОпределитьКодЯзыкаДляФормат(КодЯзыкаПечать));
		КонецЕсли;
		
		КвоЭкземпляров = 1;
		СтруктураСохранения = ХранилищеОбщихНастроек.Загрузить("ИНАГРО_ТТНВнутр_Краткая");	
		Если СтруктураСохранения <> Неопределено Тогда
			КвоЭкземпляров = СтруктураСохранения.ВыбранноеКоличество; 
		КонецЕсли;
		
		Ном = 1;
		НовыйЛист = 1;
		Пока Ном <= КвоЭкземпляров Цикл
			Ном = Ном + 1;
			ТабДокумент.Вывести(ОблШапка);
			
			Если Выборка.ВидОперации = Перечисления.ИНАГРО_ВидыОперацийТТНВнутр.ПеремещениеФасованного Тогда
				Выборка.Сбросить();
				Пока Выборка.Следующий() Цикл 
					ОблСтрокаДляНесколькихТМЦ.Параметры.Заполнить(Выборка);	
					ТабДокумент.Вывести(ОблСтрокаДляНесколькихТМЦ);
				КонецЦикла;
			Иначе
				ОблСтрока.Параметры.Заполнить(Выборка);
				ТабДокумент.Вывести(ОблСтрока);
				ОблИтог.Параметры.Заполнить(Выборка);		
			КонецЕсли;
			ОблИтог.Параметры.Вес = Выборка.Вес;			
			ОблИтог.Параметры.ВесПрописью = ИНАГРО_Элеватор.ВернутьВесПрописью(КодЛокализации(), Выборка.Вес);
			ТабДокумент.Вывести(ОблИтог);
			НовыйЛист = НовыйЛист + 1;
			Если НовыйЛист >= 2 Тогда
				ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			КонецЕсли;
		КонецЦикла;	
		
		// В табличном документе зададим имя области, в которую был 
		// выведен объект. Нужно для возможности печати покомплектно.
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабДокумент, 
		НомерСтрокиНачало, ОбъектыПечати, Ссылка);
		
	КонецЦикла;
	
	Возврат ТабДокумент;
	
КонецФункции

Функция ПечатьФ1СГТТН(МассивОбъектов, ОбъектыПечати, ПараметрыВывода)
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ИНАГРО_ТТНВнутр_ПФ_MXL_Ф1_СГ";	
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ИНАГРО_ТТНВнутр.ПФ_MXL_Ф1_СГ");
	
	// печать производится на языке, указанном в настройках
	КодЯзыкаПечать = ПараметрыВывода.КодЯзыкаДляМногоязычныхПечатныхФорм;
	Макет.КодЯзыкаМакета = КодЯзыкаПечать; 	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ИНАГРО_ТТНВнутр.Организация.НаименованиеПолное КАК Организация,
		|	ИНАГРО_ТТНВнутр.Номер КАК НомерДок,
		|	ИНАГРО_ТТНВнутр.Дата КАК ДатаДок,
		|	ИНАГРО_ТТНВнутр.НомерТранспорта КАК НомерТранспорта,
		|	ИНАГРО_ТТНВнутр.Водитель КАК Водитель,
		|	ИНАГРО_ТТНВнутр.Владелец КАК Владелец,
		|	ИНАГРО_ТТНВнутр.Склад КАК Склад,
		|	ИНАГРО_ТТНВнутр.НовыйСклад КАК НовыйСклад,
		|	ИНАГРО_ТТНВнутр.Номенклатура.НаименованиеПолное КАК Номенклатура,
		|	ИНАГРО_ТТНВнутр.ВесТары КАК ВесТары,
		|	ИНАГРО_ТТНВнутр.ВесТары1 КАК ВесТары1,
		|	ИНАГРО_ТТНВнутр.ВесБрутто КАК ВесБрутто,
		|	ИНАГРО_ТТНВнутр.ВесБрутто1 КАК ВесБрутто1,
		|	ИНАГРО_ТТНВнутр.ВесВывоз КАК ВесВывоз,
		|	ИНАГРО_ТТНВнутр.ВесНетто КАК ВесНетто,
		|	ИНАГРО_ТТНВнутр.ВесНетто1 КАК ВесНетто1,
		|	ИНАГРО_ТТНВнутр.ВремяПрибытия КАК ВремяПрибытия,
		|	ИНАГРО_ТТНВнутр.ВремяВыбытия КАК ВремяВыбытия,
		|	ИНАГРО_ТТНВнутр.Владелец.КодПоЕДРПОУ КАК КодПоЕДРПОУ
		|ИЗ
		|	Документ.ИНАГРО_ТТНВнутр КАК ИНАГРО_ТТНВнутр
		|ГДЕ
		|	ИНАГРО_ТТНВнутр.Ссылка = &Ссылка"; 
	
	ПервыйДокумент = Истина;
	
	Для каждого Ссылка Из МассивОбъектов Цикл  
		
		Если Не ПервыйДокумент Тогда
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		// Запомним номер строки, с которой начали выводить текущий документ.
		НомерСтрокиНачало = ТабДокумент.ВысотаТаблицы + 1;
		
		Запрос.УстановитьПараметр("Ссылка",Ссылка);
		Выборка = Запрос.Выполнить().Выбрать();
		Выборка.Следующий();   			
		
		Шапка = Макет.ПолучитьОбласть("Шапка|Лист");	
		Шапка.Параметры.Заполнить(Выборка);
		Шапка.Параметры.Владелец = Выборка.Владелец;
		Шапка.Параметры.ВладелецКод = Выборка.КодПоЕДРПОУ;
		ИНАГРО_Элеватор.ПолучитьНаименованияКонтрагента(Шапка.Параметры.Владелец);
		ВремяНачалаДняПриОтгрузке = ИНАГРО_Элеватор.ПолучитьПараметрУчетаЭлеватора(Выборка.ДатаДок, "ВремяНачалаДняПриОтгрузке", 0);
		Если ВремяНачалаДняПриОтгрузке <> 0 Тогда
			Шапка.Параметры.ДатаДок = Формат(Выборка.ВремяВыбытия, "ДФ='дд ММММ гггг';Л="+ Локализация.ОпределитьКодЯзыкаДляФормат(КодЯзыкаПечать));
		Иначе	
			Шапка.Параметры.ДатаДок = Формат(Выборка.ДатаДок, "ДФ='дд ММММ гггг';Л="+ Локализация.ОпределитьКодЯзыкаДляФормат(КодЯзыкаПечать));	
		КонецЕсли;
		Шапка.Параметры.НомерТранспорта = Выборка.НомерТранспорта;
		Шапка.Параметры.Водитель = Выборка.Водитель;	
		Шапка.Параметры.ВесБрутто = Выборка.ВесБрутто+ Выборка.ВесБрутто1;
		Шапка.Параметры.ВесТары = Выборка.ВесТары + Выборка.ВесТары1;
		Шапка.Параметры.ВесНетто = Выборка.ВесНетто + Выборка.ВесНетто1;
		Ном = 1;
		
		КвоЭкземпляров = 1;
		СтруктураСохранения = ХранилищеОбщихНастроек.Загрузить("ИНАГРО_ТТНВнутр_Ф1_СГ");	
		Если СтруктураСохранения <> Неопределено Тогда
			КвоЭкземпляров = СтруктураСохранения.ВыбранноеКоличество; 
		КонецЕсли;
		
		Ном = 1;
		
		Пока Ном <= КвоЭкземпляров Цикл
			ТабДокумент.Вывести(Шапка);
			Ном = Ном + 1;
			Если Ном <= КвоЭкземпляров Тогда
				ТабДокумент.Присоединить(Шапка);
				Ном = Ном + 1;
			КонецЕсли;
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЦикла; 						
		
		ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
		ТабДокумент.ИмяПараметровПечати = "ИНАГРО_ТТНВнутр_ПФ_MXL_Ф1_СГ";
		
		// В табличном документе зададим имя области, в которую был 
		// выведен объект. Нужно для возможности печати покомплектно.
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабДокумент, 
		НомерСтрокиНачало, ОбъектыПечати, Ссылка); 
		
	КонецЦикла;
	
	Возврат ТабДокумент;
	
КонецФункции

Функция ПечатьНакладная (МассивОбъектов, ОбъектыПечати, ПараметрыВывода)
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ИНАГРО_ТТНВнутр_Накладная";
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ИНАГРО_ТТНВнутр.ПФ_MXL_Накладная");
	
	// печать производится на языке, указанном в настройках
	КодЯзыкаПечать = ПараметрыВывода.КодЯзыкаДляМногоязычныхПечатныхФорм;
	Макет.КодЯзыкаМакета = КодЯзыкаПечать; 		
	
	// Шапка
	ЗапросШапка = Новый Запрос;	
	ЗапросШапка.Текст = 
		"ВЫБРАТЬ
		|	ИНАГРО_ТТНВнутр.Организация.НаименованиеПолное КАК Организация,
		|	ИНАГРО_ТТНВнутр.Номер КАК НомерДок,
		|	ИНАГРО_ТТНВнутр.Дата КАК ДатаДок,
		|	ИНАГРО_ТТНВнутр.Склад КАК Склад,
		|	ИНАГРО_ТТНВнутр.НовыйСклад КАК НовыйСклад,
		|	ИНАГРО_ТТНВнутр.Владелец КАК Владелец,
		|	ИНАГРО_ТТНВнутр.ДоговорКонтрагента КАК ДоговорКонтрагента,
		|	ИНАГРО_ТТНВнутр.ЗачетныйВес КАК ЗачетныйВес,
		|	ИНАГРО_ТТНВнутр.ВидОперации КАК ВидОперации,
		|	ИНАГРО_ТТНВнутр.ВремяВыбытия КАК ВремяВыбытия,
		|	ИНАГРО_ТТНВнутр.Организация КАК ОрганизацияСсылка
		|ИЗ
		|	Документ.ИНАГРО_ТТНВнутр КАК ИНАГРО_ТТНВнутр
		|ГДЕ
		|	ИНАГРО_ТТНВнутр.Ссылка = &Ссылка"; 		
	
	ПервыйДокумент = Истина; 
	
	Для каждого Ссылка Из МассивОбъектов Цикл	
		
		Если Не ПервыйДокумент Тогда
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		// Запомним номер строки, с которой начали выводить текущий документ.
		НомерСтрокиНачало = ТабДокумент.ВысотаТаблицы + 1;
		
		ЗапросШапка.УстановитьПараметр("Ссылка",Ссылка);
		Шапка = ЗапросШапка.Выполнить().Выбрать();
		Шапка.Следующий();
		
		Руководители = ИНАГРО_Элеватор.ОтветственныеЛицаОрганизации(Шапка.ОрганизацияСсылка,Шапка.ДатаДок);		
		
		ОблШапки = Макет.ПолучитьОбласть("Шапка");	
		ОблШапки.Параметры.Заполнить(Шапка);	
		ВремяНачалаДняПриОтгрузке = ИНАГРО_Элеватор.ПолучитьПараметрУчетаЭлеватора(Шапка.ДатаДок, "ВремяНачалаДняПриОтгрузке", 0);
		Если ВремяНачалаДняПриОтгрузке <> 0 Тогда
			ОблШапки.Параметры.ДатаДок = Формат(Шапка.ВремяВыбытия, "ДФ='дд ММММ гггг';Л="+ Локализация.ОпределитьКодЯзыкаДляФормат(КодЯзыкаПечать));
		Иначе
			ОблШапки.Параметры.ДатаДок = Формат(Шапка.ДатаДок, "ДФ='дд ММММ гггг';Л="+ Локализация.ОпределитьКодЯзыкаДляФормат(КодЯзыкаПечать));
		КонецЕсли;
		ЗавСкладомСрез = РегистрыСведений.ОтветственныеЛица.СрезПоследних(Шапка.ДатаДок,Новый Структура ("СтруктурнаяЕдиница",Шапка.Склад));
		Если ЗавСкладомСрез.Количество()<>0 Тогда
			ОблШапки.Параметры.ЗавСкладом = ЗавСкладомСрез[0].ФизическоеЛицо;
		КонецЕсли;
		ЗавНовогоСкладаСрез = РегистрыСведений.ОтветственныеЛица.СрезПоследних(Шапка.ДатаДок,Новый Структура ("СтруктурнаяЕдиница",Шапка.НовыйСклад));
		Если ЗавНовогоСкладаСрез.Количество()<>0 Тогда
			ОблШапки.Параметры.ЗавНовымСкладом = ЗавНовогоСкладаСрез[0].ФизическоеЛицо;	
		КонецЕсли;
		ТабДокумент.Вывести(ОблШапки);  		
		
		// Строка	
		Если Шапка.ВидОперации = Перечисления.ИНАГРО_ВидыОперацийТТНВнутр.ПеремещениеФасованного Тогда
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("Ссылка",Ссылка);
			Запрос.Текст = 
				"ВЫБРАТЬ
				|	ИНАГРО_ТТНВнутрСписокНоменклатуры.Номенклатура КАК Номенклатура,
				|	ИНАГРО_ТТНВнутрСписокНоменклатуры.Вес КАК Вес,
				|	ИНАГРО_ТТНВнутр.Влажность КАК Влажность,
				|	ИНАГРО_ТТНВнутр.СорнаяПримесь КАК СорнаяПримесь,
				|	ИНАГРО_ТТНВнутр.ЗерноваяПримесь КАК ЗерноваяПримесь,
				|	ИНАГРО_ТТНВнутр.ЗачетныйВес КАК ЗачетныйВес
				|ИЗ
				|	Документ.ИНАГРО_ТТНВнутр.СписокНоменклатуры КАК ИНАГРО_ТТНВнутрСписокНоменклатуры
				|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ИНАГРО_ТТНВнутр КАК ИНАГРО_ТТНВнутр
				|		ПО ИНАГРО_ТТНВнутрСписокНоменклатуры.Ссылка = ИНАГРО_ТТНВнутр.Ссылка
				|ГДЕ
				|	ИНАГРО_ТТНВнутрСписокНоменклатуры.Ссылка = &Ссылка";
			ТабЧасть = Запрос.Выполнить().Выбрать();	
		Иначе
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("Ссылка",Ссылка);
			Запрос.Текст = 
				"ВЫБРАТЬ
				|	ИНАГРО_ТТНВнутр.Номенклатура КАК Номенклатура,
				|	ИНАГРО_ТТНВнутр.Вес КАК Вес,
				|	ИНАГРО_ТТНВнутр.Влажность КАК Влажность,
				|	ИНАГРО_ТТНВнутр.СорнаяПримесь КАК СорнаяПримесь,
				|	ИНАГРО_ТТНВнутр.ЗерноваяПримесь КАК ЗерноваяПримесь,
				|	ИНАГРО_ТТНВнутр.ЗачетныйВес КАК ЗачетныйВес
				|ИЗ
				|	Документ.ИНАГРО_ТТНВнутр КАК ИНАГРО_ТТНВнутр
				|ГДЕ
				|	ИНАГРО_ТТНВнутр.Ссылка = &Ссылка";
			ТабЧасть = Запрос.Выполнить().Выбрать();		
		КонецЕсли;
		
		ОблСтрока = Макет.ПолучитьОбласть("Строка");
		ЗачВес = 0;
		Пока ТабЧасть.Следующий()Цикл
			ОБлСтрока.Параметры.Заполнить(ТабЧасть);
			ДанныеОбъекта = Новый Структура ("Дата,ФизическийВес,ЗачетныйВес,Номенклатура,Организация,Владелец,ДоговорКонтрагента,Склад");
			ЗаполнитьЗначенияСвойств(ДанныеОбъекта,Ссылка);
			ДанныеОбъекта.Вставить("ФизическийВес",ТабЧасть.Вес);
			ДанныеОбъекта.Вставить("Влажность", Ссылка.Влажность);
			ДанныеОбъекта.Вставить("СорнаяПримесь", Ссылка.СорнаяПримесь);
			ДанныеОбъекта.Вставить("ЗерноваяПримесь", Ссылка.ЗерноваяПримесь);
			ДанныеОбъекта.Вставить("Ссылка",Ссылка);
			
			ЗачетныйВесРасчетный = ИНАГРО_Элеватор.ЗачетныйВесПриПроведении(ДанныеОбъекта);
			ОБлСтрока.Параметры.ЗачетныйВес = Шапка.ЗачетныйВес;
			ЗачВес = ЗачетныйВесРасчетный + ЗачВес;
			ТабДокумент.Вывести(ОблСтрока);
		КонецЦикла;
		// Итого зачетного веса
		ТЗ = Новый ТаблицаЗначений;
		ТЗ.Колонки.Добавить("ЗачВес");
		Стр = ТЗ.Добавить();
		Стр.ЗачВес = ЗачВес;
		Итого = ТЗ.Итог("ЗачВес");
		
		// Дно
		ОблДно = Макет.ПолучитьОбласть("Дно");
		ОблДно.Параметры.ВесИтого = Запрос.Выполнить().Выгрузить().Итог("Вес");
		ОблДно.Параметры.ЗачетныйВесИтого = Итого;
		ОблДно.Параметры.НачальникВТЛ = Руководители.НачальникВТЛ;
		ДиректорСрез = РегистрыСведений.ОтветственныеЛицаОрганизаций.СрезПоследних(Шапка.ДатаДок, Новый Структура("СтруктурнаяЕдиница, ОтветственноеЛицо",Шапка.ОрганизацияСсылка,Перечисления.ОтветственныеЛицаОрганизаций.Руководитель));
		Если ДиректорСрез.Количество()<>0 Тогда
			ОблДно.Параметры.ФИОДиректора = ДиректорСрез[0].ФизическоеЛицо;
		КонецЕсли;
		ТабДокумент.Вывести(ОблДно);	
		
		// Разделитель
		ОблРазделитель = Макет.ПолучитьОбласть("Разделитель");
		ТабДокумент.Вывести(ОблРазделитель);
		
		// В табличном документе зададим имя области, в которую был 
		// выведен объект. Нужно для возможности печати покомплектно.
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабДокумент, 
		НомерСтрокиНачало, ОбъектыПечати, Ссылка); 
		
	КонецЦикла;
	
	Возврат ТабДокумент;
	
КонецФункции

Функция ПечатьПропускФ196(МассивОбъектов, ОбъектыПечати, ПараметрыВывода)
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ИНАГРО_ТТНВнутр_Пропуск";
	
	Макет = ПолучитьОбщийМакет("ИНАГРО_ПФ_MXL_Пропуск_Ф196");
	
	КодЯзыкаПечать = ПараметрыВывода.КодЯзыкаДляМногоязычныхПечатныхФорм;
	Макет.КодЯзыкаМакета = КодЯзыкаПечать;
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	
	ПервыйДокумент = Истина;
	
	ЗапросШапка = Новый Запрос;
	ЗапросШапка.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ИНАГРО_ТТНВнутр.Ссылка,
		|	ИНАГРО_ТТНВнутр.ВерсияДанных,
		|	ИНАГРО_ТТНВнутр.ПометкаУдаления,
		|	ИНАГРО_ТТНВнутр.Номер,
		|	ИНАГРО_ТТНВнутр.Дата,
		|	ИНАГРО_ТТНВнутр.Проведен,
		|	ИНАГРО_ТТНВнутр.Вес,
		|	ИНАГРО_ТТНВнутр.ВесБрутто,
		|	ИНАГРО_ТТНВнутр.ВесНетто,
		|	ИНАГРО_ТТНВнутр.Весовщик,
		|	ИНАГРО_ТТНВнутр.ВесТары,
		|	ИНАГРО_ТТНВнутр.ВидХранения,
		|	ИНАГРО_ТТНВнутр.Владелец,
		|	ИНАГРО_ТТНВнутр.Влажность,
		|	ИНАГРО_ТТНВнутр.ВремяВыбытия,
		|	ИНАГРО_ТТНВнутр.ВремяПрибытия,
		|	ИНАГРО_ТТНВнутр.ДоговорКонтрагента,
		|	ИНАГРО_ТТНВнутр.ЗачетныйВес,
		|	ИНАГРО_ТТНВнутр.ЗерноваяПримесь,
		|	ИНАГРО_ТТНВнутр.Комментарий,
		|	ИНАГРО_ТТНВнутр.ЛабораторныйАнализ,
		|	ИНАГРО_ТТНВнутр.МестоХранения,
		|	ИНАГРО_ТТНВнутр.Номенклатура,
		|	ИНАГРО_ТТНВнутр.НомерАнализа,
		|	ИНАГРО_ТТНВнутр.ОписаниеДвиженияФормы36,
		|	ИНАГРО_ТТНВнутр.Организация,
		|	ИНАГРО_ТТНВнутр.Ответственный,
		|	ИНАГРО_ТТНВнутр.Склад,
		|	ИНАГРО_ТТНВнутр.СорнаяПримесь,
		|	ИНАГРО_ТТНВнутр.УдалитьЕдиницаИзмерения,
		|	ИНАГРО_ТТНВнутр.Урожай,
		|	ИНАГРО_ТТНВнутр.Представление,
		|	ИНАГРО_ТТНВнутр.МоментВремени,
		|	ИНАГРО_ТТНВнутр.Организация.НаименованиеПолное,
		|	ИНАГРО_ТТНВнутр.Организация.Наименование,
		|	ИНАГРО_ТТНВнутр.Владелец.Наименование,
		|	ИНАГРО_ТТНВнутр.ВесВывоз,
		|	ИНАГРО_ТТНВнутр.НомерТранспорта,
		|	ИНАГРО_ТТНВнутр.НомерПрицепа,
		|	ИНАГРО_ТТНВнутр.Прицеп,
		|	ИНАГРО_ТТНВнутр.Силос,
		|	ИНАГРО_ТТНВнутр.ПриказНаПеремещение,
		|	ИНАГРО_ТТНВнутр.ВидОперации
		|ИЗ
		|	Документ.ИНАГРО_ТТНВнутр КАК ИНАГРО_ТТНВнутр
		|ГДЕ
		|	ИНАГРО_ТТНВнутр.Ссылка В(&Ссылка)";   
	
	ЗапросТЧ = Новый Запрос;
	ЗапросТЧ.Текст = 	
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ИНАГРО_ТТНВнутрСписокНоменклатуры.Номенклатура,
		|	ИНАГРО_ТТНВнутрСписокНоменклатуры.НоваяНоменклатура,
		|	ИНАГРО_ТТНВнутрСписокНоменклатуры.ВидФасовки,
		|	ИНАГРО_ТТНВнутрСписокНоменклатуры.Количество,
		|	ИНАГРО_ТТНВнутрСписокНоменклатуры.Вес,
		|	ИНАГРО_ТТНВнутрСписокНоменклатуры.Урожай,
		|	ИНАГРО_ТТНВнутрСписокНоменклатуры.НовыйУрожай,
		|	ИНАГРО_ТТНВнутрСписокНоменклатуры.НовыйСчетУчетаБУ
		|ИЗ
		|	Документ.ИНАГРО_ТТНВнутр.СписокНоменклатуры КАК ИНАГРО_ТТНВнутрСписокНоменклатуры
		|ГДЕ
		|	ИНАГРО_ТТНВнутрСписокНоменклатуры.Ссылка = &Ссылка";
	
	Для каждого  Ссылка ИЗ МассивОбъектов Цикл 		
		ТабДокумент = Новый ТабличныйДокумент; 
		ЗапросШапка.УстановитьПараметр("Ссылка",Ссылка);
		Шапка = ЗапросШапка.Выполнить().Выбрать();
		Шапка.Следующий();
		
		ЗапросТЧ.УстановитьПараметр("Ссылка",Ссылка);
		
		Если Не ПервыйДокумент Тогда
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		// Запомним номер строки, с которой начали выводить текущий документ.
		НомерСтрокиНачало = ТабДокумент.ВысотаТаблицы + 1;
		
		КвоЭкземпляров = 2;
		СтруктураСохранения = ХранилищеОбщихНастроек.Загрузить("ИНАГРО_ТТНВнутр_Пропуск");	
		Если СтруктураСохранения <> Неопределено Тогда
			КвоЭкземпляров = СтруктураСохранения.ВыбранноеКоличество; 
		КонецЕсли;
		
		Если КвоЭкземпляров > 1 Тогда
			КвоЭкземпляровНаСтраницу = 2;
		Иначе 
			КвоЭкземпляровНаСтраницу = 1;
		КонецЕсли; 		
		
		ОблОбщая = Макет.ПолучитьОбласть("Общая|Лист");
		
		ОблШапка = Макет.ПолучитьОбласть("Шапка|Лист");
		
		ОблШапка.Параметры.Организация = Шапка.Организация.Наименование;
		ОблШапка.Параметры.ЕДРПУ = Шапка.Организация.КодПоЕДРПОУ;
		ОблШапка.Параметры.НомерДок = Шапка.Номер;
		Если ЗначениеЗаполнено(Шапка.НомерПрицепа) Тогда
			ОблШапка.Параметры.ВодительАвтомобиль = "автомобілю № " + Строка(Шапка.НомерТранспорта) + " прицепу № " + Строка(Шапка.НомерПрицепа);
		Иначе
			ОблШапка.Параметры.ВодительАвтомобиль = "автомобілю № " + Строка(Шапка.НомерТранспорта);
		КонецЕсли;	
		ВремяНачалаДня = ИНАГРО_Элеватор.ПолучитьПараметрУчетаЭлеватора(Шапка.Дата, "ВремяНачалаДня", 0);
		Если ВремяНачалаДня > 0 Тогда
			ОблШапка.Параметры.ДатаДок = Формат(Шапка.ВремяВыбытия, "ДФ='дд ММММ гггг р.';Л="+ Локализация.ОпределитьКодЯзыкаДляФормат(КодЯзыкаПечать)) + "  " + Формат(ТекущаяДата(), "ДФ='H:мм:сс'");
		Иначе	
			ОблШапка.Параметры.ДатаДок = Формат(Шапка.Дата, "ДФ='дд ММММ гггг р.';Л="+ Локализация.ОпределитьКодЯзыкаДляФормат(КодЯзыкаПечать)) + "  " + Формат(ТекущаяДата(), "ДФ='H:мм:сс'");
		КонецЕсли;
		ОблШапка.Параметры.Кому = Шапка.Владелец.Наименование;
		Если ЗначениеЗаполнено(Шапка.ПриказНаПеремещение) Тогда
			ОблШапка.Параметры.НомНаказу = Шапка.ПриказНаПеремещение.Номер;
			ОблШапка.Параметры.ДатаПриказа = Формат(Шапка.ПриказНаПеремещение.Дата, "ДФ='дд.ММ.гггг р.'");
		КонецЕсли;
		
		ОблСтрока = Макет.ПолучитьОбласть("Строка|Лист");
		Если Шапка.ВидОперации = Перечисления.ИНАГРО_ВидыОперацийТТНВывоз.ВывозФасованного Тогда
			СписокНоменклатуры = ЗапросТЧ.Выполнить().Выгрузить();
			Для Каждого СтрокаТЧ Из СписокНоменклатуры Цикл
				ОблСтрока.Параметры.Ном				= СтрокаТЧ.НомерСтроки;
				ОблСтрока.Параметры.Номенклатура	= СтрокаТЧ.Номенклатура;	
				ОблСтрока.Параметры.Вес				= СтрокаТЧ.Вес;	
				ВывестиОбластьПропуска(ТабДокумент, ОблСтрока, КвоЭкземпляровНаСтраницу, КвоЭкземпляров);			
			КонецЦикла;
		Иначе
			ОблСтрока.Параметры.Ном				= 1;
			ОблСтрока.Параметры.Номенклатура	= Шапка.Номенклатура;	
			ОблСтрока.Параметры.Вес				= Шапка.ВесВывоз;	
		КонецЕсли;
		
		ОблДно = Макет.ПолучитьОбласть("Дно|Лист");
		ОблДно.Параметры.ВесПрописью = ИНАГРО_Элеватор.ВернутьВесПрописью(КодЯзыкаПечать, Шапка.Вес);
		
		Отбор = Новый Структура("СтруктурнаяЕдиница");
		Отбор.СтруктурнаяЕдиница = Шапка.Склад;
		СрезПоследних   = РегистрыСведений.ОтветственныеЛица.СрезПоследних(Шапка.Дата, Отбор);
		Если СрезПоследних.Количество() < 1 Тогда
		Иначе
			ОблДно.Параметры.ЗавСкладом = СрезПоследних[0].ФизическоеЛицо;
		КонецЕсли;
		
		Если Шапка.ВидОперации = Перечисления.ИНАГРО_ВидыОперацийТТНВывоз.ВывозФасованного Тогда
			ВывестиОбластьПропуска(ТабДокумент, ОблДно, КвоЭкземпляровНаСтраницу, КвоЭкземпляров);
		КонецЕсли;
		
		Если Шапка.ВидОперации = Перечисления.ИНАГРО_ВидыОперацийТТНВывоз.ВывозФасованного Тогда
			
		Иначе 		
			ЗаполнитьЗначенияСвойств(ОблОбщая.Параметры, ОблШапка.Параметры);
			ЗаполнитьЗначенияСвойств(ОблОбщая.Параметры, ОблСтрока.Параметры);
			ЗаполнитьЗначенияСвойств(ОблОбщая.Параметры, ОблДно.Параметры);
			ВывестиОбластьПропуска(ТабДокумент, ОблОбщая, КвоЭкземпляровНаСтраницу,КвоЭкземпляров);
		КонецЕсли;
		
		ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
		ТабДокумент.ИмяПараметровПечати = "ИНАГРО_ТТНВнутр_Пропуск_Ф196"; 		
		
	КонецЦикла;
	
	Возврат ТабДокумент;
			
КонецФункции

Процедура ВывестиОбластьПропуска(ТабДокумент, Область, КвоЭкземпляровНаСтраницу, КвоЭкземпляров)
	
	Ном = 1;
	Пока Ном <= КвоЭкземпляров Цикл
		Если (Цел(Ном/КвоЭкземпляровНаСтраницу) - Ном/КвоЭкземпляровНаСтраницу) <> 0 Или Ном = 1 Тогда
			ТабДокумент.Вывести(Область);
		Иначе 
			ТабДокумент.Присоединить(Область);
		КонецЕсли;				
		Ном = Ном + 1;
	КонецЦикла;	
		
КонецПроцедуры

Функция ПолучитьДополнительныеРеквизитыДляРеестра() Экспорт
	
	Результат = Новый Структура;	
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти 

#Область ОбработчикиСобытий

Процедура ОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка)
	
	Если ВидФормы <> "ФормаДокумента"
		И ВидФормы <> "ФормаОбъекта" Тогда
		Возврат;
	КонецЕсли;
	
	ВидОперации = Неопределено; 
	
	Если Параметры.Свойство("Ключ") И ЗначениеЗаполнено(Параметры.Ключ) Тогда
		ВидОперации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Параметры.Ключ, "ВидОперации");
	КонецЕсли;
	
	// Если документ копируется, то вид формы получаем из копируемого документа.
	Если НЕ ЗначениеЗаполнено(ВидОперации) Тогда
		Если Параметры.Свойство("ЗначениеКопирования")
			И ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
			ВидОперации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
			Параметры.ЗначениеКопирования, "ВидОперации");
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ВидОперации) Тогда
		Если Параметры.Свойство("ЗначенияЗаполнения") 
			И ТипЗнч(Параметры.ЗначенияЗаполнения) = Тип("Структура") Тогда
			Если Параметры.ЗначенияЗаполнения.Свойство("ВидОперации") Тогда
				ВидОперации = Параметры.ЗначенияЗаполнения.ВидОперации;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ВидОперации) Тогда
		Если Параметры.Свойство("Основание")
			И ЗначениеЗаполнено(Параметры.Основание) Тогда
			ВидОперации = ОпределитьВидОперацииПоДокументуОснованию(Параметры.Основание);
		КонецЕсли;
	КонецЕсли;  
	
	СтандартнаяОбработка = Ложь;
	ФормыИНАГРО_ТТНВнутр = ПолучитьСоответствиеВидовОперацийФормам();
	ВыбраннаяФорма = ФормыИНАГРО_ТТНВнутр[ВидОперации];
	Если ВыбраннаяФорма = Неопределено Тогда
		ВыбраннаяФорма = "ФормаДокумента";
	КонецЕсли;
	
КонецПроцедуры 

#КонецОбласти

#Область ПрограммныйИнтерфейс

// Заполняет счета учета номенклатуры в табличной части документа
//
// Параметры:
// Объект - СправочникСсылка - объект контактной информации
// ИмяТабличнойЧасти - имя табличной части
// СобственноеПодразделение - собственное подразделение.
//
Процедура ЗаполнитьСчетаУчетаВТабличнойЧасти(Объект, ИмяТабличнойЧасти, СобственноеПодразделение) Экспорт

	ТабличнаяЧасть = Объект[ИмяТабличнойЧасти];
	
	ДанныеОбъекта = Новый Структура(
		"Дата, Организация, Владелец,
		|Склад, ОтражатьВБухгалтерскомУчете");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	ДанныеОбъекта.Вставить("СобственноеПодразделение", СобственноеПодразделение);

	СведенияОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОНоменклатуре(
		Объект.Номенклатура, ДанныеОбъекта);
	
	Для Каждого СтрокаТабличнойЧасти Из ТабличнаяЧасть Цикл
		ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(ДанныеОбъекта, СтрокаТабличнойЧасти, СведенияОНоменклатуре);
	КонецЦикла;

КонецПроцедуры

// Заполняет сведения о номенклатуре в строке табличной части документа
//
// Параметры:
//  ДанныеОбъекта         - структура данных объекта, используемых при заполнении счетов учета (вид операции,
//                          вид договора контрагента, признак комиссионной торговли и т.п.)
//  СтрокаТабличнойЧасти  - Строка - строка табличной части документа
//  СведенияОНоменклатуре - Структура - структура сведений о номенклатуре, либо структура счетов учета.
//
Процедура ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(ДанныеОбъекта, СтрокаТабличнойЧасти, СведенияОНоменклатуре) Экспорт
	
	Если СведенияОНоменклатуре = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если СведенияОНоменклатуре.Свойство("СчетаУчета") Тогда
		// СведенияОНоменклатуре - структура сведений номенклатуры
		СчетаУчета = СведенияОНоменклатуре.СчетаУчета;
	ИначеЕсли СведенияОНоменклатуре.Свойство("СчетУчетаБУ") Тогда
		// СведенияОНоменклатуре - структура счетов учета номенклатуры
		СчетаУчета = СведенияОНоменклатуре;
	Иначе
		Возврат;
	КонецЕсли;

	Если ДанныеОбъекта.ОтражатьВБухгалтерскомУчете Тогда
		
		Если ИНАГРО_Элеватор.ОпределитьПринадлежностьКонтрагента(ДанныеОбъекта.Владелец) Тогда
			СтрокаТабличнойЧасти.СчетУчетаБУ = СчетаУчета.СчетУчетаБУ;				
		Иначе
			СтрокаТабличнойЧасти.СчетУчетаБУ = СчетаУчета.СчетУчетаДоп;				
		КонецЕсли;
		
		СтрокаТабличнойЧасти.НовыйСчетУчетаБУ = СтрокаТабличнойЧасти.СчетУчетаБУ;		
		
	Иначе
		
		СтрокаТабличнойЧасти.СчетУчетаБУ      = ПланыСчетов.Хозрасчетный.ПустаяСсылка();	
		СтрокаТабличнойЧасти.НовыйСчетУчетаБУ = ПланыСчетов.Хозрасчетный.ПустаяСсылка();		
		
	КонецЕсли;	

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПолучитьСоответствиеВидовОперацийФормам() Экспорт

	ФормыИНАГРО_ТТНВнутр = Новый Соответствие;
	
	ФормыИНАГРО_ТТНВнутр.Вставить(Перечисления.ИНАГРО_ВидыОперацийТТНВнутр.Перемещение,            "ФормаДокументаОбщая");
	ФормыИНАГРО_ТТНВнутр.Вставить(Перечисления.ИНАГРО_ВидыОперацийТТНВнутр.ПеремещениеФасованного, "ФормаДокументаОбщая");
	ФормыИНАГРО_ТТНВнутр.Вставить(Перечисления.ИНАГРО_ВидыОперацийТТНВнутр.Перевес,                "ФормаДокументаОбщая");
	ФормыИНАГРО_ТТНВнутр.Вставить(Перечисления.ИНАГРО_ВидыОперацийТТНВнутр.Перевзвешивание,        "ФормаДокументаОбщая");
	ФормыИНАГРО_ТТНВнутр.Вставить(Перечисления.ИНАГРО_ВидыОперацийТТНВнутр.Пересортица,            "ФормаДокументаОбщая");
	
	Возврат ФормыИНАГРО_ТТНВнутр;

КонецФункции 

Функция ОпределитьВидОперацииПоДокументуОснованию(Основание) Экспорт

	Результат = Перечисления.ИНАГРО_ВидыОперацийТТНВнутр.Перемещение;
	
	Возврат Результат;

КонецФункции

Функция ПолучитьФиксированныйМассивВидовОпераций() Экспорт

	МассивВидовОпераций = Новый Массив;
	СписокВидовОпераций = Новый СписокЗначений;
	
	ЗначенияПеречисления = Метаданные.Перечисления.ИНАГРО_ВидыОперацийТТНВнутр.ЗначенияПеречисления;
	Для Каждого ЗначениеПеречисления Из ЗначенияПеречисления Цикл
		ТекущийВидОперации = Перечисления.ИНАГРО_ВидыОперацийТТНВнутр[ЗначениеПеречисления.Имя];
		МассивВидовОпераций.Добавить(ТекущийВидОперации);
	КонецЦикла;
	
	Возврат Новый ФиксированныйМассив(МассивВидовОпераций);

КонецФункции
	
Процедура ЗаписатьВыбранноеКоличество(РезультатЗакрытия, Идентификатор = "") Экспорт
	
	СтруктураСохранения = Новый Структура("ВыбранноеКоличество", РезультатЗакрытия); 	
	ХранилищеОбщихНастроек.Сохранить("ИНАГРО_ТТНВнутр_" + Идентификатор, , СтруктураСохранения);
	
КонецПроцедуры 

#КонецОбласти 

#КонецЕсли