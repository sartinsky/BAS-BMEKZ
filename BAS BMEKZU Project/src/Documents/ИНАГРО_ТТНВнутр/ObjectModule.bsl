#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда  

#Область ОбработчикиСобытий

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	ТипДанныхЗаполнения = ТипЗнч(ДанныеЗаполнения);
	
	ИНАГРО_ЭлеваторЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект);

	ЗаполнениеДокументов.Заполнить(ЭтотОбъект, ДанныеЗаполнения); 
	
	Если ТипДанныхЗаполнения = Тип("Структура") Тогда
		Если ДанныеЗаполнения.Свойство("ВидОперации") Тогда
			ВидОперации = ДанныеЗаполнения.ВидОперации;
		КонецЕсли;
		Если  ДанныеЗаполнения.Свойство("Ссылка")
			И ТипЗнч(ДанныеЗаполнения.Ссылка) = Тип("ДокументСсылка.ИНАГРО_ПриказНаПеремещение")
			И ДанныеЗаполнения.Свойство("Номенклатура") Тогда
			ЗаполнитьПоДокументуОснованию(ДанныеЗаполнения);
		КонецЕсли;
	КонецЕсли;
	
	Перевес = Ложь;	
	
	Если ИНАГРО_Элеватор.ОпределитьПринадлежностьКонтрагента(Владелец) Тогда
		ОтражатьПоЗатратам = Истина;
	Иначе
		ОтражатьПоЗатратам = Ложь;
	КонецЕсли;
	
	ВидЖурнала    = Перечисления.ИНАГРО_ВидыЖурналов.ЖурналВесовой;
	//ВидЖурналаВвоз     = Перечисления.ИНАГРО_ВидыЖурналов.ЖурналВесовой;

	ИНАГРО_ЭлеваторЗаполнениеДокументов.ЗаполнитьТипНомерЖурналаВесовой(ЭтотОбъект);		
	
	ВремяПрибытияВывоз = ТекущаяДата();
  	ВремяВыбытияВывоз  = ТекущаяДата();
	ВремяПрибытия      = ТекущаяДата();
  	ВремяВыбытия       = ТекущаяДата();	
			
	Весовщик           = Пользователи.ТекущийПользователь(); 
			
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	МассивНепроверяемыхРеквизитов = Новый Массив; 	
	
	Если ВидОперации = Перечисления.ИНАГРО_ВидыОперацийТТНВнутр.ПеремещениеФасованного Тогда
		
		МассивНепроверяемыхРеквизитов.Добавить("Номенклатура");
		МассивНепроверяемыхРеквизитов.Добавить("НоваяНоменклатура");
		МассивНепроверяемыхРеквизитов.Добавить("Урожай");	
		МассивНепроверяемыхРеквизитов.Добавить("НовыйУрожай");
		
	Иначе
		
		МассивНепроверяемыхРеквизитов.Добавить("СписокНоменклатуры.Номенклатура");
		МассивНепроверяемыхРеквизитов.Добавить("СписокНоменклатуры.НоваяНоменклатура");
		МассивНепроверяемыхРеквизитов.Добавить("СписокНоменклатуры.Урожай");	
		МассивНепроверяемыхРеквизитов.Добавить("СписокНоменклатуры.НовыйУрожай");
		МассивНепроверяемыхРеквизитов.Добавить("СписокНоменклатуры.Вес");
				
	КонецЕсли;
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);	

КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	 		
	Если ОбменДанными.Загрузка Тогда		
		Возврат;		
	КонецЕсли;		
	
	Если ЭтоНовый() Тогда
		
		ВремяНачалаДняПриОтгрузке = ИНАГРО_Элеватор.ПолучитьПараметрУчетаЭлеватора(Дата, "ВремяНачалаДняПриОтгрузке", 0);
				
		Дата = Дата + 60 * 60 * ВремяНачалаДняПриОтгрузке; 

	КонецЕсли;	
		
	Если ЗначениеЗаполнено(ТипЖурналаВвоз) Тогда
		
		Отбор = Новый Структура("ВидЖурнала, ТипЖурнала", ВидЖурнала, ТипЖурналаВвоз);
		
		ИНАГРО_Элеватор.ЗаписатьОчереднойНомер(Отбор, НомерЖурналаВвоз);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТипЖурналаВывоз) Тогда
		
		Отбор = Новый Структура("ВидЖурнала, ТипЖурнала", ВидЖурнала, ТипЖурналаВывоз);
		
		ИНАГРО_Элеватор.ЗаписатьОчереднойНомер(Отбор, НомерЖурналаВывоз);	
		
	КонецЕсли;
	
	Если ВидОперации <> Перечисления.ИНАГРО_ВидыОперацийТТНВнутр.ПеремещениеФасованного Тогда
		
		СписокНоменклатуры.Очистить();
		
		НоваяСтрока = СписокНоменклатуры.Добавить();
		НоваяСтрока.Номенклатура      = Номенклатура;
		НоваяСтрока.НоваяНоменклатура = НоваяНоменклатура;
		НоваяСтрока.Урожай            = Урожай;
		НоваяСтрока.НовыйУрожай       = НовыйУрожай;
		НоваяСтрока.Вес               = ВесВывоз;
		
	КонецЕсли;	
	
КонецПроцедуры 

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	Перем Заголовок, СтруктураШапкиДокумента;
	Перем ТаблицаПоКультурам;
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКПроведению(ЭтотОбъект);
		   
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначенияБПВызовСервера.ПредставлениеДокументаПриПроведении(Ссылка);
	
	ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента);	

	Если ЗначениеЗаполнено(МестоХранения) И МестоХранения.Владелец <> Склад Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Место хранения %2 не принадлежит складу %1!';uk='Місце зберігання %2 не належить складу %1!'"), Склад, МестоХранения);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , , , Отказ);
	КонецЕсли;			
		
	// Движения по документу
	Если НЕ Отказ Тогда		
		ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоКультурам, Отказ, Заголовок);
	КонецЕсли; 		
	
	Движения.Хозрасчетный.ВыполнитьДействияПередЗаписьюДвижений();

	ПроведениеСервер.ПодготовитьНаборыЗаписейКЗаписиДвижений(ЭтотОбъект); 	

КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКОтменеПроведения(ЭтотОбъект);
	Движения.Записать();
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)

	Дата = НачалоДня(ОбщегоНазначения.ТекущаяДатаПользователя());
	Ответственный = Пользователи.ТекущийПользователь();
	
	ИНАГРО_ЭлеваторЗаполнениеДокументов.ЗаполнитьТипНомерЖурналаВесовой(ЭтотОбъект);		
	
	ВесБрутто        = 0; 
	ВесБрутто1       = 0;
	ВесТары          = 0;	 
	ВесТары1         = 0;
	ВесНетто         = 0;
	ВесНетто1        = 0;	
	ЗачетныйВес      = 0;
	Вес              = 0;
	
	ВесБруттоВывоз   = 0; 
	ВесБрутто1Вывоз  = 0;
	ВесТарыВывоз     = 0;	 
	ВесТары1Вывоз    = 0;
	ВесНеттоВывоз    = 0;
	ВесНетто1Вывоз   = 0;	
	ЗачетныйВесВывоз = 0;
	ВесВывоз         = 0;
	
	ЛабораторныйАнализ = Документы.ИНАГРО_ЛабораторныйАнализ.ПустаяСсылка();
	
КонецПроцедуры

#КонецОбласти

#Область Проведение

// Процедура формирует структуру шапки документа и дополнительных полей.
//
Процедура ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента) Экспорт

	// Дерево значений, содержащее имена необходимых полей в запросе по шапке.
	Перем ДеревоПолейЗапросаПоШапке;	
	
	СтруктураШапкиДокумента   = ОбщегоНазначенияРед12.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	
	// Заполним по шапке документа дерево параметров, нужных при проведении.
	ДеревоПолейЗапросаПоШапке = ОбщегоНазначенияРед12.СформироватьДеревоПолейЗапросаПоШапке(); 	
	
	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа.
	СтруктураШапкиДокумента = УправлениеЗапасами.СформироватьЗапросПоДеревуПолей(ЭтотОбъект, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, "");

КонецПроцедуры

// Процедура выполняет движения по регистрам
//
Процедура ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоКультурам, Отказ, Заголовок)
	
	ФормируетРеестр = Истина;
	
	// Лабораторный анализ
	Если ЗначениеЗаполнено(НомерАнализа) Тогда
		СтруктураШапкиДокумента.Вставить("НомерАнализа", НомерАнализа);
	КонецЕсли;
	
	Если ИНАГРО_Элеватор.ПолучитьПараметрУчетаЭлеватора(Дата,"ЛабораторияРаботаетВСистеме", Истина) 
		И ЗначениеЗаполнено(ЛабораторныйАнализ) Тогда
		СтруктураШапкиДокумента.Вставить("ЛабораторныйАнализ", ЛабораторныйАнализ);
	КонецЕсли;
	
	Если  ВидОперации = Перечисления.ИНАГРО_ВидыОперацийТТНВнутр.ПеремещениеФасованного
		И СписокНоменклатуры.Итог("Вес") > 0 Тогда
		
		ПодготовитьТаблицуПоКультурам(СтруктураШапкиДокумента, ТаблицаПоКультурам, Отказ, Заголовок);			
		
		Если НЕ Отказ Тогда 
			
			ФормируетРеестр = Ложь;
			
			ТаблицаПоКультурам.Колонки.Добавить("КоличествоМест");                               
			ТаблицаПоКультурам.ЗаполнитьЗначения(0, "КоличествоМест");
			ПроводкиПоРегистрамЭлеватора(РежимПроведенияДокумента, СтруктураШапкиДокумента, ТаблицаПоКультурам, Отказ, Заголовок);
			
		КонецЕсли;
		
	ИначеЕсли ВидОперации = Перечисления.ИНАГРО_ВидыОперацийТТНВнутр.ПеремещениеФасованного
		И СписокНоменклатуры.Итог("Вес") <= 0 Тогда
		
		ТекстСообщения = НСтр("ru='В табличной части ""Список культур"" не заполнены значения веса!';uk='У табличній частині ""Список культур"" не заповнені значення ваги!'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , , ,Отказ);						
		
	Иначе
		// Если вид операции Ввоз проверка возможности проведения по весу	
		// Для автомобиля вывоз		
		Если ВесБруттоВывоз = 0 Тогда			
			ТекстСообщения = НСтр("ru='Нет значения веса брутто на вывоз!';uk='Немає значення ваги брутто на вивезення!'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Объект.ВесБруттоВывоз", , Отказ);						
		КонецЕсли;
		
		Если ВесТарыВывоз = 0 Тогда			
			ТекстСообщения = НСтр("ru='Нет значения веса тары на вывоз!';uk='Немає значення ваги тари на вивезення!'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Объект.ВесТарыВывоз", , Отказ);
		КонецЕсли;
		
		// Для автомобиля ввоз
		Если ВесБрутто + ВесТары > 0  Тогда
			
			Если ВесБруттоВывоз = 0 Тогда			
				ТекстСообщения = НСтр("ru='Нет значения веса брутто на ввоз!';uk='Немає значення ваги брутто на ввезення!'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Объект.ВесБруттоВывоз", , Отказ);						
			КонецЕсли;
			
			Если ВесТарыВывоз = 0 Тогда			
				ТекстСообщения = НСтр("ru='Нет значения веса тары на ввоз!';uk='Немає значення ваги тари на ввезення!'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Объект.ВесТарыВывоз", , Отказ);
			КонецЕсли;
			
		КонецЕсли;
		
		// Для прицепа вывоз
		Если ВесБрутто1Вывоз + ВесТары1Вывоз > 0 Тогда
			
			Если ВесБрутто1Вывоз = 0 Тогда			
				ТекстСообщения = НСтр("ru='Нет значения веса брутто на вывоз для прицепа!';uk='Немає значення ваги брутто на вивезення для причепа!'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Объект.ВесБрутто1Вывоз", , Отказ);						
			КонецЕсли;
			
			Если ВесТары1Вывоз = 0 Тогда			
				ТекстСообщения = НСтр("ru='Нет значения веса тары на вывоз для прицепа!';uk='Немає значення ваги тари на вивезення для причепа!'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Объект.ВесТары1Вывоз", , Отказ);
			КонецЕсли;
			
		КонецЕсли;
		
		// Для прицепа на ввоз
		Если ВесБрутто1 + ВесТары1 > 0 Тогда
			
			Если ВесБрутто1 = 0 Тогда			
				ТекстСообщения = НСтр("ru='Нет значения веса брутто на ввоз для прицепа!';uk='Немає значення ваги брутто на ввезення для причепа!'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Объект.ВесБрутто1", , Отказ);						
			КонецЕсли;
			
			Если ВесТары1 = 0 Тогда			
				ТекстСообщения = НСтр("ru='Нет значения веса тары на ввоз для прицепа!';uk='Немає значення ваги тари на ввезення для причепа!'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Объект.ВесТары1", , Отказ);
			КонецЕсли;

		КонецЕсли;
		
	КонецЕсли;
	
	// Движение по регистру Журнал лабораторных анализов
	Если ФормируетРеестр = Ложь Тогда	
		Если ЗначениеЗаполнено(СтруктураШапкиДокумента.ЛабораторныйАнализ) Тогда
			Если НЕ Отказ Тогда
				СтруктураШапкиДокумента.Вставить("ФизическийВес");
				СтруктураШапкиДокумента.ФизическийВес = ?(ВидОперации = Перечисления.ИНАГРО_ВидыОперацийТТНВнутр.ПеремещениеФасованного, СписокНоменклатуры.Итог("Вес"), ВесВывоз);
				ИНАГРО_Элеватор.ДвиженияПоРегиструЖурналЛабораторныхАнализов(Движения, СтруктураШапкиДокумента);	
			КонецЕсли;
		КонецЕсли;                        
	КонецЕсли;
	
	ИНАГРО_КонтрольПроцессов.СохранитьЗначенияВесаТары(ЭтотОбъект, Отказ); 	
			
КонецПроцедуры 

Процедура ПодготовитьТаблицуПоКультурам(СтруктураШапкиДокумента, ТаблицаПоКультурам, Отказ, Заголовок);
	
	СтруктураШапкиДокумента.Вставить("ВесОбразцов", 0);	
	СтруктураШапкиДокумента.Вставить("Поставщик",   Справочники.Контрагенты.ПустаяСсылка());	
	СтруктураШапкиДокумента.Вставить("Откуда",      ЭтотОбъект.Склад);	
	
	СтруктураПолей = Новый Структура;
	СтруктураПростыхПолей = Новый Структура;
	СтруктураСложныхПолей = Новый Структура;
	
	СтруктураПолей.Вставить("Номенклатура",                "Номенклатура");
	СтруктураПолей.Вставить("НоменклатураНовая",           "НоваяНоменклатура");
	СтруктураПолей.Вставить("Урожай",                      "Урожай");
	СтруктураПолей.Вставить("НовыйУрожай",                 "НовыйУрожай");	
	СтруктураПолей.Вставить("Склад",                       "Ссылка.Склад");
	СтруктураПолей.Вставить("НовыйСклад",                  "Ссылка.НовыйСклад");    
	СтруктураПолей.Вставить("ВидФасовки",                  "ВидФасовки");	
	СтруктураПолей.Вставить("Количество",                  "Вес");	
	СтруктураПолей.Вставить("КоличествоДляЭлеватора",      "Количество");	
	СтруктураПолей.Вставить("ФизическийВес",               "Вес");
	Если ВидОперации = Перечисления.ИНАГРО_ВидыОперацийТТНВнутр.ПеремещениеФасованного Тогда
		СтруктураПолей.Вставить("ЗачетныйВес", "Вес");
	Иначе
		СтруктураПолей.Вставить("ЗачетныйВес", "Ссылка.ЗачетныйВес");
	КонецЕсли;
	СтруктураПолей.Вставить("Дата",                        "Ссылка.Дата");	                                             
	СтруктураПолей.Вставить("ВидХранения",                 "Ссылка.ВидХранения");
	СтруктураПолей.Вставить("Организация",                 "Ссылка.Организация");
	СтруктураПолей.Вставить("Владелец",                    "Ссылка.Владелец");	
	СтруктураПолей.Вставить("ДоговорКонтрагента",          "Ссылка.ДоговорКонтрагента");	
	СтруктураПолей.Вставить("Ссылка",                      "Ссылка");
	СтруктураПолей.Вставить("ОтражатьВБухгалтерскомУчете", "Ссылка.ОтражатьВБухгалтерскомУчете");
	
	СтруктураПростыхПолей.Вставить("Влажность",       0);
	СтруктураПростыхПолей.Вставить("СорнаяПримесь",   0);
	СтруктураПростыхПолей.Вставить("ЗерноваяПримесь", 0);
	СтруктураПростыхПолей.Вставить("ВидДокумента",    СтруктураШапкиДокумента.ВидДокумента);
	
	РезультатЗапросаПоКультурам = ОбщегоНазначенияРед12.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "СписокНоменклатуры", СтруктураПолей, СтруктураПростыхПолей, СтруктураСложныхПолей);
	
	ТаблицаПоКультурам = РезультатЗапросаПоКультурам.Выгрузить();
	
КонецПроцедуры

// Процедура выполняет вызов процедур выполняющих движение по регистрам
//
Процедура ПроводкиПоРегистрамЭлеватора(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоКультурам, Отказ, Заголовок)
	
	КоличествоДляЭлеватора = ТаблицаПоКультурам.ВыгрузитьКолонку("КоличествоДляЭлеватора");
	ТаблицаПоКультурам.ЗагрузитьКолонку(КоличествоДляЭлеватора, "Количество");
	
	Для Каждого СтрокаТаблицы Из ТаблицаПоКультурам Цикл
		
		ИНАГРО_Элеватор.ДвиженияПоРегиструОстаткиРасход(Движения, СтрокаТаблицы);
		ИНАГРО_Элеватор.ДвиженияПоРегиструОстаткиСводнаяРасход(Движения, СтрокаТаблицы);
		ИНАГРО_Элеватор.ДвиженияПоРегиструФорма36Расход(Движения, СтрокаТаблицы);
		
		Если    СтрокаТаблицы.Склад <> СтрокаТаблицы.НовыйСклад
			ИЛИ СтрокаТаблицы.Номенклатура <> СтрокаТаблицы.НоменклатураНовая
			ИЛИ СтрокаТаблицы.Урожай <> СтрокаТаблицы.НовыйУрожай Тогда
			
			ИНАГРО_Элеватор.ДвиженияПоРегиструФорма36СводнаяРасход(Движения, СтрокаТаблицы);
			
		КонецЕсли;
		
		УрожайСтарый 			   = СтрокаТаблицы.Урожай;		
		СтрокаТаблицы.Номенклатура = СтрокаТаблицы.НоменклатураНовая;		
		СтрокаТаблицы.Урожай       = СтрокаТаблицы.НовыйУрожай;				
		СтрокаТаблицы.Склад        = СтрокаТаблицы.НовыйСклад;
		
		ИНАГРО_Элеватор.ДвиженияПоРегиструОстаткиПриход(Движения, СтрокаТаблицы);
		ИНАГРО_Элеватор.ДвиженияПоРегиструОстаткиСводнаяПриход(Движения, СтрокаТаблицы);
		ИНАГРО_Элеватор.ДвиженияПоРегиструФорма36Приход(Движения, СтрокаТаблицы);
		
		Если    СтрокаТаблицы.Склад <> СтрокаТаблицы.НовыйСклад
			ИЛИ СтрокаТаблицы.Номенклатура <> СтрокаТаблицы.НоменклатураНовая
			ИЛИ СтрокаТаблицы.Урожай <> СтрокаТаблицы.НовыйУрожай 
			ИЛИ СтруктураШапкиДокумента.Склад <> СтруктураШапкиДокумента.НовыйСклад 
			ИЛИ СтруктураШапкиДокумента.Номенклатура <> СтруктураШапкиДокумента.НоваяНоменклатура 
			ИЛИ УрожайСтарый <> СтрокаТаблицы.НовыйУрожай Тогда
			
			ИНАГРО_Элеватор.ДвиженияПоРегиструФорма36СводнаяПриход(Движения, СтрокаТаблицы);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции	

Процедура ЗаполнитьПоДокументуОснованию(Основание, НоменклатураПриВыбореПриказа = Неопределено) Экспорт
	
	ПриказНаПеремещение = Основание.Ссылка;		
	Организация         = Основание.Организация;
	Владелец            = Основание.Владелец;		
	ДоговорКонтрагента  = Основание.ДоговорКонтрагента;
	Склад               = Основание.Склад;
	НовыйСклад          = Основание.НовыйСклад;
	МестоХранения       = Основание.МестоХранения;	
	НовоеМестоХранения  = Основание.НовоеМестоХранения;		
	
	Если НоменклатураПриВыбореПриказа <> Неопределено Тогда
		Номенклатура      = НоменклатураПриВыбореПриказа;
		НоваяНоменклатура = НоменклатураПриВыбореПриказа; 		
	Иначе
		Номенклатура      = Основание.Номенклатура;
		НоваяНоменклатура = Основание.Номенклатура; 			
	КонецЕсли;
	
	Урожай              = Основание.Урожай;
	НовыйУрожай         = Основание.Урожай;
	ВидХранения         = Основание.ВидХранения;		
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли