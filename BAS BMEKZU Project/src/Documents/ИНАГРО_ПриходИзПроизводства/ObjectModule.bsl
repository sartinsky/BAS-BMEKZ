#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

Перем мВалютаРегламентированногоУчета Экспорт;

#Область ОбработчикиСобытий

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	ТипДанныхЗаполнения = ТипЗнч(ДанныеЗаполнения);	
	
	Если ДанныеЗаполнения <> Неопределено И ТипДанныхЗаполнения <> Тип("Структура")
		И Метаданные().ВводитсяНаОсновании.Содержит(ДанныеЗаполнения.Метаданные()) Тогда
		ЗаполнитьПоДокументуОснованию(ДанныеЗаполнения);
	КонецЕсли;
	
	ИНАГРО_ЭлеваторЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект);
	
	ЗаполнениеДокументов.Заполнить(ЭтотОбъект, ДанныеЗаполнения); 
	
	Если  ТипДанныхЗаполнения = Тип("Структура")
		И ДанныеЗаполнения.Свойство("ВидОперации") Тогда
		ВидОперации = ДанныеЗаполнения.ВидОперации;
	КонецЕсли; 	
	
	Если НЕ ЗначениеЗаполнено(СчетЗатрат) Тогда
		СчетЗатрат = ПланыСчетов.Хозрасчетный.ОсновноеПроизводство;			
	КонецЕсли;

	УрожайДляПереработки = ХранилищеОбщихНастроек.Загрузить("УрожайДляПереработки", "Элеватор");
	Урожай = ?(ЗначениеЗаполнено(УрожайДляПереработки), УрожайДляПереработки, Урожай);	

КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)	
	
	МассивНепроверяемыхРеквизитов = Новый Массив; 	

	Если ВидОперации = Перечисления.ИНАГРО_ВидыОперацийПереработка.СкладскойУчет Тогда		
		МассивНепроверяемыхРеквизитов.Добавить("Владелец");	
		МассивНепроверяемыхРеквизитов.Добавить("ПодразделениеОрганизации");
		МассивНепроверяемыхРеквизитов.Добавить("ДоговорКонтрагента");
		МассивНепроверяемыхРеквизитов.Добавить("ВидХранения");
		МассивНепроверяемыхРеквизитов.Добавить("Урожай");
	КонецЕсли;
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);	
	
	Если ОтражатьВБухгалтерскомУчете Тогда
		
		Если ВидОперации = Перечисления.ИНАГРО_ВидыОперацийПереработка.ДавальческоеСырье Тогда		
			КоличествоСубконто = СчетЗатрат.ВидыСубконто.Количество();		
			Для СчетчикСубконто = 1 По КоличествоСубконто Цикл 
				Если СчетЗатрат.ВидыСубконто[СчетчикСубконто-1].Предопределенное Тогда
					МассивНепроверяемыхРеквизитов.Добавить("Субконто" + СчетчикСубконто);
				КонецЕсли;
			КонецЦикла;
		Иначе
			КоличествоСубконто = СчетЗатрат.ВидыСубконто.Количество();		
			Для СчетчикСубконто = 1 По КоличествоСубконто Цикл 
				Если СчетЗатрат.ВидыСубконто[СчетчикСубконто-1].Предопределенное Тогда
					ПроверяемыеРеквизиты.Добавить("Субконто" + СчетчикСубконто);
				КонецЕсли;	
			КонецЦикла;	
		КонецЕсли;
		
	КонецЕсли;
		   
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли; 	
	
	ХранилищеОбщихНастроек.Сохранить("УрожайДляПереработки", "Элеватор", Урожай);
		
КонецПроцедуры 

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	Перем Заголовок, СтруктураШапкиДокумента;
	Перем ТаблицаПродукции;

	ПроведениеСервер.ПодготовитьНаборыЗаписейКПроведению(ЭтотОбъект); 	
	Если РучнаяКорректировка Тогда
		Возврат;
	КонецЕсли;

	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначенияБПВызовСервера.ПредставлениеДокументаПриПроведении(Ссылка);

	ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента);	
	
	ПодготовитьПараметрыУчетнойПолитики(СтруктураШапкиДокумента, Отказ, Заголовок);	
		
	ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПродукции, Отказ, Заголовок);
	
	// Движения по документу
	Если НЕ Отказ Тогда 		
		ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПродукции, Отказ, Заголовок);		
	КонецЕсли;	
	
	Движения.Хозрасчетный.ВыполнитьДействияПередЗаписьюДвижений();

	ПроведениеСервер.ПодготовитьНаборыЗаписейКЗаписиДвижений(ЭтотОбъект);	
		
КонецПроцедуры 

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКОтменеПроведения(ЭтотОбъект);
	Движения.Записать();
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	Дата = НачалоДня(ОбщегоНазначения.ТекущаяДатаПользователя());
	Ответственный = Пользователи.ТекущийПользователь();	
	
КонецПроцедуры

#КонецОбласти

#Область Проведение

Процедура ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента)
	
	// Дерево значений, содержащее имена необходимых полей в запросе по шапке.
	Перем ДеревоПолейЗапросаПоШапке;
	
	СтруктураШапкиДокумента   = ОбщегоНазначенияРед12.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	 		
	// Заполним по шапке документа дерево параметров, нужных при проведении.
	ДеревоПолейЗапросаПоШапке = ОбщегоНазначенияРед12.СформироватьДеревоПолейЗапросаПоШапке();
	
	ОбщегоНазначенияРед12.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "Организация", "ДоговорОрганизация");
	ОбщегоНазначенияРед12.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "ВидДоговора", "ВидДоговора");
	ОбщегоНазначенияРед12.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Склад",                "ТипСклада",   "ТипСклада");
	
	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа.
	СтруктураШапкиДокумента = УправлениеЗапасами.СформироватьЗапросПоДеревуПолей(ЭтотОбъект, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета);

	СтруктураШапкиДокумента.Вставить("КоличествоМест", 0);

КонецПроцедуры

Процедура ПодготовитьПараметрыУчетнойПолитики(СтруктураШапкиДокумента, Отказ, Заголовок)
	
	СтруктураШапкиДокумента.Вставить("ЕстьНалогНаПрибыльДо2015",         Истина);
	СтруктураШапкиДокумента.Вставить("ЕстьНДС",                          Истина);

	СпособОценкиМПЗ  = УчетнаяПолитика.СпособОценкиМПЗ(СтруктураШапкиДокумента.Организация, НачалоМесяца(СтруктураШапкиДокумента.Дата));
	ПартионныйУчетБУ = (СпособОценкиМПЗ = Перечисления.СпособыОценки.ФИФО ИЛИ СпособОценкиМПЗ = Перечисления.СпособыОценки.ЛИФО);
	
	СтруктураШапкиДокумента.Вставить("ВедетсяПартионныйУчет",            ПартионныйУчетБУ);
		
	СтруктураШапкиДокумента.Вставить("РазрешитьУчетУслугБезПлановыхЦен", Истина);
	
КонецПроцедуры

Процедура ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПродукции, Отказ, Заголовок)
	
	// Таблица по продукции
	СтруктураПолей = Новый Структура();
	СтруктураПростыхПолей = Новый Структура;
		
	СтруктураПолей.Вставить("Номенклатура",             "Номенклатура");
	СтруктураПолей.Вставить("Количество",               "ФизическийВес * Коэффициент");
	СтруктураПолей.Вставить("СчетУчетаБУ",              "СчетУчетаБУ");
	СтруктураПолей.Вставить("ВидНалоговойДеятельности", "НалоговоеНазначение.ВидНалоговойДеятельности"); 
	Если ТипЗнч(Субконто1) = Тип("СправочникСсылка.ПодразделенияОрганизаций") Тогда
		СтруктураПолей.Вставить("Подразделение",        "Ссылка.Субконто1");
	ИначеЕсли ТипЗнч(Субконто2) = Тип("СправочникСсылка.ПодразделенияОрганизаций") Тогда
		СтруктураПолей.Вставить("Подразделение",        "Ссылка.Субконто2");
	Иначе
		СтруктураПолей.Вставить("Подразделение",        "Ссылка.Субконто3");
	КонецЕсли;
	Если ТипЗнч(Субконто1) = Тип("СправочникСсылка.НоменклатурныеГруппы") Тогда
		СтруктураПолей.Вставить("НоменклатурнаяГруппа", "Ссылка.Субконто1");
	ИначеЕсли ТипЗнч(Субконто2) = Тип("СправочникСсылка.НоменклатурныеГруппы") Тогда
		СтруктураПолей.Вставить("НоменклатурнаяГруппа", "Ссылка.Субконто2");
	Иначе
		СтруктураПолей.Вставить("НоменклатурнаяГруппа", "Ссылка.Субконто3");
	КонецЕсли;
	Если ТипЗнч(Субконто1) = Тип("СправочникСсылка.СтатьиЗатрат") Тогда
		СтруктураПолей.Вставить("СтатьяЗатрат",         "Ссылка.Субконто1");
	ИначеЕсли ТипЗнч(Субконто2) = Тип("СправочникСсылка.СтатьиЗатрат") Тогда
		СтруктураПолей.Вставить("СтатьяЗатрат",         "Ссылка.Субконто2");
	Иначе
		СтруктураПолей.Вставить("СтатьяЗатрат",         "Ссылка.Субконто3");
	КонецЕсли;
	СтруктураПолей.Вставить("СуммаПлановая",            "СуммаПлановая");
	СтруктураПолей.Вставить("НоменклатурнаяГруппа",     "Ссылка.Субконто3");
	СтруктураПолей.Вставить("СтатьяЗатрат",             "Ссылка.Субконто2");
	СтруктураПолей.Вставить("КорСчетСписанияБУ",        "Ссылка.СчетЗатрат");		
	СтруктураПолей.Вставить("КорСубконтоСписанияБУ1",   "Ссылка.Субконто1"); 				
	СтруктураПолей.Вставить("КорСубконтоСписанияБУ2",   "Ссылка.Субконто2");
	СтруктураПолей.Вставить("КорСубконтоСписанияБУ3",   "Ссылка.Субконто3");	
	
	// Для НалоговоеНазначениеДоходовИЗатрат
	ХарактерЗатрат = УправлениеПроизводствомВызовСервера.ПолучитьХарактерЗатратПоСчетуЗатрат(СчетЗатрат, , Дата);                                                                                                  
	
	Если НЕ (ХарактерЗатрат = "Производство" ИЛИ ХарактерЗатрат = "Строительство" ИЛИ ХарактерЗатрат = "ТЗР" ИЛИ ХарактерЗатрат = "РБП" ИЛИ ХарактерЗатрат = "ОПЗ") Тогда
		СтруктураПолей.Вставить("НалоговоеНазначение", "Ссылка.НалоговоеНазначениеДоходовИЗатрат");
	Иначе	
		ХарактерЗатрат = Неопределено;
		НалоговоеНазначениеПроводки = Неопределено;
		НалоговоеНазначениеНДС = НСтр("ru='Из табличной части';uk='З табличної частини'");
		СтруктураСубконто = Новый Структура("Субконто1,Субконто2,Субконто3", Субконто1, Субконто2, Субконто3);
		НалоговыйУчет.ОпределениеАналитикиНалоговогоУчетаВПроводкахДляЗатрат(СтруктураСубконто, СчетЗатрат, ХарактерЗатрат, 
		НалоговоеНазначениеПроводки, ,
		НалоговоеНазначениеНДС,,
		,Дата);
		Если Строка(НалоговоеНазначениеПроводки) = "Из табличной части" Тогда
			СтруктураПолей.Вставить("НалоговоеНазначение", "НалоговоеНазначение");
		Иначе
			СтруктураПростыхПолей.Вставить("НалоговоеНазначение", НалоговоеНазначениеПроводки);
		КонецЕсли;
	КонецЕсли;
	
	РезультатЗапросаПоПродукции= ОбщегоНазначенияРед12.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Продукция", СтруктураПолей, СтруктураПростыхПолей);
	ТаблицаПродукции = РезультатЗапросаПоПродукции.Выгрузить();
	
КонецПроцедуры

// Движения по регистрам приход и расход
//
Процедура ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПродукции, Отказ, Заголовок);
	
	ПровестиПоРегистрамЭлеватора(РежимПроведения, СтруктураШапкиДокумента, Отказ, Заголовок);
	
	Если  ИНАГРО_Элеватор.ПолучитьДополнительныйРеквизитКонтрагента(Владелец, "СобственноеПодразделение")
		И ВидОперации = Перечисления.ИНАГРО_ВидыОперацийПереработка.СобственноеСырье Тогда
		
		ПриходПродукцииБУХ(Движения, СтруктураШапкиДокумента,ТаблицаПродукции,Отказ);
		
	КонецЕсли;	
	
	Движения.Хозрасчетный.Записать();
	
	ИНАГРО_Общий.ИНАГРО_ДвиженияВыпускПродукции(СтруктураШапкиДокумента, Движения);
	ИНАГРО_Общий.ИНАГРО_ДвиженияЗатратыОрганизации_Приход(СтруктураШапкиДокумента, Движения);
	
КонецПроцедуры

// Проводит по регистрам Элеватора
//
// Параметры:
//  ТаблицаПоТоварам          - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПровестиПоРегистрамЭлеватора(РежимПроведения, СтруктураШапкиДокумента, Отказ, Заголовок)
	
	ВестиУчетПоПереработке            = ИНАГРО_Элеватор.ПолучитьПараметрУчетаЭлеватора(СтруктураШапкиДокумента.Дата, "ВестиУчетПоПереработке", Ложь);	
	ВестиСкладскойУчетНегодныхОтходов = ИНАГРО_Элеватор.ПолучитьПараметрУчетаЭлеватора(Дата, "ВестиСкладскойУчетНегодныхОтходов", Истина);
	
	Если НЕ Отказ Тогда 
		
		ЧужойКонтрагент         = СтруктураШапкиДокумента.Владелец;
		ЧужойДоговорКонтрагента = СтруктураШапкиДокумента.ДоговорКонтрагента;
		
		Для Каждого СтрокаТабличнойЧасти Из Продукция Цикл
			
			СтруктураДвиженияПроведенияБУХ(Продукция, СтруктураШапкиДокумента, СтрокаТабличнойЧасти);
			
			ВидТМЦ = ИНАГРО_Элеватор.ПолучитьДополнительныйРеквизитНоменклатуры(СтрокаТабличнойЧасти.Номенклатура, "ВидТМЦ");
			
			СтруктураШапкиДокумента.Вставить("СчетУчетаБУ",СтрокаТабличнойЧасти.СчетУчетаБУ);
			
			Если ВидТМЦ = Перечисления.ИНАГРО_ВидыТМЦ.Кат3 Тогда
				
				СобственныйКонтрагент            = ИНАГРО_Элеватор.ПолучитьДополнительныйРеквизитОрганизации(Организация, "Контрагент", Дата);
				СтруктураШапкиДокумента.Владелец = СобственныйКонтрагент;
				
				Если ЗначениеЗаполнено(СобственныйКонтрагент) Тогда
					СтруктураШапкиДокумента.ДоговорКонтрагента = СобственныйКонтрагент.ОсновнойДоговорКонтрагента;
				Иначе
					СтруктураШапкиДокумента.ДоговорКонтрагента = "";
				КонецЕсли;
				
				СтруктураШапкиДокумента.Вставить("КодРасхода", Перечисления.ИНАГРО_КодыРасхода.Кат3);
				
				Если ВестиСкладскойУчетНегодныхОтходов Тогда
					
					Если ВестиУчетПоПереработке Тогда
						
						Если ВидОперации = Перечисления.ИНАГРО_ВидыОперацийПереработка.СкладскойУчет Тогда
							ИНАГРО_Элеватор.ДвиженияПоРегиструДвиженияПоПереработке(Движения, СтруктураШапкиДокумента, ВидДвиженияНакопления.Расход);			
						Иначе 
							ИНАГРО_Элеватор.ДвиженияПоРегиструФорма36Приход(Движения, СтруктураШапкиДокумента);
							ИНАГРО_Элеватор.ДвиженияПоРегиструФорма36СводнаяПриход(Движения, СтруктураШапкиДокумента);									
							ИНАГРО_Элеватор.ДвиженияПоРегиструОстаткиПриход(Движения, СтруктураШапкиДокумента);
							ИНАГРО_Элеватор.ДвиженияПоРегиструОстаткиСводнаяПриход(Движения, СтруктураШапкиДокумента);
							ИНАГРО_Элеватор.ДвиженияПоРегиструДвиженияПоПереработке(Движения, СтруктураШапкиДокумента, ВидДвиженияНакопления.Приход);			
						КонецЕсли; 
						
					Иначе
						
						Если ВидОперации <> Перечисления.ИНАГРО_ВидыОперацийПереработка.СкладскойУчет Тогда 
							ИНАГРО_Элеватор.ДвиженияПоРегиструФорма36Приход(Движения, СтруктураШапкиДокумента);
							ИНАГРО_Элеватор.ДвиженияПоРегиструФорма36СводнаяПриход(Движения, СтруктураШапкиДокумента);
							ИНАГРО_Элеватор.ДвиженияПоРегиструОстаткиСводнаяПриход(Движения, СтруктураШапкиДокумента); 
							ИНАГРО_Элеватор.ДвиженияПоРегиструОстаткиПриход(Движения, СтруктураШапкиДокумента);
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЕсли;
				
			Иначе
				
				СтруктураШапкиДокумента.Владелец           = ЧужойКонтрагент;
				СтруктураШапкиДокумента.ДоговорКонтрагента = ЧужойДоговорКонтрагента;
				
				Если ВестиУчетПоПереработке Тогда 							
					
					Если ВидОперации = Перечисления.ИНАГРО_ВидыОперацийПереработка.СкладскойУчет Тогда
						ИНАГРО_Элеватор.ДвиженияПоРегиструДвиженияПоПереработке(Движения, СтруктураШапкиДокумента, ВидДвиженияНакопления.Расход);			
					Иначе 
						ИНАГРО_Элеватор.ДвиженияПоРегиструДвиженияПоПереработке(Движения, СтруктураШапкиДокумента, ВидДвиженияНакопления.Приход);			
						ИНАГРО_Элеватор.ДвиженияПоРегиструВыпускПродукции(СтруктураШапкиДокумента,Движения);
						ИНАГРО_Элеватор.ДвиженияПоРегиструОстаткиПриход(Движения, СтруктураШапкиДокумента);
						ИНАГРО_Элеватор.ДвиженияПоРегиструОстаткиСводнаяПриход(Движения, СтруктураШапкиДокумента);
						ИНАГРО_Элеватор.ДвиженияПоРегиструФорма36Приход(Движения, СтруктураШапкиДокумента);
						ИНАГРО_Элеватор.ДвиженияПоРегиструФорма36СводнаяПриход(Движения, СтруктураШапкиДокумента);  							
					КонецЕсли;
					
				Иначе
					
					Если ВидОперации <> Перечисления.ИНАГРО_ВидыОперацийПереработка.СкладскойУчет Тогда     
						ИНАГРО_Элеватор.ДвиженияПоРегиструВыпускПродукции(СтруктураШапкиДокумента,Движения);
						ИНАГРО_Элеватор.ДвиженияПоРегиструОстаткиПриход(Движения, СтруктураШапкиДокумента);
						ИНАГРО_Элеватор.ДвиженияПоРегиструОстаткиСводнаяПриход(Движения, СтруктураШапкиДокумента); 
						ИНАГРО_Элеватор.ДвиженияПоРегиструФорма36Приход(Движения, СтруктураШапкиДокумента);
						ИНАГРО_Элеватор.ДвиженияПоРегиструФорма36СводнаяПриход(Движения, СтруктураШапкиДокумента);	
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		СтруктураШапкиДокумента.Владелец           = ЧужойКонтрагент;
		СтруктураШапкиДокумента.ДоговорКонтрагента = ЧужойДоговорКонтрагента;
		
	КонецЕсли;
	
	Если ОтражатьВРасчетномВыходеПродукции Тогда
		
		СтруктураПолей = Новый Структура;
		СтруктураПростыхПолей = Новый Структура;
		СтруктураПолей.Вставить("Ссылка",                   "Ссылка");
		СтруктураПолей.Вставить("Организация",              "Ссылка.Организация");
		СтруктураПолей.Вставить("Владелец",                 "Ссылка.Владелец");
		СтруктураПолей.Вставить("ПодразделениеОрганизации", "Ссылка.ПодразделениеОрганизации");
		СтруктураПолей.Вставить("Продукция",                "НоменклатураПоФорме117");
		СтруктураПолей.Вставить("Вес",                      "ФизическийВес");
		СтруктураПолей.Вставить("Номенклатура",             "Номенклатура");
		
		РезультатЗапросаПоТоварам = ОбщегоНазначенияРед12.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Продукция", СтруктураПолей,СтруктураПростыхПолей);
		ТаблицаПродукции = РезультатЗапросаПоТоварам.Выгрузить();
		
		Если НЕ Отказ Тогда
			Для Каждого СтрокаТаблицы Из ТаблицаПродукции Цикл
				Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.Продукция) Тогда
					СтрокаТаблицы.Продукция = СтрокаТаблицы.Номенклатура;
				КонецЕсли;	
				ИНАГРО_Элеватор.ДвиженияПоРегиструРасчетныйВыпускПродукцииРасход(Движения, СтрокаТаблицы);
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура для оприходования продукции по регистрам в случаи если владалец являеться собственным подразделением.
//
Процедура ПриходПродукцииБУХ(Движения, СтруктураШапкиДокумента, ТаблицаПродукции, Отказ)
	
	Если Продукция.Количество() = 0 ИЛИ НЕ ОтражатьВБухгалтерскомУчете Тогда
		Возврат;
	КонецЕсли;
	
	ОперацияБУ = Движения["Хозрасчетный"];
	ДвиженияВыпускПродукцииУслугБУ = Движения["ВыпускПродукцииУслугБухгалтерскийУчет"];
	ТаблицаДвиженийВыпускБУ        = ДвиженияВыпускПродукцииУслугБУ.Выгрузить();
	
	Если НЕ Отказ Тогда
		
		Для Каждого СтрокаТаблицы Из ТаблицаПродукции Цикл
			
			ВестиУчетПоСебестоимости = ИНАГРО_Элеватор.ПолучитьДополнительныйРеквизитНоменклатуры(СтрокаТаблицы.Номенклатура, "ВестиУчетПоСебестоимости");
			Если ВестиУчетПоСебестоимости Тогда
				Продолжить;
			КонецЕсли;	
			
			СчетУчетаБУ         = СтрокаТаблицы.СчетУчетаБУ;
			СчетЗатратТекущий   = СчетЗатрат;			
			
			// Сформируем проводку.
			Если НЕ ЗначениеЗаполнено(СчетУчетаБУ)
				ИЛИ НЕ ЗначениеЗаполнено(СчетЗатратТекущий) Тогда
				Возврат;
			КонецЕсли;
			
			НоваяПроводка = ОперацияБУ.Добавить();
			
			НоваяПроводка.Организация = Организация;
			НоваяПроводка.Период      = Дата;
			
			НоваяПроводка.СчетДт = СчетУчетаБУ;
			БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, "Номенклатура", СтрокаТаблицы.Номенклатура);
			БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, "Склады",       Склад);
			
			// Если способ оценки ФИФО или ЛИФО и на счете ведется партионный учет,
			// то в проводке указываем в качестве партии текущий документ.
			Если СтруктураШапкиДокумента.ВедетсяПартионныйУчет Тогда
				БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, "Партии", Ссылка);
			КонецЕсли; 
			
			НоваяПроводка.Содержание = НСтр("ru='Выпуск продукции';uk='Випуск продукції'", Локализация.КодЯзыкаИнформационнойБазы());
			
			НоваяПроводка.СчетКт = СчетЗатратТекущий;
			
			СтруктураАналитикиПродукции = ПолучитьАналитикуПродукции(СтрокаТаблицы);
			БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетКт, НоваяПроводка.СубконтоКт, "Подразделения",        СтруктураАналитикиПродукции.Подразделение);
			БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетКт, НоваяПроводка.СубконтоКт, "НоменклатурныеГруппы", СтруктураАналитикиПродукции.НоменклатурнаяГруппа);
			
			НоваяПроводка.КоличествоДт = ?(НоваяПроводка.СчетДТ.Количественный, СтрокаТаблицы.Количество, 0);
			НоваяПроводка.Сумма        = СтрокаТаблицы.СуммаПлановая;
			
			Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыльДо2015
				И СтрокаТаблицы.НалоговоеНазначение <> Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяНеХозДеятельность Тогда			
				НоваяПроводка.СуммаНУДт = СтрокаТаблицы.СуммаПлановая;
				НоваяПроводка.СуммаНУКт = СтрокаТаблицы.СуммаПлановая;
			КонецЕсли;
			
			НоваяПроводка.НалоговоеНазначениеДт = СтрокаТаблицы.НалоговоеНазначение;
			НоваяПроводка.НалоговоеНазначениеКт = СтрокаТаблицы.НалоговоеНазначение;
			
			// Отражения выпуска в регистре накопления ВыпускПродукцииУслуг
			СтрокаДвижения = ТаблицаДвиженийВыпускБУ.Добавить();
			СтрокаДвижения.Организация           = Организация;
			СтрокаДвижения.Продукция             = СтрокаТаблицы.Номенклатура;
			СтрокаДвижения.СчетЗатрат            = СчетЗатратТекущий;
			СтрокаДвижения.Подразделение         = ПодразделениеОрганизации;
			СтрокаДвижения.НоменклатурнаяГруппа  = СтрокаТаблицы.НоменклатурнаяГруппа;
			СтрокаДвижения.СчетСписания          = СчетУчетаБУ;
			
			Если СчетУчетаБУ.ВидыСубконто.Количество() > 0 Тогда
				СтрокаДвижения.СубконтоСписания1 = НоваяПроводка.СубконтоДт[НоваяПроводка.СчетДт.ВидыСубконто[0].ВидСубконто];
			КонецЕсли; 
			
			Если СчетУчетаБУ.ВидыСубконто.Количество() > 1 Тогда
				СтрокаДвижения.СубконтоСписания2 = НоваяПроводка.СубконтоДт[НоваяПроводка.СчетДт.ВидыСубконто[1].ВидСубконто];
			КонецЕсли;
			
			Если СчетУчетаБУ.ВидыСубконто.Количество() > 2 Тогда
				СтрокаДвижения.СубконтоСписания3 = НоваяПроводка.СубконтоДт[НоваяПроводка.СчетДт.ВидыСубконто[2].ВидСубконто];
			КонецЕсли;
			
			СтрокаДвижения.Количество            = СтрокаТаблицы.Количество;
			СтрокаДвижения.ПлановаяСтоимость     = СтрокаТаблицы.СуммаПлановая;
			СтрокаДвижения.НалоговоеНазначениеДоходовИЗатрат = СтрокаТаблицы.НалоговоеНазначение;
			
		КонецЦикла;
		
		ДвиженияВыпускПродукцииУслугБУ.мПериод = Дата;
		ДвиженияВыпускПродукцииУслугБУ.мТаблицаДвижений = ТаблицаДвиженийВыпускБУ;
		
		ДвиженияВыпускПродукцииУслугБУ.ДобавитьДвижение();
		
	КонецЕсли;	
	
	Движения.Хозрасчетный.ВыполнитьДействияПередЗаписьюДвижений();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ЗаполнитьПоДокументуОснованию(Основание)
	
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ИНАГРО_Форма117") Тогда

		Организация                 = Основание.Организация;
		Владелец                    = Основание.Владелец;
		ДоговорКонтрагента          = Основание.ДоговорКонтрагента;
		ПодразделениеОрганизации    = Основание.ПодразделениеОрганизации;
		Склад                       = Основание.Склад;		
		ВидХранения                 = Основание.ВидХранения;
		Урожай                      = Основание.Урожай;
		ОтражатьВБухгалтерскомУчете = Истина;

		СобственноеПодразделение = ИНАГРО_Элеватор.ПолучитьДополнительныйРеквизитКонтрагента(Владелец, "СобственноеПодразделение");

		Если СобственноеПодразделение Тогда
			ВидОперации        = Перечисления.ИНАГРО_ВидыОперацийПереработка.СобственноеСырье;
			ОтражатьПоЗатратам = Истина;
		Иначе
			ВидОперации        = Перечисления.ИНАГРО_ВидыОперацийПереработка.ДавальческоеСырье;
			ОтражатьПоЗатратам = Ложь;
		КонецЕсли;
		
		СчетЗатрат = ?(ВидОперации = Перечисления.ИНАГРО_ВидыОперацийПереработка.СобственноеСырье,
			ПланыСчетов.Хозрасчетный.ОсновноеПроизводство,
			ПланыСчетов.Хозрасчетный.ПроизводствоИзДавальческогоСырья);
		
		Для Каждого СтрокаТабличнойЧасти Из Основание.Продукция Цикл
			
			НоваяСтрока = Продукция.Добавить();
			НоваяСтрока.Номенклатура       = СтрокаТабличнойЧасти.Номенклатура;
			НоваяСтрока.ЕдиницаИзмерения   = СтрокаТабличнойЧасти.Номенклатура.БазоваяЕдиницаИзмерения;
			НоваяСтрока.Коэффициент        = 1;	
			НоваяСтрока.ФизическийВес      = СтрокаТабличнойЧасти.РасчетныйВесВыходаПродукции;
			НоваяСтрока.ЛабораторныйАнализ = СтрокаТабличнойЧасти.ЛабораторныйАнализ;
			НоваяСтрока.НомерАнализа       = СтрокаТабличнойЧасти.ЛабораторныйАнализ.Номер;
			НоваяСтрока.Влажность          = СтрокаТабличнойЧасти.ЛабораторныйАнализ.Влажность;
			НоваяСтрока.СорнаяПримесь      = СтрокаТабличнойЧасти.ЛабораторныйАнализ.СорнаяПримесь;
			НоваяСтрока.ЗерноваяПримесь    = СтрокаТабличнойЧасти.ЛабораторныйАнализ.ЗерноваяПримесь;
			Если ВидОперации = Перечисления.ИНАГРО_ВидыОперацийПереработка.СобственноеСырье Тогда
				Ценообразование.ЗаполнитьПлановуюСебестоимость(НоваяСтрока, Дата);
			КонецЕсли;	
			
			НоваяСтрока.СуммаПлановая      = НоваяСтрока.ФизическийВес * НоваяСтрока.ПлановаяСтоимость;

			Если ОтражатьВРасчетномВыходеПродукции Тогда
				НоваяСтрока.НоменклатураПоФорме117 = СтрокаТабличнойЧасти.Номенклатура;
			КонецЕсли;

		КонецЦикла;

		Документы.ИНАГРО_ПриходИзПроизводства.ЗаполнитьСчетаУчетаВТабличнойЧасти(ЭтотОбъект, "Продукция", СобственноеПодразделение);

	КонецЕсли;
	
КонецПроцедуры

// Реквизиты Структуры для проведения документа
//
Процедура СтруктураДвиженияПроведенияБУХ(ИмяТабЧасти,СтруктураШапкиДокумента,СтрокаТабличнойЧасти)
	
	СтруктураШапкиДокумента.Вставить("Рецепт",             Рецепт);
	СтруктураШапкиДокумента.Вставить("Номенклатура",       СтрокаТабличнойЧасти.Номенклатура);
	СтруктураШапкиДокумента.Вставить("ФизическийВес",      СтрокаТабличнойЧасти.ФизическийВес);
	СтруктураШапкиДокумента.Вставить("ЛабораторныйАнализ", СтрокаТабличнойЧасти.ЛабораторныйАнализ);
	СтруктураШапкиДокумента.Вставить("НомерАнализа",       СтрокаТабличнойЧасти.НомерАнализа);
	СтруктураШапкиДокумента.Вставить("Влажность",          СтрокаТабличнойЧасти.Влажность);
	СтруктураШапкиДокумента.Вставить("СорнаяПримесь",      СтрокаТабличнойЧасти.СорнаяПримесь);
	СтруктураШапкиДокумента.Вставить("ЗерноваяПримесь",    СтрокаТабличнойЧасти.ЗерноваяПримесь);
	СтруктураШапкиДокумента.Вставить("Поставщик",          Владелец);
	СтруктураШапкиДокумента.Вставить("Откуда",             Склад);
	СтруктураШапкиДокумента.Вставить("ЗачетныйВес",        СтрокаТабличнойЧасти.ФизическийВес);
	СтруктураШапкиДокумента.Вставить("Количество",         СтрокаТабличнойЧасти.Количество);
	СтруктураШапкиДокумента.Вставить("ВесПродукции",       СтрокаТабличнойЧасти.ФизическийВес);
	Если ИмяТабЧасти = Продукция Тогда
		СтруктураШапкиДокумента.Вставить("ВидФасовки", СтрокаТабличнойЧасти.Фасовка);
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьАналитикуПродукции(СтрокаТабличнойЧасти)
	
	СтруктураАналитикиПродукции = Новый Структура("Подразделение, НоменклатурнаяГруппа, СтатьяЗатрат");
	
	// Подразделение
	Если ТипЗнч(Субконто1) = ТипЗнч(Справочники.ПодразделенияОрганизаций.ПустаяСсылка()) Тогда
		Подразделения_ = Субконто1;
	ИначеЕсли ТипЗнч(Субконто2) = ТипЗнч(Справочники.ПодразделенияОрганизаций.ПустаяСсылка()) Тогда	
		Подразделения_ = Субконто2;
	ИначеЕсли ТипЗнч(Субконто3) = ТипЗнч(Справочники.ПодразделенияОрганизаций.ПустаяСсылка()) Тогда	
		Подразделения_ = Субконто3;
	КонецЕсли; 
	СтруктураАналитикиПродукции.Подразделение = Подразделения_;
	
	// НоменклатурныеГруппы
	Если ТипЗнч(Субконто1) = ТипЗнч(Справочники.НоменклатурныеГруппы.ПустаяСсылка()) Тогда
		НоменклатурныеГруппы_ = Субконто1;
	ИначеЕсли ТипЗнч(Субконто2) = ТипЗнч(Справочники.НоменклатурныеГруппы.ПустаяСсылка()) Тогда	
		НоменклатурныеГруппы_ = Субконто2;
	ИначеЕсли ТипЗнч(Субконто3) = ТипЗнч(Справочники.НоменклатурныеГруппы.ПустаяСсылка()) Тогда	
		НоменклатурныеГруппы_ = Субконто3;
	КонецЕсли; 
	СтруктураАналитикиПродукции.НоменклатурнаяГруппа = НоменклатурныеГруппы_;
		
	Возврат СтруктураАналитикиПродукции;
	
КонецФункции

#КонецОбласти

мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();

#КонецЕсли
