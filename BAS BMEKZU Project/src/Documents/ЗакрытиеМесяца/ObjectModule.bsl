#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда


Перем мНачМесяца;
Перем мКонМесяца;
Перем мНачКвартала;
Перем мКонКвартала;
Перем мНачГода;
Перем мНачГраница;
Перем мКонГраница;

Перем мКонКварталаВключая;

Перем мПараметрыНалоговогоУчета;

Перем мОперация;
Перем мПроводкиБУ;

Перем мПоказателиНормальнойМощности;

Перем ПорядокПодразделенийСообщался;
Перем ПорядокПеределовСообщался;
Перем ТаблицаНеЗакрытыхПодразделений;

Перем ПорядокПеределов;

Перем мКоэффициентМатериальнойСоставляющей;
Перем мКоэффициентМатериальнойСоставляющейРассчитан;


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Выполняет запись в регистры информации параметров расчетов по рег.операциям
// по данным которых будут построены справки - расчеты
Процедура ЗаписьВВспомогательныеРегистрыСведений(СтруктураШапкиДокумента, ТаблицаДвижений, НаборДвижений, СтрокаГруппировки,СтрокаСуммирования)
	
	ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.Организация, "Организация");
	ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.Дата, "ПериодРасчета");
	ТаблицаДвижений.ЗаполнитьЗначения(Истина, "Активность");
	ТаблицаДвижений.ЗаполнитьЗначения(Ссылка, "Регистратор");
	ТаблицаДвижений.Свернуть(СтрокаГруппировки,СтрокаСуммирования);
	НаборДвижений.Загрузить(ТаблицаДвижений);
	НаборДвижений.Записать();
КонецПроцедуры

// ПРОЦЕДУРЫ И ФУНКЦИИ ПО РАСПРЕДЕЛЕНИЮ ТЗР 
Процедура РаспределениеТЗР(СтруктураШапкиДокумента, Отказ, Заголовок)
	
	СуммовойУчет = УчетнаяПолитика.СпособОценкиТоваровВРознице(СтруктураШапкиДокумента.Организация, СтруктураШапкиДокумента.Дата) = Перечисления.СпособыОценкиТоваровВРознице.ПоПродажнойСтоимости;
    	
	Если СтруктураШапкиДокумента.РаспределениеТЗР Тогда 
		РаспределениеТЗРБУ("Товары",    СтруктураШапкиДокумента);
		РаспределениеТЗРБУ("Материалы", СтруктураШапкиДокумента);
		Если СуммовойУчет Тогда
			РаспределениеТЗРБУ("РозницаСуммовойУчет", СтруктураШапкиДокумента);
    	КонецЕсли;
	КонецЕсли;

КонецПроцедуры  

Процедура РаспределениеТЗРБУ(ВидТЗР, СтруктураШапкиДокумента)
	
	СуммовойУчет = УчетнаяПолитика.СпособОценкиТоваровВРознице(СтруктураШапкиДокумента.Организация, СтруктураШапкиДокумента.Дата) = Перечисления.СпособыОценкиТоваровВРознице.ПоПродажнойСтоимости;

	МассивСчетовЗатратТЗР           = Новый Массив;
	МассивСчетовЗапасов             = Новый Массив;
	МассивСчетовЗапасовТаЖеГруппа   = Новый Массив; 
	МассивСчетовЗапасовДругаяГруппа = Новый Массив;  	
	
	Если ВидТЗР = "Материалы" Тогда
		
		МассивСчетовЗатратТЗР.Добавить(ПланыСчетов.Хозрасчетный.ТранспортноЗаготовительныеРасходыМатериалы);
		МассивСчетовЗапасов             = СформироватьМассивСчетовВИерархии(ПланыСчетов.Хозрасчетный.ПроизводственныеЗапасы);
		
		СчетТЗРМатериалы = МассивСчетовЗапасов.Найти(ПланыСчетов.Хозрасчетный.ТранспортноЗаготовительныеРасходыМатериалы);
		Если СчетТЗРМатериалы <> Неопределено Тогда  
			 МассивСчетовЗапасов.Удалить(СчетТЗРМатериалы);		
		 КонецЕсли; 
		МассивСчетовЗапасовТаЖеГруппа   = СформироватьМассивСчетовВИерархии(ПланыСчетов.Хозрасчетный.ПроизводственныеЗапасы);
       	МассивСчетовЗапасовДругаяГруппа = СформироватьМассивСчетовВИерархии(ПланыСчетов.Хозрасчетный.Товары);
		
	ИначеЕсли ВидТЗР = "Товары" Тогда
		
		МассивСчетовЗатратТЗР.Добавить(ПланыСчетов.Хозрасчетный.ТранспортноЗаготовительныеРасходыТовары);
		МассивСчетовЗапасов            = СформироватьМассивСчетовВИерархии(ПланыСчетов.Хозрасчетный.Товары);
		МассивСчетовЗапасовТаЖеГруппа  = СформироватьМассивСчетовВИерархии(ПланыСчетов.Хозрасчетный.Товары);
		
		СчетТЗРТовары = МассивСчетовЗапасов.Найти(ПланыСчетов.Хозрасчетный.ТранспортноЗаготовительныеРасходыТовары);
		Если СчетТЗРТовары <> Неопределено Тогда  
			 МассивСчетовЗапасов.Удалить(СчетТЗРТовары);		
		КонецЕсли;
		
    	МассивСчетовЗапасовДругаяГруппа = СформироватьМассивСчетовВИерархии(ПланыСчетов.Хозрасчетный.ПроизводственныеЗапасы);
		
		Если СуммовойУчет Тогда
			СчетТорговаяНаценка = МассивСчетовЗапасов.Найти(ПланыСчетов.Хозрасчетный.ТорговаяНаценкаНТТ);
			Если СчетТорговаяНаценка <> Неопределено Тогда 	
				МассивСчетовЗапасов.Удалить(СчетТорговаяНаценка);				
			КонецЕсли;
			
			СчетТорговаяНаценкаТажеГруппа = МассивСчетовЗапасовТаЖеГруппа.Найти(ПланыСчетов.Хозрасчетный.ТорговаяНаценкаНТТ);
            Если СчетТорговаяНаценкаТажеГруппа <> Неопределено Тогда 	
				МассивСчетовЗапасовТаЖеГруппа.Удалить(СчетТорговаяНаценкаТажеГруппа);
			КонецЕсли;   			

			СчетНТТ = МассивСчетовЗапасов.Найти(ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахНТТ);
			Если СчетНТТ <> Неопределено Тогда 			
				МассивСчетовЗапасов.Удалить(СчетНТТ);
          		МассивСчетовЗапасовТаЖеГруппа.Удалить(МассивСчетовЗапасовТаЖеГруппа.Найти(ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахНТТ));
			КонецЕсли;
			
			СчетНТТтажеГруппа = МассивСчетовЗапасовТаЖеГруппа.Найти(ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахНТТ);
			Если СчетНТТтажеГруппа <> Неопределено Тогда 			
				МассивСчетовЗапасовТаЖеГруппа.Удалить(СчетНТТтажеГруппа);
			КонецЕсли;
			
			СчетТорговаяНаценкаАТТ = МассивСчетовЗапасов.Найти(ПланыСчетов.Хозрасчетный.ТорговаяНаценкаАТТ);
			Если СчетТорговаяНаценкаАТТ <> Неопределено Тогда 	
				МассивСчетовЗапасов.Удалить(СчетТорговаяНаценкаАТТ);				
			КонецЕсли;
			
			СчетТорговаяНаценкаАТТТажеГруппа = МассивСчетовЗапасовТаЖеГруппа.Найти(ПланыСчетов.Хозрасчетный.ТорговаяНаценкаАТТ);
            Если СчетТорговаяНаценкаАТТТажеГруппа <> Неопределено Тогда 	
				МассивСчетовЗапасовТаЖеГруппа.Удалить(СчетТорговаяНаценкаАТТТажеГруппа);
			КонецЕсли;			
			
			МассивСчетовЗапасовДругаяГруппа.Добавить(ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахНТТ);
		КонецЕсли;  
		
	ИначеЕсли ВидТЗР = "РозницаСуммовойУчет" Тогда
		 МассивСчетовЗатратТЗР.Добавить(ПланыСчетов.Хозрасчетный.ТранспортноЗаготовительныеРасходыТоварыСуммовойУчет);
         МассивСчетовЗапасов.Добавить(ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахНТТ);
		 МассивСчетовЗапасовТаЖеГруппа.Добавить(ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахНТТ);
		 МассивСчетовЗапасовТаЖеГруппа.Добавить(ПланыСчетов.Хозрасчетный.ТранспортноЗаготовительныеРасходыТоварыСуммовойУчет);
        		 
		 МассивДругаяГруппа = Новый Массив;
		 МассивДругаяГруппа.Добавить(ПланыСчетов.Хозрасчетный.ПроизводственныеЗапасы);
		 МассивДругаяГруппа.Добавить(ПланыСчетов.Хозрасчетный.Товары);
		 МассивСчетовЗапасовДругаяГруппа = СформироватьМассивСчетовВИерархии(МассивДругаяГруппа);
		 
		 СчетНТТ = МассивСчетовЗапасовДругаяГруппа.Найти(ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахНТТ);
		 Если СчетНТТ <> Неопределено Тогда 			
			 МассивСчетовЗапасовДругаяГруппа.Удалить(СчетНТТ);
		 КонецЕсли;
		 
		 СчетТорговаяНаценка = МассивСчетовЗапасовДругаяГруппа.Найти(ПланыСчетов.Хозрасчетный.ТорговаяНаценкаНТТ);
		 Если СчетТорговаяНаценка <> Неопределено Тогда 	
			 МассивСчетовЗапасовДругаяГруппа.Удалить(СчетТорговаяНаценка);
		 КонецЕсли; 
		 
		 СчетТЗРТовары = МассивСчетовЗапасовДругаяГруппа.Найти(ПланыСчетов.Хозрасчетный.ТранспортноЗаготовительныеРасходыТовары);
		 Если СчетТЗРТовары <> Неопределено Тогда 	
			 МассивСчетовЗапасовДругаяГруппа.Удалить(СчетТЗРТовары);
		 КонецЕсли; 
		 
		 СчетТЗРМатериалы = МассивСчетовЗапасовДругаяГруппа.Найти(ПланыСчетов.Хозрасчетный.ТранспортноЗаготовительныеРасходыМатериалы);
		 Если СчетТЗРМатериалы <> Неопределено Тогда 	
			 МассивСчетовЗапасовДругаяГруппа.Удалить(СчетТЗРМатериалы);
		 КонецЕсли; 
	КонецЕсли; 		
	
	ИспользуемыеКлассыСчетовРасходов = УчетнаяПолитика.ИспользуемыеКлассыСчетовРасходов(Организация, Дата);
	Если ИспользуемыеКлассыСчетовРасходов = Перечисления.КлассыСчетовРасходов.Класс9 Тогда
		Использовать8Класс = Ложь;
	Иначе
		Использовать8Класс = Истина;
	КонецЕсли; 	
	
	
	ЗапросПоЗатратам = Новый Запрос;
	ЗапросПоЗатратам.Текст = 
	"ВЫБРАТЬ 
	|" + ?(ВидТЗР = "РозницаСуммовойУчет", " ""Розница""", " ХозрасчетныйОстатки.Субконто1") + " КАК НоменклатурнаяГруппаЗатрат,
	
	|	ХозрасчетныйОстатки.НалоговоеНазначение КАК НалоговоеНазначениеТЗР,
	|	Реализация.НалоговоеНазначениеЗапаса КАК НалоговоеНазначениеЗапаса,
	|	Реализация.НалоговоеНазначениеЗатрат КАК НалоговоеНазначениеЗатрат,
	|	ЕСТЬNULL(ХозрасчетныйОстатки.СуммаНУОстаток, 0) КАК СуммаЗатратНУ,
	|	ЕСТЬNULL(Поступление.СуммаПоступленияНУ, 0) КАК СуммаПоступлениеНУ,
	|	ЕСТЬNULL(Поступление.ВРамкахГруппыНУ, 0) КАК ПоступлениеВРамкахГруппыНУ,
	|	ЭтоВозвратПоставщику КАК ЭтоВозвратПоставщику,
	
	|	ЕСТЬNULL(ХозрасчетныйОстатки.СуммаОстаток, 0) КАК СуммаЗатрат,
	|	ЕСТЬNULL(Поступление.СуммаПоступления, 0) КАК СуммаПоступление,
	|	ЕСТЬNULL(Поступление.ВРамкахГруппы, 0) КАК ПоступлениеВРамкахГруппы,
	|	Реализация.СчетДт КАК РеализацияСчетДт,
	|	Реализация.СубконтоДт1 КАК РеализацияСубконтоДт1,
	|	Реализация.СубконтоДт2 КАК РеализацияСубконтоДт2,
	|	Реализация.СубконтоДт3 КАК РеализацияСубконтоДт3,
	|	ЕСТЬNULL(ВЫБОР
	|			КОГДА Реализация.ПеремещениеВРамкахГруппы < 0
	|				ТОГДА 0
	|			ИНАЧЕ Реализация.ПеремещениеВРамкахГруппы
	|		КОНЕЦ, 0) КАК РеализацияВРамкахГруппы,
	|	ЕСТЬNULL(ВЫБОР
	|			КОГДА Реализация.СуммаРеализации < 0
	|				ТОГДА 0
	|			ИНАЧЕ Реализация.СуммаРеализации
	|		КОНЕЦ, 0) КАК СуммаРеализации,
	|	ЕСТЬNULL(НачОстатки.СуммаОстаток, 0) КАК НачОстаток,
	
	|	ЕСТЬNULL(ВЫБОР
	|			КОГДА Реализация.ПеремещениеВРамкахГруппыНУ < 0
	|				ТОГДА 0
	|			ИНАЧЕ Реализация.ПеремещениеВРамкахГруппыНУ
	|		КОНЕЦ, 0) КАК РеализацияВРамкахГруппыНУ,
	|	ЕСТЬNULL(ВЫБОР
	|			КОГДА Реализация.СуммаРеализацииНУ < 0
	|				ТОГДА 0
	|			ИНАЧЕ Реализация.СуммаРеализацииНУ
	|		КОНЕЦ, 0) КАК СуммаРеализацииНУ,
	|	ЕСТЬNULL(НачОстатки.СуммаНУОстаток, 0) КАК НачОстатокНУ
	
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(&КонГраница, Счет В (&МассивСчетовЗатрат),&ПорядокСубконтоТЗР, Организация = &Организация) КАК ХозрасчетныйОстатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ  
	|" + ?(ВидТЗР = "РозницаСуммовойУчет", """Розница""", " ХозрасчетныйОборотыДтКт.СубконтоДт1.НоменклатурнаяГруппа") + " КАК НоменклатурнаяГруппа,
	|			СУММА(ВЫБОР
	|					КОГДА ХозрасчетныйОборотыДтКт.СчетКт В (&МассивСчетовЗапасовТаЖеГруппа)
	|						ТОГДА ХозрасчетныйОборотыДтКт.СуммаОборот
	|					ИНАЧЕ 0
	|				КОНЕЦ) КАК ВРамкахГруппы,
	|			СУММА(ХозрасчетныйОборотыДтКт.СуммаОборот) КАК СуммаПоступления,
	|			СУММА(ВЫБОР
	|					КОГДА ХозрасчетныйОборотыДтКт.СчетКт В (&МассивСчетовЗапасовТаЖеГруппа)
	|						ТОГДА ХозрасчетныйОборотыДтКт.СуммаНУОборотДт
	|					ИНАЧЕ 0
	|				КОНЕЦ) КАК ВРамкахГруппыНУ,
	|			СУММА(ХозрасчетныйОборотыДтКт.СуммаНУОборотДт) КАК СуммаПоступленияНУ	
	|		ИЗ
	|			РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(&НачМесяца, &КонМесяца, , СчетДт В (&МассивСчетовЗапасов)," + ?(ВидТЗР = "РозницаСуммовойУчет", "", "&Номенклатура")+ ", , , Организация = &Организация) КАК ХозрасчетныйОборотыДтКт
	|		
	|		СГРУППИРОВАТЬ ПО 
	|" + ?(ВидТЗР = "РозницаСуммовойУчет", """Розница""", " ХозрасчетныйОборотыДтКт.СубконтоДт1.НоменклатурнаяГруппа") + ") КАК Поступление
    |		ПО " + ?(ВидТЗР = "РозницаСуммовойУчет", "ИСТИНА","ХозрасчетныйОстатки.Субконто1 = Поступление.НоменклатурнаяГруппа") +
	"		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ 
	|" + ?(ВидТЗР = "РозницаСуммовойУчет", """Розница""", " ХозрасчетныйОстатки.Субконто1.НоменклатурнаяГруппа") + " КАК НоменклатурнаяГруппа, 
    |			СУММА(ХозрасчетныйОстатки.СуммаОстаток) КАК СуммаОстаток,
	|			СУММА(ХозрасчетныйОстатки.СуммаНУОстаток) КАК СуммаНУОстаток	
	|		ИЗ
	|			РегистрБухгалтерии.Хозрасчетный.Остатки(&НачМесяца, Счет В (&МассивСчетовЗапасов)," + ?(ВидТЗР = "РозницаСуммовойУчет", "", "&Номенклатура")+ ", Организация = &Организация) КАК ХозрасчетныйОстатки
	|		
	|		СГРУППИРОВАТЬ ПО 
	|" + ?(ВидТЗР = "РозницаСуммовойУчет", " ""Розница""", " ХозрасчетныйОстатки.Субконто1.НоменклатурнаяГруппа") + ") КАК НачОстатки 
	|		ПО " + ?(ВидТЗР = "РозницаСуммовойУчет", "ИСТИНА","ХозрасчетныйОстатки.Субконто1 = НачОстатки.НоменклатурнаяГруппа") +
	"		ЛЕВОЕ СОЕДИНЕНИЕ " +
	?(Использовать8Класс, "(ВЫБРАТЬ  
	
	|	ВЫБОР
	|		КОГДА ДвиженияССубконто.СчетДополнительный В (&МассивСчетовЗапасов)
	|			ТОГДА ХозрасчетныйДвиженияССубконто1.НалоговоеНазначениеДт
	|		    ИНАЧЕ ДвиженияССубконто.НалоговоеНазначениеДт
	|	КОНЕЦ КАК НалоговоеНазначениеЗатрат,
	|	ВЫБОР
	|		КОГДА ДвиженияССубконто.СчетДополнительный В (&МассивСчетовЗапасов)
	|			ТОГДА ХозрасчетныйДвиженияССубконто1.НалоговоеНазначениеКт
	|		    ИНАЧЕ ДвиженияССубконто.НалоговоеНазначениеКт
	|	КОНЕЦ КАК НалоговоеНазначениеЗапаса,
	|ВЫБОР                         
	|	КОГДА ДвиженияССубконто.Регистратор ССЫЛКА Документ.ВозвратТоваровПоставщику
	|		ТОГДА Истина
	|	ИНАЧЕ Ложь
	|КОНЕЦ КАК ЭтоВозвратПоставщику,
	
	|ВЫБОР                         
	|	КОГДА ДвиженияССубконто.Регистратор ССЫЛКА Документ.ВозвратТоваровПоставщику
	|		ТОГДА ДвиженияССубконто.Регистратор.СчетУчетаРасходовБУ
	|	ИНАЧЕ ДвиженияССубконто.СчетДт
	|КОНЕЦ КАК СчетДт,
	|ВЫБОР
	|	КОГДА ДвиженияССубконто.Регистратор ССЫЛКА Документ.ВозвратТоваровПоставщику
	|		ТОГДА ДвиженияССубконто.Регистратор.СубконтоРасходов1
	|	ИНАЧЕ ДвиженияССубконто.СубконтоДт1
	|КОНЕЦ КАК СубконтоДт1,
	|ВЫБОР
	|	КОГДА ДвиженияССубконто.Регистратор ССЫЛКА Документ.ВозвратТоваровПоставщику
	|		ТОГДА ДвиженияССубконто.Регистратор.СубконтоРасходов2
	|	ИНАЧЕ ДвиженияССубконто.СубконтоДт2
	|КОНЕЦ КАК СубконтоДт2,
	|ВЫБОР
	|	КОГДА ДвиженияССубконто.Регистратор ССЫЛКА Документ.ВозвратТоваровПоставщику
	|			ТОГДА ДвиженияССубконто.Регистратор.СубконтоРасходов3
	|		ИНАЧЕ ДвиженияССубконто.СубконтоДт3
	|	КОНЕЦ КАК СубконтоДт3, " + 
	?(ВидТЗР = "РозницаСуммовойУчет", """Розница""", 
	"   ВЫБОР
	|		КОГДА ДвиженияССубконто.СчетДополнительный В (&МассивСчетовЗапасов)
	|			ТОГДА ВЫБОР
	|					КОГДА ХозрасчетныйДвиженияССубконто1.СубконтоКт1 ССЫЛКА Справочник.Номенклатура
	|						ТОГДА ЕСТЬNULL(ХозрасчетныйДвиженияССубконто1.СубконтоКт1.НоменклатурнаяГруппа, &ПустаяНомГруппа)
	|					КОГДА ХозрасчетныйДвиженияССубконто1.СубконтоКт2 ССЫЛКА Справочник.Номенклатура
	|						ТОГДА ЕСТЬNULL(ХозрасчетныйДвиженияССубконто1.СубконтоКт2.НоменклатурнаяГруппа, &ПустаяНомГруппа)
	|					КОГДА ХозрасчетныйДвиженияССубконто1.СубконтоКт3 ССЫЛКА Справочник.Номенклатура
	|						ТОГДА ЕСТЬNULL(ХозрасчетныйДвиженияССубконто1.СубконтоКт3.НоменклатурнаяГруппа, &ПустаяНомГруппа)
	|				КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ДвиженияССубконто.СубконтоКт1 ССЫЛКА Справочник.Номенклатура
	|					ТОГДА ЕСТЬNULL(ДвиженияССубконто.СубконтоКт1.НоменклатурнаяГруппа, &ПустаяНомГруппа)
	|				КОГДА ДвиженияССубконто.СубконтоКт2 ССЫЛКА Справочник.Номенклатура
	|					ТОГДА ЕСТЬNULL(ДвиженияССубконто.СубконтоКт2.НоменклатурнаяГруппа, &ПустаяНомГруппа)
	|				КОГДА ДвиженияССубконто.СубконтоКт3 ССЫЛКА Справочник.Номенклатура
	|					ТОГДА ЕСТЬNULL(ДвиженияССубконто.СубконтоКт3.НоменклатурнаяГруппа, &ПустаяНомГруппа)
	|			КОНЕЦ
	|	КОНЕЦ ") + " КАК НоменклатурнаяГруппа,
	|	СУММА(ДвиженияССубконто.Сумма) КАК СуммаРеализации,
	|	СУММА(ВЫБОР
	|			КОГДА ДвиженияССубконто.СчетДт В (&МассивСчетовЗапасовТаЖеГруппа)
	|				ТОГДА ДвиженияССубконто.Сумма
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ПеремещениеВРамкахГруппы,
	
	|	СУММА(ДвиженияССубконто.СуммаНУКт) КАК СуммаРеализацииНУ,
	|	СУММА(ВЫБОР
	|			КОГДА ДвиженияССубконто.СчетДт В (&МассивСчетовЗапасовТаЖеГруппа)
	|				ТОГДА ДвиженияССубконто.СуммаНУКт
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ПеремещениеВРамкахГруппыНУ
	
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ДвиженияССубконто(
	|			&НачМесяца,
	|			&КонМесяца,
	|			(СчетДополнительный В (&МассивСчетовЗапасов)
	|				ИЛИ СчетКт В (&МассивСчетовЗапасов)
	|					И СчетДополнительный = &ПустойСчет) И Организация = &Организация) КАК ДвиженияССубконто
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.ДвиженияССубконто(
	|				&НачМесяца,
	|				&КонМесяца,
	|				(СчетДополнительный В (&МассивСчетовЗапасов)
	|					ИЛИ СчетКт В (&МассивСчетовЗапасов)
	|						И СчетДополнительный = &ПустойСчет) И Организация = &Организация) КАК ХозрасчетныйДвиженияССубконто1
	|		ПО ДвиженияССубконто.Регистратор = ХозрасчетныйДвиженияССубконто1.Регистратор
	|			И (ВЫБОР
	|				КОГДА ДвиженияССубконто.СчетДополнительный В (&МассивСчетовЗапасов)
	|					ТОГДА ДвиженияССубконто.СчетДополнительный = ХозрасчетныйДвиженияССубконто1.СчетКт
	|				ИНАЧЕ ДвиженияССубконто.СчетКт = ХозрасчетныйДвиженияССубконто1.СчетДополнительный
	|			КОНЕЦ)
	|			И (ВЫБОР
	|				КОГДА ДвиженияССубконто.СчетДополнительный В (&МассивСчетовЗапасов)
	|					ТОГДА ДвиженияССубконто.НомерИсходнойПроводки + 1 = ХозрасчетныйДвиженияССубконто1.НомерСтроки
	|				ИНАЧЕ ДвиженияССубконто.НомерСтроки = ХозрасчетныйДвиженияССубконто1.НомерИсходнойПроводки + 1
	|			КОНЕЦ)
	|ГДЕ
	|	ВЫБОР
	|			КОГДА ДвиженияССубконто.СчетДополнительный В (&МассивСчетовЗапасов)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ХозрасчетныйДвиженияССубконто1.СчетДт ЕСТЬ NULL 
	|		КОНЕЦ
	|   И ДвиженияССубконто.Активность = ИСТИНА
	|СГРУППИРОВАТЬ ПО
	
	|	ВЫБОР
	|		КОГДА ДвиженияССубконто.СчетДополнительный В (&МассивСчетовЗапасов)
	|			ТОГДА ХозрасчетныйДвиженияССубконто1.НалоговоеНазначениеДт
	|		    ИНАЧЕ ДвиженияССубконто.НалоговоеНазначениеДт
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ДвиженияССубконто.СчетДополнительный В (&МассивСчетовЗапасов)
	|			ТОГДА ХозрасчетныйДвиженияССубконто1.НалоговоеНазначениеКт
	|		    ИНАЧЕ ДвиженияССубконто.НалоговоеНазначениеКт
	|	КОНЕЦ,
	|ВЫБОР                         
	|	КОГДА ДвиженияССубконто.Регистратор ССЫЛКА Документ.ВозвратТоваровПоставщику
	|		ТОГДА Истина
	|	ИНАЧЕ Ложь
	|КОНЕЦ,
	
	|	ВЫБОР
	|		КОГДА ДвиженияССубконто.Регистратор ССЫЛКА Документ.ВозвратТоваровПоставщику
	|			ТОГДА ДвиженияССубконто.Регистратор.СчетУчетаРасходовБУ
	|		ИНАЧЕ ДвиженияССубконто.СчетДт
	|	КОНЕЦ, " + 
	?(ВидТЗР = "РозницаСуммовойУчет", """Розница"",", 
	"	ВЫБОР
	|		КОГДА ДвиженияССубконто.СчетДополнительный В (&МассивСчетовЗапасов)
	|			ТОГДА ВЫБОР
	|					КОГДА ХозрасчетныйДвиженияССубконто1.СубконтоКт1 ССЫЛКА Справочник.Номенклатура
	|						ТОГДА ЕСТЬNULL(ХозрасчетныйДвиженияССубконто1.СубконтоКт1.НоменклатурнаяГруппа, &ПустаяНомГруппа)
	|					КОГДА ХозрасчетныйДвиженияССубконто1.СубконтоКт2 ССЫЛКА Справочник.Номенклатура
	|						ТОГДА ЕСТЬNULL(ХозрасчетныйДвиженияССубконто1.СубконтоКт2.НоменклатурнаяГруппа, &ПустаяНомГруппа)
	|					КОГДА ХозрасчетныйДвиженияССубконто1.СубконтоКт3 ССЫЛКА Справочник.Номенклатура
	|						ТОГДА ЕСТЬNULL(ХозрасчетныйДвиженияССубконто1.СубконтоКт3.НоменклатурнаяГруппа, &ПустаяНомГруппа)
	|				КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ДвиженияССубконто.СубконтоКт1 ССЫЛКА Справочник.Номенклатура
	|					ТОГДА ЕСТЬNULL(ДвиженияССубконто.СубконтоКт1.НоменклатурнаяГруппа, &ПустаяНомГруппа)
	|				КОГДА ДвиженияССубконто.СубконтоКт2 ССЫЛКА Справочник.Номенклатура
	|					ТОГДА ЕСТЬNULL(ДвиженияССубконто.СубконтоКт2.НоменклатурнаяГруппа, &ПустаяНомГруппа)
	|				КОГДА ДвиженияССубконто.СубконтоКт3 ССЫЛКА Справочник.Номенклатура
	|					ТОГДА ЕСТЬNULL(ДвиженияССубконто.СубконтоКт3.НоменклатурнаяГруппа, &ПустаяНомГруппа)
	|			КОНЕЦ
	|	КОНЕЦ,") +  
	"	ВЫБОР
	|		КОГДА ДвиженияССубконто.Регистратор ССЫЛКА Документ.ВозвратТоваровПоставщику
	|			ТОГДА ДвиженияССубконто.Регистратор.СубконтоРасходов1
	|		ИНАЧЕ ДвиженияССубконто.СубконтоДт1
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ДвиженияССубконто.Регистратор ССЫЛКА Документ.ВозвратТоваровПоставщику
	|			ТОГДА ДвиженияССубконто.Регистратор.СубконтоРасходов2
	|		ИНАЧЕ ДвиженияССубконто.СубконтоДт2
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ДвиженияССубконто.Регистратор ССЫЛКА Документ.ВозвратТоваровПоставщику
	|			ТОГДА ДвиженияССубконто.Регистратор.СубконтоРасходов3
	|		ИНАЧЕ ДвиженияССубконто.СубконтоДт3
	|	КОНЕЦ ", 	
	"(ВЫБРАТЬ 
	|" + ?(ВидТЗР = "РозницаСуммовойУчет", " ""Розница""", " ХозрасчетныйОборотыДтКт.СубконтоКт1.НоменклатурнаяГруппа") + " КАК НоменклатурнаяГруппа,
	|			СУММА(ВЫБОР
	|					КОГДА ХозрасчетныйОборотыДтКт.СчетДт В (&МассивСчетовЗапасовТаЖеГруппа)
	|						ТОГДА ХозрасчетныйОборотыДтКт.СуммаОборот
	|					ИНАЧЕ 0
	|				КОНЕЦ) КАК ПеремещениеВРамкахГруппы,
	|			СУММА(ХозрасчетныйОборотыДтКт.СуммаОборот) КАК СуммаРеализации,
	|			СУММА(ВЫБОР
	|					КОГДА ХозрасчетныйОборотыДтКт.СчетДт В (&МассивСчетовЗапасовТаЖеГруппа)
	|						ТОГДА ХозрасчетныйОборотыДтКт.СуммаНУОборотКт
	|					ИНАЧЕ 0
	|				КОНЕЦ) КАК ПеремещениеВРамкахГруппыНУ,
	|			СУММА(ХозрасчетныйОборотыДтКт.СуммаНУОборотКт) КАК СуммаРеализацииНУ,
	|			ХозрасчетныйОборотыДтКт.НалоговоеНазначениеДт КАК НалоговоеНазначениеЗатрат,
	|			ХозрасчетныйОборотыДтКт.НалоговоеНазначениеКт КАК НалоговоеНазначениеЗапаса,
	|ВЫБОР                         
	|	КОГДА ХозрасчетныйОборотыДтКт.Регистратор ССЫЛКА Документ.ВозвратТоваровПоставщику
	|		ТОГДА Истина
	|	ИНАЧЕ Ложь
	|КОНЕЦ КАК ЭтоВозвратПоставщику,
	|			ВЫБОР
	|				КОГДА ХозрасчетныйОборотыДтКт.Регистратор ССЫЛКА Документ.ВозвратТоваровПоставщику
	|					ТОГДА ХозрасчетныйОборотыДтКт.Регистратор.СчетУчетаРасходовБУ
	|				ИНАЧЕ ХозрасчетныйОборотыДтКт.СчетДт
	|			КОНЕЦ КАК СчетДт,
	|			ВЫБОР
	|				КОГДА ХозрасчетныйОборотыДтКт.Регистратор ССЫЛКА Документ.ВозвратТоваровПоставщику
	|					ТОГДА ХозрасчетныйОборотыДтКт.Регистратор.СубконтоРасходов1
	|				ИНАЧЕ ХозрасчетныйОборотыДтКт.СубконтоДт1
	|			КОНЕЦ КАК СубконтоДт1,
	|			ВЫБОР
	|				КОГДА ХозрасчетныйОборотыДтКт.Регистратор ССЫЛКА Документ.ВозвратТоваровПоставщику
	|					ТОГДА ХозрасчетныйОборотыДтКт.Регистратор.СубконтоРасходов2
	|				ИНАЧЕ ХозрасчетныйОборотыДтКт.СубконтоДт2
	|			КОНЕЦ КАК СубконтоДт2,
	|			ВЫБОР
	|				КОГДА ХозрасчетныйОборотыДтКт.Регистратор ССЫЛКА Документ.ВозвратТоваровПоставщику
	|					ТОГДА ХозрасчетныйОборотыДтКт.Регистратор.СубконтоРасходов3
	|				ИНАЧЕ ХозрасчетныйОборотыДтКт.СубконтоДт3
	|			КОНЕЦ КАК СубконтоДт3 	
	|		ИЗ
	|			РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(&НачМесяца, &КонМесяца, Регистратор , , , СчетКт В (&МассивСчетовЗапасов)," + ?(ВидТЗР = "РозницаСуммовойУчет", "", "&Номенклатура") + ", Организация = &Организация) КАК ХозрасчетныйОборотыДтКт
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ХозрасчетныйОборотыДтКт.НалоговоеНазначениеДт, 
	|			ХозрасчетныйОборотыДтКт.НалоговоеНазначениеКт, 
	|ВЫБОР                         
	|	КОГДА ХозрасчетныйОборотыДтКт.Регистратор ССЫЛКА Документ.ВозвратТоваровПоставщику
	|		ТОГДА Истина
	|	ИНАЧЕ Ложь
	|КОНЕЦ,
	|			ВЫБОР
	|				КОГДА ХозрасчетныйОборотыДтКт.Регистратор ССЫЛКА Документ.ВозвратТоваровПоставщику
	|					ТОГДА ХозрасчетныйОборотыДтКт.Регистратор.СчетУчетаРасходовБУ
	|				ИНАЧЕ ХозрасчетныйОборотыДтКт.СчетДт
	|			КОНЕЦ,
	|			ВЫБОР
	|				КОГДА ХозрасчетныйОборотыДтКт.Регистратор ССЫЛКА Документ.ВозвратТоваровПоставщику
	|					ТОГДА ХозрасчетныйОборотыДтКт.Регистратор.СубконтоРасходов1
	|				ИНАЧЕ ХозрасчетныйОборотыДтКт.СубконтоДт1
	|			КОНЕЦ,
	|			ВЫБОР
	|				КОГДА ХозрасчетныйОборотыДтКт.Регистратор ССЫЛКА Документ.ВозвратТоваровПоставщику
	|					ТОГДА ХозрасчетныйОборотыДтКт.Регистратор.СубконтоРасходов2
	|				ИНАЧЕ ХозрасчетныйОборотыДтКт.СубконтоДт2
	|			КОНЕЦ,
	|			ВЫБОР
	|				КОГДА ХозрасчетныйОборотыДтКт.Регистратор ССЫЛКА Документ.ВозвратТоваровПоставщику
	|					ТОГДА ХозрасчетныйОборотыДтКт.Регистратор.СубконтоРасходов3
	|				ИНАЧЕ ХозрасчетныйОборотыДтКт.СубконтоДт3
	|			КОНЕЦ, 
	|" + ?(ВидТЗР = "РозницаСуммовойУчет", " ""Розница""", " ХозрасчетныйОборотыДтКт.СубконтоКт1.НоменклатурнаяГруппа")) + ") КАК Реализация
	|		ПО " + ?(ВидТЗР = "РозницаСуммовойУчет", "ИСТИНА","ХозрасчетныйОстатки.Субконто1 = Реализация.НоменклатурнаяГруппа") +
	" ИТОГИ
	|	МИНИМУМ(СуммаЗатрат),
	|	МИНИМУМ(СуммаПоступление),
	|	МИНИМУМ(ПоступлениеВРамкахГруппы),
	|	СУММА(РеализацияВРамкахГруппы),
	|	СУММА(СуммаРеализации),
	|	МИНИМУМ(НачОстаток),
	|	МИНИМУМ(СуммаЗатратНУ),
	|	МИНИМУМ(СуммаЗатратНУ),
	|	МИНИМУМ(СуммаПоступлениеНУ),
	|	МИНИМУМ(ПоступлениеВРамкахГруппыНУ),
	|	СУММА(РеализацияВРамкахГруппыНУ),
	|	СУММА(СуммаРеализацииНУ),
	|	МИНИМУМ(НачОстатокНУ),
	|	МИНИМУМ(ЭтоВозвратПоставщику)
	|ПО
	|	НалоговоеНазначениеТЗР,
	|	НоменклатурнаяГруппаЗатрат"; 
	  	
	
	ЗапросПоЗатратам.УстановитьПараметр("НачМесяца",                       мНачМесяца);  	
	ЗапросПоЗатратам.УстановитьПараметр("КонМесяца",                       мКонМесяца);
	ЗапросПоЗатратам.УстановитьПараметр("КонГраница",                      мКонГраница); 
	
	ЗапросПоЗатратам.УстановитьПараметр("МассивСчетовЗатрат",              МассивСчетовЗатратТЗР);
	ЗапросПоЗатратам.УстановитьПараметр("Организация",                     СтруктураШапкиДокумента.Организация);
    ЗапросПоЗатратам.УстановитьПараметр("МассивСчетовЗапасов",             МассивСчетовЗапасов);
	ЗапросПоЗатратам.УстановитьПараметр("МассивСчетовЗапасовТаЖеГруппа",   МассивСчетовЗапасовТаЖеГруппа);   
	ЗапросПоЗатратам.УстановитьПараметр("МассивСчетовЗапасовДругаяГруппа", МассивСчетовЗапасовДругаяГруппа);
	ЗапросПоЗатратам.УстановитьПараметр("Номенклатура",                    ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);
   	
	ПорядокСубконтоТЗР = Новый Массив; 

	Если ВидТЗР <> "РозницаСуммовойУчет" Тогда
	    ПорядокСубконтоТЗР.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы);
    КонецЕсли;
		
	ЗапросПоЗатратам.УстановитьПараметр("ПорядокСубконтоТЗР", ПорядокСубконтоТЗР); 	
	ЗапросПоЗатратам.УстановитьПараметр("ПустаяНомГруппа", Справочники.НоменклатурныеГруппы.ПустаяСсылка());
	ЗапросПоЗатратам.УстановитьПараметр("ПустойСчет", ПланыСчетов.Хозрасчетный.ПустаяСсылка()); 
	
	Если ОбщегоНазначенияБПВызовСервераПовтИсп.ИспользоватьУправляемыеБлокировки() Тогда
		
		//Определяем все счета, записи с которыми требуется заблокировать
		ЗапросБлокируемыеСчета = Новый Запрос;
		ЗапросБлокируемыеСчета.Текст ="
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Счета.Счет КАК Счет
		|ИЗ
		|(
		|ВЫБРАТЬ
		|	СчетаЗатратТЗР.Ссылка КАК Счет
		|ИЗ
		|	ПланСчетов.Хозрасчетный	КАК СчетаЗатратТЗР
		|ГДЕ
		|	СчетаЗатратТЗР.Ссылка В (&МассивСчетовЗатрат)
        |ОБЪЕДИНИТЬ ВСЕ
		|ВЫБРАТЬ
		|	СчетаЗапасов.Ссылка	КАК Счет
		|ИЗ
		|	ПланСчетов.Хозрасчетный КАК СчетаЗапасов
		|ГДЕ
		|	СчетаЗапасов.Ссылка В (&МассивСчетовЗапасов)
		|ОБЪЕДИНИТЬ ВСЕ 
		|ВЫБРАТЬ
		|	СчетаЗапасовТаЖеГруппа.Ссылка КАК Счет
		|ИЗ
		|	ПланСчетов.Хозрасчетный КАК СчетаЗапасовТаЖеГруппа
		|ГДЕ
		|	СчетаЗапасовТаЖеГруппа.Ссылка В (&МассивСчетовЗапасовТаЖеГруппа)
		|ОБЪЕДИНИТЬ ВСЕ
		|ВЫБРАТЬ
		|	СчетаЗапасовДругаяГруппа.Ссылка КАК Счет
		|ИЗ
		|	ПланСчетов.Хозрасчетный	КАК СчетаЗапасовДругаяГруппа
		|ГДЕ
		|	СчетаЗапасовДругаяГруппа.Ссылка В (&МассивСчетовЗапасовДругаяГруппа)		
		|) КАК Счета
		|";
		ЗапросБлокируемыеСчета.УстановитьПараметр("МассивСчетовЗатрат",              МассивСчетовЗатратТЗР);
	    ЗапросБлокируемыеСчета.УстановитьПараметр("МассивСчетовЗапасов",             МассивСчетовЗапасов);
		ЗапросБлокируемыеСчета.УстановитьПараметр("МассивСчетовЗапасовТаЖеГруппа",   МассивСчетовЗапасовТаЖеГруппа);   
		ЗапросБлокируемыеСчета.УстановитьПараметр("МассивСчетовЗапасовДругаяГруппа", МассивСчетовЗапасовДругаяГруппа);
		
		ИсточникДанныхБлокируемыхСчетов = ЗапросБлокируемыеСчета.Выполнить();
		
		
		ПериодБлокировки = ?(мКонГраница.Значение > мКонМесяца, мКонГраница.Значение, мКонМесяца);
		
		// Блокировка регистра бухгалтерии.
		СтруктураПараметровБлокировки = Новый Структура("ТипТаблицы, ИмяТаблицы, ИсточникДанных", 
														"РегистрБухгалтерии", "Хозрасчетный", ИсточникДанныхБлокируемыхСчетов);
														
		СтруктураЗначенийБлокировки = Новый Структура("Период, Организация", 
													  Новый Диапазон(, ПериодБлокировки), СтруктураШапкиДокумента.Организация);
													  
		СтруктураИсточникаДанных = Новый Структура("Счет", "Счет");
		
		ОбщегоНазначенияБПВызовСервера.УстановитьУправляемуюБлокировку(СтруктураПараметровБлокировки, СтруктураЗначенийБлокировки, СтруктураИсточникаДанных);
		
	КонецЕсли;
		
	Если ВидТЗР = "Товары" Тогда   
		СчетДтТЗР = ПланыСчетов.Хозрасчетный.ТранспортноЗаготовительныеРасходыМатериалы;
	ИначеЕсли ВидТЗР = "Материалы" Тогда   
		СчетДтТЗР = ПланыСчетов.Хозрасчетный.ТранспортноЗаготовительныеРасходыТовары;	
	КонецЕсли;
	
	ВыборкаНН = ЗапросПоЗатратам.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "НалоговоеНазначениеТЗР");
	
	КорректировкиНН_ТЗР = Движения.КорректировкиНалоговыхНазначенийТЗР.ВыгрузитьКолонки();
	
	Пока ВыборкаНН.Следующий() Цикл
	
		ВыборкаНГ = ВыборкаНН.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "НоменклатурнаяГруппаЗатрат");
		
		Пока ВыборкаНГ.Следующий() Цикл  

	        СуммаПоступление     = ВыборкаНГ.СуммаПоступление - ВыборкаНГ.ПоступлениеВРамкахГруппы;
			Знаменатель          = СуммаПоступление + ВыборкаНГ.НачОстаток;
			СуммаРеализации      = ВыборкаНГ.СуммаРеализации - ВыборкаНГ.РеализацияВРамкахГруппы;
			
	        СуммаПоступлениеНУ     = ВыборкаНГ.СуммаПоступлениеНУ - ВыборкаНГ.ПоступлениеВРамкахГруппыНУ;
			ЗнаменательНУ          = СуммаПоступлениеНУ + ВыборкаНГ.НачОстатокНУ;
			СуммаРеализацииНУ      = ВыборкаНГ.СуммаРеализацииНУ - ВыборкаНГ.РеализацияВРамкахГруппыНУ;
			
			Если Знаменатель <= 0 или СуммаРеализации <= 0 Тогда  			
				ИсходнаяСуммаТЗР = 0;
			Иначе
				КоэфТЗР              = СуммаРеализации/Знаменатель; 			
		       	СуммаТЗР   = Мин(Окр(ВыборкаНГ.СуммаЗатрат * КоэфТЗР, 2),     ВыборкаНГ.СуммаЗатрат);
				ИсходнаяСуммаТЗР     = СуммаТЗР;
			КонецЕсли;	
			
			Если ЗнаменательНУ <= 0 или СуммаРеализацииНУ <= 0 Тогда  			
				ИсходнаяСуммаТЗРНУ = 0;
			Иначе
				КоэфТЗРНУ            = СуммаРеализацииНУ/ЗнаменательНУ; 			
				СуммаТЗРНУ = Мин(Окр(ВыборкаНГ.СуммаЗатратНУ * КоэфТЗРНУ, 2), ВыборкаНГ.СуммаЗатратНУ);
				ИсходнаяСуммаТЗРНУ   = СуммаТЗРНУ;
			КонецЕсли;	
			
			Если    ИсходнаяСуммаТЗР   <= 0
				ИЛИ (СтруктураШапкиДокумента.ЕстьНалогНаПрибыльДо2015 И ИсходнаяСуммаТЗРНУ <= 0) Тогда
				Продолжить;
			КонецЕсли;
			
			Выборка = ВыборкаНГ.Выбрать(); 
			      		
			Пока Выборка.Следующий() Цикл  
				
				Если МассивСчетовЗапасовТаЖеГруппа.Найти(Выборка.РеализацияСчетДт) <> Неопределено  Тогда
					Продолжить;
				КонецЕсли;
				
				Сумма   = РассчитатьСумму(СуммаРеализации,   ИсходнаяСуммаТЗР,   Выборка.СуммаРеализации);
				СуммаНУ = РассчитатьСумму(СуммаРеализацииНУ, ИсходнаяСуммаТЗРНУ, Выборка.СуммаРеализацииНУ);
				
				Если  (Сумма   <= 0)
					И (СуммаНУ <= 0) Тогда  							
					Продолжить;
				КонецЕсли;
				
				Если Сумма < 0 Тогда
					Сумма = 0
				КонецЕсли;
				
				Если СуммаНУ < 0 Тогда
					СуммаНУ = 0
				КонецЕсли;
				
				Если Выборка.РеализацияСчетДт <> ПланыСчетов.Хозрасчетный.КорректировкиНалоговогоКредита Тогда
					
					ПроводкаБУ                                 = мПроводкиБУ.Добавить();
					ПроводкаБУ.Период                          = Дата;
					ПроводкаБУ.Организация                     = СтруктураШапкиДокумента.Организация;
					
					ПроводкаБУ.СчетКт                          = МассивСчетовЗатратТЗР[0];
					Если ВидТЗР <> "РозницаСуммовойУчет" Тогда   				
						ПроводкаБУ.СубконтоКт.НоменклатурныеГруппы = Выборка.НоменклатурнаяГруппаЗатрат;
					КонецЕсли; 
					
					ПроводкаБУ.НомерЖурнала                    = "";
					ПроводкаБУ.Сумма                           = Сумма;
					
					ПроводкаБУ.НалоговоеНазначениеКт = Выборка.НалоговоеНазначениеТЗР;
					ПроводкаБУ.СуммаНУКт 			 = СуммаНУ;
					
					Если МассивСчетовЗапасовДругаяГруппа.Найти(Выборка.РеализацияСчетДт) = Неопределено  Тогда
						СчетДт                                 = Выборка.РеализацияСчетДт;   
						ПроводкаБУ.СчетДт                      = СчетДт; 
						КоличествоСубконто                     = СчетДт.ВидыСубконто.Количество();
						
						БухгалтерскийУчет.УстановитьСубконто(ПроводкаБУ.СчетДт, ПроводкаБУ.СубконтоДт, 1, Выборка.РеализацияСубконтоДт1);
						БухгалтерскийУчет.УстановитьСубконто(ПроводкаБУ.СчетДт, ПроводкаБУ.СубконтоДт, 2, Выборка.РеализацияСубконтоДт2);
						БухгалтерскийУчет.УстановитьСубконто(ПроводкаБУ.СчетДт, ПроводкаБУ.СубконтоДт, 3, Выборка.РеализацияСубконтоДт3);
						
						ПроводкаБУ.Содержание                  = НСтр("ru='Распределение ТЗР ';uk='Розподіл ТЗВ '",Локализация.КодЯзыкаИнформационнойБазы()) + ПредставлениеПериода(мНачМесяца, мКонМесяца, "ФП=Истина");
						
						Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыльДо2015 Тогда
							
							Если Выборка.ЭтоВозвратПоставщику = Истина Тогда
								ПроводкаБУ.НалоговоеНазначениеДт = Справочники.НалоговыеНазначенияАктивовИЗатрат.НКУ_НеХозДеятельность;
							ИНаче	
								ПроводкаБУ.НалоговоеНазначениеДт = Выборка.НалоговоеНазначениеЗатрат;
							КонецЕсли;
							
							Если НЕ ПроводкаБУ.НалоговоеНазначениеДт = Справочники.НалоговыеНазначенияАктивовИЗатрат.НКУ_НеХозДеятельность Тогда
								ПроводкаБУ.СуммаНУДт = СуммаНУ;
							КонецЕсли;
							
						Иначе
							
							Если СчетДт.УчетПоНалоговымНазначениямНДС Тогда
								ПроводкаБУ.НалоговоеНазначениеДт = Выборка.НалоговоеНазначениеЗатрат;	
							КонецЕсли; 							
							
						КонецЕсли;
					Иначе
						
						Если Выборка.РеализацияСчетДт = ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахНТТ  Тогда
							ПроводкаБУ.СчетДт = ПланыСчетов.Хозрасчетный.ТранспортноЗаготовительныеРасходыТоварыСуммовойУчет;
						Иначе
							ПроводкаБУ.СчетДт = СчетДтТЗР;
						КонецЕсли;
						
						Если Выборка.РеализацияСчетДт <> ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахНТТ Тогда
							НомерСубконтоНоменклатура = Выборка.РеализацияСчетДт.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);
							Если НомерСубконтоНоменклатура = Неопределено Тогда 					
								БухгалтерскийУчет.УстановитьСубконто(ПроводкаБУ.СчетДт, ПроводкаБУ.СубконтоДт, 1, Выборка.НоменклатурнаяГруппаЗатрат);
							Иначе
								НомерСубконто              = НомерСубконтоНоменклатура.НомерСтроки;
								БухгалтерскийУчет.УстановитьСубконто(ПроводкаБУ.СчетДт, ПроводкаБУ.СубконтоДт, 1, ?(НомерСубконто = 1, Выборка.РеализацияСубконтоДт1.НоменклатурнаяГруппа,?(НомерСубконто = 2, Выборка.РеализацияСубконтоДт2.НоменклатурнаяГруппа, ?(НомерСубконто = 3, Выборка.РеализацияСубконтоДт3.НоменклатурнаяГруппа, Неопределено))));
							КонецЕсли;  				
						КонецЕсли; 					
						
						ПроводкаБУ.НалоговоеНазначениеДт = Выборка.НалоговоеНазначениеТЗР;
						Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыльДо2015 Тогда
							ПроводкаБУ.СуммаНУДт 			 = СуммаНУ;
						КонецЕсли;
						
						ПроводкаБУ.Содержание = НСтр("ru='Перемещение ТЗР ';uk='Переміщення ТЗВ '",Локализация.КодЯзыкаИнформационнойБазы()) + ПредставлениеПериода(мНачМесяца, мКонМесяца, "ФП=Истина");
					КонецЕсли;
					
				КонецЕсли;
				
				// Запишем в регистр корректировки по нал. назначению НДС
				// которые необходимов в дальнейшем подтвердить документов
				// ИЗменение налогового назначения ТЗР
				Если  МассивСчетовЗапасовДругаяГруппа.Найти(Выборка.РеализацияСчетДт) = Неопределено
					И СтруктураШапкиДокумента.ЕстьНДС
					И НЕ Выборка.НалоговоеНазначениеТЗР = Выборка.НалоговоеНазначениеЗапаса Тогда
					
					НужнаЗапись = Истина;
					Если     Выборка.НалоговоеНазначениеТЗР    = Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_Пропорционально
						И НЕ Выборка.НалоговоеНазначениеЗапаса = Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяНеХозДеятельность Тогда
						// пропорциональный НДС может использоваться для любой ХОЗ деятельности
						НужнаЗапись = Ложь;
					ИначеЕсли  Выборка.НалоговоеНазначениеТЗР    = Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяНеХозДеятельность
						     И Выборка.НалоговоеНазначениеЗапаса = Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяХозДеятельность ТОгда
						// формально, корректировка нужна, но она не вызывает изменение налогового кредита (он и раньше был = 0)	 
						НужнаЗапись = Ложь;	 
					ИначеЕсли  Выборка.НалоговоеНазначениеЗапаса = Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяНеХозДеятельность
						     И Выборка.НалоговоеНазначениеТЗР    = Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяХозДеятельность ТОгда
						// формально, корректировка нужна, но она не вызывает изменение налогового кредита (он и раньше был = 0)	 
						НужнаЗапись = Ложь;	 
					КонецЕсли;	
					
					Если НужнаЗапись Тогда
						
						ЗаписьКорректировки = КорректировкиНН_ТЗР.Добавить();
						
						ЗаписьКорректировки.СчетТЗР 	 		 = МассивСчетовЗатратТЗР[0];
						Если ВидТЗР <> "РозницаСуммовойУчет" Тогда
							ЗаписьКорректировки.НоменклатурнаяГруппа = Выборка.НоменклатурнаяГруппаЗатрат;
						КонецЕсли;
						
						ЗаписьКорректировки.СчетЗатрат 	 		  = Выборка.РеализацияСчетДт;
						ЗаписьКорректировки.Субконто1 	 		  = Выборка.РеализацияСубконтоДт1;
						ЗаписьКорректировки.Субконто2 	 		  = Выборка.РеализацияСубконтоДт2;
						ЗаписьКорректировки.Субконто3 	 		  = Выборка.РеализацияСубконтоДт3;
						
						Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыльДо2015 Тогда
							Если Выборка.ЭтоВозвратПоставщику = Истина Тогда
								ЗаписьКорректировки.НалоговоеНазначениеДоходовИЗатрат = Справочники.НалоговыеНазначенияАктивовИЗатрат.НКУ_НеХозДеятельность;
							ИНаче	
								ЗаписьКорректировки.НалоговоеНазначениеДоходовИЗатрат = Выборка.НалоговоеНазначениеЗатрат;
							КонецЕсли;
						КонецЕсли;
						
						ЗаписьКорректировки.НалоговоеНазначение 	 		  = Выборка.НалоговоеНазначениеТЗР;
						ЗаписьКорректировки.НалоговоеНазначениеНовое 		  = Выборка.НалоговоеНазначениеЗапаса;
						
						ЗаписьКорректировки.Сумма = Сумма;  
					
					КонецЕсли;
				КонецЕсли;	
				
			КонецЦикла;  
		КонецЦикла; 	
		
	КонецЦикла;		
	
	Если мПроводкиБУ.Количество() > 0 Тогда
		ПроведениеСервер.ЗаписатьНаборЗаписейБезЗамещенияТекущихДвижений(мПроводкиБУ);
	КонецЕсли; 
	
	Если КорректировкиНН_ТЗР.Количество() > 0 Тогда
		
		КорректировкиНН_ТЗР.Свернуть("Период, Организация, 
									|СчетТЗР, НоменклатурнаяГруппа,
									|СчетЗатрат, Субконто1, Субконто2, Субконто3, НалоговоеНазначениеДоходовИЗатрат,
									|НалоговоеНазначение, НалоговоеНазначениеНовое "
									, "Сумма");
		
		КорректировкиНН_ТЗР.ЗаполнитьЗначения(Дата, "Период");		
        КорректировкиНН_ТЗР.ЗаполнитьЗначения(СтруктураШапкиДокумента.Организация, "Организация");		
		
		ДвиженияКорректировкиНН_ТЗР = Движения.КорректировкиНалоговыхНазначенийТЗР;
		ДвиженияКорректировкиНН_ТЗР.мТаблицаДвижений = КорректировкиНН_ТЗР;
		ДвиженияКорректировкиНН_ТЗР.ВыполнитьДвижения();
		ДвиженияКорректировкиНН_ТЗР.Записать();
		
	КонецЕсли;
	
КонецПроцедуры       
		
Функция РассчитатьСумму(СуммаРеализацииИтого,ИсходнаяСуммаТЗР, СуммаРеализации)
	
	СуммаТЗР             = ?(СуммаРеализацииИтого <> 0, Окр(ИсходнаяСуммаТЗР * СуммаРеализации / СуммаРеализацииИтого, 2), 0);
	ИсходнаяСуммаТЗР     = ИсходнаяСуммаТЗР - СуммаТЗР;
	СуммаРеализацииИтого = СуммаРеализацииИтого - СуммаРеализации; 
	
	Возврат СуммаТЗР;
КонецФункции   

Функция СформироватьМассивСчетовВИерархии(МассивСчетов) 
	
	ТекстЗапроса = "ВЫБРАТЬ
	               |	Хозрасчетный.Ссылка КАК Счет
	               |ИЗ
	               |	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	               |ГДЕ
	               |	Хозрасчетный.Ссылка В ИЕРАРХИИ(&МассивСчетов)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	Хозрасчетный.Ссылка";    
				   
   	Запрос           = Новый Запрос;
	Запрос.Текст     = ТекстЗапроса;
	Запрос.УстановитьПараметр("МассивСчетов", МассивСчетов);
		
	Рез              = Новый Массив;
	РезультатЗапроса = Запрос.Выполнить();
	Выборка          = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		Рез.Добавить(Выборка.Счет);
	КонецЦикла;	     	
	
	Возврат Рез;
	
КонецФункции // СформироватьМассивСчетовПоИерархии()

// ПРОЦЕДУРЫ И ФУНКЦИИ ПО НАЧИСЛЕНИЮ АМОРТИЗАЦИИ ОС, НМА и НИОКР

// Выполняет начисление амортизации основных средств
//
Процедура НачислениеАмортизацииОС(СтруктураШапкиДокумента, Отказ, Заголовок)
	
	ДатаНКУ2015 = '2015 01 01';
	
	Если СтруктураШапкиДокумента.АмортизацияОС ИЛИ СтруктураШапкиДокумента.АмортизацияОСНУ Тогда
		
		ОтражатьВНУ = Истина;
		Если Дата >= ДатаНКУ2015 Тогда 
			ОтражатьВНУ = СтруктураШапкиДокумента.АмортизацияОСНУ;
		КонецЕсли;	
		
		ТабАмортизации  = УправлениеНеоборотнымиАктивами.РасчетАмортизацииРегл(Дата, СтруктураШапкиДокумента.Организация, , СтруктураШапкиДокумента.АмортизацияОС, ОтражатьВНУ, , Отказ);
		
		 // ИНАГРО++
		мАмортизацияБА = Ложь;
		Если ИНАГРО_ОбщийВызовСервераПовтИсп.ЕстьБСПУ() Тогда
			мАмортизацияБА = Константы.ИНАГРО_НачислятьАмортизациюБА.Получить();
		КонецЕсли;
		
		Если мАмортизацияБА Тогда
				МодульИНАГРО_БиологическиеАктивы = ОбщегоНазначения.ОбщийМодуль("ИНАГРО_БиологическиеАктивы");
				МодульИНАГРО_БиологическиеАктивы.ПровестиАмортизациюПоРегистрамБА(СтруктураШапкиДокумента, ТабАмортизации, Движения);
		КонецЕсли;
		// ИНАГРО--

		Если Не Отказ Тогда
			
			ТабАмортизации.Колонки.Амортизация.Имя = "Сумма";
			
			ТабАмортизации.Колонки.АмортизацияНУ.Имя = "СуммаНУ";
			
			УправлениеНеоборотнымиАктивами.ПолучитьРаспределениеАмортизацииПоНаправлениямРегл(мПроводкиБУ,
			                                                   Отказ,
															   Заголовок,
															   ТабАмортизации,
															   СтруктураШапкиДокумента,
															   НСтр("ru='ОС';uk='ОЗ'",Локализация.КодЯзыкаИнформационнойБазы()),
														       НСтр("ru='Начисление амортизации ОС';uk='Нарахування амортизації ОЗ'",Локализация.КодЯзыкаИнформационнойБазы()));
			
		КонецЕсли;

		Если Не Отказ Тогда
			
			Если СтруктураШапкиДокумента.Свойство("ВключатьСуммуДооценокОСВСоставНП") И СтруктураШапкиДокумента.ВключатьСуммуДооценокОСВСоставНП Тогда
				
				НаборДвижений   = Движения.ПереоценкаОСБухгалтерскийУчет;
				ТаблицаДвижений = НаборДвижений.Выгрузить();
				ТаблицаДвижений.Очистить();

				Для Каждого СтрокаТЧ Из ТабАмортизации Цикл

					СуммаПереоценкиПропорциональнаяАмортизации = СтрокаТЧ.СуммаПереоценкиПропорциональнаяАмортизации; 
					
					Если СуммаПереоценкиПропорциональнаяАмортизации > 0 Тогда

						// ПереоценкаОСБухгалтерскийУчет
						СтрокаДвижений = ТаблицаДвижений.Добавить();

						СтрокаДвижений.ОсновноеСредство = СтрокаТЧ.ОбъектУчета;
						СтрокаДвижений.Организация      = СтруктураШапкиДокумента.Организация;
						СтрокаДвижений.СуммаПереоценки 	= СуммаПереоценкиПропорциональнаяАмортизации;

						// Хозрасчетный Дт 423 Кт 441
						ПроводкаБУ = мПроводкиБУ.Добавить();
						ПроводкаБУ.Период       = Дата;
						ПроводкаБУ.Организация  = СтруктураШапкиДокумента.Организация;
						
						//ПроводкаБУ.СчетДт       = ПланыСчетов.Хозрасчетный.ДооценкаОсновныхСредств;
						ПроводкаБУ.СчетДт       = СтрокаТЧ.СчетУчетаДооценокОС;
						БухгалтерскийУчет.УстановитьСубконто(ПроводкаБУ.СчетДт, ПроводкаБУ.СубконтоДт, "ОсновныеСредства", СтрокаТЧ.ОбъектУчета);

						ПроводкаБУ.СчетКт       = ПланыСчетов.Хозрасчетный.НераспределеннаяПрибыль;
						
						ПроводкаБУ.Сумма        = СуммаПереоценкиПропорциональнаяАмортизации;
						ПроводкаБУ.Содержание   = НСтр("ru='Начисление амортизации ОС';uk='Нарахування амортизації ОЗ'",Локализация.КодЯзыкаИнформационнойБазы());
						ПроводкаБУ.НомерЖурнала = НСтр("ru='ОС';uk='ОЗ'",Локализация.КодЯзыкаИнформационнойБазы());
						
					КонецЕсли;

				КонецЦикла;

				НаборДвижений.мПериод          = Дата;
				НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;

				НаборДвижений.ВыполнитьРасход();
				
			КонецЕсли;	
			
			ПроведениеСервер.ЗаписатьНаборЗаписейБезЗамещенияТекущихДвижений(мПроводкиБУ);
			
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

// Выполняет начисление амортизации НМА
//
Процедура НачислениеАмортизацииНМА(СтруктураШапкиДокумента, Отказ, Заголовок)

	ДатаНКУ2015 = '2015 01 01';
	
	Если СтруктураШапкиДокумента.АмортизацияНМА ИЛИ СтруктураШапкиДокумента.АмортизацияНМАНУ Тогда
		
		ОтражатьВНУ = Истина;
		Если Дата >= ДатаНКУ2015 Тогда 
			ОтражатьВНУ = СтруктураШапкиДокумента.АмортизацияНМАНУ;
		КонецЕсли;	
		
		ТабАмортизации  = УправлениеНеоборотнымиАктивами.РасчетАмортизацииНМАРегл(Дата, СтруктураШапкиДокумента.Организация, , СтруктураШапкиДокумента.АмортизацияНМА, ОтражатьВНУ, , Отказ);

		Если Не Отказ Тогда
			
			ТабАмортизации.Колонки.Амортизация.Имя = "Сумма";
			
			ТабАмортизации.Колонки.АмортизацияНУ.Имя = "СуммаНУ";
			
			УправлениеНеоборотнымиАктивами.ПолучитьРаспределениеАмортизацииПоНаправлениямРегл(мПроводкиБУ,
			                                                   Отказ,
															   Заголовок,
															   ТабАмортизации,
															   СтруктураШапкиДокумента,
															   НСтр("ru='НА';uk='НА'",Локализация.КодЯзыкаИнформационнойБазы()),
														       НСтр("ru='Начисление амортизации НМА';uk='Нарахування амортизації НМА'",Локализация.КодЯзыкаИнформационнойБазы()));
			
		КонецЕсли;

		Если Не Отказ Тогда
			
			ПроведениеСервер.ЗаписатьНаборЗаписейБезЗамещенияТекущихДвижений(мПроводкиБУ);
			
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры


// ПРОЦЕДУРЫ И ФУНКЦИИ ПО ПЕРЕОЦЕНКЕ ВАЛЮТНЫХ СРЕДСТВ

// Выполняет переоценку валютных счетов
//
Процедура ПереоценкаВалютныхСредств(СтруктураШапкиДокумента, Отказ, Заголовок)
	
	Если СтруктураШапкиДокумента.ПереоценкаВалютныхСредств Тогда
		
		СтруктураШапкиДокумента.Вставить("СчетаУчетаКР", БухгалтерскийУчетРед12.ПараметрыУчетаКурсовыхРазниц(УчетнаяПолитика.ИспользуемыеКлассыСчетовРасходов(СтруктураШапкиДокумента.Организация, СтруктураШапкиДокумента.Дата)));
		
		Запрос = Новый Запрос;
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	Хозрасчетный.Ссылка КАК СчетПереоценки
		|ИЗ
		|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
		|
		|ГДЕ
		|	Хозрасчетный.Валютный = ИСТИНА
		|	И Хозрасчетный.Забалансовый = ЛОЖЬ";
		
		РезультатЗапроса = Запрос.Выполнить();
		Выборка   = РезультатЗапроса.Выбрать();
		
		ЗаписьРасчетаПереоценкиВалюты = Движения.РасчетПереоценкиВалютныхСредств.ВыгрузитьКолонки();

		Если ОбщегоНазначенияБПВызовСервераПовтИсп.ИспользоватьУправляемыеБлокировки() Тогда
			
			// Блокировка регистра бухгалтерии.
			
			СтруктураПараметровБлокировки = Новый Структура("ТипТаблицы, ИмяТаблицы, ИсточникДанных", 
															"РегистрБухгалтерии", "Хозрасчетный", РезультатЗапроса);
															
			СтруктураЗначенийБлокировки = Новый Структура("Период, Организация", 
														  Новый Диапазон(, КонецМесяца(СтруктураШапкиДокумента.Дата)), СтруктураШапкиДокумента.Организация);
														  
			СтруктураИсточникаДанных = Новый Структура("Счет", "СчетПереоценки");
			
			ОбщегоНазначенияБПВызовСервера.УстановитьУправляемуюБлокировку(СтруктураПараметровБлокировки, СтруктураЗначенийБлокировки, СтруктураИсточникаДанных);
			
		КонецЕсли;	
		
		Если СтруктураШапкиДокумента.Дата > '20140819' И СтруктураШапкиДокумента.Дата < '20150331' Тогда
			 СтруктураШапкиДокумента.Вставить("ДатаКурса",СтруктураШапкиДокумента.Дата + 86400);
		КонецЕсли;
		
		Пока Выборка.Следующий() Цикл

			БухгалтерскийУчетРед12.ПереоценкаСчетаРегл(СтруктураШапкиДокумента, мПроводкиБУ, Новый Структура("Счет",Выборка.СчетПереоценки), , Ложь, Истина, , ,ЗаписьРасчетаПереоценкиВалюты);

		КонецЦикла;
		
		ПроведениеСервер.ЗаписатьНаборЗаписейБезЗамещенияТекущихДвижений(мПроводкиБУ);
		ЗаписьВВспомогательныеРегистрыСведений(СтруктураШапкиДокумента,
		ЗаписьРасчетаПереоценкиВалюты, 
		Движения.РасчетПереоценкиВалютныхСредств,
		"Организация,ПериодРасчета,Активность,Регистратор,Счет,Валюта,Субконто1,Субконто2,Субконто3,КурсПереоценки,СуммаВВалюте,СуммаВГривнах",
		"Сумма");
		
	КонецЕсли;
	
КонецПроцедуры

// ПРОЦЕДУРЫ И ФУНКЦИИ ПО КОРРЕКТИРОВКЕ СТОИМОСТИ НОМЕНКЛАТУРЫ

Процедура КорректировкаСтоимостиНоменклатуры(СтруктураШапкиДокумента, СтруктураДопПараметров, Отказ, Заголовок)
		
	Если СтруктураШапкиДокумента.КорректировкаСтоимостиНоменклатуры Тогда
		СтруктураДопПараметров.Вставить("Учет", "Бух");
		СтруктураДопПараметров.Вставить("Организация", СтруктураШапкиДокумента.Организация);
		СтруктураДопПараметров.Вставить("Период", Дата);
		СтруктураДопПараметров.Вставить("Регистратор", ЭтотОбъект);
		СтруктураДопПараметров.Вставить("ТаблицаТоваров", Неопределено);
		Массив = Новый Массив;
		СтруктураДопПараметров.Вставить("СписокНеКорректируемыхСчетов", Массив);
		
		КорректировкаСтоимости.КорректировкаСтоимости(Неопределено, мНачМесяца, мКонМесяца, СтруктураДопПараметров);
		
		ПроведениеСервер.ЗаписатьНаборЗаписейБезЗамещенияТекущихДвижений(мПроводкиБУ);
	КонецЕсли;
	
	
КонецПроцедуры

// ПРОЦЕДУРЫ И ФУНКЦИИ ПО СПИСАНИЮ РАСХОДОВ БУДУЩИХ ПЕРИОДОВ

Функция РазностьДатВДнях(Дата1, Дата2)

	мДлинаСуток = 86400; // в секундах

	Возврат Окр((НачалоДня(Дата2) - НачалоДня(Дата1)) / мДлинаСуток);

КонецФункции
Функция СуммаСписанияЗаМесяц(Знач ДатаНачалаСписания, Знач ДатаОкончанияСписания, Остаток, МетодРаспределения)

	Если Остаток = 0 Тогда
		Возврат 0;
	КонецЕсли;
	
	ДатаНачалаСписания    = НачалоДня(ДатаНачалаСписания);
	ДатаОкончанияСписания = КонецДня(ДатаОкончанияСписания);

	Если НЕ ЗначениеЗаполнено(ДатаНачалаСписания) Тогда
		Возврат 0;

	ИначеЕсли ДатаНачалаСписания > мКонМесяца Тогда
		Возврат 0;

	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(ДатаОкончанияСписания) Тогда
		Возврат 0;

	ИначеЕсли ДатаОкончанияСписания < мНачМесяца Тогда
		Возврат 0;

	ИначеЕсли ДатаОкончанияСписания < ДатаНачалаСписания Тогда
		Возврат 0;

	КонецЕсли;
	
	Если МетодРаспределения = Перечисления.МетодыРаспределенияРБП.ПоМесяцам Тогда
		
		// равными частями на протяжении всего срока распределения
		КоличествоМесяцев =  (Месяц(ДатаОкончанияСписания) + 12*Год(ДатаОкончанияСписания))
							-(Месяц(ДатаНачалаСписания)    + 12*Год(ДатаНачалаСписания))  
							+ 1;
							
		Возврат  Окр(Остаток / КоличествоМесяцев,2);							
		
	Иначе
		
		// остаток суммы списываем пропорционально оставшимся дням (то есть пропорционально)
		НачСписанияВМесяце = МАКС(НачалоМесяца(Дата), ДатаНачалаСписания);
		КонСписанияВМесяце = МИН (КонецМесяца(Дата),  ДатаОкончанияСписания);
		
		КоличествоДнейОстаткаСписания = РазностьДатВДнях(НачСписанияВМесяце, ДатаОкончанияСписания)+ 1;
		КоличествоДнейСписанияВМесяце = РазностьДатВДнях(НачСписанияВМесяце, КонСписанияВМесяце)+ 1;

		Если КоличествоДнейСписанияВМесяце = КоличествоДнейОстаткаСписания Тогда
			
			Возврат Остаток;
			
		ИначеЕсли КоличествоДнейОстаткаСписания > 0 Тогда
			
			Возврат Окр(Остаток / КоличествоДнейОстаткаСписания * КоличествоДнейСписанияВМесяце,2);
			
		Иначе 
			
			Возврат 0;
			
		КонецЕсли;
	КонецЕсли;
	
КонецФункции // СуммаСписанияЗаМесяц()

Процедура СписаниеРБП(СтруктураШапкиДокумента, Отказ, Заголовок)

	Если НЕ СтруктураШапкиДокумента.СписаниеРБП = Истина Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("КонецМесяца", мКонМесяца);
	Запрос.УстановитьПараметр("СчетБУ",      ПланыСчетов.Хозрасчетный.ЗатратыБудущихПериодов);
	Запрос.УстановитьПараметр("Организация", СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("ПустаяСтатьяРБП", 	Справочники.РасходыБудущихПериодов.ПустаяСсылка());
		
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ХозрасчетныйОстатки.Субконто1 КАК Субконто1,
	|	ХозрасчетныйОстатки.Субконто1.ДатаНачалаСписания КАК ДатаНачалаСписания,
	|	ХозрасчетныйОстатки.Субконто1.ДатаОкончанияСписания КАК ДатаОкончанияСписания,
	|	ХозрасчетныйОстатки.Субконто1.СчетБУ КАК СчетБУ,
	|	ХозрасчетныйОстатки.Субконто1.СубконтоБУ1 КАК СубконтоБУ1,
	|	ХозрасчетныйОстатки.Субконто1.СубконтоБУ2 КАК СубконтоБУ2,
	|	ХозрасчетныйОстатки.Субконто1.СубконтоБУ3 КАК СубконтоБУ3,
	|	ХозрасчетныйОстатки.Субконто1.МетодРаспределения КАК МетодРаспределения,	
	|	СУММА(ВЫБОР
	|			КОГДА ХозрасчетныйОстатки.СуммаОстатокДт ЕСТЬ NULL 
	|				ТОГДА 0
	|			ИНАЧЕ ХозрасчетныйОстатки.СуммаОстатокДт
	|		КОНЕЦ) КАК СуммаОстатокДтБУ,
	|	СУММА(ВЫБОР
	|			КОГДА ХозрасчетныйОстатки.СуммаНУОстатокДт ЕСТЬ NULL 
	|				ТОГДА 0
	|			ИНАЧЕ ХозрасчетныйОстатки.СуммаНУОстатокДт
	|		КОНЕЦ) КАК СуммаОстатокДтНУ,
	|	ХозрасчетныйОстатки.НалоговоеНазначение КАК НалоговоеНазначение,
	|	ХозрасчетныйОстатки.Субконто1.НалоговоеНазначение КАК РБПНалоговоеНазначение,
	|	ХозрасчетныйОстатки.Субконто1.НалоговоеНазначениеДоходовИЗатрат КАК РБПНалоговоеНазначениеДоходовИЗатрат
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(&КонецМесяца, Счет = &СчетБУ, , Организация = &Организация) КАК ХозрасчетныйОстатки
	|ГДЕ
	|	ХозрасчетныйОстатки.Субконто1 <> &ПустаяСтатьяРБП
	|
	|СГРУППИРОВАТЬ ПО
	|	ХозрасчетныйОстатки.Субконто1,
	|	ХозрасчетныйОстатки.НалоговоеНазначение,
	|	ХозрасчетныйОстатки.Субконто1.ДатаНачалаСписания,
	|	ХозрасчетныйОстатки.Субконто1.ДатаОкончанияСписания,
	|	ХозрасчетныйОстатки.Субконто1.СчетБУ,
	|	ХозрасчетныйОстатки.Субконто1.СубконтоБУ1,
	|	ХозрасчетныйОстатки.Субконто1.СубконтоБУ2,
	|	ХозрасчетныйОстатки.Субконто1.СубконтоБУ3
	|ИТОГИ ПО
	|	Субконто1,
	|	НалоговоеНазначение";
	
	Если ОбщегоНазначенияБПВызовСервераПовтИсп.ИспользоватьУправляемыеБлокировки() Тогда
		
		СтруктураПараметровБлокировки = Новый Структура("ТипТаблицы, ИмяТаблицы", "РегистрБухгалтерии", "Хозрасчетный");
		
		ЗначенияБлокировки = Новый Соответствие;
		ЗначенияБлокировки.Вставить("Период",      	Новый Диапазон(, мКонМесяца)); 
		ЗначенияБлокировки.Вставить("Организация",	СтруктураШапкиДокумента.Организация);
		ЗначенияБлокировки.Вставить("Счет", 		ПланыСчетов.Хозрасчетный.ЗатратыБудущихПериодов);
		
		ОбщегоНазначенияБПВызовСервера.УстановитьУправляемуюБлокировку(СтруктураПараметровБлокировки, ЗначенияБлокировки,);
		
	КонецЕсли;
	
	Результат = Запрос.Выполнить();
	
	ЗаписьРасчетаРБП = Движения.РасчетСписанияРБП.ВыгрузитьКолонки();

	Таблица = Новый ТаблицаЗначений;
	Таблица = Результат.Выгрузить();
	СуммаСписанияБУ = 0;
	
	ВыборкаНН = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "НалоговоеНазначение");
    Пока ВыборкаНН.Следующий() Цикл
		
		ВыборкаРБП = ВыборкаНН.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Субконто1");
		
		Пока ВыборкаРБП.Следующий() Цикл
			
			Если НЕ ЗначениеЗаполнено(ВыборкаРБП.Субконто1) Тогда
				
				Сообщить(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Имеются остатки по счету учета расходов будущих периодов (налоговое назначение ""%1"") по пустой аналитике! Такие расходы не могут быть распределены!';uk='Існуюють залишки на рахунку обліку витрат майбутніх періодів (податкове призначення ""%1"") з незаповненою аналітикою! Такі витрати не можуть бути розподілені!'")
											   , ВыборкаРБП.НалоговоеНазначение)
						 , СтатусСообщения.Важное);
				Продолжить;           
				
			ИначеЕсли НЕ ЗначениеЗаполнено(ВыборкаРБП.ДатаНачалаСписания) ИЛИ
				   НЕ ЗначениеЗаполнено(ВыборкаРБП.ДатаОкончанияСписания) Тогда
				
				Сообщить(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='При распределении РБП ""%1"" (налоговое назначение ""%2"") обнаружена проблема:  не заполнена Дата начала или Дата окончания распределения. Такие расходы не будут распределены!';uk='При розподіленні ВМП ""%1"" (податкове призначення ""%2"") виявлена проблема: не заповнена Дата початку або Дата закінчення розподілу. Ці витрати не будуть розподілені!'")
											   ,ВыборкаРБП.Субконто1, ВыборкаРБП.НалоговоеНазначение)
						 ,СтатусСообщения.Важное);
				
				Продолжить;           
			КонецЕсли;
			
			// имеются несколько методов распределения
			Если КонецМесяца(мКонМесяца) = КонецМесяца(ВыборкаРБП.ДатаОкончанияСписания) Тогда
				
				// в последнем месяце распределения РБП суммы списания должны быть равны сумме остатка (для исправления ошибок округления)
				СуммаСписанияБУ = ВыборкаРБП.СуммаОстатокДтБУ;	
				СуммаСписанияНУ = ВыборкаРБП.СуммаОстатокДтНУ;	
				
			Иначе	
				
				МетодРаспределения = ВыборкаРБП.МетодРаспределения;
				
				Если НЕ ЗначениеЗаполнено(МетодРаспределения) Тогда
					МетодРаспределения = Перечисления.МетодыРаспределенияРБП.ПоДням;
				КонецЕсли;
				
				Если МетодРаспределения = Перечисления.МетодыРаспределенияРБП.ПоДням Тогда
					
					// распределяем остаток пропорционально календарным дням
					СуммаДляРаспределенияБУ = ВыборкаРБП.СуммаОстатокДтБУ;	
					СуммаДляРаспределенияНУ = ВыборкаРБП.СуммаОстатокДтНУ;	
					
				Иначе	
					
					// используется помесячное распределение 
					// получим сумму РБП, которая была на счете на начало распределения. Именно ее будем пропорционально распределять по месяцам
					Отбор = Новый Структура();
					Отбор.Вставить("Организация", 		  Организация);
					Отбор.Вставить("Счет",      		  ПланыСчетов.Хозрасчетный.ЗатратыБудущихПериодов);
					Отбор.Вставить("Субконто1", 		  ВыборкаРБП.Субконто1);
					Отбор.Вставить("НалоговоеНазначение", ВыборкаРБП.НалоговоеНазначение);
					
					ОстаткиРБПНаНачало = РегистрыБухгалтерии.Хозрасчетный.Остатки(ВыборкаРБП.ДатаНачалаСписания,
																				 ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.РасходыБудущихПериодов,
																				 Отбор,
																				 "Субконто1");
															 
					СуммаДляРаспределенияБУ = ОстаткиРБПНаНачало.Итог("СуммаОстатокДт");	
					СуммаДляРаспределенияНУ = ОстаткиРБПНаНачало.Итог("СуммаНУОстатокДт");		
					
					Если  СуммаДляРаспределенияБУ <=0 
						И СуммаДляРаспределенияНУ <=0 Тогда
						Сообщить(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='При распределении РБП ""%1"" (налоговое назначение ""%2"") обнаружена проблема.
|     Датой начала распределния является дата: %3, однако, на начало указанной даты отсутствует остаток на счете учета РБП!
|     Проверьте дату начала распределения в справочнике!';uk='При розподіленні ВМП ""%1"" (податкове призначення ""%2"") виявлена проблема. 
|     Датою початку розподілу зазначена дата:  %3, проте, на початок зазначеної дати відсутній залишок на рахунку обліку ВМП.
|     Перевірте дату початку розподілу у довіднику!'"),ВыборкаРБП.Субконто1, ВыборкаРБП.НалоговоеНазначение, Формат(ВыборкаРБП.ДатаНачалаСписания, "ДФ=dd.MM.yyyy")),СтатусСообщения.Важное);
					КонецЕсли;
					
				КонецЕсли;
				
				СуммаСписанияБУ = СуммаСписанияЗаМесяц(ВыборкаРБП.ДатаНачалаСписания, ВыборкаРБП.ДатаОкончанияСписания, СуммаДляРаспределенияБУ, МетодРаспределения);
				СуммаСписанияНУ = СуммаСписанияЗаМесяц(ВыборкаРБП.ДатаНачалаСписания, ВыборкаРБП.ДатаОкончанияСписания, СуммаДляРаспределенияНУ, МетодРаспределения);			
				
			КонецЕсли;
		
			РБП    = ВыборкаРБП.Субконто1;
			СчетБУ = ВыборкаРБП.СчетБУ;
			
			НалоговоеНазначение 				 = ВыборкаРБП.НалоговоеНазначение;
			РБПНалоговоеНазначение 				 = ВыборкаРБП.РБПНалоговоеНазначение;
			РБПНалоговоеНазначениеДоходовИЗатрат = ВыборкаРБП.РБПНалоговоеНазначениеДоходовИЗатрат;
		
			ОстатокБУ = ВыборкаРБП.СуммаОстатокДтБУ;
			ОстатокНУ = ВыборкаРБП.СуммаОстатокДтНУ;

			//Сформировать проводку БУ
			Если ((ОстатокБУ <= 0) ИЛИ (СуммаСписанияБУ <= 0))
				И 
				 ((ОстатокНУ <= 0) ИЛИ (СуммаСписанияНУ <= 0)) Тогда
				Продолжить;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(РБП) Тогда
				Продолжить;
			КонецЕсли;
			
			Если СуммаСписанияБУ < 0 Тогда
				СуммаСписанияБУ = 0;
			КонецЕсли;
			
			Если СуммаСписанияНУ < 0 Тогда
				СуммаСписанияНУ = 0;
			КонецЕсли;
			
			Если СписаниеРБП И НЕ ЗначениеЗаполнено(СчетБУ) Тогда

				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='В справочнике ""Расходы будущих периодов"" для статьи ""%1"" не заполнен реквизит ""Счет"" !';uk='У довіднику ""Витрати майбутніх періодів"" для статті ""%1"" не заповнений реквізит ""Рахунок"" !'"), РБП);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , , , Отказ);
				Продолжить;
			КонецЕсли;

			ПроводкаБУ = мПроводкиБУ.Добавить();
			ПроводкаБУ.Период       = Дата;
			ПроводкаБУ.Организация  = СтруктураШапкиДокумента.Организация;
			
			ПроводкаБУ.СчетДт       = ВыборкаРБП.СчетБУ;
			БухгалтерскийУчет.УстановитьСубконто(ПроводкаБУ.СчетДт, ПроводкаБУ.СубконтоДт, 1, ВыборкаРБП.СубконтоБУ1);
			БухгалтерскийУчет.УстановитьСубконто(ПроводкаБУ.СчетДт, ПроводкаБУ.СубконтоДт, 2, ВыборкаРБП.СубконтоБУ2);
			БухгалтерскийУчет.УстановитьСубконто(ПроводкаБУ.СчетДт, ПроводкаБУ.СубконтоДт, 3, ВыборкаРБП.СубконтоБУ3);

			ПроводкаБУ.СчетКт       = ПланыСчетов.Хозрасчетный.ЗатратыБудущихПериодов;
			ПроводкаБУ.СубконтоКт.РасходыБудущихПериодов = РБП;
			ПроводкаБУ.Сумма        = СуммаСписанияБУ;
			ПроводкаБУ.Содержание   = НСтр("ru='РБП за ';uk='ВМП за '",Локализация.КодЯзыкаИнформационнойБазы()) + ПредставлениеПериода(мНачМесяца, мКонМесяца, "ФП=Истина");
			ПроводкаБУ.НомерЖурнала = НСтр("ru='ФР';uk='ФР'",Локализация.КодЯзыкаИнформационнойБазы());
			
			ДатаНКУ2015 = '2015 01 01';
			ЭтоДокументДо2015 = ( Дата < ДатаНКУ2015);
			Если УправлениеПроизводствомВызовСервера.ПолучитьХарактерЗатратПоСчетуЗатрат(СчетБУ,,Дата) = "Затраты" Тогда
                Если ЭтоДокументДо2015 Тогда
					ПроводкаБУ.НалоговоеНазначениеДт = РБПНалоговоеНазначениеДоходовИЗатрат;
				Иначе
					ПроводкаБУ.НалоговоеНазначениеДт = Справочники.НалоговыеНазначенияАктивовИЗатрат.ПустаяСсылка();
				КонецЕсли;
			Иначе
				ПроводкаБУ.НалоговоеНазначениеДт = РБПНалоговоеНазначение;
			КонецЕсли;				
			
			ПроводкаБУ.НалоговоеНазначениеКт = ВыборкаРБП.НалоговоеНазначение;
			
			Если ЭтоДокументДо2015 Тогда
				ПроводкаБУ.СуммаНУДт = СуммаСписанияНУ;
			КонецЕсли; 
			ПроводкаБУ.СуммаНУКт = СуммаСписанияНУ;
			
			СтрокаЗаписьРасчетаРБП = ЗаписьРасчетаРБП.Добавить();
			СтрокаЗаписьРасчетаРБП.ДатаНачала = РБП.ДатаНачалаСписания;
			СтрокаЗаписьРасчетаРБП.ДатаОкончания = РБП.ДатаОкончанияСписания;
			СтрокаЗаписьРасчетаРБП.НачОстаток = ОстатокБУ;
			СтрокаЗаписьРасчетаРБП.СчетУчета 	= ПроводкаБУ.СчетКт;
			СтрокаЗаписьРасчетаРБП.СчетСписания = ПроводкаБУ.СчетДт;
			СтрокаЗаписьРасчетаРБП.Сумма   = СуммаСписанияБУ;
			СтрокаЗаписьРасчетаРБП.Статья = РБП;
			СтрокаЗаписьРасчетаРБП.КонОстаток   = ОстатокБУ - СуммаСписанияБУ;
			Если ЭтоДокументДо2015 Тогда
				СтрокаЗаписьРасчетаРБП.НачОстатокНУ = ОстатокНУ;
				СтрокаЗаписьРасчетаРБП.СуммаНУ = СуммаСписанияНУ;
				СтрокаЗаписьРасчетаРБП.КонОстатокНУ = ОстатокНУ - СуммаСписанияНУ;
			КонецЕсли;
			
		КонецЦикла;	

	КонецЦикла;
	
	Если мПроводкиБУ.Количество() > 0 Тогда
		ПроведениеСервер.ЗаписатьНаборЗаписейБезЗамещенияТекущихДвижений(мПроводкиБУ);
	КонецЕсли;
	
	ЗаписьВВспомогательныеРегистрыСведений(СтруктураШапкиДокумента,
	ЗаписьРасчетаРБП,
	Движения.РасчетСписанияРБП,
	"Организация,ПериодРасчета,Активность,Регистратор,Статья,СчетУчета,СчетСписания,ДатаНачала,ДатаОкончания",
	"Сумма,СуммаНУ,НачОстаток,КонОстаток,НачОстатокНУ,КонОстатокНУ");

КонецПроцедуры

// ПРОЦЕДУРЫ И ФУНКЦИИ ПО ПРОИЗВОДСТВЕННОЙ ЧАСТИ

Функция СчетУчетаПоХарактеруЗатрат()

	Счет = ПланыСчетов.Хозрасчетный.ОбщепроизводственныеРасходы; 
	Возврат Счет;

КонецФункции // СчетУчетаПоХарактеруЗатрат()

// Формируется запрос по косвенным затратам в котором собрана
// информация о косвенных затратах их способе их распределения.
//
Процедура СформироватьЗапросПоКосвеннымЗатратам(СтруктураШапкиДокумента, РезультатЗапроса, СтруктураДопПараметров)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачДата",             мНачМесяца);
	Запрос.УстановитьПараметр("КонДата",             мКонМесяца);	
	Запрос.УстановитьПараметр("КонГраница",          мКонГраница);	
	Запрос.УстановитьПараметр("СчетЗатрат",          СчетУчетаПоХарактеруЗатрат());	
	Запрос.УстановитьПараметр("Организация",         СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("ПустаяСтатьяЗатрат",  Справочники.СтатьиЗатрат.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустоеПодразделение", Справочники.ПодразделенияОрганизаций.ПустаяСсылка());
	
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ	
	|	ВЫБОР
	|		КОГДА ТаблицаСпособовРаспределения.БазаРаспределения ЕСТЬ НЕ NULL 
	|			ТОГДА ТаблицаСпособовРаспределения.БазаРаспределения
	|		КОГДА ТаблицаСпособовРаспределения.РаспределениеПоПодразделению ЕСТЬ НЕ NULL 
	|			ТОГДА ТаблицаСпособовРаспределения.РаспределениеПоПодразделению
    |		КОГДА ТаблицаСпособовРаспределения.РаспределениеПоСтатьеЗатрат ЕСТЬ НЕ NULL 
    |			ТОГДА ТаблицаСпособовРаспределения.РаспределениеПоСтатьеЗатрат
	|		КОГДА ТаблицаСпособовРаспределения.РаспределениеПоСчету ЕСТЬ НЕ NULL 
	|			ТОГДА ТаблицаСпособовРаспределения.РаспределениеПоСчету
	|		ИНАЧЕ ТаблицаСпособовРаспределения.РаспределениеПоОрганизации
	|	КОНЕЦ КАК Метод,
	|	ТаблицаСпособовРаспределения.СчетЗатрат,
	|	ТаблицаСпособовРаспределения.Подразделение,
	|	ТаблицаСпособовРаспределения.СтатьяЗатрат,
	|	ТаблицаСпособовРаспределения.НалоговоеНазначение,
	|	ВЫБОР
	|		КОГДА ТаблицаСпособовРаспределения.СписокСтатейЗатрат ЕСТЬ НЕ NULL 
	|			ТОГДА ТаблицаСпособовРаспределения.СписокСтатейЗатрат
	|		КОГДА ТаблицаСпособовРаспределения.СписокСтатейЗатратПоПодразделению ЕСТЬ НЕ NULL 
	|			ТОГДА ТаблицаСпособовРаспределения.СписокСтатейЗатратПоПодразделению
	|		КОГДА ТаблицаСпособовРаспределения.СписокСтатейЗатратПоСтатьеЗатрат ЕСТЬ НЕ NULL 
	|			ТОГДА ТаблицаСпособовРаспределения.СписокСтатейЗатратПоСтатьеЗатрат
	|		КОГДА ТаблицаСпособовРаспределения.СписокСтатейЗатратПоСчету ЕСТЬ НЕ NULL 
	|			ТОГДА ТаблицаСпособовРаспределения.СписокСтатейЗатратПоСчету
	|		ИНАЧЕ ТаблицаСпособовРаспределения.СписокСтатейЗатратПоОрганизации
	|	КОНЕЦ КАК СписокСтатейЗатрат,
	|	ЕСТЬNULL(КонОстаткиОПЗ.СуммаОстаток, 0) КАК КонечныйОстатокОПЗПоПодразделению,
	|	ЕСТЬNULL(КонОстаткиОПЗ.СуммаНУОстаток, 0) КАК КонечныйОстатокОПЗПоПодразделениюНУ,
	|   ТаблицаСпособовРаспределения.ПостояннаяЗатрата КАК ПостояннаяЗатрата, 
	|   ЕСТЬNULL(ТаблицаСпособовРаспределения.СуммаПостоянныхЗатрат, 0) КАК СуммаПостоянныхЗатрат,
	|   ЕСТЬNULL(ТаблицаСпособовРаспределения.СуммаПостоянныхЗатратНУ, 0) КАК СуммаПостоянныхЗатратНУ,
	|	ЕСТЬNULL(ТаблицаСпособовРаспределения.Сумма, 0) КАК Сумма,
	|	ЕСТЬNULL(ТаблицаСпособовРаспределения.СуммаНУ, 0) КАК СуммаНУ
	|	
	|ИЗ
	|	(ВЫБРАТЬ
	|		ХозрасчетныйОбороты.Счет КАК СчетЗатрат,
	|		ХозрасчетныйОбороты.Субконто1 КАК Подразделение,
	|		ХозрасчетныйОбороты.Субконто2 КАК СтатьяЗатрат,
	|		ХозрасчетныйОбороты.НалоговоеНазначение КАК НалоговоеНазначение,
	|		СпособыРаспределения.СпособРаспределения КАК БазаРаспределения,
	|		СпособыРаспределенияПоПодразделению.СпособРаспределения КАК РаспределениеПоПодразделению,
    |		СпособыРаспределенияПоСтатьеЗатрат.СпособРаспределения КАК РаспределениеПоСтатьеЗатрат,
	|		СпособыРаспределенияПоСчету.СпособРаспределения КАК РаспределениеПоСчету,
	|		СпособыРаспределенияПоОрганизации.СпособРаспределения КАК РаспределениеПоОрганизации,
	|		СпособыРаспределения.СписокСтатейЗатрат КАК СписокСтатейЗатрат,
	|		СпособыРаспределенияПоОрганизации.СписокСтатейЗатрат КАК СписокСтатейЗатратПоОрганизации,
	|		СпособыРаспределенияПоПодразделению.СписокСтатейЗатрат КАК СписокСтатейЗатратПоПодразделению,
	|		СпособыРаспределенияПоСтатьеЗатрат.СписокСтатейЗатрат КАК СписокСтатейЗатратПоСтатьеЗатрат,
	|		СпособыРаспределенияПоСчету.СписокСтатейЗатрат КАК СписокСтатейЗатратПоСчету,
	| 		ЕСТЬNULL(ХозрасчетныйОбороты.Субконто2.ПостояннаяЗатрата, ЛОЖЬ) КАК ПостояннаяЗатрата,
	|       ВЫБОР 
	|			КОГДА ЕСТЬNULL(ХозрасчетныйОбороты.Субконто2.ПостояннаяЗатрата, ЛОЖЬ) 
	|				ТОГДА ХозрасчетныйОбороты.СуммаОборот 
	|			ИНАЧЕ 0 
	|		КОНЕЦ КАК СуммаПостоянныхЗатрат,
|       ВЫБОР 
	|			КОГДА ЕСТЬNULL(ХозрасчетныйОбороты.Субконто2.ПостояннаяЗатрата, ЛОЖЬ) 
	|				ТОГДА ХозрасчетныйОбороты.СуммаНУОборот 
	|			ИНАЧЕ 0 
	|		КОНЕЦ КАК СуммаПостоянныхЗатратНУ,
	|		ХозрасчетныйОбороты.СуммаОборот КАК Сумма,
	|		ХозрасчетныйОбороты.СуммаНУОборот КАК СуммаНУ
	|	ИЗ
	|		РегистрБухгалтерии.Хозрасчетный.Обороты(&НачДата, &КонДата, Месяц, Счет В ИЕРАРХИИ (&СчетЗатрат), &ВидыСубконто, Организация = &Организация, , ) КАК ХозрасчетныйОбороты
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МетодыРаспределенияКосвенныхРасходовОрганизаций.СрезПоследних(&КонДата, Организация = &Организация) КАК СпособыРаспределения
	|			ПО ХозрасчетныйОбороты.Счет = СпособыРаспределения.СчетЗатрат
	|				И ХозрасчетныйОбороты.Субконто1 = СпособыРаспределения.Подразделение
	|				И ХозрасчетныйОбороты.Субконто2 = СпособыРаспределения.СтатьяЗатрат
    |			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МетодыРаспределенияКосвенныхРасходовОрганизаций.СрезПоследних(
    |			&КонДата,
    |			Организация = &Организация
    |			    И Подразделение = &ПустоеПодразделение) КАК СпособыРаспределенияПоСтатьеЗатрат
    |			ПО ХозрасчетныйОбороты.Счет = СпособыРаспределенияПоСтатьеЗатрат.СчетЗатрат
    |				И ХозрасчетныйОбороты.Субконто2 = СпособыРаспределенияПоСтатьеЗатрат.СтатьяЗатрат
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МетодыРаспределенияКосвенныхРасходовОрганизаций.СрезПоследних(
	|			&КонДата,
	|			Организация = &Организация
	|			    И СтатьяЗатрат = &ПустаяСтатьяЗатрат) КАК СпособыРаспределенияПоПодразделению
	|			ПО ХозрасчетныйОбороты.Счет = СпособыРаспределенияПоПодразделению.СчетЗатрат
	|				И ХозрасчетныйОбороты.Субконто1 = СпособыРаспределенияПоПодразделению.Подразделение
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МетодыРаспределенияКосвенныхРасходовОрганизаций.СрезПоследних(
	|			&КонДата,
	|			Организация = &Организация
	|			    И СтатьяЗатрат = &ПустаяСтатьяЗатрат
	|			    И Подразделение = &ПустоеПодразделение) КАК СпособыРаспределенияПоСчету
	|			ПО ХозрасчетныйОбороты.Счет = СпособыРаспределенияПоСчету.СчетЗатрат
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МетодыРаспределенияКосвенныхРасходовОрганизаций.СрезПоследних(
	|			&КонДата,
	|			Организация = &Организация
	|			    И СчетЗатрат = &ПустойСчет
	|			    И СтатьяЗатрат = &ПустаяСтатьяЗатрат
	|			    И Подразделение = &ПустоеПодразделение) КАК СпособыРаспределенияПоОрганизации
	|			ПО ХозрасчетныйОбороты.Организация = СпособыРаспределенияПоОрганизации.Организация) КАК ТаблицаСпособовРаспределения
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ 
    |		РегистрБухгалтерии.Хозрасчетный.Остатки(&КонГраница, Счет В ИЕРАРХИИ (&СчетЗатрат), , Организация = &Организация) КАК КонОстаткиОПЗ
    |	ПО 
    |		ТаблицаСпособовРаспределения.Подразделение = КонОстаткиОПЗ.Субконто1  // по подразделению
	|
	|ИТОГИ 
	|	СУММА(СуммаПостоянныхЗатрат),
	|	СУММА(СуммаПостоянныхЗатратНУ)
	|ПО
	|	Метод,
	|	СписокСтатейЗатрат,
	|	Подразделение";
	
	ВидыСубконто = Новый Массив;
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Подразделения);
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат);
	Запрос.УстановитьПараметр("ВидыСубконто",  ВидыСубконто);
		
	Запрос.УстановитьПараметр("ПустойСчет", ПланыСчетов.Хозрасчетный.ПустаяСсылка());	
		
	РезультатЗапроса = Запрос.Выполнить();
	
КонецПроцедуры // СформироватьЗапросПоКосвеннымЗатратам()

// Функция распределения общепроизводственных затрат.
//
//	Параметры:
//		мБазаКоэффициентов - база коэф-тов распределения
//
Функция РаспределитьОПР(СтруктураШапкиДокумента, мБазаКоэффициентов, СтруктураДопПараметров)
	
	РаспределятьВБУ = НЕ СтруктураШапкиДокумента.НеРаспределятьОПЗнаСебестоимостьПродукции;
	РаспределятьВНУ = СтруктураШапкиДокумента.ЕстьНалогНаПрибыльДо2015 И (СтруктураШапкиДокумента.Дата >= НалоговыйУчетПовтИсп.ДатаНачалаРаспределенияОПЗвНУ());	
	ДатаНКУ2015 = '2015 01 01';

	Если НЕ РаспределятьВБУ И НЕ РаспределятьВНУ Тогда
		Возврат Ложь;
	КонецЕсли;	
	
	РаспределениеВыполнено = Ложь;
	ЗаписьРасчетаКосвенныхРасходов = СтруктураДопПараметров.ЗаписьРасчетаКосвенныхРасходов;
	
	// Формирование запроса по косвенным расходам
	РезультатЗапроса = Неопределено;
	СформироватьЗапросПоКосвеннымЗатратам(СтруктураШапкиДокумента, РезультатЗапроса, СтруктураДопПараметров);
	
	СтруктПоиска = Новый Структура;
	
	ОбходПоПодразделениям = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Подразделение");
	
	Пока ОбходПоПодразделениям.Следующий() Цикл
		
		СтруктПоиска.Очистить();
		СтруктПоиска.Вставить("Подразделение", ОбходПоПодразделениям.Подразделение);
		
		НаборСтрокНормальнойМощности = мПоказателиНормальнойМощности.НайтиСтроки(СтруктПоиска);
		Если НаборСтрокНормальнойМощности.Количество() <> 0 Тогда
			СтрокаНормальнойМощности = НаборСтрокНормальнойМощности[0];
			// Распределяем только постоянные затраты
			РаспределятьПоНормальнойМощности = ОбходПоПодразделениям.СуммаПостоянныхЗатрат <> 0 ИЛИ ОбходПоПодразделениям.СуммаПостоянныхЗатратНУ <> 0;
			ЗаданаНормальнаяМощность = Истина;
		Иначе
			РаспределятьПоНормальнойМощности = Истина;
			ЗаданаНормальнаяМощность = Ложь;
		КонецЕсли;
		
		Если ЗаданаНормальнаяМощность Тогда
			Если РаспределятьПоНормальнойМощности Тогда
				ИмяРеквБазыНМ = ПолучитьИмяРеквизитаБазыРаспределения(СтрокаНормальнойМощности.СпособРаспределения);
				ИмяКолонкиНМНУ = "База"+ИмяРеквБазыНМ+"НУ";
			КонецЕсли;
			ВсегоБазаНормальнойМощности = 0;
			ВсегоБазаНормальнойМощностиНУ = 0;
			НаборСтрок = мБазаКоэффициентов.НайтиСтроки(СтруктПоиска);
			Для Каждого СтрКоэф Из НаборСтрок Цикл
				Если РаспределятьПоНормальнойМощности Тогда
					ВсегоБазаНормальнойМощности = ВсегоБазаНормальнойМощности + СтрКоэф["База"+ИмяРеквБазыНМ];
					Если мБазаКоэффициентов.Колонки.Найти(ИмяКолонкиНМНУ) <> Неопределено Тогда
						ВсегоБазаНормальнойМощностиНУ = ВсегоБазаНормальнойМощностиНУ + СтрКоэф[ИмяКолонкиНМНУ];
					Иначе
						ВсегоБазаНормальнойМощностиНУ = ВсегоБазаНормальнойМощностиНУ + СтрКоэф["База"+ИмяРеквБазыНМ];
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		СуммаНераспределенныхЗатратПриНормальнойМощностиПоПодразделению = 0;
		СуммаНераспределенныхПостоянныхЗатрат = 0;
		СуммаЗатратПриНормальнойМощностиПоПодразделению = 0;
		СуммаНераспределенныхЗатратПриНормальнойМощностиПоПодразделениюНУ = 0;
		СуммаНераспределенныхПостоянныхЗатратНУ = 0;
		СуммаЗатратПриНормальнойМощностиПоПодразделениюНУ = 0;
		Если РаспределятьПоНормальнойМощности Тогда
			Если ЗаданаНормальнаяМощность Тогда
				Если СтрокаНормальнойМощности.БазаРаспределения <> 0 Тогда
					СуммаЗатратПриНормальнойМощностиПоПодразделению = ВсегоБазаНормальнойМощности * СтрокаНормальнойМощности.СуммаПостоянныхЗатрат / СтрокаНормальнойМощности.БазаРаспределения;
					СуммаЗатратПриНормальнойМощностиПоПодразделениюНУ = ВсегоБазаНормальнойМощностиНУ * СтрокаНормальнойМощности.СуммаПостоянныхЗатрат / СтрокаНормальнойМощности.БазаРаспределения;
				Иначе
					СуммаЗатратПриНормальнойМощностиПоПодразделению = 0;
					СуммаЗатратПриНормальнойМощностиПоПодразделениюНУ = 0;
				КонецЕсли;
			Иначе
				СуммаЗатратПриНормальнойМощностиПоПодразделению =ОбходПоПодразделениям.СуммаПостоянныхЗатрат;
				СуммаЗатратПриНормальнойМощностиПоПодразделениюНУ =ОбходПоПодразделениям.СуммаПостоянныхЗатратНУ;
			КонецЕсли;
			СуммаНераспределенныхЗатратПриНормальнойМощностиПоПодразделению = СуммаЗатратПриНормальнойМощностиПоПодразделению;
			СуммаНераспределенныхПостоянныхЗатрат = ОбходПоПодразделениям.СуммаПостоянныхЗатрат;
			СуммаНераспределенныхЗатратПриНормальнойМощностиПоПодразделениюНУ = СуммаЗатратПриНормальнойМощностиПоПодразделениюНУ;
			СуммаНераспределенныхПостоянныхЗатратНУ = ОбходПоПодразделениям.СуммаПостоянныхЗатратНУ;
		КонецЕсли;
	
	
		ОбходПоМетодамРаспределения = ОбходПоПодразделениям.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Метод"); 
		Пока ОбходПоМетодамРаспределения.Следующий() Цикл 		
			
			ИмяРеквБазы = ПолучитьИмяРеквизитаБазыРаспределения(ОбходПоМетодамРаспределения.Метод);
			ИмяКолонкиНУ = "База"+ИмяРеквБазы+"НУ";
			
			ОбходПоСпискуСтатейЗатрат = ОбходПоМетодамРаспределения.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "СписокСтатейЗатрат");
			
			Пока ОбходПоСпискуСтатейЗатрат.Следующий() Цикл
				БазаКоэффициентов = мБазаКоэффициентов.Скопировать();
				Если ИмяРеквБазы = "ПрямыеСписок" Тогда
					ТекущийСписокПрямыхЗатрат = ОбходПоСпискуСтатейЗатрат.СписокСтатейЗатрат;
					СписокПрямыхЗатрат = ТекущийСписокПрямыхЗатрат.СтатьиЗатрат.ВыгрузитьКолонку("СтатьяЗатрат");
					Если Не СписокПрямыхЗатрат = Справочники.СписокСтатейЗатратВключенныхВБазуРаспределенияКосвенныхРасходов.ПустаяСсылка() Тогда
						БазаКоэффициентов = РасчетБазыКоэффициентовСпискаЗатрат(СтруктураШапкиДокумента, СписокПрямыхЗатрат);
					КонецЕсли;
				КонецЕсли;
			
			 	Обход = ОбходПоСпискуСтатейЗатрат.Выбрать();
				Пока Обход.Следующий() Цикл
					
					Если ИмяРеквБазы = "" Тогда
						Сообщить(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Установлен метод ""Не распределять"" общепроизводственные расходы для:
|Подразделение: %1
|Статья затрат: %2';uk='Встановлено метод ""Не розподіляти"" загальновиробничі витрати для:
|Підрозділ: %1
|Стаття витрат: %2'"), Обход.Подразделение, Обход.СтатьяЗатрат), СтатусСообщения.Информация);
						
						Продолжить;
						
					ИначеЕсли ИмяРеквБазы = Неопределено Тогда
						Сообщить(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Не указан способ распределения общепроизводственных расходов для:
|Подразделение: %1
|Статья затрат: %2';uk='Не зазначений спосіб розподілу загальновиробничих витрат для:
|Підрозділ: %1
|Стаття витрат: %2'"), Обход.Подразделение, Обход.СтатьяЗатрат), СтатусСообщения.Важное);
						Продолжить; 	
					КонецЕсли;	
					
					Если НЕ ((РаспределятьВБУ И Обход.КонечныйОстатокОПЗПоПодразделению <> 0) ИЛИ (РаспределятьВНУ И Обход.КонечныйОстатокОПЗПоПодразделениюНУ <> 0)) Тогда
						// если конечный остаток ОПЗ по подразделению уже = 0 - по статьям суммы оборотов не распределяем
						Продолжить;
					КонецЕсли;
					
					Если НЕ ((РаспределятьВБУ И Обход.Сумма <> 0) ИЛИ (РаспределятьВНУ ИЛИ Обход.СуммаНУ = 0)) Тогда
						Продолжить;
					КонецЕсли;
					
					Если Обход.НалоговоеНазначение = Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяНеХозДеятельность Тогда	
						
					Сообщить(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Общепроизводственные расходы с налоговым назначением Необл. НДС, нехоз. не распределяются:
|Подразделение: %1
|Статья затрат: %2';uk='Загальновиробничі витарти з податковим призначенням Неопод. ПДВ, негосп. не розподіляються:
|Підрозділ: %1
|Стаття витрат: %2'"), Обход.Подразделение, Обход.СтатьяЗатрат), СтатусСообщения.Важное);
					
				
						Продолжить;
						
					КонецЕсли;
					
					ПостояннаяЗатрата = Обход.ПостояннаяЗатрата;
					
					СуммаРаспределяемыхЗатрат = Обход.Сумма;
					СуммаНаСебестоимостьПриНормальнойМощности = 0;
					СуммаЗатратПриНормальнойМощностиПоСтатье = 0;
					СуммаРаспределяемыхЗатратНУ = Обход.СуммаНУ;
					СуммаНаСебестоимостьПриНормальнойМощностиНУ = 0;
					СуммаЗатратПриНормальнойМощностиПоСтатьеНУ = 0;
					Если ПостояннаяЗатрата Тогда
						Если Обход.Сумма = СуммаНераспределенныхПостоянныхЗатрат Тогда
							СуммаЗатратПриНормальнойМощностиПоСтатье = СуммаНераспределенныхЗатратПриНормальнойМощностиПоПодразделению;
						Иначе	
							СуммаЗатратПриНормальнойМощностиПоСтатье = ОКР(СуммаЗатратПриНормальнойМощностиПоПодразделению * Обход.Сумма / ОбходПоПодразделениям.СуммаПостоянныхЗатрат, 2, 1);
						КонецЕсли;
						Если Обход.СуммаНУ = СуммаНераспределенныхПостоянныхЗатратНУ Тогда
							СуммаЗатратПриНормальнойМощностиПоСтатьеНУ = СуммаНераспределенныхЗатратПриНормальнойМощностиПоПодразделениюНУ;
						Иначе	
							СуммаЗатратПриНормальнойМощностиПоСтатьеНУ = ОКР(СуммаЗатратПриНормальнойМощностиПоПодразделениюНУ * Обход.СуммаНУ / ОбходПоПодразделениям.СуммаПостоянныхЗатратНУ, 2, 1);
						КонецЕсли;
						СуммаНераспределенныхПостоянныхЗатрат = СуммаНераспределенныхПостоянныхЗатрат - Обход.Сумма;
						СуммаНераспределенныхЗатратПриНормальнойМощностиПоПодразделению = СуммаНераспределенныхЗатратПриНормальнойМощностиПоПодразделению - СуммаЗатратПриНормальнойМощностиПоСтатье;
						СуммаНераспределенныхПостоянныхЗатратНУ = СуммаНераспределенныхПостоянныхЗатратНУ - Обход.СуммаНУ;
						СуммаНераспределенныхЗатратПриНормальнойМощностиПоПодразделениюНУ = СуммаНераспределенныхЗатратПриНормальнойМощностиПоПодразделениюНУ - СуммаЗатратПриНормальнойМощностиПоСтатьеНУ;
						Если СуммаЗатратПриНормальнойМощностиПоСтатье < Обход.Сумма Тогда
							СуммаРаспределяемыхЗатрат = СуммаЗатратПриНормальнойМощностиПоСтатье;
							СуммаНаСебестоимостьПриНормальнойМощности = Обход.Сумма - СуммаЗатратПриНормальнойМощностиПоСтатье;
						КонецЕсли;
						Если СуммаЗатратПриНормальнойМощностиПоСтатьеНУ < Обход.СуммаНУ Тогда
							СуммаРаспределяемыхЗатратНУ = СуммаЗатратПриНормальнойМощностиПоСтатьеНУ;
							СуммаНаСебестоимостьПриНормальнойМощностиНУ = Обход.СуммаНУ - СуммаЗатратПриНормальнойМощностиПоСтатьеНУ;
						КонецЕсли;
					КонецЕсли; 
					
					РаспределятьПоНормальнойМощности = СуммаЗатратПриНормальнойМощностиПоСтатье <> 0 ИЛИ СуммаЗатратПриНормальнойМощностиПоСтатьеНУ <> 0;
					
					ВсегоБазаРаспределения = 0;
					ВсегоБазаРаспределенияНУ = 0;
					Если Обход.НалоговоеНазначение = Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_Облагаемая
					 ИЛИ Обход.НалоговоеНазначение = Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяХозДеятельность Тогда
						СтруктПоиска.Вставить("НалоговоеНазначение", Обход.НалоговоеНазначение); 
					ИначеЕсли Обход.НалоговоеНазначение = Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_Пропорционально Тогда
						Если СтруктПоиска.Свойство("НалоговоеНазначение") Тогда
							СтруктПоиска.Удалить("НалоговоеНазначение");
						КонецЕсли;
					КонецЕсли;
					НаборСтрок = БазаКоэффициентов.НайтиСтроки(СтруктПоиска);
					Для Каждого СтрКоэф Из НаборСтрок Цикл
						ВсегоБазаРаспределения = ВсегоБазаРаспределения + СтрКоэф["База"+ИмяРеквБазы];
						Если БазаКоэффициентов.Колонки.Найти(ИмяКолонкиНУ) <> Неопределено Тогда
							ВсегоБазаРаспределенияНУ = ВсегоБазаРаспределенияНУ + СтрКоэф[ИмяКолонкиНУ];
						Иначе
							ВсегоБазаРаспределенияНУ = ВсегоБазаРаспределенияНУ + СтрКоэф["База"+ИмяРеквБазы];
						КонецЕсли;
					КонецЦикла;
					
					Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыльДо2015 И Обход.Метод = Перечисления.СпособыРаспределенияКосвенныхРасходов.ПрямыеЗатраты
					   И ВсегоБазаРаспределения <> 0 И ВсегоБазаРаспределенияНУ = 0 Тогда
						
						Сообщить(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Метод распределения общепроизводственных затрат ""Прямые затраты"", при этом в налоговом учете прямых затрат нет.
|Подразделение: %1
|Статья затрат: %2';uk='Спосіб розподілу загальновиробничих витрат ""Прямі витрати"", при цьому в податковому обліку прямі витрати відсутні.
|Підрозділ: %1
|Стаття витрат: %2'"), Обход.Подразделение, Обход.СтатьяЗатрат), СтатусСообщения.Важное);
						
					КонецЕсли;
					
					СуммаКРаспр = 0;
					СуммаСписанияНаСебестоимость = Обход.Сумма;
					УчтеноБазаРаспределения = 0;
					СуммаКРаспрНУ = 0;
					СуммаСписанияНаСебестоимостьНУ = Обход.СуммаНУ;
					УчтеноБазаРаспределенияНУ = 0;
					Если РаспределятьПоНормальнойМощности Тогда
						СуммаКРаспрНРЗ = 0;
						СуммаКРаспрНРЗНУ = 0;
					КонецЕсли;
					
					Для Каждого СтрКоэф Из НаборСтрок Цикл
						
						БазаРаспределения = СтрКоэф["База"+ИмяРеквБазы];
						Если БазаКоэффициентов.Колонки.Найти(ИмяКолонкиНУ) <> Неопределено Тогда
							БазаРаспределенияНУ = СтрКоэф[ИмяКолонкиНУ];
						Иначе
							БазаРаспределенияНУ = СтрКоэф["База"+ИмяРеквБазы];
						КонецЕсли;
						БазаРаспределенияНаВыпуск = БазаРаспределения;
						БазаРаспределенияНаВыпускНУ = БазаРаспределенияНУ;
						
						Если (РаспределятьВБУ И БазаРаспределения = 0) ИЛИ (РаспределятьВНУ И БазаРаспределенияНУ = 0) Тогда
							Продолжить;
						КонецЕсли;
						
						УчтеноБазаРаспределения = УчтеноБазаРаспределения + БазаРаспределения;
						
						ДолжноБытьСписано = ?(ВсегоБазаРаспределения > 0, Окр(СуммаРаспределяемыхЗатрат * УчтеноБазаРаспределения / ВсегоБазаРаспределения, 2, 1), 0);
						СуммаСписания = ДолжноБытьСписано - СуммаКРаспр;
						СуммаКРаспр = СуммаКРаспр + СуммаСписания;
						
						УчтеноБазаРаспределенияНУ = УчтеноБазаРаспределенияНУ + БазаРаспределенияНУ;
						ДолжноБытьСписаноНУ = ?(ВсегоБазаРаспределенияНУ > 0, Окр(СуммаРаспределяемыхЗатратНУ * УчтеноБазаРаспределенияНУ / ВсегоБазаРаспределенияНУ, 2, 1), 0);
						СуммаСписанияНУ = ДолжноБытьСписаноНУ - СуммаКРаспрНУ;
						СуммаКРаспрНУ = СуммаКРаспрНУ + СуммаСписанияНУ;
						
						Если РаспределятьПоНормальнойМощности Тогда
							ДолжноБытьСписаноНРЗ = ?(ВсегоБазаРаспределения > 0, Окр(СуммаНаСебестоимостьПриНормальнойМощности * УчтеноБазаРаспределения / ВсегоБазаРаспределения, 2, 1), 0);
							СуммаСписанияНРЗ = ДолжноБытьСписаноНРЗ - СуммаКРаспрНРЗ;
							СуммаКРаспрНРЗ = СуммаКРаспрНРЗ + СуммаСписанияНРЗ;
							ДолжноБытьСписаноНРЗНУ = ?(ВсегоБазаРаспределенияНУ > 0, Окр(СуммаНаСебестоимостьПриНормальнойМощностиНУ * УчтеноБазаРаспределенияНУ / ВсегоБазаРаспределенияНУ, 2, 1), 0);
							СуммаСписанияНРЗНУ = ДолжноБытьСписаноНРЗНУ - СуммаКРаспрНРЗНУ;
							СуммаКРаспрНРЗНУ = СуммаКРаспрНРЗНУ + СуммаСписанияНРЗНУ;
						КонецЕсли;
						
						Если (РаспределятьВБУ И СуммаСписания <> 0) ИЛИ (РаспределятьВНУ И СуммаСписанияНУ <> 0) Тогда
							
							НоваяПроводка = мОперация.Добавить();
							НоваяПроводка.Организация = СтруктураШапкиДокумента.Организация;
							НоваяПроводка.Активность  = Истина;
							НоваяПроводка.Период      = Дата;
							Если РаспределятьПоНормальнойМощности Тогда
								НоваяПроводка.Содержание  = НСтр("ru='Распределение ОПЗ с учетом нормальной мощности';uk='Розподіл ЗВВ із урахуванням нормальної потужності'",Локализация.КодЯзыкаИнформационнойБазы());
							Иначе	
								НоваяПроводка.Содержание  = НСтр("ru='Распределение ОПЗ';uk='Розподіл ЗВВ'",Локализация.КодЯзыкаИнформационнойБазы());
							КонецЕсли;	
							
							Если РаспределятьВБУ Тогда
								НоваяПроводка.Сумма = СуммаСписания;
							КонецЕсли;
							
							НоваяПроводка.СчетДт = СтрКоэф.СчетЗатрат;
							БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, "НоменклатурныеГруппы", СтрКоэф.НоменклатурнаяГруппа);
							БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, "Подразделения",        СтрКоэф.Подразделение);
							БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, "СтатьиЗатрат",         Обход.СтатьяЗатрат);
							
							НоваяПроводка.СчетКт = Обход.СчетЗатрат;
							
							БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетКт, НоваяПроводка.СубконтоКт, "Подразделения",        Обход.Подразделение);
							БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетКт, НоваяПроводка.СубконтоКт, "СтатьиЗатрат",         Обход.СтатьяЗатрат);
							
							Если НоваяПроводка.Период < ДатаНКУ2015 Тогда
							
								Если НоваяПроводка.СчетДт.НалоговыйУчет Тогда
									НоваяПроводка.НалоговоеНазначениеДт = СтрКоэф.НалоговоеНазначение;
									Если РаспределятьВНУ Тогда
										НоваяПроводка.СуммаНУДт = СуммаСписанияНУ;
									КонецЕсли;
								КонецЕсли;
								Если НоваяПроводка.СчетКт.НалоговыйУчет Тогда
									НоваяПроводка.НалоговоеНазначениеКт = Обход.НалоговоеНазначение;
									Если РаспределятьВНУ Тогда
										НоваяПроводка.СуммаНУКт = СуммаСписанияНУ;
									КонецЕсли;
								КонецЕсли;
								
							Иначе
								
								Если НоваяПроводка.СчетДт.НалоговыйУчет Тогда
									Если НоваяПроводка.СчетДт.УчетПоНалоговымНазначениямНДС Тогда
										НоваяПроводка.НалоговоеНазначениеДт = СтрКоэф.НалоговоеНазначение;
									КонецЕсли;
								КонецЕсли;
								Если НоваяПроводка.СчетКт.НалоговыйУчет Тогда
									Если НоваяПроводка.СчетКт.УчетПоНалоговымНазначениямНДС Тогда
										НоваяПроводка.НалоговоеНазначениеКт = Обход.НалоговоеНазначение;
									КонецЕсли;
								КонецЕсли;
								
							КонецЕсли;
														
							РаспределениеВыполнено = Истина;
							
							СтрокаЗаписьРасчетаКосвенныхРасходов = ЗаписьРасчетаКосвенныхРасходов.Добавить();
							СтрокаЗаписьРасчетаКосвенныхРасходов.СчетУчета = Обход.СчетЗатрат;
                            СтрокаЗаписьРасчетаКосвенныхРасходов.НалоговоеНазначениеУчета = Обход.НалоговоеНазначение;
							СтрокаЗаписьРасчетаКосвенныхРасходов.ВидОперации = Перечисления.ВидыОперацийРасчетаКосвенныхРасходов.РаспределениеОбщепроизводственныхРасходов;
							СтрокаЗаписьРасчетаКосвенныхРасходов.Подразделение = Обход.Подразделение;
							СтрокаЗаписьРасчетаКосвенныхРасходов.СтатьяЗатрат = Обход.СтатьяЗатрат;
							СтрокаЗаписьРасчетаКосвенныхРасходов.БазаРаспределения = ОбходПоМетодамРаспределения.Метод;
							Если РаспределятьВБУ Тогда
								СтрокаЗаписьРасчетаКосвенныхРасходов.СуммаБазы = БазаРаспределения;
							КонецЕсли;
							Если РаспределятьВНУ Тогда
								СтрокаЗаписьРасчетаКосвенныхРасходов.СуммаБазыНУ = БазаРаспределенияНУ;
							КонецЕсли;
							СтрокаЗаписьРасчетаКосвенныхРасходов.СчетРаспределения = СтрКоэф.СчетЗатрат;
							СтрокаЗаписьРасчетаКосвенныхРасходов.ПодразделениеРаспределения = СтрКоэф.Подразделение;
							СтрокаЗаписьРасчетаКосвенныхРасходов.НоменклатурнаяГруппаРаспределения = СтрКоэф.НоменклатурнаяГруппа;
							СтрокаЗаписьРасчетаКосвенныхРасходов.НалоговоеНазначение = СтрКоэф.НалоговоеНазначение;
							Если РаспределятьВБУ Тогда
								СтрокаЗаписьРасчетаКосвенныхРасходов.Сумма = СуммаСписания;
							КонецЕсли;
							Если РаспределятьВНУ Тогда
								СтрокаЗаписьРасчетаКосвенныхРасходов.СуммаНУ = СуммаСписанияНУ;
							КонецЕсли;
							
							СуммаСписанияНаСебестоимость = СуммаСписанияНаСебестоимость - СуммаСписания;
							СуммаСписанияНаСебестоимостьНУ = СуммаСписанияНаСебестоимостьНУ - СуммаСписанияНУ;
							
						КонецЕсли;
						
						Если РаспределятьПоНормальнойМощности И ((РаспределятьВБУ И СуммаСписанияНРЗ<>0) ИЛИ (РаспределятьВНУ И СуммаСписанияНРЗНУ<>0)) Тогда
							
							НоваяПроводка = мОперация.Добавить();
							НоваяПроводка.Организация = СтруктураШапкиДокумента.Организация;
							НоваяПроводка.Активность  = Истина;
							НоваяПроводка.Период      = Дата;
							НоваяПроводка.Содержание  = НСтр("ru='Списание не распределенных постоянных ОПЗ на себестоимость';uk='Списання не розподілених постійних ЗВВ на собівартість'", Локализация.КодЯзыкаИнформационнойБазы());
							
							Если РаспределятьВБУ Тогда
								НоваяПроводка.Сумма = СуммаСписанияНРЗ;
							КонецЕсли;
							
							НоваяПроводка.СчетДт = ПланыСчетов.Хозрасчетный.СебестоимостьРеализованнойГотовойПродукции;
							БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, "НоменклатурныеГруппы", СтрКоэф.НоменклатурнаяГруппа);
							БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, "СтатьиЗатрат",         Обход.СтатьяЗатрат);
							
							НоваяПроводка.СчетКт = Обход.СчетЗатрат;
							БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетКт, НоваяПроводка.СубконтоКт, "Подразделения",        Обход.Подразделение);
							БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетКт, НоваяПроводка.СубконтоКт, "СтатьиЗатрат",         Обход.СтатьяЗатрат);
							
							Если НоваяПроводка.Период < ДатаНКУ2015 Тогда
								
								Если НоваяПроводка.СчетДт.НалоговыйУчет Тогда
									НоваяПроводка.НалоговоеНазначениеДт = СтруктураШапкиДокумента.НалоговоеНазначениеНераспределенныхПостоянныхОПЗ;
									Если РаспределятьВНУ Тогда
										Если НоваяПроводка.НалоговоеНазначениеДт <> Справочники.НалоговыеНазначенияАктивовИЗатрат.НКУ_НеХозДеятельность Тогда
											НоваяПроводка.СуммаНУДт = СуммаСписанияНРЗНУ;
										КонецЕсли;
									КонецЕсли;
								КонецЕсли;
								Если НоваяПроводка.СчетКт.НалоговыйУчет Тогда
									НоваяПроводка.НалоговоеНазначениеКт = Обход.НалоговоеНазначение;
									Если РаспределятьВНУ Тогда
										НоваяПроводка.СуммаНУКт = СуммаСписанияНРЗНУ;
									КонецЕсли;
								КонецЕсли;

							Иначе
								
								Если НоваяПроводка.СчетКт.НалоговыйУчет Тогда
									Если НоваяПроводка.СчетКт.УчетПоНалоговымНазначениямНДС Тогда
										НоваяПроводка.НалоговоеНазначениеКт = Обход.НалоговоеНазначение;
									КонецЕсли;
								КонецЕсли;
								
							КонецЕсли;
														
							РаспределениеВыполнено = Истина;
							
							СуммаСписанияНаСебестоимость = СуммаСписанияНаСебестоимость - СуммаСписанияНРЗ;
							СуммаСписанияНаСебестоимостьНУ = СуммаСписанияНаСебестоимостьНУ - СуммаСписанияНРЗНУ;
							
						КонецЕсли;
					КонецЦикла; 
					
					// Не распределенные ОПЗ списываем на себестоимость продукции (901)
					Если (РаспределятьВБУ И СуммаСписанияНаСебестоимость <> 0) ИЛИ (РаспределятьВБУ И СуммаСписанияНаСебестоимостьНУ <> 0) Тогда
						
						НоваяПроводка = мОперация.Добавить();
						НоваяПроводка.Организация = СтруктураШапкиДокумента.Организация;
						НоваяПроводка.Активность  = Истина;
						НоваяПроводка.Период      = Дата;
						НоваяПроводка.Содержание  = НСтр("ru='Списание не распределенных ОПЗ на себестоимость';uk='Списання не розподілених ЗВВ на собівартість'",Локализация.КодЯзыкаИнформационнойБазы());
						
						Если РаспределятьВБУ Тогда
							НоваяПроводка.Сумма = СуммаСписанияНаСебестоимость;
						КонецЕсли;
						
						НоваяПроводка.СчетДт = ПланыСчетов.Хозрасчетный.СебестоимостьРеализованнойГотовойПродукции;
						БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, "СтатьиЗатрат",         Обход.СтатьяЗатрат);
						
						НоваяПроводка.СчетКт = Обход.СчетЗатрат;
						БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетКт, НоваяПроводка.СубконтоКт, "Подразделения",        Обход.Подразделение);
						БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетКт, НоваяПроводка.СубконтоКт, "СтатьиЗатрат",         Обход.СтатьяЗатрат);
						
						Если НоваяПроводка.Период < ДатаНКУ2015 Тогда
						
							Если НоваяПроводка.СчетДт.НалоговыйУчет Тогда
								НоваяПроводка.НалоговоеНазначениеДт = СтруктураШапкиДокумента.НалоговоеНазначениеНераспределенныхПостоянныхОПЗ;
								Если РаспределятьВНУ Тогда
									Если НоваяПроводка.НалоговоеНазначениеДт <> Справочники.НалоговыеНазначенияАктивовИЗатрат.НКУ_НеХозДеятельность Тогда
										НоваяПроводка.СуммаНУДт = СуммаСписанияНаСебестоимостьНУ;
									КонецЕсли;
								КонецЕсли;
							КонецЕсли;
							Если НоваяПроводка.СчетКт.НалоговыйУчет Тогда
								НоваяПроводка.НалоговоеНазначениеКт = Обход.НалоговоеНазначение;
								Если РаспределятьВНУ Тогда
									НоваяПроводка.СуммаНУКт = СуммаСписанияНаСебестоимостьНУ;
								КонецЕсли;
							КонецЕсли;
							
						Иначе
							
							Если НоваяПроводка.СчетКт.НалоговыйУчет Тогда
								Если НоваяПроводка.СчетКт.УчетПоНалоговымНазначениямНДС Тогда
									НоваяПроводка.НалоговоеНазначениеКт = Обход.НалоговоеНазначение;
								КонецЕсли;
							КонецЕсли;
							
						КонецЕсли;
						
						РаспределениеВыполнено = Истина;
						
					КонецЕсли;
					
				КонецЦикла; 
			КонецЦикла; 
		КонецЦикла; 
	КонецЦикла; 
	
	Если РаспределениеВыполнено Тогда
		ПроведениеСервер.ЗаписатьНаборЗаписейБезЗамещенияТекущихДвижений(мПроводкиБУ);
	КонецЕсли; 
	
	Возврат РаспределениеВыполнено;
	
КонецФункции // РаспределитьОПР()

// Формируется запрос по затратам на брак
Процедура СформироватьЗапросПоЗатратамНаБрак(СтруктураШапкиДокумента, РезультатЗапроса, СтруктураДопПараметров)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачДата",             мНачМесяца);
	Запрос.УстановитьПараметр("КонДата",             мКонМесяца);
	Запрос.УстановитьПараметр("СчетЗатрат",          ПланыСчетов.Хозрасчетный.БракВПроизводстве);
	Запрос.УстановитьПараметр("Организация",         СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("ПустаяСтатьяЗатрат",  Справочники.СтатьиЗатрат.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустоеПодразделение", Справочники.ПодразделенияОрганизаций.ПустаяСсылка());
	
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ХозрасчетныйОбороты.Счет КАК СчетЗатрат,
	|	ХозрасчетныйОбороты.НалоговоеНазначение КАК НалоговоеНазначение,
	|	ХозрасчетныйОбороты.Субконто1 КАК Подразделение,
	|	ХозрасчетныйОбороты.Субконто2 КАК НоменклатурнаяГруппа,
	|	ХозрасчетныйОбороты.Субконто3 КАК СтатьяЗатрат,
	|	ХозрасчетныйОбороты.СуммаОборот КАК Сумма,
	|	ХозрасчетныйОбороты.СуммаОборот КАК СуммаНУ
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(&НачДата, &КонДата, Месяц, Счет В ИЕРАРХИИ (&СчетЗатрат), &ВидыСубконто, Организация = &Организация, , ) КАК ХозрасчетныйОбороты";
	
	
	ВидыСубконто = Новый Массив;
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Подразделения);
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы);
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат);
	Запрос.УстановитьПараметр("ВидыСубконто",  ВидыСубконто);
		
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "СчетЗатратБУ", "СчетЗатрат");
	Запрос.УстановитьПараметр("ПустойСчет", ПланыСчетов.Хозрасчетный.ПустаяСсылка());
		
	РезультатЗапроса = Запрос.Выполнить();
	
КонецПроцедуры // СформироватьЗапросПоЗатратамНаБрак()
	
Функция РаспределитьЗатратыНаБрак(СтруктураШапкиДокумента, мБазаКоэффициентов, СтруктураДопПараметров);
	
	РаспределениеВыполнено = Ложь;
	
	// Формирование запроса по затратам на брак
	РезультатЗапроса = Неопределено;
	СформироватьЗапросПоЗатратамНаБрак(СтруктураШапкиДокумента, РезультатЗапроса, СтруктураДопПараметров);
	
	Обход = РезультатЗапроса.Выбрать();
	
	Пока Обход.Следующий() Цикл
		
		Если Обход.Сумма <= 0 Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяПроводка = мОперация.Добавить();
		НоваяПроводка.Организация = СтруктураШапкиДокумента.Организация;
		НоваяПроводка.Активность  = Истина;
		НоваяПроводка.Период      = Дата;
		НоваяПроводка.Содержание  = НСтр("ru='Распределение затрат на брак';uk='Розподіл витрат на брак'",Локализация.КодЯзыкаИнформационнойБазы());
		
		НоваяПроводка.Сумма = Обход.Сумма;
		
		НоваяПроводка.СчетДт = ПланыСчетов.Хозрасчетный.ОсновноеПроизводство;
		БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, "НоменклатурныеГруппы", Обход.НоменклатурнаяГруппа);
		БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, "Подразделения",        Обход.Подразделение);
		БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, "СтатьиЗатрат",         Обход.СтатьяЗатрат);
		
		НоваяПроводка.СчетКт = Обход.СчетЗатрат;
		
		БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетКт, НоваяПроводка.СубконтоКт, "Подразделения",        Обход.Подразделение);
		БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетКт, НоваяПроводка.СубконтоКт, "СтатьиЗатрат",         Обход.СтатьяЗатрат);
		Если ЗначениеЗаполнено(Обход.НоменклатурнаяГруппа) Тогда
			БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетКт, НоваяПроводка.СубконтоКт, "НоменклатурныеГруппы",        Обход.НоменклатурнаяГруппа);
		КонецЕсли;
		
		Если НоваяПроводка.Период < '2015 01 01' Тогда
		
			Если НоваяПроводка.СчетДт.НалоговыйУчет Тогда
				Если СтруктураШапкиДокумента.ЕстьНДС Тогда
					НоваяПроводка.НалоговоеНазначениеДт = Обход.НоменклатурнаяГруппа.НалоговоеНазначениеВПроизводстве;
				Иначе
					НоваяПроводка.НалоговоеНазначениеДт = Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяХозДеятельность;
				КонецЕсли;
				НоваяПроводка.СуммаНУДт = Обход.СуммаНУ;
			КонецЕсли;
			Если НоваяПроводка.СчетКт.НалоговыйУчет Тогда
				НоваяПроводка.НалоговоеНазначениеКт = Обход.НалоговоеНазначение;
				НоваяПроводка.СуммаНУКт = Обход.СуммаНУ;
			КонецЕсли;
			
		Иначе 
			
			Если НоваяПроводка.СчетДт.НалоговыйУчет Тогда
				Если НоваяПроводка.СчетДт.УчетСуммНУ Тогда
					НоваяПроводка.СуммаНУДт = Обход.СуммаНУ;
				КонецЕсли;
				Если НоваяПроводка.СчетДт.УчетПоНалоговымНазначениямНДС Тогда
					Если СтруктураШапкиДокумента.ЕстьНДС Тогда
						НоваяПроводка.НалоговоеНазначениеДт = Обход.НоменклатурнаяГруппа.НалоговоеНазначениеВПроизводстве;
					Иначе
						НоваяПроводка.НалоговоеНазначениеДт = Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяХозДеятельность;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			Если НоваяПроводка.СчетКт.НалоговыйУчет Тогда
				Если НоваяПроводка.СчетКт.УчетСуммНУ Тогда
					НоваяПроводка.СуммаНУКт = Обход.СуммаНУ;
				КонецЕсли;
				Если НоваяПроводка.СчетКт.УчетПоНалоговымНазначениямНДС Тогда
					НоваяПроводка.НалоговоеНазначениеКт = Обход.НалоговоеНазначение; 
				КонецЕсли;
			КонецЕсли;

		КонецЕсли;
		
		РаспределениеВыполнено = Истина;
		
	КонецЦикла;
	
	Если РаспределениеВыполнено Тогда
		ПроведениеСервер.ЗаписатьНаборЗаписейБезЗамещенияТекущихДвижений(мОперация);
	КонецЕсли; 
	
КонецФункции // РаспределитьЗатратыНаБрак()

// Функция расчета коэф. распределения косвенных затрат по переделам
//
Функция РасчетБазыКоэффициентов(СтруктураШапкиДокумента)
	
	
	 Запрос = Новый Запрос;
	 
	 Запрос.Текст =  "ВЫБРАТЬ
	 |	ПолнаяБазаРаспределения.СчетЗатрат,
	 |	ПолнаяБазаРаспределения.Подразделение,
	 |	ПолнаяБазаРаспределения.НоменклатурнаяГруппа," +
	?(СтруктураШапкиДокумента.ЕстьНДС, "
	 |	ПолнаяБазаРаспределения.НоменклатурнаяГруппа.НалоговоеНазначениеВПроизводстве КАК НалоговоеНазначение,", "
	 |	ЗНАЧЕНИЕ(Справочник.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяХозДеятельность) КАК НалоговоеНазначение,") + "
	 |	СУММА(ПолнаяБазаРаспределения.БазаМат) 			КАК БазаМат,
	 |	СУММА(ПолнаяБазаРаспределения.БазаМатНУ)		КАК БазаМатНУ,
	 |	СУММА(ПолнаяБазаРаспределения.БазаЗП) 			КАК БазаЗП,
	 |	СУММА(ПолнаяБазаРаспределения.БазаЗПНУ) 		КАК БазаЗПНУ,
	 |	СУММА(ПолнаяБазаРаспределения.БазаВыпуск) 		КАК БазаВыпуск,
	 |	СУММА(ПолнаяБазаРаспределения.БазаПлан) 		КАК БазаПлан,
	 |	СУММА(ПолнаяБазаРаспределения.БазаПрямые) 		КАК БазаПрямые,
	 |	СУММА(ПолнаяБазаРаспределения.БазаПрямыеНУ)		КАК БазаПрямыеНУ,
	 |	СУММА(ПолнаяБазаРаспределения.БазаСписокЗатрат) КАК БазаПрямыеСписок
	 |ИЗ
	 |	(ВЫБРАТЬ
	 |		ХозрасчетныйОбороты.Счет КАК СчетЗатрат,
	 |		ХозрасчетныйОбороты.Субконто1 КАК Подразделение,
	 |		ХозрасчетныйОбороты.Субконто2 КАК НоменклатурнаяГруппа,
	 |		СУММА(ВЫБОР КОГДА ХозрасчетныйОбороты.Субконто3.ВидЗатрат = &МатЗатраты ТОГДА ХозрасчетныйОбороты.СуммаОборотДт ИНАЧЕ 0 КОНЕЦ) КАК БазаМат,
	 |		СУММА(ВЫБОР КОГДА ХозрасчетныйОбороты.Субконто3.ВидЗатрат = &МатЗатраты ТОГДА ХозрасчетныйОбороты.СуммаНУОборотДт ИНАЧЕ 0 КОНЕЦ) КАК БазаМатНУ,
	 |		СУММА(ВЫБОР КОГДА ХозрасчетныйОбороты.Субконто3.ВидЗатрат = &ОплатаТруда ТОГДА ХозрасчетныйОбороты.СуммаОборотДт ИНАЧЕ 0 КОНЕЦ) КАК БазаЗП,
	 |		СУММА(ВЫБОР КОГДА ХозрасчетныйОбороты.Субконто3.ВидЗатрат = &ОплатаТруда ТОГДА ХозрасчетныйОбороты.СуммаНУОборотДт ИНАЧЕ 0 КОНЕЦ) КАК БазаЗПНУ,
	 |		0 КАК БазаВыпуск,
	 |		0 КАК БазаПлан,
	 |		0 КАК БазаПрямые,
	 |		0 КАК БазаПрямыеНУ,
	 |		0 КАК БазаСписокЗатрат	 
	 |	ИЗ
	 |		РегистрБухгалтерии.Хозрасчетный.Обороты(&НачДата, &КонДата, Месяц, Счет В ИЕРАРХИИ (&СчетаЗатрат), &ВидыСубконто, Организация = &Организация, , ) КАК ХозрасчетныйОбороты
	 |	
	 |	СГРУППИРОВАТЬ ПО
	 |		ХозрасчетныйОбороты.Счет,
	 |		ХозрасчетныйОбороты.Субконто1,
	 |		ХозрасчетныйОбороты.Субконто2
	 |	
	 |	ОБЪЕДИНИТЬ ВСЕ
	 |	
	 |	ВЫБРАТЬ
	 |		ВыпускПродукцииУслуг.СчетЗатрат,
	 |		ВыпускПродукцииУслуг.Подразделение,
	 |		ВыпускПродукцииУслуг.НоменклатурнаяГруппа,
	 |		0,
	 |		0,
	 |		0,
	 |		0,
	 |		СУММА(ВыпускПродукцииУслуг.Количество),
	 |		СУММА(ВыпускПродукцииУслуг.ПлановаяСтоимость),
	 |		0,
	 |		0,
	 |		0
	 |	ИЗ
	 |		РегистрНакопления.ВыпускПродукцииУслугБухгалтерскийУчет КАК ВыпускПродукцииУслуг
	 |	
	 |	ГДЕ
	 |		ВыпускПродукцииУслуг.Период МЕЖДУ &НачДата И &КонДата И
	 |		ВыпускПродукцииУслуг.Подразделение.Владелец = &Организация
	 |	
	 |	СГРУППИРОВАТЬ ПО
	 |		ВыпускПродукцииУслуг.СчетЗатрат,
	 |		ВыпускПродукцииУслуг.Подразделение,
	 |		ВыпускПродукцииУслуг.НоменклатурнаяГруппа
	 |	 
	 |	ОБЪЕДИНИТЬ ВСЕ
	 |	
	 |	ВЫБРАТЬ
	 |		ПрямыеЗатраты.Счет,
	 |		ПрямыеЗатраты.Субконто1,
	 |		ПрямыеЗатраты.Субконто2,
	 |		0,
	 |		0,
	 |		0,
	 |		0,
	 |		0,
	 |		0,
	 |		ЕСТЬNULL(ПрямыеЗатраты.СуммаОборотДт, 0),
	 |		ЕСТЬNULL(ПрямыеЗатраты.СуммаНУОборотДт, 0),
	 |		0
	 |	ИЗ
	 |		РегистрБухгалтерии.Хозрасчетный.Обороты(
	 |				&НачДата,
	 |				&КонДата,
	 |				Месяц,
	 |				Счет В ИЕРАРХИИ (&СчетаПрямыхЗатрат),
	 |				&ВидыСубконто,
	 |				Организация = &Организация,	 
	 |				(НЕ КорСчет В ИЕРАРХИИ (&СчетЗатратКосвенных)),
	 |				) КАК ПрямыеЗатраты
	 |	
	 |	СГРУППИРОВАТЬ ПО
	 |		ПрямыеЗатраты.Счет,
	 |		ПрямыеЗатраты.Субконто1,
	 |		ПрямыеЗатраты.Субконто2,
	 |		ПрямыеЗатраты.СуммаОборотДт,
	 |		ПрямыеЗатраты.СуммаНУОборотДт	 
	 |
	 |	) КАК ПолнаяБазаРаспределения
	 |					
	 |СГРУППИРОВАТЬ ПО
	 |	ПолнаяБазаРаспределения.СчетЗатрат,
	 |	ПолнаяБазаРаспределения.Подразделение,
	 |	ПолнаяБазаРаспределения.НоменклатурнаяГруппа," +
	?(СтруктураШапкиДокумента.ЕстьНДС, "
	 |	ПолнаяБазаРаспределения.НоменклатурнаяГруппа.НалоговоеНазначениеВПроизводстве", "
	 |	ЗНАЧЕНИЕ(Справочник.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяХозДеятельность)") + "
	 |";
	 
	Запрос.УстановитьПараметр("НачДата",     мНачМесяца);
	Запрос.УстановитьПараметр("КонДата",     мКонМесяца);
	Запрос.УстановитьПараметр("Организация", СтруктураШапкиДокумента.Организация);
	
	Запрос.УстановитьПараметр("ОплатаТруда", Перечисления.ВидыЗатрат.ОплатаТруда);
	Запрос.УстановитьПараметр("МатЗатраты",  Перечисления.ВидыЗатрат.Материальные);
	
	ВидыСубконто = Новый Массив;
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Подразделения);
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы);
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат);
	Запрос.УстановитьПараметр("ВидыСубконто",  ВидыСубконто);
	
	СчетаЗатрат = Новый Массив;
	СчетаЗатрат.Добавить(ПланыСчетов.Хозрасчетный.ОсновноеПроизводство);
	СчетаЗатрат.Добавить(ПланыСчетов.Хозрасчетный.ВспомогательныеПроизводства);
	Запрос.УстановитьПараметр("СчетаЗатрат", СчетаЗатрат);
	Запрос.УстановитьПараметр("СчетаПрямыхЗатрат", СчетаЗатрат);
	
	СчетаЗатрат = Новый Массив;
	СчетаЗатрат.Добавить(ПланыСчетов.Хозрасчетный.ОбщепроизводственныеРасходы);	
	Запрос.УстановитьПараметр("СчетЗатратКосвенных", СчетаЗатрат);
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции // РасчетБазыКоэффициентов()

Функция РасчетБазыКоэффициентовСпискаЗатрат(СтруктураШапкиДокумента, СписокЗатрат)
	
	
	 Запрос = Новый Запрос;
	 Запрос.Текст =  "ВЫБРАТЬ
	                 |	ПолнаяБазаРаспределения.СчетЗатрат КАК СчетЗатрат,
	                 |	ПолнаяБазаРаспределения.Подразделение КАК Подразделение,
					 |	ПолнаяБазаРаспределения.НоменклатурнаяГруппа," +
					?(СтруктураШапкиДокумента.ЕстьНДС, "
					 |	ПолнаяБазаРаспределения.НоменклатурнаяГруппа.НалоговоеНазначениеВПроизводстве КАК НалоговоеНазначение,", "
					 |	ЗНАЧЕНИЕ(Справочник.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяХозДеятельность) КАК НалоговоеНазначение,") + "
	                 |	0 КАК БазаМат,
	                 |	0 КАК БазаЗП,
	                 |	0 КАК БазаВыпуск,
	                 |	0 КАК БазаПлан,
	                 |	0 КАК БазаПрямые,
	                 |	СУММА(ПолнаяБазаРаспределения.БазаПрямые) КАК БазаПрямыеСписок,
					 |	СУММА(ПолнаяБазаРаспределения.БазаПрямыеНУ) КАК БазаПрямыеСписокНУ
	                 |ИЗ
	                 |	(ВЫБРАТЬ
	                 |		ПрямыеЗатраты.Счет КАК СчетЗатрат,
	                 |		ПрямыеЗатраты.Субконто1 КАК Подразделение,
	                 |		ПрямыеЗатраты.Субконто2 КАК НоменклатурнаяГруппа,
	                 |		ПрямыеЗатраты.СуммаОборотДт КАК БазаПрямые,
					 |		ПрямыеЗатраты.СуммаНУОборотДт КАК БазаПрямыеНУ
	                 |	ИЗ
	                 |		РегистрБухгалтерии.Хозрасчетный.Обороты(
	                 |			&НачДата,
	                 |			&КонДата,
	                 |			Месяц,
	                 |			Счет В ИЕРАРХИИ (&СчетаПрямыхЗатрат),
	                 |			&ВидыСубконто,
	                 |			Организация = &Организация
	                 |				И Субконто3 В (&СписокЗатрат)
	                 |			,
	                 |			) КАК ПрямыеЗатраты
	                 |	
	                 |	СГРУППИРОВАТЬ ПО
	                 |		ПрямыеЗатраты.Счет,
	                 |		ПрямыеЗатраты.Субконто1,
	                 |		ПрямыеЗатраты.Субконто2,
	                 |		ПрямыеЗатраты.СуммаОборотДт,
					 |		ПрямыеЗатраты.СуммаНУОборотДт) КАК ПолнаяБазаРаспределения
	                 |
	                 |СГРУППИРОВАТЬ ПО
	                 |	ПолнаяБазаРаспределения.СчетЗатрат,
	                 |	ПолнаяБазаРаспределения.Подразделение,
					 |	ПолнаяБазаРаспределения.НоменклатурнаяГруппа," +
					?(СтруктураШапкиДокумента.ЕстьНДС, "
					 |	ПолнаяБазаРаспределения.НоменклатурнаяГруппа.НалоговоеНазначениеВПроизводстве", "
					 |	ЗНАЧЕНИЕ(Справочник.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяХозДеятельность)") + "
					 |";
		
	Запрос.УстановитьПараметр("НачДата",      мНачМесяца);
	Запрос.УстановитьПараметр("КонДата",      мКонМесяца);
	Запрос.УстановитьПараметр("Организация",  СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("СписокЗатрат", СписокЗатрат);
	 
	ВидыСубконто = Новый Массив;
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Подразделения);
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы);
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат);
	Запрос.УстановитьПараметр("ВидыСубконто",  ВидыСубконто);
	
	СчетаЗатрат = Новый Массив;
	СчетаЗатрат.Добавить(ПланыСчетов.Хозрасчетный.ОсновноеПроизводство);
	СчетаЗатрат.Добавить(ПланыСчетов.Хозрасчетный.ВспомогательныеПроизводства);
	СчетаЗатрат.Добавить(ПланыСчетов.Хозрасчетный.ПроизводствоИзДавальческогоСырья);	
	Запрос.УстановитьПараметр("СчетЗатрат", СчетаЗатрат);
	СчетаЗатрат = Новый Массив;
	СчетаЗатрат.Добавить(ПланыСчетов.Хозрасчетный.ОсновноеПроизводство);
	СчетаЗатрат.Добавить(ПланыСчетов.Хозрасчетный.ВспомогательныеПроизводства);
	СчетаЗатрат.Добавить(ПланыСчетов.Хозрасчетный.ПроизводствоИзДавальческогоСырья);
	Запрос.УстановитьПараметр("СчетаПрямыхЗатрат", СчетаЗатрат);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции // РасчетБазыКоэффициентовСпискаЗатрат()

// Общепроизводственные затраты и затраты на брак списываются на счета учета
// прямых расходов основного и вспомогательного производства.
// При списании расходы распределяются по подразделениям и
// номенклатурным группам.
//
Процедура РаспределениеКосвенныхРасходов(СтруктураШапкиДокумента, СтруктураДопПараметров)
	
	мБазаКоэффициентов = РасчетБазыКоэффициентов(СтруктураШапкиДокумента);
	мПоказателиНормальнойМощности = ПолучитьПоказателиНормальнойМощности(СтруктураШапкиДокумента);
	
	// Списание общепроизводственных затрат на счета учета затрат
	// основного и вспомогательного производств.
	РаспределениеВыполнено = РаспределитьОПР(СтруктураШапкиДокумента, мБазаКоэффициентов, СтруктураДопПараметров);
	// Списание затрат на брак на счета учета затрат 
	// основного и вспомогательного производств.
	РаспределитьЗатратыНаБрак(СтруктураШапкиДокумента, мБазаКоэффициентов, СтруктураДопПараметров);
	// Распределение общепроизводственных затрат и затрат на брак
	// на себестоимость выпущенной продукции (услуг).
	РасчетПрямыхЗатрат(СтруктураШапкиДокумента, Истина, СтруктураДопПараметров);

КонецПроцедуры // РаспределениеКосвенныхРасходов()

// Процедура списыват затраты по услугам, реализация которых отражена 
// без отражения выпуска в плановых ценах
Процедура ДвиженияПоПрямымЗатратамПоУслугам(СтруктураШапкиДокумента, СтруктураДопПараметров, ВыполненоРаспределениеОПР, Отказ = Ложь)
   
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачДата",               мНачМесяца);
	Запрос.УстановитьПараметр("КонДата",               мКонМесяца);
	
	Запрос.УстановитьПараметр("НачГраница",            мНачГраница);
	Запрос.УстановитьПараметр("КонГраница",            мКонГраница);
	
	Запрос.Текст = 
  "ВЫБРАТЬ
   |	ХозрасчетныйОстатки.Счет КАК Счет,
   |	ХозрасчетныйОстатки.Субконто1 КАК Подразделение,
   |	ХозрасчетныйОстатки.Субконто2 КАК НоменклатурнаяГруппа,
   |	СУММА(ЕСТЬNULL(ХозрасчетныйОстатки.СуммаОстатокДт, 0)) КАК ОстатокПрямыхРасходов,
   |	СУММА(ЕСТЬNULL(ХозрасчетныйОстатки.СуммаНУОстатокДт, 0)) КАК ОстатокПрямыхРасходовНУ,
   |	МАКСИМУМ(ЕСТЬNULL(ОстаткиНЗП.СуммаБУ, 0)) КАК СуммаНЗП,
   |	МАКСИМУМ(ЕСТЬNULL(ОстаткиНЗП.СуммаНУ, 0)) КАК СуммаНЗПНУ,
   |	РеализацияУслуг.СчетРасходов КАК СчетРасходов,
   |	РеализацияУслуг.НалоговоеНазначениеДоходовИЗатрат КАК НалоговоеНазначениеДоходовИЗатрат,
   |	РеализацияУслуг.СтатьяЗатрат КАК СтатьяЗатрат,
   |	РеализацияУслуг.СуммаОборот КАК Выручка
   |ИЗ
   |	РегистрБухгалтерии.Хозрасчетный.Остатки(&КонГраница, Счет В ИЕРАРХИИ (&Счета), , Организация = &ТекстУсловия) КАК ХозрасчетныйОстатки
   |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
   |			РеализацияУслугОбороты.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
   |			РеализацияУслугОбороты.СчетРасходов КАК СчетРасходов,
   |			РеализацияУслугОбороты.НалоговоеНазначениеДоходовИЗатрат КАК НалоговоеНазначениеДоходовИЗатрат,
    |			РеализацияУслугОбороты.СтатьяЗатрат КАК СтатьяЗатрат,
   |			СУММА(ЕСТЬNULL(РеализацияУслугОбороты.СуммаОборот, 0)) КАК СуммаОборот
   |		ИЗ
   |			РегистрНакопления.РеализацияУслуг.Обороты(&НачГраница, &КонГраница, , Организация = &Организация) КАК РеализацияУслугОбороты
   |		
   |		СГРУППИРОВАТЬ ПО
   |			РеализацияУслугОбороты.НоменклатурнаяГруппа,
   |			РеализацияУслугОбороты.СчетРасходов,
   |			РеализацияУслугОбороты.НалоговоеНазначениеДоходовИЗатрат,
   |			РеализацияУслугОбороты.СтатьяЗатрат) КАК РеализацияУслуг
   |		ПО ХозрасчетныйОстатки.Субконто2 = РеализацияУслуг.НоменклатурнаяГруппа
   |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
   |			ИнвентаризацияНЗП.СчетЗатрат КАК СчетЗатрат,
   |			ИнвентаризацияНЗП.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
   |			ИнвентаризацияНЗПСостав.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
   |			СУММА(ИнвентаризацияНЗПСостав.СуммаБУ) КАК СуммаБУ,
   |			СУММА(ИнвентаризацияНЗПСостав.СуммаНУ) КАК СуммаНУ
   |		ИЗ
   |			Документ.ИнвентаризацияНЗП.Состав КАК ИнвентаризацияНЗПСостав
   |				ЛЕВОЕ СОЕДИНЕНИЕ Документ.ИнвентаризацияНЗП КАК ИнвентаризацияНЗП
   |				ПО ИнвентаризацияНЗПСостав.Ссылка = ИнвентаризацияНЗП.Ссылка
   |		ГДЕ
   |			ИнвентаризацияНЗП.Дата МЕЖДУ &НачДата И &КонДата
   |			И ИнвентаризацияНЗП.Организация = &Организация
   |			И ИнвентаризацияНЗП.Проведен
   |		
   |		СГРУППИРОВАТЬ ПО
   |			ИнвентаризацияНЗП.СчетЗатрат,
   |			ИнвентаризацияНЗП.ПодразделениеОрганизации,
   |			ИнвентаризацияНЗПСостав.НоменклатурнаяГруппа) КАК ОстаткиНЗП
   |		ПО ХозрасчетныйОстатки.Субконто2 = ОстаткиНЗП.НоменклатурнаяГруппа
   |			И ХозрасчетныйОстатки.Счет = ОстаткиНЗП.СчетЗатрат
   |			И ХозрасчетныйОстатки.Субконто1 = ОстаткиНЗП.ПодразделениеОрганизации
   |
   |СГРУППИРОВАТЬ ПО
   |	ХозрасчетныйОстатки.Счет,
   |	ХозрасчетныйОстатки.Субконто1,
   |	РеализацияУслуг.СчетРасходов,
   |	РеализацияУслуг.НалоговоеНазначениеДоходовИЗатрат,
   |	РеализацияУслуг.СтатьяЗатрат,
   |	РеализацияУслуг.СуммаОборот,
   |	ХозрасчетныйОстатки.Субконто2
   |ИТОГИ
   |	МАКСИМУМ(ОстатокПрямыхРасходов),
   |	МАКСИМУМ(СуммаНЗП),
   |	СУММА(Выручка),
   |	МАКСИМУМ(ОстатокПрямыхРасходовНУ),
   |	МАКСИМУМ(СуммаНЗПНУ)
   |ПО
   |	Счет,
   |	Подразделение,
   |	НоменклатурнаяГруппа";
   
	Массив = Новый Массив;	
	

	Массив.Добавить(ПланыСчетов.Хозрасчетный.ОсновноеПроизводство);
	Массив.Добавить(ПланыСчетов.Хозрасчетный.ВспомогательныеПроизводства);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "Организация = &ТекстУсловия", "Организация = &Организация");
	
	Запрос.УстановитьПараметр("Организация",       СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("Счета", Массив);
	
	ДатаНКУ2015 = '2015 01 01';
	
   
	РезультатЗапроса = Запрос.Выполнить();
	ЗаписьРасчетаСебестоимости = СтруктураДопПараметров.ЗаписьРасчетаСебестоимости;
	
	ОбходПоСчетамЗатрат = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ОбходПоСчетамЗатрат.Следующий() Цикл
		ОбходПоПодразделениям = ОбходПоСчетамЗатрат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ОбходПоПодразделениям.Следующий() Цикл
			ОбходПоНомГруппам = ОбходПоПодразделениям.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ОбходПоНомГруппам.Следующий() Цикл
				
				Если ОбходПоНомГруппам.Выручка = NULL Тогда
					Продолжить;
				КонецЕсли;
				
				// Прямые расходы за минусом НЗП подлежат распределению
				// на стоимость готовой продукции, услуг.
				// Т.к. при оприходовании на склад готовой продукции часть прямых
				// расходов (в размере плановой стоимости этой продукции) была
				// списана, то необходимо к общей сумме прямых расходов прибавить
				// списанную ранее сумму прямых расходов.
				
				// В качестве базы распределения прямых расходов на услуги без плановых цен 
				// используется выручка
				ВсегоБазаРаспределения = ОбходПоНомГруппам.Выручка;
				
				Обход = ОбходПоНомГруппам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				Пока Обход.Следующий() Цикл
					
					ВсегоПрямыхРасходов = ОбходПоНомГруппам.ОстатокПрямыхРасходов;
					ВсегоПрямыхРасходовНУ = ОбходПоНомГруппам.ОстатокПрямыхРасходовНУ;
					
					СуммаНЗП = ОбходПоНомГруппам.СуммаНЗП;
					СуммаНЗПНУ = ОбходПоНомГруппам.СуммаНЗПНУ;
					
					СуммаПрямыхРасходовНаВыпуск = ВсегоПрямыхРасходов - СуммаНЗП;
					СуммаПрямыхРасходовНаВыпускНУ = ВсегоПрямыхРасходовНУ - СуммаНЗПНУ;
					
					Если ВсегоБазаРаспределения = 0 Тогда
						СуммаСписания = 0;
						СуммаСписанияНУ = 0;
					Иначе
						СуммаСписания = Окр(СуммаПрямыхРасходовНаВыпуск*Обход.Выручка/ВсегоБазаРаспределения, 2);
						СуммаСписанияНУ = Окр(СуммаПрямыхРасходовНаВыпускНУ*Обход.Выручка/ВсегоБазаРаспределения, 2);
					КонецЕсли;
					
					СуммаКорретировкиСписания = СуммаСписания;
					СуммаКорретировкиСписанияНУ = СуммаСписанияНУ;
					
					Если СуммаКорретировкиСписания <> 0 Тогда
						
						// Проводка типа Дт 902 Кт 23 на сумму отклонений
						НоваяПроводка = мОперация.Добавить();
						НоваяПроводка.Организация = СтруктураШапкиДокумента.Организация;
						НоваяПроводка.Активность  = Истина;
						НоваяПроводка.Период      = Дата;
						НоваяПроводка.Содержание  = НСтр("ru='Корректировка выпуска продукции (услуг)';uk='Коригування випуску продукції (послуг)'",Локализация.КодЯзыкаИнформационнойБазы());
						
						НоваяПроводка.Сумма       = СуммаКорретировкиСписания;
						
						НоваяПроводка.СчетДт = Обход.СчетРасходов;
						БухгалтерскийУчет.УстановитьСубконто( НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, "НоменклатурныеГруппы", Обход.НоменклатурнаяГруппа);
						БухгалтерскийУчет.УстановитьСубконто( НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, "СтатьиЗатрат", Обход.СтатьяЗатрат);
						
						НоваяПроводка.СчетКт = Обход.Счет;
						БухгалтерскийУчет.УстановитьСубконто( НоваяПроводка.СчетКт, НоваяПроводка.СубконтоКт, "Подразделения",        Обход.Подразделение);
						БухгалтерскийУчет.УстановитьСубконто( НоваяПроводка.СчетКт, НоваяПроводка.СубконтоКт, "НоменклатурныеГруппы", Обход.НоменклатурнаяГруппа);
						
						Если НоваяПроводка.Период < ДатаНКУ2015 Тогда
						
							Если НоваяПроводка.СчетДт.НалоговыйУчет Тогда
								НоваяПроводка.СуммаНУДт = СуммаКорретировкиСписанияНУ;
								НоваяПроводка.НалоговоеНазначениеДт = Обход.НалоговоеНазначениеДоходовИЗатрат;
							КонецЕсли;
							Если НоваяПроводка.СчетКт.НалоговыйУчет Тогда
								НоваяПроводка.СуммаНУКт = СуммаКорретировкиСписанияНУ;
								Если СтруктураШапкиДокумента.ЕстьНДС Тогда
									НоваяПроводка.НалоговоеНазначениеКт = Обход.НоменклатурнаяГруппа.НалоговоеНазначениеВПроизводстве;
								Иначе
									НоваяПроводка.НалоговоеНазначениеКт = Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяХозДеятельность;
								КонецЕсли;
							КонецЕсли;
							
						Иначе
							
							Если НоваяПроводка.СчетДт.УчетПоНалоговымНазначениямНДС Тогда
								НоваяПроводка.НалоговоеНазначениеДт = Обход.НалоговоеНазначениеДоходовИЗатрат;
							КонецЕсли;
							Если НоваяПроводка.СчетКт.УчетПоНалоговымНазначениямНДС Тогда
								Если СтруктураШапкиДокумента.ЕстьНДС Тогда
									НоваяПроводка.НалоговоеНазначениеКт = Обход.НоменклатурнаяГруппа.НалоговоеНазначениеВПроизводстве;
								Иначе
									НоваяПроводка.НалоговоеНазначениеКт = Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяХозДеятельность;
								КонецЕсли;
							КонецЕсли;
							
						КонецЕсли;
						
						Если Не СуммаКорретировкиСписания = 0 Тогда
							
							СтрокаЗаписиРасчетаСебестоимости = ЗаписьРасчетаСебестоимости.Добавить();
							СтрокаЗаписиРасчетаСебестоимости.СчетУчета = ОбходПоСчетамЗатрат.Счет;
							СтрокаЗаписиРасчетаСебестоимости.Подразделение = ОбходПоПодразделениям.Подразделение;
							СтрокаЗаписиРасчетаСебестоимости.НоменклатурнаяГруппа = ОбходПоНомГруппам.НоменклатурнаяГруппа;
							СтрокаЗаписиРасчетаСебестоимости.СуммаПлан = 0;
							СтрокаЗаписиРасчетаСебестоимости.ВидОперации = Перечисления.ВидыОперацийРасчетаСебестоимости.УслугиБезИспользованияПлановыхЦен;
							СтрокаЗаписиРасчетаСебестоимости.Сумма = СуммаКорретировкиСписания;
							СтрокаЗаписиРасчетаСебестоимости.СуммаНЗП =  СуммаНЗП;
							Если НоваяПроводка.Период < ДатаНКУ2015 Тогда
								СтрокаЗаписиРасчетаСебестоимости.СуммаНУ = СуммаКорретировкиСписанияНУ;
								СтрокаЗаписиРасчетаСебестоимости.СуммаНЗПНУ =  СуммаНЗПНУ;
							КонецЕсли;
						КонецЕсли;
						
						
					КонецЕсли;
					
				КонецЦикла; // по направлениям выпуска продукции (услуг)

			КонецЦикла; // по номенклатурным группам
		КонецЦикла; // по подразделениям
	КонецЦикла; // по счетам учета прямых затрат
			
	ПроведениеСервер.ЗаписатьНаборЗаписейБезЗамещенияТекущихДвижений(мОперация);
КонецПроцедуры

// Процедура формирует данные о прямых затратах на переделе по продукции
//
Процедура СформироватьЗапросПоПрямымЗатратам(СтруктураШапкиДокумента, ПеределПодразделение, ПеределНоменклатурнаяГруппа, РезультатЗапроса, СтруктураДопПараметров, ВыполненоРаспределениеОПР)
	
	
	УсловияВстречногоВыпуска2 = "";
	РасчетПрямыхЗатратНомер = СтруктураДопПараметров.РасчетПрямыхЗатратНомер;
	Если Лев(РасчетПрямыхЗатратНомер, 1) = "3" Тогда
		ВстречныйВыпуск = СтруктураДопПараметров.ТаблицаВстречногоВыпуска.НайтиСтроки(Новый Структура("Подразделение, НоменклатурнаяГруппа", ПеределПодразделение, ПеределНоменклатурнаяГруппа));
		Если ВстречныйВыпуск.Количество() = 0 Тогда
			РасчетПрямыхЗатратНомер = "" 
		КонецЕсли;
		
	ИначеЕсли РасчетПрямыхЗатратНомер <> "" Тогда
		ТаблицаВстречногоВыпускаДляОтбора = СтруктураДопПараметров.ТаблицаВстречногоВыпуска.Скопировать();
		ТаблицаВстречногоВыпускаДляОтбора.Свернуть("Продукция, Подразделение, НоменклатурнаяГруппа, ПодразделениеПересчета, НоменклатурнаяГруппаПересчета", );		
		ВстречныйВыпуск = ТаблицаВстречногоВыпускаДляОтбора.НайтиСтроки(Новый Структура("Подразделение, НоменклатурнаяГруппа", ПеределПодразделение, ПеределНоменклатурнаяГруппа));
		Если ВстречныйВыпуск.Количество() > 0  Тогда
			ПродукцияВстречногоВыпуска    = Новый Массив;
			ПодразделениеПересчета        = Новый Массив;
			НоменклатурнаяГруппаПересчета = Новый Массив;
			Для Каждого СтрокаВстречногоВыпуска Из ВстречныйВыпуск Цикл
				ПродукцияВстречногоВыпуска.Добавить(СтрокаВстречногоВыпуска.Продукция);
				ПодразделениеПересчета.Добавить(СтрокаВстречногоВыпуска.ПодразделениеПересчета);
				НоменклатурнаяГруппаПересчета.Добавить(СтрокаВстречногоВыпуска.НоменклатурнаяГруппаПересчета);
			КонецЦикла;
			Если РасчетПрямыхЗатратНомер = "1" Тогда
				УсловияВстречногоВыпуска2 = " И Не (Подразделение В (&ПодразделениеПересчета) И НоменклатурнаяГруппа В (&НоменклатурнаяГруппаПересчета))";
			Иначе
				УсловияВстречногоВыпуска2 = " И Подразделение В (&ПодразделениеПересчета) И НоменклатурнаяГруппа В (&НоменклатурнаяГруппаПересчета)";
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ВыпускПродукцииУслуг.СчетЗатрат КАК СчетЗатрат,
	|	ВыпускПродукцииУслуг.Подразделение КАК Подразделение,
	|	ВыпускПродукцииУслуг.НалоговоеНазначениеДоходовИЗатрат КАК НалоговоеНазначениеДоходовИЗатрат,
	|	ВыпускПродукцииУслуг.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	|	ВыпускПродукцииУслуг.Продукция,
	|	ВыпускПродукцииУслуг.СчетСписания,
	|	ВыпускПродукцииУслуг.СубконтоСписания1,
	|	ВыпускПродукцииУслуг.СубконтоСписания2,
	|	ВыпускПродукцииУслуг.СубконтоСписания3,
	|	СУММА(ЕСТЬNULL(ВыпускПродукцииУслуг.КоличествоОборот, 0)) КАК Количество,
	|	СУММА(ВЫБОР
	|			КОГДА ВыпускПродукцииУслуг.ПрямыеРасходыРаспределятьПоКоличеству
	|				ТОГДА ЕСТЬNULL(ВыпускПродукцииУслуг.КоличествоОборот, 0)
	|			ИНАЧЕ ЕСТЬNULL(ВыпускПродукцииУслуг.ПлановаяСтоимостьОборот, 0)
	|		КОНЕЦ) КАК ПлановаяСтоимость,
	|	СУММА(ЕСТЬNULL(ХозрасчетныйОстатки.СуммаОборотДт, 0)) КАК ВсегоПрямыхРасходов,
	|	СУММА(ЕСТЬNULL(ХозрасчетныйОстатки.СуммаКонечныйОстаток, 0)) КАК ОстатокПрямыхРасходов,
	|	СУММА(ЕСТЬNULL(ХозрасчетныйОстатки.СуммаНУОборотДт, 0)) КАК ВсегоПрямыхРасходовНУ,
	|	СУММА(ЕСТЬNULL(ХозрасчетныйОстатки.СуммаНУКонечныйОстаток, 0)) КАК ОстатокПрямыхРасходовНУ,
	|	СУММА(ЕСТЬNULL(ВыпускПродукцииУслуг.ПлановаяСтоимостьОборот, 0)) КАК СписаноРасходов,
	|	МАКСИМУМ(ЕСТЬNULL(ОстаткиНЗП.СуммаБУ,0)) КАК СуммаНЗП,
	|	МАКСИМУМ(ЕСТЬNULL(ОстаткиНЗП.СуммаНУ,0)) КАК СуммаНЗПНУ
	|ИЗ
	|	РегистрНакопления.ВыпускПродукцииУслугБухгалтерскийУчет.Обороты(
	|		&НачГраница, 
	|		&КонГраница, 
	|		Месяц, 
	|       Организация = &Организация  
	|       И Подразделение = &Подразделение
	|	    И НоменклатурнаяГруппа = &НоменклатурнаяГруппа) КАК ВыпускПродукцииУслуг
	|   
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ 
	|	РегистрБухгалтерии.Хозрасчетный.ОстаткиИОбороты(
	|		&НачГраница,
	|		&КонГраница,
	|		,
	|		, 
	|		Счет В ИЕРАРХИИ (&СчетаЗатрат),
	|		&ВидыСубконто, 
	|		Организация = &Организация
	|		И Субконто1 = &Подразделение
 	|		И Субконто2 = &НоменклатурнаяГруппа) КАК ХозрасчетныйОстатки
	|	ПО ВыпускПродукцииУслуг.СчетЗатрат = ХозрасчетныйОстатки.Счет 
	|	 	И ВыпускПродукцииУслуг.Подразделение = ХозрасчетныйОстатки.Субконто1 
	|		И ВыпускПродукцииУслуг.НоменклатурнаяГруппа = ХозрасчетныйОстатки.Субконто2 
	|	ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|		ИнвентаризацияНЗП.СчетЗатрат КАК СчетЗатрат,
	|		ИнвентаризацияНЗП.ПодразделениеОрганизации КАК Подразделение,
	|		ИнвентаризацияНЗПСостав.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	|		СУММА(ИнвентаризацияНЗПСостав.СуммаБУ) КАК СуммаБУ,
	|		СУММА(ИнвентаризацияНЗПСостав.СуммаНУ) КАК СуммаНУ
	|	ИЗ
	|		Документ.ИнвентаризацияНЗП.Состав КАК ИнвентаризацияНЗПСостав
	|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.ИнвентаризацияНЗП КАК ИнвентаризацияНЗП
	|			ПО ИнвентаризацияНЗПСостав.Ссылка = ИнвентаризацияНЗП.Ссылка
	|		
	|	ГДЕ
	|		ИнвентаризацияНЗП.Дата МЕЖДУ &НачДата И &КонДата 
	|		И ИнвентаризацияНЗП.Организация = &Организация 
   	|			И ИнвентаризацияНЗП.Проведен
	|
	|	СГРУППИРОВАТЬ ПО
	|		ИнвентаризацияНЗП.ПодразделениеОрганизации,
	|		ИнвентаризацияНЗПСостав.НоменклатурнаяГруппа,
	|		ИнвентаризацияНЗП.СчетЗатрат) КАК ОстаткиНЗП
	|	ПО ХозрасчетныйОстатки.Субконто1 = ОстаткиНЗП.Подразделение 
	|	 И ХозрасчетныйОстатки.Субконто2 = ОстаткиНЗП.НоменклатурнаяГруппа 
	|	 И ХозрасчетныйОстатки.Счет = ОстаткиНЗП.СчетЗатрат
	|
	|СГРУППИРОВАТЬ ПО
	|	ВыпускПродукцииУслуг.СчетЗатрат,
	|	ВыпускПродукцииУслуг.Подразделение,
	|	ВыпускПродукцииУслуг.НалоговоеНазначениеДоходовИЗатрат,
	|	ВыпускПродукцииУслуг.НоменклатурнаяГруппа,
	|	ВыпускПродукцииУслуг.Продукция,
	|	ВыпускПродукцииУслуг.СчетСписания,
	|	ВыпускПродукцииУслуг.СубконтоСписания1,
	|	ВыпускПродукцииУслуг.СубконтоСписания2,
	|	ВыпускПродукцииУслуг.СубконтоСписания3,
	|	ОстаткиНЗП.СуммаБУ,
	|	ЕСТЬNULL(ХозрасчетныйОстатки.СуммаКонечныйОстаток, 0)
	|
	|ИТОГИ 
	|	СУММА(Количество), 
	|	СУММА(ПлановаяСтоимость),
	|	МАКСИМУМ(ОстатокПрямыхРасходов), 
	|	СУММА(ВсегоПрямыхРасходов),
	|	СУММА(СписаноРасходов),
	|	МАКСИМУМ(ОстатокПрямыхРасходовНУ),
	|	СУММА(ВсегоПрямыхРасходовНУ),
	|	МАКСИМУМ(СуммаНЗП), 
	|	МАКСИМУМ(СуммаНЗПНУ)
	|ПО	
	|	СчетЗатрат,
	|	Подразделение,
	|	НоменклатурнаяГруппа
	|";
		
	
	Если ПеределНоменклатурнаяГруппа = "Все" Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"И НоменклатурнаяГруппа = &НоменклатурнаяГруппа) КАК ВыпускПродукцииУслуг", ")" + УсловияВстречногоВыпуска2 + "КАК ВыпускПродукцииУслуг");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"И Субконто2 = &НоменклатурнаяГруппа) КАК ХозрасчетныйОстатки", ") КАК ХозрасчетныйОстатки");
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"И НоменклатурнаяГруппа = &НоменклатурнаяГруппа) КАК ВыпускПродукцииУслуг", "И НоменклатурнаяГруппа = &НоменклатурнаяГруппа" + УсловияВстречногоВыпуска2 + ") КАК ВыпускПродукцииУслуг");
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр("НачДата",               мНачМесяца);
	Запрос.УстановитьПараметр("КонДата",               мКонМесяца);
	Запрос.УстановитьПараметр("НачГраница",            мНачГраница);
	Запрос.УстановитьПараметр("КонГраница",            мКонГраница);
	Запрос.УстановитьПараметр("Организация",           СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("Подразделение",         ПеределПодразделение);
	Запрос.УстановитьПараметр("НоменклатурнаяГруппа",  ПеределНоменклатурнаяГруппа);
	Запрос.УстановитьПараметр("НоменклатурнаяГруппаПересчета",  НоменклатурнаяГруппаПересчета);
	Запрос.УстановитьПараметр("ПодразделениеПересчета",      ПодразделениеПересчета);
	Запрос.УстановитьПараметр("ПродукцияВстречногоВыпуска",  ПродукцияВстречногоВыпуска);
	
	СчетаЗатрат = Новый Массив;
	СчетаЗатрат.Добавить(ПланыСчетов.Хозрасчетный.ОсновноеПроизводство); 
	СчетаЗатрат.Добавить(ПланыСчетов.Хозрасчетный.ВспомогательныеПроизводства);
	
	Запрос.УстановитьПараметр("СчетаЗатрат",        СчетаЗатрат);
	
	ВидыСубконто = Новый Массив;
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Подразделения);
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы);
	Запрос.УстановитьПараметр("ВидыСубконто",  ВидыСубконто);
	
	РезультатЗапроса = Запрос.Выполнить();
	
КонецПроцедуры // СформироватьЗапросПоПрямымЗатратам()

// Процедура формирования движений по прямым затратам по переделу
// Производит распределение прямых расходов, учтенных на счетах 231 и 232,
// на стоимость продукции (услуг).
// Распределяются только те прямые расходы, для которых установлен текущий номер передела.
//
//	Параметры:
//		НомерПередела - Число - номер передела;
//		ВыполненоРаспределениеОПР - Булево - определяет на данный момент выполнено ли
//			распределение общепроизводственных и общехозяйственных расходов.
//
Процедура ДвиженияПоПрямымЗатратам(СтруктураШапкиДокумента, ПеределПодразделение = "", ПеределНоменклатурнаяГруппа = "", ВыполненоРаспределениеОПР = Ложь, МассивНоменклатуры, СтруктураДопПараметров)
	
	Если Не УчетнаяПолитика.ПорядокРаспределенияРасходовНаОказаниеУслуг(СтруктураШапкиДокумента.Организация, СтруктураШапкиДокумента.Дата) = Перечисления.ПорядокРаспределенияРасходовНаОказаниеУслуг.ПоПлановымЦенам Тогда
		ДвиженияПоПрямымЗатратамПоУслугам(СтруктураШапкиДокумента, СтруктураДопПараметров, ВыполненоРаспределениеОПР);
	КонецЕсли;
	
	ДатаНКУ2015 = '2015 01 01';
	
	// Формирование запроса по прямым расходам.
	РезультатЗапроса = Неопределено;
	СформироватьЗапросПоПрямымЗатратам(СтруктураШапкиДокумента, ПеределПодразделение, ПеределНоменклатурнаяГруппа, РезультатЗапроса, СтруктураДопПараметров, ВыполненоРаспределениеОПР);
	
	ЗаписьРасчетаСебестоимости = СтруктураДопПараметров.ЗаписьРасчетаСебестоимости;
	
	// Выбираются прямые расходы в разрезе счета учета, подразделения, номенклатурной группы.
	ОбходПоСчетамЗатарт = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ОбходПоСчетамЗатарт.Следующий() Цикл
		ОбходПоПодразделениям = ОбходПоСчетамЗатарт.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ОбходПоПодразделениям.Следующий() Цикл
			ОбходПоНомГруппам = ОбходПоПодразделениям.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ОбходПоНомГруппам.Следующий() Цикл
				
				// Прямые расходы за минусом НЗП подлежат распределению
				// на стоимость готовой продукции, услуг.
				// Т.к. при оприходовании на склад готовой продукции часть прямых
				// расходов (в размере плановой стоимости этой продукции) была
				// списана, то необходимо к общей сумме прямых расходов прибавить
				// списанную ранее сумму прямых расходов.
				
				СписаноРасходов = ОбходПоНомГруппам.СписаноРасходов;
				ВсегоПрямыхРасходов = ОбходПоНомГруппам.ОстатокПрямыхРасходов + ?(ВыполненоРаспределениеОПР, 0, СписаноРасходов);
				СуммаНЗП = ОбходПоНомГруппам.СуммаНЗП;
				СуммаНЗПНУ = ОбходПоНомГруппам.СуммаНЗПНУ;
				СуммаПрямыхРасходовНаВыпуск = ВсегоПрямыхРасходов - СуммаНЗП;
				ВсегоПрямыхРасходовНУ = ОбходПоНомГруппам.ОстатокПрямыхРасходовНУ + ?(ВыполненоРаспределениеОПР, 0, СписаноРасходов);
				СуммаПрямыхРасходовНаВыпускНУ = ВсегоПрямыхРасходовНУ - СуммаНЗПНУ;
				
				// В качестве базы распределения прямых расходов на выпущенную продукцию
				// используется плановая себестоимость.
				ВсегоБазаРаспределения = ОбходПоНомГруппам.ПлановаяСтоимость;
				РаспределеноБазыРаспределения = 0;
				СписаноПрямыхРасходов = 0;
				СписаноПрямыхРасходовНУ = 0;
				
				ПоследнийПередел = (Лев(СтруктураДопПараметров.РасчетПрямыхЗатратНомер, 1) = "1" Или  СтруктураДопПараметров.РасчетПрямыхЗатратНомер = "");
				Если ПоследнийПередел И НЕ СуммаНЗП = 0 И Не ВыполненоРаспределениеОПР Тогда
					СтрокаЗаписиРасчетаСебестоимости = ЗаписьРасчетаСебестоимости.Добавить();
					СтрокаЗаписиРасчетаСебестоимости.СчетУчета = ОбходПоСчетамЗатарт.СчетЗатрат;
					СтрокаЗаписиРасчетаСебестоимости.Подразделение = ОбходПоПодразделениям.Подразделение;
					СтрокаЗаписиРасчетаСебестоимости.НоменклатурнаяГруппа = ОбходПоНомГруппам.НоменклатурнаяГруппа;
					СтрокаЗаписиРасчетаСебестоимости.ВидОперации = Перечисления.ВидыОперацийРасчетаСебестоимости.РасходыНаПроизводствоПродукцииИУслуг;
					СтрокаЗаписиРасчетаСебестоимости.СуммаНЗП =  СуммаНЗП;
					Если СтруктураШапкиДокумента.Дата < ДатаНКУ2015 Тогда
						СтрокаЗаписиРасчетаСебестоимости.СуммаНЗПНУ =  СуммаНЗПНУ;
					КонецЕсли;
					СтрокаЗаписиРасчетаСебестоимости.Сумма    =  0;
					СтрокаЗаписиРасчетаСебестоимости.СуммаНУ    =  0;
					СтрокаЗаписиРасчетаСебестоимости.СуммаПлан=  0;
				КонецЕсли;	
				
				
				// Обход по операциям выпуска продукции (услуг). Обходя все операции выпуска
				// производим распределение по ним прямых расходов.
				ТаблицаКорректируемыхНаправлений = Новый ТаблицаЗначений;
				ТаблицаКорректируемыхНаправлений.Колонки.Добавить("Продукция");
				ТаблицаКорректируемыхНаправлений.Колонки.Добавить("Подразделение");
				ТаблицаКорректируемыхНаправлений.Колонки.Добавить("НоменклатурнаяГруппа");
				ТаблицаКорректируемыхНаправлений.Колонки.Добавить("НалоговоеНазначениеДоходовИЗатрат");
				ТаблицаКорректируемыхНаправлений.Колонки.Добавить("СубконтоСписания1");
				ТаблицаКорректируемыхНаправлений.Колонки.Добавить("СубконтоСписания2");
				ТаблицаКорректируемыхНаправлений.Колонки.Добавить("СубконтоСписания3");
				ТаблицаКорректируемыхНаправлений.Колонки.Добавить("СчетСписания");
				ТаблицаКорректируемыхНаправлений.Колонки.Добавить("СчетЗатрат");
				ТаблицаКорректируемыхНаправлений.Колонки.Добавить("Количество");
				ТаблицаКорректируемыхНаправлений.Колонки.Добавить("СуммаКорректировкиСписания");
				ТаблицаКорректируемыхНаправлений.Колонки.Добавить("СуммаКорректировкиСписанияНУ");
				ТаблицаКорректируемыхНаправлений.Колонки.Добавить("СписаноРасходов");
				ТаблицаКорректируемыхНаправлений.Колонки.Добавить("ПлановаяСтоимость");
				ТаблицаКорректируемыхНаправлений.Колонки.Добавить("СуммаНЗП");
				ТаблицаКорректируемыхНаправлений.Колонки.Добавить("СуммаНЗПНУ");
				
				СуммаНеКорректируемыхНаправлений = 0;
				СуммаНеКорректируемыхНаправленийНУ = 0;
				
				Обход = ОбходПоНомГруппам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				СуммаКорректировкиСписанияИтог = 0;
				Пока Обход.Следующий() Цикл
					
					РаспределеноБазыРаспределения = РаспределеноБазыРаспределения + Обход.ПлановаяСтоимость;
					
					Если ВсегоБазаРаспределения = 0 Тогда
						СуммаСписания = 0;
						СуммаСписанияНУ = 0;
					Иначе
						СуммаСписания = Окр(СуммаПрямыхРасходовНаВыпуск/ВсегоБазаРаспределения*РаспределеноБазыРаспределения, 2) - СписаноПрямыхРасходов;
						СуммаСписанияНУ = Окр(СуммаПрямыхРасходовНаВыпускНУ/ВсегоБазаРаспределения*РаспределеноБазыРаспределения, 2) - СписаноПрямыхРасходовНУ;
					КонецЕсли;
					СписаноПрямыхРасходов = СписаноПрямыхРасходов + СуммаСписания;
					
					СписаноПрямыхРасходовНУ = СписаноПрямыхРасходовНУ + СуммаСписанияНУ;
					
					Если ВыполненоРаспределениеОПР Тогда
						СуммаКорректировкиСписания = СуммаСписания;
						СуммаКорректировкиСписанияНУ = СуммаСписанияНУ;
					Иначе
						СуммаКорректировкиСписания = СуммаСписания - Обход.СписаноРасходов;
						СуммаКорректировкиСписанияНУ = СуммаСписанияНУ - Обход.СписаноРасходов;
					КонецЕсли; 
					
					Если Найти("ПоСредней", СтруктураДопПараметров.РасчетПрямыхЗатратНомер) = 0 Тогда
						Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
							УровеньВстречногоВыпуска = (Лев(СтруктураДопПараметров.РасчетПрямыхЗатратНомер, 1) = "3");						
						КонецЕсли;
					Иначе
						УровеньВстречногоВыпуска =  Ложь
					КонецЕсли;
					
					Если УровеньВстречногоВыпуска И СтруктураДопПараметров.РасчетПрямыхЗатратНомер <> "3ПоCредней" Тогда
						ВстречныйВыпуск = СтруктураДопПараметров.ТаблицаВстречногоВыпуска.НайтиСтроки(Новый Структура("Подразделение, НоменклатурнаяГруппа, Продукция, СубконтоКт2, СубконтоКт3", Обход.Подразделение, Обход.НоменклатурнаяГруппа, Обход.СубконтоСписания1, Обход.СубконтоСписания2, Обход.СубконтоСписания3));
						Если ВстречныйВыпуск.Количество() > 0 Тогда
							СуммаНеКорректируемыхНаправлений = СуммаНеКорректируемыхНаправлений + СуммаКорректировкиСписания;
							СуммаНеКорректируемыхНаправленийНУ = СуммаНеКорректируемыхНаправленийНУ + СуммаКорректировкиСписанияНУ;
							Продолжить;
						Иначе
							ВстречныйВыпуск = СтруктураДопПараметров.ТаблицаВстречногоВыпуска.НайтиСтроки(Новый Структура("Подразделение, НоменклатурнаяГруппа, Продукция, СубконтоКт2", Обход.Подразделение, Обход.НоменклатурнаяГруппа, Обход.СубконтоСписания1, Обход.СубконтоСписания2));
							Если ВстречныйВыпуск.Количество() > 0 Тогда
								СуммаНеКорректируемыхНаправлений = СуммаНеКорректируемыхНаправлений + СуммаКорректировкиСписания;
								СуммаНеКорректируемыхНаправленийНУ = СуммаНеКорректируемыхНаправленийНУ + СуммаКорректировкиСписанияНУ;
								Продолжить;
							КонецЕсли;							
							
							ВстречныйВыпуск = СтруктураДопПараметров.ТаблицаВстречногоВыпуска.НайтиСтроки(Новый Структура("Подразделение, НоменклатурнаяГруппа, ПодразделениеПересчета", Обход.Подразделение, Обход.НоменклатурнаяГруппа, Обход.СубконтоСписания1));
							Если ВстречныйВыпуск.Количество() > 0 Тогда
								СуммаНеКорректируемыхНаправлений = СуммаНеКорректируемыхНаправлений + СуммаКорректировкиСписания;
								СуммаНеКорректируемыхНаправленийНУ = СуммаНеКорректируемыхНаправленийНУ + СуммаКорректировкиСписанияНУ;
								Продолжить;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
					
					НоваяСтрока = ТаблицаКорректируемыхНаправлений.Добавить();
					НоваяСтрока.Продукция            = Обход.Продукция;
					НоваяСтрока.Подразделение        = Обход.Подразделение;
					НоваяСтрока.НалоговоеНазначениеДоходовИЗатрат = Обход.НалоговоеНазначениеДоходовИЗатрат;
					НоваяСтрока.НоменклатурнаяГруппа = Обход.НоменклатурнаяГруппа;
					НоваяСтрока.СубконтоСписания1    = Обход.СубконтоСписания1;
					НоваяСтрока.СубконтоСписания2    = Обход.СубконтоСписания2;
					НоваяСтрока.СубконтоСписания3    = Обход.СубконтоСписания3;
					НоваяСтрока.СчетСписания         = Обход.СчетСписания;
					НоваяСтрока.СчетЗатрат           = Обход.СчетЗатрат;
					НоваяСтрока.Количество           = Обход.Количество;
					НоваяСтрока.СуммаКорректировкиСписания = СуммаКорректировкиСписания;
					НоваяСтрока.СуммаКорректировкиСписанияНУ = СуммаКорректировкиСписанияНУ;
					НоваяСтрока.СписаноРасходов=?(ВыполненоРаспределениеОПР, 0, Обход.СписаноРасходов);
					
					НоваяСтрока.ПлановаяСтоимость   = Обход.ПлановаяСтоимость;
					НоваяСтрока.СуммаНЗП            = Обход.СуммаНЗП;
					НоваяСтрока.СуммаНЗПНУ          = Обход.СуммаНЗПНУ;
					
				КонецЦикла; // по направлениям выпуска продукции (услуг)
				
				ВсегоКорректировок = ТаблицаКорректируемыхНаправлений.Итог("СуммаКорректировкиСписания");
				ВсегоКорректировокНУ = ТаблицаКорректируемыхНаправлений.Итог("СуммаКорректировкиСписанияНУ");
				
				КоэффициентРаспределенияНекорректируемойСуммы = ?(ВсегоКорректировок = 0, 0, СуммаНеКорректируемыхНаправлений / ВсегоКорректировок);
				КоэффициентРаспределенияНекорректируемойСуммыНУ = ?(ВсегоКорректировокНУ = 0, 0, СуммаНеКорректируемыхНаправленийНУ / ВсегоКорректировокНУ);
				
				Для Каждого Обход Из ТаблицаКорректируемыхНаправлений Цикл
					СуммаКорректировкиСписания = Обход.СуммаКорректировкиСписания * (1 + КоэффициентРаспределенияНекорректируемойСуммы);
					СуммаКорректировкиСписанияНУ = Обход.СуммаКорректировкиСписанияНУ * (1 + КоэффициентРаспределенияНекорректируемойСуммыНУ);
					СписаноРасходов = Обход.СписаноРасходов * (1 + КоэффициентРаспределенияНекорректируемойСуммы);
					СписаноРасходовНУ = Обход.СписаноРасходов * (1 + КоэффициентРаспределенияНекорректируемойСуммыНУ);
					// Формирование проводок по списанию
					Если СуммаКорректировкиСписания <> 0 ИЛИ СуммаКорректировкиСписанияНУ <> 0 Тогда
						// Проводка Дт 26 Кт 23 на сумму отклонений
						НоваяПроводка = мОперация.Добавить();
						НоваяПроводка.Организация = СтруктураШапкиДокумента.Организация;
						НоваяПроводка.Активность  = Истина;
						НоваяПроводка.Период      = Дата;
						НоваяПроводка.Содержание  = НСтр("ru='Корректировка выпуска продукции (услуг)';uk='Коригування випуску продукції (послуг)'",Локализация.КодЯзыкаИнформационнойБазы());
						
						НоваяПроводка.Сумма       = СуммаКорректировкиСписания;
						Если НоваяПроводка.Период < ДатаНКУ2015 Тогда
						
							НоваяПроводка.СуммаНУДт       = СуммаКорректировкиСписанияНУ;
							НоваяПроводка.СуммаНУКт       = СуммаКорректировкиСписанияНУ;
							НоваяПроводка.НалоговоеНазначениеДт = Обход.НалоговоеНазначениеДоходовИЗатрат;
							Если СтруктураШапкиДокумента.ЕстьНДС Тогда
								НоваяПроводка.НалоговоеНазначениеКт = Обход.НоменклатурнаяГруппа.НалоговоеНазначениеВПроизводстве;
							Иначе
								НоваяПроводка.НалоговоеНазначениеКт = Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяХозДеятельность;
							КонецЕсли;
						Иначе 
							
							Если Обход.СчетСписания.УчетПоНалоговымНазначениямНДС Тогда
								НоваяПроводка.НалоговоеНазначениеДт = Обход.НалоговоеНазначениеДоходовИЗатрат;
							КонецЕсли;
							Если Обход.СчетЗатрат.УчетПоНалоговымНазначениямНДС Тогда
								Если СтруктураШапкиДокумента.ЕстьНДС Тогда
									НоваяПроводка.НалоговоеНазначениеКт = Обход.НоменклатурнаяГруппа.НалоговоеНазначениеВПроизводстве;
								Иначе
									НоваяПроводка.НалоговоеНазначениеКт = Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяХозДеятельность;
								КонецЕсли;
							КонецЕсли;
							
						КонецЕсли;
						
						НоваяПроводка.СчетДт = Обход.СчетСписания;
						БухгалтерскийУчет.УстановитьСубконто( НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, 1, Обход.СубконтоСписания1);
						БухгалтерскийУчет.УстановитьСубконто( НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, 2, Обход.СубконтоСписания2);
						БухгалтерскийУчет.УстановитьСубконто( НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, 3, Обход.СубконтоСписания3);
						
						НоваяПроводка.СчетКт = Обход.СчетЗатрат;
						БухгалтерскийУчет.УстановитьСубконто( НоваяПроводка.СчетКт, НоваяПроводка.СубконтоКт, "Подразделения",        Обход.Подразделение);
						БухгалтерскийУчет.УстановитьСубконто( НоваяПроводка.СчетКт, НоваяПроводка.СубконтоКт, "НоменклатурныеГруппы", Обход.НоменклатурнаяГруппа);
						
						// Добавим в таблицу список номенклатуры, у которой изменилась средневзвешенная
						// стоимость и, следовательно, необходимо выполнить корректировку списаний.
						Для НомерСубконто = 1 По 2 Цикл
							Если ТипЗнч(Обход["СубконтоСписания" + НомерСубконто]) = Тип("СправочникСсылка.Номенклатура") Тогда
								МассивНоменклатуры.Добавить(Обход["СубконтоСписания" + НомерСубконто]);
								Прервать;
							КонецЕсли;
						КонецЦикла;
						
					КонецЕсли;
					
					СтрокаЗаписиРасчетаСебестоимости = ЗаписьРасчетаСебестоимости.Добавить();
					СтрокаЗаписиРасчетаСебестоимости.СчетУчета = ОбходПоСчетамЗатарт.СчетЗатрат;
					СтрокаЗаписиРасчетаСебестоимости.Подразделение = ОбходПоПодразделениям.Подразделение;
					СтрокаЗаписиРасчетаСебестоимости.НоменклатурнаяГруппа = ОбходПоНомГруппам.НоменклатурнаяГруппа;
					СтрокаЗаписиРасчетаСебестоимости.Продукция = Обход.СубконтоСписания1;
					СтрокаЗаписиРасчетаСебестоимости.СуммаПлан = Обход.ПлановаяСтоимость;
					СтрокаЗаписиРасчетаСебестоимости.ДокументВыпуска = Строка(Обход.СубконтоСписания2) + " " + Строка(Обход.СубконтоСписания3);
					СтрокаЗаписиРасчетаСебестоимости.ВидОперации = Перечисления.ВидыОперацийРасчетаСебестоимости.ВыпускПродукцииИУслуг;
					СтрокаЗаписиРасчетаСебестоимости.Сумма = СуммаКорректировкиСписания;
					Если Дата < ДатаНКУ2015 Тогда
						СтрокаЗаписиРасчетаСебестоимости.СуммаНУ = СуммаКорректировкиСписанияНУ;
					КонецЕсли;
					
				КонецЦикла
				
			КонецЦикла; // по номенклатурным группам
		КонецЦикла; // по подразделениям
	КонецЦикла; // по счетам учета прямых затрат
			
	ПроведениеСервер.ЗаписатьНаборЗаписейБезЗамещенияТекущихДвижений(мОперация);
	
КонецПроцедуры // ДвиженияПоПрямымЗатратам()

// Процедура производит корректировку стоимости списания
// выпущенной в текущем месяце продукции.
Процедура КорректировкаСтоимостиСписанияВыпущеннойПродукции(СтруктураШапкиДокумента, МассивНоменклатуры, ВыполненоРаспределениеОПР, СтруктураДопПараметров)

	// Формирование корректировки стоимости списаний, исходя из средневзвешенной стоимости номенклатуры
	СтруктураДопПараметров.Вставить("Учет",           ?(СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете, "Бух", "Нал"));
	СтруктураДопПараметров.Вставить("Организация",    СтруктураШапкиДокумента.Организация);
	СтруктураДопПараметров.Вставить("Период",         Дата);
	СтруктураДопПараметров.Вставить("Регистратор",    ЭтотОбъект);
	СтруктураДопПараметров.Вставить("ТаблицаТоваров", МассивНоменклатуры);
	
	// После закрытия общепроизводственных расходов необходимо,
	// чтобы не корректировалось списание номенклатуры в дебет
	// счета 91
	Если ВыполненоРаспределениеОПР Тогда
		
		// Массив счетов по которым не надо делать корректировку операций списания
		МассивСчетов = Новый Массив;

		МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.ОсновноеПроизводство);
		МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.ВспомогательныеПроизводства);
		МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.ОбщепроизводственныеРасходы);
		
		СтруктураДопПараметров.Вставить("СписокНеКорректируемыхСчетов", МассивСчетов);
		
	Иначе
		СтруктураДопПараметров.Вставить("СписокНеКорректируемыхСчетов", Неопределено);
	КонецЕсли;
	
	КорректировкаСтоимости.КорректировкаСтоимости(МассивНоменклатуры, мНачМесяца, мКонМесяца, СтруктураДопПараметров);
	
	ПроведениеСервер.ЗаписатьНаборЗаписейБезЗамещенияТекущихДвижений(мОперация);
	
КонецПроцедуры

Функция РасчетПорядкаПеределов(СтруктураШапкиДокумента, СтруктураДопПараметров)
	
    СпособРасчетаСебестоимостиПроизводства = УчетнаяПолитика.СпособРасчетаСебестоимостиПроизводства(СтруктураШапкиДокумента.Организация, СтруктураШапкиДокумента.Дата);
	
	Если СпособРасчетаСебестоимостиПроизводства  = Перечисления.СпособыРасчетаСебестоимостиПродукции.ПоПеределам Тогда
		
		СтруктураДопПараметров.СпособРасчетаСебестоимостиПроизводства = "ПоПеределам";
		ПорядокПеределов = ПолучитьПорядокПеределов(СтруктураШапкиДокумента, СтруктураДопПараметров);
		
	Иначе
		
		СтруктураДопПараметров.СпособРасчетаСебестоимостиПроизводства = "ПоПодразделениям";
		ПроверкаПорядкаЗакрытияПодразделений(СтруктураШапкиДокумента);
		ПорядокПеределов = ПолучитьПорядокПодразделений(СтруктураШапкиДокумента, СтруктураДопПараметров);
		
	КонецЕсли;
	
КонецФункции 

Функция АнализДанныхПроизводства(СтруктураШапкиДокумента, СтруктураДопПараметров)
	
	
	// Модель производства ввиде последовательности цепочек:
	//ГП(готовая продукция),
	//Подразделение,
	//ном.группа,
	//Номенклатура, израсходованная на производство, в этом подразделении и на эту ном.группу, а значит и на эту ГП
	//счет учета затрат производства
	
	СчетаЗатрат = Новый Массив;
	
	ПС = ПланыСчетов.Хозрасчетный;
	
	РазрешитьУчетУслугБезПлановыхЦен = Не УчетнаяПолитика.ПорядокРаспределенияРасходовНаОказаниеУслуг(СтруктураШапкиДокумента.Организация, СтруктураШапкиДокумента.Дата) = Перечисления.ПорядокРаспределенияРасходовНаОказаниеУслуг.ПоПлановымЦенам;
	
	СчетаЗатрат.Добавить(ПС.ОсновноеПроизводство);
	СчетаЗатрат.Добавить(ПС.ВспомогательныеПроизводства);
	
	Запрос = Новый Запрос;	
	Запрос.Текст = 	
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаЗатрат.Источник КАК Источник,
	|	ТаблицаЗатрат.Подразделение КАК Подразделение,
	|	ПРЕДСТАВЛЕНИЕ(ТаблицаЗатрат.Подразделение) КАК ПодразделениеПредставление,
	|	ТаблицаЗатрат.КонечныйОстатокОПЗ КАК КонечныйОстатокОПЗ, 
	|	ЕСТЬNULL(ТаблицаГП.НоменклатурнаяГруппа, ТаблицаЗатрат.НоменклатурнаяГруппа) КАК НоменклатурнаяГруппа,
	|	ПРЕДСТАВЛЕНИЕ(ЕСТЬNULL(ТаблицаГП.НоменклатурнаяГруппа, ТаблицаЗатрат.НоменклатурнаяГруппа)) КАК НоменклатурнаяГруппаПредставление,
	|	ЕСТЬNULL(ТаблицаГП.ГП, ""NULL"") КАК ГП,
	|	ТаблицаЗатрат.СчетЗатрат КАК СчетЗатрат,
	|	ТаблицаЗатрат.НоменклатураЗатрат КАК НоменклатураЗатрат,
	|	ПРЕДСТАВЛЕНИЕ(ТаблицаЗатрат.НоменклатураЗатрат) КАК НоменклатураЗатратПредставление
	|ИЗ
	|	(ВЫБРАТЬ
	|		1 КАК Источник,
	|		0 КАК КонечныйОстатокОПЗ,
	|		ХозрасчетныйОбороты.СубконтоДт1 КАК Подразделение,
	|		ХозрасчетныйОбороты.СубконтоДт2 КАК НоменклатурнаяГруппа,
	|		ХозрасчетныйОбороты.СчетДт КАК СчетЗатрат,
	|		ХозрасчетныйОбороты.СубконтоКт1 КАК НоменклатураЗатрат
	|	ИЗ
	|		РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(&НачДата, &КонДата, , СчетДт В ИЕРАРХИИ (&Счета), , (НЕ СчетКт В ИЕРАРХИИ (&Счета)), , Организация = &Организация) КАК ХозрасчетныйОбороты
	|	
	|	ОБЪЕДИНИТЬ
	|	
	|	
	|	ВЫБРАТЬ
	|		1,
	|		0 КАК КонечныйОстатокОПЗ,
	|		ХозрасчетныйОбороты.СубконтоДт1,
	|		ХозрасчетныйОбороты.СубконтоДт2,
	|		ХозрасчетныйОбороты.СчетДт,
	|		ВыпускПродукцииУслугБухгалтерскийУчетОбороты.Продукция
	|	ИЗ
	|		РегистрНакопления.ВыпускПродукцииУслугБухгалтерскийУчет.Обороты(
	|			&НачДата,
	|			&КонДата,
	|			,
	|			СчетЗатрат В ИЕРАРХИИ (&Счета)
	|			    И Организация = &Организация) КАК ВыпускПродукцииУслугБухгалтерскийУчетОбороты
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(&НачДата, &КонДата, , СчетДт В ИЕРАРХИИ (&Счета), , СчетКт В ИЕРАРХИИ (&Счета), , Организация = &Организация) КАК ХозрасчетныйОбороты
	|			ПО ВыпускПродукцииУслугБухгалтерскийУчетОбороты.СчетЗатрат = ХозрасчетныйОбороты.СчетКт
	|				И ВыпускПродукцииУслугБухгалтерскийУчетОбороты.НоменклатурнаяГруппа = ХозрасчетныйОбороты.СубконтоКт2
	|				И ВыпускПродукцииУслугБухгалтерскийУчетОбороты.Подразделение = ХозрасчетныйОбороты.СубконтоКт1
	|	
	|	ОБЪЕДИНИТЬ
	|	
	|	ВЫБРАТЬ
	|		1,
	|		0 КАК КонечныйОстатокОПЗ,
	|		ВложенныйЗапрос.Субконто1,
	|		ВложенныйЗапрос.Субконто2,
	|		ВложенныйЗапрос.Счет,
	|		ХозрасчетныйОбороты.СубконтоКт1
	|	ИЗ
	|		(ВЫБРАТЬ
	|			ХозрасчетныйОстатки.Субконто1 КАК Субконто1,
	|			ХозрасчетныйОстатки.Субконто2 КАК Субконто2,
	|			ХозрасчетныйОстатки.Счет КАК Счет
	|		ИЗ
	|			РегистрБухгалтерии.Хозрасчетный.Остатки(&НачДата, Счет В ИЕРАРХИИ (&Счета), , Организация = &Организация) КАК ХозрасчетныйОстатки) КАК ВложенныйЗапрос
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(&НачДата, &КонДата, , СчетДт В ИЕРАРХИИ (&Счета), , , , Организация = &Организация) КАК ХозрасчетныйОбороты
	|			ПО ХозрасчетныйОбороты.СубконтоДт1 = ВложенныйЗапрос.Субконто1
	|				И ХозрасчетныйОбороты.СубконтоДт2 = ВложенныйЗапрос.Субконто2
	|				И ХозрасчетныйОбороты.СчетДт = ВложенныйЗапрос.Счет
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		2,
	|		ЕСТЬNULL(КонОстаткиОПЗ.СуммаОстаток, 0) КАК КонечныйОстатокОПЗ,
	|		ХозрасчетныйОборотыДтКт.СубконтоДт1,
	|		NULL,
	|		ХозрасчетныйОборотыДтКт.СчетДт,
	|		&ПустаяСтатьяЗатрат
	|	ИЗ
	|		РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(&НачДата, &КонДата, , СчетДт В ИЕРАРХИИ (&СчетаОбщихЗатрат), , , , Организация = &Организация) КАК ХозрасчетныйОборотыДтКт 
	|			ЛЕВОЕ СОЕДИНЕНИЕ 
    |				РегистрБухгалтерии.Хозрасчетный.Остатки(&КонГраница, Счет В ИЕРАРХИИ (&СчетаОбщихЗатрат), , Организация = &Организация) КАК КонОстаткиОПЗ
    |			ПО 
    |				ХозрасчетныйОборотыДтКт.СубконтоДт1 = КонОстаткиОПЗ.Субконто1  // по подразделению
	| ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		1,
	|		0 КАК КонечныйОстатокОПЗ,
	|		ВыпускПродукцииУслугБухгалтерскийУчетОбороты.СубконтоСписания1,
	|		ВыпускПродукцииУслугБухгалтерскийУчетОбороты.СубконтоСписания2,
	|		ВыпускПродукцииУслугБухгалтерскийУчетОбороты.СчетСписания,
	|		ВыпускПродукцииУслугБухгалтерскийУчетОбороты.НоменклатурнаяГруппа
	|	ИЗ
	|		РегистрНакопления.ВыпускПродукцииУслугБухгалтерскийУчет.Обороты(
	|			&НачДата,
	|			&КонДата,
	|			Месяц,
	|			СчетЗатрат В ИЕРАРХИИ (&Счета)
	|				И ПрямыеРасходыРаспределятьПоКоличеству
	|				И Организация = &Организация) КАК ВыпускПродукцииУслугБухгалтерскийУчетОбороты) КАК ТаблицаЗатрат
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ВыпускПродукцииУслугБухгалтерскийУчетОбороты.Подразделение КАК Подразделение,
	|			ВыпускПродукцииУслугБухгалтерскийУчетОбороты.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	|			ВыпускПродукцииУслугБухгалтерскийУчетОбороты.СчетЗатрат КАК СчетЗатрат,
	|			ВЫБОР
	|				КОГДА ВыпускПродукцииУслугБухгалтерскийУчетОбороты.Продукция.Услуга
	|					ТОГДА ВыпускПродукцииУслугБухгалтерскийУчетОбороты.Подразделение
	|				ИНАЧЕ ВыпускПродукцииУслугБухгалтерскийУчетОбороты.Продукция
	|			КОНЕЦ КАК ГП
	|		ИЗ
	|			РегистрНакопления.ВыпускПродукцииУслугБухгалтерскийУчет.Обороты(
	|				&НачДата,
	|				&КонДата,
	|				,
	|				СчетЗатрат В ИЕРАРХИИ (&Счета)
	|					И Организация = &Организация) КАК ВыпускПродукцииУслугБухгалтерскийУчетОбороты
	|
	|
    |		ОБЪЕДИНИТЬ ВСЕ
	|		
    |		ВЫБРАТЬ
    |			ВложенныйЗапрос.СубконтоДт1,
    |			РеализацияУслугОбороты.НоменклатурнаяГруппа,
    |			ВложенныйЗапрос.СчетДт,
    |			&ПустаяНоменклатура
    |		ИЗ
    |			РегистрНакопления.РеализацияУслуг.Обороты КАК РеализацияУслугОбороты
    |				ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
    |					ХозрасчетныйОборотыДтКт.СубконтоДт1 КАК СубконтоДт1,
    |					ХозрасчетныйОборотыДтКт.СчетДт КАК СчетДт,
    |					ХозрасчетныйОборотыДтКт.СубконтоДт2 КАК СубконтоДт2
    |				ИЗ
    |					РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(&НачДата, &КонДата, , СчетДт В ИЕРАРХИИ (&Счета), , , , Организация = &Организация) КАК ХозрасчетныйОборотыДтКт) КАК ВложенныйЗапрос
    |				ПО РеализацияУслугОбороты.НоменклатурнаяГруппа = ВложенныйЗапрос.СубконтоДт2
    |		
    |		ОБЪЕДИНИТЬ ВСЕ
    |		
    |		ВЫБРАТЬ
    |			ИнвентаризацияНЗП.ПодразделениеОрганизации,
    |			ИнвентаризацияНЗПСостав.НоменклатурнаяГруппа,
    |			ИнвентаризацияНЗП.СчетЗатрат,
    |			&ПустаяНоменклатура
    |		ИЗ
    |			Документ.ИнвентаризацияНЗП.Состав КАК ИнвентаризацияНЗПСостав
    |				ЛЕВОЕ СОЕДИНЕНИЕ Документ.ИнвентаризацияНЗП КАК ИнвентаризацияНЗП
    |				ПО ИнвентаризацияНЗПСостав.Ссылка = ИнвентаризацияНЗП.Ссылка
    |		ГДЕ
    |			ИнвентаризацияНЗП.Дата МЕЖДУ &НачДата И &КонДата
    |			И ИнвентаризацияНЗП.СчетЗатрат В ИЕРАРХИИ (&Счета)
    |			И ИнвентаризацияНЗП.Организация = &Организация
   	|			И ИнвентаризацияНЗП.Проведен) КАК ТаблицаГП
	|		ПО ТаблицаГП.Подразделение = ТаблицаЗатрат.Подразделение
	|			И (ВЫБОР
	|				КОГДА ТаблицаЗатрат.Источник = 1
	|					ТОГДА ВЫБОР
	|								КОГДА ТаблицаГП.СчетЗатрат = ТаблицаЗатрат.СчетЗатрат
	|									ТОГДА ИСТИНА
	|								ИНАЧЕ ЛОЖЬ
	|							КОНЕЦ
	|							И ВЫБОР
	|								КОГДА ТаблицаЗатрат.НоменклатурнаяГруппа ССЫЛКА Справочник.НоменклатурныеГруппы
	|									ТОГДА ВЫБОР
	|											КОГДА ТаблицаЗатрат.НоменклатурнаяГруппа = ТаблицаГП.НоменклатурнаяГруппа
	|												ТОГДА ИСТИНА
	|											ИНАЧЕ ЛОЖЬ
	|										КОНЕЦ
	|								ИНАЧЕ ИСТИНА
	|							КОНЕЦ
	|				ИНАЧЕ ИСТИНА
	|			КОНЕЦ = ИСТИНА)";
	
	Запрос.УстановитьПараметр("НачДата",     мНачМесяца);
	Запрос.УстановитьПараметр("КонДата",     мКонМесяца);
	Запрос.УстановитьПараметр("КонГраница",  мКонГраница);
	
	Запрос.УстановитьПараметр("Организация", СтруктураШапкиДокумента.Организация);
	СчетаЗатрат = Новый Массив;
	ПС = ПланыСчетов.Хозрасчетный;
	СчетаЗатрат.Добавить(ПС.ОсновноеПроизводство);
	СчетаЗатрат.Добавить(ПС.ВспомогательныеПроизводства);
	Запрос.УстановитьПараметр("Счета",       СчетаЗатрат);
	
	СчетаОбщихРасх = Новый Массив;
	СчетаОбщихРасх.Добавить(ПС.ОбщепроизводственныеРасходы);
	Запрос.УстановитьПараметр("СчетаОбщихЗатрат", СчетаОбщихРасх);
	
	Запрос.УстановитьПараметр("ПустаяСтатьяЗатрат", Справочники.СтатьиЗатрат.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустаяНоменклатура", Справочники.Номенклатура.ПустаяСсылка());
	
	Результат = Запрос.Выполнить();
	
	ПостроительЗапроса = Новый ПостроительЗапроса;
	ПостроительЗапроса.ИсточникДанных = Новый ОписаниеИсточникаДанных(Результат);
	
	ЭлементОтбора = ПостроительЗапроса.Отбор.Добавить("ГП");
	ЭлементОтбора.ВидСравнения = ВидСравнения.НеРавно;
	ЭлементОтбора.Использование = Истина;
	ЭлементОтбора.Значение = "NULL";
	ПостроительЗапроса.Выполнить();
	ТаблицаПроизводства = ПостроительЗапроса.Результат.Выгрузить();
	
	ТаблицаПроизводства.Колонки.Удалить("Источник");

	ПостроительЗапроса.Отбор.Сбросить();
	ЭлементОтбора = ПостроительЗапроса.Отбор.Добавить("ГП");
	ЭлементОтбора.Установить("NULL");
	ПостроительЗапроса.Выполнить();
	Выборка = ПостроительЗапроса.Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Если Выборка.Источник = 1 Тогда // прямые затраты			
			Если ТаблицаНеЗакрытыхПодразделений.НайтиСтроки(Новый Структура("Подразделение, СчетЗатрат", Выборка.Подразделение, Выборка.СчетЗатрат)).Количество() <> 0 Тогда
				Продолжить;
			КонецЕсли;			
			
			Если СчетаЗатрат.Найти(Выборка.СчетЗатрат) = Неопределено Тогда
				Продолжить;
			КонецЕсли;	
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Нет базы распределения на себестоимость продукции (услуг) прямых расходов, учитываемых следующим образом:
|Счет учета: %1.
|Подразделение: %2.
|Номенклатурная группа: %3.
|База распределения: плановая себестоимость продукции.';uk='Немає бази розподілу на собівартість продукції (послуг) прямих витрат, що враховуються в такий спосіб:
|Рахунок: %1.
|Підрозділ: %2.
|Номенклатурна група: %3.
|База розподілу: планова собівартість продукції.'"), Выборка.СчетЗатрат, Выборка.Подразделение, Выборка.НоменклатурнаяГруппа);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			
			Строка = ТаблицаНеЗакрытыхПодразделений.Добавить();
			Строка.Подразделение = Выборка.Подразделение;
			Строка.СчетЗатрат = Выборка.СчетЗатрат;

		
		ИначеЕсли Выборка.Источник = 2 Тогда // общие затраты		
			Если ТаблицаНеЗакрытыхПодразделений.Найти(Выборка.Подразделение, "Подразделение") <> Неопределено Тогда
				Продолжить;
			КонецЕсли;			
			Если Выборка.КонечныйОстатокОПЗ = 0 Тогда
				// Если конечный остаток для ОПЗ = 0, распределять это ОПЗ не будем, сообщение для него не выводим
				Продолжить;
			КонецЕсли; 
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Общепроизводственные затраты, учитываемые следующим образом:
|Счет учета: %1.
|Подразделение: %2.
|База распределения: плановая себестоимость продукции';uk='Загальновиробничі витрати, що враховуються в такий спосіб:
|Рахунок: %1.
|Підрозділ: %2.
|База розподілу: планова собівартість продукції'"), Выборка.СчетЗатрат, Выборка.Подразделение);	
			
			Если РазрешитьУчетУслугБезПлановыхЦен Тогда
				ТекстСообщения = ТекстСообщения + НСтр("ru=' или выручка';uk=' або виручка'");
			КонецЕсли;
			
			ТекстСообщения = ТекстСообщения 
							+ Символы.ПС
							+ НСтр("ru='Не могут быть распределены - отсутствует выпуск продукции по подразделению или прямые затраты по подразделению';uk='Не можуть бути розподілені - відсутній випуск продукції по підрозділу або прямі витрати по підрозділу'");
							
			Если РазрешитьУчетУслугБезПлановыхЦен Тогда
				ТекстСообщения = ТекстСообщения + НСтр("ru=' или выручка по услугам по подразделению';uk=' або виручка по послугам по підрозділу'");
			КонецЕсли;
			
			ТекстСообщения = ТекстСообщения 
							+ Символы.ПС
							+ НСтр("ru='ОПЗ будут полностью списаны на себестоимость реализованной продукции (901 счет)';uk='ЗВВ будуть повністю списані на собівартість реалізованої продукції (901 рахунок)'");
			

			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			
			Строка = ТаблицаНеЗакрытыхПодразделений.Добавить();
			Строка.Подразделение = Выборка.Подразделение;
			Строка.СчетЗатрат = Выборка.СчетЗатрат;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТаблицаПроизводства;
	
КонецФункции

Функция ПолучитьПорядокПодразделений(СтруктураШапкиДокумента, СтруктураДопПараметров)
	
	// Определяется диапазон переделов после чего начинается перебор
	// всех переделов из найденного диапазона.	
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ПорядокЗакрытияПодразделенийОрганизацийСрезПоследних.НомерПередела КАК НомерПередела,
	|	ПорядокЗакрытияПодразделенийОрганизацийСрезПоследних.Подразделение КАК Подразделение
	|ИЗ
	|	РегистрСведений.ПорядокЗакрытияПодразделенийОрганизаций.СрезПоследних(&КонДата, Организация = &Организация) КАК ПорядокЗакрытияПодразделенийОрганизацийСрезПоследних
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерПередела";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("КонДата",     мКонМесяца);
	Запрос.УстановитьПараметр("Организация", СтруктураШапкиДокумента.Организация);
	
	Результат = Запрос.Выполнить().Выгрузить();
	Результат.Колонки.Добавить("НоменклатурнаяГруппа");
	Результат.ЗаполнитьЗначения("Все", "НоменклатурнаяГруппа");

	Возврат Результат;
	
Конецфункции
	
Функция ПолучитьТаблицуВстречногоВыпуска(СтруктураШапкиДокумента)
		
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ВстречныйВыпускПродукцииУслугСрезПоследних.Продукция,
	|	ВстречныйВыпускПродукцииУслугСрезПоследних.Подразделение,
	|	ВстречныйВыпускПродукцииУслугСрезПоследних.НоменклатурнаяГруппа,
	|	ВстречныйВыпускПродукцииУслугСрезПоследних.ПодразделениеПересчета КАК ПодразделениеПересчета,
	|	ВстречныйВыпускПродукцииУслугСрезПоследних.НоменклатурнаяГруппаПересчета КАК НоменклатурнаяГруппаПересчета,
	|	ВложенныйЗапрос.СубконтоКт2,
	|	ВложенныйЗапрос.СубконтоКт3
	|ИЗ
	|	РегистрСведений.ВстречныйВыпускПродукцииУслуг.СрезПоследних(&КонДата, Организация = &Организация) КАК ВстречныйВыпускПродукцииУслугСрезПоследних
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ХозрасчетныйОборотыДтКт.СубконтоКт2 КАК СубконтоКт2,
	|			ХозрасчетныйОборотыДтКт.СубконтоКт3 КАК СубконтоКт3,
	|			ХозрасчетныйОборотыДтКт.СуммаОборот КАК СуммаОборот,
	|			ХозрасчетныйОборотыДтКт.СубконтоДт1 КАК СубконтоДт1,
	|			ХозрасчетныйОборотыДтКт.СубконтоДт2 КАК СубконтоДт2,
	|			ХозрасчетныйОборотыДтКт.СубконтоДт3 КАК СубконтоДт3,
	|			ХозрасчетныйОборотыДтКт.СубконтоКт1 КАК СубконтоКт1
	|		ИЗ
	|			РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(&НачДата, &КонДата, , (НЕ СчетДт В ИЕРАРХИИ (&СчетаОбщихЗатрат)), , , , &Организация = Организация) КАК ХозрасчетныйОборотыДтКт) КАК ВложенныйЗапрос
	|		ПО ВстречныйВыпускПродукцииУслугСрезПоследних.Продукция = ВложенныйЗапрос.СубконтоКт1
	|			И ВстречныйВыпускПродукцииУслугСрезПоследних.ПодразделениеПересчета = ВложенныйЗапрос.СубконтоДт1
	|			И ВстречныйВыпускПродукцииУслугСрезПоследних.НоменклатурнаяГруппаПересчета = ВложенныйЗапрос.СубконтоДт2
	|ГДЕ
	|	ВстречныйВыпускПродукцииУслугСрезПоследних.Учитывается
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВстречныйВыпускПродукцииУслугСрезПоследних.Продукция,
	|	ВстречныйВыпускПродукцииУслугСрезПоследних.Подразделение,
	|	ВстречныйВыпускПродукцииУслугСрезПоследних.НоменклатурнаяГруппа,
	|	ВстречныйВыпускПродукцииУслугСрезПоследних.ПодразделениеПересчета,
	|	ВстречныйВыпускПродукцииУслугСрезПоследних.НоменклатурнаяГруппаПересчета,
	|	ВложенныйЗапрос.СубконтоКт2,
	|	ВложенныйЗапрос.СубконтоКт3
	|ИЗ
	|	РегистрСведений.ВстречныйВыпускПродукцииУслуг.СрезПоследних(&КонДата, Организация = &Организация) КАК ВстречныйВыпускПродукцииУслугСрезПоследних
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ХозрасчетныйОборотыДтКт.СубконтоКт2 КАК СубконтоКт2,
	|			ХозрасчетныйОборотыДтКт.СубконтоКт3 КАК СубконтоКт3,
	|			ХозрасчетныйОборотыДтКт.СуммаОборот КАК СуммаОборот,
	|			ХозрасчетныйОборотыДтКт.СубконтоДт1 КАК СубконтоДт1,
	|			ХозрасчетныйОборотыДтКт.СубконтоДт2 КАК СубконтоДт2,
	|			ХозрасчетныйОборотыДтКт.СубконтоДт3 КАК СубконтоДт3,
	|			ХозрасчетныйОборотыДтКт.СубконтоКт1 КАК СубконтоКт1
	|		ИЗ
	|			РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(&НачДата, &КонДата, , СчетДт В ИЕРАРХИИ (&СчетаОбщихЗатрат), , , , &Организация = Организация) КАК ХозрасчетныйОборотыДтКт) КАК ВложенныйЗапрос
	|		ПО ВстречныйВыпускПродукцииУслугСрезПоследних.Продукция = ВложенныйЗапрос.СубконтоКт1
	|			И ВстречныйВыпускПродукцииУслугСрезПоследних.ПодразделениеПересчета = ВложенныйЗапрос.СубконтоДт1
	|ГДЕ
	|	ВстречныйВыпускПродукцииУслугСрезПоследних.Учитывается";
	 
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("КонДата",     мКонМесяца);
	Запрос.УстановитьПараметр("НачДата",     мНачМесяца);
	Запрос.УстановитьПараметр("Организация", СтруктураШапкиДокумента.Организация);
	СчетаОбщихРасх = Новый Массив;
	СчетаОбщихРасх.Добавить(ПланыСчетов.Хозрасчетный.ОбщепроизводственныеРасходы);
	Запрос.УстановитьПараметр("СчетаОбщихЗатрат", СчетаОбщихРасх);
	
	ТаблицаВстречногоВыпуска = Запрос.Выполнить().Выгрузить();
	
	Возврат ТаблицаВстречногоВыпуска;
	
КонецФункции

Функция ПолучитьПорядокПеределов(СтруктураШапкиДокумента, СтруктураДопПараметров)
	
	ТаблицаПроизводства = АнализДанныхПроизводства(СтруктураШапкиДокумента, СтруктураДопПараметров);
	ТаблицаПроизводства.Колонки.Добавить("НомерПередела", ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповЧисла(12, 0));
	
	// Для ускорения выгрузим колонку продукция в ТабСписПрод,
	ТабСписПрод = ТаблицаПроизводства.Скопировать();
	ТабСписПрод.Свернуть("ГП");
	
	ТаблицаПроизводства.Сортировать("ПодразделениеПредставление, НоменклатурнаяГруппаПредставление, НоменклатураЗатратПредставление");
	
	Индекс = 0;
	МаксИндекс = ТаблицаПроизводства.Количество() - 1;
	ТекПередел = 1;
	ПараметрыПоиска = Новый Структура;
 	ПроставленПередел = Истина;
	
	Пока ПроставленПередел Цикл
		
		ПроставленПередел = Ложь;
		
		Пока Индекс <= МаксИндекс Цикл
			ТекСтрока = ТаблицаПроизводства[Индекс];
			
			Если ТабСписПрод.Найти( ТекСтрока.НоменклатураЗатрат, "ГП") = Неопределено Тогда
				ТекСтрока.НомерПередела = ТекПередел;
				ПроставленПередел = Истина;
				Индекс = Индекс + 1;
				Пока Индекс <= МаксИндекс Цикл
					Стр = ТаблицаПроизводства[Индекс];
					Если Стр.НоменклатураЗатрат = ТекСтрока.НоменклатураЗатрат Тогда
						Стр.НомерПередела = ТекПередел;
					Иначе
						Прервать;
					КонецЕсли;
					Индекс = Индекс + 1;
				КонецЦикла;
								
			Иначе
				ПараметрыПоиска.Очистить();
				ПараметрыПоиска.Вставить( "ГП", ТекСтрока.НоменклатураЗатрат);
				НаборСтрок = ТаблицаПроизводства.НайтиСтроки(ПараметрыПоиска);
				Если НаборСтрок.Количество() = 0 Тогда
					ТекСтрока.НомерПередела = ТекПередел;
					ПроставленПередел = Истина;
				Иначе
					СледПередел = Ложь;
					Для Каждого СтрокаПрод Из НаборСтрок Цикл
						Если СтрокаПрод.НомерПередела = 0 ИЛИ СтрокаПрод.НомерПередела = ТекПередел Тогда
							СледПередел = Истина;
							Прервать;
						КонецЕсли;
					КонецЦикла;
					Если Не СледПередел Тогда
						ТекСтрока.НомерПередела = ТекПередел;
						ПроставленПередел = Истина;
					КонецЕсли;
				КонецЕсли;
				Индекс = Индекс + 1;
			КонецЕсли;
		КонецЦикла;
		
		ТаблицаПроизводства.Сортировать("НомерПередела Убыв, ПодразделениеПредставление, НоменклатурнаяГруппаПредставление, НоменклатураЗатратПредставление");
		ТекСтрока = ТаблицаПроизводства.Найти(0, "НомерПередела");
		
		Если ТекСтрока = Неопределено Тогда
			Прервать;
		Иначе
			Индекс = ТаблицаПроизводства.Индекс(ТекСтрока);
			
		КонецЕсли;
		
		ТекПередел = ТекПередел + 1;
		
	КонецЦикла;
	
	ТаблицаПроизводства.Сортировать("НомерПередела Убыв, ПодразделениеПредставление, НоменклатурнаяГруппаПредставление, НоменклатураЗатратПредставление");

	// Продукция выпущенная на переделе.
	ТабТемп = ТаблицаПроизводства.Скопировать();
	
	// Рассчитаем максимальный уровень передела для продукции
	ТабТемп.Свернуть("Подразделение, НоменклатурнаяГруппа, ГП, НомерПередела");
	ТабПродукция = ТабТемп.Скопировать();
	ТабПродукция.Свернуть("Подразделение, НоменклатурнаяГруппа, ГП");
	ТабПродукция.Колонки.Добавить("НомерПередела", ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповЧисла(12, 0));
	СтруктПоиска = Новый Структура;
	Для Каждого СтрокаТаб Из ТабПродукция Цикл
		СтруктПоиска.Вставить("Подразделение", СтрокаТаб.Подразделение);
		СтруктПоиска.Вставить("НоменклатурнаяГруппа", СтрокаТаб.НоменклатурнаяГруппа);
		НаборСтрок = ТабТемп.НайтиСтроки(СтруктПоиска);
		МаксНомерПередела = 0;
		Для Каждого Строка Из НаборСтрок Цикл
			МаксНомерПередела = Макс(МаксНомерПередела, Строка.НомерПередела);
		КонецЦикла;
		СтрокаТаб.НомерПередела = МаксНомерПередела;
	КонецЦикла;
	ТабТемп = 0;
	
	ТабПродукция.Свернуть("Подразделение, НоменклатурнаяГруппа, НомерПередела");
	ТабПродукция.Сортировать("НомерПередела Возр");
	
	
	ТаблицаВстречногоВыпуска = ПолучитьТаблицуВстречногоВыпуска(СтруктураШапкиДокумента);
	
	СтруктураДопПараметров.Вставить("ТаблицаВстречногоВыпуска", ТаблицаВстречногоВыпуска);
	
	// Если в порядке переделов всего один передел, то сообщение не выдается
	ПорядокПодразделенийСообщался = ПорядокПодразделенийСообщался ИЛИ (ТабПродукция.Количество() < 2);
	
	Если Не ПорядокПодразделенийСообщался Тогда
		Сообщить(НСтр("ru='Порядок переделов';uk='Порядок переділів'"));
		
		НомерПередела = 1;
		Для Каждого Передел Из ТабПродукция Цикл
			Сообщить("" + НомерПередела + " - " + Передел.Подразделение + " - " + Передел.НоменклатурнаяГруппа);
			НомерПередела = НомерПередела + 1;
		КонецЦикла;	
	КонецЕсли;
	
	ПорядокПодразделенийСообщался = Истина;
	
	Возврат ТабПродукция;
		
КонецФункции

Функция РасчетТекущегоПредела(ТаблицаПроизводства, ТаблицаГПТекущегоПередела, ТекущийНомерПередела)
	
	
	ТаблицаГПСледующегоПередела = Новый ТаблицаЗначений ;
	ТаблицаГПСледующегоПередела.Колонки.Добавить("ГП");
	
	ФлагВыхода = 1;
	Для Каждого СтрокаГП ИЗ ТаблицаГПТекущегоПередела Цикл
		Для Каждого Строка Из ТаблицаПроизводства Цикл
			
			//Если Строка.НомерПередела <> 0 Тогда
			//	Продолжить;
			//КонецЕсли;
			
			Если Строка.НоменклатураЗатрат = СтрокаГП.ГП Тогда
				Строка.НомерПередела = ТекущийНомерПередела;
				ФлагВыхода = 0;
				СтрокаГПНовая = ТаблицаГПСледующегоПередела.Добавить();
				СтрокаГПНовая.ГП = Строка.ГП;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	ТаблицаГПСледующегоПередела.Свернуть("ГП");

	Если ФлагВыхода = 0 ТОгда
		РасчетТекущегоПредела(ТаблицаПроизводства, ТаблицаГПСледующегоПередела, ТекущийНомерПередела + 1);
	Иначе
		Возврат ТаблицаПроизводства;
	КонецЕсли;

КонецФункции


// Процедура производит расчет себестоимости по прямым затратам по переделам.
//
Процедура РасчетПрямыхЗатрат(СтруктураШапкиДокумента, ВыполненоРаспределениеОПР = Ложь, СтруктураДопПараметров)
	
	Для Каждого Передел Из ПорядокПеределов Цикл
		// Распределение прямых расходов по тем подразделениям, которым присвоен
		// текущий номер передела.
		МассивНоменклатуры = Новый Массив; // массив номенклатуры, у которой, в результате расчета себестоимости, изменилась среденевзвешенная стомиость.
		ДвиженияПоПрямымЗатратам(СтруктураШапкиДокумента, Передел.Подразделение, Передел.НоменклатурнаяГруппа, ВыполненоРаспределениеОПР, МассивНоменклатуры, СтруктураДопПараметров);
		
		Если МассивНоменклатуры.Количество() > 0 Тогда
			КорректировкаСтоимостиСписанияВыпущеннойПродукции(СтруктураШапкиДокумента, МассивНоменклатуры, ВыполненоРаспределениеОПР, СтруктураДопПараметров);
		КонецЕсли; 
		
	КонецЦикла;
	
КонецПроцедуры // РасчетПрямыхЗатрат()

// Проверка все ли подразделения, учавствующие в обороте, указаны в порядке закрытия подразделений
Процедура ПроверкаПорядкаЗакрытияПодразделений(СтруктураШапкиДокумента)
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	СУММА(ПорядокЗакрытияПодразделенийОрганизацийСрезПоследних.НомерПередела) КАК КонечныйПередел,
	|	ПорядокЗакрытияПодразделенийОрганизацийСрезПоследних.Подразделение КАК Подразделение,
	|	NULL КАК СуммаОборот
	|ИЗ
	|	РегистрСведений.ПорядокЗакрытияПодразделенийОрганизаций.СрезПоследних(&КонДата, Организация = &Организация) КАК ПорядокЗакрытияПодразделенийОрганизацийСрезПоследних
	|
	|СГРУППИРОВАТЬ ПО
	|	ПорядокЗакрытияПодразделенийОрганизацийСрезПоследних.Подразделение
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	NULL,
	|	ХозрасчетныйОбороты.СубконтоДт1,
	|	СУММА(ХозрасчетныйОбороты.СуммаОборот)
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(&НачДата, &КонДата, , СчетДт В ИЕРАРХИИ (&СчетаЗатрат), , , , Организация = &Организация) КАК ХозрасчетныйОбороты
	|
	|ГДЕ
	|	(ХозрасчетныйОбороты.СубконтоДт1 ССЫЛКА Справочник.ПодразделенияОрганизаций)
	|
	|СГРУППИРОВАТЬ ПО
	|	ХозрасчетныйОбороты.СубконтоДт1
	|
	|ИТОГИ СУММА(КонечныйПередел), СУММА(СуммаОборот) ПО
	|	Подразделение";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("НачДата",     мНачМесяца);
	Запрос.УстановитьПараметр("КонДата",     мКонМесяца);
	Запрос.УстановитьПараметр("Организация", СтруктураШапкиДокумента.Организация);
	
	СчетаЗатрат = Новый Массив;
	СчетаЗатрат.Добавить(ПланыСчетов.Хозрасчетный.Производство);
	СчетаЗатрат.Добавить(ПланыСчетов.Хозрасчетный.ОбщепроизводственныеРасходы);
	СчетаЗатрат.Добавить(ПланыСчетов.Хозрасчетный.БракВПроизводстве);
	Запрос.УстановитьПараметр("СчетаЗатрат", СчетаЗатрат);
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	РезультатЗапроса.Свернуть("Подразделение","КонечныйПередел, СуммаОборот");
	Для Каждого Результат Из РезультатЗапроса Цикл
		Если Результат.КонечныйПередел = 0 И Результат.СуммаОборот <> 0  И Не ПорядокПодразделенийСообщался Тогда
			Сообщить(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Не установлен порядок подразделения %1
|для закрытия счетов, используемый
|при расчете стоимости продукции.
|Порядок устанавливается документом ""Установка порядка
|подразделений для закрытия счетов""';uk='Не встановлений порядок підрозділу %1
|для закриття рахунків,  що використовується
|при розрахунку вартості продукції.
|Порядок встановлюється документом ""Встановлення порядку
|підрозділів для закриття рахунків""'"), Результат.Подразделение), СтатусСообщения.ОченьВажное);	
			ПорядокПодразделенийСообщался = Истина;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

// Процедура запускает расчет прямых и косвенных расходов
// если используется простой расчет себестоимости и не используется встречный выпуск
// (производственная цепочка не имеет "закольцованных звеньев"),
// тогда расчет прямых затрат запускается один раз
// в противном случае
// первый расчет прямых затрат производится без учета переделов, задействованных в "кольце"
// второй расчет прямых затрат производится только по пределем, задействованным в "кольце"
// третий расет прямых затрат проводится для всех передлов, но корректирует выпуск только той,
// готовой продукции, которая не была списана на "кольцо"
//
Процедура РасчетПрямыхИКосвенныхРасходов(СтруктураШапкиДокумента,СтруктураДопПараметров, СпособОценкиМПЗ)
	
	Если СтруктураДопПараметров.СпособРасчетаСебестоимостиПроизводства = "ПоПеределам"
		И СтруктураДопПараметров.ТаблицаВстречногоВыпуска.Количество() > 0 Тогда
		СтруктураДопПараметров.РасчетПрямыхЗатратНомер = "1";
		РасчетПрямыхЗатрат(СтруктураШапкиДокумента, , СтруктураДопПараметров);
		СтруктураДопПараметров.РасчетПрямыхЗатратНомер = "2";
		РасчетПрямыхЗатрат(СтруктураШапкиДокумента, , СтруктураДопПараметров);
		// Списание общепроизводственных и общехозяйственных расходов
		// на себестоимость продукции (услуг).
		ТекстСпособОценкиМПЗ = ?(СпособОценкиМПЗ = Перечисления.СпособыОценки.ПоСредней,"ПоСредней","ПоПартиям");
		СтруктураДопПараметров.РасчетПрямыхЗатратНомер = "3" + ТекстСпособОценкиМПЗ;
		РаспределениеКосвенныхРасходов(СтруктураШапкиДокумента, СтруктураДопПараметров);
		
	Иначе
		СтруктураДопПараметров.РасчетПрямыхЗатратНомер = "";
		РасчетПрямыхЗатрат(СтруктураШапкиДокумента, , СтруктураДопПараметров);
		РаспределениеКосвенныхРасходов(СтруктураШапкиДокумента, СтруктураДопПараметров);
	КонецЕсли;
	
КонецПроцедуры


Процедура РасчетСебестоимостиПродукции(СтруктураШапкиДокумента, СтруктураДопПараметров, Отказ, Заголовок)
	
		
	Если СтруктураШапкиДокумента.РасчетСтоимостиПродукции Тогда
			
		СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете = Истина;
		мОперация = мПроводкиБУ;
		СтруктураДопПараметров.Вставить("Учет", "БУ");
		
		Если ОбщегоНазначенияБПВызовСервераПовтИсп.ИспользоватьУправляемыеБлокировки() Тогда
			
			МассивСчетов = Новый Массив;

			МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.ОсновноеПроизводство);
			МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.ВспомогательныеПроизводства);
			МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.ОбщепроизводственныеРасходы);
			
			//Определяем все счета, записи с которыми требуется заблокировать
			ЗапросБлокируемыеСчета = Новый Запрос;
			ЗапросБлокируемыеСчета.Текст ="
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	Счета.Ссылка КАК Счет
			|ИЗ
			|	ПланСчетов.Хозрасчетный	КАК Счета
			|ГДЕ
			|	Счета.Ссылка В ИЕРАРХИИ (&МассивСчетов)";
			ЗапросБлокируемыеСчета.УстановитьПараметр("МассивСчетов", МассивСчетов);
			
			ИсточникДанныхБлокируемыхСчетов = ЗапросБлокируемыеСчета.Выполнить();
			
			// Блокировка регистра бухгалтерии.
			СтруктураПараметровБлокировки = Новый Структура("ТипТаблицы, ИмяТаблицы, ИсточникДанных", 
															"РегистрБухгалтерии", "Хозрасчетный", ИсточникДанныхБлокируемыхСчетов);
															
			СтруктураЗначенийБлокировки = Новый Структура("Период, Организация", 
														  Новый Диапазон(, мКонМесяца), СтруктураШапкиДокумента.Организация);
														  
			СтруктураИсточникаДанных = Новый Структура("Счет", "Счет");
			
			ОбщегоНазначенияБПВызовСервера.УстановитьУправляемуюБлокировку(СтруктураПараметровБлокировки, СтруктураЗначенийБлокировки, СтруктураИсточникаДанных);
			
			
		КонецЕсли;		
		
		РасчетПорядкаПеределов(СтруктураШапкиДокумента, СтруктураДопПараметров);
		
		РасчетПрямыхИКосвенныхРасходов(СтруктураШапкиДокумента,СтруктураДопПараметров, УчетнаяПолитика.СпособОценкиМПЗ(СтруктураШапкиДокумента.Организация, СтруктураШапкиДокумента.Дата));
		
		ПроведениеСервер.ЗаписатьНаборЗаписейБезЗамещенияТекущихДвижений(мПроводкиБУ);
		
		СтруктураДопПараметров.ЗаписьРасчетаСебестоимости.Свернуть("Организация,ПериодРасчета,Активность,Регистратор,СчетУчета,Подразделение,НоменклатурнаяГруппа,Продукция,ВидОперации,СуммаПлан,СуммаНЗП,СуммаНЗПНУ,ДокументВыпуска",  
		"Сумма,СуммаНУ");
		
		ЗаписьВВспомогательныеРегистрыСведений(СтруктураШапкиДокумента, 
		СтруктураДопПараметров.ЗаписьРасчетаСебестоимости,
		Движения.РасчетСебестоимостиПродукцици,
		"Организация,ПериодРасчета,Активность,Регистратор,СчетУчета,Подразделение,НоменклатурнаяГруппа,Продукция,ВидОперации",
		"Сумма,СуммаНУ,СуммаНЗП,СуммаНЗПНУ,СуммаПлан");
		ЗаписьВВспомогательныеРегистрыСведений(СтруктураШапкиДокумента,
		СтруктураДопПараметров.ЗаписьРасчетаКосвенныхРасходов,
		Движения.РасчетРаспределенияКосвенныхРасходов,
        "Организация,ПериодРасчета,Активность,Регистратор,СчетУчета,НалоговоеНазначениеУчета,Подразделение,СтатьяЗатрат,ПодразделениеРаспределения,НоменклатурнаяГруппаРаспределения,БазаРаспределения,СчетРаспределения,ВидОперации,НалоговоеНазначение",
		"Сумма,СуммаНУ,СуммаБазы,СуммаБазыНУ");
		
	КонецЕсли;
	
КонецПроцедуры

//ТОРГОВЛЯ

Процедура РасчетТорговойНаценкиПоПроданнымТоварам(СтруктураШапкиДокумента, Отказ, Заголовок)
	
	Если НЕ СтруктураШапкиДокумента.РасчетТорговойНаценкиПоПроданнымТоварам Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ (УчетнаяПолитика.СпособОценкиТоваровВРознице(СтруктураШапкиДокумента.Организация, СтруктураШапкиДокумента.Дата) = Перечисления.СпособыОценкиТоваровВРознице.ПоПродажнойСтоимости) Тогда
		Возврат;
	КонецЕсли;
	
	БУ = ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахНТТ.ПолучитьОбъект();
	РазделятьПоСтавкамНДС  = ?(БУ.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтавкиНДС, "ВидСубконто") = Неопределено, Ложь, Истина);
	
	//НТТ
	ВидыСубконто = Новый Массив;
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады);
	Если РазделятьПоСтавкамНДС Тогда
		ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтавкиНДС);
	КонецЕсли;
	
	Счет90 = ПланыСчетов.Хозрасчетный.СебестоимостьРеализации;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаНач", 			мНачГраница);
	Запрос.УстановитьПараметр("ДатаКон", 			мКонГраница);
	Запрос.УстановитьПараметр("Организация", 		Организация);
	Запрос.УстановитьПараметр("СчетТН", 			ПланыСчетов.Хозрасчетный.ТорговаяНаценкаНТТ);
	Запрос.УстановитьПараметр("СчетПС", 			ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахНТТ);
	Запрос.УстановитьПараметр("ВидыСубконто", 	ВидыСубконто);
	Запрос.Текст = 
	"ВЫБРАТЬ 
	| 	ЗапросПоНаценке.НалоговоеНазначение,
	| 	ЗапросПоНаценке.Склады,"+?(РазделятьПоСтавкамНДС,"
	|	ЗапросПоНаценке.СтавкиНДС,","")+"
	|	ОборотыДтКт.СчетДт 		КАК СчетДт,
	|	ОборотыДтКт.НалоговоеНазначениеДт	КАК НалоговоеНазначениеДт,
	|	ОборотыДтКт.СубконтоДт1 КАК СубконтоДт1,
	|	ОборотыДтКт.СубконтоДт2	КАК СубконтоДт2,
	|	ОборотыДтКт.СубконтоДт3	КАК СубконтоДт3,
	|	МАКСИМУМ( ЗапросПоНаценке.ТорговаяНаценкаОстаток ) КАК ТорговаяНаценка,
	|	МАКСИМУМ( ЗапросПоНаценке.ПродажнаяСтоимостьОстаток ) КАК ПродажнаяСтоимость,
	|	СУММА(ЕСТЬNULL(ОборотыДтКт.СуммаОборот,0)) КАК Реализация,
	|	МАКСИМУМ( ЗапросПоНаценке.ТорговаяНаценкаОстатокНУ ) КАК ТорговаяНаценкаНУ,
	|	МАКСИМУМ( ЗапросПоНаценке.ПродажнаяСтоимостьОстатокНУ ) КАК ПродажнаяСтоимостьНУ,
	|	СУММА(ЕСТЬNULL(ОборотыДтКт.СуммаНУОборотКт,0)) КАК РеализацияНУ
	| ИЗ
	|(ВЫБРАТЬ
	|	ХозрасчетныйОстаткиИОборотыТН.НалоговоеНазначение КАК НалоговоеНазначение,
	|	ХозрасчетныйОстаткиИОборотыТН.Субконто1 КАК Склады,"+?(РазделятьПоСтавкамНДС,"
	|	ХозрасчетныйОстаткиИОборотыТН.Субконто2 КАК СтавкиНДС,","")+"
	|	СУММА(ЕСТЬNULL(ХозрасчетныйОстаткиИОборотыТН.СуммаНачальныйОстатокКт,0) + 
	|	ЕСТЬNULL(ХозрасчетныйОстаткиИОборотыТН.СуммаОборотКт,0)) КАК ТорговаяНаценкаОстаток,
	|	СУММА(ЕСТЬNULL(ХозрасчетныйОстаткиИОборотыПС.СуммаНачальныйОстатокДт,0) + 
	|	ЕСТЬNULL(ХозрасчетныйОстаткиИОборотыПС.СуммаОборотДт,0)) КАК ПродажнаяСтоимостьОстаток,
	|	СУММА(ЕСТЬNULL(ХозрасчетныйОстаткиИОборотыТН.СуммаНУНачальныйОстатокКт,0) + 
	|	ЕСТЬNULL(ХозрасчетныйОстаткиИОборотыТН.СуммаНУОборотКт,0)) КАК ТорговаяНаценкаОстатокНУ,
	|	СУММА(ЕСТЬNULL(ХозрасчетныйОстаткиИОборотыПС.СуммаНУНачальныйОстатокДт,0) + 
	|	ЕСТЬNULL(ХозрасчетныйОстаткиИОборотыПС.СуммаНУОборотДт,0)) КАК ПродажнаяСтоимостьОстатокНУ
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ОстаткиИОбороты(&ДатаНач,&ДатаКон, , ,Счет = &СчетТН, &ВидыСубконто, Организация = &Организация) КАК ХозрасчетныйОстаткиИОборотыТН
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.ОстаткиИОбороты(&ДатаНач,&ДатаКон, , ,Счет = &СчетПС, &ВидыСубконто, Организация = &Организация) КАК ХозрасчетныйОстаткиИОборотыПС
	|		ПО ХозрасчетныйОстаткиИОборотыТН.НалоговоеНазначение = ХозрасчетныйОстаткиИОборотыПС.НалоговоеНазначение
	|			И ХозрасчетныйОстаткиИОборотыТН.Субконто1 = ХозрасчетныйОстаткиИОборотыПС.Субконто1"+?(РазделятьПоСтавкамНДС,"
	|			И ХозрасчетныйОстаткиИОборотыТН.Субконто2 = ХозрасчетныйОстаткиИОборотыПС.Субконто2","")+"
	|
	|СГРУППИРОВАТЬ ПО
	|	ХозрасчетныйОстаткиИОборотыТН.НалоговоеНазначение,
	|	ХозрасчетныйОстаткиИОборотыТН.Субконто1"+?(РазделятьПоСтавкамНДС,",
	|	ХозрасчетныйОстаткиИОборотыТН.Субконто2","")+") КАК ЗапросПоНаценке 
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(&ДатаНач,&ДатаКон, , , ,СчетКт = &СчетПС, &ВидыСубконто, Организация = &Организация) КАК ОборотыДтКт
	|		ПО ЗапросПоНаценке.НалоговоеНазначение = ОборотыДтКт.НалоговоеНазначениеКт
	|		 И ЗапросПоНаценке.Склады = ОборотыДтКт.СубконтоКт1"+?(РазделятьПоСтавкамНДС,"
	|		 И ЗапросПоНаценке.СтавкиНДС = ОборотыДтКт.СубконтоКт2","")+"
	
	|СГРУППИРОВАТЬ ПО
	|	ЗапросПоНаценке.НалоговоеНазначение,
	| 	ЗапросПоНаценке.Склады,"+?(РазделятьПоСтавкамНДС,"
	|	ЗапросПоНаценке.СтавкиНДС,","")+"
	|	ОборотыДтКт.НалоговоеНазначениеДт,
	|	ОборотыДтКт.СчетДт,
	|	ОборотыДтКт.СубконтоДт1,
	|	ОборотыДтКт.СубконтоДт2,
	|	ОборотыДтКт.СубконтоДт3
	|
	|ИТОГИ ПО
	|	НалоговоеНазначение,
	|	Склады"+?(РазделятьПоСтавкамНДС,",
	|	СтавкиНДС","")+",
	|	СчетДт";
	
	Если ОбщегоНазначенияБПВызовСервераПовтИсп.ИспользоватьУправляемыеБлокировки() Тогда
		
		СтруктураПараметровБлокировки = Новый Структура("ТипТаблицы, ИмяТаблицы", "РегистрБухгалтерии", "Хозрасчетный");
		
		ЗначенияБлокировки = Новый Соответствие;
		ЗначенияБлокировки.Вставить("Период",      	Новый Диапазон(, Дата)); 
		ЗначенияБлокировки.Вставить("Организация",	Организация);
		ЗначенияБлокировки.Вставить("Счет",			ПланыСчетов.Хозрасчетный.ТорговаяНаценкаНТТ);
		
		ОбщегоНазначенияБПВызовСервера.УстановитьУправляемуюБлокировку(СтруктураПараметровБлокировки, ЗначенияБлокировки);
		
		ЗначенияБлокировки.Вставить("Счет",			ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахНТТ);
		
		ОбщегоНазначенияБПВызовСервера.УстановитьУправляемуюБлокировку(СтруктураПараметровБлокировки, ЗначенияБлокировки);
		
		ЗначенияБлокировки.Вставить("Счет",			ПланыСчетов.Хозрасчетный.ТорговаяНаценкаАТТ);
		
		ОбщегоНазначенияБПВызовСервера.УстановитьУправляемуюБлокировку(СтруктураПараметровБлокировки, ЗначенияБлокировки);
		
		ЗначенияБлокировки.Вставить("Счет",			ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахАТТ);
		
		ОбщегоНазначенияБПВызовСервера.УстановитьУправляемуюБлокировку(СтруктураПараметровБлокировки, ЗначенияБлокировки);
	КонецЕсли;
	
	РезультатЗапросаНаценка = Запрос.Выполнить();
	
	ВыборкаПоНалоговымНазначениям = РезультатЗапросаНаценка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "НалоговоеНазначение");
	
	Пока ВыборкаПоНалоговымНазначениям.Следующий() Цикл
		
		ВыборкаПоСкладам = ВыборкаПоНалоговымНазначениям.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Склады");
		
		Пока ВыборкаПоСкладам.Следующий() Цикл
			Если РазделятьПоСтавкамНДС Тогда
				ВыборкаПоСтавкамНДС = ВыборкаПоСкладам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "СтавкиНДС");
				Пока ВыборкаПоСтавкамНДС.Следующий() Цикл
					
					//Расчет торговой наценки
					ТН = ВыборкаПоСтавкамНДС.ТорговаяНаценка;
					ПС = ВыборкаПоСтавкамНДС.ПродажнаяСтоимость;
					//КоэфНаценки = ТН / ПС;
					ТН_НУ = ВыборкаПоСтавкамНДС.ТорговаяНаценкаНУ;
					ПС_НУ = ВыборкаПоСтавкамНДС.ПродажнаяСтоимостьНУ;
					
					Если ПС = 0 Тогда
						Продолжить;
					КонецЕсли;
					
					// Определим суммы, которые ушли не на счет себестоимости (возвраты и пр.)
					СуммаВозвратов = 0;
					СуммаВозвратовНаценки = 0;
					СуммаРеализации90 = 0;
					
					СуммаВозвратовНУ = 0;
					СуммаВозвратовНаценкиНУ = 0;
					СуммаРеализации90НУ = 0;
					
					ВыборкаПоСчетДт	 = ВыборкаПоСтавкамНДС.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "СчетДт");
					Пока ВыборкаПоСчетДт.Следующий() Цикл
						Если ВыборкаПоСчетДт.СчетДт = Null Тогда
							Продолжить;
						КонецЕсли; 
						Если НЕ ВыборкаПоСчетДт.СчетДт.ПринадлежитЭлементу(Счет90) Тогда
							СуммаВозвратов = СуммаВозвратов + ВыборкаПоСчетДт.Реализация;
							СуммаВозвратовНУ = СуммаВозвратовНУ + ВыборкаПоСчетДт.РеализацияНУ;
							Если ВыборкаПоСчетДт.СчетДт = ПланыСчетов.Хозрасчетный.ТорговаяНаценкаНТТ Тогда
								СуммаВозвратовНаценки = СуммаВозвратовНаценки + ВыборкаПоСчетДт.Реализация;
								СуммаВозвратовНаценкиНУ = СуммаВозвратовНаценкиНУ + ВыборкаПоСчетДт.РеализацияНУ;
							КонецЕсли;
						Иначе
							СуммаРеализации90 = СуммаРеализации90 + ВыборкаПоСчетДт.Реализация;
							СуммаРеализации90НУ = СуммаРеализации90НУ + ВыборкаПоСчетДт.РеализацияНУ;
						КонецЕсли; 
					КонецЦикла;
					
					НаценкаНаВозвраты = Окр(СуммаВозвратов * ТН/ПС,2);
					КорректировкаНаценки = НаценкаНаВозвраты - СуммаВозвратовНаценки;
					
					Если НЕ ПС_НУ = 0 Тогда
						НаценкаНаВозвратыНУ = Окр(СуммаВозвратовНУ * ТН_НУ/ПС_НУ,2);
						КорректировкаНаценкиНУ = НаценкаНаВозвратыНУ - СуммаВозвратовНаценкиНУ;
					КонецЕсли;
					
					НакопленнаяПогрешность = 0;
					НакопленнаяПогрешностьНУ = 0;
					
					//Теперь произведем расчет наценки для продаж
					// и одновременно разбросаем суммы КорректировкаНаценки на счета себестоимости
					ТекущаяСуммаРеализации90 = 0;
					ТекущаяСуммаРеализации90НУ = 0;
					
					ВыборкаПоСчетДт = ВыборкаПоСтавкамНДС.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "СчетДт");
					Пока ВыборкаПоСчетДт.Следующий() Цикл
						Если ВыборкаПоСчетДт.СчетДт = Null Тогда
							Продолжить;
						КонецЕсли;
						
						ВыборкаДетальныеЗаписи = ВыборкаПоСчетДт.Выбрать(ОбходРезультатаЗапроса.Прямой);
						
						Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
							Если ВыборкаДетальныеЗаписи.СчетДт.ПринадлежитЭлементу(Счет90) Тогда
								
								СуммаНаценки = ОбщегоНазначенияРед12.ОкруглитьСУчетомПогрешности(ВыборкаДетальныеЗаписи.Реализация * ТН/ПС,2,НакопленнаяПогрешность);
								ТекущаяСуммаРеализации90 = ТекущаяСуммаРеализации90 + ВыборкаДетальныеЗаписи.Реализация;
								Если ТекущаяСуммаРеализации90 = СуммаРеализации90 Тогда
									// относим всю корректировку
									ОтносимаяКорректировкаНаценки = КорректировкаНаценки;
								Иначе
									// относим пропорционально сумме
									Если СуммаРеализации90 <> 0 Тогда
										ОтносимаяКорректировкаНаценки = Окр(КорректировкаНаценки * ВыборкаДетальныеЗаписи.Реализация/СуммаРеализации90);
									Иначе
										ОтносимаяКорректировкаНаценки = 0;
									КонецЕсли;
								КонецЕсли;
								СуммаНаценки = СуммаНаценки + ОтносимаяКорректировкаНаценки;
								КорректировкаНаценки = КорректировкаНаценки - ОтносимаяКорректировкаНаценки;
								
								Если ПС_НУ = 0 Тогда
									СуммаНаценкиНУ = 0;
								Иначе
									СуммаНаценкиНУ = ОбщегоНазначенияРед12.ОкруглитьСУчетомПогрешности(ВыборкаДетальныеЗаписи.РеализацияНУ * ТН_НУ/ПС_НУ,2,НакопленнаяПогрешностьНУ);
									ТекущаяСуммаРеализации90НУ = ТекущаяСуммаРеализации90НУ + ВыборкаДетальныеЗаписи.РеализацияНУ;
									Если ТекущаяСуммаРеализации90НУ = СуммаРеализации90НУ Тогда
										// относим всю корректировку
										ОтносимаяКорректировкаНаценкиНУ = КорректировкаНаценкиНУ;
									Иначе
										// относим пропорционально сумме
										Если СуммаРеализации90НУ <> 0 Тогда
											ОтносимаяКорректировкаНаценкиНУ = Окр(КорректировкаНаценкиНУ * ВыборкаДетальныеЗаписи.РеализацияНУ/СуммаРеализации90НУ);
										Иначе
											ОтносимаяКорректировкаНаценкиНУ = 0;
										КонецЕсли;
									КонецЕсли; 
									СуммаНаценкиНУ = СуммаНаценкиНУ + ОтносимаяКорректировкаНаценкиНУ;
									КорректировкаНаценкиНУ = КорректировкаНаценкиНУ - ОтносимаяКорректировкаНаценкиНУ;
								КонецЕсли;
								
								Если (СуммаНаценки > 0) ИЛИ (СуммаНаценкиНУ > 0) Тогда
									
									//Формируем проводки по списанию торговой наценки
									Проводка = мПроводкиБУ.Добавить();
									Проводка.Период                    = Дата;
									Проводка.Организация               = СтруктураШапкиДокумента.Организация;
									Проводка.СчетДт                    = ВыборкаПоСчетДт.СчетДт;
									Проводка.СчетКт                    = ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахНТТ;
									
									БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1,  ВыборкаДетальныеЗаписи.СубконтоДт1);
									БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2,  ВыборкаДетальныеЗаписи.СубконтоДт2);
									БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3,  ВыборкаДетальныеЗаписи.СубконтоДт3);
									
									БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "СтавкиНДС",  ВыборкаПоСтавкамНДС.СтавкиНДС);
									БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Склады",  ВыборкаПоСтавкамНДС.Склады);
									
									Проводка.Сумма                     = - СуммаНаценки;
									Проводка.Содержание                = НСтр("ru='Закрытие месяца: Торговая наценка';uk='Закриття місяця: Торговельна націнка'",Локализация.КодЯзыкаИнформационнойБазы());
									Проводка.НомерЖурнала              = НСтр("ru='ТВ';uk='ТВ'",Локализация.КодЯзыкаИнформационнойБазы());
									
									Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.НалоговоеНазначениеДт) Тогда
										Проводка.НалоговоеНазначениеДт = ВыборкаДетальныеЗаписи.НалоговоеНазначениеДт;
										Проводка.СуммаНУДт= - СуммаНаценкиНУ;
									КонецЕсли;
									
									Проводка.НалоговоеНазначениеКт = ВыборкаПоСтавкамНДС.НалоговоеНазначение;
									Проводка.СуммаНУКт= - СуммаНаценкиНУ;
									
									Проводка = мПроводкиБУ.Добавить();
									Проводка.Период                    = Дата;
									Проводка.Организация               = СтруктураШапкиДокумента.Организация;
									Проводка.СчетДт                    = ПланыСчетов.Хозрасчетный.ТорговаяНаценкаНТТ;
									Проводка.СчетКт                    = ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахНТТ;
									
									БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "СтавкиНДС",  ВыборкаПоСтавкамНДС.СтавкиНДС);
									БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Склады",  ВыборкаПоСтавкамНДС.Склады);
									
									БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "СтавкиНДС",  ВыборкаПоСтавкамНДС.СтавкиНДС);
									БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Склады",  ВыборкаПоСтавкамНДС.Склады);
									
									Проводка.Сумма                     = СуммаНаценки;
									Проводка.Содержание                =  НСтр("ru='Закрытие месяца: Торговая наценка';uk='Закриття місяця: Торговельна націнка'",Локализация.КодЯзыкаИнформационнойБазы());
									Проводка.НомерЖурнала              = НСтр("ru='ТВ';uk='ТВ'",Локализация.КодЯзыкаИнформационнойБазы());
									
									Проводка.НалоговоеНазначениеДт = ВыборкаПоСтавкамНДС.НалоговоеНазначение;
									Проводка.НалоговоеНазначениеКт = ВыборкаПоСтавкамНДС.НалоговоеНазначение;
									Проводка.СуммаНУДт= СуммаНаценкиНУ;
									Проводка.СуммаНУКт= СуммаНаценкиНУ;
									
								КонецЕсли;
							КонецЕсли; 
							
						КонецЦикла; // ВыборкаДетальныеЗаписи.Следующий()
					КонецЦикла; // ВыборкаПоСчетДт.Следующий()
				КонецЦикла;  // ВыборкаПоСтавкамНДС.Следующий()
			Иначе
				//Расчет торговой наценки
				ТН = ВыборкаПоСкладам.ТорговаяНаценка;
				ПС = ВыборкаПоСкладам.ПродажнаяСтоимость;
				//КоэфНаценки = ТН / ПС;
				ТН_НУ = ВыборкаПоСкладам.ТорговаяНаценкаНУ;
				ПС_НУ = ВыборкаПоСкладам.ПродажнаяСтоимостьНУ;
				
				Если ПС = 0 Тогда
					Продолжить;
				КонецЕсли;
				
				// Определим суммы, которые ушли не на счет себестоимости (возвраты и пр.)
				СуммаВозвратов = 0;
				СуммаВозвратовНаценки = 0;
				СуммаРеализации90 = 0;
				
				СуммаВозвратовНУ = 0;
				СуммаВозвратовНаценкиНУ = 0;
				СуммаРеализации90НУ = 0;
				
				ВыборкаПоСчетДт = ВыборкаПоСкладам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "СчетДт");
				Пока ВыборкаПоСчетДт.Следующий() Цикл
					Если ВыборкаПоСчетДт.СчетДт = Null Тогда
						Продолжить;
					КонецЕсли; 
					Если НЕ ВыборкаПоСчетДт.СчетДт.ПринадлежитЭлементу(Счет90) Тогда
						СуммаВозвратов = СуммаВозвратов + ВыборкаПоСчетДт.Реализация;
						СуммаВозвратовНУ = СуммаВозвратовНУ + ВыборкаПоСчетДт.РеализацияНУ;
						Если ВыборкаПоСчетДт.СчетДт = ПланыСчетов.Хозрасчетный.ТорговаяНаценкаНТТ Тогда
							СуммаВозвратовНаценки = СуммаВозвратовНаценки + ВыборкаПоСчетДт.Реализация;
							СуммаВозвратовНаценкиНУ = СуммаВозвратовНаценкиНУ + ВыборкаПоСчетДт.РеализацияНУ;
						КонецЕсли;
					Иначе
						СуммаРеализации90 = СуммаРеализации90 + ВыборкаПоСчетДт.Реализация;
						СуммаРеализации90НУ = СуммаРеализации90НУ + ВыборкаПоСчетДт.РеализацияНУ;
					КонецЕсли; 
				КонецЦикла;
				НаценкаНаВозвраты = Окр(СуммаВозвратов * ТН/ПС,2);
				КорректировкаНаценки = НаценкаНаВозвраты - СуммаВозвратовНаценки;
				
				Если НЕ ПС_НУ = 0 Тогда
					НаценкаНаВозвратыНУ = Окр(СуммаВозвратовНУ * ТН_НУ/ПС_НУ,2);
					КорректировкаНаценкиНУ = НаценкаНаВозвратыНУ - СуммаВозвратовНаценкиНУ;
				КонецЕсли;
				
				НакопленнаяПогрешность = 0;
				НакопленнаяПогрешностьНУ = 0;
				
				//Теперь произведем расчет наценки для продаж
				// и одновременно разбросаем суммы КорректировкаНаценки на счета себестоимости
				ТекущаяСуммаРеализации90 = 0;
				ТекущаяСуммаРеализации90НУ = 0;
				
				ВыборкаПоСчетДт = ВыборкаПоСкладам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "СчетДт");
				Пока ВыборкаПоСчетДт.Следующий() Цикл
					Если ВыборкаПоСчетДт.СчетДт = Null Тогда
						Продолжить;
					КонецЕсли; 
					ВыборкаДетальныеЗаписи = ВыборкаПоСчетДт.Выбрать(ОбходРезультатаЗапроса.Прямой);
					
					Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
						Если ВыборкаДетальныеЗаписи.СчетДт.ПринадлежитЭлементу(Счет90) Тогда
							
							СуммаНаценки = ОбщегоНазначенияРед12.ОкруглитьСУчетомПогрешности(ВыборкаДетальныеЗаписи.Реализация * ТН/ПС,2,НакопленнаяПогрешность);
							ТекущаяСуммаРеализации90 = ТекущаяСуммаРеализации90 + ВыборкаДетальныеЗаписи.Реализация;
							Если ТекущаяСуммаРеализации90 = СуммаРеализации90 Тогда
								// относим всю корректировку
								ОтносимаяКорректировкаНаценки = КорректировкаНаценки;
							Иначе
								// относим пропорционально сумме
								Если СуммаРеализации90 <> 0 Тогда
									ОтносимаяКорректировкаНаценки = Окр(КорректировкаНаценки * ВыборкаДетальныеЗаписи.Реализация/СуммаРеализации90);
								Иначе
									ОтносимаяКорректировкаНаценки = 0;
								КонецЕсли;
							КонецЕсли; 
							СуммаНаценки = СуммаНаценки + ОтносимаяКорректировкаНаценки;
							КорректировкаНаценки = КорректировкаНаценки - ОтносимаяКорректировкаНаценки;
							
							Если ПС_НУ = 0 Тогда
								СуммаНаценкиНУ = 0;
							Иначе
								СуммаНаценкиНУ = ОбщегоНазначенияРед12.ОкруглитьСУчетомПогрешности(ВыборкаДетальныеЗаписи.РеализацияНУ * ТН_НУ/ПС_НУ,2,НакопленнаяПогрешностьНУ);
								ТекущаяСуммаРеализации90НУ = ТекущаяСуммаРеализации90НУ + ВыборкаДетальныеЗаписи.РеализацияНУ;
								Если ТекущаяСуммаРеализации90НУ = СуммаРеализации90НУ Тогда
									// относим всю корректировку
									ОтносимаяКорректировкаНаценкиНУ = КорректировкаНаценкиНУ;
								Иначе
									// относим пропорционально сумме
									Если СуммаРеализации90НУ <> 0 Тогда
										ОтносимаяКорректировкаНаценкиНУ = Окр(КорректировкаНаценкиНУ * ВыборкаДетальныеЗаписи.РеализацияНУ/СуммаРеализации90НУ);
									Иначе
										ОтносимаяКорректировкаНаценкиНУ = 0;
									КонецЕсли;
								КонецЕсли; 
								СуммаНаценкиНУ = СуммаНаценкиНУ + ОтносимаяКорректировкаНаценкиНУ;
								КорректировкаНаценкиНУ = КорректировкаНаценкиНУ - ОтносимаяКорректировкаНаценкиНУ;
							КонецЕсли;
							
							Если (СуммаНаценки > 0) ИЛИ (СуммаНаценкиНУ > 0) Тогда
								
								//Формируем проводки по списанию торговой наценки
								Проводка = мПроводкиБУ.Добавить();
								Проводка.Период                    = Дата;
								Проводка.Организация               = СтруктураШапкиДокумента.Организация;
								Проводка.СчетДт                    = ВыборкаПоСчетДт.СчетДт;
								Проводка.СчетКт                    = ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахНТТ;
								
								БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1,  ВыборкаДетальныеЗаписи.СубконтоДт1);
								БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2,  ВыборкаДетальныеЗаписи.СубконтоДт2);
								БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3,  ВыборкаДетальныеЗаписи.СубконтоДт3);
								
								БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Склады",  ВыборкаПоСкладам.Склады);
								
								Проводка.Сумма                     = - СуммаНаценки;
								Проводка.Содержание                = НСтр("ru='Закрытие месяца: Торговая наценка';uk='Закриття місяця: Торговельна націнка'",Локализация.КодЯзыкаИнформационнойБазы());
								Проводка.НомерЖурнала              = НСтр("ru='ТВ';uk='ТВ'",Локализация.КодЯзыкаИнформационнойБазы());
								
								Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.НалоговоеНазначениеДт) Тогда
									Проводка.НалоговоеНазначениеДт = ВыборкаДетальныеЗаписи.НалоговоеНазначениеДт;
									Проводка.СуммаНУДт= - СуммаНаценкиНУ;
								КонецЕсли;
								
								Проводка.НалоговоеНазначениеКт = ВыборкаПоСкладам.НалоговоеНазначение;
								Проводка.СуммаНУКт= - СуммаНаценкиНУ;
								
								Проводка = мПроводкиБУ.Добавить();
								Проводка.Период                    = Дата;
								Проводка.Организация               = СтруктураШапкиДокумента.Организация;
								Проводка.СчетДт                    = ПланыСчетов.Хозрасчетный.ТорговаяНаценкаНТТ;
								Проводка.СчетКт                    = ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахНТТ;
								
								БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Склады",  ВыборкаПоСкладам.Склады);
								
								БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Склады",  ВыборкаПоСкладам.Склады);
								
								Проводка.Сумма                     = СуммаНаценки;
								Проводка.Содержание                =  НСтр("ru='Закрытие месяца: Торговая наценка';uk='Закриття місяця: Торговельна націнка'",Локализация.КодЯзыкаИнформационнойБазы());
								Проводка.НомерЖурнала              = НСтр("ru='ТВ';uk='ТВ'",Локализация.КодЯзыкаИнформационнойБазы());
								
								Проводка.НалоговоеНазначениеДт = ВыборкаПоСкладам.НалоговоеНазначение;
								Проводка.НалоговоеНазначениеКт = ВыборкаПоСкладам.НалоговоеНазначение;
								Проводка.СуммаНУДт = СуммаНаценкиНУ;
								Проводка.СуммаНУКт = СуммаНаценкиНУ;
								
							КонецЕсли;
						КонецЕсли; 
					КонецЦикла;  //ВыборкаДетальныеЗаписи.Следующий()
				КонецЦикла; // ВыборкаПоСчетДт.Следующий()
			КонецЕсли;
		КонецЦикла; // ВыборкаПоСкладам.Следующий()
	КонецЦикла; // ВыборкаПоНалоговымНазначениям.Следующий()
	
	//АТТ
	РазделятьПоПартиям = БухгалтерскийУчетВызовСервераПовтИсп.НаСчетеВедетсяПартионныйУчет(ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахАТТ);
	
	ВидыСубконто = Новый Массив;
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады);
	Если РазделятьПоПартиям Тогда
		ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Партии);
	КонецЕсли;
	
	Счет90 = ПланыСчетов.Хозрасчетный.СебестоимостьРеализации;
		
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаНач", 			мНачГраница); 
	Запрос.УстановитьПараметр("ДатаКон", 			мКонГраница);
	Запрос.УстановитьПараметр("Организация", 		Организация);
	Запрос.УстановитьПараметр("СчетТН", 			ПланыСчетов.Хозрасчетный.ТорговаяНаценкаАТТ);
	Запрос.УстановитьПараметр("СчетПС", 			ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахАТТ);
	Запрос.УстановитьПараметр("ВидыСубконто", 		ВидыСубконто);
	Запрос.УстановитьПараметр("ПустаяПартия",    	Документы.Партия.ПустаяСсылка());
	Запрос.Текст = 
	"ВЫБРАТЬ 
	| 	ЗапросПоНаценке.НалоговоеНазначение КАК НалоговоеНазначение,
	| 	ЗапросПоНаценке.Номенклатура КАК Номенклатура,
	|	ЗапросПоНаценке.Склады КАК Склады,
	|	ЗапросПоНаценке.Партия КАК Партия,
	|	ОборотыДтКт.СчетДт 		КАК СчетДт,
	|	ОборотыДтКт.НалоговоеНазначениеДт	КАК НалоговоеНазначениеДт,
	|	ОборотыДтКт.СубконтоДт1 КАК СубконтоДт1,
	|	ОборотыДтКт.СубконтоДт2	КАК СубконтоДт2,
	|	ОборотыДтКт.СубконтоДт3	КАК СубконтоДт3,
	|	МАКСИМУМ( ЗапросПоНаценке.ТорговаяНаценкаОстаток ) КАК ТорговаяНаценка,
	|	МАКСИМУМ( ЗапросПоНаценке.ПродажнаяСтоимостьОстаток ) КАК ПродажнаяСтоимость,
	|	СУММА(ЕСТЬNULL(ОборотыДтКт.СуммаОборот,0)) КАК Реализация,
	|	СУММА(ЕСТЬNULL(ОборотыПеремещениеМеждуАТТ.СуммаОборот,0)) КАК ОборотыПеремещениеМеждуАТТ,
	|	МАКСИМУМ( ЗапросПоНаценке.ТорговаяНаценкаОстатокНУ ) КАК ТорговаяНаценкаНУ,
	|	МАКСИМУМ( ЗапросПоНаценке.ПродажнаяСтоимостьОстатокНУ ) КАК ПродажнаяСтоимостьНУ,
	|	СУММА(ЕСТЬNULL(ОборотыДтКт.СуммаНУОборотКт,0)) КАК РеализацияНУ,
	|	СУММА(ЕСТЬNULL(ОборотыПеремещениеМеждуАТТ.СуммаНУОборотКт,0)) КАК ОборотыПеремещениеМеждуАТТНУ
	| ИЗ
	|(ВЫБРАТЬ
	|	ХозрасчетныйОстаткиИОборотыТН.НалоговоеНазначение КАК НалоговоеНазначение,
	| 	ХозрасчетныйОстаткиИОборотыТН.Субконто1 КАК Номенклатура,
	|	ХозрасчетныйОстаткиИОборотыТН.Субконто2 КАК Склады,"+?(РазделятьПоПартиям,"
	|	ХозрасчетныйОстаткиИОборотыТН.Субконто3 КАК Партия,", "
	|	&ПустаяПартия КАК Партия,")+"
	|	СУММА(ЕСТЬNULL(ХозрасчетныйОстаткиИОборотыТН.СуммаНачальныйОстатокКт,0) + 
	|	ЕСТЬNULL(ХозрасчетныйОстаткиИОборотыТН.СуммаОборотКт,0)) КАК ТорговаяНаценкаОстаток,
	|	СУММА(ЕСТЬNULL(ХозрасчетныйОстаткиИОборотыПС.СуммаНачальныйОстатокДт,0) + 
	|	ЕСТЬNULL(ХозрасчетныйОстаткиИОборотыПС.СуммаОборотДт,0)) КАК ПродажнаяСтоимостьОстаток,
	|	СУММА(ЕСТЬNULL(ХозрасчетныйОстаткиИОборотыТН.СуммаНУНачальныйОстатокКт,0) + 
	|	ЕСТЬNULL(ХозрасчетныйОстаткиИОборотыТН.СуммаНУОборотКт,0)) КАК ТорговаяНаценкаОстатокНУ,
	|	СУММА(ЕСТЬNULL(ХозрасчетныйОстаткиИОборотыПС.СуммаНУНачальныйОстатокДт,0) + 
	|	ЕСТЬNULL(ХозрасчетныйОстаткиИОборотыПС.СуммаНУОборотДт,0)) КАК ПродажнаяСтоимостьОстатокНУ
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ОстаткиИОбороты(&ДатаНач,&ДатаКон, , ,Счет = &СчетТН, &ВидыСубконто, Организация = &Организация) КАК ХозрасчетныйОстаткиИОборотыТН
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.ОстаткиИОбороты(&ДатаНач,&ДатаКон, , ,Счет = &СчетПС, &ВидыСубконто, Организация = &Организация) КАК ХозрасчетныйОстаткиИОборотыПС
	|		ПО ХозрасчетныйОстаткиИОборотыТН.НалоговоеНазначение = ХозрасчетныйОстаткиИОборотыПС.НалоговоеНазначение
	|			И ХозрасчетныйОстаткиИОборотыТН.Субконто1 = ХозрасчетныйОстаткиИОборотыПС.Субконто1
	|			И ХозрасчетныйОстаткиИОборотыТН.Субконто2 = ХозрасчетныйОстаткиИОборотыПС.Субконто2 "+?(РазделятьПоПартиям,"
	|			И ХозрасчетныйОстаткиИОборотыТН.Субконто3 = ХозрасчетныйОстаткиИОборотыПС.Субконто3","")+"
	|
	|СГРУППИРОВАТЬ ПО
	|	ХозрасчетныйОстаткиИОборотыТН.НалоговоеНазначение,
	|	ХозрасчетныйОстаткиИОборотыТН.Субконто1,
	|	ХозрасчетныйОстаткиИОборотыТН.Субконто2"+?(РазделятьПоПартиям,",
	|	ХозрасчетныйОстаткиИОборотыТН.Субконто3","")+") КАК ЗапросПоНаценке 
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(&ДатаНач,&ДатаКон, , , ,СчетКт = &СчетПС, &ВидыСубконто, Организация = &Организация) КАК ОборотыДтКт
	|		ПО ЗапросПоНаценке.Номенклатура = ОборотыДтКт.СубконтоКт1 
	|			И ЗапросПоНаценке.НалоговоеНазначение = ОборотыДтКт.НалоговоеНазначениеКт 
	|		    И ЗапросПоНаценке.Склады = ОборотыДтКт.СубконтоКт2 "+?(РазделятьПоПартиям,"
	|		    И ЗапросПоНаценке.Партия = ОборотыДтКт.СубконтоКт3","")+"
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(&ДатаНач,&ДатаКон, , СчетДт = &СчетТН, &ВидыСубконто, СчетКт = &СчетТН, &ВидыСубконто, Организация = &Организация) КАК ОборотыПеремещениеМеждуАТТ
	|		ПО ЗапросПоНаценке.Номенклатура = ОборотыПеремещениеМеждуАТТ.СубконтоКт1 
	|			И ЗапросПоНаценке.НалоговоеНазначение = ОборотыПеремещениеМеждуАТТ.НалоговоеНазначениеКт
	|		    И ЗапросПоНаценке.Склады = ОборотыПеремещениеМеждуАТТ.СубконтоКт2 "+?(РазделятьПоПартиям,"
	|		    И ЗапросПоНаценке.Партия = ОборотыПеремещениеМеждуАТТ.СубконтоКт3","")+"
	|СГРУППИРОВАТЬ ПО
	| 	ЗапросПоНаценке.НалоговоеНазначение,
	| 	ЗапросПоНаценке.Номенклатура,
	| 	ЗапросПоНаценке.Склады,
	|	ЗапросПоНаценке.Партия,
	|	ОборотыДтКт.СчетДт,
	|	ОборотыДтКт.НалоговоеНазначениеДт,
	|	ОборотыДтКт.СубконтоДт1,
	|	ОборотыДтКт.СубконтоДт2,
	|	ОборотыДтКт.СубконтоДт3
	|
	|ИТОГИ ПО
	| 	НалоговоеНазначение,
	|	Номенклатура,
	|	Склады,
	|	Партия,
	|	СчетДт";
	
	ВыборкаПоНалоговымНазначениям = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "НалоговоеНазначение");
	Пока ВыборкаПоНалоговымНазначениям.Следующий() Цикл
		ВыборкаПоНоменклатуре = ВыборкаПоНалоговымНазначениям.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Номенклатура");
		Пока ВыборкаПоНоменклатуре.Следующий() Цикл
			ВыборкаПоСкладам = ВыборкаПоНоменклатуре.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Склады");
			Пока ВыборкаПоСкладам.Следующий() Цикл
				ВыборкаПоПартиям = ВыборкаПоСкладам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Партия");
				Пока ВыборкаПоПартиям.Следующий() Цикл
					
					ТН = ВыборкаПоПартиям.ТорговаяНаценка;
					ПС = ВыборкаПоПартиям.ПродажнаяСтоимость;
					
					ТН_НУ = ВыборкаПоПартиям.ТорговаяНаценкаНУ;
					ПС_НУ = ВыборкаПоПартиям.ПродажнаяСтоимостьНУ;
					
 					Если ПС = 0 Тогда
						Продолжить;
					КонецЕсли;
					
					// Определим суммы, которые ушли не на счет себестоимости (возвраты и пр.)
					СуммаВозвратов = ВыборкаПоПартиям.ОборотыПеремещениеМеждуАТТ;
					СуммаВозвратовНаценки = 0;
					СуммаРеализации90 = 0;
					
					СуммаВозвратовНУ = ВыборкаПоПартиям.ОборотыПеремещениеМеждуАТТНУ;
					СуммаВозвратовНаценкиНУ = 0;
					СуммаРеализации90НУ = 0;
					
					ВыборкаПоСчетДт = ВыборкаПоПартиям.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "СчетДт");
					Пока ВыборкаПоСчетДт.Следующий() Цикл
						Если ВыборкаПоСчетДт.СчетДт = Null Тогда
							Продолжить;
						КонецЕсли; 
						Если НЕ ВыборкаПоСчетДт.СчетДт.ПринадлежитЭлементу(Счет90) Тогда
							СуммаВозвратов = СуммаВозвратов + ВыборкаПоСчетДт.Реализация;
							СуммаВозвратовНУ = СуммаВозвратовНУ + ВыборкаПоСчетДт.РеализацияНУ;
							Если ВыборкаПоСчетДт.СчетДт = ПланыСчетов.Хозрасчетный.ТорговаяНаценкаАТТ Тогда
								СуммаВозвратовНаценки = СуммаВозвратовНаценки + ВыборкаПоСчетДт.Реализация;
								СуммаВозвратовНаценкиНУ = СуммаВозвратовНаценкиНУ + ВыборкаПоСчетДт.РеализацияНУ;
							КонецЕсли;
						Иначе
							СуммаРеализации90 = СуммаРеализации90 + ВыборкаПоСчетДт.Реализация;
							СуммаРеализации90НУ = СуммаРеализации90НУ + ВыборкаПоСчетДт.РеализацияНУ;
						КонецЕсли; 
					КонецЦикла;
					
					НаценкаНаВозвраты = Окр(СуммаВозвратов * ТН/ПС,2);
					КорректировкаНаценки = НаценкаНаВозвраты - СуммаВозвратовНаценки;
					
					Если НЕ ПС_НУ = 0 Тогда
						НаценкаНаВозвратыНУ = Окр(СуммаВозвратовНУ * ТН_НУ/ПС_НУ,2);
						КорректировкаНаценкиНУ = НаценкаНаВозвратыНУ - СуммаВозвратовНаценкиНУ;
					КонецЕсли;
					
					НакопленнаяПогрешность = 0;
					НакопленнаяПогрешностьНУ = 0;
					
					//Теперь произведем расчет наценки для продаж
					// и одновременно разбросаем суммы КорректировкаНаценки на счета себестоимости
					ТекущаяСуммаРеализации90 = 0;
					ТекущаяСуммаРеализации90НУ = 0;
					
					ВыборкаПоСчетДт = ВыборкаПоПартиям.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "СчетДт");
					Пока ВыборкаПоСчетДт.Следующий() Цикл
						Если ВыборкаПоСчетДт.СчетДт = Null Тогда
							Продолжить;
						КонецЕсли; 
						
						ВыборкаДетальныеЗаписи = ВыборкаПоСчетДт.Выбрать(ОбходРезультатаЗапроса.Прямой);
						
						Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
							Если ВыборкаДетальныеЗаписи.СчетДт.ПринадлежитЭлементу(Счет90) Тогда
								СуммаНаценки = ОбщегоНазначенияРед12.ОкруглитьСУчетомПогрешности(ВыборкаДетальныеЗаписи.Реализация * ТН/ПС,2,НакопленнаяПогрешность);
								
								ТекущаяСуммаРеализации90 = ТекущаяСуммаРеализации90 + ВыборкаДетальныеЗаписи.Реализация;
								Если ТекущаяСуммаРеализации90 = СуммаРеализации90 Тогда
									// относим всю корректировку
									ОтносимаяКорректировкаНаценки = КорректировкаНаценки;
								Иначе
									// относим пропорционально сумме
									Если СуммаРеализации90 <> 0 Тогда
										ОтносимаяКорректировкаНаценки = Окр(КорректировкаНаценки * ВыборкаДетальныеЗаписи.Реализация/СуммаРеализации90)
									Иначе
										ОтносимаяКорректировкаНаценки = 0;
									КонецЕсли;
								КонецЕсли; 
								СуммаНаценки = СуммаНаценки + ОтносимаяКорректировкаНаценки;
								КорректировкаНаценки = КорректировкаНаценки - ОтносимаяКорректировкаНаценки;
								
								Если ПС_НУ = 0 Тогда
									СуммаНаценкиНУ = 0;
								Иначе
									СуммаНаценкиНУ = ОбщегоНазначенияРед12.ОкруглитьСУчетомПогрешности(ВыборкаДетальныеЗаписи.РеализацияНУ * ТН_НУ/ПС_НУ,2,НакопленнаяПогрешностьНУ);
									ТекущаяСуммаРеализации90НУ = ТекущаяСуммаРеализации90НУ + ВыборкаДетальныеЗаписи.РеализацияНУ;
									Если ТекущаяСуммаРеализации90НУ = СуммаРеализации90НУ Тогда
										// относим всю корректировку
										ОтносимаяКорректировкаНаценкиНУ = КорректировкаНаценкиНУ;
									Иначе
										// относим пропорционально сумме
										Если СуммаРеализации90НУ <> 0 Тогда
											ОтносимаяКорректировкаНаценкиНУ = Окр(КорректировкаНаценкиНУ * ВыборкаДетальныеЗаписи.РеализацияНУ/СуммаРеализации90НУ)
										Иначе
											ОтносимаяКорректировкаНаценкиНУ = 0;
										Конецесли;
									КонецЕсли; 
									СуммаНаценкиНУ = СуммаНаценкиНУ + ОтносимаяКорректировкаНаценкиНУ;
									КорректировкаНаценкиНУ = КорректировкаНаценкиНУ - ОтносимаяКорректировкаНаценкиНУ;
								КонецЕсли;
								
								Если (СуммаНаценки <> 0) ИЛИ (СуммаНаценкиНУ <> 0) Тогда
									
									//Формируем проводки по списанию торговой наценки
									Проводка = мПроводкиБУ.Добавить();
									Проводка.Период                    = Дата;
									Проводка.Организация               = СтруктураШапкиДокумента.Организация;
									Проводка.СчетДт                    = ВыборкаПоСчетДт.СчетДт;
									Проводка.СчетКт                    = ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахАТТ;
									
									БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1,  ВыборкаДетальныеЗаписи.СубконтоДт1);
									БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2,  ВыборкаДетальныеЗаписи.СубконтоДт2);
									БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3,  ВыборкаДетальныеЗаписи.СубконтоДт3);
									
									БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Номенклатура",  ВыборкаПоПартиям.Номенклатура);
									БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Склады",  ВыборкаПоПартиям.Склады);
									Если РазделятьПоПартиям Тогда
										БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Партии",  ВыборкаПоПартиям.Партия);
									КонецЕсли;
									
									Проводка.Сумма                     = - СуммаНаценки;
									Проводка.Содержание                = НСтр("ru='Закрытие месяца: Торговая наценка';uk='Закриття місяця: Торговельна націнка'",Локализация.КодЯзыкаИнформационнойБазы());
									Проводка.НомерЖурнала              = НСтр("ru='ТВ';uk='ТВ'",Локализация.КодЯзыкаИнформационнойБазы());
									
									Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.НалоговоеНазначениеДт) Тогда
										Проводка.НалоговоеНазначениеДт = ВыборкаДетальныеЗаписи.НалоговоеНазначениеДт;
										Проводка.СуммаНУДт= - СуммаНаценкиНУ;
									КонецЕсли;
									
									Проводка.НалоговоеНазначениеКт = ВыборкаПоПартиям.НалоговоеНазначение;
									Проводка.СуммаНУКт= - СуммаНаценкиНУ;
									
									Проводка = мПроводкиБУ.Добавить();
									Проводка.Период                    = Дата;
									Проводка.Организация               = СтруктураШапкиДокумента.Организация;
									Проводка.СчетДт                    = ПланыСчетов.Хозрасчетный.ТорговаяНаценкаАТТ;
									Проводка.СчетКт                    = ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахАТТ;
									
									БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Номенклатура",  ВыборкаПоПартиям.Номенклатура);
									БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Склады",  ВыборкаПоПартиям.Склады);
									Если РазделятьПоПартиям Тогда
										БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Партии",  ВыборкаПоПартиям.Партия);
									КонецЕсли;
									
									БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Номенклатура",  ВыборкаПоПартиям.Номенклатура);
									БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Склады",  ВыборкаПоПартиям.Склады);
									Если РазделятьПоПартиям Тогда
										БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Партии",  ВыборкаПоПартиям.Партия);
									КонецЕсли;
									
									Проводка.Сумма                     = СуммаНаценки;
									Проводка.Содержание                =  НСтр("ru='Закрытие месяца: Торговая наценка';uk='Закриття місяця: Торговельна націнка'",Локализация.КодЯзыкаИнформационнойБазы());
									Проводка.НомерЖурнала              = НСтр("ru='ТВ';uk='ТВ'",Локализация.КодЯзыкаИнформационнойБазы());
									
									Проводка.НалоговоеНазначениеДт = ВыборкаПоПартиям.НалоговоеНазначение;
									Проводка.НалоговоеНазначениеКт = ВыборкаПоПартиям.НалоговоеНазначение;
									Проводка.СуммаНУДт= СуммаНаценкиНУ;
									Проводка.СуммаНУКт= СуммаНаценкиНУ;
									
								КонецЕсли;
							КонецЕсли; 
						КонецЦикла;  // ВыборкаДетальныеЗаписи.Следующий()
					КонецЦикла; // ВыборкаПоСчетДт.Следующий()
				КонецЦикла; // ВыборкаПоПартиям.Следующий() Цикл
			КонецЦикла; // ВыборкаПоСкладам.Следующий() Цикл
		КонецЦикла; // ВыборкаПоНоменклатуре.Следующий()
	КонецЦикла; // ВыборкаПоНалоговымНазначениям.Следующий()
	
	ПроведениеСервер.ЗаписатьНаборЗаписейБезЗамещенияТекущихДвижений(мПроводкиБУ);
	
КонецПроцедуры

// ПРОЦЕДУРЫ И ФУНКЦИИ ПО ПЕРЕОЦЕНКЕ ЗАПАСОВ БУ

Процедура ПереоценкаСтоимостиЗапасовБУ(СтруктураШапкиДокумента, Отказ, Заголовок)
	
	Если НЕ СтруктураШапкиДокумента.ПереоценкаСтоимостиЗапасовБУ Тогда
		Возврат;
	КонецЕсли;
			
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",Организация);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПараметрыОценкиЗапасовНаДатуБаланса.ТипЦен,
	|	ПараметрыОценкиЗапасовНаДатуБаланса.СчетЗатрат,
	|	ПараметрыОценкиЗапасовНаДатуБаланса.Субконто1,
	|	ПараметрыОценкиЗапасовНаДатуБаланса.Субконто2,
	|	ПараметрыОценкиЗапасовНаДатуБаланса.Субконто3,
	|	ПараметрыОценкиЗапасовНаДатуБаланса.СчетДоходов,
	|	ПараметрыОценкиЗапасовНаДатуБаланса.СубконтоДоходов1,
	|	ПараметрыОценкиЗапасовНаДатуБаланса.СубконтоДоходов2,
	|	ПараметрыОценкиЗапасовНаДатуБаланса.СубконтоДоходов3
	|ИЗ
	|	РегистрСведений.ПараметрыОценкиЗапасовНаДатуБаланса КАК ПараметрыОценкиЗапасовНаДатуБаланса
	|ГДЕ
	|	ПараметрыОценкиЗапасовНаДатуБаланса.Организация = &Организация";
			 
	Таблица = Запрос.Выполнить().Выгрузить();
	Если Таблица.Количество() = 0 Тогда
		
		ТекстСообщения = Заголовок + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru=' Для организации ""%1"" не установлены параметры оценки запасов на дату баланса !';uk=' Для організації ""%1"" не встановлені параметри оцінки запасів на дату балансу !'"), Организация);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , , , Отказ);
		Возврат;
	КонецЕсли;
	ПараметрыОценки = Таблица[0];
	УказанСчетДоходов = ЗначениеЗаполнено(ПараметрыОценки.СчетДоходов);
		 
	// Достанем нужные цены запросом
	ЗапросЦены = Новый Запрос;
	ЗапросЦены.УстановитьПараметр("Дата",   мКонМесяца);
	ЗапросЦены.УстановитьПараметр("ТипЦен", ПараметрыОценки.ТипЦен);
	ЗапросЦены.Текст = "ВЫБРАТЬ
	|	ЦеныНоменклатурыСрезПоследних.Номенклатура КАК Номенклатура,
	|	ЦеныНоменклатурыСрезПоследних.ТипЦен       КАК ТипЦен,
	|	ЦеныНоменклатурыСрезПоследних.Валюта       КАК ВалютаЦены,
	|	ЦеныНоменклатурыСрезПоследних.Цена         КАК Цена,
	|	КурсыВалютСрезПоследних.Курс               КАК КурсВалютыЦены,
	|	КурсыВалютСрезПоследних.Кратность          КАК КратностьВалютыЦены,
	|	ЦеныНоменклатурыСрезПоследних.ТипЦен.ЦенаВключаетНДС          КАК ЦенаВключаетНДС,
	|	ЦеныНоменклатурыСрезПоследних.ТипЦен.ПорядокОкругления        КАК ПорядокОкругления,
	|	ЦеныНоменклатурыСрезПоследних.ТипЦен.ОкруглятьВБольшуюСторону КАК ОкруглятьВБольшуюСторону
	|ИЗ
	|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&Дата, ТипЦен = &ТипЦен) КАК ЦеныНоменклатурыСрезПоследних
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Дата, ) КАК КурсыВалютСрезПоследних
	|		ПО ЦеныНоменклатурыСрезПоследних.Валюта = КурсыВалютСрезПоследних.Валюта
	|ГДЕ 
	|	ЦеныНоменклатурыСрезПоследних.Цена > 0";
	
	// Предполагается, что переоценка производтся для тех номенклатруных позиций, 
	// для которых установлена цена-ЧСР
	РезультатЗапросаПоЦенам = ЗапросЦены.Выполнить();
	
	ТаблицаЦены = РезультатЗапросаПоЦенам.Выгрузить();
	МассивНоменклатура = ТаблицаЦены.ВыгрузитьКолонку("Номенклатура");
	
	Если МассивНоменклатура.Количество()=0 Тогда
		// нечего переоценивать;
		Возврат;
	КонецЕсли;
	
	ТаблицаЦены = Неопределено;
	
	ВыборкаЦены = РезультатЗапросаПоЦенам.Выбрать();
	
	СчетТовары = ПланыСчетов.Хозрасчетный.Товары;
	РазделятьПоПартиям = ?(СчетТовары.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Партии, "ВидСубконто") = Неопределено, Ложь, Истина);
	ВедетсяСкладскойУчет  = ?(СчетТовары.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады, "ВидСубконто") = Неопределено, Ложь, Истина);
	Если ВедетсяСкладскойУчет Тогда
		РазделятьПоСкладам = СчетТовары.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады, "ВидСубконто").Суммовой;
	Иначе
		РазделятьПоСкладам = Ложь;
	КонецЕсли;
	
	СчетаНеПодлежатПереоценке = Новый Массив;
	СчетаНеПодлежатПереоценке.Добавить(ПланыСчетов.Хозрасчетный.ТоварыВТорговле);
	СчетаНеПодлежатПереоценке.Добавить(ПланыСчетов.Хозрасчетный.ТорговаяНаценка);
	
	// Получим список счетов на которых ведется учет запасов
	СчетаЗапасов = Новый Массив;
	СчетаЗапасов.Добавить(ПланыСчетов.Хозрасчетный.ПриобретениеОсновныхСредств);
	СчетаЗапасов.Добавить(ПланыСчетов.Хозрасчетный.ПриобретениеДругихНеоборотныхМатериальныхАктивов);
	СчетаЗапасов.Добавить(ПланыСчетов.Хозрасчетный.ПроизводственныеЗапасы);
	СчетаЗапасов.Добавить(ПланыСчетов.Хозрасчетный.Полуфабрикаты);
	СчетаЗапасов.Добавить(ПланыСчетов.Хозрасчетный.ГотоваяПродукция);
	СчетаЗапасов.Добавить(ПланыСчетов.Хозрасчетный.ПродукцияСельскохозяйственногоПроизводства);
	СчетаЗапасов.Добавить(ПланыСчетов.Хозрасчетный.Товары);
	Для каждого Счет Из СчетаЗапасов Цикл
		ВыборкаСчетов = ПланыСчетов.Хозрасчетный.ВыбратьИерархически(Счет);
		Пока ВыборкаСчетов.Следующий() Цикл
			// счета исключения
			Если (НЕ (ВыборкаСчетов.Ссылка.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.ТоварыВТорговле))) И  
				(НЕ (ВыборкаСчетов.Ссылка = ПланыСчетов.Хозрасчетный.ТоварыВТорговле)) И
				(НЕ (ВыборкаСчетов.Ссылка.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.ТорговаяНаценка))) И 
				(НЕ (ВыборкаСчетов.Ссылка = ПланыСчетов.Хозрасчетный.ТорговаяНаценка))
				 Тогда
				СчетаЗапасов.Добавить(ВыборкаСчетов.Ссылка);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла; 
	
	ВидыСубконтоУценка = Новый Массив;
	ВидыСубконтоУценка.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);
	Если РазделятьПоПартиям Тогда
		ВидыСубконтоУценка.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Партии);	
	КонецЕсли; 
	
	ЗапросУценка = Новый Запрос;
	ЗапросУценка.УстановитьПараметр("ДатаНач",   			мНачГраница);
	ЗапросУценка.УстановитьПараметр("ДатаКон",   			мКонГраница);
	ЗапросУценка.УстановитьПараметр("Организация",			Организация);
	ЗапросУценка.УстановитьПараметр("МассивНоменклатура", 	МассивНоменклатура);
	ЗапросУценка.УстановитьПараметр("СчетаЗапасов", 		СчетаЗапасов);
	ЗапросУценка.УстановитьПараметр("СчетУценки", 			ПланыСчетов.Хозрасчетный.УценкиЗапасов);
	ЗапросУценка.УстановитьПараметр("ВидыСубконто",			ВидыСубконтоУценка);
	ЗапросУценка.УстановитьПараметр("ПустаяПартия",			Документы.Партия.ПустаяСсылка());
	
	ЗапросУценка.Текст = "
	|ВЫБРАТЬ
	|	ХозрасчетныйОстаткиИОбороты.Субконто1 КАК Номенклатура,"+?(РазделятьПоПартиям,"
	|	ХозрасчетныйОстаткиИОбороты.Субконто2 КАК Партия,", "
	|	&ПустаяПартия КАК Партия,")+"
	|	ХозрасчетныйОстаткиИОбороты.КоличествоКонечныйОстаток КАК КоличествоКонечныйОстаток,
	|	ХозрасчетныйОстаткиИОбороты.КоличествоОборотДт КАК КоличествоОборотДт,
	|	ХозрасчетныйОстаткиИОбороты.КоличествоОборотКт КАК КоличествоОборотКт,
	|	ХозрасчетныйОстаткиИОбороты.КоличествоНачальныйОстаток КАК КоличествоНачальныйОстаток,
	|	ВЫБОР КОГДА ХозрасчетныйОборотыДтКт.КоличествоОборотКт ЕСТЬ NULL ТОГДА 0 ИНАЧЕ ХозрасчетныйОборотыДтКт.КоличествоОборотКт КОНЕЦ КАК КоличествоПеремещения,
	|	ВЫБОР КОГДА ХозрасчетныйОстаткиУценка.СуммаОстаток ЕСТЬ NULL ТОГДА 0 ИНАЧЕ ХозрасчетныйОстаткиУценка.СуммаОстаток КОНЕЦ КАК СуммаУценки
	|ИЗ
 	|	РегистрБухгалтерии.Хозрасчетный.ОстаткиИОбороты(&ДатаНач, &ДатаКон, , , Счет В (&СчетаЗапасов), &ВидыСубконто, Организация = &Организация И Субконто1 В (&МассивНоменклатура)) КАК ХозрасчетныйОстаткиИОбороты
	|	ЛЕВОЕ СОЕДИНЕНИЕ 
	|		РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(&ДатаНач, &ДатаКон, , СчетДт В (&СчетаЗапасов), &ВидыСубконто, СчетКт В (&СчетаЗапасов), &ВидыСубконто, Организация = &Организация И СубконтоКт1 В (&МассивНоменклатура)) КАК ХозрасчетныйОборотыДтКт
	|		 ПО ХозрасчетныйОстаткиИОбороты.Субконто1 = ХозрасчетныйОборотыДтКт.СубконтоКт1"+?(РазделятьПоПартиям,"
	|			И ХозрасчетныйОстаткиИОбороты.Субконто2 = ХозрасчетныйОборотыДтКт.СубконтоКт2","")+"
	|		     
	|	ЛЕВОЕ СОЕДИНЕНИЕ 
	|		РегистрБухгалтерии.Хозрасчетный.Остатки(&ДатаКон, Счет = &СчетУценки, &ВидыСубконто, Организация = &Организация И Субконто1 В (&МассивНоменклатура)) КАК ХозрасчетныйОстаткиУценка
	|		 ПО ХозрасчетныйОстаткиИОбороты.Субконто1 = ХозрасчетныйОстаткиУценка.Субконто1"+?(РазделятьПоПартиям,"
	|			И ХозрасчетныйОстаткиИОбороты.Субконто2 = ХозрасчетныйОстаткиУценка.Субконто2","")+"";
	
	РезультатУценка = ЗапросУценка.Выполнить();
	ТаблицаУценка = РезультатУценка.Выгрузить();
	// Спишем уценку по методу "средней"
	Для каждого СтрокаУценки Из ТаблицаУценка Цикл
		Если СтрокаУценки.СуммаУценки = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрокаУценки.КоличествоКонечныйОстаток = 0 Тогда
			// списвывается вся уценка
			СписываемаяУценка = СтрокаУценки.СуммаУценки;
		Иначе
			КоличествоБылоИПрибыло = СтрокаУценки.КоличествоНачальныйОстаток + (СтрокаУценки.КоличествоОборотДт - СтрокаУценки.КоличествоПеремещения);
			КоличествоВыбыло  = СтрокаУценки.КоличествоОборотКт - СтрокаУценки.КоличествоПеремещения;
			
			СписываемаяУценка = Окр(СтрокаУценки.СуммаУценки * КоличествоВыбыло/КоличествоБылоИПрибыло,2);
		КонецЕсли;
		
		Если СписываемаяУценка<>0 Тогда
			СтрокаУценки.СуммаУценки = СтрокаУценки.СуммаУценки - СписываемаяУценка;
		
			Проводка = мПроводкиБУ.Добавить();
			Проводка.Период                    = Дата;
			Проводка.Организация               = СтруктураШапкиДокумента.Организация;
			
			Проводка.Сумма					   = СписываемаяУценка;
			
			Проводка.СчетКт                    = ПланыСчетов.Хозрасчетный.УценкиЗапасов;
									
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Номенклатура", СтрокаУценки.Номенклатура);
			Если РазделятьПоПартиям Тогда
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Партии",  СтрокаУценки.Партия);
			КонецЕсли;
		КонецЕсли; 
		
	КонецЦикла; 
	
	ВидыСубконто = Новый Массив;
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);
	Если РазделятьПоСкладам Тогда
		ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады);
	КонецЕсли;
	Если РазделятьПоПартиям Тогда
		ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Партии);	
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаКон",   			мКонГраница);
	Запрос.УстановитьПараметр("Организация",		Организация);
	Запрос.УстановитьПараметр("МассивНоменклатура", МассивНоменклатура);
	Запрос.УстановитьПараметр("СчетаЗапасов", 		СчетаЗапасов);
	Запрос.УстановитьПараметр("ВидыСубконто",		ВидыСубконто);
	Запрос.УстановитьПараметр("ПустаяПартия",    	Документы.Партия.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустойСклад",    	Справочники.Склады.ПустаяСсылка());
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ХозрасчетныйОстатки.НалоговоеНазначение,
	|	ХозрасчетныйОстатки.Счет,
	|	ХозрасчетныйОстатки.Субконто1 КАК Номенклатура,"+?(РазделятьПоСкладам,"
	|	ХозрасчетныйОстатки.Субконто2 КАК Склад,", "
	|	&ПустойСклад КАК Склад,")+?(РазделятьПоПартиям,"
	|	ХозрасчетныйОстатки."+?(РазделятьПоСкладам,"Субконто3","Субконто2")+" КАК Партия,", "
	|	&ПустаяПартия КАК Партия,")+"
	|	ХозрасчетныйОстатки.СуммаОстаток КАК Сумма,
	|	ХозрасчетныйОстатки.КоличествоОстаток КАК Количество
	|ИЗ
 	|	РегистрБухгалтерии.Хозрасчетный.Остатки(&ДатаКон, Счет В (&СчетаЗапасов), &ВидыСубконто, 
	|			Организация = &Организация И Субконто1 В (&МассивНоменклатура)) КАК ХозрасчетныйОстатки
	|УПОРЯДОЧИТЬ ПО
	|	ХозрасчетныйОстатки.Субконто1"+?(РазделятьПоСкладам,",
	|	ХозрасчетныйОстатки.Субконто2", "")+?(РазделятьПоПартиям,",
	|	ХозрасчетныйОстатки."+?(РазделятьПоСкладам,"Субконто3","Субконто2"), "")+"
	|	АВТОУПОРЯДОЧИВАНИЕ
	| ";
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	
	Пока Выборка.Следующий() Цикл
		
		Если НЕ ВыборкаЦены.Номенклатура = Выборка.Номенклатура Тогда
			
			ВыборкаЦены.Сбросить();
			СтруктураПоиска = Новый Структура;
			СтруктураПоиска.Вставить("Номенклатура",Выборка.Номенклатура);
			Если НЕ ВыборкаЦены.НайтиСледующий(СтруктураПоиска,"Номенклатура") Тогда
				// почему то нет цены :(
				Продолжить;
			КонецЕсли;
		КонецЕсли; 
		
		ЦенаРегл = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(ВыборкаЦены.Цена, ВыборкаЦены.ВалютаЦены, ВалютаРегламентированногоУчета, 
												ВыборкаЦены.КурсВалютыЦены, 1, ВыборкаЦены.КратностьВалютыЦены, 1);
		
		СуммаЧСР = ЦенаРегл * Выборка.Количество;
		
		СуммаУценки = Выборка.Сумма - СуммаЧСР;
		
		Если СуммаУценки > 0 Тогда
			// уценку можно делать всегда
		ИначеЕсли СуммаУценки < 0 Тогда
			// дооценку только в пределах ранее проведенных уценок
			СуммаПрежнихУценок = 0;
			
			СтруктураПоиска = Новый Структура;
			СтруктураПоиска.Вставить("Номенклатура",Выборка.Номенклатура);
			СтруктураПоиска.Вставить("Партия",Выборка.Партия);
			НайденныеСтроки = ТаблицаУценка.НайтиСтроки(СтруктураПоиска);
			Если НайденныеСтроки.Количество() = 0 Тогда
				СуммаПрежнихУценок = 0;
			Иначе
				СуммаПрежнихУценок = НайденныеСтроки[0].СуммаУценки;
			КонецЕсли;
		
			СуммаУценки = - Мин(-СуммаУценки, СуммаПрежнихУценок);
		КонецЕсли;  
		
		Если СуммаУценки<>0 Тогда
			
			Проводка = мПроводкиБУ.Добавить();
			Проводка.Период                    = Дата;
			Проводка.Организация               = СтруктураШапкиДокумента.Организация;
			
			Если СуммаУценки<0 И УказанСчетДоходов Тогда 
				// в корреспонденции со счетом доходов 
				Проводка.СчетКт                    = ПараметрыОценки.СчетДоходов;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1,  ПараметрыОценки.СубконтоДоходов1);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2,  ПараметрыОценки.СубконтоДоходов2);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3,  ПараметрыОценки.СубконтоДоходов3);
				
				Проводка.СчетДт                    = Выборка.Счет;
				
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Номенклатура",  Выборка.Номенклатура);
				Если РазделятьПоСкладам Тогда
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Склады",  Выборка.Склад);
				КонецЕсли;
				Если РазделятьПоПартиям Тогда
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Партии",  Выборка.Партия);
				КонецЕсли;
										
				Проводка.Сумма                     = -СуммаУценки;
			
				// Определение налоговой аналитики
				Проводка.НалоговоеНазначениеДт	   = Выборка.НалоговоеНазначение;
				Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыльДо2015 Тогда
					Если  Выборка.НалоговоеНазначение = Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяНеХозДеятельность Тогда
						Проводка.НалоговоеНазначениеКт = Справочники.НалоговыеНазначенияАктивовИЗатрат.НКУ_НеХозДеятельность;
					Иначе
						Проводка.НалоговоеНазначениеКт = Справочники.НалоговыеНазначенияАктивовИЗатрат.НКУ_ХозДеятельность;
					КонецЕсли;
				КонецЕсли;
				
	        Иначе
	
				Проводка.СчетДт                    = ПараметрыОценки.СчетЗатрат;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1,  ПараметрыОценки.Субконто1);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2,  ПараметрыОценки.Субконто2);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3,  ПараметрыОценки.Субконто3);
				
				Проводка.СчетКт                    = Выборка.Счет;
				
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Номенклатура",  Выборка.Номенклатура);
				Если РазделятьПоСкладам Тогда
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Склады",  Выборка.Склад);
				КонецЕсли;
				Если РазделятьПоПартиям Тогда
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Партии",  Выборка.Партия);
				КонецЕсли;
										
				Проводка.Сумма                     = СуммаУценки;
			
				// Определение налоговой аналитики
				Проводка.НалоговоеНазначениеКт	   = Выборка.НалоговоеНазначение;
				Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыльДо2015 Тогда
					Если  Выборка.НалоговоеНазначение = Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяНеХозДеятельность Тогда
						Проводка.НалоговоеНазначениеДт = Справочники.НалоговыеНазначенияАктивовИЗатрат.НКУ_НеХозДеятельность;
					Иначе
						Проводка.НалоговоеНазначениеДт = Справочники.НалоговыеНазначенияАктивовИЗатрат.НКУ_ХозДеятельность;
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
			
			Если СуммаУценки>0 Тогда 
				Проводка.Содержание            = НСтр("ru='Оценка запасов на дату баланса: уценка';uk='Оцінка запасів на дату балансу: уцінка'",Локализация.КодЯзыкаИнформационнойБазы());
			Иначе	
				Проводка.Содержание            = НСтр("ru='Оценка запасов на дату баланса: дооценка';uk='Оцінка запасів на дату балансу: дооцінка'",Локализация.КодЯзыкаИнформационнойБазы());
			КонецЕсли;	
			
			Если СуммаУценки<0 Тогда
				Проводка = мПроводкиБУ.Добавить();
				Проводка.Период                    = Дата;
				Проводка.Организация               = СтруктураШапкиДокумента.Организация;
				
				Проводка.Сумма					   = - СуммаУценки;
				
				Проводка.СчетКт                    = ПланыСчетов.Хозрасчетный.УценкиЗапасов;
										
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Номенклатура", Выборка.Номенклатура);
				Если РазделятьПоПартиям Тогда
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Партии",  Выборка.Партия);
				КонецЕсли;
			Иначе
				Проводка = мПроводкиБУ.Добавить();
				Проводка.Период                    = Дата;
				Проводка.Организация               = СтруктураШапкиДокумента.Организация;
				
				Проводка.Сумма					   = СуммаУценки;
				
				Проводка.СчетДт                    = ПланыСчетов.Хозрасчетный.УценкиЗапасов;
										
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Номенклатура", Выборка.Номенклатура);
				Если РазделятьПоПартиям Тогда
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Партии",  Выборка.Партия);
				КонецЕсли;
			КонецЕсли; 
		КонецЕсли; 
	
	КонецЦикла; 
	
	ПроведениеСервер.ЗаписатьНаборЗаписейБезЗамещенияТекущихДвижений(мПроводкиБУ);
	
КонецПроцедуры

Процедура ЗакрытиеРегистровНалоговогоУчета(СтруктураШапкиДокумента, Отказ, Заголовок)
	
	Если НЕ СтруктураШапкиДокумента.ЗакрытиеНалоговыхРегистровНУ Тогда
		Возврат;
	КонецЕсли;
	
	НаборДвиженийПродажи 	 = Движения.ПродажиНалоговыйУчет;
	НаборДвиженийПриобртение = Движения.ПриобретенияНалоговыйУчет;
	
	Если ОбщегоНазначенияБПВызовСервераПовтИсп.ИспользоватьУправляемыеБлокировки() Тогда
		СтруктураПараметров = Новый Структура("ТипТаблицы, ИмяТаблицы", "РегистрНакопления", "ПродажиНалоговыйУчет");
		ЗначенияБлокировки = Новый Соответствие;
		ЗначенияБлокировки.Вставить("Период",      Новый Диапазон(, СтруктураШапкиДокумента.Дата)); 
		ЗначенияБлокировки.Вставить("Организация", СтруктураШапкиДокумента.Организация);
		ОбщегоНазначенияБПВызовСервера.УстановитьУправляемуюБлокировку(СтруктураПараметров, ЗначенияБлокировки);
		
		СтруктураПараметров = Новый Структура("ТипТаблицы, ИмяТаблицы", "РегистрНакопления", "ПриобретенияНалоговыйУчет");
		ЗначенияБлокировки = Новый Соответствие;
		ЗначенияБлокировки.Вставить("Период",      Новый Диапазон(, СтруктураШапкиДокумента.Дата)); 
		ЗначенияБлокировки.Вставить("Организация", СтруктураШапкиДокумента.Организация);
		ОбщегоНазначенияБПВызовСервера.УстановитьУправляемуюБлокировку(СтруктураПараметров, ЗначенияБлокировки);
		
	КонецЕсли;
	
	ТаблицаДвиженийПродажи = НаборДвиженийПродажи.Выгрузить();
	ТаблицаДвиженийПродажи.Очистить();
	
	ТаблицаДвиженийПриобретение = НаборДвиженийПриобртение.Выгрузить();
	ТаблицаДвиженийПриобретение.Очистить();
	
	ЗапросПоЗакрытию = Новый Запрос();
	
	ЗапросПоЗакрытию.Текст = 
			"ВЫБРАТЬ
			|	Данные.ДоговорКонтрагента			  КАК ДоговорКонтрагента,
			|	Данные.ДоговорКонтрагента.ВидДоговора КАК ВидДоговора,
			
			|	Данные.Сделка 						КАК Сделка,
			|	Данные.СтавкаНДС					КАК СтавкаНДС,
			|	Данные.ДляХозяйственнойДеятельности КАК ДляХозяйственнойДеятельности,
			|	Данные.ВидДеятельностиНДС 	  		КАК ВидДеятельностиНДС,
			|	Данные.Амортизируется 	  			КАК Амортизируется,
			
			
			|	Данные.ВозвратнаяТара 				  КАК ВозвратнаяТара,
			
			|	ВЫБОР
			|		КОГДА Данные.ПродажиРасчетыОтгрузка > Данные.ПродажиРасчетыОплата
			|			ТОГДА Данные.ПродажиРасчетыОплата
			|		ИНАЧЕ Данные.ПродажиРасчетыОтгрузка
			|	КОНЕЦ КАК ПродажиРасчеты,
			|	ВЫБОР
			|		КОГДА Данные.ПродажиРасчетыОтгрузкаНДС > Данные.ПродажиРасчетыОплатаНДС
			|			ТОГДА Данные.ПродажиРасчетыОплатаНДС
			|		ИНАЧЕ Данные.ПродажиРасчетыОтгрузкаНДС
			|	КОНЕЦ КАК ПродажиРасчетыНДС,
			
			|	Данные.ПродажиРасчетыОплатаВДВР,
			|	Данные.ПродажиРасчетыОтгрузкаВДВР,
			
			|	ВЫБОР
			|		КОГДА Данные.ПродажиВозвратОтгрузка > Данные.ПродажиВозвратОплата
			|			ТОГДА Данные.ПродажиВозвратОплата
			|		ИНАЧЕ Данные.ПродажиВозвратОтгрузка
			|	КОНЕЦ КАК ПродажиВозврат,
			|	ВЫБОР
			|		КОГДА Данные.ПродажиВозвратОтгрузкаНДС > Данные.ПродажиВозвратОплатаНДС
			|			ТОГДА Данные.ПродажиВозвратОплатаНДС
			|		ИНАЧЕ Данные.ПродажиВозвратОтгрузкаНДС
			|	КОНЕЦ КАК ПродажиВозвратНДС,

			|	Данные.ПродажиВозвратОплатаВДВР,
			|	Данные.ПродажиВозвратОтгрузкаВДВР,
			
			|	ВЫБОР
			|		КОГДА Данные.ПриобретенияРасчетыОтгрузка > Данные.ПриобретенияРасчетыОплата
			|			ТОГДА Данные.ПриобретенияРасчетыОплата
			|		ИНАЧЕ Данные.ПриобретенияРасчетыОтгрузка
			|	КОНЕЦ КАК ПриобретенияРасчеты,
			|	ВЫБОР
			|		КОГДА Данные.ПриобретенияРасчетыОтгрузкаНДС > Данные.ПриобретенияРасчетыОплатаНДС
			|			ТОГДА Данные.ПриобретенияРасчетыОплатаНДС
			|		ИНАЧЕ Данные.ПриобретенияРасчетыОтгрузкаНДС
			|	КОНЕЦ КАК ПриобретенияРасчетыНДС,
			
			|	ВЫБОР
			|		КОГДА Данные.ПриобретенияРасчетыОтгрузкаНДСПропорционально > Данные.ПриобретенияРасчетыОплатаНДСПропорционально
			|			ТОГДА Данные.ПриобретенияРасчетыОплатаНДСПропорционально
			|		ИНАЧЕ Данные.ПриобретенияРасчетыОтгрузкаНДСПропорционально
			|	КОНЕЦ КАК ПриобретенияРасчетыНДСПропорционально,
			
			
			|	Данные.ПриобретенияРасчетыОплатаВДВР,
			|	Данные.ПриобретенияРасчетыОтгрузкаВДВР,
			
			|	ВЫБОР
			|		КОГДА Данные.ПриобретенияВозвратОтгрузка > Данные.ПриобретенияВозвратОплата
			|			ТОГДА Данные.ПриобретенияВозвратОплата
			|		ИНАЧЕ Данные.ПриобретенияВозвратОтгрузка
			|	КОНЕЦ КАК ПриобретенияВозврат,
			|	ВЫБОР
			|		КОГДА Данные.ПриобретенияВозвратОтгрузкаНДС > Данные.ПриобретенияВозвратОплатаНДС
			|			ТОГДА Данные.ПриобретенияВозвратОплатаНДС
			|		ИНАЧЕ Данные.ПриобретенияВозвратОтгрузкаНДС
			|	КОНЕЦ КАК ПриобретенияВозвратНДС,
			|	ВЫБОР
			|		КОГДА Данные.ПриобретенияВозвратОтгрузкаНДСПропорционально > Данные.ПриобретенияВозвратОплатаНДСПропорционально
			|			ТОГДА Данные.ПриобретенияВозвратОплатаНДСПропорционально
			|		ИНАЧЕ Данные.ПриобретенияВозвратОтгрузкаНДСПропорционально
			|	КОНЕЦ КАК ПриобретенияВозвратНДСПропорционально,

			|	Данные.ПриобретенияВозвратОплатаВДВР,
			|	Данные.ПриобретенияВозвратОтгрузкаВДВР,
			
			|	ВЫБОР
			|		КОГДА Данные.ПриобретенияРасчетыОтгрузка > Данные.ПродажиРасчетыОтгрузка
			|			ТОГДА Данные.ПродажиРасчетыОтгрузка
			|		ИНАЧЕ Данные.ПриобретенияРасчетыОтгрузка
			|	КОНЕЦ КАК БартерРасчеты,
			|	ВЫБОР
			|		КОГДА Данные.ПриобретенияРасчетыОтгрузкаНДС > Данные.ПродажиРасчетыОтгрузкаНДС
			|			ТОГДА Данные.ПродажиРасчетыОтгрузкаНДС
			|		ИНАЧЕ Данные.ПриобретенияРасчетыОтгрузкаНДС
			|	КОНЕЦ КАК БартерРасчетыНДС,
			
			|   Данные.ПриобретенияРасчетыОтгрузкаНДСПропорционально КАК БартерРасчетыНДСПропорционально,
			
			|	Данные.ПродажиРасчетыОтгрузкаВДВР КАК БартерПродажиРасчетыОтгрузкаВДВР,
			|	Данные.ПриобретенияРасчетыОтгрузкаВДВР КАК БартерПриобретенияРасчетыОтгрузкаВДВР,
			
			|	ВЫБОР
			|		КОГДА Данные.ПриобретенияВозвратОтгрузка > Данные.ПродажиВозвратОтгрузка
			|			ТОГДА Данные.ПродажиВозвратОтгрузка
			|		ИНАЧЕ Данные.ПриобретенияВозвратОтгрузка
			|	КОНЕЦ КАК БартерВозврат,
			|	ВЫБОР
			|		КОГДА Данные.ПриобретенияВозвратОтгрузкаНДС > Данные.ПродажиВозвратОтгрузкаНДС
			|			ТОГДА Данные.ПродажиВозвратОтгрузкаНДС
			|		ИНАЧЕ Данные.ПриобретенияВозвратОтгрузкаНДС
			|	КОНЕЦ КАК БартерВозвратНДС,
			
			|   Данные.ПриобретенияВозвратОтгрузкаНДСПропорционально КАК БартерВозвратНДСПропорционально,
			
			|	Данные.ПродажиВозвратОтгрузкаВДВР КАК БартерПродажиВозвратОтгрузкаВДВР,
			|	Данные.ПриобретенияВозвратОтгрузкаВДВР КАК БартерПриобретенияВозвратОтгрузкаВДВР
			
			|ИЗ
			|	(ВЫБРАТЬ
			|		Данные.ДоговорКонтрагента КАК ДоговорКонтрагента,
			
			|		Данные.Сделка 						КАК Сделка,
			|		Данные.СтавкаНДС					КАК СтавкаНДС,
			|		Данные.ДляХозяйственнойДеятельности КАК ДляХозяйственнойДеятельности,
			|		Данные.ВидДеятельностиНДС 	  		КАК ВидДеятельностиНДС,
			|		Данные.Амортизируется 	  			КАК Амортизируется,
			
			|		Данные.ВозвратнаяТара КАК ВозвратнаяТара,
			
			|		ЕстьNULL(СУММА(Данные.ПродажиРасчетыОтгрузка) 		, 0)	КАК ПродажиРасчетыОтгрузка,
			|		ЕстьNULL(СУММА(Данные.ПродажиРасчетыОплата) 		, 0)	КАК ПродажиРасчетыОплата,
			|		ЕстьNULL(СУММА(Данные.ПродажиВозвратОтгрузка) 		, 0)	КАК ПродажиВозвратОтгрузка,
			|		ЕстьNULL(СУММА(Данные.ПродажиВозвратОплата) 		, 0)	КАК ПродажиВозвратОплата,
			|		ЕстьNULL(СУММА(Данные.ПриобретенияРасчетыОтгрузка)	, 0) 	КАК ПриобретенияРасчетыОтгрузка,
			|		ЕстьNULL(СУММА(Данные.ПриобретенияРасчетыОплата) 	, 0)	КАК ПриобретенияРасчетыОплата,
			|		ЕстьNULL(СУММА(Данные.ПриобретенияВозвратОтгрузка)	, 0) 	КАК ПриобретенияВозвратОтгрузка,
			|		ЕстьNULL(СУММА(Данные.ПриобретенияВозвратОплата) 	, 0)	КАК ПриобретенияВозвратОплата,
			
			|		ЕстьNULL(СУММА(Данные.ПродажиРасчетыОтгрузкаНДС) 	, 0)	КАК ПродажиРасчетыОтгрузкаНДС,
			|		ЕстьNULL(СУММА(Данные.ПродажиРасчетыОплатаНДС) 		, 0)	КАК ПродажиРасчетыОплатаНДС,
			|		ЕстьNULL(СУММА(Данные.ПродажиВозвратОтгрузкаНДС) 	, 0)	КАК ПродажиВозвратОтгрузкаНДС,
			|		ЕстьNULL(СУММА(Данные.ПродажиВозвратОплатаНДС) 		, 0)	КАК ПродажиВозвратОплатаНДС,
			|		ЕстьNULL(СУММА(Данные.ПриобретенияРасчетыОтгрузкаНДС), 0) 	КАК ПриобретенияРасчетыОтгрузкаНДС,
			|		ЕстьNULL(СУММА(Данные.ПриобретенияРасчетыОплатаНДС) , 0)	КАК ПриобретенияРасчетыОплатаНДС,
			|		ЕстьNULL(СУММА(Данные.ПриобретенияВозвратОтгрузкаНДС), 0) 	КАК ПриобретенияВозвратОтгрузкаНДС,
			|		ЕстьNULL(СУММА(Данные.ПриобретенияВозвратОплатаНДС) , 0)	КАК ПриобретенияВозвратОплатаНДС,
			
			|		ЕстьNULL(СУММА(Данные.ПриобретенияРасчетыОтгрузкаНДСПропорционально), 0) 	КАК ПриобретенияРасчетыОтгрузкаНДСПропорционально,
			|		ЕстьNULL(СУММА(Данные.ПриобретенияРасчетыОплатаНДСПропорционально) , 0)		КАК ПриобретенияРасчетыОплатаНДСПропорционально,
			|		ЕстьNULL(СУММА(Данные.ПриобретенияВозвратОтгрузкаНДСПропорционально), 0) 	КАК ПриобретенияВозвратОтгрузкаНДСПропорционально,
			|		ЕстьNULL(СУММА(Данные.ПриобретенияВозвратОплатаНДСПропорционально) , 0)		КАК ПриобретенияВозвратОплатаНДСПропорционально,
			
			
			|		ЕстьNULL(СУММА(Данные.ПродажиРасчетыОтгрузкаВДВР) 		, 0)	КАК ПродажиРасчетыОтгрузкаВДВР,
			|		ЕстьNULL(СУММА(Данные.ПродажиРасчетыОплатаВДВР) 		, 0)	КАК ПродажиРасчетыОплатаВДВР,
			|		ЕстьNULL(СУММА(Данные.ПродажиВозвратОтгрузкаВДВР) 		, 0)	КАК ПродажиВозвратОтгрузкаВДВР,
			|		ЕстьNULL(СУММА(Данные.ПродажиВозвратОплатаВДВР) 		, 0)	КАК ПродажиВозвратОплатаВДВР,
			|		ЕстьNULL(СУММА(Данные.ПриобретенияРасчетыОтгрузкаВДВР)	, 0) 	КАК ПриобретенияРасчетыОтгрузкаВДВР,
			|		ЕстьNULL(СУММА(Данные.ПриобретенияРасчетыОплатаВДВР) 	, 0)	КАК ПриобретенияРасчетыОплатаВДВР,
			|		ЕстьNULL(СУММА(Данные.ПриобретенияВозвратОтгрузкаВДВР)	, 0) 	КАК ПриобретенияВозвратОтгрузкаВДВР,
			|		ЕстьNULL(СУММА(Данные.ПриобретенияВозвратОплатаВДВР) 	, 0)	КАК ПриобретенияВозвратОплатаВДВР
			
			|	ИЗ
			|		(ВЫБРАТЬ
			|			Продажи.ДоговорКонтрагента КАК ДоговорКонтрагента,
			
			|			Продажи.Сделка 		КАК Сделка,
			|			Продажи.СтавкаНДС	КАК СтавкаНДС,
			|			ИСТИНА 				КАК ДляХозяйственнойДеятельности,
			|			ИСТИНА 				КАК ВидДеятельностиНДС,
			|			ИСТИНА				КАК Амортизируется,
			
			|			Продажи.ВозвратнаяТара КАК ВозвратнаяТара,
			
			|			ВЫБОР
			|				КОГДА Продажи.Событие = &ПродажиРасчетыОтгрузка
			|					ТОГДА Продажи.СуммаВзаиморасчетовОстаток
			|			КОНЕЦ КАК ПродажиРасчетыОтгрузка,
			|			ВЫБОР
			|				КОГДА Продажи.Событие = &ПродажиРасчетыОплата
			|					ТОГДА Продажи.СуммаВзаиморасчетовОстаток
			|			КОНЕЦ КАК ПродажиРасчетыОплата,
			|			ВЫБОР
			|				КОГДА Продажи.Событие = &ПродажиВозвратОтгрузка
			|					ТОГДА Продажи.СуммаВзаиморасчетовОстаток
			|			КОНЕЦ КАК ПродажиВозвратОтгрузка,
			|			ВЫБОР
			|				КОГДА Продажи.Событие = &ПродажиВозвратОплата
			|					ТОГДА Продажи.СуммаВзаиморасчетовОстаток
			|			КОНЕЦ КАК ПродажиВозвратОплата,
			|			0 КАК ПриобретенияРасчетыОтгрузка,
			|			0 КАК ПриобретенияРасчетыОплата,
			|			0 КАК ПриобретенияВозвратОтгрузка,
			|			0 КАК ПриобретенияВозвратОплата,
			
			|			ВЫБОР
			|				КОГДА Продажи.Событие = &ПродажиРасчетыОтгрузка
			|					ТОГДА Продажи.СуммаНДСОстаток
			|			КОНЕЦ КАК ПродажиРасчетыОтгрузкаНДС,
			|			ВЫБОР
			|				КОГДА Продажи.Событие = &ПродажиРасчетыОплата
			|					ТОГДА Продажи.СуммаНДСОстаток
			|			КОНЕЦ КАК ПродажиРасчетыОплатаНДС,
			|			ВЫБОР
			|				КОГДА Продажи.Событие = &ПродажиВозвратОтгрузка
			|					ТОГДА Продажи.СуммаНДСОстаток
			|			КОНЕЦ КАК ПродажиВозвратОтгрузкаНДС,
			|			ВЫБОР
			|				КОГДА Продажи.Событие = &ПродажиВозвратОплата
			|					ТОГДА Продажи.СуммаНДСОстаток
			|			КОНЕЦ КАК ПродажиВозвратОплатаНДС,
			|			0 КАК ПриобретенияРасчетыОтгрузкаНДС,
			|			0 КАК ПриобретенияРасчетыОплатаНДС,
			|			0 КАК ПриобретенияВозвратОтгрузкаНДС,
			|			0 КАК ПриобретенияВозвратОплатаНДС,
			
			|			0 КАК ПриобретенияРасчетыОтгрузкаНДСПропорционально,
			|			0 КАК ПриобретенияРасчетыОплатаНДСПропорционально,
			|			0 КАК ПриобретенияВозвратОтгрузкаНДСПропорционально,
			|			0 КАК ПриобретенияВозвратОплатаНДСПропорционально,
			
			|			ВЫБОР
			|				КОГДА Продажи.Событие = &ПродажиРасчетыОтгрузка
			|					ТОГДА Продажи.УДАЛИТЬСуммаВДОстаток
			|			КОНЕЦ КАК ПродажиРасчетыОтгрузкаВДВР,
			|			ВЫБОР
			|				КОГДА Продажи.Событие = &ПродажиРасчетыОплата
			|					ТОГДА Продажи.УДАЛИТЬСуммаВДОстаток
			|			КОНЕЦ КАК ПродажиРасчетыОплатаВДВР,
			|			ВЫБОР
			|				КОГДА Продажи.Событие = &ПродажиВозвратОтгрузка
			|					ТОГДА Продажи.УДАЛИТЬСуммаВДОстаток
			|			КОНЕЦ КАК ПродажиВозвратОтгрузкаВДВР,
			|			ВЫБОР
			|				КОГДА Продажи.Событие = &ПродажиВозвратОплата
			|					ТОГДА Продажи.УДАЛИТЬСуммаВДОстаток
			|			КОНЕЦ КАК ПродажиВозвратОплатаВДВР,
			|			0 КАК ПриобретенияРасчетыОтгрузкаВДВР,
			|			0 КАК ПриобретенияРасчетыОплатаВДВР,
			|			0 КАК ПриобретенияВозвратОтгрузкаВДВР,
			|			0 КАК ПриобретенияВозвратОплатаВДВР
			
			|		ИЗ
			|			РегистрНакопления.ПродажиНалоговыйУчет.Остатки(&МоментВремени, Организация = &Организация) КАК Продажи
			|		
			|		ОБЪЕДИНИТЬ ВСЕ
			|		
			|		ВЫБРАТЬ
			|			Приобретения.ДоговорКонтрагента,
			
			|			Приобретения.Сделка 						КАК Сделка,
			|			Приобретения.СтавкаНДС						КАК СтавкаНДС,
			|			Приобретения.ДляХозяйственнойДеятельности 	КАК ДляХозяйственнойДеятельности,
			|			Приобретения.ВидДеятельностиНДС 			КАК ВидДеятельностиНДС,
			|			Приобретения.Амортизируется 	  			КАК Амортизируется,
			
			|			Приобретения.ВозвратнаяТара,
			
			|			0,
			|			0,
			|			0,
			|			0,
			|			ВЫБОР
			|				КОГДА Приобретения.Событие = &ПриобретенияРасчетыОтгрузка
			|					ТОГДА Приобретения.СуммаВзаиморасчетовОстаток
			|			КОНЕЦ,
			|			ВЫБОР
			|				КОГДА Приобретения.Событие = &ПриобретенияРасчетыОплата
			|					ТОГДА Приобретения.СуммаВзаиморасчетовОстаток
			|			КОНЕЦ,
			|			ВЫБОР
			|				КОГДА Приобретения.Событие = &ПриобретенияВозвратОтгрузка
			|					ТОГДА Приобретения.СуммаВзаиморасчетовОстаток
			|			КОНЕЦ,
			|			ВЫБОР
			|				КОГДА Приобретения.Событие = &ПриобретенияВозвратОплата
			|					ТОГДА Приобретения.СуммаВзаиморасчетовОстаток
			|			КОНЕЦ,
			
			|			0,
			|			0,
			|			0,
			|			0,
			|			ВЫБОР
			|				КОГДА Приобретения.Событие = &ПриобретенияРасчетыОтгрузка
			|					ТОГДА Приобретения.СуммаНДСОстаток
			|			КОНЕЦ,
			|			ВЫБОР
			|				КОГДА Приобретения.Событие = &ПриобретенияРасчетыОплата
			|					ТОГДА Приобретения.СуммаНДСОстаток
			|			КОНЕЦ,
			|			ВЫБОР
			|				КОГДА Приобретения.Событие = &ПриобретенияВозвратОтгрузка
			|					ТОГДА Приобретения.СуммаНДСОстаток
			|			КОНЕЦ,
			|			ВЫБОР
			|				КОГДА Приобретения.Событие = &ПриобретенияВозвратОплата
			|					ТОГДА Приобретения.СуммаНДСОстаток
			|			КОНЕЦ,
			
			|			ВЫБОР
			|				КОГДА Приобретения.Событие = &ПриобретенияРасчетыОтгрузка
			|					ТОГДА Приобретения.СуммаНДСПропорциональноОстаток
			|			КОНЕЦ,
			|			ВЫБОР
			|				КОГДА Приобретения.Событие = &ПриобретенияРасчетыОплата
			|					ТОГДА Приобретения.СуммаНДСПропорциональноОстаток
			|			КОНЕЦ,
			|			ВЫБОР
			|				КОГДА Приобретения.Событие = &ПриобретенияВозвратОтгрузка
			|					ТОГДА Приобретения.СуммаНДСПропорциональноОстаток
			|			КОНЕЦ,
			|			ВЫБОР
			|				КОГДА Приобретения.Событие = &ПриобретенияВозвратОплата
			|					ТОГДА Приобретения.СуммаНДСПропорциональноОстаток
			|			КОНЕЦ,
			
			
			|			0,
			|			0,
			|			0,
			|			0,
			|			ВЫБОР
			|				КОГДА Приобретения.Событие = &ПриобретенияРасчетыОтгрузка
			|					ТОГДА Приобретения.УДАЛИТЬСуммаВРОстаток
			|			КОНЕЦ,
			|			ВЫБОР
			|				КОГДА Приобретения.Событие = &ПриобретенияРасчетыОплата
			|					ТОГДА Приобретения.УДАЛИТЬСуммаВРОстаток
			|			КОНЕЦ,
			|			ВЫБОР
			|				КОГДА Приобретения.Событие = &ПриобретенияВозвратОтгрузка
			|					ТОГДА Приобретения.УДАЛИТЬСуммаВРОстаток
			|			КОНЕЦ,
			|			ВЫБОР
			|				КОГДА Приобретения.Событие = &ПриобретенияВозвратОплата
			|					ТОГДА Приобретения.УДАЛИТЬСуммаВРОстаток
			|			КОНЕЦ
				
			|		ИЗ
			|			РегистрНакопления.ПриобретенияНалоговыйУчет.Остатки(&МоментВремени, Организация = &Организация) КАК Приобретения) КАК Данные
			|	
			|	СГРУППИРОВАТЬ ПО
			|		Данные.ДоговорКонтрагента,
			
			|		Данные.Сделка,
			|		Данные.СтавкаНДС,
			|		Данные.ДляХозяйственнойДеятельности,
			|		Данные.ВидДеятельностиНДС,
			|		Данные.Амортизируется,
			
			|		Данные.ВозвратнаяТара) КАК Данные
			|
			|УПОРЯДОЧИТЬ ПО
			|	ДоговорКонтрагента,
			|	ВозвратнаяТара";
							 
	ЗапросПоЗакрытию.УстановитьПараметр("МоментВремени",МоментВремени());
	ЗапросПоЗакрытию.УстановитьПараметр("Организация", СтруктураШапкиДокумента.Организация);
	
	ЗапросПоЗакрытию.УстановитьПараметр("ПродажиРасчетыОтгрузка", 	Перечисления.СобытияПродажиНалоговыйУчет.РеализацияПокупателю);
	ЗапросПоЗакрытию.УстановитьПараметр("ПродажиРасчетыОплата", 	Перечисления.СобытияПродажиНалоговыйУчет.ОплатаПокупателем);
	ЗапросПоЗакрытию.УстановитьПараметр("ПродажиВозвратОтгрузка", 	Перечисления.СобытияПродажиНалоговыйУчет.ВозвратОтПокупателя);
	ЗапросПоЗакрытию.УстановитьПараметр("ПродажиВозвратОплата", 	Перечисления.СобытияПродажиНалоговыйУчет.ВозвратОплатыПокупателю);
	ЗапросПоЗакрытию.УстановитьПараметр("ПриобретенияРасчетыОтгрузка",	Перечисления.СобытияПриобретенияНалоговыйУчет.ПоступлениеОтПоставщика);
	ЗапросПоЗакрытию.УстановитьПараметр("ПриобретенияРасчетыОплата",	Перечисления.СобытияПриобретенияНалоговыйУчет.ОплатаПоставщику);
	ЗапросПоЗакрытию.УстановитьПараметр("ПриобретенияВозвратОтгрузка",	Перечисления.СобытияПриобретенияНалоговыйУчет.ВозвратПоставщику);
	ЗапросПоЗакрытию.УстановитьПараметр("ПриобретенияВозвратОплата", 	Перечисления.СобытияПриобретенияНалоговыйУчет.ВозвратОплатыПоставщиком);
	
	Выборка = ЗапросПоЗакрытию.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если НЕ Выборка.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.Бартерный Тогда
			
			Если Выборка.ПродажиРасчеты 	<> 0 
			 ИЛИ Выборка.ПродажиРасчетыНДС  <> 0 
			 ИЛИ Выборка.ПродажиРасчетыОплатаВДВР <> 0 
			 ИЛИ Выборка.ПродажиРасчетыОтгрузкаВДВР <> 0 Тогда
			 
				СтрокаДвижений = ТаблицаДвиженийПродажи.Добавить();
				СтрокаДвижений.ДоговорКонтрагента 		= Выборка.ДоговорКонтрагента;
				
				СтрокаДвижений.Сделка					= Выборка.Сделка;
				СтрокаДвижений.СтавкаНДС 				= Выборка.СтавкаНДС;
				
				СтрокаДвижений.ВозвратнаяТара	  		= Выборка.ВозвратнаяТара;
				
				СтрокаДвижений.СуммаВзаиморасчетов 		= Выборка.ПродажиРасчеты;
				СтрокаДвижений.СуммаНДС 			    = Выборка.ПродажиРасчетыНДС;
				СтрокаДвижений.УдалитьСуммаВД 					= Выборка.ПродажиРасчетыОтгрузкаВДВР;
				
				СтрокаДвижений.Событие 					= Перечисления.СобытияПродажиНалоговыйУчет.РеализацияПокупателю;
				
				СтрокаДвижений = ТаблицаДвиженийПродажи.Добавить();
				СтрокаДвижений.ДоговорКонтрагента 		= Выборка.ДоговорКонтрагента;
				
				СтрокаДвижений.Сделка					= Выборка.Сделка;
				СтрокаДвижений.СтавкаНДС 				= Выборка.СтавкаНДС;
				
				СтрокаДвижений.ВозвратнаяТара	  		= Выборка.ВозвратнаяТара;

				СтрокаДвижений.СуммаВзаиморасчетов 	= Выборка.ПродажиРасчеты;
				СтрокаДвижений.СуммаНДС 			    = Выборка.ПродажиРасчетыНДС;
				СтрокаДвижений.УдалитьСуммаВД 					= Выборка.ПродажиРасчетыОплатаВДВР;

				СтрокаДвижений.Событие 					= Перечисления.СобытияПродажиНалоговыйУчет.ОплатаПокупателем;
			
			КонецЕсли; 
			
			Если Выборка.ПродажиВозврат 	<> 0 
			 ИЛИ Выборка.ПродажиВозвратНДС  <> 0 
			 ИЛИ Выборка.ПродажиВозвратОплатаВДВР <> 0 
			 ИЛИ Выборка.ПродажиВозвратОтгрузкаВДВР <> 0 Тогда
				
				СтрокаДвижений = ТаблицаДвиженийПродажи.Добавить();
				СтрокаДвижений.ДоговорКонтрагента 		= Выборка.ДоговорКонтрагента;
				
				СтрокаДвижений.Сделка					= Выборка.Сделка;
				СтрокаДвижений.СтавкаНДС 				= Выборка.СтавкаНДС;
				
				СтрокаДвижений.ВозвратнаяТара	  		= Выборка.ВозвратнаяТара;
				
				СтрокаДвижений.СуммаВзаиморасчетов 	= Выборка.ПродажиВозврат;
				СтрокаДвижений.СуммаНДС 			    = Выборка.ПродажиВозвратНДС;
				СтрокаДвижений.УдалитьСуммаВД 					= Выборка.ПродажиВозвратОтгрузкаВДВР;
				
				СтрокаДвижений.Событие 					= Перечисления.СобытияПродажиНалоговыйУчет.ВозвратОтПокупателя;
				
				СтрокаДвижений = ТаблицаДвиженийПродажи.Добавить();
				СтрокаДвижений.ДоговорКонтрагента 		= Выборка.ДоговорКонтрагента;
				
				СтрокаДвижений.Сделка					= Выборка.Сделка;
				СтрокаДвижений.СтавкаНДС 				= Выборка.СтавкаНДС;
				
				СтрокаДвижений.ВозвратнаяТара	  		= Выборка.ВозвратнаяТара;

				СтрокаДвижений.СуммаВзаиморасчетов 	= Выборка.ПродажиВозврат;
				СтрокаДвижений.СуммаНДС 			    = Выборка.ПродажиВозвратНДС;
				СтрокаДвижений.УдалитьСуммаВД 					= Выборка.ПродажиВозвратОплатаВДВР;
				
				СтрокаДвижений.Событие 					= Перечисления.СобытияПродажиНалоговыйУчет.ВозвратОплатыПокупателю;
			
			КонецЕсли;
			
			Если Выборка.ПриобретенияРасчеты 	 <> 0 
			 ИЛИ Выборка.ПриобретенияРасчетыНДС  <> 0 
			 ИЛИ Выборка.ПриобретенияРасчетыОплатаВДВР <> 0 
			 ИЛИ Выборка.ПриобретенияРасчетыОтгрузкаВДВР <> 0 
			 Тогда
				
				СтрокаДвижений = ТаблицаДвиженийПриобретение.Добавить();
				СтрокаДвижений.ДоговорКонтрагента 		= Выборка.ДоговорКонтрагента;
				
				СтрокаДвижений.Сделка						= Выборка.Сделка;
				СтрокаДвижений.СтавкаНДС 					= Выборка.СтавкаНДС;
				СтрокаДвижений.ДляХозяйственнойДеятельности	= Выборка.ДляХозяйственнойДеятельности;
				СтрокаДвижений.ВидДеятельностиНДС			= Выборка.ВидДеятельностиНДС;
				СтрокаДвижений.Амортизируется				= Выборка.Амортизируется;
				
				СтрокаДвижений.ВозвратнаяТара	  		= Выборка.ВозвратнаяТара;
				
				СтрокаДвижений.СуммаВзаиморасчетов 	= Выборка.ПриобретенияРасчеты;
				СтрокаДвижений.СуммаНДС 			    = Выборка.ПриобретенияРасчетыНДС;
				СтрокаДвижений.СуммаНДСПропорционально 			    = Выборка.ПриобретенияРасчетыНДСПропорционально;
				СтрокаДвижений.УдалитьСуммаВР 					= Выборка.ПриобретенияРасчетыОтгрузкаВДВР;
				
				
				СтрокаДвижений.Событие 					= Перечисления.СобытияПриобретенияНалоговыйУчет.ПоступлениеОтПоставщика;
				
				СтрокаДвижений = ТаблицаДвиженийПриобретение.Добавить();
				СтрокаДвижений.ДоговорКонтрагента 		= Выборка.ДоговорКонтрагента;
				
				СтрокаДвижений.Сделка						= Выборка.Сделка;
				СтрокаДвижений.СтавкаНДС 					= Выборка.СтавкаНДС;
				СтрокаДвижений.ДляХозяйственнойДеятельности	= Выборка.ДляХозяйственнойДеятельности;
				СтрокаДвижений.ВидДеятельностиНДС			= Выборка.ВидДеятельностиНДС;
				СтрокаДвижений.Амортизируется				= Выборка.Амортизируется;
				
				СтрокаДвижений.ВозвратнаяТара	  		= Выборка.ВозвратнаяТара;
				
				СтрокаДвижений.СуммаВзаиморасчетов 	= Выборка.ПриобретенияРасчеты;
				СтрокаДвижений.СуммаНДС 			    = Выборка.ПриобретенияРасчетыНДС;
				СтрокаДвижений.СуммаНДСПропорционально 			    = Выборка.ПриобретенияРасчетыНДСПропорционально;
				СтрокаДвижений.УдалитьСуммаВР 					= Выборка.ПриобретенияРасчетыОплатаВДВР;
				
				СтрокаДвижений.Событие 					= Перечисления.СобытияПриобретенияНалоговыйУчет.ОплатаПоставщику;
			
			КонецЕсли;
			
			Если Выборка.ПриобретенияВозврат 	 <> 0 
			 ИЛИ Выборка.ПриобретенияВозвратНДС  <> 0 
			 ИЛИ Выборка.ПриобретенияВозвратОплатаВДВР <> 0 
			 ИЛИ Выборка.ПриобретенияВозвратОтгрузкаВДВР <> 0 Тогда
				
				СтрокаДвижений = ТаблицаДвиженийПриобретение.Добавить();
				СтрокаДвижений.ДоговорКонтрагента 		= Выборка.ДоговорКонтрагента;
				
				СтрокаДвижений.Сделка						= Выборка.Сделка;
				СтрокаДвижений.СтавкаНДС 					= Выборка.СтавкаНДС;
				СтрокаДвижений.ДляХозяйственнойДеятельности	= Выборка.ДляХозяйственнойДеятельности;
				СтрокаДвижений.ВидДеятельностиНДС			= Выборка.ВидДеятельностиНДС;
				СтрокаДвижений.Амортизируется				= Выборка.Амортизируется;
				
				СтрокаДвижений.ВозвратнаяТара	  		= Выборка.ВозвратнаяТара;
				
				СтрокаДвижений.СуммаВзаиморасчетов 	= Выборка.ПриобретенияВозврат;
				СтрокаДвижений.СуммаНДС 			    = Выборка.ПриобретенияВозвратНДС;
				СтрокаДвижений.СуммаНДСПропорционально 			    = Выборка.ПриобретенияВозвратНДСПропорционально;
				СтрокаДвижений.УдалитьСуммаВР 					= Выборка.ПриобретенияВозвратОтгрузкаВДВР;
				
				СтрокаДвижений.Событие 					= Перечисления.СобытияПриобретенияНалоговыйУчет.ВозвратПоставщику;
				
				СтрокаДвижений = ТаблицаДвиженийПриобретение.Добавить();
				СтрокаДвижений.ДоговорКонтрагента 		= Выборка.ДоговорКонтрагента;
				
				СтрокаДвижений.Сделка						= Выборка.Сделка;
				СтрокаДвижений.СтавкаНДС 					= Выборка.СтавкаНДС;
				СтрокаДвижений.ДляХозяйственнойДеятельности	= Выборка.ДляХозяйственнойДеятельности;
				СтрокаДвижений.ВидДеятельностиНДС			= Выборка.ВидДеятельностиНДС;
				СтрокаДвижений.Амортизируется				= Выборка.Амортизируется;
				
				СтрокаДвижений.ВозвратнаяТара	  		= Выборка.ВозвратнаяТара;
				
				СтрокаДвижений.СуммаВзаиморасчетов 	= Выборка.ПриобретенияВозврат;
				СтрокаДвижений.СуммаНДС 			    = Выборка.ПриобретенияВозвратНДС;
				СтрокаДвижений.СуммаНДСПропорционально 			    = Выборка.ПриобретенияВозвратНДСПропорционально;
				СтрокаДвижений.УдалитьСуммаВР 					= Выборка.ПриобретенияВозвратОплатаВДВР;
				
				СтрокаДвижений.Событие 					= Перечисления.СобытияПриобретенияНалоговыйУчет.ВозвратОплатыПоставщиком;
			
			КонецЕсли;
			
		Иначе
			
			// бартер
			Если Выборка.БартерРасчеты 	 <> 0 
			 ИЛИ Выборка.БартерРасчетыНДС  <> 0 
			 ИЛИ Выборка.БартерПродажиРасчетыОтгрузкаВДВР <> 0 
			 ИЛИ Выборка.БартерПриобретенияРасчетыОтгрузкаВДВР <> 0 Тогда
				  
				СтрокаДвижений = ТаблицаДвиженийПродажи.Добавить();
				СтрокаДвижений.ДоговорКонтрагента 		= Выборка.ДоговорКонтрагента;
				
				СтрокаДвижений.Сделка						= Выборка.Сделка;
				СтрокаДвижений.СтавкаНДС 					= Выборка.СтавкаНДС;
				
				СтрокаДвижений.ВозвратнаяТара	  		= Выборка.ВозвратнаяТара;
				
				СтрокаДвижений.СуммаВзаиморасчетов 	= Выборка.БартерРасчеты;
				СтрокаДвижений.СуммаНДС 			    = Выборка.БартерРасчетыНДС;
				СтрокаДвижений.УдалитьСуммаВД 			= Выборка.БартерПродажиРасчетыОтгрузкаВДВР;
				
				СтрокаДвижений.Событие 					= Перечисления.СобытияПродажиНалоговыйУчет.РеализацияПокупателю;
				
				СтрокаДвижений = ТаблицаДвиженийПриобретение.Добавить();
				СтрокаДвижений.ДоговорКонтрагента 		= Выборка.ДоговорКонтрагента;
				
				СтрокаДвижений.Сделка						= Выборка.Сделка;
				СтрокаДвижений.СтавкаНДС 					= Выборка.СтавкаНДС;
				СтрокаДвижений.ДляХозяйственнойДеятельности	= Выборка.ДляХозяйственнойДеятельности;
				СтрокаДвижений.ВидДеятельностиНДС			= Выборка.ВидДеятельностиНДС;
				СтрокаДвижений.Амортизируется				= Выборка.Амортизируется;
				
				СтрокаДвижений.ВозвратнаяТара	  		= Выборка.ВозвратнаяТара;
				
				СтрокаДвижений.СуммаВзаиморасчетов 	= Выборка.БартерРасчеты;
				СтрокаДвижений.СуммаНДС 			    = Выборка.БартерРасчетыНДС;
				СтрокаДвижений.СуммаНДСПропорционально 			    = Выборка.БартерРасчетыНДСПропорционально;
				СтрокаДвижений.УдалитьСуммаВР 					= Выборка.БартерПриобретенияРасчетыОтгрузкаВДВР;
				
				СтрокаДвижений.Событие 					= Перечисления.СобытияПриобретенияНалоговыйУчет.ПоступлениеОтПоставщика;

			КонецЕсли;
			
			Если Выборка.БартерВозврат 	 <> 0 
			 ИЛИ Выборка.БартерВозвратНДС  <> 0 
			 ИЛИ Выборка.БартерПродажиВозвратОтгрузкаВДВР <> 0
			 ИЛИ Выборка.БартерПриобретенияВозвратОтгрузкаВДВР <> 0 Тогда
				  
				СтрокаДвижений = ТаблицаДвиженийПродажи.Добавить();
				СтрокаДвижений.ДоговорКонтрагента 		= Выборка.ДоговорКонтрагента;
				
				СтрокаДвижений.Сделка						= Выборка.Сделка;
				СтрокаДвижений.СтавкаНДС 					= Выборка.СтавкаНДС;
				
				СтрокаДвижений.ВозвратнаяТара	  		= Выборка.ВозвратнаяТара;
				
				СтрокаДвижений.СуммаВзаиморасчетов 	= Выборка.БартерВозврат;
				СтрокаДвижений.СуммаНДС 			    = Выборка.БартерВозвратНДС;
				СтрокаДвижений.УдалитьСуммаВД					= Выборка.БартерПродажиВозвратОтгрузкаВДВР;
				
				СтрокаДвижений.Событие 					= Перечисления.СобытияПродажиНалоговыйУчет.ВозвратОтПокупателя;
				
				СтрокаДвижений = ТаблицаДвиженийПриобретение.Добавить();
				СтрокаДвижений.ДоговорКонтрагента 		= Выборка.ДоговорКонтрагента;
				
				СтрокаДвижений.Сделка						= Выборка.Сделка;
				СтрокаДвижений.СтавкаНДС 					= Выборка.СтавкаНДС;
				СтрокаДвижений.ДляХозяйственнойДеятельности	= Выборка.ДляХозяйственнойДеятельности;
				СтрокаДвижений.ВидДеятельностиНДС			= Выборка.ВидДеятельностиНДС;
				СтрокаДвижений.Амортизируется				= Выборка.Амортизируется;
				
				СтрокаДвижений.ВозвратнаяТара	  		= Выборка.ВозвратнаяТара;
				
				СтрокаДвижений.СуммаВзаиморасчетов 		= Выборка.БартерВозврат;
				СтрокаДвижений.СуммаНДС 			    = Выборка.БартерВозвратНДС;
				СтрокаДвижений.СуммаНДСПропорционально  = Выборка.БартерВозвратНДСПропорционально;
				СтрокаДвижений.УдалитьСуммаВР 			= Выборка.БартерПриобретенияВозвратОтгрузкаВДВР;

				СтрокаДвижений.Событие 					= Перечисления.СобытияПриобретенияНалоговыйУчет.ВозвратПоставщику;

			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ТаблицаДвиженийПродажи.ЗаполнитьЗначения(СтруктураШапкиДокумента.Организация,"Организация");
	Если ТаблицаДвиженийПродажи.Количество() > 0 Тогда
		
		НаборДвиженийПродажи.мПериод            = СтруктураШапкиДокумента.Дата;
		НаборДвиженийПродажи.мТаблицаДвижений   = ТаблицаДвиженийПродажи;

		Если Не Отказ Тогда
			Движения.ПродажиНалоговыйУчет.ВыполнитьРасход();
		КонецЕсли;
		
	КонецЕсли;
	
	ТаблицаДвиженийПриобретение.ЗаполнитьЗначения(СтруктураШапкиДокумента.Организация,"Организация");
	Если ТаблицаДвиженийПриобретение.Количество() > 0 Тогда
		
		НаборДвиженийПриобртение.мПериод            = СтруктураШапкиДокумента.Дата;
		НаборДвиженийПриобртение.мТаблицаДвижений   = ТаблицаДвиженийПриобретение;

		Если Не Отказ Тогда
			Движения.ПриобретенияНалоговыйУчет.ВыполнитьРасход();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Выполняет движения по регистрам 
//
Процедура ДвиженияПоРегистрам(СтруктураШапкиДокумента, Отказ, Заголовок)
	
	СтруктураДопПараметров = Новый Структура;
	СтруктураДопПараметров.Вставить("СпособРасчетаСебестоимостиПроизводства", "");
	СтруктураДопПараметров.Вставить("РасчетПрямыхЗатратНомер", "");
	
	ЗаписьРасчетаСебестоимости = Движения.РасчетСебестоимостиПродукцици.ВыгрузитьКолонки();
	ЗаписьРасчетаСебестоимости.Колонки.Добавить("ДокументВыпуска"); 
	СтруктураДопПараметров.Вставить("ЗаписьРасчетаСебестоимости", ЗаписьРасчетаСебестоимости);
	ЗаписьРасчетаРаспределенияКосвенныхРасходов = Движения.РасчетРаспределенияКосвенныхРасходов.ВыгрузитьКолонки();
	СтруктураДопПараметров.Вставить("ЗаписьРасчетаКосвенныхРасходов", ЗаписьРасчетаРаспределенияКосвенныхРасходов);
	
	РаспределениеТЗР(СтруктураШапкиДокумента, Отказ, Заголовок); 
	
	// АМОРТИЗАЦИЯ
	// Начисление амортизации ОС
	НачислениеАмортизацииОС(СтруктураШапкиДокумента, Отказ, Заголовок);
	// Начисление амортизации НМА
	НачислениеАмортизацииНМА(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	// ПЕРЕОЦЕНКА
	ПереоценкаВалютныхСредств(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	//// КОРРЕКТИРОВКА СТОИМОСТИ НОМЕНКЛАТУРЫ
	КорректировкаСтоимостиНоменклатуры(СтруктураШапкиДокумента, СтруктураДопПараметров, Отказ, Заголовок);
	
	// СПИСАНИЕ РАСХОДОВ БУДУЩИХ ПЕРИОДОВ
	СписаниеРБП(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	// ПРОИЗВОДСТВО БУ
	РасчетСебестоимостиПродукции(СтруктураШапкиДокумента, СтруктураДопПараметров, Отказ, Заголовок);
	
	// ПЕРЕОЦЕНКА ЗАПАСОВ БУ
	ПереоценкаСтоимостиЗапасовБУ(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	// ТОРГОВЛЯ
	РасчетТорговойНаценкиПоПроданнымТоварам(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	// Закрытие регистров налогового учета (Продажи/ПриобретенияНалоговыйУчет)
	ЗакрытиеРегистровНалоговогоУчета(СтруктураШапкиДокумента, Отказ, Заголовок);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ


Процедура ОбработкаПроведения(Отказ)
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКПроведению(ЭтотОбъект);
	Если РучнаяКорректировка Тогда
		Возврат;
	КонецЕсли;
	
	
 	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента = ОбщегоНазначенияРед12.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = НСтр("ru='Проведение документа ""';uk='Проведення документа ""'") + СокрЛП(Ссылка) + """: ";
	
	СтруктураШапкиДокумента.Вставить("ОтражатьВБухгалтерскомУчете",    Ложь);

	
	СтруктураШапкиДокумента.Вставить("ЕстьНалогНаПрибыль",    	УчетнаяПолитика.ПлательщикНалогаНаПрибыль(СтруктураШапкиДокумента.Организация, СтруктураШапкиДокумента.Дата));
	СтруктураШапкиДокумента.Вставить("ЕстьНалогНаПрибыльДо2015",УчетнаяПолитика.ПлательщикНалогаНаПрибыльДо2015(СтруктураШапкиДокумента.Организация, СтруктураШапкиДокумента.Дата));
	СтруктураШапкиДокумента.Вставить("ЕстьНДС",    				УчетнаяПолитика.ПлательщикНДС(СтруктураШапкиДокумента.Организация, СтруктураШапкиДокумента.Дата));
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	СтруктураШапкиДокумента.Вставить("НеРаспределятьОПЗнаСебестоимостьПродукции", УчетнаяПолитика.НеРаспределятьОПЗнаСебестоимостьПродукции(СтруктураШапкиДокумента.Организация, СтруктураШапкиДокумента.Дата));
	Если ЗначениеЗаполнено(УчетнаяПолитика.НалоговоеНазначениеНераспределенныхПостоянныхОПЗ(СтруктураШапкиДокумента.Организация, СтруктураШапкиДокумента.Дата)) Тогда
		СтруктураШапкиДокумента.Вставить("НалоговоеНазначениеНераспределенныхПостоянныхОПЗ", УчетнаяПолитика.НалоговоеНазначениеНераспределенныхПостоянныхОПЗ(СтруктураШапкиДокумента.Организация, СтруктураШапкиДокумента.Дата));
	Иначе
		СтруктураШапкиДокумента.Вставить("НалоговоеНазначениеНераспределенныхПостоянныхОПЗ", Справочники.НалоговыеНазначенияАктивовИЗатрат.НКУ_НеХозДеятельность);
	КонецЕсли;
	
	СтруктураШапкиДокумента.Вставить("ВключатьСуммуДооценокОСВСоставНП", УчетнаяПолитика.ВключатьСуммуДооценокОСВСоставНП(СтруктураШапкиДокумента.Организация, СтруктураШапкиДокумента.Дата));

	мНачМесяца    = НачалоМесяца(Дата);
	мКонМесяца    = Дата;
	мНачКвартала 	= НачалоКвартала(Дата);
	мКонКвартала 	= КонецКвартала(Дата);
	мНачГода    	= НачалоГода(Дата);
	мНачГраница = Новый Граница(мНачМесяца, ВидГраницы.Включая);
	мКонГраница = Новый Граница(мКонМесяца, ВидГраницы.Включая);
	
	мКонКварталаВключая = Новый Граница(КонецКвартала(Дата), ВидГраницы.Включая);

	// Проверка ручной корректировки

	мПараметрыНалоговогоУчета	= УчетНДС.ПолучитьПараметрыНалоговогоУчета(мКонМесяца);
	
	мПроводкиБУ = Движения.Хозрасчетный;
	ПроведениеСервер.ЗаписатьНаборЗаписейБезЗамещенияТекущихДвижений(мПроводкиБУ);
	
	ПорядокПодразделенийСообщался = Ложь;
	ПорядокПеределовСообщался = Ложь;
	ТаблицаНеЗакрытыхПодразделений = Новый ТаблицаЗначений;
	ТаблицаНеЗакрытыхПодразделений.Колонки.Добавить("Подразделение");
	ТаблицаНеЗакрытыхПодразделений.Колонки.Добавить("СчетЗатрат");
	
	мКоэффициентМатериальнойСоставляющейРассчитан = Ложь; 
	
	Если НЕ Отказ Тогда
		ДвиженияПоРегистрам(СтруктураШапкиДокумента, Отказ, Заголовок);
	КонецЕсли;
	
	Движения.Хозрасчетный.ВыполнитьДействияПередЗаписьюДвижений();
	
	// ИНАГРО
	//Движения.Хозрасчетный.Записать(Ложь);
	ИНАГРО_Общий.ИНАГРО_ДвиженияЗатратыОрганизации_Приход(СтруктураШапкиДокумента, Движения);
	
	МассивНезаписанныхРегистров = Новый Массив;
	МассивНезаписанныхРегистров.Добавить("ПродажиНалоговыйУчет");
	МассивНезаписанныхРегистров.Добавить("ПриобретенияНалоговыйУчет");
	МассивНезаписанныхРегистров.Добавить("ПереоценкаОСБухгалтерскийУчет");
	
	// ИНАГРО ++
	МассивНезаписанныхРегистров.Добавить("ИНАГРО_ЗатратыОрганизаций");  
	МассивНезаписанныхРегистров.Добавить("ИНАГРО_ВыпускПродукцииОрганизации");  
	Если ИНАГРО_ОбщийВызовСервераПовтИсп.ЕстьБСПУ() Тогда
		МассивНезаписанныхРегистров.Добавить("ИНАГРО_ЖивотныеОрганизации");  
		МассивНезаписанныхРегистров.Добавить("ИНАГРО_РастенияОрганизации");
	КонецЕсли;
	МассивНезаписанныхРегистров.Добавить("ИНАГРО_РеализацияОрганизаций");
	МассивНезаписанныхРегистров.Добавить("ИНАГРО_ЗатратыНаВыпуск");
	// ИНАГРО --
	
	Для каждого ИмяРегистра из МассивНезаписанныхРегистров Цикл
		Если Движения[ИмяРегистра].Количество() > 0 Тогда
			Движения[ИмяРегистра].Записывать = Истина;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКОтменеПроведения(ЭтотОбъект);
	Движения.Записать();
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)

	Дата = НачалоДня(ОбщегоНазначенияБП.ПолучитьРабочуюДату());
	Ответственный = Пользователи.ТекущийПользователь();

КонецПроцедуры

Функция ПроверкаПовторовВидовОпераций(СтруктураШапкиДокумента) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("НачалоМесяца", мНачМесяца);
	Запрос.УстановитьПараметр("КонецМесяца",  мКонМесяца);
	Запрос.УстановитьПараметр("НачалоКвартала", мНачКвартала);
	Запрос.УстановитьПараметр("КонецКвартала",  мКонКвартала);
	Запрос.УстановитьПараметр("Организация",  СтруктураШапкиДокумента.Организация);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|			КОГДА ЗакрытиеМесяца.АмортизацияОС = ИСТИНА
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ),0) КАК АмортизацияОС,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|			КОГДА ЗакрытиеМесяца.АмортизацияНМА = ИСТИНА
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ),0) КАК АмортизацияНМА,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|			КОГДА ЗакрытиеМесяца.ПереоценкаВалютныхСредств = ИСТИНА
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ),0) КАК ПереоценкаВалютныхСредств,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|			КОГДА ЗакрытиеМесяца.КорректировкаСтоимостиНоменклатуры = ИСТИНА
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ),0) КАК КорректировкаСтоимостиНоменклатуры,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|			КОГДА ЗакрытиеМесяца.СписаниеРБП = ИСТИНА
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ),0) КАК СписаниеРБП,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|			КОГДА ЗакрытиеМесяца.РасчетСтоимостиПродукции = ИСТИНА
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ),0) КАК РасчетСтоимостиПродукции,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|			КОГДА ЗакрытиеМесяца.ПереоценкаСтоимостиЗапасовБУ = ИСТИНА
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ),0) КАК ПереоценкаСтоимостиЗапасовБУ,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|			КОГДА ЗакрытиеМесяца.РасчетТорговойНаценкиПоПроданнымТоварам = ИСТИНА
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ),0) КАК РасчетТорговойНаценкиПоПроданнымТоварам,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|			КОГДА ЗакрытиеМесяца.РаспределениеТЗР = ИСТИНА
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ),0) КАК РаспределениеТЗР
	|ИЗ
	|	Документ.ЗакрытиеМесяца КАК ЗакрытиеМесяца
	|ГДЕ
	|	ЗакрытиеМесяца.Ссылка <> &Ссылка И 
	|	ЗакрытиеМесяца.Организация = &Организация
	|	И ЗакрытиеМесяца.Дата >= &НачалоМесяца
	|	И ЗакрытиеМесяца.Дата <= &КонецМесяца
	|	И ЗакрытиеМесяца.Проведен
	|	И (НЕ ЗакрытиеМесяца.ПометкаУдаления)";
				   
	Результат = Запрос.Выполнить().Выгрузить();
	
	ТекстСообщения = "";
	
	Для Каждого Выборка Из Результат Цикл

		Если Выборка.АмортизацияОС >= 1 И АмортизацияОС Тогда
			ТекстСообщения = ТекстСообщения + НСтр("ru='Повторение операции Начисление амортизации ОС
|';uk='Повторення операції Нарахування амортизації ОЗ
|'");
		КонецЕсли;
		
	    Если Выборка.АмортизацияНМА >= 1 И АмортизацияНМА Тогда
			ТекстСообщения = ТекстСообщения + НСтр("ru='Повторение операции Начисление амортизации НМА
|';uk='Повторення операції Нарахування амортизації НМА
|'");
		КонецЕсли;
		
		Если Выборка.ПереоценкаВалютныхСредств >= 1 И ПереоценкаВалютныхСредств Тогда
			ТекстСообщения = ТекстСообщения + НСтр("ru='Повторение операции Переоценка валютных средств
|';uk='Повторення операції Переоцінка валютних коштів
|'");
		КонецЕсли;
				
		Если Выборка.КорректировкаСтоимостиНоменклатуры >= 1 И КорректировкаСтоимостиНоменклатуры Тогда
			ТекстСообщения = ТекстСообщения + НСтр("ru='Повторение операции Корректировка фактической стоимости номенклатуры
|';uk='Повторення операції Коригування фактичної вартості номенклатури
|'");
		КонецЕсли;
		
		Если Выборка.СписаниеРБП >= 1 И СписаниеРБП Тогда
			ТекстСообщения = ТекстСообщения + НСтр("ru='Повторение операции Списание расходов будущих периодов
|';uk='Повторення операції Списання витрат майбутніх періодів
|'");
		КонецЕсли;
		
		Если Выборка.РасчетСтоимостиПродукции >= 1 И РасчетСтоимостиПродукции Тогда
			ТекстСообщения = ТекстСообщения + НСтр("ru='Повторение операции Расчет и корректировка себестоимости продукции (услуг)
|';uk='Повторення операції Розрахунок і коригування собівартості продукції (послуг)
|'");
		КонецЕсли;
		
		Если Выборка.ПереоценкаСтоимостиЗапасовБУ >= 1 И ПереоценкаСтоимостиЗапасовБУ Тогда
			ТекстСообщения = ТекстСообщения + НСтр("ru='Повторение операции Переоценка стоимости запасов (БУ)
|';uk='Повторення операції Переоцінка вартості запасів (БО)
|'");
		КонецЕсли;
		
		Если Выборка.РасчетТорговойНаценкиПоПроданнымТоварам >= 1 И РасчетТорговойНаценкиПоПроданнымТоварам Тогда
			ТекстСообщения = ТекстСообщения + НСтр("ru='Повторение операции Расчет торговой наценки по проданным товарам
|';uk='Повторення операції Розрахунок торгової націнки по проданих товарах
|'");
		КонецЕсли;

        Если (Выборка.РаспределениеТЗР >= 1) И РаспределениеТЗР Тогда
		
			ТекстСообщения = ТекстСообщения + НСтр("ru='Повторение операции Распределение ТЗР
|';uk='Повторення операції Розподіл ТЗВ
|'");
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТекстСообщения;
	
Конецфункции

Функция ПолучитьПоказателиНормальнойМощности(СтруктураПараметров)
	Запрос = Новый Запрос();
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ПоказателиПриНормальнойМощностиСрезПоследних.Подразделение,
	               |	ПоказателиПриНормальнойМощностиСрезПоследних.СпособРаспределения,
	               |	ПоказателиПриНормальнойМощностиСрезПоследних.БазаРаспределения,
	               |	ПоказателиПриНормальнойМощностиСрезПоследних.СуммаПостоянныхЗатрат
	               |ИЗ
	               |	РегистрСведений.ПоказателиПриНормальнойМощности.СрезПоследних(&Дата, Организация = &Организация) КАК ПоказателиПриНормальнойМощностиСрезПоследних";
	
	Запрос.УстановитьПараметр("Дата" , СтруктураПараметров.Дата);
	Запрос.УстановитьПараметр("Организация" , СтруктураПараметров.Организация);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
	
КонецФункции

Функция ПолучитьИмяРеквизитаБазыРаспределения(МетодРаспределения)
										   
	Если МетодРаспределения = Перечисления.СпособыРаспределенияКосвенныхРасходов.МатериальныеЗатраты Тогда
		ИмяРеквБазы = "Мат";
	ИначеЕсли МетодРаспределения = Перечисления.СпособыРаспределенияКосвенныхРасходов.ОплатаТруда Тогда
		ИмяРеквБазы = "ЗП";
	ИначеЕсли МетодРаспределения = Перечисления.СпособыРаспределенияКосвенныхРасходов.ПлановаяСебестоимость Тогда
		ИмяРеквБазы = "План";
	ИначеЕсли МетодРаспределения = Перечисления.СпособыРаспределенияКосвенныхРасходов.ОбъемВыпуска Тогда
		ИмяРеквБазы = "Выпуск";
	ИначеЕсли МетодРаспределения = Перечисления.СпособыРаспределенияКосвенныхРасходов.ПрямыеЗатраты Тогда
		ИмяРеквБазы = "Прямые";
	ИначеЕсли МетодРаспределения = Перечисления.СпособыРаспределенияКосвенныхРасходов.ОтдельныеСтатьиПрямыхЗатрат Тогда
		ИмяРеквБазы = "ПрямыеСписок";	
	ИначеЕсли МетодРаспределения = Перечисления.СпособыРаспределенияКосвенныхРасходов.НеРаспределяется Тогда	
		ИмяРеквБазы = "";
	Иначе
		ИмяРеквБазы = Неопределено;
	КонецЕсли;
	
	Возврат ИмяРеквБазы;
КонецФункции


// Процедура - обработчик события "ОбработкаЗаполнения"
//
Процедура ОбработкаЗаполнения(ДанныеЗаполнения)
	
	ЗаполнениеДокументов.Заполнить(ЭтотОбъект, ДанныеЗаполнения);
	
КонецПроцедуры

#КонецЕсли

