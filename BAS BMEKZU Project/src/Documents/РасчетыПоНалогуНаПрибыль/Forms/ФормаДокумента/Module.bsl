#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	
	Если Параметры.Ключ.Пустая() Тогда
		ПодготовитьФормуНаСервере();
	КонецЕсли;
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	ПодготовитьФормуНаСервере();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	УстановитьСостояниеДокумента();
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)

	Если НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДатаДокумента) Тогда
		// Изменение времени не влияет на поведение документа.
		ТекущаяДатаДокумента = Объект.Дата;
		Возврат;
	КонецЕсли;

	// Общие проверки условий по датам.
	ТребуетсяВызовСервера = ОбщегоНазначенияБПКлиент.ТребуетсяВызовСервераПриИзмененииДатыДокумента(Объект.Дата, 
		ТекущаяДатаДокумента);
		
	// Если определили, что изменение даты может повлиять на какие-либо параметры, 
	// то передаем обработку на сервер.
	Если ТребуетсяВызовСервера Тогда
		ДатаПриИзмененииНаСервере();
	КонецЕсли;
	
	// Запомним новую дату документа.
	ТекущаяДатаДокумента = Объект.Дата;

КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)

	ОрганизацияПриИзмененииСервер();

КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования,ЭтотОбъект,"Объект.Комментарий");

КонецПроцедуры

&НаКлиенте
Процедура СчетДоходовПриИзменении(Элемент)

	УстановитьЗаголовкиИДоступностьСубконто(ЭтаФорма, Объект.СчетДоходовПоНалогуНаПрибыль, "Доходов");
	
	ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3",
		"СубконтоДоходов1", "СубконтоДоходов2", "СубконтоДоходов3");
	ПоляОбъекта.Вставить("Организация", Объект.Организация);
	БухгалтерскийУчетКлиентСервер.ПриИзмененииСчета(Объект.СчетДоходовПоНалогуНаПрибыль, Объект, ПоляОбъекта);
	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "Доходов", "СчетДоходовПоНалогуНаПрибыль");
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоДоходовПриИзменении(Элемент)
	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "Доходов", "СчетДоходовПоНалогуНаПрибыль");
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоДоходовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	СписокПараметров = СписокПараметровВыбораСубконто(ЭтаФорма, Объект, "СубконтоДоходов%Индекс%", "СчетДоходовПоНалогуНаПрибыль");
	ОбщегоНазначенияБПКлиент.НачалоВыбораЗначенияСубконто(ЭтаФорма, Элемент, СтандартнаяОбработка, СписокПараметров);

КонецПроцедуры

&НаКлиенте
Процедура СчетРасходовПриИзменении(Элемент)

	УстановитьЗаголовкиИДоступностьСубконто(ЭтаФорма, Объект.СчетРасходовПоНалогуНаПрибыль, "Расходов");
	
	ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3",
		"СубконтоРасходов1", "СубконтоРасходов2", "СубконтоРасходов3");
	ПоляОбъекта.Вставить("Организация", Объект.Организация);
	БухгалтерскийУчетКлиентСервер.ПриИзмененииСчета(Объект.СчетРасходовПоНалогуНаПрибыль, Объект, ПоляОбъекта);
	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "Расходов", "СчетРасходовПоНалогуНаПрибыль");
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоРасходовПриИзменении(Элемент)
	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "Расходов", "СчетРасходовПоНалогуНаПрибыль");
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоРасходовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	СписокПараметров = СписокПараметровВыбораСубконто(ЭтаФорма, Объект, "СубконтоРасходов%Индекс%", "СчетРасходовПоНалогуНаПрибыль");
	ОбщегоНазначенияБПКлиент.НачалоВыбораЗначенияСубконто(ЭтаФорма, Элемент, СтандартнаяОбработка, СписокПараметров);

КонецПроцедуры

&НаКлиенте
Процедура РассчитыватьОНАиОНОПриИзменении(Элемент)
	
	Если (НЕ Объект.РассчитыватьОНАиОНО) И (Объект.Статьи.Количество() > 0) Тогда
		
		ПоказатьВопрос(Новый ОписаниеОповещения("РассчитыватьОНАиОНОПриИзмененииЗавершение", ЭтотОбъект), НСтр("ru='Табличная часть будет очищена. Продолжить?';uk='Таблична частина буде очищена. Продовжити?'"), РежимДиалогаВопрос.ДаНет);
        Возврат;
	
	КонецЕсли; 
	
	РассчитыватьОНАиОНОПриИзмененииФрагмент();
КонецПроцедуры

&НаКлиенте
Процедура РассчитыватьОНАиОНОПриИзмененииЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Ответ = РезультатВопроса;
    Если Ответ = КодВозвратаДиалога.Да Тогда
        
        Объект.Статьи.Очистить();
        
    Иначе
        
        Объект.РассчитыватьОНАиОНО = Истина;
        
    КонецЕсли;
    
    РассчитыватьОНАиОНОПриИзмененииФрагмент();

КонецПроцедуры

&НаКлиенте
Процедура РассчитыватьОНАиОНОПриИзмененииФрагмент()
    
    УправлениеФормой(ЭтаФорма);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСтатьи

&НаСервере
Процедура СтатьиВидНалоговойДеятельностиПриИзмененииНаСервере(ТекущаяСтрока)
	
	ТекущаяСтрока.СтавкаНалога = ПолучитьСтавкуНалога(Объект.Организация, Объект.Дата, ТекущаяСтрока.ВидНалоговойДеятельности);
	ВычислитьОНАиОНО(ТекущаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура СтатьиВидНалоговойДеятельностиПриИзменении(Элемент)
	
	ДанныеСтрокаТаблицы = Новый Структура("ВидНалоговойДеятельности, СтавкаНалога, ОценкаСтатьиПоБУ, ОценкаСтатьиПоНУ, СуммаВременнойРазницы, СуммаОНА, СуммаОНО");
	ЗаполнитьЗначенияСвойств(ДанныеСтрокаТаблицы, Элементы.Статьи.ТекущиеДанные);

	СтатьиВидНалоговойДеятельностиПриИзмененииНаСервере(ДанныеСтрокаТаблицы);
	
	ЗаполнитьЗначенияСвойств(Элементы.Статьи.ТекущиеДанные, ДанныеСтрокаТаблицы);
	
КонецПроцедуры

&НаКлиенте
Процедура СтатьиСтавкаНалогаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Статьи.ТекущиеДанные;
	ВычислитьОНАиОНО(ТекущаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура СтатьиОценкаСтатьиПоБУПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Статьи.ТекущиеДанные;
	ВычислитьОНАиОНО(ТекущаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура СтатьиОценкаСтатьиПоНУПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Статьи.ТекущиеДанные;
	ВычислитьОНАиОНО(ТекущаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура СтатьиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока И НЕ ДокументДо2015 Тогда
		
		ТекущаяСтрока = Элементы.Статьи.ТекущиеДанные;	
		ТекущаяСтрока.СтавкаНалога = ПолучитьСтавкуНалога(Объект.Организация, Объект.Дата); 
		
	КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗаполнитьПоНастройкамСтатейОНАОНО(Команда)
	
	Если Объект.Статьи.Количество() > 0 Тогда 
		ПоказатьВопрос(Новый ОписаниеОповещения("ЗаполнитьПоНастройкамСтатейОНАОНОЗавершение", ЭтотОбъект), НСтр("ru='Табличная часть будет очищена. Продолжить?';uk='Таблична частина буде очищена. Продовжити?'"), РежимДиалогаВопрос.ДаНет);
        Возврат; 
		
	КонецЕсли;
	
	ЗаполнитьПоНастройкамСтатейОНАОНОФрагмент();
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоНастройкамСтатейОНАОНОЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
        
        Возврат;
        
    КонецЕсли; 
    
    
    ЗаполнитьПоНастройкамСтатейОНАОНОФрагмент();

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоНастройкамСтатейОНАОНОФрагмент()
    
    Объект.Статьи.Очистить();
    
    ЗаполнитьПоНастройкамСтатейОНАОНОНаСервере();

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоНастройкамСтатейОНАОНОНаСервере()
	
	// Рассчитаем суммовую оценку предопределенных статей
	ГраницаЗаполнения = Новый Граница(КонецМесяца(Объект.Дата), ВидГраницы.Включая);
	
	// Основные средства
	МассивСчетовБУ = Новый Массив(4);
	МассивСчетовБУ[0] = ПланыСчетов.Хозрасчетный.ОсновныеСредства;
	МассивСчетовБУ[1] = ПланыСчетов.Хозрасчетный.ДругиеНеоборотныеМатериальныеАктивыГруппа;
	МассивСчетовБУ[2] = ПланыСчетов.Хозрасчетный.ИзносОсновныхСредств;
	МассивСчетовБУ[3] = ПланыСчетов.Хозрасчетный.ИзносДругихНеоборотныхМатериальныхАктивов;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	СУММА(ХозрасчетныйОстатки.СуммаОстаток) КАК СуммаОстатокБУ,
	               |	СУММА(ХозрасчетныйОстатки.СуммаНУОстаток) КАК СуммаОстатокНУ,
	               |	ХозрасчетныйОстатки.НалоговоеНазначение.ВидНалоговойДеятельности КАК ВидНалоговойДеятельности
	               |ИЗ
	               |	РегистрБухгалтерии.Хозрасчетный.Остатки(&Дата, Счет В ИЕРАРХИИ (&МассивСчетовБУ), , Организация = &Организация) КАК ХозрасчетныйОстатки
	               |ГДЕ
	               |	ХозрасчетныйОстатки.НалоговоеНазначение.ВидНалоговойДеятельности <> &НеоблагаемаяВНД
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ХозрасчетныйОстатки.НалоговоеНазначение.ВидНалоговойДеятельности";
					  
	Запрос.УстановитьПараметр("Дата", ГраницаЗаполнения);
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("МассивСчетовБУ", МассивСчетовБУ);
	Запрос.УстановитьПараметр("НеоблагаемаяВНД", Справочники.ВидыНалоговойДеятельности.НеОблагаемая);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
	
		Строка = Объект.Статьи.Добавить();
		Строка.Статья 					= Справочники.СтатьиОтсроченныхНалоговыхАктивовИОбязательств.ОсновныеСредства;
		Строка.ВидНалоговойДеятельности	= Выборка.ВидНалоговойДеятельности;
		Строка.ОценкаСтатьиПоБУ			= Выборка.СуммаОстатокБУ;
		Строка.ОценкаСтатьиПоНУ			= Выборка.СуммаОстатокНУ;
		
		Строка.СтавкаНалога = ПолучитьСтавкуНалога(Объект.Организация, Объект.Дата, Строка.ВидНалоговойДеятельности);
		ВычислитьОНАиОНО(Строка);
	
	КонецЦикла; 
	
	// Нематериальные активы
	МассивСчетовБУ = Новый Массив(2);
	МассивСчетовБУ[0] = ПланыСчетов.Хозрасчетный.НематериальныеАктивы;
	МассивСчетовБУ[1] = ПланыСчетов.Хозрасчетный.НакопленнаяАмортизацияНематериальныхАктивов;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	СУММА(ХозрасчетныйОстатки.СуммаОстаток) КАК СуммаОстатокБУ,
	               |	СУММА(ХозрасчетныйОстатки.СуммаНУОстаток) КАК СуммаОстатокНУ,
	               |	ХозрасчетныйОстатки.НалоговоеНазначение.ВидНалоговойДеятельности КАК ВидНалоговойДеятельности
	               |ИЗ
	               |	РегистрБухгалтерии.Хозрасчетный.Остатки(&Дата, Счет В ИЕРАРХИИ (&МассивСчетовБУ), , Организация = &Организация) КАК ХозрасчетныйОстатки
	               |ГДЕ
	               |	ХозрасчетныйОстатки.НалоговоеНазначение.ВидНалоговойДеятельности <> &НеоблагаемаяВНД
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ХозрасчетныйОстатки.НалоговоеНазначение.ВидНалоговойДеятельности";
					  
	Запрос.УстановитьПараметр("Дата", ГраницаЗаполнения);
	
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("МассивСчетовБУ", МассивСчетовБУ);
	Запрос.УстановитьПараметр("НеоблагаемаяВНД", Справочники.ВидыНалоговойДеятельности.НеОблагаемая);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
	
		Строка = Объект.Статьи.Добавить();
		Строка.Статья 					= Справочники.СтатьиОтсроченныхНалоговыхАктивовИОбязательств.НематериальныеАктивы;
		Строка.ВидНалоговойДеятельности	= Выборка.ВидНалоговойДеятельности;
		Строка.ОценкаСтатьиПоБУ			= Выборка.СуммаОстатокБУ;
		Строка.ОценкаСтатьиПоНУ			= Выборка.СуммаОстатокНУ;
		
		Строка.СтавкаНалога = ПолучитьСтавкуНалога(Объект.Организация, Объект.Дата, Строка.ВидНалоговойДеятельности);
		ВычислитьОНАиОНО(Строка);
	
	КонецЦикла; 
	
	// Рассчитаем суммовую оценку настраиваемых статей
	
	// Сформируем массив статей из тех, у которых в настройках заданы счета
	
	Запрос = Новый	Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	СтатьиОтсроченныхНалоговыхАктивовИОбязательств.Ссылка КАК Статья,
	               |	СтатьиОтсроченныхНалоговыхАктивовИОбязательств.СчетБУ
	               |ИЗ
	               |	Справочник.СтатьиОтсроченныхНалоговыхАктивовИОбязательств КАК СтатьиОтсроченныхНалоговыхАктивовИОбязательств
	               |ГДЕ
	               |	СтатьиОтсроченныхНалоговыхАктивовИОбязательств.СчетБУ <> &СчетБУПустаяСсылка
	               |	И СтатьиОтсроченныхНалоговыхАктивовИОбязательств.ПометкаУдаления = ЛОЖЬ";
	Запрос.УстановитьПараметр("Дата", Объект.Дата);
	Запрос.УстановитьПараметр("СчетБУПустаяСсылка", ПланыСчетов.Хозрасчетный.ПустаяСсылка());
	
	ТаблицаСтатей	= Запрос.Выполнить().Выгрузить();
	МассивСтатей 	= ТаблицаСтатей.ВыгрузитьКолонку("Статья");
	МассивСчетовБУ	= ТаблицаСтатей.ВыгрузитьКолонку("СчетБУ");
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ОстаткиБУ.Статья,
	               |	ОстаткиБУ.ВидНалоговойДеятельности,
	               |	СУММА(ОстаткиБУ.СуммаОстатокБУ) КАК СуммаОстатокБУ,
	               |	СУММА(ОстаткиБУ.СуммаОстатокНУ) КАК СуммаОстатокНУ
	               |ИЗ
	               |	(ВЫБРАТЬ
	               |		СтатьиОтсроченныхНалоговыхАктивовИОбязательств.Ссылка КАК Статья,
	               |		ХозрасчетныйОстатки.СуммаОстаток КАК СуммаОстатокБУ,
	               |		ХозрасчетныйОстатки.СуммаНУОстаток КАК СуммаОстатокНУ,
	               |		ХозрасчетныйОстатки.НалоговоеНазначение.ВидНалоговойДеятельности КАК ВидНалоговойДеятельности
	               |	ИЗ
	               |		Справочник.СтатьиОтсроченныхНалоговыхАктивовИОбязательств КАК СтатьиОтсроченныхНалоговыхАктивовИОбязательств
	               |			ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.Остатки(&Дата, Счет В (&МассивСчетовБУ), , Организация = &Организация) КАК ХозрасчетныйОстатки
	               |			ПО СтатьиОтсроченныхНалоговыхАктивовИОбязательств.СчетБУ = ХозрасчетныйОстатки.Счет
	               |	ГДЕ
	               |		СтатьиОтсроченныхНалоговыхАктивовИОбязательств.Ссылка В(&МассивСтатей)) КАК ОстаткиБУ
	               |ГДЕ
	               |	ОстаткиБУ.ВидНалоговойДеятельности <> &НеоблагаемаяВНД
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ОстаткиБУ.Статья,
	               |	ОстаткиБУ.ВидНалоговойДеятельности
	               |
	               |ИМЕЮЩИЕ
	               |	(СУММА(ОстаткиБУ.СуммаОстатокБУ) <> 0
	               |		ИЛИ СУММА(ОстаткиБУ.СуммаОстатокНУ) <> 0)";
				   
	Запрос.УстановитьПараметр("Дата", ГраницаЗаполнения);
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("МассивСтатей", МассивСтатей);
	Запрос.УстановитьПараметр("МассивСчетовБУ", МассивСчетовБУ);
	Запрос.УстановитьПараметр("КонецСледующегоПериода", КонецМесяца(ДобавитьМесяц(Объект.Дата, 1)));
	Запрос.УстановитьПараметр("НеоблагаемаяВНД", Справочники.ВидыНалоговойДеятельности.НеОблагаемая);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
	
		Строка = Объект.Статьи.Добавить();
		Строка.Статья 					= Выборка.Статья;
		Строка.ВидНалоговойДеятельности	= Выборка.ВидНалоговойДеятельности;
		Строка.ОценкаСтатьиПоБУ			= Выборка.СуммаОстатокБУ;
		Строка.ОценкаСтатьиПоНУ			= Выборка.СуммаОстатокНУ;
		
		Строка.СтавкаНалога = ПолучитьСтавкуНалога(Объект.Организация, Объект.Дата, Строка.ВидНалоговойДеятельности);
		ВычислитьОНАиОНО(Строка);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ПодготовитьФормуНаСервере()

	ТекущаяДатаДокумента 			= Объект.Дата;
	
	УстановитьЗаголовкиИДоступностьСубконто(ЭтаФорма, Объект.СчетДоходовПоНалогуНаПрибыль, "Доходов");
	УстановитьЗаголовкиИДоступностьСубконто(ЭтаФорма, Объект.СчетРасходовПоНалогуНаПрибыль, "Расходов");
	УправлениеФормой(ЭтаФорма);
	
	УстановитьСостояниеДокумента();
	
КонецПроцедуры

&НаСервере
Процедура ДатаПриИзмененииНаСервере()

	ОбщегоНазначенияБПКлиентСервер.УстановитьПараметрыФункциональныхОпцийФормыДокумента(ЭтаФорма);
	
	ДокументДо2015 = Объект.Дата < '2015 01 01';
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииСервер()

	ОбщегоНазначенияБПКлиентСервер.УстановитьПараметрыФункциональныхОпцийФормыДокумента(ЭтаФорма);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция СписокПараметровВыбораСубконто(Форма, ПараметрыОбъекта, ШаблонИмяПоляОбъекта, ИмяСчета)

	СписокПараметров = Новый Структура;
	Для Индекс = 1 По 3 Цикл
		ИмяПоля = СтрЗаменить(ШаблонИмяПоляОбъекта, "%Индекс%", Индекс);
		Если ТипЗнч(ПараметрыОбъекта[ИмяПоля]) = Тип("СправочникСсылка.Контрагенты") Тогда
			СписокПараметров.Вставить("Контрагент", ПараметрыОбъекта[ИмяПоля]);
		ИначеЕсли ТипЗнч(ПараметрыОбъекта[ИмяПоля]) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
			СписокПараметров.Вставить("ДоговорКонтрагента", ПараметрыОбъекта[ИмяПоля]);
		ИначеЕсли ТипЗнч(ПараметрыОбъекта[ИмяПоля]) = Тип("СправочникСсылка.Номенклатура") Тогда
			СписокПараметров.Вставить("Номенклатура", ПараметрыОбъекта[ИмяПоля]);
		ИначеЕсли ТипЗнч(ПараметрыОбъекта[ИмяПоля]) = Тип("СправочникСсылка.Склады") Тогда
			СписокПараметров.Вставить("Склад", ПараметрыОбъекта[ИмяПоля]);
		КонецЕсли;
	КонецЦикла;
	СписокПараметров.Вставить("Организация", Форма.Объект.Организация);
	СписокПараметров.Вставить("СчетУчета"  , Форма.Объект[ИмяСчета]);
	
	Возврат СписокПараметров;

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ИзменитьПараметрыВыбораПолейСубконто(Форма, Суффикс, ИмяСчета)

	ПараметрыДокумента = СписокПараметровВыбораСубконто(Форма, Форма.Объект,
		"Субконто" + Суффикс + "%Индекс%", ИмяСчета);
	
	БухгалтерскийУчетКлиентСервер.ИзменитьПараметрыВыбораПолейСубконто(
		Форма, 
		Форма.Объект, 
		"Субконто" + Суффикс + "%Индекс%", 
		"Субконто" + Суффикс + "%Индекс%", 
		ПараметрыДокумента);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьЗаголовкиИДоступностьСубконто(Форма, Счет, Постфикс = "")

	ПоляФормы = Новый Структура("Субконто1, Субконто2, Субконто3",
		"Субконто" + Постфикс + "1",
		"Субконто" + Постфикс + "2",
		"Субконто" + Постфикс + "3");
		
	ЗаголовкиПолей = Новый Структура("Субконто1, Субконто2, Субконто3",
		"ЗаголовокСубконто" + Постфикс + "1",
		"ЗаголовокСубконто" + Постфикс + "2",
		"ЗаголовокСубконто" + Постфикс + "3");
	
	БухгалтерскийУчетКлиентСервер.ПриВыбореСчета(Счет, Форма, ПоляФормы, ЗаголовкиПолей);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ВычислитьОНАиОНО(ТекущаяСтрока)
	
	ТекущаяСтрока.СуммаВременнойРазницы	= ТекущаяСтрока.ОценкаСтатьиПоНУ - ТекущаяСтрока.ОценкаСтатьиПоБУ;
	
	Если ТекущаяСтрока.СуммаВременнойРазницы > 0 Тогда
	
		ТекущаяСтрока.СуммаОНА	= ТекущаяСтрока.СуммаВременнойРазницы * ТекущаяСтрока.СтавкаНалога / 100;
		ТекущаяСтрока.СуммаОНО	= 0;
		
	Иначе
		
		ТекущаяСтрока.СуммаОНА	= 0;
		ТекущаяСтрока.СуммаОНО	= - ТекущаяСтрока.СуммаВременнойРазницы * ТекущаяСтрока.СтавкаНалога / 100;
	
	КонецЕсли;
	
КонецПроцедуры

// Вычисляет ставку налога в строке по виду налоговой деятельности
//
// Параметры
//  ТекущаяСтрока - строка табличной части Статьи
//
&НаСервереБезКонтекста
Функция ПолучитьСтавкуНалога(Организация, Дата, ВидНалоговойДеятельности = Неопределено)
	
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Возврат 0;
	КонецЕсли;
	
	// Заполним ставку налога будущим значением
	КонецСледующегоПериода 		= КонецМесяца(ДобавитьМесяц(Дата, 1));
	
	Запрос = Новый Запрос();
	
	Запрос.УстановитьПараметр("Дата", КонецСледующегоПериода);
	СписокОрганизаций = Новый СписокЗначений;
	СписокОрганизаций.Добавить(Организация);
	СписокОрганизаций.Добавить(Справочники.Организации.ПустаяСсылка());
	Запрос.УстановитьПараметр("СписокОрганизаций", СписокОрганизаций);
	
	Запрос.УстановитьПараметр("ПустаяОрганизация", Справочники.Организации.ПустаяСсылка());
	
	СписокВНД = Новый СписокЗначений;
	Если ЗначениеЗаполнено(ВидНалоговойДеятельности) Тогда
		СписокВНД.Добавить(ВидНалоговойДеятельности);
	КонецЕсли;
	СписокВНД.Добавить(Справочники.ВидыНалоговойДеятельности.ПустаяСсылка());
	Запрос.УстановитьПараметр("СписокВНД", СписокВНД);
	
	Запрос.УстановитьПараметр("ПустойВНД", Справочники.ВидыНалоговойДеятельности.ПустаяСсылка());
	
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	СтавкиНалогаНаПрибыльСрезПоследних.Ставка,
	|	ВЫБОР
	|		КОГДА СтавкиНалогаНаПрибыльСрезПоследних.Организация = &ПустаяОрганизация
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ЕстьОрганизация,
	|	ВЫБОР
	|		КОГДА СтавкиНалогаНаПрибыльСрезПоследних.ВидНалоговойДеятельности = &ПустойВНД
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ЕстьВНД
	|ИЗ
	|	РегистрСведений.СтавкиНалогаНаПрибыль.СрезПоследних(
	|		&Дата,
	|		Организация В (&СписокОрганизаций)
	|		    И ВидНалоговойДеятельности В (&СписокВНД)) КАК СтавкиНалогаНаПрибыльСрезПоследних
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЕстьОрганизация,
	|	ЕстьВНД";
	
	Результат = 0;
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Результат = Выборка.Ставка;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции// ПолучитьСтавкуНалога()

&НаСервере
Процедура УстановитьСостояниеДокумента()
	СостояниеДокумента = ОбщегоНазначенияБП.СостояниеДокумента(Объект);
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Элементы = Форма.Элементы;
	Объект   = Форма.Объект;
	
	Элементы.ГруппаСтатьи.Видимость = Объект.РассчитыватьОНАиОНО;
	Элементы.СтатьиВидНалоговойДеятельности.Видимость = Форма.ДокументДо2015;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ БСП

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти