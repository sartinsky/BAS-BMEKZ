#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
		
	Если Параметры.Ключ.Пустая() Тогда
		ПодготовитьФормуНаСервере();		
		// ИНАГРО++
		Параметры.Свойство("IDСтроки", ИНАГРО_IDСтроки);
		ИНАГРО_ЭтоНовый = Истина;
	Иначе
		ИНАГРО_ЭтоНовый = Ложь;
		// ИНАГРО-- 			
	КонецЕсли; 	
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// выводим команду печати в зависимости от вида операции в документе
	УстановитьВидимостьКомандПечати(); // ИНАГРО

КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	ПодготовитьФормуНаСервере();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Если ТипЗнч(ВладелецФормы) = Тип("УправляемаяФорма")
		И ВладелецФормы.ИмяФормы = "Справочник.ОсновныеСредства.Форма.ФормаЭлемента" Тогда
		
		Если ПараметрыЗаписи.РежимЗаписи <> РежимЗаписиДокумента.Запись Тогда
			Оповестить("ИзмененаИнформацияОС", ВладелецФормы.Параметры.Ключ);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ИсточникВыбора.ИмяФормы = "Обработка.ПодборОсновныхСредств.Форма.Форма" Тогда
		ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение);
	ИначеЕсли ИсточникВыбора.ИмяФормы = "РегистрСведений.СоставКомиссий.Форма.ФормаВыбора" Тогда
		ЗаполнитьЗначенияСвойств(Объект, ВыбранноеЗначение);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ПодготовитьФормуНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	ОбщегоНазначенияБПКлиент.ОбработкаОповещенияФормыДокумента(ЭтаФорма, Объект.Ссылка, ИмяСобытия, Параметр, Источник);
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии() // ИНАГРО
	
	Если ИНАГРО_ОбщийВызовСервераПовтИсп.ЕстьБСПУ() Тогда
		
		Если НЕ Объект.Ссылка.Пустая() И ЗначениеЗаполнено(Объект.ИНАГРО_ДокументОперативногоУчета) И ИНАГРО_ЭтоНовый = Истина Тогда
			
			СтруктураВозврата = Новый Структура;
			СтруктураВозврата.Вставить("ДокументСсылка", Объект.Ссылка);
			СтруктураВозврата.Вставить("IDСтроки",  	 ИНАГРО_IDСтроки); 		
			
			Если ТипЗнч(Объект.ИНАГРО_ДокументОперативногоУчета) = Тип("ДокументСсылка.ИНАГРО_ПеремещениеБиологическихАктивов") Тогда	
				Оповестить("ПеремещениеБА_ВозвратДокументСсылкаОС_БА", СтруктураВозврата, ЭтаФорма);
			ИначеЕсли ТипЗнч(Объект.ИНАГРО_ДокументОперативногоУчета) = Тип("ДокументСсылка.ИНАГРО_СписаниеБиологическихАктивов") Тогда
				Оповестить("СписаниеБА_ВозвратДокументСсылкаОС", СтруктураВозврата, ЭтаФорма);
			КонецЕсли;  
			
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	УстановитьФункциональныеОпцииФормы();
	
	Если ЗначениеЗаполнено(Объект.Организация) И Объект.ОС.Количество() > 0 Тогда
		ЗаполнитьИнвентарныеНомераОС();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	Если НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДатаДокумента) Тогда
		// Изменение времени не влияет на поведение документа.
		ТекущаяДатаДокумента = Объект.Дата;
		Возврат;
	КонецЕсли;

	ТребуетсяВызовСервера = Ложь;

	// Проверим наличие строк в табличной части.
	Если Объект.ОС.Количество() > 0 Тогда
		ТребуетсяВызовСервера = НЕ ЗначениеЗаполнено(МаксПериодПервоначальныхСведенийОС) 
			ИЛИ (МаксПериодПервоначальныхСведенийОС >= Объект.Дата);
	КонецЕсли;
		
	// Если определили, что изменение даты может повлиять на какие-либо параметры, 
	// то передаем обработку на сервер.
	Если ТребуетсяВызовСервера Тогда
		ДатаПриИзмененииНаСервере();
	КонецЕсли;
	
	// Запомним новую дату документа.
	ТекущаяДатаДокумента = Объект.Дата;
	
КонецПроцедуры

&НаКлиенте
Процедура СчетСписанияБУПриИзменении(Элемент)
	
	УстановитьЗаголовкиИДоступностьСубконто(ЭтаФорма, Объект.СчетСписанияБУ);
	
	ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3",
		"СубконтоБУ1", "СубконтоБУ2", "СубконтоБУ3");
	ПоляОбъекта.Вставить("Организация",   Объект.Организация);
	
	БухгалтерскийУчетКлиентСервер.ПриИзмененииСчета(Объект.СчетСписанияБУ, Объект, ПоляОбъекта);
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования,ЭтотОбъект,"Объект.Комментарий");
	
КонецПроцедуры

&НаКлиенте
Процедура СписыватьОСВременнаяНалоговаяРазницаПриИзменении(Элемент)
	УправлениеФормой(ЭтаФорма);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТабличнойЧастиОС

&НаКлиенте
Процедура ОСОсновноеСредствоПриИзменении(Элемент)
	
	СтрокаТЧ = Элементы.ОС.ТекущиеДанные;
	ОсновноеСредство = СтрокаТЧ.ОсновноеСредство;
	Если НЕ ЗначениеЗаполнено(ОсновноеСредство) Тогда
		СтрокаТЧ.ИнвентарныйНомер = "";
	Иначе
		СтруктураСведений 					= СведенияОбИнвентарномНомереОС(ОсновноеСредство, Объект.Организация, Объект.Дата);
		СтрокаТЧ.ИнвентарныйНомер 			= СтруктураСведений.ИнвентарныйНомер;
		МаксПериодПервоначальныхСведенийОС 	= Макс(МаксПериодПервоначальныхСведенийОС, СтруктураСведений.Период);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОССтоимостьБУПриИзменении(Элемент)
	РассчитатьВычисляемыеПоляПоСтроке(Элементы.ОС.ТекущиеДанные);
КонецПроцедуры

&НаКлиенте
Процедура ОСАмортизацияБУПриИзменении(Элемент)
	РассчитатьВычисляемыеПоляПоСтроке(Элементы.ОС.ТекущиеДанные);
КонецПроцедуры

&НаКлиенте
Процедура ОСАмортизацияЗаМесяцБУПриИзменении(Элемент)
	РассчитатьВычисляемыеПоляПоСтроке(Элементы.ОС.ТекущиеДанные);
КонецПроцедуры

&НаКлиенте
Процедура ОССтоимостьНУПриИзменении(Элемент)
	РассчитатьВычисляемыеПоляПоСтроке(Элементы.ОС.ТекущиеДанные);
КонецПроцедуры

&НаКлиенте
Процедура ОСАмортизацияНУПриИзменении(Элемент)
	РассчитатьВычисляемыеПоляПоСтроке(Элементы.ОС.ТекущиеДанные);
КонецПроцедуры

&НаКлиенте
Процедура ОСАмортизацияЗаМесяцНУПриИзменении(Элемент)
	РассчитатьВычисляемыеПоляПоСтроке(Элементы.ОС.ТекущиеДанные);
КонецПроцедуры

&НаКлиенте
Процедура ОСОсновноеСредствоНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка) // ИНАГРО
	
	Если ИНАГРО_ОбщийВызовСервераПовтИсп.ЕстьБСПУ() И ЗначениеЗаполнено(Объект.ИНАГРО_ДокументОперативногоУчета) Тогда	
		
		СтандартнаяОбработка = Ложь;
		
		МодульИНАГРО_БиологическиеАктивы = ОбщегоНазначенияКлиент.ОбщийМодуль("ИНАГРО_БиологическиеАктивы");

		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("Ссылка", МодульИНАГРО_БиологическиеАктивы.СформироватьСписокОС(Объект.ИНАГРО_БиологическийАктив, Объект.ИНАГРО_Склад, Объект.Дата));
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Отбор", ПараметрыОтбора);
		ОткрытьФорму("Справочник.ОсновныеСредства.ФормаВыбора", ПараметрыФормы, Элемент);
		
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗаполнитьПоНаименованию(Команда)
	
	ОсновноеСредство = УправлениеВнеоборотнымиАктивамиКлиент.ПолучитьОСДляЗаполнениеПоНаименованию(
		ПараметрыЗаполненияПоНаименованию(ЭтаФорма));
	
	Если ЗначениеЗаполнено(ОсновноеСредство) Тогда
		
		ЗаполнитьПоНаименованиюСервер(ОсновноеСредство);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДляСпискаОС(Команда)

	Если Объект.Проведен Тогда
		ПоказатьПредупреждение(Неопределено, НСтр("ru='Заполнение возможно только в непроведенном документе';uk='Заповнення можливе тільки в непроведеному документі'"), 60);
		Возврат;
	КонецЕсли;

	ОчиститьСообщения();

	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		ТекстСообщения = ОбщегоНазначенияБПКлиентСервер.ПолучитьТекстСообщения(, , НСтр("ru='Организация';uk='Організація'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Объект.Организация");
		Возврат;
	КонецЕсли;

	ТекстВопроса = НСтр("ru='При заполнении существующие данные будут пересчитаны!
|Продолжить?';uk='При заповненні існуючі дані будуть перераховані!
|Продовжити?'");
	ПоказатьВопрос(Новый ОписаниеОповещения("ЗаполнитьДляСпискаОСЗавершение", ЭтотОбъект), ТекстВопроса, РежимДиалогаВопрос.ДаНет);

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДляСпискаОСЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Ответ = РезультатВопроса;
    Если Ответ = КодВозвратаДиалога.Нет Тогда
        Возврат;
    КонецЕсли;
    
    ЗаполнитьДляСпискаОССервер();

КонецПроцедуры

&НаКлиенте
Процедура ВыбратьСоставКомиссии(Команда)
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимВыбора", Истина);

	ПараметрыФормы.Вставить("Отбор", Новый Структура("Организация", Объект.Организация));
	ОткрытьФорму("РегистрСведений.СоставКомиссий.Форма.ФормаВыбора", ПараметрыФормы, ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура Подбор(Команда)
	
	ПараметрыФормы = Новый Структура;
	Если Объект.ОС.Количество() > 0 Тогда
		ПараметрыФормы.Вставить("АдресОСВХранилище", ПоместитьОСВХранилище());
	КонецЕсли;
	
	ОткрытьФорму("Обработка.ПодборОсновныхСредств.Форма.Форма", ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСуммыОСВременнаяНалоговаяРазница(Команда)
	
	Если Объект.Проведен Тогда
		
		ПоказатьПредупреждение(Неопределено, НСтр("ru='Заполнение возможно только в непроведенном документе';uk='Заповнення можливе тільки в непроведеному документі'"), 60);
		Возврат;
		
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(Объект.ОсновноеСредствоВременнаяНалоговаяРазница) Тогда
		
		ПоказатьПредупреждение(Неопределено, НСтр("ru='Не выбран ОС ""Временная налоговая разница""';uk='Не вибрано ОЗ ""Тимчасова податкова різниця""'"), 60);
		Возврат;
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		
		ПоказатьПредупреждение(Неопределено, НСтр("ru='Не выбрана организация';uk='Не обрана організація'"), 60);
		Возврат;
		
	КонецЕсли;
	
	ЗаполнитьОСВременнаяНалоговаяРазница();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПоДокументуБА(Команда)

	Если ЗначениеЗаполнено(Объект.ИНАГРО_ДокументОперативногоУчета) Тогда
		
		ОбновитьПоДокументуБАСервер(Объект.ИНАГРО_ДокументОперативногоУчета);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьПоДокументуБАСервер(ИНАГРО_ДокументОперативногоУчета)
	
	ОбъектБА = ИНАГРО_ДокументОперативногоУчета.ПолучитьОбъект();
	НайденнаяСтрока = ОбъектБА.ЖивотныеАмортизируемые.Найти(Объект.Ссылка,"ДокументОС");
	
	Если НайденнаяСтрока <> Неопределено Тогда
		Объект.ИНАГРО_БиологическийАктив = НайденнаяСтрока.Номенклатура;
		Объект.ИНАГРО_Склад = НайденнаяСтрока.Склад;
		Объект.ИНАГРО_Количество = НайденнаяСтрока.Количество;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ПодготовитьФормуНаСервере()
	
	УстановитьФункциональныеОпцииФормы();
	
	ТекущаяДатаДокумента = Объект.Дата;

	УстановитьЗаголовкиИДоступностьСубконто(ЭтаФорма, Объект.СчетСписанияБУ);
	
	ЗаполнитьДобавленныеКолонкиТаблиц();
	
	УправлениеФормой(ЭтаФорма);

	УстановитьСостояниеДокумента();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСостояниеДокумента()
	
	СостояниеДокумента = ОбщегоНазначенияБП.СостояниеДокумента(Объект);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьФункциональныеОпцииФормы()

	ОбщегоНазначенияБПКлиентСервер.УстановитьПараметрыФункциональныхОпцийФормыДокумента(ЭтаФорма);
	
	ПлательщикНалогаНаПрибыль  	= УчетнаяПолитика.ПлательщикНалогаНаПрибыль(Объект.Организация, Объект.Дата);
	ПлательщикНалогаНаПрибыльДо2015  	= УчетнаяПолитика.ПлательщикНалогаНаПрибыльДо2015(Объект.Организация, Объект.Дата);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)

	Элементы = Форма.Элементы;
	Объект   = Форма.Объект;

	Элементы.ГруппаПанельОСВременнаяНалоговаяРазница.Видимость = Объект.СписыватьОСВременнаяНалоговаяРазница; 
	Элементы.ЗаполнитьСуммыОСВременнаяНалоговаяРазница.Видимость = Объект.СписыватьОСВременнаяНалоговаяРазница; 
	
	Элементы.НалоговоеНазначениеДоходовИЗатрат.Видимость = Форма.ПлательщикНалогаНаПрибыльДо2015;
	
	Элементы.ГруппаДанныеОперативногоУчета.Видимость = ЗначениеЗаполнено(Объект.ИНАГРО_ДокументОперативногоУчета); // ИНАГРО
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДобавленныеКолонкиТаблиц()

	Для каждого Строка Из Объект.ОС Цикл
		
		РассчитатьВычисляемыеПоляПоСтроке(Строка);
		
	КонецЦикла;

	ЗаполнитьИнвентарныеНомераОС();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьЗаголовкиИДоступностьСубконто(Форма, Счет)
	
	ПоляФормы = Новый Структура("Субконто1, Субконто2, Субконто3",
		"СубконтоБУ1", "СубконтоБУ2", "СубконтоБУ3");

	ЗаголовкиПолей = Новый Структура("Субконто1, Субконто2, Субконто3",
		"ЗаголовокСубконто1", "ЗаголовокСубконто2", "ЗаголовокСубконто3");
	
	БухгалтерскийУчетКлиентСервер.ПриВыбореСчета(Счет, Форма, ПоляФормы, ЗаголовкиПолей);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьИнвентарныеНомераОС()
	
	ТаблицаОС = Объект.ОС.Выгрузить();

	ТаблицаНомеров = УчетОС.ПолучитьТаблицуИнвентарныхНомеровОС(ТаблицаОС,
		Объект.Организация, Объект.Дата);

	ТаблицаОС.ЗагрузитьКолонку(ТаблицаНомеров.ВыгрузитьКолонку("ИнвентарныйНомер"), "ИнвентарныйНомер");
	Объект.ОС.Загрузить(ТаблицаОС);
	
	// Запомним максимальную дату первоначальных сведений ОС
	ТаблицаНомеров.Сортировать("Период");
	Если ТаблицаНомеров.Количество() > 0 Тогда
		МаксПериодПервоначальныхСведенийОС = ТаблицаНомеров[ТаблицаНомеров.Количество() - 1].Период;
	Иначе
		МаксПериодПервоначальныхСведенийОС = '0001-01-01';
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СведенияОбИнвентарномНомереОС(ОсновноеСредство, Организация, Дата)

	Возврат УчетОС.СведенияОбИнвентарномНомереОС(ОсновноеСредство, Организация, Дата);

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПараметрыЗаполненияПоНаименованию(Форма)
	
	Результат = Новый Структура;
	Результат.Вставить("Форма", Форма);
	Результат.Вставить("Объект", Форма.Объект);
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьПоНаименованиюСервер(Знач ОсновноеСредство)
	
	УчетОС.ДозаполнитьТабличнуюЧастьОсновнымиСредствамиПоНаименованию(
		ПараметрыЗаполненияПоНаименованию(ЭтаФорма), ОсновноеСредство);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДляСпискаОССервер()

	Если НЕ УчетнаяПолитика.Существует(Объект.Организация, Объект.Дата) Тогда
		ТекстСообщения = НСтр("ru='Не задана учетная политика организации %1 на %2.';uk='Не задана облікова політика організації %1 на %2.'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ТекстСообщения, Объект.Организация, Формат(Объект.Дата, "ДФ=dd.MM.yyyy"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;

	УправлениеНеоборотнымиАктивами.ЗаполнитьТабличнуюЧастьОсновныхСредств(Объект.Дата, Объект.ОС, Объект.Организация, ПлательщикНалогаНаПрибыль);
	
	Для Каждого Строка Из Объект.ОС Цикл
		РассчитатьВычисляемыеПоляПоСтроке(Строка);
	КонецЦикла;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РассчитатьВычисляемыеПоляПоСтроке(Строка)

	Строка.ОставшаясяСтоимостьБУ = Строка.СтоимостьБУ - Строка.АмортизацияБУ - Строка.АмортизацияЗаМесяцБУ;
	Строка.ОставшаясяСтоимостьНУ = Строка.СтоимостьНУ - Строка.АмортизацияНУ - Строка.АмортизацияЗаМесяцНУ;

КонецПроцедуры

&НаСервере
Функция ПоместитьОСВХранилище()
	
	ТаблицаОС = Объект.ОС.Выгрузить(, "НомерСтроки, ОсновноеСредство");
	Возврат ПоместитьВоВременноеХранилище(ТаблицаОС);
	
КонецФункции

&НаСервере
Процедура ОбработкаВыбораПодборНаСервере(Знач ВыбранноеЗначение)
	
	ДобавленныеСтроки = УчетОС.ОбработатьПодборОсновныхСредств(Объект.ОС, ВыбранноеЗначение);
	
	ЗаполнитьДобавленныеКолонкиТаблиц();

КонецПроцедуры

&НаСервере
Процедура ДатаПриИзмененииНаСервере()

	УстановитьФункциональныеОпцииФормы();
	
	УправлениеФормой(ЭтаФорма);
	
	ЗаполнитьИнвентарныеНомераОС();
	
КонецПроцедуры

&НаСервере
// Процедура заполняет данные для ОСВременнаяНалоговаяРазница
//
Процедура ЗаполнитьОСВременнаяНалоговаяРазница()

	Счет1091 	= ПланыСчетов.Хозрасчетный.ДругиеОсновныеСредства; 
	Счет131 	= ПланыСчетов.Хозрасчетный.ИзносОсновныхСредств; 
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ОсновноеСредствоВременнаяНалоговаяРазница"	, Объект.ОсновноеСредствоВременнаяНалоговаяРазница);
	Запрос.УстановитьПараметр("СубконтоОС", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства);
	Запрос.УстановитьПараметр("Организация"	, Объект.Организация);
	Запрос.УстановитьПараметр("Период"		, Объект.Дата);
	Запрос.УстановитьПараметр("Счет1091" 	, Счет1091);
	Запрос.УстановитьПараметр("Счет131"		, Счет131);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПредварительныйЗапрос.ОС КАК ОС,
	|	СУММА(ПредварительныйЗапрос.СтоимостьНУ) КАК СтоимостьНУ,
	|	СУММА(ПредварительныйЗапрос.АмортизацияНУ) КАК АмортизацияНУ
	|ИЗ
	|	(ВЫБРАТЬ
	|		СтоимостьБУ.Субконто1 КАК ОС,
	|		СтоимостьБУ.СуммаНУОстатокДт КАК СтоимостьНУ,
	|		0 КАК АмортизацияНУ
	|	ИЗ
	|		РегистрБухгалтерии.Хозрасчетный.Остатки(
	|				&Период,
	|				Счет = &Счет1091,
	|				&СубконтоОС,
	|				Организация = &Организация
	|					И Субконто1 = &ОсновноеСредствоВременнаяНалоговаяРазница) КАК СтоимостьБУ
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		АмортизацияБУ.Субконто1,
	|		0,
	|		АмортизацияБУ.СуммаНУОстатокКт
	|	ИЗ
	|		РегистрБухгалтерии.Хозрасчетный.Остатки(
	|				&Период,
	|				Счет = &Счет131,
	|				&СубконтоОС,
	|				Организация = &Организация
	|					И Субконто1 = &ОсновноеСредствоВременнаяНалоговаяРазница) КАК АмортизацияБУ) КАК ПредварительныйЗапрос
	|
	|СГРУППИРОВАТЬ ПО
	|	ПредварительныйЗапрос.ОС";
	
	ТЗ = Запрос.Выполнить().Выгрузить();
	
	Если ТЗ.Количество() > 0 Тогда
		СтрокаТЗ = ТЗ[0];
		Объект.АмортизацияНУВременнаяНалоговаяРазница = СтрокаТЗ.АмортизацияНУ;
		Объект.ОстаточнаяСтоимостьНУВременнаяНалоговаяРазница = СтрокаТЗ.СтоимостьНУ - СтрокаТЗ.АмортизацияНУ;
	КонецЕсли;	

КонецПроцедуры // КоманднаяПанельСоставОСЗаполнить()

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ БСП

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры

&НаСервере
// выводим команду печати в зависимости от вида документа
//
Процедура УстановитьВидимостьКомандПечати() // ИНАГРО
	
	Если ИНАГРО_ОбщийВызовСервераПовтИсп.ЕстьБСПУ() Тогда
		
		ЭтоСписаниеЖивотных = Ложь;
		ЭтоСписаниеРастений = Ложь;
		ЭтоСписаниеОС		= Ложь;
		
		Если ЗначениеЗаполнено(Объект.ИНАГРО_ДокументОперативногоУчета) Тогда			
			Если    Объект.ИНАГРО_ДокументОперативногоУчета.ВидОперации = Перечисления.ИНАГРО_ВидыОперацийСписаниеБА.СписаниеЖивотных
				ИЛИ	Объект.ИНАГРО_ДокументОперативногоУчета.ВидОперации = Перечисления.ИНАГРО_ВидыОперацийПеремещениеБА.ВыбраковкаСОсновногоСтада Тогда
				ЭтоСписаниеЖивотных = Истина;
			Иначе
				ЭтоСписаниеРастений = Истина;
			КонецЕсли;
		Иначе	
			ЭтоСписаниеОС = Истина;
		КонецЕсли;
		
		Для Каждого Команда Из Команды Цикл   
			ИмяКомандыПечати = Элементы.Найти(Команда.Имя);
			Если Команда.Заголовок = НСтр("ru='Акт списания долгосрочных животных (ф.ДБАСГ-4)';uk='Акт списання довгострокових тварин (ф.ДБАСГ-4)'") И ИмяКомандыПечати <> Неопределено Тогда
				ИмяКомандыПечати.Видимость = ЭтоСписаниеЖивотных;
			ИначеЕсли Команда.Заголовок =  НСтр("ru='Акт списания многолетних насаждений (ф.ДБАСГ-3)';uk='Акт списання багаторічних насаджень (ф.ДБАСГ-3)'")  И ИмяКомандыПечати <> Неопределено Тогда
				ИмяКомандыПечати.Видимость = ЭтоСписаниеРастений;
			ИначеЕсли Команда.Заголовок =  НСтр("ru='Форма ОЗ-3';uk='Форма ОЗ-3'") Тогда
				ИмяКомандыПечати.Видимость = ЭтоСписаниеОС;
			КонецЕсли;  		
		КонецЦикла;
		
	КонецЕсли;

КонецПроцедуры 

// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти