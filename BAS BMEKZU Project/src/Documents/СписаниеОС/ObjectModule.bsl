#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

Перем АмортизацияБА Экспорт; // ИНАГРО
	
///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Процедура определяет параметры учетной политики
//
Процедура ПодготовитьПараметрыУчетнойПолитики(СтруктураШапкиДокумента, Отказ, Заголовок)
	
	СтруктураШапкиДокумента.Вставить("ЕстьНалогНаПрибыль"             , УчетнаяПолитика.ПлательщикНалогаНаПрибыль(СтруктураШапкиДокумента.Организация, КонецМесяца(СтруктураШапкиДокумента.Дата)));
	СтруктураШапкиДокумента.Вставить("ЕстьНалогНаПрибыльДо2015"		  , УчетнаяПолитика.ПлательщикНалогаНаПрибыльДо2015(СтруктураШапкиДокумента.Организация, КонецМесяца(СтруктураШапкиДокумента.Дата)));
	СтруктураШапкиДокумента.Вставить("ЕстьНДС"                        , УчетнаяПолитика.ПлательщикНДС(СтруктураШапкиДокумента.Организация, КонецМесяца(СтруктураШапкиДокумента.Дата)));
	
	
КонецПроцедуры // ПодготовитьПараметрыУчетнойПолитики()

// Выполняет движения по регистрам 
//
Процедура ДвиженияПоРегистрам(СтруктураШапкиДокумента,ТаблицаПоОС, ТаблицаМестонахождений, Отказ, Заголовок)

	ДвиженияПоРегистрамРегл(СтруктураШапкиДокумента, ТаблицаПоОС, ТаблицаМестонахождений, Отказ, Заголовок);

	ФормированиеДвиженияОСВременнаяНалоговаяРазница(СтруктураШапкиДокумента, Отказ, Заголовок)
	
КонецПроцедуры

Процедура ДвиженияПоРегистрамРегл(СтруктураШапкиДокумента, ТаблицаПоОС, ТаблицаМестонахождений, Отказ, Заголовок)
	
	ДатаДока       = Дата;
	ТекОрганизация = СтруктураШапкиДокумента.Организация;
    НомерЖурнала   = НСтр("ru='ОС';uk='ОЗ'",Локализация.КодЯзыкаИнформационнойБазы());

	УправлениеНеоборотнымиАктивами.ДополнитьТабличнуюЧастьСведениямиОбОСБухНалогРегл(МоментВремени(), ТаблицаПоОС,
	                                                  СтруктураШапкиДокумента, 
													  Отказ, Заголовок);

	Если Отказ Тогда
		
		Возврат;
		
	КонецЕсли;								
	
	СостояниеОС             = Движения.СостоянияОСОрганизаций;
	СобытияОС               = Движения.СобытияОСОрганизаций;
	НачислениеАмортизацииБУ = Движения.НачислениеАмортизацииОСБухгалтерскийУчет;
	НачислениеАмортизацииНУ = Движения.НачислениеАмортизацииОСНалоговыйУчет;
	ПроводкиБУ              = Движения.Хозрасчетный;
	ПереоценкаОСБУ 			= Движения.ПереоценкаОСБухгалтерскийУчет;
	
	// Подготовим таблицу с данными по амортизации для начисления амортизации по направлениям затрат
	ТабАмортизации = Новый ТаблицаЗначений;
	ТабАмортизации.Колонки.Добавить("НаправлениеАмортизации",
	                                Новый ОписаниеТипов("СправочникСсылка.СпособыОтраженияРасходовПоАмортизации"));
	ТабАмортизации.Колонки.Добавить("ОбъектУчета", 
	                                Новый ОписаниеТипов("СправочникСсылка.ОсновныеСредства"));
	ТабАмортизации.Колонки.Добавить("Сумма", ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповЧисла(15, 2));
	ТабАмортизации.Колонки.Добавить("СуммаНУ", ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповЧисла(15, 2));
	ТабАмортизации.Колонки.Добавить("СчетАмортизации");
	ТабАмортизации.Колонки.Добавить("НалоговоеНазначение", 		Новый ОписаниеТипов("СправочникСсылка.НалоговыеНазначенияАктивовИЗатрат"));
	ТабАмортизации.Колонки.Добавить("Местонахождение",			Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"));
	
	ВидНалоговойДеятельностиНеОблагаемая = Справочники.ВидыНалоговойДеятельности.НеОблагаемая;	
	
	Для Каждого СтрокаОС Из ТаблицаПоОС Цикл
		

		
		Если СтрокаОС.АмортизацияЗаМесяцБУ > 0 ИЛИ СтрокаОС.АмортизацияЗаМесяцНУ > 0 Тогда
			 
			НоваяСтрока = ТабАмортизации.Добавить();
			
			НоваяСтрока.Сумма                  	= СтрокаОС.АмортизацияЗаМесяцБУ;
			НоваяСтрока.СуммаНУ                	= СтрокаОС.АмортизацияЗаМесяцНУ;
			НоваяСтрока.ОбъектУчета            	= СтрокаОС.ОсновноеСредство;
			НоваяСтрока.НаправлениеАмортизации 	= СтрокаОС.НаправлениеБУ;
			НоваяСтрока.СчетАмортизации        	= СтрокаОС.СчетНачисленияАмортизацииБУ;
			НоваяСтрока.НалоговоеНазначение 	= СтрокаОС.НалоговоеНазначение_ОС;
			
			ТекМестонахождение 					= ТаблицаМестонахождений.Найти(СтрокаОС.ОсновноеСредство,"ОС_БУ");
			НоваяСтрока.Местонахождение 		= ?(ТекМестонахождение = Неопределено, Неопределено, ТекМестонахождение.Местонахождение_БУ);
			
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Вызов процедуры списания амортизации по направлениям.
	// Создаются движения по начислению амортизации.
	УправлениеНеоборотнымиАктивами.ПолучитьРаспределениеАмортизацииПоНаправлениямРегл(ПроводкиБУ,
	                                                   Отказ,
													   Заголовок,
													   ТабАмортизации,
													   СтруктураШапкиДокумента,
													   НомерЖурнала,
													   НСтр("ru='Начисление амортизации ОС';uk='Нарахування амортизації ОЗ'",Локализация.КодЯзыкаИнформационнойБазы()));

	НеОблНДСДеятельность = Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяХозДеятельность;
	
	// Создание движений документа по БУ
	Для Каждого СтрокаТЧ Из ТаблицаПоОС Цикл

		ТекОС = СтрокаТЧ.ОсновноеСредство;

		НепроизводственныйОС = (СтрокаТЧ.НалоговоеНазначение_ОС = Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяНеХозДеятельность);
		
		// Движения по регистру СостоянияОСОрганизаций
		Движение = СостояниеОС.Добавить();
		
		Движение.ДатаСостояния     = ДатаДока;
		Движение.ОсновноеСредство  = ТекОС;
		Движение.Организация       = ТекОрганизация;
		Движение.Состояние         = Перечисления.СостоянияОС.СнятоСУчета;
		Движение.НазваниеДокумента = Строка(СтруктураШапкиДокумента.Ссылка.Метаданные());
		Движение.НомерДокумента    = СтруктураШапкиДокумента.Номер;
		
		// Движения по регистру СобытияОСОрганизаций
		Движение = СобытияОС.Добавить();
		
		Движение.Период            = ДатаДока;
		Движение.ОсновноеСредство  = СтрокаТЧ.ОсновноеСредство;
		Движение.Организация       = СтруктураШапкиДокумента.Организация;
		Движение.Событие           = СтруктураШапкиДокумента.СобытиеОС;
		Движение.НазваниеДокумента = Строка(СтруктураШапкиДокумента.Ссылка.Метаданные());
		Движение.НомерДокумента    = СтруктураШапкиДокумента.Номер;
		
		// Движения по регистру НачислениеАмортизации
		Движение = НачислениеАмортизацииБУ.Добавить();
		
		Движение.Период               = ДатаДока;
		Движение.ОсновноеСредство     = ТекОС;
		Движение.Организация          = ТекОрганизация;
		Движение.НачислятьАмортизацию = Ложь;
		
		Если СтрокаТЧ.ПревышениеСуммДооценокНадСуммамиУценокБУ > 0 Тогда
			
			// ПереоценкаОСБухгалтерскийУчет
			СтрокаДвижений = ПереоценкаОСБУ.ДобавитьРасход();
			
			СтрокаДвижений.Период           = Дата;
			СтрокаДвижений.ОсновноеСредство = ТекОС;
			СтрокаДвижений.Организация      = ТекОрганизация;
			
			СтрокаДвижений.СуммаПереоценки 	= СтрокаТЧ.ПревышениеСуммДооценокНадСуммамиУценокБУ;
			
			// Хозрасчетный Дт 423 Кт 441
			ПроводкаБУ = ПроводкиБУ.Добавить();
			ПроводкаБУ.Период       = ДатаДока;
			ПроводкаБУ.Организация  = ТекОрганизация;
			
			ПроводкаБУ.СчетДт       = СтрокаТЧ.СчетУчетаДооценокОС;
			БухгалтерскийУчет.УстановитьСубконто(ПроводкаБУ.СчетДт, ПроводкаБУ.СубконтоДт, "ОсновныеСредства", ТекОС);

			ПроводкаБУ.СчетКт       = ПланыСчетов.Хозрасчетный.НераспределеннаяПрибыль;
			
			ПроводкаБУ.Сумма        = СтрокаТЧ.ПревышениеСуммДооценокНадСуммамиУценокБУ;
			ПроводкаБУ.Содержание   = НСтр("ru='Списана сумма дооценок ОС';uk='Списана сума дооцінок ОЗ'",Локализация.КодЯзыкаИнформационнойБазы());
			ПроводкаБУ.НомерЖурнала = НомерЖурнала;
			
		ИначеЕсли СтрокаТЧ.ПревышениеСуммДооценокНадСуммамиУценокБУ < 0 Тогда	
			
			// ПереоценкаОСБухгалтерскийУчет
			СтрокаДвижений = ПереоценкаОСБУ.ДобавитьПриход();
			
			СтрокаДвижений.Период           = ДатаДока;
			СтрокаДвижений.ОсновноеСредство = ТекОС;
			СтрокаДвижений.Организация      = ТекОрганизация;
			
			СтрокаДвижений.СуммаПереоценки 	= -СтрокаТЧ.ПревышениеСуммДооценокНадСуммамиУценокБУ;
			
		КонецЕсли;	
		
		// Движения по регистру НачислениеАмортизацииОСНалоговыйУчет
		Движение = НачислениеАмортизацииНУ.Добавить();
		
		Движение.Период               = ДатаДока;
		Движение.ОсновноеСредство     = ТекОС;
		Движение.Организация          = ТекОрганизация;
		Движение.НачислятьАмортизацию = Ложь;
		
		// списание амортизации Д СчетНачисленияАмортизацииБУ К СчетУчетаОС
		СуммаПроводки 	= СтрокаТЧ.АмортизацияБУ + СтрокаТЧ.АмортизацияЗаМесяцБУ;
		СуммаПроводкиНУ = СтрокаТЧ.АмортизацияНУ + СтрокаТЧ.АмортизацияЗаМесяцНУ;
		
		Если СуммаПроводки <> 0 ИЛИ СуммаПроводкиНУ <> 0 Тогда
			
			Проводка = ПроводкиБУ.Добавить();
			
			Проводка.Период       = ДатаДока;
			Проводка.Активность   = Истина;
			Проводка.Организация  = ТекОрганизация;
			Проводка.Содержание   = НСтр("ru='Списана амортизация';uk='Списано амортизацію'",Локализация.КодЯзыкаИнформационнойБазы());
			Проводка.НомерЖурнала = НомерЖурнала;
			Проводка.Сумма        = СуммаПроводки;
			
			Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыль ИЛИ СтруктураШапкиДокумента.ЕстьНДС Тогда
				
				Проводка.НалоговоеНазначениеДт = СтрокаТЧ.НалоговоеНазначение_ОС;
				
			КонецЕсли;	
			
			Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыль Тогда
				
				Проводка.СуммаНУДт = СуммаПроводкиНУ;
				
			КонецЕсли;
			
			Проводка.СчетДт = СтрокаТЧ.СчетНачисленияАмортизацииБУ;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ОсновныеСредства", ТекОС);
			
			Проводка.СчетКт = СтрокаТЧ.СчетУчетаБУ;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОсновныеСредства", ТекОС);
			
			Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыль ИЛИ СтруктураШапкиДокумента.ЕстьНДС Тогда
				
				Проводка.НалоговоеНазначениеКт = СтрокаТЧ.НалоговоеНазначение_ОС;
				
			КонецЕсли;	
			
			Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыль Тогда
				
				Проводка.СуммаНУКт = СуммаПроводкиНУ;
				
			КонецЕсли;
			
			Если НЕ СтруктураШапкиДокумента.ЕстьНДС Тогда
				// организация - не плательщик НДС. 
				Если НепроизводственныйОС Тогда
					// Непроизводственное
					Проводка.НалоговоеНазначениеДт = СтрокаТЧ.НалоговоеНазначение_ОС;
					Проводка.НалоговоеНазначениеКт = СтрокаТЧ.НалоговоеНазначение_ОС;
				Иначе	
					Проводка.НалоговоеНазначениеДт = НеОблНДСДеятельность;
					Проводка.НалоговоеНазначениеКт = НеОблНДСДеятельность;
				КонецЕсли;	
			КонецЕсли;	
			
		КонецЕсли;
			
		// списание остаточной стоимости Д СчетСписанияБУ К СчетУчетаОС
		СуммаПроводки = СтрокаТЧ.СтоимостьБУ - СтрокаТЧ.АмортизацияБУ - СтрокаТЧ.АмортизацияЗаМесяцБУ;
		
		Если СуммаПроводки <> 0 ИЛИ СтрокаТЧ.ОстСтоимостьНУ <> 0 Тогда
			
			Проводка = ПроводкиБУ.Добавить();
			
			Проводка.Период       = ДатаДока;
			Проводка.Организация  = ТекОрганизация;
			Проводка.Содержание   = НСтр("ru='Списана ост. стоимость';uk='Списана зал. вартість'",Локализация.КодЯзыкаИнформационнойБазы());
			Проводка.НомерЖурнала = НомерЖурнала;
			Проводка.Сумма        = СуммаПроводки;
			
			Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыльДо2015 Тогда
				
				Проводка.НалоговоеНазначениеДт = НалоговоеНазначениеДоходовИЗатрат;
				Если НалоговоеНазначениеДоходовИЗатрат <> Справочники.НалоговыеНазначенияАктивовИЗатрат.НКУ_НеХозДеятельность Тогда
					Проводка.СуммаНУДт = СтрокаТЧ.ОстСтоимостьНУ;
					
					ТекЛиквСтоимость 			= ТаблицаМестонахождений.Найти(СтрокаОС.ОсновноеСредство,"ОС_БУ");
					ЛиквидационнаяСтоимость_БУ 	= ?(ТекЛиквСтоимость = Неопределено, 0, ТекЛиквСтоимость.ЛиквидационнаяСтоимость_БУ);
					Проводка.СуммаНУДт = Макс(СтрокаТЧ.ОстСтоимостьНУ - ЛиквидационнаяСтоимость_БУ, 0);
					
				КонецЕсли;	
				
			КонецЕсли;
			
			Проводка.СчетДт = СтруктураШапкиДокумента.СчетСписанияБУ;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтруктураШапкиДокумента.СубконтоБУ1);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, СтруктураШапкиДокумента.СубконтоБУ2);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, СтруктураШапкиДокумента.СубконтоБУ3);
			
			Проводка.СчетКт = СтрокаТЧ.СчетУчетаБУ;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОсновныеСредства", ТекОС);
			
			Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыль ИЛИ СтруктураШапкиДокумента.ЕстьНДС Тогда
				
				Проводка.НалоговоеНазначениеКт = СтрокаТЧ.НалоговоеНазначение_ОС;
				
			КонецЕсли;	
			
			Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыль Тогда
				
				Проводка.СуммаНУКт = СтрокаТЧ.ОстСтоимостьНУ;
				
			КонецЕсли;
			
			Если НЕ СтруктураШапкиДокумента.ЕстьНДС Тогда
				// организация - не плательщик НДС. 
				Если НепроизводственныйОС Тогда
					// Непроизводственное
					Проводка.НалоговоеНазначениеКт = СтрокаТЧ.НалоговоеНазначение_ОС;
				Иначе	
					Проводка.НалоговоеНазначениеКт = НеОблНДСДеятельность;
				КонецЕсли;	
			КонецЕсли;	
			
		КонецЕсли;
		
	КонецЦикла;
	
	УправлениеНеоборотнымиАктивами.ПроверкаДублированияЗаписейСостоянийОС(СтруктураШапкиДокумента.Организация, Движения.СостоянияОСОрганизаций, Отказ, Заголовок);

	// ИНАГРО++
	//Движения.Хозрасчетный.Записать(Ложь);
	ИНАГРО_Общий.ИНАГРО_ДвиженияЗатратыОрганизации_Приход(СтруктураШапкиДокумента, Движения);
	
	Если ЗначениеЗаполнено(ИНАГРО_ДокументОперативногоУчета) И ИНАГРО_ДокументОперативногоУчета.Проведен Тогда 
		ИНАГРО_Общий.ИНАГРО_ДвиженияВыпускПродукции(СтруктураШапкиДокумента, Движения);
	КонецЕсли;
	   
	Если НЕ Отказ И АмортизацияБА И ЗначениеЗаполнено(ЭтотОбъект.ИНАГРО_ДокументОперативногоУчета) Тогда  
			
		ТаблицаОС = ОС.Выгрузить();
		
		// Очистим ТаблицаОС от возможных ОС, которые не относятся к БА (например, если док. введен на основании ИнвентаризацияОС)
		// и дозаполним недостающие реквизиты
		
		Если ИНАГРО_ОбщийВызовСервераПовтИсп.ЕстьБСПУ() Тогда
			
			МодульИНАГРО_БиологическиеАктивы = ОбщегоНазначения.ОбщийМодуль("ИНАГРО_БиологическиеАктивы");
			
			ТаблицаОС   = МодульИНАГРО_БиологическиеАктивы.ПолучитьИзОС_ОСБА(Дата, Организация, ТаблицаОС);
			КодОперации = ?(МодульИНАГРО_БиологическиеАктивы.ЭтоЖивотное(ЭтотОбъект.ИНАГРО_БиологическийАктив), Перечисления.ИНАГРО_КодыОперацийУчетЖивотных.Списание, Перечисления.ИНАГРО_КодыОперацийУчетРастений.Списание);
			
			МодульИНАГРО_БиологическиеАктивы.ВыбытиеОСБА(ЭтотОбъект, СтруктураШапкиДокумента, ТаблицаОС, Движения, КодОперации);
			
		КонецЕсли;
		
	КонецЕсли;
	// ИНАГРО--

КонецПроцедуры

Процедура ФормированиеДвиженияОСВременнаяНалоговаяРазница(СтруктураШапкиДокумента, Отказ, Заголовок)
	
	Если НЕ СписыватьОСВременнаяНалоговаяРазница Тогда
		Возврат;
	КонецЕсли;
	
	ДатаДока       = Дата;
	ТекОрганизация = СтруктураШапкиДокумента.Организация;
    НомерЖурнала   = НСтр("ru='ОС';uk='ОЗ'",Локализация.КодЯзыкаИнформационнойБазы());
	
	СостояниеОС             = Движения.СостоянияОСОрганизаций;
	СобытияОС               = Движения.СобытияОСОрганизаций;
	НачислениеАмортизацииБУ = Движения.НачислениеАмортизацииОСБухгалтерскийУчет;
	НачислениеАмортизацииНУ = Движения.НачислениеАмортизацииОСНалоговыйУчет;
	ПроводкиБУ              = Движения.Хозрасчетный;
	
	Счет1091 	= ПланыСчетов.Хозрасчетный.ДругиеОсновныеСредства; 
	Счет131 	= ПланыСчетов.Хозрасчетный.ИзносОсновныхСредств; 
	НеОблНДСДеятельность = Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяХозДеятельность;
	
	// Движения по регистру СостоянияОСОрганизаций
	Движение = СостояниеОС.Добавить();
	
	Движение.ДатаСостояния     = ДатаДока;
	Движение.ОсновноеСредство  = ОсновноеСредствоВременнаяНалоговаяРазница;
	Движение.Организация       = ТекОрганизация;
	Движение.Состояние         = Перечисления.СостоянияОС.СнятоСУчета;
	Движение.НазваниеДокумента = Строка(СтруктураШапкиДокумента.Ссылка.Метаданные());
	Движение.НомерДокумента    = СтруктураШапкиДокумента.Номер;
	
	// Движения по регистру СобытияОСОрганизаций
	Движение = СобытияОС.Добавить();
	
	Движение.Период            = ДатаДока;
	Движение.ОсновноеСредство  = ОсновноеСредствоВременнаяНалоговаяРазница;
	Движение.Организация       = СтруктураШапкиДокумента.Организация;
	Движение.Событие           = СтруктураШапкиДокумента.СобытиеОС;
	Движение.НазваниеДокумента = Строка(СтруктураШапкиДокумента.Ссылка.Метаданные());
	Движение.НомерДокумента    = СтруктураШапкиДокумента.Номер;
	
	// Движения по регистру НачислениеАмортизацииОСНалоговыйУчет
	Движение = НачислениеАмортизацииНУ.Добавить();
	
	Движение.Период               = ДатаДока;
	Движение.ОсновноеСредство     = ОсновноеСредствоВременнаяНалоговаяРазница;
	Движение.Организация          = ТекОрганизация;
	Движение.НачислятьАмортизацию = Ложь;
	
	// списание амортизации Д СчетНачисленияАмортизацииБУ К СчетУчетаОС
	Если АмортизацияНУВременнаяНалоговаяРазница <> 0 Тогда
		
		Проводка = ПроводкиБУ.Добавить();
		
		Проводка.Период       = ДатаДока;
		Проводка.Активность   = Истина;
		Проводка.Организация  = ТекОрганизация;
		Проводка.Содержание   = НСтр("ru='Списана амортизация';uk='Списано амортизацію'", Локализация.КодЯзыкаИнформационнойБазы());
		Проводка.НомерЖурнала = НомерЖурнала;
		Проводка.Сумма        = 0;
		
		Проводка.НалоговоеНазначениеДт = НеОблНДСДеятельность;
		
		Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыль Тогда
			
			Проводка.СуммаНУДт = АмортизацияНУВременнаяНалоговаяРазница;
			
		КонецЕсли;
		
		Проводка.СчетДт = Счет131;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ОсновныеСредства", ОсновноеСредствоВременнаяНалоговаяРазница);
		
		Проводка.СчетКт = Счет1091;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОсновныеСредства", ОсновноеСредствоВременнаяНалоговаяРазница);
		
		Проводка.НалоговоеНазначениеКт = НеОблНДСДеятельность;
		
		Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыль Тогда
			
			Проводка.СуммаНУКт = АмортизацияНУВременнаяНалоговаяРазница;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// списание остаточной стоимости Д 00 К СчетУчетаОС
	Если ОстаточнаяСтоимостьНУВременнаяНалоговаяРазница <> 0 Тогда
		
		Проводка = ПроводкиБУ.Добавить();
		
		Проводка.Период       = ДатаДока;
		Проводка.Организация  = ТекОрганизация;
		Проводка.Содержание   = НСтр("ru='Списана ост. стоимость';uk='Списана зал. вартість'",Локализация.КодЯзыкаИнформационнойБазы());
		Проводка.НомерЖурнала = НомерЖурнала;
		Проводка.Сумма        = 0;
		
		Проводка.СчетДт = ПланыСчетов.Хозрасчетный.Вспомогательный;
		
		Проводка.СчетКт = Счет1091;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОсновныеСредства", ОсновноеСредствоВременнаяНалоговаяРазница);
		
		Проводка.НалоговоеНазначениеКт = НеОблНДСДеятельность;
		
		Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыль Тогда
			
			Проводка.СуммаНУКт = ОстаточнаяСтоимостьНУВременнаяНалоговаяРазница;
			
		КонецЕсли;
		
	КонецЕсли;	
	
КонецПроцедуры

// Процедура формирует структуру шапки документа и дополнительных полей.
//
Процедура ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента) Экспорт

	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента = ОбщегоНазначенияРед12.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	СтруктураШапкиДокумента.Вставить("ВидСобытияОС",СтруктураШапкиДокумента.СобытиеОС.ВидСобытияОС);
	
КонецПроцедуры // ПодготовитьСтруктуруШапкиДокумента()

// Процедура формирует таблицы документа.
//
Процедура ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоОС, Отказ, Заголовок) Экспорт
	
	СтруктураПолей = Новый Структура;
	СтруктураСложныхПолей = Новый Структура;
	СтруктураПолей.Вставить("ОсновноеСредство", "ОсновноеСредство");
	
	СтруктураПолей.Вставить("СтоимостьБУ",          "СтоимостьБУ");
	СтруктураПолей.Вставить("АмортизацияБУ",        "АмортизацияБУ");
	СтруктураПолей.Вставить("АмортизацияЗаМесяцБУ", "АмортизацияЗаМесяцБУ");
	
	СтруктураПолей.Вставить("СтоимостьНУ",          "СтоимостьНУ");
	СтруктураПолей.Вставить("АмортизацияНУ"       , "АмортизацияНУ");
	СтруктураПолей.Вставить("АмортизацияЗаМесяцНУ", "АмортизацияЗаМесяцНУ");

	СтруктураПолей.Вставить("ПревышениеСуммДооценокНадСуммамиУценокБУ",       "ПревышениеСуммДооценокНадСуммамиУценокБУ");

	СтруктураСложныхПолей.Вставить("ОстСтоимостьНУ"    	, "СтоимостьНУ - АмортизацияНУ - АмортизацияЗаМесяцНУ");

	РезультатЗапросаПоОС = ОбщегоНазначенияРед12.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "ОС", СтруктураПолей,,СтруктураСложныхПолей);
	ТаблицаПоОС          = РезультатЗапросаПоОС.Выгрузить();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ
//

Процедура ЗаполнитьПоДокументуОснованию(Основание)

	// Заполним реквизиты из стандартного набора по документу основанию.
	ЗаполнениеДокументов.ЗаполнитьПоОснованию(ЭтотОбъект, Основание);

	Если ТипЗнч(Основание) = Тип("СправочникСсылка.ОсновныеСредства") Тогда

		Если Основание.ЭтоГруппа Тогда

			ТекстСообщения = НСтр("ru='Ввод списания ОС на основании группы ОС невозможен!
|Выберите ОС. Для раскрытия группы используйте клавиши Ctrl и стрелку вниз';uk='Введення списання ОЗ на підставі групи ОЗ неможливе!
|Виберіть ОЗ. Для розкриття групи використовуйте клавіші Ctrl і стрілку вниз'");
			ВызватьИсключение(ТекстСообщения);

		КонецЕсли;

		СтрокаТабличнойЧасти = ОС.Добавить();
		СтрокаТабличнойЧасти.ОсновноеСредство = Основание;
		
		Запрос = Новый Запрос;
		Запрос.Текст = "
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ЕСТЬNULL(ПервоначальныеСведенияОС.Организация, ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)) КАК Организация
			|ИЗ
			|	РегистрСведений.ПервоначальныеСведенияОСБухгалтерскийУчет.СрезПоследних(
			|		&Дата,
			|		ОсновноеСредство = &ОсновноеСредство
			|	) КАК ПервоначальныеСведенияОС
			|";
		Запрос.УстановитьПараметр("Дата", НачалоДня(ТекущаяДатаСеанса()));
		Запрос.УстановитьПараметр("ОсновноеСредство", Основание);
		РезультатЗапроса = Запрос.Выполнить();
		Если НЕ РезультатЗапроса.Пустой() Тогда
			Выборка = РезультатЗапроса.Выбрать();
			Выборка.Следующий();
			Организация = Выборка.Организация;
		КонецЕсли;

	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ИнвентаризацияОС") ИЛИ ТипЗнч(Основание) = Тип("ДокументСсылка.ИНАГРО_ИнвентаризацияОС") Тогда // ИНАГРО

		Организация = Основание.Организация;

		Для каждого ТекСтрокаОС Из Основание.ОС Цикл
			Если ТекСтрокаОС.НаличиеПоДаннымУчета И НЕ ТекСтрокаОС.НаличиеФактическое Тогда
				НоваяСтрока = ОС.Добавить();
				НоваяСтрока.ОсновноеСредство = ТекСтрокаОС.ОсновноеСредство;
			КонецЕсли;
		КонецЦикла;

	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура - обработчик события "ОбработкаЗаполнения".
//
Процедура ОбработкаЗаполнения(ДанныеЗаполнения)
	
	ТипДанныхЗаполнения = ТипЗнч(ДанныеЗаполнения);
	Если ДанныеЗаполнения <> Неопределено
			И ТипДанныхЗаполнения <> Тип("Структура")
			И Метаданные().ВводитсяНаОсновании.Содержит(ДанныеЗаполнения.Метаданные()) Тогда
		ЗаполнитьПоДокументуОснованию(ДанныеЗаполнения);
	КонецЕсли;
	ЗаполнениеДокументов.Заполнить(ЭтотОбъект, ДанныеЗаполнения);

	Если НЕ ЗначениеЗаполнено(СобытиеОС) Тогда
		СобытиеОС = УчетОС.ПолучитьСобытиеПоОСИзСправочника(Перечисления.ВидыСобытийОС.Списание);
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(СчетСписанияБУ) Тогда
		СчетСписанияБУ = ПланыСчетов.Хозрасчетный.СписаниеНеоборотныхАктивов;
	КонецЕсли;
	
	// ИНАГРО++
	Если ТипДанныхЗаполнения = Тип("Структура") И ДанныеЗаполнения.Свойство("ИНАГРО_ДокументОперативногоУчета") Тогда
		Если ДанныеЗаполнения.ИНАГРО_ДокументОперативногоУчета.Метаданные().Имя = "ИНАГРО_ПеремещениеБиологическихАктивов"
			ИЛИ ДанныеЗаполнения.ИНАГРО_ДокументОперативногоУчета.Метаданные().Имя = "ИНАГРО_СписаниеБиологическихАктивов" Тогда
			ЗаполнитьРеквизитыБА(ДанныеЗаполнения);			
		КонецЕсли;
	КонецЕсли;
	// ИНАГРО--  
	
КонецПроцедуры // ОбработкаЗаполнения()

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)

	ПлательщикНалогаНаПрибыльДо2015  = УчетнаяПолитика.ПлательщикНалогаНаПрибыльДо2015(Организация, Дата);
	
	МассивНепроверяемыхРеквизитов = Новый Массив;
	
	КоличествоСубконто = СчетСписанияБУ.ВидыСубконто.Количество();
	
	Если СписыватьОСВременнаяНалоговаяРазница Тогда
		МассивНепроверяемыхРеквизитов.Добавить("ОС");
	КонецЕсли;
	
	Если ОС.Количество() = 0 Тогда
		МассивНепроверяемыхРеквизитов.Добавить("СчетСписанияБУ");
	Иначе	
		Для Н = 1 По КоличествоСубконто Цикл
		
			ПроверяемыеРеквизиты.Добавить("СубконтоБУ" + Н);
		
		КонецЦикла;
	КонецЕсли;	
	
	Если НЕ ПлательщикНалогаНаПрибыльДо2015 Тогда
		МассивНепроверяемыхРеквизитов.Добавить("НалоговоеНазначениеДоходовИЗатрат");
	КонецЕсли;		
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	
	УправлениеВнеоборотнымиАктивами.ПроверитьОтсутствиеДублейВТабличнойЧасти(ЭтотОбъект, "ОС", Новый Структура("ОсновноеСредство"), Отказ);

КонецПроцедуры

Процедура ОбработкаПроведения(Отказ)

	Перем Заголовок, СтруктураШапкиДокумента;
	Перем ТаблицаПоОС;
	
	Заголовок = ОбщегоНазначенияБПВызовСервера.ПредставлениеДокументаПриПроведении(Ссылка);
	
	// ПОДГОТОВКА ПРОВЕДЕНИЯ ПО ДАННЫМ ДОКУМЕНТА

	ПроведениеСервер.ПодготовитьНаборыЗаписейКПроведению(ЭтотОбъект);
	Если РучнаяКорректировка Тогда
		Возврат;
	КонецЕсли;

	ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента);
	
	// Получим данные учетной политики
	ПодготовитьПараметрыУчетнойПолитики(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоОС, Отказ, Заголовок);
	
	//проверка, нет ли списанных ОС в табличной части
	УправлениеНеоборотнымиАктивами.ПроверитьНаСписанность(МоментВремени(), Организация, ТаблицаПоОС, Отказ, Заголовок);
	
	// Подготовим таблицу местонахождения для ТабАмортизации
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Организация",  Организация);
	Запрос.УстановитьПараметр("Период",       Новый Граница(МоментВремени(), ВидГраницы.Исключая));
	Запрос.УстановитьПараметр("ВнешнийИсточник", ТаблицаПоОС);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
   	|	ВнешнийИсточник.ОсновноеСредство
	|ПОМЕСТИТЬ ОсновныеСредства
	|ИЗ &ВнешнийИсточник КАК ВнешнийИсточник
	|;
	|
	|ВЫБРАТЬ
	|	ОсновныеСредства.ОсновноеСредство 									КАК ОсновноеСредство,
	|	МестонахождениеОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство 	КАК ОС_БУ,
	|	МестонахождениеОСБухгалтерскийУчетСрезПоследних.Местонахождение 	КАК Местонахождение_БУ,
	|	ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.ЛиквидационнаяСтоимость КАК ЛиквидационнаяСтоимость_БУ
	|ИЗ
	|	ОсновныеСредства
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МестонахождениеОСБухгалтерскийУчет.СрезПоследних(&Период, ОсновноеСредство В (ВЫБРАТЬ ОсновноеСредство ИЗ ОсновныеСредства) И Организация = &Организация) КАК МестонахождениеОСБухгалтерскийУчетСрезПоследних
	|	ПО ОсновныеСредства.ОсновноеСредство = МестонахождениеОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПараметрыАмортизацииОСБухгалтерскийУчет.СрезПоследних(&Период, ОсновноеСредство В (ВЫБРАТЬ ОсновноеСредство ИЗ ОсновныеСредства) И Организация = &Организация) КАК ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних
	|	ПО ОсновныеСредства.ОсновноеСредство = ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство";
	ТаблицаМестонахождений = Запрос.Выполнить().Выгрузить();
	
	Если НЕ Отказ Тогда
		
		ДвиженияПоРегистрам(СтруктураШапкиДокумента, ТаблицаПоОС, ТаблицаМестонахождений, Отказ, Заголовок);
		
	КонецЕсли;
	
	Движения.Хозрасчетный.ВыполнитьДействияПередЗаписьюДвижений();

	ПроведениеСервер.ПодготовитьНаборыЗаписейКЗаписиДвижений(ЭтотОбъект);
	
КонецПроцедуры // ОбработкаПроведения()

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	// ИНАГРО++
	Если АмортизацияБА И ЗначениеЗаполнено(ИНАГРО_ДокументОперативногоУчета) И ИНАГРО_ДокументОперативногоУчета.Проведен Тогда
		
		СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Удаление запрещено! Документ-основание ""%1"" проведен.';uk='Видалення заборонено! Документ-підстава ""%1"" проведений'"), ИНАГРО_ДокументОперативногоУчета);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения);
		
		Отказ = Истина;			
	КонецЕсли;
	// ИНАГРО--

	ПроведениеСервер.ПодготовитьНаборыЗаписейКОтменеПроведения(ЭтотОбъект);
	Движения.Записать();
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)

	Дата = НачалоДня(ОбщегоНазначенияБП.ПолучитьРабочуюДату());
	Ответственный = Пользователи.ТекущийПользователь();
	
	// ИНАГРО++ 	
	Если ИНАГРО_ОбщийВызовСервераПовтИсп.ЕстьБСПУ() Тогда
		ИНАГРО_ДокументОперативногоУчета = Неопределено;
	КонецЕсли; 
	
	ИНАГРО_БиологическийАктив = Справочники.БиологическиеАктивы.ПустаяСсылка();		
	ИНАГРО_Склад			  = Справочники.Склады.ПустаяСсылка();				
	Комментарий 			  = ""; 		
	// ИНАГРО-- 

КонецПроцедуры

Процедура ЗаполнитьРеквизитыБА(Параметры) // ИНАГРО
			
	Дата 							 = Параметры.Дата;
	Организация  					 = Параметры.Организация;
	Комментарий						 = Параметры.Комментарий;
	СчетСписанияБУ                   = Параметры.СчетСписанияБУ;
	ИНАГРО_ДокументОперативногоУчета = Параметры.ИНАГРО_ДокументОперативногоУчета;
	ИНАГРО_БиологическийАктив  		 = Параметры.ИНАГРО_БиологическийАктив;
	ИНАГРО_Склад 				  	 = Параметры.ИНАГРО_Склад;
	ИНАГРО_Количество 				 = Параметры.ИНАГРО_Количество;
	
КонецПроцедуры 

// ИНАГРО++
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
		
	Если Проведен И РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения И АмортизацияБА		
		 И ЗначениеЗаполнено(ИНАГРО_ДокументОперативногоУчета) И ИНАГРО_ДокументОперативногоУчета.Проведен Тогда
		  
		СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Отмена проведения запрещена! Документ-основание ""%1"" проведен.';uk='Вiдміна проведення заборонено! Документ-підстава ""%1"" проведений'"),
			ИНАГРО_ДокументОперативногоУчета);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения);        		
		Отказ = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

АмортизацияБА = Ложь;
Если ИНАГРО_ОбщийВызовСервераПовтИсп.ЕстьБСПУ() Тогда
	АмортизацияБА = Константы.ИНАГРО_НачислятьАмортизациюБА.Получить();
КонецЕсли;
// ИНАГРО-- 

#КонецЕсли
