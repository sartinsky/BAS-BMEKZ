#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПараметрыРазмещения = ПодключаемыеКоманды.ПараметрыРазмещения();
	ПараметрыРазмещения.КоманднаяПанель = Элементы.ГруппаВажныеКоманды;
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект, ПараметрыРазмещения);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	ЭтоНовый = Параметры.Ключ.Пустая();
	
	Если Параметры.Ключ.Пустая() Тогда
		ПодготовитьФормуНаСервере();
	КонецЕсли;
	
	// Активизировать первую непустую табличную часть
	СписокТабличныхЧастей = Новый СписокЗначений;
	СписокТабличныхЧастей.Добавить("Товары",         "Товары");
	СписокТабличныхЧастей.Добавить("ВозвратнаяТара", "ВозвратнаяТара");
	
	АктивизироватьТабличнуюЧасть = ОбщегоНазначенияБПВызовСервера.ПолучитьПервуюНепустуюВидимуюТабличнуюЧасть(
		ЭтаФорма, СписокТабличныхЧастей);
	ОбщегоНазначенияБПВызовСервера.АктивизироватьЭлементФормы(ЭтаФорма, АктивизироватьТабличнуюЧасть);
	
	// Если форма вызвана в режиме смена вида операции - модифицируем сразу при открытии, 
	// чтобы можно было подтвердить или отказаться от изменения путем сохранения или 
	// отказа от сохранения документа.
	Если Параметры.Свойство("ИзменитьВидОперации")
		И Параметры.ИзменитьВидОперации Тогда
		
		// Не кэшируем переменную Объект, т.к. может вызываться Форма.ИзменитьРеквизиты(),
		// которая меняет Объект.
		Объект.ВидОперации = Параметры.ЗначенияЗаполнения.ВидОперации;
		Модифицированность = Истина;
		
		ВидОперацииОбработатьИзменение();
		
		УстановитьЗаголовокФормы();
		УстановитьВидимость();
		УправлениеФормой(ЭтаФорма);
		
	КонецЕсли;
	

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)

	Если ИсточникВыбора.ИмяФормы = "Обработка.ПодборНоменклатуры.Форма.Форма" Тогда
		ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение, ИсточникВыбора.ИмяТаблицы);
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Документ.ПередачаТоваров.Форма.ФормаПодбора" Тогда
		ОбработкаВыбораЗаполнить(ВыбранноеЗначение, ИсточникВыбора.ИмяТаблицы);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	ОбщегоНазначенияБПКлиент.ОбработкаОповещенияФормыДокумента(ЭтаФорма, Объект.Ссылка, ИмяСобытия, Параметр, Источник);
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом

	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	ПодготовитьФормуНаСервере();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	УстановитьСостояниеДокумента();
	
	УстановитьЗаголовокФормы();
	
КонецПроцедуры

#КонецОбласти	//ОбработчикиСобытийФормы

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)

	Если НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДатаДокумента) Тогда
		// Изменение времени не влияет на поведение документа.
		ТекущаяДатаДокумента = Объект.Дата;
		Возврат;
	КонецЕсли;

	// Общие проверки условий по датам.
	ТребуетсяВызовСервера = ОбщегоНазначенияБПКлиент.ТребуетсяВызовСервераПриИзмененииДатыДокумента(Объект.Дата, 
		ТекущаяДатаДокумента);
		
	// Если определили, что изменение даты может повлиять на какие-либо параметры, 
	// то передаем обработку на сервер.
	Если ТребуетсяВызовСервера Тогда
		ДатаПриИзмененииНаСервере();
	КонецЕсли;
	
	// Запомним новую дату документа.
	ТекущаяДатаДокумента = Объект.Дата;

КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)

	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		ОрганизацияПриИзмененииНаСервере();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СкладПриИзменении(Элемент)

	Если ЗначениеЗаполнено(Объект.Склад) Тогда
		СкладПриИзмененииНаСервере();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)

	Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
		КонтрагентПриИзмененииНаСервере();
	КонецЕсли

КонецПроцедуры

&НаКлиенте
Процедура ДоговорКонтрагентаПриИзменении(Элемент)

	Если ЗначениеЗаполнено(Объект. ДоговорКонтрагента) Тогда
		
		ДоговорКонтрагентаПриИзмененииНаСервере();
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДоговорКонтрагентаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	НовыйПараметр = Новый ПараметрВыбора("Отбор.ВидДоговора", СписокВидовДоговоров);
	НовыйМассив = Новый Массив();
	НовыйМассив.Добавить(НовыйПараметр);
	НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);
	Элементы.ДоговорКонтрагента.ПараметрыВыбора = НовыеПараметры;

КонецПроцедуры

&НаКлиенте
Процедура СделкаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;

	ПараметрыОбъекта = Новый Структура;
	ПараметрыОбъекта.Вставить("Дата"                 , Объект.Дата);
	ПараметрыОбъекта.Вставить("ДоговорКонтрагента"   , Объект.ДоговорКонтрагента);
	ПараметрыОбъекта.Вставить("Контрагент"           , Объект.Контрагент);
	ПараметрыОбъекта.Вставить("СчетУчета"            , Объект.СчетУчетаРасчетовПоТареПоАвансам);
	ПараметрыОбъекта.Вставить("Организация"          , Объект.Организация);
	ПараметрыОбъекта.Вставить("ОстаткиОбороты"       , "Кт");
	ПараметрыОбъекта.Вставить("ТипыДокументов"       , "Метаданные.Документы.ПередачаТоваров.Реквизиты.Сделка.Тип");

	ПараметрыФормы = Новый Структура("ПараметрыОбъекта", ПараметрыОбъекта);
	ОткрытьФорму("Документ.ДокументРасчетовСКонтрагентом.ФормаВыбора", ПараметрыФормы, Элемент);
		
КонецПроцедуры

&НаКлиенте
Процедура ПолучилНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	УправлениеКонтактнойИнформациейБП.ПредставительКонтрагентаНачалоВыбора(Объект.Контрагент, ДанныеВыбора, СтандартнаяОбработка);
		
КонецПроцедуры

&НаКлиенте
Процедура ЕстьАвансДо01042011ПриИзменении(Элемент)
	
	УправлениеФормой(ЭтаФорма);
	
	Если НЕ Объект.ЕстьАвансДо01042011 Тогда
		
		Объект.СуммаВДВРПоАвансуДо01042011 = 0;	
		Объект.НеОтноситьСебестоимостьЗапасовНаРасходыПоНУ = Ложь;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура НеОтноситьСебестоимостьЗапасовНаРасходыПоНУПриИзменении(Элемент)
	
	УправлениеФормой(ЭтаФорма);
	
	Если Объект.НеОтноситьСебестоимостьЗапасовНаРасходыПоНУ Тогда
		
		Объект.СуммаВДВРПоАвансуДо01042011 = 0;	
		
	КонецЕсли;

КонецПроцедуры


&НаКлиенте
Процедура ПолучилПоДругомуДокументуПриИзменении(Элемент)
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти	//ОбработчикиСобытийЭлементовШапкиФормы

#Область ОбработчикиСобытийЭлементовТаблицыФормыТовары

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)

	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	ДанныеСтрокиТаблицы = Новый Структура(
		"Номенклатура, Количество,
		|ЕдиницаИзмерения, Коэффициент,
		|СчетУчетаБУ, СчетПередачиБУ, НалоговоеНазначение");
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, ТекущиеДанные);
	
	ДанныеОбъекта = Новый Структура(
		"Дата, ВидОперации, Организация, Склад");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
	ТоварыНоменклатураПриИзмененииНаСервере(ДанныеСтрокиТаблицы, ДанныеОбъекта);
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтрокиТаблицы);

КонецПроцедуры

&НаКлиенте
Процедура ТоварыЕдиницаИзмеренияПриИзменении(Элемент)

	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	ДанныеСтрокиТаблицы = Новый Структура(
		"Номенклатура, Количество,
		|ЕдиницаИзмерения, Коэффициент,
		|СчетУчетаБУ, СчетПередачиБУ, НалоговоеНазначение");
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, ТекущиеДанные);
	
	ДанныеОбъекта = Новый Структура(
		"Дата, ВидОперации, Организация, Склад");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
	ТоварыЕдиницаИзмеренияПриИзмененииНаСервере(
		ДанныеСтрокиТаблицы, ДанныеОбъекта);
		
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтрокиТаблицы);
		
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ТоварыЕдиницаИзмеренияПриИзмененииНаСервере(СтрокаТабличнойЧасти, Знач ДанныеОбъекта)

	ОбработкаТабличныхЧастей.ЗаполнитьКоэффициентТабЧасти(СтрокаТабличнойЧасти, ДанныеОбъекта, "Товары");
	
КонецПроцедуры

#КонецОбласти	//ОбработчикиСобытийЭлементовТаблицыФормыТовары

#Область ОбработчикиСобытийЭлементовТаблицыФормыВозвратнаяТара

&НаКлиенте
Процедура ВозвратнаяТараПриИзменении(Элемент)
	ЗаполненаВозвратнаяТара = (Объект.ВозвратнаяТара.Количество() > 0);
КонецПроцедуры

&НаКлиенте
Процедура ВозвратнаяТараНоменклатураПриИзменении(Элемент)

	ТекущиеДанные	= Элементы.ВозвратнаяТара.ТекущиеДанные;
	
	ДанныеСтрокиТаблицы	= Новый Структура(
		"Номенклатура, Количество,
		|СчетУчетаБУ, НалоговоеНазначение, НалоговоеНазначениеДоходовИЗатрат");
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, ТекущиеДанные);
	
	ДанныеОбъекта	= Новый Структура(
		"Дата, ВидОперации, Организация, Склад");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
	ВозвратнаяТараНоменклатураПриИзмененииНаСервере(ДанныеСтрокиТаблицы, ДанныеОбъекта);
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтрокиТаблицы);

КонецПроцедуры

&НаКлиенте
Процедура ВозвратнаяТараКоличествоПриИзменении(Элемент)

	ТекущиеДанные = Элементы.ВозвратнаяТара.ТекущиеДанные;
	ТекущиеДанные.Сумма = Окр(ТекущиеДанные.Цена * ТекущиеДанные.Количество, 2);

КонецПроцедуры

&НаКлиенте
Процедура ВозвратнаяТараЦенаПриИзменении(Элемент)

	ТекущиеДанные = Элементы.ВозвратнаяТара.ТекущиеДанные;
	ТекущиеДанные.Сумма = Окр(ТекущиеДанные.Цена * ТекущиеДанные.Количество, 2);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ТоварыЗаполнитьПоПродукцииИСпецификации(Команда)

	// Открываем форму подбора.
	СтруктураПараметровПодбора = Новый Структура();
	СтруктураПараметровПодбора.Вставить("ИмяТаблицы", "Товары");

	ОткрытьФорму("Документ.ПередачаТоваров.Форма.ФормаПодбора", СтруктураПараметровПодбора, ЭтаФорма, УникальныйИдентификатор);

КонецПроцедуры

&НаКлиенте
Процедура ТоварыЗаполнитьПродукциюПоОстаткам(Команда)

	Если Объект.Товары.Количество() > 0 Тогда
		ТекстВопроса	= НСтр("ru='Перед заполнением табличная часть будет очищена. Продолжить?';uk='Перед заповненням таблична частина буде очищена. Продовжити?'");
		Оповещение = Новый ОписаниеОповещения("ВопросПередЗаполнениемТабличнойЧастиПоОстаткамЗавершение", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да, Заголовок);
	Иначе
		ЗаполнитьТоварыПоОстаткамНаСервере(ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.ПроизводствоИзДавальческогоСырья"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПодбор(Команда)

	ДействиеПодбор("Товары");

КонецПроцедуры

&НаКлиенте
Процедура ВозвратнаяТараПодбор(Команда)

	ДействиеПодбор("ВозвратнаяТара");

КонецПроцедуры

#КонецОбласти	//ОбработчикиКомандФормы

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ПодготовитьФормуНаСервере()

	УстановитьФункциональныеОпцииФормы();
	
	УстановитьСостояниеДокумента();
	
	ДоговорУказан = ЗначениеЗаполнено(Объект.ДоговорКонтрагента);
	
	ВедениеВзаиморасчетовПоРасчетнымДокументам = ДоговорУказан И Объект.ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоРасчетнымДокументам;
	
	ОпределитьСписокДоступныхВидовДоговоровПоОперации(Объект.ВидОперации, СписокВидовДоговоров);
	
	Если ДоговорУказан Тогда
	Иначе
		
		Если ЗначениеЗаполнено(Объект.Контрагент)
			и НЕ ЗначениеЗаполнено(Объект.Ссылка) 
			и НЕ ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
			КонтрагентОбработатьИзменениеНаСервере();
		КонецЕсли;
		
	КонецЕсли;	
	
	ТекущаяДатаДокумента = Объект.Дата;
	
	ВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	
	// Установка текущей страницы
	Страницы = Новый СписокЗначений;
	Страницы.Добавить(Объект.Товары.Количество(),		  "ГруппаТовары");
	Страницы.Добавить(Объект.ВозвратнаяТара.Количество(), "ГруппаВозвратнаяТара");

	Для Каждого Страница Из Страницы Цикл
		Если Страница.Значение > 0 И Элементы[Страница.Представление].Видимость Тогда
			Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы[Страница.Представление];
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	ЗаполненаВозвратнаяТара = (Объект.ВозвратнаяТара.Количество() > 0);
	
	УстановитьЗаголовокФормы();
	
	УстановитьВидимость();
	
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаСервере
Процедура УстановитьСостояниеДокумента()
	
	СостояниеДокумента = ОбщегоНазначенияБП.СостояниеДокумента(Объект);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьФункциональныеОпцииФормы()
	
	ОбщегоНазначенияБПКлиентСервер.УстановитьПараметрыФункциональныхОпцийФормыДокумента(ЭтаФорма);
	
	ИспользоватьВозвратнуюТару = ПолучитьФункциональнуюОпцию("ИспользоватьВозвратнуюТару");
	ПлательщикНалогаНаПрибыльДо2015 = УчетнаяПолитика.ПлательщикНалогаНаПрибыльДо2015(Объект.Организация, Объект.Дата);
	ПлательщикНДС				= УчетнаяПолитика.ПлательщикНДС(Объект.Организация, Объект.Дата);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)

	Элементы = Форма.Элементы;
	Объект   = Форма.Объект;
	
	Элементы.ДоговорКонтрагента.Доступность       = ЗначениеЗаполнено(Объект.Организация) И ЗначениеЗаполнено(Объект.Контрагент);

	Элементы.Сделка.Доступность = Форма.ВедениеВзаиморасчетовПоРасчетнымДокументам;
	
	Элементы.ЕстьАвансДо01042011.Доступность 	   	 = Форма.ПлательщикНалогаНаПрибыльДо2015;
	Элементы.СуммаВДВРПоАвансуДо01042011.Доступность = Объект.ЕстьАвансДо01042011 И НЕ Объект.НеОтноситьСебестоимостьЗапасовНаРасходыПоНУ И Форма.ПлательщикНалогаНаПрибыльДо2015;
	
	Элементы.НеОтноситьСебестоимостьЗапасовНаРасходыПоНУ.Доступность = Объект.ЕстьАвансДо01042011 И Форма.ПлательщикНалогаНаПрибыльДо2015;
	
	Элементы.ГруппаРеквизитыДоверенностиЛевая.Видимость = НЕ Объект.ПолучилПоДругомуДокументу; 
	Элементы.ДокументПодтверждающийПолномочия.Видимость = Объект.ПолучилПоДругомуДокументу; 
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимость()
	
	Элементы.ЗаполнитьПоПродукцииИСпецификации.Видимость = (Объект.ВидОперации = Перечисления.ВидыОперацийПередачаТоваров.ВПереработку
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийПередачаТоваров.ИзПереработки);
		
	Элементы.ЗаполнитьПродукциюПоОстаткам.Видимость = (Объект.ВидОперации = Перечисления.ВидыОперацийПередачаТоваров.ИзПереработки);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗаголовокФормы()
	
	ТекстЗаголовка = НСтр("ru='Передача товаров';uk='Передача товарів'");
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ТекстЗаголовка = ТекстЗаголовка + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru=' %1 от %2';uk=' %1 від %2'"), Объект.Номер, Объект.Дата);
	Иначе
		ТекстЗаголовка = ТекстЗаголовка + НСтр("ru=' (создание)';uk=' (створення)'");
	КонецЕсли;
	
	Заголовок = ТекстЗаголовка + " (" + Строка(Объект.ВидОперации) + ")";

КонецПроцедуры

&НаСервере
Процедура ВидОперацииОбработатьИзменение()

	ОпределитьСписокДоступныхВидовДоговоровПоОперации(Объект.ВидОперации, СписокВидовДоговоров, Объект.ДоговорКонтрагента);
	
	Если Объект.Товары.Количество() + Объект.ВозвратнаяТара.Количество() > 0 
		И Объект.ВидОперации <> ПредопределенноеЗначение("Перечисление.ВидыОперацийПередачаТоваров.ИзПереработки") Тогда
	
		ЗаполнитьСчетаУчетаВТабличнойЧастиНаСервере();
	
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ДатаПриИзмененииНаСервере()

	УстановитьФункциональныеОпцииФормы();
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()

	УстановитьФункциональныеОпцииФормы();
	
	ЗаполнениеДокументов.ПриИзмененииЗначенияОрганизации(Объект, Пользователи.ТекущийПользователь());
	
	ЗаполнитьСчетаУчетаВТабличнойЧастиНаСервере();
	
	Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
		КонтрагентОбработатьИзменениеНаСервере();
	КонецЕсли;
	
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаСервере
Процедура СкладПриИзмененииНаСервере()

	
	ЗаполнитьСчетаУчетаВТабличнойЧастиНаСервере();

КонецПроцедуры

&НаСервере
Процедура КонтрагентПриИзмененииНаСервере()

	КонтрагентОбработатьИзменениеНаСервере();
	
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаСервере
Процедура КонтрагентОбработатьИзменениеНаСервере()

	ДанныеШапки = Новый Структура("Ссылка, ВидОперации, Дата, Организация, Контрагент, ДоговорКонтрагента, Сделка");
	
	ЗаполнитьЗначенияСвойств(ДанныеШапки, Объект);
	
	// Выполняем общие действия для всех документов при изменении Контрагент.
	ЗаполнениеДокументов.ПриИзмененииЗначенияКонтрагента(ДанныеШапки, СписокВидовДоговоров);
	
	ЗаполнитьЗначенияСвойств(Объект, ДанныеШапки);
	
	Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		ДоговорКонтрагентаОбработатьИзменение();
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ДоговорКонтрагентаПриИзмененииНаСервере()

	ДоговорКонтрагентаОбработатьИзменение();
	
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаСервере
Процедура ДоговорКонтрагентаОбработатьИзменение()
	
	Документы.ПередачаТоваров.ЗаполнитьСчетаУчетаРасчетов(Объект);

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСчетаУчетаВТабличнойЧастиНаСервере(ИмяТабличнойЧасти = "")

	Если ПустаяСтрока(ИмяТабличнойЧасти) ИЛИ ИмяТабличнойЧасти = "Товары" Тогда
		Документы.ПередачаТоваров.ЗаполнитьСчетаУчетаВТабличнойЧасти(Объект, "Товары");
	КонецЕсли;
	
	Если ПустаяСтрока(ИмяТабличнойЧасти) ИЛИ ИмяТабличнойЧасти = "ВозвратнаяТара" Тогда
		Документы.ПередачаТоваров.ЗаполнитьСчетаУчетаВТабличнойЧасти(Объект, "ВозвратнаяТара");
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТоварыПоОстаткамНаСервере(СчетУчета)

	ДокументОбъект	= РеквизитФормыВЗначение("Объект");
	ДокументОбъект.ЗаполнитьТоварыПоОстаткам(СчетУчета);
	ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
	
КонецПроцедуры

&НаКлиенте
 // Процедура вызывает сервисный механизм для подбора номенклатуры в табличную часть.
//
// Параметры:
//  ТабличнаяЧасть - табличная часть, в которую осуществляется подбор.
//
Процедура ДействиеПодбор(ИмяТаблицы)

	Если ИмяТаблицы = "Товары" Тогда
		ЕстьЦена = Ложь;
	Иначе // ВозвратнаяТара
		ЕстьЦена = Истина;
	КонецЕсли;

	СписокЗапросов = Новый СписокЗначений;
	СписокЗапросов.Добавить(,"По справочнику");

	ЗаголовокПодбора = НСтр("ru='Подбор номенклатуры в документ %1 (%2)';uk='Підбір номенклатури в документ %1 (%2)'");
	Если ИмяТаблицы = "Товары" Тогда
		ПредставлениеТаблицы = НСтр("ru='Товары';uk='Товари'");
	Иначе // ВозвратнаяТара
		ПредставлениеТаблицы = НСтр("ru='Возвратная тара';uk='Зворотна тара'");
	КонецЕсли;
	ЗаголовокПодбора = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ЗаголовокПодбора, Объект.Ссылка, ПредставлениеТаблицы);

	ВременнаяДатаРасчетов = ?(НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДата()), Неопределено, Объект.Дата);

	СтруктураПараметровПодбора = Новый Структура();
	СтруктураПараметровПодбора.Вставить("ДатаРасчетов",       ВременнаяДатаРасчетов);
	СтруктураПараметровПодбора.Вставить("ТипЦен",             Неопределено);
	СтруктураПараметровПодбора.Вставить("Валюта",             ВалютаРегламентированногоУчета);
	СтруктураПараметровПодбора.Вставить("ДоговорКонтрагента", Неопределено);
	СтруктураПараметровПодбора.Вставить("Контрагент",         Неопределено);
	СтруктураПараметровПодбора.Вставить("Организация",        Объект.Организация);
	СтруктураПараметровПодбора.Вставить("Склад",              Объект.Склад);
	СтруктураПараметровПодбора.Вставить("Подразделение",      Неопределено);
	СтруктураПараметровПодбора.Вставить("ЕстьКоличество",     Истина);
	СтруктураПараметровПодбора.Вставить("ЕстьЦена",           ЕстьЦена);
	СтруктураПараметровПодбора.Вставить("Заголовок",          ЗаголовокПодбора);
	СтруктураПараметровПодбора.Вставить("СписокПодборов",     СписокЗапросов);
	СтруктураПараметровПодбора.Вставить("ИмяТаблицы",         ИмяТаблицы);
	СтруктураПараметровПодбора.Вставить("Услуги",             Ложь);
	СтруктураПараметровПодбора.Вставить("ПоказыватьОстатки",  Истина);
	СтруктураПараметровПодбора.Вставить("ПоказыватьСчетУчета",Истина);

	ОткрытьФорму("Обработка.ПодборНоменклатуры.Форма.Форма", СтруктураПараметровПодбора, ЭтаФорма, УникальныйИдентификатор);

КонецПроцедуры

&НаСервере
// Выполняет необходимые действия после подбора
//
Процедура ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение, ИмяТаблицы)

	ТаблицаТоваров = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресПодобраннойНоменклатурыВХранилище);
	
	ДанныеОбъекта = Новый Структура("Дата, ВидОперации, Организация, Склад");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
	СоответствиеСчетовУчета = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаУчетаСпискаНоменклатуры(
		ДанныеОбъекта.Организация, ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаТоваров, "Номенклатура", Истина), ДанныеОбъекта.Склад, ДанныеОбъекта.Дата);
	
	Для Каждого СтрокаТовара Из ТаблицаТоваров Цикл
		
		СтруктураОтбора = Новый Структура("Номенклатура", СтрокаТовара.Номенклатура);
		Если ИмяТаблицы = "ВозвратнаяТара" Тогда
			СтруктураОтбора.Вставить("Цена",СтрокаТовара.Цена);
		Иначе	
			СтруктураОтбора.Вставить("ЕдиницаИзмерения",СтрокаТовара.ЕдиницаИзмерения);
		КонецЕсли;
		
		СтрокаТабличнойЧасти = НайтиСтрокуТабличнойЧасти(ИмяТаблицы, СтруктураОтбора);
		
		Если СтрокаТабличнойЧасти <> Неопределено Тогда
			// Нашли - увеличиваем количество.
			СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + СтрокаТовара.Количество;
			
		Иначе
			
			СтрокаТабличнойЧасти = Объект[ИмяТаблицы].Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтрокаТовара);
			
			СчетаУчета = СоответствиеСчетовУчета.Получить(СтрокаТабличнойЧасти.Номенклатура);
			
			Документы.ПередачаТоваров.ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(
				ДанныеОбъекта, СтрокаТабличнойЧасти, ИмяТаблицы, СчетаУчета);
			
		КонецЕсли;
		
	КонецЦикла;

	Если ИмяТаблицы = "ВозвратнаяТара" Тогда
		ЗаполненаВозвратнаяТара = (Объект.ВозвратнаяТара.Количество() > 0);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
// Выполняет необходимые действия после заполнения по продукции и спецификации
//
Процедура ОбработкаВыбораЗаполнить(ВыбранноеЗначение, ИмяТабличнойЧасти)

	Объект[ИмяТабличнойЧасти].Очистить();

	ТаблицаМатериалов = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресМатериаловВХранилище);

	Объект[ИмяТабличнойЧасти].Загрузить(ТаблицаМатериалов);

	ЗаполнитьСчетаУчетаВТабличнойЧастиНаСервере(ИмяТабличнойЧасти);

	Если ИмяТабличнойЧасти = "ВозвратнаяТара" Тогда
		ЗаполненаВозвратнаяТара = (Объект.ВозвратнаяТара.Количество() > 0);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
// Договор - это изменяемый параметр. Он будет очищен, если его вид не доступен при переданном виде операции.
Процедура ОпределитьСписокДоступныхВидовДоговоровПоОперации(ВидОперации, СписокВидовДоговоров, Договор = Неопределено)

	СписокВидовДоговоров = Новый СписокЗначений;

	СписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.Бартерный);
	
	Если ВидОперации = Перечисления.ВидыОперацийПередачаТоваров.ИзПереработки Тогда
		СписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПокупателем);
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПередачаТоваров.ВПереработку Тогда
		СписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком);
	КонецЕсли;

	// Проверить текущий договор
	Если ЗначениеЗаполнено(Договор) Тогда
		ВидДоговора = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Договор, "ВидДоговора");
		Если СписокВидовДоговоров.НайтиПоЗначению(ВидДоговора) = Неопределено Тогда
			// Договор не соответствует виду операции
			Договор = Неопределено;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ТоварыНоменклатураПриИзмененииНаСервере(СтрокаТабличнойЧасти, Знач ДанныеОбъекта)

	СведенияОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОНоменклатуре(
		СтрокаТабличнойЧасти.Номенклатура, ДанныеОбъекта);
	Если СведенияОНоменклатуре = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаТабличнойЧасти.ЕдиницаИзмерения		= СведенияОНоменклатуре.БазоваяЕдиницаИзмерения;
	СтрокаТабличнойЧасти.Коэффициент			= СведенияОНоменклатуре.Коэффициент;
	
	Документы.ПередачаТоваров.ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(
		ДанныеОбъекта, СтрокаТабличнойЧасти, "Товары", СведенияОНоменклатуре);

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ВозвратнаяТараНоменклатураПриИзмененииНаСервере(СтрокаТабличнойЧасти, Знач ДанныеОбъекта)

	СведенияОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОНоменклатуре(
		СтрокаТабличнойЧасти.Номенклатура, ДанныеОбъекта);
	Если СведенияОНоменклатуре = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Документы.ПередачаТоваров.ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(
		ДанныеОбъекта, СтрокаТабличнойЧасти, "ВозвратнаяТара", СведенияОНоменклатуре);

КонецПроцедуры

&НаКлиенте
Процедура ВопросПередЗаполнениемТабличнойЧастиПоОстаткамЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ЗаполнитьТоварыПоОстаткамНаСервере(ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.ПроизводствоИзДавальческогоСырья"));
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция НайтиСтрокуТабличнойЧасти(ИмяТабличнойЧасти, СтруктураОтбора)

	СтрокаТабличнойЧасти = Неопределено;

	МассивНайденныхСтрок = Объект[ИмяТабличнойЧасти].НайтиСтроки(СтруктураОтбора);
	Если МассивНайденныхСтрок.Количество() > 0 Тогда
		// Нашли. Вернем первую найденную строку.
		СтрокаТабличнойЧасти = МассивНайденныхСтрок[0];
	КонецЕсли;

	Возврат СтрокаТабличнойЧасти;

КонецФункции


#КонецОбласти	//СлужебныеПроцедурыИФункции

#Область СлужебныеПроцедурыИФункцииБСП

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти	//СлужебныеПроцедурыИФункцииБСП
