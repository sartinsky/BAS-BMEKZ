#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

Процедура ЗаполнитьСчетаУчетаРасчетов(Объект, Знач СчетаУчета = Неопределено) Экспорт
	
	Если СчетаУчета = Неопределено Тогда
		СчетаУчета = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаРасчетовСКонтрагентом(
			Объект.Организация, 
			Объект.Контрагент, 
			Объект.ДоговорКонтрагента);
	КонецЕсли;

	Объект.СчетУчетаРасчетовПоТаре = СчетаУчета.СчетУчетаТарыПокупателя;
	Объект.СчетУчетаРасчетовПоТареПоАвансам = СчетаУчета.СчетАвансовПоТареПокупателя;
	
КонецПроцедуры

// Заполняет счета учета номенклатуры в табличной части документа
//
Процедура ЗаполнитьСчетаУчетаВТабличнойЧасти(Объект, ИмяТабличнойЧасти) Экспорт

	ТабличнаяЧасть = Объект[ИмяТабличнойЧасти];
	
	ДанныеОбъекта = Новый Структура("Дата, ВидОперации, Организация, Склад");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
	СоответствиеСчетовУчета = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаУчетаСпискаНоменклатуры(
		ДанныеОбъекта.Организация, ОбщегоНазначения.ВыгрузитьКолонку(ТабличнаяЧасть, "Номенклатура", Истина), ДанныеОбъекта.Склад, ДанныеОбъекта.Дата);
	
	Для каждого СтрокаТабличнойЧасти Из ТабличнаяЧасть Цикл
		СчетаУчета = СоответствиеСчетовУчета.Получить(СтрокаТабличнойЧасти.Номенклатура);
		ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(ДанныеОбъекта, СтрокаТабличнойЧасти, ИмяТабличнойЧасти, СчетаУчета);
	КонецЦикла;

КонецПроцедуры

// Заполняет счета учета номенклатуры в строке табличной части документа
//
// Параметры:
//  ДанныеОбъекта         - структура данных объекта, используемых при заполнении счетов учета (вид операции,
//                          вид договора контрагента, признак комиссионной торговли и т.п.)
//  СтрокаТабличнойЧасти  - строка табличной части документа
//  ИмяТабличнойЧасти     - имя табличной части документа
//  СведенияОНоменклатуре - структура сведений о номенклатуре, либо стуктура счетов учета
//
Процедура ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(ДанныеОбъекта, СтрокаТабличнойЧасти, ИмяТабличнойЧасти, СведенияОНоменклатуре) Экспорт

	Если СведенияОНоменклатуре = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если СведенияОНоменклатуре.Свойство("СчетаУчета") Тогда
		// СведенияОНоменклатуре - структура сведений номенклатуры
		СчетаУчета = СведенияОНоменклатуре.СчетаУчета;
	ИначеЕсли СведенияОНоменклатуре.Свойство("СчетУчетаБУ") Тогда
		// СведенияОНоменклатуре - структура счетов учета номенклатуры
		СчетаУчета = СведенияОНоменклатуре;
	Иначе
		Возврат;
	КонецЕсли;
	
	Если ИмяТабличнойЧасти = "Товары" Тогда
		
		Если ЗначениеЗаполнено(СчетаУчета.СчетУчетаБУ) Тогда
			СтрокаТабличнойЧасти.СчетУчетаБУ = СчетаУчета.СчетУчетаБУ;
		КонецЕсли;
		
		Если ДанныеОбъекта.ВидОперации = Перечисления.ВидыОперацийПередачаТоваров.ВПереработку Тогда
			
			Если ЗначениеЗаполнено(СчетаУчета.СчетПередачиБУ) Тогда
				СтрокаТабличнойЧасти.СчетПередачиБУ = ПланыСчетов.ХОзрасчетный.МатериалыПереданныеВПереработку;
			КонецЕсли;
			
		ИначеЕсли ДанныеОбъекта.ВидОперации = Перечисления.ВидыОперацийПередачаТоваров.ИзПереработки Тогда
			
			Если ЗначениеЗаполнено(СчетаУчета.СчетУчетаБУ) Тогда
				СтрокаТабличнойЧасти.СчетПередачиБУ = СчетаУчета.СчетУчетаБУ;
			КонецЕсли;
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СчетаУчета.НалоговоеНазначение) Тогда
			СтрокаТабличнойЧасти.НалоговоеНазначение = СчетаУчета.НалоговоеНазначение;
		КонецЕсли;
		
	ИначеЕсли ИмяТабличнойЧасти = "ВозвратнаяТара" Тогда
		
		Если ЗначениеЗаполнено(СчетаУчета.СчетУчетаБУ) Тогда
			СтрокаТабличнойЧасти.СчетУчетаБУ = СчетаУчета.СчетУчетаБУ;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СчетаУчета.НалоговоеНазначение) Тогда
			СтрокаТабличнойЧасти.НалоговоеНазначение = СчетаУчета.НалоговоеНазначение;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СчетаУчета.НалоговоеНазначениеДоходовИЗатрат) Тогда
			СтрокаТабличнойЧасти.НалоговоеНазначениеДоходовИЗатрат = СчетаУчета.НалоговоеНазначениеДоходовИЗатрат;
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка)
	
	Если ВидФормы <> "ФормаДокумента"
		И ВидФормы <> "ФормаОбъекта" Тогда
		Возврат;
	КонецЕсли;

	ВидОперации = Неопределено; 

	Если Параметры.Свойство("Ключ") И ЗначениеЗаполнено(Параметры.Ключ) Тогда
		ВидОперации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Параметры.Ключ, "ВидОперации");
	КонецЕсли;

	// Если документ копируется, то вид операции получаем из копируемого документа.
	Если НЕ ЗначениеЗаполнено(ВидОперации) Тогда
		Если Параметры.Свойство("ЗначениеКопирования")
			И ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
			ВидОперации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
				Параметры.ЗначениеКопирования, "ВидОперации");
		КонецЕсли;
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(ВидОперации) Тогда
		Если Параметры.Свойство("ЗначенияЗаполнения") 
			И ТипЗнч(Параметры.ЗначенияЗаполнения) = Тип("Структура") Тогда
			Если Параметры.ЗначенияЗаполнения.Свойство("ВидОперации") Тогда
				ВидОперации = Параметры.ЗначенияЗаполнения.ВидОперации;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// При вводе на основании счета на оплату и поступления товаров и услуг, 
	// открывается форма, содержащая только ТЧ Товары или только ТЧ Услуги, если
	// у документа-основания заполнена только соответствующая таблица.
	Если НЕ ЗначениеЗаполнено(ВидОперации) Тогда
		Если Параметры.Свойство("Основание")
			И ЗначениеЗаполнено(Параметры.Основание) Тогда
			ВидОперации = ОпределитьВидОперацииПоДокументуОснованию(Параметры.Основание);
		КонецЕсли;
	КонецЕсли;

	СтандартнаяОбработка = Ложь;
	ФормыДокумента = ПолучитьСоответствиеВидовОперацийФормам();
	ВыбраннаяФорма = ФормыДокумента[ВидОперации];
	Если ВыбраннаяФорма = Неопределено Тогда
		ВыбраннаяФорма = "ФормаДокумента";
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПолучитьСоответствиеВидовОперацийФормам() Экспорт

	ФормыДокумента = Новый Соответствие;
	ФормыДокумента.Вставить(Перечисления.ВидыОперацийПередачаТоваров.ВПереработку, "ФормаДокументаОбщая");
	ФормыДокумента.Вставить(Перечисления.ВидыОперацийПередачаТоваров.ИзПереработки, "ФормаДокументаОбщая");
	
	Возврат ФормыДокумента;

КонецФункции

Функция ОпределитьВидОперацииПоДокументуОснованию(Основание) Экспорт

	ВидОперации = Перечисления.ВидыОперацийПередачаТоваров.ВПереработку;
	
	
	Возврат ВидОперации;

КонецФункции

#КонецОбласти

#Область ПроцедурыИФункцииПечати

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт

	// Расходная накладная
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "Накладная";
	КомандаПечати.Представление = НСтр("ru='Накладная';uk='Накладна'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечати";
	КомандаПечати.СписокФорм    = "ФормаСписка,ФормаВыбора,ФормаДокументаОбщая";
	
	// Реестр документов
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "Реестр";
	КомандаПечати.Представление = НСтр("ru='Реестр документов';uk='Реєстр документів'");
	КомандаПечати.ЗаголовокФормы= НСтр("ru='Реестр документов ""Передача товаров""';uk='Реєстр документів ""Передача товарів""'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечатиРеестраДокументов";
	КомандаПечати.СписокФорм    = "ФормаСписка";
	КомандаПечати.Порядок       = 100;
	
КонецПроцедуры

// Сформировать печатные формы объектов
//
// ВХОДЯЩИЕ:
//   ИменаМакетов    - Строка    - Имена макетов, перечисленные через запятую
//   МассивОбъектов  - Массив    - Массив ссылок на объекты которые нужно распечатать
//   ПараметрыПечати - Структура - Структура дополнительных параметров печати
//
// ИСХОДЯЩИЕ:
//   КоллекцияПечатныхФорм - Таблица значений - Сформированные табличные документы
//   ПараметрыВывода       - Структура        - Параметры сформированных табличных документов
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт

	ПараметрыВывода.ДоступнаПечатьПоКомплектно = Истина;

	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "Накладная") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "Накладная", НСтр("ru='Накладная';uk='Накладна'"), 
			ПечатьДокумента(МассивОбъектов, ОбъектыПечати, ПараметрыВывода),,"Документ.ПередачаТоваров.ПФ_MXL_Накладная", , Истина);
	КонецЕсли;
	
КонецПроцедуры

// Функция формирует табличный документ с печатной формой накладной,
//
// Возвращаемое значение:
//  Табличный документ - печатная форма накладной
//
Функция ПечатьДокумента(МассивОбъектов, ОбъектыПечати, ПараметрыВывода)
	УстановитьПривилегированныйРежим(Истина);

	ДопКолонка = Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
	Если ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул Тогда
		ВыводитьКоды    = Истина;
		Колонка         = "Артикул";
		ТекстКодАртикул = "Артикул";
	ИначеЕсли ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Код Тогда
		ВыводитьКоды    = Истина;
		Колонка         = "Код";
		ТекстКодАртикул = "Код";
	Иначе
		ВыводитьКоды    = Ложь;
		Колонка         = "";
		ТекстКодАртикул = "Код";
	КонецЕсли;

	Если ВыводитьКоды Тогда
		ОбластьШапки  = "ШапкаСКодом";
		ОбластьСтроки = "СтрокаСКодом";
	Иначе
		ОбластьШапки  = "ШапкаТаблицы";
		ОбластьСтроки = "Строка";
	КонецЕсли;
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПередачаТоваров_Накладная";

	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ПередачаТоваров.ПФ_MXL_Накладная");
	
	// печать производится на языке, указанном в настройках пользователя
	КодЯзыкаПечать = ПараметрыВывода.КодЯзыкаДляМногоязычныхПечатныхФорм;
	Макет.КодЯзыкаМакета = КодЯзыкаПечать;
	
	ПервыйДокумент = Истина;
	
	Для Каждого Ссылка Из МассивОбъектов Цикл	
		
		Если Не ПервыйДокумент Тогда
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ПервыйДокумент = Ложь;
		// Запомним номер строки, с которой начали выводить текущий документ.
		НомерСтрокиНачало = ТабДокумент.ВысотаТаблицы + 1;
	
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ТекущийДокумент", Ссылка);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Номер,
		|	Дата,
		|	ДоговорКонтрагента,
		|	ДоговорКонтрагента.Дата  		КАК ДоговорДата,
		|	ДоговорКонтрагента.Номер 		КАК ДоговорНомер,
		|	ДоговорКонтрагента.НаименованиеДляПечати КАК ДоговорНаименованиеДляПечати,
		|	ДоговорКонтрагента.ВидДоговора  КАК ВидДоговораКонтрагента,
		|	ПредставительОрганизации КАК ПредставительПоставщика,
		|	ВЫРАЗИТЬ(МестоСоставленияДокумента КАК СТРОКА(1000)) КАК МестоСоставленияДокумента,
		|	Организация,
		|	Контрагент  КАК Покупатель,
		|	Организация КАК Поставщик,
		|	ВидОперации,
		|	Склад,
		|	ДоверенностьСерия,
		|	ДоверенностьНомер,
		|	ДоверенностьДата,
		|	Получил,
		|	ПолучилПоДругомуДокументу,
		|	ДокументПодтверждающийПолномочия, 
		|	Константы.ВалютаРегламентированногоУчета КАК ВалютаДокумента
		|ИЗ
		|	Документ.ПередачаТоваров КАК ПередачаТоваров,
		|	Константы
		|
		|ГДЕ
		|	ПередачаТоваров.Ссылка = &ТекущийДокумент";
		Шапка = Запрос.Выполнить().Выбрать();
		Шапка.Следующий();

		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ТекущийДокумент", Ссылка);
		
		Запрос.УстановитьПараметр("ДатаНач", Новый Граница(Ссылка.Дата, ВидГраницы.Включая));
		Запрос.УстановитьПараметр("ДатаКон", Новый Граница(Ссылка.Дата, ВидГраницы.Включая));
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ВложенныйЗапросПоТоварам.Номенклатура,
		|	Номенклатура.НаименованиеПолное КАК Товар,
		|	ВложенныйЗапросПоТоварам.Номенклатура.Код КАК Код,
		|	ВложенныйЗапросПоТоварам.Номенклатура."+ ТекстКодАртикул + " КАК КодАртикул,
		|	ВложенныйЗапросПоТоварам.Количество,
		|	ВложенныйЗапросПоТоварам.ЕдиницаИзмерения.Наименование КАК ЕдиницаИзмерения,
		|   ВложенныйЗапросПоТоварам.НомерСтроки КАК НомерСтроки,
		|   СУММА(ЕСТЬNULL(ХозрасчетныйДвиженияССубконто.Сумма,0)) КАК Сумма	
		|ИЗ 
		|	(ВЫБРАТЬ
		|		Номенклатура         КАК Номенклатура,
		|		ЕдиницаИзмерения     КАК ЕдиницаИзмерения,
		|		СУММА(Количество)    КАК Количество,
		|		МИНИМУМ(НомерСтроки) КАК НомерСтроки
		|	ИЗ
		|		Документ.ПередачаТоваров.Товары КАК ПередачаТоваров
		|	ГДЕ
		|		ПередачаТоваров.Ссылка = &ТекущийДокумент
		|	СГРУППИРОВАТЬ ПО
		|		Номенклатура,
		|		ЕдиницаИзмерения
		|	) КАК ВложенныйЗапросПоТоварам
		|
		|   ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.ДвиженияССубконто(&ДатаНач, &ДатаКон, Регистратор = &ТекущийДокумент) КАК ХозрасчетныйДвиженияССубконто
		|   ПО ВложенныйЗапросПоТоварам.Номенклатура = ХозрасчетныйДвиженияССубконто.СубконтоКт1
		|
		|СГРУППИРОВАТЬ ПО
		|	ВложенныйЗапросПоТоварам.Номенклатура,
		|	Номенклатура.НаименованиеПолное,
		|	ВложенныйЗапросПоТоварам.Номенклатура.Код,
		|	ВложенныйЗапросПоТоварам.ЕдиницаИзмерения,
		|   ВложенныйЗапросПоТоварам.Количество,
		|   ВложенныйЗапросПоТоварам.НомерСтроки	
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки";
		ЗапросТовары = Запрос.Выполнить().Выгрузить();

		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ТекущийДокумент", Ссылка);
		Запрос.Текст = "ВЫБРАТЬ
		               |	ВложенныйЗапрос.Номенклатура,
					   |	ВложенныйЗапрос.Номенклатура.НаименованиеПолное КАК Товар,
					   |	ВложенныйЗапрос.Номенклатура."+ ТекстКодАртикул + " КАК КодАртикул,
					   |	ВложенныйЗапрос.Количество,
					   |	ВложенныйЗапрос.ЕдиницаИзмерения,
		               |	ВложенныйЗапрос.Цена,
		               |	ВложенныйЗапрос.Сумма,
		               |	ВложенныйЗапрос.НомерСтроки КАК НомерСтроки
		               |ИЗ
		               |	(ВЫБРАТЬ
		               |		ПередачаТоваров.Номенклатура КАК Номенклатура,
		               |		ПередачаТоваров.Номенклатура.БазоваяЕдиницаИзмерения.Наименование КАК ЕдиницаИзмерения,
		               |		ПередачаТоваров.Цена КАК Цена,
		               |		СУММА(ПередачаТоваров.Количество) КАК Количество,
		               |		СУММА(ПередачаТоваров.Сумма) КАК Сумма,
		               |		МИНИМУМ(ПередачаТоваров.НомерСтроки) КАК НомерСтроки
		               |	ИЗ
		               |		Документ.ПередачаТоваров.ВозвратнаяТара КАК ПередачаТоваров
		               |	
		               |	ГДЕ
		               |		ПередачаТоваров.Ссылка = &ТекущийДокумент
		               |	
		               |	СГРУППИРОВАТЬ ПО
		               |		ПередачаТоваров.Номенклатура,
		               |		ПередачаТоваров.Цена) КАК ВложенныйЗапрос
		               |
		               |УПОРЯДОЧИТЬ ПО
		               |	НомерСтроки";
		ЗапросТара = Запрос.Выполнить().Выгрузить();	
		
		ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
		Если Шапка.ВидОперации = Перечисления.ВидыОперацийПередачаТоваров.ВПереработку Тогда
			ОбластьМакета.Параметры.ТекстЗаголовка = ОбщегоНазначенияБПВызовСервера.СформироватьЗаголовокДокумента(Шапка, НСтр("ru='Расходная накладная (в переработку)';uk='Видаткова накладна (у переробку)'",КодЯзыкаПечать),КодЯзыкаПечать);
		Иначе	// готовая продукция
			ОбластьМакета.Параметры.ТекстЗаголовка = ОбщегоНазначенияБПВызовСервера.СформироватьЗаголовокДокумента(Шапка, НСтр("ru='Передача готовой продукции';uk='Передача готової продукції'",КодЯзыкаПечать),КодЯзыкаПечать);
		КонецЕсли; 

		ТабДокумент.Вывести(ОбластьМакета);

		СведенияОПокупателе = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Шапка.Покупатель, Шапка.Дата,,,КодЯзыкаПечать);
		СведенияОПоставщике = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Шапка.Поставщик, Шапка.Дата,,,КодЯзыкаПечать);

		ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");
		ОбластьМакета.Параметры.Заполнить(Шапка);
		ОбластьМакета.Параметры.ПредставлениеПоставщика = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОПоставщике, "ПолноеНаименование,",,КодЯзыкаПечать);	
		ОбластьМакета.Параметры.РеквизитыПоставщика =     ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОПоставщике, "НомерСчета,Банк,МФО,/,ЮридическийАдрес,Телефоны,/,КодПоЕДРПОУ,КодПоДРФО,ИНН,НомерСвидетельства,/,ИнформацияОСтатусеПлательщикаНалогов,",,КодЯзыкаПечать);
	    ТабДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Покупатель");
		ОбластьМакета.Параметры.Заполнить(Шапка);
	 	ОбластьМакета.Параметры.ПредставлениеПокупателя = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОПокупателе, "ПолноеНаименование,",,КодЯзыкаПечать);
		ОбластьМакета.Параметры.РеквизитыПокупателя		= ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОПокупателе,"Телефоны,",,КодЯзыкаПечать);
		ТабДокумент.Вывести(ОбластьМакета);

		// Выводим дополнительно информацию о договоре и сделке
		СписокДополнительныхПараметров = "ДоговорНаименованиеДляПечати,Склад,";
		МассивСтруктурСтрок = ОбщегоНазначенияБПВызовСервера.ДополнительнаяИнформация(Шапка,СписокДополнительныхПараметров,КодЯзыкаПечать);
		ОбластьМакета = Макет.ПолучитьОбласть("ДопИнформация");
	    Для каждого СтруктураСтроки Из МассивСтруктурСтрок Цикл
			ОбластьМакета.Параметры.Заполнить(СтруктураСтроки);
			ТабДокумент.Вывести(ОбластьМакета);
		КонецЦикла;
		
		// Вывести табличную часть
		ОбластьМакета = Макет.ПолучитьОбласть(ОбластьШапки);
		Если Шапка.ВидОперации = Перечисления.ВидыОперацийПередачаТоваров.ВПереработку Тогда
			ОбластьМакета.Параметры.Товар = НСтр("ru='Материалы';uk='Матеріали'",КодЯзыкаПечать);
		Иначе	// готовая продукция
			ОбластьМакета.Параметры.Товар = НСтр("ru='Продукция';uk='Продукція'",КодЯзыкаПечать);
		КонецЕсли; 
		Если ВыводитьКоды Тогда
			ОбластьМакета.Параметры.ИмяКодАртикул = ТекстКодАртикул;
		КонецЕсли;
		ТабДокумент.Вывести(ОбластьМакета);

		ОбластьМакета = Макет.ПолучитьОбласть(ОбластьСтроки);
		
		СуммаТоваров = 0;
		
		Для каждого ВыборкаСтрокТовары Из ЗапросТовары Цикл 

			Если НЕ ЗначениеЗаполнено(ВыборкаСтрокТовары.Номенклатура) Тогда
				Сообщить(НСтр("ru='В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.';uk='В одному з рядків не заповнене значення номенклатури - рядок під час друку буде пропущений.'"), СтатусСообщения.Важное);
				Продолжить;
			КонецЕсли;

			ОбластьМакета.Параметры.Заполнить(ВыборкаСтрокТовары);
			ОбластьМакета.Параметры.Товар 		= СокрЛП(ВыборкаСтрокТовары.Товар);
			ОбластьМакета.Параметры.НомерСтроки = ЗапросТовары.Индекс(ВыборкаСтрокТовары) + 1;
			
			ОбластьМакета.Параметры.Цена = ?( ВыборкаСтрокТовары.Количество = 0, ВыборкаСтрокТовары.Сумма, Окр(ВыборкаСтрокТовары.Сумма / ВыборкаСтрокТовары.Количество, 2, 1));
			ОбластьМакета.Параметры.Сумма = ВыборкаСтрокТовары.Сумма;
			
			СуммаТоваров = СуммаТоваров + ВыборкаСтрокТовары.Сумма;
					
			ТабДокумент.Вывести(ОбластьМакета);

		КонецЦикла;

		// Вывести Итого
		ОбластьМакета = Макет.ПолучитьОбласть("Итого");
		
		ОбластьМакета.Параметры.Всего = ОбщегоНазначенияБПВызовСервера.ФорматСумм(СуммаТоваров);	
		
		ТабДокумент.Вывести(ОбластьМакета);
		
		// выведем таблицу с возвратной тарой
		Если ЗапросТара.Количество() > 0 Тогда
			
			Если ВыводитьКоды Тогда
				ОбластьШапки  = "ШапкаТараСКодом";
				ОбластьСтроки = "СтрокаТараСКодом";
			Иначе
				ОбластьШапки  = "ШапкаТаблицыТара";
				ОбластьСтроки = "СтрокаТара";
			КонецЕсли;
			
			// сделаем отступ от основной таблицы
			ОбластьПробел = Макет.ПолучитьОбласть("Пробел");
			ТабДокумент.Вывести(ОбластьПробел);
			
			ОбластьМакета = Макет.ПолучитьОбласть(ОбластьШапки);
			Если ВыводитьКоды Тогда
				ОбластьМакета.Параметры.ИмяКодАртикул = ТекстКодАртикул;
			КонецЕсли;
			ТабДокумент.Вывести(ОбластьМакета);
			
			ОбластьМакета = Макет.ПолучитьОбласть("СтрокаТара");
			ОбластьМакета = Макет.ПолучитьОбласть(ОбластьСтроки);
			
			СуммаТара    = 0;
			
			Для каждого ВыборкаСтрокТара Из ЗапросТара Цикл 
				
				Если НЕ ЗначениеЗаполнено(ВыборкаСтрокТара.Номенклатура) Тогда
					Сообщить(НСтр("ru='В одной из строк не заполнено значение тары - строка при печати пропущена.';uk='В одному з рядків не заповнене значення тари - рядок під час друку буде пропущений.'"), СтатусСообщения.Важное);
					Продолжить;
				КонецЕсли;
				
				ОбластьМакета.Параметры.Заполнить(ВыборкаСтрокТара);
				ОбластьМакета.Параметры.НомерСтроки = ЗапросТара.Индекс(ВыборкаСтрокТара) + 1;
				ОбластьМакета.Параметры.Товар = СокрП(ВыборкаСтрокТара.Товар);			
				
				СуммаТара = СуммаТара + ВыборкаСтрокТара.Сумма;
				
				ТабДокумент.Вывести(ОбластьМакета);
				
			КонецЦикла;
			
			// Вывести Итого
			ОбластьМакета = Макет.ПолучитьОбласть("ИтогоТара");
			ОбластьМакета.Параметры.Всего = ОбщегоНазначенияБПВызовСервера.ФорматСумм(СуммаТара);
			ТабДокумент.Вывести(ОбластьМакета);
			
			// сделаем отступ 
			ТабДокумент.Вывести(ОбластьПробел);
		КонецЕсли;
		
		// Вывести Сумму прописью
		ОбластьМакета = Макет.ПолучитьОбласть("СуммаПрописью");
		ОбластьМакета.Параметры.ИтоговаяСтрока = НСтр("ru='Всего наименований ';uk='Всього найменувань '",КодЯзыкаПечать) + ЗапросТовары.Количество() + ?(СуммаТоваров = 0, "",НСтр("ru=', на сумму ';uk=', на суму '",КодЯзыкаПечать) + ОбщегоНазначенияБПВызовСервера.ФорматСумм(СуммаТоваров, Шапка.ВалютаДокумента))
												+ ?(ЗапросТара.Количество() = 0, "",  НСтр("ru='; возвратная тара ';uk='; зворотна тара '",КодЯзыкаПечать) + ЗапросТара.Количество() + НСтр("ru=', на сумму ';uk=', на суму '",КодЯзыкаПечать) + ОбщегоНазначенияБПВызовСервера.ФорматСумм(СуммаТара, Шапка.ВалютаДокумента)) + ".";
												 
		ТабДокумент.Вывести(ОбластьМакета);

		Если ЗначениеЗаполнено(Шапка.МестоСоставленияДокумента) Тогда
			ОбластьМакета = Макет.ПолучитьОбласть("МестоСоставления");
			ОбластьМакета.Параметры.МестоСоставления = СокрЛП(Шапка.МестоСоставленияДокумента);
			ТабДокумент.Вывести(ОбластьМакета);
		КонецЕсли; 
		
		// Вывести подписи
		ДанныеПредставителя = ОбщегоНазначенияБПВызовСервера.ДанныеФизЛица(Шапка.Организация,Шапка.ПредставительПоставщика, Шапка.Дата);
		ДанныеФизЛица = ИНАГРО_ЗарплатаКадрыРасширенный.ДанныеФизЛица(Шапка.Организация,Шапка.ПредставительПоставщика, Шапка.Дата);
		ДолжностьПредставителя = СокрЛП(ДанныеФизЛица.Должность);
		
		ДолжностьФИОПредставителя = ?(ЗначениеЗаполнено(ДолжностьПредставителя),ДолжностьПредставителя + " ","") + 
									?(ДанныеПредставителя.Фамилия = Неопределено,"",ДанныеПредставителя.Фамилия + " ") + 
									?(ДанныеПредставителя.Имя = Неопределено,"",ДанныеПредставителя.Имя + " ") +
									?(ДанныеПредставителя.Отчество = Неопределено,"",ДанныеПредставителя.Отчество);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
		ОбластьМакета.Параметры.Заполнить(Шапка);
		ОбластьМакета.Параметры.Ответственный = ДолжностьФИОПредставителя;
		ТабДокумент.Вывести(ОбластьМакета);
		Если Шапка.ПолучилПоДругомуДокументу Тогда
			ОбластьМакета = Макет.ПолучитьОбласть("ПодписиПоДругомуДокументу");
		Иначе			
			ОбластьМакета = Макет.ПолучитьОбласть("ПодписиПоДоверенности");
		КонецЕсли; 
		ОбластьМакета.Параметры.Заполнить(Шапка);
		ТабДокумент.Вывести(ОбластьМакета);
		// В табличном документе зададим имя области, в которую был 
		// выведен объект. Нужно для возможности печати покомплектно.
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабДокумент, 
			НомерСтрокиНачало, ОбъектыПечати, Ссылка);
		
	КонецЦикла;	
		
	Возврат ТабДокумент;

КонецФункции

Функция ПолучитьДополнительныеРеквизитыДляРеестра() Экспорт
	
	Результат = Новый Структура("Информация", "Контрагент");
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецЕсли