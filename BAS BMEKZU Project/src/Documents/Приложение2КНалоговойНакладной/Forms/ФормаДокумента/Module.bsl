
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("Основание") И ЗначениеЗаполнено(Параметры.Основание) Тогда
		
		НеОткрыватьФорму = Истина;
		
		Если ТипЗнч(Параметры.Основание) = Тип("ДокументСсылка.НалоговаяНакладная") И Не Параметры.Свойство("Сделка") Тогда
			
			НеобходимыеРеквизитыОснования = "Дата, Организация, Контрагент, ДоговорКонтрагента, ДоговорКонтрагента.ВедениеВзаиморасчетовНУ, Сделка";
			
			РеквизитыОснования = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Параметры.Основание, НеобходимыеРеквизитыОснования); 			
			Если  РеквизитыОснования.ДоговорКонтрагентаВедениеВзаиморасчетовНУ = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоРасчетнымДокументам
				И ТипЗнч(РеквизитыОснования.Сделка) <> Тип("ДокументСсылка.СчетНаОплатуПокупателю") И ЗначениеЗаполнено(РеквизитыОснования.ДоговорКонтрагента) Тогда
						
				ОткрытьФормуВыбораРасчетногоДокумента = Истина;
				
				ПараметрыОтбораРасчетногоДокумента = Новый Структура("Дата, Организация, Контрагент, ДоговорКонтрагента, НалоговаяНакладная",
					РеквизитыОснования.Дата, РеквизитыОснования.Организация, РеквизитыОснования.Контрагент, РеквизитыОснования.ДоговорКонтрагента, Параметры.Основание);
					
				Возврат;	
			КонецЕсли;
			
		КонецЕсли; 
		
		ВыполнитьЗаполнениеНаОсновании(Параметры);
		
	Иначе
		
		ПриСозданииНаСервереОсновыеДействия(Параметры);	
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если НЕ ПустаяСтрока(СлужебноеСообщение) Тогда
		
		ПодключитьОбработчикОжидания("СообщитьПользователюЛокально", 0.75, Истина);
	
	КонецЕсли;

	Если ОткрытьФормуВыбораРасчетногоДокумента Тогда
		Если ТипЗнч(ПараметрыОтбораРасчетногоДокумента) = Тип("Структура") Тогда
			ОткрытьФорму("Документ.Приложение2КНалоговойНакладной.Форма.ФормаВыбораРасчетногоДокумента", ПараметрыОтбораРасчетногоДокумента);	
		КонецЕсли; 
		
		Отказ = Истина;
		
		Возврат;
	КонецЕсли; 
	
	Если НеОткрыватьФорму = Ложь Тогда
		// СтандартныеПодсистемы.ПодключаемыеКоманды
		ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
		// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
		
		Возврат;
	КонецЕсли;
	
	Для Сч = 1 По ЭтотОбъект["КоличествоОбъектовДляОткрытия"] Цикл
		
		ФормаНовогоОбъекта = ПолучитьФорму(ЭтотОбъект["ИмяФормы" + Формат(Сч, "ЧГ=")], , , Новый УникальныйИдентификатор);	
		
		КопироватьДанныеФормы(ЭтотОбъект["ОбъектДляОткрытия" + Формат(Сч, "ЧГ=")], ФормаНовогоОбъекта.Объект); 
		ФормаНовогоОбъекта.Модифицированность = Истина;
		
		Если ФормаНовогоОбъекта.ИмяФормы = "Документ.Приложение2КНалоговойНакладной.Форма.ФормаДокумента" Тогда
			ФормаНовогоОбъекта.ПодготовитьФормуНаСервере();
		КонецЕсли;
		ФормаНовогоОбъекта.Открыть();
		
		Если Найти(ЭтотОбъект["ИмяФормы" + Формат(Сч, "ЧГ=")], "Обработка.ФормированиеНалоговыхНакладных.") > 0  Тогда
		    ФормаНовогоОбъекта.ТекущийЭлемент = ФормаНовогоОбъекта.Элементы.ГруппаСтраницаДанные;
		КонецЕсли;
		
	КонецЦикла;
	
	// эту форму - не открываем
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)

	Если ИмяСобытия = "СтрокиНоменклатурногоСоставаПреобразованы" И Параметр = Объект.Ссылка Тогда
		ОбновитьОтображениеДанных();
	Иначе
		ОбщегоНазначенияБПКлиент.ОбработкаОповещенияФормыДокумента(ЭтаФорма, Объект.Ссылка, ИмяСобытия, Параметр, Источник);
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом

	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	ПодготовитьФормуНаСервере();

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)

	Если ИсточникВыбора.ИмяФормы = "Обработка.ПодборНоменклатуры.Форма.Форма" Тогда
		ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение, ИсточникВыбора.ИмяТаблицы);
		
		ЗаполнитьДобавленныеКолонкиТаблиц(ИсточникВыбора.ИмяТаблицы);
		
		ОбновитьИтоги(ЭтаФорма);
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	ЗаполнитьДобавленныеКолонкиТаблиц();
	ОбновитьИтоги(ЭтотОбъект);
	
	УстановитьЗаголовокФормы(ЭтаФорма);
	
	УстановитьСостояниеДокумента();
	
	// Авторасчет НДС
	ПерерасчетПроизведен = Истина;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДоговорКонтрагентаПриИзменении(Элемент)

	Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		ДоговорКонтрагентаПриИзмененииНаСервере();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВидОперацииПриИзменении(Элемент)
	
	ВидОперацииОбработатьИзменение();

	УстановитьЭлементыФормыПоВидуОперации();			
	
	УправлениеФормой(ЭтаФорма);
	
	
КонецПроцедуры

&НаСервере
Процедура ВидОперацииОбработатьИзменение() Экспорт
	
	Если Не ЗначениеЗаполнено(Объект.ВидОперации) Тогда
		Возврат;
	КонецЕсли;
	
	Если    Объект.ВидОперации = Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.ИтоговаяРозницаОблагаемыеОперацииВозврат
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.ИтоговаяРозницаОсвобожденныеОперацииВозврат 
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.УсловнаяПродажаВозврат
		Тогда
		
		Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
			Объект.Контрагент = Неопределено;
		КонецЕсли;
		Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
			Объект.ДоговорКонтрагента = Неопределено;
		КонецЕсли;
		Если ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
			Объект.ДокументОснование = Неопределено;
		КонецЕсли;
		Если ЗначениеЗаполнено(Объект.Сделка) Тогда
			Объект.Сделка = Неопределено;
		КонецЕсли;
		
		Объект.ВалютаДокумента = ВалютаРегламентированногоУчета;
		
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.СводнаяНаПревышениеБазыНадЦенойПоставки Тогда
		
		Если Объект.НалоговаяНакладная.ПродажаНижеОбычнойЦены И ЗначениеЗаполнено(Объект.НалоговаяНакладная.НалоговаяДляРезерваНомераПриПродажаНижеОбычнойЦены) Тогда
			Объект.НалоговаяНакладная = Объект.НалоговаяНакладная.НалоговаяДляРезерваНомераПриПродажаНижеОбычнойЦены;
		КонецЕсли;
		
		Объект.ВалютаДокумента 		   = ВалютаРегламентированногоУчета;
		Объект.КратностьВзаиморасчетов = 1;
		Объект.КурсВзаиморасчетов 	   = 1;
		Объект.Контрагент = Неопределено;
		Объект.ДоговорКонтрагента = Неопределено;
		Объект.ДокументОснование = Неопределено;
		Объект.Сделка = Неопределено;
		
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.РозницаКонрагентуОблагаемыеОперацииВозврат
		  ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.РозницаКонрагентуОсвобожденныеОперацииВозврат Тогда
		  
		Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
			Объект.ДоговорКонтрагента = Неопределено;
		КонецЕсли;
		Если ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
			Объект.ДокументОснование = Неопределено;
		КонецЕсли;
		
		Объект.ВалютаДокумента = ВалютаРегламентированногоУчета;

	КонецЕсли;
	
	Для каждого СтрокаТЧ из Объект.Товары Цикл
		ЗаполнитьСтавкуНДС(СтрокаТЧ,Объект);
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТЧ, Объект.СуммаВключаетНДС);
		РассчитатьСуммыИзменений(СтрокаТЧ, "Товары");
		ЗаполнитьСтатьюДекларацииНДСНалоговыеОбязательства(Объект, СтрокаТЧ, "Товары");		
	КонецЦикла;
	
	Для каждого СтрокаТЧ из Объект.Услуги Цикл
		ЗаполнитьСтавкуНДС(СтрокаТЧ,Объект);
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТЧ, Объект.СуммаВключаетНДС);
		РассчитатьСуммыИзменений(СтрокаТЧ, "Услуги");
		ЗаполнитьСтатьюДекларацииНДСНалоговыеОбязательства(Объект, СтрокаТЧ, "Услуги");		
	КонецЦикла;
	
	Для каждого СтрокаТЧ из Объект.ОС Цикл
		//необходимо перезаполнить ставки НДС в табличных частях
		СписокНовыхСтавокНДС = Документы.Приложение2КНалоговойНакладной.ОпределитьДопустимыеСтавкиНДС(Объект);	
		Если СписокНовыхСтавокНДС.Количество() > 1 Тогда
			НоваяСтавкаНДС = Перечисления.СтавкиНДС.НДС20;
		Иначе
			НоваяСтавкаНДС = СписокНовыхСтавокНДС[0].Значение;
		КонецЕсли;
		СтрокаТЧ.СтавкаНДС = НоваяСтавкаНДС;
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТЧ, Объект.СуммаВключаетНДС);
		РассчитатьСуммыИзменений(СтрокаТЧ, "ОС");		
		ЗаполнитьСтатьюДекларацииНДСНалоговыеОбязательства(Объект, СтрокаТЧ, "ОС");		
	КонецЦикла;
 	
	Для каждого СтрокаТЧ из Объект.НМА Цикл
		//необходимо перезаполнить ставки НДС в табличных частях
		СписокНовыхСтавокНДС = Документы.Приложение2КНалоговойНакладной.ОпределитьДопустимыеСтавкиНДС(Объект);	
		Если СписокНовыхСтавокНДС.Количество() > 1 Тогда
			НоваяСтавкаНДС = Перечисления.СтавкиНДС.НДС20;
		Иначе
			НоваяСтавкаНДС = СписокНовыхСтавокНДС[0].Значение;
		КонецЕсли;
		СтрокаТЧ.СтавкаНДС = НоваяСтавкаНДС;
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТЧ, Объект.СуммаВключаетНДС);
		РассчитатьСуммыИзменений(СтрокаТЧ, "НМА");		
		ЗаполнитьСтатьюДекларацииНДСНалоговыеОбязательства(Объект, СтрокаТЧ, "НМА");		
	КонецЦикла;
	
	Если  Объект.ВидОперации = Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.ИтоговаяРозницаОблагаемыеОперацииВозврат
	  ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.ИтоговаяРозницаОсвобожденныеОперацииВозврат 
	  ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.РозницаКонрагентуОблагаемыеОперацииВозврат 
	  ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.РозницаКонрагентуОсвобожденныеОперацииВозврат Тогда
		Объект.СчетУчетаНДС = ПланыСчетов.Хозрасчетный.НалоговыеОбязательстваРозница;
	ИначеЕсли Объект.НалоговаяНакладная.ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.УсловнаяПродажа 
	  ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.УсловнаяПродажаВозврат Тогда
		Объект.СчетУчетаНДС = ПланыСчетов.Хозрасчетный.УсловнаяПродажа;	
	Иначе
		СчетаУчета   = БухгалтерскийУчетРасчетовСКонтрагентами.ПолучитьСчетаРасчетовСКонтрагентом(Объект.Организация, Объект.Контрагент, Объект.ДоговорКонтрагента);
		Объект.СчетУчетаНДС = СчетаУчета.СчетУчетаНДСПродаж;
	КонецЕсли;	
		
	УстановитьЗаголовокФормы(ЭтаФорма);

	Документы.Приложение2КНалоговойНакладной.УстановитьТипПричиныНевыдачиПокупателюПоУмолчанию(Объект,ВалютаРегламентированногоУчета);
	
	ПроверитьНомерНалоговогоДокументаНаСервере();
	
	УстановитьЗаголовокФормы(ЭтаФорма);
	
	УстановитьПараметрыВыбора();	
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	Если НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДатаДокумента) Тогда
		// Изменение времени не влияет на поведение документа.
		ТекущаяДатаДокумента = Объект.Дата;
		Возврат;
	КонецЕсли;

	// Общие проверки условий по датам.
	ТребуетсяВызовСервера = ОбщегоНазначенияБПКлиент.ТребуетсяВызовСервераПриИзмененииДатыДокумента(Объект.Дата, 
		ТекущаяДатаДокумента, Объект.ВалютаДокумента, ВалютаРегламентированногоУчета);
	
	// Если определили, что изменение даты может повлиять на какие-либо параметры, 
	// то передаем обработку на сервер.
	Если ТребуетсяВызовСервера Тогда
		ДатаПриИзмененииНаСервере();
	КонецЕсли;
	
	ПроверитьНомерНалоговогоДокументаНаСервере();
	
	// Запомним новую дату документа.
	ТекущаяДатаДокумента = Объект.Дата;
	
	// Покажем оповещение о появлении механизма рабочей даты.
	Если НастройкиПредупреждений.РабочаяДатаИзДокумента 
		И НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ОбщегоНазначенияБПКлиент.ПоказатьПредупреждениеОбИзменениях("РабочаяДатаИзДокумента", , НастройкиПредупреждений);
	КонецЕсли;
	
	ОбновитьИтоги(ЭтаФорма);

КонецПроцедуры

&НаСервере
Процедура ДатаПриИзмененииНаСервере()
	
	УстановитьФункциональныеОпцииФормы();
	
	Если (Объект.ВалютаДокумента <> ЭтаФорма.ВалютаРегламентированногоУчета) Тогда
		СтруктураКурсаДокумента        = РаботаСКурсамиВалют.ПолучитьКурсВалюты(Объект.ВалютаДокумента, Объект.Дата);
		Объект.КурсВзаиморасчетов      = СтруктураКурсаДокумента.Курс;
		Объект.КратностьВзаиморасчетов = СтруктураКурсаДокумента.Кратность;
	КонецЕсли;
	
	УстановитьЗаголовкиКолонок();
	
	УправлениеФормойНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)

	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		ОрганизацияПриИзмененииНаСервере();
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()
	
	Объект.НалоговаяНакладная = Неопределено;
	Объект.Сделка 			  = Неопределено;
	Объект.ДокументОснование  = Неопределено;	
	
	ПроверитьНомерНалоговогоДокументаНаСервере();		
	
	УстановитьФункциональныеОпцииФормы();
	
	УправлениеФормойНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	КонтрагентПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура КонтрагентПриИзмененииНаСервере()
	
	Если НЕ ЗначениеЗаполнено(Объект.Контрагент) Тогда
		Возврат;
	КонецЕсли;
	
	БухгалтерскийУчетПереопределяемый.УстановитьДоговорКонтрагента(
		Объект.ДоговорКонтрагента, Объект.Контрагент, Объект.Организация);
		
	Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		ДоговорКонтрагентаПриИзмененииНаСервере();
	КонецЕсли;
	
	Документы.Приложение2КНалоговойНакладной.УстановитьТипПричиныНевыдачиПокупателюПоУмолчанию(Объект,ЭтаФорма.ВалютаРегламентированногоУчета);
	
	УправлениеФормойНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура СделкаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;

	ПараметрыОбъекта = Новый Структура;
	ПараметрыОбъекта.Вставить("Дата"                 , Объект.Дата);
	ПараметрыОбъекта.Вставить("ДоговорКонтрагента"   , Объект.ДоговорКонтрагента);
	ПараметрыОбъекта.Вставить("Контрагент"           , Объект.Контрагент);
	ПараметрыОбъекта.Вставить("Организация"          , Объект.Организация);
	ПараметрыОбъекта.Вставить("ТипыДокументов"       , "Метаданные.Документы.Приложение2КНалоговойНакладной.Реквизиты.Сделка.Тип");

	ПараметрыФормы = Новый Структура("ПараметрыОбъекта", ПараметрыОбъекта);
	ОткрытьФорму("Документ.ДокументРасчетовСКонтрагентом.ФормаВыбора", ПараметрыФормы, Элемент);
		
КонецПроцедуры

&НаКлиенте
Процедура СделкаПриИзменении(Элемент)
	
	Объект.ДокументОснование = Неопределено;
	
	ДанныеОбъекта = ДанныеОбъекта(ЭтаФорма);
	ЗаполнитьУсловиеПродажиНаСервере(ДанныеОбъекта);
	
	Объект.УсловиеПродажи = ДанныеОбъекта.УсловиеПродажи;
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументОснованиеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если НЕ ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		Сообщить(НСтр("ru='Не выбран договор контрагента!';uk='Не обраний договір контрагента!'"));
		Возврат;
	КонецЕсли;
	
	СтруктураОтбора = Новый Структура();
	СтруктураОтбора.Вставить("Организация", 		Объект.Организация);
	СтруктураОтбора.Вставить("Контрагент", 			Объект.Контрагент);
	СтруктураОтбора.Вставить("ДоговорКонтрагента", Объект.ДоговорКонтрагента);
	
	Если ЗначениеЗаполнено(Объект.Сделка) Тогда
		СтруктураОтбора.Вставить("Сделка"            , Объект.Сделка);
		СтруктураОтбора.Вставить("СделкаПоРеализации", Объект.Сделка);
	КонецЕсли;
	
	ДанныеОбъекта = Новый Структура("ВидОперации, Сделка, ДокументОснование");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
	СписокТипов = ПолучитьСписокТиповДляВыбораДокументаОснования(ДанныеОбъекта);
	
	ВыбранныйЭлемент = Неопределено;
	
	ЭтаФорма.ПоказатьВыборИзСписка(Новый ОписаниеОповещения("ДокументОснованиеНачалоВыбораЗавершение", ЭтотОбъект, Новый Структура("СтруктураОтбора, Элемент", СтруктураОтбора, Элемент)), СписокТипов, Элементы.ДокументОснование);
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументОснованиеНачалоВыбораЗавершение(ВыбранныйЭлемент1, ДополнительныеПараметры) Экспорт
    
    СтруктураОтбора = ДополнительныеПараметры.СтруктураОтбора;
    Элемент = ДополнительныеПараметры.Элемент;
    
    ВыбранныйЭлемент = ВыбранныйЭлемент1;
    
    Если ВыбранныйЭлемент = Неопределено Тогда // Отказ от выбора
        Возврат;
    ИначеЕсли  ВыбранныйЭлемент.Значение = Объект.Сделка Тогда
        Объект.ДокументОснование = Объект.Сделка;
        Возврат;
    КонецЕсли;
    
    ВыбранныйТип = ВыбранныйЭлемент.Значение;
    
    Если ТипЗнч(Объект.ДокументОснование) <> Тип("ДокументСсылка." + ВыбранныйТип) Тогда
        Объект.ДокументОснование = ПредопределенноеЗначение("Документ." +ВыбранныйТип+".ПустаяСсылка");
    КонецЕсли; 
	
	Если ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.СписаниеСРасчетногоСчета") Или 
		 ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.РасходныйКассовыйОрдер") Тогда
		Если СтруктураОтбора.Свойство("ДоговорКонтрагента") Тогда
			СтруктураОтбора.Удалить("ДоговорКонтрагента");
		КонецЕсли;
	КонецЕсли; 
	
    ПараметрыОткрытия = Новый Структура();
    ПараметрыОткрытия.Вставить("Отбор", СтруктураОтбора);
    Если ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
        ПараметрыОткрытия.Вставить("ТекущаяСтрока", Объект.ДокументОснование);
    КонецЕсли;
    ФормаВыбора = ОткрытьФорму("Документ." +ВыбранныйТип+".ФормаВыбора", ПараметрыОткрытия, Элемент);

КонецПроцедуры

&НаКлиенте
Процедура ДокументОснованиеПриИзменении(Элемент)
	
	ДанныеОбъекта = ДанныеОбъекта(ЭтаФорма);
	
	ЗаполнитьУсловиеПродажиНаСервере(ДанныеОбъекта);
	
	Объект.УсловиеПродажи = ДанныеОбъекта.УсловиеПродажи;
	
КонецПроцедуры

&НаКлиенте
Процедура НалоговаяНакладнаяНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	НовыйМассивПараметров = Новый Массив();

	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПриложение2КНалоговойНакладной.СводнаяНаПревышениеБазыНадЦенойПоставки") Тогда
		ВидыОпераций = Новый Массив(2);
		ВидыОпераций[0] = ПредопределенноеЗначение("Перечисление.ВидыОперацийНалоговаяНакладная.ОблагаемыеОперации");
		ВидыОпераций[1] = ПредопределенноеЗначение("Перечисление.ВидыОперацийНалоговаяНакладная.СводнаяНаПревышениеБазыНадЦенойПоставки");
		НовыйПараметр = Новый ПараметрВыбора("Отбор.ВидОперации", ВидыОпераций);
		НовыйМассивПараметров.Добавить(НовыйПараметр);
	Иначе
		НовыйПараметр = Новый ПараметрВыбора("Отбор.Организация", Объект.Организация);
		НовыйМассивПараметров.Добавить(НовыйПараметр);

		НовыйПараметр = Новый ПараметрВыбора("Отбор.Контрагент", Объект.Контрагент);
		НовыйМассивПараметров.Добавить(НовыйПараметр);
		
		НовыйПараметр = Новый ПараметрВыбора("Отбор.ДоговорКонтрагента", Объект.ДоговорКонтрагента);
		НовыйМассивПараметров.Добавить(НовыйПараметр);
		
		Если  НЕ ВедениеВзаиморасчетовНУ = ПредопределенноеЗначение("Перечисление.ВедениеВзаиморасчетовПоДоговорам.ПоРасчетнымДокументам")
			   И ЗначениеЗаполнено(Объект.Сделка) Тогда
			   
			   НовыйПараметр = Новый ПараметрВыбора("Отбор.Сделка", Объект.Сделка);
			   НовыйМассивПараметров.Добавить(НовыйПараметр);
			
		КонецЕсли;
	КонецЕсли; 
	
	НовыеПараметрыВыбора = Новый ФиксированныйМассив(НовыйМассивПараметров);
	Элементы.НалоговаяНакладная.ПараметрыВыбора = НовыеПараметрыВыбора;
	
КонецПроцедуры

&НаКлиенте
Процедура НалоговаяНакладнаяПриИзменении(Элемент)
	НалоговаяНакладнаяПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура НалоговаяНакладнаяПриИзмененииНаСервере()
	
	Если  ЗначениеЗаполнено(Объект.НалоговаяНакладная)
		И Объект.ДоговорКонтрагента.ВедениеВзаиморасчетовНУ = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоРасчетнымДокументам 
		И ТипЗнч(Объект.НалоговаяНакладная.Сделка) = Тип("ДокументСсылка.СчетНаОплатуПокупателю") Тогда
		
		Объект.Сделка = Объект.НалоговаяНакладная.Сделка;
		
	КонецЕсли;
	
	Объект.СпецРежимНалогообложения     = Объект.НалоговаяНакладная.СпецРежимНалогообложения;
	Объект.ТипПричиныНевыдачиПокупателю = Объект.НалоговаяНакладная.ТипПричиныНевыдачиПокупателю;
	ПроверитьНомерНалоговогоДокументаНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура СчетНДСПриИзменении(Элемент)
	
	ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3",
		"СубконтоКт1", "СубконтоКт2", "СубконтоКт3");
	ПоляОбъекта.Вставить("Организация",   Объект.Организация);
	БухгалтерскийУчетКлиентСервер.ПриИзмененииСчета(Объект.СчетНДС, Объект, ПоляОбъекта);
	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма);
	
	УправлениеФормой(ЭтаФорма);
	
	Элементы.ДекорацияСРасшифровкойСчета.Заголовок = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Объект.СчетНДС).Наименование;
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоКт1ПриИзменении(Элемент)
	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоКт2ПриИзменении(Элемент)
	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоКт3ПриИзменении(Элемент)
	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура СчетДтПриИзменении(Элемент)
	
	ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3",
		"СубконтоДт1", "СубконтоДт2", "СубконтоДт3");
	ПоляОбъекта.Вставить("Организация",   Объект.Организация);
	БухгалтерскийУчетКлиентСервер.ПриИзмененииСчета(Объект.СчетДт, Объект, ПоляОбъекта);
	
	ИзменитьПараметрыВыбораПолейСубконтоДт(ЭтаФорма);
	
	УправлениеФормой(ЭтаФорма);
	
	Элементы.ДекорацияСРасшифровкойСчетаДт.Заголовок = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Объект.СчетДт).Наименование;
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоДт1ПриИзменении(Элемент)
	
	ИзменитьПараметрыВыбораПолейСубконтоДт(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоДт2ПриИзменении(Элемент)
	
	ИзменитьПараметрыВыбораПолейСубконтоДт(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоДт3ПриИзменении(Элемент)
	
	ИзменитьПараметрыВыбораПолейСубконтоДт(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(
		Элемент.ТекстРедактирования,
		ЭтотОбъект,
		"Объект.Комментарий"
	);

КонецПроцедуры

&НаКлиенте
Процедура ФормаРасчетовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	// Подготовим список для выбора из часто встречающихся вариантов заполнения этого реквизита
	ФормыОплаты = Новый СписокЗначений();
	ФормыОплаты.Добавить("Готівка");
	Если ДатаВступленияВСилуПриказа1379 <= Объект.Дата И Объект.Дата < '2014-03-01' ИЛИ Объект.Дата >= '2015-01-01' Тогда
		ФормыОплаты.Добавить("Оплата з поточного рахунка");
	Иначе
	    ФормыОплаты.Добавить("Оплата з поточного рахунку");
	КонецЕсли;
	ФормыОплаты.Добавить("Бартер");
	ФормыОплаты.Добавить("Чек");
	
	ОповещениеВыбора = Новый ОписаниеОповещения("ВыборИзСпискаЗавершение", ЭтаФорма);
	ПоказатьВыборИзСписка(ОповещениеВыбора, ФормыОплаты, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборИзСпискаЗавершение(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныйЭлемент <> Неопределено Тогда
		
		Объект.ФормаРасчетов = ВыбранныйЭлемент.Значение;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СпецРежимНалогообложенияПриИзменении(Элемент)
	
	ЭлементСпискаЗначений = Элемент.СписокВыбора.НайтиПоЗначению(Объект.СпецРежимНалогообложения);
	РасшифровкаСпецРежимНалогообложения = ?(ЭлементСпискаЗначений = Неопределено, "", ЭлементСпискаЗначений.Представление);

КонецПроцедуры

&НаКлиенте
Процедура ТипПричиныНевыдачиПокупателюПриИзменении(Элемент)
	
	ЭлементСпискаЗначений = Элемент.СписокВыбора.НайтиПоЗначению(Объект.ТипПричиныНевыдачиПокупателю);
	РасшифровкаТипПричиныНевыдачи = ?(ЭлементСпискаЗначений = Неопределено, "", ЭлементСпискаЗначений.Представление);
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ЦеныИВалютаНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОбработатьИзмененияПоКнопкеЦеныИВалюты();
	
КонецПроцедуры

&НаКлиенте
Процедура ВключаетсяВУточняющийРасчетПриИзменении(Элемент)
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ВидДоговораНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормыВыбора = Новый Структура("ТекущаяСтрока", ПолучитьСсылкуНаВидДоговораПоГКПоНаименованию(Объект.ВидДоговора));
	
	ОткрытьФорму("Справочник.ВидыДоговоровПоГК.ФормаВыбора", ПараметрыФормыВыбора, Элемент);

КонецПроцедуры

&НаКлиенте
Процедура ДатаПолученияПокупателемНеРавнаДатеДокументаПриИзменении(Элемент)
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаВключенияВЕдиныйРеестрНалоговыхНакладныхПриИзменении(Элемент)
	
	Объект.ВключенаВЕдиныйРеестрНалоговыхНакладных =  ЗначениеЗаполнено(Объект.ДатаВключенияВЕдиныйРеестрНалоговыхНакладных);
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаВключенияВЕдиныйРеестрНалоговыхНакладныхОчистка(Элемент, СтандартнаяОбработка)
	
	Объект.ВключенаВЕдиныйРеестрНалоговыхНакладных = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ВключенаВЕдиныйРеестрНалоговыхНакладныхПриИзменении(Элемент)
	
	Если Объект.ВключенаВЕдиныйРеестрНалоговыхНакладных Тогда
		
		Объект.ДатаВключенияВЕдиныйРеестрНалоговыхНакладных = Объект.Дата;	
		
	Иначе	
		
		Объект.ДатаВключенияВЕдиныйРеестрНалоговыхНакладных = '0001-01-01';	
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИНАГРО_НаправлениеОперацииПриИзменении(Элемент) // ИНАГРО
	
	ЭлементСпискаЗначений 		  = Элементы.ИНАГРО_НаправлениеОперации.СписокВыбора.НайтиПоЗначению(Объект.ИНАГРО_НаправлениеОперации);
	РасшифровкаИНАГРО_НаправлениеОперации = ?(ЭлементСпискаЗначений = Неопределено, "", ЭлементСпискаЗначений.Представление); 

КонецПроцедуры   

#КонецОбласти   //ОбработчикиСобытийЭлементовШапкиФормы

#Область ОбработчикиСобытийТабличныхЧастей

#Область ОбработчикиСобытийТЧ_Товары

&НаКлиенте
Процедура ТоварыПриИзменении(Элемент)

	ОбновитьИтоги(ЭтаФорма);
	// Авторасчет НДС
	ПерерасчетПроизведен = Ложь;

КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если НЕ НоваяСтрока И ОтменаРедактирования Тогда
		ОбновитьИтоги(ЭтаФорма);
		// Авторасчет НДС
		ПерерасчетПроизведен = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	
	ДанныеСтрокиТаблицы = ДанныеСтрокиТабличнойЧасти(СтрокаТабличнойЧасти,"Товары");
	ДанныеОбъекта = ДанныеОбъекта(ЭтаФорма);
	
	// заполняем ставку НДС
	ЗаполнитьСтавкуНДС(ДанныеСтрокиТаблицы,ДанныеОбъекта);
	
	ПараметрыОбработки = Новый Структура();
	ПараметрыОбработки.Вставить("ДанныеСтрокиТаблицы", 	ДанныеСтрокиТаблицы);
	ПараметрыОбработки.Вставить("ДанныеОбъекта", 		ДанныеОбъекта);
	
	ТоварыНоменклатураПриИзмененииНаСервере(
		ПараметрыОбработки.ДанныеСтрокиТаблицы, ПараметрыОбработки.ДанныеОбъекта);
	
	ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ПараметрыОбработки.ДанныеСтрокиТаблицы);

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ТоварыНоменклатураПриИзмененииНаСервере(СтрокаТабличнойЧасти, ДанныеОбъекта)

	СведенияОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОНоменклатуре(
							СтрокаТабличнойЧасти.Номенклатура, ДанныеОбъекта);
	Если СведенияОНоменклатуре = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаТабличнойЧасти.ЕдиницаИзмерения		= СведенияОНоменклатуре.БазоваяЕдиницаИзмерения;
	СтрокаТабличнойЧасти.Коэффициент			= СведенияОНоменклатуре.Коэффициент;
	СтрокаТабличнойЧасти.Цена					= СведенияОНоменклатуре.Цена;
	
	Документы.Приложение2КНалоговойНакладной.ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(
										ДанныеОбъекта, СтрокаТабличнойЧасти, "Товары");
				
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ДанныеОбъекта.СуммаВключаетНДС);
	
	РассчитатьСуммыИзменений(СтрокаТабличнойЧасти, "Товары");
	
	Документы.Приложение2КНалоговойНакладной.УстановитьКодУКТВЭДВстрокеТоваров(СтрокаТабличнойЧасти);	
	
	ЗаполнитьДобавленныеКолонкиСтрокиТаблицы(СтрокаТабличнойЧасти, ДанныеОбъекта);

КонецПроцедуры

&НаКлиенте
Процедура ТоварыКодУКТВЭДНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	НачалоВыбораНоменклатурыГТД(Элемент, СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура ТоварыНомерГТДНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	НачалоВыбораНоменклатурыГТД(Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура НачалоВыбораНоменклатурыГТД(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	Если СтрокаТабличнойЧасти = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВариантыВыбора = Новый СписокЗначений();
	ВариантыВыбора.Добавить(Ложь,   НСтр("ru='Выбрать по данным номенклатуры';uk='Вибрати по даним номенклатури'"));
	ВариантыВыбора.Добавить(Истина, НСтр("ru='Произвольный выбор';uk='Довільний вибір'"));
	
	РезультатВыбора = Неопределено;
	
	ПоказатьВыборИзСписка(Новый ОписаниеОповещения("НачалоВыбораНоменклатурыГТДЗавершение", ЭтотОбъект, Новый Структура("Элемент", Элемент)), ВариантыВыбора, Элемент, 0);

КонецПроцедуры

&НаКлиенте
Процедура НачалоВыбораНоменклатурыГТДЗавершение(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
    
    Элемент = ДополнительныеПараметры.Элемент;
    
    РезультатВыбора = ВыбранныйЭлемент;
    
    Если РезультатВыбора = Неопределено Тогда
        Возврат;
    КонецЕсли;
        
	ТекущаяСтрокаТоваров = Элементы.Товары.ТекущиеДанные;
	
	Если РезультатВыбора.Значение = Истина Тогда
		ПараметрыФормыВыбора = Новый Структура("ТекущаяСтрока");
		Если ТекущаяСтрокаТоваров <> Неопределено И ЗначениеЗаполнено(ТекущаяСтрокаТоваров.КодУКТВЭД) Тогда
			ПараметрыФормыВыбора.Вставить("ТекущаяСтрока", ТекущаяСтрокаТоваров.КодУКТВЭД);	
		КонецЕсли;  
		ОткрытьФорму("Справочник.КлассификаторУКТВЭД.Форма.ФормаВыбора", ПараметрыФормыВыбора, Элемент);
	Иначе
	    ДанныеСтроки = Новый Структура("КодУКТВЭД, НомерГТД, Номенклатура");
	    ЗаполнитьЗначенияСвойств(ДанныеСтроки, ТекущаяСтрокаТоваров); 
	    ПараметрыФормыВыбора = ЗаполнитьПараметрыВыбораНоменклатурыГТД(ДанныеСтроки);
		
		ОткрытьФорму("Справочник.НоменклатураГТД.ФормаВыбора", ПараметрыФормыВыбора, Элемент);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ТоварыКодУКТВЭДОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.НоменклатураГТД") Тогда
	
		ТекущаяСтрокаТоваров = Элементы.Товары.ТекущиеДанные;
		Если НЕ ТекущаяСтрокаТоваров = Неопределено Тогда
			ТекущаяСтрокаТоваров.НомерГТД = ПолучитьРеквизитНоменклатурыГТДНаСервере(ВыбранноеЗначение, "НомерГТД");
		КонецЕсли;

		ВыбранноеЗначение = ПолучитьРеквизитНоменклатурыГТДНаСервере(ВыбранноеЗначение, "КодУКТВЭД");	
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНомерГТДОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.НоменклатураГТД") Тогда
	
		ТекущаяСтрокаТоваров = Элементы.Товары.ТекущиеДанные;
		Если НЕ ТекущаяСтрокаТоваров = Неопределено Тогда
			ТекущаяСтрокаТоваров.КодУКТВЭД = ПолучитьРеквизитНоменклатурыГТДНаСервере(ВыбранноеЗначение, "КодУКТВЭД");
		КонецЕсли;

		ВыбранноеЗначение = ПолучитьРеквизитНоменклатурыГТДНаСервере(ВыбранноеЗначение, "НомерГТД");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКоличествоПриИзменении(Элемент)

	ОбработкаТабличныхЧастейКлиентСервер.ПриИзмененииКоличествоЦена(ЭтаФорма, "Товары", 1);
	
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;

	РассчитатьСуммыИзменений(СтрокаТабличнойЧасти, "Товары");
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЕдиницаИзмеренияПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	
	ДанныеСтрокиТаблицы = ДанныеСтрокиТабличнойЧасти(СтрокаТабличнойЧасти,"Товары");
	ДанныеОбъекта = ДанныеОбъекта(ЭтаФорма); 
	
	ТоварыЕдиницаИзмеренияПриИзмененииНаСервере(ДанныеСтрокиТаблицы, ДанныеОбъекта);
		
	РассчитатьСуммыИзменений(ДанныеСтрокиТаблицы, "Товары");
		
	ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ДанныеСтрокиТаблицы);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ТоварыЕдиницаИзмеренияПриИзмененииНаСервере(СтрокаТабличнойЧасти, Знач ДанныеОбъекта)
	
	ОбработкаТабличныхЧастей.ЗаполнитьКоэффициентТабЧасти(СтрокаТабличнойЧасти, ДанныеОбъекта, "Товары", Метаданные.Документы.НалоговаяНакладная);
	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ДанныеОбъекта.СуммаВключаетНДС);
	
	ЗаполнитьДобавленныеКолонкиСтрокиТаблицы(СтрокаТабличнойЧасти, ДанныеОбъекта);

КонецПроцедуры

&НаКлиенте
Процедура ТоварыЦенаПриИзменении(Элемент)

	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	
	ОбработкаТабличныхЧастейКлиентСервер.ПриИзмененииКоличествоЦена(ЭтаФорма, "Товары", 1);

	РассчитатьСуммыИзменений(СтрокаТабличнойЧасти, "Товары");
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаБезСкидкиПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	
	ОбработкаТабличныхЧастейКлиентСервер.ПриИзмененииСуммаБезСкидки(ЭтаФорма, "Товары");
	
	РассчитатьСуммыИзменений(СтрокаТабличнойЧасти, "Товары");
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаСкидкиПриИзменении(Элемент)
	
	ОбработкаТабличныхЧастейКлиентСервер.ПриИзмененииСуммаСкидки(ЭтаФорма, "Товары");
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаСкидкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбработкаТабличныхЧастейКлиентСервер.СуммаСкидкиНачалоВыбора(ЭтаФорма, "Товары", Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаПриИзменении(Элемент)

	ОбработкаТабличныхЧастейКлиентСервер.ПриИзмененииСумма(ЭтаФорма, "Товары");

	РассчитатьСуммыИзменений(Элементы.Товары.ТекущиеДанные, "Товары");

КонецПроцедуры

&НаКлиенте
Процедура ТоварыСтавкаНДСПриИзменении(Элемент)

	ОбработкаТабличныхЧастейКлиентСервер.ПриИзмененииСтавкаНДС(ЭтаФорма, "Товары");
	
	СтрокаТабличнойЧасти = Элементы.Услуги.ТекущиеДанные;
	
	ДанныеСтрокиТаблицы = ДанныеСтрокиТабличнойЧасти(СтрокаТабличнойЧасти,"Товары");
	ДанныеОбъекта = ДанныеОбъекта(ЭтаФорма);
	
	ЗаполнитьСтатьюДекларацииНДСНалоговыеОбязательства(ДанныеОбъекта, ДанныеСтрокиТаблицы, "Товары");
	РассчитатьСуммыИзменений(СтрокаТабличнойЧасти, "Товары");
	
	ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ДанныеСтрокиТаблицы);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаНДСПриИзменении(Элемент)

	ОбработкаТабличныхЧастейКлиентСервер.ПриИзмененииСуммаНДС(ЭтаФорма, "Товары");

	РассчитатьСуммыИзменений(Элементы.Товары.ТекущиеДанные, "Товары");
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыИзменениеКоличестваПриИзменении(Элемент)
	
	ИзменениеКоличестваПриИзменении("Товары");

КонецПроцедуры

&НаКлиенте
Процедура ТоварыИзменениеЦеныПриИзменении(Элемент)
	
	ИзменениеЦеныПриИзменении("Товары");
		
КонецПроцедуры

#КонецОбласти  //ОбработчикиСобытийТЧ_Товары

#Область ОбработчикиСобытийТЧ_ВозвратнаяТара

&НаКлиенте
Процедура ВозвратнаяТараПриИзменении(Элемент)

	ОбновитьИтоги(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ВозвратнаяТараПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если НоваяСтрока И ОтменаРедактирования Тогда
		ОбновитьИтоги(ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВозвратнаяТараНоменклатураПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ВозвратнаяТара.ТекущиеДанные;
	
	ДанныеСтрокиТаблицы = ДанныеСтрокиТабличнойЧасти(СтрокаТабличнойЧасти,"ВозвратнаяТара");
	ДанныеОбъекта = ДанныеОбъекта(ЭтаФорма);
	
	ВозвратнаяТараНоменклатураПриИзмененииНаСервере(ДанныеСтрокиТаблицы, ДанныеОбъекта);
	
	ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ДанныеСтрокиТаблицы);
	
КонецПроцедуры

&НаКлиенте
Процедура ВозвратнаяТараКоличествоПриИзменении(Элемент)

	ОбработкаТабличныхЧастейКлиентСервер.ПриИзмененииКоличествоЦена(ЭтаФорма, "ВозвратнаяТара");
	
	СтрокаТабличнойЧасти = Элементы.ВозвратнаяТара.ТекущиеДанные;
	РассчитатьСуммыИзменений(СтрокаТабличнойЧасти, "ВозвратнаяТара");
	
КонецПроцедуры

&НаКлиенте
Процедура ВозвратнаяТараЦенаПриИзменении(Элемент)

	ОбработкаТабличныхЧастейКлиентСервер.ПриИзмененииКоличествоЦена(ЭтаФорма, "ВозвратнаяТара");

	СтрокаТабличнойЧасти = Элементы.ВозвратнаяТара.ТекущиеДанные;
	РассчитатьСуммыИзменений(СтрокаТабличнойЧасти, "ВозвратнаяТара");
	
КонецПроцедуры

&НаКлиенте
Процедура ВозвратнаяТараСуммаПриИзменении(Элемент)

	ОбработкаТабличныхЧастейКлиентСервер.ПриИзмененииСумма(ЭтаФорма, "ВозвратнаяТара");

	СтрокаТабличнойЧасти = Элементы.ВозвратнаяТара.ТекущиеДанные;
	РассчитатьСуммыИзменений(СтрокаТабличнойЧасти, "ВозвратнаяТара");
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ВозвратнаяТараНоменклатураПриИзмененииНаСервере(СтрокаТабличнойЧасти, Знач ДанныеОбъекта)

	СведенияОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОНоменклатуре(
									СтрокаТабличнойЧасти.Номенклатура, ДанныеОбъекта);
	Если СведенияОНоменклатуре = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаТабличнойЧасти.Цена = УчетНДСКлиентСервер.ПересчитатьЦенуПриИзмененииФлаговНалогов(
									СведенияОНоменклатуре.Цена, СведенияОНоменклатуре.ЦенаВключаетНДС, ДанныеОбъекта.СуммаВключаетНДС,
									УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СведенияОНоменклатуре.СтавкаНДС));
	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
	РассчитатьСуммыИзменений(СтрокаТабличнойЧасти, "ВозвратнаяТара");

КонецПроцедуры

&НаКлиенте
Процедура ВозвратнаяТараИзменениеКоличестваПриИзменении(Элемент)
	
	ИзменениеКоличестваПриИзменении("ВозвратнаяТара");

КонецПроцедуры

&НаКлиенте
Процедура ВозвратнаяТараИзменениеЦеныПриИзменении(Элемент)
	
	ИзменениеЦеныПриИзменении("ВозвратнаяТара");

КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиСобытийТЧ_Услуги

&НаКлиенте
Процедура УслугиПриИзменении(Элемент)

	ОбновитьИтоги(ЭтаФорма);
	
	// Авторасчет НДС
	ПерерасчетПроизведен = Ложь;

КонецПроцедуры

&НаКлиенте
Процедура УслугиПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если НЕ НоваяСтрока И ОтменаРедактирования Тогда
		ОбновитьИтоги(ЭтаФорма);
		
		// Авторасчет НДС
		ПерерасчетПроизведен = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиНоменклатураПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Услуги.ТекущиеДанные;

	// Получим общие параметры обработки для реквизитов документа
	ДанныеСтрокиТаблицы = ДанныеСтрокиТабличнойЧасти(СтрокаТабличнойЧасти,"Услуги");
	ДанныеОбъекта = ДанныеОбъекта(ЭтаФорма);
	
	
	УслугиНоменклатураПриИзмененииНаСервере(
		ДанныеСтрокиТаблицы, ДанныеОбъекта);
	
	ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ДанныеСтрокиТаблицы);
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиКоличествоПриИзменении(Элемент)

	СтрокаТабличнойЧасти = Элементы.Услуги.ТекущиеДанные;
	
	ОбработкаТабличныхЧастейКлиентСервер.ПриИзмененииКоличествоЦена(ЭтаФорма, "Услуги", 1);
	
	РассчитатьСуммыИзменений(СтрокаТабличнойЧасти, "Услуги");

	
КонецПроцедуры

&НаКлиенте
Процедура УслугиЦенаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Услуги.ТекущиеДанные;
	
	ОбработкаТабличныхЧастейКлиентСервер.ПриИзмененииКоличествоЦена(ЭтаФорма, "Услуги", 1);
	
	РассчитатьСуммыИзменений(СтрокаТабличнойЧасти, "Услуги");

КонецПроцедуры

&НаКлиенте
Процедура УслугиСуммаБезСкидкиПриИзменении(Элемент)
	
	ОбработкаТабличныхЧастейКлиентСервер.ПриИзмененииСуммаБезСкидки(ЭтаФорма, "Услуги", 1);
	
	РассчитатьСуммыИзменений(Элементы.Услуги.ТекущиеДанные, "Услуги");
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиСуммаСкидкиПриИзменении(Элемент)
	
	ОбработкаТабличныхЧастейКлиентСервер.ПриИзмененииСуммаСкидки(ЭтаФорма, "Услуги");
	
	РассчитатьСуммыИзменений(Элементы.Услуги.ТекущиеДанные, "Услуги");
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиСуммаСкидкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбработкаТабличныхЧастейКлиентСервер.СуммаСкидкиНачалоВыбора(ЭтаФорма, "Услуги", Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиСуммаПриИзменении(Элемент)

	СтрокаТабличнойЧасти = Элементы.Услуги.ТекущиеДанные;
	
	ОбработкаТабличныхЧастейКлиентСервер.ПриИзмененииСумма(ЭтаФорма, "Услуги", 1);
	РассчитатьСуммыИзменений(СтрокаТабличнойЧасти, "Услуги");

КонецПроцедуры

&НаКлиенте
Процедура УслугиСтавкаНДСПриИзменении(Элемент)

	СтрокаТабличнойЧасти = Элементы.Услуги.ТекущиеДанные;
	
	ОбработкаТабличныхЧастейКлиентСервер.ПриИзмененииСтавкаНДС(ЭтаФорма, "Услуги");
	
	// заполняем статью декларации
	ДанныеСтрокиТаблицы = Новый Структура("СтавкаНДС, СтатьяДекларацииНДСНалоговыеОбязательства");
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, СтрокаТабличнойЧасти);
	
	ДанныеОбъекта = Новый Структура("Дата, ВидОперации, Организация, СуммаВключаетНДС, ДоговорКонтрагента, ВалютаВзаиморасчетов, НеЯвляетсяРезидентом");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, ЭтаФорма);
	
	ЗаполнитьСтатьюДекларацииНДСНалоговыеОбязательства(ДанныеОбъекта, ДанныеСтрокиТаблицы, "Услуги");
	
	ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ДанныеСтрокиТаблицы);
	
	РассчитатьСуммыИзменений(СтрокаТабличнойЧасти, "Услуги");

КонецПроцедуры

&НаКлиенте
Процедура УслугиСуммаНДСПриИзменении(Элемент)

	ОбработкаТабличныхЧастейКлиентСервер.ПриИзмененииСуммаНДС(ЭтаФорма, "Услуги");
	РассчитатьСуммыИзменений(Элементы.Услуги.ТекущиеДанные, "Услуги");

КонецПроцедуры

&НаСервереБезКонтекста
Процедура УслугиНоменклатураПриИзмененииНаСервере(СтрокаТабличнойЧасти, ДанныеОбъекта)

	СведенияОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОНоменклатуре(
		СтрокаТабличнойЧасти.Номенклатура, ДанныеОбъекта);
	Если СведенияОНоменклатуре = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаТабличнойЧасти.Содержание	= СведенияОНоменклатуре.НаименованиеПолное;
	СтрокаТабличнойЧасти.Цена		= СведенияОНоменклатуре.Цена;
	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ДанныеОбъекта.СуммаВключаетНДС);
	
	// заполняем ставку НДС
	ЗаполнитьСтавкуНДС(СтрокаТабличнойЧасти,ДанныеОбъекта);
	
	РассчитатьСуммыИзменений(СтрокаТабличнойЧасти, "Услуги");
	
	Документы.Приложение2КНалоговойНакладной.УстановитьКодУКТВЭДВстрокеТоваров(СтрокаТабличнойЧасти);
	
	ЗаполнитьДобавленныеКолонкиСтрокиТаблицы(СтрокаТабличнойЧасти, ДанныеОбъекта);

КонецПроцедуры

&НаКлиенте
Процедура УслугиИзменениеКоличестваПриИзменении(Элемент)
	
	ИзменениеКоличестваПриИзменении("Услуги");
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиИзменениеЦеныПриИзменении(Элемент)
	
	ИзменениеЦеныПриИзменении("Услуги");
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиКодУКТВЭДНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	НачалоВыбораНоменклатурыГТДУслуги(Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиКодУКТВЭДОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.НоменклатураГТД") Тогда
				
		ВыбранноеЗначение = ПолучитьРеквизитНоменклатурыГТДНаСервере(ВыбранноеЗначение, "КодУКТВЭД");	
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НачалоВыбораНоменклатурыГТДУслуги(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	
	ТекущаяСтрокаУслуг = Элементы.Услуги.ТекущиеДанные;
	Если ТекущаяСтрокаУслуг = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВариантыВыбора = Новый СписокЗначений();
	ВариантыВыбора.Добавить(Ложь,   НСтр("ru='Выбрать по данным номенклатуры';uk='Вибрати по даним номенклатури'"));
	ВариантыВыбора.Добавить(Истина, НСтр("ru='Произвольный выбор';uk='Довільний вибір'"));
		
	ПоказатьВыборИзСписка(Новый ОписаниеОповещения("НачалоВыбораНоменклатурыГТДУслугиЗавершение", ЭтотОбъект, Новый Структура("Элемент", Элемент)), ВариантыВыбора, Элемент, 0); 

КонецПроцедуры

&НаКлиенте
Процедура НачалоВыбораНоменклатурыГТДУслугиЗавершение(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
    
    Элемент = ДополнительныеПараметры.Элемент;
    
    РезультатВыбора = ВыбранныйЭлемент;
    
    Если РезультатВыбора = Неопределено Тогда
        Возврат;
    КонецЕсли;
	
	ТекущаяСтрокаУслуг = Элементы.Услуги.ТекущиеДанные;
	
    Если РезультатВыбора.Значение = Истина Тогда
		ПараметрыФормыВыбора = Новый Структура("ТекущаяСтрока");
		Если ТекущаяСтрокаУслуг <> Неопределено И ЗначениеЗаполнено(ТекущаяСтрокаУслуг.КодУКТВЭД) Тогда
			ПараметрыФормыВыбора.Вставить("ТекущаяСтрока", ТекущаяСтрокаУслуг.КодУКТВЭД);	
		КонецЕсли;
		ОткрытьФорму("Справочник.КлассификаторУКТВЭД.Форма.ФормаВыбора", ПараметрыФормыВыбора, Элемент);
	Иначе
	    ДанныеСтроки = Новый Структура("КодУКТВЭД, Номенклатура");
	    ЗаполнитьЗначенияСвойств(ДанныеСтроки, ТекущаяСтрокаУслуг); 
	    ПараметрыФормыВыбора = ЗаполнитьПараметрыВыбораНоменклатурыГТДУслуги(ДанныеСтроки);
		
		ОткрытьФорму("Справочник.НоменклатураГТД.Форма.ФормаВыбора", ПараметрыФормыВыбора, Элемент);
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗаполнитьПараметрыВыбораНоменклатурыГТДУслуги(ТекущаяСтрокаТоваров)
	
	Параметры = Новый Структура("Отбор, ТекущаяСтрока");
	
	Параметры.Отбор = Новый Структура("Владелец", ТекущаяСтрокаТоваров.Номенклатура); 
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("КодУКТВЭД", ТекущаяСтрокаТоваров.КодУКТВЭД);
	Запрос.УстановитьПараметр("Владелец",  ТекущаяСтрокаТоваров.Номенклатура);
	
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	               |	НоменклатураГТД.Ссылка
	               |ИЗ
	               |	Справочник.НоменклатураГТД КАК НоменклатураГТД
	               |ГДЕ
	               |	НоменклатураГТД.КодУКТВЭД  = &КодУКТВЭД
	               |	И НоменклатураГТД.Владелец = &Владелец";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Параметры.ТекущаяСтрока = Выборка.Ссылка;	
	КонецЕсли;
	
	Возврат Параметры; 
	
КонецФункции

#КонецОбласти 

#Область ОбработчикиСобытийТЧ_ОС

&НаКлиенте
Процедура ОСОсновноеСредствоПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ОС.ТекущиеДанные;
	
	// Рассчитываем суммы
	ОбработкаТабличныхЧастейКлиентСервер.ПриИзмененииСтавкаНДС(ЭтаФорма, "ОС");
	
	РассчитатьСуммыИзменений(СтрокаТабличнойЧасти, "ОС");
	
КонецПроцедуры	

&НаКлиенте
Процедура ОССтавкаНДСПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ОС.ТекущиеДанные;
	
	// Рассчитываем суммы
	ОбработкаТабличныхЧастейКлиентСервер.ПриИзмененииСтавкаНДС(ЭтаФорма, "ОС");
	
	// заполняем статью декларации
	ДанныеСтрокиТаблицы = ДанныеСтрокиТабличнойЧасти(СтрокаТабличнойЧасти,"ОС");
	ДанныеОбъекта = ДанныеОбъекта(ЭтаФорма);
	
	ЗаполнитьСтатьюДекларацииНДСНалоговыеОбязательства(ДанныеОбъекта, ДанныеСтрокиТаблицы, "ОС");		
	
	ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ДанныеСтрокиТаблицы);

КонецПроцедуры

&НаКлиенте
Процедура ОССуммаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ОС.ТекущиеДанные;
	
	// Рассчитываем суммы
	ОбработкаТабличныхЧастейКлиентСервер.ПриИзмененииСтавкаНДС(ЭтаФорма, "ОС");
	РассчитатьСуммыИзменений(СтрокаТабличнойЧасти, "ОС");
	
КонецПроцедуры

&НаКлиенте
Процедура ОСИзменениеКоличестваПриИзменении(Элемент)
	
	ИзменениеКоличестваПриИзменении("ОС");
	
КонецПроцедуры

&НаКлиенте
Процедура ОСИзменениеЦеныПриИзменении(Элемент)
	
	ИзменениеЦеныПриИзменении("ОС");
	
КонецПроцедуры

&НаКлиенте
Процедура ОСПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	Если НЕ НоваяСтрока И ОтменаРедактирования Тогда
		ОбновитьИтоги(ЭтаФорма);
		// Авторасчет НДС
		ПерерасчетПроизведен = Ложь;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиСобытийТЧ_НМА

&НаКлиенте
Процедура НМАНематериальныйАктивПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.НМА.ТекущиеДанные;
	
	// Рассчитываем суммы
	ОбработкаТабличныхЧастейКлиентСервер.ПриИзмененииСтавкаНДС(ЭтаФорма, "НМА");
	
	РассчитатьСуммыИзменений(СтрокаТабличнойЧасти, "НМА");
	
КонецПроцедуры	

&НаКлиенте
Процедура НМАСтавкаНДСПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.НМА.ТекущиеДанные;
	
	// Рассчитываем суммы
	ОбработкаТабличныхЧастейКлиентСервер.ПриИзмененииСтавкаНДС(ЭтаФорма, "НМА");
	
	// заполняем статью декларации
	ДанныеСтрокиТаблицы = ДанныеСтрокиТабличнойЧасти(СтрокаТабличнойЧасти,"НМА");
	ДанныеОбъекта = ДанныеОбъекта(ЭтаФорма);
	
	ЗаполнитьСтатьюДекларацииНДСНалоговыеОбязательства(ДанныеОбъекта,ДанныеСтрокиТаблицы, "НМА");
	ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ДанныеСтрокиТаблицы);

КонецПроцедуры

&НаКлиенте
Процедура НМАСуммаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.НМА.ТекущиеДанные;
	
	// Рассчитываем суммы
	ОбработкаТабличныхЧастейКлиентСервер.ПриИзмененииСтавкаНДС(ЭтаФорма, "НМА");
	
	РассчитатьСуммыИзменений(СтрокаТабличнойЧасти, "НМА");
	
КонецПроцедуры

&НаКлиенте
Процедура НМАИзменениеКоличестваПриИзменении(Элемент)
	ИзменениеКоличестваПриИзменении("НМА");
КонецПроцедуры

&НаКлиенте
Процедура НМАИзменениеЦеныПриИзменении(Элемент)
	ИзменениеЦеныПриИзменении("НМА");
КонецПроцедуры

&НаКлиенте
Процедура НМАПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	Если НЕ НоваяСтрока И ОтменаРедактирования Тогда
		ОбновитьИтоги(ЭтаФорма);
		// Авторасчет НДС
		ПерерасчетПроизведен = Ложь;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти 

#КонецОбласти 

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ВыполнитьЗаполнениеНаОсновании(ПараметрыФормы)

	НалоговаяНакладная = ДанныеФормыВЗначение(Объект, Тип("Документобъект.Приложение2КНалоговойНакладной"));
	ДанныеЗаполнения  = Параметры.Основание;
	
	// заполняем реквизиты шапки
	ЗаполнениеДокументов.Заполнить(НалоговаяНакладная, ДанныеЗаполнения);
	
	Если ПараметрыФормы.Свойство("Сделка") Тогда
		НалоговаяНакладная.ДополнительныеСвойства.Вставить("СделкаНалоговыйУчет", ПараметрыФормы.Сделка);	
	КонецЕсли; 
	
	// проводим заполнение
	РезультатЗаполнения = НалоговаяНакладная.ЗаполнитьПоДокументуОснованию(ДанныеЗаполнения);
	
	Если РезультатЗаполнения = Неопределено Тогда
		
		ПараметрыФормы.СлужебноеСообщение = НСтр("ru='Ввод на основании не состоялся. Подробная информация находится в окне, из которого осуществлялся ввод на основании';uk='Введення на підставі не відбулося. Детальніша інформація знаходиться у вікні, з якого здійснювалося введення на підставі'");
		
		ЭтаФорма.НеОткрыватьФорму = Ложь;
		
		// ввод на основании не состоялся
		ЗаполнениеДокументов.ЗаполнитьПоОснованию(НалоговаяНакладная, ДанныеЗаполнения);
		НалоговаяНакладная.ЗаполнитьШапкуДокумента(ДанныеЗаполнения); 
		
		ЗначениеВРеквизитФормы(НалоговаяНакладная,"Объект");
		ПриСозданииНаСервереОсновыеДействия(ПараметрыФормы);
		
		Возврат;
		
	ИначеЕсли НЕ ТипЗнч(РезультатЗаполнения) = Тип("Массив") Тогда
		
		МассивОбъектовДляОткрытияФорм = Новый Массив;
		МассивОбъектовДляОткрытияФорм.Добавить(РезультатЗаполнения);
		
	Иначе
		
		МассивОбъектовДляОткрытияФорм = РезультатЗаполнения;
		
	КонецЕсли;
		
	// создаем для каждого объекта, для которого нужно открыть форму - реквизит этой формы
	ДобавляемыеРеквизиты = Новый Массив();
		
	Сч = 1;
	Для каждого ОбъектДляОткрытия Из МассивОбъектовДляОткрытияФорм Цикл
		
		МассивТипов = Новый Массив();
		МассивТипов.Добавить(ТипЗнч(ОбъектДляОткрытия));
		
		Реквизит = Новый РеквизитФормы("ОбъектДляОткрытия" + Формат(Сч, "ЧГ="), Новый ОписаниеТипов(МассивТипов));
		ДобавляемыеРеквизиты.Добавить(Реквизит);
		
		Реквизит = Новый РеквизитФормы("ИмяФормы" + Формат(Сч, "ЧГ="), Новый ОписаниеТипов("Строка"));
		ДобавляемыеРеквизиты.Добавить(Реквизит);
		
		Сч = Сч + 1;
	
	КонецЦикла;
	
	Реквизит = Новый РеквизитФормы("КоличествоОбъектовДляОткрытия", Новый ОписаниеТипов("Число"));
	ДобавляемыеРеквизиты.Добавить(Реквизит);
	
	ИзменитьРеквизиты(ДобавляемыеРеквизиты);

	// заполняем реквизиты формы - объектами
	ЭтотОбъект["КоличествоОбъектовДляОткрытия"] = МассивОбъектовДляОткрытияФорм.Количество();	
	
	Сч = 1;
	Для каждого ОбъектДляОткрытия Из МассивОбъектовДляОткрытияФорм Цикл
		
		ЗначениеВРеквизитФормы(ОбъектДляОткрытия, "ОбъектДляОткрытия" + Формат(Сч, "ЧГ="));
		
		ТипОбъекта = Метаданные.НайтиПоТипу(ТипЗнч(ОбъектДляОткрытия)).ПолноеИмя();
		ЭтотОбъект["ИмяФормы" + Формат(Сч, "ЧГ=")] = ТипОбъекта + ?(Найти(ТипОбъекта, "Обработка") >0 , ".Форма", ".ФормаОбъекта");
		
		Сч = Сч + 1;
	                 
	КонецЦикла;	

КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервереОсновыеДействия(ПараметрыФормы)
	
	Если ПараметрыФормы.Свойство("СлужебноеСообщение") Тогда
		СлужебноеСообщение = ПараметрыФормы.СлужебноеСообщение;
	КонецЕсли;
	
	// СтандартныеПодсистемы.Печать
	УправлениеПечатью.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Печать

	// ДополнительныеОтчетыИОбработки
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец ДополнительныеОтчетыИОбработки
	
	Если Параметры.Ключ.Пустая() Тогда
		ПодготовитьФормуНаСервере();
	КонецЕсли;

	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);

	// Уведомим о появлении функционала рабочей даты
	НастройкиПредупреждений = ОбщегоНазначенияБП.НастройкиПредупрежденийОбИзменениях("РабочаяДатаИзДокумента");
	
	// Показываем, если это новый документ и сама рабочая дата еще не установлена.
	НастройкиПредупреждений.РабочаяДатаИзДокумента =  НастройкиПредупреждений.РабочаяДатаИзДокумента
													И Параметры.Ключ.Пустая()
													И НЕ ЗначениеЗаполнено(БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("РабочаяДата"));
	
	// Активизировать первую непустую табличную часть
	АктивизироватьТабличнуюЧасть = ОбщегоНазначенияБПВызовСервера.ПолучитьПервуюНепустуюВидимуюТабличнуюЧасть(
		ЭтаФорма, СписокВидимыхТабличныхЧастей());
	ОбщегоНазначенияБПВызовСервера.АктивизироватьЭлементФормы(ЭтаФорма, АктивизироватьТабличнуюЧасть);
	
	// Авторасчет НДС
	ПерерасчетПроизведен = Истина;
	ДатаВступленияВСилуПриказа1379 = НалоговыйУчетПовтИсп.ДатаВступленияВСилуПриказа1379();
	
	УстановитьЭлементыФормыПоВидуОперации();
	
КонецПроцедуры

&НаКлиенте
Процедура СообщитьПользователюЛокально()

	ПоказатьОповещениеПользователя(,,СлужебноеСообщение);	

КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьРеквизитНоменклатурыГТДНаСервере(Ссылка, ИмяРекзвизита)

	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, ИмяРекзвизита);	

КонецФункции 

&НаСервере
Процедура УстановитьЭлементыФормыПоВидуОперации()

	// Колонка СуммаНДС не доступна для редактировани, если включен АвторасчетНДС
	Элементы.ТоварыИзменениеСуммыНДС.ТолькоПросмотр = Объект.АвторасчетНДС;
	Элементы.УслугиИзменениеСуммыНДС.ТолькоПросмотр = Объект.АвторасчетНДС;
	Элементы.ОСИзменениеСуммыНДС.ТолькоПросмотр 	= Объект.АвторасчетНДС;
	Элементы.НМАИзменениеСуммыНДС.ТолькоПросмотр    = Объект.АвторасчетНДС;
	
	Элементы.ТоварыДатаКорректировки.Видимость 	= Объект.Дата < '2016-04-01';
	Элементы.УслугиДатаКорректировки.Видимость 	= Объект.Дата < '2016-04-01';
	Элементы.ОСДатаКорректировки.Видимость 	 	= Объект.Дата < '2016-04-01';
	Элементы.НМАДатаКорректировки.Видимость    	= Объект.Дата < '2016-04-01';


	Если    Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПриложение2КНалоговойНакладной.ИтоговаяРозницаОблагаемыеОперацииВозврат") 
		ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПриложение2КНалоговойНакладной.ИтоговаяРозницаОсвобожденныеОперацииВозврат") Тогда
		
		Элементы.Контрагент.Видимость 					= Ложь;
		Элементы.Контрагент.Доступность 				= Ложь;
		
		Элементы.ДоговорКонтрагента.Видимость 			= Ложь;
		
		Элементы.ДокументОснование.Видимость 			= Ложь;
		
		Элементы.Сделка.Видимость 						= Ложь;
		
		Элементы.СтраницаТовары.Видимость	            = Истина;
		Элементы.СтраницаВозвратнаяТара.Видимость	    = Ложь;
		Элементы.СтраницаОсновныеСредства.Видимость  	= Ложь;
		Элементы.СтраницаУслуги.Видимость               = Ложь;
		Элементы.СтраницаНематериальныеАктивы.Видимость = Ложь;
		
		Элементы.ТоварыЗаполнитьПоОстаткамТовары.Доступность = Истина;
		
	ИначеЕсли    Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПриложение2КНалоговойНакладной.УсловнаяПродажаВозврат") Тогда
		
		Элементы.Контрагент.Видимость 						= Ложь;
		Элементы.Контрагент.Доступность 					= Ложь;
		
		Элементы.ДоговорКонтрагента.Видимость 				= Ложь;
		
		Элементы.ДокументОснование.Видимость 				= Ложь;
		
		Элементы.Сделка.Видимость 							= Ложь;
		
		Элементы.СтраницаТовары.Видимость	= Истина;
		Элементы.СтраницаВозвратнаяТара.Видимость	= Ложь;
		Элементы.СтраницаОсновныеСредства.Видимость  	= Истина;
		Элементы.СтраницаУслуги.Видимость  = Истина;
		Элементы.СтраницаНематериальныеАктивы.Видимость = Истина;
	
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПриложение2КНалоговойНакладной.СводнаяНаПревышениеБазыНадЦенойПоставки") Тогда
		
		Элементы.Контрагент.Видимость 					= Ложь;
		Элементы.Контрагент.Доступность 				= Ложь;
		
		Элементы.ДоговорКонтрагента.Видимость 			= Ложь;
		
		Элементы.ДокументОснование.Видимость 			= Ложь;	
		
		Элементы.Сделка.Видимость 						= Ложь;		
		Элементы.СтраницаТовары.Видимость				= Истина;
		Элементы.СтраницаВозвратнаяТара.Видимость		= Ложь;
		Элементы.СтраницаОсновныеСредства.Видимость  	= Истина;
		Элементы.СтраницаУслуги.Видимость  				= Истина;
		Элементы.СтраницаНематериальныеАктивы.Видимость = Истина;
		
		Элементы.ТоварыЗаполнитьПоОстаткамТовары.Доступность = Ложь;
	
	
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПриложение2КНалоговойНакладной.РозницаКонрагентуОблагаемыеОперацииВозврат")
		  ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПриложение2КНалоговойНакладной.РозницаКонрагентуОсвобожденныеОперацииВозврат") Тогда
		
		Элементы.Контрагент.Видимость 						= Истина;
		Элементы.Контрагент.Доступность 					= Истина;
		
		Элементы.ДоговорКонтрагента.Видимость 				= Ложь;

		Элементы.ДокументОснование.Видимость 				= Ложь;
		
		Элементы.Сделка.Видимость 							= Ложь;
		
		Элементы.СтраницаТовары.Видимость	            = Истина;
		Элементы.СтраницаВозвратнаяТара.Видимость	                = Ложь;
		Элементы.СтраницаОсновныеСредства.Видимость  	= Ложь;
		Элементы.СтраницаУслуги.Видимость               = Истина;
		Элементы.СтраницаНематериальныеАктивы.Видимость = Ложь;
		
		Элементы.ТоварыЗаполнитьПоОстаткамТовары.Доступность = Ложь;
		
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПриложение2КНалоговойНакладной.РаботыОтНерезидентаКорректировка") Тогда
		
		Элементы.Контрагент.Видимость 					= Истина;
		Элементы.Контрагент.Доступность				= Истина;
		
		Элементы.ДоговорКонтрагента.Видимость 			= Истина;
		
		Элементы.ДокументОснование.Видимость 			= Истина;
		
		Элементы.Сделка.Видимость 							= Истина;
		
		Элементы.СтраницаТовары.Видимость	            = Ложь;
		Элементы.СтраницаВозвратнаяТара.Видимость	                = Ложь;
		Элементы.СтраницаОсновныеСредства.Видимость  	= Ложь;
		Элементы.СтраницаУслуги.Видимость               = Истина;
		Элементы.СтраницаНематериальныеАктивы.Видимость = Ложь;
		
	Иначе
		
		Элементы.Контрагент.Видимость 					= Истина;
		Элементы.Контрагент.Доступность				= Истина;
		
		Элементы.ДоговорКонтрагента.Видимость 			= Истина;
		
		Элементы.ДокументОснование.Видимость 			= Истина;
		
		Элементы.Сделка.Видимость 							= Истина;
		
		Элементы.СтраницаТовары.Видимость	            = Истина;
		Элементы.СтраницаВозвратнаяТара.Видимость	                = Истина;
		Элементы.СтраницаОсновныеСредства.Видимость  	= Истина;
		Элементы.СтраницаУслуги.Видимость               = Истина;
		Элементы.СтраницаНематериальныеАктивы.Видимость = Истина;
		
		Элементы.ТоварыЗаполнитьПоОстаткамТовары.Доступность = Истина;
		
	КонецЕсли;	
	
	Элементы.Сделка.Доступность = (Объект.ДоговорКонтрагента.ВедениеВзаиморасчетовНУ = ПредопределенноеЗначение("Перечисление.ВедениеВзаиморасчетовПоДоговорам.ПоРасчетнымДокументам"));
	
	// Тары по внешнеэкономическому договору нет.
	ПоказыватьТару =  Элементы.СтраницаВозвратнаяТара.Видимость
				  И  (Объект.ДоговорКонтрагента.ВалютаВзаиморасчетов = ВалютаРегламентированногоУчета)
			      И ?(Объект.ВозвратнаяТара.Количество() = 0, ПолучитьФункциональнуюОпцию("ИспользоватьВозвратнуюТару"), Истина);
	Элементы.СтраницаВозвратнаяТара.Видимость = ПоказыватьТару;
	


	
	///////////////////////////////////////////////////////
	//управление колонками скидок
	
		
	Элементы.УточняемыйПериод.Видимость = Объект.ВключаетсяВУточняющийРасчет;
	Элементы.НомерДляРеестра.Видимость 	= Объект.ВключаетсяВУточняющийРасчет;
	Элементы.ДатаДляРеестра.Видимость 	= Объект.ВключаетсяВУточняющийРасчет;
	
	Элементы.ТребуетВключенияВЕдиныйРеестрНалоговыхНакладных.Доступность = НЕ (Объект.ТипПричиныНевыдачиПокупателю = 0) И (Объект.Дата < '2014-03-01');
	
	
	Элементы.ТоварыНомерГТД.Видимость = (Объект.Дата < '2014-03-01');
	
	СводнаяНаПревышениеБазыНадЦенойПоставки = Объект.ВидОперации = Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.СводнаяНаПревышениеБазыНадЦенойПоставки;
	
	Элементы.ТипПричиныНевыдачиПокупателю.Доступность = НЕ СводнаяНаПревышениеБазыНадЦенойПоставки;
	
	Если СводнаяНаПревышениеБазыНадЦенойПоставки Тогда
		Элементы.ДекорацияСРасшифровкойСчетаДт.Видимость 	= Истина;
		Элементы.ДекорацияЗаголовокСчетДт.Видимость			= Истина;
			Элементы.ЗаголовокСубконтоДт1.Видимость			= Истина;
			Элементы.ЗаголовокСубконтоДт2.Видимость			= Истина;
			Элементы.ЗаголовокСубконтоДт3.Видимость			= Истина;
			Элементы.СчетДт.Видимость						= Истина;
			Элементы.СубконтоДт1.Видимость					= Истина;
			Элементы.СубконтоДт2.Видимость					= Истина;
			Элементы.СубконтоДт3.Видимость					= Истина;
		УстановитьЗаголовкиИДоступностьСубконто(ЭтотОбъект, Объект.СчетДт, "СубконтоДт");		
	Иначе	
		Элементы.ДекорацияСРасшифровкойСчетаДт.Видимость = Ложь;
		Элементы.ДекорацияЗаголовокСчетДт.Видимость		= Ложь;
		Элементы.ЗаголовокСубконтоДт1.Видимость			= Ложь;
		Элементы.ЗаголовокСубконтоДт2.Видимость			= Ложь;
		Элементы.ЗаголовокСубконтоДт3.Видимость			= Ложь;
		Элементы.СчетДт.Видимость						= Ложь;
		Элементы.СубконтоДт1.Видимость					= Ложь;
		Элементы.СубконтоДт2.Видимость					= Ложь;
		Элементы.СубконтоДт3.Видимость					= Ложь;
	КонецЕсли; 
	
	Элементы.ТоварыКодСХДеятельности.Видимость = (Объект.СпецРежимНалогообложения = 2);
	
КонецПроцедуры

&НаСервере
Процедура ДоговорКонтрагентаПриИзмененииНаСервере()
	
	ВалютаДоИзменения 			= Объект.ВалютаДокумента;
	КурсДоИзменения   			= Объект.КурсВзаиморасчетов;
	КратностьДоИзменения 		= Объект.КратностьВзаиморасчетов;
	ТипЦенДоИзменения 			= Объект.ТипЦен;
	СуммаВключаетНДСДоИзменения = Объект.СуммаВключаетНДС;
	
	ДоговорУказан     = ЗначениеЗаполнено(Объект.ДоговорКонтрагента);
	РеквизитыДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
							Объект.ДоговорКонтрагента, "ВалютаВзаиморасчетов, Владелец, ТипЦен, ВидДоговора, ВедениеВзаиморасчетовНУ");
	
	Если ДоговорУказан Тогда
		ВалютаВзаиморасчетов = РеквизитыДоговора.ВалютаВзаиморасчетов;
		Объект.ВалютаДокумента     = ВалютаВзаиморасчетов;
		Если НЕ ЗначениеЗаполнено(Объект.Контрагент) Тогда
			Объект.Контрагент = РеквизитыДоговора.Владелец;
		КонецЕсли;
	Иначе
		Объект.ВалютаДокумента     = ВалютаРегламентированногоУчета;
	КонецЕсли;
	
	Если ВалютаДоИзменения <> Объект.ВалютаДокумента Тогда
		СтруктураКурсаДокумента        = РаботаСКурсамиВалют.ПолучитьКурсВалюты(Объект.ВалютаДокумента, Объект.Дата);
		Объект.КурсВзаиморасчетов      = СтруктураКурсаДокумента.Курс;
		Объект.КратностьВзаиморасчетов = СтруктураКурсаДокумента.Кратность;
	КонецЕсли;
	
	Если ДоговорУказан И ЗначениеЗаполнено(РеквизитыДоговора.ТипЦен) Тогда
		Объект.ТипЦен           = РеквизитыДоговора.ТипЦен;
		Объект.СуммаВключаетНДС = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(РеквизитыДоговора.ТипЦен, "ЦенаВключаетНДС");
	КонецЕсли;

	// Очистим ТЧ Возвратная тара если договор внешнеэкономический
	Если Объект.ДоговорКонтрагента.ВалютаВзаиморасчетов <> ВалютаРегламентированногоУчета Тогда
		Объект.ВозвратнаяТара.Очистить();
	КонецЕсли;
	
	// Очистим документ-основание при необходимости
	Если  Объект.ДокументОснование <> Неопределено
		И ОбщегоНазначенияБП.ЕстьРеквизитДокумента("ДоговорКонтрагента", Объект.ДокументОснование.Метаданные()) 
		И Объект.ДокументОснование.ДоговорКонтрагента <> Объект.ДоговорКонтрагента Тогда
		
		Объект.ДокументОснование = Неопределено;
		Объект.Сделка    		 = Неопределено;
		
	КонецЕсли;
	
	// Очистим реквизит НалоговаяНакладная при необходимости
	Если Объект.НалоговаяНакладная.ДоговорКонтрагента <> Объект.ДоговорКонтрагента Тогда
		
		Объект.НалоговаяНакладная 	= Неопределено;
		Объект.Сделка 				= Неопределено;
		Объект.ДокументОснование 	= Неопределено;

	КонецЕсли;
	
	СчетаУчета   = БухгалтерскийУчетРасчетовСКонтрагентами.ПолучитьСчетаРасчетовСКонтрагентом(Объект.Организация, Объект.Контрагент, Объект.ДоговорКонтрагента);
	Объект.СчетУчетаНДС = СчетаУчета.СчетУчетаНДСПродаж;
	
	// перезаполним статьи декларации
	Для каждого СтрокаТЧ из Объект.Товары Цикл
		ЗаполнитьСтатьюДекларацииНДСНалоговыеОбязательства(Объект, СтрокаТЧ, "Товары");		
	КонецЦикла;
	Для каждого СтрокаТЧ из Объект.Услуги Цикл
		ЗаполнитьСтатьюДекларацииНДСНалоговыеОбязательства(Объект, СтрокаТЧ, "Услуги");		
	КонецЦикла;
	Для каждого СтрокаТЧ из Объект.ОС Цикл
		ЗаполнитьСтатьюДекларацииНДСНалоговыеОбязательства(Объект, СтрокаТЧ, "ОС");		
	КонецЦикла;	
	Для каждого СтрокаТЧ из Объект.НМА Цикл
		ЗаполнитьСтатьюДекларацииНДСНалоговыеОбязательства(Объект, СтрокаТЧ, "НМА");		
	КонецЦикла;	

	Документы.Приложение2КНалоговойНакладной.ЗаполнитьУсловиеПродажи(Объект);
	
	Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента.ФормаРасчетов) Тогда
	    Объект.ФормаРасчетов = Объект.ДоговорКонтрагента.ФормаРасчетов;  	
		Если Объект.Дата >= '2014-03-01' И Объект.Дата < '2015-01-01' Тогда
			Если Объект.ФормаРасчетов = "Оплата з поточного рахунка" Тогда
				Объект.ФормаРасчетов = "Оплата з поточного рахунку";
			КонецЕсли;
		ИначеЕсли Объект.Дата >= '2015-01-01' Тогда
			Если Объект.ФормаРасчетов = "Оплата з поточного рахунку" Тогда
				Объект.ФормаРасчетов = "Оплата з поточного рахунка";
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли Объект.ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.Бартерный Тогда
		Объект.ФормаРасчетов = "Бартер";  	
	Иначе		
		Объект.ФормаРасчетов = "Оплата з поточного рахунку";                                                         
		Если НалоговыйУчетПовтИсп.ДатаВступленияВСилуПриказа1379() <= Объект.Дата И Объект.Дата < '2014-03-01' ИЛИ Объект.Дата >= '2015-01-01' Тогда
			Объект.ФормаРасчетов = "Оплата з поточного рахунка";
		КонецЕсли;
	КонецЕсли;
	
	Документы.Приложение2КНалоговойНакладной.ЗаполнитьВидДоговора(Объект);
	
	УправлениеФормойНаСервере();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьИтоги(Форма)
	
	Объект = Форма.Объект;
	
	ИзменениеВсего    = Объект.Товары.Итог("ИзменениеСуммы")   +Объект.Услуги.Итог("ИзменениеСуммы")   +Объект.ОС.Итог("ИзменениеСуммы")   +Объект.НМА.Итог("ИзменениеСуммы");
	ИзменениеВсегоНДС = Объект.Товары.Итог("ИзменениеСуммыНДС")+Объект.Услуги.Итог("ИзменениеСуммыНДС")+Объект.ОС.Итог("ИзменениеСуммыНДС")+Объект.НМА.Итог("ИзменениеСуммыНДС");
	Форма.ИтогиВсего    = ?(Объект.СуммаВключаетНДС, ИзменениеВсего, ИзменениеВсего + ИзменениеВсегоНДС);
	Форма.ИтогиВсегоНДС = ИзменениеВсегоНДС;

	Если НЕ ЗначениеЗаполнено(Объект.ВалютаДокумента) Тогда
		Форма.Элементы.ИтогиВсего.Заголовок = НСтр("ru='Всего изменений(<>)';uk='Всього змін(<>)'");
	Иначе
		Форма.Элементы.ИтогиВсего.Заголовок = НСтр("ru='Всего изменений(';uk='Всього змін('") + СокрЛП(Объект.ВалютаДокумента) +")";
	КонецЕсли;

	Если Объект.СуммаВключаетНДС Тогда
		Форма.Элементы.ИтогиВсегоНДС.Заголовок = НСтр("ru='Изменение НДС(в т. ч.)';uk='Зміна ПДВ(у т.ч.)'");
	Иначе
		Форма.Элементы.ИтогиВсегоНДС.Заголовок = НСтр("ru='Изменение НДС(сверху)';uk='Зміна ПДВ(зверху)'");
	КонецЕсли;
	
	НДСОтрицательный = (ИзменениеВсегоНДС < 0);
	
	Форма.Элементы.ДатаВключенияВЕдиныйРеестрНалоговыхНакладных.Видимость = НДСОтрицательный И Объект.Дата >= '2015-01-07';
	Форма.Элементы.ДатаВключенияВЕдиныйРеестрНалоговыхНакладных.Формат = ?(Объект.Дата >= '2016-01-01', "ДФ=MM.yyyy", "ДФ=dd.MM.yy");
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение, ИмяТаблицы) Экспорт
	
	ТаблицаТоваров = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресПодобраннойНоменклатурыВХранилище);
	
	ДанныеОбъекта = Новый Структура("Дата, Организация, ВидОперации, Реализация, ДоговорКонтрагента, ВалютаВзаиморасчетов, НеЯвляетсяРезидентом");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	ДанныеОбъекта.Реализация  = Истина;
	ДанныеОбъекта.ВалютаВзаиморасчетов = ЭтаФорма.ВалютаВзаиморасчетов;
	ДанныеОбъекта.НеЯвляетсяРезидентом = ЭтаФорма.НеЯвляетсяРезидентом;
	
	СоответствиеСведенийОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОСпискеНоменклатуры(
		ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаТоваров, "Номенклатура", Истина), ДанныеОбъекта);
	
	Если ЗначениеЗаполнено(Объект.ТипЦен) Тогда
		ЦенаВключаетНДС	= ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ТипЦен, "ЦенаВключаетНДС");
	Иначе
		ЦенаВключаетНДС	= Объект.СуммаВключаетНДС;
	КонецЕсли;
	
	Для каждого СтрокаТовара Из ТаблицаТоваров Цикл
		
		СтруктураОтбора = Новый Структура("Номенклатура, Цена", СтрокаТовара.Номенклатура, СтрокаТовара.Цена);
		Если ИмяТаблицы = "Товары" Тогда
			СтруктураОтбора.Вставить("ЕдиницаИзмерения",СтрокаТовара.ЕдиницаИзмерения);
		КонецЕсли;
		СтрокаТабличнойЧасти = НайтиСтрокуТабличнойЧасти(ЭтаФорма, ИмяТаблицы, СтруктураОтбора);
		
		Если СтрокаТабличнойЧасти <> Неопределено Тогда
			// Нашли - увеличиваем количество.
			СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + СтрокаТовара.Количество;
			
			Если ИмяТаблицы = "Товары" Тогда
				
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, Объект.СуммаВключаетНДС);
				
				РассчитатьСуммыИзменений(СтрокаТабличнойЧасти, "Товары");
				
			ИначеЕсли ИмяТаблицы = "Услуги" Тогда
				
				// Рассчитываем реквизиты табличной части
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, Объект.СуммаВключаетНДС);
				
				РассчитатьСуммыИзменений(СтрокаТабличнойЧасти, "Товары");
				
			ИначеЕсли ИмяТаблицы = "ВозвратнаяТара" Тогда
				
				// Рассчитываем реквизиты табличной части
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
				РассчитатьСуммыИзменений(СтрокаТабличнойЧасти, "Товары");
				
			КонецЕсли;
			
		Иначе
			
			СтрокаТабличнойЧасти = Объект[ИмяТаблицы].Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтрокаТовара);
			
			СведенияОНоменклатуре = СоответствиеСведенийОНоменклатуре.Получить(СтрокаТовара.Номенклатура);
			Если СведенияОНоменклатуре = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ЗаполнитьСтатьюДекларацииНДСНалоговыеОбязательства(ДанныеОбъекта, СтрокаТабличнойЧасти, ИмяТаблицы);

			Если ИмяТаблицы = "Товары" Тогда
				
				//СтрокаТабличнойЧасти.СтавкаНДС           = СведенияОНоменклатуре.СтавкаНДС;
				ЗаполнитьСтавкуНДС(СтрокаТабличнойЧасти,Объект);
				
				СтрокаТабличнойЧасти.Цена = УчетНДСКлиентСервер.ПересчитатьЦенуПриИзмененииФлаговНалогов(
													СтрокаТабличнойЧасти.Цена, ЦенаВключаетНДС, Объект.СуммаВключаетНДС,
													УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));
				
				// Рассчитываем реквизиты табличной части
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, Объект.СуммаВключаетНДС);
				
				Документы.Приложение2КНалоговойНакладной.УстановитьКодУКТВЭДВстрокеТоваров(СтрокаТабличнойЧасти);
				
			ИначеЕсли ИмяТаблицы = "Услуги" Тогда
				
				// Заполняем реквизиты табличной части
				СтрокаТабличнойЧасти.Содержание	= СведенияОНоменклатуре.НаименованиеПолное;
				//СтрокаТабличнойЧасти.СтавкаНДС           = СведенияОНоменклатуре.СтавкаНДС;
				ЗаполнитьСтавкуНДС(СтрокаТабличнойЧасти,Объект);
				
				СтрокаТабличнойЧасти.Цена = УчетНДСКлиентСервер.ПересчитатьЦенуПриИзмененииФлаговНалогов(
													СтрокаТабличнойЧасти.Цена, ЦенаВключаетНДС, Объект.СуммаВключаетНДС,
													УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));
				
				// Рассчитываем реквизиты табличной части
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, Объект.СуммаВключаетНДС);
				
				Документы.Приложение2КНалоговойНакладной.УстановитьКодУКТВЭДВстрокеТоваров(СтрокаТабличнойЧасти);
				
			ИначеЕсли ИмяТаблицы = "ВозвратнаяТара" Тогда
				
				СтрокаТабличнойЧасти.Цена = УчетНДСКлиентСервер.ПересчитатьЦенуПриИзмененииФлаговНалогов(
				СтрокаТабличнойЧасти.Цена, ЦенаВключаетНДС, Истина,
				УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СведенияОНоменклатуре.СтавкаНДС));
				
				// Рассчитываем реквизиты табличной части
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РассчитатьСуммыИзменений(СтрокаТЧ, ИмяТабЧасти)
	// для совпадения сумм изменений с исходными суммами при вовратах
	// расчет производим пропорционально суммам
	
	Коэф = 0;
	Если НЕ СтрокаТЧ.ИзменениеКоличества = 0 Тогда
		
		Если ИмяТабЧасти = "Товары" Тогда
			ИсходноеКоличество =  СтрокаТЧ.Количество;
		ИначеЕсли ИмяТабЧасти = "ОС"
			  ИЛИ ИмяТабЧасти = "НМА" Тогда
			ИсходноеКоличество = 1;
		Иначе 
		    ИсходноеКоличество = СтрокаТЧ.Количество;
		КонецЕсли;
		
		Если ИсходноеКоличество = 0 Тогда
			ИсходноеКоличество = 1;
		КонецЕсли;
			 
		Коэф =  СтрокаТЧ.ИзменениеКоличества/ИсходноеКоличество;
		
	ИначеЕсли НЕ СтрокаТЧ.ИзменениеЦены = 0 Тогда
		
		Если ИмяТабЧасти = "ОС"
		 ИЛИ ИмяТабЧасти = "НМА" Тогда
			ИсходнаяЦена = СтрокаТЧ.Сумма;
		Иначе 
		    ИсходнаяЦена = СтрокаТЧ.Цена;
		КонецЕсли;
		
		Если ИсходнаяЦена = 0 Тогда
			ИсходнаяЦена = 1;
		КонецЕсли;

		Коэф =  СтрокаТЧ.ИзменениеЦены/ИсходнаяЦена;
		
	КонецЕсли;
	
	СтрокаТЧ.ИзменениеСуммы		= СтрокаТЧ.Сумма * Коэф;
	
	Если  НЕ ИмяТабЧасти = "ВозвратнаяТара" Тогда
		СтрокаТЧ.ИзменениеСуммыНДС	= СтрокаТЧ.СуммаНДС * Коэф;
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Процедура УстановитьЗаголовокФормы(Форма) Экспорт
	
	Объект = Форма.Объект;

	ТекстЗаголовка	= НСтр("ru='Приложение 2 к НН';uk='Додаток 2 до ПН'");
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ТекстЗаголовка = ТекстЗаголовка + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru=' %1 от %2';uk=' %1 від %2'"), СокрЛП(ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(Объект.Номер,Истина,Истина)), Формат(Объект.Дата,"ДФ=dd.MM.yy"));
	Иначе
		ТекстЗаголовка = ТекстЗаголовка + НСтр("ru=' (создание)';uk=' (створення)'");
	КонецЕсли;
	
	Форма.Заголовок = ТекстЗаголовка + " (" + Строка(Объект.ВидОперации) + ")";

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ДанныеОбъекта(ЭтаФорма)
	
	ДанныеОбъекта = Новый Структура(
		"Ссылка,Дата,Номер,ВидОперации,Организация,
		|Контрагент,ДоговорКонтрагента,ТипЦен,ВалютаДокумента,
		|СуммаВключаетНДС,КурсВзаиморасчетов,СуммаДокумента,СуммаНДСДокумента,КратностьВзаиморасчетов,Ответственный,
		|НалоговаяНакладная,ДокументОснование,УсловиеПродажи,ФормаРасчетов,
		|СчетНДС,СубконтоКт1,СубконтоКт2,СубконтоКт3,
		|СчетДт,СубконтоДт1,СубконтоДт2,СубконтоДт3,
		|КтоВыписалНалоговуюНакладную,АвторасчетНДС,РучнаяКорректировка,Сделка,СчетУчетаНДС,ВключаетсяВУточняющийРасчет,
		|ВидДоговора,ТипПричиныНевыдачиПокупателю,СпецРежимНалогообложения,УточняемыйПериод,ОснованиеКорректировки,
		|ВключенаВЕдиныйРеестрНалоговыхНакладных,ТребуетВключенияВЕдиныйРеестрНалоговыхНакладных,ДатаОплаты,
		|ДатаПолученияПокупателем,ДатаПолученияПокупателемНеРавнаДатеДокумента,ЭлектронныйДокумент,НомерДляРеестра,ДатаДляРеестра,
		|ВалютаРегламентированногоУчета");
		
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, ЭтаФорма.Объект);
	ДанныеОбъекта.ВалютаРегламентированногоУчета  = ЭтаФорма.ВалютаРегламентированногоУчета;
	
	Возврат ДанныеОбъекта;
	
КонецФункции

&НаКлиенте
Функция ДанныеСтрокиТабличнойЧасти(СтрокаТабличнойЧасти = Неопределено, ИмяТаблицы = "Товары")

	Если СтрокаТабличнойЧасти = Неопределено Тогда
		СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	КонецЕсли; 
	
	Если ИмяТаблицы = "Товары" Тогда
	
		ПараметрыСтроки = Новый Структура("Номенклатура,Коэффициент,Количество,Цена,Сумма,СтавкаНДС,СуммаНДС,
		|ИзменениеКоличества,ИзменениеЦены,ИзменениеСуммы,ИзменениеСуммыНДС,Причина,
		|СтатьяДекларацииНДСНалоговыеОбязательства,ДатаКорректировки,ЕдиницаИзмерения,СуммаБезСкидки,СуммаСкидки,
		|КодУКТВЭД,НомерГТД,
		|Всего");
	
	ИначеЕсли ИмяТаблицы = "Услуги" Тогда
		
		ПараметрыСтроки = Новый Структура("Номенклатура,Содержание,Количество,Цена,Сумма,СтавкаНДС,СуммаНДС,
		|ИзменениеКоличества,ИзменениеЦены,ИзменениеСуммы,ИзменениеСуммыНДС,Причина,
		|СтатьяДекларацииНДСНалоговыеОбязательства,ДатаКорректировки,ПроцентСкидкиНаценки,СуммаБезСкидки,СуммаСкидки,
		|КодУКТВЭД,
		|Всего");
		
	ИначеЕсли ИмяТаблицы = "ОС" Тогда
		
		ПараметрыСтроки = Новый Структура("ОсновноеСредство,Сумма,СтавкаНДС,СуммаНДС,
		|ИзменениеКоличества,ИзменениеЦены,ИзменениеСуммы,ИзменениеСуммыНДС,Причина,
		|СтатьяДекларацииНДСНалоговыеОбязательства,ДатаКорректировки,КодУКТВЭД,НомерГТД,
		|Всего");
		
		
	ИначеЕсли ИмяТаблицы = "ВозвратнаяТара" Тогда
		
		ПараметрыСтроки = Новый Структура("Номенклатура,Количество,Цена,Сумма,
		|ИзменениеКоличества,ИзменениеЦены,ИзменениеСуммы,Причина");
		
	ИначеЕсли ИмяТаблицы = "НМА" Тогда
		
		ПараметрыСтроки = Новый Структура("НематериальныйАктив,Сумма,СтавкаНДС,СуммаНДС,
		|ИзменениеКоличества,ИзменениеЦены,ИзменениеСуммы,ИзменениеСуммыНДС,Причина,
		|СтатьяДекларацииНДСНалоговыеОбязательства,ДатаКорректировки,КодУКТВЭД,НомерГТД,
		|Всего");
		
	Иначе 
		Сообщить("Неверно указано имя таблицы при вызове функции ДанныеСтрокиТабличнойЧасти()");
	КонецЕсли; 
	
	ЗаполнитьЗначенияСвойств(ПараметрыСтроки, СтрокаТабличнойЧасти);
	
	Возврат ПараметрыСтроки;

КонецФункции

&НаСервереБезКонтекста
Процедура УстановитьТипПричиныНевыдачиПокупателюПоУмолчаниюНаСервере(ДанныеОбъекта)

	Документы.Приложение2КНалоговойНакладной.УстановитьТипПричиныНевыдачиПокупателюПоУмолчанию(ДанныеОбъекта,ДанныеОбъекта.ВалютаРегламентированногоУчета);

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьУсловиеПродажиНаСервере(Объект)
	
	Документы.Приложение2КНалоговойНакладной.ЗаполнитьУсловиеПродажи(Объект);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ИзменитьПараметрыВыбораПолейСубконто(Форма)
	
	ПараметрыДокумента = СписокПараметровВыбораСубконто(Форма, Форма.Объект, "СубконтоКт%Индекс%", "СчетНДС");
	БухгалтерскийУчетКлиентСервер.ИзменитьПараметрыВыбораПолейСубконто(
		Форма, Форма.Объект, "СубконтоКт%Индекс%", "СубконтоКт%Индекс%", ПараметрыДокумента);
	
КонецПроцедуры
	
&НаКлиентеНаСервереБезКонтекста
Процедура ИзменитьПараметрыВыбораПолейСубконтоДт(Форма)
	
	ПараметрыДокумента = СписокПараметровВыбораСубконто(Форма, Форма.Объект, "СубконтоДт%Индекс%", "СчетДт");
	БухгалтерскийУчетКлиентСервер.ИзменитьПараметрыВыбораПолейСубконто(
		Форма, Форма.Объект, "СубконтоДт%Индекс%", "СубконтоДт%Индекс%", ПараметрыДокумента);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьНомерНалоговогоДокументаНаСервере()
	
	СтруктураДанныхОбъекта = ДанныеОбъекта(ЭтаФорма);
	НалоговыйУчет.ПроверитьНомерНалоговогоДокумента(СтруктураДанныхОбъекта,"Приложение2КНалоговойНакладной");
	Объект.Номер = СтруктураДанныхОбъекта.Номер;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьСтавкуНДС(СтрокаТабличнойЧасти,Объект)

	// СтавкаНДС прироритетно определеятся видом операции документа
	СписокДопустимыхСтавокНДС = Документы.Приложение2КНалоговойНакладной.ОпределитьДопустимыеСтавкиНДС(Объект);	
	
	Если СписокДопустимыхСтавокНДС.Количество() > 1 Тогда
		Если СтрокаТабличнойЧасти.Свойство("Номенклатура") Тогда
			СтавкаНДСТовара = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаТабличнойЧасти.Номенклатура, "СтавкаНДС");
			Если СписокДопустимыхСтавокНДС.НайтиПоЗначению(СтавкаНДСТовара) = Неопределено Тогда 
				// в карточке товара указана недопустимая в данном контексте ставка НДС
				СтрокаТабличнойЧасти.СтавкаНДС = Перечисления.СтавкиНДС.ПустаяСсылка();
			Иначе
				СтрокаТабличнойЧасти.СтавкаНДС = СтавкаНДСТовара;
			КонецЕсли;
		Иначе
			СтрокаТабличнойЧасти.СтавкаНДС = СписокДопустимыхСтавокНДС[0].Значение;	
		КонецЕсли;
	Иначе
		СтрокаТабличнойЧасти.СтавкаНДС = СписокДопустимыхСтавокНДС[0].Значение;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Функция ОбработатьИзмененияПоКнопкеЦеныИВалюты(ПересчитатьЦены = Ложь, ПерезаполнитьЦены = Ложь)
	
	// 1. Формируем структуру параметров для заполнения формы "Цены и Валюта".
	СтруктураПараметров = Новый Структура;
	Если  Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПриложение2КНалоговойНакладной.ИтоговаяРозницаОблагаемыеОперацииВозврат")
	  ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПриложение2КНалоговойНакладной.ИтоговаяРозницаОсвобожденныеОперацииВозврат")
	  ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПриложение2КНалоговойНакладной.РозницаКонрагентуОблагаемыеОперацииВозврат")
	  ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПриложение2КНалоговойНакладной.РозницаКонрагентуОсвобожденныеОперацииВозврат") Тогда
	Иначе
		СтруктураПараметров.Вставить("Контрагент",           Объект.Контрагент);
		СтруктураПараметров.Вставить("Договор",              Объект.ДоговорКонтрагента);
		СтруктураПараметров.Вставить("ВалютаДокумента",      Объект.ВалютаДокумента);
		СтруктураПараметров.Вставить("Курс",                 Объект.КурсВзаиморасчетов);
		СтруктураПараметров.Вставить("Кратность",            Объект.КратностьВзаиморасчетов);
	КонецЕсли;
	СтруктураПараметров.Вставить("СуммаВключаетНДС",     Объект.СуммаВключаетНДС);
	СтруктураПараметров.Вставить("Организация",          Объект.Организация);
	СтруктураПараметров.Вставить("ДатаДокумента",        Объект.Дата);
	СтруктураПараметров.Вставить("ПерезаполнитьЦены",    ПерезаполнитьЦены);
	СтруктураПараметров.Вставить("ПересчитатьЦены",      ПересчитатьЦены);
	СтруктураПараметров.Вставить("БылиВнесеныИзменения", Ложь);
	СтруктураПараметров.Вставить("ТипЦен",               Объект.ТипЦен);
	СтруктураПараметров.Вставить("АвторасчетНДС",        Объект.АвторасчетНДС);
	
	// 2. Открываем форму "Цены и Валюта".
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ОбработатьИзмененияПоКнопкеЦеныИВалютыЗавершение", ЭтотОбъект);
	
	ОткрытьФорму("ОбщаяФорма.ФормаЦеныИВалюта", СтруктураПараметров,,,,,ОповещениеОЗакрытии);
	
КонецФункции

&НаКлиенте
Процедура ОбработатьИзмененияПоКнопкеЦеныИВалютыЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	СтруктураЦеныИВалюта = РезультатЗакрытия;
	
	// Перезаполняем табличную часть если были внесены изменения в форме "Цены и Валюта".
	Если ТипЗнч(СтруктураЦеныИВалюта) = Тип("Структура") 
		И СтруктураЦеныИВалюта.БылиВнесеныИзменения Тогда

		ВалютаДоИзменения    = Объект.ВалютаДокумента;
		КурсДоИзменения		 = Объект.КурсВзаиморасчетов;
		КратностьДоИзменения = Объект.КратностьВзаиморасчетов;
		
		Объект.ТипЦен        = СтруктураЦеныИВалюта.ТипЦен;
		
		Если  Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПриложение2КНалоговойНакладной.ИтоговаяРозницаОблагаемыеОперацииВозврат")
		  ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПриложение2КНалоговойНакладной.ИтоговаяРозницаОсвобожденныеОперацииВозврат")
		  ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПриложение2КНалоговойНакладной.РозницаКонрагентуОблагаемыеОперацииВозврат")
		  ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПриложение2КНалоговойНакладной.РозницаКонрагентуОсвобожденныеОперацииВозврат") 
	      ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПриложение2КНалоговойНакладной.УсловнаяПродажаВозврат")
		  Тогда
		Иначе
			Объект.ВалютаДокумента         = СтруктураЦеныИВалюта.ВалютаДокумента;
			Объект.КурсВзаиморасчетов      = СтруктураЦеныИВалюта.Курс;
			Объект.КратностьВзаиморасчетов = СтруктураЦеныИВалюта.Кратность;
		КонецЕсли;
		
		Объект.СуммаВключаетНДС        = СтруктураЦеныИВалюта.СуммаВключаетНДС;
		Объект.АвторасчетНДС           = СтруктураЦеныИВалюта.АвторасчетНДС;
		
		Модифицированность = Истина;

		ПересчитатьНДС = СтруктураЦеныИВалюта.СуммаВключаетНДС <> СтруктураЦеныИВалюта.ПредСуммаВключаетНДС;

		ПриИзмененииЦеныИВалюты(ВалютаДоИзменения, 
			КурсДоИзменения,
			КратностьДоИзменения,
			СтруктураЦеныИВалюта.ПерезаполнитьЦены, 
			СтруктураЦеныИВалюта.ПересчитатьЦены, 
			ПересчитатьНДС);
				
		Если Объект.АвторасчетНДС Тогда
			// соответствие для хранения погрешностей округлений
			ПогрешностиОкругления = Новый Соответствие();
			УчетНДСКлиентСервер.ПересчитатьНДСсУчетомПогрешностиОкругления(Объект.Товары, Объект.Ссылка, Объект.СуммаВключаетНДС, ПогрешностиОкругления, "Товары", Строка(Объект.ВалютаДокумента), "ИзменениеСуммы", "ИзменениеСуммыНДС");
			УчетНДСКлиентСервер.ПересчитатьНДСсУчетомПогрешностиОкругления(Объект.Услуги, Объект.Ссылка, Объект.СуммаВключаетНДС, ПогрешностиОкругления, "Услуги", Строка(Объект.ВалютаДокумента), "ИзменениеСуммы", "ИзменениеСуммыНДС");
			УчетНДСКлиентСервер.ПересчитатьНДСсУчетомПогрешностиОкругления(Объект.ОС    , Объект.Ссылка, Объект.СуммаВключаетНДС, ПогрешностиОкругления, "ОС",     Строка(Объект.ВалютаДокумента), "ИзменениеСуммы", "ИзменениеСуммыНДС");
			УчетНДСКлиентСервер.ПересчитатьНДСсУчетомПогрешностиОкругления(Объект.НМА   , Объект.Ссылка, Объект.СуммаВключаетНДС, ПогрешностиОкругления, "НМА",    Строка(Объект.ВалютаДокумента), "ИзменениеСуммы", "ИзменениеСуммыНДС");
			// Установим признак перерасчета сумм НДС
			ПерерасчетПроизведен = ИСТИНА;
			ЗаполнитьДобавленныеКолонкиТаблиц();
			ОбновитьИтоги(ЭтотОбъект);
		КонецЕсли;
		
		// заполним тип причины невыдачи
		ДанныеОбъекта = ДанныеОбъекта(ЭтаФорма);
		УстановитьТипПричиныНевыдачиПокупателюПоУмолчаниюНаСервере(ДанныеОбъекта);
		Объект.ТипПричиныНевыдачиПокупателю 				   = ДанныеОбъекта.ТипПричиныНевыдачиПокупателю;
		Объект.ТребуетВключенияВЕдиныйРеестрНалоговыхНакладных = ДанныеОбъекта.ТребуетВключенияВЕдиныйРеестрНалоговыхНакладных;
		
	КонецЕсли;
		 	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииЦеныИВалюты(Знач ВалютаДоИзменения, КурсДоИзменения, КратностьДоИзменения, ПерезаполнитьЦены = Ложь, ПересчитатьЦены = Ложь, ПересчитатьНДС = Ложь) Экспорт

	Если ПерезаполнитьЦены ИЛИ ПересчитатьЦены ИЛИ ПересчитатьНДС Тогда
		ПриИзмененииЦеныИВалютыНаСервере(ВалютаДоИзменения, КурсДоИзменения, КратностьДоИзменения, ПерезаполнитьЦены, ПересчитатьЦены, ПересчитатьНДС);
	Иначе
		ОбновитьИтоги(ЭтаФорма);
		УправлениеФормой(ЭтаФорма);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПриИзмененииЦеныИВалютыНаСервере(Знач ВалютаДоИзменения, КурсДоИзменения, КратностьДоИзменения, ПерезаполнитьЦены = Ложь, ПересчитатьЦены = Ложь, ПересчитатьНДС = Ложь)

	Если ПерезаполнитьЦены Тогда
		
	СписокНоменклатуры	= ОбщегоНазначения.ВыгрузитьКолонку(Объект.Товары, "Номенклатура", Истина);
	ОбщегоНазначения.ЗаполнитьМассивУникальнымиЗначениями(СписокНоменклатуры,
		ОбщегоНазначения.ВыгрузитьКолонку(Объект.Услуги, "Номенклатура"));
	ОбщегоНазначения.ЗаполнитьМассивУникальнымиЗначениями(СписокНоменклатуры,
		ОбщегоНазначения.ВыгрузитьКолонку(Объект.ВозвратнаяТара, "Номенклатура"));
	ТаблицаЦенНоменклатуры	= Ценообразование.ПолучитьТаблицуЦенНоменклатуры(
		СписокНоменклатуры,
		Объект.ТипЦен,
		Объект.Дата);
		
	ИначеЕсли ПересчитатьЦены Тогда
		Если КурсДоИзменения <> 0 И КратностьДоИзменения <> 0 Тогда
			СтруктураКурса = Новый Структура("Курс, Кратность", КурсДоИзменения, КратностьДоИзменения);
		Иначе
			СтруктураКурса = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаДоИзменения, Объект.Дата);
		КонецЕсли;
	КонецЕсли;
	
	Для Каждого Строка Из Объект.Товары Цикл
		ЗаполнитьРассчитатьСуммыВСтроке(
			ЭтаФорма, Строка, ТаблицаЦенНоменклатуры, ВалютаДоИзменения, СтруктураКурса, ПерезаполнитьЦены, ПересчитатьЦены, ПересчитатьНДС, Истина, 0, Истина);
		РассчитатьСуммыИзменений(Строка, "Товары");
	КонецЦикла;
	Для Каждого Строка Из Объект.ВозвратнаяТара Цикл
		ЗаполнитьРассчитатьСуммыВСтроке(
			ЭтаФорма, Строка, ТаблицаЦенНоменклатуры, ВалютаДоИзменения, СтруктураКурса, ПерезаполнитьЦены, ПересчитатьЦены, ПересчитатьНДС, Ложь, 0, Ложь);
		РассчитатьСуммыИзменений(Строка, "ВозвратнаяТара");
	КонецЦикла;
	Для Каждого Строка Из Объект.Услуги Цикл
		ЗаполнитьРассчитатьСуммыВСтроке(
			ЭтаФорма, Строка, ТаблицаЦенНоменклатуры, ВалютаДоИзменения, СтруктураКурса, ПерезаполнитьЦены, ПересчитатьЦены, ПересчитатьНДС, Истина, 1, Истина);
		РассчитатьСуммыИзменений(Строка, "Услуги");
	КонецЦикла;
	
	// при пересчете в связи с появлением реквизитов цена и количество для частичной оплаты, необходимо заполнить эти реквизиты для всех строк
	// после пересчета мы очистим реквизиты частичной оплаты, если количество = 1;
	Для Каждого Строка Из Объект.ОС Цикл
		
		Если Строка.Количество = 0 Тогда
			Строка.Количество = 1;
			Строка.Цена = Строка.Сумма;
		КонецЕсли;	
		
		ЗаполнитьРассчитатьСуммыВСтроке(
			ЭтаФорма, Строка, ТаблицаЦенНоменклатуры, ВалютаДоИзменения, СтруктураКурса, Ложь, ПересчитатьЦены, ПересчитатьНДС, Истина, 1, Ложь);
			
		Если Строка.Количество = 1 Тогда
			Строка.Количество = 0;
			Строка.Цена 		= 0;
		КонецЕсли;	
		
		// Рассчитать реквизиты табличной части.
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(Строка, Объект.СуммаВключаетНДС);
		РассчитатьСуммыИзменений(Строка, "ОС");
		
	КонецЦикла;
	
	Для Каждого Строка Из Объект.НМА Цикл
		
		Если Строка.Количество = 0 Тогда
			Строка.Количество = 1;
			Строка.Цена = Строка.Сумма;
		КонецЕсли;	
		
		ЗаполнитьРассчитатьСуммыВСтроке(
			ЭтаФорма, Строка, ТаблицаЦенНоменклатуры, ВалютаДоИзменения, СтруктураКурса, Ложь, ПересчитатьЦены, ПересчитатьНДС, Истина, 1, Ложь);
			
		Если Строка.Количество = 1 Тогда
			Строка.Количество = 0;
			Строка.Цена 	  = 0;
		КонецЕсли;	
		
		// Рассчитать реквизиты табличной части.
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(Строка, Объект.СуммаВключаетНДС);
		РассчитатьСуммыИзменений(Строка, "НМА");
		
	КонецЦикла;
	
	ЗаполнитьДобавленныеКолонкиТаблиц();

	УстановитьЗаголовкиКолонок();

	ОбновитьИтоги(ЭтаФорма);
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСсылкуНаВидДоговораПоГКПоНаименованию(ВидДоговора)

	Возврат Справочники.ВидыДоговоровПоГК.НайтиПоНаименованию(ВидДоговора, Истина);		

КонецФункции // ()

&НаСервере
Процедура ПодготовитьФормуНаСервере() Экспорт
	
	ТекущаяДатаДокумента          = Объект.Дата;
	
	УстановитьФункциональныеОпцииФормы();
	
	Если Элементы.СпецРежимНалогообложения.СписокВыбора.Количество() = 0 Тогда
		УчетНДС.ЗаполнитьСписокВыбораСпецРежимаНалогообложения(Элементы.СпецРежимНалогообложения.СписокВыбора);
	КонецЕсли;
	ЭлементСпискаЗначений 				= Элементы.СпецРежимНалогообложения.СписокВыбора.НайтиПоЗначению(Объект.СпецРежимНалогообложения);
	РасшифровкаСпецРежимНалогообложения = ?(ЭлементСпискаЗначений = Неопределено, "", ЭлементСпискаЗначений.Представление);
	
	// ИНАГРО++
	Если Элементы.ИНАГРО_НаправлениеОперации.СписокВыбора.Количество() = 0 Тогда 		
		Элементы.ИНАГРО_НаправлениеОперации.СписокВыбора.Добавить(1, "01-Операції із зерновими та технічними культурами");
		Элементы.ИНАГРО_НаправлениеОперации.СписокВыбора.Добавить(2, "02-Операції з продукцією тваринництва"); 
		Элементы.ИНАГРО_НаправлениеОперации.СписокВыбора.Добавить(3, "03-операціями з сільськогосподарськими товарами/послугами (крім операцій із зерновими та технічними культурами та операцій з продукцією тваринництва"); 
	КонецЕсли;
	ЭлементСпискаЗначений 		  = Элементы.ИНАГРО_НаправлениеОперации.СписокВыбора.НайтиПоЗначению(Объект.ИНАГРО_НаправлениеОперации);
	РасшифровкаИНАГРО_НаправлениеОперации = ?(ЭлементСпискаЗначений = Неопределено, "", ЭлементСпискаЗначений.Представление); 
	// ИНАГРО--
	
	Если Элементы.ТипПричиныНевыдачиПокупателю.СписокВыбора.Количество() = 0 Тогда
		УчетНДС.ЗаполнитьСписокВыбораТипПричиныНевыдачиПокупателю(Элементы.ТипПричиныНевыдачиПокупателю.СписокВыбора,"Приложение2КНалоговойНакладной");
	КонецЕсли;
	ЭлементСпискаЗначений 		  = Элементы.ТипПричиныНевыдачиПокупателю.СписокВыбора.НайтиПоЗначению(Объект.ТипПричиныНевыдачиПокупателю);
	РасшифровкаТипПричиныНевыдачи = ?(ЭлементСпискаЗначений = Неопределено, "", ЭлементСпискаЗначений.Представление);
	Элементы.ДекорацияСРасшифровкойСчета.Заголовок = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Объект.СчетНДС).Наименование;
	Элементы.ДекорацияСРасшифровкойСчетаДт.Заголовок = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Объект.СчетДт).Наименование;
	
	ПлательщикНДС     = Истина;
	ПлательщикНалогаНаПрибыльДо2015 = УчетнаяПолитика.ПлательщикНалогаНаПрибыльДо2015(Объект.Организация, Объект.Дата);	
	
	ВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	
	ДоговорУказан     = ЗначениеЗаполнено(Объект.ДоговорКонтрагента);
	РеквизитыДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
	Объект.ДоговорКонтрагента, "ВидДоговора, ВалютаВзаиморасчетов, ВедениеВзаиморасчетовНУ");
	
	Если ДоговорУказан Тогда
		ВалютаВзаиморасчетов    = РеквизитыДоговора.ВалютаВзаиморасчетов;
		ВедениеВзаиморасчетовНУ = РеквизитыДоговора.ВедениеВзаиморасчетовНУ;
	КонецЕсли;
	
	ВедениеВзаиморасчетовПоРасчетнымДокументам = ДоговорУказан И РеквизитыДоговора.ВедениеВзаиморасчетовНУ = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоРасчетнымДокументам;
	Внешнеэкономический = ДоговорУказан И РеквизитыДоговора.ВалютаВзаиморасчетов <> ВалютаРегламентированногоУчета;
	НеЯвляетсяРезидентом = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Контрагент, "НеЯвляетсяРезидентом");
	
	Если Не ЗначениеЗаполнено(Объект.СчетДт) Тогда
		Объект.СчетДт  = ПланыСчетов.Хозрасчетный.ВычетыИзДохода;
	КонецЕсли;
	
	УстановитьПараметрыВыбора();
	
	ЗаполнитьДобавленныеКолонкиТаблиц();
	
	УстановитьЗаголовокФормы(ЭтаФорма);
	
	УстановитьЗаголовкиКолонок();
	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма);
	
	УправлениеФормой(ЭтаФорма);
	
	УстановитьСостояниеДокумента();
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьСтатьюДекларацииНДСНалоговыеОбязательства(ДанныеОбъекта, СтрокаТабличнойЧасти, ИмяТабличнойЧасти)

	Документы.Приложение2КНалоговойНакладной.ЗаполнитьСтатьюДекларацииНДСНалоговыеОбязательства(ДанныеОбъекта, СтрокаТабличнойЧасти, ИмяТабличнойЧасти);		
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменениеКоличестваПриИзменении(ИмяТабличнойЧасти = "Товары")
	
	СтрокаТабличнойЧасти = Элементы[ИмяТабличнойЧасти].ТекущиеДанные;
	
	Если СтрокаТабличнойЧасти.ИзменениеКоличества <> 0 Тогда
		Если СтрокаТабличнойЧасти.ИзменениеЦены <> 0 Тогда
		    СтрокаТабличнойЧасти.ИзменениеЦены = 0;
		    ТекстОповещения = НСтр("ru='Разрешается корректировать или цену или количество';uk='Дозволяється коригувати або ціну або кількість'");
			ПоказатьОповещениеПользователя(НСтр("ru='Изменена цена';uk='Змінена ціна'"),,ТекстОповещения);
		КонецЕсли;
	КонецЕсли;

	Если СтрокаТабличнойЧасти.ИзменениеКоличества < 0 Тогда
		Если ИмяТабличнойЧасти = "ОС" Или ИмяТабличнойЧасти = "НМА" Тогда
			СтрокаТабличнойЧасти.ИзменениеКоличества = Макс(СтрокаТабличнойЧасти.ИзменениеКоличества, -1);
		Иначе 
			СтрокаТабличнойЧасти.ИзменениеКоличества = Макс(СтрокаТабличнойЧасти.ИзменениеКоличества, - СтрокаТабличнойЧасти.Количество);
		КонецЕсли;
	КонецЕсли;

	РассчитатьСуммыИзменений(СтрокаТабличнойЧасти, ИмяТабличнойЧасти);	

КонецПроцедуры

&НаКлиенте
Процедура ИзменениеЦеныПриИзменении(ИмяТабличнойЧасти = "Товары")
	
	СтрокаТабличнойЧасти = Элементы[ИмяТабличнойЧасти].ТекущиеДанные;
	
	Если СтрокаТабличнойЧасти.ИзменениеЦены <> 0 Тогда
		Если СтрокаТабличнойЧасти.ИзменениеКоличества <> 0 Тогда
		    СтрокаТабличнойЧасти.ИзменениеКоличества = 0;
			ПоказатьОповещениеПользователя(НСтр("ru='Изменено количество';uk='Змінено кількість'"),,НСтр("ru='Разрешается корректировать или цену или количество';uk='Дозволяється коригувати або ціну або кількість'"));
		КонецЕсли;
	КонецЕсли;

	Если СтрокаТабличнойЧасти.ИзменениеЦены < 0 Тогда
		Если ИмяТабличнойЧасти = "ОС" Или ИмяТабличнойЧасти = "НМА" Тогда
			СтрокаТабличнойЧасти.ИзменениеЦены = Макс(СтрокаТабличнойЧасти.ИзменениеЦены, -СтрокаТабличнойЧасти.Сумма);
		Иначе 
			СтрокаТабличнойЧасти.ИзменениеЦены = Макс(СтрокаТабличнойЧасти.ИзменениеЦены, - СтрокаТабличнойЧасти.Цена);
		КонецЕсли;
	КонецЕсли;

	РассчитатьСуммыИзменений(СтрокаТабличнойЧасти, ИмяТабличнойЧасти);
КонецПроцедуры


&НаСервереБезКонтекста
Функция НайтиСтрокуТабличнойЧасти(Форма, ИмяТабличнойЧасти, СтруктураОтбора)

	Объект = Форма.Объект;

	СтрокаТабличнойЧасти = Неопределено;

	МассивНайденныхСтрок = Объект[ИмяТабличнойЧасти].НайтиСтроки(СтруктураОтбора);
	Если МассивНайденныхСтрок.Количество() > 0 Тогда
		// Нашли. Вернем первую найденную строку.
		СтрокаТабличнойЧасти = МассивНайденныхСтрок[0];
	КонецЕсли;

	Возврат СтрокаТабличнойЧасти;

КонецФункции

&НаСервере
Процедура ЗаполнитьДобавленныеКолонкиТаблиц(ИмяТаблицы = "") Экспорт

	ПараметрыОбъекта = Неопределено;
	ЗаполнитьПараметрыОбъектаДляЗаполненияДобавленныхКолонок(ЭтаФорма, ПараметрыОбъекта);

	Если ПустаяСтрока(ИмяТаблицы) ИЛИ ИмяТаблицы = "Товары" Тогда
		Для каждого СтрокаТаблицы Из Объект.Товары Цикл
			ЗаполнитьДобавленныеКолонкиСтрокиТаблицы(СтрокаТаблицы, ПараметрыОбъекта);
		КонецЦикла;
	КонецЕсли;
	
	Если ПустаяСтрока(ИмяТаблицы) ИЛИ ИмяТаблицы = "Услуги" Тогда
		Для каждого СтрокаТаблицы Из Объект.Услуги Цикл
			ЗаполнитьДобавленныеКолонкиСтрокиТаблицы(СтрокаТаблицы, ПараметрыОбъекта);
		КонецЦикла;
	КонецЕсли;
	
	Если ПустаяСтрока(ИмяТаблицы) ИЛИ ИмяТаблицы = "ОС" Тогда
		Для каждого СтрокаТаблицы Из Объект.ОС Цикл
			ЗаполнитьДобавленныеКолонкиСтрокиТаблицы(СтрокаТаблицы, ПараметрыОбъекта);
		КонецЦикла;
	КонецЕсли;
	
	Если ПустаяСтрока(ИмяТаблицы) ИЛИ ИмяТаблицы = "НМА" Тогда
		Для каждого СтрокаТаблицы Из Объект.НМА Цикл
			ЗаполнитьДобавленныеКолонкиСтрокиТаблицы(СтрокаТаблицы, ПараметрыОбъекта);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УправлениеФормойНаСервере() Экспорт
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура УдалитьРеквизитФормы(ИмяРеквизита)

	УдаляемыеРеквизиты = Новый Массив();		
	УдаляемыеРеквизиты.Добавить(ИмяРеквизита);

	ИзменитьРеквизиты(,УдаляемыеРеквизиты);	

КонецПроцедуры

&НаСервере
Процедура УстановитьЗаголовкиКолонок() Экспорт
	
	ЗаголовокЦена  = ?(Объект.СуммаВключаетНДС, НСтр("ru='Цена с НДС';uk='Ціна з ПДВ'"), НСтр("ru='Цена без НДС';uk='Ціна без ПДВ'"));
	ЗаголовокСумма = ?(Объект.СуммаВключаетНДС, НСтр("ru='Сумма с НДС';uk='Сума з ПДВ'"), НСтр("ru='Сумма без НДС';uk='Сума без ПДВ'"));
	
	Элементы.ТоварыЦена.Заголовок = ЗаголовокЦена;
	Элементы.ТоварыСумма.Заголовок = ЗаголовокСумма;
	
	Элементы.УслугиЦена.Заголовок = ЗаголовокЦена;
	Элементы.УслугиСумма.Заголовок = ЗаголовокСумма;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьФункциональныеОпцииФормы() Экспорт

	ОбщегоНазначенияБПКлиентСервер.УстановитьПараметрыФункциональныхОпцийФормыДокумента(ЭтаФорма);
	ПлательщикНалогаНаПрибыльДо2015 = УчетнаяПолитика.ПлательщикНалогаНаПрибыль(Объект.Организация, Объект.Дата);	
	ИспользоватьВозвратнуюТару = ПолучитьФункциональнуюОпцию("ИспользоватьВозвратнуюТару");
	
КонецПроцедуры 

&НаСервере
Процедура УстановитьПараметрыВыбора()

	МассивДопустимыхСтавокНДС = Документы.Приложение2КНалоговойНакладной.ОпределитьДопустимыеСтавкиНДС(Объект).ВыгрузитьЗначения();	
	
	Элементы.ТоварыСтавкаНДС.СписокВыбора.ЗагрузитьЗначения(МассивДопустимыхСтавокНДС);
	Элементы.УслугиСтавкаНДС.СписокВыбора.ЗагрузитьЗначения(МассивДопустимыхСтавокНДС);
	Элементы.ОССтавкаНДС.СписокВыбора.ЗагрузитьЗначения(МассивДопустимыхСтавокНДС);
	Элементы.НМАСтавкаНДС.СписокВыбора.ЗагрузитьЗначения(МассивДопустимыхСтавокНДС);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Объект = Форма.Объект;
	Элементы = Форма.Элементы;	
	
	УстановитьЗаголовкиИДоступностьСубконто(Форма, Объект.СчетНДС, "СубконтоКт");
	УстановитьЗаголовкиИДоступностьСубконто(Форма, Объект.СчетДт, "СубконтоДт");	
	
	ОбновитьИтоги(Форма);
	СформироватьНадписьЦеныИВалюта(Форма);
	
	Элементы.УточняемыйПериод.Видимость = Объект.ВключаетсяВУточняющийРасчет;
	Элементы.НомерДляРеестра.Видимость  = Объект.ВключаетсяВУточняющийРасчет;
	Элементы.ДатаДляРеестра.Видимость   = Объект.ВключаетсяВУточняющийРасчет;
	
	
	Если Объект.ДатаПолученияПокупателемНеРавнаДатеДокумента Тогда
		Элементы.ДатаПолученияПокупателемНеРавнаДатеДокумента.Заголовок = НСтр("ru='Дата получения покупателем не равна дате документа. Документ получен:';uk='Дата отримання покупцем не дорівнює даті документа. Документ отриман:'");
		Элементы.ДатаПолученияПокупателем.Видимость = Истина;
	Иначе	
		Элементы.ДатаПолученияПокупателемНеРавнаДатеДокумента.Заголовок = НСтр("ru='Дата получения покупателем не равна дате документа. ';uk='Дата отримання покупцем не дорівнює даті документа. '");
		Элементы.ДатаПолученияПокупателем.Видимость = Ложь;	
	КонецЕсли;
	
	Элементы.ЭлектронныйДокумент.Доступность = (Объект.Дата < '2015-01-01');
	Если Объект.Дата >= '2015-01-01' Тогда
		Элементы.ТребуетВключенияВЕдиныйРеестрНалоговыхНакладных.Доступность = Ложь;
	КонецЕсли;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СформироватьНадписьЦеныИВалюта(Форма) Экспорт
	
	Объект = Форма.Объект;
	СтруктураНадписи = Новый Структура(
		"ТипЦен, ВалютаДокумента, Курс, Кратность, ВалютаРегламентированногоУчета",
		Объект.ТипЦен,
		Объект.ВалютаДокумента,
		Объект.КурсВзаиморасчетов,
		Объект.КратностьВзаиморасчетов,
		Форма.ВалютаРегламентированногоУчета);
		
	СтруктураНадписи.Вставить("СуммаВключаетНДС", Объект.СуммаВключаетНДС);
	СтруктураНадписи.Вставить("АвторасчетНДС", 	  Объект.АвторасчетНДС);
	
	Форма.ЦеныИВалюта = ОбщегоНазначенияБПКлиентСервер.СформироватьНадписьЦеныИВалюта(СтруктураНадписи);
	
КонецПроцедуры 

&НаСервере
Функция СписокВидимыхТабличныхЧастей()

	СписокТЧ = Новый СписокЗначений;
	
	СписокТЧ.Добавить("Товары", "Товары");
	Если ?(Объект.ВозвратнаяТара.Количество() = 0, ИспользоватьВозвратнуюТару, Истина) И Не Внешнеэкономический Тогда
		СписокТЧ.Добавить("ВозвратнаяТара", "ВозвратнаяТара");
	КонецЕсли;
	СписокТЧ.Добавить("Услуги", "Услуги");
	СписокТЧ.Добавить("ОС", "ОС");
	СписокТЧ.Добавить("НМА", "НМА");
	
	Возврат СписокТЧ;

КонецФункции

&НаСервереБезКонтекста
Процедура ЗаполнитьДобавленныеКолонкиСтрокиТаблицы(СтрокаТаблицы, Знач ПараметрыОбъекта)

	СтрокаТаблицы.Всего = СтрокаТаблицы.Сумма + ?(ПараметрыОбъекта.СуммаВключаетНДС, 0, СтрокаТаблицы.СуммаНДС);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьПараметрыОбъектаДляЗаполненияДобавленныхКолонок(Знач Форма, ПараметрыОбъекта)

	Объект = Форма.Объект;
	
	Если ТипЗнч(ПараметрыОбъекта) <> Тип("Структура") Тогда
		ПараметрыОбъекта = Новый Структура;
	КонецЕсли;
	
	ПараметрыОбъекта.Вставить("СуммаВключаетНДС", 	Объект.СуммаВключаетНДС);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьРассчитатьСуммыВСтроке(Форма, Строка, ТаблицаЦенНоменклатуры, ВалютаПередИзменением, СтруктураКурса,
										ПерезаполнитьЦены, ПересчитатьЦены, ПересчитатьНДС, ЕстьНДС,
										ЗначениеПустогоКоличества, ЕстьСкидки)

	Объект = Форма.Объект;

	Если ПерезаполнитьЦены Тогда
		
		НайденнаяСтрока	= ТаблицаЦенНоменклатуры.Найти(Строка.Номенклатура, "Номенклатура");
		Если НайденнаяСтрока <> Неопределено Тогда
			Цена = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(
				НайденнаяСтрока.Цена, НайденнаяСтрока.Валюта, Объект.ВалютаДокумента, НайденнаяСтрока.Курс,
				Объект.КурсВзаиморасчетов, НайденнаяСтрока.Кратность, Объект.КратностьВзаиморасчетов);
			Если ЕстьСкидки Тогда
				СуммаСкидки = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(
					Строка.СуммаСкидки, НайденнаяСтрока.Валюта, Объект.ВалютаДокумента, НайденнаяСтрока.Курс,
					Объект.КурсВзаиморасчетов, НайденнаяСтрока.Кратность, Объект.КратностьВзаиморасчетов);
			Иначе
				СуммаСкидки = 0;
			КонецЕсли;
		Иначе
			Цена = 0;
			СуммаСкидки = 0;
		КонецЕсли;
		
		// Признак того, что цена включает НДС, хранится в реквизите ЦенаВключаетНДС типа цен
		ЦенаВключаетНДС = ?(ЗначениеЗаполнено(Объект.ТипЦен), Объект.ТипЦен.ЦенаВключаетНДС, Ложь);
		
	Иначе
		Если ПересчитатьЦены Тогда

			Цена = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(
				Строка.Цена, ВалютаПередИзменением, Объект.ВалютаДокумента, СтруктураКурса.Курс,
				Объект.КурсВзаиморасчетов, СтруктураКурса.Кратность, Объект.КратностьВзаиморасчетов);
			Если ЕстьСкидки Тогда
				СуммаСкидки = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(
					Строка.СуммаСкидки, ВалютаПередИзменением, Объект.ВалютаДокумента, СтруктураКурса.Курс,
					Объект.КурсВзаиморасчетов, СтруктураКурса.Кратность, Объект.КратностьВзаиморасчетов);
			Иначе
				СуммаСкидки = 0;
			КонецЕсли;

		Иначе
			Цена = Строка.Цена;
			Если ЕстьСкидки Тогда
				СуммаСкидки = Строка.СуммаСкидки;
			Иначе
				СуммаСкидки = 0;
			КонецЕсли;
		КонецЕсли;
		// Признак того, что цена включает НДС, хранится в реквизите СуммаВключаетНДС документа
		ЦенаВключаетНДС = ?(ПересчитатьНДС, НЕ Объект.СуммаВключаетНДС, Объект.СуммаВключаетНДС);
	КонецЕсли;

	Если ЕстьНДС Тогда

		Строка.Цена = УчетНДСКлиентСервер.ПересчитатьЦенуПриИзмененииФлаговНалогов(
			Цена, ЦенаВключаетНДС, Объект.СуммаВключаетНДС, УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(Строка.СтавкаНДС));

		СуммаБезСкидки = Строка.Цена * ?(Строка.Количество = 0, ЗначениеПустогоКоличества, Строка.Количество);
		Если ЕстьСкидки Тогда
			Строка.СуммаБезСкидки = СуммаБезСкидки;
			Если (СуммаСкидки <> 0) И (Цена <> Строка.Цена) И (Цена <> 0) Тогда
				СуммаСкидки = Окр(СуммаСкидки * Строка.Цена / Цена, 2, 1);
			КонецЕсли;
			Строка.СуммаСкидки = СуммаСкидки;
		КонецЕсли;
		Строка.Сумма = СуммаБезСкидки - СуммаСкидки;
		Строка.СуммаНДС = УчетНДСКлиентСервер.РассчитатьСуммуНДС(Строка.Сумма, Объект.СуммаВключаетНДС, УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(Строка.СтавкаНДС));

	Иначе
		Строка.Цена = Цена;
		СуммаБезСкидки = Строка.Цена * ?(Строка.Количество = 0, ЗначениеПустогоКоличества, Строка.Количество);
		Если ЕстьСкидки Тогда
			Строка.СуммаБезСкидки = СуммаБезСкидки;
			Строка.СуммаСкидки = СуммаСкидки;
		КонецЕсли;
		Строка.Сумма = СуммаБезСкидки - СуммаСкидки;
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗаполнитьПараметрыВыбораНоменклатурыГТД(ТекущаяСтрокаТоваров)
	
	Параметры = Новый Структура("Отбор, ТекущаяСтрока");
	
	Параметры.Отбор = Новый Структура("Владелец", ТекущаяСтрокаТоваров.Номенклатура); 
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("КодУКТВЭД", ТекущаяСтрокаТоваров.КодУКТВЭД);
	Запрос.УстановитьПараметр("НомерГТД",  ТекущаяСтрокаТоваров.НомерГТД);
	Запрос.УстановитьПараметр("Владелец",  ТекущаяСтрокаТоваров.Номенклатура);
	
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	               |	НоменклатураГТД.Ссылка
	               |ИЗ
	               |	Справочник.НоменклатураГТД КАК НоменклатураГТД
	               |ГДЕ
	               |	НоменклатураГТД.КодУКТВЭД  = &КодУКТВЭД
	               |	И НоменклатураГТД.НомерГТД = &НомерГТД
	               |	И НоменклатураГТД.Владелец = &Владелец";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Параметры.ТекущаяСтрока = Выборка.Ссылка;	
	КонецЕсли;
	
	Возврат Параметры; 
	
КонецФункции	

&НаКлиентеНаСервереБезКонтекста
Функция СписокПараметровВыбораСубконто(Форма, ПараметрыОбъекта, ШаблонИмяПоляОбъекта, ИмяСчета)
	
	СписокПараметров = Новый Структура;
	Для Индекс = 1 По 3 Цикл
		ИмяПоля = СтрЗаменить(ШаблонИмяПоляОбъекта, "%Индекс%", Индекс);
		Если ТипЗнч(ПараметрыОбъекта[ИмяПоля]) = Тип("СправочникСсылка.Контрагенты") Тогда
			СписокПараметров.Вставить("Контрагент", ПараметрыОбъекта[ИмяПоля]);
		ИначеЕсли ТипЗнч(ПараметрыОбъекта[ИмяПоля]) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
			СписокПараметров.Вставить("ДоговорКонтрагента", ПараметрыОбъекта[ИмяПоля]);
		ИначеЕсли ТипЗнч(ПараметрыОбъекта[ИмяПоля]) = Тип("СправочникСсылка.Номенклатура") Тогда
			СписокПараметров.Вставить("Номенклатура", ПараметрыОбъекта[ИмяПоля]);
		ИначеЕсли ТипЗнч(ПараметрыОбъекта[ИмяПоля]) = Тип("СправочникСсылка.Склады") Тогда
			СписокПараметров.Вставить("Склад", ПараметрыОбъекта[ИмяПоля]);
		КонецЕсли;
	КонецЦикла;
	СписокПараметров.Вставить("Организация", Форма.Объект.Организация);
	//СписокПараметров.Вставить("СчетУчета",   Форма.Объект[ИмяСчета]);
	
	Возврат СписокПараметров;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьЗаголовкиИДоступностьСубконто(Форма, Счет, Префикс)
	
	ПоляФормы = Новый Структура("Субконто1, Субконто2, Субконто3",
		Префикс + "1",
		Префикс + "2",
		Префикс + "3");
	
	ЗаголовкиПолей = Новый Структура("Субконто1, Субконто2, Субконто3",
		"Заголовок" + Префикс + "1", "Заголовок" + Префикс + "2", "Заголовок" + Префикс + "3");
	
	БухгалтерскийУчетКлиентСервер.ПриВыбореСчета(Счет, Форма, ПоляФормы, ЗаголовкиПолей);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСписокТиповДляВыбораДокументаОснования(Объект)
	
	СписокТипов = Новый СписокЗначений;
	
	МассивТиповДокументаОснования = Метаданные.Документы.Приложение2КНалоговойНакладной.Реквизиты["ДокументОснование"].Тип.Типы();
	
	ОграничениеТипов = Новый Массив();
	Для каждого ТипРеквизита Из МассивТиповДокументаОснования Цикл
		// документ больше не используется
		Если ТипРеквизита = Тип("ДокументСсылка.ПлатежныйОрдерСписаниеДенежныхСредств") Тогда 	
			Продолжить;
		Иначе
			ОграничениеТипов.Добавить(ТипРеквизита);
		КонецЕсли;
		
	КонецЦикла;
	
	Для каждого ЭлементМассива Из МассивТиповДокументаОснования Цикл
		
		Если ОграничениеТипов.Найти(ЭлементМассива) = Неопределено Тогда
			 // Тип не вписывается в полученные ограничения
			Продолжить;
		КонецЕсли;
		
		ПустоеЗначение = Новый(ЭлементМассива);
		ОбъектОписанияМетаданных = ПустоеЗначение.Метаданные();
		
		СписокТипов.Добавить(ОбъектОписанияМетаданных.Имя, ОбъектОписанияМетаданных.Представление());
		
	КонецЦикла; 
	
	СписокТипов.СортироватьПоПредставлению();
	// добавим в список "первым номером" собственно сделку
	Если ЗначениеЗаполнено(Объект.Сделка) Тогда
		СписокТипов.Вставить(0,Объект.Сделка);	
	КонецЕсли;
	
	Возврат СписокТипов;	

КонецФункции // ()

&НаСервере
Процедура УстановитьСостояниеДокумента()
	
	СостояниеДокумента = ОбщегоНазначенияБП.СостояниеДокумента(Объект);
	
КонецПроцедуры

#КонецОбласти  //СлужебныеПроцедурыИФункции

#Область КомандыФормы

&НаКлиенте
Процедура ЗаполнитьПоДокументуОснованиюТовары(Команда)
	
	ЗаполнитьТабличнуюЧасть("Товары");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоДокументуОснованиюВозвратнаяТара(Команда)
	
	ЗаполнитьТабличнуюЧасть("ВозвратнаяТара");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоДокументуОснованиюУслуги(Команда)
	
	ЗаполнитьТабличнуюЧасть("Услуги");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоДокументуОснованиюНМА(Команда)
	
	ЗаполнитьТабличнуюЧасть("НМА");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоДокументуОснованиюОС(Команда)
	
	ЗаполнитьТабличнуюЧасть("ОС");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТабличнуюЧасть(ТабличнаяЧасть)

	ЗаполнятьТабличнуюЧасть = Ложь;
	Если НЕ ЗначениеЗаполнено(Объект.НалоговаяНакладная) Тогда
		ТекстПредупреждения = НСтр("ru='Не выбрана  налоговая наладная. Заполнение невозможно.';uk='Не обрана  податкова накладна. Заповнення неможливо.'");
	Иначе
		ЗаполнятьТабличнуюЧасть = Истина;
	КонецЕсли;

	Если Не ЗаполнятьТабличнуюЧасть Тогда
		ПоказатьПредупреждение(,ТекстПредупреждения, , НСтр("ru='Заполнение';uk='Заповнення'"));
		Возврат;
	КонецЕсли;

	Если Объект[ТабличнаяЧасть].Количество() > 0 Тогда
		
		ТекстВопроса = НСтр("ru='Табличная часть будет очищена. Продолжить?';uk='Таблична частина буде очищена. Продовжити?'");
		Ответ = Неопределено;

		ПоказатьВопрос(Новый ОписаниеОповещения("ЗаполнитьТабличнуюЧастьЗавершение", ЭтотОбъект, Новый Структура("ТабличнаяЧасть", ТабличнаяЧасть)), ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да,НСтр("ru='Заполнение';uk='Заповнення'"));
        Возврат; 
		
	КонецЕсли;
	
	ЗаполнитьТабличнуюЧастьНаСервере(ТабличнаяЧасть);
	
КонецПроцедуры// ЗаполнитьТабличнуюЧасть()

&НаКлиенте
Процедура ЗаполнитьТабличнуюЧастьЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    ТабличнаяЧасть = ДополнительныеПараметры.ТабличнаяЧасть;
    
    Ответ = РезультатВопроса;
    Если Ответ = КодВозвратаДиалога.Да Тогда
        Объект[ТабличнаяЧасть].Очистить();
	Иначе 
		Возврат;
	КонецЕсли; 
    
    ЗаполнитьТабличнуюЧастьНаСервере(ТабличнаяЧасть);

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТабличнуюЧастьНаСервере(ИмяТЧ)
	
	Документ = РеквизитФормыВЗначение("Объект", Тип("ДокументОбъект.Приложение2КНалоговойНакладной"));
	
	Если ИмяТЧ = "Товары" Тогда
		Документ.СкопироватьТовары();
	ИначеЕсли ИмяТЧ = "ВозвратнаяТара" Тогда
		Документ.СкопироватьВозвратнуюТару();
	ИначеЕсли ИмяТЧ = "Услуги" Тогда
		Документ.СкопироватьУслуги();
	ИначеЕсли ИмяТЧ = "ОС" Тогда
		Документ.СкопироватьОС();
	ИначеЕсли ИмяТЧ = "НМА" Тогда
		Документ.СкопироватьНематериальныеАктивы();
	КонецЕсли;

	ЗначениеВРеквизитФормы(Документ, "Объект");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоОстаткамТовары(Команда)
	
	ЗаполнитьПоОстаткам("Товары");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоОстаткамВозвратнаяТара(Команда)
	
	ЗаполнитьПоОстаткам("ВозвратнаяТара");

КонецПроцедуры
	
&НаКлиенте
Процедура ЗаполнитьПоОстаткам(ИмяТЧ)
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПоказатьПредупреждение(,НСтр("ru='Заполнить документ можно только после его записи';uk='Заповнити документ можна тільки після його запису'"));
		Возврат;
	КонецЕсли;	
	
	ЗаполнятьТабличнуюЧасть = Истина;
	Если  НЕ ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
			ТекстПредупреждения = НСтр("ru='Не выбран договор. Заполнение невозможно.';uk='Не обраний договір. Заповнення неможливо.'");
			ЗаполнятьТабличнуюЧасть = Ложь;
	ИначеЕсли НЕ ЗначениеЗаполнено(Объект.Сделка)
			    И ВедениеВзаиморасчетовПоРасчетнымДокументам Тогда
				
				ТекстПредупреждения = НСтр("ru='Не указан документ расчетов.
|Заполнение невозможно.';uk='Не зазначений документ розрахунків.
|Заповнення неможливо.'");
			ЗаполнятьТабличнуюЧасть = Ложь;
	КонецЕсли; 
	
	Если Не ЗаполнятьТабличнуюЧасть Тогда
		ПоказатьПредупреждение(,ТекстПредупреждения, , );
		Возврат;
	КонецЕсли;	
	
	Если Объект[ИмяТЧ].Количество() > 0 Тогда
		
		ТекстВопроса = НСтр("ru='Очистить табличную часть перед заполнением?';uk='Очистити табличну частину перед заповненням?'");
		Ответ = Неопределено;

		ПоказатьВопрос(Новый ОписаниеОповещения("ЗаполнитьПоОстаткамЗавершение", ЭтотОбъект, Новый Структура("ИмяТЧ", ИмяТЧ)), ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да, НСтр("ru='Заполнение';uk='Заповнення'"));
        Возврат; 
		
	КонецЕсли;

	ЗаполнитьПоОстаткамФрагмент(ИмяТЧ);
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоОстаткамЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    ИмяТЧ = ДополнительныеПараметры.ИмяТЧ;
    
    
    Ответ = РезультатВопроса;
    Если Ответ = КодВозвратаДиалога.Да Тогда
        Объект[ИмяТЧ].Очистить();
    КонецЕсли; 
    
    ЗаполнитьПоОстаткамФрагмент(ИмяТЧ);

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоОстаткамФрагмент(Знач ИмяТЧ)
    
    ЗаполнитьПоОстаткамНаСервере(ИмяТЧ);

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоОстаткамНаСервере(ИмяТЧ)

	Документ = РеквизитФормыВЗначение("Объект", Тип("ДокументОбъект.Приложение2КНалоговойНакладной"));
	
	Документ.ЗаполнитьПоОстаткам(Документ[ИмяТч]);
	
	ЗначениеВРеквизитФормы(Документ, "Объект");

КонецПроцедуры

&НаКлиенте
Процедура ПодборТовары(Команда)

	ПодборНоменклатуры(ЭтаФорма, "Товары", Команда);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборУслуги(Команда)

	ПодборНоменклатуры(ЭтаФорма, "Услуги", Команда);

КонецПроцедуры

&НаКлиенте
Процедура ПодборВозвратнаяТара(Команда)

	ПодборНоменклатуры(ЭтаФорма, "ВозвратнаяТара", Команда);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборНоменклатуры(Форма, ИмяТаблицы, Команда) Экспорт

	ПараметрыПодбора = ПолучитьПараметрыПодбора(ИмяТаблицы);
	Если ПараметрыПодбора <> Неопределено Тогда
		ОткрытьФорму("Обработка.ПодборНоменклатуры.Форма.Форма", ПараметрыПодбора,
			ЭтаФорма, УникальныйИдентификатор);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Функция ПолучитьПараметрыПодбора(ИмяТаблицы)

	ПараметрыФормы = Новый Структура;

	ДатаРасчетов 	 = ?(НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДата()), Неопределено, Объект.Дата);
	ЗаголовокПодбора = НСтр("ru='Подбор номенклатуры в %1 (%2)';uk='Підбір номенклатури %1 (%2)'");

	Валюта = Объект.ВалютаДокумента;

	Если ЗначениеЗаполнено(Объект.ТипЦен) Тогда
		Параметрыформы.Вставить("ПоказыватьЦены", Истина);
	КонецЕсли;

	Если ИмяТаблицы = "Товары" Тогда
		ПредставлениеТаблицы = НСтр("ru='Товары';uk='Товари'");

		ПараметрыФормы.Вставить("ПоказыватьОстатки"  , Ложь);
		ПараметрыФормы.Вставить("ПоказыватьСчетУчета", Ложь);
	ИначеЕсли ИмяТаблицы = "ВозвратнаяТара" Тогда
		ПредставлениеТаблицы = НСтр("ru='Возвратная тара';uk='Зворотна тара'");


		ПараметрыФормы.Вставить("ПоказыватьОстатки"  , Ложь);
		ПараметрыФормы.Вставить("ПоказыватьСчетУчета", Ложь);
	ИначеЕсли ИмяТаблицы = "Услуги" Тогда
		ПредставлениеТаблицы = НСтр("ru='Услуги';uk='Послуги'");
	КонецЕсли;
	ЗаголовокПодбора = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		ЗаголовокПодбора, Объект.Ссылка, ПредставлениеТаблицы);

	ПараметрыФормы.Вставить("ЕстьЦена"			, Истина);
	ПараметрыФормы.Вставить("ЕстьКоличество"	, Истина);
	ПараметрыФормы.Вставить("ДатаРасчетов"		, ДатаРасчетов);
	ПараметрыФормы.Вставить("ТипЦен"            , Объект.ТипЦен);
	ПараметрыФормы.Вставить("Валюта"            , Валюта);
	ПараметрыФормы.Вставить("ДоговорКонтрагента", Объект.ДоговорКонтрагента);
	ПараметрыФормы.Вставить("Контрагент"        , Объект.Контрагент);
	ПараметрыФормы.Вставить("Организация"       , Объект.Организация);
	ПараметрыФормы.Вставить("Склад"             , Неопределено);
	ПараметрыФормы.Вставить("Заголовок"         , ЗаголовокПодбора);
	ПараметрыФормы.Вставить("ВидПодбора"        , "");
	ПараметрыФормы.Вставить("ИмяТаблицы"        , ИмяТаблицы);
	ПараметрыФормы.Вставить("Услуги"            , ИмяТаблицы = "Услуги");

	Возврат ПараметрыФормы;

КонецФункции

&НаКлиенте
Процедура ПровестиИЗакрыть(Команда)
	
	ПараметрыЗаписи = Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение);
	Если ЭтаФорма.Записать(ПараметрыЗаписи) Тогда
		ЭтаФорма.Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПреобразоватьНоменклатурныйСостав(Команда)
	
	Если Не ЗначениеЗаполнено(Объект.НалоговаяНакладная) Тогда
		Сообщить(НСтр("ru='Не заполнена налоговая накладная. Команда не может быть выполнена!';uk= 'Не заповнена податкова накладна. Команда не може бути виконана!'"));
		Возврат;
	КонецЕсли; 
	
 	Если Модифицированность Тогда
		
		ТекстВопроса = НСтр("ru='Для выполнения команды преобразования номенклатурного состава необходимо записать данные.';uk= 'Для виконання команди перетворення номенклатурного складу необхідно записати дані.'");
			
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(КодВозвратаДиалога.Да, НСтр("ru='Записать и продолжить';uk='Записати й продовжити'"));
		Кнопки.Добавить(КодВозвратаДиалога.Отмена);
		
		Обработчик = Новый ОписаниеОповещения("ПреобразоватьНоменклатурныйСоставЗавершение", ЭтотОбъект);
		ПоказатьВопрос(Обработчик, ТекстВопроса, Кнопки,, КодВозвратаДиалога.Да);	
		
	Иначе
		ПреобразоватьНоменклатурныйСоставЗавершение(-1);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПреобразоватьНоменклатурныйСоставЗавершение(Ответ, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		Если НЕ ЭтотОбъект.Записать() Тогда
			Возврат;
		КонецЕсли;
	ИначеЕсли Ответ <> -1 Тогда
		Возврат;
	КонецЕсли;
	
	ОбъектыНазначения = Новый Массив;
	ОбъектыНазначения.Добавить(Объект.Ссылка);
	// Для совместимости открытия обработки как внешней вида ЗаполнениеОбъекта
	ПараметрыФормы = Новый Структура("ОбъектыНазначения", ОбъектыНазначения);
	
	ОткрытьФорму("Обработка.ПреобразованиеНоменклатурногоСоставаДокументаП2.Форма", ПараметрыФормы, ЭтотОбъект,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

#КонецОбласти  //КомандыФормы

#Область СлужебныеПроцедурыИФункцииБСП

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти