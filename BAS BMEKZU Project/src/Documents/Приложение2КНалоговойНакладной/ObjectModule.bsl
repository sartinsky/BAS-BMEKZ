#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
Перем мВалютаРегламентированногоУчета;

#Область ОбработчикиСобытий
////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура - обработчик события "ОбработкаЗаполнения".
//
Процедура ОбработкаЗаполнения(Основание, СтандартнаяОбработка)

	
	ЗаполнениеДокументов.Заполнить(ЭтотОбъект, Основание);
	ЗаполнитьШапкуДокумента(Основание); 
	
КонецПроцедуры // ОбработкаЗаполнения()

Процедура ЗаполнитьШапкуДокумента(ДанныеЗаполнения) Экспорт
	
	КтоВыписалНалоговуюНакладную = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("КтоВыписалНалоговуюНакладную");	
	
	Если СчетНДС.Пустая() Тогда
	
		СчетНДС = ПланыСчетов.Хозрасчетный.РасчетыПоНДС;	
	
	КонецЕсли;
	
	Если СчетУчетаНДС.Пустая() Тогда
		Если  ВидОперации = Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.ИтоговаяРозницаОблагаемыеОперацииВозврат
			ИЛИ ВидОперации = Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.ИтоговаяРозницаОсвобожденныеОперацииВозврат 
			ИЛИ ВидОперации = Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.РозницаКонрагентуОблагаемыеОперацииВозврат 
			ИЛИ ВидОперации = Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.РозницаКонрагентуОсвобожденныеОперацииВозврат Тогда
			СчетУчетаНДС = ПланыСчетов.Хозрасчетный.НалоговыеОбязательстваРозница;
		ИначеЕсли НалоговаяНакладная.ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.УсловнаяПродажа Тогда
			СчетУчетаНДС = ПланыСчетов.Хозрасчетный.УсловнаяПродажа;	
		Иначе
			СчетаУчета   = БухгалтерскийУчетРасчетовСКонтрагентами.ПолучитьСчетаРасчетовСКонтрагентом(Организация, Контрагент, ДоговорКонтрагента);
			СчетУчетаНДС = СчетаУчета.СчетУчетаНДСПродаж;
		КонецЕсли;	
	КонецЕсли;	
	
КонецПроцедуры

Функция ЗаполнитьПоДокументуОснованию(Основание) Экспорт

    // предусмотрен только ввод на основании НалоговойНакладной
	ЗапускатьОбработку = Истина;
	
	// Заполним реквизиты из стандартного набора по документу основанию.
	ЗаполнениеДокументов.ЗаполнитьПоОснованию(ЭтотОбъект, Основание);
	
	НалоговаяНакладная = Основание;
	Документы.Приложение2КНалоговойНакладной.ЗаполнитьУсловиеПродажи(ЭтотОбъект);
	Документы.Приложение2КНалоговойНакладной.ЗаполнитьВидДоговора(ЭтотОбъект);
	
	ТипОснования = ТипЗнч(Основание);
	Если ТипОснования = Тип("ДокументСсылка.НалоговаяНакладная")  Тогда
		ФормаРасчетов = Основание.ФормаРасчетов;
		
		ТребуетВключенияВЕдиныйРеестрНалоговыхНакладных = Основание.ТребуетВключенияВЕдиныйРеестрНалоговыхНакладных;
		
		ВидДоговора 						= Основание.ВидДоговора;
		
		// определим вид операции если обработка формирования не запускается
		Если Основание.ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.ИтоговаяРозницаОблагаемыеОперации Тогда 
			
			ВидОперации = Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.ИтоговаяРозницаОблагаемыеОперацииВозврат;
			ЗапускатьОбработку = Ложь;
			
		ИначеЕсли Основание.ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.ИтоговаяРозницаОсвобожденныеОперации Тогда	
			
			ВидОперации = Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.ИтоговаяРозницаОсвобожденныеОперацииВозврат;
			ЗапускатьОбработку = Ложь;
			
		ИначеЕсли Основание.ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.РозницаКонрагентуОблагаемыеОперации Тогда	
			
			ВидОперации = Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.РозницаКонрагентуОблагаемыеОперацииВозврат;
			ЗапускатьОбработку = Ложь;
			
		ИначеЕсли Основание.ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.РозницаКонрагентуОсвобожденныеОперации Тогда	
			
			ВидОперации = Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.РозницаКонрагентуОсвобожденныеОперацииВозврат;
			ЗапускатьОбработку = Ложь;
			
		ИначеЕсли Основание.ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.УсловнаяПродажа Тогда
			
			//ВидОперации = Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.ОблагаемыеОперацииКорректировка;	
			ВидОперации = Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.УсловнаяПродажаВозврат;	
			ЗапускатьОбработку = Ложь;
			
		ИначеЕсли Основание.ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.УсловнаяПродажаСписаниеОС Тогда
			
			ВидОперации = Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.ОблагаемыеОперацииКорректировка;	
			ЗапускатьОбработку = Ложь;
			
		ИначеЕсли Основание.ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.РаботыОтНерезидента Тогда
			
			ВидОперации = Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.РаботыОтНерезидентаКорректировка;	
			ЗапускатьОбработку = Ложь;
			
		ИначеЕсли Основание.ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.СводнаяНаПревышениеБазыНадЦенойПоставки Тогда
			
			ВидОперации = Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.СводнаяНаПревышениеБазыНадЦенойПоставки;	
			СчетДт = Основание.СчетДт;
			СубконтоДт1 = Основание.СубконтоДт1;
			СубконтоДт2 = Основание.СубконтоДт2;
			СубконтоДт3 = Основание.СубконтоДт3;
			ЗапускатьОбработку = Ложь;
			
		КонецЕсли;
	
	// изменения в комиссионной торговле в 2011 году. 
	ИначеЕсли ТипОснования = Тип("ДокументСсылка.ОтчетКомиссионераОПродажах") 
		  ИЛИ ТипОснования = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя") 
		  ИЛИ Основание.Метаданные().Имя = "ИНАГРО_ВозвратБиологическихАктивовОтПокупателя" Тогда // ИНАГРО
			
		Если Основание.Дата < '20110101' Тогда
			
			ТекстОшибки = НСтр("ru='Приложение 2 к налоговой накладной можно вводить только на основании документов, оформленных начиная с 2011 года!';uk='Додаток 2 до податкової накладної можно вводити лише на підставі документів, що оформлені починаючи з 2011 року !'");
			ВызватьИсключение ТекстОшибки;
						
		КонецЕсли;
		
		// возможно, в документе указаны облагаемые и не облагаемые НДС товары
		ЕстьОблагаемыеОперации = Истина;
		ЕстьНеОблагаемыеОперации = Истина;
		ЕстьНеНДСперации = Истина;
		
		Если ТипОснования = Тип("ДокументСсылка.ОтчетКомиссионераОПродажах")  Тогда
			
			СтавкиНДС = Основание.Товары.Выгрузить(,"СтавкаНДС,Сумма, СуммаПередачи");
			
		ИначеЕсли ТипОснования = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя")
			  ИЛИ Основание.Метаданные().Имя = "ИНАГРО_ВозвратБиологическихАктивовОтПокупателя" Тогда // ИНАГРО
			
			СтавкиНДС = Основание.Товары.Выгрузить(,"СтавкаНДС");
			
		КонецЕсли;
		
		Инд = 0;
		Пока Инд < СтавкиНДС.Количество() Цикл
			
			Строка = СтавкиНДС[Инд];
			
			Если (ТипОснования = Тип("ДокументСсылка.ОтчетКомиссионераОПродажах") 
				   И (Строка.Сумма = Строка.СуммаПередачи)) Тогда
				 
				 СтавкиНДС.Удалить(Строка);
			
			Иначе
			
				Инд = Инд + 1;
			
			КонецЕсли;
		
		КонецЦикла;
		
		Если  СтавкиНДС.Найти(Перечисления.СтавкиНДС.НДС20) = Неопределено
			И СтавкиНДС.Найти(Перечисления.СтавкиНДС.НДС14) = Неопределено
			И СтавкиНДС.Найти(Перечисления.СтавкиНДС.НДС0) = Неопределено
			И СтавкиНДС.Найти(Перечисления.СтавкиНДС.НДС7) = Неопределено
			И СтавкиНДС.Найти(Перечисления.СтавкиНДС.СпецСт8) = Неопределено // ИНАГРО
			Тогда
			ЕстьОблагаемыеОперации = Ложь;	
		КонецЕсли;
		Если  СтавкиНДС.Найти(Перечисления.СтавкиНДС.БезНДС) = Неопределено Тогда
			ЕстьНеОблагаемыеОперации = Ложь;	
		КонецЕсли;
		Если  СтавкиНДС.Найти(Перечисления.СтавкиНДС.НеНДС) = Неопределено Тогда
			ЕстьНеНДСперации = Ложь;	
		КонецЕсли;
		
		Если  НЕ ЕстьОблагаемыеОперации 
			И НЕ ЕстьНеОблагаемыеОперации
			И НЕ ЕстьНеНДСперации Тогда
		
			Возврат Неопределено;
		
		КонецЕсли;

		МассивСозданныхОбъектов = Новый Массив;
		
		ТекущийДокументЗаполнен = Ложь;
		Если ЕстьОблагаемыеОперации Тогда
			
			ЗаполнениеДокументов.ЗаполнитьПоОснованию(ЭтотОбъект, Основание);
			
			ДокументОснование = Основание;
			ВидОперации = Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.ОблагаемыеОперацииКорректировка;
			Дата = Основание.Дата;
			// Этот документ всегда имеет установленный флаг УчитыватьНДС
			УчитыватьНДС = Истина;
			АвторасчетНДС = Ложь;
			
			СчетНДС = ПланыСчетов.Хозрасчетный.РасчетыПоНДС;	
			
			Документы.Приложение2КНалоговойНакладной.УстановитьТипПричиныНевыдачиПокупателюПоУмолчанию(ЭтотОбъект,мВалютаРегламентированногоУчета);
			
			//Заполним ТЧ
			Если ТипОснования = Тип("ДокументСсылка.ОтчетКомиссионераОПродажах")  Тогда
				ЗаполнитьПоОтчетуКомиссионераОПродажах();
			ИначеЕсли ТипОснования = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя")  Тогда	
				ВидОперации = Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.ОблагаемыеОперацииВозврат;
			    ЗаполнитьПоВозвратуТоваровОтПокупателя();			
			ИначеЕсли ТипОснования = Тип("ДокументСсылка.ИНАГРО_ВозвратБиологическихАктивовОтПокупателя") Тогда // ИНАГРО
				ВидОперации = Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.ОблагаемыеОперацииВозврат;
			    ЗаполнитьПоВозвратуБАОтПокупателя();
			КонецЕсли;			
			
			Если НЕ ТекущийДокументЗаполнен Тогда
				ТекущийДокументЗаполнен = Истина;
			КонецЕсли;
			
			МассивСозданныхОбъектов.Добавить(ЭтотОбъект);
		
		КонецЕсли;
		
		Если ЕстьНеОблагаемыеОперации Тогда
			
			Если ТекущийДокументЗаполнен Тогда
				новДок = Документы.Приложение2КНалоговойНакладной.СоздатьДокумент();
			Иначе
				новДок = ЭтотОбъект;
			КонецЕсли;
			
			ЗаполнениеДокументов.Заполнить(новДок, Основание);
			ЗаполнениеДокументов.ЗаполнитьПоОснованию(новДок, Основание);
			
			новДок.ДокументОснование = Основание;
			новДок.ВидОперации = Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.ОсвобожденныеОперацииКорректировка;
			новДок.Дата = Основание.Дата;
			
			новДок.АвторасчетНДС = Ложь;
			
			новДок.СчетНДС = ПланыСчетов.Хозрасчетный.РасчетыПоНДС;	
			
			Документы.Приложение2КНалоговойНакладной.УстановитьТипПричиныНевыдачиПокупателюПоУмолчанию(новДок,мВалютаРегламентированногоУчета);
			
			//Заполним ТЧ
			Если ТипОснования = Тип("ДокументСсылка.ОтчетКомиссионераОПродажах")  Тогда
				новДок.ЗаполнитьПоОтчетуКомиссионераОПродажах();
			ИначеЕсли ТипОснования = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя")  Тогда	
				новДок.ВидОперации = Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.ОсвобожденныеОперацииВозврат;
				новДок.ЗаполнитьПоВозвратуТоваровОтПокупателя();
			ИначеЕсли Основание.Метаданные().Имя = "ИНАГРО_ВозвратБиологическихАктивовОтПокупателя" Тогда // ИНАГРО
				новДок.ВидОперации = Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.ОсвобожденныеОперацииВозврат;
				новДок.ЗаполнитьПоВозвратуБАОтПокупателя(); 
			КонецЕсли;
			Если НЕ ТекущийДокументЗаполнен Тогда
				ТекущийДокументЗаполнен = Истина;
			КонецЕсли;
		
			новДок.ЗаполнитьШапкуДокумента(Основание);
			
			МассивСозданныхОбъектов.Добавить(новДок);
		
		КонецЕсли;
		
		Если ЕстьНеНДСперации Тогда
			
			Если ТекущийДокументЗаполнен Тогда
				новДок = Документы.Приложение2КНалоговойНакладной.СоздатьДокумент();
			Иначе
				новДок = ЭтотОбъект;
			КонецЕсли;
			
			ЗаполнениеДокументов.Заполнить(новДок, Основание);
			ЗаполнениеДокументов.ЗаполнитьПоОснованию(новДок, Основание);
			новДок.ДокументОснование = Основание;
			новДок.ВидОперации = Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.НеНДСОперацииКорректировка;
			новДок.Дата = Основание.Дата;
			
			новДок.АвторасчетНДС = Ложь;
			
			Документы.Приложение2КНалоговойНакладной.УстановитьТипПричиныНевыдачиПокупателюПоУмолчанию(новДок,мВалютаРегламентированногоУчета);
			
			//Заполним ТЧ
			Если ТипОснования = Тип("ДокументСсылка.ОтчетКомиссионераОПродажах")  Тогда
				новДок.ЗаполнитьПоОтчетуКомиссионераОПродажах();
			ИначеЕсли ТипОснования = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя")
				  ИЛИ Основание.Метаданные().Имя = "ИНАГРО_ВозвратБиологическихАктивовОтПокупателя" Тогда // ИНАГРО
				новДок.ВидОперации = Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.НеНДСОперацииВозврат;
			    новДок.ЗаполнитьПоВозвратуТоваровОтПокупателя();
			КонецЕсли;
			Если НЕ ТекущийДокументЗаполнен Тогда
				ТекущийДокументЗаполнен = Истина;
			КонецЕсли;
		
			новДок.ЗаполнитьШапкуДокумента(Основание);
			
			МассивСозданныхОбъектов.Добавить(новДок);
		
		КонецЕсли;		
		
		Если НЕ ТекущийДокументЗаполнен Тогда
			ТекстОшибки = НСтр("ru='Нет данных для заполнения документа!';uk='Немає даних для заповнення документа!'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, ЭтотОбъект);
			Возврат Неопределено;
		КонецЕсли;
		
		Возврат МассивСозданныхОбъектов;
		
	КонецЕсли;
	
	Если ЗапускатьОбработку = Ложь Тогда
		
		СкопироватьТовары();
		СкопироватьВозвратнуюТару();
		СкопироватьУслуги();
		СкопироватьОС();
		СкопироватьНематериальныеАктивы();
		
		Документы.Приложение2КНалоговойНакладной.УстановитьТипПричиныНевыдачиПокупателюПоУмолчанию(ЭтотОбъект,мВалютаРегламентированногоУчета);
		
		Возврат Неопределено;
	КонецЕсли; 
	

	ОбработкаФормированияНН = Обработки.ФормированиеНалоговыхНакладных.Создать();
	ОбработкаФормированияНН.РасчетыВозврат = Перечисления.РасчетыВозврат.Возврат;
	
	Если НЕ ЗначениеЗаполнено(Основание.Организация) Тогда
		ТекстОшибки = НСтр("ru='В документе не указана организация! Заполнение невозможно.';uk='В документі не вказана організація! Заповнення неможливо.'");
		ВызватьИсключение ТекстОшибки;
	Иначе
		ОбработкаФормированияНН.Организация = Основание.Организация;
	КонецЕсли;
	
	ОтборДоговоров = Новый ТаблицаЗначений;
	ОтборДоговоров.Колонки.Добавить("РасчетыВозврат");
	ОтборДоговоров.Колонки.Добавить("ДоговорКонтрагента");
	ОтборДоговоров.Колонки.Добавить("Сделка");                                           
	ОтборДоговоров.Колонки.Добавить("Дата", 		Новый ОписаниеТипов("Дата"));	
	ОтборДоговоров.Колонки.Добавить("ЗаТару", 		Новый ОписаниеТипов("Булево"));
	ОтборДоговоров.Колонки.Добавить("СтавкаНДС", 	Новый ОписаниеТипов("ПеречислениеСсылка.СтавкиНДС"));
	
	Если НЕ ЗначениеЗаполнено(Основание.ДоговорКонтрагента) Тогда
		
		ТекстСообщения = НСтр("ru='В документе не указан договор контрагента! Заполнение невозможно.';uk='В документі не вказаний договір контрагента! Заповнення неможливо.'");
		ВызватьИсключение ТекстСообщения;

	Иначе	
		
		СтрокаОтбора 					= ОтборДоговоров.Добавить();
		
		СтрокаОтбора.ДоговорКонтрагента = Основание.ДоговорКонтрагента;
		СтрокаОтбора.РасчетыВозврат		= Перечисления.РасчетыВозврат.Возврат;
		СтрокаОтбора.Дата               = '00010101';
		
		ОбработкаФормированияНН.Дата 	= '00010101';	
		
		СделкаНалоговыйУчет = Основание.Сделка;	
					
		Если  Основание.ДоговорКонтрагента.ВедениеВзаиморасчетовНУ = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоРасчетнымДокументам
			И ТипЗнч(СделкаНалоговыйУчет) = Тип("ДокументСсылка.СчетНаОплатуПокупателю")Тогда
					
			СтрокаОтбора.Сделка = СделкаНалоговыйУчет
					
		ИначеЕсли Основание.ДоговорКонтрагента.ВедениеВзаиморасчетовНУ = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом ТОгда
					
			СтрокаОтбора.Сделка = Неопределено;
					
		Иначе  // по расчетным документа, и сделка это не счет
			
			Если ЭтотОбъект.ДополнительныеСвойства.Свойство("СделкаНалоговыйУчет") Тогда
				СтрокаОтбора.Сделка = ЭтотОбъект.ДополнительныеСвойства.СделкаНалоговыйУчет;
			Иначе				
			
				// нужно вручную указать расчетный документ - расчетный документ из налоговой накладной для возврата не имеет смысла.
				ТекстСообщения = НСтр("ru='Не указан документ расчетов - ввод на основании не возможен!';uk='Не зазначений документ розрахунків - введення на підставі не можливе!'");
				ВызватьИсключение ТекстСообщения;
			КонецЕсли; 

		КонецЕсли;
		
	КонецЕсли;

	// получим данные регистра ОжидаемыйИПодтвержденныйНДСПродаж на текущий момент
	Обработки.ФормированиеНалоговыхНакладных.ОбновитьДоговора(ОбработкаФормированияНН, ОтборДоговоров);
	
	СтрокаИсточниковНоменклатуры = ОбработкаФормированияНН.ИсточникиНоменклатуры.Добавить();
	СтрокаИсточниковНоменклатуры.Документ 			= Основание;
	СтрокаИсточниковНоменклатуры.Сделка 			= СтрокаОтбора.Сделка;
	СтрокаИсточниковНоменклатуры.ДоговорКонтрагента = СтрокаОтбора.ДоговорКонтрагента;
	СтрокаИсточниковНоменклатуры.РасчетыВозврат 	= СтрокаОтбора.РасчетыВозврат;
	СтрокаИсточниковНоменклатуры.Дата			 	= СтрокаОтбора.Дата;
	
	СтруктураОтбора = Новый Структура();
	СтруктураОтбора.Вставить("Документ", 			Основание);
	СтруктураОтбора.Вставить("ДоговорКонтрагента", 	СтрокаОтбора.ДоговорКонтрагента);
	СтруктураОтбора.Вставить("Сделка", 				СтрокаОтбора.Сделка);
	СтруктураОтбора.Вставить("РасчетыВозврат", 		СтрокаОтбора.РасчетыВозврат);
	СтруктураОтбора.Вставить("Дата", 				СтрокаОтбора.Дата);
	
	Обработки.ФормированиеНалоговыхНакладных.ЗаполнитьТабличныеЧасти(ОбработкаФормированияНН, СтруктураОтбора);
	
	ТаблицаЧастичнойОтгрузки = Неопределено;
	МожноФормироватьНалоговыеНакладные = Обработки.ФормированиеНалоговыхНакладных.МожноФормироватьНалоговыеНакладные(ОбработкаФормированияНН, СтруктураОтбора, ТаблицаЧастичнойОтгрузки);
	Если МожноФормироватьНалоговыеНакладные Тогда
		
		ОбработкаФормированияНН.ОткрыватьДокументы = Истина;
		
		// сформированные документы не будут записаны в базу
		ОбработкаФормированияНН.НеЗаписыватьДокументы = Истина;

		МассивСозданныхОбъектов = Обработки.ФормированиеНалоговыхНакладных.СформироватьНалоговыеДокументы(ОбработкаФормированияНН);
		Возврат МассивСозданныхОбъектов;	
	ИначеЕсли НЕ Обработки.ФормированиеНалоговыхНакладных.БудутСформированыНалоговыеНакладные(ТаблицаЧастичнойОтгрузки) Тогда
	
	  	ТекстСообщения = НСтр("ru='По данной налоговой накладной нет корректировок налоговых обязательств!';uk=""По даній податковій накладній немає коригування податкових зобов'язань!""");
    	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект);				
		
	Иначе


	КонецЕсли;
	
	// необходимо подкорректировать номенклатурный состав.
	// откроем обработку. Но в ТЧ Договора может не быть строк - если остатков по регистру ОжидаемыйИПодтвержденныйНДСПродаж не текущий момент нет
	// Добавим строки при необходимости
	Для каждого СтрокаОтбораДоговоров Из ОтборДоговоров Цикл
		
		Если ОбработкаФормированияНН.Договора.НайтиСтроки(Новый Структура("ДоговорКонтрагента, Сделка",СтрокаОтбораДоговоров.ДоговорКонтрагента,СтрокаОтбораДоговоров.Сделка)).Количество() = 0 Тогда
			
			СтрокаДоговоров = ОбработкаФормированияНН.Договора.Добавить();
			СтрокаДоговоров.ДоговорКонтрагента 	= СтрокаОтбораДоговоров.ДоговорКонтрагента;
			СтрокаДоговоров.Сделка 				= СтрокаОтбораДоговоров.Сделка;
			СтрокаДоговоров.РасчетыВозврат 		= СтрокаОтбораДоговоров.РасчетыВозврат;
			СтрокаДоговоров.Дата 				= СтрокаОтбораДоговоров.Дата;

			СтрокаИсточниковНоменклатуры = ОбработкаФормированияНН.ИсточникиНоменклатуры.Добавить();
			СтрокаИсточниковНоменклатуры.ДоговорКонтрагента 	= СтрокаОтбораДоговоров.ДоговорКонтрагента;
			СтрокаИсточниковНоменклатуры.Сделка 				= СтрокаОтбораДоговоров.Сделка;
			СтрокаИсточниковНоменклатуры.РасчетыВозврат 		= СтрокаОтбораДоговоров.РасчетыВозврат;
			СтрокаИсточниковНоменклатуры.Дата 					= СтрокаОтбораДоговоров.Дата;
			
		КонецЕсли; 
		
	КонецЦикла; 
	
	//ФормаОбоработки.ВосстанавливатьЗначенияПриОткрытии = Ложь;
	//ФормаОбоработки = ОбработкаФормированияНН.ПолучитьФорму();
	//ФормаОбоработки.ОткрыватьДокументы = Истина;
	//ФормаОбоработки.Открыть();	
	//ФормаОбоработки.ЭлементыФормы.Панель.ТекущаяСтраница = ФормаОбоработки.ЭлементыФормы.Панель.Страницы.Данные;
	
	Возврат ОбработкаФормированияНН;
	
КонецФункции 

// Процедура - обработчик события "ПриКопировании".
Процедура ПриКопировании(ОбъектКопирования)
	ВключенаВЕдиныйРеестрНалоговыхНакладных = Ложь;
КонецПроцедуры

// Процедура вызывается перед записью документа 
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)

	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если Товары.Количество() > 0
		И (ВидОперации = Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.РаботыОтНерезидентаКорректировка) Тогда

		Товары.Очистить();

	КонецЕсли;

	Если ВозвратнаяТара.Количество() > 0
		И (   ДоговорКонтрагента.ВалютаВзаиморасчетов <> мВалютаРегламентированногоУчета 
		  ИЛИ ВидОперации = Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.ИтоговаяРозницаОблагаемыеОперацииВозврат
		  ИЛИ ВидОперации = Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.ИтоговаяРозницаОсвобожденныеОперацииВозврат
		  ИЛИ ВидОперации = Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.РозницаКонрагентуОблагаемыеОперацииВозврат
		  ИЛИ ВидОперации = Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.РозницаКонрагентуОсвобожденныеОперацииВозврат) Тогда

		ВозвратнаяТара.Очистить();

	КонецЕсли;
	
	Если Услуги.Количество() > 0 
		И (   ВидОперации = Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.ИтоговаяРозницаОблагаемыеОперацииВозврат
		  ИЛИ ВидОперации = Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.ИтоговаяРозницаОсвобожденныеОперацииВозврат) Тогда
		  
		Услуги.Очистить();
		
	КонецЕсли;
	
	Если ОС.Количество() > 0 
		И (   ВидОперации = Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.ИтоговаяРозницаОблагаемыеОперацииВозврат
		  ИЛИ ВидОперации = Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.ИтоговаяРозницаОсвобожденныеОперацииВозврат
		  ИЛИ ВидОперации = Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.РозницаКонрагентуОблагаемыеОперацииВозврат
		  ИЛИ ВидОперации = Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.РозницаКонрагентуОсвобожденныеОперацииВозврат) Тогда
		  
		ОС.Очистить();
		
	КонецЕсли;

	Если НМА.Количество() > 0 
		И (   ВидОперации = Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.ИтоговаяРозницаОблагаемыеОперацииВозврат
		  ИЛИ ВидОперации = Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.ИтоговаяРозницаОсвобожденныеОперацииВозврат
		  ИЛИ ВидОперации = Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.РозницаКонрагентуОблагаемыеОперацииВозврат
		  ИЛИ ВидОперации = Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.РозницаКонрагентуОсвобожденныеОперацииВозврат) Тогда
		  
		НМА.Очистить();
		
	КонецЕсли;

	Если АвторасчетНДС Тогда
		// соответствие для хранения погрешностей округлений
		ПогрешностиОкругления = Новый Соответствие();
		// пересчет сумм НДС с учетом ошибок округления
		
		УчетНДСКлиентСервер.ПересчитатьНДСсУчетомПогрешностиОкругления(Товары, ЭтотОбъект, СуммаВключаетНДС, ПогрешностиОкругления, "Товары", , "ИзменениеСуммы", "ИзменениеСуммыНДС");
		УчетНДСКлиентСервер.ПересчитатьНДСсУчетомПогрешностиОкругления(Услуги, ЭтотОбъект, СуммаВключаетНДС, ПогрешностиОкругления, "Услуги", , "ИзменениеСуммы", "ИзменениеСуммыНДС");
		УчетНДСКлиентСервер.ПересчитатьНДСсУчетомПогрешностиОкругления(ОС    , ЭтотОбъект, СуммаВключаетНДС, ПогрешностиОкругления, "ОС"    , , "ИзменениеСуммы", "ИзменениеСуммыНДС");
		УчетНДСКлиентСервер.ПересчитатьНДСсУчетомПогрешностиОкругления(НМА	 , ЭтотОбъект, СуммаВключаетНДС, ПогрешностиОкругления, "НМА"	, , "ИзменениеСуммы", "ИзменениеСуммыНДС");
	КонецЕсли;
	
	// Посчитать суммы документа и записать их в соответствующие реквизиты шапки для показа в журналах
	СуммаДокумента 	  = 0 + Товары.Итог("ИзменениеСуммы") 	 + Услуги.Итог("ИзменениеСуммы") 	+ ОС.Итог("ИзменениеСуммы")    + НМА.Итог("ИзменениеСуммы");
	СуммаНДСДокумента = 0 + Товары.Итог("ИзменениеСуммыНДС") + Услуги.Итог("ИзменениеСуммыНДС") + ОС.Итог("ИзменениеСуммыНДС") + НМА.Итог("ИзменениеСуммыНДС");;
	СуммаДокумента = ?(СуммаВключаетНДС, СуммаДокумента, СуммаДокумента + СуммаНДСДокумента);
	
	Если ДоговорКонтрагента.ВедениеВзаиморасчетовНУ = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом Тогда
			 
		Сделка = Неопределено;
	
	КонецЕсли;

	Если ТипПричиныНевыдачиПокупателю > 1
		И Дата >= '2014-03-01' Тогда
		
		ЭлектронныйДокумент = Ложь;
	    ТребуетВключенияВЕдиныйРеестрНалоговыхНакладных = Ложь;
		
	КонецЕсли;
	
	// поставим флаг "Требует регистрация в реестре"
	Если Дата >= '2015-01-01' Тогда
		ТребуетВключенияВЕдиныйРеестрНалоговыхНакладных = Истина;
		ЭлектронныйДокумент = Истина;
	ИначеЕсли НалоговаяНакладная.ТребуетВключенияВЕдиныйРеестрНалоговыхНакладных Тогда
		
		ТребуетВключенияВЕдиныйРеестрНалоговыхНакладных = Истина;
		
	ИначеЕсли ЭлектронныйДокумент Тогда
		
		ТребуетВключенияВЕдиныйРеестрНалоговыхНакладных = Истина;
	
	Иначе
		
		Если ТипПричиныНевыдачиПокупателю > 0 Тогда
			// мы не управляем флажком ТребуетВключенияВЕдиныйРеестрНалоговыхНакладных
			// для налоговых накладных, которые не выдаются покупателю
			// согласно разъяснению ЕБНЗ такие налоговые не должны регистрироваться в Едином реестре
			
		Иначе	
			
			ТребуетВключенияВЕдиныйРеестрНалоговыхНакладных = Ложь;
		
			Если ВалютаДокумента = мВалютаРегламентированногоУчета Тогда
				НДСРегл = СуммаНДСДокумента;	
			Иначе 
				НДСРегл = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СуммаНДСДокумента, ВалютаДокумента,
													мВалютаРегламентированногоУчета, 
													ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), 
													1,
													ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета));
			КонецЕсли;
			
			Если Дата >= '20120101' Тогда
				// или сумма НДС в документе больше 10 000 грн
				Если НДСРегл > 10000 Тогда
					ТребуетВключенияВЕдиныйРеестрНалоговыхНакладных = Истина;
					
				// или имеются подакцизные/импортированные товары
				// этот факт определим так - если в строке указан код УКТЗЭД - считаем что условие выполняется.
				ИначеЕсли   Товары.НайтиСтроки(Новый Структура("КодУКТВЭД", Справочники.КлассификаторУКТВЭД.ПустаяСсылка())).Количество() 	<> Товары.Количество()
						ИЛИ ОС.    НайтиСтроки(Новый Структура("КодУКТВЭД", Справочники.КлассификаторУКТВЭД.ПустаяСсылка())).Количество() 	<> ОС.Количество()
						ИЛИ НМА.   НайтиСтроки(Новый Структура("КодУКТВЭД", Справочники.КлассификаторУКТВЭД.ПустаяСсылка())).Количество() 	<> НМА.Количество() Тогда
					ТребуетВключенияВЕдиныйРеестрНалоговыхНакладных = Истина;
				КонецЕсли;
			ИначеЕсли Дата >= '20110701' Тогда
				// сумма НДС в документе больше 100 000 грн
				Если НДСРегл > 100000 Тогда
					ТребуетВключенияВЕдиныйРеестрНалоговыхНакладных = Истина;
				КонецЕсли;
			ИначеЕсли Дата >= '20110401' Тогда
				// сумма НДС в документе больше 500 000 грн
				Если НДСРегл > 500000 Тогда
					ТребуетВключенияВЕдиныйРеестрНалоговыхНакладных = Истина;
				КонецЕсли;
			ИначеЕсли Дата >= '20110101' Тогда
				// сумма НДС в документе больше 1 000 000 грн
				Если НДСРегл > 1000000 Тогда
					ТребуетВключенияВЕдиныйРеестрНалоговыхНакладных = Истина;
				КонецЕсли;
			КонецЕсли;
			
			Если ТребуетВключенияВЕдиныйРеестрНалоговыхНакладных = Истина
			   И НалоговаяНакладная.ВключенаВЕдиныйРеестрНалоговыхНакладных = Ложь Тогда
			   
			   Сообщить(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Перед выгрузкой документа: %1 в Единый реестр налоговых накладных
|необходимо также зарегистрировать исходную налоговую накладную: %2!';uk='Перед вивантаженням документа: %1 до Єдиного реєстра податкових накладних
|необхідно також зареєструвати в ньому податкову накладну: %2!'"), Ссылка, НалоговаяНакладная), СтатусСообщения.Важное);
			   
			КонецЕсли;
			
			
		КонецЕсли;
		
	КонецЕсли;
	

	Если НЕ ЗначениеЗаполнено(Контрагент.ИНН) ИЛИ Найти("0123456789",Лев(СокрЛ(Контрагент.ИНН),1)) = 0 Тогда
		КонтрагентПлательщикНДС = Ложь;
	Иначе
		КонтрагентПлательщикНДС = Истина;
	КонецЕсли;

	Если Дата >= '2015-01-01' Тогда
		Если КонтрагентПлательщикНДС
			И СуммаНДСДокумента < 0 Тогда
			РегистрируетсяВЕРННПокупателем = Истина;
		Иначе
			РегистрируетсяВЕРННПокупателем = Ложь;
		КонецЕсли;			
		
		Если    ВидОперации = Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.НеНДСОперацииВозврат
			ИЛИ ВидОперации = Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.НеНДСОперацииКорректировка Тогда
			ТребуетВключенияВЕдиныйРеестрНалоговыхНакладных = Ложь;
			ЭлектронныйДокумент = Ложь;
			РегистрируетсяВЕРННПокупателем = Ложь;
		КонецЕсли;
		
	Иначе
		РегистрируетсяВЕРННПокупателем = Ложь;
	КонецЕсли;


КонецПроцедуры // ПередЗаписью

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	Перем СтруктураШапкиДокумента;
	Перем ТаблицаПоТоварам, ТаблицаПоТаре, ТаблицаПоУслугам, ТаблицаПоОС, ТаблицаПоНМА;
	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = НСтр("ru='Проведение документа ""';uk='Проведення документа ""'") + СокрЛП(Ссылка) + """: ";
	
	
	// Проверка ручной корректировки
	ПроведениеСервер.ПодготовитьНаборыЗаписейКПроведению(ЭтотОбъект);
	Если РучнаяКорректировка Тогда
		Возврат;
	КонецЕсли;
	
	// Подготовим структуру шапки документа
	СтруктураШапкиДокумента = ПодготовитьСтруктуруШапкиДокумента(Отказ, Заголовок); 
	
	// При получении учетной политики произошли ошибки
	Если Отказ Тогда
		Возврат;
	КонецЕсли; 
	
	
	// Подготовим таблицы
	ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоТаре, ТаблицаПоУслугам, ТаблицаПоОС, ТаблицаПоНМА);
	
	
	// Движения по документу
	Если Не Отказ Тогда
		ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоТаре,
							ТаблицаПоУслугам, ТаблицаПоОС, ТаблицаПоНМА, Отказ, Заголовок);
	КонецЕсли;
	
	Движения.Хозрасчетный.ВыполнитьДействияПередЗаписьюДвижений();

	ПроведениеСервер.ПодготовитьНаборыЗаписейКЗаписиДвижений(ЭтотОбъект);
	
КонецПроцедуры // ОбработкаПроведения()

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКОтменеПроведения(ЭтотОбъект);
	Движения.Записать();
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	Перем СтруктураШапкиДокумента;
	Перем ТаблицаПоТоварам, ТаблицаПоТаре, ТаблицаПоУслугам, ТаблицаПоОС, ТаблицаПоНМА;
	МассивНепроверяемыхРеквизитов = Новый Массив;
	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = НСтр("ru='Проведение документа ""';uk='Проведення документа ""'") + СокрЛП(Ссылка) + """: ";
	
	
	// Подготовим структуру шапки документа
	СтруктураШапкиДокумента = ПодготовитьСтруктуруШапкиДокумента(Отказ, Заголовок); 
	
	// При получении учетной политики произошли ошибки
	Если Отказ Тогда
		Возврат;
	КонецЕсли; 
	
	// Проверим правильность заполнения шапки документа
	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок, МассивНепроверяемыхРеквизитов);
	
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	
КонецПроцедуры

#КонецОбласти

#Область ЭкспортныеПроцедурыИФункцииДокумента


Процедура ЗаполнитьПоОстаткам(ТабличнаяЧасть, МоментВремени = Неопределено) Экспорт
	ЭтоВозврат = ЭтоВозврат(ВидОперации);
	
	Запрос = Новый Запрос;
	
	Если МоментВремени = Неопределено Тогда
		Запрос.УстановитьПараметр("МоментВремени", МоментВремени());
	Иначе	
		Запрос.УстановитьПараметр("МоментВремени", МоментВремени);
	КонецЕсли;

	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ДоговорКонтрагента", ДоговорКонтрагента);
	Запрос.УстановитьПараметр("Сделка", ОпределитьСделкуЛокально());
	                                                                                      
	Если ТабличнаяЧасть = Товары Тогда
		Запрос.УстановитьПараметр("ВозвратнаяТара", Ложь);
		Запрос.УстановитьПараметр("СтавкиНДС", Документы.Приложение2КНалоговойНакладной.ОпределитьДопустимыеСтавкиНДС(ЭтотОбъект));
	Иначе
		Запрос.УстановитьПараметр("ВозвратнаяТара", Истина);
		Запрос.УстановитьПараметр("СтавкиНДС", Перечисления.СтавкиНДС.НеНДС);
	КонецЕсли;
	
	ВалютаВзаиморасчетовНУ = ДоговорКонтрагента.ВалютаВзаиморасчетов;

	Если ЭтоВозврат Тогда
		
		СобытиеНДС = Перечисления.СобытияОжидаемыйИПодтвержденныйНДСПродаж.Возврат;
		
		Если  ВидОперации = Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.ИтоговаяРозницаОблагаемыеОперацииВозврат
		  ИЛИ ВидОперации = Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.ИтоговаяРозницаОсвобожденныеОперацииВозврат Тогда
		  
			СобытиеНДС = Перечисления.СобытияОжидаемыйИПодтвержденныйНДСПродаж.ВозвратРозница;		  
			Запрос.УстановитьПараметр("Сделка", 			Неопределено);
			Запрос.УстановитьПараметр("ДоговорКонтрагента", Справочники.ДоговорыКонтрагентов.ПустаяСсылка());
			ВалютаВзаиморасчетовНУ = мВалютаРегламентированногоУчета;
			
		КонецЕсли;
		  
		Запрос.УстановитьПараметр("СобытиеНДС", СобытиеНДС);
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.УсловнаяПродажаВозврат Тогда
		
		СобытиеНДС = Перечисления.СобытияОжидаемыйИПодтвержденныйНДСПродаж.УсловнаяПродажаВозврат;
		Запрос.УстановитьПараметр("Сделка", 			Неопределено);
		Запрос.УстановитьПараметр("ДоговорКонтрагента", Справочники.ДоговорыКонтрагентов.ПустаяСсылка());
		ВалютаВзаиморасчетовНУ = мВалютаРегламентированногоУчета;
		
	Иначе
		
		СобытиеНДС = Перечисления.СобытияОжидаемыйИПодтвержденныйНДСПродаж.Реализация;
		
		Если НалоговаяНакладная.ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.УсловнаяПродажа Тогда
			
			СобытиеНДС = Перечисления.СобытияОжидаемыйИПодтвержденныйНДСПродаж.УсловнаяПродажа;
			Запрос.УстановитьПараметр("Сделка", 			Неопределено);
			Запрос.УстановитьПараметр("ДоговорКонтрагента", Справочники.ДоговорыКонтрагентов.ПустаяСсылка());
			ВалютаВзаиморасчетовНУ = мВалютаРегламентированногоУчета;
			
		КонецЕсли;
		
		Запрос.УстановитьПараметр("СобытиеНДС", СобытиеНДС);
		
	КонецЕсли;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СтавкаНДС,
	|	СуммаНДСОстаток,
	|	БазаНДСОстаток
	|ИЗ
	|	РегистрНакопления.ОжидаемыйИПодтвержденныйНДСПродаж.Остатки(&МоментВремени, 
	|											  			Организация 		= &Организация 
	|											 		  И ДоговорКонтрагента 	= &ДоговорКонтрагента 
	|													  И СтавкаНДС 			В (&СтавкиНДС)
	|													  И СобытиеНДС  		= &СобытиеНДС 
	|													  И ВозвратнаяТара 		= &ВозвратнаяТара) КАК НДСПриобретенийОстатки"
	+ ?(ЭтоВозврат,"
	|ГДЕ
	|     СуммаНДСОстаток >= 0
	|   И БазаНДСОстаток >= 0
	|", "");
	
	Выборка = Запрос.Выполнить().Выбрать();
	ДанныеОВалютеВзаиморасчетовНУ = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаВзаиморасчетовНУ, Дата);
	Пока Выборка.Следующий() Цикл
		
		Если ТабличнаяЧасть = Товары Тогда
			СтрокаТабличнойЧасти = Товары.Добавить();
			
			Товар = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("НоменклатураДляЗаполненияНалоговыхНакладных");	
			
			Если НЕ ЗначениеЗаполнено(Товар) Тогда
				Сообщить(НСтр("ru='Для пользователя не указано значение ""Номенклатура для автоматического заполнения налоговых накладных"" в индивидуальных настройках!';uk='Для користувача не вказане значення ""Номенклатура для автоматичного заповнення податкових накладних"" в індивідуальних настройках!'"), СтатусСообщения.Важное);
			КонецЕсли; 

			СтрокаТабличнойЧасти.Номенклатура	  			= Товар;
			
			Если  ВидОперации <> Перечисления.ВидыОперацийНалоговаяНакладная.ИтоговаяРозницаОблагаемыеОперации 
		  		И ВидОперации <> Перечисления.ВидыОперацийНалоговаяНакладная.ИтоговаяРозницаОсвобожденныеОперации Тогда
				СтрокаТабличнойЧасти.Количество		  			= 1;
				//СтрокаТабличнойЧасти.ЕдиницаИзмерения 		= Товар.БазоваяЕдиницаИзмерения;
				//СтрокаТабличнойЧасти.Коэффициент	  			= 1;
			КонецЕсли;	
			
			СтрокаТабличнойЧасти.СтавкаНДС       	 	 	= Выборка.СтавкаНДС;
			
			ИзменениеСуммыНДС 	= МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Выборка.СуммаНДСОстаток, 
													ВалютаВзаиморасчетовНУ, ВалютаДокумента, 
													ДанныеОВалютеВзаиморасчетовНУ.Курс, ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета),
													ДанныеОВалютеВзаиморасчетовНУ.Кратность, ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета));
													
			СтрокаТабличнойЧасти.ИзменениеСуммыНДС = ИзменениеСуммыНДС;										
			
			ИзменениеСуммыБезНДС = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Выборка.БазаНДСОстаток, 
													ВалютаВзаиморасчетовНУ, ВалютаДокумента, 
													ДанныеОВалютеВзаиморасчетовНУ.Курс, ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета),
													ДанныеОВалютеВзаиморасчетовНУ.Кратность, ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета));
			
			СтрокаТабличнойЧасти.ИзменениеСуммы = ИзменениеСуммыБезНДС + ?(СуммаВключаетНДС, ИзменениеСуммыНДС, 0);
			
			Если ЭтоВозврат 
			 ИЛИ ВидОперации = Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.УсловнаяПродажаВозврат Тогда
				// Нужно инвертировать суммы
				СтрокаТабличнойЧасти.ИзменениеСуммыНДС = -СтрокаТабличнойЧасти.ИзменениеСуммыНДС;
				СтрокаТабличнойЧасти.ИзменениеСуммы	   = -СтрокаТабличнойЧасти.ИзменениеСуммы;
			КонецЕсли;
			
			Документы.Приложение2КНалоговойНакладной.ЗаполнитьСтатьюДекларацииНДСНалоговыеОбязательства(ЭтотОбъект, СтрокаТабличнойЧасти, "Товары");
			
			Документы.Приложение2КНалоговойНакладной.УстановитьКодУКТВЭДВстрокеТоваров(СтрокаТабличнойЧасти);
			
		Иначе
			СтрокаТабличнойЧасти = ВозвратнаяТара.Добавить();
			
			Если ЭтоВозврат Тогда
				СтрокаТабличнойЧасти.ИзменениеСуммы	        = -Выборка.БазаНДСОстаток;
			Иначе
				СтрокаТабличнойЧасти.ИзменениеСуммы	        = Выборка.БазаНДСОстаток;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура СкопироватьТовары() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", НалоговаяНакладная);
	Запрос.УстановитьПараметр("ДопустимыеСтавкиНДС", Документы.Приложение2КНалоговойНакладной.ОпределитьДопустимыеСтавкиНДС(ЭтотОбъект));
	Запрос.УстановитьПараметр("ПродажаНижеОЦ", ВидОперации = Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.СводнаяНаПревышениеБазыНадЦенойПоставки);
	Если  ВидОперации = Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.СводнаяНаПревышениеБазыНадЦенойПоставки
		И ЗначениеЗаполнено(НалоговаяНакладная.ОсновнаяНалоговаяПриРезервеНомераПриПродажаНижеОбычнойЦены) Тогда
		Запрос.УстановитьПараметр("ДокументОснование", НалоговаяНакладная.ОсновнаяНалоговаяПриРезервеНомераПриПродажаНижеОбычнойЦены);	
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Основание.ЕдиницаИзмерения,
	|	Основание.Количество,
	|	Основание.Коэффициент,
	|	Основание.Номенклатура,
	|	Основание.КодУКТВЭД,
	|	Основание.НомерГТД,
	|	Основание.Цена,
	|	Основание.Ссылка.ВалютаДокумента КАК ВалютаДокумента,
	|	ВЫБОР КОГДА Основание.Ссылка.ВалютаДокумента = Основание.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов ТОГДА
	|		Основание.Ссылка.КурсВзаиморасчетов
	|	ИНАЧЕ
	|		1
	|	КОНЕЦ                                           КАК КурсДокумента,
	|	ВЫБОР КОГДА Основание.Ссылка.ВалютаДокумента = Основание.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов ТОГДА
	|		Основание.Ссылка.КратностьВзаиморасчетов
	|	ИНАЧЕ
	|		1
	|	КОНЕЦ                                           КАК КратностьДокумента,
	|	Основание.СтавкаНДС,
	//|	Основание.СуммаСкидки,
	//|	Основание.Сумма,
	//|	Основание.СуммаНДС,
	//|	Основание.Ссылка.СуммаВключаетНДС      КАК СуммаВключаетНДС,
	|	ВЫБОР КОГДА &ПродажаНижеОЦ ТОГДА 0 ИНАЧЕ Основание.СуммаСкидки    				    	КОНЕЦ КАК СуммаСкидки,
	|	ВЫБОР КОГДА &ПродажаНижеОЦ ТОГДА Основание.СуммаПревышения ИНАЧЕ Основание.Сумма    	КОНЕЦ КАК Сумма,
	|	ВЫБОР КОГДА &ПродажаНижеОЦ ТОГДА Основание.СуммаНДСПревышения ИНАЧЕ Основание.СуммаНДС 	КОНЕЦ КАК СуммаНДС,
	|	ВЫБОР КОГДА &ПродажаНижеОЦ ТОГДА Ложь ИНАЧЕ Основание.Ссылка.СуммаВключаетНДС           КОНЕЦ КАК СуммаВключаетНДС,
	|	Основание.Ссылка.Дата			       КАК ДатаОтгрузки
	|ИЗ
	|	Документ.НалоговаяНакладная.Товары КАК Основание
	|
	|ГДЕ
	|	  Основание.Ссылка = &ДокументОснование
	|   И Основание.СтавкаНДС В (&ДопустимыеСтавкиНДС)
	|";

	Запрос.Текст = ТекстЗапроса;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = Товары.Добавить();
		НоваяСтрока.Номенклатура               = Выборка.Номенклатура;
		НоваяСтрока.ЕдиницаИзмерения           = Выборка.ЕдиницаИзмерения;
		НоваяСтрока.Коэффициент                = Выборка.Коэффициент;
		НоваяСтрока.Количество                 = Выборка.Количество;

		НоваяСтрока.СтавкаНДС                  = Выборка.СтавкаНДС;

		НоваяСтрока.Сумма = УчетНДСКлиентСервер.ПересчитатьЦенуПриИзмененииФлаговНалогов(
				МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Выборка.Сумма, Выборка.ВалютаДокумента, ВалютаДокумента,
					Выборка.КурсДокумента, ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета),
					Выборка.КратностьДокумента, ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета)),
					Выборка.СуммаВключаетНДС,
					СуммаВключаетНДС,
					УчетНДС.ПолучитьСтавкуНДС(НоваяСтрока.СтавкаНДС));
					
		НоваяСтрока.СуммаСкидки = УчетНДСКлиентСервер.ПересчитатьЦенуПриИзмененииФлаговНалогов(
				МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Выборка.СуммаСкидки, Выборка.ВалютаДокумента, ВалютаДокумента,
					Выборка.КурсДокумента, ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета),
					Выборка.КратностьДокумента, ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета)),
					Выборка.СуммаВключаетНДС,
					СуммаВключаетНДС,
					УчетНДС.ПолучитьСтавкуНДС(НоваяСтрока.СтавкаНДС));
					
		НоваяСтрока.СуммаБезСкидки = НоваяСтрока.Сумма + НоваяСтрока.СуммаСкидки;		
				
		Если НоваяСтрока.Количество <> 0 Тогда
			НоваяСтрока.Цена = НоваяСтрока.Сумма / НоваяСтрока.Количество;
		КонецЕсли;	
		
		НоваяСтрока.СуммаНДС = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Выборка.СуммаНДС, Выборка.ВалютаДокумента, ВалютаДокумента,
														  Выборка.КурсДокумента, ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета),
														  Выборка.КратностьДокумента, ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета));
		
		Документы.Приложение2КНалоговойНакладной.ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(ЭтотОбъект, НоваяСтрока, "Товары");
		НоваяСтрока.КодУКТВЭД                  = Выборка.КодУКТВЭД;
		НоваяСтрока.НомерГТД                   = Выборка.НомерГТД;
			
	КонецЦикла;

КонецПроцедуры // СкопироватьТовары()

Процедура СкопироватьВозвратнуюТару() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", НалоговаяНакладная);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Основание.Количество,
	|	Основание.Номенклатура,
	|	Основание.Сумма,
	|	Основание.Цена,
	|	Основание.Ссылка.ВалютаДокумента	КАК ВалютаДокумента,
	|	ВЫБОР КОГДА Основание.Ссылка.ВалютаДокумента = Основание.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов ТОГДА
	|		Основание.Ссылка.КурсВзаиморасчетов
	|	ИНАЧЕ
	|		1
	|	КОНЕЦ                                           КАК КурсДокумента,
	|	ВЫБОР КОГДА Основание.Ссылка.ВалютаДокумента = Основание.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов ТОГДА
	|		Основание.Ссылка.КратностьВзаиморасчетов
	|	ИНАЧЕ
	|		1
	|	КОНЕЦ                                           КАК КратностьДокумента
	|ИЗ
	|	Документ.НалоговаяНакладная.ВозвратнаяТара КАК Основание
	|
	|ГДЕ
	|	Основание.Ссылка = &ДокументОснование
	|";

	Запрос.Текст = ТекстЗапроса;
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл

		НоваяСтрока = ВозвратнаяТара.Добавить();
		НоваяСтрока.Номенклатура = Выборка.Номенклатура;
		НоваяСтрока.Количество   = Выборка.Количество;
		НоваяСтрока.Цена  = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Выборка.Цена, Выборка.ВалютаДокумента, ВалютаДокумента, Выборка.КурсДокумента, ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета),
							Выборка.КратностьДокумента, ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета));
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(НоваяСтрока);
		
	КонецЦикла;

КонецПроцедуры // СкопироватьВозвратнуюТару()

Процедура ЗаполнитьПоВозвратуТоваровОтПокупателя() Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
	Запрос.УстановитьПараметр("ДопустимыеСтавкиНДС", Документы.Приложение2КНалоговойНакладной.ОпределитьДопустимыеСтавкиНДС(ЭтотОбъект));
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Основание.ЕдиницаИзмерения,
	|	Основание.Количество,
	|	Основание.Коэффициент,
	|	Основание.Номенклатура,
	|	Основание.Цена,
	|	Основание.Ссылка.ВалютаДокумента КАК ВалютаДокумента,
	|	ВЫБОР КОГДА Основание.Ссылка.ВалютаДокумента = Основание.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов ТОГДА
	|		Основание.Ссылка.КурсВзаиморасчетов
	|	ИНАЧЕ
	|		1
	|	КОНЕЦ                                           КАК КурсДокумента,
	|	ВЫБОР КОГДА Основание.Ссылка.ВалютаДокумента = Основание.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов ТОГДА
	|		Основание.Ссылка.КратностьВзаиморасчетов
	|	ИНАЧЕ
	|		1
	|	КОНЕЦ                                           КАК КратностьДокумента,
	|	Основание.Сумма,
	|	Основание.СуммаСкидки,
	|	Основание.СуммаБезСкидки,
	|	Основание.СтавкаНДС,
	|	Основание.СуммаНДС,
	|	Основание.Ссылка.СуммаВключаетНДС      КАК СуммаВключаетНДС
	|ИЗ
	|	Документ.ВозвратТоваровОтПокупателя.Товары КАК Основание
	|
	|ГДЕ
	|	  Основание.Ссылка = &ДокументОснование
	|   И Основание.СтавкаНДС В (&ДопустимыеСтавкиНДС)
	|";

	Запрос.Текст = ТекстЗапроса;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = Товары.Добавить();
		НоваяСтрока.Номенклатура               = Выборка.Номенклатура;
		Документы.Приложение2КНалоговойНакладной.УстановитьКодУКТВЭДВстрокеТоваров(НоваяСтрока);
		НоваяСтрока.ЕдиницаИзмерения           = Выборка.ЕдиницаИзмерения;
		НоваяСтрока.Коэффициент                = Выборка.Коэффициент;
		НоваяСтрока.Количество                 = Выборка.Количество;
		НоваяСтрока.СуммаСкидки   				= Выборка.СуммаСкидки;
		НоваяСтрока.СуммаБезСкидки  			= Выборка.СуммаБезСкидки;

		НоваяСтрока.СтавкаНДС                  = Выборка.СтавкаНДС;

		НоваяСтрока.Цена = УчетНДСКлиентСервер.ПересчитатьЦенуПриИзмененииФлаговНалогов(
				МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Выборка.Цена, Выборка.ВалютаДокумента, ВалютаДокумента,
				Выборка.КурсДокумента, ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета),
				Выборка.КратностьДокумента, ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета)),
				Выборка.СуммаВключаетНДС,
				СуммаВключаетНДС,
				УчетНДС.ПолучитьСтавкуНДС(НоваяСтрока.СтавкаНДС));		
		
		НоваяСтрока.Сумма = УчетНДСКлиентСервер.ПересчитатьЦенуПриИзмененииФлаговНалогов(
				МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Выборка.Сумма, Выборка.ВалютаДокумента, ВалютаДокумента,
				Выборка.КурсДокумента, ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета),
				Выборка.КратностьДокумента, ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета)),
				Выборка.СуммаВключаетНДС,
				СуммаВключаетНДС,
				УчетНДС.ПолучитьСтавкуНДС(НоваяСтрока.СтавкаНДС));
				
				
		НоваяСтрока.СуммаНДС = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Выборка.СуммаНДС, Выборка.ВалютаДокумента, ВалютаДокумента,
														  Выборка.КурсДокумента, ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета),
														  Выборка.КратностьДокумента, ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета));
				
		НоваяСтрока.ИзменениеСуммы 		= -НоваяСтрока.Сумма;
		НоваяСтрока.ИзменениеСуммыНДС 	= -НоваяСтрока.СуммаНДС;
		НоваяСтрока.ИзменениеКоличества = -НоваяСтрока.Количество;
														  
		Документы.Приложение2КНалоговойНакладной.ЗаполнитьСтатьюДекларацииНДСНалоговыеОбязательства(ЭтотОбъект, НоваяСтрока, "Товары");
		
		НоваяСтрока.Причина = "Повернення товару";
		
	КонецЦикла;	
	
КонецПроцедуры

Процедура ЗаполнитьПоОтчетуКомиссионераОПродажах() Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
	Запрос.УстановитьПараметр("ДопустимыеСтавкиНДС", Документы.Приложение2КНалоговойНакладной.ОпределитьДопустимыеСтавкиНДС(ЭтотОбъект));
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Основание.ЕдиницаИзмерения,
	|	Основание.Количество,
	|	Основание.Коэффициент,
	|	Основание.Номенклатура,
	|	Основание.Цена,
	|	Основание.ЦенаПередачи,
	|	Основание.СуммаПередачи,
	|	ВЫБОР КОГДА Сумма = 0 
	|		  ТОГДА 0 
	|	  	  ИНАЧЕ СуммаНДС * СуммаПередачи / Сумма КОНЕЦ КАК СуммаНДСПередачи,
	|	Основание.Ссылка.ВалютаДокумента КАК ВалютаДокумента,
	|	ВЫБОР КОГДА Основание.Ссылка.ВалютаДокумента = Основание.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов ТОГДА
	|		Основание.Ссылка.КурсВзаиморасчетов
	|	ИНАЧЕ
	|		1
	|	КОНЕЦ                                           КАК КурсДокумента,
	|	ВЫБОР КОГДА Основание.Ссылка.ВалютаДокумента = Основание.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов ТОГДА
	|		Основание.Ссылка.КратностьВзаиморасчетов
	|	ИНАЧЕ
	|		1
	|	КОНЕЦ                                           КАК КратностьДокумента,
	|	Основание.Сумма,
	|	Основание.СтавкаНДС,
	|	Основание.СуммаНДС,
	|	Основание.Ссылка.СуммаВключаетНДС      КАК СуммаВключаетНДС
	|ИЗ
	|	Документ.ОтчетКомиссионераОПродажах.Товары КАК Основание
	|
	|ГДЕ
	|	  Основание.Ссылка = &ДокументОснование
	|   И Основание.СтавкаНДС В (&ДопустимыеСтавкиНДС)
	|	И Основание.Сумма <> Основание.СуммаПередачи
	|";

	Запрос.Текст = ТекстЗапроса;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = Товары.Добавить();
		НоваяСтрока.Номенклатура               = Выборка.Номенклатура;
		Документы.Приложение2КНалоговойНакладной.УстановитьКодУКТВЭДВстрокеТоваров(НоваяСтрока);
		НоваяСтрока.ЕдиницаИзмерения           = Выборка.ЕдиницаИзмерения;
		НоваяСтрока.Коэффициент                = Выборка.Коэффициент;
		НоваяСтрока.Количество                 = Выборка.Количество;

		НоваяСтрока.СтавкаНДС                  = Выборка.СтавкаНДС;

		НоваяСтрока.Цена = УчетНДСКлиентСервер.ПересчитатьЦенуПриИзмененииФлаговНалогов(
				МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Выборка.ЦенаПередачи, Выборка.ВалютаДокумента, ВалютаДокумента,
				Выборка.КурсДокумента, ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета),
				Выборка.КратностьДокумента, ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета)),
				Выборка.СуммаВключаетНДС,
				СуммаВключаетНДС,
				УчетНДС.ПолучитьСтавкуНДС(НоваяСтрока.СтавкаНДС));		
				
				
		НоваяСтрока.Сумма = УчетНДСКлиентСервер.ПересчитатьЦенуПриИзмененииФлаговНалогов(
				МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Выборка.СуммаПередачи, Выборка.ВалютаДокумента, ВалютаДокумента,
				Выборка.КурсДокумента, ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета),
				Выборка.КратностьДокумента, ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета)),
				Выборка.СуммаВключаетНДС,
				СуммаВключаетНДС,
				УчетНДС.ПолучитьСтавкуНДС(НоваяСтрока.СтавкаНДС));
				
				
		НоваяСтрока.ИзменениеСуммы = УчетНДСКлиентСервер.ПересчитатьЦенуПриИзмененииФлаговНалогов(
				МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Выборка.Сумма - Выборка.СуммаПередачи, Выборка.ВалютаДокумента, ВалютаДокумента,
				Выборка.КурсДокумента, ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета),
				Выборка.КратностьДокумента, ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета)),
				Выборка.СуммаВключаетНДС,
				СуммаВключаетНДС,
				УчетНДС.ПолучитьСтавкуНДС(НоваяСтрока.СтавкаНДС));
				
				
		НоваяСтрока.ИзменениеСуммыНДС = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Выборка.СуммаНДС - Выборка.СуммаНДСПередачи, Выборка.ВалютаДокумента, ВалютаДокумента,
														  Выборка.КурсДокумента, ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета),
														  Выборка.КратностьДокумента, ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета));
				
		НоваяСтрока.ИзменениеЦены = УчетНДСКлиентСервер.ПересчитатьЦенуПриИзмененииФлаговНалогов(
				МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Выборка.Цена - Выборка.ЦенаПередачи, Выборка.ВалютаДокумента, ВалютаДокумента,
				Выборка.КурсДокумента, ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета),
				Выборка.КратностьДокумента, ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета)),
				Выборка.СуммаВключаетНДС,
				СуммаВключаетНДС,
				УчетНДС.ПолучитьСтавкуНДС(НоваяСтрока.СтавкаНДС));
				
		НоваяСтрока.СуммаНДС = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Выборка.СуммаНДС, Выборка.ВалютаДокумента, ВалютаДокумента,
														  Выборка.КурсДокумента, ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета),
														  Выборка.КратностьДокумента, ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета));
														  
		Документы.Приложение2КНалоговойНакладной.ЗаполнитьСтатьюДекларацииНДСНалоговыеОбязательства(ЭтотОбъект, НоваяСтрока, "Товары");
		
		НоваяСтрока.Причина = "Коригування ціни " + ?(Дата >='20110110', "постачання", "поставки");
		
	КонецЦикла;

КонецПроцедуры

Процедура СкопироватьУслуги() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", НалоговаяНакладная);
	Запрос.УстановитьПараметр("ДопустимыеСтавкиНДС", Документы.Приложение2КНалоговойНакладной.ОпределитьДопустимыеСтавкиНДС(ЭтотОбъект));
	Запрос.УстановитьПараметр("ПродажаНижеОЦ", ВидОперации = Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.СводнаяНаПревышениеБазыНадЦенойПоставки);
	Если  ВидОперации = Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.СводнаяНаПревышениеБазыНадЦенойПоставки
		И ЗначениеЗаполнено(НалоговаяНакладная.ОсновнаяНалоговаяПриРезервеНомераПриПродажаНижеОбычнойЦены) Тогда
		Запрос.УстановитьПараметр("ДокументОснование", НалоговаяНакладная.ОсновнаяНалоговаяПриРезервеНомераПриПродажаНижеОбычнойЦены);	
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(Основание.Содержание КАК СТРОКА(1000)) КАК Содержание,
	|	Основание.Количество,
	|	Основание.Номенклатура,
	|	Основание.КодУКТВЭД,
	|	Основание.Цена,
	|	Основание.Ссылка.ВалютаДокумента КАК ВалютаДокумента,
	|	ВЫБОР КОГДА Основание.Ссылка.ВалютаДокумента = Основание.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов ТОГДА
	|		Основание.Ссылка.КурсВзаиморасчетов
	|	ИНАЧЕ
	|		1
	|	КОНЕЦ                                           КАК КурсДокумента,
	|	ВЫБОР КОГДА Основание.Ссылка.ВалютаДокумента = Основание.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов ТОГДА
	|		Основание.Ссылка.КратностьВзаиморасчетов
	|	ИНАЧЕ
	|		1
	|	КОНЕЦ                                           КАК КратностьДокумента,
	|	Основание.СтавкаНДС,
	//|	Основание.СуммаСкидки,
	//|	Основание.Сумма,
	//|	Основание.СуммаНДС,
	//|	Основание.Ссылка.СуммаВключаетНДС      КАК СуммаВключаетНДС,
	|	ВЫБОР КОГДА &ПродажаНижеОЦ ТОГДА 0 ИНАЧЕ Основание.СуммаСкидки    				    	КОНЕЦ КАК СуммаСкидки,
	|	ВЫБОР КОГДА &ПродажаНижеОЦ ТОГДА Основание.СуммаПревышения ИНАЧЕ Основание.Сумма    	КОНЕЦ КАК Сумма,
	|	ВЫБОР КОГДА &ПродажаНижеОЦ ТОГДА Основание.СуммаНДСПревышения ИНАЧЕ Основание.СуммаНДС 	КОНЕЦ КАК СуммаНДС,
	|	ВЫБОР КОГДА &ПродажаНижеОЦ ТОГДА Ложь ИНАЧЕ Основание.Ссылка.СуммаВключаетНДС           КОНЕЦ КАК СуммаВключаетНДС,
	|	Основание.Ссылка.Дата			       КАК ДатаОтгрузки
	|ИЗ
	|	Документ.НалоговаяНакладная.Услуги КАК Основание
	|
	|ГДЕ
	|	Основание.Ссылка = &ДокументОснование
	|   И Основание.СтавкаНДС В (&ДопустимыеСтавкиНДС)
	|";
	
	Запрос.Текст = ТекстЗапроса;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НоваяСтрока = Услуги.Добавить();
		НоваяСтрока.Номенклатура               = Выборка.Номенклатура;
		НоваяСтрока.Содержание                 = Выборка.Содержание;
		НоваяСтрока.Количество                 = Выборка.Количество;
		НоваяСтрока.СтавкаНДС                  = Выборка.СтавкаНДС;

		НоваяСтрока.Сумма = УчетНДСКлиентСервер.ПересчитатьЦенуПриИзмененииФлаговНалогов(
				МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Выборка.Сумма, Выборка.ВалютаДокумента, ВалютаДокумента,
					Выборка.КурсДокумента, ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета),
					Выборка.КратностьДокумента, ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета)),
					Выборка.СуммаВключаетНДС,
					СуммаВключаетНДС,
					УчетНДС.ПолучитьСтавкуНДС(НоваяСтрока.СтавкаНДС));
				
				
		НоваяСтрока.СуммаСкидки = УчетНДСКлиентСервер.ПересчитатьЦенуПриИзмененииФлаговНалогов(
				МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Выборка.СуммаСкидки, Выборка.ВалютаДокумента, ВалютаДокумента,
					Выборка.КурсДокумента, ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета),
					Выборка.КратностьДокумента, ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета)),
					Выборка.СуммаВключаетНДС,
					СуммаВключаетНДС,
					УчетНДС.ПолучитьСтавкуНДС(НоваяСтрока.СтавкаНДС));
					
		НоваяСтрока.СуммаБезСкидки = НоваяСтрока.Сумма + НоваяСтрока.СуммаСкидки;		
				
		Если НоваяСтрока.Количество <> 0 Тогда
			НоваяСтрока.Цена = НоваяСтрока.Сумма / НоваяСтрока.Количество;
		Иначе
			НоваяСтрока.Количество = 1; 
			НоваяСтрока.Цена = НоваяСтрока.Сумма;
		КонецЕсли;	
		
		НоваяСтрока.СуммаНДС = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Выборка.СуммаНДС, Выборка.ВалютаДокумента, ВалютаДокумента,
														  Выборка.КурсДокумента, ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета),
														  Выборка.КратностьДокумента, ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета));
		
		Документы.Приложение2КНалоговойНакладной.ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(ЭтотОбъект, НоваяСтрока, "Услуги");
		
		НоваяСтрока.КодУКТВЭД = Выборка.КодУКТВЭД;
		
	КонецЦикла;

	
КонецПроцедуры // СкопироватьУслуги()

Процедура СкопироватьОС() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", НалоговаяНакладная);
	Запрос.УстановитьПараметр("ДопустимыеСтавкиНДС", Документы.Приложение2КНалоговойНакладной.ОпределитьДопустимыеСтавкиНДС(ЭтотОбъект));
	Запрос.УстановитьПараметр("ПродажаНижеОЦ", ВидОперации = Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.СводнаяНаПревышениеБазыНадЦенойПоставки);
	Если  ВидОперации = Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.СводнаяНаПревышениеБазыНадЦенойПоставки
		И ЗначениеЗаполнено(НалоговаяНакладная.ОсновнаяНалоговаяПриРезервеНомераПриПродажаНижеОбычнойЦены) Тогда
		Запрос.УстановитьПараметр("ДокументОснование", НалоговаяНакладная.ОсновнаяНалоговаяПриРезервеНомераПриПродажаНижеОбычнойЦены);	
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Основание.ОсновноеСредство,
	|	Основание.КодУКТВЭД,
	|	Основание.НомерГТД,
	|	Основание.Ссылка.ВалютаДокумента 	   КАК ВалютаДокумента,
	|	ВЫБОР КОГДА Основание.Ссылка.ВалютаДокумента = Основание.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов ТОГДА
	|		Основание.Ссылка.КурсВзаиморасчетов
	|	ИНАЧЕ
	|		1
	|	КОНЕЦ                                  КАК КурсДокумента,
	|	ВЫБОР КОГДА Основание.Ссылка.ВалютаДокумента = Основание.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов ТОГДА
	|		Основание.Ссылка.КратностьВзаиморасчетов
	|	ИНАЧЕ
	|		1
	|	КОНЕЦ                                  КАК КратностьДокумента,
	|	Основание.СтавкаНДС,
	//|	Основание.Сумма,
	//|	Основание.СуммаНДС,
	//|	Основание.Ссылка.СуммаВключаетНДС      КАК СуммаВключаетНДС,
	|	ВЫБОР КОГДА &ПродажаНижеОЦ ТОГДА Основание.СуммаПревышения ИНАЧЕ Основание.Сумма    	КОНЕЦ КАК Сумма,
	|	ВЫБОР КОГДА &ПродажаНижеОЦ ТОГДА Основание.СуммаНДСПревышения ИНАЧЕ Основание.СуммаНДС 	КОНЕЦ КАК СуммаНДС,
	|	ВЫБОР КОГДА &ПродажаНижеОЦ ТОГДА Ложь ИНАЧЕ Основание.Ссылка.СуммаВключаетНДС 			КОНЕЦ КАК СуммаВключаетНДС,
	|	Основание.Ссылка.Дата			       КАК ДатаОтгрузки
	|ИЗ
	|	Документ.НалоговаяНакладная.ОС 	   	   КАК Основание
	|
	|ГДЕ
	|	Основание.Ссылка = &ДокументОснование
	|   И Основание.СтавкаНДС В (&ДопустимыеСтавкиНДС)
	|";
	
	Запрос.Текст = ТекстЗапроса;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НоваяСтрока = ОС.Добавить();
		НоваяСтрока.ОсновноеСредство           = Выборка.ОсновноеСредство;
		НоваяСтрока.СтавкаНДС                  = Выборка.СтавкаНДС;

		НоваяСтрока.Сумма = УчетНДСКлиентСервер.ПересчитатьЦенуПриИзмененииФлаговНалогов(
				МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Выборка.Сумма, Выборка.ВалютаДокумента, ВалютаДокумента,
					Выборка.КурсДокумента, ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета),
					Выборка.КратностьДокумента, ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета)),
					Выборка.СуммаВключаетНДС,
					СуммаВключаетНДС,
					УчетНДС.ПолучитьСтавкуНДС(НоваяСтрока.СтавкаНДС));
		НоваяСтрока.СуммаНДС = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Выборка.СуммаНДС, Выборка.ВалютаДокумента, ВалютаДокумента,
														  Выборка.КурсДокумента, ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета),
														  Выборка.КратностьДокумента, ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета));
													  
		Документы.Приложение2КНалоговойНакладной.ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(ЭтотОбъект,НоваяСтрока, "ОС");
		НоваяСтрока.КодУКТВЭД                  = Выборка.КодУКТВЭД;
		НоваяСтрока.НомерГТД                  = Выборка.НомерГТД;
		
	КонецЦикла;
	
КонецПроцедуры // СкопироватьОС()

Процедура СкопироватьНематериальныеАктивы() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", НалоговаяНакладная);
	Запрос.УстановитьПараметр("ДопустимыеСтавкиНДС", Документы.Приложение2КНалоговойНакладной.ОпределитьДопустимыеСтавкиНДС(ЭтотОбъект));
	Запрос.УстановитьПараметр("ПродажаНижеОЦ", ВидОперации = Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.СводнаяНаПревышениеБазыНадЦенойПоставки);
	Если  ВидОперации = Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.СводнаяНаПревышениеБазыНадЦенойПоставки
		И ЗначениеЗаполнено(НалоговаяНакладная.ОсновнаяНалоговаяПриРезервеНомераПриПродажаНижеОбычнойЦены) Тогда
		Запрос.УстановитьПараметр("ДокументОснование", НалоговаяНакладная.ОсновнаяНалоговаяПриРезервеНомераПриПродажаНижеОбычнойЦены);	
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Основание.НематериальныйАктив,
	|	Основание.КодУКТВЭД,
	|	Основание.НомерГТД,
	|	Основание.Ссылка.ВалютаДокумента 	   КАК ВалютаДокумента,
	|	ВЫБОР КОГДА Основание.Ссылка.ВалютаДокумента = Основание.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов ТОГДА
	|		Основание.Ссылка.КурсВзаиморасчетов
	|	ИНАЧЕ
	|		1
	|	КОНЕЦ                                  КАК КурсДокумента,
	|	ВЫБОР КОГДА Основание.Ссылка.ВалютаДокумента = Основание.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов ТОГДА
	|		Основание.Ссылка.КратностьВзаиморасчетов
	|	ИНАЧЕ
	|		1
	|	КОНЕЦ                                  КАК КратностьДокумента,
	//|	Основание.Сумма,
	//|	Основание.СуммаНДС,
	//|	Основание.Ссылка.СуммаВключаетНДС      КАК СуммаВключаетНДС,
	|	ВЫБОР КОГДА &ПродажаНижеОЦ ТОГДА Основание.СуммаПревышения ИНАЧЕ Основание.Сумма    	КОНЕЦ КАК Сумма,
	|	ВЫБОР КОГДА &ПродажаНижеОЦ ТОГДА Основание.СуммаНДСПревышения ИНАЧЕ Основание.СуммаНДС 	КОНЕЦ КАК СуммаНДС,
	|	ВЫБОР КОГДА &ПродажаНижеОЦ ТОГДА Ложь ИНАЧЕ Основание.Ссылка.СуммаВключаетНДС           КОНЕЦ КАК СуммаВключаетНДС,
	|	Основание.СтавкаНДС,
	|	Основание.Ссылка.Дата			       КАК ДатаОтгрузки
	|ИЗ
	|	Документ.НалоговаяНакладная.НМА КАК Основание
	|
	|ГДЕ
	|	Основание.Ссылка = &ДокументОснование
	|   И Основание.СтавкаНДС В (&ДопустимыеСтавкиНДС)
	|";
	
	Запрос.Текст = ТекстЗапроса;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НоваяСтрока = НМА.Добавить();
		НоваяСтрока.НематериальныйАктив        = Выборка.НематериальныйАктив;
		НоваяСтрока.НомерГТД                  = Выборка.НомерГТД;
		НоваяСтрока.СтавкаНДС                  = Выборка.СтавкаНДС;

		НоваяСтрока.Сумма = УчетНДСКлиентСервер.ПересчитатьЦенуПриИзмененииФлаговНалогов(
				МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Выборка.Сумма, Выборка.ВалютаДокумента, ВалютаДокумента,
					Выборка.КурсДокумента, ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета),
					Выборка.КратностьДокумента, ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета)),
					Выборка.СуммаВключаетНДС,
					СуммаВключаетНДС,
					УчетНДС.ПолучитьСтавкуНДС(НоваяСтрока.СтавкаНДС));
		НоваяСтрока.СуммаНДС = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Выборка.СуммаНДС, Выборка.ВалютаДокумента, ВалютаДокумента,
														  Выборка.КурсДокумента, ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета),
														  Выборка.КратностьДокумента, ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета));
													  
		Документы.Приложение2КНалоговойНакладной.ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(ЭтотОбъект, НоваяСтрока, "НМА");
		НоваяСтрока.КодУКТВЭД                  = Выборка.КодУКТВЭД;
	
	КонецЦикла;
	
КонецПроцедуры // СкопироватьНематериальныеАктивы()


Функция ЭтоВозврат(ВидОперации)
	
	Если  ВидОперации = Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.ОблагаемыеОперацииКорректировка
	  ИЛИ ВидОперации = Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.ОсвобожденныеОперацииКорректировка
	  ИЛИ ВидОперации = Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.НеНДСОперацииКорректировка
	  ИЛИ ВидОперации = Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.РаботыОтНерезидентаКорректировка Тогда
		Возврат Ложь
	Иначе
		Возврат Истина
	КонецЕсли;
		
КонецФункции

Функция ОпределитьСделкуЛокально() Экспорт

	Если 	  ВидОперации = Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.ИтоговаяРозницаОблагаемыеОперацииВозврат
		  ИЛИ ВидОперации = Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.ИтоговаяРозницаОсвобожденныеОперацииВозврат
		  ИЛИ ВидОперации = Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.РозницаКонрагентуОблагаемыеОперацииВозврат
		  ИЛИ ВидОперации = Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.РозницаКонрагентуОсвобожденныеОперацииВозврат 
		  
		  ИЛИ ДоговорКонтрагента.ВедениеВзаиморасчетовНУ = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом Тогда
		  
		  Возврат Неопределено;
	 	
	Иначе

		Возврат Сделка;
		
	КонецЕсли;
   
КонецФункции // УправлениеВзаиморасчетами.ОпределитьДокументРасчетовСКонтрагентом()

Процедура ЗаполнитьПоВозвратуБАОтПокупателя() Экспорт // ИНАГРО

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
	Запрос.УстановитьПараметр("ДопустимыеСтавкиНДС", Документы.Приложение2КНалоговойНакладной.ОпределитьДопустимыеСтавкиНДС(ЭтотОбъект));
	
	ТекстЗапроса = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Основание.ЕдиницаИзмерения,
		|	Основание.Количество,
		|	Основание.Коэффициент,
		|	Основание.Номенклатура,
		|	Основание.Номенклатура.НоменклатураГТД.КодУКТВЭД КАК КодУКТВЭД,
		|	Основание.Цена,
		|	Основание.Ссылка.ВалютаДокумента КАК ВалютаДокумента,
		|	ВЫБОР
		|		КОГДА Основание.Ссылка.ВалютаДокумента = Основание.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов
		|			ТОГДА Основание.Ссылка.КурсВзаиморасчетов
		|		ИНАЧЕ 1
		|	КОНЕЦ КАК КурсДокумента,
		|	ВЫБОР
		|		КОГДА Основание.Ссылка.ВалютаДокумента = Основание.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов
		|			ТОГДА Основание.Ссылка.КратностьВзаиморасчетов
		|		ИНАЧЕ 1
		|	КОНЕЦ КАК КратностьДокумента,
		|	Основание.Сумма,
		|	Основание.СтавкаНДС,
		|	Основание.СуммаНДС,
		|	Основание.Ссылка.СуммаВключаетНДС КАК СуммаВключаетНДС
		|ИЗ
		|	Документ.ИНАГРО_ВозвратБиологическихАктивовОтПокупателя.Товары КАК Основание
		|ГДЕ
		|	Основание.Ссылка = &ДокументОснование
		|	И Основание.СтавкаНДС В(&ДопустимыеСтавкиНДС)";

	Запрос.Текст = ТекстЗапроса;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		НоваяСтрока = Товары.Добавить();
		НоваяСтрока.Номенклатура       = Выборка.Номенклатура;
		НоваяСтрока.КодУКТВЭД 	       = Выборка.КодУКТВЭД;
		НоваяСтрока.ЕдиницаИзмерения   = Выборка.ЕдиницаИзмерения;
		НоваяСтрока.Коэффициент        = Выборка.Коэффициент;
		НоваяСтрока.Количество         = Выборка.Количество;

		НоваяСтрока.СтавкаНДС          = Выборка.СтавкаНДС;

		НоваяСтрока.Цена = УчетНДСКлиентСервер.ПересчитатьЦенуПриИзмененииФлаговНалогов(
				МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Выборка.Цена, Выборка.ВалютаДокумента, ВалютаДокумента,
				Выборка.КурсДокумента, ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета),
				Выборка.КратностьДокумента, ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета)),
				Выборка.СуммаВключаетНДС,				
				СуммаВключаетНДС,
				УчетНДС.ПолучитьСтавкуНДС(НоваяСтрока.СтавкаНДС));		
						
		НоваяСтрока.Сумма = УчетНДСКлиентСервер.ПересчитатьЦенуПриИзмененииФлаговНалогов(
				МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Выборка.Сумма, Выборка.ВалютаДокумента, ВалютаДокумента,
				Выборка.КурсДокумента, ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета),
				Выборка.КратностьДокумента, ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета)),				
				Выборка.СуммаВключаетНДС,
				СуммаВключаетНДС,
				УчетНДС.ПолучитьСтавкуНДС(НоваяСтрока.СтавкаНДС));				
				
		НоваяСтрока.СуммаНДС = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Выборка.СуммаНДС, Выборка.ВалютаДокумента, ВалютаДокумента,
														  Выборка.КурсДокумента, ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета),
														  Выборка.КратностьДокумента, ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета));
				
		НоваяСтрока.ИзменениеСуммы 		= -НоваяСтрока.Сумма;
		НоваяСтрока.ИзменениеСуммыНДС 	= -НоваяСтрока.СуммаНДС;
		НоваяСтрока.ИзменениеКоличества = -НоваяСтрока.Количество;
														  
		Документы.Приложение2КНалоговойНакладной.ЗаполнитьСтатьюДекларацииНДСНалоговыеОбязательства(ЭтотОбъект, НоваяСтрока, "Товары");
		
		НоваяСтрока.Причина = "Повернення товару";
		
	КонецЦикла;	
	
КонецПроцедуры

#КонецОбласти 

#Область Проведение 

// Процедура заполняет колонки таблицы товаров, которые будут в дальнейшем использоваться
// для формирования движений  и печати
Процедура ДобавитьКолонкиТоваровРеглЛокально(ТаблицаТоваров, СтруктураШапкиДокумента, ПогрешностиОкругления) Экспорт
	
	// Суммы в документе в валюте документа
	ТаблицаТоваров.Колонки.Добавить("ИзменениеСуммыБезНДСВал"        , ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаТоваров.Колонки.Добавить("ИзменениеСуммыНДСВал"           , ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаТоваров.Колонки.Добавить("ИзменениеСуммыСНДСВал"          , ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповЧисла(15,2));
	
	// Суммы в документе в валюте регл. учета
	ТаблицаТоваров.Колонки.Добавить("ИзменениеСуммыБезНДСРегл"        , ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаТоваров.Колонки.Добавить("ИзменениеСуммыНДСРегл"           , ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаТоваров.Колонки.Добавить("ИзменениеСуммыСНДСРегл"          , ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповЧисла(15,2));
	
	// Колонки, необходимые для печати документа
	ТаблицаТоваров.Колонки.Добавить("ЦенаМестаБезНДСБезСкидкиРегл"		, ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповЧисла(18,5));
	ТаблицаТоваров.Колонки.Добавить("ИзменениеЦеныБезНДССоСкидкойРегл"  , ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповЧисла(18,5));
	
	Если ТаблицаТоваров.Колонки.Найти("ТекстДляПечатиВКолонкеКоличество") = Неопределено Тогда
		ТаблицаТоваров.Колонки.Добавить("ТекстДляПечатиВКолонкеКоличество", ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповСтроки(150));	
		ТаблицаТоваров.ЗаполнитьЗначения("", "ТекстДляПечатиВКолонкеКоличество");	
	КонецЕсли;
	
	Для каждого СтрокаТаблицы Из ТаблицаТоваров Цикл
		
		// Рассчитаем суммы в документе в валюте документа
		СтрокаТаблицы.ИзменениеСуммыСНДСВал    = СтрокаТаблицы.ИзменениеСуммы + ?(СуммаВключаетНДС, 0, СтрокаТаблицы.ИзменениеСуммыНДС);
		СтрокаТаблицы.ИзменениеСуммыНДСВал     = СтрокаТаблицы.ИзменениеСуммыНДС;
		СтрокаТаблицы.ИзменениеСуммыБезНДСВал  = СтрокаТаблицы.ИзменениеСуммыСНДСВал - СтрокаТаблицы.ИзменениеСуммыНДСВал;
		
		// Рассчитаем суммы в документе в валюте регл. учета
		Если СтруктураШапкиДокумента.ВалютаДокумента = СтруктураШапкиДокумента.ВалютаРегламентированногоУчета Тогда
			СтрокаТаблицы.ИзменениеСуммыСНДСРегл = СтрокаТаблицы.ИзменениеСуммыСНДСВал;
			СтрокаТаблицы.ИзменениеСуммыНДСРегл  = СтрокаТаблицы.ИзменениеСуммыНДСВал;
		Иначе
			СтрокаТаблицы.ИзменениеСуммыСНДСРегл = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.ИзменениеСуммыСНДСВал, 
																				СтруктураШапкиДокумента.ВалютаДокумента,
																				СтруктураШапкиДокумента.ВалютаРегламентированногоУчета, 
																				ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), 
																				1,
																				ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета),
																				1,
																				, ПогрешностиОкругления, "СуммаСНДСРегл");

			// не правильно рассчитывать НДС "от обратного" исходя из суммы СНДС уже пересчитанной в грн
			// правильно - рассчитывать от валютной суммы с учетом округления
			//СтрокаТаблицы.ИзменениеСуммыНДСРегл  = Ценообразование.РассчитатьСуммуНДСсУчетомПогрешности(СтрокаТаблицы.ИзменениеСуммыСНДСРегл,
			//																	СтруктураШапкиДокумента.УчитыватьНДС,
			//																	Истина,
			//																	СтрокаТаблицы.СтавкаНДС,
			//																	ПогрешностиОкругления);
			СтрокаТаблицы.ИзменениеСуммыНДСРегл = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.ИзменениеСуммыНДСВал, 
																				СтруктураШапкиДокумента.ВалютаДокумента,
																				СтруктураШапкиДокумента.ВалютаРегламентированногоУчета, 
																				ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), 
																				1,
																				ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета),
																				1,
																				, ПогрешностиОкругления, СтрокаТаблицы.СтавкаНДС);
		КонецЕсли;
		СтрокаТаблицы.ИзменениеСуммыБезНДСРегл = СтрокаТаблицы.ИзменениеСуммыСНДСРегл - СтрокаТаблицы.ИзменениеСуммыНДСРегл;
		
		// Поля, используемые при печати документа         
		Если НЕ СтрокаТаблицы.ИзменениеКоличества = 0 ИЛИ СтруктураШапкиДокумента.Дата >= '2015-01-01' Тогда
			Если     СтруктураШапкиДокумента.ВалютаДокумента = СтруктураШапкиДокумента.ВалютаРегламентированногоУчета 
				И НЕ СтруктураШапкиДокумента.СуммаВключаетНДС 
				И СтрокаТаблицы.СуммаСкидки = 0 Тогда
				СтрокаТаблицы.ЦенаМестаБезНДСБезСкидкиРегл = СтрокаТаблицы.Цена;
			Иначе
				
				СуммаСНДСВал    = СтрокаТаблицы.Сумма + ?(СтруктураШапкиДокумента.СуммаВключаетНДС, 0, СтрокаТаблицы.НДС);
				СуммаНДСВал     = СтрокаТаблицы.НДС;
				СуммаБезНДСВал  = СуммаСНДСВал - СуммаНДСВал;
				
				Если СтруктураШапкиДокумента.ВалютаДокумента = СтруктураШапкиДокумента.ВалютаРегламентированногоУчета Тогда
					СуммаБезНДСРегл = СуммаБезНДСВал;
				Иначе
					Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.РаботыОтНерезидентаКорректировка Тогда
						СуммаБезНДСРегл = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СуммаБезНДСВал, 
																		СтруктураШапкиДокумента.ВалютаДокумента,
																		мВалютаРегламентированногоУчета, 
																		ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), 
																		1,
																		ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета),
																		1,
																		, ПогрешностиОкругления, "СуммаБезНДСРегл");			
					    
					Иначе
						СуммаСНДСРегл = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СуммаСНДСВал, 
															СтруктураШапкиДокумента.ВалютаДокумента,
															мВалютаРегламентированногоУчета, 
															ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), 
															1,
															ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета),
															1,
															, ПогрешностиОкругления, "СуммаСНДСРегл");
													
						СуммаНДСРегл = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СуммаНДСВал, 
															СтруктураШапкиДокумента.ВалютаДокумента,
															мВалютаРегламентированногоУчета, 
															ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), 
															1,
															ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета),
															1,
															, ПогрешностиОкругления, СтрокаТаблицы.СтавкаНДС);
															
						СуммаБезНДСРегл = СуммаСНДСРегл - СуммаНДСРегл;
					КонецЕсли;				
				КонецЕсли;				
				
				СтрокаТаблицы.ЦенаМестаБезНДСБезСкидкиРегл = ?(СтрокаТаблицы.Количество = 0, СуммаБезНДСРегл, СуммаБезНДСРегл / СтрокаТаблицы.Количество);
			КонецЕсли;
		КонецЕсли;
		
		Если СтрокаТаблицы.ИзменениеЦены = 0 Тогда
			СтрокаТаблицы.ИзменениеЦеныБезНДССоСкидкойРегл = 0;
		Иначе
			СтрокаТаблицы.ИзменениеЦеныБезНДССоСкидкойРегл = СтрокаТаблицы.ИзменениеСуммыБезНДСРегл / ?(СтрокаТаблицы.Количество = 0, 1, СтрокаТаблицы.Количество);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТоварам - результат запроса по табличной части "Товары",
//  СтруктураШапкиДокумента   - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблиица значений.
//
Функция ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента, ПогрешностиОкругления)

	ТаблицаТоваров = РезультатЗапросаПоТоварам.Выгрузить();
	
	ДобавитьКолонкиТоваровРеглЛокально(ТаблицаТоваров, СтруктураШапкиДокумента, ПогрешностиОкругления);

	Возврат ТаблицаТоваров;

КонецФункции // ПодготовитьТаблицуТоваров()

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТоварам - результат запроса по табличной части "Товары",
//  СтруктураШапкиДокумента   - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблиица значений.
//
Функция ПодготовитьТаблицуУслуг(РезультатЗапросаПоУслугам, СтруктураШапкиДокумента, ПогрешностиОкругления)

	ТаблицаПоУслугам = РезультатЗапросаПоУслугам.Выгрузить();
	
	ДобавитьКолонкиТоваровРеглЛокально(ТаблицаПоУслугам, СтруктураШапкиДокумента, ПогрешностиОкругления);
	
	Если ВидОперации = Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.УсловнаяПродажаВозврат Тогда
		
		Для каждого Строка Из ТаблицаПоУслугам Цикл
		
			Строка.Количество = 0;	
			Строка.ЦенаМестаБезНДСБезСкидкиРегл = 0;
			Строка.ИзменениеКоличества = 0;
			Строка.ИзменениеЦеныБезНДССоСкидкойРегл = 0;
			Строка.ЕдиницаИзмеренияКод = "";
			Строка.ЕдиницаИзмерения = "грн";
		
		КонецЦикла;
	
	КонецЕсли;

	Возврат ТаблицаПоУслугам;

КонецФункции // ПодготовитьТаблицуТоваров()

Функция ПодготовитьТаблицуОС(РезультатЗапросаПоОС, СтруктураШапкиДокумента, ПогрешностиОкругления)

	ТаблицаПоОС = РезультатЗапросаПоОС.Выгрузить();
	
	ДобавитьКолонкиТоваровРеглЛокально(ТаблицаПоОС, СтруктураШапкиДокумента, ПогрешностиОкругления);

	Возврат ТаблицаПоОС;

КонецФункции // ПодготовитьТаблицуОС()

Функция ПодготовитьТаблицуНМА(РезультатЗапросаПоНМА, СтруктураШапкиДокумента, ПогрешностиОкругления)

	ТаблицаПоНМА = РезультатЗапросаПоНМА.Выгрузить();
	
	ДобавитьКолонкиТоваровРеглЛокально(ТаблицаПоНМА, СтруктураШапкиДокумента, ПогрешностиОкругления);

	Возврат ТаблицаПоНМА;

КонецФункции // ПодготовитьТаблицуНМА()

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТаре  - результат запроса по табличной части "ВозвратнаяТара",
//  СтруктураШапкиДокумента - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблиица значений.
//
Функция ПодготовитьТаблицуТары(РезультатЗапросаПоТаре, СтруктураШапкиДокумента, ПогрешностиОкругления)

	ТаблицаТары = РезультатЗапросаПоТаре.Выгрузить();
	
	ТаблицаТары.Колонки.Добавить("СтавкаНДС", 	  Новый ОписаниеТипов("ПеречислениеСсылка.СтавкиНДС"));
	ТаблицаТары.Колонки.Добавить("ИзменениеСуммыСНДСРегл",  ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаТары.Колонки.Добавить("ИзменениеСуммыСНДСВал" ,  ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаТары.Колонки.Добавить("ИзменениеСуммыБезНДСРегл",ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаТары.Колонки.Добавить("ИзменениеСуммаБезНДСВал", ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповЧисла(15,2));
	
	// Надо заполнить новые колонки.
	ТаблицаТары.ЗаполнитьЗначения(Перечисления.СтавкиНДС.НеНДС, "СтавкаНДС");
	
	Для каждого СтрокаТаблицы Из ТаблицаТары Цикл
		
		СтрокаТаблицы.ИзменениеСуммыСНДСВал = СтрокаТаблицы.ИзменениеСуммы;

		Если СтруктураШапкиДокумента.ВалютаДокумента = СтруктураШапкиДокумента.ВалютаРегламентированногоУчета Тогда
			СтрокаТаблицы.ИзменениеСуммыСНДСРегл = СтрокаТаблицы.ИзменениеСуммы;
		Иначе
			СтрокаТаблицы.ИзменениеСуммыСНДСРегл = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.ИзменениеСуммы, 
																				СтруктураШапкиДокумента.ВалютаДокумента,
																				СтруктураШапкиДокумента.ВалютаРегламентированногоУчета, 
																				ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), 
																				1,
																				ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета),
																				1,
																				,ПогрешностиОкругления, "СуммаСНДСРегл");

		КонецЕсли;
		
		СтрокаТаблицы.ИзменениеСуммыБезНДСРегл = СтрокаТаблицы.ИзменениеСуммыСНДСРегл;
		СтрокаТаблицы.ИзменениеСуммаБезНДСВал  = СтрокаТаблицы.ИзменениеСуммыСНДСВал;

	КонецЦикла;
	
	Возврат ТаблицаТары;

КонецФункции // ПодготовитьТаблицуТары()

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизтов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок, МассивНепроверяемыхРеквизитов)

	Если НЕ СтруктураШапкиДокумента.ЕстьНДС Тогда
		// по фирме не ведется учет НДС, проводить документ не имеет смысла
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Фирма не является плательщиком НДС!';uk='Фірма не є платником ПДВ!'"), ЭтотОбъект, "Организация","Объект", Отказ);
	КонецЕсли;

	// Укажем, что надо проверить:
	Если  ВидОперации = Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.ИтоговаяРозницаОблагаемыеОперацииВозврат
		ИЛИ ВидОперации = Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.ИтоговаяРозницаОсвобожденныеОперацииВозврат
		ИЛИ ВидОперации = Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.РозницаКонрагентуОблагаемыеОперацииВозврат
		ИЛИ ВидОперации = Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.РозницаКонрагентуОсвобожденныеОперацииВозврат 
		ИЛИ ВидОперации = Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.СводнаяНаПревышениеБазыНадЦенойПоставки
	    ИЛИ ВидОперации = Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.УсловнаяПродажаВозврат Тогда
		
		Если  ВидОперации = Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.ИтоговаяРозницаОблагаемыеОперацииВозврат
			ИЛИ ВидОперации = Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.ИтоговаяРозницаОсвобожденныеОперацииВозврат 
			ИЛИ ВидОперации = Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.СводнаяНаПревышениеБазыНадЦенойПоставки
		    ИЛИ ВидОперации = Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.УсловнаяПродажаВозврат Тогда
			
			МассивНепроверяемыхРеквизитов.Добавить("Контрагент");
			
		КонецЕсли;
		
		МассивНепроверяемыхРеквизитов.Добавить("ДоговорКонтрагента");
		МассивНепроверяемыхРеквизитов.Добавить("КурсВзаиморасчетов");
		МассивНепроверяемыхРеквизитов.Добавить("КратностьВзаиморасчетов");
		
	КонецЕсли;
	
	Если НЕ ВидОперации = Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.СводнаяНаПревышениеБазыНадЦенойПоставки Тогда					   
		МассивНепроверяемыхРеквизитов.Добавить("СчетДт");
	КонецЕсли;
	
	Если НЕ ВключаетсяВУточняющийРасчет Тогда
		МассивНепроверяемыхРеквизитов.Добавить("УточняемыйПериод");
	КонецЕсли;
	
	
	//Организация в документе должна совпадать с организацией, указанной в договоре взаиморасчетов.
	УправлениеВзаиморасчетами.ПроверитьСоответствиеОрганизацииДоговоруВзаиморасчетов(Организация, ДоговорКонтрагента, СтруктураШапкиДокумента.ДоговорОрганизация, Отказ, Заголовок);
	
КонецПроцедуры // ПроверитьЗаполнениеШапки()

// По результату запроса по шапке документа формируем движения по регистрам.
//
// Параметры: 
//  РежимПроведения           - режим проведения документа (оперативный или неоперативный),
//  СтруктураШапкиДокумента   - выборка из результата запроса по шапке документа,
//  ТаблицаПоТоварам          - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  ТаблицаПоТаре             - таблица значений, содержащая данные для проведения и проверки ТЧ "Возвратная тара",
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, 
	                          ТаблицаПоТоварам, ТаблицаПоТаре, ТаблицаПоУслугам, ТаблицаПоОС, ТаблицаПоНМА,
							  Отказ, Заголовок)

	Если  СтруктураШапкиДокумента.СуммаНДСДокумента < 0
		И НЕ СтруктураШапкиДокумента.ОтражатьВУчетеБезРегистрации
		И СтруктураШапкиДокумента.Дата >= '2015-07-01'
		И СтруктураШапкиДокумента.ДатаВключенияВЕдиныйРеестрНалоговыхНакладных = '0001-01-01' Тогда
		
		ДвиженияПоРегиструОжидаемыйИПодтвержденныйНДСПродаж(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоТаре, ТаблицаПоУслугам, ТаблицаПоОС, ТаблицаПоНМА, Отказ, Истина);
		
		//ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Не указана дата регистрации документа в ЕРНН покупателем! Проводки не сформированы.';uk='Не зазначена дата реєстрації документа в ЄРПН покупцем! Проводки не сформовані.'"), ЭтотОбъект, "ДатаВключенияВЕдиныйРеестрНалоговыхНакладных","Объект");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Не указана дата регистрации документа в ЕРНН покупателем! Проводки сформированы частично.';uk='Не зазначена дата реєстрації документа в ЄРПН покупцем! Проводки cформовані частково.'"), ЭтотОбъект, "ДатаВключенияВЕдиныйРеестрНалоговыхНакладных","Объект");
		
	Иначе
	
		ПроводкиПоНДС(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоУслугам, ТаблицаПоТаре, ТаблицаПоОС, ТаблицаПоНМА, Отказ);
	     
		ДвиженияПоРегиструОжидаемыйИПодтвержденныйНДСПродаж(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоТаре, ТаблицаПоУслугам, ТаблицаПоОС, ТаблицаПоНМА, Отказ);
	
		ДвиженияПоРегиструНДСНалоговыеОбязательства(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоТаре, ТаблицаПоУслугам, ТаблицаПоОС, ТаблицаПоНМА, Отказ);
	
	КонецЕсли;							  
	
КонецПроцедуры // ДвиженияПоРегистрам()

Процедура ПроводкиПоНДС(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоУслугам, ТаблицаПоТаре, ТаблицаПоОС, ТаблицаПоНМА, Отказ)
	
	Если ВидОперации <> Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.ОблагаемыеОперацииВозврат
	   И ВидОперации <> Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.ОблагаемыеОперацииКорректировка 
	   И ВидОперации <> Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.ИтоговаяРозницаОблагаемыеОперацииВозврат 
	   И ВидОперации <> Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.РозницаКонрагентуОблагаемыеОперацииВозврат 
	   И ВидОперации <> Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.РаботыОтНерезидентаКорректировка 
	   И ВидОперации <> Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.СводнаяНаПревышениеБазыНадЦенойПоставки
	   И ВидОперации <> Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.УсловнаяПродажаВозврат Тогда
		// По освобожденным от НДС операциям проводки не формируются
		Возврат
	КонецЕсли;
	
	ПроводкиБУ = Движения.Хозрасчетный;

	// ТОВАРЫ
	ТаблицаКопия = ТаблицаПоТоварам.Скопировать();
	ТаблицаКопия.Свернуть("СчетУчетаНДС, СтавкаНДС", "ИзменениеСуммыНДСРегл"); // ИНАГРО
	ТаблицаДвижений = ТаблицаКопия.Скопировать();
	
	// УСЛУГИ
	ТаблицаКопия = ТаблицаПоУслугам.Скопировать();
	ТаблицаКопия.Свернуть("СчетУчетаНДС, СтавкаНДС", "ИзменениеСуммыНДСРегл"); // ИНАГРО
	ОбщегоНазначенияБПВызовСервера.ЗагрузитьВТаблицуЗначений(ТаблицаКопия, ТаблицаДвижений);
	
	// ОС
	ТаблицаКопия = ТаблицаПоОС.Скопировать();
	ТаблицаКопия.Свернуть("СчетУчетаНДС, СтавкаНДС", "ИзменениеСуммыНДСРегл"); // ИНАГРО
	ОбщегоНазначенияБПВызовСервера.ЗагрузитьВТаблицуЗначений(ТаблицаКопия, ТаблицаДвижений);
	
	// НМА
	ТаблицаКопия = ТаблицаПоНМА.Скопировать();
	ТаблицаКопия.Свернуть("СчетУчетаНДС, СтавкаНДС", "ИзменениеСуммыНДСРегл"); // ИНАГРО
	ОбщегоНазначенияБПВызовСервера.ЗагрузитьВТаблицуЗначений(ТаблицаКопия, ТаблицаДвижений);
	
	
	ТаблицаДвижений.Свернуть("СчетУчетаНДС, СтавкаНДС", "ИзменениеСуммыНДСРегл"); // ИНАГРО
	
	Для Каждого СтрокаТаблицы Из ТаблицаДвижений Цикл
		
		Если    СтрокаТаблицы.ИзменениеСуммыНДСРегл <> 0 Тогда
			
			Проводка = ПроводкиБУ.Добавить();

			//Проводка.Период                     = СтруктураШапкиДокумента.Дата;
			Проводка.Период                     = СтруктураШапкиДокумента.ПериодДвижений;
			
			Проводка.Активность                 = Истина;
			Проводка.Организация                = СтруктураШапкиДокумента.Организация;
			Проводка.Сумма                      = СтрокаТаблицы.ИзменениеСуммыНДСРегл;
			Проводка.Содержание                 = НСтр("ru='НДС: налоговый кредит: корректировка (Приложение 2)';uk='ПДВ: податковий кредит: коригування (Додаток 2)'",Локализация.КодЯзыкаИнформационнойБазы());
			Проводка.НомерЖурнала               = "";
			
			Если НЕ ВидОперации = Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.СводнаяНаПревышениеБазыНадЦенойПоставки Тогда
				Проводка.СчетДт                     = СтрокаТаблицы.СчетУчетаНДС;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты", СтруктураШапкиДокумента.Контрагент);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Договоры"   , СтруктураШапкиДокумента.ДоговорКонтрагента);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ДокументыРасчетовСКонтрагентами", ОпределитьСделкуЛокально());
			Иначе	
				Проводка.СчетДт                     = СтруктураШапкиДокумента.СчетДт;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтруктураШапкиДокумента.СубконтоДт1);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, СтруктураШапкиДокумента.СубконтоДт2);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, СтруктураШапкиДокумента.СубконтоДт3);
			КонецЕсли;

			Проводка.СчетКт                     = СтруктураШапкиДокумента.СчетНДС;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, СубконтоКт1);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, СубконтоКт2);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3, СубконтоКт3);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "СтавкиНДС", СтрокаТаблицы.СтавкаНДС); // ИНАГРО
			
		КонецЕсли;

	КонецЦикла;
	
КонецПроцедуры

Процедура ДвиженияПоРегиструОжидаемыйИПодтвержденныйНДСПродаж(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоТаре, ТаблицаПоУслугам, ТаблицаПоОС, ТаблицаПоНМА, Отказ, ЧастичноеПроведение = Ложь)
	
	Если ВидОперации = Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.РаботыОтНерезидентаКорректировка
		ИЛИ ВидОперации = Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.СводнаяНаПревышениеБазыНадЦенойПоставки Тогда 
		Возврат;
	КонецЕсли;
	
	НаборДвижений = Движения.ОжидаемыйИПодтвержденныйНДСПродаж;
	
	// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
	ТаблицаДвижений = НаборДвижений.ВыгрузитьКолонки();
	
	ТаблицаДвиженийТара 	  = ТаблицаДвижений.Скопировать();
	ТаблицаДвиженийОплата 	  = ТаблицаДвижений.Скопировать();
	
	
	// ТОВАРЫ
	ТаблицаКопия = ТаблицаПоТоварам.Скопировать();
	ТаблицаКопия.Свернуть("СтавкаНДС","ИзменениеСуммыБезНДСВал,ИзменениеСуммыНДСВал");
	ТаблицаПродаж = ТаблицаКопия.Скопировать();
	
	// УСЛУГИ
	ТаблицаКопия = ТаблицаПоУслугам.Скопировать();
	ТаблицаКопия.Свернуть("СтавкаНДС","ИзменениеСуммыБезНДСВал,ИзменениеСуммыНДСВал");
	ОбщегоНазначенияБПВызовСервера.ЗагрузитьВТаблицуЗначений(ТаблицаКопия, ТаблицаПродаж);
	
	// ОС
	ТаблицаКопия = ТаблицаПоОС.Скопировать();
	ТаблицаКопия.Свернуть("СтавкаНДС","ИзменениеСуммыБезНДСВал,ИзменениеСуммыНДСВал");
	ОбщегоНазначенияБПВызовСервера.ЗагрузитьВТаблицуЗначений(ТаблицаКопия, ТаблицаПродаж);

	// НМА
	ТаблицаКопия = ТаблицаПоНМА.Скопировать();
	ТаблицаКопия.Свернуть("СтавкаНДС","ИзменениеСуммыБезНДСВал,ИзменениеСуммыНДСВал");
	ОбщегоНазначенияБПВызовСервера.ЗагрузитьВТаблицуЗначений(ТаблицаКопия, ТаблицаПродаж);

	ТаблицаПродаж.Свернуть("СтавкаНДС","ИзменениеСуммыБезНДСВал,ИзменениеСуммыНДСВал");
	ТаблицаПродаж.Колонки.ИзменениеСуммыБезНДСВал.Имя = "БазаНДС";
	ТаблицаПродаж.Колонки.ИзменениеСуммыНДСВал   .Имя = "СуммаНДС";
	ОбщегоНазначенияБПВызовСервера.ЗагрузитьВТаблицуЗначений(ТаблицаПродаж, ТаблицаДвижений);
	ТаблицаДвижений.ЗаполнитьЗначения(Организация       , "Организация");
	ТаблицаДвижений.ЗаполнитьЗначения(ДоговорКонтрагента, "ДоговорКонтрагента");
	ТаблицаДвижений.ЗаполнитьЗначения(ОпределитьСделкуЛокально(), "Сделка");
	
	Если ЭтоВозврат(СтруктураШапкиДокумента.ВидОперации) Тогда
		//возврат
		
		Если  ВидОперации = Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.ИтоговаяРозницаОблагаемыеОперацииВозврат
		  ИЛИ ВидОперации = Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.ИтоговаяРозницаОсвобожденныеОперацииВозврат
		  ИЛИ ВидОперации = Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.РозницаКонрагентуОблагаемыеОперацииВозврат
		  ИЛИ ВидОперации = Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.РозницаКонрагентуОсвобожденныеОперацииВозврат Тогда
		  
		  	СобытиеНДС = Перечисления.СобытияОжидаемыйИПодтвержденныйНДСПродаж.ВозвратРозница;
			
		ИначеЕсли СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.УсловнаяПродажаВозврат Тогда
			
			СобытиеНДС = Перечисления.СобытияОжидаемыйИПодтвержденныйНДСПродаж.УсловнаяПродажаВозврат;	
		
		Иначе
			
		  	СобытиеНДС = Перечисления.СобытияОжидаемыйИПодтвержденныйНДСПродаж.Возврат;
			
		КонецЕсли;		
		
		ТаблицаДвижений.ЗаполнитьЗначения(СобытиеНДС, "СобытиеНДС");
		
		//инвертируем суммы
		Для Каждого Строка Из ТаблицаДвижений Цикл
			Строка.БазаНДС 					= -Строка.БазаНДС;
			Строка.СуммаНДС 				= -Строка.СуммаНДС;
		КонецЦикла;
		
	Иначе
		
		Если СтруктураШапкиДокумента.НалоговаяНакладная.ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.УсловнаяПродажа Тогда
			СобытиеНДС = Перечисления.СобытияОжидаемыйИПодтвержденныйНДСПродаж.УсловнаяПродажа;
		Иначе
			СобытиеНДС = Перечисления.СобытияОжидаемыйИПодтвержденныйНДСПродаж.Реализация;
		КонецЕсли;
		
		// корректировка сумм НДС
		ТаблицаДвижений.ЗаполнитьЗначения(СобытиеНДС, "СобытиеНДС");
		
	КонецЕсли;
	
	ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.КодыОперацийОжидаемыйИПодтвержденныйНДСПродаж.ПодтвержденныйНДС, "КодОперации");
	
	// ТАРА
	ТаблицаКопия = ТаблицаПоТаре.Скопировать();
	ТаблицаКопия.Свернуть("СтавкаНДС","ИзменениеСуммыСНДСВал");
	ТаблицаКопия.Колонки.ИзменениеСуммыСНДСВал.Имя = "БазаНДС";
	ОбщегоНазначенияБПВызовСервера.ЗагрузитьВТаблицуЗначений(ТаблицаКопия, ТаблицаДвиженийТара);
	ТаблицаДвиженийТара.ЗаполнитьЗначения(Организация       , "Организация");
	ТаблицаДвиженийТара.ЗаполнитьЗначения(ДоговорКонтрагента, "ДоговорКонтрагента");
	ТаблицаДвиженийТара.ЗаполнитьЗначения(Истина            , "ВозвратнаяТара");
	ТаблицаДвижений.ЗаполнитьЗначения(ОпределитьСделкуЛокально(), "Сделка");
	
	Если ЭтоВозврат(СтруктураШапкиДокумента.ВидОперации) Тогда
		ТаблицаДвиженийТара.ЗаполнитьЗначения(Перечисления.СобытияОжидаемыйИПодтвержденныйНДСПродаж.Возврат, "СобытиеНДС");
		
		//инвертируем суммы
		Для Каждого Строка Из ТаблицаДвиженийТара Цикл
			Строка.БазаНДС 	= -Строка.БазаНДС;
		КонецЦикла;
	Иначе
		ТаблицаДвиженийТара.ЗаполнитьЗначения(Перечисления.СобытияОжидаемыйИПодтвержденныйНДСПродаж.Реализация, "СобытиеНДС");
	КонецЕсли;
	
	ТаблицаДвиженийТара.ЗаполнитьЗначения(Перечисления.КодыОперацийОжидаемыйИПодтвержденныйНДСПродаж.ПодтвержденныйНДС, "КодОперации");
	
	Если НЕ Отказ И ТаблицаДвижений.Количество() > 0 Тогда
		
		//НаборДвижений.мПериод = Дата;
		НаборДвижений.мПериод = СтруктураШапкиДокумента.ПериодДвижений;
		НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;
	
		Движения.ОжидаемыйИПодтвержденныйНДСПродаж.ВыполнитьРасход();
		Движения.ОжидаемыйИПодтвержденныйНДСПродаж.Записать();
		
	КонецЕсли;
	
	Если НЕ Отказ И ТаблицаДвиженийТара.Количество() > 0 Тогда
		
		//НаборДвижений.мПериод = Дата;
		НаборДвижений.мПериод = СтруктураШапкиДокумента.ПериодДвижений;
		НаборДвижений.мТаблицаДвижений = ТаблицаДвиженийТара;
	
		Движения.ОжидаемыйИПодтвержденныйНДСПродаж.ВыполнитьРасход();
		Движения.ОжидаемыйИПодтвержденныйНДСПродаж.Записать();
		
	КонецЕсли;
	
КонецПроцедуры // ДвиженияПоРегиструОжидаемыйИПодтвержденныйНДСПродаж()							  

Процедура ДвиженияПоРегиструНДСНалоговыеОбязательства(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоТаре, ТаблицаПоУслугам, ТаблицаПоОС, ТаблицаПоНМА, Отказ)
	
	//	// такие операции не отражаются в Книге продаж
	
	НаборДвижений = Движения.НДСНалоговыеОбязательства;
	
	// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
	ТаблицаДвижений = НаборДвижений.ВыгрузитьКолонки();
	
	// ТОВАРЫ
	ТаблицаКопия = ТаблицаПоТоварам.Скопировать();
    ТаблицаКопия.Свернуть("СтавкаНДС, СтатьяДекларацииНДСНалоговыеОбязательства", "ИзменениеСуммыБезНДСРегл, ИзменениеСуммыНДСРегл");
	ТаблицаКопия.Колонки.ИзменениеСуммыБезНДСРегл.Имя = "БазаНДС";
	ТаблицаКопия.Колонки.ИзменениеСуммыНДСРегл	 .Имя = "НДС";
	ОбщегоНазначенияБПВызовСервера.ЗагрузитьВТаблицуЗначений(ТаблицаКопия, ТаблицаДвижений);
	
	// УСЛУГИ
	ТаблицаКопия = ТаблицаПоУслугам.Скопировать();
    ТаблицаКопия.Свернуть("СтавкаНДС, СтатьяДекларацииНДСНалоговыеОбязательства", "ИзменениеСуммыБезНДСРегл, ИзменениеСуммыНДСРегл");
	ТаблицаКопия.Колонки.ИзменениеСуммыБезНДСРегл.Имя = "БазаНДС";
	ТаблицаКопия.Колонки.ИзменениеСуммыНДСРегл	 .Имя = "НДС";
	ОбщегоНазначенияБПВызовСервера.ЗагрузитьВТаблицуЗначений(ТаблицаКопия, ТаблицаДвижений);
	
	// ОС
	ТаблицаКопия = ТаблицаПоОС.Скопировать();
    ТаблицаКопия.Свернуть("СтавкаНДС, СтатьяДекларацииНДСНалоговыеОбязательства", "ИзменениеСуммыБезНДСРегл, ИзменениеСуммыНДСРегл");
	ТаблицаКопия.Колонки.ИзменениеСуммыБезНДСРегл.Имя = "БазаНДС";
	ТаблицаКопия.Колонки.ИзменениеСуммыНДСРегл	 .Имя = "НДС";
	ОбщегоНазначенияБПВызовСервера.ЗагрузитьВТаблицуЗначений(ТаблицаКопия, ТаблицаДвижений);
	
	// НМА
	ТаблицаКопия = ТаблицаПоНМА.Скопировать();
    ТаблицаКопия.Свернуть("СтавкаНДС, СтатьяДекларацииНДСНалоговыеОбязательства", "ИзменениеСуммыБезНДСРегл, ИзменениеСуммыНДСРегл");
	ТаблицаКопия.Колонки.ИзменениеСуммыБезНДСРегл.Имя = "БазаНДС";
	ТаблицаКопия.Колонки.ИзменениеСуммыНДСРегл	 .Имя = "НДС";
	ОбщегоНазначенияБПВызовСервера.ЗагрузитьВТаблицуЗначений(ТаблицаКопия, ТаблицаДвижений);
	
	ТаблицаДвижений.ЗаполнитьЗначения(Организация       , "Организация");
	ТаблицаДвижений.ЗаполнитьЗначения(ДоговорКонтрагента, "ДоговорКонтрагента");
	
	Если ВидОперации = Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.СводнаяНаПревышениеБазыНадЦенойПоставки Тогда
		ТаблицаДвижений.ЗаполнитьЗначения(Истина, "ПродажаНижеОбычнойЦены");
	КонецЕсли;
	
	Если НЕ Отказ И ТаблицаДвижений.Количество() > 0 Тогда
		
		//НаборДвижений.мПериод = Дата;
		НаборДвижений.мПериод = СтруктураШапкиДокумента.ПериодДвижений;
		НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;
		
		Движения.НДСНалоговыеОбязательства.ДобавитьДвижение();
	
	КонецЕсли;
	
КонецПроцедуры

Функция ПодготовитьСтруктуруШапкиДокумента(Отказ, Заголовок = "")  Экспорт
	// Дерево значений, содержащее имена необходимых полей в запросе по шапке.
	Перем ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента;

	СтруктураШапкиДокумента = ОбщегоНазначенияРед12.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);


	ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДоговорКонтрагента, "Организация,ВидДоговора,ВедениеВзаиморасчетов,ВедениеВзаиморасчетовНУ,СложныйНалоговыйУчет");
	СтруктураШапкиДокумента.Вставить("ДоговорОрганизация",     ЗначенияРеквизитов.Организация);
	СтруктураШапкиДокумента.Вставить("ВидДоговора",            ЗначенияРеквизитов.ВидДоговора);
	СтруктураШапкиДокумента.Вставить("ВедениеВзаиморасчетов",  ЗначенияРеквизитов.ВедениеВзаиморасчетов);
	СтруктураШапкиДокумента.Вставить("ВедениеВзаиморасчетовНУ",ЗначенияРеквизитов.ВедениеВзаиморасчетовНУ);
	СтруктураШапкиДокумента.Вставить("СложныйНалоговыйУчет",   ЗначенияРеквизитов.СложныйНалоговыйУчет);
	
	// дополним структуру значением виртуального реквизита
	СтруктураШапкиДокумента.Вставить("ОтражатьВНалоговомУчете", Истина);
	
	
	// Организация не заполнена, получать учетную политику нет смысла
	Если Отказ Тогда
		Возврат СтруктураШапкиДокумента;
	КонецЕсли;
	
	СтруктураШапкиДокумента.Вставить("ЕстьНДС", УчетнаяПолитика.ПлательщикНДС(СтруктураШапкиДокумента.Организация, СтруктураШапкиДокумента.Дата));
	
	СтруктураШапкиДокумента.Вставить("ПериодДвижений",
		?(СтруктураШапкиДокумента.СуммаНДСДокумента < 0 И СтруктураШапкиДокумента.Дата >= '2015-07-01' И ЗначениеЗаполнено(СтруктураШапкиДокумента.ДатаВключенияВЕдиныйРеестрНалоговыхНакладных),
			СтруктураШапкиДокумента.ДатаВключенияВЕдиныйРеестрНалоговыхНакладных, СтруктураШапкиДокумента.Дата));
	
	Возврат СтруктураШапкиДокумента;
	
КонецФункции

Процедура ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоТаре, ТаблицаПоУслугам, ТаблицаПоОС, ТаблицаПоНМА) Экспорт
	
	ПогрешностиОкругления     = Новый Соответствие;
	ПогрешностиОкругленияТара = Новый Соответствие;
	
	// ТОВАРЫ
	// Получим необходимые для проведения и проверки заполнения данные по табличной части "Товары".
	СтруктураПолей        = Новый Структура();
    СтруктураПростыхПолей = Новый Структура();
	СтруктураСложныхПолей = Новый Структура();
	
	СтруктураПолей.Вставить("Номенклатура"              , "Номенклатура.НаименованиеПолное");
	СтруктураПолей.Вставить("КодУКТВЭД"              	, "КодУКТВЭД");
	СтруктураПолей.Вставить("КодВид"              	    , "КодУКТВЭД.Вид");
	СтруктураПолей.Вставить("КодСХ"              	    , "КодУКТВЭД.КодСХДеятельности");
	
	СтруктураПолей.Вставить("НомерГТД"              	, "НомерГТД.Код");
	СтруктураПолей.Вставить("ДатаГТД"              	    , "НомерГТД.Дата");
	СтруктураПолей.Вставить("ЕдиницаИзмерения"   		, "ЕдиницаИзмерения.Наименование");
	СтруктураПолей.Вставить("ЕдиницаИзмеренияКод"          , "ЕдиницаИзмерения.Код");
	СтруктураПолей.Вставить("Количество"            	, "Количество");
	СтруктураПолей.Вставить("ИзменениеКоличества"       , "ИзменениеКоличества");	
	СтруктураПолей.Вставить("ИзменениеЦены"             , "ИзменениеЦены");
	СтруктураПолей.Вставить("ИзменениеСуммы"         	, "ИзменениеСуммы");	
	СтруктураПолей.Вставить("ИзменениеСуммыНДС"         , "ИзменениеСуммыНДС");	
	СтруктураПолей.Вставить("Причина"                 	, "Причина");	
	СтруктураПолей.Вставить("СтавкаНДС"                 , "СтавкаНДС");
	СтруктураПолей.Вставить("ДатаКорректировки"  		, "ДатаКорректировки");
	СтруктураПолей.Вставить("СтатьяДекларацииНДСНалоговыеОбязательства"  		, "СтатьяДекларацииНДСНалоговыеОбязательства");
	СтруктураПолей.Вставить("СчетУчетаНДС"    	, "Ссылка.СчетУчетаНДС");
	СтруктураПолей.Вставить("ТекстДляПечатиВКолонкеКоличество", "Номенклатура.ТекстДляПечатиВКолонкеКоличествоНалоговойНакладной");
	СтруктураПолей.Вставить("СуммаСкидки", "СуммаСкидки");	
	СтруктураПолей.Вставить("Цена", "Цена");	
	СтруктураПолей.Вставить("Сумма", "Сумма");	
	СтруктураПолей.Вставить("НДС", "СуммаНДС");	
	СтруктураПолей.Вставить("КодЛьготы"          	 , "Номенклатура.КодЛьготы");
	СтруктураПолей.Вставить("НомерСтрокиНН"          , "НомерСтрокиНН");
	СтруктураПолей.Вставить("НомерГруппыКорректировки" , "НомерГруппы");
	СтруктураПолей.Вставить("КодПричиныКорректировки"  , "КодПричины");
	
	РезультатЗапросаПоТоварам = ОбщегоНазначенияРед12.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураПолей, СтруктураПростыхПолей, СтруктураСложныхПолей);

	// Подготовим таблицу товаров для проведения.
	ТаблицаПоТоварам = ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента, ПогрешностиОкругления);

	// УСЛУГИ
	// Получим необходимые для проведения и проверки заполнения данные 
	// по табличной части "Услуги".
	СтруктураПолей        = Новый Структура();
	СтруктураПростыхПолей = Новый Структура();
	СтруктураСложныхПолей = Новый Структура();
	
	СтруктураПолей.Вставить("Номенклатура"              , "Содержание");
	//СтруктураПростыхПолей.Вставить("КодУКТВЭД"  		, "");
	СтруктураПолей.Вставить("КодУКТВЭД"					, "КодУКТВЭД");
	СтруктураПолей.Вставить("КодВид"              	    , "КодУКТВЭД.Вид");
	СтруктураПростыхПолей.Вставить("КодСХ"				, "");
	
	СтруктураПростыхПолей.Вставить("НомерГТД"  		    , "");
	СтруктураПростыхПолей.Вставить("ДатаГТД"  		    , "");
	СтруктураПолей.Вставить("ЕдиницаИзмерения"          , "Номенклатура.БазоваяЕдиницаИзмерения.Наименование");
	СтруктураПолей.Вставить("ЕдиницаИзмеренияКод"          , "Номенклатура.БазоваяЕдиницаИзмерения.Код");
	СтруктураПолей.Вставить("Количество"            	, "Количество");
	СтруктураПолей.Вставить("ИзменениеКоличества"       , "ИзменениеКоличества");	
	СтруктураПолей.Вставить("ИзменениеЦены"             , "ИзменениеЦены");
	СтруктураПолей.Вставить("ИзменениеСуммы"         	, "ИзменениеСуммы");	
	СтруктураПолей.Вставить("ИзменениеСуммыНДС"         , "ИзменениеСуммыНДС");	
	СтруктураПолей.Вставить("Причина"                 	, "Причина");	
	СтруктураПолей.Вставить("СтавкаНДС"                 , "СтавкаНДС");
	СтруктураПолей.Вставить("ДатаКорректировки"  		, "ДатаКорректировки");
	СтруктураПолей.Вставить("СтатьяДекларацииНДСНалоговыеОбязательства"  		, "СтатьяДекларацииНДСНалоговыеОбязательства");
	СтруктураПолей.Вставить("СчетУчетаНДС"    	, "Ссылка.СчетУчетаНДС");
	СтруктураПолей.Вставить("ТекстДляПечатиВКолонкеКоличество", "Номенклатура.ТекстДляПечатиВКолонкеКоличествоНалоговойНакладной");
	СтруктураПолей.Вставить("СуммаСкидки", "СуммаСкидки");	
	СтруктураПолей.Вставить("Цена", "Цена");	
	СтруктураПолей.Вставить("Сумма", "Сумма");	
	СтруктураПолей.Вставить("НДС", "СуммаНДС");	
	СтруктураПолей.Вставить("КодЛьготы"          , "Номенклатура.КодЛьготы");
	СтруктураПолей.Вставить("НомерСтрокиНН"      , "НомерСтрокиНН");
	СтруктураПолей.Вставить("НомерГруппыКорректировки" , "НомерГруппы");
	СтруктураПолей.Вставить("КодПричиныКорректировки"  , "КодПричины");

	РезультатЗапросаПоУслугам = ОбщегоНазначенияРед12.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Услуги", СтруктураПолей, СтруктураПростыхПолей, СтруктураСложныхПолей);
	
	// Подготовим таблицу Услуг для проведения или печати
	ТаблицаПоУслугам = ПодготовитьТаблицуУслуг(РезультатЗапросаПоУслугам, СтруктураШапкиДокумента, ПогрешностиОкругления);

	
	// ОСНОВНЫЕ СРЕДСТВА
	// Получим необходимые для проведения и проверки заполнения данные 
	// по табличной части "ОС".
	СтруктураПолей        = Новый Структура();
	СтруктураПростыхПолей = Новый Структура();
	СтруктураСложныхПолей = Новый Структура();
	
	СтруктураПолей.Вставить("Номенклатура"              , "ОсновноеСредство.НаименованиеПолное");
	СтруктураПолей.Вставить("КодУКТВЭД"              	, "КодУКТВЭД");
	СтруктураПолей.Вставить("КодВид"              	    , "КодУКТВЭД.Вид");
	СтруктураПростыхПолей.Вставить("КодСХ"				, "");
	
	СтруктураПолей.Вставить("НомерГТД"              	, "НомерГТД.Код");
	СтруктураПолей.Вставить("ДатаГТД"              	    , "НомерГТД.Дата");
    СтруктураПростыхПолей.Вставить("ЕдиницаИзмерения", "шт");
	СтруктураПростыхПолей.Вставить("ЕдиницаИзмеренияКод", "2009");
	СтруктураПростыхПолей.Вставить("Количество"  , 1);	
	СтруктураПолей.Вставить("ИзменениеКоличества"       , "ИзменениеКоличества");	
	СтруктураПолей.Вставить("ИзменениеЦены"             , "ИзменениеЦены");
	СтруктураПолей.Вставить("ИзменениеСуммы"         	, "ИзменениеСуммы");	
	СтруктураПолей.Вставить("ИзменениеСуммыНДС"         , "ИзменениеСуммыНДС");	
	СтруктураПолей.Вставить("Причина"                 	, "Причина");	
	СтруктураПолей.Вставить("СтавкаНДС"                 , "СтавкаНДС");
	СтруктураПолей.Вставить("ДатаКорректировки"  		, "ДатаКорректировки");
	СтруктураПолей.Вставить("СтатьяДекларацииНДСНалоговыеОбязательства"  		, "СтатьяДекларацииНДСНалоговыеОбязательства");
	СтруктураПолей.Вставить("СчетУчетаНДС"    	, "Ссылка.СчетУчетаНДС");
	СтруктураПростыхПолей.Вставить("СуммаСкидки", 0);	
	СтруктураПолей.Вставить("Цена", "Сумма");	
	СтруктураПолей.Вставить("Сумма", "Сумма");	
	СтруктураПолей.Вставить("НДС", "СуммаНДС");	
	СтруктураПростыхПолей.Вставить("КодЛьготы", "");
	СтруктураПолей.Вставить("НомерСтрокиНН"    	, "НомерСтрокиНН");
	СтруктураПолей.Вставить("НомерГруппыКорректировки" , "НомерГруппы");
	СтруктураПолей.Вставить("КодПричиныКорректировки"  , "КодПричины");
		
	РезультатЗапросаПоОС = ОбщегоНазначенияРед12.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "ОС", СтруктураПолей, СтруктураПростыхПолей, СтруктураСложныхПолей);
	
	// Подготовим таблицу Основных Средств для проведения или печати
	ТаблицаПоОС = ПодготовитьТаблицуОС(РезультатЗапросаПоОС, СтруктураШапкиДокумента, ПогрешностиОкругления);

	// НЕМАТЕРИАЛЬНЫЕ АКТИВЫ
	// Получим необходимые для проведения и проверки заполнения данные 
	// по табличной части "НМА".
	СтруктураПолей        = Новый Структура();
	СтруктураПростыхПолей = Новый Структура();
	СтруктураСложныхПолей = Новый Структура();
	
	СтруктураПолей.Вставить("Номенклатура"              , "НематериальныйАктив.НаименованиеПолное");
	СтруктураПолей.Вставить("КодУКТВЭД"              	, "КодУКТВЭД");
	СтруктураПолей.Вставить("КодВид"              	    , "КодУКТВЭД.Вид");
	СтруктураПростыхПолей.Вставить("КодСХ"				, "");
	СтруктураПолей.Вставить("НомерГТД"              	, "НомерГТД.Код");
	СтруктураПолей.Вставить("ДатаГТД"              	    , "НомерГТД.Дата");
	СтруктураПростыхПолей.Вставить("ЕдиницаИзмерения", "шт");
	СтруктураПростыхПолей.Вставить("ЕдиницаИзмеренияКод" , "2009");
	СтруктураПростыхПолей.Вставить("Количество"  , 1);	
	СтруктураПолей.Вставить("ИзменениеКоличества"       , "ИзменениеКоличества");	
	СтруктураПолей.Вставить("ИзменениеЦены"             , "ИзменениеЦены");
	СтруктураПолей.Вставить("ИзменениеСуммы"         	, "ИзменениеСуммы");	
	СтруктураПолей.Вставить("ИзменениеСуммыНДС"         , "ИзменениеСуммыНДС");	
	СтруктураПолей.Вставить("Причина"                 	, "Причина");	
	СтруктураПолей.Вставить("СтавкаНДС"                 , "СтавкаНДС");
	СтруктураПолей.Вставить("ДатаКорректировки"  		, "ДатаКорректировки");
	СтруктураПолей.Вставить("СтатьяДекларацииНДСНалоговыеОбязательства"  		, "СтатьяДекларацииНДСНалоговыеОбязательства");
	СтруктураПолей.Вставить("СчетУчетаНДС"    	, "Ссылка.СчетУчетаНДС");
	СтруктураПростыхПолей.Вставить("СуммаСкидки"  , 0);	
	СтруктураПолей.Вставить("Цена", "Сумма");	
	СтруктураПолей.Вставить("Сумма", "Сумма");	
	СтруктураПолей.Вставить("НДС", "СуммаНДС");	
	СтруктураПростыхПолей.Вставить("КодЛьготы", "");
	СтруктураПолей.Вставить("НомерСтрокиНН"    	, "НомерСтрокиНН");
	СтруктураПолей.Вставить("НомерГруппыКорректировки" , "НомерГруппы");
	СтруктураПолей.Вставить("КодПричиныКорректировки"  , "КодПричины");
		
	РезультатЗапросаПоНМА = ОбщегоНазначенияРед12.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "НМА", СтруктураПолей, СтруктураПростыхПолей, СтруктураСложныхПолей);
	
	// Подготовим таблицу Нематериальных активов для проведения или печати
	ТаблицаПоНМА = ПодготовитьТаблицуНМА(РезультатЗапросаПоНМА, СтруктураШапкиДокумента, ПогрешностиОкругления);

	// ТАРА
	// Получим необходимые для проведения и проверки заполнения данные 
	// по табличной части "ВозвратнаяТара".
	СтруктураПолей        = Новый Структура();
	СтруктураПростыхПолей = Новый Структура();
	СтруктураСложныхПолей = Новый Структура();	
	
	СтруктураПолей.Вставить("ИзменениеСуммы"         	, "ИзменениеСуммы");
	СтруктураПростыхПолей.Вставить("СчетУчетаНДС"  , ПланыСчетов.Хозрасчетный.ПустаяСсылка());

	РезультатЗапросаПоТаре = ОбщегоНазначенияРед12.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "ВозвратнаяТара", СтруктураПолей, СтруктураПростыхПолей, СтруктураСложныхПолей);

	// Подготовим таблицу тары для проведения или печати.
	ТаблицаПоТаре = ПодготовитьТаблицуТары(РезультатЗапросаПоТаре, СтруктураШапкиДокумента, ПогрешностиОкругленияТара);
	
КонецПроцедуры

#КонецОбласти 

мВалютаРегламентированногоУчета   = Константы.ВалютаРегламентированногоУчета.Получить();
#КонецЕсли