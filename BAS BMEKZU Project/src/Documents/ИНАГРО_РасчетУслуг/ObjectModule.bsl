#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
Перем мВалютаРегламентированногоУчета;
Перем мСписокСкладов;

#Область ОбработчикиСобытий

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	ТипДанныхЗаполнения = ТипЗнч(ДанныеЗаполнения);
	Если ДанныеЗаполнения <> Неопределено И ТипДанныхЗаполнения <> Тип("Структура")
		И Метаданные().ВводитсяНаОсновании.Содержит(ДанныеЗаполнения.Метаданные()) Тогда
		ЗаполнитьПоДокументуОснованию(ДанныеЗаполнения);
	КонецЕсли;
	
	ИНАГРО_ЭлеваторЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект);

	ЗаполнениеДокументов.Заполнить(ЭтотОбъект, ДанныеЗаполнения);
		
	 Если ЗначениеЗаполнено(Организация)
		И ЗначениеЗаполнено(Контрагент)
		И ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
		Документы.ИНАГРО_РасчетУслуг.ЗаполнитьСчетаУчетаРасчетов(ЭтотОбъект);
	КонецЕсли;
		
	ДатаОкончания   = Дата;
	КодФормирования = Перечисления.ИНАГРО_КодФормирования.Общий; //
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;		
	КонецЕсли;	
		
	Если Проведен И РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		ЭтотОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения)
	КонецЕсли;
	
	// Если договор с комиссионером, то надо почистить закладку "Услуги".
	Если Услуги.Количество() > 0
		И ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
		Услуги.Очистить();
	КонецЕсли;
	
	Если АвторасчетНДС Тогда
		// соответствие для хранения погрешностей округлений
		ПогрешностиОкругления = Новый Соответствие();		
		// пересчет сумм НДС с учетом ошибок округления
		УчетНДСКлиентСервер.ПересчитатьНДСсУчетомПогрешностиОкругления(Услуги, Ссылка, СуммаВключаетНДС, ПогрешностиОкругления, "Услуги", Строка(ВалютаДокумента));
	КонецЕсли;
	
	// Посчитать суммы документа и записать ее в соответствующий реквизит шапки для показа в журналах.
	СуммаДокумента = Услуги.Итог("Сумма");
	Если УдалитьУчитыватьНДС И Не СуммаВключаетНДС Тогда
		СуммаДокумента = СуммаДокумента + Услуги.Итог("СуммаНДС");
	КонецЕсли;
	
	Если Услуги.Количество() > 0 Тогда
		СтруктОтбора = Новый Структура;
		СтруктОтбора.Вставить("Склад", Справочники.Склады.ПустаяСсылка());
		СтрокиУслуг = Услуги.НайтиСтроки(СтруктОтбора);
		Для каждого СтрокУсл из СтрокиУслуг Цикл
			СтрокУсл.Склад = Склад;
		КонецЦикла;	
	КонецЕсли;	
		
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	Перем Заголовок, СтруктураШапкиДокумента;
		
	ПроведениеСервер.ПодготовитьНаборыЗаписейКПроведению(ЭтотОбъект);
	Если РучнаяКорректировка Тогда
		Возврат;
	КонецЕсли; 	
		
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначенияБПВызовСервера.ПредставлениеДокументаПриПроведении(Ссылка);
	
	ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента);	
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если Услуги.Количество() = 0 Тогда
		ТекстСообщения = НСтр("ru='В табличной части ""Услуги"" нет ни одной услуги!';uk='У табличній частині ""Послуги"" немає жодної послуги!'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , , , Отказ);
		Возврат;
	КонецЕсли;	
	
	// Движения по документу
	Если НЕ Отказ Тогда		
		ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, Отказ, Заголовок);				
	КонецЕсли;

	ПроведениеСервер.ПодготовитьНаборыЗаписейКЗаписиДвижений(ЭтотОбъект);	
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКОтменеПроведения(ЭтотОбъект);
	Движения.Записать();
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)

	Дата = НачалоДня(ОбщегоНазначения.ТекущаяДатаПользователя());
	Ответственный = Пользователи.ТекущийПользователь();

КонецПроцедуры

#КонецОбласти 

#Область Проведение

// Процедура формирует структуру шапки документа и дополнительных полей.
//
Процедура ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента) Экспорт

	// Дерево значений, содержащее имена необходимых полей в запросе по шапке.
	Перем ДеревоПолейЗапросаПоШапке;
	
	СтруктураШапкиДокумента   = ОбщегоНазначенияРед12.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	
	// Заполним по шапке документа дерево параметров, нужных при проведении.
	ДеревоПолейЗапросаПоШапке = ОбщегоНазначенияРед12.СформироватьДеревоПолейЗапросаПоШапке();
	ОбщегоНазначенияРед12.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Склад",           "ТипСклада",                                  "ТипСклада");
	ОбщегоНазначенияРед12.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Организации",     "ОтражатьВРегламентированномУчете",           "ОтражатьВРегламентированномУчете");
	ОбщегоНазначенияРед12.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "УчетнаяПолитика", "ВестиУчетТоваровОрганизацийВРазрезеСкладов", "ВестиУчетТоваровОрганизацийВРазрезеСкладов");
	ОбщегоНазначенияРед12.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "УчетнаяПолитика", "ВедениеУчетаПоПроектам",                     "ВедениеУчетаПоПроектам");
	
	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа.
	СтруктураШапкиДокумента   = УправлениеЗапасами.СформироватьЗапросПоДеревуПолей(ЭтотОбъект, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета);

КонецПроцедуры

Процедура ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, Отказ, Заголовок)
	
	ТаблицаУслуг = СформироватьТаблицуУслуг();
		
	Если ТаблицаУслуг.Количество() > 0 Тогда
		
		ТаблицаКопия = ТаблицаУслуг.Скопировать();			
		//ТаблицаКопия.Колонки.Удалить("Стоимость");
		
		// Временно рекв.Стоимость в РН не заполняем
		//ТаблицаКопия.Колонки.Добавить("Стоимость", Новый ОписаниеТипов("Число", , Новый КвалификаторыЧисла(15,3)));  // временная строка, для обнуления Стоимость
		//ТаблицаКопия.Колонки.Найти("Сумма").Имя = "Стоимость";
		
		//Если НЕ СуммаВключаетНДС Тогда
		//	Для Каждого СтрокаТаблицы Из ТаблицаКопия Цикл
		//		СтрокаТаблицы.Стоимость = СтрокаТаблицы.Стоимость + СтрокаТаблицы.СуммаНДС;
		//	КонецЦикла;
		//КонецЕсли;
		
		КонтролироватьОстаткиУслуг = ИНАГРО_ЭлеваторЗаполнениеДокументов.ПолучитьЗначениеПоУмолчанию("КонтролироватьОстаткиУслуг");
		Если КонтролироватьОстаткиУслуг Тогда
			ПроверкаСписываемогоКоличестваРасчетаУслуг(ТаблицаКопия);
		КонецЕсли;
		
		ИНАГРО_Элеватор.ДвиженияПоРегиструРасчетыПоУслугам(Движения, ТаблицаКопия, "Расход");
		
	КонецЕсли;  		
		
	Если КодФормирования = Перечисления.ИНАГРО_КодФормирования.Общий Тогда
		ИнтерактивноеФормированиеТиповыхДокументов = ИНАГРО_ЭлеваторЗаполнениеДокументов.ПолучитьЗначениеПоУмолчанию("ИнтерактивноеФормированиеТиповыхДокументов");
		Если ИнтерактивноеФормированиеТиповыхДокументов Тогда						
			ИНАГРО_Элеватор.СформироватьПодчиненныеДокументы(ЭтотОбъект, Отказ);
		КонецЕсли;
	КонецЕсли;
		
КонецПроцедуры

#КонецОбласти 

#Область СлужебныеПроцедурыИФункции

Процедура ЗаполнитьПоДокументуОснованию(Основание)
		
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ИНАГРО_РеестрТТНВвоз") Тогда		
				
		Авто           = Основание.Авто;
		ВидХранения    = Основание.ВидХранения;
		Если Основание.ВидХранения.ТипДоговора = Справочники.ВидыВзаиморасчетов.ДоговорЗакупки Тогда
			Контрагент = Основание.Поставщик;
		Иначе	
			Контрагент = Основание.Владелец;
		КонецЕсли;
		
		ПараметрыОтбораДоговора = ПолучитьПараметрыДляДоговоров();
		
		ИНАГРО_ЭлеваторЗаполнениеДокументов.ПриИзмененииЗначенияКонтрагента(Дата, Организация, Контрагент, ДоговорКонтрагента, ПараметрыОтбораДоговора);		
		
		Дата          = ТекущаяДата();		
		ДатаНачала    = Основание.Дата;		
		ДатаОкончания = ТекущаяДата();
		
		Если Основание.ВидХранения.ТипДоговора = Справочники.ВидыВзаиморасчетов.ДоговорЗакупки Тогда
			ДоговорКонтрагента = Основание.ДоговорПокупателя;
		Иначе			
			ДоговорКонтрагента = Основание.ДоговорКонтрагента;
		КонецЕсли;
		
		Организация   = Основание.Организация;
		Склад         = Основание.Склад;		
		Номенклатура  = Основание.Номенклатура;
		Урожай        = Основание.Урожай;
		
		СписокСкладов = Новый СписокЗначений;
		СписокСкладов.Добавить(Склад);
		
		РассчитатьПоНачисленным(СписокСкладов);
				
	КонецЕсли;
	
КонецПроцедуры		

Функция ПолучитьПараметрыДляДоговоров()
	
	ПараметрыОтбора = Новый Структура("ВидХранения, Урожай");
	ЗаполнитьЗначенияСвойств(ПараметрыОтбора, ЭтотОбъект);
	
	Возврат ПараметрыОтбора;
	
КонецФункции

Процедура РассчитатьПоНачисленным(СписокСкладов) Экспорт
	
	МетаданныеДокумента      = ЭтотОбъект.Метаданные();	
	ПараметрыУчета           = ИНАГРО_Элеватор.ПолучитьПараметрыУчетаЭлеватора(ТекущаяДата());
	мСписокСкладов           = СписокСкладов;
	СписокДатПериодаХранения = СформироватьСписокДатПериодаХранения();	
	
	Фильтр                   = СформироватьФильтрЗапроса(" ", "РасчетХранения");
	
	Запрос = Новый Запрос;
		
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ИНАГРО_РасчетыПоУслугамОстатки.Культура,
		|	ИНАГРО_РасчетыПоУслугамОстатки.Склад,
		|	ИНАГРО_РасчетыПоУслугамОстатки.Урожай,
		|	ИНАГРО_РасчетыПоУслугамОстатки.ВидХранения,
		|	ЕСТЬNULL(ИНАГРО_РасчетыПоУслугамОстатки.КоличествоОстаток, 0) КАК Количество,
		|	СУММА(ЕСТЬNULL(ИНАГРО_РасчетыПоУслугамОстатки.СтоимостьОстаток, 0)) КАК Стоимость,
		|	ИНАГРО_РасчетыПоУслугамОстатки.ДатаРасчета,
		|	КОЛИЧЕСТВО(ИНАГРО_РасчетыПоУслугамОстатки.ДатаРасчета) КАК КвоДней
		|ИЗ
		|	РегистрНакопления.ИНАГРО_РасчетыПоУслугам.Остатки(&ДатаКон, ДатаРасчета В (&СписокДатПериодаХранения)" + Фильтр + ") КАК ИНАГРО_РасчетыПоУслугамОстатки
		|
		|СГРУППИРОВАТЬ ПО
		|	ИНАГРО_РасчетыПоУслугамОстатки.Урожай,
		|	ИНАГРО_РасчетыПоУслугамОстатки.ВидХранения,
		|	ИНАГРО_РасчетыПоУслугамОстатки.Склад,
		|	ИНАГРО_РасчетыПоУслугамОстатки.Культура,
		|	ЕСТЬNULL(ИНАГРО_РасчетыПоУслугамОстатки.КоличествоОстаток, 0),
		|	ИНАГРО_РасчетыПоУслугамОстатки.ДатаРасчета";
	
	Номенклатура_Хранение = ИНАГРО_Элеватор.ПолучитьПредопределеннуюНоменклатуру("Хранение");

	Запрос.УстановитьПараметр("ДатаКон",                  Новый Граница(КонецМесяца(Дата), ВидГраницы.Включая));
	Запрос.УстановитьПараметр("Организация",              Организация);
	Запрос.УстановитьПараметр("Контрагент",               Контрагент);
	Запрос.УстановитьПараметр("ДоговорКонтрагента",       ДоговорКонтрагента);
	Запрос.УстановитьПараметр("Номенклатура",             Номенклатура_Хранение);
	Запрос.УстановитьПараметр("Культура",                 Номенклатура);
	Если СписокСкладов.Количество() > 0 Тогда
		Запрос.УстановитьПараметр("Склад", СписокСкладов);
	КонецЕсли;	
	Запрос.УстановитьПараметр("Урожай",                   Урожай);
	Запрос.УстановитьПараметр("ВидХранения",              ВидХранения);
	Запрос.УстановитьПараметр("СписокДатПериодаХранения", СписокДатПериодаХранения);
	
	ТаблицаЗначенийХранение = Запрос.Выполнить().Выгрузить();
	ТаблицаЗначенийХранение.Сортировать("Урожай, ВидХранения, Склад, Культура, ДатаРасчета");
	ТаблицаЗначенийХранение.Колонки.Добавить("Номенклатура");
	ТаблицаЗначенийХранение.Колонки.Добавить("ТонноДни", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(17, 5)));
	ТаблицаЗначенийХранение.Колонки.Добавить("Цена",     Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3)));
	ТаблицаЗначенийХранение.Колонки.Добавить("Сумма",    Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(17, 5)));
	
	// Определяем цену для каждой услуги на дату расчета ("ДатаРасчета"), а также сумму и кол-во в т/днях.
	Для Каждого СтрокаТаблицы Из ТаблицаЗначенийХранение Цикл		
		
		ВидКультурыДляРасчетаСтоимостиУслуги = ИНАГРО_Элеватор.ПолучитьДополнительныйРеквизитНоменклатуры(СтрокаТаблицы.Культура, "ВидКультуры").ВидКультурыДляРасчетаСтоимостиУслуги;
		
		СтрокаТаблицы.Номенклатура = Номенклатура_Хранение;
		СтрокаТаблицы.Цена         = ИНАГРО_Элеватор.ПолучитьЦенуУслугиЭлеватора(Организация,
		                                                                         СтрокаТаблицы.ДатаРасчета,
																				 Контрагент, ДоговорКонтрагента,
																				 ВидКультурыДляРасчетаСтоимостиУслуги,
																				 Урожай,
																				 Номенклатура_Хранение);
		
		Если ПараметрыУчета <> Неопределено Тогда 			
			Если СтрокаТаблицы.Номенклатура.БазоваяЕдиницаИзмерения = ПараметрыУчета.ЕдиницаИзмеренияТД Тогда	
				СтрокаТаблицы.ТонноДни   = ОКР(СтрокаТаблицы.Количество, 3);
				СтрокаТаблицы.Количество = СтрокаТаблицы.ТонноДни;
			ИначеЕсли СтрокаТаблицы.Номенклатура.БазоваяЕдиницаИзмерения = ПараметрыУчета.ЕдиницаИзмеренияТМ Тогда
				СтрокаТаблицы.ТонноДни   = ОКР(СтрокаТаблицы.Количество, 3);
				СтрокаТаблицы.Количество = ОКР(СтрокаТаблицы.Количество / Документы.ИНАГРО_РасчетУслуг.ПолучитьКоличествоДнейВМесяце(ДатаНачалаХранения, ДатаОкончанияХранения), 5);
			КонецЕсли;			
		Иначе				
			СтрокаТаблицы.ТонноДни   = ОКР(СтрокаТаблицы.Количество, 3);
			СтрокаТаблицы.Количество = ОКР(СтрокаТаблицы.Количество / Документы.ИНАГРО_РасчетУслуг.ПолучитьКоличествоДнейВМесяце(ДатаНачалаХранения, ДатаОкончанияХранения), 5);			
		КонецЕсли;
		
		СтрокаТаблицы.Сумма = СтрокаТаблицы.Цена * СтрокаТаблицы.Количество;
		
	КонецЦикла;
	           	
	Запрос = Новый Запрос;
	
	// Сгруппируем данные таб. значений с помощью запроса
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	РасчетХранения.Культура КАК Номенклатура,
		|	РасчетХранения.Склад КАК Склад,
		|	РасчетХранения.Урожай КАК Урожай,
		|	РасчетХранения.ВидХранения КАК ВидХранения,
		|	ЕСТЬNULL(РасчетХранения.ТонноДни, 0) КАК УникальноеКоличество,
		|	РасчетХранения.ДатаРасчета КАК НачалоПериода,
		|	РасчетХранения.ДатаРасчета КАК КонецПериода,
		|	ЕСТЬNULL(РасчетХранения.Цена, 0) КАК Цена,
		|	ЕСТЬNULL(РасчетХранения.Сумма, 0) КАК Сумма,
		|	ЕСТЬNULL(РасчетХранения.Количество, 0) КАК Количество,
		|	РасчетХранения.ДатаРасчета КАК КвоДней
		|ПОМЕСТИТЬ Хранение
		|ИЗ
		|	&РасчетХранения КАК РасчетХранения
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Хранение.ВидХранения КАК ВидХранения,
		|	КОЛИЧЕСТВО(Хранение.КвоДней) КАК КвоДней,
		|	СУММА(Хранение.Количество) КАК Количество,
		|	МАКСИМУМ(Хранение.КонецПериода) КАК КонецПериода,
		|	МИНИМУМ(Хранение.НачалоПериода) КАК НачалоПериода,
		|	Хранение.Номенклатура КАК Номенклатура,
		|	Хранение.Склад КАК Склад,
		|	Хранение.УникальноеКоличество КАК УникальноеКоличество,
		|	Хранение.Урожай КАК Урожай,
		|	Хранение.Цена КАК Цена
		|ИЗ
		|	Хранение КАК Хранение
		|
		|СГРУППИРОВАТЬ ПО
		|	Хранение.ВидХранения,
		|	Хранение.Номенклатура,
		|	Хранение.Склад,
		|	Хранение.УникальноеКоличество,
		|	Хранение.Урожай,
		|	Хранение.Цена";
	
	Запрос.УстановитьПараметр("РасчетХранения", ТаблицаЗначенийХранение);
	
	Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока Выборка.Следующий() Цикл
		
		НоваяСтрока = РасчетХранения.Добавить();
		НоваяСтрока.Номенклатура = Выборка.Номенклатура;
		НоваяСтрока.Склад        = Выборка.Склад;
		НоваяСтрока.Урожай       = Выборка.Урожай;
		НоваяСтрока.ВидХранения  = Выборка.ВидХранения;
		НоваяСтрока.ДатаНачала   = Выборка.НачалоПериода;
		НоваяСтрока.ДатаКонца    = Выборка.КонецПериода;
		НоваяСтрока.КвоДней      = Выборка.КвоДней;
		НоваяСтрока.ДнейВМесяце  = Документы.ИНАГРО_РасчетУслуг.ПолучитьКоличествоДнейВМесяце(ДатаНачалаХранения, ДатаОкончанияХранения);
		
		// Кол. услуги хранения насчитано в тонно/днях, пересчитаем вес в кг/дни.
		НоваяСтрока.Вес          = Выборка.УникальноеКоличество * 1000;
		
		Если ПараметрыУчета <> Неопределено Тогда 			
			Если Номенклатура_Хранение.БазоваяЕдиницаИзмерения = ПараметрыУчета.ЕдиницаИзмеренияТД Тогда			
				НоваяСтрока.Количество   = Выборка.УникальноеКоличество * Выборка.КвоДней;
			ИначеЕсли Номенклатура_Хранение.БазоваяЕдиницаИзмерения = ПараметрыУчета.ЕдиницаИзмеренияТМ Тогда
				НоваяСтрока.Количество   = Окр(Выборка.УникальноеКоличество * Выборка.КвоДней / Документы.ИНАГРО_РасчетУслуг.ПолучитьКоличествоДнейВМесяце(ДатаНачалаХранения, ДатаОкончанияХранения), 5);
			КонецЕсли;
		Иначе
			НоваяСтрока.Количество = Выборка.УникальноеКоличество;
		КонецЕсли; 		
				
		Если СуммаВключаетНДС Тогда
			НоваяСтрока.Цена       = Выборка.Цена;
		Иначе			
			//НоваяСтрока.Цена       = УчетНДСКлиентСервер.ПересчитатьЦенуПриИзмененииФлаговНалогов(Выборка.Цена,
			//																				      ТипЦен.ЦенаВключаетНДС,
			//																					  СуммаВключаетНДС,
			//																					  УчетНДС.ПолучитьСтавкуНДС(Номенклатура_Хранение.СтавкаНДС));
			НоваяСтрока.Цена     = 100 * Выборка.Цена / (100 + УчетНДС.ПолучитьСтавкуНДС(Номенклатура_Хранение.СтавкаНДС));	
		КонецЕсли;
																							
		НоваяСтрока.Сумма    	 = НоваяСтрока.Цена * НоваяСтрока.Количество;
		НоваяСтрока.СтавкаНДС    = Номенклатура_Хранение.СтавкаНДС;
		
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(НоваяСтрока, СуммаВключаетНДС);
		
	КонецЦикла;
	
	РасчетХранения.Сортировать("Номенклатура, ДатаНачала, Склад, Урожай, ВидХранения");
	ТаблицаЗначенийХранение.Свернуть("Урожай, ВидХранения, Склад, Культура, Номенклатура, Цена", "Количество, ТонноДни, Сумма");
	
	//**************************НОВАЯ ВЕРСИЯ ЗАПОЛНЕНИЯ************************************************************ 
	
	СписокДатПериода = СформироватьСписокДатПериода();	
	
	// Заполним таблицу "Услуги"
	Фильтр = СформироватьФильтрЗапроса(" ", "Услуги");
	
	// Создадим запрос к регистру РасчетыПоУслугам для получения данных
	Запрос = Новый Запрос;	
		
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ИНАГРО_РасчетыПоУслугамОстатки.ДатаРасчета КАК ДатаРасчета,
		|	ИНАГРО_РасчетыПоУслугамОстатки.Номенклатура КАК Номенклатура,
		|	ИНАГРО_РасчетыПоУслугамОстатки.Культура КАК Культура,
		|	ИНАГРО_РасчетыПоУслугамОстатки.Склад КАК Склад,
		|	ИНАГРО_РасчетыПоУслугамОстатки.Урожай КАК Урожай,
		|	ИНАГРО_РасчетыПоУслугамОстатки.ВидХранения КАК ВидХранения,
		|	СУММА(ЕСТЬNULL(ИНАГРО_РасчетыПоУслугамОстатки.КоличествоОстаток, 0)) КАК Количество,
		|	СУММА(ЕСТЬNULL(ИНАГРО_РасчетыПоУслугамОстатки.СтоимостьОстаток, 0)) КАК Стоимость
		|ИЗ
		|	РегистрНакопления.ИНАГРО_РасчетыПоУслугам.Остатки(&ДатаКон, ДатаРасчета В (&СписокДатПериодаХранения)" + Фильтр + ") КАК ИНАГРО_РасчетыПоУслугамОстатки
		|
		|СГРУППИРОВАТЬ ПО
		|	ИНАГРО_РасчетыПоУслугамОстатки.Номенклатура,
		|	ИНАГРО_РасчетыПоУслугамОстатки.Культура,
		|	ИНАГРО_РасчетыПоУслугамОстатки.Склад,
		|	ИНАГРО_РасчетыПоУслугамОстатки.Урожай,
		|	ИНАГРО_РасчетыПоУслугамОстатки.ВидХранения,
		|	ИНАГРО_РасчетыПоУслугамОстатки.ДатаРасчета
		|АВТОУПОРЯДОЧИВАНИЕ";
	
	Запрос.УстановитьПараметр("ДатаКон",                  Новый Граница(КонецДня(Дата), ВидГраницы.Включая));
	Запрос.УстановитьПараметр("Номенклатура",             Номенклатура_Хранение);
	Запрос.УстановитьПараметр("Организация",              Организация);
	Запрос.УстановитьПараметр("Контрагент",               Контрагент);
	Запрос.УстановитьПараметр("ДоговорКонтрагента",       ДоговорКонтрагента);
	Запрос.УстановитьПараметр("Культура",                 Номенклатура);
	Запрос.УстановитьПараметр("СписокДатПериодаХранения", СписокДатПериода);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ТаблицаЗначений = РезультатЗапроса.Выгрузить();
	ТаблицаЗначений.Сортировать("Культура, ДатаРасчета");
	ТаблицаЗначений.Колонки.Добавить("Цена");
	ТаблицаЗначений.Колонки.Добавить("ТонноДни");
	ТаблицаЗначений.Колонки.Добавить("Сумма");
	
	Если ТаблицаЗначений.Количество() = 0 И ТаблицаЗначенийХранение.Количество() = 0 Тогда
		
		ТекстСообщения = НСтр("ru='Нет рассчитанных услуг за указанный период!';uk='Немає розрахованих послуг за вказаний період!'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения); 	
		
	Иначе	
		
		// Посчитаем цену по дате расчета услуги, а также сумму и кол-во в т/днях
		Для Каждого СтрокаТаблицы Из ТаблицаЗначений Цикл
			
			ВидКультурыДляРасчетаСтоимостиУслуги = ИНАГРО_Элеватор.ПолучитьДополнительныйРеквизитНоменклатуры(СтрокаТаблицы.Культура, "ВидКультуры").ВидКультурыДляРасчетаСтоимостиУслуги;	
			
			СтрокаТаблицы.Цена  = ИНАГРО_Элеватор.ПолучитьЦенуУслугиЭлеватора(Организация,
			                                                                  СтрокаТаблицы.ДатаРасчета,
																			  Контрагент,
																			  ДоговорКонтрагента,
																			  ВидКультурыДляРасчетаСтоимостиУслуги,
																			  Урожай,
																			  СтрокаТаблицы.Номенклатура);
			СтрокаТаблицы.Сумма = СтрокаТаблицы.Цена * СтрокаТаблицы.Количество;
			
		КонецЦикла;
		
		Для Каждого СтрокаТаблицыХранения Из ТаблицаЗначенийХранение Цикл
			
			СтрокаТаблицы = ТаблицаЗначений.Добавить();
			СтрокаТаблицы.Урожай       = СтрокаТаблицыХранения.Урожай;
			СтрокаТаблицы.ВидХранения  = СтрокаТаблицыХранения.ВидХранения;
			СтрокаТаблицы.Склад        = СтрокаТаблицыХранения.Склад;
			СтрокаТаблицы.Культура     = СтрокаТаблицыХранения.Культура;
			СтрокаТаблицы.Номенклатура = СтрокаТаблицыХранения.Номенклатура;
			СтрокаТаблицы.Цена         = СтрокаТаблицыХранения.Цена;
			СтрокаТаблицы.Количество   = СтрокаТаблицыХранения.Количество;
			СтрокаТаблицы.ТонноДни     = СтрокаТаблицыХранения.ТонноДни;
			СтрокаТаблицы.Сумма        = СтрокаТаблицыХранения.Сумма;
			
		КонецЦикла;
		
		// свернем ТаблицаЗначений
		ТаблицаЗначений.Свернуть("Урожай, ВидХранения, Склад, Культура, Номенклатура, Цена", "Количество, ТонноДни, Сумма");
		
		Номенклатура_Взвешивание = ИНАГРО_Элеватор.ПолучитьПредопределеннуюНоменклатуру("Взвешивание"); 
		
		// Массив с услугой "Взвешивание"
		ТаблицаВзвешивание = ТаблицаЗначений.НайтиСтроки(Новый Структура("Номенклатура", Номенклатура_Взвешивание));
		
		Для Каждого СтрокаТаблицыВзвешивание Из ТаблицаВзвешивание Цикл
			
			Если СтрокаТаблицыВзвешивание.Цена = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			НоваяСтрока = Услуги.Добавить();
			НоваяСтрока.Склад            = СтрокаТаблицыВзвешивание.Склад;
			НоваяСтрока.Номенклатура     = СтрокаТаблицыВзвешивание.Номенклатура;
			НоваяСтрока.ЕдиницаИзмерения = СтрокаТаблицыВзвешивание.Номенклатура.БазоваяЕдиницаИзмерения;
			НоваяСтрока.Культура         = СтрокаТаблицыВзвешивание.Культура;
			НоваяСтрока.Количество       = СтрокаТаблицыВзвешивание.Количество;
						
			Если СуммаВключаетНДС Тогда
				НоваяСтрока.Цена         = СтрокаТаблицыВзвешивание.Цена;
				НоваяСтрока.Сумма        = СтрокаТаблицыВзвешивание.Сумма;
			Иначе
				НоваяСтрока.Цена         = УчетНДСКлиентСервер.ПересчитатьЦенуПриИзмененииФлаговНалогов(СтрокаТаблицыВзвешивание.Цена, Истина,
																						                СуммаВключаетНДС,
																						                УчетНДС.ПолучитьСтавкуНДС(СтрокаТаблицыВзвешивание.Номенклатура.СтавкаНДС));	
				НоваяСтрока.Сумма        =  НоваяСтрока.Цена * СтрокаТаблицыВзвешивание.Количество;
			КонецЕсли;

						
			ОбработкаТабличныхЧастей.ЗаполнитьСтавкуНДСТабЧасти(НоваяСтрока, ЭтотОбъект, "Услуги", МетаданныеДокумента);
			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(НоваяСтрока, СуммаВключаетНДС);
			
		КонецЦикла;
		
		Если СписокСкладов.Количество() > 0 Тогда 
			
			Ит_ = 0;
			
			Пока Ит_ < СписокСкладов.Количество() Цикл
				
				СтруктураОтбора = Новый Структура();
				СтруктураОтбора.Вставить("Склад", СписокСкладов.Получить(Ит_).Значение);
				
				Ит_ = Ит_ + 1;
				
				Если ЗначениеЗаполнено(Урожай) Тогда
					СтруктураОтбора.Вставить("Урожай", Урожай);
				КонецЕсли;
				Если ЗначениеЗаполнено(ВидХранения) Тогда 
					СтруктураОтбора.Вставить("ВидХранения", ВидХранения);
				КонецЕсли;
				
				Если СтруктураОтбора.Количество() = 0 Тогда
					ТаблицаУслуг = ТаблицаЗначений;
				Иначе
					ТаблицаУслуг = ТаблицаЗначений.НайтиСтроки(СтруктураОтбора);
				КонецЕсли;
				
				// Переберем все услуги, кроме услуги "Взвешивание"
				Для Каждого СтрокаТаблицыУслуг Из ТаблицаУслуг Цикл
					
					Если СтрокаТаблицыУслуг.Количество = 0 Тогда
						Продолжить;
					КонецЕсли;
					
					// Добавим строки в таб. Услуги
					Если СтрокаТаблицыУслуг <> Номенклатура_Взвешивание Тогда
						
						Если СтрокаТаблицыУслуг.Цена = Неопределено Тогда
							Продолжить;
						КонецЕсли;
						
						НоваяСтрока = Услуги.Добавить();
						НоваяСтрока.Номенклатура     = СтрокаТаблицыУслуг.Номенклатура;
						НоваяСтрока.Склад            = СтрокаТаблицыУслуг.Склад;
						НоваяСтрока.ЕдиницаИзмерения = СтрокаТаблицыУслуг.Номенклатура.БазоваяЕдиницаИзмерения;
						НоваяСтрока.Культура         = СтрокаТаблицыУслуг.Культура;
						// Кол. услуги хранения насчитано в тонно/днях.
						НоваяСтрока.ТонноДни 	     = СтрокаТаблицыУслуг.ТонноДни;
						НоваяСтрока.Количество       = СтрокаТаблицыУслуг.Количество;
																									
						Если СуммаВключаетНДС Тогда
							НоваяСтрока.Цена         = СтрокаТаблицыУслуг.Цена;
						Иначе
							НоваяСтрока.Цена         = УчетНДСКлиентСервер.ПересчитатьЦенуПриИзмененииФлаговНалогов(СтрокаТаблицыУслуг.Цена, Истина,
																						                            СуммаВключаетНДС,
																						                            УчетНДС.ПолучитьСтавкуНДС(СтрокаТаблицыУслуг.Номенклатура.СтавкаНДС)); 	
						КонецЕсли;
						НоваяСтрока.Сумма        =  НоваяСтрока.Цена * ОКР(СтрокаТаблицыУслуг.Количество, 3);

						ОбработкаТабличныхЧастей.ЗаполнитьСтавкуНДСТабЧасти(НоваяСтрока, ЭтотОбъект, "Услуги", МетаданныеДокумента);
						ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(НоваяСтрока, СуммаВключаетНДС);
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЦикла;
			
		Иначе
			
			СтруктураОтбора = Новый Структура();
			
			Если ЗначениеЗаполнено(Урожай) Тогда
				СтруктураОтбора.Вставить("Урожай", Урожай);
			КонецЕсли;
			Если ЗначениеЗаполнено(ВидХранения) Тогда 
				СтруктураОтбора.Вставить("ВидХранения", ВидХранения);
			КонецЕсли;
			
			Если СтруктураОтбора.Количество() = 0 Тогда
				ТаблицаУслуг = ТаблицаЗначений;
			Иначе
				ТаблицаУслуг = ТаблицаЗначений.НайтиСтроки(СтруктураОтбора);
			КонецЕсли;
			
			// Переберем все услуги, кроме услуги "Взвешивание"
			Для Каждого СтрокаТаблицыУслуг Из ТаблицаУслуг Цикл
				
				Если СтрокаТаблицыУслуг.Количество = 0 Тогда
					Продолжить;
				КонецЕсли;
				
				// Добавим строки в таб. Услуги
				Если СтрокаТаблицыУслуг <> Номенклатура_Взвешивание Тогда
					
					Если СтрокаТаблицыУслуг.Цена = Неопределено Тогда
						Продолжить;
					КонецЕсли;
					
					НоваяСтрока = Услуги.Добавить();
					НоваяСтрока.Номенклатура     = СтрокаТаблицыУслуг.Номенклатура;
					НоваяСтрока.Склад            = СтрокаТаблицыУслуг.Склад;
					НоваяСтрока.ЕдиницаИзмерения = СтрокаТаблицыУслуг.Номенклатура.БазоваяЕдиницаИзмерения;
					НоваяСтрока.Культура         = СтрокаТаблицыУслуг.Культура;
					// Кол. услуги хранения насчитано в тонно/днях.
					НоваяСтрока.ТонноДни 				 = СтрокаТаблицыУслуг.ТонноДни;
					НоваяСтрока.Количество       = СтрокаТаблицыУслуг.Количество;
																				
					Если СуммаВключаетНДС Тогда
						НоваяСтрока.Цена         = СтрокаТаблицыУслуг.Цена;
						НоваяСтрока.Сумма        = ОКР(СтрокаТаблицыУслуг.Сумма, 2);
					Иначе
						НоваяСтрока.Цена         = УчетНДСКлиентСервер.ПересчитатьЦенуПриИзмененииФлаговНалогов(СтрокаТаблицыУслуг.Цена, Истина,
																						                        СуммаВключаетНДС,
																						                        УчетНДС.ПолучитьСтавкуНДС(СтрокаТаблицыУслуг.Номенклатура.СтавкаНДС)); 	
	
						НоваяСтрока.Сумма        =  НоваяСтрока.Цена*СтрокаТаблицыУслуг.Количество ;
						
						ОбработкаТабличныхЧастей.ЗаполнитьСтавкуНДСТабЧасти(НоваяСтрока, ЭтотОбъект, "Услуги", МетаданныеДокумента);
						ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(НоваяСтрока, СуммаВключаетНДС);
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;		
		
		Документы.ИНАГРО_РасчетУслуг.ЗаполнитьСчетаУчетаВТабличнойЧасти(ЭтотОбъект, "Услуги");
		
		Услуги.Сортировать("Номенклатура");
		
	КонецЕсли;	
	
КонецПроцедуры

Процедура Пересчитать(СписокСкладов) Экспорт
	
	МетаданныеДокумента = ЭтотОбъект.Метаданные();	
	ПараметрыУчета      = ИНАГРО_Элеватор.ПолучитьПараметрыУчетаЭлеватора(ТекущаяДата());
	мСписокСкладов      = СписокСкладов;
	ДатаРасчета         = КонецДня(ДатаОкончанияХранения);
	
	Фильтр              = СформироватьФильтрЗапроса("", "Остатки");	
	ФильтрПоКультурам   = "";	
	Если ЗначениеЗаполнено(Номенклатура) Тогда
		ФильтрПоКультурам = " И ИНАГРО_ДополнительныеРеквизитыНоменклатуры.Номенклатура = &Культура";
	КонецЕсли;
	
	Запрос = Новый Запрос;	
		
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ИНАГРО_ОстаткиОстатки.Организация КАК Организация,
		|	НоменклатураПоДопРеквизиту.Номенклатура КАК Культура,
		|	ИНАГРО_ОстаткиОстатки.Владелец КАК Контрагент,
		|	ИНАГРО_ОстаткиОстатки.Договор КАК ДоговорКонтрагента,
		|	ИНАГРО_ОстаткиОстатки.Склад КАК Склад,
		|	ИНАГРО_ОстаткиОстатки.Урожай КАК Урожай,
		|	ИНАГРО_ОстаткиОстатки.ВидХранения КАК ВидХранения,
		|	СУММА(ЕСТЬNULL(ИНАГРО_ОстаткиОстатки.ЗачетныйВесОстаток, 0)) КАК Остаток
		|ИЗ
		|	(ВЫБРАТЬ
		|		ИНАГРО_ДополнительныеРеквизитыНоменклатуры.Номенклатура КАК Номенклатура
		|	ИЗ
		|		РегистрСведений.ИНАГРО_ДополнительныеРеквизитыНоменклатуры КАК ИНАГРО_ДополнительныеРеквизитыНоменклатуры
		|	ГДЕ
		|		ИНАГРО_ДополнительныеРеквизитыНоменклатуры.ВидКультуры.РассчитыватьХранение = ИСТИНА
		|		" + ФильтрПоКультурам + ") КАК НоменклатураПоДопРеквизиту
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ИНАГРО_Остатки.Остатки(&Дата, " + Фильтр + ") КАК ИНАГРО_ОстаткиОстатки
		|		ПО НоменклатураПоДопРеквизиту.Номенклатура = ИНАГРО_ОстаткиОстатки.Номенклатура
		|
		|СГРУППИРОВАТЬ ПО
		|	ИНАГРО_ОстаткиОстатки.Владелец,
		|	ИНАГРО_ОстаткиОстатки.Склад,
		|	ИНАГРО_ОстаткиОстатки.Организация,
		|	ИНАГРО_ОстаткиОстатки.ВидХранения,
		|	ИНАГРО_ОстаткиОстатки.Урожай,
		|	ИНАГРО_ОстаткиОстатки.Договор,
		|	НоменклатураПоДопРеквизиту.Номенклатура";
	
	Запрос.УстановитьПараметр("Организация",        Организация);
	Запрос.УстановитьПараметр("Контрагент",         Контрагент);
	Запрос.УстановитьПараметр("ДоговорКонтрагента", ДоговорКонтрагента);
	Запрос.УстановитьПараметр("Номенклатура",       Номенклатура);
	Запрос.УстановитьПараметр("Культура",           Номенклатура);
	Если СписокСкладов.Количество() > 0 Тогда
		Запрос.УстановитьПараметр("Склад",          СписокСкладов);
	КонецЕсли;	
	Запрос.УстановитьПараметр("Урожай",             Урожай);
	Запрос.УстановитьПараметр("ВидХранения",        ВидХранения);
	
	ТаблицаОстатков = Новый ТаблицаЗначений;
	ТаблицаОстатков.Колонки.Добавить("ДатаРасчета");
	ТаблицаОстатков.Колонки.Добавить("Организация");
	ТаблицаОстатков.Колонки.Добавить("Контрагент");
	ТаблицаОстатков.Колонки.Добавить("ДоговорКонтрагента");
	ТаблицаОстатков.Колонки.Добавить("Культура");
	ТаблицаОстатков.Колонки.Добавить("Склад");
	ТаблицаОстатков.Колонки.Добавить("Урожай");
	ТаблицаОстатков.Колонки.Добавить("ВидХранения");
	ТаблицаОстатков.Колонки.Добавить("КилограммоДни");
	ТаблицаОстатков.Колонки.Добавить("ТонноДни");
	ТаблицаОстатков.Колонки.Добавить("ТонноМесяцы");
	ТаблицаОстатков.Колонки.Добавить("ЕдиницаИзмерения");
	ТаблицаОстатков.Колонки.Добавить("Количество");
	ТаблицаОстатков.Колонки.Добавить("Цена");
	
	текДата               = ДатаНачалаХранения;
	Номенклатура_Хранение = ИНАГРО_Элеватор.ПолучитьПредопределеннуюНоменклатуру("Хранение");
	
	Пока текДата <= ДатаОкончанияХранения Цикл			   
		
		Запрос.УстановитьПараметр("Дата", Новый Граница(КонецДня(текДата), ВидГраницы.Включая));
		
		Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока Выборка.Следующий() Цикл
			
			Если Выборка.Остаток = 0 Тогда
				Продолжить;
			КонецЕсли;	
			
			НоваяСтрока = ТаблицаОстатков.Добавить();
			НоваяСтрока.ДатаРасчета        = текДата;
			НоваяСтрока.Организация        = Выборка.Организация;
			НоваяСтрока.Контрагент         = Выборка.Контрагент;
			НоваяСтрока.ДоговорКонтрагента = Выборка.ДоговорКонтрагента;
			НоваяСтрока.Культура           = Выборка.Культура;
			НоваяСтрока.Склад              = Выборка.Склад;
			НоваяСтрока.Урожай             = Выборка.Урожай;
			НоваяСтрока.ВидХранения        = Выборка.ВидХранения;
			НоваяСтрока.КилограммоДни      = Выборка.Остаток;
			НоваяСтрока.ТонноДни           = Окр(Выборка.Остаток / 1000, 5);
			НоваяСтрока.ТонноМесяцы        = Окр(НоваяСтрока.ТонноДни / Документы.ИНАГРО_РасчетУслуг.ПолучитьКоличествоДнейВМесяце(ДатаНачалаХранения, ДатаОкончанияХранения), 5);
			НоваяСтрока.ЕдиницаИзмерения   = Номенклатура_Хранение.БазоваяЕдиницаИзмерения;
			НоваяСтрока.Количество         = НоваяСтрока.ТонноДни;
			
			ВидКультурыДляРасчетаСтоимостиУслуги = ИНАГРО_Элеватор.ПолучитьДополнительныйРеквизитНоменклатуры(Выборка.Культура, "ВидКультуры").ВидКультурыДляРасчетаСтоимостиУслуги;
			
			НоваяСтрока.Цена               = ИНАГРО_Элеватор.ПолучитьЦенуУслугиЭлеватора(Выборка.Организация,
			                                                                             текДата,
																						 Выборка.Контрагент,
																						 Выборка.ДоговорКонтрагента,
																						 ВидКультурыДляРасчетаСтоимостиУслуги,
																						 Выборка.Урожай,
																						 Номенклатура_Хранение);
			
		КонецЦикла;	
		
		текДата = текДата + 60*60*24;
		
	КонецЦикла;
	
	ТаблицаЗначений = Новый ТаблицаЗначений;
	ТаблицаЗначений.Колонки.Добавить("ДатаРасчета", Новый ОписаниеТипов("Дата"));
	ТаблицаЗначений.Колонки.Добавить("Культура",    Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаЗначений.Колонки.Добавить("Склад",       Новый ОписаниеТипов("СправочникСсылка.Склады"));
	ТаблицаЗначений.Колонки.Добавить("Урожай",      Новый ОписаниеТипов("СправочникСсылка.ИНАГРО_ВидыУрожая"));
	ТаблицаЗначений.Колонки.Добавить("ВидХранения", Новый ОписаниеТипов("СправочникСсылка.ИНАГРО_ВидыХранения"));
	ТаблицаЗначений.Колонки.Добавить("Количество",  Новый ОписаниеТипов("Число"));
	ТаблицаЗначений.Колонки.Добавить("Цена",        Новый ОписаниеТипов("Число"));
	
	ОбщегоНазначенияБПВызовСервера.ЗагрузитьВТаблицуЗначений(ТаблицаОстатков, ТаблицаЗначений);
	
	ТаблицаЗначений.Сортировать("Урожай, ВидХранения, Склад, Культура, ДатаРасчета");
	ТаблицаЗначений.Колонки.Добавить("Сумма");
	
	// Определяем цену для каждой услуги на дату расчета ("ДатаРасчета"), а также сумму и кол-во в т/днях
	Для Каждого СтрокаТаблицы Из ТаблицаЗначений Цикл
		
		ВидКультурыДляРасчетаСтоимостиУслуги = ИНАГРО_Элеватор.ПолучитьДополнительныйРеквизитНоменклатуры(СтрокаТаблицы.Культура, "ВидКультуры").ВидКультурыДляРасчетаСтоимостиУслуги;
		
		СтрокаТаблицы.Цена = ИНАГРО_Элеватор.ПолучитьЦенуУслугиЭлеватора(Организация,
		                                                                 СтрокаТаблицы.ДатаРасчета,
																		 Контрагент,
																		 ДоговорКонтрагента,
																		 ВидКультурыДляРасчетаСтоимостиУслуги,
																		 Урожай,
																		 Номенклатура_Хранение);
		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	
	// Сгруппируем данные таб. значений с помощью запроса
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	РасчетХранения.Культура КАК Номенклатура,
		|	РасчетХранения.Склад КАК Склад,
		|	РасчетХранения.Урожай КАК Урожай,
		|	РасчетХранения.ВидХранения КАК ВидХранения,
		|	ЕСТЬNULL(РасчетХранения.Количество, 0) КАК УникальноеКоличество,
		|	РасчетХранения.ДатаРасчета КАК НачалоПериода,
		|	РасчетХранения.ДатаРасчета КАК КонецПериода,
		|	ЕСТЬNULL(РасчетХранения.Цена, 0) КАК Цена,
		|	ЕСТЬNULL(РасчетХранения.Сумма, 0) КАК Сумма,
		|	ЕСТЬNULL(РасчетХранения.Количество, 0) КАК Количество,
		|	РасчетХранения.ДатаРасчета КАК КвоДней
		|ПОМЕСТИТЬ Хранение
		|ИЗ
		|	&РасчетХранения КАК РасчетХранения
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Хранение.ВидХранения КАК ВидХранения,
		|	КОЛИЧЕСТВО(Хранение.КвоДней) КАК КвоДней,
		|	СУММА(Хранение.Количество) КАК Количество,
		|	МАКСИМУМ(Хранение.КонецПериода) КАК КонецПериода,
		|	МИНИМУМ(Хранение.НачалоПериода) КАК НачалоПериода,
		|	Хранение.Номенклатура КАК Номенклатура,
		|	Хранение.Склад КАК Склад,
		|	Хранение.УникальноеКоличество КАК УникальноеКоличество,
		|	Хранение.Урожай КАК Урожай,
		|	Хранение.Цена КАК Цена
		|ИЗ
		|	Хранение КАК Хранение
		|
		|СГРУППИРОВАТЬ ПО
		|	Хранение.ВидХранения,
		|	Хранение.Номенклатура,
		|	Хранение.Склад,
		|	Хранение.УникальноеКоличество,
		|	Хранение.Урожай,
		|	Хранение.Цена";
	
	Запрос.УстановитьПараметр("РасчетХранения", ТаблицаЗначений);

	Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока Выборка.Следующий() Цикл
		
		НоваяСтрока = РасчетХранения.Добавить();
		НоваяСтрока.Номенклатура = Выборка.Номенклатура;
		НоваяСтрока.Склад        = Выборка.Склад;
		НоваяСтрока.Урожай       = Выборка.Урожай;
		НоваяСтрока.ВидХранения  = Выборка.ВидХранения;
		НоваяСтрока.ДатаНачала   = Выборка.НачалоПериода;
		НоваяСтрока.ДатаКонца    = Выборка.КонецПериода;
		НоваяСтрока.КвоДней      = Выборка.КвоДней;
		НоваяСтрока.ДнейВМесяце  = Документы.ИНАГРО_РасчетУслуг.ПолучитьКоличествоДнейВМесяце(ДатаНачалаХранения, ДатаОкончанияХранения);
		
		// Кол. услуги хранения насчитано в тонно/днях, пересчитаем вес в кг/дни.
		НоваяСтрока.Вес          = Выборка.УникальноеКоличество * 1000; 		
		// Пересчитаем кол. услуги хранения в тонно/мес
		НоваяСтрока.Количество   = Окр(Выборка.УникальноеКоличество * Выборка.КвоДней / Документы.ИНАГРО_РасчетУслуг.ПолучитьКоличествоДнейВМесяце(ДатаНачалаХранения, ДатаОкончанияХранения), 3);
						
		
		Если СуммаВключаетНДС Тогда
			НоваяСтрока.Цена = Выборка.Цена;
		Иначе
			//НоваяСтрока.Цена = УчетНДСКлиентСервер.ПересчитатьЦенуПриИзмененииФлаговНалогов(Выборка.Цена,
			//                                                                                ТипЦен.ЦенаВключаетНДС,
			//																			    СуммаВключаетНДС,
			//																			    УчетНДС.ПолучитьСтавкуНДС(Номенклатура_Хранение.СтавкаНДС));
			НоваяСтрока.Цена     = 100 * Выборка.Цена / (100 + УчетНДС.ПолучитьСтавкуНДС(Номенклатура_Хранение.СтавкаНДС));	
	
		КонецЕсли;
				
		НоваяСтрока.Сумма    	 = НоваяСтрока.Цена * НоваяСтрока.Количество;
		НоваяСтрока.СтавкаНДС    = Номенклатура_Хранение.СтавкаНДС;		
				
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(НоваяСтрока, СуммаВключаетНДС);
		
	КонецЦикла;
	
	РасчетХранения.Сортировать("Номенклатура, ДатаНачала, Склад, Урожай, ВидХранения");
	
	ТаблицаДляЗаполнения = РасчетХранения.Выгрузить();
	ТаблицаДляЗаполнения.Колонки["Номенклатура"].Имя = "Культура";
	ТаблицаДляЗаполнения.Колонки.Добавить("Номенклатура");
	ТаблицаДляЗаполнения.ЗаполнитьЗначения(Номенклатура_Хранение, "Номенклатура");
	
	Для Каждого СтрокаТаблицы Из ТаблицаДляЗаполнения Цикл
		
		НоваяСтрокаУслуг = Услуги.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаУслуг, СтрокаТаблицы);
		НоваяСтрокаУслуг.ЕдиницаИзмерения = НоваяСтрокаУслуг.Номенклатура.БазоваяЕдиницаИзмерения;
		
		Если ПараметрыУчета <> Неопределено Тогда 
			
			Если СтрокаТаблицы.Номенклатура.БазоваяЕдиницаИзмерения = ПараметрыУчета.ЕдиницаИзмеренияТД Тогда	
				НоваяСтрокаУслуг.ТонноДни   = Окр(СтрокаТаблицы.КвоДней * СтрокаТаблицы.Вес / 1000, 5);
				НоваяСтрокаУслуг.Количество = НоваяСтрокаУслуг.ТонноДни
			ИначеЕсли СтрокаТаблицы.Номенклатура.БазоваяЕдиницаИзмерения = ПараметрыУчета.ЕдиницаИзмеренияТМ Тогда
				НоваяСтрокаУслуг.ТонноДни   = Окр(СтрокаТаблицы.КвоДней * СтрокаТаблицы.Вес / 1000, 5);
				НоваяСтрокаУслуг.Количество = Окр(НоваяСтрокаУслуг.ТонноДни / СтрокаТаблицы.ДнейВМесяце, 5);
			КонецЕсли;
			
		Иначе
			
			НоваяСтрокаУслуг.ТонноДни   = Окр(СтрокаТаблицы.КвоДней * СтрокаТаблицы.Вес / 1000, 5);
			НоваяСтрокаУслуг.Количество = Окр(НоваяСтрокаУслуг.ТонноДни / СтрокаТаблицы.ДнейВМесяце, 5);
			
		КонецЕсли;
				
		ОбработкаТабличныхЧастей.ЗаполнитьСтавкуНДСТабЧасти(НоваяСтрока, ЭтотОбъект, "Услуги", МетаданныеДокумента);
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(НоваяСтрока, СуммаВключаетНДС);

	КонецЦикла;	
	
	Услуги.Свернуть("Культура, Номенклатура, ЕдиницаИзмерения, Цена, СтавкаНДС, СчетУчетаНДС, СхемаРеализации, НалоговоеНазначение, НалоговоеНазначениеДоходовИЗатрат", "Количество, ТонноДни, СуммаБезСкидки, СуммаСкидки, Сумма, СуммаНДС, СрокХранения");
	
	// ================= Расчитаем остальные услуги
	СписокДатПериода = СформироватьСписокДатПериода();	
	// Заполним таблицу "Услуги"
	Фильтр = СформироватьФильтрЗапроса(" ", "Услуги");
	
	// Создадим запрос к регистру РасчетыПоУслугам для получения данных
	Запрос = Новый Запрос;		
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ИНАГРО_РасчетыПоУслугамОстатки.ДатаРасчета КАК ДатаРасчета,
		|	ИНАГРО_РасчетыПоУслугамОстатки.Номенклатура КАК Номенклатура,
		|	ИНАГРО_РасчетыПоУслугамОстатки.Культура КАК Культура,
		|	ИНАГРО_РасчетыПоУслугамОстатки.Склад КАК Склад,
		|	ИНАГРО_РасчетыПоУслугамОстатки.Урожай КАК Урожай,
		|	ИНАГРО_РасчетыПоУслугамОстатки.ВидХранения КАК ВидХранения,
		|	СУММА(ЕСТЬNULL(ИНАГРО_РасчетыПоУслугамОстатки.КоличествоОстаток, 0)) КАК Количество,
		|	СУММА(ЕСТЬNULL(ИНАГРО_РасчетыПоУслугамОстатки.СтоимостьОстаток, 0)) КАК Стоимость
		|ИЗ
		|	РегистрНакопления.ИНАГРО_РасчетыПоУслугам.Остатки(&ДатаКон, ДатаРасчета В (&СписокДатПериода)" + Фильтр + ") КАК ИНАГРО_РасчетыПоУслугамОстатки
		|
		|СГРУППИРОВАТЬ ПО
		|	ИНАГРО_РасчетыПоУслугамОстатки.Номенклатура,
		|	ИНАГРО_РасчетыПоУслугамОстатки.Культура,
		|	ИНАГРО_РасчетыПоУслугамОстатки.Склад,
		|	ИНАГРО_РасчетыПоУслугамОстатки.Урожай,
		|	ИНАГРО_РасчетыПоУслугамОстатки.ВидХранения,
		|	ИНАГРО_РасчетыПоУслугамОстатки.ДатаРасчета
		|АВТОУПОРЯДОЧИВАНИЕ";
	
	Запрос.УстановитьПараметр("ДатаКон",            Новый Граница(КонецДня(Дата), ВидГраницы.Включая));
	Запрос.УстановитьПараметр("Номенклатура",       Номенклатура_Хранение);
	Запрос.УстановитьПараметр("Организация",        Организация);
	Запрос.УстановитьПараметр("Контрагент",         Контрагент);
	Запрос.УстановитьПараметр("ДоговорКонтрагента", ДоговорКонтрагента);
	Запрос.УстановитьПараметр("Культура",           Номенклатура);
	Запрос.УстановитьПараметр("СписокДатПериода",   СписокДатПериода);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ТаблицаЗначений = РезультатЗапроса.Выгрузить();
	ТаблицаЗначений.Сортировать("Культура, ДатаРасчета");
	ТаблицаЗначений.Колонки.Добавить("Цена");
	ТаблицаЗначений.Колонки.Добавить("ТонноДни");
	ТаблицаЗначений.Колонки.Добавить("Сумма");
	
	Если ТаблицаЗначений.Количество() = 0 Тогда
		
		ТекстСообщения = НСтр("ru='Нет рассчитанных услуг за указанный период!';uk='Немає розрахованих послуг за вказаний період!'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения); 	
		
	Иначе	
		
		// Посчитаем цену по дате расчета услуги, а также сумму и кол-во в т/днях
		Для Каждого СтрокаТаблицы Из ТаблицаЗначений Цикл
			
			ВидКультурыДляРасчетаСтоимостиУслуги = ИНАГРО_Элеватор.ПолучитьДополнительныйРеквизитНоменклатуры(СтрокаТаблицы.Культура, "ВидКультуры").ВидКультурыДляРасчетаСтоимостиУслуги;	
			
			СтрокаТаблицы.Цена  = ИНАГРО_Элеватор.ПолучитьЦенуУслугиЭлеватора(Организация,
			                                                                  СтрокаТаблицы.ДатаРасчета,
																			  Контрагент,
																			  ДоговорКонтрагента,
																			  ВидКультурыДляРасчетаСтоимостиУслуги,
																			  Урожай,
																			  СтрокаТаблицы.Номенклатура);
			СтрокаТаблицы.Сумма = СтрокаТаблицы.Цена * СтрокаТаблицы.Количество;
			
		КонецЦикла;
		
		// свернем ТаблицаЗначений
		ТаблицаЗначений.Свернуть("Урожай, ВидХранения, Склад, Культура, Номенклатура, Цена", "Количество, ТонноДни, Сумма");
		
		// Массив с услугой "Взвешивание"
		
		Номенклатура_Взвешивание = ИНАГРО_Элеватор.ПолучитьПредопределеннуюНоменклатуру("Взвешивание");
		
		ТаблицаВзвешивание = ТаблицаЗначений.НайтиСтроки(Новый Структура ("Номенклатура", Номенклатура_Взвешивание));
		
		Для Каждого СтрокаТаблицыВзвешивание Из ТаблицаВзвешивание Цикл
			
			НоваяСтрока = Услуги.Добавить();
			НоваяСтрока.Номенклатура     = СтрокаТаблицыВзвешивание.Номенклатура;
			НоваяСтрока.ЕдиницаИзмерения = СтрокаТаблицыВзвешивание.Номенклатура.БазоваяЕдиницаИзмерения;
			НоваяСтрока.Культура         = СтрокаТаблицыВзвешивание.Культура;
			НоваяСтрока.Количество       = СтрокаТаблицыВзвешивание.Количество;
						
			Если СуммаВключаетНДС Тогда
				НоваяСтрока.Цена         = СтрокаТаблицыВзвешивание.Цена;
				НоваяСтрока.Сумма        = СтрокаТаблицыВзвешивание.Сумма;
			Иначе
				НоваяСтрока.Цена         = УчетНДСКлиентСервер.ПересчитатьЦенуПриИзмененииФлаговНалогов(СтрокаТаблицыВзвешивание.Цена, Истина,
																						                СуммаВключаетНДС,
																						                УчетНДС.ПолучитьСтавкуНДС(СтрокаТаблицыВзвешивание.Номенклатура.СтавкаНДС));	
				НоваяСтрока.Сумма        = НоваяСтрока.Цена * СтрокаТаблицыВзвешивание.Количество;
			КонецЕсли;

			ОбработкаТабличныхЧастей.ЗаполнитьСтавкуНДСТабЧасти(НоваяСтрока, ЭтотОбъект, "Услуги", МетаданныеДокумента);
			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(НоваяСтрока, СуммаВключаетНДС);
			
		КонецЦикла;
		
		// Для остальных услуг создадим структуру отбора по заданным значениям "Склад", "Урожай", "Вид хранения"
		Если СписокСкладов.Количество() > 0 Тогда 
			
			Ит_ = 0;
			
			Пока Ит_ < СписокСкладов.Количество() Цикл
				
				СтруктураОтбора = Новый Структура();
				СтруктураОтбора.Вставить("Склад", СписокСкладов.Получить(Ит_).Значение);
				
				Ит_ = Ит_ + 1;
				
				Если ЗначениеЗаполнено(Урожай) Тогда
					СтруктураОтбора.Вставить("Урожай", Урожай);
				КонецЕсли;
				Если ЗначениеЗаполнено(ВидХранения) Тогда 
					СтруктураОтбора.Вставить("ВидХранения", ВидХранения);
				КонецЕсли;
				
				Если СтруктураОтбора.Количество() = 0 Тогда
					ТаблицаУслуг = ТаблицаЗначений;
				Иначе
					ТаблицаУслуг = ТаблицаЗначений.НайтиСтроки(СтруктураОтбора);
				КонецЕсли;
				
				// Переберем все услуги, кроме услуги "Взвешивание"
				Для Каждого СтрокаТаблицыУслуг Из ТаблицаУслуг Цикл
					
					Если СтрокаТаблицыУслуг.Количество = 0 Тогда
						Продолжить;
					КонецЕсли;
					
					// Добавим строки в таб. Услуги
					Если  СтрокаТаблицыУслуг.Номенклатура <> Номенклатура_Взвешивание 
						И СтрокаТаблицыУслуг.Номенклатура <> Номенклатура_Хранение Тогда
						
						НоваяСтрока = Услуги.Добавить();
						НоваяСтрока.Номенклатура     = СтрокаТаблицыУслуг.Номенклатура;
						НоваяСтрока.ЕдиницаИзмерения = СтрокаТаблицыУслуг.Номенклатура.БазоваяЕдиницаИзмерения;
						НоваяСтрока.Культура         = СтрокаТаблицыУслуг.Культура;
						// Кол. услуги хранения насчитано в тонно/днях.
						НоваяСтрока.ТонноДни 	     = СтрокаТаблицыУслуг.ТонноДни;
						НоваяСтрока.Количество       = СтрокаТаблицыУслуг.Количество;
																	
						Если СуммаВключаетНДС Тогда
							НоваяСтрока.Цена         = СтрокаТаблицыУслуг.Цена;
							НоваяСтрока.Сумма        = ОКР(СтрокаТаблицыУслуг.Сумма,2);
						Иначе
							НоваяСтрока.Цена         = УчетНДСКлиентСервер.ПересчитатьЦенуПриИзмененииФлаговНалогов(СтрокаТаблицыУслуг.Цена, Истина,
																						                            СуммаВключаетНДС,
																						                            УчетНДС.ПолучитьСтавкуНДС(СтрокаТаблицыУслуг.Номенклатура.СтавкаНДС)); 	
							НоваяСтрока.Сумма        =  НоваяСтрока.Цена * СтрокаТаблицыУслуг.Количество ;
						КонецЕсли;
						
						ОбработкаТабличныхЧастей.ЗаполнитьСтавкуНДСТабЧасти(НоваяСтрока, ЭтотОбъект, "Услуги", МетаданныеДокумента);
						ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(НоваяСтрока, СуммаВключаетНДС);

					КонецЕсли;
					
				КонецЦикла;
				
			КонецЦикла;
			
		Иначе
			
			СтруктураОтбора = Новый Структура();
			
			Если ЗначениеЗаполнено(Урожай) Тогда
				СтруктураОтбора.Вставить("Урожай", Урожай);
			КонецЕсли;
			Если ЗначениеЗаполнено(ВидХранения) Тогда 
				СтруктураОтбора.Вставить("ВидХранения", ВидХранения);
			КонецЕсли;
			
			Если СтруктураОтбора.Количество() = 0 Тогда
				ТаблицаУслуг = ТаблицаЗначений;
			Иначе
				ТаблицаУслуг = ТаблицаЗначений.НайтиСтроки(СтруктураОтбора);
			КонецЕсли;
			
			// Переберем все услуги, кроме услуги "Взвешивание"
			Для Каждого СтрокаТаблицыУслуг Из ТаблицаУслуг Цикл
				
				Если СтрокаТаблицыУслуг.Количество = 0 Тогда
					Продолжить;
				КонецЕсли;
				
				// Добавим строки в таб. Услуги
				Если  СтрокаТаблицыУслуг.Номенклатура <> Номенклатура_Взвешивание 
					И СтрокаТаблицыУслуг.Номенклатура <> Номенклатура_Хранение Тогда
					
					НоваяСтрока = Услуги.Добавить();
					НоваяСтрока.Номенклатура     = СтрокаТаблицыУслуг.Номенклатура;
					НоваяСтрока.ЕдиницаИзмерения = СтрокаТаблицыУслуг.Номенклатура.БазоваяЕдиницаИзмерения;
					НоваяСтрока.Культура         = СтрокаТаблицыУслуг.Культура;
					// Кол. услуги хранения насчитано в тонно/днях.
					НоваяСтрока.ТонноДни 	     = СтрокаТаблицыУслуг.ТонноДни;
					НоваяСтрока.Количество       = СтрокаТаблицыУслуг.Количество;
					
					Если СуммаВключаетНДС Тогда
						НоваяСтрока.Цена         = СтрокаТаблицыУслуг.Цена;
						НоваяСтрока.Сумма        = ОКР(СтрокаТаблицыУслуг.Сумма, 2);
					Иначе
						НоваяСтрока.Цена         = УчетНДСКлиентСервер.ПересчитатьЦенуПриИзмененииФлаговНалогов(СтрокаТаблицыУслуг.Цена, Истина,
																						                            СуммаВключаетНДС,
																						                            УчетНДС.ПолучитьСтавкуНДС(СтрокаТаблицыУслуг.Номенклатура.СтавкаНДС)); 		
						НоваяСтрока.Сумма        =  НоваяСтрока.Цена*СтрокаТаблицыУслуг.Количество ;
					КонецЕсли;
					
					ОбработкаТабличныхЧастей.ЗаполнитьСтавкуНДСТабЧасти(НоваяСтрока, ЭтотОбъект, "Услуги", МетаданныеДокумента);
					ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(НоваяСтрока, СуммаВключаетНДС);
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;	
		
		Документы.ИНАГРО_РасчетУслуг.ЗаполнитьСчетаУчетаВТабличнойЧасти(ЭтотОбъект, "Услуги");

		Услуги.Сортировать("Номенклатура");
		
	КонецЕсли;	
	
КонецПроцедуры

Функция СформироватьСписокДатПериодаХранения()
	
	СписокДатПериода = Новый СписокЗначений;
	// Подготовим список дат периода
	текДата = ДатаНачалаХранения;
	Пока текДата <= ДатаОкончанияХранения Цикл
		СписокДатПериода.Добавить(текДата);
		текДата = текДата + 60*60*24;
	КонецЦикла;
	
	Возврат СписокДатПериода;
	
КонецФункции

Функция СформироватьСписокДатПериода()
	
	СписокДатПериода = Новый СписокЗначений;
	// Подготовим список дат периода
	текДата = ДатаНачала;
	Пока текДата <= ДатаОкончания Цикл
		СписокДатПериода.Добавить(текДата);
		текДата = текДата + 60*60*24;
	КонецЦикла;
	
	Возврат СписокДатПериода;
	
КонецФункции

Функция СформироватьФильтрЗапроса(Фильтр = "", ПараметрФильтра)
	
	Если ЗначениеЗаполнено(Организация) Тогда
		Фильтр = Фильтр + ?(Фильтр = "", " Организация = &Организация  ", " И Организация = &Организация  ");
	КонецЕсли;
	
	Если ПараметрФильтра = "Остатки" Тогда
		
		Если ЗначениеЗаполнено(Контрагент) Тогда
			Фильтр = Фильтр + ?(Фильтр = "", " Владелец = &Контрагент  ", " И Владелец = &Контрагент  ");
		КонецЕсли; 		
		Если ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
			Фильтр = Фильтр + ?(Фильтр = "", " Договор = &ДоговорКонтрагента  ", " И Договор = &ДоговорКонтрагента  ");
		КонецЕсли;    
		Если ЗначениеЗаполнено(Номенклатура) Тогда
			Фильтр = Фильтр + ?(Фильтр = "", " Номенклатура = &Номенклатура  ", " И Номенклатура = &Номенклатура  ");
		КонецЕсли;		
		Если мСписокСкладов.Количество() > 0  Тогда
			Фильтр = Фильтр + " И Склад В (&Склад)  ";
		КонецЕсли;
		
	Иначе
		
		Если ЗначениеЗаполнено(Контрагент) Тогда
			Фильтр = Фильтр + ?(Фильтр = "", " Контрагент = &Контрагент  ", " И Контрагент = &Контрагент  ");
		КонецЕсли;		
		Если ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
			Фильтр = Фильтр + ?(Фильтр = "", " ДоговорКонтрагента = &ДоговорКонтрагента  ", " И ДоговорКонтрагента = &ДоговорКонтрагента  ");
		КонецЕсли;                  
		Если ЗначениеЗаполнено(Номенклатура) Тогда
			Фильтр = Фильтр + ?(Фильтр = "", " Культура = &Культура  ", " И Культура = &Культура  ");
		КонецЕсли;
		
	КонецЕсли;	
	
	Если ПараметрФильтра = "РасчетХранения" Тогда
		
		Фильтр = Фильтр + " И Номенклатура = &Номенклатура  ";
		
		Если ЗначениеЗаполнено(ВидХранения) Тогда
			Фильтр = Фильтр + " И ВидХранения = &ВидХранения  "; 
		КонецЕсли;
		Если мСписокСкладов.Количество() > 0  Тогда
			Фильтр = Фильтр + " И Склад В (&Склад)  ";
		КонецЕсли;
		Если ЗначениеЗаполнено(Урожай) Тогда
			Фильтр = Фильтр + " И Урожай = &Урожай  ";
		КонецЕсли;	
		
	ИначеЕсли ПараметрФильтра = "Услуги" Тогда
		
		Фильтр = Фильтр + " И Номенклатура <> &Номенклатура  ";
		
	КонецЕсли;
	
	Фильтр = Лев(Фильтр, СтрДлина(Фильтр) - 2);
	
	Возврат Фильтр;
	
КонецФункции

Функция СформироватьТаблицуУслуг()
	
	ТаблицаУслуг = Новый ТаблицаЗначений;
	ТаблицаУслуг.Колонки.Добавить("ПроизводственнаяУслуга");
	ТаблицаУслуг.Колонки.Добавить("НомерСтрокиДокумента",               Новый ОписаниеТипов("Число", , Новый КвалификаторыЧисла(15)));
	ТаблицаУслуг.Колонки.Добавить("ДатаРасчета",                        Новый ОписаниеТипов("Дата"));
	ТаблицаУслуг.Колонки.Добавить("Ссылка",                             Новый ОписаниеТипов("ДокументСсылка.ИНАГРО_РасчетУслуг")); 
	ТаблицаУслуг.Колонки.Добавить("Организация",                        Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ТаблицаУслуг.Колонки.Добавить("Контрагент",                         Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	ТаблицаУслуг.Колонки.Добавить("ДоговорКонтрагента",                 Новый ОписаниеТипов("СправочникСсылка.ДоговорыКонтрагентов"));
	ТаблицаУслуг.Колонки.Добавить("Номенклатура",                       Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаУслуг.Колонки.Добавить("Культура",                           Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаУслуг.Колонки.Добавить("Склад",                              Новый ОписаниеТипов("СправочникСсылка.Склады"));
	ТаблицаУслуг.Колонки.Добавить("ВидХранения",                        Новый ОписаниеТипов("СправочникСсылка.ИНАГРО_ВидыХранения"));
	ТаблицаУслуг.Колонки.Добавить("Урожай",                             Новый ОписаниеТипов("СправочникСсылка.ИНАГРО_ВидыУрожая"));
	ТаблицаУслуг.Колонки.Добавить("Количество",                         Новый ОписаниеТипов("Число", , Новый КвалификаторыЧисла(15,3)));	
	ТаблицаУслуг.Колонки.Добавить("КоличествоДляПроизводственныхУслуг", Новый ОписаниеТипов("Число", , Новый КвалификаторыЧисла(15,3)));	
	ТаблицаУслуг.Колонки.Добавить("СтоимостьДляПроизводственныхУслуг",  Новый ОписаниеТипов("Число", , Новый КвалификаторыЧисла(15,3)));	
	ТаблицаУслуг.Колонки.Добавить("Цена");
	ТаблицаУслуг.Колонки.Добавить("Стоимость",                          Новый ОписаниеТипов("Число", , Новый КвалификаторыЧисла(15,3))); 
	ТаблицаУслуг.Колонки.Добавить("Сумма",                              Новый ОписаниеТипов("Число", , Новый КвалификаторыЧисла(15,3)));
	ТаблицаУслуг.Колонки.Добавить("СуммаБезНДС");	
	ТаблицаУслуг.Колонки.Добавить("СуммаНДС");
	ТаблицаУслуг.Колонки.Добавить("СтавкаНДС");
	ТаблицаУслуг.Колонки.Добавить("Содержание");
	ТаблицаУслуг.Колонки.Добавить("СчетУчетаНДС");
	ТаблицаУслуг.Колонки.Добавить("НалоговоеНазначение");
	ТаблицаУслуг.Колонки.Добавить("НалоговоеНазначениеДоходовИЗатрат");
	//ТаблицаУслуг.Колонки.Добавить("ВидНалоговойДеятельности");
	ТаблицаУслуг.Колонки.Добавить("СхемаРеализации");
	ТаблицаУслуг.Колонки.Добавить("КоличествоТД");
	
	// Запишем сюда значения предопределенной услуги
	СписокПредУслуг = Новый СписокЗначений;
	
	// Имена предопределенной номенклатуры
	СтруктураИмен = РегистрыСведений.ИНАГРО_ПредопределеннаяНоменклатура.Получить();
	
	// запишем значения предопределенной услуги
	Для Каждого СтрСтруктура Из СтруктураИмен Цикл
		СписокПредУслуг.Добавить(СтрСтруктура.Значение);	
	КонецЦикла;
	
	Номенклатура_Взвешивание = ИНАГРО_Элеватор.ПолучитьПредопределеннуюНоменклатуру("Взвешивание");	
	Номенклатура_Хранение    = ИНАГРО_Элеватор.ПолучитьПредопределеннуюНоменклатуру("Хранение");
	
	Для Каждого текСтрока Из Услуги Цикл
		
		ВестиРасчетыПоУслуге = ИНАГРО_Элеватор.ПолучитьДополнительныйРеквизитНоменклатуры(текСтрока.Номенклатура,"ВестиРасчетыПоУслуге");
		Если СписокПредУслуг.НайтиПоЗначению(текСтрока.Номенклатура) = Неопределено И НЕ ВестиРасчетыПоУслуге Тогда
			// Возвращаемся в начало цикла
			Продолжить;
		Иначе
			// Добавляем предопределенную номенклатуру
			НоваяСтрока = ТаблицаУслуг.Добавить();
			НоваяСтрока.НомерСтрокиДокумента = текСтрока.НомерСтроки;
			НоваяСтрока.ДатаРасчета          = Дата;
			НоваяСтрока.Ссылка               = Ссылка; 
			НоваяСтрока.Организация          = Организация;
			НоваяСтрока.Контрагент           = Контрагент;
			НоваяСтрока.ДоговорКонтрагента   = ДоговорКонтрагента;
			НоваяСтрока.Склад                = текСтрока.Склад;
			НоваяСтрока.Номенклатура         = текСтрока.Номенклатура;
			НоваяСтрока.Культура             = текСтрока.Культура;
			Если текСтрока.Номенклатура <> Номенклатура_Взвешивание Тогда
				НоваяСтрока.Склад            = ?(ЗначениеЗаполнено(текСтрока.Склад)      , текСтрока.Склад      , Неопределено);
				НоваяСтрока.ВидХранения      = ?(ЗначениеЗаполнено(ВидХранения), ВидХранения, Неопределено);
				НоваяСтрока.Урожай           = ?(ЗначениеЗаполнено(Урожай)     , Урожай     , Неопределено);
			КонецЕсли;
			
			Если текСтрока.Номенклатура = Номенклатура_Хранение Тогда
				// Кол. услуги хранения надо списывать в тонно/днях.
				НоваяСтрока.Количество       = текСтрока.ТонноДни;
			Иначе
				НоваяСтрока.Количество       = текСтрока.Количество;
			КонецЕсли;
			
			Если текСтрока.Номенклатура = Номенклатура_Хранение Тогда
				// ВР так как стоимость хранения не начисляем не будем ее и списывать
				НоваяСтрока.Стоимость        = 0;
			Иначе
				Если СуммаВключаетНДС Тогда
					НоваяСтрока.Стоимость    = текСтрока.Сумма;
				Иначе	
					НоваяСтрока.Стоимость    = текСтрока.Сумма + текСтрока.СуммаНДС;
				КонецЕсли;
			КонецЕсли;
			
			НоваяСтрока.ПроизводственнаяУслуга   = ИНАГРО_Элеватор.ПолучитьДополнительныйРеквизитНоменклатуры(текСтрока.Номенклатура, "ПроизводственнаяУслуга");			
			НоваяСтрока.КоличествоТД             = текСтрока.Количество;
			НоваяСтрока.Цена                     = текСтрока.Цена;
			НоваяСтрока.Сумма                    = текСтрока.Сумма;
			НоваяСтрока.СуммаБезНДС				 = текСтрока.Сумма-?(СуммаВключаетНДС,текСтрока.СуммаНДС,0);
			НоваяСтрока.СуммаНДС                 = текСтрока.СуммаНДС;
			НоваяСтрока.СтавкаНДС                = текСтрока.СтавкаНДС;
			НоваяСтрока.Содержание               = Строка("" + текСтрока.Номенклатура + " (" + текСтрока.Культура + ")");
			СчетаУчетаНоменклатуры               = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаУчетаНоменклатуры(Организация, текСтрока.Номенклатура); 
			НоваяСтрока.НалоговоеНазначение      = текСтрока.НалоговоеНазначение;
			НоваяСтрока.НалоговоеНазначениеДоходовИЗатрат = текСтрока.НалоговоеНазначениеДоходовИЗатрат;
			НоваяСтрока.СхемаРеализации          = ?(текСтрока.СхемаРеализации = Справочники.СхемыРеализации.ПустаяСсылка(), СчетаУчетаНоменклатуры.СхемаРеализации, текСтрока.СхемаРеализации);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТаблицаУслуг;
	
КонецФункции

Процедура ПроверкаСписываемогоКоличестваРасчетаУслуг(ТаблицаУслуг)
	
	ТаблицаУслуг.Свернуть("Ссылка, Организация, Контрагент, ДоговорКонтрагента, Номенклатура, Культура, Склад, Урожай, ВидХранения, ДатаРасчета", "Количество, Стоимость");
	
	мСписокСкладов = ЭтотОбъект.ДополнительныеСвойства.СписокСкладов;
	
	Фильтр = СформироватьФильтрЗапроса(" ", "Услуги");
		
	СписокДатПериода = СформироватьСписокДатПериода();
	
	Запрос = Новый Запрос;
			
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаУслуг.Организация,
		|	ТаблицаУслуг.Контрагент,
		|	ТаблицаУслуг.ДоговорКонтрагента,
		|	ТаблицаУслуг.Номенклатура,
		|	ТаблицаУслуг.Культура,
		|	ТаблицаУслуг.Склад,
		|	ТаблицаУслуг.Урожай,
		|	ТаблицаУслуг.ВидХранения,
		|	ТаблицаУслуг.ДатаРасчета,
		|	ТаблицаУслуг.Количество,
		|	ТаблицаУслуг.Стоимость,
		|	ТаблицаУслуг.Ссылка
		|ПОМЕСТИТЬ ТУ
		|ИЗ
		|	&ТаблицаУслуг КАК ТаблицаУслуг
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТУ.Организация,
		|	ТУ.Контрагент,
		|	ТУ.ДоговорКонтрагента,
		|	ТУ.Номенклатура,
		|	ТУ.Культура,
		|	ТУ.Склад,
		|	ТУ.Урожай,
		|	ТУ.ВидХранения,
		|	ТУ.ДатаРасчета,
		|	ЕСТЬNULL(ИНАГРО_РасчетыПоУслугамОстатки.КоличествоОстаток, 0) КАК КоличествоОстаток,
		|	ЕСТЬNULL(ИНАГРО_РасчетыПоУслугамОстатки.СтоимостьОстаток, 0) КАК СтоимостьОстаток,
		|	ЕСТЬNULL(ТУ.Количество, 0) КАК Количество,
		|	ЕСТЬNULL(ТУ.Стоимость, 0) КАК Стоимость,
		|	ТУ.Ссылка
		|ИЗ
		|	ТУ КАК ТУ
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ИНАГРО_РасчетыПоУслугам.Остатки(&ДатаРасчета, ДатаРасчета В (&СписокДатПериода)" + Фильтр + ") КАК ИНАГРО_РасчетыПоУслугамОстатки
		|		ПО (ИНАГРО_РасчетыПоУслугамОстатки.Организация = ТУ.Организация)
		|			И (ИНАГРО_РасчетыПоУслугамОстатки.Контрагент = ТУ.Контрагент)
		|			И (ИНАГРО_РасчетыПоУслугамОстатки.ДоговорКонтрагента = ТУ.ДоговорКонтрагента)
		|			И (ИНАГРО_РасчетыПоУслугамОстатки.Номенклатура = ТУ.Номенклатура)
		|			И (ИНАГРО_РасчетыПоУслугамОстатки.Культура = ТУ.Культура)"+
		?(ЗначениеЗаполнено(Склад),"    И (ИНАГРО_РасчетыПоУслугамОстатки.Склад = ТУ.Склад)", "") +
		?(ЗначениеЗаполнено(Урожай)," 	И (ИНАГРО_РасчетыПоУслугамОстатки.Урожай = ТУ.Урожай)", "") +
		?(ЗначениеЗаполнено(ВидХранения)," 	И (ИНАГРО_РасчетыПоУслугамОстатки.ВидХранения = ТУ.ВидХранения)", "");
		
	Запрос.УстановитьПараметр("ТаблицаУслуг",       ТаблицаУслуг);
	Запрос.УстановитьПараметр("ДатаРасчета",        Новый Граница(КонецДня(Дата), ВидГраницы.Включая));
	Запрос.УстановитьПараметр("СписокДатПериода",   СписокДатПериода);
	Запрос.УстановитьПараметр("Организация",        Организация);
	Запрос.УстановитьПараметр("Контрагент",         Контрагент);
	Запрос.УстановитьПараметр("ДоговорКонтрагента", ДоговорКонтрагента);
	Запрос.УстановитьПараметр("Культура",           Номенклатура);
	Запрос.УстановитьПараметр("Номенклатура",       Номенклатура);

	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		КолОстатка            = Выборка.КоличествоОстаток;
		СписываемоеКоличество = Выборка.Количество;
		СтоимостьОстатка      = Выборка.СтоимостьОстаток;
		СписываемаяСтоимость  = Выборка.Стоимость;
		
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("Номенклатура",Выборка.Номенклатура);
		ПараметрыОтбора.Вставить("Культура", 	Выборка.Культура);
		ПараметрыОтбора.Вставить("Склад", 		Выборка.Склад);
		НайденныеСтроки = ТаблицаУслуг.НайтиСтроки(ПараметрыОтбора);   		
		СтрокаПоиска =  НайденныеСтроки[0];
		
		// Проверка на количество   			
		Если КолОстатка = 0 Тогда
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Номенклатура ""%1"" не списана. Количество остатка = 0!';uk='Номенклатура ""%1"" не списана. Кількість залишку = 0!'"), Выборка.Номенклатура);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения); 	
			
			ТаблицаУслуг.Удалить(СтрокаПоиска);
			
			Продолжить; 
			
		ИначеЕсли КолОстатка <= СписываемоеКоличество Тогда
			
			СтрокаПоиска.Количество = КолОстатка;
			// стоимость регистра списываем в ноль
			СтрокаПоиска.Стоимость  = Выборка.СтоимостьОстаток;
			ЛишнееКоличество        = КолОстатка - СписываемоеКоличество;
			
			Если  ЛишнееКоличество < 0 Тогда
					
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='Номенклатура ""%1"" списывается в количестве: %2, в наличии: %3
					|Услуга списывается в количестве: %3. Лишнее количество списания услуг составляет: %4';uk='Номенклатура ""%1"" списується в кількості: %2, в наявності: %3
					|Послуга списується в кількості: %3. Зайва кількість списання послуг становить: %4'"),
					Выборка.Номенклатура, СписываемоеКоличество, КолОстатка, ЛишнееКоличество);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);			
	
			КонецЕсли;
					
		Иначе
			
			Продолжить;
			
		КонецЕсли;
		
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();

#КонецЕсли
