#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область ПроцедурыИФункцииПечати	

Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт

	// Акт
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "Акт";
	КомандаПечати.Представление = НСтр("ru='Акт сдачи-приема работ (оказание услуг)';uk='Акт здачі-приймання робіт (надання послуг)'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечати";
	КомандаПечати.СписокФорм    = "ФормаСписка,ФормаВыбора,ФормаДокумента";
	
	// Счет
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "Счет";
	КомандаПечати.Представление = НСтр("ru='Счет на оплату';uk='Рахунок на оплату'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечати";
	КомандаПечати.СписокФорм    = "ФормаСписка,ФормаВыбора,ФормаДокумента";
	
	// Расчет хранения
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "РасчетХранения";
	КомандаПечати.Представление = НСтр("ru='Расчет хранения';uk='Розрахунок зберігання'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечати";
	КомандаПечати.СписокФорм    = "ФормаСписка,ФормаВыбора,ФормаДокумента";	
	
	// Реестр документов
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "Реестр";
	КомандаПечати.Представление = НСтр("ru='Реестр документов';uk='Реєстр документів'");
	КомандаПечати.ЗаголовокФормы= НСтр("ru='Реестр документов ""Расчет услуг""';uk='Реєстр документів ""Розрахунок послуг""'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечатиРеестраДокументов";
	КомандаПечати.СписокФорм    = "ФормаСписка";
	КомандаПечати.Порядок       = 100; 	
		
КонецПроцедуры

Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	// Устанавливаем признак доступности печати покомплектно.
	ПараметрыВывода.ДоступнаПечатьПоКомплектно = Истина;
	
	// Проверяем, нужно ли для макета СчетЗаказа формировать табличный документ.
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "Счет") Тогда
		// Формируем табличный документ и добавляем его в коллекцию печатных форм.
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "Счет", НСтр("ru='Счет на оплату';uk='Рахунок на оплату'"), 
		ПечатьСчета(МассивОбъектов, ОбъектыПечати, ПараметрыВывода), , "Документ.ИНАГРО_РасчетУслуг.ПФ_MXL_Счет", ,Истина);
	КонецЕсли;

	// Проверяем, нужно ли для макета СчетЗаказа формировать табличный документ.
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "Акт") Тогда
		// Формируем табличный документ и добавляем его в коллекцию печатных форм.
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "Акт", НСтр("ru='Акт сдачи-приема работ (оказание услуг)';uk='Акт здачі-приймання робіт (надання послуг)'"), 
		ПечатьАкт(МассивОбъектов, ОбъектыПечати, ПараметрыВывода), , "Документ.ИНАГРО_РасчетУслуг.ПФ_XML_Акт", ,Истина);
	КонецЕсли;
		
	// Проверяем, нужно ли для макета СчетЗаказа формировать табличный документ.
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "РасчетХранения") Тогда
		// Формируем табличный документ и добавляем его в коллекцию печатных форм.
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "РасчетХранения", НСтр("ru='Расчет хранения';uk='Розрахунок зберігання'"), 
		ПечатьХранения(МассивОбъектов, ОбъектыПечати, ПараметрыВывода), , "Документ.ИНАГРО_РасчетУслуг.ПФ_XML_РасчетХранения", ,Истина);
	КонецЕсли;
	
КонецПроцедуры

Функция ПечатьСчета(МассивОбъектов, ПараметрыПечати, ПараметрыВывода)
		
		ТабДокумент = Новый ТабличныйДокумент;
		Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ИНАГРО_РасчетУслуг.ПФ_MXL_Счет");
		КодЯзыкаПечать = ПараметрыВывода.КодЯзыкаДляМногоязычныхПечатныхФорм;
		Макет.КодЯзыкаМакета = КодЯзыкаПечать;
		
		Для каждого Ссылка Из МассивОбъектов Цикл
			
			СведенияОПоставщике  = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Ссылка.Организация, Ссылка.Дата),,,КодЯзыкаПечать);
			СведенияОПокупателе = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Ссылка.Контрагент, Ссылка.Дата),,,КодЯзыкаПечать);
			РеквизитыОрганизации = ПолучитьРеквизитыОрганизации(Ссылка, Ссылка.Дата);
			Руководители = ИНАГРО_Элеватор.ОтветственныеЛицаОрганизации(Ссылка.Организация,Ссылка.Дата);
			
			ОблЗаголовок = Макет.ПолучитьОбласть("Заголовок");
			ОблЗаголовок.Параметры.ТекстЗаголовка = НСтр("ru='Счет на оплату:';uk='Рахунок на оплату:'",КодЯзыкаПечать) + 
			" № " + Ссылка.Номер + НСтр("ru=' от ';uk=' від '",КодЯзыкаПечать) + Формат(Ссылка.Дата, "ДФ='дд ММММ гггг';Л="+ Локализация.ОпределитьКодЯзыкаДляФормат(КодЯзыкаПечать));
			ТабДокумент.Вывести(ОблЗаголовок);
			
			ОблПоставщик = Макет.ПолучитьОбласть("Поставщик");
			ОблПоставщик.Параметры.ТекстПоставщик = НСтр("ru='Поставщик:';uk='Постачальник:'",КодЯзыкаПечать);
			ОблПоставщик.Параметры.ПредставлениеПоставщика = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Ссылка.Организация, Ссылка.Дата), "ПолноеНаименование,ИНН,КПП,ЮридическийАдрес,Телефоны",,КодЯзыкаПечать);
			ОблПоставщик.Параметры.РеквизитыПоставщика = НСтр("ru='Р/с ';uk='Р/р '",КодЯзыкаПечать) + РеквизитыОрганизации.НомерСчета + НСтр("ru=', Банк ';uk=', Банк '",КодЯзыкаПечать) + РеквизитыОрганизации.Банк + НСтр("ru=', МФО ';uk=', МФО '",КодЯзыкаПечать)+ РеквизитыОрганизации.МФО + Символы.ПС + 
			ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Ссылка.Организация, Ссылка.Дата), "ЮридическийАдрес,Телефоны,КодПоЕДРПОУ,КодПоДРФО,ИНН,НомерСвидетельства,ПлательщикНалогаНаПрибыль",,КодЯзыкаПечать);			
			ТабДокумент.Вывести(ОблПоставщик);
			
			ОблПокупатель = Макет.ПолучитьОбласть("Покупатель");
			ОблПокупатель.Параметры.ТекстПокупатель = НСтр("ru='Покупатель:';uk='Покупець:'",КодЯзыкаПечать);
			ОблПокупатель.Параметры.ПредставлениеПокупателя = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Ссылка.Контрагент, Ссылка.Дата), "ПолноеНаименование,ИНН,КПП,ЮридическийАдрес,Телефоны",,КодЯзыкаПечать);															  
			ОблПокупатель.Параметры.РеквизитыПокупателя		= ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Ссылка.Организация, Ссылка.Дата), "Телефоны",,КодЯзыкаПечать);
			ТабДокумент.Вывести(ОблПокупатель);               
			
			ОблДопИнформация = Макет.ПолучитьОбласть("ДопИнформация");
			ОблДопИнформация.Параметры.ЗначениеПараметра = НСтр("ru='Услуги за период с ';uk='Послуги за період з '",КодЯзыкаПечать) + Формат(Ссылка.ДатаНачала,"ДФ=dd.MM.yyyy") + " по " + Формат(Ссылка.ДатаОкончания,"ДФ=dd.MM.yyyy");
			ТабДокумент.Вывести(ОблДопИнформация);
			
			ОблПробел = Макет.ПолучитьОбласть("Пробел");
			ТабДокумент.Вывести(ОблПробел);
			
			ОблШапкаТаблицы = Макет.ПолучитьОбласть("ШапкаТаблицы");
			ОблШапкаТаблицы.Параметры.Товар = НСтр("ru='Товары (работы, услуги) ';uk='Товари (роботи, послуги) '",КодЯзыкаПечать);
			Если Ссылка.СуммаВключаетНДС Тогда
				ОблШапкаТаблицы.Параметры.ЗаголовокЦена = НСтр("ru = 'Цена с НДС';uk = 'Ціна з ПДВ'",КодЯзыкаПечать);
				ОблШапкаТаблицы.Параметры.ЗаголовокСумма = НСтр("ru = 'Сумма с НДС';uk = 'Сума з ПДВ'",КодЯзыкаПечать);
			Иначе
				ОблШапкаТаблицы.Параметры.ЗаголовокЦена = НСтр("ru = 'Цена без НДС';uk = 'Ціна без ПДВ'",КодЯзыкаПечать);
				ОблШапкаТаблицы.Параметры.ЗаголовокСумма = НСтр("ru = 'Сумма без НДС';uk = 'Сума без ПДВ'",КодЯзыкаПечать);
			КонецЕсли;		
			ТабДокумент.Вывести(ОблШапкаТаблицы);
			
			//Строка
			ОблСтрока = Макет.ПолучитьОбласть("Строка");
			Запрос = новый Запрос;
			Запрос.УстановитьПараметр("Ссылка",Ссылка);
			Запрос.Текст = "ВЫБРАТЬ
			|	ИНАГРО_РасчетУслугУслуги.Номенклатура КАК Номенклатура,
			|	ИНАГРО_РасчетУслугУслуги.Культура,
			|	ИНАГРО_РасчетУслугУслуги.ЕдиницаИзмерения КАК Ед,
			|	СУММА(ИНАГРО_РасчетУслугУслуги.Количество) КАК Количество,
			|	ИНАГРО_РасчетУслугУслуги.Цена,
			|	СУММА(ИНАГРО_РасчетУслугУслуги.Сумма) КАК Сумма,
			|	СУММА(ИНАГРО_РасчетУслугУслуги.СуммаНДС) КАК НДС,
			|	ИНАГРО_РасчетУслугУслуги.СтавкаНДС,
			|	ИНАГРО_РасчетУслуг.СуммаВключаетНДС
			|ИЗ
			|	Документ.ИНАГРО_РасчетУслуг.Услуги КАК ИНАГРО_РасчетУслугУслуги
			|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ИНАГРО_РасчетУслуг КАК ИНАГРО_РасчетУслуг
			|		ПО ИНАГРО_РасчетУслугУслуги.Ссылка = ИНАГРО_РасчетУслуг.Ссылка
			|ГДЕ
			|	ИНАГРО_РасчетУслугУслуги.Ссылка = &Ссылка
			|
			|СГРУППИРОВАТЬ ПО
			|	ИНАГРО_РасчетУслугУслуги.Номенклатура,
			|	ИНАГРО_РасчетУслугУслуги.Культура,
			|	ИНАГРО_РасчетУслугУслуги.ЕдиницаИзмерения,
			|	ИНАГРО_РасчетУслугУслуги.Цена,
			|	ИНАГРО_РасчетУслугУслуги.СтавкаНДС,
			|	ИНАГРО_РасчетУслуг.СуммаВключаетНДС
			|
			|УПОРЯДОЧИТЬ ПО
			|	Номенклатура";
			НомерСтроки = 1;
			Стр = Запрос.Выполнить().Выбрать();
			Пока Стр.Следующий()Цикл		
				ОблСтрока.Параметры.Заполнить(Стр);
				ОблСтрока.Параметры.Товар = ""+Стр.Номенклатура.НаименованиеПолное+" ("+Стр.Культура.НаименованиеПолное+")";
				ОблСтрока.Параметры.НомерСтроки = НомерСтроки;
				ТабДокумент.Вывести(ОблСтрока);
				НомерСтроки = НомерСтроки + 1;
			КонецЦикла;
			
			ОблИтого = Макет.ПолучитьОбласть("Итого");
			ВсегоСумма = Запрос.Выполнить().Выгрузить().Итог("Сумма");
			СуммаПрописью = ВсегоСумма;
			ОблИтого.Параметры.Всего = ВсегоСумма;
			ТабДокумент.Вывести(ОблИтого);
			
			ОблИтогоНДС = Макет.ПолучитьОбласть("ИтогоНДС");
			ОблИтогоНДС.Параметры.НДС = ?(Ссылка.СуммаВключаетНДС ,НСтр("ru = 'В т.ч. НДС: ';uk = 'У т.ч. ПДВ: '",КодЯзыкаПечать), НСтр("ru = 'Сумма НДС: ';uk = 'Сума ПДВ: '",КодЯзыкаПечать));
			ВсегоНДС = Запрос.Выполнить().Выгрузить().Итог("НДС");
			ОблИтогоНДС.Параметры.ВсегоНДС = ВсегоНДС;
			ТабДокумент.Вывести(ОблИтогоНДС);
			
			Если НЕ Ссылка.СуммаВключаетНДС Тогда
				ОблИтогоДополнительно = Макет.ПолучитьОбласть("ИтогоДополнительно");
				ОблИтогоДополнительно.Параметры.Подпись = НСтр("ru = 'Всего с НДС: ';uk = 'Всього з ПДВ: '",КодЯзыкаПечать);
				ОблИтогоДополнительно.Параметры.Сумма = ВсегоСумма + ВсегоНДС;
				СуммаПрописью = ВсегоСумма + ВсегоНДС; 
				ТабДокумент.Вывести(ОблИтогоДополнительно);
			КонецЕсли;
			
			ОблСуммаПрописью = Макет.ПолучитьОбласть("СуммаПрописью");
			ОблСуммаПрописью.Параметры.СуммаПрописью = ОбщегоНазначенияБПВызовСервера.СформироватьСуммуПрописью(СуммаПрописью, Ссылка.ВалютаДокумента,КодЯзыкаПечать)
		 	+ ?(НЕ Ссылка.СуммаВключаетНДС, "", Символы.ПС + НСтр("ru='В т.ч. НДС: ';uk='У т.ч. ПДВ: '",КодЯзыкаПечать) + ОбщегоНазначенияБПВызовСервера.СформироватьСуммуПрописью(ВсегоНДС, Ссылка.ВалютаДокумента, КодЯзыкаПечать));
			ТабДокумент.Вывести(ОблСуммаПрописью);
			
			ОблПодвалСчета = Макет.ПолучитьОбласть("ПодвалСчета");
			//ОблПодвалСчета.Параметры.Руководитель = Руководители.Руководитель;
			ОблПодвалСчета.Параметры.ГлавныйБухгалтер = Руководители.ГлавныйБухгалтер;
			ОблПодвалСчета.Параметры.Выписал = "";
			ОблПодвалСчета.Параметры.ДатаОплаты = Формат(Ссылка.СрокОплаты,"ДЛФ = Д");
			ТабДокумент.Вывести(ОблПодвалСчета);
			
		КонецЦикла;		
		Возврат ТабДокумент;
	        	
КонецФункции	

Функция ПечатьАкт(МассивОбъектов, ПараметрыПечати, ПараметрыВывода)
	
	ТабДокумент = Новый ТабличныйДокумент;
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ИНАГРО_РасчетУслуг.ПФ_XML_Акт");
	КодЯзыкаПечать = ПараметрыВывода.КодЯзыкаДляМногоязычныхПечатныхФорм;
	Макет.КодЯзыкаМакета = КодЯзыкаПечать;
	
	Для каждого Ссылка Из МассивОбъектов Цикл
			
		СведенияОПоставщике  = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Ссылка.Организация, Ссылка.Дата),,,КодЯзыкаПечать);
		СведенияОПокупателе = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Ссылка.Контрагент, Ссылка.Дата),,,КодЯзыкаПечать);	
			
		//Шапка
		ОБлШапка = Макет.ПолучитьОбласть("Шапка");
		ОБлШапка.Параметры.Организация = Ссылка.Организация.НаименованиеПолное;
		ОблШапка.Параметры.Владелец = Ссылка.Контрагент.НаименованиеПолное;
		СрезДиректора = РегистрыСведений.ОтветственныеЛицаОрганизаций.СрезПоследних(Ссылка.Дата, Новый Структура("СтруктурнаяЕдиница,ОтветственноеЛицо",Ссылка.Организация,Перечисления.ОтветственныеЛицаОрганизаций.Руководитель));
		ФиоДиректора = ?(СрезДиректора.Количество()>0,СрезДиректора[0].ФизическоеЛицо,"____________________");
		ОблШапка.Параметры.ФИОДиректора = ФИОДиректора;
		
		СрезВладельца = РегистрыСведений.ОтветственныеЛицаОрганизаций.СрезПоследних(Ссылка.Дата, Новый Структура("СтруктурнаяЕдиница,ОтветственноеЛицо",Ссылка.Контрагент,Перечисления.ОтветственныеЛицаОрганизаций.Руководитель)); 
		ФИОВладельца = ?(СрезВладельца.Количество()>0,СрезВладельца[0].ФизическоеЛицо,"____________________");
		ОБлШапка.Параметры.ФИОВладельца = ФИОВладельца;
		ТабДокумент.Вывести(ОблШапка);
		
		//Заголовок
		ОблЗаголовок = Макет.ПолучитьОбласть("Заголовок");
		ОблЗаголовок.Параметры.НомерДок = Ссылка.Номер;
		ОБлЗаголовок.Параметры.ДатаДок = Формат(Ссылка.Дата, "ДФ='дд ММММ гггг';Л="+ Локализация.ОпределитьКодЯзыкаДляФормат(КодЯзыкаПечать));
		ОблЗаголовок.Параметры.Владелец = Ссылка.Контрагент.НаименованиеПолное;
		ОБлЗаголовок.Параметры.ФиоВладельца = ФИОВладельца;
		ОблЗаголовок.Параметры.Организация = Ссылка.Организация.НаименованиеПолное;
		ОблЗаголовок.Параметры.ФиоДиректора = ФИОДиректора;
		Заказ = "по договору"+" №"+Ссылка.ДоговорКонтрагента.Номер + НСтр("ru = ' от ';uk = ' від '",КодЯзыкаПечать) +Формат(Ссылка.ДоговорКонтрагента.Дата, "ДФ='дд ММММ гггг';Л="+ Локализация.ОпределитьКодЯзыкаДляФормат(КодЯзыкаПечать));
		ОблЗаголовок.Параметры.ЗаказИнфо = ?(Ссылка.ДоговорКонтрагента.ВидДоговора.Пустая(),"____________________",Заказ);
		Если Ссылка.СуммаВключаетНДС Тогда
			ОблЗаголовок.Параметры.ЗаголовокЦена = НСтр("ru = 'Цена с НДС';uk = 'Ціна з ПДВ'",КодЯзыкаПечать);
			ОблЗаголовок.Параметры.ЗаголовокСумма = НСтр("ru = 'Сумма с НДС';uk = 'Сума з ПДВ'",КодЯзыкаПечать);
		Иначе
			ОблЗаголовок.Параметры.ЗаголовокЦена = НСтр("ru = 'Цена без НДС';uk = 'Ціна без ПДВ'",КодЯзыкаПечать);
			ОблЗаголовок.Параметры.ЗаголовокСумма = НСтр("ru = 'Сумма без НДС';uk = 'Сума без ПДВ'",КодЯзыкаПечать);
		КонецЕсли;		
		ТабДокумент.Вывести(ОблЗаголовок);
		
		//Строка
		ОблСтрока = Макет.ПолучитьОбласть("Строка");
		Запрос = новый Запрос;
		Запрос.УстановитьПараметр("Ссылка",Ссылка);
		Запрос.Текст = "ВЫБРАТЬ
		|	ИНАГРО_РасчетУслугУслуги.Номенклатура КАК Номенклатура,
		|	ИНАГРО_РасчетУслугУслуги.Культура,
		|	ИНАГРО_РасчетУслугУслуги.ЕдиницаИзмерения КАК Ед,
		|	СУММА(ИНАГРО_РасчетУслугУслуги.Количество) КАК Количество,
		|	ИНАГРО_РасчетУслугУслуги.Цена,
		|	СУММА(ИНАГРО_РасчетУслугУслуги.Сумма) КАК Сумма,
		|	СУММА(ИНАГРО_РасчетУслугУслуги.СуммаНДС) КАК НДС,
		|	ИНАГРО_РасчетУслугУслуги.СтавкаНДС,
		|	ИНАГРО_РасчетУслуг.СуммаВключаетНДС
		|ИЗ
		|	Документ.ИНАГРО_РасчетУслуг.Услуги КАК ИНАГРО_РасчетУслугУслуги
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ИНАГРО_РасчетУслуг КАК ИНАГРО_РасчетУслуг
		|		ПО ИНАГРО_РасчетУслугУслуги.Ссылка = ИНАГРО_РасчетУслуг.Ссылка
		|ГДЕ
		|	ИНАГРО_РасчетУслугУслуги.Ссылка = &Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	ИНАГРО_РасчетУслугУслуги.Номенклатура,
		|	ИНАГРО_РасчетУслугУслуги.Культура,
		|	ИНАГРО_РасчетУслугУслуги.ЕдиницаИзмерения,
		|	ИНАГРО_РасчетУслугУслуги.Цена,
		|	ИНАГРО_РасчетУслугУслуги.СтавкаНДС,
		|	ИНАГРО_РасчетУслуг.СуммаВключаетНДС
		|
		|УПОРЯДОЧИТЬ ПО
		|	Номенклатура";
		Стр = Запрос.Выполнить().Выбрать();
		НомерСтроки = 1;
		Пока Стр.Следующий()Цикл		
			ОБлСтрока.Параметры.Заполнить(Стр);
			ОБлСтрока.Параметры.Услуга = ""+Стр.Номенклатура.НаименованиеПолное+" ("+СокрЛП(Стр.Культура.НаименованиеПолное)+")";
			ОБлСтрока.Параметры.НомерСтроки = НомерСтроки;
			ТабДокумент.Вывести(ОБлСтрока);
			НомерСтроки = НомерСтроки + 1;
		КонецЦикла;
		
		выборка=Запрос.Выполнить().Выбрать();
		Если выборка.Количество()>0 Тогда
			выборка.Следующий();
			СуммаСНДС=выборка.СуммаВключаетНДС;
		Иначе
			СуммаСНДС=Ложь;
		КонецЕсли;
		//Итог
		ОблИтог = Макет.ПолучитьОбласть("Итог");
		ОБлИтог.Параметры.НДС = Запрос.Выполнить().Выгрузить().Итог("НДС");
		Если Ссылка.СуммаВключаетНДС Тогда
			ОблИтог.Параметры.ЗаголовкСумма     = НСтр("ru = 'Итого: ';uk = 'Всього: '",КодЯзыкаПечать);
			ОблИтог.Параметры.ЗаголовкСтавкаНДС = НСтр("ru = 'В т.ч. НДС: ';uk = 'У т.ч. ПДВ: '",КодЯзыкаПечать);
			ОблИтог.Параметры.ЗаголовкСуммаСНДС = "";					
			ОблИтог.Параметры.Сумма             = Запрос.Выполнить().Выгрузить().Итог("Сумма");
		Иначе
			ОблИтог.Параметры.ЗаголовкСумма     = НСтр("ru = 'Итого: ';uk = 'Всього: '",КодЯзыкаПечать);
			ОблИтог.Параметры.ЗаголовкСтавкаНДС = НСтр("ru = 'Сумма НДС: ';uk = 'Сума ПДВ: '",КодЯзыкаПечать);
			ОблИтог.Параметры.ЗаголовкСуммаСНДС = НСтр("ru = 'Всего с НДС: ';uk = 'Всього з ПДВ: '",КодЯзыкаПечать);
			ОблИтог.Параметры.Сумма             = Запрос.Выполнить().Выгрузить().Итог("Сумма");
			ОблИтог.Параметры.СуммаСНДС         = Запрос.Выполнить().Выгрузить().Итог("Сумма") + Запрос.Выполнить().Выгрузить().Итог("НДС");
		КонецЕсли;				
		
		Если СуммаСНДС=Истина Тогда
			ОБлИтог.Параметры.ИтогСуммаБезНДСПроп = ЧислоПрописью(НРег(Запрос.Выполнить().Выгрузить().Итог("Сумма")-Запрос.Выполнить().Выгрузить().Итог("НДС")),"Л="+Локализация.ОпределитьКодЯзыкаДляФормат(КодЯзыкаПечать));
			ОблИтог.Параметры.ИтогСуммаСНДСПроп = ЧислоПрописью(НРег(Запрос.Выполнить().Выгрузить().Итог("Сумма")),"Л = "+Локализация.ОпределитьКодЯзыкаДляФормат(КодЯзыкаПечать));	
		Иначе
			ОБлИтог.Параметры.ИтогСуммаБезНДСПроп = ЧислоПрописью(НРег(Запрос.Выполнить().Выгрузить().Итог("Сумма")),"Л="+Локализация.ОпределитьКодЯзыкаДляФормат(КодЯзыкаПечать));
			ОблИтог.Параметры.ИтогСуммаСНДСПроп = ЧислоПрописью(НРег(Запрос.Выполнить().Выгрузить().Итог("Сумма")+Запрос.Выполнить().Выгрузить().Итог("НДС")),"Л = "+Локализация.ОпределитьКодЯзыкаДляФормат(КодЯзыкаПечать));		
		КонецЕсли;
		ТабДокумент.Вывести(ОблИтог);                                                                        
		
		//Дно
		ОблДно = Макет.ПолучитьОбласть("Дно");
		// дно заказчика
		ОблДно.Параметры.ДатаДок = Формат(Ссылка.Дата, "ДФ='дд ММММ гггг';Л="+ Локализация.ОпределитьКодЯзыкаДляФормат(КодЯзыкаПечать));
		ОблДно.Параметры.Владелец = Ссылка.Контрагент.НаименованиеПолное;
		ОблДно.Параметры.ЕГРПОУ = ?(Ссылка.Контрагент.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо,НСтр("ru = 'ЕГРПОУ'; uk = 'ЄДРПОУ'",КодЯзыкаПечать),НСтр("ru = 'Код по ДРФО'; uk = 'Код по ДРФО'",КодЯзыкаПечать));
		ОблДно.Параметры.ЕДРПОУвл = Ссылка.Контрагент.КодПоЕДРПОУ;
		ОБлДно.Параметры.ИННвл = Ссылка.Контрагент.ИНН;
		ОБлДно.Параметры.НомерСвидетельствавл = Ссылка.Контрагент.НомерСвидетельства;
		ОблДно.Параметры.Телефонвл = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОПоставщике, "Телефоны",,КодЯзыкаПечать);
		ОБлДно.Параметры.Адресвл = БухгалтерскийУчетПереопределяемый.ПолучитьАдресИзКонтактнойИнформации(Ссылка.Контрагент,"Юридический");
		
		РеквизитыОрганизации = ПолучитьРеквизитыОрганизации(Ссылка, Ссылка.Дата);
		ОблДно.Параметры.Заполнить(РеквизитыОрганизации);
		ОблДно.Параметры.ЕДРПОУ = Ссылка.Организация.КодПоЕДРПОУ;
		ОБлДно.Параметры.АдресОрг = БухгалтерскийУчетПереопределяемый.ПолучитьАдресИзКонтактнойИнформации(Ссылка.Организация,"Юридический");
		ТабДокумент.Вывести(ОблДно);
	КонецЦикла;
	
	ВОЗВРАТ ТабДокумент;
	
КонецФункции

Функция ПечатьХранения(МассивОбъектов, ПараметрыПечати, ПараметрыВывода)
	
	Перем ВладелецВДоке, ОрганизацияВДоке, НачалоПериода; 
	
	ТабДокумент = Новый ТабличныйДокумент;
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ИНАГРО_РасчетУслуг.ПФ_XML_РасчетХранения");
	КодЯзыкаПечать = ПараметрыВывода.КодЯзыкаДляМногоязычныхПечатныхФорм;
	Макет.КодЯзыкаМакета = КодЯзыкаПечать;
	
	Для каждого Ссылка Из МассивОбъектов Цикл 
		
		Запрос=Новый запрос;
		Запрос.УстановитьПараметр("Ссылка", Ссылка);
		
		Запрос.Текст = "ВЫБРАТЬ
		|	ИНАГРО_РасчетУслугРасчетХранения.Номенклатура КАК Культура,
		|	ИНАГРО_РасчетУслугРасчетХранения.Урожай КАК Урожай,
		|	ИНАГРО_РасчетУслугРасчетХранения.Склад КАК Склад,
		|	ИНАГРО_РасчетУслугРасчетХранения.ВидХранения КАК ВидХранения,
		|	МАКСИМУМ(ИНАГРО_РасчетУслугРасчетХранения.ДатаНачала) КАК ДатаНачала,
		|	МАКСИМУМ(ИНАГРО_РасчетУслугРасчетХранения.ДатаКонца) КАК ДатаКонца,
		|	ИНАГРО_РасчетУслугРасчетХранения.Вес КАК Вес,
		|	МАКСИМУМ(ИНАГРО_РасчетУслугРасчетХранения.КвоДней) КАК КвоДней,
		|	МАКСИМУМ(ИНАГРО_РасчетУслугРасчетХранения.ДнейВМесяце) КАК ДнейВМесяце,
		|	СУММА(ИНАГРО_РасчетУслугРасчетХранения.Количество) КАК Количество,
		|	ИНАГРО_РасчетУслугРасчетХранения.Цена КАК Цена,
		|	СУММА(ИНАГРО_РасчетУслугРасчетХранения.Сумма) КАК Сумма,
		|	СУММА(ИНАГРО_РасчетУслугРасчетХранения.СуммаНДС) КАК СуммаНДС
		|ИЗ
		|	Документ.ИНАГРО_РасчетУслуг.РасчетХранения КАК ИНАГРО_РасчетУслугРасчетХранения
		|ГДЕ
		|	ИНАГРО_РасчетУслугРасчетХранения.Ссылка.Ссылка = &Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	ИНАГРО_РасчетУслугРасчетХранения.Склад,
		|	ИНАГРО_РасчетУслугРасчетХранения.Номенклатура,
		|	ИНАГРО_РасчетУслугРасчетХранения.Урожай,
		|	ИНАГРО_РасчетУслугРасчетХранения.ВидХранения,
		|	ИНАГРО_РасчетУслугРасчетХранения.Вес,
		|	ИНАГРО_РасчетУслугРасчетХранения.Цена
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДатаНачала
		|ИТОГИ ПО
		|	Культура,
		|	Урожай,
		|	Склад,
		|	ВидХранения"; 
		
		РезультатЗапрос = Запрос.Выполнить();			   
		
		Если НЕ РезультатЗапрос.Пустой() Тогда			
			
			ВыборкаКультуры = РезультатЗапрос.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Культура");
			
			Пока ВыборкаКультуры.Следующий() Цикл
				
				// заполнение шапки
				ОбластьШапки                       = Макет.ПолучитьОбласть("Шапка");
				ОбластьШапки.Параметры.Начало      = Формат(Ссылка.ДатаНачалаХранения, "ДЛФ = Д");
				ОбластьШапки.Параметры.Конец       = Формат(Ссылка.ДатаОкончанияХранения,"ДЛФ = Д");
				ОбластьШапки.Параметры.Организация = Ссылка.Организация.НаименованиеПолное;
				ОбластьШапки.Параметры.Владелец    = Ссылка.Контрагент;
				ИНАГРО_Элеватор.ПолучитьНаименованияКонтрагента(ОбластьШапки.Параметры.Владелец);
				ОбластьШапки.Параметры.Культура    = ВыборкаКультуры.Культура;
				ТабДокумент.Вывести(ОбластьШапки);
				
				ВыборкаУрожая = ВыборкаКультуры.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Урожай");
				
				Пока ВыборкаУрожая.Следующий() Цикл
					
					// выведем строку урожая
					ВыборкаСклада = ВыборкаУрожая.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Склад");
					
					Пока ВыборкаСклада.Следующий() Цикл
						
						ВыборкаВидаХранения = ВыборкаСклада.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "ВидХранения");
						
						Пока ВыборкаВидаХранения.Следующий() Цикл
							
							// выведем стрку вида хранения
							ОбластьВидаХранения                             = Макет.ПолучитьОбласть("ВидХранения");
							ОбластьВидаХранения.Параметры.СтрокаДетализации = НСтр("ru = 'Урожай: " + ВыборкаУрожая.Урожай + ". Склад: " + ВыборкаСклада.Склад + ". Вид хранения: " + ВыборкаВидаХранения.ВидХранения + ".'; uk = 'Врожай: " + ВыборкаУрожая.Урожай + ". Склад: " + ВыборкаСклада.Склад + ". Вид зберігання: " + ВыборкаВидаХранения.ВидХранения + ".'", КодЯзыкаПечать); 
							ТабДокумент.Вывести(ОбластьВидаХранения);
							
							Выборка = ВыборкаВидаХранения.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
							
							// выведем шапку таблицы
							ОбластьШапкиТаблицы = Макет.ПолучитьОбласть("ШапкаТаблицы");
							Если Ссылка.СуммаВключаетНДС Тогда
								ОбластьШапкиТаблицы.Параметры.ЗаголовокЦена = НСтр("ru = 'Цена с НДС';uk = 'Ціна з ПДВ'");
								ОбластьШапкиТаблицы.Параметры.ЗаголовокСумма = НСтр("ru = 'Сумма с НДС';uk = 'Сума з ПДВ'");
							Иначе
								ОбластьШапкиТаблицы.Параметры.ЗаголовокЦена = НСтр("ru = 'Цена без НДС';uk = 'Ціна без ПДВ'");
								ОбластьШапкиТаблицы.Параметры.ЗаголовокСумма = НСтр("ru = 'Сумма без НДС';uk = 'Сума без ПДВ'");
							КонецЕсли;						
							ТабДокумент.Вывести(ОбластьШапкиТаблицы);
							
							Пока Выборка.Следующий() Цикл
								
								// выведем строки таблицы
								ОбластьСтроки                       = Макет.ПолучитьОбласть("Строка");
								ОбластьСтроки.Параметры.ДатаНачала  = Формат(Выборка.ДатаНачала, "ДЛФ = Д");
								ОбластьСтроки.Параметры.ДатаКонца   = Формат(Выборка.ДатаКонца, "ДЛФ = Д");
								ОбластьСтроки.Параметры.Вес         = Формат(Выборка.Вес, "ЧЦ=15");
								ОбластьСтроки.Параметры.КвоДней     = Выборка.КвоДней;
								ОбластьСтроки.Параметры.ТДни        = Формат((Выборка.Вес / 1000) * Выборка.КвоДней, "ЧЦ=15; ЧДЦ=3");
								ОбластьСтроки.Параметры.ДнейВМесяце = Выборка.ДнейВМесяце;
								ОбластьСтроки.Параметры.Количество  = Формат(Выборка.Количество, "ЧЦ=15; ЧДЦ=3");
								ОбластьСтроки.Параметры.Цена        = Выборка.Цена;
								Если Ссылка.СуммаВключаетНДС Тогда
									ОбластьСтроки.Параметры.Сумма       = Выборка.Сумма;
								Иначе
									ОбластьСтроки.Параметры.Сумма       = Выборка.Сумма;
								КонецЕсли;
								ТабДокумент.Вывести(ОбластьСтроки);
								
							КонецЦикла;	 
							
							ОбластьПустойСтроки = Макет.ПолучитьОбласть("ПустаяСтрока");
							ТабДокумент.Вывести(ОбластьПустойСтроки);
							
						КонецЦикла;	 
						
					КонецЦикла;
					
				КонецЦикла;	
				
				//Дно
				ОбластьДно = Макет.ПолучитьОбласть("Дно");
				ОбластьДно.Параметры.Организация    = Ссылка.Организация.НаименованиеПолное;
				//ОбластьДно.Параметры.Пользователь   = ПараметрыСеанса.ТекущийПользователь.Наименование;
				ОбластьДно.Параметры.Количество     = Формат(ВыборкаКультуры.Количество, "ЧЦ=15; ЧДЦ=3");		
				СтавкаНДС      = ИНАГРО_Элеватор.ПолучитьПредопределеннуюНоменклатуру("Хранение").СтавкаНДС;
				ОбластьДно.Параметры.НДС            = ВыборкаКультуры.СуммаНДС;
				Если Ссылка.СуммаВключаетНДС Тогда
					ОбластьДно.Параметры.ЗаголовкСумма = НСтр("ru = 'Итого сумма: ';uk = 'Всього сума: '");
					ОбластьДно.Параметры.ЗаголовкСтавкаНДС = НСтр("ru = 'В т.ч. НДС: ';uk = 'В т.ч. НДС: '");
					ОбластьДно.Параметры.ЗаголовкСуммаСНДС = "";					
					ОбластьДно.Параметры.Сумма          = ВыборкаКультуры.Сумма;
				Иначе
					ОбластьДно.Параметры.ЗаголовкСумма = НСтр("ru = 'Итого сумма: ';uk = 'Всього сума: '");
					ОбластьДно.Параметры.ЗаголовкСтавкаНДС = НСтр("ru = 'Сумма НДС: ';uk = 'Сума НДС: '");
					ОбластьДно.Параметры.ЗаголовкСуммаСНДС = НСтр("ru = 'Всего с НДС: ';uk = 'Всього з НДС: '");
					ОбластьДно.Параметры.Сумма          = ВыборкаКультуры.Сумма;
					ОбластьДно.Параметры.СуммаСНДС      = ВыборкаКультуры.Сумма + ВыборкаКультуры.СуммаНДС;
				КонецЕсли;				
				
				ТабДокумент.Вывести(ОбластьДно);
				ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				
			КонецЦикла;	
		
		
		ВОЗВРАТ ТабДокумент;
	Иначе 
		ТекстСообщения = НСтр("ru = 'Невозможно выполнить печать расчета хранения по скольку табличная часть пустая!';uk = 'Неможливо виконати друк розрахунку зберігання, оскільки таблична частина пуста!'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	КонецЦикла;
КонецФункции

Функция ПолучитьРеквизитыОрганизации(Ссылка,Дата)
		
		КодЯзыкаПечать = "uk";        
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Ссылка",Ссылка);
		Запрос.УстановитьПараметр("Дата", Дата);
		Запрос.УстановитьПараметр("НалогНаПрибыль", Справочники.СхемыНалогообложения.НалогНаПрибыльИНДС);
		Запрос.УстановитьПараметр("Текст1",НСтр("ru = 'Является плательщиком налога на прибыль на общих основаниях'; uk = 'Є платником податку на прибуток на загальних підставах'",КодЯзыкаПечать));
		Запрос.УстановитьПараметр("Текст2",НСтр("ru = 'Не является плательщиком налога на прибыль на общих основаниях'; uk = 'Не є платником податку на прибуток на загальних підставах'",КодЯзыкаПечать));
		Запрос.Текст = "ВЫБРАТЬ
		               |	ИНАГРО_РасчетУслуг.Организация КАК Организация
		               |ПОМЕСТИТЬ Услуги
		               |ИЗ
		               |	Документ.ИНАГРО_РасчетУслуг КАК ИНАГРО_РасчетУслуг
		               |ГДЕ
		               |	ИНАГРО_РасчетУслуг.Ссылка = &Ссылка
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	Услуги.Организация.НаименованиеПолное КАК Организация,
		               |	Услуги.Организация.ОсновнойБанковскийСчет.НомерСчета КАК НомерСчета,
		               |	Услуги.Организация.ОсновнойБанковскийСчет.Банк КАК Банк,
		               |	Услуги.Организация.ОсновнойБанковскийСчет.Банк.Код КАК МФО,
		               |	КодыОрганизацииСрезПоследних.ИНН КАК ИНН,
		               |	КодыОрганизацииСрезПоследних.НомерСвидетельства КАК НомерСвидетельства
		               |ИЗ
		               |	Услуги КАК Услуги
		               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КодыОрганизации.СрезПоследних КАК КодыОрганизацииСрезПоследних
		               |		ПО Услуги.Организация = КодыОрганизацииСрезПоследних.Организация";
		
		РеквизитыПоставщика = Запрос.Выполнить().Выбрать();
		РеквизитыПоставщика.Следующий();
		
		Возврат РеквизитыПоставщика;
	КонецФункции

Функция ПолучитьДополнительныеРеквизитыДляРеестра() Экспорт
	
	Результат = Новый Структура;	
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ПрограммныйИнтерфейс

// Процедура заполняет счета учета расчетов
//
// Параметры:
// Объект - СправочникСсылка - объект контактной информации
//
Процедура ЗаполнитьСчетаУчетаРасчетов(Объект) Экспорт
	
	СчетаУчета = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаРасчетовСКонтрагентом(
		Объект.Организация, Объект.Контрагент, Объект.ДоговорКонтрагента);
	
	Если Объект.ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем Тогда
		Объект.СчетУчетаРасчетовСКонтрагентом = СчетаУчета.СчетРасчетовПокупателя;
		Объект.СчетУчетаРасчетовПоАвансам     = СчетаУчета.СчетАвансовПокупателя;
	КонецЕсли;
	
	Объект.СчетУчетаНДС = СчетаУчета.СчетУчетаНДСПродаж;
	
КонецПроцедуры

// Заполняет сведения о номенклатуре в табличной части документа
//
// Параметры:
// Объект - СправочникСсылка - объект контактной информации
// ИмяТабличнойЧасти - Строка- имя для табличной части документа.
//
Процедура ЗаполнитьСчетаУчетаВТабличнойЧасти(Объект, ИмяТабличнойЧасти) Экспорт

	ТабличнаяЧасть = Объект[ИмяТабличнойЧасти];
	
	ДанныеОбъекта = Новый Структура(
		"Дата, Организация, Склад,
		|Контрагент, ДоговорКонтрагента, ТипЦен,
		|СуммаВключаетНДС, ВалютаДокумента,
		|КурсВзаиморасчетов, КратностьВзаиморасчетов");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
		
	СоответствиеСведенийОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОСпискеНоменклатуры(
		ОбщегоНазначения.ВыгрузитьКолонку(ТабличнаяЧасть, "Номенклатура", Истина), ДанныеОбъекта);
	
	Для Каждого СтрокаТабличнойЧасти Из ТабличнаяЧасть Цикл
		СведенияОНоменклатуре = СоответствиеСведенийОНоменклатуре.Получить(СтрокаТабличнойЧасти.Номенклатура);
		ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(ДанныеОбъекта, СтрокаТабличнойЧасти, СведенияОНоменклатуре);
	КонецЦикла;

КонецПроцедуры

// Заполняет сведения о номенклатуре в строке табличной части документа
//
// Параметры:
//  ДанныеОбъекта         - структура данных объекта, используемых при заполнении счетов учета (вид операции,
//                          вид договора контрагента, признак комиссионной торговли и т.п.)
//  СтрокаТабличнойЧасти  - строка табличной части документа
//  СведенияОНоменклатуре - структура сведений о номенклатуре, либо структура счетов учета.
//
Процедура ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(ДанныеОбъекта, СтрокаТабличнойЧасти, СведенияОНоменклатуре) Экспорт
	
	Если СведенияОНоменклатуре = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если СведенияОНоменклатуре.Свойство("СчетаУчета") Тогда
		// СведенияОНоменклатуре - структура сведений номенклатуры
		СчетаУчета = СведенияОНоменклатуре.СчетаУчета;
	ИначеЕсли СведенияОНоменклатуре.Свойство("СчетУчетаБУ") Тогда
		// СведенияОНоменклатуре - структура счетов учета номенклатуры
		СчетаУчета = СведенияОНоменклатуре;
	Иначе
		Возврат;
	КонецЕсли;
		
	Если ЗначениеЗаполнено(СчетаУчета.СхемаРеализации) Тогда
		СтрокаТабличнойЧасти.СхемаРеализации = СчетаУчета.СхемаРеализации;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СчетаУчета.НалоговоеНазначение) Тогда
		СтрокаТабличнойЧасти.НалоговоеНазначение = СчетаУчета.НалоговоеНазначение;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СчетаУчета.НалоговоеНазначениеДоходовИЗатрат) Тогда
		СтрокаТабличнойЧасти.НалоговоеНазначениеДоходовИЗатрат = СчетаУчета.НалоговоеНазначениеДоходовИЗатрат;
	КонецЕсли;
	
	СчетаУчетаСКонтрагентами = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаРасчетовСКонтрагентом(
		ДанныеОбъекта.Организация, ДанныеОбъекта.Контрагент, ДанныеОбъекта.ДоговорКонтрагента);
	
	Если СчетаУчетаСКонтрагентами <> Неопределено тогда
		СтрокаТабличнойЧасти.СчетУчетаНДС = СчетаУчетаСКонтрагентами.СчетУчетаНДСПродаж;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПолучитьКоличествоДнейВМесяце(ДатаНачалаПериода, ДатаОкончанияПериода) Экспорт
	
	Если НачалоМесяца(ДатаНачалаПериода) = НачалоМесяца(ДатаОкончанияПериода) Тогда
		// Если период хранения находится в рамках одного месяца
		// Берем для точности реальное к-во дней в месяце.
		ДнейВМесяце = День(КонецМесяца(ДатаОкончанияПериода));
	Иначе
		ДнейВМесяце = 30;
	КонецЕсли;
	
	Возврат ДнейВМесяце;
	
КонецФункции

#КонецОбласти

#Область ФормированиеТиповыхДокументов

Функция ПолучитьФормируемыеДокументы(ДокументСсылка) Экспорт
	
	Возврат Новый Структура("РеализацияТоваровУслуг", ПолучитьТаблицуДляФормированияРеализацияТоваровУслуг(ДокументСсылка));		
	
КонецФункции

Функция ПолучитьТаблицуДляФормированияРеализацияТоваровУслуг(ДокументСсылка)
	
	ВидОперацииДокумента = Перечисления.ВидыОперацийРеализацияТоваров.ПродажаКомиссия;
	ВидПередачи 		 = Перечисления.ИНАГРО_ВидыПередачиТоваров.СоСклада;
	
	СчетаУчета = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаРасчетовСКонтрагентом(
		ДокументСсылка.Организация, ДокументСсылка.Контрагент, ДокументСсылка.ДоговорКонтрагента);
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ИНАГРО_РасчетУслугУслуги.Ссылка.Дата КАК Дата,
		|	ИНАГРО_РасчетУслугУслуги.Ссылка.АвторасчетНДС КАК АвторасчетНДС,
		|	ИНАГРО_РасчетУслугУслуги.Ссылка.АдресДоставки КАК АдресДоставки,
		|	ИНАГРО_РасчетУслугУслуги.Ссылка.БанковскийСчетОрганизации КАК БанковскийСчетОрганизации,
		|	ИНАГРО_РасчетУслугУслуги.Ссылка.ВалютаДокумента КАК ВалютаДокумента,
		|	ИНАГРО_РасчетУслугУслуги.Ссылка.Грузополучатель КАК Грузополучатель,
		|	ИНАГРО_РасчетУслугУслуги.Ссылка.ДоверенностьДата КАК ДоверенностьДата,
		|	ИНАГРО_РасчетУслугУслуги.Ссылка.ДоверенностьНомер КАК ДоверенностьНомер,
		|	ИНАГРО_РасчетУслугУслуги.Ссылка.ДоверенностьСерия КАК ДоверенностьСерия,
		|	ИНАГРО_РасчетУслугУслуги.Ссылка.ДоговорКонтрагента КАК ДоговорКонтрагента,
		|	ИНАГРО_РасчетУслугУслуги.Ссылка.ДокументПодтверждающийПолномочия КАК ДокументПодтверждающийПолномочия,
		|	ИНАГРО_РасчетУслугУслуги.Ссылка.Комментарий КАК Комментарий,
		|	ИНАГРО_РасчетУслугУслуги.Ссылка.Контрагент КАК Контрагент,
		|	ИНАГРО_РасчетУслугУслуги.Ссылка.КратностьВзаиморасчетов КАК КратностьВзаиморасчетов,
		|	ИНАГРО_РасчетУслугУслуги.Ссылка.КурсВзаиморасчетов КАК КурсВзаиморасчетов,
		|	ИНАГРО_РасчетУслугУслуги.Ссылка.МестоСоставленияДокумента КАК МестоСоставленияДокумента,
		|	ИНАГРО_РасчетУслугУслуги.Ссылка.Организация КАК Организация,
		|	ИНАГРО_РасчетУслугУслуги.Ссылка.Получил КАК Получил,
		|	ИНАГРО_РасчетУслугУслуги.Ссылка.ПолучилПоДругомуДокументу КАК ПолучилПоДругомуДокументу,
		|	ИНАГРО_РасчетУслугУслуги.Ссылка.ПредставительОрганизации КАК ПредставительОрганизации,
		|	ИНАГРО_РасчетУслугУслуги.Ссылка.Склад КАК Склад,
		|	ИНАГРО_РасчетУслугУслуги.Ссылка.СуммаВключаетНДС КАК СуммаВключаетНДС,
		|	ИНАГРО_РасчетУслугУслуги.Ссылка.СчетУчетаНДС КАК СчетУчетаНДС,
		|	ИНАГРО_РасчетУслугУслуги.Ссылка.СчетУчетаРасчетовПоАвансам КАК СчетУчетаРасчетовПоАвансам,
		|	ИНАГРО_РасчетУслугУслуги.Ссылка.СчетУчетаРасчетовСКонтрагентом КАК СчетУчетаРасчетовСКонтрагентом,
		|	ИНАГРО_РасчетУслугУслуги.Ссылка.ТипЦен КАК ТипЦен,
		|	ИНАГРО_РасчетУслугУслуги.Номенклатура КАК Номенклатура,
		|	ИНАГРО_РасчетУслугУслуги.Культура КАК Культура,
		|	ИНАГРО_РасчетУслугУслуги.Количество КАК Количество,
		|	ИНАГРО_РасчетУслугУслуги.ТонноДни КАК ТонноДни,
		|	ИНАГРО_РасчетУслугУслуги.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	ИНАГРО_РасчетУслугУслуги.Цена КАК Цена,
		|	ИНАГРО_РасчетУслугУслуги.Сумма КАК Сумма,
		|	ИНАГРО_РасчетУслугУслуги.СтавкаНДС КАК СтавкаНДС,
		|	ИНАГРО_РасчетУслугУслуги.СуммаНДС КАК СуммаНДС,
		|	ИНАГРО_РасчетУслугУслуги.СхемаРеализации КАК СхемаРеализации,
		|	ИНАГРО_РасчетУслугУслуги.НалоговоеНазначение КАК НалоговоеНазначение,
		|	ИНАГРО_РасчетУслугУслуги.НалоговоеНазначениеДоходовИЗатрат КАК НалоговоеНазначениеДоходовИЗатрат,
		|	ИНАГРО_РасчетУслугУслуги.СуммаБезСкидки КАК СуммаБезСкидки,
		|	ИНАГРО_РасчетУслугУслуги.СуммаСкидки КАК СуммаСкидки
		|ИЗ
		|	Документ.ИНАГРО_РасчетУслуг.Услуги КАК ИНАГРО_РасчетУслугУслуги
		|ГДЕ
		|	ИНАГРО_РасчетУслугУслуги.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
		
	ТаблицаУслуги = Запрос.Выполнить().Выгрузить();	

	ТаблицаУслуги.Колонки.Добавить("ВидОперации");
	ТаблицаУслуги.Колонки.Добавить("Ответственный");
	ТаблицаУслуги.Колонки.Добавить("КодФормирования");
	ТаблицаУслуги.Колонки.Добавить("СчетУчетаРасчетовПоТаре");
	ТаблицаУслуги.Колонки.Добавить("СчетУчетаРасчетовПоТареПоАвансам"); 
	ТаблицаУслуги.Колонки.Добавить("СчетУчетаНДСПодтвержденный");
	ТаблицаУслуги.Колонки.Добавить("ИНАГРО_ВидПередачи");
	
	ТаблицаУслуги.Колонки.Добавить("Содержание");

	ТаблицаУслуги.ЗаполнитьЗначения(ВидОперацииДокумента,                       "ВидОперации");
	ТаблицаУслуги.ЗаполнитьЗначения(Пользователи.ТекущийПользователь(),         "Ответственный");
	ТаблицаУслуги.ЗаполнитьЗначения(Перечисления.ИНАГРО_КодФормирования.Общий,  "КодФормирования");	// !!!!!
	ТаблицаУслуги.ЗаполнитьЗначения(ВидПередачи,                                "ИНАГРО_ВидПередачи");	
		
	Если НЕ ЗначениеЗаполнено(ДокументСсылка.СчетУчетаРасчетовСКонтрагентом) Тогда
		ТаблицаУслуги.ЗаполнитьЗначения(СчетаУчета.СчетРасчетовПокупателя, "СчетУчетаРасчетовСКонтрагентом");
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ДокументСсылка.СчетУчетаРасчетовПоАвансам) Тогда
		ТаблицаУслуги.ЗаполнитьЗначения(СчетаУчета.СчетАвансовПокупателя, "СчетУчетаРасчетовПоАвансам");
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ДокументСсылка.СчетУчетаНДС) Тогда
		ТаблицаУслуги.ЗаполнитьЗначения(СчетаУчета.СчетУчетаНДСПродаж, "СчетУчетаНДС");
	КонецЕсли;
	ТаблицаУслуги.ЗаполнитьЗначения(СчетаУчета.СчетУчетаТарыПокупателя,          "СчетУчетаРасчетовПоТаре");
	ТаблицаУслуги.ЗаполнитьЗначения(СчетаУчета.СчетАвансовПоТареПокупателя,      "СчетУчетаРасчетовПоТареПоАвансам");	
	ТаблицаУслуги.ЗаполнитьЗначения(СчетаУчета.СчетУчетаНДСПродажПодтвержденный, "СчетУчетаНДСПодтвержденный");
	
	ЗаполнитьКолонкиТаблицыУслуги(ДокументСсылка, ТаблицаУслуги);		
		
	ТаблицаШапки = ТаблицаУслуги.Скопировать();
	ТаблицаШапки.Свернуть(РеквизитыШапкиФормируемогоДокумента("РеализацияТоваровУслуг"));
		
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("Шапка",  ТаблицаШапки);	
	СтруктураВозврата.Вставить("Услуги", ТаблицаУслуги);
	
	Возврат СтруктураВозврата;
	
КонецФункции

Процедура ЗаполнитьКолонкиТаблицыУслуги(ДокументСсылка, ТаблицаУслуги)
		
	Для Каждого СтрокаТаблицы Из ТаблицаУслуги Цикл		
		//Если СтрокаТаблицы.Номенклатура = ИНАГРО_Элеватор.ПолучитьПредопределеннуюНоменклатуру("Хранение") Тогда
		//	СтрокаТаблицы.Количество = СтрокаТаблицы.ТонноДни;
		//КонецЕсли;
		СтрокаТаблицы.Содержание = Строка("" + СтрокаТаблицы.Номенклатура + " (" + СтрокаТаблицы.Культура + ")");
	КонецЦикла;

КонецПроцедуры

Функция ПроверитьУсловияФормирования(ДокументСсылка) Экспорт
	
	Возврат Истина;
	
КонецФункции

Функция РеквизитыШапкиФормируемогоДокумента(ИмяДокумента) Экспорт
	
	СтрокаРеквизитовШапки = "Дата, АвторасчетНДС, АдресДоставки,
							|БанковскийСчетОрганизации, ВалютаДокумента, Грузополучатель,
							|ДоверенностьДата, ДоверенностьНомер, ДоверенностьСерия,
							|ДоговорКонтрагента, ДокументПодтверждающийПолномочия, Комментарий,
							|Контрагент, КратностьВзаиморасчетов, КурсВзаиморасчетов,
							|МестоСоставленияДокумента, Организация, Получил,
							|ПолучилПоДругомуДокументу, ПредставительОрганизации, Склад,
							|СуммаВключаетНДС, СчетУчетаНДС, СчетУчетаРасчетовПоАвансам,
							|СчетУчетаРасчетовСКонтрагентом, ТипЦен, ВидОперации, Ответственный,
							|КодФормирования, СчетУчетаРасчетовПоТаре, СчетУчетаРасчетовПоТареПоАвансам, 
							|СчетУчетаНДСПодтвержденный, ИНАГРО_ВидПередачи";
	 		
	Возврат СтрокаРеквизитовШапки;
	
КонецФункции 

#КонецОбласти

#КонецЕсли