#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды 
	
	Если Параметры.Ключ.Пустая() Тогда
		ПодготовитьФормуНаСервере();		
	КонецЕсли;
	
	// Уведомим о появлении функционала рабочей даты
	ЭтаФорма.НастройкиПредупреждений = ОбщегоНазначенияБП.НастройкиПредупрежденийОбИзменениях("РабочаяДатаИзДокумента");
	 
	// Показываем, если это новый документ и сама рабочая дата еще не установлена.
	ЭтаФорма.НастройкиПредупреждений.РабочаяДатаИзДокумента = ЭтаФорма.НастройкиПредупреждений.РабочаяДатаИзДокумента
	 	И ЭтаФорма.Параметры.Ключ.Пустая()
	  	И НЕ ЗначениеЗаполнено(БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("РабочаяДата"));	  
		
	// Активизировать первую непустую табличную часть
	АктивизироватьТабличнуюЧасть = ОбщегоНазначенияБПВызовСервера.ПолучитьПервуюНепустуюВидимуюТабличнуюЧасть(
		ЭтаФорма, СписокВидимыхТабличныхЧастей());	
	ОбщегоНазначенияБПВызовСервера.АктивизироватьЭлементФормы(ЭтаФорма, АктивизироватьТабличнуюЧасть);

	// Авторасчет НДС
	ПерерасчетПроизведен = Истина;

	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если Объект.Проведен И Объект.ЗапретРедактированияНалоговойНакладной Тогда
		ЗаблокироватьНалоговуюНакладную(Объект.Ссылка); 
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "РеализацияУслуг_СозданаНалоговаяНакладная" Тогда
		Элементы.СформированныеДокументы.Обновить();
	Иначе
		ОбщегоНазначенияБПКлиент.ОбработкаОповещенияФормыДокумента(ЭтаФорма, Объект.Ссылка, ИмяСобытия, Параметр, Источник);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	ПодготовитьФормуНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ТекущийОбъект.ДополнительныеСвойства.Вставить("СписокСкладов", СписокСкладов);	
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ЗаполнитьДобавленныеКолонкиТаблиц();

	ОбновитьИтоги(ЭтотОбъект);

	// Авторасчет НДС
	ПерерасчетПроизведен = Истина;
	
	УстановитьСостояниеДокумента();
	
	СформированныеДокументы.Параметры.УстановитьЗначениеПараметра("Ссылка", Объект.Ссылка);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	Если НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДатаДокумента) Тогда
		// Изменение времени не влияет на поведение документа.
		ТекущаяДатаДокумента = Объект.Дата;
		Возврат;
	КонецЕсли;
	
	Если Объект.ДатаОкончания > Объект.Дата Тогда
		ТекстВопроса = НСтр("ru='Конечная дата отбора меньше даты документа. Изменить конечную дату?';uk='Кінцева дата відбору менше дати документа. Змінити кінцеву дату?'");
		Оповещение = Новый ОписаниеОповещения("ДатаПриИзмененииЗавершение", ЭтотОбъект, Параметры);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);		
	КонецЕсли;

	// Общие проверки условий по датам.
	ТребуетсяВызовСервера = ИНАГРО_ЭлеваторКлиент.ТребуетсяВызовСервераПриИзмененииДатыДокумента(Объект.Дата, ТекущаяДатаДокумента);
		
	// Если определили, что изменение даты может повлиять на какие-либо параметры, 
	// то передаем обработку на сервер.
	Если ТребуетсяВызовСервера Тогда
		ДатаПриИзмененииНаСервере();
	КонецЕсли;
	
	// Запомним новую дату документа.
	ТекущаяДатаДокумента = Объект.Дата;	
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзмененииЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
   	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда		 
		Возврат;
	КонецЕсли; 
	
	Объект.ДатаОкончания = Объект.Дата;
				
КонецПроцедуры

&НаСервере
Процедура ДатаПриИзмененииНаСервере()
	
	УстановитьФункциональныеОпцииФормы();
	
	УправлениеФормой(ЭтаФорма);
		
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		ОрганизацияПриИзмененииНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()
		
	УстановитьФункциональныеОпцииФормы();

	Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
		КонтрагентПриИзмененииНаСервере();
	КонецЕсли;	
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.Контрагент) Тогда				
		
		ПараметрыОтбораДоговора = ПолучитьПараметрыДляДоговоров();
		
		ИНАГРО_ЭлеваторЗаполнениеДокументов.ПриИзмененииЗначенияКонтрагента(Объект.Дата, Объект.Организация, Объект.Контрагент, Объект.ДоговорКонтрагента, ПараметрыОтбораДоговора);				
		
		КонтрагентПриИзмененииНаСервере();
		
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура КонтрагентПриИзмененииНаСервере()

	Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		ДоговорКонтрагентаОбработатьИзменение();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорКонтрагентаПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		ДоговорКонтрагентаПриИзмененииНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДоговорКонтрагентаПриИзмененииНаСервере()
	
	ДоговорКонтрагентаОбработатьИзменение();
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ДоговорКонтрагентаОбработатьИзменение()
	
	ВалютаДоИзменения 	 = Объект.ВалютаДокумента;
	КурсДоИзменения 	 = Объект.КурсВзаиморасчетов;
	КратностьДоИзменения = Объект.КратностьВзаиморасчетов;
	
	ПерезаполнитьЦены = Ложь;
	ПересчитатьЦены   = Ложь;
	ПересчитатьНДС    = Ложь;
	
	ДоговорУказан 	  = ЗначениеЗаполнено(Объект.ДоговорКонтрагента);
	РеквизитыДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		Объект.ДоговорКонтрагента,
		"ВалютаВзаиморасчетов, Владелец, ТипЦен, ВидДоговора, ВедениеВзаиморасчетов");
	
	ЭтоКомиссия 	     		= ДоговорУказан И РеквизитыДоговора.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом;
	
	Если ЭтоКомиссия Тогда		
		Если Объект.Услуги.Количество() > 0 Тогда
			Объект.Услуги.Очистить(); // На комиссию передать услуги нельзя
		КонецЕсли;		
	КонецЕсли;

	Если НЕ ДоговорУказан ИЛИ НЕ (РеквизитыДоговора.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоРасчетнымДокументам) Тогда
		Объект.Сделка = Неопределено;
	КонецЕсли;
	
	Если ДоговорУказан Тогда
		ВалютаВзаиморасчетов   = РеквизитыДоговора.ВалютаВзаиморасчетов;
		ВедениеВзаиморасчетов  = РеквизитыДоговора.ВедениеВзаиморасчетов;

		Объект.ВалютаДокумента = ВалютаВзаиморасчетов;
		Если НЕ ЗначениеЗаполнено(Объект.Контрагент) Тогда
			Объект.Контрагент = РеквизитыДоговора.Владелец;
		КонецЕсли;
	Иначе
		Объект.ВалютаДокумента = ВалютаРегламентированногоУчета;
		ВедениеВзаиморасчетов  = ПредопределенноеЗначение("Перечисление.ВедениеВзаиморасчетовПоДоговорам.ПустаяСсылка");
	КонецЕсли;
		
	УстановитьФункциональныеОпцииФормы();	
	
	Если ВалютаДоИзменения <> Объект.ВалютаДокумента Тогда
		СтруктураКурсаДокумента = РаботаСКурсамиВалют.ПолучитьКурсВалюты(Объект.ВалютаДокумента, Объект.Дата);
		КурсВзаиморасчетов      = СтруктураКурсаДокумента.Курс;
		КратностьВзаиморасчетов = СтруктураКурсаДокумента.Кратность;
	КонецЕсли;
	
	НовыйТипЦен = Объект.ТипЦен;
	Если ДоговорУказан И ЗначениеЗаполнено(РеквизитыДоговора.ТипЦен) Тогда
		НовыйТипЦен = РеквизитыДоговора.ТипЦен;
	КонецЕсли;
	
	ЕстьСтроки = ЕстьСтрокиВТабличныхЧастях();
	
	Если Объект.ВалютаДокумента <> ВалютаДоИзменения
		ИЛИ КурсДоИзменения <> КурсВзаиморасчетов 
		ИЛИ Объект.ТипЦен <> НовыйТипЦен Тогда
		ПересчитатьЦены = ЕстьСтроки;
	КонецЕсли;
	
	ПрежнийСуммаВключаетНДС = Объект.СуммаВключаетНДС;
	Если ДоговорУказан И ЗначениеЗаполнено(НовыйТипЦен) Тогда
		Объект.ТипЦен 			= НовыйТипЦен;
		Объект.СуммаВключаетНДС = НовыйТипЦен.ЦенаВключаетНДС;
		ПересчитатьНДС 			= Объект.СуммаВключаетНДС <> ПрежнийСуммаВключаетНДС;
	КонецЕсли;
	
	Документы.ИНАГРО_РасчетУслуг.ЗаполнитьСчетаУчетаРасчетов(Объект); 
	
	Если ЕстьСтроки И (ПерезаполнитьЦены ИЛИ ПересчитатьЦены ИЛИ ПересчитатьНДС) Тогда
		ЗаполнитьРассчитатьСуммы(ВалютаДоИзменения, КурсДоИзменения, КратностьДоИзменения, ПерезаполнитьЦены, ПересчитатьЦены, ПересчитатьНДС);
	ИначеЕсли ПересчитатьНДС Тогда
		УстановитьЗаголовкиКолонок();
	КонецЕсли; 	
	
	УчетДенежныхСредствБП.УстановитьБанковскийСчет(
		Объект.БанковскийСчетОрганизации,
		Объект.Организация,
		Объект.ВалютаДокумента);

	
	ОбновитьИтоги(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура НоменклатураПриИзменении(Элемент)
	
	ПараметрыОтбораДоговора = ПолучитьПараметрыДляДоговоров();
	
	ИНАГРО_ЭлеваторЗаполнениеДокументов.ПриИзмененииЗначенияКонтрагента(Объект.Дата, Объект.Организация, Объект.Контрагент, Объект.ДоговорКонтрагента, ПараметрыОтбораДоговора);
	
КонецПроцедуры

&НаКлиенте
Процедура ВидХраненияПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.ВидХранения) Тогда
		
		ПараметрыОтбораДоговора = ПолучитьПараметрыДляДоговоров();
		
		ИНАГРО_ЭлеваторЗаполнениеДокументов.ПриИзмененииЗначенияКонтрагента(Объект.Дата, Объект.Организация, Объект.Контрагент, Объект.ДоговорКонтрагента, ПараметрыОтбораДоговора);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УрожайПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.Урожай) Тогда				
		
		ПараметрыОтбораДоговора = ПолучитьПараметрыДляДоговоров();
		
		ИНАГРО_ЭлеваторЗаполнениеДокументов.ПриИзмененииЗначенияКонтрагента(Объект.Дата, Объект.Организация, Объект.Контрагент, Объект.ДоговорКонтрагента, ПараметрыОтбораДоговора);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучилПоДругомуДокументуПриИзменении(Элемент)
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ГрузополучательПриИзмененииНаСервере()
	
	РеализацияТоваровУслугФормы.ЗаполнитьСписокАдресовДоставки(ЭтаФорма, Объект.Контрагент, Объект.Грузополучатель);
	Если Элементы.АдресДоставки.СписокВыбора.Количество() > 0 Тогда
		Объект.АдресДоставки = Элементы.АдресДоставки.СписокВыбора[0].Значение;
	Иначе
		Объект.АдресДоставки = "";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ГрузополучательПриИзменении(Элемент)
	
	ГрузополучательПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучилНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	УправлениеКонтактнойИнформациейБП.ПредставительКонтрагентаНачалоВыбора(Объект.Контрагент, ДанныеВыбора, СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура ЦеныИВалютаНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОбработатьИзмененияПоКнопкеЦеныИВалюты();
	
КонецПроцедуры

&НаКлиенте
Процедура ОписаниеДвиженияФормы36НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(
		Элемент.ТекстРедактирования,
		ЭтотОбъект,
		"Объект.ОписаниеДвиженияФормы36",
		НСтр("ru='Описание движения формы 36';uk='Опис руху форми 36'"));

КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(
		Элемент.ТекстРедактирования,
		ЭтотОбъект,
		"Объект.Комментарий");
	
КонецПроцедуры

&НаКлиенте
Процедура СписокСкладовПриИзменении(Элемент)
	
	НовыйСписокСкладов = Новый Массив;
	КопияСписокСкладов = СписокСкладов.ВыгрузитьЗначения();
	Для Каждого ТекСклад Из КопияСписокСкладов Цикл
		НайденныйЭлемент = НовыйСписокСкладов.Найти(ТекСклад);
		Если НайденныйЭлемент = Неопределено Тогда
			НовыйСписокСкладов.Добавить(ТекСклад);
		КонецЕсли;	
	КонецЦикла;
	
	СписокСкладов.ЗагрузитьЗначения(НовыйСписокСкладов);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыУслуги

&НаСервере
Процедура УслугиПриИзменении()
	
	ОбновитьИтоги(ЭтаФорма);
	
	// Авторасчет НДС
	ПерерасчетПроизведен = Ложь;

КонецПроцедуры

&НаКлиенте
Процедура УслугиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока И НЕ Копирование Тогда
		Элемент.ТекущиеДанные.СтавкаНДС = УчетНДСКлиент.ПолучитьСтавкуНДСПоУмолчанию(ПлательщикНДС);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если НоваяСтрока И ОтменаРедактирования Тогда
		ОбновитьИтоги(ЭтаФорма);
		// Авторасчет НДС
		ПерерасчетПроизведен = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиНоменклатураПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Услуги.ТекущиеДанные;
	
	ДанныеСтрокиТаблицы = Новый Структура(
		"Номенклатура, Культура, Количество,
		|ЕдиницаИзмерения, Цена, Сумма,
		|СтавкаНДС, СуммаНДС, СхемаРеализации,
		|СчетУчетаНДС, НалоговоеНазначение, НалоговоеНазначениеДоходовИЗатрат,
		|Всего"); 	
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, ТекущиеДанные);
	
	ДанныеОбъекта = Новый Структура(
		"Дата, Организация, Склад,
		|Контрагент, ДоговорКонтрагента, Урожай,  
		|ТипЦен, СуммаВключаетНДС, ВалютаДокумента,
		|КурсВзаиморасчетов, КратностьВзаиморасчетов, СчетУчетаНДС
		|");	
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
	Если ЗначениеЗаполнено(ВалютаВзаиморасчетов) И НЕ (ВалютаВзаиморасчетов = ВалютаРегламентированногоУчета) Тогда
		ДанныеОбъекта.Вставить("СтавкаНДС", ПредопределенноеЗначение("Перечисление.СтавкиНДС.БезНДС"));
	КонецЕсли;	
		
	УслугиНоменклатураПриИзмененииНаСервере(ДанныеСтрокиТаблицы, ДанныеОбъекта);
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтрокиТаблицы);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УслугиНоменклатураПриИзмененииНаСервере(СтрокаТабличнойЧасти, Знач ДанныеОбъекта)
	
	СведенияОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОНоменклатуре(
		СтрокаТабличнойЧасти.Номенклатура, ДанныеОбъекта);
		
	Если СведенияОНоменклатуре = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВидКультурыДляРасчетаСтоимостиУслуги = ИНАГРО_Элеватор.ПолучитьДополнительныйРеквизитНоменклатуры(СтрокаТабличнойЧасти.Культура, "ВидКультуры").ВидКультурыДляРасчетаСтоимостиУслуги;
	
	Цена = ИНАГРО_Элеватор.ПолучитьЦенуУслугиЭлеватора(ДанныеОбъекта.Организация,
	                                                   ДанныеОбъекта.Дата,
													   ДанныеОбъекта.Контрагент,
	                                                   ДанныеОбъекта.ДоговорКонтрагента,
													   ВидКультурыДляРасчетаСтоимостиУслуги,
													   ДанныеОбъекта.Урожай,
													   СтрокаТабличнойЧасти.Номенклатура);

	СтрокаТабличнойЧасти.Цена			  = Цена;
	СтрокаТабличнойЧасти.ЕдиницаИзмерения = СведенияОНоменклатуре.БазоваяЕдиницаИзмерения;	
	СтрокаТабличнойЧасти.СтавкаНДС	      = СведенияОНоменклатуре.СтавкаНДС;
	
	СчетаРасчетов = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаРасчетовСКонтрагентом(ДанныеОбъекта.Организация, ДанныеОбъекта.Контрагент, ДанныеОбъекта.ДоговорКонтрагента);
	
	СтрокаТабличнойЧасти.СчетУчетаНДС = СчетаРасчетов.СчетУчетаНДСПродаж ;

	Документы.ИНАГРО_РасчетУслуг.ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(ДанныеОбъекта, СтрокаТабличнойЧасти, СведенияОНоменклатуре) ;

	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, 1);
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ДанныеОбъекта.СуммаВключаетНДС);
		
	ЗаполнитьДобавленныеКолонкиСтрокиТаблицыУслуги(СтрокаТабличнойЧасти, ДанныеОбъекта);
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиКультураПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Услуги.ТекущиеДанные; 	
	
	ДанныеСтрокиТаблицы = Новый Структура(
		"Номенклатура, Культура, Количество,
		|ЕдиницаИзмерения, Цена, Сумма,
		|СтавкаНДС, СуммаНДС, СхемаРеализации,
		|СчетУчетаНДС, НалоговоеНазначение, НалоговоеНазначениеДоходовИЗатрат,
		|Всего"); 	
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, ТекущиеДанные);
	
	ДанныеОбъекта = Новый Структура(
		"Дата, Организация, Склад,
		|Контрагент, ДоговорКонтрагента, Урожай,  
		|СуммаВключаетНДС");	
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
	Если ЗначениеЗаполнено(ВалютаВзаиморасчетов) И НЕ (ВалютаВзаиморасчетов = ВалютаРегламентированногоУчета) Тогда
		ДанныеОбъекта.Вставить("СтавкаНДС", ПредопределенноеЗначение("Перечисление.СтавкиНДС.БезНДС"));
	КонецЕсли;
	
	УслугиКультураПриИзмененииНаСервере(ДанныеСтрокиТаблицы, ДанныеОбъекта);
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтрокиТаблицы);
	
КонецПроцедуры 

&НаСервереБезКонтекста
Процедура УслугиКультураПриИзмененииНаСервере(СтрокаТабличнойЧасти, Знач ДанныеОбъекта)
			
	ВидКультурыДляРасчетаСтоимостиУслуги = ИНАГРО_Элеватор.ПолучитьДополнительныйРеквизитНоменклатуры(СтрокаТабличнойЧасти.Культура, "ВидКультуры").ВидКультурыДляРасчетаСтоимостиУслуги;
	
	Цена = ИНАГРО_Элеватор.ПолучитьЦенуУслугиЭлеватора(ДанныеОбъекта.Организация,
	                                                   ДанныеОбъекта.Дата,
													   ДанныеОбъекта.Контрагент,
	                                                   ДанныеОбъекта.ДоговорКонтрагента,
													   ВидКультурыДляРасчетаСтоимостиУслуги,
													   ДанныеОбъекта.Урожай,
													   СтрокаТабличнойЧасти.Номенклатура);

	СтрокаТабличнойЧасти.Цена = Цена;
	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, 1);
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ДанныеОбъекта.СуммаВключаетНДС);
		
	ЗаполнитьДобавленныеКолонкиСтрокиТаблицыУслуги(СтрокаТабличнойЧасти, ДанныеОбъекта);
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиКоличествоПриИзменении(Элемент)
	
	ОбработкаТабличныхЧастейКлиентСервер.ПриИзмененииКоличествоЦена(ЭтаФорма, "Услуги");
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиТонноДниПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Услуги.ТекущиеДанные; 	
	
	ДанныеСтрокиТаблицы = Новый Структура(
		"Номенклатура, Культура, Количество,
		|ЕдиницаИзмерения, Цена, Сумма,
		|СтавкаНДС, СуммаНДС, СхемаРеализации,
		|СчетУчетаНДС, НалоговоеНазначение, НалоговоеНазначениеДоходовИЗатрат,
		|ТонноДни, Всего"); 	
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, ТекущиеДанные);	
	
	ДанныеОбъекта = Новый Структура(
		"Дата, Организация, Склад,
		|ДатаНачала, ДатаОкончания, СуммаВключаетНДС
		|");	
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
	УслугиТонноДниПриИзмененииНаСервере(ДанныеСтрокиТаблицы, ДанныеОбъекта);
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтрокиТаблицы);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УслугиТонноДниПриИзмененииНаСервере(СтрокаТабличнойЧасти, Знач ДанныеОбъекта)
			
	Если СтрокаТабличнойЧасти.Номенклатура = ИНАГРО_Элеватор.ПолучитьПредопределеннуюНоменклатуру("Хранение") Тогда
		// Пересчитаем кол. услуги хранения из тонно/дней в тонно/мес
		ПараметрыУчета = ИНАГРО_Элеватор.ПолучитьПараметрыУчетаЭлеватора(ДанныеОбъекта.Дата);
		
		Если ПараметрыУчета <> Неопределено Тогда 
			
			Если СтрокаТабличнойЧасти.Номенклатура.БазоваяЕдиницаИзмерения = ПараметрыУчета.ЕдиницаИзмеренияТД Тогда	
				СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.ТонноДни;
			ИначеЕсли СтрокаТабличнойЧасти.Номенклатура.БазоваяЕдиницаИзмерения = ПараметрыУчета.ЕдиницаИзмеренияТМ Тогда
				СтрокаТабличнойЧасти.Количество = Окр(СтрокаТабличнойЧасти.ТонноДни  / Документы.ИНАГРО_РасчетУслуг.ПолучитьКоличествоДнейВМесяце(ДанныеОбъекта.ДатаНачала, ДанныеОбъекта.ДатаОкончания), 3);
			КонецЕсли;
			
		Иначе
			СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.ТонноДни;
		КонецЕсли;		
		
	КонецЕсли;

	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, 1);
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ДанныеОбъекта.СуммаВключаетНДС);
		
	ЗаполнитьДобавленныеКолонкиСтрокиТаблицыУслуги(СтрокаТабличнойЧасти, ДанныеОбъекта);
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиЦенаПриИзменении(Элемент)
	
	ОбработкаТабличныхЧастейКлиентСервер.ПриИзмененииКоличествоЦена(ЭтаФорма, "Услуги");
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиСуммаПриИзменении(Элемент)
	
	ОбработкаТабличныхЧастейКлиентСервер.ПриИзмененииСумма(ЭтаФорма, "Услуги");
		
КонецПроцедуры

&НаКлиенте
Процедура УслугиСтавкаНДСПриИзменении(Элемент)
	
	ОбработкаТабличныхЧастейКлиентСервер.ПриИзмененииСтавкаНДС(ЭтаФорма, "Услуги");
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиСуммаНДСПриИзменении(Элемент)
	
	ОбработкаТабличныхЧастейКлиентСервер.ПриИзмененииСуммаНДС(ЭтаФорма, "Услуги");
	
КонецПроцедуры

// Неактивны
&НаКлиенте
Процедура УслугиСуммаБезСкидкиПриИзменении()
	
	ОбработкаТабличныхЧастейКлиентСервер.ПриИзмененииСуммаБезСкидки(ЭтаФорма,"Услуги");
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиСуммаСкидкиПриИзменении(Элемент)
	
	ОбработкаТабличныхЧастейКлиентСервер.ПриИзмененииСуммаСкидки(ЭтаФорма, "Услуги");
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиСуммаСкидкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбработкаТабличныхЧастейКлиентСервер.СуммаСкидкиНачалоВыбора(ЭтаФорма, "Услуги", Элемент, СтандартнаяОбработка);
	
КонецПроцедуры
// 

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСформированныеДокументы

&НаКлиенте
Процедура СформированныеДокументыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДокументСсылка = Элемент.ТекущиеДанные.ТиповыйДокумент;
	
	Если ДокументСсылка <> Неопределено Тогда
		
		ИмяТиповогоДокумента = СформированныеДокументыВыборНаСервере(ДокументСсылка);
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Ключ", ДокументСсылка);
		
		Если ИмяТиповогоДокумента = "РеализацияТоваровУслуг" Тогда
			ОткрытьФорму("Документ." + ИмяТиповогоДокумента + ".Форма.ФормаДокументаОбщая", ПараметрыФормы);
		ИначеЕсли ИмяТиповогоДокумента = "НалоговаяНакладная" Тогда
			ОткрытьФорму("Документ." + ИмяТиповогоДокумента + ".Форма.ФормаДокумента", ПараметрыФормы);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СформированныеДокументыВыборНаСервере(ДокументСсылка)
	
	ИмяТиповогоДокумента = ДокументСсылка.Метаданные().Имя;
	
	Возврат ИмяТиповогоДокумента;
	
КонецФункции

#КонецОбласти

#Область ОбработчикиКомандФормы

#Область ВыборПериода

&НаКлиенте
Процедура ВыбратьПериод(Команда)
	
	ПараметрыФормыВыбора = Новый Структура("НачалоПериода, КонецПериода", Объект.ДатаНачала, Объект.ДатаОкончания);
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыбратьПериодЗавершение", ЭтотОбъект);
	ОткрытьФорму("ОбщаяФорма.ВыборСтандартногоПериода", ПараметрыФормыВыбора, Элементы.ВыбратьПериод, , , , ОписаниеОповещения);
	
КонецПроцедуры 

&НаКлиенте
Процедура ВыбратьПериодЗавершение(РезультатВыбора, ДопПараметры) Экспорт
	
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Объект.ДатаНачала    = РезультатВыбора.НачалоПериода;
	Объект.ДатаОкончания = РезультатВыбора.КонецПериода;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьПериодХранения(Команда)
	
	ПараметрыФормыВыбора = Новый Структура("НачалоПериода, КонецПериода", Объект.ДатаНачалаХранения, Объект.ДатаОкончанияХранения);
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыбратьПериодХраненияЗавершение", ЭтотОбъект);
	ОткрытьФорму("ОбщаяФорма.ВыборСтандартногоПериода", ПараметрыФормыВыбора, Элементы.ВыбратьПериодХранения, , , , ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьПериодХраненияЗавершение(РезультатВыбора, ДопПараметры) Экспорт
	
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Объект.ДатаНачалаХранения    = РезультатВыбора.НачалоПериода;
	Объект.ДатаОкончанияХранения = РезультатВыбора.КонецПериода;
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура РассчитатьПоНачисленным(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.ДатаНачалаХранения) Тогда
		Объект.ДатаНачалаХранения    = Объект.ДатаНачала;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.ДатаОкончанияХранения) Тогда
		Объект.ДатаОкончанияХранения = Объект.ДатаОкончания;
	КонецЕсли;	
		
	Если Объект.ДатаОкончания > Объект.Дата Тогда
		ТекстСообщения = (Нстр("ru='Дата окончания больше даты документа. Расчет невозможен!';uk='Дата закінчення більше дати документа. Розрахунок неможливий!'"));		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Объект.ДатаОкончания");
		Возврат;
	КонецЕсли;		
	
	Если Объект.Услуги.Количество() > 0 ИЛИ Объект.РасчетХранения.Количество() > 0 Тогда		
		ТекстВопроса = НСтр("ru='Перед расчетом будет отменено проведение документа и очищены табличные части. Продолжить?';uk='Перед розрахунком буде скасовано проведення документа і очищені табличні частини. Продовжити?'");
		Оповещение = Новый ОписаниеОповещения("РассчитатьПоНачисленнымЗавершение", ЭтотОбъект, Параметры);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);  
	Иначе
		РассчитатьПоНачисленнымНаСервере(); 
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьПоНачисленнымЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
   	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда		 
		Возврат;
	КонецЕсли; 
	
	Если Объект.Проведен Тогда
		ОтменитьПроведение();		
	КонецЕсли;
	
	Объект.Услуги.Очистить();
	Объект.РасчетХранения.Очистить();
	
	Если НЕ ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	РассчитатьПоНачисленнымНаСервере();
				
КонецПроцедуры

&НаСервере
Процедура РассчитатьПоНачисленнымНаСервере()
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	ДокументОбъект.РассчитатьПоНачисленным(СписокСкладов);
	ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");

	ЗаполнитьДобавленныеКолонкиТаблиц();
	
	ОбновитьИтоги(ЭтаФорма);
	
	// Авторасчет НДС 
	ПерерасчетПроизведен = Ложь;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьПоНачисленнымСПересчетомХранения(Команда)
		 
	Если НЕ ЗначениеЗаполнено(Объект.ДатаНачалаХранения) Тогда
		Объект.ДатаНачалаХранения    = Объект.ДатаНачала;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.ДатаОкончанияХранения) Тогда
		Объект.ДатаОкончанияХранения = Объект.ДатаОкончания;
	КонецЕсли; 	
		
	РассчитатьПоНачисленнымСПересчетомХраненияНаСервере();
	
	РассчитатьПоНачисленным(Неопределено);

КонецПроцедуры

&НаСервере
Процедура РассчитатьПоНачисленнымСПересчетомХраненияНаСервере()
		 
	Если НЕ ЗначениеЗаполнено(Объект.ДатаНачалаХранения) Тогда
		Объект.ДатаНачалаХранения    = Объект.ДатаНачала;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.ДатаОкончанияХранения) Тогда
		Объект.ДатаОкончанияХранения = Объект.ДатаОкончания;
	КонецЕсли;

	ДеньЗ = Объект.ДатаОкончанияХранения;
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ИНАГРО_РасчетУслугХранения.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ИНАГРО_РасчетУслугХранения КАК ИНАГРО_РасчетУслугХранения
		|ГДЕ
		|	ИНАГРО_РасчетУслугХранения.Дата МЕЖДУ &ДатаНач И &ДатаКон
		|	И ИНАГРО_РасчетУслугХранения.ПометкаУдаления = ЛОЖЬ
		|	И ИНАГРО_РасчетУслугХранения.Организация = &Организация";
	
	Запрос.УстановитьПараметр("ДатаНач",     НачалоМесяца(ДеньЗ));
	Запрос.УстановитьПараметр("ДатаКон",     КонецМесяца(ДеньЗ));
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	
	РасчетУслугХранения = Неопределено;
	
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	
	Пока РезультатЗапроса.Следующий() Цикл
		РасчетУслугХранения = РезультатЗапроса.Ссылка.ПолучитьОбъект();
	КонецЦикла;	
	
	СписокУсловий = Документы.ИНАГРО_РасчетУслугХранения.ПолучитьСписокУсловий(Объект);
		
	Если РасчетУслугХранения = Неопределено Тогда
		РасчетУслугХранения = Документы.ИНАГРО_РасчетУслугХранения.СоздатьДокумент();
		РасчетУслугХранения.Дата = НачалоМесяца(ДеньЗ);
		РасчетУслугХранения.Организация = Объект.Организация;
		РасчетУслугХранения.НачалоПериодаРасчета = НачалоМесяца(ДеньЗ);
		РасчетУслугХранения.КонецПериодаРасчета = КонецМесяца(ДеньЗ);
	КонецЕсли;
		
	РасчетУслугХранения.РассчитатьХранение(Объект.Номенклатура, СписокУсловий);
	
	Попытка 
		РасчетУслугХранения.Записать(РежимЗаписиДокумента.Проведение);
	Исключение
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Документ %1 заблокирован для записи!';uk='Документ %1 заблокований для запису!'"), РасчетУслугХранения.Ссылка);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецПопытки;

КонецПроцедуры

&НаКлиенте
Процедура Пересчитать(Команда)

	Если НЕ ЗначениеЗаполнено(Объект.ДатаНачалаХранения) Тогда
		Объект.ДатаНачалаХранения    = Объект.ДатаНачала;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.ДатаОкончанияХранения) Тогда
		Объект.ДатаОкончанияХранения = Объект.ДатаОкончания;
	КонецЕсли;		
		
	Если Объект.ДатаОкончания > Объект.Дата Тогда
		ТекстСообщения = (Нстр("ru='Дата окончания больше даты документа. Расчет невозможен!';uk='Дата закінчення більше дати документа. Розрахунок неможливий!'"));		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Объект.ДатаОкончания");
		Возврат;
	КонецЕсли;		
	
	Если Объект.Услуги.Количество() > 0 ИЛИ Объект.РасчетХранения.Количество() > 0 Тогда		
		ТекстВопроса = НСтр("ru='Перед расчетом будет отменено проведение документа и очищены табличные части. Продолжить?';uk='Перед розрахунком буде скасовано проведення документа і очищені табличні частини. Продовжити?'");
		Оповещение = Новый ОписаниеОповещения("ПересчитатьЗавершение", ЭтотОбъект, Параметры);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);  
	Иначе
		ПересчитатьНаСервере(); 
	КонецЕсли;	

КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
   	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда		 
		Возврат;
	КонецЕсли; 
	
	Если Объект.Проведен Тогда
		ОтменитьПроведение();		
	КонецЕсли;
	
	Объект.Услуги.Очистить();
	Объект.РасчетХранения.Очистить();
	
	Если НЕ ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;	

	ПересчитатьНаСервере();
				
КонецПроцедуры

&НаСервере
Процедура ПересчитатьНаСервере()
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	ДокументОбъект.Пересчитать(СписокСкладов);
	ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");

	ЗаполнитьДобавленныеКолонкиТаблиц();
	
	ОбновитьИтоги(ЭтаФорма);
	
	// Авторасчет НДС 
	ПерерасчетПроизведен = Ложь;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДляВсех(Команда)
	
	ТекущиеДанные  = Элементы.Услуги.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда
		
		ТекущаяКолонка = СтрЗаменить(Элементы.Услуги.ТекущийЭлемент.Имя, "Услуги", "");
		Если ТекущаяКолонка = "НомерСтроки" Тогда
			Возврат;
		КонецЕсли;
		
		ТекущееЗначение = ТекущиеДанные[ТекущаяКолонка];
		
		Если ТекущееЗначение <> Неопределено Тогда
			Для Каждого СтрокаТабличнойЧасти Из Объект.Услуги Цикл 
				СтрокаТабличнойЧасти[ТекущаяКолонка] = ТекущееЗначение;
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли; 

КонецПроцедуры

&НаКлиенте
Процедура СчетНаОплатуПокупателю(Команда)
	
	ФормаДокумента = ПолучитьФорму("Документ.СчетНаОплатуПокупателю.Форма.ФормаДокумента");
	
	СчетНаОплатуПокупателю = ФормаДокумента.Объект;	
	СчетНаОплатуПокупателю.Дата               = Объект.Дата;
	СчетНаОплатуПокупателю.Организация        = Объект.Организация;
	СчетНаОплатуПокупателю.Контрагент         = Объект.Контрагент;	
	СчетНаОплатуПокупателю.ДоговорКонтрагента = Объект.ДоговорКонтрагента;
	СчетНаОплатуПокупателю.Склад              = Объект.Склад;
	СчетНаОплатуПокупателю.СтруктурнаяЕдиница = Объект.БанковскийСчетОрганизации;
	СчетНаОплатуПокупателю.СуммаВключаетНДС   = Объект.СуммаВключаетНДС;
	СчетНаОплатуПокупателю.АвторасчетНДС      = Объект.АвторасчетНДС;
	
	Для Каждого СтрокаТабличнойЧасти Из Объект.Услуги Цикл
		
		НоваяСтрока = СчетНаОплатуПокупателю.Услуги.Добавить();
		НоваяСтрока.Номенклатура = СтрокаТабличнойЧасти.Номенклатура;
		НоваяСтрока.Содержание   = "" + СтрокаТабличнойЧасти.Номенклатура + " (" + СтрокаТабличнойЧасти.Культура + ")";
		НоваяСтрока.Количество   = СтрокаТабличнойЧасти.Количество;
		НоваяСтрока.Цена         = СтрокаТабличнойЧасти.Цена;
		НоваяСтрока.Сумма        = СтрокаТабличнойЧасти.Сумма;		
		НоваяСтрока.СтавкаНДС    = СтрокаТабличнойЧасти.СтавкаНДС;
		НоваяСтрока.СуммаНДС     = СтрокаТабличнойЧасти.СуммаНДС;
		
	КонецЦикла;
	
	ФормаДокумента.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьДокументы(Команда)
	
	Если Объект.Услуги.Количество() > 0 Тогда	
		  		
		ВидОперацииФормирования = НСтр("ru='реализации';uk='реалізації'"); 	
				
		Отказ = Ложь;
		
		Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
			Отказ = Истина;
		ИначеЕсли ЗначениеЗаполнено(Объект.Ссылка) И НЕ Объект.Проведен Тогда	
			Отказ = Истина;
		ИначеЕсли Объект.Проведен И Модифицированность Тогда
			Отказ = Истина;
		КонецЕсли; 	
		
		Если Отказ Тогда			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Перед формированием %1 документ необходимо провести!';uk='Перед формуванням %1 документ необхідно провести!'"), ВидОперацииФормирования);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);					
			Возврат;		
		Иначе
			
			СформироватьДокументыНаСервере(Отказ);
			
			Если Объект.ОткрыватьФормуРеализации Тогда
				
				РеализацияТоваровУслуг  = ПолучитьРеализацияТоваровУслуг(Объект.Ссылка);
				
				ПараметрыФормы = Новый Структура;
				ПараметрыФормы.Вставить("Ключ", РеализацияТоваровУслуг);
				
				ОткрытьФорму("Документ.РеализацияТоваровУслуг.Форма.ФормаДокументаОбщая", ПараметрыФормы, , УникальныйИдентификатор, , , , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
				
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Нет документов для обработки.';uk='Немає документів для обробки.'"));
		
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура СформироватьДокументыНаСервере(Отказ)
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");	
	ИНАГРО_Элеватор.СформироватьПодчиненныеДокументы(ДокументОбъект, Отказ); 	
	ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");	

	Элементы.СформированныеДокументы.Обновить();		
	
КонецПроцедуры

&НаКлиенте
Процедура Обновить(Команда)
	
	Элементы.СформированныеДокументы.Обновить();

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ПодготовитьФормуНаСервере()
	
	УстановитьФункциональныеОпцииФормы();
	
	ТекущаяДатаДокумента = Объект.Дата;
	
	ПоказыватьВДокументахСчетаУчета = Истина;
	
	ВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	
	ДоговорУказан = ЗначениеЗаполнено(Объект.ДоговорКонтрагента);
	
	Если ДоговорУказан Тогда
		РеквизитыДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			Объект.ДоговорКонтрагента, "ВидДоговора, ВалютаВзаиморасчетов, ВедениеВзаиморасчетов");
		ЭтоКомиссия           = РеквизитыДоговора.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом;
		ВалютаВзаиморасчетов  = РеквизитыДоговора.ВалютаВзаиморасчетов;	
	Иначе
		ЭтоКомиссия          = Ложь;
	КонецЕсли;
	
	ЗаполнитьСписокСкладов();
	
	ЗаполнитьДобавленныеКолонкиТаблиц();
	
	РеализацияТоваровУслугФормы.ЗаполнитьСписокАдресовДоставки(ЭтаФорма, Объект.Контрагент, Объект.Грузополучатель);
	
	УстановитьЗаголовкиКолонок(); 
	
	УстановитьСостояниеДокумента();
	
	УправлениеФормой(ЭтаФорма);
	
	СформированныеДокументы.Параметры.УстановитьЗначениеПараметра("Ссылка", Объект.Ссылка);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьФункциональныеОпцииФормы()
	
	ОбщегоНазначенияБПКлиентСервер.УстановитьПараметрыФункциональныхОпцийФормыДокумента(ЭтаФорма);
	
	ПлательщикНДС			        = УчетнаяПолитика.ПлательщикНДС(Объект.Организация, Объект.Дата);
	ПлательщикНалогаНаПрибыльДо2015 = УчетнаяПолитика.ПлательщикНалогаНаПрибыльДо2015(Объект.Организация, Объект.Дата);	
		
КонецПроцедуры 

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Элементы = Форма.Элементы;
	Объект   = Форма.Объект;
	
	ЭтоКомиссия = Форма.ЭтоКомиссия;
	Элементы.Услуги.Видимость     = НЕ ЭтоКомиссия;
	Элементы.СчетУчетаРасчетовСКонтрагентом.Видимость          = НЕ ЭтоКомиссия;
	Элементы.СчетУчетаРасчетовПоАвансам.Видимость              = НЕ ЭтоКомиссия;
	Элементы.СчетУчетаНДС.Видимость			         		   = НЕ ЭтоКомиссия; 
	
	Элементы.УслугиНалоговоеНазначениеДоходовИЗатрат.Видимость = Форма.ПлательщикНалогаНаПрибыльДо2015;
	Элементы.ГруппаИтогиВсегоНДС.Видимость                     = Форма.ПлательщикНДС;
			
	СформироватьНадписьЦеныИВалюта(Форма);
	
	Элементы.ГруппаРеквизитыДоверенностиЛевая.Видимость        = НЕ Объект.ПолучилПоДругомуДокументу; 
	Элементы.ДокументПодтверждающийПолномочия.Видимость        = Объект.ПолучилПоДругомуДокументу;
	
	ОбновитьИтоги(Форма);

КонецПроцедуры

&НаСервере
Процедура УстановитьЗаголовкиКолонок()
	
	ЗаголовокЦена  = ?(ПлательщикНДС, ?(Объект.СуммаВключаетНДС, НСтр("ru='Цена с НДС';uk='Ціна з ПДВ'"), НСтр("ru='Цена без НДС';uk='Ціна без ПДВ'")), НСтр("ru='Цена';uk='Ціна'"));
	ЗаголовокСумма = ?(ПлательщикНДС, ?(Объект.СуммаВключаетНДС, НСтр("ru='Сумма с НДС';uk='Сума з ПДВ'"), НСтр("ru='Сумма без НДС';uk='Сума без ПДВ'")), НСтр("ru='Сумма';uk='Сума'"));
		
	Элементы.УслугиЦена.Заголовок  = ЗаголовокЦена;
	Элементы.УслугиСумма.Заголовок = ЗаголовокСумма;	

КонецПроцедуры

&НаСервере
Процедура УстановитьСостояниеДокумента()
	
	СостояниеДокумента = ОбщегоНазначенияБП.СостояниеДокумента(Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппаСтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	Элементы.СформированныеДокументы.Обновить(); 
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДобавленныеКолонкиТаблиц()
	
	ДанныеОбъекта = Новый Структура;
	ДанныеОбъекта.Вставить("СуммаВключаетНДС", Объект.СуммаВключаетНДС);
	
	Для Каждого СтрокаТаблицы Из Объект.Услуги Цикл
		ЗаполнитьДобавленныеКолонкиСтрокиТаблицыУслуги(СтрокаТаблицы, ДанныеОбъекта);
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьДобавленныеКолонкиСтрокиТаблицыУслуги(СтрокаТабличнойЧасти, Знач ДанныеОбъекта)
	
	СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма + ?(ДанныеОбъекта.СуммаВключаетНДС, 0, СтрокаТабличнойЧасти.СуммаНДС); 
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокСкладов()
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда 
		
		Если ЗначениеЗаполнено(Объект.Склад) Тогда
			СписокСкладов.Добавить(Объект.Склад);
		КонецЕсли;
		
	Иначе
		
		ТаблицаУслуги = Новый ТаблицаЗначений;
		ТаблицаУслуги = Объект.Услуги.Выгрузить();
		ТаблицаУслуги.Свернуть("Склад","Количество");                                                           
		
		Для Каждого СтрокаТаблицы Из ТаблицаУслуги Цикл
			Если ЗначениеЗаполнено(СтрокаТаблицы.Склад) Тогда
				СписокСкладов.Добавить(СтрокаТаблицы.Склад);     
			КонецЕсли;
		КонецЦикла;	
		
		Если СписокСкладов.Количество() = 0 Тогда
			СписокСкладов.Добавить(Объект.Склад);                    
		КонецЕсли;
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьИтоги(Форма)
	
	Объект = Форма.Объект;
	
	Форма.ИтогиВсего    = Объект.Услуги.Итог("Всего");
	Форма.ИтогиВсегоНДС = Объект.Услуги.Итог("СуммаНДС");
		
КонецПроцедуры

&НаСервере
Функция ЕстьСтрокиВТабличныхЧастях()

	ЕстьСтроки = Объект.Услуги.Количество() > 0;		
	
	Возврат ЕстьСтроки; 	
	
КонецФункции

&НаСервере
Функция СписокВидимыхТабличныхЧастей()

	ТабличныхЧастей = Новый СписокЗначений;
	
	ТабличныхЧастей.Добавить("Услуги",         "Услуги");	
	ТабличныхЧастей.Добавить("РасчетХранения", "РасчетХранения");	

	Возврат ТабличныхЧастей;

КонецФункции

&НаКлиенте
Функция ПолучитьПараметрыДляДоговоров()
	
	ПараметрыОтбора = Новый Структура("ВидХранения, Урожай");
	ЗаполнитьЗначенияСвойств(ПараметрыОтбора, Объект);
	
	Возврат ПараметрыОтбора;
	
КонецФункции

&НаКлиенте
Процедура ОтменитьПроведение()
	
	Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.ОтменаПроведения));
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаблокироватьНалоговуюНакладную(ДокументИсточник)
	
	РеализацияТоваровУслуг = ПолучитьРеализацияТоваровУслуг(ДокументИсточник);
	НалоговаяНакладная     = Документы.НалоговаяНакладная.НайтиПоРеквизиту("ДокументОснование", РеализацияТоваровУслуг);
	
	Если НЕ ЗначениеЗаполнено(НалоговаяНакладная) Тогда
		Возврат;
	Иначе
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ИНАГРО_СформированныеДокументы.Период КАК Период,
			|	ИНАГРО_СформированныеДокументы.ДокументИсточник КАК ДокументИсточник,
			|	ИНАГРО_СформированныеДокументы.ИмяТиповогоДокумента КАК ИмяТиповогоДокумента,
			|	ИНАГРО_СформированныеДокументы.ПорядковыйНомерТиповогоДокумента КАК ПорядковыйНомерТиповогоДокумента,
			|	ИНАГРО_СформированныеДокументы.ТиповыйДокумент КАК ТиповыйДокумент,
			|	ИНАГРО_СформированныеДокументы.ЗапретРедактирования КАК ЗапретРедактирования
			|ИЗ
			|	РегистрСведений.ИНАГРО_СформированныеДокументы КАК ИНАГРО_СформированныеДокументы
			|ГДЕ
			|	ИНАГРО_СформированныеДокументы.ДокументИсточник = &ДокументИсточник
			|	И ИНАГРО_СформированныеДокументы.ИмяТиповогоДокумента = &ИмяТиповогоДокумента";
		
		Запрос.УстановитьПараметр("ДокументИсточник",     РеализацияТоваровУслуг);
		Запрос.УстановитьПараметр("ИмяТиповогоДокумента", "НалоговаяНакладная");
		
		Результат = Запрос.Выполнить().Выгрузить();  
		
		ЗаписьСуществует = ?(Результат.Количество() > 0, Истина, Ложь);
		
		СтруктураПолей = Новый Структура("ДокументИсточник, ИмяТиповогоДокумента, ПорядковыйНомерТиповогоДокумента", РеализацияТоваровУслуг, "НалоговаяНакладная", 1);
		
		ИНАГРО_Элеватор.ЗаблокироватьДокументыДляЗаписи(СтруктураПолей, НалоговаяНакладная, ЗаписьСуществует);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьРеализацияТоваровУслуг(ДокументИсточник)
	
	Запрос = Новый Запрос;	
	Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ТаблицаРегистра.ДокументИсточник КАК ДокументИсточник,
			|	ТаблицаРегистра.ИмяТиповогоДокумента КАК ИмяТиповогоДокумента,
			|	ТаблицаРегистра.ПорядковыйНомерТиповогоДокумента КАК ПорядковыйНомерТиповогоДокумента,
			|	ТаблицаРегистра.ТиповыйДокумент КАК ТиповыйДокумент,
			|	ТаблицаРегистра.ЗапретРедактирования КАК ЗапретРедактирования
			|ИЗ
			|	РегистрСведений.ИНАГРО_СформированныеДокументы КАК ТаблицаРегистра
			|ГДЕ
			|	ТаблицаРегистра.ДокументИсточник = &ДокументИсточник
			|	И ТаблицаРегистра.ИмяТиповогоДокумента = &ИмяТиповогоДокумента";
	
	Запрос.УстановитьПараметр("ДокументИсточник",     ДокументИсточник);
	Запрос.УстановитьПараметр("ИмяТиповогоДокумента", "РеализацияТоваровУслуг");	
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Реализация = ?(Результат.Количество() > 0, Результат[0].ТиповыйДокумент, Документы.РеализацияТоваровУслуг.ПустаяСсылка());

	Возврат Реализация;

КонецФункции

#Область ЦеныИВалюта

&НаКлиентеНаСервереБезКонтекста
Процедура СформироватьНадписьЦеныИВалюта(Форма)	
		
	Объект = Форма.Объект;
	СтруктураНадписи = Новый Структура(
		"ТипЦен, ВалютаДокумента, Курс, Кратность, ВалютаРегламентированногоУчета",
		Объект.ТипЦен,
		Объект.ВалютаДокумента,
		Объект.КурсВзаиморасчетов,
		Объект.КратностьВзаиморасчетов,
		Форма.ВалютаРегламентированногоУчета);
	
	Если Форма.ПлательщикНДС Тогда 
		СтруктураНадписи.Вставить("СуммаВключаетНДС", Объект.СуммаВключаетНДС);
		СтруктураНадписи.Вставить("АвторасчетНДС", 	  Объект.АвторасчетНДС);
	КонецЕсли;
	
	Форма.ЦеныИВалюта = ОбщегоНазначенияБПКлиентСервер.СформироватьНадписьЦеныИВалюта(СтруктураНадписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьИзмененияПоКнопкеЦеныИВалюты(ПересчитатьЦены = Ложь, ПерезаполнитьЦены = Ложь)
	
	// 1. Формируем структуру параметров для заполнения формы "Цены и Валюта".
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ВалютаДокумента",      Объект.ВалютаДокумента);
	СтруктураПараметров.Вставить("Курс",                 Объект.КурсВзаиморасчетов);
	СтруктураПараметров.Вставить("Кратность",            Объект.КратностьВзаиморасчетов);
	СтруктураПараметров.Вставить("СуммаВключаетНДС",     Объект.СуммаВключаетНДС);
	СтруктураПараметров.Вставить("АвторасчетНДС",        Объект.АвторасчетНДС);
	СтруктураПараметров.Вставить("Контрагент",           Объект.Контрагент);
	СтруктураПараметров.Вставить("Договор",              Объект.ДоговорКонтрагента);
	СтруктураПараметров.Вставить("Организация",          Объект.Организация);
	СтруктураПараметров.Вставить("ДатаДокумента",        Объект.Дата);
	СтруктураПараметров.Вставить("ПерезаполнитьЦены",    ПерезаполнитьЦены);
	СтруктураПараметров.Вставить("ПересчитатьЦены",      ПересчитатьЦены);
	СтруктураПараметров.Вставить("БылиВнесеныИзменения", Ложь);
	СтруктураПараметров.Вставить("ТипЦен",               Объект.ТипЦен);
	
	// 2. Открываем форму "Цены и Валюта".
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ОбработатьИзмененияПоКнопкеЦеныИВалютыЗавершение", ЭтотОбъект);
	
	ОткрытьФорму("ОбщаяФорма.ФормаЦеныИВалюта", СтруктураПараметров, , , , , ОповещениеОЗакрытии);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьИзмененияПоКнопкеЦеныИВалютыЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	СтруктураЦеныИВалюта = РезультатЗакрытия; 
	
	// 3. Перезаполняем табличную часть если были внесены изменения в форме "Цены и Валюта".
	Если ТипЗнч(СтруктураЦеныИВалюта) = Тип("Структура") И СтруктураЦеныИВалюта.БылиВнесеныИзменения Тогда

		ВалютаДоИзменения    = Объект.ВалютаДокумента;
		КурсДоИзменения 	 = Объект.КурсВзаиморасчетов;
		КратностьДоИзменения = Объект.КратностьВзаиморасчетов;
		
		Объект.ТипЦен                  = СтруктураЦеныИВалюта.ТипЦен;
		Объект.ВалютаДокумента         = СтруктураЦеныИВалюта.ВалютаДокумента;
		Объект.КурсВзаиморасчетов      = СтруктураЦеныИВалюта.Курс;
		Объект.КратностьВзаиморасчетов = СтруктураЦеныИВалюта.Кратность;
		Объект.СуммаВключаетНДС        = СтруктураЦеныИВалюта.СуммаВключаетНДС;
		Объект.АвторасчетНДС           = СтруктураЦеныИВалюта.АвторасчетНДС;
		
		Модифицированность = Истина;
		
		ПересчитатьНДС = СтруктураЦеныИВалюта.СуммаВключаетНДС <> СтруктураЦеныИВалюта.ПредСуммаВключаетНДС;
		Если СтруктураЦеныИВалюта.ПерезаполнитьЦены ИЛИ СтруктураЦеныИВалюта.ПересчитатьЦены ИЛИ ПересчитатьНДС Тогда
			ЗаполнитьРассчитатьСуммы(
				ВалютаДоИзменения, 
				КурсДоИзменения,
				КратностьДоИзменения,
				СтруктураЦеныИВалюта.ПерезаполнитьЦены,
				СтруктураЦеныИВалюта.ПересчитатьЦены,
				ПересчитатьНДС);
		КонецЕсли;
		
		Если Объект.АвторасчетНДС Тогда
			// соответствие для хранения погрешностей округлений
			ПогрешностиОкругления = Новый Соответствие();
			// пересчет сумм НДС с учетом ошибок округления
			УчетНДСКлиентСервер.ПересчитатьНДСсУчетомПогрешностиОкругления(Объект.Услуги, Объект.Ссылка, Объект.СуммаВключаетНДС, ПогрешностиОкругления, "Услуги", Строка(Объект.ВалютаДокумента));
			// Установим признак перерасчета сумм НДС
			ПерерасчетПроизведен = Истина;
		КонецЕсли;

		СформироватьНадписьЦеныИВалюта(ЭтаФорма);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРассчитатьСуммы(Знач ВалютаДоИзменения, КурсДоИзменения,	КратностьДоИзменения, ПерезаполнитьЦены = Ложь,	ПересчитатьЦены = Ложь, ПересчитатьНДС = Ложь)
	
	Если ПерезаполнитьЦены Тогда
		
		ТаблицаЦенНоменклатуры	= Ценообразование.ПолучитьТаблицуЦенНоменклатуры(
			ОбщегоНазначения.ВыгрузитьКолонку(Объект.Услуги, "Номенклатура", Истина),
			Объект.ТипЦен,
			Объект.Дата);
		
	ИначеЕсли ПересчитатьЦены Тогда
		Если КурсДоИзменения <> 0 И КратностьДоИзменения <> 0 Тогда
			СтруктураКурса = Новый Структура("Курс, Кратность", КурсДоИзменения, КратностьДоИзменения);
		Иначе
			СтруктураКурса = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаДоИзменения, Объект.Дата);
		КонецЕсли;
	КонецЕсли;
	
	Для Каждого СтрокаТабличнойЧасти Из Объект.Услуги Цикл
		ЗаполнитьРассчитатьСуммыВСтроке(СтрокаТабличнойЧасти, ТаблицаЦенНоменклатуры, ВалютаДоИзменения,
		СтруктураКурса, ПерезаполнитьЦены, ПересчитатьЦены, ПересчитатьНДС, Истина, 1);
	КонецЦикла;
	
	ОбновитьИтоги(ЭтаФорма);
	
	ПерерасчетПроизведен = Ложь;

	Если ПересчитатьНДС Тогда
		УстановитьЗаголовкиКолонок();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРассчитатьСуммыВСтроке(СтрокаТабличнойЧасти, ТаблицаЦенНоменклатуры, ВалютаПередИзменением, СтруктураКурса, ПерезаполнитьЦены, ПересчитатьЦены, ПересчитатьНДС, ЕстьНДС, ЗначениеПустогоКоличества)
	
	Если ПерезаполнитьЦены Тогда
		
		НайденнаяСтрока	= ТаблицаЦенНоменклатуры.Найти(СтрокаТабличнойЧасти.Номенклатура, "Номенклатура");
		Если НайденнаяСтрока <> Неопределено Тогда
			Цена = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(
			НайденнаяСтрока.Цена, НайденнаяСтрока.Валюта, Объект.ВалютаДокумента, НайденнаяСтрока.Курс,
			Объект.КурсВзаиморасчетов, НайденнаяСтрока.Кратность, Объект.КратностьВзаиморасчетов);
		Иначе
			Цена = 0;
		КонецЕсли;
		
		// Признак того, что цена включает НДС, хранится в реквизите ЦенаВключаетНДС типа цен
		ЦенаВключаетНДС = ?(ЗначениеЗаполнено(Объект.ТипЦен), Объект.ТипЦен.ЦенаВключаетНДС, Ложь);
		
	Иначе
		Если ПересчитатьЦены Тогда
			
			Цена = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(
			СтрокаТабличнойЧасти.Цена, ВалютаПередИзменением, Объект.ВалютаДокумента, СтруктураКурса.Курс,
			Объект.КурсВзаиморасчетов, СтруктураКурса.Кратность, Объект.КратностьВзаиморасчетов);
			
		Иначе
			Цена = СтрокаТабличнойЧасти.Цена;
		КонецЕсли;
		// Признак того, что цена включает НДС, хранится в реквизите СуммаВключаетНДС документа
		ЦенаВключаетНДС = ?(ПересчитатьНДС, НЕ Объект.СуммаВключаетНДС, Объект.СуммаВключаетНДС);
	КонецЕсли;
	
	Если ЕстьНДС Тогда
		СтрокаТабличнойЧасти.Цена     = УчетНДСКлиентСервер.ПересчитатьЦенуПриИзмененииФлаговНалогов(Цена,
		ЦенаВключаетНДС, Объект.СуммаВключаетНДС, УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));
		
		СтрокаТабличнойЧасти.Сумма    = СтрокаТабличнойЧасти.Цена * ?(СтрокаТабличнойЧасти.Количество = 0, ЗначениеПустогоКоличества, СтрокаТабличнойЧасти.Количество);
		
		СтрокаТабличнойЧасти.СуммаНДС = УчетНДСКлиентСервер.РассчитатьСуммуНДС(
		СтрокаТабличнойЧасти.Сумма,
		Объект.СуммаВключаетНДС,
		УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));
		
		СтрокаТабличнойЧасти.Всего    = СтрокаТабличнойЧасти.Сумма + ?(Объект.СуммаВключаетНДС, 0, СтрокаТабличнойЧасти.СуммаНДС);
	Иначе
		
		СтрокаТабличнойЧасти.Цена  = Цена;
		СтрокаТабличнойЧасти.Сумма = СтрокаТабличнойЧасти.Цена * ?(СтрокаТабличнойЧасти.Количество =0, ЗначениеПустогоКоличества, СтрокаТабличнойЧасти.Количество);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти 

#Область СлужебныеПроцедурыИФункцииБСП

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры

// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти