#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
// Текущие курс и кратность валюты документа для расчетов
Перем КурсДокумента;
Перем КратностьДокумента;

Перем мВалютаРегламентированногоУчета;

// Хранят группировочные признаки вида операции
Перем ЕстьРасчетыСКонтрагентами;
Перем ЕстьРасчетыПоКредитам;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА


Процедура УстановитьНазначениеДенежныхСредств() Экспорт
	
	Если ВидОперации = Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствПодотчетником Тогда
		НазначениеДенежныхСредств = Справочники.НазначенияНаличныхДенежныхСредств.Командировка
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствПоставщиком Тогда
        НазначениеДенежныхСредств = Справочники.НазначенияНаличныхДенежныхСредств.ПокупкаТоваров
	Иначе
        НазначениеДенежныхСредств = Справочники.НазначенияНаличныхДенежныхСредств.Прочее	
	КонецЕсли;	
	
КонецПроцедуры	

//////////////////////////////////////////////////////////////////////////////////
//// ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

// Проверяет установленные курсы валют документа перед пересчетом сумм
// Нулевые курсы устанавливаются в 1
//
Процедура ПроверкаКурсовВалют(СтрокаПлатеж) Экспорт


	Если Не СтрокаПлатеж = Неопределено Тогда
		СтрокаПлатеж.КурсВзаиморасчетов      = ?(СтрокаПлатеж.КурсВзаиморасчетов      = 0, 1, СтрокаПлатеж.КурсВзаиморасчетов);
		СтрокаПлатеж.КратностьВзаиморасчетов = ?(СтрокаПлатеж.КратностьВзаиморасчетов = 0, 1, СтрокаПлатеж.КратностьВзаиморасчетов);

	КонецЕсли;

КонецПроцедуры // ПроверкаКурсовВалют()

// Пересчитывает сумму НДС
//
// Параметры:
//  Нет.
//
Процедура ПересчитатьСуммуНДС(СтрокаПлатеж) Экспорт

	ЗначениеСтавкиНДС     = УчетНДС.ПолучитьСтавкуНДС(СтрокаПлатеж.СтавкаНДС);

	СтрокаПлатеж.СуммаНДС = СтрокаПлатеж.СуммаПлатежа * ЗначениеСтавкиНДС / (100 + ЗначениеСтавкиНДС);

КонецПроцедуры // ПересчитатьСуммуНДС()

// Заполняет документ на основании расходного кассового ордера\
//
Процедура ЗаполнитьПоРКО()

	Если ДокументОснование.ПоОбособленномуПодразделению Тогда
		
		ПоОбособленномуПодразделению = Истина;
		ОбособленноеПодразделениеОрганизации = ДокументОснование.ОбособленноеПодразделениеОрганизации;
		
	КонецЕсли;
	
	Если ДокументОснование.ВидОперации = Перечисления.ВидыОперацийРКО.ОплатаПоставщику Тогда

		СтруктураКурсаОснования = МодульВалютногоУчета.ПолучитьКурсВалюты(ДокументОснование.ВалютаДокумента, ДокументОснование.Дата);
		КурсОснования      = СтруктураКурсаОснования.Курс;
		КратностьОснования = СтруктураКурсаОснования.Кратность;

		ВидОперации = Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствПоставщиком;
		Контрагент  = ДокументОснование.Контрагент;

		Для Каждого СтрокаОснование ИЗ ДокументОснование.РасшифровкаПлатежа Цикл

			СтрокаПлатеж = РасшифровкаПлатежа.Добавить();

			СтрокаПлатеж.ДоговорКонтрагента      = СтрокаОснование.ДоговорКонтрагента;
			СтруктураКурсаВзаиморасчетов         = МодульВалютногоУчета.ПолучитьКурсВалюты(СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов, Дата);
			СтрокаПлатеж.КурсВзаиморасчетов      = СтруктураКурсаВзаиморасчетов.Курс;
			СтрокаПлатеж.КратностьВзаиморасчетов = СтруктураКурсаВзаиморасчетов.Кратность;

			СтрокаПлатеж.СуммаПлатежа = СтрокаОснование.СуммаПлатежа;

			Если НЕ ЗначениеЗаполнено(СтрокаОснование.Сделка) И СтрокаОснование.ДоговорКонтрагента.ВедениеВзаиморасчетов = 
				Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоРасчетнымДокументам Тогда
				СтрокаПлатеж.Сделка = ДокументОснование;
			Иначе
				СтрокаПлатеж.Сделка = СтрокаОснование.Сделка;
			КонецЕсли;

			СтрокаПлатеж.СтавкаНДС = СтрокаОснование.СтавкаНДС;

			СтрокаПлатеж.СчетУчетаРасчетовПоАвансам        = СтрокаОснование.СчетУчетаРасчетовПоАвансам;
			СтрокаПлатеж.СчетУчетаРасчетовСКонтрагентом    = СтрокаОснование.СчетУчетаРасчетовСКонтрагентом;
			
			СчетаУчета = БухгалтерскийУчетРасчетовСКонтрагентами.ПолучитьСчетаРасчетовСКонтрагентом(Организация, Контрагент, СтрокаПлатеж.ДоговорКонтрагента);
		
			СтрокаПлатеж.СчетУчетаНДС    				= СчетаУчета.СчетУчетаНДСПриобретений;
			СтрокаПлатеж.СчетУчетаНДСПодтвержденный     = СчетаУчета.СчетУчетаНДСПриобретенийПодтвержденный;
			СтрокаПлатеж.НалоговоеНазначение 			= СчетаУчета.НалоговоеНазначениеПриобретений;
			СтрокаПлатеж.Амортизируется 				= СчетаУчета.Амортизируется;
			
		КонецЦикла;


		Для Индекс = 0 По ДокументОснование.РасшифровкаПлатежа.Количество()-1 Цикл

			СтрокаПлатеж    = РасшифровкаПлатежа[Индекс];
			СтрокаОснование = ДокументОснование.РасшифровкаПлатежа[Индекс];

			Если (ЗначениеЗаполнено(СтрокаПлатеж.ДоговорКонтрагента))
			   И СтрокаПлатеж.ДоговорКонтрагента=СтрокаОснование.ДоговорКонтрагента Тогда // Остался договор из основания

				СтрокаПлатеж.СуммаВзаиморасчетов = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаОснование.СуммаПлатежа, 
				ДокументОснование.ВалютаДокумента, 
				СтрокаОснование.ДоговорКонтрагента.ВалютаВзаиморасчетов,
				КурсОснования, СтрокаОснование.КурсВзаиморасчетов, 
				КратностьОснования, СтрокаОснование.КратностьВзаиморасчетов);

				СтрокаПлатеж.СуммаПлатежа     = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаПлатеж.СуммаВзаиморасчетов, 
				СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов,
				ВалютаДокумента,
				СтрокаПлатеж.КурсВзаиморасчетов, КурсДокумента, 
				СтрокаПлатеж.КратностьВзаиморасчетов,КратностьДокумента);

			Иначе

				Если НЕ ЗначениеЗаполнено(СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов) Тогда

					СтрокаПлатеж.СуммаВзаиморасчетов=СтрокаПлатеж.СуммаПлатежа;
					СтрокаПлатеж.КурсВзаиморасчетов=1;
					СтрокаПлатеж.КратностьВзаиморасчетов=1;

				Иначе

					СтрокаПлатеж.СуммаВзаиморасчетов = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаПлатеж.СуммаПлатежа, 
					ВалютаДокумента, 
					СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов,
					КурсДокумента, СтрокаПлатеж.КурсВзаиморасчетов, 
					КратностьДокумента, СтрокаПлатеж.КратностьВзаиморасчетов);

				КонецЕсли;

			КонецЕсли;

			ПересчитатьСуммуНДС(СтрокаПлатеж);
			
			Если НЕ СтрокаПлатеж.НалоговоеНазначение = Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_Пропорционально Тогда
				СтрокаПлатеж.СуммаНДСПропорциональноКредит = 0;
			Иначе	
				СтрокаПлатеж.СуммаНДСПропорциональноКредит = СтрокаПлатеж.СуммаНДС * НалоговыйУчет.ПолучитьКоэффициентПропорциональногоНДС(Организация, Дата);
			КонецЕсли;

		КонецЦикла;

		СуммаДокумента = РасшифровкаПлатежа.Итог("СуммаПлатежа");

	ИначеЕсли ДокументОснование.ВидОперации = Перечисления.ВидыОперацийРко.ВыдачаДенежныхСредствПодотчетнику Тогда
		
		ВидОперации = Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствПодотчетником;
		
		НоваяСтрока = РасшифровкаПлатежа.Добавить();
		
		Контрагент     = ДокументОснование.Контрагент;
		СуммаДокумента = ДокументОснование.СуммаДокумента;
		НоваяСтрока.СуммаПлатежа = СуммаДокумента;
				
		СтатьяДвиженияДенежныхСредств= ДокументОснование.СтатьяДвиженияДенежныхСредств
		
	Иначе

		ВидОперации = Перечисления.ВидыОперацийПКО.ПриходДенежныхСредствПрочее;
		// Документ не вводится на основании РКО с другими видами операций
		Возврат;

	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьПоПКОУпр()


//////////////////////////////////////////////////////////////////////////////////
//// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА


Процедура ПодготовитьТаблицуОплат(СтруктураШапкиДокумента, ТаблицаОплата, Отказ, Заголовок);
	
	// Получим необходимые данные для проведения и проверки заполенения данные по табличной части "Оплата".
	СтруктураПолей = Новый Структура();
	СтруктураПолей.Вставить("ВидОплаты"        	, "ВидОплаты");
	СтруктураПолей.Вставить("Контрагент"        , "Контрагент");
	СтруктураПолей.Вставить("ДоговорКонтрагента", "ДоговорКонтрагента");
	СтруктураПолей.Вставить("СчетДеньгиВПути"   , "СчетДеньгиВПути");
	СтруктураПолей.Вставить("СуммаОплаты"       , "СуммаОплаты");
	
	ТаблицаОплата = ОбщегоНазначенияРед12.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Оплата", СтруктураПолей).Выгрузить();

КонецПроцедуры

Процедура ДвиженияПоРаспределениюОплат(СтруктураШапкиДокумента, ТаблицаОплата)
	
	Если ТаблицаОплата.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СчетКт       = ПланыСчетов.Хозрасчетный.РасчетыСРозничнымиПокупателями;
	СчетНаличные = СтруктураШапкиДокумента.СчетКасса;
	ПроводкиБУ   = Движения.Хозрасчетный;
	ДатаДока     = Дата;
	
	Для Каждого СтрокаТаблицы Из ТаблицаОплата Цикл
		
		Если СтрокаТаблицы.СуммаОплаты = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Проводка = ПроводкиБУ.Добавить();
        Проводка.Период      = ДатаДока;
		Проводка.Организация = СтруктураШапкиДокумента.Организация;
		Проводка.Сумма       = СтрокаТаблицы.СуммаОплаты;
		
		Если СтрокаТаблицы.ВидОплаты.ТипОплаты = Перечисления.ТипыОплат.Наличные Тогда
			Проводка.СчетДт = СчетНаличные;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "СтатьиДвиженияДенежныхСредств", СтруктураШапкиДокумента.СтатьяДвиженияДенежныхСредств);
			Если СтруктураШапкиДокумента.ВестиУчетДенежныхСредствПоОбособленнымПодразделениям Тогда
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, ОбособленноеПодразделениеОрганизации);
			КонецЕсли;
			Проводка.Содержание = НСтр("ru='Реализация товаров в розницу за наличную оплату';uk='Реалізація товарів у роздріб за готівкову оплату'", Локализация.КодЯзыкаИнформационнойБазы());
			
		ИначеЕсли СтрокаТаблицы.ВидОплаты.ТипОплаты = Перечисления.ТипыОплат.БанковскийКредит Тогда
			Проводка.СчетДт = СтрокаТаблицы.СчетДеньгиВПути;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты", СтрокаТаблицы.Контрагент);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Договоры", СтрокаТаблицы.ДоговорКонтрагента);
			Проводка.Содержание = НСтр("ru='Реализация в розницу товаров, оплаченных банковским кредитом';uk='Реалізація в роздріб товарів, оплачених банківським кредитом'", Локализация.КодЯзыкаИнформационнойБазы());
			
		ИначеЕсли СтрокаТаблицы.ВидОплаты.ТипОплаты = Перечисления.ТипыОплат.ПлатежнаяКарта Тогда
			Проводка.СчетДт = СтрокаТаблицы.СчетДеньгиВПути;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты", СтрокаТаблицы.Контрагент);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Договоры", СтрокаТаблицы.ДоговорКонтрагента);
			Проводка.Содержание = НСтр("ru='Реализация в розницу товаров, оплаченных платежной картой';uk='Реалізація в роздріб товарів, оплачених платіжною картою'", Локализация.КодЯзыкаИнформационнойБазы());
			
		КонецЕсли;
		
		Проводка.СчетКт = СчетКт;		
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Склады", СтруктураШапкиДокумента.Контрагент);
		
	КонецЦикла;
	
	НаличнаяОплата = СуммаПродаж - СуммаВозврата - СуммаБезналичнойОплаты;
	
	Если НаличнаяОплата <> 0 Тогда
		Проводка = ПроводкиБУ.Добавить();
        Проводка.Период      = ДатаДока;
		Проводка.Организация = СтруктураШапкиДокумента.Организация;
		Проводка.Сумма       = НаличнаяОплата;
		Проводка.СчетДт = СчетНаличные;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "СтатьиДвиженияДенежныхСредств", СтруктураШапкиДокумента.СтатьяДвиженияДенежныхСредств);
		Если СтруктураШапкиДокумента.ВестиУчетДенежныхСредствПоОбособленнымПодразделениям Тогда
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, ОбособленноеПодразделениеОрганизации);
		КонецЕсли;
		Проводка.Содержание = НСтр("ru='Реализация товаров в розницу за наличную оплату';uk='Реалізація товарів у роздріб за готівкову оплату'", Локализация.КодЯзыкаИнформационнойБазы());
		Проводка.СчетКт = СчетКт;		
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Склады", СтруктураШапкиДокумента.Контрагент);
	КонецЕсли;
	
КонецПроцедуры

Процедура ДвиженияПоРегистрам(Режим, Отказ, Заголовок ,СтруктураШапкиДокумента, ТаблицаОплата)

	// Бухгалтерские проводки документа

	ДатаДок            = Дата;
	ПроводкиБУ         = Движения.Хозрасчетный;

	ВалютаРег          = мВалютаРегламентированногоУчета;
	ДанныеОВалюте      = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаРег, ДатаДок);

	КурсДокумента      = ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета);
	КратностьДокумента = ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета);

	КассаВВалюте       = СчетКасса.Валютный;
	СчетДт             = СчетКасса;

	Если ЕстьРасчетыСКонтрагентами или ЕстьРасчетыПоКредитам Тогда

		СтруктураШапкиДокумента.Вставить("КоррСчет",СчетДт);

		Если БухгалтерскийУчетРасчетовСКонтрагентами.ДвижениеДенег(ЭтотОбъект,СтруктураШапкиДокумента,ЕстьРасчетыСКонтрагентами,Отказ,Заголовок,?(ЕстьРасчетыПоКредитам,НСтр("ru='Расчеты по кредитам и займам';uk='Розрахунки за кредитами і позиками'",Локализация.КодЯзыкаИнформационнойБазы()),""))=Ложь тогда
			Возврат;
		КонецЕсли;

	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПКО.ПриходДенежныхСредствРозничнаяВыручка Тогда
		Если СтруктураШапкиДокумента.ВыручкаСНТТ Тогда
            // только в случе выручки с НТТ делаются проводки
			// по АТТ все проводки делаются в отчете о розничных продажах
			
			Для Каждого Строка Из ПриемРозничнойВыручки Цикл
				
				Если ТаблицаОплата.Количество() > 0 Тогда
					СчетДт = ПланыСчетов.Хозрасчетный.РасчетыСРозничнымиПокупателями;
				КонецЕсли;
				
				// Запишем проводки по выручке
				Если НЕ Строка.Возврат Тогда
						
					Проводка = ПроводкиБУ.Добавить();
					Проводка.Период      = ДатаДок;
					Проводка.Организация = Организация;
					Проводка.Содержание  = НСтр("ru='Оприходована выручка из розничной торговли';uk='Оприбутковано виторг із роздрібної торгівлі'",Локализация.КодЯзыкаИнформационнойБазы());
						
					Проводка.СчетДт      = СчетДт;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтатьяДвиженияДенежныхСредств);
					Если СтруктураШапкиДокумента.ВестиУчетДенежныхСредствПоОбособленнымПодразделениям Тогда
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, ОбособленноеПодразделениеОрганизации);
					КонецЕсли;
				
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Склады", СтруктураШапкиДокумента.Контрагент);
				
					Если СтруктураШапкиДокумента.УчетВПродажныхЦенах Тогда
						
						// берем все из схемы реализации
						Проводка.СчетКт      = Строка.СхемаРеализации.СчетДоходов;
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, Строка.СхемаРеализации.СубконтоДоходов1);
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, Строка.СхемаРеализации.СубконтоДоходов2);
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3, Строка.СхемаРеализации.СубконтоДоходов3);
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "НоменклатурныеГруппы", Строка.НоменклатурнаяГруппа);
						
					Иначе
						Проводка.СчетКт      = СчетУчетаРасчетовСКонтрагентом; // он же - счет доходов
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "СтатьиДоходов",  СтатьяДоходов);
					КонецЕсли; 
						         
					Проводка.Сумма       = Строка.Сумма;
					
					Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыльДо2015 Тогда
						
						Проводка.НалоговоеНазначениеКт = Строка.НалоговоеНазначениеДоходовИЗатрат;
						
						Если НЕ Строка.НалоговоеНазначениеДоходовИЗатрат = Справочники.НалоговыеНазначенияАктивовИЗатрат.НКУ_НеХозДеятельность Тогда
						
							Проводка.СуммаНУКт = Проводка.Сумма;
						
						КонецЕсли;
					
					КонецЕсли;
					
				Иначе
						
					Проводка = ПроводкиБУ.Добавить();
					Проводка.Период      = ДатаДок;
					Проводка.Организация = Организация;
					Проводка.Содержание  = НСтр("ru='Оприходована выручка из розничной торговли (возврат)';uk='Оприбутковано виторг із роздрібної торгівлі (повернення)'",Локализация.КодЯзыкаИнформационнойБазы());
						
					Если СтруктураШапкиДокумента.УчетВПродажныхЦенах Тогда
						
						// берем все из схемы реализации
						Проводка.СчетДт      = Строка.СхемаРеализации.СчетВычетовИзДоходов;
						
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, Строка.СхемаРеализации.СубконтоВычетовИзДоходов1);
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, Строка.СхемаРеализации.СубконтоВычетовИзДоходов2);
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, Строка.СхемаРеализации.СубконтоВычетовИзДоходов3);
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "НоменклатурныеГруппы", Строка.НоменклатурнаяГруппа);
						
					Иначе
						Проводка.СчетДт      = СчетВычетаИзДоходовРозничныхПродаж;
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "СтатьиДоходов",  СтатьяДоходов);
					КонецЕсли;
						
					Проводка.СчетКт      = СчетДт;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, СтатьяДвиженияДенежныхСредств);
					Если СтруктураШапкиДокумента.ВестиУчетДенежныхСредствПоОбособленнымПодразделениям Тогда
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, ОбособленноеПодразделениеОрганизации);
					КонецЕсли;
				
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Склады", СтруктураШапкиДокумента.Контрагент);
				
					Проводка.Сумма       = Строка.Сумма;
						
					Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыльДо2015 Тогда
						
						Проводка.НалоговоеНазначениеДт = Строка.НалоговоеНазначениеДоходовИЗатрат;
						Если НЕ Строка.НалоговоеНазначениеДоходовИЗатрат = Справочники.НалоговыеНазначенияАктивовИЗатрат.НКУ_НеХозДеятельность Тогда
						
							Проводка.СуммаНУДт = Проводка.Сумма;
						
						КонецЕсли;
					
					КонецЕсли;
					
				КонецЕсли; 
				
				
				Если СтруктураШапкиДокумента.УчетВПродажныхЦенах Тогда
					//отражение продажи товаров
					
					//списание товаров по продажным ценам
					Проводка = ПроводкиБУ.Добавить();
					Проводка.Период      = ДатаДок;
					Проводка.Организация = Организация;
					Если Строка.Возврат Тогда
						Проводка.Содержание  = НСтр("ru='Отражен возврат товаров';uk='Відображено повернення товарів'",Локализация.КодЯзыкаИнформационнойБазы());
						
						Проводка.СчетДт      = Строка.СхемаРеализации.СчетСебестоимостиПриВозврате;
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, Строка.СхемаРеализации.СубконтоСебестоимостиПриВозврате1);
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, Строка.СхемаРеализации.СубконтоСебестоимостиПриВозврате2);
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, Строка.СхемаРеализации.СубконтоСебестоимостиПриВозврате3);
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "НоменклатурныеГруппы", Строка.НоменклатурнаяГруппа);
						
					Иначе
						Проводка.Содержание  = НСтр("ru='Отражена продажа товаров';uk='Відображено продаж товарів'",Локализация.КодЯзыкаИнформационнойБазы());
						
						Проводка.СчетДт      = Строка.СхемаРеализации.СчетСебестоимости;
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, Строка.СхемаРеализации.СубконтоСебестоимости1);
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, Строка.СхемаРеализации.СубконтоСебестоимости2);
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, Строка.СхемаРеализации.СубконтоСебестоимости3);
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "НоменклатурныеГруппы", Строка.НоменклатурнаяГруппа);
					КонецЕсли; 
								
					Проводка.СчетКт      = ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахНТТ;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "СтавкиНДС",  Строка.СтавкаНДС);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Склады",  СтруктураШапкиДокумента.Контрагент);
					
					Проводка.Сумма       = ?(Строка.Возврат,-1,1)*Строка.Сумма;
					
					Проводка.НалоговоеНазначениеКт = Строка.НалоговоеНазначение;
					
					Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыльДо2015 Тогда
						
						Проводка.НалоговоеНазначениеДт = Строка.НалоговоеНазначениеДоходовИЗатрат;
						Если НЕ Строка.НалоговоеНазначение = Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяНеХозДеятельность Тогда
							Проводка.СуммаНУДт = Проводка.Сумма;
							Проводка.СуммаНУКт = Проводка.Сумма;
						КонецЕсли;
					КонецЕсли;
					
				КонецЕсли; 
				
			КонецЦикла;
			
			// проводки по НДС
			ТаблицаВыручки = ПриемРозничнойВыручки.Выгрузить();
			Если СтруктураШапкиДокумента.УчетВПродажныхЦенах Тогда
				ТаблицаВыручки.Свернуть("Возврат,СхемаРеализации,НоменклатурнаяГруппа,СчетУчетаНДС","СуммаНДС");
			Иначе
				ТаблицаВыручки.Свернуть("Возврат,СчетУчетаНДС","СуммаНДС");
			КонецЕсли; 

			Для Каждого СтрокаНДС из ТаблицаВыручки Цикл
					
				Если СтрокаНДС.СуммаНДС = 0 Тогда
					Продолжить;
				КонецЕсли;	
					
				Проводка = ПроводкиБУ.Добавить();

				Проводка.Период      = Дата;
				Проводка.Активность  = Истина;
				Проводка.Организация = Организация;
				Если СтрокаНДС.Возврат = Истина Тогда
					Проводка.Содержание  = НСтр("ru='НДС розничной выручки (возврат)';uk='ПДВ роздрібного виторгу (повернення)'",Локализация.КодЯзыкаИнформационнойБазы());
					Проводка.Сумма       = - СтрокаНДС.СуммаНДС;
					Если СтруктураШапкиДокумента.УчетВПродажныхЦенах Тогда
						// берем все из схемы реализации
						Проводка.СчетДт      = СтрокаНДС.СхемаРеализации.СчетВычетовИзДоходов;
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтрокаНДС.СхемаРеализации.СубконтоВычетовИзДоходов1);
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, СтрокаНДС.СхемаРеализации.СубконтоВычетовИзДоходов2);
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, СтрокаНДС.СхемаРеализации.СубконтоВычетовИзДоходов3);
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "НоменклатурныеГруппы", СтрокаНДС.НоменклатурнаяГруппа);
						
					Иначе
						Проводка.СчетДт      = СчетВычетаИзДоходовРозничныхПродаж;
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "СтатьиДоходов",  СтатьяДоходов);
					КонецЕсли;
				Иначе
					Проводка.Содержание  = НСтр("ru='НДС розничной выручки';uk='ПДВ роздрібного виторгу'",Локализация.КодЯзыкаИнформационнойБазы());
					Проводка.Сумма       = СтрокаНДС.СуммаНДС;
					Если СтруктураШапкиДокумента.УчетВПродажныхЦенах Тогда
						// берем все из схемы реализации
						Проводка.СчетДт      = СтрокаНДС.СхемаРеализации.СчетДоходов;
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтрокаНДС.СхемаРеализации.СубконтоДоходов1);
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, СтрокаНДС.СхемаРеализации.СубконтоДоходов2);
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, СтрокаНДС.СхемаРеализации.СубконтоДоходов3);
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "НоменклатурныеГруппы", СтрокаНДС.НоменклатурнаяГруппа);
					Иначе
						Проводка.СчетДт      = СчетУчетаРасчетовСКонтрагентом; // он же - счет доходов
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "СтатьиДоходов",  СтатьяДоходов);
					КонецЕсли; 					
				КонецЕсли;
				
				Проводка.СчетКт      = СтрокаНДС.СчетУчетаНДС;
			
				Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыльДо2015 Тогда
					
					Проводка.НалоговоеНазначениеДт = Строка.НалоговоеНазначениеДоходовИЗатрат;
					Если НЕ Строка.НалоговоеНазначение = Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяНеХозДеятельность Тогда
						Проводка.СуммаНУДт = Проводка.Сумма;
						Проводка.СуммаНУКт = Проводка.Сумма;
					КонецЕсли;
				КонецЕсли;
				
			КонецЦикла;
			
			// проводки по акцизному сбору
			Если СтруктураШапкиДокумента.УчетВПродажныхЦенах Тогда
				
				ТаблицаВыручки = ПриемРозничнойВыручки.Выгрузить();
				ТаблицаВыручки.Свернуть("Возврат,СхемаРеализации,НоменклатурнаяГруппа,НалоговоеНазначение,НалоговоеНазначениеДоходовИЗатрат","СуммаАкцизногоНалога");

				Для Каждого СтрокаАкцизногоНалога из ТаблицаВыручки Цикл
						
					Если СтрокаАкцизногоНалога.СуммаАкцизногоНалога = 0 Тогда
						Продолжить;
					КонецЕсли;	
						
					Проводка = ПроводкиБУ.Добавить();

					Проводка.Период      = Дата;
					Проводка.Активность  = Истина;
					Проводка.Организация = Организация;
					Если СтрокаАкцизногоНалога.Возврат = Истина Тогда
						Проводка.Содержание  = НСтр("ru='Акцизный налог розничной выручки (возврат)';uk='Акцизний податок роздрібного виторгу (повернення)'",Локализация.КодЯзыкаИнформационнойБазы());
						Проводка.Сумма       = - СтрокаАкцизногоНалога.СуммаАкцизногоНалога;
						
						// берем все из схемы реализации
						Проводка.СчетДт      = СтрокаАкцизногоНалога.СхемаРеализации.СчетВычетовИзДоходов;
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтрокаАкцизногоНалога.СхемаРеализации.СубконтоВычетовИзДоходов1);
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, СтрокаАкцизногоНалога.СхемаРеализации.СубконтоВычетовИзДоходов2);
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, СтрокаАкцизногоНалога.СхемаРеализации.СубконтоВычетовИзДоходов3);
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "НоменклатурныеГруппы", СтрокаАкцизногоНалога.НоменклатурнаяГруппа);
							
					Иначе
						Проводка.Содержание  = НСтр("ru='Акцизный налог розничной выручки';uk='Акцизний податок роздрібного виторгу'",Локализация.КодЯзыкаИнформационнойБазы());
						Проводка.Сумма       = СтрокаАкцизногоНалога.СуммаАкцизногоНалога;
						
						// берем все из схемы реализации
						Проводка.СчетДт      = СтрокаАкцизногоНалога.СхемаРеализации.СчетДоходов;
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтрокаАкцизногоНалога.СхемаРеализации.СубконтоДоходов1);
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, СтрокаАкцизногоНалога.СхемаРеализации.СубконтоДоходов2);
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, СтрокаАкцизногоНалога.СхемаРеализации.СубконтоДоходов3);
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "НоменклатурныеГруппы", СтрокаАкцизногоНалога.НоменклатурнаяГруппа);
						
					КонецЕсли;
					
					Проводка.СчетКт      = СчетУчетаАкцизногоНалога;
					
					Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыльДо2015 Тогда
						Проводка.НалоговоеНазначениеДт = СтрокаАкцизногоНалога.НалоговоеНазначениеДоходовИЗатрат;
						Если НЕ СтрокаАкцизногоНалога.НалоговоеНазначение = Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяНеХозДеятельность Тогда
							Проводка.СуммаНУДт = Проводка.Сумма;
							Проводка.СуммаНУКт = Проводка.Сумма;
						КонецЕсли;
					КонецЕсли;
					
				КонецЦикла;
				
				ДвиженияРозничныеПродажиПодакцизныхТоваров(СтруктураШапкиДокумента, Отказ);
				
			КонецЕсли;
			
			Если  СтруктураШапкиДокумента.ЕстьНДС Тогда
				
				// Двжижения по регистру ОжидаемыйИПодтвержденныйНДСПродаж
				НаборДвижений   = Движения.ОжидаемыйИПодтвержденныйНДСПродаж;
				ТаблицаДвижений = НаборДвижений.ВыгрузитьКолонки();
				
				ТаблицаВыручки = ПриемРозничнойВыручки.Выгрузить();
				ТаблицаВыручки.Свернуть("Возврат,СтавкаНДС,СчетУчетаНДС","Сумма,СуммаАкцизногоНалога,СуммаНДС");

				
				ТаблицаВыручки.Колонки.Добавить("БазаНДС", 	  ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповЧисла(15,2));
				ТаблицаВыручки.Колонки.Добавить("СобытиеНДС", Новый ОписаниеТипов("ПеречислениеСсылка.СобытияОжидаемыйИПодтвержденныйНДСПродаж"));
				Для каждого СтрокаВыручки Из ТаблицаВыручки Цикл
					
					СтрокаВыручки.БазаНДС = СтрокаВыручки.Сумма - СтрокаВыручки.СуммаАкцизногоНалога- СтрокаВыручки.СуммаНДС;

					Если СтрокаВыручки.Возврат = Истина Тогда
						СтрокаВыручки.СобытиеНДС = Перечисления.СобытияОжидаемыйИПодтвержденныйНДСПродаж.ВозвратРозница;
					Иначе
						СтрокаВыручки.СобытиеНДС = Перечисления.СобытияОжидаемыйИПодтвержденныйНДСПродаж.РеализацияРозница;
					КонецЕсли;
					
				КонецЦикла; 
				
				ОбщегоНазначенияБПВызовСервера.ЗагрузитьВТаблицуЗначений(ТаблицаВыручки, ТаблицаДвижений);
				
				ТаблицаДвижений.ЗаполнитьЗначения(Организация       						    		, "Организация");
				ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.КодыОперацийОжидаемыйИПодтвержденныйНДСПродаж.ОжидаемыйНДС, "КодОперации");
				
				Если НЕ Отказ И ТаблицаДвижений.Количество() > 0 Тогда
					
					НаборДвижений.мПериод          = Дата;
					НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;
					
					Движения.ОжидаемыйИПодтвержденныйНДСПродаж.ВыполнитьПриход();
					Движения.ОжидаемыйИПодтвержденныйНДСПродаж.Записать();
					
				КонецЕсли;
				
			КонецЕсли; 
						
		КонецЕсли;

	Иначе

		Проводка = ПроводкиБУ.Добавить();

		Проводка.Период      = ДатаДок;
		Проводка.Организация = Организация;

		Проводка.СчетДт      = СчетДт;
		Проводка.СубконтоДт.СтатьиДвиженияДенежныхСредств = СтатьяДвиженияДенежныхСредств;
		Если СтруктураШапкиДокумента.ВестиУчетДенежныхСредствПоОбособленнымПодразделениям Тогда
			Проводка.СубконтоДт.ОбособленныеПодразделенияБезОбразованияЮрЛица = ОбособленноеПодразделениеОрганизации;	
		КонецЕсли;
		
		Если КассаВВалюте Тогда

			Проводка.Сумма = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтруктураШапкиДокумента.СуммаДокумента, 
										СтруктураШапкиДокумента.ВалютаДокумента, ВалютаРег,
										КурсДокумента, ДанныеОВалюте.Курс, 
										КратностьДокумента, ДанныеОВалюте.Кратность);

		Иначе

			Проводка.Сумма = СтруктураШапкиДокумента.СуммаДокумента;

		КонецЕсли; // Если КассаВВалюте Тогда

		Если ВидОперации = Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствПодотчетником Тогда

			Если КассаВВалюте Тогда
				СчетКт = ПланыСчетов.Хозрасчетный.РасчетыСПодотчетнымиЛицамиВИностраннойВалюте;
			Иначе
				СчетКт = ПланыСчетов.Хозрасчетный.РасчетыСПодотчетнымиЛицамиВНациональнойВалюте;
			КонецЕсли;

			Проводка.СчетКт     = СчетКт;
			Проводка.Содержание = НСтр("ru='Возврат средств от подотчетника';uk='Повернення коштів від підзвітної особи'",Локализация.КодЯзыкаИнформационнойБазы());

			Проводка.СубконтоКт.РаботникиОрганизаций = Контрагент;
			
			СтруктураШапкиДокумента.Вставить("КоррСчет", ПланыСчетов.Хозрасчетный.ПустаяСсылка());
			
		ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствРаботником Тогда
			Проводка.СубконтоДт.СтатьиДвиженияДенежныхСредств = СтатьяДвиженияДенежныхСредств;
			Если СчетКасса = ПланыСчетов.Хозрасчетный.КассаВНациональнойВалюте Тогда		
				Если ЗначениеЗаполнено(СчетУчетаРасчетовСКонтрагентом) Тогда
					СчетКт = СчетУчетаРасчетовСКонтрагентом 
				Иначе
					СчетКт = ПланыСчетов.Хозрасчетный.РасчетыПоЗаработнойПлате
				КонецЕсли;
			
				Проводка.СчетКт     = СчетКт;
				Проводка.Содержание = НСтр("ru='Возврат средств от работника';uk='Повернення коштів від працівника'",Локализация.КодЯзыкаИнформационнойБазы());
				
				// ИНАГРО ++
				//Если ТипЗнч(Контрагент) = Тип("СправочникСсылка.Сотрудники") Тогда
				//	Проводка.СубконтоКт.РаботникиОрганизаций = Контрагент.ФизическоеЛицо;
				//Иначе
				//	Проводка.СубконтоКт.РаботникиОрганизаций = Контрагент;
				//КонецЕсли;
				
				Проводка.СубконтоКт.РаботникиОрганизаций = Контрагент;
				
				// ИНАГРО --
				
				Если ПолучитьФункциональнуюОпцию("УчетЗарплатыИКадровСредствамиБухгалтерии") Тогда
					ДвижениеПоВзаиморасчетам();
				КонецЕсли;	
			Иначе
				СтрокаСообщения = НСтр("ru='На данный счет движения запрещены';uk='На Обраний рахунок рух заборонено'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения, , , , Отказ);
				Возврат;
			КонецЕсли;
			
			СтруктураШапкиДокумента.Вставить("КоррСчет", ПланыСчетов.Хозрасчетный.ПустаяСсылка());
			
		ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПКО.ПриходДенежныхСредствПрочее Тогда

			СчетКт = СчетУчетаРасчетовСКонтрагентом;

			Проводка.СчетКт     = СчетКт;
			Проводка.Содержание = НСтр("ru='Прочие поступления';uk='Інші надходження'",Локализация.КодЯзыкаИнформационнойБазы());

			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,1,СубконтоКт1);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,2,СубконтоКт2);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,3,СубконтоКт3);
		                                                                                       
			Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыльДо2015 Тогда
				Проводка.НалоговоеНазначениеКт = НалоговоеНазначениеПриПрочемПоступлении;
			
				Если НЕ НалоговоеНазначениеПриПрочемПоступлении = Справочники.НалоговыеНазначенияАктивовИЗатрат.НКУ_НеХозДеятельность Тогда			
					Проводка.СуммаНУКт = Проводка.Сумма;
				КонецЕсли;
			 КонецЕсли;

		ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПКО.ПолучениеНаличныхДенежныхСредствВБанке Тогда

			СчетКт = СчетУчетаРасчетовСКонтрагентом;

			Проводка.Содержание = НСтр("ru='Получение наличных в банке';uk='Одержання готівки в банку'",Локализация.КодЯзыкаИнформационнойБазы());
			Проводка.СчетКт     = СчетКт;
			Проводка.СубконтоКт.БанковскиеСчета = СчетОрганизации;
			Проводка.СубконтоКт.СтатьиДвиженияДенежныхСредств = СтатьяДвиженияДенежныхСредств;

		КонецЕсли; // Если ВидОперации = Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствПодотчетником Тогда

		
		Если КассаВВалюте Тогда
			
			Если СчетДт.Валютный Тогда
				Проводка.ВалютаДт        = СтруктураШапкиДокумента.ВалютаДокумента;
				Проводка.ВалютнаяСуммаДт = СтруктураШапкиДокумента.СуммаДокумента;
			КонецЕсли;

			Если СчетКт.Валютный Тогда
				Проводка.ВалютаКт        = СтруктураШапкиДокумента.ВалютаДокумента;
				Проводка.ВалютнаяСуммаКт = СтруктураШапкиДокумента.СуммаДокумента;
			КонецЕсли;

		КонецЕсли; // Если КассаВВалюте Тогда
		
		
	КонецЕсли; // Если ЕстьРасчетыСКонтрагентами или ЕстьРасчетыПоКредитам Тогда

	Если   ВидОперации = Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствПоставщиком 
		 И СтруктураШапкиДокумента.ЕстьНалогНаПрибыльДо2015 Тогда

		Для каждого СтрокаРасшифровки Из РасшифровкаПлатежа Цикл
			
			Если НЕ СтрокаРасшифровки.ВозвратАвансаДо01042011НУ Тогда
				Продолжить;
			КонецЕсли;
			
			Если СтрокаРасшифровки.СуммаВДВРПоАвансуДо01042011 = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			ЭтоПриобретение = (Найти(ВРЕГ(СтруктураШапкиДокумента.ВидДокумента), "ВХОДЯЩ") > 0) ИЛИ (Найти(ВРЕГ(СтруктураШапкиДокумента.ВидДокумента), "ПРИХОД") > 0);			
			
			Проводка = ПроводкиБУ.Добавить();
			Проводка.Период     = ДатаДок;
			Проводка.Организация = СтруктураШапкиДокумента.Организация;
			
			СуммаСторноДоходовЗатрат = - СтрокаРасшифровки.СуммаВДВРПоАвансуДо01042011;
				
			Если ЭтоПриобретение Тогда
				Проводка.СчетДт    = ПланыСчетов.Хозрасчетный.ДругиеЗатратыОперационнойДеятельности;
				Проводка.СчетКт    = ПланыСЧетов.Хозрасчетный.Вспомогательный;
				Проводка.НалоговоеНазначениеДт = Справочники.НалоговыеНазначенияАктивовИЗатрат.НКУ_ХозДеятельность;
				Проводка.СуммаНУДт = СуммаСторноДоходовЗатрат;
				
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "СтатьиЗатрат", СтрокаРасшифровки.СтатьяПоВозвратуАвансаДо2011НУ);
				Проводка.Содержание = НСтр("ru='(НУ) Сторно расходов при возврате аванса до 01.04.2011';uk='(ПО) Сторно витрат при поверненні авансу до 01.04.2011'",Локализация.КодЯзыкаИнформационнойБазы());
					
			Иначе	
				Проводка.СчетКт    = ПланыСчетов.Хозрасчетный.ДругиеДоходыОтОбычнойДеятельности;
				Проводка.СчетДт    = ПланыСЧетов.Хозрасчетный.Вспомогательный;
				Проводка.НалоговоеНазначениеКт = Справочники.НалоговыеНазначенияАктивовИЗатрат.НКУ_ХозДеятельность;
				Проводка.СуммаНУКт = СуммаСторноДоходовЗатрат;
				
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "СтатьиДоходов", СтрокаРасшифровки.СтатьяПоВозвратуАвансаДо2011НУ);
				Проводка.Содержание = НСтр("ru='(НУ) Сторно доходов при возврате аванса до 01.04.2011';uk='(ПО) Сторно доходів при поверненні авансу до 01.04.2011'",Локализация.КодЯзыкаИнформационнойБазы());
			КонецЕсли;
		
		КонецЦикла;
	
	КонецЕсли;
	
	//Учет курсовых разниц
	Если (ВалютаДокумента <> мВалютаРегламентированногоУчета) тогда
		БухгалтерскийУчетРед12.ПереоценкаСчетовДокументаРегл(ЭтотОбъект,СтруктураШапкиДокумента, мВалютаРегламентированногоУчета,Отказ,Заголовок);
		
		//Отдельно переоценим счет взаиморасчетов с подотчетником на сумму возврата
		Если ВидОперации = Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствПодотчетником Тогда
				
			СчетПереоценки = новый структура("Счет,Субконто1,ВалютныйОстаток",ПланыСчетов.Хозрасчетный.РасчетыСПодотчетнымиЛицамиВИностраннойВалюте,Контрагент,СуммаДокумента);
			СтруктураШапкиДокумента.Вставить("СчетаУчетаКР", БухгалтерскийУчетРед12.ПараметрыУчетаКурсовыхРазниц(УчетнаяПолитика.ИспользуемыеКлассыСчетовРасходов(СтруктураШапкиДокумента.Организация, СтруктураШапкиДокумента.Дата)));
			Если СтруктураШапкиДокумента.СчетаУчетаКР.Количество() = 0 Тогда
				СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Для организации %1 на дату %2 не указаны параметры учета курсовых разниц!';uk='Для організації %1 на дату %2 не зазначені параметри обліку курсових різниць!'"),СтруктураШапкиДокумента.Организация, СтруктураШапкиДокумента.Дата);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения, , , , Отказ);
				Возврат;
			КонецЕсли;
			
			БухгалтерскийУчетРед12.ПереоценкаСчетаРегл(СтруктураШапкиДокумента,ПроводкиБУ,СчетПереоценки, мВалютаРегламентированногоУчета,Истина,Истина,,Истина);
				
		КонецЕсли;
				
	КонецЕсли; // Учет курсовых разниц

	Если (ЕстьРасчетыСКонтрагентами или ЕстьРасчетыПоКредитам или
			(ВидОперации = Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствПодотчетником) или
			(ВидОперации = Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствРаботником))
			и СтруктураШапкиДокумента.ЕстьЕдиныйНалог Тогда
		РеестрПлатежей = УправлениеДенежнымиСредствами.ПодготовитьТаблицуОплат(СтруктураШапкиДокумента);
		НалоговыйУчет.ДвиженияПоЕдиномуНалогуРасчеты(ЭтотОбъект,СтруктураШапкиДокумента,РеестрПлатежей,Отказ);
	ИначеЕсли (ВидОперации = Перечисления.ВидыОперацийПКО.ПриходДенежныхСредствПрочее
		или ВидОперации = Перечисления.ВидыОперацийПКО.ПриходДенежныхСредствРозничнаяВыручка) и СтруктураШапкиДокумента.ЕстьЕдиныйНалог Тогда
		НалоговыйУчет.ДвиженияПоЕдиномуНалогуПрочее(ЭтотОбъект,СтруктураШапкиДокумента,Отказ);	
	КонецЕсли;	
	
	Если ЕстьРасчетыСКонтрагентами и (СтруктураШапкиДокумента.ЕстьНДС) Тогда
	
		РеестрПлатежей = НалоговыйУчет.ПодготовитьТаблицуОплатДляНалоговогоУчета(СтруктураШапкиДокумента);
		НалоговыйУчет.ДвиженияПоРегистрамНалоговогоУчетаПлатежныхДокументов(ЭтотОбъект,СтруктураШапкиДокумента,РеестрПлатежей,Отказ);
			
	КонецЕсли; 
	

КонецПроцедуры

Процедура ДвижениеПоВзаиморасчетам()
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВзаиморасчетыССотрудниками.ПериодВзаиморасчетов КАК ПериодВзаиморасчетов,
	               |	-(ВзаиморасчетыССотрудниками.СуммаВзаиморасчетовОстаток) КАК Остаток
	               |ИЗ
	               |	РегистрНакопления.ВзаиморасчетыССотрудниками.Остатки(&Дата, Организация = &Организация И Сотрудник = &Сотрудник) КАК ВзаиморасчетыССотрудниками
				   //|	РегистрНакопления.ВзаиморасчетыССотрудниками.Остатки(&Дата, Организация = &Организация И ФизическоеЛицо = &ФизическоеЛицо) КАК ВзаиморасчетыССотрудниками  // ИНАГРО
				   | 
	               |ГДЕ
	               |	(ВзаиморасчетыССотрудниками.СуммаВзаиморасчетовОстаток < 0)
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ПериодВзаиморасчетов";
				   
	Запрос.УстановитьПараметр("Дата",Дата);
	Запрос.УстановитьПараметр("Организация",Организация);
	
	// ИНАГРО ++
	//Если ТипЗнч(Контрагент) = Тип("СправочникСсылка.Сотрудники") Тогда
	//	Запрос.УстановитьПараметр("ФизическоеЛицо",Контрагент.ФизическоеЛицо);
	//Иначе
	//	Запрос.УстановитьПараметр("ФизическоеЛицо",Контрагент);
	//КонецЕсли;	
	Запрос.УстановитьПараметр("Сотрудник", Контрагент);
	// ИНАГРО --	
	
	ВыборкаОстатков = Запрос.Выполнить().Выбрать();
	СуммаКПогашению = СуммаДокумента;
	
	НаборДвижений = Движения.ВзаиморасчетыССотрудниками;
	
	Пока ВыборкаОстатков.СледующийПоЗначениюПоля("ПериодВзаиморасчетов") Цикл 
		
		СтрокаДвижений = НаборДвижений.Добавить();
		//Свойства
		СтрокаДвижений.Период = Дата;
		СтрокаДвижений.ВидДвижения = ВидДвиженияНакопления.Расход;
		//Измерения
		
		// ИНАГРО ++
		//Если ТипЗнч(Контрагент) = Тип("СправочникСсылка.Сотрудники") Тогда
		//	СтрокаДвижений.ФизическоеЛицо = Контрагент.ФизическоеЛицо;
		//Иначе
		//	СтрокаДвижений.ФизическоеЛицо = Контрагент;
		//КонецЕсли;
		СтрокаДвижений.Сотрудник 		= Контрагент;
		СтрокаДвижений.ФизическоеЛицо 	= Контрагент.ФизическоеЛицо;
		// ИНАГРО --
		СтрокаДвижений.Организация = Организация;
		СтрокаДвижений.ПериодВзаиморасчетов = ВыборкаОстатков.ПериодВзаиморасчетов;
		СтрокаДвижений.СчетУчета =	СчетУчетаРасчетовСКонтрагентом; 
		
		//Реквизиты
		СтрокаДвижений.КодОперации	= Перечисления.КодыОперацийВзаиморасчетыСРаботникамиОрганизаций.Выплата;
		//Ресурсы
		СуммаВзаиморасчетов = Мин(ВыборкаОстатков.Остаток,СуммаКПогашению);
		СтрокаДвижений.СуммаВзаиморасчетов = - СуммаВзаиморасчетов; 
		
		СуммаКПогашению = СуммаКПогашению - СуммаВзаиморасчетов;
		
		Если СуммаКПогашению = 0 Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
		
	Если СуммаКПогашению > 0 Тогда
		
		СтрокаДвижений = НаборДвижений.Добавить();
		//Свойства
		СтрокаДвижений.Период = Дата;
		СтрокаДвижений.ВидДвижения = ВидДвиженияНакопления.Расход;
		//Измерения                  
		// ИНАГРО ++
		//Если ТипЗнч(Контрагент) = Тип("СправочникСсылка.Сотрудники") Тогда
		//	СтрокаДвижений.ФизическоеЛицо = Контрагент.ФизическоеЛицо;
		//Иначе
		//	СтрокаДвижений.ФизическоеЛицо = Контрагент;
		//КонецЕсли;
		СтрокаДвижений.Сотрудник 		= Контрагент;
		СтрокаДвижений.ФизическоеЛицо 	= Контрагент.ФизическоеЛицо;
		// ИНАГРО --
		СтрокаДвижений.Организация = Организация;
		СтрокаДвижений.ПериодВзаиморасчетов = НачалоМесяца(Дата);
		СтрокаДвижений.СчетУчета =	СчетУчетаРасчетовСКонтрагентом;
		
		//Реквизиты
		СтрокаДвижений.КодОперации	= Перечисления.КодыОперацийВзаиморасчетыСРаботникамиОрганизаций.Выплата;
		
		//Ресурсы
		СтрокаДвижений.СуммаВзаиморасчетов = - СуммаКПогашению;
						
	КонецЕсли;
КонецПроцедуры

Процедура ДвиженияРозничныеПродажиПодакцизныхТоваров(СтруктураШапкиДокумента, Отказ)
	
	Если НЕ (СтруктураШапкиДокумента.Дата >= '2015 01 01') Тогда
		// в 2014 движения не нужны
		Возврат;
	КонецЕсли; 
	
	НаборДвижений = Движения.РозничныеПродажиПодакцизныхТоваров;
	
	ТаблицаДвижений = НаборДвижений.ВыгрузитьКолонки();
	
	ТаблицаАкцизныйНалог = ПриемРозничнойВыручки.Выгрузить();
	ТаблицаАкцизныйНалог.Колонки.ПодакцизныеТоварыДляКоммерческогоИспользования.Имя 	= "ДляКоммерческогоИспользования";
	ТаблицаАкцизныйНалог.Колонки.Сумма.Имя 	= "БазаАкцизногоНалога";
	
	// удаляем строки без статьи (товары не подакцизные)
	Индекс = 0;

	Пока Индекс < ТаблицаАкцизныйНалог.Количество() Цикл

		СтрокаТаблицы = ТаблицаАкцизныйНалог.Получить(Индекс);

		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.СтатьяДекларацииПоАкцизномуНалогу) Тогда
			ТаблицаАкцизныйНалог.Удалить(СтрокаТаблицы);
			Продолжить;
		Иначе
			Индекс = Индекс + 1;
		КонецЕсли;
		
		СтрокаТаблицы.БазаАкцизногоНалога = СтрокаТаблицы.БазаАкцизногоНалога - СтрокаТаблицы.СуммаАкцизногоНалога;
		Если СтрокаТаблицы.Возврат Тогда
			// возвраты в ТЧ были с положительной суммой
			СтрокаТаблицы.БазаАкцизногоНалога 	= - СтрокаТаблицы.БазаАкцизногоНалога;
			СтрокаТаблицы.СуммаАкцизногоНалога 	= - СтрокаТаблицы.СуммаАкцизногоНалога;
		КонецЕсли; 
	КонецЦикла;
	
	ТаблицаАкцизныйНалог.Свернуть("СтатьяДекларацииПоАкцизномуНалогу,ДляКоммерческогоИспользования","СуммаАкцизногоНалога,БазаАкцизногоНалога");
	
	ТаблицаАкцизныйНалог.Колонки.Добавить("Склад", Новый ОписаниеТипов("СправочникСсылка.Склады"));
	ТаблицаАкцизныйНалог.ЗаполнитьЗначения(СтруктураШапкиДокумента.Контрагент,"Склад");
	
	ОбщегоНазначенияБПВызовСервера.ЗагрузитьВТаблицуЗначений(ТаблицаАкцизныйНалог, ТаблицаДвижений);
	ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.Дата,	"Период");
	ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.Организация,	"Организация");
	ТаблицаДвижений.ЗаполнитьЗначения(Истина,	"Активность");
	
	НаборДвижений.мПериод 			= СтруктураШапкиДокумента.Дата;
	НаборДвижений.мТаблицаДвижений 	= ТаблицаДвижений;
	НаборДвижений.ВыполнитьДвижения();
	
КонецПроцедуры

Процедура ЗаполнитьПоДокументуОснованию(Основание)
	
	// Заполнение реквизитов из стандартного набора по документу основанию.
	ЗаполнениеДокументов.ЗаполнитьПоОснованию(ЭтотОбъект, Основание);
	
	ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	
	Если НЕ ЗначениеЗаполнено(ВалютаДокумента) Тогда
		ВалютаДокумента = ВалютаРегламентированногоУчета;
	КонецЕсли;
	
	Если ВалютаДокумента = ВалютаРегламентированногоУчета Тогда
		КурсДокумента      = 1;
		КратностьДокумента = 1;
	Иначе
		СтруктураКурсаДокумента = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаДокумента, Дата);
		КурсДокумента      = СтруктураКурсаДокумента.Курс;
		КратностьДокумента = СтруктураКурсаДокумента.Кратность;
	КонецЕсли;
	
	ВидДокументаОснования = ТипЗнч(Основание);
 	Если НЕ ВидДокументаОснования = Тип("ДокументСсылка.ОтчетОРозничныхПродажах") 
		И НЕ ВидДокументаОснования = Тип("ДокументСсылка.АвансовыйОтчет") тогда
		СчетаУчета = БухгалтерскийУчетРасчетовСКонтрагентами.ПолучитьСчетаРасчетовСКонтрагентом(Основание.Организация, 
														Основание.Контрагент, Основание.ДоговорКонтрагента);
	КонецЕсли;
	
	Если ВидДокументаОснования = Тип("ДокументСсылка.СчетНаОплатуПокупателю") тогда		
		СчетУчетаРасчетовСКонтрагентом = СчетаУчета.СчетРасчетовПокупателя;
		СчетУчетаРасчетовПоАвансам 	   = СчетаУчета.СчетАвансовПокупателя;
	КонецЕсли;
	
	ДокументОснование = Основание;
	
	Если ВидДокументаОснования = Тип("ДокументСсылка.РеализацияТоваровУслуг")
		ИЛИ ВидДокументаОснования = Тип("ДокументСсылка.АктОбОказанииПроизводственныхУслуг")
		ИЛИ ВидДокументаОснования = Тип("ДокументСсылка.ОтчетКомиссионераОПродажах")
		ИЛИ ВидДокументаОснования = Тип("ДокументСсылка.ОтчетКомитентуОПродажах")
		ИЛИ ВидДокументаОснования = Тип("ДокументСсылка.ПередачаОС")
		ИЛИ ВидДокументаОснования = Тип("ДокументСсылка.ПередачаНМА")
		// ИНАГРО++
		ИЛИ (ИНАГРО_ОбщийВызовСервераПовтИсп.ЕстьБСПУ() И
			(Основание.Метаданные().Имя = "ИНАГРО_РеализацияБиологическихАктивов" ИЛИ
			 Основание.Метаданные().Имя = "ИНАГРО_СчетНаОплатуПокупателюБиологическихАктивов")) 
		// ИНАГРО--
		ИЛИ ВидДокументаОснования = Тип("ДокументСсылка.СчетНаОплатуПокупателю") Тогда

		ВидОперации           = Перечисления.ВидыОперацийПКО.ОплатаПокупателя;
		Контрагент            = Основание.Контрагент;
		ДоговорКонтрагента    = Основание.ДоговорКонтрагента;
		ВедениеВзаиморасчетов = ДоговорКонтрагента.ВедениеВзаиморасчетов;
		ВидРасчетовПоДоговору = БухгалтерскийУчетПереопределяемый.ОпределениеВидаРасчетовПоПараметрамДоговора(ДоговорКонтрагента);
		Если ВидРасчетовПоДоговору = Перечисления.ВидыРасчетовПоДоговорам.РасчетыВИностраннойВалюте Тогда
			ВалютаДокумента   = ДоговорКонтрагента.ВалютаВзаиморасчетов;
		КонецЕсли;
		
		СтруктураКурсаДокумента = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаДокумента, Дата);
		КурсДокумента           = СтруктураКурсаДокумента.Курс;
		КратностьДокумента      = СтруктураКурсаДокумента.Кратность;
		
		ВалютаВзаиморасчетов = ДоговорКонтрагента.ВалютаВзаиморасчетов;
		СтруктураКурсаВзаиморасчетов = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаВзаиморасчетов, Дата);

		ТаблицаПлатежей = РасшифровкаПлатежа.ВыгрузитьКолонки();
		Если НЕ ВидДокументаОснования = Тип("ДокументСсылка.ОтчетКомитентуОПродажах")
				ИЛИ ВидДокументаОснования = Тип("ДокументСсылка.ПередачаНМА") Тогда
			ТаблицаСуммОснования = УчетНДС.ПолучитьСуммуДокументаСНДСВРазрезеСтавокНДС(Основание);
			ТаблицаСуммОснования.Колонки.Сумма.Имя = "СуммаПлатежа";
			
			Если ВидДокументаОснования = Тип("ДокументСсылка.ОтчетКомиссионераОПродажах") Тогда
				МассивОснование = Новый Массив;
				МассивОснование.Добавить(Основание);
				СоотвествиеРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(
					МассивОснование, "СуммаВознаграждения");
				ПараметрыОснования = СоотвествиеРеквизитов[Основание];
				
				СуммаКоррПлатежа= ТаблицаСуммОснования.Итог("СуммаПлатежа") - ПараметрыОснования.СуммаВознаграждения;
				//СуммаКоррНДС	= СуммаДокументаОснования.Итог("СуммаНДС") - Основание.Товары.Итог("СуммаНДСВознаграждения");
				//НДС должен рассчитаться пропорционально платежу
				СуммаКоррНДС = 0;
				Если ТаблицаСуммОснования.Итог("СуммаПлатежа") > 0 Тогда
					СуммаКоррНДС	= ТаблицаСуммОснования.Итог("СуммаНДС") * (1 - ПараметрыОснования.СуммаВознаграждения/ТаблицаСуммОснования.Итог("СуммаПлатежа"));	
				КонецЕсли;
				
				НоваяКолонкаСумм = ОбщегоНазначенияБПКлиентСервер.РаспределитьПропорционально(СуммаКоррПлатежа,ТаблицаСуммОснования.ВыгрузитьКолонку("СуммаПлатежа"));
				Если не НоваяКолонкаСумм = Неопределено Тогда
					ТаблицаСуммОснования.ЗагрузитьКолонку(НоваяКолонкаСумм,"СуммаПлатежа");
				КонецЕсли; 
				
				НоваяКолонкаНДС = ОбщегоНазначенияБПКлиентСервер.РаспределитьПропорционально(СуммаКоррНДС,ТаблицаСуммОснования.ВыгрузитьКолонку("СуммаНДС"));
				Если не НоваяКолонкаНДС = Неопределено Тогда
					ТаблицаСуммОснования.ЗагрузитьКолонку(НоваяКолонкаНДС,"СуммаНДС");
				КонецЕсли; 
			КонецЕсли;
		Иначе
			ТаблицаСуммОснования = Новый ТаблицаЗначений();
			ТаблицаСуммОснования.Колонки.Добавить("СуммаПлатежа", ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповЧисла(15, 2));
			ТаблицаСуммОснования.Колонки.Добавить("СтавкаНДС",    Новый ОписаниеТипов("ПеречислениеСсылка.СтавкиНДС"));
			ТаблицаСуммОснования.Колонки.Добавить("СуммаНДС",     ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповЧисла(15, 2));
			СтрокаТаблицыСумм = ТаблицаСуммОснования.Добавить();
			Если ВидДокументаОснования = Тип("ДокументСсылка.ОтчетКомитентуОПродажах") Тогда
				СтрокаТаблицыСумм.СуммаПлатежа = Основание.СуммаВознаграждения;
				СтрокаТаблицыСумм.СтавкаНДС    = Основание.СтавкаНДСВознаграждения;
				СтрокаТаблицыСумм.СуммаНДС     = Основание.Товары.Итог("СуммаНДСВознаграждения");
			КонецЕсли;
		КонецЕсли;

		ОбщегоНазначенияБПВызовСервера.ЗагрузитьВТаблицуЗначений(ТаблицаСуммОснования, ТаблицаПлатежей);
		Если ТаблицаПлатежей.Количество() = 0 Тогда
			ТаблицаПлатежей.Добавить();
		КонецЕсли;
		ТаблицаПлатежей.ЗаполнитьЗначения(ДоговорКонтрагента,                     "ДоговорКонтрагента");
		ТаблицаПлатежей.ЗаполнитьЗначения(СтруктураКурсаВзаиморасчетов.Курс,      "КурсВзаиморасчетов");
		ТаблицаПлатежей.ЗаполнитьЗначения(СтруктураКурсаВзаиморасчетов.Кратность, "КратностьВзаиморасчетов");
		Если ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоРасчетнымДокументам Тогда
			СделкаВОсновании = Неопределено;
			Если ВидДокументаОснования = Тип("ДокументСсылка.ОтчетКомиссионераОПродажах") Тогда
				СделкаВОсновании = Основание.СделкаПоРеализации;
			ИначеЕсли ОбщегоНазначенияБП.ЕстьРеквизитДокумента("Сделка", Основание.Метаданные()) Тогда
				СделкаВОсновании = Основание.Сделка;
			КонецЕсли; 
			ТаблицаПлатежей.ЗаполнитьЗначения(УправлениеВзаиморасчетами.ОпределитьДокументРасчетовСКонтрагентом(Основание,СделкаВОсновании),"Сделка");
		КонецЕсли;

		ТаблицаПлатежей.ЗагрузитьКолонку(ТаблицаПлатежей.ВыгрузитьКолонку("СуммаПлатежа"), "СуммаВзаиморасчетов");

		Для каждого СтрокаПлатежа Из ТаблицаПлатежей Цикл
			ПроверкаКурсовВалют(СтрокаПлатежа);
		КонецЦикла; 

		Если ВидДокументаОснования = Тип("ДокументСсылка.ОтчетКомиссионераОПродажах") Тогда
			ТаблицаПлатежей.ЗаполнитьЗначения(Основание.СчетУчетаРасчетовСКонтрагентом,       "СчетУчетаРасчетовСКонтрагентом"); 
			ТаблицаПлатежей.ЗаполнитьЗначения(Основание.СчетУчетаРасчетовПоАвансамПолученным, "СчетУчетаРасчетовПоАвансам") ;			
		ИначеЕсли ВидДокументаОснования = Тип("ДокументСсылка.ОтчетКомитентуОПродажах") Тогда
			ТаблицаПлатежей.ЗаполнитьЗначения(Основание.СчетУчетаРасчетовПоВознаграждению,    "СчетУчетаРасчетовСКонтрагентом") ;
			ТаблицаПлатежей.ЗаполнитьЗначения(Основание.СчетУчетаРасчетовПоАвансамПолученным, "СчетУчетаРасчетовПоАвансам") ;
		ИначеЕсли ВидДокументаОснования = Тип("ДокументСсылка.СчетНаОплатуПокупателю")	 Тогда
			ТаблицаПлатежей.ЗаполнитьЗначения(СчетаУчета.СчетРасчетовПокупателя,		      "СчетУчетаРасчетовСКонтрагентом") ;
			ТаблицаПлатежей.ЗаполнитьЗначения(СчетаУчета.СчетАвансовПокупателя, 			  "СчетУчетаРасчетовПоАвансам") ;
		// ИНАГРО++	
		ИначеЕсли ИНАГРО_ОбщийВызовСервераПовтИсп.ЕстьБСПУ()
			И Основание.Метаданные().Имя = "ИНАГРО_СчетНаОплатуПокупателюБиологическихАктивов" Тогда 
			ТаблицаПлатежей.ЗаполнитьЗначения(СчетаУчета.СчетРасчетовПокупателя,              "СчетУчетаРасчетовСКонтрагентом") ;
			ТаблицаПлатежей.ЗаполнитьЗначения(СчетаУчета.СчетАвансовПокупателя,               "СчетУчетаРасчетовПоАвансам") ;
		// ИНАГРО--
		Иначе	
			ТаблицаПлатежей.ЗаполнитьЗначения(Основание.СчетУчетаРасчетовСКонтрагентом,       "СчетУчетаРасчетовСКонтрагентом") ;
			ТаблицаПлатежей.ЗаполнитьЗначения(Основание.СчетУчетаРасчетовПоАвансам,           "СчетУчетаРасчетовПоАвансам") ;
		КонецЕсли;

		ТаблицаПлатежей.ЗаполнитьЗначения(СчетаУчета.СчетУчетаНДСПродаж, 				"СчетУчетаНДС");
		ТаблицаПлатежей.ЗаполнитьЗначения(СчетаУчета.СчетУчетаНДСПродажПодтвержденный,  "СчетУчетаНДСПодтвержденный");
		ТаблицаПлатежей.ЗаполнитьЗначения(СчетаУчета.НалоговоеНазначениеПродаж, 		"НалоговоеНазначение");
		
		РасшифровкаПлатежа.Загрузить(ТаблицаПлатежей);
		СуммаДокумента = РасшифровкаПлатежа.Итог("СуммаПлатежа");

	ИначеЕсли ВидДокументаОснования = Тип("ДокументСсылка.ОтчетОРозничныхПродажах") Тогда

		
		Если Основание.ПоОбособленномуПодразделению Тогда
			ПоОбособленномуПодразделению = Истина;
			ОбособленноеПодразделениеОрганизации = Основание.ОбособленноеПодразделениеОрганизации;
		КонецЕсли;
	
		ВидОперации  = Перечисления.ВидыОперацийПКО.ПриходДенежныхСредствРозничнаяВыручка;
		Контрагент   = Основание.Склад;
		СчетКасса    = Основание.СчетКасса;
		СтатьяДвиженияДенежныхСредств = Основание.СтатьяДвиженияДенежныхСредств;
		
		Если Основание.ВидОперации = Перечисления.ВидыОперацийОтчетОРозничныхПродажах.ОтчетНТТОПродажах Тогда
			ВыручкаСНТТ = Истина;
		КонецЕсли;
		
		СтруктураКурсаДокумента = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаДокумента, Дата);
		КурсДокумента           = СтруктураКурсаДокумента.Курс;
		КратностьДокумента      = СтруктураКурсаДокумента.Кратность;

		ТаблицаПлатежей = Основание.Товары.Выгрузить();
		ТаблицаПлатежей.Колонки.Добавить("РасчетыВозврат", Новый ОписаниеТипов("ПеречислениеСсылка.РасчетыВозврат"));

		ЕстьНДС = УчетнаяПолитика.ПлательщикНДС(Организация, Дата);
		СуммаСНалогами = (НЕ ЕстьНДС) ИЛИ (Основание.СуммаВключаетНДС и ЕстьНДС);
		
		Для Каждого СтрокаТаблицы Из ТаблицаПлатежей Цикл
			Если НЕ СуммаСНалогами Тогда
				СтрокаТаблицы.Сумма		= СтрокаТаблицы.Сумма + СтрокаТаблицы.СуммаНДС + СтрокаТаблицы.СуммаАкцизногоНалога;
			КонецЕсли;
			Если СтрокаТаблицы.Количество < 0 Тогда
				СтрокаТаблицы.РасчетыВозврат = Перечисления.РасчетыВозврат.Возврат;
				СтрокаТаблицы.Сумма		= - СтрокаТаблицы.Сумма;
				СтрокаТаблицы.СуммаНДС	= - СтрокаТаблицы.СуммаНДС;
				СтрокаТаблицы.СуммаАкцизногоНалога	= - СтрокаТаблицы.СуммаАкцизногоНалога;
			Иначе
				СтрокаТаблицы.РасчетыВозврат = Перечисления.РасчетыВозврат.Расчеты;
			КонецЕсли;
		КонецЦикла;
		
		ТаблицаПлатежей.Свернуть("РасчетыВозврат,СтавкаНДС,НалоговоеНазначение,СхемаРеализации,СтатьяДекларацииПоАкцизномуНалогу,ПодакцизныеТоварыДляКоммерческогоИспользования","Сумма,СуммаНДС,СуммаАкцизногоНалога");
		
		СчетУчетаНДС = Основание.СчетУчетаНДС;
		
		Для каждого Строка Из ТаблицаПлатежей Цикл
			
			СтрокаВыручка = ПриемРозничнойВыручки.Добавить();
			СтрокаВыручка.Сумма  		= Строка.Сумма;
			СтрокаВыручка.СтавкаНДС 	= Строка.СтавкаНДС;
			СтрокаВыручка.СуммаНДС 		= Строка.СуммаНДС;
			СтрокаВыручка.СчетУчетаНДС	= СчетУчетаНДС;
			СтрокаВыручка.СтатьяДекларацииПоАкцизномуНалогу 	= Строка.СтатьяДекларацииПоАкцизномуНалогу;
			СтрокаВыручка.ПодакцизныеТоварыДляКоммерческогоИспользования = Строка.ПодакцизныеТоварыДляКоммерческогоИспользования;
			СтрокаВыручка.СуммаАкцизногоНалога 					= Строка.СуммаАкцизногоНалога;
			
			СтрокаВыручка.СхемаРеализации			 = Строка.СхемаРеализации;
			СтрокаВыручка.НалоговоеНазначение		 = Строка.НалоговоеНазначение;
			
			Если Строка.РасчетыВозврат = Перечисления.РасчетыВозврат.Расчеты Тогда
				СуммаПродаж 			= СуммаПродаж + Строка.Сумма;
			Иначе
				СуммаВозврата  			= СуммаВозврата + Строка.Сумма;
				СтрокаВыручка.Возврат 	= Истина;
			КонецЕсли; 
		КонецЦикла;
		
		Оплата.Загрузить(Основание.Оплата.Выгрузить());
		СуммаБезналичнойОплаты = Оплата.Итог("СуммаОплаты");
		
		СуммаДокумента = СуммаПродаж - СуммаВозврата - СуммаБезналичнойОплаты;


	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.РасходныйКассовыйОрдер") Тогда

		ВалютаДокумента = Основание.ВалютаДокумента;
		СчетКасса       = Основание.СчетКасса;
		
		ЗаполнитьПоРКО();

	ИначеЕсли ВидДокументаОснования = Тип("ДокументСсылка.АвансовыйОтчет") Тогда 	
		
		ВидОперации  = Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствПодотчетником;
		Контрагент = Основание.ФизЛицо;
		
		НоваяСтрока = РасшифровкаПлатежа.Добавить();
		
		СтруктураКурсаДокумента = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаДокумента, Дата);
		НоваяСтрока.КурсВзаиморасчетов           = СтруктураКурсаДокумента.Курс;
		НоваяСтрока.КратностьВзаиморасчетов      = СтруктураКурсаДокумента.Кратность;		
		
		Запрос = Новый Запрос;
		
		Если НЕ (ВалютаДокумента = ВалютаРегламентированногоУчета) Тогда
	 		Запрос.УстановитьПараметр("СчетРасчетов", ПланыСчетов.Хозрасчетный.РасчетыСПодотчетнымиЛицамиВИностраннойВалюте);
		Иначе
			Запрос.УстановитьПараметр("СчетРасчетов", ПланыСчетов.Хозрасчетный.РасчетыСПодотчетнымиЛицамиВНациональнойВалюте);
		КонецЕсли;
	
		Запрос.УстановитьПараметр("Сотрудник",  Основание.ФизЛицо);
		Запрос.УстановитьПараметр("Организация",Основание.Организация);
		Запрос.УстановитьПараметр("ДатаИтогов", Основание.Дата+1);
		
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	ХозрасчетныйОстатки.Счет,
		|	ХозрасчетныйОстатки."+?(ВалютаДокумента = мВалютаРегламентированногоУчета,"","Валютная")+"СуммаОстатокДт КАК СуммаОстатокКт
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(&ДатаИтогов, Счет В ИЕРАРХИИ (&СчетРасчетов), ,
		|	                                        Организация = &Организация И Субконто1 = &Сотрудник) КАК ХозрасчетныйОстатки";
        	
		ПредыдущийАванс = Запрос.Выполнить().Выбрать();
		ПредыдущийАванс.Следующий();
		
		Остаток    = ?(ЗначениеЗаполнено(ПредыдущийАванс.СуммаОстатокКт), ПредыдущийАванс.СуммаОстатокКт, 0);
		
		СуммаДокумента  = Остаток;
		
		НоваяСтрока.СуммаПлатежа = СуммаДокумента;
			
	ИначеЕсли ВидДокументаОснования = Тип("ДокументСсылка.ВозвратТоваровПоставщику") ИЛИ Основание.Метаданные().Имя = "ИНАГРО_ВозвратБиологическихАктивовПоставщику" Тогда // ИНАГРО
		
		ВидОперации 			  = Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствПоставщиком;
		СтрокаПлатеж 			  = РасшифровкаПлатежа.Добавить();
		СтрокаПлатеж.Сделка 	  = Основание.Ссылка;
		СтрокаПлатеж.СуммаПлатежа = Основание.СуммаДокумента;
		СтрокаПлатеж.ДоговорКонтрагента = Основание.ДоговорКонтрагента;
		СуммаДокумента 			  = Основание.СуммаДокумента;
		
		СтрокаПлатеж.СчетУчетаРасчетовСКонтрагентом = СчетаУчета.СчетРасчетов;
		СтрокаПлатеж.СчетУчетаРасчетовПоАвансам     = СчетаУчета.СчетАвансов;
		
		СтрокаПлатеж.СчетУчетаНДС    				= СчетаУчета.СчетУчетаНДСПриобретений;
		СтрокаПлатеж.СчетУчетаНДСПодтвержденный     = СчетаУчета.СчетУчетаНДСПриобретенийПодтвержденный;
		СтрокаПлатеж.НалоговоеНазначение 			= СчетаУчета.НалоговоеНазначениеПриобретений;
		СтрокаПлатеж.СтавкаНДС		  				= СчетаУчета.СтавкаНДСПриобретений;
		
		ВидРасчетовПоДоговору   = БухгалтерскийУчетПереопределяемый.ОпределениеВидаРасчетовПоПараметрамДоговора(ДоговорКонтрагента);	
		Если ВидРасчетовПоДоговору = Перечисления.ВидыРасчетовПоДоговорам.РасчетыВИностраннойВалюте тогда
			ВалютаДокумента = ВалютаВзаиморасчетов;
		КонецЕсли;

		СтруктураКурсаДокумента = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаДокумента, Дата);
		СтрокаПлатеж.КурсВзаиморасчетов           = СтруктураКурсаДокумента.Курс;
		СтрокаПлатеж.КратностьВзаиморасчетов      = СтруктураКурсаДокумента.Кратность;
		
		ПересчитатьСуммуНДС(СтрокаПлатеж);
		
		Если НЕ СтрокаПлатеж.НалоговоеНазначение = Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_Пропорционально Тогда
			СтрокаПлатеж.СуммаНДСПропорциональноКредит = 0;
		Иначе	
			СтрокаПлатеж.СуммаНДСПропорциональноКредит = СтрокаПлатеж.СуммаНДС * НалоговыйУчет.ПолучитьКоэффициентПропорциональногоНДС(Организация, Дата);
		КонецЕсли;
		
		СтрокаПлатеж.СуммаВзаиморасчетов = Основание.СуммаДокумента;
		
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(СчетКасса) Тогда
		Если НЕ ЗначениеЗаполнено(ВалютаДокумента) ИЛИ ВалютаДокумента = ВалютаРегламентированногоУчета Тогда
			СчетКасса = ПланыСчетов.Хозрасчетный.КассаВНациональнойВалюте;
		Иначе
			СчетКасса = ПланыСчетов.Хозрасчетный.КассаВИностраннойВалюте;
		КонецЕсли;
	КонецЕсли;

	ЕстьРасчетыСКонтрагентами = УчетДенежныхСредствКлиентСервер.ЕстьРасчетыСКонтрагентами(ВидОперации);
	ЕстьРасчетыПоКредитам     = УчетДенежныхСредствКлиентСервер.ЕстьРасчетыПоКредитам(ВидОперации);

КонецПроцедуры

//////////////////////////////////////////////////////////////////////////////////
//// ОБРАБОТЧИКИ СОБЫТИЙ


Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	ТипДанныхЗаполнения = ТипЗнч(ДанныеЗаполнения);
	Если ДанныеЗаполнения <> Неопределено И ТипДанныхЗаполнения <> Тип("Структура") 
		И Метаданные().ВводитсяНаОсновании.Содержит(ДанныеЗаполнения.Метаданные()) Тогда
		ЗаполнитьПоДокументуОснованию(ДанныеЗаполнения);
		Если ВидОперации = Перечисления.ВидыОперацийПКО.ПриходДенежныхСредствРозничнаяВыручка Тогда
			СчетУчетаАкцизногоНалога   = ДанныеЗаполнения.СчетУчетаАкцизногоНалога;
		КонецЕсли;
	КонецЕсли;

	Если ВидОперации = Перечисления.ВидыОперацийПКО.ПриходДенежныхСредствРозничнаяВыручка Тогда
		Если НЕ ЗначениеЗаполнено(СчетУчетаАкцизногоНалога) Тогда
			СчетУчетаАкцизногоНалога = ПланыСчетов.Хозрасчетный.РасчетыПоАкцизу;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(СчетУчетаРасчетовСКонтрагентом) Тогда
			СчетУчетаРасчетовСКонтрагентом 	   = ПланыСчетов.Хозрасчетный.ДоходОтРозницы;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(СчетВычетаИзДоходовРозничныхПродаж) Тогда
			СчетВычетаИзДоходовРозничныхПродаж = ПланыСчетов.Хозрасчетный.ВычетыИзДоходаОтРозницы;
		КонецЕсли;
	КонецЕсли;
	
	ЗаполнениеДокументов.Заполнить(ЭтотОбъект, ДанныеЗаполнения);
	
	Если ВидОперации = Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствПодотчетником
		ИЛИ ВидОперации = Перечисления.ВидыОперацийПКО.ПолучениеНаличныхДенежныхСредствВБанке
		ИЛИ ВидОперации = Перечисления.ВидыОперацийПКО.ПриходДенежныхСредствПрочее
		ИЛИ ВидОперации = Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствРаботником Тогда
		РасшифровкаПлатежа.Очистить();
	КонецЕсли;
	
	Если (ВидОперации = Перечисления.ВидыОперацийПКО.ОплатаПокупателя
		ИЛИ ВидОперации = Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствПоставщиком
		ИЛИ ВидОперации = Перечисления.ВидыОперацийПКО.РасчетыПоКредитамИЗаймамСКонтрагентами) Тогда
		ОграничениеТипаКонтрагента = Новый ОписаниеТипов("СправочникСсылка.Контрагенты");
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствПодотчетником
		ИЛИ ВидОперации = Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствРаботником Тогда
		ОграничениеТипаКонтрагента = Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица");
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПКО.ПолучениеНаличныхДенежныхСредствВБанке Тогда
		ОграничениеТипаКонтрагента = Новый ОписаниеТипов("СправочникСсылка.БанковскиеСчета");
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПКО.ПриходДенежныхСредствРозничнаяВыручка Тогда
		ОграничениеТипаКонтрагента = Новый ОписаниеТипов("СправочникСсылка.Склады");
	Иначе
		ОграничениеТипаКонтрагента = Новый ОписаниеТипов("Неопределено");
	КонецЕсли;
	
	Если ОграничениеТипаКонтрагента.Типы().Количество() = 0 Тогда
		Контрагент = Неопределено;
	Иначе
		Контрагент = ОграничениеТипаКонтрагента.ПривестиЗначение(Контрагент);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	МассивНепроверяемыхРеквизитов = Новый Массив;
	
	УчетПоПродажнойСтоимости = 
		УчетнаяПолитика.СпособОценкиТоваровВРознице(Организация, Дата) = Перечисления.СпособыОценкиТоваровВРознице.ПоПродажнойСтоимости;
	ЕстьНалогНаПрибыльДо2015 = УчетнаяПолитика.ПлательщикНалогаНаПрибыльДо2015(Организация, НачалоМесяца(Дата));
	ЕстьНДС			   = УчетнаяПолитика.ПлательщикНДС(Организация, НачалоМесяца(Дата));
	
	// Отключаем проверку реквизитов шапки
	
	Если ВидОперации <> Перечисления.ВидыОперацийПКО.ОплатаПокупателя
		И ВидОперации <> Перечисления.ВидыОперацийПКО.РасчетыПоКредитамИЗаймамСКонтрагентами 
		И ВидОперации <> Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствРаботником Тогда
		
		МассивНепроверяемыхРеквизитов.Добавить("Контрагент");
		
	КонецЕсли;
	
	Если ВидОперации <> Перечисления.ВидыОперацийПКО.ПриходДенежныхСредствПрочее
		И ВидОперации <> Перечисления.ВидыОперацийПКО.ПолучениеНаличныхДенежныхСредствВБанке Тогда
		
		МассивНепроверяемыхРеквизитов.Добавить("СчетУчетаРасчетовСКонтрагентом");
		
	КонецЕсли;
	
	// Отключаем проверку реквизитов ТЧ РасшифровкаПлатежа
	
	МассивНепроверяемыхРеквизитов.Добавить("РасшифровкаПлатежа.СуммаВзаиморасчетов"); // Проверяем построчно
	МассивНепроверяемыхРеквизитов.Добавить("РасшифровкаПлатежа.СчетУчетаНДС"); // Проверяем построчно
	
	Если ВидОперации = Перечисления.ВидыОперацийПКО.ОплатаПокупателя
		ИЛИ ВидОперации = Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствПодотчетником
		ИЛИ ВидОперации = Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствРаботником Тогда // ИНАГРО
		
		МассивНепроверяемыхРеквизитов.Добавить("РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом"); // Проверяем построчно
		
	КонецЕсли;
	
	Если ВидОперации <> Перечисления.ВидыОперацийПКО.ПолучениеНаличныхДенежныхСредствВБанке Тогда
		
		МассивНепроверяемыхРеквизитов.Добавить("СчетОрганизации");
		
	КонецЕсли;
	
	Если ВидОперации <> Перечисления.ВидыОперацийПКО.ОплатаПокупателя
		И ВидОперации <> Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствПоставщиком
		И ВидОперации <> Перечисления.ВидыОперацийПКО.РасчетыПоКредитамИЗаймамСКонтрагентами Тогда
		
		МассивНепроверяемыхРеквизитов.Добавить("РасшифровкаПлатежа");
		МассивНепроверяемыхРеквизитов.Добавить("РасшифровкаПлатежа.ДоговорКонтрагента");
		МассивНепроверяемыхРеквизитов.Добавить("РасшифровкаПлатежа.СуммаПлатежа");
		МассивНепроверяемыхРеквизитов.Добавить("РасшифровкаПлатежа.СуммаВзаиморасчетов");
		
	КонецЕсли;
		
	Если (ВидОперации = Перечисления.ВидыОперацийПКО.РасчетыПоКредитамИЗаймамСКонтрагентами) Тогда
		
		МассивНепроверяемыхРеквизитов.Добавить("РасшифровкаПлатежа.СуммаВзаиморасчетов");
		
	КонецЕсли;
	
	Если ВидОперации <> Перечисления.ВидыОперацийПКО.ПриходДенежныхСредствРозничнаяВыручка Тогда
		
		МассивНепроверяемыхРеквизитов.Добавить("СчетВычетаИзДоходовРозничныхПродаж");
		МассивНепроверяемыхРеквизитов.Добавить("СтатьяДоходов");
		МассивНепроверяемыхРеквизитов.Добавить("СуммаПродаж");
		МассивНепроверяемыхРеквизитов.Добавить("ПриемРозничнойВыручки.СтавкаНДС");
		МассивНепроверяемыхРеквизитов.Добавить("ПриемРозничнойВыручки.СчетУчетаНДС");
		МассивНепроверяемыхРеквизитов.Добавить("ПриемРозничнойВыручки.СхемаРеализации");
		МассивНепроверяемыхРеквизитов.Добавить("ПриемРозничнойВыручки.НалоговоеНазначение");
		МассивНепроверяемыхРеквизитов.Добавить("ПриемРозничнойВыручки.НалоговоеНазначениеДоходовИЗатрат");
				
	КонецЕсли;
		
	Если (ВидОперации = Перечисления.ВидыОперацийПКО.ПриходДенежныхСредствРозничнаяВыручка) Тогда
		
		РасшифровкаПлатежа.Очистить();
		
		Если НЕ ВыручкаСНТТ ИЛИ УчетПоПродажнойСтоимости Тогда
			МассивНепроверяемыхРеквизитов.Добавить("СчетУчетаРасчетовСКонтрагентом");
			МассивНепроверяемыхРеквизитов.Добавить("СчетВычетаИзДоходовРозничныхПродаж");
			МассивНепроверяемыхРеквизитов.Добавить("СтатьяДоходов");
		КонецЕсли;
		
		Если НЕ (ВыручкаСНТТ И УчетПоПродажнойСтоимости И ЕстьНалогНаПрибыльДо2015) Тогда
			МассивНепроверяемыхРеквизитов.Добавить("ПриемРозничнойВыручки.НалоговоеНазначениеДоходовИЗатрат");
		КонецЕсли;
		
		Если НЕ (ВыручкаСНТТ И УчетПоПродажнойСтоимости И ЕстьНДС) Тогда
			МассивНепроверяемыхРеквизитов.Добавить("ПриемРозничнойВыручки.НалоговоеНазначение");
		КонецЕсли;
		
		Если НЕ (ВыручкаСНТТ И ЕстьНДС) Тогда
			МассивНепроверяемыхРеквизитов.Добавить("ПриемРозничнойВыручки.СтавкаНДС");
			МассивНепроверяемыхРеквизитов.Добавить("ПриемРозничнойВыручки.СчетУчетаНДС");

		КонецЕсли;
		
		Если НЕ (ВыручкаСНТТ И УчетПоПродажнойСтоимости) Тогда
			МассивНепроверяемыхРеквизитов.Добавить("ПриемРозничнойВыручки.СхемаРеализации");
		КонецЕсли;
		
	КонецЕсли;
	
	Если ВидОперации = Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствПодотчетником
		Тогда
		
		Если НЕ ЗначениеЗаполнено(Контрагент) Тогда
			Если ВидОперации = Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствПодотчетником Тогда
				НезаполненноеПоле = НСтр("ru='Подотчетное лицо';uk='Підзвітна особа'");
			КонецЕсли;
			
			ШаблонТекстаСообщения = ОбщегоНазначенияБПКлиентСервер.ПолучитьТекстСообщения(,, "%1");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонТекстаСообщения, НезаполненноеПоле);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстСообщения, ЭтотОбъект, "Контрагент", "Объект", Отказ);
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не ПоОбособленномуПодразделению Тогда
		
		МассивНепроверяемыхРеквизитов.Добавить("ОбособленноеПодразделениеОрганизации");
		
	КонецЕсли;
	
	Если НЕ (ВыручкаСНТТ И УчетПоПродажнойСтоимости И ПриемРозничнойВыручки.Итог("СуммаАкцизногоНалога")<>0) Тогда
		МассивНепроверяемыхРеквизитов.Добавить("СчетУчетаАкцизногоНалога");
	КонецЕсли;
	
	// Проверка соответствия суммы документа расшифровке платежа
	
	Если (ВидОперации = Перечисления.ВидыОперацийПКО.ОплатаПокупателя
		//ИЛИ ВидОперации = Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствПодотчетником
		ИЛИ ВидОперации = Перечисления.ВидыОперацийПКО.РасчетыПоКредитамИЗаймамСКонтрагентами) Тогда
		
		Если РасшифровкаПлатежа.Итог("СуммаПлатежа") <> СуммаДокумента Тогда
			ТекстСообщения = НСтр("ru='Не совпадают сумма документа и ее расшифровка';uk='Не збігаються сума документа та її розшифровка'");
			ТекстСообщения = ОбщегоНазначенияБПКлиентСервер.ПолучитьТекстСообщения(
				"Поле", "Корректность", НСтр("ru='Сумма документа';uk='Сума документа'"),,, ТекстСообщения); 
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, "СуммаДокумента", "Объект", Отказ);
		КонецЕсли;
		
	КонецЕсли;
	
	// Построчная проверка заполнения отдельных реквизитов ТЧ РасшифровкаПлатежа
	
	ЕстьРасчетыСПоставщикамиПокупателями = (ВидОперации = Перечисления.ВидыОперацийПКО.ОплатаПокупателя
		ИЛИ ВидОперации = Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствПоставщиком);
		
	ШаблонТекстаСообщения = ОбщегоНазначенияБПКлиентСервер.ПолучитьТекстСообщения(
		"Колонка", "Заполнение", "%1", "%2", НСтр("ru='Расшифровка платежа';uk='Розшифровка платежу'"));
	
	Для каждого СтрокаПлатежа Из РасшифровкаПлатежа Цикл
	
		Если ЗначениеЗаполнено(СтрокаПлатежа.ДоговорКонтрагента) 
			И (СтрокаПлатежа.СуммаПлатежа > 0)
			И (СтрокаПлатежа.СуммаВзаиморасчетов = 0) Тогда
		
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонТекстаСообщения, НСтр("ru='Сумма расчетов';uk='Сума розрахунків'"), СтрокаПлатежа.НомерСтроки);
			Поле = "РасшифровкаПлатежа[" + Формат((СтрокаПлатежа.НомерСтроки-1), "ЧН=0; ЧГ=") + "].СуммаВзаиморасчетов";
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
		
		КонецЕсли;
		
	
		Если (ЕстьРасчетыСПоставщикамиПокупателями
			 ИЛИ ВидОперации = Перечисления.ВидыОперацийПКО.РасчетыПоКредитамИЗаймамСКонтрагентами)
			И НЕ ЗначениеЗаполнено(СтрокаПлатежа.СчетУчетаРасчетовСКонтрагентом) Тогда
		
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонТекстаСообщения, НСтр("ru='Счет расчетов';uk='Рахунок розрахунків'"), СтрокаПлатежа.НомерСтроки);
			Поле = "РасшифровкаПлатежа[" + Формат((СтрокаПлатежа.НомерСтроки-1), "ЧН=0; ЧГ=") + "].СчетУчетаРасчетовСКонтрагентом";
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
			
		КонецЕсли;
		
		Если ЕстьРасчетыСПоставщикамиПокупателями И ЕстьНДС Тогда
			
			Если НЕ СтрокаПлатежа.ДоговорКонтрагента.СложныйНалоговыйУчет Тогда
				
				Если НЕ ЗначениеЗаполнено(СтрокаПлатежа.СчетУчетаНДС) Тогда
					
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					ШаблонТекстаСообщения, НСтр("ru='Счет учета НДС (неподтвержденный)';uk='Рахунок ПДВ (непідтверджений)'"), СтрокаПлатежа.НомерСтроки);
					Поле = "РасшифровкаПлатежа[" + Формат((СтрокаПлатежа.НомерСтроки-1), "ЧН=0; ЧГ=") + "].СчетУчетаНДС";
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
					
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(СтрокаПлатежа.СчетУчетаНДСПодтвержденный) Тогда
					
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					ШаблонТекстаСообщения, НСтр("ru='Счет учета НДС н/о (н/к)';uk='Рахунок обліку ПДВ п/з (п/к)'"), СтрокаПлатежа.НомерСтроки);
					Поле = "РасшифровкаПлатежа[" + Формат((СтрокаПлатежа.НомерСтроки-1), "ЧН=0; ЧГ=") + "].СчетУчетаНДСПодтвержденный";
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
					
				КонецЕсли;

				Если НЕ ЗначениеЗаполнено(СтрокаПлатежа.НалоговоеНазначение) 
					 И ВидОперации = Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствПоставщиком Тогда
						
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					ШаблонТекстаСообщения, НСтр("ru='Налоговое назначение';uk='Податкове призначення'"), СтрокаПлатежа.НомерСтроки);
					Поле = "РасшифровкаПлатежа[" + Формат((СтрокаПлатежа.НомерСтроки-1), "ЧН=0; ЧГ=") + "].НалоговоеНазначение";
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);

				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если  ВидОперации = Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствПоставщиком
			И ЕстьНалогНаПрибыльДо2015 Тогда
			
			Если   СтрокаПлатежа.ВозвратАвансаДо01042011НУ И НЕ ЗначениеЗаполнено(СтрокаПлатежа.СтатьяПоВозвратуАвансаДо2011НУ) Тогда
				
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					ШаблонТекстаСообщения, НСтр("ru='Статья по возврату аванса до 01.04.2011';uk='Стаття з повернення авансу до 01.04.2011'"), СтрокаПлатежа.НомерСтроки);
				
				Поле = "РасшифровкаПлатежа[" + Формат((СтрокаПлатежа.НомерСтроки-1), "ЧН=0; ЧГ=") + "].СтатьяПоВозвратуАвансаДо2011НУ";
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
				
			КонецЕсли;
			
			
		КонецЕсли;				
		
	КонецЦикла;
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
		
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, Режим) //в разработке
	
	Перем ТаблицаОплата;
	
	// ПОДГОТОВКА ПРОВЕДЕНИЯ ПО ДАННЫМ ДОКУМЕНТА

	ПроведениеСервер.ПодготовитьНаборыЗаписейКПроведению(ЭтотОбъект);
	Если РучнаяКорректировка Тогда
		Возврат;
	КонецЕсли;

	// Заголовок для сообщений об ошибках проведения.
	Заголовок = НСтр("ru='Проведение документа: ';uk='Проведення документа: '") + СокрЛП(Ссылка) + " (" + ВидОперации + ")";
	
	
	ЕстьРасчетыСКонтрагентами = УчетДенежныхСредствКлиентСервер.ЕстьРасчетыСКонтрагентами(ВидОперации);
	ЕстьРасчетыПоКредитам 	  = УчетДенежныхСредствКлиентСервер.ЕстьРасчетыПоКредитам(ВидОперации);

	СтруктураШапкиДокумента = ОбщегоНазначенияРед12.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	
	СтруктураШапкиДокумента.Вставить("ЕстьНалогНаПрибыльДо2015", УчетнаяПолитика.ПлательщикНалогаНаПрибыльДо2015(СтруктураШапкиДокумента.Организация,СтруктураШапкиДокумента.Дата));
	СтруктураШапкиДокумента.Вставить("ЕстьНДС", УчетнаяПолитика.ПлательщикНДС(СтруктураШапкиДокумента.Организация,СтруктураШапкиДокумента.Дата));
	СтруктураШапкиДокумента.Вставить("ЕстьЕдиныйНалог", УчетнаяПолитика.ПлательщикЕдиногоНалога(СтруктураШапкиДокумента.Организация,СтруктураШапкиДокумента.Дата));
	СтруктураШапкиДокумента.Вставить("ВестиУчетДенежныхСредствПоОбособленнымПодразделениям" , УчетнаяПолитика.УчетПоОбособленнымПодразделениям(СтруктураШапкиДокумента.Организация,СтруктураШапкиДокумента.Дата));
	СтруктураШапкиДокумента.Вставить("УчетВПродажныхЦенах" , УчетнаяПолитика.СпособОценкиТоваровВРознице(СтруктураШапкиДокумента.Организация,СтруктураШапкиДокумента.Дата) = Перечисления.СпособыОценкиТоваровВРознице.ПоПродажнойСтоимости);
	
	//Проверим на возможность проведения в БУ и НУ
	Если ЕстьРасчетыСКонтрагентами или ЕстьРасчетыПоКредитам тогда 
		Для каждого СтрокаОплаты из РасшифровкаПлатежа Цикл
			УправлениеВзаиморасчетами.ПроверкаВозможностиПроведенияВ_БУ_НУ(СтруктураШапкиДокумента,СтрокаОплаты.ДоговорКонтрагента,
			Отказ, Заголовок,НСтр("ru='Строка ';uk='Рядок '")+СтрокаОплаты.НомерСтроки+" - ");
		КонецЦикла;
	КонецЕсли;
	
	ПодготовитьТаблицуОплат(СтруктураШапкиДокумента, ТаблицаОплата, Отказ, Заголовок);
			
	Если Не Отказ Тогда
		ДвиженияПоРегистрам(Режим, Отказ, Заголовок ,СтруктураШапкиДокумента, ТаблицаОплата)
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.ВыручкаСНТТ Тогда
		ДвиженияПоРаспределениюОплат(СтруктураШапкиДокумента, ТаблицаОплата);
	КонецЕсли;
	
	Движения.Хозрасчетный.ВыполнитьДействияПередЗаписьюДвижений();

	ПроведениеСервер.ПодготовитьНаборыЗаписейКЗаписиДвижений(ЭтотОбъект);

КонецПроцедуры // ОбработкаПроведения

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ЕстьНДС			   = УчетнаяПолитика.ПлательщикНДС(Организация, НачалоМесяца(Дата));
	
	Если Документы.ПриходныйКассовыйОрдер.ЕстьРасшифровкаПлатежа(ВидОперации)
		И РасшифровкаПлатежа.Количество() > 0 Тогда
		ДоговорКонтрагента = РасшифровкаПлатежа[0].ДоговорКонтрагента;
	Иначе
		ДоговорКонтрагента = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(НомерОрдера) ИЛИ ЭтоНовый() Тогда
		СформироватьНомерОрдера();
	КонецЕсли; 
	
	Если НЕ ЕстьНДС Тогда
		
		Для каждого Строка Из ПриемРозничнойВыручки Цикл
			Строка.НалоговоеНазначение = Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяХозДеятельность;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКОтменеПроведения(ЭтотОбъект);
	Движения.Записать();

КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	Дата = НачалоДня(ОбщегоНазначенияБП.ПолучитьРабочуюДату());
	Ответственный = Пользователи.ТекущийПользователь();
	
	// для нового документа стоит очистить номер ордера
	НомерОрдера = "";
	
	ДокументОснование = Неопределено;
	
КонецПроцедуры

Процедура СформироватьНомерОрдера()
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Нумератор", 	   Перечисления.Нумераторы.ПриходныйКассовыйОрдер);
	СтруктураПараметров.Вставить("Дата",           Дата);
	СтруктураПараметров.Вставить("Организация",    Организация);
	СтруктураПараметров.Вставить("ОбособленноеПодразделение", ОбособленноеПодразделениеОрганизации);
	СтруктураПараметров.Вставить("Валюта", 		   ВалютаДокумента);
	
	УправлениеДенежнымиСредствами.СформироватьСтроковыйНомерДокумента(СтруктураПараметров, НомерОрдера);
	УправлениеДенежнымиСредствами.ЗаписатьОчереднойНомер(СтруктураПараметров, НомерОрдера);
	
КонецПроцедуры

мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
#КонецЕсли