#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	
	
	Если Параметры.Ключ.Пустая() Тогда
		ПодготовитьФормуНаСервере();
	КонецЕсли;

	УстановитьДоступностьПоляВводаНомерОрдера();
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	ОбщегоНазначенияБПКлиент.ОбработкаОповещенияФормыДокумента(ЭтаФорма, Объект.Ссылка, ИмяСобытия, Параметр, Источник);
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом

	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	ПодготовитьФормуНаСервере();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	ЗаполнитьДобавленныеКолонкиТаблиц();
	
	УстановитьСостояниеДокумента();
	
	УстановитьДоступностьПоляВводаНомерОрдера();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Оповестить("ОбновитьФорму", ВладелецФормы, Объект.Ссылка)	
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		
	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ВидОперацииПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(Объект.ВидОперации) Тогда
		Возврат;
	КонецЕсли;
	
	ВидОперацииПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(Объект.Дата) Тогда
		Возврат;
	КонецЕсли;
	
	Если Год(Объект.Дата) <> Год(ТекущаяДатаДокумента) Тогда
		КоэффициентПропорциональногоНДС = Неопределено;
		РассчитатьПропорциональныйНДС(ЭтаФорма, Истина);
	КонецЕсли;
	
	Если НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДатаДокумента) Тогда
		// Изменение времени не влияет на поведение документа.
		ТекущаяДатаДокумента = Объект.Дата;
		Возврат;
	КонецЕсли;
	
	СброситьУстановленныйНомерОрдера();
	
	// Общие проверки условий по датам.
	ТребуетсяВызовСервера = ОбщегоНазначенияБПКлиент.ТребуетсяВызовСервераПриИзмененииДатыДокумента(Объект.Дата, 
		ТекущаяДатаДокумента, Объект.ВалютаДокумента, ВалютаРегламентированногоУчета);

   	// Если определили, что изменение даты может повлиять на какие-либо параметры, 
	// то передаем обработку на сервер.
	Если ТребуетсяВызовСервера Тогда
		ДатаПриИзмененииСервер();
	КонецЕсли;

	// Запомним новую дату документа.
	ТекущаяДатаДокумента = Объект.Дата;
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		Возврат;
	КонецЕсли;
	
	ОрганизацияПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(Объект.Контрагент) Тогда
		Возврат;
	КонецЕсли;
	
	КонтрагентПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура СчетКассаПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(Объект.СчетКасса) Тогда
		Возврат;
	КонецЕсли;
	
	СчетКассаПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ВалютаДокументаПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(Объект.ВалютаДокумента) Тогда
		Возврат;
	КонецЕсли;
	
	ВалютаДокументаПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ПринятоОтНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ФормаВыбора = ОткрытьФорму("Справочник.ФизическиеЛица.ФормаВыбора", Новый Структура("РежимВыбора", Истина), Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ПринятоОтОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПараметрыОбъекта     = ТекущиеПараметрыОбъекта(ЭтаФорма);
	ПараметрыОбъекта.Вставить("ПринятоОтФизЛицо", ВыбранноеЗначение);
	НовыеПараметры       = НовыеПараметрыПриВыбореПринятоОт(ПараметрыОбъекта);
	ЗаполнитьЗначенияСвойств(Объект, НовыеПараметры, "ПринятоОт");
	Модифицированность   = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура СуммаДокументаПриИзменении()

	Если ЕстьРасшифровкаПлатежа(Объект.ВидОперации)
			И Объект.РасшифровкаПлатежа.Количество() = 1 Тогда
		СтрокаПлатеж = Объект.РасшифровкаПлатежа[0];
		СтрокаПлатеж.СуммаПлатежа = Объект.СуммаДокумента;
		ПересчитатьСуммуНДС(СтрокаПлатеж);
		РассчитатьСуммуВзаиморасчетов(СтрокаПлатеж, ЭтаФорма);
		
		РассчитатьПропорциональныйНДС(ЭтаФорма, Истина);
		
		ОбновитьИтоги(ЭтаФорма);
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПКО.ПриходДенежныхСредствРозничнаяВыручка")
			И Объект.РасшифровкаПлатежа.Количество() = 1 Тогда
		СтрокаПлатеж = Объект.РасшифровкаПлатежа[0];
		СтрокаПлатеж.СуммаПлатежа = Объект.СуммаДокумента;
		ПересчитатьСуммуНДС(СтрокаПлатеж);
		ОбновитьИтоги(ЭтаФорма);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВыручкаСНТТПриИзменении(Элемент)

	УстановитьПараметрыВыбораСчетаРозничнойВыручки(ЭтаФорма);
	
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура СчетУчетаПриИзменении(Элемент)

	УстановитьЗаголовкиИДоступностьСубконто(ЭтаФорма, Объект.СчетУчетаРасчетовСКонтрагентом);

	ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3",
		"СубконтоКт1", "СубконтоКт2", "СубконтоКт3");

	БухгалтерскийУчетКлиентСервер.ПриИзмененииСчета(Объект.СчетУчетаРасчетовСКонтрагентом, Объект, ПоляОбъекта);
	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура СубконтоКт1ПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.СубконтоКт1) Тогда
		
		Если ТипЗнч(Объект.СубконтоКт1) = Тип("СправочникСсылка.Контрагенты") Тогда
			НаименованиеКонтрагента = НаименованиеКонтрагента(Объект.СубконтоКт1);
			Объект.ПринятоОт = ?(ПустаяСтрока(НаименованиеКонтрагента.НаименованиеПолное),
				НаименованиеКонтрагента.Наименование, НаименованиеКонтрагента.НаименованиеПолное);
		ИначеЕсли ТипЗнч(Объект.СубконтоКт1) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
			Объект.ПринятоОт = ПолучитьСведенияФизЛицо(Объект.Организация, Объект.СубконтоКт1, Объект.Дата);
		КонецЕсли;
		
	КонецЕсли;
	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоКт2ПриИзменении(Элемент)

	Если ЗначениеЗаполнено(Объект.СубконтоКт2) Тогда
		
		Если ТипЗнч(Объект.СубконтоКт2) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
			ДоговорНаименованиеДляПечати = ОбщегоНазначенияБПВызовСервера.ЗначениеРеквизитаОбъекта(Объект.СубконтоКт2, "НаименованиеДляПечати");
			Объект.Основание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Договор: %1';uk='Договір: %1'","uk"), ДоговорНаименованиеДляПечати);
		КонецЕсли;
		
	КонецЕсли;
	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура СубконтоКтПриИзменении(Элемент)

	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ПоОбособленномуПодразделениюПриИзменении(Элемент)
	
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура СубконтоКтНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	СписокПараметров = СписокПараметровВыбораСубконто(ЭтаФорма, Объект, "СубконтоКт%Индекс%");
	ОбщегоНазначенияБПКлиент.НачалоВыбораЗначенияСубконто(ЭтаФорма, Элемент, СтандартнаяОбработка, СписокПараметров);

КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(
		Элемент.ТекстРедактирования,
		ЭтотОбъект,
		"Объект.Комментарий"
	);

КонецПроцедуры

&НаКлиенте
Процедура СчетРаботникаПриИзменении(Элемент)
//++ БУ ЗИК
//~	Если Объект.СчетУчетаРасчетовСКонтрагентом <> ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.РасчетыСРабочимиИСлужащимиПоДругимОперациям") Тогда
//~		Объект.ДоговорЗаймаСотруднику = "";
//~		Элементы.ДоговорЗаймаСотруднику.Видимость = Ложь;
//~	Иначе
//~		Элементы.ДоговорЗаймаСотруднику.Видимость = Истина;
//~	КонецЕсли;
//-- БУ ЗИК
	Возврат;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыОборудованиеОплата

&НаКлиенте
Процедура ОплатаПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	РассчитатьСуммы()
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатаВидОплатыПриИзменении(Элемент)

	СтрокаТаблицы = Элементы.Оплата.ТекущиеДанные;

	Если ЗначениеЗаполнено(СтрокаТаблицы.ВидОплаты) Тогда
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, СведенияОВидеОплаты(СтрокаТаблицы.ВидОплаты));
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОплатаКонтрагентПриИзменении(Элемент)

	СтрокаТаблицы = Элементы.Оплата.ТекущиеДанные;
	
	ДанныеОбъекта	= Новый Структура("Организация, ВалютаРегламентированногоУчета");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	ДанныеОбъекта.ВалютаРегламентированногоУчета = ВалютаРегламентированногоУчета;
	
	ДанныеСтроки	= Новый Структура(
		"ВидОплаты, Контрагент, ДоговорКонтрагента");
	ЗаполнитьЗначенияСвойств(ДанныеСтроки, СтрокаТаблицы);
	
	ОплатаКонтрагентПриИзмененииНаСервере(ДанныеСтроки, ДанныеОбъекта);
	ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ДанныеСтроки);

КонецПроцедуры // ОплатаКонтрагентПриИзменении()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыРасшифровкаПлатежа

&НаКлиенте
Процедура РасшифровкаПлатежаПриИзменении(Элемент)
	
	Объект.СуммаДокумента = Объект.РасшифровкаПлатежа.Итог("СуммаПлатежа");
	ОбновитьИтоги(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если НоваяСтрока И ОтменаРедактирования Тогда
		Объект.СуммаДокумента = Объект.РасшифровкаПлатежа.Итог("СуммаПлатежа");
		ОбновитьИтоги(ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаПередУдалением(Элемент, Отказ)

	Отказ = Объект.РасшифровкаПлатежа.Количество() = 1;

КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ИнициализироватьСвойстваПлатежаНаКлиенте();
	Если НоваяСтрока И НЕ Копирование Тогда
		ЗаполнитьЗначенияСвойств(Элементы.РасшифровкаПлатежа.ТекущиеДанные, СвойстваПлатежа);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаДоговорКонтрагентаПриИзменении(Элемент)
	
	СтрокаПлатеж = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	
	Если НЕ ЗначениеЗаполнено(СтрокаПлатеж.ДоговорКонтрагента) Тогда
		Возврат;
	КонецЕсли;
	
	ИнициализироватьСвойстваПлатежаНаКлиенте(Истина); // Только создаем структуру, если она еще не создана.
	
	Если СтрокаПлатеж.ДоговорКонтрагента <> СвойстваПлатежа.ДоговорКонтрагента Тогда
		ПараметрыОбъекта = ТекущиеПараметрыОбъекта(ЭтаФорма);
		ПараметрыОбъекта.ДоговорКонтрагента = СтрокаПлатеж.ДоговорКонтрагента;
		СвойстваПлатежа = СвойстваСтрокРасшифровкиПлатежа(ПараметрыОбъекта, Ложь);
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(СтрокаПлатеж, СвойстваПлатежа);
	
	ПересчитатьСуммуНДС(СтрокаПлатеж);
	РассчитатьСуммуВзаиморасчетов(СтрокаПлатеж, ЭтаФорма);
	
	РассчитатьПропорциональныйНДС(ЭтаФорма);
	
	НовыеПараметрыПечати = Новый Структура;
	ЗаполнитьРеквизитыПечати("ДоговорКонтрагента", Объект, НовыеПараметрыПечати);
	ЗаполнитьЗначенияСвойств(Объект, НовыеПараметрыПечати, "ПринятоОт, Основание"); 
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаСделкаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	СтрокаПлатеж = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПКО.ВозвратДенежныхСредствПоставщиком") Тогда
		СчетУчета = СтрокаПлатеж.СчетУчетаРасчетовПоАвансам;
	Иначе
		СчетУчета = СтрокаПлатеж.СчетУчетаРасчетовСКонтрагентом;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Дата) Тогда
		ПоказатьПредупреждение(, НСтр("ru='Не указана дата.';uk='Не вказана дата.'"));
		Возврат;
	ИначеЕсли НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		ПоказатьПредупреждение(, НСтр("ru='Не указана организация.';uk='Не зазначена організація.'"));
		Возврат;
	ИначеЕсли НЕ ЗначениеЗаполнено(Объект.Контрагент) Тогда
		ПоказатьПредупреждение(, НСтр("ru='Не указан контрагент.';uk='Не зазначений контрагент.'"));
		Возврат;
	ИначеЕсли НЕ ЗначениеЗаполнено(СтрокаПлатеж.ДоговорКонтрагента) Тогда
		ПоказатьПредупреждение(, НСтр("ru='Не указан договор.';uk='Не вказаний договір.'"));
		Возврат;
	ИначеЕсли НЕ ЗначениеЗаполнено(СчетУчета) Тогда
		Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПКО.ВозвратДенежныхСредствПоставщиком") Тогда
			ПоказатьПредупреждение(, НСтр("ru='Не указан счет авансов.';uk='Не вказаний рахунок авансів.'"));
		Иначе
			ПоказатьПредупреждение(, НСтр("ru='Не указан счет расчетов.';uk='Не вказаний рахунок розрахунків.'"));
		КонецЕсли;
		
		Возврат;
	КонецЕсли;
	
	ПараметрыОбъекта = Новый Структура;
	ПараметрыОбъекта.Вставить("Дата",                  Объект.Дата);
	ПараметрыОбъекта.Вставить("ДоговорКонтрагента",    СтрокаПлатеж.ДоговорКонтрагента);
	ПараметрыОбъекта.Вставить("Контрагент",            Объект.Контрагент);
	ПараметрыОбъекта.Вставить("СчетУчета",             СчетУчета);
	ПараметрыОбъекта.Вставить("Организация",           Объект.Организация);
	ПараметрыОбъекта.Вставить("ОстаткиОбороты",        "Дт");
	ПараметрыОбъекта.Вставить("ТипыДокументов",        "Метаданные.Документы.ПриходныйКассовыйОрдер.ТабличныеЧасти.РасшифровкаПлатежа.Реквизиты.Сделка.Тип");
	
	ПараметрыФормы = Новый Структура("ПараметрыОбъекта", ПараметрыОбъекта);
	ОткрытьФорму("Документ.ДокументРасчетовСКонтрагентом.ФормаВыбора", ПараметрыФормы, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаСделкаПриИзменении(Элемент)
	
	НовыеПараметрыПечати = Новый Структура;
	ЗаполнитьРеквизитыПечати("Сделка", Объект, НовыеПараметрыПечати);
	ЗаполнитьЗначенияСвойств(Объект, НовыеПараметрыПечати, "ПринятоОт, Основание");
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаСуммаПлатежаПриИзменении(Элемент)
	
	СтрокаПлатеж = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	РассчитатьСуммуВзаиморасчетов(СтрокаПлатеж, ЭтаФорма);
	ПересчитатьСуммуНДС(СтрокаПлатеж);
	
	ОбновитьИтоги(ЭтотОбъект);
	РассчитатьПропорциональныйНДС(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаКурсВзаиморасчетовПриИзменении(Элемент)

	СтрокаПлатеж = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	РассчитатьСуммуВзаиморасчетов(СтрокаПлатеж, ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаКурсВзаиморасчетовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СтрокаПлатеж = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	
	ПараметрыДокумента = Новый Структура;
	ПараметрыДокумента.Вставить("Валюта",     			   СтрокаПлатеж.ДоговорКонтрагентаВалютаВзаиморасчетов);
	ПараметрыДокумента.Вставить("КратностьВзаиморасчетов", СтрокаПлатеж.КратностьВзаиморасчетов);
	ПараметрыДокумента.Вставить("КурсВзаиморасчетов",      СтрокаПлатеж.КурсВзаиморасчетов);
	ПараметрыДокумента.Вставить("Дата",                    Объект.Дата);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("СтрокаПлатеж", СтрокаПлатеж);
	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("РасшифровкаПлатежаКурсВзаиморасчетовНачалоВыбораЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ОткрытьФорму("Общаяформа.ФормаВводаКурсаИКратности", ПараметрыДокумента,,,,,ОповещениеОЗакрытии);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаСуммаВзаиморасчетовПриИзменении(Элемент)

	СтрокаПлатеж = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	ПроверкаКурсовВалют(СтрокаПлатеж, ЭтаФорма);

	Если СтрокаПлатеж.СуммаВзаиморасчетов <> 0 И КратностьДокумента <> 0 Тогда
		СуммаРуб = СтрокаПлатеж.СуммаПлатежа * КурсДокумента / КратностьДокумента;
		СтрокаПлатеж.КурсВзаиморасчетов = СуммаРуб / СтрокаПлатеж.СуммаВзаиморасчетов * СтрокаПлатеж.КратностьВзаиморасчетов;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаСтавкаНДСПриИзменении(Элемент)
	
	СтрокаПлатеж = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	ПересчитатьСуммуНДС(СтрокаПлатеж);

	РассчитатьПропорциональныйНДС(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаЗаТаруПриИзменении(Элемент)
	
	СтрокаПлатеж = Элементы.РасшифровкаПлатежа.ТекущиеДанные;

	ПараметрыОбъекта = ТекущиеПараметрыОбъекта(ЭтаФорма);
	СчетаУчета = СчетаУчетаРасчетовСКонтрагентом(ПараметрыОбъекта);
	
	СтрокаПлатеж.НалоговоеНазначение = СчетаУчета.НалоговоеНазначение;
	Если СтрокаПлатеж.ЗаТару Тогда
		СтрокаПлатеж.НалоговоеНазначение = СчетаУчета.НалоговоеНазначениеТара;
	КонецЕсли;
	
	Если ПараметрыОбъекта.ВидОперации =  ПредопределенноеЗначение("Перечисление.ВидыОперацийПКО.ВозвратДенежныхСредствПоставщиком") тогда
		СтрокаПлатеж.Амортизируется = Ложь;	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаВозвратАвансаДо01042011НУПриИзменении(Элемент)
	
	СтрокаПлатеж = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	
	Если СтрокаПлатеж.ВозвратАвансаДо01042011НУ Тогда
		СтрокаПлатеж.СтатьяПоВозвратуАвансаДо2011НУ = ПредопределенноеЗначение("Справочник.СтатьиЗатрат.НПНК_ИВ_ИзменениеСуммыКомпенсации");
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаНалоговоеНазначениеПриИзменении(Элемент)
	
	РассчитатьПропорциональныйНДС(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаСуммаНДСПриИзменении(Элемент)
	
	РассчитатьПропорциональныйНДС(ЭтаФорма);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыРасшифровкаВыручки

&НаКлиенте
Процедура РасшифровкаВыручкиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока И УчетВПродажныхЦенах Тогда
		ЗаполнитьЗначенияСвойств(Элементы.РасшифровкаВыручки.ТекущиеДанные, СчетаУчетаНоменклатуры()); 
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаВыручкиПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	РассчитатьСуммы();	
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаВыручкиПередУдалением(Элемент, Отказ)

	Отказ = Объект.ПриемРозничнойВыручки.Количество() = 1;

КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаВыручкиСуммаПлатежаПриИзменении(Элемент)
	
	СтрокаПлатеж = Элементы.РасшифровкаВыручки.ТекущиеДанные;
	ПересчитатьСуммуНДСиАкцизногоНалогаРозничнаяВыручка(СтрокаПлатеж, Объект.ВыручкаСНТТ);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаВыручкиСтавкаНДСПриИзменении(Элемент)
	
	СтрокаПлатеж = Элементы.РасшифровкаВыручки.ТекущиеДанные;
	ПересчитатьСуммуНДСиАкцизногоНалогаРозничнаяВыручка(СтрокаПлатеж, Объект.ВыручкаСНТТ);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаВыручкиСуммаПриИзменении(Элемент)
	
	СтрокаПлатеж = Элементы.РасшифровкаВыручки.ТекущиеДанные;
	ПересчитатьСуммуНДСиАкцизногоНалогаРозничнаяВыручка(СтрокаПлатеж, Объект.ВыручкаСНТТ);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаВыручкиСтатьяДекларацииПоАкцизномуНалогуПриИзменении(Элемент)
	
	СтрокаПлатеж = Элементы.РасшифровкаВыручки.ТекущиеДанные;
	ПересчитатьСуммуНДСиАкцизногоНалогаРозничнаяВыручка(СтрокаПлатеж, Объект.ВыручкаСНТТ);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаВыручкиПодакцизныеТоварыДляКоммерческогоИспользованияПриИзменении(Элемент)
	
	СтрокаПлатеж = Элементы.РасшифровкаВыручки.ТекущиеДанные;
	ПересчитатьСуммуНДСиАкцизногоНалогаРозничнаяВыручка(СтрокаПлатеж, Объект.ВыручкаСНТТ);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаВыручкиСуммаАкцизногоНалогаПриИзменении(Элемент)
	
	СтрокаПлатеж = Элементы.РасшифровкаВыручки.ТекущиеДанные;
	ЗначениеСтавкиНДС = УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаПлатеж.СтавкаНДС);
	СтрокаПлатеж.СуммаНДС = (СтрокаПлатеж.Сумма - СтрокаПлатеж.СуммаАкцизногоНалога) * ЗначениеСтавкиНДС / (100 + ЗначениеСтавкиНДС);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиентеНаСервереБезКонтекста
Функция СвойстваСтрокРасшифровкиПлатежа(Знач ПараметрыОбъекта, Знач ПолучатьДоговор)
	
	Если НЕ ЗначениеЗаполнено(ПараметрыОбъекта.ВидОперации)
		ИЛИ НЕ ЗначениеЗаполнено(ПараметрыОбъекта.Организация)
		ИЛИ НЕ ЗначениеЗаполнено(ПараметрыОбъекта.Дата)
		ИЛИ НЕ ЗначениеЗаполнено(ПараметрыОбъекта.Контрагент)
		ИЛИ НЕ ЗначениеЗаполнено(ПараметрыОбъекта.ВалютаДокумента)
		ИЛИ (НЕ ЗначениеЗаполнено(ПараметрыОбъекта.ДоговорКонтрагента) И НЕ ПолучатьДоговор) Тогда
		
		СвойстваПлатежа = ПустаяСтруктураСвойстваПлатежа();
		
		Возврат СвойстваПлатежа;
		
	Иначе
		
		ПараметрыПлатежа = Новый Структура("ВидОперации, Организация, Дата, Контрагент, ДоговорКонтрагента");
		ЗаполнитьЗначенияСвойств(ПараметрыПлатежа, ПараметрыОбъекта);
		ПараметрыПлатежа.Вставить("ОплатаВВалюте",
			ПараметрыОбъекта.ВалютаДокумента <> ПараметрыОбъекта.ВалютаРегламентированногоУчета);
		
		Возврат СвойстваСтрокРасшифровкиПлатежаСервер(ПараметрыПлатежа, ПолучатьДоговор);
		
	КонецЕсли;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ПересчитатьСуммуНДС(СтрокаПлатежа)

	ЗначениеСтавкиНДС = УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаПлатежа.СтавкаНДС);
	СтрокаПлатежа.СуммаНДС = СтрокаПлатежа.СуммаПлатежа * ЗначениеСтавкиНДС / (100 + ЗначениеСтавкиНДС);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПересчитатьСуммуНДСиАкцизногоНалогаРозничнаяВыручка(СтрокаПлатежа, ВыручкаСНТТ)

	Если ВыручкаСНТТ Тогда
		СтрокаПлатежа.СуммаАкцизногоНалога = УчетАкцизногоНалога.РассчитатьСуммуАкцизногоНалога(СтрокаПлатежа.Сумма, Истина, 
														СтрокаПлатежа.СтатьяДекларацииПоАкцизномуНалогу, СтрокаПлатежа.ПодакцизныеТоварыДляКоммерческогоИспользования);
	КонецЕсли;
	
	ЗначениеСтавкиНДС = УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаПлатежа.СтавкаНДС);
	СтрокаПлатежа.СуммаНДС = (СтрокаПлатежа.Сумма - СтрокаПлатежа.СуммаАкцизногоНалога) * ЗначениеСтавкиНДС / (100 + ЗначениеСтавкиНДС);
	

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПроверкаКурсовВалют(СтрокаПлатеж, Форма)

	Форма.КурсДокумента      = ?(Форма.КурсДокумента      = 0, 1, Форма.КурсДокумента);
	Форма.КратностьДокумента = ?(Форма.КратностьДокумента = 0, 1, Форма.КратностьДокумента);

	Если СтрокаПлатеж <> Неопределено Тогда
		СтрокаПлатеж.КурсВзаиморасчетов      = ?(СтрокаПлатеж.КурсВзаиморасчетов      = 0, 1, СтрокаПлатеж.КурсВзаиморасчетов);
		СтрокаПлатеж.КратностьВзаиморасчетов = ?(СтрокаПлатеж.КратностьВзаиморасчетов = 0, 1, СтрокаПлатеж.КратностьВзаиморасчетов);
	КонецЕсли;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РассчитатьСуммуВзаиморасчетов(СтрокаПлатеж, Форма)
	
	ПроверкаКурсовВалют(СтрокаПлатеж, Форма);
	СтрокаПлатеж.СуммаВзаиморасчетов = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(
		СтрокаПлатеж.СуммаПлатежа,
		Форма.Объект.ВалютаДокумента, СтрокаПлатеж.ДоговорКонтрагентаВалютаВзаиморасчетов,
		Форма.КурсДокумента, СтрокаПлатеж.КурсВзаиморасчетов,
		Форма.КратностьДокумента, СтрокаПлатеж.КратностьВзаиморасчетов);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПустаяСтруктураСвойстваПлатежа()
	
	СвойстваПлатежа = Новый Структура("ДоговорКонтрагента,
		|Сделка,
		|ДоговорКонтрагентаВалютаВзаиморасчетов, ВедениеВзаиморасчетов,
		|ВалютаДокумента, СтавкаНДС, СложныйНалоговыйУчет,
		|КурсВзаиморасчетов, КратностьВзаиморасчетов,
		|СчетУчетаРасчетовСКонтрагентом,СчетУчетаРасчетовПоАвансам,СчетУчетаНДС,СчетУчетаНДСПодтвержденный,
		|НалоговоеНазначение,НалоговоеНазначениеТара,СтавкаНДС,Амортизируется,ЗаТару");
	Возврат СвойстваПлатежа;
	
КонецФункции

&НаСервереБезКонтекста
Функция СвойстваСтрокРасшифровкиПлатежаСервер(Знач ПараметрыПлатежа, Знач ПолучатьДоговор)
	
	СвойстваПлатежа = ПустаяСтруктураСвойстваПлатежа();
	
	Если ПолучатьДоговор Тогда
		ВидыДоговоров = ВидыДоговораСКонтрагентом(ПараметрыПлатежа.ВидОперации);
		НовыйДоговор  = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
		Если ПараметрыПлатежа.ДоговорКонтрагента <> Неопределено Тогда
			РеквизитыДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
				ПараметрыПлатежа.ДоговорКонтрагента, "Организация, ВидДоговора, ВалютаВзаиморасчетов");
			Если РеквизитыДоговора.Организация = ПараметрыПлатежа.Организация Тогда
				Для инд = 0 По ВидыДоговоров.ВГраница() Цикл
					Если ВидыДоговоров[инд] = РеквизитыДоговора.ВидДоговора Тогда
						Если РеквизитыДоговора.ВалютаВзаиморасчетов = ПараметрыПлатежа.ВалютаДокумента Тогда
							НовыйДоговор = ПараметрыПлатежа.ДоговорКонтрагента;
						КонецЕсли;
						
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		Отбор = Новый Структура;
		ОтборОплатаВВалюте = Новый Структура("ЗначениеОтбора", ПараметрыПлатежа.ОплатаВВалюте);
		Отбор.Вставить("ОплатаВВалюте", ОтборОплатаВВалюте);
		Если ПараметрыПлатежа.ОплатаВВалюте Тогда
			ОтборВалютаВзаиморасчетов = Новый Структура("ЗначениеОтбора", ПараметрыПлатежа.ВалютаДокумента);
			Отбор.Вставить("ВалютаВзаиморасчетов", ОтборВалютаВзаиморасчетов);
		КонецЕсли;
		
		БухгалтерскийУчетПереопределяемый.УстановитьДоговорКонтрагента(
			НовыйДоговор, ПараметрыПлатежа.Контрагент, ПараметрыПлатежа.Организация, ВидыДоговоров, Отбор);
		ПараметрыПлатежа.ДоговорКонтрагента = НовыйДоговор;

	КонецЕсли;
	
	СвойстваПлатежа.ДоговорКонтрагента = ПараметрыПлатежа.ДоговорКонтрагента;
	
	Если ЗначениеЗаполнено(ПараметрыПлатежа.ДоговорКонтрагента) Тогда
		
		СчетаУчета = СчетаУчетаРасчетовСКонтрагентом(ПараметрыПлатежа);
		ЗаполнитьЗначенияСвойств(СвойстваПлатежа, СчетаУчета);
		
		СвойстваДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			ПараметрыПлатежа.ДоговорКонтрагента, "ВалютаВзаиморасчетов,ВедениеВзаиморасчетов,СложныйНалоговыйУчет");
		СвойстваПлатежа.ДоговорКонтрагентаВалютаВзаиморасчетов     = СвойстваДоговора.ВалютаВзаиморасчетов;
		СвойстваПлатежа.ВедениеВзаиморасчетов 					   = СвойстваДоговора.ВедениеВзаиморасчетов;
		СвойстваПлатежа.СложныйНалоговыйУчет                       = СвойстваДоговора.СложныйНалоговыйУчет;
		
		СтруктураКурса = РаботаСКурсамиВалют.ПолучитьКурсВалюты(СвойстваДоговора.ВалютаВзаиморасчетов, ПараметрыПлатежа.Дата);
		СвойстваПлатежа.КурсВзаиморасчетов      = СтруктураКурса.Курс;
		СвойстваПлатежа.КратностьВзаиморасчетов = СтруктураКурса.Кратность;
		
	КонецЕсли;
	
	Возврат СвойстваПлатежа;
	
КонецФункции

&НаКлиенте
Процедура ИнициализироватьСвойстваПлатежаНаКлиенте(ТолькоСоздатьКлючи = Ложь)
	
	Если СвойстваПлатежа = Неопределено Тогда
		
		Если ТолькоСоздатьКлючи Тогда
			СвойстваПлатежа = ПустаяСтруктураСвойстваПлатежа();
		Иначе
			ИнициализироватьСвойстваПлатежаНаСервере(ТолькоСоздатьКлючи);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьСвойстваПлатежаНаСервере(ТолькоСоздатьКлючи = Ложь)
	
	Если СвойстваПлатежа = Неопределено Тогда
		
		Если ТолькоСоздатьКлючи Тогда
			СвойстваПлатежа = ПустаяСтруктураСвойстваПлатежа();
		Иначе
			ПараметрыОбъекта = ТекущиеПараметрыОбъекта(ЭтаФорма);
			Если Объект.РасшифровкаПлатежа.Количество() > 0 Тогда
				ПараметрыОбъекта.Вставить("ДоговорКонтрагента", Объект.РасшифровкаПлатежа[0].ДоговорКонтрагента);
			КонецЕсли;
			СвойстваПлатежа = СвойстваСтрокРасшифровкиПлатежа(ПараметрыОбъекта, Ложь);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьСуммы() 
	
	СуммаПродаж 		   = 0;
	СуммаВозврата 		   = 0;
	СуммаБезналичнойОплаты = 0; 
	Для Каждого Строка Из Объект.ПриемРозничнойВыручки Цикл		
		Если Строка.Возврат Тогда
			СуммаВозврата = СуммаВозврата + Строка.Сумма
		Иначе
			СуммаПродаж = СуммаПродаж +Строка.Сумма
		КонецЕсли
	КонецЦикла;
	
	СуммаБезналичнойОплаты = Объект.Оплата.Итог("СуммаОплаты");
	
	Объект.СуммаПродаж    		   = СуммаПродаж;
	Объект.СуммаВозврата  		   = СуммаВозврата;
	Объект.СуммаБезналичнойОплаты  = СуммаБезналичнойОплаты;
	Объект.СуммаДокумента 		   = СуммаПродаж - СуммаВозврата - СуммаБезналичнойОплаты;

КонецПроцедуры

&НаСервере
Функция  СчетаУчетаНоменклатуры()
	
	СтруктураПлатежа = Новый Структура;
	СчетаУчета = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаУчетаНоменклатуры(Объект.Организация,Справочники.Номенклатура.ПустаяСсылка(),Объект.Контрагент);
	СтруктураПлатежа.Вставить("СхемаРеализации", СчетаУчета.СхемаРеализации);
	
	Если  ЕстьНалогНаПрибыльДо2015 Тогда
		СтруктураПлатежа.Вставить("НалоговоеНазначение", СчетаУчета.НалоговоеНазначение);
		СтруктураПлатежа.Вставить("НалоговоеНазначениеДоходовИЗатрат", СчетаУчета.НалоговоеНазначениеДоходовИЗатрат);
	КонецЕсли;
	
	СтруктураПлатежа.Вставить("СчетУчетаНДС", ПланыСчетов.Хозрасчетный.НалоговыеОбязательстваРозница);
	
	Возврат СтруктураПлатежа
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ
//

&НаКлиентеНаСервереБезКонтекста
Функция ЕстьРасшифровкаПлатежа(ВидОперации)

	ЕстьРасшифровка = (ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПКО.ОплатаПокупателя")
		ИЛИ ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПКО.ВозвратДенежныхСредствПоставщиком")
		ИЛИ ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПКО.РасчетыПоКредитамИЗаймамСКонтрагентами"));

	Возврат ЕстьРасшифровка;

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ВидыДоговораСКонтрагентом(ВидОперации)

	ВидыДоговора = Новый Массив;

	Если ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПКО.ОплатаПокупателя") Тогда
		ВидыДоговора.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СПокупателем"));
		ВидыДоговора.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СКомиссионером"));
		ВидыДоговора.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СКомитентом"));
		ВидыДоговора.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.ИНАГРО_КоммунальныеУслуги"));
	ИначеЕсли ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПКО.ВозвратДенежныхСредствПоставщиком") Тогда
		ВидыДоговора.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СПоставщиком"));
		ВидыДоговора.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СКомитентом"));
		ВидыДоговора.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СКомиссионером"));
	ИначеЕсли ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПКО.РасчетыПоКредитамИЗаймамСКонтрагентами") Тогда
		ВидыДоговора.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.Прочее"));
	КонецЕсли;

	Возврат ВидыДоговора;

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ТекущиеПараметрыОбъекта(Форма)
	
	Объект = Форма.Объект;
	
	ПараметрыОбъекта = Новый Структура(
		"Дата, ВидОперации, Организация, Контрагент, ВалютаДокумента, СчетКасса");
	ЗаполнитьЗначенияСвойств(ПараметрыОбъекта, Объект);
	
	ПараметрыОбъекта.Вставить("ДоговорКонтрагента",
		?(Форма.СвойстваПлатежа = Неопределено, Неопределено,    Форма.СвойстваПлатежа.ДоговорКонтрагента));
	ПараметрыОбъекта.Вставить("ВалютаРегламентированногоУчета",  Форма.ВалютаРегламентированногоУчета);
	ПараметрыОбъекта.Вставить("ОплатаВВалюте",                   Форма.ОплатаВВалюте);
	
	Возврат ПараметрыОбъекта;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СписокПараметровВыбораСубконто(Форма, ПараметрыОбъекта, ШаблонИмяПоляОбъекта)
	
	СписокПараметров = Новый Структура;
	Для Индекс = 1 По 3 Цикл
		ИмяПоля = СтрЗаменить(ШаблонИмяПоляОбъекта, "%Индекс%", Индекс);
		Если ТипЗнч(ПараметрыОбъекта[ИмяПоля]) = Тип("СправочникСсылка.Контрагенты") Тогда
			СписокПараметров.Вставить("Контрагент", ПараметрыОбъекта[ИмяПоля]);
		ИначеЕсли ТипЗнч(ПараметрыОбъекта[ИмяПоля]) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
			СписокПараметров.Вставить("ДоговорКонтрагента", ПараметрыОбъекта[ИмяПоля]);
		ИначеЕсли ТипЗнч(ПараметрыОбъекта[ИмяПоля]) = Тип("СправочникСсылка.Номенклатура") Тогда
			СписокПараметров.Вставить("Номенклатура", ПараметрыОбъекта[ИмяПоля]);
		ИначеЕсли ТипЗнч(ПараметрыОбъекта[ИмяПоля]) = Тип("СправочникСсылка.Склады") Тогда
			СписокПараметров.Вставить("Склад", ПараметрыОбъекта[ИмяПоля]);
		КонецЕсли;
	КонецЦикла;
	
	СписокПараметров.Вставить("Организация", Форма.Объект.Организация);
	СписокПараметров.Вставить("СчетУчета"  , Форма.Объект.СчетУчетаРасчетовСКонтрагентом);
	
	Возврат СписокПараметров;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьПараметрыВыбораДоговораСКонтрагентом(Форма)
	
	Объект   = Форма.Объект;
	Элементы = Форма.Элементы;
	
	НовыеПараметры = Новый Массив();
	ВидыДоговора   = ВидыДоговораСКонтрагентом(Объект.ВидОперации);
	НовыеПараметры.Добавить(Новый ПараметрВыбора("Отбор.ВидДоговора", Новый ФиксированныйМассив(ВидыДоговора)));
	НовыеПараметры.Добавить(Новый ПараметрВыбора("Отбор.ОплатаВВалюте", Форма.ОплатаВВалюте));
	Если Форма.ОплатаВВалюте Тогда
		НовыеПараметры.Добавить(Новый ПараметрВыбора("Отбор.ВалютаВзаиморасчетов", Объект.ВалютаДокумента));
	КонецЕсли;
	
	Элементы.РасшифровкаПлатежаДоговорКонтрагента.ПараметрыВыбора = Новый ФиксированныйМассив(НовыеПараметры);
	
КонецПроцедуры

&НаСервере
Процедура ПерезаполнитьРасшифровкуПлатежа(ЭтоИзменениеОрганизации = Ложь)

	СворачиватьТЧПриИзмененииОрганизации =
		Объект.ВидОперации = Перечисления.ВидыОперацийПКО.ОплатаПокупателя
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствПоставщиком 
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийПКО.РасчетыПоКредитамИЗаймамСКонтрагентами;
	
	Если ЭтоИзменениеОрганизации И НЕ СворачиватьТЧПриИзмененииОрганизации Тогда
		Возврат;
	КонецЕсли;
	
	ИнициализироватьСвойстваПлатежаНаСервере();
	Объект.РасшифровкаПлатежа.Очистить();
	Объект.ПриемРозничнойВыручки.Очистить();
	
	Если ЕстьРасшифровкаПлатежа(Объект.ВидОперации) Тогда

		СтрокаПлатеж = Объект.РасшифровкаПлатежа.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаПлатеж, СвойстваПлатежа);
		СтрокаПлатеж.СуммаПлатежа = Объект.СуммаДокумента;
		ПересчитатьСуммуНДС(СтрокаПлатеж);
		РассчитатьСуммуВзаиморасчетов(СтрокаПлатеж, ЭтаФорма);
		РассчитатьПропорциональныйНДС(ЭтаФорма, Истина);
		ОбновитьИтоги(ЭтаФорма);
		Элементы.РасшифровкаПлатежа.ТекущаяСтрока = СтрокаПлатеж.ПолучитьИдентификатор();

	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийПКО.ПриходДенежныхСредствРозничнаяВыручка Тогда

		СтрокаПлатеж = Объект.ПриемРозничнойВыручки.Добавить();
		
		Если УчетВПродажныхЦенах Тогда
			ЗаполнитьЗначенияСвойств(СтрокаПлатеж, СчетаУчетаНоменклатуры());
		КонецЕсли;
		
			
		СтрокаПлатеж.Сумма = Объект.СуммаДокумента;

		Элементы.РасшифровкаВыручки.ТекущаяСтрока = СтрокаПлатеж.ПолучитьИдентификатор();

	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Процедура РассчитатьКурсИСуммуВзаиморасчетов(СтрокаПлатежа, Форма)
	
	СтруктураКурсаВзаиморасчетов = РаботаСКурсамиВалют.ПолучитьКурсВалюты(
		СтрокаПлатежа.ДоговорКонтрагентаВалютаВзаиморасчетов, Форма.Объект.Дата);
	
	СтрокаПлатежа.КурсВзаиморасчетов      = СтруктураКурсаВзаиморасчетов.Курс;
	СтрокаПлатежа.КратностьВзаиморасчетов = СтруктураКурсаВзаиморасчетов.Кратность;
	
	РассчитатьСуммуВзаиморасчетов(СтрокаПлатежа, Форма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Элементы = Форма.Элементы;
	Объект   = Форма.Объект;
	
	//Элементы.СчетУчетаРасчетовСКонтрагентомРозничнаяВыручка.Доступность	= НЕ (Объект.ВыручкаСНТТ И Форма.УчетВПродажныхЦенах);
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПКО.ПриходДенежныхСредствПрочее") Тогда
		УстановитьЗаголовкиИДоступностьСубконто(Форма, Объект.СчетУчетаРасчетовСКонтрагентом);
		Элементы.Контрагент.Доступность = Ложь;
		Элементы.ЗаголовокНН.Видимость 									 = Форма.ЕстьНалогНаПрибыльДо2015;
		Элементы.НалоговоеНазначениеПриПрочемПоступленииПрочее.Видимость = Форма.ЕстьНалогНаПрибыльДо2015;
	Иначе
		Элементы.Контрагент.Доступность = Истина;
	КонецЕсли;
	
	Элементы.ВалютаДокумента.Доступность = Форма.ОплатаВВалюте
		И Объект.ВидОперации <> ПредопределенноеЗначение("Перечисление.ВидыОперацийПКО.ВозвратДенежныхСредствРаботником"); 
		
	
	Элементы.ПоОбособленномуПодразделению.Видимость = Форма.ЕстьУчетПоОбособленнымПодразделениям;
	Элементы.ОбособленноеПодразделение.Видимость    = Форма.ЕстьУчетПоОбособленнымПодразделениям И Объект.ПоОбособленномуПодразделению;
	
	Элементы.ВыручкаСНТТ.Видимость = Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПКО.ПриходДенежныхСредствРозничнаяВыручка");
	
	Элементы.СтатьяДоходов.Видимость 								  = Объект.ВыручкаСНТТ И НЕ Форма.УчетВПродажныхЦенах;
	Элементы.СчетУчетаРасчетовСКонтрагентомРозничнаяВыручка.Видимость = Объект.ВыручкаСНТТ И НЕ Форма.УчетВПродажныхЦенах;
	Элементы.СчетВычетаИзДоходовРозничныхПродаж.Видимость 			  = Объект.ВыручкаСНТТ И НЕ Форма.УчетВПродажныхЦенах;
	
	Элементы.Контрагент.Видимость = НЕ (Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПКО.ПолучениеНаличныхДенежныхСредствВБанке"));
	
	Элементы.СчетУчетаАкцизногоНалога.Видимость = Форма.ЕстьАкцизныйНалог И Объект.ВыручкаСНТТ И Форма.УчетВПродажныхЦенах;
	Элементы.РасшифровкаВыручкиСтатьяДекларацииПоАкцизномуНалогу.Видимость = Форма.ЕстьАкцизныйНалог И Объект.ВыручкаСНТТ И Форма.УчетВПродажныхЦенах;
	Элементы.РасшифровкаВыручкиПодакцизныеТоварыДляКоммерческогоИспользования.Видимость = Форма.ЕстьАкцизныйНалог И Объект.ВыручкаСНТТ И Форма.УчетВПродажныхЦенах;
	Элементы.РасшифровкаВыручкиСуммаАкцизногоНалога.Видимость = Форма.ЕстьАкцизныйНалог;
	
	ОбновитьИтоги(Форма);
	
//++ БУ ЗИК
	Элементы.ДоговорЗаймаСотруднику.Видимость = Ложь;
//~	Элементы.ДоговорЗаймаСотруднику.Видимость = (Объект.СчетУчетаРасчетовСКонтрагентом = ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.РасчетыСРабочимиИСлужащимиПоДругимОперациям"));
//-- БУ ЗИК	
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьИтоги(Форма)
	
	Объект   = Форма.Объект;
	Элементы = Форма.Элементы;
	
	Если ЕстьРасшифровкаПлатежа(Объект.ВидОперации) Тогда
		Форма.ИтогоСуммаПлатежа = Объект.РасшифровкаПлатежа.Итог("СуммаПлатежа");
		Форма.ИтогоВсегоНДС     = Объект.РасшифровкаПлатежа.Итог("СуммаНДС");
		
		Элементы.РасшифровкаПлатежаСуммаПлатежа.ТекстПодвала = Формат(Форма.ИтогоСуммаПлатежа, "ЧЦ=12; ЧДЦ=2");
		Элементы.РасшифровкаПлатежаСуммаНДС.ТекстПодвала     = Формат(Форма.ИтогоВсегоНДС,     "ЧЦ=12; ЧДЦ=2");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьСтраницНаСервере()
	
	// т.к. Расшифровка платежа теперь есть у многих видов операций,
	// сначала отработаем формы-исключения
	МассивСтраниц = Новый Массив;
	МассивСтраниц.Добавить(Элементы.ГруппаРасчетыСПодотчетнымиЛицами);
	МассивСтраниц.Добавить(Элементы.ГруппаПолучениеНаличностиВБанке);
	МассивСтраниц.Добавить(Элементы.ГруппаРозничнаяВыручка);
	МассивСтраниц.Добавить(Элементы.ГруппаПрочее);
	МассивСтраниц.Добавить(Элементы.ГруппаРасчетыСКонтрагентами);
	МассивСтраниц.Добавить(Элементы.ГруппаВозвратЗаймаРаботником);
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствПодотчетником Тогда
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаРасчетыСПодотчетнымиЛицами;
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийПКО.ПолучениеНаличныхДенежныхСредствВБанке Тогда
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаПолучениеНаличностиВБанке;
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийПКО.ПриходДенежныхСредствРозничнаяВыручка Тогда
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаРозничнаяВыручка;
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствРаботником Тогда
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаВозвратЗаймаРаботником;
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийПКО.ПриходДенежныхСредствПрочее Тогда
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаПрочее;
		
	// а затем тех, кто использует основную форму Расшифровки платежа
	ИначеЕсли ЕстьРасшифровкаПлатежа(Объект.ВидОперации) Тогда
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаРасчетыСКонтрагентами;
	КонецЕсли;
	
	Для каждого ТекСтраница Из МассивСтраниц Цикл
		Если ТекСтраница <> Элементы.ГруппаСтраницы.ТекущаяСтраница Тогда
			Если ТекСтраница.Видимость Тогда
				ТекСтраница.Видимость = Ложь;
			КонецЕсли;
		Иначе
			Если НЕ ТекСтраница.Видимость Тогда
				ТекСтраница.Видимость = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьФункциональныеОпцииФормы()

	ОбщегоНазначенияБПКлиентСервер.УстановитьПараметрыФункциональныхОпцийФормыДокумента(ЭтаФорма);
	ЕстьНалогНаПрибыльДо2015 = УчетнаяПолитика.ПлательщикНалогаНаПрибыльДо2015(Объект.Организация, НачалоМесяца(Объект.Дата));
	ЕстьНДС			   = УчетнаяПолитика.ПлательщикНДС(Объект.Организация, НачалоМесяца(Объект.Дата));
	ЕстьУчетПоОбособленнымПодразделениям = УчетнаяПолитика.УчетПоОбособленнымПодразделениям(Объект.Организация, НачалоМесяца(Объект.Дата));
	
	УчетВПродажныхЦенах = (УчетнаяПолитика.СпособОценкиТоваровВРознице(Объект.Организация, Объект.Дата)
		= Перечисления.СпособыОценкиТоваровВРознице.ПоПродажнойСтоимости);
		
	ЕстьАкцизныйНалог = (Объект.Дата >= '2015 01 01');

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьОграничениеТипаКонтрагента(Форма)
	
	Элементы = Форма.Элементы;
	Объект   = Форма.Объект;
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПКО.ОплатаПокупателя")
		ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПКО.ВозвратДенежныхСредствПоставщиком")
		ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПКО.РасчетыПоКредитамИЗаймамСКонтрагентами") Тогда
		Элементы.Контрагент.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.Контрагенты");
		Элементы.Контрагент.Заголовок = НСтр("ru='Контрагент';uk='Контрагент'");
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПКО.ВозвратДенежныхСредствПодотчетником") Тогда
		Элементы.Контрагент.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица");
		Элементы.Контрагент.Заголовок = НСтр("ru='Подотчетное лицо';uk='Підзвітна особа'");
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПКО.ПолучениеНаличныхДенежныхСредствВБанке") Тогда
		Элементы.Контрагент.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.БанковскиеСчета");
		Элементы.Контрагент.Заголовок = НСтр("ru='Банковский счет';uk='Банківський рахунок'");
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПКО.ПриходДенежныхСредствРозничнаяВыручка") Тогда
		Элементы.Контрагент.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.Склады");
		Элементы.Контрагент.Заголовок = НСтр("ru='Склад';uk='Склад'");
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПКО.ВозвратДенежныхСредствРаботником") Тогда
		Элементы.Контрагент.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.Сотрудники"); // ИНАГРО
		Элементы.Контрагент.Заголовок = НСтр("ru='Работник';uk='Працівник'");
	Иначе
		Элементы.Контрагент.ОграничениеТипа = Новый ОписаниеТипов("Неопределено");
		Элементы.Контрагент.Заголовок = НСтр("ru='Контрагент';uk='Контрагент'");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ИзменитьПараметрыВыбораСчетаКассы(Форма)
	
	Объект   = Форма.Объект;
	Элементы = Форма.Элементы;
	
	НовыйМассивПараметров = Новый Массив();
	Для каждого СтарыйПараметр Из Элементы.СчетКасса.ПараметрыВыбора Цикл
		Если СтарыйПараметр.Имя = "Отбор.Ссылка" Тогда
			НовыйМассивПараметров.Добавить(СтарыйПараметр);
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПКО.ПриходДенежныхСредствРозничнаяВыручка")
		ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПКО.ВозвратДенежныхСредствРаботником") Тогда
		НовыйМассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Валютный", Ложь));
	КонецЕсли;
	
	НовыйМассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.ЗапретитьИспользоватьВПроводках", Ложь));
	Элементы.СчетКасса.ПараметрыВыбора = Новый ФиксированныйМассив(НовыйМассивПараметров);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ИзменитьПараметрыВыбораСчетаБанка(Форма)

	Элементы = Форма.Элементы;

	НовыйМассивПараметров = Новый Массив;
	Для каждого СтарыйПараметр Из Элементы.СчетБанк.ПараметрыВыбора Цикл
		Если СтарыйПараметр.Имя = "Отбор.Ссылка" Тогда
			НовыйМассивПараметров.Добавить(СтарыйПараметр);
			Прервать;
		КонецЕсли;
	КонецЦикла;
	НовыйМассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Валютный", Форма.ОплатаВВалюте));
	НовыйМассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.ЗапретитьИспользоватьВПроводках", Ложь));
	Элементы.СчетБанк.ПараметрыВыбора = Новый ФиксированныйМассив(НовыйМассивПараметров);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьПараметрыВыбораСчетаРозничнойВыручки(Форма)

	Объект   = Форма.Объект;
	Элементы = Форма.Элементы;

	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПКО.ПриходДенежныхСредствРозничнаяВыручка") 
		И Форма.УчетВПродажныхЦенах И Объект.ВыручкаСНТТ Тогда
		Элементы.СчетУчетаРасчетовСКонтрагентомРозничнаяВыручка.Доступность = Ложь;
	Иначе
		Элементы.СчетУчетаРасчетовСКонтрагентомРозничнаяВыручка.Доступность = Истина;
		НовыйМассивПараметров = Новый Массив();
		НовыйМассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Ссылка", Объект.СчетУчетаРасчетовСКонтрагентом));
		НовыйМассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.ЗапретитьИспользоватьВПроводках", Ложь));
		Элементы.СчетУчетаРасчетовСКонтрагентомРозничнаяВыручка.ПараметрыВыбора = Новый ФиксированныйМассив(НовыйМассивПараметров);
	КонецЕсли;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьПараметрыВыбораВалютыДокумента(Форма)

	Элементы = Форма.Элементы;

	НовыеПараметры = Новый Массив();
	Если НЕ Форма.ОплатаВВалюте Тогда
		НовыеПараметры.Добавить(Новый ПараметрВыбора("Отбор.Ссылка", Форма.ВалютаРегламентированногоУчета));
	КонецЕсли;

	Элементы.ВалютаДокумента.ПараметрыВыбора = Новый ФиксированныйМассив(НовыеПараметры);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ИзменитьПараметрыВыбораПолейСубконто(Форма)

	ПараметрыДокумента = СписокПараметровВыбораСубконто(Форма, Форма.Объект, "СубконтоКт%Индекс%");
	БухгалтерскийУчетКлиентСервер.ИзменитьПараметрыВыбораПолейСубконто(
		Форма, Форма.Объект, "СубконтоКт%Индекс%", "СубконтоКт%Индекс%", ПараметрыДокумента);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьЗаголовкиИДоступностьСубконто(Форма, Счет)

	ПоляФормы = Новый Структура("Субконто1, Субконто2, Субконто3",
		"СубконтоКт1", "СубконтоКт2", "СубконтоКт3");

	ЗаголовкиПолей = Новый Структура("Субконто1, Субконто2, Субконто3",
		"ЗаголовокСубконто1", "ЗаголовокСубконто2", "ЗаголовокСубконто3");

	БухгалтерскийУчетКлиентСервер.ПриВыбореСчета(Счет, Форма, ПоляФормы, ЗаголовкиПолей);

КонецПроцедуры

&НаСервереБезКонтекста
Функция СчетаУчетаРасчетовСКонтрагентом(ПараметрыОбъекта)
	
	Если ПараметрыОбъекта.ВидОперации = Перечисления.ВидыОперацийПКО.РасчетыПоКредитамИЗаймамСКонтрагентами Тогда
		Возврат Новый Структура;
	КонецЕсли;
	
	СчетаУчета = Новый Структура("СчетУчетаРасчетовСКонтрагентом,СчетУчетаРасчетовПоАвансам,СтавкаНДС,СчетУчетаНДС,СчетУчетаНДСПодтвержденный,НалоговоеНазначение,Амортизируется,НалоговоеНазначениеТара");
	
	СтруктураСчетов = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаРасчетовСКонтрагентом(
		ПараметрыОбъекта.Организация, ПараметрыОбъекта.Контрагент, ПараметрыОбъекта.ДоговорКонтрагента);
	
	Если ПараметрыОбъекта.ВидОперации = Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствПоставщиком Тогда
		СчетаУчета.Вставить("СчетУчетаРасчетовСКонтрагентом", СтруктураСчетов.СчетРасчетов);
		СчетаУчета.Вставить("СчетУчетаРасчетовПоАвансам"    , СтруктураСчетов.СчетАвансов);
		
		СчетаУчета.Вставить("СтавкаНДС"    					, СтруктураСчетов.СтавкаНДСПриобретений);
		СчетаУчета.Вставить("СчетУчетаНДС"    				, СтруктураСчетов.СчетУчетаНДСПриобретений);
		СчетаУчета.Вставить("СчетУчетаНДСПодтвержденный"    , СтруктураСчетов.СчетУчетаНДСПриобретенийПодтвержденный);
		
		СчетаУчета.Вставить("НалоговоеНазначение" 			, СтруктураСчетов.НалоговоеНазначениеПриобретений);
		СчетаУчета.Вставить("НалоговоеНазначениеТара"	 	, СтруктураСчетов.НалоговоеНазначениеПриобретенийПоТаре);
		
		СчетаУчета.Вставить("Амортизируется" 	 			, СчетаУчета.Амортизируется);
	Иначе
		СчетаУчета.Вставить("СчетУчетаРасчетовСКонтрагентом", СтруктураСчетов.СчетРасчетовПокупателя);
		СчетаУчета.Вставить("СчетУчетаРасчетовПоАвансам",     СтруктураСчетов.СчетАвансовПокупателя);
		
		СчетаУчета.Вставить("СтавкаНДС"    					, СтруктураСчетов.СтавкаНДСПродаж);
		СчетаУчета.Вставить("СчетУчетаНДС"    				, СтруктураСчетов.СчетУчетаНДСПродаж);
		СчетаУчета.Вставить("СчетУчетаНДСПодтвержденный"    , СтруктураСчетов.СчетУчетаНДСПродажПодтвержденный);
		
		СчетаУчета.Вставить("НалоговоеНазначение" 			, СтруктураСчетов.НалоговоеНазначениеПродаж);
		СчетаУчета.Вставить("НалоговоеНазначениеТара"	 	, СтруктураСчетов.НалоговоеНазначениеПриобретенийПоТаре);
	КонецЕсли;
	
	Возврат СчетаУчета;
	
КонецФункции

&НаСервереБезКонтекста
Функция НовыеПараметрыПриИзмененииВидаОперации(Знач ПараметрыОбъекта)
	
	НовыеПараметры  = Новый Структура;
	
	Если ЕстьРасшифровкаПлатежа(ПараметрыОбъекта.ВидОперации) Тогда
		
		СвойстваПлатежа = СвойстваСтрокРасшифровкиПлатежаСервер(ПараметрыОбъекта, Истина);
		Для каждого СвойствоПлатежа Из СвойстваПлатежа Цикл
			НовыеПараметры.Вставить(СвойствоПлатежа.Ключ, СвойствоПлатежа.Значение);
		КонецЦикла;
		
	ИначеЕсли ПараметрыОбъекта.ВидОперации = Перечисления.ВидыОперацийПКО.ПриходДенежныхСредствРозничнаяВыручка Тогда
		
		НовыеПараметры.Вставить("СчетКасса",          ПланыСчетов.Хозрасчетный.КассаВНациональнойВалюте);
		НовыеПараметры.Вставить("ВалютаДокумента",    ПараметрыОбъекта.ВалютаРегламентированногоУчета);
		НовыеПараметры.Вставить("КурсДокумента",      1);
		НовыеПараметры.Вставить("КратностьДокумента", 1);
		НовыеПараметры.Вставить("СчетУчетаРасчетовСКонтрагентом", 	  ПланыСчетов.Хозрасчетный.ДоходОтРозницы);
		НовыеПараметры.Вставить("СчетВычетаИзДоходовРозничныхПродаж", ПланыСчетов.Хозрасчетный.ВычетыИзДоходаОтРозницы);
		НовыеПараметры.Вставить("СчетУчетаАкцизногоНалога", ПланыСчетов.Хозрасчетный.РасчетыПоАкцизу);
		
	ИначеЕсли ПараметрыОбъекта.ВидОперации = Перечисления.ВидыОперацийПКО.ПолучениеНаличныхДенежныхСредствВБанке Тогда
		
		НовыйСчетОрганизации = Справочники.БанковскиеСчета.ПустаяСсылка();
		УчетДенежныхСредствБП.УстановитьБанковскийСчет(НовыйСчетОрганизации,
			ПараметрыОбъекта.Организация, ПараметрыОбъекта.ВалютаДокумента, Истина);
		НовыеПараметры.Вставить("Контрагент", НовыйСчетОрганизации);
		СвойстваСчета = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(НовыйСчетОрганизации, "Наименование");
		Если ПараметрыОбъекта.ОплатаВВалюте Тогда
			НовыеПараметры.Вставить("СчетУчетаРасчетовСКонтрагентом", ПланыСчетов.Хозрасчетный.ТекущиеСчетаВИностраннойВалюте);
		Иначе
			НовыеПараметры.Вставить("СчетУчетаРасчетовСКонтрагентом", ПланыСчетов.Хозрасчетный.ТекущиеСчетаВНациональнойВалюте);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат НовыеПараметры;
	
КонецФункции

&НаСервереБезКонтекста
Функция НовыеПараметрыПриИзмененииОрганизации(Знач ПараметрыОбъекта)
	
	НовыеПараметры  = Новый Структура;
	
	Если ПараметрыОбъекта.ВидОперации = Перечисления.ВидыОперацийПКО.ПолучениеНаличныхДенежныхСредствВБанке Тогда
		
		НовыйСчетОрганизации = Справочники.БанковскиеСчета.ПустаяСсылка();
		УчетДенежныхСредствБП.УстановитьБанковскийСчет(НовыйСчетОрганизации,
			ПараметрыОбъекта.Организация, ПараметрыОбъекта.ВалютаДокумента, Истина);
		НовыеПараметры.Вставить("СчетОрганизации", НовыйСчетОрганизации);
		ПринятоОт = "";
		Если ПараметрыОбъекта.Дата < Дата('20180105') Тогда
			СвойстваСчета = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(НовыйСчетОрганизации, "Наименование");
			ПринятоОт = СвойстваСчета.Наименование;
		КонецЕсли;
		НовыеПараметры.Вставить("ПринятоОт", ПринятоОт);
		
	ИначеЕсли ПараметрыОбъекта.ВидОперации = Перечисления.ВидыОперацийПКО.ПриходДенежныхСредствРозничнаяВыручка Тогда
		
		НовыеПараметры.Вставить("СчетУчетаРасчетовСКонтрагентом", 	  ПланыСчетов.Хозрасчетный.ДоходОтРозницы);
		НовыеПараметры.Вставить("СчетВычетаИзДоходовРозничныхПродаж", ПланыСчетов.Хозрасчетный.ВычетыИзДоходаОтРозницы);
		
	КонецЕсли;
	
	Если ЕстьРасшифровкаПлатежа(ПараметрыОбъекта.ВидОперации) Тогда
		
		СвойстваПлатежа = СвойстваСтрокРасшифровкиПлатежаСервер(ПараметрыОбъекта, Истина);
		Для каждого СвойствоПлатежа Из СвойстваПлатежа Цикл
			НовыеПараметры.Вставить(СвойствоПлатежа.Ключ, СвойствоПлатежа.Значение);
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат НовыеПараметры;
	
КонецФункции

&НаСервереБезКонтекста
Функция НовыеПараметрыПриИзмененииКонтрагента(Знач ПараметрыОбъекта)
	
	НовыеПараметры = Новый Структура("ПринятоОт");
	
	Если ЕстьРасшифровкаПлатежа(ПараметрыОбъекта.ВидОперации) Тогда
		
		СвойстваПлатежа = СвойстваСтрокРасшифровкиПлатежаСервер(ПараметрыОбъекта, Истина);
		Для каждого СвойствоПлатежа Из СвойстваПлатежа Цикл
			НовыеПараметры.Вставить(СвойствоПлатежа.Ключ, СвойствоПлатежа.Значение);
		КонецЦикла;
		
	ИначеЕсли ПараметрыОбъекта.ВидОперации = Перечисления.ВидыОперацийПКО.ПриходДенежныхСредствРозничнаяВыручка Тогда
		
		СвойстваСклада = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПараметрыОбъекта.Контрагент, "Наименование, ТипСклада");
		НовыеПараметры.Вставить("ВыручкаСНТТ",
			СвойстваСклада.ТипСклада = Перечисления.ТипыСкладов.НеавтоматизированнаяТорговаяТочка);
		
	КонецЕсли;
	
	Возврат НовыеПараметры;
	
КонецФункции

&НаСервереБезКонтекста
Функция НовыеПараметрыПриИзмененииСчетаКассы(Знач ПараметрыОбъекта)
	
	НовыеПараметры = Новый Структура;
	
	ОплатаВВалюте = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(ПараметрыОбъекта.СчетКасса).Валютный;
	
	Если ОплатаВВалюте <> ПараметрыОбъекта.ОплатаВВалюте Тогда
		ОплатаВВалютеПредыдущий   = ПараметрыОбъекта.ОплатаВВалюте;
		ВалютаДокументаПредыдущий = ПараметрыОбъекта.ВалютаДокумента;
		НоваяВалюта = ПараметрыОбъекта.ВалютаРегламентированногоУчета;
		
		Если ЕстьРасшифровкаПлатежа(ПараметрыОбъекта.ВидОперации) Тогда
			// необходимо временно поменять параметры, чтобы получить договор по изменившейся валюте
			ПараметрыОбъекта.ВалютаДокумента = НоваяВалюта;
			ПараметрыОбъекта.ОплатаВВалюте   = ОплатаВВалюте;
			НовыеПараметры = СвойстваСтрокРасшифровкиПлатежаСервер(ПараметрыОбъекта, Истина);
			
			// восстановим значение параметров
			ПараметрыОбъекта.ОплатаВВалюте   = ОплатаВВалютеПредыдущий;
			ПараметрыОбъекта.ВалютаДокумента = ВалютаДокументаПредыдущий;
		КонецЕсли;
		
		Если ПараметрыОбъекта.ВидОперации = Перечисления.ВидыОперацийПКО.ПолучениеНаличныхДенежныхСредствВБанке
			И ЗначениеЗаполнено(ПараметрыОбъекта.Организация) Тогда
			
			НовыйСчетОрганизации = Справочники.БанковскиеСчета.ПустаяСсылка();
			УчетДенежныхСредствБП.УстановитьБанковскийСчет(
				НовыйСчетОрганизации, ПараметрыОбъекта.Организация,
				ПараметрыОбъекта.ВалютаРегламентированногоУчета, НЕ ОплатаВВалюте);
			НовыеПараметры.Вставить("Контрагент", НовыйСчетОрганизации);
			ПринятоОт = "";
			Если ПараметрыОбъекта.Дата < Дата('20180105') Тогда
				СвойстваСчета = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(НовыйСчетОрганизации, "Наименование");
				ПринятоОт = СвойстваСчета.Наименование;
			КонецЕсли;
			НовыеПараметры.Вставить("ПринятоОт", ПринятоОт);
			
		КонецЕсли;
		
		НовыеПараметры.Вставить("ВалютаДокумента", НоваяВалюта);
		
	КонецЕсли;
	
	НовыеПараметры.Вставить("ОплатаВВалюте", ОплатаВВалюте);
	
	Возврат НовыеПараметры;
	
КонецФункции

&НаСервереБезКонтекста
Функция НовыеПараметрыПриИзмененииВалютыДокумента(Знач ПараметрыОбъекта)

	Если ЕстьРасшифровкаПлатежа(ПараметрыОбъекта.ВидОперации) Тогда
		НовыеПараметры = СвойстваСтрокРасшифровкиПлатежаСервер(ПараметрыОбъекта, Истина);
	Иначе
		НовыеПараметры = Новый Структура;
	КонецЕсли;

	Если ПараметрыОбъекта.ВидОперации = Перечисления.ВидыОперацийПКО.ПолучениеНаличныхДенежныхСредствВБанке Тогда

		НовыйСчетОрганизации = Справочники.БанковскиеСчета.ПустаяСсылка();
		УчетДенежныхСредствБП.УстановитьБанковскийСчет(
			НовыйСчетОрганизации, ПараметрыОбъекта.Организация,
			ПараметрыОбъекта.ВалютаРегламентированногоУчета, НЕ ПараметрыОбъекта.ОплатаВВалюте);
		НовыеПараметры.Вставить("Контрагент", НовыйСчетОрганизации);
		СвойстваСчета = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(НовыйСчетОрганизации, "Наименование");
		НовыеПараметры.Вставить("ПринятоОт", СвойстваСчета.Наименование);

	КонецЕсли;

	СтруктураКурса = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ПараметрыОбъекта.ВалютаДокумента, ПараметрыОбъекта.Дата);
	НовыеПараметры.Вставить("КурсДокумента",      СтруктураКурса.Курс);
	НовыеПараметры.Вставить("КратностьДокумента", СтруктураКурса.Кратность);

	Возврат НовыеПараметры;

КонецФункции

&НаСервереБезКонтекста
Функция НовыеПараметрыПриВыбореПринятоОт(Знач ПараметрыОбъекта)

	ДанныеФизЛица = ОбщегоНазначенияБПВызовСервера.ДанныеФизЛица(
		ПараметрыОбъекта.Организация, ПараметрыОбъекта.ПринятоОтФизЛицо, ПараметрыОбъекта.Дата, Ложь);

	НовыеПараметры = Новый Структура("ПринятоОт", ДанныеФизЛица.Представление);

	Возврат НовыеПараметры;

КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьСведенияФизЛицо(Знач Организация, Знач ФизЛицо, Знач Дата)
	
	ТекстПринятоОт = "";
	
	Если ЗначениеЗаполнено(ФизЛицо) Тогда
		
		ДанныеФизЛица = ОбщегоНазначенияБПВызовСервера.ДанныеФизЛица(
			Организация, ФизЛицо, Дата, Истина);
		
		ТекстПринятоОт = ДанныеФизЛица.Представление
		
	КонецЕсли;
	
	Возврат ТекстПринятоОт;
	
КонецФункции

&НаСервереБезКонтекста
Функция НаименованиеКонтрагента(Знач Контрагент)
	
	Возврат ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Контрагент,
			"Наименование, НаименованиеПолное");
	
КонецФункции

&НаСервере
Процедура УстановитьПараметрыВыбораСчетовУчетаДенежныхСредств()
	
	// Счет кассы
	
	СчетаОтбора = Новый Массив;
	СчетаОтбора.Добавить(ПланыСчетов.Хозрасчетный.Касса);
	
	СчетаИсключений = Новый Массив;
	
	СчетаКассы = БухгалтерскийУчет.ПолучитьМассивСчетовДенежныхСредств(СчетаОтбора, Ложь,, СчетаИсключений);
	
	НовыйМассивПараметров = Новый Массив;
	НовыйМассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Ссылка", Новый ФиксированныйМассив(СчетаКассы)));
	Если Объект.ВидОперации = Перечисления.ВидыОперацийПКО.ПриходДенежныхСредствРозничнаяВыручка
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствРаботником Тогда
		НовыйМассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Валютный", Ложь));
	КонецЕсли;
	
	НовыйМассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.ЗапретитьИспользоватьВПроводках", Ложь));
	Элементы.СчетКасса.ПараметрыВыбора = Новый ФиксированныйМассив(НовыйМассивПараметров);
	
	// Счет банка
	
	СчетаОтбора = Новый Массив;
	СчетаОтбора.Добавить(ПланыСчетов.Хозрасчетный.СчетаВБанках);
	
	СчетаБанка = БухгалтерскийУчет.ПолучитьМассивСчетовДенежныхСредств(СчетаОтбора, Ложь);
	
	НовыйМассивПараметров = Новый Массив;
	НовыйМассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Ссылка",   Новый ФиксированныйМассив(СчетаБанка)));
	НовыйМассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Валютный", ОплатаВВалюте));
	НовыйМассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.ЗапретитьИспользоватьВПроводках", Ложь));
	Элементы.СчетБанк.ПараметрыВыбора = Новый ФиксированныйМассив(НовыйМассивПараметров);
	
	// Счет работника
	
	СчетаОтбора = Новый Массив;
	СчетаОтбора.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоЗаработнойПлате);
	СчетаОтбора.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоДругимВыплатам);
//++ БУ ЗИК
//~	СчетаОтбора.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСРабочимиИСлужащимиПоДругимОперациям);
//-- БУ ЗИК	
	
	СчетаРаботника = БухгалтерскийУчет.ПолучитьМассивСчетовДенежныхСредств(СчетаОтбора, Ложь);
	
	НовыйМассивПараметров = Новый Массив;
	НовыйМассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Ссылка",   Новый ФиксированныйМассив(СчетаРаботника)));
	НовыйМассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Валютный", ОплатаВВалюте));
	НовыйМассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.ЗапретитьИспользоватьВПроводках", Ложь));
	Элементы.СчетРаботника.ПараметрыВыбора = Новый ФиксированныйМассив(НовыйМассивПараметров);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьКурсДокумента()
	
	СтруктураКурса = РаботаСКурсамиВалют.ПолучитьКурсВалюты(Объект.ВалютаДокумента, Объект.Дата);
	КурсДокумента      = СтруктураКурса.Курс;
	КратностьДокумента = СтруктураКурса.Кратность;
	
	// Если валюта договора совпадает с валютой документа, то перезаполним курсы взаиморасчетов
	Для каждого СтрокаРасшифровкиПлатежа Из Объект.РасшифровкаПлатежа Цикл
		
		Если Объект.ВалютаДокумента = СтрокаРасшифровкиПлатежа.ДоговорКонтрагентаВалютаВзаиморасчетов Тогда
			
			СтрокаРасшифровкиПлатежа.КурсВзаиморасчетов      = СтруктураКурса.Курс;
			СтрокаРасшифровкиПлатежа.КратностьВзаиморасчетов = СтруктураКурса.Кратность;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ВалютаДокументаПриИзмененииСервер()
	
	ПараметрыОбъекта = ТекущиеПараметрыОбъекта(ЭтаФорма); // Текущие значения реквизитов объекта
	НовыеПараметры   = НовыеПараметрыПриИзмененииВалютыДокумента(ПараметрыОбъекта); // Возможно, изменятся: курс, кратность
	
	ЗаполнитьЗначенияСвойств(ЭтаФорма, НовыеПараметры, "КурсДокумента, КратностьДокумента");
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПКО.ПолучениеНаличныхДенежныхСредствВБанке") Тогда
		ЗаполнитьЗначенияСвойств(Объект, НовыеПараметры, "Контрагент, ПринятоОт");
	КонецЕсли;
	
	ИнициализироватьСвойстваПлатежаНаСервере(Истина);
	ЗаполнитьЗначенияСвойств(СвойстваПлатежа, НовыеПараметры);
	ПерезаполнитьРасшифровкуПлатежа();
	УстановитьПараметрыВыбораДоговораСКонтрагентом(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ВидОперацииПриИзмененииНаСервере()
	
	УстановитьОграничениеТипаКонтрагента(ЭтаФорма);
	Если Элементы.Контрагент.ОграничениеТипа.Типы().Количество() = 0 Тогда
		Объект.Контрагент = Неопределено;
	Иначе
		Объект.Контрагент = Элементы.Контрагент.ОграничениеТипа.ПривестиЗначение(Объект.Контрагент);
	КонецЕсли;
	
	Объект.СчетУчетаРасчетовСКонтрагентом = Неопределено;
	
	Если ЕстьРасшифровкаПлатежа(Объект.ВидОперации)
			ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийПКО.ПриходДенежныхСредствРозничнаяВыручка
			ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийПКО.ПолучениеНаличныхДенежныхСредствВБанке Тогда
		
		ПараметрыОбъекта = ТекущиеПараметрыОбъекта(ЭтаФорма);
		НовыеПараметры   = НовыеПараметрыПриИзмененииВидаОперации(ПараметрыОбъекта);
		
		Если ЕстьРасшифровкаПлатежа(Объект.ВидОперации) Тогда
			ИнициализироватьСвойстваПлатежаНаСервере(Истина);
			ЗаполнитьЗначенияСвойств(СвойстваПлатежа, НовыеПараметры);
			УстановитьПараметрыВыбораДоговораСКонтрагентом(ЭтаФорма);
		ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийПКО.ПриходДенежныхСредствРозничнаяВыручка Тогда
			ЗаполнитьЗначенияСвойств(Объект, НовыеПараметры,
				"СчетКасса, ВалютаДокумента, СчетУчетаРасчетовСКонтрагентом, СчетВычетаИзДоходовРозничныхПродаж, СчетУчетаАкцизногоНалога");
			ЗаполнитьЗначенияСвойств(ЭтаФорма, НовыеПараметры, "КурсДокумента, КратностьДокумента");
			УстановитьПараметрыВыбораСчетаРозничнойВыручки(ЭтаФорма);
		ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийПКО.ПолучениеНаличныхДенежныхСредствВБанке Тогда
			ЗаполнитьЗначенияСвойств(Объект, НовыеПараметры,
				"Контрагент, СчетУчетаРасчетовСКонтрагентом");
		КонецЕсли;
		
	КонецЕсли;
	
	НовыеПараметрыПечати = Новый Структура;	
	ЗаполнитьРеквизитыПечати("ВидОперации", Объект, НовыеПараметрыПечати);
	ЗаполнитьЗначенияСвойств(Объект, НовыеПараметрыПечати, "ПринятоОт, Основание");
		
	Если Объект.ВидОперации = Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствРаботником И ОплатаВВалюте Тогда
		
		Объект.СчетКасса       = ПланыСчетов.Хозрасчетный.КассаВНациональнойВалюте;
		Объект.ВалютаДокумента = ВалютаРегламентированногоУчета;
		ОплатаВВалюте          = Ложь;
		
	КонецЕсли;
	
	Если ЕстьНДС И (Объект.ВидОперации = Перечисления.ВидыОперацийПКО.ОплатаПокупателя
		            ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствПоставщиком) Тогда 
		Объект.ВыводитьНаПечатьСуммуНДС = Истина; 
	Иначе
		Объект.ВыводитьНаПечатьСуммуНДС = Ложь;
	КонецЕсли;
	
	Объект.Оплата.Очистить(); 
	Объект.ВыручкаСНТТ = Ложь;
	
	ИзменитьПараметрыВыбораСчетаКассы(ЭтаФорма);
	ИзменитьПараметрыВыбораСчетаБанка(ЭтаФорма);
	
	ПерезаполнитьРасшифровкуПлатежа();
	
	УстановитьВидимостьСтраницНаСервере();
	УправлениеФормой(ЭтаФорма);
	УстановитьПараметрыВыбораСтатьиДекларацииПоЕдиномуНалогу();
	
КонецПроцедуры

&НаСервере
Процедура ДатаПриИзмененииСервер()
	
	УстановитьФункциональныеОпцииФормы();
	
	Если ЕстьНДС И (Объект.ВидОперации = Перечисления.ВидыОперацийПКО.ОплатаПокупателя
		            ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствПоставщиком) Тогда 
		Объект.ВыводитьНаПечатьСуммуНДС = Истина; 
	Иначе
		Объект.ВыводитьНаПечатьСуммуНДС = Ложь;
	КонецЕсли;
	
	УстановитьКурсДокумента();
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийПКО.ПриходДенежныхСредствРозничнаяВыручка Тогда
		Объект.СчетУчетаРасчетовСКонтрагентом     = ПланыСчетов.Хозрасчетный.ДоходОтРозницы;
		Объект.СчетВычетаИзДоходовРозничныхПродаж = ПланыСчетов.Хозрасчетный.ВычетыИзДоходаОтРозницы;
		
		УстановитьПараметрыВыбораСчетаРозничнойВыручки(ЭтаФорма);
	КонецЕсли;
	
	УправлениеФормой(ЭтаФорма);
	УстановитьПараметрыВыбораСтатьиДекларацииПоЕдиномуНалогу();
	
КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииСервер()
	
	УстановитьФункциональныеОпцииФормы();
	
	Если ЕстьНДС И (Объект.ВидОперации = Перечисления.ВидыОперацийПКО.ОплатаПокупателя
		            ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствПоставщиком) Тогда 
		Объект.ВыводитьНаПечатьСуммуНДС = Истина; 
	Иначе
		Объект.ВыводитьНаПечатьСуммуНДС = Ложь;
	КонецЕсли;
	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма);
	
	ПараметрыОбъекта = ТекущиеПараметрыОбъекта(ЭтаФорма);
	НовыеПараметры   = НовыеПараметрыПриИзмененииОрганизации(ПараметрыОбъекта);
	
	Если ПараметрыОбъекта.ВидОперации = Перечисления.ВидыОперацийПКО.ПолучениеНаличныхДенежныхСредствВБанке Тогда
		ЗаполнитьЗначенияСвойств(Объект, НовыеПараметры, "СчетОрганизации, ПринятоОт");
	ИначеЕсли ПараметрыОбъекта.ВидОперации = Перечисления.ВидыОперацийПКО.ПриходДенежныхСредствРозничнаяВыручка Тогда
		ЗаполнитьЗначенияСвойств(Объект, НовыеПараметры, "СчетУчетаРасчетовСКонтрагентом, СчетВычетаИзДоходовРозничныхПродаж");
		УстановитьПараметрыВыбораСчетаРозничнойВыручки(ЭтаФорма);
	КонецЕсли;
	
	ИнициализироватьСвойстваПлатежаНаСервере(Истина);
	ЗаполнитьЗначенияСвойств(СвойстваПлатежа, НовыеПараметры);
	ПерезаполнитьРасшифровкуПлатежа(Истина);
	
	РассчитатьПропорциональныйНДС(ЭтаФорма, Истина);
	
	УправлениеФормой(ЭтаФорма);
	УстановитьПараметрыВыбораСтатьиДекларацииПоЕдиномуНалогу();
	
КонецПроцедуры

&НаСервере
Процедура КонтрагентПриИзмененииСервер()
	
	ПараметрыОбъекта = ТекущиеПараметрыОбъекта(ЭтаФорма);
	НовыеПараметры   = НовыеПараметрыПриИзмененииКонтрагента(ПараметрыОбъекта);
	
	Если ЕстьРасшифровкаПлатежа(Объект.ВидОперации) Тогда
		ИнициализироватьСвойстваПлатежаНаСервере(Истина);
		ЗаполнитьЗначенияСвойств(СвойстваПлатежа, НовыеПараметры);
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийПКО.ПриходДенежныхСредствРозничнаяВыручка Тогда
		ЗаполнитьЗначенияСвойств(Объект, НовыеПараметры, "ВыручкаСНТТ");
	КонецЕсли;
	
	ЗаполнитьРеквизитыПечати("Контрагент", Объект, НовыеПараметры);
	ЗаполнитьЗначенияСвойств(Объект, НовыеПараметры, "ПринятоОт, Основание");
	
	Если НЕ Объект.ВидОперации = Перечисления.ВидыОперацийПКО.ПриходДенежныхСредствРозничнаяВыручка Тогда
		ПерезаполнитьРасшифровкуПлатежа();
		
		// После установки нового договора, также необходимо перезаполнить реквизиты печати
		ЗаполнитьРеквизитыПечати("ДоговорКонтрагента", Объект, НовыеПараметры);
		ЗаполнитьЗначенияСвойств(Объект, НовыеПараметры, "ПринятоОт, Основание");
	КонецЕсли;
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура СчетКассаПриИзмененииСервер()
	
	ПараметрыОбъекта = ТекущиеПараметрыОбъекта(ЭтаФорма);
	НовыеПараметры   = НовыеПараметрыПриИзмененииСчетаКассы(ПараметрыОбъекта);
	
	Если НовыеПараметры.ОплатаВВалюте <> ПараметрыОбъекта.ОплатаВВалюте Тогда
		
		ЗаполнитьЗначенияСвойств(ЭтаФорма, НовыеПараметры, "ОплатаВВалюте");
		
		Если Объект.ВидОперации = Перечисления.ВидыОперацийПКО.ПолучениеНаличныхДенежныхСредствВБанке Тогда
			ЗаполнитьЗначенияСвойств(Объект, НовыеПараметры, "Контрагент, ВалютаДокумента, ПринятоОт");
			Объект.СчетУчетаРасчетовСКонтрагентом = ?(НовыеПараметры.ОплатаВВалюте,
				ПланыСчетов.Хозрасчетный.ТекущиеСчетаВИностраннойВалюте,
				ПланыСчетов.Хозрасчетный.ТекущиеСчетаВНациональнойВалюте);
		Иначе
			ЗаполнитьЗначенияСвойств(Объект, НовыеПараметры, "ВалютаДокумента");
		КонецЕсли;
		
		ИзменитьПараметрыВыбораСчетаБанка(ЭтаФорма);
		УстановитьПараметрыВыбораДоговораСКонтрагентом(ЭтаФорма);
		УстановитьПараметрыВыбораВалютыДокумента(ЭтаФорма);
		
		ИнициализироватьСвойстваПлатежаНаСервере(Истина);
		ЗаполнитьЗначенияСвойств(СвойстваПлатежа, НовыеПараметры);
		ПерезаполнитьРасшифровкуПлатежа();
		
		УправлениеФормой(ЭтаФорма);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РассчитатьПропорциональныйНДС(Форма, ПересчитыватьВсеСтроки = Ложь)
	
	Объект = Форма.Объект;
	Если Форма.Элементы.РасшифровкаПлатежа.ТекущаяСтрока <> Неопределено Тогда
		СтрокаПлатеж = Форма.Объект.РасшифровкаПлатежа.НайтиПоИдентификатору(
			Форма.Элементы.РасшифровкаПлатежа.ТекущаяСтрока);
	КонецЕсли;
	ВНД_НДС_Пропорционально = ПредопределенноеЗначение("Справочник.НалоговыеНазначенияАктивовИЗатрат.НДС_Пропорционально");
	
	Если Форма.КоэффициентПропорциональногоНДС = Неопределено Тогда
		
		Форма.КоэффициентПропорциональногоНДС = НалоговыйУчет.ПолучитьКоэффициентПропорциональногоНДС(Объект.Организация, Объект.Дата);
	
	КонецЕсли;
	
	Если   (НЕ Форма.ЕстьНДС = Истина) 
		ИЛИ НЕ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПКО.ВозвратДенежныхСредствПоставщиком") Тогда
		
		Если ПересчитыватьВсеСтроки Тогда
			Для каждого СтрокаРасшифровки Из Объект.РасшифровкаПлатежа Цикл
				СтрокаРасшифровки.СуммаНДСПропорциональноКредит = 0;
			КонецЦикла;
		Иначе
			
			СтрокаПлатеж.СуммаНДСПропорциональноКредит = 0;
		КонецЕсли;
		возврат;
	КонецЕсли;
	
	Если ПересчитыватьВсеСтроки Тогда
		Для каждого СтрокаРасшифровки Из Объект.РасшифровкаПлатежа Цикл
			Если НЕ СтрокаРасшифровки.НалоговоеНазначение = ВНД_НДС_Пропорционально Тогда
			    СтрокаРасшифровки.СуммаНДСПропорциональноКредит = 0;
			Иначе	
				СтрокаРасшифровки.СуммаНДСПропорциональноКредит = СтрокаРасшифровки.СуммаНДС * Форма.КоэффициентПропорциональногоНДС;
			КонецЕсли;
		КонецЦикла;
	Иначе	
		Если НЕ СтрокаПлатеж.НалоговоеНазначение = ВНД_НДС_Пропорционально Тогда
			СтрокаПлатеж.СуммаНДСПропорциональноКредит = 0;
		Иначе	
			СтрокаПлатеж.СуммаНДСПропорциональноКредит = СтрокаПлатеж.СуммаНДС * Форма.КоэффициентПропорциональногоНДС;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПодготовитьФормуНаСервере()
	
	УстановитьФункциональныеОпцииФормы();
	
	УстановитьСостояниеДокумента();
	
	ПоказыватьВДокументахСчетаУчета	= Истина;
	
	ТекущаяДатаДокумента			= Объект.Дата;
	
	ВалютаРегламентированногоУчета  = Константы.ВалютаРегламентированногоУчета.Получить();
	
	ЗаголовокСтатьяДДС 						  = НСтр("ru='Статья движения ден. средств:';uk='Стаття руху гр. коштів:'");
	ЗаголовокНН  						  	  = НСтр("ru='Налоговое назначение:';uk='Податкове призначення:'");
	ЗаголовокСтатьяДекларацииПоЕдиномуНалогу  = НСтр("ru='Ст. декл. по единому налогу:';uk='Ст. декл. по єдиному податку:'");
	
	ОплатаВВалюте = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Объект.СчетКасса).Валютный;
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		Если ЕстьНДС И (Объект.ВидОперации = Перечисления.ВидыОперацийПКО.ОплатаПокупателя
			            ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствПоставщиком) Тогда 
			Объект.ВыводитьНаПечатьСуммуНДС = Истина; 
		Иначе
			Объект.ВыводитьНаПечатьСуммуНДС = Ложь;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Объект.Контрагент) И Параметры.ЗначениеКопирования.Пустая() Тогда
			НовыеПараметрыПечати = Новый Структура;	
			ЗаполнитьРеквизитыПечати(, Объект, НовыеПараметрыПечати);
			ЗаполнитьЗначенияСвойств(Объект, НовыеПараметрыПечати, "ПринятоОт, Основание");
		КонецЕсли;
		
	КонецЕсли;
	
	УстановитьКурсДокумента();
	
	СвойстваПлатежа = Неопределено; // При открытии формы структуру не инициализируем, будет создана при первом обращении.
	
	ЗаполнитьДобавленныеКолонкиТаблиц();
	
	// Заполнение свойств элементов формы
	
	УстановитьПараметрыВыбораСчетовУчетаДенежныхСредств();
	УстановитьПараметрыВыбораДоговораСКонтрагентом(ЭтаФорма);
	УстановитьПараметрыВыбораСчетаРозничнойВыручки(ЭтаФорма);
	УстановитьПараметрыВыбораВалютыДокумента(ЭтаФорма);
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма);
	УстановитьОграничениеТипаКонтрагента(ЭтаФорма);
	
	// Управление внешним видом формы
	
	УстановитьВидимостьСтраницНаСервере();
	
	УправлениеФормой(ЭтаФорма);
	УстановитьПараметрыВыбораСтатьиДекларацииПоЕдиномуНалогу();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСостояниеДокумента()
	
	СостояниеДокумента = ОбщегоНазначенияБП.СостояниеДокумента(Объект);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДобавленныеКолонкиТаблиц()
	
	Если Объект.РасшифровкаПлатежа.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	МассивДоговоров    = Объект.РасшифровкаПлатежа.Выгрузить(, "ДоговорКонтрагента").ВыгрузитьКолонку("ДоговорКонтрагента");
	СвойстваДоговоров  = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(
		МассивДоговоров, "ВалютаВзаиморасчетов, ВедениеВзаиморасчетов,СложныйНалоговыйУчет");
	
	Для каждого СтрокаПлатеж Из Объект.РасшифровкаПлатежа Цикл
		Если ЗначениеЗаполнено(СтрокаПлатеж.ДоговорКонтрагента) Тогда
			СтрокаПлатеж.ДоговорКонтрагентаВалютаВзаиморасчетов     = СвойстваДоговоров[
				СтрокаПлатеж.ДоговорКонтрагента].ВалютаВзаиморасчетов;
			СтрокаПлатеж.ВедениеВзаиморасчетов     					= СвойстваДоговоров[
				СтрокаПлатеж.ДоговорКонтрагента].ВедениеВзаиморасчетов;
			СтрокаПлатеж.СложныйНалоговыйУчет     					= СвойстваДоговоров[
				СтрокаПлатеж.ДоговорКонтрагента].СложныйНалоговыйУчет;
		Иначе
			СтрокаПлатеж.ДоговорКонтрагентаВалютаВзаиморасчетов     = Справочники.Валюты.ПустаяСсылка();
			СтрокаПлатеж.ВедениеВзаиморасчетов                      = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПустаяСсылка();
			СтрокаПлатеж.СложныйНалоговыйУчет                       = Ложь;
		КонецЕсли;
	КонецЦикла;

	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СведенияОВидеОплаты(ВидОплаты)

	Возврат ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВидОплаты,
		"Контрагент,ДоговорКонтрагента,СчетДеньгиВПути");	

КонецФункции

&НаСервереБезКонтекста
Процедура ОплатаКонтрагентПриИзмененииНаСервере(ДанныеСтрокаТаблицы, Знач ПараметрыОбъекта)

	Если ЗначениеЗаполнено(ДанныеСтрокаТаблицы.ВидОплаты) Тогда
		ДанныеВидаОплаты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДанныеСтрокаТаблицы.ВидОплаты,
		   "Контрагент,ДоговорКонтрагента");
	Иначе
		ДанныеВидаОплаты = Новый Структура("Контрагент, ДоговорКонтрагента", Справочники.Контрагенты.ПустаяСсылка(), Справочники.ДоговорыКонтрагентов.ПустаяСсылка());
	КонецЕсли;
		
	Если ДанныеСтрокаТаблицы.Контрагент = ДанныеВидаОплаты.Контрагент Тогда
		ДанныеСтрокаТаблицы.ДоговорКонтрагента = ДанныеВидаОплаты.ДоговорКонтрагента;
	Иначе
		БухгалтерскийУчетПереопределяемый.УстановитьДоговорКонтрагента(ДанныеСтрокаТаблицы.ДоговорКонтрагента,
			ДанныеСтрокаТаблицы.Контрагент, ПараметрыОбъекта.Организация, Перечисления.ВидыДоговоровКонтрагентов.Прочее);
	КонецЕсли;  	
	
КонецПроцедуры // ОплатаКонтрагентПриИзмененииНаСервере()

&НаСервере
Процедура УстановитьДоступностьПоляВводаНомерОрдера()

	Элементы.НомерОрдера.Видимость = Истина;
	Элементы.НомерОрдера.ТолькоПросмотр = НЕ ЗначениеЗаполнено(Объект.НомерОрдера);
	Если Элементы.НомерОрдера.ТолькоПросмотр Тогда
		Элементы.НомерОрдера.Подсказка =  НСтр("ru='Номер ордера будет присвоен при записи объекта.';uk=""Номер ордеру буде привласнений при записі об'єкта.""");
	Иначе
		Элементы.НомерОрдера.Подсказка =  НСтр("ru='Номер ордера';uk='Номер ордеру'");
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура СброситьУстановленныйНомерОрдера()
	
	Если Объект.НомерОрдера <> "" Тогда
		Объект.НомерОрдера = "";
	КонецЕсли;
	УстановитьДоступностьПоляВводаНомерОрдера();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРеквизитыПечати(ЧтоИзменилось = Неопределено, Знач Объект, НовыеПараметры) Экспорт

	// если не передали название реквизита считаем, что это ВидОперации.
	// Как следствие будет проведено заполнение всех реквизитов по-умолчанию.
	Если ЧтоИзменилось = Неопределено Тогда
	
		ЧтоИзменилось = "ВидОперации";
	
	КонецЕсли;
	
	ПринятоОт = Объект.ПринятоОт;
	Основание = Объект.Основание;
	
	
	Если  Объект.ВидОперации = Перечисления.ВидыОперацийПКО.ОплатаПокупателя 
	  ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствПоставщиком 
	  ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийПКО.РасчетыПоКредитамИЗаймамСКонтрагентами Тогда 
		
		// ПринятоОт
		Если    ЧтоИзменилось = "ВидОперации"  
			ИЛИ ЧтоИзменилось = "Контрагент" Тогда
			
			ПринятоОт = ?(Объект.Контрагент.НаименованиеПолное="", Объект.Контрагент.Наименование, Объект.Контрагент.НаименованиеПолное);
			
		КонецЕсли;
		
		// Основание
		Если    ЧтоИзменилось = "ВидОперации"  
			ИЛИ ЧтоИзменилось = "ДоговорКонтрагента" 
			ИЛИ ЧтоИзменилось = "Сделка" Тогда
			
			Основание = "";	
			
			РасшифровкаКопия = Объект.РасшифровкаПлатежа.Выгрузить();
			РасшифровкаКопия.Свернуть("ДоговорКонтрагента, Сделка","");
			РасшифровкаКопия.Сортировать("ДоговорКонтрагента, Сделка");
			
			ТекДоговор = Неопределено;
			
			Для Инд = 0 По РасшифровкаКопия.Количество() - 1 Цикл
				
				СтрокаРасшифровки = РасшифровкаКопия[Инд];
				
				Шапка = Новый Структура();
				Шапка.Вставить("ДоговорКонтрагента", 			СтрокаРасшифровки.ДоговорКонтрагента);
				Шапка.Вставить("ДоговорНаименованиеДляПечати", 	СтрокаРасшифровки.ДоговорКонтрагента.НаименованиеДляПечати);
				Шапка.Вставить("ДоговорДата",  					СтрокаРасшифровки.ДоговорКонтрагента.Дата);
				Шапка.Вставить("ДоговорНомер", 					СтрокаРасшифровки.ДоговорКонтрагента.Номер);
				Шапка.Вставить("Сделка", 						СтрокаРасшифровки.Сделка);	
				
				// Выводим дополнительно информацию о договоре и сделке
				Если НЕ ТекДоговор = СтрокаРасшифровки.ДоговорКонтрагента Тогда
				
					СписокДополнительныхПараметров = "ДоговорНаименованиеДляПечати,";	
				    ТекДоговор = СтрокаРасшифровки.ДоговорКонтрагента;
					
				Иначе	
					
					СписокДополнительныхПараметров = "";
					
				КонецЕсли;
				
				Если ЗначениеЗаполнено(Шапка.Сделка) Тогда
					СписокДополнительныхПараметров = СписокДополнительныхПараметров + "Сделка,";
				КонецЕсли;
				
				МассивСтруктурСтрок = ОбщегоНазначенияБПВызовСервера.ДополнительнаяИнформация(Шапка,СписокДополнительныхПараметров,"uk");
				
				Для каждого СтруктураСтроки Из МассивСтруктурСтрок Цикл
					Основание = Основание + СтруктураСтроки.НазваниеПараметра + " " + СтруктураСтроки.ЗначениеПараметра + ", ";
				КонецЦикла;	
				
				
			КонецЦикла;
			
			// обрежем последнюю запятую
			Если Прав(Основание, 2) = ", " Тогда
				Основание = Сред(Основание, 1, СтрДлина(Основание) - 2);
			КонецЕсли;

		КонецЕсли;
		
		// Приложение
		// не заполняется ни в одном случае
		
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствПодотчетником Тогда

		// ПринятоОт
		Если    ЧтоИзменилось = "ВидОперации"  
			ИЛИ ЧтоИзменилось = "Контрагент" Тогда
			
			ПринятоОт = "";	
			
			Запрос=Новый Запрос;
			Запрос.Текст="ВЫБРАТЬ
			|	ФИОФизЛицСрезПоследних.Фамилия КАК Фамилия,
			|	ФИОФизЛицСрезПоследних.Имя КАК Имя,
			|	ФИОФизЛицСрезПоследних.Отчество КАК Отчество
			|ИЗ
			|	РегистрСведений.ФИОФизическихЛиц.СрезПоследних(&Дата, ФизическоеЛицо=&ФизЛицо) КАК ФИОФизЛицСрезПоследних";
			Запрос.УстановитьПараметр("Дата",?(Объект.Дата = '00010101', ОбщегоНазначенияБП.ПолучитьРабочуюДату(), Объект.Дата));
			Запрос.УстановитьПараметр("ФизЛицо",Объект.Контрагент);

			Результат=Запрос.Выполнить().Выбрать();
			Если Результат.Следующий() Тогда

				ПринятоОт = ?(НЕ ПустаяСтрока(Результат.Фамилия), 
							  Результат.Фамилия + ?(НЕ ПустаяСтрока(Результат.Имя)," " + Результат.Имя + " " + ?(НЕ ПустаяСтрока(Результат.Отчество),Результат.Отчество, ""), "")
							  ,"");

			КонецЕсли;
			
		КонецЕсли;
		
		// Основание
		Если    ЧтоИзменилось = "ВидОперации"  
			ИЛИ ЧтоИзменилось = "РасчетныйДокумент" Тогда
			
			Основание = "";	
			
			//Если ЗначениеЗаполнено(РасчетныйДокумент) Тогда
			//	
			//	НазваниеДокумента = "";
			//	Если ВидОперации = Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствПодотчетником Тогда
			//		НазваниеДокумента = "Видатковий касовий ордер";		
			//	КонецЕсли;
			//	
			//	Основание = НазваниеДокумента + " № " + ОбщегоНазначения.ПолучитьНомерНаПечать(РасчетныйДокумент) + " від " + Формат(РасчетныйДокумент.Дата, "ДФ=dd.MM.yyyy");
			//	
			//КонецЕсли;			
			
		КонецЕсли;		
		
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствРаботником Тогда
				// ПринятоОт
		Если    ЧтоИзменилось = "ВидОперации"  
			ИЛИ ЧтоИзменилось = "Контрагент" Тогда
			
			ПринятоОт = "";	
			
			Если ТипЗнч(Объект.Контрагент) = Тип("СправочникСсылка.Сотрудники") Тогда
				ДанныеФизическогоЛица = УчетЗарплаты.ДанныеФизическихЛиц(,Объект.Контрагент.ФизическоеЛицо, ?(Объект.Дата = '00010101', ОбщегоНазначенияБП.ПолучитьРабочуюДату(), Объект.Дата), Истина);
			Иначе
				ДанныеФизическогоЛица = УчетЗарплаты.ДанныеФизическихЛиц(,Объект.Контрагент, ?(Объект.Дата = '00010101', ОбщегоНазначенияБП.ПолучитьРабочуюДату(), Объект.Дата), Истина);
			КонецЕсли;	
			Фамилия = ДанныеФизическогоЛица.Фамилия;
			Имя	  = ДанныеФизическогоЛица.Имя;
			Отчество= ДанныеФизическогоЛица.Отчество;
			
			ПринятоОт = ?(НЕ ПустаяСтрока(Фамилия), 
							  Фамилия + ?(НЕ ПустаяСтрока(Имя)," " + Имя + " " + ?(НЕ ПустаяСтрока(Отчество),Отчество, ""), "")
							  ,"");
			
		КонецЕсли;
		
		// Основание
		Если    ЧтоИзменилось = "ВидОперации"  
			ИЛИ ЧтоИзменилось = "Сделка" Тогда
			
			Основание = "";	
		КонецЕсли;
				
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийПКО.ПолучениеНаличныхДенежныхСредствВБанке Тогда
		
		// ПринятоОт
		Если    ЧтоИзменилось = "ВидОперации"  
			ИЛИ ЧтоИзменилось = "СчетОрганизации" Тогда
			
			ПринятоОт = "";	
			Если Не Объект.СчетОрганизации.Пустая() Тогда
			
				Если Объект.Дата < Дата('20180105') Тогда
					ПринятоОт = "п/р " + Объект.СчетОрганизации.НомерСчета + " у " + Объект.СчетОрганизации.Банк;
				КонецЕсли; 
			
			КонецЕсли; 
			
		КонецЕсли;
		
		// Основание
		Если    ЧтоИзменилось = "ВидОперации"  
			ИЛИ ЧтоИзменилось = "ДенежныйЧек" Тогда
			
			Основание = "";	
			//Если Не ДенежныйЧек.Пустая() Тогда
			//
			//	Основание = "Чек № " + ОбщегоНазначения.ПолучитьНомерНаПечать(ДенежныйЧек) + " від " + Формат(ДенежныйЧек.Дата, "ДФ=dd.MM.yyyy");
			//	
			//КонецЕсли; 
			
		КонецЕсли;		
		
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийПКО.ПриходДенежныхСредствРозничнаяВыручка 
		  ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийПКО.ПриходДенежныхСредствПрочее Тогда
		
		// ПринятоОт
		Если    ЧтоИзменилось = "ВидОперации" Тогда
			
			ПринятоОт = "";	
			
		КонецЕсли;
		
		// Основание
		Если    ЧтоИзменилось = "ВидОперации" Тогда
			
			Основание = "";	
			
		КонецЕсли;
		
	КонецЕсли;
	
	НовыеПараметры.Вставить("ПринятоОт",  ПринятоОт);
	НовыеПараметры.Вставить("Основание",  Основание);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПараметрыВыбораСтатьиДекларацииПоЕдиномуНалогу()
	
	МассивПараметров = Новый Массив;
	МассивПараметров.Добавить(Новый ПараметрВыбора("ВидНалоговойДекларации", Перечисления.ВидыНалоговыхДеклараций.ЕдиныйНалог));
	
	ЭтоВозврат = (Объект.ВидОперации = Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствПодотчетником ИЛИ
	              Объект.ВидОперации = Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствПоставщиком ИЛИ
				  Объект.ВидОперации = Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствРаботником);
	
	Если ЭтоВозврат И ЕстьНДС Тогда
		МассивПараметров.Добавить(Новый ПараметрВыбора("НаборСтатейНалоговыхДеклараций", Справочники.НаборыСтатейНалоговыхДеклараций.ЕдиныйНалогРасход));
	Иначе
		МассивПараметров.Добавить(Новый ПараметрВыбора("НаборСтатейНалоговыхДеклараций", Справочники.НаборыСтатейНалоговыхДеклараций.ЕдиныйНалогПриход));		
	КонецЕсли;
	
	НовыеПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
	Элементы.СтатьяДекларацииПоЕдиномуНалогу.ПараметрыВыбора = НовыеПараметрыВыбора;
	Элементы.РасшифровкаПлатежаСтатьяДекларацииПоЕдиномуНалогу.ПараметрыВыбора = НовыеПараметрыВыбора;
	Элементы.СтатьяДекларацииПоЕдиномуНалогуРозница.ПараметрыВыбора = НовыеПараметрыВыбора;
	Элементы.СтатьяДекларацииПоЕдиномуНалогуПрочее.ПараметрыВыбора = НовыеПараметрыВыбора;
	Элементы.СтатьяДекларацииПоЕдиномуНалогуВозвратЗаймаРаботником.ПараметрыВыбора = НовыеПараметрыВыбора;
	
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ЗАВЕРШЕНИЕ НЕМОДАЛЬНЫХ ВЫЗОВОВ

&НаКлиенте
Процедура РасшифровкаПлатежаКурсВзаиморасчетовНачалоВыбораЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	СтрокаПлатеж = ДополнительныеПараметры.СтрокаПлатеж;
	
	СтруктураКурсаИКратности = РезультатЗакрытия;
	
	Если СтруктураКурсаИКратности <> Неопределено Тогда
		СтрокаПлатеж.КурсВзаиморасчетов      = СтруктураКурсаИКратности.КурсВалюты;
		СтрокаПлатеж.КратностьВзаиморасчетов = СтруктураКурсаИКратности.КратностьВалюты;
	КонецЕсли;
	
	РассчитатьСуммуВзаиморасчетов(Элементы.РасшифровкаПлатежа.ТекущиеДанные, ЭтотОбъект);
	Модифицированность = Истина;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ БСП

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти