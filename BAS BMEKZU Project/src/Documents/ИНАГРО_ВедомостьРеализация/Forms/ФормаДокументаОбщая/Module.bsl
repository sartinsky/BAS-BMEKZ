#Область ОбработчикиСобытийФормы 

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды 
	
	Если Параметры.Ключ.Пустая() Тогда
		ПодготовитьФормуНаСервере();
		УстановкаКонтрагентаПоВидуОперации(); 
	КонецЕсли;
	
	// Уведомим о появлении функционала рабочей даты
	НастройкиПредупреждений = ОбщегоНазначенияБП.НастройкиПредупрежденийОбИзменениях("РабочаяДатаИзДокумента");
	
	// Показываем, если это новый документ и сама рабочая дата еще не установлена.
	НастройкиПредупреждений.РабочаяДатаИзДокумента = НастройкиПредупреждений.РабочаяДатаИзДокумента
		И Параметры.Ключ.Пустая()
		И НЕ ЗначениеЗаполнено(БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("РабочаяДата"));
		
	УстановитьПараметрыВыбораВидОперации();
	
	// Если форма вызвана в режиме смена вида операции - модифицируем сразу при открытии, 
	// чтобы можно было подтвердить или отказаться от изменения путем сохранения или 
	// отказа от сохранения документа.
	Если Параметры.Свойство("ИзменитьВидОперации")
		И Параметры.ИзменитьВидОперации Тогда
		
		// Не кэшируем переменную Объект, т.к. может вызываться Форма.ИзменитьРеквизиты(),
		// которая меняет Объект.
		Объект.ВидОперации = Параметры.ЗначенияЗаполнения.ВидОперации;
		                                    
		УстановитьЗаголовокФормы();  
		
		УправлениеФормойНаСервере();
		
		Модифицированность = Истина;
		
	КонецЕсли; 	

	// Активизировать первую непустую табличную часть
	АктивизироватьТабличнуюЧасть = ОбщегоНазначенияБПВызовСервера.ПолучитьПервуюНепустуюВидимуюТабличнуюЧасть(
		ЭтаФорма, СписокВидимыхТабличныхЧастей());	
	ОбщегоНазначенияБПВызовСервера.АктивизироватьЭлементФормы(ЭтаФорма, АктивизироватьТабличнуюЧасть);
		
	// Авторасчет НДС
	ПерерасчетПроизведен = Истина; 
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	ОбщегоНазначенияБПКлиент.ОбработкаОповещенияФормыДокумента(ЭтотОбъект, Объект.Ссылка, ИмяСобытия, Параметр, Источник);
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	ПодготовитьФормуНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ОбновитьИтоги(ЭтотОбъект);
	
	УстановитьЗаголовокФормы();
	
	// Авторасчет НДС
	ПерерасчетПроизведен = Истина;
	
	УстановитьСостояниеДокумента(); 

КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)

	Если НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДатаДокумента) Тогда
		// Изменение времени не влияет на поведение документа.
		ТекущаяДатаДокумента = Объект.Дата;
		Возврат;
	КонецЕсли;

	// Общие проверки условий по датам.
	ТребуетсяВызовСервера = ОбщегоНазначенияБПКлиент.ТребуетсяВызовСервераПриИзмененииДатыДокумента(Объект.Дата, 
		ТекущаяДатаДокумента);
		
	// Если определили, что изменение даты может повлиять на какие-либо параметры, 
	// то передаем обработку на сервер.
	Если ТребуетсяВызовСервера Тогда
		ДатаПриИзмененииНаСервере();
	КонецЕсли;
	
	// Запомним новую дату документа.
	ТекущаяДатаДокумента = Объект.Дата;	 
	
	Объект.МесяцВыплаты = НачалоМесяца(Объект.Дата);
	
КонецПроцедуры

&НаСервере
Процедура ДатаПриИзмененииНаСервере()

	УстановитьФункциональныеОпцииФормы();

	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ВидОперацииПриИзменении(Элемент)
	
	ОчиститьТаблицыДокумента();	
	
КонецПроцедуры

&НаКлиенте
Процедура ВидОперацииНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ВидОперацииПредыдущий = Объект.ВидОперации;

КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)

	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		ОрганизацияПриИзмененииНаСервере();
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()

	УстановитьФункциональныеОпцииФормы();
	 		
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)

	Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
		КонтрагентПриИзмененииНаСервере();
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура КонтрагентПриИзмененииНаСервере()
	
	Если НЕ ЗначениеЗаполнено(Объект.Контрагент) Тогда
		Возврат;
	КонецЕсли;
	
	БухгалтерскийУчетПереопределяемый.УстановитьДоговорКонтрагента(
		Объект.ДоговорКонтрагента, Объект.Контрагент, Объект.Организация, 
		ПолучитьМассивВидовДоговоров());
	
	Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		ДоговорКонтрагентаПриИзмененииНаСервере();
	Иначе
		СложныйНалоговыйУчет = Ложь;	
	КонецЕсли; 

	УправлениеФормой(ЭтаФорма);

КонецПроцедуры 

&НаКлиенте
Процедура ГруппаКонтрагентовПриИзменении(Элемент)
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорКонтрагентаПриИзменении(Элемент)

	Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		ДоговорКонтрагентаПриИзмененииНаСервере(); 
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ДоговорКонтрагентаПриИзмененииНаСервере()
	
	ВалютаДоИзменения = Объект.ВалютаДокумента;
	КурсДоИзменения   = Объект.КурсВзаиморасчетов;
	КратностьДоИзменения = Объект.КратностьВзаиморасчетов;
	ТипЦенДоИзменения = Объект.ТипЦен;
	СуммаВключаетНДСДоИзменения = Объект.СуммаВключаетНДС;
	
	ДоговорУказан     = ЗначениеЗаполнено(Объект.ДоговорКонтрагента);
	РеквизитыДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		Объект.ДоговорКонтрагента, "ВалютаВзаиморасчетов, Владелец, ТипЦен, ВидДоговора, ВедениеВзаиморасчетов, СложныйНалоговыйУчет");
	
	Если ДоговорУказан Тогда
		ВалютаВзаиморасчетов = РеквизитыДоговора.ВалютаВзаиморасчетов;
		Объект.ВалютаДокумента     = ВалютаВзаиморасчетов;
		Если НЕ ЗначениеЗаполнено(Объект.Контрагент) Тогда
			Объект.Контрагент = РеквизитыДоговора.Владелец;
		КонецЕсли;
	Иначе
		Объект.ВалютаДокумента     = ВалютаРегламентированногоУчета;
	КонецЕсли;
	
	Если ВалютаДоИзменения <> Объект.ВалютаДокумента Тогда
		СтруктураКурсаДокумента        = РаботаСКурсамиВалют.ПолучитьКурсВалюты(Объект.ВалютаДокумента, Объект.Дата);
		Объект.КурсВзаиморасчетов      = СтруктураКурсаДокумента.Курс;
		Объект.КратностьВзаиморасчетов = СтруктураКурсаДокумента.Кратность;
	КонецЕсли;
	
	Если ДоговорУказан И ЗначениеЗаполнено(РеквизитыДоговора.ТипЦен) Тогда
		Объект.ТипЦен           = РеквизитыДоговора.ТипЦен;
		Объект.СуммаВключаетНДС = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(РеквизитыДоговора.ТипЦен, "ЦенаВключаетНДС");
	КонецЕсли;
	
	ПересчитатьЦены = Объект.ВалютаДокумента <> ВалютаДоИзменения
		ИЛИ Объект.КурсВзаиморасчетов <> КурсДоИзменения
		ИЛИ Объект.ТипЦен <> ТипЦенДоИзменения;
	ПересчитатьНДС = Объект.СуммаВключаетНДС <> СуммаВключаетНДСДоИзменения;
	Если ЕстьСтрокиВТабличныхЧастях() И (ПересчитатьЦены ИЛИ ПересчитатьНДС) Тогда
		ЗаполнитьРассчитатьСуммы(ВалютаДоИзменения, КурсДоИзменения, КратностьДоИзменения, Ложь, ПересчитатьЦены, ПересчитатьНДС);
	ИначеЕсли ПересчитатьНДС Тогда
		УстановитьЗаголовкиКолонок();
	КонецЕсли;
	
	СложныйНалоговыйУчет = ДоговорУказан И РеквизитыДоговора.СложныйНалоговыйУчет;
		
	ЗаполнитьСчетаУчетаРасчетов();

	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура НоменклатураПриИзменении(Элемент)
	
	Если Объект.Номенклатура = ПредопределенноеЗначение("Справочник.Номенклатура.ПустаяСсылка") Тогда 		 
		
		Объект.ЕдиницаИзмерения                  = ПредопределенноеЗначение("Справочник.КлассификаторЕдиницИзмерения.ПустаяСсылка");
		Объект.Коэффициент                       = 1;
		Объект.СхемаРеализации                   = ПредопределенноеЗначение("Справочник.СхемыРеализации.ПустаяСсылка");
		Объект.НалоговоеНазначение               = ПредопределенноеЗначение("Справочник.НалоговыеНазначенияАктивовИЗатрат.ПустаяСсылка");
		Объект.НалоговоеНазначениеДоходовИЗатрат = ПредопределенноеЗначение("Справочник.НалоговыеНазначенияАктивовИЗатрат.ПустаяСсылка"); 		
						
	Иначе 				
		
		Реквизиты = Новый Структура(
			"Номенклатура, ЕдиницаИзмерения, Коэффициент,
			|СхемаРеализации, НалоговоеНазначение, НалоговоеНазначениеДоходовИЗатрат,
			|СчетУчетаБУ, СтавкаНДС, ЭтоУслуга, Содержание"); 		
		ЗаполнитьЗначенияСвойств(Реквизиты, Объект);
		
		ДанныеОбъекта = Новый Структура("Дата, Организация, Склад"); 		
		ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект); 
		
		НоменклатураПриИзмененииНаСервере(Реквизиты, ДанныеОбъекта);

		ЗаполнитьЗначенияСвойств(Объект, Реквизиты,
			"ЕдиницаИзмерения, Коэффициент, СхемаРеализации,,
			|НалоговоеНазначение, НалоговоеНазначениеДоходовИЗатрат,
			|СчетУчетаБУ, СтавкаНДС, ЭтоУслуга");		
		
		Если Объект.ЭтоУслуга Тогда 
			ЭтоУслугаПриИзменении(Неопределено);			 
		КонецЕсли;
		 
		УстановитьВидимостьСтраницНаСервере();
				 			        				
		Если Объект[ИмяТабличнойЧасти].Количество() > 0 Тогда
			
			Для Каждого СтрокаТабличнойЧасти Из Объект[ИмяТабличнойЧасти] Цикл 
				
				СтрокаТабличнойЧасти.Номенклатура 						= Объект.Номенклатура;
				СтрокаТабличнойЧасти.СхемаРеализации 					= Объект.СхемаРеализации;  
				СтрокаТабличнойЧасти.СтавкаНДС 							= Объект.СтавкаНДС;  
				СтрокаТабличнойЧасти.НалоговоеНазначение 				= Объект.НалоговоеНазначение;
				СтрокаТабличнойЧасти.НалоговоеНазначениеДоходовИЗатрат 	= Объект.НалоговоеНазначениеДоходовИЗатрат;
				
				Если Объект.ЭтоУслуга Тогда 
					СтрокаТабличнойЧасти.Содержание       = Реквизиты.Содержание;
				Иначе
					СтрокаТабличнойЧасти.ЕдиницаИзмерения = Объект.ЕдиницаИзмерения;
					СтрокаТабличнойЧасти.Коэффициент      = Объект.Коэффициент; 	
				КонецЕсли;
				
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, , , , Объект.РасхождениеКоличества);
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, Объект.СуммаВключаетНДС);
				
				ЗаполнитьКолонкуВсего(СтрокаТабличнойЧасти, Объект.СуммаВключаетНДС);
				
			КонецЦикла;
			
			РассчитатьНДФЛНаСервере();
			
		КонецЕсли;    
				
	КонецЕсли; 
				
КонецПроцедуры  

&НаСервереБезКонтекста  
Процедура НоменклатураПриИзмененииНаСервере(Реквизиты, Знач ДанныеОбъекта)
	
	СведенияОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОНоменклатуре(Реквизиты.Номенклатура, ДанныеОбъекта);
	
	Если СведенияОНоменклатуре = Неопределено Тогда
		Возврат;
	КонецЕсли;		
	
	Реквизиты.ЕдиницаИзмерения                  = СведенияОНоменклатуре.БазоваяЕдиницаИзмерения;
	Реквизиты.Коэффициент                       = СведенияОНоменклатуре.Коэффициент;  		
	Реквизиты.СхемаРеализации 					= СведенияОНоменклатуре.СчетаУчета.СхемаРеализации;
	Реквизиты.НалоговоеНазначение 				= СведенияОНоменклатуре.СчетаУчета.НалоговоеНазначение;
	Реквизиты.НалоговоеНазначениеДоходовИЗатрат = СведенияОНоменклатуре.СчетаУчета.НалоговоеНазначениеДоходовИЗатрат;
	Реквизиты.СчетУчетаБУ 						= СведенияОНоменклатуре.СчетаУчета.СчетУчетаБУ; 
	Реквизиты.СтавкаНДС							= СведенияОНоменклатуре.СтавкаНДС;
	Реквизиты.ЭтоУслуга 						= СведенияОНоменклатуре.Услуга;  
	Реквизиты.Содержание 						= СведенияОНоменклатуре.НаименованиеПолное;  

КонецПроцедуры

&НаКлиенте
Процедура УказатьСуммуСписанияПриИзменении(Элемент)
	
	Если НЕ Объект.УказатьСуммуСписания Тогда
		Объект.СуммаСписания = 0;
	КонецЕсли; 
	
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ЕдиницаИзмеренияПриИзменении(Элемент)
		
	ДанныеОбъекта = Новый Структура(
		"Дата, Организация, Склад,
		|Номенклатура, ЕдиницаИзмерения, Коэффициент");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);

	ЕдиницаИзмеренияПриИзмененииНаСервере(ДанныеОбъекта);
	
	Объект.Коэффициент = ДанныеОбъекта.Коэффициент;

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЕдиницаИзмеренияПриИзмененииНаСервере(ПараметрыСтроки)
	
	ОбработкаТабличныхЧастей.ЗаполнитьКоэффициентТабЧасти(ПараметрыСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура ЦеныИВалютаНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОбработатьИзмененияПоКнопкеЦеныИВалюты();
	
КонецПроцедуры

// Флаги свойств табличной части

&НаКлиенте
Процедура НоменклатураВТЧПриИзменении(Элемент)
	
	Если Объект.НоменклатураВТЧ Тогда 		
		
		Если ЗначениеЗаполнено(Объект.Номенклатура) Тогда
			Объект.Номенклатура                      = ПредопределенноеЗначение("Справочник.Номенклатура.ПустаяСсылка");	
			Объект.ЕдиницаИзмерения                  = ПредопределенноеЗначение("Справочник.КлассификаторЕдиницИзмерения.ПустаяСсылка");
			Объект.Коэффициент                       = 1;
			Объект.СхемаРеализации                   = ПредопределенноеЗначение("Справочник.СхемыРеализации.ПустаяСсылка");
			Объект.НалоговоеНазначение               = ПредопределенноеЗначение("Справочник.НалоговыеНазначенияАктивовИЗатрат.ПустаяСсылка");
			Объект.НалоговоеНазначениеДоходовИЗатрат = ПредопределенноеЗначение("Справочник.НалоговыеНазначенияАктивовИЗатрат.ПустаяСсылка");
		КонецЕсли;  
		
	Иначе
		
		УстановитьВидимостьСтраницНаСервере();	
		
		Для Каждого СтрокаТабличнойЧасти Из Объект[ИмяТабличнойЧасти] Цикл
			
			СтрокаТабличнойЧасти.Номенклатура                      = ПредопределенноеЗначение("Справочник.БиологическиеАктивы.ПустаяСсылка");	
			
			Если Объект.ЭтоУслуга Тогда 
				СтрокаТабличнойЧасти.Содержание       = "";
			Иначе
				СтрокаТабличнойЧасти.ЕдиницаИзмерения = ПредопределенноеЗначение("Справочник.КлассификаторЕдиницИзмерения.ПустаяСсылка");
				СтрокаТабличнойЧасти.Коэффициент      = 1; 	
			КонецЕсли;    			
			
			СтрокаТабличнойЧасти.СхемаРеализации                   = ПредопределенноеЗначение("Справочник.СхемыРеализации.ПустаяСсылка");
			СтрокаТабличнойЧасти.НалоговоеНазначение               = ПредопределенноеЗначение("Справочник.НалоговыеНазначенияАктивовИЗатрат.ПустаяСсылка");
			СтрокаТабличнойЧасти.НалоговоеНазначениеДоходовИЗатрат = ПредопределенноеЗначение("Справочник.НалоговыеНазначенияАктивовИЗатрат.ПустаяСсылка");
			
		КонецЦикла;
		
	КонецЕсли; 				
		
	УправлениеФормой(ЭтаФорма); 
	
КонецПроцедуры

&НаКлиенте
Процедура ЭтоУслугаПриИзменении(Элемент)
	
	Если ИмяТабличнойЧасти = "Товары" И Объект.Товары.Количество() > 0 Тогда
		ТекстВопроса = НСтр("ru='Табличная часть будет очищена. Продолжить?';uk='Таблична частина буде очищена. Продовжити?'");
		Оповещение = Новый ОписаниеОповещения("ОчиститьТаблицуТоварыЗавершение", ЭтотОбъект, Параметры);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да); 
	ИначеЕсли ИмяТабличнойЧасти = "Услуги" И Объект.Услуги.Количество() > 0 Тогда
		ТекстВопроса = НСтр("ru='Табличная часть будет очищена. Продолжить?';uk='Таблична частина буде очищена. Продовжити?'");
		Оповещение = Новый ОписаниеОповещения("ОчиститьТаблицуУслугиЗавершение", ЭтотОбъект, Параметры);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да); 		
	Иначе	
		УстановитьВидимостьСтраницНаСервере();		
		УправлениеФормой(ЭтаФорма);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОчиститьТаблицуТоварыЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
   	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда 
		Объект.ЭтоУслуга = Ложь;
		УстановитьВидимостьСтраницНаСервере();
		УправлениеФормой(ЭтаФорма);
		Возврат;
	КонецЕсли;
	
	Объект.Товары.Очистить();
	
	УстановитьВидимостьСтраницНаСервере(); 	
	УправлениеФормой(ЭтаФорма);  
			
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьТаблицуУслугиЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
   	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда 
		Объект.ЭтоУслуга = Истина;
		УстановитьВидимостьСтраницНаСервере();	
		УправлениеФормой(ЭтаФорма); 
		Возврат;
	КонецЕсли;
	
	Объект.Услуги.Очистить();	
	
	УстановитьВидимостьСтраницНаСервере(); 	
	УправлениеФормой(ЭтаФорма);
			
КонецПроцедуры  

&НаКлиенте
Процедура РасхождениеКоличестваПриИзменении(Элемент)
	
	Для Каждого СтрокаТаблицы Из Объект.Товары Цикл
		
		Если НЕ Объект.РасхождениеКоличества Тогда
			СтрокаТаблицы.НовоеКоличество = 0;
		КонецЕсли;
		
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТаблицы, , , , Объект.РасхождениеКоличества); 
		
		Если СтрокаТаблицы.Свойство("СуммаНДС") Тогда
			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТаблицы, Объект.СуммаВключаетНДС);
		КонецЕсли;		
		
		Если СтрокаТаблицы.Свойство("Всего") Тогда
			СтрокаТаблицы.Всего = СтрокаТаблицы.Сумма + ?(Объект.СуммаВключаетНДС, 0, СтрокаТаблицы.СуммаНДС);
		КонецЕсли; 			
		
	КонецЦикла;

	ОбновитьИтоги(ЭтаФорма);
	
	УправлениеФормой(ЭтаФорма);
	
	// Элеватор

КонецПроцедуры

// Взаиморасчеты

&НаКлиенте
Процедура СтавкаНДСПриИзменении(Элемент)
	
	ПересчитатьСтавкиНДСПриСменеСтавки();

КонецПроцедуры

&НаКлиенте
Процедура НалоговоеНазначениеПриИзменении(Элемент)
	
	Если Объект.НоменклатураВТЧ	Тогда
		Для Каждого СтрокаТабличнойЧасти Из Объект.Товары Цикл
			СтрокаТабличнойЧасти.НалоговоеНазначение = Объект.НалоговоеНазначение;
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура НалоговоеНазначениеДоходовИЗатратПриИзменении(Элемент)
	
	Если Объект.НоменклатураВТЧ	Тогда 		
		Для Каждого СтрокаТабличнойЧасти Из Объект.Товары Цикл
			СтрокаТабличнойЧасти.НалоговоеНазначениеДоходовИЗатрат = Объект.НалоговоеНазначениеДоходовИЗатрат;
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

// Счета учета

&НаКлиенте
Процедура СчетУчетаНДФЛПриИзменении(Элемент)

	ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3",
		"СубконтоСчетаНДФЛ1", "СубконтоСчетаНДФЛ2", "СубконтоСчетаНДФЛ3");
	ПоляОбъекта.Вставить("Организация", Объект.Организация);
	БухгалтерскийУчетКлиентСервер.ПриИзмененииСчета(Объект.СчетУчетаНДФЛ, Объект, ПоляОбъекта);
	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтотОбъект);
	ЗаголовкиПолей = Новый Структура("Субконто1, Субконто2, Субконто3",
		"ЗаголовокСубконтоСчетаНДФЛ1", "ЗаголовокСубконтоСчетаНДФЛ2", "ЗаголовокСубконтоСчетаНДФЛ3");
	УстановитьЗаголовкиИДоступностьСубконто(ЭтотОбъект, Объект.СчетУчетаНДФЛ, ЗаголовкиПолей, , "СчетаНДФЛ");

КонецПроцедуры

&НаКлиенте
Процедура СубконтоСчетаНДФЛПриИзменении(Элемент)
	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоСчетаНДФЛНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПараметрыДокумента = ПолучитьСписокПараметровВыбораСубконто(ЭтотОбъект, Объект, "СубконтоСчетаНДФЛ%Индекс%");
	ПараметрыДокумента.Вставить("СчетУчета", Объект.СчетУчетаНДФЛ);
	ОбщегоНазначенияБПКлиент.НачалоВыбораЗначенияСубконто(ЭтотОбъект, Элемент, СтандартнаяОбработка, ПараметрыДокумента);
	
КонецПроцедуры

&НаКлиенте
Процедура СчетУчетаВоенногоСбораПриИзменении(Элемент)

	ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3",
		"СубконтоВоенныйСбор1", "СубконтоВоенныйСбор2", "СубконтоВоенныйСбор3");
	ПоляОбъекта.Вставить("Организация",   Объект.Организация);
	БухгалтерскийУчетКлиентСервер.ПриИзмененииСчета(Объект.СчетВоенногоСбора, Объект, ПоляОбъекта);
	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтотОбъект);
	ЗаголовкиПолей = Новый Структура("Субконто1, Субконто2, Субконто3",
		"ЗаголовокСубконтоВоенныйСбор1", "ЗаголовокСубконтоВоенныйСбор2", "ЗаголовокСубконтоВоенныйСбор3");
	УстановитьЗаголовкиИДоступностьСубконто(ЭтотОбъект, Объект.СчетВоенногоСбора, ЗаголовкиПолей, , "ВоенныйСбор");

КонецПроцедуры

&НаКлиенте
Процедура СубконтоВоенногоСбораПриИзменении(Элемент)
	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоВоенногоСбораНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПараметрыДокумента = ПолучитьСписокПараметровВыбораСубконто(ЭтотОбъект, Объект, "СубконтоВоенныйСбор%Индекс%");
	ПараметрыДокумента.Вставить("СчетУчета", Объект.СчетВоенногоСбора);
	ОбщегоНазначенияБПКлиент.НачалоВыбораЗначенияСубконто(ЭтотОбъект, Элемент, СтандартнаяОбработка, ПараметрыДокумента);
	
КонецПроцедуры  

&НаКлиенте
Процедура СчетЗатратПриИзменении(Элемент)

	ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3",
		"СубконтоЗатрат1", "СубконтоЗатрат2", "СубконтоЗатрат3");
	ПоляОбъекта.Вставить("Организация", Объект.Организация);
	БухгалтерскийУчетКлиентСервер.ПриИзмененииСчета(Объект.СчетЗатрат, Объект, ПоляОбъекта);
	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтотОбъект);
	ЗаголовкиПолей = Новый Структура("Субконто1, Субконто2, Субконто3",
		"ЗаголовокСубконтоЗатрат1", "ЗаголовокСубконтоЗатрат2", "ЗаголовокСубконтоЗатрат3");
	УстановитьЗаголовкиИДоступностьСубконто(ЭтотОбъект, Объект.СчетЗатрат, ЗаголовкиПолей, , "Затрат");
	
	ПроверитьНалоговоеНазначениеДоходовИЗатрат();
	
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура СубконтоСчетаЗатратПриИзменении(Элемент)
	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтотОбъект); 	
	
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура СубконтоСчетаЗатратНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПараметрыДокумента = ПолучитьСписокПараметровВыбораСубконто(ЭтотОбъект, Объект, "СубконтоЗатрат%Индекс%");
	ПараметрыДокумента.Вставить("СчетУчета", Объект.СчетЗатрат);
	ОбщегоНазначенияБПКлиент.НачалоВыбораЗначенияСубконто(ЭтотОбъект, Элемент, СтандартнаяОбработка, ПараметрыДокумента);
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоЗатратОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ВыбранноеЗначение <> Неопределено Тогда
		
		Если ТипЗнч(ВыбранноеЗначение) = ТипЗнч(ПредопределенноеЗначение("Справочник.ПодразделенияОрганизаций.ПустаяСсылка")) Тогда
			
			ДанныеОбъекта = Новый Структура("СубконтоСчетаНДФЛ1, СубконтоСчетаНДФЛ2, СубконтоСчетаНДФЛ3"); 
			ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект); 
			ДанныеОбъекта.Вставить("Подразделение", ВыбранноеЗначение);
			
			СубконтоЗатратОбработкаВыбораНаСервере(ДанныеОбъекта); 
			
			ЗаполнитьЗначенияСвойств(Объект, ДанныеОбъекта);
			
		КонецЕсли;
		
	КонецЕсли;	
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СубконтоЗатратОбработкаВыбораНаСервере(ДанныеОбъекта)
	
	Если ТипЗнч(ДанныеОбъекта.СубконтоСчетаНДФЛ1) = ТипЗнч(Справочники.Контрагенты.ПустаяСсылка()) И НЕ ЗначениеЗаполнено(ДанныеОбъекта.СубконтоСчетаНДФЛ1) Тогда
		ДанныеОбъекта.СубконтоСчетаНДФЛ1 = ДанныеОбъекта.Подразделение.ИНАГРО_Контрагент;
	ИначеЕсли ТипЗнч(ДанныеОбъекта.СубконтоСчетаНДФЛ2)=ТипЗнч(Справочники.Контрагенты.ПустаяСсылка()) И НЕ ЗначениеЗаполнено(ДанныеОбъекта.СубконтоСчетаНДФЛ2)  Тогда
		ДанныеОбъекта.СубконтоСчетаНДФЛ2 = ДанныеОбъекта.Подразделение.ИНАГРО_Контрагент;
	ИначеЕсли ТипЗнч(ДанныеОбъекта.СубконтоСчетаНДФЛ3)=ТипЗнч(Справочники.Контрагенты.ПустаяСсылка()) И НЕ ЗначениеЗаполнено(ДанныеОбъекта.СубконтоСчетаНДФЛ3)  Тогда
		ДанныеОбъекта.СубконтоСчетаНДФЛ3 = ДанныеОбъекта.Подразделение.ИНАГРО_Контрагент;  		
	КонецЕсли;
	
КонецПроцедуры 

// Конец Счета учета

&НаКлиенте
Процедура НачислятьНДФЛПриИзменении(Элемент)

	ПолучитьСтавкуНДФЛ();
	
	Если НЕ ЗначениеЗаполнено(Объект.СчетУчетаНДФЛ) Тогда
		Объект.СчетУчетаНДФЛ = ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.РасчетыПоНДФЛ");
	КонецЕсли;  	
	
	РассчитатьНДФЛНаСервере();
	
	Если НЕ Объект.НачислятьНДФЛ Тогда
		Объект.НачислятьПоПаям = Ложь;
	КонецЕсли;  	
		
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры 

&НаКлиенте
Процедура НачислятьПоПаямПриИзменении(Элемент)
	
	ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3",
		"СубконтоСчетаНДФЛ1", "СубконтоСчетаНДФЛ2", "СубконтоСчетаНДФЛ3");
	ПоляОбъекта.Вставить("Организация", Объект.Организация);
	БухгалтерскийУчетКлиентСервер.ПриИзмененииСчета(Объект.СчетУчетаНДФЛ, Объект, ПоляОбъекта);
	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтотОбъект);
	ЗаголовкиПолей = Новый Структура("Субконто1, Субконто2, Субконто3",
		"ЗаголовокСубконтоСчетаНДФЛ1", "ЗаголовокСубконтоСчетаНДФЛ2", "ЗаголовокСубконтоСчетаНДФЛ3");
	УстановитьЗаголовкиИДоступностьСубконто(ЭтотОбъект, Объект.СчетУчетаНДФЛ, ЗаголовкиПолей, , "СчетаНДФЛ");
	
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(
		Элемент.ТекстРедактирования,
		ЭтотОбъект,
		"Объект.Комментарий");

КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиСобытийЭлементовТаблицыФормыТовары

&НаКлиенте
Процедура ТоварыПриИзменении(Элемент)
	
	ОбновитьИтоги(ЭтаФорма);
	
	// Авторасчет НДС
	ПерерасчетПроизведен = Ложь; 
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	Если НоваяСтрока И НЕ Копирование Тогда
		
		ТекущиеДанные.Номенклатура                      = Объект.Номенклатура;
		ТекущиеДанные.ЕдиницаИзмерения                  = Объект.ЕдиницаИзмерения;
		ТекущиеДанные.Коэффициент                       = Объект.Коэффициент;
		ТекущиеДанные.НалоговоеНазначение               = Объект.НалоговоеНазначение;
		ТекущиеДанные.НалоговоеНазначениеДоходовИЗатрат = Объект.НалоговоеНазначениеДоходовИЗатрат;
		ТекущиеДанные.СхемаРеализации                   = Объект.СхемаРеализации;
		ТекущиеДанные.СтавкаНДС                         = Объект.СтавкаНДС;
		
	КонецЕсли;

	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если НоваяСтрока И ОтменаРедактирования Тогда
		ОбновитьИтоги(ЭтаФорма);
		// Авторасчет НДС
		ПерерасчетПроизведен = Ложь; 
	КонецЕсли;  

КонецПроцедуры

&НаКлиенте
Процедура ТоварыПослеУдаления(Элемент)
	
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ТоварыКонтрагентПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	ТоварыКонтрагентПриИзмененииНаСервере(ТекущиеДанные.ДоговорКонтрагента, ТекущиеДанные.Контрагент, Объект.Организация); 
	
КонецПроцедуры    

&НаСервереБезКонтекста
Процедура ТоварыКонтрагентПриИзмененииНаСервере(ДоговорКонтрагента, Контрагент, Организация)
	
	СписокВидовДоговоров = Новый СписокЗначений;
	СписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.ИНАГРО_АрендаЗемли);
	СписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.ИНАГРО_АрендаИмущества);
	СписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПокупателем);
	
	БухгалтерскийУчетПереопределяемый.УстановитьДоговорКонтрагента(ДоговорКонтрагента, Контрагент, Организация,СписокВидовДоговоров); 

КонецПроцедуры  

&НаКлиенте
Процедура ТоварыКоличествоПриИзменении(Элемент)
			
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные; 	
	
	ОбработкаТабличныхЧастейКлиентСервер.ПриИзмененииКоличествоЦена(ЭтаФорма, "Товары", , , , Объект.РасхождениеКоличества);
	
	РассчитатьНДФЛНаСервере(ТекущиеДанные.Контрагент); 		
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНовоеКоличествоПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные; 		
	
	ОбработкаТабличныхЧастейКлиентСервер.ПриИзмененииКоличествоЦена(ЭтаФорма, "Товары", , , , Объект.РасхождениеКоличества);
	
	РассчитатьНДФЛНаСервере(ТекущиеДанные.Контрагент);  
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЦенаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	ОбработкаТабличныхЧастейКлиентСервер.ПриИзмененииКоличествоЦена(ЭтаФорма, "Товары", , , , Объект.РасхождениеКоличества);

	РассчитатьНДФЛНаСервере(ТекущиеДанные.Контрагент); 

КонецПроцедуры  

&НаКлиенте
Процедура ТоварыСуммаПриИзменении(Элемент)
		
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;	
		
	ОбработкаТабличныхЧастейКлиентСервер.ПриИзмененииСумма(ЭтаФорма, "Товары");

	РассчитатьНДФЛНаСервере(ТекущиеДанные.Контрагент)			
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСтавкаНДСПриИзменении(Элемент)
	 	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные; 	
		
	ОбработкаТабличныхЧастейКлиентСервер.ПриИзмененииСтавкаНДС(ЭтаФорма, "Товары"); 

	РассчитатьНДФЛНаСервере(ТекущиеДанные.Контрагент); 

КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	ДанныеСтрокиТаблицы = Новый Структура(
		"Номенклатура, ЕдиницаИзмерения, СтавкаНДС, Коэффициент,
		|СхемаРеализации, НалоговоеНазначение, НалоговоеНазначениеДоходовИЗатрат, Контрагент"); 
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, ТекущиеДанные);
	
	ДанныеОбъекта = Новый Структура("Дата, Организация, Склад"); 		
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
	ТоварыНоменклатураПриИзмененииНаСервере(ДанныеСтрокиТаблицы, ДанныеОбъекта);
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтрокиТаблицы);  		
	
	ОбработкаТабличныхЧастейКлиентСервер.ПриИзмененииСтавкаНДС(ЭтаФорма, "Товары"); 

	РассчитатьНДФЛНаСервере(ДанныеСтрокиТаблицы.Контрагент); 

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ТоварыНоменклатураПриИзмененииНаСервере(СтрокаТабличнойЧасти, Знач ДанныеОбъекта)
	
	СведенияОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОНоменклатуре(СтрокаТабличнойЧасти.Номенклатура, ДанныеОбъекта);
	
	Если СведенияОНоменклатуре = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаТабличнойЧасти.ЕдиницаИзмерения		            = СведенияОНоменклатуре.БазоваяЕдиницаИзмерения;
	СтрокаТабличнойЧасти.Коэффициент			            = СведенияОНоменклатуре.Коэффициент;
	СтрокаТабличнойЧасти.СтавкаНДС			            	= СведенияОНоменклатуре.СтавкаНДС;
	СтрокаТабличнойЧасти.СхемаРеализации		            = СведенияОНоменклатуре.СчетаУчета.СхемаРеализации;		
	СтрокаТабличнойЧасти.НалоговоеНазначение			    = СведенияОНоменклатуре.СчетаУчета.НалоговоеНазначение;
	СтрокаТабличнойЧасти.НалоговоеНазначениеДоходовИЗатрат	= СведенияОНоменклатуре.СчетаУчета.НалоговоеНазначениеДоходовИЗатрат; 		
	
КонецПроцедуры 

&НаКлиенте
Процедура ТоварыЕдиницаИзмеренияПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	ДанныеСтрокиТаблицы = Новый Структура("Номенклатура, ЕдиницаИзмерения, Коэффициент");
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, ТекущиеДанные);

	ЕдиницаИзмеренияПриИзмененииНаСервере(ДанныеСтрокиТаблицы);
	
	ТекущиеДанные.Коэффициент = ДанныеСтрокиТаблицы.Коэффициент;	
	
КонецПроцедуры    

&НаКлиенте
Процедура ТоварыСделкаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;

	// Без договора сделку выбирать не будем.
	Если НЕ ЗначениеЗаполнено(ТекущиеДанные.ДоговорКонтрагента) Тогда
		ТекстСообщения = НСтр("ru='Не выбран договор контрагента!';uk='Не обраний договір контрагента!'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Товары[" + (ТекущиеДанные.НомерСтроки - 1) + "].ДоговорКонтрагента", "Объект");
		Возврат;
	КонецЕсли; 
	
	ПараметрыОбъекта = Новый Структура;
	ПараметрыОбъекта.Вставить("КонецПериода",               Объект.Дата - 1);
	ПараметрыОбъекта.Вставить("ДоговорКонтрагента",         ТекущиеДанные.ДоговорКонтрагента);
	ПараметрыОбъекта.Вставить("Контрагент",                 ТекущиеДанные.Контрагент);
	ПараметрыОбъекта.Вставить("Организация",                Объект.Организация);
	ПараметрыОбъекта.Вставить("ТипыДокументов",             "Метаданные.Документы.ИНАГРО_ВедомостьРеализация.ТабличныеЧасти.Товары.Реквизиты.Сделка.Тип");
	СторонаСчета = 1;
	ПараметрыОбъекта.Вставить("СчетДляОпределенияОстатков", "СчетДляОпределенияОстатков");
	ПараметрыОбъекта.Вставить("СторонаСчета",               "СторонаСчета");

	ПараметрыФормы = Новый Структура("ПараметрыОбъекта", ПараметрыОбъекта);
	ОткрытьФорму("Документ.ДокументРасчетовСКонтрагентом.ФормаВыбора", ПараметрыФормы, Элемент);
		
КонецПроцедуры

&НаКлиенте
Процедура ТоварыДоговорКонтрагентаПриИзменении(Элемент)
	
	СтрокаТаблицы = Элементы.Товары.ТекущиеДанные;

	Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ДоговорКонтрагента) Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеСтрокиТабличнойЧасти = Новый Структура(
		"Контрагент, ДоговорКонтрагента, Сделка, ДоговорКонтрагентаВедениеВзаиморасчетов");
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТабличнойЧасти, Объект);
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТабличнойЧасти, СтрокаТаблицы);

	ТоварыДоговорКонтрагентаПриИзмененииНаСервере(ДанныеСтрокиТабличнойЧасти);
	
	ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ДанныеСтрокиТабличнойЧасти);
	
	Элементы.ТоварыСделка.Доступность = ДанныеСтрокиТабличнойЧасти.ДоговорКонтрагентаВедениеВзаиморасчетов = ПредопределенноеЗначение("Перечисление.ВедениеВзаиморасчетовПоДоговорам.ПоРасчетнымДокументам") ;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ТоварыДоговорКонтрагентаПриИзмененииНаСервере(СтрокаТаблицы)
	
	РеквизитыДоговораКонтрагента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СтрокаТаблицы.ДоговорКонтрагента, "Владелец, ВалютаВзаиморасчетов, ВедениеВзаиморасчетов");
	
	Если ЗначениеЗаполнено(СтрокаТаблицы.ДоговорКонтрагента) И НЕ ЗначениеЗаполнено(СтрокаТаблицы.Контрагент) Тогда
		СтрокаТаблицы.Контрагент = РеквизитыДоговораКонтрагента.Владелец;
	КонецЕсли;
		
	СтрокаТаблицы.Сделка = Неопределено;
	
	// Заполним зависимые добавленные колонки
	ДоговорУказан = ЗначениеЗаполнено(СтрокаТаблицы.ДоговорКонтрагента);
	СтрокаТаблицы.ДоговорКонтрагентаВедениеВзаиморасчетов = ?(ДоговорУказан, РеквизитыДоговораКонтрагента.ВедениеВзаиморасчетов, Неопределено);
	
КонецПроцедуры

#КонецОбласти  

#Область ОбработчикиСобытийЭлементовТаблицыФормыУслуги

&НаКлиенте
Процедура УслугиПриИзменении(Элемент)
	
	ОбновитьИтоги(ЭтаФорма);
	
	// Авторасчет НДС
	ПерерасчетПроизведен = Ложь;  

КонецПроцедуры  

&НаКлиенте
Процедура УслугиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура УслугиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущиеДанные = Элементы.Услуги.ТекущиеДанные;
	
	Если НоваяСтрока И НЕ Копирование Тогда
		
		ТекущиеДанные.Номенклатура                      = Объект.Номенклатура;
		ТекущиеДанные.Содержание                        = ПолучитьЗначениеРеквизита(Объект.Номенклатура, "НаименованиеПолное");
		ТекущиеДанные.НалоговоеНазначение               = Объект.НалоговоеНазначение;
		ТекущиеДанные.НалоговоеНазначениеДоходовИЗатрат = Объект.НалоговоеНазначениеДоходовИЗатрат;
		ТекущиеДанные.СхемаРеализации                   = Объект.СхемаРеализации;
		ТекущиеДанные.СтавкаНДС                         = Объект.СтавкаНДС;
		
	КонецЕсли;

	УправлениеФормой(ЭтаФорма); 	

КонецПроцедуры

&НаКлиенте
Процедура УслугиПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если НоваяСтрока И ОтменаРедактирования Тогда
		ОбновитьИтоги(ЭтаФорма);
		// Авторасчет НДС
		ПерерасчетПроизведен = Ложь;     
	КонецЕсли;  
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиПослеУдаления(Элемент)
	
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура УслугиКонтрагентПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Услуги.ТекущиеДанные;
	
	УслугиКонтрагентПриИзмененииНаСервере(ТекущиеДанные.ДоговорКонтрагента, ТекущиеДанные.Контрагент, Объект.Организация); 
	
КонецПроцедуры    

&НаСервереБезКонтекста
Процедура УслугиКонтрагентПриИзмененииНаСервере(ДоговорКонтрагента, Контрагент, Организация)
	
	СписокВидовДоговоров = Новый СписокЗначений;
	СписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.ИНАГРО_АрендаЗемли);
	СписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.ИНАГРО_АрендаИмущества);
	СписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПокупателем);
	
	БухгалтерскийУчетПереопределяемый.УстановитьДоговорКонтрагента(ДоговорКонтрагента, Контрагент, Организация,СписокВидовДоговоров); 

КонецПроцедуры  

&НаКлиенте
Процедура УслугиДоговорКонтрагентаПриИзменении(Элемент)
	
	СтрокаТаблицы = Элементы.Услуги.ТекущиеДанные;

	Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ДоговорКонтрагента) Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеСтрокиТабличнойЧасти = Новый Структура(
		"Контрагент, ДоговорКонтрагента, Сделка, ДоговорКонтрагентаВедениеВзаиморасчетов");
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТабличнойЧасти, Объект);
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТабличнойЧасти, СтрокаТаблицы);

	УслугиДоговорКонтрагентаПриИзмененииНаСервере(ДанныеСтрокиТабличнойЧасти);
	
	ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ДанныеСтрокиТабличнойЧасти);
	
	Элементы.ТоварыСделка.Доступность = ДанныеСтрокиТабличнойЧасти.ДоговорКонтрагентаВедениеВзаиморасчетов = ПредопределенноеЗначение("Перечисление.ВедениеВзаиморасчетовПоДоговорам.ПоРасчетнымДокументам") ;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УслугиДоговорКонтрагентаПриИзмененииНаСервере(СтрокаТаблицы)
	
	РеквизитыДоговораКонтрагента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СтрокаТаблицы.ДоговорКонтрагента, "Владелец, ВалютаВзаиморасчетов, ВедениеВзаиморасчетов");
	
	Если ЗначениеЗаполнено(СтрокаТаблицы.ДоговорКонтрагента) И НЕ ЗначениеЗаполнено(СтрокаТаблицы.Контрагент) Тогда
		СтрокаТаблицы.Контрагент = РеквизитыДоговораКонтрагента.Владелец;
	КонецЕсли;
		
	СтрокаТаблицы.Сделка = Неопределено;
	
	// Заполним зависимые добавленные колонки
	ДоговорУказан = ЗначениеЗаполнено(СтрокаТаблицы.ДоговорКонтрагента);
	СтрокаТаблицы.ДоговорКонтрагентаВедениеВзаиморасчетов = ?(ДоговорУказан, РеквизитыДоговораКонтрагента.ВедениеВзаиморасчетов, Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиКоличествоПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Услуги.ТекущиеДанные;		
	
	ОбработкаТабличныхЧастейКлиентСервер.ПриИзмененииКоличествоЦена(ЭтаФорма, "Услуги");
	
	РассчитатьНДФЛНаСервере(ТекущиеДанные.Контрагент); 				
	
КонецПроцедуры 
	
&НаКлиенте
Процедура УслугиЦенаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Услуги.ТекущиеДанные;
	
	ОбработкаТабличныхЧастейКлиентСервер.ПриИзмененииКоличествоЦена(ЭтаФорма, "Услуги");

	РассчитатьНДФЛНаСервере(ТекущиеДанные.Контрагент); 

КонецПроцедуры  

&НаКлиенте
Процедура УслугиСуммаПриИзменении(Элемент)
		
	ТекущиеДанные = Элементы.Услуги.ТекущиеДанные;	
		
	ОбработкаТабличныхЧастейКлиентСервер.ПриИзмененииСумма(ЭтаФорма, "Услуги");

	РассчитатьНДФЛНаСервере(ТекущиеДанные.Контрагент)			
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиСтавкаНДСПриИзменении(Элемент)
	 	
	ТекущиеДанные = Элементы.Услуги.ТекущиеДанные;	
	
	ОбработкаТабличныхЧастейКлиентСервер.ПриИзмененииСтавкаНДС(ЭтаФорма, "Услуги");

	РассчитатьНДФЛНаСервере(ТекущиеДанные.Контрагент); 

КонецПроцедуры

&НаКлиенте
Процедура УслугиНоменклатураПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Услуги.ТекущиеДанные;
	
	ДанныеСтрокиТаблицы = Новый Структура(
		"Номенклатура,Содержание, СхемаРеализации, СтавкаНДС, 
		|НалоговоеНазначение, НалоговоеНазначениеДоходовИЗатрат, Контрагент"); 
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, ТекущиеДанные);
	
	ДанныеОбъекта = Новый Структура("Дата, Организация, Склад"); 		
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
	УслугиНоменклатураПриИзмененииНаСервере(ДанныеСтрокиТаблицы, ДанныеОбъекта);
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтрокиТаблицы);  		
	
	ОбработкаТабличныхЧастейКлиентСервер.ПриИзмененииСтавкаНДС(ЭтаФорма, "Услуги"); 

	РассчитатьНДФЛНаСервере(ДанныеСтрокиТаблицы.Контрагент); 

КонецПроцедуры

&НаСервереБезКонтекста
Процедура УслугиНоменклатураПриИзмененииНаСервере(СтрокаТабличнойЧасти, Знач ДанныеОбъекта)
	
	СведенияОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОНоменклатуре(СтрокаТабличнойЧасти.Номенклатура, ДанныеОбъекта);
	
	Если СведенияОНоменклатуре = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаТабличнойЧасти.Содержание			                = СведенияОНоменклатуре.НаименованиеПолное;
	СтрокаТабличнойЧасти.СхемаРеализации		            = СведенияОНоменклатуре.СчетаУчета.СхемаРеализации;		
	СтрокаТабличнойЧасти.НалоговоеНазначение			    = СведенияОНоменклатуре.СчетаУчета.НалоговоеНазначение;
	СтрокаТабличнойЧасти.НалоговоеНазначениеДоходовИЗатрат	= СведенияОНоменклатуре.СчетаУчета.НалоговоеНазначениеДоходовИЗатрат; 		
	СтрокаТабличнойЧасти.СтавкаНДС		            		= СведенияОНоменклатуре.СтавкаНДС;		
	
КонецПроцедуры 

&НаКлиенте
Процедура УслугиСделкаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.Услуги.ТекущиеДанные;

	// Без договора сделку выбирать не будем.
	Если НЕ ЗначениеЗаполнено(ТекущиеДанные.ДоговорКонтрагента) Тогда
		ТекстСообщения = НСтр("ru='Не выбран договор контрагента!';uk='Не обраний договір контрагента!'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Услуги[" + (ТекущиеДанные.НомерСтроки - 1) + "].ДоговорКонтрагента", "Объект");
		Возврат;
	КонецЕсли; 
	
	ПараметрыОбъекта = Новый Структура;
	ПараметрыОбъекта.Вставить("КонецПериода",               Объект.Дата - 1);
	ПараметрыОбъекта.Вставить("ДоговорКонтрагента",         ТекущиеДанные.ДоговорКонтрагента);
	ПараметрыОбъекта.Вставить("Контрагент",                 ТекущиеДанные.Контрагент);
	ПараметрыОбъекта.Вставить("Организация",                Объект.Организация);
	ПараметрыОбъекта.Вставить("ТипыДокументов",             "Метаданные.Документы.ИНАГРО_ВедомостьРеализация.ТабличныеЧасти.Услуги.Реквизиты.Сделка.Тип");
	СторонаСчета = 1;
	ПараметрыОбъекта.Вставить("СчетДляОпределенияОстатков", "СчетДляОпределенияОстатков");
	ПараметрыОбъекта.Вставить("СторонаСчета",               "СторонаСчета");

	ПараметрыФормы = Новый Структура("ПараметрыОбъекта", ПараметрыОбъекта);
	ОткрытьФорму("Документ.ДокументРасчетовСКонтрагентом.ФормаВыбора", ПараметрыФормы, Элемент);
		
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// Заполнить

&НаКлиенте
Процедура ЗаполнитьКонтрагентыВошедшиеВГруппу(Команда)
	
	Если Объект[ИмяТабличнойЧасти].Количество()> 0 Тогда
		ТекстВопроса = НСтр("ru='Табличная часть будет очищена. Продолжить?';uk='Таблична частина буде очищена. Продовжити?'");
		Оповещение = Новый ОписаниеОповещения("ЗаполнитьКонтрагентыВошедшиеВГруппуЗавершение", ЭтотОбъект, Параметры);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);  
	Иначе
		ЗаполнитьТабличнуюЧасть("ЗаполнитьКонтрагентыВошедшиеВГруппу");
	КонецЕсли; 	
	
КонецПроцедуры  

&НаКлиенте
Процедура ЗаполнитьКонтрагентыВошедшиеВГруппуЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
   	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда		 
		Возврат;
	КонецЕсли; 
	
	Объект[ИмяТабличнойЧасти].Очистить();
	
	ЗаполнитьТабличнуюЧасть("ЗаполнитьКонтрагентыВошедшиеВГруппу"); 	 
				
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьКонтрагентыТолькоСУказаннойДолейПая(Команда)
	
	Если Объект[ИмяТабличнойЧасти].Количество()> 0 Тогда
		ТекстВопроса = НСтр("ru='Табличная часть будет очищена. Продолжить?';uk='Таблична частина буде очищена. Продовжити?'");
		Оповещение = Новый ОписаниеОповещения("ЗаполнитьКонтрагентыТолькоСУказаннойДолейПаяЗавершение", ЭтотОбъект, Параметры);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);  
	Иначе
		ЗаполнитьКонтрагентыТолькоСУказаннойДолейПаяВводЧисла();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьКонтрагентыТолькоСУказаннойДолейПаяЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда 		  
		Возврат;
	КонецЕсли;
	
	Объект[ИмяТабличнойЧасти].Очистить();  
	
	ЗаполнитьКонтрагентыТолькоСУказаннойДолейПаяВводЧисла();

КонецПроцедуры 

&НаКлиенте
Процедура ЗаполнитьКонтрагентыТолькоСУказаннойДолейПаяВводЧисла()
	
	Доля = 0;	
	Оповещение = Новый ОписаниеОповещения("ЗаполнитьКонтрагентыТолькоСУказаннойДолейПаяВводЧислаЗавершение", ЭтотОбъект, Параметры);
	ПоказатьВводЧисла(Оповещение, Доля, НСтр("ru='Введите требуемую долю пая';uk='Введіть потрібну долю паю'"), 10, 6);

КонецПроцедуры 

&НаКлиенте
Процедура ЗаполнитьКонтрагентыТолькоСУказаннойДолейПаяВводЧислаЗавершение(Доля, ДополнительныеПараметры) Экспорт
	
	Если Доля = 0 Тогда
		Возврат
	КонецЕсли; 	
	
	ЗаполнитьТабличнуюЧасть("ЗаполнитьКонтрагентыТолькоСУказаннойДолейПая", Доля);	

КонецПроцедуры   

&НаКлиенте
Процедура ЗаполнитьСотрудникиПоПодразделению(Команда)
	
	Если Объект[ИмяТабличнойЧасти].Количество()> 0 Тогда
		ТекстВопроса = НСтр("ru='Табличная часть будет очищена. Продолжить?';uk='Таблична частина буде очищена. Продовжити?'");
		Оповещение = Новый ОписаниеОповещения("ЗаполнитьСотрудникиПоПодразделениюЗавершение", ЭтотОбъект, Параметры);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);  
	Иначе
		ЗаполнитьСотрудникиПоПодразделениюВыборПодразделения();
	КонецЕсли; 	

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСотрудникиПоПодразделениюЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
   	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда 		
		Возврат;
	КонецЕсли; 
	
	Объект[ИмяТабличнойЧасти].Очистить(); 
	
	ЗаполнитьСотрудникиПоПодразделениюВыборПодразделения();
				
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСотрудникиПоПодразделениюВыборПодразделения()
   	
   	ПараметрыОтбора = Новый Структура;	
	ПараметрыОтбора.Вставить("Владелец", Объект.Организация); 
		
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Отбор", 	   ПараметрыОтбора);		
	ПараметрыФормы.Вставить("РежимВыбора", Истина); 	
		
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ЗаполнитьСотрудникиПоПодразделениюВыборПодразделенияЗавершение", ЭтотОбъект);
	
	ОткрытьФорму("Справочник.ПодразделенияОрганизаций.Форма.ФормаВыбора", ПараметрыФормы, , , , , ОповещениеОЗакрытии);
			
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСотрудникиПоПодразделениюВыборПодразделенияЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
		
	Если РезультатЗакрытия <> Неопределено Тогда 		
		ЗаполнитьТабличнуюЧасть("ЗаполнитьСотрудникиПоПодразделению", , РезультатЗакрытия);	
	КонецЕсли;  	
			
КонецПроцедуры  

&НаКлиенте
Процедура ЗаполнитьКонтрагентыВПроизвольномСписке(Команда)
	
	Если Объект[ИмяТабличнойЧасти].Количество()> 0 Тогда
		ТекстВопроса = НСтр("ru='Табличная часть будет очищена. Продолжить?';uk='Таблична частина буде очищена. Продовжити?'");
		Оповещение = Новый ОписаниеОповещения("ЗаполнитьКонтрагентыВПроизвольномСпискеЗавершение", ЭтотОбъект, Параметры);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);   	
	КонецЕсли;  	
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьКонтрагентыВПроизвольномСпискеЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда		
		Возврат;
	КонецЕсли;      	
	
	ЗаполнитьТабличнуюЧасть("ЗаполнитьКонтрагентыВПроизвольномСписке"); 	

КонецПроцедуры 

&НаКлиенте
Процедура ЗаполнитьКонтрагентыВСтроке(Команда)
	
	Если Объект.ЭтоУслуга Тогда
		ТекущиеДанные = Элементы.Услуги.ТекущиеДанные;  
	Иначе
		ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ТекущиеДанные.Контрагент) Тогда 
		ТекстСообщения = НСтр("ru='Не заполнен Контрагент в строке!';uk='Не заповнений Контрагент у рядку!'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ТекущиеДанные.ДоговорКонтрагента) Тогда 
		ТекстСообщения = НСтр("ru='Не заполнен Договор контрагента в строке!';uk='Не заповнений Договір контрагента у рядку!'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат
	КонецЕсли;
	
	ДанныеСтрокиТаблицы = Новый Структура(
		"Контрагент, ДоговорКонтрагента, Участок, ПлощадьПоКадастру,
		|ДоляПая, НормативнаяОценкаЗемли, ПроцентВыплаты,
		|СуммаАренднойПлаты, УдержаноНДФЛ, УдержаноВС,
		|Сумма, Доход"); 
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, ТекущиеДанные);
	
	ДанныеОбъекта = Новый Структура("Дата, ВидДоговоров"); 		
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект); 	
	
	ЗаполнитьКонтрагентыВСтрокеНаСервере(ДанныеСтрокиТаблицы, ДанныеОбъекта);
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтрокиТаблицы);  

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьКонтрагентыВСтрокеНаСервере(СтрокаТабличнойЧасти, Знач ДанныеОбъекта)
	
	АрендаИмущества = (ДанныеОбъекта.ВидДоговоров = Перечисления.ВидыДоговоровКонтрагентов.ИНАГРО_АрендаИмущества); 	
	
	Если АрендаИмущества Тогда 
		
		СтрокаТабличнойЧасти.ДоляПая           = СтрокаТабличнойЧасти.ДоговорКонтрагента.ИНАГРО_ДоляИмущественногоПая;
		СтрокаТабличнойЧасти.СуммаАренднойПлаты = СтрокаТабличнойЧасти.ДоговорКонтрагента.ИНАГРО_СтоимостьПая;
		
	Иначе
		
		Запрос = Новый Запрос;

		Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			|	ДоговорыКонтрагентов.Владелец КАК Контрагент,
			|	ДоговорыКонтрагентов.Ссылка КАК ДоговорКонтрагента,
			|	ДоговорыКонтрагентов.Владелец.Наименование,
			|	ИНАГРО_НормативнаяОценкаЗемлиСрезПоследних.ДоляЗемельногоПая КАК ДоляПая,
			|	ИНАГРО_НормативнаяОценкаЗемлиСрезПоследних.СуммаАренднойПлаты,
			|	ИНАГРО_НормативнаяОценкаЗемлиСрезПоследних.НормативнаяОценкаЗемли,
			|	ИНАГРО_НормативнаяОценкаЗемлиСрезПоследних.ПроцентВыплаты,
			|	ИНАГРО_НормативнаяОценкаЗемлиСрезПоследних.Участок,
			|	ИНАГРО_НормативнаяОценкаЗемлиСрезПоследних.Участок.ПлощадьПоКадастру КАК ПлощадьПоКадастру 
			|ИЗ
			|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИНАГРО_НормативнаяОценкаЗемли.СрезПоследних(&Дата, Актуальность = ИСТИНА) КАК ИНАГРО_НормативнаяОценкаЗемлиСрезПоследних
			|		ПО (ИНАГРО_НормативнаяОценкаЗемлиСрезПоследних.Договор = ДоговорыКонтрагентов.Ссылка)
			|ГДЕ
			|	ДоговорыКонтрагентов.Ссылка = &ДоговорКонтрагента
			|	И ИНАГРО_НормативнаяОценкаЗемлиСрезПоследних.Участок = &Участок"; 		
		
		Запрос.УстановитьПараметр("Дата",               ДанныеОбъекта.Дата);
		Запрос.УстановитьПараметр("ДоговорКонтрагента", СтрокаТабличнойЧасти.ДоговорКонтрагента);
		Запрос.УстановитьПараметр("Участок",            СтрокаТабличнойЧасти.Участок);
		
		ВыборкаКонтрагентов = Запрос.Выполнить().Выбрать();
		
		Пока ВыборкаКонтрагентов.Следующий() Цикл 
			ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ВыборкаКонтрагентов);		
		КонецЦикла;		
		
	КонецЕсли;  
		
	// Надо будет все пересчитать
	СтрокаТабличнойЧасти.УдержаноНДФЛ = 0;
	СтрокаТабличнойЧасти.УдержаноВС   = 0;
	СтрокаТабличнойЧасти.Сумма        = 0;
	СтрокаТабличнойЧасти.Доход        = 0;     
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьТабличнуюЧасть(Команда)
	
	Если Объект[ИмяТабличнойЧасти].Количество()> 0 Тогда
		ТекстВопроса = НСтр("ru='Табличная часть будет очищена. Продолжить?';uk='Таблична частина буде очищена. Продовжити?'");
		Оповещение = Новый ОписаниеОповещения("ОчиститьТабличнуюЧастьЗавершение", ЭтотОбъект,Параметры);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);  	
	КонецЕсли; 	
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьТабличнуюЧастьЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
   	
    Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда 		
		Возврат;
	КонецЕсли;
	
	Объект[ИмяТабличнойЧасти].Очистить(); 
	
	УправлениеФормой(ЭтаФорма);  
			
КонецПроцедуры  

// Конец Заполнить

// Установить 

&НаКлиенте
Процедура УстановитьВсемОдноКоличество(Команда)
	
	Если Объект[ИмяТабличнойЧасти].Количество()> 0 Тогда
		ТекстВопроса = НСтр("ru='Установить всем одинаковое количество?';uk='Встановити всім однакову кількість?'");
		Оповещение = Новый ОписаниеОповещения("УстановитьВсемОдноКоличествоЗавершение", ЭтотОбъект, Параметры);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);  	
	КонецЕсли; 		
		
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВсемОдноКоличествоЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
   	
    Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда 		
		Возврат;
	КонецЕсли;
	
	Количество = 0;	
	Оповещение = Новый ОписаниеОповещения("УстановитьВсемОдноКоличествоПослеВводаКоличестваЗавершение", ЭтотОбъект, Параметры);
	ПоказатьВводЧисла(Оповещение, Количество, НСтр("ru='Введите количество';uk='Введіть кількість'"), 12, 3);  
			
КонецПроцедуры  

&НаКлиенте
Процедура УстановитьВсемОдноКоличествоПослеВводаКоличестваЗавершение(Количество, ДополнительныеПараметры) Экспорт	
	
	Если Количество = 0 Тогда
		Возврат
	КонецЕсли; 	  
	
	Для Каждого СтрокаТабличнойЧасти Из Объект[ИмяТабличнойЧасти] Цикл
		
		СтрокаТабличнойЧасти.Количество = Количество;
		
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, , , , Объект.РасхождениеКоличества);
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, Объект.СуммаВключаетНДС);
		
		ЗаполнитьКолонкуВсего(СтрокаТабличнойЧасти, Объект.СуммаВключаетНДС); 
		
	КонецЦикла;	 
	
	РассчитатьНДФЛНаСервере();	
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВсемОднуЦену(Команда)
	
	Если Объект[ИмяТабличнойЧасти].Количество()> 0 Тогда
		ТекстВопроса = НСтр("ru='Установить всем одинаковую цену?';uk='Встановити всім однакову ціну?'");
		Оповещение = Новый ОписаниеОповещения("УстановитьВсемОднуЦенуЗавершение", ЭтотОбъект, Параметры);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);  	
	КонецЕсли; 			

КонецПроцедуры

&НаКлиенте
Процедура УстановитьВсемОднуЦенуЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
   	
    Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда 		
		Возврат;
	КонецЕсли;
	
	Цена = 0;	
	Оповещение = Новый ОписаниеОповещения("УстановитьВсемОднуЦенуПослеВводаЦеныЗавершение", ЭтотОбъект, Параметры);
	ПоказатьВводЧисла(Оповещение, Цена, НСтр("ru='Введите цену';uk='Введіть ціну'"), 12, 2);  
			
КонецПроцедуры  

&НаКлиенте
Процедура УстановитьВсемОднуЦенуПослеВводаЦеныЗавершение(Цена, ДополнительныеПараметры) Экспорт
	
	Если Цена = 0 Тогда
		Возврат
	КонецЕсли; 	

	Если Объект.СтавкаНДС <> ПредопределенноеЗначение("Перечисление.СтавкиНДС.ПустаяСсылка") Тогда  			
				
		Для Каждого СтрокаТабличнойЧасти Из Объект[ИмяТабличнойЧасти] Цикл
			
			СтрокаТабличнойЧасти.СтавкаНДС = Объект.СтавкаНДС;	
			СтрокаТабличнойЧасти.Цена      = Цена;
			
			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, , , , Объект.РасхождениеКоличества);
			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, Объект.СуммаВключаетНДС);	
			
			ЗаполнитьКолонкуВсего(СтрокаТабличнойЧасти, Объект.СуммаВключаетНДС); 			
						
		КонецЦикла;	 
		
		РассчитатьНДФЛНаСервере();
		
	КонецЕсли; 	  	
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьКоличествоОтДолиПая(Команда)
	
	Если Объект[ИмяТабличнойЧасти].Количество()> 0 Тогда
		ТекстВопроса = НСтр("ru='Установить всем количество от доли пая?';uk='Встановити всім кількість від частки паю?'");
		Оповещение = Новый ОписаниеОповещения("УстановитьКоличествоОтДолиПаяЗавершение", ЭтотОбъект, Параметры);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);  	
	КонецЕсли; 	
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьКоличествоОтДолиПаяЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
   	
    Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда 		
		Возврат;
	КонецЕсли;
	
	КоличествоНаПай = 0;	
	Оповещение = Новый ОписаниеОповещения("УстановитьКоличествоОтДолиПаяПослеВводаКоличестваНаПайЗавершение", ЭтотОбъект, Параметры);
	ПоказатьВводЧисла(Оповещение, КоличествоНаПай, НСтр("ru='Введите количество на один пай';uk='Введіть кількість на один пай'"), 12, 3);  
			
КонецПроцедуры  

&НаКлиенте
Процедура УстановитьКоличествоОтДолиПаяПослеВводаКоличестваНаПайЗавершение(КоличествоНаПай, ДополнительныеПараметры) Экспорт
	
	Если КоличествоНаПай = 0 Тогда
		Возврат
	КонецЕсли; 	
			
	Для Каждого СтрокаТабличнойЧасти Из Объект[ИмяТабличнойЧасти] Цикл
		
		СтрокаТабличнойЧасти.Количество = КоличествоНаПай * СтрокаТабличнойЧасти.ДоляПая;
		
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, , , , Объект.РасхождениеКоличества);
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, Объект.СуммаВключаетНДС);  
		
		ЗаполнитьКолонкуВсего(СтрокаТабличнойЧасти, Объект.СуммаВключаетНДС);
		
	КонецЦикла;	 
	
	РассчитатьНДФЛНаСервере(); 	

КонецПроцедуры

&НаКлиенте
Процедура УстановитьКоличествоОтПлощадиПоКадастру(Команда)
	
	Если Объект[ИмяТабличнойЧасти].Количество()> 0 Тогда
		ТекстВопроса = НСтр("ru='Установить всем количество от площади по кадастру?';uk='Встановити всім кількість від площі по кадастру?'");
		Оповещение = Новый ОписаниеОповещения("УстановитьКоличествоОтПлощадиПоКадаструЗавершение", ЭтотОбъект, Параметры);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);  	
	КонецЕсли; 	

КонецПроцедуры

&НаКлиенте
Процедура УстановитьКоличествоОтПлощадиПоКадаструЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
   	
    Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда 		
		Возврат;
	КонецЕсли;
	
	Площадь = 0;	
	Оповещение = Новый ОписаниеОповещения("УстановитьКоличествоОтПлощадиПоКадаструПослеВводаПлощадиЗавершение", ЭтотОбъект, Параметры);
	ПоказатьВводЧисла(Оповещение, Площадь, НСтр("ru='Введите площадь по кадастру на один пай';uk='Введіть площу по кадастру на один пай'"), 12, 2);	
				
КонецПроцедуры  

&НаКлиенте
Процедура УстановитьКоличествоОтПлощадиПоКадаструПослеВводаПлощадиЗавершение(Площадь, ДополнительныеПараметры) Экспорт
	
	Если Площадь = 0 Тогда
		Возврат
	КонецЕсли; 	
	
	КоличествоНаПай = 0;
	ДополнительныеПараметры = Новый Структура("Площадь", Площадь);
	Оповещение = Новый ОписаниеОповещения("УстановитьКоличествоОтПлощадиПоКадаструПослеВводаКоличестваНаПайЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ПоказатьВводЧисла(Оповещение, КоличествоНаПай, НСтр("ru='Введите количество на один пай';uk='Введіть кількість на один пай'"), 12, 3);   		

КонецПроцедуры

&НаКлиенте
Процедура УстановитьКоличествоОтПлощадиПоКадаструПослеВводаКоличестваНаПайЗавершение(КоличествоНаПай, ДополнительныеПараметры) Экспорт
	
	Если КоличествоНаПай = 0 Тогда
		Возврат
	КонецЕсли; 			
		
	Для Каждого СтрокаТабличнойЧасти Из Объект[ИмяТабличнойЧасти] Цикл
		
		СтрокаТабличнойЧасти.Количество = Окр(КоличествоНаПай * СтрокаТабличнойЧасти.ПлощадьПоКадастру / ДополнительныеПараметры.Площадь, 3);
		
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, , , , Объект.РасхождениеКоличества);
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, Объект.СуммаВключаетНДС);  
		
		ЗаполнитьКолонкуВсего(СтрокаТабличнойЧасти, Объект.СуммаВключаетНДС);
		
	КонецЦикла;	 
	
	РассчитатьНДФЛНаСервере(); 	
	
КонецПроцедуры

// Конец Установить

&НаКлиенте
Процедура РассчитатьНДФЛ(Команда)
	
	Если Объект[ИмяТабличнойЧасти].Количество()> 0 Тогда
		ТекстВопроса = НСтр("ru='Пересчитать суммы НДФЛ в строках?';uk='Перерахувати суми ПДФО в рядках?'"); 		 
		Оповещение = Новый ОписаниеОповещения("РассчитатьНДФЛЗавершение", ЭтотОбъект, Параметры);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да); 	
	КонецЕсли; 
	
КонецПроцедуры    

&НаКлиенте
Процедура РассчитатьНДФЛЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
   	
    Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда 		
		Возврат;
	КонецЕсли;  
	
	РассчитатьНДФЛНаСервере();
			
КонецПроцедуры  

#КонецОбласти 

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ПодготовитьФормуНаСервере()
	
	ТекущаяДатаДокумента = Объект.Дата; 	
		
	УстановитьФункциональныеОпцииФормы();

	ИзменитьПараметрыВыбораПолейСубконто(ЭтотОбъект);	
	
	ВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета(); 	
		
	УстановитьВидимостьСтраницНаСервере();
		
	УправлениеФормой(ЭтаФорма);   	
		
	УстановитьЗаголовокФормы();
	
	УстановитьЗаголовкиКолонок(); 
	
	УстановитьСостояниеДокумента();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьФункциональныеОпцииФормы()

	ОбщегоНазначенияБПКлиентСервер.УстановитьПараметрыФункциональныхОпцийФормыДокумента(ЭтаФорма); 	
			
	ПлательщикНДС                   = УчетнаяПолитика.ПлательщикНДС(Объект.Организация, Объект.Дата);
	ПлательщикНалогаНаПрибыльДо2015 = УчетнаяПолитика.ПлательщикНалогаНаПрибыльДо2015(Объект.Организация, Объект.Дата);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)

	Элементы = Форма.Элементы;
	Объект   = Форма.Объект; 
	
	ВСчетЗарплаты = (Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ИНАГРО_ВидыОперацийРеализации.ВСчетЗарплаты"));
	Реализация    = (Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ИНАГРО_ВидыОперацийРеализации.РеализацияПрочая"));
	ВСчетПая      = (Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ИНАГРО_ВидыОперацийРеализации.ВСчетПая"));
	
	Элементы.ГруппаКонтрагентов.Доступность = ВСчетПая ИЛИ Реализация;

	Элементы.Номенклатура.Видимость 	    = НЕ Объект.НоменклатураВТЧ;
	Элементы.ЕдиницаИзмерения.Видимость     = НЕ Объект.НоменклатураВТЧ;
	Элементы.Коэффициент.Видимость 		    = НЕ Объект.НоменклатураВТЧ;
	Элементы.СхемаРеализации.Видимость 	    = НЕ Объект.НоменклатураВТЧ;
	Элементы.НалоговоеНазначение.Видимость  = НЕ Объект.НоменклатураВТЧ;			
	Элементы.СуммаСписания.Доступность      = Объект.УказатьСуммуСписания;
	
	Элементы.ЭтоУслуга.Доступность          = Объект.НоменклатураВТЧ;
	Элементы.ФормироватьОднуНН.Видимость    = ВСчетПая ИЛИ Реализация;  
	
	Элементы.МесяцВыплаты.Видимость         = ВСчетЗарплаты;
	Элементы.СчетУчетаБУ.Видимость          = НЕ Объект.ЭтоУслуга;
	
	Элементы.ГруппаНачисленияИУдержания.Видимость           = ВСчетПая;
	Элементы.ГруппаНДФЛ.Доступность                         = Объект.НачислятьНДФЛ;
	Элементы.ГруппаВоенныйСбор.Доступность                  = Объект.НачислятьНДФЛ;
	Элементы.ГруппаСчетВзаиморасчетовСчетЗатрат.Доступность = Объект.НачислятьНДФЛ;
	Элементы.ГруппаСчетЗатратСубконто.Доступность           = Объект.НачислятьПоПаям;                                   
	
	// Таблица Товары

	Элементы.ТоварыСотрудник.Видимость           = ВСчетЗарплаты;
	Элементы.ТоварыКонтрагент.Видимость          = НЕ ВСчетЗарплаты;
	Элементы.ТоварыДоговорКонтрагента.Видимость  = НЕ ВСчетЗарплаты;
	Элементы.ТоварыСделка.Видимость  			 = Реализация;
	Элементы.ТоварыДоляПая.Видимость             = ВСчетПая;
	Элементы.ТоварыУчасток.Видимость             = ВСчетПая;
	Элементы.ТоварыПлощадьПоКадастру.Видимость   = ВСчетПая;
	Элементы.ТоварыНовоеКоличество.Видимость     = Объект.РасхождениеКоличества;	
	Элементы.ТоварыДоход.Видимость               = ВСчетПая;
	Элементы.ТоварыУдержаноНДФЛ.Видимость        = ВСчетПая;
	Элементы.ТоварыУдержаноВС.Видимость          = ВСчетПая;
	Элементы.ТоварыНоменклатура.Видимость        = Объект.НоменклатураВТЧ;
	Элементы.ТоварыЕдиницаИзмерения.Видимость    = Объект.НоменклатураВТЧ;
	Элементы.ТоварыКоэффициент.Видимость         = Объект.НоменклатураВТЧ;
	Элементы.ТоварыСхемаРеализации.Видимость     = Объект.НоменклатураВТЧ;
	Элементы.ТоварыНалоговоеНазначение.Видимость = Объект.НоменклатураВТЧ;
	
	// Таблица Услуги
	
	Элементы.УслугиСотрудник.Видимость           = ВСчетЗарплаты;
	Элементы.УслугиКонтрагент.Видимость          = НЕ ВСчетЗарплаты;
	Элементы.УслугиДоговорКонтрагента.Видимость  = НЕ ВСчетЗарплаты;
	Элементы.УслугиДоляПая.Видимость             = ВСчетПая;
	Элементы.УслугиУчасток.Видимость             = ВСчетПая;
	Элементы.УслугиПлощадьПоКадастру.Видимость   = ВСчетПая;
	Элементы.УслугиДоход.Видимость               = ВСчетПая;
	Элементы.УслугиУдержаноНДФЛ.Видимость        = ВСчетПая;
	Элементы.УслугиУдержаноВС.Видимость          = ВСчетПая;
	Элементы.УслугиНоменклатура.Видимость        = Объект.НоменклатураВТЧ;
	Элементы.УслугиСхемаРеализации.Видимость     = Объект.НоменклатураВТЧ;
	Элементы.УслугиНалоговоеНазначение.Видимость = Объект.НоменклатураВТЧ; 
	
	// Команды таблицы Товары
	
	Элементы.ТоварыЗаполнитьКонтрагентыВошедшиеВГруппу.Доступность          = НЕ ВСчетЗарплаты И ЗначениеЗаполнено(Объект.ГруппаКонтрагентов);
	Элементы.ТоварыЗаполнитьКонтрагентыТолькоСУказаннойДолейПая.Доступность = ВСчетПая; 	
	Элементы.ТоварыЗаполнитьСотрудникиПоПодразделению.Доступность           = ВСчетЗарплаты;	
	Элементы.ТоварыЗаполнитьКонтрагентыВПроизвольномСписке.Доступность      = НЕ ВСчетЗарплаты И Объект.Товары.Количество() > 0;
	Элементы.ТоварыЗаполнитьКонтрагентыВСтроке.Доступность                  = НЕ ВСчетЗарплаты И Объект.Товары.Количество() > 0;    	
	Элементы.ТоварыРассчитатьНДФЛ.Доступность                               = Объект.НачислятьНДФЛ;    
	Элементы.ГруппаТоварыУстановить.Доступность							    = Объект.Товары.Количество() > 0;			
	
	// Команды таблицы Услуги
	
	Элементы.УслугиЗаполнитьКонтрагентыВошедшиеВГруппу.Доступность          = НЕ ВСчетЗарплаты И ЗначениеЗаполнено(Объект.ГруппаКонтрагентов);
	Элементы.УслугиЗаполнитьКонтрагентыТолькоСУказаннойДолейПая.Доступность = ВСчетПая; 	
	Элементы.УслугиЗаполнитьСотрудникиПоПодразделению.Доступность           = ВСчетЗарплаты;	
	Элементы.УслугиЗаполнитьКонтрагентыВПроизвольномСписке.Доступность      = НЕ ВСчетЗарплаты И Объект.Услуги.Количество() > 0;
	Элементы.УслугиЗаполнитьКонтрагентыВСтроке.Доступность                  = НЕ ВСчетЗарплаты И Объект.Услуги.Количество() > 0;    	
	Элементы.УслугиРассчитатьНДФЛ.Доступность                               = Объект.НачислятьНДФЛ; 
	Элементы.ГруппаУслугиУстановить.Доступность							    = Объект.Услуги.Количество() > 0;
	
	// Заголовки и доступность субконто 	
		
	ЗаголовкиПолей = Новый Структура("Субконто1, Субконто2, Субконто3",
	"ЗаголовокСубконтоСчетаНДФЛ1", "ЗаголовокСубконтоСчетаНДФЛ2", "ЗаголовокСубконтоСчетаНДФЛ3");
	УстановитьЗаголовкиИДоступностьСубконто(Форма, Объект.СчетУчетаНДФЛ, ЗаголовкиПолей, , "СчетаНДФЛ");
	
	ЗаголовкиПолей = Новый Структура("Субконто1, Субконто2, Субконто3",
	"ЗаголовокСубконтоВоенныйСбор1", "ЗаголовокСубконтоВоенныйСбор2", "ЗаголовокСубконтоВоенныйСбор3");
	УстановитьЗаголовкиИДоступностьСубконто(Форма, Объект.СчетВоенногоСбора, ЗаголовкиПолей, , "ВоенныйСбор");
	
	ЗаголовкиПолей = Новый Структура("Субконто1, Субконто2, Субконто3",
	"ЗаголовокСубконтоЗатрат1", "ЗаголовокСубконтоЗатрат2", "ЗаголовокСубконтоЗатрат3");
	УстановитьЗаголовкиИДоступностьСубконто(Форма, Объект.СчетЗатрат, ЗаголовкиПолей, , "Затрат"); 
	
	// ПлательщикНалогаНаПрибыльДо2015
	
	Элементы.НалоговоеНазначениеДоходовИЗатрат.Видимость       = Форма.ПлательщикНалогаНаПрибыльДо2015;	
	Элементы.ТоварыНалоговоеНазначениеДоходовИЗатрат.Видимость = Форма.ПлательщикНалогаНаПрибыльДо2015 И Объект.НоменклатураВТЧ;
	Элементы.УслугиНалоговоеНазначениеДоходовИЗатрат.Видимость = Форма.ПлательщикНалогаНаПрибыльДо2015 И Объект.НоменклатураВТЧ; 
	
	Если Форма.ПлательщикНалогаНаПрибыльДо2015 Тогда  				
			ПоказатьНалоговоеНазначениеПроводки(Объект, Элементы, Форма.ПлательщикНДС);		
	КонецЕсли;  
	
	ОбновитьИтоги(Форма);
	
	СформироватьНадписьЦеныИВалюта(Форма);
	
КонецПроцедуры

&НаСервере
Процедура УправлениеФормойНаСервере()
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьСтраницНаСервере()
	
	МассивСтраниц = Новый Массив;
	МассивСтраниц.Добавить(Элементы.ГруппаТовары);
	МассивСтраниц.Добавить(Элементы.ГруппаУслуги); 		
		
	Если Объект.ЭтоУслуга Тогда
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаУслуги;
		ИмяТабличнойЧасти = "Услуги";
	Иначе
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаТовары;
		ИмяТабличнойЧасти = "Товары";
	КонецЕсли;      
	
	Для каждого ТекСтраница Из МассивСтраниц Цикл
		Если ТекСтраница <> Элементы.ГруппаСтраницы.ТекущаяСтраница Тогда
			Если ТекСтраница.Видимость Тогда
				ТекСтраница.Видимость = Ложь;
			КонецЕсли;
		Иначе
			Если НЕ ТекСтраница.Видимость Тогда
				ТекСтраница.Видимость = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла; 
	
	ЗаголовокТоварыУслуги = ?(Объект.ЭтоУслуга, НСтр("ru=' (Услуги)';uk=' (Послуги)'"), НСтр("ru=' (Товары)';uk=' (Товари)'"));	
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ИНАГРО_ВидыОперацийРеализации.ВСчетЗарплаты") Тогда
		Контрагенты = НСтр("ru='Сотрудники ';uk='Працівники '") 
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ИНАГРО_ВидыОперацийРеализации.РеализацияПрочая") Тогда
		Контрагенты = НСтр("ru='Контрагенты ';uk='Контрагенти '"); 
	Иначе
		Контрагенты = НСтр("ru='Пайщики ';uk='Пайщики '"); 
	КонецЕсли;			
	
	Элементы.ГруппаСтраницы.ТекущаяСтраница.Заголовок = Контрагенты + ЗаголовокТоварыУслуги; 
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗаголовокФормы()
	
	ОбъектФормы = ЭтаФорма.Объект;

	ТекстЗаголовка	= НСтр("ru='Ведомость реализация';uk='Відомість реалізація'");
	
	Если ЗначениеЗаполнено(ОбъектФормы.Ссылка) Тогда
		ТекстЗаголовка = ТекстЗаголовка + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru=' %1 от %2';uk=' %1 від %2'"), ОбъектФормы.Номер, ОбъектФормы.Дата);
	Иначе
		ТекстЗаголовка = ТекстЗаголовка + НСтр("ru=' (создание)';uk=' (створення)'");
	КонецЕсли;
	
	ЭтаФорма.Заголовок = ТекстЗаголовка + " (" + Строка(ОбъектФормы.ВидОперации) + ")";

КонецПроцедуры

&НаСервере
Процедура УстановитьЗаголовкиКолонок() 
	
	ЗаголовокЦена  = ?(ПлательщикНДС, ?(Объект.СуммаВключаетНДС, НСтр("ru='Цена с НДС';uk='Ціна з ПДВ'"), НСтр("ru='Цена без НДС';uk='Ціна без ПДВ'")), НСтр("ru='Цена';uk='Ціна'"));
	ЗаголовокСумма = ?(ПлательщикНДС, ?(Объект.СуммаВключаетНДС, НСтр("ru='Сумма с НДС';uk='Сума з ПДВ'"), НСтр("ru='Сумма без НДС';uk='Сума без ПДВ'")), НСтр("ru='Сумма';uk='Сума'"));
	
	Элементы.ТоварыЦена.Заголовок  = ЗаголовокЦена;	
	Элементы.ТоварыСумма.Заголовок = ЗаголовокСумма;
	
	Элементы.УслугиЦена.Заголовок  = ЗаголовокЦена;
	Элементы.УслугиСумма.Заголовок = ЗаголовокСумма;	

КонецПроцедуры

&НаСервере
Процедура УстановитьПараметрыВыбораВидОперации()
	
	МассивВидовОпераций = Документы.ИНАГРО_ВедомостьРеализация.ПолучитьФиксированныйМассивВидовОпераций();
	
	ПараметрМассивВидовОпераций = Новый ПараметрВыбора("Отбор.Ссылка", МассивВидовОпераций);
	
	НовыйМассив = Новый Массив();
	НовыйМассив.Добавить(ПараметрМассивВидовОпераций);
	НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);
	
	Элементы.ВидОперации.ПараметрыВыбора = НовыеПараметры;
	
КонецПроцедуры

&НаСервере
Процедура УстановкаКонтрагентаПоВидуОперации()
	
	Если Объект.ВидОперации = Перечисления.ИНАГРО_ВидыОперацийРеализации.ВСчетЗарплаты Тогда 
		Объект.Контрагент = Справочники.Контрагенты.ВСчетОплатыТруда; 		
	ИначеЕсли Объект.ВидОперации = Перечисления.ИНАГРО_ВидыОперацийРеализации.РеализацияПрочая И ИНАГРО_ОбщийВызовСервераПовтИсп.ЕстьБСПУ() Тогда 
		Объект.Контрагент = Справочники.Контрагенты.РеализацияПая;
	ИначеЕсли Объект.ВидОперации = Перечисления.ИНАГРО_ВидыОперацийРеализации.ВСчетПая Тогда 
		Объект.Контрагент = Справочники.Контрагенты.ВСчетПая; 		
	Иначе
		Объект.Контрагент = Справочники.Контрагенты.ПустаяСсылка(); 		
	КонецЕсли;
	
	КонтрагентПриИзмененииНаСервере();
	
КонецПроцедуры	

&НаСервере
Процедура УстановитьСостояниеДокумента()
	
	СостояниеДокумента = ОбщегоНазначенияБП.СостояниеДокумента(Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьТаблицыДокумента()
	
	Если Объект[ИмяТабличнойЧасти].Количество() > 0 Тогда		
		ТекстВопроса = НСтр("ru='При смене вида операции табличные части будут очищены. Продолжить?';uk='При зміні вида операції табличні частини будуть очищені. Продовжити?'");
		Оповещение = Новый ОписаниеОповещения("ОчиститьТаблицыДокументаЗавершение", ЭтотОбъект, Параметры);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	Иначе
		ВидОперацииОбработатьИзменение();
	КонецЕсли;		
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьТаблицыДокументаЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
   	
    Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Объект.ВидОперации = ВидОперацииПредыдущий;
		ВидОперацииОбработатьИзменение();
		Возврат;
	КонецЕсли;    	
		
	Объект[ИмяТабличнойЧасти].Очистить(); 
	
	ВидОперацииОбработатьИзменение(); 	
		    
КонецПроцедуры

&НаСервере
Процедура ВидОперацииОбработатьИзменение()
	
	Объект.НачислятьНДФЛ = Ложь;
	
	УстановитьЗаголовокФормы();
	
	УстановитьЗаголовкиКолонок();
	
	УстановитьВидимостьСтраницНаСервере();
	
	УстановкаКонтрагентаПоВидуОперации();
		
	ОбновитьИтоги(ЭтаФорма);
	
	УправлениеФормой(ЭтаФорма);
	
	ВидОперацииПредыдущий = Объект.ВидОперации; 
	
	Модифицированность = Истина; 
	    
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьЗаголовкиИДоступностьСубконто(Форма, Счет, ЗаголовкиПолей, Префикс = "", Постфикс = "")

	ПоляФормы = Новый Структура("Субконто1, Субконто2, Субконто3",
		Префикс + "Субконто" + Постфикс + "1",
		Префикс + "Субконто" + Постфикс + "2",
		Префикс + "Субконто" + Постфикс + "3");

	БухгалтерскийУчетКлиентСервер.ПриВыбореСчета(Счет, Форма, ПоляФормы, ЗаголовкиПолей, Ложь);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ИзменитьПараметрыВыбораПолейСубконто(Форма)
			
	ПараметрыДокумента = ПолучитьСписокПараметровВыбораСубконто(Форма, Форма.Объект, "СубконтоСчетаНДФЛ%Индекс%");
	БухгалтерскийУчетКлиентСервер.ИзменитьПараметрыВыбораПолейСубконто(Форма, Форма.Объект,
		"СубконтоСчетаНДФЛ%Индекс%", "СубконтоСчетаНДФЛ%Индекс%", ПараметрыДокумента);
		
	ПараметрыДокумента = ПолучитьСписокПараметровВыбораСубконто(Форма, Форма.Объект, "СубконтоВоенныйСбор%Индекс%");
	БухгалтерскийУчетКлиентСервер.ИзменитьПараметрыВыбораПолейСубконто(Форма, Форма.Объект,
		"СубконтоВоенныйСбор%Индекс%", "СубконтоВоенныйСбор%Индекс%", ПараметрыДокумента);	
	
	ПараметрыДокумента = ПолучитьСписокПараметровВыбораСубконто(Форма, Форма.Объект, "СубконтоЗатрат%Индекс%");
	БухгалтерскийУчетКлиентСервер.ИзменитьПараметрыВыбораПолейСубконто(Форма, Форма.Объект,
		"СубконтоЗатрат%Индекс%", "СубконтоЗатрат%Индекс%", ПараметрыДокумента);	
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьСтавкуНДФЛ()
	
	Объект.СтавкаНДФЛ = РегистрыСведений.СтавкиНДФЛ.ПолучитьПоследнее(ТекущаяДатаДокумента, Новый Структура("ВидСтавки", Перечисления.ВидыСтавокНДФЛ.Основная)).Ставка;	
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПоказатьНалоговоеНазначениеПроводки(Объект, Элементы, ПлательщикНДС)

	ХарактерЗатрат = УправлениеПроизводствомВызовСервера.ПолучитьХарактерЗатратПоСчетуЗатрат(Объект.СчетЗатрат, , Объект.Дата);                                                                                              
	Элементы.НалоговоеНазначениеДоходовИЗатратПоПаям.Доступность = НЕ (ХарактерЗатрат = "Производство" ИЛИ ХарактерЗатрат = "Строительство" ИЛИ ХарактерЗатрат = "ТЗР" ИЛИ ХарактерЗатрат = "РБП" ИЛИ ХарактерЗатрат = "ОПЗ");
	
	ТекстНадписи = "";
	Если Элементы.НалоговоеНазначениеДоходовИЗатратПоПаям.Доступность = Ложь Тогда
		// Заполним характер затрат, признак Амортизируется и НалоговоеНазначениеДоходовИЗатрат.
		ХарактерЗатрат = Неопределено;
		ХарактерЗатратРБП = Неопределено;		
		НалоговоеНазначениеПроводки = Неопределено;
		
		НалоговоеНазначениеНДС = НСтр("ru='Совпадает с налоговым назначением из табличной части';uk='Співпадає з податковим призначенням з табличної частини'");
		СтруктураСубконто = Новый Структура("Субконто1,Субконто2,Субконто3", Объект.СубконтоЗатрат1, Объект.СубконтоЗатрат2, Объект.СубконтоЗатрат3);
		НалоговыйУчет.ОпределениеАналитикиНалоговогоУчетаВПроводкахДляЗатрат(СтруктураСубконто, Объект.СчетЗатрат, ХарактерЗатрат,
																			 НалоговоеНазначениеПроводки, , НалоговоеНазначениеНДС,,,Объект.Дата, ХарактерЗатратРБП
																			,ПлательщикНДС);
		Если НЕ ПлательщикНДС Тогда
			ТекстНадписи = "<" + Строка(НалоговоеНазначениеПроводки) + ">";
		ИначеЕсли ХарактерЗатрат = "ОПЗ"
			ИЛИ ХарактерЗатрат = "ТЗР" Тогда
			ТекстНадписи = "<" + Строка(НалоговоеНазначениеПроводки) + ">";
		ИначеЕсли ХарактерЗатрат = "Производство" Тогда
			ТекстНадписи = "<" + Строка(НалоговоеНазначениеПроводки) + ">, " + НСтр("ru='из аналитики счета - номенклатурной группы';uk='з аналітики рахунку - номенклатурної групи'");
		ИначеЕсли ХарактерЗатрат = "Строительство" Тогда
			ТекстНадписи = "<" + Строка(НалоговоеНазначениеПроводки) + ">, " + НСтр("ru='из аналитики счета - объекта строительства';uk=""з аналітики рахунку - об'єкта будівництва""");
		ИначеЕсли ХарактерЗатрат = "РБП" Тогда
			Если    ХарактерЗатратРБП = "Производство"
				ИЛИ ХарактерЗатратРБП = "Строительство"
				ИЛИ ХарактерЗатратРБП = "ОПЗ" Тогда
				ТекстНадписи = "<" + Строка(НалоговоеНазначениеПроводки) + ">, " + НСтр("ru='из аналитики счета - справочника РБП';uk='з аналітики рахунку - довідника витрат майбут. періодів'");
			Иначе			
				ТекстНадписи = "<" + Строка(НалоговоеНазначениеПроводки) + ">";
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Элементы.НадписьИнформацияНалоговоеНазначениеДоходовИЗатрат.Заголовок = ТекстНадписи;
	
КонецПроцедуры	

&НаСервере
Процедура ПроверитьНалоговоеНазначениеДоходовИЗатрат()
	
	ХарактерЗатрат = УправлениеПроизводствомВызовСервера.ПолучитьХарактерЗатратПоСчетуЗатрат(Объект.СчетЗатрат, , Объект.Дата);
	Если (ХарактерЗатрат = "Производство" ИЛИ ХарактерЗатрат = "Строительство" ИЛИ ХарактерЗатрат = "ТЗР" ИЛИ ХарактерЗатрат = "РБП" ИЛИ ХарактерЗатрат = "ОПЗ") Тогда
		Объект.НалоговоеНазначениеДоходовИЗатрат = Неопределено;	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере                                   
Процедура РассчитатьНДФЛНаСервере(Контрагент = Неопределено)
	
	ТаблицаКонтрагентов = Объект[ИмяТабличнойЧасти].Выгрузить();	
	
	Если Контрагент <> Неопределено Тогда
		СтруктураПоиска = Новый Структура("Контрагент", Контрагент);
		СтрокиПоКонтрагенту = Объект[ИмяТабличнойЧасти].НайтиСтроки(СтруктураПоиска);
		ТаблицаКонтрагентов.Очистить();
		ОбщегоНазначенияБПВызовСервера.ЗагрузитьВТаблицуЗначений(СтрокиПоКонтрагенту, ТаблицаКонтрагентов);
	КонецЕсли;
	
	ТаблицаКонтрагентов.Свернуть("Контрагент","Всего");  
		
	НатуральныйКоэффициентВключаетВС = Истина;
	Если ИНАГРО_ОбщийВызовСервераПовтИсп.ЕстьБСПУ() Тогда
		НатуральныйКоэффициентВключаетВС = Константы.ИНАГРО_НатуральныйКоэффициентВключаетВС.Получить();
	КонецЕсли;
	
	Если НЕ НатуральныйКоэффициентВключаетВС И Объект.Дата >= '20160101' Тогда 
		
		ТаблицаКонтрагентов.Колонки.Добавить("ДоходПоКонтрагенту");
		ТаблицаКонтрагентов.Колонки.Добавить("СуммаНДФЛПоКонтрагенту");
		ТаблицаКонтрагентов.Колонки.Добавить("СуммаВСПоКонтрагенту");
				
		Для Каждого СтрокаТаблицы Из ТаблицаКонтрагентов Цикл
			БазаНДФЛ = СтрокаТаблицы.Всего;	
			СтрокаТаблицы.ДоходПоКонтрагенту     = (БазаНДФЛ) / (1 - Объект.СтавкаНДФЛ);			
			СтрокаТаблицы.СуммаНДФЛПоКонтрагенту = Окр(СтрокаТаблицы.ДоходПоКонтрагенту * Объект.СтавкаНДФЛ, 2);
			СтрокаТаблицы.СуммаВСПоКонтрагенту   = Окр(БазаНДФЛ * Объект.СтавкаВоенныйСбор, 2);
		КонецЦикла;
		
	Иначе	
		ИНАГРО_Общий.РассчитатьНДФЛДляТаблицыОбратный(ТаблицаКонтрагентов, ТекущаяДатаДокумента, Объект.СтавкаНДФЛ, Объект.СтавкаВоенныйСбор);
	КонецЕсли;
	
	Для Каждого СтрокаТабличнойЧасти Из Объект[ИмяТабличнойЧасти] Цикл
		
		Если Контрагент <> Неопределено Тогда
			
			Если СтрокаТабличнойЧасти.Контрагент = Контрагент Тогда
				
				СтрТаблицаКонтрагентов = ТаблицаКонтрагентов.Найти(СтрокаТабличнойЧасти.Контрагент);
				
				СтрокаТабличнойЧасти.УдержаноНДФЛ = ?(СтрТаблицаКонтрагентов.Всего > 0,
				(СтрТаблицаКонтрагентов.СуммаНДФЛПоКонтрагенту
				* СтрокаТабличнойЧасти.Всего / СтрТаблицаКонтрагентов.Всего), 0);
				СтрокаТабличнойЧасти.УдержаноВС   = ?(СтрТаблицаКонтрагентов.Всего > 0,
				(СтрТаблицаКонтрагентов.СуммаВСПоКонтрагенту
				* СтрокаТабличнойЧасти.Всего / СтрТаблицаКонтрагентов.Всего), 0);		  
				СтрокаТабличнойЧасти.Доход        = СтрокаТабличнойЧасти.Всего + СтрокаТабличнойЧасти.УдержаноНДФЛ + СтрокаТабличнойЧасти.УдержаноВС;
			КонецЕсли;
			
		Иначе
				СтрТаблицаКонтрагентов = ТаблицаКонтрагентов.Найти(СтрокаТабличнойЧасти.Контрагент);
				
				СтрокаТабличнойЧасти.УдержаноНДФЛ = ?(СтрТаблицаКонтрагентов.Всего > 0,
				(СтрТаблицаКонтрагентов.СуммаНДФЛПоКонтрагенту
				* СтрокаТабличнойЧасти.Всего / СтрТаблицаКонтрагентов.Всего), 0);
				СтрокаТабличнойЧасти.УдержаноВС   = ?(СтрТаблицаКонтрагентов.Всего > 0,
				(СтрТаблицаКонтрагентов.СуммаВСПоКонтрагенту
				* СтрокаТабличнойЧасти.Всего / СтрТаблицаКонтрагентов.Всего), 0);		  
				СтрокаТабличнойЧасти.Доход        = СтрокаТабличнойЧасти.Всего + СтрокаТабличнойЧасти.УдержаноНДФЛ + СтрокаТабличнойЧасти.УдержаноВС;

		КонецЕсли;
		
	КонецЦикла;
	
	ОбновитьИтоги(ЭтаФорма);
	
КонецПроцедуры	

&НаСервере
Процедура ЗаполнитьТабличнуюЧасть(ИмяКоманды, Доля = Неопределено, Подразделение = Неопределено)
	
	ВсехВошедшихВГруппу = ?(ИмяКоманды = "ЗаполнитьКонтрагентыВошедшиеВГруппу",          Истина, Ложь);
	СУказаннойДолейПая  = ?(ИмяКоманды = "ЗаполнитьКонтрагентыТолькоСУказаннойДолейПая", Истина, Ложь); 
	Сотрудниками        = ?(ИмяКоманды = "ЗаполнитьСотрудникиПоПодразделению",           Истина, Ложь);
	ВПроизвольномСписке = ?(ИмяКоманды = "ЗаполнитьКонтрагентыВПроизвольномСписке",      Истина, Ложь);

	Если ВПроизвольномСписке Тогда
		
		СписокКонтрагентов = ОбщегоНазначения.ВыгрузитьКолонку(Объект[ИмяТабличнойЧасти], "Контрагент");
		
		Если СписокКонтрагентов.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		
		Объект[ИмяТабличнойЧасти].Очистить(); 	
		
	КонецЕсли;	
	
	Если СУказаннойДолейПая ИЛИ ВсехВошедшихВГруппу ИЛИ ВПроизвольномСписке Тогда
		
		Запрос = Новый Запрос(); 
		
		Если ИНАГРО_ОбщийВызовСервераПовтИсп.ЕстьБСПУ() Тогда
							
			Запрос.Текст =
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
				|	ДоговорыКонтрагентов.Владелец КАК Контрагент,
				|	ДоговорыКонтрагентов.Ссылка КАК ДоговорКонтрагента,
				|	ДоговорыКонтрагентов.Владелец.Наименование,
				|	ИНАГРО_НормативнаяОценкаЗемлиСрезПоследних.СуммаАренднойПлаты,
				|	ИНАГРО_НормативнаяОценкаЗемлиСрезПоследних.НормативнаяОценкаЗемли,
				|	ИНАГРО_НормативнаяОценкаЗемлиСрезПоследних.ПроцентВыплаты,
				|	ИНАГРО_НормативнаяОценкаЗемлиСрезПоследних.ДоляЗемельногоПая КАК ДоляПая,
				|	ИНАГРО_НормативнаяОценкаЗемлиСрезПоследних.Участок,
				|	ВЫБОР
				|		КОГДА ИНАГРО_НормативнаяОценкаЗемлиСрезПоследних.ДоляЗемельногоПая ЕСТЬ NULL 
				|				ИЛИ ИНАГРО_НормативнаяОценкаЗемлиСрезПоследних.ДоляЗемельногоПая = 0
				|			ТОГДА ИНАГРО_НормативнаяОценкаЗемлиСрезПоследних.Участок.ПлощадьПоКадастру
				|		ИНАЧЕ ИНАГРО_НормативнаяОценкаЗемлиСрезПоследних.Участок.ПлощадьПоКадастру * ИНАГРО_НормативнаяОценкаЗемлиСрезПоследних.ДоляЗемельногоПая
				|	КОНЕЦ КАК ПлощадьПоКадастру
				|ИЗ
				|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
				|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИНАГРО_НормативнаяОценкаЗемли.СрезПоследних(&Дата, Актуальность = ИСТИНА) КАК ИНАГРО_НормативнаяОценкаЗемлиСрезПоследних
				|		ПО (ИНАГРО_НормативнаяОценкаЗемлиСрезПоследних.Договор = ДоговорыКонтрагентов.Ссылка)
				|ГДЕ "
				+ ?(ВсехВошедшихВГруппу И Объект.ВидОперации = Перечисления.ИНАГРО_ВидыОперацийРеализации.РеализацияПрочая, "ДоговорыКонтрагентов.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СПокупателем)","ДоговорыКонтрагентов.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.ИНАГРО_АрендаЗемли)") + "
				|	И ДоговорыКонтрагентов.Организация = &Организация
				|	И ДоговорыКонтрагентов.Дата <= &Дата
				|	И (ДоговорыКонтрагентов.ИНАГРО_СрокДействия > &Дата
				|			ИЛИ ДоговорыКонтрагентов.ИНАГРО_СрокДействия = &ПустаяДата)
				|	И ДоговорыКонтрагентов.ПометкаУдаления = ЛОЖЬ "
				+ ?(ВПроизвольномСписке, "И ДоговорыКонтрагентов.Владелец В (&СписокКонтрагентов)","")
				+ ?(ВсехВошедшихВГруппу, "И ДоговорыКонтрагентов.Владелец В ИЕРАРХИИ (&ГруппаКонтрагентов) И ДоговорыКонтрагентов.Владелец.ЭтоГруппа = ЛОЖЬ","")
				+ ?(СУказаннойДолейПая, "И ИНАГРО_НормативнаяОценкаЗемлиСрезПоследних.ДоляЗемельногоПая = &ДоляПая","") + "
				|
				|ОБЪЕДИНИТЬ ВСЕ
				|
				|ВЫБРАТЬ
				|	ДоговорыКонтрагентов.Владелец,
				|	ДоговорыКонтрагентов.Ссылка,
				|	ДоговорыКонтрагентов.Владелец.Наименование,
				|	ДоговорыКонтрагентов.ИНАГРО_СтоимостьПая,
				|	0,
				|	0,
				|	ДоговорыКонтрагентов.ИНАГРО_ДоляИмущественногоПая,
				|	"""",
				|	0
				|ИЗ
				|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
				|ГДЕ
				|	ДоговорыКонтрагентов.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.ИНАГРО_АрендаИмущества)
				|	И ДоговорыКонтрагентов.Организация = &Организация
				|	И ДоговорыКонтрагентов.ПометкаУдаления = ЛОЖЬ
				|	И (ДоговорыКонтрагентов.ИНАГРО_СрокДействия > &Дата
				|			ИЛИ ДоговорыКонтрагентов.ИНАГРО_СрокДействия = &ПустаяДата) " 
				+ ?(ВПроизвольномСписке, "И ДоговорыКонтрагентов.Владелец В (&СписокКонтрагентов)","")
				+ ?(ВсехВошедшихВГруппу, "И ДоговорыКонтрагентов.Владелец В ИЕРАРХИИ (&ГруппаКонтрагентов) И ДоговорыКонтрагентов.Владелец.ЭтоГруппа = ЛОЖЬ", "")
				+ ?(СУказаннойДолейПая, " И ДоговорыКонтрагентов.ИНАГРО_ДоляИмущественногоПая = &ДоляПая", "") + "
				| ";
			
		Иначе	
			
			Запрос.Текст =
				"ВЫБРАТЬ
				|	ДоговорыКонтрагентов.Владелец КАК Контрагент,
				|	ДоговорыКонтрагентов.Ссылка КАК ДоговорКонтрагента,
				|	ДоговорыКонтрагентов.Владелец.Наименование
				|ИЗ
				|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
				|ГДЕ
				|	ДоговорыКонтрагентов.Организация = &Организация
				|	И ДоговорыКонтрагентов.ПометкаУдаления = ЛОЖЬ
				|	И (ДоговорыКонтрагентов.ИНАГРО_СрокДействия > &Дата
				|			ИЛИ ДоговорыКонтрагентов.ИНАГРО_СрокДействия = &ПустаяДата) " 
				+ ?(ВПроизвольномСписке, "И ДоговорыКонтрагентов.Владелец В (&СписокКонтрагентов)", "")
				+ ?(ВсехВошедшихВГруппу, "И ДоговорыКонтрагентов.Владелец В ИЕРАРХИИ (&ГруппаКонтрагентов) И ДоговорыКонтрагентов.Владелец.ЭтоГруппа = ЛОЖЬ", "") + "
				|	И ДоговорыКонтрагентов.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СПокупателем)";
			
		КонецЕсли; 
					
		Если СУказаннойДолейПая Тогда
			Запрос.УстановитьПараметр("ДоляПая", Доля);
		КонецЕсли;   
		
		Запрос.УстановитьПараметр("СписокКонтрагентов", СписокКонтрагентов);
		Запрос.УстановитьПараметр("ГруппаКонтрагентов", Объект.ГруппаКонтрагентов);
		Запрос.УстановитьПараметр("Дата",               Объект.Дата);
		Запрос.УстановитьПараметр("Организация",        Объект.Организация);
		Запрос.УстановитьПараметр("ПустаяДата",         Дата("00010101"));
	
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			НоваяСтрока = Объект[ИмяТабличнойЧасти].Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);		
			НоваяСтрока.Номенклатура                      = Объект.Номенклатура;
			НоваяСтрока.СтавкаНДС                         = Объект.СтавкаНДС;
			Если Объект[ИмяТабличнойЧасти] = Объект.Товары Тогда
				НоваяСтрока.Коэффициент      = Объект.Коэффициент;
				НоваяСтрока.ЕдиницаИзмерения = Объект.ЕдиницаИзмерения; 
			Иначе
				НоваяСтрока.Содержание  = Объект.Номенклатура.НаименованиеПолное;
			КонецЕсли; 
			НоваяСтрока.СхемаРеализации                   = Объект.СхемаРеализации;
			НоваяСтрока.НалоговоеНазначение               = Объект.НалоговоеНазначение;
			НоваяСтрока.НалоговоеНазначениеДоходовИЗатрат = Объект.НалоговоеНазначениеДоходовИЗатрат;
			
		КонецЦикла;
		
	ИначеЕсли Сотрудниками Тогда	
				
		ТекстЗапроса =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ 
			|	ИНАГРО_РаботникиОрганизацийСрезПоследних.Сотрудник,
			|	ИНАГРО_РаботникиОрганизацийСрезПоследних.ПодразделениеОрганизации
			|ИЗ
			|	РегистрСведений.ИНАГРО_РаботникиОрганизаций.СрезПоследних(
			|			&АктуальнаяДата,
			|			Организация = &Организация
			| И ПодразделениеОрганизации В ИЕРАРХИИ (&Подразделение)) КАК ИНАГРО_РаботникиОрганизацийСрезПоследних
			|ГДЕ
			|	ИНАГРО_РаботникиОрганизацийСрезПоследних.ПричинаИзмененияСостояния <> &Увольнение";
		
		ТекстЗапроса = ?(Подразделение = Неопределено, СтрЗаменить(ТекстЗапроса,"И ПодразделениеОрганизации В ИЕРАРХИИ (&Подразделение)", ""), ТекстЗапроса);
		
		Запрос = Новый Запрос (ТекстЗапроса);
		Запрос.УстановитьПараметр("АктуальнаяДата", ТекущаяДатаДокумента);
		Запрос.УстановитьПараметр("Подразделение",  Подразделение);
		Запрос.УстановитьПараметр("Организация",    Объект.Организация);
		Запрос.УстановитьПараметр("Увольнение",     Перечисления.ПричиныИзмененияСостояния.Увольнение);
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаПоПодразделению = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаПоПодразделению.Следующий() Цикл 
			
			НоваяСтрока = Объект[ИмяТабличнойЧасти].Добавить();
			НоваяСтрока.Сотрудник           = ВыборкаПоПодразделению.Сотрудник;
			НоваяСтрока.Номенклатура        = Объект.Номенклатура;
			НоваяСтрока.СтавкаНДС           = Объект.СтавкаНДС;
			НоваяСтрока.СхемаРеализации     = Объект.СхемаРеализации;
			НоваяСтрока.НалоговоеНазначение = Объект.НалоговоеНазначение;
			Если Объект.ЭтоУслуга Тогда 
				НоваяСтрока.Содержание  = Объект.Номенклатура.НаименованиеПолное;
			Иначе
				НоваяСтрока.ЕдиницаИзмерения    = Объект.ЕдиницаИзмерения;
				НоваяСтрока.Коэффициент = Объект.Коэффициент;
			КонецЕсли;
			
		КонецЦикла;                                             		
		
	КонецЕсли;
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьКолонкуВсего(СтрокаТабличнойЧасти, СуммаВключаетНДС)
	
	СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма + ?(СуммаВключаетНДС, 0, СтрокаТабличнойЧасти.СуммаНДС);
	
КонецПроцедуры 

&НаСервере
Процедура ЗаполнитьСчетаУчетаРасчетов(СчетаУчета = Неопределено)
	
	Если СчетаУчета = Неопределено Тогда
		СчетаУчета = БухгалтерскийУчетРасчетовСКонтрагентами.ПолучитьСчетаРасчетовСКонтрагентом(
			Объект.Организация, Объект.Контрагент, Объект.ДоговорКонтрагента);
	КонецЕсли; 	
	
	СчетУчетаНДСПодтвержденный  = СчетаУчета.СчетУчетаНДСПродаж; 	
	СчетУчетаРасчетовПоАвансам  = СчетаУчета.СчетАвансовПокупателя;
	СтавкаНДС                   = СчетаУчета.СтавкаНДСПродаж;
	
	Если Объект.Контрагент = Справочники.Контрагенты.ВСчетОплатыТруда Тогда 
		Объект.СчетВзаиморасчетовПоПаям = СчетаУчета.СчетУчетаРасчетовПоЗарплате; 
	ИначеЕсли Объект.Контрагент = Справочники.Контрагенты.ВСчетПая Тогда 
		Объект.СчетВзаиморасчетовПоПаям = СчетаУчета.СчетУчетаРасчетовПоПаям;
	Иначе 
		Объект.СчетВзаиморасчетовПоПаям = СчетаУчета.СчетРасчетовПокупателя;	
	КонецЕсли;  
	
	ПересчитатьСтавкиНДСПриСменеСтавки();
	
КонецПроцедуры 

&НаСервере 
Процедура ПересчитатьСтавкиНДСПриСменеСтавки()
	
	Если Объект[ИмяТабличнойЧасти].Количество() > 0 И Объект.СтавкаНДС <> Перечисления.СтавкиНДС.ПустаяСсылка() Тогда 
		
		Для Каждого СтрокаТабличнойЧасти Из Объект[ИмяТабличнойЧасти] Цикл
			
			СтрокаТабличнойЧасти.СтавкаНДС = Объект.СтавкаНДС;
			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, Объект.СуммаВключаетНДС);
			СтрокаТабличнойЧасти.Всего     = СтрокаТабличнойЧасти.Сумма + ?(Объект.СуммаВключаетНДС, 0, СтрокаТабличнойЧасти.СуммаНДС);
			
			РассчитатьНДФЛНаСервере();
			
		КонецЦикла;
		
	КонецЕсли;	
		                                      
КонецПроцедуры

&НаСервере
Функция ПолучитьМассивВидовДоговоров()

	СписокВидовДоговоров = Новый Массив;
	СписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.ИНАГРО_АрендаЗемли);
	СписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.ИНАГРО_АрендаИмущества);
	СписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПокупателем);

	Возврат СписокВидовДоговоров;

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьСписокПараметровВыбораСубконто(Форма, ПараметрыОбъекта, ШаблонИмяПоляОбъекта)

	СписокПараметров = Новый Структура;
	Для Индекс = 1 По 3 Цикл
		ИмяПоля = СтрЗаменить(ШаблонИмяПоляОбъекта, "%Индекс%", Индекс);
		Если ТипЗнч(ПараметрыОбъекта[ИмяПоля]) = Тип("СправочникСсылка.Контрагенты") Тогда
			СписокПараметров.Вставить("Контрагент", ПараметрыОбъекта[ИмяПоля]);
		ИначеЕсли ТипЗнч(ПараметрыОбъекта[ИмяПоля]) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
			СписокПараметров.Вставить("ДоговорКонтрагента", ПараметрыОбъекта[ИмяПоля]);
		ИначеЕсли ТипЗнч(ПараметрыОбъекта[ИмяПоля]) = Тип("СправочникСсылка.Номенклатура") Тогда
			СписокПараметров.Вставить("Номенклатура", ПараметрыОбъекта[ИмяПоля]);
		ИначеЕсли ТипЗнч(ПараметрыОбъекта[ИмяПоля]) = Тип("СправочникСсылка.Склады") Тогда
			СписокПараметров.Вставить("Склад", ПараметрыОбъекта[ИмяПоля]);
		КонецЕсли;
	КонецЦикла;
	СписокПараметров.Вставить("Организация", Форма.Объект.Организация);

	Возврат СписокПараметров;

КонецФункции  

&НаСервере
Функция ЕстьСтрокиВТабличныхЧастях()
	
	ЕстьСтроки = Объект.Товары.Количество() > 0	ИЛИ Объект.Услуги.Количество() > 0;	
	
	Возврат ЕстьСтроки;

КонецФункции

&НаСервере
Функция СписокВидимыхТабличныхЧастей()

	ТабличныхЧастей = Новый СписокЗначений;
	
	ТабличныхЧастей.Добавить("Товары", "Товары");
	
	Если Объект.ЭтоУслуга Тогда
		ТабличныхЧастей.Добавить("Услуги", "Услуги");
	КонецЕсли;
	
	Возврат ТабличныхЧастей;

КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьЗначениеРеквизита(Ссылка, Реквизит)
	
	Возврат	ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, Реквизит);
	
КонецФункции 

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьИтоги(Форма)
	
	Объект = Форма.Объект;
	
	Форма.ИтогиВсего    = ?(Объект.ЭтоУслуга, Объект.Услуги.Итог("Всего"),    Объект.Товары.Итог("Всего"));
	Форма.ИтогиВсегоНДС = ?(Объект.ЭтоУслуга, Объект.Услуги.Итог("СуммаНДС"), Объект.Товары.Итог("СуммаНДС"));
	
	Форма.ОтметкаНезаполненногоСклад = Объект.Товары.Количество() > 0;
		
КонецПроцедуры 

#Область ЦеныИВалюта

&НаКлиентеНаСервереБезКонтекста
Процедура СформироватьНадписьЦеныИВалюта(Форма)
	
	Объект = Форма.Объект;
	СтруктураНадписи = Новый Структура(
		"ТипЦен, ВалютаДокумента, Курс, Кратность, ВалютаРегламентированногоУчета",
		Объект.ТипЦен,
		Объект.ВалютаДокумента,
		Объект.КурсВзаиморасчетов,
		Объект.КратностьВзаиморасчетов,
		Форма.ВалютаРегламентированногоУчета);
	
	Если Форма.ПлательщикНДС Тогда 
		СтруктураНадписи.Вставить("СуммаВключаетНДС", Объект.СуммаВключаетНДС);
		СтруктураНадписи.Вставить("АвторасчетНДС", 	  Объект.АвторасчетНДС);
	КонецЕсли;
	
	Форма.ЦеныИВалюта = ОбщегоНазначенияБПКлиентСервер.СформироватьНадписьЦеныИВалюта(СтруктураНадписи);

КонецПроцедуры 

&НаКлиенте
Процедура ОбработатьИзмененияПоКнопкеЦеныИВалюты(ПересчитатьЦены = Ложь, ПерезаполнитьЦены = Ложь)

	// 1. Формируем структуру параметров для заполнения формы "Цены и Валюта".
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ВалютаДокумента",      Объект.ВалютаДокумента);
	СтруктураПараметров.Вставить("Курс",                 Объект.КурсВзаиморасчетов);
	СтруктураПараметров.Вставить("Кратность",            Объект.КратностьВзаиморасчетов);
	СтруктураПараметров.Вставить("СуммаВключаетНДС",     Объект.СуммаВключаетНДС);
	СтруктураПараметров.Вставить("АвторасчетНДС",     	 Объект.АвторасчетНДС);
	СтруктураПараметров.Вставить("Контрагент",           Объект.Контрагент);
	СтруктураПараметров.Вставить("Договор",              Объект.ДоговорКонтрагента);
	СтруктураПараметров.Вставить("Организация",          Объект.Организация);
	СтруктураПараметров.Вставить("ДатаДокумента",        Объект.Дата);
	СтруктураПараметров.Вставить("ПерезаполнитьЦены",    ПерезаполнитьЦены);
	СтруктураПараметров.Вставить("ПересчитатьЦены",      ПересчитатьЦены);
	СтруктураПараметров.Вставить("БылиВнесеныИзменения", Ложь);
	СтруктураПараметров.Вставить("ТипЦен",               Объект.ТипЦен);

	// 2. Открываем форму "Цены и Валюта".
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ОбработатьИзмененияПоКнопкеЦеныИВалютыЗавершение", ЭтотОбъект);
	
	ОткрытьФорму("ОбщаяФорма.ФормаЦеныИВалюта", СтруктураПараметров,,,,,ОповещениеОЗакрытии);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьИзмененияПоКнопкеЦеныИВалютыЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	СтруктураЦеныИВалюта = РезультатЗакрытия;
	
	// 3. Перезаполняем табличную часть если были внесены изменения в форме "Цены и Валюта".
	Если ТипЗнч(СтруктураЦеныИВалюта) = Тип("Структура") И СтруктураЦеныИВалюта.БылиВнесеныИзменения Тогда

		ВалютаДоИзменения    = Объект.ВалютаДокумента;
		КурсДоИзменения 	 = Объект.КурсВзаиморасчетов;
		КратностьДоИзменения = Объект.КратностьВзаиморасчетов;
		
		Объект.ТипЦен = СтруктураЦеныИВалюта.ТипЦен;
		Объект.ВалютаДокумента = СтруктураЦеныИВалюта.ВалютаДокумента;
		Объект.КурсВзаиморасчетов = СтруктураЦеныИВалюта.Курс;
		Объект.КратностьВзаиморасчетов = СтруктураЦеныИВалюта.Кратность;
		Объект.СуммаВключаетНДС = СтруктураЦеныИВалюта.СуммаВключаетНДС;
		Объект.АвторасчетНДС = СтруктураЦеныИВалюта.АвторасчетНДС;
		
		Модифицированность = Истина;
		
		ПересчитатьНДС = СтруктураЦеныИВалюта.СуммаВключаетНДС <> СтруктураЦеныИВалюта.ПредСуммаВключаетНДС;
		Если СтруктураЦеныИВалюта.ПерезаполнитьЦены ИЛИ СтруктураЦеныИВалюта.ПересчитатьЦены ИЛИ ПересчитатьНДС Тогда
			ЗаполнитьРассчитатьСуммы(
				ВалютаДоИзменения, 
				КурсДоИзменения,
				КратностьДоИзменения,
				СтруктураЦеныИВалюта.ПерезаполнитьЦены,
				СтруктураЦеныИВалюта.ПересчитатьЦены,
				ПересчитатьНДС);
		КонецЕсли;
		
		Если Объект.АвторасчетНДС Тогда
			// соответствие для хранения погрешностей округлений
			ПогрешностиОкругления = Новый Соответствие();
			// пересчет сумм НДС с учетом ошибок округления
			УчетНДСКлиентСервер.ПересчитатьНДСсУчетомПогрешностиОкругления(Объект.Товары, Объект.Ссылка, Объект.СуммаВключаетНДС, ПогрешностиОкругления, "Товары", Строка(Объект.ВалютаДокумента));
			// пересчет сумм НДС с учетом ошибок округления
			УчетНДСКлиентСервер.ПересчитатьНДСсУчетомПогрешностиОкругления(Объект.Услуги, Объект.Ссылка, Объект.СуммаВключаетНДС, ПогрешностиОкругления, "Услуги", Строка(Объект.ВалютаДокумента));
			// Установим признак перерасчета сумм НДС
			ПерерасчетПроизведен = ИСТИНА;
		КонецЕсли;

		СформироватьНадписьЦеныИВалюта(ЭтаФорма);
		
	КонецЕсли;
		 	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРассчитатьСуммы(Знач ВалютаДоИзменения, КурсДоИзменения, КратностьДоИзменения, ПерезаполнитьЦены = Ложь, ПересчитатьЦены = Ложь, ПересчитатьНДС = Ложь)
		
	Если ПерезаполнитьЦены Тогда
		
		СписокНоменклатуры	= ОбщегоНазначения.ВыгрузитьКолонку(Объект[ИмяТабличнойЧасти], "Номенклатура", Истина); 		 				
		
		ТаблицаЦенНоменклатуры	= Ценообразование.ПолучитьТаблицуЦенНоменклатуры(
			СписокНоменклатуры,
			Объект.ТипЦен,
			Объект.Дата);    
	
	ИначеЕсли ПересчитатьЦены Тогда
		Если КурсДоИзменения <> 0 И КратностьДоИзменения <> 0 Тогда
			СтруктураКурса = Новый Структура("Курс, Кратность", КурсДоИзменения, КратностьДоИзменения);
		Иначе
			СтруктураКурса = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаДоИзменения, Объект.Дата);
		КонецЕсли;
	КонецЕсли;

	Для каждого СтрокаТабличнойЧасти Из Объект[ИмяТабличнойЧасти] Цикл
		
		ЗаполнитьРассчитатьСуммыВСтроке(СтрокаТабличнойЧасти, ТаблицаЦенНоменклатуры, ВалютаДоИзменения, СтруктураКурса, ПерезаполнитьЦены,
										ПересчитатьЦены, ПересчитатьНДС); 
		
		ЗаполнитьКолонкуВсего(СтрокаТабличнойЧасти, Объект.СуммаВключаетНДС);
		
		РассчитатьНДФЛНаСервере(СтрокаТабличнойЧасти.Контрагент)	
		
	КонецЦикла; 		
	
	ОбновитьИтоги(ЭтаФорма);
	ПерерасчетПроизведен = Ложь;

	Если ПересчитатьНДС Тогда
		УстановитьЗаголовкиКолонок();
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРассчитатьСуммыВСтроке(Строка, ТаблицаЦенНоменклатуры, ВалютаПередИзменением, СтруктураКурса, ПерезаполнитьЦены, ПересчитатьЦены, ПересчитатьНДС)

	Если ПерезаполнитьЦены Тогда
		
		НайденнаяСтрока	= ТаблицаЦенНоменклатуры.Найти(Строка.Номенклатура, "Номенклатура");
		Если НайденнаяСтрока <> Неопределено Тогда
			Цена = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(
				НайденнаяСтрока.Цена, НайденнаяСтрока.Валюта, Объект.ВалютаДокумента, НайденнаяСтрока.Курс,
				Объект.КурсВзаиморасчетов, НайденнаяСтрока.Кратность, Объект.КратностьВзаиморасчетов);
		Иначе
			Цена = 0;
		КонецЕсли;
		
		// Признак того, что цена включает НДС, хранится в реквизите ЦенаВключаетНДС типа цен.
		ЦенаВключаетНДС = ?(ЗначениеЗаполнено(Объект.ТипЦен), Объект.ТипЦен.ЦенаВключаетНДС, Ложь);
		
	Иначе
		Если ПересчитатьЦены Тогда
			
			Цена = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(
				Строка.Цена, ВалютаПередИзменением, Объект.ВалютаДокумента, СтруктураКурса.Курс,
				Объект.КурсВзаиморасчетов, СтруктураКурса.Кратность, Объект.КратностьВзаиморасчетов);
			
		Иначе
			Цена = Строка.Цена;
		КонецЕсли;
		// Признак того, что цена включает НДС, хранится в реквизите СуммаВключаетНДС документа.
		ЦенаВключаетНДС = ?(ПересчитатьНДС, НЕ Объект.СуммаВключаетНДС, Объект.СуммаВключаетНДС);
	КонецЕсли;

	Строка.Цена     = УчетНДСКлиентСервер.ПересчитатьЦенуПриИзмененииФлаговНалогов(Цена, ЦенаВключаетНДС, Объект.СуммаВключаетНДС,
																			   УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(Строка.СтавкаНДС));
	Если Строка.Свойство("СуммаСкидки") Тогда
		Строка.СуммаБезСкидки = Строка.Цена * ?(Строка.Количество = 0, 0, Строка.Количество);
		Строка.Сумма = Строка.СуммаБезСкидки - Строка.СуммаСкидки;
	Иначе
		Строка.Сумма 	= Строка.Цена * ?(Строка.Количество = 0, 0, Строка.Количество);
	КонецЕсли;
	Строка.СуммаНДС = УчетНДСКлиентСервер.РассчитатьСуммуНДС(Строка.Сумма, Объект.СуммаВключаетНДС,
															 УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(Строка.СтавкаНДС));
	Строка.Всего 	= Строка.Сумма + ?(Объект.СуммаВключаетНДС, 0, Строка.СуммаНДС);

КонецПроцедуры 

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункцииБСП

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти  