#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
Перем мВалютаРегламентированногоУчета;
Перем мЕстьВС;
Перем ИмяТабличнойЧасти;
Перем КурсЗачетаАвансаРегл;

#Область ОбработчикиСобытий

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	ТипДанныхЗаполнения = ТипЗнч(ДанныеЗаполнения);
		
	ЗаполнениеДокументов.Заполнить(ЭтотОбъект, ДанныеЗаполнения);  
	
	Если  ТипДанныхЗаполнения = Тип("Структура")
		И ДанныеЗаполнения.Свойство("ВидОперации") Тогда
		ВидОперации = ДанныеЗаполнения.ВидОперации;
	КонецЕсли;  	
	
	МесяцВыплаты         = НачалоМесяца(Дата);
	
	СтавкаНДФЛ           = РегистрыСведений.СтавкиНДФЛ.ПолучитьПоследнее(Дата, Новый Структура("ВидСтавки", Перечисления.ВидыСтавокНДФЛ.Основная)).Ставка;		
	СтавкаВоенныйСбор    = РегистрыСведений.СтавкиНДФЛ.ПолучитьПоследнее(Дата, Новый Структура("ВидСтавки", Перечисления.ВидыСтавокНДФЛ.ВоенныйСбор)).Ставка;
  
	СчетУчетаНДФЛ        = ПланыСчетов.Хозрасчетный.РасчетыПоНДФЛ;
	СчетВоенногоСбора    = ПланыСчетов.Хозрасчетный.РасчетыПоОбязательнымПлатежам;
	СубконтоВоенныйСбор1 = Справочники.Налоги.ВоенныйСбор;	
		
КонецПроцедуры
                                                                                                 
Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты) 	
 		
	НеИспользуемыеТабличныеЧасти  = Новый Массив;
	МассивНепроверяемыхРеквизитов = Новый Массив; 		
		
	Если ЭтоУслуга Тогда
		ИмяТабличнойЧасти = "Услуги";
	Иначе
		ИмяТабличнойЧасти = "Товары";
	КонецЕсли;	
	
	Если ВидОперации = Перечисления.ИНАГРО_ВидыОперацийРеализации.ВСчетЗарплаты Тогда		
		МассивНепроверяемыхРеквизитов.Добавить(ИмяТабличнойЧасти + ".Контрагент");
		МассивНепроверяемыхРеквизитов.Добавить(ИмяТабличнойЧасти + ".ДоговорКонтрагента");		
	Иначе 		
		МассивНепроверяемыхРеквизитов.Добавить(ИмяТабличнойЧасти + ".Сотрудник");		
	КонецЕсли; 	
	
	Если НЕ НачислятьНДФЛ Тогда		
		МассивНепроверяемыхРеквизитов.Добавить("СчетУчетаНДФЛ");
		МассивНепроверяемыхРеквизитов.Добавить("СтавкаНДФЛ"); 	
		МассивНепроверяемыхРеквизитов.Добавить("СчетВоенногоСбора");
		МассивНепроверяемыхРеквизитов.Добавить("СтавкаВоенныйСбор");		
	Иначе 		
		КоличествоСубконто = СчетУчетаНДФЛ.ВидыСубконто.Количество();		
		Для СчетчикСубконто = 1 По КоличествоСубконто Цикл 
			Если СчетУчетаНДФЛ.ВидыСубконто[СчетчикСубконто-1].Предопределенное Тогда
				ПроверяемыеРеквизиты.Добавить("СубконтоСчетаНДФЛ" + СчетчикСубконто);
			КонецЕсли;
		КонецЦикла;		
	КонецЕсли;	
	
	Если НЕ НачислятьПоПаям Тогда		
		МассивНепроверяемыхРеквизитов.Добавить("СчетЗатрат"); 		
	Иначе		
		КоличествоСубконто = СчетЗатрат.ВидыСубконто.Количество();		
		Для СчетчикСубконто = 1 По КоличествоСубконто Цикл 			
			ПроверяемыеРеквизиты.Добавить("СчетЗатрат" + СчетчикСубконто); 			
		КонецЦикла; 		
	КонецЕсли;
	
	Если НоменклатураВТЧ Тогда 		
		МассивНепроверяемыхРеквизитов.Добавить("Номенклатура");
		МассивНепроверяемыхРеквизитов.Добавить("ЕдиницаИзмерения");
		МассивНепроверяемыхРеквизитов.Добавить("СхемаРеализации"); 	
		МассивНепроверяемыхРеквизитов.Добавить("НалоговоеНазначение"); 		
	Иначе 		
		МассивНепроверяемыхРеквизитов.Добавить(ИмяТабличнойЧасти + ".Номенклатура");
		МассивНепроверяемыхРеквизитов.Добавить(ИмяТабличнойЧасти + ".СхемаРеализации"); 	
		МассивНепроверяемыхРеквизитов.Добавить(ИмяТабличнойЧасти + ".НалоговоеНазначение");		
		Если ИмяТабличнойЧасти = "Товары" Тогда				
			МассивНепроверяемыхРеквизитов.Добавить("Товары.ЕдиницаИзмерения"); 			
		КонецЕсли;	
	КонецЕсли;
	
	Если ЭтоУслуга Тогда 		
		НеИспользуемыеТабличныеЧасти.Добавить("Товары");
		МассивНепроверяемыхРеквизитов.Добавить("СчетУчетаБУ");		
	Иначе 		
		НеИспользуемыеТабличныеЧасти.Добавить("Услуги"); 				
	КонецЕсли;
	
	Если НЕ УчетнаяПолитика.ПлательщикНалогаНаПрибыльДо2015(Организация, Дата) Тогда		
		МассивНепроверяемыхРеквизитов.Добавить("НалоговоеНазначениеДоходовИЗатрат");
		МассивНепроверяемыхРеквизитов.Добавить(ИмяТабличнойЧасти + ".НалоговоеНазначениеДоходовИЗатрат");				
	КонецЕсли;  	
		
	ОбщегоНазначенияБП.ИсключитьИзПроверкиНеиспользуемыеТабличныеЧасти(ПроверяемыеРеквизиты, НеИспользуемыеТабличныеЧасти);

	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);	

КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)

	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
		
	
	Если АвторасчетНДС Тогда
		// соответствие для хранения погрешностей округлений
		ПогрешностиОкругления = Новый Соответствие();
		// пересчет сумм НДС с учетом ошибок округления
		УчетНДСКлиентСервер.ПересчитатьНДСсУчетомПогрешностиОкругления(Товары, Ссылка, СуммаВключаетНДС, ПогрешностиОкругления, "Товары", Строка(ВалютаДокумента));
		// пересчет сумм НДС с учетом ошибок округления
		УчетНДСКлиентСервер.ПересчитатьНДСсУчетомПогрешностиОкругления(Услуги, Ссылка, СуммаВключаетНДС, ПогрешностиОкругления, "Услуги", Строка(ВалютаДокумента));
	КонецЕсли;
	
	// Посчитать суммы документа и записать ее в соответствующий реквизит шапки для показа в журналах.
	СуммаДокумента = УчетНДС.ПолучитьСуммуДокументаСНДС(ЭтотОбъект, "Товары")
		           + УчетНДС.ПолучитьСуммуДокументаСНДС(ЭтотОбъект, "Услуги");				   
				   
	Если НЕ УчетнаяПолитика.ПлательщикНДС(Организация, Дата) Тогда
		// Организация - не плательщик НДС. Установим во всех ТЧ признак соответствующего учета НДС.
		НеОблНДСДеятельность = Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяХозДеятельность;
		
		Для каждого СтрокаТЧ  Из Товары Цикл
		    СтрокаТЧ.НалоговоеНазначение = НеОблНДСДеятельность;
		КонецЦикла; 
		
		Для каждого СтрокаТЧ  Из Услуги Цикл
		    СтрокаТЧ.НалоговоеНазначение = НеОблНДСДеятельность;
		КонецЦикла; 
		
	КонецЕсли; 
	
	Если НЕ УчетнаяПолитика.ПлательщикНалогаНаПрибыльДо2015(Организация, Дата) Тогда
		
		Для каждого СтрокаТЧ  Из Товары Цикл
		    СтрокаТЧ.НалоговоеНазначениеДоходовИЗатрат = Неопределено;
		КонецЦикла;  		
				
		Для каждого СтрокаТЧ  Из Услуги Цикл
		    СтрокаТЧ.НалоговоеНазначениеДоходовИЗатрат = Неопределено;
		КонецЦикла; 
		
	КонецЕсли; 
		
КонецПроцедуры
 
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	Перем Заголовок, СтруктураШапкиДокумента;
	Перем ТаблицаПоКонтрагентам; 		
			
	ПроведениеСервер.ПодготовитьНаборыЗаписейКПроведению(ЭтотОбъект);
	Если РучнаяКорректировка Тогда
		Возврат;
	КонецЕсли; 
	
	мВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();	
	мЕстьВС                         = ЭтотОбъект.Дата >= Дата(2015,1,1);	
	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначенияБПВызовСервера.ПредставлениеДокументаПриПроведении(Ссылка);
	
	ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента); 	
		
	ПодготовитьПараметрыУчетнойПолитики(СтруктураШапкиДокумента, Отказ, Заголовок);	
	
	ПроверитьТипСклада(СтруктураШапкиДокумента, Отказ, Заголовок); 
		
	Если УказатьСуммуСписания И СуммаСписания = 0 Тогда
		ТекстСообщения = (НСтр("ru='Не указана сумма списания!';uk='Не вказана сума списання!'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Заголовок + Символы.ПС + ТекстСообщения, , "Объект.СуммаСписания", , Отказ);		
	КонецЕсли; 
	
	ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоКонтрагентам, Отказ, Заголовок); 		
	
	ПроверитьПострочноТаблицаПоКонтрагентам(ТаблицаПоКонтрагентам, СтруктураШапкиДокумента, Отказ, Заголовок);
	
	// Движения по документу
	Если НЕ Отказ Тогда
		
		ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоКонтрагентам, Отказ, Заголовок);
		
		Если ВидОперации = Перечисления.ИНАГРО_ВидыОперацийРеализации.ВСчетЗарплаты Тогда
			Если СчетВзаиморасчетовПоПаям.Родитель <> ПланыСчетов.Хозрасчетный.РасчетыПоОплатеТруда Тогда
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Счет %1 не используется при выплате заработной платы!';uk='Рахунок %1 не використовується для виплати заробітної плати!'"), СчетВзаиморасчетовПоПаям);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Заголовок + Символы.ПС + ТекстСообщения, , "Объект.СчетВзаиморасчетовПоПаям", , Отказ);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли; 		
		
	Движения.Хозрасчетный.ВыполнитьДействияПередЗаписьюДвижений();
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКЗаписиДвижений(ЭтотОбъект);

КонецПроцедуры 

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКОтменеПроведения(ЭтотОбъект);
	Движения.Записать();
	
КонецПроцедуры 
 
Процедура ПриКопировании(ОбъектКопирования)

	Дата = НачалоДня(ОбщегоНазначения.ТекущаяДатаПользователя());
	Ответственный = Пользователи.ТекущийПользователь();
	
	ДокументОснование = Неопределено; 
		
КонецПроцедуры

#КонецОбласти

#Область Проведение

// Процедура формирует структуру шапки документа и дополнительных полей.
//
Процедура ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента) Экспорт
	
	// Дерево значений, содержащее имена необходимых полей в запросе по шапке.
	Перем ДеревоПолейЗапросаПоШапке;
	
	СтруктураШапкиДокумента   = ОбщегоНазначенияРед12.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	
	// Заполним по шапке документа дерево параметров, нужных при проведении.
	ДеревоПолейЗапросаПоШапке = ОбщегоНазначенияРед12.СформироватьДеревоПолейЗапросаПоШапке();
	ОбщегоНазначенияРед12.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Склад"               , "ТипСклада",            "ТипСклада");
	ОбщегоНазначенияРед12.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "СложныйНалоговыйУчет", "СложныйНалоговыйУчет");
   	ОбщегоНазначенияРед12.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "ВедениеВзаиморасчетовНУ", "ВедениеВзаиморасчетовНУ");
   	ОбщегоНазначенияРед12.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "ВедениеВзаиморасчетов",   "ВедениеВзаиморасчетов");
	ОбщегоНазначенияРед12.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "ВалютаВзаиморасчетов", 	 "ВалютаВзаиморасчетов");
	ОбщегоНазначенияРед12.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "СхемаНалоговогоУчета",    "СхемаНалоговогоУчета");
	
	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа.
	СтруктураШапкиДокумента = УправлениеЗапасами.СформироватьЗапросПоДеревуПолей(ЭтотОбъект, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета);
	
	СтруктураШапкиДокумента.Вставить("УчитыватьНДС", Истина);	
	СтруктураШапкиДокумента.Вставить("СчетУчетаРасчетовСКонтрагентом", ПланыСчетов.Хозрасчетный.ПустаяСсылка());	
	
КонецПроцедуры

// Процедура определяет параметры учетной политики
Процедура ПодготовитьПараметрыУчетнойПолитики(СтруктураШапкиДокумента, Отказ, Заголовок)

	СтруктураШапкиДокумента.Вставить("ЕстьНалогНаПрибыльДо2015",    УчетнаяПолитика.ПлательщикНалогаНаПрибыльДо2015(СтруктураШапкиДокумента.Организация, СтруктураШапкиДокумента.Дата));
	СтруктураШапкиДокумента.Вставить("ЕстьНДС",                     УчетнаяПолитика.ПлательщикНДС(СтруктураШапкиДокумента.Организация, СтруктураШапкиДокумента.Дата));
	СтруктураШапкиДокумента.Вставить("СпособОценкиТоваровВРознице", УчетнаяПолитика.СпособОценкиТоваровВРознице(СтруктураШапкиДокумента.Организация, СтруктураШапкиДокумента.Дата));

КонецПроцедуры

// Проверяет допустимый вид склада. 
//
Процедура ПроверитьТипСклада(СтруктураШапкиДокумента, Отказ, Заголовок)
	
	Если СтруктураШапкиДокумента.ТипСклада = Перечисления.ТипыСкладов.НеавтоматизированнаяТорговаяТочка Тогда
		
		СтрокаСообщения = НСтр("ru='Документ не может осуществлять отгрузку из неавтоматизированной торговой точки!';uk='Документ не може здійснювати відвантаження з неавтоматизированной торгової точки!'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения, ЭтотОбъект, , , Отказ);  	
		
	ИначеЕсли СтруктураШапкиДокумента.ТипСклада = Перечисления.ТипыСкладов.РозничныйМагазин
		      И СтруктураШапкиДокумента.СпособОценкиТоваровВРознице = Перечисления.СпособыОценкиТоваровВРознице.ПоПродажнойСтоимости Тогда
		
		СтрокаСообщения = НСтр("ru='Нельзя указывать розничный склад, если товары в рознице учитываются по продажным ценам!';uk='Не можна вказувати роздрібний склад, якщо товари в роздрібній торгівлі обліковуються за продажними цінами!'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения, ЭтотОбъект, , , Отказ);
				
	КонецЕсли; 
	
КонецПроцедуры 

// Процедура формирует таблицы документа.
//
Процедура ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоКонтрагентам, Отказ, Заголовок) Экспорт
	
	ПогрешностиОкругления     = Новый Соответствие;
		
	// Подготовим таблицу значений ТаблицаПоКонтрагентам
	СтруктураПолей = Новый Структура();
	СтруктураПростыхПолей = Новый Структура;
	СтруктураСложныхПолей = Новый Структура;
	
	Если ВидОперации = Перечисления.ИНАГРО_ВидыОперацийРеализации.РеализацияПрочая ИЛИ
		 ВидОперации = Перечисления.ИНАГРО_ВидыОперацийРеализации.ВСчетПая Тогда		 
		СтруктураПолей.Вставить("Контрагент",  	      "Контрагент");
		СтруктураПолей.Вставить("ДоговорКонтрагента", "ДоговорКонтрагента");  		
		СтруктураПолей.Вставить("Сделка"						,	"Сделка");
		СтруктураПолей.Вставить("СложныйНалоговыйУчет"	     	,	"ДоговорКонтрагента.СложныйНалоговыйУчет");
		СтруктураПолей.Вставить("ВедениеВзаиморасчетов"         , 	"ДоговорКонтрагента.ВедениеВзаиморасчетов");
		СтруктураПолей.Вставить("ВедениеВзаиморасчетовНУ"       , 	"ДоговорКонтрагента.ВедениеВзаиморасчетовНУ");
	Иначе
		СтруктураПолей.Вставить("Сотрудник",  	      "Сотрудник");
	КонецЕсли;
	
	СтруктураПолей.Вставить("Удержано",  	                     "УдержаноНДФЛ");
	СтруктураПолей.Вставить("УдержаноВС",  	                     "УдержаноВС");
	СтруктураПолей.Вставить("Доход",  	                         "Доход");  
	СтруктураПолей.Вставить("СтавкаНДС",  	                     "СтавкаНДС");
	СтруктураПолей.Вставить("НалоговоеНазначениеДоходовИЗатрат", "НалоговоеНазначениеДоходовИЗатрат");
	
	Если НЕ ЭтоУслуга Тогда
		Если НоменклатураВТЧ Тогда
			СтруктураСложныхПолей.Вставить("Количество", "ВЫБОР КОГДА Коэффициент = 0 ТОГДА Количество ИНАЧЕ Количество* Коэффициент Конец");
		Иначе	
			СтруктураСложныхПолей.Вставить("Количество", "ВЫБОР КОГДА Ссылка.Коэффициент = 0 ТОГДА Количество ИНАЧЕ Количество* Ссылка.Коэффициент Конец");
		КонецЕсли; 
		СтруктураПолей.Вставить("НовоеКоличество",          "НовоеКоличество");    
	Иначе	
		СтруктураПолей.Вставить("Количество",  	            "Количество");    
	КонецЕсли;
	
	СтруктураПолей.Вставить("Сумма",  	                         "Сумма");
	СтруктураПолей.Вставить("Всего",  	                         "Всего");
	СтруктураПолей.Вставить("СуммаНДС",  	                     "СуммаНДС");
	
	Если НоменклатураВТЧ Тогда				
		СтруктураПолей.Вставить("Номенклатура",  	        "Номенклатура");
		СтруктураПолей.Вставить("НоменклатурнаяГруппа",  	"Номенклатура.НоменклатурнаяГруппа");
		СтруктураПолей.Вставить("НалоговоеНазначение",  	"НалоговоеНазначение");
		СтруктураПолей.Вставить("ВидНалоговойДеятельности",	"НалоговоеНазначение.ВидНалоговойДеятельности");
		СтруктураПолей.Вставить("ВидДеятельностиНДС",	    "НалоговоеНазначение.ВидДеятельностиНДС");
		СтруктураПолей.Вставить("КорСчетСписанияБУ",  	    "СхемаРеализации.СчетСебестоимости");
		СтруктураПолей.Вставить("КорСубконтоСписанияБУ1",	"СхемаРеализации.СубконтоСебестоимости1");
		СтруктураПолей.Вставить("КорСубконтоСписанияБУ2",	"СхемаРеализации.СубконтоСебестоимости2");
		СтруктураПолей.Вставить("КорСубконтоСписанияБУ3",	"СхемаРеализации.СубконтоСебестоимости3");
		СтруктураПолей.Вставить("СчетДоходовБУ",	        "СхемаРеализации.СчетДоходов");
		СтруктураПолей.Вставить("СубконтоДоходовБУ1",	    "СхемаРеализации.СубконтоДоходов1");
		СтруктураПолей.Вставить("СубконтоДоходовБУ2",	    "СхемаРеализации.СубконтоДоходов2");
		СтруктураПолей.Вставить("СубконтоДоходовБУ3",	    "СхемаРеализации.СубконтоДоходов3");
	КонецЕсли; 
	
	ТабличнаяЧасть = ?(ЭтоУслуга, "Услуги", "Товары");
	РезультатЗапросаПоКонтрагентам = ОбщегоНазначенияРед12.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, ТабличнаяЧасть, СтруктураПолей, СтруктураПростыхПолей, СтруктураСложныхПолей);
	   	
	// Подготовим таблицу товаров для проведения.
	ТаблицаПоКонтрагентам = ПодготовитьТаблицуКонтрагентов(РезультатЗапросаПоКонтрагентам, СтруктураШапкиДокумента, ПогрешностиОкругления);
	
	Если ВидОперации = Перечисления.ИНАГРО_ВидыОперацийРеализации.ВСчетЗарплаты Тогда
		ТаблицаПоКонтрагентам.Колонки.Добавить("Сделка",Новый ОписаниеТипов("ДокументСсылка.ИНАГРО_ВедомостьРеализация"));
		ТаблицаПоКонтрагентам.Колонки.Добавить("СложныйНалоговыйУчет",Новый ОписаниеТипов("Булево"));
		ТаблицаПоКонтрагентам.Колонки.Добавить("ВедениеВзаиморасчетов",Новый ОписаниеТипов("ПеречислениеСсылка.ВедениеВзаиморасчетовПоДоговорам"));
		ТаблицаПоКонтрагентам.Колонки.Добавить("ВедениеВзаиморасчетовНУ",Новый ОписаниеТипов("ПеречислениеСсылка.ВедениеВзаиморасчетовПоДоговорам"));
	КонецЕсли; 
	
КонецПроцедуры

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТоварам - результат запроса по табличной части "Товары",
//  СтруктураШапкиДокумента   - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблица значений.
//
Функция ПодготовитьТаблицуКонтрагентов(РезультатЗапросаПоКонтрагентам, СтруктураШапкиДокумента, ПогрешностиОкругления)
	
	ТаблицаКонтрагентов = РезультатЗапросаПоКонтрагентам.Выгрузить();
	
	ТаблицаКонтрагентов.Колонки.Добавить("ДокументОприходования");
	ТаблицаКонтрагентов.Колонки.Добавить("Регистратор");
	ТаблицаКонтрагентов.Колонки.Добавить("Склад");
	ТаблицаКонтрагентов.Колонки.Добавить("Организация");
	ТаблицаКонтрагентов.Колонки.Добавить("СчетУчетаБУ");
	ТаблицаКонтрагентов.Колонки.Добавить("СчетУчетаНДС");
		
	ТаблицаКонтрагентов.ЗаполнитьЗначения(ЭтотОбъект,                            	          "Регистратор");
	ТаблицаКонтрагентов.ЗаполнитьЗначения(СтруктураШапкиДокумента.Склад,         	          "Склад");
	ТаблицаКонтрагентов.ЗаполнитьЗначения(СтруктураШапкиДокумента.Организация,   	          "Организация");
	ТаблицаКонтрагентов.ЗаполнитьЗначения(СтруктураШапкиДокумента.СчетУчетаНДСПодтвержденный, "СчетУчетаНДС");
	ТаблицаКонтрагентов.ЗаполнитьЗначения(СтруктураШапкиДокумента.СчетУчетаБУ, 				  "СчетУчетаБУ");
	
	// Дополним реквизитами из шапки
	Если НЕ НоменклатураВТЧ Тогда
		ТаблицаКонтрагентов.Колонки.Добавить("Номенклатура");
		ТаблицаКонтрагентов.Колонки.Добавить("НоменклатурнаяГруппа");
		ТаблицаКонтрагентов.Колонки.Добавить("КорСчетСписанияБУ");
		ТаблицаКонтрагентов.Колонки.Добавить("НалоговоеНазначение");
		ТаблицаКонтрагентов.Колонки.Добавить("ВидНалоговойДеятельности");
		ТаблицаКонтрагентов.Колонки.Добавить("ВидДеятельностиНДС");
		ТаблицаКонтрагентов.Колонки.Добавить("КорСубконтоСписанияБУ1");
		ТаблицаКонтрагентов.Колонки.Добавить("КорСубконтоСписанияБУ2");
		ТаблицаКонтрагентов.Колонки.Добавить("КорСубконтоСписанияБУ3");
		ТаблицаКонтрагентов.Колонки.Добавить("СчетДоходовБУ");
		ТаблицаКонтрагентов.Колонки.Добавить("СубконтоДоходовБУ1");
		ТаблицаКонтрагентов.Колонки.Добавить("СубконтоДоходовБУ2");
		ТаблицаКонтрагентов.Колонки.Добавить("СубконтоДоходовБУ3");
		
		ТаблицаКонтрагентов.ЗаполнитьЗначения(СтруктураШапкиДокумента.Номенклатура,	                                "Номенклатура");
		ТаблицаКонтрагентов.ЗаполнитьЗначения(СтруктураШапкиДокумента.Номенклатура.НоменклатурнаяГруппа,	        "НоменклатурнаяГруппа");
		ТаблицаКонтрагентов.ЗаполнитьЗначения(СтруктураШапкиДокумента.НалоговоеНазначение, 					        "НалоговоеНазначение");
		ТаблицаКонтрагентов.ЗаполнитьЗначения(СтруктураШапкиДокумента.НалоговоеНазначение.ВидНалоговойДеятельности,	"ВидНалоговойДеятельности");
		ТаблицаКонтрагентов.ЗаполнитьЗначения(СтруктураШапкиДокумента.НалоговоеНазначение.ВидДеятельностиНДС, 		"ВидДеятельностиНДС");
		
		ТаблицаКонтрагентов.ЗаполнитьЗначения(СтруктураШапкиДокумента.СхемаРеализации.СчетСебестоимости, 	        "КорСчетСписанияБУ");
		ТаблицаКонтрагентов.ЗаполнитьЗначения(СтруктураШапкиДокумента.СхемаРеализации.СубконтоСебестоимости1,	    "КорСубконтоСписанияБУ1");
		ТаблицаКонтрагентов.ЗаполнитьЗначения(СтруктураШапкиДокумента.СхемаРеализации.СубконтоСебестоимости2,	    "КорСубконтоСписанияБУ2");
		ТаблицаКонтрагентов.ЗаполнитьЗначения(СтруктураШапкиДокумента.СхемаРеализации.СубконтоСебестоимости3,	    "КорСубконтоСписанияБУ3");
		
		ТаблицаКонтрагентов.ЗаполнитьЗначения(СтруктураШапкиДокумента.СхемаРеализации.СчетДоходов, 				    "СчетДоходовБУ");
		ТаблицаКонтрагентов.ЗаполнитьЗначения(СтруктураШапкиДокумента.СхемаРеализации.СубконтоДоходов1,			    "СубконтоДоходовБУ1");
		ТаблицаКонтрагентов.ЗаполнитьЗначения(СтруктураШапкиДокумента.СхемаРеализации.СубконтоДоходов2,			    "СубконтоДоходовБУ2");
		ТаблицаКонтрагентов.ЗаполнитьЗначения(СтруктураШапкиДокумента.СхемаРеализации.СубконтоДоходов3,			    "СубконтоДоходовБУ3");
	КонецЕсли; 
	
	Если ВидОперации = Перечисления.ИНАГРО_ВидыОперацийРеализации.ВСчетЗарплаты Тогда
		
		ТаблицаКонтрагентов.Колонки.Добавить("ДоговорКонтрагента");
		ТаблицаКонтрагентов.Колонки.Добавить("Контрагент");
		
		ТаблицаКонтрагентов.ЗаполнитьЗначения(СтруктураШапкиДокумента.Контрагент, 		  					        "Контрагент");
		
		Если ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
			ТаблицаКонтрагентов.ЗаполнитьЗначения(ДоговорКонтрагента, "ДоговорКонтрагента");
		Иначе
			
			Запрос = Новый Запрос;			
					
			Запрос.Текст =
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
				|	ДоговорыКонтрагентов.Ссылка КАК Договор
				|ИЗ
				|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
				|ГДЕ
				|	ДоговорыКонтрагентов.Владелец = &Контрагент";
			
			Запрос.УстановитьПараметр("Контрагент",СтруктураШапкиДокумента.контрагент);
			
			Выборка = Запрос.Выполнить().Выбрать();
			
			Если Выборка.Следующий() Тогда
				ТаблицаКонтрагентов.ЗаполнитьЗначения(Выборка.Договор, "ДоговорКонтрагента");
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыльДо2015 ИЛИ СтруктураШапкиДокумента.ЕстьНДС Тогда
		
		ТаблицаКонтрагентов.Колонки.Добавить("НалоговоеНазначениеНовое", Новый ОписаниеТипов("СправочникСсылка.НалоговыеНазначенияАктивовИЗатрат"));
		
		ТаблицаКонтрагентов.ЗагрузитьКолонку(ТаблицаКонтрагентов.ВыгрузитьКолонку("НалоговоеНазначениеДоходовИЗатрат"), "НалоговоеНазначениеНовое");
		
	КонецЕсли;
	
	Если НЕ СтруктураШапкиДокумента.УчитыватьНДС Тогда
		// для регламентного учета считаем НДС
		ТаблицаКонтрагентов.ЗаполнитьЗначения(Перечисления.СтавкиНДС.БезНДС, "СтавкаНДС");
	КонецЕсли;
	
	ДобавитьКолонкиКонтрагентовРегл(ТаблицаКонтрагентов, СтруктураШапкиДокумента, ПогрешностиОкругления);
	
	Возврат ТаблицаКонтрагентов;
	
КонецФункции

// Добавляет таблице необходимые колонки для проведения.
//
// Параметры: 
//  ТаблицаКонтрагентов 		- таблица значений,
//  СтруктураШапкиДокумента   	- выборка по результату запроса по шапке документа,
//	ПогрешностиОкругления		- соответствие.
//
// Возвращаемое значение:
//
Процедура ДобавитьКолонкиКонтрагентовРегл(ТаблицаКонтрагентов, СтруктураШапкиДокумента, ПогрешностиОкругления) Экспорт
	
	// Суммы в документе в валюте регл. учета
	ТаблицаКонтрагентов.Колонки.Добавить("СуммаБезНДСРегл",         ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаКонтрагентов.Колонки.Добавить("СуммаНДСРегл",            ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаКонтрагентов.Колонки.Добавить("СуммаСНДСРегл",           ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповЧисла(15,2));
	
	// Суммы в документе в валюте документа
	ТаблицаКонтрагентов.Колонки.Добавить("СуммаБезНДСВал",          ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаКонтрагентов.Колонки.Добавить("СуммаНДСВал",             ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаКонтрагентов.Колонки.Добавить("СуммаСНДСВал",            ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповЧисла(15,2));
	
	// Суммы в проводках в валюте регл. учета
	ТаблицаКонтрагентов.Колонки.Добавить("ПроводкиСуммаБезНДСРегл", ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаКонтрагентов.Колонки.Добавить("ПроводкиСуммаНДСРегл",    ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаКонтрагентов.Колонки.Добавить("ПроводкиСуммаСНДСРегл",   ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповЧисла(15,2));
	
	// Суммы в проводках в валюте документа
	ТаблицаКонтрагентов.Колонки.Добавить("ПроводкиСуммаБезНДСВал",  ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаКонтрагентов.Колонки.Добавить("ПроводкиСуммаНДСВал",     ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаКонтрагентов.Колонки.Добавить("ПроводкиСуммаСНДСВал",    ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповЧисла(15,2));
	
	ТаблицаКонтрагентов.Колонки.Добавить("ПроводкиСуммаНДСКурсНБУ"	 , ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповЧисла(15,2));	
	
	// Суммы для налогового учета
	ТаблицаКонтрагентов.Колонки.Добавить("СуммаВД" , ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповЧисла(15,2));	
	
	// Заполним значения в добавленных колонках 
	Для каждого СтрокаТаблицы Из ТаблицаКонтрагентов Цикл
		
		Если   СтрокаТаблицы.СтавкаНДС <> Перечисления.СтавкиНДС.НДС0
			 И СтрокаТаблицы.СтавкаНДС <> Перечисления.СтавкиНДС.НеНДС
			 И СтрокаТаблицы.СтавкаНДС <> Перечисления.СтавкиНДС.БезНДС Тогда 
			 НДС = СтрокаТаблицы.СуммаНДС;
		Иначе
			 НДС = 0;
		КонецЕсли;
		
		// Рассчитаем суммы в документе в валюте документа
		СтрокаТаблицы.СуммаСНДСВал            = СтрокаТаблицы.Всего; 
		СтрокаТаблицы.СуммаНДСВал             = НДС;
		СтрокаТаблицы.СуммаБезНДСВал  		  = СтрокаТаблицы.СуммаСНДСВал - СтрокаТаблицы.СуммаНДСВал;
		
		// Рассчитаем суммы в документе в валюте регл. учета
		СтрокаТаблицы.СуммаСНДСРегл           = СтрокаТаблицы.Всего;
		СтрокаТаблицы.СуммаНДСРегл            = СтрокаТаблицы.СуммаНДСВал;
		СтрокаТаблицы.СуммаБезНДСРегл         = СтрокаТаблицы.СуммаСНДСРегл - СтрокаТаблицы.СуммаНДСРегл;
		
		// Рассчитаем суммы в проводках в валюте регл. учета
		СтрокаТаблицы.ПроводкиСуммаСНДСРегл   = СтрокаТаблицы.СуммаСНДСРегл;
		
		// Определим значение НДС в проводках
		СтрокаТаблицы.ПроводкиСуммаНДСРегл    = СтрокаТаблицы.СуммаНДСРегл;
		СтрокаТаблицы.ПроводкиСуммаБезНДСРегл = СтрокаТаблицы.ПроводкиСуммаСНДСРегл - СтрокаТаблицы.ПроводкиСуммаНДСРегл;		
		СтрокаТаблицы.ПроводкиСуммаСНДСВал    = СтрокаТаблицы.ПроводкиСуммаСНДСРегл;
		СтрокаТаблицы.ПроводкиСуммаНДСВал     = СтрокаТаблицы.ПроводкиСуммаНДСРегл;
		СтрокаТаблицы.ПроводкиСуммаБезНДСВал  = СтрокаТаблицы.ПроводкиСуммаСНДСВал - СтрокаТаблицы.ПроводкиСуммаНДСВал;
		
		// Рассчитаем суммы налогового учета
		СтрокаТаблицы.СуммаВД                 = СтрокаТаблицы.ПроводкиСуммаБезНДСРегл;
		СтрокаТаблицы.ПроводкиСуммаНДСКурсНБУ = СтрокаТаблицы.ПроводкиСуммаНДСРегл;
		
	КонецЦикла;
	
КонецПроцедуры

// Выполняет проверки,которые нужны только для регл. учета
Процедура ПроверитьПострочноТаблицаПоКонтрагентам(ТаблицаПоКонтрагентам, СтруктураШапкиДокумента, Отказ, Заголовок)
	
	НеХозВНД_НДС = Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяНеХозДеятельность;
	НеХозВНД_НП  = Справочники.НалоговыеНазначенияАктивовИЗатрат.НКУ_НеХозДеятельность;	
	
	Для каждого СтрокаТЧ Из ТаблицаПоКонтрагентам Цикл
		
		СтрокаНачалаСообщенияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='В строке номер ""%1"" табличной части ""Товары"": ';uk='У рядку номер ""%1"" табличної частини ""Товари"": '"), СокрЛП(СтрокаТЧ.НомерСтроки));
		
		Если СтрокаТЧ.Удержано <> 0 И СтрокаТЧ.Доход = 0 Тогда   
			СтрокаСообщения = НСтр("ru='Не заполнено значение реквизита ""Доход"". Необходимо повторно рассчитать НДФЛ!';uk='Не заповнене значення реквізиту ""Дохід"". Необхідно повторно розрахувати ПДФО!'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщения, ЭтотОбъект, , , Отказ); 
		КонецЕсли; 		
		
		Если ( СтруктураШапкиДокумента.ЕстьНалогНаПрибыльДо2015) Тогда        
			
			Если НЕ ЗначениеЗаполнено(СтрокаТЧ.НалоговоеНазначениеДоходовИЗатрат) Тогда
				СтрокаСообщения = НСтр("ru = 'Не заполнено значение реквизита ""Налоговое назначение (доходов и затрат) ""!'; uk = 'Не заповнене значення реквізиту ""Податкове призначення (доходів та витрат)""!'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщения, ЭтотОбъект, , , Отказ);
			ИначеЕсли СтрокаТЧ.НалоговоеНазначениеДоходовИЗатрат = НеХозВНД_НП Тогда 
				СтрокаСообщения = НСтр("ru = 'Указано некорректное налоговое назначение доходов! Вид налоговой деятельности при реализации не может быть ""Не хозяйственной деятельностью"".'; uk = 'Вказано некоректне податкове призначення доходів! Вид податкової діяльності при реалізації не може бути ""Не господарською діяльністю"".'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщения, ЭтотОбъект, , , Отказ);  
			КонецЕсли;
			
		КонецЕсли; 		
		
		Если  СтруктураШапкиДокумента.ЕстьНДС Тогда
			
			Если НЕ ЗначениеЗаполнено(СтрокаТЧ.НалоговоеНазначение) Тогда 					
				СтрокаСообщения = НСтр("ru = 'Не заполнено значение реквизита ""Налоговое назначение (НДС)""!'; uk = 'Не заповнене значення реквізиту ""Податкове призначення (НДС)""!'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщения, ЭтотОбъект, , , Отказ);					
			ИначеЕсли СтрокаТЧ.НалоговоеНазначение = НеХозВНД_НДС Тогда	  					
				СтрокаСообщения = НСтр("ru = 'Указано некорректное налоговое назначение (НДС)!  Вид налоговой деятельности при реализации не может быть ""Не хозяйственной деятельностью"".'; uk = 'Вказано некоректне податкове призначення (ПДВ)! Вид податкової діяльності при реалізації не може бути ""Не господарською діяльністю"".'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщения, ЭтотОбъект, , , Отказ);					
			Иначе
				
				Если  НЕ СтрокаТЧ.СтавкаНДС.Пустая()
					И НЕ СтрокаТЧ.ВидДеятельностиНДС = Перечисления.ВидыДеятельностиНДС.ПропорциональноОблагаемая
					И НЕ СтрокаТЧ.ВидДеятельностиНДС = УчетНДС.ПолучитьВидДеятельностиНДС(СтрокаТЧ.СтавкаНДС) Тогда 
					
					Если СтруктураШапкиДокумента.УчитыватьНДС Тогда
						СтрокаСообщения = НСтр("ru = 'Указано некорректное налоговое назначение (НДС)! Оно  не соответствует ставке НДС, указанной в строке.'; uk = 'Вказано некоректне податкове призначення (ПДВ)! Воно не відповідає ставці ПДВ, вказаній в рядку.'");
					КонецЕсли;  						
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщения, ЭтотОбъект, , , Отказ);
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли; 			
		
	КонецЦикла;   	
	
КонецПроцедуры 

// Процедура выполняет движения по регистрам.
//
Процедура ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, Отказ, Заголовок)
	
	// Списание по партиям
	Если НЕ ЭтоУслуга Тогда 
		УправлениеЗапасамиПартионныйУчет.ДвижениеПартийТоваров(ТаблицаПоТоварам, Отказ);
		ИмяТабличнойЧасти = "Товары";
	Иначе
		ИмяТабличнойЧасти = "Услуги";
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПроводкиБУ = Движения.Хозрасчетный;
	
	// Проводки по взаиморасчетам - авансы
	// для каждого договора - отдельно запускаем зачет авансов
	
	ТаблицаПоТоварыАвансы = ТаблицаПоТоварам.Скопировать();
	ТаблицаПоТоварыАвансы.Свернуть("Контрагент,ДоговорКонтрагента,Сделка");
	
	Если ВидОперации = Перечисления.ИНАГРО_ВидыОперацийРеализации.РеализацияПрочая ИЛИ
		 ВидОперации = Перечисления.ИНАГРО_ВидыОперацийРеализации.ВСчетПая Тогда		 
		Для каждого СтрокаТаблицы Из ТаблицаПоТоварыАвансы Цикл
			СтруктураШапкиДокументаДляАвансов = Новый Структура();
			СтруктураШапкиДокументаДляАвансов = СтруктураШапкиДокумента;
			СтруктураШапкиДокументаДляАвансов.Вставить("Контрагент",СтрокаТаблицы.Контрагент);
			СтруктураШапкиДокументаДляАвансов.Вставить("ДоговорКонтрагента",СтрокаТаблицы.ДоговорКонтрагента);
			СтруктураШапкиДокументаДляАвансов.Вставить("Сделка",СтрокаТаблицы.Сделка);
			СтруктураШапкиДокументаДляАвансов.Вставить("ВедениеВзаиморасчетов",СтрокаТаблицы.ДоговорКонтрагента.ВедениеВзаиморасчетов);
			Для каждого Стр Из СтруктураШапкиДокументаДляАвансов Цикл
				СтруктураШапкиДокументаДляАвансов.СчетУчетаРасчетовСКонтрагентом = СтруктураШапкиДокументаДляАвансов.СчетВзаиморасчетовПоПаям;
			КонецЦикла; 
			
			ТаблицыДокумента = Новый Структура();
			ТаблицаПоТоварыДляАвансов = ТаблицаПоТоварам.Скопировать();
			ТаблицаПоТоварыДляАвансов.Очистить();
			
			СтруктураПоиска = Новый Структура;
			СтруктураПоиска.Вставить("Контрагент",СтрокаТаблицы.Контрагент);
			СтруктураПоиска.Вставить("ДоговорКонтрагента",СтрокаТаблицы.ДоговорКонтрагента);
			НайденныеСтроки = ТаблицаПоТоварам.НайтиСтроки(СтруктураПоиска);
			ОбщегоНазначенияБПВызовСервера.ЗагрузитьВТаблицуЗначений(НайденныеСтроки,ТаблицаПоТоварыДляАвансов);
			
		    ТаблицыДокумента.Вставить("ТаблицаПоТоварам",ТаблицаПоТоварыДляАвансов);
				
			// Возможны корректировки сумм при расчетах в валюте
			ТаблицаАвансов = БухгалтерскийУчетРасчетовСКонтрагентами.ЗачетАванса(ЭтотОбъект, СтруктураШапкиДокументаДляАвансов, мВалютаРегламентированногоУчета, ТаблицыДокумента , Отказ, Заголовок, "АВ");
			
		КонецЦикла; 
	КонецЕсли; 	
	//////////////////////
	СтруктураШапкиДокумента.Вставить("Контрагент",Контрагент);
	СтруктураШапкиДокумента.Вставить("ДоговорКонтрагента",ДоговорКонтрагента);
	/////////////////////////	
	
	КопияПроводкиБУ = Движения.Хозрасчетный.Выгрузить();
	
	Если УказатьСуммуСписания И КопияПроводкиБУ.Количество() > 0 Тогда
		ИтогКоличество = ТаблицаПоТоварам.Итог("Количество");
		ЦенаСписания   = ?(ИтогКоличество > 0,СуммаСписания / ИтогКоличество,0);
		Для каждого Стр Из КопияПроводкиБУ Цикл
			Стр.Сумма = Стр.КоличествоКт * ЦенаСписания;
		КонецЦикла; 
	КонецЕсли; 	
	
	Движения.Хозрасчетный.Загрузить(КопияПроводкиБУ); 	
		
	Для каждого СтрокаТаблицы Из ТаблицаПоТоварам Цикл
		
		// Выручка
		Если СтрокаТаблицы.Сумма = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Проводка = ПроводкиБУ.Добавить();
		
		Проводка.Период          = Дата;
		Проводка.Активность      = Истина;
		Проводка.Организация     = СтруктураШапкиДокумента.Организация;
		Проводка.Сумма           = СтрокаТаблицы.ПроводкиСуммаСНДСРегл;
		Если ЭтоУслуга Тогда 
			Проводка.Содержание            = НСтр("ru='Оказание услуги';uk='Надання послуг'");
		Иначе 
			Проводка.Содержание            = НСтр("ru='Реализация товаров';uk='Реалізація товарів'");
		КонецЕсли;
		Проводка.НомерЖурнала    = "";
		
		Проводка.СчетДт          = СтруктураШапкиДокумента.СчетВзаиморасчетовПоПаям;
		Если ВидОперации = Перечисления.ИНАГРО_ВидыОперацийРеализации.ВСчетЗарплаты Тогда
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "РаботникиОрганизаций", СтрокаТаблицы.Сотрудник);
		Иначе
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты",          СтрокаТаблицы.Контрагент);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Договоры"   ,          СтрокаТаблицы.ДоговорКонтрагента);
			Если  НЕ ВидОперации = Перечисления.ИНАГРО_ВидыОперацийРеализации.ВСчетПая Тогда		 
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ДокументыРасчетовСКонтрагентами", УправлениеВзаиморасчетами.ОпределитьДокументРасчетовСКонтрагентом(Ссылка,СтрокаТаблицы.Сделка));
			КонецЕсли;
		КонецЕсли;
		
		Проводка.СчетКт          = СтрокаТаблицы.СчетДоходовБУ;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, СтрокаТаблицы.СубконтоДоходовБУ1);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, СтрокаТаблицы.СубконтоДоходовБУ2);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3, СтрокаТаблицы.СубконтоДоходовБУ3);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "НоменклатурныеГруппы", СтрокаТаблицы.НоменклатурнаяГруппа);
		
		Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыльДо2015 Тогда
			
			Проводка.НалоговоеНазначениеКт = СтрокаТаблицы.НалоговоеНазначениеДоходовИЗатрат;
			Проводка.СуммаНУКт 			   = НалоговыйУчет.УчестьСуммуАвансаДо01042011(СтруктураШапкиДокумента, СтрокаТаблицы.ПроводкиСуммаБезНДСРегл) + СтрокаТаблицы.ПроводкиСуммаНДСРегл;
			
		КонецЕсли;
		
		// ПроводкиЗарплата.
		Если ВидОперации = Перечисления.ИНАГРО_ВидыОперацийРеализации.ВСчетЗарплаты Тогда 
			
			ПроводкиЗарплата = Движения.ВзаиморасчетыССотрудниками.Добавить();
			ПроводкиЗарплата.Период               = МесяцВыплаты;
			ПроводкиЗарплата.ВидДвижения          = ВидДвиженияНакопления.Расход;
			ПроводкиЗарплата.Организация          = Организация;
			ПроводкиЗарплата.Сотрудник            = СтрокаТаблицы.Сотрудник;
			ПроводкиЗарплата.ПериодВзаиморасчетов = МесяцВыплаты;
			ПроводкиЗарплата.СчетУчета            = СчетВзаиморасчетовПоПаям;
			ПроводкиЗарплата.СуммаВзаиморасчетов  = СтрокаТаблицы.СуммаСНДСРегл;			
			ПроводкиЗарплата.КодОперации          =  Перечисления.КодыОперацийВзаиморасчетыСРаботникамиОрганизаций.Выплата;
			
		КонецЕсли; 		
		
		НатуральныйКоэффициентВключаетВС = Истина;
	    Если ИНАГРО_ОбщийВызовСервераПовтИсп.ЕстьБСПУ() Тогда
			НатуральныйКоэффициентВключаетВС = Константы.ИНАГРО_НатуральныйКоэффициентВключаетВС.Получить();
		КонецЕсли;
		
		Если СтруктураШапкиДокумента.Дата >= Дата(2020,07,01) Тогда
			Если ЗначениеЗаполнено(СтрокаТаблицы.ДоговорКонтрагента.ИНАГРО_КодНДФЛ) Тогда 
				ВидДоходаНДФЛ = СтрокаТаблицы.ДоговорКонтрагента.ИНАГРО_КодНДФЛ;
			ИначеЕсли СтрокаТаблицы.ДоговорКонтрагента.ВидДоговора = ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.ИНАГРО_АрендаЗемли") Тогда
				ВидДоходаНДФЛ = Справочники.ВидыДоходовНДФЛ.Код08;
			ИначеЕсли СтрокаТаблицы.ДоговорКонтрагента.ВидДоговора = ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.ИНАГРО_АрендаИмущества") Тогда	
				ВидДоходаНДФЛ = Справочники.ВидыДоходовНДФЛ.Код195;
			Иначе	
				ВидДоходаНДФЛ = Справочники.ВидыДоходовНДФЛ.Код08;
			КонецЕсли;	
		Иначе	
			ВидДоходаНДФЛ = Справочники.ВидыДоходовНДФЛ.Код08;
		КонецЕсли;	
		
		Если НачислятьНДФЛ Тогда
			
			Проводка = ПроводкиБУ.Добавить();
			
			Проводка.Период          = Дата;
			Проводка.Активность      = Истина;
			Проводка.Организация     = СтруктураШапкиДокумента.Организация;
			Проводка.Сумма           = СтрокаТаблицы.Удержано;
			Проводка.Содержание      = НСтр("ru='Удержания: НДФЛ';uk='Утримання: ПДФО'");
			Проводка.НомерЖурнала    = "";
			
			Проводка.СчетДт          = СтруктураШапкиДокумента.СчетВзаиморасчетовПоПаям;
			Если ВидОперации = Перечисления.ИНАГРО_ВидыОперацийРеализации.ВСчетЗарплаты Тогда
				//
			Иначе
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты", СтрокаТаблицы.Контрагент);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Договоры"   , СтрокаТаблицы.ДоговорКонтрагента);
				Если  НЕ ВидОперации = Перечисления.ИНАГРО_ВидыОперацийРеализации.ВСчетПая Тогда		 
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ДокументыРасчетовСКонтрагентами", УправлениеВзаиморасчетами.ОпределитьДокументРасчетовСКонтрагентом(Ссылка,СтрокаТаблицы.Сделка));
				КонецЕсли;
			КонецЕсли;
			
			Проводка.СчетКт		     = СтруктураШапкиДокумента.СчетУчетаНДФЛ;						
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, СубконтоСчетаНДФЛ1);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, СубконтоСчетаНДФЛ2);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3, СубконтоСчетаНДФЛ3);			
			 
			// Движения по НДФЛ начисление
			Движение = Движения.ВзаиморасчетыПоНДФЛ.Добавить();
			Движение.ВидДвижения          = ВидДвиженияНакопления.Приход;
			Движение.Период               = СтруктураШапкиДокумента.Дата;
			Движение.Активность           = Истина;
			Движение.Контрагент           = СтрокаТаблицы.Контрагент;
			Движение.Организация          = СтруктураШапкиДокумента.Организация;
			Движение.ПериодВзаиморасчетов = НачалоМесяца(СтруктураШапкиДокумента.Дата);
			Движение.ДоходНДФЛ            = ВидДоходаНДФЛ;
			Движение.ВидСтавки            = Перечисления.ВидыСтавокНДФЛ.Основная;
			Движение.Налог                = СтрокаТаблицы.Удержано;
			Если НЕ НатуральныйКоэффициентВключаетВС И Дата >= '20160101' Тогда
				Движение.Доход = СтрокаТаблицы.Доход - СтрокаТаблицы.УдержаноВС; 
			Иначе	
				Движение.Доход = СтрокаТаблицы.Доход; 
			КонецЕсли;
			Движение.НалоговыйПериод      = НачалоМесяца(СтруктураШапкиДокумента.Дата);
			Движение.Авторасчет           = Истина;			
			
			// Движения по НДФЛ выплата
			Движение = Движения.ВзаиморасчетыПоНДФЛ.Добавить();
			Движение.ВидДвижения          = ВидДвиженияНакопления.Расход;
			Движение.Период               = СтруктураШапкиДокумента.Дата;
			Движение.Активность           = Истина;
			Движение.Контрагент           = СтрокаТаблицы.Контрагент;
			Движение.Организация          = СтруктураШапкиДокумента.Организация;
			Движение.ПериодВзаиморасчетов = НачалоМесяца(СтруктураШапкиДокумента.Дата);
			Движение.ДоходНДФЛ            = ВидДоходаНДФЛ;
			Движение.ВидСтавки           = Перечисления.ВидыСтавокНДФЛ.Основная;
			Движение.Налог = СтрокаТаблицы.Удержано;
			Если НЕ НатуральныйКоэффициентВключаетВС И Дата >= '20160101' Тогда
				Движение.Доход = СтрокаТаблицы.Доход - СтрокаТаблицы.УдержаноВС; 
			Иначе	
				Движение.Доход = СтрокаТаблицы.Доход ; 
			КонецЕсли;
			Движение.НалоговыйПериод = НачалоМесяца(СтруктураШапкиДокумента.Дата);
			Движение.Авторасчет = Истина;
						
			// ВС
			Если мЕстьВС Тогда
				
				Проводка = ПроводкиБУ.Добавить();
				
				Проводка.Период          = Дата;
				Проводка.Активность      = Истина;
				Проводка.Организация     = СтруктураШапкиДокумента.Организация;
				Проводка.Сумма           = СтрокаТаблицы.УдержаноВС;
				Проводка.Содержание      = НСтр("ru='Удержания: ВС';uk='Утримання: ВЗ'");
				Проводка.НомерЖурнала    = "";
				
				Проводка.СчетДт          = СтруктураШапкиДокумента.СчетВзаиморасчетовПоПаям;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты", СтрокаТаблицы.Контрагент);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Договоры"   , СтрокаТаблицы.ДоговорКонтрагента);
				Если  НЕ ВидОперации = Перечисления.ИНАГРО_ВидыОперацийРеализации.ВСчетПая Тогда		 
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ДокументыРасчетовСКонтрагентами", УправлениеВзаиморасчетами.ОпределитьДокументРасчетовСКонтрагентом(Ссылка,СтрокаТаблицы.Сделка));
				КонецЕсли;
				
				Проводка.СчетКт		     = СтруктураШапкиДокумента.СчетВоенногоСбора;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, ЭтотОбъект.СубконтоВоенныйСбор1);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, ЭтотОбъект.СубконтоВоенныйСбор2);
							
				// Движения по НДФЛ начисление ВС
				Движение = Движения.ВзаиморасчетыПоНДФЛ.Добавить();
				Движение.ВидДвижения          = ВидДвиженияНакопления.Приход;
				Движение.Период               = СтруктураШапкиДокумента.Дата;
				Движение.Активность           = Истина;
				Движение.Контрагент           = СтрокаТаблицы.Контрагент;
				Движение.Организация          = СтруктураШапкиДокумента.Организация;
				Движение.ПериодВзаиморасчетов = НачалоМесяца(СтруктураШапкиДокумента.Дата);
				Движение.ДоходНДФЛ 			  = ВидДоходаНДФЛ.ОблагаетсяВоеннымСбором2021; 
				Движение.ВидСтавки            = Перечисления.ВидыСтавокНДФЛ.ВоенныйСбор;
				Движение.Налог                = СтрокаТаблицы.УдержаноВС;
				Если НЕ НатуральныйКоэффициентВключаетВС И Дата >= '20160101' Тогда
					Движение.Доход     = СтрокаТаблицы.СуммаСНДСРегл; 
				Иначе	
					Движение.Доход     = СтрокаТаблицы.Доход ; 
				КонецЕсли;
				Движение.НалоговыйПериод      = НачалоМесяца(СтруктураШапкиДокумента.Дата);
				Движение.Авторасчет           = Истина;
				
				// Движения по НДФЛ выплата ВС
				Движение = Движения.ВзаиморасчетыПоНДФЛ.Добавить();
				Движение.ВидДвижения          = ВидДвиженияНакопления.Расход;
				Движение.Период               = СтруктураШапкиДокумента.Дата;
				Движение.Активность           = Истина;
				Движение.Контрагент           = СтрокаТаблицы.Контрагент;
				Движение.Организация          = СтруктураШапкиДокумента.Организация;
				Движение.ПериодВзаиморасчетов = НачалоМесяца(СтруктураШапкиДокумента.Дата);
				Движение.ДоходНДФЛ 			  = ВидДоходаНДФЛ.ОблагаетсяВоеннымСбором2021; 
				Движение.ВидСтавки            = Перечисления.ВидыСтавокНДФЛ.ВоенныйСбор;
				Движение.Налог                = СтрокаТаблицы.УдержаноВС;
				Если НЕ НатуральныйКоэффициентВключаетВС И Дата >= '20160101' Тогда
					Движение.Доход            = СтрокаТаблицы.СуммаСНДСРегл; 
				Иначе	
					Движение.Доход            = СтрокаТаблицы.Доход ; 
				КонецЕсли;
				Движение.НалоговыйПериод      = НачалоМесяца(СтруктураШапкиДокумента.Дата);
				Движение.Авторасчет           = Истина;
			КонецЕсли;
			
		// Движения по НДФЛ выплата
		Иначе
			
			Если ВидОперации = Перечисления.ИНАГРО_ВидыОперацийРеализации.ВСчетПая Тогда
									
				// Движения по НДФЛ выплата
				Движение = Движения.ВзаиморасчетыПоНДФЛ.Добавить();
				Движение.ВидДвижения          = ВидДвиженияНакопления.Расход;
				Движение.Период               = СтруктураШапкиДокумента.Дата;
				Движение.Активность           = Истина;
				Движение.Контрагент           = СтрокаТаблицы.Контрагент;
				Движение.Организация          = СтруктураШапкиДокумента.Организация;
				Движение.ПериодВзаиморасчетов = НачалоМесяца(СтруктураШапкиДокумента.Дата);
				Движение.ДоходНДФЛ            = ВидДоходаНДФЛ;
				Движение.ВидСтавки            = Перечисления.ВидыСтавокНДФЛ.Основная;
				Движение.Налог                = СтрокаТаблицы.Удержано;
				Если НЕ НатуральныйКоэффициентВключаетВС И Дата >= '20160101' Тогда
					Движение.Доход = СтрокаТаблицы.Доход - СтрокаТаблицы.УдержаноВС; 
				Иначе	
					Движение.Доход = СтрокаТаблицы.Доход ; 
				КонецЕсли;
				Движение.НалоговыйПериод      = НачалоМесяца(СтруктураШапкиДокумента.Дата);
				Движение.Авторасчет           = Истина;
							
				// ВС
				Если мЕстьВС Тогда
					
					Движение = Движения.ВзаиморасчетыПоНДФЛ.Добавить();
					Движение.ВидДвижения          = ВидДвиженияНакопления.Расход;
					Движение.Период               = СтруктураШапкиДокумента.Дата;
					Движение.Активность           = Истина;
					Движение.Контрагент           = СтрокаТаблицы.Контрагент;
					Движение.Организация          = СтруктураШапкиДокумента.Организация;
					Движение.ПериодВзаиморасчетов = НачалоМесяца(СтруктураШапкиДокумента.Дата);
					Движение.ДоходНДФЛ 			  = ВидДоходаНДФЛ.ОблагаетсяВоеннымСбором2021; 
					Движение.ВидСтавки            = Перечисления.ВидыСтавокНДФЛ.ВоенныйСбор;
					Движение.Налог                = СтрокаТаблицы.УдержаноВС;
					Если НЕ НатуральныйКоэффициентВключаетВС И Дата >= '20160101' Тогда
						Движение.Доход = СтрокаТаблицы.СуммаСНДСРегл; 
					Иначе	
						Движение.Доход = СтрокаТаблицы.Доход ; 
					КонецЕсли;
					Движение.НалоговыйПериод      = НачалоМесяца(СтруктураШапкиДокумента.Дата);
					Движение.Авторасчет           = Истина;
					
				КонецЕсли;
				
			КонецЕсли; 
			
		КонецЕсли; 
			
		Если НачислятьПоПаям Тогда
			
			Проводка = ПроводкиБУ.Добавить();
			
			Проводка.Период          = Дата;
			Проводка.Активность      = Истина;
			Проводка.Организация     = СтруктураШапкиДокумента.Организация;
			Проводка.Сумма           = СтрокаТаблицы.Доход; 
			Проводка.Содержание      = НСтр("ru='Начисление паев';uk='Нарахування паїв'");
			Проводка.НомерЖурнала    = "";
			
			Проводка.СчетДт          = СтруктураШапкиДокумента.СчетЗатрат;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтруктураШапкиДокумента.СубконтоЗатрат1);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, СтруктураШапкиДокумента.СубконтоЗатрат2);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, СтруктураШапкиДокумента.СубконтоЗатрат3);
			
			Проводка.СчетКт          = СтруктураШапкиДокумента.СчетВзаиморасчетовПоПаям;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, СтрокаТаблицы.Контрагент);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, СтрокаТаблицы.ДоговорКонтрагента);			
			
			Проводка.НалоговоеНазначениеДт  = СтруктураШапкиДокумента.НалоговоеНазначениеДоходовИЗатратПоПаям; 
			
		КонецЕсли;
		
		// Движение по регистру ИНАГРО_РеализацияОрганизаций, РеализацияУслуг
		Если ЭтоУслуга Тогда
			ИНАГРО_Общий.ИНАГРО_РегистрацияРеализации(СтрокаТаблицы, СтрокаТаблицы.Количество, СтрокаТаблицы.СуммаСНДСРегл, ЭтотОбъект);
			
			СтрокаДвижения                       = Движения.РеализацияУслуг.Добавить();
			СтрокаДвижения.Период                = Дата;
			СтрокаДвижения.Организация           = СтруктураШапкиДокумента.Организация;
			СтрокаДвижения.СчетРасходов          = СтрокаТаблицы.КорСчетСписанияБУ;
			СтрокаДвижения.НоменклатурнаяГруппа  = СтрокаТаблицы.НоменклатурнаяГруппа;
			СтрокаДвижения.НалоговоеНазначениеДоходовИЗатрат  = СтрокаТаблицы.НалоговоеНазначениеДоходовИЗатрат;
			
			ЕстьСтатьяЗатрат = Ложь;
			Для Счетчик = 1 По 3 Цикл
				Если ТипЗнч(СтрокаТаблицы["КорСубконтоСписанияБУ" + Счетчик]) = Тип("СправочникСсылка.СтатьиЗатрат") Тогда
					ЕстьСтатьяЗатрат = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Если ЕстьСтатьяЗатрат = Истина Тогда
				СтрокаДвижения.СтатьяЗатрат = СтрокаТаблицы["КорСубконтоСписанияБУ" + Счетчик];
			КонецЕсли;
			
			СтрокаДвижения.Сумма                 = СтрокаТаблицы.СуммаБезНДСРегл;
		
		КонецЕсли;
		
	КонецЦикла;
	
	ТаблицаПоВторомуСобытиюНал = ДвиженияПоРегистрамНалоговогоУчета(СтруктураШапкиДокумента, ТаблицаПоТоварам, Отказ);
	
	// НДС 
	ПроводкиПоНДС(ПроводкиБУ, СтруктураШапкиДокумента, ТаблицаПоТоварам,ТаблицаПоВторомуСобытиюНал, Отказ);
	
	//// Учет реализованных услуг
	//ДвиженияПоРегиструРеализацияУслуг(СтруктураШапкиДокумента, ДатаДока, ТаблицаПоУслугам);
	//
	ИНАГРО_Общий.ИНАГРО_ДвиженияЗатратыОрганизации_Приход(СтруктураШапкиДокумента, Движения);
	
	Если ИНАГРО_ОбщийВызовСервераПовтИсп.ЕстьБСПУ() Тогда
		ИНАГРО_Общий.ИНАГРО_ВедомостьДвиженийРасход(Движения, ТаблицаПоТоварам, СтруктураШапкиДокумента);
	КонецЕсли;
	
КонецПроцедуры

Процедура ДвиженияПоРегиструРеализацияУслуг(СтруктураШапкиДокумента, ДатаДока, ТаблицаПоУслугам)
	//
	//Если НЕ СтруктураШапкиДокумента.РазрешитьУчетУслугБезПлановыхЦен Тогда
	//	Возврат;
	//КонецЕсли;
	//
	//ТипСтатьяЗатрат = Тип("СправочникСсылка.СтатьиЗатрат");
	//
	//ДвиженияРеализацияУслуг = Движения["РеализацияУслуг"];
	//
	//Для Каждого СтрокаТаблицы Из ТаблицаПоУслугам Цикл
	//	
	//	СтрокаДвижения                       = ДвиженияРеализацияУслуг.Добавить();
	//	СтрокаДвижения.Период                = ДатаДока;
	//	СтрокаДвижения.Организация           = СтруктураШапкиДокумента.Организация;
	//	СтрокаДвижения.СчетРасходов          = СтрокаТаблицы.СчетРасходовБУ;
	//	СтрокаДвижения.НоменклатурнаяГруппа  = СтрокаТаблицы.НоменклатурнаяГруппа;
	//	
	//	Если СтруктураШапкиДокумента.НеОтноситьСебестоимостьЗапасовНаРасходыПоНУ = Истина Тогда
	//	    СтрокаДвижения.НалоговоеНазначениеДоходовИЗатрат  = Справочники.НалоговыеНазначенияАктивовИЗатрат.НКУ_НеХозДеятельность;
	//	Иначе
	//		СтрокаДвижения.НалоговоеНазначениеДоходовИЗатрат  = СтрокаТаблицы.НалоговоеНазначениеДоходовИЗатрат;
	//	КонецЕсли;
	//	
	//	ЕстьСтатьяЗатрат = Ложь;
	//	Для Счетчик = 1 По 3 Цикл
	//		Если ТипЗнч(СтрокаТаблицы["СубконтоРасходовБУ" + Счетчик]) = ТипСтатьяЗатрат Тогда
	//			ЕстьСтатьяЗатрат = Истина;
	//			Прервать;
	//		КонецЕсли;
	//	КонецЦикла;
	//	Если ЕстьСтатьяЗатрат = Истина Тогда
	//		СтрокаДвижения.СтатьяЗатрат = СтрокаТаблицы["СубконтоРасходовБУ" + Счетчик];
	//	КонецЕсли;
	//	
	//	СтрокаДвижения.Сумма                 = СтрокаТаблицы.СуммаБезНДСРегл;
	//	
	//КонецЦикла;
	//
КонецПроцедуры

Функция ДвиженияПоРегистрамНалоговогоУчета(СтруктураШапкиДокумента, ТаблицаПоТоварам, Отказ) 		
		
	ТаблицаПоВторомуСобытиюНал = НалоговыйУчет.СоздатьСтруктуруТаблицыНалоговыхСумм();
	
	Если Не СтруктураШапкиДокумента.ЕстьНДС Тогда
		Возврат ТаблицаПоВторомуСобытиюНал;
	КонецЕсли;
	
	// Отразим Продажи в регистре ПродажиНалоговыйУчет
	НаборДвижений = Движения.ПродажиНалоговыйУчет;
	
	// Получим таблицу значений, совпадающую со структурой набора записей регистра.
	ТаблицаДвижений = НаборДвижений.ВыгрузитьКолонки();
	
	// ТОВАРЫ 	
	ТаблицаКопия = ТаблицаПоТоварам.Скопировать();
	
	// оставляем договор из ТЧ
	//Если ФормироватьОднуНН Тогда
	//	ТаблицаКопия.ЗаполнитьЗначения(ДоговорКонтрагента, "ДоговорКонтрагента");
	//КонецЕсли; 
	
	Если ВидОперации = Перечисления.ИНАГРО_ВидыОперацийРеализации.РеализацияПрочая ИЛИ
		 ВидОперации = Перечисления.ИНАГРО_ВидыОперацийРеализации.ВСчетПая Тогда
		 
		ТаблицаКопия.Свернуть("СтавкаНДС,ДоговорКонтрагента,Сделка,ВедениеВзаиморасчетовНУ","СуммаСНДСВал, СуммаНДСВал"); 
	Иначе
		ТаблицаКопия.Свернуть("СтавкаНДС,ДоговорКонтрагента","СуммаСНДСВал, СуммаНДСВал");
	КонецЕсли;		
			
	ТаблицаПродаж = ТаблицаКопия.Скопировать();
	
	Для каждого Строка Из ТаблицаПродаж Цикл
		Если Строка.ДоговорКонтрагента.СложныйНалоговыйУчет Тогда 
			Строка.СтавкаНДС   = Перечисления.СтавкиНДС.ПустаяСсылка();
			Строка.СуммаНДСВал = 0;
		Иначе
			Если НЕ СтруктураШапкиДокумента.ЕстьНДС Тогда
				Строка.СтавкаНДС   = Перечисления.СтавкиНДС.ПустаяСсылка();
				Строка.СуммаНДСВал = 0;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;			
	
	ТаблицаПродаж.Колонки.СуммаСНДСВал.Имя = "СуммаВзаиморасчетов";
	ТаблицаПродаж.Колонки.СуммаНДСВал.Имя  = "СуммаНДС";
	
	ТаблицаПродаж.Колонки.Добавить("РасчетныйДокумент");
	Если ВидОперации = Перечисления.ИНАГРО_ВидыОперацийРеализации.РеализацияПрочая ИЛИ
		ВидОперации = Перечисления.ИНАГРО_ВидыОперацийРеализации.ВСчетПая Тогда       
		Для каждого СтрокаРасчетов Из ТаблицаПродаж Цикл
			ТаблицаДвижений.ЗаполнитьЗначения(НалоговыйУчет.ОпределитьСделкуНалоговыйУчет(СтрокаРасчетов, ?(ЗначениеЗаполнено(СтрокаРасчетов.Сделка), СтрокаРасчетов.Сделка, Ссылка), СтрокаРасчетов.Сделка));
			СтрокаРасчетов.РасчетныйДокумент = СтрокаРасчетов.Сделка;
		КонецЦикла;	
	КонецЕсли;
	ОбщегоНазначенияБПВызовСервера.ЗагрузитьВТаблицуЗначений(ТаблицаПродаж, ТаблицаДвижений);
	
	ТаблицаДвижений.ЗаполнитьЗначения(Организация,                                                   "Организация");	
	ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СобытияПродажиНалоговыйУчет.РеализацияПокупателю, "Событие");
	
	Если ФормироватьОднуНН Тогда
		Если СтруктураШапкиДокумента.СложныйНалоговыйУчет Тогда			
			// очистим налоговые реквизиты
			ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтавкиНДС.ПустаяСсылка(), "СтавкаНДС");
			ТаблицаДвижений.ЗаполнитьЗначения(0, 									 "СуммаНДС");			
		Иначе		
			// упрощенный налоговый учет
			Если НЕ СтруктураШапкиДокумента.ЕстьНДС Тогда
				ТаблицаДвижений.ЗаполнитьЗначения(0, 									 "СуммаНДС");	
				ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтавкиНДС.ПустаяСсылка(), "СтавкаНДС");
			КонецЕсли; 			
		КонецЕсли;	
	КонецЕсли;
	
	Если НЕ Отказ И ТаблицаДвижений.Количество() > 0 Тогда
		
		НаборДвижений.мПериод          = Дата;
		НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;
		
		Движения.ПродажиНалоговыйУчет.ВыполнитьПриход();
		Движения.ПродажиНалоговыйУчет.Записать();
		
	КонецЕсли; 	
			
	// ОжидаемыйИПодтвержденныйНДСПродаж
	
	Если ФормироватьОднуНН Тогда  // Тогда Контрагент и ДоговорКонтрагента из шапки
		
		НаборДвижений = Движения.ОжидаемыйИПодтвержденныйНДСПродаж;
		
		// Получим таблицу значений, совпадающую со структурой набора записей регистра.
		ТаблицаДвижений = НаборДвижений.ВыгрузитьКолонки();
		
		ТаблицаКопия = ТаблицаПоТоварам.Скопировать();
		ТаблицаКопия.Свернуть("СтавкаНДС","СуммаБезНДСВал,СуммаНДСВал");
		ТаблицаКопия.Колонки.СуммаБезНДСВал.Имя = "БазаНДС";
		ТаблицаКопия.Колонки.СуммаНДСВал   .Имя = "СуммаНДС";
		ОбщегоНазначенияБПВызовСервера.ЗагрузитьВТаблицуЗначений(ТаблицаКопия, ТаблицаДвижений);
		
		ТаблицаДвижений.ЗаполнитьЗначения(Организация       , "Организация");
		ТаблицаДвижений.ЗаполнитьЗначения(ДоговорКонтрагента, "ДоговорКонтрагента");
		ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СобытияОжидаемыйИПодтвержденныйНДСПродаж.Реализация, "СобытиеНДС");
		ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.КодыОперацийОжидаемыйИПодтвержденныйНДСПродаж.ОжидаемыйНДС, "КодОперации");
		
		Если НЕ Отказ И ТаблицаДвижений.Количество() > 0 Тогда
			
			НаборДвижений.мПериод          = Дата;
			НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;
			
			Движения.ОжидаемыйИПодтвержденныйНДСПродаж.ВыполнитьПриход();
			Движения.ОжидаемыйИПодтвержденныйНДСПродаж.Записать();
			
		КонецЕсли;
		
	Иначе   // Тогда Контрагент и ДоговорКонтрагента из ТЧ
		
		НаборДвижений = Движения.ОжидаемыйИПодтвержденныйНДСПродаж;
		ТаблицаДвижений = НаборДвижений.ВыгрузитьКолонки();
		
		// ТОВАРЫ
		ТаблицаКопия = ТаблицаПоТоварам.Скопировать();
		
		СтрокиКУдалению = Новый Массив;
		Для каждого Строка Из ТаблицаКопия Цикл
			Если НЕ ЗначениеЗаполнено(Строка.ДоговорКонтрагента)
				ИЛИ НЕ (Строка.ДоговорКонтрагента.ВалютаВзаиморасчетов = мВалютаРегламентированногоУчета) Тогда
				СтрокиКУдалению.Добавить(Строка);
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого СтрокаТаблицы Из СтрокиКУдалению Цикл
			ТаблицаКопия.Удалить(СтрокаТаблицы);
		КонецЦикла;
		
		Если ТаблицаКопия.Количество() > 0 Тогда 
			
			ТаблицаКопия.Свернуть("ДоговорКонтрагента,СтавкаНДС","СуммаБезНДСВал,СуммаНДСВал");
			ТаблицаКопия.Колонки.СуммаБезНДСВал.Имя = "БазаНДС";
			ТаблицаКопия.Колонки.СуммаНДСВал   .Имя = "СуммаНДС";
			ОбщегоНазначенияБПВызовСервера.ЗагрузитьВТаблицуЗначений(ТаблицаКопия, ТаблицаДвижений);
			
			ТаблицаДвижений.ЗаполнитьЗначения(Организация       , "Организация");
			ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СобытияОжидаемыйИПодтвержденныйНДСПродаж.Реализация, "СобытиеНДС");
			ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.КодыОперацийОжидаемыйИПодтвержденныйНДСПродаж.ОжидаемыйНДС, "КодОперации");
			
			Если НЕ Отказ И ТаблицаДвижений.Количество() > 0 Тогда
				
				НаборДвижений.мПериод          = Дата;
				НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;
				
				Движения.ОжидаемыйИПодтвержденныйНДСПродаж.ВыполнитьПриход();
				Движения.ОжидаемыйИПодтвержденныйНДСПродаж.Записать();
				
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли; 
	
	Возврат ТаблицаПоВторомуСобытиюНал;
	
КонецФункции

// Процедура выполняет движения по регистрам НСД.
//
Процедура ПроводкиПоНДС(ПроводкиБУ, СтруктураШапкиДокумента, ТаблицаПоТоварам,ТаблицаПоВторомуСобытиюНал, Отказ)
	
	Если НЕ СтруктураШапкиДокумента.ЕстьНДС Тогда
		// Учет НДС не ведется
		Возврат;
	КонецЕсли;
	
	// Получим таблицу движений по счетам НДС
	
	// ТОВАРЫ
	ТаблицаКопия = ТаблицаПоТоварам.Скопировать(); 
	
	Если ФормироватьОднуНН Тогда 
	
		ТаблицаКопия.ЗаполнитьЗначения(СтруктураШапкиДокумента.Контрагент		,  "Контрагент");
		ТаблицаКопия.ЗаполнитьЗначения(СтруктураШапкиДокумента.ДоговорКонтрагента, "ДоговорКонтрагента");
	
	КонецЕсли;
	
	ТаблицаКопия.Свернуть("Контрагент, ДоговорКонтрагента,Сделка, СтавкаНДС, СчетДоходовБУ, СубконтоДоходовБУ1, СубконтоДоходовБУ2, СубконтоДоходовБУ3, НоменклатурнаяГруппа, СчетУчетаНДС, НалоговоеНазначениеДоходовИЗатрат,ВедениеВзаиморасчетовНУ","ПроводкиСуммаНДСРегл,ПроводкиСуммаНДСВал,ПроводкиСуммаНДСКурсНБУ"); 
	ТаблицаДвижений = ТаблицаКопия.Скопировать();
	
	Для Каждого СтрокаТаблицы Из ТаблицаДвижений Цикл
		
		Если    СтрокаТаблицы.ПроводкиСуммаНДСРегл <> 0
			ИЛИ СтрокаТаблицы.ПроводкиСуммаНДСВал  <> 0 Тогда
			
			Проводка = ПроводкиБУ.Добавить();
			
			Проводка.Период                     = СтруктураШапкиДокумента.Дата;
			Проводка.Активность                 = Истина;
			Проводка.Организация                = СтруктураШапкиДокумента.Организация;
			Проводка.Сумма                      = СтрокаТаблицы.ПроводкиСуммаНДСРегл;
			Проводка.Содержание                 = НСтр("ru='НДС: налоговые обязательства: отгрузка';uk=""ПДВ: податкові зобов'язання: відвантаження""", Локализация.КодЯзыкаИнформационнойБазы());
			Проводка.НомерЖурнала               = "";
			
			Если НЕ СтруктураШапкиДокумента.ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
				
				Проводка.СчетДт                     = СтрокаТаблицы.СчетДоходовБУ;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтрокаТаблицы.СубконтоДоходовБУ1);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, СтрокаТаблицы.СубконтоДоходовБУ2);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, СтрокаТаблицы.СубконтоДоходовБУ3);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "НоменклатурныеГруппы", СтрокаТаблицы.НоменклатурнаяГруппа);
				
				Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыльДо2015 Тогда
					
					Проводка.НалоговоеНазначениеДт = СтрокаТаблицы.НалоговоеНазначениеДоходовИЗатрат;
					Проводка.СуммаНУДт             = СтрокаТаблицы.ПроводкиСуммаНДСРегл;
					
				КонецЕсли;
				
			Иначе	
				// С 2011 года согласно НК начисляются обязательства при поставке товаров по договорам комиссии.
				Проводка.СчетДт                     = СтруктураШапкиДокумента.СчетУчетаНДСПодтвержденный;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты", СтруктураШапкиДокумента.Контрагент);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Договоры",    СтруктураШапкиДокумента.ДоговорКонтрагента);
			КонецЕсли;
			
			Проводка.СчетКт                     = СтрокаТаблицы.СчетУчетаНДС;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Контрагенты", СтрокаТаблицы.Контрагент); 
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Договоры",    СтрокаТаблицы.ДоговорКонтрагента);
			
			НалоговыйУчет.РазбитьПроводкуПоНДСНаПервоеВтороеСобытие(ТаблицаПоВторомуСобытиюНал, ПроводкиБУ, Проводка, 
													  "Кт", СтруктураШапкиДокумента.СчетУчетаНДСПодтвержденный, 
													  СтруктураШапкиДокумента.ДоговорКонтрагента, 
													  НалоговыйУчет.ОпределитьСделкуНалоговыйУчет(СтрокаТаблицы, ?(ЗначениеЗаполнено(СтрокаТаблицы.Сделка), СтрокаТаблицы.Сделка, Ссылка), СтрокаТаблицы.Сделка), СтрокаТаблицы.Сделка,
													  Перечисления.СобытияОжидаемыйИПодтвержденныйНДСПродаж.Реализация,
													  СтрокаТаблицы.СтавкаНДС,	
													  ,,,СтрокаТаблицы.ПроводкиСуммаНДСВал, СтрокаТаблицы.ПроводкиСуммаНДСКурсНБУ, КурсЗачетаАвансаРегл);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли