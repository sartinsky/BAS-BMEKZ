#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПроцедурыИФункцииПечати

Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	// Номенклатура в строках
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "НоменклатураВСтроках";
	КомандаПечати.Представление = НСтр("ru='Номенклатура в строках';uk='Номенклатура в стрічках'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечати";
	КомандаПечати.СписокФорм    = "ФормаДокументаОбщая,ФормаСписка";
	
	// Номенклатура в шапке
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "НоменклатураВШапке";
	КомандаПечати.Представление = НСтр("ru='Номенклатура в шапке';uk='Номенклатура в шапці'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечати";
	КомандаПечати.СписокФорм    = "ФормаДокументаОбщая,ФормаСписка";
	
	// Реестр документов
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "Реестр";
	КомандаПечати.Представление = НСтр("ru='Реестр документов';uk='Реєстр документів'");
	КомандаПечати.ЗаголовокФормы= НСтр("ru='Реестр документов ""Ведомость реализация""';uk='Реєстр документів ""Відомість реалізація""'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечатиРеестраДокументов";
	КомандаПечати.СписокФорм    = "ФормаСписка";
	КомандаПечати.Порядок       = 100;

КонецПроцедуры

// Процедура осуществляет печать документа 
// Можно направить печать на экран или принтер, а также распечатать необходимое количество копий.
// Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии. 
// Параметры:
// НазваниеМакета - строка, название макета.
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	// Устанавливаем признак доступности печати покомплектно.
	ПараметрыВывода.ДоступнаПечатьПоКомплектно = Истина;
	
	// Проверяем, нужно ли для макета СчетЗаказа формировать табличный документ.
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "НоменклатураВСтроках") Тогда
		// Формируем табличный документ и добавляем его в коллекцию печатных форм.
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "НоменклатураВСтроках", НСтр("ru='Номенклатура в строках';uk='Номенклатура в стрічках'"), 
		ПечатьНоменклатураВСтроках(МассивОбъектов, ОбъектыПечати, ПараметрыВывода), , "Документ.ИНАГРО_ВедомостьРеализация.ПФ_MXL_НоменклатураВСтроках", ,Истина);
	КонецЕсли;  		
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "НоменклатураВШапке") Тогда
		// Формируем табличный документ и добавляем его в коллекцию печатных форм.
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "НоменклатураВШапке",НСтр("ru='Номенклатура в шапке';uk='Номенклатура в шапці'"), 
		ПечатьНоменклатураВШапке(МассивОбъектов, ОбъектыПечати, ПараметрыВывода), ,"Документ.ИНАГРО_ВедомостьРеализация.ПФ_MXL_НоменклатураВШапке", , Истина);
	КонецЕсли;  
	
КонецПроцедуры

// Функция формирует табличный документ с печатной формой накладной,
//
// Возвращаемое значение:
//  Табличный документ - печатная форма накладной.
//
Функция ПечатьНоменклатураВСтроках(МассивОбъектов, ПараметрыПечати, ПараметрыВывода)
	
	УстановитьПривилегированныйРежим(Истина);
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ИНАГРО_ВедомостьРеализация.ПФ_MXL_НоменклатураВСтроках");
	
	// печать производится на языке, указанном в настройках пользователя
	КодЯзыкаПечать = ПараметрыВывода.КодЯзыкаДляМногоязычныхПечатныхФорм;
	Макет.КодЯзыкаМакета = КодЯзыкаПечать;
	ТабДокумент = Новый ТабличныйДокумент;
	ПервыйДокумент = Истина;
	
	Для каждого Ссылка Из МассивОбъектов Цикл
		Если НЕ ПервыйДокумент Тогда
			ТабДокумент.ВывестиВертикальныйРазделительСтраниц();
		КонецЕсли; 
		ПервыйДокумент = Ложь;
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ТекущийДокумент", Ссылка);
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ                                                      
		|	ВедомостьРеализация.Номер КАК НомерДок,
		|	ВедомостьРеализация.Дата КАК ДатаДок,
		|	ВедомостьРеализация.Организация.НаименованиеПолное КАК Организация,
		|	ВедомостьРеализация.Склад,
		|	ВедомостьРеализация.Номенклатура,
		|	ВедомостьРеализация.Комментарий
		|ИЗ
		|	Документ.ИНАГРО_ВедомостьРеализация КАК ВедомостьРеализация
		|ГДЕ
		|	ВедомостьРеализация.Ссылка = &ТекущийДокумент";
		Шапка = Запрос.Выполнить().Выбрать();
		Шапка.Следующий();
		
		ИмяТЧ = ?(Ссылка.ЭтоУслуга, "Услуги", "Товары");
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ТекущийДокумент", Ссылка);
		Запрос.УстановитьПараметр("ПустойКонтр", Справочники.Контрагенты.ПустаяСсылка());
		Запрос.УстановитьПараметр("ПустойЕДРПОУ", "");
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ 
		|	ВедомостьРеализация.НомерСтроки КАК Ном,"
		+ ?(Ссылка.ВидОперации = Перечисления.ИНАГРО_ВидыОперацийРеализации.ВСчетЗарплаты,"
		|	ВедомостьРеализация.Сотрудник КАК Контрагент,
		|	ВедомостьРеализация.Сотрудник.ФизическоеЛицо.КодПоДРФО КАК ИНН,","
		|	ВедомостьРеализация.Контрагент КАК Контрагент,
		|	ВЫБОР
		|		КОГДА ВедомостьРеализация.Контрагент.КодПоЕДРПОУ = &ПустойЕДРПОУ
		|			ТОГДА ВедомостьРеализация.Контрагент.ИНН
		|		ИНАЧЕ ВедомостьРеализация.Контрагент.КодПоЕДРПОУ
		|	КОНЕЦ КАК ИНН,") + "
		|	ВедомостьРеализация.Количество,
		|	ВедомостьРеализация.Сумма,
		|	ВедомостьРеализация.Всего,
		|	ВедомостьРеализация.Цена КАК Цена,"
		+ ?(Ссылка.НоменклатураВТЧ,"
		|	ВедомостьРеализация.Номенклатура,
		|	ВедомостьРеализация.Номенклатура.Ссылка.БазоваяЕдиницаИзмерения КАК Ед","
		|	ВедомостьРеализация.Ссылка.Номенклатура,
		|	ВедомостьРеализация.Ссылка.ЕдиницаИзмерения КАК Ед") + "
		|ИЗ
		|	Документ.ИНАГРО_ВедомостьРеализация."+ИмяТЧ+" КАК ВедомостьРеализация
		|ГДЕ
		|	ВедомостьРеализация.Ссылка = &ТекущийДокумент
		|
		|УПОРЯДОЧИТЬ ПО
		|	Ном";
		ВыборкаКон = Запрос.Выполнить().Выбрать();
		
		// выводим шапку документа	
		ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
		ОбластьМакета.Параметры.Заполнить(Шапка);
		ОбластьМакета.Параметры.ДатаДок = Формат(Шапка.ДатаДок, "ДЛФ=DD");
		ОбластьМакета.Параметры.Контрагент = ?(Ссылка.ВидОперации = Перечисления.ИНАГРО_ВидыОперацийРеализации.ВСчетЗарплаты,
		НСтр("ru='Сотрудник';uk='Співробітник'",КодЯзыкаПечать),"Контрагент");		
		ТабДокумент.Вывести(ОбластьМакета);
		
		// выводим табличную часть документа
		ОбластьМакета = Макет.ПолучитьОбласть("Строка");
		
		Пока ВыборкаКон.Следующий() Цикл
			ОбластьМакета.Параметры.Заполнить(ВыборкаКон);
			ОбластьМакета.Параметры.Сумма = ВыборкаКон.Всего;
			ТабДокумент.Вывести(ОбластьМакета);
		КонецЦикла;
		
		// выводим итоговую область документа 
		ОбластьМакета = Макет.ПолучитьОбласть("Дно");
		
		Если ИмяТЧ = "Услуги" Тогда
			ИтСумСНДС	= Ссылка.Услуги.Итог("Всего");
			ИтСумНДС	= Ссылка.Услуги.Итог("СуммаНДС");
			ОбластьМакета.Параметры.Кво = Ссылка.Услуги.Итог("Количество");
			ОбластьМакета.Параметры.Ед = Ссылка.ЕдиницаИзмерения;
		Иначе
			ИтСумСНДС	= Ссылка.Товары.Итог("Всего");
			ИтСумНДС	= Ссылка.Товары.Итог("СуммаНДС");
			Если НЕ Ссылка.НоменклатураВТЧ Тогда
				ОбластьМакета.Параметры.Кво = Ссылка.Товары.Итог("Количество");
				ОбластьМакета.Параметры.Ед = Ссылка.ЕдиницаИзмерения;
			КонецЕсли; 
		КонецЕсли;
		
		ОбластьМакета.Параметры.ИтогСуммаБезНДС	= ИтСумСНДС - ИтСумНДС;
		ОбластьМакета.Параметры.ИтогНДС = ИтСумНДС;
		ОбластьМакета.Параметры.ИтогСуммаСНДС = ИтСумСНДС;
		ОбластьМакета.Параметры.ИтогСуммаСНДСПрописью = ОбщегоНазначенияБПВызовСервера.СформироватьСуммуПрописью(ИтСумСНДС, Справочники.Валюты.НайтиПоКоду(980), КодЯзыкаПечать);
		
		ДолжностьДиректора = РегистрыСведений.ОтветственныеЛицаОрганизаций.СрезПоследних(Ссылка.Дата, Новый Структура("СтруктурнаяЕдиница, ОтветственноеЛицо", Ссылка.Организация, Перечисления.ОтветственныеЛицаОрганизаций.Руководитель));
		Если ДолжностьДиректора.Количество() <> 0 Тогда
			ОбластьМакета.Параметры.ДолжностьДиректора = ДолжностьДиректора[0].Должность;
		КонецЕсли;
		
		ТабДокумент.Вывести(ОбластьМакета);
		
	КонецЦикла; 
	
	Возврат ТабДокумент;
	
КонецФункции

// Функция формирует табличный документ с печатной формой акта об оказании услуг
//
// Возвращаемое значение:
//  Табличный документ - печатная форма акта.
//
Функция ПечатьНоменклатураВШапке(МассивОбъектов, ПараметрыПечати, ПараметрыВывода)
	
	УстановитьПривилегированныйРежим(Истина);
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ИНАГРО_ВедомостьРеализация.ПФ_MXL_НоменклатураВШапке");
	
	// печать производится на языке, указанном в настройках пользователя
	КодЯзыкаПечать = ПараметрыВывода.КодЯзыкаДляМногоязычныхПечатныхФорм;
	Макет.КодЯзыкаМакета = КодЯзыкаПечать;
	ТабДокумент = Новый ТабличныйДокумент;
	ПервыйДокумент = Истина;
	
	Для каждого Ссылка Из МассивОбъектов Цикл
		Если НЕ ПервыйДокумент Тогда
			ТабДокумент.ВывестиВертикальныйРазделительСтраниц();
		КонецЕсли; 
		ПервыйДокумент = Ложь;
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ТекущийДокумент", Ссылка);
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ 
		|	ВедомостьРеализация.Номер КАК НомерДок,
		|	ВедомостьРеализация.Дата КАК ДатаДок,
		|	ВедомостьРеализация.Организация.НаименованиеПолное КАК Организация,
		|	ВедомостьРеализация.Склад,
		|	ВедомостьРеализация.Номенклатура,
		|	ВедомостьРеализация.Комментарий
		|ИЗ
		|	Документ.ИНАГРО_ВедомостьРеализация КАК ВедомостьРеализация
		|ГДЕ
		|	ВедомостьРеализация.Ссылка = &ТекущийДокумент";
		Шапка = Запрос.Выполнить().Выбрать();
		Шапка.Следующий();
		
		ИмяТЧ = ?(Ссылка.ЭтоУслуга, "Услуги", "Товары");
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ТекущийДокумент", Ссылка);
		Запрос.УстановитьПараметр("ПустойКонтр", Справочники.Контрагенты.ПустаяСсылка());
		Запрос.УстановитьПараметр("ПустойЕДРПОУ", "");
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ 
		|	ВедомостьРеализация.НомерСтроки КАК Ном,"
		+ ?(Ссылка.ВидОперации = Перечисления.ИНАГРО_ВидыОперацийРеализации.ВСчетЗарплаты,"
		|	ВедомостьРеализация.Сотрудник КАК Контрагент,
		|	ВедомостьРеализация.Сотрудник.ФизическоеЛицо.КодПоДРФО КАК ИНН,","
		|	ВедомостьРеализация.Контрагент КАК Контрагент,
		|	ВЫБОР
		|		КОГДА ВедомостьРеализация.Контрагент.КодПоЕДРПОУ = &ПустойЕДРПОУ
		|			ТОГДА ВедомостьРеализация.Контрагент.ИНН
		|		ИНАЧЕ ВедомостьРеализация.Контрагент.КодПоЕДРПОУ
		|	КОНЕЦ КАК ИНН,") + "
		|	ВедомостьРеализация.Количество,
		|	ВедомостьРеализация.Сумма,
		|	ВедомостьРеализация.Всего,
		|	ВедомостьРеализация.Цена КАК Цена,"
		+ ?(Ссылка.НоменклатураВТЧ,"
		|	ВедомостьРеализация.Номенклатура,
		|	ВедомостьРеализация.Номенклатура.Ссылка.БазоваяЕдиницаИзмерения КАК Ед","
		|	ВедомостьРеализация.Ссылка.Номенклатура,
		|	ВедомостьРеализация.Ссылка.ЕдиницаИзмерения КАК Ед") + "
		|ИЗ
		|	Документ.ИНАГРО_ВедомостьРеализация."+ИмяТЧ+" КАК ВедомостьРеализация
		|ГДЕ
		|	ВедомостьРеализация.Ссылка = &ТекущийДокумент
		|
		|УПОРЯДОЧИТЬ ПО
		|	Ном";
		ВыборкаКон = Запрос.Выполнить().Выбрать();
		
		// выводим шапку документа
		ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
		ОбластьМакета.Параметры.Заполнить(Шапка);
		ОбластьМакета.Параметры.Контрагент = ?(Ссылка.ВидОперации = Перечисления.ИНАГРО_ВидыОперацийРеализации.ВСчетЗарплаты,
		НСтр("ru='Сотрудник';uk='Співробітник'",КодЯзыкаПечать),"Контрагент");		
		ТабДокумент.Вывести(ОбластьМакета);
		
		// выводим табличную часть документа
		ОбластьМакета = Макет.ПолучитьОбласть("Строка");
		Пока ВыборкаКон.Следующий() Цикл
			
			ОбластьМакета.Параметры.Заполнить(ВыборкаКон);
			ОбластьМакета.Параметры.Сумма = ВыборкаКон.Всего;
			ТабДокумент.Вывести(ОбластьМакета);
			
		КонецЦикла;
		
		// выводим итоговую область документа
		ОбластьМакета = Макет.ПолучитьОбласть("Дно");
		
		Если ИмяТЧ = "Услуги" Тогда
			ИтСумСНДС	= Ссылка.Услуги.Итог("Всего");
			ИтСумНДС	= Ссылка.Услуги.Итог("СуммаНДС");
			ОбластьМакета.Параметры.Кво = Ссылка.Услуги.Итог("Количество");
			ОбластьМакета.Параметры.Ед = Ссылка.ЕдиницаИзмерения;
		Иначе
			ИтСумСНДС	= Ссылка.Товары.Итог("Всего"); 
			ИтСумНДС	= Ссылка.Товары.Итог("СуммаНДС");
			Если НЕ Ссылка.НоменклатураВТЧ Тогда
				ОбластьМакета.Параметры.Кво = Ссылка.Товары.Итог("Количество");
				ОбластьМакета.Параметры.Ед = Ссылка.ЕдиницаИзмерения;
			КонецЕсли; 
		КонецЕсли;
		
		//Если Ссылка.СуммаВключаетНДС Тогда
			ОбластьМакета.Параметры.ИтогСуммаБезНДС	= ИтСумСНДС - ИтСумНДС;
			ОбластьМакета.Параметры.ИтогНДС = ИтСумНДС;
			ОбластьМакета.Параметры.ИтогСуммаСНДС = ИтСумСНДС;
		//Иначе
		//	ОбластьМакета.Параметры.ИтогСуммаБезНДС	= ИтСумСНДС;
		//	ОбластьМакета.Параметры.ИтогНДС = ИтСумНДС;
		//	ОбластьМакета.Параметры.ИтогСуммаСНДС = ИтСумСНДС + ИтСумНДС;
		//КонецЕсли;	
		ОбластьМакета.Параметры.ИтогСуммаСНДСПрописью = ОбщегоНазначенияБПВызовСервера.СформироватьСуммуПрописью(ИтСумСНДС, Справочники.Валюты.НайтиПоКоду(980), КодЯзыкаПечать);
		
		ДолжностьДиректора = РегистрыСведений.ОтветственныеЛицаОрганизаций.СрезПоследних(Ссылка.Дата, Новый Структура("СтруктурнаяЕдиница, ОтветственноеЛицо", Ссылка.Организация, Перечисления.ОтветственныеЛицаОрганизаций.Руководитель));
		Если ДолжностьДиректора.Количество() <> 0 Тогда
			ОбластьМакета.Параметры.ДолжностьДиректора = ДолжностьДиректора[0].Должность;
		КонецЕсли;
		
		ТабДокумент.Вывести(ОбластьМакета);
		
	КонецЦикла;
	
	Возврат ТабДокумент; 	
	
КонецФункции

Функция ПолучитьДополнительныеРеквизитыДляРеестра() Экспорт
	
	Результат = Новый Структура;	
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти 

#Область ОбработчикиСобытий

Процедура ОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка)
	
	Если ВидФормы <> "ФормаДокумента"
		И ВидФормы <> "ФормаОбъекта" Тогда
		Возврат;
	КонецЕсли;
	
	ВидОперации = Неопределено; 
	
	Если Параметры.Свойство("Ключ") И ЗначениеЗаполнено(Параметры.Ключ) Тогда
		ВидОперации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Параметры.Ключ, "ВидОперации");
	КонецЕсли;
	
	// Если документ копируется, то вид формы получаем из копируемого документа.
	Если НЕ ЗначениеЗаполнено(ВидОперации) Тогда
		Если Параметры.Свойство("ЗначениеКопирования")
			И ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
			ВидОперации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
			Параметры.ЗначениеКопирования, "ВидОперации");
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ВидОперации) Тогда
		Если Параметры.Свойство("ЗначенияЗаполнения") 
			И ТипЗнч(Параметры.ЗначенияЗаполнения) = Тип("Структура") Тогда
			Если Параметры.ЗначенияЗаполнения.Свойство("ВидОперации") Тогда
				ВидОперации = Параметры.ЗначенияЗаполнения.ВидОперации;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ВидОперации) Тогда
		Если Параметры.Свойство("Основание")
			И ЗначениеЗаполнено(Параметры.Основание) Тогда
			ВидОперации = ОпределитьВидОперацииПоДокументуОснованию(Параметры.Основание);
		КонецЕсли;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	ФормыИНАГРО_ВедомостьРеализация= ПолучитьСоответствиеВидовОперацийФормам();
	ВыбраннаяФорма = ФормыИНАГРО_ВедомостьРеализация[ВидОперации];
	Если ВыбраннаяФорма = Неопределено Тогда
		ВыбраннаяФорма = "ФормаДокумента";
	КонецЕсли;
	
КонецПроцедуры 

#КонецОбласти 

#Область СлужебныеПроцедурыИФункции

Функция ПолучитьСоответствиеВидовОперацийФормам() Экспорт
	
	ФормыИНАГРО_ВедомостьРеализация = Новый Соответствие;
	
	ФормыИНАГРО_ВедомостьРеализация.Вставить(Перечисления.ИНАГРО_ВидыОперацийРеализации.ВСчетЗарплаты,    "ФормаДокументаОбщая");
	ФормыИНАГРО_ВедомостьРеализация.Вставить(Перечисления.ИНАГРО_ВидыОперацийРеализации.РеализацияПрочая, "ФормаДокументаОбщая");
	ФормыИНАГРО_ВедомостьРеализация.Вставить(Перечисления.ИНАГРО_ВидыОперацийРеализации.ВСчетПая,         "ФормаДокументаОбщая"); 
	
	Возврат ФормыИНАГРО_ВедомостьРеализация;
	
КонецФункции 

Функция ОпределитьВидОперацииПоДокументуОснованию(Основание) Экспорт
	
	Результат = Перечисления.ИНАГРО_ВидыОперацийРеализации.ВСчетЗарплаты;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьФиксированныйМассивВидовОпераций() Экспорт
	
	МассивВидовОпераций = Новый Массив;
	СписокВидовОпераций = Новый СписокЗначений; 	
			
	МассивВидовОпераций.Добавить(Перечисления.ИНАГРО_ВидыОперацийРеализации.ВСчетЗарплаты);
	МассивВидовОпераций.Добавить(Перечисления.ИНАГРО_ВидыОперацийРеализации.РеализацияПрочая);
	Если ИНАГРО_ОбщийВызовСервераПовтИсп.ЕстьБСПУ() Тогда
		МассивВидовОпераций.Добавить(Перечисления.ИНАГРО_ВидыОперацийРеализации.ВСчетПая);		
	КонецЕсли;
	
	Возврат Новый ФиксированныйМассив(МассивВидовОпераций);
	
КонецФункции

#КонецОбласти 

#КонецЕсли