#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда  
	
#Область ОбработчикиСобытий

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	ТипДанныхЗаполнения = ТипЗнч(ДанныеЗаполнения);
	
	ИНАГРО_ЭлеваторЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект); 
	
	ЗаполнениеДокументов.Заполнить(ЭтотОбъект, ДанныеЗаполнения);	
				
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Дата = КонецДня(Дата);
		
КонецПроцедуры 

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	Перем Заголовок, СтруктураШапкиДокумента;
	Перем ТаблицаПоПартиям;
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКПроведению(ЭтотОбъект);
		   
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначенияБПВызовСервера.ПредставлениеДокументаПриПроведении(Ссылка);

	ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента);	
		
	// Движения по документу
	Если Не Отказ Тогда
		ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, Отказ, Заголовок);
	КонецЕсли;
	
	Движения.Хозрасчетный.ВыполнитьДействияПередЗаписьюДвижений();

	ПроведениеСервер.ПодготовитьНаборыЗаписейКЗаписиДвижений(ЭтотОбъект); 	

КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКОтменеПроведения(ЭтотОбъект);
	Движения.Записать();
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)

	Дата = НачалоДня(ОбщегоНазначения.ТекущаяДатаПользователя());
	Ответственный = Пользователи.ТекущийПользователь();
		
КонецПроцедуры

#КонецОбласти

#Область Проведение

// Процедура формирует структуру шапки документа и дополнительных полей.
//
Процедура ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента) Экспорт

	// Дерево значений, содержащее имена необходимых полей в запросе по шапке.
	Перем ДеревоПолейЗапросаПоШапке;	
	
	СтруктураШапкиДокумента   = ОбщегоНазначенияРед12.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);

	// Заполним по шапке документа дерево параметров, нужных при проведении.
	ДеревоПолейЗапросаПоШапке = ОбщегоНазначенияРед12.СформироватьДеревоПолейЗапросаПоШапке();
	ОбщегоНазначенияРед12.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "Организация", "ДоговорОрганизация");
	ОбщегоНазначенияРед12.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Владелец",             "Ссылка",      "Владелец");
	ОбщегоНазначенияРед12.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Номенклатура",         "Ссылка",      "Номенклатура");
	ОбщегоНазначенияРед12.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Склад",                "Ссылка",      "Склад");
	ОбщегоНазначенияРед12.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "МестоХранения",        "Ссылка",      "МестоХранения");
	ОбщегоНазначенияРед12.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Силос",                "Ссылка",      "Силос");
	ОбщегоНазначенияРед12.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Урожай",               "Ссылка",      "Урожай");
	ОбщегоНазначенияРед12.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Откуда",               "Ссылка",      "Откуда");

	СтруктураШапкиДокумента.Дата = КонецДня(Дата) - 5;
	СтруктураШапкиДокумента = ИНАГРО_Элеватор.ЗаполнитьСтруктуруШапкиДокументаОстаткамиФормы36Сводная(
		СтруктураШапкиДокумента, Документы.ИНАГРО_АктЗачистки.СформироватьФильтрДокумента(ЭтотОбъект, "Форма36Сводная"));
		
КонецПроцедуры

// Процедура выполняет движения по регистрам
//
Процедура ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, Отказ, Заголовок)
	
	Если СписыватьНеиспользованноеПраво Тогда
		Убыль = ФизическийВес9;
	Иначе 
		Убыль = УбыльПоВлажности + УбыльПоСорнойПримеси + УбыльПоПрочей + УбыльПоЕстественной;
	КонецЕсли;
	
	СписанаяУбыльВесаПриСушке = АктыСушкиИОчистки.Итог("тУбыльОтСушки");
	
	СтруктураШапкиДокумента.Вставить("ЗачетныйВес",     0);
	СтруктураШапкиДокумента.Вставить("КоличествоМест",  0);      
	СтруктураШапкиДокумента.Вставить("Количество",      0);        
	СтруктураШапкиДокумента.Вставить("ФизическийВес",   Убыль);	
	СтруктураШапкиДокумента.Вставить("Влажность",       0);
	СтруктураШапкиДокумента.Вставить("СорнаяПримесь",   0);
	СтруктураШапкиДокумента.Вставить("ЗерноваяПримесь", 0);
	
	// убыль
	ИНАГРО_Элеватор.ДвиженияПоРегиструФорма36СводнаяРасход(Движения, СтруктураШапкиДокумента, , , Дата);
	
	// усушка
	СтруктураШапкиДокумента.Вставить("УбыльВесаПриСушке", СписанаяУбыльВесаПриСушке);
	СтруктураШапкиДокумента.ФизическийВес = 0;
	
	ИНАГРО_Элеватор.ДвиженияПоРегиструФорма36СводнаяРасход(Движения, СтруктураШапкиДокумента, "Расход", ,Дата);
	
	// в приходные ресурсы
	СтруктураШапкиДокумента.УбыльВесаПриСушке = 0;
	СтруктураШапкиДокумента.ФизическийВес     = ФизическийВес3;
	СтруктураШапкиДокумента.Влажность         = Влажность3;
	СтруктураШапкиДокумента.СорнаяПримесь     = СорнаяПримесь3;
	СтруктураШапкиДокумента.ЗерноваяПримесь   = ЗерноваяПримесь3;
	
	ИНАГРО_Элеватор.ДвиженияПоРегиструФорма36СводнаяПриход(Движения, СтруктураШапкиДокумента, "Расход", 1, Дата);
	
	// в расходные ресурсы
	СтруктураШапкиДокумента.ФизическийВес     = ФизическийВес8;
	СтруктураШапкиДокумента.Влажность         = Влажность8;
	СтруктураШапкиДокумента.СорнаяПримесь     = СорнаяПримесь8;
	СтруктураШапкиДокумента.ЗерноваяПримесь   = ЗерноваяПримесь8;
	
	ИНАГРО_Элеватор.ДвиженияПоРегиструФорма36СводнаяРасход(Движения, СтруктураШапкиДокумента, "Расход", 1, Дата);
	
	СтруктураШапкиДокумента.ФизическийВес     = Убыль;
	СтруктураШапкиДокумента.Влажность         = 0;
	СтруктураШапкиДокумента.СорнаяПримесь     = 0;
	СтруктураШапкиДокумента.ЗерноваяПримесь   = 0;
	
	ИНАГРО_Элеватор.ДвиженияПоРегиструФорма36СводнаяРасход(Движения, СтруктураШапкиДокумента, "Расход", , Дата);
	
	// форма 37 сводная
	НеСписыватьОтходыСВладельцев = ИНАГРО_Элеватор.ПолучитьНастройкуНеСписыватьОтходыСВладельцев(ЭтотОбъект);
	ВидХраненияМестаХранения 	 = ИНАГРО_Элеватор.ПолучитьДополнительныйРеквизитМестаХранения(Дата, МестоХранения, "ВидХранения");
	
	Если НЕ ВидХраненияМестаХранения = ВидХранения Тогда
		
		Если СписокМестХранения.Количество() > 0 Тогда
			
			Для Каждого СтрМестаХранения Из СписокМестХранения Цикл
				
				СтруктураШапкиДокумента.Вставить("МестоХранения",          СтрМестаХранения.МестоХранения);
				СтруктураШапкиДокумента.Вставить("ФизическийВес",          СтрМестаХранения.Вес);
				СтруктураШапкиДокумента.Вставить("УбыльВесаПриСушке",      СтрМестаХранения.УбыльВесаПриСушке);
				
				ИНАГРО_Элеватор.ДвиженияПоРегиструОстаткиСводнаяРасход(Движения, СтруктураШапкиДокумента, Истина);
				
				// оприходование зачетного веса по перевзвешиванию
				СтруктураШапкиДокумента.Вставить("КоличествоМест",         0);
				СтруктураШапкиДокумента.Вставить("ФизическийВес",          0);
				СтруктураШапкиДокумента.Вставить("ЗачетныйВес",            СтрМестаХранения.ОстатокПоПеревзвешиванию);
				СтруктураШапкиДокумента.Вставить("ЗачетныйВесДляКонтроля", СтрМестаХранения.ОстатокПоПеревзвешиванию);
				СтруктураШапкиДокумента.Вставить("УбыльВесаПриСушке",      0);				
				
				ИНАГРО_Элеватор.ДвиженияПоРегиструОстаткиСводнаяПриход(Движения, СтруктураШапкиДокумента);
				
			КонецЦикла;
			
			Если НеСписыватьОтходыСВладельцев Тогда
				
				СтруктураШапкиДокументаКопия = ИНАГРО_Элеватор.ПолучитьКопиюСтруктуры(СтруктураШапкиДокумента);
				
				ВесОтходов = 0;
				
				Для Каждого СтрАктыСушкиИОчистки Из АктыСушкиИОчистки Цикл
					
					Если ТипЗнч(СтрАктыСушкиИОчистки.Акт) = Тип("ДокументСсылка.ИНАГРО_РеестрТТНВывоз") Тогда
						ВесОтходов = ВесОтходов + СтрАктыСушкиИОчистки.тФизическийВес5 + СтрАктыСушкиИОчистки.тФизическийВес6;
					ИначеЕсли ТипЗнч(СтрАктыСушкиИОчистки.Акт) = Тип("ДокументСсылка.ИНАГРО_АктРаспределения") Тогда
						Если СтрАктыСушкиИОчистки.Акт.ВидОперации = Перечисления.ИНАГРО_ВидыОперацийАктРаспределения.Сводный Тогда
							ВесОтходов = ВесОтходов + СтрАктыСушкиИОчистки.тФизическийВес5 + СтрАктыСушкиИОчистки.тФизическийВес6;
						КонецЕсли;
					КонецЕсли;
					
				КонецЦикла;
				
				Если НЕ ВесОтходов = 0 Тогда
					
					ВладелецДляОтходов         = ИНАГРО_Элеватор.ПолучитьПараметрУчетаЭлеватора(Дата, "ВладелецДляОтходов", Справочники.Контрагенты.ПустаяСсылка());
					ДоговорВладельцаДляОтходов = ВладелецДляОтходов.ОсновнойДоговорКонтрагента;
					
					СтруктураШапкиДокументаКопия.Вставить("ОтражатьВРегламентированномУчете", Ложь);
					СтруктураШапкиДокументаКопия.Вставить("Номенклатура",                     Номенклатура);
					СтруктураШапкиДокументаКопия.Вставить("Владелец",                         ВладелецДляОтходов);
					СтруктураШапкиДокументаКопия.Вставить("ДоговорКонтрагента",               ДоговорВладельцаДляОтходов);
					СтруктураШапкиДокументаКопия.Вставить("ФизическийВес",                    ВесОтходов);
					СтруктураШапкиДокументаКопия.Вставить("КоличествоМест",                   0);
					СтруктураШапкиДокументаКопия.Вставить("ЗачетныйВес",                      0);
					СтруктураШапкиДокументаКопия.Вставить("ЗачетныйВесДляКонтроля",           0);
					СтруктураШапкиДокументаКопия.Вставить("УбыльВесаПриСушке",                0);						
					
					ИНАГРО_Элеватор.ДвиженияПоРегиструОстаткиПриход(Движения, СтруктураШапкиДокументаКопия);
					ИНАГРО_Элеватор.ДвиженияПоРегиструФорма36Приход(Движения, СтруктураШапкиДокументаКопия);
					
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе
			
			СписыватьУсушкуПоСкладскомуУчету = ИНАГРО_Элеватор.ПолучитьПараметрУчетаЭлеватора(Дата, "СписыватьУсушкуПоСкладскомуУчету", Ложь);
			
			Если СписыватьУсушкуПоСкладскомуУчету Тогда				
				СтруктураШапкиДокумента.Вставить("ФизическийВес", Убыль - СписанаяУбыльВесаПриСушке);
			Иначе
				СтруктураШапкиДокумента.Вставить("ФизическийВес", Убыль);
			КонецЕсли;
			
			СтруктураШапкиДокумента.Вставить("УбыльВесаПриСушке", СписанаяУбыльВесаПриСушке);
			
			ИНАГРО_Элеватор.ДвиженияПоРегиструОстаткиСводнаяРасход(Движения, СтруктураШапкиДокумента, Истина);
			
			// оприходование зачетного веса по перевзвешиванию
			СтруктураШапкиДокумента.Вставить("КоличествоМест",         0);
			СтруктураШапкиДокумента.Вставить("ФизическийВес",          0);
			СтруктураШапкиДокумента.Вставить("ЗачетныйВес",            ФизическийВес7);
			СтруктураШапкиДокумента.Вставить("ЗачетныйВесДляКонтроля", ФизическийВес7);
			СтруктураШапкиДокумента.Вставить("УбыльВесаПриСушке",      0);
			
			ИНАГРО_Элеватор.ДвиженияПоРегиструОстаткиСводнаяПриход(Движения, СтруктураШапкиДокумента);
			
		КонецЕсли;
		
	КонецЕсли;		
	
	Если НеСписыватьОтходыСВладельцев Тогда			
		
		// списание неиспользованного права 
		Если СписатьНеиспользованноеПравоПоВладельцам Тогда
			
			СтруктураШапкиДокумента.Вставить("ЗачетныйВес",0);
			СтруктураШапкиДокумента.Вставить("КоличествоМест",0);
			СтруктураШапкиДокумента.Вставить("Количество",0);
			СтруктураШапкиДокумента.Вставить("УбыльВесаПриСушке",0);
			СтруктураШапкиДокумента.Вставить("УбыльВесаПриСушке",0);
			СтруктураШапкиДокумента.Вставить("УбыльВесаПоЗачистке",0);
			
			Для Каждого Строка Из Итоги Цикл
				
				Если Строка.Остаток37 > 0 Тогда
					
					СтруктураШапкиДокумента.Вставить("Владелец",           Строка.Владелец);
					СтруктураШапкиДокумента.Вставить("ДоговорКонтрагента", Строка.ДоговорКонтрагента);
					СтруктураШапкиДокумента.Вставить("ФизическийВес",      Строка.Остаток37);
					
					ИНАГРО_Элеватор.ДвиженияПоРегиструОстаткиРасход(Движения, СтруктураШапкиДокумента, Ложь);
					
				ИначеЕсли Строка.остаток37 < 0 Тогда
					
					СтруктураШапкиДокумента.Вставить("Владелец",           Строка.Владелец);
					СтруктураШапкиДокумента.Вставить("ДоговорКонтрагента", Строка.ДоговорКонтрагента);
					СтруктураШапкиДокумента.Вставить("ФизическийВес",      (-1)* Строка.Остаток37);
					
					ИНАГРО_Элеватор.ДвиженияПоРегиструОстаткиПриход(Движения, СтруктураШапкиДокумента);
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;	
	
	// расход по условному списанию по актам зачистки   
	СтруктураШапкиДокумента.Вставить("ЗачетныйВес",        0);
	СтруктураШапкиДокумента.Вставить("КоличествоМест",     0);
	СтруктураШапкиДокумента.Вставить("Количество",         0);
	СтруктураШапкиДокумента.Вставить("ФизическийВес",      0);
	СтруктураШапкиДокумента.Вставить("УбыльВесаПриСушке",  0);
	СтруктураШапкиДокумента.Вставить("УбыльВесаПриСушке",  0);
	СтруктураШапкиДокумента.Вставить("СписатьЗачетныйВес", Ложь);
	
	ТаблицаДляСписания = СформироватьЗаписиПоАктамЗачистки();		
	
	Для Каждого Строка Из ТаблицаДляСписания Цикл
		
		СтруктураШапкиДокумента.Вставить("Владелец",            Строка.Владелец);
		СтруктураШапкиДокумента.Вставить("ДоговорКонтрагента",  Строка.ДоговорКонтрагента);
		СтруктураШапкиДокумента.Вставить("УбыльВесаПоЗачистке", Строка.УбыльВесаПоЗачистке);
		
		ИНАГРО_Элеватор.ДвиженияПоРегиструОстаткиРасход(Движения, СтруктураШапкиДокумента, Истина);
		
	КонецЦикла;		
			
КонецПроцедуры 

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Функция формирует запрос по актам расчета для списания условного списания с 37 формы.
Функция СформироватьЗаписиПоАктамЗачистки()
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ИНАГРО_ОстаткиОстаткиИОбороты.Владелец,
		|	ИНАГРО_ОстаткиОстаткиИОбороты.Договор КАК ДоговорКонтрагента,
		|	ИНАГРО_ОстаткиОстаткиИОбороты.УбыльВесаПоЗачисткеКонечныйОстаток КАК УбыльВесаПоЗачистке
		|ИЗ
		|	РегистрНакопления.ИНАГРО_Остатки.ОстаткиИОбороты(&ДатаНачала, &ДатаКонца, , , ) КАК ИНАГРО_ОстаткиОстаткиИОбороты
		|ГДЕ
		|	ИНАГРО_ОстаткиОстаткиИОбороты.Организация = &Организация
		|	И ИНАГРО_ОстаткиОстаткиИОбороты.Склад = &Склад
		|	И ИНАГРО_ОстаткиОстаткиИОбороты.Урожай = &Урожай
		|	И ИНАГРО_ОстаткиОстаткиИОбороты.ВидХранения = &ВидХранения
		|	И ИНАГРО_ОстаткиОстаткиИОбороты.Номенклатура = &Номенклатура";
	
	Запрос.УстановитьПараметр("ДатаНачала",   ДатаНачала);     
	Запрос.УстановитьПараметр("ДатаКонца",    ДатаОкончания);
	Запрос.УстановитьПараметр("Организация",  Организация);
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.УстановитьПараметр("Склад",        Склад);	
	Запрос.УстановитьПараметр("ВидХранения",  ВидХранения);
	Запрос.УстановитьПараметр("Урожай",       Урожай);
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецЕсли