#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды 

	Если Параметры.Ключ.Пустая() Тогда
		ПодготовитьФормуНаСервере();
	КонецЕсли;
	
	УстановитьПараметрыВыбораВидОперации();
	
	// Если форма вызвана в режиме смена вида операции - модифицируем сразу при открытии, 
	// чтобы можно было подтвердить или отказаться от изменения путем сохранения или 
	// отказа от сохранения документа.
	Если Параметры.Свойство("ИзменитьВидОперации")
		И Параметры.ИзменитьВидОперации Тогда
		
		// Не кэшируем переменную Объект, т.к. может вызываться Форма.ИзменитьРеквизиты(),
		// которая меняет Объект.
		Объект.ВидОперации = Параметры.ЗначенияЗаполнения.ВидОперации;
		Объект.ДокументПередачи = Неопределено;
						
		Модифицированность = Истина;
		
	КонецЕсли;

	// Активизировать первую непустую табличную часть
	СписокТабличныхЧастей = Новый СписокЗначений;
	СписокТабличныхЧастей.Добавить("Товары",         "Товары");
	СписокТабличныхЧастей.Добавить("ВозвратнаяТара", "ВозвратнаяТара");
	
	АктивизироватьТабличнуюЧасть = ОбщегоНазначенияБПВызовСервера.ПолучитьПервуюНепустуюВидимуюТабличнуюЧасть(
		ЭтаФорма, СписокТабличныхЧастей);
	ОбщегоНазначенияБПВызовСервера.АктивизироватьЭлементФормы(ЭтаФорма, АктивизироватьТабличнуюЧасть);
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)

	ОбщегоНазначенияБПКлиент.ОбработкаОповещенияФормыДокумента(ЭтаФорма, Объект.Ссылка, ИмяСобытия, Параметр, Источник);

КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения	
	
	ПодготовитьФормуНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	УстановитьСостояниеДокумента();

КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
		
	 Если НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДатаДокумента) Тогда
		// Изменение времени не влияет на поведение документа.
		ТекущаяДатаДокумента = Объект.Дата;
		Возврат;
	КонецЕсли;

	// Общие проверки условий по датам.
	ТребуетсяВызовСервера = ОбщегоНазначенияБПКлиент.ТребуетсяВызовСервераПриИзмененииДатыДокумента(Объект.Дата, 
		ТекущаяДатаДокумента);
		
	// Если определили, что изменение даты может повлиять на какие-либо параметры, 
	// то передаем обработку на сервер.
	Если ТребуетсяВызовСервера Тогда
		ДатаПриИзмененииНаСервере();
	КонецЕсли;
	
	// Запомним новую дату документа.
	ТекущаяДатаДокумента = Объект.Дата;
	
КонецПроцедуры

&НаСервере     
Процедура ДатаПриИзмененииНаСервере()

	УстановитьФункциональныеОпцииФормы();

КонецПроцедуры

&НаКлиенте
Процедура ВидОперацииПриИзменении(Элемент)
	
	ОчиститьТаблицыДокумента();
			
КонецПроцедуры

&НаКлиенте
Процедура ВидОперацииНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ВидОперацииПредыдущий = Объект.ВидОперации;

КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)

	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		ОрганизацияПриИзмененииНаСервере();
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()

	УстановитьФункциональныеОпцииФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументПередачиПриИзменении(Элемент)
	
	Если (Объект.Товары.Количество() > 0) ИЛИ (Объект.ВозвратнаяТара.Количество() > 0) Тогда		
		ТекстВопроса = НСтр("ru='Перед изменением табличные части будут очищены. Продолжить?';uk='Перед зміною табличні частини будуть очищені. Продовжити?'");
		Оповещение = Новый ОписаниеОповещения("ДокументПередачиПриИзмененииЗавершение", ЭтотОбъект, Параметры);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	Иначе
		ДокументПередачиПриИзмененииНаСервере();
	КонецЕсли;	
		
КонецПроцедуры

&НаКлиенте
Процедура ДокументПередачиПриИзмененииЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Объект.ДокументПередачи = ДокументПередачиПредыдущий;
		Возврат;
	КонецЕсли; 
	
	Объект.Товары.Очистить();
	Объект.ВозвратнаяТара.Очистить(); 		
	
	ДокументПередачиПриИзмененииНаСервере();		  	
			     
КонецПроцедуры

&НаСервере
Процедура ДокументПередачиПриИзмененииНаСервере()
	
	Если ЗначениеЗаполнено(Объект.ДокументПередачи) Тогда
		
		Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
			Объект.Организация = Объект.ДокументПередачи.Организация ;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Объект.Контрагент) Тогда
			Объект.Контрагент  = Объект.ДокументПередачи.Контрагент;
		КонецЕсли;	
		
		Объект.Склад = Объект.ДокументПередачи.Склад;
		 		
	КонецЕсли; 	 

	ДокументПередачиПредыдущий = Объект.ДокументПередачи;

КонецПроцедуры

&НаКлиенте
Процедура ДокументПередачиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ДокументПередачиПредыдущий = Объект.ДокументПередачи;

	СтандартнаяОбработка = Ложь;
			
	СтруктураОтбора = Новый Структура();
	СтруктураОтбора.Вставить("Контрагент", Объект.Контрагент);
    
    ПараметрыОткрытия = Новый Структура();
    ПараметрыОткрытия.Вставить("Отбор", СтруктураОтбора);
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ИНАГРО_ВидыОперацийРасходныйОрдер.ВозвратПоПриходномуОрдеру") Тогда
		ФормаВыбора = ОткрытьФорму("Документ.ИНАГРО_ПриходныйОрдерНаТовары.ФормаВыбора", ПараметрыОткрытия, Элемент);
	КонецЕсли;
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ИНАГРО_ВидыОперацийРасходныйОрдер.РасходПоНакладной") Тогда
		ФормаВыбора = ОткрытьФорму("Документ.РеализацияТоваровУслуг.ФормаВыбора", ПараметрыОткрытия, Элемент);
	КонецЕсли;

	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ИНАГРО_ВидыОперацийРасходныйОрдер.ВозвратПоставщику") Тогда
		ФормаВыбора = ОткрытьФорму("Документ.ВозвратТоваровПоставщику.ФормаВыбора", ПараметрыОткрытия, Элемент);
	КонецЕсли;  	       
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(
		Элемент.ТекстРедактирования,
		ЭтотОбъект,
		"Объект.Комментарий");

КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиСобытийЭлементовТаблицыФормыТовары

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;

	ДанныеСтрокаТаблицы = Новый Структура("Номенклатура, ЕдиницаИзмерения, Коэффициент, Количество, Цена, СуммаБезСкидки, СуммаСкидки, Сумма, СтавкаНДС, СуммаНДС");
	ЗаполнитьЗначенияСвойств(ДанныеСтрокаТаблицы, Элементы.Товары.ТекущиеДанные);
	
	ПараметрыОбъекта = Новый Структура("Организация, Дата, Ссылка, ТипЦен, СуммаВключаетНДС,
		|ВалютаДокумента, КурсВзаиморасчетов, КратностьВзаиморасчетов, Склад, ДоговорКонтрагента");
	ЗаполнитьЗначенияСвойств(ПараметрыОбъекта, Объект);
	
	ТоварыНоменклатураПриИзмененииНаСервере(ДанныеСтрокаТаблицы, ПараметрыОбъекта);
		
	ЗаполнитьЗначенияСвойств(Элементы.Товары.ТекущиеДанные, ДанныеСтрокаТаблицы);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ТоварыНоменклатураПриИзмененииНаСервере(СтрокаТабличнойЧасти, Знач ДанныеОбъекта)

	СведенияОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОНоменклатуре(СтрокаТабличнойЧасти.Номенклатура, ДанныеОбъекта);
	
	Если СведенияОНоменклатуре = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаТабличнойЧасти.ЕдиницаИзмерения = СведенияОНоменклатуре.БазоваяЕдиницаИзмерения;
	СтрокаТабличнойЧасти.Коэффициент	  = СведенияОНоменклатуре.Коэффициент;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЕдиницаИзмеренияПриИзменении(Элемент)
		
	ДанныеСтрокаТаблицы = Новый Структура("Номенклатура, ЕдиницаИзмерения, Коэффициент, Количество");

	ЗаполнитьЗначенияСвойств(ДанныеСтрокаТаблицы, Элементы.Товары.ТекущиеДанные);
	
	ПараметрыОбъекта = Новый Структура("Организация, Дата, Ссылка");
	ЗаполнитьЗначенияСвойств(ПараметрыОбъекта, Объект);
	
	ТоварыЕдиницаИзмеренияПриИзмененииНаСервере(ДанныеСтрокаТаблицы, ПараметрыОбъекта);
	
	ЗаполнитьЗначенияСвойств(Элементы.Товары.ТекущиеДанные, ДанныеСтрокаТаблицы);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ТоварыЕдиницаИзмеренияПриИзмененииНаСервере(СтрокаТабличнойЧасти, Знач ПараметрыОбъекта)

	МетаданныеДокумента = ПараметрыОбъекта.Ссылка.Метаданные();
	
	ОбработкаТабличныхЧастей.ЗаполнитьКоэффициентТабЧасти(СтрокаТабличнойЧасти, ПараметрыОбъекта, "Товары", МетаданныеДокумента);
	 
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗаполнитьТаблицуТовары(Команда)
	
	Если НЕ ПроверитьДокументПередачи() Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.Товары.Количество() > 0 Тогда 		
		ТекстВопроса = НСтр("ru='Перед заполнением табличная часть будет очищена. Продолжить?';uk='Перед заповненням таблична частина буде очищена. Продовжити?'");
		Оповещение = Новый ОписаниеОповещения("ЗаполнитьТаблицуТоварыЗавершение", ЭтотОбъект, Параметры);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да); 
	Иначе
		ЗаполнитьТаблицуТоварыНаСервере();    		
	КонецЕсли;   	
			
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТаблицуТоварыЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат; 		
	КонецЕсли;
	
	Объект.Товары.Очистить();
	
	ЗаполнитьТаблицуТоварыНаСервере();
		     
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуТоварыНаСервере()
	
	Документ = РеквизитФормыВЗначение("Объект", Тип("ДокументОбъект.ИНАГРО_РасходныйОрдерНаТовары"));
	
	Документ.ЗаполнитьТовары();
	
	ЗначениеВРеквизитФормы(Документ, "Объект"); 
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТаблицуВозвратнаяТара(Команда)
	
	Если НЕ ПроверитьДокументПередачи() Тогда
		Возврат;
	КонецЕсли;

	Если Объект.ВозвратнаяТара.Количество() > 0 Тогда 		
		ТекстВопроса = НСтр("ru='Перед заполнением табличная часть будет очищена. Продолжить?';uk='Перед заповненням таблична частина буде очищена. Продовжити?'");
		Оповещение = Новый ОписаниеОповещения("ЗаполнитьТаблицуВозвратнаяТараЗавершение", ЭтотОбъект, Параметры);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да); 
	Иначе 	
		ЗаполнитьТаблицуВозвратнаяТараНаСервере(); 		
	КонецЕсли;  
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТаблицуВозвратнаяТараЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
    Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
        Возврат;		
	КонецЕсли;
	
	Объект.ВозвратнаяТара.Очистить();
	
	ЗаполнитьТаблицуВозвратнаяТараНаСервере();
		     
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуВозвратнаяТараНаСервере()
	
	Документ = РеквизитФормыВЗначение("Объект", Тип("ДокументОбъект.ИНАГРО_РасходныйОрдерНаТовары"));
	
	Документ.ЗаполнитьВозвратнуюТару();
	
	ЗначениеВРеквизитФормы(Документ, "Объект"); 
		
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ПодготовитьФормуНаСервере() Экспорт
	 	
	ТекущаяДатаДокумента = Объект.Дата;
	
	ВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	
	УстановитьФункциональныеОпцииФормы();
	
	УстановитьСостояниеДокумента();
	 		
	ПоступлениеТоваровУслугФормы.ОпределитьНеобходимостьРасчетаСуммыВРознице(ЭтаФорма);
	
	Если НТТ И РассчитыватьСуммаВРознице И Объект.Товары.Количество() > 0 Тогда
		
		ТоварыСвернуты	= Истина;
		Для каждого СтрокаТовары Из Объект.Товары Цикл
			Если ЗначениеЗаполнено(СтрокаТовары.Номенклатура) Тогда
				ТоварыСвернуты	= Ложь;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	Иначе
		ТоварыСвернуты	= Ложь;
	КонецЕсли;
	
	РазделениеПоСтавкамВРознице = БухгалтерскийУчетВызовСервераПовтИсп.ИспользуетсяРазделениеПоСтавкамНДСВНТТ();
	
	ЕстьВозвратнаяТара = Объект.ВозвратнаяТара.Количество() > 0;
					
КонецПроцедуры

&НаСервере
Процедура УстановитьФункциональныеОпцииФормы() 

	ОбщегоНазначенияБПКлиентСервер.УстановитьПараметрыФункциональныхОпцийФормыДокумента(ЭтаФорма);

	ПлательщикНДС               	= УчетнаяПолитика.ПлательщикНДС(Объект.Организация, Объект.Дата);	
	ПлательщикНалогаНаПрибыльДо2015 = УчетнаяПолитика.ПлательщикНалогаНаПрибыльДо2015(Объект.Организация, Объект.Дата);
	СпособОценкиТоваровВРознице 	= УчетнаяПолитика.СпособОценкиТоваровВРознице(Объект.Организация, Объект.Дата);
	УчетВПродажныхЦенах 			= СпособОценкиТоваровВРознице = Перечисления.СпособыОценкиТоваровВРознице.ПоПродажнойСтоимости;

КонецПроцедуры

&НаСервере
Процедура УстановитьПараметрыВыбораВидОперации()
	
	МассивВидовОпераций = Документы.ИНАГРО_РасходныйОрдерНаТовары.ПолучитьФиксированныйМассивВидовОпераций();
	
	ПараметрМассивВидовОпераций = Новый ПараметрВыбора("Отбор.Ссылка", МассивВидовОпераций);
	
	НовыйМассив = Новый Массив();
	НовыйМассив.Добавить(ПараметрМассивВидовОпераций);
	НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);
	
	Элементы.ВидОперации.ПараметрыВыбора = НовыеПараметры;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСостояниеДокумента()
	
	СостояниеДокумента = ОбщегоНазначенияБП.СостояниеДокумента(Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьТаблицыДокумента()
	
	Если Объект.Товары.Количество() > 0 ИЛИ Объект.ВозвратнаяТара.Количество() > 0 Тогда		
		ТекстВопроса = НСтр("ru='При смене вида операции табличные части будут очищены. Продолжить?';uk='При зміні вида операції табличні частини будуть очищені. Продовжити?'");
		Оповещение = Новый ОписаниеОповещения("ОчиститьТаблицыДокументаЗавершение", ЭтотОбъект, Параметры);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);		
	Иначе		
		ВидОперацииОбработатьИзменение();			
	КонецЕсли;     
		
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьТаблицыДокументаЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
    Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Объект.ВидОперации = ВидОперацииПредыдущий;
		ВидОперацииОбработатьИзменение();		
		Возврат;
	КонецЕсли; 
	
		Объект.Товары.Очистить();
		Объект.ВозвратнаяТара.Очистить();
		
		Объект.ДокументПередачи = Неопределено;
		
		ВидОперацииОбработатьИзменение();		  	
			     
КонецПроцедуры

&НаСервере
Процедура ВидОперацииОбработатьИзменение()
	 		
	ВидОперацииПредыдущий = Объект.ВидОперации;

	Модифицированность = Истина;

КонецПроцедуры

&НаКлиенте
Функция ПроверитьДокументПередачи()
	
	Если НЕ ЗначениеЗаполнено(Объект.ДокументПередачи) Тогда
		СтрокаСообщения = НСтр("ru='Не заполнен Документ передачи!';uk='Не заповнений Документ передачі!'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения, , ,"Объект.ДокументПередачи");
		Возврат Ложь;		
	ИначеЕсли  ЗначениеЗаполнено(Объект.ДокументПередачи)
		  И НЕ ПолучитьЗначениеРеквизита(Объект.ДокументПередачи, "Проведен") Тогда
		СтрокаСообщения = НСтр("ru='Документ передачи не проведен!';uk='Документ передачі не проведений!'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения, , ,"Объект.ДокументПередачи");
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;	
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьЗначениеРеквизита(Ссылка, Реквизит)
	
	Возврат	ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, Реквизит);
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункцииБСП

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти
