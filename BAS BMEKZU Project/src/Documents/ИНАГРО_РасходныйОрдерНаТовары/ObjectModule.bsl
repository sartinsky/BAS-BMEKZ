#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

Перем мВалютаРегламентированногоУчета;
Перем мУдалятьДвижения;

#Область ОбработчикиСобытий

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	ТипДанныхЗаполнения = ТипЗнч(ДанныеЗаполнения);
	Если ДанныеЗаполнения <> Неопределено И ТипДанныхЗаполнения <> Тип("Структура") 
		И Метаданные().ВводитсяНаОсновании.Содержит(ДанныеЗаполнения.Метаданные()) Тогда
		ЗаполнитьПоДокументуОснованию(ДанныеЗаполнения);
	КонецЕсли;
	ЗаполнениеДокументов.Заполнить(ЭтотОбъект, ДанныеЗаполнения);
	
	Если  ТипДанныхЗаполнения = Тип("Структура")
		И ДанныеЗаполнения.Свойство("ВидОперации") Тогда
		ВидОперации = ДанныеЗаполнения.ВидОперации;
	КонецЕсли;
	
	Если ВидОперации = Перечисления.ИНАГРО_ВидыОперацийПриходныйОрдер.Перемещение Тогда
		ЭтотОбъект.Контрагент = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)

	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
			
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	Перем Заголовок, СтруктураШапкиДокумента;
	Перем ТаблицаПоТоварам, ТаблицаПоТаре; 	
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКПроведению(ЭтотОбъект); 		
	Если РучнаяКорректировка Тогда
		Возврат;
	КонецЕсли;
	
	мВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначенияБПВызовСервера.ПредставлениеДокументаПриПроведении(Ссылка);
	
	ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента);
		
	ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоТаре, Отказ, Заголовок);
	
	// Движения по документу 
	Если НЕ Отказ Тогда 		
		ДвиженияПоРегистрам(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоТаре, Отказ, Заголовок, РежимПроведения);
	КонецЕсли;
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКЗаписиДвижений(ЭтотОбъект);
			
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКОтменеПроведения(ЭтотОбъект);
	Движения.Записать();
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)

	Дата = НачалоДня(ОбщегоНазначения.ТекущаяДатаПользователя());
	Ответственный = Пользователи.ТекущийПользователь();

	ДокументОснование = Неопределено;
	
КонецПроцедуры

#КонецОбласти  

#Область Проведение

// Процедура формирует структуру шапки документа и дополнительных полей.
// 
Процедура ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента) Экспорт
	 	
	// Дерево значений, содержащее имена необходимых полей в запросе по шапке.
	Перем ДеревоПолейЗапросаПоШапке;
	   
	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента = ОбщегоНазначенияРед12.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	
	СтруктураШапкиДокумента.Вставить("СниматьРезерв", Ложь); // инициализация значения
	
	Если ВидОперации = Перечисления.ИНАГРО_ВидыОперацийРасходныйОрдер.ВозвратПоПриходномуОрдеру Тогда
		
		ЗапросПоШапке = Новый Запрос;
		ЗапросПоШапке.УстановитьПараметр("ДокументОснование", ДокументПередачи);
		
		ЗапросПоШапке.Текст = "ВЫБРАТЬ БезПраваПродажи 
		|ИЗ Документ.ИНАГРО_ПриходныйОрдерНаТовары
		|ГДЕ Документ.ИНАГРО_ПриходныйОрдерНаТовары.Ссылка = &ДокументОснование";
		
		ВыборкаПоШапке = ЗапросПоШапке.Выполнить().Выбрать();
		Если ВыборкаПоШапке.Следующий() Тогда
			СтруктураШапкиДокумента.Вставить("СниматьРезерв", ВыборкаПоШапке.БезПраваПродажи);
		КонецЕсли;
		
	КонецЕсли;
	
	// Заполним по шапке документа дерево параметров, нужных при проведении.
	ДеревоПолейЗапросаПоШапке      = ОбщегоНазначенияРед12.СформироватьДеревоПолейЗапросаПоШапке();
	ОбщегоНазначенияРед12.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "УчетнаяПолитика",  "ВестиПартионныйУчетПоСкладам",               "ВестиПартионныйУчетПоСкладам");
	ОбщегоНазначенияРед12.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Склад",            "ТипСклада",                                  "ТипСклада");
	 
	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа.
	СтруктураШапкиДокумента = УправлениеЗапасами.СформироватьЗапросПоДеревуПолей(ЭтотОбъект, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета);
		
КонецПроцедуры 

// Процедура формирует таблицы документа.
//
Процедура ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоТаре, Отказ, Заголовок) Экспорт
	
	// Получим необходимые данные для проведения и проверки заполенения данные 
	// по табличной части "Товары".
	
	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("НомерСтроки"                , "НомерСтроки");
	СтруктураПолей.Вставить("Номенклатура"               , "Номенклатура");
	СтруктураПолей.Вставить("Количество"                 , "Количество");
	
	СтруктураПолей.Вставить("Услуга"                     , "Номенклатура.Услуга");
	
	СтруктураПолей.Вставить("Склад"                      , "Ссылка.Склад");
	СтруктураПолей.Вставить("ТипСклада"            		 , "Ссылка.Склад.ТипСклада");
	
	РезультатЗапросаПоТоварам = ОбщегоНазначенияРед12.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураПолей);
	
	// Получим необходимые данные для проведения и проверки заполенения данные 
	// по табличной части "Возвратная тара".
	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("НомерСтроки"               , "НомерСтроки");
	СтруктураПолей.Вставить("Номенклатура"              , "Номенклатура");
	СтруктураПолей.Вставить("Количество"                , "Количество");

	СтруктураПолей.Вставить("Услуга"                    , "Номенклатура.Услуга");
	 		
	СтруктураПолей.Вставить("Склад"            			, "Ссылка.Склад");
	СтруктураПолей.Вставить("ТипСклада"            		, "Ссылка.Склад.ТипСклада");
	
	РезультатЗапросаПоТаре = ОбщегоНазначенияРед12.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "ВозвратнаяТара", СтруктураПолей);
		
	// Подготовим таблицу товаров для проведения.
	ТаблицаПоТоварам = ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента);
	
	// Подготовим таблицу тары для проведения.
	ТаблицаПоТаре = ПодготовитьТаблицуТары(РезультатЗапросаПоТаре, СтруктураШапкиДокумента);
			
КонецПроцедуры

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТоварам - результат запроса по табличной части "Товары",
//  СтруктураШапкиДокумента   - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблица значений.
//
Функция ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента)

	ТаблицаТоваров = РезультатЗапросаПоТоварам.Выгрузить();
	
	Возврат ТаблицаТоваров;

КонецФункции

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТаре  - результат запроса по табличной части "ВозвратнаяТара",
//  СтруктураШапкиДокумента - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблиица значений.
//
Функция ПодготовитьТаблицуТары(РезультатЗапросаПоТаре, СтруктураШапкиДокумента)
	
	ТаблицаТары = РезультатЗапросаПоТаре.Выгрузить();
		
	Возврат ТаблицаТары;
		
КонецФункции

Процедура ДвиженияПоРегистрам(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоТаре, Отказ, Заголовок, РежимПроведения)
	
	НаборДвижений = Движения.ИНАГРО_ТоварыНаСкладах;
	
	// Получим таблицу значений, совпадающую со структурой набора записей регистра.
	ТаблицаДвижений = НаборДвижений.ВыгрузитьКолонки();
	
	// Заполним таблицу движений.
	ОбщегоНазначенияБПВызовСервера.ЗагрузитьВТаблицуЗначений(ТаблицаПоТоварам, ТаблицаДвижений);
	
	// Недостающие поля.
	ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.Склад,           "Склад");
	ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.Организация,     "Организация");
	
	НаборДвижений.мПериод            = Дата;
	НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;
	
	// Проверка остатков.
	ОтключитьКонтрольОстатков = Константы.ОтключитьКонтрольОтрицательныхОстатков.Получить();
	Если НЕ ОтключитьКонтрольОстатков Тогда
		НаборДвижений.КонтрольОстатков(ЭтотОбъект, "Товары", СтруктураШапкиДокумента, Отказ, Заголовок);
	КонецЕсли;
	
	Если Не Отказ Тогда
		Движения.ИНАГРО_ТоварыНаСкладах.ВыполнитьРасход();
	КонецЕсли;
	
	// ТАРА ПО РЕГИСТРУ ТоварыКПолучениюНаСклады
	
	НаборДвижений = Движения.ИНАГРО_ТоварыНаСкладах;
	
	// Получим таблицу значений, совпадающую со структурой набора записей регистра.
	ТаблицаДвижений = НаборДвижений.ВыгрузитьКолонки();
	
	ОбщегоНазначенияБПВызовСервера.ЗагрузитьВТаблицуЗначений(ТаблицаПоТаре, ТаблицаДвижений);
	
	ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.Склад,           "Склад");
	ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.Организация,     "Организация");
	ТаблицаДвижений.ЗаполнитьЗначения(Истина, "ВозвратнаяТара");
	
	НаборДвижений.мПериод            = Дата;
	НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;
	
	// Проверка остатков. 
	Если Не ОтключитьКонтрольОстатков Тогда  
		НаборДвижений.КонтрольОстатков(ЭтотОбъект, "ВозвратнаяТара", СтруктураШапкиДокумента, Отказ, Заголовок);
	КонецЕсли;
	
	Если Не Отказ Тогда
		Движения.ИНАГРО_ТоварыНаСкладах.ВыполнитьРасход();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти 

#Область СлужебныеПроцедурыИФункции 

Процедура ЗаполнитьПоДокументуОснованию(Основание)
	
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ИНАГРО_ПриходныйОрдерНаТовары") Тогда
		
		// Заполним реквизиты из стандартного набора по документу основанию.
		ЗаполнениеДокументов.ЗаполнитьПоОснованию(ЭтотОбъект, Основание);
		
		ВидОперации = Перечисления.ИНАГРО_ВидыОперацийРасходныйОрдер.ВозвратПоПриходномуОрдеру;
		
		ДокументПередачи = Основание;
		Ответственный    = Основание.Ответственный;
		
		Если Основание.Проведен Тогда			
			ЗаполнитьТовары();
			ЗаполнитьВозвратнуюТару();
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
		
		// Заполним реквизиты из стандартного набора по документу основанию.
		ЗаполнениеДокументов.ЗаполнитьПоОснованию(ЭтотОбъект, Основание);
		
		ВидОперации = Перечисления.ИНАГРО_ВидыОперацийРасходныйОрдер.РасходПоНакладной;
		
		ДокументПередачи = Основание;		
				
		Если Основание.Проведен Тогда			
			ЗаполнитьТовары();
			ЗаполнитьВозвратнуюТару();
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ВозвратТоваровПоставщику") Тогда
		
		// Заполним реквизиты из стандартного набора по документу основанию.
		ЗаполнениеДокументов.ЗаполнитьПоОснованию(ЭтотОбъект, Основание);
		
		ВидОперации = Перечисления.ИНАГРО_ВидыОперацийРасходныйОрдер.ВозвратПоставщику;
		
		ДокументПередачи = Основание;		
		
		Если Основание.Проведен Тогда			
			ЗаполнитьТовары();
			ЗаполнитьВозвратнуюТару();
		КонецЕсли;
		
	КонецЕсли;	
			
КонецПроцедуры 

// Процедура выполняет заполнение табличной части Товары по приходному ордеру.
//
// Параметры
Процедура ЗаполнитьТовары() Экспорт
	
	Запрос = Новый Запрос; 
		
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ 
		|  ИНАГРО_ПриходныйОрдерНаТоварыТовары.Номенклатура,
		|  ИНАГРО_ПриходныйОрдерНаТоварыТовары.ЕдиницаИзмерения,
		|  ИНАГРО_ПриходныйОрдерНаТоварыТовары.Количество,
		|  ИНАГРО_ПриходныйОрдерНаТоварыТовары.Коэффициент
		|ИЗ
		|  Документ." + ДокументПередачи.Метаданные().Имя + ".Товары КАК ИНАГРО_ПриходныйОрдерНаТоварыТовары
		|ГДЕ
		|  ИНАГРО_ПриходныйОрдерНаТоварыТовары.Ссылка = &ДокументПередачи";
	
	Запрос.УстановитьПараметр("Склад",            Склад);
	Запрос.УстановитьПараметр("ДокументПередачи", ДокументПередачи);
		
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Количество = Выборка.Количество;
		Если Количество = 0 ИЛИ Количество = NULL Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаТабличнойЧасти = Товары.Добавить();		
		СтрокаТабличнойЧасти.Номенклатура     = Выборка.Номенклатура;
		СтрокаТабличнойЧасти.Количество       = Количество;
		СтрокаТабличнойЧасти.ЕдиницаИзмерения = Выборка.ЕдиницаИзмерения;
		СтрокаТабличнойЧасти.Коэффициент      = Выборка.Коэффициент;
		
	КонецЦикла; 		
	
КонецПроцедуры

// Процедура выполняет заполнение табличной части Возвратная Тара по приходному ордеру.
//
// Параметры
Процедура ЗаполнитьВозвратнуюТару() Экспорт
	
	Запрос = Новый Запрос;	
		
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ 
		|   ИНАГРО_ПриходныйОрдерНаТоварыВозвратнаяТара.Номенклатура,
		|   ИНАГРО_ПриходныйОрдерНаТоварыВозвратнаяТара.Количество
		|ИЗ
		|   Документ." + ДокументПередачи.Метаданные().Имя + ".ВозвратнаяТара КАК ИНАГРО_ПриходныйОрдерНаТоварыВозвратнаяТара
		|ГДЕ
		|   ИНАГРО_ПриходныйОрдерНаТоварыВозвратнаяТара.Ссылка = &ДокументПередачи";	
		
	Запрос.УстановитьПараметр("Склад",            Склад);
	Запрос.УстановитьПараметр("ДокументПередачи", ДокументПередачи);	
		
	Выборка =  Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Количество = Выборка.Количество;
		Если Количество = 0 ИЛИ Количество = NULL Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаТабличнойЧасти = ВозвратнаяТара.Добавить(); 		
		СтрокаТабличнойЧасти.Номенклатура = Выборка.Номенклатура;
		СтрокаТабличнойЧасти.Количество   = Количество;
		
	КонецЦикла; 

КонецПроцедуры

#КонецОбласти

#КонецЕсли 