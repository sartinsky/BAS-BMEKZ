#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ ПРОВЕДЕНИЯ
Перем мВалютаРегламентированногоУчета;
Перем КурсЗачетаАвансаРегл;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

Процедура СкопироватьТовары(Основание)

	Если НЕ ЗначениеЗаполнено(Основание) Тогда
		Возврат;
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Основание);
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	СчетНаОплатуПокупателюТовары.НомерСтроки КАК НомерСтроки,
	|	СчетНаОплатуПокупателюТовары.Номенклатура КАК Номенклатура,
	|	СчетНаОплатуПокупателюТовары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	СчетНаОплатуПокупателюТовары.Цена,
	|	СчетНаОплатуПокупателюТовары.СуммаБезСкидки,
	|	СчетНаОплатуПокупателюТовары.СуммаСкидки,
	|	СчетНаОплатуПокупателюТовары.Сумма,
	|	СчетНаОплатуПокупателюТовары.СтавкаНДС,
	|	СчетНаОплатуПокупателюТовары.СуммаНДС,
	|	СчетНаОплатуПокупателюТовары.Коэффициент,
	|	СчетНаОплатуПокупателюТовары.Количество
	|ИЗ
	|	Документ.СчетНаОплатуПокупателю.Товары КАК СчетНаОплатуПокупателюТовары
	|
	|ГДЕ
	|	СчетНаОплатуПокупателюТовары.Ссылка = &Ссылка
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|";
	Товары.Загрузить(Запрос.Выполнить().Выгрузить());

	Документы.РеализацияТоваровУслуг.ЗаполнитьСчетаУчетаВТабличнойЧасти(ЭтотОбъект, "Товары");

	ОснованиеСуммаВключаетНДС = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Основание, "СуммаВключаетНДС");

	Для Каждого СтрокаТЧ Из Товары Цикл
		Если ОснованиеСуммаВключаетНДС <> СуммаВключаетНДС Тогда
			СтрокаТЧ.Сумма = СтрокаТЧ.Сумма + ?(СуммаВключаетНДС, СтрокаТЧ.СуммаНДС, -СтрокаТЧ.СуммаНДС);
			// Рассчитываем реквизиты табличной части.
			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТЧ);
			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТЧ, СуммаВключаетНДС);
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

Процедура СкопироватьВозвратнуюТару(Основание)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Основание);
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	СчетНаОплатуПокупателюВозвратнаяТара.НомерСтроки,
	|	СчетНаОплатуПокупателюВозвратнаяТара.Номенклатура,
	|	СчетНаОплатуПокупателюВозвратнаяТара.Количество,
	|	СчетНаОплатуПокупателюВозвратнаяТара.Сумма,
	|	СчетНаОплатуПокупателюВозвратнаяТара.Цена
	|ИЗ
	|	Документ.СчетНаОплатуПокупателю.ВозвратнаяТара КАК СчетНаОплатуПокупателюВозвратнаяТара
	|
	|ГДЕ
	|	СчетНаОплатуПокупателюВозвратнаяТара.Ссылка = &Ссылка";
	ВозвратнаяТара.Загрузить(Запрос.Выполнить().Выгрузить());

	Документы.РеализацияТоваровУслуг.ЗаполнитьСчетаУчетаВТабличнойЧасти(ЭтотОбъект, "ВозвратнаяТара");

КонецПроцедуры

Процедура СкопироватьУслуги(Основание)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Основание);
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	СчетНаОплатуПокупателюУслуги.НомерСтроки,
	|	СчетНаОплатуПокупателюУслуги.Содержание,
	|	СчетНаОплатуПокупателюУслуги.Количество,
	|	СчетНаОплатуПокупателюУслуги.Цена,
	|	СчетНаОплатуПокупателюУслуги.СуммаБезСкидки,
	|	СчетНаОплатуПокупателюУслуги.СуммаСкидки,
	|	СчетНаОплатуПокупателюУслуги.Сумма,
	|	СчетНаОплатуПокупателюУслуги.СтавкаНДС,
	|	СчетНаОплатуПокупателюУслуги.СуммаНДС,
	|	СчетНаОплатуПокупателюУслуги.Номенклатура
	|ИЗ
	|	Документ.СчетНаОплатуПокупателю.Услуги КАК СчетНаОплатуПокупателюУслуги
	|
	|ГДЕ
	|	СчетНаОплатуПокупателюУслуги.Ссылка = &Ссылка";
	Услуги.Загрузить(Запрос.Выполнить().Выгрузить());

	Документы.РеализацияТоваровУслуг.ЗаполнитьСчетаУчетаВТабличнойЧасти(ЭтотОбъект, "Услуги");

	Если НЕ Основание.СуммаВключаетНДС = СуммаВключаетНДС Тогда
		Для Каждого СтрокаТЧ Из Услуги Цикл
			СтрокаТЧ.Сумма = СтрокаТЧ.Сумма + ?(СуммаВключаетНДС, СтрокаТЧ.СуммаНДС, -СтрокаТЧ.СуммаНДС);
			// Рассчитываем реквизиты табличной части.
			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТЧ);
			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТЧ, СуммаВключаетНДС);
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьПоПоступлению(ИмяТабЧасти, Режим, Поступление, ИмяТабЧастиИсточника = Неопределено) Экспорт

	Если НЕ ЗначениеЗаполнено(Поступление) Тогда
		Возврат;
	КонецЕсли;
	
	ТабличнаяЧасть = ЭтотОбъект[ИмяТабЧасти];
	
	Если ТабличнаяЧасть.Количество() > 0 И Режим = "Заполнить" Тогда
		ТабличнаяЧасть.Очистить();
	КонецЕсли;
	
	ТабЧастьИсточник = ?(ИмяТабЧастиИсточника = Неопределено, ИмяТабЧасти, ИмяТабЧастиИсточника);

	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Поступление", Поступление);
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ПоступлениеТоваровУслугТовары.НомерСтроки,
	|	ПоступлениеТоваровУслугТовары.Номенклатура,
	|	ПоступлениеТоваровУслугТовары.Количество" +?(ТабЧастьИсточник = "Товары" ИЛИ ТабЧастьИсточник = "Оборудование",",
	|	ПоступлениеТоваровУслугТовары.ЕдиницаИзмерения,
	|	ПоступлениеТоваровУслугТовары.Коэффициент,
	|	ПоступлениеТоваровУслугТовары.СтавкаНДС", "") + "
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг."+ТабЧастьИсточник + " КАК ПоступлениеТоваровУслугТовары
	|
	|ГДЕ
	|	ПоступлениеТоваровУслугТовары.Ссылка = &Поступление";
	
	ТаблицаТоваров = Запрос.Выполнить().Выгрузить();
	
	ДанныеОбъекта = Новый Структура("Дата, Организация, Склад, ЭтоКомиссия, Реализация");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, ЭтотОбъект);
	ДанныеОбъекта.Реализация	= Истина;
	ДанныеОбъекта.ЭтоКомиссия	= (ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДоговорКонтрагента, "ВидДоговора")
		= Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером);
	
	СоответствиеСведенийОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОСпискеНоменклатуры(
		ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаТоваров, "Номенклатура", Истина), ДанныеОбъекта);
	
	Для Каждого СтрокаТоваров Из ТаблицаТоваров Цикл
		
		СтрокаТабличнойЧасти = ТабличнаяЧасть.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтрокаТоваров);
		
		СведенияОНоменклатуре = СоответствиеСведенийОНоменклатуре.Получить(СтрокаТоваров.Номенклатура);
		Если СведенияОНоменклатуре = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Документы.РеализацияТоваровУслуг.ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(
			ДанныеОбъекта, СтрокаТабличнойЧасти, ИмяТабЧасти, СведенияОНоменклатуре);
			
		Если ИмяТабЧасти = "Товары" И ТабЧастьИсточник = "Товары" Тогда
			
			СтрокаТабличнойЧасти.СтавкаНДС = СведенияОНоменклатуре.СтавкаНДС;
			
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

Процедура ЗаполнитьПоСчету(ИмяТабЧасти, Счет) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Счет) Тогда
		Возврат;
	КонецЕсли;
	
	ТабличнаяЧасть = ЭтотОбъект[ИмяТабЧасти];
	
	Если ТабличнаяЧасть.Количество() > 0 Тогда
		ТабличнаяЧасть.Очистить();
	КонецЕсли;
	
	Если ИмяТабЧасти = "Товары" Тогда
		СкопироватьТовары(Счет);
	ИначеЕсли ИмяТабЧасти = "ВозвратнаяТара" Тогда
		СкопироватьВозвратнуюТару(Счет);
	ИначеЕсли ИмяТабЧасти = "Услуги" Тогда
		СкопироватьУслуги(Счет);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПоДокументуОснованию(Основание)
	
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.СчетНаОплатуПокупателю") Тогда
		
		// Заполним реквизиты шапки по документу основанию.
		АдресДоставки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Основание, "АдресДоставки");
		ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.ПродажаКомиссия;

		// Заполним реквизиты из стандартного набора по документу основанию.
		ЗаполнениеДокументов.ЗаполнитьПоОснованию(ЭтотОбъект, Основание, Истина); // Копировать подразделение = Истина
			
		// Сделку и табличные части заполняем только если взаиморасчеты ведутся не по расчетным документам.
		СкопироватьТовары(Основание);
		СкопироватьВозвратнуюТару(Основание);
		СкопироватьУслуги(Основание);
		
		// Сделку и табличные части заполняем только если взаиморасчеты ведутся не по расчетным документам.
		Если ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоРасчетнымДокументам Тогда
			Сделка = Основание;
		КонецЕсли;	
		
		Если ТипЗнч(Основание.СтруктурнаяЕдиница) = Тип("СправочникСсылка.БанковскиеСчета") Тогда
			БанковскийСчетОрганизации = Основание.СтруктурнаяЕдиница;
		КонецЕсли;

	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
		
		// Заполним реквизиты из стандартного набора по документу основанию.
		ДанныеОснования = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Основание, "ВалютаДокумента,
			|ВидОперации, Организация, Склад");
		
		Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеОснования.Склад, "ТипСклада")
				<> Перечисления.ТипыСкладов.НеавтоматизированнаяТорговаяТочка Тогда
			Склад = ДанныеОснования.Склад;
		КонецЕсли;
		
		Организация              = ДанныеОснования.Организация;
		ВалютаДокумента          = ДанныеОснования.ВалютаДокумента;
		ЗаполнениеДокументов.Заполнить(ЭтотОбъект);
		
		// Флаги включения налогов.
		Если ЗначениеЗаполнено(ТипЦен) Тогда
			СуммаВключаетНДС = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТипЦен, "ЦенаВключаетНДС");
		КонецЕсли;
		
		Если ДанныеОснования.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Оборудование Тогда
			ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.Оборудование;
		Иначе
			ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.ПродажаКомиссия;;
		КонецЕсли;
		
		ЗаполнитьПоПоступлению("Товары",         "Заполнить", Основание);
		ЗаполнитьПоПоступлению("ВозвратнаяТара", "Заполнить", Основание);
		
		Если ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.Оборудование Тогда
			ЗаполнитьПоПоступлению("Товары", "Добавить", Основание, "Оборудование");
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Функция готовит пакетный запрос для ОбработкиПроверкиЗаполнения.
//	Табличные части объекта (еще не сохраненного в информационной базе) выгружаются во временные таблицы,
//	соединяются с другими нужными талицами.
//
//Параметры:
//	СтруктураРезультатов - <Структура> - описание пакета запросов. Ключ - имя результата запроса, значение - индекс этого результата
//
//Возвращает массив результатов запроса
Функция ПолучитьДанныеОбъектаДляПроверкиЗаполнения(СтруктураРезультатов, ЭтоКомиссия)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ЭтоКомиссия",   ЭтоКомиссия);
	
	Запрос.Текст = "";
	
	Если Товары.Количество() > 0 Тогда
		Запрос.УстановитьПараметр("ТаблицаТовары", Товары.Выгрузить());
		
		СтруктураРезультатов.Вставить("ТаблицаТовары", СтруктураРезультатов.Количество());
		СтруктураРезультатов.Вставить("Товары", СтруктураРезультатов.Количество());
		
		Запрос.Текст = Запрос.Текст +
		"ВЫБРАТЬ
		|	ВремТаблица.НомерСтроки,
		|	ВремТаблица.Номенклатура,
		|	ВремТаблица.Количество,
		|	ВремТаблица.Сумма,
		|	ВремТаблица.СтавкаНДС,
		|	ВремТаблица.СуммаНДС,
		|	ВремТаблица.СчетУчетаБУ,
		|	ВремТаблица.ПереданныеСчетУчетаБУ,
		|	ВремТаблица.СхемаРеализации,
		|	ВЫРАЗИТЬ(ВремТаблица.НалоговоеНазначение КАК Справочник.НалоговыеНазначенияАктивовИЗатрат) КАК НалоговоеНазначение,
		|	ВремТаблица.НалоговоеНазначениеДоходовИЗатрат
		|ПОМЕСТИТЬ ТаблицаТовары
		|ИЗ
		|	&ТаблицаТовары КАК ВремТаблица
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ВремТаблица.Номенклатура
		|;
		|
		|ВЫБРАТЬ
		|	ТаблицаДокумента.НомерСтроки,
		|	ТаблицаДокумента.Номенклатура,
		|	ТаблицаДокумента.Количество,
		|	ТаблицаДокумента.Сумма,
		|	ТаблицаДокумента.СтавкаНДС,
		|	ТаблицаДокумента.СуммаНДС,
		|	ТаблицаДокумента.СчетУчетаБУ,
		|	ТаблицаДокумента.ПереданныеСчетУчетаБУ,
		|	ТаблицаДокумента.СхемаРеализации,
		|	ТаблицаДокумента.НалоговоеНазначение,
		|	ТаблицаДокумента.НалоговоеНазначение.ВидДеятельностиНДС КАК ВидДеятельностиНДС,
		|	ТаблицаДокумента.НалоговоеНазначениеДоходовИЗатрат
		|ИЗ
		|	ТаблицаТовары КАК ТаблицаДокумента
		|
		|УПОРЯДОЧИТЬ ПО
		|	ТаблицаДокумента.НомерСтроки";
	КонецЕсли;

	Если Услуги.Количество() > 0 Тогда
		Запрос.УстановитьПараметр("ТаблицаУслуги", Услуги.Выгрузить());

		СтруктураРезультатов.Вставить("ТаблицаУслуги", СтруктураРезультатов.Количество());
		СтруктураРезультатов.Вставить("Услуги", СтруктураРезультатов.Количество());

		Запрос.Текст = Запрос.Текст + ?(ПустаяСтрока(Запрос.Текст), "", Символы.ПС + ";" + Символы.ПС) +
		"ВЫБРАТЬ
		|	ВремТаблица.НомерСтроки,
		|	ВремТаблица.Номенклатура,
		|	ВремТаблица.Сумма,
		|	ВремТаблица.СтавкаНДС,
		|	ВремТаблица.СуммаНДС,
		|	ВремТаблица.СхемаРеализации,
		|	ВремТаблица.НалоговоеНазначение,
		|	ВремТаблица.НалоговоеНазначениеДоходовИЗатрат
		|ПОМЕСТИТЬ ТаблицаУслуги
		|ИЗ &ТаблицаУслуги КАК ВремТаблица
		|;
		|ВЫБРАТЬ
		|	ТабицаДокумента.НомерСтроки,
		|	ТабицаДокумента.Номенклатура,
		|	ТабицаДокумента.Сумма,
		|	ТабицаДокумента.СтавкаНДС,
		|	ТабицаДокумента.СуммаНДС,
		|	ТабицаДокумента.СхемаРеализации,
		|	ТабицаДокумента.НалоговоеНазначение,
		|	ТабицаДокумента.НалоговоеНазначениеДоходовИЗатрат
		|ИЗ
		|	ТаблицаУслуги КАК ТабицаДокумента
		|
		|УПОРЯДОЧИТЬ ПО
		|	ТабицаДокумента.НомерСтроки";
	КонецЕсли;

	Если ВозвратнаяТара.Количество() > 0 Тогда
		Запрос.УстановитьПараметр("ТаблицаВозвратнаяТара", ВозвратнаяТара.Выгрузить());

		СтруктураРезультатов.Вставить("ТаблицаВозвратнаяТара", СтруктураРезультатов.Количество());
		СтруктураРезультатов.Вставить("ВозвратнаяТара", СтруктураРезультатов.Количество());

		Запрос.Текст = Запрос.Текст + ?(ПустаяСтрока(Запрос.Текст), "", Символы.ПС + ";" + Символы.ПС) +
		"ВЫБРАТЬ
		|	ВремТаблица.НомерСтроки,
		|	ВремТаблица.Номенклатура,
		|	ВремТаблица.Количество,
		|	ВремТаблица.Сумма,
		|	ВремТаблица.СчетУчетаБУ,
		|	ВремТаблица.СхемаРеализации,
		|	ВЫРАЗИТЬ(ВремТаблица.НалоговоеНазначение КАК Справочник.НалоговыеНазначенияАктивовИЗатрат) КАК НалоговоеНазначение,
		|	ВремТаблица.НалоговоеНазначениеДоходовИЗатрат
		|ПОМЕСТИТЬ ТаблицаВозвратнаяТара
		|ИЗ &ТаблицаВозвратнаяТара КАК ВремТаблица
		|;
		|ВЫБРАТЬ
		|	ТаблицаДокумента.НомерСтроки,
		|	ТаблицаДокумента.Номенклатура,
		|	ТаблицаДокумента.Количество,
		|	ТаблицаДокумента.Сумма,
		|	ТаблицаДокумента.СчетУчетаБУ,
		|	ТаблицаДокумента.СхемаРеализации,
		|	ТаблицаДокумента.НалоговоеНазначение,
		|	ТаблицаДокумента.НалоговоеНазначение.ВидДеятельностиНДС КАК ВидДеятельностиНДС,
		|	ТаблицаДокумента.НалоговоеНазначениеДоходовИЗатрат
		|ИЗ
		|	ТаблицаВозвратнаяТара КАК ТаблицаДокумента
		|
		|УПОРЯДОЧИТЬ ПО
		|	ТаблицаДокумента.НомерСтроки";
	КонецЕсли;

	Если НЕ ПустаяСтрока(Запрос.Текст) Тогда
		Возврат Запрос.ВыполнитьПакет();
	Иначе
		Возврат Неопределено;
	КонецЕсли;

КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ПРОВЕДЕНИЯ - ПОДГОТОВКА ДАННЫХ ИНФОРМАЦИОННОЙ БАЗЫ

// Процедура формирует структуру шапки документа и дополнительных полей.
//
Процедура ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента) Экспорт

	// Дерево значений, содержащее имена необходимых полей в запросе по шапке.
	Перем ДеревоПолейЗапросаПоШапке;
	
	СтруктураШапкиДокумента   = ОбщегоНазначенияРед12.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	
	// Заполним по шапке документа дерево параметров, нужных при проведении.
	ДеревоПолейЗапросаПоШапке = ОбщегоНазначенияРед12.СформироватьДеревоПолейЗапросаПоШапке();
	ОбщегоНазначенияРед12.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "Организация", "ДоговорОрганизация");
	ОбщегоНазначенияРед12.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "ВидДоговора", "ВидДоговора");
	ОбщегоНазначенияРед12.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Склад"               , "ТипСклада"  , "ТипСклада");
   	ОбщегоНазначенияРед12.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "ВедениеВзаиморасчетов",   "ВедениеВзаиморасчетов");
	ОбщегоНазначенияРед12.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "ВалютаВзаиморасчетов" , 	"ВалютаВзаиморасчетов");
   	ОбщегоНазначенияРед12.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "ВедениеВзаиморасчетовНУ", "ВедениеВзаиморасчетовНУ");
   	ОбщегоНазначенияРед12.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "СложныйНалоговыйУчет", 	"СложныйНалоговыйУчет");
	ОбщегоНазначенияРед12.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "СхемаНалоговогоУчета",    "СхемаНалоговогоУчета");
	
	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа
	СтруктураШапкиДокумента = УправлениеЗапасами.СформироватьЗапросПоДеревуПолей(ЭтотОбъект, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета);

КонецПроцедуры // ПодготовитьСтруктуруШапкиДокумента()

// Процедура определяет параметры учетной политики
//
Процедура ПодготовитьПараметрыУчетнойПолитики(СтруктураШапкиДокумента, Отказ, Заголовок)
	
	РазрешитьУчетУслугБезПлановыхЦен = Не УчетнаяПолитика.ПорядокРаспределенияРасходовНаОказаниеУслуг(СтруктураШапкиДокумента.Организация, СтруктураШапкиДокумента.Дата) = Перечисления.ПорядокРаспределенияРасходовНаОказаниеУслуг.ПоПлановымЦенам;
	
	СтруктураШапкиДокумента.Вставить("ЕстьНалогНаПрибыльДо2015"        , УчетнаяПолитика.ПлательщикНалогаНаПрибыльДо2015(СтруктураШапкиДокумента.Организация, СтруктураШапкиДокумента.Дата));
	СтруктураШапкиДокумента.Вставить("ЕстьНДС"                         , УчетнаяПолитика.ПлательщикНДС(СтруктураШапкиДокумента.Организация, СтруктураШапкиДокумента.Дата));
	СтруктураШапкиДокумента.Вставить("СпособОценкиТоваровВРознице"	   , УчетнаяПолитика.СпособОценкиТоваровВРознице(СтруктураШапкиДокумента.Организация, СтруктураШапкиДокумента.Дата));
	СтруктураШапкиДокумента.Вставить("РазрешитьУчетУслугБезПлановыхЦен", РазрешитьУчетУслугБезПлановыхЦен);
	
КонецПроцедуры // ПодготовитьПараметрыУчетнойПолитики()

// Процедура формирует таблицы документа.
//
Процедура ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоТаре, ТаблицаПоУслугам, Отказ, Заголовок) Экспорт
	
	ПогрешностиОкругления     = Новый Соответствие;
	ПогрешностиОкругленияТара = Новый Соответствие;

	// Получим необходимые данные для проведения и проверки заполенения данные по табличной части "Товары".
	СтруктураПолей = Новый Структура();
	СтруктураПростыхПолей = Новый Структура;
	СтруктураСложныхПолей = Новый Структура;
	
	СтруктураПолей.Вставить("Номенклатура",        	"Номенклатура");
	СтруктураПолей.Вставить("Услуга"      ,        	"Номенклатура.Услуга");
	СтруктураПолей.Вставить("БланкСтрогогоУчета", "Номенклатура.БланкСтрогогоУчета");
	СтруктураПолей.Вставить("Количество"  ,        	"Количество * Коэффициент");
	СтруктураПолей.Вставить("Сумма"       ,        	"Сумма");
	СтруктураПолей.Вставить("СтавкаНДС"   ,        	"СтавкаНДС");
	СтруктураПолей.Вставить("НДС"         ,        	"СуммаНДС");
	СтруктураПолей.Вставить("СчетУчетаБУ"          ,"СчетУчетаБУ");
	СтруктураПолей.Вставить("ПереданныеСчетУчетаБУ","ПереданныеСчетУчетаБУ");
	СтруктураПолей.Вставить("ДокументОприходования", "ДокументОприходования");
	СтруктураПолей.Вставить("Себестоимость"		   , "Себестоимость");
	СтруктураПолей.Вставить("СебестоимостьНУ"	   , "СебестоимостьНУ");
	
	СтруктураПолей.Вставить("СхемаРеализации"                  , "СхемаРеализации");
	СтруктураПолей.Вставить("СчетДоходовБУ"                    , "СхемаРеализации.СчетДоходов");
	СтруктураПолей.Вставить("СубконтоДоходовБУ1"               , "СхемаРеализации.СубконтоДоходов1");
	СтруктураПолей.Вставить("СубконтоДоходовБУ2"               , "СхемаРеализации.СубконтоДоходов2");
	СтруктураПолей.Вставить("СубконтоДоходовБУ3"               , "СхемаРеализации.СубконтоДоходов3");
	СтруктураПолей.Вставить("СчетРасходовБУ"                   , "СхемаРеализации.СчетСебестоимости");
	СтруктураПолей.Вставить("СубконтоРасходовБУ1"              , "СхемаРеализации.СубконтоСебестоимости1");
	СтруктураПолей.Вставить("СубконтоРасходовБУ2"              , "СхемаРеализации.СубконтоСебестоимости2");
	СтруктураПолей.Вставить("СубконтоРасходовБУ3"              , "СхемаРеализации.СубконтоСебестоимости3");
	СтруктураПолей.Вставить("НоменклатурнаяГруппа"			   , "Номенклатура.НоменклатурнаяГруппа");
	СтруктураПолей.Вставить("НовоеКоличество"			       , "ИНАГРО_НовоеКоличество * Коэффициент");	// ИНАГРО
	
	СтруктураПолей.Вставить("НалоговоеНазначение"     		   , "НалоговоеНазначение");
	СтруктураПолей.Вставить("ВидДеятельностиНДС"     		   , "НалоговоеНазначение.ВидДеятельностиНДС");
	СтруктураПолей.Вставить("НалоговоеНазначениеДоходовИЗатрат", "НалоговоеНазначениеДоходовИЗатрат");

	СтруктураПолей.Вставить("СчетУчетаНДС"    	, "Ссылка.СчетУчетаНДС");
	
	РезультатЗапросаПоТоварам = ОбщегоНазначенияРед12.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураПолей, СтруктураПростыхПолей, СтруктураСложныхПолей);
	
	// Подготовим таблицу товаров для проведения.
	
	ТаблицаПоТоварам = ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента, ПогрешностиОкругления);

	// Получим необходимые данные для проведения и проверки заполенения данные 
	// по табличной части "Возвратная тара".
	СтруктураПолей = Новый Структура();
	СтруктураПростыхПолей = Новый Структура;
	СтруктураСложныхПолей = Новый Структура;
	
	СтруктураПолей.Вставить("Номенклатура", "Номенклатура");
	СтруктураПолей.Вставить("Услуга"      , "Номенклатура.Услуга");
	СтруктураПолей.Вставить("БланкСтрогогоУчета", "Номенклатура.БланкСтрогогоУчета");
	СтруктураПолей.Вставить("Количество"  , "Количество");
	СтруктураПолей.Вставить("Сумма"       , "Сумма");
	СтруктураПолей.Вставить("СчетУчетаБУ" , "СчетУчетаБУ");
	
 	СтруктураПолей.Вставить("СхемаРеализации"           , "СхемаРеализации");
 	СтруктураПолей.Вставить("СчетДоходовБУ"             , "СхемаРеализации.СчетДоходов");
 	СтруктураПолей.Вставить("СубконтоДоходовБУ1"        , "СхемаРеализации.СубконтоДоходов1");
 	СтруктураПолей.Вставить("СубконтоДоходовБУ2"        , "СхемаРеализации.СубконтоДоходов2");
 	СтруктураПолей.Вставить("СубконтоДоходовБУ3"        , "СхемаРеализации.СубконтоДоходов3");
 	СтруктураПолей.Вставить("СчетРасходовБУ"            , "СхемаРеализации.СчетСебестоимости");
 	СтруктураПолей.Вставить("СубконтоРасходовБУ1"       , "СхемаРеализации.СубконтоСебестоимости1");
 	СтруктураПолей.Вставить("СубконтоРасходовБУ2"       , "СхемаРеализации.СубконтоСебестоимости2");
 	СтруктураПолей.Вставить("СубконтоРасходовБУ3"       , "СхемаРеализации.СубконтоСебестоимости3");
	СтруктураПолей.Вставить("НоменклатурнаяГруппа"		, "Номенклатура.НоменклатурнаяГруппа");
	
	СтруктураПолей.Вставить("НалоговоеНазначение"     		   , "НалоговоеНазначение");
	СтруктураПолей.Вставить("ВидДеятельностиНДС"     		   , "НалоговоеНазначение.ВидДеятельностиНДС");
	СтруктураПолей.Вставить("НалоговоеНазначениеДоходовИЗатрат", "НалоговоеНазначениеДоходовИЗатрат");

 	СтруктураПростыхПолей.Вставить("СтавкаНДС"              , Перечисления.СтавкиНДС.НеНДС);
 	СтруктураПростыхПолей.Вставить("НДС"                    , 0);
 	СтруктураПростыхПолей.Вставить("СчетУчетаНДС"           , ПланыСчетов.Хозрасчетный.ПустаяСсылка());
	
	РезультатЗапросаПоТаре = ОбщегоНазначенияРед12.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "ВозвратнаяТара", СтруктураПолей, СтруктураПростыхПолей, СтруктураСложныхПолей);

	// Подготовим таблицу тары для проведения.                                            
	ТаблицаПоТаре = ПодготовитьТаблицуТары(РезультатЗапросаПоТаре, СтруктураШапкиДокумента, ПогрешностиОкругленияТара);
	
	СтруктураПолей = Новый Структура();
	СтруктураПростыхПолей = Новый Структура;
	СтруктураСложныхПолей = Новый Структура;

	// Получим необходимые данные для проведения и проверки заполенения данные 
	// по табличной части "Услуги".
	СтруктураПолей = Новый Структура();
	СтруктураПолей.Вставить("Номенклатура"  , "Номенклатура");
	СтруктураПолей.Вставить("Содержание"    , "Содержание");
	СтруктураПолей.Вставить("Услуга"        , "Номенклатура.Услуга");
	СтруктураПолей.Вставить("БланкСтрогогоУчета", "Номенклатура.БланкСтрогогоУчета");
	СтруктураПолей.Вставить("Количество"    , "Количество");
	СтруктураПолей.Вставить("Сумма"         , "Сумма");
	СтруктураПолей.Вставить("СтавкаНДС"     , "СтавкаНДС");
	СтруктураПолей.Вставить("НДС"           , "СуммаНДС");
	СтруктураПолей.Вставить("СхемаРеализации",     "СхемаРеализации");
	СтруктураПолей.Вставить("СчетДоходовБУ" ,      "СхемаРеализации.СчетДоходов");
	СтруктураПолей.Вставить("СубконтоДоходовБУ1",  "СхемаРеализации.СубконтоДоходов1");
	СтруктураПолей.Вставить("СубконтоДоходовБУ2",  "СхемаРеализации.СубконтоДоходов2");
	СтруктураПолей.Вставить("СубконтоДоходовБУ3",  "СхемаРеализации.СубконтоДоходов3");
	СтруктураПолей.Вставить("СчетРасходовБУ"                   , "СхемаРеализации.СчетСебестоимости");
	СтруктураПолей.Вставить("СубконтоРасходовБУ1"              , "СхемаРеализации.СубконтоСебестоимости1");
	СтруктураПолей.Вставить("СубконтоРасходовБУ2"              , "СхемаРеализации.СубконтоСебестоимости2");
	СтруктураПолей.Вставить("СубконтоРасходовБУ3"              , "СхемаРеализации.СубконтоСебестоимости3");
	СтруктураПолей.Вставить("НоменклатурнаяГруппа","Номенклатура.НоменклатурнаяГруппа");
	СтруктураПолей.Вставить("СчетРасходовБУ"   ,"СхемаРеализации.СчетСебестоимости");

	СтруктураПолей.Вставить("НалоговоеНазначение"     		   , "НалоговоеНазначение");
	СтруктураПолей.Вставить("ВидДеятельностиНДС"     		   , "НалоговоеНазначение.ВидДеятельностиНДС");
	СтруктураПолей.Вставить("НалоговоеНазначениеДоходовИЗатрат", "НалоговоеНазначениеДоходовИЗатрат");
	СтруктураПолей.Вставить("СчетУчетаНДС"    				   , "Ссылка.СчетУчетаНДС");

	РезультатЗапросаПоУслугам = ОбщегоНазначенияРед12.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Услуги", СтруктураПолей, СтруктураПростыхПолей, СтруктураСложныхПолей);

	// Подготовим таблицу услуг для проведения.
	ТаблицаПоУслугам = ПодготовитьТаблицуУслуг(РезультатЗапросаПоУслугам, СтруктураШапкиДокумента, ПогрешностиОкругления);
	
КонецПроцедуры

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТоварам - результат запроса по табличной части "Товары",
//  СтруктураШапкиДокумента   - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблиица значений.
//
Функция ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента, ПогрешностиОкругления)

	ТаблицаТоваров = РезультатЗапросаПоТоварам.Выгрузить();

	Если СтруктураШапкиДокумента.ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
		ТаблицаТоваров.Колонки.ПереданныеСчетУчетаБУ.Имя = "КорСчетСписанияБУ";
	Иначе
		ТаблицаТоваров.Колонки.СчетРасходовБУ.Имя	   = "КорСчетСписанияБУ";
		ТаблицаТоваров.Колонки.СубконтоРасходовБУ1.Имя = "КорСубконтоСписанияБУ1";
		ТаблицаТоваров.Колонки.СубконтоРасходовБУ2.Имя = "КорСубконтоСписанияБУ2";
		ТаблицаТоваров.Колонки.СубконтоРасходовБУ3.Имя = "КорСубконтоСписанияБУ3";
	КонецЕсли;
	
	ТаблицаТоваров.Колонки.Добавить("Регистратор");
	ТаблицаТоваров.Колонки.Добавить("Склад");
	ТаблицаТоваров.Колонки.Добавить("Организация");
	ТаблицаТоваров.Колонки.Добавить("ДоговорКонтрагента");

	ТаблицаТоваров.ЗаполнитьЗначения(ЭтотОбъект,                                 "Регистратор");
	ТаблицаТоваров.ЗаполнитьЗначения(СтруктураШапкиДокумента.Склад,              "Склад");
	ТаблицаТоваров.ЗаполнитьЗначения(СтруктураШапкиДокумента.Организация,        "Организация");
	ТаблицаТоваров.ЗаполнитьЗначения(СтруктураШапкиДокумента.ДоговорКонтрагента, "ДоговорКонтрагента");
	
	ТаблицаТоваров.Колонки.Добавить("Комиссионный",		 	  		Новый ОписаниеТипов("Булево"));
	
	// для списания укажем "кор. налоговое назначение" = нал. назначение доходов и затрат
	// для отражения расходов по налогу на прибыль по списанной себестоимости
	// при передаче на комиссию собсвтенных товаров, кор. налоговое назначение должно быть нал. назначением по НДС.
	Если    СтруктураШапкиДокумента.ЕстьНалогНаПрибыльДо2015
		ИЛИ СтруктураШапкиДокумента.ЕстьНДС
		ИЛИ СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
		
		ТаблицаТоваров.Колонки.Добавить("НалоговоеНазначениеНовое", Новый ОписаниеТипов("СправочникСсылка.НалоговыеНазначенияАктивовИЗатрат"));
		
		Если  СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.ПродажаКомиссия 
			И СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
			
			ТаблицаТоваров.ЗагрузитьКолонку(ТаблицаТоваров.ВыгрузитьКолонку("НалоговоеНазначение") , "НалоговоеНазначениеНовое");
			
		ИначеЕсли СтруктураШапкиДокумента.ЕстьНалогНаПрибыльДо2015 Тогда	
			
			Если СтруктураШапкиДокумента.НеОтноситьСебестоимостьЗапасовНаРасходыПоНУ Тогда
				// расходы будем относить на нехоз. деятельность, это равнозначно непризнанию расходов по себестомости (при реализации товаров по авансу до 01.04)
				ТаблицаТоваров.ЗаполнитьЗначения(Справочники.НалоговыеНазначенияАктивовИЗатрат.НКУ_НеХозДеятельность , "НалоговоеНазначениеНовое");
			Иначе	
				ТаблицаТоваров.ЗагрузитьКолонку(ТаблицаТоваров.ВыгрузитьКолонку("НалоговоеНазначениеДоходовИЗатрат") , "НалоговоеНазначениеНовое");
			КонецЕсли;
			
		Иначе  // ИНАГРО	
			ТаблицаТоваров.ЗагрузитьКолонку(ТаблицаТоваров.ВыгрузитьКолонку("НалоговоеНазначениеДоходовИЗатрат") , "НалоговоеНазначениеНовое");			
		КонецЕсли;
		
	КонецЕсли;
	  
	Если НЕ СтруктураШапкиДокумента.ЕстьНДС Тогда
		// для регламентного учета считаем НДС
		ТаблицаТоваров.ЗаполнитьЗначения(Перечисления.СтавкиНДС.БезНДС, "СтавкаНДС");
		ТаблицаТоваров.ЗаполнитьЗначения(0                            , "НДС");
	КонецЕсли;
	
	Для Каждого СтрокаТаблицы Из ТаблицаТоваров Цикл
		
		СтрокаТаблицы.Комиссионный = БухгалтерскийУчетВызовСервераПовтИсп.КомиссионныйТовар(СтрокаТаблицы.СчетУчетаБУ);
		
	КонецЦикла;

	НалоговыйУчет.ДобавитьКолонкиТоваровРегл(ТаблицаТоваров, СтруктураШапкиДокумента, ПогрешностиОкругления, Ложь);
	
	Возврат ТаблицаТоваров;

КонецФункции // ПодготовитьТаблицуТоваров()

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТоварам - результат запроса по табличной части "Товары",
//  СтруктураШапкиДокумента   - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблиица значений.
//
Функция ПодготовитьТаблицуУслуг(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента, ПогрешностиОкругления)

	ТаблицаТоваров = РезультатЗапросаПоТоварам.Выгрузить();

	Если НЕ СтруктураШапкиДокумента.ЕстьНДС Тогда
		// для регламентного учета считаем НДС
		ТаблицаТоваров.ЗаполнитьЗначения(Перечисления.СтавкиНДС.БезНДС, "СтавкаНДС");
		ТаблицаТоваров.ЗаполнитьЗначения(0                            , "НДС");
	КонецЕсли;
	
	НалоговыйУчет.ДобавитьКолонкиТоваровРегл(ТаблицаТоваров, СтруктураШапкиДокумента, ПогрешностиОкругления, Ложь);

	Возврат ТаблицаТоваров;

КонецФункции // ПодготовитьТаблицуУслуг()

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТаре  - результат запроса по табличной части "ВозвратнаяТара",
//  СтруктураШапкиДокумента - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблиица значений.
//
Функция ПодготовитьТаблицуТары(РезультатЗапросаПоТаре, СтруктураШапкиДокумента, ПогрешностиОкругления)

	ТаблицаТары = РезультатЗапросаПоТаре.Выгрузить();

	ТаблицаТары.Колонки.СчетРасходовБУ.Имя 	   = "КорСчетСписанияБУ";
	ТаблицаТары.Колонки.СубконтоРасходовБУ1.Имя = "КорСубконтоСписанияБУ1";
	ТаблицаТары.Колонки.СубконтоРасходовБУ2.Имя = "КорСубконтоСписанияБУ2";
	ТаблицаТары.Колонки.СубконтоРасходовБУ3.Имя = "КорСубконтоСписанияБУ3";
	
	ТаблицаТары.Колонки.Добавить("ДокументОприходования");
	ТаблицаТары.Колонки.Добавить("Регистратор");
	ТаблицаТары.Колонки.Добавить("Склад");
	ТаблицаТары.Колонки.Добавить("Организация");
	ТаблицаТары.Колонки.Добавить("ДоговорКонтрагента");
	
	// для списания укажем "кор. налоговое назначение" = нал. назначение доходов и затрат
	// для отражения расходов по налогу на прибыль по списанной себестоимости
	Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыльДо2015 Тогда
		
		ТаблицаТары.Колонки.Добавить("НалоговоеНазначениеНовое", Новый ОписаниеТипов("СправочникСсылка.НалоговыеНазначенияАктивовИЗатрат"));
		
		Если СтруктураШапкиДокумента.НеОтноситьСебестоимостьЗапасовНаРасходыПоНУ Тогда
			// расходы будем относить на нехоз. деятельность, это равнозначно непризнанию расходов по себестомости (при реализации товаров по авансу до 01.04)
			ТаблицаТары.ЗаполнитьЗначения(Справочники.НалоговыеНазначенияАктивовИЗатрат.НКУ_НеХозДеятельность , "НалоговоеНазначениеНовое");
		Иначе	
			ТаблицаТары.ЗагрузитьКолонку(ТаблицаТары.ВыгрузитьКолонку("НалоговоеНазначениеДоходовИЗатрат") , "НалоговоеНазначениеНовое");
		КонецЕсли;
		
	КонецЕсли;
	
	ТаблицаТары.ЗаполнитьЗначения(ЭтотОбъект,	                               "Регистратор");
	ТаблицаТары.ЗаполнитьЗначения(СтруктураШапкиДокумента.Склад,       		   "Склад");
	ТаблицаТары.ЗаполнитьЗначения(СтруктураШапкиДокумента.Организация, 		   "Организация");
	ТаблицаТары.ЗаполнитьЗначения(СтруктураШапкиДокумента.ДоговорКонтрагента,  "ДоговорКонтрагента");
	
	НалоговыйУчет.ДобавитьКолонкиТоваровРегл(ТаблицаТары, СтруктураШапкиДокумента, ПогрешностиОкругления, Ложь);

	Возврат ТаблицаТары;

КонецФункции // ПодготовитьТаблицуТары()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ПРОВЕДЕНИЯ - ФОРМИРОВАНИЕ ДВИЖЕНИЙ

// Процедура выполняет движения по регистрам
//
Процедура ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоТаре, ТаблицаПоУслугам, Отказ, Заголовок)
	
	//Списание по партиям
	УправлениеЗапасамиПартионныйУчет.ДвижениеПартийТоваров(ТаблицаПоТоварам, Отказ);
	УправлениеЗапасамиПартионныйУчет.ДвижениеПартийТоваров(ТаблицаПоТаре,    Отказ);

	ПереоценкаАТТВПродажныхЦенах(СтруктураШапкиДокумента, ТаблицаПоТоварам);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПроводкиБУ = Движения.Хозрасчетный;
	ДатаДока   = Дата;
	
	Комиссия = (ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.ПродажаКомиссия
	            И ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером);
				
	// Проводки по взаиморасчетам - авансы
	Если НЕ Комиссия Тогда

	   	ТаблицыДокумента = Новый Структура();
	   	ТаблицыДокумента.Вставить("ТаблицаПоТоварам",ТаблицаПоТоварам);
		ТаблицыДокумента.Вставить("ТаблицаПоУслугам",ТаблицаПоУслугам);
		
		ТаблицаАвансов = БухгалтерскийУчетРасчетовСКонтрагентами.ЗачетАванса(ЭтотОбъект, СтруктураШапкиДокумента , мВалютаРегламентированногоУчета, ТаблицыДокумента , Отказ, Заголовок, "АВ");
		
		КурсЗачетаАвансаРегл = ?(ТаблицаАвансов.Итог("СуммаВал") = 0, Неопределено, ТаблицаАвансов.Итог("Сумма") / ТаблицаАвансов.Итог("СуммаВал"));
		
	КонецЕсли; // Проводки по взаиморасчетам - авансы

	// Проводки по взаиморасчетам за тару - авансы
   	ТаблицыДокумента = Новый Структура();
   	ТаблицыДокумента.Вставить("ТаблицаПоТаре",ТаблицаПоТаре);
	ТаблицаАвансовПоТаре = БухгалтерскийУчетРасчетовСКонтрагентами.ЗачетАванса(ЭтотОбъект, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета, ТаблицыДокумента , Отказ, Заголовок,"АВ",,,СтруктураШапкиДокумента.СчетУчетаРасчетовПоТаре, СтруктураШапкиДокумента.СчетУчетаРасчетовПоТареПоАвансам);

	// Проводки по реализации товаров
	Если    СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем
		ИЛИ СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.ИНАГРО_АрендаЗемли  // ИНАГРО
		ИЛИ СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.ИНАГРО_АрендаИмущества 
		ИЛИ СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.Бартерный Тогда
		
		// ИНАГРО++
		//Проводки по дотации только при операции "В переработку" и при флаге "Есть дотация"
		Если  СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.ИНАГРО_ВПереработку
			И ИНАГРО_ЕстьДотация Тогда 
			
			Проводка = ПроводкиБУ.Добавить();
			
			Проводка.Период       = Дата;
			Проводка.Активность   = Истина;
			Проводка.Организация  = СтруктураШапкиДокумента.Организация;			
			Проводка.Сумма        = СтруктураШапкиДокумента.ИНАГРО_СуммаДотации;
			Проводка.Содержание   = НСтр("ru='Реализация товаров с дотацией';uk='Реалізація товарів з дотацією'");
			Проводка.НомерЖурнала = "";
			
			Проводка.СчетДт = СтруктураШапкиДокумента.ИНАГРО_СчетУчетаРасчетовПоДотациям;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты",                     СтруктураШапкиДокумента.Контрагент);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Договоры",                        СтруктураШапкиДокумента.ДоговорКонтрагента);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ДокументыРасчетовСКонтрагентами", УправлениеВзаиморасчетами.ОпределитьДокументРасчетовСКонтрагентом(Ссылка, Сделка));
			
			Проводка.ВалютаДт = СтруктураШапкиДокумента.ВалютаДокумента;
			
			Проводка.СчетКт = СтруктураШапкиДокумента.ИНАГРО_СчетДотации; 
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, СтруктураШапкиДокумента.ИНАГРО_НазначениеЦелевыхСредств);
			
			Проводка = ПроводкиБУ.Добавить();
			
			Проводка.Период       = Дата;
			Проводка.Активность   = Истина;
			Проводка.Организация  = СтруктураШапкиДокумента.Организация;			
			Проводка.Сумма        = СтруктураШапкиДокумента.ИНАГРО_СуммаДотации;
			Проводка.Содержание   = НСтр("ru='Реализация товаров с дотацией';uk='Реалізація товарів з дотацією'");
			Проводка.НомерЖурнала = "";
			
			Проводка.СчетДт = СтруктураШапкиДокумента.ИНАГРО_СчетДотации;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтруктураШапкиДокумента.ИНАГРО_НазначениеЦелевыхСредств);
			
			Проводка.СчетКт = СтруктураШапкиДокумента.ИНАГРО_СчетДоходовПоДотации;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, СтруктураШапкиДокумента.ИНАГРО_СубконтоДохода1);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, СтруктураШапкиДокумента.ИНАГРО_СубконтоДохода2);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3, СтруктураШапкиДокумента.ИНАГРО_СубконтоДохода3);
			
			Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыльДо2015 Тогда  
				Проводка.НалоговоеНазначениеКт  = СтруктураШапкиДокумента.ИНАГРО_НалоговоеНазначениеДохода;
				Проводка.СуммаНУКт              = СтруктураШапкиДокумента.ИНАГРО_СуммаДотации;
			КонецЕсли;

		КонецЕсли;
		// ИНАГРО--
		
		Для каждого СтрокаТаблицы Из ТаблицаПоТоварам Цикл
			
			// Выручка
			Если СтрокаТаблицы.Сумма = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			Проводка = ПроводкиБУ.Добавить();
			
			Проводка.Период          = Дата;
			Проводка.Активность      = Истина;
			Проводка.Организация     = СтруктураШапкиДокумента.Организация;
			Проводка.Сумма           = СтрокаТаблицы.ПроводкиСуммаСНДСРегл;
			Проводка.Содержание      = НСтр("ru='Реализация товаров';uk='Реалізація товарів'",Локализация.КодЯзыкаИнформационнойБазы());
			Проводка.НомерЖурнала    = "";
			
			Проводка.СчетДт          = СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты", СтруктураШапкиДокумента.Контрагент);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Договоры"   , СтруктураШапкиДокумента.ДоговорКонтрагента);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,  "ДокументыРасчетовСКонтрагентами", УправлениеВзаиморасчетами.ОпределитьДокументРасчетовСКонтрагентом(Ссылка,Сделка));
			
			Проводка.ВалютаДт        = СтруктураШапкиДокумента.ВалютаДокумента;
			Проводка.ВалютнаяСуммаДт = СтрокаТаблицы.ПроводкиСуммаСНДСВал;
			
			Проводка.СчетКт         = СтрокаТаблицы.СчетДоходовБУ;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, СтрокаТаблицы.СубконтоДоходовБУ1);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, СтрокаТаблицы.СубконтоДоходовБУ2);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3, СтрокаТаблицы.СубконтоДоходовБУ3);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "НоменклатурныеГруппы", СтрокаТаблицы.НоменклатурнаяГруппа);
			
			Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыльДо2015 Тогда
				
				Проводка.НалоговоеНазначениеКт  = СтрокаТаблицы.НалоговоеНазначениеДоходовИЗатрат;
			    Проводка.СуммаНУКт 				= НалоговыйУчет.УчестьСуммуАвансаДо01042011(СтруктураШапкиДокумента, СтрокаТаблицы.ПроводкиСуммаБезНДСРегл) + СтрокаТаблицы.ПроводкиСуммаНДСРегл;
				
			КонецЕсли;
			
			// ИНАГРО++
			Если ИНАГРО_ОбщийВызовСервераПовтИсп.ЕстьБСПУ() Тогда
				Если ИНАГРО_РасхождениеКоличества И СтрокаТаблицы.НовоеКоличество <> 0 Тогда
					МодульИНАГРО_БиологическиеАктивы = ОбщегоНазначения.ОбщийМодуль("ИНАГРО_БиологическиеАктивы");
				 	МодульИНАГРО_БиологическиеАктивы.ИНАГРО_ЗафиксироватьРазницуКоличества(Движения, СтрокаТаблицы, СтруктураШапкиДокумента);
				КонецЕсли;
			КонецЕсли;
			// ИНАГРО-- 
			
		КонецЦикла;
	КонецЕсли;
	
	// Проводки по реализации услуг
	Если    СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем
		ИЛИ СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.ИНАГРО_АрендаЗемли  // ИНАГРО
		ИЛИ СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.ИНАГРО_АрендаИмущества
		ИЛИ СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.Бартерный  Тогда
		 
		Для каждого СтрокаТаблицы Из ТаблицаПоУслугам Цикл

			// Выручка
			Если СтрокаТаблицы.Сумма = 0 Тогда
				Продолжить;
			КонецЕсли;

			Проводка = ПроводкиБУ.Добавить();

			Проводка.Период          = Дата;
			Проводка.Активность      = Истина;
			Проводка.Организация     = СтруктураШапкиДокумента.Организация;
			Проводка.Сумма           = СтрокаТаблицы.ПроводкиСуммаСНДСРегл;
			Проводка.Содержание      = НСтр("ru='Оказание услуг';uk='Надання послуг'",Локализация.КодЯзыкаИнформационнойБазы());
			Проводка.НомерЖурнала    = "";

			Проводка.СчетДт          = СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты", СтруктураШапкиДокумента.Контрагент);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Договоры"   , СтруктураШапкиДокумента.ДоговорКонтрагента);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт,  "ДокументыРасчетовСКонтрагентами", УправлениеВзаиморасчетами.ОпределитьДокументРасчетовСКонтрагентом(Ссылка,Сделка));
			
			Проводка.ВалютаДт        = СтруктураШапкиДокумента.ВалютаДокумента;
			Проводка.ВалютнаяСуммаДт = СтрокаТаблицы.ПроводкиСуммаСНДСВал;
			
			Проводка.СчетКт         = СтрокаТаблицы.СчетДоходовБУ;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, СтрокаТаблицы.СубконтоДоходовБУ1);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, СтрокаТаблицы.СубконтоДоходовБУ2);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3, СтрокаТаблицы.СубконтоДоходовБУ3);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "НоменклатурныеГруппы", СтрокаТаблицы.НоменклатурнаяГруппа);
			
			Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыльДо2015 Тогда
				
				Проводка.НалоговоеНазначениеКт  = СтрокаТаблицы.НалоговоеНазначениеДоходовИЗатрат;
			    Проводка.СуммаНУКт 				= НалоговыйУчет.УчестьСуммуАвансаДо01042011(СтруктураШапкиДокумента, СтрокаТаблицы.ПроводкиСуммаБезНДСРегл) + СтрокаТаблицы.ПроводкиСуммаНДСРегл;
				
			КонецЕсли;
			
			ИНАГРО_Общий.ИНАГРО_РегистрацияРеализации(СтрокаТаблицы, СтрокаТаблицы.Количество, СтрокаТаблицы.СуммаСНДСРегл, ЭтотОбъект); // ИНАГРО

		КонецЦикла;
	КонецЕсли;

	// Проводки по передачи тары
	Для каждого СтрокаТаблицы Из ТаблицаПоТаре Цикл

		// Выручка
		Если СтрокаТаблицы.Сумма = 0 Тогда
			Продолжить;
		КонецЕсли;

		Проводка = ПроводкиБУ.Добавить();

		Проводка.Период          = Дата;
		Проводка.Активность      = Истина;
		Проводка.Организация     = СтруктураШапкиДокумента.Организация;
		Проводка.Сумма           = СтрокаТаблицы.ПроводкиСуммаСНДСРегл;
		Проводка.Содержание      = НСтр("ru='Передача возвратной тары';uk='Передача звротної тари'",Локализация.КодЯзыкаИнформационнойБазы());
		Проводка.НомерЖурнала    = "";

		Проводка.СчетДт          = СтруктураШапкиДокумента.СчетУчетаРасчетовПоТаре;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты", СтруктураШапкиДокумента.Контрагент);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Договоры"   , СтруктураШапкиДокумента.ДоговорКонтрагента);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,  "ДокументыРасчетовСКонтрагентами", УправлениеВзаиморасчетами.ОпределитьДокументРасчетовСКонтрагентом(Ссылка,Сделка));
		
		Проводка.ВалютаДт        = СтруктураШапкиДокумента.ВалютаДокумента;
		Проводка.ВалютнаяСуммаДт = СтрокаТаблицы.ПроводкиСуммаСНДСВал;
		
		Проводка.СчетКт         = СтрокаТаблицы.СчетДоходовБУ;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, СтрокаТаблицы.СубконтоДоходовБУ1);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, СтрокаТаблицы.СубконтоДоходовБУ2);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3, СтрокаТаблицы.СубконтоДоходовБУ3);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "НоменклатурныеГруппы", СтрокаТаблицы.НоменклатурнаяГруппа);
		
		Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыльДо2015 Тогда
			
			Проводка.НалоговоеНазначениеКт  = СтрокаТаблицы.НалоговоеНазначениеДоходовИЗатрат;
		    Проводка.СуммаНУКт 				= НалоговыйУчет.УчестьСуммуАвансаДо01042011(СтруктураШапкиДокумента, СтрокаТаблицы.ПроводкиСуммаБезНДСРегл) + СтрокаТаблицы.ПроводкиСуммаНДСРегл;
			
		КонецЕсли;

	КонецЦикла;

	//Учет курсовых разниц
	Если (ВалютаДокумента <> мВалютаРегламентированногоУчета) тогда
		БухгалтерскийУчетРед12.ПереоценкаСчетовДокументаРегл(ЭтотОбъект,СтруктураШапкиДокумента, мВалютаРегламентированногоУчета,Отказ,Заголовок);
		
		// ИНАГРО++
		Если НЕ Комиссия И ТаблицаАвансов.Количество() > 0 Тогда
			ИНАГРО_ОбщийСервер.ИзменениеСуммСтоимостиДвиженийИНАГРО_РеализацияОрганизаций(Движения, ТаблицаПоТоварам);	
		КонецЕсли;
		// ИНАГРО--
	КонецЕсли;
	
	ТаблицаПоВторомуСобытиюНал = ДвиженияПоРегистрамНалоговогоУчета(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоУслугам, ТаблицаПоТаре, Отказ);
	
	// НДС 
	ПроводкиПоНДС(ПроводкиБУ, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоУслугам, ТаблицаПоТаре, ТаблицаПоВторомуСобытиюНал, Отказ);
	
	// Учет реализованных услуг
	ДвиженияПоРегиструРеализацияУслуг(СтруктураШапкиДокумента, ДатаДока, ТаблицаПоУслугам);
	
	// ИНАГРО++
	Если ИНАГРО_ОбщийВызовСервераПовтИсп.ЕстьБСПУ() Тогда
		ИНАГРО_Общий.ИНАГРО_ВедомостьДвиженийРасход(Движения, ТаблицаПоТоварам, СтруктураШапкиДокумента);
	КонецЕсли; 	
	
	Если НЕ Отказ И ИНАГРО_ВидПередачи = Перечисления.ИНАГРО_ВидыПередачиТоваров.ПоОрдеру Тогда
		
		СтруктТаблицДокумента = Новый Структура;
		СтруктТаблицДокумента.Вставить("ТаблицаПоТоварам", ТаблицаПоТоварам);
		СтруктТаблицДокумента.Вставить("ТаблицаПоТаре",    ТаблицаПоТаре);
				
		ТаблицыДанныхДокумента = ЗагрузитьТаблицыДокументаВСтруктуру(Движения.ИНАГРО_ТоварыНаСкладах, СтруктТаблицДокумента);			
     		
      	УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Склад",          Склад);
        УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ВозвратнаяТара", Истина, "ТаблицаПоТаре");
		
		ЗаписатьТаблицыДокументаВРегистр(Движения.ИНАГРО_ТоварыНаСкладах, ВидДвиженияНакопления.Приход, ТаблицыДанныхДокумента, Дата);
		
	КонецЕсли;
	// ИНАГРО--
	
КонецПроцедуры // ДвиженияПоРегистрамРегл()

Процедура ДвиженияПоРегиструРеализацияУслуг(СтруктураШапкиДокумента, ДатаДока, ТаблицаПоУслугам)
	
	Если НЕ СтруктураШапкиДокумента.РазрешитьУчетУслугБезПлановыхЦен Тогда
		Возврат;
	КонецЕсли;
	
	ТипСтатьяЗатрат = Тип("СправочникСсылка.СтатьиЗатрат");
	
	ДвиженияРеализацияУслуг = Движения["РеализацияУслуг"];
	
	Для Каждого СтрокаТаблицы Из ТаблицаПоУслугам Цикл
		
		СтрокаДвижения                       = ДвиженияРеализацияУслуг.Добавить();
		СтрокаДвижения.Период                = ДатаДока;
		СтрокаДвижения.Организация           = СтруктураШапкиДокумента.Организация;
		СтрокаДвижения.СчетРасходов          = СтрокаТаблицы.СчетРасходовБУ;
		СтрокаДвижения.НоменклатурнаяГруппа  = СтрокаТаблицы.НоменклатурнаяГруппа;
		
		Если СтруктураШапкиДокумента.НеОтноситьСебестоимостьЗапасовНаРасходыПоНУ = Истина Тогда
		    СтрокаДвижения.НалоговоеНазначениеДоходовИЗатрат  = Справочники.НалоговыеНазначенияАктивовИЗатрат.НКУ_НеХозДеятельность;
		Иначе
			СтрокаДвижения.НалоговоеНазначениеДоходовИЗатрат  = СтрокаТаблицы.НалоговоеНазначениеДоходовИЗатрат;
		КонецЕсли;
		
		ЕстьСтатьяЗатрат = Ложь;
		Для Н = 1 По 3 Цикл
			Если ТипЗнч(СтрокаТаблицы["СубконтоРасходовБУ" + Н]) = ТипСтатьяЗатрат Тогда
				ЕстьСтатьяЗатрат = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если ЕстьСтатьяЗатрат = Истина Тогда
			СтрокаДвижения.СтатьяЗатрат = СтрокаТаблицы["СубконтоРасходовБУ" + Н];
		КонецЕсли;
		
		СтрокаДвижения.Сумма                 = СтрокаТаблицы.СуммаБезНДСРегл;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПереоценкаАТТВПродажныхЦенах(СтруктураШапкиДокумента, ТаблицаПоТоварам)
	
	УчетВПродажныхЦенах = (СтруктураШапкиДокумента.СпособОценкиТоваровВРознице = Перечисления.СпособыОценкиТоваровВРознице.ПоПродажнойСтоимости);

	Если УчетВПродажныхЦенах И СтруктураШапкиДокумента.Склад.ТипСклада = Перечисления.ТипыСкладов.РозничныйМагазин Тогда
		
		ПроводкиБУ = Движения.Хозрасчетный;
		
		Для Каждого Строка из ТаблицаПоТоварам Цикл
			
			Если БухгалтерскийУчетВызовСервераПовтИсп.КомиссионныйТовар(Строка.СчетУчетаБУ) Тогда
				Продолжить;
			КонецЕсли;
			
			Для Каждого Партия Из Строка.СписанныеПартииБУ Цикл
				Если Партия.Количество = 0 Тогда
					Продолжить;
				КонецЕсли;
				УчетнаяЦена   = Партия.СуммаСписания;
				УчетнаяЦенаНУ = Партия.СуммаСписанияНУ;
				
				СуммаПродажи = Строка.Сумма;
				
				СуммаПереоценки   = (СуммаПродажи * Партия.Количество / Строка.Количество) - (УчетнаяЦена);
				СуммаПереоценкиНУ = (СуммаПродажи * Партия.Количество / Строка.Количество) - (УчетнаяЦенаНУ);
				
				Если СуммаПереоценки <> 0 Тогда
					Проводка = ПроводкиБУ.Добавить();
					Проводка.Период      = СтруктураШапкиДокумента.Дата;
					Проводка.Организация = СтруктураШапкиДокумента.Организация;
					Проводка.Содержание  = НСтр("ru='Переоценка товаров в рознице';uk='Переоцінка товарів у роздробі'",Локализация.КодЯзыкаИнформационнойБазы());
					
					Проводка.СчетДт      = Строка.СчетУчетаБУ;
					Проводка.СчетКт      = ПланыСчетов.Хозрасчетный.ТорговаяНаценкаАТТ;
					
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Склады",  СтруктураШапкиДокумента.Склад);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Склады",  СтруктураШапкиДокумента.Склад);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Номенклатура",  Строка.Номенклатура);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Номенклатура",  Строка.Номенклатура);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Партии",  Партия.Партия);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Партии",  Партия.Партия);
					
					Проводка.Сумма       = СуммаПереоценки;
					
					Проводка.НалоговоеНазначениеДт = Строка.НалоговоеНазначение;
					Проводка.НалоговоеНазначениеКт = Строка.НалоговоеНазначение;
					
					Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыльДо2015 Тогда
						Проводка.СуммаНУДт = СуммаПереоценкиНУ;
						Проводка.СуммаНУКт = СуммаПереоценкиНУ;
					КонецЕсли;
					
					//Списание результата переоценки продаваемого товара
					Проводка = ПроводкиБУ.Добавить();
					Проводка.Период      = СтруктураШапкиДокумента.Дата;
					Проводка.Организация = СтруктураШапкиДокумента.Организация;
					Проводка.Содержание  = НСтр("ru='Списание результата переоценки';uk='Списання результату переоцінки'",Локализация.КодЯзыкаИнформационнойБазы());
					
					Проводка.СчетКт      = Строка.СчетУчетаБУ;
					Проводка.СчетДт      = Строка.КорСчетСписанияБУ;
					
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, Строка.КорСубконтоСписанияБУ1);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, Строка.КорСубконтоСписанияБУ2);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, Строка.КорСубконтоСписанияБУ3);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "НоменклатурныеГруппы", Строка.НоменклатурнаяГруппа);
					Если  СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.ПродажаКомиссия
						И СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты", 	СтруктураШапкиДокумента.Контрагент);
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Номенклатура", 	Строка.Номенклатура);
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Партии", 		Партия.Партия);
					КонецЕсли;
					
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Склады",  СтруктураШапкиДокумента.Склад);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Номенклатура",  Строка.Номенклатура);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Партии",  Партия.Партия);
					
					Проводка.Сумма       = СуммаПереоценки;
					
					Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыльДо2015 Тогда
    					Проводка.НалоговоеНазначениеДт = Строка.НалоговоеНазначениеДоходовИЗатрат;
					КонецЕсли;
					
					Проводка.НалоговоеНазначениеКт = Строка.НалоговоеНазначение;
					
					Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыльДо2015 Тогда
						Проводка.СуммаНУДт = СуммаПереоценкиНУ;
						Проводка.СуммаНУКт = СуммаПереоценкиНУ;
					КонецЕсли;
					
				КонецЕсли;
			КонецЦикла;
									
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

Процедура ПроводкиПоНДС(ПроводкиБУ, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоУслугам, ТаблицаПоТаре, ТаблицаПоВторомуСобытиюНал, Отказ)
	
	Если НЕ СтруктураШапкиДокумента.ЕстьНДС Тогда
		// Учет НДС не ведется
		Возврат;
	КОнецЕсли;

	// Получим таблицу движений по счетам НДС
	
	// ТОВАРЫ
	ТаблицаКопия = ТаблицаПоТоварам.Скопировать();                                                                                                                               
	ТаблицаКопия.Свернуть("СтавкаНДС, СчетДоходовБУ, СубконтоДоходовБУ1, СубконтоДоходовБУ2, СубконтоДоходовБУ3, НоменклатурнаяГруппа, СчетУчетаНДС, НалоговоеНазначениеДоходовИЗатрат","ПроводкиСуммаНДСРегл,ПроводкиСуммаНДСВал,ПроводкиСуммаНДСКурсНБУ");
	ТаблицаДвижений = ТаблицаКопия.Скопировать();
	
	// УСЛУГИ
	ТаблицаКопия = ТаблицаПоУслугам.Скопировать();                                                                                                           					
	ТаблицаКопия.Свернуть("СтавкаНДС, СчетДоходовБУ, СубконтоДоходовБУ1, СубконтоДоходовБУ2, СубконтоДоходовБУ3, НоменклатурнаяГруппа, СчетУчетаНДС, НалоговоеНазначениеДоходовИЗатрат","ПроводкиСуммаНДСРегл,ПроводкиСуммаНДСВал,ПроводкиСуммаНДСКурсНБУ");
	ОбщегоНазначенияБПВызовСервера.ЗагрузитьВТаблицуЗначений(ТаблицаКопия, ТаблицаДвижений);
	ТаблицаДвижений.Свернуть("СтавкаНДС, СчетДоходовБУ, СубконтоДоходовБУ1, СубконтоДоходовБУ2, СубконтоДоходовБУ3, НоменклатурнаяГруппа, СчетУчетаНДС, НалоговоеНазначениеДоходовИЗатрат","ПроводкиСуммаНДСРегл,ПроводкиСуммаНДСВал,ПроводкиСуммаНДСКурсНБУ");
	
	Для Каждого СтрокаТаблицы Из ТаблицаДвижений Цикл
		
		Если    СтрокаТаблицы.ПроводкиСуммаНДСРегл <> 0 
			ИЛИ СтрокаТаблицы.ПроводкиСуммаНДСВал  <> 0 Тогда
			
			Проводка = ПроводкиБУ.Добавить();

			Проводка.Период                     = СтруктураШапкиДокумента.Дата;
			Проводка.Активность                 = Истина;
			Проводка.Организация                = СтруктураШапкиДокумента.Организация;
			Проводка.Сумма                      = СтрокаТаблицы.ПроводкиСуммаНДСРегл;
			Проводка.Содержание                 = НСтр("ru='НДС: налоговые обязательства: отгрузка';uk=""ПДВ: податкові зобов'язання: відвантаження""",Локализация.КодЯзыкаИнформационнойБазы());
			Проводка.НомерЖурнала               = "";

			Если НЕ СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
				Проводка.СчетДт                     = СтрокаТаблицы.СчетДоходовБУ;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтрокаТаблицы.СубконтоДоходовБУ1);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, СтрокаТаблицы.СубконтоДоходовБУ2);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, СтрокаТаблицы.СубконтоДоходовБУ3);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "НоменклатурныеГруппы", СтрокаТаблицы.НоменклатурнаяГруппа);
				
				Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыльДо2015 Тогда
					
					Проводка.НалоговоеНазначениеДт = СтрокаТаблицы.НалоговоеНазначениеДоходовИЗатрат;
					Проводка.СуммаНУДт = СтрокаТаблицы.ПроводкиСуммаНДСРегл;
					
				КонецЕсли;
				
			Иначе	
				// с 2011 года согласно НК начисляются обязательства при поставке товаров по договорам комиссии
				Проводка.СчетДт                     = СтруктураШапкиДокумента.СчетУчетаНДСПодтвержденный;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты", СтруктураШапкиДокумента.Контрагент);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Договоры"   , СтруктураШапкиДокумента.ДоговорКонтрагента);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ДокументыРасчетовСКонтрагентами", НалоговыйУчет.ОпределитьСделкуНалоговыйУчет(СтруктураШапкиДокумента, Ссылка, Сделка));
			КонецЕсли;
			
			Проводка.СчетКт                     = СтрокаТаблицы.СчетУчетаНДС;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Контрагенты", СтруктураШапкиДокумента.Контрагент);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Договоры"   , СтруктураШапкиДокумента.ДоговорКонтрагента);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ДокументыРасчетовСКонтрагентами", НалоговыйУчет.ОпределитьСделкуНалоговыйУчет(СтруктураШапкиДокумента, Ссылка, Сделка));
			
			НалоговыйУчет.РазбитьПроводкуПоНДСНаПервоеВтороеСобытие(ТаблицаПоВторомуСобытиюНал, ПроводкиБУ, Проводка, 
													  "Кт", СтруктураШапкиДокумента.СчетУчетаНДСПодтвержденный, 
													  СтруктураШапкиДокумента.ДоговорКонтрагента, 
													  НалоговыйУчет.ОпределитьСделкуНалоговыйУчет(СтруктураШапкиДокумента, Ссылка, Сделка), Сделка,
													  Перечисления.СобытияОжидаемыйИПодтвержденныйНДСПродаж.Реализация,
													  СтрокаТаблицы.СтавкаНДС,	
													  ,,,СтрокаТаблицы.ПроводкиСуммаНДСВал, СтрокаТаблицы.ПроводкиСуммаНДСКурсНБУ, КурсЗачетаАвансаРегл);
			
		КонецЕсли;

	КонецЦикла;
	
КонецПроцедуры

Функция ДвиженияПоРегистрамНалоговогоУчета(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоУслугам, ТаблицаПоТаре, Отказ)
	
	ТаблицаПоВторомуСобытиюНал = НалоговыйУчет.СоздатьСтруктуруТаблицыНалоговыхСумм();
	
	Если Не СтруктураШапкиДокумента.ЕстьНДС Тогда
		Возврат ТаблицаПоВторомуСобытиюНал;
	КонецЕсли;
	
	//Отразим Продажи в регистре ПродажиНалоговыйУчет
	НаборДвижений = Движения.ПродажиНалоговыйУчет;
	
	// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
	ТаблицаДвижений = НаборДвижений.ВыгрузитьКолонки();
	ТаблицаДвиженийТара = ТаблицаДвижений.Скопировать();
	
	// УСЛУГИ
	ТаблицаКопия = ТаблицаПоУслугам.Скопировать();
	ТаблицаКопия.Свернуть("СтавкаНДС","СуммаСНДСВал, СуммаНДСВал");
	ТаблицаПродаж = ТаблицаКопия.Скопировать();
	
	// ТОВАРЫ
	Если НЕ СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
		
		ТаблицаКопия = ТаблицаПоТоварам.Скопировать();
	ТаблицаКопия.Свернуть("СтавкаНДС","СуммаСНДСВал, СуммаНДСВал");
		ОбщегоНазначенияБПВызовСервера.ЗагрузитьВТаблицуЗначений(ТаблицаКопия, ТаблицаПродаж);
		
	КонецЕсли;		
	
	ТаблицаПродаж.Свернуть("СтавкаНДС","СуммаСНДСВал, СуммаНДСВал");
	ТаблицаПродаж.Колонки.СуммаСНДСВал.Имя = "СуммаВзаиморасчетов";
	ТаблицаПродаж.Колонки.СуммаНДСВал.Имя  = "СуммаНДС";
	ОбщегоНазначенияБПВызовСервера.ЗагрузитьВТаблицуЗначений(ТаблицаПродаж, ТаблицаДвижений);
	ТаблицаДвижений.ЗаполнитьЗначения(Организация       , "Организация");
	ТаблицаДвижений.ЗаполнитьЗначения(ДоговорКонтрагента, "ДоговорКонтрагента");
	ТаблицаДвижений.ЗаполнитьЗначения(НалоговыйУчет.ОпределитьСделкуНалоговыйУчет(СтруктураШапкиДокумента,
																	СтруктураШапкиДокумента.Ссылка, 
																	СтруктураШапкиДокумента.Сделка),
									  "Сделка");
	ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СобытияПродажиНалоговыйУчет.РеализацияПокупателю, "Событие");
	
	Если СтруктураШапкиДокумента.СложныйНалоговыйУчет Тогда
		
		// очистим налоговые реквизиты
		ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтавкиНДС.ПустаяСсылка(), 			"СтавкаНДС");
		ТаблицаДвижений.ЗаполнитьЗначения(0, 												"СуммаНДС");
		
	Иначе		
		// упрощенный налоговый учет
		Если НЕ СтруктураШапкиДокумента.ЕстьНДС Тогда
			ТаблицаДвижений.ЗаполнитьЗначения(0, 												"СуммаНДС");	
			ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтавкиНДС.ПустаяСсылка(), 			"СтавкаНДС");
		КонецЕсли;
		
		Если СтруктураШапкиДокумента.ВедениеВзаиморасчетовНУ = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоРасчетнымДокументам Тогда
			// взаиморасчеты по договору по расчетным документам - необходимо заполнить в регистре реквизит РасчетныйДокумент
			ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.Сделка, "РасчетныйДокумент");
		КонецЕсли;			
		
	КонецЕсли;	
	
	//ТАРА
	ТаблицаКопия = ТаблицаПоТаре.Скопировать();
	ТаблицаКопия.Свернуть("СтавкаНДС","СуммаСНДСВал, СуммаНДСВал");
	ТаблицаКопия.Колонки.СуммаСНДСВал.Имя = "СуммаВзаиморасчетов";
	ТаблицаКопия.Колонки.СуммаНДСВал.Имя  = "СуммаНДС";
	ОбщегоНазначенияБПВызовСервера.ЗагрузитьВТаблицуЗначений(ТаблицаКопия, ТаблицаДвиженийТара);
	ТаблицаДвиженийТара.ЗаполнитьЗначения(Организация       , "Организация");
	ТаблицаДвиженийТара.ЗаполнитьЗначения(ДоговорКонтрагента, "ДоговорКонтрагента");
	ТаблицаДвиженийТара.ЗаполнитьЗначения(НалоговыйУчет.ОпределитьСделкуНалоговыйУчет(СтруктураШапкиДокумента,
																		СтруктураШапкиДокумента.Ссылка, 
																		СтруктураШапкиДокумента.Сделка),
									  	  "Сделка");
	ТаблицаДвиженийТара.ЗаполнитьЗначения(Перечисления.СобытияПродажиНалоговыйУчет.РеализацияПокупателю, "Событие");
    ТаблицаДвиженийТара.ЗаполнитьЗначения(Истина, "ВозвратнаяТара");
	
	Если СтруктураШапкиДокумента.СложныйНалоговыйУчет Тогда
		
		// очистим налоговые реквизиты
		ТаблицаДвиженийТара.ЗаполнитьЗначения(Перечисления.СтавкиНДС.ПустаяСсылка(), 			"СтавкаНДС");
		ТаблицаДвиженийТара.ЗаполнитьЗначения(0, 												"СуммаНДС");
		
	Иначе		
		// упрощенный налоговый учет
		Если НЕ СтруктураШапкиДокумента.ЕстьНДС Тогда
			ТаблицаДвиженийТара.ЗаполнитьЗначения(0, 												"СуммаНДС");	
			ТаблицаДвиженийТара.ЗаполнитьЗначения(Перечисления.СтавкиНДС.ПустаяСсылка(), 			"СтавкаНДС");
		КонецЕсли;
		
		Если СтруктураШапкиДокумента.ВедениеВзаиморасчетовНУ = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоРасчетнымДокументам Тогда
			// взаиморасчеты по договору по расчетным документам - необходимо заполнить в регистре реквизит РасчетныйДокумент
			ТаблицаДвиженийТара.ЗаполнитьЗначения(СтруктураШапкиДокумента.Сделка, "РасчетныйДокумент");
		КонецЕсли;			
		
	КонецЕсли;		
	
	Если НЕ Отказ И ТаблицаДвижений.Количество() > 0 Тогда
			
		НаборДвижений.мПериод          = Дата;
		НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;
			
		Движения.ПродажиНалоговыйУчет.ВыполнитьПриход();
		Движения.ПродажиНалоговыйУчет.Записать();
			
	КонецЕсли;
	
	Если НЕ Отказ И ТаблицаДвиженийТара.Количество() > 0 Тогда
			
		НаборДвижений.мПериод          = Дата;
		НаборДвижений.мТаблицаДвижений = ТаблицаДвиженийТара;
			
		Движения.ПродажиНалоговыйУчет.ВыполнитьПриход();
		Движения.ПродажиНалоговыйУчет.Записать();
			
	КонецЕсли;
	
	
	// ОжидаемыйИПодтвержденныйНДСПродаж
	Если НЕ СтруктураШапкиДокумента.СложныйНалоговыйУчет Тогда
		
		// Движения формируются по данным рассчета "первого события" 
	   НалоговыйУчет.ДвиженияПоРегистрамНалоговогоУчетаУпрощенныйНалоговыйУчет(ЭтотОбъект, ТаблицаПоВторомуСобытиюНал);
	
	Иначе

		НаборДвижений = Движения.ОжидаемыйИПодтвержденныйНДСПродаж;
		
		// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
		ТаблицаДвижений = НаборДвижений.ВыгрузитьКолонки();
		
		ТаблицаДвиженийТара = ТаблицаДвижений.Скопировать();
		
		// ТОВАРЫ
		ТаблицаКопия = ТаблицаПоТоварам.Скопировать();
		ТаблицаКопия.Свернуть("СтавкаНДС","СуммаБезНДСВал,СуммаНДСВал");
		ТаблицаПродаж = ТаблицаКопия.Скопировать();
		
		// УСЛУГИ
		ТаблицаКопия = ТаблицаПоУслугам.Скопировать();
		ТаблицаКопия.Свернуть("СтавкаНДС","СуммаБезНДСВал,СуммаНДСВал");
		ОбщегоНазначенияБПВызовСервера.ЗагрузитьВТаблицуЗначений(ТаблицаКопия, ТаблицаПродаж);
		
		ТаблицаПродаж.Свернуть("СтавкаНДС","СуммаБезНДСВал,СуммаНДСВал");
		ТаблицаПродаж.Колонки.СуммаБезНДСВал.Имя = "БазаНДС";
		ТаблицаПродаж.Колонки.СуммаНДСВал   .Имя = "СуммаНДС";
		ОбщегоНазначенияБПВызовСервера.ЗагрузитьВТаблицуЗначений(ТаблицаПродаж, ТаблицаДвижений);
		ТаблицаДвижений.ЗаполнитьЗначения(Организация       , "Организация");
		ТаблицаДвижений.ЗаполнитьЗначения(ДоговорКонтрагента, "ДоговорКонтрагента");
		ТаблицаДвижений.ЗаполнитьЗначения(НалоговыйУчет.ОпределитьСделкуНалоговыйУчет(СтруктураШапкиДокумента,
																		СтруктураШапкиДокумента.Ссылка, 
																		СтруктураШапкиДокумента.Сделка),
										  	"Сделка");
		ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СобытияОжидаемыйИПодтвержденныйНДСПродаж.Реализация, "СобытиеНДС");
		ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.КодыОперацийОжидаемыйИПодтвержденныйНДСПродаж.ОжидаемыйНДС, "КодОперации");

		
		// ТАРА
		ТаблицаКопия = ТаблицаПоТаре.Скопировать();
		ТаблицаКопия.Свернуть("СтавкаНДС","СуммаБезНДСВал");
		ТаблицаКопия.Колонки.СуммаБезНДСВал.Имя = "БазаНДС";
		ОбщегоНазначенияБПВызовСервера.ЗагрузитьВТаблицуЗначений(ТаблицаКопия, ТаблицаДвиженийТара);
		ТаблицаДвиженийТара.ЗаполнитьЗначения(Организация       , "Организация");
		ТаблицаДвиженийТара.ЗаполнитьЗначения(ДоговорКонтрагента, "ДоговорКонтрагента");
		ТаблицаДвиженийТара.ЗаполнитьЗначения(НалоговыйУчет.ОпределитьСделкуНалоговыйУчет(СтруктураШапкиДокумента,
																			СтруктураШапкиДокумента.Ссылка, 
																			СтруктураШапкиДокумента.Сделка),
											  "Сделка");
		ТаблицаДвиженийТара.ЗаполнитьЗначения(Истина            , "ВозвратнаяТара");
		ТаблицаДвиженийТара.ЗаполнитьЗначения(Перечисления.СобытияОжидаемыйИПодтвержденныйНДСПродаж.Реализация, "СобытиеНДС");
		ТаблицаДвиженийТара.ЗаполнитьЗначения(Перечисления.КодыОперацийОжидаемыйИПодтвержденныйНДСПродаж.ОжидаемыйНДС   , "КодОперации");
			
		Если НЕ Отказ И ТаблицаДвижений.Количество() > 0 Тогда
			
			НаборДвижений.мПериод          = Дата;
			НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;
		
			Движения.ОжидаемыйИПодтвержденныйНДСПродаж.ВыполнитьПриход();
			Движения.ОжидаемыйИПодтвержденныйНДСПродаж.Записать();
			
		КонецЕсли;
		
		Если НЕ Отказ И ТаблицаДвиженийТара.Количество() > 0 Тогда
			
			НаборДвижений.мПериод          = Дата;
			НаборДвижений.мТаблицаДвижений = ТаблицаДвиженийТара;
		
			Движения.ОжидаемыйИПодтвержденныйНДСПродаж.ВыполнитьПриход();
			Движения.ОжидаемыйИПодтвержденныйНДСПродаж.Записать();
			
		КонецЕсли;
		
	КонецЕсли;

	Возврат ТаблицаПоВторомуСобытиюНал;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	ТипДанныхЗаполнения = ТипЗнч(ДанныеЗаполнения);
	Если ДанныеЗаполнения <> Неопределено И ТипДанныхЗаполнения <> Тип("Структура")
		И Метаданные().ВводитсяНаОсновании.Содержит(ДанныеЗаполнения.Метаданные()) Тогда
		ЗаполнитьПоДокументуОснованию(ДанныеЗаполнения);
	КонецЕсли;
	ЗаполнениеДокументов.Заполнить(ЭтотОбъект, ДанныеЗаполнения);
	
	// Заполнение реквизитов, специфичных для документа:
	Если ЗначениеЗаполнено(Организация)
		И ЗначениеЗаполнено(Контрагент)
		И ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
		Документы.РеализацияТоваровУслуг.ЗаполнитьСчетаУчетаРасчетов(ЭтотОбъект);
	КонецЕсли;
	
	// ИНАГРО++
	Если  ТипДанныхЗаполнения = Тип("Структура")
		И ДанныеЗаполнения.Свойство("ВидОперации") Тогда
		ВидОперации = ДанныеЗаполнения.ВидОперации;
	КонецЕсли;
	
	Если НЕ ИНАГРО_ОбщийВызовСервераПовтИсп.ЕстьБСПУ()  Тогда
		ИНАГРО_РасхождениеКоличества = Ложь;
		ИНАГРО_ЕстьДотация           = Ложь;
	КонецЕсли;	
	// ИНАГРО--
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	Дата = НачалоДня(ОбщегоНазначенияБП.ПолучитьРабочуюДату());
	Ответственный = Пользователи.ТекущийПользователь();

	СтруктураКурсаВзаиморасчетов = РаботаСКурсамиВалют.ПолучитьКурсВалюты(
	ВалютаДокумента, Дата);
	
	КурсВзаиморасчетов      = СтруктураКурсаВзаиморасчетов.Курс;
	КратностьВзаиморасчетов = СтруктураКурсаВзаиморасчетов.Кратность;
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)

	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	// Почистим лишние в табличных частях
	ВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	РеквизитыДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДоговорКонтрагента, "ВалютаВзаиморасчетов");
	Внешнеэкономический = ЗначениеЗаполнено(ДоговорКонтрагента) И (РеквизитыДоговора.ВалютаВзаиморасчетов <> ВалютаРегламентированногоУчета);
	Если (НЕ ПолучитьФункциональнуюОпцию("ИспользоватьВозвратнуюТару") ИЛИ Внешнеэкономический)
		И ВозвратнаяТара.Количество() > 0 Тогда
		ВозвратнаяТара.Очистить();
	КонецЕсли;

	// Если передаем товар на комиссию, то услуг не может быть
	ЭтоКомиссия = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
		ДоговорКонтрагента, "ВидДоговора") = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером;
	Если ЭтоКомиссия Тогда
		Услуги.Очистить();
	КонецЕсли;
	
	Если АвторасчетНДС Тогда
		// соответствие для хранения погрешностей округлений
		ПогрешностиОкругления = Новый Соответствие();
		// пересчет сумм НДС с учетом ошибок округления
		УчетНДСКлиентСервер.ПересчитатьНДСсУчетомПогрешностиОкругления(Товары, Ссылка, СуммаВключаетНДС, ПогрешностиОкругления, "Товары", Строка(ВалютаДокумента));
		// пересчет сумм НДС с учетом ошибок округления
		УчетНДСКлиентСервер.ПересчитатьНДСсУчетомПогрешностиОкругления(Услуги, Ссылка, СуммаВключаетНДС, ПогрешностиОкругления, "Услуги", Строка(ВалютаДокумента));
	КонецЕсли;
	
	// Посчитать суммы документа и записать ее в соответствующий реквизит шапки для показа в журналах
	СуммаДокумента = УчетНДС.ПолучитьСуммуДокументаСНДС(ЭтотОбъект, "Товары")
		           + УчетНДС.ПолучитьСуммуДокументаСНДС(ЭтотОбъект, "Услуги");
				   
				   
	ПлательщикНДС = УчетнаяПолитика.ПлательщикНДС(Организация, Дата);
	ПлательщикНалогаНаПрибыльДо2015  = УчетнаяПолитика.ПлательщикНалогаНаПрибыльДо2015(Организация, Дата);			   
	
	Если НЕ ПлательщикНДС Тогда
		// организация - не плательщик НДС. Установим во всех ТЧ признак соответствующего учета НДС
		НеОБлНДСДеятельность = Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяХозДеятельность;
		
		Для каждого СтрокаТЧ  Из Товары Цикл
		    СтрокаТЧ.НалоговоеНазначение = НеОБлНДСДеятельность;
		КонецЦикла; 
		Для каждого СтрокаТЧ  Из ВозвратнаяТара Цикл
		    СтрокаТЧ.НалоговоеНазначение = НеОБлНДСДеятельность;
		КонецЦикла; 
		Для каждого СтрокаТЧ  Из Услуги Цикл
		    СтрокаТЧ.НалоговоеНазначение = НеОБлНДСДеятельность;
		КонецЦикла; 
	КонецЕсли; 
	
	Если НЕ ПлательщикНалогаНаПрибыльДо2015 Тогда
		
		Для каждого СтрокаТЧ  Из Товары Цикл
		    СтрокаТЧ.НалоговоеНазначениеДоходовИЗатрат = Неопределено;
			СтрокаТЧ.СебестоимостьНУ = 0;
		КонецЦикла; 
		
		Для каждого СтрокаТЧ  Из ВозвратнаяТара Цикл
		    СтрокаТЧ.НалоговоеНазначениеДоходовИЗатрат = Неопределено;
		КонецЦикла; 
		
		Для каждого СтрокаТЧ  Из Услуги Цикл
		    СтрокаТЧ.НалоговоеНазначениеДоходовИЗатрат = Неопределено;
		КонецЦикла; 
		
	КонецЕсли; 
	
	Если ЕстьАвансДо01042011 Тогда
		Если НеОтноситьСебестоимостьЗапасовНаРасходыПоНУ Тогда
			СуммаВДВРПоАвансуДо01042011	= СуммаДокумента + ВозвратнаяТара.Итог("Сумма");
		КонецЕсли;
	Иначе	
		НеОтноситьСебестоимостьЗапасовНаРасходыПоНУ = Ложь;
	КонецЕсли;
	
	ДополнительныеСвойства.Вставить("РежимЗаписи", РежимЗаписи);

КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)

	// Определяем условия проведения документа:
	ВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	
	ПлательщикНДС = УчетнаяПолитика.ПлательщикНДС(Организация, Дата);
	ПлательщикНалогаНаПрибыльДо2015  = УчетнаяПолитика.ПлательщикНалогаНаПрибыльДо2015(Организация, Дата);

	ЭтоОборудование      = ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.Оборудование;
	
	РеквизитыДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДоговорКонтрагента, "ВидДоговора, ВалютаВзаиморасчетов, 
		|СложныйНалоговыйУчет, СхемаНалоговогоУчета");
	ЭтоКомиссия          = РеквизитыДоговора.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером;
	Внешнеэкономический  = ЗначениеЗаполнено(ДоговорКонтрагента) И (РеквизитыДоговора.ВалютаВзаиморасчетов <> ВалютаРегламентированногоУчета);
	СложныйНалоговыйУчет = ЗначениеЗаполнено(ДоговорКонтрагента) И (РеквизитыДоговора.СложныйНалоговыйУчет);
	
	// Исключаем из проверки реквизиты, заполнение которых стало необязательным:
	МассивНепроверяемыхРеквизитов = Новый Массив();

	// Не проверяем заполненность табличных частей (включая реквизиты), 
	// которые не используются при определенных видах операции и будут очищены в ПередЗаписью
	НеИспользуемыеТабличныеЧасти = Документы.РеализацияТоваровУслуг.НеИспользуемыеТабличныеЧасти(ВидОперации, ЭтоКомиссия, Внешнеэкономический);
	
	ОбщегоНазначенияБП.ИсключитьИзПроверкиНеиспользуемыеТабличныеЧасти(
		ПроверяемыеРеквизиты,
		НеИспользуемыеТабличныеЧасти);
		
	// Документ без данных о реализованных товарах или услугах
	// считаем заполненным некорректно.
	
	ОсновныеСписки = Новый Массив();
	ОсновныеСписки.Добавить("Товары");
	ОсновныеСписки.Добавить("ВозвратнаяТара");
	ОсновныеСписки.Добавить("Услуги");
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ОсновныеСписки, НеИспользуемыеТабличныеЧасти);
	
	ОбщегоНазначенияБП.ИсключитьИзПроверкиОсновныеТабличныеЧасти(
		ЭтотОбъект, 
		ОсновныеСписки, 
		ПроверяемыеРеквизиты);
		
	
	// Склад нужен только тогда, когда реализовываются материальные ценности
	Если Товары.Количество() + ВозвратнаяТара.Количество() = 0 Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Склад");
	КонецЕсли;

	Если ЭтоКомиссия Тогда
		МассивНепроверяемыхРеквизитов.Добавить("СчетУчетаРасчетовСКонтрагентом");
	КонецЕсли;

	МассивНепроверяемыхРеквизитов.Добавить("СчетУчетаРасчетовПоАвансам"); // Не обязателен всегда
	Если Не РеализацияТоваровУслугФормыКлиентСервер.ИспользуетсяСчетУчетаНДС(ПлательщикНДС, ЭтоКомиссия, Дата) Тогда
		МассивНепроверяемыхРеквизитов.Добавить("СчетУчетаНДС");		
	КонецЕсли;
	Если Не РеализацияТоваровУслугФормыКлиентСервер.ИспользуетсяСчетУчетаНДСПодтвержденный(ПлательщикНДС, ЭтоКомиссия, Дата, СложныйНалоговыйУчет) Тогда
		МассивНепроверяемыхРеквизитов.Добавить("СчетУчетаНДСПодтвержденный");		
	КонецЕсли;

	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьВозвратнуюТару") ИЛИ Внешнеэкономический
		ИЛИ ВозвратнаяТара.Количество() = 0 Тогда
		МассивНепроверяемыхРеквизитов.Добавить("СчетУчетаРасчетовПоТаре");
		МассивНепроверяемыхРеквизитов.Добавить("СчетУчетаРасчетовПоТареПоАвансам");
	КонецЕсли;
	
	Если ИНАГРО_ЕстьДотация Тогда // ИНАГРО
		ПроверяемыеРеквизиты.Добавить("ИНАГРО_СчетУчетаРасчетовПоДотациям");
		ПроверяемыеРеквизиты.Добавить("ИНАГРО_СчетДотации");
	КонецЕсли;

	Если ПлательщикНДС И ЭтоКомиссия Тогда
		
		Если Не ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
			// Проверку не выполняем
			
		ИначеЕсли НЕ РеквизитыДоговора.СхемаНалоговогоУчета = Справочники.СхемыНалоговогоУчетаПоДоговорамКонтрагентов.СКомиссионером_НК Тогда
			ТекстСообщения = ОбщегоНазначенияБПКлиентСервер.ПолучитьТекстСообщения(, "Корректность",
			    НСтр("ru='Договор';uk='Договір'"),,,
				НСтр("ru='В договоре комиссии указана неправильная схема налогового учета! Используйте схему для периода с 2011 года!';uk='У договорі комісії зазначена неправильна схема податкового обліку! Використайте схему для періоду з 2011 року!'")
			);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, "ДоговорКонтрагента", "Объект", Отказ);
			
		ИначеЕсли НЕ СложныйНалоговыйУчет Тогда			
			ТекстСообщения = ОбщегоНазначенияБПКлиентСервер.ПолучитьТекстСообщения(, "Корректность",
			    НСтр("ru='Договор';uk='Договір'"),,,
				НСтр("ru='По договорам комиссии с 2011 года в конфигурации реализован только ""Сложный налоговый учет"". Установите соответствующий флаг в договоре с контрагентом!';uk='За договорами комісії з 2011 року в конфігурації реалізований тільки ""Складний податковий облік"". Встановіть відповідний прапор в договорі з контрагентом!'")
			);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, "ДоговорКонтрагента", "Объект", Отказ);
			
		КонецЕсли;
	КонецЕсли;
	
	Если (Не ЕстьАвансДо01042011) ИЛИ (ЕстьАвансДо01042011 И НеОтноситьСебестоимостьЗапасовНаРасходыПоНУ) Тогда
		МассивНепроверяемыхРеквизитов.Добавить("СуммаВДВРПоАвансуДо01042011");		
	КонецЕсли;
	
	Если НЕ ЭтоКомиссия Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Товары.ПереданныеСчетУчетаБУ");
	Иначе
		МассивНепроверяемыхРеквизитов.Добавить("Товары.СхемаРеализации");
	КонецЕсли;
	
	Если Не ПлательщикНДС Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Товары.СтавкаНДС");
	КонецЕсли;
	
	// Проверяем корректность заполнения реквизитов шапки:

	Если ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
		ТекстСообщения = "";
		Если НЕ УчетВзаиморасчетов.ПроверитьВозможностьПроведенияВРеглУчете(
			ЭтотОбъект, ДоговорКонтрагента, ТекстСообщения) Тогда
			ТекстСообщения = ОбщегоНазначенияБПКлиентСервер.ПолучитьТекстСообщения(, "Корректность",
				НСтр("ru='Договор';uk='Договір'"),,, ТекстСообщения);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект,
				"ДоговорКонтрагента", "Объект", Отказ);
		КонецЕсли;
	КонецЕсли;

	// Исключаем из проверки те реквизиты табличных частей, обязательность которых
	//  зависит от значений других рекивизитов в строках табличных частей:
	МассивНепроверяемыхРеквизитов.Добавить("Товары.НалоговоеНазначение");
	МассивНепроверяемыхРеквизитов.Добавить("Товары.НалоговоеНазначениеДоходовИЗатрат");


	// Получаем содержимое табличных частей объекта с вспомогательными реквизитами:
	СтруктураРезультатов = Новый Структура;
	ТаблицыДокумента =  ПолучитьДанныеОбъектаДляПроверкиЗаполнения(СтруктураРезультатов, ЭтоКомиссия);
	
	НехозВНД_НДС = Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяНеХозДеятельность;
	НехозВНД_НП  = Справочники.НалоговыеНазначенияАктивовИЗатрат.НКУ_НеХозДеятельность;
	
	// Для определения вида деятельности НДС
	ДопПараметрыОпределенияВДНДС = Новый Структура("БартерИЭкспорт");
	Если (РеквизитыДоговора.ВалютаВзаиморасчетов <> ВалютаРегламентированногоУчета) 
	   И (РеквизитыДоговора.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.Бартерный) Тогда
		// Бартер и экспорт
		ДопПараметрыОпределенияВДНДС.БартерИЭкспорт = Истина;
	Иначе
		ДопПараметрыОпределенияВДНДС.БартерИЭкспорт = Ложь;
	КонецЕсли;

	// Проверяем табличную часть "Товары":
	Если Товары.Количество() > 0 Тогда

		ВыборкаТоваров = ТаблицыДокумента[СтруктураРезультатов.Товары].Выбрать();
		ИмяСписка = НСтр("ru='Товары';uk='Товари'");
		Пока ВыборкаТоваров.Следующий() Цикл

			Префикс = "Товары[" + Формат(ВыборкаТоваров.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].";


//			
			Если ПлательщикНалогаНаПрибыльДо2015 И НЕ ЭтоКомиссия Тогда   
				
				Если НЕ ЗначениеЗаполнено(ВыборкаТоваров.НалоговоеНазначениеДоходовИЗатрат) Тогда
					
					ТекстСообщения = ОбщегоНазначенияБПКлиентСервер.ПолучитьТекстСообщения("Колонка",, 
						НСтр("ru='Налоговое назначение (доходов и затрат)';uk='Податкове призначення (доходів і витрат)'"),
						ВыборкаТоваров.НомерСтроки, ИмяСписка
					);
					Поле = Префикс + "НалоговоеНазначениеДоходовИЗатрат";
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
					
				ИначеЕсли ВыборкаТоваров.НалоговоеНазначениеДоходовИЗатрат = НехозВНД_НП Тогда 
					
					ТекстСообщения = ОбщегоНазначенияБПКлиентСервер.ПолучитьТекстСообщения("Колонка", "Корректность", 
						НСтр("ru='Налоговое назначение (доходов и затрат)';uk='Податкове призначення (доходів і витрат)'"),
						ВыборкаТоваров.НомерСтроки, ИмяСписка, 
						НСтр("ru='Вид налоговой деятельности при реализации не может быть ""Не хозяйственной деятельностью"".';uk='Вид податкової діяльності при реалізації не може бути ""Не господарською діяльністю"".'")
					);
					Поле = Префикс + "НалоговоеНазначениеДоходовИЗатрат";
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
					
				КонецЕсли;
				
			КонецЕсли;
			
			Если НЕ БухгалтерскийУчетВызовСервераПовтИсп.КомиссионныйТовар(ВыборкаТоваров.СчетУчетаБУ) Тогда
					
				Если ПлательщикНДС Тогда
						
					Если НЕ ЗначениеЗаполнено(ВыборкаТоваров.НалоговоеНазначение) Тогда
						
						ТекстСообщения = ОбщегоНазначенияБПКлиентСервер.ПолучитьТекстСообщения("Колонка",, 
							НСтр("ru='Налоговое назначение (НДС)';uk='Податкове призначення (ПДВ)'"),
							ВыборкаТоваров.НомерСтроки, ИмяСписка
						);
						Поле = Префикс + "НалоговоеНазначение";
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
						
					ИначеЕсли ВыборкаТоваров.НалоговоеНазначение = НехозВНД_НДС Тогда	
						
						ТекстСообщения = ОбщегоНазначенияБПКлиентСервер.ПолучитьТекстСообщения("Колонка", "Корректность", 
							НСтр("ru='Налоговое назначение (НДС)';uk='Податкове призначення (ПДВ)'"),
							ВыборкаТоваров.НомерСтроки, ИмяСписка,
							НСтр("ru='Вид налоговой деятельности при реализации не может быть ""Не хозяйственной деятельностью"".';uk='Вид податкової діяльності при реалізації не може бути ""Не господарською діяльністю"".'")
						);
						Поле = Префикс + "НалоговоеНазначение";
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);

						
					Иначе
								     
						Если НЕ ВыборкаТоваров.СтавкаНДС.Пустая()
						   И НЕ ВыборкаТоваров.ВидДеятельностиНДС = Перечисления.ВидыДеятельностиНДС.ПропорциональноОблагаемая
						   И НЕ ВыборкаТоваров.ВидДеятельностиНДС = УчетНДС.ПолучитьВидДеятельностиНДС(ВыборкаТоваров.СтавкаНДС, ДопПараметрыОпределенияВДНДС) 
						   И НЕ ЭтоКомиссия Тогда
							   
							ТекстСообщения = ОбщегоНазначенияБПКлиентСервер.ПолучитьТекстСообщения("Колонка", "Корректность", 
								НСтр("ru='Налоговое назначение (НДС)';uk='Податкове призначення (ПДВ)'"),
								ВыборкаТоваров.НомерСтроки, ИмяСписка,
								НСтр("ru='Налоговое назначение не соответствует ставке НДС, указанной в строке.';uk='Податкове призначення не відповідає ставці ПДВ, вказаній в рядку.'")
							);
							Поле = Префикс + "НалоговоеНазначение";
							ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
							
						КонецЕсли;
							
					КонецЕсли;
						
				КонецЕсли;
				
			КонецЕсли;

		КонецЦикла;
		
		Если НЕ ЭтоКомиссия Тогда
			// Схемы реализации должны быть заполнены правильно
			МассивРеквизитовДляПроверки = Новый Массив;
			МассивРеквизитовДляПроверки.Добавить("СчетДоходов");
			МассивРеквизитовДляПроверки.Добавить("СчетСебестоимости");
																 
			БухгалтерскийУчет.ПроверитьСхемыРеализацииТабличнойЧастиНаЗаполненость(
				ЭтотОбъект, 
				"Товары", ИмяСписка, 
				"СхемаРеализации", НСтр("ru='Схема реализации';uk='Схема реалізації'") , 
				МассивРеквизитовДляПроверки, 
				Отказ
			);

	    КонецЕсли;

	КонецЕсли;

	// Проверка заполнения табличной части "Услуги"
	Если Не ПлательщикНДС Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Услуги.СтавкаНДС");
	КонецЕсли;
	
	// Исключаем из проверки те реквизиты табличных частей, обязательность которых
	//  зависит от значений других рекивизитов в строках табличных частей:
	МассивНепроверяемыхРеквизитов.Добавить("Услуги.НалоговоеНазначение");
	МассивНепроверяемыхРеквизитов.Добавить("Услуги.НалоговоеНазначениеДоходовИЗатрат");
	
	Если ЭтоКомиссия И Услуги.Количество() > 0 Тогда

		// Табличная часть Услуги очистится перед записью

	ИначеЕсли Услуги.Количество() > 0 Тогда

		ВыборкаУслуг = ТаблицыДокумента[СтруктураРезультатов.Услуги].Выбрать();
		ИмяСписка = НСтр("ru='Услуги';uk='Послуги'");

		Пока ВыборкаУслуг.Следующий() Цикл
			Префикс = "Услуги[" + Формат(ВыборкаУслуг.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].";

			Если ПлательщикНалогаНаПрибыльДо2015 Тогда   
				
				Если НЕ ЗначениеЗаполнено(ВыборкаУслуг.НалоговоеНазначениеДоходовИЗатрат) Тогда
					
					ТекстСообщения = ОбщегоНазначенияБПКлиентСервер.ПолучитьТекстСообщения("Колонка",, 
						НСтр("ru='Налоговое назначение (доходов и затрат)';uk='Податкове призначення (доходів і витрат)'"),
						ВыборкаУслуг.НомерСтроки, ИмяСписка
					);
					Поле = Префикс + "НалоговоеНазначениеДоходовИЗатрат";
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
					
				ИначеЕсли ВыборкаУслуг.НалоговоеНазначениеДоходовИЗатрат = НехозВНД_НП Тогда 
					
					ТекстСообщения = ОбщегоНазначенияБПКлиентСервер.ПолучитьТекстСообщения("Колонка", "Корректность", 
						НСтр("ru='Налоговое назначение (доходов и затрат)';uk='Податкове призначення (доходів і витрат)'"),
						ВыборкаУслуг.НомерСтроки, ИмяСписка, 
						НСтр("ru='Вид налоговой деятельности при реализации не может быть ""Не хозяйственной деятельностью"".';uk='Вид податкової діяльності при реалізації не може бути ""Не господарською діяльністю"".'")
					);
					Поле = Префикс + "НалоговоеНазначениеДоходовИЗатрат";
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
					
				КонецЕсли;
				
			КонецЕсли;
			
			// Налоговое назначение (по НДС) проверять не нужно - оно однозначно определяется по ставке НДС
			
		КонецЦикла;
		
		// Схемы реализации должны быть заполнены правильно
		МассивРеквизитовДляПроверки = Новый Массив;
		МассивРеквизитовДляПроверки.Добавить("СчетДоходов");
		МассивРеквизитовДляПроверки.Добавить("СчетСебестоимости");
															 
		БухгалтерскийУчет.ПроверитьСхемыРеализацииТабличнойЧастиНаЗаполненость(
			ЭтотОбъект, 
			"Услуги", ИмяСписка, 
			"СхемаРеализации", НСтр("ru='Схема реализации';uk='Схема реалізації'") , 
			МассивРеквизитовДляПроверки, 
			Отказ
		);

	КонецЕсли;


	// Исключаем из проверки те реквизиты табличных частей, обязательность которых
	//  зависит от значений других рекивизитов в строках табличных частей:
	МассивНепроверяемыхРеквизитов.Добавить("ВозвратнаяТара.НалоговоеНазначение");
	МассивНепроверяемыхРеквизитов.Добавить("ВозвратнаяТара.НалоговоеНазначениеДоходовИЗатрат");

	// Проверка табличной части "Возвратная тара"

	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьВозвратнуюТару") ИЛИ Внешнеэкономический Тогда
		МассивНепроверяемыхРеквизитов.Добавить("ВозвратнаяТара.Номенклатура");
		МассивНепроверяемыхРеквизитов.Добавить("ВозвратнаяТара.Количество");
		МассивНепроверяемыхРеквизитов.Добавить("ВозвратнаяТара.Сумма");
		МассивНепроверяемыхРеквизитов.Добавить("ВозвратнаяТара.СчетУчетаБУ");
		МассивНепроверяемыхРеквизитов.Добавить("ВозвратнаяТара.СхемаРеализации");

	// Проверяем табличную часть "Товары":
	ИначеЕсли ВозвратнаяТара.Количество() > 0 Тогда

		ВыборкаВозвратнаяТара = ТаблицыДокумента[СтруктураРезультатов.ВозвратнаяТара].Выбрать();
		ИмяСписка = НСтр("ru='Возвратная тара';uk='Зворотна тара'");
		Пока ВыборкаВозвратнаяТара.Следующий() Цикл

			Префикс = "ВозвратнаяТара[" + Формат(ВыборкаВозвратнаяТара.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].";

			Если ПлательщикНалогаНаПрибыльДо2015 Тогда   
				
				Если НЕ ЗначениеЗаполнено(ВыборкаВозвратнаяТара.НалоговоеНазначениеДоходовИЗатрат) Тогда
					
					ТекстСообщения = ОбщегоНазначенияБПКлиентСервер.ПолучитьТекстСообщения("Колонка",, 
						НСтр("ru='Налоговое назначение (доходов и затрат)';uk='Податкове призначення (доходів і витрат)'"),
						ВыборкаВозвратнаяТара.НомерСтроки, ИмяСписка
					);
					Поле = Префикс + "НалоговоеНазначениеДоходовИЗатрат";
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
					
				ИначеЕсли ВыборкаВозвратнаяТара.НалоговоеНазначениеДоходовИЗатрат = НехозВНД_НП Тогда 
					
					ТекстСообщения = ОбщегоНазначенияБПКлиентСервер.ПолучитьТекстСообщения("Колонка", "Корректность", 
						НСтр("ru='Налоговое назначение (доходов и затрат)';uk='Податкове призначення (доходів і витрат)'"),
						ВыборкаВозвратнаяТара.НомерСтроки, ИмяСписка, 
						НСтр("ru='Вид налоговой деятельности при реализации не может быть ""Не хозяйственной деятельностью"".';uk='Вид податкової діяльності при реалізації не може бути ""Не господарською діяльністю"".'")
					);
					Поле = Префикс + "НалоговоеНазначениеДоходовИЗатрат";
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
					
				КонецЕсли;
				
			КонецЕсли;
			
			Если ПлательщикНДС Тогда
					
				Если НЕ ЗначениеЗаполнено(ВыборкаВозвратнаяТара.НалоговоеНазначение) Тогда
					
					ТекстСообщения = ОбщегоНазначенияБПКлиентСервер.ПолучитьТекстСообщения("Колонка",, 
						НСтр("ru='Налоговое назначение (НДС)';uk='Податкове призначення (ПДВ)'"),
						ВыборкаВозвратнаяТара.НомерСтроки, ИмяСписка
					);
					Поле = Префикс + "НалоговоеНазначение";
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
					
				ИначеЕсли ВыборкаВозвратнаяТара.НалоговоеНазначение = НехозВНД_НДС Тогда	
					
					ТекстСообщения = ОбщегоНазначенияБПКлиентСервер.ПолучитьТекстСообщения("Колонка", "Корректность", 
						НСтр("ru='Налоговое назначение (НДС)';uk='Податкове призначення (ПДВ)'"),
						ВыборкаВозвратнаяТара.НомерСтроки, ИмяСписка,
						НСтр("ru='Вид налоговой деятельности при реализации не может быть ""Не хозяйственной деятельностью"".';uk='Вид податкової діяльності при реалізації не може бути ""Не господарською діяльністю"".'")
					);
					Поле = Префикс + "НалоговоеНазначение";
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);

					
				Иначе
							     
					// Ставка всегда: НеНДС
					Если НЕ ВыборкаВозвратнаяТара.ВидДеятельностиНДС = Перечисления.ВидыДеятельностиНДС.ПропорциональноОблагаемая
					   И НЕ ВыборкаВозвратнаяТара.ВидДеятельностиНДС = Перечисления.ВидыДеятельностиНДС.Необлагаемая Тогда
						   
						ТекстСообщения = ОбщегоНазначенияБПКлиентСервер.ПолучитьТекстСообщения("Колонка", "Корректность", 
							НСтр("ru='Налоговое назначение (НДС)';uk='Податкове призначення (ПДВ)'"),
							ВыборкаВозвратнаяТара.НомерСтроки, ИмяСписка,
							НСтр("ru='Налоговое назначение не может быть облагаемым.';uk='Податкове призначення не може бути оподатковуваним.'")
						);
						Поле = Префикс + "НалоговоеНазначение";
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
						
					КонецЕсли;
						
				КонецЕсли;
				
			КонецЕсли;

		КонецЦикла;
		
		Если НЕ ЭтоКомиссия Тогда
			// Схемы реализации должны быть заполнены правильно
			МассивРеквизитовДляПроверки = Новый Массив;
			МассивРеквизитовДляПроверки.Добавить("СчетДоходов");
			МассивРеквизитовДляПроверки.Добавить("СчетСебестоимости");
																 
			БухгалтерскийУчет.ПроверитьСхемыРеализацииТабличнойЧастиНаЗаполненость(
				ЭтотОбъект, 
				"ВозвратнаяТара", ИмяСписка, 
				"СхемаРеализации", НСтр("ru='Схема реализации';uk='Схема реалізації'") , 
				МассивРеквизитовДляПроверки, 
				Отказ
			);

	    КонецЕсли;

	КонецЕсли;

	// Удаляем из проверяемых реквизитов все, по которым автоматическая проверка не нужна:
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);

КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)

	Перем Заголовок, СтруктураШапкиДокумента;
	Перем ТаблицаПоТоварам, ТаблицаПоТаре, ТаблицаПоУслугам;

	// ПОДГОТОВКА ПРОВЕДЕНИЯ ПО ДАННЫМ ДОКУМЕНТА

	ПроведениеСервер.ПодготовитьНаборыЗаписейКПроведению(ЭтотОбъект);
	Если РучнаяКорректировка Тогда
		Возврат;
	КонецЕсли;

    мВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = НСтр("ru='Проведение документа ""';uk='Проведення документа ""'") + СокрЛП(Ссылка) + """: ";
	
	ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента);		
	ПодготовитьПараметрыУчетнойПолитики(СтруктураШапкиДокумента, Отказ, Заголовок);	
	ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоТаре, ТаблицаПоУслугам, Отказ, Заголовок);

	// Движения по документу
	Если Не Отказ Тогда
		ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоТаре,
							ТаблицаПоУслугам, Отказ, Заголовок);
	КонецЕсли;
						
	Движения.Хозрасчетный.ВыполнитьДействияПередЗаписьюДвижений();
						
	ПроведениеСервер.ПодготовитьНаборыЗаписейКЗаписиДвижений(ЭтотОбъект);

	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)

	ПроведениеСервер.ПодготовитьНаборыЗаписейКОтменеПроведения(ЭтотОбъект);
	Движения.Записать();


КонецПроцедуры

// ИНАГРО++
#Область СлужебныеПроцедурыИФункции

// Функция загружает таблицы документа
//
Функция ЗагрузитьТаблицыДокументаВСтруктуру(Движение, СтруктТаблицДокумента) Экспорт
	
	ПустаяТабРегистра = Движение.Выгрузить();
	ПустаяТабРегистра.Очистить();
	
	СтруктДанных = Новый Структура;
	Для Каждого ТабЧасть Из СтруктТаблицДокумента Цикл
		
		ТабРегистра = ПустаяТабРегистра.Скопировать();
		
		Если ТабЧасть.Значение <> Неопределено И ТабЧасть.Значение.Количество() > 0 Тогда
			ЗагрузитьВТаблицуЗначений( ТабЧасть.Значение, ТабРегистра);
		КонецЕсли;
		
		СтруктДанных.Вставить( ТабЧасть.Ключ, ТабРегистра);
		
	КонецЦикла;
	
	Возврат СтруктДанных;
	
КонецФункции 

// Процедура загружает таблицы документа
//
Процедура ЗагрузитьВТаблицуЗначений(ТаблицаИсточник, ТаблицаПриемник) Экспорт
	
	// Заполним значения в совпадающих колонках.
	Для каждого СтрокаТаблицыИсточника Из ТаблицаИсточник Цикл
		
		СтрокаТаблицыПриемника = ТаблицаПриемник.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицыПриемника, СтрокаТаблицыИсточника);
		
	КонецЦикла;
	
КонецПроцедуры 

// Заполнение данных
//
Процедура УстановитьЗначениеВТаблицыДокумента(СтруктТаблицДокумента, ИмяПоля, УстанавливаемоеЗначение, СтрТабЧасти = "") Экспорт
	
	СтруктТабЧасти = ?( ПустаяСтрока(СтрТабЧасти), СтруктТаблицДокумента, Новый Структура(СтрТабЧасти));
	Для Каждого ТабЧасть Из СтруктТабЧасти Цикл
		
		Если СтруктТаблицДокумента[ТабЧасть.Ключ].Количество() > 0 Тогда
			СтруктТаблицДокумента[ТабЧасть.Ключ].ЗаполнитьЗначения( УстанавливаемоеЗначение, ИмяПоля);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры 

// Заполнение данных
//
Процедура ЗаписатьТаблицыДокументаВРегистр(Движение, ВидДвижения, СтруктТаблицДокумента, ДатаДвижения) Экспорт
	
	Движение.мПериод = ДатаДвижения;
	Для Каждого ТабЧасть Из СтруктТаблицДокумента Цикл
		
		Если ТабЧасть.Значение.Количество() = 0 Тогда
			Продолжить; // Пропускаем пустые табличные части
		КонецЕсли;
		
		Движение.мТаблицаДвижений = ТабЧасть.Значение;
		Если ВидДвижения = Неопределено Тогда // Регистр сведений
			ОбщегоНазначенияРед12.ВыполнитьДвижениеПоРегистру(Движение);
		Иначе // Регистр накопления
			ОбщегоНазначенияРед12.ВыполнитьДвижениеПоРегистру(Движение, ВидДвижения);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры 

#КонецОбласти

#КонецЕсли