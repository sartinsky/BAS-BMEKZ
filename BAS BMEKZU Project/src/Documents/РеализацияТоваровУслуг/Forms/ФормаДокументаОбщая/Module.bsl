
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	ОтправкаПочтовыхСообщений.ПриСозданииНаСервере(ЭтотОбъект);
	
	РеализацияТоваровУслугФормы.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
	// Активизировать первую непустую табличную часть
	АктивизироватьТабличнуюЧасть = ОбщегоНазначенияБПВызовСервера.ПолучитьПервуюНепустуюВидимуюТабличнуюЧасть(
		ЭтаФорма, СписокВидимыхТабличныхЧастей());
	ОбщегоНазначенияБПВызовСервера.АктивизироватьЭлементФормы(ЭтаФорма, АктивизироватьТабличнуюЧасть);
	
	УстановитьЭлементыФормыПоВидуОперации();
	
	ПолноеНаименованиеКонтрагента = ?(ЗначениеЗаполнено(Объект.Контрагент), Объект.Контрагент.НаименованиеПолное, "");

	// Авторасчет НДС
	ПерерасчетПроизведен = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)

	Если ИсточникВыбора.ИмяФормы = "Обработка.ПодборНоменклатуры.Форма.Форма" Тогда
		ОбработкаВыбораПодборВставкаИзБуфераНаСервере(ВыбранноеЗначение, ИсточникВыбора.ИмяТаблицы);
	
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Документ.ПоступлениеТоваровУслуг.Форма.ФормаВыбора" Тогда
		ОбработкаЗаполненияТабличнойЧастиНаСервере(ВыбранноеЗначение, ИсточникВыбора.ИмяТаблицы);
	
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Документ.СчетНаОплатуПокупателю.Форма.ФормаВыбора" Тогда
		ОбработкаЗаполненияПоСчетуТабличнойЧастиНаСервере(ВыбранноеЗначение, ИсточникВыбора.ИмяТаблицы);
	
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)

	Если ИмяСобытия = "ОбработанаТабличнаяЧастьТовары" И ТипЗнч(Параметр) = Тип("Структура") 
		И Параметр.Свойство("ИдентификаторВызывающейФормы")
		И Параметр.ИдентификаторВызывающейФормы = УникальныйИдентификатор Тогда
		ОбработкаОповещенияОбработкиТабличнойЧастиТоварыНаСервере(Параметр);

	ИначеЕсли ИмяСобытия = "ДанныеСкопированыВБуферОбмена" Тогда
		
		УстановитьДоступностьКомандыВставки(ЭтотОбъект, Истина);

	Иначе
		ОбщегоНазначенияБПКлиент.ОбработкаОповещенияФормыДокумента(ЭтаФорма, Объект.Ссылка, ИмяСобытия, Параметр, Источник);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом

	РеализацияТоваровУслугФормы.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);

КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	РеализацияТоваровУслугФормыКлиент.ПередЗаписью(ЭтаФорма, Отказ, ПараметрыЗаписи);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	ЗаполнитьДобавленныеКолонкиТаблиц();
	ОбновитьИтоги(ЭтотОбъект);

	РеализацияТоваровУслугФормы.УстановитьЗаголовокФормы(ЭтаФорма);
	
	// Авторасчет НДС
	ПерерасчетПроизведен = Истина;
	
	УстановитьСостояниеДокумента();

КонецПроцедуры

#КонецОбласти  //ОбработчикиСобытийФормы

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	Если НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДатаДокумента) Тогда
		// Изменение времени не влияет на поведение документа.
		ТекущаяДатаДокумента = Объект.Дата;
		Возврат;
	КонецЕсли;

	// Общие проверки условий по датам.
	ТребуетсяВызовСервера = РеализацияТоваровУслугФормыКлиент.ТребуетсяВызовСервераПриИзмененииДатыДокумента(ЭтаФорма);
		
	// Если определили, что изменение даты может повлиять на какие-либо параметры, 
	// то передаем обработку на сервер.
	Если ТребуетсяВызовСервера Тогда
		ДатаПриИзмененииНаСервере();
	КонецЕсли;
	
	// Запомним новую дату документа.
	ТекущаяДатаДокумента = Объект.Дата;
	
	// Покажем оповещение о появлении механизма рабочей даты.
	Если НастройкиПредупреждений.РабочаяДатаИзДокумента 
		И НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ОбщегоНазначенияБПКлиент.ПоказатьПредупреждениеОбИзменениях("РабочаяДатаИзДокумента", , НастройкиПредупреждений);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)

	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		ОрганизацияПриИзмененииНаСервере();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СкладПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.Склад) Тогда
		СкладПриИзмененииНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении()

	Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
		КонтрагентПриИзмененииНаСервере();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДоговорКонтрагентаПриИзменении(Элемент)

	Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		ДоговорКонтрагентаПриИзмененииНаСервере();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СделкаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;

	ПараметрыОбъекта = Новый Структура;
	ПараметрыОбъекта.Вставить("Дата"                 , Объект.Дата);
	ПараметрыОбъекта.Вставить("ДоговорКонтрагента"   , Объект.ДоговорКонтрагента);
	ПараметрыОбъекта.Вставить("Контрагент"           , Объект.Контрагент);
	ПараметрыОбъекта.Вставить("СчетУчета"            , Объект.СчетУчетаРасчетовПоАвансам);
	ПараметрыОбъекта.Вставить("Организация"          , Объект.Организация);
	ПараметрыОбъекта.Вставить("ОстаткиОбороты"       , "Кт");
	ПараметрыОбъекта.Вставить("ТипыДокументов"       , "Метаданные.Документы.РеализацияТоваровУслуг.Реквизиты.Сделка.Тип");

	ПараметрыФормы = Новый Структура("ПараметрыОбъекта", ПараметрыОбъекта);
	ОткрытьФорму("Документ.ДокументРасчетовСКонтрагентом.ФормаВыбора", ПараметрыФормы, Элемент);
		
КонецПроцедуры

&НаКлиенте
Процедура ЦеныИВалютаНажатие(Элемент, СтандартнаяОбработка)
	
	РеализацияТоваровУслугФормыКлиент.ЦеныИВалютаНажатие(ЭтаФорма, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ГрузополучательПриИзменении(Элемент)
	
	ГрузополучательПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(
		Элемент.ТекстРедактирования,
		ЭтотОбъект,
		"Объект.Комментарий"
	);

КонецПроцедуры

&НаКлиенте
Процедура ПолучилНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	УправлениеКонтактнойИнформациейБП.ПредставительКонтрагентаНачалоВыбора(Объект.Контрагент, ДанныеВыбора, СтандартнаяОбработка);
		
КонецПроцедуры

&НаКлиенте
Процедура ЕстьАвансДо01042011ПриИзменении(Элемент)
	
	УправлениеФормой(ЭтаФорма);
	
	Если НЕ Объект.ЕстьАвансДо01042011 Тогда
		
		Объект.СуммаВДВРПоАвансуДо01042011 = 0;	
		Объект.НеОтноситьСебестоимостьЗапасовНаРасходыПоНУ = Ложь;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура НеОтноситьСебестоимостьЗапасовНаРасходыПоНУПриИзменении(Элемент)
	
	УправлениеФормой(ЭтаФорма);
	
	Если Объект.НеОтноситьСебестоимостьЗапасовНаРасходыПоНУ Тогда
		
		Объект.СуммаВДВРПоАвансуДо01042011 = 0;	
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПолучилПоДругомуДокументуПриИзменении(Элемент)
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ВидОперацииПриИзменении(Элемент) // ИНАГРО
	
	ВидОперацииПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ИНАГРО_РасхождениеКоличестваПриИзменении(Элемент) // ИНАГРО
		
	Для Каждого СтрокаТаблицы Из Объект.Товары Цикл
		
		Если НЕ Объект.ИНАГРО_РасхождениеКоличества Тогда
			СтрокаТаблицы.ИНАГРО_НовоеКоличество = 0;			
		КонецЕсли;     
		
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТаблицы, , , , Объект.ИНАГРО_РасхождениеКоличества); 
		
		Если СтрокаТаблицы.Свойство("СуммаНДС") Тогда
			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТаблицы, Объект.СуммаВключаетНДС);
		КонецЕсли;		
		
		Если СтрокаТаблицы.Свойство("Всего") Тогда
			СтрокаТаблицы.Всего = СтрокаТаблицы.Сумма + ?(Объект.СуммаВключаетНДС, 0, СтрокаТаблицы.СуммаНДС);
		КонецЕсли; 			
		
	КонецЦикла;  	
		
	УстановитьЗаголовкиКолонок();
	
	УправлениеФормой(ЭтаФорма); 
	
КонецПроцедуры

#КонецОбласти	 //ОбработчикиСобытийЭлементовШапкиФормы

#Область ОбработчикиСобытийЭлементовТаблицыФормыТовары

&НаКлиенте
Процедура ТоварыПриИзменении(Элемент)

	ОбновитьИтоги(ЭтаФорма);
	
	// Авторасчет НДС
	ПерерасчетПроизведен = Ложь;

КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока И НЕ Копирование Тогда
		Элемент.ТекущиеДанные.СтавкаНДС = УчетНДСКлиент.ПолучитьСтавкуНДСПоУмолчанию(ПлательщикНДС);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если НоваяСтрока И ОтменаРедактирования Тогда
		ОбновитьИтоги(ЭтаФорма);
		// Авторасчет НДС
		ПерерасчетПроизведен = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	// Получим общие параметры обработки для реквизитов документа
	ПараметрыОбработки = РеализацияТоваровУслугФормыКлиент.ПодготовитьПараметрыОбработкиТоварыНоменклатураПриИзменении(
		ЭтаФорма, ТекущиеДанные);

	// Дополнительные поля, требующиеся для заполнения добавленных колонок табличного поля текущей формы.
	ПараметрыОбработки.ДанныеСтрокиТаблицы.Вставить("Всего", ТекущиеДанные.Всего);
	
	ЗаполнитьПараметрыОбъектаДляЗаполненияДобавленныхКолонок(ЭтаФорма, ПараметрыОбработки.ДанныеОбъекта);
	
	ТоварыНоменклатураПриИзмененииНаСервере(
		ПараметрыОбработки.ДанныеСтрокиТаблицы, ПараметрыОбработки.ДанныеОбъекта);
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ПараметрыОбработки.ДанныеСтрокиТаблицы);

	РасчитатьСуммуДотации(); // ИНАГРО

КонецПроцедуры

&НаКлиенте
Процедура ТоварыЕдиницаИзмеренияПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	// Получим общие параметры обработки для реквизитов документа
	ПараметрыОбработки = РеализацияТоваровУслугФормыКлиент.ПодготовитьПараметрыОбработкиТоварыНоменклатураПриИзменении(
		ЭтаФорма, ТекущиеДанные);

	// Дополнительные поля, требующиеся для заполнения добавленных колонок табличного поля текущей формы.
	ПараметрыОбработки.ДанныеСтрокиТаблицы.Вставить("Всего", ТекущиеДанные.Всего);
	
	ЗаполнитьПараметрыОбъектаДляЗаполненияДобавленныхКолонок(ЭтаФорма, ПараметрыОбработки.ДанныеОбъекта);
	
	ТоварыЕдиницаИзмеренияПриИзмененииНаСервере(
		ПараметрыОбработки.ДанныеСтрокиТаблицы, ПараметрыОбработки.ДанныеОбъекта);
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ПараметрыОбработки.ДанныеСтрокиТаблицы);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКоличествоПриИзменении(Элемент)

	// ИНАГРО++
	ОбработкаТабличныхЧастейКлиентСервер.ПриИзмененииКоличествоЦена(ЭтаФорма, "Товары", , , , Объект.ИНАГРО_РасхождениеКоличества);
	
	РасчитатьСуммуДотации();
	// ИНАГРО--

КонецПроцедуры

&НаКлиенте
Процедура ТоварыЦенаПриИзменении(Элемент)

	// ИНАГРО++
	ОбработкаТабличныхЧастейКлиентСервер.ПриИзмененииКоличествоЦена(ЭтаФорма, "Товары", , , , Объект.ИНАГРО_РасхождениеКоличества);

	РасчитатьСуммуДотации();
	// ИНАГРО--

КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаБезСкидкиПриИзменении(Элемент)
	
	ОбработкаТабличныхЧастейКлиентСервер.ПриИзмененииСуммаБезСкидки(ЭтаФорма, "Товары");
	
	РасчитатьСуммуДотации(); // ИНАГРО

КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаСкидкиПриИзменении(Элемент)
	
	ОбработкаТабличныхЧастейКлиентСервер.ПриИзмененииСуммаСкидки(ЭтаФорма, "Товары");
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаСкидкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбработкаТабличныхЧастейКлиентСервер.СуммаСкидкиНачалоВыбора(ЭтаФорма, "Товары", Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаПриИзменении(Элемент)

	// ИНАГРО++
	ОбработкаТабличныхЧастейКлиентСервер.ПриИзмененииСумма(ЭтаФорма, "Товары", , , , Объект.ИНАГРО_РасхождениеКоличества);

	РасчитатьСуммуДотации();
	// ИНАГРО--
	 
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСтавкаНДСПриИзменении(Элемент)

	ОбработкаТабличныхЧастейКлиентСервер.ПриИзмененииСтавкаНДС(ЭтаФорма, "Товары");
	
	РасчитатьСуммуДотации(); // ИНАГРО
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаНДСПриИзменении(Элемент)

	ОбработкаТабличныхЧастейКлиентСервер.ПриИзмененииСуммаНДС(ЭтаФорма, "Товары");

КонецПроцедуры

&НаКлиенте
Процедура ТоварыДокументОприходованияПриИзменении(Элемент)

	РеализацияТоваровУслугФормыКлиент.ТоварыДокументОприходованияПриИзменении(ЭтаФорма, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыДокументОприходованияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	РеализацияТоваровУслугФормыКлиент.ТоварыДокументОприходованияНачалоВыбора(
		ЭтаФорма, Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыИНАГРО_НовоеКоличествоПриИзменении(Элемент) // ИНАГРО

	ОбработкаТабличныхЧастейКлиентСервер.ПриИзмененииКоличествоЦена(ЭтаФорма, "Товары", , , , Объект.ИНАГРО_РасхождениеКоличества);
	
	РасчитатьСуммуДотации();
	
КонецПроцедуры

#КонецОбласти	 //ОбработчикиСобытийЭлементовТаблицыФормыТовары

#Область ОбработчикиСобытийЭлементовТаблицыФормыВозвратнаяТара

&НаКлиенте
Процедура ВозвратнаяТараПриИзменении(Элемент)

	ОбновитьИтоги(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ВозвратнаяТараПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если НоваяСтрока И ОтменаРедактирования Тогда
		ОбновитьИтоги(ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВозвратнаяТараНоменклатураПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ВозвратнаяТара.ТекущиеДанные;
	
	ДанныеСтрокиТаблицы = Новый Структура("Номенклатура, Количество, Цена, Сумма, СчетУчетаБУ,
		|СхемаРеализации, НалоговоеНазначение, НалоговоеНазначениеДоходовИЗатрат");
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, ТекущиеДанные);
	
	ДанныеОбъекта = Новый Структура("Ссылка, Дата, ВидОперации, Организация,
		|Склад, ТипЦен, ВалютаДокумента, КурсВзаиморасчетов, КратностьВзаиморасчетов,
		|СуммаВключаетНДС, ДоговорКонтрагента,
		|ЭтоКомиссия, Реализация");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	ДанныеОбъекта.СуммаВключаетНДС = Истина;
	ДанныеОбъекта.ЭтоКомиссия      = ЭтоКомиссия;
	ДанныеОбъекта.Реализация       = Истина;
	
	ВозвратнаяТараНоменклатураПриИзмененииНаСервере(ДанныеСтрокиТаблицы, ДанныеОбъекта);
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтрокиТаблицы);
	
КонецПроцедуры

&НаКлиенте
Процедура ВозвратнаяТараКоличествоПриИзменении(Элемент)

	ОбработкаТабличныхЧастейКлиентСервер.ПриИзмененииКоличествоЦена(ЭтаФорма, "ВозвратнаяТара");

КонецПроцедуры

&НаКлиенте
Процедура ВозвратнаяТараЦенаПриИзменении(Элемент)

	ОбработкаТабличныхЧастейКлиентСервер.ПриИзмененииКоличествоЦена(ЭтаФорма, "ВозвратнаяТара");

КонецПроцедуры

&НаКлиенте
Процедура ВозвратнаяТараСуммаПриИзменении(Элемент)

	ОбработкаТабличныхЧастейКлиентСервер.ПриИзмененииСумма(ЭтаФорма, "ВозвратнаяТара");

КонецПроцедуры

#КонецОбласти	 //ОбработчикиСобытийЭлементовТаблицыФормыВозвратнаяТара

#Область ОбработчикиСобытийЭлементовТаблицыФормыУслуги

&НаКлиенте
Процедура УслугиПриИзменении(Элемент)

	ОбновитьИтоги(ЭтаФорма);
	
	// Авторасчет НДС
	ПерерасчетПроизведен = Ложь;

КонецПроцедуры

&НаКлиенте
Процедура УслугиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока И НЕ Копирование Тогда
		Элемент.ТекущиеДанные.СтавкаНДС = УчетНДСКлиент.ПолучитьСтавкуНДСПоУмолчанию(ПлательщикНДС);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если НоваяСтрока И ОтменаРедактирования Тогда
		ОбновитьИтоги(ЭтаФорма);
		// Авторасчет НДС
		ПерерасчетПроизведен = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиНоменклатураПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Услуги.ТекущиеДанные;
	
	// Получим общие параметры обработки для реквизитов документа
	ПараметрыОбработки = РеализацияТоваровУслугФормыКлиент.ПодготовитьПараметрыОбработкиУслугиНоменклатураПриИзменении(
		ЭтаФорма, ТекущиеДанные);

	// Дополнительные поля, требующиеся для заполнения добавленных колонок табличного поля текущей формы.
	ПараметрыОбработки.ДанныеСтрокиТаблицы.Вставить("Всего", ТекущиеДанные.Всего);
	
	ЗаполнитьПараметрыОбъектаДляЗаполненияДобавленныхКолонок(ЭтаФорма, ПараметрыОбработки.ДанныеОбъекта);
	
	УслугиНоменклатураПриИзмененииНаСервере(
		ПараметрыОбработки.ДанныеСтрокиТаблицы, ПараметрыОбработки.ДанныеОбъекта);
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ПараметрыОбработки.ДанныеСтрокиТаблицы);
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиКоличествоПриИзменении(Элемент)

	ОбработкаТабличныхЧастейКлиентСервер.ПриИзмененииКоличествоЦена(ЭтаФорма, "Услуги", 1);

КонецПроцедуры

&НаКлиенте
Процедура УслугиЦенаПриИзменении(Элемент)

	ОбработкаТабличныхЧастейКлиентСервер.ПриИзмененииКоличествоЦена(ЭтаФорма, "Услуги", 1);

КонецПроцедуры

&НаКлиенте
Процедура УслугиСуммаБезСкидкиПриИзменении(Элемент)
	
	ОбработкаТабличныхЧастейКлиентСервер.ПриИзмененииСуммаБезСкидки(ЭтаФорма, "Услуги", 1);
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиСуммаСкидкиПриИзменении(Элемент)
	
	ОбработкаТабличныхЧастейКлиентСервер.ПриИзмененииСуммаСкидки(ЭтаФорма, "Услуги");
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиСуммаСкидкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбработкаТабличныхЧастейКлиентСервер.СуммаСкидкиНачалоВыбора(ЭтаФорма, "Услуги", Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиСуммаПриИзменении(Элемент)

	ОбработкаТабличныхЧастейКлиентСервер.ПриИзмененииСумма(ЭтаФорма, "Услуги", 1);

КонецПроцедуры

&НаКлиенте
Процедура УслугиСтавкаНДСПриИзменении(Элемент)

	ОбработкаТабличныхЧастейКлиентСервер.ПриИзмененииСтавкаНДС(ЭтаФорма, "Услуги");

КонецПроцедуры

&НаКлиенте
Процедура УслугиСуммаНДСПриИзменении(Элемент)

	ОбработкаТабличныхЧастейКлиентСервер.ПриИзмененииСуммаНДС(ЭтаФорма, "Услуги");

КонецПроцедуры

#КонецОбласти	 //ОбработчикиСобытийЭлементовТаблицыФормыУслуги

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПровестиИЗакрыть(Команда)
	
	РеализацияТоваровУслугФормыКлиент.ПровестиИЗакрыть(ЭтаФорма, Команда);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзПоступления(Команда)

	РеализацияТоваровУслугФормыКлиент.ОткрытьФормуВыбораПоступленияТоваровУслуг(ЭтаФорма, "Товары", "Добавить");

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоПоступлению(Команда)

	РеализацияТоваровУслугФормыКлиент.ОткрытьФормуВыбораПоступленияТоваровУслуг(ЭтаФорма, "Товары", "Заполнить");

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзПоступленияТара(Команда)

	РеализацияТоваровУслугФормыКлиент.ОткрытьФормуВыбораПоступленияТоваровУслуг(ЭтаФорма, "ВозвратнаяТара", "Добавить");

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоПоступлениюТара(Команда)

	РеализацияТоваровУслугФормыКлиент.ОткрытьФормуВыбораПоступленияТоваровУслуг(ЭтаФорма, "ВозвратнаяТара", "Заполнить");

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзПоступленияУслуги(Команда)

	РеализацияТоваровУслугФормыКлиент.ОткрытьФормуВыбораПоступленияТоваровУслуг(ЭтаФорма, "Услуги", "Добавить");

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоПоступлениюУслуги(Команда)

	РеализацияТоваровУслугФормыКлиент.ОткрытьФормуВыбораПоступленияТоваровУслуг(ЭтаФорма, "Услуги", "Заполнить");

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоСчету(Команда)
	
	ЗаполнитьТабличнуюЧастьПоСчету("Товары");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоСчетуТара(Команда)
	
	ЗаполнитьТабличнуюЧастьПоСчету("ВозвратнаяТара");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоСчетуУслуги(Команда)
	
	ЗаполнитьТабличнуюЧастьПоСчету("Услуги");
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборТовары(Команда)

	РеализацияТоваровУслугФормыКлиент.ПодборНоменклатуры(ЭтаФорма, "Товары", Команда);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборУслуги(Команда)

	РеализацияТоваровУслугФормыКлиент.ПодборНоменклатуры(ЭтаФорма, "Услуги", Команда);

КонецПроцедуры

&НаКлиенте
Процедура ПодборВозвратнаяТара(Команда)

	РеализацияТоваровУслугФормыКлиент.ПодборНоменклатуры(ЭтаФорма, "ВозвратнаяТара", Команда);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьТовары(Команда)

	АдресХранилищаТовары = ПоместитьТоварыВоВременноеХранилищеНаСервере();

	РеализацияТоваровУслугФормыКлиент.ИзменитьТовары(ЭтаФорма, Команда, АдресХранилищаТовары);
	
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьСтроки(Команда)
	
	ИмяТаблицы = ПолучитьИмяТекущейТабличнойЧасти();
	Если ПустаяСтрока(ИмяТаблицы) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	КоличествоСтрок = Элементы[ИмяТаблицы].ВыделенныеСтроки.Количество();
	Если КоличествоСтрок = 0 Тогда
		
		Возврат;
		
	КонецЕсли;
	СкопироватьСтрокиНаСервере(ИмяТаблицы);
	ОбработкаТабличныхЧастейКлиент.ОповеститьОКопированииСтрокВБуферОбмена(ЭтотОбъект, КоличествоСтрок);
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьСтроки(Команда)
	
	ИмяТаблицы = ПолучитьИмяТекущейТабличнойЧасти();
	Если ПустаяСтрока(ИмяТаблицы) Тогда
		
		Возврат;
		
	КонецЕсли;
	КоличествоСтрок = ВставитьСтрокиНаСервере(ИмяТаблицы);
	ОбработкаТабличныхЧастейКлиент.ОповеститьОВставкеСтрокИзБуфераОбмена(ЭтотОбъект, КоличествоСтрок);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузкаПервичныхДокументовВЗвит1С(Команда)
	
	Если НЕ КонтрагентИспользуетЭДО(Объект.Контрагент)  Тогда
		ПоказатьПредупреждение(, НСтр("ru='В карточке контрагента не установлен признак ""Использовать FREDO ДокМен""!';uk= 'В картці контрагента не встановлена ознака ""Використовувати FREDO ДокМен""!'"));
		Возврат;
	КонецЕсли;
	
	Если Не РегламентированнаяОтчетностьКлиент.ПодключитьМенеджерЗвит1С(Истина) Тогда
		Возврат;
	КонецЕсли;

	Если Объект.Ссылка.Пустая() Или Модифицированность Тогда
			
			ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Данные еще не записаны."
					 "Выполнение действия ""%1"" возможно только после записи данных."
					 "Данные будут записаны.';uk='Дані ще не записані."
				 	 "Виконання дії ""%1"" можливо тільки після запису даних."
					 "Дані будуть записані.'"),
					 НСтр("ru='выгрузки';uk= 'вивантаження'"));
					 
			ОписаниеОповещения = Новый ОписаниеОповещения("ВыполнитьОткрытиеФормыВыгрузкиПервичныхДокументовВЭДО", ЭтаФорма);
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
			
	Иначе
		ВыполнитьОткрытиеФормыВыгрузкиПервичныхДокументовВЭДО(Неопределено, Неопределено);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти    //ОбработчикиКомандФормы

#Область СлужебныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Элементы = Форма.Элементы;
	Объект   = Форма.Объект;
	
	ЭтоОборудование    = Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРеализацияТоваров.Оборудование");
	ЭтоПродажаКомиссия = Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРеализацияТоваров.ПродажаКомиссия");
	ЭтоПереработка     = Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРеализацияТоваров.ИНАГРО_ВПереработку"); // ИНАГРО
	
	Если ЭтоОборудование Тогда
		Элементы.ГруппаТовары.Заголовок = НСтр("ru='Оборудование';uk='Устаткування'");
	Иначе
		Элементы.ГруппаТовары.Заголовок = НСтр("ru='Товары';uk='Товари'");
	КонецЕсли;
	
	Элементы.Сделка.Доступность = Форма.ВедениеВзаиморасчетовПоРасчетнымДокументам;
	
	Элементы.ГруппаУслуги.Видимость          = НЕ Форма.ЭтоКомиссия;	
	Элементы.ГруппаВозвратнаяТара.Видимость  = Не Форма.Внешнеэкономический;
	Элементы.ГруппаДотация.Видимость         = ЭтоПереработка И ИНАГРО_ОбщийВызовСервераПовтИсп.ЕстьБСПУ(); // ИНАГРО

	Элементы.СчетУчетаРасчетовПоАвансам.Доступность     = НЕ Форма.ЭтоКомиссия;
	Элементы.СчетУчетаРасчетовСКонтрагентом.Доступность = НЕ Форма.ЭтоКомиссия;
	Элементы.СчетУчетаРасчетовПоТареПоАвансам.Доступность = Не Форма.Внешнеэкономический;
	Элементы.СчетУчетаРасчетовПоТаре.Доступность          = Не Форма.Внешнеэкономический;
	Элементы.СчетУчетаНДС.Доступность                     = РеализацияТоваровУслугФормыКлиентСервер.ИспользуетсяСчетУчетаНДС(Форма.ПлательщикНДС, Форма.ЭтоКомиссия, Объект.Дата);
	Элементы.СчетУчетаНДСПодтвержденный.Доступность       = РеализацияТоваровУслугФормыКлиентСервер.ИспользуетсяСчетУчетаНДСПодтвержденный(Форма.ПлательщикНДС, Форма.ЭтоКомиссия, Объект.Дата, Форма.СложныйНалоговыйУчет);
	
	// Доступность взаимосвязанных полей
	Элементы.ДоговорКонтрагента.Доступность       = ЗначениеЗаполнено(Объект.Организация) И ЗначениеЗаполнено(Объект.Контрагент);
	КонтрагентДоставки = ?(ЗначениеЗаполнено(Объект.Грузополучатель), Объект.Грузополучатель, Объект.Контрагент);
	Элементы.АдресДоставки.Доступность            = ЗначениеЗаполнено(КонтрагентДоставки);
	

	Элементы.ЕстьАвансДо01042011.Видимость 			 = Форма.ПлательщикНалогаНаПрибыльДо2015;
	Элементы.ЕстьАвансДо01042011.Доступность 	   	 = НЕ Форма.ЭтоКомиссия;
	Элементы.СуммаВДВРПоАвансуДо01042011.Видимость 	 = Форма.ПлательщикНалогаНаПрибыльДо2015;
	Элементы.СуммаВДВРПоАвансуДо01042011.Доступность = Объект.ЕстьАвансДо01042011 И НЕ Объект.НеОтноситьСебестоимостьЗапасовНаРасходыПоНУ И НЕ Форма.ЭтоКомиссия;
	Элементы.НеОтноситьСебестоимостьЗапасовНаРасходыПоНУ.Видимость	 = Форма.ПлательщикНалогаНаПрибыльДо2015;
	Элементы.НеОтноситьСебестоимостьЗапасовНаРасходыПоНУ.Доступность = Объект.ЕстьАвансДо01042011 И НЕ Форма.ЭтоКомиссия;
	
	Элементы.ИтогиВсегоНДС.Видимость                = Форма.ПлательщикНДС;
	Элементы.ВалютаДокументаИтогиВсегоНДС.Видимость = Форма.ПлательщикНДС;

	Элементы.ГруппаРеквизитыДоверенностиЛевая.Видимость = НЕ Объект.ПолучилПоДругомуДокументу; 
	Элементы.ДокументПодтверждающийПолномочия.Видимость = Объект.ПолучилПоДругомуДокументу; 

	// ИНАГРО++
	Элементы.ИНАГРО_РасхождениеКоличества.Видимость = ИНАГРО_ОбщийВызовСервераПовтИсп.ЕстьБСПУ();
	Элементы.ТоварыИНАГРО_НовоеКоличество.Видимость = Объект.ИНАГРО_РасхождениеКоличества;
	// ИНАГРО--
	
	ОбновитьИтоги(Форма);
	РеализацияТоваровУслугФормыКлиентСервер.СформироватьНадписьЦеныИВалюта(Форма);
			
КонецПроцедуры

&НаСервере
Процедура УстановитьЭлементыФормыПоВидуОперации()
	
	// При создании формы сразу устанавливаем свойства элементов,
	// которые зависят от вида операции и которые в дальнейшем менять не требуется.

	ЭтоОборудование    = Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРеализацияТоваров.Оборудование");
	
	Если ЭтоОборудование Тогда
		Элементы.ГруппаТовары.Заголовок = НСтр("ru='Оборудование';uk='Устаткування'");
	Иначе
		Элементы.ГруппаТовары.Заголовок = НСтр("ru='Товары';uk='Товари'");
	КонецЕсли;
	
	// ИНАГРО++
	МассивВидовОпераций = Документы.РеализацияТоваровУслуг.ПолучитьФиксированныйМассивВидовОпераций();
	
	ПараметрМассивВидовОпераций = Новый ПараметрВыбора("Отбор.Ссылка", МассивВидовОпераций);
	
	НовыйМассив = Новый Массив();
	НовыйМассив.Добавить(ПараметрМассивВидовОпераций);
	НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);
	
	Элементы.ВидОперации.ПараметрыВыбора = НовыеПараметры;
	// ИНАГРО--
	
КонецПроцедуры

// Серверная обработка изменения реквизитов:

&НаСервере
Процедура ДатаПриИзмененииНаСервере()
	
	РеализацияТоваровУслугФормы.ДатаПриИзменении(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()

	РеализацияТоваровУслугФормы.ОрганизацияПриИзменении(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура КонтрагентПриИзмененииНаСервере()
	
	РеализацияТоваровУслугФормы.КонтрагентПриИзменении(ЭтаФорма);
	
	ПолноеНаименованиеКонтрагента = ?(ЗначениеЗаполнено(Объект.Контрагент), 
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Контрагент, "НаименованиеПолное"), "");

КонецПроцедуры

&НаСервере
Процедура ДоговорКонтрагентаПриИзмененииНаСервере()
	
	РеализацияТоваровУслугФормы.ДоговорКонтрагентаПриИзменении(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура СкладПриИзмененииНаСервере()
	
	РеализацияТоваровУслугФормы.СкладПриИзменении(ЭтаФорма);	
	
КонецПроцедуры

&НаСервере
Процедура ГрузополучательПриИзмененииНаСервере()
	
	ГрузополучательОбработатьИзменение();
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ГрузополучательОбработатьИзменение()
	
	РеализацияТоваровУслугФормы.ЗаполнитьСписокАдресовДоставки(ЭтаФорма, Объект.Контрагент, Объект.Грузополучатель);
	Если Элементы.АдресДоставки.СписокВыбора.Количество() > 0 Тогда
		Объект.АдресДоставки = Элементы.АдресДоставки.СписокВыбора[0].Значение;
	Иначе
		Объект.АдресДоставки = "";
	КонецЕсли;
	
КонецПроцедуры

// Пересчеты реквизитов в строках табличных частей

&НаСервереБезКонтекста
Процедура ТоварыНоменклатураПриИзмененииНаСервере(СтрокаТабличнойЧасти, Знач ДанныеОбъекта)

	РеализацияТоваровУслугФормы.ТоварыНоменклатураПриИзмененииНаСервере(СтрокаТабличнойЧасти, ДанныеОбъекта);
	
	ЗаполнитьДобавленныеКолонкиСтрокиТаблицыТовары(СтрокаТабличнойЧасти, ДанныеОбъекта);

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ВозвратнаяТараНоменклатураПриИзмененииНаСервере(СтрокаТабличнойЧасти, Знач ДанныеОбъекта)

	СведенияОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОНоменклатуре(
		СтрокаТабличнойЧасти.Номенклатура, ДанныеОбъекта);
	Если СведенияОНоменклатуре = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаТабличнойЧасти.Цена = УчетНДСКлиентСервер.ПересчитатьЦенуПриИзмененииФлаговНалогов(
		СведенияОНоменклатуре.Цена, СведенияОНоменклатуре.ЦенаВключаетНДС, ДанныеОбъекта.СуммаВключаетНДС,
		УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СведенияОНоменклатуре.СтавкаНДС));
	
	Документы.РеализацияТоваровУслуг.ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(
		ДанныеОбъекта, СтрокаТабличнойЧасти, "ВозвратнаяТара", СведенияОНоменклатуре);
	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);

КонецПроцедуры

&НаСервереБезКонтекста
Процедура УслугиНоменклатураПриИзмененииНаСервере(СтрокаТабличнойЧасти, Знач ДанныеОбъекта)

	РеализацияТоваровУслугФормы.УслугиНоменклатураПриИзмененииНаСервере(СтрокаТабличнойЧасти, ДанныеОбъекта);
	
	ЗаполнитьДобавленныеКолонкиСтрокиТаблицыУслуги(СтрокаТабличнойЧасти, ДанныеОбъекта);

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ТоварыЕдиницаИзмеренияПриИзмененииНаСервере(СтрокаТабличнойЧасти, Знач ДанныеОбъекта)

	РеализацияТоваровУслугФормы.ТоварыЕдиницаИзмеренияПриИзмененииНаСервере(СтрокаТабличнойЧасти, ДанныеОбъекта);
	
	ЗаполнитьДобавленныеКолонкиСтрокиТаблицыТовары(СтрокаТабличнойЧасти, ДанныеОбъекта);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьИтоги(Форма)
	
	Объект = Форма.Объект;
	
	Форма.ИтогиВсего    = Объект.Товары.Итог("Всего") + Объект.Услуги.Итог("Всего");
	Форма.ИтогиВсегоНДС = Объект.Товары.Итог("СуммаНДС") + Объект.Услуги.Итог("СуммаНДС");

	Форма.ЕстьСтрокиВозвратнойТары   = Объект.ВозвратнаяТара.Количество() > 0;
	Форма.ОтметкаНезаполненногоСклад = Форма.ЕстьСтрокиВозвратнойТары ИЛИ Объект.Товары.Количество() > 0;
	
КонецПроцедуры

// Прочий функционал:

&НаСервере
Функция СписокВидимыхТабличныхЧастей()

	СписокТЧ = Новый СписокЗначений;
	
	СписокТЧ.Добавить("Товары", "Товары");
	Если ПолучитьФункциональнуюОпцию("ИспользоватьВозвратнуюТару") И Не Внешнеэкономический Тогда
		СписокТЧ.Добавить("ВозвратнаяТара", "ВозвратнаяТара");
	КонецЕсли;
	Если НЕ ЭтоКомиссия Тогда
		СписокТЧ.Добавить("Услуги", "Услуги");
	КонецЕсли;
	
	Возврат СписокТЧ;

КонецФункции

&НаСервереБезКонтекста
Процедура ЗаполнитьДобавленныеКолонкиСтрокиТаблицыТовары(СтрокаТаблицы, Знач ПараметрыОбъекта)

	СтрокаТаблицы.Всего = СтрокаТаблицы.Сумма + ?(ПараметрыОбъекта.СуммаВключаетНДС, 0, СтрокаТаблицы.СуммаНДС);

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьДобавленныеКолонкиСтрокиТаблицыУслуги(СтрокаТаблицы, Знач ПараметрыОбъекта)

	СтрокаТаблицы.Всего = СтрокаТаблицы.Сумма + ?(ПараметрыОбъекта.СуммаВключаетНДС, 0, СтрокаТаблицы.СуммаНДС);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьПараметрыОбъектаДляЗаполненияДобавленныхКолонок(Знач Форма, ПараметрыОбъекта)

	Объект = Форма.Объект;
	
	Если ТипЗнч(ПараметрыОбъекта) <> Тип("Структура") Тогда
		ПараметрыОбъекта = Новый Структура;
	КонецЕсли;
	
	ПараметрыОбъекта.Вставить("СуммаВключаетНДС", 	Объект.СуммаВключаетНДС);
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииЦеныИВалютыНаСервере(Знач ВалютаДоИзменения, КурсДоИзменения, КратностьДоИзменения, ПерезаполнитьЦены = Ложь, ПересчитатьЦены = Ложь, ПересчитатьНДС = Ложь)

	РеализацияТоваровУслугФормы.ЗаполнитьРассчитатьСуммы(
		ЭтаФорма,
		ВалютаДоИзменения,
		КурсДоИзменения,
		КратностьДоИзменения,
		ПерезаполнитьЦены,
		ПересчитатьЦены,
		ПересчитатьНДС);

	УстановитьЗаголовкиКолонок();

	ОбновитьИтоги(ЭтаФорма);
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаСервере
Процедура ОбработкаВыбораПодборВставкаИзБуфераНаСервере(ВыбранноеЗначение, ИмяТаблицы)

	РеализацияТоваровУслугФормы.ОбработкаВыбораПодборВставкаИзБуфера(ЭтаФорма, ВыбранноеЗначение, ИмяТаблицы);
	
	ЗаполнитьДобавленныеКолонкиТаблиц(ИмяТаблицы);
	
	ОбновитьИтоги(ЭтаФорма);	
	
	// Авторасчет НДС 
	ПерерасчетПроизведен = Ложь;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьСчетаУчетаУслуги(СтрокаТабличнойЧасти, Знач ДанныеОбъекта)

	СведенияОНоменклатуре	= БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОНоменклатуре(
		СтрокаТабличнойЧасти.Номенклатура, ДанныеОбъекта);
	Если СведенияОНоменклатуре = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Документы.РеализацияТоваровУслуг.ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(
		ДанныеОбъекта, СтрокаТабличнойЧасти, "Услуги", СведенияОНоменклатуре);

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТабличнуюЧастьПоСчету(ТабличнаяЧасть)
	
	Если Объект[ТабличнаяЧасть].Количество() > 0 Тогда
		ТекстВопроса = НСтр("ru='Перед заполнением табличная часть будет очищена. Заполнить?';uk='Перед заповненням таблична частина буде очищена. Заповнити?'");
		Оповещение = Новый ОписаниеОповещения("ВопросПередЗаполнениемТабличнойЧастиЗавершение", ЭтотОбъект, ТабличнаяЧасть);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Да);
	Иначе
		ОткрытьФормуВыбораСчетаНаОплату(ТабличнаяЧасть);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораСчетаНаОплату(ТабличнаяЧасть)

	СтруктураОтбора	= Новый Структура;
	СтруктураОтбора.Вставить("Организация",	Объект.Организация);
	СтруктураОтбора.Вставить("Проведен",	Истина);
	
	СтруктураПараметров	= Новый Структура;
	СтруктураПараметров.Вставить("Отбор",              СтруктураОтбора);
	СтруктураПараметров.Вставить("РежимВыбора",        Истина);
	СтруктураПараметров.Вставить("МножественныйВыбор", Ложь);
	СтруктураПараметров.Вставить("ИмяТаблицы",         ТабличнаяЧасть);
	
	ОткрытьФорму("Документ.СчетНаОплатуПокупателю.ФормаВыбора", СтруктураПараметров, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросПередЗаполнениемТабличнойЧастиЗавершение(Результат, ТабличнаяЧасть) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Объект[ТабличнаяЧасть].Очистить();
		ОткрытьФормуВыбораСчетаНаОплату(ТабличнаяЧасть);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаЗаполненияТабличнойЧастиНаСервере(ВыбранноеЗначение, ТабличнаяЧасть)

	Если Объект.ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.Оборудование
		И ТабличнаяЧасть = "Товары" Тогда
		ТабличнаяЧастьИсточника = "Оборудование";
	Иначе
		ТабличнаяЧастьИсточника = ТабличнаяЧасть;
	КонецЕсли;
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	ДокументОбъект.ЗаполнитьПоПоступлению(ТабличнаяЧасть, "Добавить", ВыбранноеЗначение);
	ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");

	ЗаполнитьДобавленныеКолонкиТаблиц();
	
	ОбновитьИтоги(ЭтаФорма);
	
	// Авторасчет НДС 
	ПерерасчетПроизведен = Ложь;

КонецПроцедуры

&НаСервере
Процедура ОбработкаЗаполненияПоСчетуТабличнойЧастиНаСервере(ВыбранноеЗначение, ТабличнаяЧасть)

	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	ДокументОбъект.ЗаполнитьПоСчету(ТабличнаяЧасть, ВыбранноеЗначение);
	ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");

	ЗаполнитьДобавленныеКолонкиТаблиц();
	
	ОбновитьИтоги(ЭтаФорма);
	
	// Авторасчет НДС 
	ПерерасчетПроизведен = Ложь;

КонецПроцедуры

&НаСервере
Функция ПоместитьТоварыВоВременноеХранилищеНаСервере()
	
	Возврат ПоместитьВоВременноеХранилище(Объект.Товары.Выгрузить(), УникальныйИдентификатор);
	
КонецФункции

&НаСервере
Процедура ОбработкаОповещенияОбработкиТабличнойЧастиТоварыНаСервере(Параметры)
	
	РеализацияТоваровУслугФормы.ОбработкаОповещенияОбработкиТабличнойЧастиТовары(ЭтаФорма, Параметры);
	
	ЗаполнитьДобавленныеКолонкиТаблиц();
	
	ОбновитьИтоги(ЭтаФорма);
	
	// Авторасчет НДС 
	ПерерасчетПроизведен = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьОткрытиеФормыВыгрузкиПервичныхДокументовВЭДО(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.ОК Тогда
		Записать();
		Если Объект.Ссылка.Пустая() Или Модифицированность Тогда
			Возврат; // запись не удалась, сообщения о причинах выводит платформа
		КонецЕсли;
	ИначеЕсли РезультатВопроса = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;
	
	глМенеджерЗвит1С.ВыгрузитьПервичныйДокумент(Объект.Ссылка, ЭтаФорма);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция КонтрагентИспользуетЭДО(Контрагент)
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Контрагент, "ИспользоватьЭДО1СЗвит");
КонецФункции

#Область КопированиеВставкаСтрокЧерезБуферОбмена

&НаСервере
Процедура СкопироватьСтрокиНаСервере(ИмяТаблицы)
	
	ОбщегоНазначения.СкопироватьСтрокиВБуферОбмена(Объект[ИмяТаблицы], 
		Элементы[ИмяТаблицы].ВыделенныеСтроки, Объект.Ссылка.Метаданные().Имя);

КонецПроцедуры

&НаСервере
Функция ВставитьСтрокиНаСервере(ИмяТаблицы)
	
	ПараметрыВставки = ОбработкаТабличныхЧастей.ПолучитьПараметрыВставкиДанныхИзБуфераОбмена(Объект.Ссылка, ИмяТаблицы);
	ОпределитьСписокСвойствДляВставкиИзБуфера(ПараметрыВставки);
	ОбработкаВыбораПодборВставкаИзБуфераНаСервере(ПараметрыВставки, ПараметрыВставки.ИмяТаблицы);
	
	Возврат ПараметрыВставки.КоличествоДобавленныхСтрок;
	
КонецФункции

&НаКлиенте
Функция ПолучитьИмяТекущейТабличнойЧасти()
	
	ИмяТекущейСтраницы = Элементы.ГруппаСтраницы.ТекущаяСтраница.Имя;
	ИмяТаблицы = "";
	Если ИмяТекущейСтраницы = "ГруппаТовары" Тогда
		
		ИмяТаблицы = "Товары";
		
	ИначеЕсли ИмяТекущейСтраницы = "ГруппаУслуги" Тогда
		
		ИмяТаблицы = "Услуги";
		
	КонецЕсли;
	
	Возврат ИмяТаблицы;
	
КонецФункции

&НаСервере
Процедура ОпределитьСписокСвойствДляВставкиИзБуфера(ПараметрыВставки)
	
	СписокСвойств = Новый Массив;
	
	Если ПараметрыВставки.ИмяТаблицы = "Товары" Тогда
		
		СписокСвойств.Добавить("Номенклатура");
		СписокСвойств.Добавить("ЕдиницаИзмерения");
		СписокСвойств.Добавить("Коэффициент");
		СписокСвойств.Добавить("Количество");
		СписокСвойств.Добавить("Цена");
		СписокСвойств.Добавить("СуммаСкидки");
		Если ПараметрыВставки.ПоказыватьВДокументахСчетаУчета Тогда
			СписокСвойств.Добавить("СчетУчетаБУ");
		КонецЕсли;
	
	ИначеЕсли ПараметрыВставки.ИмяТаблицы = "Услуги" Тогда
	
		СписокСвойств.Добавить("Номенклатура");
		СписокСвойств.Добавить("Содержание");
		СписокСвойств.Добавить("Количество");
		СписокСвойств.Добавить("Цена");
		СписокСвойств.Добавить("СуммаСкидки");
		
	КонецЕсли;
	
	ПараметрыВставки.СписокСвойств = ОбработкаТабличныхЧастей.ПолучитьСписокСвойствИмеющихсяВТаблицеДанных(
		ПараметрыВставки.Данные, СписокСвойств);
	
КонецПроцедуры
	
&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьКомандыВставки(Форма, Доступность)

	Доступность = Не Форма.ТолькоПросмотр И Доступность;
	Элементы = Форма.Элементы;
	Элементы.ТоварыВставитьСтроки.Доступность						 = Доступность;
	Элементы.ТоварыКонтекстноеМенюВставитьСтроки.Доступность		 = Доступность;
	Элементы.УслугиВставитьСтроки.Доступность						 = Доступность;
	Элементы.УслугиКонтекстноеМенюВставитьСтроки.Доступность		 = Доступность;
	
КонецПроцедуры

#КонецОбласти

&НаСервере
Процедура ВидОперацииПриИзмененииНаСервере() // ИНАГРО
	
	РеализацияТоваровУслугФормы.УстановитьЗаголовокФормы(ЭтаФорма);
	
	УстановитьЗаголовкиКолонок();	
	
	УправлениеФормойНаСервере();	

КонецПроцедуры

#КонецОбласти    //СлужебныеПроцедурыИФункции

#Область СлужебныеПроцедурыИФункцииБСП

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти    //СлужебныеПроцедурыИФункцииБСП

#Область СлужебныйПрограммныйИнтерфейс

&НаСервере
Процедура ЗаполнитьДобавленныеКолонкиТаблиц(ИмяТаблицы = "") Экспорт

	ПараметрыОбъекта = Неопределено;
	ЗаполнитьПараметрыОбъектаДляЗаполненияДобавленныхКолонок(ЭтаФорма, ПараметрыОбъекта);

	Если ПустаяСтрока(ИмяТаблицы) ИЛИ ИмяТаблицы = "Товары" Тогда
		Для каждого СтрокаТаблицы Из Объект.Товары Цикл
			ЗаполнитьДобавленныеКолонкиСтрокиТаблицыТовары(СтрокаТаблицы, ПараметрыОбъекта);
		КонецЦикла;
	КонецЕсли;
	
	Если ПустаяСтрока(ИмяТаблицы) ИЛИ ИмяТаблицы = "Услуги" Тогда
		Для каждого СтрокаТаблицы Из Объект.Услуги Цикл
			ЗаполнитьДобавленныеКолонкиСтрокиТаблицыУслуги(СтрокаТаблицы, ПараметрыОбъекта);
		КонецЦикла;
	КонецЕсли;
	

КонецПроцедуры

&НаСервере
Процедура ОбновитьИтогиНаСервере() Экспорт

	ОбновитьИтоги(ЭтаФорма);

КонецПроцедуры

&НаСервере
Процедура ПодготовитьФормуНаСервере() Экспорт
	
	ТекущаяДатаДокумента          = Объект.Дата;
	
	УстановитьФункциональныеОпцииФормы();
	
	УстановитьЗаголовкиИДоступностьСубконто(ЭтаФорма, Объект.ИНАГРО_СчетДоходовПоДотации, "Дохода"); // ИНАГРО
	
	УстановитьСостояниеДокумента();
	
	
	ВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	
	ДоговорУказан = ЗначениеЗаполнено(Объект.ДоговорКонтрагента);
	РеквизитыДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		Объект.ДоговорКонтрагента, "ВидДоговора, ВалютаВзаиморасчетов, ВедениеВзаиморасчетов, СложныйНалоговыйУчет");
	
	ЭтоКомиссия = ДоговорУказан И РеквизитыДоговора.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером;
	
	Если ДоговорУказан Тогда
		ВалютаВзаиморасчетов = РеквизитыДоговора.ВалютаВзаиморасчетов;
	КонецЕсли;
	
	ВедениеВзаиморасчетовПоРасчетнымДокументам = ДоговорУказан И РеквизитыДоговора.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоРасчетнымДокументам;
	Внешнеэкономический = ДоговорУказан И РеквизитыДоговора.ВалютаВзаиморасчетов <> ВалютаРегламентированногоУчета;
	СложныйНалоговыйУчет = ДоговорУказан И РеквизитыДоговора.СложныйНалоговыйУчет;
	
	МетаданныеТоварыРеквизиты = Метаданные.Документы.РеализацияТоваровУслуг.ТабличныеЧасти.Товары.Реквизиты;
	Элементы.ТоварыСебестоимость.Заголовок   = МетаданныеТоварыРеквизиты.Себестоимость.Представление() + " (" + Строка(ВалютаРегламентированногоУчета) + ")";
	Элементы.ТоварыСебестоимостьНУ.Заголовок = МетаданныеТоварыРеквизиты.СебестоимостьНУ.Представление() + " (" + Строка(ВалютаРегламентированногоУчета) + ")";
	
	// Нестандартное использование заголовка, вместо использования дополнительны декораций
	Элементы.СуммаВДВРПоАвансуДо01042011.Заголовок = " " + Строка(ВалютаРегламентированногоУчета); 
	
	РеализацияТоваровУслугФормы.УстановитьПараметрыВыбора(ЭтаФорма);
	
	ЗаполнитьДобавленныеКолонкиТаблиц();
	
	РеализацияТоваровУслугФормы.ЗаполнитьСписокАдресовДоставки(ЭтаФорма, Объект.Контрагент, Объект.Грузополучатель);
	
	
	УправлениеФормой(ЭтаФорма);
	
	РеализацияТоваровУслугФормы.УстановитьЗаголовокФормы(ЭтаФорма);
	
	УстановитьЗаголовкиКолонок();
	
	// Проверка буфера обмена на наличие скопированных строк
	УстановитьДоступностьКомандыВставки(ЭтотОбъект, Не ОбщегоНазначения.ПустойБуферОбмена());
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСостояниеДокумента()
	
	СостояниеДокумента = ОбщегоНазначенияБП.СостояниеДокумента(Объект);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьМассивВидовДоговоров() Экспорт

	СписокВидовДоговоров = Новый Массив;
	СписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПокупателем);
	СписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером);
	СписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.Бартерный);
	СписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.ИНАГРО_АрендаЗемли);  // ИНАГРО
	СписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.ИНАГРО_АрендаИмущества); // ИНАГРО

	Возврат СписокВидовДоговоров;

КонецФункции

&НаКлиенте
Процедура ПриИзмененииЦеныИВалюты(Знач ВалютаДоИзменения, КурсДоИзменения, КратностьДоИзменения, ПерезаполнитьЦены = Ложь, ПересчитатьЦены = Ложь, ПересчитатьНДС = Ложь) Экспорт

	Если ПерезаполнитьЦены ИЛИ ПересчитатьЦены ИЛИ ПересчитатьНДС Тогда
		ПриИзмененииЦеныИВалютыНаСервере(ВалютаДоИзменения, КурсДоИзменения, КратностьДоИзменения, ПерезаполнитьЦены, ПересчитатьЦены, ПересчитатьНДС);
	Иначе
		ОбновитьИтоги(ЭтаФорма);
		УправлениеФормой(ЭтаФорма);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура УправлениеФормойНаСервере() Экспорт
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗаголовкиКолонок() Экспорт
	
	ЗаголовокЦена = ?(ПлательщикНДС, ?(Объект.СуммаВключаетНДС, НСтр("ru='Цена с НДС';uk='Ціна з ПДВ'"), НСтр("ru='Цена без НДС';uk='Ціна без ПДВ'")), НСтр("ru='Цена';uk='Ціна'"));
	ЗаголовокСумма = ?(ПлательщикНДС, ?(Объект.СуммаВключаетНДС, НСтр("ru='Сумма с НДС';uk='Сума з ПДВ'"), НСтр("ru='Сумма без НДС';uk='Сума без ПДВ'")), НСтр("ru='Сумма';uk='Сума'"));
	
	Элементы.ТоварыЦена.Заголовок = ЗаголовокЦена;
	Элементы.ТоварыСумма.Заголовок = ЗаголовокСумма;
	
	Элементы.УслугиЦена.Заголовок = ЗаголовокЦена;
	Элементы.УслугиСумма.Заголовок = ЗаголовокСумма;
	

КонецПроцедуры

&НаСервере
Процедура УстановитьФункциональныеОпцииФормы() Экспорт

	ОбщегоНазначенияБПКлиентСервер.УстановитьПараметрыФункциональныхОпцийФормыДокумента(ЭтаФорма);
	
	ПлательщикНДС			= УчетнаяПолитика.ПлательщикНДС(Объект.Организация, Объект.Дата);
	ПлательщикНалогаНаПрибыльДо2015 = УчетнаяПолитика.ПлательщикНалогаНаПрибыльДо2015(Объект.Организация, Объект.Дата);
	СпособОценкиМПЗ			= УчетнаяПолитика.СпособОценкиМПЗ(Объект.Организация, Объект.Дата);
	
КонецПроцедуры 

// ИНАГРО++
#Область ОбработчикиСобытийЭлементовСтраницыДотация

&НаКлиенте
Процедура ПроцентДотацииПриИзменении(Элемент)
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРеализацияТоваров.ИНАГРО_ВПереработку") Тогда 
		
		Если НЕ Объект.ИНАГРО_ПроцентДотации = 0 Тогда 	
			
			ДанныеОбъекта = Новый Структура;
			ДанныеОбъекта.Вставить("ПроцентДотации", Объект.ИНАГРО_ПроцентДотации);
			ДанныеОбъекта.Вставить("СуммаДотации",   Объект.ИНАГРО_СуммаДотации);
			ДанныеОбъекта.Вставить("Ссылка",         Объект.Ссылка);					
			
			Если ИНАГРО_ОбщийВызовСервераПовтИсп.ЕстьБСПУ() Тогда
				МодульИНАГРО_БиологическиеАктивы = ОбщегоНазначенияКлиент.ОбщийМодуль("ИНАГРО_БиологическиеАктивы");			
				МодульИНАГРО_БиологическиеАктивы.ИНАГРО_РассчитатьСуммуДотации(ДанныеОбъекта);
			КонецЕсли;
		
			Объект.ИНАГРО_ПроцентДотации = ДанныеОбъекта.ПроцентДотации;
			Объект.ИНАГРО_СуммаДотации   = ДанныеОбъекта.СуммаДотации;
						
			Для Каждого СтрокаТабличнойЧасти Из Объект.Товары Цикл 
				Если НЕ СтрокаТабличнойЧасти.СтавкаНДС = ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС0") Тогда 
					СтрокаТабличнойЧасти.СтавкаНДС = ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС0");
					ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, Объект.СуммаВключаетНДС);
				КонецЕсли;
			КонецЦикла;  
			
			Объект.ИНАГРО_ЕстьДотация  = Истина;
			
		Иначе 
			
			Объект.ИНАГРО_ЕстьДотация  = Ложь;
			Объект.ИНАГРО_СуммаДотации = 0;
			
		КонецЕсли;
		
	Иначе
		
		Объект.ИНАГРО_ЕстьДотация    = Ложь;
		Объект.ИНАГРО_ПроцентДотации = 0;
		Объект.ИНАГРО_СуммаДотации   = 0;
		
		ТекстСообщения = НСтр("ru='Дотация возможна только при реализации переработчику!';uk='Дотація можлива тільки при реалізації переробнику!'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;  		
	
КонецПроцедуры

&НаКлиенте
Процедура СуммаДотацииПриИзменении(Элемент)
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРеализацияТоваров.ИНАГРО_ВПереработку") Тогда 

		Если НЕ Объект.ИНАГРО_СуммаДотации = 0 Тогда 
			
			ДанныеОбъекта = Новый Структура("ПроцентДотации, СуммаДотации, СуммаДокумента");
			ДанныеОбъекта.Вставить("ПроцентДотации", Объект.ИНАГРО_ПроцентДотации);
			ДанныеОбъекта.Вставить("СуммаДотации",   Объект.ИНАГРО_СуммаДотации);
			ДанныеОбъекта.Вставить("СуммаДокумента", Объект.СуммаДокумента);	
			
			Если ИНАГРО_ОбщийВызовСервераПовтИсп.ЕстьБСПУ() Тогда
				МодульИНАГРО_БиологическиеАктивы = ОбщегоНазначенияКлиент.ОбщийМодуль("ИНАГРО_БиологическиеАктивы");
				МодульИНАГРО_БиологическиеАктивы.ИНАГРО_РассчитатьПроцентДотации(ДанныеОбъекта);			
			КонецЕсли;
		
			Объект.ИНАГРО_ПроцентДотации = ДанныеОбъекта.ПроцентДотации;
			Объект.ИНАГРО_СуммаДотации   = ДанныеОбъекта.СуммаДотации;
			Объект.СуммаДокумента        = ДанныеОбъекта.СуммаДокумента;
			
			Для Каждого СтрокаТабличнойЧасти Из Объект.Товары Цикл 
				Если НЕ СтрокаТабличнойЧасти.СтавкаНДС = ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС0") Тогда 
					СтрокаТабличнойЧасти.СтавкаНДС = ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС0");
					ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, Объект.СуммаВключаетНДС);
				КонецЕсли;
			КонецЦикла; 
			
			Объект.ИНАГРО_ЕстьДотация 	  = Истина;
			
		Иначе 
			
			Объект.ИНАГРО_ЕстьДотация    = Ложь;
			Объект.ИНАГРО_ПроцентДотации = 0;
			
		КонецЕсли;	
		
	Иначе 
		
		Объект.ИНАГРО_ЕстьДотация    = Ложь;
		Объект.ИНАГРО_ПроцентДотации = 0;
		Объект.ИНАГРО_СуммаДотации   = 0;
		
		ТекстСообщения = НСтр("ru='Дотация возможна только при реализации переработчику!';uk='Дотація можлива тільки при реалізації переробнику!'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли; 	
		
КонецПроцедуры

&НаКлиенте
Процедура СчетДоходовПоДотацииПриИзменении(Элемент)
	
	УстановитьЗаголовкиИДоступностьСубконто(ЭтаФорма, Объект.ИНАГРО_СчетДоходовПоДотации, "Дохода");
	
	ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3", "ИНАГРО_СубконтоДохода1", "ИНАГРО_СубконтоДохода2", "ИНАГРО_СубконтоДохода3");
	ПоляОбъекта.Вставить("Организация", Объект.Организация);
	БухгалтерскийУчетКлиентСервер.ПриИзмененииСчета(Объект.ИНАГРО_СчетДоходовПоДотации, Объект, ПоляОбъекта);
	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "Дохода", "ИНАГРО_СчетДоходовПоДотации"); 	
	
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура СчетДоходовПоДотацииОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = БухгалтерскийУчетКлиент.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение);

КонецПроцедуры

&НаКлиенте
Процедура СубконтоПриИзменении(Элемент)

	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "Дохода", "ИНАГРО_СчетДоходовПоДотации");
	
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура СубконтоНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	СписокПараметров = СписокПараметровВыбораСубконто(ЭтаФорма, Объект, "ИНАГРО_СубконтоДохода%Индекс%", "ИНАГРО_СчетДоходовПоДотации");
	ОбщегоНазначенияБПКлиент.НачалоВыбораЗначенияСубконто(ЭтаФорма, Элемент, СтандартнаяОбработка, СписокПараметров);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьЗаголовкиИДоступностьСубконто(Форма, Счет, Постфикс = "")

	ПоляФормы = Новый Структура("Субконто1, Субконто2, Субконто3",
		"ИНАГРО_Субконто" + Постфикс + "1",
		"ИНАГРО_Субконто" + Постфикс + "2",
		"ИНАГРО_Субконто" + Постфикс + "3"); 		
		
	ЗаголовкиПолей = Новый Структура("Субконто1, Субконто2, Субконто3",
		"ИНАГРО_ЗаголовокСубконто" + Постфикс + "1",
		"ИНАГРО_ЗаголовокСубконто" + Постфикс + "2",
		"ИНАГРО_ЗаголовокСубконто" + Постфикс + "3"); 	
		
	БухгалтерскийУчетКлиентСервер.ПриВыбореСчета(Счет, Форма, ПоляФормы, ЗаголовкиПолей);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ИзменитьПараметрыВыбораПолейСубконто(Форма, Суффикс, ИмяСчета)

	ПараметрыДокумента = СписокПараметровВыбораСубконто(Форма, Форма.Объект,
		"ИНАГРО_Субконто" + Суффикс + "%Индекс%", ИмяСчета);
	
	БухгалтерскийУчетКлиентСервер.ИзменитьПараметрыВыбораПолейСубконто(
		Форма, 
		Форма.Объект, 
		"ИНАГРО_Субконто" + Суффикс + "%Индекс%", 
		"ИНАГРО_Субконто" + Суффикс + "%Индекс%", 
		ПараметрыДокумента);

КонецПроцедуры

&НаКлиенте
Процедура РасчитатьСуммуДотации()
	
	ДанныеОбъекта = Новый Структура("ПроцентДотации, СуммаДотации, Ссылка");
	ДанныеОбъекта.Вставить("ПроцентДотации", Объект.ИНАГРО_ПроцентДотации);
	ДанныеОбъекта.Вставить("СуммаДотации",   Объект.ИНАГРО_СуммаДотации);
	ДанныеОбъекта.Вставить("Ссылка",         Объект.Ссылка);				

	Если Объект.ИНАГРО_ЕстьДотация И НЕ Объект.ИНАГРО_ПроцентДотации = 0 Тогда
		Если ИНАГРО_ОбщийВызовСервераПовтИсп.ЕстьБСПУ() Тогда
			МодульИНАГРО_БиологическиеАктивы = ОбщегоНазначенияКлиент.ОбщийМодуль("ИНАГРО_БиологическиеАктивы");
			МодульИНАГРО_БиологическиеАктивы.ИНАГРО_РассчитатьСуммуДотации(ДанныеОбъекта);	
		КонецЕсли;
	КонецЕсли;
	
	Объект.ИНАГРО_ПроцентДотации = ДанныеОбъекта.ПроцентДотации;
	Объект.ИНАГРО_СуммаДотации   = ДанныеОбъекта.СуммаДотации;  

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция СписокПараметровВыбораСубконто(Форма, ПараметрыОбъекта, ШаблонИмяПоляОбъекта, ИмяСчета)

	СписокПараметров = Новый Структура;
	Для Индекс = 1 По 3 Цикл
		ИмяПоля = СтрЗаменить(ШаблонИмяПоляОбъекта, "%Индекс%", Индекс);
		Если ТипЗнч(ПараметрыОбъекта[ИмяПоля]) = Тип("СправочникСсылка.Контрагенты") Тогда
			СписокПараметров.Вставить("Контрагент", ПараметрыОбъекта[ИмяПоля]);
		ИначеЕсли ТипЗнч(ПараметрыОбъекта[ИмяПоля]) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
			СписокПараметров.Вставить("ДоговорКонтрагента", ПараметрыОбъекта[ИмяПоля]);
		ИначеЕсли ТипЗнч(ПараметрыОбъекта[ИмяПоля]) = Тип("СправочникСсылка.Номенклатура") Тогда
			СписокПараметров.Вставить("Номенклатура", ПараметрыОбъекта[ИмяПоля]);
		ИначеЕсли ТипЗнч(ПараметрыОбъекта[ИмяПоля]) = Тип("СправочникСсылка.Склады") Тогда
			СписокПараметров.Вставить("Склад", ПараметрыОбъекта[ИмяПоля]);
		КонецЕсли;
	КонецЦикла;
	СписокПараметров.Вставить("Организация", Форма.Объект.Организация);
	СписокПараметров.Вставить("СчетУчета"  , Форма.Объект[ИмяСчета]);
	
	Возврат СписокПараметров;

КонецФункции

#КонецОбласти
// ИНАГРО--

#КонецОбласти    //СлужебныйПрограммныйИнтерфейс
