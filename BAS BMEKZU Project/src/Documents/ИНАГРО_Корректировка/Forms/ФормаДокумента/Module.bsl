#Область ОбработчикиСобытийФормы 

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды 
	
	Если Параметры.Ключ.Пустая() Тогда
		ПодготовитьФормуНаСервере();
	КонецЕсли;
	
	// Уведомим о появлении функционала рабочей даты
	НастройкиПредупреждений = ОбщегоНазначенияБП.НастройкиПредупрежденийОбИзменениях("РабочаяДатаИзДокумента");
	
	// Показываем, если это новый документ и сама рабочая дата еще не установлена.
	НастройкиПредупреждений.РабочаяДатаИзДокумента = НастройкиПредупреждений.РабочаяДатаИзДокумента
		И Параметры.Ключ.Пустая()
		И НЕ ЗначениеЗаполнено(БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("РабочаяДата")); 	
		
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)

	ОбщегоНазначенияБПКлиент.ОбработкаОповещенияФормыДокумента(ЭтаФорма, Объект.Ссылка, ИмяСобытия, Параметр, Источник);

КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	ПодготовитьФормуНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	УстановитьСостояниеДокумента();

КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)

	Если НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДатаДокумента) Тогда
		// Изменение времени не влияет на поведение документа.
		ТекущаяДатаДокумента = Объект.Дата;
		Возврат;
	КонецЕсли;	
	
	// Общие проверки условий по датам.
	ТребуетсяВызовСервера = ИНАГРО_ЭлеваторКлиент.ТребуетсяВызовСервераПриИзмененииДатыДокумента(Объект.Дата, ТекущаяДатаДокумента);

	// Если определили, что изменение даты может повлиять на какие-либо параметры, 
	// то передаем обработку на сервер.
	Если ТребуетсяВызовСервера Тогда
		ДатаПриИзмененииНаСервере();
	КонецЕсли;

	// Запомним новую дату документа.
	ТекущаяДатаДокумента = Объект.Дата;	
		
КонецПроцедуры

&НаСервере
Процедура ДатаПриИзмененииНаСервере()

	УстановитьФункциональныеОпцииФормы();	

КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		ОрганизацияПриИзмененииНаСервере();
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()
	
	УстановитьФункциональныеОпцииФормы();	

КонецПроцедуры

&НаКлиенте
Процедура ВладелецПриИзменении(Элемент)
	
	ПараметрыОтбораДоговора = Новый Структура("ВидХранения, Урожай", Объект.ВидХранения, Объект.Урожай);
	
	ИНАГРО_ЭлеваторЗаполнениеДокументов.ПриИзмененииЗначенияКонтрагента(Объект.Дата, Объект.Организация, Объект.Владелец, Объект.ДоговорКонтрагента, ПараметрыОтбораДоговора);

	Объект.Владелец1           = Объект.Владелец;
	Объект.ДоговорКонтрагента1 = Объект.ДоговорКонтрагента;
	
КонецПроцедуры

&НаКлиенте
Процедура НоменклатураПриИзменении(Элемент)
	
	Объект.НоменклатураНовая = Объект.Номенклатура;
	
	ПараметрыДляРасчетаЗачетногоВеса = ПолучитьПараметрыДляРасчетаЗачетногоВеса();
	
	Объект.ЗачетныйВес = ИНАГРО_Элеватор.ЗачетныйВесПриПроведении(ПараметрыДляРасчетаЗачетногоВеса);
		
КонецПроцедуры

&НаКлиенте
Процедура СкладПриИзменении(Элемент)
	
	Объект.Склад1 = Объект.Склад;

КонецПроцедуры

&НаКлиенте
Процедура ВидХраненияПриИзменении(Элемент)
	
	ПараметрыОтбораДоговора = Новый Структура("ВидХранения, Урожай", Объект.ВидХранения, Объект.Урожай);
	
	ИНАГРО_ЭлеваторЗаполнениеДокументов.ПриИзмененииЗначенияКонтрагента(Объект.Дата, Объект.Организация, Объект.Владелец, Объект.ДоговорКонтрагента, ПараметрыОтбораДоговора);

	Объект.ВидХранения1 = Объект.ВидХранения;
	
КонецПроцедуры

&НаКлиенте
Процедура УрожайПриИзменении(Элемент)
	
	ПараметрыОтбораДоговора = Новый Структура("ВидХранения, Урожай", Объект.ВидХранения, Объект.Урожай);
	
	ИНАГРО_ЭлеваторЗаполнениеДокументов.ПриИзмененииЗначенияКонтрагента(Объект.Дата, Объект.Организация, Объект.Владелец, Объект.ДоговорКонтрагента, ПараметрыОтбораДоговора);

	Объект.Урожай1 = Объект.Урожай;

КонецПроцедуры

&НаКлиенте
Процедура ВидДвиженияПриИзменении(Элемент)
	
	УстановитьНадписьДекорацияВидДвижения(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ВлажностьПриИзменении(Элемент)
	
	Объект.ВесПоВлажности = Объект.Вес * Объект.Влажность / 100;
	
	ПараметрыДляРасчетаЗачетногоВеса = ПолучитьПараметрыДляРасчетаЗачетногоВеса();
	
	Объект.ЗачетныйВес = ИНАГРО_Элеватор.ЗачетныйВесПриПроведении(ПараметрыДляРасчетаЗачетногоВеса);
																  
КонецПроцедуры

&НаКлиенте
Процедура СорнаяПримесьПриИзменении(Элемент)
	
	Объект.ВесПоСорнойПримеси = Объект.Вес * Объект.СорнаяПримесь / 100;
	
	ПараметрыДляРасчетаЗачетногоВеса = ПолучитьПараметрыДляРасчетаЗачетногоВеса();
	
	Объект.ЗачетныйВес = ИНАГРО_Элеватор.ЗачетныйВесПриПроведении(ПараметрыДляРасчетаЗачетногоВеса);

КонецПроцедуры

&НаКлиенте
Процедура ВидФасовкиПриИзменении(Элемент)
	
	ДанныеОбъекта = Новый Структура("Вес, ВидФасовки, Количество");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);	
	
    ВидФасовкиПриИзмененииНаСервере(ДанныеОбъекта);	
	
	Объект.Вес = ДанныеОбъекта.Вес;	

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ВидФасовкиПриИзмененииНаСервере(ДанныеОбъекта)
	
	ДанныеОбъекта.Вес = ДанныеОбъекта.ВидФасовки.Вес * ДанныеОбъекта.Количество;

КонецПроцедуры

&НаКлиенте
Процедура ВесПриИзменении(Элемент)
	
	Объект.ВесПоВлажности     = Объект.Вес * Объект.Влажность / 100;
	Объект.ВесПоСорнойПримеси = Объект.Вес * Объект.СорнаяПримесь / 100;
	
	ПараметрыДляРасчетаЗачетногоВеса = ПолучитьПараметрыДляРасчетаЗачетногоВеса();
	
	Объект.ЗачетныйВес        = ИНАГРО_Элеватор.ЗачетныйВесПриПроведении(ПараметрыДляРасчетаЗачетногоВеса);
	
КонецПроцедуры

&НаКлиенте
Процедура Владелец1ПриИзменении(Элемент)
	
	ПараметрыОтбораДоговора = Новый Структура("ВидХранения, Урожай", Объект.ВидХранения1, Объект.Урожай);
													
	ИНАГРО_ЭлеваторЗаполнениеДокументов.ПриИзмененииЗначенияКонтрагента(Объект.Дата, Объект.Организация, Объект.Владелец1, Объект.ДоговорКонтрагента1, ПараметрыОтбораДоговора);
	
КонецПроцедуры

&НаКлиенте
Процедура ОписаниеДвиженияФормы36НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(
		Элемент.ТекстРедактирования,
		ЭтотОбъект,
		"Объект.ОписаниеДвиженияФормы36",
		НСтр("ru='Описание движения формы 36';uk='Опис руху форми 36'"));

КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(
		Элемент.ТекстРедактирования,
		ЭтотОбъект,
		"Объект.Комментарий");

КонецПроцедуры

#КонецОбласти 

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ПодготовитьФормуНаСервере()
	
	ТекущаяДатаДокумента = Объект.Дата;		 		
	
	УстановитьФункциональныеОпцииФормы();

	УстановитьСостояниеДокумента();
	
	УстановитьНадписьДекорацияВидДвижения(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьФункциональныеОпцииФормы()

	ОбщегоНазначенияБПКлиентСервер.УстановитьПараметрыФункциональныхОпцийФормыДокумента(ЭтаФорма);

КонецПроцедуры 

&НаСервере
Процедура УстановитьСостояниеДокумента()
	
	СостояниеДокумента = ОбщегоНазначенияБП.СостояниеДокумента(Объект);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьНадписьДекорацияВидДвижения(Форма)
		
	Элементы = Форма.Элементы;
	Объект   = Форма.Объект;	
	
	Если Объект.ВидДвижения = ПредопределенноеЗначение("Перечисление.ИНАГРО_ВидыДвижений.Приход") Тогда
		Элементы.ДекорацияВидДвижения.Заголовок = НСтр("ru='Расход';uk='Витрата'");
	ИначеЕсли Объект.ВидДвижения = ПредопределенноеЗначение("Перечисление.ИНАГРО_ВидыДвижений.Расход") Тогда
		Элементы.ДекорацияВидДвижения.Заголовок = НСтр("ru='Приход';uk='Прихід'");
	Иначе
		Элементы.ДекорацияВидДвижения.Заголовок = НСтр("ru='Укажите основной вид движения!';uk='Вкажіть основний вид руху!'");
	КонецЕсли;
	          
КонецПроцедуры

&НаКлиенте
Функция ПолучитьПараметрыДляРасчетаЗачетногоВеса()

	ПараметрыДляРасчетаЗачетногоВеса = Новый Структура(
		"Ссылка, Дата, Организация,
		|Владелец, ДоговорКонтрагента, Номенклатура,
		|Склад, Влажность, СорнаяПримесь,
		|ФизическийВес, ЗачетныйВес,     
		|");
	ЗаполнитьЗначенияСвойств(ПараметрыДляРасчетаЗачетногоВеса, Объект);
	ПараметрыДляРасчетаЗачетногоВеса.Вставить("ФизическийВес", Объект.Вес);

	Возврат ПараметрыДляРасчетаЗачетногоВеса;

КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункцииБСП

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти