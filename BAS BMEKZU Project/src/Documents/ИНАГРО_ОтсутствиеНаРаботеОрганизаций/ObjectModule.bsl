#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда	

#Область ОбработчикиСобытий

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)

	ТипДанныхЗаполнения = ТипЗнч(ДанныеЗаполнения);
	Если ДанныеЗаполнения <> Неопределено И ТипДанныхЗаполнения <> Тип("Структура") 
		И Метаданные().ВводитсяНаОсновании.Содержит(ДанныеЗаполнения.Метаданные()) Тогда
		ЗаполнитьПоДокументуОснованию(ДанныеЗаполнения);
	КонецЕсли;
	ЗаполнениеДокументов.Заполнить(ЭтотОбъект, ДанныеЗаполнения);
    	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ИНАГРО_ПроведениеРасчетов.СформироватьКраткийСоставСотрудников(ЭтотОбъект, "РаботникиОрганизации");
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, Режим)	
	
	// Заголовок для сообщений об ошибках проведения.
	ПроведениеСервер.ПодготовитьНаборыЗаписейКПроведению(ЭтотОбъект);
	Заголовок = ОбщегоНазначенияБПВызовСервера.ПредставлениеДокументаПриПроведении(Ссылка);
		
	// получим реквизиты табличной части
	РезультатЗапросаПоРаботники = СформироватьЗапросПоРаботникиОрганизации();
	ВыборкаПоРаботникиОрганизации = РезультатЗапросаПоРаботники.Выбрать();
	
	Пока ВыборкаПоРаботникиОрганизации.Следующий() Цикл 
		
		// проверим очередную строку табличной части
		ПроверитьЗаполнениеСтрокиРаботникаОрганизации(ВыборкаПоРаботникиОрганизации, Отказ, Заголовок);
		
		Если НЕ Отказ Тогда
			
			// Заполним записи в наборах записей регистров
			ДобавитьСтрокуВДвиженияПоРегистрамСведений(ВыборкаПоРаботникиОрганизации);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКОтменеПроведения(ЭтотОбъект);
	Движения.Записать();
	
КонецПроцедуры

#КонецОбласти

#Область Проведение

// Формирует запрос по таблице "РаботникиОрганизации" документа
//
// Параметры: 
//  Режим        - режим проведения.
//
// Возвращаемое значение:
//  Результат запроса.
//
Функция СформироватьЗапросПоРаботникиОрганизации()
	
	Запрос = Новый Запрос;
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка", Ссылка);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТЧРаботникиОрганизации.НомерСтроки КАК НомерСтроки,
	|	ТЧРаботникиОрганизации.Сотрудник КАК Сотрудник,
	|	ТЧРаботникиОрганизации.Сотрудник.Наименование КАК СотрудникНаименование,
	|	ТЧРаботникиОрганизации.ДатаНачалаОтсутствия КАК ДатаНачалаОтсутствия,
	|	ТЧРаботникиОрганизации.Состояние КАК Состояние
	|ИЗ
	|	Документ.ИНАГРО_ОтсутствиеНаРаботеОрганизаций.РаботникиОрганизации КАК ТЧРаботникиОрганизации
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ ПЕРВЫЕ 1
	|			Строки.НомерСтроки КАК НомерСтроки,
	|			Строки.Сотрудник КАК Сотрудник,
	|			Строки.ДатаНачалаОтсутствия КАК ДатаНачалаОтсутствия
	|		ИЗ
	|			Документ.ИНАГРО_ОтсутствиеНаРаботеОрганизаций.РаботникиОрганизации КАК Строки
	|		ГДЕ
	|			Строки.Ссылка = &ДокументСсылка) КАК ДругиеСтроки
	|		ПО (ДругиеСтроки.Сотрудник = ТЧРаботникиОрганизации.Сотрудник)
	|			И (ДругиеСтроки.НомерСтроки < ТЧРаботникиОрганизации.НомерСтроки)
	|			И (ДругиеСтроки.ДатаНачалаОтсутствия = ТЧРаботникиОрганизации.ДатаНачалаОтсутствия)
	|ГДЕ
	|	ТЧРаботникиОрганизации.Ссылка = &ДокументСсылка";
	
	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос.Выполнить();
	
КонецФункции // СформироватьЗапросПоРаботникиОрганизации()

// Проверяет правильность заполнения реквизитов в строке ТЧ "РаботникиОрганизации" документа.
// Если какой-то из реквизитов, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса по строке ТЧ документа,
// все проверяемые реквизиты должны быть включены в выборку.
//
// Параметры: 
//  ВыборкаПоСтрокамДокумента	- спозиционированная на определенной строке выборка 
//  							  из результата запроса по работникам. 
//  Отказ        - флаг отказа в проведении.
//	Заголовок				- Заголовок для сообщений об ошибках проведения.
//
Процедура ПроверитьЗаполнениеСтрокиРаботникаОрганизации(ВыборкаПоСтрокамДокумента, Отказ, Заголовок)
	
	СтрокаНачалаСообщенияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='В строке номер ""%1"" табл. части ""Работники"": ';uk='У рядку номер ""%1"" табл. частини ""Працівники"": '"), СокрЛП(ВыборкаПоСтрокамДокумента.НомерСтроки));
	
	Уволен = Ложь;
	//УжеРаботает = РегистрыСведений.ИНАГРО_РаботникиОрганизаций.СрезПоследних(ВыборкаПоСтрокамДокумента.ДатаНачалаОтсутствия-1, Новый Структура("Сотрудник, Организация",ВыборкаПоСтрокамДокумента.Сотрудник,Организация));
	УжеРаботает = РегистрыСведений.ИНАГРО_РаботникиОрганизаций.СрезПоследних(ВыборкаПоСтрокамДокумента.ДатаНачалаОтсутствия, Новый Структура("Сотрудник, Организация",ВыборкаПоСтрокамДокумента.Сотрудник,Организация));
	Для каждого Место Из УжеРаботает Цикл
		Если Место.ЗанимаемыхСтавок = 0 Тогда
			Уволен = Истина;
		КонецЕсли;
	КонецЦикла;
	Если УжеРаботает.Количество()=0 ИЛИ Уволен Тогда
		ТекстСообщения = НСтр("ru='работник не принят на работу в организацию!';uk='працівник не прийнятий на роботу в організацію!'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,ЭтотОбъект,,,Отказ);
	КонецЕсли;
	
	События = РегистрыСведений.ИНАГРО_СостояниеРаботниковОрганизаций.СрезПоследних(ВыборкаПоСтрокамДокумента.ДатаНачалаОтсутствия, Новый Структура("Сотрудник,Организация",ВыборкаПоСтрокамДокумента.Сотрудник,Организация));
	Если События.Количество()>0 Тогда
		Если События[0].Период = ВыборкаПоСтрокамДокумента.ДатаНачалаОтсутствия И Не События[0].Регистратор = Ссылка Тогда
			ТекстСообщения = НСтр("ru='в кадровом учете событие противоречит документу ';uk='в кадровому обліку подія суперечить документу '") + События[0].Регистратор+"!";
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,ЭтотОбъект,,,Отказ);
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаполнениеСтрокиРаботникаОрганизации()

// По строке выборки результата запроса по документу формируем движения по регистрам.
//
// Параметры: 
//  ВыборкаПоШапкеДокумента                - выборка из результата запроса по шапке документа,
//  СтруктураПроведенияПоРегистрамСведений - структура, содержащая имена регистров 
//                                           сведений по которым надо проводить документ,
//  СтруктураПараметров                    - структура параметров проведения.
//
// Возвращаемое значение:
//  Нет.
//
Процедура ДобавитьСтрокуВДвиженияПоРегистрамСведений(ВыборкаПоРаботникиОрганизации, СтруктураПараметров = "")
	
	Движения.ИНАГРО_СостояниеРаботниковОрганизаций.Записывать = Истина;
	Движение = Движения.ИНАГРО_СостояниеРаботниковОрганизаций.Добавить();
	
	// Свойства
	Движение.Период                     = ВыборкаПоРаботникиОрганизации.ДатаНачалаОтсутствия;
	
	// Измерения
	Движение.Сотрудник                  = ВыборкаПоРаботникиОрганизации.Сотрудник;
	Движение.Организация				= Организация;
	
	// Ресурсы
	Движение.Состояние                  = ВыборкаПоРаботникиОрганизации.Состояние;
	
КонецПроцедуры // ДобавитьСтрокуВДвиженияПоРегистрамСведений

#КонецОбласти

#Область СлужебныеПроцедурыИФункции 

Процедура ЗаполнитьПоДокументуОснованию(Основание)
	
	ДокументОснование = Основание;
		
	Если    ТипЗнч(Основание) = Тип("ДокументСсылка.ИНАГРО_НачислениеПоБольничномуЛисту")
		ИЛИ ТипЗнч(Основание) = Тип("ДокументСсылка.ИНАГРО_НачислениеОтпускаРаботникамОрганизаций") Тогда
		
		// Заполним реквизиты из стандартного набора по документу основанию.
		ЗаполнениеДокументов.ЗаполнитьПоОснованию(ЭтотОбъект, Основание);
		
		Если Основание.Проведен Тогда
			
			// Заполнение табличной части. 
			Для Каждого ТекСтрока Из Основание.Начисления Цикл
				
				Если  ЗначениеЗаполнено(ТекСтрока.ДатаОкончания)
					И НЕ ТекСтрока.ПроизошедшееСобытие
					И (ТекСтрока.Состояние <> Перечисления.ИНАГРО_СостоянияРаботникаОрганизации.НеИзменять) Тогда
					
					НоваяСтрока = РаботникиОрганизации.Добавить();
					НоваяСтрока.Сотрудник	 = ТекСтрока.Сотрудник;
					НоваяСтрока.ДатаНачалаОтсутствия = ТекСтрока.ДатаОкончания + 86400;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;	
	
КонецПроцедуры 

#КонецОбласти 

#КонецЕсли