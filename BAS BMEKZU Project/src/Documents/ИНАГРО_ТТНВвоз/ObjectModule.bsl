#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда  

#Область ОбработчикиСобытий

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	ТипДанныхЗаполнения = ТипЗнч(ДанныеЗаполнения);	
	
	ИНАГРО_ЭлеваторЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект);

	ЗаполнениеДокументов.Заполнить(ЭтотОбъект, ДанныеЗаполнения); 
	
	Если  ТипДанныхЗаполнения = Тип("Структура")
		И ДанныеЗаполнения.Свойство("ВидОперации") Тогда
		ВидОперации = ДанныеЗаполнения.ВидОперации;
	КонецЕсли;
	
	ВидЖурнала    = Перечисления.ИНАГРО_ВидыЖурналов.ЖурналВесовой;		
	
	ИНАГРО_ЭлеваторЗаполнениеДокументов.ЗаполнитьТипНомерЖурналаВесовой(ЭтотОбъект);	
	
	ВремяПрибытия = ТекущаяДата();
	ВремяВыбытия  = ТекущаяДата();	
	
	Получатель    = ИНАГРО_Элеватор.ПолучитьДополнительныйРеквизитОрганизации(Организация, "Контрагент", Дата);
	Весовщик      = Пользователи.ТекущийПользователь();
		
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	МассивНепроверяемыхРеквизитов = Новый Массив; 	
	
	Если ВидОперации = Перечисления.ИНАГРО_ВидыОперацийТТНВвоз.ВвозФасованного Тогда
		
		МассивНепроверяемыхРеквизитов.Добавить("Номенклатура");
		МассивНепроверяемыхРеквизитов.Добавить("Урожай");
		МассивНепроверяемыхРеквизитов.Добавить("Силос");	
		МассивНепроверяемыхРеквизитов.Добавить("НомерПробы");				
		
	Иначе
		
		ВключитьКонтрольНомераПробы = ИНАГРО_Элеватор.ПолучитьПараметрУчетаЭлеватора(Дата, "ВключитьКонтрольНомераПробы", Ложь);		
		Если НЕ ВключитьКонтрольНомераПробы Тогда 		
			МассивНепроверяемыхРеквизитов.Добавить("НомерПробы");			
		КонецЕсли;	
		
		УчитыватьСилосПриФормированииРеестраТТННаВвоз = ИНАГРО_Элеватор.ПолучитьПараметрУчетаЭлеватора(Дата, "УчитыватьСилосПриФормированииРеестраТТННаВвоз", Ложь); 		
		Если НЕ УчитыватьСилосПриФормированииРеестраТТННаВвоз Тогда 		
			МассивНепроверяемыхРеквизитов.Добавить("Силос");			
		КонецЕсли;	
				
	КонецЕсли;
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);	

КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если ЭтоНовый() Тогда		
		
		ВремяНачалаДня = ИНАГРО_Элеватор.ПолучитьПараметрУчетаЭлеватора(Дата, "ВремяНачалаДня", 0);
				
		Дата = Дата + 60 * 60 * ВремяНачалаДня; 

	КонецЕсли;  
	
	Если ВидОперации <> Перечисления.ИНАГРО_ВидыОперацийТТНВвоз.ВвозФасованного Тогда
		
		СписокНоменклатуры.Очистить();
		
		НоваяСтрока = СписокНоменклатуры.Добавить();
		НоваяСтрока.Номенклатура = Номенклатура;
		НоваяСтрока.Урожай       = Урожай;
		//НоваяСтрока.ВидФасовки   = ВидФасовки;
		//НоваяСтрока.Количество   = Количество;
		НоваяСтрока.Вес          = Вес;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТипЖурнала) Тогда
		
		Отбор = Новый Структура("ВидЖурнала, ТипЖурнала");
		ЗаполнитьЗначенияСвойств(Отбор, ЭтотОбъект);
		
		ИНАГРО_Элеватор.ЗаписатьОчереднойНомер(Отбор, НомерЖурнала); 
		
	КонецЕсли;

	Если ВесБруттоКонтроль = 0 Тогда 
		ВесБруттоКонтроль = ВесБрутто;
	КонецЕсли;
	
	Если ВесТарыКонтроль = 0 Тогда 
		ВесТарыКонтроль = ВесТары;
	КонецЕсли;
	
	Если ВесБрутто1Контроль = 0 Тогда 
		ВесБрутто1Контроль = ВесБрутто1;
	КонецЕсли;
	
	Если ВесТары1Контроль = 0 Тогда 
		ВесТары1Контроль = ВесТары1;
	КонецЕсли;

КонецПроцедуры 

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	Перем Заголовок, СтруктураШапкиДокумента;
	Перем ТаблицаПоКультурам;
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКПроведению(ЭтотОбъект);
		   
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначенияБПВызовСервера.ПредставлениеДокументаПриПроведении(Ссылка);

	ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента);	
	
	Если ЗначениеЗаполнено(МестоХранения) И МестоХранения.Владелец <> Склад Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Место хранения %2 не принадлежит складу %1!';uk='Місце зберігання %2 не належить складу %1!'"), Склад, МестоХранения);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , , , Отказ);
	КонецЕсли;		
		
	// Движения по документу
	Если НЕ Отказ Тогда		
		ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоКультурам, Отказ, Заголовок);
	КонецЕсли; 		
	
	Движения.Хозрасчетный.ВыполнитьДействияПередЗаписьюДвижений();

	ПроведениеСервер.ПодготовитьНаборыЗаписейКЗаписиДвижений(ЭтотОбъект); 	

КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКОтменеПроведения(ЭтотОбъект);
	Движения.Записать();
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)

	Дата = НачалоДня(ОбщегоНазначения.ТекущаяДатаПользователя());
	ВремяПрибытия = ТекущаяДата();
	ВремяВыбытия  = ТекущаяДата();	
	Ответственный = Пользователи.ТекущийПользователь();
	
	ИНАГРО_ЭлеваторЗаполнениеДокументов.ЗаполнитьТипНомерЖурналаВесовой(ЭтотОбъект);		
		
	ВесБрутто          = 0;
	ВесБрутто1         = 0;	
	ВесТары            = 0;
	ВесТары1           = 0;
	ВесНетто           = 0;
	ВесНетто1          = 0; 	
		
	Вес                = 0;
	ВесНеттоДок        = 0;	
	
	ВесБруттоКонтроль  = 0;
	ВесБрутто1Контроль = 0;
	ВесТарыКонтроль    = 0;
	ВесТары1Контроль   = 0;
	
	ЛабораторныйАнализ = Документы.ИНАГРО_ЛабораторныйАнализ.ПустаяСсылка();
	
	ВремяЭкспрессАнализа = Дата(1, 1, 1, 0, 0, 0);
	НомерАкта = "";
	НомерНакладной = "";
	НомерАнализа = "";
	Влажность = 0;
	Сорность = 0;
	
КонецПроцедуры

#КонецОбласти

#Область Проведение

// Процедура формирует структуру шапки документа и дополнительных полей.
//
Процедура ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента) Экспорт

	// Дерево значений, содержащее имена необходимых полей в запросе по шапке.
	Перем ДеревоПолейЗапросаПоШапке;	
	
	СтруктураШапкиДокумента   = ОбщегоНазначенияРед12.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	
	// Заполним по шапке документа дерево параметров, нужных при проведении.
	ДеревоПолейЗапросаПоШапке = ОбщегоНазначенияРед12.СформироватьДеревоПолейЗапросаПоШапке(); 	
	
	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа.
	СтруктураШапкиДокумента = УправлениеЗапасами.СформироватьЗапросПоДеревуПолей(ЭтотОбъект, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, "");

КонецПроцедуры

// Составляет таблицу по культурам и шапке документа
//
Процедура ПодготовитьТаблицуПоКультурам(СтруктураШапкиДокумента, ТаблицаПоКультурам, Отказ, Заголовок) Экспорт
	
	СтруктураПолей = Новый Структура;
	СтруктураПростыхПолей = Новый Структура;
	СтруктураСложныхПолей = Новый Структура;
	
	Если СчетУчетаВТаблице Тогда
		СтруктураПолей.Вставить("СчетУчетаБУ",  "СчетУчетаБУ");
		СтруктураПолей.Вставить("Забалансовый", "СчетУчетаБУ.Забалансовый");
	Иначе
		СтруктураПолей.Вставить("СчетУчетаБУ",  "Ссылка.СчетУчетаБУ");
		СтруктураПолей.Вставить("Забалансовый", "Ссылка.СчетУчетаБУ.Забалансовый");
	КонецЕсли;
	
	СтруктураПолей.Вставить("Количество",                  "Вес");
	СтруктураПолей.Вставить("СтавкаНДС",                   "Номенклатура.СтавкаНДС");
	СтруктураПолей.Вставить("Услуга",                      "Номенклатура.Услуга");
	СтруктураПолей.Вставить("Номенклатура",                "Номенклатура");
	СтруктураПолей.Вставить("ВидФасовки",                  "ВидФасовки");
	СтруктураПолей.Вставить("Урожай",                      "Урожай");	
	СтруктураПолей.Вставить("Количество2",                 "Количество");
	СтруктураПолей.Вставить("ФизическийВес",               "Вес");
	СтруктураПолей.Вставить("ЗачетныйВес",                 "Вес");
	СтруктураПолей.Вставить("Дата",                        "Ссылка.Дата");
	СтруктураПолей.Вставить("Организация",                 "Ссылка.Организация");
	СтруктураПолей.Вставить("Владелец",                    "Ссылка.Владелец");	
	СтруктураПолей.Вставить("ДоговорКонтрагента",          "Ссылка.ДоговорКонтрагента");
	СтруктураПолей.Вставить("Склад",                       "Ссылка.Склад");
	СтруктураПолей.Вставить("ВидХранения",                 "Ссылка.ВидХранения");	
	СтруктураПолей.Вставить("ОтражатьВБухгалтерскомУчете", "Ссылка.ОтражатьВБухгалтерскомУчете");
	СтруктураПолей.Вставить("Ссылка",                      "Ссылка");

	СтруктураПростыхПолей.Вставить("Влажность",               0);
	СтруктураПростыхПолей.Вставить("СорнаяПримесь",           0);
	СтруктураПростыхПолей.Вставить("ЗерноваяПримесь",         0);
	СтруктураПростыхПолей.Вставить("ВидДокумента",            СтруктураШапкиДокумента.ВидДокумента);	
	СтруктураПростыхПолей.Вставить("Сумма",                   0);			
	СтруктураПростыхПолей.Вставить("Цена",                    0);
	СтруктураПростыхПолей.Вставить("СуммаНДС",                0);	
	СтруктураПростыхПолей.Вставить("СуммаБезНДСРегл",         0);
	СтруктураПростыхПолей.Вставить("СуммаНДСРегл",            0);
	СтруктураПростыхПолей.Вставить("СуммаСНДСРегл",           0);	
	СтруктураПростыхПолей.Вставить("СуммаБезНДСВал",          0);
	СтруктураПростыхПолей.Вставить("СуммаНДСВал",             0);
	СтруктураПростыхПолей.Вставить("СуммаСНДСВал",            0);	
	СтруктураПростыхПолей.Вставить("ПроводкиСуммаБезНДСРегл", 0);
	СтруктураПростыхПолей.Вставить("ПроводкиСуммаНДСРегл",    0);
	СтруктураПростыхПолей.Вставить("ПроводкиСуммаСНДСРегл",   0);	
	СтруктураПростыхПолей.Вставить("ПроводкиСуммаБезНДСВал",  0);
	СтруктураПростыхПолей.Вставить("ПроводкиСуммаНДСВал",     0);
	СтруктураПростыхПолей.Вставить("ПроводкиСуммаСНДСВал",    0);
	
	РезультатЗапросаПоКультурам = ОбщегоНазначенияРед12.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "СписокНоменклатуры", СтруктураПолей, СтруктураПростыхПолей, СтруктураСложныхПолей);
	
	ТаблицаПоКультурам = РезультатЗапросаПоКультурам.Выгрузить();
	
КонецПроцедуры

// Процедура выполняет движения по регистрам
//
Процедура ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоКультурам, Отказ, Заголовок)
	
	Если ВидОперации = Перечисления.ИНАГРО_ВидыОперацийТТНВвоз.Ввоз Тогда
		// Если вид операции Ввоз проверка возможности проведения по весу		
		// Для автомобиля
		Если ВесБрутто = 0 Тогда
			ТекстСообщения = НСтр("ru='Нет значения веса брутто!';uk='Немає значення ваги брутто!'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Объект.ВесБрутто", , Отказ);									
		КонецЕсли;
		
		Если ВесТары = 0 Тогда
			ТекстСообщения = НСтр("ru='Нет значения веса тары!';uk='Немає значення ваги тари!'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Объект.ВесТары", , Отказ);									
		КонецЕсли;	
		
		// Для прицепа
		Если ВесБрутто1 + ВесТары1 > 0 Тогда
			
			Если ВесБрутто1 = 0 Тогда
				ТекстСообщения = НСтр("ru='Нет значения веса брутто для прицепа!';uk='Немає значення ваги брутто для причепа!'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Объект.ВесБрутто1", , Отказ);																
			КонецЕсли;
			
			Если ВесТары1 = 0 Тогда
				ТекстСообщения = НСтр("ru='Нет значения веса тары для прицепа!';uk='Немає значення ваги тари для причепа!'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Объект.ВесТары1", , Отказ);																
			КонецЕсли;
			
		КонецЕсли;
		
		Если НЕ Отказ Тогда			
			
			ВключитьКонтрольНомераПробы = ИНАГРО_Элеватор.ПолучитьПараметрУчетаЭлеватора(Дата, "ВключитьКонтрольНомераПробы", Ложь);
			
			Если ВключитьКонтрольНомераПробы Тогда
				
				Выборка = Документы.ИНАГРО_ТТНВвоз.СформироватьЗаписиНомераПроб(Ссылка);				
				
				ЗаписиНайдены = Ложь;
				
				Пока Выборка.Следующий() Цикл
					
					Если Выборка.НомерПробы = НомерПробы Тогда 
						
						Если    НачалоДня(Выборка.Дата) < НачалоДня(Дата)
							ИЛИ НачалоДня(Выборка.Дата) > НачалоДня(Дата) Тогда							
							
							ЗаписиНайдены = Истина;

							ТекстСообщения = НСтр("ru='Запись с таким номером пробы уже была использована ';uk='Запис з таким номером проби вже був використаний '") + Выборка.Дата;
							ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , , , Отказ);
							
						Иначе
							
							Если Владелец <> Выборка.Владелец Тогда
								ТекстСообщения = НСтр("ru='Неправильно введено поле Владелец';uk='Невiрно введене поле Власник'");
								ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , , , Отказ);
							КонецЕсли;
							
							Если ДоговорКонтрагента <> Выборка.ДоговорКонтрагента Тогда 								
								ТекстСообщения = НСтр("ru='Неправильно введено поле Договор';uk='Невiрно введене поле Договір'");
								ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , , , Отказ);
							КонецЕсли;
							
							Если Склад<>Выборка.Склад Тогда
								ТекстСообщения = НСтр("ru='Неправильно введено поле Склад';uk='Невiрно введене поле Склад'");
								ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , , , Отказ);
							КонецЕсли;
							
							Если ВидХранения <> Выборка.ВидХранения Тогда
								ТекстСообщения = НСтр("ru='Неправильно введено поле Вид хранения';uk='Невiрно введене поле Вид зберігання");
								ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , , , Отказ); 
							КонецЕсли;							
							
							Если Номенклатура <> Выборка.Номенклатура Тогда
								ТекстСообщения = НСтр("ru='Неправильно введено поле Номенклатура';uk='Невiрно введене поле Номенклатура'");
								ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , , , Отказ);								
							КонецЕсли;
							
							Если Урожай <> Выборка.Урожай Тогда
								ТекстСообщения = НСтр("ru='Неправильно введено поле Урожай';uk='Невiрно введене поле Урожай'");
								ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , , , Отказ);
							КонецЕсли;							
							
							Если СтепеньВлажности <> Выборка.СтепеньВлажности Тогда
								ТекстСообщения = НСтр("ru='Неправильно введено поле Степень влажности';uk='Невiрно введене поле Ступінь вологості'");
								ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , , , Отказ);
							КонецЕсли;
							
							Если СтепеньЗагрязнения <> Выборка.СтепеньЗагрязнения Тогда
								ТекстСообщения = НСтр("ru='Неправильно введено поле Степень загрязнения';uk='Невiрно введене поле Ступінь забруднення'");
								ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , , , Отказ);
							КонецЕсли;
							
							Если СтепеньЗараженности <> Выборка.СтепеньЗараженности Тогда
								ТекстСообщения = НСтр("ru='Неправильно введено поле Степень зараженности';uk='Невiрно введене поле Ступінь зараженості'");
								ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , , , Отказ);
							КонецЕсли;						
							
							ЗаписиНайдены = Истина;

						КонецЕсли;
						
					КонецЕсли;
					
				КонецЦикла;
				
				Если НЕ ЗаписиНайдены Тогда
					
					Движение = Движения.ИНАГРО_ИспользуемыеНомераПроб.Добавить();
					Движение.Период              = Дата;
					Движение.НомерПробы          = НомерПробы;
					Движение.Урожай              = Урожай;
					Движение.Организация         = Организация;
					Движение.Дата                = Дата;
					Движение.Номенклатура        = Номенклатура;
					Движение.ВидХранения         = ВидХранения;
					Движение.Склад               = Склад;
					Движение.Силос               = Силос;
					Движение.Владелец            = Владелец;
					Движение.ДоговорКонтрагента  = ДоговорКонтрагента;
					Движение.СтепеньВлажности    = СтепеньВлажности;
					Движение.СтепеньЗагрязнения  = СтепеньЗагрязнения;
					Движение.СтепеньЗараженности = СтепеньЗараженности;
					Движения.ИНАГРО_ИспользуемыеНомераПроб.Записать();
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		ИНАГРО_КонтрольПроцессов.СохранитьЗначенияВесаТары(ЭтотОбъект, Отказ) ;
		
	ИначеЕсли ВидОперации = Перечисления.ИНАГРО_ВидыОперацийТТНВвоз.СборУрожая Тогда
		
		Если СписокПолей.Количество() = 0 Тогда	
			ТекстСообщения = НСтр("ru='Не заполнена табличная часть Урожай';uk='Не заповнена таблична частина Урожай'");			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , , , Отказ);			
		КонецЕсли;
		
	ИначеЕсли ВидОперации = Перечисления.ИНАГРО_ВидыОперацийТТНВвоз.ВвозФасованного Тогда			
		
		Если СписокНоменклатуры.Количество() = 0 Тогда	
			ТекстСообщения = НСтр("ru='Не заполнена табличная часть Список культур';uk='Не заповнена таблична частина Список культур'");			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , , , Отказ);			
		КонецЕсли;								
		
		Если НЕ Отказ Тогда
			
			ПодготовитьТаблицуПоКультурам(СтруктураШапкиДокумента, ТаблицаПоКультурам, Отказ, Заголовок);	
			
			ТаблицаПоКультурам.Колонки.Добавить("КоличествоМест");                               
			ТаблицаПоКультурам.ЗаполнитьЗначения(0, "КоличествоМест");
			ПроводкиПоРегистрамЭлеватора(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоКультурам, Отказ, Заголовок);
			
		КонецЕсли;
		
	КонецЕсли;	
		
КонецПроцедуры 

Процедура ПроводкиПоРегистрамЭлеватора(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоКультурам, Отказ, Заголовок)
	
	Для Каждого СтрокаТаблицы Из ТаблицаПоКультурам Цикл					
		
		СтрокаТаблицы.Количество = СтрокаТаблицы.Количество2;
		ИНАГРО_Элеватор.ДвиженияПоРегиструОстаткиПриход(Движения, СтрокаТаблицы);
		ИНАГРО_Элеватор.ДвиженияПоРегиструОстаткиСводнаяПриход(Движения, СтрокаТаблицы);
		ИНАГРО_Элеватор.ДвиженияПоРегиструФорма36Приход(Движения, СтрокаТаблицы);
		ИНАГРО_Элеватор.ДвиженияПоРегиструФорма36СводнаяПриход(Движения, СтрокаТаблицы);								
		
	КонецЦикла;	
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли