#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
		
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды 
	
	ИНАГРО_КонтрольПроцессов.ПроверкаРазрешенийПередОткрытием(ЭтотОбъект, Отказ);
	
	Если Параметры.Ключ.Пустая() Тогда
		ПодготовитьФормуНаСервере();		
	КонецЕсли;
	
	// Уведомим о появлении функционала рабочей даты
	ЭтаФорма.НастройкиПредупреждений = ОбщегоНазначенияБП.НастройкиПредупрежденийОбИзменениях("РабочаяДатаИзДокумента");
	 
	// Показываем, если это новый документ и сама рабочая дата еще не установлена.
	ЭтаФорма.НастройкиПредупреждений.РабочаяДатаИзДокумента = ЭтаФорма.НастройкиПредупреждений.РабочаяДатаИзДокумента
	 	И ЭтаФорма.Параметры.Ключ.Пустая()
	  	И НЕ ЗначениеЗаполнено(БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("РабочаяДата"));	  
		
	УстановитьПараметрыВыбораВидОперации();
	
	// Если форма вызвана в режиме смена вида операции - модифицируем сразу при открытии, 
	// чтобы можно было подтвердить или отказаться от изменения путем сохранения или 
	// отказа от сохранения документа.
	Если Параметры.Свойство("ИзменитьВидОперации")
		И Параметры.ИзменитьВидОперации Тогда
		
		// Не кэшируем переменную Объект, т.к. может вызываться Форма.ИзменитьРеквизиты(),
		// которая меняет Объект.
		Объект.ВидОперации = Параметры.ЗначенияЗаполнения.ВидОперации;
		
		УстановитьЗаголовокФормы();		
		УправлениеФормойНаСервере();
		
		Модифицированность = Истина;
		
	КонецЕсли;	
	
	// ПодключаемоеОборудование
	ИНАГРО_ПодключаемоеОборудованиеОбщегоНазначения.НастроитьПодключаемоеОборудование(ЭтаФорма);
	// ПодключаемоеОборудование
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если  ТипЗнч(Параметр) = Тип("Структура") 
		И Параметр.Свойство("ИдентификаторВызывающейФормы")
		И Параметр.ИдентификаторВызывающейФормы = УникальныйИдентификатор Тогда		
		Если ИмяСобытия = "СозданЛабораторныйАнализ" ИЛИ ИмяСобытия = "ИзмененЛабораторныйАнализ" Тогда 			
			Если ИНАГРО_Элеватор.ЛабораторныйАнализПроверкаЗаполнения(Параметр.ДокументСсылка, ПолучитьПараметрыДляПроверкиЗаполнения()) Тогда
				Объект.ЛабораторныйАнализ = Параметр.ДокументСсылка;
				ЛабораторныйАнализПриИзмененииНаСервере();
				Модифицированность = Истина;
			КонецЕсли;
		КонецЕсли;
	Иначе
		ОбщегоНазначенияБПКлиент.ОбработкаОповещенияФормыДокумента(ЭтаФорма, Объект.Ссылка, ИмяСобытия, Параметр, Источник);
	КонецЕсли;	
	
	Если Источник = "ПодключаемоеОборудование" Тогда
		Если ИмяСобытия = "WP89" Тогда			
			ЗавершениеПолученияВеса(Параметр, Неопределено);			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	ПодготовитьФормуНаСервере();

КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	РасчетВеса();		

КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// проверяем нужно ли формировать ттн	
		
	Ссылка = Объект.Ссылка; 	
	
	НашаМодифицированность = Модифицированность;
	
	Если Модифицированность Тогда
		
		Если Объект.Дата                <> Ссылка.Дата 
		 ИЛИ Объект.Организация         <> Ссылка.Организация 	
		 ИЛИ Объект.Владелец            <> Ссылка.Владелец 	
		 ИЛИ Объект.ДоговорКонтрагента  <> Ссылка.ДоговорКонтрагента 			
		 ИЛИ Объект.Поставщик           <> Ссылка.Поставщик 	
		 ИЛИ Объект.ВидХранения         <> Ссылка.ВидХранения 	
		 ИЛИ Объект.Склад               <> Ссылка.Склад 	
		 ИЛИ Объект.Силос               <> Ссылка.Силос 	
		 ИЛИ Объект.Номенклатура        <> Ссылка.Номенклатура 	
		 ИЛИ Объект.Урожай              <> Ссылка.Урожай 	
		 ИЛИ Объект.СтепеньВлажности    <> Ссылка.СтепеньВлажности 	
		 ИЛИ Объект.СтепеньЗагрязнения  <> Ссылка.СтепеньЗагрязнения 	
		 ИЛИ Объект.СтепеньЗараженности <> Ссылка.СтепеньЗараженности 		
		 ИЛИ Объект.НомерПробы          <> Ссылка.НомерПробы 		
		 ИЛИ Объект.Вес                 <> Ссылка.Вес 		
		 ИЛИ Объект.ВесНеттоДок         <> Ссылка.ВесНеттоДок Тогда 	
			НашаМодифицированность = Истина;
		Иначе
			НашаМодифицированность = Ложь;
		КонецЕсли;
		
	КонецЕсли;	
	
	Если ИнтерактивноеФормированиеРеестровТТН И НашаМодифицированность Тогда
		 	
		// Если это не новый документ или присутсвует в каком-то реестре
		// Нужно переформировывать реестр по старым параметрам		
		
		Если ЗначениеЗаполнено(Объект.Ссылка) И ВключенаВРеестр() Тогда
			
			ПараметрыСтарые = Новый Структура;
			ПараметрыСтарые.Вставить("ПериодС",             НачалоДня(Ссылка.Дата));
			ПараметрыСтарые.Вставить("ПериодПо",            КонецДня(Ссылка.Дата));
			ПараметрыСтарые.Вставить("Организация",         Ссылка.Организация);
			ПараметрыСтарые.Вставить("Владелец",            Ссылка.Владелец);
			ПараметрыСтарые.Вставить("ДоговорКонтрагента",  Ссылка.ДоговорКонтрагента);
			ПараметрыСтарые.Вставить("Поставщик",           Ссылка.Поставщик);
			ПараметрыСтарые.Вставить("ВидХранения",         Ссылка.ВидХранения);
			ПараметрыСтарые.Вставить("Склад",               Ссылка.Склад);
			
			Если УчитыватьСилосПриФормированииРеестраТТННаВвоз Тогда
				ПараметрыСтарые.Вставить("Силос", Ссылка.Силос);
			Иначе
				ПараметрыСтарые.Вставить("Силос", Справочники.ИНАГРО_МестаХранения.ПустаяСсылка() );
			КонецЕсли;
			
			ПараметрыСтарые.Вставить("Номенклатура",        Ссылка.Номенклатура);
			ПараметрыСтарые.Вставить("Урожай",              Ссылка.Урожай);
			ПараметрыСтарые.Вставить("НомерПробы",          Ссылка.НомерПробы);
			ПараметрыСтарые.Вставить("СтепеньВлажности",    Ссылка.СтепеньВлажности);
			ПараметрыСтарые.Вставить("СтепеньЗагрязнения",  Ссылка.СтепеньЗагрязнения);
			ПараметрыСтарые.Вставить("СтепеньЗараженности", Ссылка.СтепеньЗараженности);
			
			ТекущийОбъект.ДополнительныеСвойства.Вставить("ПараметрыСтарые", ПараметрыСтарые);
			
		КонецЕсли;		
		
		ПараметрыТекущие = Новый Структура;
		ПараметрыТекущие.Вставить("ПериодС",             НачалоДня(Объект.Дата));
		ПараметрыТекущие.Вставить("ПериодПо",            КонецДня(Объект.Дата));
		ПараметрыТекущие.Вставить("Организация",         Объект.Организация);
		ПараметрыТекущие.Вставить("Владелец",            Объект.Владелец);
		ПараметрыТекущие.Вставить("ДоговорКонтрагента",  Объект.ДоговорКонтрагента);
		ПараметрыТекущие.Вставить("Поставщик",           Объект.Поставщик);
		ПараметрыТекущие.Вставить("ВидХранения",         Объект.ВидХранения);
		ПараметрыТекущие.Вставить("Склад",               Объект.Склад);
		
		Если УчитыватьСилосПриФормированииРеестраТТННаВвоз Тогда
			ПараметрыТекущие.Вставить("Силос", Ссылка.Силос);
		Иначе
			ПараметрыТекущие.Вставить("Силос", Справочники.ИНАГРО_МестаХранения.ПустаяСсылка() );
		КонецЕсли;
		
		ПараметрыТекущие.Вставить("Номенклатура",        Объект.Номенклатура);
		ПараметрыТекущие.Вставить("Урожай",              Объект.Урожай);
		ПараметрыТекущие.Вставить("НомерПробы",          Объект.НомерПробы);
		ПараметрыТекущие.Вставить("СтепеньВлажности",    Объект.СтепеньВлажности);
		ПараметрыТекущие.Вставить("СтепеньЗагрязнения",  Объект.СтепеньЗагрязнения);
		ПараметрыТекущие.Вставить("СтепеньЗараженности", Объект.СтепеньЗараженности);
		
		ТекущийОбъект.ДополнительныеСвойства.Вставить("ПараметрыТекущие", ПараметрыТекущие);
		
	КонецЕсли;	
		
	//РасчетВеса();

КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ИНАГРО_КонтрольПроцессов.СохранитьЗначенияВесаТары(ТекущийОбъект, Отказ);
	
	Если ТекущийОбъект.ПометкаУдаления Тогда
		ИНАГРО_КонтрольПроцессов.ОчиститьЗначенияВесаТары(ТекущийОбъект);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
			
	Если ТекущийОбъект.ДополнительныеСвойства.Свойство("ПараметрыСтарые") Тогда
        ИНАГРО_Элеватор.СформироватьРеестрТТН_Ввоз(ТекущийОбъект.ДополнительныеСвойства.ПараметрыСтарые);
	КонецЕсли;
	
    Если ТекущийОбъект.ДополнительныеСвойства.Свойство("ПараметрыТекущие") Тогда
        ИНАГРО_Элеватор.СформироватьРеестрТТН_Ввоз(ТекущийОбъект.ДополнительныеСвойства.ПараметрыТекущие);
    КонецЕсли;

	УстановитьЗаголовокФормы();	
		
	УстановитьСостояниеДокумента();
	
КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)

	Если НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДатаДокумента) Тогда
		// Изменение времени не влияет на поведение документа.
		ТекущаяДатаДокумента = Объект.Дата;
		Возврат;
	КонецЕсли;	
		
	// Общие проверки условий по датам.
	ТребуетсяВызовСервера = ИНАГРО_ЭлеваторКлиент.ТребуетсяВызовСервераПриИзмененииДатыДокумента(Объект.Дата, ТекущаяДатаДокумента);

	// Если определили, что изменение даты может повлиять на какие-либо параметры, 
	// то передаем обработку на сервер.
	Если ТребуетсяВызовСервера Тогда
		ДатаПриИзмененииНаСервере();
	КонецЕсли;
		
	// Запомним новую дату документа.
	ТекущаяДатаДокумента = Объект.Дата;

КонецПроцедуры

&НаСервере
Процедура ДатаПриИзмененииНаСервере()
	
	ИНАГРО_ЭлеваторЗаполнениеДокументов.ЗаполнитьТипНомерЖурналаВесовой(Объект);	

	УстановитьФункциональныеОпцииФормы();
	
	УправлениеФормойНаСервере();

КонецПроцедуры

&НаКлиенте
Процедура ВидОперацииПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.ВидОперации) Тогда	
		ВидОперацииПриИзмененииНаСервере();	
	КонецЕсли; 	
		
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаСервере
Процедура ВидОперацииПриИзмененииНаСервере()
	
	Если Объект.ВидОперации = Перечисления.ИНАГРО_ВидыОперацийТТНВвоз.ВвозФасованного Тогда
		
		ПерезаполнитьРевизиты();
		
		НоваяСтрока = Объект.СписокНоменклатуры.Добавить();
		НоваяСтрока.Номенклатура = Объект.Номенклатура;
		НоваяСтрока.Урожай       = Объект.Урожай;
		НоваяСтрока.Вес          = Объект.Вес;
		НоваяСтрока.СчетУчетаБУ  = Объект.СчетУчетаБУ;
		
	Иначе
			
		ПерезаполнитьРевизиты(); 		
				
	КонецЕсли;
	
	УстановитьЗаголовокФормы();
	
	УправлениеФормойНаСервере();	
		
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтражатьВБухгалтерскомУчетеПриИзменении(Элемент)
	
	Если Объект.СписокНоменклатуры.Количество() > 0 Тогда
		
		Если Объект.ОтражатьВБухгалтерскомУчете Тогда		
			ТекстВопроса = НСтр("ru='Установить счета бухгалтерского учета в соответствии со значениями по умолчанию?';uk='Встановити рахунки бухгалтерського обліку відповідно до значень за замовчуванням?'");
		Иначе
			ТекстВопроса = НСтр("ru='Очистить счета бухгалтерского учета?';uk='Очистити рахунки бухгалтерського обліку?'");
		КонецЕсли;
		
		Оповещение = Новый ОписаниеОповещения("ОтражатьВБухгалтерскомУчетеПриИзмененииЗавершение", ЭтотОбъект, Параметры);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);	
		
		Возврат;
		
	КонецЕсли;	
	
	УправлениеФормойНаСервере(); 
	
КонецПроцедуры

&НаКлиенте
Процедура ОтражатьВБухгалтерскомУчетеПриИзмененииЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		УправлениеФормойНаСервере();
		Возврат;
	КонецЕсли; 	
	
	ОтражатьВБухгалтерскомУчетеПриИзмененииЗавершениеНаСервере();
   
КонецПроцедуры

&НаСервере
Процедура ОтражатьВБухгалтерскомУчетеПриИзмененииЗавершениеНаСервере()
	
	ЗаполнитьСчетаУчетаВТабличнойЧасти();
	
	УправлениеФормойНаСервере();
   
КонецПроцедуры

&НаКлиенте
Процедура СчетУчетаВТаблицеПриИзменении(Элемент)
			
	ОтражатьВБухгалтерскомУчетеПриИзмененииЗавершениеНаСервере();

КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)

	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		ОрганизацияПриИзмененииНаСервере();
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()

	ЗаполнитьСчетаУчетаВТабличнойЧасти();	
		
	УстановитьФункциональныеОпцииФормы();	
	
	УправлениеФормойНаСервере();

КонецПроцедуры

&НаКлиенте
Процедура ВладелецПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.Владелец) Тогда
		
		ПараметрыОтбораДоговора = ПолучитьПараметрыДляДоговоров();
		
		ИНАГРО_ЭлеваторЗаполнениеДокументов.ПриИзмененииЗначенияКонтрагента(Объект.Дата, Объект.Организация, Объект.Владелец, Объект.ДоговорКонтрагента, ПараметрыОтбораДоговора);
		
		ВладелецПриИзмененииНаСервере();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВладелецПриИзмененииНаСервере()
		
	ПерезаполнитьРевизиты();
	
	Если Объект.ВидОперации = Перечисления.ИНАГРО_ВидыОперацийТТНВвоз.ВвозФасованного Тогда 
		ЗаполнитьСчетаУчетаВТабличнойЧасти();
	КонецЕсли;
	
	УстановитьФункциональныеОпцииФормы();
	
	УправлениеФормойНаСервере();
	
	Объект.Поставщик = Объект.Владелец;

КонецПроцедуры

&НаКлиенте
Процедура ВладелецНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если ДополнительныйКонтрольДоговоров Тогда
		СтандартнаяОбработка = Ложь;
		ИНАГРО_ЭлеваторКлиент.ВладелецНачалоВыбораЗавершение();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПоставщикПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.Поставщик) Тогда
		ПоставщикПриИзмененииНаСервере();
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПоставщикПриИзмененииНаСервере()
	
	ПерезаполнитьРевизиты();
	
	УправлениеФормойНаСервере();

КонецПроцедуры

&НаКлиенте
Процедура СкладПриИзменении(Элемент)

	Если ЗначениеЗаполнено(Объект.Склад) Тогда
		СкладПриИзмененииНаСервере();
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура СкладПриИзмененииНаСервере()
	
	ЗаполнитьСчетаУчетаВТабличнойЧасти();
	
	Объект.МестоХранения = Справочники.ИНАГРО_МестаХранения.ПустаяСсылка();

	УстановитьФункциональныеОпцииФормы(); 	
	
	УправлениеФормойНаСервере();

КонецПроцедуры

&НаКлиенте
Процедура ВидХраненияПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.ВидХранения) Тогда
		
		ПараметрыОтбораДоговора = ПолучитьПараметрыДляДоговоров();
		
		ИНАГРО_ЭлеваторЗаполнениеДокументов.ПриИзмененииЗначенияКонтрагента(Объект.Дата, Объект.Организация, Объект.Владелец, Объект.ДоговорКонтрагента, ПараметрыОтбораДоговора);
		
	КонецЕсли; 	
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорКонтрагентаПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		ДоговорКонтрагентаПриИзмененииНаСервере();
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ДоговорКонтрагентаПриИзмененииНаСервере()
	
	Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента.ВидВзаиморасчетов) Тогда
		НайденВидХранения = Справочники.ИНАГРО_ВидыХранения.НайтиПоРеквизиту("ТипДоговора", Объект.ДоговорКонтрагента.ВидВзаиморасчетов); 
		Если НайденВидХранения <> Неопределено Тогда
			Объект.ВидХранения = НайденВидХранения.Ссылка;
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТипЖурналаПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.ТипЖурнала) Тогда
		
		ДанныеОбъекта = Новый Структура("ВидЖурнала, ТипЖурнала, НомерЖурнала");		
		ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);		
	
		ТипЖурналаПриИзмененииНаСервере(ДанныеОбъекта);
		
		Объект.НомерЖурнала = ДанныеОбъекта.НомерЖурнала;
		
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ТипЖурналаПриИзмененииНаСервере(ДанныеОбъекта)
	
	Отбор = Новый Структура("ВидЖурнала, ТипЖурнала", ДанныеОбъекта.ВидЖурнала, ДанныеОбъекта.ТипЖурнала);
	
	ДанныеОбъекта.НомерЖурнала = РегистрыСведений.ИНАГРО_НумерацияЖурналовЭлеватора.Получить(Отбор).ТекущийНомерЖурнала + 1;

КонецПроцедуры

#Область ОбработчикиСобытийЭлементовПанелиТранспортКультура

&НаКлиенте
Процедура ВодительПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.Водитель) Тогда
		
		ДанныеОбъекта = Новый Структура("Водитель, НомерТранспорта, НомерПрицепа, Автопредприятие");
		ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);		
		ДанныеОбъекта.Вставить("ВестиСправочникВодителей",   ВестиСправочникВодителей);
		ДанныеОбъекта.Вставить("ВестиСправочникАвтомобилей", ВестиСправочникАвтомобилей);
		
		ВодительПриИзмененииНаСервере(ДанныеОбъекта);
		
		ЗаполнитьЗначенияСвойств(Объект, ДанныеОбъекта);
		
		Если ВестиСправочникАвтомобилей Тогда 
		
			Если ЗначениеЗаполнено(ДанныеОбъекта.НомерТранспорта) Тогда
				Если ТипЗнч(ДанныеОбъекта.НомерТранспорта) = Тип("Строка") Тогда
					Элементы.НомерТранспорта.ОграничениеТипа = Новый ОписаниеТипов("Строка");				
					Элементы.НомерТранспорта.ВыбиратьТип     = Ложь;
				Иначе
					Элементы.НомерТранспорта.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.ИНАГРО_ТранспортныеСредства");				
					Элементы.НомерТранспорта.ВыбиратьТип     = Ложь;
				КонецЕсли; 
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ДанныеОбъекта.НомерПрицепа) Тогда
				Если ТипЗнч(ДанныеОбъекта.НомерПрицепа) = Тип("Строка") Тогда
					Элементы.НомерПрицепа.ОграничениеТипа = Новый ОписаниеТипов("Строка");				
					Элементы.НомерПрицепа.ВыбиратьТип     = Ложь;
				Иначе
					Элементы.НомерПрицепа.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.ИНАГРО_ТранспортныеСредства");				
					Элементы.НомерПрицепа.ВыбиратьТип     = Ложь;
				КонецЕсли; 
			КонецЕсли;
		
		Иначе 
			Элементы.НомерТранспорта.ОграничениеТипа = Новый ОписаниеТипов("Строка");				
			Элементы.НомерТранспорта.ВыбиратьТип     = Ложь;
			Элементы.НомерПрицепа.ОграничениеТипа = Новый ОписаниеТипов("Строка");				
			Элементы.НомерПрицепа.ВыбиратьТип     = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ВодительПриИзмененииНаСервере(ДанныеОбъекта)
	
	Водитель = ДанныеОбъекта.Водитель;
	
	Если ДанныеОбъекта.ВестиСправочникВодителей Тогда
		
		Если ДанныеОбъекта.ВестиСправочникАвтомобилей Тогда
			
			Если ЗначениеЗаполнено(Водитель.НомерТранспорта) Тогда
				ДанныеОбъекта.НомерТранспорта = Водитель.НомерТранспорта;
			КонецЕсли;
			Если ЗначениеЗаполнено(Водитель.НомерПрицепа) Тогда
				ДанныеОбъекта.НомерПрицепа	  = Водитель.НомерПрицепа;
			КонецЕсли;
			Если ЗначениеЗаполнено(Водитель.Автопредприятие) Тогда
				ДанныеОбъекта.Автопредприятие = Водитель.Автопредприятие;
			КонецЕсли;
			
		Иначе
			
			ДанныеОбъекта.НомерТранспорта = Строка(Водитель.НомерТранспорта);
			ДанныеОбъекта.НомерПрицепа	  = Строка(Водитель.НомерПрицепа);
			
		КонецЕсли;		
		
	КонецЕсли; 	
			
КонецПроцедуры

&НаКлиенте
Процедура НоменклатураПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.Номенклатура) Тогда				
		НоменклатураПриИзмененииНаСервере();		
	КонецЕсли;	

КонецПроцедуры

&НаСервере
Процедура НоменклатураПриИзмененииНаСервере()
	
	Если НЕ ЗначениеЗаполнено(Объект.СтепеньВлажности) Тогда
		Объект.СтепеньВлажности    = ИНАГРО_Элеватор.ПолучитьДополнительныйРеквизитНоменклатуры(Объект.Номенклатура, "ВидКультуры").СтепеньВлажности;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.СтепеньЗагрязнения) Тогда
		Объект.СтепеньЗагрязнения  = ИНАГРО_Элеватор.ПолучитьДополнительныйРеквизитНоменклатуры(Объект.Номенклатура, "ВидКультуры").СтепеньЗагрязнения;		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.СтепеньЗараженности) Тогда
		Объект.СтепеньЗараженности = ИНАГРО_Элеватор.ПолучитьДополнительныйРеквизитНоменклатуры(Объект.Номенклатура, "ВидКультуры").СтепеньЗараженности ;		
	КонецЕсли; 

	Объект.СчетУчетаБУ = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаУчетаНоменклатуры(Объект.Организация, Объект.Номенклатура, Объект.Склад).СчетУчетаДавСырья;
	
	ПерезаполнитьРевизиты();	
	
	УправлениеФормойНаСервере();
	 		
КонецПроцедуры

&НаКлиенте
Процедура УрожайПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.Урожай) Тогда				
		
		ПараметрыОтбораДоговора = ПолучитьПараметрыДляДоговоров();
		
		ИНАГРО_ЭлеваторЗаполнениеДокументов.ПриИзмененииЗначенияКонтрагента(Объект.Дата, Объект.Организация, Объект.Владелец, Объект.ДоговорКонтрагента, ПараметрыОтбораДоговора);
		
	КонецЕсли;	

КонецПроцедуры

&НаКлиенте
Процедура ЛабораторныйАнализПриИзменении(Элемент)
		
	ЛабораторныйАнализПриИзмененииНаСервере();	
	
КонецПроцедуры

&НаСервере
Процедура ЛабораторныйАнализПриИзмененииНаСервере()
	
	//Объект.НомерАнализа = ИНАГРО_Элеватор.ПолучитьНомерЛабАнализаИзЛабАнализа(Объект.ЛабораторныйАнализ);	
	Объект.НомерПробы   = Объект.ЛабораторныйАнализ.НомерАнализа;
	//Объект.Влажность    = Объект.ЛабораторныйАнализ.Влажность;
	Объект.Сорность     = Объект.ЛабораторныйАнализ.СорнаяПримесь;
	
	ДанныеОбъекта = Новый Структура(
		"ЛабораторныйАнализ, НомерАнализа, Влажность, 
		|СорнаяПримесь, ЗерноваяПримесь, ЗачетныйВес
		|");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект); 

	ПараметрыДляРасчетаЗачетногоВеса = ПолучитьПараметрыДляРасчетаЗачетногоВеса();

	ИНАГРО_Элеватор.ЛабораторныйАнализПриИзмененииНаСервере(ДанныеОбъекта, ПараметрыДляРасчетаЗачетногоВеса);
	
	ЗаполнитьЗначенияСвойств(Объект, ДанныеОбъекта); 
	
	УправлениеФормойНаСервере();

КонецПроцедуры

&НаКлиенте
Процедура ЛабораторныйАнализНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыОтбора = Новый Структура;
	
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		ПараметрыОтбора.Вставить("Организация",        Объект.Организация);		
	КонецЕсли;	
	Если ЗначениеЗаполнено(Объект.Владелец) Тогда
		ПараметрыОтбора.Вставить("Владелец",           Объект.Владелец);
	КонецЕсли;	
	Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		ПараметрыОтбора.Вставить("ДоговорКонтрагента", Объект.ДоговорКонтрагента);		
	КонецЕсли;	
	Если ЗначениеЗаполнено(Объект.Склад) Тогда
		ПараметрыОтбора.Вставить("Склад",              Объект.Склад);
	КонецЕсли;	
	Если ЗначениеЗаполнено(Объект.ВидХранения) Тогда
		ПараметрыОтбора.Вставить("ВидХранения",        Объект.ВидХранения);
	КонецЕсли;	
	Если ЗначениеЗаполнено(Объект.Номенклатура) Тогда
		ПараметрыОтбора.Вставить("Номенклатура",       Объект.Номенклатура);
	КонецЕсли;	
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Отбор",  ПараметрыОтбора);
	ПараметрыФормы.Вставить("Ссылка", Объект.Ссылка);
	
	ОткрытьФорму("Документ.ИНАГРО_ЛабораторныйАнализ.Форма.ФормаВыбора", ПараметрыФормы, Элемент, УникальныйИдентификатор, , , , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры

&НаКлиенте
Процедура ВесБруттоПриИзменении(Элемент)
	
	ВесБруттоПриИзмененииНаСервере();

КонецПроцедуры

&НаСервере
Процедура ВесБруттоПриИзмененииНаСервере()
	
	Если НЕ ИНАГРО_КонтрольПроцессов.ПроверитьМаксимальнуюГрузоподъемностьВесов(Объект.ВесБрутто) Тогда 
		Объект.ВесБрутто = 0;
		Возврат;
	КонецЕсли;	

	ИНАГРО_КонтрольПроцессов.КонтрольИзмененияВесаТТН(Объект, Объект.ВесБруттоКонтроль, Объект.ВесБрутто);

	РасчетВеса();
	
	УправлениеПоследовательностьюВводаВеса();
	
	Объект.РедактировалсяВручнуюВесБрутто = Истина;

КонецПроцедуры

&НаКлиенте
Процедура ВесБрутто1ПриИзменении(Элемент)
	
	ВесБрутто1ПриИзмененииНаСервере();

КонецПроцедуры

&НаСервере
Процедура ВесБрутто1ПриИзмененииНаСервере()
	
	Если НЕ ИНАГРО_КонтрольПроцессов.ПроверитьМаксимальнуюГрузоподъемностьВесов(Объект.ВесБрутто1) Тогда 
		Объект.ВесБрутто1 = 0;
		Возврат;
	КонецЕсли;	

	ИНАГРО_КонтрольПроцессов.КонтрольИзмененияВесаТТН(Объект, Объект.ВесБрутто1Контроль, Объект.ВесБрутто1);

	РасчетВеса();
	
	УправлениеПоследовательностьюВводаВеса();
	
	Объект.РедактировалсяВручнуюВесБрутто1 = Истина;

КонецПроцедуры

&НаКлиенте
Процедура ВесТарыПриИзменении(Элемент)
	
	ВесТарыПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ВесТарыПриИзмененииНаСервере()
	
	Если НЕ ИНАГРО_КонтрольПроцессов.ПроверитьМаксимальнуюГрузоподъемностьВесов(Объект.ВесТары) Тогда 
		Объект.ВесТары = 0;
		Возврат;
	КонецЕсли; 		
	
	Если НЕ ИНАГРО_КонтрольПроцессов.ПроверитьОтрицательноеНетто(Объект.ВесБрутто, Объект.ВесТары) Тогда 
		Объект.ВесТары = 0;
		Возврат;
	КонецЕсли;
	
	НаличиеПрицепа = Ложь;

	ИНАГРО_КонтрольПроцессов.КонтрольИзмененияВесаТТН(Объект, Объект.ВесТарыКонтроль, Объект.ВесТары);
	ИНАГРО_КонтрольПроцессов.КонтрольРасхожденияВесаТары(Объект, НаличиеПрицепа);

	РасчетВеса();
	
	УправлениеПоследовательностьюВводаВеса();
		
	Объект.РедактировалсяВручнуюВесТары = Истина;

КонецПроцедуры

&НаКлиенте
Процедура ВесТары1ПриИзменении(Элемент)
	
	ВесТары1ПриИзмененииНаСервере();

КонецПроцедуры

&НаСервере
Процедура ВесТары1ПриИзмененииНаСервере()
	
	Если НЕ ИНАГРО_КонтрольПроцессов.ПроверитьМаксимальнуюГрузоподъемностьВесов(Объект.ВесТары1) Тогда 
		Объект.ВесТары1 = 0;
		Возврат;
	КонецЕсли;	
	
	Если НЕ ИНАГРО_КонтрольПроцессов.ПроверитьОтрицательноеНетто(Объект.ВесБрутто1, Объект.ВесТары1) Тогда 
		Объект.ВесТары1 = 0;
		Возврат;
	КонецЕсли;
	
	НаличиеПрицепа = Истина;
	
	ИНАГРО_КонтрольПроцессов.КонтрольИзмененияВесаТТН(Объект, Объект.ВесТары1Контроль, Объект.ВесТары1);
	ИНАГРО_КонтрольПроцессов.КонтрольРасхожденияВесаТары(Объект, НаличиеПрицепа);

	РасчетВеса();
	
	УправлениеПоследовательностьюВводаВеса();
		
	Объект.РедактировалсяВручнуюВесТары1 = Истина;

КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ОтпускРазрешилНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
		
	СтандартнаяОбработка = Ложь; 	
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Организация", Объект.Организация);  
		
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Отбор", ПараметрыОтбора);

	ОткрытьФорму("Справочник.ФизическиеЛица.Форма.ИНАГРО_ФормаВыбораСотрудников", ПараметрыФормы, Элемент, УникальныйИдентификатор);

КонецПроцедуры

&НаКлиенте
Процедура ОтпускРазрешилОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если НЕ ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли; 
	
	Объект.ОтпускРазрешил = ВыбранноеЗначение;	

КонецПроцедуры

&НаКлиенте
Процедура ОписаниеДвиженияФормы36НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(
		Элемент.ТекстРедактирования,
		ЭтотОбъект,
		"Объект.ОписаниеДвиженияФормы36",
		НСтр("ru='Описание движения формы 36';uk='Опис руху форми 36'"));

КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(
		Элемент.ТекстРедактирования,
		ЭтотОбъект,
		"Объект.Комментарий");

КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписокПолей

&НаКлиенте
Процедура СписокПолейПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	РасчетВеса();
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПолейЧастьПриИзменении(Элемент)
	
	СуммаЧастей  = 0;
	СписокЧастей = ПолучитьСписокЧастей();
	
	Для Каждого Элемент Из СписокЧастей Цикл
		СуммаЧастей = СуммаЧастей + Элемент;
	КонецЦикла;
	
	БруттоКоеф = (Объект.ВесБрутто + Объект.ВесБрутто1) / СуммаЧастей;
	ТараКоеф   = (Объект.ВесТары + Объект.ВесТары1) / СуммаЧастей;
	
	Для Каждого СтрокаТабличнойЧасти Из Объект.СписокПолей Цикл
		СтрокаТабличнойЧасти.Брутто = СтрокаТабличнойЧасти.Часть * БруттоКоеф;
		СтрокаТабличнойЧасти.Тара   = СтрокаТабличнойЧасти.Часть * ТараКоеф;
		СтрокаТабличнойЧасти.Вес    = СтрокаТабличнойЧасти.Часть * БруттоКоеф - СтрокаТабличнойЧасти.Часть * ТараКоеф;
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура СписокПолейБруттоПриИзменении(Элемент)
	
	РасчетВесаДляСтрокиТабличнойЧасти();

КонецПроцедуры

&НаКлиенте
Процедура СписокПолейТараПриИзменении(Элемент)
	
	РасчетВесаДляСтрокиТабличнойЧасти();

КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписокНоменклатуры

&НаКлиенте
Процедура СписокНоменклатурыНоменклатураПриИзменении(Элемент)
	
	Если Объект.СчетУчетаВТаблице Тогда
		
		ТекущиеДанные = Элементы.СписокНоменклатуры.ТекущиеДанные;
		
		ДанныеСтрокиТаблицы = Новый Структура("Номенклатура, СчетУчетаБУ");
		ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, ТекущиеДанные);
		
		ДанныеОбъекта = Новый Структура("Дата, Организация, Склад, ОтражатьВБухгалтерскомУчете"); 
		ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
		
		СписокНоменклатурыНоменклатураПриИзмененииНаСервере(ДанныеСтрокиТаблицы, ДанныеОбъекта);
		
		ТекущиеДанные.СчетУчетаБУ = ДанныеСтрокиТаблицы.СчетУчетаБУ;
		
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Процедура СписокНоменклатурыНоменклатураПриИзмененииНаСервере(СтрокаТабличнойЧасти, Знач ДанныеОбъекта)
	
	СведенияОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОНоменклатуре(
		СтрокаТабличнойЧасти.Номенклатура, ДанныеОбъекта);
	
	Если СведенияОНоменклатуре = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Документы.ИНАГРО_ТТНВвоз.ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(ДанныеОбъекта, СтрокаТабличнойЧасти, СведенияОНоменклатуре);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокНоменклатурыВидФасовкиПриИзменении(Элемент)
	
	РасчетВесаДляСтрокиТабличнойЧасти();
	
КонецПроцедуры

&НаКлиенте
Процедура СписокНоменклатурыКоличествоПриИзменении(Элемент)
	
	РасчетВесаДляСтрокиТабличнойЧасти();

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура СоздатьЛабораторныйАнализ(Команда)
	
	ЗначенияЗаполнения = Новый Структура;	
	ЗначенияЗаполнения.Вставить("Дата",               Объект.Дата);
	ЗначенияЗаполнения.Вставить("Ссылка",             ПредопределенноеЗначение("Документ.ИНАГРО_ЛабораторныйАнализ.ПустаяСсылка"));
	ЗначенияЗаполнения.Вставить("Организация",        Объект.Организация);
	ЗначенияЗаполнения.Вставить("Владелец",           Объект.Владелец);
	ЗначенияЗаполнения.Вставить("ДоговорКонтрагента", Объект.ДоговорКонтрагента);
	ЗначенияЗаполнения.Вставить("Склад",        	  Объект.Склад);
	ЗначенияЗаполнения.Вставить("ВидХранения",        Объект.ВидХранения);
	ЗначенияЗаполнения.Вставить("Урожай",             Объект.Урожай);
	ЗначенияЗаполнения.Вставить("Номенклатура",       Объект.Номенклатура);
	ЗначенияЗаполнения.Вставить("Влажность",          Объект.Влажность);
	ЗначенияЗаполнения.Вставить("СорнаяПримесь",      Объект.СорнаяПримесь);
	ЗначенияЗаполнения.Вставить("ЗерноваяПримесь",    Объект.ЗерноваяПримесь);

	ЗначенияЗаполнения.Вставить("МассаПартии",        Объект.Вес);
	
	ЗначенияЗаполнения.Вставить("НомерТранспорта",    Объект.НомерТранспорта);
	ЗначенияЗаполнения.Вставить("СтанцияОтправления", СокрЛП(Объект.Организация));
	ЗначенияЗаполнения.Вставить("СтанцияНазначения",  Объект.Поставщик);
	
	ЗначенияЗаполнения.Вставить("Силос",              Объект.Силос);
	ЗначенияЗаполнения.Вставить("НомерПробы",         Объект.НомерПробы);	

	ИНАГРО_ЭлеваторКлиент.СоздатьДокументНаОсновании(ЭтаФорма, ЗначенияЗаполнения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборНомераПробы(Команда)

	ПараметрыФормы = Новый Структура(	
		"Ссылка, НомерПробы, Организация, Владелец, 
		|Поставщик, ДоговорКонтрагента, Склад, ВидХранения,
		|Силос, Номенклатура, Урожай, 
		|СтепеньВлажности, СтепеньЗагрязнения, СтепеньЗараженности
		|");
	ЗаполнитьЗначенияСвойств(ПараметрыФормы, Объект);	 
	ПараметрыФормы.Вставить("ДополнительныйКонтрольДоговоров", ДополнительныйКонтрольДоговоров);
	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ПодборНомераПробыЗавершение", ЭтотОбъект);

	ОткрытьФорму("Документ.ИНАГРО_ТТНВвоз.Форма.ФормаЗаполненияНомераПробы", ПараметрыФормы, ЭтаФорма, УникальныйИдентификатор, , ,ОповещениеОЗакрытии , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры

&НаКлиенте
Процедура ПодборНомераПробыЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если РезультатЗакрытия <> Неопределено Тогда
		
		ЗаполнитьЗначенияСвойств(Объект, РезультатЗакрытия);
		
		Модифицированность = Истина;

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура КнопкаF5(Команда)
	
	Если (НЕ ИНАГРО_ЭлеваторУправлениеПользователями.ЗапретитьАвтоматическиИзменятьВесТТН(ТекущийПользователь, Объект.Дата))
		ИЛИ (ИНАГРО_ЭлеваторУправлениеПользователями.ЗапретитьАвтоматическиИзменятьВесТТН(ТекущийПользователь, Объект.Дата) И Объект.ВесБрутто = 0) Тогда 	
	
	    ИмяНажатойКомандыПолученияВеса = Команда.Имя;
		ОповещениеПолученияВеса = Новый ОписаниеОповещения("ЗавершениеПолученияВеса", ЭтаФорма);
		
		ИНАГРО_МенеджерОборудованияКлиент.НачатьПолученияВесаСЭлектронныхВесов(ОповещениеПолученияВеса, ЭтаФорма.УникальныйИдентификатор);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КнопкаF6(Команда)
	
	Если (НЕ ИНАГРО_ЭлеваторУправлениеПользователями.ЗапретитьАвтоматическиИзменятьВесТТН(ТекущийПользователь, Объект.Дата))
		ИЛИ (ИНАГРО_ЭлеваторУправлениеПользователями.ЗапретитьАвтоматическиИзменятьВесТТН(ТекущийПользователь, Объект.Дата) И Объект.ВесТары = 0) Тогда 	
	
	    ИмяНажатойКомандыПолученияВеса = Команда.Имя;
		ОповещениеПолученияВеса = Новый ОписаниеОповещения("ЗавершениеПолученияВеса", ЭтаФорма);
		
		ИНАГРО_МенеджерОборудованияКлиент.НачатьПолученияВесаСЭлектронныхВесов(ОповещениеПолученияВеса, ЭтаФорма.УникальныйИдентификатор);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура КнопкаF7(Команда)
	
	Если (НЕ ИНАГРО_ЭлеваторУправлениеПользователями.ЗапретитьАвтоматическиИзменятьВесТТН(ТекущийПользователь, Объект.Дата))
		ИЛИ (ИНАГРО_ЭлеваторУправлениеПользователями.ЗапретитьАвтоматическиИзменятьВесТТН(ТекущийПользователь, Объект.Дата) И Объект.ВесБрутто1 = 0) Тогда 	
	
	    ИмяНажатойКомандыПолученияВеса = Команда.Имя;
		ОповещениеПолученияВеса = Новый ОписаниеОповещения("ЗавершениеПолученияВеса", ЭтаФорма);
		
		ИНАГРО_МенеджерОборудованияКлиент.НачатьПолученияВесаСЭлектронныхВесов(ОповещениеПолученияВеса, ЭтаФорма.УникальныйИдентификатор);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура КнопкаF8(Команда)
	
	Если (НЕ ИНАГРО_ЭлеваторУправлениеПользователями.ЗапретитьАвтоматическиИзменятьВесТТН(ТекущийПользователь, Объект.Дата))
		ИЛИ (ИНАГРО_ЭлеваторУправлениеПользователями.ЗапретитьАвтоматическиИзменятьВесТТН(ТекущийПользователь, Объект.Дата) И Объект.ВесТары1 = 0) Тогда 	
	
	    ИмяНажатойКомандыПолученияВеса = Команда.Имя;
		ОповещениеПолученияВеса = Новый ОписаниеОповещения("ЗавершениеПолученияВеса", ЭтаФорма);
		
		ИНАГРО_МенеджерОборудованияКлиент.НачатьПолученияВесаСЭлектронныхВесов(ОповещениеПолученияВеса, ЭтаФорма.УникальныйИдентификатор);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура Въезд(Команда)
	
	Объект.ВремяПрибытия = ТекущаяДата();
	
	Элементы.Въезд.Доступность        = Ложь;
	Элементы.ВремяПрибытия.Доступность = Ложь;

КонецПроцедуры

&НаКлиенте
Процедура Выезд(Команда)
	
	Объект.ВремяВыбытия = ТекущаяДата();
	
	Элементы.Выезд.Доступность        = Ложь;
	Элементы.ВремяВыбытия.Доступность = Ложь;

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ПодготовитьФормуНаСервере()

	ТекущаяДатаДокумента = Объект.Дата;			

	УстановитьФункциональныеОпцииФормы();
	
	Если ДополнительныйКонтрольДоговоров Тогда
		Элементы.Владелец.КнопкаСоздания        = Ложь;
		Элементы.Владелец.ИсторияВыбораПриВводе = ИсторияВыбораПриВводе.НеИспользовать;
	КонецЕсли;
	
	УстановитьЗаголовокФормы();
	
	УстановитьТипыДанныхРеквизитов();

	УправлениеФормойНаСервере();
	
	РасчетВеса();	
	
	УстановитьСостояниеДокумента();
	
КонецПроцедуры 

&НаСервере
Процедура УстановитьФункциональныеОпцииФормы()

	ОбщегоНазначенияБПКлиентСервер.УстановитьПараметрыФункциональныхОпцийФормыДокумента(ЭтаФорма);	
	
	ТекущийПользователь                           = Пользователи.ТекущийПользователь();	
	
	ПараметрыУчетаЭлеватора                       = ИНАГРО_Элеватор.ПолучитьПараметрыУчетаЭлеватора(Объект.Дата);
	ВестиСправочникАвтомобилей                    = ПараметрыУчетаЭлеватора.ВестиСправочникАвтомобилей; 
	ВестиСправочникВодителей                      = ПараметрыУчетаЭлеватора.ВестиСправочникВодителей;
	ВестиСправочникПолей                          = ПараметрыУчетаЭлеватора.ВестиСправочникПолей;	
	ВключитьКонтрольНомераПробы                   = ПараметрыУчетаЭлеватора.ВключитьКонтрольНомераПробы;
	ИнтерактивноеФормированиеРеестровТТН          = ПараметрыУчетаЭлеватора.ИнтерактивноеФормированиеРеестровТТН;	
	ДополнительныйКонтрольДоговоров               = ПараметрыУчетаЭлеватора.ДополнительныйКонтрольДоговоров;
	КонтролироватьПоследовательностьВводаВеса     = ПараметрыУчетаЭлеватора.КонтролироватьПоследовательностьВводаВеса;
	УчитыватьВТТНКачествоОтПоставщика             = ПараметрыУчетаЭлеватора.УчитыватьВТТНКачествоОтПоставщика;	
	УчитыватьСилосПриФормированииРеестраТТННаВвоз =	ПараметрыУчетаЭлеватора.УчитыватьСилосПриФормированииРеестраТТННаВвоз;
	РедактироватьВремяВъездаТТН				      = ПараметрыУчетаЭлеватора.РедактироватьВремяВъездаТТН;
	
	СобственноеПодразделение                      = ИНАГРО_Элеватор.ПолучитьДополнительныйРеквизитКонтрагента(Объект.Владелец, "СобственноеПодразделение");
	ВидимостьМестаХранения                        = ИНАГРО_Элеватор.ПолучитьДополнительныйРеквизитСклада(Объект.Склад, "ВестиУчетПоМестамХранения");
	
КонецПроцедуры 

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)

	Элементы = Форма.Элементы;
	Объект   = Форма.Объект;	
			
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ИНАГРО_ВидыОперацийТТНВвоз.Ввоз") Тогда
		
		Элементы.ГруппаУрожай.Видимость                = Ложь;
		Элементы.ГруппаСписокКультур.Видимость         = Ложь;		
		
		Элементы.ОтражатьВБухгалтерскомУчете.Видимость = Ложь;
		Элементы.СчетУчетаВТаблице.Видимость           = Ложь;		
		Элементы.Номенклатура.Доступность              = Истина;
		Элементы.Урожай.Доступность                    = Истина;		
		
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ИНАГРО_ВидыОперацийТТНВвоз.СборУрожая") Тогда
				
		Элементы.ГруппаУрожай.Видимость                = Истина;
		Элементы.ГруппаСписокКультур.Видимость         = Ложь;	
		
		Элементы.ОтражатьВБухгалтерскомУчете.Видимость = Ложь;
		Элементы.СчетУчетаВТаблице.Видимость           = Ложь;	
		Элементы.Номенклатура.Доступность              = Истина;
		Элементы.Урожай.Доступность                    = Истина;		
		
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ИНАГРО_ВидыОперацийТТНВвоз.ВвозФасованного") Тогда
		
		Элементы.ГруппаУрожай.Видимость                = Ложь;
		Элементы.ГруппаСписокКультур.Видимость         = Истина;	
		
		Элементы.Номенклатура.Доступность              = Ложь;
		Элементы.Урожай.Доступность                    = Ложь;				
			
		Если Форма.СобственноеПодразделение Тогда
			
			Элементы.ОтражатьВБухгалтерскомУчете.Видимость   = Ложь;
			Элементы.СчетУчетаВТаблице.Видимость             = Ложь;
			Элементы.СчетУчетаБУ.Видимость                   = Ложь;					
			Элементы.СписокНоменклатурыСчетУчетаБУ.Видимость = Ложь;
			
		Иначе
			
			Элементы.ОтражатьВБухгалтерскомУчете.Видимость   =    Истина;
			Элементы.СчетУчетаВТаблице.Видимость             =    Объект.ОтражатьВБухгалтерскомУчете;			
			Элементы.СчетУчетаБУ.Видимость                   = НЕ Объект.СчетУчетаВТаблице
																И Объект.ОтражатьВБухгалтерскомУчете;		
			Элементы.СписокНоменклатурыСчетУчетаБУ.Видимость =    Объект.СчетУчетаВТаблице
															    И Объект.ОтражатьВБухгалтерскомУчете;
			
		КонецЕсли;		
		
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаСписокКультур;
		
	КонецЕсли;	
	
	ВключитьКонтрольНомераПробы = Форма.ВключитьКонтрольНомераПробы;

	Элементы.ПодборНомераПробы.Видимость    = ВключитьКонтрольНомераПробы;
	Элементы.Владелец.Доступность           = НЕ ВключитьКонтрольНомераПробы;		
	Элементы.Поставщик.Доступность          = НЕ ВключитьКонтрольНомераПробы;
	Элементы.Склад.Доступность              = НЕ ВключитьКонтрольНомераПробы;
	Элементы.ВидХранения.Доступность        = НЕ ВключитьКонтрольНомераПробы;
	Элементы.ДоговорКонтрагента.Доступность = НЕ ВключитьКонтрольНомераПробы;		
	Элементы.Номенклатура.Доступность       = НЕ ВключитьКонтрольНомераПробы;
	Элементы.СтепеньВлажности.Доступность   = НЕ ВключитьКонтрольНомераПробы;
	Элементы.СтепеньЗагрязнения.Доступность = НЕ ВключитьКонтрольНомераПробы;
	Элементы.СтепеньЗараженности.Доступность= НЕ ВключитьКонтрольНомераПробы;
	
	Элементы.ДоговорКонтрагента.Доступность = НЕ Форма.ДополнительныйКонтрольДоговоров;	
	Элементы.МестоХранения.Видимость        = Форма.ВидимостьМестаХранения;	
	//Элементы.НомерПробы.Доступность         = НЕ ЗначениеЗаполнено(Объект.ЛабораторныйАнализ);
	Элементы.Влажность.Доступность	        = НЕ ЗначениеЗаполнено(Объект.ЛабораторныйАнализ);
	Элементы.Сорность.Доступность	        = НЕ ЗначениеЗаполнено(Объект.ЛабораторныйАнализ);	
	Элементы.ВлажностьПоставщика.Видимость  = Форма.УчитыватьВТТНКачествоОтПоставщика;
	Элементы.СорностьПоставщика.Видимость   = Форма.УчитыватьВТТНКачествоОтПоставщика;
	Элементы.ВремяПрибытия.Доступность 		= Форма.РедактироватьВремяВъездаТТН;
	Элементы.Въезд.Доступность              = Форма.РедактироватьВремяВъездаТТН;
	
КонецПроцедуры

&НаСервере
Процедура УправлениеФормойНаСервере()
	
	ИНАГРО_ЭлеваторЗаполнениеДокументов.ЗаполнитьДополнительныеРеквизиты(ЭтаФорма);	
	
	УправлениеФормой(ЭтаФорма);
	
	УправлениеПоследовательностьюВводаВеса();
				
КонецПроцедуры 

&НаСервере
Процедура УстановитьПараметрыВыбораВидОперации()
	
	МассивВидовОпераций = Документы.ИНАГРО_ТТНВвоз.ПолучитьФиксированныйМассивВидовОпераций();
	
	ПараметрМассивВидовОпераций = Новый ПараметрВыбора("Отбор.Ссылка", МассивВидовОпераций);
	
	НовыйМассив = Новый Массив();
	НовыйМассив.Добавить(ПараметрМассивВидовОпераций);
	НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);
	
	Элементы.ВидОперации.ПараметрыВыбора = НовыеПараметры;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗаголовокФормы()
	
	ОбъектФормы = ЭтаФорма.Объект;

	ТекстЗаголовка = НСтр("ru='Товарно-транспортная накладная (ввоз)';uk='Товарно-транспортна накладна (ввезення)'");
	
	Если ЗначениеЗаполнено(ОбъектФормы.Ссылка) Тогда
		ТекстЗаголовка = ТекстЗаголовка + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru=' %1 от %2';uk=' %1 від %2'"), ОбъектФормы.Номер, ОбъектФормы.Дата);
	Иначе
		ТекстЗаголовка = ТекстЗаголовка + НСтр("ru=' (создание)';uk=' (створення)'");
	КонецЕсли;
	
	ЭтаФорма.Заголовок = ТекстЗаголовка + " (" + Строка(ОбъектФормы.ВидОперации) + ")";

КонецПроцедуры

&НаСервере
Процедура УстановитьСостояниеДокумента()
	
	СостояниеДокумента = ОбщегоНазначенияБП.СостояниеДокумента(Объект);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьТипыДанныхРеквизитов()
	
	// ПолеТок
	
	Если ВестиСправочникПолей Тогда 		
		
		ТипДанных = "СправочникСсылка.ИНАГРО_Поля";

		Элементы.ПолеТок.КнопкаВыпадающегоСписка         = Неопределено;
		Элементы.ПолеТок.КнопкаВыбора                    = Неопределено;
		Элементы.ПолеТок.КнопкаОчистки                   = Неопределено;
		Элементы.ПолеТок.КнопкаСоздания                  = Неопределено;
		Элементы.ПолеТок.ИсторияВыбораПриВводе           = ИсторияВыбораПриВводе.Авто;
		
	Иначе
		
		ТипДанных = "Строка";

		Элементы.ПолеТок.КнопкаВыпадающегоСписка         = Ложь;
		Элементы.ПолеТок.КнопкаВыбора                    = Ложь;
		Элементы.ПолеТок.КнопкаОчистки                   = Истина;
		Элементы.ПолеТок.КнопкаСоздания                  = Ложь;
		Элементы.ПолеТок.ИсторияВыбораПриВводе           = ИсторияВыбораПриВводе.НеИспользовать;

	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.ПолеТок) Тогда			
		Элементы.ПолеТок.ОграничениеТипа         = Новый ОписаниеТипов(ТипДанных);
		Элементы.ПолеТок.ВыбиратьТип             = Ложь;
	КонецЕсли; 	
		
	// Водитель 
	
	Если ВестиСправочникВодителей Тогда
		
		ТипДанных = "СправочникСсылка.ИНАГРО_Водители";

		Элементы.Водитель.КнопкаВыпадающегоСписка        = Неопределено;
		Элементы.Водитель.КнопкаВыбора                   = Неопределено;
		Элементы.Водитель.КнопкаОчистки                  = Неопределено;
		Элементы.Водитель.КнопкаСоздания                 = Неопределено;
		Элементы.Водитель.ИсторияВыбораПриВводе          = ИсторияВыбораПриВводе.Авто;

						
	Иначе
		
		ТипДанных = "Строка";

		Элементы.Водитель.КнопкаВыпадающегоСписка        = Ложь;
		Элементы.Водитель.КнопкаВыбора                   = Ложь;
		Элементы.Водитель.КнопкаОчистки                  = Истина;
		Элементы.Водитель.КнопкаСоздания                 = Ложь;
		Элементы.Водитель.ИсторияВыбораПриВводе          = ИсторияВыбораПриВводе.НеИспользовать;
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Водитель) Тогда
		Элементы.Водитель.ОграничениеТипа        = Новый ОписаниеТипов(ТипДанных);					
		Элементы.Водитель.ВыбиратьТип            = Ложь;
	КонецЕсли;

	// Автомобиль
	
	Если ВестиСправочникАвтомобилей Тогда
		
		ТипДанных = "СправочникСсылка.ИНАГРО_ТранспортныеСредства";
		
		Элементы.НомерТранспорта.КнопкаВыпадающегоСписка = Неопределено;
		Элементы.НомерТранспорта.КнопкаВыбора            = Неопределено;		
		Элементы.НомерТранспорта.КнопкаОчистки           = Неопределено;
		Элементы.НомерТранспорта.КнопкаСоздания          = Неопределено;
		Элементы.НомерТранспорта.ИсторияВыбораПриВводе   = ИсторияВыбораПриВводе.Авто;
		
		Элементы.НомерПрицепа.КнопкаВыпадающегоСписка    = Неопределено;
		Элементы.НомерПрицепа.КнопкаВыбора               = Неопределено;
		Элементы.НомерПрицепа.КнопкаОчистки              = Неопределено;						
		Элементы.НомерПрицепа.КнопкаСоздания             = Неопределено;
		Элементы.НомерПрицепа.ИсторияВыбораПриВводе      = ИсторияВыбораПриВводе.Авто;
		
	Иначе
		
		ТипДанных = "Строка";
		
		Элементы.НомерТранспорта.КнопкаВыпадающегоСписка = Ложь;
		Элементы.НомерТранспорта.КнопкаВыбора            = Ложь;		
		Элементы.НомерТранспорта.КнопкаОчистки           = Истина;
		Элементы.НомерТранспорта.КнопкаСоздания          = Ложь;
		Элементы.НомерТранспорта.ИсторияВыбораПриВводе   = ИсторияВыбораПриВводе.НеИспользовать;
		
		Элементы.НомерПрицепа.КнопкаВыпадающегоСписка    = Ложь;
		Элементы.НомерПрицепа.КнопкаВыбора               = Ложь;
		Элементы.НомерПрицепа.КнопкаОчистки              = Истина;						
		Элементы.НомерПрицепа.КнопкаСоздания             = Ложь;
		Элементы.НомерПрицепа.ИсторияВыбораПриВводе      = ИсторияВыбораПриВводе.НеИспользовать; 		
				
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(Объект.НомерТранспорта) Тогда
		Элементы.НомерТранспорта.ОграничениеТипа = Новый ОписаниеТипов(ТипДанных);				
		Элементы.НомерТранспорта.ВыбиратьТип     = Ложь;			 				
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.НомерПрицепа) Тогда				
		Элементы.НомерПрицепа.ОграничениеТипа    = Новый ОписаниеТипов(ТипДанных);
		Элементы.НомерПрицепа.ВыбиратьТип        = Ложь					
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура УправлениеПоследовательностьюВводаВеса()
	
	Если НЕ Объект.Проведен Тогда
		
		Если КонтролироватьПоследовательностьВводаВеса Тогда			
			
			//// Авто
			ДоступностьКнопкиF5     =  Объект.ВесБрутто = 0;
			ДоступностьКнопкиF6     = (Объект.ВесБрутто <> 0 И Объект.ВесТары = 0 И НЕ ЗначениеЗаполнено(Объект.НомерПрицепа))
								  ИЛИ (Объект.ВесБрутто <> 0 И Объект.ВесТары = 0 И Объект.ВесТары1 = 0 И ЗначениеЗаполнено(Объект.НомерПрицепа));
			//// Прицеп						  
			ДоступностьКнопкиF7     =  Объект.ВесБрутто <> 0 И Объект.ВесБрутто1 = 0 И Объект.ВесТары = 0 И Объект.ВесТары1 = 0 И ЗначениеЗаполнено(Объект.НомерПрицепа);
			ДоступностьКнопкиF8     =  Объект.ВесБрутто <> 0 И Объект.ВесТары <> 0 И Объект.ВесБрутто1 <> 0;
			
			НедоступностьВсехКнопок = (Объект.ВесБрутто <> 0 И Объект.ВесТары <> 0 И Объект.ВесБрутто1 <> 0 И Объект.ВесТары1 <> 0)
								  ИЛИ (Объект.ВесБрутто <> 0 И Объект.ВесТары <> 0 И НЕ ЗначениеЗаполнено(Объект.НомерПрицепа));
			
			Элементы.КнопкаF5.Доступность = ДоступностьКнопкиF5 И НЕ НедоступностьВсехКнопок;
			Элементы.КнопкаF6.Доступность = ДоступностьКнопкиF6 И НЕ НедоступностьВсехКнопок;
			Элементы.КнопкаF7.Доступность = ДоступностьКнопкиF7 И НЕ НедоступностьВсехКнопок;
			Элементы.КнопкаF8.Доступность = ДоступностьКнопкиF8 И НЕ НедоступностьВсехКнопок;
			
			Если ИНАГРО_ЭлеваторУправлениеПользователями.ЗапретитьВручнуюИзменятьВесТТН(ТекущийПользователь) Тогда
				Элементы.ВесБрутто.Доступность  = Ложь;			
				Элементы.ВесБрутто1.Доступность = Ложь;
				Элементы.ВесТары.Доступность    = Ложь;
				Элементы.ВесТары1.Доступность   = Ложь;
			Иначе
				Элементы.ВесБрутто.Доступность  = Элементы.КнопкаF5.Доступность;			
				Элементы.ВесБрутто1.Доступность = Элементы.КнопкаF7.Доступность;
				Элементы.ВесТары.Доступность    = Элементы.КнопкаF6.Доступность;
				Элементы.ВесТары1.Доступность   = Элементы.КнопкаF8.Доступность;
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе	
		Элементы.ВесБрутто.Доступность       = Объект.Проведен;
		Элементы.ВесБрутто1.Доступность      = Объект.Проведен;
		Элементы.ВесТары.Доступность         = Объект.Проведен;
		Элементы.ВесТары1.Доступность        = Объект.Проведен;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершениеПолученияВеса(Результат, Параметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		Если ИмяНажатойКомандыПолученияВеса = "КнопкаF5" Тогда			
			Объект.ВесБрутто = Результат;
			ЗавершениеПолученияВесаНаСервере();			
		ИначеЕсли ИмяНажатойКомандыПолученияВеса = "КнопкаF6" Тогда			
			Объект.ВесТары = Результат;
			ЗавершениеПолученияВесаНаСервере();			
		ИначеЕсли ИмяНажатойКомандыПолученияВеса = "КнопкаF7" Тогда			
			Объект.ВесБрутто1 = Результат;
			ЗавершениеПолученияВесаНаСервере();			
		ИначеЕсли ИмяНажатойКомандыПолученияВеса = "КнопкаF8" Тогда			
			Объект.ВесТары1 = Результат;
			ЗавершениеПолученияВесаНаСервере();			
		КонецЕсли;	
	КонецЕсли;
	
	РасчетВеса();
	УправлениеПоследовательностьюВводаВеса();
	
	ИмяНажатойКомандыПолученияВеса = Неопределено;
	
КонецПроцедуры

&НаСервере
Процедура ЗавершениеПолученияВесаНаСервере()
	
	Если ИмяНажатойКомандыПолученияВеса = "КнопкаF5" Тогда
		
		ИНАГРО_КонтрольПроцессов.КонтрольИзмененияВесаТТН(Объект, Объект.ВесБруттоКонтроль, Объект.ВесБрутто);
		
	ИначеЕсли ИмяНажатойКомандыПолученияВеса = "КнопкаF6" Тогда
		
		Если НЕ ИНАГРО_КонтрольПроцессов.ПроверитьОтрицательноеНетто(Объект.ВесБрутто, Объект.ВесТары) Тогда 
			Объект.ВесТары = 0;
			Возврат;
		КонецЕсли;
		
		ИНАГРО_КонтрольПроцессов.КонтрольИзмененияВесаТТН(Объект, Объект.ВесТарыКонтроль, Объект.ВесТары);
		ИНАГРО_КонтрольПроцессов.КонтрольРасхожденияВесаТары(Объект, Ложь);		 
		
	ИначеЕсли ИмяНажатойКомандыПолученияВеса = "КнопкаF7" Тогда
		
		ИНАГРО_КонтрольПроцессов.КонтрольИзмененияВесаТТН(Объект, Объект.ВесБрутто1Контроль, Объект.ВесБрутто1);
		
	ИначеЕсли ИмяНажатойКомандыПолученияВеса = "КнопкаF8" Тогда
		
		Если НЕ ИНАГРО_КонтрольПроцессов.ПроверитьОтрицательноеНетто(Объект.ВесБрутто1, Объект.ВесТары1) Тогда 
			Объект.ВесТары1 = 0;
			Возврат;
		КонецЕсли;
		
		ИНАГРО_КонтрольПроцессов.КонтрольИзмененияВесаТТН(Объект, Объект.ВесТары1Контроль, Объект.ВесТары1);
		ИНАГРО_КонтрольПроцессов.КонтрольРасхожденияВесаТары(Объект, Ложь);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура РасчетВеса(СтрокаТабличнойЧасти = Неопределено)
	 	
	Объект.ВесНетто  = Объект.ВесБрутто - Объект.ВесТары;
	Объект.ВесНетто1 = Объект.ВесБрутто1 - Объект.ВесТары1;
	
	Если Объект.ВидОперации = Перечисления.ИНАГРО_ВидыОперацийТТНВвоз.ВвозФасованного Тогда
		
		Если СтрокаТабличнойЧасти <> Неопределено И ЗначениеЗаполнено(СтрокаТабличнойЧасти.ВидФасовки) Тогда			 	
			СтрокаТабличнойЧасти.Вес = СтрокаТабличнойЧасти.Количество * СтрокаТабличнойЧасти.ВидФасовки.Вес;		
		Иначе			
			Объект.Вес = Объект.СписокНоменклатуры.Итог("Вес");
			Объект.ЗачетныйВес = Объект.Вес;
			Возврат;
		КонецЕсли;
		
		РасчетЗачетногоВеса();

	ИначеЕсли Объект.ВидОперации = Перечисления.ИНАГРО_ВидыОперацийТТНВвоз.СборУрожая Тогда
		
		Если СтрокаТабличнойЧасти <> Неопределено Тогда
			СтрокаТабличнойЧасти.Вес = СтрокаТабличнойЧасти.Брутто - СтрокаТабличнойЧасти.Тара;
		Иначе	
			Объект.Вес = Объект.СписокПолей.Итог("Вес");
			Объект.ЗачетныйВес = Объект.Вес;
		КонецЕсли;		
		
	Иначе // НЕ Объект.ВидОперации = Перечисления.ИНАГРО_ВидыОперацийТТНВвоз.СборУрожая Тогда
		
		Объект.Вес = Объект.ВесНетто + Объект.ВесНетто1;
		
		РасчетЗачетногоВеса();
		
	КонецЕсли;	
		
КонецПроцедуры

&НаСервере
Процедура РасчетЗачетногоВеса()
		
	ПараметрыДляРасчетаЗачетногоВеса = ПолучитьПараметрыДляРасчетаЗачетногоВеса();

	Объект.ЗачетныйВес = ИНАГРО_Элеватор.ЗачетныйВесПриПроведении(ПараметрыДляРасчетаЗачетногоВеса);
	
КонецПроцедуры

&НаКлиенте
Процедура РасчетВесаДляСтрокиТабличнойЧасти()
	
	Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаУрожай Тогда
		
		ТекущиеДанные = Элементы.СписокПолей.ТекущиеДанные;
		
		ДанныеСтрокиТаблицы = Новый Структура("Брутто, Тара, Вес");
		
	ИначеЕсли Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаСписокКультур Тогда
		
		ТекущиеДанные = Элементы.СписокНоменклатуры.ТекущиеДанные;
		
		ДанныеСтрокиТаблицы = Новый Структура("ВидФасовки, Количество, Вес");
		
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, ТекущиеДанные);
	
	РасчетВеса(ДанныеСтрокиТаблицы);
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтрокиТаблицы);

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСчетаУчетаВТабличнойЧасти()
	
	Если Объект.ОтражатьВБухгалтерскомУчете Тогда
		
		СчетаУчета = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаУчетаНоменклатуры(Объект.Организация, Объект.Номенклатура, Объект.Склад);		
		
		Если СчетаУчета = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		Объект.СчетУчетаБУ = СчетаУчета.СчетУчетаДавСырья
		
	Иначе
		
		Объект.СчетУчетаБУ = ПланыСчетов.Хозрасчетный.ПустаяСсылка();		
		
	КонецЕсли;	
	
	Если Объект.СчетУчетаВТаблице И Объект.СписокНоменклатуры.Количество() > 0 Тогда			
		Документы.ИНАГРО_ТТНВвоз.ЗаполнитьСчетаУчетаВТабличнойЧасти(Объект, "СписокНоменклатуры", СобственноеПодразделение);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПерезаполнитьРевизиты()
	
	Если Объект.ВидОперации = Перечисления.ИНАГРО_ВидыОперацийТТНВвоз.ВвозФасованного Тогда
		
		Если СобственноеПодразделение Тогда			
			Объект.ОтражатьВБухгалтерскомУчете = Ложь;
		КонецЕсли;
		
		Объект.СписокНоменклатуры.Очистить();
		
	Иначе 
		
		Объект.ОтражатьВБухгалтерскомУчете = Ложь;
		Объект.СчетУчетаВТаблице           = Ложь;
		
		Объект.СписокНоменклатуры.Очистить();
		
		РасчетВеса();
		
	КонецЕсли;		
	
КонецПроцедуры

&НаСервере
Функция ВключенаВРеестр()
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	РеестрТТН.Ссылка
		|ИЗ
		|	Документ.ИНАГРО_РеестрТТНВвоз КАК РеестрТТН
		|ГДЕ
		|	РеестрТТН.СписокТТН.ТТН.Дата МЕЖДУ &ДатаС И &ДатаПо
		|	И РеестрТТН.СписокТТН.ТТН = &ТекДок";
	
	Запрос.УстановитьПараметр("ДатаС",  НачалоДня(Объект.Дата));
	Запрос.УстановитьПараметр("ДатаПо", КонецДня(Объект.Дата));
	Запрос.УстановитьПараметр("ТекДок", Объект.Ссылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Количество() > 0 Тогда
		Возврат Истина;
	Иначе 
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция ПолучитьПараметрыДляДоговоров()

	ПараметрыОтбора = Новый Структура("ВидХранения, Урожай");
	ЗаполнитьЗначенияСвойств(ПараметрыОтбора, Объект);

	Возврат ПараметрыОтбора;

КонецФункции

&НаКлиенте
Функция ПолучитьПараметрыДляПроверкиЗаполнения()
	
	ПараметрыДляПроверкиЗаполнения = Новый Структура(
		"Склад, ВидХранения, Урожай, 
		|Номенклатура");
	ЗаполнитьЗначенияСвойств(ПараметрыДляПроверкиЗаполнения, Объект);

	Возврат ПараметрыДляПроверкиЗаполнения; 

КонецФункции

&НаСервере
Функция ПолучитьПараметрыДляРасчетаЗачетногоВеса()
	
	ПараметрыДляРасчетаЗачетногоВеса = Новый Структура(
		"Ссылка, Дата, Организация,
		|Владелец, ДоговорКонтрагента, Номенклатура,
		|Склад, Влажность, СорнаяПримесь,
		|ФизическийВес, ЗачетныйВес     
		|");
	ЗаполнитьЗначенияСвойств(ПараметрыДляРасчетаЗачетногоВеса, Объект);
	ПараметрыДляРасчетаЗачетногоВеса.Вставить("ФизическийВес", Объект.Вес); 

	Возврат ПараметрыДляРасчетаЗачетногоВеса;

КонецФункции

&НаСервере
Функция ПолучитьСписокЧастей()
	
	Возврат ОбщегоНазначения.ВыгрузитьКолонку(Объект.СписокПолей, "Часть");
	
КонецФункции

#КонецОбласти  

#Область СлужебныеПроцедурыИФункцииБСП

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
		
	Если ТипЗнч(Команда) = Тип("КомандаФормы") Тогда
		
		ИмяКоманды      = Команда.Имя;
		АдресНастроек   = ЭтотОбъект.ПараметрыПодключаемыхКоманд.АдресТаблицыКоманд;
		ОписаниеКоманды = ПодключаемыеКомандыКлиентПовтИсп.ОписаниеКоманды(ИмяКоманды, АдресНастроек);
		
		Если ОписаниеКоманды.Идентификатор = "Ф1_СГ" Тогда
			
			ДополнительныеПараметры = Новый Структура;
			ДополнительныеПараметры.Вставить("Команда",              Команда);
			ДополнительныеПараметры.Вставить("ИдентификаторКоманды", ОписаниеКоманды.Идентификатор);
			
			Оповещение = Новый ОписаниеОповещения("ВводЧислаЗавершение", ЭтотОбъект, ДополнительныеПараметры); 
			ПоказатьВводЧисла(Оповещение, 0, Нстр("ru='Введите количество экземпляров';uk='Введіть кількість екземплярів'"), 15, 0);
			
		Иначе
			ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);  			
		КонецЕсли; 
		
	Иначе
		ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте 
Процедура ВводЧислаЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт 
	
	Если РезультатЗакрытия <> Неопределено Тогда
		ЗаписатьВыбранноеКоличество(РезультатЗакрытия, ДополнительныеПараметры.ИдентификаторКоманды);		
		ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, ДополнительныеПараметры.Команда, Объект);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаписатьВыбранноеКоличество(РезультатЗакрытия, ИдентификаторКоманды)
	
	Документы.ИНАГРО_ТТНВвоз.ЗаписатьВыбранноеКоличество(РезультатЗакрытия, ИдентификаторКоманды);
	
КонецПроцедуры

#КонецОбласти