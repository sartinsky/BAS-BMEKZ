#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПроцедурыИФункцииПечати

Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	// Краткая
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "Краткая";
	КомандаПечати.Представление = НСтр("ru='Краткая';uk='Стисла'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечати";
	КомандаПечати.СписокФорм    = "ФормаДокументаОбщая,ФормаСписка";
	ПодключаемыеКоманды.ДобавитьУсловиеВидимостиКоманды(КомандаПечати, "ВидОперации",
		Перечисления.ИНАГРО_ВидыОперацийТТНВвоз.СборУрожая, ВидСравненияКомпоновкиДанных.НеРавно);
	
	// КраткаяСборУрожая
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "КраткаяСборУрожая";
	КомандаПечати.Представление = НСтр("ru='Краткая (сбор урожая)';uk='Стисла (сбір урожаю)'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечати";
	КомандаПечати.СписокФорм    = "ФормаДокументаОбщая,ФормаСписка";
	ПодключаемыеКоманды.ДобавитьУсловиеВидимостиКоманды(КомандаПечати, "ВидОперации",
		Перечисления.ИНАГРО_ВидыОперацийТТНВвоз.СборУрожая);

	// Ф1-СГ
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "Ф1_СГ";
	КомандаПечати.Представление = НСтр("ru='Ф1-СГ';uk='Ф1-СГ'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечати";
	КомандаПечати.СписокФорм    = "ФормаДокументаОбщая,ФормаСписка";
	
	// АктНаРазницу
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "АктНаРазницу";
	КомандаПечати.Представление = НСтр("ru='Акт на разницу';uk='Акт на різницю'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечати";
	КомандаПечати.СписокФорм    = "ФормаДокументаОбщая,ФормаСписка";
	
	// АктНаРазницуНовый
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "АктНаРазницуНовый";
	КомандаПечати.Представление = НСтр("ru='Акт на разницу новый';uk='Акт на різницю новий'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечати";
	КомандаПечати.СписокФорм    = "ФормаДокументаОбщая,ФормаСписка";
	
	// РегистрационныйШтамп
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "РегистрационныйШтамп";
	КомандаПечати.Представление = НСтр("ru='Регистрационный штамп';uk='Реєстраційний штамп'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечати";
	КомандаПечати.СписокФорм    = "ФормаДокументаОбщая,ФормаСписка";

	// Реестр документов
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "Реестр";
	КомандаПечати.Представление = НСтр("ru='Реестр документов';uk='Реєстр документів'");
	КомандаПечати.ЗаголовокФормы= НСтр("ru='Реестр документов ""Товарно-транспортная накладная (ввоз)""';uk='Реєстр документів ""Товарно-транспортна накладна (ввезення)""'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечатиРеестраДокументов";
	КомандаПечати.СписокФорм    = "ФормаСписка";
	КомандаПечати.Порядок       = 100;
	
КонецПроцедуры

Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм,ОбъектыПечати, ПараметрыВывода) Экспорт
	
	// Устанавливаем признак доступности печати покомплектно.
	ПараметрыВывода.ДоступнаПечатьПоКомплектно = Истина;
	
	// Проверяем, нужно ли для макета Краткая формировать табличный документ.
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "Краткая") Тогда
		
		// Формируем табличный документ и добавляем его в коллекцию печатных форм.
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "Краткая", НСтр("ru='Краткая';uk='Стисла'"), 
		ПечатьКраткая(МассивОбъектов, ОбъектыПечати, ПараметрыВывода), ,"Документ.ИНАГРО_ТТНВвоз.ПФ_MXL_Краткая", , Истина);
		
	КонецЕсли;
	
	// Проверяем, нужно ли для макета Краткая сбор урожая формировать табличный документ.
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "КраткаяСборУрожая") Тогда
		
		// Формируем табличный документ и добавляем его в коллекцию печатных форм.
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "КраткаяСборУрожая", НСтр("ru='Краткая (сбор урожая)';uk='Стисла (сбір урожаю)'"), 
		ПечатьДокументаСборУрожая(МассивОбъектов, ОбъектыПечати, ПараметрыВывода), ,"Документ.ИНАГРО_ТТНВвоз.ПФ_MXL_КраткаяСборУрожая", , Истина);
		
	КонецЕсли;
	
	// Проверяем, нужно ли для макета Ф1_СГ_ формировать табличный документ.
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "Ф1_СГ") Тогда
		
		// Формируем табличный документ и добавляем его в коллекцию печатных форм.
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "Ф1_СГ", НСтр("ru='Ф1-СГ';uk='Ф1-СГ'"), 
		ПечатьФ1_СГ(МассивОбъектов, ОбъектыПечати, ПараметрыВывода), ,"Документ.ИНАГРО_ТТНВвоз.ПФ_MXL_Ф1_СГ", , Истина);
		
	КонецЕсли;
	
	// Проверяем, нужно ли для макета Акт на разницу формировать табличный документ.
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "АктНаРазницу") Тогда
		
		// Формируем табличный документ и добавляем его в коллекцию печатных форм.
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "АктНаРазницу", НСтр("ru='Акт на разницу';uk='Акт на різницю'"), 
		ПечатьАктаНаРазницу(МассивОбъектов, ОбъектыПечати, ПараметрыВывода, "ПФ_MXL_АктНаРазницу"), ,"Документ.ИНАГРО_ТТНВвоз.ПФ_MXL_АктНаРазницу", , Истина);
		
	КонецЕсли;
	
	// Проверяем, нужно ли для макета АктНаРазницуНовый_ формировать табличный документ.
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "АктНаРазницуНовый") Тогда
		
		// Формируем табличный документ и добавляем его в коллекцию печатных форм.
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "АктНаРазницуНовый", НСтр("ru='Акт на разницу новый';uk='Акт на різницю новий'"), 
		ПечатьАктаНаРазницу(МассивОбъектов, ОбъектыПечати, ПараметрыВывода, "ПФ_MXL_АктНаРазницуНовый"), ,"Документ.ИНАГРО_ТТНВвоз.ПФ_MXL_АктНаРазницуНовый", , Истина);
		
	КонецЕсли;
	
	// Проверяем, нужно ли для макета РегистрационныйШтамп_ формировать табличный документ.
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "РегистрационныйШтамп") Тогда
		
		// Формируем табличный документ и добавляем его в коллекцию печатных форм.
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "РегистрационныйШтамп", НСтр("ru='Регистрационный штамп';uk='Реєстраційний штамп'"), 
		ПечатьРегистрационныйШтамп(МассивОбъектов, ОбъектыПечати, ПараметрыВывода), ,"Документ.ИНАГРО_ТТНВвоз.ПФ_MXL_РегистрационныйШтамп", , Истина);
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПечатьКраткая(МассивОбъектов, ОбъектыПечати, ПараметрыВывода)
	
	ТабДокумент = Новый ТабличныйДокумент;
	
	Макет = ПолучитьМакет("ПФ_MXL_Краткая");
	
	КодЯзыкаПечать = ПараметрыВывода.КодЯзыкаДляМногоязычныхПечатныхФорм;        
	Макет.КодЯзыкаМакета = КодЯзыкаПечать;
	
	Для каждого ДокументСсылка Из МассивОбъектов Цикл
		
		Шапка = Макет.ПолучитьОбласть("Шапка");
		Строка = Макет.ПолучитьОбласть("Строка");
		СтрокаДляНесколькихТМЦ = Макет.ПолучитьОбласть("СтрокаДляНесколькихТМЦ");
		Итог= Макет.ПолучитьОбласть("Итог");
		
		Шапка.Параметры.Организация = ДокументСсылка.Организация.НаименованиеПолное;
		Шапка.Параметры.ТекДата = ТекущаяДата();
		Шапка.Параметры.НомерДок = ДокументСсылка.Номер;
		ВремяНачалаДня = ИНАГРО_Элеватор.ПолучитьПараметрУчетаЭлеватора(ДокументСсылка.Дата, "ВремяНачалаДня", 0);
		Если ВремяНачалаДня <> 0 Тогда
			Шапка.Параметры.Дата = Формат(ДокументСсылка.ВремяВыбытия, "ДФ='дд ММММ гггг';Л="+ КодЯзыкаПечать);
		Иначе	
			Шапка.Параметры.Дата = Формат(ДокументСсылка.Дата, "ДФ='дд ММММ гггг';Л="+ КодЯзыкаПечать);
		КонецЕсли;
		Шапка.Параметры.Поставщик = ДокументСсылка.Поставщик;
		ИНАГРО_Элеватор.ПолучитьНаименованияКонтрагента(Шапка.Параметры.Поставщик);
		Шапка.Параметры.Владелец = ДокументСсылка.Владелец;
		ИНАГРО_Элеватор.ПолучитьНаименованияКонтрагента(Шапка.Параметры.Владелец);
		Шапка.Параметры.Откуда = ДокументСсылка.УдалитьОткуда;
		Шапка.Параметры.Склад = ДокументСсылка.Склад;
		Шапка.Параметры.Силос = ДокументСсылка.Силос;
		Шапка.Параметры.СтепеньВлажности = ДокументСсылка.СтепеньВлажности;
		Шапка.Параметры.СтепеньЗагрязнения = ДокументСсылка.СтепеньЗагрязнения;
		Шапка.Параметры.СтепеньЗараженности = ДокументСсылка.СтепеньЗараженности;
		Шапка.Параметры.ВидХранения = ДокументСсылка.ВидХранения;
		Шапка.Параметры.Автотранспорт = ?(ТипЗнч(ДокументСсылка.Водитель) = ТипЗнч(Справочники.ИНАГРО_Водители.ПустаяСсылка()), ДокументСсылка.Водитель.УдалитьТранспорт, "");
		Шапка.Параметры.Транспорт = ДокументСсылка.НомерТранспорта;
		Шапка.Параметры.Водитель = ДокументСсылка.Водитель;
		ТабДокумент.Вывести(Шапка);
		
		Если ДокументСсылка.ВидОперации = Перечисления.ИНАГРО_ВидыОперацийТТНВвоз.ВвозФасованного Тогда
			// Если несколько ТМЦ
			Для Каждого СтрокаТЧ Из ДокументСсылка.СписокНоменклатуры Цикл
				СтрокаДляНесколькихТМЦ.Параметры.ном = СтрокаТЧ.НомерСтроки;
				СтрокаДляНесколькихТМЦ.Параметры.Номенклатура = СтрокаТЧ.Номенклатура;
				СтрокаДляНесколькихТМЦ.Параметры.ВесНетто = СтрокаТЧ.Вес;
				ТабДокумент.Вывести(СтрокаДляНесколькихТМЦ);
			КонецЦикла;
		Иначе
			Строка.Параметры.Номенклатура = ДокументСсылка.Номенклатура;
			Строка.Параметры.ВесБрутто = ДокументСсылка.ВесБрутто;
			Строка.Параметры.ВесНетто = ДокументСсылка.ВесНетто;
			Строка.Параметры.ВесТары = ДокументСсылка.ВесТары;
			Строка.Параметры.ВесБрутто1 = ДокументСсылка.ВесБрутто1;
			Строка.Параметры.ВесНетто1 = ДокументСсылка.ВесНетто1;
			Строка.Параметры.ВесТары1 = ДокументСсылка.ВесТары1;	
			ТабДокумент.Вывести(Строка);
		КонецЕсли;
		
		Итог.Параметры.Вес = ДокументСсылка.Вес;
		//Язык = "";
		//Если КодЛокализации() = "uk_UA" Тогда
		//	Язык = "uk";	
		//КонецЕсли; 
		Итог.Параметры.ВесПроп = ИНАГРО_Элеватор.ВернутьВесПрописью(КодЯзыкаПечать, ДокументСсылка.Вес);
		ТабДокумент.Вывести(Итог);
	КонецЦикла;
	
	ТабДокумент.АвтоМасштаб = Истина;
	
	Возврат ТабДокумент;
	
КонецФункции

Функция ПечатьДокументаСборУрожая(МассивОбъектов, ОбъектыПечати, ПараметрыВывода)
	
	ТабДокумент = Новый ТабличныйДокумент;
	
	Макет = ПолучитьМакет("ПФ_MXL_КраткаяСборУрожая");
	
	КодЯзыкаПечать = ПараметрыВывода.КодЯзыкаДляМногоязычныхПечатныхФорм;        
	Макет.КодЯзыкаМакета = КодЯзыкаПечать;
	
	Для каждого ДокументСсылка Из МассивОбъектов Цикл
		
		Шапка = Макет.ПолучитьОбласть("Шапка");
		
		Шапка.Параметры.Организация = ДокументСсылка.Организация.НаименованиеПолное;
		Шапка.Параметры.ТекДата = ТекущаяДата();
		Шапка.Параметры.НомерДок = ДокументСсылка.Номер;
		Шапка.Параметры.ДатаДок = Формат(ДокументСсылка.Дата, "ДФ='дд ММММ гггг';Л="+ Локализация.ОпределитьКодЯзыкаДляФормат(КодЯзыкаПечать));
		Шапка.Параметры.Поставщик = ДокументСсылка.Поставщик;
		ИНАГРО_Элеватор.ПолучитьНаименованияКонтрагента(Шапка.Параметры.Поставщик);
		Шапка.Параметры.Владелец = ДокументСсылка.Владелец;
		ИНАГРО_Элеватор.ПолучитьНаименованияКонтрагента(Шапка.Параметры.Владелец);
		Шапка.Параметры.Откуда = ДокументСсылка.УдалитьОткуда;
		ТабДокумент.Вывести(Шапка);
		
		ОблСтрока = Макет.ПолучитьОбласть("Строка");
		Для Каждого СтрТаб Из ДокументСсылка.СписокПолей Цикл
			ОблСтрока.Параметры.Подразделение1 = СтрТаб.Поле;
			ОблСтрока.Параметры.ТалонКомбайнера1 = СтрТаб.Талон;
			ОблСтрока.Параметры.Вес1 = СтрТаб.Вес;
			ТабДокумент.Вывести(ОблСтрока);
		КонецЦикла;
		
		Шапка = Макет.ПолучитьОбласть("Шапка2");
		Шапка.Параметры.Склад = ДокументСсылка.Склад;
		Шапка.Параметры.ВидХранения = ДокументСсылка.ВидХранения;
		Шапка.Параметры.Автотранспорт = ?(ТипЗнч(ДокументСсылка.Водитель) = ТипЗнч(Справочники.ИНАГРО_Водители.ПустаяСсылка()), ДокументСсылка.Водитель.УдалитьТранспорт, "");
		Шапка.Параметры.Транспорт = ДокументСсылка.НомерТранспорта;
		Шапка.Параметры.Водитель = ДокументСсылка.Водитель;
		Шапка.Параметры.Номенклатура = ДокументСсылка.Номенклатура;
		Шапка.Параметры.ВесБрутто = ДокументСсылка.ВесБрутто;
		Шапка.Параметры.ВесНетто = ДокументСсылка.ВесНетто;
		Шапка.Параметры.ВесТары = ДокументСсылка.ВесТары;
		Шапка.Параметры.ВесБрутто1 = ДокументСсылка.ВесБрутто1;
		Шапка.Параметры.ВесНетто1 = ДокументСсылка.ВесНетто1;
		Шапка.Параметры.ВесТары1 = ДокументСсылка.ВесТары1;
		Шапка.Параметры.Влажность = ДокументСсылка.Влажность;
		Шапка.Параметры.Вес = ДокументСсылка.Вес;
		Шапка.Параметры.ВесПроп = ИНАГРО_Элеватор.ВернутьВесПрописью(КодЯзыкаПечать, ДокументСсылка.Вес);
		ТабДокумент.Вывести(Шапка);
		
	КонецЦикла;
	
	ТабДокумент.АвтоМасштаб = Истина;
	
	Возврат ТабДокумент;
	
КонецФункции

Функция ПечатьФ1_СГ(МассивОбъектов, ОбъектыПечати, ПараметрыВывода)
	
	ТабДокумент = Новый ТабличныйДокумент;
	
	Макет = ПолучитьМакет("ПФ_MXL_Ф1_СГ");
	
	Для каждого ДокументСсылка Из МассивОбъектов Цикл
				
		КодЯзыкаПечать = ПараметрыВывода.КодЯзыкаДляМногоязычныхПечатныхФорм;
		Макет.КодЯзыкаМакета = КодЯзыкаПечать;
		
		Шапка = Макет.ПолучитьОбласть("Шапка|Лист");
		
		Шапка.Параметры.Организация = ДокументСсылка.Организация.НаименованиеПолное;
		Шапка.Параметры.НомерДок = ДокументСсылка.Номер;
		ВремяНачалаДня = ИНАГРО_Элеватор.ПолучитьПараметрУчетаЭлеватора(ДокументСсылка.Дата, "ВремяНачалаДня", 0);
		Если ВремяНачалаДня <> 0 Тогда
			Шапка.Параметры.ДатаДок = Формат(ДокументСсылка.ВремяВыбытия, "ДФ='дд ММММ гггг';Л="+ Локализация.ОпределитьКодЯзыкаДляФормат(КодЯзыкаПечать));
		Иначе
			Шапка.Параметры.ДатаДок = Формат(ДокументСсылка.Дата, "ДФ='дд ММММ гггг';Л="+ Локализация.ОпределитьКодЯзыкаДляФормат(КодЯзыкаПечать));
		КонецЕсли;
		Шапка.Параметры.Поставщик = ДокументСсылка.Поставщик;
		Шапка.Параметры.ПоставщикКод = ДокументСсылка.Поставщик.КодПоЕДРПОУ;
		ИНАГРО_Элеватор.ПолучитьНаименованияКонтрагента(Шапка.Параметры.Поставщик);
		Шапка.Параметры.Владелец = ДокументСсылка.Владелец;
		Шапка.Параметры.ВладелецКод = ДокументСсылка.Владелец.КодПоЕДРПОУ;
		Шапка.Параметры.Автопредприятие = ДокументСсылка.Автопредприятие;
		Шапка.Параметры.АвтопредприятиеКод = ДокументСсылка.Автопредприятие.КодПоЕДРПОУ;
		ИНАГРО_Элеватор.ПолучитьНаименованияКонтрагента(Шапка.Параметры.Владелец);
		Шапка.Параметры.Откуда = ДокументСсылка.ЛабораторныйАнализ.СтанцияОтправления;
		Шапка.Параметры.Склад = ДокументСсылка.Склад;
		Ссылка = ДокументСсылка.Ссылка;
		Если ЗначениеЗаполнено(Ссылка.НомерТранспорта) Тогда 
			Если ТипЗнч(Ссылка.НомерТранспорта) = Тип("Строка") Тогда
				Шапка.Параметры.НомерТранспорта = Ссылка.НомерТранспорта;
			Иначе		
				Шапка.Параметры.НомерТранспорта = Ссылка.НомерТранспорта.Марка + " " + Ссылка.НомерТранспорта;
			КонецЕсли;
		КонецЕсли;
		
		Шапка.Параметры.НомерПрицепа = ДокументСсылка.НомерПрицепа;
		Шапка.Параметры.Водитель = ДокументСсылка.Водитель;
		Шапка.Параметры.Номенклатура = ДокументСсылка.Номенклатура.НаименованиеПолное;
		Шапка.Параметры.НомерПробы = ДокументСсылка.НомерПробы;
		Шапка.Параметры.Влажность = ДокументСсылка.Влажность;
		Шапка.Параметры.СтепеньВлажности = ДокументСсылка.СтепеньВлажности;
		Шапка.Параметры.СтепеньЗагрязнения = ДокументСсылка.СтепеньЗагрязнения;
		Шапка.Параметры.СтепеньЗаражонности = ДокументСсылка.СтепеньЗараженности;	
		Шапка.Параметры.ВесБрутто = ДокументСсылка.ВесБрутто + ДокументСсылка.ВесБрутто1;
		Шапка.Параметры.ВесНетто = ДокументСсылка.ВесНетто + ДокументСсылка.ВесНетто1;
		Шапка.Параметры.ВесТары = ДокументСсылка.ВесТары + ДокументСсылка.ВесТары1;
		Шапка.Параметры.Влажность = ДокументСсылка.Влажность;
		Шапка.Параметры.Получатель = ДокументСсылка.ЛабораторныйАнализ.СтанцияНазначения;
		Шапка.Параметры.ОтпускРазрешил = ДокументСсылка.ОтпускРазрешил;
		
		КвоЭкземпляров = 3;
		 
		СтруктураСохранения = ХранилищеОбщихНастроек.Загрузить("ИНАГРО_ТТНВвоз_Ф1_СГ");	
		Если СтруктураСохранения <> Неопределено Тогда
			КвоЭкземпляров = СтруктураСохранения.ВыбранноеКоличествоФ1_СГ; 
		КонецЕсли;
		
		Ном = 1;
		
		Пока Ном <= КвоЭкземпляров Цикл
			ТабДокумент.Вывести(Шапка);
			Ном = Ном + 1;
			Если Ном <= КвоЭкземпляров Тогда
				ТабДокумент.Присоединить(Шапка);
				Ном = Ном + 1;
			КонецЕсли;
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЦикла;
		
		ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
		ТабДокумент.ИмяПараметровПечати = "ИНАГРО_ТТНВвоз_Ф1_СГ";
	КонецЦикла;
	
	ТабДокумент.АвтоМасштаб = Истина;
	
	Возврат ТабДокумент;
	
КонецФункции // ПечатьДокумента()

Функция ПечатьАктаНаРазницу(МассивОбъектов, ОбъектыПечати, ПараметрыВывода, ИмяМакета)
	
	ТабДокумент = Новый ТабличныйДокумент;
	
	Макет = ПолучитьМакет(ИмяМакета);
	
	КодЯзыкаПечать = ПараметрыВывода.КодЯзыкаДляМногоязычныхПечатныхФорм;        
	Макет.КодЯзыкаМакета = КодЯзыкаПечать;
	
	Для каждого ДокументСсылка Из МассивОбъектов Цикл
		
		Шапка = Макет.ПолучитьОбласть("Шапка");
		Шапка.Параметры.Акт = "АКТ № " +СокрЛП(ДокументСсылка.НомерАкта);
		Шапка.Параметры.НомерДок = ?(ДокументСсылка.НомерНакладной="", ДокументСсылка.Номер, ДокументСсылка.НомерНакладной);
		Шапка.Параметры.Заполнить(ДокументСсылка);
		Шапка.Параметры.Владелец = ДокументСсылка.Владелец;
		ИНАГРО_Элеватор.ПолучитьНаименованияКонтрагента(Шапка.Параметры.Владелец);
		ВремяНачалаДня = ИНАГРО_Элеватор.ПолучитьПараметрУчетаЭлеватора(ДокументСсылка.Дата, "ВремяНачалаДня", 0);
		Если ВремяНачалаДня <> 0 Тогда
			Шапка.Параметры.ДатаДок = Формат(ДокументСсылка.ВремяВыбытия, "ДФ='дд ММММ гггг';Л="+ Локализация.ОпределитьКодЯзыкаДляФормат(КодЯзыкаПечать));
		Иначе		
			Шапка.Параметры.ДатаДок = Формат(ДокументСсылка.Дата, "ДФ='дд ММММ гггг';Л="+ Локализация.ОпределитьКодЯзыкаДляФормат(КодЯзыкаПечать));
		КонецЕсли;
		
		Шапка.Параметры.Организация = ДокументСсылка.Организация.Наименование;
		
		Если ИмяМакета = "АктНаРазницу" Тогда
			
			Шапка.Параметры.ВесБрутто = ДокументСсылка.ВесБрутто + ДокументСсылка.ВесБрутто1;
			Шапка.Параметры.ВесНетто = ДокументСсылка.ВесНетто + ДокументСсылка.ВесНетто1;
			Шапка.Параметры.ВесТары = ДокументСсылка.ВесТары + ДокументСсылка.ВесТары1;
			
		ИначеЕсли ИмяМакета = "АктНаРазницу" Тогда
			
			Шапка.Параметры.Брутто = ДокументСсылка.ВесБрутто + ДокументСсылка.ВесБрутто1;
			Шапка.Параметры.Нетто = ДокументСсылка.ВесНетто + ДокументСсылка.ВесНетто1;
			Шапка.Параметры.Тара = ДокументСсылка.ВесТары + ДокументСсылка.ВесТары1;
			
		КонецЕсли; 
			
		Если ДокументСсылка.ВесНеттоДок = 0 Тогда
			// не печатаем разницу
		ИначеЕсли ДокументСсылка.ВесНеттоДок > ДокументСсылка.Вес Тогда 
			Шапка.Параметры.РазницаМ = ДокументСсылка.ВесНеттоДок - ДокументСсылка.Вес;
		ИначеЕсли ДокументСсылка.Вес > ДокументСсылка.ВесНеттоДок Тогда
			Шапка.Параметры.РазницаБ = ДокументСсылка.Вес - ДокументСсылка.ВесНеттоДок;
		КонецЕсли;
		ТабДокумент.Вывести(Шапка);
		ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
		ТабДокумент.ИмяПараметровПечати = "ИНАГРО_ТТНВвоз_АктНаРазницу";
		
	КонецЦикла;
	
	ТабДокумент.АвтоМасштаб = Истина;
	
	Возврат ТабДокумент;
	
КонецФункции

Функция ПечатьРегистрационныйШтамп(МассивОбъектов, ОбъектыПечати, ПараметрыВывода)
	
	ТабДокумент = Новый ТабличныйДокумент;
	
	Макет = ПолучитьМакет("ПФ_MXL_РегистрационныйШтамп");
	
	КодЯзыкаПечать = ПараметрыВывода.КодЯзыкаДляМногоязычныхПечатныхФорм;        
	Макет.КодЯзыкаМакета = КодЯзыкаПечать;
	
	Для каждого ДокументСсылка Из МассивОбъектов Цикл
		
		Шапка = Макет.ПолучитьОбласть("Шапка");
		Шапка.Параметры.Заполнить(ДокументСсылка);
		Шапка.Параметры.Владелец = ДокументСсылка.Владелец;
		ИНАГРО_Элеватор.ПолучитьНаименованияКонтрагента(Шапка.Параметры.Владелец);
		ВремяНачалаДня = ИНАГРО_Элеватор.ПолучитьПараметрУчетаЭлеватора(ДокументСсылка.Дата, "ВремяНачалаДня", 0);
		Если ВремяНачалаДня > 0 Тогда
			Шапка.Параметры.ДатаДок = Формат(ДокументСсылка.ВремяПрибытия, "ДФ='дд ММММ гггг';Л="+ Локализация.ОпределитьКодЯзыкаДляФормат(КодЯзыкаПечать));
		Иначе		
			Шапка.Параметры.ДатаДок = Формат(ДокументСсылка.Дата, "ДФ='дд ММММ гггг';Л="+ Локализация.ОпределитьКодЯзыкаДляФормат(КодЯзыкаПечать));
		КонецЕсли;
		
		Шапка.Параметры.Организация = ДокументСсылка.Организация.НаименованиеПолное;
		Шапка.Параметры.ВесБрутто = ДокументСсылка.ВесБрутто + ДокументСсылка.ВесБрутто1;
		Шапка.Параметры.ВесНетто = ДокументСсылка.ВесНетто + ДокументСсылка.ВесНетто1;
		Шапка.Параметры.ВесТары = ДокументСсылка.ВесТары + ДокументСсылка.ВесТары1;
		
		ПроцентВлажности = ДокументСсылка.СтепеньВлажности;
		ПроцентЗагрязнения = ДокументСсылка.СтепеньЗагрязнения;
		ПроцентЗараженности = ДокументСсылка.СтепеньЗараженности;
		
		Если ЗначениеЗаполнено(ДокументСсылка.ЛабораторныйАнализ) Тогда
			Для каждого стр из ДокументСсылка.ЛабораторныйАнализ.Результаты Цикл
				Если стр.Характеристика = ПланыВидовХарактеристик.ИНАГРО_ХарактеристикиВидовКультур.Влажность и Тип(стр.Характеристика.ТипЗначения) = Тип("Число") Тогда
					ПроцентВлажности = Строка(ПроцентВлажности) + "(" + Строка(стр.Значение) +"%)";
				КонецЕсли;
				
				Если стр.Характеристика = ПланыВидовХарактеристик.ИНАГРО_ХарактеристикиВидовКультур.СорнаяПримесь и Тип(стр.Характеристика.ТипЗначения) = Тип("Число") Тогда
					ПроцентЗагрязнения = Строка(ПроцентЗагрязнения) + "(" + Строка(стр.Значение)+"%)";
				КонецЕсли;
				
				Если стр.Характеристика = ПланыВидовХарактеристик.ИНАГРО_ХарактеристикиВидовКультур.Зараженность и Тип(стр.Характеристика.ТипЗначения) = Тип("Число") Тогда
					ПроцентЗараженности =  Строка(ПроцентЗараженности) + "(" + Строка(стр.Значение)+"%)";
				КонецЕсли;
				
				Если стр.Характеристика = ПланыВидовХарактеристик.ИНАГРО_ХарактеристикиВидовКультур.Цвет Тогда
					Шапка.Параметры.Цвет = стр.Значение;
				КонецЕсли;
				
				Если стр.Характеристика = ПланыВидовХарактеристик.ИНАГРО_ХарактеристикиВидовКультур.Запах Тогда
					Шапка.Параметры.Запах = стр.Значение;
				КонецЕсли;
				
			КонецЦикла;	
		КонецЕсли;
		Шапка.Параметры.ПроцентВлажности = ПроцентВлажности;
		Шапка.Параметры.ПроцентЗагрязнения = ПроцентЗагрязнения;
		Шапка.Параметры.ПроцентЗараженности = ПроцентЗараженности;
		
		Шапка.Параметры.СкладСилос = ДокументСсылка.Склад.Наименование + ?(ЗначениеЗаполнено(ДокументСсылка.Силос), ", " + ДокументСсылка.Силос.Наименование,"");
		Шапка.Параметры.СилосТТН = ДокументСсылка.Силос;
		
		ОтветственныеЛицаОрганизации = ИНАГРО_Элеватор.ОтветственныеЛицаОрганизации(ДокументСсылка.Организация, ДокументСсылка.Дата);
		
		Шапка.Параметры.НачальникВТЛ = ОтветственныеЛицаОрганизации.НачальникВТЛ;
		ТабДокумент.Вывести(Шапка);
		ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
		ТабДокумент.ИмяПараметровПечати = "ИАЭ_ТТНВвоз_РегистрационныйШтамп";
		
	КонецЦикла;
	
	ТабДокумент.АвтоМасштаб = Истина;
	
	Возврат ТабДокумент;
	
КонецФункции

Функция ПолучитьДополнительныеРеквизитыДляРеестра() Экспорт
	
	Результат = Новый Структура;	
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти 

#Область ПрограммныйИнтерфейс

// Заполняет счета учета номенклатуры в табличной части документа
//
// Параметры:
// Объект - СправочникСсылка - объект контактной информации
// ИмяТабличнойЧасти - имя табличной части
// СобственноеПодразделение - собственное подразделение.
//
Процедура ЗаполнитьСчетаУчетаВТабличнойЧасти(Объект, ИмяТабличнойЧасти, СобственноеПодразделение) Экспорт

	ТабличнаяЧасть = Объект[ИмяТабличнойЧасти];
	
	ДанныеОбъекта = Новый Структура("Дата, Организация, Склад, ОтражатьВБухгалтерскомУчете");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
		
	СоответствиеСведенийОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОСпискеНоменклатуры(
		ОбщегоНазначения.ВыгрузитьКолонку(ТабличнаяЧасть, "Номенклатура", Истина), ДанныеОбъекта);
	
	Для Каждого СтрокаТабличнойЧасти Из ТабличнаяЧасть Цикл
		СведенияОНоменклатуре = СоответствиеСведенийОНоменклатуре.Получить(СтрокаТабличнойЧасти.Номенклатура);
		ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(ДанныеОбъекта, СтрокаТабличнойЧасти, СведенияОНоменклатуре);
	КонецЦикла;

КонецПроцедуры

// Заполняет сведения о номенклатуре в строке табличной части документа
//
// Параметры:
//  ДанныеОбъекта         - структура данных объекта, используемых при заполнении счетов учета (вид операции,
//                          вид договора контрагента, признак комиссионной торговли и т.п.)
//  СтрокаТабличнойЧасти  - Строка - строка табличной части документа
//  СведенияОНоменклатуре - Структура - структура сведений о номенклатуре, либо структура счетов учета.
//
Процедура ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(ДанныеОбъекта, СтрокаТабличнойЧасти, СведенияОНоменклатуре) Экспорт
	
	Если СведенияОНоменклатуре = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если СведенияОНоменклатуре.Свойство("СчетаУчета") Тогда
		// СведенияОНоменклатуре - структура сведений номенклатуры
		СчетаУчета = СведенияОНоменклатуре.СчетаУчета;
	ИначеЕсли СведенияОНоменклатуре.Свойство("СчетУчетаБУ") Тогда
		// СведенияОНоменклатуре - структура счетов учета номенклатуры
		СчетаУчета = СведенияОНоменклатуре;
	Иначе
		Возврат;
	КонецЕсли;

	Если ДанныеОбъекта.ОтражатьВБухгалтерскомУчете Тогда		
		СтрокаТабличнойЧасти.СчетУчетаБУ = СчетаУчета.СчетУчетаДавСырья;		
	Иначе		
		СтрокаТабличнойЧасти.СчетУчетаБУ = ПланыСчетов.Хозрасчетный.ПустаяСсылка();		
	КонецЕсли;	

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка)
	
	Если ВидФормы <> "ФормаДокумента"
		И ВидФормы <> "ФормаОбъекта" Тогда
		Возврат;
	КонецЕсли;

	ВидОперации = Неопределено; 

	Если Параметры.Свойство("Ключ") И ЗначениеЗаполнено(Параметры.Ключ) Тогда
		ВидОперации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Параметры.Ключ, "ВидОперации");
	КонецЕсли;

	// Если документ копируется, то вид формы получаем из копируемого документа.
	Если НЕ ЗначениеЗаполнено(ВидОперации) Тогда
		Если Параметры.Свойство("ЗначениеКопирования")
			И ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
			ВидОперации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
				Параметры.ЗначениеКопирования, "ВидОперации");
		КонецЕсли;
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(ВидОперации) Тогда
		Если Параметры.Свойство("ЗначенияЗаполнения") 
			И ТипЗнч(Параметры.ЗначенияЗаполнения) = Тип("Структура") Тогда
			Если Параметры.ЗначенияЗаполнения.Свойство("ВидОперации") Тогда
				ВидОперации = Параметры.ЗначенияЗаполнения.ВидОперации;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;	
	
	СтандартнаяОбработка = Ложь;
	ФормыИНАГРО_ТТНВвоз = ПолучитьСоответствиеВидовОперацийФормам();
	ВыбраннаяФорма = ФормыИНАГРО_ТТНВвоз[ВидОперации];
	Если ВыбраннаяФорма = Неопределено Тогда
		ВыбраннаяФорма = "ФормаДокумента";
	КонецЕсли;
	
КонецПроцедуры 

#КонецОбласти 

#Область СлужебныеПроцедурыИФункции

Функция ПолучитьСоответствиеВидовОперацийФормам() Экспорт

	ФормыИНАГРО_ТТНВвоз = Новый Соответствие;
	
	ФормыИНАГРО_ТТНВвоз.Вставить(Перечисления.ИНАГРО_ВидыОперацийТТНВвоз.Ввоз,            "ФормаДокументаОбщая");
	ФормыИНАГРО_ТТНВвоз.Вставить(Перечисления.ИНАГРО_ВидыОперацийТТНВвоз.ВвозФасованного, "ФормаДокументаОбщая");
	ФормыИНАГРО_ТТНВвоз.Вставить(Перечисления.ИНАГРО_ВидыОперацийТТНВвоз.СборУрожая,      "ФормаДокументаОбщая");
		
	Возврат ФормыИНАГРО_ТТНВвоз;

КонецФункции 

Функция ПолучитьФиксированныйМассивВидовОпераций() Экспорт

	МассивВидовОпераций = Новый Массив;
	СписокВидовОпераций = Новый СписокЗначений;
	
	ЗначенияПеречисления = Метаданные.Перечисления.ИНАГРО_ВидыОперацийТТНВвоз.ЗначенияПеречисления;
	Для Каждого ЗначениеПеречисления Из ЗначенияПеречисления Цикл
		ТекущийВидОперации = Перечисления.ИНАГРО_ВидыОперацийТТНВвоз[ЗначениеПеречисления.Имя];
		МассивВидовОпераций.Добавить(ТекущийВидОперации);
	КонецЦикла;
		
	Возврат Новый ФиксированныйМассив(МассивВидовОпераций);

КонецФункции

Функция СформироватьЗаписиНомераПроб(Ссылка) Экспорт
	
	Запрос = Новый Запрос;	
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ИНАГРО_ИспользуемыеНомераПроб.НомерПробы,
		|	ИНАГРО_ИспользуемыеНомераПроб.Организация,
		|	ИНАГРО_ИспользуемыеНомераПроб.Дата,
		|	ИНАГРО_ИспользуемыеНомераПроб.Владелец,
		|	ИНАГРО_ИспользуемыеНомераПроб.ДоговорКонтрагента,
		|	ИНАГРО_ИспользуемыеНомераПроб.Склад,
		|	ИНАГРО_ИспользуемыеНомераПроб.ВидХранения,
		|	ИНАГРО_ИспользуемыеНомераПроб.Силос,
		|	ИНАГРО_ИспользуемыеНомераПроб.Номенклатура,
		|	ИНАГРО_ИспользуемыеНомераПроб.Урожай,
		|	ИНАГРО_ИспользуемыеНомераПроб.СтепеньВлажности,
		|	ИНАГРО_ИспользуемыеНомераПроб.СтепеньЗагрязнения,
		|	ИНАГРО_ИспользуемыеНомераПроб.СтепеньЗараженности
		|ИЗ
		|	РегистрСведений.ИНАГРО_ИспользуемыеНомераПроб КАК ИНАГРО_ИспользуемыеНомераПроб,
		|	Документ.ИНАГРО_ТТНВвоз КАК ИНАГРО_ТТНВвоз
		|ГДЕ
		|	ИНАГРО_ИспользуемыеНомераПроб.НомерПробы = ИНАГРО_ТТНВвоз.НомерПробы
		|	И ИНАГРО_ИспользуемыеНомераПроб.Организация = ИНАГРО_ТТНВвоз.Организация
		|	И ИНАГРО_ИспользуемыеНомераПроб.Владелец = ИНАГРО_ТТНВвоз.Владелец
		|	И ИНАГРО_ИспользуемыеНомераПроб.ДоговорКонтрагента = ИНАГРО_ТТНВвоз.ДоговорКонтрагента
		|	И ИНАГРО_ИспользуемыеНомераПроб.Склад = ИНАГРО_ТТНВвоз.Склад
		|	И ИНАГРО_ИспользуемыеНомераПроб.ВидХранения = ИНАГРО_ТТНВвоз.ВидХранения
		|	И ИНАГРО_ИспользуемыеНомераПроб.Силос = ИНАГРО_ТТНВвоз.Силос
		|	И ИНАГРО_ИспользуемыеНомераПроб.Номенклатура = ИНАГРО_ТТНВвоз.Номенклатура
		|	И ИНАГРО_ИспользуемыеНомераПроб.Урожай = ИНАГРО_ТТНВвоз.Урожай
		|	И ИНАГРО_ИспользуемыеНомераПроб.СтепеньВлажности = ИНАГРО_ТТНВвоз.СтепеньВлажности
		|	И ИНАГРО_ИспользуемыеНомераПроб.СтепеньЗагрязнения = ИНАГРО_ТТНВвоз.СтепеньЗагрязнения
		|	И ИНАГРО_ИспользуемыеНомераПроб.СтепеньЗараженности = ИНАГРО_ТТНВвоз.СтепеньЗараженности
		|	И ИНАГРО_ТТНВвоз.Ссылка <> &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции

Процедура ЗаписатьВыбранноеКоличество(РезультатЗакрытия, ИдентификаторКоманды) Экспорт
	
	СтруктураСохранения = Новый Структура("ВыбранноеКоличество" + ИдентификаторКоманды, РезультатЗакрытия);		
	ХранилищеОбщихНастроек.Сохранить("ИНАГРО_ТТНВвоз_" + ИдентификаторКоманды, , СтруктураСохранения);
	
КонецПроцедуры

#КонецОбласти 

#КонецЕсли