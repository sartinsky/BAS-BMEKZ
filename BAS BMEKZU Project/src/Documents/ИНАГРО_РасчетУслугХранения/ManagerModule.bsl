#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область ПроцедурыИФункцииПечати
	
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	// РасчетХранения
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "РасчетХранения";
	КомандаПечати.Представление = НСтр("ru='Расчет хранения';uk='Розрахунок зберігання'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечати";
	КомандаПечати.СписокФорм    = "ФормаСписка,ФормаВыбора,ФормаДокумента";
	
	// Реестр документов
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "Реестр";
	КомандаПечати.Представление = НСтр("ru='Реестр документов';uk='Реєстр документів'");
	КомандаПечати.ЗаголовокФормы= НСтр("ru='Реестр документов ""Расчет услуг хранения""';uk='Реєстр документів ""Розрахунок послуг зберігання""'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечатиРеестраДокументов";
	КомандаПечати.СписокФорм    = "ФормаСписка";
	КомандаПечати.Порядок       = 100;
	
КонецПроцедуры

Процедура Печать( МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	// Устанавливаем признак доступности печати покомплектно.
	ПараметрыВывода.ДоступнаПечатьПоКомплектно = Истина;
	СтруктураПечати = ХранилищеОбщихНастроек.Загрузить("ИНАГРО_РасчетУслугХранения_РасчетХранения");
	 // Проверяем, нужно ли для макета формировать табличный документ.
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "РасчетХранения") Тогда
		 // Формируем табличный документ и добавляем его в коллекцию печатных форм.
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "РасчетХранения", НСтр("ru='Расчет Хранения';uk='Розрахунок Зберігання'"), 
			ПечатьХранения(МассивОбъектов, ПараметрыВывода, ОбъектыПечати, СтруктураПечати), , "Документ.ИНАГРО_РасчетУслугХранения.ПФ_MXL_РасчетХранения", , Истина);
	КонецЕсли;
 	
КонецПроцедуры

Функция ПечатьХранения(МассивОбъектов, ПараметрыВывода, ОбъектыПечати, СтруктураПечати)Экспорт
								  
	Если СтруктураПечати = Неопределено Тогда
		 Отбор = Ложь;
	Иначе	
		 Отбор = Истина;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_РасчетУслугХранения_РасчетХранения";
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ИНАГРО_РасчетУслугХранения.ПФ_MXL_РасчетХранения");	
		
	// печать производится на языке, указанном в настройках пользователя
	КодЯзыкаПечать =   ПараметрыВывода.КодЯзыкаДляМногоязычныхПечатныхФорм;
	Макет.КодЯзыкаМакета = КодЯзыкаПечать;
		
	ПервыйДокумент = Истина;
	Для каждого Ссылка Из МассивОбъектов Цикл
		Если Не ПервыйДокумент Тогда
			ТабДокумент.ВывестиВертикальныйРазделительСтраниц();
		КонецЕсли; 
		ПервыйДокумент = Ложь;
							
		ПараметрыУчета = ИНАГРО_Элеватор.ПолучитьПараметрыУчетаЭлеватора(ТекущаяДата());
		
		РасчетХранения = Новый ТаблицаЗначений;
		РасчетХранения.Колонки.Добавить("Контрагент"	, Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
		РасчетХранения.Колонки.Добавить("ДоговорКонтрагента"	, Новый ОписаниеТипов("СправочникСсылка.ДоговорыКонтрагентов"));
		РасчетХранения.Колонки.Добавить("Номенклатура"	, Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
		РасчетХранения.Колонки.Добавить("Склад"			, Новый ОписаниеТипов("СправочникСсылка.Склады"));
		РасчетХранения.Колонки.Добавить("Урожай"		, Новый ОписаниеТипов("СправочникСсылка.ИНАГРО_ВидыУрожая"));
		РасчетХранения.Колонки.Добавить("ВидХранения"	, Новый ОписаниеТипов("СправочникСсылка.ИНАГРО_ВидыХранения"));
		РасчетХранения.Колонки.Добавить("ДатаНачала"	, Новый ОписаниеТипов("Дата"));
		РасчетХранения.Колонки.Добавить("ДатаКонца"		, Новый ОписаниеТипов("Дата"));
		РасчетХранения.Колонки.Добавить("Вес"			, Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
		РасчетХранения.Колонки.Добавить("КвоДней"		, Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
		РасчетХранения.Колонки.Добавить("ДнейВМесяце"	, Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
		РасчетХранения.Колонки.Добавить("Цена"			, Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
		РасчетХранения.Колонки.Добавить("Количество"	, Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
		РасчетХранения.Колонки.Добавить("Сумма"			, Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
		РасчетХранения.Колонки.Добавить("СтавкаНДС"		, Новый ОписаниеТипов("ПеречислениеСсылка.СтавкиНДС"));
		РасчетХранения.Колонки.Добавить("СуммаНДС"		, Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
		
		Запрос = Новый Запрос;
		// Сгруппируем данные таб. значений с помощью запроса
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	РасчетХранения.Контрагент КАК Контрагент,
			|	РасчетХранения.ДоговорКонтрагента КАК ДоговорКонтрагента,
			|	РасчетХранения.Культура КАК Номенклатура,
			|	РасчетХранения.Склад КАК Склад,
			|	РасчетХранения.Урожай КАК Урожай,
			|	РасчетХранения.ВидХранения КАК ВидХранения,
			|	ЕСТЬNULL(РасчетХранения.ТонноДни, 0) КАК УникальноеКоличество,
			|	РасчетХранения.ДатаРасчета КАК ДатаРасчета,
			|	РасчетХранения.ДатаРасчета КАК НачалоПериода,
			|	РасчетХранения.ДатаРасчета КАК КонецПериода,
			|	ЕСТЬNULL(РасчетХранения.Цена, 0) КАК Цена,
			|	ЕСТЬNULL(РасчетХранения.Сумма, 0) КАК Сумма,
			|	ЕСТЬNULL(РасчетХранения.Количество, 0) КАК Количество,
			|	РасчетХранения.ДатаРасчета КАК КвоДней
			|ПОМЕСТИТЬ Хранение
			|ИЗ
			|	Документ.ИНАГРО_РасчетУслугХранения.Список КАК РасчетХранения
			|ГДЕ
			|	РасчетХранения.Ссылка = &Ссылка
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	Хранение.ВидХранения КАК ВидХранения,
			|	КОЛИЧЕСТВО(Хранение.КвоДней) КАК КвоДней,
			|	СУММА(Хранение.Количество) КАК Количество,
			|	МАКСИМУМ(Хранение.КонецПериода) КАК КонецПериода,
			|	МИНИМУМ(Хранение.НачалоПериода) КАК НачалоПериода,
			|	Хранение.Контрагент КАК Контрагент,
			|	Хранение.ДоговорКонтрагента КАК ДоговорКонтрагента,
			|	Хранение.Номенклатура КАК Номенклатура,
			|	Хранение.Склад КАК Склад,
			|	Хранение.УникальноеКоличество КАК УникальноеКоличество,
			|	Хранение.Урожай КАК Урожай,
			|	Хранение.Цена КАК Цена
			|ИЗ
			|	Хранение КАК Хранение
			|ГДЕ
			|	&Условия
			|
			|СГРУППИРОВАТЬ ПО
			|	Хранение.Контрагент,
			|	Хранение.ДоговорКонтрагента,
			|	Хранение.ВидХранения,
			|	Хранение.Номенклатура,
			|	Хранение.Склад,
			|	Хранение.УникальноеКоличество,
			|	Хранение.Урожай,
			|	Хранение.Цена";
					   
		Запрос.УстановитьПараметр("Ссылка", Ссылка);
		Условия = "ИСТИНА ";
		
		Если ИНАГРО_Элеватор.ЕстьКлюч(СтруктураПечати.ЗаполненаСтруктураОтбора, "НачалоХранения") Тогда
			Если ЗначениеЗаполнено(СтруктураПечати.ЗаполненаСтруктураОтбора.НачалоХранения) Тогда
				НачалоХранения 	= НачалоДня(СтруктураПечати.ЗаполненаСтруктураОтбора.НачалоХранения);
			Иначе
				НачалоХранения 	= НачалоДня(Ссылка.НачалоПериодаРасчета);
			КонецЕсли;
		КонецЕсли;
		Если ИНАГРО_Элеватор.ЕстьКлюч(СтруктураПечати.ЗаполненаСтруктураОтбора, "КонецХранения") Тогда
			Если ЗначениеЗаполнено(СтруктураПечати.ЗаполненаСтруктураОтбора.КонецХранения) Тогда
				КонецХранения 	= КонецДня(СтруктураПечати.ЗаполненаСтруктураОтбора.КонецХранения);
			Иначе
				КонецХранения	= КонецДня(Ссылка.КонецПериодаРасчета);
			КонецЕсли;
		КонецЕсли;
		
		Условия = Условия + " И	Хранение.ДатаРасчета МЕЖДУ &НачалоХранения И &КонецХранения";
		Запрос.УстановитьПараметр("НачалоХранения", НачалоХранения);
		Запрос.УстановитьПараметр("КонецХранения", КонецХранения);
		
		Если ИНАГРО_Элеватор.ЕстьКлюч(СтруктураПечати.ЗаполненаСтруктураОтбора, "Склад") Тогда
			Если ЗначениеЗаполнено(СтруктураПечати.ЗаполненаСтруктураОтбора.Склад) Тогда
				Условия = Условия + " И	Хранение.Склад = &Склад";
				Запрос.УстановитьПараметр("Склад", СтруктураПечати.ЗаполненаСтруктураОтбора.Склад);
			КонецЕсли;
		КонецЕсли;
		Если ИНАГРО_Элеватор.ЕстьКлюч(СтруктураПечати.ЗаполненаСтруктураОтбора, "Урожай")Тогда
			Если ЗначениеЗаполнено(СтруктураПечати.ЗаполненаСтруктураОтбора.Урожай) Тогда
				Условия = Условия + " И	Хранение.Урожай = &Урожай";
				Запрос.УстановитьПараметр("Урожай", СтруктураПечати.ЗаполненаСтруктураОтбора.Урожай);
			КонецЕсли;
		КонецЕсли;		
		Если ИНАГРО_Элеватор.ЕстьКлюч(СтруктураПечати.ЗаполненаСтруктураОтбора, "Контрагент") Тогда
			Если ЗначениеЗаполнено(СтруктураПечати.ЗаполненаСтруктураОтбора.Контрагент) Тогда
				Условия = Условия + " И	Хранение.Контрагент = &Контрагент";
				Запрос.УстановитьПараметр("Контрагент", СтруктураПечати.ЗаполненаСтруктураОтбора.Контрагент);
			КонецЕсли;
		КонецЕсли;
		Если ИНАГРО_Элеватор.ЕстьКлюч(СтруктураПечати.ЗаполненаСтруктураОтбора, "Номенклатура") Тогда
			Если ЗначениеЗаполнено(СтруктураПечати.ЗаполненаСтруктураОтбора.Номенклатура) Тогда
				Условия = Условия + " И	Хранение.Номенклатура = &Номенклатура";
				Запрос.УстановитьПараметр("Номенклатура", СтруктураПечати.ЗаполненаСтруктураОтбора.Номенклатура);
			КонецЕсли;
		КонецЕсли;

		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Условия", Условия);
		
		Выборка = Запрос.Выполнить().Выбрать();
		РасчетДней  = ПолучитьКоличествоДнейВМесяце(НачалоХранения, КонецХранения);

		Пока Выборка.Следующий() Цикл
			
			НоваяСтрока = РасчетХранения.Добавить();
			НоваяСтрока.Контрагент = Выборка.Контрагент;
			НоваяСтрока.ДоговорКонтрагента = Выборка.ДоговорКонтрагента;
			НоваяСтрока.Номенклатура = Выборка.Номенклатура;
			НоваяСтрока.Склад        = Выборка.Склад;
			НоваяСтрока.Урожай       = Выборка.Урожай;
			НоваяСтрока.ВидХранения  = Выборка.ВидХранения;
			НоваяСтрока.ДатаНачала   = Выборка.НачалоПериода;
			НоваяСтрока.ДатаКонца    = Выборка.КонецПериода;
			НоваяСтрока.КвоДней      = Выборка.КвоДней;
			НоваяСтрока.ДнейВМесяце  = РасчетДней;
			
			// Кол. услуги хранения насчитано в тонно/днях, пересчитаем вес в кг/дни.
			НоваяСтрока.Вес          = Выборка.УникальноеКоличество * 1000; 		
			// Пересчитаем кол. услуги хранения в тонно/мес
			Если Не ПараметрыУчета = Неопределено Тогда 			
				Если ИНАГРО_Элеватор.ПолучитьПредопределеннуюНоменклатуру("Хранение").БазоваяЕдиницаИзмерения = ПараметрыУчета.ЕдиницаИзмеренияТД Тогда			
					НоваяСтрока.Количество   = Выборка.УникальноеКоличество * Выборка.КвоДней;
				ИначеЕсли ИНАГРО_Элеватор.ПолучитьПредопределеннуюНоменклатуру("Хранение").БазоваяЕдиницаИзмерения = ПараметрыУчета.ЕдиницаИзмеренияТМ Тогда
					НоваяСтрока.Количество   = Окр(Выборка.УникальноеКоличество * Выборка.КвоДней / РасчетДней, 5);
				КонецЕсли;
			Иначе
				НоваяСтрока.Количество   = Выборка.УникальноеКоличество;
			КонецЕсли;
						
		КонецЦикла;	
		РасчетХранения.Сортировать("Контрагент, ДоговорКонтрагента, Номенклатура, ДатаНачала, Склад, Урожай, ВидХранения");
		
		Запрос = Новый запрос;
				
		Запрос.УстановитьПараметр("РасчетХранения", РасчетХранения);
		
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	РасчетХранения.Контрагент КАК Контрагент,
			|	РасчетХранения.ДоговорКонтрагента КАК ДоговорКонтрагента,
			|	РасчетХранения.Номенклатура КАК Номенклатура,
			|	РасчетХранения.Склад КАК Склад,
			|	РасчетХранения.Урожай КАК Урожай,
			|	РасчетХранения.ВидХранения КАК ВидХранения,
			|	РасчетХранения.ДатаНачала КАК ДатаНачала,
			|	РасчетХранения.ДатаКонца КАК ДатаКонца,
			|	РасчетХранения.Вес КАК Вес,
			|	РасчетХранения.КвоДней КАК КвоДней,
			|	РасчетХранения.ДнейВМесяце КАК ДнейВМесяце,
			|	РасчетХранения.Цена КАК Цена,
			|	РасчетХранения.Количество КАК Количество,
			|	РасчетХранения.Сумма КАК Сумма,
			|	РасчетХранения.СтавкаНДС КАК СтавкаНДС,
			|	РасчетХранения.СуммаНДС КАК СуммаНДС
			|ПОМЕСТИТЬ Хранение
			|ИЗ
			|	&РасчетХранения КАК РасчетХранения
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ИНАГРО_РасчетУслугРасчетХранения.Контрагент КАК Контрагент,
			|	ИНАГРО_РасчетУслугРасчетХранения.ДоговорКонтрагента КАК ДоговорКонтрагента,
			|	ИНАГРО_РасчетУслугРасчетХранения.Номенклатура КАК Культура,
			|	ИНАГРО_РасчетУслугРасчетХранения.Урожай КАК Урожай,
			|	ИНАГРО_РасчетУслугРасчетХранения.Склад КАК Склад,
			|	ИНАГРО_РасчетУслугРасчетХранения.ВидХранения КАК ВидХранения,
			|	МАКСИМУМ(ИНАГРО_РасчетУслугРасчетХранения.ДатаНачала) КАК ДатаНачала,
			|	МАКСИМУМ(ИНАГРО_РасчетУслугРасчетХранения.ДатаКонца) КАК ДатаКонца,
			|	ИНАГРО_РасчетУслугРасчетХранения.Вес КАК Вес,
			|	МАКСИМУМ(ИНАГРО_РасчетУслугРасчетХранения.КвоДней) КАК КвоДней,
			|	МАКСИМУМ(ИНАГРО_РасчетУслугРасчетХранения.ДнейВМесяце) КАК ДнейВМесяце,
			|	СУММА(ИНАГРО_РасчетУслугРасчетХранения.Количество) КАК Количество,
			|	ИНАГРО_РасчетУслугРасчетХранения.Цена КАК Цена,
			|	СУММА(ИНАГРО_РасчетУслугРасчетХранения.Сумма) КАК Сумма,
			|	СУММА(ИНАГРО_РасчетУслугРасчетХранения.СуммаНДС) КАК СуммаНДС,
			|	Контрагенты.НаименованиеПолное КАК НаименованиеПолное,
			|	ДоговорыКонтрагентов.НаименованиеДляПечати КАК НаименованиеДляПечати
			|ИЗ
			|	Хранение КАК ИНАГРО_РасчетУслугРасчетХранения
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
			|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
			|			ПО Контрагенты.ОсновнойДоговорКонтрагента = ДоговорыКонтрагентов.Ссылка
			|		ПО ИНАГРО_РасчетУслугРасчетХранения.Контрагент = Контрагенты.Ссылка
			|
			|СГРУППИРОВАТЬ ПО
			|	ИНАГРО_РасчетУслугРасчетХранения.Контрагент,
			|	ИНАГРО_РасчетУслугРасчетХранения.ДоговорКонтрагента,
			|	ИНАГРО_РасчетУслугРасчетХранения.Склад,
			|	ИНАГРО_РасчетУслугРасчетХранения.Номенклатура,
			|	ИНАГРО_РасчетУслугРасчетХранения.Урожай,
			|	ИНАГРО_РасчетУслугРасчетХранения.ВидХранения,
			|	ИНАГРО_РасчетУслугРасчетХранения.Вес,
			|	ИНАГРО_РасчетУслугРасчетХранения.Цена,
			|	Контрагенты.НаименованиеПолное,
			|	ДоговорыКонтрагентов.НаименованиеДляПечати
			|
			|УПОРЯДОЧИТЬ ПО
			|	ДатаНачала
			|ИТОГИ ПО
			|	Контрагент,
			|	ДоговорКонтрагента,
			|	Культура,
			|	Урожай,
			|	Склад,
			|	ВидХранения"; 
		
		РезультатЗапрос = Запрос.Выполнить();			   
		
		Если НЕ РезультатЗапрос.Пустой() Тогда			
			
			Организация_НаименованиеПолное = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка.Организация, "НаименованиеПолное");
			Ответственный_ФизЛицо_Наименование = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка.Ответственный.ФизическоеЛицо, "Наименование");
			ВыборкаКонтрагент = РезультатЗапрос.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Контрагент");
			
			Пока ВыборкаКонтрагент.Следующий() Цикл
				
				ВыборкаДоговорКонтрагента = ВыборкаКонтрагент.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "ДоговорКонтрагента");
				
				Пока ВыборкаДоговорКонтрагента.Следующий() Цикл
					
					ВыборкаКультуры = ВыборкаДоговорКонтрагента.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Культура");
					
					Пока ВыборкаКультуры.Следующий() Цикл
						
						// заполнение шапки
						ОбластьШапки                       			= Макет.ПолучитьОбласть("Шапка");
						ОбластьШапки.Параметры.Начало      			= Формат(НачалоХранения, "ДЛФ = Д");
						ОбластьШапки.Параметры.Конец       			= Формат(КонецХранения,"ДЛФ = Д");
						ОбластьШапки.Параметры.Организация 			= Организация_НаименованиеПолное;
						ОбластьШапки.Параметры.Владелец    			= ВыборкаКультуры.Контрагент;
						ОбластьШапки.Параметры.ДоговорКонтрагента 	= ВыборкаКультуры.ДоговорКонтрагента;
						ОбластьШапки.Параметры.Культура    			= ВыборкаКультуры.Культура;
						ТабДокумент.Вывести(ОбластьШапки);
						
						ВыборкаУрожая = ВыборкаКультуры.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Урожай");
						
						Пока ВыборкаУрожая.Следующий() Цикл
							
							//// выведем строку урожая
							ВыборкаСклада = ВыборкаУрожая.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Склад");
							
							Пока ВыборкаСклада.Следующий() Цикл
								
								ВыборкаВидаХранения = ВыборкаСклада.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "ВидХранения");
								
								Пока ВыборкаВидаХранения.Следующий() Цикл
									
									// выведем стрку вида хранения
									ОбластьВидаХранения                             = Макет.ПолучитьОбласть("ВидХранения");
									ОбластьВидаХранения.Параметры.СтрокаДетализации = НСтр("ru = 'Урожай: " + ВыборкаУрожая.Урожай + ". Склад: " + ВыборкаСклада.Склад + ". Вид хранения: " + ВыборкаВидаХранения.ВидХранения + ".'; uk = 'Врожай: " + ВыборкаУрожая.Урожай + ". Склад: " + ВыборкаСклада.Склад + ". Вид зберігання: " + ВыборкаВидаХранения.ВидХранения + ".'", );
																																																																																											   //КодЯзыкаПечать
									ТабДокумент.Вывести(ОбластьВидаХранения);                                                                                                                                                                                                                                                                                                									
									Выборка = ВыборкаВидаХранения.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
									
									// выведем шапку таблицы
									ОбластьШапкиТаблицы = Макет.ПолучитьОбласть("ШапкаТаблицы");
									ТабДокумент.Вывести(ОбластьШапкиТаблицы);
									
									Пока Выборка.Следующий() Цикл
										
										// выведем строки таблицы
										ОбластьСтроки                       = Макет.ПолучитьОбласть("Строка");
										ОбластьСтроки.Параметры.ДатаНачала  = Формат(Выборка.ДатаНачала, "ДЛФ = Д");
										ОбластьСтроки.Параметры.ДатаКонца   = Формат(Выборка.ДатаКонца, "ДЛФ = Д");
										ОбластьСтроки.Параметры.Вес         = Формат(Выборка.Вес, "ЧЦ=15");
										ОбластьСтроки.Параметры.КвоДней     = Выборка.КвоДней;
										ОбластьСтроки.Параметры.ТДни        = Формат((Выборка.Вес / 1000) * Выборка.КвоДней, "ЧЦ=15; ЧДЦ=3");
										ОбластьСтроки.Параметры.ДнейВМесяце = Выборка.ДнейВМесяце;
										ОбластьСтроки.Параметры.Количество  = Формат(Выборка.Количество, "ЧЦ=15; ЧДЦ=3");
										ТабДокумент.Вывести(ОбластьСтроки);
										
									КонецЦикла;	 
									
									ОбластьПустойСтроки = Макет.ПолучитьОбласть("ПустаяСтрока");
									ТабДокумент.Вывести(ОбластьПустойСтроки);
									
								КонецЦикла;	 
								
							КонецЦикла;;
							
						КонецЦикла;	
						
						//Дно
						ОбластьДно = Макет.ПолучитьОбласть("Дно");
						ОбластьДно.Параметры.Организация    = Организация_НаименованиеПолное;
						ОбластьДно.Параметры.Пользователь   = Ответственный_ФизЛицо_Наименование;
						ОбластьДно.Параметры.Количество     = Формат(ВыборкаКультуры.Количество, "ЧЦ=15; ЧДЦ=3");		
						ТабДокумент.Вывести(ОбластьДно);
						ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
						
					КонецЦикла;	
				КонецЦикла;	
			КонецЦикла;		
			
		КонецЕсли;
		
 	КонецЦикла;	
	
	 Возврат ТабДокумент;	
	
КонецФункции
 
Функция ПолучитьКоличествоДнейВМесяце(ДатаНачалаПериода, ДатаКонцаПериода)
	
	Если НачалоМесяца(ДатаНачалаПериода) = НачалоМесяца(ДатаКонцаПериода) Тогда
		// Если период хранения находится в рамках одного месяца
		// Берем для точности реальное к-во дней в месяце.
		ДнейВМесяце = День (КонецМесяца (ДатаКонцаПериода));
	Иначе
		ДнейВМесяце = 30;
	КонецЕсли;
	
	Возврат ДнейВМесяце;
	
КонецФункции

Функция ПолучитьДополнительныеРеквизитыДляРеестра() Экспорт
	
	Результат = Новый Структура;	
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ЗаписатьВыбраннуюПечатнуюФорму(СтруктураОтборов) Экспорт
	
	СтруктураСохранения = Новый Структура("ЗаполненаСтруктураОтбора", СтруктураОтборов);
	ХранилищеОбщихНастроек.Сохранить("ИНАГРО_РасчетУслугХранения_РасчетХранения", , СтруктураСохранения);

КонецПроцедуры 

Функция ПолучитьСписокУсловий(Объект) Экспорт
	
	СписокУсловий = Новый СписокЗначений;
	
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		СписокУсловий.Добавить(Объект.Организация, "Организация");
	КонецЕсли;
	Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
		СписокУсловий.Добавить(Объект.Контрагент, "Владелец");
	КонецЕсли;
	Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		СписокУсловий.Добавить(Объект.ДоговорКонтрагента, "Договор");
	КонецЕсли;
	Если ЗначениеЗаполнено(Объект.Урожай) Тогда
		СписокУсловий.Добавить(Объект.Урожай, "Урожай");
	КонецЕсли;
	Если ЗначениеЗаполнено(Объект.Номенклатура) Тогда
		СписокУсловий.Добавить(Объект.Номенклатура, "Номенклатура");
	КонецЕсли;
	Если ЗначениеЗаполнено(Объект.Склад) Тогда
		СписокУсловий.Добавить(Объект.Склад, "Склад");
	КонецЕсли;	
		Если ЗначениеЗаполнено(Объект.ВидХранения) Тогда
		СписокУсловий.Добавить(Объект.ВидХранения, "ВидХранения");
	КонецЕсли;
	
	Возврат СписокУсловий;

КонецФункции

#КонецОбласти

#КонецЕсли