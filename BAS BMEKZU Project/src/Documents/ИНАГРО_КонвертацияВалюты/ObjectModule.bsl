#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

Перем мВалютаРегламентированногоУчета;

#Область ОбработчикиСобытий

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	ТипДанныхЗаполнения = ТипЗнч(ДанныеЗаполнения);
	Если ДанныеЗаполнения <> Неопределено И ТипДанныхЗаполнения <> Тип("Структура")
		И Метаданные().ВводитсяНаОсновании.Содержит(ДанныеЗаполнения.Метаданные()) Тогда
		ЗаполнитьПоДокументуОснованию(ДанныеЗаполнения);
	КонецЕсли;
	
	ЗаполнениеДокументов.Заполнить(ЭтотОбъект, ДанныеЗаполнения);
	
	// Заполнение реквизитов, специфичных для документа:
	Если ЗначениеЗаполнено(Организация) Тогда
		Документы.ИНАГРО_КонвертацияВалюты.УстановитьСчетаУчета(ЭтотОбъект);
	КонецЕсли;   
		
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, Режим)
	
	// ПОДГОТОВКА ПРОВЕДЕНИЯ ПО ДАННЫМ ДОКУМЕНТА

	ПроведениеСервер.ПодготовитьНаборыЗаписейКПроведению(ЭтотОбъект);
	Если РучнаяКорректировка Тогда
		Возврат;
	КонецЕсли;
	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = НСтр("ru='Проведение документа ""';uk='Проведення документа ""'") + СокрЛП(Ссылка) + """: ";
	
	СтруктураШапкиДокумента = ОбщегоНазначенияРед12.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	СтруктураШапкиДокумента.Вставить("ЕстьНалогНаПрибыльДо2015", УчетнаяПолитика.ПлательщикНалогаНаПрибыльДо2015(СтруктураШапкиДокумента.Организация,СтруктураШапкиДокумента.Дата));
	СтруктураШапкиДокумента.Вставить("ЕстьНДС", УчетнаяПолитика.ПлательщикНДС(СтруктураШапкиДокумента.Организация,СтруктураШапкиДокумента.Дата));
	СтруктураШапкиДокумента.Вставить("ЕстьЕдиныйНалог", УчетнаяПолитика.ПлательщикЕдиногоНалога(СтруктураШапкиДокумента.Организация,СтруктураШапкиДокумента.Дата));
	 	
	// Движения по документу
	Если Не Отказ Тогда
		ДвиженияПоРегистрам(СтруктураШапкиДокумента, Отказ, Заголовок);
	КонецЕсли;
	
	Движения.Хозрасчетный.ВыполнитьДействияПередЗаписьюДвижений();
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКЗаписиДвижений(ЭтотОбъект);
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКОтменеПроведения(ЭтотОбъект);
	Движения.Записать();
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)

	Дата = НачалоДня(ОбщегоНазначения.ТекущаяДатаПользователя());
	Ответственный = Пользователи.ТекущийПользователь();

	ДокументОснование = Неопределено;
	
КонецПроцедуры

#КонецОбласти

#Область Проведение

// Формирует движения по регистрам
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//  Режим 					  - режим проведения документа
//
Процедура ДвиженияПоРегистрам(СтруктураШапкиДокумента, Отказ, Заголовок)
	
	ДвиженияПоРегистрамРегл(СтруктураШапкиДокумента, Отказ, Заголовок);

КонецПроцедуры

Процедура ДвиженияПоРегистрамРегл(СтруктураШапкиДокумента, Отказ, Заголовок)
	
	ПроводкиБУ = Движения.Хозрасчетный;
	ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	СчетаУчета = БухгалтерскийУчетРасчетовСКонтрагентами.ПолучитьСчетаРасчетовСКонтрагентом(
		Организация,
		Банк,
		ДоговорКонтрагента,
		ВалютаРегламентированногоУчета);
	
	// 1. Себестоимость валюты
	
	Если СуммаСебестоимость <> 0 Тогда
		
		Проводка = ПроводкиБУ.Добавить();
		
		Проводка.Период      = Дата;
		Проводка.Организация = Организация;
		Проводка.Содержание  = НСтр("ru='Себестоимость валюты';uk='Собівартість валюти'", Локализация.КодЯзыкаИнформационнойБазы());
		
		Проводка.СчетДт      = ПланыСчетов.Хозрасчетный.ДенежныеСредстваВПутиВИностраннойВалюте; 
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты", Банк); 	
		Проводка.ВалютаДт    = ПокупаемаяВалюта;
		Проводка.ВалютнаяСуммаДт = СуммаВалютнаяПокупаемая;
		
		Проводка.СчетКт      = ПланыСчетов.Хозрасчетный.ДенежныеСредстваВПутиВИностраннойВалюте;	
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Контрагенты", Банк);
		Проводка.ВалютаКт    = ПродаваемаяВалюта;
		Проводка.ВалютнаяСуммаКт = СписываемаяСумма;
		
		Проводка.Сумма       = СуммаСебестоимость;		
		
	КонецЕсли;
	
	// 2. Комиссионные банка
	
	Если СтруктураШапкиДокумента.СуммаКомиссионные <> 0 Тогда
		
		Проводка = ПроводкиБУ.Добавить();
		Проводка.Период      = Дата;
		Проводка.Организация = Организация;
		Проводка.Содержание  = НСтр("ru='Комиссионные банка';uk='Комісійні банку'",Локализация.КодЯзыкаИнформационнойБазы());
		
		Проводка.СчетДт      = СчетЗатратКомиссионные;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Подразделения", Субконто1ЗатратКомиссионные);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "СтатьиЗатрат",  Субконто2ЗатратКомиссионные);		
		
		Проводка.СчетКт      = СчетаУчета.СчетРасчетов;	
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Контрагенты", Банк);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Договоры",    ДоговорКонтрагента);
		
		Проводка.Сумма = СтруктураШапкиДокумента.СуммаКомиссионные;
		
	КонецЕсли; 

	// 3. Курсовая разница  
	
	Если КурсоваяРазница > 0 Тогда
		
		Проводка = ПроводкиБУ.Добавить();
		Проводка.Период      = Дата;
		Проводка.Организация = Организация;
		Проводка.Содержание  = НСтр("ru='Операционная курсовая разница';uk='Операційна курсова різниця'",Локализация.КодЯзыкаИнформационнойБазы());
		
		Проводка.СчетДт      = СчетЗатратКурсоваяРазница;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, Субконто1ЗатратКурсоваяРазница);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, Субконто2ЗатратКурсоваяРазница);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, Субконто3ЗатратКурсоваяРазница);
				
		Проводка.СчетКт      = ПланыСчетов.Хозрасчетный.ДенежныеСредстваВПутиВИностраннойВалюте;	
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Контрагенты", Банк);
		Проводка.ВалютаКт    = ПродаваемаяВалюта;
		Проводка.ВалютнаяСуммаКт = КурсоваяРазница;
		Проводка.Сумма       = КурсоваяРазница * КурсПродажи;
		
		Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыльДо2015 И Проводка.СчетДт.НалоговыйУчет Тогда 
			Проводка.НалоговоеНазначениеДт = Справочники.НалоговыеНазначенияАктивовИЗатрат.НКУ_ХозДеятельность;
			Проводка.СуммаНУДт = КурсоваяРазница * КурсПродажи; 			
		КонецЕсли;  		
		
	ИначеЕсли КурсоваяРазница < 0 Тогда
		
		Проводка = ПроводкиБУ.Добавить();
		Проводка.Период      = СтруктураШапкиДокумента.Дата;
		Проводка.Организация = СтруктураШапкиДокумента.Организация;
		Проводка.Содержание  = НСтр("ru='Операционная курсовая разница';uk='Операційна курсова різниця'",Локализация.КодЯзыкаИнформационнойБазы());
		
		Проводка.СчетДт      = ПланыСчетов.Хозрасчетный.ДенежныеСредстваВПутиВИностраннойВалюте;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты", СтруктураШапкиДокумента.Банк);
		Проводка.ВалютаДт    = СтруктураШапкиДокумента.ПродаваемаяВалюта;
		Проводка.ВалютнаяСуммаДт = (-1) * СтруктураШапкиДокумента.КурсоваяРазница;
		
		Проводка.СчетКт      = СчетДоходовКурсоваяРазница;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, Субконто1ДоходовКурсоваяРазница);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, Субконто2ДоходовКурсоваяРазница);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3, Субконто3ДоходовКурсоваяРазница);
		Проводка.Сумма = (-1) * КурсоваяРазница * КурсПродажи;
		
		Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыльДо2015 И Проводка.СчетКт.НалоговыйУчет Тогда 
			Проводка.НалоговоеНазначениеКт = Справочники.НалоговыеНазначенияАктивовИЗатрат.НКУ_ХозДеятельность;
			Проводка.СуммаНУКт = (-1) * КурсоваяРазница * КурсПродажи;
		КонецЕсли;
		
	КонецЕсли; 	
	 		
КонецПроцедуры

#КонецОбласти 

#Область СлужебныеПроцедурыИФункции	

Процедура ЗаполнитьПоДокументуОснованию(Основание)
	
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.СписаниеСРасчетногоСчета") Тогда
		
		// Заполним реквизиты из стандартного набора по документу основанию.
		ЗаполнениеДокументов.ЗаполнитьПоОснованию(ЭтотОбъект, Основание);
		
		Дата                     = Основание.Дата;
		Банк                     = Основание.Контрагент; 	
		ПродаваемаяВалюта        = Основание.ВалютаДокумента;
		Организация              = Основание.Организация;
		СуммаВалютнаяПродаваемая = Основание.СуммаДокумента;
		СтруктураКурсаНБУ        = МодульВалютногоУчета.ПолучитьКурсВалюты(ПродаваемаяВалюта, Дата);			
		Ответственный            = Основание.Ответственный;
		СуммаОстаток             = Основание.СуммаДокумента;
		ВводНаОсновании          = Истина;	
		
	КонецЕсли;	
		
КонецПроцедуры

#КонецОбласти  

#КонецЕсли