#Область ОбработчикиСобытийФормы 

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды 
	
	Если Параметры.Ключ.Пустая() Тогда
		ПодготовитьФормуНаСервере();
	КонецЕсли;
	
	// Уведомим о появлении функционала рабочей даты
	НастройкиПредупреждений = ОбщегоНазначенияБП.НастройкиПредупрежденийОбИзменениях("РабочаяДатаИзДокумента");
	
	// Показываем, если это новый документ и сама рабочая дата еще не установлена.
	НастройкиПредупреждений.РабочаяДатаИзДокумента = НастройкиПредупреждений.РабочаяДатаИзДокумента
		И Параметры.Ключ.Пустая()
		И НЕ ЗначениеЗаполнено(БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("РабочаяДата"));
		
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		
		Модифицированность	= Истина;
		ЗаполнитьЗначенияСвойств(Объект, ВыбранноеЗначение);
	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	ОбщегоНазначенияБПКлиент.ОбработкаОповещенияФормыДокумента(ЭтотОбъект, Объект.Ссылка, ИмяСобытия, Параметр, Источник);
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	ПодготовитьФормуНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	УстановитьСостояниеДокумента();

КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)

	Оповестить("ОбновитьФорму", ВладелецФормы, Объект.Ссылка);

КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	УстановитьКурсДокумента();
	
	ОбновитьИнформациюОКурсе();
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ОрганизацияПриИзмененииНаСервере();
		
КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()
	
	Документы.ИНАГРО_КонвертацияВалюты.УстановитьСчетаУчета(Объект);
	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтотОбъект);
	
	УправлениеФормой(ЭтотОбъект);						   
	
КонецПроцедуры

&НаКлиенте
Процедура БанкПриИзменении(Элемент)

	Если ЗначениеЗаполнено(Объект.Банк) Тогда
		БанкПриИзмененииНаСервере();
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура БанкПриИзмененииНаСервере()
		
	Если НЕ ЗначениеЗаполнено(Объект.Банк) Тогда
		Возврат;
	КонецЕсли;
	
	БухгалтерскийУчетПереопределяемый.УстановитьДоговорКонтрагента(
		Объект.ДоговорКонтрагента, Объект.Банк, Объект.Организация, 
		ПолучитьМассивВидовДоговоров()); 		
	
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры 

&НаКлиенте
Процедура ВалютаПриИзменении(Элемент)
	
	УстановитьКурсДокумента();
	
	ОбновитьИнформациюОКурсе();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьКурсВручнуюПриИзменении(Элемент)
	
	Если Объект.УстановитьКурсВручную Тогда
		
		Объект.КурсУМВРПродажи = 0;
		Объект.КурсУМВРПокупки = 0;
		
	КонецЕсли;
	
	УправлениеФормой(ЭтаФорма);
	
	ПересчитатьСуммыНаСервере();   
	
КонецПроцедуры  

// Счета доходов и затрат

&НаКлиенте
Процедура СчетЗатратКурсоваяРазницаПриИзменении(Элемент)

	ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3",
		"Субконто1ЗатратКурсоваяРазница", "Субконто2ЗатратКурсоваяРазница", "Субконто3ЗатратКурсоваяРазница");
	ПоляОбъекта.Вставить("Организация",   Объект.Организация);
	БухгалтерскийУчетКлиентСервер.ПриИзмененииСчета(Объект.СчетЗатратКурсоваяРазница, Объект, ПоляОбъекта);
	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтотОбъект);
	ЗаголовкиПолей = Новый Структура("Субконто1, Субконто2, Субконто3",
		"ЗаголовокСубконто1ЗатратКурсоваяРазница", "ЗаголовокСубконто2ЗатратКурсоваяРазница", "ЗаголовокСубконто3ЗатратКурсоваяРазница");
	УстановитьЗаголовкиИДоступностьСубконто(ЭтотОбъект, Объект.СчетЗатратКурсоваяРазница, ЗаголовкиПолей, , "ЗатратКурсоваяРазница");

КонецПроцедуры

&НаКлиенте
Процедура СубконтоЗатратКурсоваяРазницаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПараметрыДокумента = ПолучитьСписокПараметровВыбораСубконто(ЭтотОбъект, Объект, "Субконто%Индекс%ЗатратКурсоваяРазница");
	ПараметрыДокумента.Вставить("СчетУчета", Объект.СчетЗатратКурсоваяРазница);
	ОбщегоНазначенияБПКлиент.НачалоВыбораЗначенияСубконто(ЭтотОбъект, Элемент, СтандартнаяОбработка, ПараметрыДокумента);
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоЗатратКурсоваяРазницаПриИзменении(Элемент)
	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СчетДоходовКурсоваяРазницаПриИзменении(Элемент)

	ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3",
		"Субконто1ДоходовКурсоваяРазница", "Субконто2ДоходовКурсоваяРазница", "Субконто3ДоходовКурсоваяРазница");
	ПоляОбъекта.Вставить("Организация",   Объект.Организация);
	БухгалтерскийУчетКлиентСервер.ПриИзмененииСчета(Объект.СчетДоходовКурсоваяРазница, Объект, ПоляОбъекта);
	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтотОбъект);
	ЗаголовкиПолей = Новый Структура("Субконто1, Субконто2, Субконто3",
		"ЗаголовокСубконто1ДоходовКурсоваяРазница", "ЗаголовокСубконто2ДоходовКурсоваяРазница", "ЗаголовокСубконто3ДоходовКурсоваяРазница");
	УстановитьЗаголовкиИДоступностьСубконто(ЭтотОбъект, Объект.СчетДоходовКурсоваяРазница, ЗаголовкиПолей, , "ДоходовКурсоваяРазница");

КонецПроцедуры

&НаКлиенте
Процедура СубконтоДоходовКурсоваяРазницаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПараметрыДокумента = ПолучитьСписокПараметровВыбораСубконто(ЭтотОбъект, Объект, "Субконто%Индекс%ДоходовКурсоваяРазница");
	ПараметрыДокумента.Вставить("СчетУчета", Объект.СчетДоходовКурсоваяРазница);
	ОбщегоНазначенияБПКлиент.НачалоВыбораЗначенияСубконто(ЭтотОбъект, Элемент, СтандартнаяОбработка, ПараметрыДокумента);
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоДоходовКурсоваяРазницаПриИзменении(Элемент)
	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СчетЗатратКомиссионныеПриИзменении(Элемент)

	ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3",
		"Субконто1ЗатратКомиссионные", "Субконто2ЗатратКомиссионные", "Субконто3ЗатратКомиссионные");
	ПоляОбъекта.Вставить("Организация",   Объект.Организация);
	БухгалтерскийУчетКлиентСервер.ПриИзмененииСчета(Объект.СчетЗатратКомиссионные, Объект, ПоляОбъекта);
	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтотОбъект);
	ЗаголовкиПолей = Новый Структура("Субконто1, Субконто2, Субконто3",
		"ЗаголовокСубконто1ЗатратКомиссионные", "ЗаголовокСубконто2ЗатратКомиссионные", "ЗаголовокСубконто3ЗатратКомиссионные");
	УстановитьЗаголовкиИДоступностьСубконто(ЭтотОбъект, Объект.СчетЗатратКомиссионные, ЗаголовкиПолей, , "ЗатратКомиссионные");

КонецПроцедуры 

&НаКлиенте
Процедура СубконтоЗатратКомиссионныеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПараметрыДокумента = ПолучитьСписокПараметровВыбораСубконто(ЭтотОбъект, Объект, "Субконто%Индекс%ЗатратКомиссионные");
	ПараметрыДокумента.Вставить("СчетУчета", Объект.СчетЗатратКомиссионные);
	ОбщегоНазначенияБПКлиент.НачалоВыбораЗначенияСубконто(ЭтотОбъект, Элемент, СтандартнаяОбработка, ПараметрыДокумента);
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоЗатратКомиссионныеПриИзменении(Элемент)
	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтотОбъект);
	
КонецПроцедуры

// Конец Счета доходов и затрат

&НаКлиенте
Процедура СуммаВалютнаяПриИзменении(Элемент)
	
	ПересчитатьСуммыНаСервере();
	
КонецПроцедуры

#КонецОбласти 

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ПодготовитьФормуНаСервере()
	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтотОбъект);
	
	ВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	
	УстановитьКурсДокумента();
	
	ОбновитьИнформациюОКурсе(); 
	
	УправлениеФормой(ЭтотОбъект);
	
	УстановитьСостояниеДокумента();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)

	Элементы = Форма.Элементы;
	Объект   = Форма.Объект; 	
		
	Элементы.КурсУМВРПродажи.Видимость       = НЕ Объект.УстановитьКурсВручную;
	Элементы.КурсУМВРПокупки.Видимость       = НЕ Объект.УстановитьКурсВручную;
	Элементы.ФактическийКурсУМВР.Доступность = Объект.УстановитьКурсВручную;
	Элементы.ФактическийКурсУМВР.Заголовок = ?(Объект.УстановитьКурсВручную, НСтр("ru='Фактический курс';uk='Фактичний курс'"), НСтр("ru='Фактический курс (УМВР)';uk='Фактический курс (УМВР)'"));
			
	ЗаголовкиПолей = Новый Структура("Субконто1, Субконто2, Субконто3",
	"ЗаголовокСубконто1ЗатратКурсоваяРазница", "ЗаголовокСубконто2ЗатратКурсоваяРазница", "ЗаголовокСубконто3ЗатратКурсоваяРазница");
	УстановитьЗаголовкиИДоступностьСубконто(Форма, Объект.СчетЗатратКурсоваяРазница, ЗаголовкиПолей, , "ЗатратКурсоваяРазница");
	
	ЗаголовкиПолей = Новый Структура("Субконто1, Субконто2, Субконто3",
	"ЗаголовокСубконто1ДоходовКурсоваяРазница", "ЗаголовокСубконто2ДоходовКурсоваяРазница", "ЗаголовокСубконто3ДоходовКурсоваяРазница");
	УстановитьЗаголовкиИДоступностьСубконто(Форма, Объект.СчетДоходовКурсоваяРазница, ЗаголовкиПолей, , "ДоходовКурсоваяРазница");
	
	ЗаголовкиПолей = Новый Структура("Субконто1, Субконто2, Субконто3",
	"ЗаголовокСубконто1ЗатратКомиссионные", "ЗаголовокСубконто2ЗатратКомиссионные", "ЗаголовокСубконто3ЗатратКомиссионные");
	УстановитьЗаголовкиИДоступностьСубконто(Форма, Объект.СчетЗатратКомиссионные, ЗаголовкиПолей, , "ЗатратКомиссионные");	
				
КонецПроцедуры

&НаСервере
Процедура УстановитьСостояниеДокумента()
	
	СостояниеДокумента = ОбщегоНазначенияБП.СостояниеДокумента(Объект);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьКурсДокумента()
	
	СтруктураКурсаПродажи = РаботаСКурсамиВалют.ПолучитьКурсВалюты(Объект.ПродаваемаяВалюта, Объект.Дата);
	КурсПродажиДокумента      = СтруктураКурсаПродажи.Курс;
	КратностьПродажиДокумента = СтруктураКурсаПродажи.Кратность;
	
	СтруктураКурсаПокупки = РаботаСКурсамиВалют.ПолучитьКурсВалюты(Объект.ПокупаемаяВалюта, Объект.Дата);
	КурсПокупкиДокумента      = СтруктураКурсаПокупки.Курс;
	КратностьПокупкиДокумента = СтруктураКурсаПокупки.Кратность;
		
КонецПроцедуры

&НаСервере
Процедура ОбновитьИнформациюОКурсе()
	
	ОбновитьИнформациюОКурсеПродажи();
	
	ОбновитьИнформациюОКурсеПокупки();
	
	Если ЗначениеЗаполнено(Объект.ПокупаемаяВалюта) И ЗначениеЗаполнено(Объект.ПродаваемаяВалюта) Тогда
		Объект.ФактическийКурс = ?(КурсПродажиДокумента <> 0, Окр(КурсПокупкиДокумента / КурсПродажиДокумента, 5), 0);
		Объект.КурсПродажи = КурсПродажиДокумента / КратностьПродажиДокумента;
	КонецЕсли; 
	
	ПересчитатьСуммыНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьИнформациюОКурсеПродажи()
	
	Если НЕ ЗначениеЗаполнено(Объект.ПродаваемаяВалюта) Тогда
		Элементы.ИнфНадписьКурсаПродажа.Заголовок = "";
		Возврат;
	КонецЕсли;
	
	ИнфНадписьКурсаПродажи = НСтр("ru='Курс НБУ';uk='Курс НБУ'") +
	ОбщегоНазначенияБПКлиентСервер.ПолучитьИнформациюКурсаВалютыСтрокой(Объект.ПродаваемаяВалюта, КурсПродажиДокумента, КратностьПродажиДокумента, ВалютаРегламентированногоУчета, Истина);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьИнформациюОКурсеПокупки()
	
	Если НЕ ЗначениеЗаполнено(Объект.ПокупаемаяВалюта) Тогда
		Элементы.ИнфНадписьКурсаПокупка.Заголовок = "";
		Возврат;
	КонецЕсли;
	
	ИнфНадписьКурсаПокупки = НСтр("ru='Курс НБУ';uk='Курс НБУ'") +
	ОбщегоНазначенияБПКлиентСервер.ПолучитьИнформациюКурсаВалютыСтрокой(Объект.ПокупаемаяВалюта, КурсПокупкиДокумента, КратностьПокупкиДокумента, ВалютаРегламентированногоУчета, Истина);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьМассивВидовДоговоров()

	СписокВидовДоговоров = Новый Массив;
	СписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком);
	СписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.Прочее);
	
	Возврат СписокВидовДоговоров;

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьСписокПараметровВыбораСубконто(Форма, ПараметрыОбъекта, ШаблонИмяПоляОбъекта)

	СписокПараметров = Новый Структура;
	Для Индекс = 1 По 3 Цикл
		ИмяПоля = СтрЗаменить(ШаблонИмяПоляОбъекта, "%Индекс%", Индекс);
		Если ТипЗнч(ПараметрыОбъекта[ИмяПоля]) = Тип("СправочникСсылка.Контрагенты") Тогда
			СписокПараметров.Вставить("Контрагент", ПараметрыОбъекта[ИмяПоля]);
		ИначеЕсли ТипЗнч(ПараметрыОбъекта[ИмяПоля]) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
			СписокПараметров.Вставить("ДоговорКонтрагента", ПараметрыОбъекта[ИмяПоля]);
		ИначеЕсли ТипЗнч(ПараметрыОбъекта[ИмяПоля]) = Тип("СправочникСсылка.Номенклатура") Тогда
			СписокПараметров.Вставить("Номенклатура", ПараметрыОбъекта[ИмяПоля]);
		ИначеЕсли ТипЗнч(ПараметрыОбъекта[ИмяПоля]) = Тип("СправочникСсылка.Склады") Тогда
			СписокПараметров.Вставить("Склад", ПараметрыОбъекта[ИмяПоля]);
		КонецЕсли;
	КонецЦикла;
	СписокПараметров.Вставить("Организация", Форма.Объект.Организация);

	Возврат СписокПараметров;

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьЗаголовкиИДоступностьСубконто(Форма, Счет, ЗаголовкиПолей, Префикс = "", Постфикс = "")

	ПоляФормы = Новый Структура("Субконто1, Субконто2, Субконто3",
		Префикс + "Субконто1" + Постфикс,
		Префикс + "Субконто2" + Постфикс,
		Префикс + "Субконто3" + Постфикс);

	БухгалтерскийУчетКлиентСервер.ПриВыбореСчета(Счет, Форма, ПоляФормы, ЗаголовкиПолей, Ложь);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ИзменитьПараметрыВыбораПолейСубконто(Форма)

	ПараметрыДокумента = ПолучитьСписокПараметровВыбораСубконто(Форма, Форма.Объект, "Субконто%Индекс%ЗатратКурсоваяРазница");
	БухгалтерскийУчетКлиентСервер.ИзменитьПараметрыВыбораПолейСубконто(Форма, Форма.Объект,
		"Субконто%Индекс%ЗатратКурсоваяРазница",  "Субконто%Индекс%ЗатратКурсоваяРазница", ПараметрыДокумента);
		
	ПараметрыДокумента = ПолучитьСписокПараметровВыбораСубконто(Форма, Форма.Объект, "Субконто%Индекс%ДоходовКурсоваяРазница");
	БухгалтерскийУчетКлиентСервер.ИзменитьПараметрыВыбораПолейСубконто(Форма, Форма.Объект,
		"Субконто%Индекс%ДоходовКурсоваяРазница", "Субконто%Индекс%ДоходовКурсоваяРазница", ПараметрыДокумента);
		
	ПараметрыДокумента = ПолучитьСписокПараметровВыбораСубконто(Форма, Форма.Объект, "Субконто%Индекс%ЗатратКомиссионные");
	БухгалтерскийУчетКлиентСервер.ИзменитьПараметрыВыбораПолейСубконто(Форма, Форма.Объект,
		"Субконто%Индекс%ЗатратКомиссионные",	  "Субконто%Индекс%ЗатратКомиссионные", ПараметрыДокумента); 		
	
КонецПроцедуры

&НаСервере
Процедура ПересчитатьСуммыНаСервере()
	
	ДанныеОПокупаемойВалюте = МодульВалютногоУчета.ПолучитьКурсВалюты(Объект.ПокупаемаяВалюта, Объект.Дата);	
	ДанныеОВалютеРегл = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаРегламентированногоУчета, Объект.Дата);

	Если НЕ Объект.УстановитьКурсВручную Тогда		
		Объект.ФактическийКурсУМВР = ?(Объект.КурсУМВРПродажи <> 0, Окр(Объект.КурсУМВРПокупки / Объект.КурсУМВРПродажи, 5), 0);		
	КонецЕсли;	
	
	Объект.КурсоваяРазница    = (Объект.ФактическийКурсУМВР - Объект.ФактическийКурс) * Объект.СуммаВалютнаяПокупаемая;	
	Объект.СписываемаяСумма   = Объект.ФактическийКурс * Объект.СуммаВалютнаяПокупаемая;
	Объект.СуммаОстаток       = Объект.СуммаВалютнаяПродаваемая - Объект.СписываемаяСумма - Объект.КурсоваяРазница;
	Объект.СуммаСебестоимость = Объект.СписываемаяСумма * Объект.КурсПродажи;
	
	Если ЗначениеЗаполнено(Объект.ПокупаемаяВалюта) Тогда
		Объект.СуммаГривневаяПокупаемая = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(
			Объект.СуммаВалютнаяПокупаемая,
			Объект.ПокупаемаяВалюта,
			ВалютаРегламентированногоУчета,
			ДанныеОПокупаемойВалюте.Курс,
			ДанныеОВалютеРегл.Курс, 
			ДанныеОПокупаемойВалюте.Кратность,
			ДанныеОВалютеРегл.Кратность);	
	КонецЕсли; 
		
КонецПроцедуры	

#КонецОбласти 

#Область СлужебныеПроцедурыИФункцииБСП

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти
