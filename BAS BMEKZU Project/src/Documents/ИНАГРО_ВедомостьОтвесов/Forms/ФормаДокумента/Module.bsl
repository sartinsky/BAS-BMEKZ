#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
		
	Если Параметры.Ключ.Пустая() Тогда
		ПодготовитьФормуНаСервере();		
	КонецЕсли;
	
	// Уведомим о появлении функционала рабочей даты
	ЭтаФорма.НастройкиПредупреждений = ОбщегоНазначенияБП.НастройкиПредупрежденийОбИзменениях("РабочаяДатаИзДокумента");
	 
	// Показываем, если это новый документ и сама рабочая дата еще не установлена.
	ЭтаФорма.НастройкиПредупреждений.РабочаяДатаИзДокумента = ЭтаФорма.НастройкиПредупреждений.РабочаяДатаИзДокумента
	 	И ЭтаФорма.Параметры.Ключ.Пустая()
	  	И НЕ ЗначениеЗаполнено(БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("РабочаяДата"));	  
		
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)

	Если ИсточникВыбора.ИмяФормы = "РегистрСведений.СоставКомиссий.Форма.ФормаВыбора" Тогда
		ЗаполнитьЗначенияСвойств(Объект, ВыбранноеЗначение);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)

	ОбщегоНазначенияБПКлиент.ОбработкаОповещенияФормыДокумента(ЭтаФорма, Объект.Ссылка, ИмяСобытия, Параметр, Источник);
			
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если НЕ ЗавершениеРаботы Тогда
		ПередЗакрытиемНаСервере();
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПередЗакрытиемНаСервере()
	
	ХранилищеОбщихНастроек.Сохранить("ИНАГРО_ВедомостьОтвесов_ВидТМЦ",      "Элеватор", ВидТМЦ);
	ХранилищеОбщихНастроек.Сохранить("ИНАГРО_ВедомостьОтвесов_ВидОперации", "Элеватор", Объект.ВидОперации);
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	ПодготовитьФормуНаСервере();

КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)	
		
	УстановитьСостояниеДокумента();
	
КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДатаПриИзменении(Элемент) 
	
	Если НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДатаДокумента) Тогда
		// Изменение времени не влияет на поведение документа.
		ТекущаяДатаДокумента = Объект.Дата;
		Возврат;
	КонецЕсли;
	
	ТекущаяДатаДокумента = Объект.Дата;

КонецПроцедуры

&НаКлиенте
Процедура ВладелецПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.Владелец) Тогда
		
		ПараметрыОтбораДоговора = ПолучитьПараметрыДляДоговоров();
		
		ИНАГРО_ЭлеваторЗаполнениеДокументов.ПриИзмененииЗначенияКонтрагента(Объект.Дата, Объект.Организация, Объект.Владелец, Объект.ДоговорКонтрагента, ПараметрыОтбораДоговора);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура НоменклатураПриИзменении(Элемент)
	
	ВидТМЦ = ИНАГРО_Элеватор.ПолучитьДополнительныйРеквизитНоменклатуры(Объект.Номенклатура, "ВидТМЦ");

КонецПроцедуры

&НаКлиенте
Процедура ВесыПриИзменении(Элемент)
	
	Если Объект.Весы = ПредопределенноеЗначение("Перечисление.ИНАГРО_ВидыВесов.АвтомобильныеВесы") Тогда
		Объект.БункерныеВесы.Очистить();
	ИначеЕсли Объект.Весы = ПредопределенноеЗначение("Перечисление.ИНАГРО_ВидыВесов.БункерныеВесы") Тогда
		Объект.СписокТТН.Очистить();
	КонецЕсли;
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ОписаниеДвиженияФормы36НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(
		Элемент.ТекстРедактирования,
		ЭтотОбъект,
		"Объект.ОписаниеДвиженияФормы36",
		НСтр("ru='Описание движения формы 36';uk='Опис руху форми 36'"));

КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(
		Элемент.ТекстРедактирования,
		ЭтотОбъект,
		"Объект.Комментарий");

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыБункерныеВесы

&НаКлиенте
Процедура БункерныеВесыКоличествоОтвесовПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.БункерныеВесы.ТекущиеДанные;
	
	ТекущиеДанные.ВесНетто = ТекущиеДанные.КоличествоОтвесов * ТекущиеДанные.ПоказанияОтвеса;
	
КонецПроцедуры

&НаКлиенте
Процедура БункерныеВесыПоказанияОтвесаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.БункерныеВесы.ТекущиеДанные;
	
	ТекущиеДанные.ВесНетто = ТекущиеДанные.КоличествоОтвесов * ТекущиеДанные.ПоказанияОтвеса;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ВыбратьПериод(Команда)

	ПараметрыФормыВыбора = Новый Структура("НачалоПериода, КонецПериода", Объект.ДатаНачала, Объект.ДатаОкончания);
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыбратьПериодЗавершение", ЭтотОбъект);
	ОткрытьФорму("ОбщаяФорма.ВыборСтандартногоПериода", ПараметрыФормыВыбора, Элементы.ВыбратьПериод, , , , ОписаниеОповещения);
	
КонецПроцедуры 

&НаКлиенте
Процедура ВыбратьПериодЗавершение(РезультатВыбора, ДопПараметры) Экспорт
	
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Объект.ДатаНачала	 = РезультатВыбора.НачалоПериода;
	Объект.ДатаОкончания = РезультатВыбора.КонецПериода;		
		
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьСоставКомиссии(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимВыбора", Истина);

	ПараметрыФормы.Вставить("Отбор", Новый Структура("Организация", Объект.Организация));
	ОткрытьФорму("РегистрСведений.СоставКомиссий.Форма.ФормаВыбора", ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура Заполнить(Команда)
	
	Если Объект.СписокТТН.Количество() > 0 Тогда
		ТекстВопроса = НСтр("ru='Табличная часть будет очищена. Продолжить?';uk='Таблична частина буде очищена. Продовжити?'");
		Оповещение = Новый ОписаниеОповещения("ЗаполнитьЗавершение", ЭтотОбъект, Параметры);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	Иначе		
		ЗаполнитьНаСервере();		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли; 	
	
	Объект.СписокТТН.Очистить();

	ЗаполнитьНаСервере();
	
	Модифицированность = Истина;
	   
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНаСервере()
	
	Если Объект.ВидОперации = НСтр("ru='Перевзвешивание';uk ='Перезважування'") Тогда 
		Запрос = СформироватьЗапросПоТТНВнутр();
	Иначе
		Запрос = СформироватьЗапросПоТТНВывоз();
	КонецЕсли;
	
	Выборка = Запрос.Выбрать();
	
	Пока Выборка.Следующий() Цикл	
		
		НоваяСтрока = Объект.СписокТТН.Добавить();
		
		Если Объект.ВидОперации = НСтр("ru='Вывоз';uk ='Вивезення'") Тогда
			Если Выборка.НомерБланка = "" Тогда 
				НоваяСтрока.НомерТТН = Выборка.НомерТТН;
			Иначе
				НоваяСтрока.НомерТТН = Выборка.НомерБланка;	
			КонецЕсли;
		Иначе
			НоваяСтрока.НомерТТН = Выборка.НомерТТН;	
		КонецЕсли; 		
		
		НоваяСтрока.ВесБрутто = Выборка.ВесБрутто;
		НоваяСтрока.ВесТара   = Выборка.ВесТара;
		НоваяСтрока.ВесНетто  = Выборка.Вес;		
		НоваяСтрока.ТТН       = Выборка.ссылка;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ПодготовитьФормуНаСервере()

	ТекущаяДатаДокумента = Объект.Дата;			
	
	УстановитьФункциональныеОпцииФормы();
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		ВидТМЦ = ХранилищеОбщихНастроек.Загрузить("ИНАГРО_ВедомостьОтвесов_ВидТМЦ", "Элеватор");
		Если НЕ ЗначениеЗаполнено(ВидТМЦ) Тогда
			ВидТМЦ = Перечисления.ИНАГРО_ВидыТМЦ.Культура;
		КонецЕсли;		
				
	КонецЕсли;
	
	УправлениеФормой(ЭтаФорма);
	
	УстановитьСостояниеДокумента();
	
КонецПроцедуры 

&НаСервере
Процедура УстановитьФункциональныеОпцииФормы()

	ОбщегоНазначенияБПКлиентСервер.УстановитьПараметрыФункциональныхОпцийФормыДокумента(ЭтаФорма);	

КонецПроцедуры 

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)

	Элементы = Форма.Элементы;
	Объект   = Форма.Объект;
	
	АвтомобильныеВесы = Объект.Весы = ПредопределенноеЗначение("Перечисление.ИНАГРО_ВидыВесов.АвтомобильныеВесы");
	
	Элементы.ГруппаСписокТТН.Видимость     = АвтомобильныеВесы;
	Элементы.ГруппаБункерныеВесы.Видимость = НЕ АвтомобильныеВесы;
	Элементы.ВидОперации.Доступность       = АвтомобильныеВесы;
	Элементы.ВидТМЦ.Доступность            = АвтомобильныеВесы;
			
КонецПроцедуры

&НаСервере
Процедура УстановитьСостояниеДокумента()
	
	СостояниеДокумента = ОбщегоНазначенияБП.СостояниеДокумента(Объект);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьПараметрыДляДоговоров()

	ПараметрыОтбора = Новый Структура("ВидХранения, Урожай");
	ЗаполнитьЗначенияСвойств(ПараметрыОтбора, Объект);

	Возврат ПараметрыОтбора;

КонецФункции

&НаСервере
Функция СформироватьЗапросПоТТНВнутр() 
		
	Фильтр = "";
	Фильтр = Фильтр + ?(ЗначениеЗаполнено(Объект.Организация),        "И ИНАГРО_ТТНВнутр.Организация = &Организация ", "");
	Фильтр = Фильтр + ?(ЗначениеЗаполнено(Объект.Владелец),           "И ИНАГРО_ТТНВнутр.Владелец = &Владелец ", "");
	Фильтр = Фильтр + ?(ЗначениеЗаполнено(Объект.ДоговорКонтрагента), "И ИНАГРО_ТТНВнутр.ДоговорКонтрагента = &ДоговорКонтрагента ", "");
	Фильтр = Фильтр + ?(ЗначениеЗаполнено(Объект.Склад),              "И ИНАГРО_ТТНВнутр.Склад = &Склад ", "");
	Фильтр = Фильтр + ?(ЗначениеЗаполнено(Объект.ВидХранения),        "И ИНАГРО_ТТНВнутр.ВидХранения = &ВидХранения ", "");
	Фильтр = Фильтр + ?(ЗначениеЗаполнено(Объект.Урожай),             "И ИНАГРО_ТТНВнутр.Урожай = &Урожай ", "");
	Фильтр = Фильтр + ?(ЗначениеЗаполнено(Объект.Номенклатура),       "И ИНАГРО_ДополнительныеРеквизитыНоменклатуры.ВидТМЦ = &ВидТМЦ ", "");

	Запрос = Новый Запрос;
		
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ИНАГРО_ТТНВнутр.Номер КАК НомерТТН,
		|	ИНАГРО_ТТНВнутр.ВесВывоз КАК Вес,
		|	ИНАГРО_ТТНВнутр.ссылка КАК ссылка,
		
		|	ИНАГРО_ТТНВнутр.ВесБруттоВывоз + ИНАГРО_ТТНВнутр.ВесБрутто1Вывоз КАК ВесБрутто,
		|	ИНАГРО_ТТНВнутр.ВесТарыВывоз + ИНАГРО_ТТНВнутр.ВесТары1Вывоз КАК ВесТара
		|ИЗ
		|	Документ.ИНАГРО_ТТНВнутр КАК ИНАГРО_ТТНВнутр
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИНАГРО_ДополнительныеРеквизитыНоменклатуры КАК ИНАГРО_ДополнительныеРеквизитыНоменклатуры
		|		ПО ИНАГРО_ТТНВнутр.Номенклатура = ИНАГРО_ДополнительныеРеквизитыНоменклатуры.Номенклатура
		|ГДЕ
		|	ИНАГРО_ТТНВнутр.Проведен = ИСТИНА " + Фильтр + "
		|	И ИНАГРО_ТТНВнутр.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
		|	И ИНАГРО_ТТНВнутр.ВидОперации <> &ВидОперации";
	
	Запрос.УстановитьПараметр("Организация",        Объект.Организация);
	Запрос.УстановитьПараметр("Владелец",           Объект.Владелец);
	Запрос.УстановитьПараметр("ДоговорКонтрагента", Объект.ДоговорКонтрагента);
	Запрос.УстановитьПараметр("Склад",              Объект.Склад);
	Запрос.УстановитьПараметр("ВидХранения",        Объект.ВидХранения);	
	Запрос.УстановитьПараметр("Урожай",             Объект.Урожай);
	Запрос.УстановитьПараметр("ДатаНачала",         Объект.ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания",      Объект.ДатаОкончания);
	Запрос.УстановитьПараметр("ВидТМЦ",             ВидТМЦ);	
	Запрос.УстановитьПараметр("ВидОперации",        Перечисления.ИНАГРО_ВидыОперацийТТНВнутр.Перевзвешивание);

	Возврат Запрос.Выполнить();
	
КонецФункции

&НаСервере
Функция СформироватьЗапросПоТТНВывоз(Ссылка = Неопределено)
		
	Фильтр = "";
	Фильтр = Фильтр + ?(ЗначениеЗаполнено(Объект.Организация),        "И ИНАГРО_ТТНВывоз.Организация = &Организация ", "");
	Фильтр = Фильтр + ?(ЗначениеЗаполнено(Объект.Владелец),           "И ИНАГРО_ТТНВывоз.Владелец = &Владелец ", "");
	Фильтр = Фильтр + ?(ЗначениеЗаполнено(Объект.ДоговорКонтрагента), "И ИНАГРО_ТТНВывоз.ДоговорКонтрагента = &ДоговорКонтрагента ", "");
	Фильтр = Фильтр + ?(ЗначениеЗаполнено(Объект.Склад),              "И ИНАГРО_ТТНВывоз.Склад = &Склад ", "");
	Фильтр = Фильтр + ?(ЗначениеЗаполнено(Объект.ВидХранения),        "И ИНАГРО_ТТНВывоз.ВидХранения = &ВидХранения ", "");
	Фильтр = Фильтр + ?(ЗначениеЗаполнено(Объект.Номенклатура),       "И ИНАГРО_ТТНВывоз.Номенклатура = &Номенклатура ", "");
	Фильтр = Фильтр + ?(ЗначениеЗаполнено(Объект.Урожай),             "И ИНАГРО_ТТНВывоз.Урожай = &Урожай ", "");
	
	Запрос = Новый Запрос;	
		
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ИНАГРО_ТТНВывоз.Номер КАК НомерТТН,
		|	ИНАГРО_ТТНВывоз.НомерБланка КАК НомерБланка,
		|	ИНАГРО_ТТНВывоз.ссылка КАК ссылка,
		|	ИНАГРО_ТТНВывоз.Вес КАК Вес,
		|	ИНАГРО_ТТНВывоз.ВесБрутто + ИНАГРО_ТТНВывоз.ВесБрутто1 КАК ВесБрутто,
		|	ИНАГРО_ТТНВывоз.ВесТары1 + ИНАГРО_ТТНВывоз.ВесТары КАК ВесТара
		|ИЗ
		|	Документ.ИНАГРО_ТТНВывоз КАК ИНАГРО_ТТНВывоз
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИНАГРО_ДополнительныеРеквизитыНоменклатуры КАК ИНАГРО_ДополнительныеРеквизитыНоменклатуры
		|		ПО ИНАГРО_ТТНВывоз.Номенклатура = ИНАГРО_ДополнительныеРеквизитыНоменклатуры.Номенклатура
		|ГДЕ
		|	ИНАГРО_ТТНВывоз.Проведен = ИСТИНА " + Фильтр + "
		|	И ИНАГРО_ТТНВывоз.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
		|	И ИНАГРО_ДополнительныеРеквизитыНоменклатуры.ВидТМЦ = &ВидТМЦ
		|	И ИНАГРО_ТТНВывоз.ВидОперации <> &ВидОперации";
	
	Запрос.УстановитьПараметр("Организация",        Объект.Организация);
	Запрос.УстановитьПараметр("Владелец",           Объект.Владелец);
	Запрос.УстановитьПараметр("ДоговорКонтрагента", Объект.ДоговорКонтрагента);
	Запрос.УстановитьПараметр("Склад",              Объект.Склад);
	Запрос.УстановитьПараметр("ВидХранения",        Объект.ВидХранения);	
	Запрос.УстановитьПараметр("Номенклатура",       Объект.Номенклатура);	
	Запрос.УстановитьПараметр("Урожай",             Объект.Урожай);
	Запрос.УстановитьПараметр("ДатаНачала",         Объект.ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания",      Объект.ДатаОкончания);
	Запрос.УстановитьПараметр("ВидТМЦ",             ВидТМЦ);	
	Запрос.УстановитьПараметр("ВидОперации",        Перечисления.ИНАГРО_ВидыОперацийТТНВывоз.ВывозФасованного);

	Возврат Запрос.Выполнить();
	
КонецФункции

#КонецОбласти  

#Область СлужебныеПроцедурыИФункцииБСП

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти