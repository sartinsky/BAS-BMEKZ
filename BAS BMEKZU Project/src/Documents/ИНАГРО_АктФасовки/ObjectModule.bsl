#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда  

Перем мВалютаРегламентированногоУчета; 
Перем ПартионныйУчетБУ; 

#Область ОбработчикиСобытий

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	ТипДанныхЗаполнения = ТипЗнч(ДанныеЗаполнения);
	Если ДанныеЗаполнения <> Неопределено И ТипДанныхЗаполнения <> Тип("Структура")
		И Метаданные().ВводитсяНаОсновании.Содержит(ДанныеЗаполнения.Метаданные()) Тогда
		ЗаполнитьПоДокументуОснованию(ДанныеЗаполнения);
	КонецЕсли;
	
	ИНАГРО_ЭлеваторЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект);

	ЗаполнениеДокументов.Заполнить(ЭтотОбъект, ДанныеЗаполнения);
	
	Если  ТипДанныхЗаполнения = Тип("Структура")
		И ДанныеЗаполнения.Свойство("ВидОперации") Тогда
		ВидОперации = ДанныеЗаполнения.ВидОперации;
	КонецЕсли;
		
	Если НЕ ЗначениеЗаполнено(СчетЗатрат) Тогда
		СчетЗатрат = ПланыСчетов.Хозрасчетный.ОсновноеПроизводство;			
	КонецЕсли;
	
	УрожайДляПереработки = ХранилищеОбщихНастроек.Загрузить("УрожайДляПереработки", "Элеватор");
	Урожай = ?(ЗначениеЗаполнено(УрожайДляПереработки), УрожайДляПереработки, Урожай);	
					
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)	
	
	МассивНепроверяемыхРеквизитов = Новый Массив; 	
	
	Если ВидОперации = Перечисления.ИНАГРО_ВидыОперацийПереработка.СкладскойУчет Тогда		
		МассивНепроверяемыхРеквизитов.Добавить("Владелец");	
		МассивНепроверяемыхРеквизитов.Добавить("ДоговорКонтрагента");
		МассивНепроверяемыхРеквизитов.Добавить("ВидХранения");
		МассивНепроверяемыхРеквизитов.Добавить("Урожай");
	КонецЕсли;
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);	
	
	Если ОтражатьВБухгалтерскомУчете И НЕ НеВестиСчетЗатрат И ЗначениеЗаполнено(СчетЗатрат) Тогда
		КоличествоСубконто = СчетЗатрат.ВидыСубконто.Количество();		
		Для СчетчикСубконто = 1 По КоличествоСубконто Цикл 
			Если СчетЗатрат.ВидыСубконто[СчетчикСубконто-1].Предопределенное Тогда
				ПроверяемыеРеквизиты.Добавить("Субконто" + СчетчикСубконто);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли; 	
	
	ХранилищеОбщихНастроек.Сохранить("УрожайДляПереработки", "Элеватор", Урожай);
	
	Если НЕ ИНАГРО_Элеватор.ПолучитьПараметрУчетаЭлеватора(Дата, "ОтключитьАвтоматическоеНачислениеУслуг", Ложь) Тогда 
		ЗаполнитьУслуги();
	КонецЕсли;

КонецПроцедуры 

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	Перем Заголовок, СтруктураШапкиДокумента;
	Перем ТаблицаСырья, ТаблицаПродукции;
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКПроведению(ЭтотОбъект);
		   
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначенияБПВызовСервера.ПредставлениеДокументаПриПроведении(Ссылка);
	
	СуммаДолейСтоимости = Продукция.Итог("ДоляСтоимости");
	Если СуммаДолейСтоимости <> 100  Тогда
		ТекстСообщения = НСтр("ru='Сумма долей стоимости должна быть равна 100%!';uk='Сума часток вартості повинна дорівнює 100%!'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
	ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента);	
	
	ПодготовитьПараметрыУчетнойПолитики(СтруктураШапкиДокумента, Отказ, Заголовок);	
	
	ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаСырья, ТаблицаПродукции, Отказ, Заголовок);
		
	// Движения по документу
	Если Не Отказ Тогда
		ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаСырья, ТаблицаПродукции, Отказ, Заголовок);
	КонецЕсли;
	
	Движения.Хозрасчетный.ВыполнитьДействияПередЗаписьюДвижений();

	ПроведениеСервер.ПодготовитьНаборыЗаписейКЗаписиДвижений(ЭтотОбъект);	

КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКОтменеПроведения(ЭтотОбъект);
	Движения.Записать();
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)

	Дата = НачалоДня(ОбщегоНазначения.ТекущаяДатаПользователя());
	Ответственный = Пользователи.ТекущийПользователь();	
		
КонецПроцедуры

#КонецОбласти

#Область Проведение

// Процедура формирует структуру шапки документа и дополнительных полей.
//
Процедура ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента) Экспорт

	// Дерево значений, содержащее имена необходимых полей в запросе по шапке.
	Перем ДеревоПолейЗапросаПоШапке;	
	
	СтруктураШапкиДокумента = ОбщегоНазначенияРед12.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	
	// Заполним по шапке документа дерево параметров, нужных при проведении.
	ДеревоПолейЗапросаПоШапке = ОбщегоНазначенияРед12.СформироватьДеревоПолейЗапросаПоШапке(); 	
	
	ОбщегоНазначенияРед12.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "Организация",          "ДоговорОрганизация");
	ОбщегоНазначенияРед12.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "ВидДоговора",          "ВидДоговора");
	ОбщегоНазначенияРед12.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Склад",                "ТипСклада",            "ТипСклада");
	ОбщегоНазначенияРед12.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "СложныйНалоговыйУчет", "СложныйНалоговыйУчет");

	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа.
	СтруктураШапкиДокумента = УправлениеЗапасами.СформироватьЗапросПоДеревуПолей(ЭтотОбъект, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета);
		
КонецПроцедуры

// Процедура определяет параметры учетной политики
//
Процедура ПодготовитьПараметрыУчетнойПолитики(СтруктураШапкиДокумента, Отказ, Заголовок)
	
	РазрешитьУчетУслугБезПлановыхЦен = НЕ УчетнаяПолитика.ПорядокРаспределенияРасходовНаОказаниеУслуг(СтруктураШапкиДокумента.Организация, СтруктураШапкиДокумента.Дата) = Перечисления.ПорядокРаспределенияРасходовНаОказаниеУслуг.ПоПлановымЦенам;
	
	СтруктураШапкиДокумента.Вставить("ЕстьНалогНаПрибыльДо2015",         УчетнаяПолитика.ПлательщикНалогаНаПрибыльДо2015(СтруктураШапкиДокумента.Организация, СтруктураШапкиДокумента.Дата));
	СтруктураШапкиДокумента.Вставить("ЕстьНДС",                          УчетнаяПолитика.ПлательщикНДС(СтруктураШапкиДокумента.Организация, СтруктураШапкиДокумента.Дата));
	СтруктураШапкиДокумента.Вставить("РазрешитьУчетУслугБезПлановыхЦен", РазрешитьУчетУслугБезПлановыхЦен);
	
	СпособОценкиМПЗ = УчетнаяПолитика.СпособОценкиМПЗ(СтруктураШапкиДокумента.Организация, СтруктураШапкиДокумента.Дата);
	ПартионныйУчетБУ = (СпособОценкиМПЗ = Перечисления.СпособыОценки.ФИФО) ИЛИ (СпособОценкиМПЗ = Перечисления.СпособыОценки.ЛИФО);
	
КонецПроцедуры

Процедура ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаСырья, ТаблицаПродукции, Отказ, Заголовок)
	
	// Таблица сырья
	
	СтруктураПолей = Новый Структура();
	СтруктураПростыхПолей = Новый Структура;
	
	СтруктураПолей.Вставить("Номенклатура",          "Номенклатура");
	СтруктураПолей.Вставить("Количество",            "ФизическийВес * Коэффициент");
	СтруктураПолей.Вставить("СчетУчетаБУ",           "СчетУчетаБУ");
	СтруктураПолей.Вставить("НалоговоеНазначение",   "НалоговоеНазначение");	
	СтруктураПолей.Вставить("ДокументОприходования", "ДокументОприходования");
	СтруктураПолей.Вставить("Субконто1",             "Ссылка.Субконто1");
	СтруктураПолей.Вставить("Субконто2",             "Ссылка.Субконто2"); 				
	СтруктураПолей.Вставить("Субконто3",             "Ссылка.Субконто3");
	
	// Для НалоговоеНазначениеДоходовИЗатрат
	ХарактерЗатрат = УправлениеПроизводствомВызовСервера.ПолучитьХарактерЗатратПоСчетуЗатрат(СчетЗатрат,,Дата);                                                                                                  
	
	Если НЕ (ХарактерЗатрат = "Производство" ИЛИ ХарактерЗатрат = "Строительство" ИЛИ ХарактерЗатрат = "ТЗР" ИЛИ ХарактерЗатрат = "РБП" ИЛИ ХарактерЗатрат = "ОПЗ") Тогда
		СтруктураПолей.Вставить("НалоговоеНазначениеНовое", "Ссылка.НалоговоеНазначениеДоходовИЗатрат");
	Иначе	
		ХарактерЗатрат = Неопределено;
		НалоговоеНазначениеПроводки = Неопределено;
		НалоговоеНазначениеНДС = НСтр("ru='Из табличной части';uk='З табличної частини'");
		СтруктураСубконто = Новый Структура("Субконто1,Субконто2,Субконто3", Субконто1, Субконто2, Субконто3);
		НалоговыйУчет.ОпределениеАналитикиНалоговогоУчетаВПроводкахДляЗатрат(СтруктураСубконто, СчетЗатрат, ХарактерЗатрат, 
		НалоговоеНазначениеПроводки, ,
		НалоговоеНазначениеНДС,,
		,Дата);
		Если Строка(НалоговоеНазначениеПроводки) = "Из табличной части" Тогда
			СтруктураПолей.Вставить("НалоговоеНазначениеНовое", "НалоговоеНазначение");
		Иначе
			СтруктураПростыхПолей.Вставить("НалоговоеНазначениеНовое", НалоговоеНазначениеПроводки);
		КонецЕсли;
	КонецЕсли;
	
	РезультатЗапросаПоСырью = ОбщегоНазначенияРед12.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Сырье", СтруктураПолей, СтруктураПростыхПолей);
	ТаблицаСырья = ПодготовитьТаблицуСырьяБУХ(РезультатЗапросаПоСырью, СтруктураШапкиДокумента);

	// Таблица по продукции
	
	СтруктураПолей = Новый Структура();
	СтруктураПростыхПолей = Новый Структура;
	
	СтруктураПолей.Вставить("Номенклатура",             "Номенклатура");
	СтруктураПолей.Вставить("Количество",               "ФизическийВес * Коэффициент");	
	СтруктураПолей.Вставить("СчетУчетаБУ",              "СчетУчетаБУ");
	СтруктураПолей.Вставить("СуммаПлановая",            "СуммаПлановая");
	СтруктураПолей.Вставить("НалоговоеНазначениеНовое", "НалоговоеНазначение");	
	Если ТипЗнч(Субконто1) = Тип("СправочникСсылка.ПодразделенияОрганизаций") Тогда
		СтруктураПолей.Вставить("Подразделение", "Ссылка.Субконто1");
	ИначеЕсли ТипЗнч(Субконто2) = Тип("СправочникСсылка.ПодразделенияОрганизаций") Тогда
		СтруктураПолей.Вставить("Подразделение",        "Ссылка.Субконто2");
	Иначе
		СтруктураПолей.Вставить("Подразделение",        "Ссылка.Субконто3");
	КонецЕсли;
	Если НеВестиСчетЗатрат Тогда                               
		СтруктураПолей.Вставить("НоменклатурнаяГруппа", "Номенклатура.НоменклатурнаяГруппа");
	Иначе		
		Если ТипЗнч(Субконто1) = Тип("СправочникСсылка.НоменклатурныеГруппы") Тогда
			СтруктураПолей.Вставить("НоменклатурнаяГруппа", "Ссылка.Субконто1");
		ИначеЕсли ТипЗнч(Субконто2) = Тип("СправочникСсылка.НоменклатурныеГруппы") Тогда
			СтруктураПолей.Вставить("НоменклатурнаяГруппа", "Ссылка.Субконто2");
		Иначе
			СтруктураПолей.Вставить("НоменклатурнаяГруппа", "Ссылка.Субконто3");
		КонецЕсли;
	КонецЕсли;
	Если ТипЗнч(Субконто1) = Тип("СправочникСсылка.СтатьиЗатрат") Тогда
		СтруктураПолей.Вставить("СтатьяЗатрат", "Ссылка.Субконто1");
	ИначеЕсли ТипЗнч(Субконто2) = Тип("СправочникСсылка.СтатьиЗатрат") Тогда
		СтруктураПолей.Вставить("СтатьяЗатрат", "Ссылка.Субконто2");
	Иначе
		СтруктураПолей.Вставить("СтатьяЗатрат", "Ссылка.Субконто3");
	КонецЕсли;	
	СтруктураПолей.Вставить("КорСчетСписанияБУ",       "Ссылка.СчетЗатрат");		
	СтруктураПолей.Вставить("КорСубконтоСписанияБУ1",  "Ссылка.Субконто1"); 				
	СтруктураПолей.Вставить("КорСубконтоСписанияБУ2",  "Ссылка.Субконто2");
	СтруктураПолей.Вставить("КорСубконтоСписанияБУ3",  "Ссылка.Субконто3");	
	СтруктураПолей.Вставить("Субконто1",               "Ссылка.Субконто1");
	СтруктураПолей.Вставить("Субконто2",               "Ссылка.Субконто2");
	СтруктураПолей.Вставить("Субконто3",               "Ссылка.Субконто3");
	
	ХарактерЗатрат = УправлениеПроизводствомВызовСервера.ПолучитьХарактерЗатратПоСчетуЗатрат(СчетЗатрат,,Дата);                                                                                                  
	
	Если НЕ (ХарактерЗатрат = "Производство" ИЛИ ХарактерЗатрат = "Строительство" ИЛИ ХарактерЗатрат = "ТЗР" ИЛИ ХарактерЗатрат = "РБП" ИЛИ ХарактерЗатрат = "ОПЗ") Тогда
		СтруктураПолей.Вставить("НалоговоеНазначение"	 , "Ссылка.НалоговоеНазначениеДоходовИЗатрат");
	Иначе	
		ХарактерЗатрат = Неопределено;
		НалоговоеНазначениеПроводки = Неопределено;
		НалоговоеНазначениеНДС = НСтр("ru='Из табличной части';uk='З табличної частини'");
		СтруктураСубконто = Новый Структура("Субконто1,Субконто2,Субконто3", Субконто1, Субконто2, Субконто3);
		НалоговыйУчет.ОпределениеАналитикиНалоговогоУчетаВПроводкахДляЗатрат(СтруктураСубконто, СчетЗатрат, ХарактерЗатрат, 
		НалоговоеНазначениеПроводки, ,
		НалоговоеНазначениеНДС,,
		,Дата);
		Если Строка(НалоговоеНазначениеПроводки) = "Из табличной части" Тогда
			СтруктураПолей.Вставить("НалоговоеНазначение", "НалоговоеНазначение");
		Иначе
			СтруктураПростыхПолей.Вставить("НалоговоеНазначение", НалоговоеНазначениеПроводки);
		КонецЕсли;
	КонецЕсли;
	
	РезультатЗапросаПоПродукции = ОбщегоНазначенияРед12.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Продукция", СтруктураПолей, СтруктураПростыхПолей);
	ТаблицаПродукции = РезультатЗапросаПоПродукции.Выгрузить();
		
КонецПроцедуры

Функция ПодготовитьТаблицуСырьяБУХ(РезультатЗапросаПоСырью, СтруктураШапкиДокумента)
	
	ТаблицаСырья = РезультатЗапросаПоСырью.Выгрузить();
	
	ТаблицаСырья.Колонки.Добавить("Регистратор");
	ТаблицаСырья.Колонки.Добавить("Склад");
	ТаблицаСырья.Колонки.Добавить("Организация");
	ТаблицаСырья.Колонки.Добавить("ДоговорКонтрагента");
	ТаблицаСырья.Колонки.Добавить("Валюта");
	ТаблицаСырья.Колонки.Добавить("ВходящийНДС");
	ТаблицаСырья.Колонки.Добавить("КоэффОплаты");
	ТаблицаСырья.Колонки.Добавить("СчетУчетаНУ");
	
	КоэффОплаты = 1;
	
	ТаблицаСырья.ЗаполнитьЗначения(КоэффОплаты,   							   "КоэффОплаты");
	ТаблицаСырья.ЗаполнитьЗначения(ЭтотОбъект,    							   "Регистратор");
	ТаблицаСырья.ЗаполнитьЗначения(СтруктураШапкиДокумента.Склад,      	       "Склад");
	ТаблицаСырья.ЗаполнитьЗначения(СтруктураШапкиДокумента.Организация,	       "Организация");
	ТаблицаСырья.ЗаполнитьЗначения(СтруктураШапкиДокумента.ДоговорКонтрагента, "ДоговорКонтрагента");	
	
	ТаблицаСырья.Колонки.Добавить("НоменклатурнаяГруппа");
	ТаблицаСырья.Колонки.Добавить("КорСчетСписанияБУ");
	ТаблицаСырья.Колонки.Добавить("КорСубконтоСписанияБУ1");
	ТаблицаСырья.Колонки.Добавить("КорСубконтоСписанияБУ2");
	ТаблицаСырья.Колонки.Добавить("КорСубконтоСписанияБУ3"); 
	ТаблицаСырья.ЗаполнитьЗначения(СчетЗатрат,                                 "КорСчетСписанияБУ");
	ТаблицаСырья.ЗаполнитьЗначения(Субконто1,                                  "КорСубконтоСписанияБУ1");
	ТаблицаСырья.ЗаполнитьЗначения(Субконто2,                                  "КорСубконтоСписанияБУ2");
	ТаблицаСырья.ЗаполнитьЗначения(Субконто3,                                  "КорСубконтоСписанияБУ3");	
		
	Возврат ТаблицаСырья;
	
КонецФункции

// Процедура выполняет движения по регистрам
//
Процедура ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаСырья, ТаблицаПродукции, Отказ, Заголовок)
	
	ПровестиПоРегистрамЭлеватора(РежимПроведения, СтруктураШапкиДокумента, Отказ, Заголовок);
	
	// Движения по регистрам (бухгалтерии, налоговым, накопления - для партий) если владелец является собственным подразделением.
	Если ОтражатьПоЗатратам И ВидОперации = Перечисления.ИНАГРО_ВидыОперацийПереработка.СобственноеСырье Тогда
		Если ОтражатьВБухгалтерскомУчете Тогда
			СписаниеСырьяБУХ(Движения, СтруктураШапкиДокумента, ТаблицаСырья, Отказ);
			ПриходПродукцииБУХ(Движения, СтруктураШапкиДокумента,ТаблицаПродукции,Отказ);
		КонецЕсли;		
	КонецЕсли;
	
	Движения.Хозрасчетный.Записать();
	
	ИНАГРО_Общий.ИНАГРО_ДвиженияВыпускПродукции(СтруктураШапкиДокумента, Движения);
	ИНАГРО_Общий.ИНАГРО_ДвиженияЗатратыОрганизации_Приход(СтруктураШапкиДокумента, Движения);
		
КонецПроцедуры 

Процедура ПровестиПоРегистрамЭлеватора(РежимПроведения, СтруктураШапкиДокумента, Отказ, Заголовок)
	
	СтруктураШапкиДокумента.Вставить("КоличествоМест", 0);              
	
	ВестиУчетПоПереработке = ИНАГРО_Элеватор.ПолучитьПараметрУчетаЭлеватора(СтруктураШапкиДокумента.Дата, "ВестиУчетПоПереработке", Ложь); 	
	
	// расход сырья
	Для Каждого СтрокаТабличнойЧасти Из Сырье цикл
		
		СтруктураДвиженияПроведенияБУХ(Сырье, СтруктураШапкиДокумента, СтрокаТабличнойЧасти);
	    СтруктураШапкиДокумента.Вставить("НомерАнализа", СтрокаТабличнойЧасти.НомерАнализа);

		Если ВестиУчетПоПереработке Тогда 
			
			Если ВидОперации = Перечисления.ИНАГРО_ВидыОперацийПереработка.СкладскойУчет Тогда
				ИНАГРО_Элеватор.ДвиженияПоРегиструДвиженияПоПереработке(Движения, СтруктураШапкиДокумента, ВидДвиженияНакопления.Приход);			
			Иначе
				ИНАГРО_Элеватор.ДвиженияПоРегиструОстаткиРасход(Движения, СтруктураШапкиДокумента);
				ИНАГРО_Элеватор.ДвиженияПоРегиструОстаткиСводнаяРасход(Движения, СтруктураШапкиДокумента); 
				ИНАГРО_Элеватор.ДвиженияПоРегиструФорма36Расход(Движения, СтруктураШапкиДокумента);
				ИНАГРО_Элеватор.ДвиженияПоРегиструФорма36СводнаяРасход(Движения, СтруктураШапкиДокумента);				
				ИНАГРО_Элеватор.ДвиженияПоРегиструДвиженияПоПереработке(Движения, СтруктураШапкиДокумента, ВидДвиженияНакопления.Расход);			
			КонецЕсли;
			
		Иначе
			
			Если ВидОперации <> Перечисления.ИНАГРО_ВидыОперацийПереработка.СкладскойУчет Тогда
				ИНАГРО_Элеватор.ДвиженияПоРегиструОстаткиРасход(Движения, СтруктураШапкиДокумента);
				ИНАГРО_Элеватор.ДвиженияПоРегиструОстаткиСводнаяРасход(Движения, СтруктураШапкиДокумента); 
				ИНАГРО_Элеватор.ДвиженияПоРегиструФорма36Расход(Движения, СтруктураШапкиДокумента);
				ИНАГРО_Элеватор.ДвиженияПоРегиструФорма36СводнаяРасход(Движения, СтруктураШапкиДокумента);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// приход продукции
	Для Каждого СтрокаТабличнойЧасти Из Продукция цикл
		
		СтруктураДвиженияПроведенияБУХ(Продукция, СтруктураШапкиДокумента, СтрокаТабличнойЧасти);
	    СтруктураШапкиДокумента.Вставить("НомерАнализа", СтрокаТабличнойЧасти.НомерАнализа);

		Если ВестиУчетПоПереработке Тогда 							
			
			Если ВидОперации = Перечисления.ИНАГРО_ВидыОперацийПереработка.СкладскойУчет Тогда
				ИНАГРО_Элеватор.ДвиженияПоРегиструДвиженияПоПереработке(Движения, СтруктураШапкиДокумента, ВидДвиженияНакопления.Расход);			
			Иначе 
				ИНАГРО_Элеватор.ДвиженияПоРегиструОстаткиПриход(Движения, СтруктураШапкиДокумента);
				ИНАГРО_Элеватор.ДвиженияПоРегиструОстаткиСводнаяПриход(Движения, СтруктураШапкиДокумента);
				ИНАГРО_Элеватор.ДвиженияПоРегиструФорма36Приход(Движения, СтруктураШапкиДокумента);
				ИНАГРО_Элеватор.ДвиженияПоРегиструФорма36СводнаяПриход(Движения, СтруктураШапкиДокумента);
				ИНАГРО_Элеватор.ДвиженияПоРегиструДвиженияПоПереработке(Движения, СтруктураШапкиДокумента, ВидДвиженияНакопления.Приход);							
			КонецЕсли;
			
		Иначе 
			
			Если ВидОперации <> Перечисления.ИНАГРО_ВидыОперацийПереработка.СкладскойУчет Тогда
				ИНАГРО_Элеватор.ДвиженияПоРегиструОстаткиПриход(Движения, СтруктураШапкиДокумента);
				ИНАГРО_Элеватор.ДвиженияПоРегиструОстаткиСводнаяПриход(Движения, СтруктураШапкиДокумента); 
				ИНАГРО_Элеватор.ДвиженияПоРегиструФорма36Приход(Движения, СтруктураШапкиДокумента);
				ИНАГРО_Элеватор.ДвиженияПоРегиструФорма36СводнаяПриход(Движения, СтруктураШапкиДокумента);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ВидОперации = Перечисления.ИНАГРО_ВидыОперацийПереработка.ДавальческоеСырье Тогда
		ТаблицаУслуг = СформироватьТаблицуУслуг();
		
		Если ТаблицаУслуг.Количество() > 0 Тогда
			ИНАГРО_Элеватор.ДвиженияПоРегиструРасчетыПоУслугам(Движения, ТаблицаУслуг, "Приход");
		КонецЕсли;
				
	КонецЕсли;
	
КонецПроцедуры	

// Процедура для списания сырья по регистрам в случаи если владелец является собственным подразделением.
//
Процедура СписаниеСырьяБУХ(Движения, СтруктураШапкиДокумента, ТаблицаСырья, Отказ)
	
	// списание товара
	УправлениеЗапасамиПартионныйУчет.ДвижениеПартийТоваров(ТаблицаСырья, Отказ, , );
	
КонецПроцедуры

// Процедура для оприходования продукции по регистрам в случаи если владелец является собственным подразделением.
//
Процедура ПриходПродукцииБУХ(Движения, СтруктураШапкиДокумента, ТаблицаПродукции, Отказ)
	
	Если Продукция.Количество() = 0 ИЛИ НЕ ОтражатьВБухгалтерскомУчете Тогда
		Возврат;
	КонецЕсли;
	
	ОперацияБУ = Движения["Хозрасчетный"];
	ДвиженияВыпускПродукцииУслугБУ = Движения["ВыпускПродукцииУслугБухгалтерскийУчет"];
	ТаблицаДвиженийВыпускБУ        = ДвиженияВыпускПродукцииУслугБУ.Выгрузить();
	
	Если НЕ Отказ Тогда
		
		Для Каждого Строка Из ТаблицаПродукции Цикл
			
			ВестиУчетПоСебестоимости = ИНАГРО_Элеватор.ПолучитьДополнительныйРеквизитНоменклатуры(Строка.Номенклатура, "ВестиУчетПоСебестоимости");
			Если ВестиУчетПоСебестоимости Тогда
				Продолжить;
			КонецЕсли;	
			
			СчетУчетаБУ         = Строка.СчетУчетаБУ;
			СчетЗатратТекущий   = СчетЗатрат;
			
			СтруктураАналитикиПродукции = ПолучитьАналитикуПродукции(Строка);
			Если НЕ ЗначениеЗаполнено(Строка.НалоговоеНазначение) Тогда
				Строка.НалоговоеНазначение = СтруктураАналитикиПродукции.НоменклатурнаяГруппа.НалоговоеНазначениеВПроизводстве;
			КонецЕсли;
			
			// Сформируем проводку.
			Если НЕ ЗначениеЗаполнено(СчетУчетаБУ)
				ИЛИ НЕ ЗначениеЗаполнено(СчетЗатратТекущий) Тогда
				Возврат;
			КонецЕсли;
			
			НоваяПроводка = ОперацияБУ.Добавить();
			
			НоваяПроводка.Организация = Организация;
			НоваяПроводка.Период      = Дата;
			
			НоваяПроводка.СчетДт = СчетУчетаБУ;
			БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, "Номенклатура", Строка.Номенклатура);
			БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, "Склады",       НовыйСклад);
			
			// Если способ оценки ФИФО или ЛИФО и на счете ведется партионный учет,
			// то в проводке указываем в качестве партии текущий документ.
			Если ПартионныйУчетБУ Тогда
				БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, "Партии",       Ссылка);
			КонецЕсли; 
			
			НоваяПроводка.Содержание = НСтр("ru='Выпуск продукции';uk='Випуск продукції'", Локализация.КодЯзыкаИнформационнойБазы());
			
			НоваяПроводка.СчетКт = СчетЗатратТекущий;
			
			БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетКт, НоваяПроводка.СубконтоКт, "Подразделения",        СтруктураАналитикиПродукции.Подразделение);
			БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетКт, НоваяПроводка.СубконтоКт, "НоменклатурныеГруппы", СтруктураАналитикиПродукции.НоменклатурнаяГруппа);
			
			НоваяПроводка.КоличествоДт = ?(НоваяПроводка.СчетДТ.Количественный, Строка.Количество, 0);
			НоваяПроводка.Сумма        = Строка.СуммаПлановая;
			Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыльДо2015
				И Строка.НалоговоеНазначение <> Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяНеХозДеятельность Тогда									
				НоваяПроводка.СуммаНУДт = Строка.СуммаПлановая;
				НоваяПроводка.СуммаНУКт = Строка.СуммаПлановая;
			КонецЕсли;
			НоваяПроводка.НалоговоеНазначениеДт = Строка.НалоговоеНазначение;
			НоваяПроводка.НалоговоеНазначениеКт = Строка.НалоговоеНазначение;
			
			// Отражения выпуска в регистре накопления ВыпускПродукцииУслуг
			СтрокаДвижения = ТаблицаДвиженийВыпускБУ.Добавить();
			СтрокаДвижения.Организация           = Организация;
			СтрокаДвижения.Продукция             = Строка.Номенклатура;
			СтрокаДвижения.СчетЗатрат            = СчетЗатратТекущий;
			СтрокаДвижения.Подразделение         = ПодразделениеОрганизации;
			СтрокаДвижения.НоменклатурнаяГруппа  = Строка.НоменклатурнаяГруппа;
			СтрокаДвижения.СчетСписания          = СчетУчетаБУ;
			СтрокаДвижения.НалоговоеНазначениеДоходовИЗатрат = Строка.НалоговоеНазначение; 
			
			Если СчетУчетаБУ.ВидыСубконто.Количество() > 0 Тогда
				СтрокаДвижения.СубконтоСписания1 = НоваяПроводка.СубконтоДт[НоваяПроводка.СчетДт.ВидыСубконто[0].ВидСубконто];
			КонецЕсли; 
			
			Если СчетУчетаБУ.ВидыСубконто.Количество() > 1 Тогда
				СтрокаДвижения.СубконтоСписания2 = НоваяПроводка.СубконтоДт[НоваяПроводка.СчетДт.ВидыСубконто[1].ВидСубконто];
			КонецЕсли;
			
			Если СчетУчетаБУ.ВидыСубконто.Количество() > 2 Тогда
				СтрокаДвижения.СубконтоСписания3 = НоваяПроводка.СубконтоДт[НоваяПроводка.СчетДт.ВидыСубконто[2].ВидСубконто];
			КонецЕсли;
			
			СтрокаДвижения.Количество = Строка.Количество;
			СтрокаДвижения.ПлановаяСтоимость = Строка.СуммаПлановая;
			
		КонецЦикла;
		
		ДвиженияВыпускПродукцииУслугБУ.мПериод = Дата;
		ДвиженияВыпускПродукцииУслугБУ.мТаблицаДвижений = ТаблицаДвиженийВыпускБУ;
		
		ДвиженияВыпускПродукцииУслугБУ.ДобавитьДвижение();
		
		
	КонецЕсли;
	
	Движения.Хозрасчетный.ВыполнитьДействияПередЗаписьюДвижений();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ЗаполнитьПоДокументуОснованию(Основание)
	
	Если    ТипЗнч(Основание) = Тип("ДокументСсылка.ИНАГРО_Переработка")
		ИЛИ ТипЗнч(Основание) = Тип("ДокументСсылка.ИНАГРО_ПриходИзПроизводства") Тогда
		
		Организация                 = Основание.Организация;
		ОтражатьВБухгалтерскомУчете = Истина;		
		Владелец                    = Основание.Владелец;
		ДоговорКонтрагента          = Основание.ДоговорКонтрагента;		
		Склад                       = Основание.Склад;
		ВидХранения                 = Основание.ВидХранения;		
		Урожай                      = Основание.Урожай;
		ПодразделениеОрганизации    = Основание.ПодразделениеОрганизации;

		СобственноеПодразделение    = ИНАГРО_Элеватор.ПолучитьДополнительныйРеквизитКонтрагента(Владелец, "СобственноеПодразделение");

		Если СобственноеПодразделение Тогда
			ВидОперации        = Перечисления.ИНАГРО_ВидыОперацийПереработка.СобственноеСырье;
			ОтражатьПоЗатратам = Истина;
		Иначе
			ВидОперации        = Перечисления.ИНАГРО_ВидыОперацийПереработка.ДавальческоеСырье;
			ОтражатьПоЗатратам = Ложь;
		КонецЕсли;
		
		СчетЗатрат = ?(ВидОперации = Перечисления.ИНАГРО_ВидыОперацийПереработка.СобственноеСырье,
			ПланыСчетов.Хозрасчетный.ОсновноеПроизводство,
			ПланыСчетов.Хозрасчетный.ПроизводствоИзДавальческогоСырья);
		
		Для Каждого СтрокаТабличнойЧасти Из Основание.Продукция Цикл
			
			НоваяСтрока = Сырье.Добавить();
			НоваяСтрока.Номенклатура       = СтрокаТабличнойЧасти.Номенклатура;
			НоваяСтрока.ЕдиницаИзмерения   = СтрокаТабличнойЧасти.Номенклатура.БазоваяЕдиницаИзмерения;
			НоваяСтрока.Коэффициент        = 1;						
			НоваяСтрока.ФизическийВес      = СтрокаТабличнойЧасти.ФизическийВес;
			НоваяСтрока.ЗачетныйВес        = СтрокаТабличнойЧасти.ФизическийВес;
			НоваяСтрока.ЛабораторныйАнализ = СтрокаТабличнойЧасти.ЛабораторныйАнализ;
			НоваяСтрока.НомерАнализа       = СтрокаТабличнойЧасти.ЛабораторныйАнализ.Номер;
			НоваяСтрока.Влажность          = СтрокаТабличнойЧасти.ЛабораторныйАнализ.Влажность;
			НоваяСтрока.СорнаяПримесь      = СтрокаТабличнойЧасти.ЛабораторныйАнализ.СорнаяПримесь;
			НоваяСтрока.ЗерноваяПримесь    = СтрокаТабличнойЧасти.ЛабораторныйАнализ.ЗерноваяПримесь;			
						
		КонецЦикла;
		
		Документы.ИНАГРО_АктФасовки.ЗаполнитьСчетаУчетаВТабличнойЧасти(ЭтотОбъект, "Сырье", СобственноеПодразделение);
	
	КонецЕсли;
			
КонецПроцедуры

Процедура ЗаполнитьУслуги() Экспорт
	
	Если НеПересчитыватьУслугиПриЗаписи Тогда
		Возврат;
	КонецЕсли;	
	
	ТаблицаУслуг = Новый ТаблицаЗначений;
	ТаблицаУслуг.Колонки.Добавить("Номенклатура");
	ТаблицаУслуг.Колонки.Добавить("Количество");
	ТаблицаУслуг.Колонки.Добавить("Сумма"); 
	ТаблицаУслуг.Колонки.Добавить("Культура");
	
	ВладелецУслуги = Владелец;
	
	Если НЕ ИНАГРО_Элеватор.ОпределитьПринадлежностьКонтрагента(ВладелецУслуги) Тогда
		ОформитьУслугу = Истина;
	Иначе
		ОформитьУслугу = Ложь;
	КонецЕсли;
	
	Если ОформитьУслугу Тогда
		
		Номенклатура_Фасовка = ИНАГРО_Элеватор.ПолучитьПредопределеннуюНоменклатуру("Фасовка");
		
		Если ЗначениеЗаполнено(Номенклатура_Фасовка) Тогда
			
			Если ВидХранения.ТипДоговора = Справочники.ВидыВзаиморасчетов.ДоговорХранения Тогда
				
				Для Каждого СтрокаТабличнойЧасти Из Сырье Цикл
					
					ВидКультурыДляРасчетаСтоимостиУслуги = ИНАГРО_Элеватор.ПолучитьДополнительныйРеквизитНоменклатуры(СтрокаТабличнойЧасти.Номенклатура, "ВидКультуры").ВидКультурыДляРасчетаСтоимостиУслуги;

					ТекущаяЦена = ИНАГРО_Элеватор.ПолучитьЦенуУслугиЭлеватора(Организация,
					                                                          Дата,
																			  ВладелецУслуги,
																			  ДоговорКонтрагента,
																			  ВидКультурыДляРасчетаСтоимостиУслуги,
																			  Урожай,
																			  Номенклатура_Фасовка);
					
					Если ТекущаяЦена <> 0 И СтрокаТабличнойЧасти.ФизическийВес <> 0 Тогда							 
						НоваяСтрока              = ТаблицаУслуг.Добавить();						
						НоваяСтрока.Культура     = СтрокаТабличнойЧасти.Номенклатура;
						НоваяСтрока.Номенклатура = Номенклатура_Фасовка;             						
						НоваяСтрока.Количество   = СтрокаТабличнойЧасти.ЗачетныйВес / 1000;
						НоваяСтрока.Сумма        = НоваяСтрока.Количество * ТекущаяЦена;						
					Иначе
						ПараметрыОтбора = Новый Структура;
						ПараметрыОтбора.Вставить("Номенклатура", Номенклатура_Фасовка);
						НайденныеСтроки = Услуги.НайтиСтроки(ПараметрыОтбора);
						Для каждого Строк_Усл из НайденныеСтроки Цикл
							Услуги.Удалить(Строк_Усл);
						КонецЦикла;
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;	
	
	// заполнение таблицы услуг
	ТаблицаУслуг.Свернуть("Номенклатура, Культура", "Количество,Сумма");
	Для Каждого Строка_Услуг Из ТаблицаУслуг Цикл
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("Культура", Строка_Услуг.культура);
		НайденныеСтроки = Услуги.НайтиСтроки(ПараметрыОтбора);
		Если НайденныеСтроки.Количество() = 0 Тогда
			НоваяСтрока              = Услуги.Добавить();
			НоваяСтрока.Номенклатура = Строка_Услуг.Номенклатура;
			НоваяСтрока.Количество   = Строка_Услуг.Количество;
			НоваяСтрока.Сумма        = Строка_Услуг.Сумма;
			НоваяСтрока.Цена         = Строка_Услуг.Сумма/Строка_Услуг.Количество;
			НоваяСтрока.Культура     = Строка_Услуг.культура;
		Иначе
			Для Каждого Строк_Усл Из НайденныеСтроки Цикл 				
				Строк_Усл.Номенклатура = Строка_Услуг.Номенклатура;
				Строк_Усл.Количество   = Строка_Услуг.Количество;
				Строк_Усл.Цена         = Строка_Услуг.Сумма/Строка_Услуг.Количество;
				Строк_Усл.Сумма        = Строка_Услуг.Сумма;
				Строк_Усл.культура     = Строка_Услуг.Культура; 				  
			КонецЦикла;	
		КонецЕсли;		
	КонецЦикла;
		
КонецПроцедуры

Процедура СтруктураДвиженияПроведенияБУХ(ИмяТабЧасти, СтруктураШапкиДокумента, СтрокаТабличнойЧасти)
	
	СтруктураШапкиДокумента.Вставить("Номенклатура",       СтрокаТабличнойЧасти.Номенклатура);
	СтруктураШапкиДокумента.Вставить("НомерАнализа",       СтрокаТабличнойЧасти.НомерАнализа);
	СтруктураШапкиДокумента.Вставить("ЛабораторныйАнализ", СтрокаТабличнойЧасти.ЛабораторныйАнализ);
	СтруктураШапкиДокумента.Вставить("ФизическийВес",      СтрокаТабличнойЧасти.ФизическийВес);
	СтруктураШапкиДокумента.Вставить("Влажность",          СтрокаТабличнойЧасти.Влажность);
	СтруктураШапкиДокумента.Вставить("СорнаяПримесь",      СтрокаТабличнойЧасти.СорнаяПримесь);
	СтруктураШапкиДокумента.Вставить("ЗерноваяПримесь",    СтрокаТабличнойЧасти.ЗерноваяПримесь);
	СтруктураШапкиДокумента.Вставить("Поставщик",          Владелец);
	СтруктураШапкиДокумента.Вставить("Откуда",             Склад);
	
	Если ИмяТабЧасти = Продукция Тогда
		Если Не НовыйСклад.Ссылка.Пустая() Тогда
			СтруктураШапкиДокумента.Вставить("Склад",     НовыйСклад.Ссылка);
		Иначе
			СтруктураШапкиДокумента.Вставить("Склад",     Склад.Ссылка);
		КонецЕсли;	
		Если Не НовыйВидХранения.Ссылка.Пустая() Тогда
			СтруктураШапкиДокумента.Вставить("ВидХранения", НовыйВидХранения.Ссылка);
		Иначе
			СтруктураШапкиДокумента.Вставить("ВидХранения", ВидХранения.Ссылка);
		КонецЕсли;	
		СтруктураШапкиДокумента.Вставить("ЗачетныйВес", СтрокаТабличнойЧасти.ФизическийВес);
		
	Иначе
		СтруктураШапкиДокумента.Вставить("ЗачетныйВес", СтрокаТабличнойЧасти.ЗачетныйВес);
		СтруктураШапкиДокумента.Вставить("ВидХранения", ВидХранения.Ссылка);
	КонецЕсли;
	СтруктураШапкиДокумента.Вставить("ВидФасовки",         СтрокаТабличнойЧасти.Фасовка);
	СтруктураШапкиДокумента.Вставить("Количество",         СтрокаТабличнойЧасти.Количество);
	
КонецПроцедуры

Функция СформироватьТаблицуУслуг()
	
	ТаблицаУслуг = Новый ТаблицаЗначений;
	ТаблицаУслуг.Колонки.Добавить("ДатаРасчета");
	ТаблицаУслуг.Колонки.Добавить("Ссылка"); 
	ТаблицаУслуг.Колонки.Добавить("Организация");
	ТаблицаУслуг.Колонки.Добавить("Контрагент");
	ТаблицаУслуг.Колонки.Добавить("ДоговорКонтрагента");
	ТаблицаУслуг.Колонки.Добавить("Номенклатура");
	ТаблицаУслуг.Колонки.Добавить("Культура");
	ТаблицаУслуг.Колонки.Добавить("Склад");
	ТаблицаУслуг.Колонки.Добавить("ВидХранения");
	ТаблицаУслуг.Колонки.Добавить("Урожай");
	ТаблицаУслуг.Колонки.Добавить("Количество");
	ТаблицаУслуг.Колонки.Добавить("Стоимость"); 
	
	ВладелецУслуги = Владелец;
	
	СобственноеПодразделение = ИНАГРО_Элеватор.ПолучитьДополнительныйРеквизитКонтрагента(Владелец, "СобственноеПодразделение");
	Номенклатура_Фасовка     = ИНАГРО_Элеватор.ПолучитьПредопределеннуюНоменклатуру("Фасовка");

	Если НЕ СобственноеПодразделение Тогда	
		
		Для Каждого СтрокаТабличнойЧасти Из Услуги Цикл
			
			ВидКультурыДляРасчетаСтоимостиУслуги = ИНАГРО_Элеватор.ПолучитьДополнительныйРеквизитНоменклатуры(СтрокаТабличнойЧасти.Номенклатура, "ВидКультуры").ВидКультурыДляРасчетаСтоимостиУслуги;
			
			ТекущаяЦена = ИНАГРО_Элеватор.ПолучитьЦенуУслугиЭлеватора(Организация,
			                                                          Дата,
																	  ВладелецУслуги,
																	  ДоговорКонтрагента,
																	  ВидКультурыДляРасчетаСтоимостиУслуги,
																	  Урожай,
																	  Номенклатура_Фасовка);
			
			Если ТекущаяЦена <> 0 Тогда
				
				НоваяСтрока = ТаблицаУслуг.Добавить();
				НоваяСтрока.ДатаРасчета        = Дата;  
				НоваяСтрока.Ссылка             = Ссылка; 
				НоваяСтрока.Организация        = Организация;
				НоваяСтрока.Контрагент         = ВладелецУслуги;
				НоваяСтрока.ДоговорКонтрагента = ДоговорКонтрагента;
				НоваяСтрока.Номенклатура       = Номенклатура_Фасовка;
				НоваяСтрока.Культура           = СтрокаТабличнойЧасти.Культура;
				НоваяСтрока.Склад              = Склад;
				НоваяСтрока.ВидХранения        = ВидХранения;
				НоваяСтрока.Урожай             = Урожай;    				
				НоваяСтрока.Количество         = СтрокаТабличнойЧасти.Количество;
				НоваяСтрока.Стоимость          = НоваяСтрока.Количество * ТекущаяЦена;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ТаблицаУслуг;
	
КонецФункции

Функция ПолучитьАналитикуПродукции(СтрокаТабличнойЧасти)
	
	СтруктураАналитикиПродукции = Новый Структура("Подразделение, НоменклатурнаяГруппа, СтатьяЗатрат");
	
	// Подразделение
	Если ТипЗнч(Субконто1) = ТипЗнч(Справочники.ПодразделенияОрганизаций.ПустаяСсылка()) Тогда
		Подразделения_ = Субконто1;
	ИначеЕсли ТипЗнч(Субконто2) = ТипЗнч(Справочники.ПодразделенияОрганизаций.ПустаяСсылка()) Тогда	
		Подразделения_ = Субконто2;
	ИначеЕсли ТипЗнч(Субконто3) = ТипЗнч(Справочники.ПодразделенияОрганизаций.ПустаяСсылка()) Тогда	
		Подразделения_ = Субконто3;
	КонецЕсли; 
	СтруктураАналитикиПродукции.Подразделение = Подразделения_;
	
	// НоменклатурныеГруппы
	Если ТипЗнч(Субконто1) = ТипЗнч(Справочники.НоменклатурныеГруппы.ПустаяСсылка()) Тогда
		НоменклатурныеГруппы_ = Субконто1;
	ИначеЕсли ТипЗнч(Субконто2) = ТипЗнч(Справочники.НоменклатурныеГруппы.ПустаяСсылка()) Тогда	
		НоменклатурныеГруппы_ = Субконто2;
	ИначеЕсли ТипЗнч(Субконто3) = ТипЗнч(Справочники.НоменклатурныеГруппы.ПустаяСсылка()) Тогда	
		НоменклатурныеГруппы_ = Субконто3;
	КонецЕсли; 
	СтруктураАналитикиПродукции.НоменклатурнаяГруппа = НоменклатурныеГруппы_;
		
	Возврат СтруктураАналитикиПродукции;
	
КонецФункции

#КонецОбласти

мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();

#КонецЕсли