#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПараметрыРазмещения = ПодключаемыеКоманды.ПараметрыРазмещения();
	ПараметрыРазмещения.КоманднаяПанель = Элементы.ГруппаВажныеКоманды;
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект, ПараметрыРазмещения);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

	
	Если Параметры.Ключ.Пустая() Тогда
		ПодготовитьФормуНаСервере();
	КонецЕсли;
	
	// Активизировать первую непустую табличную часть
	СписокТабличныхЧастей = Новый СписокЗначений;
	СписокТабличныхЧастей.Добавить("Продукция",               "Продукция");
	СписокТабличныхЧастей.Добавить("Услуги",                  "Услуги");
	СписокТабличныхЧастей.Добавить("ИспользованныеМатериалы", "ИспользованныеМатериалы");
	СписокТабличныхЧастей.Добавить("ВозвращенныеМатериалы",   "ВозвращенныеМатериалы");
	СписокТабличныхЧастей.Добавить("ВозвратнаяТара",          "ВозвратнаяТара");

	АктивизироватьТабличнуюЧасть = ОбщегоНазначенияБПВызовСервера.ПолучитьПервуюНепустуюВидимуюТабличнуюЧасть(
		ЭтаФорма, СписокТабличныхЧастей);
	ОбщегоНазначенияБПВызовСервера.АктивизироватьЭлементФормы(ЭтаФорма, АктивизироватьТабличнуюЧасть);
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)

	Если ИсточникВыбора.ИмяФормы = "Обработка.ПодборНоменклатуры.Форма.Форма" Тогда
		ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение, ИсточникВыбора.ИмяТаблицы);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)

	ОбщегоНазначенияБПКлиент.ОбработкаОповещенияФормыДокумента(ЭтаФорма, Объект.Ссылка, ИмяСобытия, Параметр, Источник);

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом

	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	ПодготовитьФормуНаСервере();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)

	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	ЗаполнитьДобавленныеКолонкиТаблиц();
	
	
	УстановитьСостояниеДокумента();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)

	Если НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДатаДокумента) Тогда
		// Изменение времени не влияет на поведение документа.
		ТекущаяДатаДокумента = Объект.Дата;
		Возврат;
	КонецЕсли;

	// Общие проверки условий по датам.
	ТребуетсяВызовСервера = ОбщегоНазначенияБПКлиент.ТребуетсяВызовСервераПриИзмененииДатыДокумента(Объект.Дата, 
		ТекущаяДатаДокумента, Объект.ВалютаДокумента, ВалютаРегламентированногоУчета);
		
	// Если определили, что изменение даты может повлиять на какие-либо параметры, 
	// то передаем обработку на сервер.
	Если ТребуетсяВызовСервера Тогда
		ДатаПриИзмененииНаСервере();
	КонецЕсли;
	
	// Запомним новую дату документа.
	ТекущаяДатаДокумента = Объект.Дата;

КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)

	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		ОрганизацияПриИзмененииНаСервере();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СкладПриИзменении(Элемент)

	Если ЗначениеЗаполнено(Объект.Склад) Тогда
		СкладПриИзмененииНаСервере();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)

	Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
		КонтрагентПриИзмененииНаСервере();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДоговорКонтрагентаПриИзменении(Элемент)

	Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		
		ДоговорКонтрагентаПриИзмененииНаСервере();
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СделкаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;

	ПараметрыОбъекта = Новый Структура;
	ПараметрыОбъекта.Вставить("Дата"                 , Объект.Дата);
	ПараметрыОбъекта.Вставить("ДоговорКонтрагента"   , Объект.ДоговорКонтрагента);
	ПараметрыОбъекта.Вставить("Контрагент"           , Объект.Контрагент);
	ПараметрыОбъекта.Вставить("СчетУчета"            , Объект.СчетУчетаРасчетовПоАвансам);
	ПараметрыОбъекта.Вставить("Организация"          , Объект.Организация);
	ПараметрыОбъекта.Вставить("ОстаткиОбороты"       , "Кт");
	ПараметрыОбъекта.Вставить("ТипыДокументов"       , "Метаданные.Документы.ПоступлениеИзПереработки.Реквизиты.Сделка.Тип");

	ПараметрыФормы = Новый Структура("ПараметрыОбъекта", ПараметрыОбъекта);
	ОткрытьФорму("Документ.ДокументРасчетовСКонтрагентом.ФормаВыбора", ПараметрыФормы, Элемент);
		
КонецПроцедуры

&НаКлиенте
Процедура ЦеныИВалютаНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОбработатьИзмененияПоКнопкеЦеныИВалюты();

КонецПроцедуры

&НаКлиенте
Процедура ЕстьАвансДо01042011ПриИзменении(Элемент)
	
	УправлениеФормой(ЭтаФорма);
	
	Если НЕ Объект.ЕстьАвансДо01042011 Тогда
		
		Объект.СуммаВДВРПоАвансуДо01042011 = 0;	
		
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПродукция

&НаКлиенте
Процедура ПродукцияНоменклатураПриИзменении(Элемент)

	ТекущиеДанные = Элементы.Продукция.ТекущиеДанные;
	
	ДанныеСтрокиТаблицы = Новый Структура(
		"Номенклатура, Количество,
		|ЕдиницаИзмерения, Коэффициент,
		|СуммаПлановая, ПлановаяСтоимость,
		|Счет, Спецификация");
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, ТекущиеДанные);
	
	ДанныеОбъекта = Новый Структура("Дата, Организация, Склад");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
	ПродукцияНоменклатураПриИзмененииНаСервере(ДанныеСтрокиТаблицы, ДанныеОбъекта);
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтрокиТаблицы);

КонецПроцедуры

&НаКлиенте
Процедура ПродукцияЕдиницаИзмеренияПриИзменении(Элемент)

	ТекущиеДанные = Элементы.Продукция.ТекущиеДанные;
	
	ДанныеСтрокиТаблицы = Новый Структура(
		"Номенклатура, Количество,
		|ЕдиницаИзмерения, Коэффициент,
		|СуммаПлановая, ПлановаяСтоимость,
		|Счет, Спецификация");
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, ТекущиеДанные);
	
	ДанныеОбъекта = Новый Структура("Дата, Организация, Склад");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
	ПродукцияЕдиницаИзмеренияПриИзмененииНаСервере(
		ДанныеСтрокиТаблицы, ДанныеОбъекта);
		
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтрокиТаблицы);
		
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПродукцияЕдиницаИзмеренияПриИзмененииНаСервере(СтрокаТабличнойЧасти, Знач ДанныеОбъекта)

	ОбработкаТабличныхЧастей.ЗаполнитьКоэффициентТабЧасти(СтрокаТабличнойЧасти, ДанныеОбъекта);
	
	ОбработкаТабличныхЧастейКлиентСервер.ПересчитатьПлановуюСумму(СтрокаТабличнойЧасти);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияПересчитатьСумму(Элемент)

	СтрокаТабличнойЧасти = Элементы.Продукция.ТекущиеДанные;
	ОбработкаТабличныхЧастейКлиентСервер.ПересчитатьПлановуюСумму(СтрокаТабличнойЧасти);

КонецПроцедуры

&НаКлиенте
Процедура ПродукцияСуммаПлановаяПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Продукция.ТекущиеДанные;

	Если СтрокаТабличнойЧасти.Количество = 0 Тогда
		Возврат;
	КонецЕсли;

	СтрокаТабличнойЧасти.ПлановаяСтоимость = СтрокаТабличнойЧасти.СуммаПлановая / СтрокаТабличнойЧасти.Количество;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыУслуги

&НаКлиенте
Процедура УслугиПриИзменении(Элемент)
	
	РассчитатьПропорциональныйНДС(Объект, ПлательщикНДС, КоэффициентПропорциональногоНДС);
	
	ОбновитьИтоги(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если НоваяСтрока И ОтменаРедактирования Тогда
		РассчитатьПропорциональныйНДС(Объект, ПлательщикНДС, КоэффициентПропорциональногоНДС);
		ОбновитьИтоги(ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиПослеУдаления(Элемент)
	
	РассчитатьПропорциональныйНДС(Объект, ПлательщикНДС, КоэффициентПропорциональногоНДС);
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиНоменклатураПриИзменении(Элемент)

	ТекущиеДанные = Элементы.Услуги.ТекущиеДанные;
	
	ДанныеСтрокиТаблицы = Новый Структура(
		"Номенклатура, Содержание, Количество,
		|Цена, Сумма, СтавкаНДС, СуммаНДС, СпособУчетаНДС, НалоговоеНазначение, 
		|СтатьяЗатрат, СчетУчетаНДС");
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, ТекущиеДанные);
	
	ДанныеОбъекта = Новый Структура("Дата, Организация, Склад, ТипЦен, СуммаВключаетНДС,
		|ВалютаДокумента, КурсВзаиморасчетов, КратностьВзаиморасчетов, ДоговорКонтрагента");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
	УслугиНоменклатураПриИзмененииНаСервере(ДанныеСтрокиТаблицы, ДанныеОбъекта);
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтрокиТаблицы);

КонецПроцедуры

&НаКлиенте
Процедура УслугиПересчитатьСумму(Элемент)

	ТекущиеДанные = Элементы.Услуги.ТекущиеДанные;
	ОбщегоНазначенияБПКлиент.ПересчитатьСумму(ТекущиеДанные, Объект.СуммаВключаетНДС, 1);

КонецПроцедуры

&НаКлиенте
Процедура УслугиПересчитатьЦену(Элемент)

	ТекущиеДанные = Элементы.Услуги.ТекущиеДанные;
	ТекущиеДанные.Цена = ТекущиеДанные.Сумма / ?(ТекущиеДанные.Количество = 0, 1, ТекущиеДанные.Количество);
	ОбщегоНазначенияБПКлиент.ПересчитатьСуммуНДС(ТекущиеДанные, Объект.СуммаВключаетНДС);

КонецПроцедуры

&НаКлиенте
Процедура УслугиСтавкаНДСПриИзменении(Элемент)

	ОбработкаТабличныхЧастейКлиентСервер.ПриИзмененииСтавкаНДС(ЭтаФорма, "Услуги");

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыИспользованныеМатериалы

&НаКлиенте
Процедура ИспользованныеМатериалыНоменклатураПриИзменении(Элемент)

	ТекущиеДанные = Элементы.ИспользованныеМатериалы.ТекущиеДанные;
	
	ДанныеСтрокиТаблицы = Новый Структура(
		"Номенклатура, Количество, СчетУчетаБУ, СтатьяЗатрат,
		|ЕдиницаИзмерения, Коэффициент, НалоговоеНазначение");
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, ТекущиеДанные);
	
	ДанныеОбъекта = Новый Структура("Дата, Организация, Склад");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
	ИспользованныеМатериалыНоменклатураПриИзмененииНаСервере(ДанныеСтрокиТаблицы, ДанныеОбъекта);
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтрокиТаблицы);

КонецПроцедуры

&НаКлиенте
Процедура ИспользованныеМатериалыЕдиницаИзмеренияПриИзменении(Элемент)

	ТекущиеДанные = Элементы.ИспользованныеМатериалы.ТекущиеДанные;
	
	ДанныеСтрокиТаблицы = Новый Структура(
		"Номенклатура, Количество, СчетУчетаБУ, СтатьяЗатрат,
		|ЕдиницаИзмерения, Коэффициент, НалоговоеНазначение");
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, ТекущиеДанные);
	
	ДанныеОбъекта = Новый Структура("Дата, Организация, Склад");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
	ИспользованныеМатериалыЕдиницаИзмеренияПриИзмененииНаСервере(
		ДанныеСтрокиТаблицы, ДанныеОбъекта);
		
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтрокиТаблицы);
		
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ИспользованныеМатериалыЕдиницаИзмеренияПриИзмененииНаСервере(СтрокаТабличнойЧасти, Знач ДанныеОбъекта)

	ОбработкаТабличныхЧастей.ЗаполнитьКоэффициентТабЧасти(СтрокаТабличнойЧасти, ДанныеОбъекта);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыВозвращенныеМатериалы

&НаКлиенте
Процедура ВозвращенныеМатериалыНоменклатураПриИзменении(Элемент)

	ТекущиеДанные = Элементы.ВозвращенныеМатериалы.ТекущиеДанные;
	
	ДанныеСтрокиТаблицы = Новый Структура(
		"Номенклатура, Количество, СчетУчетаБУ, СчетПередачиБУ, 
		|ЕдиницаИзмерения, Коэффициент, НалоговоеНазначение");
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, ТекущиеДанные);
	
	ДанныеОбъекта = Новый Структура("Дата, Организация, Склад");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
	ВозвращенныеМатериалыНоменклатураПриИзмененииНаСервере(ДанныеСтрокиТаблицы, ДанныеОбъекта);
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтрокиТаблицы);

КонецПроцедуры

&НаКлиенте
Процедура ВозвращенныеМатериалыЕдиницаИзмеренияПриИзменении(Элемент)

	ТекущиеДанные = Элементы.ВозвращенныеМатериалы.ТекущиеДанные;
	
	ДанныеСтрокиТаблицы = Новый Структура(
		"Номенклатура, Количество, СчетУчетаБУ, СчетПередачиБУ,
		|ЕдиницаИзмерения, Коэффициент, НалоговоеНазначение");
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, ТекущиеДанные);
	
	ДанныеОбъекта = Новый Структура("Дата, Организация, Склад");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
	ВозвращенныеМатериалыЕдиницаИзмеренияПриИзмененииНаСервере(
		ДанныеСтрокиТаблицы, ДанныеОбъекта);
		
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтрокиТаблицы);
		
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ВозвращенныеМатериалыЕдиницаИзмеренияПриИзмененииНаСервере(СтрокаТабличнойЧасти, Знач ДанныеОбъекта)

	ОбработкаТабличныхЧастей.ЗаполнитьКоэффициентТабЧасти(СтрокаТабличнойЧасти, ДанныеОбъекта);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыВозвратнаяТара

&НаКлиенте
Процедура ВозвратнаяТараПриИзменении(Элемент)
	
	ЕстьВозвратнаяТара = Объект.ВозвратнаяТара.Количество() > 0;
	
КонецПроцедуры

&НаКлиенте
Процедура ВозвратнаяТараНоменклатураПриИзменении(Элемент)

	ТекущиеДанные = Элементы.ВозвратнаяТара.ТекущиеДанные;
	
	ДанныеСтрокиТаблицы = Новый Структура(
		"Номенклатура, Количество, Цена, Сумма, СчетУчетаБУ, НалоговоеНазначение");
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, ТекущиеДанные);
	
	ДанныеОбъекта = Новый Структура("Дата, Организация, Склад, ТипЦен, СуммаВключаетНДС,
		|ВалютаДокумента, КурсВзаиморасчетов, КратностьВзаиморасчетов");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	ДанныеОбъекта.СуммаВключаетНДС = Истина;
	
	ВозвратнаяТараНоменклатураПриИзмененииНаСервере(ДанныеСтрокиТаблицы, ДанныеОбъекта);
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтрокиТаблицы);

КонецПроцедуры

&НаКлиенте
Процедура ВозвратнаяТараПересчитатьСумму(Элемент)

	ТекущиеДанные = Элементы.ВозвратнаяТара.ТекущиеДанные;
	ОбщегоНазначенияБПКлиент.ПересчитатьСумму(ТекущиеДанные, Объект.СуммаВключаетНДС, 1);

КонецПроцедуры

&НаКлиенте
Процедура ВозвратнаяТараСуммаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ВозвратнаяТара.ТекущиеДанные;

	Если ТекущиеДанные.Количество = 0 Тогда
		Возврат;
	КонецЕсли;

	ТекущиеДанные.Цена = ТекущиеДанные.Сумма / ТекущиеДанные.Количество;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПодборПродукция(Команда)

	ОткрытьФорму(
		"Обработка.ПодборНоменклатуры.Форма.Форма",
		ПолучитьПараметрыПодбора("Продукция"),
		ЭтаФорма,
		УникальныйИдентификатор);

КонецПроцедуры

&НаКлиенте
Процедура ПодборУслуги(Команда)

	ОткрытьФорму(
		"Обработка.ПодборНоменклатуры.Форма.Форма",
		ПолучитьПараметрыПодбора("Услуги"),
		ЭтаФорма,
		УникальныйИдентификатор);

КонецПроцедуры

&НаКлиенте
Процедура ПодборВозвратнойТары(Команда)

	ОткрытьФорму(
		"Обработка.ПодборНоменклатуры.Форма.Форма",
		ПолучитьПараметрыПодбора("ВозвратнаяТара"),
		ЭтаФорма,
		УникальныйИдентификатор);

КонецПроцедуры

&НаКлиенте
Процедура ПодборИспользованныеМатериалы(Команда)

	ОткрытьФорму(
		"Обработка.ПодборНоменклатуры.Форма.Форма",
		ПолучитьПараметрыПодбора("ИспользованныеМатериалы"),
		ЭтаФорма,
		УникальныйИдентификатор);

КонецПроцедуры

&НаКлиенте
Процедура ПодборВозвращенныеМатериалы(Команда)

	ОткрытьФорму(
		"Обработка.ПодборНоменклатуры.Форма.Форма",
		ПолучитьПараметрыПодбора("ВозвращенныеМатериалы"),
		ЭтаФорма,
		УникальныйИдентификатор);

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьИспользованныеМатериалыОстатками(Команда)

	Если НЕ ЗначениеЗаполнено(Объект.Контрагент) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Укажите контрагента';uk='Вкажіть контрагента'"), Объект.Ссылка, "Контрагент", "Объект");
		Возврат;
	КонецЕсли;

	Если Объект.ИспользованныеМатериалы.Количество() > 0 Тогда
		ТекстВопроса = НСтр("ru='Перед заполнением табличная часть будет очищена.
|Заполнить?';uk='Перед заповненням таблична частина буде очищена.
|Заповнити?'");
		Оповещение = Новый ОписаниеОповещения("ВопросПередЗаполнениемТабличнойЧастиМатериалыЗавершение", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	Иначе
		ЗаполнитьИспользованныеМатериалыОстаткамиНаСервере();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьВозвращенныеМатериалыОстатками(Команда)

	Если НЕ ЗначениеЗаполнено(Объект.Контрагент) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Укажите контрагента';uk='Вкажіть контрагента'"), Объект.Ссылка, "Контрагент", "Объект");
		Возврат;
	КонецЕсли;
	
	Если Объект.ВозвращенныеМатериалы.Количество() > 0 Тогда
		ТекстВопроса = НСтр("ru='Перед заполнением табличная часть будет очищена.
|Заполнить?';uk='Перед заповненням таблична частина буде очищена.
|Заповнити?'");
		Оповещение = Новый ОписаниеОповещения("ВопросПередЗаполнениемТабличнойЧастиВозвращенныеМатериалыЗавершение", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	Иначе
		ЗаполнитьВозвращенныеМатериалыОстаткамиНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьИспользованныеМатериалыПоСпецификации(Команда)

	Если Объект.ИспользованныеМатериалы.Количество() > 0 Тогда
		ТекстВопроса = НСтр("ru='Перед заполнением табличная часть будет очищена.
|Заполнить?';uk='Перед заповненням таблична частина буде очищена.
|Заповнити?'");
	Иначе
		Если ЭтаФорма.Модифицированность Тогда
			ТекстВопроса = НСтр("ru='Перед заполнением необходимо записать документ."
			"Записать?';uk='Перед заповненням необхідно записати документ."
			"Записати?'");
		КонецЕсли;

	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура("ТабЧасть", "ИспользованныеМатериалы");
	Оповещение = Новый ОписаниеОповещения("ВопросПередЗаполнениемТабличнойЧастиМатериалыПоСпецификацииЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьВозвращенныеМатериалыПоСпецификации(Команда)

	Если Объект.ВозвращенныеМатериалы.Количество() > 0 Тогда
		ТекстВопроса = НСтр("ru='Перед заполнением табличная часть будет очищена.
|Заполнить?';uk='Перед заповненням таблична частина буде очищена.
|Заповнити?'");
		ДополнительныеПараметры = Новый Структура("ТабЧасть", "ВозвращенныеМатериалы");
		Оповещение = Новый ОписаниеОповещения("ВопросПередЗаполнениемТабличнойЧастиМатериалыПоСпецификацииЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	Иначе
		ЗаполнитьПоСпецификацииНаСервере("ВозвращенныеМатериалы");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ПодготовитьФормуНаСервере()

	УстановитьФункциональныеОпцииФормы();
	
	УстановитьСостояниеДокумента();
	
	ТекущаяДатаДокумента = Объект.Дата;
	
	ВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	
	ДоговорУказан = ЗначениеЗаполнено(Объект.ДоговорКонтрагента);
	
	Если НЕ ДоговорУказан
		и ЗначениеЗаполнено(Объект.Контрагент)
		и НЕ ЗначениеЗаполнено(Объект.Ссылка) 
		и НЕ ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
		КонтрагентОбработатьИзменениеНаСервере();
	КонецЕсли;

	ЕстьВозвратнаяТара = ПолучитьФункциональнуюОпцию("ИспользоватьВозвратнуюТару")
		И Объект.ВозвратнаяТара.Количество() > 0;

	ЗаполнитьДобавленныеКолонкиТаблиц();

	УстановитьПараметрыВыбораСчетаЗатрат(); // ИНАГРО
	
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаСервере
Процедура УстановитьСостояниеДокумента()
	
	СостояниеДокумента = ОбщегоНазначенияБП.СостояниеДокумента(Объект);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьФункциональныеОпцииФормы()

	ОбщегоНазначенияБПКлиентСервер.УстановитьПараметрыФункциональныхОпцийФормыДокумента(ЭтаФорма);
	ПлательщикНалогаНаПрибыльДо2015 = УчетнаяПолитика.ПлательщикНалогаНаПрибыльДо2015(Объект.Организация, Объект.Дата);
	ПлательщикНДС				= УчетнаяПолитика.ПлательщикНДС(Объект.Организация, Объект.Дата);

	КоэффициентПропорциональногоНДС = НалоговыйУчет.ПолучитьКоэффициентПропорциональногоНДС(Объект.Организация, Объект.Дата);
	
КонецПроцедуры 

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)

	Элементы = Форма.Элементы;
	Объект   = Форма.Объект;

	// Доступность взаимосвязанных полей
	Элементы.ПодразделениеОрганизации.Доступность = ЗначениеЗаполнено(Объект.Организация);
	Элементы.ДоговорКонтрагента.Доступность  = ЗначениеЗаполнено(Объект.Организация) И ЗначениеЗаполнено(Объект.Контрагент);

	Элементы.ЕстьАвансДо01042011.Видимость 	   	 = Форма.ПлательщикНалогаНаПрибыльДо2015;
	Элементы.СуммаВДВРПоАвансуДо01042011.Видимость = Форма.ПлательщикНалогаНаПрибыльДо2015;
	Элементы.СуммаВДВРПоАвансуДо01042011.Доступность = Объект.ЕстьАвансДо01042011 И Форма.ПлательщикНалогаНаПрибыльДо2015;
	
	Элементы.СуммаНДСПропорциональноКредит.Видимость                = Форма.ПлательщикНДС;
	Элементы.ВалютаРеглУчетаСуммаНДСПропорциональноКредит.Видимость = Форма.ПлательщикНДС;
	Элементы.СуммаНДСПропорциональноВсего.Видимость                 = Форма.ПлательщикНДС;
	Элементы.ВалютаРеглУчетаСуммаНДСПропорциональноВсего.Видимость  = Форма.ПлательщикНДС;
	
	Элементы.Сделка.Доступность = Форма.ВедениеВзаиморасчетовПоРасчетнымДокументам;
	
	Элементы.СчетУчетаНДС.Доступность                      = РеализацияТоваровУслугФормыКлиентСервер.ИспользуетсяСчетУчетаНДС(Форма.ПлательщикНДС, Ложь, Объект.Дата);
	Элементы.СчетУчетаНДСПодтвержденный.Доступность        = РеализацияТоваровУслугФормыКлиентСервер.ИспользуетсяСчетУчетаНДСПодтвержденный(Форма.ПлательщикНДС, Ложь, Объект.Дата, Форма.СложныйНалоговыйУчет);
	
	
	ОбновитьИтоги(Форма);
	СформироватьНадписьЦеныИВалюта(Форма);
	
	ЗаполнитьСписокВыбораСтавокНДС(Форма);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьСписокВыбораСтавокНДС(Форма)

	Элементы = Форма.Элементы;
	
	СписокВыбораСтавок = Элементы.УслугиСтавкаНДС.СписокВыбора;
	СписокВыбораСтавок.Очистить();
	
	СписокВыбораСтавок.Добавить(ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС20"));
	СписокВыбораСтавок.Добавить(ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС14"));
	СписокВыбораСтавок.Добавить(ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС7"));
	СписокВыбораСтавок.Добавить(ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС0"));
	СписокВыбораСтавок.Добавить(ПредопределенноеЗначение("Перечисление.СтавкиНДС.БезНДС"));
	СписокВыбораСтавок.Добавить(ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС20"));

КонецПроцедуры

&НаКлиенте
Процедура ОбработатьИзмененияПоКнопкеЦеныИВалюты(ПересчитатьЦены = Ложь, ПерезаполнитьЦены = Ложь)

	// Структура параметров
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ВалютаДокумента",      Объект.ВалютаДокумента);
	СтруктураПараметров.Вставить("Курс",                 Объект.КурсВзаиморасчетов);
	СтруктураПараметров.Вставить("Кратность",            Объект.КратностьВзаиморасчетов);
	СтруктураПараметров.Вставить("СуммаВключаетНДС",     Объект.СуммаВключаетНДС);
	СтруктураПараметров.Вставить("Контрагент",           Объект.Контрагент);
	СтруктураПараметров.Вставить("Договор",              Объект.ДоговорКонтрагента);
	СтруктураПараметров.Вставить("Организация",          Объект.Организация);
	СтруктураПараметров.Вставить("ДатаДокумента",        Объект.Дата);
	СтруктураПараметров.Вставить("ПерезаполнитьЦены",    ПерезаполнитьЦены);
	СтруктураПараметров.Вставить("ПересчитатьЦены",      ПересчитатьЦены);
	СтруктураПараметров.Вставить("БылиВнесеныИзменения", Ложь);
	СтруктураПараметров.Вставить("ТипЦен",               Объект.ТипЦен);

	// Открываем форму "Цены и Валюта".
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ОбработатьИзмененияПоКнопкеЦеныИВалютыЗавершение", ЭтотОбъект);
	
	ОткрытьФорму("ОбщаяФорма.ФормаЦеныИВалюта", СтруктураПараметров,,,,,ОповещениеОЗакрытии);

КонецПроцедуры

&НаКлиенте
Процедура ОбработатьИзмененияПоКнопкеЦеныИВалютыЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	СтруктураЦеныИВалюта = РезультатЗакрытия;
	
	// Перезаполняем табличную часть если были внесены изменения в форме "Цены и Валюта".
	Если (ТипЗнч(СтруктураЦеныИВалюта) = Тип("Структура")) И (СтруктураЦеныИВалюта.БылиВнесеныИзменения) Тогда
		
		ВалютаДоИзменения = Объект.ВалютаДокумента;
		
		Объект.ТипЦен                  = СтруктураЦеныИВалюта.ТипЦен;
		Объект.ВалютаДокумента         = СтруктураЦеныИВалюта.ВалютаДокумента;

		Объект.КурсВзаиморасчетов      = СтруктураЦеныИВалюта.КурсРасчетов;
		Объект.КратностьВзаиморасчетов = СтруктураЦеныИВалюта.КратностьРасчетов;
		Объект.СуммаВключаетНДС        = СтруктураЦеныИВалюта.СуммаВключаетНДС;
		
		Модифицированность = Истина;
		
		ПересчитатьНДС = СтруктураЦеныИВалюта.СуммаВключаетНДС <> СтруктураЦеныИВалюта.ПредСуммаВключаетНДС;
		Если СтруктураЦеныИВалюта.ПерезаполнитьЦены ИЛИ СтруктураЦеныИВалюта.ПересчитатьЦены ИЛИ ПересчитатьНДС Тогда
			ЗаполнитьРассчитатьСуммы(ВалютаДоИзменения, 
				СтруктураЦеныИВалюта.ПерезаполнитьЦены,
				СтруктураЦеныИВалюта.ПересчитатьЦены,
				ПересчитатьНДС);
		КонецЕсли;
		
		СформироватьНадписьЦеныИВалюта(ЭтаФорма);
		
	КонецЕсли;	
		 	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРассчитатьСуммы(Знач ВалютаДоИзменения, ПерезаполнитьЦены = Ложь, ПересчитатьЦены = Ложь, ПересчитатьНДС = Ложь)

	ТипПолучаемыхЦен = Объект.ТипЦен;
	Если ПерезаполнитьЦены Тогда
		
		СписокНоменклатуры	= ОбщегоНазначения.ВыгрузитьКолонку(Объект.Услуги, "Номенклатура", Истина);
		ОбщегоНазначения.ЗаполнитьМассивУникальнымиЗначениями(СписокНоменклатуры,
			ОбщегоНазначения.ВыгрузитьКолонку(Объект.ВозвратнаяТара, "Номенклатура"));
	
		Если ЗначениеЗаполнено(Объект.ТипЦен) Тогда	
			ТаблицаЦенНоменклатуры = Ценообразование.ПолучитьТаблицуЦенНоменклатуры(
				СписокНоменклатуры,
				Объект.ТипЦен,
				Объект.Дата);
		КонецЕсли;			
		
	ИначеЕсли ПересчитатьЦены Тогда
		СтруктураКурса = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаДоИзменения, Объект.Дата);

	КонецЕсли;
	
	Для Каждого Строка Из Объект.Услуги Цикл
		ЗаполнитьРассчитатьСуммыВСтроке(Строка, ТаблицаЦенНоменклатуры, ВалютаДоИзменения, СтруктураКурса,
			ПерезаполнитьЦены, ПересчитатьЦены, ПересчитатьНДС, Истина, 1,
			ТипПолучаемыхЦен.ЦенаВключаетНДС);
	КонецЦикла;

	Для Каждого Строка Из Объект.ВозвратнаяТара Цикл
		ЗаполнитьРассчитатьСуммыВСтроке(Строка, ТаблицаЦенНоменклатуры, ВалютаДоИзменения, СтруктураКурса,
			ПерезаполнитьЦены, ПересчитатьЦены, ПересчитатьНДС, Ложь, 1,
			ТипПолучаемыхЦен.ЦенаВключаетНДС);
	КонецЦикла;

	ЗаполнитьДобавленныеКолонкиТаблиц();
	
	РассчитатьПропорциональныйНДС(Объект, ПлательщикНДС, КоэффициентПропорциональногоНДС);
	
	ОбновитьИтоги(ЭтаФорма);

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРассчитатьСуммыВСтроке(
	Строка,
	ТаблицаЦенНоменклатуры,
	ВалютаПередИзменением,
	СтруктураКурса,
	ПерезаполнитьЦены,
	ПересчитатьЦены,
	ПересчитатьНДС,
	ЕстьНДС,
	ЗначениеПустогоКоличества,
	Знач ЦенаВключаетНДС)

	КурсВалютыДокумента 	 = ?(Объект.ВалютаДокумента = ВалютаРегламентированногоУчета, 1, Объект.КурсВзаиморасчетов);
	КратностьВалютыДокумента = ?(Объект.ВалютаДокумента = ВалютаРегламентированногоУчета, 1, Объект.КратностьВзаиморасчетов);
	
	Если ПерезаполнитьЦены Тогда
		
		НайденнаяСтрока	= ТаблицаЦенНоменклатуры.Найти(Строка.Номенклатура, "Номенклатура");
		Если НайденнаяСтрока <> Неопределено Тогда
			Цена = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(
				НайденнаяСтрока.Цена, НайденнаяСтрока.Валюта, Объект.ВалютаДокумента, НайденнаяСтрока.Курс,
				КурсВалютыДокумента, НайденнаяСтрока.Кратность, КратностьВалютыДокумента);
			ЦенаВключаетНДС = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ТипЦен, "ЦенаВключаетНДС");
		Иначе
			Цена = 0;
			// Признак того, что цена включает НДС, хранится в реквизите ЦенаВключаетНДС типа цен
            Если ЗначениеЗаполнено(Объект.ТипЦен) Тогда
                ЦенаВключаетНДС = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ТипЦен, "ЦенаВключаетНДС");
            Иначе
                ЦенаВключаетНДС = Ложь;
            КонецЕсли;
		КонецЕсли;
		
	Иначе
		Если ПересчитатьЦены Тогда
			
			Цена = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(
				Строка.Цена, ВалютаПередИзменением, Объект.ВалютаДокумента, СтруктураКурса.Курс, 
				КурсВалютыДокумента, СтруктураКурса.Кратность, КратностьВалютыДокумента);
			
		Иначе
			Цена = Строка.Цена;
		КонецЕсли;
		// Признак того, что цена включает НДС, хранится в реквизите СуммаВключаетНДС документа
		ЦенаВключаетНДС = ?(ПересчитатьНДС, НЕ Объект.СуммаВключаетНДС, Объект.СуммаВключаетНДС);
	КонецЕсли;

	Если ЕстьНДС Тогда
		Строка.Цена     = УчетНДСКлиентСервер.ПересчитатьЦенуПриИзмененииФлаговНалогов(Цена,
			ЦенаВключаетНДС, Объект.СуммаВключаетНДС, УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(Строка.СтавкаНДС));
		Строка.Сумма    = Строка.Цена * ?(Строка.Количество = 0, ЗначениеПустогоКоличества, Строка.Количество);
		Строка.СуммаНДС = УчетНДСКлиентСервер.РассчитатьСуммуНДС(Строка.Сумма,
			Объект.СуммаВключаетНДС, УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(Строка.СтавкаНДС));
	Иначе
		Строка.Цена  = Цена;
		Строка.Сумма = Строка.Цена * ?(Строка.Количество = 0, ЗначениеПустогоКоличества, Строка.Количество);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ДатаПриИзмененииНаСервере()
	
	ДатаОбработатьИзменение();
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаСервере
Процедура ДатаОбработатьИзменение()
	
	УстановитьФункциональныеОпцииФормы();
	
	Если (Объект.ВалютаДокумента <> ВалютаРегламентированногоУчета) Тогда
		СтруктураКурсаДокумента        = РаботаСКурсамиВалют.ПолучитьКурсВалюты(Объект.ВалютаДокумента, Объект.Дата);
		Объект.КурсВзаиморасчетов      = СтруктураКурсаДокумента.Курс;
		Объект.КратностьВзаиморасчетов = СтруктураКурсаДокумента.Кратность;
	КонецЕсли;
	
	Если Год(Объект.Дата) <> Год(ТекущаяДатаДокумента) Тогда
		РассчитатьПропорциональныйНДС(Объект, ПлательщикНДС, КоэффициентПропорциональногоНДС);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()

	УстановитьФункциональныеОпцииФормы();

	
	
	Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
		КонтрагентОбработатьИзменениеНаСервере();
	КонецЕсли;
	
	ЗаполнитьСчетаУчетаВТабличнойЧастиНаСервере();
	
	РассчитатьПропорциональныйНДС(Объект, ПлательщикНДС, КоэффициентПропорциональногоНДС);
	
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаСервере
Процедура СкладПриИзмененииНаСервере()

	
	ЗаполнитьСчетаУчетаВТабличнойЧастиНаСервере();
	
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСчетаУчетаВТабличнойЧастиНаСервере(ИмяТабличнойЧасти = "")

	Если ПустаяСтрока(ИмяТабличнойЧасти) ИЛИ ИмяТабличнойЧасти = "Продукция" Тогда
		Документы.ПоступлениеИзПереработки.ЗаполнитьСчетаУчетаВТабличнойЧасти(Объект, "Продукция");
	КонецЕсли;
	
	Если ПустаяСтрока(ИмяТабличнойЧасти) ИЛИ ИмяТабличнойЧасти = "Услуги" Тогда
		Документы.ПоступлениеИзПереработки.ЗаполнитьСчетаУчетаВТабличнойЧасти(Объект, "Услуги");
	КонецЕсли;
	
	Если ПустаяСтрока(ИмяТабличнойЧасти) ИЛИ ИмяТабличнойЧасти = "ИспользованныеМатериалы" Тогда
		Документы.ПоступлениеИзПереработки.ЗаполнитьСчетаУчетаВТабличнойЧасти(Объект, "ИспользованныеМатериалы");
	КонецЕсли;
	
	Если ПустаяСтрока(ИмяТабличнойЧасти) ИЛИ ИмяТабличнойЧасти = "ВозвращенныеМатериалы" Тогда
		Документы.ПоступлениеИзПереработки.ЗаполнитьСчетаУчетаВТабличнойЧасти(Объект, "ВозвращенныеМатериалы");
	КонецЕсли;
	
	Если ПустаяСтрока(ИмяТабличнойЧасти) ИЛИ ИмяТабличнойЧасти = "ВозвратнаяТара" Тогда
		Документы.ПоступлениеИзПереработки.ЗаполнитьСчетаУчетаВТабличнойЧасти(Объект, "ВозвратнаяТара");
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура КонтрагентПриИзмененииНаСервере()

	КонтрагентОбработатьИзменениеНаСервере();
	
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаСервере
Процедура КонтрагентОбработатьИзменениеНаСервере()

	БухгалтерскийУчетПереопределяемый.УстановитьДоговорКонтрагента(
		Объект.ДоговорКонтрагента, Объект.Контрагент, Объект.Организация, 
		ПолучитьМассивВидовДоговоров());

	Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		ДоговорКонтрагентаОбработатьИзменение();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДоговорКонтрагентаПриИзмененииНаСервере()

	ДоговорКонтрагентаОбработатьИзменение();
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры 

&НаСервере
Процедура ДоговорКонтрагентаОбработатьИзменение()

	ВалютаДоИзменения = Объект.ВалютаДокумента;
	КурсДоИзменения   = Объект.КурсВзаиморасчетов;
	КратностьДоИзменения        = Объект.КратностьВзаиморасчетов;
	СуммаВключаетНДСДоИзменения = Объект.СуммаВключаетНДС;

	РеквизитыДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		Объект.ДоговорКонтрагента, "ВалютаВзаиморасчетов, СложныйНалоговыйУчет");
		
	ДоговорУказан = ЗначениеЗаполнено(Объект.ДоговорКонтрагента);
	
	ВедениеВзаиморасчетовПоРасчетнымДокументам = ДоговорУказан И Объект.ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоРасчетнымДокументам;
	СложныйНалоговыйУчет = ДоговорУказан И РеквизитыДоговора.СложныйНалоговыйУчет;	
	
	Объект.ВалютаДокумента         = РеквизитыДоговора.ВалютаВзаиморасчетов;
	СтруктураКурсаДокумента        = РаботаСКурсамиВалют.ПолучитьКурсВалюты(Объект.ВалютаДокумента, Объект.Дата);
	Объект.КурсВзаиморасчетов      = СтруктураКурсаДокумента.Курс;
	Объект.КратностьВзаиморасчетов = СтруктураКурсаДокумента.Кратность;

	ПересчитатьСуммы = Объект.ВалютаДокумента <> ВалютаДоИзменения
		ИЛИ Объект.КурсВзаиморасчетов <> КурсДоИзменения;
	ПересчитатьНДС = Объект.СуммаВключаетНДС <> СуммаВключаетНДСДоИзменения;
	
	ЕстьСтрокиВТабличныхЧастях = (Объект.Услуги.Количество() + Объект.ВозвратнаяТара.Количество()) > 0;
	
	Если ЕстьСтрокиВТабличныхЧастях И (ПересчитатьСуммы ИЛИ ПересчитатьНДС) Тогда
		ЗаполнитьРассчитатьСуммы(ВалютаДоИзменения, Ложь, ПересчитатьСуммы, ПересчитатьНДС);
	КонецЕсли;
	
	Если НЕ ВалютаДоИзменения = Объект.ВалютаДокумента Тогда
		РассчитатьПропорциональныйНДС(Объект, ПлательщикНДС, КоэффициентПропорциональногоНДС);
	КонецЕсли;
	
	Документы.ПоступлениеИзПереработки.ЗаполнитьСчетаУчетаРасчетов(Объект);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПродукцияНоменклатураПриИзмененииНаСервере(СтрокаТабличнойЧасти, Знач ДанныеОбъекта)

	ДанныеОбъекта.Вставить("ТипЦенПлановойСебестоимости", Константы.ТипЦенПлановойСебестоимостиНоменклатуры.Получить());
	
	ДанныеОбъекта.Вставить("СпособЗаполненияПлановойСебестоимости", Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры);
	
	СведенияОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОНоменклатуре(
		СтрокаТабличнойЧасти.Номенклатура, ДанныеОбъекта);
	Если СведенияОНоменклатуре = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаТабличнойЧасти.ПлановаяСтоимость	= СведенияОНоменклатуре.ПлановаяСтоимость;
	СтрокаТабличнойЧасти.Спецификация		= СведенияОНоменклатуре.ОсновнаяСпецификацияНоменклатуры;
	
	СтрокаТабличнойЧасти.ЕдиницаИзмерения		= СведенияОНоменклатуре.БазоваяЕдиницаИзмерения;
	СтрокаТабличнойЧасти.Коэффициент			= СведенияОНоменклатуре.Коэффициент;
	
	ОбработкаТабличныхЧастейКлиентСервер.ПересчитатьПлановуюСумму(СтрокаТабличнойЧасти);
	
	Документы.ПоступлениеИзПереработки.ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(
		ДанныеОбъекта, СтрокаТабличнойЧасти, "Продукция", СведенияОНоменклатуре);

КонецПроцедуры

&НаСервереБезКонтекста
Процедура УслугиНоменклатураПриИзмененииНаСервере(СтрокаТабличнойЧасти, Знач ДанныеОбъекта)
	
	Если Не ЗначениеЗаполнено(ДанныеОбъекта.ТипЦен) Тогда
		ДанныеОбъекта.Вставить("СпособЗаполненияЦены", Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры);
	КонецЕсли;

	СведенияОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОНоменклатуре(
		СтрокаТабличнойЧасти.Номенклатура, ДанныеОбъекта);
	Если СведенияОНоменклатуре = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаТабличнойЧасти.Содержание		= СведенияОНоменклатуре.НаименованиеПолное;
	СтрокаТабличнойЧасти.Цена			= СведенияОНоменклатуре.Цена;
	СтрокаТабличнойЧасти.СтавкаНДС		= СведенияОНоменклатуре.СтавкаНДС;
	СтрокаТабличнойЧасти.СтатьяЗатрат	= СведенияОНоменклатуре.СтатьяЗатрат;
	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ДанныеОбъекта.СуммаВключаетНДС);
	
	Документы.ПоступлениеИзПереработки.ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(
		ДанныеОбъекта, СтрокаТабличнойЧасти, "Услуги", СведенияОНоменклатуре);

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ИспользованныеМатериалыНоменклатураПриИзмененииНаСервере(СтрокаТабличнойЧасти, Знач ДанныеОбъекта)

	СведенияОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОНоменклатуре(
		СтрокаТабличнойЧасти.Номенклатура, ДанныеОбъекта);
	Если СведенияОНоменклатуре = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаТабличнойЧасти.ЕдиницаИзмерения		= СведенияОНоменклатуре.БазоваяЕдиницаИзмерения;
	СтрокаТабличнойЧасти.Коэффициент			= СведенияОНоменклатуре.Коэффициент;
	СтрокаТабличнойЧасти.СтатьяЗатрат			= СведенияОНоменклатуре.СтатьяЗатрат;
	
	Документы.ПоступлениеИзПереработки.ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(
		ДанныеОбъекта, СтрокаТабличнойЧасти, "ИспользованныеМатериалы", СведенияОНоменклатуре);

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ВозвращенныеМатериалыНоменклатураПриИзмененииНаСервере(СтрокаТабличнойЧасти, Знач ДанныеОбъекта)

	СведенияОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОНоменклатуре(
		СтрокаТабличнойЧасти.Номенклатура, ДанныеОбъекта);
	Если СведенияОНоменклатуре = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаТабличнойЧасти.ЕдиницаИзмерения		= СведенияОНоменклатуре.БазоваяЕдиницаИзмерения;
	СтрокаТабличнойЧасти.Коэффициент			= СведенияОНоменклатуре.Коэффициент;
	
	Документы.ПоступлениеИзПереработки.ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(
		ДанныеОбъекта, СтрокаТабличнойЧасти, "ВозвращенныеМатериалы", СведенияОНоменклатуре);

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ВозвратнаяТараНоменклатураПриИзмененииНаСервере(СтрокаТабличнойЧасти, Знач ДанныеОбъекта)
	
	Если Не ЗначениеЗаполнено(ДанныеОбъекта.ТипЦен) Тогда
		ДанныеОбъекта.Вставить("СпособЗаполненияЦены", Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры);
	КонецЕсли;	

	СведенияОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОНоменклатуре(
		СтрокаТабличнойЧасти.Номенклатура, ДанныеОбъекта);
	Если СведенияОНоменклатуре = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаТабличнойЧасти.Цена = СведенияОНоменклатуре.Цена;
	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
	
	Документы.ПоступлениеИзПереработки.ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(
		ДанныеОбъекта, СтрокаТабличнойЧасти, "ВозвратнаяТара", СведенияОНоменклатуре);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьИтоги(Форма)

	Объект = Форма.Объект;
	Форма.ИтогиВсего = Объект.Услуги.Итог("Всего");

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СформироватьНадписьЦеныИВалюта(Форма)
	
	Объект = Форма.Объект;
	СтруктураНадписи = Новый Структура(
		"ТипЦен, ВалютаДокумента, Курс, Кратность, СуммаВключаетНДС, ВалютаРегламентированногоУчета",
		Объект.ТипЦен,
		Объект.ВалютаДокумента,
		Объект.КурсВзаиморасчетов,
		Объект.КратностьВзаиморасчетов,
		Объект.СуммаВключаетНДС,
		Форма.ВалютаРегламентированногоУчета);
	Форма.ЦеныИВалюта = ОбщегоНазначенияБПКлиентСервер.СформироватьНадписьЦеныИВалюта(СтруктураНадписи);

КонецПроцедуры 

&НаСервере
Процедура ЗаполнитьДобавленныеКолонкиТаблиц()

	// Заполнение колонки Всего табличной части Услуги
	Для Каждого СтрокаТаблицы Из Объект.Услуги Цикл
		СтрокаТаблицы.Всего = СтрокаТаблицы.Сумма + ?(Объект.СуммаВключаетНДС, 0, СтрокаТаблицы.СуммаНДС);
	КонецЦикла;

	// Заполнение колонки Всего табличной части ВозвратнаяТара
	Для Каждого СтрокаТаблицы Из Объект.ВозвратнаяТара Цикл
		СтрокаТаблицы.Всего = СтрокаТаблицы.Сумма;
	КонецЦикла;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьМассивВидовДоговоров()

	СписокВидовДоговоров = Новый Массив;
	СписокВидовДоговоров.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СПоставщиком"));

	Возврат СписокВидовДоговоров;

КонецФункции

&НаКлиенте
Функция ПолучитьСписокПодборов(ИмяТаблицы)

	// Список возможных подборов - в Обработка.ПодборНоменклатуры.Форма.Форма.УстановитьТекущийСписок(Форма)
	СписокПодборов = Новый СписокЗначений();
	СписокПодборов.Добавить("", НСтр("ru='По справочнику';uk='З довідника'"));

	Возврат СписокПодборов;

КонецФункции

&НаКлиенте
Функция ПолучитьПараметрыПодбора(ИмяТаблицы)

	ПараметрыФормы = Новый Структура;

	ДатаРасчетов = ?(НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДата()), Неопределено, Объект.Дата);

	Если ИмяТаблицы = "Услуги" Тогда
		ЗаголовокПодбора     = НСтр("ru='Подбор услуг в документ %1 (%2)';uk='Підбір послуг в документ %1 (%2)'");
		ПредставлениеТаблицы = НСтр("ru='Услуги';uk='Послуги'");
	ИначеЕсли ИмяТаблицы = "Продукция" Тогда
		ЗаголовокПодбора     = НСтр("ru='Подбор продукции в документ %1 (%2)';uk='Підбір продукції в документ %1 (%2)'");
		ПредставлениеТаблицы = НСтр("ru='Продукция';uk='Продукція'");
	ИначеЕсли ИмяТаблицы = "ВозвращенныеМатериалы" Тогда
		ЗаголовокПодбора     = НСтр("ru='Подбор возвращенных материалов в документ %1 (%2)';uk='Підбір повернутих матеріалів в документ %1 (%2)'");
		ПредставлениеТаблицы = НСтр("ru='Возвращенные материалы';uk='Повернуті матеріали'");
	ИначеЕсли ИмяТаблицы = "ИспользованныеМатериалы" Тогда
		ЗаголовокПодбора     = НСтр("ru='Подбор использованных материалов в документ %1 (%2)';uk='Підбір використаних матеріалів в документ %1 (%2)'");
		ПредставлениеТаблицы = НСтр("ru='Использованные материалы';uk='Використані матеріали'");
	Иначе
		ЗаголовокПодбора     = "";
		ПредставлениеТаблицы = "";
	КонецЕсли;

	ЗаголовокПодбора = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		ЗаголовокПодбора,
		Объект.Ссылка,
		ПредставлениеТаблицы);
	ПараметрыФормы.Вставить("ДатаРасчетов",   ДатаРасчетов);
	ПараметрыФормы.Вставить("Организация",    Объект.Организация);
	ПараметрыФормы.Вставить("Подразделение",  Объект.ПодразделениеОрганизации);
	ПараметрыФормы.Вставить("Валюта",         ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета());
	ПараметрыФормы.Вставить("ЕстьЦена", 	  Ложь);
	ПараметрыФормы.Вставить("ЕстьКоличество", Истина);
	ПараметрыФормы.Вставить("Заголовок",      ЗаголовокПодбора);
	ПараметрыФормы.Вставить("СписокПодборов", ПолучитьСписокПодборов(ИмяТаблицы));
	ПараметрыФормы.Вставить("ИмяТаблицы",     ИмяТаблицы);
	Если ИмяТаблицы <> "Услуги" Тогда // В списке Услуги может быть и продукция и услуги
		ПараметрыФормы.Вставить("Услуги", Ложь);
	КонецЕсли;

	ПараметрыФормы.Вставить("Услуги", ИмяТаблицы = "Услуги");
	
	Возврат ПараметрыФормы;

КонецФункции

&НаСервере
Процедура ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение, ИмяТаблицы)

	ТаблицаТоваров = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресПодобраннойНоменклатурыВХранилище);
	
	ДанныеОбъекта = Новый Структура("Дата, Организация, Склад, СуммаВключаетНДС,
		|ВалютаДокумента, КурсВзаиморасчетов, КратностьВзаиморасчетов, ДоговорКонтрагента");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
	Если ИмяТаблицы = "Продукция" Тогда
		ДанныеОбъекта.Вставить("ТипЦенПлановойСебестоимости", Константы.ТипЦенПлановойСебестоимостиНоменклатуры.Получить());
	ИначеЕсли ИмяТаблицы = "Услуги" Тогда
		ДанныеОбъекта.Вставить("ТипЦен", Объект.ТипЦен);
	ИначеЕсли ИмяТаблицы = "ВозвратнаяТара" Тогда
		ДанныеОбъекта.Вставить("ТипЦен", Объект.ТипЦен);
		ДанныеОбъекта.СуммаВключаетНДС = Истина;
	КонецЕсли;
	
	СоответствиеСведенийОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОСпискеНоменклатуры(
		ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаТоваров, "Номенклатура", Истина), ДанныеОбъекта);
	
	Для Каждого СтрокаТовара Из ТаблицаТоваров Цикл
		
		СтрокаТабличнойЧасти = Объект[ИмяТаблицы].Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтрокаТовара);
		
		СведенияОНоменклатуре = СоответствиеСведенийОНоменклатуре.Получить(СтрокаТовара.Номенклатура);
		Если СведенияОНоменклатуре = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если ИмяТаблицы = "Услуги" Или ИмяТаблицы = "ИспользованныеМатериалы" Тогда
			СтрокаТабличнойЧасти.СтатьяЗатрат = СведенияОНоменклатуре.СтатьяЗатрат;	
		КонецЕсли; 
		
		Документы.ПоступлениеИзПереработки.ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(
			ДанныеОбъекта, СтрокаТабличнойЧасти, ИмяТаблицы, СведенияОНоменклатуре);
		
		Если ИмяТаблицы = "Продукция" Тогда
			
			СтрокаТабличнойЧасти.Спецификация		= СведенияОНоменклатуре.ОсновнаяСпецификацияНоменклатуры;
			СтрокаТабличнойЧасти.ПлановаяСтоимость	= СведенияОНоменклатуре.ПлановаяСтоимость;
			
			ОбработкаТабличныхЧастейКлиентСервер.ПересчитатьПлановуюСумму(СтрокаТабличнойЧасти);
			
		ИначеЕсли ИмяТаблицы = "Услуги" Тогда
			
			СтрокаТабличнойЧасти.Содержание	= СведенияОНоменклатуре.НаименованиеПолное;
			СтрокаТабличнойЧасти.Цена			= СведенияОНоменклатуре.Цена;
			СтрокаТабличнойЧасти.СтавкаНДС		= СведенияОНоменклатуре.СтавкаНДС;
			
			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, Объект.СуммаВключаетНДС);
			
		ИначеЕсли ИмяТаблицы = "ВозвратнаяТара" Тогда
			
			СтрокаТабличнойЧасти.Цена	= СведенияОНоменклатуре.Цена;
			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
			
		КонецЕсли;
		
	КонецЦикла;
	
	РассчитатьПропорциональныйНДС(Объект, ПлательщикНДС, КоэффициентПропорциональногоНДС);
	
	ОбновитьИтоги(ЭтаФорма);

КонецПроцедуры

// Возвращаемое значение:
// Таблица значений - список материалов, имеющихся у переработчика
&НаСервереБезКонтекста
Функция ОстаткиМатериаловУПереработчика(Организация, Контрагент, Ссылка, Дата)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Контрагент",  Контрагент);
	Если ЗначениеЗаполнено(Ссылка) Тогда
		Запрос.УстановитьПараметр("Дата", Новый Граница(
			Новый МоментВремени(Дата, Ссылка), ВидГраницы.Исключая));
	Иначе
		Запрос.УстановитьПараметр("Дата", Неопределено);
	КонецЕсли;
	ВидыСубконто = Новый Массив;
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);
	Запрос.УстановитьПараметр("ВидыСубконто", ВидыСубконто);

	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Хозрасчетный.Ссылка КАК Счет
	|ПОМЕСТИТЬ СчетаМатериалыПереданныеВПереработку
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.Ссылка В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.МатериалыПереданныеВПереработку))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто2 КАК Справочник.Номенклатура) КАК Номенклатура,
	|	ХозрасчетныйОстатки.Счет,
	|	ХозрасчетныйОстатки.НалоговоеНазначение,
	|	ХозрасчетныйОстатки.КоличествоОстаток КАК Количество
	|ПОМЕСТИТЬ ДанныеРегистра
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			&Дата,
	|			Счет В
	|				(ВЫБРАТЬ
	|					СчетаМатериалыПереданныеВПереработку.Счет
	|				ИЗ
	|					СчетаМатериалыПереданныеВПереработку),
	|			&ВидыСубконто,
	|			Организация = &Организация
	|				И Субконто1 = &Контрагент) КАК ХозрасчетныйОстатки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеРегистра.Счет КАК СчетУчетаБУ,
	|	ДанныеРегистра.Номенклатура,
	|	ДанныеРегистра.Номенклатура.СтатьяЗатрат КАК СтатьяЗатрат,
	|	ДанныеРегистра.Номенклатура.БазоваяЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ДанныеРегистра.Количество,
	|	1 КАК Коэффициент,
	|	ДанныеРегистра.НалоговоеНазначение,
	|	ДанныеРегистра.Номенклатура.Наименование КАК НоменклатураНаименование
	|ИЗ
	|	ДанныеРегистра КАК ДанныеРегистра
	|
	|УПОРЯДОЧИТЬ ПО
	|	НоменклатураНаименование";
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

&НаСервере
Процедура ЗаполнитьВозвращенныеМатериалыОстаткамиНаСервере()

	ОстаткиМатериалов = ОстаткиМатериаловУПереработчика(Объект.Организация, Объект.Контрагент, Объект.Ссылка, Объект.Дата);
	
	Объект.ВозвращенныеМатериалы.Загрузить(ОстаткиМатериалов);
	Документы.ПоступлениеИзПереработки.ЗаполнитьСчетаУчетаВТабличнойЧасти(Объект, "ВозвращенныеМатериалы");

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьИспользованныеМатериалыОстаткамиНаСервере()
	
	ОстаткиМатериалов = ОстаткиМатериаловУПереработчика(Объект.Организация, Объект.Контрагент, Объект.Ссылка, Объект.Дата);
	
	Объект.ИспользованныеМатериалы.Загрузить(ОстаткиМатериалов);
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросПередЗаполнениемТабличнойЧастиМатериалыЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ЗаполнитьИспользованныеМатериалыОстаткамиНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросПередЗаполнениемТабличнойЧастиВозвращенныеМатериалыЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ЗаполнитьВозвращенныеМатериалыОстаткамиНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросПередЗаполнениемТабличнойЧастиМатериалыПоСпецификацииЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ЭтаФорма.Записать();
		ЗаполнитьПоСпецификацииНаСервере(ДополнительныеПараметры.ТабЧасть);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоСпецификацииНаСервере(ИмяТабличнойЧасти)

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СпецификацииНоменклатурыИсходныеКомплектующие.Номенклатура КАК Номенклатура,
	|	СпецификацииНоменклатурыИсходныеКомплектующие.Номенклатура.СтатьяЗатрат КАК СтатьяЗатрат,
	|	СпецификацииНоменклатурыИсходныеКомплектующие.ЕдиницаИзмерения 	КАК ЕдиницаИзмерения,
	|	СпецификацииНоменклатурыИсходныеКомплектующие.Коэффициент 		КАК Коэффициент,
	|	СУММА(ВложенныйЗапрос.КоличествоПродукции * СпецификацииНоменклатурыИсходныеКомплектующие.Количество / СпецификацииНоменклатуры.Количество / СпецификацииНоменклатуры.Коэффициент) КАК Количество
	|ИЗ
	|	(ВЫБРАТЬ
	|		ДокументСсылкаПродукция.Спецификация КАК Спецификация,
	|		СУММА(ДокументСсылкаПродукция.Количество * ДокументСсылкаПродукция.Коэффициент) КАК КоличествоПродукции
	|	ИЗ
	|		Документ.ПоступлениеИзПереработки.Продукция КАК ДокументСсылкаПродукция
	|	ГДЕ
	|		ДокументСсылкаПродукция.Ссылка = &Ссылка
	|		И ДокументСсылкаПродукция.Спецификация <> ЗНАЧЕНИЕ(Справочник.СпецификацииНоменклатуры.ПустаяСсылка)
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ДокументСсылкаПродукция.Спецификация) КАК ВложенныйЗапрос
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СпецификацииНоменклатуры КАК СпецификацииНоменклатуры
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СпецификацииНоменклатуры.ИсходныеКомплектующие КАК СпецификацииНоменклатурыИсходныеКомплектующие
	|			ПО СпецификацииНоменклатурыИсходныеКомплектующие.Ссылка = СпецификацииНоменклатуры.Ссылка
	|		ПО ВложенныйЗапрос.Спецификация = СпецификацииНоменклатуры.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	СпецификацииНоменклатурыИсходныеКомплектующие.Номенклатура,
	|	СпецификацииНоменклатурыИсходныеКомплектующие.Номенклатура.СтатьяЗатрат,
	|	СпецификацииНоменклатурыИсходныеКомплектующие.ЕдиницаИзмерения,
	|	СпецификацииНоменклатурыИсходныеКомплектующие.Коэффициент
	|";

	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	
	ТаблицаМатериалов = Запрос.Выполнить().Выгрузить();
	
	Объект[ИмяТабличнойЧасти].Загрузить(ТаблицаМатериалов);
	
	Документы.ПоступлениеИзПереработки.ЗаполнитьСчетаУчетаВТабличнойЧасти(Объект, ИмяТабличнойЧасти);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РассчитатьПропорциональныйНДС(Объект, ПлательщикНДС, КоэффициентПропорциональногоНДС)

	МассивИменТабличныхЧастей = Новый Массив();
	МассивИменТабличныхЧастей.Добавить("Услуги");
	
	УчетНДСКлиентСервер.РассчитатьПропорциональныйНДС(
		Объект,
		МассивИменТабличныхЧастей, 
		ПлательщикНДС,
		КоэффициентПропорциональногоНДС
	);
		
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ БСП

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры

&НаСервере
Процедура УстановитьПараметрыВыбораСчетаЗатрат() // ИНАГРО
	
	СчетаОтбора = Новый Массив;
	СчетаОтбора.Добавить(ПланыСчетов.Хозрасчетный.Производство);
	
	СчетаИсключений = Новый Массив;
	СчетаИсключений.Добавить(ПланыСчетов.Хозрасчетный.ПроизводствоИзДавальческогоСырья);
	СчетаИсключений.Добавить(ПланыСчетов.Хозрасчетный.ОбслуживаниеИРемонт);
	
	СчетаЗатрат = БухгалтерскийУчет.ПолучитьМассивСчетовДенежныхСредств(СчетаОтбора, Ложь, , СчетаИсключений);
	
	НовыйМассивПараметров = Новый Массив;
	НовыйМассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Ссылка", Новый ФиксированныйМассив(СчетаЗатрат)));
	НовыйМассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.ЗапретитьИспользоватьВПроводках", Ложь));
	Элементы.СчетЗатрат.ПараметрыВыбора = Новый ФиксированныйМассив(НовыйМассивПараметров);
	 		
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти