
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

Перем ДвиженияВыпускПродукцииУслугБУ;
Перем ТаблицаДвиженийВыпускБУ;

Перем ТаблицаДвиженийПартииТоваровНаСкладахНУ;

Перем Заголовок;
Перем мВалютаРегламентированногоУчета;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

Процедура ЗаполнитьПоДокументуОснованию(Основание)

	// Заполним реквизиты из стандартного набора по документу основанию.
	ЗаполнениеДокументов.ЗаполнитьПоОснованию(ЭтотОбъект, Основание);

КонецПроцедуры

//////////////////////////////////////////////////////////////////////////////////
//// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Процедура формирует движения регистров по табличной части Продукция
////
Процедура ДвиженияПоТабличнойЧастиПродукция(ТаблицаПоПродукции, СтруктураШапкиДокумента)
	
	Если Продукция.Количество() = 0 И Услуги.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ОперацияБУ = Движения["Хозрасчетный"];
	ДвиженияВыпускПродукцииУслугБУ = Движения["ВыпускПродукцииУслугБухгалтерскийУчет"];
	ТаблицаДвиженийВыпускБУ        = ДвиженияВыпускПродукцииУслугБУ.Выгрузить();
	
	Для Каждого Строка Из ТаблицаПоПродукции Цикл
		
		ДвиженияПоВыпускуПродукцииОтходов(Строка, ОперацияБУ, ТаблицаДвиженийВыпускБУ, Истина, СтруктураШапкиДокумента);
		
	КонецЦикла;
	
	// ИНАГРО++
	Если ИНАГРО_ОбщийВызовСервераПовтИсп.ЕстьБСПУ() Тогда
	    КопияТаблицаПоПродукции = ТаблицаПоПродукции.Скопировать();
		КопияТаблицаПоПродукции.Колонки.Счет.Имя = "СчетУчетаБУ";
		КопияТаблицаПоПродукции.Колонки.Добавить("НаправлениеДвижения");
		КопияТаблицаПоПродукции.ЗаполнитьЗначения(Справочники.ИНАГРО_ВидыДвиженийВедомости.Приход, "НаправлениеДвижения");
		ИНАГРО_Общий.ИНАГРО_ВедомостьДвиженийПриход(Движения, КопияТаблицаПоПродукции, СтруктураШапкиДокумента);	
	КонецЕсли;	
	// ИНАГРО--
	
	ДвиженияВыпускПродукцииУслугБУ.мПериод = Дата;
	ДвиженияВыпускПродукцииУслугБУ.мТаблицаДвижений = ТаблицаДвиженийВыпускБУ;
	
КонецПроцедуры // ДвиженияПоТабличнойЧастиПродукция()

// Процедура формирует движения регистров по табличной части Услуги
////
Процедура ДвиженияПоТабличнойЧастиУслуги(ТаблицаПоУслугам, ТаблицаПоВторомуСобытиюНал, СтруктураШапкиДокумента)
	
	Если ТаблицаПоУслугам.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПроводкиБУ = Движения["Хозрасчетный"];
	
	ДатаДока = СтруктураШапкиДокумента.Дата;
	
	Для каждого СтрокаТаблицы Из ТаблицаПоУслугам Цикл
		Проводка = ПроводкиБУ.Добавить();
		
		Проводка.Период       = Дата;
		Проводка.Организация  = СтруктураШапкиДокумента.Организация;
		Проводка.Содержание   = НСтр("ru='Услуги';uk='Послуги'",Локализация.КодЯзыкаИнформационнойБазы());
		Проводка.Сумма        = СтрокаТаблицы.ПроводкиСуммаБезНДСРегл;
		
		Проводка.СчетДт       = СтрокаТаблицы.СчетЗатрат;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтрокаТаблицы.Субконто1);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, СтрокаТаблицы.Субконто2);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, СтрокаТаблицы.Субконто3);
		
		Проводка.СчетКт       = СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Контрагенты",СтруктураШапкиДокумента.Контрагент);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Договоры",СтруктураШапкиДокумента.ДоговорКонтрагента);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"ДокументыРасчетовСКонтрагентами", УправлениеВзаиморасчетами.ОпределитьДокументРасчетовСКонтрагентом(Ссылка, Сделка));

		Проводка.НалоговоеНазначениеДт = СтрокаТаблицы.НалоговоеНазначениеДоходовИЗатрат;
		Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыльДо2015 И
			СтруктураШапкиДокумента.НеОтноситьНаЗатратыПоНУ = Ложь И 
			СтрокаТаблицы.НалоговоеНазначениеДоходовИЗатрат  <> Справочники.НалоговыеНазначенияАктивовИЗатрат.НКУ_НеХозДеятельность Тогда
			
			Проводка.СуммаНУДт = НалоговыйУчет.УчестьСуммуАвансаДо01042011(СтруктураШапкиДокумента, СтрокаТаблицы.ПроводкиСуммаБезНДСРегл);
			
		КонецЕсли;
		
		Если СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом.Валютный Тогда
			Проводка.ВалютаКт        = СтруктураШапкиДокумента.ВалютаВзаиморасчетов;
			Проводка.ВалютнаяСуммаКт = СтрокаТаблицы.ПроводкиСуммаБезНДСВал;
		КонецЕсли;
		
		// Проводка по НДС
		Если СтруктураШапкиДокумента.ЕстьНДС И СтрокаТаблицы.ПроводкиСуммаНДСРегл > 0 Тогда
			
			Проводка = ПроводкиБУ.Добавить();
			
			Проводка.Период       = Дата;
			Проводка.Организация  = СтруктураШапкиДокумента.Организация;
			Проводка.Сумма        = СтрокаТаблицы.ПроводкиСуммаНДСРегл;
			Проводка.Содержание   = НСтр("ru='НДС - налоговый кредит (услуги)';uk='ПДВ - податковий кредит (послуги)'",Локализация.КодЯзыкаИнформационнойБазы());
			
			Проводка.СчетДт       = СтрокаТаблицы.СчетУчетаНДС;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Контрагенты",        СтруктураШапкиДокумента.Контрагент);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Договоры",           СтруктураШапкиДокумента.ДоговорКонтрагента);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"ДокументыРасчетовСКонтрагентами", НалоговыйУчет.ОпределитьСделкуНалоговыйУчет(СтруктураШапкиДокумента, Ссылка, Сделка));
			
			Проводка.СчетКт       = СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Контрагенты",СтруктураШапкиДокумента.Контрагент);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Договоры",СтруктураШапкиДокумента.ДоговорКонтрагента);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"ДокументыРасчетовСКонтрагентами",УправлениеВзаиморасчетами.ОпределитьДокументРасчетовСКонтрагентом(Ссылка, Сделка));
			Если СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом.Валютный Тогда
				Проводка.ВалютаКт        = СтруктураШапкиДокумента.ВалютаВзаиморасчетов;
				Проводка.ВалютнаяСуммаКт = СтрокаТаблицы.ПроводкиСуммаНДСВал;
			КонецЕсли;
			
			НалоговыйУчет.РазбитьПроводкуПоНДСНаПервоеВтороеСобытие(ТаблицаПоВторомуСобытиюНал, ПроводкиБУ, Проводка, 
													   "Дт", СтруктураШапкиДокумента.СчетУчетаНДСПодтвержденный, 
													  СтруктураШапкиДокумента.ДоговорКонтрагента, 
													  НалоговыйУчет.ОпределитьСделкуНалоговыйУчет(СтруктураШапкиДокумента, Ссылка, Сделка), Сделка,
													  Перечисления.СобытияОжидаемыйИПодтвержденныйНДСПриобретений.Поступление,
													  СтрокаТаблицы.СтавкаНДС, СтрокаТаблицы.ДляХозяйственнойДеятельности, СтрокаТаблицы.ВидДеятельностиНДС, ?(Дата < '20080101', Ложь, СтрокаТаблицы.Амортизируется),
													  СтрокаТаблицы.ПроводкиСуммаНДСВал);
			
		КонецЕсли; // Проводка по НДС
		
	КонецЦикла;
	
КонецПроцедуры // ДвиженияПоТабличнойЧастиУслуги()

// Процедура формирует движения по выпуску продукции.
//
Процедура ДвиженияПоВыпускуПродукцииОтходов(Строка, Операция, ТаблицаДвиженийВыпуск = Неопределено, БухУчет = Истина, СтруктураШапкиДокумента = Неопределено)
	
	Если БухУчет Тогда
		Счет                = Строка.Счет;
		СчетЗатратТекущий   = СчетЗатрат;
		
		// Сформируем проводку.
		Если НЕ ЗначениеЗаполнено(Счет)
			ИЛИ НЕ ЗначениеЗаполнено(СчетЗатратТекущий) Тогда
			Возврат;
		КонецЕсли;
		
		НоваяПроводка = Операция.Добавить();
		
		НоваяПроводка.Организация = Организация;
		НоваяПроводка.Период      = Дата;
		
		НоваяПроводка.СчетДт = Счет;
		БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, "Номенклатура", Строка.Номенклатура);
		БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, "Склады",       Склад);
		
		// Если способ оценки ФИФО или ЛИФО и на счете ведется партионный учет,
		// то в проводке указываем в качестве партии текущий документ.
		Если СтруктураШапкиДокумента.ВедетсяПартионныйУчет Тогда
			БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, "Партии",       Ссылка);
		КонецЕсли; 
		
		НоваяПроводка.Содержание = НСтр("ru='Выпуск продукции';uk='Випуск продукції'",Локализация.КодЯзыкаИнформационнойБазы());
		
		НоваяПроводка.СчетКт = СчетЗатратТекущий;
		БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетКт, НоваяПроводка.СубконтоКт, "Подразделения",        ПодразделениеОрганизации);
		БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетКт, НоваяПроводка.СубконтоКт, "НоменклатурныеГруппы", НоменклатурнаяГруппа);
		
		НоваяПроводка.КоличествоДт = ?(НоваяПроводка.СчетДТ.Количественный, Строка.Количество, 0);
		НоваяПроводка.Сумма        = Строка.СуммаПлановая;
		
		НоваяПроводка.НалоговоеНазначениеДт = Строка.НалоговоеНазначение;
		НоваяПроводка.НалоговоеНазначениеКт = Строка.НалоговоеНазначение;
		
		Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыльДо2015
			И Строка.НалоговоеНазначение <> Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяНеХозДеятельность Тогда
			НоваяПроводка.СуммаНУДт = Строка.СуммаПлановая;
			НоваяПроводка.СуммаНУКт = Строка.СуммаПлановая;
		КонецЕсли;
		
		// Отражения выпуска в регистре накопления ВыпускПродукцииУслуг
		СтрокаДвижения = ТаблицаДвиженийВыпуск.Добавить();
		СтрокаДвижения.Организация           = Организация;
		СтрокаДвижения.Продукция             = Строка.Номенклатура;
		СтрокаДвижения.СчетЗатрат            = СчетЗатрат;
		СтрокаДвижения.Подразделение         = ПодразделениеОрганизации;
		СтрокаДвижения.НоменклатурнаяГруппа  = НоменклатурнаяГруппа;
		СтрокаДвижения.НалоговоеНазначениеДоходовИЗатрат  = Строка.НалоговоеНазначение;
		СтрокаДвижения.СчетСписания          = Счет;
		
		Если Счет.ВидыСубконто.Количество() > 0 Тогда
			СтрокаДвижения.СубконтоСписания1 = НоваяПроводка.СубконтоДт[НоваяПроводка.СчетДт.ВидыСубконто[0].ВидСубконто];
		КонецЕсли; 
		
		Если Счет.ВидыСубконто.Количество() > 1 Тогда
			СтрокаДвижения.СубконтоСписания2 = НоваяПроводка.СубконтоДт[НоваяПроводка.СчетДт.ВидыСубконто[1].ВидСубконто];
		КонецЕсли;
		
		Если Счет.ВидыСубконто.Количество() > 2 Тогда
			СтрокаДвижения.СубконтоСписания3 = НоваяПроводка.СубконтоДт[НоваяПроводка.СчетДт.ВидыСубконто[2].ВидСубконто];
		КонецЕсли;
		
		СтрокаДвижения.Количество = Строка.Количество;
		СтрокаДвижения.ПлановаяСтоимость = Строка.СуммаПлановая;
	
	КонецЕсли;	
КонецПроцедуры // ДвиженияПоВыпускуПродукцииОтходов()

Функция ДвиженияПоРегистрамНалоговогоУчета(СтруктураШапкиДокумента, ТаблицаПоУслугам, ТаблицаПоТаре, Отказ)
	
	ТаблицаПоВторомуСобытиюНал = НалоговыйУчет.СоздатьСтруктуруТаблицыНалоговыхСумм();
	
	Если Не СтруктураШапкиДокумента.ЕстьНДС Тогда
		// Если не нужно отражать в налоговом учете, тогда не отражаем и в подсистеме учета НДС
		Возврат ТаблицаПоВторомуСобытиюНал;                    
	КонецЕсли;
	
	//Отразим Продажи в регистре ПродажиНалоговыйУчет
	НаборДвижений = Движения.ПриобретенияНалоговыйУчет;
	
	// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
	ТаблицаДвижений = НаборДвижений.ВыгрузитьКолонки();
	ТаблицаДвиженийТара = ТаблицаДвижений.Скопировать();
	
	
	// УСЛУГИ
	ТаблицаКопия = ТаблицаПоУслугам.Скопировать();
	ТаблицаКопия.Свернуть("СтавкаНДС,  ДляХозяйственнойДеятельности,ВидДеятельностиНДС, Амортизируется","СуммаБезНДСВал, СуммаБезНДСВал, СуммаСНДСВал, СуммаНДСВал, СуммаНДСВалИсходный");
	ТаблицаПриобретений = ТаблицаКопия.Скопировать();
	
	
	ТаблицаПриобретений.Колонки.Добавить("СуммаНДСПропорционально");
	Для каждого СтрокаКопии Из ТаблицаПриобретений Цикл
		Если СтрокаКопии.ВидДеятельностиНДС = Перечисления.ВидыДеятельностиНДС.ПропорциональноОблагаемая Тогда
			СтрокаКопии.СуммаНДСПропорционально = СтрокаКопии.СуммаНДСВал;
			СтрокаКопии.СуммаНДСВал = СтрокаКопии.СуммаНДСВалИсходный;
		КонецЕсли;
	КонецЦикла;
	
	ТаблицаПриобретений.Колонки.СуммаСНДСВал.Имя = "СуммаВзаиморасчетов";
	ТаблицаПриобретений.Колонки.СуммаНДСВал.Имя  = "СуммаНДС";
	ОбщегоНазначенияБПВызовСервера.ЗагрузитьВТаблицуЗначений(ТаблицаПриобретений, ТаблицаДвижений);
	
	ТаблицаДвижений.ЗаполнитьЗначения(Организация       , "Организация");
	ТаблицаДвижений.ЗаполнитьЗначения(ДоговорКонтрагента, "ДоговорКонтрагента");
	ТаблицаДвижений.ЗаполнитьЗначения(НалоговыйУчет.ОпределитьСделкуНалоговыйУчет(СтруктураШапкиДокумента,
	СтруктураШапкиДокумента.Ссылка, 
	СтруктураШапкиДокумента.Сделка),
	"Сделка");
	ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СобытияПриобретенияНалоговыйУчет.ПоступлениеОтПоставщика, "Событие");
	
	Если СтруктураШапкиДокумента.СложныйНалоговыйУчет Тогда
		
		// очистим налоговые реквизиты
		ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтавкиНДС.ПустаяСсылка(), 			"СтавкаНДС");
		ТаблицаДвижений.ЗаполнитьЗначения(Ложь, 										   	"ДляХозяйственнойДеятельности");
		ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.ВидыДеятельностиНДС.ПустаяСсылка(), 	"ВидДеятельностиНДС");
		ТаблицаДвижений.ЗаполнитьЗначения(Ложь,												"Амортизируется");
		ТаблицаДвижений.ЗаполнитьЗначения(0, 												"СуммаНДС");
		ТаблицаДвижений.ЗаполнитьЗначения(0, 												"СуммаНДСПропорционально");
		
	Иначе		
		
		Если СтруктураШапкиДокумента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоРасчетнымДокументам Тогда
			// взаиморасчеты по договору по расчетным документам - необходимо заполнить в регистре реквизит РасчетныйДокумент
			ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.Сделка, "РасчетныйДокумент");
		КонецЕсли;			
		
	КонецЕсли;
	
	//ТАРА
	ТаблицаКопия = ТаблицаПоТаре.Скопировать();
	ТаблицаКопия.Свернуть("СтавкаНДС, ДляХозяйственнойДеятельности,ВидДеятельностиНДС, Амортизируется","СуммаСНДСВал, СуммаНДСВал");
	ТаблицаКопия.Колонки.СуммаСНДСВал.Имя = "СуммаВзаиморасчетов";
	ТаблицаКопия.Колонки.СуммаНДСВал.Имя = "СуммаНДС";
	ОбщегоНазначенияБПВызовСервера.ЗагрузитьВТаблицуЗначений(ТаблицаКопия, ТаблицаДвиженийТара);
	ТаблицаДвиженийТара.ЗаполнитьЗначения(Организация       , "Организация");
	ТаблицаДвиженийТара.ЗаполнитьЗначения(ДоговорКонтрагента, "ДоговорКонтрагента");
	ТаблицаДвиженийТара.ЗаполнитьЗначения(НалоговыйУчет.ОпределитьСделкуНалоговыйУчет(СтруктураШапкиДокумента,
	СтруктураШапкиДокумента.Ссылка, 
	СтруктураШапкиДокумента.Сделка),
	"Сделка");
	ТаблицаДвиженийТара.ЗаполнитьЗначения(Перечисления.СобытияПриобретенияНалоговыйУчет.ПоступлениеОтПоставщика, "Событие");
	ТаблицаДвиженийТара.ЗаполнитьЗначения(Истина, "ВозвратнаяТара");
	
	Если СтруктураШапкиДокумента.СложныйНалоговыйУчет Тогда
		
		// очистим налоговые реквизиты
		ТаблицаДвиженийТара.ЗаполнитьЗначения(Перечисления.СтавкиНДС.ПустаяСсылка(), 			"СтавкаНДС");
		ТаблицаДвиженийТара.ЗаполнитьЗначения(Ложь, 										   		"ДляХозяйственнойДеятельности");
		ТаблицаДвиженийТара.ЗаполнитьЗначения(Перечисления.ВидыДеятельностиНДС.ПустаяСсылка(), 		"ВидДеятельностиНДС");
		ТаблицаДвиженийТара.ЗаполнитьЗначения(Ложь,													"Амортизируется");
		ТаблицаДвиженийТара.ЗаполнитьЗначения(0, 												"СуммаНДС");
		
	Иначе		
		
		Если СтруктураШапкиДокумента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоРасчетнымДокументам Тогда
			// взаиморасчеты по договору по расчетным документам - необходимо заполнить в регистре реквизит РасчетныйДокумент
			ТаблицаДвиженийТара.ЗаполнитьЗначения(Сделка, "РасчетныйДокумент");
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ Отказ И ТаблицаДвижений.Количество() > 0 Тогда
		
		НаборДвижений.мПериод          = Дата;
		НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;
		
		Движения.ПриобретенияНалоговыйУчет.ВыполнитьПриход();
		Движения.ПриобретенияНалоговыйУчет.Записать();
		
	КонецЕсли;
	
	Если НЕ Отказ И ТаблицаДвиженийТара.Количество() > 0 Тогда
		
		НаборДвижений.мПериод          = Дата;
		НаборДвижений.мТаблицаДвижений = ТаблицаДвиженийТара;
		
		Движения.ПриобретенияНалоговыйУчет.ВыполнитьПриход();
		Движения.ПриобретенияНалоговыйУчет.Записать();
		
	КонецЕсли;
	
	// Движения по регистру Ожидаемый и подтвержденный НДС приобретений
	Если НЕ СтруктураШапкиДокумента.СложныйНалоговыйУчет Тогда
		// Движения формируются по данным рассчета "первого события" 
		НалоговыйУчет.ДвиженияПоРегистрамНалоговогоУчетаУпрощенныйНалоговыйУчет(ЭтотОбъект, ТаблицаПоВторомуСобытиюНал);
		
	ИначеЕсли СтруктураШапкиДокумента.ВалютаВзаиморасчетов = мВалютаРегламентированногоУчета Тогда
		
		НаборДвижений = Движения.ОжидаемыйИПодтвержденныйНДСПриобретений;
		
		// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
		ТаблицаДвижений = НаборДвижений.ВыгрузитьКолонки();
		
		ТаблицаДвиженийТара = ТаблицаДвижений.Скопировать();
		
		
		// УСЛУГИ
		ТаблицаКопия = ТаблицаПоУслугам.Скопировать();
		ТаблицаКопия.Свернуть("СтавкаНДС,ДляХозяйственнойДеятельности,ВидДеятельностиНДС, Амортизируется","СуммаБезНДСВал,СуммаНДСВал,СуммаНДСВалИсходный");
		
		ТаблицаПриобретений = ТаблицаКопия.Скопировать();
		ТаблицаПриобретений.Колонки.Добавить("СуммаНДСПропорционально");
		
		Для каждого СтрокаКопии Из ТаблицаПриобретений Цикл
			Если СтрокаКопии.ВидДеятельностиНДС = Перечисления.ВидыДеятельностиНДС.ПропорциональноОблагаемая Тогда
				СуммаСНДСВал = СтрокаКопии.СуммаБезНДСВал  + СтрокаКопии.СуммаНДСВал;
				СтрокаКопии.СуммаНДСПропорционально = СтрокаКопии.СуммаНДСВал;
				СтрокаКопии.СуммаНДСВал 			= СтрокаКопии.СуммаНДСВалИсходный;
				СтрокаКопии.СуммаБезНДСВал 			= СуммаСНДСВал - СтрокаКопии.СуммаНДСВал;
			КонецЕсли;
		КонецЦикла;
		
		
		ТаблицаПриобретений.Колонки.СуммаБезНДСВал.Имя = "БазаНДС";
		ТаблицаПриобретений.Колонки.СуммаНДСВал   .Имя = "СуммаНДС";
		
		ОбщегоНазначенияБПВызовСервера.ЗагрузитьВТаблицуЗначений(ТаблицаПриобретений, ТаблицаДвижений);
		ТаблицаДвижений.ЗаполнитьЗначения(Организация       , "Организация");
		ТаблицаДвижений.ЗаполнитьЗначения(ДоговорКонтрагента, "ДоговорКонтрагента");
		ТаблицаДвижений.ЗаполнитьЗначения(НалоговыйУчет.ОпределитьСделкуНалоговыйУчет(СтруктураШапкиДокумента,
		СтруктураШапкиДокумента.Ссылка, 
		СтруктураШапкиДокумента.Сделка),
		"Сделка");
		ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СобытияОжидаемыйИПодтвержденныйНДСПриобретений.Поступление, 			"СобытиеНДС");
		ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.КодыОперацийОжидаемыйИПодтвержденныйНДСПриобретений.ОжидаемыйНДС , 	"КодОперации");
		
	
		// ТАРА
		ТаблицаКопия = ТаблицаПоТаре.Скопировать();
		ТаблицаКопия.Свернуть("СтавкаНДС,ДляХозяйственнойДеятельности,ВидДеятельностиНДС","СуммаБезНДСВал,СуммаНДСВал");
		ТаблицаКопия.Колонки.СуммаБезНДСВал.Имя = "БазаНДС";
		ТаблицаКопия.Колонки.СуммаНДСВал.Имя 	= "СуммаНДС";
		ОбщегоНазначенияБПВызовСервера.ЗагрузитьВТаблицуЗначений(ТаблицаКопия, ТаблицаДвиженийТара);
		ТаблицаДвиженийТара.ЗаполнитьЗначения(Организация       , "Организация");
		ТаблицаДвиженийТара.ЗаполнитьЗначения(ДоговорКонтрагента, "ДоговорКонтрагента");
		ТаблицаДвижений.ЗаполнитьЗначения(НалоговыйУчет.ОпределитьСделкуНалоговыйУчет(СтруктураШапкиДокумента,
		СтруктураШапкиДокумента.Ссылка, 
		СтруктураШапкиДокумента.Сделка),
		"Сделка");
		ТаблицаДвиженийТара.ЗаполнитьЗначения(Истина            , "ВозвратнаяТара");
		ТаблицаДвиженийТара.ЗаполнитьЗначения(Перечисления.СобытияОжидаемыйИПодтвержденныйНДСПриобретений.Поступление, 			"СобытиеНДС");
		ТаблицаДвиженийТара.ЗаполнитьЗначения(Перечисления.КодыОперацийОжидаемыйИПодтвержденныйНДСПриобретений.ОжидаемыйНДС   , "КодОперации");
		
		Если НЕ Отказ И ТаблицаДвижений.Количество() > 0 Тогда
			
			НаборДвижений.мПериод          = Дата;
			НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;
			
			Движения.ОжидаемыйИПодтвержденныйНДСПриобретений.ВыполнитьПриход();
			Движения.ОжидаемыйИПодтвержденныйНДСПриобретений.Записать();
			
		КонецЕсли;
		
		Если НЕ Отказ И ТаблицаДвиженийТара.Количество() > 0 Тогда
			
			НаборДвижений.мПериод          = Дата;
			НаборДвижений.мТаблицаДвижений = ТаблицаДвиженийТара;
			
			Движения.ОжидаемыйИПодтвержденныйНДСПриобретений.ВыполнитьПриход();
			Движения.ОжидаемыйИПодтвержденныйНДСПриобретений.Записать();
			
		КонецЕсли;		
		
	КонецЕсли;

	
	Возврат ТаблицаПоВторомуСобытиюНал;

КонецФункции

Функция ПодготовитьТаблицуТары(РезультатЗапросаПоТаре, СтруктураШапкиДокумента)
	
	ТаблицаТары = РезультатЗапросаПоТаре.Выгрузить();
	
	ТаблицаТары.Колонки.Добавить("ДляХозяйственнойДеятельности");	
	ТаблицаТары.Колонки.Добавить("Амортизируется");
	
	ТаблицаТары.ЗаполнитьЗначения(Перечисления.СтавкиНДС.НеНДС	, "СтавкаНДС");
	ТаблицаТары.ЗаполнитьЗначения(0								, "НДС");
	Для каждого Строка Из ТаблицаТары Цикл
		Строка.ДляХозяйственнойДеятельности = Истина;
		Строка.ВидДеятельностиНДС = Перечисления.ВидыДеятельностиНДС.Необлагаемая;
	КонецЦикла; 
	
	ПогрешностиОкругления = Новый Соответствие();
	
	НалоговыйУчет.ДобавитьКолонкиТоваровРегл(ТаблицаТары, СтруктураШапкиДокумента, ПогрешностиОкругления,Истина);

	Возврат ТаблицаТары;
	
КонецФункции // ПодготовитьТаблицуТары()

Функция ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента)
	
	ТаблицаМатериалов = РезультатЗапросаПоТоварам.Выгрузить();
	
	ТаблицаМатериалов.Колонки.Добавить("ДокументОприходования");
	ТаблицаМатериалов.Колонки.Добавить("Регистратор");
	ТаблицаМатериалов.Колонки.Добавить("Склад");
	ТаблицаМатериалов.Колонки.Добавить("Организация");
	ТаблицаМатериалов.Колонки.Добавить("ДоговорКонтрагента");
	ТаблицаМатериалов.Колонки.Добавить("Валюта");
	ТаблицаМатериалов.Колонки.Добавить("ВходящийНДС");
	ТаблицаМатериалов.Колонки.Добавить("КоэффОплаты");
		
	ТаблицаМатериалов.Колонки.Добавить("КорСчетСписанияБУ");
	ТаблицаМатериалов.Колонки.Добавить("КорСубконтоСписанияБУ1");
	ТаблицаМатериалов.Колонки.Добавить("КорСубконтоСписанияБУ2");
	ТаблицаМатериалов.Колонки.Добавить("КорСубконтоСписанияБУ3");
	ТаблицаМатериалов.Колонки.Добавить("НалоговоеНазначениеНовое");
	
	КоэффОплаты      = 1;
	
	ТаблицаМатериалов.ЗаполнитьЗначения(КоэффОплаты,   "КоэффОплаты");
	ТаблицаМатериалов.ЗаполнитьЗначения(ЭтотОбъект,    "Регистратор");
	ТаблицаМатериалов.ЗаполнитьЗначения(СтруктураШапкиДокумента.ДоговорКонтрагента,       "ДоговорКонтрагента");
	ТаблицаМатериалов.ЗаполнитьЗначения(СтруктураШапкиДокумента.Организация, "Организация");
	ТаблицаМатериалов.ЗаполнитьЗначения(СчетЗатрат,    "КорСчетСписанияБУ");
	ТаблицаМатериалов.ЗаполнитьЗначения(СтруктураШапкиДокумента.Склад,              "Склад");
	ТаблицаМатериалов.ЗаполнитьЗначения(СтруктураШапкиДокумента.ПодразделениеОрганизации,     "КорСубконтоСписанияБУ1");
	ТаблицаМатериалов.ЗаполнитьЗначения(СтруктураШапкиДокумента.НоменклатурнаяГруппа,     "КорСубконтоСписанияБУ2");
	
	ТаблицаМатериалов.Колонки.Добавить("ХарактерЗатрат");
		
	Для Каждого СтрокаМатериалов Из ТаблицаМатериалов Цикл
		СтрокаМатериалов.КорСубконтоСписанияБУ3  = СтрокаМатериалов.СтатьяЗатрат;
		НалоговыйУчет.ОпределениеАналитикиНалоговогоУчетаВПроводкахДляЗатрат(СтрокаМатериалов, СтрокаМатериалов.КорСчетСписанияБУ, СтрокаМатериалов.ХарактерЗатрат,
														       	СтрокаМатериалов.НалоговоеНазначениеНовое, ,                                                             
																СтрокаМатериалов.НалоговоеНазначение, СтрокаМатериалов.НалоговоеНазначениеНовое, "КорСубконтоСписанияБУ",Дата
																,,СтруктураШапкиДокумента.ЕстьНДС
																);
	КонецЦикла;
	
	Возврат ТаблицаМатериалов;
	
КонецФункции // ПодготовитьТаблицуТоваров()

Функция ПодготовитьТаблицуВозвратов(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента)
	
	ТаблицаМатериалов = РезультатЗапросаПоТоварам.Выгрузить();

	ТаблицаМатериалов.Колонки.Добавить("ДокументОприходования");
	ТаблицаМатериалов.Колонки.Добавить("Регистратор");
	ТаблицаМатериалов.Колонки.Добавить("Склад");
	ТаблицаМатериалов.Колонки.Добавить("Организация");
	ТаблицаМатериалов.Колонки.Добавить("ДоговорКонтрагента");	
	ТаблицаМатериалов.Колонки.Добавить("Валюта");
	ТаблицаМатериалов.Колонки.Добавить("ВходящийНДС");
	ТаблицаМатериалов.Колонки.Добавить("КоэффОплаты");
    	
	ТаблицаМатериалов.Колонки.Добавить("КорСчетСписанияБУ");	
	ТаблицаМатериалов.Колонки.Добавить("КорСубконтоСписанияБУ1");
	ТаблицаМатериалов.Колонки.Добавить("КорСубконтоСписанияБУ2");
	ТаблицаМатериалов.Колонки.Добавить("КорСубконтоСписанияБУ3");
		
	КоэффОплаты      = 1;

	ТаблицаМатериалов.ЗаполнитьЗначения(Ссылка.Склад,  "Склад");
	ТаблицаМатериалов.ЗаполнитьЗначения(КоэффОплаты,   "КоэффОплаты");
	ТаблицаМатериалов.ЗаполнитьЗначения(ЭтотОбъект,    "Регистратор");
	ТаблицаМатериалов.ЗаполнитьЗначения(СтруктураШапкиДокумента.ДоговорКонтрагента,       "ДоговорКонтрагента");
	ТаблицаМатериалов.ЗаполнитьЗначения(СтруктураШапкиДокумента.Организация, "Организация");
	ТаблицаМатериалов.ЗаполнитьЗначения(СтруктураШапкиДокумента.Склад, "КорСубконтоСписанияБУ3");
	
	ТаблицаМатериалов.Колонки.Добавить("НалоговоеНазначениеНовое", Новый ОписаниеТипов("СправочникСсылка.НалоговыеНазначенияАктивовИЗатрат"));
	ТаблицаМатериалов.ЗагрузитьКолонку(ТаблицаМатериалов.ВыгрузитьКолонку("НалоговоеНазначение") , "НалоговоеНазначениеНовое");	
	
	Для Каждого Строка Из ТаблицаМатериалов Цикл
		Строка.КорСчетСписанияБУ = Строка.СчетПередачиБУ;		
		Строка.КорСубконтоСписанияБУ1  = Строка.Номенклатура;	
		Строка.КорСубконтоСписанияБУ2  = Строка.Номенклатура;	
	КонецЦикла;
	
	Возврат ТаблицаМатериалов;

КонецФункции // ПодготовитьТаблицуВозвратов()

Функция ПодготовитьТаблицуУслуг(РезультатЗапросаПоУслугам, СтруктураШапкиДокумента)
	
	ТаблицаПоУслугам = РезультатЗапросаПоУслугам.Выгрузить();
	
	Если НЕ СтруктураШапкиДокумента.ЕстьНДС Тогда
		// для регламентного учета считаем НДС
		ТаблицаПоУслугам.ЗаполнитьЗначения(Перечисления.СтавкиНДС.БезНДС, "СтавкаНДС");
		ТаблицаПоУслугам.ЗаполнитьЗначения(0                            , "НДС");
	КонецЕсли;
	
	ТаблицаПоУслугам.Колонки.Добавить("ДляХозяйственнойДеятельности", Новый ОписаниеТипов("Булево"));
	ТаблицаПоУслугам.Колонки.Добавить("НалоговоеНазначениеДоходовИЗатрат");
	
	Для каждого Строка Из ТаблицаПоУслугам Цикл
		Если Строка.НалоговоеНазначение = Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяНеХозДеятельность Тогда
			Строка.ДляХозяйственнойДеятельности = Ложь;
		Иначе
			Строка.ДляХозяйственнойДеятельности = Истина;
		КонецЕсли; 
	КонецЦикла;

	ТаблицаПоУслугам.Колонки.Добавить("Амортизируется");
	ТаблицаПоУслугам.Колонки.Добавить("Субконто1");
	ТаблицаПоУслугам.Колонки.Добавить("Субконто2");
	ТаблицаПоУслугам.Колонки.Добавить("Субконто3");
	
	Для Каждого СтрокаТаблицы Из ТаблицаПоУслугам Цикл
		
		СтрокаТаблицы.Амортизируется = Ложь;
		
		СтрокаТаблицы.Субконто1 = СтруктураШапкиДокумента.ПодразделениеОрганизации;
		СтрокаТаблицы.Субконто2 = СтруктураШапкиДокумента.НоменклатурнаяГруппа;
		СтрокаТаблицы.Субконто3 = СтрокаТаблицы.СтатьяЗатрат;
		
	КонецЦикла;
	
	ТаблицаПоУслугам.Колонки.Добавить("ХарактерЗатрат");
	
	Для каждого Строка Из ТаблицаПоУслугам Цикл
		
		// заполним характер затрат, признак Амортизируется и НалоговоеНазначениеДоходовИЗатрат
		
		НалоговыйУчет.ОпределениеАналитикиНалоговогоУчетаВПроводкахДляЗатрат(Строка, Строка.СчетЗатрат, Строка.ХарактерЗатрат,
														       	Строка.НалоговоеНазначениеДоходовИЗатрат, Строка.Амортизируется,      
																Строка.НалоговоеНазначение, Строка.НалоговоеНазначениеДоходовИЗатрат,,Дата
																,,СтруктураШапкиДокумента.ЕстьНДС
																);
		
	КонецЦикла;
	
	ПогрешностиОкругления = Новый Соответствие();
	НалоговыйУчет.ДобавитьКолонкиТоваровРегл(ТаблицаПоУслугам, СтруктураШапкиДокумента, ПогрешностиОкругления,Истина);
	
	Возврат ТаблицаПоУслугам;
	
КонецФункции // ПодготовитьТаблицуУслуг()

// Процедура формирует структуру шапки документа и дополнительных полей.
//
Процедура ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента) Экспорт
	
	// Дерево значений, содержащее имена необходимых полей в запросе по шапке.
	Перем ДеревоПолейЗапросаПоШапке;
	

	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента = ОбщегоНазначенияРед12.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);	
	
	// Заполним по шапке документа дерево параметров, нужных при проведении.
	ДеревоПолейЗапросаПоШапке = ОбщегоНазначенияРед12.СформироватьДеревоПолейЗапросаПоШапке();
	ОбщегоНазначенияРед12.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "Организация"          , "ДоговорОрганизация");
	ОбщегоНазначенияРед12.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "ВидДоговора"          , "ВидДоговора");
	ОбщегоНазначенияРед12.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Склад"             ,   "ТипСклада"            , "ТипСклада");
	
	ОбщегоНазначенияРед12.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "ВедениеВзаиморасчетовНУ", "ВедениеВзаиморасчетовНУ");
	ОбщегоНазначенияРед12.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "СложныйНалоговыйУчет"	  , "СложныйНалоговыйУчет");
	ОбщегоНазначенияРед12.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "НеОтноситьНаЗатратыПоНУ"   , "НеОтноситьНаЗатратыПоНУ");
	
	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа
	СтруктураШапкиДокумента = УправлениеЗапасами.СформироватьЗапросПоДеревуПолей(ЭтотОбъект, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, );
	
КонецПроцедуры // ПодготовитьСтруктуруШапкиДокумента()

// Процедура определяет параметры учетной политики
//
Процедура ПодготовитьПараметрыУчетнойПолитики(СтруктураШапкиДокумента, Отказ, Заголовок)
	
	СтруктураШапкиДокумента.Вставить("ЕстьНалогНаПрибыльДо2015"        , УчетнаяПолитика.ПлательщикНалогаНаПрибыльДо2015(СтруктураШапкиДокумента.Организация, СтруктураШапкиДокумента.Дата));
	СтруктураШапкиДокумента.Вставить("ЕстьНДС"                         , УчетнаяПолитика.ПлательщикНДС(СтруктураШапкиДокумента.Организация, СтруктураШапкиДокумента.Дата));
	
	СпособОценкиМПЗ  = УчетнаяПолитика.СпособОценкиМПЗ(СтруктураШапкиДокумента.Организация, НачалоМесяца(СтруктураШапкиДокумента.Дата));
	ПартионныйУчетБУ = (СпособОценкиМПЗ = Перечисления.СпособыОценки.ФИФО ИЛИ СпособОценкиМПЗ = Перечисления.СпособыОценки.ЛИФО);
	
	СтруктураШапкиДокумента.Вставить("ВедетсяПартионныйУчет"           , ПартионныйУчетБУ);
	
КонецПроцедуры // ПодготовитьПараметрыУчетнойПолитики()

// Процедура формирует таблицы документа.
//
Процедура ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоПродукции, ТаблицаПоУслугам, ТаблицаМатериалов, ТаблицаВозвращенныхМатериалов, ТаблицаПоТаре, Отказ, Заголовок) Экспорт
	
	СтруктураПолей = Новый Структура();
	СтруктураПростыхПолей = Новый Структура();
	
	СтруктураПолей.Вставить("Номенклатура",        "Номенклатура");
	СтруктураПолей.Вставить("Услуга"      ,        "Номенклатура.Услуга");
	СтруктураПолей.Вставить("БланкСтрогогоУчета",  "Номенклатура.БланкСтрогогоУчета");
	СтруктураПолей.Вставить("Количество"  ,        "Количество * Коэффициент");
	СтруктураПолей.Вставить("СуммаПлановая",       "СуммаПлановая");
	СтруктураПолей.Вставить("Счет"        ,        "Счет");	
	Если СтруктураШапкиДокумента.ЕстьНДС Тогда
		СтруктураПолей.Вставить("НалоговоеНазначение"     	 , "Ссылка.НоменклатурнаяГруппа.НалоговоеНазначениеВПроизводстве");
		СтруктураПолей.Вставить("ВидНалоговойДеятельности"   , "Ссылка.НоменклатурнаяГруппа.НалоговоеНазначениеВПроизводстве.ВидНалоговойДеятельности");
		СтруктураПолей.Вставить("ВидДеятельностиНДС"         , "Ссылка.НоменклатурнаяГруппа.НалоговоеНазначениеВПроизводстве.ВидДеятельностиНДС");
		СтруктураПолей.Вставить("Амортизируется"             , "Ссылка.НоменклатурнаяГруппа.НалоговоеНазначениеВПроизводстве.Амортизируется");
	Иначе
		НалоговоеНазначениеВПроизводстве = Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяХозДеятельность;
		СтруктураПростыхПолей.Вставить("НалоговоеНазначение"     	, НалоговоеНазначениеВПроизводстве);
		СтруктураПростыхПолей.Вставить("ВидНалоговойДеятельности"   , НалоговоеНазначениеВПроизводстве.ВидНалоговойДеятельности);
		СтруктураПростыхПолей.Вставить("ВидДеятельностиНДС"         , НалоговоеНазначениеВПроизводстве.ВидДеятельностиНДС);
		СтруктураПростыхПолей.Вставить("Амортизируется"             , НалоговоеНазначениеВПроизводстве.Амортизируется);
	КонецЕсли;

		
	РезультатЗапросаПоТаблицеПродукция = ОбщегоНазначенияРед12.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Продукция", СтруктураПолей,СтруктураПростыхПолей);
	ТаблицаПоПродукции = РезультатЗапросаПоТаблицеПродукция.Выгрузить();
	
	СтруктураПолей = Новый Структура;
	СтруктураСложныхПолей = Новый Структура;
	СтруктураПростыхПолей = Новый Структура;
	СтруктураПолей.Вставить("Номенклатура", "Номенклатура");
	СтруктураПолей.Вставить("Количество"  , "Количество");
	СтруктураПолей.Вставить("Сумма"       , "Сумма");
	СтруктураПолей.Вставить("СчетЗатрат"  , "Ссылка.СчетЗатрат");
	СтруктураПолей.Вставить("СтатьяЗатрат", "СтатьяЗатрат");
	СтруктураПолей.Вставить("СтавкаНДС"   , "СтавкаНДС");
	СтруктураПолей.Вставить("НДС"         , "СуммаНДС");
	СтруктураПолей.Вставить("Содержание"  , "Содержание");
	СтруктураПолей.Вставить("Услуга"      , "Номенклатура.Услуга");
	СтруктураПолей.Вставить("Услуга"      , "Номенклатура.Услуга");
	СтруктураПолей.Вставить("БланкСтрогогоУчета", "Номенклатура.БланкСтрогогоУчета");
	Если СтруктураШапкиДокумента.ЕстьНДС Тогда
		СтруктураПолей.Вставить("НалоговоеНазначение",        "НалоговоеНазначение");
		СтруктураПолей.Вставить("ВидНалоговойДеятельности",   "НалоговоеНазначение.ВидНалоговойДеятельности");
		СтруктураПолей.Вставить("ВидДеятельностиНДС",         "НалоговоеНазначение.ВидДеятельностиНДС");
	Иначе
		НалоговоеНазначениеВПроизводстве = Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяХозДеятельность;
		СтруктураПростыхПолей.Вставить("НалоговоеНазначение"     	, НалоговоеНазначениеВПроизводстве);
		СтруктураПростыхПолей.Вставить("ВидНалоговойДеятельности"   , НалоговоеНазначениеВПроизводстве.ВидНалоговойДеятельности);
		СтруктураПростыхПолей.Вставить("ВидДеятельностиНДС"         , НалоговоеНазначениеВПроизводстве.ВидДеятельностиНДС);
	КонецЕсли;
	
	СтруктураСложныхПолей.Вставить("СчетУчетаНДС", "Ссылка.СчетУчетаНДС");
	
	РезультатЗапросаПоУслугам = ОбщегоНазначенияРед12.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Услуги", СтруктураПолей,СтруктураПростыхПолей,СтруктураСложныхПолей);
	ТаблицаПоУслугам = ПодготовитьТаблицуУслуг(РезультатЗапросаПоУслугам, СтруктураШапкиДокумента);
	
	СтруктураПолей = Новый Структура();
	СтруктураПростыхПолей = Новый Структура();
	СтруктураПолей.Вставить("НомерСтроки" , "НомерСтроки");
	СтруктураПолей.Вставить("Номенклатура", "Номенклатура");
	СтруктураПолей.Вставить("Количество"  , "Количество  * Коэффициент");	
	СтруктураПолей.Вставить("СчетУчетаБУ" , "СчетУчетаБУ");
	СтруктураПолей.Вставить("СтатьяЗатрат", "СтатьяЗатрат");
	Если СтруктураШапкиДокумента.ЕстьНДС Тогда
		СтруктураПолей.Вставить("НалоговоеНазначение"     	 , "НалоговоеНазначение");
		СтруктураПолей.Вставить("ВидНалоговойДеятельности"   , "НалоговоеНазначение.ВидНалоговойДеятельности");
		СтруктураПолей.Вставить("ВидДеятельностиНДС"         , "НалоговоеНазначение.ВидДеятельностиНДС");
		СтруктураПолей.Вставить("Амортизируется"             , "НалоговоеНазначение.Амортизируется");
	Иначе
		НалоговоеНазначениеВПроизводстве = Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяХозДеятельность;
		СтруктураПростыхПолей.Вставить("НалоговоеНазначение"     	, НалоговоеНазначениеВПроизводстве);
		СтруктураПростыхПолей.Вставить("ВидНалоговойДеятельности"   , НалоговоеНазначениеВПроизводстве.ВидНалоговойДеятельности);
		СтруктураПростыхПолей.Вставить("ВидДеятельностиНДС"         , НалоговоеНазначениеВПроизводстве.ВидДеятельностиНДС);
		СтруктураПростыхПолей.Вставить("Амортизируется"             , НалоговоеНазначениеВПроизводстве.Амортизируется);
	КонецЕсли;
	
	
	
	РезультатЗапросаПоМатериалам = ОбщегоНазначенияРед12.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "ИспользованныеМатериалы", СтруктураПолей, СтруктураПростыхПолей);
	
	// Подготовим таблицу товаров для проведения.
	ТаблицаМатериалов = ПодготовитьТаблицуТоваров(РезультатЗапросаПоМатериалам, СтруктураШапкиДокумента);
	
	СтруктураПолей = Новый Структура();
	СтруктураПростыхПолей = Новый Структура();
	СтруктураПолей.Вставить("НомерСтроки" ,				  "НомерСтроки");
	СтруктураПолей.Вставить("Номенклатура",				  "Номенклатура");
	СтруктураПолей.Вставить("Количество"  , 			  "Количество * Коэффициент");
	СтруктураПолей.Вставить("СчетУчетаБУ" , 			  "СчетУчетаБУ");	
	СтруктураПолей.Вставить("СчетПередачиБУ" , 			  "СчетПередачиБУ");
	Если СтруктураШапкиДокумента.ЕстьНДС Тогда
		СтруктураПолей.Вставить("НалоговоеНазначение",        "НалоговоеНазначение");
		СтруктураПолей.Вставить("ВидНалоговойДеятельности",   "НалоговоеНазначение.ВидНалоговойДеятельности");
		СтруктураПолей.Вставить("ВидДеятельностиНДС",         "НалоговоеНазначение.ВидДеятельностиНДС");
	Иначе
		НалоговоеНазначениеВПроизводстве = Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяХозДеятельность;
		СтруктураПростыхПолей.Вставить("НалоговоеНазначение"     	, НалоговоеНазначениеВПроизводстве);
		СтруктураПростыхПолей.Вставить("ВидНалоговойДеятельности"   , НалоговоеНазначениеВПроизводстве.ВидНалоговойДеятельности);
		СтруктураПростыхПолей.Вставить("ВидДеятельностиНДС"         , НалоговоеНазначениеВПроизводстве.ВидДеятельностиНДС);
	КонецЕсли;
	
	
	РезультатЗапросаПоВозвращеннымМатериалам = ОбщегоНазначенияРед12.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "ВозвращенныеМатериалы", СтруктураПолей, СтруктураПростыхПолей);

	// Подготовим таблицу товаров для проведения.
	ТаблицаВозвращенныхМатериалов = ПодготовитьТаблицуВозвратов(РезультатЗапросаПоВозвращеннымМатериалам, СтруктураШапкиДокумента);
	
	// Получим необходимые данные для проведения и проверки заполенения данные 
	// по табличной части "Возвратная тара".
	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("Номенклатура", "Номенклатура");
	СтруктураПолей.Вставить("Услуга"      , "Номенклатура.Услуга");
	СтруктураПолей.Вставить("БланкСтрогогоУчета", "Номенклатура.БланкСтрогогоУчета");
	СтруктураПолей.Вставить("Количество"  , "Количество");
	СтруктураПолей.Вставить("Сумма"       , "Сумма");
	СтруктураПолей.Вставить("СчетУчетаБУ", "СчетУчетаБУ");
	
	СтруктураПростыхПолей = Новый Структура();
	СтруктураПростыхПолей.Вставить("СтавкаНДС"              , Перечисления.СтавкиНДС.НеНДС);
	СтруктураПростыхПолей.Вставить("НДС"                    , 0);
	СтруктураПростыхПолей.Вставить("СчетУчетаНДС"           , ПланыСчетов.Хозрасчетный.ПустаяСсылка());
	Если СтруктураШапкиДокумента.ЕстьНДС Тогда
		СтруктураПолей.Вставить("НалоговоеНазначение"     	, "НалоговоеНазначение");
		СтруктураПолей.Вставить("ВидДеятельностиНДС"     	, "НалоговоеНазначение.ВидДеятельностиНДС");
	Иначе
		НалоговоеНазначениеВПроизводстве = Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяХозДеятельность;
		СтруктураПростыхПолей.Вставить("НалоговоеНазначение"     	, НалоговоеНазначениеВПроизводстве);
		СтруктураПростыхПолей.Вставить("ВидДеятельностиНДС"         , НалоговоеНазначениеВПроизводстве.ВидДеятельностиНДС);
	КонецЕсли;
	
	РезультатЗапросаПоТаре = ОбщегоНазначенияРед12.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "ВозвратнаяТара", СтруктураПолей,СтруктураПростыхПолей);
	ТаблицаПоТаре         = ПодготовитьТаблицуТары(РезультатЗапросаПоТаре, СтруктураШапкиДокумента);

КонецПроцедуры

//////////////////////////////////////////////////////////////////////////////////
//// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура - обработчик события "ОбработкаПроведения"
////
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	Перем Заголовок, СтруктураШапкиДокумента;
	Перем ТаблицаПоПродукции, ТаблицаПоУслугам, ТаблицаМатериалов, ТаблицаВозвращенныхМатериалов, ТаблицаПоТаре;
	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначенияБПВызовСервера.ПредставлениеДокументаПриПроведении(Ссылка);
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКПроведению(ЭтотОбъект);
	Если РучнаяКорректировка Тогда
		Возврат;
	КонецЕсли;
	
	ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента);
	
	// Получим данные учетной политики
	ПодготовитьПараметрыУчетнойПолитики(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоПродукции, ТаблицаПоУслугам, ТаблицаМатериалов, ТаблицаВозвращенныхМатериалов, ТаблицаПоТаре, Отказ, Заголовок);
	
	Если НЕ Отказ Тогда // Формирование движений регистров
		
		// Очистим движения регистров.
		Для Каждого Движение Из Движения Цикл
			Движение.Очистить();
			Движение.Записать(Истина);
		КонецЦикла;
		
		// Проводки по взаиморасчетам - авансы
		ТаблицыДокумента = Новый Структура();
		ТаблицыДокумента.Вставить("ТаблицаПоУслугам", ТаблицаПоУслугам);

		//Возможны корректировки сумм при расчетах в валюте
		ТаблицаАвансов = БухгалтерскийУчетРасчетовСКонтрагентами.ЗачетАванса(ЭтотОбъект, СтруктураШапкиДокумента , мВалютаРегламентированногоУчета, ТаблицыДокумента , Отказ, Заголовок, "АВ");
		
		ТаблицаПоВторомуСобытиюНал = ДвиженияПоРегистрамНалоговогоУчета(СтруктураШапкиДокумента, ТаблицаПоУслугам, ТаблицаПоТаре, Отказ);

		// Проводки по взаиморасчетам за тару - авансы
		ТаблицыДокумента = Новый Структура();
		ТаблицыДокумента.Вставить("ТаблицаПоТаре",ТаблицаПоТаре);

		//Возможны корректировки сумм при расчетах в валюте
		ТаблицаАвансовПоТаре = БухгалтерскийУчетРасчетовСКонтрагентами.ЗачетАванса(ЭтотОбъект, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета, ТаблицыДокумента , Отказ, Заголовок,"АВ",,,СтруктураШапкиДокумента.СчетУчетаРасчетовПоТаре, СтруктураШапкиДокумента.СчетУчетаРасчетовПоТареПоАвансам);
		// Проводки по взаиморасчетам за тару - авансы
		
		
		ДвиженияПоТабличнойЧастиПродукция(ТаблицаПоПродукции, СтруктураШапкиДокумента);
		ДвиженияПоТабличнойЧастиУслуги(ТаблицаПоУслугам, ТаблицаПоВторомуСобытиюНал, СтруктураШапкиДокумента);
		
		// ИНАГРО++
		Если ИНАГРО_ОбщийВызовСервераПовтИсп.ЕстьБСПУ() Тогда			
			КопияТаблицаВозвращенныхМатериалов = ТаблицаВозвращенныхМатериалов.Скопировать();
			КопияТаблицаВозвращенныхМатериалов.Колонки.Добавить("НаправлениеДвижения");
			КопияТаблицаВозвращенныхМатериалов.ЗаполнитьЗначения(Справочники.ИНАГРО_ВидыДвиженийВедомости.Приход, "НаправлениеДвижения");
			ИНАГРО_Общий.ИНАГРО_ВедомостьДвиженийПриход(Движения,КопияТаблицаВозвращенныхМатериалов,СтруктураШапкиДокумента);			
		КонецЕсли;	
		// ИНАГРО--

		ЕстьНалоговыйУчетПартий = (СтруктураШапкиДокумента.ЕстьНДС ИЛИ СтруктураШапкиДокумента.ЕстьНалогНаПрибыльДо2015);
		
		Если Не ТаблицаВозвращенныхМатериалов.Количество() = 0 Тогда
		
			ТаблицаМатериалов.Колонки.Добавить("СчетПередачиБУ");			
			ТаблицаМатериалов.Колонки.Добавить("КорСчетСписанияНУ");
			ТаблицаМатериалов.Колонки.Добавить("СодержаниеПроводки"); 
			
			ТаблицаМатериалов.ЗаполнитьЗначения("Списаны ТМЦ", "СодержаниеПроводки");
			
			ТаблицаВозвращенныхМатериалов.Колонки.Добавить("СодержаниеПроводки");
			ТаблицаВозвращенныхМатериалов.ЗаполнитьЗначения("Возврат сырья из переработки", "СодержаниеПроводки");
			
			ОбщегоНазначенияБПВызовСервера.ЗагрузитьВТаблицуЗначений(ТаблицаВозвращенныхМатериалов, ТаблицаМатериалов);
			
		КонецЕсли;
		
		УправлениеЗапасамиПартионныйУчет.ДвижениеПартийТоваров(ТаблицаМатериалов, Отказ);
				
		Если ТаблицаПоПродукции.Количество() <> 0 Или ТаблицаПоУслугам.Количество() <> 0 Тогда
			ДвиженияВыпускПродукцииУслугБУ.ДобавитьДвижение();
		КонецЕсли;
		
		ПроводкиБУ = Движения.Хозрасчетный;
	
		Для Каждого СтрокаТаблицы Из ТаблицаПоТаре Цикл
			
			// Бухгалтерский учет
			Проводка = ПроводкиБУ.Добавить();
			Проводка.Период                  = Дата;
			Проводка.Организация             = СтруктураШапкиДокумента.Организация;
			
			Проводка.Содержание              = НСтр("ru='Возвратная тара';uk='Зворотна тара'",Локализация.КодЯзыкаИнформационнойБазы());
			Проводка.Сумма                   = СтрокаТаблицы.Сумма;
			
			Проводка.СчетДт                  = СтрокаТаблицы.СчетУчетаБУ;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Номенклатура", СтрокаТаблицы.Номенклатура);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Склады",       СтруктураШапкиДокумента.Склад);
			
			Если СтруктураШапкиДокумента.ВедетсяПартионныйУчет Тогда 
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Партии", Ссылка);
			КонецЕсли;
			
			Проводка.КоличествоДт            = СтрокаТаблицы.Количество;
			
			Проводка.СчетКт                  = СтруктураШапкиДокумента.СчетУчетаРасчетовПоТаре;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Контрагенты",        СтруктураШапкиДокумента.Контрагент);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Договоры",           СтруктураШапкиДокумента.ДоговорКонтрагента);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"ДокументыРасчетовСКонтрагентами", УправлениеВзаиморасчетами.ОпределитьДокументРасчетовСКонтрагентом(Ссылка, Сделка));
			
			Если СтруктураШапкиДокумента.СчетУчетаРасчетовПоТаре.Валютный Тогда
				Проводка.ВалютаКт        = СтруктураШапкиДокумента.ВалютаДокумента;
				Проводка.ВалютнаяСуммаКт = СтрокаТаблицы.СуммаВал;
			КонецЕсли;
			
			Проводка.НалоговоеНазначениеДт   = СтрокаТаблицы.НалоговоеНазначение;
			Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыльДо2015 И
				СтруктураШапкиДокумента.НеОтноситьНаЗатратыПоНУ = Ложь И 
				СтрокаТаблицы.НалоговоеНазначение <> Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяНеХозДеятельность Тогда
				
				Проводка.СуммаНУДт = НалоговыйУчет.УчестьСуммуАвансаДо01042011(СтруктураШапкиДокумента, СтрокаТаблицы.ПроводкиСуммаБезНДСРегл);
			КонецЕсли;
			
		КонецЦикла; // Проводки по таре
	
	КонецЕсли;
	
	Движения.Хозрасчетный.ВыполнитьДействияПередЗаписьюДвижений();
	
	// ИНАГРО++
	Движения.Хозрасчетный.Записать();
	ИНАГРО_Общий.ИНАГРО_ДвиженияВыпускПродукции(СтруктураШапкиДокумента, Движения);
	ИНАГРО_Общий.ИНАГРО_ДвиженияЗатратыОрганизации_Приход(СтруктураШапкиДокумента, Движения);
	// ИНАГРО--

	ПроведениеСервер.ПодготовитьНаборыЗаписейКЗаписиДвижений(ЭтотОбъект);

КонецПроцедуры // ОбработкаПроведения()

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКОтменеПроведения(ЭтотОбъект);
	Движения.Записать();
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ПлательщикНДС = УчетнаяПолитика.ПлательщикНДС(Организация, Дата);
	
	// Посчитать суммы документа и записать ее в соответствующий реквизит шапки для показа в журналах
	СуммаДокумента = УчетНДС.ПолучитьСуммуДокументаСНДС(ЭтотОбъект, "Услуги");
	
	Если НЕ ПлательщикНДС Тогда
		// организация - не плательщик НДС. Установим во всех ТЧ признак соответствующего учета НДС
		НеОблНДСДеятельность = Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяХозДеятельность;
		
		Для каждого СтрокаТЧ  Из Услуги Цикл
		    СтрокаТЧ.НалоговоеНазначение = НеОблНДСДеятельность;
		КонецЦикла; 
		Для каждого СтрокаТЧ  Из ВозвратнаяТара Цикл
		    СтрокаТЧ.НалоговоеНазначение = НеОблНДСДеятельность;
		КонецЦикла; 
	КонецЕсли; 

КонецПроцедуры // ПередЗаписью

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)

	ТипДанныхЗаполнения = ТипЗнч(ДанныеЗаполнения);
	Если ДанныеЗаполнения <> Неопределено И ТипДанныхЗаполнения <> Тип("Структура")
		И Метаданные().ВводитсяНаОсновании.Содержит(ДанныеЗаполнения.Метаданные()) Тогда
		ЗаполнитьПоДокументуОснованию(ДанныеЗаполнения);
	Иначе
		СуммаВключаетНДС = Ложь;
	КонецЕсли;
	ЗаполнениеДокументов.Заполнить(ЭтотОбъект, ДанныеЗаполнения);

	// Специфические для конкретного документа действия
	Если ЗначениеЗаполнено(Организация)
		И ЗначениеЗаполнено(Контрагент)
		И ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
	
		Документы.ПоступлениеИзПереработки.ЗаполнитьСчетаУчетаРасчетов(ЭтотОбъект);
		
	КонецЕсли;
		
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)

	Дата = НачалоДня(ОбщегоНазначенияБП.ПолучитьРабочуюДату());
	Ответственный = Пользователи.ТекущийПользователь();

	СтруктураКурсаВзаиморасчетов = РаботаСКурсамиВалют.ПолучитьКурсВалюты(
	ВалютаДокумента, Дата);
	
	КурсВзаиморасчетов      = СтруктураКурсаВзаиморасчетов.Курс;
	КратностьВзаиморасчетов = СтруктураКурсаВзаиморасчетов.Кратность;
	
	Если Год(ОбъектКопирования.Дата) <> Год(Дата) Тогда
		Документы.ПоступлениеИзПереработки.РассчитатьПропорциональныйНДС(ЭтотОбъект,
			УчетнаяПолитика.ПлательщикНДС(Организация, Дата),
			НалоговыйУчет.ПолучитьКоэффициентПропорциональногоНДС(Организация, Дата)
			);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)

	МассивНепроверяемыхРеквизитов = Новый Массив;

	ПлательщикНДС = УчетнаяПолитика.ПлательщикНДС(Организация, Дата);
	ПлательщикНалогаНаПрибыльДо2015  = УчетнаяПолитика.ПлательщикНалогаНаПрибыльДо2015(Организация, Дата);
	
	РеквизитыДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДоговорКонтрагента, "ВидДоговора, ВалютаВзаиморасчетов, 
		|СложныйНалоговыйУчет, СхемаНалоговогоУчета");
	СложныйНалоговыйУчет = ЗначениеЗаполнено(ДоговорКонтрагента) И (РеквизитыДоговора.СложныйНалоговыйУчет);
	
	Если Не РеализацияТоваровУслугФормыКлиентСервер.ИспользуетсяСчетУчетаНДС(ПлательщикНДС, Ложь, Дата) Тогда
		МассивНепроверяемыхРеквизитов.Добавить("СчетУчетаНДС");		
	КонецЕсли;
	Если Не РеализацияТоваровУслугФормыКлиентСервер.ИспользуетсяСчетУчетаНДСПодтвержденный(ПлательщикНДС, Ложь, Дата, СложныйНалоговыйУчет) Тогда
		МассивНепроверяемыхРеквизитов.Добавить("СчетУчетаНДСПодтвержденный");		
	КонецЕсли;
	
	Если ПлательщикНалогаНаПрибыльДо2015 ИЛИ ПлательщикНДС Тогда
		Если НЕ ЗначениеЗаполнено(НоменклатурнаяГруппа.НалоговоеНазначениеВПроизводстве) Тогда
			ТекстСообщения = НСтр("ru='Не заполнено значение реквизита ""Налоговое назначение в производстве"" номенклатурной группы  <%1>';uk='Не заповнене значення реквізиту ""Податкове призначення у виробництві"" номенклатурної групи <%1>'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, НоменклатурнаяГруппа);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, "НоменклатурнаяГруппа", "Объект", Отказ);
		КонецЕсли;	
	КонецЕсли;	
	
	Если НЕ ПлательщикНДС Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Услуги.НалоговоеНазначение");		
	КонецЕсли;
	
	БухгалтерскийУчет.ПроверитьЗаполнениеАналитикиЗатратТабличнойЧасти(ЭтотОбъект, "Услуги", НСтр("ru='Услуги';uk='Послуги'"), Отказ);	
	Если ПлательщикНДС Тогда
		БухгалтерскийУчет.ПроверитьСоответствиеАналитикиЗатратНалоговомуНазначению(ЭтотОбъект, "Услуги", НСтр("ru='Услуги';uk='Послуги'"), , Отказ);
	КонецЕсли;
	
	Если ПлательщикНалогаНаПрибыльДо2015 Тогда
		
		ТаблицаПоУслугам = Услуги.Выгрузить();
		ТаблицаПоУслугам.Колонки.Добавить("Субконто1");
		ТаблицаПоУслугам.Колонки.Добавить("Субконто2");
		ТаблицаПоУслугам.Колонки.Добавить("Субконто3");
		
		Для Каждого СтрокаТаблицы Из ТаблицаПоУслугам Цикл
			
			СтрокаТаблицы.Субконто1 = ПодразделениеОрганизации;
			СтрокаТаблицы.Субконто2 = НоменклатурнаяГруппа;
			СтрокаТаблицы.Субконто3 = СтрокаТаблицы.СтатьяЗатрат;
			
			Отказ = Отказ ИЛИ НЕ ЗначениеЗаполнено(СчетЗатрат); // Предупреждение о реквизите СчетЗатрат будет выведено стандартным механизмом платформы
		
			ХарактерЗатрат = Неопределено;
			НалоговаяАналитикаВПроводке = Неопределено;
			НалоговыйУчет.ОпределениеАналитикиНалоговогоУчетаВПроводкахДляЗатрат(
				СтрокаТаблицы, 
				СчетЗатрат, 
				ХарактерЗатрат,
				НалоговаяАналитикаВПроводке, 
				, 
				СтрокаТаблицы.НалоговоеНазначение, 
				,
				,
				Дата,
				,
				ПлательщикНДС
			);
			
			Префикс = "Услуги[" + Формат(СтрокаТаблицы.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].";
			ИмяСписка = НСтр("ru='Услуги';uk='Послуги'");
			Если Не ЗначениеЗаполнено(НалоговаяАналитикаВПроводке) Тогда
				
				ОшибкаПроведения = Истина;
				Если ХарактерЗатрат = "Затраты" Тогда
					СтрокаСообщения = НСтр("ru='Не указано налоговое назначение затрат!';uk='Не вказане податкове призначення витрат!'");
				ИначеЕсли ХарактерЗатрат = "Строительство" Тогда
					СтрокаСообщения = НСтр("ru='Не указано налоговое назначение для объекта строительства или НМА!';uk=""Не зазначено податкове призначення для об'єкта будівництва або НМА!""");
				ИначеЕсли ХарактерЗатрат = "Производство" Тогда
					СтрокаСообщения = НСтр("ru='Не указано налоговое назначение в производстве для номенклатурной группы!';uk='Не вказане податкове призначення у виробництві для номенклатурної групи!'");
				ИначеЕсли ХарактерЗатрат = "РБП" Тогда
					СтрокаСообщения = НСтр("ru='Не указано налоговое назначение для расходов будущих периодов!';uk='Не зазначено податкове призначення для витрат майбутніх періодів!'");
				Иначе
					СтрокаСообщения = НСтр("ru='Невозможно определить налоговое назначение затрат для указанного счета затрат!';uk='неможливо визначити податкове призначення витрат для вказанного рахунку витрат!'");
					ОшибкаПроведения = Ложь;
				КонецЕсли;
			   
				ТекстСообщения = ОбщегоНазначенияБПКлиентСервер.ПолучитьТекстСообщения("Колонка", "Корректность", 
					НСтр("ru='Налоговое назначение (затрат)';uk='Податкове призначення (витрат)'"),
					СтрокаТаблицы.НомерСтроки, ИмяСписка,
					СтрокаСообщения
				);
				Поле = Префикс + "НалоговоеНазначениеДоходовИЗатрат";
				Если ОшибкаПроведения Тогда
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
				Иначе
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект");
				КонецЕсли;
				
			КонецЕсли;
			
			// нельзя по НДС указывать нехоз. деятельность, а по НП - хоз. деятельность
			Если ПлательщикНДС И ПлательщикНалогаНаПрибыльДо2015 Тогда
				
				НехозДеятельностьНДС = (СтрокаТаблицы.НалоговоеНазначение = Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяНеХозДеятельность);
				НехозДеятельностьНКУ = (НалоговаяАналитикаВПроводке = Справочники.НалоговыеНазначенияАктивовИЗатрат.НКУ_НеХозДеятельность);
				
				Если НЕ СтрокаТаблицы.НалоговоеНазначение = НалоговаяАналитикаВПроводке
				   И НехозДеятельностьНДС <> НехозДеятельностьНКУ Тогда 
					
					 ТекстСообщения = ОбщегоНазначенияБПКлиентСервер.ПолучитьТекстСообщения("Колонка", "Корректность", 
						НСтр("ru='Налоговое назначение (НДС)';uk='Податкове призначення (ПДВ)'"),
						СтрокаТаблицы.НомерСтроки, ИмяСписка,
						НСтр("ru='Для услуги нельзя указывать нехозяйственное налоговое назначение и одновременно хозяйственную деятельность по затратам (и наоборот)!';uk='Для послуги не можна вказувати негосподарське податкове призначення і одночасно господарську діяльність за витратами (і навпаки)!'")
					);
					Поле = Префикс + "НалоговоеНазначение";
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
					
				КонецЕсли;
				
			КонецЕсли;
			
			
		КонецЦикла;	
	КонецЕсли;
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьВозвратнуюТару") 
		ИЛИ ВозвратнаяТара.Количество() = 0 Тогда
		МассивНепроверяемыхРеквизитов.Добавить("СчетУчетаРасчетовПоТаре");
	КонецЕсли;
	
	Если Продукция.Количество() = 0 И Услуги.Количество() = 0 Тогда
		МассивНепроверяемыхРеквизитов.Добавить("СчетЗатрат");
		МассивНепроверяемыхРеквизитов.Добавить("НоменклатурнаяГруппа");
	КонецЕсли;
	
	// Проверка табличной части "Возвратная тара"

	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьВозвратнуюТару") Тогда
		МассивНепроверяемыхРеквизитов.Добавить("ВозвратнаяТара.Номенклатура");
		МассивНепроверяемыхРеквизитов.Добавить("ВозвратнаяТара.Количество");
		МассивНепроверяемыхРеквизитов.Добавить("ВозвратнаяТара.Сумма");
		МассивНепроверяемыхРеквизитов.Добавить("ВозвратнаяТара.СчетУчета");
	КонецЕсли;
	
	ИмяСписка = НСтр("ru='Возвратная тара';uk='Зворотна тара'");

	Если ПлательщикНДС Тогда
		
		Для Каждого СтрокаТаблицы Из ВозвратнаяТара Цикл
		
			Если ЗначениеЗаполнено(СтрокаТаблицы.НалоговоеНазначение) Тогда
				
				Если СтрокаТаблицы.НалоговоеНазначение = Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяНеХозДеятельность Тогда	
					
					ТекстСообщения = ОбщегоНазначенияБПКлиентСервер.ПолучитьТекстСообщения("Колонка", "Корректность", 
						НСтр("ru='Налоговое назначение (НДС)';uk='Податкове призначення (ПДВ)'"),
						СтрокаТаблицы.НомерСтроки, ИмяСписка,
						НСтр("ru='Указно налоговое назначение по нехозяйственной деятельности.';uk='Указно податкове призначення за негосподарській діяльності.'")
					);
					Поле = Префикс + "НалоговоеНазначение";
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);

					
				ИначеЕсли СтрокаТаблицы.НалоговоеНазначение = Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_Пропорционально Тогда
					   
					ТекстСообщения = ОбщегоНазначенияБПКлиентСервер.ПолучитьТекстСообщения("Колонка", "Корректность", 
						НСтр("ru='Налоговое назначение (НДС)';uk='Податкове призначення (ПДВ)'"),
						СтрокаТаблицы.НомерСтроки, ИмяСписка,
						НСтр("ru='Указно налоговое назначение по пропорциональному НДС.';uk='Указно податкове призначення за пропорційним ПДВ.'")
					);
					Поле = Префикс + "НалоговоеНазначение";
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла; 
		
	КонецЕсли;

	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);

КонецПроцедуры


мВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
#КонецЕсли