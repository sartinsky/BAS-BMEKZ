#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ИНАГРО_ПроведениеРасчетов.СформироватьКраткийСоставСотрудников(ЭтотОбъект, "Начисления");
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, Режим)
	
	// Заголовок для сообщений об ошибках проведения.
	ПроведениеСервер.ПодготовитьНаборыЗаписейКПроведению(ЭтотОбъект);
	Заголовок = ОбщегоНазначенияБПВызовСервера.ПредставлениеДокументаПриПроведении(Ссылка);
	
	// получим реквизиты табличной части
	РезультатЗапросаПоНачислениям = СформироватьЗапросПоНачисления();
	ВыборкаПоНачислениям = РезультатЗапросаПоНачислениям.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаПоНачислениям.Следующий() Цикл 
		
		// проверим очередную строку табличной части
		ПроверитьЗаполнениеСтрокиНачислений(ВыборкаПоНачислениям, Отказ, Заголовок);
		Если НЕ Отказ Тогда
			// Заполним записи в наборах записей регистров
			ДобавитьСтрокуОсновныхНачислений(ВыборкаПоНачислениям);
			ДобавитьСтрокуВДвиженияПоРегистрамНакопления(ВыборкаПоНачислениям);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ОбработкаПроведения()

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКОтменеПроведения(ЭтотОбъект);
	Движения.Записать();
	
КонецПроцедуры

#КонецОбласти

#Область Проведение

// Формирует запрос по таблице "Начисления" документа
//
// Параметры:
//	Режим		- режим проведения.
//
// Возвращаемое значение:
//	Результат запроса.
//
Функция СформироватьЗапросПоНачисления()
	
	Запрос = Новый Запрос;
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка",					Ссылка);
	Запрос.УстановитьПараметр("ПустаяДата",						'00010101');
	Запрос.УстановитьПараметр("ГоловнаяОрганизация",			Организация);
	// Описание текста запроса:
	// 1. Выборка "ТЧНачисления":
	//		Выбираются строки документа.
	// 2. Выборка "ПересекающиесяСтроки":
	//		Среди остальных строк документа ищем строки, имеющие пересекающийся период действия.
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТЧНачисления.НомерСтроки КАК НомерСтроки,
	|	ВЫБОР
	|		КОГДА ТЧНачисления.Сотрудник.ИНАГРО_ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.ВнутреннееСовместительство)
	|			ТОГДА ТЧНачисления.Сотрудник.ОсновноеНазначение
	|		ИНАЧЕ ТЧНачисления.Сотрудник
	|	КОНЕЦ КАК Сотрудник,
	|	ТЧНачисления.Сотрудник КАК Назначение,
	|	ТЧНачисления.Сотрудник.Наименование,
	|	ТЧНачисления.Сотрудник.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ТЧНачисления.ПодразделениеОрганизации,
	|	ТЧНачисления.ДатаВыхода КАК ДатаВыхода,
	|	ВЫБОР
	|		КОГДА ТЧНачисления.ВидРасчета.ЗачетОтработанногоВремени
	|			ТОГДА ТЧНачисления.ОтработаноЧасов
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ОтработаноЧасов,
	|	ВЫБОР
	|		КОГДА ТЧНачисления.ВидРасчета.ЗачетОтработанногоВремени
	|			ТОГДА ТЧНачисления.ЧасовДвойных
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ЧасовДвойных,
	|	ТЧНачисления.ВидРасчета КАК ВидРасчета,
	|	ДатыПоследнихДвиженийРаботников.Период КАК ДатаПоследнегоДвиженияПоРаботнику,
	|	ТЧНачисления.ВидРасчета.ДоходНДФЛ КАК ДоходНДФЛ,
	|	ТЧНачисления.Размер,
	|	ТЧНачисления.Результат,
	|	ТЧНачисления.Сторно,
	|	ВЫБОР
	|		КОГДА ТЧНачисления.Сотрудник.ГоловнаяОрганизация = &ГоловнаяОрганизация
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ОшибкаНеСоответствиеСотрудникаИОрганизации,
	|	ДанныеПоРаботникуДоНазначения.ГрафикРаботы КАК ГрафикРаботы,
	|	ДанныеПоРаботникуДоНазначения.ЗанимаемыхСтавок КАК ЗанимаемыхСтавок,
	|	ПересекающиесяСтроки.КонфликтнаяСтрокаНомер,
	|	ВЫБОР
	|		КОГДА НЕ ТЧНачисления.ПодразделениеОрганизации.Владелец = &ГоловнаяОрганизация
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ОшибкаПодразделениеНеПринадлежитОрганизации,
	|	ТЧНачисления.ПодразделениеОрганизации КАК Подразделение
	|ИЗ
	|	Документ.ИНАГРО_ОплатаПраздничныхИВыходныхДнейОрганизаций.Начисления КАК ТЧНачисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ТЧНачисления.НомерСтроки КАК НомерСтроки,
	|			МАКСИМУМ(РаботникиОрганизации.Период) КАК Период
	|		ИЗ
	|			Документ.ИНАГРО_ОплатаПраздничныхИВыходныхДнейОрганизаций.Начисления КАК ТЧНачисления
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИНАГРО_РаботникиОрганизаций КАК РаботникиОрганизации
	|				ПО (РаботникиОрганизации.Период <= ТЧНачисления.ДатаВыхода)
	|					И ТЧНачисления.Сотрудник = РаботникиОрганизации.Сотрудник
	|		ГДЕ
	|			ТЧНачисления.Ссылка = &ДокументСсылка
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ТЧНачисления.НомерСтроки) КАК ДатыПоследнихДвиженийРаботников
	|		ПО ТЧНачисления.НомерСтроки = ДатыПоследнихДвиженийРаботников.НомерСтроки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИНАГРО_РаботникиОрганизаций КАК ДанныеПоРаботникуДоНазначения
	|		ПО (ДанныеПоРаботникуДоНазначения.Период = ДатыПоследнихДвиженийРаботников.Период)
	|			И ТЧНачисления.Сотрудник = ДанныеПоРаботникуДоНазначения.Сотрудник
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ТЧНачисления.НомерСтроки КАК НомерСтроки,
	|			МИНИМУМ(ТЧНачисления2.НомерСтроки) КАК КонфликтнаяСтрокаНомер
	|		ИЗ
	|			Документ.ИНАГРО_ОплатаПраздничныхИВыходныхДнейОрганизаций.Начисления КАК ТЧНачисления
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ИНАГРО_ОплатаПраздничныхИВыходныхДнейОрганизаций.Начисления КАК ТЧНачисления2
	|				ПО (ТЧНачисления2.Ссылка = &ДокументСсылка)
	|					И ТЧНачисления.ВидРасчета = ТЧНачисления2.ВидРасчета
	|					И ТЧНачисления.НомерСтроки > ТЧНачисления2.НомерСтроки
	|					И ТЧНачисления.ДатаВыхода = ТЧНачисления2.ДатаВыхода
	|					И ТЧНачисления.Сотрудник = ТЧНачисления2.Сотрудник
	|		ГДЕ
	|			ТЧНачисления.Ссылка = &ДокументСсылка
	|			И НЕ ТЧНачисления.Сторно
	|			И НЕ ТЧНачисления2.Сторно
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ТЧНачисления.НомерСтроки) КАК ПересекающиесяСтроки
	|		ПО ТЧНачисления.НомерСтроки = ПересекающиесяСтроки.НомерСтроки
	|ГДЕ
	|	ТЧНачисления.Ссылка = &ДокументСсылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос.Выполнить();
	
КонецФункции // СформироватьЗапросПоНачисления()

// Проверяет правильность заполнения реквизитов в строке ТЧ "Начисления" документа.
// Если какой-то из реквизитов, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса по строке ТЧ документа,
// все проверяемые реквизиты должны быть включены в выборку.
//
// Параметры: 
//	ВыборкаПоШапкеДокумента		- выборка из результата запроса по шапке документа,
//	ВыборкаПоСтрокамДокумента	- спозиционированная на определенной строке выборка 
//								  из результата запроса по товарам документа, 
//	Отказ 						- флаг отказа в проведении,
//	Заголовок					- Заголовок для сообщений об ошибках проведения.
//
Процедура ПроверитьЗаполнениеСтрокиНачислений(ВыборкаПоСтрокамДокумента, Отказ, Заголовок)
	
	СтрокаНачалаСообщенияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='В строке номер ""%1"" табл. части ""Начисления"": ';uk='У рядку номер ""%1"" табл. частини ""Нарахування"": '"), СокрЛП(ВыборкаПоСтрокамДокумента.НомерСтроки));
	
	// Подразделение
	Если ВыборкаПоСтрокамДокумента.ОшибкаПодразделениеНеПринадлежитОрганизации Тогда
		ТекстСообщения = СтрокаНачалаСообщенияОбОшибке + НСтр("ru='указано подразделение, принадлежащее другой организации!';uk='вказано підрозділ, що належить іншій організації!'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,ЭтотОбъект,,,Отказ);
	КонецЕсли;
	
	// Организация сотрудника должна совпадать с организацией документа
	Если ВыборкаПоСтрокамДокумента.ОшибкаНеСоответствиеСотрудникаИОрганизации Тогда
		ТекстСообщения = СтрокаНачалаСообщенияОбОшибке + НСтр("ru='указанный сотрудник оформлен на другую организацию!';uk='зазначений співробітник оформлений на іншу організацію!'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,ЭтотОбъект,,,Отказ);
	КонецЕсли;
	
	// Проверка: ранее работник должен быть принят на работу
	Если ВыборкаПоСтрокамДокумента.ЗанимаемыхСтавок = NULL Тогда
		ТекстСообщения = СтрокаНачалаСообщенияОбОшибке + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='на %1 работник %2 еще не принят на работу!';uk='на %1 працівник %2 ще не прийнятий на роботу!'"), Формат(ВыборкаПоСтрокамДокумента.ДатаВыхода, "ДЛФ=DD"), ВыборкаПоСтрокамДокумента.СотрудникНаименование);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,ЭтотОбъект,,,Отказ);
		
	ИначеЕсли ВыборкаПоСтрокамДокумента.ЗанимаемыхСтавок = 0 Тогда
		ТекстСообщения = СтрокаНачалаСообщенияОбОшибке + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='на %1 работник %2 уже уволен (с %3)!';uk='на %1 працівник %2 уже звільнений (з %3)!'"), Формат(ВыборкаПоСтрокамДокумента.ДатаВыхода, "ДЛФ=DD"), ВыборкаПоСтрокамДокумента.СотрудникНаименование, Формат(ВыборкаПоСтрокамДокумента.ДатаПоследнегоДвиженияПоРаботнику, "ДЛФ=DD"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,ЭтотОбъект,,,Отказ);
	КонецЕсли;
	
	// График работы
	Если Не ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ГрафикРаботы) Тогда
		ТекстСообщения = СтрокаНачалаСообщенияОбОшибке + НСтр("ru='не указан рабочий график!';uk='не вказано робочий графік!'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,ЭтотОбъект,,,Отказ);
	КонецЕсли;
	
	// Проверка: противоречие другой строке документа
	Если ВыборкаПоСтрокамДокумента.КонфликтнаяСтрокаНомер <> NULL Тогда
		ТекстСообщения = СтрокаНачалаСообщенияОбОшибке + НСтр("ru='указана повторяющаяся строка (см. строку  № ';uk='вказано рядок що повторюється (див. рядок № '");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,ЭтотОбъект,,,Отказ);
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаполнениеСтрокиНачислений()

// По строке выборок из результатов запроса по документу формируем движения по регистру.
//
// Параметры: 
//	ВыборкаПоСтрокамДокумента	- спозиционированная на определенной строке выборка 
//								  из результата запроса к ТЧ документа, 
// Возвращаемое значение:
//	Нет.
//
Процедура ДобавитьСтрокуОсновныхНачислений(ВыборкаПоСтрокамДокумента)
	
	Движения.ИНАГРО_Начисления.Записывать = Истина;
	Движение = Движения.ИНАГРО_Начисления.Добавить();
	
	ЗаполнитьЗначенияСвойств(Движение, ВыборкаПоСтрокамДокумента); 
	
	// Свойства
	Движение.ПериодРегистрации			= ПериодРегистрации;
	Движение.ПериодДействияНачало		= ВыборкаПоСтрокамДокумента.ДатаВыхода;
	Движение.ПериодДействияКонец		= КонецДня(ВыборкаПоСтрокамДокумента.ДатаВыхода);
	Движение.БазовыйПериодНачало		= ВыборкаПоСтрокамДокумента.ДатаВыхода;
	Движение.БазовыйПериодКонец			= КонецДня(ВыборкаПоСтрокамДокумента.ДатаВыхода);
	Движение.Организация				= Организация;
	
	Если ВыборкаПоСтрокамДокумента.ВидРасчета.УчитыватьКалендарные Тогда
		Движение.КалендарныеДни			= 1;
	КонецЕсли;
	ОтработаноЧасов = ВыборкаПоСтрокамДокумента.ОтработаноЧасов + ВыборкаПоСтрокамДокумента.ЧасовДвойных;
	Движение.ОтработаноЧасов			= ОтработаноЧасов;
	Движение.ОплаченоДнейЧасов			= ОтработаноЧасов;
	
	// Реквизиты
	Движение.Показатель1				= ВыборкаПоСтрокамДокумента.Размер;
	Движение.ВидУчетаВремени			= Перечисления.ИНАГРО_ВидыУчетаВремени.ПоЧасам;
	
КонецПроцедуры // ДобавитьСтрокуОсновныхНачислений()

Процедура ДобавитьСтрокуВДвиженияПоРегистрамНакопления(ВыборкаПоТЧ)
	
	Движения.ВзаиморасчетыССотрудниками.Записывать = Истина;
	Движение = Движения.ВзаиморасчетыССотрудниками.Добавить();
	
	ЗаполнитьЗначенияСвойств(Движение, ВыборкаПоТЧ); 
	
	// Свойства
	Движение.Период					= КонецМесяца(ПериодРегистрации);
	Движение.ВидДвижения			= ВидДвиженияНакопления.Приход;
	
	// Измерения
	Движение.Организация			= Организация;
	
	Движение.ПериодВзаиморасчетов	= ПериодРегистрации;
	Движение.СчетУчета				= ВыборкаПоТЧ.ВидРасчета.СчетУчета;
	
	// Ресурсы
	Движение.СуммаВзаиморасчетов	= ВыборкаПоТЧ.Результат;
	Движение.КодОперации			= Перечисления.КодыОперацийВзаиморасчетыСРаботникамиОрганизаций.Начисления;
	
КонецПроцедуры // ДобавитьСтрокуВДвиженияПоРегистрамНакопления()

#КонецОбласти

#КонецЕсли
