#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	
	Если Параметры.Ключ.Пустая() Тогда
		ПодготовитьФормуНаСервере();
	Иначе
	КонецЕсли;
	
	
	// Уведомим о появлении функционала рабочей даты
	НастройкиПредупреждений = ОбщегоНазначенияБП.НастройкиПредупрежденийОбИзменениях("РабочаяДатаИзДокумента");
	
	// Показываем, если это новый документ и сама рабочая дата еще не установлена.
	НастройкиПредупреждений.РабочаяДатаИзДокумента = НастройкиПредупреждений.РабочаяДатаИзДокумента
		И Параметры.Ключ.Пустая()
		И НЕ ЗначениеЗаполнено(БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("РабочаяДата"));
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	ПодготовитьФормуНаСервере();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	УстановитьСостояниеДокумента();
	
	ЗаполнитьДобавленныеКолонкиТаблиц();

КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)

	Оповестить("ОбновитьФорму", ВладелецФормы, Объект.Ссылка);

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	ОбщегоНазначенияБПКлиент.ОбработкаОповещенияФормыДокумента(ЭтаФорма, Объект.Ссылка, ИмяСобытия, Параметр, Источник);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ВидОперацииПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(Объект.ВидОперации) Тогда
		Возврат;
	КонецЕсли;
	
	ВидОперацииПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)

	Если НЕ ЗначениеЗаполнено(Объект.Дата) Тогда
		Возврат;
	КонецЕсли;
	
	
	Если НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДатаДокумента) Тогда
		// Изменение времени не влияет на поведение документа.
		ТекущаяДатаДокумента = Объект.Дата;
		Возврат;
	КонецЕсли;

	// Общие проверки условий по датам.
	ТребуетсяВызовСервера = ОбщегоНазначенияБПКлиент.ТребуетсяВызовСервераПриИзмененииДатыДокумента(Объект.Дата, 
		ТекущаяДатаДокумента, Объект.ВалютаДокумента, ВалютаРегламентированногоУчета);

	// При поступлении от продажи валюты также меняется курс ЦБ на дату реализации.
	
	// Если определили, что изменение даты может повлиять на какие-либо параметры, 
	// то передаем обработку на сервер.
	Если ТребуетсяВызовСервера Тогда
		ДатаПриИзмененииСервер();
	КонецЕсли;

	// Запомним новую дату документа.
	ТекущаяДатаДокумента = Объект.Дата;

	// Покажем оповещение о появлении механизма рабочей даты.
	Если НастройкиПредупреждений.РабочаяДатаИзДокумента 
		И НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ОбщегоНазначенияБПКлиент.ПоказатьПредупреждениеОбИзменениях("РабочаяДатаИзДокумента", , НастройкиПредупреждений);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)

	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		ОрганизацияПриИзмененииСервер();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СчетОрганизацииПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(Объект.СчетОрганизации) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОбъекта = ТекущиеПараметрыОбъекта(ЭтаФорма);
	НовыеПараметры   = НовыеПараметрыПриИзмененииСчетаОрганизации(ПараметрыОбъекта);
	
	Если НовыеПараметры.ВалютаДокумента <> ПараметрыОбъекта.ВалютаДокумента Тогда
		СвойстваОбъектКЗаполнению = "ВалютаДокумента, СчетКонтрагента";
		
		ЗаполнитьЗначенияСвойств(ЭтаФорма, НовыеПараметры, "КурсДокумента, КратностьДокумента");
		ЗаполнитьЗначенияСвойств(Объект,   НовыеПараметры, СвойстваОбъектКЗаполнению);
		ИнициализироватьСвойстваПлатежаНаСервере(Истина);
		ЗаполнитьЗначенияСвойств(СвойстваПлатежа, НовыеПараметры);
		ПерезаполнитьРасшифровкуПлатежа();
		
		// ВалютаДокумента не устанавливается вручную, а берется из валюты банковского счета организации
		УстановитьПараметрыВыбораБанковскихСчетов(ЭтаФорма);
		УстановитьПараметрыВыбораДоговораСКонтрагентом(ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СчетБанкПриИзменении(Элемент)

	Если ЗначениеЗаполнено(Объект.СчетБанк) Тогда
		СчетБанкПриИзмененииСервер();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)

	Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
		КонтрагентПриИзмененииСервер();
	КонецЕсли;
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура СуммаДокументаПриИзменении(Элемент)
	
	Если ЕстьРасшифровкаПлатежа(Объект.ВидОперации)
			И Объект.РасшифровкаПлатежа.Количество() = 1 Тогда
		СтрокаПлатеж = Объект.РасшифровкаПлатежа[0];
		СтрокаПлатеж.СуммаПлатежа = Объект.СуммаДокумента;
		ПересчитатьСуммуНДС(СтрокаПлатеж);
		РассчитатьСуммуВзаиморасчетов(СтрокаПлатеж, ЭтаФорма);
		
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьПропорциональныйНДСТабЧасти(СтрокаПлатеж,ЭтотОбъект.ЕстьНДС,ЭтотОбъект.КоэффициентПропорциональногоНДС);

		ОбновитьИтоги(ЭтаФорма);
	ИначеЕсли (Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеДенежныхСредств.ПокупкаПродажаВалюты")
		ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеДенежныхСредств.ПрочееПоступлениеБезналичныхДенежныхСредств")
		ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеДенежныхСредств.ПоступленияОтПродажПоПлатежнымКартамИБанковскимКредитам"))
		И Объект.РасшифровкаПлатежа.Количество() = 1 Тогда
		СтрокаПлатеж = Объект.РасшифровкаПлатежа[0];
		СтрокаПлатеж.СуммаПлатежа = Объект.СуммаДокумента;
	//ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеДенежныхСредств.ПоступлениеСредствОтФСС") // ИНАГРО
	//	И Объект.РасшифровкаПлатежа.Количество() = 1 Тогда
	//	СтрокаПлатеж = Объект.РасшифровкаПлатежа[0];
	//	СтрокаПлатеж.СуммаПоСтатьям = Объект.СуммаДокумента;	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СчетУчетаПрочиеПриИзменении(Элемент)

	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма);
	УстановитьЗаголовкиИДоступностьСубконто(ЭтаФорма, Объект.СчетУчетаРасчетовСКонтрагентом,, "Прочие");

КонецПроцедуры

&НаКлиенте
Процедура СубконтоКтУслугиБанкаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	ПараметрыДокумента = ПолучитьСписокПараметровВыбораСубконто(ЭтаФорма, Объект, "СубконтоКт%Индекс%");
	ПараметрыДокумента.Вставить("СчетУчета", Объект.СчетУчетаРасчетовСКонтрагентом);
	ОбщегоНазначенияБПКлиент.НачалоВыбораЗначенияСубконто(ЭтаФорма, Элемент, СтандартнаяОбработка, ПараметрыДокумента);
	
	Если НЕ СтандартнаяОбработка Тогда
		Возврат;
	КонецЕсли;

	СубконтоКтНачалоВыбора(Элемент, ПараметрыДокумента, СтандартнаяОбработка, "УслугиБанка");

КонецПроцедуры

&НаКлиенте
Процедура СубконтоКтПрочиеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	ПараметрыДокумента = ПолучитьСписокПараметровВыбораСубконто(ЭтаФорма, Объект, "СубконтоКт%Индекс%");
	ПараметрыДокумента.Вставить("СчетУчета", Объект.СчетУчетаРасчетовСКонтрагентом);
	ОбщегоНазначенияБПКлиент.НачалоВыбораЗначенияСубконто(ЭтаФорма, Элемент, СтандартнаяОбработка, ПараметрыДокумента);
	
	Если НЕ СтандартнаяОбработка Тогда
		Возврат;
	КонецЕсли;

	СубконтоКтНачалоВыбора(Элемент, ПараметрыДокумента, СтандартнаяОбработка, "Прочие");

КонецПроцедуры

&НаКлиенте
Процедура СчетУчетаУслугиБанкаПриИзменении(Элемент)

	УстановитьЗаголовкиИДоступностьСубконто(ЭтаФорма, Объект.СчетУчетаРасчетовСКонтрагентом,, "УслугиБанка");

	ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3",
								  "СубконтоКт1", "СубконтоКт2", "СубконтоКт3");
	БухгалтерскийУчетКлиентСервер.ПриИзмененииСчета(Объект.СчетУчетаРасчетовСКонтрагентом, Объект, ПоляОбъекта);

	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(
		Элемент.ТекстРедактирования,
		ЭтотОбъект,
		"Объект.Комментарий"
	);

КонецПроцедуры

// ИНГРО++
&НаКлиенте
Процедура ИНАГРО_ЗаявкиЗаявлениеРасчетПриИзменении(Элемент)
	
	ИНАГРО_ЗаявкиЗаявлениеРасчетПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ИНАГРО_ЗаявкиЗаявлениеРасчетНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.ИНАГРО_Заявки.ТекущиеДанные;	
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Организация", Объект.Организация);
	ПараметрыОтбора.Вставить("Проведен",    Истина);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Отбор",         ПараметрыОтбора);
	ПараметрыФормы.Вставить("ТекущаяСтрока", ТекущиеДанные.ЗаявлениеРасчет);	
	
	ОткрытьФорму("Документ.ИНАГРО_ЗаявлениеРасчетВФСС.ФормаВыбора", ПараметрыФормы, Элемент);
	
КонецПроцедуры
// ИНАГРО--

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыРасшифровкаПлатежа

&НаКлиенте
Процедура РасшифровкаПлатежаПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока И НЕ Копирование Тогда
		ИнициализироватьСвойстваПлатежаНаКлиенте();
		ЗаполнитьЗначенияСвойств(Элементы.РасшифровкаПлатежа.ТекущиеДанные, СвойстваПлатежа);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаПриИзменении(Элемент)
	
	Объект.СуммаДокумента = Объект.РасшифровкаПлатежа.Итог("СуммаПлатежа");
	ОбновитьИтоги(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если НоваяСтрока И ОтменаРедактирования Тогда
		Объект.СуммаДокумента = Объект.РасшифровкаПлатежа.Итог("СуммаПлатежа");
		ОбновитьИтоги(ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаПередУдалением(Элемент, Отказ)

	Отказ = (Объект.РасшифровкаПлатежа.Количество() = 1);

КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаДоговорКонтрагентаПриИзменении(Элемент)
	
	СтрокаПлатеж = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	
	Если НЕ ЗначениеЗаполнено(СтрокаПлатеж.ДоговорКонтрагента) Тогда
		Возврат;
	КонецЕсли;
	
	ИнициализироватьСвойстваПлатежаНаКлиенте(Истина); // Только создаем структуру, если она еще не создана.
	
	Если СтрокаПлатеж.ДоговорКонтрагента <> СвойстваПлатежа.ДоговорКонтрагента Тогда
		ПараметрыОбъекта = ТекущиеПараметрыОбъекта(ЭтаФорма);
		ПараметрыОбъекта.ДоговорКонтрагента = СтрокаПлатеж.ДоговорКонтрагента;
		ПараметрыОбъекта.ЗаТару				= СтрокаПлатеж.ЗаТару;
		СвойстваПлатежа = СвойстваСтрокРасшифровкиПлатежа(ПараметрыОбъекта, Ложь);
		СвойстваПлатежа.ЗаТару			= СтрокаПлатеж.ЗаТару;
		СвойстваПлатежа.Амортизируется 	= СтрокаПлатеж.Амортизируется;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(СтрокаПлатеж, СвойстваПлатежа);
	
	ПересчитатьСуммуНДС(СтрокаПлатеж);
	РассчитатьСуммуВзаиморасчетов(СтрокаПлатеж, ЭтаФорма);
	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьПропорциональныйНДСТабЧасти(СтрокаПлатеж,ЭтотОбъект.ЕстьНДС,ЭтотОбъект.КоэффициентПропорциональногоНДС);
	
	 
	
КонецПроцедуры


&НаКлиенте
Процедура РасшифровкаПлатежаСделкаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	СтрокаПлатеж = Элементы.РасшифровкаПлатежа.ТекущиеДанные;

	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеДенежныхСредств.ВозвратДенежныхСредствПоставщиком") Тогда
		СчетУчета = СтрокаПлатеж.СчетУчетаРасчетовПоАвансам;
	Иначе
		СчетУчета = СтрокаПлатеж.СчетУчетаРасчетовСКонтрагентом;
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(Объект.Дата) Тогда
		ПоказатьПредупреждение(, НСтр("ru='Не указана дата.';uk='Не вказана дата.'"));
		Возврат;
	ИначеЕсли НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		ПоказатьПредупреждение(, НСтр("ru='Не указана организация.';uk='Не зазначена організація.'"));
		Возврат;
	ИначеЕсли НЕ ЗначениеЗаполнено(Объект.Контрагент) Тогда
		ПоказатьПредупреждение(, НСтр("ru='Не указан контрагент.';uk='Не зазначений контрагент.'"));
		Возврат;
	ИначеЕсли НЕ ЗначениеЗаполнено(СтрокаПлатеж.ДоговорКонтрагента) Тогда
		ПоказатьПредупреждение(, НСтр("ru='Не указан договор.';uk='Не вказаний договір.'"));
		Возврат;
	ИначеЕсли НЕ ЗначениеЗаполнено(СчетУчета) Тогда
		Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеДенежныхСредств.ВозвратДенежныхСредствПоставщиком") Тогда
			ПоказатьПредупреждение(, НСтр("ru='Не указан счет авансов.';uk='Не вказаний рахунок авансів.'"));
		Иначе
			ПоказатьПредупреждение(, НСтр("ru='Не указан счет расчетов.';uk='Не вказаний рахунок розрахунків.'"));
		КонецЕсли;
		Возврат;
	КонецЕсли;

	ПараметрыОбъекта = Новый Структура;
	ПараметрыОбъекта.Вставить("Дата"                 , Объект.Дата);
	ПараметрыОбъекта.Вставить("ДоговорКонтрагента"   , СтрокаПлатеж.ДоговорКонтрагента);
	ПараметрыОбъекта.Вставить("Контрагент"           , Объект.Контрагент);
	ПараметрыОбъекта.Вставить("СчетУчета"            , СчетУчета);
	ПараметрыОбъекта.Вставить("Организация"          , Объект.Организация);
	ПараметрыОбъекта.Вставить("ОстаткиОбороты"       , "Дт");
	ПараметрыОбъекта.Вставить("ТипыДокументов"       , "Метаданные.Документы.ПоступлениеНаРасчетныйСчет.ТабличныеЧасти.РасшифровкаПлатежа.Реквизиты.Сделка.Тип");

	ПараметрыФормы = Новый Структура("ПараметрыОбъекта", ПараметрыОбъекта);
	ОткрытьФорму("Документ.ДокументРасчетовСКонтрагентом.ФормаВыбора", ПараметрыФормы, Элемент);

КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаСуммаПлатежаПриИзменении(Элемент)

	СтрокаПлатеж = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	РассчитатьСуммуВзаиморасчетов(СтрокаПлатеж, ЭтаФорма);
	ПересчитатьСуммуНДС(СтрокаПлатеж);
	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьПропорциональныйНДСТабЧасти(СтрокаПлатеж,ЭтотОбъект.ЕстьНДС,ЭтотОбъект.КоэффициентПропорциональногоНДС);

КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаКурсВзаиморасчетовПриИзменении(Элемент)

	СтрокаПлатеж = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	РассчитатьСуммуВзаиморасчетов(СтрокаПлатеж, ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаКурсВзаиморасчетовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	// Отменить стандартную обработку.
	СтандартнаяОбработка = Ложь;

	СтрокаПлатеж = Элементы.РасшифровкаПлатежа.ТекущиеДанные;

	ПараметрыДокумента = Новый Структура;
	ПараметрыДокумента.Вставить("Валюта"     			 , СтрокаПлатеж.ВалютаДокумента);
	ПараметрыДокумента.Вставить("КратностьВзаиморасчетов", СтрокаПлатеж.КратностьВзаиморасчетов);
	ПараметрыДокумента.Вставить("КурсВзаиморасчетов"     , СтрокаПлатеж.КурсВзаиморасчетов);
	ПараметрыДокумента.Вставить("Дата"                   , Объект.Дата);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("СтрокаПлатеж", СтрокаПлатеж);
	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("РасшифровкаПлатежаКурсВзаиморасчетовНачалоВыбораЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ОткрытьФорму("Общаяформа.ФормаВводаКурсаИКратности", ПараметрыДокумента,,,,,ОповещениеОЗакрытии);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаСуммаВзаиморасчетовПриИзменении(Элемент)

	СтрокаПлатеж = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	ПроверкаКурсовВалют(СтрокаПлатеж, ЭтаФорма);

	Если СтрокаПлатеж.СуммаВзаиморасчетов <> 0 И КратностьДокумента <> 0 Тогда
		СуммаРуб = СтрокаПлатеж.СуммаПлатежа * КурсДокумента / КратностьДокумента;
		СтрокаПлатеж.КурсВзаиморасчетов = СуммаРуб / СтрокаПлатеж.СуммаВзаиморасчетов * СтрокаПлатеж.КратностьВзаиморасчетов;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаСтавкаНДСПриИзменении(Элемент)

	СтрокаПлатеж = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	ПересчитатьСуммуНДС(СтрокаПлатеж);

	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьПропорциональныйНДСТабЧасти(СтрокаПлатеж,ЭтотОбъект.ЕстьНДС,ЭтотОбъект.КоэффициентПропорциональногоНДС);

КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаСуммаНДСПропорциональноКредитПриИзменении(Элемент)

	СтрокаПлатеж = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьПропорциональныйНДСТабЧасти(СтрокаПлатеж,ЭтотОбъект.ЕстьНДС,ЭтотОбъект.КоэффициентПропорциональногоНДС);

КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаИнкассацияСчетУчетаРасчетовСКонтрагентомПриИзменении(Элемент)
	
	СтрокаПлатеж = Элементы.РасшифровкаПлатежаИнкассация.ТекущиеДанные;
	
	УстановитьЗаголовкиИДоступностьСубконто(
		ЭтаФорма, СтрокаПлатеж.СчетУчетаРасчетовСКонтрагентом, "РасшифровкаПлатежаИнкассация", "", Ложь);
	
	ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3",
								"СубконтоКт1", "СубконтоКт2", "СубконтоКт3");
	
	ПоляОбъекта.Вставить("Организация"  , Объект.Организация);
	
	БухгалтерскийУчетКлиентСервер.ПриИзмененииСчета(СтрокаПлатеж.СчетУчетаРасчетовСКонтрагентом, СтрокаПлатеж, ПоляОбъекта, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаИнкассацияСубконтоКтНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	СтрокаПлатеж = Элементы.РасшифровкаПлатежаИнкассация.ТекущиеДанные;

	ПараметрыДокумента = ПолучитьСписокПараметровВыбораСубконто(ЭтаФорма, СтрокаПлатеж, "СубконтоКт%Индекс%");
	ПараметрыДокумента.Вставить("СчетУчета", СтрокаПлатеж.СчетУчетаРасчетовСКонтрагентом);
	ОбщегоНазначенияБПКлиент.НачалоВыбораЗначенияСубконто(ЭтаФорма, Элемент, СтандартнаяОбработка, ПараметрыДокумента);

КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаИнкассацияПриИзменении(Элемент)

	Объект.СуммаДокумента = Объект.РасшифровкаПлатежа.Итог("СуммаПлатежа");

КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаИнкассацияПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если НоваяСтрока И ОтменаРедактирования Тогда
		Объект.СуммаДокумента = Объект.РасшифровкаПлатежа.Итог("СуммаПлатежа");
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаИнкассацияПередУдалением(Элемент, Отказ)

	Отказ = (Объект.РасшифровкаПлатежа.Количество() = 1);

КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаИнкассацияПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока И НЕ Копирование Тогда
		СтрокаПлатеж = Элементы.РасшифровкаПлатежаИнкассация.ТекущиеДанные;
		СчетаУчета = ПолучитьСчетаРасчетовСКонтрагентом(Объект.Организация, Объект.Контрагент, Объект.ДоговорКонтрагента);
		ЗаполнитьЗначенияСвойств(СтрокаПлатеж, СчетаУчета);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаИнкассацияПередНачаломИзменения(Элемент, Отказ)
	
	СтрокаПлатеж = Элементы.РасшифровкаПлатежаИнкассация.ТекущиеДанные;

	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма);
	УстановитьЗаголовкиИДоступностьСубконто(
		ЭтаФорма, СтрокаПлатеж.СчетУчетаРасчетовСКонтрагентом, "РасшифровкаПлатежаИнкассация", "", Истина);

КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаПокупкаВалютыПриИзменении(Элемент)

	Объект.СуммаДокумента = Объект.РасшифровкаПлатежа.Итог("СуммаПлатежа");

КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаПокупкаВалютыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если НоваяСтрока И ОтменаРедактирования Тогда
		Объект.СуммаДокумента = Объект.РасшифровкаПлатежа.Итог("СуммаПлатежа");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаПокупкаВалютыПередУдалением(Элемент, Отказ)
	
	Отказ = Объект.РасшифровкаПлатежа.Количество() = 1;
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаПокупкаВалютыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)

	Если НоваяСтрока И НЕ Копирование Тогда
		СписокВидовДоговоров = УчетДенежныхСредствКлиентСервер.ОпределитьВидДоговораСКонтрагентом(Объект.ВидОперации);
		УстановитьДоговорКонтрагента(
			Элемент.ТекущиеДанные.ДоговорКонтрагента,
			Объект.Контрагент,
			Объект.Организация,
			СписокВидовДоговоров);
		
		СтрокаПлатеж = Элементы.РасшифровкаПлатежаПокупкаВалюты.ТекущиеДанные;
		Если ЗначениеЗаполнено(СтрокаПлатеж.ДоговорКонтрагента) Тогда
			ПараметрыОбъекта = ТекущиеПараметрыОбъекта(ЭтаФорма);
			ПараметрыОбъекта.ДоговорКонтрагента = СтрокаПлатеж.ДоговорКонтрагента;
			СвойстваПлатежа = СвойстваСтрокРасшифровкиПлатежа(ПараметрыОбъекта, Ложь);
			ЗаполнитьЗначенияСвойств(СтрокаПлатеж, СвойстваПлатежа);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаПокупкаВалютыСуммаПлатежаПриИзменении(Элемент)

	СтрокаПлатеж = Элементы.РасшифровкаПлатежаПокупкаВалюты.ТекущиеДанные;
	РассчитатьСуммуВзаиморасчетов(СтрокаПлатеж, ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаПокупкаВалютыКурсВзаиморасчетовПриИзменении(Элемент)

	СтрокаПлатеж = Элементы.РасшифровкаПлатежаПокупкаВалюты.ТекущиеДанные;
	РассчитатьСуммуВзаиморасчетов(СтрокаПлатеж, ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаПокупкаВалютыКурсВзаиморасчетовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	// Отменить стандартную обработку.
	СтандартнаяОбработка = Ложь;

	СтрокаПлатеж = Элементы.РасшифровкаПлатежаПокупкаВалюты.ТекущиеДанные;

	ПараметрыДокумента = Новый Структура;
	ПараметрыДокумента.Вставить("ДоговорКонтрагента"     , СтрокаПлатеж.ДоговорКонтрагента);
	ПараметрыДокумента.Вставить("КратностьВзаиморасчетов", СтрокаПлатеж.КратностьВзаиморасчетов);
	ПараметрыДокумента.Вставить("КурсВзаиморасчетов"     , СтрокаПлатеж.КурсВзаиморасчетов);
	ПараметрыДокумента.Вставить("Дата"                   , Объект.Дата);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("СтрокаПлатеж", СтрокаПлатеж);
	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("РасшифровкаПлатежаПокупкаВалютыКурсВзаиморасчетовНачалоВыбораЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ОткрытьФорму("Общаяформа.ФормаВводаКурсаИКратности", ПараметрыДокумента,,,,,ОповещениеОЗакрытии);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаПокупкаВалютыДоговорКонтрагентаПриИзменении(Элемент)
	
	СтрокаПлатеж = Элементы.РасшифровкаПлатежаПокупкаВалюты.ТекущиеДанные;
	
	Если НЕ ЗначениеЗаполнено(СтрокаПлатеж.ДоговорКонтрагента) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОбъекта = ТекущиеПараметрыОбъекта(ЭтаФорма);
	ПараметрыОбъекта.ДоговорКонтрагента = СтрокаПлатеж.ДоговорКонтрагента;
	СвойстваПлатежа = СвойстваСтрокРасшифровкиПлатежа(ПараметрыОбъекта, Ложь);
	
	ЗаполнитьЗначенияСвойств(СтрокаПлатеж, СвойстваПлатежа);
	РассчитатьСуммуВзаиморасчетов(СтрокаПлатеж, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаПродажаВалютыПриИзменении(Элемент)
	
	Объект.СуммаДокумента = Объект.РасшифровкаПлатежа.Итог("СуммаПлатежа");
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаПродажаВалютыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если НоваяСтрока И ОтменаРедактирования Тогда
		Объект.СуммаДокумента = Объект.РасшифровкаПлатежа.Итог("СуммаПлатежа");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаПродажаВалютыПередУдалением(Элемент, Отказ)
	
	Отказ = (Объект.РасшифровкаПлатежа.Количество() = 1);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаПродажаВалютыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока И НЕ Копирование Тогда
		СписокВидовДоговоров = УчетДенежныхСредствКлиентСервер.ОпределитьВидДоговораСКонтрагентом(Объект.ВидОперации);
		УстановитьДоговорКонтрагента(
			Элемент.ТекущиеДанные.ДоговорКонтрагента,
			Объект.Контрагент,
			Объект.Организация,
			СписокВидовДоговоров);
		ИнициализироватьСвойстваПлатежаНаКлиенте();
		ЗаполнитьЗначенияСвойств(Элемент.ТекущиеДанные, СвойстваПлатежа);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаПродажаВалютыСуммаВзаиморасчетовПриИзменении(Элемент)
	
	СтрокаПлатеж = Элементы.РасшифровкаПлатежаПродажаВалюты.ТекущиеДанные;
	РассчитатьСуммуВзаиморасчетов(СтрокаПлатеж, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаПродажаВалютыСуммаПлатежаПриИзменении(Элемент)
	
	СтрокаПлатеж = Элементы.РасшифровкаПлатежаПродажаВалюты.ТекущиеДанные;
	РассчитатьСуммуВзаиморасчетов(СтрокаПлатеж, ЭтаФорма, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаПродажаВалютыКурсВзаиморасчетовПриИзменении(Элемент)
	
	СтрокаПлатеж = Элементы.РасшифровкаПлатежаПродажаВалюты.ТекущиеДанные;
	РассчитатьСуммуВзаиморасчетов(СтрокаПлатеж, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаПродажаВалютыКурсВзаиморасчетовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	// Отменить стандартную обработку.
	СтандартнаяОбработка = Ложь;

	СтрокаПлатеж = Элементы.РасшифровкаПлатежаПродажаВалюты.ТекущиеДанные;

	ПараметрыДокумента = Новый Структура;
	ПараметрыДокумента.Вставить("ДоговорКонтрагента"     , СтрокаПлатеж.ДоговорКонтрагента);
	ПараметрыДокумента.Вставить("КратностьВзаиморасчетов", СтрокаПлатеж.КратностьВзаиморасчетов);
	ПараметрыДокумента.Вставить("КурсВзаиморасчетов"     , СтрокаПлатеж.КурсВзаиморасчетов);
	ПараметрыДокумента.Вставить("Дата"                   , Объект.Дата);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("СтрокаПлатеж",СтрокаПлатеж);
	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("РасшифровкаПлатежаПродажаВалютыКурсВзаиморасчетовНачалоВыбораЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ОткрытьФорму("Общаяформа.ФормаВводаКурсаИКратности", ПараметрыДокумента,,,,,ОповещениеОЗакрытии);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаПродажаВалютыДоговорКонтрагентаПриИзменении(Элемент)
	
	СтрокаПлатеж = Элементы.РасшифровкаПлатежаПродажаВалюты.ТекущиеДанные;

	Если НЕ ЗначениеЗаполнено(СтрокаПлатеж.ДоговорКонтрагента) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОбъекта = ТекущиеПараметрыОбъекта(ЭтаФорма);
	ПараметрыОбъекта.ДоговорКонтрагента = СтрокаПлатеж.ДоговорКонтрагента;
	СвойстваПлатежа = СвойстваСтрокРасшифровкиПлатежа(ПараметрыОбъекта, Ложь);
	
	ЗаполнитьЗначенияСвойств(СтрокаПлатеж, СвойстваПлатежа);
	РассчитатьСуммуВзаиморасчетов(СтрокаПлатеж, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаПлатежныеКартыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока И НЕ Копирование Тогда
		СтрокаПлатеж = Элементы.РасшифровкаПлатежаПлатежныеКарты.ТекущиеДанные;
		СчетаУчета = ПолучитьСчетаРасчетовСКонтрагентом(Объект.Организация, Объект.Контрагент, Объект.ДоговорКонтрагента);
		ЗаполнитьЗначенияСвойств(СтрокаПлатеж, СчетаУчета);

	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаПлатежныеКартыСуммаПлатежаПриИзменении(Элемент)
	
	СтрокаПлатеж = Элементы.РасшифровкаПлатежаПлатежныеКарты.ТекущиеДанные;
	РассчитатьСуммуВзаиморасчетов(СтрокаПлатеж, ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаПлатежныеКартыСуммаУслугПриИзменении(Элемент)
	
	ПлатежныеКартыОбработатьИзменениеСуммыУслуг();
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаПлатежныеКартыДоговорКонтрагентаПриИзменении(Элемент)
	
	СтрокаПлатеж = Элементы.РасшифровкаПлатежаПлатежныеКарты.ТекущиеДанные;
	
	Если НЕ ЗначениеЗаполнено(СтрокаПлатеж.ДоговорКонтрагента) Тогда
		Возврат;
	КонецЕсли;
	
	ИнициализироватьСвойстваПлатежаНаКлиенте(Истина); // Только создаем структуру, если она еще не создана.
	
	Если СтрокаПлатеж.ДоговорКонтрагента <> СвойстваПлатежа.ДоговорКонтрагента Тогда
		ПараметрыОбъекта = ТекущиеПараметрыОбъекта(ЭтаФорма);
		ПараметрыОбъекта.ДоговорКонтрагента = СтрокаПлатеж.ДоговорКонтрагента;
		СвойстваПлатежа = СвойстваСтрокРасшифровкиПлатежа(ПараметрыОбъекта, Ложь);
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(СтрокаПлатеж, СвойстваПлатежа);
	РассчитатьСуммуВзаиморасчетов(СтрокаПлатеж, ЭтаФорма);
	
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаПлатежныеКартыПриИзменении(Элемент)
	
	Объект.СуммаДокумента = Объект.РасшифровкаПлатежа.Итог("СуммаПлатежа");
	ПлатежныеКартыОбработатьИзменениеСуммыУслуг();
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаПлатежныеКартыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если НоваяСтрока И ОтменаРедактирования Тогда
		Объект.СуммаДокумента = Объект.РасшифровкаПлатежа.Итог("СуммаПлатежа");
		ПлатежныеКартыОбработатьИзменениеСуммыУслуг();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаНалоговоеНазначениеПриИзменении(Элемент)
	
	ОбновитьИтоги(ЭтаФорма);
	СтрокаПлатеж = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьПропорциональныйНДСТабЧасти(СтрокаПлатеж,ЭтотОбъект.ЕстьНДС,ЭтотОбъект.КоэффициентПропорциональногоНДС);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаЗаТаруПриИзменении(Элемент)
		
	РасшифровкаПлатежаЗаТаруПриИзмененииНаСервере();

КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаФССПриИзменении(Элемент)
	
	//Объект.СуммаДокумента = Объект.РасшифровкаПлатежа.Итог("СуммаПоСтатьям"); // ИНАГРО
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаФССПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если НоваяСтрока И ОтменаРедактирования Тогда
		Объект.СуммаДокумента = Объект.РасшифровкаПлатежа.Итог("СуммаПоСтатьям");
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПровестиИЗакрыть(Команда)
	
	КлючеваяОперация = "ПроведениеПоступлениеНаРасчетныйСчет";
	ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени(КлючеваяОперация);
	
	ПараметрыЗаписи = Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение);
	Если Записать(ПараметрыЗаписи) Тогда
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ПодготовитьФормуНаСервере()
	
	УстановитьФункциональныеОпцииФормы();
	
	УстановитьСостояниеДокумента();
	
	ТекущаяДатаДокумента = Объект.Дата;
	ВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	
	ОплатаВВалюте = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Объект.СчетБанк).Валютный;
	
	УстановитьПараметрыВыбораСчетовУчетаДенежныхСредств();
	УстановитьПараметрыВыбораБанковскихСчетов(ЭтаФорма);
	УстановитьПараметрыВыбораДоговораСКонтрагентом(ЭтаФорма);
	
	УстановитьКурсДокумента();
	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма);
	
	СвойстваПлатежа = Неопределено; // При открытии формы структуру не инициализируем, будет создана при первом обращении.
	
	ЗаголовокСтатьяДДС 						  = НСтр("ru='Статья движения ден. средств:';uk='Стаття руху гр. коштів:'");
	ЗаголовокСтатьяНН  						  = НСтр("ru='Налоговое назначение:';uk='Податкове призначення:'");
	ЗаголовокСтатьяДекларацииПоЕдиномуНалогу  = НСтр("ru='Ст. декл. по единому налогу:';uk='Ст. декл. по єдиному податку:'");
	
	ЗаполнитьДобавленныеКолонкиТаблиц();
	
	УстановитьВидимостьСтраницНаСервере();
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСостояниеДокумента()
	
	СостояниеДокумента = ОбщегоНазначенияБП.СостояниеДокумента(Объект);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьФункциональныеОпцииФормы()
	
	ОбщегоНазначенияБПКлиентСервер.УстановитьПараметрыФункциональныхОпцийФормыДокумента(ЭтаФорма);
	ЕстьНалогНаПрибыльДо2015 = УчетнаяПолитика.ПлательщикНалогаНаПрибыльДо2015(Объект.Организация, НачалоМесяца(Объект.Дата));
	ЕстьНДС			   = УчетнаяПолитика.ПлательщикНДС(Объект.Организация, НачалоМесяца(Объект.Дата));
	КоэффициентПропорциональногоНДС = НалоговыйУчет.ПолучитьКоэффициентПропорциональногоНДС(Объект.Организация, Объект.Дата);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЕстьНалоговыйУчет(Счет)
	
	Возврат Счет.НалоговыйУчет; 
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)

	Элементы = Форма.Элементы;
	Объект   = Форма.Объект;

	Элементы.Контрагент.Видимость = Истина;
	Элементы.СчетКонтрагента.Видимость = Истина;
		
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеДенежныхСредств.ПрочееПоступлениеБезналичныхДенежныхСредств") Тогда
		УстановитьЗаголовкиИДоступностьСубконто(Форма, Объект.СчетУчетаРасчетовСКонтрагентом,, "Прочие");
		
		Элементы.НалоговоеНазначениеПриПрочемПоступлении.Видимость = Форма.ЕстьНалогНаПрибыльДо2015;
		Элементы.ЗаголовокННПрочие.Видимость			= Форма.ЕстьНалогНаПрибыльДо2015;
		
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеДенежныхСредств.ПоступленияОтПродажПоПлатежнымКартамИБанковскимКредитам") Тогда
		УстановитьЗаголовкиИДоступностьСубконто(Форма, Объект.СчетУчетаРасчетовСКонтрагентом,, "УслугиБанка");
		
		Элементы.НалоговоеНазначениеПлатежныеКартыУслуги.Видимость = Форма.ЕстьНалогНаПрибыльДо2015;
		
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеДенежныхСредств.ИнкассацияДенежныхСредств") Тогда
		Элементы.Контрагент.Видимость = Ложь;
		Элементы.СчетКонтрагента.Видимость = Ложь;
	КонецЕсли; 
	
	ОбновитьИтоги(Форма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ЕстьРасшифровкаПлатежа(Знач ВидОперации)
	
	ЕстьРасшифровка = 
		ВидОперации     = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеДенежныхСредств.ОплатаПокупателя")
		ИЛИ ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеДенежныхСредств.ВозвратДенежныхСредствПоставщиком")
		ИЛИ ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеДенежныхСредств.РасчетыПоКредитамИЗаймам")
		ИЛИ ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеДенежныхСредств.ИнкассацияДенежныхСредств")
		ИЛИ ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеДенежныхСредств.ПоступленияОтПродажПоПлатежнымКартамИБанковскимКредитам")
		ИЛИ ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеДенежныхСредств.ПрочиеРасчетыСКонтрагентами");
	
	Возврат ЕстьРасшифровка;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СвойстваСтрокРасшифровкиПлатежа(ПараметрыОбъекта, ПолучатьДоговор)

	Если НЕ ЗначениеЗаполнено(ПараметрыОбъекта.ВидОперации)
		ИЛИ НЕ ЗначениеЗаполнено(ПараметрыОбъекта.Организация)
		ИЛИ НЕ ЗначениеЗаполнено(ПараметрыОбъекта.Дата)
		ИЛИ НЕ ЗначениеЗаполнено(ПараметрыОбъекта.Контрагент)
		ИЛИ НЕ ЗначениеЗаполнено(ПараметрыОбъекта.ВалютаДокумента)
		ИЛИ (НЕ ЗначениеЗаполнено(ПараметрыОбъекта.ДоговорКонтрагента) И НЕ ПолучатьДоговор) Тогда

		СвойстваПлатежа = ПустаяСтруктураСвойстваПлатежа();

		Возврат СвойстваПлатежа;

	Иначе

		ПараметрыПлатежа = Новый Структура("ВидОперации,Организация, Дата, Контрагент, ДоговорКонтрагента, ВалютаДокумента, ЗаТару");
		ЗаполнитьЗначенияСвойств(ПараметрыПлатежа, ПараметрыОбъекта);
		ПараметрыПлатежа.Вставить("ОплатаВВалюте",
			ПараметрыОбъекта.ВалютаДокумента <> ПараметрыОбъекта.ВалютаРегламентированногоУчета);

		Возврат СвойстваСтрокРасшифровкиПлатежаСервер(ПараметрыПлатежа, ПолучатьДоговор);

	КонецЕсли;

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ВидыДоговораСКонтрагентом(ВидОперации)
	
	ВидыДоговора = Новый Массив;
	
	Если ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеДенежныхСредств.ОплатаПокупателя") Тогда
		ВидыДоговора.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СПокупателем"));
		ВидыДоговора.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СКомиссионером"));
		ВидыДоговора.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СКомитентом"));
		ВидыДоговора.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.ИНАГРО_КоммунальныеУслуги"));
	ИначеЕсли ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеДенежныхСредств.ВозвратДенежныхСредствПоставщиком") Тогда
		ВидыДоговора.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СПоставщиком"));
		ВидыДоговора.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СКомитентом"));
		ВидыДоговора.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СКомиссионером"));
	ИначеЕсли ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеДенежныхСредств.РасчетыПоКредитамИЗаймам")
		ИЛИ ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеДенежныхСредств.ПоступлениеСредствОтФСС")
		ИЛИ ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеДенежныхСредств.ПрочиеРасчетыСКонтрагентами")
		ИЛИ ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеДенежныхСредств.ПокупкаПродажаВалюты")
		ИЛИ ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеДенежныхСредств.ПоступленияОтПродажПоПлатежнымКартамИБанковскимКредитам") Тогда
		ВидыДоговора.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.Прочее"));
	КонецЕсли;
	
	Возврат ВидыДоговора;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ТекущиеПараметрыОбъекта(Форма)
	
	ПараметрыОбъекта = Новый Структура(
		"Дата, ВидОперации, Организация, СчетОрганизации, ВалютаДокумента,
		|Контрагент, СчетКонтрагента, СчетБанк");
	ЗаполнитьЗначенияСвойств(ПараметрыОбъекта, Форма.Объект);
	ПараметрыОбъекта.Вставить("ДоговорКонтрагента",
		?(Форма.СвойстваПлатежа = Неопределено, Неопределено,   Форма.СвойстваПлатежа.ДоговорКонтрагента));
	ПараметрыОбъекта.Вставить("ЗаТару",
		?(Форма.СвойстваПлатежа = Неопределено, Ложь,   ?(Форма.СвойстваПлатежа.ЗаТару = Неопределено, Ложь,   Форма.СвойстваПлатежа.ЗаТару)));
	ПараметрыОбъекта.Вставить("Амортизируется",
		?(Форма.СвойстваПлатежа = Неопределено, Ложь,   ?(Форма.СвойстваПлатежа.Амортизируется = Неопределено, Ложь,   Форма.СвойстваПлатежа.Амортизируется)));
	ПараметрыОбъекта.Вставить("ВалютаРегламентированногоУчета", Форма.ВалютаРегламентированногоУчета);
	ПараметрыОбъекта.Вставить("ОплатаВВалюте",      Форма.ОплатаВВалюте);
	ПараметрыОбъекта.Вставить("ЕстьНалогНаПрибыльДо2015", Форма.ЕстьНалогНаПрибыльДо2015);
	ПараметрыОбъекта.Вставить("ЕстьНДС", 			Форма.ЕстьНДС);
	ПараметрыОбъекта.Вставить("КурсДокумента",      Форма.КурсДокумента);
	ПараметрыОбъекта.Вставить("КратностьДокумента", Форма.КратностьДокумента);
	
	Возврат ПараметрыОбъекта;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьСписокПараметровВыбораСубконто(Форма, ПараметрыОбъекта, ШаблонИмяПоляОбъекта)

	СписокПараметров = Новый Структура;
	Для Индекс = 1 По 3 Цикл
		ИмяПоля = СтрЗаменить(ШаблонИмяПоляОбъекта, "%Индекс%", Индекс);
		Если ТипЗнч(ПараметрыОбъекта[ИмяПоля]) = Тип("СправочникСсылка.Контрагенты") Тогда
			СписокПараметров.Вставить("Контрагент", ПараметрыОбъекта[ИмяПоля]);
		ИначеЕсли ТипЗнч(ПараметрыОбъекта[ИмяПоля]) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
			СписокПараметров.Вставить("ДоговорКонтрагента", ПараметрыОбъекта[ИмяПоля]);
		ИначеЕсли ТипЗнч(ПараметрыОбъекта[ИмяПоля]) = Тип("СправочникСсылка.Номенклатура") Тогда
			СписокПараметров.Вставить("Номенклатура", ПараметрыОбъекта[ИмяПоля]);
		ИначеЕсли ТипЗнч(ПараметрыОбъекта[ИмяПоля]) = Тип("СправочникСсылка.Склады") Тогда
			СписокПараметров.Вставить("Склад", ПараметрыОбъекта[ИмяПоля]);
		КонецЕсли;
	КонецЦикла;
	СписокПараметров.Вставить("Организация", Форма.Объект.Организация);

	Возврат СписокПараметров;

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьПараметрыВыбораДоговораСКонтрагентом(Форма)

	Объект   = Форма.Объект;
	Элементы = Форма.Элементы;

	НовыеПараметры = Новый Массив();
	ВидыДоговора   = ВидыДоговораСКонтрагентом(Объект.ВидОперации);
	НовыеПараметры.Добавить(Новый ПараметрВыбора("Отбор.ВидДоговора", Новый ФиксированныйМассив(ВидыДоговора)));
		
	НовыеПараметры.Добавить(Новый ПараметрВыбора("Отбор.ОплатаВВалюте", Форма.ОплатаВВалюте));
	Если Форма.ОплатаВВалюте Тогда
		НовыеПараметры.Добавить(Новый ПараметрВыбора("Отбор.ВалютаВзаиморасчетов", Объект.ВалютаДокумента));
	КонецЕсли;
		

	Если Объект.ВидОперации = ПредопределенноеЗначение(
			"Перечисление.ВидыОперацийПоступлениеДенежныхСредств.ПоступленияОтПродажПоПлатежнымКартамИБанковскимКредитам") Тогда
		Элементы.РасшифровкаПлатежаПлатежныеКартыДоговорКонтрагента.ПараметрыВыбора = Новый ФиксированныйМассив(НовыеПараметры);
	Иначе
		Элементы.РасшифровкаПлатежаДоговорКонтрагента.ПараметрыВыбора = Новый ФиксированныйМассив(НовыеПараметры);
	КонецЕсли;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьПараметрыВыбораБанковскихСчетов(Форма)

	Элементы = Форма.Элементы;

	НовыйМассивПараметров = Новый Массив();
	НовыйМассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Валютный", Форма.ОплатаВВалюте));
	Элементы.СчетОрганизации.ПараметрыВыбора = Новый ФиксированныйМассив(НовыйМассивПараметров);
	Элементы.СчетКонтрагента.ПараметрыВыбора = Новый ФиксированныйМассив(НовыйМассивПараметров);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ИзменитьПараметрыВыбораСчетаИнкассации(Форма)

	Элементы = Форма.Элементы;

	НовыйМассивПараметров = Новый Массив();
	Для каждого СтарыйПараметр Из Элементы.РасшифровкаПлатежаИнкассацияСчетУчетаРасчетовСКонтрагентом.ПараметрыВыбора Цикл
		Если СтарыйПараметр.Имя = "Отбор.Ссылка" Тогда
			НовыйМассивПараметров.Добавить(СтарыйПараметр);
			Прервать;
		КонецЕсли;
	КонецЦикла;
	НовыйМассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Валютный", Форма.ОплатаВВалюте));
	НовыйМассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.ЗапретитьИспользоватьВПроводках", Ложь));

	Элементы.РасшифровкаПлатежаИнкассацияСчетУчетаРасчетовСКонтрагентом.ПараметрыВыбора = Новый ФиксированныйМассив(НовыйМассивПараметров);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ИзменитьПараметрыВыбораПолейСубконто(Форма)
	
	Объект   = Форма.Объект;
	Элементы = Форма.Элементы;
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеДенежныхСредств.ИнкассацияДенежныхСредств")
			И Элементы.РасшифровкаПлатежаИнкассация.ТекущаяСтрока <> Неопределено Тогда
		СтрокаПлатеж = Объект.РасшифровкаПлатежа.НайтиПоИдентификатору(
			Элементы.РасшифровкаПлатежаИнкассация.ТекущаяСтрока);
		ПараметрыДокумента = ПолучитьСписокПараметровВыбораСубконто(Форма, СтрокаПлатеж, "СубконтоКт%Индекс%");
		БухгалтерскийУчетКлиентСервер.ИзменитьПараметрыВыбораПолейСубконто(Форма, СтрокаПлатеж,
			"СубконтоКт%Индекс%", "РасшифровкаПлатежаИнкассацияСубконтоКт%Индекс%", ПараметрыДокумента);
	КонецЕсли;

	ПараметрыДокумента = ПолучитьСписокПараметровВыбораСубконто(Форма, Объект, "СубконтоКт%Индекс%");
	БухгалтерскийУчетКлиентСервер.ИзменитьПараметрыВыбораПолейСубконто(Форма, Объект,
		"СубконтоКт%Индекс%", "СубконтоКт%Индекс%Прочие", ПараметрыДокумента);
	БухгалтерскийУчетКлиентСервер.ИзменитьПараметрыВыбораПолейСубконто(Форма, Объект,
		"СубконтоКт%Индекс%", "СубконтоКт%Индекс%УслугиБанка", ПараметрыДокумента);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьЗаголовкиИДоступностьСубконто(Форма, Счет, Префикс = "", Постфикс = "", ЭтоТаблица = Ложь)

	ПоляФормы = Новый Структура("Субконто1, Субконто2, Субконто3",
		Префикс + "СубконтоКт1" + Постфикс,
		Префикс + "СубконтоКт2" + Постфикс,
		Префикс + "СубконтоКт3" + Постфикс);

	ЗаголовкиПолей = Новый Структура("Субконто1, Субконто2, Субконто3",
		"ЗаголовокСубконто1", "ЗаголовокСубконто2", "ЗаголовокСубконто3");

	БухгалтерскийУчетКлиентСервер.ПриВыбореСчета(Счет, Форма, ПоляФормы, ЗаголовкиПолей, ЭтоТаблица);

КонецПроцедуры

&НаСервере
Процедура ПерезаполнитьРасшифровкуПлатежа()
	
	ИнициализироватьСвойстваПлатежаНаСервере();
	Объект.РасшифровкаПлатежа.Очистить();
	
	Если ЕстьРасшифровкаПлатежа(Объект.ВидОперации) Тогда
		
		СтрокаПлатеж = Объект.РасшифровкаПлатежа.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаПлатеж, СвойстваПлатежа);
		СтрокаПлатеж.СуммаПлатежа = Объект.СуммаДокумента;
		Если Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПоступленияОтПродажПоПлатежнымКартамИБанковскимКредитам Тогда
			СтрокаПлатеж.СуммаУслуг = Объект.СуммаУслуг;
			СчетаУчета = ПолучитьСчетаРасчетовСКонтрагентом(Объект.Организация, Объект.Контрагент, Объект.ДоговорКонтрагента);
			ЗаполнитьЗначенияСвойств(СтрокаПлатеж, СчетаУчета);

			РассчитатьСуммуВзаиморасчетов(СтрокаПлатеж, ЭтаФорма);
		Иначе
			ПересчитатьСуммуНДС(СтрокаПлатеж);
			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьПропорциональныйНДСТабЧасти(СтрокаПлатеж,ЭтотОбъект.ЕстьНДС,ЭтотОбъект.КоэффициентПропорциональногоНДС);
			РассчитатьСуммуВзаиморасчетов(СтрокаПлатеж, ЭтаФорма);
			Элементы.РасшифровкаПлатежа.ТекущаяСтрока = СтрокаПлатеж.ПолучитьИдентификатор();
			ОбновитьИтоги(ЭтаФорма);
		КонецЕсли;
		
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеДенежныхСредств.ИнкассацияДенежныхСредств") 
		ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеДенежныхСредств.ПрочееПоступлениеБезналичныхДенежныхСредств") Тогда
		
		СтрокаПлатеж = Объект.РасшифровкаПлатежа.Добавить();
		СтрокаПлатеж.СуммаПлатежа = Объект.СуммаДокумента;
		СтрокаПлатеж.СуммаУслуг   = Объект.СуммаУслуг;
		СчетаУчета = ПолучитьСчетаРасчетовСКонтрагентом(Объект.Организация, Объект.Контрагент, Объект.ДоговорКонтрагента);
		ЗаполнитьЗначенияСвойств(СтрокаПлатеж, СчетаУчета);
		
		УстановитьЗаголовкиИДоступностьСубконто(
			ЭтаФорма, СтрокаПлатеж.СчетУчетаРасчетовСКонтрагентом, "РасшифровкаПлатежаИнкассация", "",  Ложь);
		
	КонецЕсли;
	
	ЗаполнитьДобавленныеКолонкиТаблиц();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьСтраницНаСервере()
	
	// т.к. Расшифровка платежа теперь есть у многих видов операций,
	// сначала отработаем формы-исключения
	МассивСтраниц = Новый Массив;
	МассивСтраниц.Добавить(Элементы.ГруппаИнкассация);
	МассивСтраниц.Добавить(Элементы.ГруппаПокупкаПродажаВалюты);
	МассивСтраниц.Добавить(Элементы.ГруппаПлатежПрочие);
	МассивСтраниц.Добавить(Элементы.ГруппаПлатежныеКарты);
	МассивСтраниц.Добавить(Элементы.ГруппаРасчетыСКонтрагентами);
	МассивСтраниц.Добавить(Элементы.ГруппаРасчетыСФСС);
	МассивСтраниц.Добавить(Элементы.ГруппаРасчетыСПодотчетнымиЛицами);
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ИнкассацияДенежныхСредств Тогда
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаИнкассация;
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПокупкаПродажаВалюты Тогда
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаПокупкаПродажаВалюты;
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПрочееПоступлениеБезналичныхДенежныхСредств Тогда
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаПлатежПрочие;
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПоступленияОтПродажПоПлатежнымКартамИБанковскимКредитам Тогда
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаПлатежныеКарты;
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПоступлениеСредствОтФСС Тогда
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаИНАГРОРасчетыСФСС; // ИНАГРО
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ВозвратДенежныхСредствПодотчетником Тогда
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаРасчетыСПодотчетнымиЛицами;
	
	// а затем тех, кто использует основную форму Расшифровки платежа
	ИначеЕсли ЕстьРасшифровкаПлатежа(Объект.ВидОперации) Тогда
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаРасчетыСКонтрагентами;
	КонецЕсли;
	
	Для каждого ТекСтраница Из МассивСтраниц Цикл
		Если ТекСтраница <> Элементы.ГруппаСтраницы.ТекущаяСтраница Тогда
			Если ТекСтраница.Видимость Тогда
				ТекСтраница.Видимость = Ложь;
			КонецЕсли;
		Иначе
			Если НЕ ТекСтраница.Видимость Тогда
				ТекСтраница.Видимость = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПустаяСтруктураСвойстваПлатежа()
	
	СвойстваПлатежа = Новый Структура("ДоговорКонтрагента,
		|Сделка,
		|ДоговорКонтрагентаВалютаВзаиморасчетов, ВедениеВзаиморасчетов,
		|ВалютаДокумента, СтавкаНДС, СложныйНалоговыйУчет,
		|КурсВзаиморасчетов, КратностьВзаиморасчетов,
		|СчетУчетаРасчетовСКонтрагентом,СчетУчетаРасчетовПоАвансам,СчетУчетаНДС,СчетУчетаНДСПодтвержденный,
		|НалоговоеНазначение,СтавкаНДС,Амортизируется,ЗаТару");
	
	Возврат СвойстваПлатежа;
	
КонецФункции

&НаСервереБезКонтекста
Функция СвойстваСтрокРасшифровкиПлатежаСервер(Знач ПараметрыПлатежа, Знач ПолучатьДоговор)
	
	СвойстваПлатежа = ПустаяСтруктураСвойстваПлатежа();
	
	Если ПолучатьДоговор Тогда
		
		НовыйДоговор  = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
		ВидыДоговоров = ВидыДоговораСКонтрагентом(ПараметрыПлатежа.ВидОперации);
		
		ОплатаВВалюте = ПараметрыПлатежа.ОплатаВВалюте;
		
		Отбор = Новый Структура;
		ОтборОплатаВВалюте = Новый Структура("ЗначениеОтбора", ОплатаВВалюте);
		Отбор.Вставить("ОплатаВВалюте", ОтборОплатаВВалюте);
		Если ОплатаВВалюте Тогда 
			ОтборВалютаВзаиморасчетов = Новый Структура("ЗначениеОтбора", ПараметрыПлатежа.ВалютаДокумента);
			Отбор.Вставить("ВалютаВзаиморасчетов", ОтборВалютаВзаиморасчетов);
		КонецЕсли;
		
		УстановитьДоговорКонтрагента(
			НовыйДоговор, ПараметрыПлатежа.Контрагент, ПараметрыПлатежа.Организация, ВидыДоговоров, Отбор);
		ПараметрыПлатежа.ДоговорКонтрагента = НовыйДоговор;
		
	КонецЕсли;
	
	СвойстваПлатежа.ДоговорКонтрагента = ПараметрыПлатежа.ДоговорКонтрагента;
	
	Если ЗначениеЗаполнено(ПараметрыПлатежа.ДоговорКонтрагента) Тогда
		
		СчетаУчета = СчетаУчетаРасчетовСКонтрагентом(ПараметрыПлатежа);
		ЗаполнитьЗначенияСвойств(СвойстваПлатежа, СчетаУчета);
		СвойстваДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			ПараметрыПлатежа.ДоговорКонтрагента, "ВалютаВзаиморасчетов,ВедениеВзаиморасчетов,СложныйНалоговыйУчет");
		СвойстваПлатежа.ВалютаДокумента                            = ПараметрыПлатежа.ВалютаДокумента;
		СвойстваПлатежа.ДоговорКонтрагентаВалютаВзаиморасчетов     = СвойстваДоговора.ВалютаВзаиморасчетов;
		СвойстваПлатежа.ВедениеВзаиморасчетов 					   = СвойстваДоговора.ВедениеВзаиморасчетов;
		СвойстваПлатежа.СложныйНалоговыйУчет                       = СвойстваДоговора.СложныйНалоговыйУчет;
		
		СтруктураКурса = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ПараметрыПлатежа.ВалютаДокумента, ПараметрыПлатежа.Дата);
		
		СвойстваПлатежа.КурсВзаиморасчетов      = СтруктураКурса.Курс;
		СвойстваПлатежа.КратностьВзаиморасчетов = СтруктураКурса.Кратность;
	Иначе
		Если ЗначениеЗаполнено(ПараметрыПлатежа.ВалютаДокумента) Тогда
			СвойстваПлатежа.ВалютаДокумента = ПараметрыПлатежа.ВалютаДокумента;
		Иначе
			СвойстваПлатежа.ВалютаДокумента = ПараметрыПлатежа.ВалютаРегламентированногоУчета;
		КонецЕсли;
		
		Если ПараметрыПлатежа.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ИнкассацияДенежныхСредств Тогда
			СвойстваПлатежа.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.ДенежныеСредстваВПутиВИностраннойВалюте;
		КонецЕсли;
		
		СвойстваПлатежа.КурсВзаиморасчетов      = 1;
		СвойстваПлатежа.КратностьВзаиморасчетов = 1;
	КонецЕсли;
	
	Возврат СвойстваПлатежа;
	
КонецФункции

&НаКлиенте
Процедура ИнициализироватьСвойстваПлатежаНаКлиенте(ТолькоСоздатьКлючи = Ложь)
	
	Если СвойстваПлатежа = Неопределено Тогда
		
		Если ТолькоСоздатьКлючи Тогда
			СвойстваПлатежа = ПустаяСтруктураСвойстваПлатежа();
		Иначе
			ИнициализироватьСвойстваПлатежаНаСервере(ТолькоСоздатьКлючи);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьСвойстваПлатежаНаСервере(ТолькоСоздатьКлючи = Ложь)
	
	Если СвойстваПлатежа = Неопределено Тогда
		
		Если ТолькоСоздатьКлючи Тогда
			СвойстваПлатежа = ПустаяСтруктураСвойстваПлатежа();
		Иначе
			ПараметрыОбъекта = ТекущиеПараметрыОбъекта(ЭтаФорма);
			Если Объект.РасшифровкаПлатежа.Количество() > 0 Тогда
				ПараметрыОбъекта.Вставить("ДоговорКонтрагента", Объект.РасшифровкаПлатежа[0].ДоговорКонтрагента);
			КонецЕсли;
			СвойстваПлатежа = СвойстваСтрокРасшифровкиПлатежа(ПараметрыОбъекта, Ложь);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СчетаУчетаРасчетовСКонтрагентом(Знач ПараметрыОбъекта)

	Если ПараметрыОбъекта.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.РасчетыПоКредитамИЗаймам Тогда
		Возврат Новый Структура;
	КонецЕсли;

	СчетаУчета = Новый Структура("СчетУчетаРасчетовСКонтрагентом,СчетУчетаРасчетовПоАвансам,СчетУчетаНДС,СчетУчетаНДСПодтвержденный,НалоговоеНазначение,СтавкаНДС,Амортизируется");

	СтруктураСчетов = ПолучитьСчетаРасчетовСКонтрагентом(
		ПараметрыОбъекта.Организация, ПараметрыОбъекта.Контрагент, ПараметрыОбъекта.ДоговорКонтрагента);

	
	Если ПараметрыОбъекта.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ВозвратДенежныхСредствПоставщиком тогда
		
		СчетаУчета.СчетУчетаРасчетовСКонтрагентом = СтруктураСчетов.СчетРасчетов;
		СчетаУчета.СчетУчетаРасчетовПоАвансам     = СтруктураСчетов.СчетАвансов;
		
		СчетаУчета.СчетУчетаНДС    				  = СтруктураСчетов.СчетУчетаНДСПриобретений;
		СчетаУчета.СчетУчетаНДСПодтвержденный     = СтруктураСчетов.СчетУчетаНДСПриобретенийПодтвержденный;
		СчетаУчета.НалоговоеНазначение 			  = СтруктураСчетов.НалоговоеНазначениеПриобретений;
		Если ПараметрыОбъекта.ЗаТару Тогда
			СчетаУчета.НалоговоеНазначение		  = СтруктураСчетов.НалоговоеНазначениеПриобретенийПоТаре;
		КонецЕсли;
		СчетаУчета.СтавкаНДС		  			  = СтруктураСчетов.СтавкаНДСПриобретений;
		СчетаУчета.Амортизируется		  		  = СтруктураСчетов.Амортизируется;
		
	ИначеЕсли ПараметрыОбъекта.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПрочиеРасчетыСКонтрагентами тогда
		
		СчетаУчета.СчетУчетаРасчетовСКонтрагентом = СтруктураСчетов.СчетРасчетов;
		СчетаУчета.СчетУчетаРасчетовПоАвансам     = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
		
	ИначеЕсли ПараметрыОбъекта.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПоступленияОтПродажПоПлатежнымКартамИБанковскимКредитам тогда
			
		СчетаУчета.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.ДенежныеСредстваВПутиВНациональнойВалюте;
		СчетаУчета.СчетУчетаРасчетовПоАвансам     = ПланыСчетов.Хозрасчетный.ПустаяСсылка();				
	Иначе
		
		СчетаУчета.СчетУчетаРасчетовСКонтрагентом = СтруктураСчетов.СчетРасчетовПокупателя;
		СчетаУчета.СчетУчетаРасчетовПоАвансам     = СтруктураСчетов.СчетАвансовПокупателя;
		
		СчетаУчета.СчетУчетаНДС    				  = СтруктураСчетов.СчетУчетаНДСПродаж;
		СчетаУчета.СчетУчетаНДСПодтвержденный     = СтруктураСчетов.СчетУчетаНДСПродажПодтвержденный;
		СчетаУчета.НалоговоеНазначение 			  = СтруктураСчетов.НалоговоеНазначениеПродаж;
		Если ПараметрыОбъекта.ЗаТару Тогда
			СчетаУчета.НалоговоеНазначение		  = СтруктураСчетов.НалоговоеНазначениеПродажПоТаре;
		КонецЕсли;
		СчетаУчета.СтавкаНДС		  			  = СтруктураСчетов.СтавкаНДСПродаж;
		
	КонецЕсли;

	Возврат СчетаУчета;

КонецФункции

&НаСервереБезКонтекста
Функция НовыеПараметрыПриИзмененииСчетаОрганизации(Знач ПараметрыОбъекта)
	
	СвойстваСчета = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		ПараметрыОбъекта.СчетОрганизации, "ВалютаДенежныхСредств");
	НоваяВалюта   = СвойстваСчета.ВалютаДенежныхСредств;

	Если ПараметрыОбъекта.ВалютаДокумента = НоваяВалюта Тогда
		Возврат Новый Структура(
			"ВалютаДокумента, СчетКонтрагента, КурсДокумента, КратностьДокумента",
			НоваяВалюта, ПараметрыОбъекта.СчетКонтрагента,
			ПараметрыОбъекта.КурсДокумента, ПараметрыОбъекта.КратностьДокумента);
	КонецЕсли;
	
	НоваяВалюта          = ?(НоваяВалюта = Неопределено,
		ПараметрыОбъекта.ВалютаРегламентированногоУчета, НоваяВалюта);
	
	СтруктураКурса       = РаботаСКурсамиВалют.ПолучитьКурсВалюты(НоваяВалюта, ПараметрыОбъекта.Дата);
	НовыйСчетКонтрагента = Справочники.БанковскиеСчета.ПустаяСсылка();
	Если ЗначениеЗаполнено(ПараметрыОбъекта.Контрагент) Тогда
		УчетДенежныхСредствБП.УстановитьБанковскийСчет(
			НовыйСчетКонтрагента, ПараметрыОбъекта.Контрагент, СвойстваСчета.ВалютаДенежныхСредств);
	КонецЕсли;
	
	Если ЕстьРасшифровкаПлатежа(ПараметрыОбъекта.ВидОперации) Тогда
		ПараметрыОбъекта.ВалютаДокумента = НоваяВалюта;
		НовыеПараметры = СвойстваСтрокРасшифровкиПлатежаСервер(ПараметрыОбъекта, Истина);
	Иначе
		НовыеПараметры = Новый Структура;
	КонецЕсли;
	
	НовыеПараметры.Вставить("ВалютаДокумента",          НоваяВалюта);
	НовыеПараметры.Вставить("КурсДокумента",            СтруктураКурса.Курс);
	НовыеПараметры.Вставить("КратностьДокумента",       СтруктураКурса.Кратность);
	НовыеПараметры.Вставить("СчетКонтрагента",          НовыйСчетКонтрагента);
	
	
	Возврат НовыеПараметры;
	
КонецФункции

&НаСервереБезКонтекста
Функция НовыеПараметрыПриИзмененииОрганизации(Знач ПараметрыОбъекта)
	
	НовыйСчетОрганизации = Справочники.БанковскиеСчета.ПустаяСсылка();
	Если ЗначениеЗаполнено(ПараметрыОбъекта.Организация) Тогда
		УчетДенежныхСредствБП.УстановитьБанковскийСчет(
			НовыйСчетОрганизации, ПараметрыОбъекта.Организация,
			ПараметрыОбъекта.ВалютаРегламентированногоУчета, НЕ ПараметрыОбъекта.ОплатаВВалюте);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(НовыйСчетОрганизации) Тогда
		ПараметрыОбъекта.Вставить("СчетОрганизации", НовыйСчетОрганизации);
		НовыеПараметры = НовыеПараметрыПриИзмененииСчетаОрганизации(ПараметрыОбъекта);
	Иначе
		НовыеПараметры = Новый Структура("ВалютаДокумента", ПараметрыОбъекта.ВалютаДокумента);
	КонецЕсли;
	
	Если НЕ НовыеПараметры.Свойство("ДоговорКонтрагента")
		И ЕстьРасшифровкаПлатежа(ПараметрыОбъекта.ВидОперации) Тогда

		СвойстваПлатежа = СвойстваСтрокРасшифровкиПлатежаСервер(ПараметрыОбъекта, Истина);
		Для каждого СвойствоПлатежа Из СвойстваПлатежа Цикл
			НовыеПараметры.Вставить(СвойствоПлатежа.Ключ, СвойствоПлатежа.Значение);
		КонецЦикла;
		
	КонецЕсли;
	
	
	НовыеПараметры.Вставить("СчетОрганизации",    НовыйСчетОрганизации);
	
	Возврат НовыеПараметры;
	
КонецФункции

&НаСервереБезКонтекста
Функция НовыеПараметрыПриИзмененииКонтрагента(Знач ПараметрыОбъекта)

	НовыйСчетКонтрагента = Справочники.БанковскиеСчета.ПустаяСсылка();
	Если ЗначениеЗаполнено(ПараметрыОбъекта.Контрагент) Тогда
		// Найти подходящий под условия расчетный счет
		УчетДенежныхСредствБП.УстановитьБанковскийСчет(
			НовыйСчетКонтрагента,
			ПараметрыОбъекта.Контрагент,
			ПараметрыОбъекта.ВалютаДокумента,
			Истина); // Валюта документа и банковского счета контрагента должна совпадать
	КонецЕсли;

	Если ЕстьРасшифровкаПлатежа(ПараметрыОбъекта.ВидОперации) Тогда
		НовыеПараметры = СвойстваСтрокРасшифровкиПлатежаСервер(ПараметрыОбъекта, Истина);
	Иначе
		НовыеПараметры = Новый Структура;
	КонецЕсли;

	НовыеПараметры.Вставить("СчетКонтрагента", НовыйСчетКонтрагента);

	Возврат НовыеПараметры;

КонецФункции

&НаСервереБезКонтекста
Функция НовыеПараметрыПриИзмененииСчетаБанка(Знач ПараметрыОбъекта)
	
	СвойстваСчетаБанка = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(ПараметрыОбъекта.СчетБанк);
	
	Если СвойстваСчетаБанка.Валютный <> ПараметрыОбъекта.ОплатаВВалюте Тогда
		ОплатаВВалютеПредыдущий   = ПараметрыОбъекта.ОплатаВВалюте;
		СчетОрганизацииПредыдущий = ПараметрыОбъекта.СчетОрганизации;
		
		НовыйСчетОрганизации      = Справочники.БанковскиеСчета.ПустаяСсылка();
		Если ЗначениеЗаполнено(ПараметрыОбъекта.Организация) Тогда
			УчетДенежныхСредствБП.УстановитьБанковскийСчет(
				НовыйСчетОрганизации, ПараметрыОбъекта.Организация,
				ПараметрыОбъекта.ВалютаРегламентированногоУчета, ОплатаВВалютеПредыдущий);
		КонецЕсли;
		
		// необходимо временно поменять этот параметр, чтобы получить договор по изменившейся валюте
		ПараметрыОбъекта.ОплатаВВалюте = СвойстваСчетаБанка.Валютный;
		ПараметрыОбъекта.Вставить("СчетОрганизации", НовыйСчетОрганизации);
		НовыеПараметры = НовыеПараметрыПриИзмененииСчетаОрганизации(ПараметрыОбъекта);
		НовыеПараметры.Вставить("СчетОрганизации", НовыйСчетОрганизации);
		
		// восстановим значение параметров
		ПараметрыОбъекта.ОплатаВВалюте   = ОплатаВВалютеПредыдущий;
		ПараметрыОбъекта.СчетОрганизации = СчетОрганизацииПредыдущий;
	Иначе
		
		НовыеПараметры = Новый Структура("ВалютаДокумента", ПараметрыОбъекта.ВалютаДокумента);
		
	КонецЕсли;
	
	НовыеПараметры.Вставить("ОплатаВВалюте", СвойстваСчетаБанка.Валютный);
	
	Возврат НовыеПараметры;
	
КонецФункции

&НаСервере
Процедура УстановитьПараметрыВыбораСчетовУчетаДенежныхСредств()
	
	// Счет банка
	
	СчетаОтбора = Новый Массив;
	СчетаОтбора.Добавить(ПланыСчетов.Хозрасчетный.СчетаВБанках);
	
	ОтбиратьПоВалюте = Ложь;
	ТекСчет = ПланыСчетов.Хозрасчетный.ТекущиеСчетаВНациональнойВалюте;
	
	СчетаБанка = БухгалтерскийУчет.ПолучитьМассивСчетовДенежныхСредств(СчетаОтбора, ОтбиратьПоВалюте, ТекСчет);
	
	НовыйМассивПараметров = Новый Массив();
	НовыйМассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Ссылка", Новый ФиксированныйМассив(СчетаБанка)));
	НовыйМассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.ЗапретитьИспользоватьВПроводках", Ложь));
	Элементы.СчетБанк.ПараметрыВыбора = Новый ФиксированныйМассив(НовыйМассивПараметров);
	
	// Счет инкассации
	Если Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ИнкассацияДенежныхСредств Тогда
		
		СчетаОтбора = Новый Массив;
		СчетаОтбора.Добавить(ПланыСчетов.Хозрасчетный.ДенежныеСредстваВПутиВИностраннойВалюте);
		СчетаОтбора.Добавить(ПланыСчетов.Хозрасчетный.ДенежныеСредстваВПутиВНациональнойВалюте);
		ТекСчет = ПланыСчетов.Хозрасчетный.ДенежныеСредстваВПутиВИностраннойВалюте;
		
		СчетаИнкассации = БухгалтерскийУчет.ПолучитьМассивСчетовДенежныхСредств(СчетаОтбора, Ложь, ТекСчет);
		
		НовыйМассивПараметров = Новый Массив();
		НовыйМассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Ссылка",   Новый ФиксированныйМассив(СчетаИнкассации)));
		НовыйМассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.ЗапретитьИспользоватьВПроводках", Ложь));
		Элементы.РасшифровкаПлатежаИнкассацияСчетУчетаРасчетовСКонтрагентом.ПараметрыВыбора = Новый ФиксированныйМассив(НовыйМассивПараметров);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьКурсДокумента()

	СтруктураКурса = РаботаСКурсамиВалют.ПолучитьКурсВалюты(Объект.ВалютаДокумента, Объект.Дата);
	КурсДокумента      = СтруктураКурса.Курс;
	КратностьДокумента = СтруктураКурса.Кратность;

КонецПроцедуры

&НаСервере
Процедура ДатаПриИзмененииСервер()

	УстановитьФункциональныеОпцииФормы();

	УстановитьКурсДокумента();

	Если Объект.ВалютаДокумента <> ВалютаРегламентированногоУчета Тогда
		ПересчитатьСуммыВзаиморасчетов();
	КонецЕсли; 
		
	
	
	
	Если Год(Объект.Дата) <> Год(ТекущаяДатаДокумента) Тогда
		РассчитатьПропорциональныйНДС(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииСервер()
	
	УстановитьФункциональныеОпцииФормы();
	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма);
	
	ПараметрыОбъекта = ТекущиеПараметрыОбъекта(ЭтаФорма);
	НовыеПараметры   = НовыеПараметрыПриИзмененииОрганизации(ПараметрыОбъекта);
	
	ЗаполнитьЗначенияСвойств(Объект, НовыеПараметры, "СчетОрганизации, ВалютаДокумента");
	Если НовыеПараметры.ВалютаДокумента <> Неопределено И ПараметрыОбъекта.ВалютаДокумента <> НовыеПараметры.ВалютаДокумента Тогда
		ЗаполнитьЗначенияСвойств(ЭтаФорма, НовыеПараметры, "КурсДокумента, КратностьДокумента");
		ЗаполнитьЗначенияСвойств(Объект,   НовыеПараметры, "СчетКонтрагента");
	КонецЕсли;
	
	ИнициализироватьСвойстваПлатежаНаСервере(Истина);
	ЗаполнитьЗначенияСвойств(СвойстваПлатежа, НовыеПараметры);
	ПерезаполнитьРасшифровкуПлатежа();
	
	//ЗаполнитьЗначенияСвойств(Объект, НалоговыйУчетУСН.ПорядокОтраженияАвансовПоУмолчанию(Объект.Организация, Объект.Дата));
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДобавленныеКолонкиТаблиц()
	
	Если Объект.РасшифровкаПлатежа.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	МассивДоговоров    = Объект.РасшифровкаПлатежа.Выгрузить(, "ДоговорКонтрагента").ВыгрузитьКолонку("ДоговорКонтрагента");
	СвойстваДоговоров  = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(
		МассивДоговоров, "ВалютаВзаиморасчетов,ВедениеВзаиморасчетов,СложныйНалоговыйУчет");
	
	Для каждого СтрокаПлатеж Из Объект.РасшифровкаПлатежа Цикл
		СтрокаПлатеж.ВалютаДокумента = Объект.ВалютаДокумента;
		
		Если ЗначениеЗаполнено(СтрокаПлатеж.ДоговорКонтрагента) Тогда
			СтрокаПлатеж.ДоговорКонтрагентаВалютаВзаиморасчетов     = СвойстваДоговоров[
				СтрокаПлатеж.ДоговорКонтрагента].ВалютаВзаиморасчетов;
			СтрокаПлатеж.ВедениеВзаиморасчетов 					    = СвойстваДоговоров[
				СтрокаПлатеж.ДоговорКонтрагента].ВедениеВзаиморасчетов;
			СтрокаПлатеж.СложныйНалоговыйУчет                       = СвойстваДоговоров[
				СтрокаПлатеж.ДоговорКонтрагента].СложныйНалоговыйУчет;

		Иначе
			СтрокаПлатеж.ДоговорКонтрагентаВалютаВзаиморасчетов     = Справочники.Валюты.ПустаяСсылка();
			СтрокаПлатеж.ВедениеВзаиморасчетов     					= Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПустаяСсылка();
			СтрокаПлатеж.СложныйНалоговыйУчет     					= Ложь;
		КонецЕсли;
		
		
		СвойстваСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(СтрокаПлатеж.СчетУчетаРасчетовСКонтрагентом);
		Для Индекс = 1 По 3 Цикл
			СтрокаПлатеж["СубконтоКт" + Индекс + "Доступность"] = Индекс <= СвойстваСчета.КоличествоСубконто;
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПересчитатьСуммуНДС(СтрокаПлатеж)

	ЗначениеСтавкиНДС = УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаПлатеж.СтавкаНДС);
	СтрокаПлатеж.СуммаНДС = СтрокаПлатеж.СуммаПлатежа * ЗначениеСтавкиНДС / (100 + ЗначениеСтавкиНДС);

КонецПроцедуры // ПересчитатьСуммуНДС()

// Проверяет установленные курсы валют документа перед пересчетом сумм
// Нулевые курсы устанавливаются в 1
//
&НаКлиентеНаСервереБезКонтекста
Процедура ПроверкаКурсовВалют(СтрокаПлатеж, Форма)

	Форма.КурсДокумента      = ?(Форма.КурсДокумента      = 0, 1, Форма.КурсДокумента);
	Форма.КратностьДокумента = ?(Форма.КратностьДокумента = 0, 1, Форма.КратностьДокумента);

	Если СтрокаПлатеж <> Неопределено Тогда
		
		СтрокаПлатеж.КурсВзаиморасчетов      = ?(СтрокаПлатеж.КурсВзаиморасчетов      = 0, Форма.КурсДокумента     , СтрокаПлатеж.КурсВзаиморасчетов);
		СтрокаПлатеж.КратностьВзаиморасчетов = ?(СтрокаПлатеж.КратностьВзаиморасчетов = 0, Форма.КратностьДокумента, СтрокаПлатеж.КратностьВзаиморасчетов);

	КонецЕсли;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РассчитатьСуммуВзаиморасчетов(СтрокаПлатеж, Форма, ПересчитатьКурсПродажи = Ложь)

	ПроверкаКурсовВалют(СтрокаПлатеж, Форма);
	
	СтрокаПлатеж.СуммаВзаиморасчетов = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(
											СтрокаПлатеж.СуммаПлатежа, Форма.Объект.ВалютаДокумента,
											СтрокаПлатеж.ДоговорКонтрагентаВалютаВзаиморасчетов,
											Форма.КурсДокумента, СтрокаПлатеж.КурсВзаиморасчетов,
											Форма.КратностьДокумента, СтрокаПлатеж.КратностьВзаиморасчетов);

КонецПроцедуры

&НаСервереБезКонтекста
Процедура РассчитатьКурсИСуммуВзаиморасчетов(СтрокаПлатеж, Форма)

	Объект = Форма.Объект;
	СтруктураКурсаВзаиморасчетов = РаботаСКурсамиВалют.ПолучитьКурсВалюты(
		СтрокаПлатеж.ДоговорКонтрагентаВалютаВзаиморасчетов, Объект.Дата);

	СтрокаПлатеж.КурсВзаиморасчетов      = СтруктураКурсаВзаиморасчетов.Курс;
	СтрокаПлатеж.КратностьВзаиморасчетов = СтруктураКурсаВзаиморасчетов.Кратность;

	РассчитатьСуммуВзаиморасчетов(СтрокаПлатеж, Форма);

КонецПроцедуры

&НаКлиенте
Процедура СубконтоКтНачалоВыбора(Элемент, ПараметрыДокумента, СтандартнаяОбработка, СуффиксСубконто)

	ПараметрыДокумента = ПолучитьСписокПараметровВыбораСубконто(ЭтаФорма, Объект, "СубконтоКт%Индекс%");
	ПараметрыДокумента.Вставить("СчетУчета", Объект.СчетУчетаРасчетовСКонтрагентом);
	ОбщегоНазначенияБПКлиент.НачалоВыбораЗначенияСубконто(ЭтаФорма, Элемент, СтандартнаяОбработка, ПараметрыДокумента);
	
	Если НЕ СтандартнаяОбработка Тогда
		Возврат;
	КонецЕсли;

	// Выбор других типов, связанных с организацией / контрагентом
	ЗначениеСубконто = Объект[СтрЗаменить(Элемент.Имя, СуффиксСубконто, "")];
	ТипыСубконто     = Элемент.ОграничениеТипа.Типы();
	Если ТипыСубконто.Количество() = 1 Тогда
		ТипСубконто  = ТипыСубконто[0];
	Иначе
		ТипСубконто  = ТипЗнч(ЗначениеСубконто);
	КонецЕсли;

	Если ТипСубконто = БухгалтерскийУчетКлиентСерверПереопределяемый.ТипЗначенияБанковскогоСчетаОрганизации() Тогда

		СтандартнаяОбработка = Ложь;
		Отбор = Новый Структура;
		Отбор.Вставить("Владелец", ПараметрыДокумента.Организация);
		ПараметрыФормы = Новый Структура("Отбор, ТекущаяСтрока", Отбор, ЗначениеСубконто);
		БухгалтерскийУчетКлиентПереопределяемый.ОткрытьФормуВыбораБанковскогоСчетОрганизации(ПараметрыФормы, Элемент);

	ИначеЕсли ТипСубконто = БухгалтерскийУчетКлиентСерверПереопределяемый.ТипПодразделения() Тогда

		СтандартнаяОбработка = Ложь;
		Отбор = Новый Структура;
		ИмяРеквизитаОрганизации = БухгалтерскийУчетКлиентСерверПереопределяемый.ИмяРеквизитаОрганизацияПодразделения();
		Если ЗначениеЗаполнено(ИмяРеквизитаОрганизации) Тогда
			Отбор.Вставить(ИмяРеквизитаОрганизации, ПараметрыДокумента.Организация);
		КонецЕсли;
		ПараметрыФормы = Новый Структура("Отбор, ТекущаяСтрока", Отбор, ЗначениеСубконто);
		БухгалтерскийУчетКлиентПереопределяемый.ОткрытьФормуВыбораПодразделения(ПараметрыФормы, Элемент);

	ИначеЕсли БухгалтерскийУчетКлиентСерверПереопределяемый.ПолучитьОписаниеТиповДоговора().СодержитТип(ТипСубконто) Тогда

		СтандартнаяОбработка = Ложь;
		ПараметрыФормы = Новый Структура;
		Отбор = Новый Структура;
		Отбор.Вставить("Организация", ПараметрыДокумента.Организация);
		Если ПараметрыДокумента.Свойство("Контрагент") Тогда
			Отбор.Вставить(БухгалтерскийУчетКлиентСерверПереопределяемый.ПолучитьИмяРеквизитаКонтрагентДоговора(), ПараметрыДокумента.Контрагент);
		КонецЕсли;
		ПараметрыФормы = Новый Структура("Отбор, ТекущаяСтрока", Отбор, ЗначениеСубконто);
		БухгалтерскийУчетКлиентПереопределяемый.ОткрытьФормуВыбораДоговора(ПараметрыФормы, Элемент);

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СубконтоКтПриИзменении(Элемент)

	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ПлатежныеКартыОбработатьИзменениеСуммыУслуг()
	
	Объект.СуммаУслуг = Объект.РасшифровкаПлатежа.Итог("СуммаУслуг");
	
	Элементы.СчетУчетаУслугиБанка.АвтоОтметкаНезаполненного = Объект.СуммаУслуг > 0;
	Элементы.СчетУчетаУслугиБанка.АвтоВыборНезаполненного   = Объект.СуммаУслуг > 0;
	Если Объект.СуммаУслуг = 0 Тогда
		Элементы.СчетУчетаУслугиБанка.ОтметкаНезаполненного = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура КонтрагентПриИзмененииСервер()
	ПараметрыОбъекта = ТекущиеПараметрыОбъекта(ЭтаФорма);
	НовыеПараметры   = НовыеПараметрыПриИзмененииКонтрагента(ПараметрыОбъекта);
	
	ЗаполнитьЗначенияСвойств(Объект, НовыеПараметры, "СчетКонтрагента");
	
	ИнициализироватьСвойстваПлатежаНаСервере(Истина);
	ЗаполнитьЗначенияСвойств(СвойстваПлатежа, НовыеПараметры);
	ПерезаполнитьРасшифровкуПлатежа();
	
КонецПроцедуры

&НаСервере
Процедура ВидОперацииПриИзмененииНаСервере()
	
	УстановитьПараметрыВыбораСчетовУчетаДенежныхСредств();
	СчетБанкПриИзмененииСервер();
	
	Если ЕстьРасшифровкаПлатежа(Объект.ВидОперации) Тогда
		УстановитьПараметрыВыбораДоговораСКонтрагентом(ЭтаФорма);
		ПараметрыОбъекта = ТекущиеПараметрыОбъекта(ЭтаФорма);
		СвойстваПлатежа  = СвойстваСтрокРасшифровкиПлатежа(ПараметрыОбъекта, Истина);
	КонецЕсли;
	
	ПерезаполнитьРасшифровкуПлатежа();
	
	УстановитьВидимостьСтраницНаСервере();
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура СчетБанкПриИзмененииСервер()
	
	ПараметрыОбъекта = ТекущиеПараметрыОбъекта(ЭтаФорма);
	НовыеПараметры   = НовыеПараметрыПриИзмененииСчетаБанка(ПараметрыОбъекта);
	
	Если НовыеПараметры.ОплатаВВалюте <> ПараметрыОбъекта.ОплатаВВалюте Тогда
		ПараметрыОбъекта.Вставить("ОплатаВВалюте", НовыеПараметры.ОплатаВВалюте);
		ЗаполнитьЗначенияСвойств(ЭтаФорма, НовыеПараметры,
			"ОплатаВВалюте, КурсДокумента, КратностьДокумента");
		ЗаполнитьЗначенияСвойств(Объект, НовыеПараметры,
			"СчетОрганизации, ВалютаДокумента, СчетКонтрагента");
		ИзменитьПараметрыВыбораСчетаИнкассации(ЭтаФорма);
		
		ИнициализироватьСвойстваПлатежаНаСервере(Истина);
		
		ЗаполнитьЗначенияСвойств(СвойстваПлатежа, НовыеПараметры);
		
		
		// Параметры отбора надо ставить после того, как заполнено поле ВалютаДокумента
		УстановитьПараметрыВыбораДоговораСКонтрагентом(ЭтаФорма);
		// ВалютаДокумента не устанавливается вручную ,а берется из валюты банковского счета организации
		УстановитьПараметрыВыбораБанковскихСчетов(ЭтаФорма);
		
		ПерезаполнитьРасшифровкуПлатежа();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РассчитатьПропорциональныйНДС(Форма)
	
	Объект = Форма.Объект;
	Для каждого СтрокаРасшифровки Из Объект.РасшифровкаПлатежа Цикл
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьПропорциональныйНДСТабЧасти(СтрокаРасшифровки,Форма.ЕстьНДС,Форма.КоэффициентПропорциональногоНДС);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура РасшифровкаПлатежаЗаТаруПриИзмененииНаСервере()
	
	СчетаУчета = ПолучитьСчетаРасчетовСКонтрагентом(Объект.Организация, Объект.Контрагент, Объект.ДоговорКонтрагента);
	Если Элементы.РасшифровкаПлатежа.ТекущаяСтрока <> Неопределено Тогда
		СтрокаПлатеж = Объект.РасшифровкаПлатежа.НайтиПоИдентификатору(
			Элементы.РасшифровкаПлатежа.ТекущаяСтрока);
	КонецЕсли;
	Если Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ВозвратДенежныхСредствПоставщиком тогда
		
		СтрокаПлатеж.НалоговоеНазначение 			= СчетаУчета.НалоговоеНазначениеПриобретений;
		Если СтрокаПлатеж.ЗаТару Тогда
			СтрокаПлатеж.НалоговоеНазначение 		= СчетаУчета.НалоговоеНазначениеПриобретенийПоТаре;
		КонецЕсли;
		
	Иначе		
		
		СтрокаПлатеж.НалоговоеНазначение 			= СчетаУчета.НалоговоеНазначениеПродаж;
		Если СтрокаПлатеж.ЗаТару Тогда
			СтрокаПлатеж.НалоговоеНазначение 		= СчетаУчета.НалоговоеНазначениеПродажПоТаре;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УстановитьДоговорКонтрагента(ДоговорКонтрагента, Знач Контрагент, Знач Организация, Знач СписокВидовДоговоров, Знач Отбор = Неопределено)

	БухгалтерскийУчетПереопределяемый.УстановитьДоговорКонтрагента(
		ДоговорКонтрагента, Контрагент, Организация, СписокВидовДоговоров, Отбор);

КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСчетаРасчетовСКонтрагентом(Знач Организация, Знач Контрагент, Знач ДоговорКонтрагента)

	СчетаУчета = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаРасчетовСКонтрагентом(
		Организация, Контрагент, ДоговорКонтрагента);
	Возврат СчетаУчета;

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьИтоги(Форма)
	
	Объект   = Форма.Объект;
	Элементы = Форма.Элементы;
	
	Форма.ИтогоСуммаПлатежа = Объект.РасшифровкаПлатежа.Итог("СуммаПлатежа");
	Форма.ИтогоВсегоНДС     = Объект.РасшифровкаПлатежа.Итог("СуммаНДС");
	
	Если ЕстьРасшифровкаПлатежа(Объект.ВидОперации) Тогда
		Элементы.РасшифровкаПлатежаСуммаПлатежа.ТекстПодвала = Формат(Форма.ИтогоСуммаПлатежа, "ЧЦ=12; ЧДЦ=2");
		Элементы.РасшифровкаПлатежаСуммаНДС.ТекстПодвала     = Формат(Форма.ИтогоВсегоНДС,     "ЧЦ=12; ЧДЦ=2");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПересчитатьСуммыВзаиморасчетов()
	
	ОтборВалюта = Новый Структура("ДоговорКонтрагентаВалютаВзаиморасчетов", Объект.ВалютаДокумента);
	ПлатежиКИзменениюКураса = Объект.РасшифровкаПлатежа.НайтиСтроки(ОтборВалюта);
	Для каждого СтрокаПлатеж Из ПлатежиКИзменениюКураса Цикл
		РассчитатьКурсИСуммуВзаиморасчетов(СтрокаПлатеж, ЭтотОбъект);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ИНАГРО_ЗаявкиЗаявлениеРасчетПриИзмененииНаСервере() // ИНАГРО
	
	Документ = РеквизитФормыВЗначение("Объект", Тип("ДокументОбъект.ПоступлениеНаРасчетныйСчет"));	
	Документ.РассчитатьСуммуЗаявок();	
	ЗначениеВРеквизитФормы(Документ, "Объект");
		
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ЗАВЕРШЕНИЕ НЕМОДАЛЬНЫХ ВЫЗОВОВ

&НаКлиенте
Процедура РасшифровкаПлатежаКурсВзаиморасчетовНачалоВыбораЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	СтрокаПлатеж = ДополнительныеПараметры.СтрокаПлатеж;
	
	СтруктураКурсаИКратности = РезультатЗакрытия;
	
	Если СтруктураКурсаИКратности <> Неопределено Тогда
		СтрокаПлатеж.КурсВзаиморасчетов      = СтруктураКурсаИКратности.КурсВалюты;
		СтрокаПлатеж.КратностьВзаиморасчетов = СтруктураКурсаИКратности.КратностьВалюты;
	КонецЕсли;
	РассчитатьСуммуВзаиморасчетов(СтрокаПлатеж, ЭтотОбъект);
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаПокупкаВалютыКурсВзаиморасчетовНачалоВыбораЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	СтрокаПлатеж = ДополнительныеПараметры.СтрокаПлатеж;
	
	СтруктураКурсаИКратности = РезультатЗакрытия;
	
	Если СтруктураКурсаИКратности <> Неопределено Тогда
		СтрокаПлатеж.КурсВзаиморасчетов      = СтруктураКурсаИКратности.КурсВалюты;
		СтрокаПлатеж.КратностьВзаиморасчетов = СтруктураКурсаИКратности.КратностьВалюты;
	КонецЕсли;
	РассчитатьСуммуВзаиморасчетов(СтрокаПлатеж, ЭтотОбъект);
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаПродажаВалютыКурсВзаиморасчетовНачалоВыбораЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт

	СтрокаПлатеж = ДополнительныеПараметры.СтрокаПлатеж;
	
	СтруктураКурсаИКратности = РезультатЗакрытия;
	
	Если СтруктураКурсаИКратности <> Неопределено Тогда
		СтрокаПлатеж.КурсВзаиморасчетов      = СтруктураКурсаИКратности.КурсВалюты;
		СтрокаПлатеж.КратностьВзаиморасчетов = СтруктураКурсаИКратности.КратностьВалюты;
	КонецЕсли;
	
	РассчитатьСуммуВзаиморасчетов(СтрокаПлатеж, ЭтотОбъект);
	
	Модифицированность = Истина;
	
КонецПроцедуры	

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ БСП

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды










#КонецОбласти
