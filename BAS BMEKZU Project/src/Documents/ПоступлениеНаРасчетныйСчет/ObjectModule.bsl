#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

Перем мВалютаРегламентированногоУчета;

// Хранят группировочные признаки вида операции
Перем ЕстьРасчетыСКонтрагентами;
Перем ЕстьРасчетыПоКредитам;
Перем ЕстьРасчетыПоПлатежнымКартам;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

// Пересчитывает сумму НДС
//
// Параметры:
//  Нет.
//
Процедура ПересчитатьСуммуНДС(СтрокаПлатеж) Экспорт

	ЗначениеСтавкиНДС     = УчетНДС.ПолучитьСтавкуНДС(СтрокаПлатеж.СтавкаНДС);
	СтрокаПлатеж.СуммаНДС = СтрокаПлатеж.СуммаПлатежа*ЗначениеСтавкиНДС/(100+ЗначениеСтавкиНДС);

КонецПроцедуры // ПересчитатьСуммуНДС()

// Проверяет установленные курсы валют документа перед пересчетом сумм
// Нулевые курсы устанавливаются в 1
//
Процедура ПроверкаКурсовВалют(СтрокаПлатеж) Экспорт


	Если Не СтрокаПлатеж = Неопределено Тогда
		
		СтрокаПлатеж.КурсВзаиморасчетов      = ?(СтрокаПлатеж.КурсВзаиморасчетов      = 0, 1, СтрокаПлатеж.КурсВзаиморасчетов);
		СтрокаПлатеж.КратностьВзаиморасчетов = ?(СтрокаПлатеж.КратностьВзаиморасчетов = 0, 1, СтрокаПлатеж.КратностьВзаиморасчетов);

	КонецЕсли;

КонецПроцедуры // ПроверкаКурсовВалют()

Процедура ДвиженияПоЕдиномуНалогуКарты(СтруктураШапкиДокумента,РеестрПлатежей,Отказ)

	РеестрПлатежейПоЕдиномуНалогу = Новый ТаблицаЗначений;
	РеестрПлатежейПоЕдиномуНалогу.Колонки.Добавить("ГривневаяСумма",Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,3)));
	РеестрПлатежейПоЕдиномуНалогу.Колонки.Добавить("СтатьяДекларацииПоЕдиномуНалогу");
	РеестрПлатежейПоЕдиномуНалогу.Колонки.Добавить("СуммаНДС", 	  Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(5,0)));
	РеестрПлатежейПоЕдиномуНалогу.Колонки.Добавить("СтоимостьОС", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(5,0)));		
	
	РеестрПлатежей.Свернуть("СтатьяДекларацииПоЕдиномуНалогу", "ГривневаяСумма"); 
	Для Каждого СтрокаПлатеж Из РеестрПлатежей Цикл
		Строка = РеестрПлатежейПоЕдиномуНалогу.Добавить();
		ЗаполнитьЗначенияСвойств(Строка, СтрокаПлатеж);			
	КонецЦикла;
	
	Строка = РеестрПлатежейПоЕдиномуНалогу.Добавить();
	ДанныеОВалюте  = МодульВалютногоУчета.ПолучитьКурсВалюты(мВалютаРегламентированногоУчета, СтруктураШапкиДокумента.Дата);
    ГривневаяСумма = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СуммаУслуг, СтруктураШапкиДокумента.ВалютаДокумента, мВалютаРегламентированногоУчета,
					СтруктураШапкиДокумента.КурсДокумента,      ДанныеОВалюте.Курс, 
					СтруктураШапкиДокумента.КратностьДокумента, ДанныеОВалюте.Кратность);
						 
	Строка.ГривневаяСумма  = ГривневаяСумма;
	Строка.СтатьяДекларацииПоЕдиномуНалогу = СтатьяДекларацииПоЕдиномуНалогуОплатаУслугБанка;
	
	НалоговыйУчет.ДвиженияПоЕдиномуНалогуРасчеты(ЭтотОбъект,СтруктураШапкиДокумента,РеестрПлатежейПоЕдиномуНалогу,Отказ);

КонецПроцедуры
 
//// Формирует движения по регистрам
////  Отказ                     - флаг отказа в проведении,
////  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
////  Режим 					  - режим проведения документа
//
Процедура ДвиженияПоРегистрам(РежимПроведения, Отказ, Заголовок, СтруктураШапкиДокумента)

	ДвиженияПоРегистрамРегл(СтруктураШапкиДокумента,РежимПроведения, Отказ, Заголовок);

КонецПроцедуры // ДвиженияПоРегистрам()

Процедура ДвиженияПоРегистрамРегл(СтруктураШапкиДокумента,РежимПроведения, Отказ, Заголовок)


	ДатаДока = СтруктураШапкиДокумента.Дата;
	
	ВидСчетаОрг = СтруктураШапкиДокумента.СчетОрганизации.ВидСчета;
	ВалютаСчета = СтруктураШапкиДокумента.СчетОрганизации.ВалютаДенежныхСредств;
	ПроводкиБУ  = Движения.Хозрасчетный;

	РасчетыВВалюте = Ложь;
	
	СчетДт = СтруктураШапкиДокумента.СчетБанк;

	Если СчетДт.Валютный Тогда
		РасчетыВВалюте = Истина;
	КонецЕсли;
	
	Если ЕстьРасчетыСКонтрагентами ИЛИ ЕстьРасчетыПоКредитам ИЛИ ЕстьРасчетыПоПлатежнымКартам Тогда
		  
		СтруктураШапкиДокумента.Вставить("КоррСчет", СчетДт);
		
		РеестрПлатежей = УправлениеДенежнымиСредствами.ПодготовитьТаблицуОплат(СтруктураШапкиДокумента);
		
		Если ЕстьРасчетыПоПлатежнымКартам И СтруктураШапкиДокумента.СуммаУслуг > 0 Тогда
		
			СтрокаУслуг = РеестрПлатежей.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаУслуг, РеестрПлатежей[0]);
			
			ДанныеОВалюте  = МодульВалютногоУчета.ПолучитьКурсВалюты(мВалютаРегламентированногоУчета, ДатаДока);
    		ГривневаяСумма = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтруктураШапкиДокумента.СуммаУслуг, СтруктураШапкиДокумента.ВалютаДокумента, мВалютаРегламентированногоУчета,
							СтруктураШапкиДокумента.КурсДокумента,      ДанныеОВалюте.Курс, 
							СтруктураШапкиДокумента.КратностьДокумента, ДанныеОВалюте.Кратность);
						 
			СтрокаУслуг.ГривневаяСумма = ГривневаяСумма;
			СтрокаУслуг.ВалютнаяСумма = СтруктураШапкиДокумента.СуммаУслуг;

			СтрокаУслуг.СуммаВзаиморасчетов  = СтруктураШапкиДокумента.СуммаУслуг;
			
			СтрокаУслуг.КоррСчет      = СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом;
			СтрокаУслуг.КоррСубконто1 = СубконтоКт1;
			СтрокаУслуг.КоррСубконто2 = СубконтоКт2;
			СтрокаУслуг.КоррСубконто3 = СубконтоКт3;
			
			РеестрПлатежей.Колонки.Добавить("НалоговоеНазначение");
		    СтрокаУслуг.НалоговоеНазначение = НалоговоеНазначениеПлатежныеКартыУслуги;
			СтрокаУслуг.НеОтноситьНаЗатратыПоНУ = НЕ СтруктураШапкиДокумента.ЕстьНалогНаПрибыльДо2015; 
			
		КонецЕсли;
		
		СодержаниеПроводки = "";
		Если ЕстьРасчетыПоКредитам Тогда
		    СодержаниеПроводки = НСтр("ru='Расчеты по кредитам и займам';uk='Розрахунки за кредитами і позиками'",Локализация.КодЯзыкаИнформационнойБазы());
		ИначеЕсли СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПрочиеРасчетыСКонтрагентами тогда
			СодержаниеПроводки = НСтр("ru='Расчеты с контрагентом';uk='Розрахунки з контрагентом'",Локализация.КодЯзыкаИнформационнойБазы());
			РеестрПлатежей.ЗагрузитьКолонку(РеестрПлатежей.ВыгрузитьКолонку("СчетОплаты"),"СчетАванса");
		ИначеЕсли ЕстьРасчетыПоПлатежнымКартам тогда
			СодержаниеПроводки = НСтр("ru='Расчеты по платежным картам и банковским кредитам';uk='Розрахунки за платіжниим картами і банківськими кредитами'",Локализация.КодЯзыкаИнформационнойБазы());
			РеестрПлатежей.ЗагрузитьКолонку(РеестрПлатежей.ВыгрузитьКолонку("СчетОплаты"),"СчетАванса");
			КолонкаКонтрагент = Новый Массив;
			Для Инд = 0 По 1 Цикл
				КолонкаКонтрагент.Добавить(СтруктураШапкиДокумента.Контрагент);
			КонецЦикла;
			РеестрПлатежей.ЗагрузитьКолонку(КолонкаКонтрагент,"Контрагент");			
		КонецЕсли; 

		Если БухгалтерскийУчетРасчетовСКонтрагентами.ДвижениеДенег(ЭтотОбъект,СтруктураШапкиДокумента,ЕстьРасчетыСКонтрагентами,Отказ,Заголовок,СодержаниеПроводки,,РеестрПлатежей)=Ложь тогда
			Возврат;
		КонецЕсли;
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПрочееПоступлениеБезналичныхДенежныхСредств 
		или ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПокупкаПродажаВалюты Тогда

		Проводка = ПроводкиБУ.Добавить();

		Проводка.Период     = ДатаДока;
		Проводка.СчетДт     = СчетДт;
		
		Если ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПрочееПоступлениеБезналичныхДенежныхСредств Тогда
			Проводка.Содержание = НСтр("ru='Прочее поступление денежных средств';uk='Інше надходження коштів'",Локализация.КодЯзыкаИнформационнойБазы());
		ИначеЕсли Проводка.СчетДт.Валютный Тогда
			Проводка.Содержание = НСтр("ru='Поступление приобретенной валюты';uk='Надходження придбаної валюти'",Локализация.КодЯзыкаИнформационнойБазы());
		Иначе
			Проводка.Содержание = НСтр("ru='Поступление средств от продажи валюты';uk='Надходження коштів від продажу валюти'",Локализация.КодЯзыкаИнформационнойБазы());
		КонецЕсли;	
		Проводка.Организация = СтруктураШапкиДокумента.Организация;

		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтруктураШапкиДокумента.СчетОрганизации);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, СтруктураШапкиДокумента.СтатьяДвиженияДенежныхСредств);

		Проводка.СчетКт = СчетУчетаРасчетовСКонтрагентом;
		Если ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПрочееПоступлениеБезналичныхДенежныхСредств Тогда
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, СтруктураШапкиДокумента.СубконтоКт1);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, СтруктураШапкиДокумента.СубконтоКт2);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3, СтруктураШапкиДокумента.СубконтоКт3);
		Иначе
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, СтруктураШапкиДокумента.Контрагент);
		КонецЕсли;	

		Если РасчетыВВалюте Тогда

			Если Проводка.СчетДт.Валютный Тогда
				Проводка.ВалютаДт        = СтруктураШапкиДокумента.ВалютаДокумента;
				Проводка.ВалютнаяСуммаДт = СтруктураШапкиДокумента.СуммаДокумента;
			КонецЕсли;

			Если Проводка.СчетКт.Валютный Тогда
				Проводка.ВалютаКт        = СтруктураШапкиДокумента.ВалютаДокумента;
				Проводка.ВалютнаяСуммаКт = СтруктураШапкиДокумента.СуммаДокумента;
			КонецЕсли;

			ДанныеОВалюте   = МодульВалютногоУчета.ПолучитьКурсВалюты(мВалютаРегламентированногоУчета, ДатаДока);

			Проводка.Сумма  = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СуммаДокумента, СтруктураШапкиДокумента.ВалютаДокумента, мВалютаРегламентированногоУчета,
														 СтруктураШапкиДокумента.КурсДокумента,      ДанныеОВалюте.Курс, 
														 СтруктураШапкиДокумента.КратностьДокумента, ДанныеОВалюте.Кратность);
		Иначе
			Проводка.Сумма = СуммаДокумента;
		КонецЕсли;
		                                                                                       
		Если ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПрочееПоступлениеБезналичныхДенежныхСредств Тогда
			
			Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыльДо2015 Тогда
				Проводка.НалоговоеНазначениеКт = НалоговоеНазначениеПриПрочемПоступлении;
				
				Если НЕ НалоговоеНазначениеПриПрочемПоступлении = Справочники.НалоговыеНазначенияАктивовИЗатрат.НКУ_НеХозДеятельность Тогда			
					Проводка.СуммаНУКт = Проводка.Сумма;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;

	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПоступлениеСредствОтФСС Тогда
	    	    
		РезультатЗапроса = ПолучитьЗапросДляДвиженийПоРасчетамФСС(СтруктураШапкиДокумента);
        ВыборкаРасчетовСФСС = РезультатЗапроса.Выбрать();
		Пока ВыборкаРасчетовСФСС.Следующий() Цикл
			Проводка = ПроводкиБУ.Добавить();
			
			СчетДт = СтруктураШапкиДокумента.СчетБанк;
			
			Проводка.Организация = СтруктураШапкиДокумента.Организация;
			Проводка.Период     = ДатаДока;
			Проводка.СчетДт     = СчетДт;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтруктураШапкиДокумента.СчетОрганизации);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, СтруктураШапкиДокумента.СтатьяДвиженияДенежныхСредств);

			Проводка.Содержание = НСтр("ru='Поступление средств от ФСС';uk='Надходження коштів від ФСС'",Локализация.КодЯзыкаИнформационнойБазы());

			Проводка.СчетКт     = СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом;
			Если Проводка.СчетКт = ПланыСчетов.Хозрасчетный.РасчетыПоСоциальномуСтрахованию Тогда
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, Справочники.Налоги.Соцстрах);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, ВыборкаРасчетовСФСС.СтатьяРасчетовСФСС);
			Иначе
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, ВыборкаРасчетовСФСС.СтатьяРасчетовСФСС);
			КонецЕсли;
			
			// ИНАГРО++
			//Проводка.Сумма      = ВыборкаРасчетовСФСС.СуммаПоСтатьям;
			Проводка.Сумма      = ВыборкаРасчетовСФСС.Сумма; 
			
			// Движения по регистру накопления ИНАГРО_ВзаиморасчетыПоНачислениямЗаСчетФСС			
			Движение = Движения.ИНАГРО_ВзаиморасчетыПоНачислениямЗаСчетФСС.Добавить();			
		    Движение.ВидДвижения	      = ВидДвиженияНакопления.Расход;
			Движение.Период               = Дата;		
			Движение.Организация		  = Организация;
			Движение.ПериодВзаиморасчетов = ВыборкаРасчетовСФСС.ПериодВзаиморасчетов;
			Движение.СтатьяРасчетовСФСС   = ВыборкаРасчетовСФСС.СтатьяРасчетовСФСС;
			Движение.Сотрудник            = ВыборкаРасчетовСФСС.Сотрудник;
			Движение.СчетУчета			  = ВыборкаРасчетовСФСС.СчетУчета;			
			Движение.Сумма				  = ВыборкаРасчетовСФСС.Сумма;			
			Движение.Документ 			  = ВыборкаРасчетовСФСС.Документ;
			Движение.КодОперации		  = Перечисления.ИНАГРО_КодыОперацийРасчетыСФСС.Получено;
			
			// Движения по регистру накопления ВзаиморасчетыССотрудниками
			Движение = Движения.ВзаиморасчетыССотрудниками.Добавить();
			Движение.ВидДвижения   		  = ВидДвиженияНакопления.Приход;			
			Движение.Период				  = Дата;			
			Движение.Организация		  = Организация;
			Движение.ПериодВзаиморасчетов = ВыборкаРасчетовСФСС.ПериодВзаиморасчетов;
			Движение.Сотрудник			  = ВыборкаРасчетовСФСС.Сотрудник;
			Движение.ФизическоеЛицо		  = ВыборкаРасчетовСФСС.ФизическоеЛицо;
			Движение.СчетУчета			  = ВыборкаРасчетовСФСС.СчетУчета; 			
			Движение.СуммаВзаиморасчетов  = ВыборкаРасчетовСФСС.Сумма;		
			Движение.КодОперации	      = Перечисления.КодыОперацийВзаиморасчетыСРаботникамиОрганизаций.Начисления;			
			// ИНАГРО--
			
		КонецЦикла;
		
	ИначеЕсли ВидОперации=Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ИнкассацияДенежныхСредств Тогда
		
		РезультатЗапроса = ПолучитьЗапросДляДвиженийПоИнкасации(СтруктураШапкиДокумента);
        ВыборкаИнкасация = РезультатЗапроса.Выбрать();
		Пока ВыборкаИнкасация.Следующий() Цикл
			Проводка = ПроводкиБУ.Добавить();
			
			СчетДт = СтруктураШапкиДокумента.СчетБанк;
			
			Проводка.Организация = СтруктураШапкиДокумента.Организация;
			Проводка.Период     = ДатаДока;
			Проводка.СчетДт     = СчетДт;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтруктураШапкиДокумента.СчетОрганизации);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, ВыборкаИнкасация.СтатьяДвиженияДенежныхСредств);

			Проводка.Содержание = НСтр("ru='Инкассация денежных средств';uk='Інкасація коштів'",Локализация.КодЯзыкаИнформационнойБазы());

			Проводка.СчетКт     = ВыборкаИнкасация.СчетКт;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, ВыборкаИнкасация.СубконтоКт1);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, ВыборкаИнкасация.СубконтоКт2);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3, ВыборкаИнкасация.СубконтоКт3);
			
			Если Проводка.СчетДт.Валютный Тогда
				Проводка.ВалютаДт        = СтруктураШапкиДокумента.ВалютаДокумента;
				Проводка.ВалютнаяСуммаДт = СтруктураШапкиДокумента.СуммаДокумента;
			КонецЕсли;

			Если Проводка.СчетКт.Валютный Тогда
				Проводка.ВалютаКт        = СтруктураШапкиДокумента.ВалютаДокумента;
				Проводка.ВалютнаяСуммаКт = СтруктураШапкиДокумента.СуммаДокумента;
			КонецЕсли;

			ДанныеОВалюте   = МодульВалютногоУчета.ПолучитьКурсВалюты(мВалютаРегламентированногоУчета, ДатаДока);

			Проводка.Сумма  = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СуммаДокумента, СтруктураШапкиДокумента.ВалютаДокумента, мВалютаРегламентированногоУчета,
														 СтруктураШапкиДокумента.КурсДокумента,      ДанныеОВалюте.Курс, 
														 СтруктураШапкиДокумента.КратностьДокумента, ДанныеОВалюте.Кратность);
			
		КонецЦикла;
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ВозвратДенежныхСредствПодотчетником Тогда
		
		Проводка = ПроводкиБУ.Добавить();
		
		Проводка.Период      = СтруктураШапкиДокумента.Дата;
		Проводка.Организация = СтруктураШапкиДокумента.Организация;
		Проводка.Содержание = НСтр("ru='Поступление денежных средств от подотчетчика';uk='Повернення грошових коштів від підзвітної особи'",Локализация.КодЯзыкаИнформационнойБазы());
		
		Если РасчетыВВалюте Тогда
			Проводка.СчетКт = ПланыСчетов.Хозрасчетный.РасчетыСПодотчетнымиЛицамиВИностраннойВалюте;
		Иначе
			Проводка.СчетКт = ПланыСчетов.Хозрасчетный.РасчетыСПодотчетнымиЛицамиВНациональнойВалюте;
		КонецЕсли;
		
		Проводка.СубконтоКт.РаботникиОрганизаций = СтруктураШапкиДокумента.ФизЛицо;
		
		Проводка.СчетДт = СчетДт;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтруктураШапкиДокумента.СчетОрганизации);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, СтруктураШапкиДокумента.СтатьяДвиженияДенежныхСредств);
		
		Если РасчетыВВалюте Тогда
			
			Если Проводка.СчетКт.Валютный Тогда
				Проводка.ВалютаКт        = СтруктураШапкиДокумента.ВалютаДокумента;
				Проводка.ВалютнаяСуммаКт = СтруктураШапкиДокумента.СуммаДокумента;
			КонецЕсли;
			
			
			ВалютаРег       = мВалютаРегламентированногоУчета;
			ДанныеОВалюте   = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаРег, Дата);
			
			Проводка.Сумма  = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтруктураШапкиДокумента.СуммаДокумента, СтруктураШапкиДокумента.ВалютаДокумента, ВалютаРег,
			СтруктураШапкиДокумента.КурсДокумента, ДанныеОВалюте.Курс, 
			СтруктураШапкиДокумента.КратностьДокумента, ДанныеОВалюте.Кратность);
			
			Проводка.ВалютаКт        = СтруктураШапкиДокумента.ВалютаДокумента;
			Проводка.ВалютнаяСуммаКт = СтруктураШапкиДокумента.СуммаДокумента;
			
		Иначе
			Проводка.Сумма  = СтруктураШапкиДокумента.СуммаДокумента;
		КонецЕсли;
		
	КонецЕсли;
	
	Если   ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ВозвратДенежныхСредствПоставщиком 
		 И СтруктураШапкиДокумента.ЕстьНалогНаПрибыльДо2015 Тогда

		Для каждого СтрокаРасшифровки Из РасшифровкаПлатежа Цикл
			
			Если НЕ СтрокаРасшифровки.ВозвратАвансаДо01042011НУ Тогда
				Продолжить;
			КонецЕсли;
			
			Если СтрокаРасшифровки.СуммаВДВРПоАвансуДо01042011 = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			ЭтоПриобретение = (Найти(ВРЕГ(СтруктураШапкиДокумента.ВидДокумента), "ВХОДЯЩ") > 0) ИЛИ (Найти(ВРЕГ(СтруктураШапкиДокумента.ВидДокумента), "ПРИХОД") > 0)
								ИЛИ (Найти(ВРЕГ(СтруктураШапкиДокумента.ВидДокумента), "ПОСТУПЛЕН") > 0);			
			
			Проводка = ПроводкиБУ.Добавить();
			Проводка.Период     = ДатаДока;
			Проводка.Организация = СтруктураШапкиДокумента.Организация;
			
			СуммаСторноДоходовЗатрат = - СтрокаРасшифровки.СуммаВДВРПоАвансуДо01042011;
				
			Если ЭтоПриобретение Тогда
				Проводка.СчетДт    = ПланыСчетов.Хозрасчетный.ДругиеЗатратыОперационнойДеятельности;
				Проводка.СчетКт    = ПланыСЧетов.Хозрасчетный.Вспомогательный;
				Проводка.НалоговоеНазначениеДт = Справочники.НалоговыеНазначенияАктивовИЗатрат.НКУ_ХозДеятельность;
				Проводка.СуммаНУДт = СуммаСторноДоходовЗатрат;
				
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "СтатьиЗатрат", СтрокаРасшифровки.СтатьяПоВозвратуАвансаДо2011НУ);
				Проводка.Содержание = НСтр("ru='(НУ) Сторно расходов при возврате аванса до 01.04.2011';uk='(ПО) Сторно витрат при поверненні авансу до 01.04.2011'",Локализация.КодЯзыкаИнформационнойБазы());
					
			Иначе	
				Проводка.СчетКт    = ПланыСчетов.Хозрасчетный.ДругиеДоходыОтОбычнойДеятельности;
				Проводка.СчетДт    = ПланыСЧетов.Хозрасчетный.Вспомогательный;
				Проводка.НалоговоеНазначениеКт = Справочники.НалоговыеНазначенияАктивовИЗатрат.НКУ_ХозДеятельность;
				Проводка.СуммаНУКт = СуммаСторноДоходовЗатрат;
				
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "СтатьиДоходов", СтрокаРасшифровки.СтатьяПоВозвратуАвансаДо2011НУ);
				Проводка.Содержание = НСтр("ru='(НУ) Сторно доходов при возврате аванса до 01.04.2011';uk='(ПО) Сторно доходів при поверненні авансу до 01.04.2011'",Локализация.КодЯзыкаИнформационнойБазы());
			КонецЕсли;
		
		КонецЦикла;
	
	КонецЕсли;
	
	//Учет курсовых разниц
	Если (ВалютаДокумента <> мВалютаРегламентированногоУчета) тогда
		БухгалтерскийУчетРед12.ПереоценкаСчетовДокументаРегл(ЭтотОбъект,СтруктураШапкиДокумента, мВалютаРегламентированногоУчета,Отказ,Заголовок);
	КонецЕсли; // Учет курсовых разниц

	
	Если (ЕстьРасчетыСКонтрагентами или ЕстьРасчетыПоКредитам) и СтруктураШапкиДокумента.ЕстьЕдиныйНалог Тогда
		РеестрПлатежей = УправлениеДенежнымиСредствами.ПодготовитьТаблицуОплат(СтруктураШапкиДокумента);
		НалоговыйУчет.ДвиженияПоЕдиномуНалогуРасчеты(ЭтотОбъект,СтруктураШапкиДокумента,РеестрПлатежей,Отказ);
	ИначеЕсли (ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПрочееПоступлениеБезналичныхДенежныхСредств) и СтруктураШапкиДокумента.ЕстьЕдиныйНалог Тогда
		НалоговыйУчет.ДвиженияПоЕдиномуНалогуПрочее(ЭтотОбъект,СтруктураШапкиДокумента,Отказ);	
	ИначеЕсли ЕстьРасчетыПоПлатежнымКартам И СтруктураШапкиДокумента.ЕстьЕдиныйНалог Тогда
		РеестрПлатежей = УправлениеДенежнымиСредствами.ПодготовитьТаблицуОплат(СтруктураШапкиДокумента);
		ДвиженияПоЕдиномуНалогуКарты(СтруктураШапкиДокумента,РеестрПлатежей,Отказ);
	КонецЕсли;	
	
	Если (ЕстьРасчетыСКонтрагентами и не ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПрочиеРасчетыСКонтрагентами)
	   и (СтруктураШапкиДокумента.ЕстьНДС) Тогда
	
		РеестрПлатежей = НалоговыйУчет.ПодготовитьТаблицуОплатДляНалоговогоУчета(СтруктураШапкиДокумента);
		НалоговыйУчет.ДвиженияПоРегистрамНалоговогоУчетаПлатежныхДокументов(ЭтотОбъект,СтруктураШапкиДокумента,РеестрПлатежей,Отказ);
			
	КонецЕсли; 

КонецПроцедуры

Процедура ЗаполнитьПоДокументуОснованию(Основание)
	
	// Заполнение реквизитов из стандартного набора по документу основанию.
	ЗаполнениеДокументов.ЗаполнитьПоОснованию(ЭтотОбъект, Основание);
	
	ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	
	ВалютаДокумента    = ВалютаРегламентированногоУчета;
	
	ДокументОснование = Основание;
	
	ТипДокументаОснования = ТипЗнч(Основание);
	
	ТипДокументаРеализацияТоваровУслуг             = Тип("ДокументСсылка.РеализацияТоваровУслуг");
	ТипДокументаОтчетКомиссионераОПродажах         = Тип("ДокументСсылка.ОтчетКомиссионераОПродажах");
	ТипДокументаОтчетКомитентуОПродажах            = Тип("ДокументСсылка.ОтчетКомитентуОПродажах");
	ТипДокументаСчетНаОплатуПокупателю             = Тип("ДокументСсылка.СчетНаОплатуПокупателю");
	ТипДокументаРасходныйКассовыйОрдер             = Тип("ДокументСсылка.РасходныйКассовыйОрдер");
	ТипДокументаПокупкаПродажаВалюты               = Тип("ДокументСсылка.ПокупкаПродажаВалюты");
	ТипДокументаВозвратТоваровПоставщику           = Тип("ДокументСсылка.ВозвратТоваровПоставщику");
	ТипДокументаАктОбОказанииПроизводственныхУслуг = Тип("ДокументСсылка.АктОбОказанииПроизводственныхУслуг");
	ТипПередачаОС                                  = Тип("ДокументСсылка.ПередачаОС");
	ТипПередачаНМА                                 = Тип("ДокументСсылка.ПередачаНМА");
	ТипДокументаАвансовыйОтчет                     = Тип("ДокументСсылка.АвансовыйОтчет");	
		
	Если НЕ ТипДокументаОснования = ТипДокументаПокупкаПродажаВалюты
		И НЕ ТипДокументаОснования = ТипДокументаАвансовыйОтчет 
		И НЕ ТипДокументаОснования = Тип("ДокументСсылка.ИНАГРО_ЗаявлениеРасчетВФСС")
		И НЕ ТипДокументаОснования = Тип("ДокументСсылка.ИНАГРО_КонвертацияВалюты") Тогда // ИНАГРО
		ДанныеОснования       = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Основание, "Организация,Контрагент,ДоговорКонтрагента");
		СчетаУчета = БухгалтерскийУчетРасчетовСКонтрагентами.ПолучитьСчетаРасчетовСКонтрагентом(ДанныеОснования.Организация, 
														ДанныеОснования.Контрагент, ДанныеОснования.ДоговорКонтрагента);
	КонецЕсли;
	
	Если ТипДокументаОснования = ТипДокументаРеализацияТоваровУслуг
		ИЛИ ТипДокументаОснования = ТипДокументаАктОбОказанииПроизводственныхУслуг 
		ИЛИ ТипДокументаОснования = ТипДокументаОтчетКомиссионераОПродажах
		ИЛИ ТипДокументаОснования = ТипДокументаОтчетКомитентуОПродажах
		ИЛИ ТипДокументаОснования = ТипПередачаОС
		ИЛИ ТипДокументаОснования = ТипПередачаНМА
		ИЛИ ИНАГРО_ОбщийВызовСервераПовтИсп.ЕстьБСПУ() // ИНАГРО
		 И  (Основание.Метаданные().Имя = "ИНАГРО_РеализацияБиологическихАктивов"
		 ИЛИ Основание.Метаданные().Имя = "ИНАГРО_СчетНаОплатуПокупателюБиологическихАктивов")
		ИЛИ ТипДокументаОснования = ТипДокументаСчетНаОплатуПокупателю Тогда
		
		ДанныеОснования       = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Основание, "Организация, ВалютаДокумента,
			|КурсВзаиморасчетов, КратностьВзаиморасчетов, СуммаДокумента");
		
		ВидОперации           = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ОплатаПокупателя;
		ВидРасчетовПоДоговору = БухгалтерскийУчетПереопределяемый.ОпределениеВидаРасчетовПоПараметрамДоговора(
			ДоговорКонтрагента);
		ВалютаВзаиморасчетов  = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДоговорКонтрагента, "ВалютаВзаиморасчетов");
		Если ВидРасчетовПоДоговору = Перечисления.ВидыРасчетовПоДоговорам.РасчетыВИностраннойВалюте Тогда
			ВалютаДокумента   = ВалютаВзаиморасчетов;
		КонецЕсли;
		
		
		ВалютаВзаиморасчетов = ДоговорКонтрагента.ВалютаВзаиморасчетов;
		СтруктураКурсаВзаиморасчетов = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаВзаиморасчетов, Дата);
		
		ТаблицаПлатежей = РасшифровкаПлатежа.Выгрузить();
		Если НЕ ТипДокументаОснования = ТипДокументаОтчетКомитентуОПродажах
				ИЛИ ТипДокументаОснования = ТипПередачаНМА Тогда
			ТаблицаСуммДокументаОснования = УчетНДС.ПолучитьСуммуДокументаСНДСВРазрезеСтавокНДС(Основание);
			ТаблицаСуммДокументаОснования.Колонки.Сумма.Имя = "СуммаПлатежа";
			
			Если ТипДокументаОснования = ТипДокументаОтчетКомиссионераОПродажах Тогда
				МассивОснование = Новый Массив;
				МассивОснование.Добавить(Основание);
				СоотвествиеРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(
					МассивОснование, "УдержатьВознаграждение, СуммаВознаграждения, СтавкаНДСВознаграждения");
					ПараметрыОснования = СоотвествиеРеквизитов[Основание];
					Если ПараметрыОснования <> Неопределено
						И ПараметрыОснования.УдержатьВознаграждение И ПараметрыОснования.СуммаВознаграждения > 0 Тогда
						СуммаКоррПлатежа= ТаблицаСуммДокументаОснования.Итог("СуммаПлатежа") - Основание.Товары.Итог("СуммаНДСВознаграждения");
						//СуммаКоррНДС	= ТаблицаСуммДокументаОснования.Итог("СуммаНДС") - Основание.Товары.Итог("СуммаНДСВознаграждения");
						//НДС должен рассчитаться пропорционально платежу
						СуммаКоррНДС = 0;
						Если ТаблицаСуммДокументаОснования.Итог("СуммаПлатежа") > 0 Тогда
							СуммаКоррНДС	= ТаблицаСуммДокументаОснования.Итог("СуммаНДС") * (1 - ПараметрыОснования.СуммаВознаграждения/ТаблицаСуммДокументаОснования.Итог("СуммаПлатежа"));	
						КонецЕсли;
						
						НоваяКолонкаСумм = ОбщегоНазначенияБПКлиентСервер.РаспределитьПропорционально(СуммаКоррПлатежа,ТаблицаСуммДокументаОснования.ВыгрузитьКолонку("СуммаПлатежа"));
						Если не НоваяКолонкаСумм = Неопределено Тогда
							ТаблицаСуммДокументаОснования.ЗагрузитьКолонку(НоваяКолонкаСумм,"СуммаПлатежа");
						КонецЕсли; 
						
						НоваяКолонкаНДС = ОбщегоНазначенияБПКлиентСервер.РаспределитьПропорционально(СуммаКоррНДС,ТаблицаСуммДокументаОснования.ВыгрузитьКолонку("СуммаНДС"));
						Если не НоваяКолонкаНДС = Неопределено Тогда
							ТаблицаСуммДокументаОснования.ЗагрузитьКолонку(НоваяКолонкаНДС,"СуммаНДС");
						КонецЕсли; 
					КонецЕсли;
				КонецЕсли;
		Иначе
			ТаблицаСуммДокументаОснования = Новый ТаблицаЗначений();
			ТаблицаСуммДокументаОснования.Колонки.Добавить("СуммаПлатежа", ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповЧисла(15, 2));
			ТаблицаСуммДокументаОснования.Колонки.Добавить("СтавкаНДС",    Новый ОписаниеТипов("ПеречислениеСсылка.СтавкиНДС"));
			ТаблицаСуммДокументаОснования.Колонки.Добавить("СуммаНДС",     ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповЧисла(15, 2));
			СтрокаТаблицыСумм = ТаблицаСуммДокументаОснования.Добавить();
			Если ТипДокументаОснования = ТипДокументаОтчетКомитентуОПродажах Тогда
				СтрокаТаблицыСумм.СуммаПлатежа = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Основание, "СуммаВознаграждения");
				СтрокаТаблицыСумм.СтавкаНДС    = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Основание, "СтавкаНДСВознаграждения");
				СтрокаТаблицыСумм.СуммаНДС     = Основание.Товары.Итог("СуммаНДСВознаграждения");
			ИначеЕсли ТипДокументаОснования = ТипПередачаНМА Тогда
				СтрокаТаблицыСумм.СуммаПлатежа = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Основание, "СуммаДокумента");
				СтрокаТаблицыСумм.СтавкаНДС    = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Основание, "СтавкаНДС");
				СтрокаТаблицыСумм.СуммаНДС     = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Основание, "СуммаНДС");
			КонецЕсли;
		КонецЕсли;
		
		ОбщегоНазначенияБПВызовСервера.ЗагрузитьВТаблицуЗначений(ТаблицаСуммДокументаОснования, ТаблицаПлатежей);
		Если ТаблицаПлатежей.Количество() = 0 Тогда
			ТаблицаПлатежей.Добавить();
		КонецЕсли;
		ТаблицаПлатежей.ЗаполнитьЗначения(ДоговорКонтрагента,                     "ДоговорКонтрагента");
		ТаблицаПлатежей.ЗаполнитьЗначения(СтруктураКурсаВзаиморасчетов.Курс,      "КурсВзаиморасчетов");
		ТаблицаПлатежей.ЗаполнитьЗначения(СтруктураКурсаВзаиморасчетов.Кратность, "КратностьВзаиморасчетов");
		ДанныеДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДоговорКонтрагента, "ВедениеВзаиморасчетов");
		Если ДанныеДоговора.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоРасчетнымДокументам Тогда
			СделкаВОсновании = Неопределено;
			Если ТипДокументаОснования = ТипДокументаОтчетКомиссионераОПродажах Тогда
				СделкаВОсновании = Основание.СделкаПоРеализации;
			ИначеЕсли ОбщегоНазначенияБП.ЕстьРеквизитДокумента("Сделка", Основание.Метаданные()) Тогда
				СделкаВОсновании = Основание.Сделка;
			КонецЕсли; 
			ТаблицаПлатежей.ЗаполнитьЗначения(УправлениеВзаиморасчетами.ОпределитьДокументРасчетовСКонтрагентом(Основание,СделкаВОсновании),"Сделка");
		КонецЕсли;
		
		ТаблицаПлатежей.ЗагрузитьКолонку(ТаблицаПлатежей.ВыгрузитьКолонку("СуммаПлатежа"), "СуммаВзаиморасчетов");
		
		Для каждого СтрокаПлатеж Из ТаблицаПлатежей Цикл
			ПроверкаКурсовВалют(СтрокаПлатеж);
		КонецЦикла;
		
		Если ТипДокументаОснования = ТипДокументаОтчетКомиссионераОПродажах Тогда
			ТаблицаПлатежей.ЗаполнитьЗначения(
				ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Основание, "СчетУчетаРасчетовСКонтрагентом"), "СчетУчетаРасчетовСКонтрагентом");
			ТаблицаПлатежей.ЗаполнитьЗначения(
				ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Основание, "СчетУчетаРасчетовПоАвансамПолученным"), "СчетУчетаРасчетовПоАвансам");
		ИначеЕсли ТипДокументаОснования = ТипДокументаОтчетКомитентуОПродажах Тогда
			ТаблицаПлатежей.ЗаполнитьЗначения(
				ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Основание, "СчетУчетаРасчетовПоВознаграждению"),    "СчетУчетаРасчетовСКонтрагентом") ;
			ТаблицаПлатежей.ЗаполнитьЗначения(
				ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Основание, "СчетУчетаРасчетовПоАвансамПолученным"), "СчетУчетаРасчетовПоАвансам") ;
			ИначеЕсли ТипДокументаОснования = ТипДокументаСчетНаОплатуПокупателю
				  ИЛИ (ИНАГРО_ОбщийВызовСервераПовтИсп.ЕстьБСПУ() И Основание.Метаданные().Имя = "ИНАГРО_СчетНаОплатуПокупателюБиологическихАктивов") Тогда // ИНАГРО
			ТаблицаПлатежей.ЗаполнитьЗначения(СчетаУчета.СчетРасчетовПокупателя, "СчетУчетаРасчетовСКонтрагентом") ;
			ТаблицаПлатежей.ЗаполнитьЗначения(СчетаУчета.СчетАвансовПокупателя,  "СчетУчетаРасчетовПоАвансам") ;
		Иначе
			ТаблицаПлатежей.ЗаполнитьЗначения(
				ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Основание, "СчетУчетаРасчетовСКонтрагентом"), "СчетУчетаРасчетовСКонтрагентом");
			ТаблицаПлатежей.ЗаполнитьЗначения(
				ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Основание, "СчетУчетаРасчетовПоАвансам"), "СчетУчетаРасчетовПоАвансам");
		КонецЕсли;
		
		ТаблицаПлатежей.ЗаполнитьЗначения(СчетаУчета.СчетУчетаНДСПродаж, 				"СчетУчетаНДС");
		ТаблицаПлатежей.ЗаполнитьЗначения(СчетаУчета.СчетУчетаНДСПродажПодтвержденный,  "СчетУчетаНДСПодтвержденный");
		ТаблицаПлатежей.ЗаполнитьЗначения(СчетаУчета.НалоговоеНазначениеПродаж, 		"НалоговоеНазначение");
		ТаблицаПлатежей.ЗаполнитьЗначения(СчетаУчета.Амортизируется,					"Амортизируется");
		
		РасшифровкаПлатежа.Загрузить(ТаблицаПлатежей);
		СуммаДокумента = РасшифровкаПлатежа.Итог("СуммаПлатежа");
		СтрокаПлатеж   = РасшифровкаПлатежа[0];
		
	ИначеЕсли ТипДокументаОснования = ТипДокументаРасходныйКассовыйОрдер Тогда
		
		ДанныеОснования = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Основание, "ВидОперации, ВалютаДокумента,
			|СуммаДокумента, СтатьяДвиженияДенежныхСредств, СубконтоДт1, СубконтоДт2, СубконтоДт3,
			|СчетУчетаРасчетовСКонтрагентом, СчетКасса");
		
		Если ДанныеОснования.ВидОперации <> Перечисления.ВидыОперацийРКО.ИнкассацияДенежныхСредств Тогда
			ОписаниеИсключения = НСтр("ru='Документ ""Поступление на банковский счет""
|вводится только на основании расходного кассового ордера
|с видом операции ""%1"".';uk='Документ ""Надходження на банківський рахунок""
|вводиться тільки на підставі видаткового касового ордера
|з видом операції ""%1"".'");
			ОписаниеИсключения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ОписаниеИсключения, Перечисления.ВидыОперацийРКО.ИнкассацияДенежныхСредств);
			
			ВызватьИсключение ОписаниеИсключения;
		КонецЕсли;
		
		ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ИнкассацияДенежныхСредств;
		
		СчетУчетаРасчетовСКонтрагентом = ДанныеОснования.СчетУчетаРасчетовСКонтрагентом;
		СубконтоКт1 = ДанныеОснования.СубконтоДт1;
		СубконтоКт2 = ДанныеОснования.СубконтоДт2;
		СубконтоКт3 = ДанныеОснования.СубконтоДт3;
		
		СтатьяДвиженияДенежныхСредств = ДанныеОснования.СтатьяДвиженияДенежныхСредств;
		
		СуммаДокумента = ДанныеОснования.СуммаДокумента;
		
		Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеОснования.СчетКасса, "Валютный") Тогда
			СчетБанк = ПланыСчетов.Хозрасчетный.ТекущиеСчетаВИностраннойВалюте;
			ВалютаДокумента = ДанныеОснования.ВалютаДокумента;
		Иначе
			СчетБанк = ПланыСчетов.Хозрасчетный.ТекущиеСчетаВНациональнойВалюте;
			ВалютаДокумента = ДанныеОснования.ВалютаДокумента;
		КонецЕсли;
		
		УчетДенежныхСредствБП.УстановитьБанковскийСчет(СчетОрганизации, Организация, ВалютаДокумента, Истина);
		
		ТаблицаПлатежей = РасшифровкаПлатежа.Выгрузить();
		
		СуммаДокументаОснования = Новый ТаблицаЗначений();
		СуммаДокументаОснования.Колонки.Добавить("СуммаПлатежа",
			ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповЧисла(15, 2));
		СуммаДокументаОснования.Колонки.Добавить("СтатьяДвиженияДенежныхСредств",
			Новый ОписаниеТипов("СправочникСсылка.СтатьиДвиженияДенежныхСредств"));
		СуммаДокументаОснования.Колонки.Добавить("СчетУчетаРасчетовСКонтрагентом",
			Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
		СуммаДокументаОснования.Колонки.Добавить("СубконтоКт1");
		СуммаДокументаОснования.Колонки.Добавить("СубконтоКт2");
		СуммаДокументаОснования.Колонки.Добавить("СубконтоКт3");
		
		СтрокаТаблицыСумм = СуммаДокументаОснования.Добавить();
		СтрокаТаблицыСумм.СуммаПлатежа = ДанныеОснования.СуммаДокумента;
		СтрокаТаблицыСумм.СтатьяДвиженияДенежныхСредств  = ДанныеОснования.СтатьяДвиженияДенежныхСредств;
		СтрокаТаблицыСумм.СчетУчетаРасчетовСКонтрагентом = ДанныеОснования.СчетУчетаРасчетовСКонтрагентом;
		СтрокаТаблицыСумм.СубконтоКт1                    = СубконтоКт1;
		СтрокаТаблицыСумм.СубконтоКт2                    = СубконтоКт2;
		СтрокаТаблицыСумм.СубконтоКт3                    = СубконтоКт3;
		
		ОбщегоНазначенияБПВызовСервера.ЗагрузитьВТаблицуЗначений(СуммаДокументаОснования, ТаблицаПлатежей);
		РасшифровкаПлатежа.Загрузить(ТаблицаПлатежей);
		
	ИначеЕсли ТипДокументаОснования = ТипДокументаПокупкаПродажаВалюты Тогда
		
		ДанныеОснования = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Основание, "ВидОперации, Банк, Заявка,
			|Валюта, СуммаВалютная, СуммаДокумента");
		
		ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПокупкаПродажаВалюты;
		Контрагент  = ДанныеОснования.Банк;

		Если ЗначениеЗаполнено(ДанныеОснования.Заявка) Тогда
			Если ДанныеОснования.ВидОперации = Перечисления.ВидыОперацийПокупкаПродажаВалюты.ПокупкаВалюты Тогда
				СчетОрганизации = ДанныеОснования.Заявка.СчетВалютный;
			Иначе
				СчетОрганизации = ДанныеОснования.Заявка.СчетГривневый;
			Конецесли;	
		КонецЕсли;

		Если ДанныеОснования.ВидОперации = Перечисления.ВидыОперацийПокупкаПродажаВалюты.ПокупкаВалюты Тогда 
			ВалютаДокумента= ДанныеОснования.Валюта;
			СуммаДокумента = ДанныеОснования.СуммаВалютная;
			СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.ДенежныеСредстваВПутиВИностраннойВалюте;
		Иначе
			ВалютаДокумента= ВалютаРегламентированногоУчета;
			СуммаДокумента = ДанныеОснования.СуммаДокумента;
			СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.ДенежныеСредстваВПутиВНациональнойВалюте;
		КонецЕсли;
		
	ИначеЕсли ТипДокументаОснования = Тип("ДокументСсылка.ИНАГРО_КонвертацияВалюты") Тогда // ИНАГРО
		
		ВидОперации                    = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПрочееПоступлениеБезналичныхДенежныхСредств;
		СуммаДокумента                 = Основание.СуммаВалютнаяПокупаемая;
		Контрагент                     = Основание.Банк;
		ДоговорКонтрагента             = Основание.ДоговорКонтрагента;
		СчетУчетаРасчетовСКонтрагентом = Основание.СчетДоходовКурсоваяРазница;
		СубконтоКт1                    = Основание.Субконто1ДоходовКурсоваяРазница;
		СубконтоКт2                    = Основание.Субконто2ДоходовКурсоваяРазница;
		СубконтоКт3                    = Основание.Субконто3ДоходовКурсоваяРазница;
		ВалютаДокумента                = Основание.ПокупаемаяВалюта;

	ИначеЕсли ТипДокументаОснования = ТипДокументаВозвратТоваровПоставщику
		  ИЛИ ИНАГРО_ОбщийВызовСервераПовтИсп.ЕстьБСПУ() И Основание.Метаданные().Имя = "ИНАГРО_ВозвратБиологическихАктивовПоставщику" Тогда // ИНАГРО
		
		ДанныеОснования = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Основание, "Ссылка, ВалютаДокумента,
			|СуммаДокумента");
		
		ВидОперации 			  = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ВозвратДенежныхСредствПоставщиком;
		СтрокаПлатеж 			  = РасшифровкаПлатежа.Добавить();
		СтрокаПлатеж.Сделка 	  = ДанныеОснования.Ссылка;
		СтрокаПлатеж.СуммаПлатежа = ДанныеОснования.СуммаДокумента;
		СтрокаПлатеж.ДоговорКонтрагента = ДоговорКонтрагента;
		СуммаДокумента 			  = ДанныеОснования.СуммаДокумента;
		
		СтрокаПлатеж.СчетУчетаРасчетовСКонтрагентом = СчетаУчета.СчетРасчетов;
		СтрокаПлатеж.СчетУчетаРасчетовПоАвансам     = СчетаУчета.СчетАвансов;
		
		СтрокаПлатеж.СчетУчетаНДС    				= СчетаУчета.СчетУчетаНДСПриобретений;
		СтрокаПлатеж.СчетУчетаНДСПодтвержденный     = СчетаУчета.СчетУчетаНДСПриобретенийПодтвержденный;
		СтрокаПлатеж.НалоговоеНазначение 			= СчетаУчета.НалоговоеНазначениеПриобретений;
		СтрокаПлатеж.СтавкаНДС		  				= СчетаУчета.СтавкаНДСПриобретений;
		
		ВидРасчетовПоДоговору = БухгалтерскийУчетПереопределяемый.ОпределениеВидаРасчетовПоПараметрамДоговора(
			ДоговорКонтрагента);
		Если ВидРасчетовПоДоговору = Перечисления.ВидыРасчетовПоДоговорам.РасчетыВИностраннойВалюте тогда
			ВалютаДокумента = ДанныеОснования.ВалютаДокумента;
		КонецЕсли;

		СтруктураКурсаВзаиморасчетов = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаДокумента, Дата);
		СтрокаПлатеж.КурсВзаиморасчетов           = СтруктураКурсаВзаиморасчетов.Курс;
		СтрокаПлатеж.КратностьВзаиморасчетов      = СтруктураКурсаВзаиморасчетов.Кратность;
		
		ПересчитатьСуммуНДС(СтрокаПлатеж);
		
		СтрокаПлатеж.СуммаВзаиморасчетов = ДанныеОснования.СуммаДокумента;
		
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ИНАГРО_ЗаявлениеРасчетВФСС") Тогда // ИНАГРО
		
		ВидОперации                    = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПоступлениеСредствОтФСС;
		Организация                    = Основание.Организация;
		СуммаДокумента                 = Основание.ВсегоПоДокументу;		
		СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.РасчетыСГосударственнымиЦелевымиФондами;
		
		Если ЗначениеЗаполнено(Организация) Тогда
			СчетОрганизации = Организация.БанковскийСчетДляРасчетовСФСС;
		Иначе
			СчетОрганизации = Организация.ОсновнойБанковскийСчет;
		КонецЕсли;
		
		НоваяСтрока = ИНАГРО_Заявки.Добавить();
		НоваяСтрока.ЗаявлениеРасчет = Основание;		
				
	ИначеЕсли ТипДокументаОснования = ТипДокументаАвансовыйОтчет Тогда
		
		ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ВозвратДенежныхСредствПодотчетником;
		ФизЛицо  = Основание.ФизЛицо;
		Если ЗначениеЗаполнено(Основание.ВалютаДокумента) Тогда
			ВалютаДокумента = Основание.ВалютаДокумента;
		КонецЕсли;
	
		НоваяСтрока = РасшифровкаПлатежа.Добавить();
		
		СтруктураКурсаДокумента = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаДокумента, Дата);
		НоваяСтрока.КурсВзаиморасчетов           = СтруктураКурсаДокумента.Курс;
		НоваяСтрока.КратностьВзаиморасчетов      = СтруктураКурсаДокумента.Кратность;	

		Запрос = Новый Запрос;
		
		Если НЕ (ВалютаДокумента = ВалютаРегламентированногоУчета) Тогда
	 		Запрос.УстановитьПараметр("СчетРасчетов", ПланыСчетов.Хозрасчетный.РасчетыСПодотчетнымиЛицамиВИностраннойВалюте);
		Иначе
			Запрос.УстановитьПараметр("СчетРасчетов", ПланыСчетов.Хозрасчетный.РасчетыСПодотчетнымиЛицамиВНациональнойВалюте);
		КонецЕсли;
	
		Запрос.УстановитьПараметр("Сотрудник",  Основание.ФизЛицо);
		Запрос.УстановитьПараметр("Организация",Основание.Организация);
		Запрос.УстановитьПараметр("ДатаИтогов", Основание.Дата +1);
		
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	ХозрасчетныйОстатки.Счет,
		|	ХозрасчетныйОстатки."+?(ВалютаДокумента = ВалютаРегламентированногоУчета,"","Валютная")+"СуммаОстатокДт КАК СуммаОстаток
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(&ДатаИтогов, Счет В ИЕРАРХИИ (&СчетРасчетов), ,
		|	                                        Организация = &Организация И Субконто1 = &Сотрудник) КАК ХозрасчетныйОстатки";
        	
		ПредыдущийАванс = Запрос.Выполнить().Выбрать();
		ПредыдущийАванс.Следующий();
		
		Остаток    = ?(ЗначениеЗаполнено(ПредыдущийАванс.СуммаОстаток), ПредыдущийАванс.СуммаОстаток, 0);
		
		СуммаДокумента  = Остаток;
		
		НоваяСтрока.СуммаПлатежа = СуммаДокумента;
		
	КонецЕсли;	
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура - обработчик события "ОбработкаЗаполнения".
//
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)

	ТипДанныхЗаполнения = ТипЗнч(ДанныеЗаполнения);
	Если ДанныеЗаполнения <> Неопределено И ТипДанныхЗаполнения <> Тип("Структура")
			И Метаданные().ВводитсяНаОсновании.Содержит(ДанныеЗаполнения.Метаданные()) Тогда
		ЗаполнитьПоДокументуОснованию(ДанныеЗаполнения);
	КонецЕсли;
	
	ЗаполнениеДокументов.Заполнить(ЭтотОбъект, ДанныеЗаполнения);
	
	//определяем счет банка по валюте
	ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	Если НЕ ЗначениеЗаполнено(ВалютаДокумента) ИЛИ ВалютаДокумента = ВалютаРегламентированногоУчета Тогда
		СчетБанк = ПланыСчетов.Хозрасчетный.ТекущиеСчетаВНациональнойВалюте;
	Иначе
		СчетБанк = ПланыСчетов.Хозрасчетный.ТекущиеСчетаВИностраннойВалюте;
	КонецЕсли;
	
	


КонецПроцедуры // ОбработкаЗаполнения()

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	мУчетнаяПолитика = Новый Структура;
	мУчетнаяПолитика.Вставить("ЕстьНалогНаПрибыльДо2015" , УчетнаяПолитика.ПлательщикНалогаНаПрибыльДо2015(Организация, НачалоМесяца(Дата)));
	мУчетнаяПолитика.Вставить("ЕстьНДС"            , УчетнаяПолитика.ПлательщикНДС(Организация, НачалоМесяца(Дата)));
	
	МассивНепроверяемыхРеквизитов = Новый Массив;
	
	// Отключаем проверку реквизитов шапки
	
	Если ВидОперации <> Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ОплатаПокупателя
			И ВидОперации <> Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ВозвратДенежныхСредствПоставщиком
			И ВидОперации <> Перечисления.ВидыОперацийПоступлениеДенежныхСредств.РасчетыПоКредитамИЗаймам
			И ВидОперации <> Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПрочиеРасчетыСКонтрагентами
			И ВидОперации <> Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПоступленияОтПродажПоПлатежнымКартамИБанковскимКредитам Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Контрагент");
	КонецЕсли;
	
	Если ВидОперации <> Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ВозвратДенежныхСредствПодотчетником Тогда
		
		МассивНепроверяемыхРеквизитов.Добавить("ФизЛицо");
		
	КонецЕсли;
	
	Если ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПрочееПоступлениеБезналичныхДенежныхСредств Тогда
		Если СчетУчетаРасчетовСКонтрагентом.Пустая() Тогда                                                  
			ТекстСообщения = ОбщегоНазначенияБПКлиентСервер.ПолучитьТекстСообщения("Поле", "Заполнение", НСтр("ru='Счет кредита';uk='Рахунок кредиту'"));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстСообщения,
				ЭтотОбъект,
				"СчетУчетаРасчетовСКонтрагентом",
				"Объект",
				Отказ);
		КонецЕсли;
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПоступленияОтПродажПоПлатежнымКартамИБанковскимКредитам
		И СуммаУслуг <> 0 Тогда
		Если СчетУчетаРасчетовСКонтрагентом.Пустая() Тогда                                                   
			ТекстСообщения = ОбщегоНазначенияБПКлиентСервер.ПолучитьТекстСообщения("Поле", "Заполнение", НСтр("ru='Счет затрат';uk='Рахунок витрат'"));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстСообщения,
				ЭтотОбъект,
				"СчетУчетаРасчетовСКонтрагентом",
				"Объект",
				Отказ);
			КонецЕсли;
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПоступлениеСредствОтФСС Тогда
		Если СчетУчетаРасчетовСКонтрагентом.Пустая() Тогда                                                    
			ТекстСообщения = ОбщегоНазначенияБПКлиентСервер.ПолучитьТекстСообщения("Поле", "Заполнение", НСтр("ru='Счет расчетов с ФСС';uk='Рахунок розрахунків із ФСС'"));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстСообщения,
				ЭтотОбъект,
				"СчетУчетаРасчетовСКонтрагентом",
				"Объект",
				Отказ);
		КонецЕсли;		
	КонецЕсли;
	
	// Отключаем проверку реквизитов ТЧ РасшифровкаПлатежа
	
	МассивНепроверяемыхРеквизитов.Добавить("РасшифровкаПлатежа.Сделка"); // Проверяем построчно
	Если ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ОплатаПокупателя
		ИЛИ ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ВозвратДенежныхСредствПоставщиком
		ИЛИ ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПоступленияОтПродажПоПлатежнымКартамИБанковскимКредитам
		ИЛИ ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ИнкассацияДенежныхСредств Тогда
		
		МассивНепроверяемыхРеквизитов.Добавить("РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом"); // Проверяем построчно
		
	КонецЕсли;
	
	Если  ВидОперации <> Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ОплатаПокупателя
		И ВидОперации <> Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ВозвратДенежныхСредствПоставщиком
		И ВидОперации <> Перечисления.ВидыОперацийПоступлениеДенежныхСредств.РасчетыПоКредитамИЗаймам
		И ВидОперации <> Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПрочиеРасчетыСКонтрагентами Тогда
		
		МассивНепроверяемыхРеквизитов.Добавить("РасшифровкаПлатежа");
		МассивНепроверяемыхРеквизитов.Добавить("РасшифровкаПлатежа.ДоговорКонтрагента");
		МассивНепроверяемыхРеквизитов.Добавить("РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом");
		МассивНепроверяемыхРеквизитов.Добавить("РасшифровкаПлатежа.СуммаПлатежа");
		МассивНепроверяемыхРеквизитов.Добавить("РасшифровкаПлатежа.КурсВзаиморасчетов");
		МассивНепроверяемыхРеквизитов.Добавить("РасшифровкаПлатежа.СуммаВзаиморасчетов");
		МассивНепроверяемыхРеквизитов.Добавить("РасшифровкаПлатежа.СчетУчетаРасчетовПоАвансам");
		МассивНепроверяемыхРеквизитов.Добавить("РасшифровкаПлатежа.КратностьВзаиморасчетов");
		
	КонецЕсли;
	
	Если ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.РасчетыПоКредитамИЗаймам
			ИЛИ ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПрочиеРасчетыСКонтрагентами Тогда
		МассивНепроверяемыхРеквизитов.Добавить("РасшифровкаПлатежа.КурсВзаиморасчетов");
		МассивНепроверяемыхРеквизитов.Добавить("РасшифровкаПлатежа.СуммаВзаиморасчетов");
		МассивНепроверяемыхРеквизитов.Добавить("РасшифровкаПлатежа.СчетУчетаРасчетовПоАвансам");
		МассивНепроверяемыхРеквизитов.Добавить("РасшифровкаПлатежа.КратностьВзаиморасчетов");
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ИнкассацияДенежныхСредств Тогда
		МассивНепроверяемыхРеквизитов.Добавить("РасшифровкаПлатежа.ДоговорКонтрагента");
		МассивНепроверяемыхРеквизитов.Добавить("РасшифровкаПлатежа.КурсВзаиморасчетов");
		МассивНепроверяемыхРеквизитов.Добавить("РасшифровкаПлатежа.СуммаВзаиморасчетов");
		МассивНепроверяемыхРеквизитов.Добавить("РасшифровкаПлатежа.СчетУчетаРасчетовПоАвансам");
		МассивНепроверяемыхРеквизитов.Добавить("РасшифровкаПлатежа.КратностьВзаиморасчетов");
	КонецЕсли;
	
	Если НЕ (ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ОплатаПокупателя
		 ИЛИ ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ВозвратДенежныхСредствПоставщиком
		 ИЛИ ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПрочиеРасчетыСКонтрагентами)
		Или НЕ мУчетнаяПолитика.ЕстьНДС  Тогда
		МассивНепроверяемыхРеквизитов.Добавить("РасшифровкаПлатежа.СчетУчетаНДС");
		МассивНепроверяемыхРеквизитов.Добавить("РасшифровкаПлатежа.СчетУчетаНДСПодтвержденный");
	КонецЕсли;
	
	Если ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ОплатаПокупателя
			ИЛИ ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ВозвратДенежныхСредствПоставщиком
			ИЛИ ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.РасчетыПоКредитамИЗаймам
			ИЛИ ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПрочиеРасчетыСКонтрагентами
			ИЛИ ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ИнкассацияДенежныхСредств
			ИЛИ ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПоступленияОтПродажПоПлатежнымКартамИБанковскимКредитам Тогда
		Если РасшифровкаПлатежа.Итог("СуммаПлатежа") <> СуммаДокумента Тогда
			ТекстСообщения = НСтр("ru='Не совпадают сумма документа и ее расшифровка';uk='Не збігаються сума документа та її розшифровка'");
			ТекстСообщения = ОбщегоНазначенияБПКлиентСервер.ПолучитьТекстСообщения(, "Корректность",
					НСтр("ru='Сумма';uk='Сума'"),,, ТекстСообщения);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, "СуммаДокумента", "Объект", Отказ);
		КонецЕсли;
	КонецЕсли;
	
	Если ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПоступлениеСредствОтФСС Тогда // ИНАГРО
		//Если РасшифровкаПлатежа.Итог("СуммаПоСтатьям") <> СуммаДокумента Тогда
		//	ТекстСообщения = НСтр("ru='Не совпадают сумма документа и ее расшифровка';uk='Не збігаються сума документа та її розшифровка'");
		//	ТекстСообщения = ОбщегоНазначенияБПКлиентСервер.ПолучитьТекстСообщения(, "Корректность",
		//			НСтр("ru='Сумма';uk='Сума'"),,, ТекстСообщения);
		//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, "СуммаДокумента", "Объект", Отказ);
		//КонецЕсли;
	КонецЕсли;
	
	// Построчная проверка заполнения отдельных реквизитов ТЧ РасшифровкаПлатежа
	
	Если ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ОплатаПокупателя
			ИЛИ ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ВозвратДенежныхСредствПоставщиком
			ИЛИ ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПоступленияОтПродажПоПлатежнымКартамИБанковскимКредитам
			ИЛИ ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ИнкассацияДенежныхСредств Тогда
		
		ШаблонТекстаСообщения = ОбщегоНазначенияБПКлиентСервер.ПолучитьТекстСообщения(
			"Колонка", "Заполнение", "%1", "%2", НСтр("ru='Расшифровка платежа';uk='Розшифровка платежу'"));
		
		Для каждого СтрокаПлатежа Из РасшифровкаПлатежа Цикл
			
			Если мУчетнаяПолитика.ЕстьНДС И СтрокаПлатежа.СчетУчетаНДС.Пустая() 
					И НЕ (СтрокаПлатежа.ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.Прочее) 
					И НЕ (ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ИнкассацияДенежныхСредств) Тогда
				
				ТекстСообщения = ОбщегоНазначенияБПКлиентСервер.ПолучитьТекстСообщения(
					"Колонка",
					"Заполнение",      
					НСтр("ru='Счет учета НДС (неподтвержденный)';uk='Рахунок ПДВ (непідтверджений)'"),
					СтрокаПлатежа.НомерСтроки,
					НСтр("ru='Расшифровка платежа';uk='Розшифровка платежу'"));
				Поле = "РасшифровкаПлатежа[" + Формат((СтрокаПлатежа.НомерСтроки - 1), "ЧН=; ЧГ=")+ "].СчетУчетаНДС";
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);	
				
			КонецЕсли;
			
			Если мУчетнаяПолитика.ЕстьНДС И СтрокаПлатежа.СчетУчетаНДСПодтвержденный.Пустая() 
				И НЕ (СтрокаПлатежа.ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.Прочее)
				И НЕ (ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ИнкассацияДенежныхСредств)Тогда
				
				ТекстСообщения = ОбщегоНазначенияБПКлиентСервер.ПолучитьТекстСообщения(
					"Колонка",
					"Заполнение",          
					НСтр("ru='Счет учета НДС н/о (н/к)';uk='Рахунок обліку ПДВ п/з (п/к)'"),
					СтрокаПлатежа.НомерСтроки,
					НСтр("ru='Расшифровка платежа';uk='Розшифровка платежу'"));
				Поле = "РасшифровкаПлатежа[" + Формат((СтрокаПлатежа.НомерСтроки - 1), "ЧН=; ЧГ=")+ "].СчетУчетаНДСПодтвержденный";
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);	
				
			КонецЕсли;
			
			Если  СтрокаПлатежа.НалоговоеНазначение.Пустая()
				И ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ВозвратДенежныхСредствПоставщиком Тогда
				
				ТекстСообщения = ОбщегоНазначенияБПКлиентСервер.ПолучитьТекстСообщения(
					"Колонка",
					"Заполнение",        
					НСтр("ru='Налоговое назначение';uk='Податкове призначення'"),
					СтрокаПлатежа.НомерСтроки,
					НСтр("ru='Расшифровка платежа';uk='Розшифровка платежу'"));
				Поле = "РасшифровкаПлатежа[" + Формат((СтрокаПлатежа.НомерСтроки - 1), "ЧН=; ЧГ=")+ "].НалоговоеНазначение";
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);	
				
			КонецЕсли;
			
			Если ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПоступленияОтПродажПоПлатежнымКартамИБанковскимКредитам Тогда
				Если НЕ ЗначениеЗаполнено(СтрокаПлатежа.ДоговорКонтрагента) Тогда
					ТекстСообщения = ОбщегоНазначенияБПКлиентСервер.ПолучитьТекстСообщения(
						"Колонка",
						"Заполнение",        
						НСтр("ru='Договор контрагента';uk='Договір контрагента'"),
						СтрокаПлатежа.НомерСтроки,
						НСтр("ru='Расшифровка платежа';uk='Розшифровка платежу'"));
					Поле = "РасшифровкаПлатежа[" + Формат((СтрокаПлатежа.НомерСтроки - 1), "ЧН=; ЧГ=")+ "].ДоговорКонтрагента";
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);	
				КонецЕсли;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(СтрокаПлатежа.СчетУчетаРасчетовСКонтрагентом) 
					И ВидОперации <> Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ИнкассацияДенежныхСредств Тогда
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					ШаблонТекстаСообщения, НСтр("ru='Счет расчетов';uk='Рахунок розрахунків'"), СтрокаПлатежа.НомерСтроки);
				Поле = "РасшифровкаПлатежа[" + Формат((СтрокаПлатежа.НомерСтроки - 1), "ЧН=; ЧГ=")+ "].СчетУчетаРасчетовСКонтрагентом";
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
			ИначеЕсли НЕ ЗначениеЗаполнено(СтрокаПлатежа.СчетУчетаРасчетовСКонтрагентом) 
					И (ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ИнкассацияДенежныхСредств) Тогда
				ТекстСообщения = ОбщегоНазначенияБПКлиентСервер.ПолучитьТекстСообщения(
					"Колонка",
					"Заполнение",     
					НСтр("ru='Счет кредита';uk='Рахунок кредиту'"),
					СтрокаПлатежа.НомерСтроки,
					НСтр("ru='Расшифровка платежа';uk='Розшифровка платежу'"));
				Поле = "РасшифровкаПлатежа[" + Формат((СтрокаПлатежа.НомерСтроки - 1), "ЧН=; ЧГ=")+ "].СчетУчетаРасчетовСКонтрагентом";
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если НЕ СчетБанк.Валютный Тогда
		МассивНепроверяемыхРеквизитов.Добавить("ВалютаДокумента");
	КонецЕсли;
	
	ХарактерЗатрат = УправлениеПроизводствомВызовСервера.ПолучитьХарактерЗатратПоСчетуЗатрат(СчетУчетаРасчетовСКонтрагентом,,Дата);
	
	Если НЕ (ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПоступленияОтПродажПоПлатежнымКартамИБанковскимКредитам 
		     И мУчетнаяПолитика.ЕстьНалогНаПрибыльДо2015 
			 И ХарактерЗатрат = "Затраты") Тогда	
		МассивНепроверяемыхРеквизитов.Добавить("НалоговоеНазначениеПлатежныеКартыУслуги");
	КонецЕсли;
	
	Если НЕ (ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПрочееПоступлениеБезналичныхДенежныхСредств
			 И мУчетнаяПолитика.ЕстьНалогНаПрибыльДо2015
		     И СчетУчетаРасчетовСКонтрагентом.НалоговыйУчет) Тогда
		
		МассивНепроверяемыхРеквизитов.Добавить("НалоговоеНазначениеПриПрочемПоступлении");
		
	КонецЕсли;
	
	Если  ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ВозвратДенежныхСредствПоставщиком
		И мУчетнаяПолитика.ЕстьНалогНаПрибыльДо2015 Тогда
		
		Для каждого СтрокаПлатежа  Из РасшифровкаПлатежа Цикл
			Если   СтрокаПлатежа.ВозвратАвансаДо01042011НУ И НЕ ЗначениеЗаполнено(СтрокаПлатежа.СтатьяПоВозвратуАвансаДо2011НУ) Тогда
				
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Для договора ""%1"" не указана статья по возврату аванса до 01.04.2011!';uk='Для договору ""%1"" не зазначена стаття по поверненню аванса до 01.04.2011!'"), Строка(СтрокаПлатежа.ДоговорКонтрагента));
				Поле = "РасшифровкаПлатежа[" + Формат((СтрокаПлатежа.НомерСтроки - 1), "ЧН=; ЧГ=")+ "].ДоговорКонтрагента";
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, Режим)

	// ПОДГОТОВКА ПРОВЕДЕНИЯ ПО ДАННЫМ ДОКУМЕНТА

	ПроведениеСервер.ПодготовитьНаборыЗаписейКПроведению(ЭтотОбъект);
	Если РучнаяКорректировка Тогда
		Возврат;
	КонецЕсли;

	// Заголовок для сообщений об ошибках проведения.
	Заголовок = НСтр("ru='Проведение документа ""';uk='Проведення документа ""'") + СокрЛП(Ссылка) + """: ";
	
	ЕстьРасчетыСКонтрагентами	 = УчетДенежныхСредствКлиентСервер.ЕстьРасчетыСКонтрагентами(ВидОперации);
	ЕстьРасчетыПоКредитам    	 = УчетДенежныхСредствКлиентСервер.ЕстьРасчетыПоКредитам(ВидОперации);
	ЕстьРасчетыПоПлатежнымКартам = УчетДенежныхСредствКлиентСервер.ЕстьРасчетыПоПлатежнымКартам(ВидОперации);

	СтруктураШапкиДокумента = ОбщегоНазначенияРед12.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	
	СтруктураШапкиДокумента.Вставить("ЕстьНалогНаПрибыльДо2015", УчетнаяПолитика.ПлательщикНалогаНаПрибыльДо2015(СтруктураШапкиДокумента.Организация,СтруктураШапкиДокумента.Дата));
	СтруктураШапкиДокумента.Вставить("ЕстьНДС", УчетнаяПолитика.ПлательщикНДС(СтруктураШапкиДокумента.Организация,СтруктураШапкиДокумента.Дата));
	СтруктураШапкиДокумента.Вставить("ЕстьЕдиныйНалог", УчетнаяПолитика.ПлательщикЕдиногоНалога(СтруктураШапкиДокумента.Организация,СтруктураШапкиДокумента.Дата));


	Если ЕстьРасчетыСКонтрагентами ИЛИ ЕстьРасчетыПоКредитам ИЛИ ЕстьРасчетыПоПлатежнымКартам тогда

		//Проверим на возможность проведения в БУ и НУ
		Для каждого СтрокаОплаты из РасшифровкаПлатежа Цикл

			УправлениеВзаиморасчетами.ПроверкаВозможностиПроведенияВ_БУ_НУ(СтруктураШапкиДокумента,СтрокаОплаты.ДоговорКонтрагента,
		    Отказ, Заголовок,НСтр("ru='Строка ';uk='Рядок '")+СтрокаОплаты.НомерСтроки+" - ");

		КонецЦикла;

	КонецЕсли;

	// Движения по документу
	Если НЕ Отказ Тогда
		ДвиженияПоРегистрам(Режим, Отказ, Заголовок, СтруктураШапкиДокумента);
	КонецЕсли;
	
	Движения.Хозрасчетный.ВыполнитьДействияПередЗаписьюДвижений();
						
	ПроведениеСервер.ПодготовитьНаборыЗаписейКЗаписиДвижений(ЭтотОбъект);
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКОтменеПроведения(ЭтотОбъект);
	Движения.Записать();

КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ УчетнаяПолитика.ПлательщикНалогаНаПрибыльДо2015(Организация, Дата) Тогда
		НалоговоеНазначениеПлатежныеКартыУслуги = Неопределено;
	КонецЕсли;
	
	Если Документы.ПоступлениеНаРасчетныйСчет.ЕстьРасшифровкаПлатежа(ВидОперации)
		И РасшифровкаПлатежа.Количество() > 0 Тогда
		ДоговорКонтрагента = РасшифровкаПлатежа[0].ДоговорКонтрагента;
	Иначе
		ДоговорКонтрагента = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьЗапросДляДвиженийПоРасчетамФСС(СтруктураШапкиДокумента) // ИНАГРО
	
	//Запрос = Новый Запрос;
	//Запрос.Текст = "ВЫБРАТЬ
	//|	ПоступлениеНаРасчетныйСчет.СтатьяРасчетовСФСС,
	//|	ПоступлениеНаРасчетныйСчет.СуммаПоСтатьям
	//|ИЗ
	//|	Документ.ПоступлениеНаРасчетныйСчет.РасшифровкаПлатежа КАК ПоступлениеНаРасчетныйСчет
	//|ГДЕ
	//|	ПоступлениеНаРасчетныйСчет.Ссылка = &Ссылка";
	//
	//Запрос.УстановитьПараметр("Ссылка",СтруктураШапкиДокумента.Ссылка );
	//
	//Результат = Запрос.Выполнить();
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ПоступлениеНаРасчетныйСчетИНАГРО_Заявки.ЗаявлениеРасчет.Ссылка КАК ЗаявлениеРасчетСсылка,
		|	ИНАГРО_ВзаиморасчетыПоНачислениямЗаСчетФСС.Организация КАК Организация,
		|	ИНАГРО_ВзаиморасчетыПоНачислениямЗаСчетФСС.ПериодВзаиморасчетов КАК ПериодВзаиморасчетов,
		|	ИНАГРО_ВзаиморасчетыПоНачислениямЗаСчетФСС.СтатьяРасчетовСФСС КАК СтатьяРасчетовСФСС,
		|	ИНАГРО_ВзаиморасчетыПоНачислениямЗаСчетФСС.Сотрудник КАК Сотрудник,
		|	ИНАГРО_ВзаиморасчетыПоНачислениямЗаСчетФСС.СчетУчета КАК СчетУчета,
		|	ИНАГРО_ВзаиморасчетыПоНачислениямЗаСчетФСС.Сумма КАК Сумма,
		|	ИНАГРО_ВзаиморасчетыПоНачислениямЗаСчетФСС.Документ КАК Документ,
		|	ИНАГРО_ВзаиморасчетыПоНачислениямЗаСчетФСС.Сотрудник.ФизическоеЛицо КАК ФизическоеЛицо
		|ИЗ
		|	Документ.ПоступлениеНаРасчетныйСчет.ИНАГРО_Заявки КАК ПоступлениеНаРасчетныйСчетИНАГРО_Заявки
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ИНАГРО_ВзаиморасчетыПоНачислениямЗаСчетФСС КАК ИНАГРО_ВзаиморасчетыПоНачислениямЗаСчетФСС
		|		ПО ПоступлениеНаРасчетныйСчетИНАГРО_Заявки.ЗаявлениеРасчет.Ссылка = ИНАГРО_ВзаиморасчетыПоНачислениямЗаСчетФСС.Регистратор
		|ГДЕ
		|	ПоступлениеНаРасчетныйСчетИНАГРО_Заявки.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("ССылка", СтруктураШапкиДокумента.Ссылка);	
	
	Результат = Запрос.Выполнить();

	Возврат Результат;
	
КонецФункции

Функция ПолучитьЗапросДляДвиженийПоИнкасации(СтруктураШапкиДокумента)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ТаблицаРасшифровкаПлатежа.НомерСтроки КАК НомерСтроки,
	|	ТаблицаРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
	|	ТаблицаРасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом КАК СчетКт,
	|	ТаблицаРасшифровкаПлатежа.СубконтоКт1 КАК СубконтоКт1,
	|	ТаблицаРасшифровкаПлатежа.СубконтоКт2 КАК СубконтоКт2,
	|	ТаблицаРасшифровкаПлатежа.СубконтоКт3 КАК СубконтоКт3,
	|	ТаблицаРасшифровкаПлатежа.СуммаПлатежа КАК ВалютнаяСумма
	|ИЗ
	|	Документ.ПоступлениеНаРасчетныйСчет.РасшифровкаПлатежа КАК  ТаблицаРасшифровкаПлатежа
	|
	|ГДЕ
	|	ТаблицаРасшифровкаПлатежа.Ссылка = &Ссылка
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Запрос.УстановитьПараметр("Ссылка",СтруктураШапкиДокумента.Ссылка );
	
	Результат = Запрос.Выполнить();
	
	Возврат Результат;	
КонецФункции

Процедура ПриКопировании(ОбъектКопирования)

	Дата = НачалоДня(ОбщегоНазначенияБП.ПолучитьРабочуюДату());
	Ответственный = Пользователи.ТекущийПользователь();

	ДокументОснование = Неопределено;
	
КонецПроцедуры

Процедура РассчитатьСуммуЗаявок() Экспорт // ИНАГРО
	
	Записать();
	
	Сумма = 0;
	
	Запрос = Новый Запрос;	
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЕСТЬNULL(ПоступлениеНаРасчетныйСчетИНАГРО_Заявки.ЗаявлениеРасчет.ВсегоПоДокументу, 0) КАК Сумма
		|ИЗ
		|	Документ.ПоступлениеНаРасчетныйСчет.ИНАГРО_Заявки КАК ПоступлениеНаРасчетныйСчетИНАГРО_Заявки
		|ГДЕ
		|	ПоступлениеНаРасчетныйСчетИНАГРО_Заявки.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если ЗначениеЗаполнено(Выборка.Сумма) Тогда
	   		Сумма = Сумма + Выборка.Сумма;
		КонецЕсли;
		
	КонецЦикла;
	
	СуммаДокумента = Сумма;
	
КонецПроцедуры

мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
#КонецЕсли

