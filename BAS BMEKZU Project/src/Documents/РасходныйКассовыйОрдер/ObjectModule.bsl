#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	// Текущие курс и кратность валюты документа для расчетов
	Перем КурсДокумента;
	Перем КратностьДокумента;
	
	Перем мВалютаРегламентированногоУчета;
	
	// Хранят группировочные признаки вида операции
	Перем ЕстьРасчетыСКонтрагентами;
	Перем ЕстьРасчетыПоКредитам;
	
	////////////////////////////////////////////////////////////////////////////////
	// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ
	//
	
	
	// Заполняет документ на основании приходного кассового ордера\
	//
	Процедура ЗаполнитьПоПКО()
		
		Если ДокументОснование.ПоОбособленномуПодразделению Тогда
			
			ПоОбособленномуПодразделению = Истина;
			ОбособленноеПодразделениеОрганизации = ДокументОснование.ОбособленноеПодразделениеОрганизации;
			
		КонецЕсли;
		
		ВидОперацииДокументаОснования = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОснование, "ВидОперации");
		
		Если ВидОперацииДокументаОснования = Перечисления.ВидыОперацийПКО.ОплатаПокупателя Тогда
			
			ДанныеОснования = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументОснование, "ВалютаДокумента, Дата, Контрагент");
			
			СтруктураКурсаОснования = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ДокументОснование.ВалютаДокумента, ДокументОснование.Дата);
			КурсОснования      = СтруктураКурсаОснования.Курс;
			КратностьОснования = СтруктураКурсаОснования.Кратность;
			
			ВидОперации = Перечисления.ВидыОперацийРКО.ВозвратДенежныхСредствПокупателю;
			Контрагент  = ДокументОснование.Контрагент;
			
			Для Каждого СтрокаОснование ИЗ ДокументОснование.РасшифровкаПлатежа Цикл
				
				СтрокаПлатеж = РасшифровкаПлатежа.Добавить();
				
				СтрокаПлатеж.ДоговорКонтрагента      = СтрокаОснование.ДоговорКонтрагента;
				СтруктураКурсаВзаиморасчетов         = МодульВалютногоУчета.ПолучитьКурсВалюты(СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов, Дата);
				СтрокаПлатеж.КурсВзаиморасчетов      = СтруктураКурсаВзаиморасчетов.Курс;
				СтрокаПлатеж.КратностьВзаиморасчетов = СтруктураКурсаВзаиморасчетов.Кратность;
				
				СтрокаПлатеж.СуммаПлатежа = СтрокаОснование.СуммаПлатежа;
				
				Если НЕ ЗначениеЗаполнено(СтрокаОснование.Сделка) И СтрокаОснование.ДоговорКонтрагента.ВедениеВзаиморасчетов = 
					Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоРасчетнымДокументам Тогда
					СтрокаПлатеж.Сделка = ДокументОснование;
				Иначе
					СтрокаПлатеж.Сделка = СтрокаОснование.Сделка;
				КонецЕсли;
				
				СтрокаПлатеж.СтавкаНДС = СтрокаОснование.СтавкаНДС;
				
				СтрокаПлатеж.СчетУчетаРасчетовПоАвансам        = СтрокаОснование.СчетУчетаРасчетовПоАвансам;
				СтрокаПлатеж.СчетУчетаРасчетовСКонтрагентом    = СтрокаОснование.СчетУчетаРасчетовСКонтрагентом;
				
				СчетаУчета = БухгалтерскийУчетРасчетовСКонтрагентами.ПолучитьСчетаРасчетовСКонтрагентом(Организация, Контрагент, СтрокаПлатеж.ДоговорКонтрагента);
				
				СтрокаПлатеж.СчетУчетаНДС    				= СчетаУчета.СчетУчетаНДСПродаж;
				СтрокаПлатеж.СчетУчетаНДСПодтвержденный     = СчетаУчета.СчетУчетаНДСПродажПодтвержденный;
				СтрокаПлатеж.НалоговоеНазначение 			= СчетаУчета.НалоговоеНазначениеПродаж;
				
			КонецЦикла;
			
			
			Для Индекс = 0 По ДокументОснование.РасшифровкаПлатежа.Количество()-1 Цикл
				
				СтрокаПлатеж    = РасшифровкаПлатежа[Индекс];
				СтрокаОснование = ДокументОснование.РасшифровкаПлатежа[Индекс];
				
				Если (ЗначениеЗаполнено(СтрокаПлатеж.ДоговорКонтрагента))
					И СтрокаПлатеж.ДоговорКонтрагента=СтрокаОснование.ДоговорКонтрагента Тогда // Остался договор из основания
					
					СтрокаПлатеж.СуммаВзаиморасчетов = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаОснование.СуммаПлатежа, 
					ДокументОснование.ВалютаДокумента, 
					СтрокаОснование.ДоговорКонтрагента.ВалютаВзаиморасчетов,
					КурсОснования, СтрокаОснование.КурсВзаиморасчетов, 
					КратностьОснования, СтрокаОснование.КратностьВзаиморасчетов);
					
					СтрокаПлатеж.СуммаПлатежа     = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаПлатеж.СуммаВзаиморасчетов, 
					СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов,
					ВалютаДокумента,
					СтрокаПлатеж.КурсВзаиморасчетов, КурсДокумента, 
					СтрокаПлатеж.КратностьВзаиморасчетов,КратностьДокумента);
					
				Иначе
					
					Если НЕ ЗначениеЗаполнено(СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов) Тогда
						
						СтрокаПлатеж.СуммаВзаиморасчетов=СтрокаПлатеж.СуммаПлатежа;
						СтрокаПлатеж.КурсВзаиморасчетов=1;
						СтрокаПлатеж.КратностьВзаиморасчетов=1;
						
					Иначе
						
						СтрокаПлатеж.СуммаВзаиморасчетов = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаПлатеж.СуммаПлатежа, 
						ВалютаДокумента, 
						СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов,
						КурсДокумента, СтрокаПлатеж.КурсВзаиморасчетов, 
						КратностьДокумента, СтрокаПлатеж.КратностьВзаиморасчетов);
						
					КонецЕсли;
					
				КонецЕсли;
				
				ПересчитатьСуммуНДС(СтрокаПлатеж);
				
			КонецЦикла;
			
			СуммаДокумента = РасшифровкаПлатежа.Итог("СуммаПлатежа");
			
		Иначе
			
			ВидОперации = Перечисления.ВидыОперацийРКО.РасходДенежныхСредствПрочее;
			// Документ не вводится на основании ПКО с другими видами операций
			Возврат;
			
		КонецЕсли;
		
	КонецПроцедуры // ЗаполнитьПоПКОУпр()
	
	Процедура ЗаполнитьПоВедомостьНаВыплатуЗарплаты(Основание)
		
		ВидОперации=Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыПоВедомостям;
		
		// Определим сумму выплаченной заработной платы
		Запрос=Новый Запрос;
		Запрос.УстановитьПараметр("Ссылка",Основание);
		
		Запрос.Текст="ВЫБРАТЬ
		|	ПараметрыОплаты.СчетУчета 			КАК СчетУчета,
		|	СУММА(ПараметрыОплаты.Сумма) 		КАК Сумма
		|ИЗ
		|	Документ.ВедомостьНаВыплатуЗарплаты.ПараметрыОплаты КАК ПараметрыОплаты
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВедомостьНаВыплатуЗарплаты.РаботникиОрганизации КАК РаботникиОрганизации
		|		ПО	РаботникиОрганизации.Сотрудник = ПараметрыОплаты.Сотрудник	
		|			И РаботникиОрганизации.ФизЛицо = ПараметрыОплаты.ФизЛицо
		|			И РаботникиОрганизации.Ссылка = &Ссылка
		|
		|ГДЕ	ПараметрыОплаты.Ссылка = &Ссылка
		|	И	РаботникиОрганизации.ВыплаченностьЗарплаты = ЗНАЧЕНИЕ(Перечисление.ВыплаченностьЗарплаты.Выплачено)
		|	И	РаботникиОрганизации.СпособВыплаты = ЗНАЧЕНИЕ(Перечисление.СпособыВыплатыЗарплаты.ЧерезКассу)
		|	
		|СГРУППИРОВАТЬ ПО
		|	ПараметрыОплаты.СчетУчета
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ПараметрыОплаты.СчетУчета 			КАК СчетУчета,
		|	СУММА(ПараметрыОплаты.КВыплате) 	КАК Сумма
		|ИЗ
		|	Документ.ВедомостьНаВыплатуЗарплатыВКассу.ЗарплатаПодробно КАК ПараметрыОплаты
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОплатаВедомостейНаВыплатуЗарплаты КАК РанееВыплаченныеСуммы
		|		ПО		ПараметрыОплаты.Ссылка = РанееВыплаченныеСуммы.Ведомость
		|			И	ПараметрыОплаты.ФизическоеЛицо = РанееВыплаченныеСуммы.ФизическоеЛицо
		|			И	(РанееВыплаченныеСуммы.Регистратор <> &Ссылка)
		|ГДЕ	ПараметрыОплаты.Ссылка = &Ссылка
		|	И	РанееВыплаченныеСуммы.ФизическоеЛицо ЕСТЬ NULL
		|СГРУППИРОВАТЬ ПО
		|	ПараметрыОплаты.СчетУчета
		|
		|";
		
		РезультатЗапроса = Запрос.Выполнить().Выбрать();
		Пока РезультатЗапроса.Следующий() Цикл
			
			СтрокаВедомость = ВыплатаЗаработнойПлаты.Добавить();
			СтрокаВедомость.Ведомость			= Основание;
			СтрокаВедомость.СчетУчета			= РезультатЗапроса.СчетУчета;
			СтрокаВедомость.СуммаКВыплате		= РезультатЗапроса.Сумма;
			
		КонецЦикла;
		
		СуммаДокумента = ВыплатаЗаработнойПлаты.Итог("СуммаКВыплате");
		
		Организация = Основание.Организация;
		
		
	КонецПроцедуры

//Процедура ЗаполнитьПоВедомостьНаВыплатуЗарплатыРасширенная(Основание)
//	
//	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ВедомостьНаВыплатуЗарплатыВКассу") Тогда
//		ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыПоВедомостям;
//	Иначе
//		ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗарплатыРаздатчиком;
//	КонецЕсли;	

//	// Определим сумму выплаченной заработной платы
//	Запрос=Новый Запрос;
//	Запрос.УстановитьПараметр("Ссылка",Основание);
//	
//	Запрос.Текст="ВЫБРАТЬ
//	|	ПараметрыОплаты.ГруппаУчетаНачислений 			КАК ГруппаУчетаНачислений,
//	|	СУММА(ПараметрыОплаты.КВыплате) 	КАК Сумма
//	|ИЗ
//	|	Документ.ВедомостьНаВыплатуЗарплатыВКассу.Зарплата КАК ПараметрыОплаты
//	|
//	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОплатаВедомостейНаВыплатуЗарплаты КАК РанееВыплаченныеСуммы
//	|		ПО		ПараметрыОплаты.Ссылка = РанееВыплаченныеСуммы.Ведомость
//	|			И	ПараметрыОплаты.ФизическоеЛицо = РанееВыплаченныеСуммы.ФизическоеЛицо
//	|			И	ПараметрыОплаты.ГруппаУчетаНачислений = РанееВыплаченныеСуммы.ГруппаУчетаНачислений
//	|			И	(РанееВыплаченныеСуммы.Регистратор <> &Ссылка)
//	|ГДЕ	ПараметрыОплаты.Ссылка = &Ссылка
//	|	И	РанееВыплаченныеСуммы.ФизическоеЛицо ЕСТЬ NULL
//	|СГРУППИРОВАТЬ ПО
//	|	ПараметрыОплаты.ГруппаУчетаНачислений
//	|
//	|ОБЪЕДИНИТЬ ВСЕ
//	|
//	|ВЫБРАТЬ
//	|	ПараметрыОплаты.ГруппаУчетаНачислений 			КАК ГруппаУчетаНачислений,
//	|	СУММА(ПараметрыОплаты.КВыплате) 	КАК Сумма
//	|ИЗ
//	|	Документ.ВедомостьНаВыплатуЗарплатыРаздатчиком.Зарплата КАК ПараметрыОплаты
//	|
//	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОплатаВедомостейНаВыплатуЗарплаты КАК РанееВыплаченныеСуммы
//	|		ПО		ПараметрыОплаты.Ссылка = РанееВыплаченныеСуммы.Ведомость
//	|			И	ПараметрыОплаты.ФизическоеЛицо = РанееВыплаченныеСуммы.ФизическоеЛицо
//	|			И	ПараметрыОплаты.ГруппаУчетаНачислений = РанееВыплаченныеСуммы.ГруппаУчетаНачислений
//	|			И	(РанееВыплаченныеСуммы.Регистратор <> &Ссылка)
//	|ГДЕ	ПараметрыОплаты.Ссылка = &Ссылка
//	|	И	РанееВыплаченныеСуммы.ФизическоеЛицо ЕСТЬ NULL
//	|СГРУППИРОВАТЬ ПО
//	|	ПараметрыОплаты.ГруппаУчетаНачислений
//	|
//	|";
//	
//	РезультатЗапроса = Запрос.Выполнить().Выбрать();
//	Пока РезультатЗапроса.Следующий() Цикл
//		
//		СтрокаВедомость = ВыплатаЗаработнойПлаты.Добавить();
//		СтрокаВедомость.Ведомость			= Основание;
//		СтрокаВедомость.ГруппаУчетаНачислений			= РезультатЗапроса.ГруппаУчетаНачислений;
//		СтрокаВедомость.СуммаКВыплате		= РезультатЗапроса.Сумма;
//		
//	КонецЦикла;
//	
//	СуммаДокумента = ВыплатаЗаработнойПлаты.Итог("СуммаКВыплате");

//	Организация = Основание.Организация;
//	Если ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗарплатыРаздатчиком Тогда
//		Контрагент = Основание.Раздатчик;
//	КонецЕсли;	

//	
//КонецПроцедуры	
	
	Процедура ЗаполнитьПоДокументуОснованию(Основание)
		
		// Заполнение реквизитов из стандартного набора по документу основанию.
		ЗаполнениеДокументов.ЗаполнитьПоОснованию(ЭтотОбъект, Основание);
		ДокументОснование = Основание;
		
		ТипЗначенияОснования = ТипЗнч(Основание);
		
		// ИНАГРО++
		Если НЕ (ТипЗначенияОснования = Тип("ДокументСсылка.ВедомостьНаВыплатуЗарплаты")
			ИЛИ ТипЗначенияОснования = Тип("ДокументСсылка.АвансовыйОтчет")
			ИЛИ ТипЗначенияОснования = Тип("ДокументСсылка.ВедомостьНаВыплатуЗарплатыВКассу")
			ИЛИ ТипЗначенияОснования = Тип("ДокументСсылка.ИНАГРО_ЗарплатаКВыплатеОрганизаций")
			ИЛИ Основание.Метаданные().Имя = "ИНАГРО_НачислениеДругихВыплат"
			ИЛИ Основание.Метаданные().Имя = "ИНАГРО_ВедомостьВыплатПайщикам") Тогда
		// ИНАГРО--
			
			СчетаУчета = БухгалтерскийУчетРасчетовСКонтрагентами.ПолучитьСчетаРасчетовСКонтрагентом(Основание.Организация, 
			Основание.Контрагент, Основание.ДоговорКонтрагента);
			ВалютаВзаиморасчетовДоговора = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
			Основание.ДоговорКонтрагента, "ВалютаВзаиморасчетов");
			
		КонецЕсли;
		
		ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
		
		Если НЕ ЗначениеЗаполнено(ВалютаДокумента) Тогда
			ВалютаДокумента    = ВалютаРегламентированногоУчета;
			КурсДокумента      = 1;
			КратностьДокумента = 1;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СчетКасса) Тогда
			СчетКасса = ПланыСчетов.Хозрасчетный.КассаВНациональнойВалюте;
		КонецЕсли;
		
		Если ТипЗначенияОснования = Тип("ДокументСсылка.ПоступлениеТоваровУслуг")
			ИЛИ ТипЗначенияОснования = Тип("ДокументСсылка.СчетНаОплатуПоставщика") 	
			ИЛИ ТипЗначенияОснования = Тип("ДокументСсылка.ПоступлениеДопРасходов") 
			ИЛИ ТипЗначенияОснования = Тип("ДокументСсылка.ОтчетКомиссионераОПродажах")
			ИЛИ ТипЗначенияОснования = Тип("ДокументСсылка.ОтчетКомитентуОПродажах")
			ИЛИ ТипЗначенияОснования = Тип("ДокументСсылка.ПоступлениеНМА") 
			ИЛИ ТипЗначенияОснования = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя")
			ИЛИ Основание.Метаданные().Имя = "ИНАГРО_ПоступлениеБиологическихАктивов" // ИНАГРО
			ИЛИ Основание.Метаданные().Имя = "ИНАГРО_ВозвратБиологическихАктивовОтПокупателя"
			ИЛИ Основание.Метаданные().Имя = "ИНАГРО_СчетНаОплатуПоставщикаБиологическихАктивов" Тогда  
			
			Если ТипЗначенияОснования = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя")
				ИЛИ Основание.Метаданные().Имя = "ИНАГРО_ВозвратБиологическихАктивовОтПокупателя" Тогда // ИНАГРО
				ВидОперации = Перечисления.ВидыОперацийРКО.ВозвратДенежныхСредствПокупателю;
			Иначе
				ВидОперации = Перечисления.ВидыОперацийРКО.ОплатаПоставщику;
			КонецЕсли; 
			
			Контрагент = Основание.Контрагент;
			ДоговорКонтрагента = Основание.ДоговорКонтрагента;
			ВидРасчетовПоДоговору = БухгалтерскийУчетПереопределяемый.ОпределениеВидаРасчетовПоПараметрамДоговора(ДоговорКонтрагента);
			Если ВидРасчетовПоДоговору = Перечисления.ВидыРасчетовПоДоговорам.РасчетыВИностраннойВалюте Тогда
				ВалютаДокумента = ВалютаВзаиморасчетовДоговора;
			Иначе
				ВалютаДокумента = ВалютаРегламентированногоУчета;
			КонецЕсли;
			
			СтруктураКурсаДокумента = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаДокумента, Дата);
			КурсДокумента           = СтруктураКурсаДокумента.Курс;
			КратностьДокумента      = СтруктураКурсаДокумента.Кратность;
			
			СтруктураКурсаВзаиморасчетов = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаВзаиморасчетовДоговора, Дата);
			
			ТаблицаПлатежей = РасшифровкаПлатежа.Выгрузить();
			
			Если ТипЗначенияОснования = Тип("ДокументСсылка.ОтчетКомиссионераОПродажах") Тогда
				СуммаДокументаОснования = Новый ТаблицаЗначений();
				СуммаДокументаОснования.Колонки.Добавить("СуммаПлатежа", ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповЧисла(15, 2));
				СуммаДокументаОснования.Колонки.Добавить("СтавкаНДС",    Новый ОписаниеТипов("ПеречислениеСсылка.СтавкиНДС"));
				СуммаДокументаОснования.Колонки.Добавить("СуммаНДС",     ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповЧисла(15, 2));
				СтрокаТаблицыСумм = СуммаДокументаОснования.Добавить();
				
				СтрокаТаблицыСумм.СуммаПлатежа = Основание.СуммаВознаграждения;
				СтрокаТаблицыСумм.СтавкаНДС    = Основание.СтавкаНДСВознаграждения;
				СтрокаТаблицыСумм.СуммаНДС     = Основание.Товары.Итог("СуммаНДСВознаграждения");
				Если НЕ Основание.СуммаВключаетНДС Тогда
					СтрокаТаблицыСумм.СуммаПлатежа = СтрокаТаблицыСумм.СуммаПлатежа+СтрокаТаблицыСумм.СуммаНДС;
				КонецЕсли;
			Иначе
				СуммаДокументаОснования = УчетНДС.ПолучитьСуммуДокументаСНДСВРазрезеСтавокНДС(Основание);
				СуммаДокументаОснования.Колонки.Сумма.Имя = "СуммаПлатежа";
				Если ТипЗначенияОснования = Тип("ДокументСсылка.ОтчетКомитентуОПродажах") и Основание.УдержатьВознаграждение тогда
					СуммаКоррПлатежа= СуммаДокументаОснования.Итог("СуммаПлатежа") - Основание.СуммаВознаграждения;
					СуммаКоррНДС	= СуммаДокументаОснования.Итог("СуммаНДС") - Основание.Товары.Итог("СуммаНДСВознаграждения");
					
					НоваяКолонкаСумм = ОбщегоНазначенияБПКлиентСервер.РаспределитьПропорционально(СуммаКоррПлатежа,СуммаДокументаОснования.ВыгрузитьКолонку("СуммаПлатежа"));
					Если не НоваяКолонкаСумм = Неопределено Тогда
						СуммаДокументаОснования.ЗагрузитьКолонку(НоваяКолонкаСумм,"СуммаПлатежа");
					КонецЕсли; 
					
					НоваяКолонкаНДС = ОбщегоНазначенияБПКлиентСервер.РаспределитьПропорционально(СуммаКоррНДС,СуммаДокументаОснования.ВыгрузитьКолонку("СуммаНДС"));
					Если не НоваяКолонкаНДС = Неопределено Тогда
						СуммаДокументаОснования.ЗагрузитьКолонку(НоваяКолонкаНДС,"СуммаНДС");
					КонецЕсли; 
				ИначеЕсли ТипЗначенияОснования = Тип("ДокументСсылка.ПоступлениеДопРасходов") Тогда
					Если НЕ (Основание.Сумма = 0 И Основание.СуммаНДС = 0) Тогда
						Если СуммаДокументаОснования.Количество() = 0 Тогда
							СтрокаТаблицыСумм = СуммаДокументаОснования.Добавить();
						Иначе
							СтрокаТаблицыСумм = СуммаДокументаОснования[0];
						КонецЕсли;
						
						СтрокаТаблицыСумм.СуммаПлатежа = СтрокаТаблицыСумм.СуммаПлатежа + Основание.Сумма;
						СтрокаТаблицыСумм.СуммаНДС     = СтрокаТаблицыСумм.СуммаНДС     + Основание.СуммаНДС;
						Если НЕ Основание.СуммаВключаетНДС Тогда
							СтрокаТаблицыСумм.СуммаПлатежа = СтрокаТаблицыСумм.СуммаПлатежа + Основание.СуммаНДС;
						КонецЕсли;
					КонецЕсли;
					
					СуммаДокументаОснования.ЗаполнитьЗначения(Основание.СтавкаНДС, "СтавкаНДС");
				КонецЕсли;
			КонецЕсли;
			
			ОбщегоНазначенияБПВызовСервера.ЗагрузитьВТаблицуЗначений(СуммаДокументаОснования, ТаблицаПлатежей);
			Если ТаблицаПлатежей.Количество() = 0 Тогда
				ТаблицаПлатежей.Добавить();
			КонецЕсли;
			
			ТаблицаПлатежей.ЗаполнитьЗначения(ДоговорКонтрагента,                     "ДоговорКонтрагента");
			ТаблицаПлатежей.ЗаполнитьЗначения(СтруктураКурсаВзаиморасчетов.Курс,      "КурсВзаиморасчетов");
			ТаблицаПлатежей.ЗаполнитьЗначения(СтруктураКурсаВзаиморасчетов.Кратность, "КратностьВзаиморасчетов");
			
			Если Основание.ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоРасчетнымДокументам Тогда
				СделкаВОсновании = Неопределено;
				Если ТипЗначенияОснования = Тип("ДокументСсылка.ОтчетКомиссионераОПродажах") Тогда
					СделкаВОсновании = Основание.СделкаПоПриобретению;
				ИначеЕсли ОбщегоНазначенияБП.ЕстьРеквизитДокумента("Сделка", Основание.Метаданные()) Тогда
					СделкаВОсновании = Основание.Сделка;
				КонецЕсли; 
				ТаблицаПлатежей.ЗаполнитьЗначения(УправлениеВзаиморасчетами.ОпределитьДокументРасчетовСКонтрагентом(Основание,СделкаВОсновании),"Сделка");
			КонецЕсли;
			
			ТаблицаПлатежей.ЗагрузитьКолонку(ТаблицаПлатежей.ВыгрузитьКолонку("СуммаПлатежа"), "СуммаВзаиморасчетов");
			
			Для каждого СтрокаПлатеж Из ТаблицаПлатежей Цикл
				ПроверкаКурсовВалют(СтрокаПлатеж);
			КонецЦикла;
			
			Если ТипЗначенияОснования = Тип("ДокументСсылка.ОтчетКомиссионераОПродажах") Тогда
				ТаблицаПлатежей.ЗаполнитьЗначения(Основание.СчетУчетаРасчетовЗаПосредническиеУслуги, "СчетУчетаРасчетовСКонтрагентом");
				ТаблицаПлатежей.ЗаполнитьЗначения(Основание.СчетУчетаРасчетовПоАвансамВыданным     , "СчетУчетаРасчетовПоАвансам");
				
			ИначеЕсли ТипЗначенияОснования = Тип("ДокументСсылка.ОтчетКомитентуОПродажах") Тогда
				ТаблицаПлатежей.ЗаполнитьЗначения(Основание.СчетУчетаРасчетовСКонтрагентом, 	"СчетУчетаРасчетовСКонтрагентом") ;
				ТаблицаПлатежей.ЗаполнитьЗначения(Основание.СчетУчетаРасчетовПоАвансамВыданным, "СчетУчетаРасчетовПоАвансам") ;
				
			ИначеЕсли НЕ (ТипЗначенияОснования = Тип("ДокументСсылка.СчетНаОплатуПоставщика") ИЛИ
				Основание.Метаданные().Имя = "ИНАГРО_СчетНаОплатуПоставщикаБиологическихАктивов") Тогда // ИНАГРО
				ТаблицаПлатежей.ЗаполнитьЗначения(Основание.СчетУчетаРасчетовСКонтрагентом, "СчетУчетаРасчетовСКонтрагентом");
				ТаблицаПлатежей.ЗаполнитьЗначения(Основание.СчетУчетаРасчетовПоАвансам    , "СчетУчетаРасчетовПоАвансам");
				
			КонецЕсли;
			
			Если ВидОперации = Перечисления.ВидыОперацийРКО.ОплатаПоставщику Тогда
				
				Если ТипЗначенияОснования = Тип("ДокументСсылка.СчетНаОплатуПоставщика")
					ИЛИ Основание.Метаданные().Имя = "ИНАГРО_СчетНаОплатуПоставщикаБиологическихАктивов" Тогда // ИНАГРО
					ТаблицаПлатежей.ЗаполнитьЗначения(СчетаУчета.СчетРасчетов, "СчетУчетаРасчетовСКонтрагентом") ;
					ТаблицаПлатежей.ЗаполнитьЗначения(СчетаУчета.СчетАвансов,  "СчетУчетаРасчетовПоАвансам") ;
				КонецЕсли;
				
				ТаблицаПлатежей.ЗаполнитьЗначения(СчетаУчета.СчетУчетаНДСПриобретений, 				 "СчетУчетаНДС");
				ТаблицаПлатежей.ЗаполнитьЗначения(СчетаУчета.СчетУчетаНДСПриобретенийПодтвержденный, "СчетУчетаНДСПодтвержденный");
				ТаблицаПлатежей.ЗаполнитьЗначения(СчетаУчета.НалоговоеНазначениеПриобретений, 		 "НалоговоеНазначение");
				ТаблицаПлатежей.ЗаполнитьЗначения(СчетаУчета.Амортизируется, 		 				 "Амортизируется");
				
			Иначе
				ТаблицаПлатежей.ЗаполнитьЗначения(СчетаУчета.СчетУчетаНДСПродаж, 				"СчетУчетаНДС");
				ТаблицаПлатежей.ЗаполнитьЗначения(СчетаУчета.СчетУчетаНДСПродажПодтвержденный,  "СчетУчетаНДСПодтвержденный");
				ТаблицаПлатежей.ЗаполнитьЗначения(СчетаУчета.НалоговоеНазначениеПродаж, 		"НалоговоеНазначение");
				
			КонецЕсли;
			
			РасшифровкаПлатежа.Загрузить(ТаблицаПлатежей);
			СуммаДокумента = РасшифровкаПлатежа.Итог("СуммаПлатежа");
			СтрокаПлатеж   = РасшифровкаПлатежа[0];
			
		ИначеЕсли  ТипЗначенияОснования = Тип("ДокументСсылка.ВедомостьНаВыплатуЗарплаты")
			ИЛИ  ТипЗначенияОснования = Тип("ДокументСсылка.ВедомостьНаВыплатуЗарплатыВКассу")
			Тогда
			
			ЗаполнитьПоВедомостьНаВыплатуЗарплаты(Основание);
			
			// ИНАГРО++
		ИначеЕсли ТипЗначенияОснования = Тип("ДокументСсылка.ИНАГРО_ЗарплатаКВыплатеОрганизаций") Тогда
			
			ЗаполнитьПоЗарплатеКВыплатеОрганизации(Основание);
			
		ИначеЕсли Основание.Метаданные().Имя = "ИНАГРО_ВедомостьВыплатПайщикам" Тогда
			
			ЗаполнитьПоВедомостьВыплатПайщикам(Основание);
			
		ИначеЕсли Основание.Метаданные().Имя = "ИНАГРО_НачислениеДругихВыплат" Тогда
			
			ЗаполнитьПоНачислениюДругихВыплат(Основание);
			
			// ИНАГРО--	
		ИначеЕсли ТипЗначенияОснования = Тип("ДокументСсылка.ПриходныйКассовыйОрдер") Тогда
			
			ЗаполнитьПоПКО();
			
		ИначеЕсли ТипЗначенияОснования = Тип("ДокументСсылка.АвансовыйОтчет") Тогда
			
			ВидОперации = Перечисления.ВидыОперацийРКО.ВыдачаДенежныхСредствПодотчетнику;
			Контрагент  = Основание.ФизЛицо;
			
			НоваяСтрока = РасшифровкаПлатежа.Добавить();
			
			СтруктураКурсаДокумента = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаДокумента, Дата);
			НоваяСтрока.КурсВзаиморасчетов           = СтруктураКурсаДокумента.Курс;
			НоваяСтрока.КратностьВзаиморасчетов      = СтруктураКурсаДокумента.Кратность;
			
			Запрос = Новый Запрос;
			
			Если НЕ (ВалютаДокумента = ВалютаРегламентированногоУчета) Тогда
				Запрос.УстановитьПараметр("СчетРасчетов", ПланыСчетов.Хозрасчетный.РасчетыСПодотчетнымиЛицамиВИностраннойВалюте);
			Иначе
				Запрос.УстановитьПараметр("СчетРасчетов", ПланыСчетов.Хозрасчетный.РасчетыСПодотчетнымиЛицамиВНациональнойВалюте);
			КонецЕсли;
			
			Запрос.УстановитьПараметр("Сотрудник",  Основание.ФизЛицо);
			Запрос.УстановитьПараметр("Организация",Основание.Организация);
			Запрос.УстановитьПараметр("ДатаИтогов", Основание.Дата +1);
			
			Запрос.Текст = "
			|ВЫБРАТЬ
			|	ХозрасчетныйОстатки.Счет,
			|	ХозрасчетныйОстатки."+?(ВалютаДокумента = ВалютаРегламентированногоУчета,"","Валютная")+"СуммаОстатокКт КАК СуммаОстаток
			|ИЗ
			|	РегистрБухгалтерии.Хозрасчетный.Остатки(&ДатаИтогов, Счет В ИЕРАРХИИ (&СчетРасчетов), ,
			|	                                        Организация = &Организация И Субконто1 = &Сотрудник) КАК ХозрасчетныйОстатки";
			
			ПредыдущийАванс = Запрос.Выполнить().Выбрать();
			ПредыдущийАванс.Следующий();
			
			Остаток    = ?(ЗначениеЗаполнено(ПредыдущийАванс.СуммаОстаток), ПредыдущийАванс.СуммаОстаток, 0);
			
			СуммаДокумента  = Остаток;
			
			НоваяСтрока.СуммаПлатежа = СуммаДокумента;
			
		КонецЕсли;
		
		НовыеПараметрыПечати = Новый Структура;	
		ЗаполнитьРеквизитыПечати("ВидОперации", ЭтотОбъект, НовыеПараметрыПечати);
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, НовыеПараметрыПечати, "Выдать, Основание, ПоДокументу");
		ЭтотОбъект.Приложение=ЭтотОбъект.Основание;
		Если ВидОперации=Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыПоВедомостям Тогда
			ЭтотОбъект.Выдать = ОпределитьКассираОрганизации();
		КонецЕсли;
		
	КонецПроцедуры
	////////////////////////////////////////////////////////////////////////////////
	// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА
	
	
	// Процедура заполняет реквизиты, используемые для формирования печатной формы (Выдать, 
	// Основание и ПоДокументу). 
	// Параметры:
	//  ЧтоИзменилось - имя реквизита документа
	//
	Процедура ЗаполнитьРеквизитыПечати(ЧтоИзменилось = Неопределено, Знач Объект, НовыеПараметры) Экспорт
		
		// если не передали название реквизита считаем, что это ВидОперации.
		// Как следствие будет проведено заполнение всех реквизитов по-умолчанию.
		Если ЧтоИзменилось = Неопределено Тогда
			
			ЧтоИзменилось = "ВидОперации";
			
		КонецЕсли; 
		
		Если  ВидОперации = Перечисления.ВидыОперацийРКО.ОплатаПоставщику 
			ИЛИ ВидОперации = Перечисления.ВидыОперацийРКО.ВозвратДенежныхСредствПокупателю 
			ИЛИ ВидОперации = Перечисления.ВидыОперацийРКО.РасчетыПоКредитамИЗаймамСКонтрагентами Тогда 
			
			// Выдать
			Если    ЧтоИзменилось = "ВидОперации"  
				ИЛИ ЧтоИзменилось = "Контрагент" Тогда
				
				Выдать = ?(Контрагент.НаименованиеПолное="", Контрагент.Наименование, Контрагент.НаименованиеПолное);
				
			КонецЕсли;
			
			// Основание
			Если    ЧтоИзменилось = "ВидОперации"  
				ИЛИ ЧтоИзменилось = "ДоговорКонтрагента" 
				ИЛИ ЧтоИзменилось = "Сделка" Тогда
				
				Основание = "";	
				
				РасшифровкаКопия = РасшифровкаПлатежа.Выгрузить();
				РасшифровкаКопия.Свернуть("ДоговорКонтрагента, Сделка","");
				РасшифровкаКопия.Сортировать("ДоговорКонтрагента, Сделка");
				
				ТекДоговор = Неопределено;
				
				Для Инд = 0 По РасшифровкаКопия.Количество() - 1 Цикл
					
					СтрокаРасшифровки = РасшифровкаКопия[Инд];
					
					Шапка = Новый Структура();
					Шапка.Вставить("ДоговорКонтрагента", 			СтрокаРасшифровки.ДоговорКонтрагента);
					Шапка.Вставить("ДоговорНаименованиеДляПечати", 	СтрокаРасшифровки.ДоговорКонтрагента.НаименованиеДляПечати);
					Шапка.Вставить("ДоговорДата",  					СтрокаРасшифровки.ДоговорКонтрагента.Дата);
					Шапка.Вставить("ДоговорНомер", 					СтрокаРасшифровки.ДоговорКонтрагента.Номер);
					Шапка.Вставить("Сделка", 						СтрокаРасшифровки.Сделка);	
					
					// Выводим дополнительно информацию о договоре и сделке
					Если НЕ ТекДоговор = СтрокаРасшифровки.ДоговорКонтрагента Тогда
						
						СписокДополнительныхПараметров = "ДоговорНаименованиеДляПечати,";	
						ТекДоговор = СтрокаРасшифровки.ДоговорКонтрагента;
						
					Иначе	
						
						СписокДополнительныхПараметров = "";
						
					КонецЕсли;
					
					Если ЗначениеЗаполнено(Шапка.Сделка) Тогда
						СписокДополнительныхПараметров = СписокДополнительныхПараметров + "Сделка,";
					КонецЕсли;
					
					МассивСтруктурСтрок = ОбщегоНазначенияБПВызовСервера.ДополнительнаяИнформация(Шапка,СписокДополнительныхПараметров,"uk");
					
					Для каждого СтруктураСтроки Из МассивСтруктурСтрок Цикл
						Основание = Основание + СтруктураСтроки.НазваниеПараметра + " " + СтруктураСтроки.ЗначениеПараметра + ", ";
					КонецЦикла;	
					
					
				КонецЦикла;
				
				// обрежем последнюю запятую
				Если Прав(Основание, 2) = ", " Тогда
					Основание = Сред(Основание, 1, СтрДлина(Основание) - 2);
				КонецЕсли;
				
			КонецЕсли;
			
			// ПоДокументу
			Если    ЧтоИзменилось = "Контрагент" 
				ИЛИ ЧтоИзменилось = "ДоговорКонтрагента" 
				ИЛИ ЧтоИзменилось = "ВидОперации" Тогда
				ПоДокументу = ?(Контрагент.ЮридическоеФизическоеЛицо=Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо, Контрагент.ДокументУдостоверяющийЛичность, "");
			КонецЕсли
			
			// Приложение
			// не заполняется ни в одном случае
			
		ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыРаботнику
			ИЛИ ВидОперации = Перечисления.ВидыОперацийРКО.ВыдачаДенежныхСредствПодотчетнику Тогда
			
			Если ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыРаботнику Тогда
				ФизЛицо = Контрагент.ФизическоеЛицо;
			Иначе 
				ФизЛицо = Контрагент;
			КонецЕсли;
			
			// Выдать		
			Если    ЧтоИзменилось = "ВидОперации"  
				ИЛИ ЧтоИзменилось = "Контрагент" Тогда
				
				Выдать = "";	
				
				Запрос=Новый Запрос;
				Запрос.Текст="ВЫБРАТЬ
				|	ФИОФизЛицСрезПоследних.Фамилия КАК Фамилия,
				|	ФИОФизЛицСрезПоследних.Имя КАК Имя,
				|	ФИОФизЛицСрезПоследних.Отчество КАК Отчество
				|ИЗ
				|	РегистрСведений.ФИОФизическихЛиц.СрезПоследних(&Дата, ФизическоеЛицо = &ФизЛицо) КАК ФИОФизЛицСрезПоследних";
				Запрос.УстановитьПараметр("Дата",?(Дата = '00010101', ОбщегоНазначенияБП.ПолучитьРабочуюДату(), Дата));
				Запрос.УстановитьПараметр("ФизЛицо", Физлицо);
				
				Результат=Запрос.Выполнить().Выбрать();
				Если Результат.Следующий() Тогда
					
					Выдать = ?(НЕ ПустаяСтрока(Результат.Фамилия), 
					Результат.Фамилия + ?(НЕ ПустаяСтрока(Результат.Имя)," " + Результат.Имя + " " + ?(НЕ ПустаяСтрока(Результат.Отчество),Результат.Отчество, ""), "")
					,"");
					
				КонецЕсли;
				
			КонецЕсли;
			
			// Основание
			Если    ЧтоИзменилось = "ВидОперации"  
				ИЛИ ЧтоИзменилось = "Ведомость"
				ИЛИ ЧтоИзменилось = "РасчетныйДокумент" Тогда
				
				Основание = "";	
				
				Если ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыРаботнику Тогда
					Основание = "Платіжна відомість ";
					
					Основание = Основание + "№ "+ ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(ПлатежнаяВедомость.Номер) + " від " + Формат(ПлатежнаяВедомость.Дата, "ДФ=dd.MM.yyyy") + ", ";	
					
					// обрежем последнюю запятую
					Если Прав(Основание, 2) = ", " Тогда
						Основание = Сред(Основание, 1, СтрДлина(Основание) - 2);
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;	
			
			// ПоДокументу
			Если    ЧтоИзменилось = "ВидОперации" 
				ИЛИ ЧтоИзменилось = "Контрагент" Тогда
				
				ПоДокументу = "";
				
				Если Не Контрагент.Пустая() Тогда
					
					ДокФизЛица = УчетЗарплаты.ДанныеФизическихЛиц(Организация, ФизЛицо, Дата);
					Если ЗначениеЗаполнено(ДокФизЛица) Тогда
						ПоДокументу = Строка(ДокФизЛица.ВидДокумента) + " серія " +
						ДокФизЛица.Серия       + ", номер " +
						ДокФизЛица.Номер       + ", виданий " +
						Формат(ДокФизЛица.ДатаВыдачи, "ДФ=dd.MM.yyyy")  + " " +
						//ДокФизЛица.Выдан;
						ДокФизЛица.КемВыдан;
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРКО.ВзносНаличнымиВБанк Тогда
			
			// Выдать
			Если    ЧтоИзменилось = "ВидОперации"  
				ИЛИ ЧтоИзменилось = "СчетОрганизации" Тогда
				
				Выдать = "";	
				Если Не СчетОрганизации.Пустая() Тогда
					
					Выдать = "п/р " + СчетОрганизации.НомерСчета + " у " + СчетОрганизации.Банк;
					
				КонецЕсли; 
				
			КонецЕсли;
			
			// Основание
			Если    ЧтоИзменилось = "ВидОперации"  
				ИЛИ ЧтоИзменилось = "ОбъявлениеНаВзносНаличными" Тогда
				
				Основание = "";	
				
			КонецЕсли;		
			
			// ПоДокументу
			Если    ЧтоИзменилось = "ВидОперации" Тогда
				
				ПоДокументу = "";		
				
			КонецЕсли;
			
		ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыПоВедомостям Тогда
			
			// Выдать
			Если    ЧтоИзменилось = "ВидОперации" Тогда
				
				Выдать = "";	
				
			КонецЕсли;
			
			// Основание
			Если    ЧтоИзменилось = "ВидОперации" 
				ИЛИ ЧтоИзменилось = "Ведомость"  Тогда
				
				Основание = "";
				
				Если ВыплатаЗаработнойПлаты.Количество() = 1 Тогда
					Основание = "Платіжна відомість ";
				ИначеЕсли ВыплатаЗаработнойПлаты.Количество() > 1 Тогда
					Основание = "Платіжні відомісті ";
				КонецЕсли;
				
				Для каждого СтрВедомости Из ВыплатаЗаработнойПлаты Цикл
					
					Основание = Основание + "№ "+ ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(СтрВедомости.Ведомость.Номер) + " від " + Формат(СтрВедомости.Ведомость.Дата, "ДФ=dd.MM.yyyy") + ", ";	
					
				КонецЦикла;
				
				// обрежем последнюю запятую
				Если Прав(Основание, 2) = ", " Тогда
					Основание = Сред(Основание, 1, СтрДлина(Основание) - 2);
				КонецЕсли;
				
			КонецЕсли;
			
			// ПоДокументу
			Если    ЧтоИзменилось = "ВидОперации" Тогда
				
				ПоДокументу = "";		
				
			КонецЕсли;
			
		ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРКО.РасходДенежныхСредствПрочее 
			ИЛИ ВидОперации = Перечисления.ВидыОперацийРКО.ИнкассацияДенежныхСредств Тогда
			
			// Выдать
			Если    ЧтоИзменилось = "ВидОперации" Тогда
				
				Выдать = "";	
				
			КонецЕсли;
			
			// Основание
			Если    ЧтоИзменилось = "ВидОперации" Тогда
				
				Основание = "";	
				
			КонецЕсли;
			
			// ПоДокументу
			Если    ЧтоИзменилось = "ВидОперации" Тогда
				
				ПоДокументу = "";		
				
			КонецЕсли;
			
		ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРКО.ИНАГРО_ВыплатаПаевПоВедомостям 
			ИЛИ ВидОперации = Перечисления.ВидыОперацийРКО.ИНАГРО_ВыплатаПаяПайщику    
			ИЛИ ВидОперации = Перечисления.ВидыОперацийРКО.ИНАГРО_ДругиеВыплаты Тогда   
			
			// Основание
			Если    ЧтоИзменилось = "ВидОперации" 
				ИЛИ ЧтоИзменилось = "Ведомость"  Тогда
				
				Основание = "";
				
				Если ВидОперации = Перечисления.ВидыОперацийРКО.ИНАГРО_ВыплатаПаяПайщику Тогда  
					Основание = Основание + "Платіжна відомість № "+ ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(ИНАГРО_ВедомостьВыплатПайщикам.Номер) + " від " + Формат(ИНАГРО_ВедомостьВыплатПайщикам.Дата, "ДФ=dd.MM.yyyy");	
				Иначе	
					Если ВыплатаЗаработнойПлаты.Количество() = 1 Тогда
						Основание = "Платіжна відомість ";
					ИначеЕсли ВыплатаЗаработнойПлаты.Количество() > 1 Тогда
						Основание = "Платіжні відомісті ";
					КонецЕсли;
					
					Для каждого СтрВедомости Из ВыплатаЗаработнойПлаты Цикл
						
						Основание = Основание + "№ "+ ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(СтрВедомости.Ведомость.Номер) + " від " + Формат(СтрВедомости.Ведомость.Дата, "ДФ=dd.MM.yyyy") + ", ";	
						
					КонецЦикла;
					
					// обрежем последнюю запятую
					Если Прав(Основание, 2) = ", " Тогда
						Основание = Сред(Основание, 1, СтрДлина(Основание) - 2);
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
			
			
			// Выдать		
			Если  (ЧтоИзменилось = "ВидОперации"  
				ИЛИ ЧтоИзменилось = "Контрагент") И ВидОперации = Перечисления.ВидыОперацийРКО.ИНАГРО_ВыплатаПаяПайщику Тогда  
				
				Выдать = ?(ЗначениеЗаполнено(Контрагент),Контрагент.Наименование,""); 
				
			КонецЕсли;
			
			Если  ВидОперации = Перечисления.ВидыОперацийРКО.ИНАГРО_ВыплатаПаяПайщику Тогда  
				// ПоДокументу
				Если    ЧтоИзменилось = "ВидОперации" 
					ИЛИ ЧтоИзменилось = "Контрагент" Тогда
					
					ПоДокументу = "";
					
					Если Не Контрагент.Пустая() Тогда
						ПоДокументу = ?(Контрагент.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо, Контрагент.ДокументУдостоверяющийЛичность, "");
					КонецЕсли;
					
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
		НовыеПараметры.Вставить("Выдать",      Выдать);
		НовыеПараметры.Вставить("Основание",   Основание);
		НовыеПараметры.Вставить("ПоДокументу", ПоДокументу);
		
	КонецПроцедуры
	
	
	Процедура УстановитьНазначениеДенежныхСредств() Экспорт
		
		Если ВидОперации = Перечисления.ВидыОперацийРКО.ВыдачаДенежныхСредствПодотчетнику Тогда
			НазначениеДенежныхСредств = Справочники.НазначенияНаличныхДенежныхСредств.Командировка
		ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРКО.ОплатаПоставщику Тогда
			НазначениеДенежныхСредств = Справочники.НазначенияНаличныхДенежныхСредств.ПокупкаТоваров
		ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыПоВедомостям
			или ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыРаботнику Тогда
			НазначениеДенежныхСредств = Справочники.НазначенияНаличныхДенежныхСредств.ОплатаТруда	
		Иначе
			НазначениеДенежныхСредств = Справочники.НазначенияНаличныхДенежныхСредств.Прочее	
		КонецЕсли;	
		
		
	КонецПроцедуры	
	
	Функция ОпределитьКассираОрганизации() Экспорт
		
		ВыдатьПредставление = "";	
		Если НЕ ЗначениеЗаполнено(ОбособленноеПодразделениеОрганизации) Тогда
			Руководители = ОтветственныеЛицаБП.ОтветственныеЛица(Организация, Дата);
		Иначе
			Руководители = ОтветственныеЛицаБП.ОтветственныеЛицаОбособленногоПодразделения(ОбособленноеПодразделениеОрганизации, Дата);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Руководители.КассирФИО) Тогда
			ВыдатьПредставление = ОбщегоНазначенияБПВызовСервера.ПолучитьФамилиюИмяОтчество(Руководители.КассирФИО.Фамилия, Руководители.КассирФИО.Имя, Руководители.КассирФИО.Отчество, Истина); // Кратко
		КонецЕсли;
		Возврат ВыдатьПредставление
		
	КонецФункции
	
	////////////////////////////////////////////////////////////////////////////////
	// ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА
	
	// Проверяет установленные курсы валют документа перед пересчетом сумм
	// Нулевые курсы устанавливаются в 1
	//
	Процедура ПроверкаКурсовВалют(СтрокаПлатеж) Экспорт
		
		
		СтрокаПлатеж.КурсВзаиморасчетов      = ?(СтрокаПлатеж.КурсВзаиморасчетов      = 0, 1, СтрокаПлатеж.КурсВзаиморасчетов);
		СтрокаПлатеж.КратностьВзаиморасчетов = ?(СтрокаПлатеж.КратностьВзаиморасчетов = 0, 1, СтрокаПлатеж.КратностьВзаиморасчетов);
		
	КонецПроцедуры // ПроверкаКурсовВалют()
	
	// Пересчитывает сумму НДС
	//
	// Параметры:
	//  Нет.
	//
	Процедура ПересчитатьСуммуНДС(СтрокаПлатеж) Экспорт
		
		ЗначениеСтавкиНДС     = УчетНДС.ПолучитьСтавкуНДС(СтрокаПлатеж.СтавкаНДС);
		
		СтрокаПлатеж.СуммаНДС = СтрокаПлатеж.СуммаПлатежа * ЗначениеСтавкиНДС / (100 + ЗначениеСтавкиНДС);
		
	КонецПроцедуры // ПересчитатьСуммуНДС()
	
	////////////////////////////////////////////////////////////////////////////////
	//// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА
	
	Процедура ДвиженияПоРегистрам(РежимПроведения, Отказ, Заголовок, СтруктураШапкиДокумента)
		
		// Бухгалтерские проводки документа
		ПроводкиБУ = Движения.Хозрасчетный;
		
		КассаВВалюте = Ложь;
		МоментДокумента = Новый МоментВремени(Дата, Ссылка);
		ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
		
		Если ВалютаДокумента <> ВалютаРегламентированногоУчета Тогда
			КассаВВалюте = Истина;
			Если СтруктураШапкиДокумента.ВестиУчетДенежныхСредствПоОбособленнымПодразделениям Тогда
				УправлениеДенежнымиСредствами.ПроверитьОстатокДенежныхСредств(СтруктураШапкиДокумента.СуммаДокумента, Организация, ВалютаДокумента, МоментДокумента, СтруктураШапкиДокумента.СчетКасса, ОбособленноеПодразделениеОрганизации, Заголовок);
			Иначе
				УправлениеДенежнымиСредствами.ПроверитьОстатокДенежныхСредств(СтруктураШапкиДокумента.СуммаДокумента, Организация, ВалютаДокумента, МоментДокумента, СтруктураШапкиДокумента.СчетКасса, , Заголовок);
			КонецЕсли;
		Иначе
			Если СтруктураШапкиДокумента.ВестиУчетДенежныхСредствПоОбособленнымПодразделениям Тогда
				УправлениеДенежнымиСредствами.ПроверитьОстатокДенежныхСредств(СтруктураШапкиДокумента.СуммаДокумента, Организация, , МоментДокумента, СтруктураШапкиДокумента.СчетКасса, ОбособленноеПодразделениеОрганизации, Заголовок);
			Иначе
				УправлениеДенежнымиСредствами.ПроверитьОстатокДенежныхСредств(СтруктураШапкиДокумента.СуммаДокумента, Организация, , МоментДокумента, СтруктураШапкиДокумента.СчетКасса, , Заголовок);
			КонецЕсли;
		КонецЕсли;
		
		СчетКт = СтруктураШапкиДокумента.СчетКасса;
		
		Если ЕстьРасчетыСКонтрагентами или ЕстьРасчетыПоКредитам Тогда
			
			СтруктураШапкиДокумента.Вставить("КоррСчет", СчетКт);
			Если БухгалтерскийУчетРасчетовСКонтрагентами.ДвижениеДенег(ЭтотОбъект,СтруктураШапкиДокумента,ЕстьРасчетыСКонтрагентами,Отказ,Заголовок,?(ЕстьРасчетыПоКредитам,НСтр("ru='Расчеты по кредитам и займам';uk='Розрахунки за кредитами і позиками'",Локализация.КодЯзыкаИнформационнойБазы()),""))=Ложь тогда
				Возврат;
			КонецЕсли;
			
			// ИНАГРО ++ 	
		ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыПоВедомостям Тогда
			
			СпособОплаты = Перечисления.СпособыВыплатыЗарплаты.ЧерезКассу;
			СчетКассаЗП = ПланыСчетов.Хозрасчетный.КассаВНациональнойВалюте;
			ВыплаченностьЗарплаты = Перечисления.ВыплаченностьЗарплаты.Выплачено;
			
			ИНАГРО_ПроведениеРасчетов.ВыполнитьДвиженияПоЗарплате(Ссылка, Движения, ПроводкиБУ, СчетКассаЗП, СпособОплаты, ВыплаченностьЗарплаты, СчетОрганизации,,,ОбособленноеПодразделениеОрганизации );
			
		ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыРаботнику Тогда
			
			// по конкретному ФизЛицу
			СпособОплаты = Перечисления.СпособыВыплатыЗарплаты.ЧерезКассу;
			СчетКассаЗП = СтруктураШапкиДокумента.СчетКасса;
			ВыплаченностьЗарплаты = Перечисления.ВыплаченностьЗарплаты.Выплачено;
			
			ИНАГРО_ПроведениеРасчетов.ВыполнитьДвиженияПоЗарплате(Ссылка, Движения, ПроводкиБУ, СчетКассаЗП, СпособОплаты, ВыплаченностьЗарплаты, СчетОрганизации, Контрагент, ,ОбособленноеПодразделениеОрганизации );
			
		ИначеЕсли     ВидОперации = Перечисления.ВидыОперацийРКО.ИНАГРО_ВыплатаПаевПоВедомостям 
			ИЛИ ВидОперации = Перечисления.ВидыОперацийРКО.ИНАГРО_ВыплатаПаяПайщику   
			ИЛИ ВидОперации = Перечисления.ВидыОперацийРКО.ИНАГРО_ДругиеВыплаты   
			ИЛИ (ВидОперации = Перечисления.ВидыОперацийРКО.РасходДенежныхСредствПрочее
			И ЭтотОбъект.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.РасчетыАрендыЗемлиИИмущества
			И ИНАГРО_ОбщийВызовСервераПовтИсп.ЕстьБСПУ()) Тогда
			
			Если ВидОперации = Перечисления.ВидыОперацийРКО.ИНАГРО_ВыплатаПаевПоВедомостям 
				ИЛИ ВидОперации = Перечисления.ВидыОперацийРКО.ИНАГРО_ВыплатаПаяПайщику    
				ИЛИ ВидОперации = Перечисления.ВидыОперацийРКО.ИНАГРО_ДругиеВыплаты Тогда   
				ВыплатаПаевПоВедомостям = Истина;
				ПрочийРасход            = Ложь;
			ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРКО.РасходДенежныхСредствПрочее 
				И ЭтотОбъект.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.РасчетыАрендыЗемлиИИмущества Тогда
				ПрочийРасход            = Истина;
				ВыплатаПаевПоВедомостям = Ложь;
			КонецЕсли;
			
			Запрос = Новый Запрос;
			
			Если ВидОперации = Перечисления.ВидыОперацийРКО.ИНАГРО_ВыплатаПаевПоВедомостям Тогда
				
				Ведомость = ВыплатаЗаработнойПлаты.ВыгрузитьКолонку("Ведомость");
				ОбщегоНазначенияБПВызовСервера.УдалитьПовторяющиесяЭлементыМассива(Ведомость);			
				
				Запрос.Текст=
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	СУММА(ВедомостьВыплатПайщикамТЧ.Выплата) КАК Сумма,
				|	ВедомостьВыплатПайщикамТЧ.Ссылка КАК Ведомость,
				|	ВедомостьВыплатПайщикамТЧ.Контрагент КАК Контрагент,
				|	ВедомостьВыплатПайщикамТЧ.ДоговорКонтрагента КАК ДоговорКонтрагента,
				|	ВедомостьВыплатПайщикамТЧ.СчетУчетаРасчетовСКонтрагентом КАК СчетУчета,
				|	ВедомостьВыплатПайщикамТЧ.Ссылка.НачислятьНДФЛ,
				|	ВедомостьВыплатПайщикамТЧ.Ссылка.СтавкаНДФЛ,
				|	ВедомостьВыплатПайщикамТЧ.Ссылка.ВидСтавки,
				|	ВедомостьВыплатПайщикамТЧ.СуммаНДФЛ,
				|	ВедомостьВыплатПайщикамТЧ.Алименты,
				|	ВедомостьВыплатПайщикамТЧ.Ссылка.СтавкаВоенныйСбор,
				|	ВедомостьВыплатПайщикамТЧ.СуммаВС,
				|	ВедомостьВыплатПайщикамТЧ.Ссылка.НетВзаиморасчетовПоНДФЛ
				|ИЗ
				|	Документ.ИНАГРО_ВедомостьВыплатПайщикам.СписокПайщиков КАК ВедомостьВыплатПайщикамТЧ
				|ГДЕ
				|	ВедомостьВыплатПайщикамТЧ.Ссылка В(&Ссылка)
				|	И ВедомостьВыплатПайщикамТЧ.СпособВыплаты = ЗНАЧЕНИЕ(Перечисление.СпособыВыплатыЗарплаты.ЧерезКассу)
				|
				|СГРУППИРОВАТЬ ПО
				|	ВедомостьВыплатПайщикамТЧ.Ссылка,
				|	ВедомостьВыплатПайщикамТЧ.Контрагент,
				|	ВедомостьВыплатПайщикамТЧ.ДоговорКонтрагента,
				|	ВедомостьВыплатПайщикамТЧ.Ссылка.НачислятьНДФЛ,
				|	ВедомостьВыплатПайщикамТЧ.Ссылка.СтавкаНДФЛ,
				|	ВедомостьВыплатПайщикамТЧ.Ссылка.ВидСтавки,
				|	ВедомостьВыплатПайщикамТЧ.СуммаНДФЛ,
				|	ВедомостьВыплатПайщикамТЧ.Алименты,
				|	ВедомостьВыплатПайщикамТЧ.Ссылка.СтавкаВоенныйСбор,
				|	ВедомостьВыплатПайщикамТЧ.СуммаВС,
				|	ВедомостьВыплатПайщикамТЧ.СчетУчетаРасчетовСКонтрагентом,
				|	ВедомостьВыплатПайщикамТЧ.Ссылка.НетВзаиморасчетовПоНДФЛ";
				
				Запрос.УстановитьПараметр("Ссылка",       Ведомость);
				Запрос.УстановитьПараметр("ПустаяСсылка", ПланыСчетов.Хозрасчетный.ПустаяСсылка());
				
			ИначеЕсли  ВидОперации = Перечисления.ВидыОперацийРКО.ИНАГРО_ВыплатаПаяПайщику Тогда 			
				
				Запрос.Текст =
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	СУММА(ВедомостьВыплатПайщикамТЧ.Выплата) КАК Сумма,
				|	ВедомостьВыплатПайщикамТЧ.Ссылка КАК Ведомость,
				|	ВедомостьВыплатПайщикамТЧ.Контрагент КАК Контрагент,
				|	ВедомостьВыплатПайщикамТЧ.ДоговорКонтрагента КАК ДоговорКонтрагента,
				|	ВедомостьВыплатПайщикамТЧ.СчетУчетаРасчетовСКонтрагентом КАК СчетУчета,
				|	ВедомостьВыплатПайщикамТЧ.Ссылка.НачислятьНДФЛ,
				|	ВедомостьВыплатПайщикамТЧ.Ссылка.СтавкаНДФЛ,
				|	ВедомостьВыплатПайщикамТЧ.Ссылка.ВидСтавки,
				|	СУММА(ВедомостьВыплатПайщикамТЧ.СуммаНДФЛ) КАК СуммаНДФЛ,
				|	СУММА(ВедомостьВыплатПайщикамТЧ.Алименты) КАК Алименты,
				|	ВедомостьВыплатПайщикамТЧ.Ссылка.СтавкаВоенныйСбор,
				|	СУММА(ВедомостьВыплатПайщикамТЧ.СуммаВС) КАК СуммаВС,
				|	ВедомостьВыплатПайщикамТЧ.Ссылка.НетВзаиморасчетовПоНДФЛ
				|ИЗ
				|	Документ.ИНАГРО_ВедомостьВыплатПайщикам.СписокПайщиков КАК ВедомостьВыплатПайщикамТЧ
				|ГДЕ
				|	ВедомостьВыплатПайщикамТЧ.СпособВыплаты = ЗНАЧЕНИЕ(Перечисление.СпособыВыплатыЗарплаты.ЧерезКассу)
				|	И ВедомостьВыплатПайщикамТЧ.Контрагент = &Контрагент
				|	И ВедомостьВыплатПайщикамТЧ.ДоговорКонтрагента = &ДоговорКонтрагента
				|	И ВедомостьВыплатПайщикамТЧ.СчетУчетаРасчетовСКонтрагентом = &СчетУчетаРасчетовСКонтрагентом
				|	И ВедомостьВыплатПайщикамТЧ.Ссылка = &Ссылка
				|
				|СГРУППИРОВАТЬ ПО
				|	ВедомостьВыплатПайщикамТЧ.Ссылка,
				|	ВедомостьВыплатПайщикамТЧ.Контрагент,
				|	ВедомостьВыплатПайщикамТЧ.ДоговорКонтрагента,
				|	ВедомостьВыплатПайщикамТЧ.Ссылка.НачислятьНДФЛ,
				|	ВедомостьВыплатПайщикамТЧ.Ссылка.СтавкаНДФЛ,
				|	ВедомостьВыплатПайщикамТЧ.Ссылка.ВидСтавки,
				|	ВедомостьВыплатПайщикамТЧ.Ссылка.СтавкаВоенныйСбор,
				|	ВедомостьВыплатПайщикамТЧ.СчетУчетаРасчетовСКонтрагентом,
				|	ВедомостьВыплатПайщикамТЧ.Ссылка.НетВзаиморасчетовПоНДФЛ";
				
				Запрос.УстановитьПараметр("Ссылка",                         ИНАГРО_ВедомостьВыплатПайщикам);
				Запрос.УстановитьПараметр("Контрагент",                     Контрагент);
				Запрос.УстановитьПараметр("ДоговорКонтрагента",             ДоговорКонтрагента);
				Запрос.УстановитьПараметр("СчетУчетаРасчетовСКонтрагентом", СчетУчетаРасчетовСКонтрагентом);
				
			ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРКО.ИНАГРО_ДругиеВыплаты Тогда
				
				Ведомость = ВыплатаЗаработнойПлаты.ВыгрузитьКолонку("Ведомость");
				ОбщегоНазначенияБПВызовСервера.УдалитьПовторяющиесяЭлементыМассива(Ведомость);			
				
				Запрос.Текст=
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	СУММА(НачислениеДругихВыплатТЧ.КВыдаче) КАК Сумма,
				|	НачислениеДругихВыплатТЧ.Ссылка КАК Ведомость,
				|	НачислениеДругихВыплатТЧ.Контрагент КАК Контрагент,
				|	НачислениеДругихВыплатТЧ.ДоговорКонтрагента КАК ДоговорКонтрагента,
				|	НачислениеДругихВыплатТЧ.Ссылка.СчетВзаиморасчетов КАК СчетУчета,
				|	0 КАК Алименты
				|ИЗ
				|	Документ.ИНАГРО_НачислениеДругихВыплат.Товары КАК НачислениеДругихВыплатТЧ
				|ГДЕ
				|	НачислениеДругихВыплатТЧ.Ссылка В(&Ссылка)
				|
				|СГРУППИРОВАТЬ ПО
				|	НачислениеДругихВыплатТЧ.Ссылка,
				|	НачислениеДругихВыплатТЧ.Контрагент,
				|	НачислениеДругихВыплатТЧ.ДоговорКонтрагента,
				|	НачислениеДругихВыплатТЧ.Ссылка.СчетВзаиморасчетов";
				
				Запрос.УстановитьПараметр("Ссылка",       Ведомость);
				
			ИначеЕсли ПрочийРасход Тогда			
				
				Запрос.Текст =
				"ВЫБРАТЬ
				|	ИНАГРО_ВедомостьВыплатПайщикамСписокПайщиков.Контрагент КАК Контрагент,
				|	ИНАГРО_ВедомостьВыплатПайщикамСписокПайщиков.ДоговорКонтрагента КАК ДоговорКонтрагента,
				|	ИНАГРО_ВедомостьВыплатПайщикамСписокПайщиков.СчетУчетаРасчетовСКонтрагентом КАК СчетУчета,
				|	ИНАГРО_ВедомостьВыплатПайщикамСписокПайщиков.Ссылка.НачислятьНДФЛ КАК НачислятьНДФЛ,
				|	ИНАГРО_ВедомостьВыплатПайщикамСписокПайщиков.Ссылка.СтавкаНДФЛ КАК СтавкаНДФЛ,
				|	ИНАГРО_ВедомостьВыплатПайщикамСписокПайщиков.Ссылка.ВидСтавки КАК ВидСтавки,
				|	ИНАГРО_ВедомостьВыплатПайщикамСписокПайщиков.Ссылка КАК Ссылка,
				|	ИНАГРО_ВедомостьВыплатПайщикамСписокПайщиков.Выплата КАК Сумма,
				|	ИНАГРО_ВедомостьВыплатПайщикамСписокПайщиков.СуммаНДФЛ КАК СуммаНДФЛ,
				|	ИНАГРО_ВедомостьВыплатПайщикамСписокПайщиков.Алименты КАК Алименты,
				|	ВЫБОР
				|		КОГДА ИНАГРО_ВедомостьВыплатПайщикамСписокПайщиков.СуммаВС = 0
				|			ТОГДА (ИНАГРО_ВедомостьВыплатПайщикамСписокПайщиков.Выплата + ИНАГРО_ВедомостьВыплатПайщикамСписокПайщиков.Алименты) * ИНАГРО_ВедомостьВыплатПайщикамСписокПайщиков.Ссылка.СтавкаВоенныйСбор
				|		ИНАЧЕ ИНАГРО_ВедомостьВыплатПайщикамСписокПайщиков.СуммаВС
				|	КОНЕЦ КАК СуммаВС,
				|	ИНАГРО_ВедомостьВыплатПайщикамСписокПайщиков.Ссылка.СтавкаВоенныйСбор,
				|	ИНАГРО_ВедомостьВыплатПайщикамСписокПайщиков.Ссылка.НетВзаиморасчетовПоНДФЛ
				|ИЗ
				|	Документ.ИНАГРО_ВедомостьВыплатПайщикам.СписокПайщиков КАК ИНАГРО_ВедомостьВыплатПайщикамСписокПайщиков
				|ГДЕ
				|	ИНАГРО_ВедомостьВыплатПайщикамСписокПайщиков.Контрагент = &КонтрагентРКО
				|	И ИНАГРО_ВедомостьВыплатПайщикамСписокПайщиков.ДоговорКонтрагента = &ДоговорКонтрагентаРКО
				|	И ИНАГРО_ВедомостьВыплатПайщикамСписокПайщиков.Ссылка = &Ссылка
				|	И ИНАГРО_ВедомостьВыплатПайщикамСписокПайщиков.СчетУчетаРасчетовСКонтрагентом = &СчетУчетаРасчетовСКонтрагентом";
				
				Ведомость = ЭтотОбъект.ИНАГРО_ВедомостьВыплатПайщикам;
				
				Запрос.УстановитьПараметр("Ссылка",                         Ведомость);			
				Запрос.УстановитьПараметр("КонтрагентРКО",                  СтруктураШапкиДокумента.СубконтоДт1);
				Запрос.УстановитьПараметр("ДоговорКонтрагентаРКО",          СтруктураШапкиДокумента.СубконтоДт2);
				Запрос.УстановитьПараметр("СчетУчетаРасчетовСКонтрагентом", СчетУчетаРасчетовСКонтрагентом);
				
			КонецЕсли; 
			
			Результат = Запрос.Выполнить().Выгрузить();
			
			Если Результат.Количество() = 0 Тогда
				Сообщить (НСтр ("ru='В выбранной ведомости нет таких контрагента и договора, по которым осуществляется выплата!';uk='У вибраній відомості немає таких контрагента та договору, по яких здійснюється виплата!'"));
			Иначе	
				
				Результат.Колонки.Добавить("Всего");  // нужна будет для расчета НДФЛ
				
				Для Каждого Выборка Из Результат Цикл
					
					Проводка = ПроводкиБУ.Добавить();				
					Проводка.Период      = Дата;
					Проводка.Организация = СтруктураШапкиДокумента.Организация;
					Если ВидОперации = Перечисления.ВидыОперацийРКО.ИНАГРО_ДругиеВыплаты Тогда
						Проводка.Содержание  = НСтр("ru='Другие выплаты';uk='Інші виплати'", Локализация.КодЯзыкаИнформационнойБазы());
					Иначе
						Проводка.Содержание  = НСтр("ru='Выплата пайщикам';uk='Виплата пайщикам'", Локализация.КодЯзыкаИнформационнойБазы());
					КонецЕсли; 
					
					Проводка.СчетДт      = Выборка.СчетУчета;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты", Выборка.Контрагент);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Договоры",    Выборка.ДоговорКонтрагента);
					
					Проводка.СчетКт      = СчетКт;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "СтатьиДвиженияДенежныхСредств", СтруктураШапкиДокумента.СтатьяДвиженияДенежныхСредств);
					Если СтруктураШапкиДокумента.ВестиУчетДенежныхСредствПоОбособленнымПодразделениям Тогда
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОбособленныеПодразделенияБезОбразованияЮрЛица", СтруктураШапкиДокумента.ОбособленноеПодразделениеОрганизации);
					КонецЕсли; 
					
					Проводка.Сумма       = Выборка.Сумма;
					
					Выборка.Всего = Выборка.Сумма + Выборка.Алименты;
					
				КонецЦикла;
				
				// Движения по ВзаиморасчетыПоНДФЛ
				Если НЕ ВидОперации = Перечисления.ВидыОперацийРКО.ИНАГРО_ДругиеВыплаты Тогда
					Если НЕ Выборка.НетВзаиморасчетовПоНДФЛ Тогда
						
						ТаблицаПоКонтрагентам = Результат.Скопировать();
						ТаблицаПоКонтрагентам.Свернуть("Контрагент", "Всего");
						
						ТекДата = ?(ЭтоНовый(), ТекущаяДата(), Дата);
						
						Отбор = Новый Структура("ВидСтавки", Перечисления.ВидыСтавокНДФЛ.Основная);
						СтавкаНДФЛ = РегистрыСведений.СтавкиНДФЛ.ПолучитьПоследнее(ТекДата, Отбор).Ставка;
						
						Отбор = Новый Структура("ВидСтавки", Перечисления.ВидыСтавокНДФЛ.ВоенныйСбор);
						СтавкаВС = РегистрыСведений.СтавкиНДФЛ.ПолучитьПоследнее(ТекДата, Отбор).Ставка;
						
						ИНАГРО_Общий.РассчитатьНДФЛДляТаблицыОбратный(ТаблицаПоКонтрагентам, Дата, СтавкаНДФЛ, СтавкаВС);
						
						
						Для Каждого Выборка Из Результат Цикл
							
							СтрТаблицаПоКонтрагентам = ТаблицаПоКонтрагентам.Найти(Выборка.Контрагент);
							Удержано   = ?(СтрТаблицаПоКонтрагентам.Всего > 0,(СтрТаблицаПоКонтрагентам.СуммаНДФЛПоКонтрагенту * Выборка.Всего / СтрТаблицаПоКонтрагентам.Всего), 0);
							УдержаноВС = ?(СтрТаблицаПоКонтрагентам.Всего > 0,(СтрТаблицаПоКонтрагентам.СуммаВСПоКонтрагенту * Выборка.Всего / СтрТаблицаПоКонтрагентам.Всего), 0);
							Доход      = Выборка.Всего + Удержано + УдержаноВС; 						
							
							Если ВидОперации = Перечисления.ВидыОперацийРКО.ИНАГРО_ДругиеВыплаты Тогда
								ВидДоходаНДФЛ = Выборка.ВидДоходаНДФЛ;
							ИначеЕсли СтруктураШапкиДокумента.Дата >= Дата(2020,07,01) Тогда
								Если ЗначениеЗаполнено(Выборка.ДоговорКонтрагента.ИНАГРО_КодНДФЛ) Тогда 
									ВидДоходаНДФЛ = Выборка.ДоговорКонтрагента.ИНАГРО_КодНДФЛ;
								ИначеЕсли Выборка.ДоговорКонтрагента.ВидДоговора = ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.ИНАГРО_АрендаЗемли") Тогда
									ВидДоходаНДФЛ = Справочники.ВидыДоходовНДФЛ.Код08;
								ИначеЕсли Выборка.ДоговорКонтрагента.ВидДоговора = ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.ИНАГРО_АрендаИмущества") Тогда	
									ВидДоходаНДФЛ = Справочники.ВидыДоходовНДФЛ.Код195;
								КонецЕсли;	
							Иначе	
								ВидДоходаНДФЛ = Справочники.ВидыДоходовНДФЛ.Код08;
							КонецЕсли;	
							
							Если Выборка.НачислятьНДФЛ = Истина Тогда
								
								// приход
								Движение = Движения.ВзаиморасчетыПоНДФЛ.Добавить();						
								Движение.ВидДвижения          = ВидДвиженияНакопления.Приход;
								Движение.Период               = СтруктураШапкиДокумента.Дата;
								Движение.Активность           = Истина;
								Движение.Контрагент           = Выборка.Контрагент;
								Движение.Организация          = СтруктураШапкиДокумента.Организация;
								Движение.ПериодВзаиморасчетов = НачалоМесяца(СтруктураШапкиДокумента.Дата);
								Движение.ДоходНДФЛ            = ВидДоходаНДФЛ;
								Движение.ВидСтавки            = Выборка.ВидСтавки;
								Движение.Налог                = Удержано;
								Движение.Доход                = Доход; 
								Движение.НалоговыйПериод      = НачалоМесяца(СтруктураШапкиДокумента.Дата);
								Движение.Авторасчет           = Истина;
								
								//ВС							
								Движение = Движения.ВзаиморасчетыПоНДФЛ.Добавить();						
								Движение.ВидДвижения          = ВидДвиженияНакопления.Приход;
								Движение.Период               = СтруктураШапкиДокумента.Дата;
								Движение.Активность           = Истина;
								Движение.Контрагент           = Выборка.Контрагент;
								Движение.Организация          = СтруктураШапкиДокумента.Организация;
								Движение.ПериодВзаиморасчетов = НачалоМесяца(СтруктураШапкиДокумента.Дата);
								Движение.ДоходНДФЛ            = ВидДоходаНДФЛ.ОблагаетсяВоеннымСбором2021;  
								Движение.ВидСтавки            = Перечисления.ВидыСтавокНДФЛ.ВоенныйСбор;
								Движение.Налог                = УдержаноВС;
								Движение.Доход                = Доход; 
								Движение.НалоговыйПериод      = НачалоМесяца(СтруктураШапкиДокумента.Дата);
								Движение.Авторасчет           = Истина;
								
								//расход
								Движение = Движения.ВзаиморасчетыПоНДФЛ.Добавить();						
								Движение.ВидДвижения          = ВидДвиженияНакопления.Расход;
								Движение.Период               = СтруктураШапкиДокумента.Дата;
								Движение.Активность           = Истина;
								Движение.Контрагент           = Выборка.Контрагент;
								Движение.Организация          = СтруктураШапкиДокумента.Организация;
								Движение.ПериодВзаиморасчетов = НачалоМесяца(СтруктураШапкиДокумента.Дата);
								Движение.ДоходНДФЛ            = ВидДоходаНДФЛ;
								Движение.ВидСтавки            = Выборка.ВидСтавки;
								Движение.Налог                = Удержано;
								Движение.Доход                = Доход; 
								Движение.НалоговыйПериод      = НачалоМесяца(СтруктураШапкиДокумента.Дата);
								Движение.Авторасчет           = Истина;
								
								//ВС
								Движение = Движения.ВзаиморасчетыПоНДФЛ.Добавить();						
								Движение.ВидДвижения          = ВидДвиженияНакопления.Расход;
								Движение.Период               = СтруктураШапкиДокумента.Дата;
								Движение.Активность           = Истина;
								Движение.Контрагент           = Выборка.Контрагент;
								Движение.Организация          = СтруктураШапкиДокумента.Организация;
								Движение.ПериодВзаиморасчетов = НачалоМесяца(СтруктураШапкиДокумента.Дата);
								Движение.ДоходНДФЛ            = ВидДоходаНДФЛ.ОблагаетсяВоеннымСбором2021;  
								Движение.ВидСтавки            = Перечисления.ВидыСтавокНДФЛ.ВоенныйСбор;
								Движение.Налог                = УдержаноВС;
								Движение.Доход                = Доход; 
								Движение.НалоговыйПериод      = НачалоМесяца(СтруктураШапкиДокумента.Дата);
								Движение.Авторасчет           = Истина;
								
							Иначе
								
								//расход
								Движение = Движения.ВзаиморасчетыПоНДФЛ.Добавить();						
								Движение.ВидДвижения          = ВидДвиженияНакопления.Расход;
								Движение.Период               = СтруктураШапкиДокумента.Дата;
								Движение.Активность           = Истина;
								Движение.Контрагент           = Выборка.Контрагент;
								Движение.Организация          = СтруктураШапкиДокумента.Организация;
								Движение.ПериодВзаиморасчетов = НачалоМесяца(СтруктураШапкиДокумента.Дата);
								Движение.ДоходНДФЛ            = ВидДоходаНДФЛ;
								Движение.ВидСтавки            = Выборка.ВидСтавки;
								Движение.Налог                = Удержано;
								Движение.Доход                = Доход; 
								Движение.НалоговыйПериод      = НачалоМесяца(СтруктураШапкиДокумента.Дата);
								Движение.Авторасчет           = Истина;   							
								
								//ВС
								Движение = Движения.ВзаиморасчетыПоНДФЛ.Добавить();						
								Движение.ВидДвижения          = ВидДвиженияНакопления.Расход;
								Движение.Период               = СтруктураШапкиДокумента.Дата;
								Движение.Активность           = Истина;
								Движение.Контрагент           = Выборка.Контрагент;
								Движение.Организация          = СтруктураШапкиДокумента.Организация;
								Движение.ПериодВзаиморасчетов = НачалоМесяца(СтруктураШапкиДокумента.Дата);
								Движение.ДоходНДФЛ            = ВидДоходаНДФЛ.ОблагаетсяВоеннымСбором2021;  
								Движение.ВидСтавки            = Перечисления.ВидыСтавокНДФЛ.ВоенныйСбор;
								Движение.Налог                = УдержаноВС;
								Движение.Доход                = Доход; 
								Движение.НалоговыйПериод      = НачалоМесяца(СтруктураШапкиДокумента.Дата);
								Движение.Авторасчет           = Истина;
								
							КонецЕсли; 
							
						КонецЦикла;				
						
					КонецЕсли; 
					
				КонецЕсли; 
			КонецЕсли; 
			// ИНАГРО-- 
			
		Иначе
			
			Проводка = ПроводкиБУ.Добавить();
			
			Проводка.Период      = Дата;
			Проводка.Организация = СтруктураШапкиДокумента.Организация;
			
			
			Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийРКО.ВыдачаДенежныхСредствПодотчетнику Тогда
				
				Проводка.Содержание = НСтр("ru='Выдача средств подотчетнику';uk='Видача коштів підзвітній особі'",Локализация.КодЯзыкаИнформационнойБазы());
				
				Если КассаВВалюте Тогда
					Проводка.СчетДт = ПланыСчетов.Хозрасчетный.РасчетыСПодотчетнымиЛицамиВИностраннойВалюте;
				Иначе
					Проводка.СчетДт = ПланыСчетов.Хозрасчетный.РасчетыСПодотчетнымиЛицамиВНациональнойВалюте;
				КонецЕсли;
				
				Проводка.СубконтоДт.РаботникиОрганизаций = СтруктураШапкиДокумента.Контрагент;
				
				СтруктураШапкиДокумента.Вставить("КоррСчет", ПланыСчетов.Хозрасчетный.ПустаяСсылка());
				
			ИначеЕсли СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийРКО.РасходДенежныхСредствПрочее
				ИЛИ СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийРКО.ИнкассацияДенежныхСредств Тогда
				
				Проводка.Содержание = ?(ВидОперации=Перечисления.ВидыОперацийРКО.ИнкассацияДенежныхСредств,НСтр("ru='Инкассация денежных средств';uk='Інкасація коштів'",Локализация.КодЯзыкаИнформационнойБазы()),НСтр("ru='Прочие расходы';uk='Інші витрати'",Локализация.КодЯзыкаИнформационнойБазы()));
				Проводка.СчетДт      = СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтруктураШапкиДокумента.СубконтоДт1);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, СтруктураШапкиДокумента.СубконтоДт2);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, СтруктураШапкиДокумента.СубконтоДт3);
			ИначеЕсли СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийРКО.ВзносНаличнымиВБанк Тогда
				
				Проводка.Содержание = НСтр("ru='Взнос наличными в банк';uk='Внесок готівкою в банк'",Локализация.КодЯзыкаИнформационнойБазы());
				
				Проводка.СчетДт = СчетУчетаРасчетовСКонтрагентом;
				Проводка.СубконтоДт.БанковскиеСчета               = СтруктураШапкиДокумента.СчетОрганизации;
				Проводка.СубконтоДт.СтатьиДвиженияДенежныхСредств = СтруктураШапкиДокумента.СтатьяДвиженияДенежныхСредств;
				
			КонецЕсли;
			
			Проводка.СчетКт = СчетКт;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"СтатьиДвиженияДенежныхСредств",СтруктураШапкиДокумента.СтатьяДвиженияДенежныхСредств);
			Если СтруктураШапкиДокумента.ВестиУчетДенежныхСредствПоОбособленнымПодразделениям Тогда
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"ОбособленныеПодразделенияБезОбразованияЮрЛица", СтруктураШапкиДокумента.ОбособленноеПодразделениеОрганизации);
			КонецЕсли; 
			
			Если КассаВВалюте Тогда
				
				Если Проводка.СчетДт.Валютный Тогда
					Проводка.ВалютаДт        = СтруктураШапкиДокумента.ВалютаДокумента;
					Проводка.ВалютнаяСуммаДт = СтруктураШапкиДокумента.СуммаДокумента;
				КонецЕсли;
				
				
				ВалютаРег       = ВалютаРегламентированногоУчета;
				ДанныеОВалюте   = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаРег, Дата);
				
				Проводка.Сумма  = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтруктураШапкиДокумента.СуммаДокумента, СтруктураШапкиДокумента.ВалютаДокумента, ВалютаРег,
				СтруктураШапкиДокумента.КурсДокумента, ДанныеОВалюте.Курс, 
				СтруктураШапкиДокумента.КратностьДокумента, ДанныеОВалюте.Кратность);
				
				Проводка.ВалютаКт        = СтруктураШапкиДокумента.ВалютаДокумента;
				Проводка.ВалютнаяСуммаКт = СтруктураШапкиДокумента.СуммаДокумента;
				
			Иначе
				Проводка.Сумма  = СтруктураШапкиДокумента.СуммаДокумента;
			КонецЕсли;
			
			Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийРКО.РасходДенежныхСредствПрочее
				ИЛИ СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийРКО.ИнкассацияДенежныхСредств Тогда
				
				Если УправлениеПроизводствомВызовСервера.ПолучитьХарактерЗатратПоСчетуЗатрат(СчетУчетаРасчетовСКонтрагентом,,Дата) = "Затраты" Тогда
					Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыльДо2015 Тогда
						Проводка.НалоговоеНазначениеДт = НалоговоеНазначениеПриПрочемСписании;
						Если НЕ НалоговоеНазначениеПриПрочемСписании = Справочники.НалоговыеНазначенияАктивовИЗатрат.НКУ_НеХозДеятельность Тогда
							Проводка.СуммаНУДт = Проводка.Сумма;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				// ИНАГРО++
				Если УправлениеПроизводствомВызовСервера.ПолучитьХарактерЗатратПоСчетуЗатрат(СчетУчетаРасчетовСКонтрагентом,,Дата) = "Производство" Тогда
					Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыльДо2015 Тогда
						Проводка.НалоговоеНазначениеДт = Проводка.СубконтоДт.НоменклатурныеГруппы.НалоговоеНазначениеВПроизводстве;
						Проводка.СуммаНУДт = Проводка.Сумма;
					КонецЕсли; 
				КонецЕсли;
				// ИНАГРО--
			КонецЕсли;
			
		КонецЕсли;
		
		Если   ВидОперации = Перечисления.ВидыОперацийРКО.ВозвратДенежныхСредствПокупателю 
			И СтруктураШапкиДокумента.ЕстьНалогНаПрибыльДо2015 Тогда
			
			Для каждого СтрокаРасшифровки Из РасшифровкаПлатежа Цикл
				
				Если НЕ СтрокаРасшифровки.ВозвратАвансаДо01042011НУ Тогда
					Продолжить;
				КонецЕсли;
				
				Если СтрокаРасшифровки.СуммаВДВРПоАвансуДо01042011 = 0 Тогда
					Продолжить;
				КонецЕсли;
				
				ЭтоПриобретение = (Найти(ВРЕГ(СтруктураШапкиДокумента.ВидДокумента), "ВХОДЯЩ") > 0) ИЛИ (Найти(ВРЕГ(СтруктураШапкиДокумента.ВидДокумента), "ПРИХОД") > 0);			
				
				Проводка = ПроводкиБУ.Добавить();
				Проводка.Период     = СтруктураШапкиДокумента.Дата;
				Проводка.Организация = СтруктураШапкиДокумента.Организация;
				
				СуммаСторноДоходовЗатрат = - СтрокаРасшифровки.СуммаВДВРПоАвансуДо01042011;
				
				Если ЭтоПриобретение Тогда
					Проводка.СчетДт    = ПланыСчетов.Хозрасчетный.ДругиеЗатратыОперационнойДеятельности;
					Проводка.СчетКт    = ПланыСЧетов.Хозрасчетный.Вспомогательный;
					Проводка.НалоговоеНазначениеДт = Справочники.НалоговыеНазначенияАктивовИЗатрат.НКУ_ХозДеятельность;
					Проводка.СуммаНУДт = СуммаСторноДоходовЗатрат;
					
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "СтатьиЗатрат", СтрокаРасшифровки.СтатьяПоВозвратуАвансаДо2011НУ);
					Проводка.Содержание = НСтр("ru='(НУ) Сторно расходов при возврате аванса до 01.04.2011';uk='(ПО) Сторно витрат при поверненні авансу до 01.04.2011'",Локализация.КодЯзыкаИнформационнойБазы());
					
				Иначе	
					Проводка.СчетКт    = ПланыСчетов.Хозрасчетный.ДругиеДоходыОтОбычнойДеятельности;
					Проводка.СчетДт    = ПланыСЧетов.Хозрасчетный.Вспомогательный;
					Проводка.НалоговоеНазначениеКт = Справочники.НалоговыеНазначенияАктивовИЗатрат.НКУ_ХозДеятельность;
					Проводка.СуммаНУКт = СуммаСторноДоходовЗатрат;
					
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "СтатьиДоходов", СтрокаРасшифровки.СтатьяПоВозвратуАвансаДо2011НУ);
					Проводка.Содержание = НСтр("ru='(НУ) Сторно доходов при возврате аванса до 01.04.2011';uk='(ПО) Сторно доходів при поверненні авансу до 01.04.2011'",Локализация.КодЯзыкаИнформационнойБазы());
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
		//Учет курсовых разниц
		Если (ВалютаДокумента <> ВалютаРегламентированногоУчета) тогда
			БухгалтерскийУчетРед12.ПереоценкаСчетовДокументаРегл(ЭтотОбъект,СтруктураШапкиДокумента, ВалютаРегламентированногоУчета,Отказ,Заголовок);
		КонецЕсли; // Учет курсовых разниц
		
		Если (ЕстьРасчетыСКонтрагентами или ЕстьРасчетыПоКредитам или
			(СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийРКО.ВыдачаДенежныхСредствПодотчетнику)) 
			и СтруктураШапкиДокумента.ЕстьЕдиныйНалог Тогда
			РеестрПлатежей = УправлениеДенежнымиСредствами.ПодготовитьТаблицуОплат(СтруктураШапкиДокумента);
			НалоговыйУчет.ДвиженияПоЕдиномуНалогуРасчеты(ЭтотОбъект,СтруктураШапкиДокумента,РеестрПлатежей,Отказ);
		ИначеЕсли (ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыПоВедомостям
			или ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыРаботнику
			или ВидОперации = Перечисления.ВидыОперацийРКО.РасходДенежныхСредствПрочее) и СтруктураШапкиДокумента.ЕстьЕдиныйНалог Тогда
			
			НалоговыйУчет.ДвиженияПоЕдиномуНалогуПрочее(ЭтотОбъект,СтруктураШапкиДокумента,Отказ);	
		КонецЕсли;	
		
		
		Если ЕстьРасчетыСКонтрагентами и (СтруктураШапкиДокумента.ЕстьНДС или СтруктураШапкиДокумента.ЕстьНалогНаПрибыльДо2015) Тогда
			РеестрПлатежей = НалоговыйУчет.ПодготовитьТаблицуОплатДляНалоговогоУчета(СтруктураШапкиДокумента);
			НалоговыйУчет.ДвиженияПоРегистрамНалоговогоУчетаПлатежныхДокументов(ЭтотОбъект,СтруктураШапкиДокумента,РеестрПлатежей,Отказ);
		КонецЕсли; 
		
	КонецПроцедуры
	
	
	////////////////////////////////////////////////////////////////////////////////
	// ОБРАБОТЧИКИ СОБЫТИЙ
	
	// Процедура - обработчик события "ОбработкаЗаполнения".
	//
	Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
		
		ТипДанныхЗаполнения = ТипЗнч(ДанныеЗаполнения);
		
		Если ТипДанныхЗаполнения = Тип("Массив") Тогда
			Если    ТипЗнч(ДанныеЗаполнения[0]) = Тип("ДокументСсылка.ВедомостьНаВыплатуЗарплаты") 
				ИЛИ ТипЗнч(ДанныеЗаполнения[0]) = Тип("ДокументСсылка.ВедомостьНаВыплатуЗарплатыВКассу") Тогда
				//~		Если    ТипЗнч(ДанныеЗаполнения[0]) = Тип("ДокументСсылка.ВедомостьНаВыплатуЗарплатыРаздатчиком") 
				//~			ИЛИ ТипЗнч(ДанныеЗаполнения[0]) = Тип("ДокументСсылка.ВедомостьНаВыплатуЗарплатыВКассу") Тогда
				//-- БУ ЗИК			ЗаполнитьПоДокументуОснованию(ДанныеЗаполнения[0]);
				ВводНаОсновании = Истина;
			КонецЕсли;
		ИначеЕсли ДанныеЗаполнения <> Неопределено И ТипДанныхЗаполнения <> Тип("Структура")
			И Метаданные().ВводитсяНаОсновании.Содержит(ДанныеЗаполнения.Метаданные()) Тогда
			ЗаполнитьПоДокументуОснованию(ДанныеЗаполнения);
		КонецЕсли;
		
		ЗаполнениеДокументов.Заполнить(ЭтотОбъект, ДанныеЗаполнения);
		
		Если ВидОперации = Перечисления.ВидыОперацийРКО.ВыдачаДенежныхСредствПодотчетнику
			ИЛИ ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыРаботнику
			ИЛИ ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыПоВедомостям
			ИЛИ ВидОперации = Перечисления.ВидыОперацийРКО.ИнкассацияДенежныхСредств
			ИЛИ ВидОперации = Перечисления.ВидыОперацийРКО.ВзносНаличнымиВБанк
			ИЛИ ВидОперации = Перечисления.ВидыОперацийРКО.РасходДенежныхСредствПрочее 
			ИЛИ ВидОперации = Перечисления.ВидыОперацийРКО.ИНАГРО_ВыплатаПаевПоВедомостям // ИНАГРО
			ИЛИ ВидОперации = Перечисления.ВидыОперацийРКО.ИНАГРО_ВыплатаПаяПайщику	Тогда
			РасшифровкаПлатежа.Очистить();
		КонецЕсли;
		
		ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
		Если НЕ ЗначениеЗаполнено(ВалютаДокумента) ИЛИ ВалютаДокумента = ВалютаРегламентированногоУчета Тогда
			СчетКасса= ПланыСчетов.Хозрасчетный.КассаВНациональнойВалюте;
		Иначе
			СчетКасса= ПланыСчетов.Хозрасчетный.КассаВИностраннойВалюте;
		КонецЕсли;
		
		Если ВидОперации = Перечисления.ВидыОперацийРКО.ОплатаПоставщику
			ИЛИ ВидОперации = Перечисления.ВидыОперацийРКО.ВозвратДенежныхСредствПокупателю
			ИЛИ ВидОперации = Перечисления.ВидыОперацийРКО.РасчетыПоКредитамИЗаймамСКонтрагентами
			ИЛИ ВидОперации = Перечисления.ВидыОперацийРКО.ИНАГРО_ВыплатаПаяПайщику Тогда // ИНАГРО
			ОграничениеТипаКонтрагента = Новый ОписаниеТипов("СправочникСсылка.Контрагенты");
		ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРКО.ВыдачаДенежныхСредствПодотчетнику 
			ИЛИ ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыРаботнику Тогда
			ОграничениеТипаКонтрагента = Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица");
		Иначе
			ОграничениеТипаКонтрагента = Новый ОписаниеТипов("Неопределено");
		КонецЕсли;
		
		Если ОграничениеТипаКонтрагента.Типы().Количество() = 0 Тогда
			Контрагент = Неопределено;
		Иначе
			Контрагент = ОграничениеТипаКонтрагента.ПривестиЗначение(Контрагент);
		КонецЕсли;
		
		Если (ВидОперации = Перечисления.ВидыОперацийРКО.ОплатаПоставщику
			ИЛИ ВидОперации = Перечисления.ВидыОперацийРКО.ВозвратДенежныхСредствПокупателю
			ИЛИ ВидОперации = Перечисления.ВидыОперацийРКО.РасчетыПоКредитамИЗаймамСКонтрагентами)
			И ПустаяСтрока(Выдать) 
			И ЗначениеЗаполнено(Контрагент) Тогда
			ДанныеКонтрагента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Контрагент, "НаименованиеПолное, Наименование");
			Выдать = ?(ПустаяСтрока(ДанныеКонтрагента.НаименованиеПолное), ДанныеКонтрагента.Наименование, ДанныеКонтрагента.НаименованиеПолное);
		ИначеЕсли (ВидОперации = Перечисления.ВидыОперацийРКО.ВыдачаДенежныхСредствПодотчетнику
			ИЛИ ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыРаботнику)
			И (ПустаяСтрока(Выдать) ИЛИ ПустаяСтрока(ПоДокументу)) 
			И ЗначениеЗаполнено(Контрагент) Тогда
			ДанныеФизЛица = ОбщегоНазначенияБПВызовСервера.ДанныеФизЛица(Организация, Контрагент, Дата);
			Если ПустаяСтрока(Выдать) Тогда
				Выдать = ДанныеФизЛица.Представление;
			КонецЕсли;
			Если ПустаяСтрока(ПоДокументу) Тогда
				ПоДокументу = ДанныеФизЛица.ПредставлениеДокумента;
			КонецЕсли;
		ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРКО.ИНАГРО_ВыплатаПаяПайщику  // ИНАГРО
			И (ПустаяСтрока(Выдать) ИЛИ ПустаяСтрока(ПоДокументу)) 
			И ЗначениеЗаполнено(Контрагент) Тогда
			
			ДанныеКонтрагента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Контрагент, "НаименованиеПолное, Наименование,ЮридическоеФизическоеЛицо,ДокументУдостоверяющийЛичность");
			Выдать = ?(ПустаяСтрока(ДанныеКонтрагента.НаименованиеПолное), ДанныеКонтрагента.Наименование, ДанныеКонтрагента.НаименованиеПолное);
			Если ПустаяСтрока(ПоДокументу) Тогда
				ПоДокументу = ?(ДанныеКонтрагента.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо, ДанныеКонтрагента.ДокументУдостоверяющийЛичность, "");
			КонецЕсли;
			Основание = "Платіжна відомість № "+ ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(ИНАГРО_ВедомостьВыплатПайщикам.Номер) + " від " + Формат(ИНАГРО_ВедомостьВыплатПайщикам.Дата, "ДФ=dd.MM.yyyy");	
		КонецЕсли;
		
	КонецПроцедуры // ОбработкаЗаполнения()
	
	Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
		
		МассивНепроверяемыхРеквизитов = Новый Массив;
		
		ЕстьНалогНаПрибыльДо2015 = УчетнаяПолитика.ПлательщикНалогаНаПрибыльДо2015(Организация, НачалоМесяца(Дата));
		ЕстьНДС			   = УчетнаяПолитика.ПлательщикНДС(Организация, НачалоМесяца(Дата));
		
		// Отключаем проверку реквизитов шапки
		
		Если ВидОперации <> Перечисления.ВидыОперацийРКО.ОплатаПоставщику
			И ВидОперации <> Перечисления.ВидыОперацийРКО.ВозвратДенежныхСредствПокупателю
			И ВидОперации <> Перечисления.ВидыОперацийРКО.РасчетыПоКредитамИЗаймамСКонтрагентами
			И ВидОперации <> Перечисления.ВидыОперацийРКО.ВыдачаДенежныхСредствПодотчетнику
			И ВидОперации <> Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыРаботнику 
			И ВидОперации <> Перечисления.ВидыОперацийРКО.ИНАГРО_ВыплатаПаяПайщику Тогда // ИНАГРО
			
			МассивНепроверяемыхРеквизитов.Добавить("Контрагент");
			
		КонецЕсли;
		
		Если (ВидОперации <> Перечисления.ВидыОперацийРКО.ВзносНаличнымиВБанк) Тогда
			
			МассивНепроверяемыхРеквизитов.Добавить("СчетОрганизации");
			
		КонецЕсли;
		
		Если ВидОперации <> Перечисления.ВидыОперацийРКО.ИнкассацияДенежныхСредств
			И ВидОперации <> Перечисления.ВидыОперацийРКО.ВзносНаличнымиВБанк
			И ВидОперации <> Перечисления.ВидыОперацийРКО.РасходДенежныхСредствПрочее 
			И ВидОперации <> Перечисления.ВидыОперацийРКО.ИНАГРО_ВыплатаПаяПайщику Тогда // ИНАГРО
			
			МассивНепроверяемыхРеквизитов.Добавить("СчетУчетаРасчетовСКонтрагентом");
			
		КонецЕсли;
		
		Если Не ПоОбособленномуПодразделению Тогда
			
			МассивНепроверяемыхРеквизитов.Добавить("ОбособленноеПодразделениеОрганизации");
			
		КонецЕсли;
		
		Если ВидОперации <> Перечисления.ВидыОперацийРКО.ИНАГРО_ВыплатаПаяПайщику Тогда // ИНАГРО
			
			МассивНепроверяемыхРеквизитов.Добавить("ДоговорКонтрагента");
			МассивНепроверяемыхРеквизитов.Добавить("ИНАГРО_ВедомостьВыплатПайщикам"); 
			
		КонецЕсли;   	
		
		// Отключаем проверку реквизитов ТЧ РасшифровкаПлатежа
		
		МассивНепроверяемыхРеквизитов.Добавить("РасшифровкаПлатежа.СуммаВзаиморасчетов"); // Проверяем построчно
		Если ВидОперации = Перечисления.ВидыОперацийРКО.ОплатаПоставщику
			ИЛИ ВидОперации = Перечисления.ВидыОперацийРКО.ВозвратДенежныхСредствПокупателю Тогда
			
			МассивНепроверяемыхРеквизитов.Добавить("РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом"); // Проверяем построчно
			
		ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРКО.РасчетыПоКредитамИЗаймамСКонтрагентами Тогда
			
			МассивНепроверяемыхРеквизитов.Добавить("РасшифровкаПлатежа.СуммаВзаиморасчетов");
			МассивНепроверяемыхРеквизитов.Добавить("РасшифровкаПлатежа.СчетУчетаРасчетовПоАвансам");
			
		Иначе
			
			МассивНепроверяемыхРеквизитов.Добавить("РасшифровкаПлатежа");
			МассивНепроверяемыхРеквизитов.Добавить("РасшифровкаПлатежа.ДоговорКонтрагента");
			МассивНепроверяемыхРеквизитов.Добавить("РасшифровкаПлатежа.СуммаПлатежа");
			МассивНепроверяемыхРеквизитов.Добавить("РасшифровкаПлатежа.СуммаВзаиморасчетов");
			МассивНепроверяемыхРеквизитов.Добавить("РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом");
			МассивНепроверяемыхРеквизитов.Добавить("РасшифровкаПлатежа.СчетУчетаРасчетовПоАвансам");
			
		КонецЕсли;
		
		// Отключаем проверку реквизитов, связанных с выплатой заработной платы
		// Если установлен флаг ручная корректировка - то заполненность полей по заработной плате не проверяем
		
		Если (ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыПоВедомостям
			ИЛИ ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыРаботнику)
			И НЕ РучнаяКорректировка Тогда
			
			Если ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыПоВедомостям Тогда
				
				Если ВыплатаЗаработнойПлаты.Итог("СуммаКВыплате") <> СуммаДокумента Тогда
					ШаблонСообщения = НСтр("ru='Не совпадает сумма документа и суммы по ведомостям на выплату заработной платы.';uk='Не збігається сума документа й сума по відомостях на виплату заробітної плати.'");
					ТекстСообщения  = ОбщегоНазначенияБПКлиентСервер.ПолучитьТекстСообщения(
					"Поле", "Корректность", НСтр("ru='Сумма документа';uk='Сума документа'"),,, ШаблонСообщения); 
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, "СуммаДокумента", "Объект", Отказ);
				КонецЕсли;
				
				МассивНепроверяемыхРеквизитов.Добавить("ПлатежнаяВедомость");
				МассивНепроверяемыхРеквизитов.Добавить("СчетУчетаРасчетовПоЗП");
				
			КонецЕсли;
			
			//Если ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыРаботнику Тогда
			//	
			//	Ведомости = Новый Массив;
			//	Ведомости.Добавить(ПлатежнаяВедомость);
			//	
			//	ТаблицаВедомостей = УчетЗарплаты.ПолучитьДанныеВедомостейДляОплатыТаблично(Ссылка, Ведомости);
			//	
			//	Запрос = Новый Запрос;
			//	
			//	Запрос.УстановитьПараметр("ТаблицаВедомостей", ТаблицаВедомостей);
			//	Запрос.УстановитьПараметр("ПлатежнаяВедомость", ПлатежнаяВедомость);
			//	Запрос.УстановитьПараметр("СчетУчетаРасчетовПоЗП", СчетУчетаРасчетовПоЗП);
			//	Запрос.УстановитьПараметр("Контрагент", Контрагент);
			//	
			//	Запрос.Текст = 
			//	"ВЫБРАТЬ
			//	|	ДанныеВедомостей.Ведомость КАК Ведомость,
			//	|	ДанныеВедомостей.ФизическоеЛицо КАК ФизическоеЛицо,
			//	|	ДанныеВедомостей.СчетУчета КАК СчетУчета,
			//	|	ДанныеВедомостей.СуммаКВыплате КАК СуммаКВыплате
			//	|ПОМЕСТИТЬ ВТТаблицаВедомостей
			//	|ИЗ
			//	|	&ТаблицаВедомостей КАК ДанныеВедомостей
			//	|;
			//	|
			//	|ВЫБРАТЬ
			//	|	СУММА(ДанныеВедомостей.СуммаКВыплате) КАК СуммаКВыплате
			//	|ИЗ
			//	|   ВТТаблицаВедомостей КАК ДанныеВедомостей
			//	|ГДЕ ДанныеВедомостей.Ведомость = &ПлатежнаяВедомость
			//	|    И ДанныеВедомостей.СчетУчета = &СчетУчетаРасчетовПоЗП
			//	|    И ДанныеВедомостей.ФизическоеЛицо = &Контрагент
			//	|";
			//	
			//	Результат = Запрос.Выполнить().Выбрать();
			//	
			//	Если НЕ Результат.Следующий() ИЛИ Результат.СуммаКВыплате <> СуммаДокумента Тогда
			//		ШаблонСообщения = НСтр("ru='Не совпадает сумма документа и суммы по ведомостям на выплату заработной платы.';uk='Не збігається сума документа й сума по відомостях на виплату заробітної плати.'");
			//		ТекстСообщения  = ОбщегоНазначенияБПКлиентСервер.ПолучитьТекстСообщения(
			//		"Поле", "Корректность", НСтр("ru='Сумма документа';uk='Сума документа'"),,, ШаблонСообщения); 
			//		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, "СуммаДокумента", "Объект", Отказ);
			//	КонецЕсли;
			
			//КонецЕсли;
			
		Иначе
			
			ПроверятьСоответствиеСуммыДокументаИВедомости = Ложь;		
			МассивНепроверяемыхРеквизитов.Добавить("ВыплатаЗаработнойПлаты");
			МассивНепроверяемыхРеквизитов.Добавить("ВыплатаЗаработнойПлаты.Ведомость");
			МассивНепроверяемыхРеквизитов.Добавить("ВыплатаЗаработнойПлаты.СуммаКВыплате");
			МассивНепроверяемыхРеквизитов.Добавить("ПлатежнаяВедомость");
			МассивНепроверяемыхРеквизитов.Добавить("СчетУчетаРасчетовПоЗП");
			
		КонецЕсли;
		
		// Проверка соответствия налогового назначения характеру затрат
		
		Если ВидОперации = Перечисления.ВидыОперацийРКО.РасходДенежныхСредствПрочее тогда
			Если  ЕстьНалогНаПрибыльДо2015 Тогда                                               
				Если УправлениеПроизводствомВызовСервера.ПолучитьХарактерЗатратПоСчетуЗатрат(СчетУчетаРасчетовСКонтрагентом,,Дата) = "Затраты" Тогда
					Если Не ЗначениеЗаполнено(НалоговоеНазначениеПриПрочемСписании) Тогда
						ТекстСообщения  = ОбщегоНазначенияБПКлиентСервер.ПолучитьТекстСообщения(
						"Поле", "Заполнение", НСтр("ru='Налоговое назначение';uk='Податкове призначення'")); 
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, "НалоговоеНазначениеПриПрочемСписании", "Объект", Отказ);
					КонецЕсли;
				КонецЕсли;	
			КонецЕсли;
		КонецЕсли;
		
		// Проверка соответствия суммы документа расшифровке платежа
		
		Если ВидОперации = Перечисления.ВидыОперацийРКО.ОплатаПоставщику
			ИЛИ ВидОперации = Перечисления.ВидыОперацийРКО.ВозвратДенежныхСредствПокупателю 
			ИЛИ ВидОперации = Перечисления.ВидыОперацийРКО.РасчетыПоКредитамИЗаймамСКонтрагентами Тогда
			
			Если РасшифровкаПлатежа.Итог("СуммаПлатежа") <> СуммаДокумента Тогда
				ШаблонСообщения = НСтр("ru='Не совпадают сумма документа и ее расшифровка';uk='Не збігаються сума документа та її розшифровка'");
				ТекстСообщения  = ОбщегоНазначенияБПКлиентСервер.ПолучитьТекстСообщения(
				"Поле", "Корректность", НСтр("ru='Сумма документа';uk='Сума документа'"),,, ШаблонСообщения); 
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, "СуммаДокумента", "Объект", Отказ);
			КонецЕсли;
			
		КонецЕсли;
		
		// Проверка соответствия суммы документа и ведомостей на выплату зарплаты
		
		Если ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыПоВедомостям Тогда
			
			Если ВыплатаЗаработнойПлаты.Итог("СуммаКВыплате") <> СуммаДокумента Тогда
				ШаблонСообщения = НСтр("ru='Не совпадают сумма документа и общая сумма по платежным ведомостям';uk='Не збігаються сума документа і загальна сума за платіжними відомостями'");
				ТекстСообщения  = ОбщегоНазначенияБПКлиентСервер.ПолучитьТекстСообщения(
				"Поле", "Корректность", НСтр("ru='Сумма документа';uk='Сума документа'"),,, ШаблонСообщения); 
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, "СуммаДокумента", "Объект", Отказ);
			КонецЕсли;
			
		КонецЕсли;
		
		// Построчная проверка заполнения отдельных реквизитов ТЧ РасшифровкаПлатежа
		
		ЕстьРасчетыСПоставщикамиПокупателями = ВидОперации = Перечисления.ВидыОперацийРКО.ОплатаПоставщику
		ИЛИ ВидОперации = Перечисления.ВидыОперацийРКО.ВозвратДенежныхСредствПокупателю;
		
		ШаблонТекстаСообщения = ОбщегоНазначенияБПКлиентСервер.ПолучитьТекстСообщения(
		"Колонка", "Заполнение", "%1", "%2", НСтр("ru='Расшифровка платежа';uk='Розшифровка платежу'"));
		
		Для каждого СтрокаПлатежа Из РасшифровкаПлатежа Цикл
			
			Если ЗначениеЗаполнено(СтрокаПлатежа.ДоговорКонтрагента) 
				И СтрокаПлатежа.СуммаПлатежа > 0
				И СтрокаПлатежа.СуммаВзаиморасчетов = 0 Тогда
				
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонТекстаСообщения, НСтр("ru='Сумма расчетов';uk='Сума розрахунків'"), СтрокаПлатежа.НомерСтроки);
				Поле = "РасшифровкаПлатежа[" + Формат((СтрокаПлатежа.НомерСтроки-1), "ЧН=0; ЧГ=") + "].СуммаВзаиморасчетов";
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
				
			КонецЕсли;
			
			Если ЕстьРасчетыСПоставщикамиПокупателями
				И НЕ ЗначениеЗаполнено(СтрокаПлатежа.СчетУчетаРасчетовСКонтрагентом) Тогда
				
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонТекстаСообщения, НСтр("ru='Счет расчетов';uk='Рахунок розрахунків'"), СтрокаПлатежа.НомерСтроки);
				Поле = "РасшифровкаПлатежа[" + Формат((СтрокаПлатежа.НомерСтроки-1), "ЧН=0; ЧГ=") + "].СчетУчетаРасчетовСКонтрагентом";
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
				
			КонецЕсли;
			
			Если  ЕстьРасчетыСПоставщикамиПокупателями И ЕстьНДС Тогда
				// проверим заполнение ТЧ для целей налогового учета (упрощенный налоговый учет)
				
				Если НЕ СтрокаПлатежа.ДоговорКонтрагента.СложныйНалоговыйУчет Тогда
					
					// Сделка должна быть заполнена, если учет взаиморасчетов ведется по заказам.
					Если ЕстьНДС И СтрокаПлатежа.СчетУчетаНДС.Пустая() Тогда
						
						ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						ШаблонТекстаСообщения, НСтр("ru='Счет учета НДС (неподтвержденный)';uk='Рахунок ПДВ (непідтверджений)'"), СтрокаПлатежа.НомерСтроки);
						Поле = "РасшифровкаПлатежа[" + Формат((СтрокаПлатежа.НомерСтроки-1), "ЧН=0; ЧГ=") + "].СчетУчетаНДС";
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
						
					КонецЕсли;
					
					Если ЕстьНДС И СтрокаПлатежа.СчетУчетаНДСПодтвержденный.Пустая() Тогда
						
						ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						ШаблонТекстаСообщения, НСтр("ru='Счет учета НДС н/о (н/к)';uk='Рахунок обліку ПДВ п/з (п/к)'"), СтрокаПлатежа.НомерСтроки);
						Поле = "РасшифровкаПлатежа[" + Формат((СтрокаПлатежа.НомерСтроки-1), "ЧН=0; ЧГ=") + "].СчетУчетаНДСПодтвержденный";
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
						
					КонецЕсли;
					
					Если СтрокаПлатежа.НалоговоеНазначение.Пустая()  И ВидОперации = Перечисления.ВидыОперацийРКО.ОплатаПоставщику Тогда
						
						ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						ШаблонТекстаСообщения, НСтр("ru='Налоговое назначение';uk='Податкове призначення'"), СтрокаПлатежа.НомерСтроки);
						Поле = "РасшифровкаПлатежа[" + Формат((СтрокаПлатежа.НомерСтроки-1), "ЧН=0; ЧГ=") + "].НалоговоеНазначение";
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли; 
			
			Если  ВидОперации = Перечисления.ВидыОперацийРКО.ВозвратДенежныхСредствПокупателю И ЕстьНалогНаПрибыльДо2015 Тогда
				
				Если   СтрокаПлатежа.ВозвратАвансаДо01042011НУ И НЕ ЗначениеЗаполнено(СтрокаПлатежа.СтатьяПоВозвратуАвансаДо2011НУ) Тогда
					
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					ШаблонТекстаСообщения, НСтр("ru='Статья по возврату аванса до 01.04.2011';uk='Стаття з повернення авансу до 01.04.2011'"), СтрокаПлатежа.НомерСтроки);
					Поле = "РасшифровкаПлатежа[" + Формат((СтрокаПлатежа.НомерСтроки-1), "ЧН=0; ЧГ=") + "].СтатьяПоВозвратуАвансаДо2011НУ";
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
					
				КонецЕсли;
				
			КонецЕсли;				
			
		КонецЦикла;
		
		ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
		
	КонецПроцедуры
	
	Процедура ОбработкаПроведения(Отказ, Режим)
		
		// ПОДГОТОВКА ПРОВЕДЕНИЯ ПО ДАННЫМ ДОКУМЕНТА
		
		ПроведениеСервер.ПодготовитьНаборыЗаписейКПроведению(ЭтотОбъект);
		Если РучнаяКорректировка Тогда
			Возврат;
		КонецЕсли;
		
		// Заголовок для сообщений об ошибках проведения.
		Заголовок = НСтр("ru='Проведение документа: ';uk='Проведення документа: '") + СокрЛП(Ссылка) + " (" + ВидОперации + ")";
		
		ЕстьРасчетыСКонтрагентами = УчетДенежныхСредствКлиентСервер.ЕстьРасчетыСКонтрагентами(ВидОперации);
		ЕстьРасчетыПоКредитам     = УчетДенежныхСредствКлиентСервер.ЕстьРасчетыПоКредитам(ВидОперации);
		
		// Сформируем структуру реквизитов шапки документа
		СтруктураШапкиДокумента = ОбщегоНазначенияРед12.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
		
		СтруктураШапкиДокумента.Вставить("ЕстьНалогНаПрибыльДо2015", УчетнаяПолитика.ПлательщикНалогаНаПрибыльДо2015(СтруктураШапкиДокумента.Организация,СтруктураШапкиДокумента.Дата));
		СтруктураШапкиДокумента.Вставить("ЕстьНДС", УчетнаяПолитика.ПлательщикНДС(СтруктураШапкиДокумента.Организация,СтруктураШапкиДокумента.Дата));
		СтруктураШапкиДокумента.Вставить("ЕстьЕдиныйНалог", УчетнаяПолитика.ПлательщикЕдиногоНалога(СтруктураШапкиДокумента.Организация,СтруктураШапкиДокумента.Дата));
		СтруктураШапкиДокумента.Вставить("ВестиУчетДенежныхСредствПоОбособленнымПодразделениям" , УчетнаяПолитика.УчетПоОбособленнымПодразделениям(СтруктураШапкиДокумента.Организация,СтруктураШапкиДокумента.Дата));
		
		
		//Проверим на возможность проведения в БУ и НУ
		Если ЕстьРасчетыСКонтрагентами или ЕстьРасчетыПоКредитам тогда
			
			Для каждого СтрокаОплаты из РасшифровкаПлатежа Цикл
				УправлениеВзаиморасчетами.ПроверкаВозможностиПроведенияВ_БУ_НУ(СтруктураШапкиДокумента, СтрокаОплаты.ДоговорКонтрагента,
				Отказ, Заголовок,НСтр("ru='Строка ';uk='Рядок '")+СтрокаОплаты.НомерСтроки+" - ");
			КонецЦикла;
			
		КонецЕсли;
		
		Если Не Отказ Тогда
			ДвиженияПоРегистрам(Режим, Отказ, Заголовок, СтруктураШапкиДокумента);
		КонецЕсли;
		
		Движения.Хозрасчетный.ВыполнитьДействияПередЗаписьюДвижений();
		
		ИНАГРО_Общий.ИНАГРО_ДвиженияЗатратыОрганизации_Приход(СтруктураШапкиДокумента, Движения); // ИНАГРО  
		
		ПроведениеСервер.ПодготовитьНаборыЗаписейКЗаписиДвижений(ЭтотОбъект);
		
	КонецПроцедуры // ОбработкаПроведения
	
	Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
		
		Если ОбменДанными.Загрузка Тогда
			Возврат;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(НомерОрдера) ИЛИ ЭтоНовый() Тогда
			СформироватьНомерОрдера();
		КонецЕсли; 
		
	КонецПроцедуры
	
	Процедура ОбработкаУдаленияПроведения(Отказ)
		
		ПроведениеСервер.ПодготовитьНаборыЗаписейКОтменеПроведения(ЭтотОбъект);
		Движения.Записать();
		
	КонецПроцедуры
	
	Процедура ПриКопировании(ОбъектКопирования)
		
		Дата = НачалоДня(ОбщегоНазначенияБП.ПолучитьРабочуюДату());
		Ответственный = Пользователи.ТекущийПользователь();
		
		// для нового документа стоит очистить номер ордера
		НомерОрдера = "";
		ДокументОснование = Неопределено;
		
	КонецПроцедуры
	
	Процедура СформироватьНомерОрдера()
		
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("Нумератор", 	   Перечисления.Нумераторы.РасходныйКассовыйОрдер);
		СтруктураПараметров.Вставить("Дата",           Дата);
		СтруктураПараметров.Вставить("Организация",    Организация);
		СтруктураПараметров.Вставить("ОбособленноеПодразделение", ОбособленноеПодразделениеОрганизации);
		СтруктураПараметров.Вставить("Валюта", 		   ВалютаДокумента);
		
		УправлениеДенежнымиСредствами.СформироватьСтроковыйНомерДокумента(СтруктураПараметров, НомерОрдера);
		УправлениеДенежнымиСредствами.ЗаписатьОчереднойНомер(СтруктураПараметров, НомерОрдера);
		
	КонецПроцедуры
	
	Процедура ЗаполнитьПоЗарплатеКВыплатеОрганизации(Основание) // ИНАГРО
		
		ВидОперации=Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыПоВедомостям;		
		
		// Определим сумму выплаченной заработной платы
		Запрос=Новый Запрос;		
		
		Запрос.Текст =		
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ПараметрыОплаты.СчетУчета КАК СчетУчета,
		|	СУММА(ПараметрыОплаты.Выплата) КАК СуммаКВыплате
		|ИЗ
		|	Документ.ИНАГРО_ЗарплатаКВыплатеОрганизаций.Зарплата КАК ПараметрыОплаты
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ИНАГРО_ЗарплатаКВыплатеОрганизаций.РаботникиОрганизации КАК РаботникиОрганизации
		|		ПО (РаботникиОрганизации.Сотрудник = ПараметрыОплаты.Сотрудник)
		|			И (РаботникиОрганизации.Ссылка = &Ссылка)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИНАГРО_СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям КАК РанееВыплаченныеСуммы
		|		ПО ПараметрыОплаты.Ссылка = РанееВыплаченныеСуммы.Ведомость
		|			И ПараметрыОплаты.Сотрудник = РанееВыплаченныеСуммы.Сотрудник
		|			И (РанееВыплаченныеСуммы.Регистратор <> &Ссылка)
		|ГДЕ
		|	ПараметрыОплаты.Ссылка = &Ссылка
		|	И РанееВыплаченныеСуммы.Сотрудник ЕСТЬ NULL
		|	И РаботникиОрганизации.ВыплаченностьЗарплаты = ЗНАЧЕНИЕ(Перечисление.ВыплаченностьЗарплаты.Выплачено)
		|	И РаботникиОрганизации.СпособВыплаты = ЗНАЧЕНИЕ(Перечисление.СпособыВыплатыЗарплаты.ЧерезКассу)
		|
		|СГРУППИРОВАТЬ ПО
		|	ПараметрыОплаты.СчетУчета";
		
		Запрос.УстановитьПараметр("Ссылка", Основание);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			СтрокаВедомость = ВыплатаЗаработнойПлаты.Добавить();
			СтрокаВедомость.Ведомость	  = Основание;
			СтрокаВедомость.СчетУчета	  = Выборка.СчетУчета;
			СтрокаВедомость.СуммаКВыплате = Выборка.СуммаКВыплате;
			
		КонецЦикла;
		
		СуммаДокумента = ВыплатаЗаработнойПлаты.Итог("СуммаКВыплате");
		
		Организация = Основание.Организация;
		
	КонецПроцедуры
	
	Процедура ЗаполнитьПоВедомостьВыплатПайщикам(Основание) // ИНАГРО
		
		ВидОперации = Перечисления.ВидыОперацийРКО.ИНАГРО_ВыплатаПаевПоВедомостям;	
		
		Запрос=Новый Запрос;
		
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	СУММА(ИНАГРО_ВедомостьВыплатПайщикамСписокПайщиков.Выплата) КАК СуммаКВыплате,
		|	ИНАГРО_ВедомостьВыплатПайщикамСписокПайщиков.СчетУчетаРасчетовСКонтрагентом КАК СчетУчета,
		|	ИНАГРО_ВедомостьВыплатПайщикамСписокПайщиков.Ссылка КАК Ведомость
		|ИЗ
		|	Документ.ИНАГРО_ВедомостьВыплатПайщикам.СписокПайщиков КАК ИНАГРО_ВедомостьВыплатПайщикамСписокПайщиков
		|ГДЕ
		|	ИНАГРО_ВедомостьВыплатПайщикамСписокПайщиков.СпособВыплаты = &ЧерезКассу
		|	И ИНАГРО_ВедомостьВыплатПайщикамСписокПайщиков.Ссылка.Ссылка = &Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	ИНАГРО_ВедомостьВыплатПайщикамСписокПайщиков.Ссылка,
		|	ИНАГРО_ВедомостьВыплатПайщикамСписокПайщиков.СчетУчетаРасчетовСКонтрагентом";
		
		Запрос.УстановитьПараметр("Ссылка",     Основание);
		Запрос.УстановитьПараметр("ЧерезКассу", Перечисления.СпособыВыплатыЗарплаты.ЧерезКассу);	
		
		РезультатЗапроса = Запрос.Выполнить().Выбрать();
		
		Если РезультатЗапроса.Количество() = 0 Тогда 		
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='В ведомости нет контрагентов со способом выплаты Через кассу!';uk='У відомості нема контрагентів зі способом виплати Через касу'"));						
		КонецЕсли; 	
		
		Пока РезультатЗапроса.Следующий() Цикл
			
			СтрокаВедомость = ВыплатаЗаработнойПлаты.Добавить();
			СтрокаВедомость.Ведомость	  = Основание;
			СтрокаВедомость.СчетУчета	  = РезультатЗапроса.СчетУчета;
			СтрокаВедомость.СуммаКВыплате = РезультатЗапроса.СуммаКВыплате;
			
		КонецЦикла;
		
		СуммаДокумента = ВыплатаЗаработнойПлаты.Итог("СуммаКВыплате");
		
		Организация = Основание.Организация;  	
		
	КонецПроцедуры
	
	Процедура ЗаполнитьПоНачислениюДругихВыплат(Основание) // ИНАГРО
		
		ВидОперации = Перечисления.ВидыОперацийРКО.ИНАГРО_ДругиеВыплаты;	
		
		Запрос=Новый Запрос;
		
		Запрос.Текст =                             
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	СУММА(НачислениеДругихВыплатТЧ.КВыдаче) КАК СуммаКВыплате,
		|	НачислениеДругихВыплатТЧ.Ссылка КАК Ведомость,
		|	НачислениеДругихВыплатТЧ.Ссылка.СчетВзаиморасчетов КАК СчетУчета
		|ИЗ
		|	Документ.ИНАГРО_НачислениеДругихВыплат.Товары КАК НачислениеДругихВыплатТЧ
		|ГДЕ
		|	НачислениеДругихВыплатТЧ.Ссылка.Ссылка = &Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	НачислениеДругихВыплатТЧ.Ссылка,
		|	НачислениеДругихВыплатТЧ.Ссылка.СчетВзаиморасчетов";
		
		Запрос.УстановитьПараметр("Ссылка",     Основание);
		
		РезультатЗапроса = Запрос.Выполнить().Выбрать();
		
		Если РезультатЗапроса.Количество() = 0 Тогда 		
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='В ведомости нет контрагентов!';uk='У відомості нема контрагентів'"));						
		КонецЕсли; 	
		
		Пока РезультатЗапроса.Следующий() Цикл
			
			СтрокаВедомость = ВыплатаЗаработнойПлаты.Добавить();
			СтрокаВедомость.Ведомость	  = Основание;
			СтрокаВедомость.СчетУчета	  = РезультатЗапроса.СчетУчета;
			СтрокаВедомость.СуммаКВыплате = РезультатЗапроса.СуммаКВыплате;
			
		КонецЦикла;
		
		СуммаДокумента = ВыплатаЗаработнойПлаты.Итог("СуммаКВыплате");
		
		Организация = Основание.Организация;  	
		
	КонецПроцедуры
	
#КонецЕсли

