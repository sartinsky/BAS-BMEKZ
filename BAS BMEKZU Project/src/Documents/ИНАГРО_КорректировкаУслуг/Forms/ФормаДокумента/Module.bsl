#Область ОбработчикиСобытийФормы 

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)	
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

	Если Параметры.Ключ.Пустая() Тогда
		ПодготовитьФормуНаСервере();
	КонецЕсли;
	
	// Уведомим о появлении функционала рабочей даты
	НастройкиПредупреждений = ОбщегоНазначенияБП.НастройкиПредупрежденийОбИзменениях("РабочаяДатаИзДокумента");
	
	// Показываем, если это новый документ и сама рабочая дата еще не установлена.
	НастройкиПредупреждений.РабочаяДатаИзДокумента = НастройкиПредупреждений.РабочаяДатаИзДокумента
		И Параметры.Ключ.Пустая()
		И НЕ ЗначениеЗаполнено(БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("РабочаяДата"));	
		
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)

	ОбщегоНазначенияБПКлиент.ОбработкаОповещенияФормыДокумента(ЭтаФорма, Объект.Ссылка, ИмяСобытия, Параметр, Источник);

КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	ПодготовитьФормуНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	УстановитьСостояниеДокумента();

КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)

	Объект.ДатаОкончания = Объект.Дата;
	
	Если НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДатаДокумента) Тогда
		// Изменение времени не влияет на поведение документа.
		ТекущаяДатаДокумента = Объект.Дата;
		Возврат;
	КонецЕсли;	
	
	// Общие проверки условий по датам.
	ТребуетсяВызовСервера = ИНАГРО_ЭлеваторКлиент.ТребуетсяВызовСервераПриИзмененииДатыДокумента(Объект.Дата, ТекущаяДатаДокумента);

	// Если определили, что изменение даты может повлиять на какие-либо параметры, 
	// то передаем обработку на сервер.
	Если ТребуетсяВызовСервера Тогда
		ДатаПриИзмененииНаСервере();
	КонецЕсли;
	
	// Запомним новую дату документа.
	ТекущаяДатаДокумента = Объект.Дата;	
		
КонецПроцедуры

&НаСервере
Процедура ДатаПриИзмененииНаСервере()

	УстановитьФункциональныеОпцииФормы();	

КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		ОрганизацияПриИзмененииНаСервере();
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()
	
	УстановитьФункциональныеОпцииФормы();	

КонецПроцедуры

&НаКлиенте
Процедура УрожайПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.Урожай) Тогда
		
		ДанныеОбъекта = Новый Структура("ДатаНачала, Урожай", Объект.ДатаНачала, Объект.Урожай);
		
		УрожайПриИзмененииНаСервере(ДанныеОбъекта);

		Объект.ДатаНачала = ДанныеОбъекта.ДатаНачала;
		
	КонецЕсли;
		
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УрожайПриИзмененииНаСервере(Объект)
	
	Объект.ДатаНачала = Объект.Урожай.ДатаНачала;

КонецПроцедуры

&НаКлиенте
Процедура ОписаниеДвиженияФормы36НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(
		Элемент.ТекстРедактирования,
		ЭтотОбъект,
		"Объект.ОписаниеДвиженияФормы36",
		НСтр("ru='Описание движения формы 36';uk='Опис руху форми 36'"));

КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(
		Элемент.ТекстРедактирования,
		ЭтотОбъект,
		"Объект.Комментарий");

КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ВыборПериода(Команда)
	
	ПараметрыФормыВыбора = Новый Структура("НачалоПериода, КонецПериода", Объект.ДатаНачала, Объект.ДатаОкончания);
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыбратьПериодЗавершение", ЭтотОбъект);
	ОткрытьФорму("ОбщаяФорма.ВыборСтандартногоПериода", ПараметрыФормыВыбора, Элементы.ВыборПериода, , , , ОписаниеОповещения);

КонецПроцедуры

&НаКлиенте
Процедура ВыбратьПериодЗавершение(РезультатВыбора, ДопПараметры) Экспорт
	
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Объект.ДатаНачала    = РезультатВыбора.НачалоПериода;
	Объект.ДатаОкончания = РезультатВыбора.КонецПериода;
		
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПериодКорректировки(Команда)
	
	УстановитьПериодКорректировкиНаСервере();	
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПериодКорректировкиНаСервере()
	
	Если ЗначениеЗаполнено(Объект.Урожай) Тогда
		Объект.ДатаНачала = Объект.Урожай.ДатаНачала;
	КонецЕсли;
	
	Объект.ДатаОкончания = Объект.Дата;
			
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоОстаткам(Команда)
	
	Если Объект.Услуги.Количество()> 0 Тогда
		ТекстВопроса = НСтр("ru='Перед заполнением табличная часть будет очищена. Заполнить?';uk='Перед заповненням таблична частина буде очищена. Заповнити?'");
		Оповещение = Новый ОписаниеОповещения("ЗаполнитьПоОстаткамЗавершение", ЭтотОбъект, Параметры);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);  
	Иначе
		ЗаполнитьПоОстаткамНаСервере();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоОстаткамЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
   	
    Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда 		
		Возврат;
	КонецЕсли;
	
	Объект.Услуги.Очистить();  	
	
	ЗаполнитьПоОстаткамНаСервере();	
			
КонецПроцедуры  

&НаКлиенте
Процедура ЗаполнитьПоСуммам(Команда)
		
	Если Объект.Услуги.Количество()> 0 Тогда
		ТекстВопроса = НСтр("ru='Перед заполнением табличная часть будет очищена. Заполнить?';uk='Перед заповненням таблична частина буде очищена. Заповнити?'");
		Оповещение = Новый ОписаниеОповещения("ЗаполнитьПоСуммамЗавершение", ЭтотОбъект, Параметры);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);  
	Иначе
		ЗаполнитьПоСуммамНаСервере();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоСуммамЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
   	
    Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда 		
		Возврат;
	КонецЕсли;
	
	Объект.Услуги.Очистить();  	
	
	ЗаполнитьПоСуммамНаСервере();	
			
КонецПроцедуры  

&НаКлиенте
Процедура КорректироватьПриход(Команда)
	
	Для Каждого СтрокаТабличнойЧасти Из Объект.Услуги Цикл		
		СтрокаТабличнойЧасти.ВидДвижения = ПредопределенноеЗначение("Перечисление.ИНАГРО_ВидыДвижений.Приход");		
	КонецЦикла;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура КорректироватьРасход(Команда)
	
	Для Каждого СтрокаТабличнойЧасти Из Объект.Услуги Цикл		
		СтрокаТабличнойЧасти.ВидДвижения = ПредопределенноеЗначение("Перечисление.ИНАГРО_ВидыДвижений.Расход");		
	КонецЦикла;

	Модифицированность = Истина;

КонецПроцедуры

&НаКлиенте
Процедура УстановитьКоличествоСумму(Команда)
	
	Для Каждого СтрокаТабличнойЧасти Из Объект.Услуги Цикл 		
		СтрокаТабличнойЧасти.Количество	= СтрокаТабличнойЧасти.КоличествоПоУчету;
		СтрокаТабличнойЧасти.Стоимость	= СтрокаТабличнойЧасти.СтоимостьПоУчету;		
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура УстановитьКоличество(Команда)
	
	Для Каждого СтрокаТабличнойЧасти Из Объект.Услуги Цикл		
		СтрокаТабличнойЧасти.Количество	= СтрокаТабличнойЧасти.КоличествоПоУчету;		
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтоимость(Команда)
	
	Для Каждого СтрокаТабличнойЧасти Из Объект.Услуги Цикл		
		СтрокаТабличнойЧасти.Стоимость = СтрокаТабличнойЧасти.СтоимостьПоУчету;		
	КонецЦикла;

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ПодготовитьФормуНаСервере()
	
	ТекущаяДатаДокумента = Объект.Дата;
	
	УстановитьФункциональныеОпцииФормы();
	
	УстановитьПериодКорректировкиНаСервере();	
	
	УстановитьСостояниеДокумента();
		
КонецПроцедуры

&НаСервере
Процедура УстановитьФункциональныеОпцииФормы()

	ОбщегоНазначенияБПКлиентСервер.УстановитьПараметрыФункциональныхОпцийФормыДокумента(ЭтаФорма);

КонецПроцедуры 

&НаСервере
Процедура УстановитьСостояниеДокумента()
	
	СостояниеДокумента = ОбщегоНазначенияБП.СостояниеДокумента(Объект);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоОстаткамНаСервере()
			
	Фильтр = "";
	Фильтр = Фильтр + ?(ЗначениеЗаполнено(Объект.Организация),	" И Организация = &Организация ", "");
	Фильтр = Фильтр + ?(ЗначениеЗаполнено(Объект.Урожай),		" И Урожай = &Урожай ", "");	
	Фильтр = Фильтр + ?(ЗначениеЗаполнено(Объект.Склад),		" И Склад = &Склад ", "");
	Фильтр = Фильтр + ?(ЗначениеЗаполнено(Объект.ВидХранения),	" И ВидХранения = &ВидХранения ", "");	
	Фильтр = Фильтр + ?(ЗначениеЗаполнено(Объект.Номенклатура), " И Номенклатура = &Номенклатура ", "");
	Фильтр = Фильтр + ?(ЗначениеЗаполнено(Объект.Культура),	    " И Контрагент = &Контрагент ", "");
	Фильтр = Фильтр + ?(ЗначениеЗаполнено(Объект.Культура),	    " И Культура = &Культура ", "");
	
	Запрос = Новый запрос;
			
	Запрос.Текст =   "ВЫБРАТЬ
	|	ИНАГРО_РасчетыПоУслугамОстатки.Организация КАК Организация,
	|	ИНАГРО_РасчетыПоУслугамОстатки.Контрагент КАК Контрагент,
	|	ИНАГРО_РасчетыПоУслугамОстатки.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ИНАГРО_РасчетыПоУслугамОстатки.Номенклатура КАК Номенклатура,
	|	ИНАГРО_РасчетыПоУслугамОстатки.Культура КАК Культура,
	|	ИНАГРО_РасчетыПоУслугамОстатки.Склад КАК Склад,
	|	ИНАГРО_РасчетыПоУслугамОстатки.ВидХранения КАК ВидХранения,
	|	ИНАГРО_РасчетыПоУслугамОстатки.Урожай КАК Урожай,
	|	СУММА(ИНАГРО_РасчетыПоУслугамОстатки.КоличествоОстаток) КАК КоличествоОстаток,
	|	СУММА(ИНАГРО_РасчетыПоУслугамОстатки.СтоимостьОстаток) КАК СтоимостьОстаток
	|ИЗ
	|	РегистрНакопления.ИНАГРО_РасчетыПоУслугам.Остатки(&ДатаКорректировки,ДатаРасчета <= &ДатаКорректировки " + Фильтр + " ) КАК ИНАГРО_РасчетыПоУслугамОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	ИНАГРО_РасчетыПоУслугамОстатки.Культура,
	|	ИНАГРО_РасчетыПоУслугамОстатки.Организация,
	|	ИНАГРО_РасчетыПоУслугамОстатки.ДоговорКонтрагента,
	|	ИНАГРО_РасчетыПоУслугамОстатки.Контрагент,
	|	ИНАГРО_РасчетыПоУслугамОстатки.Номенклатура,
	|	ИНАГРО_РасчетыПоУслугамОстатки.Склад,
	|	ИНАГРО_РасчетыПоУслугамОстатки.ВидХранения,
	|	ИНАГРО_РасчетыПоУслугамОстатки.Урожай";
	
	Запрос.УстановитьПараметр("Организация",       Объект.Организация);
	Запрос.УстановитьПараметр("Урожай",            Объект.Урожай);	
	Запрос.УстановитьПараметр("Склад",             Объект.Склад);
	Запрос.УстановитьПараметр("ВидХранения",       Объект.ВидХранения);
	Запрос.УстановитьПараметр("Контрагент",        Объект.Контрагент);
	Запрос.УстановитьПараметр("Номенклатура",      Объект.Номенклатура);	
	Запрос.УстановитьПараметр("Культура",          Объект.Культура);
	Запрос.УстановитьПараметр("ДатаКорректировки", Объект.Дата);
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Для Каждого Строки Из Результат Цикл
		
		Если  Строки.КоличествоОстаток = 0
			И Строки.СтоимостьОстаток  = 0 Тогда
			Продолжить;
		КонецЕсли;	
		
		НоваяСтрока = Объект.Услуги.Добавить();
		НоваяСтрока.Контрагент 		   = Строки.Контрагент;
		НоваяСтрока.ДоговорКонтрагента = Строки.ДоговорКонтрагента;
		НоваяСтрока.Номенклатура	   = Строки.Номенклатура;
		НоваяСтрока.Культура		   = Строки.Культура;
		НоваяСтрока.Склад			   = Строки.Склад;
		НоваяСтрока.Урожай			   = Строки.Урожай;
		НоваяСтрока.ВидХранения		   = Строки.ВидХранения;
		НоваяСтрока.КоличествоПоУчету  = Строки.КоличествоОстаток;
		НоваяСтрока.СтоимостьПоУчету   = Строки.СтоимостьОстаток;
		
	КонецЦикла;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоСуммамНаСервере()
	
	Фильтр = "";
	Фильтр = Фильтр + ?(ЗначениеЗаполнено(Объект.Организация),  " И Организация = &Организация ", "");
	Фильтр = Фильтр + ?(ЗначениеЗаполнено(Объект.Урожай),	    " И Урожай = &Урожай ", "");	
	Фильтр = Фильтр + ?(ЗначениеЗаполнено(Объект.Склад),	    " И Склад = &Склад ", "");
	Фильтр = Фильтр + ?(ЗначениеЗаполнено(Объект.ВидХранения),	" И ВидХранения = &ВидХранения ", "");	
	Фильтр = Фильтр + ?(ЗначениеЗаполнено(Объект.Номенклатура), " И Номенклатура = &Номенклатура ", "");
	Фильтр = Фильтр + ?(ЗначениеЗаполнено(Объект.Культура),	    " И Контрагент = &Контрагент ", "");
	Фильтр = Фильтр + ?(ЗначениеЗаполнено(Объект.Культура),	    " И Культура = &Культура ", "");
	
	Запрос = Новый запрос;
	
	Запрос.УстановитьПараметр("Организация",       Объект.Организация);
	Запрос.УстановитьПараметр("Урожай",            Объект.Урожай);	
	Запрос.УстановитьПараметр("Склад",             Объект.Склад);
	Запрос.УстановитьПараметр("ВидХранения",       Объект.ВидХранения);
	Запрос.УстановитьПараметр("Контрагент",        Объект.Контрагент);
	Запрос.УстановитьПараметр("Номенклатура",      Объект.Номенклатура);	
	Запрос.УстановитьПараметр("Культура",          Объект.Культура);
	Запрос.УстановитьПараметр("ДатаКорректировки", Объект.Дата);
	
	Запрос.Текст =   "ВЫБРАТЬ
	|	ИНАГРО_РасчетыПоУслугамОстатки.Организация КАК Организация,
	|	ИНАГРО_РасчетыПоУслугамОстатки.Контрагент КАК Контрагент,
	|	ИНАГРО_РасчетыПоУслугамОстатки.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ИНАГРО_РасчетыПоУслугамОстатки.Номенклатура КАК Номенклатура,
	|	ИНАГРО_РасчетыПоУслугамОстатки.Культура КАК Культура,
	|	ИНАГРО_РасчетыПоУслугамОстатки.Склад КАК Склад,
	|	ИНАГРО_РасчетыПоУслугамОстатки.ВидХранения КАК ВидХранения,
	|	ИНАГРО_РасчетыПоУслугамОстатки.Урожай КАК Урожай,
	|	СУММА(ИНАГРО_РасчетыПоУслугамОстатки.КоличествоОстаток) КАК КоличествоОстаток,
	|	СУММА(ИНАГРО_РасчетыПоУслугамОстатки.СтоимостьОстаток) КАК СтоимостьОстаток
	|ИЗ
	|	РегистрНакопления.ИНАГРО_РасчетыПоУслугам.Остатки(&ДатаКорректировки,ДатаРасчета <= &ДатаКорректировки " + Фильтр + " ) КАК ИНАГРО_РасчетыПоУслугамОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	ИНАГРО_РасчетыПоУслугамОстатки.Культура,
	|	ИНАГРО_РасчетыПоУслугамОстатки.Организация,
	|	ИНАГРО_РасчетыПоУслугамОстатки.ДоговорКонтрагента,
	|	ИНАГРО_РасчетыПоУслугамОстатки.Контрагент,
	|	ИНАГРО_РасчетыПоУслугамОстатки.Номенклатура,
	|	ИНАГРО_РасчетыПоУслугамОстатки.Склад,
	|	ИНАГРО_РасчетыПоУслугамОстатки.ВидХранения,
	|	ИНАГРО_РасчетыПоУслугамОстатки.Урожай";
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Для Каждого Строка Из Результат Цикл
		
		Если    Строка.КоличествоОстаток <> 0
			ИЛИ Строка.СтоимостьОстаток = 0 Тогда
			Продолжить;
		КонецЕсли;	
		
		НоваяСтрока = Объект.Услуги.Добавить();
		НоваяСтрока.Контрагент 		   = Строка.Контрагент;
		НоваяСтрока.ДоговорКонтрагента = Строка.ДоговорКонтрагента;
		НоваяСтрока.Номенклатура	   = Строка.Номенклатура;
		НоваяСтрока.Культура		   = Строка.Культура;
		НоваяСтрока.Склад			   = Строка.Склад;
		НоваяСтрока.Урожай			   = Строка.Урожай;
		НоваяСтрока.ВидХранения		   = Строка.ВидХранения;
		НоваяСтрока.КоличествоПоУчету  = Строка.КоличествоОстаток;
		НоваяСтрока.СтоимостьПоУчету   = Строка.СтоимостьОстаток;
		
	КонецЦикла;
	
	Модифицированность = Истина;

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункцииБСП

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти