#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПроцедурыИФункцииПечати

Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт

	// Требование
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "Требование";
	КомандаПечати.Представление = НСтр("ru='Требование';uk='Вимога'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечати";
	КомандаПечати.СписокФорм    = "ФормаСписка,ФормаДокументаОбщая";

	// Накладная
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "Накладная";
	КомандаПечати.Представление = НСтр("ru='Накладная';uk='Накладна'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечати";
	КомандаПечати.СписокФорм    = "ФормаДокументаОбщая";
	КомандаПечати.Порядок       = 100;
	
	// Накладная115
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "Накладная115";
	КомандаПечати.Представление = НСтр("ru='Накладная(форма 115)';uk='Накладна(форма 115)'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечати";
	КомандаПечати.СписокФорм    = "ФормаДокументаОбщая";
	КомандаПечати.Порядок       = 200;

	// Распоряжение
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "Распоряжение";
	КомандаПечати.Представление = НСтр("ru = 'Распоряжение'; uk = 'Розпорядження'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечати";
	КомандаПечати.СписокФорм    = "ФормаДокументаОбщая";
	КомандаПечати.Порядок       = 300;
	
	// Реестр документов
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "Реестр";
	КомандаПечати.Представление = НСтр("ru='Реестр документов';uk='Реєстр документів'");
	КомандаПечати.ЗаголовокФормы= НСтр("ru='Реестр документов ""Акт списания""';uk='Реєстр документів ""Акт списания""'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечатиРеестраДокументов";
	КомандаПечати.СписокФорм    = "ФормаСписка";
	КомандаПечати.Порядок       = 100;

КонецПроцедуры

Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	// Устанавливаем признак доступности печати покомплектно.
	ПараметрыВывода.ДоступнаПечатьПоКомплектно = Истина;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "Требование") Тогда
		 // Формируем табличный документ и добавляем его в коллекцию печатных форм.
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "Требование", НСтр("ru='Требование';uk='Вимога'"), 
			ПечатьТребование(МассивОбъектов, ОбъектыПечати, ПараметрыВывода),,"Документ.ИНАГРО_АктСписания.Требование", , Истина);
	КонецЕсли;

	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "Накладная") Тогда
		 // Формируем табличный документ и добавляем его в коллекцию печатных форм.
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "Накладная", НСтр("ru='Накладная';uk='Накладна'"), 
			ПечатьНакладная(МассивОбъектов, ОбъектыПечати, ПараметрыВывода),,"Документ.ИНАГРО_АктСписания.Накладная", , Истина);
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "Накладная115") Тогда
		 // Формируем табличный документ и добавляем его в коллекцию печатных форм.
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "Накладная115", НСтр("ru='Накладная(форма 115)';uk='Накладна(форма 115)'"), 
			ПечатьНакладная115(МассивОбъектов, ОбъектыПечати, ПараметрыВывода),,"Документ.ИНАГРО_АктСписания.Накладная115", , Истина);
	КонецЕсли;

	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "Распоряжение") Тогда
		 // Формируем табличный документ и добавляем его в коллекцию печатных форм.
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "Распоряжение", НСтр("ru = 'Распоряжение'; uk = 'Розпорядження'"), 
			ПечатьРаспоряжение(МассивОбъектов, ОбъектыПечати, ПараметрыВывода),,"Документ.ИНАГРО_АктСписания.Распоряжение", , Истина);
	КонецЕсли;

КонецПроцедуры // Печать

Функция ПечатьТребование(МассивОбъектов, ОбъектыПечати, ПараметрыВывода)

	УстановитьПривилегированныйРежим(Истина);
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ИНАГРО_АктСписания.ПФ_MXL_Требование");
	// печать производится на языке, указанном в настройках пользователя
	КодЯзыкаПечать = ПараметрыВывода.КодЯзыкаДляМногоязычныхПечатныхФорм;
	Макет.КодЯзыкаМакета = КодЯзыкаПечать;
	ТабДокумент = Новый ТабличныйДокумент;
	ПервыйДокумент = Истина;
	Для каждого Ссылка Из МассивОбъектов Цикл
		Если НЕ ПервыйДокумент Тогда
		     ТабДокумент.ВывестиВертикальныйРазделительСтраниц();
		 КонецЕсли; 
		 ПервыйДокумент = Ложь;

		//Шапка
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Ссылка",Ссылка);
		Запрос.Текст = "ВЫБРАТЬ
		|	ИНАГРО_АктСписания.Организация.НаименованиеПолное КАК Организация,
		|	ИНАГРО_АктСписания.Номер КАК НомерДок,
		|	ИНАГРО_АктСписания.Дата КАК ДатаДок,
		|	ИНАГРО_АктСписания.Владелец.НаименованиеПолное КАК Владелец
		|ИЗ
		|	Документ.ИНАГРО_АктСписания КАК ИНАГРО_АктСписания
		|ГДЕ
		|	ИНАГРО_АктСписания.Ссылка = &Ссылка";
		Шапка = Запрос.Выполнить().Выбрать();
		Шапка.Следующий();
		ОблШапка = Макет.ПолучитьОбласть("Шапка");
		ОблШапка.Параметры.Заполнить(Шапка);
		ОблШапка.Параметры.ДатаДок = Формат(Шапка.ДатаДок, "ДФ='дд ММММ гггг';Л="+ Локализация.ОпределитьКодЯзыкаДляФормат(КодЯзыкаПечать));
		ТабДокумент.Вывести(ОблШапка);
		
		//Строка
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Ссылка",Ссылка);
		Запрос.Текст = "ВЫБРАТЬ
		|	ИНАГРО_АктСписанияСырье.НомерСтроки,
		|	ИНАГРО_АктСписанияСырье.Номенклатура,
		|	ИНАГРО_АктСписанияСырье.ФизическийВес КАК Вес,
		|	ИНАГРО_АктСписанияСырье.Влажность,
		|	ИНАГРО_АктСписанияСырье.СорнаяПримесь,
		//|	ИНАГРО_АктСписанияСырье.Себестоимость КАК Цена,
		|	ИНАГРО_АктСписанияСырье.Сумма
		|ИЗ
		|	Документ.ИНАГРО_АктСписания.Сырье КАК ИНАГРО_АктСписанияСырье
		|ГДЕ
		|	ИНАГРО_АктСписанияСырье.Ссылка = &Ссылка";
		Стр = Запрос.Выполнить().Выбрать();
		Пока Стр.Следующий()Цикл
			ОблСтрока = Макет.ПолучитьОбласть("Строка");
			ОблСтрока.Параметры.Заполнить(Стр);
			ТабДокумент.Вывести(ОблСтрока);
		КонецЦикла;
		
		//Дно
		ОблДно = Макет.ПолучитьОбласть("Дно");
		ОблДно.Параметры.ИтогВес = Запрос.Выполнить().Выгрузить().Итог("Вес");
		ТабДокумент.Вывести(ОблДно);
		КонецЦикла;
		Возврат ТабДокумент;
		
КонецФункции

Функция ПечатьНакладная(МассивОбъектов, ОбъектыПечати, ПараметрыВывода)
	
	УстановитьПривилегированныйРежим(Истина);
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ИНАГРО_АктСписания.ПФ_MXL_Накладная");
	// печать производится на языке, указанном в настройках пользователя
	КодЯзыкаПечать = ПараметрыВывода.КодЯзыкаДляМногоязычныхПечатныхФорм;
	Макет.КодЯзыкаМакета = КодЯзыкаПечать;
	ТабДокумент = Новый ТабличныйДокумент;
	ПервыйДокумент = Истина;
	Для каждого Ссылка Из МассивОбъектов Цикл
		Если НЕ ПервыйДокумент Тогда
		     ТабДокумент.ВывестиВертикальныйРазделительСтраниц();
		 КонецЕсли; 
		 ПервыйДокумент = Ложь;
		
		//Шапка
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Ссылка",Ссылка);
		Запрос.Текст = "ВЫБРАТЬ
		|	ИНАГРО_АктСписания.Организация.НаименованиеПолное КАК Организация,
		|	ИНАГРО_АктСписания.Склад,
		|	ИНАГРО_АктСписания.Номер КАК НомерДок,
		|	ИНАГРО_АктСписания.Дата КАК ДатаДок
		|ИЗ
		|	Документ.ИНАГРО_АктСписания КАК ИНАГРО_АктСписания
		|ГДЕ
		|	ИНАГРО_АктСписания.Ссылка = &Ссылка";
		Шапка = Запрос.Выполнить().Выбрать();
		Шапка.Следующий();
		ОблШапка = Макет.ПолучитьОбласть("Шапка");
		ОблШапка.Параметры.Заполнить(Шапка);
		ОблШапка.Параметры.ДатаДок = Формат(Шапка.ДатаДок, "ДФ='дд ММММ гггг';Л="+ Локализация.ОпределитьКодЯзыкаДляФормат(КодЯзыкаПечать));
		ТабДокумент.Вывести(ОблШапка);
		
		//Строка
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Ссылка",Ссылка);
		Запрос.Текст = "ВЫБРАТЬ
		|	ИНАГРО_АктСписанияСырье.Номенклатура,
		|	ИНАГРО_АктСписанияСырье.ФизическийВес КАК Вес,
		|	ИНАГРО_АктСписанияСырье.Влажность,
		|	ИНАГРО_АктСписанияСырье.СорнаяПримесь
		|ИЗ
		|	Документ.ИНАГРО_АктСписания.Сырье КАК ИНАГРО_АктСписанияСырье
		|ГДЕ
		|	ИНАГРО_АктСписанияСырье.Ссылка = &Ссылка";
		Стр = Запрос.Выполнить().Выбрать();
		Пока Стр.Следующий()Цикл
			ОблСтрока = Макет.ПолучитьОбласть("Строка");
			ОблСтрока.Параметры.Заполнить(Стр);
			ТабДокумент.Вывести(ОблСтрока);
		КонецЦикла;
		//Дно
		ОблДно = Макет.ПолучитьОбласть("Дно");
		ТабДокумент.Вывести(ОблДно);
		КонецЦикла;
		Возврат ТабДокумент;
	    
КонецФункции

Функция ПечатьНакладная115(МассивОбъектов, ОбъектыПечати, ПараметрыВывода)
	
		УстановитьПривилегированныйРежим(Истина);
		Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ИНАГРО_АктСписания.ПФ_MXL_Накладная115");
		// печать производится на языке, указанном в настройках пользователя
		КодЯзыкаПечать = ПараметрыВывода.КодЯзыкаДляМногоязычныхПечатныхФорм;
		Макет.КодЯзыкаМакета = КодЯзыкаПечать;
		ТабДокумент = Новый ТабличныйДокумент;
		ПервыйДокумент = Истина;
		Для каждого Ссылка Из МассивОбъектов Цикл
		Если НЕ ПервыйДокумент Тогда
		     ТабДокумент.ВывестиВертикальныйРазделительСтраниц();
		 КонецЕсли; 
		 ПервыйДокумент = Ложь;

			//Шапка
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Ссылка",Ссылка);
		Запрос.Текст = "ВЫБРАТЬ
		|	ИНАГРО_АктСписания.Организация.НаименованиеПолное КАК Организация,
		|	ИНАГРО_АктСписания.Склад,
		|	ИНАГРО_АктСписания.Номер КАК НомерДок,
		|	ИНАГРО_АктСписания.Дата КАК ДатаДок
		|ИЗ
		|	Документ.ИНАГРО_АктСписания КАК ИНАГРО_АктСписания
		|ГДЕ
		|	ИНАГРО_АктСписания.Ссылка = &Ссылка";
		Шапка = Запрос.Выполнить().Выбрать();
		Шапка.Следующий();
		ОблШапка = Макет.ПолучитьОбласть("Шапка");
		ОблШапка.Параметры.Заполнить(Шапка);
		ОблШапка.Параметры.Организация = Шапка.Организация;
		ОблШапка.Параметры.НомерДок = Шапка.НомерДок;
		ОблШапка.Параметры.ДатаДок = Формат(Шапка.ДатаДок, "ДФ='дд ММММ гггг';Л="+ Локализация.ОпределитьКодЯзыкаДляФормат(КодЯзыкаПечать));
		ОблШапка.Параметры.Склад = Шапка.Склад;
		ТабДокумент.Вывести(ОблШапка);
		//Строка
		ОблСтрока = Макет.ПолучитьОбласть("Строка");
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Ссылка",Ссылка);
		Запрос.Текст = "ВЫБРАТЬ
		|	ИНАГРО_АктСписанияСырье.Номенклатура,
		|	ИНАГРО_АктСписанияСырье.Количество КАК КвоШт,
		|	ИНАГРО_АктСписанияСырье.ФизическийВес КАК Кво,
		|	ИНАГРО_АктСписанияСырье.Влажность
		|ИЗ
		|	Документ.ИНАГРО_АктСписания.Сырье КАК ИНАГРО_АктСписанияСырье
		|ГДЕ
		|	ИНАГРО_АктСписанияСырье.Ссылка = &Ссылка";
		
		Стр = Запрос.Выполнить().Выбрать();
		Пока Стр.Следующий()Цикл
			ОблСтрока.Параметры.Заполнить(Стр);
			ТабДокумент.Вывести(ОблСтрока);
		КонецЦикла;
		
		// Дно
		ОблДно = Макет.ПолучитьОбласть("Дно");
		ОблДно.Параметры.ИтогКвоПрописью = ЧислоПрописью(Запрос.Выполнить().Выгрузить().Итог("Кво"),"Л="+Локализация.ОпределитьКодЯзыкаДляФормат(КодЯзыкаПечать));
		ТабДокумент.Вывести(ОблДно);
		
		// Дно2
		ОблДно2 = Макет.ПолучитьОбласть("Дно2");
		ТабДокумент.Вывести(ОблДно2);
		
		//// Дно3
		//ОблДно3 = Макет.ПолучитьОбласть("Дно3");
		//ТабДокумент.Вывести(ОблДно3);
		КонецЦикла;

		ВОЗВРАТ ТабДокумент;
			
КонецФункции

Функция ПечатьРаспоряжение(МассивОбъектов, ОбъектыПечати, ПараметрыВывода)
	
		УстановитьПривилегированныйРежим(Истина);
		Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ИНАГРО_АктСписания.ПФ_MXL_Распоряжение");
		// печать производится на языке, указанном в настройках пользователя
		КодЯзыкаПечать = ПараметрыВывода.КодЯзыкаДляМногоязычныхПечатныхФорм;
		Макет.КодЯзыкаМакета = КодЯзыкаПечать;
		ТабДокумент = Новый ТабличныйДокумент;
		ПервыйДокумент = Истина;
		Для каждого Ссылка Из МассивОбъектов Цикл
		Если НЕ ПервыйДокумент Тогда
		     ТабДокумент.ВывестиВертикальныйРазделительСтраниц();
		 КонецЕсли; 
		 ПервыйДокумент = Ложь;

		
		//Шапка
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Ссылка",Ссылка);
		Запрос.Текст = "ВЫБРАТЬ
		|	ИНАГРО_АктСписания.Организация.НаименованиеПолное КАК Организация,
		|	ИНАГРО_АктСписания.Номер КАК НомерДок,
		|	ИНАГРО_АктСписания.Дата КАК ДатаДок
		|ИЗ
		|	Документ.ИНАГРО_АктСписания КАК ИНАГРО_АктСписания
		|ГДЕ
		|	ИНАГРО_АктСписания.Ссылка = &Ссылка";
		Шапка = Запрос.Выполнить().Выбрать();
		Шапка.Следующий();
		ОблШапка = Макет.ПолучитьОбласть("Шапка");
		ОблШапка.Параметры.Заполнить(Шапка);
		ОблШапка.Параметры.ДатаДок = Формат(Шапка.ДатаДок, "ДФ='дд ММММ гггг';Л="+ Локализация.ОпределитьКодЯзыкаДляФормат(КодЯзыкаПечать));
		ТабДокумент.Вывести(ОблШапка);
		
		//Строка
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Ссылка",Ссылка);
		Запрос.Текст = "ВЫБРАТЬ
		|	ИНАГРО_АктСписания.Склад,
		|	ИНАГРО_АктСписанияСырье.Номенклатура,
		|	ВЫБОР
		|		КОГДА ИНАГРО_АктСписанияСырье.ЕдиницаИзмерения = ИНАГРО_АктСписанияСырье.Номенклатура.БазоваяЕдиницаИзмерения
		|			ТОГДА ИНАГРО_АктСписанияСырье.ФизическийВес
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК Вес,
		|	ИНАГРО_АктСписанияСырье.ЛабораторныйАнализ.Влажность,
		|	ИНАГРО_АктСписанияСырье.ЛабораторныйАнализ.СорнаяПримесь,
		|	ИНАГРО_АктСписанияСырье.ЛабораторныйАнализ.ЗерноваяПримесь
		|ИЗ
		|	Документ.ИНАГРО_АктСписания.Сырье КАК ИНАГРО_АктСписанияСырье
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ИНАГРО_АктСписания КАК ИНАГРО_АктСписания
		|		ПО ИНАГРО_АктСписанияСырье.Ссылка = ИНАГРО_АктСписания.Ссылка
		|ГДЕ
		|	ИНАГРО_АктСписания.Ссылка = &Ссылка";
		Стр = Запрос.Выполнить().Выбрать();
		Пока Стр.Следующий()Цикл
			ОблСтрока = Макет.ПолучитьОбласть("Строка");
			ОблСтрока.Параметры.Заполнить(Стр);
			ТабДокумент.Вывести(ОблСтрока);
		КонецЦикла;
		
		//Дно
		ОблДно = Макет.ПолучитьОбласть("Дно");
		СрезДиректор = РегистрыСведений.ОтветственныеЛицаОрганизаций.СрезПоследних(Ссылка.Дата,Новый Структура("СтруктурнаяЕдиница,ОтветственноеЛицо",Ссылка.Организация,Перечисления.ОтветственныеЛицаОрганизаций.Руководитель));
		ОблДно.Параметры.ДолжностьДиректора = ?(СрезДиректор.Количество()>0,СрезДиректор[0].Должность,"");
		//Если СрезДиректор.Количество() > 0 Тогда
		//ОблДно.Параметры.ДолжностьДиректора = СрезДиректор[0].Должность;
		//КонецЕсли;
		ТабДокумент.Вывести(ОблДно);
		КонецЦикла;

		Возврат ТабДокумент;
 
КонецФункции

Функция ПолучитьДополнительныеРеквизитыДляРеестра() Экспорт
	
	Результат = Новый Структура;	
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти 

#Область ОбработчикиСобытий

Процедура ОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка)
	
	Если ВидФормы <> "ФормаДокумента"
		И ВидФормы <> "ФормаОбъекта" Тогда
		Возврат;
	КонецЕсли;

	ВидОперации = Неопределено; 

	Если Параметры.Свойство("Ключ") И ЗначениеЗаполнено(Параметры.Ключ) Тогда
		ВидОперации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Параметры.Ключ, "ВидОперации");
	КонецЕсли;

	// Если документ копируется, то вид формы получаем из копируемого документа.
	Если НЕ ЗначениеЗаполнено(ВидОперации) Тогда
		Если Параметры.Свойство("ЗначениеКопирования")
			И ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
			ВидОперации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
				Параметры.ЗначениеКопирования, "ВидОперации");
		КонецЕсли;
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(ВидОперации) Тогда
		Если Параметры.Свойство("ЗначенияЗаполнения") 
			И ТипЗнч(Параметры.ЗначенияЗаполнения) = Тип("Структура") Тогда
			Если Параметры.ЗначенияЗаполнения.Свойство("ВидОперации") Тогда
				ВидОперации = Параметры.ЗначенияЗаполнения.ВидОперации;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ВидОперации) Тогда
		Если Параметры.Свойство("Основание")
			И ЗначениеЗаполнено(Параметры.Основание) Тогда
			ВидОперации = ОпределитьВидОперацииПоДокументуОснованию(Параметры.Основание);
		КонецЕсли;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	ФормыИНАГРО_АктСписания = ПолучитьСоответствиеВидовОперацийФормам();
	ВыбраннаяФорма = ФормыИНАГРО_АктСписания[ВидОперации];
	Если ВыбраннаяФорма = Неопределено Тогда
		ВыбраннаяФорма = "ФормаДокумента";
	КонецЕсли;
	
КонецПроцедуры 

#КонецОбласти 

#Область ПрограммныйИнтерфейс

// Заполняет счета учета номенклатуры в табличной части документа
//
// Параметры:
//
//  Объект - СправочникСсылка, объект контактной информации
// 	ИмяТабличнойЧасти - Строка- имя для табличной части документа
//  СобственноеПодразделение - имя собственного подразделения
//
Процедура ЗаполнитьСчетаУчетаВТабличнойЧасти(Объект, ИмяТабличнойЧасти, СобственноеПодразделение) Экспорт

	ТабличнаяЧасть = Объект[ИмяТабличнойЧасти];
	
	ДанныеОбъекта = Новый Структура("Дата, Организация, ВидОперации, Склад, ОтражатьВБухгалтерскомУчете");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	ДанныеОбъекта.Вставить("СобственноеПодразделение", СобственноеПодразделение);
	
	СоответствиеСведенийОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОСпискеНоменклатуры(
		ОбщегоНазначения.ВыгрузитьКолонку(ТабличнаяЧасть, "Номенклатура", Истина), ДанныеОбъекта);
	
	Для Каждого СтрокаТабличнойЧасти Из ТабличнаяЧасть Цикл
		СведенияОНоменклатуре = СоответствиеСведенийОНоменклатуре.Получить(СтрокаТабличнойЧасти.Номенклатура);
		ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(ДанныеОбъекта, СтрокаТабличнойЧасти, СведенияОНоменклатуре);
	КонецЦикла;

КонецПроцедуры

// Заполняет счета учета номенклатуры в строке табличной части документа
//
// Параметры:
//  ДанныеОбъекта         - структура данных объекта, используемых при заполнении счетов учета (вид операции,
//                          вид договора контрагента, признак комиссионной торговли и т.п.)
//  СтрокаТабличнойЧасти  - Строка - строка табличной части документа
//  СведенияОНоменклатуре - Структура - структура сведений о номенклатуре, либо структура счетов учета
//
Процедура ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(ДанныеОбъекта, СтрокаТабличнойЧасти, СведенияОНоменклатуре) Экспорт
	
	Если СведенияОНоменклатуре = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если СведенияОНоменклатуре.Свойство("СчетаУчета") Тогда
		// СведенияОНоменклатуре - структура сведений номенклатуры
		СчетаУчета = СведенияОНоменклатуре.СчетаУчета;
	ИначеЕсли СведенияОНоменклатуре.Свойство("СчетУчетаБУ") Тогда
		// СведенияОНоменклатуре - структура счетов учета номенклатуры
		СчетаУчета = СведенияОНоменклатуре;
	Иначе
		Возврат;
	КонецЕсли;

	Если ДанныеОбъекта.ОтражатьВБухгалтерскомУчете Тогда
		
		Если  ДанныеОбъекта.СобственноеПодразделение
			И ДанныеОбъекта. ВидОперации = Перечисления.ИНАГРО_ВидыОперацийПереработка.СобственноеСырье Тогда
			СтрокаТабличнойЧасти.СчетУчетаБУ = СчетаУчета.СчетУчетаБУ;				
		Иначе
			СтрокаТабличнойЧасти.СчетУчетаБУ = СчетаУчета.СчетУчетаДоп;				
		КонецЕсли; 	
		
		СтрокаТабличнойЧасти.НалоговоеНазначение = СчетаУчета.НалоговоеНазначение;
		
	Иначе
		
		СтрокаТабличнойЧасти.СчетУчетаБУ         = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
		
	КонецЕсли;	

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПолучитьСоответствиеВидовОперацийФормам() Экспорт

	ФормыИНАГРО_АктСписания = Новый Соответствие;
	
	ФормыИНАГРО_АктСписания.Вставить(Перечисления.ИНАГРО_ВидыОперацийПереработка.ДавальческоеСырье, "ФормаДокументаОбщая");
	ФормыИНАГРО_АктСписания.Вставить(Перечисления.ИНАГРО_ВидыОперацийПереработка.СобственноеСырье,  "ФормаДокументаОбщая");
	ФормыИНАГРО_АктСписания.Вставить(Перечисления.ИНАГРО_ВидыОперацийПереработка.СкладскойУчет,     "ФормаДокументаОбщая");
		
	Возврат ФормыИНАГРО_АктСписания;

КонецФункции 

Функция ОпределитьВидОперацииПоДокументуОснованию(Основание) Экспорт

	Результат = Перечисления.ИНАГРО_ВидыОперацийПереработка.ДавальческоеСырье;

	Возврат Результат;

КонецФункции

Функция ПолучитьФиксированныйМассивВидовОпераций() Экспорт

	МассивВидовОпераций = Новый Массив;
	СписокВидовОпераций = Новый СписокЗначений;
	
	ЗначенияПеречисления = Метаданные.Перечисления.ИНАГРО_ВидыОперацийПереработка.ЗначенияПеречисления;
	Для Каждого ЗначениеПеречисления Из ЗначенияПеречисления Цикл
		ТекущийВидОперации = Перечисления.ИНАГРО_ВидыОперацийПереработка[ЗначениеПеречисления.Имя];
		МассивВидовОпераций.Добавить(ТекущийВидОперации);
	КонецЦикла;
		
	Возврат Новый ФиксированныйМассив(МассивВидовОпераций);

КонецФункции

#КонецОбласти 

#КонецЕсли