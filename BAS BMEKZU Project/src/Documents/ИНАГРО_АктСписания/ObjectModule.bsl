#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда  

Перем мВалютаРегламентированногоУчета; 

#Область ОбработчикиСобытий

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	ТипДанныхЗаполнения = ТипЗнч(ДанныеЗаполнения);
	Если ДанныеЗаполнения <> Неопределено И ТипДанныхЗаполнения <> Тип("Структура")
		И Метаданные().ВводитсяНаОсновании.Содержит(ДанныеЗаполнения.Метаданные()) Тогда
		ЗаполнитьПоДокументуОснованию(ДанныеЗаполнения);
	КонецЕсли;
	
	ИНАГРО_ЭлеваторЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект);

	ЗаполнениеДокументов.Заполнить(ЭтотОбъект, ДанныеЗаполнения);
	
	Если  ТипДанныхЗаполнения = Тип("Структура")
		И ДанныеЗаполнения.Свойство("ВидОперации") Тогда
		ВидОперации = ДанныеЗаполнения.ВидОперации;
	КонецЕсли;	
		
	Если НЕ ЗначениеЗаполнено(СчетЗатрат) Тогда
		СчетЗатрат = ПланыСчетов.Хозрасчетный.ОсновноеПроизводство;			
	КонецЕсли;
	
	УрожайДляПереработки = ХранилищеОбщихНастроек.Загрузить("УрожайДляПереработки", "Элеватор");
	Урожай = ?(ЗначениеЗаполнено(УрожайДляПереработки), УрожайДляПереработки, Урожай);
				
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)	
	
	МассивНепроверяемыхРеквизитов = Новый Массив; 	
	
	Если ВидОперации = Перечисления.ИНАГРО_ВидыОперацийПереработка.СкладскойУчет Тогда		
		МассивНепроверяемыхРеквизитов.Добавить("Владелец");	
		МассивНепроверяемыхРеквизитов.Добавить("ДоговорКонтрагента");
		МассивНепроверяемыхРеквизитов.Добавить("ВидХранения");
		МассивНепроверяемыхРеквизитов.Добавить("Урожай");
	КонецЕсли;
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);	
	
	Если ОтражатьВБухгалтерскомУчете И ЗначениеЗаполнено(СчетЗатрат) Тогда
		КоличествоСубконто = СчетЗатрат.ВидыСубконто.Количество();		
		Для СчетчикСубконто = 1 По КоличествоСубконто Цикл 
			Если СчетЗатрат.ВидыСубконто[СчетчикСубконто-1].Предопределенное Тогда
				ПроверяемыеРеквизиты.Добавить("Субконто" + СчетчикСубконто);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли; 	
	
	ХранилищеОбщихНастроек.Сохранить("УрожайДляПереработки", "Элеватор", Урожай);
	
	Если НЕ ИНАГРО_Элеватор.ПолучитьПараметрУчетаЭлеватора(Дата, "ОтключитьАвтоматическоеНачислениеУслуг", Ложь) Тогда 
		ЗаполнитьУслуги();
	КонецЕсли;

КонецПроцедуры 

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	Перем Заголовок, СтруктураШапкиДокумента;
	Перем ТаблицаСырья;
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКПроведению(ЭтотОбъект);
		   
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначенияБПВызовСервера.ПредставлениеДокументаПриПроведении(Ссылка);
	
	ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента);	
	
	ПодготовитьПараметрыУчетнойПолитики(СтруктураШапкиДокумента, Отказ, Заголовок);	
	
	ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаСырья, Отказ, Заголовок);
		
	// Движения по документу
	Если НЕ Отказ Тогда
		ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаСырья, Отказ, Заголовок);
	КонецЕсли;
	
	Движения.Хозрасчетный.ВыполнитьДействияПередЗаписьюДвижений();

	ПроведениеСервер.ПодготовитьНаборыЗаписейКЗаписиДвижений(ЭтотОбъект);	

КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКОтменеПроведения(ЭтотОбъект);
	Движения.Записать();
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)

	Дата = НачалоДня(ОбщегоНазначения.ТекущаяДатаПользователя());
	Ответственный = Пользователи.ТекущийПользователь();	
		
КонецПроцедуры

#КонецОбласти

#Область Проведение

// Процедура формирует структуру шапки документа и дополнительных полей.
//
Процедура ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента) Экспорт

	// Дерево значений, содержащее имена необходимых полей в запросе по шапке.
	Перем ДеревоПолейЗапросаПоШапке;	
	
	СтруктураШапкиДокумента = ОбщегоНазначенияРед12.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	
	// Заполним по шапке документа дерево параметров, нужных при проведении.
	ДеревоПолейЗапросаПоШапке = ОбщегоНазначенияРед12.СформироватьДеревоПолейЗапросаПоШапке(); 	
	
	ОбщегоНазначенияРед12.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "Организация", "ДоговорОрганизация");
	ОбщегоНазначенияРед12.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "ВидДоговора", "ВидДоговора");
	ОбщегоНазначенияРед12.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Склад",                "ТипСклада",   "ТипСклада");

	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа.
	СтруктураШапкиДокумента = УправлениеЗапасами.СформироватьЗапросПоДеревуПолей(ЭтотОбъект, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета);
		
КонецПроцедуры

// Процедура определяет параметры учетной политики
//
Процедура ПодготовитьПараметрыУчетнойПолитики(СтруктураШапкиДокумента, Отказ, Заголовок)
	
	РазрешитьУчетУслугБезПлановыхЦен = НЕ УчетнаяПолитика.ПорядокРаспределенияРасходовНаОказаниеУслуг(СтруктураШапкиДокумента.Организация, СтруктураШапкиДокумента.Дата) = Перечисления.ПорядокРаспределенияРасходовНаОказаниеУслуг.ПоПлановымЦенам;
	
	СтруктураШапкиДокумента.Вставить("ЕстьНалогНаПрибыльДо2015",         УчетнаяПолитика.ПлательщикНалогаНаПрибыльДо2015(СтруктураШапкиДокумента.Организация, СтруктураШапкиДокумента.Дата));
	СтруктураШапкиДокумента.Вставить("ЕстьНДС",                          УчетнаяПолитика.ПлательщикНДС(СтруктураШапкиДокумента.Организация, СтруктураШапкиДокумента.Дата));
	СтруктураШапкиДокумента.Вставить("СпособОценкиТоваровВРознице",      УчетнаяПолитика.СпособОценкиТоваровВРознице(СтруктураШапкиДокумента.Организация, СтруктураШапкиДокумента.Дата));
	СтруктураШапкиДокумента.Вставить("РазрешитьУчетУслугБезПлановыхЦен", РазрешитьУчетУслугБезПлановыхЦен);
	
КонецПроцедуры

Процедура ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаСырья, Отказ, Заголовок)
	
	// Таблица сырья
	
	СтруктураПолей = Новый Структура();	
	СтруктураПростыхПолей = Новый Структура;
	
	СтруктураПолей.Вставить("Номенклатура",          "Номенклатура");
	СтруктураПолей.Вставить("Количество",            "ФизическийВес * Коэффициент");
	СтруктураПолей.Вставить("СчетУчетаБУ",           "СчетУчетаБУ");
	СтруктураПолей.Вставить("НалоговоеНазначение",   "НалоговоеНазначение");	
	СтруктураПолей.Вставить("ДокументОприходования", "ДокументОприходования");
	СтруктураПолей.Вставить("Субконто1",             "Ссылка.Субконто1");
	СтруктураПолей.Вставить("Субконто2",             "Ссылка.Субконто2"); 				
	СтруктураПолей.Вставить("Субконто3",             "Ссылка.Ссылка.Субконто3");
	
	// Для НалоговоеНазначениеДоходовИЗатрат
	ХарактерЗатрат = УправлениеПроизводствомВызовСервера.ПолучитьХарактерЗатратПоСчетуЗатрат(СчетЗатрат, , Дата);                                                                                                  
	
	Если НЕ (ХарактерЗатрат = "Производство" ИЛИ ХарактерЗатрат = "Строительство" ИЛИ ХарактерЗатрат = "ТЗР" ИЛИ ХарактерЗатрат = "РБП" ИЛИ ХарактерЗатрат = "ОПЗ") Тогда
		СтруктураПолей.Вставить("НалоговоеНазначениеНовое"	 , "Ссылка.НалоговоеНазначениеДоходовИЗатрат");
	Иначе	
		ХарактерЗатрат = Неопределено;
		НалоговоеНазначениеПроводки = Неопределено;
		НалоговоеНазначениеНДС = НСтр("ru='Из табличной части';uk='З табличної частини'");
		
		СтруктураСубконто = Новый Структура("Субконто1, Субконто2, Субконто3", Субконто1, Субконто2, Субконто3);
		НалоговыйУчет.ОпределениеАналитикиНалоговогоУчетаВПроводкахДляЗатрат(СтруктураСубконто, СчетЗатрат, ХарактерЗатрат, 
		НалоговоеНазначениеПроводки, ,
		НалоговоеНазначениеНДС, ,
		, Дата);
		Если Строка(НалоговоеНазначениеПроводки) = НСтр("ru='Из табличной части';uk='З табличної частини'") Тогда
			СтруктураПолей.Вставить("НалоговоеНазначениеНовое", "НалоговоеНазначение");
		Иначе
			СтруктураПростыхПолей.Вставить("НалоговоеНазначениеНовое", НалоговоеНазначениеПроводки);
		КонецЕсли;
	КонецЕсли;	
	
	РезультатЗапросаПоСырью = ОбщегоНазначенияРед12.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Сырье", СтруктураПолей, СтруктураПростыхПолей);	
	ТаблицаСырья = ПодготовитьТаблицуСырьяБУХ(РезультатЗапросаПоСырью, СтруктураШапкиДокумента);
	
КонецПроцедуры

Функция ПодготовитьТаблицуСырьяБУХ(РезультатЗапросаПоСырью, СтруктураШапкиДокумента)
	
	ТаблицаСырья = РезультатЗапросаПоСырью.Выгрузить();
	
	ТаблицаСырья.Колонки.Добавить("Регистратор");
	ТаблицаСырья.Колонки.Добавить("Склад");
	ТаблицаСырья.Колонки.Добавить("Организация");
	ТаблицаСырья.Колонки.Добавить("ДоговорКонтрагента");
	ТаблицаСырья.Колонки.Добавить("Валюта");
	ТаблицаСырья.Колонки.Добавить("ВходящийНДС");
	ТаблицаСырья.Колонки.Добавить("КоэффОплаты");
	ТаблицаСырья.Колонки.Добавить("СчетУчетаНУ");
	
	КоэффОплаты = 1;
	
	ТаблицаСырья.ЗаполнитьЗначения(КоэффОплаты,   							   "КоэффОплаты");
	ТаблицаСырья.ЗаполнитьЗначения(ЭтотОбъект,    							   "Регистратор");
	ТаблицаСырья.ЗаполнитьЗначения(СтруктураШапкиДокумента.Склад,      	       "Склад");
	ТаблицаСырья.ЗаполнитьЗначения(СтруктураШапкиДокумента.Организация,	       "Организация");
	ТаблицаСырья.ЗаполнитьЗначения(СтруктураШапкиДокумента.ДоговорКонтрагента, "ДоговорКонтрагента");	
	
	ТаблицаСырья.Колонки.Добавить("НоменклатурнаяГруппа");
	ТаблицаСырья.Колонки.Добавить("КорСчетСписанияБУ");
	ТаблицаСырья.Колонки.Добавить("КорСубконтоСписанияБУ1");
	ТаблицаСырья.Колонки.Добавить("КорСубконтоСписанияБУ2");
	ТаблицаСырья.Колонки.Добавить("КорСубконтоСписанияБУ3"); 
	ТаблицаСырья.ЗаполнитьЗначения(СчетЗатрат,                                 "КорСчетСписанияБУ");
	ТаблицаСырья.ЗаполнитьЗначения(Субконто1,                                  "КорСубконтоСписанияБУ1");
	ТаблицаСырья.ЗаполнитьЗначения(Субконто2,                                  "КорСубконтоСписанияБУ2");
	ТаблицаСырья.ЗаполнитьЗначения(Субконто3,                                  "КорСубконтоСписанияБУ3");
		
	Возврат ТаблицаСырья;
	
КонецФункции

// Процедура выполняет движения по регистрам
//
Процедура ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаСырья, Отказ, Заголовок)
	
	ПровестиПоРегистрамЭлеватора(РежимПроведения, СтруктураШапкиДокумента, Отказ, Заголовок);
	
	// Движения по регистрам (бухгалтерии, налоговым, накопления - для партий) если владелец является собственным подразделением.
	Если ОтражатьПоЗатратам И ВидОперации = Перечисления.ИНАГРО_ВидыОперацийПереработка.СобственноеСырье Тогда
		Если ОтражатьВБухгалтерскомУчете Тогда
			СписаниеСырьяБУХ(Движения, СтруктураШапкиДокумента, ТаблицаСырья, Отказ);
		КонецЕсли;		
	КонецЕсли;
	
	Движения.Хозрасчетный.Записать();
	
	ИНАГРО_Общий.ИНАГРО_ДвиженияВыпускПродукции(СтруктураШапкиДокумента, Движения);
	ИНАГРО_Общий.ИНАГРО_ДвиженияЗатратыОрганизации_Приход(СтруктураШапкиДокумента, Движения);
		
КонецПроцедуры 

Процедура ПровестиПоРегистрамЭлеватора(РежимПроведения, СтруктураШапкиДокумента, Отказ, Заголовок)
	
	ВестиУчетПоПереработке = ИНАГРО_Элеватор.ПолучитьПараметрУчетаЭлеватора(СтруктураШапкиДокумента.Дата, "ВестиУчетПоПереработке", Ложь);
	
	// расход сырья	
	Если ВестиУчетПоПереработке Тогда 
		
		Для Каждого СтрокаТабличнойЧасти Из Сырье Цикл
			
			СтруктураДвиженияПроведения(Сырье, СтруктураШапкиДокумента, СтрокаТабличнойЧасти);
		    СтруктураШапкиДокумента.Вставить("НомерАнализа", СтрокаТабличнойЧасти.НомерАнализа);

			Если ВидОперации = Перечисления.ИНАГРО_ВидыОперацийПереработка.СкладскойУчет Тогда
				ИНАГРО_Элеватор.ДвиженияПоРегиструДвиженияПоПереработке(Движения, СтруктураШапкиДокумента, ВидДвиженияНакопления.Приход);       
			Иначе 
				ИНАГРО_Элеватор.ДвиженияПоРегиструОстаткиПриход(Движения, СтруктураШапкиДокумента);
				ИНАГРО_Элеватор.ДвиженияПоРегиструДвиженияПоПереработке(Движения, СтруктураШапкиДокумента, ВидДвиженияНакопления.Расход);
				ИНАГРО_Элеватор.ДвиженияПоРегиструФорма36Расход(Движения, СтруктураШапкиДокумента);
				ИНАГРО_Элеватор.ДвиженияПоРегиструФорма36СводнаяРасход(Движения, СтруктураШапкиДокумента);
				ДвижениеПоЗатратамНаПроизводствеБУХ(СтруктураШапкиДокумента);  
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		
		Если ВидОперации <> Перечисления.ИНАГРО_ВидыОперацийПереработка.СкладскойУчет Тогда
			
			Для Каждого СтрокаТабличнойЧасти Из Сырье Цикл
				
				СтруктураДвиженияПроведения(Сырье, СтруктураШапкиДокумента, СтрокаТабличнойЧасти);
		        СтруктураШапкиДокумента.Вставить("НомерАнализа",   СтрокаТабличнойЧасти.НомерАнализа);
				СтруктураШапкиДокумента.Вставить("КоличествоМест", 0);
				
				ИНАГРО_Элеватор.ДвиженияПоРегиструОстаткиРасход(Движения, СтруктураШапкиДокумента);
				ИНАГРО_Элеватор.ДвиженияПоРегиструОстаткиСводнаяРасход(Движения, СтруктураШапкиДокумента); 
				ИНАГРО_Элеватор.ДвиженияПоРегиструФорма36Расход(Движения, СтруктураШапкиДокумента);
				ИНАГРО_Элеватор.ДвиженияПоРегиструФорма36СводнаяРасход(Движения, СтруктураШапкиДокумента);
				ДвижениеПоЗатратамНаПроизводствеБУХ(СтруктураШапкиДокумента);
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;	
	
	Если ВидОперации <> Перечисления.ИНАГРО_ВидыОперацийПереработка.СкладскойУчет Тогда 
				
		ПровестиПоРегиструДанныеПоКачествуПартийЗерна();
		
	КонецЕсли;
	
	Если ВидОперации = Перечисления.ИНАГРО_ВидыОперацийПереработка.ДавальческоеСырье Тогда
		
		ТаблицаУслуг = СформироватьТаблицуУслуг();
		
		Если ТаблицаУслуг.Количество() > 0 Тогда
			ИНАГРО_Элеватор.ДвиженияПоРегиструРасчетыПоУслугам(Движения, ТаблицаУслуг, "Приход");
		КонецЕсли;
			
	КонецЕсли;
	
КонецПроцедуры	

// Делает движения в зависимости от вида операций в Рецепте
// Если вид операции - по одной готовой продукции, то берем продукцию
// из реквизита продукция и процент продукции = 100,
// Иначе перебираем таблицу "Продукция" док. Рецепт.
//
//
Процедура ДвижениеПоЗатратамНаПроизводствеБУХ(СтруктураШапкиДокумента)
	
	СтруктураОчистки = Новый Структура("Продукция", "ПроцентПродукции");
	
	Если Рецепт.ВидОперации = Перечисления.ИНАГРО_ВидыОперацийРецепт.РецептПоОднойГотовойПродукции Тогда
		// если в рецепте одна продукция
		
		// удалим продукцию и процент продукции, если он есть в Структуре
		ИНАГРО_Элеватор.ОчиститьСтруктуруПараметров(СтруктураОчистки);	
		
		// вставляем новые значения
		СтруктураШапкиДокумента.Вставить("Продукция",        Рецепт.Продукция);
		СтруктураШапкиДокумента.Вставить("ПроцентПродукции", 100);
		
		ИНАГРО_Элеватор.ДвиженияПоРегиструЗатратыНаПроизводство(СтруктураШапкиДокумента, Движения);
		
	Иначе
		// если в рецепте несколько продукций
		Для Каждого СтрокаПродукции Из Рецепт.СписокПродукции Цикл
			
			// удалим продукцию и процент продукции, если он есть в Структуре
			ИНАГРО_Элеватор.ОчиститьСтруктуруПараметров(СтруктураОчистки);			
			// вставляем новые значения
			СтруктураШапкиДокумента.Вставить("Продукция",        СтрокаПродукции.Номенклатура);
			СтруктураШапкиДокумента.Вставить("ПроцентПродукции", СтрокаПродукции.Процент);
			
			ИНАГРО_Элеватор.ДвиженияПоРегиструЗатратыНаПроизводство(СтруктураШапкиДокумента, Движения, СтрокаПродукции);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПровестиПоРегиструДанныеПоКачествуПартийЗерна()
	
	// Подготовим таблицу для проведения по регистру "ИНАГРО_ДанныеПоКачествуПартийЗерна".
	ТаблицаПоПартиям        = ПодготовитьТаблицуПоПартиям();
	ПараметрыУчетаЭлеватора = ИНАГРО_Элеватор.ПолучитьПараметрыУчетаЭлеватора(Дата);

	// Движения по регистру ДанныеПоКачествуПартийЗерна
	Если ТаблицаПоПартиям <> Неопределено Тогда
		Если ПараметрыУчетаЭлеватора <> Неопределено Тогда
			Если ПараметрыУчетаЭлеватора.ИспользоватьСистемуКонтроляКачестваПартийЗерна Тогда
				НаборДвижений = Движения.ИНАГРО_ДанныеПоКачествуПартийЗерна;
				ТаблицаДвижений                = НаборДвижений.Выгрузить();
				ОбщегоНазначенияБПВызовСервера.ЗагрузитьВТаблицуЗначений(ТаблицаПоПартиям, ТаблицаДвижений);
				НаборДвижений.мПериод          = Дата;
				НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;
				Движения.ИНАГРО_ДанныеПоКачествуПартийЗерна.ВыполнитьДвижения();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры	

// Процедура для списания сырья по регистрам в случае, если владелец является собственным подразделением.
//
Процедура СписаниеСырьяБУХ(Движения, СтруктураШапкиДокумента, ТаблицаСырья,Отказ)
	
	// списание товара
	УправлениеЗапасамиПартионныйУчет.ДвижениеПартийТоваров(ТаблицаСырья, Отказ, , );
		
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ЗаполнитьПоДокументуОснованию(Основание)
	
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ИНАГРО_Форма117") Тогда
		
		Организация                 = Основание.Организация;		
		Владелец                    = Основание.Владелец;
		ДоговорКонтрагента          = Основание.ДоговорКонтрагента;
		ОтражатьВБухгалтерскомУчете = Истина;
		ПодразделениеОрганизации    = Основание.ПодразделениеОрганизации;
		Склад                       = Основание.Склад;
		ВидХранения                 = Основание.ВидХранения;		
		Урожай                      = Основание.Урожай;
		
		СобственноеПодразделение    = ИНАГРО_Элеватор.ПолучитьДополнительныйРеквизитКонтрагента(Владелец, "СобственноеПодразделение");

		Если СобственноеПодразделение Тогда
			ВидОперации        = Перечисления.ИНАГРО_ВидыОперацийПереработка.СобственноеСырье;
			ОтражатьПоЗатратам = Истина;
		Иначе
			ВидОперации        = Перечисления.ИНАГРО_ВидыОперацийПереработка.ДавальческоеСырье;
			ОтражатьПоЗатратам = Ложь;
		КонецЕсли;
		
		// Заполнить счет затрат в зависимости от вида операции
		СчетЗатрат = ?(ВидОперации = Перечисления.ИНАГРО_ВидыОперацийПереработка.СобственноеСырье,
			ПланыСчетов.Хозрасчетный.ОсновноеПроизводство,
			ПланыСчетов.Хозрасчетный.ПроизводствоИзДавальческогоСырья);		
		
		Для Каждого СтрокаТабличнойЧасти Из Основание.Сырье Цикл
			
			НоваяСтрока = Сырье.Добавить();			
			НоваяСтрока.Номенклатура       = СтрокаТабличнойЧасти.Номенклатура;			
			НоваяСтрока.ЕдиницаИзмерения   = СтрокаТабличнойЧасти.Номенклатура.БазоваяЕдиницаИзмерения;
			НоваяСтрока.Коэффициент        = 1;			
			НоваяСтрока.ФизическийВес      = СтрокаТабличнойЧасти.ФизическийВес;
			НоваяСтрока.ЗачетныйВес        = СтрокаТабличнойЧасти.ФизическийВес;
			НоваяСтрока.ЛабораторныйАнализ = СтрокаТабличнойЧасти.ЛабораторныйАнализ;
			НоваяСтрока.НомерАнализа       = СтрокаТабличнойЧасти.ЛабораторныйАнализ.Номер;
			НоваяСтрока.Влажность          = СтрокаТабличнойЧасти.ЛабораторныйАнализ.Влажность;
			НоваяСтрока.СорнаяПримесь      = СтрокаТабличнойЧасти.ЛабораторныйАнализ.СорнаяПримесь;
			НоваяСтрока.ЗерноваяПримесь    = СтрокаТабличнойЧасти.ЛабораторныйАнализ.ЗерноваяПримесь;			

		КонецЦикла;		
		
		Документы.ИНАГРО_АктСписания.ЗаполнитьСчетаУчетаВТабличнойЧасти(ЭтотОбъект, "Сырье", СобственноеПодразделение);
		
	КонецЕсли; 
			
КонецПроцедуры

Процедура ЗаполнитьУслуги() Экспорт
	
	Если НеПересчитыватьУслугиПриЗаписи Тогда
		Возврат;
	КонецЕсли;	
	
	ТаблицаУслуг = Новый ТаблицаЗначений;
	ТаблицаУслуг.Колонки.Добавить("Номенклатура");
	ТаблицаУслуг.Колонки.Добавить("Количество");
	ТаблицаУслуг.Колонки.Добавить("Сумма"); 
	ТаблицаУслуг.Колонки.Добавить("Культура");
	
	ВладелецУслуги = Владелец;
	
	Если НЕ ИНАГРО_Элеватор.ОпределитьПринадлежностьКонтрагента(ВладелецУслуги) Тогда
		ОформитьУслугу = Истина;
	Иначе
		ОформитьУслугу = Ложь;
	КонецЕсли;
	
	Если ОформитьУслугу Тогда
		
		Номенклатура_Переработка = ИНАГРО_Элеватор.ПолучитьПредопределеннуюНоменклатуру("Переработка");
		
		Если ЗначениеЗаполнено(Номенклатура_Переработка) Тогда
			
			Если ВидХранения.ТипДоговора =  Справочники.ВидыВзаиморасчетов.ДоговорХранения Тогда
				
				Для Каждого СтрокаТабличнойЧасти Из Сырье Цикл
					
					ВидКультурыДляРасчетаСтоимостиУслуги = ИНАГРО_Элеватор.ПолучитьДополнительныйРеквизитНоменклатуры(СтрокаТабличнойЧасти.Номенклатура, "ВидКультуры").ВидКультурыДляРасчетаСтоимостиУслуги;

					ТекущаяЦена = ИНАГРО_Элеватор.ПолучитьЦенуУслугиЭлеватора(Организация,
					                                                          Дата,
																			  ВладелецУслуги,
																			  ДоговорКонтрагента,
																			  ВидКультурыДляРасчетаСтоимостиУслуги,
																			  Урожай,
																			  Номенклатура_Переработка);
										
					Если ТекущаяЦена <> 0 И СтрокаТабличнойЧасти.ФизическийВес <> 0 Тогда 													 
						НоваяСтрока              = ТаблицаУслуг.Добавить();						
						НоваяСтрока.Культура     = СтрокаТабличнойЧасти.Номенклатура;
						НоваяСтрока.Номенклатура = Номенклатура_Переработка;             						
						НоваяСтрока.Количество   = СтрокаТабличнойЧасти.ЗачетныйВес / 1000;
						НоваяСтрока.Сумма        = НоваяСтрока.Количество * ТекущаяЦена;						
					Иначе
						ПараметрыОтбора = Новый Структура;
						ПараметрыОтбора.Вставить("Номенклатура", Номенклатура_Переработка);
						НайденныеСтроки = Услуги.НайтиСтроки(ПараметрыОтбора);
						Для Каждого Строк_Усл Из НайденныеСтроки Цикл
							Услуги.Удалить(Строк_Усл);
						КонецЦикла;
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ТаблицаУслуг.Свернуть("Номенклатура, Культура", "Количество, Сумма");
	Для Каждого Строка_Услуг Из ТаблицаУслуг Цикл
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("Культура", Строка_Услуг.Культура);
		НайденныеСтроки = Услуги.НайтиСтроки(ПараметрыОтбора);
		Если НайденныеСтроки.Количество() = 0 Тогда
			НоваяСтрока              = Услуги.Добавить();
			НоваяСтрока.Номенклатура = Строка_Услуг.Номенклатура;
			НоваяСтрока.Количество   = Строка_Услуг.Количество;
			НоваяСтрока.Сумма        = Строка_Услуг.Сумма;
			НоваяСтрока.Цена         = Строка_Услуг.Сумма / Строка_Услуг.Количество;
			НоваяСтрока.Культура     = Строка_Услуг.Культура;
		Иначе
			Для Каждого Строк_Усл Из НайденныеСтроки Цикл				
				Строк_Усл.Номенклатура = Строка_Услуг.Номенклатура;
				Строк_Усл.Количество   = Строка_Услуг.Количество;
				Строк_Усл.Цена         = Строка_Услуг.Сумма / Строка_Услуг.Количество;
				Строк_Усл.Сумма        = Строка_Услуг.Сумма;
				Строк_Усл.культура     = Строка_Услуг.Культура;				  
			КонецЦикла;	
		КонецЕсли;		
	КонецЦикла;
	
КонецПроцедуры

Процедура СтруктураДвиженияПроведения(ИмяТабЧасти, СтруктураШапкиДокумента, СтрокаТабличнойЧасти)
	
	СтруктураШапкиДокумента.Вставить("Номенклатура",       СтрокаТабличнойЧасти.Номенклатура);
	СтруктураШапкиДокумента.Вставить("НомерАнализа",       СтрокаТабличнойЧасти.НомерАнализа);
	СтруктураШапкиДокумента.Вставить("ФизическийВес",      СтрокаТабличнойЧасти.ФизическийВес);
	СтруктураШапкиДокумента.Вставить("ЛабораторныйАнализ", СтрокаТабличнойЧасти.ЛабораторныйАнализ);
	СтруктураШапкиДокумента.Вставить("Влажность",          СтрокаТабличнойЧасти.Влажность);
	СтруктураШапкиДокумента.Вставить("СорнаяПримесь",      СтрокаТабличнойЧасти.СорнаяПримесь);
	СтруктураШапкиДокумента.Вставить("ЗерноваяПримесь",    СтрокаТабличнойЧасти.ЗерноваяПримесь);
	СтруктураШапкиДокумента.Вставить("Поставщик",          Владелец);
	СтруктураШапкиДокумента.Вставить("Откуда",             Склад);
	СтруктураШапкиДокумента.Вставить("ЗачетныйВес",        СтрокаТабличнойЧасти.ЗачетныйВес);
	СтруктураШапкиДокумента.Вставить("Количество",         СтрокаТабличнойЧасти.Количество);
	СтруктураШапкиДокумента.Вставить("ВесПродукции",       0);
	
КонецПроцедуры

Функция СформироватьТаблицуУслуг()
	
	ТаблицаУслуг = Новый ТаблицаЗначений;
	ТаблицаУслуг.Колонки.Добавить("ДатаРасчета");
	ТаблицаУслуг.Колонки.Добавить("Ссылка"); 
	ТаблицаУслуг.Колонки.Добавить("Организация");
	ТаблицаУслуг.Колонки.Добавить("Контрагент");
	ТаблицаУслуг.Колонки.Добавить("ДоговорКонтрагента");
	ТаблицаУслуг.Колонки.Добавить("Номенклатура");
	ТаблицаУслуг.Колонки.Добавить("Культура");
	ТаблицаУслуг.Колонки.Добавить("Склад");
	ТаблицаУслуг.Колонки.Добавить("ВидХранения");
	ТаблицаУслуг.Колонки.Добавить("Урожай");
	ТаблицаУслуг.Колонки.Добавить("Количество");
	ТаблицаУслуг.Колонки.Добавить("Стоимость"); 
	
	ВладелецУслуги = Владелец;
	
	СобственноеПодразделение = ИНАГРО_Элеватор.ПолучитьДополнительныйРеквизитКонтрагента(Владелец, "СобственноеПодразделение");
	Номенклатура_Переработка = ИНАГРО_Элеватор.ПолучитьПредопределеннуюНоменклатуру("Переработка");

	Если НЕ СобственноеПодразделение Тогда	
		
		Для Каждого СтрокаТабличнойЧасти Из Услуги Цикл
			
			ВидКультурыДляРасчетаСтоимостиУслуги = ИНАГРО_Элеватор.ПолучитьДополнительныйРеквизитНоменклатуры(СтрокаТабличнойЧасти.Номенклатура, "ВидКультуры").ВидКультурыДляРасчетаСтоимостиУслуги;
			
			ТекущаяЦена = ИНАГРО_Элеватор.ПолучитьЦенуУслугиЭлеватора(Организация,
			                                                          Дата,
																	  ВладелецУслуги,
																	  ДоговорКонтрагента,
																	  ВидКультурыДляРасчетаСтоимостиУслуги,
																	  Урожай,
																	  Номенклатура_Переработка);
			
			Если ТекущаяЦена <> 0 Тогда
				
				НоваяСтрока = ТаблицаУслуг.Добавить();
				НоваяСтрока.ДатаРасчета        = Дата;  
				НоваяСтрока.Ссылка             = Ссылка; 
				НоваяСтрока.Организация        = Организация;
				НоваяСтрока.Контрагент         = ВладелецУслуги;
				НоваяСтрока.ДоговорКонтрагента = ДоговорКонтрагента;
				НоваяСтрока.Номенклатура       = Номенклатура_Переработка;
				НоваяСтрока.Культура           = СтрокаТабличнойЧасти.Культура;
				НоваяСтрока.Склад              = Склад;
				НоваяСтрока.ВидХранения        = ВидХранения;
				НоваяСтрока.Урожай             = Урожай;    				
				НоваяСтрока.Количество         = СтрокаТабличнойЧасти.Количество;
				НоваяСтрока.Стоимость          = НоваяСтрока.Количество * ТекущаяЦена;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ТаблицаУслуг;
	
КонецФункции

Функция ПодготовитьТаблицуПоПартиям()
	
	резТаблица = Неопределено;
	
	СписокНоменклатур   = Новый СписокЗначений;
	СписокХарактеристик = Новый СписокЗначений;
	
	Для Каждого СтрокаТабличнойЧасти ИЗ Сырье Цикл
		СписокНоменклатур.Добавить(СтрокаТабличнойЧасти.Номенклатура);
	КонецЦикла;
	
	Запрос = Новый Запрос;
		
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаРегистра.*
		|ИЗ
		|	РегистрСведений.ИНАГРО_ДанныеПоКачествуПартийЗерна.СрезПоследних(
		|			&МоментВремени,
		|			Организация = &Организация
		|				И Контрагент = &Контрагент
		|				И ДоговорКонтрагента = &ДоговорКонтрагента
		|				И Номенклатура В (&СписокНоменклатур)
		|				И Склад = &Склад
		|				И ВидХранения = &ВидХранения
		|				И Урожай = &Урожай) КАК ТаблицаРегистра
		|
		|УПОРЯДОЧИТЬ ПО
		|	ТаблицаРегистра.ПартияЗерна.Дата";	
	
	Запрос.УстановитьПараметр("МоментВремени",       МоментВремени());
	Запрос.УстановитьПараметр("Организация",         Организация);
	Запрос.УстановитьПараметр("Контрагент",          Владелец);
	Запрос.УстановитьПараметр("ДоговорКонтрагента",  ДоговорКонтрагента);
	Запрос.УстановитьПараметр("СписокНоменклатур",   СписокНоменклатур);
	Запрос.УстановитьПараметр("Склад",               Склад);
	Запрос.УстановитьПараметр("ВидХранения",         ВидХранения);
	Запрос.УстановитьПараметр("Урожай",              Урожай);
	Запрос.УстановитьПараметр("СписокХарактеристик", СписокХарактеристик);

	ТаблицаРезультатаЗапроса = Запрос.Выполнить().Выгрузить();			   
	
	Если ТаблицаРезультатаЗапроса.Количество() > 0 Тогда 
		
		резТаблица = ТаблицаРезультатаЗапроса.Скопировать();
		резТаблица.Очистить();
		
		Для Каждого СтрокаТабличнойЧасти ИЗ Сырье Цикл
			
			ОбщийВесПереоформления = СтрокаТабличнойЧасти.ФизическийВес;
			
			СтруктураОтбора = Новый Структура;
			СтруктураОтбора.Вставить("Номенклатура", СтрокаТабличнойЧасти.Номенклатура);
			СтрокиПартий = ТаблицаРезультатаЗапроса.НайтиСтроки(СтруктураОтбора);
			
			Если СтрокиПартий.Количество() > 0 Тогда
				
				Для Каждого СтрокаПартии Из СтрокиПартий Цикл
					
					Если ОбщийВесПереоформления > 0 Тогда
						
						ОстатокПартии = СтрокаПартии.ФизическийВесИтоговый - СтрокаПартии.Вывезено;
						
						Если ОстатокПартии > 0 Тогда
							НоваяСтрока = резТаблица.Добавить();
							ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаПартии);
							НоваяСтрока.Вывезено   = СтрокаПартии.Вывезено + МИН(ОстатокПартии, ОбщийВесПереоформления);
							ОбщийВесПереоформления = ОбщийВесПереоформления - МИН(ОстатокПартии, ОбщийВесПереоформления);
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если резТаблица.Количество() = 0 Тогда
			резТаблица = Неопределено;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат резТаблица;
	
КонецФункции	

#КонецОбласти

мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();

#КонецЕсли